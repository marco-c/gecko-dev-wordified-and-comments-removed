#
ifndef
_wayland_proxy_h_
#
define
_wayland_proxy_h_
#
include
<
poll
.
h
>
#
include
<
vector
>
#
include
<
fcntl
.
h
>
#
include
<
atomic
>
#
include
<
memory
>
class
ProxiedConnection
;
class
WaylandProxy
{
public
:
static
std
:
:
unique_ptr
<
WaylandProxy
>
Create
(
)
;
bool
RunChildApplication
(
char
*
argv
[
]
)
;
bool
RunThread
(
)
;
void
SetWaylandDisplay
(
)
;
static
void
SetVerbose
(
bool
aVerbose
)
;
~
WaylandProxy
(
)
;
private
:
bool
Init
(
)
;
void
Run
(
)
;
void
SetWaylandProxyDisplay
(
)
;
static
void
*
RunProxyThread
(
WaylandProxy
*
aProxy
)
;
bool
SetupWaylandDisplays
(
)
;
bool
StartProxyServer
(
)
;
bool
IsChildAppTerminated
(
)
;
bool
PollConnections
(
)
;
bool
ProcessConnections
(
)
;
private
:
std
:
:
vector
<
std
:
:
unique_ptr
<
ProxiedConnection
>
>
mConnections
;
int
mProxyServerSocket
=
-
1
;
pid_t
mApplicationPID
=
0
;
std
:
:
atomic
<
bool
>
mThreadRunning
=
false
;
pthread_t
mThread
;
}
;
#
endif
