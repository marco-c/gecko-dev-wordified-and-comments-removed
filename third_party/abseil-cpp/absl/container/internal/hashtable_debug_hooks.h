#
ifndef
ABSL_CONTAINER_INTERNAL_HASHTABLE_DEBUG_HOOKS_H_
#
define
ABSL_CONTAINER_INTERNAL_HASHTABLE_DEBUG_HOOKS_H_
#
include
<
cstddef
>
#
include
<
algorithm
>
#
include
<
type_traits
>
#
include
<
vector
>
#
include
"
absl
/
base
/
config
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
container_internal
{
namespace
hashtable_debug_internal
{
using
std
:
:
get
;
template
<
typename
T
typename
=
typename
T
:
:
mapped_type
>
auto
GetKey
(
const
typename
T
:
:
value_type
&
pair
int
)
-
>
decltype
(
get
<
0
>
(
pair
)
)
{
return
get
<
0
>
(
pair
)
;
}
template
<
typename
T
>
const
typename
T
:
:
key_type
&
GetKey
(
const
typename
T
:
:
key_type
&
key
char
)
{
return
key
;
}
template
<
class
Container
typename
Enabler
=
void
>
struct
HashtableDebugAccess
{
static
size_t
GetNumProbes
(
const
Container
&
c
const
typename
Container
:
:
key_type
&
key
)
{
if
(
!
c
.
bucket_count
(
)
)
return
{
}
;
size_t
num_probes
=
0
;
size_t
bucket
=
c
.
bucket
(
key
)
;
for
(
auto
it
=
c
.
begin
(
bucket
)
e
=
c
.
end
(
bucket
)
;
;
+
+
it
+
+
num_probes
)
{
if
(
it
=
=
e
)
return
num_probes
;
if
(
c
.
key_eq
(
)
(
key
GetKey
<
Container
>
(
*
it
0
)
)
)
return
num_probes
;
}
}
}
;
}
}
ABSL_NAMESPACE_END
}
#
endif
