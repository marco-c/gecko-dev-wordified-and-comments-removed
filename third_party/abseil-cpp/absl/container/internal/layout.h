#
ifndef
ABSL_CONTAINER_INTERNAL_LAYOUT_H_
#
define
ABSL_CONTAINER_INTERNAL_LAYOUT_H_
#
include
<
assert
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
ostream
>
#
include
<
string
>
#
include
<
tuple
>
#
include
<
type_traits
>
#
include
<
typeinfo
>
#
include
<
utility
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
meta
/
type_traits
.
h
"
#
include
"
absl
/
strings
/
str_cat
.
h
"
#
include
"
absl
/
types
/
span
.
h
"
#
include
"
absl
/
utility
/
utility
.
h
"
#
ifdef
ABSL_HAVE_ADDRESS_SANITIZER
#
include
<
sanitizer
/
asan_interface
.
h
>
#
endif
#
if
defined
(
__GXX_RTTI
)
#
define
ABSL_INTERNAL_HAS_CXA_DEMANGLE
#
endif
#
ifdef
ABSL_INTERNAL_HAS_CXA_DEMANGLE
#
include
<
cxxabi
.
h
>
#
endif
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
container_internal
{
template
<
class
T
size_t
N
>
struct
Aligned
;
namespace
internal_layout
{
template
<
class
T
>
struct
NotAligned
{
}
;
template
<
class
T
size_t
N
>
struct
NotAligned
<
const
Aligned
<
T
N
>
>
{
static_assert
(
sizeof
(
T
)
=
=
0
"
Aligned
<
T
N
>
cannot
be
const
-
qualified
"
)
;
}
;
template
<
size_t
>
using
IntToSize
=
size_t
;
template
<
class
>
using
TypeToSize
=
size_t
;
template
<
class
T
>
struct
Type
:
NotAligned
<
T
>
{
using
type
=
T
;
}
;
template
<
class
T
size_t
N
>
struct
Type
<
Aligned
<
T
N
>
>
{
using
type
=
T
;
}
;
template
<
class
T
>
struct
SizeOf
:
NotAligned
<
T
>
std
:
:
integral_constant
<
size_t
sizeof
(
T
)
>
{
}
;
template
<
class
T
size_t
N
>
struct
SizeOf
<
Aligned
<
T
N
>
>
:
std
:
:
integral_constant
<
size_t
sizeof
(
T
)
>
{
}
;
template
<
class
T
>
struct
AlignOf
:
NotAligned
<
T
>
{
static
constexpr
size_t
value
=
alignof
(
T
)
;
}
;
template
<
class
T
size_t
N
>
struct
AlignOf
<
Aligned
<
T
N
>
>
{
static_assert
(
N
%
alignof
(
T
)
=
=
0
"
Custom
alignment
can
'
t
be
lower
than
the
type
'
s
alignment
"
)
;
static
constexpr
size_t
value
=
N
;
}
;
template
<
class
T
class
.
.
.
Ts
>
using
Contains
=
absl
:
:
disjunction
<
std
:
:
is_same
<
T
Ts
>
.
.
.
>
;
template
<
class
From
class
To
>
using
CopyConst
=
typename
std
:
:
conditional
<
std
:
:
is_const
<
From
>
:
:
value
const
To
To
>
:
:
type
;
template
<
class
T
>
using
SliceType
=
Span
<
T
>
;
namespace
adl_barrier
{
template
<
class
Needle
class
.
.
.
Ts
>
constexpr
size_t
Find
(
Needle
Needle
Ts
.
.
.
)
{
static_assert
(
!
Contains
<
Needle
Ts
.
.
.
>
(
)
"
Duplicate
element
type
"
)
;
return
0
;
}
template
<
class
Needle
class
T
class
.
.
.
Ts
>
constexpr
size_t
Find
(
Needle
T
Ts
.
.
.
)
{
return
adl_barrier
:
:
Find
(
Needle
(
)
Ts
(
)
.
.
.
)
+
1
;
}
constexpr
bool
IsPow2
(
size_t
n
)
{
return
!
(
n
&
(
n
-
1
)
)
;
}
constexpr
size_t
Align
(
size_t
n
size_t
m
)
{
return
(
n
+
m
-
1
)
&
~
(
m
-
1
)
;
}
constexpr
size_t
Min
(
size_t
a
size_t
b
)
{
return
b
<
a
?
b
:
a
;
}
constexpr
size_t
Max
(
size_t
a
)
{
return
a
;
}
template
<
class
.
.
.
Ts
>
constexpr
size_t
Max
(
size_t
a
size_t
b
Ts
.
.
.
rest
)
{
return
adl_barrier
:
:
Max
(
b
<
a
?
a
:
b
rest
.
.
.
)
;
}
template
<
class
T
>
std
:
:
string
TypeName
(
)
{
std
:
:
string
out
;
int
status
=
0
;
char
*
demangled
=
nullptr
;
#
ifdef
ABSL_INTERNAL_HAS_CXA_DEMANGLE
demangled
=
abi
:
:
__cxa_demangle
(
typeid
(
T
)
.
name
(
)
nullptr
nullptr
&
status
)
;
#
endif
if
(
status
=
=
0
&
&
demangled
!
=
nullptr
)
{
absl
:
:
StrAppend
(
&
out
"
<
"
demangled
"
>
"
)
;
free
(
demangled
)
;
}
else
{
#
if
defined
(
__GXX_RTTI
)
|
|
defined
(
_CPPRTTI
)
absl
:
:
StrAppend
(
&
out
"
<
"
typeid
(
T
)
.
name
(
)
"
>
"
)
;
#
endif
}
return
out
;
}
}
template
<
bool
C
>
using
EnableIf
=
typename
std
:
:
enable_if
<
C
int
>
:
:
type
;
template
<
class
T
>
using
IsLegalElementType
=
std
:
:
integral_constant
<
bool
!
std
:
:
is_reference
<
T
>
:
:
value
&
&
!
std
:
:
is_volatile
<
T
>
:
:
value
&
&
!
std
:
:
is_reference
<
typename
Type
<
T
>
:
:
type
>
:
:
value
&
&
!
std
:
:
is_volatile
<
typename
Type
<
T
>
:
:
type
>
:
:
value
&
&
adl_barrier
:
:
IsPow2
(
AlignOf
<
T
>
:
:
value
)
>
;
template
<
class
Elements
class
SizeSeq
class
OffsetSeq
>
class
LayoutImpl
;
template
<
class
.
.
.
Elements
size_t
.
.
.
SizeSeq
size_t
.
.
.
OffsetSeq
>
class
LayoutImpl
<
std
:
:
tuple
<
Elements
.
.
.
>
absl
:
:
index_sequence
<
SizeSeq
.
.
.
>
absl
:
:
index_sequence
<
OffsetSeq
.
.
.
>
>
{
private
:
static_assert
(
sizeof
.
.
.
(
Elements
)
>
0
"
At
least
one
field
is
required
"
)
;
static_assert
(
absl
:
:
conjunction
<
IsLegalElementType
<
Elements
>
.
.
.
>
:
:
value
"
Invalid
element
type
(
see
IsLegalElementType
)
"
)
;
enum
{
NumTypes
=
sizeof
.
.
.
(
Elements
)
NumSizes
=
sizeof
.
.
.
(
SizeSeq
)
NumOffsets
=
sizeof
.
.
.
(
OffsetSeq
)
}
;
static_assert
(
NumOffsets
=
=
adl_barrier
:
:
Min
(
NumTypes
NumSizes
+
1
)
"
Internal
error
"
)
;
static_assert
(
NumTypes
>
0
"
Internal
error
"
)
;
template
<
class
T
>
static
constexpr
size_t
ElementIndex
(
)
{
static_assert
(
Contains
<
Type
<
T
>
Type
<
typename
Type
<
Elements
>
:
:
type
>
.
.
.
>
(
)
"
Type
not
found
"
)
;
return
adl_barrier
:
:
Find
(
Type
<
T
>
(
)
Type
<
typename
Type
<
Elements
>
:
:
type
>
(
)
.
.
.
)
;
}
template
<
size_t
N
>
using
ElementAlignment
=
AlignOf
<
typename
std
:
:
tuple_element
<
N
std
:
:
tuple
<
Elements
.
.
.
>
>
:
:
type
>
;
public
:
using
ElementTypes
=
std
:
:
tuple
<
typename
Type
<
Elements
>
:
:
type
.
.
.
>
;
template
<
size_t
N
>
using
ElementType
=
typename
std
:
:
tuple_element
<
N
ElementTypes
>
:
:
type
;
constexpr
explicit
LayoutImpl
(
IntToSize
<
SizeSeq
>
.
.
.
sizes
)
:
size_
{
sizes
.
.
.
}
{
}
static
constexpr
size_t
Alignment
(
)
{
return
adl_barrier
:
:
Max
(
AlignOf
<
Elements
>
:
:
value
.
.
.
)
;
}
template
<
size_t
N
EnableIf
<
N
=
=
0
>
=
0
>
constexpr
size_t
Offset
(
)
const
{
return
0
;
}
template
<
size_t
N
EnableIf
<
N
!
=
0
>
=
0
>
constexpr
size_t
Offset
(
)
const
{
static_assert
(
N
<
NumOffsets
"
Index
out
of
bounds
"
)
;
return
adl_barrier
:
:
Align
(
Offset
<
N
-
1
>
(
)
+
SizeOf
<
ElementType
<
N
-
1
>
>
:
:
value
*
size_
[
N
-
1
]
ElementAlignment
<
N
>
:
:
value
)
;
}
template
<
class
T
>
constexpr
size_t
Offset
(
)
const
{
return
Offset
<
ElementIndex
<
T
>
(
)
>
(
)
;
}
constexpr
std
:
:
array
<
size_t
NumOffsets
>
Offsets
(
)
const
{
return
{
{
Offset
<
OffsetSeq
>
(
)
.
.
.
}
}
;
}
template
<
size_t
N
>
constexpr
size_t
Size
(
)
const
{
static_assert
(
N
<
NumSizes
"
Index
out
of
bounds
"
)
;
return
size_
[
N
]
;
}
template
<
class
T
>
constexpr
size_t
Size
(
)
const
{
return
Size
<
ElementIndex
<
T
>
(
)
>
(
)
;
}
constexpr
std
:
:
array
<
size_t
NumSizes
>
Sizes
(
)
const
{
return
{
{
Size
<
SizeSeq
>
(
)
.
.
.
}
}
;
}
template
<
size_t
N
class
Char
>
CopyConst
<
Char
ElementType
<
N
>
>
*
Pointer
(
Char
*
p
)
const
{
using
C
=
typename
std
:
:
remove_const
<
Char
>
:
:
type
;
static_assert
(
std
:
:
is_same
<
C
char
>
(
)
|
|
std
:
:
is_same
<
C
unsigned
char
>
(
)
|
|
std
:
:
is_same
<
C
signed
char
>
(
)
"
The
argument
must
be
a
pointer
to
[
const
]
[
signed
|
unsigned
]
char
"
)
;
constexpr
size_t
alignment
=
Alignment
(
)
;
(
void
)
alignment
;
assert
(
reinterpret_cast
<
uintptr_t
>
(
p
)
%
alignment
=
=
0
)
;
return
reinterpret_cast
<
CopyConst
<
Char
ElementType
<
N
>
>
*
>
(
p
+
Offset
<
N
>
(
)
)
;
}
template
<
class
T
class
Char
>
CopyConst
<
Char
T
>
*
Pointer
(
Char
*
p
)
const
{
return
Pointer
<
ElementIndex
<
T
>
(
)
>
(
p
)
;
}
template
<
class
Char
>
std
:
:
tuple
<
CopyConst
<
Char
typename
std
:
:
tuple_element
<
OffsetSeq
ElementTypes
>
:
:
type
>
*
.
.
.
>
Pointers
(
Char
*
p
)
const
{
return
std
:
:
tuple
<
CopyConst
<
Char
ElementType
<
OffsetSeq
>
>
*
.
.
.
>
(
Pointer
<
OffsetSeq
>
(
p
)
.
.
.
)
;
}
template
<
size_t
N
class
Char
>
SliceType
<
CopyConst
<
Char
ElementType
<
N
>
>
>
Slice
(
Char
*
p
)
const
{
return
SliceType
<
CopyConst
<
Char
ElementType
<
N
>
>
>
(
Pointer
<
N
>
(
p
)
Size
<
N
>
(
)
)
;
}
template
<
class
T
class
Char
>
SliceType
<
CopyConst
<
Char
T
>
>
Slice
(
Char
*
p
)
const
{
return
Slice
<
ElementIndex
<
T
>
(
)
>
(
p
)
;
}
template
<
class
Char
>
std
:
:
tuple
<
SliceType
<
CopyConst
<
Char
typename
std
:
:
tuple_element
<
SizeSeq
ElementTypes
>
:
:
type
>
>
.
.
.
>
Slices
(
Char
*
p
)
const
{
(
void
)
p
;
return
std
:
:
tuple
<
SliceType
<
CopyConst
<
Char
ElementType
<
SizeSeq
>
>
>
.
.
.
>
(
Slice
<
SizeSeq
>
(
p
)
.
.
.
)
;
}
constexpr
size_t
AllocSize
(
)
const
{
static_assert
(
NumTypes
=
=
NumSizes
"
You
must
specify
sizes
of
all
fields
"
)
;
return
Offset
<
NumTypes
-
1
>
(
)
+
SizeOf
<
ElementType
<
NumTypes
-
1
>
>
:
:
value
*
size_
[
NumTypes
-
1
]
;
}
template
<
class
Char
size_t
N
=
NumOffsets
-
1
EnableIf
<
N
=
=
0
>
=
0
>
void
PoisonPadding
(
const
Char
*
p
)
const
{
Pointer
<
0
>
(
p
)
;
}
template
<
class
Char
size_t
N
=
NumOffsets
-
1
EnableIf
<
N
!
=
0
>
=
0
>
void
PoisonPadding
(
const
Char
*
p
)
const
{
static_assert
(
N
<
NumOffsets
"
Index
out
of
bounds
"
)
;
(
void
)
p
;
#
ifdef
ABSL_HAVE_ADDRESS_SANITIZER
PoisonPadding
<
Char
N
-
1
>
(
p
)
;
if
(
ElementAlignment
<
N
-
1
>
:
:
value
%
ElementAlignment
<
N
>
:
:
value
)
{
size_t
start
=
Offset
<
N
-
1
>
(
)
+
SizeOf
<
ElementType
<
N
-
1
>
>
:
:
value
*
size_
[
N
-
1
]
;
ASAN_POISON_MEMORY_REGION
(
p
+
start
Offset
<
N
>
(
)
-
start
)
;
}
#
endif
}
std
:
:
string
DebugString
(
)
const
{
const
auto
offsets
=
Offsets
(
)
;
const
size_t
sizes
[
]
=
{
SizeOf
<
ElementType
<
OffsetSeq
>
>
:
:
value
.
.
.
}
;
const
std
:
:
string
types
[
]
=
{
adl_barrier
:
:
TypeName
<
ElementType
<
OffsetSeq
>
>
(
)
.
.
.
}
;
std
:
:
string
res
=
absl
:
:
StrCat
(
"
0
"
types
[
0
]
"
(
"
sizes
[
0
]
"
)
"
)
;
for
(
size_t
i
=
0
;
i
!
=
NumOffsets
-
1
;
+
+
i
)
{
absl
:
:
StrAppend
(
&
res
"
[
"
size_
[
i
]
"
]
;
"
offsets
[
i
+
1
]
types
[
i
+
1
]
"
(
"
sizes
[
i
+
1
]
"
)
"
)
;
}
int
last
=
static_cast
<
int
>
(
NumSizes
)
-
1
;
if
(
NumTypes
=
=
NumSizes
&
&
last
>
=
0
)
{
absl
:
:
StrAppend
(
&
res
"
[
"
size_
[
last
]
"
]
"
)
;
}
return
res
;
}
private
:
size_t
size_
[
NumSizes
>
0
?
NumSizes
:
1
]
;
}
;
template
<
size_t
NumSizes
class
.
.
.
Ts
>
using
LayoutType
=
LayoutImpl
<
std
:
:
tuple
<
Ts
.
.
.
>
absl
:
:
make_index_sequence
<
NumSizes
>
absl
:
:
make_index_sequence
<
adl_barrier
:
:
Min
(
sizeof
.
.
.
(
Ts
)
NumSizes
+
1
)
>
>
;
}
template
<
class
.
.
.
Ts
>
class
Layout
:
public
internal_layout
:
:
LayoutType
<
sizeof
.
.
.
(
Ts
)
Ts
.
.
.
>
{
public
:
static_assert
(
sizeof
.
.
.
(
Ts
)
>
0
"
At
least
one
field
is
required
"
)
;
static_assert
(
absl
:
:
conjunction
<
internal_layout
:
:
IsLegalElementType
<
Ts
>
.
.
.
>
:
:
value
"
Invalid
element
type
(
see
IsLegalElementType
)
"
)
;
template
<
size_t
NumSizes
>
using
PartialType
=
internal_layout
:
:
LayoutType
<
NumSizes
Ts
.
.
.
>
;
template
<
class
.
.
.
Sizes
>
static
constexpr
PartialType
<
sizeof
.
.
.
(
Sizes
)
>
Partial
(
Sizes
&
&
.
.
.
sizes
)
{
static_assert
(
sizeof
.
.
.
(
Sizes
)
<
=
sizeof
.
.
.
(
Ts
)
"
"
)
;
return
PartialType
<
sizeof
.
.
.
(
Sizes
)
>
(
absl
:
:
forward
<
Sizes
>
(
sizes
)
.
.
.
)
;
}
constexpr
explicit
Layout
(
internal_layout
:
:
TypeToSize
<
Ts
>
.
.
.
sizes
)
:
internal_layout
:
:
LayoutType
<
sizeof
.
.
.
(
Ts
)
Ts
.
.
.
>
(
sizes
.
.
.
)
{
}
}
;
}
ABSL_NAMESPACE_END
}
#
endif
