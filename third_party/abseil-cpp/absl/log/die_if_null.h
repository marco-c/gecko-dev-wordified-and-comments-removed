#
ifndef
ABSL_LOG_DIE_IF_NULL_H_
#
define
ABSL_LOG_DIE_IF_NULL_H_
#
include
<
stdint
.
h
>
#
include
<
utility
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
optimization
.
h
"
#
define
ABSL_DIE_IF_NULL
(
val
)
\
:
:
absl
:
:
log_internal
:
:
DieIfNull
(
__FILE__
__LINE__
#
val
(
val
)
)
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
log_internal
{
[
[
noreturn
]
]
ABSL_ATTRIBUTE_NOINLINE
void
DieBecauseNull
(
const
char
*
file
int
line
const
char
*
exprtext
)
;
template
<
typename
T
>
[
[
nodiscard
]
]
T
DieIfNull
(
const
char
*
file
int
line
const
char
*
exprtext
T
&
&
t
)
{
if
(
ABSL_PREDICT_FALSE
(
t
=
=
nullptr
)
)
{
DieBecauseNull
(
file
line
exprtext
)
;
}
return
std
:
:
forward
<
T
>
(
t
)
;
}
}
ABSL_NAMESPACE_END
}
#
endif
