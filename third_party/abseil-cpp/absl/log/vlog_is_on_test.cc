#
include
"
absl
/
log
/
vlog_is_on
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
base
/
log_severity
.
h
"
#
include
"
absl
/
flags
/
flag
.
h
"
#
include
"
absl
/
log
/
flags
.
h
"
#
include
"
absl
/
log
/
globals
.
h
"
#
include
"
absl
/
log
/
log
.
h
"
#
include
"
absl
/
log
/
scoped_mock_log
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
namespace
{
using
:
:
testing
:
:
_
;
absl
:
:
optional
<
int
>
MaxLogVerbosity
(
)
{
#
ifdef
ABSL_MAX_VLOG_VERBOSITY
return
ABSL_MAX_VLOG_VERBOSITY
;
#
else
return
absl
:
:
nullopt
;
#
endif
}
absl
:
:
optional
<
int
>
MinLogLevel
(
)
{
#
ifdef
ABSL_MIN_LOG_LEVEL
return
static_cast
<
int
>
(
ABSL_MIN_LOG_LEVEL
)
;
#
else
return
absl
:
:
nullopt
;
#
endif
}
class
VLogIsOnTest
:
public
:
:
testing
:
:
Test
{
protected
:
void
SetUp
(
)
override
{
ResetVLogLevels
(
)
;
}
private
:
static
void
ResetVLogLevels
(
)
{
absl
:
:
log_internal
:
:
UpdateVModule
(
"
"
)
;
absl
:
:
SetGlobalVLogLevel
(
0
)
;
}
}
;
TEST_F
(
VLogIsOnTest
GlobalWorksWithoutMaxVerbosityAndMinLogLevel
)
{
if
(
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
MinLogLevel
(
)
.
has_value
(
)
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetGlobalVLogLevel
(
3
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
EXPECT_CALL
(
log
Log
(
absl
:
:
LogSeverity
:
:
kInfo
_
"
important
"
)
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
3
)
<
<
"
important
"
;
VLOG
(
4
)
<
<
"
spam
"
;
}
TEST_F
(
VLogIsOnTest
FileWorksWithoutMaxVerbosityAndMinLogLevel
)
{
if
(
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
MinLogLevel
(
)
.
has_value
(
)
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetVLogLevel
(
"
vlog_is_on_test
"
3
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
EXPECT_CALL
(
log
Log
(
absl
:
:
LogSeverity
:
:
kInfo
_
"
important
"
)
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
3
)
<
<
"
important
"
;
VLOG
(
4
)
<
<
"
spam
"
;
}
TEST_F
(
VLogIsOnTest
PatternWorksWithoutMaxVerbosityAndMinLogLevel
)
{
if
(
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
MinLogLevel
(
)
.
has_value
(
)
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetVLogLevel
(
"
vlog_is_on
*
"
3
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
EXPECT_CALL
(
log
Log
(
absl
:
:
LogSeverity
:
:
kInfo
_
"
important
"
)
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
3
)
<
<
"
important
"
;
VLOG
(
4
)
<
<
"
spam
"
;
}
TEST_F
(
VLogIsOnTest
PatternOverridesLessGenericOneWithoutMaxVerbosityAndMinLogLevel
)
{
if
(
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
MinLogLevel
(
)
.
has_value
(
)
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetVLogLevel
(
"
vlog_is_on
*
"
-
1
)
;
absl
:
:
SetVLogLevel
(
"
vlog
*
"
3
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
EXPECT_CALL
(
log
Log
(
absl
:
:
LogSeverity
:
:
kInfo
_
"
important
"
)
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
3
)
<
<
"
important
"
;
VLOG
(
4
)
<
<
"
spam
"
;
}
TEST_F
(
VLogIsOnTest
PatternDoesNotOverridesMoreGenericOneWithoutMaxVerbosityAndMinLogLevel
)
{
if
(
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
MinLogLevel
(
)
.
has_value
(
)
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetVLogLevel
(
"
vlog
*
"
3
)
;
absl
:
:
SetVLogLevel
(
"
vlog_is_on_some_other_test
*
"
-
1
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
EXPECT_CALL
(
log
Log
(
absl
:
:
LogSeverity
:
:
kInfo
_
"
important
"
)
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
3
)
<
<
"
important
"
;
VLOG
(
5
)
<
<
"
spam
"
;
}
TEST_F
(
VLogIsOnTest
GlobalDoesNotFilterBelowMaxVerbosity
)
{
if
(
!
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
*
MaxLogVerbosity
(
)
<
2
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetGlobalVLogLevel
(
1000
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
EXPECT_CALL
(
log
Log
(
absl
:
:
LogSeverity
:
:
kInfo
_
"
asdf
"
)
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
2
)
<
<
"
asdf
"
;
}
TEST_F
(
VLogIsOnTest
FileDoesNotFilterBelowMaxVerbosity
)
{
if
(
!
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
*
MaxLogVerbosity
(
)
<
2
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetVLogLevel
(
"
vlog_is_on_test
"
1000
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
EXPECT_CALL
(
log
Log
(
absl
:
:
LogSeverity
:
:
kInfo
_
"
asdf
"
)
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
2
)
<
<
"
asdf
"
;
}
TEST_F
(
VLogIsOnTest
PatternDoesNotFilterBelowMaxVerbosity
)
{
if
(
!
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
*
MaxLogVerbosity
(
)
<
2
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetVLogLevel
(
"
vlog_is_on
*
"
1000
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
EXPECT_CALL
(
log
Log
(
absl
:
:
LogSeverity
:
:
kInfo
_
"
asdf
"
)
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
2
)
<
<
"
asdf
"
;
}
TEST_F
(
VLogIsOnTest
GlobalFiltersAboveMaxVerbosity
)
{
if
(
!
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
*
MaxLogVerbosity
(
)
>
=
4
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetGlobalVLogLevel
(
1000
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
4
)
<
<
"
dfgh
"
;
}
TEST_F
(
VLogIsOnTest
FileFiltersAboveMaxVerbosity
)
{
if
(
!
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
*
MaxLogVerbosity
(
)
>
=
4
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetVLogLevel
(
"
vlog_is_on_test
"
1000
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
4
)
<
<
"
dfgh
"
;
}
TEST_F
(
VLogIsOnTest
PatternFiltersAboveMaxVerbosity
)
{
if
(
!
MaxLogVerbosity
(
)
.
has_value
(
)
|
|
*
MaxLogVerbosity
(
)
>
=
4
)
{
GTEST_SKIP
(
)
;
}
absl
:
:
SetVLogLevel
(
"
vlog_is_on
*
"
1000
)
;
absl
:
:
ScopedMockLog
log
(
absl
:
:
MockLogDefault
:
:
kDisallowUnexpected
)
;
log
.
StartCapturingLogs
(
)
;
VLOG
(
4
)
<
<
"
dfgh
"
;
}
}
