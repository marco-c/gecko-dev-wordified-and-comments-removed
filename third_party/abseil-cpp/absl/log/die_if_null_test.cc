#
include
"
absl
/
log
/
die_if_null
.
h
"
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
log
/
internal
/
test_helpers
.
h
"
namespace
{
auto
*
test_env
ABSL_ATTRIBUTE_UNUSED
=
:
:
testing
:
:
AddGlobalTestEnvironment
(
new
absl
:
:
log_internal
:
:
LogTestEnvironment
)
;
TEST
(
AbslDieIfNull
Simple
)
{
int64_t
t
;
void
*
ptr
=
static_cast
<
void
*
>
(
&
t
)
;
void
*
ref
=
ABSL_DIE_IF_NULL
(
ptr
)
;
ASSERT_EQ
(
ptr
ref
)
;
char
*
t_as_char
;
t_as_char
=
ABSL_DIE_IF_NULL
(
reinterpret_cast
<
char
*
>
(
&
t
)
)
;
(
void
)
t_as_char
;
unsigned
char
*
t_as_uchar
;
t_as_uchar
=
ABSL_DIE_IF_NULL
(
reinterpret_cast
<
unsigned
char
*
>
(
&
t
)
)
;
(
void
)
t_as_uchar
;
int
*
t_as_int
;
t_as_int
=
ABSL_DIE_IF_NULL
(
reinterpret_cast
<
int
*
>
(
&
t
)
)
;
(
void
)
t_as_int
;
int64_t
*
t_as_int64_t
;
t_as_int64_t
=
ABSL_DIE_IF_NULL
(
reinterpret_cast
<
int64_t
*
>
(
&
t
)
)
;
(
void
)
t_as_int64_t
;
std
:
:
unique_ptr
<
int64_t
>
sptr
(
new
int64_t
)
;
EXPECT_EQ
(
sptr
.
get
(
)
ABSL_DIE_IF_NULL
(
sptr
)
.
get
(
)
)
;
ABSL_DIE_IF_NULL
(
sptr
)
.
reset
(
)
;
int64_t
*
int_ptr
=
new
int64_t
(
)
;
EXPECT_EQ
(
int_ptr
ABSL_DIE_IF_NULL
(
std
:
:
unique_ptr
<
int64_t
>
(
int_ptr
)
)
.
get
(
)
)
;
}
#
if
GTEST_HAS_DEATH_TEST
TEST
(
DeathCheckAbslDieIfNull
Simple
)
{
void
*
ptr
;
ASSERT_DEATH
(
{
ptr
=
ABSL_DIE_IF_NULL
(
nullptr
)
;
}
"
"
)
;
(
void
)
ptr
;
std
:
:
unique_ptr
<
int64_t
>
sptr
;
ASSERT_DEATH
(
ptr
=
ABSL_DIE_IF_NULL
(
sptr
)
.
get
(
)
"
"
)
;
}
#
endif
TEST
(
AbslDieIfNull
DoesNotCompareSmartPointerToNULL
)
{
std
:
:
unique_ptr
<
int
>
up
(
new
int
)
;
EXPECT_EQ
(
&
up
&
ABSL_DIE_IF_NULL
(
up
)
)
;
ABSL_DIE_IF_NULL
(
up
)
.
reset
(
)
;
std
:
:
shared_ptr
<
int
>
sp
(
new
int
)
;
EXPECT_EQ
(
&
sp
&
ABSL_DIE_IF_NULL
(
sp
)
)
;
ABSL_DIE_IF_NULL
(
sp
)
.
reset
(
)
;
}
TEST
(
AbslDieIfNull
PreservesRValues
)
{
int64_t
*
ptr
=
new
int64_t
(
)
;
auto
uptr
=
ABSL_DIE_IF_NULL
(
std
:
:
unique_ptr
<
int64_t
>
(
ptr
)
)
;
EXPECT_EQ
(
ptr
uptr
.
get
(
)
)
;
}
TEST
(
AbslDieIfNull
PreservesLValues
)
{
int64_t
array
[
2
]
=
{
0
}
;
int64_t
*
a
=
array
+
0
;
int64_t
*
b
=
array
+
1
;
using
std
:
:
swap
;
swap
(
ABSL_DIE_IF_NULL
(
a
)
ABSL_DIE_IF_NULL
(
b
)
)
;
EXPECT_EQ
(
array
+
1
a
)
;
EXPECT_EQ
(
array
+
0
b
)
;
}
}
