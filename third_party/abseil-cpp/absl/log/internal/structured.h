#
ifndef
ABSL_LOG_INTERNAL_STRUCTURED_H_
#
define
ABSL_LOG_INTERNAL_STRUCTURED_H_
#
include
<
ostream
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
log
/
internal
/
log_message
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
log_internal
{
class
ABSL_MUST_USE_RESULT
AsLiteralImpl
final
{
public
:
explicit
AsLiteralImpl
(
absl
:
:
string_view
str
)
:
str_
(
str
)
{
}
AsLiteralImpl
(
const
AsLiteralImpl
&
)
=
default
;
AsLiteralImpl
&
operator
=
(
const
AsLiteralImpl
&
)
=
default
;
private
:
absl
:
:
string_view
str_
;
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
AsLiteralImpl
as_literal
)
{
return
os
<
<
as_literal
.
str_
;
}
void
AddToMessage
(
log_internal
:
:
LogMessage
&
m
)
{
m
.
CopyToEncodedBuffer
<
log_internal
:
:
LogMessage
:
:
StringType
:
:
kLiteral
>
(
str_
)
;
}
friend
log_internal
:
:
LogMessage
&
operator
<
<
(
log_internal
:
:
LogMessage
&
m
AsLiteralImpl
as_literal
)
{
as_literal
.
AddToMessage
(
m
)
;
return
m
;
}
}
;
}
ABSL_NAMESPACE_END
}
#
endif
