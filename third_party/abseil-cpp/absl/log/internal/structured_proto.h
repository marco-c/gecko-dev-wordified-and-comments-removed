#
ifndef
ABSL_LOG_INTERNAL_STRUCTURED_PROTO_H_
#
define
ABSL_LOG_INTERNAL_STRUCTURED_PROTO_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
log
/
internal
/
proto
.
h
"
#
include
"
absl
/
types
/
span
.
h
"
#
include
"
absl
/
types
/
variant
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
log_internal
{
struct
StructuredProtoField
final
{
using
Varint
=
absl
:
:
variant
<
uint64_t
int64_t
uint32_t
int32_t
bool
>
;
using
I64
=
absl
:
:
variant
<
uint64_t
int64_t
double
>
;
using
LengthDelimited
=
absl
:
:
Span
<
const
char
>
;
using
I32
=
absl
:
:
variant
<
uint32_t
int32_t
float
>
;
using
Value
=
absl
:
:
variant
<
Varint
I64
LengthDelimited
I32
>
;
uint64_t
field_number
;
Value
value
;
}
;
inline
size_t
BufferSizeForStructuredProtoField
(
StructuredProtoField
field
)
{
struct
BufferSizeVisitor
final
{
size_t
operator
(
)
(
StructuredProtoField
:
:
Varint
)
{
return
BufferSizeFor
(
field_number
WireType
:
:
kVarint
)
;
}
size_t
operator
(
)
(
StructuredProtoField
:
:
I64
)
{
return
BufferSizeFor
(
field_number
WireType
:
:
k64Bit
)
;
}
size_t
operator
(
)
(
StructuredProtoField
:
:
LengthDelimited
length_delimited
)
{
return
BufferSizeFor
(
field_number
WireType
:
:
kLengthDelimited
)
+
length_delimited
.
size
(
)
;
}
size_t
operator
(
)
(
StructuredProtoField
:
:
I32
)
{
return
BufferSizeFor
(
field_number
WireType
:
:
k32Bit
)
;
}
uint64_t
field_number
;
}
;
return
absl
:
:
visit
(
BufferSizeVisitor
{
field
.
field_number
}
field
.
value
)
;
}
bool
EncodeStructuredProtoField
(
StructuredProtoField
field
absl
:
:
Span
<
char
>
&
buf
)
;
}
ABSL_NAMESPACE_END
}
#
endif
