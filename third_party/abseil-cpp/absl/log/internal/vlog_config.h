#
ifndef
ABSL_LOG_INTERNAL_VLOG_CONFIG_H_
#
define
ABSL_LOG_INTERNAL_VLOG_CONFIG_H_
#
include
<
atomic
>
#
include
<
cstdint
>
#
include
<
functional
>
#
include
<
limits
>
#
include
<
type_traits
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
optimization
.
h
"
#
include
"
absl
/
base
/
thread_annotations
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
log_internal
{
class
SyntheticBinary
;
class
VLogSite
;
int
RegisterAndInitialize
(
VLogSite
*
v
)
;
void
UpdateVLogSites
(
)
;
constexpr
int
kUseFlag
=
(
std
:
:
numeric_limits
<
int16_t
>
:
:
min
)
(
)
;
class
VLogSite
final
{
public
:
explicit
constexpr
VLogSite
(
const
char
*
f
)
:
file_
(
f
)
v_
(
kUninitialized
)
next_
(
nullptr
)
{
}
VLogSite
(
const
VLogSite
&
)
=
delete
;
VLogSite
&
operator
=
(
const
VLogSite
&
)
=
delete
;
ABSL_ATTRIBUTE_ALWAYS_INLINE
bool
IsEnabled
(
int
level
)
{
int
stale_v
=
v_
.
load
(
std
:
:
memory_order_relaxed
)
;
if
(
ABSL_PREDICT_TRUE
(
level
>
stale_v
)
)
{
return
false
;
}
#
if
ABSL_HAVE_BUILTIN
(
__builtin_constant_p
)
|
|
defined
(
__GNUC__
)
if
(
__builtin_constant_p
(
level
)
)
{
if
(
level
=
=
0
)
return
SlowIsEnabled0
(
stale_v
)
;
if
(
level
=
=
1
)
return
SlowIsEnabled1
(
stale_v
)
;
if
(
level
=
=
2
)
return
SlowIsEnabled2
(
stale_v
)
;
if
(
level
=
=
3
)
return
SlowIsEnabled3
(
stale_v
)
;
if
(
level
=
=
4
)
return
SlowIsEnabled4
(
stale_v
)
;
if
(
level
=
=
5
)
return
SlowIsEnabled5
(
stale_v
)
;
}
#
endif
return
SlowIsEnabled
(
stale_v
level
)
;
}
private
:
friend
int
log_internal
:
:
RegisterAndInitialize
(
VLogSite
*
v
)
;
friend
void
log_internal
:
:
UpdateVLogSites
(
)
;
friend
class
log_internal
:
:
SyntheticBinary
;
static
constexpr
int
kUninitialized
=
(
std
:
:
numeric_limits
<
int
>
:
:
max
)
(
)
;
ABSL_ATTRIBUTE_NOINLINE
bool
SlowIsEnabled
(
int
stale_v
int
level
)
;
ABSL_ATTRIBUTE_NOINLINE
bool
SlowIsEnabled0
(
int
stale_v
)
;
ABSL_ATTRIBUTE_NOINLINE
bool
SlowIsEnabled1
(
int
stale_v
)
;
ABSL_ATTRIBUTE_NOINLINE
bool
SlowIsEnabled2
(
int
stale_v
)
;
ABSL_ATTRIBUTE_NOINLINE
bool
SlowIsEnabled3
(
int
stale_v
)
;
ABSL_ATTRIBUTE_NOINLINE
bool
SlowIsEnabled4
(
int
stale_v
)
;
ABSL_ATTRIBUTE_NOINLINE
bool
SlowIsEnabled5
(
int
stale_v
)
;
const
char
*
const
file_
;
std
:
:
atomic
<
int
>
v_
;
std
:
:
atomic
<
VLogSite
*
>
next_
;
}
;
static_assert
(
std
:
:
is_trivially_destructible
<
VLogSite
>
:
:
value
"
VLogSite
must
be
trivially
destructible
"
)
;
int
VLogLevel
(
absl
:
:
string_view
file
)
;
int
RegisterAndInitialize
(
VLogSite
*
v
)
;
void
UpdateVLogSites
(
)
;
void
UpdateVModule
(
absl
:
:
string_view
vmodule
)
;
int
UpdateGlobalVLogLevel
(
int
v
)
;
int
PrependVModule
(
absl
:
:
string_view
module_pattern
int
log_level
)
;
void
OnVLogVerbosityUpdate
(
std
:
:
function
<
void
(
)
>
cb
)
;
VLogSite
*
SetVModuleListHeadForTestOnly
(
VLogSite
*
v
)
;
}
ABSL_NAMESPACE_END
}
#
endif
