#
include
"
absl
/
log
/
internal
/
structured_proto
.
h
"
#
include
<
cstdint
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
log
/
internal
/
proto
.
h
"
#
include
"
absl
/
types
/
span
.
h
"
#
include
"
absl
/
types
/
variant
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
log_internal
{
namespace
{
struct
VarintEncoderVisitor
final
{
template
<
typename
T
>
bool
operator
(
)
(
T
value
)
const
{
return
EncodeVarint
(
field_number
value
&
buf
)
;
}
uint64_t
field_number
;
absl
:
:
Span
<
char
>
&
buf
;
}
;
struct
I64EncoderVisitor
final
{
bool
operator
(
)
(
uint64_t
value
)
const
{
return
Encode64Bit
(
field_number
value
&
buf
)
;
}
bool
operator
(
)
(
int64_t
value
)
const
{
return
Encode64Bit
(
field_number
value
&
buf
)
;
}
bool
operator
(
)
(
double
value
)
const
{
return
EncodeDouble
(
field_number
value
&
buf
)
;
}
uint64_t
field_number
;
absl
:
:
Span
<
char
>
&
buf
;
}
;
struct
I32EncoderVisitor
final
{
bool
operator
(
)
(
uint32_t
value
)
const
{
return
Encode32Bit
(
field_number
value
&
buf
)
;
}
bool
operator
(
)
(
int32_t
value
)
const
{
return
Encode32Bit
(
field_number
value
&
buf
)
;
}
bool
operator
(
)
(
float
value
)
const
{
return
EncodeFloat
(
field_number
value
&
buf
)
;
}
uint64_t
field_number
;
absl
:
:
Span
<
char
>
&
buf
;
}
;
struct
EncoderVisitor
final
{
bool
operator
(
)
(
StructuredProtoField
:
:
Varint
varint
)
{
return
absl
:
:
visit
(
VarintEncoderVisitor
{
field_number
buf
}
varint
)
;
}
bool
operator
(
)
(
StructuredProtoField
:
:
I64
i64
)
{
return
absl
:
:
visit
(
I64EncoderVisitor
{
field_number
buf
}
i64
)
;
}
bool
operator
(
)
(
StructuredProtoField
:
:
LengthDelimited
length_delimited
)
{
return
EncodeBytes
(
field_number
length_delimited
&
buf
)
;
}
bool
operator
(
)
(
StructuredProtoField
:
:
I32
i32
)
{
return
absl
:
:
visit
(
I32EncoderVisitor
{
field_number
buf
}
i32
)
;
}
uint64_t
field_number
;
absl
:
:
Span
<
char
>
&
buf
;
}
;
}
bool
EncodeStructuredProtoField
(
StructuredProtoField
field
absl
:
:
Span
<
char
>
&
buf
)
{
return
absl
:
:
visit
(
EncoderVisitor
{
field
.
field_number
buf
}
field
.
value
)
;
}
}
ABSL_NAMESPACE_END
}
