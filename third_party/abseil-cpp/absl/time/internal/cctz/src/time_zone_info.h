#
ifndef
ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_INFO_H_
#
define
ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_INFO_H_
#
include
<
atomic
>
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
time
/
internal
/
cctz
/
include
/
cctz
/
civil_time
.
h
"
#
include
"
absl
/
time
/
internal
/
cctz
/
include
/
cctz
/
time_zone
.
h
"
#
include
"
absl
/
time
/
internal
/
cctz
/
include
/
cctz
/
zone_info_source
.
h
"
#
include
"
absl
/
time
/
internal
/
cctz
/
src
/
time_zone_if
.
h
"
#
include
"
absl
/
time
/
internal
/
cctz
/
src
/
tzfile
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
time_internal
{
namespace
cctz
{
struct
Transition
{
std
:
:
int_least64_t
unix_time
;
std
:
:
uint_least8_t
type_index
;
civil_second
civil_sec
;
civil_second
prev_civil_sec
;
struct
ByUnixTime
{
inline
bool
operator
(
)
(
const
Transition
&
lhs
const
Transition
&
rhs
)
const
{
return
lhs
.
unix_time
<
rhs
.
unix_time
;
}
}
;
struct
ByCivilTime
{
inline
bool
operator
(
)
(
const
Transition
&
lhs
const
Transition
&
rhs
)
const
{
return
lhs
.
civil_sec
<
rhs
.
civil_sec
;
}
}
;
}
;
struct
TransitionType
{
std
:
:
int_least32_t
utc_offset
;
civil_second
civil_max
;
civil_second
civil_min
;
bool
is_dst
;
std
:
:
uint_least8_t
abbr_index
;
}
;
class
TimeZoneInfo
:
public
TimeZoneIf
{
public
:
static
std
:
:
unique_ptr
<
TimeZoneInfo
>
UTC
(
)
;
static
std
:
:
unique_ptr
<
TimeZoneInfo
>
Make
(
const
std
:
:
string
&
name
)
;
time_zone
:
:
absolute_lookup
BreakTime
(
const
time_point
<
seconds
>
&
tp
)
const
override
;
time_zone
:
:
civil_lookup
MakeTime
(
const
civil_second
&
cs
)
const
override
;
bool
NextTransition
(
const
time_point
<
seconds
>
&
tp
time_zone
:
:
civil_transition
*
trans
)
const
override
;
bool
PrevTransition
(
const
time_point
<
seconds
>
&
tp
time_zone
:
:
civil_transition
*
trans
)
const
override
;
std
:
:
string
Version
(
)
const
override
;
std
:
:
string
Description
(
)
const
override
;
private
:
TimeZoneInfo
(
)
=
default
;
TimeZoneInfo
(
const
TimeZoneInfo
&
)
=
delete
;
TimeZoneInfo
&
operator
=
(
const
TimeZoneInfo
&
)
=
delete
;
bool
GetTransitionType
(
std
:
:
int_fast32_t
utc_offset
bool
is_dst
const
std
:
:
string
&
abbr
std
:
:
uint_least8_t
*
index
)
;
bool
EquivTransitions
(
std
:
:
uint_fast8_t
tt1_index
std
:
:
uint_fast8_t
tt2_index
)
const
;
bool
ExtendTransitions
(
)
;
bool
ResetToBuiltinUTC
(
const
seconds
&
offset
)
;
bool
Load
(
const
std
:
:
string
&
name
)
;
bool
Load
(
ZoneInfoSource
*
zip
)
;
time_zone
:
:
absolute_lookup
LocalTime
(
std
:
:
int_fast64_t
unix_time
const
TransitionType
&
tt
)
const
;
time_zone
:
:
absolute_lookup
LocalTime
(
std
:
:
int_fast64_t
unix_time
const
Transition
&
tr
)
const
;
time_zone
:
:
civil_lookup
TimeLocal
(
const
civil_second
&
cs
year_t
c4_shift
)
const
;
std
:
:
vector
<
Transition
>
transitions_
;
std
:
:
vector
<
TransitionType
>
transition_types_
;
std
:
:
uint_fast8_t
default_transition_type_
;
std
:
:
string
abbreviations_
;
std
:
:
string
version_
;
std
:
:
string
future_spec_
;
bool
extended_
;
year_t
last_year_
;
mutable
std
:
:
atomic
<
std
:
:
size_t
>
local_time_hint_
=
{
}
;
mutable
std
:
:
atomic
<
std
:
:
size_t
>
time_local_hint_
=
{
}
;
}
;
}
}
ABSL_NAMESPACE_END
}
#
endif
