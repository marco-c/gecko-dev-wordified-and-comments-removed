#
ifndef
ABSL_STRINGS_ESCAPING_H_
#
define
ABSL_STRINGS_ESCAPING_H_
#
include
<
cstddef
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
macros
.
h
"
#
include
"
absl
/
base
/
nullability
.
h
"
#
include
"
absl
/
strings
/
ascii
.
h
"
#
include
"
absl
/
strings
/
str_join
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
bool
CUnescape
(
absl
:
:
string_view
source
absl
:
:
Nonnull
<
std
:
:
string
*
>
dest
absl
:
:
Nullable
<
std
:
:
string
*
>
error
)
;
inline
bool
CUnescape
(
absl
:
:
string_view
source
absl
:
:
Nonnull
<
std
:
:
string
*
>
dest
)
{
return
CUnescape
(
source
dest
nullptr
)
;
}
std
:
:
string
CEscape
(
absl
:
:
string_view
src
)
;
std
:
:
string
CHexEscape
(
absl
:
:
string_view
src
)
;
std
:
:
string
Utf8SafeCEscape
(
absl
:
:
string_view
src
)
;
std
:
:
string
Utf8SafeCHexEscape
(
absl
:
:
string_view
src
)
;
void
Base64Escape
(
absl
:
:
string_view
src
absl
:
:
Nonnull
<
std
:
:
string
*
>
dest
)
;
std
:
:
string
Base64Escape
(
absl
:
:
string_view
src
)
;
void
WebSafeBase64Escape
(
absl
:
:
string_view
src
absl
:
:
Nonnull
<
std
:
:
string
*
>
dest
)
;
std
:
:
string
WebSafeBase64Escape
(
absl
:
:
string_view
src
)
;
bool
Base64Unescape
(
absl
:
:
string_view
src
absl
:
:
Nonnull
<
std
:
:
string
*
>
dest
)
;
bool
WebSafeBase64Unescape
(
absl
:
:
string_view
src
absl
:
:
Nonnull
<
std
:
:
string
*
>
dest
)
;
ABSL_MUST_USE_RESULT
bool
HexStringToBytes
(
absl
:
:
string_view
hex
absl
:
:
Nonnull
<
std
:
:
string
*
>
bytes
)
;
ABSL_DEPRECATED
(
"
Use
the
HexStringToBytes
(
)
that
returns
a
bool
"
)
std
:
:
string
HexStringToBytes
(
absl
:
:
string_view
from
)
;
std
:
:
string
BytesToHexString
(
absl
:
:
string_view
from
)
;
ABSL_NAMESPACE_END
}
#
endif
