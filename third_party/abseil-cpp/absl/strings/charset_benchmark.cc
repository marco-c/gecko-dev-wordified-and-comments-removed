#
include
<
cstdint
>
#
include
"
absl
/
log
/
check
.
h
"
#
include
"
absl
/
strings
/
charset
.
h
"
#
include
"
benchmark
/
benchmark
.
h
"
namespace
{
absl
:
:
CharSet
MakeBenchmarkMap
(
)
{
absl
:
:
CharSet
m
;
uint32_t
x
[
]
=
{
0x0
0x1
0x2
0x3
0xf
0xe
0xd
0xc
}
;
for
(
uint32_t
&
t
:
x
)
t
*
=
static_cast
<
uint32_t
>
(
0x11111111UL
)
;
for
(
uint32_t
i
=
0
;
i
<
256
;
+
+
i
)
{
if
(
(
x
[
i
/
32
]
>
>
(
i
%
32
)
)
&
1
)
m
=
m
|
absl
:
:
CharSet
:
:
Char
(
i
)
;
}
return
m
;
}
static
void
BM_Contains
(
benchmark
:
:
State
&
state
)
{
const
absl
:
:
CharSet
benchmark_map
=
MakeBenchmarkMap
(
)
;
unsigned
char
c
=
0
;
int
ops
=
0
;
for
(
auto
_
:
state
)
{
ops
+
=
benchmark_map
.
contains
(
c
+
+
)
;
ops
+
=
benchmark_map
.
contains
(
c
+
+
)
;
ops
+
=
benchmark_map
.
contains
(
c
+
+
)
;
ops
+
=
benchmark_map
.
contains
(
c
+
+
)
;
ops
+
=
benchmark_map
.
contains
(
c
+
+
)
;
ops
+
=
benchmark_map
.
contains
(
c
+
+
)
;
ops
+
=
benchmark_map
.
contains
(
c
+
+
)
;
ops
+
=
benchmark_map
.
contains
(
c
+
+
)
;
ops
+
=
benchmark_map
.
contains
(
c
+
+
)
;
ops
+
=
benchmark_map
.
contains
(
c
+
+
)
;
}
CHECK_NE
(
ops
-
1
)
;
}
BENCHMARK
(
BM_Contains
)
;
}
