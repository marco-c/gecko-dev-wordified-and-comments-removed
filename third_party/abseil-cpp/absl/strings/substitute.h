#
ifndef
ABSL_STRINGS_SUBSTITUTE_H_
#
define
ABSL_STRINGS_SUBSTITUTE_H_
#
include
<
cstring
>
#
include
<
string
>
#
include
<
type_traits
>
#
include
<
vector
>
#
include
"
absl
/
base
/
macros
.
h
"
#
include
"
absl
/
base
/
nullability
.
h
"
#
include
"
absl
/
base
/
port
.
h
"
#
include
"
absl
/
strings
/
ascii
.
h
"
#
include
"
absl
/
strings
/
escaping
.
h
"
#
include
"
absl
/
strings
/
internal
/
stringify_sink
.
h
"
#
include
"
absl
/
strings
/
numbers
.
h
"
#
include
"
absl
/
strings
/
str_cat
.
h
"
#
include
"
absl
/
strings
/
str_split
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
strings
/
strip
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
substitute_internal
{
class
Arg
{
public
:
Arg
(
absl
:
:
Nullable
<
const
char
*
>
value
)
:
piece_
(
absl
:
:
NullSafeStringView
(
value
)
)
{
}
template
<
typename
Allocator
>
Arg
(
const
std
:
:
basic_string
<
char
std
:
:
char_traits
<
char
>
Allocator
>
&
value
)
noexcept
:
piece_
(
value
)
{
}
Arg
(
absl
:
:
string_view
value
)
:
piece_
(
value
)
{
}
Arg
(
char
value
)
:
piece_
(
scratch_
1
)
{
scratch_
[
0
]
=
value
;
}
Arg
(
short
value
)
:
piece_
(
scratch_
static_cast
<
size_t
>
(
numbers_internal
:
:
FastIntToBuffer
(
value
scratch_
)
-
scratch_
)
)
{
}
Arg
(
unsigned
short
value
)
:
piece_
(
scratch_
static_cast
<
size_t
>
(
numbers_internal
:
:
FastIntToBuffer
(
value
scratch_
)
-
scratch_
)
)
{
}
Arg
(
int
value
)
:
piece_
(
scratch_
static_cast
<
size_t
>
(
numbers_internal
:
:
FastIntToBuffer
(
value
scratch_
)
-
scratch_
)
)
{
}
Arg
(
unsigned
int
value
)
:
piece_
(
scratch_
static_cast
<
size_t
>
(
numbers_internal
:
:
FastIntToBuffer
(
value
scratch_
)
-
scratch_
)
)
{
}
Arg
(
long
value
)
:
piece_
(
scratch_
static_cast
<
size_t
>
(
numbers_internal
:
:
FastIntToBuffer
(
value
scratch_
)
-
scratch_
)
)
{
}
Arg
(
unsigned
long
value
)
:
piece_
(
scratch_
static_cast
<
size_t
>
(
numbers_internal
:
:
FastIntToBuffer
(
value
scratch_
)
-
scratch_
)
)
{
}
Arg
(
long
long
value
)
:
piece_
(
scratch_
static_cast
<
size_t
>
(
numbers_internal
:
:
FastIntToBuffer
(
value
scratch_
)
-
scratch_
)
)
{
}
Arg
(
unsigned
long
long
value
)
:
piece_
(
scratch_
static_cast
<
size_t
>
(
numbers_internal
:
:
FastIntToBuffer
(
value
scratch_
)
-
scratch_
)
)
{
}
Arg
(
float
value
)
:
piece_
(
scratch_
numbers_internal
:
:
SixDigitsToBuffer
(
value
scratch_
)
)
{
}
Arg
(
double
value
)
:
piece_
(
scratch_
numbers_internal
:
:
SixDigitsToBuffer
(
value
scratch_
)
)
{
}
Arg
(
bool
value
)
:
piece_
(
value
?
"
true
"
:
"
false
"
)
{
}
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
HasAbslStringify
<
T
>
:
:
value
>
:
:
type
>
Arg
(
const
T
&
v
strings_internal
:
:
StringifySink
&
&
sink
=
{
}
)
:
piece_
(
strings_internal
:
:
ExtractStringification
(
sink
v
)
)
{
}
Arg
(
Hex
hex
)
;
Arg
(
Dec
dec
)
;
template
<
typename
T
absl
:
:
enable_if_t
<
std
:
:
is_class
<
T
>
:
:
value
&
&
(
std
:
:
is_same
<
T
std
:
:
vector
<
bool
>
:
:
reference
>
:
:
value
|
|
std
:
:
is_same
<
T
std
:
:
vector
<
bool
>
:
:
const_reference
>
:
:
value
)
>
*
=
nullptr
>
Arg
(
T
value
)
:
Arg
(
static_cast
<
bool
>
(
value
)
)
{
}
Arg
(
absl
:
:
Nullable
<
const
void
*
>
value
)
;
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
{
}
&
&
!
std
:
:
is_convertible
<
T
int
>
{
}
&
&
!
HasAbslStringify
<
T
>
:
:
value
>
:
:
type
>
Arg
(
T
value
)
:
Arg
(
static_cast
<
typename
std
:
:
underlying_type
<
T
>
:
:
type
>
(
value
)
)
{
}
Arg
(
const
Arg
&
)
=
delete
;
Arg
&
operator
=
(
const
Arg
&
)
=
delete
;
absl
:
:
string_view
piece
(
)
const
{
return
piece_
;
}
private
:
absl
:
:
string_view
piece_
;
char
scratch_
[
numbers_internal
:
:
kFastToBufferSize
]
;
}
;
void
SubstituteAndAppendArray
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
absl
:
:
Nullable
<
const
absl
:
:
string_view
*
>
args_array
size_t
num_args
)
;
#
if
defined
(
ABSL_BAD_CALL_IF
)
constexpr
int
CalculateOneBit
(
absl
:
:
Nonnull
<
const
char
*
>
format
)
{
return
(
*
format
<
'
0
'
|
|
*
format
>
'
9
'
)
?
(
*
format
=
=
'
'
?
0
:
-
1
)
:
(
1
<
<
(
*
format
-
'
0
'
)
)
;
}
constexpr
const
char
*
SkipNumber
(
absl
:
:
Nonnull
<
const
char
*
>
format
)
{
return
!
*
format
?
format
:
(
format
+
1
)
;
}
constexpr
int
PlaceholderBitmask
(
absl
:
:
Nonnull
<
const
char
*
>
format
)
{
return
!
*
format
?
0
:
*
format
!
=
'
'
?
PlaceholderBitmask
(
format
+
1
)
:
(
CalculateOneBit
(
format
+
1
)
|
PlaceholderBitmask
(
SkipNumber
(
format
+
1
)
)
)
;
}
#
endif
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
)
{
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
nullptr
0
)
;
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
)
{
const
absl
:
:
string_view
args
[
]
=
{
a0
.
piece
(
)
}
;
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
args
ABSL_ARRAYSIZE
(
args
)
)
;
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
)
{
const
absl
:
:
string_view
args
[
]
=
{
a0
.
piece
(
)
a1
.
piece
(
)
}
;
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
args
ABSL_ARRAYSIZE
(
args
)
)
;
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
)
{
const
absl
:
:
string_view
args
[
]
=
{
a0
.
piece
(
)
a1
.
piece
(
)
a2
.
piece
(
)
}
;
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
args
ABSL_ARRAYSIZE
(
args
)
)
;
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
)
{
const
absl
:
:
string_view
args
[
]
=
{
a0
.
piece
(
)
a1
.
piece
(
)
a2
.
piece
(
)
a3
.
piece
(
)
}
;
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
args
ABSL_ARRAYSIZE
(
args
)
)
;
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
)
{
const
absl
:
:
string_view
args
[
]
=
{
a0
.
piece
(
)
a1
.
piece
(
)
a2
.
piece
(
)
a3
.
piece
(
)
a4
.
piece
(
)
}
;
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
args
ABSL_ARRAYSIZE
(
args
)
)
;
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
)
{
const
absl
:
:
string_view
args
[
]
=
{
a0
.
piece
(
)
a1
.
piece
(
)
a2
.
piece
(
)
a3
.
piece
(
)
a4
.
piece
(
)
a5
.
piece
(
)
}
;
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
args
ABSL_ARRAYSIZE
(
args
)
)
;
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
)
{
const
absl
:
:
string_view
args
[
]
=
{
a0
.
piece
(
)
a1
.
piece
(
)
a2
.
piece
(
)
a3
.
piece
(
)
a4
.
piece
(
)
a5
.
piece
(
)
a6
.
piece
(
)
}
;
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
args
ABSL_ARRAYSIZE
(
args
)
)
;
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
)
{
const
absl
:
:
string_view
args
[
]
=
{
a0
.
piece
(
)
a1
.
piece
(
)
a2
.
piece
(
)
a3
.
piece
(
)
a4
.
piece
(
)
a5
.
piece
(
)
a6
.
piece
(
)
a7
.
piece
(
)
}
;
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
args
ABSL_ARRAYSIZE
(
args
)
)
;
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
const
substitute_internal
:
:
Arg
&
a8
)
{
const
absl
:
:
string_view
args
[
]
=
{
a0
.
piece
(
)
a1
.
piece
(
)
a2
.
piece
(
)
a3
.
piece
(
)
a4
.
piece
(
)
a5
.
piece
(
)
a6
.
piece
(
)
a7
.
piece
(
)
a8
.
piece
(
)
}
;
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
args
ABSL_ARRAYSIZE
(
args
)
)
;
}
inline
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
const
substitute_internal
:
:
Arg
&
a8
const
substitute_internal
:
:
Arg
&
a9
)
{
const
absl
:
:
string_view
args
[
]
=
{
a0
.
piece
(
)
a1
.
piece
(
)
a2
.
piece
(
)
a3
.
piece
(
)
a4
.
piece
(
)
a5
.
piece
(
)
a6
.
piece
(
)
a7
.
piece
(
)
a8
.
piece
(
)
a9
.
piece
(
)
}
;
substitute_internal
:
:
SubstituteAndAppendArray
(
output
format
args
ABSL_ARRAYSIZE
(
args
)
)
;
}
#
if
defined
(
ABSL_BAD_CALL_IF
)
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
0
"
There
were
no
substitution
arguments
"
"
but
this
format
string
either
has
a
[
0
-
9
]
in
it
or
contains
"
"
an
unescaped
character
(
use
instead
)
"
)
;
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
1
"
There
was
1
substitution
argument
given
but
"
"
this
format
string
is
missing
its
0
contains
"
"
one
of
1
-
9
or
contains
an
unescaped
character
(
use
"
"
instead
)
"
)
;
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
3
"
There
were
2
substitution
arguments
given
but
this
format
string
is
"
"
missing
its
0
/
1
contains
one
of
2
-
9
or
contains
an
"
"
unescaped
character
(
use
instead
)
"
)
;
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
7
"
There
were
3
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
/
1
/
2
contains
one
of
"
"
3
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
15
"
There
were
4
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
3
contains
one
of
"
"
4
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
31
"
There
were
5
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
4
contains
one
of
"
"
5
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
63
"
There
were
6
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
5
contains
one
of
"
"
6
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
127
"
There
were
7
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
6
contains
one
of
"
"
7
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
255
"
There
were
8
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
7
contains
one
of
"
"
8
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
const
substitute_internal
:
:
Arg
&
a8
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
511
"
There
were
9
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
8
contains
a
9
or
"
"
contains
an
unescaped
character
(
use
instead
)
"
)
;
void
SubstituteAndAppend
(
absl
:
:
Nonnull
<
std
:
:
string
*
>
output
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
const
substitute_internal
:
:
Arg
&
a8
const
substitute_internal
:
:
Arg
&
a9
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
1023
"
There
were
10
substitution
arguments
given
but
this
"
"
format
string
either
doesn
'
t
contain
all
of
0
through
9
or
"
"
contains
an
unescaped
character
(
use
instead
)
"
)
;
#
endif
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
)
;
return
result
;
}
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
a0
)
;
return
result
;
}
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
a0
a1
)
;
return
result
;
}
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
a0
a1
a2
)
;
return
result
;
}
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
a0
a1
a2
a3
)
;
return
result
;
}
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
a0
a1
a2
a3
a4
)
;
return
result
;
}
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
a0
a1
a2
a3
a4
a5
)
;
return
result
;
}
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
a0
a1
a2
a3
a4
a5
a6
)
;
return
result
;
}
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
a0
a1
a2
a3
a4
a5
a6
a7
)
;
return
result
;
}
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
const
substitute_internal
:
:
Arg
&
a8
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
a0
a1
a2
a3
a4
a5
a6
a7
a8
)
;
return
result
;
}
ABSL_MUST_USE_RESULT
inline
std
:
:
string
Substitute
(
absl
:
:
string_view
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
const
substitute_internal
:
:
Arg
&
a8
const
substitute_internal
:
:
Arg
&
a9
)
{
std
:
:
string
result
;
SubstituteAndAppend
(
&
result
format
a0
a1
a2
a3
a4
a5
a6
a7
a8
a9
)
;
return
result
;
}
#
if
defined
(
ABSL_BAD_CALL_IF
)
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
0
"
There
were
no
substitution
arguments
"
"
but
this
format
string
either
has
a
[
0
-
9
]
in
it
or
"
"
contains
an
unescaped
character
(
use
instead
)
"
)
;
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
1
"
There
was
1
substitution
argument
given
but
"
"
this
format
string
is
missing
its
0
contains
one
of
1
-
9
"
"
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
3
"
There
were
2
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
/
1
contains
one
of
"
"
2
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
7
"
There
were
3
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
/
1
/
2
contains
one
of
"
"
3
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
15
"
There
were
4
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
3
contains
one
of
"
"
4
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
31
"
There
were
5
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
4
contains
one
of
"
"
5
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
63
"
There
were
6
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
5
contains
one
of
"
"
6
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
127
"
There
were
7
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
6
contains
one
of
"
"
7
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
255
"
There
were
8
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
7
contains
one
of
"
"
8
-
9
or
contains
an
unescaped
character
(
use
instead
)
"
)
;
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
const
substitute_internal
:
:
Arg
&
a8
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
511
"
There
were
9
substitution
arguments
given
but
"
"
this
format
string
is
missing
its
0
-
8
contains
a
9
or
"
"
contains
an
unescaped
character
(
use
instead
)
"
)
;
std
:
:
string
Substitute
(
absl
:
:
Nonnull
<
const
char
*
>
format
const
substitute_internal
:
:
Arg
&
a0
const
substitute_internal
:
:
Arg
&
a1
const
substitute_internal
:
:
Arg
&
a2
const
substitute_internal
:
:
Arg
&
a3
const
substitute_internal
:
:
Arg
&
a4
const
substitute_internal
:
:
Arg
&
a5
const
substitute_internal
:
:
Arg
&
a6
const
substitute_internal
:
:
Arg
&
a7
const
substitute_internal
:
:
Arg
&
a8
const
substitute_internal
:
:
Arg
&
a9
)
ABSL_BAD_CALL_IF
(
substitute_internal
:
:
PlaceholderBitmask
(
format
)
!
=
1023
"
There
were
10
substitution
arguments
given
but
this
"
"
format
string
either
doesn
'
t
contain
all
of
0
through
9
or
"
"
contains
an
unescaped
character
(
use
instead
)
"
)
;
#
endif
ABSL_NAMESPACE_END
}
#
endif
