#
ifndef
ABSL_STRINGS_CHARSET_H_
#
define
ABSL_STRINGS_CHARSET_H_
#
include
<
cstdint
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
class
CharSet
{
public
:
constexpr
CharSet
(
)
:
m_
(
)
{
}
constexpr
explicit
CharSet
(
absl
:
:
string_view
str
)
:
m_
(
)
{
for
(
char
c
:
str
)
{
SetChar
(
static_cast
<
unsigned
char
>
(
c
)
)
;
}
}
constexpr
bool
contains
(
char
c
)
const
{
return
(
(
m_
[
static_cast
<
unsigned
char
>
(
c
)
/
64
]
>
>
(
static_cast
<
unsigned
char
>
(
c
)
%
64
)
)
&
0x1
)
=
=
0x1
;
}
constexpr
bool
empty
(
)
const
{
for
(
uint64_t
c
:
m_
)
{
if
(
c
!
=
0
)
return
false
;
}
return
true
;
}
static
constexpr
CharSet
Char
(
char
x
)
{
return
CharSet
(
CharMaskForWord
(
x
0
)
CharMaskForWord
(
x
1
)
CharMaskForWord
(
x
2
)
CharMaskForWord
(
x
3
)
)
;
}
static
constexpr
CharSet
Range
(
char
lo
char
hi
)
{
return
CharSet
(
RangeForWord
(
lo
hi
0
)
RangeForWord
(
lo
hi
1
)
RangeForWord
(
lo
hi
2
)
RangeForWord
(
lo
hi
3
)
)
;
}
friend
constexpr
CharSet
operator
&
(
const
CharSet
&
a
const
CharSet
&
b
)
{
return
CharSet
(
a
.
m_
[
0
]
&
b
.
m_
[
0
]
a
.
m_
[
1
]
&
b
.
m_
[
1
]
a
.
m_
[
2
]
&
b
.
m_
[
2
]
a
.
m_
[
3
]
&
b
.
m_
[
3
]
)
;
}
friend
constexpr
CharSet
operator
|
(
const
CharSet
&
a
const
CharSet
&
b
)
{
return
CharSet
(
a
.
m_
[
0
]
|
b
.
m_
[
0
]
a
.
m_
[
1
]
|
b
.
m_
[
1
]
a
.
m_
[
2
]
|
b
.
m_
[
2
]
a
.
m_
[
3
]
|
b
.
m_
[
3
]
)
;
}
friend
constexpr
CharSet
operator
~
(
const
CharSet
&
a
)
{
return
CharSet
(
~
a
.
m_
[
0
]
~
a
.
m_
[
1
]
~
a
.
m_
[
2
]
~
a
.
m_
[
3
]
)
;
}
static
constexpr
CharSet
AsciiUppercase
(
)
{
return
CharSet
:
:
Range
(
'
A
'
'
Z
'
)
;
}
static
constexpr
CharSet
AsciiLowercase
(
)
{
return
CharSet
:
:
Range
(
'
a
'
'
z
'
)
;
}
static
constexpr
CharSet
AsciiDigits
(
)
{
return
CharSet
:
:
Range
(
'
0
'
'
9
'
)
;
}
static
constexpr
CharSet
AsciiAlphabet
(
)
{
return
AsciiLowercase
(
)
|
AsciiUppercase
(
)
;
}
static
constexpr
CharSet
AsciiAlphanumerics
(
)
{
return
AsciiDigits
(
)
|
AsciiAlphabet
(
)
;
}
static
constexpr
CharSet
AsciiHexDigits
(
)
{
return
AsciiDigits
(
)
|
CharSet
:
:
Range
(
'
A
'
'
F
'
)
|
CharSet
:
:
Range
(
'
a
'
'
f
'
)
;
}
static
constexpr
CharSet
AsciiPrintable
(
)
{
return
CharSet
:
:
Range
(
0x20
0x7e
)
;
}
static
constexpr
CharSet
AsciiWhitespace
(
)
{
return
CharSet
(
"
\
t
\
n
\
v
\
f
\
r
"
)
;
}
static
constexpr
CharSet
AsciiPunctuation
(
)
{
return
AsciiPrintable
(
)
&
~
AsciiWhitespace
(
)
&
~
AsciiAlphanumerics
(
)
;
}
private
:
constexpr
CharSet
(
uint64_t
b0
uint64_t
b1
uint64_t
b2
uint64_t
b3
)
:
m_
{
b0
b1
b2
b3
}
{
}
static
constexpr
uint64_t
RangeForWord
(
char
lo
char
hi
uint64_t
word
)
{
return
OpenRangeFromZeroForWord
(
static_cast
<
unsigned
char
>
(
hi
)
+
1
word
)
&
~
OpenRangeFromZeroForWord
(
static_cast
<
unsigned
char
>
(
lo
)
word
)
;
}
static
constexpr
uint64_t
OpenRangeFromZeroForWord
(
uint64_t
upper
uint64_t
word
)
{
return
(
upper
<
=
64
*
word
)
?
0
:
(
upper
>
=
64
*
(
word
+
1
)
)
?
~
static_cast
<
uint64_t
>
(
0
)
:
(
~
static_cast
<
uint64_t
>
(
0
)
>
>
(
64
-
upper
%
64
)
)
;
}
static
constexpr
uint64_t
CharMaskForWord
(
char
x
uint64_t
word
)
{
return
(
static_cast
<
unsigned
char
>
(
x
)
/
64
=
=
word
)
?
(
static_cast
<
uint64_t
>
(
1
)
<
<
(
static_cast
<
unsigned
char
>
(
x
)
%
64
)
)
:
0
;
}
constexpr
void
SetChar
(
unsigned
char
c
)
{
m_
[
c
/
64
]
|
=
static_cast
<
uint64_t
>
(
1
)
<
<
(
c
%
64
)
;
}
uint64_t
m_
[
4
]
;
}
;
ABSL_NAMESPACE_END
}
#
endif
