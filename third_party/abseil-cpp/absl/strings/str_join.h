#
ifndef
ABSL_STRINGS_STR_JOIN_H_
#
define
ABSL_STRINGS_STR_JOIN_H_
#
include
<
cstdio
>
#
include
<
cstring
>
#
include
<
initializer_list
>
#
include
<
iterator
>
#
include
<
string
>
#
include
<
tuple
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
absl
/
base
/
macros
.
h
"
#
include
"
absl
/
strings
/
internal
/
str_join_internal
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
inline
strings_internal
:
:
AlphaNumFormatterImpl
AlphaNumFormatter
(
)
{
return
strings_internal
:
:
AlphaNumFormatterImpl
(
)
;
}
inline
strings_internal
:
:
StreamFormatterImpl
StreamFormatter
(
)
{
return
strings_internal
:
:
StreamFormatterImpl
(
)
;
}
template
<
typename
FirstFormatter
typename
SecondFormatter
>
inline
strings_internal
:
:
PairFormatterImpl
<
FirstFormatter
SecondFormatter
>
PairFormatter
(
FirstFormatter
f1
absl
:
:
string_view
sep
SecondFormatter
f2
)
{
return
strings_internal
:
:
PairFormatterImpl
<
FirstFormatter
SecondFormatter
>
(
std
:
:
move
(
f1
)
sep
std
:
:
move
(
f2
)
)
;
}
inline
strings_internal
:
:
PairFormatterImpl
<
strings_internal
:
:
AlphaNumFormatterImpl
strings_internal
:
:
AlphaNumFormatterImpl
>
PairFormatter
(
absl
:
:
string_view
sep
)
{
return
PairFormatter
(
AlphaNumFormatter
(
)
sep
AlphaNumFormatter
(
)
)
;
}
template
<
typename
Formatter
>
strings_internal
:
:
DereferenceFormatterImpl
<
Formatter
>
DereferenceFormatter
(
Formatter
&
&
f
)
{
return
strings_internal
:
:
DereferenceFormatterImpl
<
Formatter
>
(
std
:
:
forward
<
Formatter
>
(
f
)
)
;
}
inline
strings_internal
:
:
DereferenceFormatterImpl
<
strings_internal
:
:
AlphaNumFormatterImpl
>
DereferenceFormatter
(
)
{
return
strings_internal
:
:
DereferenceFormatterImpl
<
strings_internal
:
:
AlphaNumFormatterImpl
>
(
AlphaNumFormatter
(
)
)
;
}
template
<
typename
Iterator
typename
Formatter
>
std
:
:
string
StrJoin
(
Iterator
start
Iterator
end
absl
:
:
string_view
sep
Formatter
&
&
fmt
)
{
return
strings_internal
:
:
JoinAlgorithm
(
start
end
sep
fmt
)
;
}
template
<
typename
Range
typename
Formatter
>
std
:
:
string
StrJoin
(
const
Range
&
range
absl
:
:
string_view
separator
Formatter
&
&
fmt
)
{
return
strings_internal
:
:
JoinRange
(
range
separator
fmt
)
;
}
template
<
typename
T
typename
Formatter
typename
=
typename
std
:
:
enable_if
<
!
std
:
:
is_convertible
<
T
absl
:
:
string_view
>
:
:
value
>
:
:
type
>
std
:
:
string
StrJoin
(
std
:
:
initializer_list
<
T
>
il
absl
:
:
string_view
separator
Formatter
&
&
fmt
)
{
return
strings_internal
:
:
JoinRange
(
il
separator
fmt
)
;
}
template
<
typename
Formatter
>
inline
std
:
:
string
StrJoin
(
std
:
:
initializer_list
<
absl
:
:
string_view
>
il
absl
:
:
string_view
separator
Formatter
&
&
fmt
)
{
return
strings_internal
:
:
JoinRange
(
il
separator
fmt
)
;
}
template
<
typename
.
.
.
T
typename
Formatter
>
std
:
:
string
StrJoin
(
const
std
:
:
tuple
<
T
.
.
.
>
&
value
absl
:
:
string_view
separator
Formatter
&
&
fmt
)
{
return
strings_internal
:
:
JoinAlgorithm
(
value
separator
fmt
)
;
}
template
<
typename
Iterator
>
std
:
:
string
StrJoin
(
Iterator
start
Iterator
end
absl
:
:
string_view
separator
)
{
return
strings_internal
:
:
JoinRange
(
start
end
separator
)
;
}
template
<
typename
Range
>
std
:
:
string
StrJoin
(
const
Range
&
range
absl
:
:
string_view
separator
)
{
return
strings_internal
:
:
JoinRange
(
range
separator
)
;
}
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
!
std
:
:
is_convertible
<
T
absl
:
:
string_view
>
:
:
value
>
:
:
type
>
std
:
:
string
StrJoin
(
std
:
:
initializer_list
<
T
>
il
absl
:
:
string_view
separator
)
{
return
strings_internal
:
:
JoinRange
(
il
separator
)
;
}
inline
std
:
:
string
StrJoin
(
std
:
:
initializer_list
<
absl
:
:
string_view
>
il
absl
:
:
string_view
separator
)
{
return
strings_internal
:
:
JoinRange
(
il
separator
)
;
}
template
<
typename
.
.
.
T
>
std
:
:
string
StrJoin
(
const
std
:
:
tuple
<
T
.
.
.
>
&
value
absl
:
:
string_view
separator
)
{
return
strings_internal
:
:
JoinTuple
(
value
separator
std
:
:
index_sequence_for
<
T
.
.
.
>
{
}
)
;
}
ABSL_NAMESPACE_END
}
#
endif
