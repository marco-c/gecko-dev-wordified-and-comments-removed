#
ifndef
ABSL_STRINGS_INTERNAL_CORDZ_UPDATE_SCOPE_H_
#
define
ABSL_STRINGS_INTERNAL_CORDZ_UPDATE_SCOPE_H_
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
optimization
.
h
"
#
include
"
absl
/
base
/
thread_annotations
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_internal
.
h
"
#
include
"
absl
/
strings
/
internal
/
cordz_info
.
h
"
#
include
"
absl
/
strings
/
internal
/
cordz_update_tracker
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
cord_internal
{
class
ABSL_SCOPED_LOCKABLE
CordzUpdateScope
{
public
:
CordzUpdateScope
(
CordzInfo
*
info
CordzUpdateTracker
:
:
MethodIdentifier
method
)
ABSL_EXCLUSIVE_LOCK_FUNCTION
(
info
)
:
info_
(
info
)
{
if
(
ABSL_PREDICT_FALSE
(
info_
)
)
{
info
-
>
Lock
(
method
)
;
}
}
CordzUpdateScope
(
CordzUpdateScope
&
&
rhs
)
=
delete
;
CordzUpdateScope
(
const
CordzUpdateScope
&
)
=
delete
;
CordzUpdateScope
&
operator
=
(
CordzUpdateScope
&
&
rhs
)
=
delete
;
CordzUpdateScope
&
operator
=
(
const
CordzUpdateScope
&
)
=
delete
;
~
CordzUpdateScope
(
)
ABSL_UNLOCK_FUNCTION
(
)
{
if
(
ABSL_PREDICT_FALSE
(
info_
)
)
{
info_
-
>
Unlock
(
)
;
}
}
void
SetCordRep
(
CordRep
*
rep
)
const
{
if
(
ABSL_PREDICT_FALSE
(
info_
)
)
{
info_
-
>
SetCordRep
(
rep
)
;
}
}
CordzInfo
*
info
(
)
const
{
return
info_
;
}
private
:
CordzInfo
*
info_
;
}
;
}
ABSL_NAMESPACE_END
}
#
endif
