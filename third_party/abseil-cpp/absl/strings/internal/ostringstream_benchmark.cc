#
include
<
sstream
>
#
include
<
string
>
#
include
"
absl
/
strings
/
internal
/
ostringstream
.
h
"
#
include
"
benchmark
/
benchmark
.
h
"
namespace
{
enum
StringType
{
kNone
kStdString
}
;
template
<
StringType
kOutput
>
void
BM_StdStream
(
benchmark
:
:
State
&
state
)
{
const
int
num_writes
=
state
.
range
(
0
)
;
const
int
bytes_per_write
=
state
.
range
(
1
)
;
const
std
:
:
string
payload
(
bytes_per_write
'
x
'
)
;
for
(
auto
_
:
state
)
{
std
:
:
ostringstream
strm
;
benchmark
:
:
DoNotOptimize
(
strm
)
;
for
(
int
i
=
0
;
i
!
=
num_writes
;
+
+
i
)
{
strm
<
<
payload
;
}
switch
(
kOutput
)
{
case
kNone
:
{
break
;
}
case
kStdString
:
{
std
:
:
string
s
=
strm
.
str
(
)
;
benchmark
:
:
DoNotOptimize
(
s
)
;
break
;
}
}
}
}
BENCHMARK_TEMPLATE
(
BM_StdStream
kNone
)
-
>
ArgPair
(
0
0
)
-
>
ArgPair
(
1
16
)
-
>
ArgPair
(
1
256
)
-
>
ArgPair
(
1024
256
)
;
BENCHMARK_TEMPLATE
(
BM_StdStream
kStdString
)
-
>
ArgPair
(
1
16
)
-
>
ArgPair
(
1
256
)
-
>
ArgPair
(
1024
256
)
;
template
<
StringType
kOutput
>
void
BM_CustomStream
(
benchmark
:
:
State
&
state
)
{
const
int
num_writes
=
state
.
range
(
0
)
;
const
int
bytes_per_write
=
state
.
range
(
1
)
;
const
std
:
:
string
payload
(
bytes_per_write
'
x
'
)
;
for
(
auto
_
:
state
)
{
std
:
:
string
out
;
absl
:
:
strings_internal
:
:
OStringStream
strm
(
&
out
)
;
benchmark
:
:
DoNotOptimize
(
strm
)
;
for
(
int
i
=
0
;
i
!
=
num_writes
;
+
+
i
)
{
strm
<
<
payload
;
}
switch
(
kOutput
)
{
case
kNone
:
{
break
;
}
case
kStdString
:
{
std
:
:
string
s
=
out
;
benchmark
:
:
DoNotOptimize
(
s
)
;
break
;
}
}
}
}
BENCHMARK_TEMPLATE
(
BM_CustomStream
kNone
)
-
>
ArgPair
(
0
0
)
-
>
ArgPair
(
1
16
)
-
>
ArgPair
(
1
256
)
-
>
ArgPair
(
1024
256
)
;
BENCHMARK_TEMPLATE
(
BM_CustomStream
kStdString
)
-
>
ArgPair
(
1
16
)
-
>
ArgPair
(
1
256
)
-
>
ArgPair
(
1024
256
)
;
}
