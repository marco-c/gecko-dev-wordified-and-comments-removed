#
ifndef
ABSL_STRINGS_INTERNAL_CORD_REP_BTREE_READER_H_
#
define
ABSL_STRINGS_INTERNAL_CORD_REP_BTREE_READER_H_
#
include
<
cassert
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_data_edge
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_internal
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_btree
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_btree_navigator
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_flat
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
cord_internal
{
class
CordRepBtreeReader
{
public
:
using
ReadResult
=
CordRepBtreeNavigator
:
:
ReadResult
;
using
Position
=
CordRepBtreeNavigator
:
:
Position
;
explicit
operator
bool
(
)
const
{
return
navigator_
.
btree
(
)
!
=
nullptr
;
}
CordRepBtree
*
btree
(
)
const
{
return
navigator_
.
btree
(
)
;
}
CordRep
*
node
(
)
const
{
return
navigator_
.
Current
(
)
;
}
size_t
length
(
)
const
;
size_t
remaining
(
)
const
{
return
remaining_
;
}
void
Reset
(
)
{
navigator_
.
Reset
(
)
;
}
absl
:
:
string_view
Init
(
CordRepBtree
*
tree
)
;
absl
:
:
string_view
Next
(
)
;
absl
:
:
string_view
Skip
(
size_t
skip
)
;
absl
:
:
string_view
Read
(
size_t
n
size_t
chunk_size
CordRep
*
&
tree
)
;
absl
:
:
string_view
Seek
(
size_t
offset
)
;
private
:
size_t
remaining_
=
0
;
CordRepBtreeNavigator
navigator_
;
}
;
inline
size_t
CordRepBtreeReader
:
:
length
(
)
const
{
assert
(
btree
(
)
!
=
nullptr
)
;
return
btree
(
)
-
>
length
;
}
inline
absl
:
:
string_view
CordRepBtreeReader
:
:
Init
(
CordRepBtree
*
tree
)
{
assert
(
tree
!
=
nullptr
)
;
const
CordRep
*
edge
=
navigator_
.
InitFirst
(
tree
)
;
remaining_
=
tree
-
>
length
-
edge
-
>
length
;
return
EdgeData
(
edge
)
;
}
inline
absl
:
:
string_view
CordRepBtreeReader
:
:
Next
(
)
{
if
(
remaining_
=
=
0
)
return
{
}
;
const
CordRep
*
edge
=
navigator_
.
Next
(
)
;
assert
(
edge
!
=
nullptr
)
;
remaining_
-
=
edge
-
>
length
;
return
EdgeData
(
edge
)
;
}
inline
absl
:
:
string_view
CordRepBtreeReader
:
:
Skip
(
size_t
skip
)
{
const
size_t
edge_length
=
navigator_
.
Current
(
)
-
>
length
;
CordRepBtreeNavigator
:
:
Position
pos
=
navigator_
.
Skip
(
skip
+
edge_length
)
;
if
(
ABSL_PREDICT_FALSE
(
pos
.
edge
=
=
nullptr
)
)
{
remaining_
=
0
;
return
{
}
;
}
remaining_
-
=
skip
-
pos
.
offset
+
pos
.
edge
-
>
length
;
return
EdgeData
(
pos
.
edge
)
.
substr
(
pos
.
offset
)
;
}
inline
absl
:
:
string_view
CordRepBtreeReader
:
:
Seek
(
size_t
offset
)
{
const
CordRepBtreeNavigator
:
:
Position
pos
=
navigator_
.
Seek
(
offset
)
;
if
(
ABSL_PREDICT_FALSE
(
pos
.
edge
=
=
nullptr
)
)
{
remaining_
=
0
;
return
{
}
;
}
absl
:
:
string_view
chunk
=
EdgeData
(
pos
.
edge
)
.
substr
(
pos
.
offset
)
;
remaining_
=
length
(
)
-
offset
-
chunk
.
length
(
)
;
return
chunk
;
}
}
ABSL_NAMESPACE_END
}
#
endif
