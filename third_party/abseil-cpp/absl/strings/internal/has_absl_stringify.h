#
ifndef
ABSL_STRINGS_INTERNAL_HAS_ABSL_STRINGIFY_H_
#
define
ABSL_STRINGS_INTERNAL_HAS_ABSL_STRINGIFY_H_
#
include
<
string
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
strings
/
has_absl_stringify
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
strings_internal
{
template
<
typename
T
typename
=
void
>
struct
ABSL_DEPRECATED
(
"
Use
absl
:
:
HasAbslStringify
"
)
HasAbslStringify
:
std
:
:
false_type
{
}
;
template
<
typename
T
>
struct
ABSL_DEPRECATED
(
"
Use
absl
:
:
HasAbslStringify
"
)
HasAbslStringify
<
T
std
:
:
enable_if_t
<
std
:
:
is_void
<
decltype
(
AbslStringify
(
std
:
:
declval
<
strings_internal
:
:
UnimplementedSink
&
>
(
)
std
:
:
declval
<
const
T
&
>
(
)
)
)
>
:
:
value
>
>
:
std
:
:
true_type
{
}
;
}
ABSL_NAMESPACE_END
}
#
endif
