#
include
"
absl
/
status
/
internal
/
status_matchers
.
h
"
#
include
<
ostream
>
#
include
<
string
>
#
include
"
gmock
/
gmock
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
status
/
status
.
h
"
namespace
absl_testing
{
ABSL_NAMESPACE_BEGIN
namespace
status_internal
{
void
StatusIsMatcherCommonImpl
:
:
DescribeTo
(
std
:
:
ostream
*
os
)
const
{
*
os
<
<
"
has
a
status
code
that
"
;
code_matcher_
.
DescribeTo
(
os
)
;
*
os
<
<
"
and
has
an
error
message
that
"
;
message_matcher_
.
DescribeTo
(
os
)
;
}
void
StatusIsMatcherCommonImpl
:
:
DescribeNegationTo
(
std
:
:
ostream
*
os
)
const
{
*
os
<
<
"
either
has
a
status
code
that
"
;
code_matcher_
.
DescribeNegationTo
(
os
)
;
*
os
<
<
"
or
has
an
error
message
that
"
;
message_matcher_
.
DescribeNegationTo
(
os
)
;
}
bool
StatusIsMatcherCommonImpl
:
:
MatchAndExplain
(
const
:
:
absl
:
:
Status
&
status
:
:
testing
:
:
MatchResultListener
*
result_listener
)
const
{
:
:
testing
:
:
StringMatchResultListener
inner_listener
;
if
(
!
code_matcher_
.
MatchAndExplain
(
status
.
code
(
)
&
inner_listener
)
)
{
*
result_listener
<
<
(
inner_listener
.
str
(
)
.
empty
(
)
?
status
.
ok
(
)
?
"
which
is
OK
"
:
"
whose
status
code
is
wrong
"
:
"
which
has
a
status
code
"
+
inner_listener
.
str
(
)
)
;
return
false
;
}
if
(
!
message_matcher_
.
Matches
(
std
:
:
string
(
status
.
message
(
)
)
)
)
{
*
result_listener
<
<
"
whose
error
message
is
wrong
"
;
return
false
;
}
return
true
;
}
}
ABSL_NAMESPACE_END
}
