#
ifndef
ABSL_BASE_LOG_SEVERITY_H_
#
define
ABSL_BASE_LOG_SEVERITY_H_
#
include
<
array
>
#
include
<
ostream
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
enum
class
LogSeverity
:
int
{
kInfo
=
0
kWarning
=
1
kError
=
2
kFatal
=
3
}
;
constexpr
std
:
:
array
<
absl
:
:
LogSeverity
4
>
LogSeverities
(
)
{
return
{
{
absl
:
:
LogSeverity
:
:
kInfo
absl
:
:
LogSeverity
:
:
kWarning
absl
:
:
LogSeverity
:
:
kError
absl
:
:
LogSeverity
:
:
kFatal
}
}
;
}
#
ifdef
NDEBUG
static
constexpr
absl
:
:
LogSeverity
kLogDebugFatal
=
absl
:
:
LogSeverity
:
:
kError
;
#
else
static
constexpr
absl
:
:
LogSeverity
kLogDebugFatal
=
absl
:
:
LogSeverity
:
:
kFatal
;
#
endif
constexpr
const
char
*
LogSeverityName
(
absl
:
:
LogSeverity
s
)
{
switch
(
s
)
{
case
absl
:
:
LogSeverity
:
:
kInfo
:
return
"
INFO
"
;
case
absl
:
:
LogSeverity
:
:
kWarning
:
return
"
WARNING
"
;
case
absl
:
:
LogSeverity
:
:
kError
:
return
"
ERROR
"
;
case
absl
:
:
LogSeverity
:
:
kFatal
:
return
"
FATAL
"
;
}
return
"
UNKNOWN
"
;
}
constexpr
absl
:
:
LogSeverity
NormalizeLogSeverity
(
absl
:
:
LogSeverity
s
)
{
absl
:
:
LogSeverity
n
=
s
;
if
(
n
<
absl
:
:
LogSeverity
:
:
kInfo
)
n
=
absl
:
:
LogSeverity
:
:
kInfo
;
if
(
n
>
absl
:
:
LogSeverity
:
:
kFatal
)
n
=
absl
:
:
LogSeverity
:
:
kError
;
return
n
;
}
constexpr
absl
:
:
LogSeverity
NormalizeLogSeverity
(
int
s
)
{
return
absl
:
:
NormalizeLogSeverity
(
static_cast
<
absl
:
:
LogSeverity
>
(
s
)
)
;
}
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
absl
:
:
LogSeverity
s
)
;
enum
class
LogSeverityAtLeast
:
int
{
kInfo
=
static_cast
<
int
>
(
absl
:
:
LogSeverity
:
:
kInfo
)
kWarning
=
static_cast
<
int
>
(
absl
:
:
LogSeverity
:
:
kWarning
)
kError
=
static_cast
<
int
>
(
absl
:
:
LogSeverity
:
:
kError
)
kFatal
=
static_cast
<
int
>
(
absl
:
:
LogSeverity
:
:
kFatal
)
kInfinity
=
1000
}
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
absl
:
:
LogSeverityAtLeast
s
)
;
enum
class
LogSeverityAtMost
:
int
{
kNegativeInfinity
=
-
1000
kInfo
=
static_cast
<
int
>
(
absl
:
:
LogSeverity
:
:
kInfo
)
kWarning
=
static_cast
<
int
>
(
absl
:
:
LogSeverity
:
:
kWarning
)
kError
=
static_cast
<
int
>
(
absl
:
:
LogSeverity
:
:
kError
)
kFatal
=
static_cast
<
int
>
(
absl
:
:
LogSeverity
:
:
kFatal
)
}
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
absl
:
:
LogSeverityAtMost
s
)
;
#
define
COMPOP
(
op1
op2
T
)
\
constexpr
bool
operator
op1
(
absl
:
:
T
lhs
absl
:
:
LogSeverity
rhs
)
{
\
return
static_cast
<
absl
:
:
LogSeverity
>
(
lhs
)
op1
rhs
;
\
}
\
constexpr
bool
operator
op2
(
absl
:
:
LogSeverity
lhs
absl
:
:
T
rhs
)
{
\
return
lhs
op2
static_cast
<
absl
:
:
LogSeverity
>
(
rhs
)
;
\
}
COMPOP
(
>
<
LogSeverityAtLeast
)
COMPOP
(
<
=
>
=
LogSeverityAtLeast
)
COMPOP
(
<
>
LogSeverityAtMost
)
COMPOP
(
>
=
<
=
LogSeverityAtMost
)
#
undef
COMPOP
ABSL_NAMESPACE_END
}
#
endif
