#
ifndef
ABSL_BASE_INTERNAL_TRACING_H_
#
define
ABSL_BASE_INTERNAL_TRACING_H_
#
include
"
absl
/
base
/
config
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
enum
class
ObjectKind
{
kUnknown
kBlockingCounter
kNotification
}
;
void
TraceWait
(
const
void
*
object
ObjectKind
kind
)
;
void
TraceContinue
(
const
void
*
object
ObjectKind
kind
)
;
void
TraceSignal
(
const
void
*
object
ObjectKind
kind
)
;
void
TraceObserved
(
const
void
*
object
ObjectKind
kind
)
;
extern
"
C
"
{
void
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalTraceWait
)
(
const
void
*
object
ObjectKind
kind
)
;
void
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalTraceContinue
)
(
const
void
*
object
ObjectKind
kind
)
;
void
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalTraceSignal
)
(
const
void
*
object
ObjectKind
kind
)
;
void
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalTraceObserved
)
(
const
void
*
object
ObjectKind
kind
)
;
}
inline
void
TraceWait
(
const
void
*
object
ObjectKind
kind
)
{
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalTraceWait
)
(
object
kind
)
;
}
inline
void
TraceContinue
(
const
void
*
object
ObjectKind
kind
)
{
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalTraceContinue
)
(
object
kind
)
;
}
inline
void
TraceSignal
(
const
void
*
object
ObjectKind
kind
)
{
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalTraceSignal
)
(
object
kind
)
;
}
inline
void
TraceObserved
(
const
void
*
object
ObjectKind
kind
)
{
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalTraceObserved
)
(
object
kind
)
;
}
}
ABSL_NAMESPACE_END
}
#
endif
