#
ifndef
ABSL_BASE_INTERNAL_POISON_H_
#
define
ABSL_BASE_INTERNAL_POISON_H_
#
include
<
cstdint
>
#
include
"
absl
/
base
/
config
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
inline
void
*
GetBadPointerInternal
(
)
{
constexpr
uint64_t
kBadPtr
=
0xBAD0BAD0BAD0BAD0
;
auto
ret
=
reinterpret_cast
<
void
*
>
(
static_cast
<
uintptr_t
>
(
kBadPtr
)
)
;
#
ifndef
_MSC_VER
asm
volatile
(
"
"
:
:
"
r
"
(
ret
)
:
)
;
/
/
NOLINT
#
endif
return
ret
;
}
void
*
InitializePoisonedPointerInternal
(
)
;
inline
void
*
get_poisoned_pointer
(
)
{
#
if
defined
(
NDEBUG
)
&
&
!
defined
(
ABSL_HAVE_ADDRESS_SANITIZER
)
&
&
\
!
defined
(
ABSL_HAVE_MEMORY_SANITIZER
)
return
GetBadPointerInternal
(
)
;
#
else
static
void
*
ptr
=
InitializePoisonedPointerInternal
(
)
;
return
ptr
;
#
endif
}
}
ABSL_NAMESPACE_END
}
#
endif
