#
include
"
absl
/
base
/
internal
/
poison
.
h
"
#
include
<
cstdlib
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
internal
/
direct_mmap
.
h
"
#
ifndef
_WIN32
#
include
<
unistd
.
h
>
#
endif
#
if
defined
(
ABSL_HAVE_ADDRESS_SANITIZER
)
#
include
<
sanitizer
/
asan_interface
.
h
>
#
elif
defined
(
ABSL_HAVE_MEMORY_SANITIZER
)
#
include
<
sanitizer
/
msan_interface
.
h
>
#
elif
defined
(
ABSL_HAVE_MMAP
)
#
include
<
sys
/
mman
.
h
>
#
endif
#
if
defined
(
_WIN32
)
#
include
<
windows
.
h
>
#
endif
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
namespace
{
size_t
GetPageSize
(
)
{
#
ifdef
_WIN32
SYSTEM_INFO
system_info
;
GetSystemInfo
(
&
system_info
)
;
return
system_info
.
dwPageSize
;
#
elif
defined
(
__wasm__
)
|
|
defined
(
__asmjs__
)
|
|
defined
(
__hexagon__
)
return
getpagesize
(
)
;
#
else
return
static_cast
<
size_t
>
(
sysconf
(
_SC_PAGESIZE
)
)
;
#
endif
}
}
void
*
InitializePoisonedPointerInternal
(
)
{
const
size_t
block_size
=
GetPageSize
(
)
;
#
if
defined
(
ABSL_HAVE_ADDRESS_SANITIZER
)
void
*
data
=
malloc
(
block_size
)
;
ASAN_POISON_MEMORY_REGION
(
data
block_size
)
;
#
elif
defined
(
ABSL_HAVE_MEMORY_SANITIZER
)
void
*
data
=
malloc
(
block_size
)
;
__msan_poison
(
data
block_size
)
;
#
elif
defined
(
ABSL_HAVE_MMAP
)
void
*
data
=
DirectMmap
(
nullptr
block_size
PROT_NONE
MAP_PRIVATE
|
MAP_ANONYMOUS
-
1
0
)
;
if
(
data
=
=
MAP_FAILED
)
return
GetBadPointerInternal
(
)
;
#
elif
defined
(
_WIN32
)
void
*
data
=
VirtualAlloc
(
nullptr
block_size
MEM_RESERVE
|
MEM_COMMIT
PAGE_NOACCESS
)
;
if
(
data
=
=
nullptr
)
return
GetBadPointerInternal
(
)
;
#
else
return
GetBadPointerInternal
(
)
;
#
endif
return
static_cast
<
char
*
>
(
data
)
+
block_size
/
2
;
}
}
ABSL_NAMESPACE_END
}
