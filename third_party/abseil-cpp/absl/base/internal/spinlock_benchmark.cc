#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
base
/
internal
/
scheduling_mode
.
h
"
#
include
"
absl
/
base
/
internal
/
spinlock
.
h
"
#
include
"
absl
/
synchronization
/
internal
/
create_thread_identity
.
h
"
#
include
"
benchmark
/
benchmark
.
h
"
namespace
{
template
<
absl
:
:
base_internal
:
:
SchedulingMode
scheduling_mode
>
static
void
BM_TryLock
(
benchmark
:
:
State
&
state
)
{
ABSL_INTERNAL_CHECK
(
absl
:
:
synchronization_internal
:
:
GetOrCreateCurrentThreadIdentity
(
)
!
=
nullptr
"
GetOrCreateCurrentThreadIdentity
(
)
failed
"
)
;
static
auto
*
spinlock
=
new
absl
:
:
base_internal
:
:
SpinLock
(
scheduling_mode
)
;
for
(
auto
_
:
state
)
{
if
(
spinlock
-
>
TryLock
(
)
)
spinlock
-
>
Unlock
(
)
;
}
}
template
<
absl
:
:
base_internal
:
:
SchedulingMode
scheduling_mode
>
static
void
BM_SpinLock
(
benchmark
:
:
State
&
state
)
{
ABSL_INTERNAL_CHECK
(
absl
:
:
synchronization_internal
:
:
GetOrCreateCurrentThreadIdentity
(
)
!
=
nullptr
"
GetOrCreateCurrentThreadIdentity
(
)
failed
"
)
;
static
auto
*
spinlock
=
new
absl
:
:
base_internal
:
:
SpinLock
(
scheduling_mode
)
;
for
(
auto
_
:
state
)
{
absl
:
:
base_internal
:
:
SpinLockHolder
holder
(
spinlock
)
;
}
}
BENCHMARK_TEMPLATE
(
BM_SpinLock
absl
:
:
base_internal
:
:
SCHEDULE_KERNEL_ONLY
)
-
>
UseRealTime
(
)
-
>
Threads
(
1
)
-
>
ThreadPerCpu
(
)
;
BENCHMARK_TEMPLATE
(
BM_SpinLock
absl
:
:
base_internal
:
:
SCHEDULE_COOPERATIVE_AND_KERNEL
)
-
>
UseRealTime
(
)
-
>
Threads
(
1
)
-
>
ThreadPerCpu
(
)
;
BENCHMARK_TEMPLATE
(
BM_TryLock
absl
:
:
base_internal
:
:
SCHEDULE_KERNEL_ONLY
)
-
>
UseRealTime
(
)
-
>
Threads
(
1
)
-
>
ThreadPerCpu
(
)
;
BENCHMARK_TEMPLATE
(
BM_TryLock
absl
:
:
base_internal
:
:
SCHEDULE_COOPERATIVE_AND_KERNEL
)
-
>
UseRealTime
(
)
-
>
Threads
(
1
)
-
>
ThreadPerCpu
(
)
;
}
