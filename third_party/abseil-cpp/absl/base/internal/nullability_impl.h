#
ifndef
ABSL_BASE_INTERNAL_NULLABILITY_IMPL_H_
#
define
ABSL_BASE_INTERNAL_NULLABILITY_IMPL_H_
#
include
<
memory
>
#
include
<
type_traits
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
meta
/
type_traits
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
nullability_internal
{
template
<
typename
typename
=
void
>
struct
IsNullabilityCompatible
:
std
:
:
false_type
{
}
;
template
<
typename
T
>
struct
IsNullabilityCompatible
<
T
absl
:
:
void_t
<
typename
T
:
:
absl_nullability_compatible
>
>
:
std
:
:
true_type
{
}
;
template
<
typename
T
>
constexpr
bool
IsSupportedType
=
IsNullabilityCompatible
<
T
>
:
:
value
;
template
<
typename
T
>
constexpr
bool
IsSupportedType
<
T
*
>
=
true
;
template
<
typename
T
typename
U
>
constexpr
bool
IsSupportedType
<
T
U
:
:
*
>
=
true
;
template
<
typename
T
typename
.
.
.
Deleter
>
constexpr
bool
IsSupportedType
<
std
:
:
unique_ptr
<
T
Deleter
.
.
.
>
>
=
true
;
template
<
typename
T
>
constexpr
bool
IsSupportedType
<
std
:
:
shared_ptr
<
T
>
>
=
true
;
template
<
typename
T
>
struct
EnableNullable
{
static_assert
(
nullability_internal
:
:
IsSupportedType
<
std
:
:
remove_cv_t
<
T
>
>
"
Template
argument
must
be
a
raw
or
supported
smart
pointer
"
"
type
.
See
absl
/
base
/
nullability
.
h
.
"
)
;
using
type
=
T
;
}
;
template
<
typename
T
>
struct
EnableNonnull
{
static_assert
(
nullability_internal
:
:
IsSupportedType
<
std
:
:
remove_cv_t
<
T
>
>
"
Template
argument
must
be
a
raw
or
supported
smart
pointer
"
"
type
.
See
absl
/
base
/
nullability
.
h
.
"
)
;
using
type
=
T
;
}
;
template
<
typename
T
>
struct
EnableNullabilityUnknown
{
static_assert
(
nullability_internal
:
:
IsSupportedType
<
std
:
:
remove_cv_t
<
T
>
>
"
Template
argument
must
be
a
raw
or
supported
smart
pointer
"
"
type
.
See
absl
/
base
/
nullability
.
h
.
"
)
;
using
type
=
T
;
}
;
template
<
typename
T
typename
=
typename
EnableNullable
<
T
>
:
:
type
>
using
NullableImpl
#
if
ABSL_HAVE_CPP_ATTRIBUTE
(
clang
:
:
annotate
)
[
[
clang
:
:
annotate
(
"
Nullable
"
)
]
]
#
endif
=
T
;
template
<
typename
T
typename
=
typename
EnableNonnull
<
T
>
:
:
type
>
using
NonnullImpl
#
if
ABSL_HAVE_CPP_ATTRIBUTE
(
clang
:
:
annotate
)
[
[
clang
:
:
annotate
(
"
Nonnull
"
)
]
]
#
endif
=
T
;
template
<
typename
T
typename
=
typename
EnableNullabilityUnknown
<
T
>
:
:
type
>
using
NullabilityUnknownImpl
#
if
ABSL_HAVE_CPP_ATTRIBUTE
(
clang
:
:
annotate
)
[
[
clang
:
:
annotate
(
"
Nullability_Unspecified
"
)
]
]
#
endif
=
T
;
}
ABSL_NAMESPACE_END
}
#
endif
