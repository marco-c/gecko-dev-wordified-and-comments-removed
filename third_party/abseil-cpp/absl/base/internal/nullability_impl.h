#
ifndef
ABSL_BASE_INTERNAL_NULLABILITY_IMPL_H_
#
define
ABSL_BASE_INTERNAL_NULLABILITY_IMPL_H_
#
include
<
memory
>
#
include
<
type_traits
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
meta
/
type_traits
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
nullability_internal
{
template
<
typename
T
>
using
NullableImpl
#
if
ABSL_HAVE_CPP_ATTRIBUTE
(
clang
:
:
annotate
)
[
[
clang
:
:
annotate
(
"
Nullable
"
)
]
]
#
endif
#
if
ABSL_HAVE_FEATURE
(
nullability_on_classes
)
&
&
!
defined
(
__OBJC__
)
=
T
_Nullable
;
#
else
=
T
;
#
endif
template
<
typename
T
>
using
NonnullImpl
#
if
ABSL_HAVE_CPP_ATTRIBUTE
(
clang
:
:
annotate
)
[
[
clang
:
:
annotate
(
"
Nonnull
"
)
]
]
#
endif
#
if
ABSL_HAVE_FEATURE
(
nullability_on_classes
)
&
&
!
defined
(
__OBJC__
)
=
T
_Nonnull
;
#
else
=
T
;
#
endif
template
<
typename
T
>
using
NullabilityUnknownImpl
#
if
ABSL_HAVE_CPP_ATTRIBUTE
(
clang
:
:
annotate
)
[
[
clang
:
:
annotate
(
"
Nullability_Unspecified
"
)
]
]
#
endif
#
if
ABSL_HAVE_FEATURE
(
nullability_on_classes
)
&
&
!
defined
(
__OBJC__
)
=
T
_Null_unspecified
;
#
else
=
T
;
#
endif
}
ABSL_NAMESPACE_END
}
#
endif
