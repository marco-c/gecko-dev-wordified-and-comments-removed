#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
<
tuple
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
strings
/
str_cat
.
h
"
namespace
{
TEST
(
RawLoggingCompilationTest
Log
)
{
ABSL_RAW_LOG
(
INFO
"
RAW
INFO
:
%
d
"
1
)
;
ABSL_RAW_LOG
(
INFO
"
RAW
INFO
:
%
d
%
d
"
1
2
)
;
ABSL_RAW_LOG
(
INFO
"
RAW
INFO
:
%
d
%
d
%
d
"
1
2
3
)
;
ABSL_RAW_LOG
(
INFO
"
RAW
INFO
:
%
d
%
d
%
d
%
d
"
1
2
3
4
)
;
ABSL_RAW_LOG
(
INFO
"
RAW
INFO
:
%
d
%
d
%
d
%
d
%
d
"
1
2
3
4
5
)
;
ABSL_RAW_LOG
(
WARNING
"
RAW
WARNING
:
%
d
"
1
)
;
ABSL_RAW_LOG
(
ERROR
"
RAW
ERROR
:
%
d
"
1
)
;
}
TEST
(
RawLoggingCompilationTest
LogWithNulls
)
{
ABSL_RAW_LOG
(
INFO
"
RAW
INFO
:
%
s
%
c
%
s
"
"
Hello
"
0
"
World
"
)
;
}
TEST
(
RawLoggingCompilationTest
PassingCheck
)
{
ABSL_RAW_CHECK
(
true
"
RAW
CHECK
"
)
;
}
const
char
kExpectedDeathOutput
[
]
=
"
"
;
TEST
(
RawLoggingDeathTest
FailingCheck
)
{
EXPECT_DEATH_IF_SUPPORTED
(
ABSL_RAW_CHECK
(
1
=
=
0
"
explanation
"
)
kExpectedDeathOutput
)
;
}
TEST
(
RawLoggingDeathTest
LogFatal
)
{
EXPECT_DEATH_IF_SUPPORTED
(
ABSL_RAW_LOG
(
FATAL
"
my
dog
has
fleas
"
)
kExpectedDeathOutput
)
;
}
TEST
(
InternalLog
CompilationTest
)
{
ABSL_INTERNAL_LOG
(
INFO
"
Internal
Log
"
)
;
std
:
:
string
log_msg
=
"
Internal
Log
"
;
ABSL_INTERNAL_LOG
(
INFO
log_msg
)
;
ABSL_INTERNAL_LOG
(
INFO
log_msg
+
"
2
"
)
;
float
d
=
1
.
1f
;
ABSL_INTERNAL_LOG
(
INFO
absl
:
:
StrCat
(
"
Internal
log
"
3
"
+
"
d
)
)
;
}
TEST
(
InternalLogDeathTest
FailingCheck
)
{
EXPECT_DEATH_IF_SUPPORTED
(
ABSL_INTERNAL_CHECK
(
1
=
=
0
"
explanation
"
)
kExpectedDeathOutput
)
;
}
TEST
(
InternalLogDeathTest
LogFatal
)
{
EXPECT_DEATH_IF_SUPPORTED
(
ABSL_INTERNAL_LOG
(
FATAL
"
my
dog
has
fleas
"
)
kExpectedDeathOutput
)
;
}
}
