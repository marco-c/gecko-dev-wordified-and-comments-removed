#
ifndef
ABSL_BASE_CASTS_H_
#
define
ABSL_BASE_CASTS_H_
#
include
<
cstring
>
#
include
<
memory
>
#
include
<
type_traits
>
#
include
<
utility
>
#
if
defined
(
__cpp_lib_bit_cast
)
&
&
__cpp_lib_bit_cast
>
=
201806L
#
include
<
bit
>
#
endif
#
include
"
absl
/
base
/
internal
/
identity
.
h
"
#
include
"
absl
/
base
/
macros
.
h
"
#
include
"
absl
/
meta
/
type_traits
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
template
<
typename
To
>
constexpr
To
implicit_cast
(
typename
absl
:
:
internal
:
:
type_identity_t
<
To
>
to
)
{
return
to
;
}
#
if
defined
(
__cpp_lib_bit_cast
)
&
&
__cpp_lib_bit_cast
>
=
201806L
using
std
:
:
bit_cast
;
#
else
template
<
typename
Dest
typename
Source
typename
std
:
:
enable_if
<
sizeof
(
Dest
)
=
=
sizeof
(
Source
)
&
&
std
:
:
is_trivially_copyable
<
Source
>
:
:
value
&
&
std
:
:
is_trivially_copyable
<
Dest
>
:
:
value
#
if
!
ABSL_HAVE_BUILTIN
(
__builtin_bit_cast
)
&
&
std
:
:
is_default_constructible
<
Dest
>
:
:
value
#
endif
int
>
:
:
type
=
0
>
#
if
ABSL_HAVE_BUILTIN
(
__builtin_bit_cast
)
inline
constexpr
Dest
bit_cast
(
const
Source
&
source
)
{
return
__builtin_bit_cast
(
Dest
source
)
;
}
#
else
inline
Dest
bit_cast
(
const
Source
&
source
)
{
Dest
dest
;
memcpy
(
static_cast
<
void
*
>
(
std
:
:
addressof
(
dest
)
)
static_cast
<
const
void
*
>
(
std
:
:
addressof
(
source
)
)
sizeof
(
dest
)
)
;
return
dest
;
}
#
endif
#
endif
ABSL_NAMESPACE_END
}
#
endif
