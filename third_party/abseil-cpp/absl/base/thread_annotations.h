#
ifndef
ABSL_BASE_THREAD_ANNOTATIONS_H_
#
define
ABSL_BASE_THREAD_ANNOTATIONS_H_
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
if
ABSL_HAVE_ATTRIBUTE
(
guarded_by
)
#
define
ABSL_GUARDED_BY
(
x
)
__attribute__
(
(
guarded_by
(
x
)
)
)
#
else
#
define
ABSL_GUARDED_BY
(
x
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
pt_guarded_by
)
#
define
ABSL_PT_GUARDED_BY
(
x
)
__attribute__
(
(
pt_guarded_by
(
x
)
)
)
#
else
#
define
ABSL_PT_GUARDED_BY
(
x
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
acquired_after
)
#
define
ABSL_ACQUIRED_AFTER
(
.
.
.
)
__attribute__
(
(
acquired_after
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_ACQUIRED_AFTER
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
acquired_before
)
#
define
ABSL_ACQUIRED_BEFORE
(
.
.
.
)
__attribute__
(
(
acquired_before
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_ACQUIRED_BEFORE
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
exclusive_locks_required
)
#
define
ABSL_EXCLUSIVE_LOCKS_REQUIRED
(
.
.
.
)
\
__attribute__
(
(
exclusive_locks_required
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_EXCLUSIVE_LOCKS_REQUIRED
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
shared_locks_required
)
#
define
ABSL_SHARED_LOCKS_REQUIRED
(
.
.
.
)
\
__attribute__
(
(
shared_locks_required
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_SHARED_LOCKS_REQUIRED
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
locks_excluded
)
#
define
ABSL_LOCKS_EXCLUDED
(
.
.
.
)
__attribute__
(
(
locks_excluded
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_LOCKS_EXCLUDED
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
lock_returned
)
#
define
ABSL_LOCK_RETURNED
(
x
)
__attribute__
(
(
lock_returned
(
x
)
)
)
#
else
#
define
ABSL_LOCK_RETURNED
(
x
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
lockable
)
#
define
ABSL_LOCKABLE
__attribute__
(
(
lockable
)
)
#
else
#
define
ABSL_LOCKABLE
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
scoped_lockable
)
#
define
ABSL_SCOPED_LOCKABLE
__attribute__
(
(
scoped_lockable
)
)
#
else
#
define
ABSL_SCOPED_LOCKABLE
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
exclusive_lock_function
)
#
define
ABSL_EXCLUSIVE_LOCK_FUNCTION
(
.
.
.
)
\
__attribute__
(
(
exclusive_lock_function
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_EXCLUSIVE_LOCK_FUNCTION
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
shared_lock_function
)
#
define
ABSL_SHARED_LOCK_FUNCTION
(
.
.
.
)
\
__attribute__
(
(
shared_lock_function
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_SHARED_LOCK_FUNCTION
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
unlock_function
)
#
define
ABSL_UNLOCK_FUNCTION
(
.
.
.
)
__attribute__
(
(
unlock_function
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_UNLOCK_FUNCTION
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
exclusive_trylock_function
)
#
define
ABSL_EXCLUSIVE_TRYLOCK_FUNCTION
(
.
.
.
)
\
__attribute__
(
(
exclusive_trylock_function
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_EXCLUSIVE_TRYLOCK_FUNCTION
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
shared_trylock_function
)
#
define
ABSL_SHARED_TRYLOCK_FUNCTION
(
.
.
.
)
\
__attribute__
(
(
shared_trylock_function
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_SHARED_TRYLOCK_FUNCTION
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
assert_exclusive_lock
)
#
define
ABSL_ASSERT_EXCLUSIVE_LOCK
(
.
.
.
)
\
__attribute__
(
(
assert_exclusive_lock
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_ASSERT_EXCLUSIVE_LOCK
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
assert_shared_lock
)
#
define
ABSL_ASSERT_SHARED_LOCK
(
.
.
.
)
\
__attribute__
(
(
assert_shared_lock
(
__VA_ARGS__
)
)
)
#
else
#
define
ABSL_ASSERT_SHARED_LOCK
(
.
.
.
)
#
endif
#
if
ABSL_HAVE_ATTRIBUTE
(
no_thread_safety_analysis
)
#
define
ABSL_NO_THREAD_SAFETY_ANALYSIS
\
__attribute__
(
(
no_thread_safety_analysis
)
)
#
else
#
define
ABSL_NO_THREAD_SAFETY_ANALYSIS
#
endif
#
define
ABSL_TS_UNCHECKED
(
x
)
"
"
#
define
ABSL_TS_FIXME
(
x
)
"
"
#
define
ABSL_NO_THREAD_SAFETY_ANALYSIS_FIXME
ABSL_NO_THREAD_SAFETY_ANALYSIS
#
define
ABSL_GUARDED_BY_FIXME
(
x
)
#
define
ABSL_TS_UNCHECKED_READ
(
x
)
absl
:
:
base_internal
:
:
ts_unchecked_read
(
x
)
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
template
<
typename
T
>
inline
const
T
&
ts_unchecked_read
(
const
T
&
v
)
ABSL_NO_THREAD_SAFETY_ANALYSIS
{
return
v
;
}
template
<
typename
T
>
inline
T
&
ts_unchecked_read
(
T
&
v
)
ABSL_NO_THREAD_SAFETY_ANALYSIS
{
return
v
;
}
}
ABSL_NAMESPACE_END
}
#
endif
