#
include
"
absl
/
random
/
seed_sequences
.
h
"
#
include
<
iterator
>
#
include
<
random
>
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
random
/
internal
/
nonsecure_base
.
h
"
#
include
"
absl
/
random
/
random
.
h
"
namespace
{
TEST
(
SeedSequences
Examples
)
{
{
absl
:
:
SeedSeq
seed_seq
(
{
1
2
3
}
)
;
absl
:
:
BitGen
bitgen
(
seed_seq
)
;
EXPECT_NE
(
0
bitgen
(
)
)
;
}
{
absl
:
:
BitGen
engine
;
auto
seed_seq
=
absl
:
:
CreateSeedSeqFrom
(
&
engine
)
;
absl
:
:
BitGen
bitgen
(
seed_seq
)
;
EXPECT_NE
(
engine
(
)
bitgen
(
)
)
;
}
{
auto
seed_seq
=
absl
:
:
MakeSeedSeq
(
)
;
std
:
:
mt19937
random
(
seed_seq
)
;
EXPECT_NE
(
0
random
(
)
)
;
}
}
TEST
(
CreateSeedSeqFrom
CompatibleWithStdTypes
)
{
using
ExampleNonsecureURBG
=
absl
:
:
random_internal
:
:
NonsecureURBGBase
<
std
:
:
minstd_rand0
>
;
ExampleNonsecureURBG
rng
;
auto
seq_from_rng
=
absl
:
:
CreateSeedSeqFrom
(
&
rng
)
;
std
:
:
mt19937_64
{
seq_from_rng
}
;
}
TEST
(
CreateSeedSeqFrom
CompatibleWithBitGenerator
)
{
absl
:
:
BitGen
rng
;
auto
seq_from_rng
=
absl
:
:
CreateSeedSeqFrom
(
&
rng
)
;
std
:
:
mt19937_64
{
seq_from_rng
}
;
}
TEST
(
CreateSeedSeqFrom
CompatibleWithInsecureBitGen
)
{
absl
:
:
InsecureBitGen
rng
;
auto
seq_from_rng
=
absl
:
:
CreateSeedSeqFrom
(
&
rng
)
;
std
:
:
mt19937_64
{
seq_from_rng
}
;
}
TEST
(
CreateSeedSeqFrom
CompatibleWithRawURBG
)
{
std
:
:
random_device
urandom
;
auto
seq_from_rng
=
absl
:
:
CreateSeedSeqFrom
(
&
urandom
)
;
std
:
:
mt19937_64
{
seq_from_rng
}
;
}
template
<
typename
URBG
>
void
TestReproducibleVariateSequencesForNonsecureURBG
(
)
{
const
size_t
kNumVariates
=
1000
;
URBG
rng
;
auto
reusable_seed
=
absl
:
:
CreateSeedSeqFrom
(
&
rng
)
;
typename
URBG
:
:
result_type
variates
[
kNumVariates
]
;
{
URBG
child
(
reusable_seed
)
;
for
(
auto
&
variate
:
variates
)
{
variate
=
child
(
)
;
}
}
{
URBG
child
(
reusable_seed
)
;
for
(
auto
&
variate
:
variates
)
{
ASSERT_EQ
(
variate
child
(
)
)
;
}
}
}
TEST
(
CreateSeedSeqFrom
ReproducesVariateSequencesForInsecureBitGen
)
{
TestReproducibleVariateSequencesForNonsecureURBG
<
absl
:
:
InsecureBitGen
>
(
)
;
}
TEST
(
CreateSeedSeqFrom
ReproducesVariateSequencesForBitGenerator
)
{
TestReproducibleVariateSequencesForNonsecureURBG
<
absl
:
:
BitGen
>
(
)
;
}
}
