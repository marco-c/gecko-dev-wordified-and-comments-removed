#
include
"
absl
/
random
/
internal
/
randen
.
h
"
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
random
/
internal
/
randen_detect
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
random_internal
{
namespace
{
struct
RandenState
{
const
void
*
keys
;
bool
has_crypto
;
}
;
RandenState
GetRandenState
(
)
{
static
const
RandenState
state
=
[
]
(
)
{
RandenState
tmp
;
#
if
ABSL_RANDOM_INTERNAL_AES_DISPATCH
if
(
HasRandenHwAesImplementation
(
)
&
&
CPUSupportsRandenHwAes
(
)
)
{
tmp
.
has_crypto
=
true
;
tmp
.
keys
=
RandenHwAes
:
:
GetKeys
(
)
;
}
else
{
tmp
.
has_crypto
=
false
;
tmp
.
keys
=
RandenSlow
:
:
GetKeys
(
)
;
}
#
elif
ABSL_HAVE_ACCELERATED_AES
tmp
.
has_crypto
=
true
;
tmp
.
keys
=
RandenHwAes
:
:
GetKeys
(
)
;
#
else
tmp
.
has_crypto
=
false
;
tmp
.
keys
=
RandenSlow
:
:
GetKeys
(
)
;
#
endif
return
tmp
;
}
(
)
;
return
state
;
}
}
Randen
:
:
Randen
(
)
{
auto
tmp
=
GetRandenState
(
)
;
keys_
=
tmp
.
keys
;
#
if
ABSL_RANDOM_INTERNAL_AES_DISPATCH
has_crypto_
=
tmp
.
has_crypto
;
#
endif
}
}
ABSL_NAMESPACE_END
}
