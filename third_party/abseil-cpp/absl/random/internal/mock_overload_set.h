#
ifndef
ABSL_RANDOM_INTERNAL_MOCK_OVERLOAD_SET_H_
#
define
ABSL_RANDOM_INTERNAL_MOCK_OVERLOAD_SET_H_
#
include
<
type_traits
>
#
include
"
gmock
/
gmock
.
h
"
#
include
"
absl
/
random
/
internal
/
mock_helpers
.
h
"
#
include
"
absl
/
random
/
mocking_bit_gen
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
random_internal
{
template
<
typename
DistrT
typename
Fn
>
struct
MockSingleOverload
;
template
<
typename
DistrT
typename
Ret
typename
.
.
.
Args
>
struct
MockSingleOverload
<
DistrT
Ret
(
MockingBitGen
&
Args
.
.
.
)
>
{
static_assert
(
std
:
:
is_same
<
typename
DistrT
:
:
result_type
Ret
>
:
:
value
"
Overload
signature
must
have
return
type
matching
the
"
"
distribution
result_type
.
"
)
;
using
KeyT
=
Ret
(
DistrT
std
:
:
tuple
<
Args
.
.
.
>
)
;
template
<
typename
MockURBG
>
auto
gmock_Call
(
MockURBG
&
gen
const
:
:
testing
:
:
Matcher
<
Args
>
&
.
.
.
matchers
)
-
>
decltype
(
MockHelpers
:
:
MockFor
<
KeyT
>
(
gen
)
.
gmock_Call
(
matchers
.
.
.
)
)
{
static_assert
(
std
:
:
is_base_of
<
MockingBitGen
MockURBG
>
:
:
value
"
Mocking
requires
an
absl
:
:
MockingBitGen
"
)
;
return
MockHelpers
:
:
MockFor
<
KeyT
>
(
gen
)
.
gmock_Call
(
matchers
.
.
.
)
;
}
}
;
template
<
typename
DistrT
typename
Ret
typename
Arg
typename
.
.
.
Args
>
struct
MockSingleOverload
<
DistrT
Ret
(
Arg
MockingBitGen
&
Args
.
.
.
)
>
{
static_assert
(
std
:
:
is_same
<
typename
DistrT
:
:
result_type
Ret
>
:
:
value
"
Overload
signature
must
have
return
type
matching
the
"
"
distribution
result_type
.
"
)
;
using
KeyT
=
Ret
(
DistrT
std
:
:
tuple
<
Arg
Args
.
.
.
>
)
;
template
<
typename
MockURBG
>
auto
gmock_Call
(
const
:
:
testing
:
:
Matcher
<
Arg
>
&
matcher
MockURBG
&
gen
const
:
:
testing
:
:
Matcher
<
Args
>
&
.
.
.
matchers
)
-
>
decltype
(
MockHelpers
:
:
MockFor
<
KeyT
>
(
gen
)
.
gmock_Call
(
matcher
matchers
.
.
.
)
)
{
static_assert
(
std
:
:
is_base_of
<
MockingBitGen
MockURBG
>
:
:
value
"
Mocking
requires
an
absl
:
:
MockingBitGen
"
)
;
return
MockHelpers
:
:
MockFor
<
KeyT
>
(
gen
)
.
gmock_Call
(
matcher
matchers
.
.
.
)
;
}
}
;
template
<
typename
DistrT
typename
.
.
.
Signatures
>
struct
MockOverloadSet
;
template
<
typename
DistrT
typename
Sig
>
struct
MockOverloadSet
<
DistrT
Sig
>
:
public
MockSingleOverload
<
DistrT
Sig
>
{
using
MockSingleOverload
<
DistrT
Sig
>
:
:
gmock_Call
;
}
;
template
<
typename
DistrT
typename
FirstSig
typename
.
.
.
Rest
>
struct
MockOverloadSet
<
DistrT
FirstSig
Rest
.
.
.
>
:
public
MockSingleOverload
<
DistrT
FirstSig
>
public
MockOverloadSet
<
DistrT
Rest
.
.
.
>
{
using
MockSingleOverload
<
DistrT
FirstSig
>
:
:
gmock_Call
;
using
MockOverloadSet
<
DistrT
Rest
.
.
.
>
:
:
gmock_Call
;
}
;
}
ABSL_NAMESPACE_END
}
#
endif
