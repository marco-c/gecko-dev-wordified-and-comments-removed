#
ifndef
ABSL_RANDOM_INTERNAL_MOCK_VALIDATORS_H_
#
define
ABSL_RANDOM_INTERNAL_MOCK_VALIDATORS_H_
#
include
<
type_traits
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
random
/
internal
/
iostream_state_saver
.
h
"
#
include
"
absl
/
random
/
internal
/
uniform_helper
.
h
"
#
include
"
absl
/
strings
/
str_cat
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
random_internal
{
template
<
typename
NumType
>
class
UniformDistributionValidator
{
public
:
template
<
typename
TagType
>
static
void
Validate
(
NumType
x
TagType
tag
NumType
lo
NumType
hi
)
{
if
(
x
=
=
lo
&
&
lo
=
=
hi
)
return
;
ValidateImpl
(
std
:
:
is_floating_point
<
NumType
>
{
}
x
tag
lo
hi
)
;
}
static
void
Validate
(
NumType
x
NumType
lo
NumType
hi
)
{
Validate
(
x
IntervalClosedOpenTag
(
)
lo
hi
)
;
}
static
void
Validate
(
NumType
)
{
}
private
:
static
absl
:
:
string_view
TagLbBound
(
IntervalClosedOpenTag
)
{
return
"
[
"
;
}
static
absl
:
:
string_view
TagLbBound
(
IntervalOpenOpenTag
)
{
return
"
(
"
;
}
static
absl
:
:
string_view
TagLbBound
(
IntervalClosedClosedTag
)
{
return
"
[
"
;
}
static
absl
:
:
string_view
TagLbBound
(
IntervalOpenClosedTag
)
{
return
"
(
"
;
}
static
absl
:
:
string_view
TagUbBound
(
IntervalClosedOpenTag
)
{
return
"
)
"
;
}
static
absl
:
:
string_view
TagUbBound
(
IntervalOpenOpenTag
)
{
return
"
)
"
;
}
static
absl
:
:
string_view
TagUbBound
(
IntervalClosedClosedTag
)
{
return
"
]
"
;
}
static
absl
:
:
string_view
TagUbBound
(
IntervalOpenClosedTag
)
{
return
"
]
"
;
}
template
<
typename
TagType
>
static
void
ValidateImpl
(
std
:
:
true_type
NumType
x
TagType
tag
NumType
lo
NumType
hi
)
{
UniformDistributionWrapper
<
NumType
>
dist
(
tag
lo
hi
)
;
NumType
lb
=
dist
.
a
(
)
;
NumType
ub
=
dist
.
b
(
)
;
ABSL_INTERNAL_CHECK
(
lb
<
=
x
&
&
x
<
ub
absl
:
:
StrCat
(
x
"
is
not
in
"
TagLbBound
(
tag
)
lo
"
"
hi
TagUbBound
(
tag
)
)
)
;
}
template
<
typename
TagType
>
static
void
ValidateImpl
(
std
:
:
false_type
NumType
x
TagType
tag
NumType
lo
NumType
hi
)
{
using
stream_type
=
typename
random_internal
:
:
stream_format_type
<
NumType
>
:
:
type
;
UniformDistributionWrapper
<
NumType
>
dist
(
tag
lo
hi
)
;
NumType
lb
=
dist
.
a
(
)
;
NumType
ub
=
dist
.
b
(
)
;
ABSL_INTERNAL_CHECK
(
lb
<
=
x
&
&
x
<
=
ub
absl
:
:
StrCat
(
stream_type
{
x
}
"
is
not
in
"
TagLbBound
(
tag
)
stream_type
{
lo
}
"
"
stream_type
{
hi
}
TagUbBound
(
tag
)
)
)
;
}
}
;
}
ABSL_NAMESPACE_END
}
#
endif
