#
ifndef
ABSL_RANDOM_INTERNAL_DISTRIBUTION_TEST_UTIL_H_
#
define
ABSL_RANDOM_INTERNAL_DISTRIBUTION_TEST_UTIL_H_
#
include
<
cstddef
>
#
include
<
ostream
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
span
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
random_internal
{
struct
DistributionMoments
{
size_t
n
=
0
;
double
mean
=
0
.
0
;
double
variance
=
0
.
0
;
double
skewness
=
0
.
0
;
double
kurtosis
=
0
.
0
;
}
;
DistributionMoments
ComputeDistributionMoments
(
absl
:
:
Span
<
const
double
>
data_points
)
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
DistributionMoments
&
moments
)
;
double
ZScore
(
double
expected_mean
const
DistributionMoments
&
moments
)
;
double
RequiredSuccessProbability
(
double
p_fail
int
num_trials
)
;
double
MaxErrorTolerance
(
double
acceptance_probability
)
;
double
erfinv
(
double
x
)
;
double
beta
(
double
p
double
q
)
;
double
InverseNormalSurvival
(
double
x
)
;
bool
Near
(
absl
:
:
string_view
msg
double
actual
double
expected
double
bound
)
;
double
BetaIncomplete
(
double
x
double
p
double
q
)
;
double
BetaIncompleteInv
(
double
p
double
q
double
alpha
)
;
}
ABSL_NAMESPACE_END
}
#
endif
