#
ifndef
ABSL_SYNCHRONIZATION_INTERNAL_WAITER_BASE_H_
#
define
ABSL_SYNCHRONIZATION_INTERNAL_WAITER_BASE_H_
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
internal
/
thread_identity
.
h
"
#
include
"
absl
/
synchronization
/
internal
/
kernel_timeout
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
synchronization_internal
{
class
WaiterBase
{
public
:
WaiterBase
(
)
=
default
;
WaiterBase
(
const
WaiterBase
&
)
=
delete
;
WaiterBase
&
operator
=
(
const
WaiterBase
&
)
=
delete
;
#
ifndef
ABSL_HAVE_THREAD_SANITIZER
static
constexpr
int
kIdlePeriods
=
60
;
#
else
static
constexpr
int
kIdlePeriods
=
1
;
#
endif
protected
:
static
void
MaybeBecomeIdle
(
)
;
}
;
template
<
typename
T
>
class
WaiterCrtp
:
public
WaiterBase
{
public
:
static
T
*
GetWaiter
(
base_internal
:
:
ThreadIdentity
*
identity
)
{
static_assert
(
sizeof
(
T
)
<
=
sizeof
(
base_internal
:
:
ThreadIdentity
:
:
WaiterState
)
"
Insufficient
space
for
Waiter
"
)
;
return
reinterpret_cast
<
T
*
>
(
identity
-
>
waiter_state
.
data
)
;
}
}
;
}
ABSL_NAMESPACE_END
}
#
endif
