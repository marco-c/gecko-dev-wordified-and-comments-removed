#
include
"
absl
/
synchronization
/
barrier
.
h
"
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
synchronization
/
mutex
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
static
bool
IsZero
(
void
*
arg
)
{
return
0
=
=
*
reinterpret_cast
<
int
*
>
(
arg
)
;
}
bool
Barrier
:
:
Block
(
)
{
MutexLock
l
(
&
this
-
>
lock_
)
;
this
-
>
num_to_block_
-
-
;
if
(
this
-
>
num_to_block_
<
0
)
{
ABSL_RAW_LOG
(
FATAL
"
Block
(
)
called
too
many
times
.
num_to_block_
=
%
d
out
of
total
=
%
d
"
this
-
>
num_to_block_
this
-
>
num_to_exit_
)
;
}
this
-
>
lock_
.
Await
(
Condition
(
IsZero
&
this
-
>
num_to_block_
)
)
;
this
-
>
num_to_exit_
-
-
;
ABSL_RAW_CHECK
(
this
-
>
num_to_exit_
>
=
0
"
barrier
underflow
"
)
;
return
this
-
>
num_to_exit_
=
=
0
;
}
ABSL_NAMESPACE_END
}
