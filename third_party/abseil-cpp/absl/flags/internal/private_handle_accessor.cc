#
include
"
absl
/
flags
/
internal
/
private_handle_accessor
.
h
"
#
include
<
memory
>
#
include
<
string
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
flags
/
commandlineflag
.
h
"
#
include
"
absl
/
flags
/
internal
/
commandlineflag
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
flags_internal
{
FlagFastTypeId
PrivateHandleAccessor
:
:
TypeId
(
const
CommandLineFlag
&
flag
)
{
return
flag
.
TypeId
(
)
;
}
std
:
:
unique_ptr
<
FlagStateInterface
>
PrivateHandleAccessor
:
:
SaveState
(
CommandLineFlag
&
flag
)
{
return
flag
.
SaveState
(
)
;
}
bool
PrivateHandleAccessor
:
:
IsSpecifiedOnCommandLine
(
const
CommandLineFlag
&
flag
)
{
return
flag
.
IsSpecifiedOnCommandLine
(
)
;
}
bool
PrivateHandleAccessor
:
:
ValidateInputValue
(
const
CommandLineFlag
&
flag
absl
:
:
string_view
value
)
{
return
flag
.
ValidateInputValue
(
value
)
;
}
void
PrivateHandleAccessor
:
:
CheckDefaultValueParsingRoundtrip
(
const
CommandLineFlag
&
flag
)
{
flag
.
CheckDefaultValueParsingRoundtrip
(
)
;
}
bool
PrivateHandleAccessor
:
:
ParseFrom
(
CommandLineFlag
&
flag
absl
:
:
string_view
value
flags_internal
:
:
FlagSettingMode
set_mode
flags_internal
:
:
ValueSource
source
std
:
:
string
&
error
)
{
return
flag
.
ParseFrom
(
value
set_mode
source
error
)
;
}
}
ABSL_NAMESPACE_END
}
