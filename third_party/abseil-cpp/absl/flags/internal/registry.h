#
ifndef
ABSL_FLAGS_INTERNAL_REGISTRY_H_
#
define
ABSL_FLAGS_INTERNAL_REGISTRY_H_
#
include
<
functional
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
flags
/
commandlineflag
.
h
"
#
include
"
absl
/
flags
/
internal
/
commandlineflag
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
flags_internal
{
void
ForEachFlag
(
std
:
:
function
<
void
(
CommandLineFlag
&
)
>
visitor
)
;
bool
RegisterCommandLineFlag
(
CommandLineFlag
&
const
char
*
filename
)
;
void
FinalizeRegistry
(
)
;
void
Retire
(
const
char
*
name
FlagFastTypeId
type_id
unsigned
char
*
buf
)
;
constexpr
size_t
kRetiredFlagObjSize
=
3
*
sizeof
(
void
*
)
;
constexpr
size_t
kRetiredFlagObjAlignment
=
alignof
(
void
*
)
;
template
<
typename
T
>
class
RetiredFlag
{
public
:
void
Retire
(
const
char
*
flag_name
)
{
flags_internal
:
:
Retire
(
flag_name
base_internal
:
:
FastTypeId
<
T
>
(
)
buf_
)
;
}
private
:
alignas
(
kRetiredFlagObjAlignment
)
unsigned
char
buf_
[
kRetiredFlagObjSize
]
;
}
;
}
ABSL_NAMESPACE_END
}
#
endif
