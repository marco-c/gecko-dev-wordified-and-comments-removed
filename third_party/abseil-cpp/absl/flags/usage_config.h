#
ifndef
ABSL_FLAGS_USAGE_CONFIG_H_
#
define
ABSL_FLAGS_USAGE_CONFIG_H_
#
include
<
functional
>
#
include
<
string
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
flags_internal
{
using
FlagKindFilter
=
std
:
:
function
<
bool
(
absl
:
:
string_view
)
>
;
}
struct
FlagsUsageConfig
{
flags_internal
:
:
FlagKindFilter
contains_helpshort_flags
;
flags_internal
:
:
FlagKindFilter
contains_help_flags
;
flags_internal
:
:
FlagKindFilter
contains_helppackage_flags
;
std
:
:
function
<
std
:
:
string
(
)
>
version_string
;
std
:
:
function
<
std
:
:
string
(
absl
:
:
string_view
)
>
normalize_filename
;
}
;
void
SetFlagsUsageConfig
(
FlagsUsageConfig
usage_config
)
;
namespace
flags_internal
{
FlagsUsageConfig
GetUsageConfig
(
)
;
void
ReportUsageError
(
absl
:
:
string_view
msg
bool
is_fatal
)
;
}
ABSL_NAMESPACE_END
}
extern
"
C
"
{
void
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalReportFatalUsageError
)
(
absl
:
:
string_view
)
;
}
#
endif
