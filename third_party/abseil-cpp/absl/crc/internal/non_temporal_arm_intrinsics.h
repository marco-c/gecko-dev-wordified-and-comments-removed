#
ifndef
ABSL_CRC_INTERNAL_NON_TEMPORAL_ARM_INTRINSICS_H_
#
define
ABSL_CRC_INTERNAL_NON_TEMPORAL_ARM_INTRINSICS_H_
#
include
"
absl
/
base
/
config
.
h
"
#
ifdef
__aarch64__
#
include
<
arm_neon
.
h
>
typedef
int64x2_t
__m128i
;
#
define
vreinterpretq_m128i_s32
(
x
)
vreinterpretq_s64_s32
(
x
)
#
define
vreinterpretq_s64_m128i
(
x
)
(
x
)
static
inline
__attribute__
(
(
always_inline
)
)
void
_mm_sfence
(
void
)
{
__sync_synchronize
(
)
;
}
#
define
_mm_lddqu_si128
_mm_loadu_si128
static
inline
__attribute__
(
(
always_inline
)
)
__m128i
_mm_loadu_si128
(
const
__m128i
*
p
)
{
return
vreinterpretq_m128i_s32
(
vld1q_s32
(
(
const
int32_t
*
)
p
)
)
;
}
static
inline
__attribute__
(
(
always_inline
)
)
void
_mm_stream_si128
(
__m128i
*
p
__m128i
a
)
{
#
if
ABSL_HAVE_BUILTIN
(
__builtin_nontemporal_store
)
__builtin_nontemporal_store
(
a
p
)
;
#
else
vst1q_s64
(
(
int64_t
*
)
p
vreinterpretq_s64_m128i
(
a
)
)
;
#
endif
}
static
inline
__attribute__
(
(
always_inline
)
)
__m128i
_mm_set_epi8
(
signed
char
b15
signed
char
b14
signed
char
b13
signed
char
b12
signed
char
b11
signed
char
b10
signed
char
b9
signed
char
b8
signed
char
b7
signed
char
b6
signed
char
b5
signed
char
b4
signed
char
b3
signed
char
b2
signed
char
b1
signed
char
b0
)
{
int8_t
__attribute__
(
(
aligned
(
16
)
)
)
data
[
16
]
=
{
(
int8_t
)
b0
(
int8_t
)
b1
(
int8_t
)
b2
(
int8_t
)
b3
(
int8_t
)
b4
(
int8_t
)
b5
(
int8_t
)
b6
(
int8_t
)
b7
(
int8_t
)
b8
(
int8_t
)
b9
(
int8_t
)
b10
(
int8_t
)
b11
(
int8_t
)
b12
(
int8_t
)
b13
(
int8_t
)
b14
(
int8_t
)
b15
}
;
return
(
__m128i
)
vld1q_s8
(
data
)
;
}
#
endif
#
endif
