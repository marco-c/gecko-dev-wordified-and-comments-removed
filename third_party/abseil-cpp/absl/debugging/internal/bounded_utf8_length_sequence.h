#
ifndef
ABSL_DEBUGGING_INTERNAL_BOUNDED_UTF8_LENGTH_SEQUENCE_H_
#
define
ABSL_DEBUGGING_INTERNAL_BOUNDED_UTF8_LENGTH_SEQUENCE_H_
#
include
<
cstdint
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
numeric
/
bits
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
debugging_internal
{
template
<
uint32_t
max_elements
>
class
BoundedUtf8LengthSequence
{
public
:
BoundedUtf8LengthSequence
(
)
=
default
;
uint32_t
InsertAndReturnSumOfPredecessors
(
uint32_t
index
uint32_t
utf8_length
)
{
if
(
index
>
=
max_elements
)
index
=
max_elements
-
1
;
if
(
utf8_length
=
=
0
|
|
utf8_length
>
4
)
utf8_length
=
1
;
const
uint32_t
word_index
=
index
/
32
;
const
uint32_t
bit_index
=
2
*
(
index
%
32
)
;
const
uint64_t
ones_bit
=
uint64_t
{
1
}
<
<
bit_index
;
const
uint64_t
odd_bits_mask
=
0xaaaaaaaaaaaaaaaa
;
const
uint64_t
lower_seminibbles_mask
=
ones_bit
-
1
;
const
uint64_t
higher_seminibbles_mask
=
~
lower_seminibbles_mask
;
const
uint64_t
same_word_bits_below_insertion
=
rep_
[
word_index
]
&
lower_seminibbles_mask
;
int
full_popcount
=
absl
:
:
popcount
(
same_word_bits_below_insertion
)
;
int
odd_popcount
=
absl
:
:
popcount
(
same_word_bits_below_insertion
&
odd_bits_mask
)
;
for
(
uint32_t
j
=
word_index
;
j
>
0
;
-
-
j
)
{
const
uint64_t
word_below_insertion
=
rep_
[
j
-
1
]
;
full_popcount
+
=
absl
:
:
popcount
(
word_below_insertion
)
;
odd_popcount
+
=
absl
:
:
popcount
(
word_below_insertion
&
odd_bits_mask
)
;
}
const
uint32_t
sum_of_predecessors
=
index
+
static_cast
<
uint32_t
>
(
full_popcount
+
odd_popcount
)
;
for
(
uint32_t
j
=
max_elements
/
32
-
1
;
j
>
word_index
;
-
-
j
)
{
rep_
[
j
]
=
(
rep_
[
j
]
<
<
2
)
|
(
rep_
[
j
-
1
]
>
>
62
)
;
}
rep_
[
word_index
]
=
(
rep_
[
word_index
]
&
lower_seminibbles_mask
)
|
(
uint64_t
{
utf8_length
-
1
}
<
<
bit_index
)
|
(
(
rep_
[
word_index
]
&
higher_seminibbles_mask
)
<
<
2
)
;
return
sum_of_predecessors
;
}
private
:
static_assert
(
max_elements
>
0
&
&
max_elements
%
32
=
=
0
"
max_elements
must
be
a
positive
multiple
of
32
"
)
;
uint64_t
rep_
[
max_elements
/
32
]
=
{
}
;
}
;
}
ABSL_NAMESPACE_END
}
#
endif
