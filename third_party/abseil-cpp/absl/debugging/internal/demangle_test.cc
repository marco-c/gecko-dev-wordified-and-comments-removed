#
include
"
absl
/
debugging
/
internal
/
demangle
.
h
"
#
include
<
cstdlib
>
#
include
<
string
>
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
debugging
/
internal
/
stack_consumption
.
h
"
#
include
"
absl
/
log
/
log
.
h
"
#
include
"
absl
/
memory
/
memory
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
debugging_internal
{
namespace
{
using
:
:
testing
:
:
ContainsRegex
;
TEST
(
Demangle
FunctionTemplate
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooIiEiT_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
FunctionTemplateWithNesting
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooI7WrapperIiEEiT_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
FunctionTemplateWithNonTypeParamConstraint
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooITkSt8integraliEiT_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
FunctionTemplateWithFunctionRequiresClause
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooIiEivQsr3stdE8integralIT_E
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
FunctionWithTemplateParamRequiresClause
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooIiQsr3stdE8integralIT_EEiv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
FunctionWithTemplateParamAndFunctionRequiresClauses
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooIiQsr3stdE8integralIT_EEivQsr3stdE8integralIS0_E
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
FunctionTemplateBacktracksOnMalformedRequiresClause
)
{
char
tmp
[
100
]
;
ASSERT_FALSE
(
Demangle
(
"
_Z3fooIiQEiT_
"
tmp
sizeof
(
tmp
)
)
)
;
}
TEST
(
Demangle
FunctionTemplateWithAutoParam
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooITnDaLi1EEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
FunctionTemplateWithNonTypeParamPack
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooITpTnRiJEiEvT0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
FunctionTemplateTemplateParamWithConstrainedArg
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooITtTyE5FooerEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
ConstrainedAutoInFunctionTemplate
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z1fITnDk1CLi0EEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
f
<
>
(
)
"
)
;
}
TEST
(
Demangle
ConstrainedFriendFunctionTemplate
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZN2ns1YIiEF1yES1_QLb1E
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
ns
:
:
Y
<
>
:
:
friend
y
(
)
"
)
;
}
TEST
(
Demangle
ConstrainedFriendOperatorTemplate
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZN2ns1YIiEFdeES1_QLb1E
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
ns
:
:
Y
<
>
:
:
friend
operator
*
(
)
"
)
;
}
TEST
(
Demangle
NonTemplateBuiltinType
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3foou17__my_builtin_type
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
(
)
"
)
;
}
TEST
(
Demangle
SingleArgTemplateBuiltinType
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooIiEu17__my_builtin_typeIT_Ev
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
TwoArgTemplateBuiltinType
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooIicEu17__my_builtin_typeIT_T0_Ev
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
TypeNestedUnderTemplatedBuiltinType
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z1fIRK1CENu20__remove_reference_tIT_E4typeES3_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
TemplateTemplateParamSubstitution
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z3fooITtTyTnTL0__E8FoolableEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
TemplateParamSubstitutionWithGenericLambda
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZN5FooerIiE3fooIiEEvNS0_UlTL0__TL0_0_E_E
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
Fooer
<
>
:
:
foo
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaRequiresTrue
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZNK3
_0clIiEEDaT_QLb1E
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
_0
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaRequiresSimpleExpression
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZNK3
_0clIiEEDaT_QeqplLi2ELi2ELi4E
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
_0
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaRequiresRequiresExpressionContainingTrue
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZNK3
_0clIiEEDaT_QrqXLb1EE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
_0
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaRequiresRequiresExpressionContainingConcept
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZNK3
_0clIiEEDaT_QrqXsr3stdE7same_asIDtfp_EiEE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
_0
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaRequiresRequiresExpressionContainingNoexceptExpression
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZNK3
_0clIiEEDaT_QrqXplfp_fp_NE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
_0
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaRequiresRequiresExpressionContainingReturnTypeConstraint
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZNK3
_0clIiEEDaT_QrqXplfp_fp_RNSt7same_asIDtfp_EEEE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
_0
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaRequiresRequiresExpressionWithBothNoexceptAndReturnType
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZNK3
_0clIiEEDaT_QrqXplfp_fp_NRNSt7same_asIDtfp_EEEE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
_0
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaRequiresRequiresExpressionContainingType
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZNK3
_0clI1SEEDaT_QrqTNS2_1TEE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
_0
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaRequiresRequiresExpressionNestingAnotherRequires
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZNK3
_0clIiEEDaT_QrqQLb1EE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
_0
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaRequiresRequiresExpressionContainingTwoRequirements
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZNK3
_0clIiEEDaT_QrqXLb1EXeqplLi2ELi2ELi4EE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
_0
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
RequiresExpressionWithItsOwnParameter
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_Z1fIiE1SIXrQT__XplfL0p_fp_EEES1_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
f
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaWithExplicitTypeArgument
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZZ1fIiET_S0_ENKUlTyS0_E_clIiEEDaS0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
f
<
>
(
)
:
:
{
lambda
(
)
#
1
}
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaWithExplicitPackArgument
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZZ1fIiET_S0_ENKUlTpTyDpT_E_clIJiEEEDaS2_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
f
<
>
(
)
:
:
{
lambda
(
)
#
1
}
:
:
operator
(
)
<
>
(
)
"
)
;
}
TEST
(
Demangle
LambdaInClassMemberDefaultArgument
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZZN1S1fEPFvvEEd_NKUlvE_clEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
S
:
:
f
(
)
:
:
{
default
arg
#
1
}
:
:
{
lambda
(
)
#
1
}
:
:
operator
(
)
(
)
"
)
;
ASSERT_TRUE
(
Demangle
(
"
_ZZN1S1fEPFvvEEd0_NKUlvE_clEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
S
:
:
f
(
)
:
:
{
default
arg
#
2
}
:
:
{
lambda
(
)
#
1
}
:
:
operator
(
)
(
)
"
)
;
ASSERT_FALSE
(
Demangle
(
"
_ZZN1S1fEPFvvEEdn1_NKUlvE_clEv
"
tmp
sizeof
(
tmp
)
)
)
;
}
TEST
(
Demangle
AvoidSignedOverflowForUnfortunateParameterNumbers
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZZN1S1fEPFvvEEd2147483645_NKUlvE_clEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
S
:
:
f
(
)
:
:
{
default
arg
#
2147483647
}
:
:
{
lambda
(
)
#
1
}
:
:
operator
(
)
(
)
"
)
;
ASSERT_TRUE
(
Demangle
(
"
_ZZN1S1fEPFvvEEd2147483646_NKUlvE_clEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
S
:
:
f
(
)
:
:
{
default
arg
#
1
}
:
:
{
lambda
(
)
#
1
}
:
:
operator
(
)
(
)
"
)
;
ASSERT_TRUE
(
Demangle
(
"
_ZZN1S1fEPFvvEEd2147483647_NKUlvE_clEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
S
:
:
f
(
)
:
:
{
default
arg
#
1
}
:
:
{
lambda
(
)
#
1
}
:
:
operator
(
)
(
)
"
)
;
ASSERT_TRUE
(
Demangle
(
"
_ZZN1S1fEPFvvEEd2147483648_NKUlvE_clEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
S
:
:
f
(
)
:
:
{
default
arg
#
1
}
:
:
{
lambda
(
)
#
1
}
:
:
operator
(
)
(
)
"
)
;
}
TEST
(
Demangle
SubstpackNotationForTroublesomeTemplatePack
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZN1AIJEE1fIJEEEvDpO1BI_SUBSTPACK_T_E
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
A
<
>
:
:
f
<
>
(
)
"
)
;
}
TEST
(
Demangle
TemplateTemplateParamAppearingAsBackrefFollowedByTemplateArgs
)
{
char
tmp
[
100
]
;
ASSERT_TRUE
(
Demangle
(
"
_ZN1WI1SE1fIiEEDTclsrS0_IT_EE1mEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
tmp
"
W
<
>
:
:
f
<
>
(
)
"
)
;
}
TEST
(
Demangle
CornerCases
)
{
char
tmp
[
10
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z6foobarv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
foobar
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z6foobarv
"
tmp
9
)
)
;
EXPECT_STREQ
(
"
foobar
(
)
"
tmp
)
;
EXPECT_FALSE
(
Demangle
(
"
_Z6foobarv
"
tmp
8
)
)
;
EXPECT_FALSE
(
Demangle
(
"
_Z6foobarv
"
tmp
1
)
)
;
EXPECT_FALSE
(
Demangle
(
"
_Z6foobarv
"
tmp
0
)
)
;
EXPECT_FALSE
(
Demangle
(
"
_Z6foobarv
"
nullptr
0
)
)
;
EXPECT_FALSE
(
Demangle
(
"
_Z1000000
"
tmp
9
)
)
;
}
TEST
(
Demangle
Clones
)
{
char
tmp
[
20
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
clone
.
3
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
constprop
.
80
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
isra
.
18
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
isra
.
2
.
constprop
.
18
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
__uniq
.
12345
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
__uniq
.
12345
.
isra
.
2
.
constprop
.
18
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
clo
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
123
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
clone
.
foo
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
clone
.
123
.
456
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZL3Foov
.
part
.
9
.
165493
.
constprop
.
775
.
31805
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
Foo
(
)
"
tmp
)
;
EXPECT_FALSE
(
Demangle
(
"
_ZL3Foov
.
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_FALSE
(
Demangle
(
"
_ZL3Foov
.
abc123
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_FALSE
(
Demangle
(
"
_ZL3Foov
.
clone
.
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_FALSE
(
Demangle
(
"
_ZL3Foov
.
isra
.
2
.
constprop
.
"
tmp
sizeof
(
tmp
)
)
)
;
}
TEST
(
Demangle
Discriminators
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZZ1fvEN1S1gEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
:
:
S
:
:
g
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZZ1fvEN1S1gE_0v
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
:
:
S
:
:
g
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZZ1fvEN1S1gE_9v
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
:
:
S
:
:
g
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZZ1fvEN1S1gE__10_v
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
:
:
S
:
:
g
(
)
"
tmp
)
;
}
TEST
(
Demangle
SingleDigitDiscriminatorFollowedByADigit
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZZ1fvEN1S1gE_911return_type
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
:
:
S
:
:
g
(
)
"
tmp
)
;
}
TEST
(
Demangle
LiteralOfGlobalNamespaceEnumType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIL1E42EEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
NullptrLiterals
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fILDnEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fILDn0EEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
StringLiterals
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fILA42_KcEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ComplexFloatingPointLiterals
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEvRAszpltlCdstT_ELS0_0000000000000000_4010000000000000E_c
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
Float128
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvDF128_Ev
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
_Float128
(
)
"
tmp
)
;
}
TEST
(
Demangle
Float128x
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvDF128xEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
_Float128x
(
)
"
tmp
)
;
}
TEST
(
Demangle
Bfloat16
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvDF16bEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
std
:
:
bfloat16_t
(
)
"
tmp
)
;
}
TEST
(
Demangle
SimpleSignedBitInt
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvDB256_Ev
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
_BitInt
(
256
)
(
)
"
tmp
)
;
}
TEST
(
Demangle
SimpleUnsignedBitInt
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvDU256_Ev
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
unsigned
_BitInt
(
256
)
(
)
"
tmp
)
;
}
TEST
(
Demangle
DependentBitInt
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvDBT__ILi256EEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
_BitInt
(
?
)
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ConversionToPointerType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvPiEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
int
*
(
)
"
tmp
)
;
}
TEST
(
Demangle
ConversionToLvalueReferenceType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvRiEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
int
&
(
)
"
tmp
)
;
}
TEST
(
Demangle
ConversionToRvalueReferenceType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvOiEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
int
&
&
(
)
"
tmp
)
;
}
TEST
(
Demangle
ConversionToComplexFloatingPointType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvCfEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
float
_Complex
(
)
"
tmp
)
;
}
TEST
(
Demangle
ConversionToImaginaryFloatingPointType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvGfEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
float
_Imaginary
(
)
"
tmp
)
;
}
TEST
(
Demangle
ConversionToPointerToCvQualifiedType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvPrVKiEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
int
const
volatile
restrict
*
(
)
"
tmp
)
;
}
TEST
(
Demangle
ConversionToLayeredPointerType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvPKPKiEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
int
const
*
const
*
(
)
"
tmp
)
;
}
TEST
(
Demangle
ConversionToTypeWithExtendedQualifier
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1ScvPU5AS128KiEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
int
*
(
)
"
tmp
)
;
}
TEST
(
Demangle
GlobalInitializers
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZGR1v
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
reference
temporary
for
v
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZGR1v_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
reference
temporary
for
v
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZGR1v0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
reference
temporary
for
v
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZGR1v1Z_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
reference
temporary
for
v
"
tmp
)
;
}
TEST
(
Demangle
StructuredBindings
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZDC1x1yE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZGRDC1x1yE_
"
tmp
sizeof
(
tmp
)
)
)
;
}
TEST
(
Demangle
AbiTags
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1aB3abc
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
a
[
abi
:
abc
]
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZN1BC2B3xyzEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
B
:
:
B
[
abi
:
xyz
]
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1CB3barB3foov
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
C
[
abi
:
bar
]
[
abi
:
foo
]
(
)
"
tmp
)
;
}
TEST
(
Demangle
SimpleGnuVectorSize
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fDv8_i
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
"
tmp
)
;
}
TEST
(
Demangle
GnuVectorSizeIsATemplateParameter
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fILi32EEvDvT__i
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
GnuVectorSizeIsADependentOperatorExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fILi32EEvDvmlLi2ET__i
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
SimpleAddressSpace
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fPU5AS128Ki
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
"
tmp
)
;
}
TEST
(
Demangle
DependentAddressSpace
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fILi128EEvPU2ASIT_Ei
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
TransactionSafeEntryPoint
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZGTt1fv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
transaction
clone
for
f
(
)
"
tmp
)
;
}
TEST
(
Demangle
TransactionSafeFunctionType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fPDxFvvE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
"
tmp
)
;
}
TEST
(
Demangle
TemplateParameterObject
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIXtl1SLi1ELi2EEEXadL_ZTAXtlS0_Li1ELi2EEEEEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZTAXtl1SLi1ELi2EEE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
template
parameter
object
"
tmp
)
;
}
TEST
(
Demangle
EnableIfAttributeOnGlobalFunction
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fUa9enable_ifIXgefL0p_Li0EEEl
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
"
tmp
)
;
}
TEST
(
Demangle
EnableIfAttributeOnNamespaceScopeFunction
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZN2ns1fEUa9enable_ifIXgefL0p_Li0EEEl
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
ns
:
:
f
(
)
"
tmp
)
;
}
TEST
(
Demangle
EnableIfAttributeOnFunctionTemplate
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEUa9enable_ifIXgefL0p_tliEEET_S0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ThisPointerInDependentSignature
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZN1S1fIiEEDTcl1gIT_EfpTEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
DependentMemberOperatorCall
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fI1CEDTcldtfp_onclEET_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
TypeNestedUnderDecltype
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiENDTtl1SIT_EEE1tEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ElaboratedTypes
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEvTsN1SIT_E1CE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEvTuN1SIT_E1CE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEvTeN1SIT_E1CE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
SubobjectAddresses
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIXsoKcL_Z1aE123EEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIXadsoKcL_Z1aEEEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIXadsoKcL_Z1aE123EEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIXadsoKcL_Z1aE123pEEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIXadsoKcL_Z1aE__1_234EEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIXadsoKcL_Z1aE123_456pEEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
Preincrement
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_pp_fp_EES0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
Postincrement
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_ppfp_EES0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
Predecrement
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_mm_fp_EES0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
Postdecrement
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_mmfp_EES0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
UnaryFoldExpressions
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIJilEE1SIXfrooeqstT_Li4EEEDpS1_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIJilEE1SIXflooeqstT_Li4EEEDpS1_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
BinaryFoldExpressions
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIJilEE1SIXfRooeqstT_Li4ELb0EEEDpS1_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIJilEE1SIXfLooLb0EeqstT_Li4EEEDpS1_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
SizeofPacks
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIJilEE1SIXsZT_EEDpT_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1gIJilEE1SIXsZfp_EEDpT_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
g
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
SizeofPackInvolvingAnAliasTemplate
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIJiEEvRAsPDpT_iE_Kc
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
UserDefinedLiteral
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Zli4_lity
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
operator
\
"
\
"
_lit
(
)
"
tmp
)
;
}
TEST
(
Demangle
Spaceship
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK1SssERKS_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
S
:
:
operator
<
=
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1gI1SEDTssfp_fp0_ET_S2_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
g
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
CoAwait
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZNK2ns9AwaitableawEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
ns
:
:
Awaitable
:
:
operator
co_await
(
)
"
tmp
)
;
}
TEST
(
Demangle
VendorExtendedExpressions
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIXu3__eEEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIXu3__eilEEEvv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
DirectListInitialization
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_EEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1gI3XYZEDTtlT_Li1ELi2ELi3EEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
g
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1hI3XYZEDTtlT_di1xLi1Edi1yLi2Edi1zLi3EEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
h
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1iI1AEDTtlT_di1adxLi2ELi42EEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
i
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1jI1AEDTtlT_di1adXLi1ELi3ELi42EEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
j
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
SimpleInitializerLists
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTcl1gIT_EilEEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTcl1gilfp_EEET_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTcl1gilfp_fp0_EEET_S1_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
BracedListImplicitlyConstructingAClassObject
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTcl1gildi1vfp_EEET_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
SimpleNewExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_denw_S0_EEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
NewExpressionWithEmptyParentheses
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_denw_S0_piEEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
NewExpressionWithNonemptyParentheses
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_denw_S0_piLi42EEEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
PlacementNewExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_denwadfp__S0_piLi42EEEES0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
GlobalScopeNewExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_degsnw_S0_EEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
NewExpressionWithEmptyBraces
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_denw_S0_ilEEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
NewExpressionWithNonemptyBraces
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_denw_S0_ilLi42EEEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
SimpleArrayNewExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_dena_S0_EEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ArrayNewExpressionWithEmptyParentheses
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_dena_S0_piEEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ArrayPlacementNewExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_denaadfp__S0_EEES0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
GlobalScopeArrayNewExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_degsna_S0_EEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ArrayNewExpressionWithTwoElementsInBraces
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTtlT_dena_S0_ilLi1ELi2EEEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
SimpleDeleteExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTdlfp_EPT_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
GlobalScopeDeleteExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTgsdlfp_EPT_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
SimpleArrayDeleteExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTdafp_EPT_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
GlobalScopeArrayDeleteExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTgsdafp_EPT_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ReferenceQualifiedFunctionTypes
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fPKFvvREi
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fPFvvOEi
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fPFvRiREi
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fPFvO1SOEi
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
(
)
"
tmp
)
;
}
TEST
(
Demangle
DynamicCast
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fI1SEDTdcPKT_fp_EPS1_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
StaticCast
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTscPKT_fp_EPS0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ConstCast
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTccPKT_fp_EPS0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ReinterpretCast
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTrcPKT_fp_EPS0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
TypeidType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTcldttiT_4nameEES0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
TypeidExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEDTcldttetlT_E4nameEES0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
AlignofType
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiET_RAatS0__S0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
AlignofExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiET_RAaztlS0_E_S0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
NoexceptExpression
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIiEvRAnxtlT_E_S0_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
UnaryThrow
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fILb0EEDTquT_twT_Li0EEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
NullaryThrow
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fILb0EEDTquT_trLi0EEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
ThreadLocalWrappers
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_ZTWN2ns3varE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
thread
-
local
wrapper
routine
for
ns
:
:
var
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZTHN2ns3varE
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
thread
-
local
initialization
routine
for
ns
:
:
var
"
tmp
)
;
}
TEST
(
Demangle
DubiousSrStSymbols
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_Z1fIcE1SIXsrSt1uIT_E1vEEv
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
f
<
>
(
)
"
tmp
)
;
EXPECT_TRUE
(
Demangle
(
"
_ZSteqIcEN9__gnu_cxx11__enable_if
"
"
IXsrSt9__is_charIT_E7__valueEbE
"
"
6__typeE
"
"
RKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
std
:
:
operator
=
=
<
>
(
)
"
tmp
)
;
}
TEST
(
Demangle
DelegatesToDemangleRustSymbolEncoding
)
{
char
tmp
[
80
]
;
EXPECT_TRUE
(
Demangle
(
"
_RNvC8my_crate7my_func
"
tmp
sizeof
(
tmp
)
)
)
;
EXPECT_STREQ
(
"
my_crate
:
:
my_func
"
tmp
)
;
}
#
if
defined
(
ABSL_INTERNAL_HAVE_DEBUGGING_STACK_CONSUMPTION
)
&
&
\
!
defined
(
ABSL_HAVE_ADDRESS_SANITIZER
)
&
&
\
!
defined
(
ABSL_HAVE_MEMORY_SANITIZER
)
&
&
\
!
defined
(
ABSL_HAVE_THREAD_SANITIZER
)
static
const
char
*
g_mangled
;
static
char
g_demangle_buffer
[
4096
]
;
static
char
*
g_demangle_result
;
static
void
DemangleSignalHandler
(
int
signo
)
{
if
(
Demangle
(
g_mangled
g_demangle_buffer
sizeof
(
g_demangle_buffer
)
)
)
{
g_demangle_result
=
g_demangle_buffer
;
}
else
{
g_demangle_result
=
nullptr
;
}
}
static
const
char
*
DemangleStackConsumption
(
const
char
*
mangled
int
*
stack_consumed
)
{
g_mangled
=
mangled
;
*
stack_consumed
=
GetSignalHandlerStackConsumption
(
DemangleSignalHandler
)
;
LOG
(
INFO
)
<
<
"
Stack
consumption
of
Demangle
:
"
<
<
*
stack_consumed
;
return
g_demangle_result
;
}
const
int
kStackConsumptionUpperLimit
=
8192
;
static
std
:
:
string
NestedMangledName
(
int
depth
)
{
std
:
:
string
mangled_name
=
"
_Z1a
"
;
if
(
depth
>
0
)
{
mangled_name
+
=
"
IXL
"
;
mangled_name
+
=
NestedMangledName
(
depth
-
1
)
;
mangled_name
+
=
"
EEE
"
;
}
return
mangled_name
;
}
TEST
(
Demangle
DemangleStackConsumption
)
{
int
stack_consumed
=
0
;
const
char
*
demangled
=
DemangleStackConsumption
(
"
_Z6foobarv
"
&
stack_consumed
)
;
EXPECT_STREQ
(
"
foobar
(
)
"
demangled
)
;
EXPECT_GT
(
stack_consumed
0
)
;
EXPECT_LT
(
stack_consumed
kStackConsumptionUpperLimit
)
;
const
std
:
:
string
nested_mangled_name0
=
NestedMangledName
(
0
)
;
demangled
=
DemangleStackConsumption
(
nested_mangled_name0
.
c_str
(
)
&
stack_consumed
)
;
EXPECT_STREQ
(
"
a
"
demangled
)
;
EXPECT_GT
(
stack_consumed
0
)
;
EXPECT_LT
(
stack_consumed
kStackConsumptionUpperLimit
)
;
const
std
:
:
string
nested_mangled_name1
=
NestedMangledName
(
1
)
;
demangled
=
DemangleStackConsumption
(
nested_mangled_name1
.
c_str
(
)
&
stack_consumed
)
;
EXPECT_STREQ
(
"
a
<
>
"
demangled
)
;
EXPECT_GT
(
stack_consumed
0
)
;
EXPECT_LT
(
stack_consumed
kStackConsumptionUpperLimit
)
;
const
std
:
:
string
nested_mangled_name2
=
NestedMangledName
(
2
)
;
demangled
=
DemangleStackConsumption
(
nested_mangled_name2
.
c_str
(
)
&
stack_consumed
)
;
EXPECT_STREQ
(
"
a
<
>
"
demangled
)
;
EXPECT_GT
(
stack_consumed
0
)
;
EXPECT_LT
(
stack_consumed
kStackConsumptionUpperLimit
)
;
const
std
:
:
string
nested_mangled_name3
=
NestedMangledName
(
3
)
;
demangled
=
DemangleStackConsumption
(
nested_mangled_name3
.
c_str
(
)
&
stack_consumed
)
;
EXPECT_STREQ
(
"
a
<
>
"
demangled
)
;
EXPECT_GT
(
stack_consumed
0
)
;
EXPECT_LT
(
stack_consumed
kStackConsumptionUpperLimit
)
;
}
#
endif
static
void
TestOnInput
(
const
char
*
input
)
{
static
const
int
kOutSize
=
1048576
;
auto
out
=
absl
:
:
make_unique
<
char
[
]
>
(
kOutSize
)
;
Demangle
(
input
out
.
get
(
)
kOutSize
)
;
}
TEST
(
DemangleRegression
NegativeLength
)
{
TestOnInput
(
"
_ZZn4
"
)
;
}
TEST
(
DemangleRegression
DeeplyNestedArrayType
)
{
const
int
depth
=
100000
;
std
:
:
string
data
=
"
_ZStI
"
;
data
.
reserve
(
data
.
size
(
)
+
3
*
depth
+
1
)
;
for
(
int
i
=
0
;
i
<
depth
;
i
+
+
)
{
data
+
=
"
A1_
"
;
}
TestOnInput
(
data
.
c_str
(
)
)
;
}
TEST
(
DemangleRegression
ShortOutputBuffer
)
{
char
buffer
[
1
]
;
EXPECT_FALSE
(
absl
:
:
debugging_internal
:
:
Demangle
(
"
_ZZ2wwE
"
buffer
sizeof
(
buffer
)
)
)
;
}
struct
Base
{
virtual
~
Base
(
)
=
default
;
}
;
struct
Derived
:
public
Base
{
}
;
TEST
(
DemangleStringTest
SupportsSymbolNameReturnedByTypeId
)
{
EXPECT_EQ
(
DemangleString
(
typeid
(
int
)
.
name
(
)
)
"
int
"
)
;
EXPECT_THAT
(
DemangleString
(
typeid
(
Base
)
.
name
(
)
)
ContainsRegex
(
"
absl
.
*
debugging_internal
.
*
anonymous
namespace
.
*
:
:
Base
"
)
)
;
EXPECT_THAT
(
DemangleString
(
typeid
(
Derived
)
.
name
(
)
)
ContainsRegex
(
"
absl
.
*
debugging_internal
.
*
anonymous
namespace
.
*
:
:
Derived
"
)
)
;
}
}
}
ABSL_NAMESPACE_END
}
