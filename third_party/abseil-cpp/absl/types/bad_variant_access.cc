#
include
"
absl
/
types
/
bad_variant_access
.
h
"
#
ifndef
ABSL_USES_STD_VARIANT
#
include
<
cstdlib
>
#
include
<
stdexcept
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
bad_variant_access
:
:
~
bad_variant_access
(
)
=
default
;
const
char
*
bad_variant_access
:
:
what
(
)
const
noexcept
{
return
"
Bad
variant
access
"
;
}
namespace
variant_internal
{
void
ThrowBadVariantAccess
(
)
{
#
ifdef
ABSL_HAVE_EXCEPTIONS
throw
bad_variant_access
(
)
;
#
else
ABSL_RAW_LOG
(
FATAL
"
Bad
variant
access
"
)
;
abort
(
)
;
#
endif
}
void
Rethrow
(
)
{
#
ifdef
ABSL_HAVE_EXCEPTIONS
throw
;
#
else
ABSL_RAW_LOG
(
FATAL
"
Internal
error
in
absl
:
:
variant
implementation
.
Attempted
to
"
"
rethrow
an
exception
when
building
with
exceptions
disabled
.
"
)
;
abort
(
)
;
#
endif
}
}
ABSL_NAMESPACE_END
}
#
else
#
ifdef
__APPLE__
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
types_internal
{
extern
const
char
kAvoidEmptyBadVariantAccessLibraryWarning
;
const
char
kAvoidEmptyBadVariantAccessLibraryWarning
=
0
;
}
ABSL_NAMESPACE_END
}
#
endif
#
endif
