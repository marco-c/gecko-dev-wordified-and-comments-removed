#
ifndef
ABSL_TYPES_VARIANT_H_
#
define
ABSL_TYPES_VARIANT_H_
#
include
<
variant
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
utility
/
utility
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
using
std
:
:
bad_variant_access
;
using
std
:
:
get
;
using
std
:
:
get_if
;
using
std
:
:
holds_alternative
;
using
std
:
:
monostate
;
using
std
:
:
variant
;
using
std
:
:
variant_alternative
;
using
std
:
:
variant_alternative_t
;
using
std
:
:
variant_npos
;
using
std
:
:
variant_size
;
using
std
:
:
variant_size_v
;
using
std
:
:
visit
;
namespace
variant_internal
{
template
<
typename
To
>
struct
ConversionVisitor
{
template
<
typename
T
>
To
operator
(
)
(
T
&
&
v
)
const
{
return
To
(
std
:
:
forward
<
T
>
(
v
)
)
;
}
}
;
}
template
<
typename
To
typename
Variant
>
To
ConvertVariantTo
(
Variant
&
&
variant
)
{
return
absl
:
:
visit
(
variant_internal
:
:
ConversionVisitor
<
To
>
{
}
std
:
:
forward
<
Variant
>
(
variant
)
)
;
}
ABSL_NAMESPACE_END
}
#
endif
