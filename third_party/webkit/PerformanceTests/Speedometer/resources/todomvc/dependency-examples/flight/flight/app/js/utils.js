'
use
strict
'
;
define
(
function
(
)
{
var
_
=
{
}
;
var
entityMap
=
{
escape
:
{
'
&
'
:
'
&
amp
;
'
'
<
'
:
'
&
lt
;
'
'
>
'
:
'
&
gt
;
'
'
"
'
:
'
&
quot
;
'
"
'
"
:
'
&
#
x27
;
'
'
/
'
:
'
&
#
x2F
;
'
}
}
;
var
escapeKeys
=
'
&
<
>
"
\
'
/
'
;
var
unescapeKeys
=
'
&
amp
;
|
&
lt
;
|
&
gt
;
|
&
quot
;
|
&
#
x27
;
|
&
#
x2F
;
'
;
var
entityRegexes
=
{
escape
:
new
RegExp
(
'
[
'
+
escapeKeys
+
'
]
'
'
g
'
)
unescape
:
new
RegExp
(
'
(
'
+
unescapeKeys
+
'
)
'
'
g
'
)
}
;
[
'
escape
'
'
unescape
'
]
.
forEach
(
function
(
method
)
{
_
[
method
]
=
function
(
string
)
{
if
(
string
=
=
=
null
|
|
string
=
=
=
undefined
)
{
return
'
'
;
}
return
(
'
'
+
string
)
.
replace
(
entityRegexes
[
method
]
function
(
match
)
{
return
entityMap
[
method
]
[
match
]
;
}
)
;
}
;
}
)
;
var
settings
=
{
evaluate
:
/
<
%
(
[
\
s
\
S
]
+
?
)
%
>
/
g
interpolate
:
/
<
%
=
(
[
\
s
\
S
]
+
?
)
%
>
/
g
escape
:
/
<
%
-
(
[
\
s
\
S
]
+
?
)
%
>
/
g
}
;
var
noMatch
=
/
(
.
)
^
/
;
var
escapes
=
{
"
'
"
:
"
'
"
'
\
\
'
:
'
\
\
'
'
\
r
'
:
'
r
'
'
\
n
'
:
'
n
'
'
\
t
'
:
'
t
'
'
\
u2028
'
:
'
u2028
'
'
\
u2029
'
:
'
u2029
'
}
;
var
escaper
=
/
\
\
|
'
|
\
r
|
\
n
|
\
t
|
\
u2028
|
\
u2029
/
g
;
var
template
=
function
(
text
data
)
{
var
render
;
var
matcher
=
new
RegExp
(
[
(
settings
.
escape
|
|
noMatch
)
.
source
(
settings
.
interpolate
|
|
noMatch
)
.
source
(
settings
.
evaluate
|
|
noMatch
)
.
source
]
.
join
(
'
|
'
)
+
'
|
'
'
g
'
)
;
var
index
=
0
;
var
source
=
"
__p
+
=
'
"
;
text
.
replace
(
matcher
function
(
match
escape
interpolate
evaluate
offset
)
{
source
+
=
text
.
slice
(
index
offset
)
.
replace
(
escaper
function
(
match
)
{
return
'
\
\
'
+
escapes
[
match
]
;
}
)
;
if
(
escape
)
{
source
+
=
"
'
+
\
n
(
(
__t
=
(
"
+
escape
+
"
)
)
=
=
null
?
'
'
:
_
.
escape
(
__t
)
)
+
\
n
'
"
;
}
if
(
interpolate
)
{
source
+
=
"
'
+
\
n
(
(
__t
=
(
"
+
interpolate
+
"
)
)
=
=
null
?
'
'
:
__t
)
+
\
n
'
"
;
}
if
(
evaluate
)
{
source
+
=
"
'
;
\
n
"
+
evaluate
+
"
\
n__p
+
=
'
"
;
}
index
=
offset
+
match
.
length
;
return
match
;
}
)
;
source
+
=
"
'
;
\
n
"
;
if
(
!
settings
.
variable
)
{
source
=
'
with
(
obj
|
|
{
}
)
{
\
n
'
+
source
+
'
}
\
n
'
;
}
source
=
"
var
__t
__p
=
'
'
__j
=
Array
.
prototype
.
join
"
+
"
print
=
function
(
)
{
__p
+
=
__j
.
call
(
arguments
'
'
)
;
}
;
\
n
"
+
source
+
"
return
__p
;
\
n
"
;
try
{
render
=
new
Function
(
settings
.
variable
|
|
'
obj
'
'
_
'
source
)
;
}
catch
(
err
)
{
err
.
source
=
source
;
throw
err
;
}
if
(
data
)
{
return
render
(
data
_
)
;
}
var
template
=
function
(
data
)
{
return
render
.
call
(
this
data
_
)
;
}
;
template
.
source
=
'
function
(
'
+
(
settings
.
variable
|
|
'
obj
'
)
+
'
)
{
\
n
'
+
source
+
'
}
'
;
return
template
;
}
;
return
{
tmpl
:
template
}
;
}
)
;
