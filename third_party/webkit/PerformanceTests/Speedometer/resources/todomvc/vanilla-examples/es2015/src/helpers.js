'
use
strict
'
;
NodeList
.
prototype
.
forEach
=
Array
.
prototype
.
forEach
;
function
qs
(
selector
scope
)
{
return
(
scope
|
|
document
)
.
querySelector
(
selector
)
;
}
function
qsa
(
selector
scope
)
{
return
(
scope
|
|
document
)
.
querySelectorAll
(
selector
)
;
}
function
on
(
target
type
callback
useCapture
)
{
target
.
addEventListener
(
type
callback
!
!
useCapture
)
;
}
function
delegate
(
target
selector
type
handler
)
{
let
dispatchEvent
=
event
=
>
{
const
targetElement
=
event
.
target
;
const
potentialElements
=
qsa
(
selector
target
)
;
const
hasMatch
=
Array
.
prototype
.
indexOf
.
call
(
potentialElements
targetElement
)
>
=
0
;
if
(
hasMatch
)
{
handler
.
call
(
targetElement
event
)
;
}
}
;
const
useCapture
=
type
=
=
=
'
blur
'
|
|
type
=
=
=
'
focus
'
;
on
(
target
type
dispatchEvent
useCapture
)
;
}
function
parent
(
element
tagName
)
{
if
(
!
element
.
parentNode
)
{
return
;
}
if
(
element
.
parentNode
.
tagName
.
toLowerCase
(
)
=
=
=
tagName
.
toLowerCase
(
)
)
{
return
element
.
parentNode
;
}
return
parent
(
element
.
parentNode
tagName
)
;
}
