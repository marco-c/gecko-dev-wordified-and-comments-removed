import
{
remove
}
from
'
.
/
helpers
'
import
*
as
localStorageMemory
from
'
.
/
memory
'
export
default
Store
var
uniqueID
=
1
;
function
Store
(
name
callback
)
{
callback
=
callback
|
|
function
(
)
{
}
this
.
_dbName
=
name
if
(
!
localStorageMemory
[
name
]
)
{
var
data
=
{
todos
:
[
]
}
localStorageMemory
[
name
]
=
JSON
.
stringify
(
data
)
}
callback
.
call
(
this
JSON
.
parse
(
localStorageMemory
[
name
]
)
)
this
.
subscribers
=
[
]
}
Store
.
prototype
.
subscribe
=
function
(
subscriber
)
{
this
.
subscribers
.
push
(
subscriber
)
return
(
)
=
>
remove
(
this
.
subscribers
subscriber
)
}
Store
.
prototype
.
_notify
=
function
(
)
{
this
.
subscribers
.
forEach
(
s
=
>
s
(
)
)
}
Store
.
prototype
.
find
=
function
(
query
callback
)
{
if
(
!
callback
)
{
return
}
var
todos
=
JSON
.
parse
(
localStorageMemory
[
this
.
_dbName
]
)
.
todos
callback
.
call
(
this
todos
.
filter
(
function
(
todo
)
{
for
(
var
q
in
query
)
{
if
(
query
[
q
]
!
=
=
todo
[
q
]
)
{
return
false
}
}
return
true
}
)
)
}
Store
.
prototype
.
findAll
=
function
(
callback
)
{
callback
=
callback
|
|
function
(
)
{
}
callback
.
call
(
this
JSON
.
parse
(
localStorageMemory
[
this
.
_dbName
]
)
.
todos
)
}
Store
.
prototype
.
save
=
function
(
updateData
callback
id
)
{
var
data
=
JSON
.
parse
(
localStorageMemory
[
this
.
_dbName
]
)
var
todos
=
data
.
todos
callback
=
callback
|
|
function
(
)
{
}
if
(
id
)
{
for
(
var
i
=
0
;
i
<
todos
.
length
;
i
+
+
)
{
if
(
todos
[
i
]
.
id
=
=
=
id
)
{
for
(
var
key
in
updateData
)
{
todos
[
i
]
[
key
]
=
updateData
[
key
]
}
break
}
}
localStorageMemory
[
this
.
_dbName
]
=
JSON
.
stringify
(
data
)
callback
.
call
(
this
JSON
.
parse
(
localStorageMemory
[
this
.
_dbName
]
)
.
todos
)
}
else
{
updateData
.
id
=
uniqueID
+
+
;
todos
.
push
(
updateData
)
localStorageMemory
[
this
.
_dbName
]
=
JSON
.
stringify
(
data
)
callback
.
call
(
this
[
updateData
]
)
}
this
.
_notify
(
)
}
Store
.
prototype
.
remove
=
function
(
id
callback
)
{
var
data
=
JSON
.
parse
(
localStorageMemory
[
this
.
_dbName
]
)
var
todos
=
data
.
todos
for
(
var
i
=
0
;
i
<
todos
.
length
;
i
+
+
)
{
if
(
todos
[
i
]
.
id
=
=
=
id
)
{
todos
.
splice
(
i
1
)
break
}
}
localStorageMemory
[
this
.
_dbName
]
=
JSON
.
stringify
(
data
)
callback
.
call
(
this
JSON
.
parse
(
localStorageMemory
[
this
.
_dbName
]
)
.
todos
)
this
.
_notify
(
)
}
Store
.
prototype
.
drop
=
function
(
callback
)
{
localStorageMemory
[
this
.
_dbName
]
=
JSON
.
stringify
(
{
todos
:
[
]
}
)
callback
.
call
(
this
JSON
.
parse
(
localStorageMemory
[
this
.
_dbName
]
)
.
todos
)
this
.
_notify
(
)
}
