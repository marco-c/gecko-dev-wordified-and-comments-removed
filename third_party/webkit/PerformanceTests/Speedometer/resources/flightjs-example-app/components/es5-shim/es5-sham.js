(
function
(
definition
)
{
if
(
typeof
define
=
=
"
function
"
)
{
define
(
definition
)
;
}
else
if
(
typeof
YUI
=
=
"
function
"
)
{
YUI
.
add
(
"
es5
-
sham
"
definition
)
;
}
else
{
definition
(
)
;
}
}
)
(
function
(
)
{
if
(
!
Object
.
getPrototypeOf
)
{
Object
.
getPrototypeOf
=
function
getPrototypeOf
(
object
)
{
return
object
.
__proto__
|
|
(
object
.
constructor
?
object
.
constructor
.
prototype
:
prototypeOfObject
)
;
}
;
}
if
(
!
Object
.
getOwnPropertyDescriptor
)
{
var
ERR_NON_OBJECT
=
"
Object
.
getOwnPropertyDescriptor
called
on
a
non
-
object
:
"
;
Object
.
getOwnPropertyDescriptor
=
function
getOwnPropertyDescriptor
(
object
property
)
{
if
(
(
typeof
object
!
=
"
object
"
&
&
typeof
object
!
=
"
function
"
)
|
|
object
=
=
=
null
)
{
throw
new
TypeError
(
ERR_NON_OBJECT
+
object
)
;
}
if
(
!
owns
(
object
property
)
)
{
return
;
}
var
descriptor
=
{
enumerable
:
true
configurable
:
true
}
;
if
(
supportsAccessors
)
{
var
prototype
=
object
.
__proto__
;
object
.
__proto__
=
prototypeOfObject
;
var
getter
=
lookupGetter
(
object
property
)
;
var
setter
=
lookupSetter
(
object
property
)
;
object
.
__proto__
=
prototype
;
if
(
getter
|
|
setter
)
{
if
(
getter
)
{
descriptor
.
get
=
getter
;
}
if
(
setter
)
{
descriptor
.
set
=
setter
;
}
return
descriptor
;
}
}
descriptor
.
value
=
object
[
property
]
;
return
descriptor
;
}
;
}
if
(
!
Object
.
getOwnPropertyNames
)
{
Object
.
getOwnPropertyNames
=
function
getOwnPropertyNames
(
object
)
{
return
Object
.
keys
(
object
)
;
}
;
}
if
(
!
Object
.
create
)
{
Object
.
create
=
function
create
(
prototype
properties
)
{
var
object
;
if
(
prototype
=
=
=
null
)
{
object
=
{
"
__proto__
"
:
null
}
;
}
else
{
if
(
typeof
prototype
!
=
"
object
"
)
{
throw
new
TypeError
(
"
typeof
prototype
[
"
+
(
typeof
prototype
)
+
"
]
!
=
'
object
'
"
)
;
}
var
Type
=
function
(
)
{
}
;
Type
.
prototype
=
prototype
;
object
=
new
Type
(
)
;
object
.
__proto__
=
prototype
;
}
if
(
properties
!
=
=
void
0
)
{
Object
.
defineProperties
(
object
properties
)
;
}
return
object
;
}
;
}
function
doesDefinePropertyWork
(
object
)
{
try
{
Object
.
defineProperty
(
object
"
sentinel
"
{
}
)
;
return
"
sentinel
"
in
object
;
}
catch
(
exception
)
{
}
}
if
(
Object
.
defineProperty
)
{
var
definePropertyWorksOnObject
=
doesDefinePropertyWork
(
{
}
)
;
var
definePropertyWorksOnDom
=
typeof
document
=
=
"
undefined
"
|
|
doesDefinePropertyWork
(
document
.
createElement
(
"
div
"
)
)
;
if
(
!
definePropertyWorksOnObject
|
|
!
definePropertyWorksOnDom
)
{
var
definePropertyFallback
=
Object
.
defineProperty
;
}
}
if
(
!
Object
.
defineProperty
|
|
definePropertyFallback
)
{
var
ERR_NON_OBJECT_DESCRIPTOR
=
"
Property
description
must
be
an
object
:
"
;
var
ERR_NON_OBJECT_TARGET
=
"
Object
.
defineProperty
called
on
non
-
object
:
"
var
ERR_ACCESSORS_NOT_SUPPORTED
=
"
getters
&
setters
can
not
be
defined
"
+
"
on
this
javascript
engine
"
;
Object
.
defineProperty
=
function
defineProperty
(
object
property
descriptor
)
{
if
(
(
typeof
object
!
=
"
object
"
&
&
typeof
object
!
=
"
function
"
)
|
|
object
=
=
=
null
)
{
throw
new
TypeError
(
ERR_NON_OBJECT_TARGET
+
object
)
;
}
if
(
(
typeof
descriptor
!
=
"
object
"
&
&
typeof
descriptor
!
=
"
function
"
)
|
|
descriptor
=
=
=
null
)
{
throw
new
TypeError
(
ERR_NON_OBJECT_DESCRIPTOR
+
descriptor
)
;
}
if
(
definePropertyFallback
)
{
try
{
return
definePropertyFallback
.
call
(
Object
object
property
descriptor
)
;
}
catch
(
exception
)
{
}
}
if
(
owns
(
descriptor
"
value
"
)
)
{
if
(
supportsAccessors
&
&
(
lookupGetter
(
object
property
)
|
|
lookupSetter
(
object
property
)
)
)
{
var
prototype
=
object
.
__proto__
;
object
.
__proto__
=
prototypeOfObject
;
delete
object
[
property
]
;
object
[
property
]
=
descriptor
.
value
;
object
.
__proto__
=
prototype
;
}
else
{
object
[
property
]
=
descriptor
.
value
;
}
}
else
{
if
(
!
supportsAccessors
)
{
throw
new
TypeError
(
ERR_ACCESSORS_NOT_SUPPORTED
)
;
}
if
(
owns
(
descriptor
"
get
"
)
)
{
defineGetter
(
object
property
descriptor
.
get
)
;
}
if
(
owns
(
descriptor
"
set
"
)
)
{
defineSetter
(
object
property
descriptor
.
set
)
;
}
}
return
object
;
}
;
}
if
(
!
Object
.
defineProperties
)
{
Object
.
defineProperties
=
function
defineProperties
(
object
properties
)
{
for
(
var
property
in
properties
)
{
if
(
owns
(
properties
property
)
&
&
property
!
=
"
__proto__
"
)
{
Object
.
defineProperty
(
object
property
properties
[
property
]
)
;
}
}
return
object
;
}
;
}
if
(
!
Object
.
seal
)
{
Object
.
seal
=
function
seal
(
object
)
{
return
object
;
}
;
}
if
(
!
Object
.
freeze
)
{
Object
.
freeze
=
function
freeze
(
object
)
{
return
object
;
}
;
}
try
{
Object
.
freeze
(
function
(
)
{
}
)
;
}
catch
(
exception
)
{
Object
.
freeze
=
(
function
freeze
(
freezeObject
)
{
return
function
freeze
(
object
)
{
if
(
typeof
object
=
=
"
function
"
)
{
return
object
;
}
else
{
return
freezeObject
(
object
)
;
}
}
;
}
)
(
Object
.
freeze
)
;
}
if
(
!
Object
.
preventExtensions
)
{
Object
.
preventExtensions
=
function
preventExtensions
(
object
)
{
return
object
;
}
;
}
if
(
!
Object
.
isSealed
)
{
Object
.
isSealed
=
function
isSealed
(
object
)
{
return
false
;
}
;
}
if
(
!
Object
.
isFrozen
)
{
Object
.
isFrozen
=
function
isFrozen
(
object
)
{
return
false
;
}
;
}
if
(
!
Object
.
isExtensible
)
{
Object
.
isExtensible
=
function
isExtensible
(
object
)
{
if
(
Object
(
object
)
!
=
=
object
)
{
throw
new
TypeError
(
)
;
}
var
name
=
'
'
;
while
(
owns
(
object
name
)
)
{
name
+
=
'
?
'
;
}
object
[
name
]
=
true
;
var
returnValue
=
owns
(
object
name
)
;
delete
object
[
name
]
;
return
returnValue
;
}
;
}
}
)
;
