load
(
"
constants
.
js
"
)
;
load
(
"
util
.
js
"
)
;
load
(
"
call_sign
.
js
"
)
;
load
(
"
vector_2d
.
js
"
)
;
load
(
"
vector_3d
.
js
"
)
;
load
(
"
motion
.
js
"
)
;
var
epsilon
=
0
.
000001
;
function
checkDoesIntersect
(
motionOne
motionTwo
expected
)
{
print
(
motionOne
+
"
and
"
+
motionTwo
+
"
:
"
)
;
var
actual
=
motionOne
.
findIntersection
(
motionTwo
)
;
if
(
!
actual
)
throw
new
Error
(
"
Was
supposed
to
intersect
at
"
+
expected
+
"
but
didn
'
t
"
)
;
var
delta
=
actual
.
minus
(
expected
)
.
magnitude
(
)
;
if
(
delta
>
epsilon
)
{
throw
new
Error
(
"
Was
supposed
to
intersect
at
"
+
expected
+
"
but
intersected
at
"
+
actual
+
"
which
is
"
+
delta
+
"
away
"
)
;
}
print
(
"
Intersected
at
"
+
actual
+
"
which
is
"
+
delta
+
"
away
from
"
+
expected
+
"
.
"
)
;
}
function
checkDoesNotIntersect
(
motionOne
motionTwo
)
{
print
(
motionOne
+
"
and
"
+
motionTwo
+
"
:
"
)
;
var
actual
=
motionOne
.
findIntersection
(
motionTwo
)
;
if
(
actual
)
throw
new
Error
(
"
Was
not
supposed
to
intersect
but
intersected
at
"
+
actual
)
;
print
(
"
No
intersection
as
expected
.
"
)
;
}
var
makeMotion
=
(
function
(
)
{
var
counter
=
0
;
return
function
(
x1
y1
z1
x2
y2
z2
)
{
return
new
Motion
(
new
CallSign
(
"
foo
"
+
(
+
+
counter
)
)
new
Vector3D
(
x1
y1
z1
)
new
Vector3D
(
x2
y2
z2
)
)
;
}
}
)
(
)
;
checkDoesNotIntersect
(
makeMotion
(
0
0
0
10
0
0
)
makeMotion
(
0
10
0
10
10
0
)
)
;
checkDoesNotIntersect
(
makeMotion
(
0
0
0
10
0
0
)
makeMotion
(
0
1
+
epsilon
0
10
1
+
epsilon
0
)
)
;
checkDoesIntersect
(
makeMotion
(
0
0
0
10
0
0
)
makeMotion
(
0
1
0
10
1
0
)
new
Vector3D
(
0
0
.
5
0
)
)
;
checkDoesIntersect
(
makeMotion
(
0
0
0
10
0
0
)
makeMotion
(
0
10
0
10
0
0
)
new
Vector3D
(
9
0
.
5
0
)
)
;
checkDoesIntersect
(
makeMotion
(
0
0
0
9
.
5
0
0
)
makeMotion
(
0
10
0
9
.
65
0
.
35
0
)
new
Vector3D
(
8
.
939830722446178
0
.
49507224691354423
0
)
)
;
