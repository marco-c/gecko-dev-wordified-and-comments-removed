var
performance
=
performance
|
|
{
}
;
performance
.
now
=
(
function
(
)
{
return
performance
.
now
|
|
performance
.
mozNow
|
|
performance
.
msNow
|
|
performance
.
oNow
|
|
performance
.
webkitNow
|
|
Date
.
now
;
}
)
(
)
;
function
Benchmark
(
name
doWarmup
doDeterministic
run
setup
tearDown
latencyResult
minIterations
)
{
this
.
name
=
name
;
this
.
doWarmup
=
doWarmup
;
this
.
doDeterministic
=
doDeterministic
;
this
.
run
=
run
;
this
.
Setup
=
setup
?
setup
:
function
(
)
{
}
;
this
.
TearDown
=
tearDown
?
tearDown
:
function
(
)
{
}
;
this
.
latencyResult
=
latencyResult
?
latencyResult
:
null
;
this
.
minIterations
=
minIterations
?
minIterations
:
32
;
}
function
BenchmarkResult
(
benchmark
time
latency
)
{
this
.
benchmark
=
benchmark
;
this
.
time
=
time
;
this
.
latency
=
latency
;
}
BenchmarkResult
.
prototype
.
valueOf
=
function
(
)
{
return
this
.
time
;
}
function
BenchmarkSuite
(
name
reference
benchmarks
)
{
this
.
name
=
name
;
this
.
reference
=
reference
;
this
.
benchmarks
=
benchmarks
;
BenchmarkSuite
.
suites
.
push
(
this
)
;
}
BenchmarkSuite
.
suites
=
[
]
;
BenchmarkSuite
.
version
=
'
9
'
;
alert
=
function
(
s
)
{
throw
"
Alert
called
with
argument
:
"
+
s
;
}
;
BenchmarkSuite
.
ResetRNG
=
function
(
)
{
Math
.
random
=
(
function
(
)
{
var
seed
=
49734321
;
return
function
(
)
{
seed
=
(
(
seed
+
0x7ed55d16
)
+
(
seed
<
<
12
)
)
&
0xffffffff
;
seed
=
(
(
seed
^
0xc761c23c
)
^
(
seed
>
>
>
19
)
)
&
0xffffffff
;
seed
=
(
(
seed
+
0x165667b1
)
+
(
seed
<
<
5
)
)
&
0xffffffff
;
seed
=
(
(
seed
+
0xd3a2646c
)
^
(
seed
<
<
9
)
)
&
0xffffffff
;
seed
=
(
(
seed
+
0xfd7046c5
)
+
(
seed
<
<
3
)
)
&
0xffffffff
;
seed
=
(
(
seed
^
0xb55a4f09
)
^
(
seed
>
>
>
16
)
)
&
0xffffffff
;
return
(
seed
&
0xfffffff
)
/
0x10000000
;
}
;
}
)
(
)
;
}
BenchmarkSuite
.
RunSuites
=
function
(
runner
)
{
var
continuation
=
null
;
var
suites
=
BenchmarkSuite
.
suites
;
var
length
=
suites
.
length
;
BenchmarkSuite
.
scores
=
[
]
;
var
index
=
0
;
function
RunStep
(
)
{
while
(
continuation
|
|
index
<
length
)
{
if
(
continuation
)
{
continuation
=
continuation
(
)
;
}
else
{
var
suite
=
suites
[
index
+
+
]
;
if
(
runner
.
NotifyStart
)
runner
.
NotifyStart
(
suite
.
name
)
;
continuation
=
suite
.
RunStep
(
runner
)
;
}
if
(
continuation
&
&
typeof
window
!
=
'
undefined
'
&
&
window
.
setTimeout
)
{
window
.
setTimeout
(
RunStep
25
)
;
return
;
}
}
if
(
runner
.
NotifyScore
)
{
var
score
=
BenchmarkSuite
.
GeometricMean
(
BenchmarkSuite
.
scores
)
;
var
formatted
=
BenchmarkSuite
.
FormatScore
(
100
*
score
)
;
runner
.
NotifyScore
(
formatted
)
;
}
}
RunStep
(
)
;
}
BenchmarkSuite
.
CountBenchmarks
=
function
(
)
{
var
result
=
0
;
var
suites
=
BenchmarkSuite
.
suites
;
for
(
var
i
=
0
;
i
<
suites
.
length
;
i
+
+
)
{
result
+
=
suites
[
i
]
.
benchmarks
.
length
;
}
return
result
;
}
BenchmarkSuite
.
GeometricMean
=
function
(
numbers
)
{
var
log
=
0
;
for
(
var
i
=
0
;
i
<
numbers
.
length
;
i
+
+
)
{
log
+
=
Math
.
log
(
numbers
[
i
]
)
;
}
return
Math
.
pow
(
Math
.
E
log
/
numbers
.
length
)
;
}
BenchmarkSuite
.
GeometricMeanTime
=
function
(
measurements
)
{
var
log
=
0
;
for
(
var
i
=
0
;
i
<
measurements
.
length
;
i
+
+
)
{
log
+
=
Math
.
log
(
measurements
[
i
]
.
time
)
;
}
return
Math
.
pow
(
Math
.
E
log
/
measurements
.
length
)
;
}
BenchmarkSuite
.
AverageAbovePercentile
=
function
(
numbers
percentile
)
{
numbers
=
numbers
.
slice
(
)
;
numbers
.
sort
(
function
(
a
b
)
{
return
a
-
b
;
}
)
;
var
numbersWeWant
=
[
]
;
var
originalLength
=
numbers
.
length
;
while
(
numbers
.
length
/
originalLength
>
percentile
/
100
)
numbersWeWant
.
push
(
numbers
.
pop
(
)
)
;
var
sum
=
0
;
for
(
var
i
=
0
;
i
<
numbersWeWant
.
length
;
+
+
i
)
sum
+
=
numbersWeWant
[
i
]
;
var
result
=
sum
/
numbersWeWant
.
length
;
if
(
numbers
.
length
&
&
result
<
numbers
[
numbers
.
length
-
1
]
)
{
throw
"
Sanity
check
fail
:
the
worst
case
result
is
"
+
result
+
"
but
we
didn
'
t
take
into
account
"
+
numbers
;
}
return
result
;
}
BenchmarkSuite
.
GeometricMeanLatency
=
function
(
measurements
)
{
var
log
=
0
;
var
hasLatencyResult
=
false
;
for
(
var
i
=
0
;
i
<
measurements
.
length
;
i
+
+
)
{
if
(
measurements
[
i
]
.
latency
!
=
0
)
{
log
+
=
Math
.
log
(
measurements
[
i
]
.
latency
)
;
hasLatencyResult
=
true
;
}
}
if
(
hasLatencyResult
)
{
return
Math
.
pow
(
Math
.
E
log
/
measurements
.
length
)
;
}
else
{
return
0
;
}
}
BenchmarkSuite
.
FormatScore
=
function
(
value
)
{
if
(
value
>
100
)
{
return
value
.
toFixed
(
0
)
;
}
else
{
return
value
.
toPrecision
(
3
)
;
}
}
BenchmarkSuite
.
prototype
.
NotifyStep
=
function
(
result
)
{
this
.
results
.
push
(
result
)
;
if
(
this
.
runner
.
NotifyStep
)
this
.
runner
.
NotifyStep
(
result
.
benchmark
.
name
)
;
}
BenchmarkSuite
.
prototype
.
NotifyResult
=
function
(
)
{
var
mean
=
BenchmarkSuite
.
GeometricMeanTime
(
this
.
results
)
;
var
score
=
this
.
reference
[
0
]
/
mean
;
BenchmarkSuite
.
scores
.
push
(
score
)
;
if
(
this
.
runner
.
NotifyResult
)
{
var
formatted
=
BenchmarkSuite
.
FormatScore
(
100
*
score
)
;
this
.
runner
.
NotifyResult
(
this
.
name
formatted
)
;
}
if
(
this
.
reference
.
length
=
=
2
)
{
var
meanLatency
=
BenchmarkSuite
.
GeometricMeanLatency
(
this
.
results
)
;
if
(
meanLatency
!
=
0
)
{
var
scoreLatency
=
this
.
reference
[
1
]
/
meanLatency
;
BenchmarkSuite
.
scores
.
push
(
scoreLatency
)
;
if
(
this
.
runner
.
NotifyResult
)
{
var
formattedLatency
=
BenchmarkSuite
.
FormatScore
(
100
*
scoreLatency
)
this
.
runner
.
NotifyResult
(
this
.
name
+
"
Latency
"
formattedLatency
)
;
}
}
}
}
BenchmarkSuite
.
prototype
.
NotifyError
=
function
(
error
)
{
if
(
this
.
runner
.
NotifyError
)
{
this
.
runner
.
NotifyError
(
this
.
name
error
)
;
}
if
(
this
.
runner
.
NotifyStep
)
{
this
.
runner
.
NotifyStep
(
this
.
name
)
;
}
}
BenchmarkSuite
.
prototype
.
RunSingleBenchmark
=
function
(
benchmark
data
)
{
function
Measure
(
data
)
{
var
elapsed
=
0
;
var
start
=
new
Date
(
)
;
for
(
var
i
=
0
;
(
benchmark
.
doDeterministic
?
i
<
benchmark
.
minIterations
:
elapsed
<
1000
)
;
i
+
+
)
{
benchmark
.
run
(
)
;
elapsed
=
new
Date
(
)
-
start
;
}
if
(
data
!
=
null
)
{
data
.
runs
+
=
i
;
data
.
elapsed
+
=
elapsed
;
}
}
if
(
!
benchmark
.
doWarmup
&
&
data
=
=
null
)
{
data
=
{
runs
:
0
elapsed
:
0
}
;
}
if
(
data
=
=
null
)
{
Measure
(
null
)
;
return
{
runs
:
0
elapsed
:
0
}
;
}
else
{
Measure
(
data
)
;
if
(
data
.
runs
<
benchmark
.
minIterations
)
return
data
;
var
usec
=
(
data
.
elapsed
*
1000
)
/
data
.
runs
;
var
latencySamples
=
(
benchmark
.
latencyResult
!
=
null
)
?
benchmark
.
latencyResult
(
)
:
[
0
]
;
var
percentile
=
99
.
5
;
var
latency
=
BenchmarkSuite
.
AverageAbovePercentile
(
latencySamples
percentile
)
*
1000
;
this
.
NotifyStep
(
new
BenchmarkResult
(
benchmark
usec
latency
)
)
;
return
null
;
}
}
BenchmarkSuite
.
prototype
.
RunStep
=
function
(
runner
)
{
BenchmarkSuite
.
ResetRNG
(
)
;
this
.
results
=
[
]
;
this
.
runner
=
runner
;
var
length
=
this
.
benchmarks
.
length
;
var
index
=
0
;
var
suite
=
this
;
var
data
;
function
RunNextSetup
(
)
{
if
(
index
<
length
)
{
try
{
suite
.
benchmarks
[
index
]
.
Setup
(
)
;
}
catch
(
e
)
{
suite
.
NotifyError
(
e
)
;
return
null
;
}
return
RunNextBenchmark
;
}
suite
.
NotifyResult
(
)
;
return
null
;
}
function
RunNextBenchmark
(
)
{
try
{
data
=
suite
.
RunSingleBenchmark
(
suite
.
benchmarks
[
index
]
data
)
;
}
catch
(
e
)
{
suite
.
NotifyError
(
e
)
;
return
null
;
}
return
(
data
=
=
null
)
?
RunNextTearDown
:
RunNextBenchmark
(
)
;
}
function
RunNextTearDown
(
)
{
try
{
suite
.
benchmarks
[
index
+
+
]
.
TearDown
(
)
;
}
catch
(
e
)
{
suite
.
NotifyError
(
e
)
;
return
null
;
}
return
RunNextSetup
;
}
return
RunNextSetup
(
)
;
}
