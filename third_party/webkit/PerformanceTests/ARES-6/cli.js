const
isInBrowser
=
false
;
var
readFile
=
readFile
|
|
read
;
function
makeDoRun
(
source
)
{
if
(
typeof
runString
=
=
=
'
function
'
)
{
return
function
(
)
{
let
globalObjectOfScript
=
runString
(
source
)
;
let
results
=
globalObjectOfScript
.
results
;
reportResult
(
results
)
;
}
;
}
if
(
typeof
newGlobal
=
=
=
'
function
'
)
{
return
function
(
)
{
var
globalObjectOfScript
=
newGlobal
(
)
;
globalObjectOfScript
.
eval
(
source
)
;
let
results
=
globalObjectOfScript
.
results
;
reportResult
(
results
)
;
}
}
return
function
(
)
{
const
realm
=
Realm
.
create
(
)
;
Realm
.
eval
(
realm
source
)
;
reportResult
(
Realm
.
eval
(
realm
"
results
"
)
)
;
Realm
.
dispose
(
realm
)
;
}
}
function
makeBenchmarkRunner
(
sources
benchmarkConstructor
numIterations
=
200
)
{
let
source
=
"
'
use
strict
'
;
"
for
(
let
file
of
sources
)
{
source
+
=
readFile
(
file
)
;
}
source
+
=
this
.
results
=
[
]
;
var
benchmark
=
new
{
benchmarkConstructor
}
(
)
;
var
numIterations
=
{
numIterations
}
;
for
(
var
i
=
0
;
i
<
numIterations
;
+
+
i
)
{
var
before
=
currentTime
(
)
;
benchmark
.
runIteration
(
)
;
var
after
=
currentTime
(
)
;
results
.
push
(
after
-
before
)
;
}
;
return
makeDoRun
(
source
)
;
}
load
(
"
driver
.
js
"
)
;
load
(
"
results
.
js
"
)
;
load
(
"
stats
.
js
"
)
;
load
(
"
air_benchmark
.
js
"
)
;
load
(
"
basic_benchmark
.
js
"
)
;
load
(
"
babylon_benchmark
.
js
"
)
;
load
(
"
ml_benchmark
.
js
"
)
;
load
(
"
glue
.
js
"
)
;
driver
.
start
(
6
)
;
