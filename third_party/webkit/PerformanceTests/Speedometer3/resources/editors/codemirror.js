import
{
EditorView
basicSetup
}
from
"
codemirror
"
;
import
{
StateEffect
}
from
"
codemirror
/
state
"
;
import
{
javascript
}
from
"
codemirror
/
lang
-
javascript
"
;
let
lang
=
javascript
(
)
;
let
extensions
=
[
basicSetup
EditorView
.
lineWrapping
]
;
export
default
function
(
element
value
)
{
let
view
=
new
EditorView
(
{
extensions
parent
:
element
doc
:
value
wordWrapColumn
:
80
}
)
;
return
{
editor
:
view
ready
:
Promise
.
resolve
(
)
getScrollHeight
(
)
{
return
element
.
scrollHeight
;
}
getScrollTop
(
)
{
return
element
.
scrollTop
;
}
setScrollTop
(
value
)
{
element
.
scrollTop
=
value
;
}
setValue
:
(
value
)
=
>
view
.
dispatch
(
{
changes
:
{
from
:
0
to
:
view
.
state
.
doc
.
length
insert
:
value
}
}
)
format
(
on
)
{
if
(
on
&
&
extensions
.
length
=
=
=
2
)
extensions
.
push
(
lang
)
;
else
if
(
!
on
&
&
extensions
.
length
=
=
=
3
)
extensions
.
pop
(
)
;
view
.
dispatch
(
{
effects
:
StateEffect
.
reconfigure
.
of
(
extensions
)
}
)
;
}
}
;
}
