let
urlAlphabet
=
"
useandom
-
26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict
"
;
function
nanoid
(
size
=
21
)
{
let
id
=
"
"
;
let
i
=
size
;
while
(
i
-
-
)
{
id
+
=
urlAlphabet
[
(
Math
.
random
(
)
*
64
)
|
0
]
;
}
return
id
;
}
export
interface
Todo
{
id
:
string
;
text
:
string
;
completed
:
boolean
;
}
export
type
TodoEdit
=
Partial
<
Todo
>
&
{
id
:
string
}
;
const
todoFilters
=
[
"
all
"
"
active
"
"
completed
"
]
as
const
;
export
type
TodoFilter
=
(
typeof
todoFilters
)
[
number
]
;
function
isTodoFilter
(
value
:
string
|
undefined
)
:
value
is
TodoFilter
{
return
todoFilters
.
includes
(
value
as
TodoFilter
)
;
}
export
class
Todos
extends
EventTarget
{
#
todos
:
Array
<
Todo
>
=
[
]
;
#
filter
:
TodoFilter
=
this
.
#
filterFromUrl
(
)
;
get
all
(
)
:
ReadonlyArray
<
Todo
>
{
return
this
.
#
todos
;
}
get
active
(
)
:
ReadonlyArray
<
Todo
>
{
return
this
.
#
todos
.
filter
(
(
todo
)
=
>
!
todo
.
completed
)
;
}
get
completed
(
)
:
ReadonlyArray
<
Todo
>
{
return
this
.
#
todos
.
filter
(
(
todo
)
=
>
todo
.
completed
)
;
}
get
allCompleted
(
)
:
boolean
{
return
this
.
#
todos
.
every
(
(
todo
)
=
>
todo
.
completed
)
;
}
connect
(
)
{
window
.
addEventListener
(
"
hashchange
"
this
.
#
onHashChange
)
;
}
disconnect
(
)
{
window
.
removeEventListener
(
"
hashchange
"
this
.
#
onHashChange
)
;
}
filtered
(
)
{
switch
(
this
.
#
filter
)
{
case
"
active
"
:
return
this
.
active
;
case
"
completed
"
:
return
this
.
completed
;
}
return
this
.
all
;
}
#
notifyChange
(
)
{
this
.
dispatchEvent
(
new
Event
(
"
change
"
)
)
;
}
add
(
text
:
string
)
{
this
.
#
todos
.
push
(
{
text
completed
:
false
id
:
nanoid
(
)
}
)
;
this
.
#
notifyChange
(
)
;
}
delete
(
id
:
string
)
{
const
index
=
this
.
#
todos
.
findIndex
(
(
todo
)
=
>
todo
.
id
=
=
=
id
)
;
this
.
#
todos
.
splice
(
index
>
>
>
0
1
)
;
this
.
#
notifyChange
(
)
;
}
update
(
edit
:
TodoEdit
)
{
const
todo
=
this
.
#
todos
.
find
(
(
todo
)
=
>
todo
.
id
=
=
=
edit
.
id
)
;
if
(
todo
=
=
=
undefined
)
return
;
Object
.
assign
(
todo
edit
)
;
this
.
#
notifyChange
(
)
;
}
toggle
(
id
:
string
)
{
const
todo
=
this
.
#
todos
.
find
(
(
todo
)
=
>
todo
.
id
=
=
=
id
)
;
if
(
todo
=
=
=
undefined
)
return
;
todo
.
completed
=
!
todo
.
completed
;
this
.
#
notifyChange
(
)
;
}
toggleAll
(
)
{
const
allComplete
=
this
.
#
todos
.
every
(
(
todo
)
=
>
todo
.
completed
)
;
this
.
#
todos
=
this
.
#
todos
.
map
(
(
todo
)
=
>
(
{
.
.
.
todo
completed
:
!
allComplete
}
)
)
;
this
.
#
notifyChange
(
)
;
}
clearCompleted
(
)
{
this
.
#
todos
=
this
.
active
as
Todo
[
]
;
this
.
#
notifyChange
(
)
;
}
get
filter
(
)
:
TodoFilter
{
return
this
.
#
filter
;
}
set
filter
(
filter
:
TodoFilter
)
{
this
.
#
filter
=
filter
;
this
.
#
notifyChange
(
)
;
}
#
onHashChange
=
(
)
=
>
{
this
.
filter
=
this
.
#
filterFromUrl
(
)
;
}
;
#
filterFromUrl
(
)
{
let
filter
=
/
#
\
/
(
.
*
)
/
.
exec
(
window
.
location
.
hash
)
?
.
[
1
]
;
if
(
isTodoFilter
(
filter
)
)
return
filter
;
return
"
all
"
;
}
}
