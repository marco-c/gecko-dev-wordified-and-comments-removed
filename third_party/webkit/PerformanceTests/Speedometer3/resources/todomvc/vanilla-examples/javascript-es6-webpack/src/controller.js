class
Controller
{
constructor
(
model
view
)
{
this
.
model
=
model
;
this
.
view
=
view
;
this
.
view
.
bindCallback
(
"
newTodo
"
(
title
)
=
>
this
.
addItem
(
title
)
)
;
this
.
view
.
bindCallback
(
"
itemEdit
"
(
item
)
=
>
this
.
editItem
(
item
.
id
)
)
;
this
.
view
.
bindCallback
(
"
itemEditDone
"
(
item
)
=
>
this
.
editItemSave
(
item
.
id
item
.
title
)
)
;
this
.
view
.
bindCallback
(
"
itemEditCancel
"
(
item
)
=
>
this
.
editItemCancel
(
item
.
id
)
)
;
this
.
view
.
bindCallback
(
"
itemRemove
"
(
item
)
=
>
this
.
removeItem
(
item
.
id
)
)
;
this
.
view
.
bindCallback
(
"
itemToggle
"
(
item
)
=
>
this
.
toggleComplete
(
item
.
id
item
.
completed
)
)
;
this
.
view
.
bindCallback
(
"
removeCompleted
"
(
)
=
>
this
.
removeCompletedItems
(
)
)
;
this
.
view
.
bindCallback
(
"
toggleAll
"
(
status
)
=
>
this
.
toggleAll
(
status
.
completed
)
)
;
}
setView
(
hash
)
{
const
route
=
hash
.
split
(
"
/
"
)
[
1
]
;
const
page
=
route
|
|
"
"
;
this
.
_updateFilter
(
page
)
;
}
showAll
(
)
{
this
.
model
.
read
(
(
data
)
=
>
this
.
view
.
render
(
"
showEntries
"
data
)
)
;
}
showActive
(
)
{
this
.
model
.
read
(
{
completed
:
false
}
(
data
)
=
>
this
.
view
.
render
(
"
showEntries
"
data
)
)
;
}
showCompleted
(
)
{
this
.
model
.
read
(
{
completed
:
true
}
(
data
)
=
>
this
.
view
.
render
(
"
showEntries
"
data
)
)
;
}
addItem
(
title
)
{
if
(
title
.
trim
(
)
=
=
=
"
"
)
return
;
this
.
model
.
create
(
title
(
)
=
>
{
this
.
view
.
render
(
"
clearNewTodo
"
)
;
this
.
_filter
(
true
)
;
}
)
;
}
editItem
(
id
)
{
this
.
model
.
read
(
id
(
data
)
=
>
{
let
title
=
data
[
0
]
.
title
;
this
.
view
.
render
(
"
editItem
"
{
id
title
}
)
;
}
)
;
}
editItemSave
(
id
title
)
{
title
=
title
.
trim
(
)
;
if
(
title
.
length
!
=
=
0
)
{
this
.
model
.
update
(
id
{
title
}
(
)
=
>
{
this
.
view
.
render
(
"
editItemDone
"
{
id
title
}
)
;
}
)
;
}
else
{
this
.
removeItem
(
id
)
;
}
}
editItemCancel
(
id
)
{
this
.
model
.
read
(
id
(
data
)
=
>
{
const
title
=
data
[
0
]
.
title
;
this
.
view
.
render
(
"
editItemDone
"
{
id
title
}
)
;
}
)
;
}
removeItem
(
id
)
{
this
.
model
.
remove
(
id
(
)
=
>
this
.
view
.
render
(
"
removeItem
"
id
)
)
;
this
.
_filter
(
)
;
}
removeCompletedItems
(
)
{
this
.
model
.
read
(
{
completed
:
true
}
(
data
)
=
>
{
for
(
let
item
of
data
)
this
.
removeItem
(
item
.
id
)
;
}
)
;
this
.
_filter
(
)
;
}
toggleComplete
(
id
completed
silent
)
{
this
.
model
.
update
(
id
{
completed
}
(
)
=
>
{
this
.
view
.
render
(
"
elementComplete
"
{
id
completed
}
)
;
}
)
;
if
(
!
silent
)
this
.
_filter
(
)
;
}
toggleAll
(
completed
)
{
this
.
model
.
read
(
{
completed
:
!
completed
}
(
data
)
=
>
{
for
(
let
item
of
data
)
this
.
toggleComplete
(
item
.
id
completed
true
)
;
}
)
;
this
.
_filter
(
)
;
}
_updateCount
(
)
{
this
.
model
.
getCount
(
(
todos
)
=
>
{
const
completed
=
todos
.
completed
;
const
visible
=
completed
>
0
;
const
checked
=
completed
=
=
=
todos
.
total
;
this
.
view
.
render
(
"
updateElementCount
"
todos
.
active
)
;
this
.
view
.
render
(
"
clearCompletedButton
"
{
completed
visible
}
)
;
this
.
view
.
render
(
"
toggleAll
"
{
checked
}
)
;
this
.
view
.
render
(
"
contentBlockVisibility
"
{
visible
:
todos
.
total
>
0
}
)
;
}
)
;
}
_filter
(
force
)
{
const
active
=
this
.
_activeRoute
;
const
activeRoute
=
active
.
charAt
(
0
)
.
toUpperCase
(
)
+
active
.
substr
(
1
)
;
this
.
_updateCount
(
)
;
if
(
force
|
|
this
.
_lastActiveRoute
!
=
=
"
All
"
|
|
this
.
_lastActiveRoute
!
=
=
activeRoute
)
this
[
show
{
activeRoute
}
]
(
)
;
this
.
_lastActiveRoute
=
activeRoute
;
}
_updateFilter
(
currentPage
)
{
this
.
_activeRoute
=
currentPage
;
if
(
currentPage
=
=
=
"
"
)
this
.
_activeRoute
=
"
All
"
;
this
.
_filter
(
)
;
this
.
view
.
render
(
"
setFilter
"
currentPage
)
;
}
}
export
default
Controller
;
