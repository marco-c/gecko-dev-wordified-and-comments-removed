"
use
strict
"
;
const
htmlEscapes
=
{
"
&
"
:
"
&
amp
"
"
<
"
:
"
&
lt
"
"
>
"
:
"
&
gt
"
'
"
'
:
"
&
quot
"
"
'
"
:
"
&
#
x27
"
"
"
:
"
&
#
x60
"
}
;
const
reUnescapedHtml
=
/
[
&
<
>
"
'
]
/
g
;
const
reHasUnescapedHtml
=
new
RegExp
(
reUnescapedHtml
.
source
)
;
const
escape
=
(
str
)
=
>
str
&
&
reHasUnescapedHtml
.
test
(
str
)
?
str
.
replace
(
reUnescapedHtml
escapeHtmlChar
)
:
str
;
const
escapeHtmlChar
=
(
chr
)
=
>
htmlEscapes
[
chr
]
;
const
createTodoItem
=
(
{
id
title
completed
checked
index
}
)
=
>
<
li
data
-
id
=
"
{
id
}
"
class
=
"
{
completed
}
"
data
-
priority
=
"
{
4
-
(
index
%
5
)
}
"
>
<
div
class
=
"
view
"
>
<
input
class
=
"
toggle
"
type
=
"
checkbox
"
{
checked
}
>
<
label
>
{
title
}
<
/
label
>
<
button
class
=
"
destroy
"
>
<
/
button
>
<
/
div
>
<
/
li
>
;
class
Template
{
show
(
data
)
{
let
view
=
"
"
;
data
.
reverse
(
)
.
forEach
(
(
item
index
)
=
>
{
view
+
=
createTodoItem
(
{
id
:
item
.
id
title
:
escape
(
item
.
title
)
completed
:
item
.
completed
?
"
completed
"
:
"
"
checked
:
item
.
completed
?
"
checked
"
:
"
"
index
:
index
}
)
;
}
)
;
return
view
;
}
itemCounter
(
activeTodos
)
{
const
plural
=
activeTodos
=
=
=
1
?
"
"
:
"
s
"
;
return
<
strong
>
{
activeTodos
}
<
/
strong
>
item
{
plural
}
left
;
}
clearCompletedButton
(
completedTodos
)
{
return
completedTodos
>
0
?
"
Clear
completed
"
:
"
"
;
}
}
export
default
Template
;
