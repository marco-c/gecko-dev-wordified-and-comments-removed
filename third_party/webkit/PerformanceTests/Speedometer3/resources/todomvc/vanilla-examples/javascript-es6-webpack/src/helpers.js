export
{
qs
qsa
on
delegate
parent
remove
}
;
const
qs
=
(
selector
scope
)
=
>
{
return
(
scope
|
|
document
)
.
querySelector
(
selector
)
;
}
;
const
qsa
=
(
selector
scope
)
=
>
{
return
(
scope
|
|
document
)
.
querySelectorAll
(
selector
)
;
}
;
const
on
=
(
target
type
callback
useCapture
)
=
>
{
target
.
addEventListener
(
type
callback
!
!
useCapture
)
;
}
;
const
delegate
=
(
target
selector
type
handler
)
=
>
{
const
useCapture
=
type
=
=
=
"
blur
"
|
|
type
=
=
=
"
focus
"
;
on
(
target
type
dispatchEvent
useCapture
)
;
function
dispatchEvent
(
event
)
{
const
targetElement
=
event
.
target
;
const
potentialElements
=
qsa
(
selector
target
)
;
const
hasMatch
=
Array
.
prototype
.
indexOf
.
call
(
potentialElements
targetElement
)
>
=
0
;
if
(
hasMatch
)
handler
.
call
(
targetElement
event
)
;
}
}
;
const
parent
=
(
element
tagName
)
=
>
{
if
(
!
element
.
parentNode
)
return
undefined
;
if
(
element
.
parentNode
.
tagName
.
toLowerCase
(
)
=
=
=
tagName
.
toLowerCase
(
)
)
return
element
.
parentNode
;
return
parent
(
element
.
parentNode
tagName
)
;
}
;
const
remove
=
(
array
thing
)
=
>
{
const
index
=
array
.
indexOf
(
thing
)
;
if
(
index
=
=
=
-
1
)
return
array
;
return
array
.
splice
(
index
1
)
;
}
;
NodeList
.
prototype
.
forEach
=
Array
.
prototype
.
forEach
;
