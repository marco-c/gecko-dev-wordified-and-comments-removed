const
fs
=
require
(
"
fs
"
)
.
promises
;
const
path
=
require
(
"
path
"
)
;
const
rootDirectory
=
"
.
/
"
;
const
sourceDirectory
=
"
.
/
src
"
;
const
targetDirectory
=
"
.
/
dist
"
;
const
htmlFile
=
"
index
.
html
"
;
const
filesToMove
=
[
"
node_modules
/
todomvc
-
common
/
base
.
css
"
"
node_modules
/
todomvc
-
app
-
css
/
index
.
css
"
]
;
const
copy
=
async
(
src
dest
)
=
>
{
await
fs
.
copyFile
(
src
dest
)
;
}
;
const
build
=
async
(
)
=
>
{
await
fs
.
rm
(
targetDirectory
{
recursive
:
true
force
:
true
}
)
;
await
fs
.
mkdir
(
targetDirectory
)
;
await
fs
.
cp
(
sourceDirectory
targetDirectory
{
recursive
:
true
}
(
err
)
=
>
{
if
(
err
)
console
.
error
(
err
)
;
}
)
;
await
fs
.
copyFile
(
path
.
join
(
rootDirectory
htmlFile
)
path
.
join
(
targetDirectory
htmlFile
)
)
;
for
(
let
i
=
0
;
i
<
filesToMove
.
length
;
i
+
+
)
await
copy
(
filesToMove
[
i
]
path
.
join
(
targetDirectory
path
.
basename
(
filesToMove
[
i
]
)
)
)
;
let
html
=
await
fs
.
readFile
(
path
.
join
(
targetDirectory
htmlFile
)
"
utf8
"
)
;
for
(
let
i
=
0
;
i
<
filesToMove
.
length
;
i
+
+
)
{
const
basePath
=
{
filesToMove
[
i
]
.
split
(
"
/
"
)
.
slice
(
0
-
1
)
.
join
(
"
/
"
)
}
/
;
html
=
html
.
replace
(
basePath
"
"
)
;
}
const
basePath
=
{
path
.
basename
(
sourceDirectory
)
}
/
;
const
re
=
new
RegExp
(
basePath
"
g
"
)
;
html
=
html
.
replace
(
re
"
"
)
;
await
fs
.
writeFile
(
{
targetDirectory
}
/
{
htmlFile
}
html
)
;
console
.
log
(
"
done
!
!
"
)
;
}
;
build
(
)
;
