(
function
(
window
)
{
"
use
strict
"
;
var
MemoryStorage
=
{
}
;
var
ID
=
1
;
function
Store
(
name
callback
)
{
callback
=
callback
|
|
function
(
)
{
}
;
this
.
_dbName
=
name
;
if
(
!
MemoryStorage
[
name
]
)
{
var
data
=
{
todos
:
[
]
}
;
MemoryStorage
[
name
]
=
JSON
.
stringify
(
data
)
;
}
callback
.
call
(
this
JSON
.
parse
(
MemoryStorage
[
name
]
)
)
;
}
Store
.
prototype
.
find
=
function
(
query
callback
)
{
if
(
!
callback
)
return
;
var
todos
=
JSON
.
parse
(
MemoryStorage
[
this
.
_dbName
]
)
.
todos
;
callback
.
call
(
this
todos
.
filter
(
function
(
todo
)
{
for
(
var
q
in
query
)
{
if
(
query
[
q
]
!
=
=
todo
[
q
]
)
return
false
;
}
return
true
;
}
)
)
;
}
;
Store
.
prototype
.
findAll
=
function
(
callback
)
{
callback
=
callback
|
|
function
(
)
{
}
;
callback
.
call
(
this
JSON
.
parse
(
MemoryStorage
[
this
.
_dbName
]
)
.
todos
)
;
}
;
Store
.
prototype
.
save
=
function
(
updateData
callback
id
)
{
var
data
=
JSON
.
parse
(
MemoryStorage
[
this
.
_dbName
]
)
;
var
todos
=
data
.
todos
;
callback
=
callback
|
|
function
(
)
{
}
;
if
(
id
)
{
for
(
var
i
=
0
;
i
<
todos
.
length
;
i
+
+
)
{
if
(
todos
[
i
]
.
id
=
=
=
id
)
{
for
(
var
key
in
updateData
)
todos
[
i
]
[
key
]
=
updateData
[
key
]
;
break
;
}
}
MemoryStorage
[
this
.
_dbName
]
=
JSON
.
stringify
(
data
)
;
callback
.
call
(
this
todos
)
;
}
else
{
updateData
.
id
=
ID
+
+
;
todos
.
push
(
updateData
)
;
MemoryStorage
[
this
.
_dbName
]
=
JSON
.
stringify
(
data
)
;
callback
.
call
(
this
[
updateData
]
)
;
}
}
;
Store
.
prototype
.
remove
=
function
(
id
callback
)
{
var
data
=
JSON
.
parse
(
MemoryStorage
[
this
.
_dbName
]
)
;
var
todos
=
data
.
todos
;
for
(
var
i
=
0
;
i
<
todos
.
length
;
i
+
+
)
{
if
(
todos
[
i
]
.
id
=
=
=
id
)
{
todos
.
splice
(
i
1
)
;
break
;
}
}
MemoryStorage
[
this
.
_dbName
]
=
JSON
.
stringify
(
data
)
;
callback
.
call
(
this
todos
)
;
}
;
Store
.
prototype
.
drop
=
function
(
callback
)
{
var
data
=
{
todos
:
[
]
}
;
MemoryStorage
[
this
.
_dbName
]
=
JSON
.
stringify
(
data
)
;
callback
.
call
(
this
data
.
todos
)
;
}
;
window
.
app
=
window
.
app
|
|
{
}
;
window
.
app
.
Store
=
Store
;
}
)
(
window
)
;
