const
fs
=
require
(
"
fs
"
)
;
const
path
=
require
(
"
path
"
)
;
const
{
execSync
}
=
require
(
"
child_process
"
)
;
function
buildComplex
(
options
)
{
const
{
callerDirectory
sourceDirectory
title
filesToMove
cssFilePath
cssFolder
=
"
"
cssFileNamePattern
extraCssToLink
=
[
]
scriptsToLink
=
[
]
targetDirectory
=
"
.
/
dist
"
complexDomHtmlFile
=
"
index
.
html
"
todoHtmlFile
=
"
index
.
html
"
cssFilesToAddLinksFor
=
[
"
big
-
dom
-
generator
.
css
"
]
}
=
options
;
prepareComplex
(
options
)
;
let
JSDOM
;
try
{
JSDOM
=
require
(
"
jsdom
"
)
.
JSDOM
;
}
catch
(
e
)
{
console
.
error
(
"
Error
:
jsdom
is
not
installed
.
"
)
;
process
.
exit
(
1
)
;
}
fs
.
rmSync
(
path
.
resolve
(
targetDirectory
)
{
recursive
:
true
force
:
true
}
)
;
fs
.
mkdirSync
(
path
.
resolve
(
targetDirectory
)
)
;
fs
.
cpSync
(
path
.
join
(
callerDirectory
sourceDirectory
)
path
.
resolve
(
targetDirectory
)
{
recursive
:
true
}
)
;
for
(
let
i
=
0
;
i
<
filesToMove
.
length
;
i
+
+
)
{
const
sourcePath
=
path
.
resolve
(
callerDirectory
"
.
.
"
filesToMove
[
i
]
)
;
const
fileName
=
path
.
basename
(
filesToMove
[
i
]
)
;
const
targetPath
=
path
.
join
(
targetDirectory
fileName
)
;
fs
.
copyFileSync
(
sourcePath
targetPath
)
;
}
if
(
cssFilePath
)
{
const
cssFolderDirectory
=
path
.
join
(
callerDirectory
sourceDirectory
cssFolder
)
;
const
cssFile
=
fs
.
readdirSync
(
cssFolderDirectory
{
withFileTypes
:
true
}
)
.
find
(
(
dirent
)
=
>
dirent
.
isFile
(
)
&
&
cssFileNamePattern
.
test
(
dirent
.
name
)
)
?
.
name
;
fs
.
copyFileSync
(
cssFilePath
path
.
resolve
(
targetDirectory
cssFolder
cssFile
)
)
;
}
let
html
=
fs
.
readFileSync
(
path
.
resolve
(
callerDirectory
path
.
join
(
"
.
.
"
"
dist
"
todoHtmlFile
)
)
"
utf8
"
)
;
const
dom
=
new
JSDOM
(
html
)
;
const
doc
=
dom
.
window
.
document
;
const
head
=
doc
.
querySelector
(
"
head
"
)
;
doc
.
documentElement
.
setAttribute
(
"
class
"
"
spectrum
spectrum
-
-
medium
spectrum
-
-
light
"
)
;
const
body
=
doc
.
querySelector
(
"
body
"
)
;
const
htmlToInjectInTodoHolder
=
body
.
innerHTML
;
body
.
innerHTML
=
getHtmlBodySync
(
"
node_modules
/
big
-
dom
-
generator
/
dist
/
index
.
html
"
)
;
const
titleElement
=
head
.
querySelector
(
"
title
"
)
;
titleElement
.
innerHTML
=
title
;
const
todoHolder
=
doc
.
createElement
(
"
div
"
)
;
todoHolder
.
className
=
"
todoholder
"
;
todoHolder
.
innerHTML
=
htmlToInjectInTodoHolder
;
const
todoArea
=
doc
.
querySelector
(
"
.
todo
-
area
"
)
;
todoArea
.
appendChild
(
todoHolder
)
;
const
cssFilesToAddLinksForFinal
=
[
.
.
.
cssFilesToAddLinksFor
.
.
.
extraCssToLink
]
;
for
(
const
cssFile
of
cssFilesToAddLinksForFinal
)
{
const
cssLink
=
doc
.
createElement
(
"
link
"
)
;
cssLink
.
rel
=
"
stylesheet
"
;
cssLink
.
href
=
cssFile
;
head
.
appendChild
(
cssLink
)
;
}
for
(
const
script
of
scriptsToLink
)
{
const
scriptLink
=
doc
.
createElement
(
"
script
"
)
;
scriptLink
.
src
=
script
;
head
.
appendChild
(
scriptLink
)
;
}
const
destinationFilePath
=
path
.
join
(
targetDirectory
complexDomHtmlFile
)
;
fs
.
writeFileSync
(
destinationFilePath
dom
.
serialize
(
)
)
;
console
.
log
(
The
complex
code
for
{
sourceDirectory
}
has
been
written
to
{
destinationFilePath
}
.
)
;
}
function
prepareComplex
(
options
)
{
const
{
standaloneDirectory
complexDirectory
}
=
options
;
console
.
log
(
"
Running
npm
ci
in
big
-
dom
-
generator
.
.
.
"
)
;
execSync
(
"
npm
ci
"
{
cwd
:
path
.
join
(
__dirname
"
.
.
"
)
stdio
:
"
inherit
"
}
)
;
console
.
log
(
Running
npm
ci
in
the
standalone
directory
:
{
standaloneDirectory
}
)
;
execSync
(
"
npm
ci
"
{
cwd
:
standaloneDirectory
stdio
:
"
inherit
"
}
)
;
console
.
log
(
Running
npm
run
build
in
the
standalone
directory
:
{
standaloneDirectory
}
)
;
execSync
(
"
npm
run
build
"
{
cwd
:
standaloneDirectory
stdio
:
"
inherit
"
}
)
;
console
.
log
(
Running
npm
ci
in
the
complex
directory
:
{
complexDirectory
}
)
;
execSync
(
"
npm
ci
"
{
cwd
:
complexDirectory
stdio
:
"
inherit
"
}
)
;
}
function
getHtmlBodySync
(
filePath
)
{
let
htmlContent
=
fs
.
readFileSync
(
filePath
"
utf8
"
)
;
const
bodyStartIndex
=
htmlContent
.
indexOf
(
"
<
body
>
"
)
;
const
bodyEndIndex
=
htmlContent
.
lastIndexOf
(
"
<
/
body
>
"
)
;
return
htmlContent
.
substring
(
bodyStartIndex
+
6
bodyEndIndex
)
;
}
module
.
exports
=
{
buildComplex
}
;
