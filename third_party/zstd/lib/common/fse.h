#
if
defined
(
__cplusplus
)
extern
"
C
"
{
#
endif
#
ifndef
FSE_H
#
define
FSE_H
#
include
"
zstd_deps
.
h
"
#
if
defined
(
FSE_DLL_EXPORT
)
&
&
(
FSE_DLL_EXPORT
=
=
1
)
&
&
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
4
)
#
define
FSE_PUBLIC_API
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
elif
defined
(
FSE_DLL_EXPORT
)
&
&
(
FSE_DLL_EXPORT
=
=
1
)
#
define
FSE_PUBLIC_API
__declspec
(
dllexport
)
#
elif
defined
(
FSE_DLL_IMPORT
)
&
&
(
FSE_DLL_IMPORT
=
=
1
)
#
define
FSE_PUBLIC_API
__declspec
(
dllimport
)
/
*
It
isn
'
t
required
but
allows
to
generate
better
code
saving
a
function
pointer
load
from
the
IAT
and
an
indirect
jump
.
*
/
#
else
#
define
FSE_PUBLIC_API
#
endif
#
define
FSE_VERSION_MAJOR
0
#
define
FSE_VERSION_MINOR
9
#
define
FSE_VERSION_RELEASE
0
#
define
FSE_LIB_VERSION
FSE_VERSION_MAJOR
.
FSE_VERSION_MINOR
.
FSE_VERSION_RELEASE
#
define
FSE_QUOTE
(
str
)
#
str
#
define
FSE_EXPAND_AND_QUOTE
(
str
)
FSE_QUOTE
(
str
)
#
define
FSE_VERSION_STRING
FSE_EXPAND_AND_QUOTE
(
FSE_LIB_VERSION
)
#
define
FSE_VERSION_NUMBER
(
FSE_VERSION_MAJOR
*
100
*
100
+
FSE_VERSION_MINOR
*
100
+
FSE_VERSION_RELEASE
)
FSE_PUBLIC_API
unsigned
FSE_versionNumber
(
void
)
;
FSE_PUBLIC_API
size_t
FSE_compressBound
(
size_t
size
)
;
FSE_PUBLIC_API
unsigned
FSE_isError
(
size_t
code
)
;
FSE_PUBLIC_API
const
char
*
FSE_getErrorName
(
size_t
code
)
;
FSE_PUBLIC_API
unsigned
FSE_optimalTableLog
(
unsigned
maxTableLog
size_t
srcSize
unsigned
maxSymbolValue
)
;
FSE_PUBLIC_API
size_t
FSE_normalizeCount
(
short
*
normalizedCounter
unsigned
tableLog
const
unsigned
*
count
size_t
srcSize
unsigned
maxSymbolValue
unsigned
useLowProbCount
)
;
FSE_PUBLIC_API
size_t
FSE_NCountWriteBound
(
unsigned
maxSymbolValue
unsigned
tableLog
)
;
FSE_PUBLIC_API
size_t
FSE_writeNCount
(
void
*
buffer
size_t
bufferSize
const
short
*
normalizedCounter
unsigned
maxSymbolValue
unsigned
tableLog
)
;
typedef
unsigned
FSE_CTable
;
FSE_PUBLIC_API
size_t
FSE_buildCTable
(
FSE_CTable
*
ct
const
short
*
normalizedCounter
unsigned
maxSymbolValue
unsigned
tableLog
)
;
FSE_PUBLIC_API
size_t
FSE_compress_usingCTable
(
void
*
dst
size_t
dstCapacity
const
void
*
src
size_t
srcSize
const
FSE_CTable
*
ct
)
;
FSE_PUBLIC_API
size_t
FSE_readNCount
(
short
*
normalizedCounter
unsigned
*
maxSymbolValuePtr
unsigned
*
tableLogPtr
const
void
*
rBuffer
size_t
rBuffSize
)
;
FSE_PUBLIC_API
size_t
FSE_readNCount_bmi2
(
short
*
normalizedCounter
unsigned
*
maxSymbolValuePtr
unsigned
*
tableLogPtr
const
void
*
rBuffer
size_t
rBuffSize
int
bmi2
)
;
typedef
unsigned
FSE_DTable
;
#
endif
#
if
defined
(
FSE_STATIC_LINKING_ONLY
)
&
&
!
defined
(
FSE_H_FSE_STATIC_LINKING_ONLY
)
#
define
FSE_H_FSE_STATIC_LINKING_ONLY
#
include
"
bitstream
.
h
"
#
define
FSE_NCOUNTBOUND
512
#
define
FSE_BLOCKBOUND
(
size
)
(
(
size
)
+
(
(
size
)
>
>
7
)
+
4
/
*
fse
states
*
/
+
sizeof
(
size_t
)
/
*
bitContainer
*
/
)
#
define
FSE_COMPRESSBOUND
(
size
)
(
FSE_NCOUNTBOUND
+
FSE_BLOCKBOUND
(
size
)
)
/
*
Macro
version
useful
for
static
allocation
*
/
#
define
FSE_CTABLE_SIZE_U32
(
maxTableLog
maxSymbolValue
)
(
1
+
(
1
<
<
(
(
maxTableLog
)
-
1
)
)
+
(
(
(
maxSymbolValue
)
+
1
)
*
2
)
)
#
define
FSE_DTABLE_SIZE_U32
(
maxTableLog
)
(
1
+
(
1
<
<
(
maxTableLog
)
)
)
#
define
FSE_CTABLE_SIZE
(
maxTableLog
maxSymbolValue
)
(
FSE_CTABLE_SIZE_U32
(
maxTableLog
maxSymbolValue
)
*
sizeof
(
FSE_CTable
)
)
#
define
FSE_DTABLE_SIZE
(
maxTableLog
)
(
FSE_DTABLE_SIZE_U32
(
maxTableLog
)
*
sizeof
(
FSE_DTable
)
)
unsigned
FSE_optimalTableLog_internal
(
unsigned
maxTableLog
size_t
srcSize
unsigned
maxSymbolValue
unsigned
minus
)
;
size_t
FSE_buildCTable_rle
(
FSE_CTable
*
ct
unsigned
char
symbolValue
)
;
#
define
FSE_BUILD_CTABLE_WORKSPACE_SIZE_U32
(
maxSymbolValue
tableLog
)
(
(
(
maxSymbolValue
+
2
)
+
(
1ull
<
<
(
tableLog
)
)
)
/
2
+
sizeof
(
U64
)
/
sizeof
(
U32
)
/
*
additional
8
bytes
for
potential
table
overwrite
*
/
)
#
define
FSE_BUILD_CTABLE_WORKSPACE_SIZE
(
maxSymbolValue
tableLog
)
(
sizeof
(
unsigned
)
*
FSE_BUILD_CTABLE_WORKSPACE_SIZE_U32
(
maxSymbolValue
tableLog
)
)
size_t
FSE_buildCTable_wksp
(
FSE_CTable
*
ct
const
short
*
normalizedCounter
unsigned
maxSymbolValue
unsigned
tableLog
void
*
workSpace
size_t
wkspSize
)
;
#
define
FSE_BUILD_DTABLE_WKSP_SIZE
(
maxTableLog
maxSymbolValue
)
(
sizeof
(
short
)
*
(
maxSymbolValue
+
1
)
+
(
1ULL
<
<
maxTableLog
)
+
8
)
#
define
FSE_BUILD_DTABLE_WKSP_SIZE_U32
(
maxTableLog
maxSymbolValue
)
(
(
FSE_BUILD_DTABLE_WKSP_SIZE
(
maxTableLog
maxSymbolValue
)
+
sizeof
(
unsigned
)
-
1
)
/
sizeof
(
unsigned
)
)
FSE_PUBLIC_API
size_t
FSE_buildDTable_wksp
(
FSE_DTable
*
dt
const
short
*
normalizedCounter
unsigned
maxSymbolValue
unsigned
tableLog
void
*
workSpace
size_t
wkspSize
)
;
#
define
FSE_DECOMPRESS_WKSP_SIZE_U32
(
maxTableLog
maxSymbolValue
)
(
FSE_DTABLE_SIZE_U32
(
maxTableLog
)
+
1
+
FSE_BUILD_DTABLE_WKSP_SIZE_U32
(
maxTableLog
maxSymbolValue
)
+
(
FSE_MAX_SYMBOL_VALUE
+
1
)
/
2
+
1
)
#
define
FSE_DECOMPRESS_WKSP_SIZE
(
maxTableLog
maxSymbolValue
)
(
FSE_DECOMPRESS_WKSP_SIZE_U32
(
maxTableLog
maxSymbolValue
)
*
sizeof
(
unsigned
)
)
size_t
FSE_decompress_wksp_bmi2
(
void
*
dst
size_t
dstCapacity
const
void
*
cSrc
size_t
cSrcSize
unsigned
maxLog
void
*
workSpace
size_t
wkspSize
int
bmi2
)
;
typedef
enum
{
FSE_repeat_none
FSE_repeat_check
FSE_repeat_valid
}
FSE_repeat
;
typedef
struct
{
ptrdiff_t
value
;
const
void
*
stateTable
;
const
void
*
symbolTT
;
unsigned
stateLog
;
}
FSE_CState_t
;
static
void
FSE_initCState
(
FSE_CState_t
*
CStatePtr
const
FSE_CTable
*
ct
)
;
static
void
FSE_encodeSymbol
(
BIT_CStream_t
*
bitC
FSE_CState_t
*
CStatePtr
unsigned
symbol
)
;
static
void
FSE_flushCState
(
BIT_CStream_t
*
bitC
const
FSE_CState_t
*
CStatePtr
)
;
typedef
struct
{
size_t
state
;
const
void
*
table
;
}
FSE_DState_t
;
static
void
FSE_initDState
(
FSE_DState_t
*
DStatePtr
BIT_DStream_t
*
bitD
const
FSE_DTable
*
dt
)
;
static
unsigned
char
FSE_decodeSymbol
(
FSE_DState_t
*
DStatePtr
BIT_DStream_t
*
bitD
)
;
static
unsigned
FSE_endOfDState
(
const
FSE_DState_t
*
DStatePtr
)
;
static
unsigned
char
FSE_decodeSymbolFast
(
FSE_DState_t
*
DStatePtr
BIT_DStream_t
*
bitD
)
;
typedef
struct
{
int
deltaFindState
;
U32
deltaNbBits
;
}
FSE_symbolCompressionTransform
;
MEM_STATIC
void
FSE_initCState
(
FSE_CState_t
*
statePtr
const
FSE_CTable
*
ct
)
{
const
void
*
ptr
=
ct
;
const
U16
*
u16ptr
=
(
const
U16
*
)
ptr
;
const
U32
tableLog
=
MEM_read16
(
ptr
)
;
statePtr
-
>
value
=
(
ptrdiff_t
)
1
<
<
tableLog
;
statePtr
-
>
stateTable
=
u16ptr
+
2
;
statePtr
-
>
symbolTT
=
ct
+
1
+
(
tableLog
?
(
1
<
<
(
tableLog
-
1
)
)
:
1
)
;
statePtr
-
>
stateLog
=
tableLog
;
}
MEM_STATIC
void
FSE_initCState2
(
FSE_CState_t
*
statePtr
const
FSE_CTable
*
ct
U32
symbol
)
{
FSE_initCState
(
statePtr
ct
)
;
{
const
FSE_symbolCompressionTransform
symbolTT
=
(
(
const
FSE_symbolCompressionTransform
*
)
(
statePtr
-
>
symbolTT
)
)
[
symbol
]
;
const
U16
*
stateTable
=
(
const
U16
*
)
(
statePtr
-
>
stateTable
)
;
U32
nbBitsOut
=
(
U32
)
(
(
symbolTT
.
deltaNbBits
+
(
1
<
<
15
)
)
>
>
16
)
;
statePtr
-
>
value
=
(
nbBitsOut
<
<
16
)
-
symbolTT
.
deltaNbBits
;
statePtr
-
>
value
=
stateTable
[
(
statePtr
-
>
value
>
>
nbBitsOut
)
+
symbolTT
.
deltaFindState
]
;
}
}
MEM_STATIC
void
FSE_encodeSymbol
(
BIT_CStream_t
*
bitC
FSE_CState_t
*
statePtr
unsigned
symbol
)
{
FSE_symbolCompressionTransform
const
symbolTT
=
(
(
const
FSE_symbolCompressionTransform
*
)
(
statePtr
-
>
symbolTT
)
)
[
symbol
]
;
const
U16
*
const
stateTable
=
(
const
U16
*
)
(
statePtr
-
>
stateTable
)
;
U32
const
nbBitsOut
=
(
U32
)
(
(
statePtr
-
>
value
+
symbolTT
.
deltaNbBits
)
>
>
16
)
;
BIT_addBits
(
bitC
(
size_t
)
statePtr
-
>
value
nbBitsOut
)
;
statePtr
-
>
value
=
stateTable
[
(
statePtr
-
>
value
>
>
nbBitsOut
)
+
symbolTT
.
deltaFindState
]
;
}
MEM_STATIC
void
FSE_flushCState
(
BIT_CStream_t
*
bitC
const
FSE_CState_t
*
statePtr
)
{
BIT_addBits
(
bitC
(
size_t
)
statePtr
-
>
value
statePtr
-
>
stateLog
)
;
BIT_flushBits
(
bitC
)
;
}
MEM_STATIC
U32
FSE_getMaxNbBits
(
const
void
*
symbolTTPtr
U32
symbolValue
)
{
const
FSE_symbolCompressionTransform
*
symbolTT
=
(
const
FSE_symbolCompressionTransform
*
)
symbolTTPtr
;
return
(
symbolTT
[
symbolValue
]
.
deltaNbBits
+
(
(
1
<
<
16
)
-
1
)
)
>
>
16
;
}
MEM_STATIC
U32
FSE_bitCost
(
const
void
*
symbolTTPtr
U32
tableLog
U32
symbolValue
U32
accuracyLog
)
{
const
FSE_symbolCompressionTransform
*
symbolTT
=
(
const
FSE_symbolCompressionTransform
*
)
symbolTTPtr
;
U32
const
minNbBits
=
symbolTT
[
symbolValue
]
.
deltaNbBits
>
>
16
;
U32
const
threshold
=
(
minNbBits
+
1
)
<
<
16
;
assert
(
tableLog
<
16
)
;
assert
(
accuracyLog
<
31
-
tableLog
)
;
{
U32
const
tableSize
=
1
<
<
tableLog
;
U32
const
deltaFromThreshold
=
threshold
-
(
symbolTT
[
symbolValue
]
.
deltaNbBits
+
tableSize
)
;
U32
const
normalizedDeltaFromThreshold
=
(
deltaFromThreshold
<
<
accuracyLog
)
>
>
tableLog
;
U32
const
bitMultiplier
=
1
<
<
accuracyLog
;
assert
(
symbolTT
[
symbolValue
]
.
deltaNbBits
+
tableSize
<
=
threshold
)
;
assert
(
normalizedDeltaFromThreshold
<
=
bitMultiplier
)
;
return
(
minNbBits
+
1
)
*
bitMultiplier
-
normalizedDeltaFromThreshold
;
}
}
typedef
struct
{
U16
tableLog
;
U16
fastMode
;
}
FSE_DTableHeader
;
typedef
struct
{
unsigned
short
newState
;
unsigned
char
symbol
;
unsigned
char
nbBits
;
}
FSE_decode_t
;
MEM_STATIC
void
FSE_initDState
(
FSE_DState_t
*
DStatePtr
BIT_DStream_t
*
bitD
const
FSE_DTable
*
dt
)
{
const
void
*
ptr
=
dt
;
const
FSE_DTableHeader
*
const
DTableH
=
(
const
FSE_DTableHeader
*
)
ptr
;
DStatePtr
-
>
state
=
BIT_readBits
(
bitD
DTableH
-
>
tableLog
)
;
BIT_reloadDStream
(
bitD
)
;
DStatePtr
-
>
table
=
dt
+
1
;
}
MEM_STATIC
BYTE
FSE_peekSymbol
(
const
FSE_DState_t
*
DStatePtr
)
{
FSE_decode_t
const
DInfo
=
(
(
const
FSE_decode_t
*
)
(
DStatePtr
-
>
table
)
)
[
DStatePtr
-
>
state
]
;
return
DInfo
.
symbol
;
}
MEM_STATIC
void
FSE_updateState
(
FSE_DState_t
*
DStatePtr
BIT_DStream_t
*
bitD
)
{
FSE_decode_t
const
DInfo
=
(
(
const
FSE_decode_t
*
)
(
DStatePtr
-
>
table
)
)
[
DStatePtr
-
>
state
]
;
U32
const
nbBits
=
DInfo
.
nbBits
;
size_t
const
lowBits
=
BIT_readBits
(
bitD
nbBits
)
;
DStatePtr
-
>
state
=
DInfo
.
newState
+
lowBits
;
}
MEM_STATIC
BYTE
FSE_decodeSymbol
(
FSE_DState_t
*
DStatePtr
BIT_DStream_t
*
bitD
)
{
FSE_decode_t
const
DInfo
=
(
(
const
FSE_decode_t
*
)
(
DStatePtr
-
>
table
)
)
[
DStatePtr
-
>
state
]
;
U32
const
nbBits
=
DInfo
.
nbBits
;
BYTE
const
symbol
=
DInfo
.
symbol
;
size_t
const
lowBits
=
BIT_readBits
(
bitD
nbBits
)
;
DStatePtr
-
>
state
=
DInfo
.
newState
+
lowBits
;
return
symbol
;
}
MEM_STATIC
BYTE
FSE_decodeSymbolFast
(
FSE_DState_t
*
DStatePtr
BIT_DStream_t
*
bitD
)
{
FSE_decode_t
const
DInfo
=
(
(
const
FSE_decode_t
*
)
(
DStatePtr
-
>
table
)
)
[
DStatePtr
-
>
state
]
;
U32
const
nbBits
=
DInfo
.
nbBits
;
BYTE
const
symbol
=
DInfo
.
symbol
;
size_t
const
lowBits
=
BIT_readBitsFast
(
bitD
nbBits
)
;
DStatePtr
-
>
state
=
DInfo
.
newState
+
lowBits
;
return
symbol
;
}
MEM_STATIC
unsigned
FSE_endOfDState
(
const
FSE_DState_t
*
DStatePtr
)
{
return
DStatePtr
-
>
state
=
=
0
;
}
#
ifndef
FSE_COMMONDEFS_ONLY
#
ifndef
FSE_MAX_MEMORY_USAGE
#
define
FSE_MAX_MEMORY_USAGE
14
#
endif
#
ifndef
FSE_DEFAULT_MEMORY_USAGE
#
define
FSE_DEFAULT_MEMORY_USAGE
13
#
endif
#
if
(
FSE_DEFAULT_MEMORY_USAGE
>
FSE_MAX_MEMORY_USAGE
)
#
error
"
FSE_DEFAULT_MEMORY_USAGE
must
be
<
=
FSE_MAX_MEMORY_USAGE
"
#
endif
#
ifndef
FSE_MAX_SYMBOL_VALUE
#
define
FSE_MAX_SYMBOL_VALUE
255
#
endif
#
define
FSE_FUNCTION_TYPE
BYTE
#
define
FSE_FUNCTION_EXTENSION
#
define
FSE_DECODE_TYPE
FSE_decode_t
#
endif
#
define
FSE_MAX_TABLELOG
(
FSE_MAX_MEMORY_USAGE
-
2
)
#
define
FSE_MAX_TABLESIZE
(
1U
<
<
FSE_MAX_TABLELOG
)
#
define
FSE_MAXTABLESIZE_MASK
(
FSE_MAX_TABLESIZE
-
1
)
#
define
FSE_DEFAULT_TABLELOG
(
FSE_DEFAULT_MEMORY_USAGE
-
2
)
#
define
FSE_MIN_TABLELOG
5
#
define
FSE_TABLELOG_ABSOLUTE_MAX
15
#
if
FSE_MAX_TABLELOG
>
FSE_TABLELOG_ABSOLUTE_MAX
#
error
"
FSE_MAX_TABLELOG
>
FSE_TABLELOG_ABSOLUTE_MAX
is
not
supported
"
#
endif
#
define
FSE_TABLESTEP
(
tableSize
)
(
(
(
tableSize
)
>
>
1
)
+
(
(
tableSize
)
>
>
3
)
+
3
)
#
endif
#
if
defined
(
__cplusplus
)
}
#
endif
