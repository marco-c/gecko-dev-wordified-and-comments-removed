#
ifndef
GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_MATCHERS_H_
#
define
GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_MATCHERS_H_
#
include
<
ostream
>
#
include
<
string
>
#
include
"
gmock
/
gmock
-
matchers
.
h
"
namespace
testing
{
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(
4100
)
#
if
defined
(
_MSC_VER
)
&
&
(
_MSC_VER
=
=
1900
)
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(
4800
)
#
endif
namespace
internal
{
class
IsEmptyMatcher
{
public
:
template
<
typename
MatcheeContainerType
>
bool
MatchAndExplain
(
const
MatcheeContainerType
&
c
MatchResultListener
*
listener
)
const
{
if
(
c
.
empty
(
)
)
{
return
true
;
}
*
listener
<
<
"
whose
size
is
"
<
<
c
.
size
(
)
;
return
false
;
}
bool
MatchAndExplain
(
const
char
*
s
MatchResultListener
*
listener
)
const
{
return
MatchAndExplain
(
std
:
:
string
(
s
)
listener
)
;
}
void
DescribeTo
(
std
:
:
ostream
*
os
)
const
{
*
os
<
<
"
is
empty
"
;
}
void
DescribeNegationTo
(
std
:
:
ostream
*
os
)
const
{
*
os
<
<
"
isn
'
t
empty
"
;
}
}
;
}
inline
PolymorphicMatcher
<
internal
:
:
IsEmptyMatcher
>
IsEmpty
(
)
{
return
MakePolymorphicMatcher
(
internal
:
:
IsEmptyMatcher
(
)
)
;
}
MATCHER
(
IsTrue
negation
?
"
is
false
"
:
"
is
true
"
)
{
return
static_cast
<
bool
>
(
arg
)
;
}
MATCHER
(
IsFalse
negation
?
"
is
true
"
:
"
is
false
"
)
{
return
!
static_cast
<
bool
>
(
arg
)
;
}
#
if
defined
(
_MSC_VER
)
&
&
(
_MSC_VER
=
=
1900
)
GTEST_DISABLE_MSC_WARNINGS_POP_
(
)
#
endif
GTEST_DISABLE_MSC_WARNINGS_POP_
(
)
}
#
endif
