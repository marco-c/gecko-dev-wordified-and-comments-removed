#
ifndef
GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PORT_H_
#
define
GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PORT_H_
#
include
<
assert
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
cstdint
>
#
include
<
iostream
>
#
include
"
gmock
/
internal
/
custom
/
gmock
-
port
.
h
"
#
include
"
gtest
/
internal
/
gtest
-
port
.
h
"
#
if
defined
(
GTEST_HAS_ABSL
)
#
include
"
absl
/
base
/
macros
.
h
"
#
define
GMOCK_DEPRECATE_AND_INLINE
(
)
ABSL_DEPRECATE_AND_INLINE
(
)
#
if
!
defined
(
GTEST_NO_ABSL_FLAGS
)
#
include
"
absl
/
flags
/
declare
.
h
"
#
include
"
absl
/
flags
/
flag
.
h
"
#
endif
#
else
#
define
GMOCK_DEPRECATE_AND_INLINE
(
)
#
endif
#
if
defined
(
_MSC_VER
)
&
&
_MSC_VER
<
1900
#
error
"
At
least
Visual
C
+
+
2015
(
14
.
0
)
is
required
to
compile
Google
Mock
.
"
#
endif
#
define
GMOCK_FLAG_NAME_
(
name
)
gmock_
#
#
name
#
define
GMOCK_FLAG
(
name
)
FLAGS_gmock_
#
#
name
#
if
defined
(
GTEST_HAS_ABSL
)
&
&
!
defined
(
GTEST_NO_ABSL_FLAGS
)
#
define
GMOCK_DEFINE_bool_
(
name
default_val
doc
)
\
ABSL_FLAG
(
bool
GMOCK_FLAG_NAME_
(
name
)
default_val
doc
)
#
define
GMOCK_DEFINE_int32_
(
name
default_val
doc
)
\
ABSL_FLAG
(
int32_t
GMOCK_FLAG_NAME_
(
name
)
default_val
doc
)
#
define
GMOCK_DEFINE_string_
(
name
default_val
doc
)
\
ABSL_FLAG
(
std
:
:
string
GMOCK_FLAG_NAME_
(
name
)
default_val
doc
)
#
define
GMOCK_DECLARE_bool_
(
name
)
\
ABSL_DECLARE_FLAG
(
bool
GMOCK_FLAG_NAME_
(
name
)
)
#
define
GMOCK_DECLARE_int32_
(
name
)
\
ABSL_DECLARE_FLAG
(
int32_t
GMOCK_FLAG_NAME_
(
name
)
)
#
define
GMOCK_DECLARE_string_
(
name
)
\
ABSL_DECLARE_FLAG
(
std
:
:
string
GMOCK_FLAG_NAME_
(
name
)
)
#
define
GMOCK_FLAG_GET
(
name
)
:
:
absl
:
:
GetFlag
(
GMOCK_FLAG
(
name
)
)
#
define
GMOCK_FLAG_SET
(
name
value
)
\
(
void
)
(
:
:
absl
:
:
SetFlag
(
&
GMOCK_FLAG
(
name
)
value
)
)
#
else
#
define
GMOCK_DEFINE_bool_
(
name
default_val
doc
)
\
namespace
testing
{
\
GTEST_API_
bool
GMOCK_FLAG
(
name
)
=
(
default_val
)
;
\
}
\
static_assert
(
true
"
no
-
op
to
require
trailing
semicolon
"
)
#
define
GMOCK_DEFINE_int32_
(
name
default_val
doc
)
\
namespace
testing
{
\
GTEST_API_
int32_t
GMOCK_FLAG
(
name
)
=
(
default_val
)
;
\
}
\
static_assert
(
true
"
no
-
op
to
require
trailing
semicolon
"
)
#
define
GMOCK_DEFINE_string_
(
name
default_val
doc
)
\
namespace
testing
{
\
GTEST_API_
:
:
std
:
:
string
GMOCK_FLAG
(
name
)
=
(
default_val
)
;
\
}
\
static_assert
(
true
"
no
-
op
to
require
trailing
semicolon
"
)
#
define
GMOCK_DECLARE_bool_
(
name
)
\
namespace
testing
{
\
GTEST_API_
extern
bool
GMOCK_FLAG
(
name
)
;
\
}
\
static_assert
(
true
"
no
-
op
to
require
trailing
semicolon
"
)
#
define
GMOCK_DECLARE_int32_
(
name
)
\
namespace
testing
{
\
GTEST_API_
extern
int32_t
GMOCK_FLAG
(
name
)
;
\
}
\
static_assert
(
true
"
no
-
op
to
require
trailing
semicolon
"
)
#
define
GMOCK_DECLARE_string_
(
name
)
\
namespace
testing
{
\
GTEST_API_
extern
:
:
std
:
:
string
GMOCK_FLAG
(
name
)
;
\
}
\
static_assert
(
true
"
no
-
op
to
require
trailing
semicolon
"
)
#
define
GMOCK_FLAG_GET
(
name
)
:
:
testing
:
:
GMOCK_FLAG
(
name
)
#
define
GMOCK_FLAG_SET
(
name
value
)
(
void
)
(
:
:
testing
:
:
GMOCK_FLAG
(
name
)
=
value
)
#
endif
#
endif
