#
ifndef
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_
#
define
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_
#
include
<
string
>
#
include
"
gtest
/
internal
/
gtest
-
port
.
h
"
#
include
"
gtest
/
internal
/
gtest
-
string
.
h
"
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(
4251
\
)
#
if
GTEST_HAS_FILE_SYSTEM
namespace
testing
{
namespace
internal
{
class
GTEST_API_
FilePath
{
public
:
FilePath
(
)
:
pathname_
(
"
"
)
{
}
FilePath
(
const
FilePath
&
rhs
)
:
pathname_
(
rhs
.
pathname_
)
{
}
explicit
FilePath
(
const
std
:
:
string
&
pathname
)
:
pathname_
(
pathname
)
{
Normalize
(
)
;
}
FilePath
&
operator
=
(
const
FilePath
&
rhs
)
{
Set
(
rhs
)
;
return
*
this
;
}
void
Set
(
const
FilePath
&
rhs
)
{
pathname_
=
rhs
.
pathname_
;
}
const
std
:
:
string
&
string
(
)
const
{
return
pathname_
;
}
const
char
*
c_str
(
)
const
{
return
pathname_
.
c_str
(
)
;
}
static
FilePath
GetCurrentDir
(
)
;
static
FilePath
MakeFileName
(
const
FilePath
&
directory
const
FilePath
&
base_name
int
number
const
char
*
extension
)
;
static
FilePath
ConcatPaths
(
const
FilePath
&
directory
const
FilePath
&
relative_path
)
;
static
FilePath
GenerateUniqueFileName
(
const
FilePath
&
directory
const
FilePath
&
base_name
const
char
*
extension
)
;
bool
IsEmpty
(
)
const
{
return
pathname_
.
empty
(
)
;
}
FilePath
RemoveTrailingPathSeparator
(
)
const
;
FilePath
RemoveDirectoryName
(
)
const
;
FilePath
RemoveFileName
(
)
const
;
FilePath
RemoveExtension
(
const
char
*
extension
)
const
;
bool
CreateDirectoriesRecursively
(
)
const
;
bool
CreateFolder
(
)
const
;
bool
FileOrDirectoryExists
(
)
const
;
bool
DirectoryExists
(
)
const
;
bool
IsDirectory
(
)
const
;
bool
IsRootDirectory
(
)
const
;
bool
IsAbsolutePath
(
)
const
;
private
:
void
Normalize
(
)
;
const
char
*
FindLastPathSeparator
(
)
const
;
size_t
CalculateRootLength
(
)
const
;
std
:
:
string
pathname_
;
}
;
}
}
GTEST_DISABLE_MSC_WARNINGS_POP_
(
)
#
endif
#
endif
