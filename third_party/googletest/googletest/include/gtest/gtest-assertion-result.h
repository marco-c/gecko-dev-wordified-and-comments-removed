#
ifndef
GOOGLETEST_INCLUDE_GTEST_GTEST_ASSERTION_RESULT_H_
#
define
GOOGLETEST_INCLUDE_GTEST_GTEST_ASSERTION_RESULT_H_
#
include
<
memory
>
#
include
<
ostream
>
#
include
<
string
>
#
include
<
type_traits
>
#
include
"
gtest
/
gtest
-
message
.
h
"
#
include
"
gtest
/
internal
/
gtest
-
port
.
h
"
namespace
testing
{
class
GTEST_API_
AssertionResult
{
public
:
AssertionResult
(
const
AssertionResult
&
other
)
;
#
if
defined
(
_MSC_VER
)
&
&
(
_MSC_VER
<
1910
|
|
_MSC_VER
>
=
1920
)
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(
4800
)
#
endif
template
<
typename
T
>
explicit
AssertionResult
(
const
T
&
success
typename
std
:
:
enable_if
<
!
std
:
:
is_convertible
<
T
AssertionResult
>
:
:
value
>
:
:
type
*
=
nullptr
)
:
success_
(
success
)
{
}
#
if
defined
(
_MSC_VER
)
&
&
(
_MSC_VER
<
1910
|
|
_MSC_VER
>
=
1920
)
GTEST_DISABLE_MSC_WARNINGS_POP_
(
)
#
endif
AssertionResult
&
operator
=
(
AssertionResult
other
)
{
swap
(
other
)
;
return
*
this
;
}
operator
bool
(
)
const
{
return
success_
;
}
AssertionResult
operator
!
(
)
const
;
const
char
*
message
(
)
const
{
return
message_
.
get
(
)
!
=
nullptr
?
message_
-
>
c_str
(
)
:
"
"
;
}
const
char
*
failure_message
(
)
const
{
return
message
(
)
;
}
template
<
typename
T
>
AssertionResult
&
operator
<
<
(
const
T
&
value
)
{
AppendMessage
(
Message
(
)
<
<
value
)
;
return
*
this
;
}
AssertionResult
&
operator
<
<
(
:
:
std
:
:
ostream
&
(
*
basic_manipulator
)
(
:
:
std
:
:
ostream
&
stream
)
)
{
AppendMessage
(
Message
(
)
<
<
basic_manipulator
)
;
return
*
this
;
}
private
:
void
AppendMessage
(
const
Message
&
a_message
)
{
if
(
message_
.
get
(
)
=
=
nullptr
)
message_
.
reset
(
new
:
:
std
:
:
string
)
;
message_
-
>
append
(
a_message
.
GetString
(
)
.
c_str
(
)
)
;
}
void
swap
(
AssertionResult
&
other
)
;
bool
success_
;
std
:
:
unique_ptr
<
:
:
std
:
:
string
>
message_
;
}
;
GTEST_API_
AssertionResult
AssertionSuccess
(
)
;
GTEST_API_
AssertionResult
AssertionFailure
(
)
;
GTEST_API_
AssertionResult
AssertionFailure
(
const
Message
&
msg
)
;
}
#
endif
