#
ifndef
MSGPACK_UNPACKER_H
#
define
MSGPACK_UNPACKER_H
#
include
"
zone
.
h
"
#
include
"
object
.
h
"
#
include
<
string
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
struct
msgpack_unpacked
{
msgpack_zone
*
zone
;
msgpack_object
data
;
}
msgpack_unpacked
;
typedef
enum
{
MSGPACK_UNPACK_SUCCESS
=
2
MSGPACK_UNPACK_EXTRA_BYTES
=
1
MSGPACK_UNPACK_CONTINUE
=
0
MSGPACK_UNPACK_PARSE_ERROR
=
-
1
MSGPACK_UNPACK_NOMEM_ERROR
=
-
2
}
msgpack_unpack_return
;
MSGPACK_DLLEXPORT
msgpack_unpack_return
msgpack_unpack_next
(
msgpack_unpacked
*
result
const
char
*
data
size_t
len
size_t
*
off
)
;
typedef
struct
msgpack_unpacker
{
char
*
buffer
;
size_t
used
;
size_t
free
;
size_t
off
;
size_t
parsed
;
msgpack_zone
*
z
;
size_t
initial_buffer_size
;
void
*
ctx
;
}
msgpack_unpacker
;
#
ifndef
MSGPACK_UNPACKER_INIT_BUFFER_SIZE
#
define
MSGPACK_UNPACKER_INIT_BUFFER_SIZE
(
64
*
1024
)
#
endif
MSGPACK_DLLEXPORT
bool
msgpack_unpacker_init
(
msgpack_unpacker
*
mpac
size_t
initial_buffer_size
)
;
MSGPACK_DLLEXPORT
void
msgpack_unpacker_destroy
(
msgpack_unpacker
*
mpac
)
;
MSGPACK_DLLEXPORT
msgpack_unpacker
*
msgpack_unpacker_new
(
size_t
initial_buffer_size
)
;
MSGPACK_DLLEXPORT
void
msgpack_unpacker_free
(
msgpack_unpacker
*
mpac
)
;
#
ifndef
MSGPACK_UNPACKER_RESERVE_SIZE
#
define
MSGPACK_UNPACKER_RESERVE_SIZE
(
32
*
1024
)
#
endif
static
inline
bool
msgpack_unpacker_reserve_buffer
(
msgpack_unpacker
*
mpac
size_t
size
)
;
static
inline
char
*
msgpack_unpacker_buffer
(
msgpack_unpacker
*
mpac
)
;
static
inline
size_t
msgpack_unpacker_buffer_capacity
(
const
msgpack_unpacker
*
mpac
)
;
static
inline
void
msgpack_unpacker_buffer_consumed
(
msgpack_unpacker
*
mpac
size_t
size
)
;
MSGPACK_DLLEXPORT
msgpack_unpack_return
msgpack_unpacker_next
(
msgpack_unpacker
*
mpac
msgpack_unpacked
*
pac
)
;
MSGPACK_DLLEXPORT
msgpack_unpack_return
msgpack_unpacker_next_with_size
(
msgpack_unpacker
*
mpac
msgpack_unpacked
*
result
size_t
*
p_bytes
)
;
static
inline
void
msgpack_unpacked_init
(
msgpack_unpacked
*
result
)
;
static
inline
void
msgpack_unpacked_destroy
(
msgpack_unpacked
*
result
)
;
static
inline
msgpack_zone
*
msgpack_unpacked_release_zone
(
msgpack_unpacked
*
result
)
;
MSGPACK_DLLEXPORT
int
msgpack_unpacker_execute
(
msgpack_unpacker
*
mpac
)
;
MSGPACK_DLLEXPORT
msgpack_object
msgpack_unpacker_data
(
msgpack_unpacker
*
mpac
)
;
MSGPACK_DLLEXPORT
msgpack_zone
*
msgpack_unpacker_release_zone
(
msgpack_unpacker
*
mpac
)
;
MSGPACK_DLLEXPORT
void
msgpack_unpacker_reset_zone
(
msgpack_unpacker
*
mpac
)
;
MSGPACK_DLLEXPORT
void
msgpack_unpacker_reset
(
msgpack_unpacker
*
mpac
)
;
static
inline
size_t
msgpack_unpacker_message_size
(
const
msgpack_unpacker
*
mpac
)
;
MSGPACK_DLLEXPORT
msgpack_unpack_return
msgpack_unpack
(
const
char
*
data
size_t
len
size_t
*
off
msgpack_zone
*
result_zone
msgpack_object
*
result
)
;
static
inline
size_t
msgpack_unpacker_parsed_size
(
const
msgpack_unpacker
*
mpac
)
;
MSGPACK_DLLEXPORT
bool
msgpack_unpacker_flush_zone
(
msgpack_unpacker
*
mpac
)
;
MSGPACK_DLLEXPORT
bool
msgpack_unpacker_expand_buffer
(
msgpack_unpacker
*
mpac
size_t
size
)
;
static
inline
bool
msgpack_unpacker_reserve_buffer
(
msgpack_unpacker
*
mpac
size_t
size
)
{
if
(
mpac
-
>
free
>
=
size
)
{
return
true
;
}
return
msgpack_unpacker_expand_buffer
(
mpac
size
)
;
}
static
inline
char
*
msgpack_unpacker_buffer
(
msgpack_unpacker
*
mpac
)
{
return
mpac
-
>
buffer
+
mpac
-
>
used
;
}
static
inline
size_t
msgpack_unpacker_buffer_capacity
(
const
msgpack_unpacker
*
mpac
)
{
return
mpac
-
>
free
;
}
static
inline
void
msgpack_unpacker_buffer_consumed
(
msgpack_unpacker
*
mpac
size_t
size
)
{
mpac
-
>
used
+
=
size
;
mpac
-
>
free
-
=
size
;
}
static
inline
size_t
msgpack_unpacker_message_size
(
const
msgpack_unpacker
*
mpac
)
{
return
mpac
-
>
parsed
-
mpac
-
>
off
+
mpac
-
>
used
;
}
static
inline
size_t
msgpack_unpacker_parsed_size
(
const
msgpack_unpacker
*
mpac
)
{
return
mpac
-
>
parsed
;
}
static
inline
void
msgpack_unpacked_init
(
msgpack_unpacked
*
result
)
{
memset
(
result
0
sizeof
(
msgpack_unpacked
)
)
;
}
static
inline
void
msgpack_unpacked_destroy
(
msgpack_unpacked
*
result
)
{
if
(
result
-
>
zone
!
=
NULL
)
{
msgpack_zone_free
(
result
-
>
zone
)
;
result
-
>
zone
=
NULL
;
memset
(
&
result
-
>
data
0
sizeof
(
msgpack_object
)
)
;
}
}
static
inline
msgpack_zone
*
msgpack_unpacked_release_zone
(
msgpack_unpacked
*
result
)
{
if
(
result
-
>
zone
!
=
NULL
)
{
msgpack_zone
*
z
=
result
-
>
zone
;
result
-
>
zone
=
NULL
;
return
z
;
}
return
NULL
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
