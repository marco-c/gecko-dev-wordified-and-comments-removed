#
ifndef
MSGPACK_V1_OBJECT_FWD_DECL_HPP
#
define
MSGPACK_V1_OBJECT_FWD_DECL_HPP
#
include
"
msgpack
/
versioning
.
hpp
"
#
include
"
msgpack
/
zone
.
hpp
"
#
include
"
msgpack
/
object
.
h
"
#
include
<
typeinfo
>
namespace
msgpack
{
MSGPACK_API_VERSION_NAMESPACE
(
v1
)
{
namespace
type
{
enum
object_type
{
NIL
=
MSGPACK_OBJECT_NIL
BOOLEAN
=
MSGPACK_OBJECT_BOOLEAN
POSITIVE_INTEGER
=
MSGPACK_OBJECT_POSITIVE_INTEGER
NEGATIVE_INTEGER
=
MSGPACK_OBJECT_NEGATIVE_INTEGER
FLOAT32
=
MSGPACK_OBJECT_FLOAT32
FLOAT64
=
MSGPACK_OBJECT_FLOAT64
FLOAT
=
MSGPACK_OBJECT_FLOAT
#
if
defined
(
MSGPACK_USE_LEGACY_NAME_AS_FLOAT
)
DOUBLE
=
MSGPACK_DEPRECATED
(
"
please
use
FLOAT64
instead
"
)
MSGPACK_OBJECT_DOUBLE
#
endif
STR
=
MSGPACK_OBJECT_STR
BIN
=
MSGPACK_OBJECT_BIN
ARRAY
=
MSGPACK_OBJECT_ARRAY
MAP
=
MSGPACK_OBJECT_MAP
EXT
=
MSGPACK_OBJECT_EXT
}
;
}
struct
object
;
struct
object_kv
;
struct
object_array
;
struct
object_map
;
struct
object_str
;
struct
object_bin
;
struct
object_ext
;
#
if
!
defined
(
MSGPACK_USE_CPP03
)
namespace
adaptor
{
template
<
typename
T
typename
Enabler
=
void
>
struct
as
;
}
template
<
typename
T
>
struct
has_as
;
#
endif
class
type_error
;
}
}
#
endif
