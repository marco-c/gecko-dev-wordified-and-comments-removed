#
ifndef
MSGPACK_V1_CHECK_CONTAINER_SIZE_HPP
#
define
MSGPACK_V1_CHECK_CONTAINER_SIZE_HPP
#
include
"
msgpack
/
v1
/
adaptor
/
check_container_size_decl
.
hpp
"
#
include
<
stdexcept
>
namespace
msgpack
{
MSGPACK_API_VERSION_NAMESPACE
(
v1
)
{
struct
container_size_overflow
:
public
std
:
:
runtime_error
{
explicit
container_size_overflow
(
const
std
:
:
string
&
msg
)
:
std
:
:
runtime_error
(
msg
)
{
}
#
if
!
defined
(
MSGPACK_USE_CPP03
)
explicit
container_size_overflow
(
const
char
*
msg
)
:
std
:
:
runtime_error
(
msg
)
{
}
#
endif
}
;
namespace
detail
{
template
<
std
:
:
size_t
N
>
inline
void
check_container_size
(
std
:
:
size_t
size
)
{
if
(
size
>
0xffffffff
)
throw
container_size_overflow
(
"
container
size
overflow
"
)
;
}
template
<
>
inline
void
check_container_size
<
4
>
(
std
:
:
size_t
)
{
}
template
<
std
:
:
size_t
N
>
inline
void
check_container_size_for_ext
(
std
:
:
size_t
size
)
{
if
(
size
>
0xffffffff
)
throw
container_size_overflow
(
"
container
size
overflow
"
)
;
}
template
<
>
inline
void
check_container_size_for_ext
<
4
>
(
std
:
:
size_t
size
)
{
if
(
size
>
0xfffffffe
)
throw
container_size_overflow
(
"
container
size
overflow
"
)
;
}
}
template
<
typename
T
>
inline
uint32_t
checked_get_container_size
(
T
size
)
{
detail
:
:
check_container_size
<
sizeof
(
T
)
>
(
size
)
;
return
static_cast
<
uint32_t
>
(
size
)
;
}
}
}
#
endif
