#
ifndef
MSGPACK_V1_TYPE_BOOST_MSGPACK_VARIANT_DECL_HPP
#
define
MSGPACK_V1_TYPE_BOOST_MSGPACK_VARIANT_DECL_HPP
#
if
defined
(
MSGPACK_USE_BOOST
)
#
include
"
msgpack
/
versioning
.
hpp
"
#
include
"
msgpack
/
adaptor
/
adaptor_base
.
hpp
"
#
include
"
msgpack
/
adaptor
/
check_container_size
.
hpp
"
#
include
"
msgpack
/
adaptor
/
boost
/
string_ref
.
hpp
"
#
include
"
msgpack
/
adaptor
/
ext
.
hpp
"
#
include
"
msgpack
/
adaptor
/
raw
.
hpp
"
#
include
<
string
>
#
include
<
vector
>
namespace
msgpack
{
MSGPACK_API_VERSION_NAMESPACE
(
v1
)
{
namespace
type
{
template
<
typename
STR
typename
BIN
typename
EXT
>
struct
basic_variant
;
template
<
typename
STR
typename
BIN
typename
EXT
>
bool
operator
<
(
basic_variant
<
STR
BIN
EXT
>
const
&
lhs
basic_variant
<
STR
BIN
EXT
>
const
&
rhs
)
;
template
<
typename
STR
typename
BIN
typename
EXT
>
bool
operator
=
=
(
basic_variant
<
STR
BIN
EXT
>
const
&
lhs
basic_variant
<
STR
BIN
EXT
>
const
&
rhs
)
;
template
<
typename
STR
typename
BIN
typename
EXT
>
bool
operator
!
=
(
basic_variant
<
STR
BIN
EXT
>
const
&
lhs
basic_variant
<
STR
BIN
EXT
>
const
&
rhs
)
;
typedef
basic_variant
<
std
:
:
string
std
:
:
vector
<
char
>
msgpack
:
:
type
:
:
ext
>
variant
;
typedef
basic_variant
<
#
if
(
BOOST_VERSION
/
100000
)
>
=
1
&
&
(
(
BOOST_VERSION
/
100
)
%
1000
)
>
=
53
boost
:
:
string_ref
#
else
std
:
:
string
#
endif
msgpack
:
:
type
:
:
raw_ref
msgpack
:
:
type
:
:
ext_ref
>
variant_ref
;
}
}
}
#
endif
#
endif
