#
ifndef
MSGPACK_TYPE_TR1_UNORDERED_MAP_HPP
#
define
MSGPACK_TYPE_TR1_UNORDERED_MAP_HPP
#
include
"
msgpack
/
versioning
.
hpp
"
#
include
"
msgpack
/
adaptor
/
adaptor_base
.
hpp
"
#
include
"
msgpack
/
adaptor
/
check_container_size
.
hpp
"
#
if
defined
(
_LIBCPP_VERSION
)
|
|
(
_MSC_VER
>
=
1700
)
#
define
MSGPACK_HAS_STD_UNORDERED_MAP
#
include
<
unordered_map
>
#
define
MSGPACK_STD_TR1
std
#
else
#
if
__GNUC__
>
=
4
#
define
MSGPACK_HAS_STD_TR1_UNORDERED_MAP
#
include
<
tr1
/
unordered_map
>
#
define
MSGPACK_STD_TR1
std
:
:
tr1
#
endif
#
endif
#
if
defined
(
MSGPACK_STD_TR1
)
namespace
msgpack
{
MSGPACK_API_VERSION_NAMESPACE
(
v1
)
{
namespace
adaptor
{
template
<
typename
K
typename
V
typename
Hash
typename
Pred
typename
Alloc
>
struct
convert
<
MSGPACK_STD_TR1
:
:
unordered_map
<
K
V
Hash
Pred
Alloc
>
>
{
msgpack
:
:
object
const
&
operator
(
)
(
msgpack
:
:
object
const
&
o
MSGPACK_STD_TR1
:
:
unordered_map
<
K
V
Hash
Pred
Alloc
>
&
v
)
const
{
if
(
o
.
type
!
=
msgpack
:
:
type
:
:
MAP
)
{
throw
msgpack
:
:
type_error
(
)
;
}
msgpack
:
:
object_kv
*
p
(
o
.
via
.
map
.
ptr
)
;
msgpack
:
:
object_kv
*
const
pend
(
o
.
via
.
map
.
ptr
+
o
.
via
.
map
.
size
)
;
MSGPACK_STD_TR1
:
:
unordered_map
<
K
V
Hash
Pred
Alloc
>
tmp
;
for
(
;
p
!
=
pend
;
+
+
p
)
{
K
key
;
p
-
>
key
.
convert
(
key
)
;
p
-
>
val
.
convert
(
tmp
[
key
]
)
;
}
tmp
.
swap
(
v
)
;
return
o
;
}
}
;
template
<
typename
K
typename
V
typename
Hash
typename
Pred
typename
Alloc
>
struct
pack
<
MSGPACK_STD_TR1
:
:
unordered_map
<
K
V
Hash
Pred
Alloc
>
>
{
template
<
typename
Stream
>
msgpack
:
:
packer
<
Stream
>
&
operator
(
)
(
msgpack
:
:
packer
<
Stream
>
&
o
const
MSGPACK_STD_TR1
:
:
unordered_map
<
K
V
Hash
Pred
Alloc
>
&
v
)
const
{
uint32_t
size
=
checked_get_container_size
(
v
.
size
(
)
)
;
o
.
pack_map
(
size
)
;
for
(
typename
MSGPACK_STD_TR1
:
:
unordered_map
<
K
V
Hash
Pred
Alloc
>
:
:
const_iterator
it
(
v
.
begin
(
)
)
it_end
(
v
.
end
(
)
)
;
it
!
=
it_end
;
+
+
it
)
{
o
.
pack
(
it
-
>
first
)
;
o
.
pack
(
it
-
>
second
)
;
}
return
o
;
}
}
;
template
<
typename
K
typename
V
typename
Hash
typename
Pred
typename
Alloc
>
struct
object_with_zone
<
MSGPACK_STD_TR1
:
:
unordered_map
<
K
V
Hash
Pred
Alloc
>
>
{
void
operator
(
)
(
msgpack
:
:
object
:
:
with_zone
&
o
const
MSGPACK_STD_TR1
:
:
unordered_map
<
K
V
Hash
Pred
Alloc
>
&
v
)
const
{
o
.
type
=
msgpack
:
:
type
:
:
MAP
;
if
(
v
.
empty
(
)
)
{
o
.
via
.
map
.
ptr
=
MSGPACK_NULLPTR
;
o
.
via
.
map
.
size
=
0
;
}
else
{
uint32_t
size
=
checked_get_container_size
(
v
.
size
(
)
)
;
msgpack
:
:
object_kv
*
p
=
static_cast
<
msgpack
:
:
object_kv
*
>
(
o
.
zone
.
allocate_align
(
sizeof
(
msgpack
:
:
object_kv
)
*
size
MSGPACK_ZONE_ALIGNOF
(
msgpack
:
:
object_kv
)
)
)
;
msgpack
:
:
object_kv
*
const
pend
=
p
+
size
;
o
.
via
.
map
.
ptr
=
p
;
o
.
via
.
map
.
size
=
size
;
typename
MSGPACK_STD_TR1
:
:
unordered_map
<
K
V
Hash
Pred
Alloc
>
:
:
const_iterator
it
(
v
.
begin
(
)
)
;
do
{
p
-
>
key
=
msgpack
:
:
object
(
it
-
>
first
o
.
zone
)
;
p
-
>
val
=
msgpack
:
:
object
(
it
-
>
second
o
.
zone
)
;
+
+
p
;
+
+
it
;
}
while
(
p
<
pend
)
;
}
}
}
;
template
<
typename
K
typename
V
typename
Hash
typename
Pred
typename
Alloc
>
struct
convert
<
MSGPACK_STD_TR1
:
:
unordered_multimap
<
K
V
Hash
Pred
Alloc
>
>
{
msgpack
:
:
object
const
&
operator
(
)
(
msgpack
:
:
object
const
&
o
MSGPACK_STD_TR1
:
:
unordered_multimap
<
K
V
Hash
Pred
Alloc
>
&
v
)
const
{
if
(
o
.
type
!
=
msgpack
:
:
type
:
:
MAP
)
{
throw
msgpack
:
:
type_error
(
)
;
}
msgpack
:
:
object_kv
*
p
(
o
.
via
.
map
.
ptr
)
;
msgpack
:
:
object_kv
*
const
pend
(
o
.
via
.
map
.
ptr
+
o
.
via
.
map
.
size
)
;
MSGPACK_STD_TR1
:
:
unordered_multimap
<
K
V
Hash
Pred
Alloc
>
tmp
;
for
(
;
p
!
=
pend
;
+
+
p
)
{
std
:
:
pair
<
K
V
>
value
;
p
-
>
key
.
convert
(
value
.
first
)
;
p
-
>
val
.
convert
(
value
.
second
)
;
tmp
.
insert
(
value
)
;
}
tmp
.
swap
(
v
)
;
return
o
;
}
}
;
template
<
typename
K
typename
V
typename
Hash
typename
Pred
typename
Alloc
>
struct
pack
<
MSGPACK_STD_TR1
:
:
unordered_multimap
<
K
V
Hash
Pred
Alloc
>
>
{
template
<
typename
Stream
>
msgpack
:
:
packer
<
Stream
>
&
operator
(
)
(
msgpack
:
:
packer
<
Stream
>
&
o
const
MSGPACK_STD_TR1
:
:
unordered_multimap
<
K
V
Hash
Pred
Alloc
>
&
v
)
const
{
uint32_t
size
=
checked_get_container_size
(
v
.
size
(
)
)
;
o
.
pack_map
(
size
)
;
for
(
typename
MSGPACK_STD_TR1
:
:
unordered_multimap
<
K
V
Hash
Pred
Alloc
>
:
:
const_iterator
it
(
v
.
begin
(
)
)
it_end
(
v
.
end
(
)
)
;
it
!
=
it_end
;
+
+
it
)
{
o
.
pack
(
it
-
>
first
)
;
o
.
pack
(
it
-
>
second
)
;
}
return
o
;
}
}
;
template
<
typename
K
typename
V
typename
Hash
typename
Pred
typename
Alloc
>
struct
object_with_zone
<
MSGPACK_STD_TR1
:
:
unordered_multimap
<
K
V
Hash
Pred
Alloc
>
>
{
void
operator
(
)
(
msgpack
:
:
object
:
:
with_zone
&
o
const
MSGPACK_STD_TR1
:
:
unordered_multimap
<
K
V
Hash
Pred
Alloc
>
&
v
)
const
{
o
.
type
=
msgpack
:
:
type
:
:
MAP
;
if
(
v
.
empty
(
)
)
{
o
.
via
.
map
.
ptr
=
MSGPACK_NULLPTR
;
o
.
via
.
map
.
size
=
0
;
}
else
{
uint32_t
size
=
checked_get_container_size
(
v
.
size
(
)
)
;
msgpack
:
:
object_kv
*
p
=
static_cast
<
msgpack
:
:
object_kv
*
>
(
o
.
zone
.
allocate_align
(
sizeof
(
msgpack
:
:
object_kv
)
*
size
MSGPACK_ZONE_ALIGNOF
(
msgpack
:
:
object_kv
)
)
)
;
msgpack
:
:
object_kv
*
const
pend
=
p
+
size
;
o
.
via
.
map
.
ptr
=
p
;
o
.
via
.
map
.
size
=
size
;
typename
MSGPACK_STD_TR1
:
:
unordered_multimap
<
K
V
Hash
Pred
Alloc
>
:
:
const_iterator
it
(
v
.
begin
(
)
)
;
do
{
p
-
>
key
=
msgpack
:
:
object
(
it
-
>
first
o
.
zone
)
;
p
-
>
val
=
msgpack
:
:
object
(
it
-
>
second
o
.
zone
)
;
+
+
p
;
+
+
it
;
}
while
(
p
<
pend
)
;
}
}
}
;
}
}
}
#
undef
MSGPACK_STD_TR1
#
endif
#
endif
