#
ifndef
MSGPACK_V3_X3_UNPACK_DECL_HPP
#
define
MSGPACK_V3_X3_UNPACK_DECL_HPP
#
if
defined
(
MSGPACK_USE_X3_PARSE
)
#
include
"
msgpack
/
v2
/
x3_unpack_decl
.
hpp
"
namespace
msgpack
{
MSGPACK_API_VERSION_NAMESPACE
(
v3
)
{
namespace
detail
{
using
v2
:
:
detail
:
:
unpack_imp
;
}
template
<
typename
Iterator
>
msgpack
:
:
object_handle
unpack
(
Iterator
&
&
begin
Iterator
&
&
end
bool
&
referenced
unpack_reference_func
f
=
MSGPACK_NULLPTR
void
*
user_data
=
MSGPACK_NULLPTR
unpack_limit
const
&
limit
=
unpack_limit
(
)
)
;
template
<
typename
Iterator
>
msgpack
:
:
object_handle
unpack
(
Iterator
&
&
begin
Iterator
&
&
end
unpack_reference_func
f
=
MSGPACK_NULLPTR
void
*
user_data
=
MSGPACK_NULLPTR
unpack_limit
const
&
limit
=
unpack_limit
(
)
)
;
template
<
typename
Iterator
>
msgpack
:
:
object
unpack
(
msgpack
:
:
zone
&
z
Iterator
&
&
begin
Iterator
&
&
end
bool
&
referenced
unpack_reference_func
f
=
MSGPACK_NULLPTR
void
*
user_data
=
MSGPACK_NULLPTR
unpack_limit
const
&
limit
=
unpack_limit
(
)
)
;
template
<
typename
Iterator
>
msgpack
:
:
object
unpack
(
msgpack
:
:
zone
&
z
Iterator
&
&
begin
Iterator
&
&
end
unpack_reference_func
f
=
MSGPACK_NULLPTR
void
*
user_data
=
MSGPACK_NULLPTR
unpack_limit
const
&
limit
=
unpack_limit
(
)
)
;
}
}
#
endif
#
endif
