#
ifndef
MSGPACK_PREDEF_ENDIAN_H
#
define
MSGPACK_PREDEF_ENDIAN_H
#
include
<
msgpack
/
predef
/
version_number
.
h
>
#
include
<
msgpack
/
predef
/
make
.
h
>
#
include
<
msgpack
/
predef
/
library
/
c
/
gnu
.
h
>
#
include
<
msgpack
/
predef
/
os
/
macos
.
h
>
#
include
<
msgpack
/
predef
/
os
/
bsd
.
h
>
#
include
<
msgpack
/
predef
/
os
/
android
.
h
>
#
define
MSGPACK_ENDIAN_BIG_BYTE
MSGPACK_VERSION_NUMBER_NOT_AVAILABLE
#
define
MSGPACK_ENDIAN_BIG_WORD
MSGPACK_VERSION_NUMBER_NOT_AVAILABLE
#
define
MSGPACK_ENDIAN_LITTLE_BYTE
MSGPACK_VERSION_NUMBER_NOT_AVAILABLE
#
define
MSGPACK_ENDIAN_LITTLE_WORD
MSGPACK_VERSION_NUMBER_NOT_AVAILABLE
#
if
!
MSGPACK_ENDIAN_BIG_BYTE
&
&
!
MSGPACK_ENDIAN_BIG_WORD
&
&
\
!
MSGPACK_ENDIAN_LITTLE_BYTE
&
&
!
MSGPACK_ENDIAN_LITTLE_WORD
#
if
MSGPACK_LIB_C_GNU
|
|
MSGPACK_OS_ANDROID
#
include
<
endian
.
h
>
#
else
#
if
MSGPACK_OS_MACOS
#
include
<
machine
/
endian
.
h
>
#
else
#
if
MSGPACK_OS_BSD
#
if
MSGPACK_OS_BSD_OPEN
#
include
<
machine
/
endian
.
h
>
#
else
#
include
<
sys
/
endian
.
h
>
#
endif
#
endif
#
endif
#
endif
#
if
defined
(
__BYTE_ORDER
)
#
if
defined
(
__BIG_ENDIAN
)
&
&
(
__BYTE_ORDER
=
=
__BIG_ENDIAN
)
#
undef
MSGPACK_ENDIAN_BIG_BYTE
#
define
MSGPACK_ENDIAN_BIG_BYTE
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
if
defined
(
__LITTLE_ENDIAN
)
&
&
(
__BYTE_ORDER
=
=
__LITTLE_ENDIAN
)
#
undef
MSGPACK_ENDIAN_LITTLE_BYTE
#
define
MSGPACK_ENDIAN_LITTLE_BYTE
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
if
defined
(
__PDP_ENDIAN
)
&
&
(
__BYTE_ORDER
=
=
__PDP_ENDIAN
)
#
undef
MSGPACK_ENDIAN_LITTLE_WORD
#
define
MSGPACK_ENDIAN_LITTLE_WORD
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
endif
#
if
!
defined
(
__BYTE_ORDER
)
&
&
defined
(
_BYTE_ORDER
)
#
if
defined
(
_BIG_ENDIAN
)
&
&
(
_BYTE_ORDER
=
=
_BIG_ENDIAN
)
#
undef
MSGPACK_ENDIAN_BIG_BYTE
#
define
MSGPACK_ENDIAN_BIG_BYTE
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
if
defined
(
_LITTLE_ENDIAN
)
&
&
(
_BYTE_ORDER
=
=
_LITTLE_ENDIAN
)
#
undef
MSGPACK_ENDIAN_LITTLE_BYTE
#
define
MSGPACK_ENDIAN_LITTLE_BYTE
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
if
defined
(
_PDP_ENDIAN
)
&
&
(
_BYTE_ORDER
=
=
_PDP_ENDIAN
)
#
undef
MSGPACK_ENDIAN_LITTLE_WORD
#
define
MSGPACK_ENDIAN_LITTLE_WORD
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
endif
#
endif
#
if
!
MSGPACK_ENDIAN_BIG_BYTE
&
&
!
MSGPACK_ENDIAN_BIG_WORD
&
&
\
!
MSGPACK_ENDIAN_LITTLE_BYTE
&
&
!
MSGPACK_ENDIAN_LITTLE_WORD
#
if
(
defined
(
__BIG_ENDIAN__
)
&
&
!
defined
(
__LITTLE_ENDIAN__
)
)
|
|
\
(
defined
(
_BIG_ENDIAN
)
&
&
!
defined
(
_LITTLE_ENDIAN
)
)
|
|
\
defined
(
__ARMEB__
)
|
|
\
defined
(
__THUMBEB__
)
|
|
\
defined
(
__AARCH64EB__
)
|
|
\
defined
(
_MIPSEB
)
|
|
\
defined
(
__MIPSEB
)
|
|
\
defined
(
__MIPSEB__
)
#
undef
MSGPACK_ENDIAN_BIG_BYTE
#
define
MSGPACK_ENDIAN_BIG_BYTE
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
endif
#
if
!
MSGPACK_ENDIAN_BIG_BYTE
&
&
!
MSGPACK_ENDIAN_BIG_WORD
&
&
\
!
MSGPACK_ENDIAN_LITTLE_BYTE
&
&
!
MSGPACK_ENDIAN_LITTLE_WORD
#
if
(
defined
(
__LITTLE_ENDIAN__
)
&
&
!
defined
(
__BIG_ENDIAN__
)
)
|
|
\
(
defined
(
_LITTLE_ENDIAN
)
&
&
!
defined
(
_BIG_ENDIAN
)
)
|
|
\
defined
(
__ARMEL__
)
|
|
\
defined
(
__THUMBEL__
)
|
|
\
defined
(
__AARCH64EL__
)
|
|
\
defined
(
_MIPSEL
)
|
|
\
defined
(
__MIPSEL
)
|
|
\
defined
(
__MIPSEL__
)
#
undef
MSGPACK_ENDIAN_LITTLE_BYTE
#
define
MSGPACK_ENDIAN_LITTLE_BYTE
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
endif
#
if
!
MSGPACK_ENDIAN_BIG_BYTE
&
&
!
MSGPACK_ENDIAN_BIG_WORD
&
&
\
!
MSGPACK_ENDIAN_LITTLE_BYTE
&
&
!
MSGPACK_ENDIAN_LITTLE_WORD
#
include
<
msgpack
/
predef
/
architecture
.
h
>
#
if
MSGPACK_ARCH_M68K
|
|
\
MSGPACK_ARCH_PARISC
|
|
\
MSGPACK_ARCH_SPARC
|
|
\
MSGPACK_ARCH_SYS370
|
|
\
MSGPACK_ARCH_SYS390
|
|
\
MSGPACK_ARCH_Z
#
undef
MSGPACK_ENDIAN_BIG_BYTE
#
define
MSGPACK_ENDIAN_BIG_BYTE
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
if
MSGPACK_ARCH_AMD64
|
|
\
MSGPACK_ARCH_IA64
|
|
\
MSGPACK_ARCH_X86
|
|
\
MSGPACK_ARCH_BLACKFIN
#
undef
MSGPACK_ENDIAN_LITTLE_BYTE
#
define
MSGPACK_ENDIAN_LITTLE_BYTE
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
endif
#
if
!
MSGPACK_ENDIAN_BIG_BYTE
&
&
!
MSGPACK_ENDIAN_BIG_WORD
&
&
\
!
MSGPACK_ENDIAN_LITTLE_BYTE
&
&
!
MSGPACK_ENDIAN_LITTLE_WORD
#
if
MSGPACK_ARCH_ARM
#
include
<
msgpack
/
predef
/
os
/
windows
.
h
>
#
if
MSGPACK_OS_WINDOWS
#
undef
MSGPACK_ENDIAN_LITTLE_BYTE
#
define
MSGPACK_ENDIAN_LITTLE_BYTE
MSGPACK_VERSION_NUMBER_AVAILABLE
#
endif
#
endif
#
endif
#
if
MSGPACK_ENDIAN_BIG_BYTE
#
define
MSGPACK_ENDIAN_BIG_BYTE_AVAILABLE
#
endif
#
if
MSGPACK_ENDIAN_BIG_WORD
#
define
MSGPACK_ENDIAN_BIG_WORD_BYTE_AVAILABLE
#
endif
#
if
MSGPACK_ENDIAN_LITTLE_BYTE
#
define
MSGPACK_ENDIAN_LITTLE_BYTE_AVAILABLE
#
endif
#
if
MSGPACK_ENDIAN_LITTLE_WORD
#
define
MSGPACK_ENDIAN_LITTLE_WORD_BYTE_AVAILABLE
#
endif
#
define
MSGPACK_ENDIAN_BIG_BYTE_NAME
"
Byte
-
Swapped
Big
-
Endian
"
#
define
MSGPACK_ENDIAN_BIG_WORD_NAME
"
Word
-
Swapped
Big
-
Endian
"
#
define
MSGPACK_ENDIAN_LITTLE_BYTE_NAME
"
Byte
-
Swapped
Little
-
Endian
"
#
define
MSGPACK_ENDIAN_LITTLE_WORD_NAME
"
Word
-
Swapped
Little
-
Endian
"
#
endif
#
include
<
msgpack
/
predef
/
detail
/
test
.
h
>
MSGPACK_PREDEF_DECLARE_TEST
(
MSGPACK_ENDIAN_BIG_BYTE
MSGPACK_ENDIAN_BIG_BYTE_NAME
)
#
include
<
msgpack
/
predef
/
detail
/
test
.
h
>
MSGPACK_PREDEF_DECLARE_TEST
(
MSGPACK_ENDIAN_BIG_WORD
MSGPACK_ENDIAN_BIG_WORD_NAME
)
#
include
<
msgpack
/
predef
/
detail
/
test
.
h
>
MSGPACK_PREDEF_DECLARE_TEST
(
MSGPACK_ENDIAN_LITTLE_BYTE
MSGPACK_ENDIAN_LITTLE_BYTE_NAME
)
#
include
<
msgpack
/
predef
/
detail
/
test
.
h
>
MSGPACK_PREDEF_DECLARE_TEST
(
MSGPACK_ENDIAN_LITTLE_WORD
MSGPACK_ENDIAN_LITTLE_WORD_NAME
)
