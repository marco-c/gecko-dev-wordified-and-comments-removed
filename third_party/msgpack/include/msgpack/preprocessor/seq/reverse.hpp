#
#
#
#
#
ifndef
MSGPACK_PREPROCESSOR_SEQ_REVERSE_HPP
#
define
MSGPACK_PREPROCESSOR_SEQ_REVERSE_HPP
#
#
include
<
msgpack
/
preprocessor
/
config
/
config
.
hpp
>
#
include
<
msgpack
/
preprocessor
/
facilities
/
empty
.
hpp
>
#
include
<
msgpack
/
preprocessor
/
seq
/
fold_left
.
hpp
>
#
#
#
#
if
~
MSGPACK_PP_CONFIG_FLAGS
(
)
&
MSGPACK_PP_CONFIG_EDG
(
)
#
define
MSGPACK_PP_SEQ_REVERSE
(
seq
)
MSGPACK_PP_SEQ_FOLD_LEFT
(
MSGPACK_PP_SEQ_REVERSE_O
MSGPACK_PP_EMPTY
seq
)
(
)
#
else
#
define
MSGPACK_PP_SEQ_REVERSE
(
seq
)
MSGPACK_PP_SEQ_REVERSE_I
(
seq
)
#
define
MSGPACK_PP_SEQ_REVERSE_I
(
seq
)
MSGPACK_PP_SEQ_FOLD_LEFT
(
MSGPACK_PP_SEQ_REVERSE_O
MSGPACK_PP_EMPTY
seq
)
(
)
#
endif
#
#
define
MSGPACK_PP_SEQ_REVERSE_O
(
s
state
elem
)
(
elem
)
state
#
#
#
#
if
~
MSGPACK_PP_CONFIG_FLAGS
(
)
&
MSGPACK_PP_CONFIG_EDG
(
)
#
define
MSGPACK_PP_SEQ_REVERSE_S
(
s
seq
)
MSGPACK_PP_SEQ_FOLD_LEFT_
#
#
s
(
MSGPACK_PP_SEQ_REVERSE_O
MSGPACK_PP_EMPTY
seq
)
(
)
#
else
#
define
MSGPACK_PP_SEQ_REVERSE_S
(
s
seq
)
MSGPACK_PP_SEQ_REVERSE_S_I
(
s
seq
)
#
define
MSGPACK_PP_SEQ_REVERSE_S_I
(
s
seq
)
MSGPACK_PP_SEQ_FOLD_LEFT_
#
#
s
(
MSGPACK_PP_SEQ_REVERSE_O
MSGPACK_PP_EMPTY
seq
)
(
)
#
endif
#
#
endif
