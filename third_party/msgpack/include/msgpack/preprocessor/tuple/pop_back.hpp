#
#
#
#
#
ifndef
MSGPACK_PREPROCESSOR_TUPLE_POP_BACK_HPP
#
define
MSGPACK_PREPROCESSOR_TUPLE_POP_BACK_HPP
#
#
include
<
msgpack
/
preprocessor
/
config
/
config
.
hpp
>
#
#
if
MSGPACK_PP_VARIADICS
#
#
include
<
msgpack
/
preprocessor
/
array
/
pop_back
.
hpp
>
#
include
<
msgpack
/
preprocessor
/
array
/
to_tuple
.
hpp
>
#
include
<
msgpack
/
preprocessor
/
comparison
/
greater
.
hpp
>
#
include
<
msgpack
/
preprocessor
/
control
/
iif
.
hpp
>
#
include
<
msgpack
/
preprocessor
/
tuple
/
size
.
hpp
>
#
include
<
msgpack
/
preprocessor
/
tuple
/
to_array
.
hpp
>
#
#
#
#
define
MSGPACK_PP_TUPLE_POP_BACK
(
tuple
)
\
MSGPACK_PP_IIF
\
(
\
MSGPACK_PP_GREATER
(
MSGPACK_PP_TUPLE_SIZE
(
tuple
)
1
)
\
MSGPACK_PP_TUPLE_POP_BACK_EXEC
\
MSGPACK_PP_TUPLE_POP_BACK_RETURN
\
)
\
(
tuple
)
\
/
*
*
/
#
#
define
MSGPACK_PP_TUPLE_POP_BACK_EXEC
(
tuple
)
\
MSGPACK_PP_ARRAY_TO_TUPLE
(
MSGPACK_PP_ARRAY_POP_BACK
(
MSGPACK_PP_TUPLE_TO_ARRAY
(
tuple
)
)
)
\
/
*
*
/
#
#
define
MSGPACK_PP_TUPLE_POP_BACK_RETURN
(
tuple
)
tuple
#
#
#
#
define
MSGPACK_PP_TUPLE_POP_BACK_Z
(
z
tuple
)
\
MSGPACK_PP_IIF
\
(
\
MSGPACK_PP_GREATER
(
MSGPACK_PP_TUPLE_SIZE
(
tuple
)
1
)
\
MSGPACK_PP_TUPLE_POP_BACK_Z_EXEC
\
MSGPACK_PP_TUPLE_POP_BACK_Z_RETURN
\
)
\
(
z
tuple
)
\
/
*
*
/
#
#
define
MSGPACK_PP_TUPLE_POP_BACK_Z_EXEC
(
z
tuple
)
\
MSGPACK_PP_ARRAY_TO_TUPLE
(
MSGPACK_PP_ARRAY_POP_BACK_Z
(
z
MSGPACK_PP_TUPLE_TO_ARRAY
(
tuple
)
)
)
\
/
*
*
/
#
#
define
MSGPACK_PP_TUPLE_POP_BACK_Z_RETURN
(
z
tuple
)
tuple
#
#
endif
#
#
endif
