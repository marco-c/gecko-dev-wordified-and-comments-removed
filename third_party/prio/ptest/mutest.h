#
include
<
stdio
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
enum
{
MU_QUIET
=
0
MU_ERROR
MU_SUMMARY
MU_SUITE
MU_CASE
MU_CHECK
}
;
#
define
mu_print
(
level
.
.
.
)
\
do
{
\
if
(
mutest_verbose_level
>
=
level
)
{
\
if
(
mutest_verbose_level
=
=
MU_ERROR
)
\
fprintf
(
stderr
__VA_ARGS__
)
;
\
else
\
fprintf
(
stdout
__VA_ARGS__
)
;
\
}
\
}
while
(
0
)
#
define
mu_printerr
(
name
action
)
\
mu_print
(
MU_ERROR
__FILE__
"
:
%
d
:
"
name
"
failed
"
\
action
"
test
case
\
n
"
__LINE__
)
;
#
define
mutest_count_err
+
+
mutest_failed_checks
;
mutest_case_failed
=
1
;
#
define
mutest_count_suc
+
+
mutest_passed_checks
;
#
ifdef
__cplusplus
#
include
<
exception
>
#
define
mu_printex
(
name
action
ex
)
\
mu_print
(
MU_ERROR
__FILE__
"
:
%
d
:
"
name
"
failed
"
\
"
exception
thrown
(
%
s
)
"
action
\
"
test
case
\
n
"
__LINE__
ex
)
;
#
define
mutest_try
try
{
#
define
mutest_catch
(
name
action
final
)
\
}
catch
(
const
std
:
:
exception
&
e
)
{
\
mutest_count_err
\
mu_printex
(
name
action
e
.
what
(
)
)
;
\
final
;
\
}
catch
(
.
.
.
)
{
\
mutest_count_err
\
mu_printex
(
name
action
"
[
unknown
]
"
)
;
\
final
;
\
}
#
else
#
define
mutest_try
#
define
mutest_catch
(
name
action
exp
)
#
endif
#
define
mu_check_base
(
exp
name
action
final
)
\
do
{
\
mu_print
(
MU_CHECK
"
\
t
\
t
*
Checking
"
name
"
(
"
#
exp
"
)
.
.
.
\
n
"
)
;
\
mutest_try
\
if
(
exp
)
mutest_count_suc
\
else
{
\
mutest_count_err
\
mu_printerr
(
name
"
(
"
#
exp
"
)
"
action
)
;
\
final
;
\
}
\
mutest_catch
(
name
action
final
)
\
}
while
(
0
)
#
define
mu_check
(
exp
)
mu_check_base
(
exp
"
mu_check
"
"
resuming
"
continue
)
#
define
mu_ensure
(
exp
)
mu_check_base
(
exp
"
mu_ensure
"
"
aborting
"
return
)
#
ifdef
__cplusplus
#
define
mu_echeck_base
(
ex
exp
name
action
final
)
\
do
{
\
mu_print
(
MU_CHECK
"
\
t
\
t
*
Checking
"
name
"
(
"
#
ex
"
"
#
exp
\
"
)
.
.
.
\
n
"
)
;
\
try
{
\
exp
;
\
mutest_count_err
\
mu_printerr
(
name
"
(
"
#
ex
"
"
#
exp
"
)
"
\
"
no
exception
thrown
"
action
)
;
\
final
;
\
}
catch
(
const
ex
&
e
)
{
\
mutest_count_suc
\
}
catch
(
const
std
:
:
exception
&
e
)
{
\
mutest_count_err
\
mu_printex
(
name
"
(
"
#
ex
"
"
#
exp
"
)
"
action
\
e
.
what
(
)
)
;
\
final
;
\
}
catch
(
.
.
.
)
{
\
mutest_count_err
\
mu_printex
(
name
"
(
"
#
ex
"
"
#
exp
"
)
"
action
\
"
[
unknown
]
"
)
;
\
final
;
\
}
\
}
while
(
0
)
#
define
mu_echeck
(
ex
exp
)
\
mu_echeck_base
(
ex
exp
"
mu_echeck
"
"
resuming
"
continue
)
#
define
mu_eensure
(
ex
exp
)
\
mu_echeck_base
(
ex
exp
"
mu_eensure
"
"
aborting
"
return
)
#
endif
#
ifndef
MUTEST_PY
void
mu_run_suites
(
)
;
#
ifndef
mu_run_init
#
define
mu_run_init
(
name
)
\
{
\
int
name
(
)
;
\
int
r
;
\
mu_print
(
MU_CASE
"
\
t
+
Executing
initialization
function
"
\
"
'
"
#
name
"
'
.
.
.
\
n
"
)
;
\
if
(
(
r
=
name
(
)
)
)
{
\
mu_print
(
MU_ERROR
"
%
s
:
"
#
name
"
:
initialization
"
\
"
function
failed
(
returned
%
d
)
"
\
"
skipping
test
suite
.
.
.
\
n
"
\
mutest_suite_name
r
)
;
\
+
+
mutest_skipped_suites
;
\
break
;
\
}
\
}
do
{
}
while
(
0
)
#
endif
#
ifndef
mu_run_case
#
define
mu_run_case
(
name
)
\
do
{
\
mu_print
(
MU_CASE
"
\
t
*
Executing
test
case
'
"
#
name
"
'
.
.
.
\
n
"
)
;
\
mutest_case_name
=
#
name
;
\
void
name
(
)
;
\
name
(
)
;
\
if
(
mutest_case_failed
)
{
\
+
+
mutest_failed_cases
;
\
mutest_suite_failed
=
1
;
\
}
else
+
+
mutest_passed_cases
;
\
mutest_case_failed
=
0
;
\
}
while
(
0
)
#
endif
#
ifndef
mu_run_term
#
define
mu_run_term
(
name
)
\
do
{
\
mu_print
(
MU_CASE
"
\
t
-
Executing
termination
function
'
"
\
#
name
"
'
.
.
.
\
n
"
)
;
\
void
name
(
)
;
\
name
(
)
;
\
}
while
(
0
)
#
endif
extern
const
char
*
mutest_suite_name
;
extern
int
mutest_failed_suites
;
extern
int
mutest_passed_suites
;
extern
int
mutest_skipped_suites
;
extern
int
mutest_suite_failed
;
extern
const
char
*
mutest_case_name
;
extern
int
mutest_failed_cases
;
extern
int
mutest_passed_cases
;
extern
int
mutest_case_failed
;
extern
int
mutest_failed_checks
;
extern
int
mutest_passed_checks
;
extern
int
mutest_verbose_level
;
#
else
int
mutest_api_version
=
1
;
int
mutest_case_failed
;
int
mutest_passed_checks
;
int
mutest_failed_checks
;
void
mutest_reset_counters
(
)
{
mutest_passed_checks
=
0
;
mutest_failed_checks
=
0
;
}
int
mutest_verbose_level
=
MU_ERROR
;
void
mutest_set_verbose_level
(
int
val
)
{
mutest_verbose_level
=
val
;
}
#
endif
#
ifdef
__cplusplus
}
#
endif
