#
ifndef
CONTENT_ANALYSIS_COMMON_UTILS_WIN_H_
#
define
CONTENT_ANALYSIS_COMMON_UTILS_WIN_H_
#
include
<
string
>
namespace
content_analysis
{
namespace
sdk
{
namespace
internal
{
const
DWORD
kBufferSize
=
4096
;
constexpr
char
kPipePrefixForAgent
[
]
=
R
"
(
\
\
.
\
\
pipe
\
)
"
;
constexpr
char
kPipePrefixForClient
[
]
=
R
"
(
\
Device
\
NamedPipe
\
)
"
;
std
:
:
string
GetUserSID
(
)
;
std
:
:
string
GetPipeNameForAgent
(
const
std
:
:
string
&
base
bool
user_specific
)
;
std
:
:
string
GetPipeNameForClient
(
const
std
:
:
string
&
base
bool
user_specific
)
;
DWORD
CreatePipe
(
const
std
:
:
string
&
name
bool
user_specific
bool
is_first_pipe
HANDLE
*
handle
)
;
bool
GetProcessPath
(
unsigned
long
pid
std
:
:
string
*
binary_path
)
;
class
ScopedOverlapped
{
public
:
ScopedOverlapped
(
)
;
~
ScopedOverlapped
(
)
;
bool
is_valid
(
)
{
return
overlapped_
.
hEvent
!
=
nullptr
;
}
operator
OVERLAPPED
*
(
)
{
return
&
overlapped_
;
}
private
:
OVERLAPPED
overlapped_
;
}
;
}
}
}
#
endif
