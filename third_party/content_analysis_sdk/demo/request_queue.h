#
ifndef
CONTENT_ANALYSIS_DEMO_REQUST_QUEUE_H_
#
define
CONTENT_ANALYSIS_DEMO_REQUST_QUEUE_H_
#
include
<
condition_variable
>
#
include
<
memory
>
#
include
<
mutex
>
#
include
<
queue
>
#
include
"
content_analysis
/
sdk
/
analysis_agent
.
h
"
class
RequestQueue
{
public
:
using
Event
=
content_analysis
:
:
sdk
:
:
ContentAnalysisEvent
;
RequestQueue
(
)
=
default
;
virtual
~
RequestQueue
(
)
=
default
;
void
push
(
std
:
:
unique_ptr
<
Event
>
event
)
{
std
:
:
lock_guard
<
std
:
:
mutex
>
lock
(
mutex_
)
;
events_
.
push
(
std
:
:
move
(
event
)
)
;
cv_
.
notify_one
(
)
;
}
std
:
:
unique_ptr
<
Event
>
pop
(
)
{
std
:
:
unique_lock
<
std
:
:
mutex
>
lock
(
mutex_
)
;
while
(
!
abort_
&
&
events_
.
size
(
)
=
=
0
)
cv_
.
wait
(
lock
)
;
std
:
:
unique_ptr
<
Event
>
event
;
if
(
!
abort_
)
{
event
=
std
:
:
move
(
events_
.
front
(
)
)
;
events_
.
pop
(
)
;
}
return
event
;
}
void
abort
(
)
{
std
:
:
lock_guard
<
std
:
:
mutex
>
lg
(
mutex_
)
;
abort_
=
true
;
cv_
.
notify_all
(
)
;
}
private
:
std
:
:
queue
<
std
:
:
unique_ptr
<
Event
>
>
events_
;
std
:
:
mutex
mutex_
;
std
:
:
condition_variable
cv_
;
bool
abort_
=
false
;
}
;
#
endif
