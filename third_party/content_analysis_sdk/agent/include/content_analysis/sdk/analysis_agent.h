#
ifndef
CONTENT_ANALYSIS_AGENT_INCLUDE_CONTENT_ANALYSIS_SDK_ANALYSIS_AGENT_H_
#
define
CONTENT_ANALYSIS_AGENT_INCLUDE_CONTENT_ANALYSIS_SDK_ANALYSIS_AGENT_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
content_analysis
/
sdk
/
analysis
.
pb
.
h
"
#
include
"
content_analysis
/
sdk
/
result_codes
.
h
"
namespace
content_analysis
{
namespace
sdk
{
struct
BrowserInfo
{
unsigned
long
pid
=
0
;
std
:
:
string
binary_path
;
}
;
class
ContentAnalysisEvent
{
public
:
virtual
~
ContentAnalysisEvent
(
)
=
default
;
virtual
ResultCode
Close
(
)
=
0
;
virtual
const
BrowserInfo
&
GetBrowserInfo
(
)
const
=
0
;
virtual
const
ContentAnalysisRequest
&
GetRequest
(
)
const
=
0
;
virtual
ContentAnalysisResponse
&
GetResponse
(
)
=
0
;
virtual
ResultCode
Send
(
)
=
0
;
virtual
std
:
:
string
DebugString
(
)
const
=
0
;
protected
:
ContentAnalysisEvent
(
)
=
default
;
ContentAnalysisEvent
(
const
ContentAnalysisEvent
&
rhs
)
=
delete
;
ContentAnalysisEvent
(
ContentAnalysisEvent
&
&
rhs
)
=
delete
;
ContentAnalysisEvent
&
operator
=
(
const
ContentAnalysisEvent
&
rhs
)
=
delete
;
ContentAnalysisEvent
&
operator
=
(
ContentAnalysisEvent
&
&
rhs
)
=
delete
;
}
;
class
AgentEventHandler
{
public
:
AgentEventHandler
(
)
=
default
;
virtual
~
AgentEventHandler
(
)
=
default
;
virtual
void
OnBrowserConnected
(
const
BrowserInfo
&
info
)
{
}
virtual
void
OnBrowserDisconnected
(
const
BrowserInfo
&
info
)
{
}
virtual
void
OnAnalysisRequested
(
std
:
:
unique_ptr
<
ContentAnalysisEvent
>
event
)
=
0
;
virtual
void
OnResponseAcknowledged
(
const
ContentAnalysisAcknowledgement
&
ack
)
{
}
virtual
void
OnCancelRequests
(
const
ContentAnalysisCancelRequests
&
cancel
)
{
}
virtual
void
OnInternalError
(
const
char
*
context
ResultCode
error
)
{
}
}
;
class
Agent
{
public
:
struct
Config
{
std
:
:
string
name
;
bool
user_specific
=
false
;
}
;
static
std
:
:
unique_ptr
<
Agent
>
Create
(
Config
config
std
:
:
unique_ptr
<
AgentEventHandler
>
handler
ResultCode
*
rc
)
;
virtual
~
Agent
(
)
=
default
;
virtual
const
Config
&
GetConfig
(
)
const
=
0
;
virtual
ResultCode
HandleEvents
(
)
=
0
;
virtual
ResultCode
Stop
(
)
=
0
;
virtual
std
:
:
string
DebugString
(
)
const
=
0
;
protected
:
Agent
(
)
=
default
;
Agent
(
const
Agent
&
rhs
)
=
delete
;
Agent
(
Agent
&
&
rhs
)
=
delete
;
Agent
&
operator
=
(
const
Agent
&
rhs
)
=
delete
;
Agent
&
operator
=
(
Agent
&
&
rhs
)
=
delete
;
}
;
ResultCode
UpdateResponse
(
ContentAnalysisResponse
&
response
const
std
:
:
string
&
tag
ContentAnalysisResponse
:
:
Result
:
:
Status
status
)
;
ResultCode
SetEventVerdictTo
(
ContentAnalysisEvent
*
event
ContentAnalysisResponse
:
:
Result
:
:
TriggeredRule
:
:
Action
action
)
;
ResultCode
SetEventVerdictToBlock
(
ContentAnalysisEvent
*
event
)
;
class
ScopedPrintHandle
{
public
:
virtual
~
ScopedPrintHandle
(
)
=
default
;
virtual
const
char
*
data
(
)
=
0
;
virtual
size_t
size
(
)
=
0
;
protected
:
ScopedPrintHandle
(
)
=
default
;
ScopedPrintHandle
(
const
ScopedPrintHandle
&
)
=
delete
;
ScopedPrintHandle
&
operator
=
(
const
ScopedPrintHandle
&
)
=
delete
;
ScopedPrintHandle
(
ScopedPrintHandle
&
&
)
=
default
;
ScopedPrintHandle
&
operator
=
(
ScopedPrintHandle
&
&
)
=
default
;
}
;
std
:
:
unique_ptr
<
ScopedPrintHandle
>
CreateScopedPrintHandle
(
const
ContentAnalysisRequest
&
request
int64_t
browser_pid
)
;
}
}
#
endif
