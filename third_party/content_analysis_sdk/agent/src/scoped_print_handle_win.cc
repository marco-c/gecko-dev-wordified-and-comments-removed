#
include
"
scoped_print_handle_win
.
h
"
namespace
content_analysis
{
namespace
sdk
{
std
:
:
unique_ptr
<
ScopedPrintHandle
>
CreateScopedPrintHandle
(
const
ContentAnalysisRequest
&
request
int64_t
browser_pid
)
{
if
(
!
request
.
has_print_data
(
)
|
|
!
request
.
print_data
(
)
.
has_handle
(
)
)
{
return
nullptr
;
}
HANDLE
browser_process
=
OpenProcess
(
PROCESS_DUP_HANDLE
false
browser_pid
)
;
if
(
!
browser_process
)
return
nullptr
;
HANDLE
dupe
=
nullptr
;
DuplicateHandle
(
browser_process
reinterpret_cast
<
HANDLE
>
(
request
.
print_data
(
)
.
handle
(
)
)
GetCurrentProcess
(
)
&
dupe
PROCESS_DUP_HANDLE
|
FILE_MAP_READ
false
0
)
;
CloseHandle
(
browser_process
)
;
if
(
!
dupe
)
return
nullptr
;
ContentAnalysisRequest
:
:
PrintData
dupe_print_data
;
dupe_print_data
.
set_handle
(
reinterpret_cast
<
int64_t
>
(
dupe
)
)
;
dupe_print_data
.
set_size
(
request
.
print_data
(
)
.
size
(
)
)
;
return
std
:
:
make_unique
<
ScopedPrintHandleWin
>
(
dupe_print_data
)
;
}
ScopedPrintHandleWin
:
:
ScopedPrintHandleWin
(
const
ContentAnalysisRequest
:
:
PrintData
&
print_data
)
:
ScopedPrintHandleBase
(
print_data
)
handle_
(
reinterpret_cast
<
HANDLE
>
(
print_data
.
handle
(
)
)
)
{
mapped_
=
MapViewOfFile
(
handle_
FILE_MAP_READ
0
0
0
)
;
}
ScopedPrintHandleWin
:
:
~
ScopedPrintHandleWin
(
)
{
CloseHandle
(
handle_
)
;
}
const
char
*
ScopedPrintHandleWin
:
:
data
(
)
{
return
reinterpret_cast
<
const
char
*
>
(
mapped_
)
;
}
}
}
