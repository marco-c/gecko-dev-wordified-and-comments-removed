#
ifndef
HIGHWAY_HWY_CONTRIB_SORT_VQSORT_H_
#
define
HIGHWAY_HWY_CONTRIB_SORT_VQSORT_H_
#
include
"
hwy
/
base
.
h
"
namespace
hwy
{
struct
SortAscending
{
constexpr
bool
IsAscending
(
)
const
{
return
true
;
}
}
;
struct
SortDescending
{
constexpr
bool
IsAscending
(
)
const
{
return
false
;
}
}
;
class
HWY_CONTRIB_DLLEXPORT
Sorter
{
public
:
Sorter
(
)
;
~
Sorter
(
)
{
Delete
(
)
;
}
Sorter
(
const
Sorter
&
)
=
delete
;
Sorter
&
operator
=
(
const
Sorter
&
)
=
delete
;
Sorter
(
Sorter
&
&
other
)
{
Delete
(
)
;
ptr_
=
other
.
ptr_
;
other
.
ptr_
=
nullptr
;
}
Sorter
&
operator
=
(
Sorter
&
&
other
)
{
Delete
(
)
;
ptr_
=
other
.
ptr_
;
other
.
ptr_
=
nullptr
;
return
*
this
;
}
void
operator
(
)
(
uint16_t
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
uint16_t
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
void
operator
(
)
(
uint32_t
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
uint32_t
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
void
operator
(
)
(
uint64_t
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
uint64_t
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
void
operator
(
)
(
int16_t
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
int16_t
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
void
operator
(
)
(
int32_t
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
int32_t
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
void
operator
(
)
(
int64_t
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
int64_t
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
void
operator
(
)
(
float
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
float
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
void
operator
(
)
(
double
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
double
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
void
operator
(
)
(
uint128_t
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
uint128_t
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
void
operator
(
)
(
K64V64
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
K64V64
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
void
operator
(
)
(
K32V32
*
HWY_RESTRICT
keys
size_t
n
SortAscending
)
const
;
void
operator
(
)
(
K32V32
*
HWY_RESTRICT
keys
size_t
n
SortDescending
)
const
;
static
void
Fill24Bytes
(
const
void
*
seed_heap
size_t
seed_num
void
*
bytes
)
;
static
bool
HaveFloat64
(
)
;
private
:
void
Delete
(
)
;
template
<
typename
T
>
T
*
Get
(
)
const
{
return
static_cast
<
T
*
>
(
ptr_
)
;
}
void
*
ptr_
=
nullptr
;
}
;
}
#
endif
