#
include
"
hwy
/
contrib
/
sort
/
vqsort
.
h
"
#
include
<
time
.
h
>
#
include
<
cstdint
>
#
include
"
hwy
/
base
.
h
"
#
include
"
hwy
/
contrib
/
sort
/
shared
-
inl
.
h
"
#
if
defined
(
ANDROID
)
|
|
defined
(
__ANDROID__
)
|
|
HWY_ARCH_RVV
#
define
VQSORT_GETRANDOM
0
#
endif
#
if
!
defined
(
VQSORT_GETRANDOM
)
&
&
HWY_OS_LINUX
#
include
<
features
.
h
>
#
if
defined
(
__UCLIBC__
)
#
define
VQSORT_GETRANDOM
1
/
/
added
Mar
2015
before
uclibc
-
ng
1
.
0
#
elif
defined
(
__GLIBC__
)
&
&
defined
(
__GLIBC_PREREQ
)
#
if
__GLIBC_PREREQ
(
2
25
)
#
define
VQSORT_GETRANDOM
1
#
else
#
define
VQSORT_GETRANDOM
0
#
endif
#
else
#
define
VQSORT_GETRANDOM
1
#
endif
#
endif
#
if
!
defined
(
VQSORT_GETRANDOM
)
#
define
VQSORT_GETRANDOM
0
#
endif
#
ifndef
VQSORT_SECURE_SEED
#
if
VQSORT_GETRANDOM
#
define
VQSORT_SECURE_SEED
1
#
elif
defined
(
_WIN32
)
|
|
defined
(
_WIN64
)
#
define
VQSORT_SECURE_SEED
2
#
else
#
define
VQSORT_SECURE_SEED
0
#
endif
#
endif
#
if
VQSORT_SECURE_SEED
=
=
1
#
include
<
sys
/
random
.
h
>
#
elif
VQSORT_SECURE_SEED
=
=
2
#
include
<
windows
.
h
>
#
pragma
comment
(
lib
"
advapi32
.
lib
"
)
#
include
<
wincrypt
.
h
>
#
endif
namespace
hwy
{
namespace
{
void
Fill16Bytes
(
void
*
bytes
)
{
#
if
VQSORT_SECURE_SEED
=
=
1
const
ssize_t
ret
=
getrandom
(
bytes
16
0
)
;
if
(
ret
=
=
16
)
return
;
#
elif
VQSORT_SECURE_SEED
=
=
2
HCRYPTPROV
hProvider
{
}
;
if
(
CryptAcquireContextA
(
&
hProvider
nullptr
nullptr
PROV_RSA_FULL
CRYPT_VERIFYCONTEXT
)
)
{
const
BOOL
ok
=
CryptGenRandom
(
hProvider
16
reinterpret_cast
<
BYTE
*
>
(
bytes
)
)
;
CryptReleaseContext
(
hProvider
0
)
;
if
(
ok
)
return
;
}
#
endif
uint64_t
*
words
=
reinterpret_cast
<
uint64_t
*
>
(
bytes
)
;
uint64_t
*
*
seed_stack
=
&
words
;
void
(
*
seed_code
)
(
void
*
)
=
&
Fill16Bytes
;
const
uintptr_t
bits_stack
=
reinterpret_cast
<
uintptr_t
>
(
seed_stack
)
;
const
uintptr_t
bits_code
=
reinterpret_cast
<
uintptr_t
>
(
seed_code
)
;
const
uint64_t
bits_time
=
static_cast
<
uint64_t
>
(
clock
(
)
)
;
words
[
0
]
=
bits_stack
^
bits_time
^
0xFEDCBA98
;
words
[
1
]
=
bits_code
^
bits_time
^
0x01234567
;
}
}
uint64_t
*
GetGeneratorState
(
)
{
thread_local
uint64_t
state
[
3
]
=
{
0
}
;
if
(
HWY_UNLIKELY
(
state
[
2
]
=
=
0
)
)
{
Fill16Bytes
(
state
)
;
state
[
2
]
=
1
;
}
return
state
;
}
}
