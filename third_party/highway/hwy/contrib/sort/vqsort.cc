#
include
"
hwy
/
contrib
/
sort
/
vqsort
.
h
"
#
include
"
hwy
/
base
.
h
"
#
include
"
hwy
/
contrib
/
sort
/
vqsort
-
inl
.
h
"
#
include
"
hwy
/
per_target
.
h
"
#
if
defined
(
ANDROID
)
|
|
defined
(
__ANDROID__
)
|
|
\
(
HWY_ARCH_RISCV
&
&
!
HWY_OS_LINUX
)
#
define
VQSORT_GETRANDOM
0
#
endif
#
if
!
defined
(
VQSORT_GETRANDOM
)
&
&
HWY_OS_LINUX
#
include
<
features
.
h
>
#
if
defined
(
__UCLIBC__
)
#
define
VQSORT_GETRANDOM
1
/
/
added
Mar
2015
before
uclibc
-
ng
1
.
0
#
elif
defined
(
__GLIBC__
)
&
&
defined
(
__GLIBC_PREREQ
)
#
if
__GLIBC_PREREQ
(
2
25
)
#
define
VQSORT_GETRANDOM
1
#
else
#
define
VQSORT_GETRANDOM
0
#
endif
#
else
#
define
VQSORT_GETRANDOM
1
#
endif
#
endif
#
if
!
defined
(
VQSORT_GETRANDOM
)
#
define
VQSORT_GETRANDOM
0
#
endif
#
ifndef
VQSORT_SECURE_SEED
#
if
VQSORT_GETRANDOM
#
define
VQSORT_SECURE_SEED
1
#
elif
defined
(
_WIN32
)
|
|
defined
(
_WIN64
)
#
define
VQSORT_SECURE_SEED
2
#
else
#
define
VQSORT_SECURE_SEED
0
#
endif
#
endif
#
if
VQSORT_SECURE_SEED
=
=
1
#
include
<
sys
/
random
.
h
>
#
elif
VQSORT_SECURE_SEED
=
=
2
#
ifndef
NOMINMAX
#
define
NOMINMAX
#
endif
#
ifndef
WIN32_LEAN_AND_MEAN
#
define
WIN32_LEAN_AND_MEAN
#
endif
#
include
<
windows
.
h
>
#
if
HWY_COMPILER_MSVC
|
|
HWY_COMPILER_CLANGCL
#
pragma
comment
(
lib
"
advapi32
.
lib
"
)
#
endif
#
include
<
wincrypt
.
h
>
#
endif
namespace
hwy
{
bool
Fill16BytesSecure
(
void
*
bytes
)
{
#
if
VQSORT_SECURE_SEED
=
=
1
const
ssize_t
ret
=
getrandom
(
bytes
16
0
)
;
if
(
ret
=
=
16
)
return
true
;
#
elif
VQSORT_SECURE_SEED
=
=
2
HCRYPTPROV
hProvider
{
}
;
if
(
CryptAcquireContextA
(
&
hProvider
nullptr
nullptr
PROV_RSA_FULL
CRYPT_VERIFYCONTEXT
)
)
{
const
BOOL
ok
=
CryptGenRandom
(
hProvider
16
reinterpret_cast
<
BYTE
*
>
(
bytes
)
)
;
CryptReleaseContext
(
hProvider
0
)
;
if
(
ok
)
return
true
;
}
#
else
(
void
)
bytes
;
#
endif
return
false
;
}
void
Sorter
:
:
Fill24Bytes
(
const
void
*
size_t
void
*
)
{
}
bool
Sorter
:
:
HaveFloat64
(
)
{
return
hwy
:
:
HaveFloat64
(
)
;
}
Sorter
:
:
Sorter
(
)
{
}
void
Sorter
:
:
Delete
(
)
{
}
uint64_t
*
GetGeneratorState
(
)
{
return
hwy
:
:
detail
:
:
GetGeneratorStateStatic
(
)
;
}
}
