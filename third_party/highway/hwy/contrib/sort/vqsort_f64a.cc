#
include
"
hwy
/
contrib
/
sort
/
vqsort
.
h
"
#
undef
HWY_TARGET_INCLUDE
#
define
HWY_TARGET_INCLUDE
"
hwy
/
contrib
/
sort
/
vqsort_f64a
.
cc
"
#
include
"
hwy
/
foreach_target
.
h
"
#
include
"
hwy
/
contrib
/
sort
/
vqsort
-
inl
.
h
"
HWY_BEFORE_NAMESPACE
(
)
;
namespace
hwy
{
namespace
HWY_NAMESPACE
{
namespace
{
void
SortF64Asc
(
double
*
HWY_RESTRICT
keys
const
size_t
num
)
{
#
if
HWY_HAVE_FLOAT64
return
VQSortStatic
(
keys
num
SortAscending
(
)
)
;
#
else
(
void
)
keys
;
(
void
)
num
;
HWY_ASSERT
(
0
)
;
#
endif
}
void
PartialSortF64Asc
(
double
*
HWY_RESTRICT
keys
const
size_t
num
const
size_t
k
)
{
#
if
HWY_HAVE_FLOAT64
return
VQPartialSortStatic
(
keys
num
k
SortAscending
(
)
)
;
#
else
(
void
)
keys
;
(
void
)
num
;
(
void
)
k
;
HWY_ASSERT
(
0
)
;
#
endif
}
void
SelectF64Asc
(
double
*
HWY_RESTRICT
keys
const
size_t
num
const
size_t
k
)
{
#
if
HWY_HAVE_FLOAT64
return
VQSelectStatic
(
keys
num
k
SortAscending
(
)
)
;
#
else
(
void
)
keys
;
(
void
)
num
;
(
void
)
k
;
HWY_ASSERT
(
0
)
;
#
endif
}
}
}
}
HWY_AFTER_NAMESPACE
(
)
;
#
if
HWY_ONCE
namespace
hwy
{
namespace
{
HWY_EXPORT
(
SortF64Asc
)
;
HWY_EXPORT
(
PartialSortF64Asc
)
;
HWY_EXPORT
(
SelectF64Asc
)
;
}
void
VQSort
(
double
*
HWY_RESTRICT
keys
const
size_t
n
SortAscending
)
{
HWY_DYNAMIC_DISPATCH
(
SortF64Asc
)
(
keys
n
)
;
}
void
VQPartialSort
(
double
*
HWY_RESTRICT
keys
const
size_t
n
const
size_t
k
SortAscending
)
{
HWY_DYNAMIC_DISPATCH
(
PartialSortF64Asc
)
(
keys
n
k
)
;
}
void
VQSelect
(
double
*
HWY_RESTRICT
keys
const
size_t
n
const
size_t
k
SortAscending
)
{
HWY_DYNAMIC_DISPATCH
(
SelectF64Asc
)
(
keys
n
k
)
;
}
void
Sorter
:
:
operator
(
)
(
double
*
HWY_RESTRICT
keys
size_t
n
SortAscending
tag
)
const
{
VQSort
(
keys
n
tag
)
;
}
}
#
endif
