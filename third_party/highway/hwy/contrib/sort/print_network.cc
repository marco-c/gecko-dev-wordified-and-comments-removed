#
include
<
stdio
.
h
>
#
include
<
vector
>
#
include
"
hwy
/
base
.
h
"
void
PrintMergeNetwork
(
int
rows
int
cols
)
{
printf
(
"
\
n
%
d
x
%
d
:
\
n
"
rows
cols
)
;
HWY_ASSERT
(
rows
!
=
0
&
&
(
rows
&
(
rows
-
1
)
)
=
=
0
)
;
HWY_ASSERT
(
cols
!
=
0
&
&
(
cols
&
(
cols
-
1
)
)
=
=
0
)
;
HWY_ASSERT
(
rows
>
=
4
)
;
HWY_ASSERT
(
cols
>
=
2
)
;
HWY_ASSERT
(
cols
<
=
16
)
;
int
group_size
=
rows
;
int
num_groups
=
1
;
for
(
;
group_size
>
=
2
;
group_size
/
=
2
num_groups
*
=
2
)
{
std
:
:
vector
<
int
>
all_vi
;
for
(
int
group
=
0
;
group
<
num_groups
;
+
+
group
)
{
for
(
int
i
=
0
;
i
<
group_size
/
2
;
+
+
i
)
{
all_vi
.
push_back
(
group
*
group_size
+
i
)
;
}
}
for
(
int
vi
:
all_vi
)
{
const
int
vr
=
vi
^
(
group_size
-
1
)
;
printf
(
"
v
%
x
=
st
.
ReverseKeys
%
d
(
d
v
%
x
)
;
\
n
"
vr
cols
vr
)
;
}
for
(
int
vi
:
all_vi
)
{
const
int
vr
=
vi
^
(
group_size
-
1
)
;
printf
(
"
st
.
Sort2
(
d
v
%
x
v
%
x
)
;
\
n
"
vi
vr
)
;
}
printf
(
"
\
n
"
)
;
}
if
(
cols
>
2
)
{
for
(
int
i
=
0
;
i
<
rows
;
+
+
i
)
{
printf
(
"
v
%
x
=
st
.
SortPairsReverse
%
d
(
d
v
%
x
)
;
\
n
"
i
cols
i
)
;
}
printf
(
"
\
n
"
)
;
}
if
(
cols
>
=
16
)
{
for
(
int
i
=
0
;
i
<
rows
;
+
+
i
)
{
printf
(
"
v
%
x
=
st
.
SortPairsDistance4
(
d
v
%
x
)
;
\
n
"
i
i
)
;
}
printf
(
"
\
n
"
)
;
}
if
(
cols
>
=
8
)
{
for
(
int
i
=
0
;
i
<
rows
;
+
+
i
)
{
printf
(
"
v
%
x
=
st
.
SortPairsDistance2
(
d
v
%
x
)
;
\
n
"
i
i
)
;
}
printf
(
"
\
n
"
)
;
}
for
(
int
i
=
0
;
i
<
rows
;
+
+
i
)
{
printf
(
"
v
%
x
=
st
.
SortPairsDistance1
(
d
v
%
x
)
;
\
n
"
i
i
)
;
}
printf
(
"
\
n
"
)
;
}
int
main
(
int
argc
char
*
*
argv
)
{
PrintMergeNetwork
(
8
2
)
;
PrintMergeNetwork
(
8
4
)
;
PrintMergeNetwork
(
16
4
)
;
PrintMergeNetwork
(
16
8
)
;
PrintMergeNetwork
(
16
16
)
;
return
0
;
}
