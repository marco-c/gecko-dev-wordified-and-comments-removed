#
include
<
cmath
>
#
if
defined
(
HIGHWAY_HWY_CONTRIB_DOT_DOT_INL_H_
)
=
=
\
defined
(
HWY_TARGET_TOGGLE
)
#
ifdef
HIGHWAY_HWY_CONTRIB_DOT_DOT_INL_H_
#
undef
HIGHWAY_HWY_CONTRIB_DOT_DOT_INL_H_
#
else
#
define
HIGHWAY_HWY_CONTRIB_DOT_DOT_INL_H_
#
endif
#
include
"
hwy
/
highway
.
h
"
HWY_BEFORE_NAMESPACE
(
)
;
namespace
hwy
{
namespace
HWY_NAMESPACE
{
struct
Dot
{
enum
Assumptions
{
kAtLeastOneVector
=
1
kMultipleOfVector
=
2
kPaddedToVector
=
4
kVectorAlignedA
=
8
kVectorAlignedB
=
16
}
;
template
<
int
kAssumptions
class
D
typename
T
=
TFromD
<
D
>
HWY_IF_NOT_LANE_SIZE_D
(
D
2
)
>
static
HWY_INLINE
T
Compute
(
const
D
d
const
T
*
const
HWY_RESTRICT
pa
const
T
*
const
HWY_RESTRICT
pb
const
size_t
num_elements
)
{
static_assert
(
IsFloat
<
T
>
(
)
"
MulAdd
requires
float
type
"
)
;
using
V
=
decltype
(
Zero
(
d
)
)
;
const
size_t
N
=
Lanes
(
d
)
;
size_t
i
=
0
;
constexpr
bool
kIsAtLeastOneVector
=
(
kAssumptions
&
kAtLeastOneVector
)
!
=
0
;
constexpr
bool
kIsMultipleOfVector
=
(
kAssumptions
&
kMultipleOfVector
)
!
=
0
;
constexpr
bool
kIsPaddedToVector
=
(
kAssumptions
&
kPaddedToVector
)
!
=
0
;
constexpr
bool
kIsAlignedA
=
(
kAssumptions
&
kVectorAlignedA
)
!
=
0
;
constexpr
bool
kIsAlignedB
=
(
kAssumptions
&
kVectorAlignedB
)
!
=
0
;
if
(
!
kIsAtLeastOneVector
&
&
!
kIsMultipleOfVector
&
&
!
kIsPaddedToVector
&
&
HWY_UNLIKELY
(
num_elements
<
N
)
)
{
T
sum0
=
T
(
0
)
;
T
sum1
=
T
(
0
)
;
for
(
;
i
+
2
<
=
num_elements
;
i
+
=
2
)
{
sum0
+
=
pa
[
i
+
0
]
*
pb
[
i
+
0
]
;
sum1
+
=
pa
[
i
+
1
]
*
pb
[
i
+
1
]
;
}
if
(
i
<
num_elements
)
{
sum1
+
=
pa
[
i
]
*
pb
[
i
]
;
}
return
sum0
+
sum1
;
}
V
sum0
=
Zero
(
d
)
;
V
sum1
=
Zero
(
d
)
;
V
sum2
=
Zero
(
d
)
;
V
sum3
=
Zero
(
d
)
;
for
(
;
i
+
4
*
N
<
=
num_elements
;
)
{
const
auto
a0
=
kIsAlignedA
?
Load
(
d
pa
+
i
)
:
LoadU
(
d
pa
+
i
)
;
const
auto
b0
=
kIsAlignedB
?
Load
(
d
pb
+
i
)
:
LoadU
(
d
pb
+
i
)
;
i
+
=
N
;
sum0
=
MulAdd
(
a0
b0
sum0
)
;
const
auto
a1
=
kIsAlignedA
?
Load
(
d
pa
+
i
)
:
LoadU
(
d
pa
+
i
)
;
const
auto
b1
=
kIsAlignedB
?
Load
(
d
pb
+
i
)
:
LoadU
(
d
pb
+
i
)
;
i
+
=
N
;
sum1
=
MulAdd
(
a1
b1
sum1
)
;
const
auto
a2
=
kIsAlignedA
?
Load
(
d
pa
+
i
)
:
LoadU
(
d
pa
+
i
)
;
const
auto
b2
=
kIsAlignedB
?
Load
(
d
pb
+
i
)
:
LoadU
(
d
pb
+
i
)
;
i
+
=
N
;
sum2
=
MulAdd
(
a2
b2
sum2
)
;
const
auto
a3
=
kIsAlignedA
?
Load
(
d
pa
+
i
)
:
LoadU
(
d
pa
+
i
)
;
const
auto
b3
=
kIsAlignedB
?
Load
(
d
pb
+
i
)
:
LoadU
(
d
pb
+
i
)
;
i
+
=
N
;
sum3
=
MulAdd
(
a3
b3
sum3
)
;
}
for
(
;
i
+
N
<
=
num_elements
;
i
+
=
N
)
{
const
auto
a
=
kIsAlignedA
?
Load
(
d
pa
+
i
)
:
LoadU
(
d
pa
+
i
)
;
const
auto
b
=
kIsAlignedB
?
Load
(
d
pb
+
i
)
:
LoadU
(
d
pb
+
i
)
;
sum0
=
MulAdd
(
a
b
sum0
)
;
}
if
(
!
kIsMultipleOfVector
)
{
const
size_t
remaining
=
num_elements
-
i
;
if
(
remaining
!
=
0
)
{
if
(
kIsPaddedToVector
)
{
const
auto
mask
=
FirstN
(
d
remaining
)
;
const
auto
a
=
kIsAlignedA
?
Load
(
d
pa
+
i
)
:
LoadU
(
d
pa
+
i
)
;
const
auto
b
=
kIsAlignedB
?
Load
(
d
pb
+
i
)
:
LoadU
(
d
pb
+
i
)
;
sum1
=
MulAdd
(
IfThenElseZero
(
mask
a
)
IfThenElseZero
(
mask
b
)
sum1
)
;
}
else
{
HWY_DASSERT
(
i
>
=
N
)
;
i
+
=
remaining
-
N
;
const
auto
skip
=
FirstN
(
d
N
-
remaining
)
;
const
auto
a
=
LoadU
(
d
pa
+
i
)
;
const
auto
b
=
LoadU
(
d
pb
+
i
)
;
sum1
=
MulAdd
(
IfThenZeroElse
(
skip
a
)
IfThenZeroElse
(
skip
b
)
sum1
)
;
}
}
}
sum0
=
Add
(
sum0
sum1
)
;
sum2
=
Add
(
sum2
sum3
)
;
sum0
=
Add
(
sum0
sum2
)
;
return
GetLane
(
SumOfLanes
(
d
sum0
)
)
;
}
template
<
int
kAssumptions
class
D
>
static
HWY_INLINE
float
Compute
(
const
D
d
const
bfloat16_t
*
const
HWY_RESTRICT
pa
const
bfloat16_t
*
const
HWY_RESTRICT
pb
const
size_t
num_elements
)
{
const
RebindToUnsigned
<
D
>
du16
;
const
Repartition
<
float
D
>
df32
;
using
V
=
decltype
(
Zero
(
df32
)
)
;
const
size_t
N
=
Lanes
(
d
)
;
size_t
i
=
0
;
constexpr
bool
kIsAtLeastOneVector
=
(
kAssumptions
&
kAtLeastOneVector
)
!
=
0
;
constexpr
bool
kIsMultipleOfVector
=
(
kAssumptions
&
kMultipleOfVector
)
!
=
0
;
constexpr
bool
kIsPaddedToVector
=
(
kAssumptions
&
kPaddedToVector
)
!
=
0
;
constexpr
bool
kIsAlignedA
=
(
kAssumptions
&
kVectorAlignedA
)
!
=
0
;
constexpr
bool
kIsAlignedB
=
(
kAssumptions
&
kVectorAlignedB
)
!
=
0
;
if
(
!
kIsAtLeastOneVector
&
&
!
kIsMultipleOfVector
&
&
!
kIsPaddedToVector
&
&
HWY_UNLIKELY
(
num_elements
<
N
)
)
{
float
sum0
=
0
.
0f
;
float
sum1
=
0
.
0f
;
for
(
;
i
+
2
<
=
num_elements
;
i
+
=
2
)
{
sum0
+
=
F32FromBF16
(
pa
[
i
+
0
]
)
*
F32FromBF16
(
pb
[
i
+
0
]
)
;
sum1
+
=
F32FromBF16
(
pa
[
i
+
1
]
)
*
F32FromBF16
(
pb
[
i
+
1
]
)
;
}
if
(
i
<
num_elements
)
{
sum1
+
=
F32FromBF16
(
pa
[
i
]
)
*
F32FromBF16
(
pb
[
i
]
)
;
}
return
sum0
+
sum1
;
}
V
sum0
=
Zero
(
df32
)
;
V
sum1
=
Zero
(
df32
)
;
V
sum2
=
Zero
(
df32
)
;
V
sum3
=
Zero
(
df32
)
;
for
(
;
i
+
2
*
N
<
=
num_elements
;
)
{
const
auto
a0
=
kIsAlignedA
?
Load
(
d
pa
+
i
)
:
LoadU
(
d
pa
+
i
)
;
const
auto
b0
=
kIsAlignedB
?
Load
(
d
pb
+
i
)
:
LoadU
(
d
pb
+
i
)
;
i
+
=
N
;
sum0
=
ReorderWidenMulAccumulate
(
df32
a0
b0
sum0
sum1
)
;
const
auto
a1
=
kIsAlignedA
?
Load
(
d
pa
+
i
)
:
LoadU
(
d
pa
+
i
)
;
const
auto
b1
=
kIsAlignedB
?
Load
(
d
pb
+
i
)
:
LoadU
(
d
pb
+
i
)
;
i
+
=
N
;
sum2
=
ReorderWidenMulAccumulate
(
df32
a1
b1
sum2
sum3
)
;
}
if
(
i
+
N
<
=
num_elements
)
{
const
auto
a0
=
kIsAlignedA
?
Load
(
d
pa
+
i
)
:
LoadU
(
d
pa
+
i
)
;
const
auto
b0
=
kIsAlignedB
?
Load
(
d
pb
+
i
)
:
LoadU
(
d
pb
+
i
)
;
i
+
=
N
;
sum0
=
ReorderWidenMulAccumulate
(
df32
a0
b0
sum0
sum1
)
;
}
if
(
!
kIsMultipleOfVector
)
{
const
size_t
remaining
=
num_elements
-
i
;
if
(
remaining
!
=
0
)
{
if
(
kIsPaddedToVector
)
{
const
auto
mask
=
FirstN
(
du16
remaining
)
;
const
auto
va
=
kIsAlignedA
?
Load
(
d
pa
+
i
)
:
LoadU
(
d
pa
+
i
)
;
const
auto
vb
=
kIsAlignedB
?
Load
(
d
pb
+
i
)
:
LoadU
(
d
pb
+
i
)
;
const
auto
a16
=
BitCast
(
d
IfThenElseZero
(
mask
BitCast
(
du16
va
)
)
)
;
const
auto
b16
=
BitCast
(
d
IfThenElseZero
(
mask
BitCast
(
du16
vb
)
)
)
;
sum2
=
ReorderWidenMulAccumulate
(
df32
a16
b16
sum2
sum3
)
;
}
else
{
HWY_DASSERT
(
i
>
=
N
)
;
i
+
=
remaining
-
N
;
const
auto
skip
=
FirstN
(
du16
N
-
remaining
)
;
const
auto
va
=
LoadU
(
d
pa
+
i
)
;
const
auto
vb
=
LoadU
(
d
pb
+
i
)
;
const
auto
a16
=
BitCast
(
d
IfThenZeroElse
(
skip
BitCast
(
du16
va
)
)
)
;
const
auto
b16
=
BitCast
(
d
IfThenZeroElse
(
skip
BitCast
(
du16
vb
)
)
)
;
sum2
=
ReorderWidenMulAccumulate
(
df32
a16
b16
sum2
sum3
)
;
}
}
}
sum0
=
Add
(
sum0
sum1
)
;
sum2
=
Add
(
sum2
sum3
)
;
sum0
=
Add
(
sum0
sum2
)
;
return
GetLane
(
SumOfLanes
(
df32
sum0
)
)
;
}
}
;
}
}
HWY_AFTER_NAMESPACE
(
)
;
#
endif
