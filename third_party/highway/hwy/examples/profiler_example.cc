#
include
<
cmath
>
#
include
"
hwy
/
base
.
h
"
#
include
"
hwy
/
cache_control
.
h
"
#
include
"
hwy
/
contrib
/
thread_pool
/
thread_pool
.
h
"
#
include
"
hwy
/
profiler
.
h
"
#
include
"
hwy
/
timer
.
h
"
namespace
hwy
{
namespace
{
HWY_INLINE
void
Spin
(
const
double
min_time
)
{
const
double
t0
=
hwy
:
:
platform
:
:
Now
(
)
;
for
(
;
;
)
{
hwy
:
:
Pause
(
)
;
const
double
elapsed
=
hwy
:
:
platform
:
:
Now
(
)
-
t0
;
if
(
elapsed
>
min_time
)
{
break
;
}
}
}
HWY_NOINLINE
void
Spin10us
(
)
{
PROFILER_FUNC
;
Spin
(
10E
-
6
)
;
}
HWY_NOINLINE
void
Spin20us
(
)
{
PROFILER_FUNC
;
Spin
(
20E
-
6
)
;
}
HWY_NOINLINE
void
CallTwoSpin
(
)
{
PROFILER_ZONE
(
"
NearZeroBecauseOfChildZones
"
)
;
{
PROFILER_ZONE
(
"
spin30
"
)
;
Spin
(
30E
-
6
)
;
}
{
PROFILER_ZONE
(
"
spin60
"
)
;
Spin
(
60E
-
6
)
;
}
}
HWY_NOINLINE
void
Compute
(
Profiler
&
p
HWY_MAYBE_UNUSED
size_t
thread
)
{
static
const
auto
zone
=
p
.
AddZone
(
"
Compute
"
)
;
PROFILER_ZONE3
(
p
static_cast
<
uint8_t
>
(
thread
)
zone
)
;
for
(
int
rep
=
0
;
rep
<
100
;
+
+
rep
)
{
double
total
=
0
.
0
;
for
(
int
i
=
0
;
i
<
200
-
rep
;
+
+
i
)
{
total
+
=
std
:
:
pow
(
0
.
9
i
)
;
}
if
(
std
:
:
abs
(
total
-
10
.
0
)
>
1E
-
2
)
{
HWY_ABORT
(
"
unexpected
total
%
f
"
total
)
;
}
}
}
HWY_NOINLINE
void
TestThreads
(
Profiler
&
p
)
{
PROFILER_ZONE
(
"
NearZeroBecauseOfThreadedChildZones
"
)
;
{
PROFILER_ZONE
(
"
Create
pool1
"
)
;
ThreadPool
pool
(
3
)
;
pool
.
Run
(
0
5
[
&
p
]
(
uint64_t
HWY_MAYBE_UNUSED
size_t
thread
)
{
Compute
(
p
thread
)
;
}
)
;
}
{
PROFILER_ZONE
(
"
Create
pool2
"
)
;
ThreadPool
pool
(
8
)
;
pool
.
Run
(
0
8
[
&
p
]
(
uint64_t
HWY_MAYBE_UNUSED
size_t
thread
)
{
Compute
(
p
thread
)
;
}
)
;
}
}
HWY_NOINLINE
void
CallTestThreadPlus20us
(
Profiler
&
p
)
{
PROFILER_FUNC
;
TestThreads
(
p
)
;
Spin
(
20E
-
6
)
;
}
HWY_NOINLINE
void
CallCallTestThreadPlus10us
(
Profiler
&
p
)
{
PROFILER_FUNC
;
CallTestThreadPlus20us
(
p
)
;
Spin
(
10E
-
6
)
;
}
void
ProfilerExample
(
Profiler
&
p
)
{
PROFILER_ZONE
(
"
NearZeroDespiteInclusiveChildZone
"
)
;
{
static
const
auto
zone
=
p
.
AddZone
(
"
Inclusive
10
+
20
"
ProfilerFlags
:
:
kInclusive
)
;
PROFILER_ZONE3
(
p
0
zone
)
;
Spin20us
(
)
;
Spin10us
(
)
;
}
CallTwoSpin
(
)
;
CallCallTestThreadPlus10us
(
p
)
;
}
}
}
int
main
(
int
char
*
[
]
)
{
hwy
:
:
ProfilerExample
(
hwy
:
:
Profiler
:
:
Get
(
)
)
;
PROFILER_PRINT_RESULTS
(
)
;
return
0
;
}
