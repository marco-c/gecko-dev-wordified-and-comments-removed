#
include
"
hwy
/
targets
.
h
"
#
include
"
hwy
/
tests
/
test_util
-
inl
.
h
"
namespace
fake
{
#
define
DECLARE_FUNCTION
(
TGT
)
\
namespace
N_
#
#
TGT
{
\
uint32_t
FakeFunction
(
int
)
{
return
HWY_
#
#
TGT
;
}
\
}
DECLARE_FUNCTION
(
AVX3_DL
)
DECLARE_FUNCTION
(
AVX3
)
DECLARE_FUNCTION
(
AVX2
)
DECLARE_FUNCTION
(
SSE4
)
DECLARE_FUNCTION
(
SSSE3
)
DECLARE_FUNCTION
(
NEON
)
DECLARE_FUNCTION
(
SVE
)
DECLARE_FUNCTION
(
SVE2
)
DECLARE_FUNCTION
(
PPC8
)
DECLARE_FUNCTION
(
WASM
)
DECLARE_FUNCTION
(
RVV
)
DECLARE_FUNCTION
(
SCALAR
)
HWY_EXPORT
(
FakeFunction
)
;
void
CheckFakeFunction
(
)
{
#
define
CHECK_ARRAY_ENTRY
(
TGT
)
\
if
(
(
HWY_TARGETS
&
HWY_
#
#
TGT
)
!
=
0
)
{
\
hwy
:
:
SetSupportedTargetsForTest
(
HWY_
#
#
TGT
)
;
\
/
*
Calling
Update
(
)
first
to
make
&
HWY_DYNAMIC_DISPATCH
(
)
return
*
/
\
/
*
the
pointer
to
the
already
cached
function
.
*
/
\
hwy
:
:
GetChosenTarget
(
)
.
Update
(
)
;
\
EXPECT_EQ
(
uint32_t
(
HWY_
#
#
TGT
)
HWY_DYNAMIC_DISPATCH
(
FakeFunction
)
(
42
)
)
;
\
/
*
Calling
DeInit
(
)
will
test
that
the
initializer
function
*
/
\
/
*
also
calls
the
right
function
.
*
/
\
hwy
:
:
GetChosenTarget
(
)
.
DeInit
(
)
;
\
EXPECT_EQ
(
uint32_t
(
HWY_
#
#
TGT
)
HWY_DYNAMIC_DISPATCH
(
FakeFunction
)
(
42
)
)
;
\
/
*
Second
call
uses
the
cached
value
from
the
previous
call
.
*
/
\
EXPECT_EQ
(
uint32_t
(
HWY_
#
#
TGT
)
HWY_DYNAMIC_DISPATCH
(
FakeFunction
)
(
42
)
)
;
\
}
CHECK_ARRAY_ENTRY
(
AVX3_DL
)
CHECK_ARRAY_ENTRY
(
AVX3
)
CHECK_ARRAY_ENTRY
(
AVX2
)
CHECK_ARRAY_ENTRY
(
SSE4
)
CHECK_ARRAY_ENTRY
(
SSSE3
)
CHECK_ARRAY_ENTRY
(
NEON
)
CHECK_ARRAY_ENTRY
(
SVE
)
CHECK_ARRAY_ENTRY
(
SVE2
)
CHECK_ARRAY_ENTRY
(
PPC8
)
CHECK_ARRAY_ENTRY
(
WASM
)
CHECK_ARRAY_ENTRY
(
RVV
)
CHECK_ARRAY_ENTRY
(
SCALAR
)
#
undef
CHECK_ARRAY_ENTRY
}
}
namespace
hwy
{
class
HwyTargetsTest
:
public
testing
:
:
Test
{
protected
:
void
TearDown
(
)
override
{
SetSupportedTargetsForTest
(
0
)
;
DisableTargets
(
0
)
;
}
}
;
TEST_F
(
HwyTargetsTest
ChosenTargetOrderTest
)
{
fake
:
:
CheckFakeFunction
(
)
;
}
TEST_F
(
HwyTargetsTest
DisabledTargetsTest
)
{
DisableTargets
(
~
0u
)
;
HWY_ASSERT
(
HWY_ENABLED_BASELINE
=
=
SupportedTargets
(
)
)
;
DisableTargets
(
0
)
;
uint32_t
current_targets
=
SupportedTargets
(
)
;
if
(
(
current_targets
&
~
uint32_t
(
HWY_ENABLED_BASELINE
)
)
=
=
0
)
{
return
;
}
uint32_t
lowest_target
=
current_targets
&
(
~
current_targets
+
1
)
;
HWY_ASSERT
(
(
lowest_target
&
~
uint32_t
(
HWY_ENABLED_BASELINE
)
)
!
=
0
)
;
DisableTargets
(
lowest_target
)
;
HWY_ASSERT
(
(
lowest_target
^
current_targets
)
=
=
SupportedTargets
(
)
)
;
DisableTargets
(
0
)
;
}
}
int
main
(
int
argc
char
*
*
argv
)
{
:
:
testing
:
:
InitGoogleTest
(
&
argc
argv
)
;
return
RUN_ALL_TESTS
(
)
;
}
