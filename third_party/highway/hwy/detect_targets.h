#
ifndef
HIGHWAY_HWY_DETECT_TARGETS_H_
#
define
HIGHWAY_HWY_DETECT_TARGETS_H_
#
include
"
hwy
/
detect_compiler_arch
.
h
"
#
define
HWY_AVX3_DL
(
1LL
<
<
7
)
/
/
see
HWY_WANT_AVX3_DL
below
#
define
HWY_AVX3
(
1LL
<
<
8
)
#
define
HWY_AVX2
(
1LL
<
<
9
)
#
define
HWY_SSE4
(
1LL
<
<
11
)
#
define
HWY_SSSE3
(
1LL
<
<
12
)
#
define
HWY_HIGHEST_TARGET_BIT_X86
14
#
define
HWY_SVE2_128
(
1LL
<
<
24
)
/
/
specialized
target
(
e
.
g
.
Arm
N2
)
#
define
HWY_SVE_256
(
1LL
<
<
25
)
/
/
specialized
target
(
e
.
g
.
Arm
V1
)
#
define
HWY_SVE2
(
1LL
<
<
26
)
#
define
HWY_SVE
(
1LL
<
<
27
)
#
define
HWY_NEON
(
1LL
<
<
28
)
/
/
On
A64
includes
/
requires
AES
#
define
HWY_HIGHEST_TARGET_BIT_ARM
29
#
define
HWY_RVV
(
1LL
<
<
37
)
#
define
HWY_HIGHEST_TARGET_BIT_RVV
38
#
define
HWY_PPC8
(
1LL
<
<
49
)
/
/
v2
.
07
or
3
#
define
HWY_HIGHEST_TARGET_BIT_PPC
51
#
define
HWY_WASM_EMU256
(
1LL
<
<
58
)
/
/
Experimental
#
define
HWY_WASM
(
1LL
<
<
59
)
#
define
HWY_HIGHEST_TARGET_BIT_WASM
60
#
define
HWY_EMU128
(
1LL
<
<
61
)
#
define
HWY_SCALAR
(
1LL
<
<
62
)
#
define
HWY_HIGHEST_TARGET_BIT_SCALAR
62
#
ifndef
HWY_DISABLED_TARGETS
#
define
HWY_DISABLED_TARGETS
0
#
endif
#
ifndef
HWY_BROKEN_TARGETS
#
if
HWY_ARCH_X86
&
&
(
HWY_COMPILER_CLANG
!
=
0
&
&
HWY_COMPILER_CLANG
<
700
)
#
define
HWY_BROKEN_TARGETS
(
HWY_SSE4
|
HWY_AVX2
|
HWY_AVX3
|
HWY_AVX3_DL
)
#
if
!
defined
(
HWY_COMPILE_ONLY_SCALAR
)
#
pragma
message
(
"
x86
Clang
<
=
6
:
define
HWY_COMPILE_ONLY_SCALAR
or
upgrade
.
"
)
#
endif
#
elif
HWY_ARCH_X86_32
#
define
HWY_BROKEN_TARGETS
(
HWY_AVX2
|
HWY_AVX3
|
HWY_AVX3_DL
)
#
elif
HWY_COMPILER_MSVC
!
=
0
#
define
HWY_BROKEN_TARGETS
(
HWY_AVX3
|
HWY_AVX3_DL
)
#
elif
HWY_ARCH_ARM_V7
&
&
\
(
defined
(
__ARM_BIG_ENDIAN
)
|
|
\
(
defined
(
__BYTE_ORDER
)
&
&
__BYTE_ORDER
=
=
__BIG_ENDIAN
)
)
#
define
HWY_BROKEN_TARGETS
(
HWY_NEON
)
#
elif
(
HWY_COMPILER_CLANG
&
&
HWY_COMPILER_CLANG
<
1100
)
|
|
\
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
1000
)
#
define
HWY_BROKEN_TARGETS
(
HWY_SVE
|
HWY_SVE2
|
HWY_SVE_256
|
HWY_SVE2_128
)
#
else
#
define
HWY_BROKEN_TARGETS
0
#
endif
#
endif
#
define
HWY_ENABLED
(
targets
)
\
(
(
targets
)
&
~
(
(
HWY_DISABLED_TARGETS
)
|
(
HWY_BROKEN_TARGETS
)
)
)
#
if
!
defined
(
HWY_BROKEN_EMU128
)
#
if
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
1203
)
|
|
\
defined
(
HWY_NO_LIBCXX
)
#
define
HWY_BROKEN_EMU128
1
#
else
#
define
HWY_BROKEN_EMU128
0
#
endif
#
endif
#
if
defined
(
HWY_COMPILE_ONLY_SCALAR
)
|
|
HWY_BROKEN_EMU128
#
define
HWY_BASELINE_SCALAR
HWY_SCALAR
#
else
#
define
HWY_BASELINE_SCALAR
HWY_EMU128
#
endif
#
if
HWY_ARCH_WASM
&
&
defined
(
__wasm_simd128__
)
#
if
defined
(
HWY_WANT_WASM2
)
#
define
HWY_BASELINE_WASM
HWY_WASM_EMU256
#
else
#
define
HWY_BASELINE_WASM
HWY_WASM
#
endif
#
else
#
define
HWY_BASELINE_WASM
0
#
endif
#
if
HWY_ARCH_PPC
&
&
defined
(
__VSX__
)
&
&
0
#
define
HWY_BASELINE_PPC8
HWY_PPC8
#
else
#
define
HWY_BASELINE_PPC8
0
#
endif
#
define
HWY_BASELINE_SVE2
0
#
define
HWY_BASELINE_SVE
0
#
define
HWY_BASELINE_NEON
0
#
if
HWY_ARCH_ARM
#
if
defined
(
__ARM_FEATURE_SVE2
)
#
undef
HWY_BASELINE_SVE2
/
/
was
0
will
be
re
-
defined
#
if
defined
(
__ARM_FEATURE_SVE_BITS
)
&
&
__ARM_FEATURE_SVE_BITS
=
=
128
#
define
HWY_BASELINE_SVE2
HWY_SVE2_128
#
else
#
define
HWY_BASELINE_SVE2
HWY_SVE2
#
endif
#
endif
#
if
defined
(
__ARM_FEATURE_SVE
)
#
undef
HWY_BASELINE_SVE
/
/
was
0
will
be
re
-
defined
#
if
defined
(
__ARM_FEATURE_SVE_BITS
)
&
&
__ARM_FEATURE_SVE_BITS
=
=
256
#
define
HWY_BASELINE_SVE
HWY_SVE_256
#
else
#
define
HWY_BASELINE_SVE
HWY_SVE
#
endif
#
endif
#
if
defined
(
__ARM_NEON__
)
|
|
defined
(
__ARM_NEON
)
#
undef
HWY_BASELINE_NEON
#
define
HWY_BASELINE_NEON
HWY_NEON
#
endif
#
endif
#
if
HWY_COMPILER_MSVC
#
if
defined
(
__AVX__
)
#
define
HWY_CHECK_SSSE3
1
#
define
HWY_CHECK_SSE4
1
#
else
#
define
HWY_CHECK_SSSE3
0
#
define
HWY_CHECK_SSE4
0
#
endif
#
define
HWY_CHECK_PCLMUL_AES
1
#
define
HWY_CHECK_BMI2_FMA
1
#
define
HWY_CHECK_F16C
1
#
else
#
if
defined
(
__SSSE3__
)
#
define
HWY_CHECK_SSSE3
1
#
else
#
define
HWY_CHECK_SSSE3
0
#
endif
#
if
defined
(
__SSE4_1__
)
&
&
defined
(
__SSE4_2__
)
#
define
HWY_CHECK_SSE4
1
#
else
#
define
HWY_CHECK_SSE4
0
#
endif
#
if
defined
(
HWY_DISABLE_PCLMUL_AES
)
|
|
(
defined
(
__PCLMUL__
)
&
&
defined
(
__AES__
)
)
#
define
HWY_CHECK_PCLMUL_AES
1
#
else
#
define
HWY_CHECK_PCLMUL_AES
0
#
endif
#
if
defined
(
HWY_DISABLE_BMI2_FMA
)
|
|
(
defined
(
__BMI2__
)
&
&
defined
(
__FMA__
)
)
#
define
HWY_CHECK_BMI2_FMA
1
#
else
#
define
HWY_CHECK_BMI2_FMA
0
#
endif
#
if
defined
(
HWY_DISABLE_F16C
)
|
|
defined
(
__F16C__
)
#
define
HWY_CHECK_F16C
1
#
else
#
define
HWY_CHECK_F16C
0
#
endif
#
endif
#
if
HWY_ARCH_X86
&
&
(
HWY_WANT_SSSE3
|
|
HWY_CHECK_SSSE3
)
#
define
HWY_BASELINE_SSSE3
HWY_SSSE3
#
else
#
define
HWY_BASELINE_SSSE3
0
#
endif
#
if
HWY_ARCH_X86
&
&
(
HWY_WANT_SSE4
|
|
(
HWY_CHECK_SSE4
&
&
HWY_CHECK_PCLMUL_AES
)
)
#
define
HWY_BASELINE_SSE4
HWY_SSE4
#
else
#
define
HWY_BASELINE_SSE4
0
#
endif
#
if
HWY_BASELINE_SSE4
!
=
0
&
&
HWY_CHECK_BMI2_FMA
&
&
HWY_CHECK_F16C
&
&
\
defined
(
__AVX2__
)
#
define
HWY_BASELINE_AVX2
HWY_AVX2
#
else
#
define
HWY_BASELINE_AVX2
0
#
endif
#
if
HWY_BASELINE_AVX2
!
=
0
&
&
defined
(
__AVX512F__
)
&
&
defined
(
__AVX512BW__
)
&
&
\
defined
(
__AVX512DQ__
)
&
&
defined
(
__AVX512VL__
)
#
define
HWY_BASELINE_AVX3
HWY_AVX3
#
else
#
define
HWY_BASELINE_AVX3
0
#
endif
#
if
HWY_BASELINE_AVX3
!
=
0
&
&
defined
(
__AVXVNNI__
)
&
&
defined
(
__VAES__
)
&
&
\
defined
(
__VPCLMULQDQ__
)
&
&
defined
(
__AVX512VBMI__
)
&
&
\
defined
(
__AVX512VBMI2__
)
&
&
defined
(
__AVX512VPOPCNTDQ__
)
&
&
\
defined
(
__AVX512BITALG__
)
#
define
HWY_BASELINE_AVX3_DL
HWY_AVX3_DL
#
else
#
define
HWY_BASELINE_AVX3_DL
0
#
endif
#
if
HWY_ARCH_RVV
&
&
defined
(
__riscv_vector
)
#
define
HWY_BASELINE_RVV
HWY_RVV
#
else
#
define
HWY_BASELINE_RVV
0
#
endif
#
ifndef
HWY_BASELINE_TARGETS
#
define
HWY_BASELINE_TARGETS
\
(
HWY_BASELINE_SCALAR
|
HWY_BASELINE_WASM
|
HWY_BASELINE_PPC8
|
\
HWY_BASELINE_SVE2
|
HWY_BASELINE_SVE
|
HWY_BASELINE_NEON
|
\
HWY_BASELINE_SSSE3
|
HWY_BASELINE_SSE4
|
HWY_BASELINE_AVX2
|
\
HWY_BASELINE_AVX3
|
HWY_BASELINE_AVX3_DL
|
HWY_BASELINE_RVV
)
#
endif
#
define
HWY_ENABLED_BASELINE
HWY_ENABLED
(
HWY_BASELINE_TARGETS
)
#
if
HWY_ENABLED_BASELINE
=
=
0
#
error
"
At
least
one
baseline
target
must
be
defined
and
enabled
"
#
endif
#
define
HWY_STATIC_TARGET
(
HWY_ENABLED_BASELINE
&
-
HWY_ENABLED_BASELINE
)
#
define
HWY_TARGET
HWY_STATIC_TARGET
#
if
1
<
(
defined
(
HWY_COMPILE_ONLY_SCALAR
)
+
defined
(
HWY_COMPILE_ONLY_EMU128
)
+
\
defined
(
HWY_COMPILE_ONLY_STATIC
)
)
#
error
"
Can
only
define
one
of
HWY_COMPILE_ONLY_
{
SCALAR
|
EMU128
|
STATIC
}
-
bug
?
"
#
endif
#
if
HWY_ARCH_X86
#
define
HWY_HAVE_RUNTIME_DISPATCH
1
#
elif
HWY_ARCH_ARM
&
&
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_OS_LINUX
&
&
!
defined
(
TOOLCHAIN_MISS_SYS_AUXV_H
)
#
define
HWY_HAVE_RUNTIME_DISPATCH
1
#
else
#
define
HWY_HAVE_RUNTIME_DISPATCH
0
#
endif
#
if
defined
(
HWY_WANT_AVX3_DL
)
|
|
(
HWY_BASELINE
&
HWY_AVX3_DL
)
#
define
HWY_ATTAINABLE_AVX3_DL
HWY_AVX3_DL
#
else
#
define
HWY_ATTAINABLE_AVX3_DL
0
#
endif
#
if
HWY_ARCH_ARM_A64
&
&
(
HWY_HAVE_RUNTIME_DISPATCH
|
|
\
(
HWY_ENABLED_BASELINE
&
(
HWY_SVE
|
HWY_SVE_256
)
)
)
#
define
HWY_ATTAINABLE_SVE
HWY_ENABLED
(
HWY_SVE
|
HWY_SVE_256
)
#
else
#
define
HWY_ATTAINABLE_SVE
0
#
endif
#
if
HWY_ARCH_ARM_A64
&
&
(
HWY_HAVE_RUNTIME_DISPATCH
|
|
\
(
HWY_ENABLED_BASELINE
&
(
HWY_SVE2
|
HWY_SVE2_128
)
)
)
#
define
HWY_ATTAINABLE_SVE2
HWY_ENABLED
(
HWY_SVE2
|
HWY_SVE2_128
)
#
else
#
define
HWY_ATTAINABLE_SVE2
0
#
endif
#
if
HWY_ARCH_X86
#
define
HWY_ATTAINABLE_TARGETS
\
HWY_ENABLED
(
HWY_BASELINE_SCALAR
|
HWY_SSSE3
|
HWY_SSE4
|
HWY_AVX2
|
\
HWY_AVX3
|
HWY_ATTAINABLE_AVX3_DL
)
#
elif
HWY_ARCH_ARM
&
&
HWY_HAVE_RUNTIME_DISPATCH
#
define
HWY_ATTAINABLE_TARGETS
\
HWY_ENABLED
(
HWY_BASELINE_SCALAR
|
HWY_NEON
|
HWY_ATTAINABLE_SVE
|
\
HWY_ATTAINABLE_SVE2
)
#
else
#
define
HWY_ATTAINABLE_TARGETS
\
(
HWY_ENABLED_BASELINE
|
HWY_ATTAINABLE_SVE
|
HWY_ATTAINABLE_SVE2
)
#
endif
#
if
defined
(
HWY_COMPILE_ONLY_EMU128
)
&
&
!
HWY_BROKEN_EMU128
#
undef
HWY_STATIC_TARGET
#
define
HWY_STATIC_TARGET
HWY_EMU128
/
/
override
baseline
#
define
HWY_TARGETS
HWY_EMU128
#
elif
defined
(
HWY_COMPILE_ONLY_SCALAR
)
|
|
\
(
defined
(
HWY_COMPILE_ONLY_EMU128
)
&
&
HWY_BROKEN_EMU128
)
#
undef
HWY_STATIC_TARGET
#
define
HWY_STATIC_TARGET
HWY_SCALAR
/
/
override
baseline
#
define
HWY_TARGETS
HWY_SCALAR
#
elif
defined
(
HWY_COMPILE_ONLY_STATIC
)
#
define
HWY_TARGETS
HWY_STATIC_TARGET
#
elif
defined
(
HWY_COMPILE_ALL_ATTAINABLE
)
|
|
defined
(
HWY_IS_TEST
)
#
define
HWY_TARGETS
HWY_ATTAINABLE_TARGETS
#
else
#
define
HWY_TARGETS
\
(
HWY_ATTAINABLE_TARGETS
&
(
(
HWY_STATIC_TARGET
-
1LL
)
|
HWY_STATIC_TARGET
)
)
#
endif
#
if
(
HWY_TARGETS
&
HWY_STATIC_TARGET
)
=
=
0
#
error
"
Logic
error
:
best
baseline
should
be
included
in
dynamic
targets
"
#
endif
#
endif
