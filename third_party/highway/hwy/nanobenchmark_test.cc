#
include
"
hwy
/
nanobenchmark
.
h
"
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
unistd
.
h
>
#
include
<
random
>
namespace
hwy
{
namespace
{
FuncOutput
Div
(
const
void
*
FuncInput
in
)
{
return
0xFFFFF
/
in
;
}
template
<
size_t
N
>
void
MeasureDiv
(
const
FuncInput
(
&
inputs
)
[
N
]
)
{
Result
results
[
N
]
;
Params
params
;
params
.
max_evals
=
4
;
const
size_t
num_results
=
Measure
(
&
Div
nullptr
inputs
N
results
params
)
;
for
(
size_t
i
=
0
;
i
<
num_results
;
+
+
i
)
{
printf
(
"
%
5zu
:
%
6
.
2f
ticks
;
MAD
=
%
4
.
2f
%
%
\
n
"
results
[
i
]
.
input
results
[
i
]
.
ticks
results
[
i
]
.
variability
*
100
.
0
)
;
}
}
std
:
:
mt19937
rng
;
FuncOutput
Random
(
const
void
*
FuncInput
in
)
{
const
size_t
r
=
rng
(
)
&
0xF
;
uint32_t
ret
=
in
;
for
(
size_t
i
=
0
;
i
<
r
;
+
+
i
)
{
ret
/
=
(
(
rng
(
)
&
1
)
+
2
)
;
}
return
ret
;
}
template
<
size_t
N
>
void
MeasureRandom
(
const
FuncInput
(
&
inputs
)
[
N
]
)
{
Result
results
[
N
]
;
Params
p
;
p
.
max_evals
=
4
;
p
.
verbose
=
false
;
const
size_t
num_results
=
Measure
(
&
Random
nullptr
inputs
N
results
p
)
;
for
(
size_t
i
=
0
;
i
<
num_results
;
+
+
i
)
{
NANOBENCHMARK_CHECK
(
results
[
i
]
.
variability
>
1E
-
3
)
;
}
}
template
<
size_t
N
>
void
EnsureLongMeasurementFails
(
const
FuncInput
(
&
inputs
)
[
N
]
)
{
printf
(
"
Expect
a
'
measurement
failed
'
below
:
\
n
"
)
;
Result
results
[
N
]
;
const
size_t
num_results
=
Measure
(
[
]
(
const
void
*
const
FuncInput
input
)
-
>
FuncOutput
{
while
(
sleep
(
2
)
!
=
0
)
{
}
return
input
;
}
nullptr
inputs
N
results
)
;
NANOBENCHMARK_CHECK
(
num_results
=
=
0
)
;
(
void
)
num_results
;
}
void
RunAll
(
const
int
argc
char
*
*
)
{
const
int
unpredictable
=
argc
!
=
999
;
static
const
FuncInput
inputs
[
]
=
{
static_cast
<
FuncInput
>
(
unpredictable
)
+
2
static_cast
<
FuncInput
>
(
unpredictable
+
9
)
}
;
MeasureDiv
(
inputs
)
;
MeasureRandom
(
inputs
)
;
EnsureLongMeasurementFails
(
inputs
)
;
}
}
}
int
main
(
int
argc
char
*
argv
[
]
)
{
hwy
:
:
RunAll
(
argc
argv
)
;
return
0
;
}
