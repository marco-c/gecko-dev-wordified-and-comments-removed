#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
hwy
/
base
.
h
"
#
include
"
hwy
/
detect_compiler_arch
.
h
"
#
include
"
hwy
/
highway_export
.
h
"
#
include
"
hwy
/
targets
.
h
"
#
ifndef
HWY_HIGHWAY_INCLUDED
#
define
HWY_HIGHWAY_INCLUDED
namespace
hwy
{
#
define
HWY_MAJOR
1
#
define
HWY_MINOR
0
#
define
HWY_PATCH
4
#
define
HWY_FULL1
(
T
)
hwy
:
:
HWY_NAMESPACE
:
:
ScalableTag
<
T
>
#
define
HWY_FULL2
(
T
LMUL
)
\
hwy
:
:
HWY_NAMESPACE
:
:
ScalableTag
<
T
hwy
:
:
CeilLog2
(
HWY_MAX
(
0
LMUL
)
)
>
#
define
HWY_3TH_ARG
(
arg1
arg2
arg3
.
.
.
)
arg3
#
define
HWY_FULL_RECOMPOSER
(
args_with_paren
)
HWY_3TH_ARG
args_with_paren
#
define
HWY_CHOOSE_FULL
(
.
.
.
)
\
HWY_FULL_RECOMPOSER
(
(
__VA_ARGS__
HWY_FULL2
HWY_FULL1
)
)
#
define
HWY_FULL
(
.
.
.
)
HWY_CHOOSE_FULL
(
__VA_ARGS__
(
)
)
(
__VA_ARGS__
)
#
define
HWY_CAPPED
(
T
MAX_N
)
hwy
:
:
HWY_NAMESPACE
:
:
CappedTag
<
T
MAX_N
>
#
ifndef
HWY_ONCE
#
define
HWY_ONCE
1
#
endif
#
if
HWY_STATIC_TARGET
=
=
HWY_SCALAR
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_SCALAR
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_EMU128
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_EMU128
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_RVV
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_RVV
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_WASM_EMU256
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_WASM_EMU256
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_WASM
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_WASM
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_NEON_WITHOUT_AES
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_NEON_WITHOUT_AES
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_NEON
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_NEON
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_SVE
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_SVE
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_SVE2
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_SVE2
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_SVE_256
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_SVE_256
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_SVE2_128
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_SVE2_128
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_PPC8
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_PPC8
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_PPC9
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_PPC9
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_PPC10
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_PPC10
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_SSE2
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_SSE2
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_SSSE3
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_SSSE3
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_SSE4
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_SSE4
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_AVX2
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_AVX2
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_AVX3
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_AVX3
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_AVX3_DL
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_AVX3_DL
:
:
FUNC_NAME
#
elif
HWY_STATIC_TARGET
=
=
HWY_AVX3_ZEN4
#
define
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
N_AVX3_ZEN4
:
:
FUNC_NAME
#
endif
#
if
HWY_TARGETS
&
HWY_EMU128
#
define
HWY_CHOOSE_FALLBACK
(
FUNC_NAME
)
&
N_EMU128
:
:
FUNC_NAME
#
elif
HWY_TARGETS
&
HWY_SCALAR
#
define
HWY_CHOOSE_FALLBACK
(
FUNC_NAME
)
&
N_SCALAR
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_FALLBACK
(
FUNC_NAME
)
&
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
#
endif
#
if
HWY_TARGETS
&
HWY_WASM_EMU256
#
define
HWY_CHOOSE_WASM_EMU256
(
FUNC_NAME
)
&
N_WASM_EMU256
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_WASM_EMU256
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_WASM
#
define
HWY_CHOOSE_WASM
(
FUNC_NAME
)
&
N_WASM
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_WASM
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_RVV
#
define
HWY_CHOOSE_RVV
(
FUNC_NAME
)
&
N_RVV
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_RVV
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_NEON_WITHOUT_AES
#
define
HWY_CHOOSE_NEON_WITHOUT_AES
(
FUNC_NAME
)
&
N_NEON_WITHOUT_AES
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_NEON_WITHOUT_AES
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_NEON
#
define
HWY_CHOOSE_NEON
(
FUNC_NAME
)
&
N_NEON
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_NEON
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_SVE
#
define
HWY_CHOOSE_SVE
(
FUNC_NAME
)
&
N_SVE
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_SVE
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_SVE2
#
define
HWY_CHOOSE_SVE2
(
FUNC_NAME
)
&
N_SVE2
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_SVE2
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_SVE_256
#
define
HWY_CHOOSE_SVE_256
(
FUNC_NAME
)
&
N_SVE_256
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_SVE_256
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_SVE2_128
#
define
HWY_CHOOSE_SVE2_128
(
FUNC_NAME
)
&
N_SVE2_128
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_SVE2_128
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_PPC8
#
define
HWY_CHOOSE_PPC8
(
FUNC_NAME
)
&
N_PPC8
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_PPC8
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_PPC9
#
define
HWY_CHOOSE_PPC9
(
FUNC_NAME
)
&
N_PPC9
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_PPC9
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_PPC10
#
define
HWY_CHOOSE_PPC10
(
FUNC_NAME
)
&
N_PPC10
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_PPC10
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_SSE2
#
define
HWY_CHOOSE_SSE2
(
FUNC_NAME
)
&
N_SSE2
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_SSE2
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_SSSE3
#
define
HWY_CHOOSE_SSSE3
(
FUNC_NAME
)
&
N_SSSE3
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_SSSE3
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_SSE4
#
define
HWY_CHOOSE_SSE4
(
FUNC_NAME
)
&
N_SSE4
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_SSE4
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_AVX2
#
define
HWY_CHOOSE_AVX2
(
FUNC_NAME
)
&
N_AVX2
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_AVX2
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_AVX3
#
define
HWY_CHOOSE_AVX3
(
FUNC_NAME
)
&
N_AVX3
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_AVX3
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_AVX3_DL
#
define
HWY_CHOOSE_AVX3_DL
(
FUNC_NAME
)
&
N_AVX3_DL
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_AVX3_DL
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_TARGETS
&
HWY_AVX3_ZEN4
#
define
HWY_CHOOSE_AVX3_ZEN4
(
FUNC_NAME
)
&
N_AVX3_ZEN4
:
:
FUNC_NAME
#
else
#
define
HWY_CHOOSE_AVX3_ZEN4
(
FUNC_NAME
)
nullptr
#
endif
#
if
HWY_COMPILER_MSVC
&
&
HWY_COMPILER_MSVC
<
1915
#
define
HWY_DISPATCH_WORKAROUND
1
#
else
#
define
HWY_DISPATCH_WORKAROUND
0
#
endif
template
<
typename
RetType
typename
.
.
.
Args
>
struct
FunctionCache
{
public
:
typedef
RetType
(
FunctionType
)
(
Args
.
.
.
)
;
#
if
HWY_DISPATCH_WORKAROUND
template
<
FunctionType
*
const
func
>
static
RetType
ChooseAndCall
(
Args
.
.
.
args
)
{
ChosenTarget
&
chosen_target
=
GetChosenTarget
(
)
;
chosen_target
.
Update
(
SupportedTargets
(
)
)
;
return
(
*
func
)
(
args
.
.
.
)
;
}
#
else
template
<
FunctionType
*
const
table
[
]
>
static
RetType
ChooseAndCall
(
Args
.
.
.
args
)
{
ChosenTarget
&
chosen_target
=
GetChosenTarget
(
)
;
chosen_target
.
Update
(
SupportedTargets
(
)
)
;
return
(
table
[
chosen_target
.
GetIndex
(
)
]
)
(
args
.
.
.
)
;
}
#
endif
}
;
template
<
typename
RetType
typename
.
.
.
Args
>
FunctionCache
<
RetType
Args
.
.
.
>
DeduceFunctionCache
(
RetType
(
*
)
(
Args
.
.
.
)
)
{
return
FunctionCache
<
RetType
Args
.
.
.
>
(
)
;
}
#
define
HWY_DISPATCH_TABLE
(
FUNC_NAME
)
\
HWY_CONCAT
(
FUNC_NAME
HighwayDispatchTable
)
#
if
HWY_IDE
|
|
(
(
HWY_TARGETS
&
(
HWY_TARGETS
-
1
)
)
=
=
0
)
#
define
HWY_EXPORT
(
FUNC_NAME
)
\
HWY_MAYBE_UNUSED
static
decltype
(
&
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
)
const
\
HWY_DISPATCH_TABLE
(
FUNC_NAME
)
[
1
]
=
{
&
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
}
#
define
HWY_DYNAMIC_DISPATCH
(
FUNC_NAME
)
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
#
else
#
if
HWY_DISPATCH_WORKAROUND
#
define
HWY_EXPORT
(
FUNC_NAME
)
\
static
decltype
(
&
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
)
const
HWY_DISPATCH_TABLE
(
\
FUNC_NAME
)
[
HWY_MAX_DYNAMIC_TARGETS
+
2
]
=
{
\
/
*
The
first
entry
in
the
table
initializes
the
global
cache
and
\
*
calls
the
function
from
HWY_STATIC_TARGET
.
*
/
\
&
decltype
(
hwy
:
:
DeduceFunctionCache
(
&
HWY_STATIC_DISPATCH
(
\
FUNC_NAME
)
)
)
:
:
ChooseAndCall
<
&
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
>
\
HWY_CHOOSE_TARGET_LIST
(
FUNC_NAME
)
\
HWY_CHOOSE_FALLBACK
(
FUNC_NAME
)
\
}
#
else
#
define
HWY_EXPORT
(
FUNC_NAME
)
\
static
decltype
(
&
HWY_STATIC_DISPATCH
(
FUNC_NAME
)
)
const
HWY_DISPATCH_TABLE
(
\
FUNC_NAME
)
[
HWY_MAX_DYNAMIC_TARGETS
+
2
]
=
{
\
/
*
The
first
entry
in
the
table
initializes
the
global
cache
and
\
*
calls
the
appropriate
function
.
*
/
\
&
decltype
(
hwy
:
:
DeduceFunctionCache
(
&
HWY_STATIC_DISPATCH
(
\
FUNC_NAME
)
)
)
:
:
ChooseAndCall
<
HWY_DISPATCH_TABLE
(
FUNC_NAME
)
>
\
HWY_CHOOSE_TARGET_LIST
(
FUNC_NAME
)
\
HWY_CHOOSE_FALLBACK
(
FUNC_NAME
)
\
}
#
endif
#
define
HWY_DYNAMIC_DISPATCH
(
FUNC_NAME
)
\
(
*
(
HWY_DISPATCH_TABLE
(
FUNC_NAME
)
[
hwy
:
:
GetChosenTarget
(
)
.
GetIndex
(
)
]
)
)
#
endif
#
define
HWY_CAP_INTEGER64
HWY_HAVE_INTEGER64
#
define
HWY_CAP_FLOAT16
HWY_HAVE_FLOAT16
#
define
HWY_CAP_FLOAT64
HWY_HAVE_FLOAT64
}
#
endif
#
if
defined
(
HWY_HIGHWAY_PER_TARGET
)
=
=
defined
(
HWY_TARGET_TOGGLE
)
#
ifdef
HWY_HIGHWAY_PER_TARGET
#
undef
HWY_HIGHWAY_PER_TARGET
#
else
#
define
HWY_HIGHWAY_PER_TARGET
#
endif
#
if
HWY_TARGET
=
=
HWY_SSE2
|
|
HWY_TARGET
=
=
HWY_SSSE3
|
|
\
HWY_TARGET
=
=
HWY_SSE4
#
include
"
hwy
/
ops
/
x86_128
-
inl
.
h
"
#
elif
HWY_TARGET
=
=
HWY_AVX2
#
include
"
hwy
/
ops
/
x86_256
-
inl
.
h
"
#
elif
HWY_TARGET
=
=
HWY_AVX3
|
|
HWY_TARGET
=
=
HWY_AVX3_DL
|
|
\
HWY_TARGET
=
=
HWY_AVX3_ZEN4
#
include
"
hwy
/
ops
/
x86_512
-
inl
.
h
"
#
elif
HWY_TARGET
=
=
HWY_PPC8
|
|
HWY_TARGET
=
=
HWY_PPC9
|
|
\
HWY_TARGET
=
=
HWY_PPC10
#
include
"
hwy
/
ops
/
ppc_vsx
-
inl
.
h
"
#
elif
HWY_TARGET
=
=
HWY_NEON
|
|
HWY_TARGET
=
=
HWY_NEON_WITHOUT_AES
#
include
"
hwy
/
ops
/
arm_neon
-
inl
.
h
"
#
elif
HWY_TARGET
=
=
HWY_SVE
|
|
HWY_TARGET
=
=
HWY_SVE2
|
|
\
HWY_TARGET
=
=
HWY_SVE_256
|
|
HWY_TARGET
=
=
HWY_SVE2_128
#
include
"
hwy
/
ops
/
arm_sve
-
inl
.
h
"
#
elif
HWY_TARGET
=
=
HWY_WASM_EMU256
#
include
"
hwy
/
ops
/
wasm_256
-
inl
.
h
"
#
elif
HWY_TARGET
=
=
HWY_WASM
#
include
"
hwy
/
ops
/
wasm_128
-
inl
.
h
"
#
elif
HWY_TARGET
=
=
HWY_RVV
#
include
"
hwy
/
ops
/
rvv
-
inl
.
h
"
#
elif
HWY_TARGET
=
=
HWY_EMU128
#
include
"
hwy
/
ops
/
emu128
-
inl
.
h
"
#
elif
HWY_TARGET
=
=
HWY_SCALAR
#
include
"
hwy
/
ops
/
scalar
-
inl
.
h
"
#
else
#
pragma
message
(
"
HWY_TARGET
does
not
match
any
known
target
"
)
#
endif
#
include
"
hwy
/
ops
/
generic_ops
-
inl
.
h
"
#
endif
