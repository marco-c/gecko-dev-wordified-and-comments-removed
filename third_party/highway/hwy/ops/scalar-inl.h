#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
hwy
/
base
.
h
"
#
include
"
hwy
/
ops
/
shared
-
inl
.
h
"
HWY_BEFORE_NAMESPACE
(
)
;
namespace
hwy
{
namespace
HWY_NAMESPACE
{
template
<
typename
T
>
using
Sisd
=
Simd
<
T
1
0
>
;
template
<
typename
T
>
struct
Vec1
{
using
PrivateT
=
T
;
static
constexpr
size_t
kPrivateN
=
1
;
HWY_INLINE
Vec1
(
)
=
default
;
Vec1
(
const
Vec1
&
)
=
default
;
Vec1
&
operator
=
(
const
Vec1
&
)
=
default
;
HWY_INLINE
explicit
Vec1
(
const
T
t
)
:
raw
(
t
)
{
}
HWY_INLINE
Vec1
&
operator
*
=
(
const
Vec1
other
)
{
return
*
this
=
(
*
this
*
other
)
;
}
HWY_INLINE
Vec1
&
operator
/
=
(
const
Vec1
other
)
{
return
*
this
=
(
*
this
/
other
)
;
}
HWY_INLINE
Vec1
&
operator
+
=
(
const
Vec1
other
)
{
return
*
this
=
(
*
this
+
other
)
;
}
HWY_INLINE
Vec1
&
operator
-
=
(
const
Vec1
other
)
{
return
*
this
=
(
*
this
-
other
)
;
}
HWY_INLINE
Vec1
&
operator
&
=
(
const
Vec1
other
)
{
return
*
this
=
(
*
this
&
other
)
;
}
HWY_INLINE
Vec1
&
operator
|
=
(
const
Vec1
other
)
{
return
*
this
=
(
*
this
|
other
)
;
}
HWY_INLINE
Vec1
&
operator
^
=
(
const
Vec1
other
)
{
return
*
this
=
(
*
this
^
other
)
;
}
T
raw
;
}
;
template
<
typename
T
>
class
Mask1
{
using
Raw
=
hwy
:
:
MakeUnsigned
<
T
>
;
public
:
static
HWY_INLINE
Mask1
<
T
>
FromBool
(
bool
b
)
{
Mask1
<
T
>
mask
;
mask
.
bits
=
b
?
static_cast
<
Raw
>
(
~
Raw
{
0
}
)
:
0
;
return
mask
;
}
Raw
bits
;
}
;
template
<
class
V
>
using
DFromV
=
Simd
<
typename
V
:
:
PrivateT
V
:
:
kPrivateN
0
>
;
template
<
class
V
>
using
TFromV
=
typename
V
:
:
PrivateT
;
template
<
typename
T
typename
FromT
>
HWY_API
Vec1
<
T
>
BitCast
(
Sisd
<
T
>
Vec1
<
FromT
>
v
)
{
static_assert
(
sizeof
(
T
)
<
=
sizeof
(
FromT
)
"
Promoting
is
undefined
"
)
;
T
to
;
CopyBytes
<
sizeof
(
FromT
)
>
(
&
v
.
raw
&
to
)
;
return
Vec1
<
T
>
(
to
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Zero
(
Sisd
<
T
>
)
{
return
Vec1
<
T
>
(
T
(
0
)
)
;
}
template
<
typename
T
typename
T2
>
HWY_API
Vec1
<
T
>
Set
(
Sisd
<
T
>
const
T2
t
)
{
return
Vec1
<
T
>
(
static_cast
<
T
>
(
t
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Undefined
(
Sisd
<
T
>
d
)
{
return
Zero
(
d
)
;
}
template
<
typename
T
typename
T2
>
HWY_API
Vec1
<
T
>
Iota
(
const
Sisd
<
T
>
const
T2
first
)
{
return
Vec1
<
T
>
(
static_cast
<
T
>
(
first
)
)
;
}
template
<
class
D
>
using
VFromD
=
decltype
(
Zero
(
D
(
)
)
)
;
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Not
(
const
Vec1
<
T
>
v
)
{
using
TU
=
MakeUnsigned
<
T
>
;
const
Sisd
<
TU
>
du
;
return
BitCast
(
Sisd
<
T
>
(
)
Vec1
<
TU
>
(
static_cast
<
TU
>
(
~
BitCast
(
du
v
)
.
raw
)
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
And
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
using
TU
=
MakeUnsigned
<
T
>
;
const
Sisd
<
TU
>
du
;
return
BitCast
(
Sisd
<
T
>
(
)
Vec1
<
TU
>
(
BitCast
(
du
a
)
.
raw
&
BitCast
(
du
b
)
.
raw
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
operator
&
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
And
(
a
b
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
AndNot
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
using
TU
=
MakeUnsigned
<
T
>
;
const
Sisd
<
TU
>
du
;
return
BitCast
(
Sisd
<
T
>
(
)
Vec1
<
TU
>
(
static_cast
<
TU
>
(
~
BitCast
(
du
a
)
.
raw
&
BitCast
(
du
b
)
.
raw
)
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Or
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
using
TU
=
MakeUnsigned
<
T
>
;
const
Sisd
<
TU
>
du
;
return
BitCast
(
Sisd
<
T
>
(
)
Vec1
<
TU
>
(
BitCast
(
du
a
)
.
raw
|
BitCast
(
du
b
)
.
raw
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
operator
|
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Or
(
a
b
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Xor
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
using
TU
=
MakeUnsigned
<
T
>
;
const
Sisd
<
TU
>
du
;
return
BitCast
(
Sisd
<
T
>
(
)
Vec1
<
TU
>
(
BitCast
(
du
a
)
.
raw
^
BitCast
(
du
b
)
.
raw
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
operator
^
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Xor
(
a
b
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Xor3
(
Vec1
<
T
>
x1
Vec1
<
T
>
x2
Vec1
<
T
>
x3
)
{
return
Xor
(
x1
Xor
(
x2
x3
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Or3
(
Vec1
<
T
>
o1
Vec1
<
T
>
o2
Vec1
<
T
>
o3
)
{
return
Or
(
o1
Or
(
o2
o3
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
OrAnd
(
const
Vec1
<
T
>
o
const
Vec1
<
T
>
a1
const
Vec1
<
T
>
a2
)
{
return
Or
(
o
And
(
a1
a2
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
IfVecThenElse
(
Vec1
<
T
>
mask
Vec1
<
T
>
yes
Vec1
<
T
>
no
)
{
return
IfThenElse
(
MaskFromVec
(
mask
)
yes
no
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
CopySign
(
const
Vec1
<
T
>
magn
const
Vec1
<
T
>
sign
)
{
static_assert
(
IsFloat
<
T
>
(
)
"
Only
makes
sense
for
floating
-
point
"
)
;
const
auto
msb
=
SignBit
(
Sisd
<
T
>
(
)
)
;
return
Or
(
AndNot
(
msb
magn
)
And
(
msb
sign
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
CopySignToAbs
(
const
Vec1
<
T
>
abs
const
Vec1
<
T
>
sign
)
{
static_assert
(
IsFloat
<
T
>
(
)
"
Only
makes
sense
for
floating
-
point
"
)
;
return
Or
(
abs
And
(
SignBit
(
Sisd
<
T
>
(
)
)
sign
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
BroadcastSignBit
(
const
Vec1
<
T
>
v
)
{
return
v
.
raw
<
0
?
Vec1
<
T
>
(
T
(
-
1
)
)
:
Vec1
<
T
>
(
0
)
;
}
#
ifdef
HWY_NATIVE_POPCNT
#
undef
HWY_NATIVE_POPCNT
#
else
#
define
HWY_NATIVE_POPCNT
#
endif
template
<
typename
T
>
HWY_API
Vec1
<
T
>
PopulationCount
(
Vec1
<
T
>
v
)
{
return
Vec1
<
T
>
(
static_cast
<
T
>
(
PopCount
(
v
.
raw
)
)
)
;
}
template
<
typename
TFrom
typename
TTo
>
HWY_API
Mask1
<
TTo
>
RebindMask
(
Sisd
<
TTo
>
Mask1
<
TFrom
>
m
)
{
static_assert
(
sizeof
(
TFrom
)
=
=
sizeof
(
TTo
)
"
Must
have
same
size
"
)
;
return
Mask1
<
TTo
>
{
m
.
bits
}
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
MaskFromVec
(
const
Vec1
<
T
>
v
)
{
Mask1
<
T
>
mask
;
CopySameSize
(
&
v
&
mask
)
;
return
mask
;
}
template
<
typename
T
>
Vec1
<
T
>
VecFromMask
(
const
Mask1
<
T
>
mask
)
{
Vec1
<
T
>
v
;
CopySameSize
(
&
mask
&
v
)
;
return
v
;
}
template
<
typename
T
>
Vec1
<
T
>
VecFromMask
(
Sisd
<
T
>
const
Mask1
<
T
>
mask
)
{
Vec1
<
T
>
v
;
CopySameSize
(
&
mask
&
v
)
;
return
v
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
FirstN
(
Sisd
<
T
>
size_t
n
)
{
return
Mask1
<
T
>
:
:
FromBool
(
n
!
=
0
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
IfThenElse
(
const
Mask1
<
T
>
mask
const
Vec1
<
T
>
yes
const
Vec1
<
T
>
no
)
{
return
mask
.
bits
?
yes
:
no
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
IfThenElseZero
(
const
Mask1
<
T
>
mask
const
Vec1
<
T
>
yes
)
{
return
mask
.
bits
?
yes
:
Vec1
<
T
>
(
0
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
IfThenZeroElse
(
const
Mask1
<
T
>
mask
const
Vec1
<
T
>
no
)
{
return
mask
.
bits
?
Vec1
<
T
>
(
0
)
:
no
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
IfNegativeThenElse
(
Vec1
<
T
>
v
Vec1
<
T
>
yes
Vec1
<
T
>
no
)
{
return
v
.
raw
<
0
?
yes
:
no
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
ZeroIfNegative
(
const
Vec1
<
T
>
v
)
{
return
v
.
raw
<
0
?
Vec1
<
T
>
(
0
)
:
v
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
Not
(
const
Mask1
<
T
>
m
)
{
return
MaskFromVec
(
Not
(
VecFromMask
(
Sisd
<
T
>
(
)
m
)
)
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
And
(
const
Mask1
<
T
>
a
Mask1
<
T
>
b
)
{
const
Sisd
<
T
>
d
;
return
MaskFromVec
(
And
(
VecFromMask
(
d
a
)
VecFromMask
(
d
b
)
)
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
AndNot
(
const
Mask1
<
T
>
a
Mask1
<
T
>
b
)
{
const
Sisd
<
T
>
d
;
return
MaskFromVec
(
AndNot
(
VecFromMask
(
d
a
)
VecFromMask
(
d
b
)
)
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
Or
(
const
Mask1
<
T
>
a
Mask1
<
T
>
b
)
{
const
Sisd
<
T
>
d
;
return
MaskFromVec
(
Or
(
VecFromMask
(
d
a
)
VecFromMask
(
d
b
)
)
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
Xor
(
const
Mask1
<
T
>
a
Mask1
<
T
>
b
)
{
const
Sisd
<
T
>
d
;
return
MaskFromVec
(
Xor
(
VecFromMask
(
d
a
)
VecFromMask
(
d
b
)
)
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
ExclusiveNeither
(
const
Mask1
<
T
>
a
Mask1
<
T
>
b
)
{
const
Sisd
<
T
>
d
;
return
MaskFromVec
(
AndNot
(
VecFromMask
(
d
a
)
Not
(
VecFromMask
(
d
b
)
)
)
)
;
}
template
<
int
kBits
typename
T
>
HWY_API
Vec1
<
T
>
ShiftLeft
(
const
Vec1
<
T
>
v
)
{
static_assert
(
0
<
=
kBits
&
&
kBits
<
sizeof
(
T
)
*
8
"
Invalid
shift
"
)
;
return
Vec1
<
T
>
(
static_cast
<
T
>
(
static_cast
<
hwy
:
:
MakeUnsigned
<
T
>
>
(
v
.
raw
)
<
<
kBits
)
)
;
}
template
<
int
kBits
typename
T
>
HWY_API
Vec1
<
T
>
ShiftRight
(
const
Vec1
<
T
>
v
)
{
static_assert
(
0
<
=
kBits
&
&
kBits
<
sizeof
(
T
)
*
8
"
Invalid
shift
"
)
;
#
if
__cplusplus
>
=
202002L
return
Vec1
<
T
>
(
static_cast
<
T
>
(
v
.
raw
>
>
kBits
)
)
;
#
else
if
(
IsSigned
<
T
>
(
)
)
{
using
TU
=
hwy
:
:
MakeUnsigned
<
T
>
;
const
Sisd
<
TU
>
du
;
const
TU
shifted
=
static_cast
<
TU
>
(
BitCast
(
du
v
)
.
raw
>
>
kBits
)
;
const
TU
sign
=
BitCast
(
du
BroadcastSignBit
(
v
)
)
.
raw
;
const
size_t
sign_shift
=
static_cast
<
size_t
>
(
static_cast
<
int
>
(
sizeof
(
TU
)
)
*
8
-
1
-
kBits
)
;
const
TU
upper
=
static_cast
<
TU
>
(
sign
<
<
sign_shift
)
;
return
BitCast
(
Sisd
<
T
>
(
)
Vec1
<
TU
>
(
shifted
|
upper
)
)
;
}
else
{
return
Vec1
<
T
>
(
static_cast
<
T
>
(
v
.
raw
>
>
kBits
)
)
;
}
#
endif
}
namespace
detail
{
template
<
int
kBits
>
struct
RotateRight
{
template
<
typename
T
>
HWY_INLINE
Vec1
<
T
>
operator
(
)
(
const
Vec1
<
T
>
v
)
const
{
return
Or
(
ShiftRight
<
kBits
>
(
v
)
ShiftLeft
<
sizeof
(
T
)
*
8
-
kBits
>
(
v
)
)
;
}
}
;
template
<
>
struct
RotateRight
<
0
>
{
template
<
typename
T
>
HWY_INLINE
Vec1
<
T
>
operator
(
)
(
const
Vec1
<
T
>
v
)
const
{
return
v
;
}
}
;
}
template
<
int
kBits
typename
T
>
HWY_API
Vec1
<
T
>
RotateRight
(
const
Vec1
<
T
>
v
)
{
static_assert
(
0
<
=
kBits
&
&
kBits
<
sizeof
(
T
)
*
8
"
Invalid
shift
"
)
;
return
detail
:
:
RotateRight
<
kBits
>
(
)
(
v
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
ShiftLeftSame
(
const
Vec1
<
T
>
v
int
bits
)
{
return
Vec1
<
T
>
(
static_cast
<
T
>
(
static_cast
<
hwy
:
:
MakeUnsigned
<
T
>
>
(
v
.
raw
)
<
<
bits
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
ShiftRightSame
(
const
Vec1
<
T
>
v
int
bits
)
{
#
if
__cplusplus
>
=
202002L
return
Vec1
<
T
>
(
static_cast
<
T
>
(
v
.
raw
>
>
bits
)
)
;
#
else
if
(
IsSigned
<
T
>
(
)
)
{
using
TU
=
hwy
:
:
MakeUnsigned
<
T
>
;
const
Sisd
<
TU
>
du
;
const
TU
shifted
=
static_cast
<
TU
>
(
BitCast
(
du
v
)
.
raw
>
>
bits
)
;
const
TU
sign
=
BitCast
(
du
BroadcastSignBit
(
v
)
)
.
raw
;
const
size_t
sign_shift
=
static_cast
<
size_t
>
(
static_cast
<
int
>
(
sizeof
(
TU
)
)
*
8
-
1
-
bits
)
;
const
TU
upper
=
static_cast
<
TU
>
(
sign
<
<
sign_shift
)
;
return
BitCast
(
Sisd
<
T
>
(
)
Vec1
<
TU
>
(
shifted
|
upper
)
)
;
}
else
{
return
Vec1
<
T
>
(
static_cast
<
T
>
(
v
.
raw
>
>
bits
)
)
;
}
#
endif
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
operator
<
<
(
const
Vec1
<
T
>
v
const
Vec1
<
T
>
bits
)
{
return
ShiftLeftSame
(
v
static_cast
<
int
>
(
bits
.
raw
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
operator
>
>
(
const
Vec1
<
T
>
v
const
Vec1
<
T
>
bits
)
{
return
ShiftRightSame
(
v
static_cast
<
int
>
(
bits
.
raw
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
operator
+
(
Vec1
<
T
>
a
Vec1
<
T
>
b
)
{
const
uint64_t
a64
=
static_cast
<
uint64_t
>
(
a
.
raw
)
;
const
uint64_t
b64
=
static_cast
<
uint64_t
>
(
b
.
raw
)
;
return
Vec1
<
T
>
(
static_cast
<
T
>
(
(
a64
+
b64
)
&
static_cast
<
uint64_t
>
(
~
T
(
0
)
)
)
)
;
}
HWY_API
Vec1
<
float
>
operator
+
(
const
Vec1
<
float
>
a
const
Vec1
<
float
>
b
)
{
return
Vec1
<
float
>
(
a
.
raw
+
b
.
raw
)
;
}
HWY_API
Vec1
<
double
>
operator
+
(
const
Vec1
<
double
>
a
const
Vec1
<
double
>
b
)
{
return
Vec1
<
double
>
(
a
.
raw
+
b
.
raw
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
operator
-
(
Vec1
<
T
>
a
Vec1
<
T
>
b
)
{
const
uint64_t
a64
=
static_cast
<
uint64_t
>
(
a
.
raw
)
;
const
uint64_t
b64
=
static_cast
<
uint64_t
>
(
b
.
raw
)
;
return
Vec1
<
T
>
(
static_cast
<
T
>
(
(
a64
-
b64
)
&
static_cast
<
uint64_t
>
(
~
T
(
0
)
)
)
)
;
}
HWY_API
Vec1
<
float
>
operator
-
(
const
Vec1
<
float
>
a
const
Vec1
<
float
>
b
)
{
return
Vec1
<
float
>
(
a
.
raw
-
b
.
raw
)
;
}
HWY_API
Vec1
<
double
>
operator
-
(
const
Vec1
<
double
>
a
const
Vec1
<
double
>
b
)
{
return
Vec1
<
double
>
(
a
.
raw
-
b
.
raw
)
;
}
HWY_API
Vec1
<
uint64_t
>
SumsOf8
(
const
Vec1
<
uint8_t
>
v
)
{
return
Vec1
<
uint64_t
>
(
v
.
raw
)
;
}
HWY_API
Vec1
<
uint8_t
>
SaturatedAdd
(
const
Vec1
<
uint8_t
>
a
const
Vec1
<
uint8_t
>
b
)
{
return
Vec1
<
uint8_t
>
(
static_cast
<
uint8_t
>
(
HWY_MIN
(
HWY_MAX
(
0
a
.
raw
+
b
.
raw
)
255
)
)
)
;
}
HWY_API
Vec1
<
uint16_t
>
SaturatedAdd
(
const
Vec1
<
uint16_t
>
a
const
Vec1
<
uint16_t
>
b
)
{
return
Vec1
<
uint16_t
>
(
static_cast
<
uint16_t
>
(
HWY_MIN
(
HWY_MAX
(
0
a
.
raw
+
b
.
raw
)
65535
)
)
)
;
}
HWY_API
Vec1
<
int8_t
>
SaturatedAdd
(
const
Vec1
<
int8_t
>
a
const
Vec1
<
int8_t
>
b
)
{
return
Vec1
<
int8_t
>
(
static_cast
<
int8_t
>
(
HWY_MIN
(
HWY_MAX
(
-
128
a
.
raw
+
b
.
raw
)
127
)
)
)
;
}
HWY_API
Vec1
<
int16_t
>
SaturatedAdd
(
const
Vec1
<
int16_t
>
a
const
Vec1
<
int16_t
>
b
)
{
return
Vec1
<
int16_t
>
(
static_cast
<
int16_t
>
(
HWY_MIN
(
HWY_MAX
(
-
32768
a
.
raw
+
b
.
raw
)
32767
)
)
)
;
}
HWY_API
Vec1
<
uint8_t
>
SaturatedSub
(
const
Vec1
<
uint8_t
>
a
const
Vec1
<
uint8_t
>
b
)
{
return
Vec1
<
uint8_t
>
(
static_cast
<
uint8_t
>
(
HWY_MIN
(
HWY_MAX
(
0
a
.
raw
-
b
.
raw
)
255
)
)
)
;
}
HWY_API
Vec1
<
uint16_t
>
SaturatedSub
(
const
Vec1
<
uint16_t
>
a
const
Vec1
<
uint16_t
>
b
)
{
return
Vec1
<
uint16_t
>
(
static_cast
<
uint16_t
>
(
HWY_MIN
(
HWY_MAX
(
0
a
.
raw
-
b
.
raw
)
65535
)
)
)
;
}
HWY_API
Vec1
<
int8_t
>
SaturatedSub
(
const
Vec1
<
int8_t
>
a
const
Vec1
<
int8_t
>
b
)
{
return
Vec1
<
int8_t
>
(
static_cast
<
int8_t
>
(
HWY_MIN
(
HWY_MAX
(
-
128
a
.
raw
-
b
.
raw
)
127
)
)
)
;
}
HWY_API
Vec1
<
int16_t
>
SaturatedSub
(
const
Vec1
<
int16_t
>
a
const
Vec1
<
int16_t
>
b
)
{
return
Vec1
<
int16_t
>
(
static_cast
<
int16_t
>
(
HWY_MIN
(
HWY_MAX
(
-
32768
a
.
raw
-
b
.
raw
)
32767
)
)
)
;
}
HWY_API
Vec1
<
uint8_t
>
AverageRound
(
const
Vec1
<
uint8_t
>
a
const
Vec1
<
uint8_t
>
b
)
{
return
Vec1
<
uint8_t
>
(
static_cast
<
uint8_t
>
(
(
a
.
raw
+
b
.
raw
+
1
)
/
2
)
)
;
}
HWY_API
Vec1
<
uint16_t
>
AverageRound
(
const
Vec1
<
uint16_t
>
a
const
Vec1
<
uint16_t
>
b
)
{
return
Vec1
<
uint16_t
>
(
static_cast
<
uint16_t
>
(
(
a
.
raw
+
b
.
raw
+
1
)
/
2
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Abs
(
const
Vec1
<
T
>
a
)
{
const
T
i
=
a
.
raw
;
if
(
i
>
=
0
|
|
i
=
=
hwy
:
:
LimitsMin
<
T
>
(
)
)
return
a
;
return
Vec1
<
T
>
(
static_cast
<
T
>
(
-
i
&
T
{
-
1
}
)
)
;
}
HWY_API
Vec1
<
float
>
Abs
(
Vec1
<
float
>
a
)
{
int32_t
i
;
CopyBytes
<
sizeof
(
i
)
>
(
&
a
.
raw
&
i
)
;
i
&
=
0x7FFFFFFF
;
CopyBytes
<
sizeof
(
i
)
>
(
&
i
&
a
.
raw
)
;
return
a
;
}
HWY_API
Vec1
<
double
>
Abs
(
Vec1
<
double
>
a
)
{
int64_t
i
;
CopyBytes
<
sizeof
(
i
)
>
(
&
a
.
raw
&
i
)
;
i
&
=
0x7FFFFFFFFFFFFFFFL
;
CopyBytes
<
sizeof
(
i
)
>
(
&
i
&
a
.
raw
)
;
return
a
;
}
namespace
detail
{
static
inline
float
Abs
(
float
f
)
{
uint32_t
i
;
CopyBytes
<
4
>
(
&
f
&
i
)
;
i
&
=
0x7FFFFFFFu
;
CopyBytes
<
4
>
(
&
i
&
f
)
;
return
f
;
}
static
inline
double
Abs
(
double
f
)
{
uint64_t
i
;
CopyBytes
<
8
>
(
&
f
&
i
)
;
i
&
=
0x7FFFFFFFFFFFFFFFull
;
CopyBytes
<
8
>
(
&
i
&
f
)
;
return
f
;
}
static
inline
bool
SignBit
(
float
f
)
{
uint32_t
i
;
CopyBytes
<
4
>
(
&
f
&
i
)
;
return
(
i
>
>
31
)
!
=
0
;
}
static
inline
bool
SignBit
(
double
f
)
{
uint64_t
i
;
CopyBytes
<
8
>
(
&
f
&
i
)
;
return
(
i
>
>
63
)
!
=
0
;
}
}
template
<
typename
T
HWY_IF_NOT_FLOAT
(
T
)
>
HWY_API
Vec1
<
T
>
Min
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Vec1
<
T
>
(
HWY_MIN
(
a
.
raw
b
.
raw
)
)
;
}
template
<
typename
T
HWY_IF_FLOAT
(
T
)
>
HWY_API
Vec1
<
T
>
Min
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
if
(
isnan
(
a
.
raw
)
)
return
b
;
if
(
isnan
(
b
.
raw
)
)
return
a
;
return
Vec1
<
T
>
(
HWY_MIN
(
a
.
raw
b
.
raw
)
)
;
}
template
<
typename
T
HWY_IF_NOT_FLOAT
(
T
)
>
HWY_API
Vec1
<
T
>
Max
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Vec1
<
T
>
(
HWY_MAX
(
a
.
raw
b
.
raw
)
)
;
}
template
<
typename
T
HWY_IF_FLOAT
(
T
)
>
HWY_API
Vec1
<
T
>
Max
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
if
(
isnan
(
a
.
raw
)
)
return
b
;
if
(
isnan
(
b
.
raw
)
)
return
a
;
return
Vec1
<
T
>
(
HWY_MAX
(
a
.
raw
b
.
raw
)
)
;
}
template
<
typename
T
HWY_IF_FLOAT
(
T
)
>
HWY_API
Vec1
<
T
>
Neg
(
const
Vec1
<
T
>
v
)
{
return
Xor
(
v
SignBit
(
Sisd
<
T
>
(
)
)
)
;
}
template
<
typename
T
HWY_IF_NOT_FLOAT
(
T
)
>
HWY_API
Vec1
<
T
>
Neg
(
const
Vec1
<
T
>
v
)
{
return
Zero
(
Sisd
<
T
>
(
)
)
-
v
;
}
template
<
typename
T
HWY_IF_FLOAT
(
T
)
>
HWY_API
Vec1
<
T
>
operator
*
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Vec1
<
T
>
(
static_cast
<
T
>
(
double
{
a
.
raw
}
*
b
.
raw
)
)
;
}
template
<
typename
T
HWY_IF_SIGNED
(
T
)
>
HWY_API
Vec1
<
T
>
operator
*
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Vec1
<
T
>
(
static_cast
<
T
>
(
static_cast
<
uint64_t
>
(
a
.
raw
)
*
static_cast
<
uint64_t
>
(
b
.
raw
)
)
)
;
}
template
<
typename
T
HWY_IF_UNSIGNED
(
T
)
>
HWY_API
Vec1
<
T
>
operator
*
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Vec1
<
T
>
(
static_cast
<
T
>
(
static_cast
<
uint64_t
>
(
a
.
raw
)
*
static_cast
<
uint64_t
>
(
b
.
raw
)
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
operator
/
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Vec1
<
T
>
(
a
.
raw
/
b
.
raw
)
;
}
HWY_API
Vec1
<
int16_t
>
MulHigh
(
const
Vec1
<
int16_t
>
a
const
Vec1
<
int16_t
>
b
)
{
return
Vec1
<
int16_t
>
(
static_cast
<
int16_t
>
(
(
a
.
raw
*
b
.
raw
)
>
>
16
)
)
;
}
HWY_API
Vec1
<
uint16_t
>
MulHigh
(
const
Vec1
<
uint16_t
>
a
const
Vec1
<
uint16_t
>
b
)
{
return
Vec1
<
uint16_t
>
(
static_cast
<
uint16_t
>
(
(
static_cast
<
uint32_t
>
(
a
.
raw
)
*
static_cast
<
uint32_t
>
(
b
.
raw
)
)
>
>
16
)
)
;
}
HWY_API
Vec1
<
int16_t
>
MulFixedPoint15
(
Vec1
<
int16_t
>
a
Vec1
<
int16_t
>
b
)
{
return
Vec1
<
int16_t
>
(
static_cast
<
int16_t
>
(
(
2
*
a
.
raw
*
b
.
raw
+
32768
)
>
>
16
)
)
;
}
HWY_API
Vec1
<
int64_t
>
MulEven
(
const
Vec1
<
int32_t
>
a
const
Vec1
<
int32_t
>
b
)
{
const
int64_t
a64
=
a
.
raw
;
return
Vec1
<
int64_t
>
(
a64
*
b
.
raw
)
;
}
HWY_API
Vec1
<
uint64_t
>
MulEven
(
const
Vec1
<
uint32_t
>
a
const
Vec1
<
uint32_t
>
b
)
{
const
uint64_t
a64
=
a
.
raw
;
return
Vec1
<
uint64_t
>
(
a64
*
b
.
raw
)
;
}
HWY_API
Vec1
<
float
>
ApproximateReciprocal
(
const
Vec1
<
float
>
v
)
{
if
(
v
.
raw
=
=
0
.
0f
)
return
Vec1
<
float
>
(
0
.
0f
)
;
return
Vec1
<
float
>
(
1
.
0f
/
v
.
raw
)
;
}
HWY_API
Vec1
<
float
>
AbsDiff
(
const
Vec1
<
float
>
a
const
Vec1
<
float
>
b
)
{
return
Abs
(
a
-
b
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
MulAdd
(
const
Vec1
<
T
>
mul
const
Vec1
<
T
>
x
const
Vec1
<
T
>
add
)
{
return
mul
*
x
+
add
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
NegMulAdd
(
const
Vec1
<
T
>
mul
const
Vec1
<
T
>
x
const
Vec1
<
T
>
add
)
{
return
add
-
mul
*
x
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
MulSub
(
const
Vec1
<
T
>
mul
const
Vec1
<
T
>
x
const
Vec1
<
T
>
sub
)
{
return
mul
*
x
-
sub
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
NegMulSub
(
const
Vec1
<
T
>
mul
const
Vec1
<
T
>
x
const
Vec1
<
T
>
sub
)
{
return
Neg
(
mul
)
*
x
-
sub
;
}
HWY_API
Vec1
<
float
>
ApproximateReciprocalSqrt
(
const
Vec1
<
float
>
v
)
{
float
f
=
v
.
raw
;
const
float
half
=
f
*
0
.
5f
;
uint32_t
bits
;
CopySameSize
(
&
f
&
bits
)
;
bits
=
0x5F3759DF
-
(
bits
>
>
1
)
;
CopySameSize
(
&
bits
&
f
)
;
return
Vec1
<
float
>
(
f
*
(
1
.
5f
-
(
half
*
f
*
f
)
)
)
;
}
HWY_API
Vec1
<
float
>
Sqrt
(
const
Vec1
<
float
>
v
)
{
#
if
HWY_COMPILER_GCC
&
&
defined
(
HWY_NO_LIBCXX
)
return
Vec1
<
float
>
(
__builtin_sqrt
(
v
.
raw
)
)
;
#
else
return
Vec1
<
float
>
(
sqrtf
(
v
.
raw
)
)
;
#
endif
}
HWY_API
Vec1
<
double
>
Sqrt
(
const
Vec1
<
double
>
v
)
{
#
if
HWY_COMPILER_GCC
&
&
defined
(
HWY_NO_LIBCXX
)
return
Vec1
<
float
>
(
__builtin_sqrt
(
v
.
raw
)
)
;
#
else
return
Vec1
<
double
>
(
sqrt
(
v
.
raw
)
)
;
#
endif
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Round
(
const
Vec1
<
T
>
v
)
{
using
TI
=
MakeSigned
<
T
>
;
if
(
!
(
Abs
(
v
)
.
raw
<
MantissaEnd
<
T
>
(
)
)
)
{
return
v
;
}
const
T
bias
=
v
.
raw
<
T
(
0
.
0
)
?
T
(
-
0
.
5
)
:
T
(
0
.
5
)
;
const
TI
rounded
=
static_cast
<
TI
>
(
v
.
raw
+
bias
)
;
if
(
rounded
=
=
0
)
return
CopySignToAbs
(
Vec1
<
T
>
(
0
)
v
)
;
if
(
(
rounded
&
1
)
&
&
detail
:
:
Abs
(
static_cast
<
T
>
(
rounded
)
-
v
.
raw
)
=
=
T
(
0
.
5
)
)
{
return
Vec1
<
T
>
(
static_cast
<
T
>
(
rounded
-
(
v
.
raw
<
T
(
0
)
?
-
1
:
1
)
)
)
;
}
return
Vec1
<
T
>
(
static_cast
<
T
>
(
rounded
)
)
;
}
HWY_API
Vec1
<
int32_t
>
NearestInt
(
const
Vec1
<
float
>
v
)
{
using
T
=
float
;
using
TI
=
int32_t
;
const
T
abs
=
Abs
(
v
)
.
raw
;
const
bool
is_sign
=
detail
:
:
SignBit
(
v
.
raw
)
;
if
(
!
(
abs
<
MantissaEnd
<
T
>
(
)
)
)
{
if
(
!
(
abs
<
=
static_cast
<
T
>
(
LimitsMax
<
TI
>
(
)
)
)
)
{
return
Vec1
<
TI
>
(
is_sign
?
LimitsMin
<
TI
>
(
)
:
LimitsMax
<
TI
>
(
)
)
;
}
return
Vec1
<
int32_t
>
(
static_cast
<
TI
>
(
v
.
raw
)
)
;
}
const
T
bias
=
v
.
raw
<
T
(
0
.
0
)
?
T
(
-
0
.
5
)
:
T
(
0
.
5
)
;
const
TI
rounded
=
static_cast
<
TI
>
(
v
.
raw
+
bias
)
;
if
(
rounded
=
=
0
)
return
Vec1
<
int32_t
>
(
0
)
;
if
(
(
rounded
&
1
)
&
&
detail
:
:
Abs
(
static_cast
<
T
>
(
rounded
)
-
v
.
raw
)
=
=
T
(
0
.
5
)
)
{
return
Vec1
<
TI
>
(
rounded
-
(
is_sign
?
-
1
:
1
)
)
;
}
return
Vec1
<
TI
>
(
rounded
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Trunc
(
const
Vec1
<
T
>
v
)
{
using
TI
=
MakeSigned
<
T
>
;
if
(
!
(
Abs
(
v
)
.
raw
<
=
MantissaEnd
<
T
>
(
)
)
)
{
return
v
;
}
const
TI
truncated
=
static_cast
<
TI
>
(
v
.
raw
)
;
if
(
truncated
=
=
0
)
return
CopySignToAbs
(
Vec1
<
T
>
(
0
)
v
)
;
return
Vec1
<
T
>
(
static_cast
<
T
>
(
truncated
)
)
;
}
template
<
typename
Float
typename
Bits
int
kMantissaBits
int
kExponentBits
class
V
>
V
Ceiling
(
const
V
v
)
{
const
Bits
kExponentMask
=
(
1ull
<
<
kExponentBits
)
-
1
;
const
Bits
kMantissaMask
=
(
1ull
<
<
kMantissaBits
)
-
1
;
const
Bits
kBias
=
kExponentMask
/
2
;
Float
f
=
v
.
raw
;
const
bool
positive
=
f
>
Float
(
0
.
0
)
;
Bits
bits
;
CopySameSize
(
&
v
&
bits
)
;
const
int
exponent
=
static_cast
<
int
>
(
(
(
bits
>
>
kMantissaBits
)
&
kExponentMask
)
-
kBias
)
;
if
(
exponent
>
=
kMantissaBits
)
return
v
;
if
(
exponent
<
0
)
return
positive
?
V
(
1
)
:
V
(
-
0
.
0
)
;
const
Bits
mantissa_mask
=
kMantissaMask
>
>
exponent
;
if
(
(
bits
&
mantissa_mask
)
=
=
0
)
return
v
;
if
(
positive
)
bits
+
=
(
kMantissaMask
+
1
)
>
>
exponent
;
bits
&
=
~
mantissa_mask
;
CopySameSize
(
&
bits
&
f
)
;
return
V
(
f
)
;
}
template
<
typename
Float
typename
Bits
int
kMantissaBits
int
kExponentBits
class
V
>
V
Floor
(
const
V
v
)
{
const
Bits
kExponentMask
=
(
1ull
<
<
kExponentBits
)
-
1
;
const
Bits
kMantissaMask
=
(
1ull
<
<
kMantissaBits
)
-
1
;
const
Bits
kBias
=
kExponentMask
/
2
;
Float
f
=
v
.
raw
;
const
bool
negative
=
f
<
Float
(
0
.
0
)
;
Bits
bits
;
CopySameSize
(
&
v
&
bits
)
;
const
int
exponent
=
static_cast
<
int
>
(
(
(
bits
>
>
kMantissaBits
)
&
kExponentMask
)
-
kBias
)
;
if
(
exponent
>
=
kMantissaBits
)
return
v
;
if
(
exponent
<
0
)
return
V
(
negative
?
Float
(
-
1
.
0
)
:
Float
(
0
.
0
)
)
;
const
Bits
mantissa_mask
=
kMantissaMask
>
>
exponent
;
if
(
(
bits
&
mantissa_mask
)
=
=
0
)
return
v
;
if
(
negative
)
bits
+
=
(
kMantissaMask
+
1
)
>
>
exponent
;
bits
&
=
~
mantissa_mask
;
CopySameSize
(
&
bits
&
f
)
;
return
V
(
f
)
;
}
HWY_API
Vec1
<
float
>
Ceil
(
const
Vec1
<
float
>
v
)
{
return
Ceiling
<
float
uint32_t
23
8
>
(
v
)
;
}
HWY_API
Vec1
<
double
>
Ceil
(
const
Vec1
<
double
>
v
)
{
return
Ceiling
<
double
uint64_t
52
11
>
(
v
)
;
}
HWY_API
Vec1
<
float
>
Floor
(
const
Vec1
<
float
>
v
)
{
return
Floor
<
float
uint32_t
23
8
>
(
v
)
;
}
HWY_API
Vec1
<
double
>
Floor
(
const
Vec1
<
double
>
v
)
{
return
Floor
<
double
uint64_t
52
11
>
(
v
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
operator
=
=
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Mask1
<
T
>
:
:
FromBool
(
a
.
raw
=
=
b
.
raw
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
operator
!
=
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Mask1
<
T
>
:
:
FromBool
(
a
.
raw
!
=
b
.
raw
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
TestBit
(
const
Vec1
<
T
>
v
const
Vec1
<
T
>
bit
)
{
static_assert
(
!
hwy
:
:
IsFloat
<
T
>
(
)
"
Only
integer
vectors
supported
"
)
;
return
(
v
&
bit
)
=
=
bit
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
operator
<
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Mask1
<
T
>
:
:
FromBool
(
a
.
raw
<
b
.
raw
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
operator
>
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Mask1
<
T
>
:
:
FromBool
(
a
.
raw
>
b
.
raw
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
operator
<
=
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Mask1
<
T
>
:
:
FromBool
(
a
.
raw
<
=
b
.
raw
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
operator
>
=
(
const
Vec1
<
T
>
a
const
Vec1
<
T
>
b
)
{
return
Mask1
<
T
>
:
:
FromBool
(
a
.
raw
>
=
b
.
raw
)
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
IsNaN
(
const
Vec1
<
T
>
v
)
{
MakeUnsigned
<
T
>
bits
;
CopySameSize
(
&
v
&
bits
)
;
bits
+
=
bits
;
bits
>
>
=
1
;
return
Mask1
<
T
>
:
:
FromBool
(
bits
>
ExponentMask
<
T
>
(
)
)
;
}
HWY_API
Mask1
<
float
>
IsInf
(
const
Vec1
<
float
>
v
)
{
const
Sisd
<
float
>
d
;
const
RebindToUnsigned
<
decltype
(
d
)
>
du
;
const
Vec1
<
uint32_t
>
vu
=
BitCast
(
du
v
)
;
return
RebindMask
(
d
(
vu
+
vu
)
=
=
Set
(
du
0xFF000000u
)
)
;
}
HWY_API
Mask1
<
double
>
IsInf
(
const
Vec1
<
double
>
v
)
{
const
Sisd
<
double
>
d
;
const
RebindToUnsigned
<
decltype
(
d
)
>
du
;
const
Vec1
<
uint64_t
>
vu
=
BitCast
(
du
v
)
;
return
RebindMask
(
d
(
vu
+
vu
)
=
=
Set
(
du
0xFFE0000000000000ull
)
)
;
}
HWY_API
Mask1
<
float
>
IsFinite
(
const
Vec1
<
float
>
v
)
{
const
Vec1
<
uint32_t
>
vu
=
BitCast
(
Sisd
<
uint32_t
>
(
)
v
)
;
return
Mask1
<
float
>
:
:
FromBool
(
(
vu
.
raw
<
<
1
)
<
0xFF000000u
)
;
}
HWY_API
Mask1
<
double
>
IsFinite
(
const
Vec1
<
double
>
v
)
{
const
Vec1
<
uint64_t
>
vu
=
BitCast
(
Sisd
<
uint64_t
>
(
)
v
)
;
return
Mask1
<
double
>
:
:
FromBool
(
(
vu
.
raw
<
<
1
)
<
0xFFE0000000000000ull
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Load
(
Sisd
<
T
>
const
T
*
HWY_RESTRICT
aligned
)
{
T
t
;
CopySameSize
(
aligned
&
t
)
;
return
Vec1
<
T
>
(
t
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
MaskedLoad
(
Mask1
<
T
>
m
Sisd
<
T
>
d
const
T
*
HWY_RESTRICT
aligned
)
{
return
IfThenElseZero
(
m
Load
(
d
aligned
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
LoadU
(
Sisd
<
T
>
d
const
T
*
HWY_RESTRICT
p
)
{
return
Load
(
d
p
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
LoadDup128
(
Sisd
<
T
>
d
const
T
*
HWY_RESTRICT
aligned
)
{
return
Load
(
d
aligned
)
;
}
template
<
typename
T
>
HWY_API
void
Store
(
const
Vec1
<
T
>
v
Sisd
<
T
>
T
*
HWY_RESTRICT
aligned
)
{
CopySameSize
(
&
v
.
raw
aligned
)
;
}
template
<
typename
T
>
HWY_API
void
StoreU
(
const
Vec1
<
T
>
v
Sisd
<
T
>
d
T
*
HWY_RESTRICT
p
)
{
return
Store
(
v
d
p
)
;
}
template
<
typename
T
>
HWY_API
void
BlendedStore
(
const
Vec1
<
T
>
v
Mask1
<
T
>
m
Sisd
<
T
>
d
T
*
HWY_RESTRICT
p
)
{
if
(
!
m
.
bits
)
return
;
StoreU
(
v
d
p
)
;
}
#
ifdef
HWY_NATIVE_LOAD_STORE_INTERLEAVED
#
undef
HWY_NATIVE_LOAD_STORE_INTERLEAVED
#
else
#
define
HWY_NATIVE_LOAD_STORE_INTERLEAVED
#
endif
template
<
typename
T
>
HWY_API
void
LoadInterleaved2
(
Sisd
<
T
>
d
const
T
*
HWY_RESTRICT
unaligned
Vec1
<
T
>
&
v0
Vec1
<
T
>
&
v1
)
{
v0
=
LoadU
(
d
unaligned
+
0
)
;
v1
=
LoadU
(
d
unaligned
+
1
)
;
}
template
<
typename
T
>
HWY_API
void
LoadInterleaved3
(
Sisd
<
T
>
d
const
T
*
HWY_RESTRICT
unaligned
Vec1
<
T
>
&
v0
Vec1
<
T
>
&
v1
Vec1
<
T
>
&
v2
)
{
v0
=
LoadU
(
d
unaligned
+
0
)
;
v1
=
LoadU
(
d
unaligned
+
1
)
;
v2
=
LoadU
(
d
unaligned
+
2
)
;
}
template
<
typename
T
>
HWY_API
void
LoadInterleaved4
(
Sisd
<
T
>
d
const
T
*
HWY_RESTRICT
unaligned
Vec1
<
T
>
&
v0
Vec1
<
T
>
&
v1
Vec1
<
T
>
&
v2
Vec1
<
T
>
&
v3
)
{
v0
=
LoadU
(
d
unaligned
+
0
)
;
v1
=
LoadU
(
d
unaligned
+
1
)
;
v2
=
LoadU
(
d
unaligned
+
2
)
;
v3
=
LoadU
(
d
unaligned
+
3
)
;
}
template
<
typename
T
>
HWY_API
void
StoreInterleaved2
(
const
Vec1
<
T
>
v0
const
Vec1
<
T
>
v1
Sisd
<
T
>
d
T
*
HWY_RESTRICT
unaligned
)
{
StoreU
(
v0
d
unaligned
+
0
)
;
StoreU
(
v1
d
unaligned
+
1
)
;
}
template
<
typename
T
>
HWY_API
void
StoreInterleaved3
(
const
Vec1
<
T
>
v0
const
Vec1
<
T
>
v1
const
Vec1
<
T
>
v2
Sisd
<
T
>
d
T
*
HWY_RESTRICT
unaligned
)
{
StoreU
(
v0
d
unaligned
+
0
)
;
StoreU
(
v1
d
unaligned
+
1
)
;
StoreU
(
v2
d
unaligned
+
2
)
;
}
template
<
typename
T
>
HWY_API
void
StoreInterleaved4
(
const
Vec1
<
T
>
v0
const
Vec1
<
T
>
v1
const
Vec1
<
T
>
v2
const
Vec1
<
T
>
v3
Sisd
<
T
>
d
T
*
HWY_RESTRICT
unaligned
)
{
StoreU
(
v0
d
unaligned
+
0
)
;
StoreU
(
v1
d
unaligned
+
1
)
;
StoreU
(
v2
d
unaligned
+
2
)
;
StoreU
(
v3
d
unaligned
+
3
)
;
}
template
<
typename
T
>
HWY_API
void
Stream
(
const
Vec1
<
T
>
v
Sisd
<
T
>
d
T
*
HWY_RESTRICT
aligned
)
{
return
Store
(
v
d
aligned
)
;
}
template
<
typename
T
typename
Offset
>
HWY_API
void
ScatterOffset
(
Vec1
<
T
>
v
Sisd
<
T
>
d
T
*
base
const
Vec1
<
Offset
>
offset
)
{
static_assert
(
sizeof
(
T
)
=
=
sizeof
(
Offset
)
"
Must
match
for
portability
"
)
;
uint8_t
*
const
base8
=
reinterpret_cast
<
uint8_t
*
>
(
base
)
+
offset
.
raw
;
return
Store
(
v
d
reinterpret_cast
<
T
*
>
(
base8
)
)
;
}
template
<
typename
T
typename
Index
>
HWY_API
void
ScatterIndex
(
Vec1
<
T
>
v
Sisd
<
T
>
d
T
*
HWY_RESTRICT
base
const
Vec1
<
Index
>
index
)
{
static_assert
(
sizeof
(
T
)
=
=
sizeof
(
Index
)
"
Must
match
for
portability
"
)
;
return
Store
(
v
d
base
+
index
.
raw
)
;
}
template
<
typename
T
typename
Offset
>
HWY_API
Vec1
<
T
>
GatherOffset
(
Sisd
<
T
>
d
const
T
*
base
const
Vec1
<
Offset
>
offset
)
{
static_assert
(
sizeof
(
T
)
=
=
sizeof
(
Offset
)
"
Must
match
for
portability
"
)
;
const
intptr_t
addr
=
reinterpret_cast
<
intptr_t
>
(
base
)
+
static_cast
<
intptr_t
>
(
offset
.
raw
)
;
return
Load
(
d
reinterpret_cast
<
const
T
*
>
(
addr
)
)
;
}
template
<
typename
T
typename
Index
>
HWY_API
Vec1
<
T
>
GatherIndex
(
Sisd
<
T
>
d
const
T
*
HWY_RESTRICT
base
const
Vec1
<
Index
>
index
)
{
static_assert
(
sizeof
(
T
)
=
=
sizeof
(
Index
)
"
Must
match
for
portability
"
)
;
return
Load
(
d
base
+
index
.
raw
)
;
}
template
<
typename
FromT
typename
ToT
>
HWY_API
Vec1
<
ToT
>
PromoteTo
(
Sisd
<
ToT
>
Vec1
<
FromT
>
from
)
{
static_assert
(
sizeof
(
ToT
)
>
sizeof
(
FromT
)
"
Not
promoting
"
)
;
return
Vec1
<
ToT
>
(
static_cast
<
ToT
>
(
from
.
raw
)
)
;
}
HWY_API
Vec1
<
float
>
DemoteTo
(
Sisd
<
float
>
Vec1
<
double
>
from
)
{
if
(
IsInf
(
from
)
.
bits
|
|
Abs
(
from
)
.
raw
>
static_cast
<
double
>
(
HighestValue
<
float
>
(
)
)
)
{
return
Vec1
<
float
>
(
detail
:
:
SignBit
(
from
.
raw
)
?
LowestValue
<
float
>
(
)
:
HighestValue
<
float
>
(
)
)
;
}
return
Vec1
<
float
>
(
static_cast
<
float
>
(
from
.
raw
)
)
;
}
HWY_API
Vec1
<
int32_t
>
DemoteTo
(
Sisd
<
int32_t
>
Vec1
<
double
>
from
)
{
if
(
IsInf
(
from
)
.
bits
|
|
Abs
(
from
)
.
raw
>
static_cast
<
double
>
(
HighestValue
<
int32_t
>
(
)
)
)
{
return
Vec1
<
int32_t
>
(
detail
:
:
SignBit
(
from
.
raw
)
?
LowestValue
<
int32_t
>
(
)
:
HighestValue
<
int32_t
>
(
)
)
;
}
return
Vec1
<
int32_t
>
(
static_cast
<
int32_t
>
(
from
.
raw
)
)
;
}
template
<
typename
FromT
typename
ToT
>
HWY_API
Vec1
<
ToT
>
DemoteTo
(
Sisd
<
ToT
>
Vec1
<
FromT
>
from
)
{
static_assert
(
!
IsFloat
<
FromT
>
(
)
"
FromT
=
double
are
handled
above
"
)
;
static_assert
(
sizeof
(
ToT
)
<
sizeof
(
FromT
)
"
Not
demoting
"
)
;
from
.
raw
=
HWY_MIN
(
HWY_MAX
(
LimitsMin
<
ToT
>
(
)
from
.
raw
)
LimitsMax
<
ToT
>
(
)
)
;
return
Vec1
<
ToT
>
(
static_cast
<
ToT
>
(
from
.
raw
)
)
;
}
HWY_API
Vec1
<
float
>
PromoteTo
(
Sisd
<
float
>
const
Vec1
<
float16_t
>
v
)
{
uint16_t
bits16
;
CopySameSize
(
&
v
.
raw
&
bits16
)
;
const
uint32_t
sign
=
static_cast
<
uint32_t
>
(
bits16
>
>
15
)
;
const
uint32_t
biased_exp
=
(
bits16
>
>
10
)
&
0x1F
;
const
uint32_t
mantissa
=
bits16
&
0x3FF
;
if
(
biased_exp
=
=
0
)
{
const
float
subnormal
=
(
1
.
0f
/
16384
)
*
(
static_cast
<
float
>
(
mantissa
)
*
(
1
.
0f
/
1024
)
)
;
return
Vec1
<
float
>
(
sign
?
-
subnormal
:
subnormal
)
;
}
const
uint32_t
biased_exp32
=
biased_exp
+
(
127
-
15
)
;
const
uint32_t
mantissa32
=
mantissa
<
<
(
23
-
10
)
;
const
uint32_t
bits32
=
(
sign
<
<
31
)
|
(
biased_exp32
<
<
23
)
|
mantissa32
;
float
out
;
CopySameSize
(
&
bits32
&
out
)
;
return
Vec1
<
float
>
(
out
)
;
}
HWY_API
Vec1
<
float
>
PromoteTo
(
Sisd
<
float
>
d
const
Vec1
<
bfloat16_t
>
v
)
{
return
Set
(
d
F32FromBF16
(
v
.
raw
)
)
;
}
HWY_API
Vec1
<
float16_t
>
DemoteTo
(
Sisd
<
float16_t
>
const
Vec1
<
float
>
v
)
{
uint32_t
bits32
;
CopySameSize
(
&
v
.
raw
&
bits32
)
;
const
uint32_t
sign
=
bits32
>
>
31
;
const
uint32_t
biased_exp32
=
(
bits32
>
>
23
)
&
0xFF
;
const
uint32_t
mantissa32
=
bits32
&
0x7FFFFF
;
const
int32_t
exp
=
HWY_MIN
(
static_cast
<
int32_t
>
(
biased_exp32
)
-
127
15
)
;
Vec1
<
float16_t
>
out
;
if
(
exp
<
-
24
)
{
const
uint16_t
zero
=
0
;
CopySameSize
(
&
zero
&
out
.
raw
)
;
return
out
;
}
uint32_t
biased_exp16
mantissa16
;
if
(
exp
<
-
14
)
{
biased_exp16
=
0
;
const
uint32_t
sub_exp
=
static_cast
<
uint32_t
>
(
-
14
-
exp
)
;
HWY_DASSERT
(
1
<
=
sub_exp
&
&
sub_exp
<
11
)
;
mantissa16
=
static_cast
<
uint32_t
>
(
(
1u
<
<
(
10
-
sub_exp
)
)
+
(
mantissa32
>
>
(
13
+
sub_exp
)
)
)
;
}
else
{
biased_exp16
=
static_cast
<
uint32_t
>
(
exp
+
15
)
;
HWY_DASSERT
(
1
<
=
biased_exp16
&
&
biased_exp16
<
31
)
;
mantissa16
=
mantissa32
>
>
13
;
}
HWY_DASSERT
(
mantissa16
<
1024
)
;
const
uint32_t
bits16
=
(
sign
<
<
15
)
|
(
biased_exp16
<
<
10
)
|
mantissa16
;
HWY_DASSERT
(
bits16
<
0x10000
)
;
const
uint16_t
narrowed
=
static_cast
<
uint16_t
>
(
bits16
)
;
CopySameSize
(
&
narrowed
&
out
.
raw
)
;
return
out
;
}
HWY_API
Vec1
<
bfloat16_t
>
DemoteTo
(
Sisd
<
bfloat16_t
>
d
const
Vec1
<
float
>
v
)
{
return
Set
(
d
BF16FromF32
(
v
.
raw
)
)
;
}
template
<
typename
FromT
typename
ToT
HWY_IF_FLOAT
(
FromT
)
>
HWY_API
Vec1
<
ToT
>
ConvertTo
(
Sisd
<
ToT
>
Vec1
<
FromT
>
from
)
{
static_assert
(
sizeof
(
ToT
)
=
=
sizeof
(
FromT
)
"
Should
have
same
size
"
)
;
const
double
f
=
static_cast
<
double
>
(
from
.
raw
)
;
if
(
IsInf
(
from
)
.
bits
|
|
Abs
(
Vec1
<
double
>
(
f
)
)
.
raw
>
static_cast
<
double
>
(
LimitsMax
<
ToT
>
(
)
)
)
{
return
Vec1
<
ToT
>
(
detail
:
:
SignBit
(
from
.
raw
)
?
LimitsMin
<
ToT
>
(
)
:
LimitsMax
<
ToT
>
(
)
)
;
}
return
Vec1
<
ToT
>
(
static_cast
<
ToT
>
(
from
.
raw
)
)
;
}
template
<
typename
FromT
typename
ToT
HWY_IF_NOT_FLOAT
(
FromT
)
>
HWY_API
Vec1
<
ToT
>
ConvertTo
(
Sisd
<
ToT
>
Vec1
<
FromT
>
from
)
{
static_assert
(
sizeof
(
ToT
)
=
=
sizeof
(
FromT
)
"
Should
have
same
size
"
)
;
return
Vec1
<
ToT
>
(
static_cast
<
ToT
>
(
from
.
raw
)
)
;
}
HWY_API
Vec1
<
uint8_t
>
U8FromU32
(
const
Vec1
<
uint32_t
>
v
)
{
return
DemoteTo
(
Sisd
<
uint8_t
>
(
)
v
)
;
}
HWY_API
Vec1
<
uint8_t
>
TruncateTo
(
Sisd
<
uint8_t
>
const
Vec1
<
uint64_t
>
v
)
{
return
Vec1
<
uint8_t
>
{
static_cast
<
uint8_t
>
(
v
.
raw
&
0xFF
)
}
;
}
HWY_API
Vec1
<
uint16_t
>
TruncateTo
(
Sisd
<
uint16_t
>
const
Vec1
<
uint64_t
>
v
)
{
return
Vec1
<
uint16_t
>
{
static_cast
<
uint16_t
>
(
v
.
raw
&
0xFFFF
)
}
;
}
HWY_API
Vec1
<
uint32_t
>
TruncateTo
(
Sisd
<
uint32_t
>
const
Vec1
<
uint64_t
>
v
)
{
return
Vec1
<
uint32_t
>
{
static_cast
<
uint32_t
>
(
v
.
raw
&
0xFFFFFFFFu
)
}
;
}
HWY_API
Vec1
<
uint8_t
>
TruncateTo
(
Sisd
<
uint8_t
>
const
Vec1
<
uint32_t
>
v
)
{
return
Vec1
<
uint8_t
>
{
static_cast
<
uint8_t
>
(
v
.
raw
&
0xFF
)
}
;
}
HWY_API
Vec1
<
uint16_t
>
TruncateTo
(
Sisd
<
uint16_t
>
const
Vec1
<
uint32_t
>
v
)
{
return
Vec1
<
uint16_t
>
{
static_cast
<
uint16_t
>
(
v
.
raw
&
0xFFFF
)
}
;
}
HWY_API
Vec1
<
uint8_t
>
TruncateTo
(
Sisd
<
uint8_t
>
const
Vec1
<
uint16_t
>
v
)
{
return
Vec1
<
uint8_t
>
{
static_cast
<
uint8_t
>
(
v
.
raw
&
0xFF
)
}
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
LowerHalf
(
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
LowerHalf
(
Sisd
<
T
>
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
T
GetLane
(
const
Vec1
<
T
>
v
)
{
return
v
.
raw
;
}
template
<
typename
T
>
HWY_API
T
ExtractLane
(
const
Vec1
<
T
>
v
size_t
i
)
{
HWY_DASSERT
(
i
=
=
0
)
;
(
void
)
i
;
return
v
.
raw
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
InsertLane
(
Vec1
<
T
>
v
size_t
i
T
t
)
{
HWY_DASSERT
(
i
=
=
0
)
;
(
void
)
i
;
v
.
raw
=
t
;
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
DupEven
(
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
OddEven
(
Vec1
<
T
>
Vec1
<
T
>
even
)
{
return
even
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
OddEvenBlocks
(
Vec1
<
T
>
Vec1
<
T
>
even
)
{
return
even
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
SwapAdjacentBlocks
(
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
typename
T
>
struct
Indices1
{
MakeSigned
<
T
>
raw
;
}
;
template
<
typename
T
typename
TI
>
HWY_API
Indices1
<
T
>
IndicesFromVec
(
Sisd
<
T
>
Vec1
<
TI
>
vec
)
{
static_assert
(
sizeof
(
T
)
=
=
sizeof
(
TI
)
"
Index
size
must
match
lane
size
"
)
;
HWY_DASSERT
(
vec
.
raw
=
=
0
)
;
return
Indices1
<
T
>
{
vec
.
raw
}
;
}
template
<
typename
T
typename
TI
>
HWY_API
Indices1
<
T
>
SetTableIndices
(
Sisd
<
T
>
d
const
TI
*
idx
)
{
return
IndicesFromVec
(
d
LoadU
(
Sisd
<
TI
>
(
)
idx
)
)
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
TableLookupLanes
(
const
Vec1
<
T
>
v
const
Indices1
<
T
>
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
ReverseBlocks
(
Sisd
<
T
>
const
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Reverse
(
Sisd
<
T
>
const
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Reverse2
(
Sisd
<
T
>
const
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Reverse4
(
Sisd
<
T
>
const
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Reverse8
(
Sisd
<
T
>
const
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
int
kLane
typename
T
>
HWY_API
Vec1
<
T
>
Broadcast
(
const
Vec1
<
T
>
v
)
{
static_assert
(
kLane
=
=
0
"
Scalar
only
has
one
lane
"
)
;
return
v
;
}
template
<
typename
T
typename
TI
>
HWY_API
Vec1
<
TI
>
TableLookupBytes
(
const
Vec1
<
T
>
in
const
Vec1
<
TI
>
indices
)
{
uint8_t
in_bytes
[
sizeof
(
T
)
]
;
uint8_t
idx_bytes
[
sizeof
(
T
)
]
;
uint8_t
out_bytes
[
sizeof
(
T
)
]
;
CopyBytes
<
sizeof
(
T
)
>
(
&
in
&
in_bytes
)
;
CopyBytes
<
sizeof
(
T
)
>
(
&
indices
&
idx_bytes
)
;
for
(
size_t
i
=
0
;
i
<
sizeof
(
T
)
;
+
+
i
)
{
out_bytes
[
i
]
=
in_bytes
[
idx_bytes
[
i
]
]
;
}
TI
out
;
CopyBytes
<
sizeof
(
TI
)
>
(
&
out_bytes
&
out
)
;
return
Vec1
<
TI
>
{
out
}
;
}
template
<
typename
T
typename
TI
>
HWY_API
Vec1
<
TI
>
TableLookupBytesOr0
(
const
Vec1
<
T
>
in
const
Vec1
<
TI
>
indices
)
{
uint8_t
in_bytes
[
sizeof
(
T
)
]
;
uint8_t
idx_bytes
[
sizeof
(
T
)
]
;
uint8_t
out_bytes
[
sizeof
(
T
)
]
;
CopyBytes
<
sizeof
(
T
)
>
(
&
in
&
in_bytes
)
;
CopyBytes
<
sizeof
(
T
)
>
(
&
indices
&
idx_bytes
)
;
for
(
size_t
i
=
0
;
i
<
sizeof
(
T
)
;
+
+
i
)
{
out_bytes
[
i
]
=
idx_bytes
[
i
]
&
0x80
?
0
:
in_bytes
[
idx_bytes
[
i
]
]
;
}
TI
out
;
CopyBytes
<
sizeof
(
TI
)
>
(
&
out_bytes
&
out
)
;
return
Vec1
<
TI
>
{
out
}
;
}
HWY_API
Vec1
<
uint16_t
>
ZipLower
(
const
Vec1
<
uint8_t
>
a
const
Vec1
<
uint8_t
>
b
)
{
return
Vec1
<
uint16_t
>
(
static_cast
<
uint16_t
>
(
(
uint32_t
{
b
.
raw
}
<
<
8
)
+
a
.
raw
)
)
;
}
HWY_API
Vec1
<
uint32_t
>
ZipLower
(
const
Vec1
<
uint16_t
>
a
const
Vec1
<
uint16_t
>
b
)
{
return
Vec1
<
uint32_t
>
(
(
uint32_t
{
b
.
raw
}
<
<
16
)
+
a
.
raw
)
;
}
HWY_API
Vec1
<
uint64_t
>
ZipLower
(
const
Vec1
<
uint32_t
>
a
const
Vec1
<
uint32_t
>
b
)
{
return
Vec1
<
uint64_t
>
(
(
uint64_t
{
b
.
raw
}
<
<
32
)
+
a
.
raw
)
;
}
HWY_API
Vec1
<
int16_t
>
ZipLower
(
const
Vec1
<
int8_t
>
a
const
Vec1
<
int8_t
>
b
)
{
return
Vec1
<
int16_t
>
(
static_cast
<
int16_t
>
(
(
int32_t
{
b
.
raw
}
<
<
8
)
+
a
.
raw
)
)
;
}
HWY_API
Vec1
<
int32_t
>
ZipLower
(
const
Vec1
<
int16_t
>
a
const
Vec1
<
int16_t
>
b
)
{
return
Vec1
<
int32_t
>
(
(
int32_t
{
b
.
raw
}
<
<
16
)
+
a
.
raw
)
;
}
HWY_API
Vec1
<
int64_t
>
ZipLower
(
const
Vec1
<
int32_t
>
a
const
Vec1
<
int32_t
>
b
)
{
return
Vec1
<
int64_t
>
(
(
int64_t
{
b
.
raw
}
<
<
32
)
+
a
.
raw
)
;
}
template
<
typename
T
typename
TW
=
MakeWide
<
T
>
class
VW
=
Vec1
<
TW
>
>
HWY_API
VW
ZipLower
(
Sisd
<
TW
>
Vec1
<
T
>
a
Vec1
<
T
>
b
)
{
return
VW
(
static_cast
<
TW
>
(
(
TW
{
b
.
raw
}
<
<
(
sizeof
(
T
)
*
8
)
)
+
a
.
raw
)
)
;
}
template
<
typename
T
>
HWY_API
bool
AllFalse
(
Sisd
<
T
>
const
Mask1
<
T
>
mask
)
{
return
mask
.
bits
=
=
0
;
}
template
<
typename
T
>
HWY_API
bool
AllTrue
(
Sisd
<
T
>
const
Mask1
<
T
>
mask
)
{
return
mask
.
bits
!
=
0
;
}
template
<
typename
T
>
HWY_API
Mask1
<
T
>
LoadMaskBits
(
Sisd
<
T
>
const
uint8_t
*
HWY_RESTRICT
bits
)
{
return
Mask1
<
T
>
:
:
FromBool
(
(
bits
[
0
]
&
1
)
!
=
0
)
;
}
template
<
typename
T
>
HWY_API
size_t
StoreMaskBits
(
Sisd
<
T
>
d
const
Mask1
<
T
>
mask
uint8_t
*
bits
)
{
*
bits
=
AllTrue
(
d
mask
)
;
return
1
;
}
template
<
typename
T
>
HWY_API
size_t
CountTrue
(
Sisd
<
T
>
const
Mask1
<
T
>
mask
)
{
return
mask
.
bits
=
=
0
?
0
:
1
;
}
template
<
typename
T
>
HWY_API
intptr_t
FindFirstTrue
(
Sisd
<
T
>
const
Mask1
<
T
>
mask
)
{
return
mask
.
bits
=
=
0
?
-
1
:
0
;
}
template
<
typename
T
>
HWY_API
size_t
FindKnownFirstTrue
(
Sisd
<
T
>
const
Mask1
<
T
>
)
{
return
0
;
}
template
<
typename
T
>
struct
CompressIsPartition
{
enum
{
value
=
1
}
;
}
;
template
<
typename
T
>
HWY_API
Vec1
<
T
>
Compress
(
Vec1
<
T
>
v
const
Mask1
<
T
>
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
CompressNot
(
Vec1
<
T
>
v
const
Mask1
<
T
>
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
size_t
CompressStore
(
Vec1
<
T
>
v
const
Mask1
<
T
>
mask
Sisd
<
T
>
d
T
*
HWY_RESTRICT
unaligned
)
{
StoreU
(
Compress
(
v
mask
)
d
unaligned
)
;
return
CountTrue
(
d
mask
)
;
}
template
<
typename
T
>
HWY_API
size_t
CompressBlendedStore
(
Vec1
<
T
>
v
const
Mask1
<
T
>
mask
Sisd
<
T
>
d
T
*
HWY_RESTRICT
unaligned
)
{
if
(
!
mask
.
bits
)
return
0
;
StoreU
(
v
d
unaligned
)
;
return
1
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
CompressBits
(
Vec1
<
T
>
v
const
uint8_t
*
HWY_RESTRICT
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
size_t
CompressBitsStore
(
Vec1
<
T
>
v
const
uint8_t
*
HWY_RESTRICT
bits
Sisd
<
T
>
d
T
*
HWY_RESTRICT
unaligned
)
{
const
Mask1
<
T
>
mask
=
LoadMaskBits
(
d
bits
)
;
StoreU
(
Compress
(
v
mask
)
d
unaligned
)
;
return
CountTrue
(
d
mask
)
;
}
HWY_API
Vec1
<
float
>
ReorderWidenMulAccumulate
(
Sisd
<
float
>
Vec1
<
bfloat16_t
>
a
Vec1
<
bfloat16_t
>
b
const
Vec1
<
float
>
sum0
Vec1
<
float
>
&
)
{
return
MulAdd
(
Vec1
<
float
>
(
F32FromBF16
(
a
.
raw
)
)
Vec1
<
float
>
(
F32FromBF16
(
b
.
raw
)
)
sum0
)
;
}
HWY_API
Vec1
<
int32_t
>
ReorderWidenMulAccumulate
(
Sisd
<
int32_t
>
Vec1
<
int16_t
>
a
Vec1
<
int16_t
>
b
const
Vec1
<
int32_t
>
sum0
Vec1
<
int32_t
>
&
)
{
return
Vec1
<
int32_t
>
(
a
.
raw
*
b
.
raw
+
sum0
.
raw
)
;
}
template
<
typename
TW
>
HWY_API
Vec1
<
TW
>
RearrangeToOddPlusEven
(
const
Vec1
<
TW
>
sum0
Vec1
<
TW
>
)
{
return
sum0
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
SumOfLanes
(
Sisd
<
T
>
const
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
MinOfLanes
(
Sisd
<
T
>
const
Vec1
<
T
>
v
)
{
return
v
;
}
template
<
typename
T
>
HWY_API
Vec1
<
T
>
MaxOfLanes
(
Sisd
<
T
>
const
Vec1
<
T
>
v
)
{
return
v
;
}
}
}
HWY_AFTER_NAMESPACE
(
)
;
