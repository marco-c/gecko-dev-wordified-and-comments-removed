#
if
defined
(
HWY_SET_MACROS_PER_TARGET
)
=
=
defined
(
HWY_TARGET_TOGGLE
)
#
ifdef
HWY_SET_MACROS_PER_TARGET
#
undef
HWY_SET_MACROS_PER_TARGET
#
else
#
define
HWY_SET_MACROS_PER_TARGET
#
endif
#
endif
#
include
"
hwy
/
targets
.
h
"
#
undef
HWY_NAMESPACE
#
undef
HWY_ALIGN
#
undef
HWY_LANES
#
undef
HWY_CAP_INTEGER64
#
undef
HWY_CAP_FLOAT64
#
undef
HWY_CAP_GE256
#
undef
HWY_CAP_GE512
#
undef
HWY_TARGET_STR
#
if
HWY_TARGET
=
=
HWY_SSE4
#
define
HWY_NAMESPACE
N_SSE4
#
define
HWY_ALIGN
alignas
(
16
)
#
define
HWY_LANES
(
T
)
(
16
/
sizeof
(
T
)
)
#
define
HWY_CAP_INTEGER64
1
#
define
HWY_CAP_FLOAT64
1
#
define
HWY_CAP_GE256
0
#
define
HWY_CAP_GE512
0
#
define
HWY_TARGET_STR
"
sse2
ssse3
sse4
.
1
"
#
elif
HWY_TARGET
=
=
HWY_AVX2
#
define
HWY_NAMESPACE
N_AVX2
#
define
HWY_ALIGN
alignas
(
32
)
#
define
HWY_LANES
(
T
)
(
32
/
sizeof
(
T
)
)
#
define
HWY_CAP_INTEGER64
1
#
define
HWY_CAP_FLOAT64
1
#
define
HWY_CAP_GE256
1
#
define
HWY_CAP_GE512
0
#
if
defined
(
HWY_DISABLE_BMI2_FMA
)
#
define
HWY_TARGET_STR
"
avx
avx2
f16c
"
#
else
#
define
HWY_TARGET_STR
"
avx
avx2
bmi
bmi2
fma
f16c
"
#
endif
#
elif
HWY_TARGET
=
=
HWY_AVX3
#
define
HWY_ALIGN
alignas
(
64
)
#
define
HWY_LANES
(
T
)
(
64
/
sizeof
(
T
)
)
#
define
HWY_CAP_INTEGER64
1
#
define
HWY_CAP_FLOAT64
1
#
define
HWY_CAP_GE256
1
#
define
HWY_CAP_GE512
1
#
define
HWY_NAMESPACE
N_AVX3
#
define
HWY_TARGET_STR
\
"
avx
avx2
bmi
bmi2
fma
f16c
avx512f
avx512vl
avx512dq
avx512bw
"
#
elif
HWY_TARGET
=
=
HWY_PPC8
#
define
HWY_ALIGN
alignas
(
16
)
#
define
HWY_LANES
(
T
)
(
16
/
sizeof
(
T
)
)
#
define
HWY_CAP_INTEGER64
1
#
define
HWY_CAP_FLOAT64
1
#
define
HWY_CAP_GE256
0
#
define
HWY_CAP_GE512
0
#
define
HWY_NAMESPACE
N_PPC8
#
define
HWY_TARGET_STR
"
altivec
vsx
"
#
elif
HWY_TARGET
=
=
HWY_NEON
#
define
HWY_ALIGN
alignas
(
16
)
#
define
HWY_LANES
(
T
)
(
16
/
sizeof
(
T
)
)
#
define
HWY_CAP_INTEGER64
1
#
define
HWY_CAP_GE256
0
#
define
HWY_CAP_GE512
0
#
if
HWY_ARCH_ARM_A64
#
define
HWY_CAP_FLOAT64
1
#
else
#
define
HWY_CAP_FLOAT64
0
#
endif
#
define
HWY_NAMESPACE
N_NEON
#
elif
HWY_TARGET
=
=
HWY_WASM
#
define
HWY_ALIGN
alignas
(
16
)
#
define
HWY_LANES
(
T
)
(
16
/
sizeof
(
T
)
)
#
define
HWY_CAP_INTEGER64
0
#
define
HWY_CAP_FLOAT64
0
#
define
HWY_CAP_GE256
0
#
define
HWY_CAP_GE512
0
#
define
HWY_NAMESPACE
N_WASM
#
define
HWY_TARGET_STR
"
simd128
"
#
elif
HWY_TARGET
=
=
HWY_RVV
#
define
HWY_ALIGN
#
define
HWY_LANES
(
T
)
(
4096
/
sizeof
(
T
)
)
#
define
HWY_CAP_INTEGER64
1
#
define
HWY_CAP_FLOAT64
1
#
define
HWY_CAP_GE256
0
#
define
HWY_CAP_GE512
0
#
define
HWY_NAMESPACE
N_RVV
#
elif
HWY_TARGET
=
=
HWY_SCALAR
#
define
HWY_ALIGN
#
define
HWY_LANES
(
T
)
1
#
define
HWY_CAP_INTEGER64
1
#
define
HWY_CAP_FLOAT64
1
#
define
HWY_CAP_GE256
0
#
define
HWY_CAP_GE512
0
#
define
HWY_NAMESPACE
N_SCALAR
#
else
#
pragma
message
(
"
HWY_TARGET
does
not
match
any
known
target
"
)
#
endif
#
undef
HWY_BEFORE_NAMESPACE
#
if
defined
(
HWY_TARGET_STR
)
#
define
HWY_BEFORE_NAMESPACE
(
)
\
HWY_PUSH_ATTRIBUTES
(
HWY_TARGET_STR
)
\
static_assert
(
true
"
For
requiring
trailing
semicolon
"
)
#
else
#
define
HWY_BEFORE_NAMESPACE
(
)
\
static_assert
(
true
"
For
requiring
trailing
semicolon
"
)
#
endif
#
undef
HWY_AFTER_NAMESPACE
#
if
defined
(
HWY_TARGET_STR
)
#
define
HWY_AFTER_NAMESPACE
(
)
\
HWY_POP_ATTRIBUTES
\
static_assert
(
true
"
For
requiring
trailing
semicolon
"
)
#
else
#
define
HWY_AFTER_NAMESPACE
(
)
\
static_assert
(
true
"
For
requiring
trailing
semicolon
"
)
#
endif
#
undef
HWY_ATTR
#
if
defined
(
HWY_TARGET_STR
)
&
&
HWY_HAS_ATTRIBUTE
(
target
)
#
define
HWY_ATTR
__attribute__
(
(
target
(
HWY_TARGET_STR
)
)
)
#
else
#
define
HWY_ATTR
#
endif
#
undef
HWY_GATHER_LANES
#
define
HWY_GATHER_LANES
(
T
)
HWY_LANES
(
T
)
