#
include
<
cmath
>
#
include
"
hwy
/
ops
/
set_macros
-
inl
.
h
"
HWY_BEFORE_NAMESPACE
(
)
;
namespace
hwy
{
namespace
HWY_NAMESPACE
{
template
<
typename
Lane
size_t
N
>
struct
Simd
{
constexpr
Simd
(
)
=
default
;
using
T
=
Lane
;
static_assert
(
(
N
&
(
N
-
1
)
)
=
=
0
&
&
N
!
=
0
"
N
must
be
a
power
of
two
"
)
;
template
<
typename
NewLane
>
using
Rebind
=
Simd
<
NewLane
N
>
;
template
<
typename
NewLane
>
using
Repartition
=
Simd
<
NewLane
(
N
*
sizeof
(
Lane
)
+
sizeof
(
NewLane
)
-
1
)
/
sizeof
(
NewLane
)
>
;
using
Half
=
Simd
<
T
(
N
+
1
)
/
2
>
;
using
Twice
=
Simd
<
T
2
*
N
>
;
}
;
template
<
class
D
>
using
TFromD
=
typename
D
:
:
T
;
template
<
class
T
class
D
>
using
Rebind
=
typename
D
:
:
template
Rebind
<
T
>
;
template
<
class
D
>
using
RebindToSigned
=
Rebind
<
MakeSigned
<
TFromD
<
D
>
>
D
>
;
template
<
class
D
>
using
RebindToUnsigned
=
Rebind
<
MakeUnsigned
<
TFromD
<
D
>
>
D
>
;
template
<
class
D
>
using
RebindToFloat
=
Rebind
<
MakeFloat
<
TFromD
<
D
>
>
D
>
;
template
<
class
T
class
D
>
using
Repartition
=
typename
D
:
:
template
Repartition
<
T
>
;
template
<
class
D
>
using
RepartitionToWide
=
Repartition
<
MakeWide
<
TFromD
<
D
>
>
D
>
;
template
<
class
D
>
using
RepartitionToNarrow
=
Repartition
<
MakeNarrow
<
TFromD
<
D
>
>
D
>
;
template
<
class
D
>
using
Half
=
typename
D
:
:
Half
;
template
<
class
D
>
using
Twice
=
typename
D
:
:
Twice
;
#
define
HWY_IF_UNSIGNED_D
(
D
)
HWY_IF_UNSIGNED
(
TFromD
<
D
>
)
#
define
HWY_IF_SIGNED_D
(
D
)
HWY_IF_SIGNED
(
TFromD
<
D
>
)
#
define
HWY_IF_FLOAT_D
(
D
)
HWY_IF_FLOAT
(
TFromD
<
D
>
)
#
define
HWY_IF_NOT_FLOAT_D
(
D
)
HWY_IF_NOT_FLOAT
(
TFromD
<
D
>
)
#
define
HWY_IF_LANE_SIZE_D
(
D
bytes
)
HWY_IF_LANE_SIZE
(
TFromD
<
D
>
bytes
)
#
define
HWY_IF_NOT_LANE_SIZE_D
(
D
bytes
)
HWY_IF_NOT_LANE_SIZE
(
TFromD
<
D
>
bytes
)
template
<
typename
T
size_t
N
>
HWY_INLINE
HWY_MAYBE_UNUSED
constexpr
size_t
MaxLanes
(
Simd
<
T
N
>
)
{
return
N
;
}
#
if
HWY_TARGET
!
=
HWY_RVV
&
&
HWY_TARGET
!
=
HWY_SVE2
&
&
HWY_TARGET
!
=
HWY_SVE
template
<
typename
T
size_t
N
>
HWY_INLINE
HWY_MAYBE_UNUSED
size_t
Lanes
(
Simd
<
T
N
>
)
{
return
N
;
}
#
endif
}
}
HWY_AFTER_NAMESPACE
(
)
;
