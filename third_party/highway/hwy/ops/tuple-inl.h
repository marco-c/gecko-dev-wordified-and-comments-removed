#
if
!
defined
(
HWY_NAMESPACE
)
#
include
"
hwy
/
base
.
h
"
template
<
class
D
>
using
VFromD
=
int
;
#
endif
template
<
class
D
>
struct
Vec2
{
VFromD
<
D
>
v0
;
VFromD
<
D
>
v1
;
}
;
template
<
class
D
>
struct
Vec3
{
VFromD
<
D
>
v0
;
VFromD
<
D
>
v1
;
VFromD
<
D
>
v2
;
}
;
template
<
class
D
>
struct
Vec4
{
VFromD
<
D
>
v0
;
VFromD
<
D
>
v1
;
VFromD
<
D
>
v2
;
VFromD
<
D
>
v3
;
}
;
template
<
class
D
>
HWY_API
Vec2
<
D
>
Create2
(
D
VFromD
<
D
>
v0
VFromD
<
D
>
v1
)
{
return
Vec2
<
D
>
{
v0
v1
}
;
}
template
<
class
D
>
HWY_API
Vec3
<
D
>
Create3
(
D
VFromD
<
D
>
v0
VFromD
<
D
>
v1
VFromD
<
D
>
v2
)
{
return
Vec3
<
D
>
{
v0
v1
v2
}
;
}
template
<
class
D
>
HWY_API
Vec4
<
D
>
Create4
(
D
VFromD
<
D
>
v0
VFromD
<
D
>
v1
VFromD
<
D
>
v2
VFromD
<
D
>
v3
)
{
return
Vec4
<
D
>
{
v0
v1
v2
v3
}
;
}
template
<
size_t
kIndex
class
D
>
HWY_API
VFromD
<
D
>
Get2
(
Vec2
<
D
>
tuple
)
{
static_assert
(
kIndex
<
2
"
Tuple
index
out
of
bounds
"
)
;
return
kIndex
=
=
0
?
tuple
.
v0
:
tuple
.
v1
;
}
template
<
size_t
kIndex
class
D
>
HWY_API
VFromD
<
D
>
Get3
(
Vec3
<
D
>
tuple
)
{
static_assert
(
kIndex
<
3
"
Tuple
index
out
of
bounds
"
)
;
return
kIndex
=
=
0
?
tuple
.
v0
:
kIndex
=
=
1
?
tuple
.
v1
:
tuple
.
v2
;
}
template
<
size_t
kIndex
class
D
>
HWY_API
VFromD
<
D
>
Get4
(
Vec4
<
D
>
tuple
)
{
static_assert
(
kIndex
<
4
"
Tuple
index
out
of
bounds
"
)
;
return
kIndex
=
=
0
?
tuple
.
v0
:
kIndex
=
=
1
?
tuple
.
v1
:
kIndex
=
=
2
?
tuple
.
v2
:
tuple
.
v3
;
}
template
<
size_t
kIndex
class
D
>
HWY_API
Vec2
<
D
>
Set2
(
Vec2
<
D
>
tuple
VFromD
<
D
>
val
)
{
static_assert
(
kIndex
<
2
"
Tuple
index
out
of
bounds
"
)
;
if
(
kIndex
=
=
0
)
{
tuple
.
v0
=
val
;
}
else
{
tuple
.
v1
=
val
;
}
return
tuple
;
}
template
<
size_t
kIndex
class
D
>
HWY_API
Vec3
<
D
>
Set3
(
Vec3
<
D
>
tuple
VFromD
<
D
>
val
)
{
static_assert
(
kIndex
<
3
"
Tuple
index
out
of
bounds
"
)
;
if
(
kIndex
=
=
0
)
{
tuple
.
v0
=
val
;
}
else
if
(
kIndex
=
=
1
)
{
tuple
.
v1
=
val
;
}
else
{
tuple
.
v2
=
val
;
}
return
tuple
;
}
template
<
size_t
kIndex
class
D
>
HWY_API
Vec4
<
D
>
Set4
(
Vec4
<
D
>
tuple
VFromD
<
D
>
val
)
{
static_assert
(
kIndex
<
4
"
Tuple
index
out
of
bounds
"
)
;
if
(
kIndex
=
=
0
)
{
tuple
.
v0
=
val
;
}
else
if
(
kIndex
=
=
1
)
{
tuple
.
v1
=
val
;
}
else
if
(
kIndex
=
=
2
)
{
tuple
.
v2
=
val
;
}
else
{
tuple
.
v3
=
val
;
}
return
tuple
;
}
