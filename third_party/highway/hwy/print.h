#
ifndef
HWY_PRINT_H_
#
define
HWY_PRINT_H_
#
include
<
stddef
.
h
>
#
include
<
stdio
.
h
>
#
include
"
hwy
/
base
.
h
"
#
include
"
hwy
/
highway_export
.
h
"
namespace
hwy
{
namespace
detail
{
struct
TypeInfo
{
size_t
sizeof_t
;
bool
is_float
;
bool
is_signed
;
bool
is_bf16
;
}
;
template
<
typename
T
>
HWY_INLINE
TypeInfo
MakeTypeInfo
(
)
{
TypeInfo
info
;
info
.
sizeof_t
=
sizeof
(
T
)
;
info
.
is_float
=
IsFloat
<
T
>
(
)
;
info
.
is_signed
=
IsSigned
<
T
>
(
)
;
info
.
is_bf16
=
IsSame
<
T
bfloat16_t
>
(
)
;
return
info
;
}
HWY_DLLEXPORT
void
TypeName
(
const
TypeInfo
&
info
size_t
N
char
*
string100
)
;
HWY_DLLEXPORT
void
ToString
(
const
TypeInfo
&
info
const
void
*
ptr
char
*
string100
)
;
HWY_DLLEXPORT
void
PrintArray
(
const
TypeInfo
&
info
const
char
*
caption
const
void
*
array_void
size_t
N
size_t
lane_u
=
0
size_t
max_lanes
=
7
)
;
}
template
<
typename
T
>
HWY_NOINLINE
void
PrintValue
(
T
value
)
{
char
str
[
100
]
;
detail
:
:
ToString
(
hwy
:
:
detail
:
:
MakeTypeInfo
<
T
>
(
)
&
value
str
)
;
fprintf
(
stderr
"
%
s
"
str
)
;
}
template
<
typename
T
>
HWY_NOINLINE
void
PrintArray
(
const
T
*
value
size_t
count
)
{
detail
:
:
PrintArray
(
hwy
:
:
detail
:
:
MakeTypeInfo
<
T
>
(
)
"
"
value
count
0
count
)
;
}
}
#
endif
