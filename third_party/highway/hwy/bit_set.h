#
ifndef
HIGHWAY_HWY_BIT_SET_H_
#
define
HIGHWAY_HWY_BIT_SET_H_
#
include
<
stddef
.
h
>
#
include
"
hwy
/
base
.
h
"
namespace
hwy
{
class
BitSet64
{
public
:
void
Set
(
size_t
i
)
{
HWY_DASSERT
(
i
<
64
)
;
bits_
|
=
(
1ULL
<
<
i
)
;
HWY_DASSERT
(
Get
(
i
)
)
;
}
void
SetNonzeroBitsFrom64
(
uint64_t
bits
)
{
bits_
|
=
bits
;
}
void
Clear
(
size_t
i
)
{
HWY_DASSERT
(
i
<
64
)
;
bits_
&
=
~
(
1ULL
<
<
i
)
;
}
bool
Get
(
size_t
i
)
const
{
HWY_DASSERT
(
i
<
64
)
;
return
(
bits_
&
(
1ULL
<
<
i
)
)
!
=
0
;
}
bool
Any
(
)
const
{
return
bits_
!
=
0
;
}
size_t
First
(
)
const
{
HWY_DASSERT
(
Any
(
)
)
;
return
Num0BitsBelowLS1Bit_Nonzero64
(
bits_
)
;
}
uint64_t
Get64
(
)
const
{
return
bits_
;
}
template
<
class
Func
>
void
Foreach
(
const
Func
&
func
)
const
{
uint64_t
remaining_bits
=
bits_
;
while
(
remaining_bits
!
=
0
)
{
const
size_t
i
=
Num0BitsBelowLS1Bit_Nonzero64
(
remaining_bits
)
;
remaining_bits
&
=
remaining_bits
-
1
;
func
(
i
)
;
}
}
size_t
Count
(
)
const
{
return
PopCount
(
bits_
)
;
}
private
:
uint64_t
bits_
=
0
;
}
;
template
<
size_t
kMaxSize
=
4096
>
class
BitSet4096
{
public
:
void
Set
(
size_t
i
)
{
HWY_DASSERT
(
i
<
kMaxSize
)
;
const
size_t
idx
=
i
/
64
;
const
size_t
mod
=
i
%
64
;
bits_
[
idx
]
.
Set
(
mod
)
;
nonzero_
.
Set
(
idx
)
;
HWY_DASSERT
(
Get
(
i
)
)
;
}
void
SetNonzeroBitsFrom64
(
uint64_t
bits
)
{
bits_
[
0
]
.
SetNonzeroBitsFrom64
(
bits
)
;
if
(
bits
)
nonzero_
.
Set
(
0
)
;
}
void
Clear
(
size_t
i
)
{
HWY_DASSERT
(
i
<
kMaxSize
)
;
const
size_t
idx
=
i
/
64
;
const
size_t
mod
=
i
%
64
;
bits_
[
idx
]
.
Clear
(
mod
)
;
if
(
!
bits_
[
idx
]
.
Any
(
)
)
{
nonzero_
.
Clear
(
idx
)
;
}
HWY_DASSERT
(
!
Get
(
i
)
)
;
}
bool
Get
(
size_t
i
)
const
{
HWY_DASSERT
(
i
<
kMaxSize
)
;
const
size_t
idx
=
i
/
64
;
const
size_t
mod
=
i
%
64
;
return
bits_
[
idx
]
.
Get
(
mod
)
;
}
bool
Any
(
)
const
{
return
nonzero_
.
Any
(
)
;
}
size_t
First
(
)
const
{
HWY_DASSERT
(
Any
(
)
)
;
const
size_t
idx
=
nonzero_
.
First
(
)
;
return
idx
*
64
+
bits_
[
idx
]
.
First
(
)
;
}
uint64_t
Get64
(
)
const
{
return
bits_
[
0
]
.
Get64
(
)
;
}
template
<
class
Func
>
void
Foreach
(
const
Func
&
func
)
const
{
nonzero_
.
Foreach
(
[
&
func
this
]
(
size_t
idx
)
{
bits_
[
idx
]
.
Foreach
(
[
idx
&
func
]
(
size_t
mod
)
{
func
(
idx
*
64
+
mod
)
;
}
)
;
}
)
;
}
size_t
Count
(
)
const
{
size_t
total
=
0
;
nonzero_
.
Foreach
(
[
&
total
this
]
(
size_t
idx
)
{
total
+
=
bits_
[
idx
]
.
Count
(
)
;
}
)
;
return
total
;
}
private
:
static_assert
(
kMaxSize
<
=
64
*
64
"
One
BitSet64
insufficient
"
)
;
BitSet64
nonzero_
;
BitSet64
bits_
[
kMaxSize
/
64
]
;
}
;
}
#
endif
