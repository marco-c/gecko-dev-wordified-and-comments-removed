#
ifndef
HIGHWAY_HWY_X86_CPUID_H_
#
define
HIGHWAY_HWY_X86_CPUID_H_
#
include
<
stdint
.
h
>
#
include
"
hwy
/
base
.
h
"
#
if
HWY_ARCH_X86
#
if
HWY_COMPILER_MSVC
|
|
HWY_COMPILER_CLANGCL
#
include
<
intrin
.
h
>
#
else
#
include
<
cpuid
.
h
>
#
endif
namespace
hwy
{
namespace
x86
{
static
inline
void
Cpuid
(
const
uint32_t
level
const
uint32_t
count
uint32_t
*
HWY_RESTRICT
abcd
)
{
#
if
HWY_COMPILER_MSVC
|
|
HWY_COMPILER_CLANGCL
int
regs
[
4
]
;
__cpuidex
(
regs
static_cast
<
int
>
(
level
)
static_cast
<
int
>
(
count
)
)
;
for
(
int
i
=
0
;
i
<
4
;
+
+
i
)
{
abcd
[
i
]
=
static_cast
<
uint32_t
>
(
regs
[
i
]
)
;
}
#
else
uint32_t
a
;
uint32_t
b
;
uint32_t
c
;
uint32_t
d
;
__cpuid_count
(
level
count
a
b
c
d
)
;
abcd
[
0
]
=
a
;
abcd
[
1
]
=
b
;
abcd
[
2
]
=
c
;
abcd
[
3
]
=
d
;
#
endif
}
static
inline
bool
IsBitSet
(
const
uint32_t
reg
const
int
index
)
{
return
(
reg
&
(
1U
<
<
index
)
)
!
=
0
;
}
static
inline
uint32_t
MaxLevel
(
)
{
uint32_t
abcd
[
4
]
;
Cpuid
(
0
0
abcd
)
;
return
abcd
[
0
]
;
}
static
inline
bool
IsAMD
(
)
{
uint32_t
abcd
[
4
]
;
Cpuid
(
0
0
abcd
)
;
const
uint32_t
max_level
=
abcd
[
0
]
;
return
max_level
>
=
1
&
&
abcd
[
1
]
=
=
0x68747541
&
&
abcd
[
2
]
=
=
0x444d4163
&
&
abcd
[
3
]
=
=
0x69746e65
;
}
}
}
#
endif
#
endif
