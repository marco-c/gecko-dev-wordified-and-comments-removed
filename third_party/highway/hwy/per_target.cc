#
ifndef
HWY_COMPILE_ALL_ATTAINABLE
#
define
HWY_COMPILE_ALL_ATTAINABLE
#
endif
#
include
"
hwy
/
per_target
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
undef
HWY_TARGET_INCLUDE
#
define
HWY_TARGET_INCLUDE
"
hwy
/
per_target
.
cc
"
#
include
"
hwy
/
foreach_target
.
h
"
#
include
"
hwy
/
highway
.
h
"
HWY_BEFORE_NAMESPACE
(
)
;
namespace
hwy
{
namespace
HWY_NAMESPACE
{
namespace
{
int64_t
GetTarget
(
)
{
return
HWY_TARGET
;
}
size_t
GetVectorBytes
(
)
{
return
Lanes
(
ScalableTag
<
uint8_t
>
(
)
)
;
}
bool
GetHaveInteger64
(
)
{
return
HWY_HAVE_INTEGER64
!
=
0
;
}
bool
GetHaveFloat16
(
)
{
return
HWY_HAVE_FLOAT16
!
=
0
;
}
bool
GetHaveFloat64
(
)
{
return
HWY_HAVE_FLOAT64
!
=
0
;
}
}
}
}
HWY_AFTER_NAMESPACE
(
)
;
#
if
HWY_ONCE
namespace
hwy
{
namespace
{
HWY_EXPORT
(
GetTarget
)
;
HWY_EXPORT
(
GetVectorBytes
)
;
HWY_EXPORT
(
GetHaveInteger64
)
;
HWY_EXPORT
(
GetHaveFloat16
)
;
HWY_EXPORT
(
GetHaveFloat64
)
;
}
HWY_DLLEXPORT
int64_t
DispatchedTarget
(
)
{
return
HWY_DYNAMIC_DISPATCH
(
GetTarget
)
(
)
;
}
HWY_DLLEXPORT
size_t
VectorBytes
(
)
{
return
HWY_DYNAMIC_DISPATCH
(
GetVectorBytes
)
(
)
;
}
HWY_DLLEXPORT
bool
HaveInteger64
(
)
{
return
HWY_DYNAMIC_DISPATCH
(
GetHaveInteger64
)
(
)
;
}
HWY_DLLEXPORT
bool
HaveFloat16
(
)
{
return
HWY_DYNAMIC_DISPATCH
(
GetHaveFloat16
)
(
)
;
}
HWY_DLLEXPORT
bool
HaveFloat64
(
)
{
return
HWY_DYNAMIC_DISPATCH
(
GetHaveFloat64
)
(
)
;
}
}
#
endif
