#
include
<
stdint
.
h
>
#
include
"
hwy
/
aligned_allocator
.
h
"
#
include
"
hwy
/
highway
.
h
"
#
include
"
hwy
/
print
.
h
"
#
if
defined
(
HIGHWAY_HWY_PRINT_INL_H_
)
=
=
\
defined
(
HWY_TARGET_TOGGLE
)
#
ifdef
HIGHWAY_HWY_PRINT_INL_H_
#
undef
HIGHWAY_HWY_PRINT_INL_H_
#
else
#
define
HIGHWAY_HWY_PRINT_INL_H_
#
endif
HWY_BEFORE_NAMESPACE
(
)
;
namespace
hwy
{
namespace
HWY_NAMESPACE
{
template
<
class
D
class
V
=
Vec
<
D
>
>
void
Print
(
const
D
d
const
char
*
caption
VecArg
<
V
>
v
size_t
lane_u
=
0
size_t
max_lanes
=
7
)
{
const
size_t
N
=
Lanes
(
d
)
;
using
T
=
TFromD
<
D
>
;
auto
lanes
=
AllocateAligned
<
T
>
(
N
)
;
Store
(
v
d
lanes
.
get
(
)
)
;
const
auto
info
=
hwy
:
:
detail
:
:
MakeTypeInfo
<
T
>
(
)
;
hwy
:
:
detail
:
:
PrintArray
(
info
caption
lanes
.
get
(
)
N
lane_u
max_lanes
)
;
}
}
}
HWY_AFTER_NAMESPACE
(
)
;
#
endif
