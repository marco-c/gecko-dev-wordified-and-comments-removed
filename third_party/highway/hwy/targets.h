#
ifndef
HIGHWAY_HWY_TARGETS_H_
#
define
HIGHWAY_HWY_TARGETS_H_
#
ifndef
HWY_NO_LIBCXX
#
include
<
vector
>
#
endif
#
include
"
hwy
/
base
.
h
"
#
include
"
hwy
/
detect_targets
.
h
"
#
include
"
hwy
/
highway_export
.
h
"
#
if
!
defined
(
HWY_NO_LIBCXX
)
#
include
<
atomic
>
#
endif
namespace
hwy
{
HWY_DLLEXPORT
int64_t
SupportedTargets
(
)
;
#
if
(
HWY_TARGETS
&
(
HWY_TARGETS
-
1
)
)
=
=
0
#
define
HWY_SUPPORTED_TARGETS
HWY_TARGETS
#
else
#
define
HWY_SUPPORTED_TARGETS
hwy
:
:
SupportedTargets
(
)
#
endif
HWY_DLLEXPORT
void
DisableTargets
(
int64_t
disabled_targets
)
;
HWY_DLLEXPORT
void
SetSupportedTargetsForTest
(
int64_t
targets
)
;
#
ifndef
HWY_NO_LIBCXX
HWY_INLINE
std
:
:
vector
<
int64_t
>
SupportedAndGeneratedTargets
(
)
{
std
:
:
vector
<
int64_t
>
ret
;
for
(
int64_t
targets
=
SupportedTargets
(
)
&
HWY_TARGETS
;
targets
!
=
0
;
targets
=
targets
&
(
targets
-
1
)
)
{
int64_t
current_target
=
targets
&
~
(
targets
-
1
)
;
ret
.
push_back
(
current_target
)
;
}
return
ret
;
}
#
endif
static
inline
HWY_MAYBE_UNUSED
const
char
*
TargetName
(
int64_t
target
)
{
switch
(
target
)
{
case
HWY_EMU128
:
return
"
EMU128
"
;
case
HWY_SCALAR
:
return
"
SCALAR
"
;
case
HWY_SSE2
:
return
"
SSE2
"
;
case
HWY_SSSE3
:
return
"
SSSE3
"
;
case
HWY_SSE4
:
return
"
SSE4
"
;
case
HWY_AVX2
:
return
"
AVX2
"
;
case
HWY_AVX3
:
return
"
AVX3
"
;
case
HWY_AVX3_DL
:
return
"
AVX3_DL
"
;
case
HWY_AVX3_ZEN4
:
return
"
AVX3_ZEN4
"
;
case
HWY_AVX3_SPR
:
return
"
AVX3_SPR
"
;
case
HWY_AVX10_2
:
return
"
AVX10_2
"
;
case
HWY_SVE2_128
:
return
"
SVE2_128
"
;
case
HWY_SVE_256
:
return
"
SVE_256
"
;
case
HWY_SVE2
:
return
"
SVE2
"
;
case
HWY_SVE
:
return
"
SVE
"
;
case
HWY_NEON_BF16
:
return
"
NEON_BF16
"
;
case
HWY_NEON
:
return
"
NEON
"
;
case
HWY_NEON_WITHOUT_AES
:
return
"
NEON_WITHOUT_AES
"
;
case
HWY_PPC8
:
return
"
PPC8
"
;
case
HWY_PPC9
:
return
"
PPC9
"
;
case
HWY_PPC10
:
return
"
PPC10
"
;
case
HWY_Z14
:
return
"
Z14
"
;
case
HWY_Z15
:
return
"
Z15
"
;
case
HWY_WASM
:
return
"
WASM
"
;
case
HWY_WASM_EMU256
:
return
"
WASM_EMU256
"
;
case
HWY_RVV
:
return
"
RVV
"
;
case
HWY_LSX
:
return
"
LSX
"
;
case
HWY_LASX
:
return
"
LASX
"
;
}
return
"
Unknown
"
;
}
#
define
HWY_VISIT_TARGETS
(
VISITOR
)
\
HWY_VISIT_AVX10_2
(
VISITOR
)
\
HWY_VISIT_AVX2
(
VISITOR
)
\
HWY_VISIT_AVX3
(
VISITOR
)
\
HWY_VISIT_AVX3_DL
(
VISITOR
)
\
HWY_VISIT_AVX3_SPR
(
VISITOR
)
\
HWY_VISIT_AVX3_ZEN4
(
VISITOR
)
\
HWY_VISIT_FALLBACK
(
VISITOR
)
\
HWY_VISIT_LASX
(
VISITOR
)
\
HWY_VISIT_LSX
(
VISITOR
)
\
HWY_VISIT_NEON
(
VISITOR
)
\
HWY_VISIT_NEON_BF16
(
VISITOR
)
\
HWY_VISIT_NEON_WITHOUT_AES
(
VISITOR
)
\
HWY_VISIT_PPC10
(
VISITOR
)
\
HWY_VISIT_PPC8
(
VISITOR
)
\
HWY_VISIT_PPC9
(
VISITOR
)
\
HWY_VISIT_RVV
(
VISITOR
)
\
HWY_VISIT_SSE2
(
VISITOR
)
\
HWY_VISIT_SSE4
(
VISITOR
)
\
HWY_VISIT_SSSE3
(
VISITOR
)
\
HWY_VISIT_SVE
(
VISITOR
)
\
HWY_VISIT_SVE2
(
VISITOR
)
\
HWY_VISIT_SVE2_128
(
VISITOR
)
\
HWY_VISIT_SVE_256
(
VISITOR
)
\
HWY_VISIT_WASM
(
VISITOR
)
\
HWY_VISIT_WASM_EMU256
(
VISITOR
)
\
HWY_VISIT_Z14
(
VISITOR
)
\
HWY_VISIT_Z15
(
VISITOR
)
#
define
HWY_CHOSEN_TARGET_MASK_SCALAR
(
1LL
<
<
(
HWY_MAX_DYNAMIC_TARGETS
+
1
)
)
#
define
HWY_CHOSEN_TARGET_SHIFT
(
X
)
\
(
(
(
(
X
)
>
>
(
HWY_HIGHEST_TARGET_BIT
+
1
-
HWY_MAX_DYNAMIC_TARGETS
)
)
&
\
(
(
1LL
<
<
HWY_MAX_DYNAMIC_TARGETS
)
-
1
)
)
\
<
<
1
)
#
define
HWY_CHOSEN_TARGET_MASK_TARGETS
\
(
HWY_CHOSEN_TARGET_SHIFT
(
HWY_TARGETS
)
|
HWY_CHOSEN_TARGET_MASK_SCALAR
|
1LL
)
#
if
HWY_ARCH_X86
#
define
HWY_MAX_DYNAMIC_TARGETS
15
#
define
HWY_HIGHEST_TARGET_BIT
HWY_HIGHEST_TARGET_BIT_X86
#
define
HWY_CHOOSE_TARGET_LIST
(
func_name
)
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
HWY_CHOOSE_AVX10_2
(
func_name
)
/
*
AVX10_2
*
/
\
HWY_CHOOSE_AVX3_SPR
(
func_name
)
/
*
AVX3_SPR
*
/
\
nullptr
/
*
reserved
*
/
\
HWY_CHOOSE_AVX3_ZEN4
(
func_name
)
/
*
AVX3_ZEN4
*
/
\
HWY_CHOOSE_AVX3_DL
(
func_name
)
/
*
AVX3_DL
*
/
\
HWY_CHOOSE_AVX3
(
func_name
)
/
*
AVX3
*
/
\
HWY_CHOOSE_AVX2
(
func_name
)
/
*
AVX2
*
/
\
nullptr
/
*
AVX
*
/
\
HWY_CHOOSE_SSE4
(
func_name
)
/
*
SSE4
*
/
\
HWY_CHOOSE_SSSE3
(
func_name
)
/
*
SSSE3
*
/
\
nullptr
/
*
reserved
-
SSE3
?
*
/
\
HWY_CHOOSE_SSE2
(
func_name
)
/
*
SSE2
*
/
#
elif
HWY_ARCH_ARM
#
define
HWY_MAX_DYNAMIC_TARGETS
15
#
define
HWY_HIGHEST_TARGET_BIT
HWY_HIGHEST_TARGET_BIT_ARM
#
define
HWY_CHOOSE_TARGET_LIST
(
func_name
)
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
HWY_CHOOSE_SVE2_128
(
func_name
)
/
*
SVE2
128
-
bit
*
/
\
HWY_CHOOSE_SVE_256
(
func_name
)
/
*
SVE
256
-
bit
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
HWY_CHOOSE_SVE2
(
func_name
)
/
*
SVE2
*
/
\
HWY_CHOOSE_SVE
(
func_name
)
/
*
SVE
*
/
\
nullptr
/
*
reserved
*
/
\
HWY_CHOOSE_NEON_BF16
(
func_name
)
/
*
NEON
+
f16
/
dot
/
bf16
*
/
\
nullptr
/
*
reserved
*
/
\
HWY_CHOOSE_NEON
(
func_name
)
/
*
NEON
*
/
\
HWY_CHOOSE_NEON_WITHOUT_AES
(
func_name
)
/
*
NEON
without
AES
*
/
#
elif
HWY_ARCH_RISCV
#
define
HWY_MAX_DYNAMIC_TARGETS
9
#
define
HWY_HIGHEST_TARGET_BIT
HWY_HIGHEST_TARGET_BIT_RVV
#
define
HWY_CHOOSE_TARGET_LIST
(
func_name
)
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
HWY_CHOOSE_RVV
(
func_name
)
/
*
RVV
*
/
\
nullptr
/
*
reserved
*
/
#
elif
HWY_ARCH_PPC
|
|
HWY_ARCH_S390X
#
define
HWY_MAX_DYNAMIC_TARGETS
9
#
define
HWY_HIGHEST_TARGET_BIT
HWY_HIGHEST_TARGET_BIT_PPC
#
define
HWY_CHOOSE_TARGET_LIST
(
func_name
)
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
HWY_CHOOSE_PPC10
(
func_name
)
/
*
PPC10
*
/
\
HWY_CHOOSE_PPC9
(
func_name
)
/
*
PPC9
*
/
\
HWY_CHOOSE_PPC8
(
func_name
)
/
*
PPC8
*
/
\
HWY_CHOOSE_Z15
(
func_name
)
/
*
Z15
*
/
\
HWY_CHOOSE_Z14
(
func_name
)
/
*
Z14
*
/
#
elif
HWY_ARCH_WASM
#
define
HWY_MAX_DYNAMIC_TARGETS
9
#
define
HWY_HIGHEST_TARGET_BIT
HWY_HIGHEST_TARGET_BIT_WASM
#
define
HWY_CHOOSE_TARGET_LIST
(
func_name
)
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
nullptr
/
*
reserved
*
/
\
HWY_CHOOSE_WASM_EMU256
(
func_name
)
/
*
WASM_EMU256
*
/
\
HWY_CHOOSE_WASM
(
func_name
)
/
*
WASM
*
/
\
nullptr
/
*
reserved
*
/
#
elif
HWY_ARCH_LOONGARCH
#
define
HWY_MAX_DYNAMIC_TARGETS
3
#
define
HWY_HIGHEST_TARGET_BIT
HWY_HIGHEST_TARGET_BIT_LOONGARCH
#
define
HWY_CHOOSE_TARGET_LIST
(
func_name
)
\
nullptr
/
*
reserved
*
/
\
HWY_CHOOSE_LASX
(
func_name
)
/
*
LASX
*
/
\
HWY_CHOOSE_LSX
(
func_name
)
/
*
LSX
*
/
#
else
#
define
HWY_MAX_DYNAMIC_TARGETS
1
#
define
HWY_HIGHEST_TARGET_BIT
HWY_HIGHEST_TARGET_BIT_SCALAR
#
endif
struct
ChosenTarget
{
public
:
void
Update
(
int64_t
targets
)
{
StoreMask
(
HWY_CHOSEN_TARGET_SHIFT
(
targets
)
|
HWY_CHOSEN_TARGET_MASK_SCALAR
)
;
}
void
DeInit
(
)
{
StoreMask
(
1
)
;
}
bool
IsInitialized
(
)
const
{
return
LoadMask
(
)
!
=
1
;
}
size_t
HWY_INLINE
GetIndex
(
)
const
{
return
hwy
:
:
Num0BitsBelowLS1Bit_Nonzero64
(
static_cast
<
uint64_t
>
(
LoadMask
(
)
&
HWY_CHOSEN_TARGET_MASK_TARGETS
)
)
;
}
private
:
#
if
defined
(
HWY_NO_LIBCXX
)
int64_t
LoadMask
(
)
const
{
return
mask_
;
}
void
StoreMask
(
int64_t
mask
)
{
mask_
=
mask
;
}
int64_t
mask_
{
1
}
;
#
else
int64_t
LoadMask
(
)
const
{
return
mask_
.
load
(
)
;
}
void
StoreMask
(
int64_t
mask
)
{
mask_
.
store
(
mask
)
;
}
std
:
:
atomic
<
int64_t
>
mask_
{
1
}
;
#
endif
}
;
HWY_DLLEXPORT
ChosenTarget
&
GetChosenTarget
(
)
;
}
#
endif
