#
ifndef
HIGHWAY_HWY_CACHE_CONTROL_H_
#
define
HIGHWAY_HWY_CACHE_CONTROL_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
hwy
/
base
.
h
"
#
if
!
defined
(
__SSE2__
)
|
|
(
HWY_COMPILER_CLANG
&
&
HWY_ARCH_X86_32
)
#
undef
HWY_DISABLE_CACHE_CONTROL
#
define
HWY_DISABLE_CACHE_CONTROL
#
endif
#
if
HWY_ARCH_X86
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
&
&
!
HWY_COMPILER_MSVC
#
include
<
emmintrin
.
h
>
#
endif
namespace
hwy
{
#
define
HWY_STREAM_MULTIPLE
16
#
if
HWY_ARCH_X86
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
&
&
!
HWY_COMPILER_MSVC
#
define
HWY_ATTR_CACHE
__attribute__
(
(
target
(
"
sse2
"
)
)
)
#
else
#
define
HWY_ATTR_CACHE
#
endif
HWY_INLINE
HWY_ATTR_CACHE
void
LoadFence
(
)
{
#
if
HWY_ARCH_X86
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
_mm_lfence
(
)
;
#
endif
}
HWY_INLINE
HWY_ATTR_CACHE
void
StoreFence
(
)
{
#
if
HWY_ARCH_X86
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
_mm_sfence
(
)
;
#
endif
}
template
<
typename
T
>
HWY_INLINE
HWY_ATTR_CACHE
void
Prefetch
(
const
T
*
p
)
{
#
if
HWY_ARCH_X86
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
_mm_prefetch
(
reinterpret_cast
<
const
char
*
>
(
p
)
_MM_HINT_T0
)
;
#
elif
HWY_COMPILER_GCC
|
|
HWY_COMPILER_CLANG
__builtin_prefetch
(
p
0
3
)
;
#
else
(
void
)
p
;
#
endif
}
HWY_INLINE
HWY_ATTR_CACHE
void
FlushCacheline
(
const
void
*
p
)
{
#
if
HWY_ARCH_X86
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
_mm_clflush
(
p
)
;
#
else
(
void
)
p
;
#
endif
}
}
#
endif
