#
ifndef
HIGHWAY_HWY_CACHE_CONTROL_H_
#
define
HIGHWAY_HWY_CACHE_CONTROL_H_
#
include
"
hwy
/
aligned_allocator
.
h
"
#
include
"
hwy
/
base
.
h
"
#
if
!
defined
(
__SSE2__
)
|
|
(
HWY_COMPILER_CLANG
&
&
HWY_ARCH_X86_32
)
#
undef
HWY_DISABLE_CACHE_CONTROL
#
define
HWY_DISABLE_CACHE_CONTROL
#
endif
#
ifndef
HWY_DISABLE_CACHE_CONTROL
#
if
HWY_ARCH_X86
&
&
!
HWY_COMPILER_MSVC
#
include
<
emmintrin
.
h
>
#
include
<
xmmintrin
.
h
>
#
elif
HWY_ARCH_ARM_A64
#
include
<
arm_acle
.
h
>
#
endif
#
endif
namespace
hwy
{
#
define
HWY_STREAM_MULTIPLE
16
#
if
HWY_ARCH_X86
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
&
&
!
HWY_COMPILER_MSVC
#
define
HWY_ATTR_CACHE
__attribute__
(
(
target
(
"
sse2
"
)
)
)
#
else
#
define
HWY_ATTR_CACHE
#
endif
#
pragma
push_macro
(
"
LoadFence
"
)
#
undef
LoadFence
HWY_INLINE
HWY_ATTR_CACHE
void
LoadFence
(
)
{
#
if
HWY_ARCH_X86
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
_mm_lfence
(
)
;
#
endif
}
#
pragma
pop_macro
(
"
LoadFence
"
)
static
HWY_INLINE
void
StreamCacheLine
(
const
uint64_t
*
HWY_RESTRICT
from
uint64_t
*
HWY_RESTRICT
to
)
{
HWY_DASSERT
(
IsAligned
(
from
)
)
;
HWY_DASSERT
(
IsAligned
(
to
)
)
;
#
if
HWY_COMPILER_CLANG
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
for
(
size_t
i
=
0
;
i
<
HWY_ALIGNMENT
/
sizeof
(
uint64_t
)
;
+
+
i
)
{
__builtin_nontemporal_store
(
from
[
i
]
to
+
i
)
;
}
#
else
hwy
:
:
CopyBytes
(
from
to
HWY_ALIGNMENT
)
;
#
endif
}
HWY_INLINE
HWY_ATTR_CACHE
void
FlushStream
(
)
{
#
if
HWY_ARCH_X86
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
_mm_sfence
(
)
;
#
endif
}
template
<
typename
T
>
HWY_INLINE
HWY_ATTR_CACHE
void
Prefetch
(
const
T
*
p
)
{
(
void
)
p
;
#
ifndef
HWY_DISABLE_CACHE_CONTROL
#
if
HWY_ARCH_X86
_mm_prefetch
(
reinterpret_cast
<
const
char
*
>
(
p
)
_MM_HINT_T0
)
;
#
elif
HWY_COMPILER_GCC
__builtin_prefetch
(
p
0
3
)
;
#
endif
#
endif
}
HWY_INLINE
HWY_ATTR_CACHE
void
FlushCacheline
(
const
void
*
p
)
{
#
if
HWY_ARCH_X86
&
&
!
defined
(
HWY_DISABLE_CACHE_CONTROL
)
_mm_clflush
(
p
)
;
#
else
(
void
)
p
;
#
endif
}
HWY_INLINE
HWY_ATTR_CACHE
void
Pause
(
)
{
#
ifndef
HWY_DISABLE_CACHE_CONTROL
#
if
HWY_ARCH_X86
_mm_pause
(
)
;
#
elif
HWY_ARCH_ARM_A64
&
&
HWY_COMPILER_CLANG
__yield
(
)
;
#
elif
HWY_ARCH_ARM
&
&
HWY_COMPILER_GCC
__asm__
volatile
(
"
yield
"
:
:
:
"
memory
"
)
;
#
elif
HWY_ARCH_PPC
&
&
HWY_COMPILER_GCC
__asm__
volatile
(
"
or
27
27
27
"
:
:
:
"
memory
"
)
;
#
endif
#
endif
}
}
#
endif
