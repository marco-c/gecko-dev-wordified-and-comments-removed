"
"
"
Use
this
rule
to
control
the
position
and
formatting
of
comments
.
.
.
rubric
:
:
Options
*
Use
require
-
starting
-
space
to
require
a
space
character
right
after
the
  
#
.
Set
to
true
to
enable
false
to
disable
.
*
Use
ignore
-
shebangs
to
ignore
a
  
shebang
<
https
:
/
/
en
.
wikipedia
.
org
/
wiki
/
Shebang_
(
Unix
)
>
_
at
the
beginning
of
  
the
file
when
require
-
starting
-
space
is
set
.
*
min
-
spaces
-
from
-
content
is
used
to
visually
separate
inline
comments
from
  
content
.
It
defines
the
minimal
required
number
of
spaces
between
a
comment
  
and
its
preceding
content
.
.
.
rubric
:
:
Default
values
(
when
enabled
)
.
.
code
-
block
:
:
yaml
 
rules
:
   
comments
:
     
require
-
starting
-
space
:
true
     
ignore
-
shebangs
:
true
     
min
-
spaces
-
from
-
content
:
2
.
.
rubric
:
:
Examples
#
.
With
comments
:
{
require
-
starting
-
space
:
true
}
   
the
following
code
snippet
would
*
*
PASS
*
*
:
   
:
:
    
#
This
sentence
    
#
is
a
block
comment
   
the
following
code
snippet
would
*
*
PASS
*
*
:
   
:
:
    
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
    
#
#
This
is
some
documentation
   
the
following
code
snippet
would
*
*
FAIL
*
*
:
   
:
:
    
#
This
sentence
    
#
is
a
block
comment
#
.
With
comments
:
{
min
-
spaces
-
from
-
content
:
2
}
   
the
following
code
snippet
would
*
*
PASS
*
*
:
   
:
:
    
x
=
2
^
127
-
1
#
Mersenne
prime
number
   
the
following
code
snippet
would
*
*
FAIL
*
*
:
   
:
:
    
x
=
2
^
127
-
1
#
Mersenne
prime
number
"
"
"
from
yamllint
.
linter
import
LintProblem
ID
=
'
comments
'
TYPE
=
'
comment
'
CONF
=
{
'
require
-
starting
-
space
'
:
bool
        
'
ignore
-
shebangs
'
:
bool
        
'
min
-
spaces
-
from
-
content
'
:
int
}
DEFAULT
=
{
'
require
-
starting
-
space
'
:
True
           
'
ignore
-
shebangs
'
:
True
           
'
min
-
spaces
-
from
-
content
'
:
2
}
def
check
(
conf
comment
)
:
    
if
(
conf
[
'
min
-
spaces
-
from
-
content
'
]
!
=
-
1
and
comment
.
is_inline
(
)
and
            
comment
.
pointer
-
comment
.
token_before
.
end_mark
.
pointer
<
            
conf
[
'
min
-
spaces
-
from
-
content
'
]
)
:
        
yield
LintProblem
(
comment
.
line_no
comment
.
column_no
                          
'
too
few
spaces
before
comment
:
expected
'
                          
f
'
{
conf
[
"
min
-
spaces
-
from
-
content
"
]
}
'
)
    
if
conf
[
'
require
-
starting
-
space
'
]
:
        
text_start
=
comment
.
pointer
+
1
        
while
(
comment
.
buffer
[
text_start
]
=
=
'
#
'
and
               
text_start
<
len
(
comment
.
buffer
)
)
:
            
text_start
+
=
1
        
if
text_start
<
len
(
comment
.
buffer
)
:
            
if
(
conf
[
'
ignore
-
shebangs
'
]
and
                    
comment
.
line_no
=
=
1
and
                    
comment
.
column_no
=
=
1
and
                    
comment
.
buffer
[
text_start
]
=
=
'
!
'
)
:
                
return
            
elif
comment
.
buffer
[
text_start
]
not
in
{
'
'
'
\
n
'
'
\
r
'
'
\
x00
'
}
:
                
column
=
comment
.
column_no
+
text_start
-
comment
.
pointer
                
yield
LintProblem
(
comment
.
line_no
                                  
column
                                  
'
missing
starting
space
in
comment
'
)
