#
-
*
-
coding
:
utf
-
8
-
*
-
"
"
"
Use
this
rule
to
forbid
any
string
values
that
are
not
quoted
.
You
can
also
enforce
the
type
of
the
quote
used
using
the
quote
-
type
option
(
single
double
or
any
)
.
*
*
Note
*
*
:
Multi
-
line
strings
(
with
|
or
>
)
will
not
be
checked
.
.
.
rubric
:
:
Examples
#
.
With
quoted
-
strings
:
{
quote
-
type
:
any
}
   
the
following
code
snippet
would
*
*
PASS
*
*
:
   
:
:
    
foo
:
"
bar
"
    
bar
:
'
foo
'
    
number
:
123
    
boolean
:
true
   
the
following
code
snippet
would
*
*
FAIL
*
*
:
   
:
:
    
foo
:
bar
"
"
"
import
yaml
from
yamllint
.
linter
import
LintProblem
ID
=
'
quoted
-
strings
'
TYPE
=
'
token
'
CONF
=
{
'
quote
-
type
'
:
(
'
any
'
'
single
'
'
double
'
)
}
DEFAULT
=
{
'
quote
-
type
'
:
'
any
'
}
def
check
(
conf
token
prev
next
nextnext
context
)
:
    
quote_type
=
conf
[
'
quote
-
type
'
]
    
if
(
isinstance
(
token
yaml
.
tokens
.
ScalarToken
)
and
            
isinstance
(
prev
(
yaml
.
ValueToken
yaml
.
TagToken
)
)
)
:
        
if
(
prev
and
isinstance
(
prev
yaml
.
tokens
.
TagToken
)
and
                
prev
.
value
[
0
]
=
=
'
!
!
'
)
:
            
return
        
resolver
=
yaml
.
resolver
.
Resolver
(
)
        
if
resolver
.
resolve
(
yaml
.
nodes
.
ScalarNode
token
.
value
                            
(
True
False
)
)
!
=
'
tag
:
yaml
.
org
2002
:
str
'
:
            
return
        
if
(
not
token
.
plain
)
and
(
token
.
style
=
=
"
|
"
or
token
.
style
=
=
"
>
"
)
:
            
return
        
if
(
(
quote_type
=
=
'
single
'
and
token
.
style
!
=
"
'
"
)
or
                
(
quote_type
=
=
'
double
'
and
token
.
style
!
=
'
"
'
)
or
                
(
quote_type
=
=
'
any
'
and
token
.
style
is
None
)
)
:
            
yield
LintProblem
(
                
token
.
start_mark
.
line
+
1
                
token
.
start_mark
.
column
+
1
                
"
string
value
is
not
quoted
with
%
s
quotes
"
%
(
quote_type
)
)
