#
-
*
-
coding
:
utf
-
8
-
*
-
"
"
"
Use
this
rule
to
control
the
number
of
spaces
before
and
after
colons
(
:
)
.
.
.
rubric
:
:
Options
*
max
-
spaces
-
before
defines
the
maximal
number
of
spaces
allowed
before
  
colons
(
use
-
1
to
disable
)
.
*
max
-
spaces
-
after
defines
the
maximal
number
of
spaces
allowed
after
  
colons
(
use
-
1
to
disable
)
.
.
.
rubric
:
:
Examples
#
.
With
colons
:
{
max
-
spaces
-
before
:
0
max
-
spaces
-
after
:
1
}
   
the
following
code
snippet
would
*
*
PASS
*
*
:
   
:
:
    
object
:
      
-
a
      
-
b
    
key
:
value
#
.
With
colons
:
{
max
-
spaces
-
before
:
1
}
   
the
following
code
snippet
would
*
*
PASS
*
*
:
   
:
:
    
object
:
      
-
a
      
-
b
   
the
following
code
snippet
would
*
*
FAIL
*
*
:
   
:
:
    
object
:
      
-
a
      
-
b
#
.
With
colons
:
{
max
-
spaces
-
after
:
2
}
   
the
following
code
snippet
would
*
*
PASS
*
*
:
   
:
:
    
first
:
1
    
second
:
2
    
third
:
3
   
the
following
code
snippet
would
*
*
FAIL
*
*
:
   
:
:
    
first
:
1
    
2nd
:
2
    
third
:
3
"
"
"
import
yaml
from
yamllint
.
rules
.
common
import
is_explicit_key
spaces_after
spaces_before
ID
=
'
colons
'
TYPE
=
'
token
'
CONF
=
{
'
max
-
spaces
-
before
'
:
int
        
'
max
-
spaces
-
after
'
:
int
}
DEFAULT
=
{
'
max
-
spaces
-
before
'
:
0
           
'
max
-
spaces
-
after
'
:
1
}
def
check
(
conf
token
prev
next
nextnext
context
)
:
    
if
isinstance
(
token
yaml
.
ValueToken
)
:
        
problem
=
spaces_before
(
token
prev
next
                                
max
=
conf
[
'
max
-
spaces
-
before
'
]
                                
max_desc
=
'
too
many
spaces
before
colon
'
)
        
if
problem
is
not
None
:
            
yield
problem
        
problem
=
spaces_after
(
token
prev
next
                               
max
=
conf
[
'
max
-
spaces
-
after
'
]
                               
max_desc
=
'
too
many
spaces
after
colon
'
)
        
if
problem
is
not
None
:
            
yield
problem
    
if
isinstance
(
token
yaml
.
KeyToken
)
and
is_explicit_key
(
token
)
:
        
problem
=
spaces_after
(
token
prev
next
                               
max
=
conf
[
'
max
-
spaces
-
after
'
]
                               
max_desc
=
'
too
many
spaces
after
question
mark
'
)
        
if
problem
is
not
None
:
            
yield
problem
