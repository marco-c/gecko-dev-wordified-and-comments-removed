"
"
"
Determine
facts
about
the
environment
.
"
"
"
import
os
import
platform
import
sys
WINDOWS
=
sys
.
platform
=
=
"
win32
"
LINUX
=
sys
.
platform
.
startswith
(
"
linux
"
)
PYVERSION
=
sys
.
version_info
+
(
int
(
platform
.
python_version
(
)
[
-
1
]
=
=
"
+
"
)
)
PY2
=
PYVERSION
<
(
3
0
)
PY3
=
PYVERSION
>
=
(
3
0
)
PYPY
=
(
platform
.
python_implementation
(
)
=
=
'
PyPy
'
)
if
PYPY
:
    
PYPYVERSION
=
sys
.
pypy_version_info
PYPY2
=
PYPY
and
PY2
PYPY3
=
PYPY
and
PY3
JYTHON
=
(
platform
.
python_implementation
(
)
=
=
'
Jython
'
)
IRONPYTHON
=
(
platform
.
python_implementation
(
)
=
=
'
IronPython
'
)
class
PYBEHAVIOR
(
object
)
:
    
"
"
"
Flags
indicating
this
Python
'
s
behavior
.
"
"
"
    
optimize_if_debug
=
(
not
PYPY
)
    
optimize_if_not_debug
=
(
not
PYPY
)
and
(
PYVERSION
>
=
(
3
7
0
'
alpha
'
4
)
)
    
optimize_if_not_debug2
=
(
not
PYPY
)
and
(
PYVERSION
>
=
(
3
8
0
'
beta
'
1
)
)
    
yield_from
=
(
PYVERSION
>
=
(
3
3
)
)
    
namespaces_pep420
=
(
PYVERSION
>
=
(
3
3
)
)
    
size_in_pyc
=
(
PYVERSION
>
=
(
3
3
)
)
    
async_syntax
=
(
PYVERSION
>
=
(
3
5
)
)
    
unpackings_pep448
=
(
PYVERSION
>
=
(
3
5
)
)
    
negative_lnotab
=
(
PYVERSION
>
=
(
3
6
)
)
and
not
(
PYPY
and
PYPYVERSION
<
(
7
2
)
)
    
hashed_pyc_pep552
=
(
PYVERSION
>
=
(
3
7
0
'
alpha
'
4
)
)
    
actual_syspath0_dash_m
=
(
PYVERSION
>
=
(
3
7
0
'
beta
'
3
)
)
    
finally_jumps_back
=
(
PYVERSION
>
=
(
3
8
)
)
    
trace_decorated_def
=
(
PYVERSION
>
=
(
3
8
)
)
    
nix_while_true
=
(
PYVERSION
>
=
(
3
8
)
)
    
report_absolute_files
=
(
PYVERSION
>
=
(
3
9
)
)
C_TRACER
=
os
.
getenv
(
'
COVERAGE_TEST_TRACER
'
'
c
'
)
=
=
'
c
'
METACOV
=
os
.
getenv
(
'
COVERAGE_COVERAGE
'
'
'
)
!
=
'
'
TESTING
=
os
.
getenv
(
'
COVERAGE_TESTING
'
'
'
)
=
=
'
True
'
