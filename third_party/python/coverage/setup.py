"
"
"
Code
coverage
measurement
for
Python
"
"
"
import
os
import
sys
from
setuptools
import
setup
from
distutils
.
core
import
Extension
from
distutils
.
command
.
build_ext
import
build_ext
from
distutils
import
errors
classifiers
=
"
"
"
\
Environment
:
:
Console
Intended
Audience
:
:
Developers
License
:
:
OSI
Approved
:
:
Apache
Software
License
Operating
System
:
:
OS
Independent
Programming
Language
:
:
Python
Programming
Language
:
:
Python
:
:
2
Programming
Language
:
:
Python
:
:
2
.
7
Programming
Language
:
:
Python
:
:
3
Programming
Language
:
:
Python
:
:
3
.
5
Programming
Language
:
:
Python
:
:
3
.
6
Programming
Language
:
:
Python
:
:
3
.
7
Programming
Language
:
:
Python
:
:
3
.
8
Programming
Language
:
:
Python
:
:
3
.
9
Programming
Language
:
:
Python
:
:
Implementation
:
:
CPython
Programming
Language
:
:
Python
:
:
Implementation
:
:
PyPy
Topic
:
:
Software
Development
:
:
Quality
Assurance
Topic
:
:
Software
Development
:
:
Testing
"
"
"
cov_ver_py
=
os
.
path
.
join
(
os
.
path
.
split
(
__file__
)
[
0
]
"
coverage
/
version
.
py
"
)
with
open
(
cov_ver_py
)
as
version_file
:
    
doc
=
__doc__
    
__version__
=
__url__
=
version_info
=
"
"
    
exec
(
compile
(
version_file
.
read
(
)
cov_ver_py
'
exec
'
)
)
with
open
(
"
README
.
rst
"
)
as
readme
:
    
long_description
=
readme
.
read
(
)
.
replace
(
"
https
:
/
/
coverage
.
readthedocs
.
io
"
__url__
)
with
open
(
"
CONTRIBUTORS
.
txt
"
"
rb
"
)
as
contributors
:
    
paras
=
contributors
.
read
(
)
.
split
(
b
"
\
n
\
n
"
)
    
num_others
=
len
(
paras
[
-
1
]
.
splitlines
(
)
)
    
num_others
+
=
1
classifier_list
=
classifiers
.
splitlines
(
)
if
version_info
[
3
]
=
=
'
alpha
'
:
    
devstat
=
"
3
-
Alpha
"
elif
version_info
[
3
]
in
[
'
beta
'
'
candidate
'
]
:
    
devstat
=
"
4
-
Beta
"
else
:
    
assert
version_info
[
3
]
=
=
'
final
'
    
devstat
=
"
5
-
Production
/
Stable
"
classifier_list
.
append
(
"
Development
Status
:
:
"
+
devstat
)
setup_args
=
dict
(
    
name
=
'
coverage
'
    
version
=
__version__
    
packages
=
[
        
'
coverage
'
    
]
    
package_data
=
{
        
'
coverage
'
:
[
            
'
htmlfiles
/
*
.
*
'
            
'
fullcoverage
/
*
.
*
'
        
]
    
}
    
entry_points
=
{
        
'
console_scripts
'
:
[
            
'
coverage
=
coverage
.
cmdline
:
main
'
            
'
coverage
%
d
=
coverage
.
cmdline
:
main
'
%
sys
.
version_info
[
:
1
]
            
'
coverage
-
%
d
.
%
d
=
coverage
.
cmdline
:
main
'
%
sys
.
version_info
[
:
2
]
        
]
    
}
    
extras_require
=
{
        
'
toml
'
:
[
'
toml
'
]
    
}
    
zip_safe
=
False
    
author
=
'
Ned
Batchelder
and
{
}
others
'
.
format
(
num_others
)
    
author_email
=
'
ned
nedbatchelder
.
com
'
    
description
=
doc
    
long_description
=
long_description
    
long_description_content_type
=
'
text
/
x
-
rst
'
    
keywords
=
'
code
coverage
testing
'
    
license
=
'
Apache
2
.
0
'
    
classifiers
=
classifier_list
    
url
=
"
https
:
/
/
github
.
com
/
nedbat
/
coveragepy
"
    
project_urls
=
{
        
'
Documentation
'
:
__url__
        
'
Funding
'
:
(
            
'
https
:
/
/
tidelift
.
com
/
subscription
/
pkg
/
pypi
-
coverage
'
            
'
?
utm_source
=
pypi
-
coverage
&
utm_medium
=
referral
&
utm_campaign
=
pypi
'
        
)
        
'
Issues
'
:
'
https
:
/
/
github
.
com
/
nedbat
/
coveragepy
/
issues
'
    
}
    
python_requires
=
"
>
=
2
.
7
!
=
3
.
0
.
*
!
=
3
.
1
.
*
!
=
3
.
2
.
*
!
=
3
.
3
.
*
!
=
3
.
4
.
*
<
4
"
)
ext_errors
=
(
    
errors
.
CCompilerError
    
errors
.
DistutilsExecError
    
errors
.
DistutilsPlatformError
)
if
sys
.
platform
=
=
'
win32
'
:
    
ext_errors
+
=
(
IOError
)
class
BuildFailed
(
Exception
)
:
    
"
"
"
Raise
this
to
indicate
the
C
extension
wouldn
'
t
build
.
"
"
"
    
def
__init__
(
self
)
:
        
Exception
.
__init__
(
self
)
        
self
.
cause
=
sys
.
exc_info
(
)
[
1
]
class
ve_build_ext
(
build_ext
)
:
    
"
"
"
Build
C
extensions
but
fail
with
a
straightforward
exception
.
"
"
"
    
def
run
(
self
)
:
        
"
"
"
Wrap
run
with
BuildFailed
.
"
"
"
        
try
:
            
build_ext
.
run
(
self
)
        
except
errors
.
DistutilsPlatformError
:
            
raise
BuildFailed
(
)
    
def
build_extension
(
self
ext
)
:
        
"
"
"
Wrap
build_extension
with
BuildFailed
.
"
"
"
        
try
:
            
build_ext
.
build_extension
(
self
ext
)
        
except
ext_errors
:
            
raise
BuildFailed
(
)
        
except
ValueError
as
err
:
            
if
"
'
path
'
"
in
str
(
err
)
:
                
raise
BuildFailed
(
)
            
raise
compile_extension
=
True
if
sys
.
platform
.
startswith
(
'
java
'
)
:
    
compile_extension
=
False
if
'
__pypy__
'
in
sys
.
builtin_module_names
:
    
compile_extension
=
False
if
compile_extension
:
    
setup_args
.
update
(
dict
(
        
ext_modules
=
[
            
Extension
(
                
"
coverage
.
tracer
"
                
sources
=
[
                    
"
coverage
/
ctracer
/
datastack
.
c
"
                    
"
coverage
/
ctracer
/
filedisp
.
c
"
                    
"
coverage
/
ctracer
/
module
.
c
"
                    
"
coverage
/
ctracer
/
tracer
.
c
"
                
]
            
)
        
]
        
cmdclass
=
{
            
'
build_ext
'
:
ve_build_ext
        
}
    
)
)
def
main
(
)
:
    
"
"
"
Actually
invoke
setup
(
)
with
the
arguments
we
built
above
.
"
"
"
    
try
:
        
setup
(
*
*
setup_args
)
    
except
BuildFailed
as
exc
:
        
msg
=
"
Couldn
'
t
install
with
extension
module
trying
without
it
.
.
.
"
        
exc_msg
=
"
%
s
:
%
s
"
%
(
exc
.
__class__
.
__name__
exc
.
cause
)
        
print
(
"
*
*
\
n
*
*
%
s
\
n
*
*
%
s
\
n
*
*
"
%
(
msg
exc_msg
)
)
        
del
setup_args
[
'
ext_modules
'
]
        
setup
(
*
*
setup_args
)
if
__name__
=
=
'
__main__
'
:
    
main
(
)
