from
__future__
import
absolute_import
unicode_literals
import
abc
from
six
import
add_metaclass
from
virtualenv
.
create
.
describe
import
PosixSupports
Python3Supports
WindowsSupports
from
virtualenv
.
create
.
via_global_ref
.
builtin
.
ref
import
PathRefToDest
from
virtualenv
.
util
.
path
import
Path
from
.
common
import
PyPy
add_metaclass
(
abc
.
ABCMeta
)
class
PyPy3
(
PyPy
Python3Supports
)
:
    
classmethod
    
def
exe_stem
(
cls
)
:
        
return
"
pypy3
"
    
classmethod
    
def
exe_names
(
cls
interpreter
)
:
        
return
super
(
PyPy3
cls
)
.
exe_names
(
interpreter
)
|
{
"
pypy
"
}
class
PyPy3Posix
(
PyPy3
PosixSupports
)
:
    
"
"
"
PyPy
3
on
POSIX
"
"
"
    
property
    
def
stdlib
(
self
)
:
        
"
"
"
PyPy3
respects
sysconfig
only
for
the
host
python
virtual
envs
is
instead
lib
/
pythonx
.
y
/
site
-
packages
"
"
"
        
return
self
.
dest
/
"
lib
"
/
"
pypy
{
}
"
.
format
(
self
.
interpreter
.
version_release_str
)
/
"
site
-
packages
"
    
classmethod
    
def
_shared_libs
(
cls
python_dir
)
:
        
return
python_dir
.
glob
(
"
libpypy3
*
.
*
"
)
    
def
to_lib
(
self
src
)
:
        
return
self
.
dest
/
"
lib
"
/
src
.
name
    
classmethod
    
def
sources
(
cls
interpreter
)
:
        
for
src
in
super
(
PyPy3Posix
cls
)
.
sources
(
interpreter
)
:
            
yield
src
        
if
interpreter
.
system_prefix
=
=
"
/
usr
"
:
            
return
        
host_lib
=
Path
(
interpreter
.
system_prefix
)
/
"
lib
"
        
stdlib
=
Path
(
interpreter
.
system_stdlib
)
        
if
host_lib
.
exists
(
)
and
host_lib
.
is_dir
(
)
:
            
for
path
in
host_lib
.
iterdir
(
)
:
                
if
stdlib
=
=
path
:
                    
continue
                
yield
PathRefToDest
(
path
dest
=
cls
.
to_lib
)
class
Pypy3Windows
(
PyPy3
WindowsSupports
)
:
    
"
"
"
PyPy
3
on
Windows
"
"
"
    
property
    
def
less_v37
(
self
)
:
        
return
self
.
interpreter
.
version_info
.
minor
<
7
    
property
    
def
stdlib
(
self
)
:
        
"
"
"
PyPy3
respects
sysconfig
only
for
the
host
python
virtual
envs
is
instead
Lib
/
site
-
packages
"
"
"
        
if
self
.
less_v37
:
            
return
self
.
dest
/
"
site
-
packages
"
        
return
self
.
dest
/
"
Lib
"
/
"
site
-
packages
"
    
property
    
def
bin_dir
(
self
)
:
        
"
"
"
PyPy3
needs
to
fallback
to
pypy
definition
"
"
"
        
return
self
.
dest
/
"
Scripts
"
    
classmethod
    
def
_shared_libs
(
cls
python_dir
)
:
        
for
pattern
in
[
"
libpypy
*
.
dll
"
"
libffi
*
.
dll
"
]
:
            
srcs
=
python_dir
.
glob
(
pattern
)
            
for
src
in
srcs
:
                
yield
src
