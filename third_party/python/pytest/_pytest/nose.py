"
"
"
run
test
suites
written
for
nose
.
"
"
"
import
sys
import
py
import
pytest
from
_pytest
import
unittest
def
get_skip_exceptions
(
)
:
    
skip_classes
=
set
(
)
    
for
module_name
in
(
'
unittest
'
'
unittest2
'
'
nose
'
)
:
        
mod
=
sys
.
modules
.
get
(
module_name
)
        
if
hasattr
(
mod
'
SkipTest
'
)
:
            
skip_classes
.
add
(
mod
.
SkipTest
)
    
return
tuple
(
skip_classes
)
def
pytest_runtest_makereport
(
item
call
)
:
    
if
call
.
excinfo
and
call
.
excinfo
.
errisinstance
(
get_skip_exceptions
(
)
)
:
        
call2
=
call
.
__class__
(
lambda
:
                    
pytest
.
skip
(
str
(
call
.
excinfo
.
value
)
)
call
.
when
)
        
call
.
excinfo
=
call2
.
excinfo
pytest
.
hookimpl
(
trylast
=
True
)
def
pytest_runtest_setup
(
item
)
:
    
if
is_potential_nosetest
(
item
)
:
        
if
isinstance
(
item
.
parent
pytest
.
Generator
)
:
            
gen
=
item
.
parent
            
if
not
hasattr
(
gen
'
_nosegensetup
'
)
:
                
call_optional
(
gen
.
obj
'
setup
'
)
                
if
isinstance
(
gen
.
parent
pytest
.
Instance
)
:
                    
call_optional
(
gen
.
parent
.
obj
'
setup
'
)
                
gen
.
_nosegensetup
=
True
        
if
not
call_optional
(
item
.
obj
'
setup
'
)
:
            
call_optional
(
item
.
parent
.
obj
'
setup
'
)
        
item
.
session
.
_setupstate
.
addfinalizer
(
(
lambda
:
teardown_nose
(
item
)
)
item
)
def
teardown_nose
(
item
)
:
    
if
is_potential_nosetest
(
item
)
:
        
if
not
call_optional
(
item
.
obj
'
teardown
'
)
:
            
call_optional
(
item
.
parent
.
obj
'
teardown
'
)
def
pytest_make_collect_report
(
collector
)
:
    
if
isinstance
(
collector
pytest
.
Generator
)
:
        
call_optional
(
collector
.
obj
'
setup
'
)
def
is_potential_nosetest
(
item
)
:
    
return
isinstance
(
item
pytest
.
Function
)
and
\
        
not
isinstance
(
item
unittest
.
TestCaseFunction
)
def
call_optional
(
obj
name
)
:
    
method
=
getattr
(
obj
name
None
)
    
isfixture
=
hasattr
(
method
"
_pytestfixturefunction
"
)
    
if
method
is
not
None
and
not
isfixture
and
py
.
builtin
.
callable
(
method
)
:
        
method
(
)
        
return
True
