"
"
"
A
single
place
for
constructing
and
exposing
the
main
parser
"
"
"
import
os
import
sys
from
pipenv
.
patched
.
notpip
.
_internal
.
cli
import
cmdoptions
from
pipenv
.
patched
.
notpip
.
_internal
.
cli
.
parser
import
(
    
ConfigOptionParser
    
UpdatingDefaultsHelpFormatter
)
from
pipenv
.
patched
.
notpip
.
_internal
.
commands
import
commands_dict
get_similar_commands
from
pipenv
.
patched
.
notpip
.
_internal
.
exceptions
import
CommandError
from
pipenv
.
patched
.
notpip
.
_internal
.
utils
.
misc
import
get_pip_version
get_prog
from
pipenv
.
patched
.
notpip
.
_internal
.
utils
.
typing
import
MYPY_CHECK_RUNNING
if
MYPY_CHECK_RUNNING
:
    
from
typing
import
Tuple
List
__all__
=
[
"
create_main_parser
"
"
parse_command
"
]
def
create_main_parser
(
)
:
    
"
"
"
Creates
and
returns
the
main
parser
for
pip
'
s
CLI
    
"
"
"
    
parser_kw
=
{
        
'
usage
'
:
'
\
n
%
prog
<
command
>
[
options
]
'
        
'
add_help_option
'
:
False
        
'
formatter
'
:
UpdatingDefaultsHelpFormatter
(
)
        
'
name
'
:
'
global
'
        
'
prog
'
:
get_prog
(
)
    
}
    
parser
=
ConfigOptionParser
(
*
*
parser_kw
)
    
parser
.
disable_interspersed_args
(
)
    
parser
.
version
=
get_pip_version
(
)
    
gen_opts
=
cmdoptions
.
make_option_group
(
cmdoptions
.
general_group
parser
)
    
parser
.
add_option_group
(
gen_opts
)
    
parser
.
main
=
True
    
description
=
[
'
'
]
+
[
        
'
%
-
27s
%
s
'
%
(
name
command_info
.
summary
)
        
for
name
command_info
in
commands_dict
.
items
(
)
    
]
    
parser
.
description
=
'
\
n
'
.
join
(
description
)
    
return
parser
def
parse_command
(
args
)
:
    
parser
=
create_main_parser
(
)
    
general_options
args_else
=
parser
.
parse_args
(
args
)
    
if
general_options
.
version
:
        
sys
.
stdout
.
write
(
parser
.
version
)
        
sys
.
stdout
.
write
(
os
.
linesep
)
        
sys
.
exit
(
)
    
if
not
args_else
or
(
args_else
[
0
]
=
=
'
help
'
and
len
(
args_else
)
=
=
1
)
:
        
parser
.
print_help
(
)
        
sys
.
exit
(
)
    
cmd_name
=
args_else
[
0
]
    
if
cmd_name
not
in
commands_dict
:
        
guess
=
get_similar_commands
(
cmd_name
)
        
msg
=
[
'
unknown
command
"
%
s
"
'
%
cmd_name
]
        
if
guess
:
            
msg
.
append
(
'
maybe
you
meant
"
%
s
"
'
%
guess
)
        
raise
CommandError
(
'
-
'
.
join
(
msg
)
)
    
cmd_args
=
args
[
:
]
    
cmd_args
.
remove
(
cmd_name
)
    
return
cmd_name
cmd_args
