import
os
import
sys
def
which
(
cmd
mode
=
os
.
F_OK
|
os
.
X_OK
path
=
None
)
:
    
"
"
"
Given
a
command
mode
and
a
PATH
string
return
the
path
which
    
conforms
to
the
given
mode
on
the
PATH
or
None
if
there
is
no
such
    
file
.
    
mode
defaults
to
os
.
F_OK
|
os
.
X_OK
.
path
defaults
to
the
result
    
of
os
.
environ
.
get
(
"
PATH
"
)
or
can
be
overridden
with
a
custom
search
    
path
.
    
"
"
"
    
def
_access_check
(
fn
mode
)
:
        
return
(
os
.
path
.
exists
(
fn
)
and
os
.
access
(
fn
mode
)
                
and
not
os
.
path
.
isdir
(
fn
)
)
    
if
_access_check
(
cmd
mode
)
:
        
return
cmd
    
path
=
(
path
or
os
.
environ
.
get
(
"
PATH
"
os
.
defpath
)
)
.
split
(
os
.
pathsep
)
    
if
sys
.
platform
=
=
"
win32
"
:
        
if
not
os
.
curdir
in
path
:
            
path
.
insert
(
0
os
.
curdir
)
        
pathext
=
os
.
environ
.
get
(
"
PATHEXT
"
"
"
)
.
split
(
os
.
pathsep
)
        
matches
=
[
cmd
for
ext
in
pathext
if
cmd
.
lower
(
)
.
endswith
(
ext
.
lower
(
)
)
]
        
files
=
[
cmd
]
if
matches
else
[
cmd
+
ext
.
lower
(
)
for
ext
in
pathext
]
    
else
:
        
files
=
[
cmd
]
    
seen
=
set
(
)
    
for
dir
in
path
:
        
dir
=
os
.
path
.
normcase
(
dir
)
        
if
not
dir
in
seen
:
            
seen
.
add
(
dir
)
            
for
thefile
in
files
:
                
name
=
os
.
path
.
join
(
dir
thefile
)
                
if
_access_check
(
name
mode
)
:
                    
return
name
    
return
None
