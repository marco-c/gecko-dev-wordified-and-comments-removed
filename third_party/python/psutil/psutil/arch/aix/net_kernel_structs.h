#
ifdef
__64BIT__
#
include
<
sys
/
socketvar
.
h
>
#
include
<
sys
/
protosw
.
h
>
#
include
<
sys
/
unpcb
.
h
>
#
include
<
sys
/
mbuf_base
.
h
>
#
include
<
netinet
/
ip_var
.
h
>
#
include
<
netinet
/
tcp
.
h
>
#
include
<
netinet
/
tcpip
.
h
>
#
include
<
netinet
/
tcp_timer
.
h
>
#
include
<
netinet
/
tcp_var
.
h
>
#
define
file64
file
#
define
socket64
socket
#
define
protosw64
protosw
#
define
inpcb64
inpcb
#
define
tcpcb64
tcpcb
#
define
unpcb64
unpcb
#
define
mbuf64
mbuf
#
else
struct
file64
{
int
f_flag
;
int
f_count
;
int
f_options
;
int
f_type
;
u_longlong_t
f_data
;
}
;
struct
socket64
{
short
so_type
;
short
so_options
;
ushort
so_linger
;
short
so_state
;
u_longlong_t
so_pcb
;
u_longlong_t
so_proto
;
}
;
struct
protosw64
{
short
pr_type
;
u_longlong_t
pr_domain
;
short
pr_protocol
;
short
pr_flags
;
}
;
struct
inpcb64
{
u_longlong_t
inp_next
inp_prev
;
u_longlong_t
inp_head
;
u_int32_t
inp_iflowinfo
;
u_short
inp_fport
;
u_int16_t
inp_fatype
;
union
in_addr_6
inp_faddr_6
;
u_int32_t
inp_oflowinfo
;
u_short
inp_lport
;
u_int16_t
inp_latype
;
union
in_addr_6
inp_laddr_6
;
u_longlong_t
inp_socket
;
u_longlong_t
inp_ppcb
;
u_longlong_t
space_rt
;
struct
sockaddr_in6
spare_dst
;
u_longlong_t
inp_ifa
;
int
inp_flags
;
}
;
struct
tcpcb64
{
u_longlong_t
seg__next
;
u_longlong_t
seg__prev
;
short
t_state
;
}
;
struct
unpcb64
{
u_longlong_t
unp_socket
;
u_longlong_t
unp_vnode
;
ino_t
unp_vno
;
u_longlong_t
unp_conn
;
u_longlong_t
unp_refs
;
u_longlong_t
unp_nextref
;
u_longlong_t
unp_addr
;
}
;
struct
m_hdr64
{
u_longlong_t
mh_next
;
u_longlong_t
mh_nextpkt
;
long
mh_len
;
u_longlong_t
mh_data
;
}
;
struct
mbuf64
{
struct
m_hdr64
m_hdr
;
}
;
#
define
m_len
m_hdr
.
mh_len
#
endif
