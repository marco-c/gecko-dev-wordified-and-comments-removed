"
"
"
Module
for
setting
up
logging
.
"
"
"
import
logging
import
sys
LOG_LEVELS
=
{
    
'
DEBUG
'
:
logging
.
DEBUG
    
'
INFO
'
:
logging
.
INFO
    
'
WARNING
'
:
logging
.
WARNING
    
'
ERROR
'
:
logging
.
ERROR
    
'
CRITICAL
'
:
logging
.
CRITICAL
}
LOG_FORMATS
=
{
    
'
DEBUG
'
:
'
%
(
levelname
)
s
%
(
name
)
s
:
%
(
message
)
s
'
    
'
INFO
'
:
'
%
(
levelname
)
s
:
%
(
message
)
s
'
}
def
configure_logger
(
stream_level
=
'
DEBUG
'
debug_file
=
None
)
:
    
"
"
"
Configure
logging
for
cookiecutter
.
    
Set
up
logging
to
stdout
with
given
level
.
If
debug_file
is
given
set
    
up
logging
to
file
with
DEBUG
level
.
    
"
"
"
    
logger
=
logging
.
getLogger
(
'
cookiecutter
'
)
    
logger
.
setLevel
(
logging
.
DEBUG
)
    
del
logger
.
handlers
[
:
]
    
if
debug_file
is
not
None
:
        
debug_formatter
=
logging
.
Formatter
(
LOG_FORMATS
[
'
DEBUG
'
]
)
        
file_handler
=
logging
.
FileHandler
(
debug_file
)
        
file_handler
.
setLevel
(
LOG_LEVELS
[
'
DEBUG
'
]
)
        
file_handler
.
setFormatter
(
debug_formatter
)
        
logger
.
addHandler
(
file_handler
)
    
log_formatter
=
logging
.
Formatter
(
LOG_FORMATS
[
stream_level
]
)
    
log_level
=
LOG_LEVELS
[
stream_level
]
    
stream_handler
=
logging
.
StreamHandler
(
stream
=
sys
.
stdout
)
    
stream_handler
.
setLevel
(
log_level
)
    
stream_handler
.
setFormatter
(
log_formatter
)
    
logger
.
addHandler
(
stream_handler
)
    
return
logger
