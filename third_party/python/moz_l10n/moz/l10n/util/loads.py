from
__future__
import
annotations
from
json
import
loads
from
re
import
MULTILINE
compile
from
typing
import
Any
str_comment
=
compile
(
r
'
^
(
(
?
:
[
^
"
\
n
]
|
"
(
?
:
[
^
"
\
\
\
n
]
|
\
\
.
)
*
"
)
*
?
)
/
/
.
*
'
MULTILINE
)
bytes_comment
=
compile
(
rb
'
^
(
(
?
:
[
^
"
\
n
]
|
"
(
?
:
[
^
"
\
\
\
n
]
|
\
\
.
)
*
"
)
*
?
)
/
/
.
*
'
MULTILINE
)
def
json_linecomment_loads
(
source
:
str
|
bytes
)
-
>
Any
:
    
"
"
"
    
Line
comments
/
/
are
supported
in
webext
messages
.
json
files
.
    
"
"
"
    
if
isinstance
(
source
str
)
:
        
return
loads
(
str_comment
.
sub
(
r
"
\
1
"
source
)
)
    
else
:
        
return
loads
(
bytes_comment
.
sub
(
rb
"
\
1
"
source
)
)
