from
__future__
import
annotations
from
collections
.
abc
import
Iterator
from
typing
import
Callable
Sequence
from
.
.
formats
import
Format
from
.
.
formats
.
dtd
.
serialize
import
dtd_serialize
from
.
.
formats
.
fluent
.
serialize
import
fluent_serialize
from
.
.
formats
.
gettext
.
serialize
import
gettext_serialize
from
.
.
formats
.
inc
.
serialize
import
inc_serialize
from
.
.
formats
.
ini
.
serialize
import
ini_serialize
from
.
.
formats
.
plain_json
.
serialize
import
plain_json_serialize
from
.
.
formats
.
properties
.
serialize
import
properties_serialize
from
.
.
formats
.
webext
.
serialize
import
webext_serialize
from
.
.
model
import
Message
Resource
android_serialize
:
(
    
Callable
[
[
Resource
[
str
]
|
Resource
[
Message
]
bool
]
Iterator
[
str
]
]
|
None
)
xliff_serialize
:
(
    
Callable
[
[
Resource
[
str
]
|
Resource
[
Message
]
bool
]
Iterator
[
str
]
]
|
None
)
try
:
    
from
.
.
formats
.
android
.
serialize
import
android_serialize
    
from
.
.
formats
.
xliff
.
serialize
import
xliff_serialize
except
ImportError
:
    
android_serialize
=
None
    
xliff_serialize
=
None
def
serialize_resource
(
    
resource
:
Resource
[
str
]
|
Resource
[
Message
]
    
format
:
Format
|
None
=
None
    
gettext_plurals
:
Sequence
[
str
]
|
None
=
None
    
trim_comments
:
bool
=
False
)
-
>
Iterator
[
str
]
:
    
"
"
"
    
Serialize
a
Resource
as
its
string
representation
.
    
If
format
is
set
it
overrides
the
resource
.
format
value
.
    
With
trim_comments
    
all
standalone
and
attached
comments
are
left
out
of
the
serialization
.
    
"
"
"
    
if
not
format
:
        
format
=
resource
.
format
    
if
format
=
=
Format
.
dtd
:
        
return
dtd_serialize
(
resource
trim_comments
=
trim_comments
)
    
elif
format
=
=
Format
.
fluent
:
        
return
fluent_serialize
(
resource
trim_comments
=
trim_comments
)
    
elif
format
=
=
Format
.
gettext
:
        
return
gettext_serialize
(
            
resource
plurals
=
gettext_plurals
trim_comments
=
trim_comments
        
)
    
elif
format
=
=
Format
.
inc
:
        
return
inc_serialize
(
resource
trim_comments
=
trim_comments
)
    
elif
format
=
=
Format
.
ini
:
        
return
ini_serialize
(
resource
trim_comments
=
trim_comments
)
    
elif
format
=
=
Format
.
plain_json
:
        
return
plain_json_serialize
(
resource
trim_comments
=
trim_comments
)
    
elif
format
=
=
Format
.
properties
:
        
return
properties_serialize
(
resource
trim_comments
=
trim_comments
)
    
elif
format
=
=
Format
.
webext
:
        
return
webext_serialize
(
resource
trim_comments
=
trim_comments
)
    
elif
format
=
=
Format
.
android
and
android_serialize
is
not
None
:
        
return
android_serialize
(
resource
trim_comments
)
    
elif
format
=
=
Format
.
xliff
and
xliff_serialize
is
not
None
:
        
return
xliff_serialize
(
resource
trim_comments
)
    
else
:
        
raise
ValueError
(
f
"
Unsupported
resource
format
:
{
format
or
resource
.
format
}
"
)
