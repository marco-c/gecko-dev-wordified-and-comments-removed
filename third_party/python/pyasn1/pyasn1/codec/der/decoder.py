from
pyasn1
.
codec
.
cer
import
decoder
from
pyasn1
.
type
import
univ
__all__
=
[
'
decode
'
]
class
BitStringDecoder
(
decoder
.
BitStringDecoder
)
:
    
supportConstructedForm
=
False
class
OctetStringDecoder
(
decoder
.
OctetStringDecoder
)
:
    
supportConstructedForm
=
False
RealDecoder
=
decoder
.
RealDecoder
tagMap
=
decoder
.
tagMap
.
copy
(
)
tagMap
.
update
(
    
{
univ
.
BitString
.
tagSet
:
BitStringDecoder
(
)
     
univ
.
OctetString
.
tagSet
:
OctetStringDecoder
(
)
     
univ
.
Real
.
tagSet
:
RealDecoder
(
)
}
)
typeMap
=
decoder
.
typeMap
.
copy
(
)
for
typeDecoder
in
tagMap
.
values
(
)
:
    
if
typeDecoder
.
protoComponent
is
not
None
:
        
typeId
=
typeDecoder
.
protoComponent
.
__class__
.
typeId
        
if
typeId
is
not
None
and
typeId
not
in
typeMap
:
            
typeMap
[
typeId
]
=
typeDecoder
class
Decoder
(
decoder
.
Decoder
)
:
    
supportIndefLength
=
False
decode
=
Decoder
(
tagMap
typeMap
)
