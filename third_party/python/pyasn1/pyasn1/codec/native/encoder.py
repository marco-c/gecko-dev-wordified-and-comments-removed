try
:
    
from
collections
import
OrderedDict
except
ImportError
:
    
OrderedDict
=
dict
from
pyasn1
.
type
import
base
univ
tag
char
useful
from
pyasn1
import
debug
error
__all__
=
[
'
encode
'
]
class
AbstractItemEncoder
(
object
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
raise
error
.
PyAsn1Error
(
'
Not
implemented
'
)
class
BooleanEncoder
(
AbstractItemEncoder
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
return
bool
(
value
)
class
IntegerEncoder
(
AbstractItemEncoder
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
return
int
(
value
)
class
BitStringEncoder
(
AbstractItemEncoder
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
return
str
(
value
)
class
OctetStringEncoder
(
AbstractItemEncoder
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
return
value
.
asOctets
(
)
class
TextStringEncoder
(
AbstractItemEncoder
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
return
value
.
prettyPrint
(
)
class
NullEncoder
(
AbstractItemEncoder
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
return
None
class
ObjectIdentifierEncoder
(
AbstractItemEncoder
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
return
str
(
value
)
class
RealEncoder
(
AbstractItemEncoder
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
return
float
(
value
)
class
SetEncoder
(
AbstractItemEncoder
)
:
    
protoDict
=
dict
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
value
.
verifySizeSpec
(
)
        
namedTypes
=
value
.
componentType
        
substrate
=
self
.
protoDict
(
)
        
for
idx
(
key
subValue
)
in
enumerate
(
value
.
items
(
)
)
:
            
if
namedTypes
and
namedTypes
[
idx
]
.
isOptional
and
not
value
[
idx
]
.
isValue
:
                
continue
            
substrate
[
key
]
=
encodeFun
(
subValue
*
*
options
)
        
return
substrate
class
SequenceEncoder
(
SetEncoder
)
:
    
protoDict
=
OrderedDict
class
SequenceOfEncoder
(
AbstractItemEncoder
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
value
.
verifySizeSpec
(
)
        
return
[
encodeFun
(
x
*
*
options
)
for
x
in
value
]
class
ChoiceEncoder
(
SequenceEncoder
)
:
    
pass
class
AnyEncoder
(
AbstractItemEncoder
)
:
    
def
encode
(
self
value
encodeFun
*
*
options
)
:
        
return
value
.
asOctets
(
)
tagMap
=
{
    
univ
.
Boolean
.
tagSet
:
BooleanEncoder
(
)
    
univ
.
Integer
.
tagSet
:
IntegerEncoder
(
)
    
univ
.
BitString
.
tagSet
:
BitStringEncoder
(
)
    
univ
.
OctetString
.
tagSet
:
OctetStringEncoder
(
)
    
univ
.
Null
.
tagSet
:
NullEncoder
(
)
    
univ
.
ObjectIdentifier
.
tagSet
:
ObjectIdentifierEncoder
(
)
    
univ
.
Enumerated
.
tagSet
:
IntegerEncoder
(
)
    
univ
.
Real
.
tagSet
:
RealEncoder
(
)
    
univ
.
SequenceOf
.
tagSet
:
SequenceOfEncoder
(
)
    
univ
.
SetOf
.
tagSet
:
SequenceOfEncoder
(
)
    
univ
.
Choice
.
tagSet
:
ChoiceEncoder
(
)
    
char
.
UTF8String
.
tagSet
:
TextStringEncoder
(
)
    
char
.
NumericString
.
tagSet
:
TextStringEncoder
(
)
    
char
.
PrintableString
.
tagSet
:
TextStringEncoder
(
)
    
char
.
TeletexString
.
tagSet
:
TextStringEncoder
(
)
    
char
.
VideotexString
.
tagSet
:
TextStringEncoder
(
)
    
char
.
IA5String
.
tagSet
:
TextStringEncoder
(
)
    
char
.
GraphicString
.
tagSet
:
TextStringEncoder
(
)
    
char
.
VisibleString
.
tagSet
:
TextStringEncoder
(
)
    
char
.
GeneralString
.
tagSet
:
TextStringEncoder
(
)
    
char
.
UniversalString
.
tagSet
:
TextStringEncoder
(
)
    
char
.
BMPString
.
tagSet
:
TextStringEncoder
(
)
    
useful
.
ObjectDescriptor
.
tagSet
:
OctetStringEncoder
(
)
    
useful
.
GeneralizedTime
.
tagSet
:
OctetStringEncoder
(
)
    
useful
.
UTCTime
.
tagSet
:
OctetStringEncoder
(
)
}
typeMap
=
{
    
univ
.
Set
.
typeId
:
SetEncoder
(
)
    
univ
.
SetOf
.
typeId
:
SequenceOfEncoder
(
)
    
univ
.
Sequence
.
typeId
:
SequenceEncoder
(
)
    
univ
.
SequenceOf
.
typeId
:
SequenceOfEncoder
(
)
    
univ
.
Choice
.
typeId
:
ChoiceEncoder
(
)
    
univ
.
Any
.
typeId
:
AnyEncoder
(
)
}
class
Encoder
(
object
)
:
    
def
__init__
(
self
tagMap
typeMap
=
{
}
)
:
        
self
.
__tagMap
=
tagMap
        
self
.
__typeMap
=
typeMap
    
def
__call__
(
self
value
*
*
options
)
:
        
if
not
isinstance
(
value
base
.
Asn1Item
)
:
            
raise
error
.
PyAsn1Error
(
'
value
is
not
valid
(
should
be
an
instance
of
an
ASN
.
1
Item
)
'
)
        
if
debug
.
logger
&
debug
.
flagEncoder
:
            
logger
=
debug
.
logger
        
else
:
            
logger
=
None
        
if
logger
:
            
debug
.
scope
.
push
(
type
(
value
)
.
__name__
)
            
logger
(
'
encoder
called
for
type
%
s
<
%
s
>
'
%
(
type
(
value
)
.
__name__
value
.
prettyPrint
(
)
)
)
        
tagSet
=
value
.
tagSet
        
try
:
            
concreteEncoder
=
self
.
__typeMap
[
value
.
typeId
]
        
except
KeyError
:
            
baseTagSet
=
tag
.
TagSet
(
value
.
tagSet
.
baseTag
value
.
tagSet
.
baseTag
)
            
try
:
                
concreteEncoder
=
self
.
__tagMap
[
baseTagSet
]
            
except
KeyError
:
                
raise
error
.
PyAsn1Error
(
'
No
encoder
for
%
s
'
%
(
value
)
)
        
if
logger
:
            
logger
(
'
using
value
codec
%
s
chosen
by
%
s
'
%
(
concreteEncoder
.
__class__
.
__name__
tagSet
)
)
        
pyObject
=
concreteEncoder
.
encode
(
value
self
*
*
options
)
        
if
logger
:
            
logger
(
'
encoder
%
s
produced
:
%
s
'
%
(
type
(
concreteEncoder
)
.
__name__
repr
(
pyObject
)
)
)
            
debug
.
scope
.
pop
(
)
        
return
pyObject
encode
=
Encoder
(
tagMap
typeMap
)
