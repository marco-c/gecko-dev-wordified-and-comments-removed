"
"
"
Utilities
for
working
with
paths
.
"
"
"
from
collections
.
abc
import
Sequence
from
contextlib
import
suppress
def
normalize_path_segments
(
segments
:
Sequence
[
str
]
)
-
>
list
[
str
]
:
    
"
"
"
Drop
'
.
'
and
'
.
.
'
from
a
sequence
of
str
segments
"
"
"
    
resolved_path
:
list
[
str
]
=
[
]
    
for
seg
in
segments
:
        
if
seg
=
=
"
.
.
"
:
            
with
suppress
(
IndexError
)
:
                
resolved_path
.
pop
(
)
        
elif
seg
!
=
"
.
"
:
            
resolved_path
.
append
(
seg
)
    
if
segments
and
segments
[
-
1
]
in
(
"
.
"
"
.
.
"
)
:
        
resolved_path
.
append
(
"
"
)
    
return
resolved_path
def
normalize_path
(
path
:
str
)
-
>
str
:
    
prefix
=
"
"
    
if
path
and
path
[
0
]
=
=
"
/
"
:
        
prefix
=
"
/
"
        
path
=
path
[
1
:
]
    
segments
=
path
.
split
(
"
/
"
)
    
return
prefix
+
"
/
"
.
join
(
normalize_path_segments
(
segments
)
)
