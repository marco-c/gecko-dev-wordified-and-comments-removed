import
codecs
import
re
from
typing
import
Callable
REGEX_SEPARATORS
=
re
.
compile
(
r
"
[
\
x2E
\
u3002
\
uFF0E
\
uFF61
]
"
)
REGEX_NON_ASCII
=
re
.
compile
(
r
"
[
^
\
0
-
\
x7E
]
"
)
def
encode
(
uni
:
str
)
-
>
str
:
    
return
codecs
.
encode
(
uni
encoding
=
"
punycode
"
)
.
decode
(
)
def
decode
(
ascii
:
str
)
-
>
str
:
    
return
codecs
.
decode
(
ascii
encoding
=
"
punycode
"
)
def
map_domain
(
string
:
str
fn
:
Callable
[
[
str
]
str
]
)
-
>
str
:
    
parts
=
string
.
split
(
"
"
)
    
result
=
"
"
    
if
len
(
parts
)
>
1
:
        
result
=
parts
[
0
]
+
"
"
        
string
=
parts
[
1
]
    
labels
=
REGEX_SEPARATORS
.
split
(
string
)
    
encoded
=
"
.
"
.
join
(
fn
(
label
)
for
label
in
labels
)
    
return
result
+
encoded
def
to_unicode
(
obj
:
str
)
-
>
str
:
    
def
mapping
(
obj
:
str
)
-
>
str
:
        
if
obj
.
startswith
(
"
xn
-
-
"
)
:
            
return
decode
(
obj
[
4
:
]
.
lower
(
)
)
        
return
obj
    
return
map_domain
(
obj
mapping
)
def
to_ascii
(
obj
:
str
)
-
>
str
:
    
def
mapping
(
obj
:
str
)
-
>
str
:
        
if
REGEX_NON_ASCII
.
search
(
obj
)
:
            
return
"
xn
-
-
"
+
encode
(
obj
)
        
return
obj
    
return
map_domain
(
obj
mapping
)
