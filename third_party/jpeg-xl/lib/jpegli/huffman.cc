#
include
"
lib
/
jpegli
/
huffman
.
h
"
namespace
jpegli
{
static
inline
int
NextTableBitSize
(
const
int
*
count
int
len
)
{
int
left
=
1
<
<
(
len
-
kJpegHuffmanRootTableBits
)
;
while
(
len
<
static_cast
<
int
>
(
kJpegHuffmanMaxBitLength
)
)
{
left
-
=
count
[
len
]
;
if
(
left
<
=
0
)
break
;
+
+
len
;
left
<
<
=
1
;
}
return
len
-
kJpegHuffmanRootTableBits
;
}
void
BuildJpegHuffmanTable
(
const
uint32_t
*
count
const
uint32_t
*
symbols
HuffmanTableEntry
*
lut
)
{
HuffmanTableEntry
code
;
HuffmanTableEntry
*
table
;
int
len
;
int
idx
;
int
key
;
int
reps
;
int
low
;
int
table_bits
;
int
table_size
;
int
tmp_count
[
kJpegHuffmanMaxBitLength
+
1
]
=
{
0
}
;
int
total_count
=
0
;
for
(
len
=
1
;
len
<
=
static_cast
<
int
>
(
kJpegHuffmanMaxBitLength
)
;
+
+
len
)
{
tmp_count
[
len
]
=
count
[
len
]
;
total_count
+
=
tmp_count
[
len
]
;
}
table
=
lut
;
table_bits
=
kJpegHuffmanRootTableBits
;
table_size
=
1
<
<
table_bits
;
if
(
total_count
=
=
1
)
{
code
.
bits
=
0
;
code
.
value
=
symbols
[
0
]
;
for
(
key
=
0
;
key
<
table_size
;
+
+
key
)
{
table
[
key
]
=
code
;
}
return
;
}
key
=
0
;
idx
=
0
;
for
(
len
=
1
;
len
<
=
kJpegHuffmanRootTableBits
;
+
+
len
)
{
for
(
;
tmp_count
[
len
]
>
0
;
-
-
tmp_count
[
len
]
)
{
code
.
bits
=
len
;
code
.
value
=
symbols
[
idx
+
+
]
;
reps
=
1
<
<
(
kJpegHuffmanRootTableBits
-
len
)
;
while
(
reps
-
-
)
{
table
[
key
+
+
]
=
code
;
}
}
}
table
+
=
table_size
;
table_size
=
0
;
low
=
0
;
for
(
len
=
kJpegHuffmanRootTableBits
+
1
;
len
<
=
static_cast
<
int
>
(
kJpegHuffmanMaxBitLength
)
;
+
+
len
)
{
for
(
;
tmp_count
[
len
]
>
0
;
-
-
tmp_count
[
len
]
)
{
if
(
low
>
=
table_size
)
{
table
+
=
table_size
;
table_bits
=
NextTableBitSize
(
tmp_count
len
)
;
table_size
=
1
<
<
table_bits
;
low
=
0
;
lut
[
key
]
.
bits
=
table_bits
+
kJpegHuffmanRootTableBits
;
lut
[
key
]
.
value
=
(
table
-
lut
)
-
key
;
+
+
key
;
}
code
.
bits
=
len
-
kJpegHuffmanRootTableBits
;
code
.
value
=
symbols
[
idx
+
+
]
;
reps
=
1
<
<
(
table_bits
-
code
.
bits
)
;
while
(
reps
-
-
)
{
table
[
low
+
+
]
=
code
;
}
}
}
}
}
