#
ifndef
LIB_JPEGLI_BIT_WRITER_H_
#
define
LIB_JPEGLI_BIT_WRITER_H_
#
include
<
stdio
.
h
>
#
include
<
jpeglib
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
.
h
>
#
include
"
lib
/
jxl
/
base
/
byte_order
.
h
"
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
namespace
jpegli
{
struct
JpegBitWriter
{
j_compress_ptr
cinfo
;
uint8_t
*
data
;
size_t
len
;
size_t
pos
;
size_t
output_pos
;
uint64_t
put_buffer
;
int
free_bits
;
bool
healthy
;
}
;
void
JpegBitWriterInit
(
j_compress_ptr
cinfo
)
;
bool
EmptyBitWriterBuffer
(
JpegBitWriter
*
bw
)
;
void
JumpToByteBoundary
(
JpegBitWriter
*
bw
)
;
static
JXL_INLINE
uint64_t
HasZeroByte
(
uint64_t
x
)
{
return
(
x
-
0x0101010101010101ULL
)
&
~
x
&
0x8080808080808080ULL
;
}
static
JXL_INLINE
void
EmitByte
(
JpegBitWriter
*
bw
int
byte
)
{
bw
-
>
data
[
bw
-
>
pos
+
+
]
=
byte
;
if
(
byte
=
=
0xFF
)
bw
-
>
data
[
bw
-
>
pos
+
+
]
=
0
;
}
static
JXL_INLINE
void
DischargeBitBuffer
(
JpegBitWriter
*
bw
)
{
if
(
HasZeroByte
(
~
bw
-
>
put_buffer
)
)
{
EmitByte
(
bw
(
bw
-
>
put_buffer
>
>
56
)
&
0xFF
)
;
EmitByte
(
bw
(
bw
-
>
put_buffer
>
>
48
)
&
0xFF
)
;
EmitByte
(
bw
(
bw
-
>
put_buffer
>
>
40
)
&
0xFF
)
;
EmitByte
(
bw
(
bw
-
>
put_buffer
>
>
32
)
&
0xFF
)
;
EmitByte
(
bw
(
bw
-
>
put_buffer
>
>
24
)
&
0xFF
)
;
EmitByte
(
bw
(
bw
-
>
put_buffer
>
>
16
)
&
0xFF
)
;
EmitByte
(
bw
(
bw
-
>
put_buffer
>
>
8
)
&
0xFF
)
;
EmitByte
(
bw
(
bw
-
>
put_buffer
>
>
0
)
&
0xFF
)
;
}
else
{
StoreBE64
(
bw
-
>
put_buffer
bw
-
>
data
+
bw
-
>
pos
)
;
bw
-
>
pos
+
=
8
;
}
}
static
JXL_INLINE
void
WriteBits
(
JpegBitWriter
*
bw
int
nbits
uint64_t
bits
)
{
if
(
nbits
=
=
0
)
{
bw
-
>
healthy
=
false
;
return
;
}
bw
-
>
free_bits
-
=
nbits
;
if
(
bw
-
>
free_bits
<
0
)
{
bw
-
>
put_buffer
<
<
=
(
bw
-
>
free_bits
+
nbits
)
;
bw
-
>
put_buffer
|
=
(
bits
>
>
-
bw
-
>
free_bits
)
;
DischargeBitBuffer
(
bw
)
;
bw
-
>
free_bits
+
=
64
;
bw
-
>
put_buffer
=
nbits
;
}
bw
-
>
put_buffer
<
<
=
nbits
;
bw
-
>
put_buffer
|
=
bits
;
}
}
#
endif
