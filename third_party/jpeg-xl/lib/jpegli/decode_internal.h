#
ifndef
LIB_JPEGLI_DECODE_INTERNAL_H_
#
define
LIB_JPEGLI_DECODE_INTERNAL_H_
#
include
<
stdint
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
array
>
#
include
<
hwy
/
aligned_allocator
.
h
>
#
include
<
set
>
#
include
<
vector
>
#
include
"
lib
/
jpegli
/
common
.
h
"
#
include
"
lib
/
jpegli
/
common_internal
.
h
"
#
include
"
lib
/
jpegli
/
huffman
.
h
"
namespace
jpegli
{
typedef
int16_t
coeff_t
;
struct
DecJPEGComponent
{
hwy
:
:
AlignedFreeUniquePtr
<
coeff_t
[
]
>
coeffs
;
}
;
struct
MCUCodingState
{
coeff_t
last_dc_coeff
[
kMaxComponents
]
;
int
eobrun
;
std
:
:
vector
<
coeff_t
>
coeffs
;
}
;
}
struct
jpeg_decomp_master
{
size_t
codestream_bits_ahead_
=
0
;
bool
found_soi_
=
false
;
bool
found_dri_
=
false
;
bool
found_sof_
=
false
;
bool
found_eoi_
=
false
;
size_t
icc_index_
=
0
;
size_t
icc_total_
=
0
;
std
:
:
vector
<
uint8_t
>
icc_profile_
;
std
:
:
vector
<
jpegli
:
:
DecJPEGComponent
>
components_
;
std
:
:
vector
<
jpegli
:
:
HuffmanTableEntry
>
dc_huff_lut_
;
std
:
:
vector
<
jpegli
:
:
HuffmanTableEntry
>
ac_huff_lut_
;
uint8_t
huff_slot_defined_
[
256
]
=
{
}
;
std
:
:
set
<
int
>
markers_to_save_
;
jpeg_marker_parser_method
app_marker_parsers
[
16
]
;
jpeg_marker_parser_method
com_marker_parser
;
bool
is_multiscan_
;
size_t
iMCU_cols_
;
uint16_t
scan_progression_
[
jpegli
:
:
kMaxComponents
]
[
DCTSIZE2
]
;
size_t
scan_mcu_row_
;
size_t
scan_mcu_col_
;
size_t
mcu_rows_per_iMCU_row_
;
jpegli
:
:
coeff_t
last_dc_coeff_
[
jpegli
:
:
kMaxComponents
]
;
int
eobrun_
;
int
restarts_to_go_
;
int
next_restart_marker_
;
jpegli
:
:
MCUCodingState
mcu_
;
JpegliDataType
output_data_type_
=
JPEGLI_TYPE_UINT8
;
bool
swap_endianness_
=
false
;
size_t
xoffset_
=
0
;
JSAMPARRAY
scanlines_
;
JDIMENSION
max_lines_
;
size_t
num_output_rows_
;
std
:
:
array
<
size_t
jpegli
:
:
kMaxComponents
>
raw_height_
;
std
:
:
array
<
jpegli
:
:
RowBuffer
<
float
>
jpegli
:
:
kMaxComponents
>
raw_output_
;
std
:
:
array
<
jpegli
:
:
RowBuffer
<
float
>
jpegli
:
:
kMaxComponents
>
render_output_
;
hwy
:
:
AlignedFreeUniquePtr
<
float
[
]
>
idct_scratch_
;
hwy
:
:
AlignedFreeUniquePtr
<
float
[
]
>
upsample_scratch_
;
hwy
:
:
AlignedFreeUniquePtr
<
uint8_t
[
]
>
output_scratch_
;
hwy
:
:
AlignedFreeUniquePtr
<
float
[
]
>
dequant_
;
hwy
:
:
AlignedFreeUniquePtr
<
int
[
]
>
nonzeros_
;
hwy
:
:
AlignedFreeUniquePtr
<
int
[
]
>
sumabs_
;
std
:
:
vector
<
size_t
>
num_processed_blocks_
;
hwy
:
:
AlignedFreeUniquePtr
<
float
[
]
>
biases_
;
}
;
#
endif
