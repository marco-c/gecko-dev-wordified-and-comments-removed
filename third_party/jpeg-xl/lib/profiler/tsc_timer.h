#
ifndef
LIB_PROFILER_TSC_TIMER_H_
#
define
LIB_PROFILER_TSC_TIMER_H_
#
include
<
stdint
.
h
>
#
include
<
ctime
>
#
include
<
hwy
/
base
.
h
>
#
include
<
hwy
/
cache_control
.
h
>
namespace
profiler
{
static
HWY_INLINE
HWY_MAYBE_UNUSED
uint64_t
TicksBefore
(
)
{
uint64_t
t
;
#
if
HWY_ARCH_PPC
asm
volatile
(
"
mfspr
%
0
%
1
"
:
"
=
r
"
(
t
)
:
"
i
"
(
268
)
)
;
#
elif
HWY_ARCH_X86_64
&
&
HWY_COMPILER_MSVC
hwy
:
:
LoadFence
(
)
;
HWY_FENCE
;
t
=
__rdtsc
(
)
;
hwy
:
:
LoadFence
(
)
;
HWY_FENCE
;
#
elif
HWY_ARCH_X86_64
&
&
(
HWY_COMPILER_CLANG
|
|
HWY_COMPILER_GCC
)
asm
volatile
(
"
lfence
\
n
\
t
"
"
rdtsc
\
n
\
t
"
"
shl
32
%
%
rdx
\
n
\
t
"
"
or
%
%
rdx
%
0
\
n
\
t
"
"
lfence
"
:
"
=
a
"
(
t
)
:
:
"
rdx
"
"
memory
"
"
cc
"
)
;
#
else
timespec
ts
;
clock_gettime
(
CLOCK_MONOTONIC
&
ts
)
;
t
=
ts
.
tv_sec
*
1000000000LL
+
ts
.
tv_nsec
;
#
endif
return
t
;
}
static
HWY_INLINE
HWY_MAYBE_UNUSED
uint64_t
TicksAfter
(
)
{
uint64_t
t
;
#
if
HWY_ARCH_X86_64
&
&
HWY_COMPILER_MSVC
HWY_FENCE
;
unsigned
aux
;
t
=
__rdtscp
(
&
aux
)
;
hwy
:
:
LoadFence
(
)
;
HWY_FENCE
;
#
elif
HWY_ARCH_X86_64
&
&
(
HWY_COMPILER_CLANG
|
|
HWY_COMPILER_GCC
)
asm
volatile
(
"
rdtscp
\
n
\
t
"
"
shl
32
%
%
rdx
\
n
\
t
"
"
or
%
%
rdx
%
0
\
n
\
t
"
"
lfence
"
:
"
=
a
"
(
t
)
:
:
"
rcx
"
"
rdx
"
"
memory
"
"
cc
"
)
;
#
else
t
=
TicksBefore
(
)
;
#
endif
return
t
;
}
}
#
endif
