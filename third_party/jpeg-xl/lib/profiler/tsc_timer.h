#
ifndef
LIB_PROFILER_TSC_TIMER_H_
#
define
LIB_PROFILER_TSC_TIMER_H_
#
include
<
stdint
.
h
>
#
include
<
time
.
h
>
#
if
defined
(
_WIN32
)
|
|
defined
(
_WIN64
)
#
ifndef
WIN32_LEAN_AND_MEAN
#
define
WIN32_LEAN_AND_MEAN
#
endif
#
ifndef
NOMINMAX
#
define
NOMINMAX
#
endif
#
ifndef
NOGDI
#
define
NOGDI
#
endif
#
include
<
windows
.
h
>
#
undef
LoadFence
#
endif
#
if
defined
(
__APPLE__
)
#
include
<
mach
/
mach
.
h
>
#
include
<
mach
/
mach_time
.
h
>
#
endif
#
if
defined
(
__HAIKU__
)
#
include
<
OS
.
h
>
#
endif
#
include
<
ctime
>
#
include
<
hwy
/
base
.
h
>
#
include
<
hwy
/
cache_control
.
h
>
namespace
profiler
{
using
Ticks
=
uint64_t
;
static
HWY_INLINE
HWY_MAYBE_UNUSED
Ticks
TicksBefore
(
)
{
Ticks
t
;
#
if
HWY_ARCH_PPC
&
&
defined
(
__GLIBC__
)
asm
volatile
(
"
mfspr
%
0
%
1
"
:
"
=
r
"
(
t
)
:
"
i
"
(
268
)
)
;
#
elif
HWY_ARCH_X86
&
&
HWY_COMPILER_MSVC
hwy
:
:
LoadFence
(
)
;
HWY_FENCE
;
t
=
__rdtsc
(
)
;
hwy
:
:
LoadFence
(
)
;
HWY_FENCE
;
#
elif
HWY_ARCH_X86_64
asm
volatile
(
"
lfence
\
n
\
t
"
"
rdtsc
\
n
\
t
"
"
shl
32
%
%
rdx
\
n
\
t
"
"
or
%
%
rdx
%
0
\
n
\
t
"
"
lfence
"
:
"
=
a
"
(
t
)
:
:
"
rdx
"
"
memory
"
"
cc
"
)
;
#
elif
HWY_ARCH_RVV
asm
volatile
(
"
rdcycle
%
0
"
:
"
=
r
"
(
t
)
)
;
#
elif
defined
(
_WIN32
)
|
|
defined
(
_WIN64
)
LARGE_INTEGER
counter
;
(
void
)
QueryPerformanceCounter
(
&
counter
)
;
t
=
counter
.
QuadPart
;
#
elif
defined
(
__APPLE__
)
t
=
mach_absolute_time
(
)
;
#
elif
defined
(
__HAIKU__
)
t
=
system_time_nsecs
(
)
;
#
else
timespec
ts
;
clock_gettime
(
CLOCK_MONOTONIC
&
ts
)
;
t
=
static_cast
<
Ticks
>
(
ts
.
tv_sec
*
1000000000LL
+
ts
.
tv_nsec
)
;
#
endif
return
t
;
}
static
HWY_INLINE
HWY_MAYBE_UNUSED
Ticks
TicksAfter
(
)
{
Ticks
t
;
#
if
HWY_ARCH_PPC
&
&
defined
(
__GLIBC__
)
asm
volatile
(
"
mfspr
%
0
%
1
"
:
"
=
r
"
(
t
)
:
"
i
"
(
268
)
)
;
#
elif
HWY_ARCH_X86
&
&
HWY_COMPILER_MSVC
HWY_FENCE
;
unsigned
aux
;
t
=
__rdtscp
(
&
aux
)
;
hwy
:
:
LoadFence
(
)
;
HWY_FENCE
;
#
elif
HWY_ARCH_X86_64
asm
volatile
(
"
rdtscp
\
n
\
t
"
"
shl
32
%
%
rdx
\
n
\
t
"
"
or
%
%
rdx
%
0
\
n
\
t
"
"
lfence
"
:
"
=
a
"
(
t
)
:
:
"
rcx
"
"
rdx
"
"
memory
"
"
cc
"
)
;
#
else
t
=
TicksBefore
(
)
;
#
endif
return
t
;
}
}
#
endif
