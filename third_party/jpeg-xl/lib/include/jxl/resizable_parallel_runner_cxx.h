#
ifndef
JXL_RESIZABLE_PARALLEL_RUNNER_CXX_H_
#
define
JXL_RESIZABLE_PARALLEL_RUNNER_CXX_H_
#
include
<
jxl
/
memory_manager
.
h
>
#
include
<
jxl
/
resizable_parallel_runner
.
h
>
#
include
<
memory
>
#
if
!
(
defined
(
__cplusplus
)
|
|
defined
(
c_plusplus
)
)
#
error
\
"
This
a
C
+
+
only
header
.
Use
jxl
/
jxl_resizable_parallel_runner
.
h
from
C
"
\
"
sources
.
"
#
endif
struct
JxlResizableParallelRunnerDestroyStruct
{
void
operator
(
)
(
void
*
runner
)
{
JxlResizableParallelRunnerDestroy
(
runner
)
;
}
}
;
typedef
std
:
:
unique_ptr
<
void
JxlResizableParallelRunnerDestroyStruct
>
JxlResizableParallelRunnerPtr
;
static
inline
JxlResizableParallelRunnerPtr
JxlResizableParallelRunnerMake
(
const
JxlMemoryManager
*
memory_manager
)
{
return
JxlResizableParallelRunnerPtr
(
JxlResizableParallelRunnerCreate
(
memory_manager
)
)
;
}
#
endif
