#
ifndef
JXL_DECODE_H_
#
define
JXL_DECODE_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
jxl
/
codestream_header
.
h
"
#
include
"
jxl
/
color_encoding
.
h
"
#
include
"
jxl
/
jxl_export
.
h
"
#
include
"
jxl
/
memory_manager
.
h
"
#
include
"
jxl
/
parallel_runner
.
h
"
#
include
"
jxl
/
types
.
h
"
#
if
defined
(
__cplusplus
)
|
|
defined
(
c_plusplus
)
extern
"
C
"
{
#
endif
JXL_EXPORT
uint32_t
JxlDecoderVersion
(
void
)
;
typedef
enum
{
JXL_SIG_NOT_ENOUGH_BYTES
=
0
JXL_SIG_INVALID
=
1
JXL_SIG_CODESTREAM
=
2
JXL_SIG_CONTAINER
=
3
}
JxlSignature
;
JXL_EXPORT
JxlSignature
JxlSignatureCheck
(
const
uint8_t
*
buf
size_t
len
)
;
typedef
struct
JxlDecoderStruct
JxlDecoder
;
JXL_EXPORT
JxlDecoder
*
JxlDecoderCreate
(
const
JxlMemoryManager
*
memory_manager
)
;
JXL_EXPORT
void
JxlDecoderReset
(
JxlDecoder
*
dec
)
;
JXL_EXPORT
void
JxlDecoderDestroy
(
JxlDecoder
*
dec
)
;
typedef
enum
{
JXL_DEC_SUCCESS
=
0
JXL_DEC_ERROR
=
1
JXL_DEC_NEED_MORE_INPUT
=
2
JXL_DEC_NEED_PREVIEW_OUT_BUFFER
=
3
JXL_DEC_NEED_DC_OUT_BUFFER
=
4
JXL_DEC_NEED_IMAGE_OUT_BUFFER
=
5
JXL_DEC_JPEG_NEED_MORE_OUTPUT
=
6
JXL_DEC_BASIC_INFO
=
0x40
JXL_DEC_EXTENSIONS
=
0x80
JXL_DEC_COLOR_ENCODING
=
0x100
JXL_DEC_PREVIEW_IMAGE
=
0x200
JXL_DEC_FRAME
=
0x400
JXL_DEC_DC_IMAGE
=
0x800
JXL_DEC_FULL_IMAGE
=
0x1000
JXL_DEC_JPEG_RECONSTRUCTION
=
0x2000
}
JxlDecoderStatus
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderDefaultPixelFormat
(
const
JxlDecoder
*
dec
JxlPixelFormat
*
format
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderSetParallelRunner
(
JxlDecoder
*
dec
JxlParallelRunner
parallel_runner
void
*
parallel_runner_opaque
)
;
JXL_EXPORT
size_t
JxlDecoderSizeHintBasicInfo
(
const
JxlDecoder
*
dec
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderSubscribeEvents
(
JxlDecoder
*
dec
int
events_wanted
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderSetKeepOrientation
(
JxlDecoder
*
dec
JXL_BOOL
keep_orientation
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderProcessInput
(
JxlDecoder
*
dec
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderSetInput
(
JxlDecoder
*
dec
const
uint8_t
*
data
size_t
size
)
;
JXL_EXPORT
size_t
JxlDecoderReleaseInput
(
JxlDecoder
*
dec
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderGetBasicInfo
(
const
JxlDecoder
*
dec
JxlBasicInfo
*
info
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderGetExtraChannelInfo
(
const
JxlDecoder
*
dec
size_t
index
JxlExtraChannelInfo
*
info
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderGetExtraChannelName
(
const
JxlDecoder
*
dec
size_t
index
char
*
name
size_t
size
)
;
typedef
enum
{
JXL_COLOR_PROFILE_TARGET_ORIGINAL
=
0
JXL_COLOR_PROFILE_TARGET_DATA
=
1
}
JxlColorProfileTarget
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderGetColorAsEncodedProfile
(
const
JxlDecoder
*
dec
const
JxlPixelFormat
*
format
JxlColorProfileTarget
target
JxlColorEncoding
*
color_encoding
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderGetICCProfileSize
(
const
JxlDecoder
*
dec
const
JxlPixelFormat
*
format
JxlColorProfileTarget
target
size_t
*
size
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderGetColorAsICCProfile
(
const
JxlDecoder
*
dec
const
JxlPixelFormat
*
format
JxlColorProfileTarget
target
uint8_t
*
icc_profile
size_t
size
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderPreviewOutBufferSize
(
const
JxlDecoder
*
dec
const
JxlPixelFormat
*
format
size_t
*
size
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderSetPreviewOutBuffer
(
JxlDecoder
*
dec
const
JxlPixelFormat
*
format
void
*
buffer
size_t
size
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderGetFrameHeader
(
const
JxlDecoder
*
dec
JxlFrameHeader
*
header
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderGetFrameName
(
const
JxlDecoder
*
dec
char
*
name
size_t
size
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderDCOutBufferSize
(
const
JxlDecoder
*
dec
const
JxlPixelFormat
*
format
size_t
*
size
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderSetDCOutBuffer
(
JxlDecoder
*
dec
const
JxlPixelFormat
*
format
void
*
buffer
size_t
size
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderImageOutBufferSize
(
const
JxlDecoder
*
dec
const
JxlPixelFormat
*
format
size_t
*
size
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderSetJPEGBuffer
(
JxlDecoder
*
dec
uint8_t
*
data
size_t
size
)
;
JXL_EXPORT
size_t
JxlDecoderReleaseJPEGBuffer
(
JxlDecoder
*
dec
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderSetImageOutBuffer
(
JxlDecoder
*
dec
const
JxlPixelFormat
*
format
void
*
buffer
size_t
size
)
;
typedef
void
(
*
JxlImageOutCallback
)
(
void
*
opaque
size_t
x
size_t
y
size_t
num_pixels
const
void
*
pixels
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderSetImageOutCallback
(
JxlDecoder
*
dec
const
JxlPixelFormat
*
format
JxlImageOutCallback
callback
void
*
opaque
)
;
JXL_EXPORT
JxlDecoderStatus
JxlDecoderFlushImage
(
JxlDecoder
*
dec
)
;
#
if
defined
(
__cplusplus
)
|
|
defined
(
c_plusplus
)
}
#
endif
#
endif
