#
ifndef
JXL_ENCODE_H_
#
define
JXL_ENCODE_H_
#
include
"
jxl
/
codestream_header
.
h
"
#
include
"
jxl
/
decode
.
h
"
#
include
"
jxl
/
jxl_export
.
h
"
#
include
"
jxl
/
memory_manager
.
h
"
#
include
"
jxl
/
parallel_runner
.
h
"
#
if
defined
(
__cplusplus
)
|
|
defined
(
c_plusplus
)
extern
"
C
"
{
#
endif
JXL_EXPORT
uint32_t
JxlEncoderVersion
(
void
)
;
typedef
struct
JxlEncoderStruct
JxlEncoder
;
typedef
struct
JxlEncoderOptionsStruct
JxlEncoderOptions
;
typedef
enum
{
JXL_ENC_SUCCESS
=
0
JXL_ENC_ERROR
=
1
JXL_ENC_NEED_MORE_OUTPUT
=
2
JXL_ENC_NOT_SUPPORTED
=
3
}
JxlEncoderStatus
;
typedef
enum
{
JXL_ENC_OPTION_EFFORT
=
0
JXL_ENC_OPTION_DECODING_SPEED
=
1
JXL_ENC_OPTION_RESAMPLING
=
2
JXL_ENC_OPTION_EXTRA_CHANNEL_RESAMPLING
=
3
JXL_ENC_OPTION_ALREADY_DOWNSAMPLED
=
4
JXL_ENC_OPTION_PHOTON_NOISE
=
5
JXL_ENC_OPTION_NOISE
=
6
JXL_ENC_OPTION_DOTS
=
7
JXL_ENC_OPTION_PATCHES
=
8
JXL_ENC_OPTION_EPF
=
9
JXL_ENC_OPTION_GABORISH
=
10
JXL_ENC_OPTION_MODULAR
=
11
JXL_ENC_OPTION_KEEP_INVISIBLE
=
12
JXL_ENC_OPTION_GROUP_ORDER
=
13
JXL_ENC_OPTION_GROUP_ORDER_CENTER_X
=
14
JXL_ENC_OPTION_GROUP_ORDER_CENTER_Y
=
15
JXL_ENC_OPTION_RESPONSIVE
=
16
JXL_ENC_OPTION_PROGRESSIVE_AC
=
17
JXL_ENC_OPTION_QPROGRESSIVE_AC
=
18
JXL_ENC_OPTION_PROGRESSIVE_DC
=
19
JXL_ENC_OPTION_CHANNEL_COLORS_GLOBAL_PERCENT
=
20
JXL_ENC_OPTION_CHANNEL_COLORS_GROUP_PERCENT
=
21
JXL_ENC_OPTION_PALETTE_COLORS
=
22
JXL_ENC_OPTION_LOSSY_PALETTE
=
23
JXL_ENC_OPTION_COLOR_TRANSFORM
=
24
JXL_ENC_OPTION_MODULAR_COLOR_SPACE
=
25
JXL_ENC_OPTION_MODULAR_GROUP_SIZE
=
26
JXL_ENC_OPTION_MODULAR_PREDICTOR
=
27
JXL_ENC_OPTION_MODULAR_MA_TREE_LEARNING_PERCENT
=
28
JXL_ENC_OPTION_MODULAR_NB_PREV_CHANNELS
=
29
JXL_ENC_OPTION_JPEG_RECON_CFL
=
30
JXL_ENC_OPTION_FILL_ENUM
=
65535
}
JxlEncoderOptionId
;
JXL_EXPORT
JxlEncoder
*
JxlEncoderCreate
(
const
JxlMemoryManager
*
memory_manager
)
;
JXL_EXPORT
void
JxlEncoderReset
(
JxlEncoder
*
enc
)
;
JXL_EXPORT
void
JxlEncoderDestroy
(
JxlEncoder
*
enc
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderSetParallelRunner
(
JxlEncoder
*
enc
JxlParallelRunner
parallel_runner
void
*
parallel_runner_opaque
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderProcessOutput
(
JxlEncoder
*
enc
uint8_t
*
*
next_out
size_t
*
avail_out
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderAddJPEGFrame
(
const
JxlEncoderOptions
*
options
const
uint8_t
*
buffer
size_t
size
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderAddImageFrame
(
const
JxlEncoderOptions
*
options
const
JxlPixelFormat
*
pixel_format
const
void
*
buffer
size_t
size
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderSetExtraChannelBuffer
(
const
JxlEncoderOptions
*
options
const
JxlPixelFormat
*
pixel_format
const
void
*
buffer
size_t
size
uint32_t
index
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderAddBox
(
JxlEncoder
*
enc
const
JxlBoxType
type
const
uint8_t
*
contents
size_t
size
JXL_BOOL
compress_box
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderUseBoxes
(
JxlEncoder
*
enc
)
;
JXL_EXPORT
void
JxlEncoderCloseBoxes
(
JxlEncoder
*
enc
)
;
JXL_EXPORT
void
JxlEncoderCloseFrames
(
JxlEncoder
*
enc
)
;
JXL_EXPORT
void
JxlEncoderCloseInput
(
JxlEncoder
*
enc
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderSetColorEncoding
(
JxlEncoder
*
enc
const
JxlColorEncoding
*
color
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderSetICCProfile
(
JxlEncoder
*
enc
const
uint8_t
*
icc_profile
size_t
size
)
;
JXL_EXPORT
void
JxlEncoderInitBasicInfo
(
JxlBasicInfo
*
info
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderSetBasicInfo
(
JxlEncoder
*
enc
const
JxlBasicInfo
*
info
)
;
JXL_EXPORT
void
JxlEncoderInitExtraChannelInfo
(
JxlExtraChannelType
type
JxlExtraChannelInfo
*
info
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderSetExtraChannelInfo
(
JxlEncoder
*
enc
size_t
index
const
JxlExtraChannelInfo
*
info
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderSetExtraChannelName
(
JxlEncoder
*
enc
size_t
index
const
char
*
name
size_t
size
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderOptionsSetInteger
(
JxlEncoderOptions
*
options
JxlEncoderOptionId
option
int32_t
value
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderUseContainer
(
JxlEncoder
*
enc
JXL_BOOL
use_container
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderStoreJPEGMetadata
(
JxlEncoder
*
enc
JXL_BOOL
store_jpeg_metadata
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderSetCodestreamLevel
(
JxlEncoder
*
enc
int
level
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderOptionsSetLossless
(
JxlEncoderOptions
*
options
JXL_BOOL
lossless
)
;
JXL_EXPORT
JXL_DEPRECATED
JxlEncoderStatus
JxlEncoderOptionsSetEffort
(
JxlEncoderOptions
*
options
int
effort
)
;
JXL_EXPORT
JXL_DEPRECATED
JxlEncoderStatus
JxlEncoderOptionsSetDecodingSpeed
(
JxlEncoderOptions
*
options
int
tier
)
;
JXL_EXPORT
JxlEncoderStatus
JxlEncoderOptionsSetDistance
(
JxlEncoderOptions
*
options
float
distance
)
;
JXL_EXPORT
JxlEncoderOptions
*
JxlEncoderOptionsCreate
(
JxlEncoder
*
enc
const
JxlEncoderOptions
*
source
)
;
JXL_EXPORT
void
JxlColorEncodingSetToSRGB
(
JxlColorEncoding
*
color_encoding
JXL_BOOL
is_gray
)
;
JXL_EXPORT
void
JxlColorEncodingSetToLinearSRGB
(
JxlColorEncoding
*
color_encoding
JXL_BOOL
is_gray
)
;
#
if
defined
(
__cplusplus
)
|
|
defined
(
c_plusplus
)
}
#
endif
#
endif
