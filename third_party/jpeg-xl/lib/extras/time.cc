#
include
"
lib
/
extras
/
time
.
h
"
#
include
<
stdint
.
h
>
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
ctime
>
#
include
"
lib
/
jxl
/
base
/
os_macros
.
h
"
#
if
JXL_OS_WIN
#
ifndef
NOMINMAX
#
define
NOMINMAX
#
endif
#
include
<
windows
.
h
>
#
endif
#
if
JXL_OS_MAC
#
include
<
mach
/
mach
.
h
>
#
include
<
mach
/
mach_time
.
h
>
#
endif
#
if
JXL_OS_HAIKU
#
include
<
OS
.
h
>
#
endif
namespace
jxl
{
double
Now
(
)
{
#
if
JXL_OS_WIN
LARGE_INTEGER
counter
;
(
void
)
QueryPerformanceCounter
(
&
counter
)
;
LARGE_INTEGER
freq
;
(
void
)
QueryPerformanceFrequency
(
&
freq
)
;
return
double
(
counter
.
QuadPart
)
/
freq
.
QuadPart
;
#
elif
JXL_OS_MAC
const
auto
t
=
mach_absolute_time
(
)
;
static
mach_timebase_info_data_t
timebase
;
if
(
timebase
.
denom
=
=
0
)
{
(
void
)
mach_timebase_info
(
&
timebase
)
;
}
return
double
(
t
)
*
timebase
.
numer
/
timebase
.
denom
*
1E
-
9
;
#
elif
JXL_OS_HAIKU
return
double
(
system_time_nsecs
(
)
)
*
1E
-
9
;
#
else
timespec
t
;
clock_gettime
(
CLOCK_MONOTONIC
&
t
)
;
return
t
.
tv_sec
+
t
.
tv_nsec
*
1E
-
9
;
#
endif
}
}
