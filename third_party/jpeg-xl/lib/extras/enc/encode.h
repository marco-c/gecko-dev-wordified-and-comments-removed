#
ifndef
LIB_EXTRAS_ENC_ENCODE_H_
#
define
LIB_EXTRAS_ENC_ENCODE_H_
#
include
<
jxl
/
codestream_header
.
h
>
#
include
<
jxl
/
types
.
h
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
unordered_map
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
lib
/
extras
/
packed_image
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
namespace
jxl
{
namespace
extras
{
struct
EncodedImage
{
std
:
:
vector
<
std
:
:
vector
<
uint8_t
>
>
bitstreams
;
std
:
:
vector
<
std
:
:
vector
<
std
:
:
vector
<
uint8_t
>
>
>
extra_channel_bitstreams
;
std
:
:
vector
<
uint8_t
>
preview_bitstream
;
std
:
:
vector
<
uint8_t
>
icc
;
std
:
:
vector
<
uint8_t
>
metadata
;
}
;
class
Encoder
{
public
:
static
std
:
:
unique_ptr
<
Encoder
>
FromExtension
(
std
:
:
string
extension
)
;
virtual
~
Encoder
(
)
=
default
;
virtual
std
:
:
vector
<
JxlPixelFormat
>
AcceptedFormats
(
)
const
=
0
;
virtual
Status
Encode
(
const
PackedPixelFile
&
ppf
EncodedImage
*
encoded_image
ThreadPool
*
pool
)
const
=
0
;
void
SetOption
(
std
:
:
string
name
std
:
:
string
value
)
{
options_
[
std
:
:
move
(
name
)
]
=
std
:
:
move
(
value
)
;
}
static
Status
VerifyBasicInfo
(
const
JxlBasicInfo
&
info
)
;
static
Status
VerifyImageSize
(
const
PackedImage
&
image
const
JxlBasicInfo
&
info
)
;
static
Status
VerifyBitDepth
(
JxlDataType
data_type
uint32_t
bits_per_sample
uint32_t
exponent_bits
)
;
protected
:
const
std
:
:
unordered_map
<
std
:
:
string
std
:
:
string
>
&
options
(
)
const
{
return
options_
;
}
Status
VerifyFormat
(
const
JxlPixelFormat
&
format
)
const
;
Status
VerifyPackedImage
(
const
PackedImage
&
image
const
JxlBasicInfo
&
info
)
const
;
private
:
std
:
:
unordered_map
<
std
:
:
string
std
:
:
string
>
options_
;
}
;
std
:
:
string
ListOfEncodeCodecs
(
)
;
}
}
#
endif
