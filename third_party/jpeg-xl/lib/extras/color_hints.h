#
ifndef
LIB_EXTRAS_COLOR_HINTS_H_
#
define
LIB_EXTRAS_COLOR_HINTS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
codec_in_out
.
h
"
namespace
jxl
{
class
ColorHints
{
public
:
void
Add
(
const
std
:
:
string
&
key
const
std
:
:
string
&
value
)
{
kv_
.
emplace_back
(
key
value
)
;
}
template
<
class
Func
>
Status
Foreach
(
const
Func
&
func
)
const
{
for
(
const
KeyValue
&
kv
:
kv_
)
{
Status
ok
=
func
(
kv
.
key
kv
.
value
)
;
if
(
!
ok
)
{
return
JXL_FAILURE
(
"
ColorHints
:
:
Foreach
returned
false
"
)
;
}
}
return
true
;
}
private
:
struct
KeyValue
{
KeyValue
(
std
:
:
string
key
std
:
:
string
value
)
:
key
(
std
:
:
move
(
key
)
)
value
(
std
:
:
move
(
value
)
)
{
}
std
:
:
string
key
;
std
:
:
string
value
;
}
;
std
:
:
vector
<
KeyValue
>
kv_
;
}
;
namespace
extras
{
Status
ApplyColorHints
(
const
ColorHints
&
color_hints
bool
color_already_set
bool
is_gray
CodecInOut
*
io
)
;
}
}
#
endif
