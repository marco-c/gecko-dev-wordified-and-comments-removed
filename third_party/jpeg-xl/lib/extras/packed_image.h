#
ifndef
LIB_EXTRAS_PACKED_IMAGE_H_
#
define
LIB_EXTRAS_PACKED_IMAGE_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
jxl
/
codestream_header
.
h
"
#
include
"
jxl
/
encode
.
h
"
#
include
"
jxl
/
types
.
h
"
#
include
"
lib
/
jxl
/
common
.
h
"
namespace
jxl
{
namespace
extras
{
class
PackedImage
{
public
:
PackedImage
(
size_t
xsize
size_t
ysize
const
JxlPixelFormat
&
format
)
:
PackedImage
(
xsize
ysize
format
CalcStride
(
format
xsize
)
)
{
}
PackedImage
(
size_t
xsize
size_t
ysize
const
JxlPixelFormat
&
format
size_t
stride
)
:
xsize
(
xsize
)
ysize
(
ysize
)
stride
(
stride
)
format
(
format
)
pixels_size
(
ysize
*
stride
)
pixels_
(
malloc
(
std
:
:
max
<
size_t
>
(
1
pixels_size
)
)
free
)
{
}
PackedImage
(
size_t
xsize
size_t
ysize
const
JxlPixelFormat
&
format
void
*
pixels
size_t
pixels_size
)
:
xsize
(
xsize
)
ysize
(
ysize
)
stride
(
CalcStride
(
format
xsize
)
)
format
(
format
)
pixels_size
(
pixels_size
)
pixels_
(
pixels
free
)
{
JXL_ASSERT
(
pixels_size
>
=
stride
*
ysize
)
;
}
void
*
pixels
(
)
const
{
return
pixels_
.
get
(
)
;
}
size_t
xsize
;
size_t
ysize
;
bool
flipped_y
=
false
;
bool
bitdepth_from_format
=
true
;
size_t
stride
;
JxlPixelFormat
format
;
size_t
pixels_size
;
size_t
pixel_stride
(
)
const
{
return
(
BitsPerChannel
(
format
.
data_type
)
*
format
.
num_channels
/
jxl
:
:
kBitsPerByte
)
;
}
static
size_t
BitsPerChannel
(
JxlDataType
data_type
)
{
switch
(
data_type
)
{
case
JXL_TYPE_UINT8
:
return
8
;
case
JXL_TYPE_UINT16
:
return
16
;
case
JXL_TYPE_FLOAT
:
return
32
;
case
JXL_TYPE_FLOAT16
:
return
16
;
default
:
JXL_ABORT
(
"
Unhandled
JxlDataType
"
)
;
}
}
private
:
static
size_t
CalcStride
(
const
JxlPixelFormat
&
format
size_t
xsize
)
{
size_t
stride
=
xsize
*
(
BitsPerChannel
(
format
.
data_type
)
*
format
.
num_channels
/
jxl
:
:
kBitsPerByte
)
;
if
(
format
.
align
>
1
)
{
stride
=
jxl
:
:
DivCeil
(
stride
format
.
align
)
*
format
.
align
;
}
return
stride
;
}
std
:
:
unique_ptr
<
void
decltype
(
free
)
*
>
pixels_
;
}
;
class
PackedFrame
{
public
:
template
<
typename
.
.
.
Args
>
explicit
PackedFrame
(
Args
&
&
.
.
.
args
)
:
color
(
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
JxlFrameHeader
frame_info
=
{
}
;
std
:
:
string
name
;
PackedImage
color
;
std
:
:
vector
<
PackedImage
>
extra_channels
;
}
;
class
PackedMetadata
{
public
:
std
:
:
vector
<
uint8_t
>
exif
;
std
:
:
vector
<
uint8_t
>
iptc
;
std
:
:
vector
<
uint8_t
>
jumbf
;
std
:
:
vector
<
uint8_t
>
xmp
;
}
;
class
PackedPixelFile
{
public
:
JxlBasicInfo
info
=
{
}
;
struct
PackedExtraChannel
{
JxlExtraChannelInfo
ec_info
;
size_t
index
;
std
:
:
string
name
;
}
;
std
:
:
vector
<
PackedExtraChannel
>
extra_channels_info
;
std
:
:
vector
<
uint8_t
>
icc
;
JxlColorEncoding
color_encoding
=
{
}
;
std
:
:
vector
<
uint8_t
>
orig_icc
;
std
:
:
unique_ptr
<
PackedFrame
>
preview_frame
;
std
:
:
vector
<
PackedFrame
>
frames
;
PackedMetadata
metadata
;
PackedPixelFile
(
)
{
JxlEncoderInitBasicInfo
(
&
info
)
;
}
;
}
;
}
}
#
endif
