#
ifndef
LIB_EXTRAS_CODEC_H_
#
define
LIB_EXTRAS_CODEC_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
lib
/
extras
/
color_hints
.
h
"
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
padded_bytes
.
h
"
#
include
"
lib
/
jxl
/
base
/
span
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
codec_in_out
.
h
"
#
include
"
lib
/
jxl
/
color_encoding_internal
.
h
"
#
include
"
lib
/
jxl
/
field_encodings
.
h
"
namespace
jxl
{
enum
class
Codec
:
uint32_t
{
kUnknown
kPNG
kPNM
kPGX
kJPG
kGIF
kEXR
kPSD
}
;
static
inline
constexpr
uint64_t
EnumBits
(
Codec
)
{
return
MakeBit
(
Codec
:
:
kPNM
)
|
MakeBit
(
Codec
:
:
kPNG
)
#
if
JPEGXL_ENABLE_JPEG
|
MakeBit
(
Codec
:
:
kJPG
)
#
endif
#
if
JPEGXL_ENABLE_EXR
|
MakeBit
(
Codec
:
:
kEXR
)
#
endif
|
MakeBit
(
Codec
:
:
kPSD
)
;
}
std
:
:
string
ExtensionFromCodec
(
Codec
codec
bool
is_gray
size_t
bits_per_sample
)
;
Codec
CodecFromExtension
(
const
std
:
:
string
&
extension
size_t
*
JXL_RESTRICT
bits_per_sample
)
;
Status
SetFromBytes
(
const
Span
<
const
uint8_t
>
bytes
const
ColorHints
&
color_hints
CodecInOut
*
io
ThreadPool
*
pool
Codec
*
orig_codec
)
;
JXL_INLINE
Status
SetFromBytes
(
const
Span
<
const
uint8_t
>
bytes
CodecInOut
*
io
ThreadPool
*
pool
=
nullptr
Codec
*
orig_codec
=
nullptr
)
{
return
SetFromBytes
(
bytes
ColorHints
(
)
io
pool
orig_codec
)
;
}
Status
SetFromFile
(
const
std
:
:
string
&
pathname
const
ColorHints
&
color_hints
CodecInOut
*
io
ThreadPool
*
pool
=
nullptr
Codec
*
orig_codec
=
nullptr
)
;
Status
Encode
(
const
CodecInOut
&
io
Codec
codec
const
ColorEncoding
&
c_desired
size_t
bits_per_sample
PaddedBytes
*
bytes
ThreadPool
*
pool
=
nullptr
)
;
Status
EncodeToFile
(
const
CodecInOut
&
io
const
ColorEncoding
&
c_desired
size_t
bits_per_sample
const
std
:
:
string
&
pathname
ThreadPool
*
pool
=
nullptr
)
;
Status
EncodeToFile
(
const
CodecInOut
&
io
const
std
:
:
string
&
pathname
ThreadPool
*
pool
=
nullptr
)
;
}
#
endif
