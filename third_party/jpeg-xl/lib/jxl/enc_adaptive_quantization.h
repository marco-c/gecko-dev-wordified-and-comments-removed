#
ifndef
LIB_JXL_ENC_ADAPTIVE_QUANTIZATION_H_
#
define
LIB_JXL_ENC_ADAPTIVE_QUANTIZATION_H_
#
include
<
jxl
/
cms_interface
.
h
>
#
include
"
lib
/
jxl
/
ac_strategy
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
rect
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
enc_cache
.
h
"
#
include
"
lib
/
jxl
/
frame_header
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
namespace
jxl
{
struct
AuxOut
;
StatusOr
<
ImageF
>
InitialQuantField
(
float
butteraugli_target
const
Image3F
&
opsin
const
Rect
&
rect
ThreadPool
*
pool
float
rescale
ImageF
*
initial_quant_mask
ImageF
*
initial_quant_mask1x1
)
;
float
InitialQuantDC
(
float
butteraugli_target
)
;
void
AdjustQuantField
(
const
AcStrategyImage
&
ac_strategy
const
Rect
&
rect
float
butteraugli_target
ImageF
*
quant_field
)
;
Status
FindBestQuantizer
(
const
FrameHeader
&
frame_header
const
Image3F
*
linear
const
Image3F
&
opsin
ImageF
&
quant_field
PassesEncoderState
*
enc_state
const
JxlCmsInterface
&
cms
ThreadPool
*
pool
AuxOut
*
aux_out
double
rescale
=
1
.
0
)
;
}
#
endif
