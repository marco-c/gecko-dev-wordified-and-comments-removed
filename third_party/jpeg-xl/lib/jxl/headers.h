#
ifndef
LIB_JXL_HEADERS_H_
#
define
LIB_JXL_HEADERS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
lib
/
jxl
/
aux_out_fwd
.
h
"
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
dec_bit_reader
.
h
"
#
include
"
lib
/
jxl
/
enc_bit_writer
.
h
"
#
include
"
lib
/
jxl
/
field_encodings
.
h
"
namespace
jxl
{
static
constexpr
uint8_t
kCodestreamMarker
=
0x0A
;
class
SizeHeader
:
public
Fields
{
public
:
static
constexpr
size_t
kMaxBits
=
78
;
SizeHeader
(
)
;
JXL_FIELDS_NAME
(
SizeHeader
)
Status
VisitFields
(
Visitor
*
JXL_RESTRICT
visitor
)
override
;
Status
Set
(
size_t
xsize
size_t
ysize
)
;
size_t
xsize
(
)
const
;
size_t
ysize
(
)
const
{
return
small_
?
(
(
ysize_div8_minus_1_
+
1
)
*
8
)
:
ysize_
;
}
private
:
bool
small_
;
uint32_t
ysize_div8_minus_1_
;
uint32_t
ysize_
;
uint32_t
ratio_
;
uint32_t
xsize_div8_minus_1_
;
uint32_t
xsize_
;
}
;
class
PreviewHeader
:
public
Fields
{
public
:
PreviewHeader
(
)
;
JXL_FIELDS_NAME
(
PreviewHeader
)
Status
VisitFields
(
Visitor
*
JXL_RESTRICT
visitor
)
override
;
Status
Set
(
size_t
xsize
size_t
ysize
)
;
size_t
xsize
(
)
const
;
size_t
ysize
(
)
const
{
return
div8_
?
(
ysize_div8_
*
8
)
:
ysize_
;
}
private
:
bool
div8_
;
uint32_t
ysize_div8_
;
uint32_t
ysize_
;
uint32_t
ratio_
;
uint32_t
xsize_div8_
;
uint32_t
xsize_
;
}
;
struct
AnimationHeader
:
public
Fields
{
AnimationHeader
(
)
;
JXL_FIELDS_NAME
(
AnimationHeader
)
Status
VisitFields
(
Visitor
*
JXL_RESTRICT
visitor
)
override
;
uint32_t
tps_numerator
;
uint32_t
tps_denominator
;
uint32_t
num_loops
;
bool
have_timecodes
;
}
;
Status
ReadSizeHeader
(
BitReader
*
JXL_RESTRICT
reader
SizeHeader
*
JXL_RESTRICT
size
)
;
Status
WriteSizeHeader
(
const
SizeHeader
&
size
BitWriter
*
JXL_RESTRICT
writer
size_t
layer
AuxOut
*
aux_out
)
;
}
#
endif
