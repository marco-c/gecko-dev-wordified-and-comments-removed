#
ifndef
LIB_JXL_ENC_ANS_PARAMS_H_
#
define
LIB_JXL_ENC_ANS_PARAMS_H_
#
include
<
stdint
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
vector
>
#
include
"
lib
/
jxl
/
common
.
h
"
namespace
jxl
{
struct
CompressParams
;
using
ANSHistBin
=
int32_t
;
struct
HistogramParams
{
enum
class
ClusteringType
{
kFastest
kFast
kBest
}
;
enum
class
HybridUintMethod
{
kNone
k000
kFast
kContextMap
kBest
}
;
enum
class
LZ77Method
{
kNone
kRLE
kLZ77
kOptimal
}
;
enum
class
ANSHistogramStrategy
{
kFast
kApproximate
kPrecise
}
;
HistogramParams
(
)
=
default
;
HistogramParams
(
SpeedTier
tier
size_t
num_ctx
)
{
if
(
tier
>
SpeedTier
:
:
kFalcon
)
{
clustering
=
ClusteringType
:
:
kFastest
;
lz77_method
=
LZ77Method
:
:
kNone
;
}
else
if
(
tier
>
SpeedTier
:
:
kTortoise
)
{
clustering
=
ClusteringType
:
:
kFast
;
}
else
{
clustering
=
ClusteringType
:
:
kBest
;
}
if
(
tier
>
SpeedTier
:
:
kTortoise
)
{
uint_method
=
HybridUintMethod
:
:
kNone
;
}
if
(
tier
>
=
SpeedTier
:
:
kSquirrel
)
{
ans_histogram_strategy
=
ANSHistogramStrategy
:
:
kApproximate
;
}
}
static
HistogramParams
ForModular
(
const
CompressParams
&
cparams
const
std
:
:
vector
<
uint8_t
>
&
extra_dc_precision
bool
streaming_mode
)
;
ClusteringType
clustering
=
ClusteringType
:
:
kBest
;
HybridUintMethod
uint_method
=
HybridUintMethod
:
:
kBest
;
LZ77Method
lz77_method
=
LZ77Method
:
:
kRLE
;
ANSHistogramStrategy
ans_histogram_strategy
=
ANSHistogramStrategy
:
:
kPrecise
;
std
:
:
vector
<
size_t
>
image_widths
;
size_t
max_histograms
=
~
0
;
bool
force_huffman
=
false
;
bool
initialize_global_state
=
true
;
bool
streaming_mode
=
false
;
bool
add_missing_symbols
=
false
;
bool
add_fixed_histograms
=
false
;
}
;
}
#
endif
