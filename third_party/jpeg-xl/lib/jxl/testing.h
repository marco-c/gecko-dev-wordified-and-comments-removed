#
ifndef
LIB_JXL_TESTING_H_
#
define
LIB_JXL_TESTING_H_
#
pragma
push_macro
(
"
PRIdS
"
)
#
pragma
push_macro
(
"
PRIuS
"
)
#
include
"
gmock
/
gmock
.
h
"
#
pragma
pop_macro
(
"
PRIuS
"
)
#
pragma
pop_macro
(
"
PRIdS
"
)
#
include
<
sstream
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
lib
/
jxl
/
common
.
h
"
#
ifdef
JXL_DISABLE_SLOW_TESTS
#
define
JXL_SLOW_TEST
(
X
)
DISABLED_
#
#
X
#
else
#
define
JXL_SLOW_TEST
(
X
)
X
#
endif
#
if
JPEGXL_ENABLE_TRANSCODE_JPEG
#
define
JXL_TRANSCODE_JPEG_TEST
(
X
)
X
#
else
#
define
JXL_TRANSCODE_JPEG_TEST
(
X
)
DISABLED_
#
#
X
#
endif
#
if
JPEGXL_ENABLE_BOXES
#
define
JXL_BOXES_TEST
(
X
)
X
#
else
#
define
JXL_BOXES_TEST
(
X
)
DISABLED_
#
#
X
#
endif
#
ifdef
THREAD_SANITIZER
#
define
JXL_TSAN_SLOW_TEST
(
X
)
DISABLED_
#
#
X
#
else
#
define
JXL_TSAN_SLOW_TEST
(
X
)
X
#
endif
#
ifdef
INSTANTIATE_TEST_SUITE_P
#
define
JXL_GTEST_INSTANTIATE_TEST_SUITE_P
INSTANTIATE_TEST_SUITE_P
#
else
#
define
JXL_GTEST_INSTANTIATE_TEST_SUITE_P
INSTANTIATE_TEST_CASE_P
#
endif
MATCHER_P
(
IsSlightlyBelow
max
"
"
)
{
return
max
*
0
.
75
<
=
arg
&
&
arg
<
=
max
*
1
.
0
;
}
#
define
JXL_EXPECT_OK
(
F
)
\
{
\
std
:
:
stringstream
_
;
\
EXPECT_TRUE
(
F
)
<
<
_
.
str
(
)
;
\
}
#
define
JXL_ASSERT_OK
(
F
)
\
{
\
std
:
:
stringstream
_
;
\
ASSERT_TRUE
(
F
)
<
<
_
.
str
(
)
;
\
}
#
endif
