#
ifndef
LIB_JXL_ENC_CACHE_H_
#
define
LIB_JXL_ENC_CACHE_H_
#
include
<
jxl
/
cms_interface
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
lib
/
jxl
/
ac_strategy
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
coeff_order
.
h
"
#
include
"
lib
/
jxl
/
coeff_order_fwd
.
h
"
#
include
"
lib
/
jxl
/
dct_util
.
h
"
#
include
"
lib
/
jxl
/
enc_ans
.
h
"
#
include
"
lib
/
jxl
/
enc_params
.
h
"
#
include
"
lib
/
jxl
/
enc_progressive_split
.
h
"
#
include
"
lib
/
jxl
/
frame_header
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
#
include
"
lib
/
jxl
/
image_bundle
.
h
"
#
include
"
lib
/
jxl
/
passes_state
.
h
"
#
include
"
lib
/
jxl
/
quant_weights
.
h
"
#
include
"
lib
/
jxl
/
quantizer
.
h
"
namespace
jxl
{
struct
AuxOut
;
struct
PassesEncoderState
{
PassesSharedState
shared
;
bool
streaming_mode
=
false
;
bool
initialize_global_state
=
true
;
size_t
dc_group_index
=
0
;
std
:
:
vector
<
std
:
:
unique_ptr
<
ACImage
>
>
coeffs
;
std
:
:
vector
<
std
:
:
unique_ptr
<
BitWriter
>
>
special_frames
;
ProgressiveSplitter
progressive_splitter
;
CompressParams
cparams
;
struct
PassData
{
std
:
:
vector
<
std
:
:
vector
<
Token
>
>
ac_tokens
;
std
:
:
vector
<
uint8_t
>
context_map
;
EntropyEncodingData
codes
;
}
;
std
:
:
vector
<
PassData
>
passes
;
std
:
:
vector
<
uint8_t
>
histogram_idx
;
uint32_t
used_acs
=
0
;
std
:
:
vector
<
uint32_t
>
used_orders
;
float
x_qm_multiplier
=
1
.
0f
;
float
b_qm_multiplier
=
1
.
0f
;
}
;
class
ModularFrameEncoder
;
Status
InitializePassesEncoder
(
const
FrameHeader
&
frame_header
const
Image3F
&
opsin
const
Rect
&
rect
const
JxlCmsInterface
&
cms
ThreadPool
*
pool
PassesEncoderState
*
passes_enc_state
ModularFrameEncoder
*
modular_frame_encoder
AuxOut
*
aux_out
)
;
}
#
endif
