#
ifndef
LIB_JXL_DEC_RENDER_PIPELINE_H_
#
define
LIB_JXL_DEC_RENDER_PIPELINE_H_
#
include
<
stdint
.
h
>
#
include
"
lib
/
jxl
/
filters
.
h
"
namespace
jxl
{
constexpr
size_t
kRenderPipelineXOffset
=
16
;
enum
class
RenderPipelineChannelMode
{
kIgnored
=
0
kInPlace
=
1
kInOut
=
2
}
;
class
RenderPipelineStage
{
public
:
virtual
void
ProcessRow
(
float
*
JXL_RESTRICT
*
*
input
float
*
JXL_RESTRICT
*
*
output
size_t
xsize
size_t
xpos
size_t
ypos
)
const
=
0
;
virtual
~
RenderPipelineStage
(
)
{
}
virtual
size_t
GetPaddingX
(
size_t
c
)
const
=
0
;
virtual
size_t
GetPaddingY
(
size_t
c
)
const
=
0
;
virtual
size_t
ShiftX
(
size_t
c
)
const
=
0
;
virtual
size_t
ShiftY
(
size_t
c
)
const
=
0
;
virtual
RenderPipelineChannelMode
GetChannelMode
(
size_t
c
)
const
=
0
;
}
;
class
RenderPipeline
{
public
:
void
Init
(
const
std
:
:
vector
<
std
:
:
pair
<
size_t
size_t
>
>
&
channel_shifts
)
{
JXL_ABORT
(
"
Not
implemented
"
)
;
}
void
AddStage
(
std
:
:
unique_ptr
<
RenderPipelineStage
>
stage
)
{
JXL_ABORT
(
"
Not
implemented
"
)
;
}
void
Finalize
(
)
{
JXL_ABORT
(
"
Not
implemented
"
)
;
}
void
PrepareForThreads
(
size_t
num
)
{
JXL_ABORT
(
"
Not
implemented
"
)
;
}
}
;
}
#
endif
