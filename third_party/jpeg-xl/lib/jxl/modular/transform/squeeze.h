#
ifndef
LIB_JXL_MODULAR_TRANSFORM_SQUEEZE_H_
#
define
LIB_JXL_MODULAR_TRANSFORM_SQUEEZE_H_
#
include
<
cstdlib
>
#
include
<
vector
>
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
modular
/
modular_image
.
h
"
#
include
"
lib
/
jxl
/
modular
/
transform
/
transform
.
h
"
namespace
jxl
{
constexpr
size_t
kMaxFirstPreviewSize
=
8
;
inline
pixel_type_w
SmoothTendency
(
pixel_type_w
B
pixel_type_w
a
pixel_type_w
n
)
{
pixel_type_w
diff
=
0
;
if
(
B
>
=
a
&
&
a
>
=
n
)
{
diff
=
(
4
*
B
-
3
*
n
-
a
+
6
)
/
12
;
if
(
diff
-
(
diff
&
1
)
>
2
*
(
B
-
a
)
)
diff
=
2
*
(
B
-
a
)
+
1
;
if
(
diff
+
(
diff
&
1
)
>
2
*
(
a
-
n
)
)
diff
=
2
*
(
a
-
n
)
;
}
else
if
(
B
<
=
a
&
&
a
<
=
n
)
{
diff
=
(
4
*
B
-
3
*
n
-
a
-
6
)
/
12
;
if
(
diff
+
(
diff
&
1
)
<
2
*
(
B
-
a
)
)
diff
=
2
*
(
B
-
a
)
-
1
;
if
(
diff
-
(
diff
&
1
)
<
2
*
(
a
-
n
)
)
diff
=
2
*
(
a
-
n
)
;
}
return
diff
;
}
void
DefaultSqueezeParameters
(
std
:
:
vector
<
SqueezeParams
>
*
parameters
const
Image
&
image
)
;
Status
CheckMetaSqueezeParams
(
const
SqueezeParams
&
parameter
int
num_channels
)
;
Status
MetaSqueeze
(
Image
&
image
std
:
:
vector
<
SqueezeParams
>
*
parameters
)
;
Status
InvSqueeze
(
Image
&
input
const
std
:
:
vector
<
SqueezeParams
>
&
parameters
ThreadPool
*
pool
)
;
}
#
endif
