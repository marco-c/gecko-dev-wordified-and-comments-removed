#
ifndef
LIB_JXL_MODULAR_MODULAR_IMAGE_H_
#
define
LIB_JXL_MODULAR_MODULAR_IMAGE_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
.
h
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
#
include
"
lib
/
jxl
/
image_ops
.
h
"
namespace
jxl
{
typedef
int32_t
pixel_type
;
typedef
int64_t
pixel_type_w
;
namespace
weighted
{
struct
Header
;
}
class
Channel
{
public
:
jxl
:
:
Plane
<
pixel_type
>
plane
;
size_t
w
h
;
int
hshift
vshift
;
Channel
(
size_t
iw
size_t
ih
int
hsh
=
0
int
vsh
=
0
)
:
plane
(
iw
ih
)
w
(
iw
)
h
(
ih
)
hshift
(
hsh
)
vshift
(
vsh
)
{
}
Channel
(
const
Channel
&
other
)
=
delete
;
Channel
&
operator
=
(
const
Channel
&
other
)
=
delete
;
Channel
&
operator
=
(
Channel
&
&
other
)
noexcept
{
w
=
other
.
w
;
h
=
other
.
h
;
hshift
=
other
.
hshift
;
vshift
=
other
.
vshift
;
plane
=
std
:
:
move
(
other
.
plane
)
;
return
*
this
;
}
Channel
(
Channel
&
&
other
)
noexcept
=
default
;
void
shrink
(
)
{
if
(
plane
.
xsize
(
)
=
=
w
&
&
plane
.
ysize
(
)
=
=
h
)
return
;
jxl
:
:
Plane
<
pixel_type
>
resizedplane
(
w
h
)
;
plane
=
std
:
:
move
(
resizedplane
)
;
}
void
shrink
(
int
nw
int
nh
)
{
w
=
nw
;
h
=
nh
;
shrink
(
)
;
}
JXL_INLINE
pixel_type
*
Row
(
const
size_t
y
)
{
return
plane
.
Row
(
y
)
;
}
JXL_INLINE
const
pixel_type
*
Row
(
const
size_t
y
)
const
{
return
plane
.
Row
(
y
)
;
}
}
;
class
Transform
;
class
Image
{
public
:
std
:
:
vector
<
Channel
>
channel
;
std
:
:
vector
<
Transform
>
transform
;
size_t
w
h
;
int
bitdepth
;
size_t
nb_meta_channels
;
bool
error
;
Image
(
size_t
iw
size_t
ih
int
bitdepth
int
nb_chans
)
;
Image
(
)
;
Image
(
const
Image
&
other
)
=
delete
;
Image
&
operator
=
(
const
Image
&
other
)
=
delete
;
Image
&
operator
=
(
Image
&
&
other
)
noexcept
;
Image
(
Image
&
&
other
)
noexcept
=
default
;
bool
empty
(
)
const
{
for
(
const
auto
&
ch
:
channel
)
{
if
(
ch
.
w
&
&
ch
.
h
)
return
false
;
}
return
true
;
}
Image
clone
(
)
;
void
undo_transforms
(
const
weighted
:
:
Header
&
wp_header
jxl
:
:
ThreadPool
*
pool
=
nullptr
)
;
std
:
:
string
DebugString
(
)
const
;
}
;
}
#
endif
