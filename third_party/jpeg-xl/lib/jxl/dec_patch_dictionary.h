#
ifndef
LIB_JXL_DEC_PATCH_DICTIONARY_H_
#
define
LIB_JXL_DEC_PATCH_DICTIONARY_H_
#
include
<
stddef
.
h
>
#
include
<
string
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
tuple
>
#
include
<
vector
>
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
common
.
h
"
#
include
"
lib
/
jxl
/
dec_bit_reader
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
#
include
"
lib
/
jxl
/
opsin_params
.
h
"
namespace
jxl
{
enum
class
PatchBlendMode
:
uint8_t
{
kNone
=
0
kReplace
=
1
kAdd
=
2
kMul
=
3
kBlendAbove
=
4
kBlendBelow
=
5
kAlphaWeightedAddAbove
=
6
kAlphaWeightedAddBelow
=
7
kNumBlendModes
}
;
inline
bool
UsesAlpha
(
PatchBlendMode
mode
)
{
return
mode
=
=
PatchBlendMode
:
:
kBlendAbove
|
|
mode
=
=
PatchBlendMode
:
:
kBlendBelow
|
|
mode
=
=
PatchBlendMode
:
:
kAlphaWeightedAddAbove
|
|
mode
=
=
PatchBlendMode
:
:
kAlphaWeightedAddBelow
;
}
inline
bool
UsesClamp
(
PatchBlendMode
mode
)
{
return
UsesAlpha
(
mode
)
|
|
mode
=
=
PatchBlendMode
:
:
kMul
;
}
struct
PatchBlending
{
PatchBlendMode
mode
;
uint32_t
alpha_channel
;
bool
clamp
;
}
;
struct
PatchReferencePosition
{
size_t
ref
x0
y0
xsize
ysize
;
bool
operator
<
(
const
PatchReferencePosition
&
oth
)
const
{
return
std
:
:
make_tuple
(
ref
x0
y0
xsize
ysize
)
<
std
:
:
make_tuple
(
oth
.
ref
oth
.
x0
oth
.
y0
oth
.
xsize
oth
.
ysize
)
;
}
bool
operator
=
=
(
const
PatchReferencePosition
&
oth
)
const
{
return
!
(
*
this
<
oth
)
&
&
!
(
oth
<
*
this
)
;
}
}
;
struct
PatchPosition
{
size_t
x
y
;
std
:
:
vector
<
PatchBlending
>
blending
;
PatchReferencePosition
ref_pos
;
bool
operator
<
(
const
PatchPosition
&
oth
)
const
{
return
std
:
:
make_tuple
(
ref_pos
x
y
)
<
std
:
:
make_tuple
(
oth
.
ref_pos
oth
.
x
oth
.
y
)
;
}
}
;
struct
PassesSharedState
;
class
PatchDictionaryEncoder
;
class
PatchDictionary
{
public
:
PatchDictionary
(
)
=
default
;
void
SetPassesSharedState
(
const
PassesSharedState
*
shared
)
{
shared_
=
shared
;
}
bool
HasAny
(
)
const
{
return
!
positions_
.
empty
(
)
;
}
Status
Decode
(
BitReader
*
br
size_t
xsize
size_t
ysize
bool
*
uses_extra_channels
)
;
void
Clear
(
)
{
positions_
.
clear
(
)
;
ComputePatchCache
(
)
;
}
void
AddOneRow
(
float
*
const
*
inout
size_t
y
size_t
x0
size_t
xsize
)
const
;
int
GetReferences
(
)
const
;
private
:
friend
class
PatchDictionaryEncoder
;
const
PassesSharedState
*
shared_
;
std
:
:
vector
<
PatchPosition
>
positions_
;
std
:
:
vector
<
size_t
>
sorted_patches_
;
std
:
:
vector
<
size_t
>
patch_starts_
;
void
ComputePatchCache
(
)
;
}
;
}
#
endif
