#
ifndef
LIB_JXL_ENC_FRAME_H_
#
define
LIB_JXL_ENC_FRAME_H_
#
include
"
lib
/
jxl
/
aux_out
.
h
"
#
include
"
lib
/
jxl
/
aux_out_fwd
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
enc_bit_writer
.
h
"
#
include
"
lib
/
jxl
/
enc_cache
.
h
"
#
include
"
lib
/
jxl
/
enc_params
.
h
"
#
include
"
lib
/
jxl
/
frame_header
.
h
"
#
include
"
lib
/
jxl
/
image_bundle
.
h
"
namespace
jxl
{
struct
FrameInfo
{
bool
save_before_color_transform
=
false
;
bool
ib_needs_color_transform
=
true
;
FrameType
frame_type
=
FrameType
:
:
kRegularFrame
;
size_t
dc_level
=
0
;
bool
is_last
=
true
;
bool
is_preview
=
false
;
size_t
save_as_reference
=
0
;
}
;
Status
EncodeFrame
(
const
CompressParams
&
cparams_orig
const
FrameInfo
&
frame_info
const
CodecMetadata
*
metadata
const
ImageBundle
&
ib
PassesEncoderState
*
passes_enc_state
ThreadPool
*
pool
BitWriter
*
writer
AuxOut
*
aux_out
)
;
}
#
endif
