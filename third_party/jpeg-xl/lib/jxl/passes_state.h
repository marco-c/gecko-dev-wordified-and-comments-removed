#
ifndef
LIB_JXL_PASSES_STATE_H_
#
define
LIB_JXL_PASSES_STATE_H_
#
include
"
lib
/
jxl
/
ac_context
.
h
"
#
include
"
lib
/
jxl
/
ac_strategy
.
h
"
#
include
"
lib
/
jxl
/
chroma_from_luma
.
h
"
#
include
"
lib
/
jxl
/
dec_patch_dictionary
.
h
"
#
include
"
lib
/
jxl
/
frame_header
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
#
include
"
lib
/
jxl
/
image_bundle
.
h
"
#
include
"
lib
/
jxl
/
loop_filter
.
h
"
#
include
"
lib
/
jxl
/
noise
.
h
"
#
include
"
lib
/
jxl
/
quant_weights
.
h
"
#
include
"
lib
/
jxl
/
quantizer
.
h
"
#
include
"
lib
/
jxl
/
splines
.
h
"
namespace
jxl
{
struct
ImageFeatures
{
NoiseParams
noise_params
;
PatchDictionary
patches
;
Splines
splines
;
}
;
struct
PassesSharedState
{
const
CodecMetadata
*
metadata
;
FrameDimensions
frame_dim
;
AcStrategyImage
ac_strategy
;
DequantMatrices
matrices
;
Quantizer
quantizer
{
&
matrices
}
;
ImageI
raw_quant_field
;
ImageB
epf_sharpness
;
ColorCorrelationMap
cmap
;
ImageFeatures
image_features
;
size_t
coeff_order_size
=
0
;
std
:
:
vector
<
coeff_order_t
>
coeff_orders
;
ImageB
quant_dc
;
Image3F
dc_storage
;
const
Image3F
*
JXL_RESTRICT
dc
=
&
dc_storage
;
BlockCtxMap
block_ctx_map
;
Image3F
dc_frames
[
4
]
;
struct
{
ImageBundle
frame
;
bool
ib_is_in_xyb
=
false
;
}
reference_frames
[
4
]
=
{
}
;
size_t
num_histograms
=
0
;
}
;
Status
InitializePassesSharedState
(
const
FrameHeader
&
frame_header
PassesSharedState
*
JXL_RESTRICT
shared
bool
encoder
=
false
)
;
}
#
endif
