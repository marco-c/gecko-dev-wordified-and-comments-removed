#
ifndef
LIB_JXL_FAKE_PARALLEL_RUNNER_TESTONLY_H_
#
define
LIB_JXL_FAKE_PARALLEL_RUNNER_TESTONLY_H_
#
include
<
jxl
/
parallel_runner
.
h
>
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
#
include
"
lib
/
jxl
/
base
/
random
.
h
"
namespace
jxl
{
class
FakeParallelRunner
{
public
:
FakeParallelRunner
(
uint32_t
order_seed
uint32_t
num_threads
)
:
order_seed_
(
order_seed
)
rng_
(
order_seed
)
num_threads_
(
num_threads
)
{
if
(
num_threads_
<
1
)
num_threads_
=
1
;
}
JxlParallelRetCode
Run
(
void
*
jxl_opaque
JxlParallelRunInit
init
JxlParallelRunFunction
func
uint32_t
start
uint32_t
end
)
{
JxlParallelRetCode
ret
=
init
(
jxl_opaque
num_threads_
)
;
if
(
ret
!
=
0
)
return
ret
;
if
(
order_seed_
=
=
0
)
{
for
(
uint32_t
i
=
start
;
i
<
end
;
i
+
+
)
{
func
(
jxl_opaque
i
i
%
num_threads_
)
;
}
}
else
{
std
:
:
vector
<
uint32_t
>
order
(
end
-
start
)
;
for
(
uint32_t
i
=
start
;
i
<
end
;
i
+
+
)
{
order
[
i
-
start
]
=
i
;
}
rng_
.
Shuffle
(
order
.
data
(
)
order
.
size
(
)
)
;
for
(
uint32_t
i
=
start
;
i
<
end
;
i
+
+
)
{
func
(
jxl_opaque
order
[
i
-
start
]
i
%
num_threads_
)
;
}
}
return
ret
;
}
private
:
uint32_t
order_seed_
;
Rng
rng_
;
uint32_t
num_threads_
;
}
;
}
extern
"
C
"
{
JXL_INLINE
JxlParallelRetCode
JxlFakeParallelRunner
(
void
*
runner_opaque
void
*
jpegxl_opaque
JxlParallelRunInit
init
JxlParallelRunFunction
func
uint32_t
start_range
uint32_t
end_range
)
{
return
static_cast
<
jxl
:
:
FakeParallelRunner
*
>
(
runner_opaque
)
-
>
Run
(
jpegxl_opaque
init
func
start_range
end_range
)
;
}
}
#
endif
