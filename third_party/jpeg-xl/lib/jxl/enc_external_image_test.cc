#
include
"
lib
/
jxl
/
enc_external_image
.
h
"
#
include
<
array
>
#
include
<
new
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
thread_pool_internal
.
h
"
#
include
"
lib
/
jxl
/
color_encoding_internal
.
h
"
#
include
"
lib
/
jxl
/
image_ops
.
h
"
#
include
"
lib
/
jxl
/
image_test_utils
.
h
"
namespace
jxl
{
namespace
{
#
if
!
defined
(
JXL_CRASH_ON_ERROR
)
TEST
(
ExternalImageTest
InvalidSize
)
{
ImageMetadata
im
;
im
.
SetAlphaBits
(
8
)
;
ImageBundle
ib
(
&
im
)
;
const
uint8_t
buf
[
10
*
100
*
8
]
=
{
}
;
EXPECT_FALSE
(
ConvertFromExternal
(
Span
<
const
uint8_t
>
(
buf
10
)
10
100
ColorEncoding
:
:
SRGB
(
)
4
false
16
JXL_BIG_ENDIAN
nullptr
&
ib
false
0
)
)
;
EXPECT_FALSE
(
ConvertFromExternal
(
Span
<
const
uint8_t
>
(
buf
sizeof
(
buf
)
-
1
)
10
100
ColorEncoding
:
:
SRGB
(
)
4
false
16
JXL_BIG_ENDIAN
nullptr
&
ib
false
0
)
)
;
EXPECT_TRUE
(
ConvertFromExternal
(
Span
<
const
uint8_t
>
(
buf
sizeof
(
buf
)
)
10
100
ColorEncoding
:
:
SRGB
(
)
4
false
16
JXL_BIG_ENDIAN
nullptr
&
ib
false
0
)
)
;
}
#
endif
TEST
(
ExternalImageTest
AlphaMissing
)
{
ImageMetadata
im
;
im
.
SetAlphaBits
(
0
)
;
ImageBundle
ib
(
&
im
)
;
const
size_t
xsize
=
10
;
const
size_t
ysize
=
20
;
const
uint8_t
buf
[
xsize
*
ysize
*
4
]
=
{
}
;
EXPECT_TRUE
(
ConvertFromExternal
(
Span
<
const
uint8_t
>
(
buf
sizeof
(
buf
)
)
xsize
ysize
ColorEncoding
:
:
SRGB
(
)
4
false
8
JXL_BIG_ENDIAN
nullptr
&
ib
false
0
)
)
;
EXPECT_FALSE
(
ib
.
HasAlpha
(
)
)
;
}
}
}
