#
ifndef
LIB_JXL_DEC_RECONSTRUCT_H_
#
define
LIB_JXL_DEC_RECONSTRUCT_H_
#
include
<
stddef
.
h
>
#
include
"
lib
/
jxl
/
aux_out
.
h
"
#
include
"
lib
/
jxl
/
aux_out_fwd
.
h
"
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
dec_cache
.
h
"
#
include
"
lib
/
jxl
/
frame_header
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
#
include
"
lib
/
jxl
/
loop_filter
.
h
"
#
include
"
lib
/
jxl
/
quantizer
.
h
"
#
include
"
lib
/
jxl
/
splines
.
h
"
namespace
jxl
{
Status
FinalizeFrameDecoding
(
ImageBundle
*
JXL_RESTRICT
decoded
PassesDecoderState
*
dec_state
ThreadPool
*
pool
bool
force_fir
bool
skip_blending
)
;
Status
FinalizeImageRect
(
Image3F
*
input_image
const
Rect
&
input_rect
const
std
:
:
vector
<
std
:
:
pair
<
ImageF
*
Rect
>
>
&
extra_channels
PassesDecoderState
*
dec_state
size_t
thread
ImageBundle
*
JXL_RESTRICT
output_image
const
Rect
&
frame_rect
)
;
void
EnsurePaddingInPlace
(
Image3F
*
img
const
Rect
&
rect
const
Rect
&
image_rect
size_t
image_xsize
size_t
image_ysize
size_t
xpadding
size_t
ypadding
)
;
void
UndoXYB
(
const
Image3F
&
src
Image3F
*
dst
const
OutputEncodingInfo
&
output_info
ThreadPool
*
pool
)
;
}
#
endif
