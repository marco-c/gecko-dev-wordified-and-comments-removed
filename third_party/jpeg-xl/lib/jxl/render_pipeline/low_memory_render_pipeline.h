#
ifndef
LIB_JXL_RENDER_PIPELINE_LOW_MEMORY_RENDER_PIPELINE_H_
#
define
LIB_JXL_RENDER_PIPELINE_LOW_MEMORY_RENDER_PIPELINE_H_
#
include
<
jxl
/
memory_manager
.
h
>
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
lib
/
jxl
/
base
/
rect
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
dec_group_border
.
h
"
#
include
"
lib
/
jxl
/
frame_header
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
#
include
"
lib
/
jxl
/
render_pipeline
/
render_pipeline
.
h
"
namespace
jxl
{
class
LowMemoryRenderPipeline
final
:
public
RenderPipeline
{
public
:
explicit
LowMemoryRenderPipeline
(
JxlMemoryManager
*
memory_manager
)
:
RenderPipeline
(
memory_manager
)
{
}
private
:
std
:
:
vector
<
std
:
:
pair
<
ImageF
*
Rect
>
>
PrepareBuffers
(
size_t
group_id
size_t
thread_id
)
override
;
Status
PrepareForThreadsInternal
(
size_t
num
bool
use_group_ids
)
override
;
Status
ProcessBuffers
(
size_t
group_id
size_t
thread_id
)
override
;
void
ClearDone
(
size_t
i
)
override
{
group_border_assigner_
.
ClearDone
(
i
)
;
}
Status
Init
(
)
override
;
Status
EnsureBordersStorage
(
)
;
size_t
GroupInputXSize
(
size_t
c
)
const
;
size_t
GroupInputYSize
(
size_t
c
)
const
;
Status
RenderRect
(
size_t
thread_id
std
:
:
vector
<
ImageF
>
&
input_data
Rect
data_max_color_channel_rect
Rect
image_max_color_channel_rect
)
;
Status
RenderPadding
(
size_t
thread_id
Rect
rect
)
;
Status
SaveBorders
(
size_t
group_id
size_t
c
const
ImageF
&
in
)
;
Status
LoadBorders
(
size_t
group_id
size_t
c
const
Rect
&
r
ImageF
*
out
)
;
std
:
:
pair
<
size_t
size_t
>
ColorDimensionsToChannelDimensions
(
std
:
:
pair
<
size_t
size_t
>
in
size_t
c
size_t
stage
)
const
;
std
:
:
pair
<
size_t
size_t
>
BorderToStore
(
size_t
c
)
const
;
bool
use_group_ids_
;
std
:
:
vector
<
ImageF
>
borders_horizontal_
;
std
:
:
vector
<
ImageF
>
borders_vertical_
;
GroupBorderAssigner
group_border_assigner_
;
std
:
:
pair
<
size_t
size_t
>
group_border_
;
size_t
base_color_shift_
;
std
:
:
vector
<
std
:
:
vector
<
ImageF
>
>
group_data_
;
size_t
group_data_x_border_
;
size_t
group_data_y_border_
;
std
:
:
vector
<
std
:
:
vector
<
std
:
:
vector
<
ImageF
>
>
>
stage_data_
;
std
:
:
vector
<
ImageF
>
out_of_frame_data_
;
std
:
:
vector
<
int32_t
>
anyc_
;
std
:
:
vector
<
Rect
>
image_rect_
;
std
:
:
vector
<
std
:
:
vector
<
int32_t
>
>
stage_input_for_channel_
;
std
:
:
vector
<
int
>
virtual_ypadding_for_output_
;
std
:
:
vector
<
int
>
xpadding_for_output_
;
size_t
first_trailing_stage_
;
FrameOrigin
frame_origin_
;
size_t
full_image_xsize_
;
size_t
full_image_ysize_
;
size_t
first_image_dim_stage_
;
}
;
}
#
endif
