#
ifndef
LIB_JXL_RENDER_PIPELINE_RENDER_PIPELINE_STAGE_H_
#
define
LIB_JXL_RENDER_PIPELINE_RENDER_PIPELINE_STAGE_H_
#
include
<
stdint
.
h
>
#
include
"
lib
/
jxl
/
base
/
arch_macros
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
frame_header
.
h
"
namespace
jxl
{
#
if
JXL_ARCH_ARM
constexpr
size_t
kRenderPipelineXOffset
=
16
;
#
else
constexpr
size_t
kRenderPipelineXOffset
=
32
;
#
endif
enum
class
RenderPipelineChannelMode
{
kIgnored
=
0
kInPlace
=
1
kInOut
=
2
kInput
=
3
}
;
class
RenderPipeline
;
class
RenderPipelineStage
{
protected
:
using
Row
=
float
*
;
using
ChannelRows
=
std
:
:
vector
<
Row
>
;
public
:
using
RowInfo
=
std
:
:
vector
<
ChannelRows
>
;
struct
Settings
{
size_t
border_x
=
0
;
size_t
border_y
=
0
;
size_t
shift_x
=
0
;
size_t
shift_y
=
0
;
static
Settings
ShiftX
(
size_t
shift
size_t
border
)
{
Settings
settings
;
settings
.
border_x
=
border
;
settings
.
shift_x
=
shift
;
return
settings
;
}
static
Settings
ShiftY
(
size_t
shift
size_t
border
)
{
Settings
settings
;
settings
.
border_y
=
border
;
settings
.
shift_y
=
shift
;
return
settings
;
}
static
Settings
Symmetric
(
size_t
shift
size_t
border
)
{
Settings
settings
;
settings
.
border_x
=
settings
.
border_y
=
border
;
settings
.
shift_x
=
settings
.
shift_y
=
shift
;
return
settings
;
}
static
Settings
SymmetricBorderOnly
(
size_t
border
)
{
return
Symmetric
(
0
border
)
;
}
}
;
virtual
~
RenderPipelineStage
(
)
=
default
;
virtual
Status
ProcessRow
(
const
RowInfo
&
input_rows
const
RowInfo
&
output_rows
size_t
xextra
size_t
xsize
size_t
xpos
size_t
ypos
size_t
thread_id
)
const
=
0
;
virtual
RenderPipelineChannelMode
GetChannelMode
(
size_t
c
)
const
=
0
;
protected
:
explicit
RenderPipelineStage
(
Settings
settings
)
:
settings_
(
settings
)
{
}
virtual
Status
IsInitialized
(
)
const
{
return
true
;
}
virtual
Status
SetInputSizes
(
const
std
:
:
vector
<
std
:
:
pair
<
size_t
size_t
>
>
&
input_sizes
)
{
return
true
;
}
virtual
Status
PrepareForThreads
(
size_t
num_threads
)
{
return
true
;
}
float
*
GetInputRow
(
const
RowInfo
&
input_rows
size_t
c
int
offset
)
const
{
JXL_DASSERT
(
GetChannelMode
(
c
)
!
=
RenderPipelineChannelMode
:
:
kIgnored
)
;
JXL_DASSERT
(
-
offset
<
=
static_cast
<
int
>
(
settings_
.
border_y
)
)
;
JXL_DASSERT
(
offset
<
=
static_cast
<
int
>
(
settings_
.
border_y
)
)
;
return
input_rows
[
c
]
[
settings_
.
border_y
+
offset
]
+
kRenderPipelineXOffset
;
}
float
*
GetOutputRow
(
const
RowInfo
&
output_rows
size_t
c
size_t
offset
)
const
{
JXL_DASSERT
(
GetChannelMode
(
c
)
=
=
RenderPipelineChannelMode
:
:
kInOut
)
;
JXL_DASSERT
(
offset
<
=
1ul
<
<
settings_
.
shift_y
)
;
return
output_rows
[
c
]
[
offset
]
+
kRenderPipelineXOffset
;
}
virtual
bool
SwitchToImageDimensions
(
)
const
{
return
false
;
}
virtual
void
GetImageDimensions
(
size_t
*
xsize
size_t
*
ysize
FrameOrigin
*
frame_origin
)
const
{
}
virtual
void
ProcessPaddingRow
(
const
RowInfo
&
output_rows
size_t
xsize
size_t
xpos
size_t
ypos
)
const
{
}
virtual
const
char
*
GetName
(
)
const
=
0
;
Settings
settings_
;
friend
class
RenderPipeline
;
friend
class
SimpleRenderPipeline
;
friend
class
LowMemoryRenderPipeline
;
}
;
}
#
endif
