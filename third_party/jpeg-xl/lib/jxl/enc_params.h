#
ifndef
LIB_JXL_ENC_PARAMS_H_
#
define
LIB_JXL_ENC_PARAMS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
lib
/
jxl
/
base
/
override
.
h
"
#
include
"
lib
/
jxl
/
butteraugli
/
butteraugli
.
h
"
#
include
"
lib
/
jxl
/
frame_header
.
h
"
#
include
"
lib
/
jxl
/
modular
/
options
.
h
"
namespace
jxl
{
enum
class
SpeedTier
{
kTortoise
=
1
kKitten
=
2
kSquirrel
=
3
kWombat
=
4
kHare
=
5
kCheetah
=
6
kFalcon
=
7
}
;
inline
bool
ParseSpeedTier
(
const
std
:
:
string
&
s
SpeedTier
*
out
)
{
if
(
s
=
=
"
falcon
"
)
{
*
out
=
SpeedTier
:
:
kFalcon
;
return
true
;
}
else
if
(
s
=
=
"
cheetah
"
)
{
*
out
=
SpeedTier
:
:
kCheetah
;
return
true
;
}
else
if
(
s
=
=
"
hare
"
)
{
*
out
=
SpeedTier
:
:
kHare
;
return
true
;
}
else
if
(
s
=
=
"
fast
"
|
|
s
=
=
"
wombat
"
)
{
*
out
=
SpeedTier
:
:
kWombat
;
return
true
;
}
else
if
(
s
=
=
"
squirrel
"
)
{
*
out
=
SpeedTier
:
:
kSquirrel
;
return
true
;
}
else
if
(
s
=
=
"
kitten
"
)
{
*
out
=
SpeedTier
:
:
kKitten
;
return
true
;
}
else
if
(
s
=
=
"
guetzli
"
|
|
s
=
=
"
tortoise
"
)
{
*
out
=
SpeedTier
:
:
kTortoise
;
return
true
;
}
size_t
st
=
10
-
static_cast
<
size_t
>
(
strtoull
(
s
.
c_str
(
)
nullptr
0
)
)
;
if
(
st
<
=
static_cast
<
size_t
>
(
SpeedTier
:
:
kFalcon
)
&
&
st
>
=
static_cast
<
size_t
>
(
SpeedTier
:
:
kTortoise
)
)
{
*
out
=
SpeedTier
(
st
)
;
return
true
;
}
return
false
;
}
inline
const
char
*
SpeedTierName
(
SpeedTier
speed_tier
)
{
switch
(
speed_tier
)
{
case
SpeedTier
:
:
kFalcon
:
return
"
falcon
"
;
case
SpeedTier
:
:
kCheetah
:
return
"
cheetah
"
;
case
SpeedTier
:
:
kHare
:
return
"
hare
"
;
case
SpeedTier
:
:
kWombat
:
return
"
wombat
"
;
case
SpeedTier
:
:
kSquirrel
:
return
"
squirrel
"
;
case
SpeedTier
:
:
kKitten
:
return
"
kitten
"
;
case
SpeedTier
:
:
kTortoise
:
return
"
tortoise
"
;
}
return
"
INVALID
"
;
}
struct
CompressParams
{
float
butteraugli_distance
=
1
.
0f
;
size_t
target_size
=
0
;
float
target_bitrate
=
0
.
0f
;
float
uniform_quant
=
0
.
0f
;
float
quant_border_bias
=
0
.
0f
;
bool
max_error_mode
=
false
;
float
max_error
[
3
]
=
{
0
.
0
0
.
0
0
.
0
}
;
SpeedTier
speed_tier
=
SpeedTier
:
:
kSquirrel
;
size_t
decoding_speed_tier
=
0
;
int
max_butteraugli_iters
=
4
;
int
max_butteraugli_iters_guetzli_mode
=
100
;
ColorTransform
color_transform
=
ColorTransform
:
:
kXYB
;
YCbCrChromaSubsampling
chroma_subsampling
;
bool
modular_mode
=
false
;
size_t
modular_group_size_shift
=
1
;
Override
preview
=
Override
:
:
kDefault
;
Override
noise
=
Override
:
:
kDefault
;
Override
dots
=
Override
:
:
kDefault
;
Override
patches
=
Override
:
:
kDefault
;
Override
gaborish
=
Override
:
:
kDefault
;
int
epf
=
-
1
;
Override
gradient
=
Override
:
:
kOff
;
bool
progressive_mode
=
false
;
bool
qprogressive_mode
=
false
;
bool
middleout
=
false
;
int
progressive_dc
=
-
1
;
bool
keep_invisible
=
false
;
size_t
saliency_num_progressive_steps
=
3
;
float
saliency_threshold
=
0
.
0f
;
ImageF
*
saliency_map
=
nullptr
;
const
char
*
file_in
=
nullptr
;
const
char
*
file_out
=
nullptr
;
bool
clear_metadata
=
false
;
bool
verbose
=
false
;
ButteraugliParams
ba_params
;
bool
force_cfl_jpeg_recompression
=
true
;
ModularOptions
options
;
int
responsive
=
-
1
;
std
:
:
pair
<
float
float
>
quality_pair
{
100
.
f
100
.
f
}
;
int
colorspace
=
-
1
;
float
channel_colors_pre_transform_percent
=
95
.
f
;
float
channel_colors_percent
=
80
.
f
;
int
near_lossless
=
0
;
int
palette_colors
=
1
<
<
10
;
bool
lossy_palette
=
false
;
bool
IsLossless
(
)
const
{
return
modular_mode
&
&
quality_pair
.
first
=
=
100
&
&
quality_pair
.
second
=
=
100
&
&
color_transform
=
=
jxl
:
:
ColorTransform
:
:
kNone
;
}
void
SetLossless
(
)
{
modular_mode
=
true
;
quality_pair
.
first
=
100
;
quality_pair
.
second
=
100
;
color_transform
=
jxl
:
:
ColorTransform
:
:
kNone
;
}
bool
use_new_heuristics
=
false
;
size_t
resampling
=
1
;
size_t
ec_resampling
=
1
;
bool
already_downsampled
=
false
;
}
;
static
constexpr
float
kMinButteraugliForDynamicAR
=
0
.
5f
;
static
constexpr
float
kMinButteraugliForDots
=
3
.
0f
;
static
constexpr
float
kMinButteraugliToSubtractOriginalPatches
=
3
.
0f
;
static
constexpr
float
kMinButteraugliDistanceForProgressiveDc
=
4
.
5f
;
static
constexpr
float
kMinButteraugliForNoise
=
99
.
0f
;
static
constexpr
float
kMinButteraugliDistance
=
0
.
01f
;
static
constexpr
size_t
kEncTileDim
=
64
;
static
constexpr
size_t
kEncTileDimInBlocks
=
kEncTileDim
/
kBlockDim
;
}
#
endif
