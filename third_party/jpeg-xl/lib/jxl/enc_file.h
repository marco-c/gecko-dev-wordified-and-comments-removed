#
ifndef
LIB_JXL_ENC_FILE_H_
#
define
LIB_JXL_ENC_FILE_H_
#
include
"
lib
/
jxl
/
aux_out
.
h
"
#
include
"
lib
/
jxl
/
aux_out_fwd
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
padded_bytes
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
codec_in_out
.
h
"
#
include
"
lib
/
jxl
/
enc_cache
.
h
"
#
include
"
lib
/
jxl
/
enc_params
.
h
"
namespace
jxl
{
Status
EncodePreview
(
const
CompressParams
&
cparams
const
ImageBundle
&
ib
const
CodecMetadata
*
metadata
ThreadPool
*
pool
BitWriter
*
JXL_RESTRICT
writer
)
;
Status
WriteHeaders
(
CodecMetadata
*
metadata
BitWriter
*
writer
AuxOut
*
aux_out
)
;
Status
EncodeFile
(
const
CompressParams
&
params
const
CodecInOut
*
io
PassesEncoderState
*
passes_enc_state
PaddedBytes
*
compressed
AuxOut
*
aux_out
=
nullptr
ThreadPool
*
pool
=
nullptr
)
;
struct
FrameEncCache
{
}
;
JXL_INLINE
Status
EncodeFile
(
const
CompressParams
&
params
const
CodecInOut
*
io
FrameEncCache
*
PaddedBytes
*
compressed
AuxOut
*
aux_out
=
nullptr
ThreadPool
*
pool
=
nullptr
)
{
PassesEncoderState
passes_enc_state
;
return
EncodeFile
(
params
io
&
passes_enc_state
compressed
aux_out
pool
)
;
}
}
#
endif
