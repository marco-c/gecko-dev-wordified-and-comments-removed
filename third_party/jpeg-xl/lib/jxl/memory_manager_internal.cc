#
include
"
lib
/
jxl
/
memory_manager_internal
.
h
"
#
include
<
jxl
/
memory_manager
.
h
>
#
include
<
jxl
/
types
.
h
>
#
include
<
atomic
>
#
include
<
cstddef
>
#
include
<
cstdio
>
#
include
<
cstdlib
>
#
include
<
cstring
>
#
include
<
hwy
/
base
.
h
>
#
include
"
lib
/
jxl
/
base
/
common
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
simd_util
.
h
"
namespace
jxl
{
namespace
{
void
*
MemoryManagerDefaultAlloc
(
void
*
opaque
size_t
size
)
{
return
malloc
(
size
)
;
}
void
MemoryManagerDefaultFree
(
void
*
opaque
void
*
address
)
{
free
(
address
)
;
}
}
void
*
MemoryManagerAlloc
(
const
JxlMemoryManager
*
memory_manager
size_t
size
)
{
return
memory_manager
-
>
alloc
(
memory_manager
-
>
opaque
size
)
;
}
void
MemoryManagerFree
(
const
JxlMemoryManager
*
memory_manager
void
*
address
)
{
memory_manager
-
>
free
(
memory_manager
-
>
opaque
address
)
;
}
Status
MemoryManagerInit
(
JxlMemoryManager
*
self
const
JxlMemoryManager
*
memory_manager
)
{
if
(
memory_manager
)
{
*
self
=
*
memory_manager
;
}
else
{
memset
(
self
0
sizeof
(
*
self
)
)
;
}
bool
is_default_alloc
=
(
self
-
>
alloc
=
=
nullptr
)
;
bool
is_default_free
=
(
self
-
>
free
=
=
nullptr
)
;
if
(
is_default_alloc
!
=
is_default_free
)
{
return
false
;
}
if
(
is_default_alloc
)
self
-
>
alloc
=
jxl
:
:
MemoryManagerDefaultAlloc
;
if
(
is_default_free
)
self
-
>
free
=
jxl
:
:
MemoryManagerDefaultFree
;
return
true
;
}
size_t
BytesPerRow
(
const
size_t
xsize
const
size_t
sizeof_t
)
{
if
(
xsize
=
=
0
)
{
return
0
;
}
const
size_t
vec_size
=
MaxVectorSize
(
)
;
size_t
valid_bytes
=
xsize
*
sizeof_t
;
if
(
vec_size
!
=
0
)
{
valid_bytes
+
=
vec_size
-
sizeof_t
;
}
const
size_t
align
=
std
:
:
max
(
vec_size
memory_manager_internal
:
:
kAlignment
)
;
size_t
bytes_per_row
=
RoundUpTo
(
valid_bytes
align
)
;
if
(
bytes_per_row
%
memory_manager_internal
:
:
kAlias
=
=
0
)
{
bytes_per_row
+
=
align
;
}
JXL_ASSERT
(
bytes_per_row
%
align
=
=
0
)
;
return
bytes_per_row
;
}
StatusOr
<
AlignedMemory
>
AlignedMemory
:
:
Create
(
JxlMemoryManager
*
memory_manager
size_t
size
)
{
size_t
allocation_size
=
size
+
memory_manager_internal
:
:
kAlias
;
if
(
size
>
allocation_size
)
{
return
JXL_FAILURE
(
"
Requested
allocation
is
too
large
"
)
;
}
JXL_CHECK
(
memory_manager
)
;
void
*
allocated
=
memory_manager
-
>
alloc
(
memory_manager
-
>
opaque
allocation_size
)
;
if
(
allocated
=
=
nullptr
)
{
return
JXL_FAILURE
(
"
Allocation
failed
"
)
;
}
return
AlignedMemory
{
memory_manager
allocated
}
;
}
AlignedMemory
:
:
AlignedMemory
(
JxlMemoryManager
*
memory_manager
void
*
allocation
)
:
allocation_
(
allocation
)
memory_manager_
(
memory_manager
)
{
static
std
:
:
atomic
<
uint32_t
>
next_group
{
0
}
;
size_t
group
=
static_cast
<
size_t
>
(
next_group
.
fetch_add
(
1
std
:
:
memory_order_relaxed
)
)
;
group
&
=
(
memory_manager_internal
:
:
kNumAlignmentGroups
-
1
)
;
size_t
offset
=
memory_manager_internal
:
:
kAlignment
*
group
;
uintptr_t
address
=
reinterpret_cast
<
uintptr_t
>
(
allocation
)
;
uintptr_t
aligned_address
=
(
address
&
~
(
memory_manager_internal
:
:
kAlias
-
1
)
)
+
offset
;
if
(
aligned_address
<
address
)
aligned_address
+
=
memory_manager_internal
:
:
kAlias
;
address_
=
reinterpret_cast
<
void
*
>
(
aligned_address
)
;
}
AlignedMemory
:
:
AlignedMemory
(
AlignedMemory
&
&
other
)
noexcept
{
allocation_
=
other
.
allocation_
;
memory_manager_
=
other
.
memory_manager_
;
address_
=
other
.
address_
;
other
.
memory_manager_
=
nullptr
;
}
AlignedMemory
&
AlignedMemory
:
:
operator
=
(
AlignedMemory
&
&
other
)
noexcept
{
if
(
this
=
=
&
other
)
return
*
this
;
if
(
memory_manager_
&
&
allocation_
)
{
memory_manager_
-
>
free
(
memory_manager_
-
>
opaque
allocation_
)
;
}
allocation_
=
other
.
allocation_
;
memory_manager_
=
other
.
memory_manager_
;
address_
=
other
.
address_
;
other
.
memory_manager_
=
nullptr
;
return
*
this
;
}
AlignedMemory
:
:
~
AlignedMemory
(
)
{
if
(
memory_manager_
=
=
nullptr
)
return
;
memory_manager_
-
>
free
(
memory_manager_
-
>
opaque
allocation_
)
;
}
}
