#
ifndef
LIB_JXL_ENC_HEURISTICS_H_
#
define
LIB_JXL_ENC_HEURISTICS_H_
#
include
<
jxl
/
cms_interface
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
#
include
"
lib
/
jxl
/
modular
/
encoding
/
enc_ma
.
h
"
namespace
jxl
{
struct
AuxOut
;
struct
PassesEncoderState
;
class
DequantMatrices
;
class
ImageBundle
;
class
ModularFrameEncoder
;
class
EncoderHeuristics
{
public
:
virtual
~
EncoderHeuristics
(
)
=
default
;
virtual
Status
LossyFrameHeuristics
(
PassesEncoderState
*
enc_state
ModularFrameEncoder
*
modular_frame_encoder
const
ImageBundle
*
original_pixels
Image3F
*
opsin
const
JxlCmsInterface
&
cms
ThreadPool
*
pool
AuxOut
*
aux_out
)
=
0
;
virtual
bool
CustomFixedTreeLossless
(
const
FrameDimensions
&
frame_dim
Tree
*
tree
)
{
return
false
;
}
virtual
bool
HandlesColorConversion
(
const
CompressParams
&
cparams
const
ImageBundle
&
ib
)
{
return
false
;
}
}
;
class
DefaultEncoderHeuristics
:
public
EncoderHeuristics
{
public
:
Status
LossyFrameHeuristics
(
PassesEncoderState
*
enc_state
ModularFrameEncoder
*
modular_frame_encoder
const
ImageBundle
*
original_pixels
Image3F
*
opsin
const
JxlCmsInterface
&
cms
ThreadPool
*
pool
AuxOut
*
aux_out
)
override
;
bool
HandlesColorConversion
(
const
CompressParams
&
cparams
const
ImageBundle
&
ib
)
override
;
}
;
void
FindBestDequantMatrices
(
const
CompressParams
&
cparams
const
Image3F
&
opsin
ModularFrameEncoder
*
modular_frame_encoder
DequantMatrices
*
dequant_matrices
)
;
}
#
endif
