#
ifndef
LIB_JXL_CONVOLVE_H_
#
define
LIB_JXL_CONVOLVE_H_
#
include
<
stddef
.
h
>
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
rect
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
namespace
jxl
{
static
constexpr
size_t
kConvolveMaxRadius
=
3
;
struct
WeightsSymmetric3
{
float
c
[
4
]
;
float
r
[
4
]
;
float
d
[
4
]
;
}
;
struct
WeightsSymmetric5
{
float
c
[
4
]
;
float
r
[
4
]
;
float
R
[
4
]
;
float
d
[
4
]
;
float
D
[
4
]
;
float
L
[
4
]
;
}
;
struct
WeightsSeparable5
{
float
horz
[
3
*
4
]
;
float
vert
[
3
*
4
]
;
}
;
const
WeightsSymmetric3
&
WeightsSymmetric3Lowpass
(
)
;
const
WeightsSeparable5
&
WeightsSeparable5Lowpass
(
)
;
const
WeightsSymmetric5
&
WeightsSymmetric5Lowpass
(
)
;
void
SlowSymmetric3
(
const
ImageF
&
in
const
Rect
&
rect
const
WeightsSymmetric3
&
weights
ThreadPool
*
pool
ImageF
*
JXL_RESTRICT
out
)
;
void
SlowSeparable5
(
const
ImageF
&
in
const
Rect
&
in_rect
const
WeightsSeparable5
&
weights
ThreadPool
*
pool
ImageF
*
out
const
Rect
&
out_rect
)
;
void
Symmetric3
(
const
ImageF
&
in
const
Rect
&
rect
const
WeightsSymmetric3
&
weights
ThreadPool
*
pool
ImageF
*
out
)
;
void
Symmetric5
(
const
ImageF
&
in
const
Rect
&
in_rect
const
WeightsSymmetric5
&
weights
ThreadPool
*
pool
ImageF
*
JXL_RESTRICT
out
const
Rect
&
out_rect
)
;
void
Symmetric5
(
const
ImageF
&
in
const
Rect
&
rect
const
WeightsSymmetric5
&
weights
ThreadPool
*
pool
ImageF
*
JXL_RESTRICT
out
)
;
void
Separable5
(
const
ImageF
&
in
const
Rect
&
rect
const
WeightsSeparable5
&
weights
ThreadPool
*
pool
ImageF
*
out
)
;
}
#
endif
