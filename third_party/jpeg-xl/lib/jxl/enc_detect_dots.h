#
ifndef
LIB_JXL_ENC_DETECT_DOTS_H_
#
define
LIB_JXL_ENC_DETECT_DOTS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
array
>
#
include
<
vector
>
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
dec_patch_dictionary
.
h
"
#
include
"
lib
/
jxl
/
enc_patch_dictionary
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
namespace
jxl
{
struct
GaussianDetectParams
{
double
t_high
=
0
;
double
t_low
=
0
;
uint32_t
maxWinSize
=
0
;
double
maxL2Loss
=
0
;
double
maxCustomLoss
=
0
;
double
minIntensity
=
0
;
double
maxDistMeanMode
=
0
;
size_t
maxNegPixels
=
0
;
size_t
minScore
=
0
;
size_t
maxCC
=
50
;
size_t
percCC
=
15
;
}
;
struct
EllipseQuantParams
{
size_t
xsize
;
size_t
ysize
;
size_t
qPosition
;
double
minSigma
;
double
maxSigma
;
size_t
qSigma
;
size_t
qAngle
;
std
:
:
array
<
double
3
>
minIntensity
;
std
:
:
array
<
double
3
>
maxIntensity
;
std
:
:
array
<
size_t
3
>
qIntensity
;
bool
subtractQuantized
;
float
ytox
;
float
ytob
;
void
QuantPositionSize
(
size_t
*
xsize
size_t
*
ysize
)
const
;
}
;
std
:
:
vector
<
PatchInfo
>
DetectGaussianEllipses
(
const
Image3F
&
opsin
const
GaussianDetectParams
&
params
const
EllipseQuantParams
&
qParams
ThreadPool
*
pool
)
;
}
#
endif
