#
include
"
lib
/
jxl
/
opsin_params
.
h
"
#
include
"
lib
/
jxl
/
cms
/
opsin_params
.
h
"
#
define
INVERSE_OPSIN_FROM_SPEC
1
#
include
"
lib
/
jxl
/
base
/
matrix_ops
.
h
"
namespace
jxl
{
const
Matrix3x3
&
GetOpsinAbsorbanceInverseMatrix
(
)
{
#
if
INVERSE_OPSIN_FROM_SPEC
return
jxl
:
:
cms
:
:
DefaultInverseOpsinAbsorbanceMatrix
(
)
;
#
else
static
const
Matrix3x3
const
kInverse
=
[
]
{
static
Matrix3x3
inverse
=
kOpsinAbsorbanceMatrix
;
Inv3x3Matrix
(
inverse
)
;
return
inverse
;
}
(
)
;
return
kInverse
;
#
endif
}
void
InitSIMDInverseMatrix
(
const
Matrix3x3
&
inverse
float
*
JXL_RESTRICT
simd_inverse
float
intensity_target
)
{
for
(
size_t
j
=
0
;
j
<
3
;
+
+
j
)
{
for
(
size_t
i
=
0
;
i
<
3
;
+
+
i
)
{
size_t
idx
=
(
j
*
3
+
i
)
*
4
;
simd_inverse
[
idx
]
=
simd_inverse
[
idx
+
1
]
=
simd_inverse
[
idx
+
2
]
=
simd_inverse
[
idx
+
3
]
=
inverse
[
j
]
[
i
]
*
(
255
.
0f
/
intensity_target
)
;
}
}
}
}
