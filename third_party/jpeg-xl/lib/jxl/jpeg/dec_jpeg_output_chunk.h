#
ifndef
LIB_JXL_JPEG_DEC_JPEG_OUTPUT_CHUNK_H_
#
define
LIB_JXL_JPEG_DEC_JPEG_OUTPUT_CHUNK_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
initializer_list
>
#
include
<
memory
>
#
include
<
vector
>
namespace
jxl
{
namespace
jpeg
{
struct
OutputChunk
{
template
<
typename
Bytes
>
explicit
OutputChunk
(
Bytes
&
bytes
)
:
len
(
bytes
.
size
(
)
)
{
const
void
*
src
=
bytes
.
data
(
)
;
next
=
reinterpret_cast
<
const
uint8_t
*
>
(
src
)
;
}
OutputChunk
(
const
uint8_t
*
data
size_t
size
)
:
next
(
data
)
len
(
size
)
{
}
explicit
OutputChunk
(
size_t
size
=
0
)
{
buffer
.
reset
(
new
std
:
:
vector
<
uint8_t
>
(
size
)
)
;
next
=
buffer
-
>
data
(
)
;
len
=
size
;
}
OutputChunk
(
std
:
:
initializer_list
<
uint8_t
>
bytes
)
{
buffer
.
reset
(
new
std
:
:
vector
<
uint8_t
>
(
bytes
)
)
;
next
=
buffer
-
>
data
(
)
;
len
=
bytes
.
size
(
)
;
}
const
uint8_t
*
next
;
size_t
len
;
std
:
:
unique_ptr
<
std
:
:
vector
<
uint8_t
>
>
buffer
;
}
;
}
}
#
endif
