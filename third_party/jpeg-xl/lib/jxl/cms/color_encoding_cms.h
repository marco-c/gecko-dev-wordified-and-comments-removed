#
ifndef
LIB_JXL_CMS_COLOR_ENCODING_CMS_H_
#
define
LIB_JXL_CMS_COLOR_ENCODING_CMS_H_
#
include
<
cstdint
>
#
include
<
vector
>
namespace
jxl
{
namespace
cms
{
using
IccBytes
=
std
:
:
vector
<
uint8_t
>
;
enum
class
ColorSpace
:
uint32_t
{
kRGB
kGray
kXYB
kUnknown
}
;
enum
class
WhitePoint
:
uint32_t
{
kD65
=
1
kCustom
=
2
kE
=
10
kDCI
=
11
}
;
enum
class
Primaries
:
uint32_t
{
kSRGB
=
1
kCustom
=
2
k2100
=
9
kP3
=
11
}
;
enum
class
TransferFunction
:
uint32_t
{
k709
=
1
kUnknown
=
2
kLinear
=
8
kSRGB
=
13
kPQ
=
16
kDCI
=
17
kHLG
=
18
}
;
enum
class
RenderingIntent
:
uint32_t
{
kPerceptual
=
0
kRelative
kSaturation
kAbsolute
}
;
struct
CIExy
{
double
x
=
0
.
0
;
double
y
=
0
.
0
;
}
;
struct
PrimariesCIExy
{
CIExy
r
;
CIExy
g
;
CIExy
b
;
}
;
struct
Customxy
{
int32_t
x
;
int32_t
y
;
}
;
struct
CustomTransferFunction
{
static
constexpr
uint32_t
kMaxGamma
=
8192
;
static
constexpr
uint32_t
kGammaMul
=
10000000
;
bool
have_gamma
;
uint32_t
gamma
;
TransferFunction
transfer_function
;
}
;
struct
ColorEncoding
{
WhitePoint
white_point
;
Primaries
primaries
;
RenderingIntent
rendering_intent
;
bool
want_icc
;
bool
have_fields
=
true
;
IccBytes
icc
;
ColorSpace
color_space
;
bool
cmyk
=
false
;
CustomTransferFunction
tf
;
Customxy
white
;
Customxy
red
;
Customxy
green
;
Customxy
blue
;
}
;
}
}
#
endif
