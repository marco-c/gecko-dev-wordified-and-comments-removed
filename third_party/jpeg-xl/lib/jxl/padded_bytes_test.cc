#
include
"
lib
/
jxl
/
base
/
padded_bytes
.
h
"
#
include
<
numeric
>
#
include
<
vector
>
#
include
"
gtest
/
gtest
.
h
"
namespace
jxl
{
namespace
{
TEST
(
PaddedBytesTest
TestNonEmptyFirstByteZero
)
{
PaddedBytes
pb
(
1
)
;
EXPECT_EQ
(
0
pb
[
0
]
)
;
pb
.
resize
(
20
)
;
EXPECT_EQ
(
0
pb
[
0
]
)
;
pb
.
reserve
(
200
)
;
EXPECT_EQ
(
0
pb
[
0
]
)
;
}
TEST
(
PaddedBytesTest
TestEmptyFirstByteZero
)
{
PaddedBytes
pb
(
0
)
;
pb
.
resize
(
20
)
;
EXPECT_EQ
(
0
pb
[
0
]
)
;
}
TEST
(
PaddedBytesTest
TestFillWithoutReserve
)
{
PaddedBytes
pb
;
for
(
size_t
i
=
0
;
i
<
170
;
+
+
i
)
{
pb
.
push_back
(
i
)
;
}
EXPECT_EQ
(
170
pb
.
size
(
)
)
;
EXPECT_GE
(
pb
.
capacity
(
)
170
)
;
}
TEST
(
PaddedBytesTest
TestFillWithExactReserve
)
{
PaddedBytes
pb
;
pb
.
reserve
(
170
)
;
for
(
size_t
i
=
0
;
i
<
170
;
+
+
i
)
{
pb
.
push_back
(
i
)
;
}
EXPECT_EQ
(
170
pb
.
size
(
)
)
;
EXPECT_EQ
(
pb
.
capacity
(
)
170
)
;
}
TEST
(
PaddedBytesTest
TestFillWithMoreReserve
)
{
PaddedBytes
pb
;
pb
.
reserve
(
171
)
;
for
(
size_t
i
=
0
;
i
<
170
;
+
+
i
)
{
pb
.
push_back
(
i
)
;
}
EXPECT_EQ
(
170
pb
.
size
(
)
)
;
EXPECT_GT
(
pb
.
capacity
(
)
170
)
;
}
TEST
(
PaddedBytesTest
TestAssignFromWithin
)
{
PaddedBytes
pb
;
pb
.
reserve
(
256
)
;
for
(
size_t
i
=
0
;
i
<
256
;
+
+
i
)
{
pb
.
push_back
(
i
)
;
}
pb
.
assign
(
pb
.
data
(
)
+
64
pb
.
data
(
)
+
192
)
;
EXPECT_EQ
(
128
pb
.
size
(
)
)
;
for
(
size_t
i
=
0
;
i
<
128
;
+
+
i
)
{
EXPECT_EQ
(
i
+
64
pb
[
i
]
)
;
}
}
TEST
(
PaddedBytesTest
TestAssignReclaim
)
{
PaddedBytes
pb
;
pb
.
reserve
(
256
)
;
for
(
size_t
i
=
0
;
i
<
256
;
+
+
i
)
{
pb
.
push_back
(
i
)
;
}
const
uint8_t
*
mem
=
pb
.
data
(
)
;
pb
.
resize
(
200
)
;
EXPECT_EQ
(
mem
pb
.
data
(
)
)
;
EXPECT_EQ
(
256
pb
.
capacity
(
)
)
;
pb
.
assign
(
pb
.
data
(
)
+
100
pb
.
data
(
)
+
240
)
;
EXPECT_EQ
(
140
pb
.
size
(
)
)
;
for
(
size_t
i
=
0
;
i
<
140
;
+
+
i
)
{
EXPECT_EQ
(
i
+
100
pb
[
i
]
)
;
}
}
TEST
(
PaddedBytesTest
TestAssignOutside
)
{
PaddedBytes
pb
;
pb
.
resize
(
400
)
;
std
:
:
iota
(
pb
.
begin
(
)
pb
.
end
(
)
1
)
;
std
:
:
vector
<
uint8_t
>
small
(
64
)
;
std
:
:
iota
(
small
.
begin
(
)
small
.
end
(
)
500
)
;
pb
.
assign
(
small
.
data
(
)
small
.
data
(
)
+
small
.
size
(
)
)
;
EXPECT_EQ
(
64
pb
.
size
(
)
)
;
for
(
size_t
i
=
0
;
i
<
64
;
+
+
i
)
{
EXPECT_EQ
(
(
i
+
500
)
&
0xFF
pb
[
i
]
)
;
}
std
:
:
vector
<
uint8_t
>
large
(
1000
)
;
std
:
:
iota
(
large
.
begin
(
)
large
.
end
(
)
600
)
;
pb
.
assign
(
large
.
data
(
)
large
.
data
(
)
+
large
.
size
(
)
)
;
EXPECT_EQ
(
1000
pb
.
size
(
)
)
;
for
(
size_t
i
=
0
;
i
<
1000
;
+
+
i
)
{
EXPECT_EQ
(
(
i
+
600
)
&
0xFF
pb
[
i
]
)
;
}
}
}
}
