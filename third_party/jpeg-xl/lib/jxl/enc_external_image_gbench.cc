#
include
"
benchmark
/
benchmark
.
h
"
#
include
"
lib
/
jxl
/
enc_external_image
.
h
"
#
include
"
lib
/
jxl
/
image_ops
.
h
"
namespace
jxl
{
namespace
{
void
BM_EncExternalImage_ConvertImageRGBA
(
benchmark
:
:
State
&
state
)
{
const
size_t
kNumIter
=
5
;
size_t
xsize
=
state
.
range
(
)
;
size_t
ysize
=
state
.
range
(
)
;
ImageMetadata
im
;
im
.
SetAlphaBits
(
8
)
;
ImageBundle
ib
(
&
im
)
;
std
:
:
vector
<
uint8_t
>
interleaved
(
xsize
*
ysize
*
4
)
;
for
(
auto
_
:
state
)
{
for
(
size_t
i
=
0
;
i
<
kNumIter
;
+
+
i
)
{
JXL_CHECK
(
ConvertFromExternal
(
Span
<
const
uint8_t
>
(
interleaved
.
data
(
)
interleaved
.
size
(
)
)
xsize
ysize
ColorEncoding
:
:
SRGB
(
)
4
false
8
JXL_NATIVE_ENDIAN
nullptr
&
ib
false
0
)
)
;
}
}
state
.
SetItemsProcessed
(
kNumIter
*
state
.
iterations
(
)
*
xsize
*
ysize
)
;
state
.
SetBytesProcessed
(
kNumIter
*
state
.
iterations
(
)
*
interleaved
.
size
(
)
)
;
}
BENCHMARK
(
BM_EncExternalImage_ConvertImageRGBA
)
-
>
RangeMultiplier
(
2
)
-
>
Range
(
256
2048
)
;
}
}
