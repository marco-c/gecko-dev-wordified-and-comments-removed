#
ifndef
LIB_JXL_BASE_PROFILER_H_
#
define
LIB_JXL_BASE_PROFILER_H_
#
ifndef
JXL_PROFILER_ENABLED
#
define
JXL_PROFILER_ENABLED
0
#
endif
#
if
JXL_PROFILER_ENABLED
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
hwy
/
aligned_allocator
.
h
>
#
include
<
hwy
/
base
.
h
>
#
include
"
lib
/
jxl
/
base
/
tsc_timer
.
h
"
#
if
HWY_COMPILER_MSVC
#
define
PROFILER_PUBLIC
#
else
#
define
PROFILER_PUBLIC
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
endif
namespace
jxl
{
namespace
profiler
{
#
pragma
pack
(
push
1
)
struct
Packet
{
uint64_t
timestamp
;
const
char
*
name
;
#
if
UINTPTR_MAX
<
=
0xFFFFFFFFu
uint32_t
padding
;
#
endif
}
;
#
pragma
pack
(
pop
)
static_assert
(
sizeof
(
Packet
)
=
=
16
"
Wrong
Packet
size
"
)
;
class
Results
;
class
ThreadSpecific
{
static
constexpr
size_t
kBufferCapacity
=
64
/
sizeof
(
Packet
)
;
public
:
PROFILER_PUBLIC
explicit
ThreadSpecific
(
)
;
PROFILER_PUBLIC
~
ThreadSpecific
(
)
;
PROFILER_PUBLIC
void
ComputeOverhead
(
)
;
HWY_INLINE
void
WriteEntry
(
const
char
*
name
)
{
Write
(
name
TicksBefore
(
)
)
;
}
HWY_INLINE
void
WriteExit
(
)
{
Write
(
nullptr
TicksAfter
(
)
)
;
}
PROFILER_PUBLIC
void
AnalyzeRemainingPackets
(
)
;
void
SetNext
(
ThreadSpecific
*
next
)
{
next_
=
next
;
}
ThreadSpecific
*
GetNext
(
)
const
{
return
next_
;
}
Results
&
GetResults
(
)
{
return
*
results_
;
}
private
:
PROFILER_PUBLIC
void
FlushBuffer
(
)
;
void
Write
(
const
char
*
name
const
uint64_t
timestamp
)
{
if
(
buffer_size_
=
=
kBufferCapacity
)
{
FlushBuffer
(
)
;
}
buffer_
[
buffer_size_
]
.
name
=
name
;
buffer_
[
buffer_size_
]
.
timestamp
=
timestamp
;
+
+
buffer_size_
;
}
Packet
buffer_
[
kBufferCapacity
]
;
size_t
buffer_size_
=
0
;
const
size_t
max_packets_
;
hwy
:
:
AlignedFreeUniquePtr
<
Packet
[
]
>
packets_
;
size_t
num_packets_
;
ThreadSpecific
*
next_
=
nullptr
;
hwy
:
:
AlignedUniquePtr
<
Results
>
results_
;
}
;
class
Zone
{
public
:
HWY_NOINLINE
explicit
Zone
(
const
char
*
name
)
{
HWY_FENCE
;
ThreadSpecific
*
HWY_RESTRICT
thread_specific
=
GetThreadSpecific
(
)
;
if
(
HWY_UNLIKELY
(
thread_specific
=
=
nullptr
)
)
{
thread_specific
=
InitThreadSpecific
(
)
;
}
thread_specific
-
>
WriteEntry
(
name
)
;
}
HWY_NOINLINE
~
Zone
(
)
{
GetThreadSpecific
(
)
-
>
WriteExit
(
)
;
}
PROFILER_PUBLIC
static
void
PrintResults
(
)
;
private
:
static
ThreadSpecific
*
&
GetThreadSpecific
(
)
{
static
thread_local
ThreadSpecific
*
thread_specific
;
return
thread_specific
;
}
PROFILER_PUBLIC
ThreadSpecific
*
InitThreadSpecific
(
)
;
}
;
#
define
PROFILER_ZONE
(
name
)
\
HWY_FENCE
;
\
const
:
:
jxl
:
:
profiler
:
:
Zone
zone
(
"
"
name
)
;
\
HWY_FENCE
#
define
PROFILER_FUNC
\
HWY_FENCE
;
\
const
:
:
jxl
:
:
profiler
:
:
Zone
zone
(
__func__
)
;
\
HWY_FENCE
#
define
PROFILER_PRINT_RESULTS
:
:
jxl
:
:
profiler
:
:
Zone
:
:
PrintResults
}
}
#
else
#
define
PROFILER_ZONE
(
name
)
#
define
PROFILER_FUNC
#
define
PROFILER_PRINT_RESULTS
(
)
#
endif
#
endif
