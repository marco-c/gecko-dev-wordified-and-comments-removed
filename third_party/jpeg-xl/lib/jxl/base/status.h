#
ifndef
LIB_JXL_BASE_STATUS_H_
#
define
LIB_JXL_BASE_STATUS_H_
#
include
<
stdarg
.
h
>
#
include
<
stdint
.
h
>
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
namespace
jxl
{
#
ifndef
JXL_ENABLE_ASSERT
#
define
JXL_ENABLE_ASSERT
1
#
endif
#
ifndef
JXL_ENABLE_CHECK
#
define
JXL_ENABLE_CHECK
1
#
endif
#
if
defined
(
JXL_DEBUG_ON_ERROR
)
|
|
defined
(
JXL_CRASH_ON_ERROR
)
#
undef
JXL_DEBUG_ON_ERROR
#
define
JXL_DEBUG_ON_ERROR
1
#
else
#
ifdef
NDEBUG
#
define
JXL_DEBUG_ON_ERROR
0
#
else
#
define
JXL_DEBUG_ON_ERROR
1
#
endif
#
endif
#
if
defined
(
JXL_DEBUG_ON_ALL_ERROR
)
#
undef
JXL_DEBUG_ON_ALL_ERROR
#
define
JXL_DEBUG_ON_ALL_ERROR
1
#
undef
JXL_DEBUG_ON_ERROR
#
define
JXL_DEBUG_ON_ERROR
1
#
else
#
define
JXL_DEBUG_ON_ALL_ERROR
0
#
endif
#
ifndef
JXL_DEBUG_V_LEVEL
#
define
JXL_DEBUG_V_LEVEL
0
#
endif
#
ifndef
JXL_DEBUG_ON_ABORT
#
define
JXL_DEBUG_ON_ABORT
1
#
endif
JXL_FORMAT
(
1
2
)
bool
Debug
(
const
char
*
format
.
.
.
)
;
#
define
JXL_DEBUG
(
enabled
format
.
.
.
)
\
do
{
\
if
(
enabled
)
{
\
:
:
jxl
:
:
Debug
(
(
"
%
s
:
%
d
:
"
format
"
\
n
"
)
__FILE__
__LINE__
\
#
#
__VA_ARGS__
)
;
\
}
\
}
while
(
0
)
#
define
JXL_DEBUG_V
(
level
format
.
.
.
)
\
JXL_DEBUG
(
level
<
=
JXL_DEBUG_V_LEVEL
format
#
#
__VA_ARGS__
)
#
ifdef
JXL_DEBUG_WARNING
#
undef
JXL_DEBUG_WARNING
#
define
JXL_DEBUG_WARNING
1
#
else
#
ifdef
NDEBUG
#
define
JXL_DEBUG_WARNING
0
#
else
#
define
JXL_DEBUG_WARNING
1
#
endif
#
endif
#
define
JXL_WARNING
(
format
.
.
.
)
\
JXL_DEBUG
(
JXL_DEBUG_WARNING
format
#
#
__VA_ARGS__
)
JXL_NORETURN
bool
Abort
(
)
;
#
define
JXL_ABORT
(
format
.
.
.
)
\
(
(
JXL_DEBUG_ON_ABORT
)
&
&
:
:
jxl
:
:
Debug
(
(
"
%
s
:
%
d
:
JXL_ABORT
:
"
format
"
\
n
"
)
\
__FILE__
__LINE__
#
#
__VA_ARGS__
)
\
:
:
jxl
:
:
Abort
(
)
)
#
if
JXL_ENABLE_ASSERT
#
define
JXL_ASSERT
(
condition
)
\
do
{
\
if
(
!
(
condition
)
)
{
\
JXL_DEBUG
(
JXL_DEBUG_ON_ABORT
"
JXL_ASSERT
:
%
s
"
#
condition
)
;
\
:
:
jxl
:
:
Abort
(
)
;
\
}
\
}
while
(
0
)
#
else
#
define
JXL_ASSERT
(
condition
)
\
do
{
\
}
while
(
0
)
#
endif
#
ifndef
JXL_IS_DEBUG_BUILD
#
if
!
defined
(
NDEBUG
)
|
|
defined
(
ADDRESS_SANITIZER
)
|
|
\
defined
(
MEMORY_SANITIZER
)
|
|
defined
(
THREAD_SANITIZER
)
|
|
\
defined
(
__clang_analyzer__
)
#
define
JXL_IS_DEBUG_BUILD
1
#
else
#
define
JXL_IS_DEBUG_BUILD
0
#
endif
#
endif
#
if
JXL_IS_DEBUG_BUILD
#
define
JXL_DASSERT
(
condition
)
\
do
{
\
if
(
!
(
condition
)
)
{
\
JXL_DEBUG
(
JXL_DEBUG_ON_ABORT
"
JXL_DASSERT
:
%
s
"
#
condition
)
;
\
:
:
jxl
:
:
Abort
(
)
;
\
}
\
}
while
(
0
)
#
else
#
define
JXL_DASSERT
(
condition
)
\
do
{
\
}
while
(
0
)
#
endif
#
if
JXL_ENABLE_CHECK
#
define
JXL_CHECK
(
condition
)
\
do
{
\
if
(
!
(
condition
)
)
{
\
JXL_DEBUG
(
JXL_DEBUG_ON_ABORT
"
JXL_CHECK
:
%
s
"
#
condition
)
;
\
:
:
jxl
:
:
Abort
(
)
;
\
}
\
}
while
(
0
)
#
else
#
define
JXL_CHECK
(
condition
)
\
do
{
\
(
void
)
(
condition
)
;
\
}
while
(
0
)
#
endif
#
define
JXL_STATUS
(
status
format
.
.
.
)
\
:
:
jxl
:
:
StatusMessage
(
:
:
jxl
:
:
Status
(
status
)
"
%
s
:
%
d
:
"
format
"
\
n
"
__FILE__
\
__LINE__
#
#
__VA_ARGS__
)
#
define
JXL_NOTIFY_ERROR
(
format
.
.
.
)
\
(
void
)
JXL_STATUS
(
:
:
jxl
:
:
StatusCode
:
:
kGenericError
"
JXL_ERROR
:
"
format
\
#
#
__VA_ARGS__
)
#
define
JXL_FAILURE
(
format
.
.
.
)
\
(
(
void
)
JXL_STATUS
(
:
:
jxl
:
:
StatusCode
:
:
kGenericError
"
JXL_FAILURE
:
"
format
\
#
#
__VA_ARGS__
)
\
:
:
jxl
:
:
Status
(
:
:
jxl
:
:
StatusCode
:
:
kGenericError
)
)
#
define
JXL_RETURN_IF_ERROR
(
status
)
\
do
{
\
:
:
jxl
:
:
Status
jxl_return_if_error_status
=
(
status
)
;
\
if
(
!
jxl_return_if_error_status
)
{
\
(
void
)
:
:
jxl
:
:
StatusMessage
(
\
jxl_return_if_error_status
\
"
%
s
:
%
d
:
JXL_RETURN_IF_ERROR
code
=
%
d
:
%
s
\
n
"
__FILE__
__LINE__
\
static_cast
<
int
>
(
jxl_return_if_error_status
.
code
(
)
)
#
status
)
;
\
return
jxl_return_if_error_status
;
\
}
\
}
while
(
0
)
#
define
JXL_QUIET_RETURN_IF_ERROR
(
status
)
\
do
{
\
:
:
jxl
:
:
Status
jxl_return_if_error_status
=
(
status
)
;
\
if
(
!
jxl_return_if_error_status
)
{
\
return
jxl_return_if_error_status
;
\
}
\
}
while
(
0
)
enum
class
StatusCode
:
int32_t
{
kNotEnoughBytes
=
-
1
kOk
=
0
kGenericError
=
1
}
;
class
JXL_MUST_USE_RESULT
Status
{
public
:
constexpr
Status
(
bool
ok
)
:
code_
(
ok
?
StatusCode
:
:
kOk
:
StatusCode
:
:
kGenericError
)
{
}
constexpr
Status
(
StatusCode
code
)
:
code_
(
code
)
{
}
constexpr
operator
bool
(
)
const
{
return
code_
=
=
StatusCode
:
:
kOk
;
}
constexpr
StatusCode
code
(
)
const
{
return
code_
;
}
constexpr
bool
IsFatalError
(
)
const
{
return
static_cast
<
int32_t
>
(
code_
)
>
0
;
}
private
:
StatusCode
code_
;
}
;
inline
JXL_FORMAT
(
2
3
)
Status
StatusMessage
(
const
Status
status
const
char
*
format
.
.
.
)
{
if
(
(
JXL_DEBUG_ON_ERROR
&
&
status
.
IsFatalError
(
)
)
|
|
(
JXL_DEBUG_ON_ALL_ERROR
&
&
!
status
)
)
{
va_list
args
;
va_start
(
args
format
)
;
vfprintf
(
stderr
format
args
)
;
va_end
(
args
)
;
}
#
ifdef
JXL_CRASH_ON_ERROR
if
(
status
.
IsFatalError
(
)
)
{
Abort
(
)
;
}
#
endif
return
status
;
}
}
#
endif
