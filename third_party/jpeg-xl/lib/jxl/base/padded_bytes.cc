#
include
"
lib
/
jxl
/
base
/
padded_bytes
.
h
"
namespace
jxl
{
void
PaddedBytes
:
:
IncreaseCapacityTo
(
size_t
capacity
)
{
JXL_ASSERT
(
capacity
>
capacity_
)
;
size_t
new_capacity
=
std
:
:
max
(
capacity
3
*
capacity_
/
2
)
;
new_capacity
=
std
:
:
max
<
size_t
>
(
64
new_capacity
)
;
CacheAlignedUniquePtr
new_data
=
AllocateArray
(
new_capacity
+
8
)
;
if
(
new_data
=
=
nullptr
)
{
size_
=
capacity_
=
0
;
return
;
}
if
(
data_
=
=
nullptr
)
{
new_data
[
0
]
=
0
;
}
else
{
memcpy
(
new_data
.
get
(
)
data_
.
get
(
)
size_
)
;
new_data
[
size_
]
=
0
;
}
capacity_
=
new_capacity
;
std
:
:
swap
(
new_data
data_
)
;
}
void
PaddedBytes
:
:
assign
(
const
uint8_t
*
new_begin
const
uint8_t
*
new_end
)
{
JXL_DASSERT
(
new_begin
<
=
new_end
)
;
const
size_t
new_size
=
static_cast
<
size_t
>
(
new_end
-
new_begin
)
;
const
uint8_t
*
allocated_end
=
begin
(
)
+
capacity_
;
const
bool
outside
=
new_end
<
=
begin
(
)
|
|
new_begin
>
=
allocated_end
;
if
(
outside
)
{
resize
(
new_size
)
;
memcpy
(
data
(
)
new_begin
new_size
)
;
return
;
}
JXL_ASSERT
(
new_size
<
=
capacity_
)
;
memmove
(
data
(
)
new_begin
new_size
)
;
size_
=
new_size
;
}
}
