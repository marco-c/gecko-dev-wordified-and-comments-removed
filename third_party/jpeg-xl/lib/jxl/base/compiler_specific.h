#
ifndef
LIB_JXL_BASE_COMPILER_SPECIFIC_H_
#
define
LIB_JXL_BASE_COMPILER_SPECIFIC_H_
#
include
<
sys
/
types
.
h
>
#
include
"
lib
/
jxl
/
base
/
sanitizer_definitions
.
h
"
#
ifdef
_MSC_VER
#
define
JXL_COMPILER_MSVC
_MSC_VER
#
else
#
define
JXL_COMPILER_MSVC
0
#
endif
#
ifdef
__GNUC__
#
define
JXL_COMPILER_GCC
(
__GNUC__
*
100
+
__GNUC_MINOR__
)
#
else
#
define
JXL_COMPILER_GCC
0
#
endif
#
ifdef
__clang__
#
define
JXL_COMPILER_CLANG
(
__clang_major__
*
100
+
__clang_minor__
)
#
undef
JXL_COMPILER_GCC
#
define
JXL_COMPILER_GCC
0
#
else
#
define
JXL_COMPILER_CLANG
0
#
endif
#
if
JXL_COMPILER_MSVC
#
define
JXL_RESTRICT
__restrict
#
elif
JXL_COMPILER_GCC
|
|
JXL_COMPILER_CLANG
#
define
JXL_RESTRICT
__restrict__
#
else
#
define
JXL_RESTRICT
#
endif
#
if
JXL_COMPILER_MSVC
#
define
JXL_INLINE
__forceinline
#
define
JXL_NOINLINE
__declspec
(
noinline
)
#
else
#
define
JXL_INLINE
inline
__attribute__
(
(
always_inline
)
)
#
define
JXL_NOINLINE
__attribute__
(
(
noinline
)
)
#
endif
#
if
JXL_COMPILER_MSVC
#
define
JXL_NORETURN
__declspec
(
noreturn
)
#
elif
JXL_COMPILER_GCC
|
|
JXL_COMPILER_CLANG
#
define
JXL_NORETURN
__attribute__
(
(
noreturn
)
)
#
else
#
define
JXL_NORETURN
#
endif
#
if
JXL_COMPILER_MSVC
#
define
JXL_MAYBE_UNUSED
#
else
#
define
JXL_MAYBE_UNUSED
__attribute__
(
(
unused
)
)
#
endif
#
if
JXL_MEMORY_SANITIZER
|
|
JXL_ADDRESS_SANITIZER
|
|
JXL_THREAD_SANITIZER
#
define
JXL_MAYBE_INLINE
JXL_MAYBE_UNUSED
#
else
#
define
JXL_MAYBE_INLINE
JXL_INLINE
#
endif
#
if
JXL_COMPILER_MSVC
#
define
JXL_LIKELY
(
expr
)
expr
#
define
JXL_UNLIKELY
(
expr
)
expr
#
else
#
define
JXL_LIKELY
(
expr
)
__builtin_expect
(
!
!
(
expr
)
1
)
#
define
JXL_UNLIKELY
(
expr
)
__builtin_expect
(
!
!
(
expr
)
0
)
#
endif
#
if
JXL_COMPILER_MSVC
#
include
<
stdint
.
h
>
using
ssize_t
=
intptr_t
;
#
endif
#
if
JXL_COMPILER_CLANG
#
define
JXL_HAS_ASSUME_ALIGNED
__has_builtin
(
__builtin_assume_aligned
)
#
elif
JXL_COMPILER_GCC
#
define
JXL_HAS_ASSUME_ALIGNED
1
#
else
#
define
JXL_HAS_ASSUME_ALIGNED
0
#
endif
#
if
JXL_HAS_ASSUME_ALIGNED
#
define
JXL_ASSUME_ALIGNED
(
ptr
align
)
__builtin_assume_aligned
(
(
ptr
)
(
align
)
)
#
else
#
define
JXL_ASSUME_ALIGNED
(
ptr
align
)
(
ptr
)
/
*
not
supported
*
/
#
endif
#
ifdef
__has_attribute
#
define
JXL_HAVE_ATTRIBUTE
(
x
)
__has_attribute
(
x
)
#
else
#
define
JXL_HAVE_ATTRIBUTE
(
x
)
0
#
endif
#
if
JXL_HAVE_ATTRIBUTE
(
nodiscard
)
#
define
JXL_MUST_USE_RESULT
[
[
nodiscard
]
]
#
elif
JXL_COMPILER_CLANG
&
&
JXL_HAVE_ATTRIBUTE
(
warn_unused_result
)
#
define
JXL_MUST_USE_RESULT
__attribute__
(
(
warn_unused_result
)
)
#
else
#
define
JXL_MUST_USE_RESULT
#
endif
#
if
JXL_COMPILER_CLANG
&
&
JXL_HAVE_ATTRIBUTE
(
no_sanitize
)
#
define
JXL_NO_SANITIZE
(
X
)
__attribute__
(
(
no_sanitize
(
X
)
)
)
#
else
#
define
JXL_NO_SANITIZE
(
X
)
#
endif
#
if
JXL_HAVE_ATTRIBUTE
(
__format__
)
#
define
JXL_FORMAT
(
idx_fmt
idx_arg
)
\
__attribute__
(
(
__format__
(
__printf__
idx_fmt
idx_arg
)
)
)
#
else
#
define
JXL_FORMAT
(
idx_fmt
idx_arg
)
#
endif
#
if
defined
(
_MSC_VER
)
&
&
!
defined
(
__clang__
)
&
&
defined
(
_MSVC_LANG
)
&
&
\
_MSVC_LANG
>
__cplusplus
#
define
JXL_CXX_LANG
_MSVC_LANG
#
else
#
define
JXL_CXX_LANG
__cplusplus
#
endif
#
define
JXL_CXX_17
201703
#
if
defined
(
JXL_DEBUG_BUILD
)
#
undef
JXL_DEBUG_BUILD
#
define
JXL_DEBUG_BUILD
1
#
elif
defined
(
NDEBUG
)
#
define
JXL_DEBUG_BUILD
0
#
else
#
define
JXL_DEBUG_BUILD
1
#
endif
#
endif
