#
ifndef
LIB_JXL_BLENDING_H_
#
define
LIB_JXL_BLENDING_H_
#
include
"
lib
/
jxl
/
dec_cache
.
h
"
#
include
"
lib
/
jxl
/
dec_patch_dictionary
.
h
"
#
include
"
lib
/
jxl
/
image_bundle
.
h
"
namespace
jxl
{
Status
PerformBlending
(
const
float
*
const
*
bg
const
float
*
const
*
fg
float
*
const
*
out
size_t
xsize
const
PatchBlending
&
color_blending
const
PatchBlending
*
ec_blending
const
std
:
:
vector
<
ExtraChannelInfo
>
&
extra_channel_info
)
;
class
ImageBlender
{
public
:
class
RectBlender
{
public
:
Status
DoBlending
(
size_t
y
)
;
bool
done
(
)
const
{
return
done_
;
}
private
:
friend
class
ImageBlender
;
explicit
RectBlender
(
bool
done
)
:
done_
(
done
)
{
}
bool
done_
;
Rect
current_overlap_
;
Rect
current_cropbox_
;
ImageBundle
*
dest_
;
std
:
:
vector
<
const
float
*
>
fg_ptrs_
;
std
:
:
vector
<
size_t
>
fg_strides_
;
std
:
:
vector
<
float
*
>
bg_ptrs_
;
std
:
:
vector
<
size_t
>
bg_strides_
;
std
:
:
vector
<
const
float
*
>
fg_row_ptrs_
;
std
:
:
vector
<
float
*
>
bg_row_ptrs_
;
std
:
:
vector
<
PatchBlending
>
blending_info_
;
}
;
static
bool
NeedsBlending
(
PassesDecoderState
*
dec_state
)
;
Status
PrepareBlending
(
PassesDecoderState
*
dec_state
FrameOrigin
foreground_origin
size_t
foreground_xsize
size_t
foreground_ysize
const
ColorEncoding
&
frame_color_encoding
ImageBundle
*
output
)
;
ImageBlender
:
:
RectBlender
PrepareRect
(
const
Rect
&
rect
const
Image3F
&
foreground
const
std
:
:
vector
<
ImageF
>
&
extra_channels
const
Rect
&
input_rect
)
const
;
bool
done
(
)
const
{
return
done_
;
}
private
:
BlendingInfo
info_
;
ImageBundle
*
dest_
;
Rect
cropbox_
;
Rect
overlap_
;
bool
done_
=
false
;
const
std
:
:
vector
<
BlendingInfo
>
*
ec_info_
;
FrameOrigin
o_
{
}
;
}
;
}
#
endif
