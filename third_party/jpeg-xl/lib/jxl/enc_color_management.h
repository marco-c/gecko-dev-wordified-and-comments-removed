#
ifndef
LIB_JXL_ENC_COLOR_MANAGEMENT_H_
#
define
LIB_JXL_ENC_COLOR_MANAGEMENT_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
lib
/
jxl
/
base
/
padded_bytes
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
color_encoding_internal
.
h
"
#
include
"
lib
/
jxl
/
color_management
.
h
"
#
include
"
lib
/
jxl
/
common
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
namespace
jxl
{
class
ColorSpaceTransform
{
public
:
ColorSpaceTransform
(
)
;
~
ColorSpaceTransform
(
)
;
ColorSpaceTransform
(
const
ColorSpaceTransform
&
)
=
delete
;
ColorSpaceTransform
&
operator
=
(
const
ColorSpaceTransform
&
)
=
delete
;
Status
Init
(
const
ColorEncoding
&
c_src
const
ColorEncoding
&
c_dst
float
intensity_target
size_t
xsize
size_t
num_threads
)
;
float
*
BufSrc
(
const
size_t
thread
)
{
return
buf_src_
.
Row
(
thread
)
;
}
float
*
BufDst
(
const
size_t
thread
)
{
return
buf_dst_
.
Row
(
thread
)
;
}
#
if
JPEGXL_ENABLE_SKCMS
struct
SkcmsICC
;
std
:
:
unique_ptr
<
SkcmsICC
>
skcms_icc_
;
#
else
std
:
:
vector
<
void
*
>
transforms_
;
#
endif
ImageF
buf_src_
;
ImageF
buf_dst_
;
float
intensity_target_
;
size_t
xsize_
;
bool
skip_lcms_
=
false
;
ExtraTF
preprocess_
=
ExtraTF
:
:
kNone
;
ExtraTF
postprocess_
=
ExtraTF
:
:
kNone
;
}
;
void
DoColorSpaceTransform
(
ColorSpaceTransform
*
t
size_t
thread
const
float
*
buf_src
float
*
buf_dst
)
;
}
#
endif
