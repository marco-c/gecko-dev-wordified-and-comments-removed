#
ifndef
LIB_JXL_ENC_FAST_LOSSLESS_H_
#
define
LIB_JXL_ENC_FAST_LOSSLESS_H_
#
include
<
stdlib
.
h
>
#
ifndef
FJXL_STANDALONE
#
ifdef
JPEGXL_MAJOR_VERSION
#
define
FJXL_STANDALONE
0
#
else
#
define
FJXL_STANDALONE
1
#
endif
#
endif
#
if
!
FJXL_STANDALONE
#
include
<
jxl
/
encode
.
h
>
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
if
FJXL_STANDALONE
struct
JxlChunkedFrameInputSource
{
void
*
opaque
;
const
void
*
(
*
get_color_channel_data_at
)
(
void
*
opaque
size_t
xpos
size_t
ypos
size_t
xsize
size_t
ysize
size_t
*
row_offset
)
;
void
(
*
release_buffer
)
(
void
*
opaque
const
void
*
buf
)
;
}
;
struct
JxlEncoderOutputProcessorWrapper
{
int
unused
;
}
;
#
endif
typedef
void
(
FJxlParallelRunner
)
(
void
*
runner_opaque
void
*
opaque
void
fun
(
void
*
size_t
)
size_t
count
)
;
#
if
FJXL_STANDALONE
size_t
JxlFastLosslessEncode
(
const
unsigned
char
*
rgba
size_t
width
size_t
row_stride
size_t
height
size_t
nb_chans
size_t
bitdepth
int
big_endian
int
effort
unsigned
char
*
*
output
void
*
runner_opaque
FJxlParallelRunner
runner
)
;
#
endif
struct
JxlFastLosslessFrameState
;
JxlFastLosslessFrameState
*
JxlFastLosslessPrepareFrame
(
JxlChunkedFrameInputSource
input
size_t
width
size_t
height
size_t
nb_chans
size_t
bitdepth
int
big_endian
int
effort
int
oneshot
)
;
#
if
!
FJXL_STANDALONE
class
JxlEncoderOutputProcessorWrapper
;
#
endif
void
JxlFastLosslessProcessFrame
(
JxlFastLosslessFrameState
*
frame_state
bool
is_last
void
*
runner_opaque
FJxlParallelRunner
runner
JxlEncoderOutputProcessorWrapper
*
output_processor
)
;
void
JxlFastLosslessPrepareHeader
(
JxlFastLosslessFrameState
*
frame
int
add_image_header
int
is_last
)
;
size_t
JxlFastLosslessMaxRequiredOutput
(
const
JxlFastLosslessFrameState
*
frame
)
;
size_t
JxlFastLosslessOutputSize
(
const
JxlFastLosslessFrameState
*
frame
)
;
size_t
JxlFastLosslessWriteOutput
(
JxlFastLosslessFrameState
*
frame
unsigned
char
*
output
size_t
output_size
)
;
void
JxlFastLosslessFreeFrameState
(
JxlFastLosslessFrameState
*
frame
)
;
#
ifdef
__cplusplus
}
#
endif
#
if
!
FJXL_STANDALONE
void
JxlFastLosslessOutputFrame
(
JxlFastLosslessFrameState
*
frame_state
JxlEncoderOutputProcessorWrapper
*
output_process
)
;
#
endif
#
endif
