#
ifndef
LIB_JXL_FIELDS_H_
#
define
LIB_JXL_FIELDS_H_
#
include
<
inttypes
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
<
cinttypes
>
#
include
<
cmath
>
#
include
<
cstdarg
>
#
include
"
lib
/
jxl
/
aux_out_fwd
.
h
"
#
include
"
lib
/
jxl
/
base
/
bits
.
h
"
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
common
.
h
"
#
include
"
lib
/
jxl
/
dec_bit_reader
.
h
"
#
include
"
lib
/
jxl
/
enc_bit_writer
.
h
"
#
include
"
lib
/
jxl
/
field_encodings
.
h
"
namespace
jxl
{
class
BitsCoder
{
public
:
static
size_t
MaxEncodedBits
(
const
size_t
bits
)
{
return
bits
;
}
static
Status
CanEncode
(
const
size_t
bits
const
uint32_t
value
size_t
*
JXL_RESTRICT
encoded_bits
)
{
*
encoded_bits
=
bits
;
if
(
value
>
=
(
1ULL
<
<
bits
)
)
{
return
JXL_FAILURE
(
"
Value
%
u
too
large
for
%
"
PRIu64
"
bits
"
value
static_cast
<
uint64_t
>
(
bits
)
)
;
}
return
true
;
}
static
uint32_t
Read
(
const
size_t
bits
BitReader
*
JXL_RESTRICT
reader
)
{
return
reader
-
>
ReadBits
(
bits
)
;
}
static
Status
Write
(
const
size_t
bits
const
uint32_t
value
BitWriter
*
JXL_RESTRICT
writer
)
{
if
(
value
>
=
(
1ULL
<
<
bits
)
)
{
return
JXL_FAILURE
(
"
Value
%
d
too
large
to
encode
in
%
"
PRIu64
"
bits
"
value
static_cast
<
uint64_t
>
(
bits
)
)
;
}
writer
-
>
Write
(
bits
value
)
;
return
true
;
}
}
;
class
U32Coder
{
public
:
static
size_t
MaxEncodedBits
(
U32Enc
enc
)
;
static
Status
CanEncode
(
U32Enc
enc
uint32_t
value
size_t
*
JXL_RESTRICT
encoded_bits
)
;
static
uint32_t
Read
(
U32Enc
enc
BitReader
*
JXL_RESTRICT
reader
)
;
static
Status
Write
(
U32Enc
enc
uint32_t
value
BitWriter
*
JXL_RESTRICT
writer
)
;
private
:
static
Status
ChooseSelector
(
U32Enc
enc
uint32_t
value
uint32_t
*
JXL_RESTRICT
selector
size_t
*
JXL_RESTRICT
total_bits
)
;
}
;
class
U64Coder
{
public
:
static
constexpr
size_t
MaxEncodedBits
(
)
{
return
2
+
12
+
6
*
(
8
+
1
)
+
(
4
+
1
)
;
}
static
uint64_t
Read
(
BitReader
*
JXL_RESTRICT
reader
)
;
static
Status
Write
(
uint64_t
value
BitWriter
*
JXL_RESTRICT
writer
)
;
static
Status
CanEncode
(
uint64_t
value
size_t
*
JXL_RESTRICT
encoded_bits
)
;
}
;
class
F16Coder
{
public
:
static
constexpr
size_t
MaxEncodedBits
(
)
{
return
16
;
}
static
Status
Read
(
BitReader
*
JXL_RESTRICT
reader
float
*
JXL_RESTRICT
value
)
;
static
Status
Write
(
float
value
BitWriter
*
JXL_RESTRICT
writer
)
;
static
Status
CanEncode
(
float
value
size_t
*
JXL_RESTRICT
encoded_bits
)
;
}
;
class
Bundle
{
public
:
static
constexpr
size_t
kMaxExtensions
=
64
;
static
void
Init
(
Fields
*
JXL_RESTRICT
fields
)
;
static
void
SetDefault
(
Fields
*
JXL_RESTRICT
fields
)
;
static
bool
AllDefault
(
const
Fields
&
fields
)
;
static
size_t
MaxBits
(
const
Fields
&
fields
)
;
static
Status
CanEncode
(
const
Fields
&
fields
size_t
*
JXL_RESTRICT
extension_bits
size_t
*
JXL_RESTRICT
total_bits
)
;
static
Status
Read
(
BitReader
*
reader
Fields
*
JXL_RESTRICT
fields
)
;
static
bool
CanRead
(
BitReader
*
reader
Fields
*
JXL_RESTRICT
fields
)
;
static
Status
Write
(
const
Fields
&
fields
BitWriter
*
JXL_RESTRICT
writer
size_t
layer
AuxOut
*
aux_out
)
;
private
:
}
;
class
Visitor
{
public
:
virtual
~
Visitor
(
)
=
default
;
virtual
Status
Visit
(
Fields
*
fields
)
=
0
;
virtual
Status
Bool
(
bool
default_value
bool
*
JXL_RESTRICT
value
)
=
0
;
virtual
Status
U32
(
U32Enc
uint32_t
uint32_t
*
)
=
0
;
Status
U32
(
const
U32Distr
d0
const
U32Distr
d1
const
U32Distr
d2
const
U32Distr
d3
const
uint32_t
default_value
uint32_t
*
JXL_RESTRICT
value
)
{
return
U32
(
U32Enc
(
d0
d1
d2
d3
)
default_value
value
)
;
}
template
<
typename
EnumT
>
Status
Enum
(
const
EnumT
default_value
EnumT
*
JXL_RESTRICT
value
)
{
uint32_t
u32
=
static_cast
<
uint32_t
>
(
*
value
)
;
JXL_RETURN_IF_ERROR
(
U32
(
Val
(
0
)
Val
(
1
)
BitsOffset
(
4
2
)
BitsOffset
(
6
18
)
static_cast
<
uint32_t
>
(
default_value
)
&
u32
)
)
;
*
value
=
static_cast
<
EnumT
>
(
u32
)
;
return
EnumValid
(
*
value
)
;
}
virtual
Status
Bits
(
size_t
bits
uint32_t
default_value
uint32_t
*
JXL_RESTRICT
value
)
=
0
;
virtual
Status
U64
(
uint64_t
default_value
uint64_t
*
JXL_RESTRICT
value
)
=
0
;
virtual
Status
F16
(
float
default_value
float
*
JXL_RESTRICT
value
)
=
0
;
virtual
Status
Conditional
(
bool
condition
)
{
return
condition
;
}
virtual
Status
AllDefault
(
const
Fields
&
bool
*
JXL_RESTRICT
all_default
)
{
JXL_RETURN_IF_ERROR
(
Bool
(
true
all_default
)
)
;
return
*
all_default
;
}
virtual
void
SetDefault
(
Fields
*
)
{
}
virtual
Status
VisitNested
(
Fields
*
fields
)
{
return
Visit
(
fields
)
;
}
virtual
bool
IsReading
(
)
const
{
return
false
;
}
virtual
Status
BeginExtensions
(
uint64_t
*
JXL_RESTRICT
extensions
)
=
0
;
virtual
Status
EndExtensions
(
)
=
0
;
}
;
}
#
endif
