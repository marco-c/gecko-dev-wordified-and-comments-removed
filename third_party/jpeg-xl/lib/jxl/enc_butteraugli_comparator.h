#
ifndef
LIB_JXL_ENC_BUTTERAUGLI_COMPARATOR_H_
#
define
LIB_JXL_ENC_BUTTERAUGLI_COMPARATOR_H_
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
butteraugli
/
butteraugli
.
h
"
#
include
"
lib
/
jxl
/
codec_in_out
.
h
"
#
include
"
lib
/
jxl
/
enc_comparator
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
#
include
"
lib
/
jxl
/
image_bundle
.
h
"
namespace
jxl
{
class
JxlButteraugliComparator
:
public
Comparator
{
public
:
explicit
JxlButteraugliComparator
(
const
ButteraugliParams
&
params
const
JxlCmsInterface
&
cms
)
;
Status
SetReferenceImage
(
const
ImageBundle
&
ref
)
override
;
Status
CompareWith
(
const
ImageBundle
&
actual
ImageF
*
diffmap
float
*
score
)
override
;
float
GoodQualityScore
(
)
const
override
;
float
BadQualityScore
(
)
const
override
;
private
:
ButteraugliParams
params_
;
JxlCmsInterface
cms_
;
std
:
:
unique_ptr
<
ButteraugliComparator
>
comparator_
;
size_t
xsize_
=
0
;
size_t
ysize_
=
0
;
}
;
float
ButteraugliDistance
(
const
ImageBundle
&
rgb0
const
ImageBundle
&
rgb1
const
ButteraugliParams
&
params
const
JxlCmsInterface
&
cms
ImageF
*
distmap
=
nullptr
ThreadPool
*
pool
=
nullptr
)
;
float
ButteraugliDistance
(
const
CodecInOut
&
rgb0
const
CodecInOut
&
rgb1
const
ButteraugliParams
&
params
const
JxlCmsInterface
&
cms
ImageF
*
distmap
=
nullptr
ThreadPool
*
pool
=
nullptr
)
;
}
#
endif
