#
include
<
jxl
/
memory_manager
.
h
>
#
include
"
benchmark
/
benchmark
.
h
"
#
include
"
lib
/
jxl
/
dec_external_image
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
#
include
"
lib
/
jxl
/
image_ops
.
h
"
#
include
"
tools
/
no_memory_manager
.
h
"
namespace
jxl
{
namespace
{
void
BM_DecExternalImage_ConvertImageRGBA
(
benchmark
:
:
State
&
state
)
{
JxlMemoryManager
*
memory_manager
=
jpegxl
:
:
tools
:
:
NoMemoryManager
(
)
;
const
size_t
kNumIter
=
5
;
size_t
xsize
=
state
.
range
(
)
;
size_t
ysize
=
state
.
range
(
)
;
size_t
num_channels
=
4
;
ImageMetadata
im
;
im
.
SetAlphaBits
(
8
)
;
ImageBundle
ib
(
memory_manager
&
im
)
;
JXL_ASSIGN_OR_DIE
(
Image3F
color
Image3F
:
:
Create
(
memory_manager
xsize
ysize
)
)
;
ZeroFillImage
(
&
color
)
;
ib
.
SetFromImage
(
std
:
:
move
(
color
)
ColorEncoding
:
:
SRGB
(
)
)
;
JXL_ASSIGN_OR_DIE
(
ImageF
alpha
ImageF
:
:
Create
(
memory_manager
xsize
ysize
)
)
;
ZeroFillImage
(
&
alpha
)
;
ib
.
SetAlpha
(
std
:
:
move
(
alpha
)
)
;
const
size_t
bytes_per_row
=
xsize
*
num_channels
;
std
:
:
vector
<
uint8_t
>
interleaved
(
bytes_per_row
*
ysize
)
;
for
(
auto
_
:
state
)
{
for
(
size_t
i
=
0
;
i
<
kNumIter
;
+
+
i
)
{
JXL_CHECK
(
ConvertToExternal
(
ib
8
false
num_channels
JXL_NATIVE_ENDIAN
bytes_per_row
nullptr
interleaved
.
data
(
)
interleaved
.
size
(
)
{
}
jxl
:
:
Orientation
:
:
kIdentity
)
)
;
}
}
state
.
SetItemsProcessed
(
kNumIter
*
state
.
iterations
(
)
*
xsize
*
ysize
)
;
state
.
SetBytesProcessed
(
kNumIter
*
state
.
iterations
(
)
*
interleaved
.
size
(
)
)
;
}
BENCHMARK
(
BM_DecExternalImage_ConvertImageRGBA
)
-
>
RangeMultiplier
(
2
)
-
>
Range
(
256
2048
)
;
}
}
