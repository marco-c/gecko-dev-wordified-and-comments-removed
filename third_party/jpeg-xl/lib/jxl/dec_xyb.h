#
ifndef
LIB_JXL_DEC_XYB_H_
#
define
LIB_JXL_DEC_XYB_H_
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
#
include
"
lib
/
jxl
/
base
/
data_parallel
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
color_encoding_internal
.
h
"
#
include
"
lib
/
jxl
/
dec_bit_reader
.
h
"
#
include
"
lib
/
jxl
/
image
.
h
"
#
include
"
lib
/
jxl
/
image_metadata
.
h
"
#
include
"
lib
/
jxl
/
opsin_params
.
h
"
namespace
jxl
{
struct
OpsinParams
{
float
inverse_opsin_matrix
[
9
*
4
]
;
float
opsin_biases
[
4
]
;
float
opsin_biases_cbrt
[
4
]
;
float
quant_biases
[
4
]
;
void
Init
(
float
intensity_target
)
;
}
;
struct
OutputEncodingInfo
{
ColorEncoding
color_encoding
;
float
inverse_gamma
;
OpsinParams
opsin_params
;
Status
Set
(
const
ImageMetadata
&
metadata
)
;
bool
all_default_opsin
=
true
;
bool
color_encoding_is_original
=
false
;
}
;
void
OpsinToLinearInplace
(
Image3F
*
JXL_RESTRICT
inout
ThreadPool
*
pool
const
OpsinParams
&
opsin_params
)
;
void
OpsinToLinear
(
const
Image3F
&
opsin
const
Rect
&
rect
ThreadPool
*
pool
Image3F
*
JXL_RESTRICT
linear
const
OpsinParams
&
opsin_params
)
;
void
YcbcrToRgb
(
const
Image3F
&
ycbcr
Image3F
*
rgb
const
Rect
&
rect
)
;
ImageF
UpsampleV2
(
const
ImageF
&
src
ThreadPool
*
pool
)
;
ImageF
UpsampleH2
(
const
ImageF
&
src
ThreadPool
*
pool
)
;
bool
HasFastXYBTosRGB8
(
)
;
void
FastXYBTosRGB8
(
const
Image3F
&
input
const
Rect
&
input_rect
const
Rect
&
output_buf_rect
const
ImageF
*
alpha
const
Rect
&
alpha_rect
bool
is_rgba
uint8_t
*
JXL_RESTRICT
output_buf
size_t
xsize
size_t
output_stride
)
;
}
#
endif
