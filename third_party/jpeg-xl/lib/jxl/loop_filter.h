#
ifndef
LIB_JXL_LOOP_FILTER_H_
#
define
LIB_JXL_LOOP_FILTER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
#
include
"
lib
/
jxl
/
base
/
status
.
h
"
#
include
"
lib
/
jxl
/
dec_bit_reader
.
h
"
#
include
"
lib
/
jxl
/
field_encodings
.
h
"
namespace
jxl
{
struct
LoopFilter
:
public
Fields
{
LoopFilter
(
)
;
JXL_FIELDS_NAME
(
LoopFilter
)
Status
VisitFields
(
Visitor
*
JXL_RESTRICT
visitor
)
override
;
size_t
Padding
(
)
const
{
static
const
size_t
padding_per_epf_iter
[
4
]
=
{
0
2
3
6
}
;
return
padding_per_epf_iter
[
epf_iters
]
+
(
gab
?
1
:
0
)
;
}
mutable
bool
all_default
;
bool
gab
;
bool
gab_custom
;
float
gab_x_weight1
;
float
gab_x_weight2
;
float
gab_y_weight1
;
float
gab_y_weight2
;
float
gab_b_weight1
;
float
gab_b_weight2
;
uint32_t
epf_iters
;
bool
epf_sharp_custom
;
enum
{
kEpfSharpEntries
=
8
}
;
float
epf_sharp_lut
[
kEpfSharpEntries
]
;
bool
epf_weight_custom
;
float
epf_channel_scale
[
3
]
;
float
epf_pass1_zeroflush
;
float
epf_pass2_zeroflush
;
bool
epf_sigma_custom
;
float
epf_quant_mul
;
float
epf_pass0_sigma_scale
;
float
epf_pass2_sigma_scale
;
float
epf_border_sad_mul
;
float
epf_sigma_for_modular
;
uint64_t
extensions
;
bool
nonserialized_is_modular
=
false
;
}
;
}
#
endif
