#
ifndef
LIB_JXL_ALPHA_H_
#
define
LIB_JXL_ALPHA_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
limits
>
#
include
"
lib
/
jxl
/
base
/
compiler_specific
.
h
"
namespace
jxl
{
static
constexpr
float
kSmallAlpha
=
1
.
f
/
(
1u
<
<
26u
)
;
struct
AlphaBlendingInputLayer
{
const
float
*
r
;
const
float
*
g
;
const
float
*
b
;
const
float
*
a
;
}
;
struct
AlphaBlendingOutput
{
float
*
r
;
float
*
g
;
float
*
b
;
float
*
a
;
}
;
void
PerformAlphaBlending
(
const
AlphaBlendingInputLayer
&
bg
const
AlphaBlendingInputLayer
&
fg
const
AlphaBlendingOutput
&
out
size_t
num_pixels
bool
alpha_is_premultiplied
bool
clamp
)
;
void
PerformAlphaBlending
(
const
float
*
bg
const
float
*
bga
const
float
*
fg
const
float
*
fga
float
*
out
size_t
num_pixels
bool
alpha_is_premultiplied
bool
clamp
)
;
void
PerformAlphaWeightedAdd
(
const
float
*
bg
const
float
*
fg
const
float
*
fga
float
*
out
size_t
num_pixels
bool
clamp
)
;
void
PerformMulBlending
(
const
float
*
bg
const
float
*
fg
float
*
out
size_t
num_pixels
bool
clamp
)
;
void
PremultiplyAlpha
(
float
*
JXL_RESTRICT
r
float
*
JXL_RESTRICT
g
float
*
JXL_RESTRICT
b
const
float
*
JXL_RESTRICT
a
size_t
num_pixels
)
;
void
UnpremultiplyAlpha
(
float
*
JXL_RESTRICT
r
float
*
JXL_RESTRICT
g
float
*
JXL_RESTRICT
b
const
float
*
JXL_RESTRICT
a
size_t
num_pixels
)
;
void
UnpremultiplyAlpha
(
float
*
JXL_RESTRICT
rgba
size_t
num_pixels
)
;
}
#
endif
