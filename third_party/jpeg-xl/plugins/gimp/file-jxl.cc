#
include
<
glib
/
gi18n
.
h
>
#
include
<
libgimp
/
gimp
.
h
>
#
include
<
libgimp
/
gimpui
.
h
>
#
include
<
string
.
h
>
#
include
<
string
>
#
include
"
plugins
/
gimp
/
file
-
jxl
-
load
.
h
"
#
include
"
plugins
/
gimp
/
file
-
jxl
-
save
.
h
"
namespace
jxl
{
namespace
{
constexpr
char
kLoadProc
[
]
=
"
file
-
jxl
-
load
"
;
constexpr
char
kSaveProc
[
]
=
"
file
-
jxl
-
save
"
;
void
Query
(
)
{
{
static
char
run_mode_name
[
]
=
"
run
-
mode
"
;
static
char
run_mode_description
[
]
=
"
Run
mode
"
;
static
char
filename_name
[
]
=
"
filename
"
;
static
char
filename_description
[
]
=
"
The
name
of
the
file
to
load
"
;
static
char
raw_filename_name
[
]
=
"
raw
-
filename
"
;
static
char
raw_filename_description
[
]
=
"
The
name
of
the
file
as
entered
by
the
user
"
;
static
const
GimpParamDef
load_args
[
]
=
{
{
GIMP_PDB_INT32
run_mode_name
run_mode_description
}
{
GIMP_PDB_STRING
filename_name
filename_description
}
{
GIMP_PDB_STRING
raw_filename_name
raw_filename_description
}
}
;
static
char
image_name
[
]
=
"
image
"
;
static
char
image_description
[
]
=
"
Loaded
image
"
;
static
const
GimpParamDef
load_return_vals
[
]
=
{
{
GIMP_PDB_IMAGE
image_name
image_description
}
}
;
gimp_install_procedure
(
kLoadProc
"
Loads
JPEG
XL
image
files
"
"
Loads
JPEG
XL
image
files
"
"
JPEG
XL
Project
"
"
JPEG
XL
Project
"
"
2019
"
"
JPEG
XL
image
"
nullptr
GIMP_PLUGIN
G_N_ELEMENTS
(
load_args
)
G_N_ELEMENTS
(
load_return_vals
)
load_args
load_return_vals
)
;
gimp_register_file_handler_mime
(
kLoadProc
"
image
/
jxl
"
)
;
gimp_register_magic_load_handler
(
kLoadProc
"
jxl
"
"
"
"
0
string
\
x0A
\
x04
\
x42
\
xD2
\
xD5
\
x4E
\
x12
0
"
"
string
\
xFF
\
x0A
0
string
\
xFF
\
x58
"
)
;
}
{
static
char
run_mode_name
[
]
=
"
run
-
mode
"
;
static
char
run_mode_description
[
]
=
"
Run
mode
"
;
static
char
image_name
[
]
=
"
image
"
;
static
char
image_description
[
]
=
"
Input
image
"
;
static
char
drawable_name
[
]
=
"
drawable
"
;
static
char
drawable_description
[
]
=
"
Drawable
to
save
"
;
static
char
filename_name
[
]
=
"
filename
"
;
static
char
filename_description
[
]
=
"
The
name
of
the
file
to
save
"
;
static
char
raw_filename_name
[
]
=
"
raw
-
filename
"
;
static
char
raw_filename_description
[
]
=
"
The
name
of
the
file
to
save
"
;
static
const
GimpParamDef
save_args
[
]
=
{
{
GIMP_PDB_INT32
run_mode_name
run_mode_description
}
{
GIMP_PDB_IMAGE
image_name
image_description
}
{
GIMP_PDB_DRAWABLE
drawable_name
drawable_description
}
{
GIMP_PDB_STRING
filename_name
filename_description
}
{
GIMP_PDB_STRING
raw_filename_name
raw_filename_description
}
}
;
gimp_install_procedure
(
kSaveProc
"
Saves
JPEG
XL
image
files
"
"
Saves
JPEG
XL
image
files
"
"
JPEG
XL
Project
"
"
JPEG
XL
Project
"
"
2019
"
"
JPEG
XL
image
"
"
RGB
*
GRAY
*
"
GIMP_PLUGIN
G_N_ELEMENTS
(
save_args
)
0
save_args
nullptr
)
;
gimp_register_file_handler_mime
(
kSaveProc
"
image
/
jxl
"
)
;
gimp_register_save_handler
(
kSaveProc
"
jxl
"
"
"
)
;
}
}
void
Run
(
const
gchar
*
const
name
const
gint
nparams
const
GimpParam
*
const
params
gint
*
const
nreturn_vals
GimpParam
*
*
const
return_vals
)
{
gegl_init
(
nullptr
nullptr
)
;
static
GimpParam
values
[
2
]
;
*
nreturn_vals
=
1
;
*
return_vals
=
values
;
values
[
0
]
.
type
=
GIMP_PDB_STATUS
;
values
[
0
]
.
data
.
d_status
=
GIMP_PDB_EXECUTION_ERROR
;
if
(
strcmp
(
name
kLoadProc
)
=
=
0
)
{
if
(
nparams
!
=
3
)
{
values
[
0
]
.
data
.
d_status
=
GIMP_PDB_CALLING_ERROR
;
return
;
}
const
gchar
*
const
filename
=
params
[
1
]
.
data
.
d_string
;
gint32
image_id
;
if
(
!
LoadJpegXlImage
(
filename
&
image_id
)
)
{
values
[
0
]
.
data
.
d_status
=
GIMP_PDB_EXECUTION_ERROR
;
return
;
}
*
nreturn_vals
=
2
;
values
[
0
]
.
data
.
d_status
=
GIMP_PDB_SUCCESS
;
values
[
1
]
.
type
=
GIMP_PDB_IMAGE
;
values
[
1
]
.
data
.
d_image
=
image_id
;
}
else
if
(
strcmp
(
name
kSaveProc
)
=
=
0
)
{
#
if
!
JPEGXL_ENABLE_GIMP_SAVING
*
nreturn_vals
=
2
;
values
[
0
]
.
data
.
d_status
=
GIMP_PDB_EXECUTION_ERROR
;
values
[
1
]
.
type
=
GIMP_PDB_STRING
;
static
gchar
compatibility_message
[
]
=
"
Saving
is
disabled
in
this
build
of
the
JPEG
XL
plugin
.
Rebuild
it
"
"
with
-
DJPEGXL_ENABLE_GIMP_SAVING
=
1
to
enable
the
functionality
but
"
"
be
aware
that
files
created
in
this
fashion
may
not
work
in
future
"
"
versions
of
the
decoder
.
"
;
values
[
1
]
.
data
.
d_string
=
compatibility_message
;
return
;
#
endif
if
(
nparams
!
=
5
)
{
values
[
0
]
.
data
.
d_status
=
GIMP_PDB_CALLING_ERROR
;
return
;
}
gint32
image_id
=
params
[
1
]
.
data
.
d_image
;
gint32
drawable_id
=
params
[
2
]
.
data
.
d_drawable
;
const
gchar
*
const
filename
=
params
[
3
]
.
data
.
d_string
;
const
gint32
orig_image_id
=
image_id
;
const
GimpExportReturn
export_result
=
gimp_export_image
(
&
image_id
&
drawable_id
"
JPEG
XL
"
static_cast
<
GimpExportCapabilities
>
(
GIMP_EXPORT_CAN_HANDLE_RGB
|
GIMP_EXPORT_CAN_HANDLE_ALPHA
)
)
;
switch
(
export_result
)
{
case
GIMP_EXPORT_CANCEL
:
values
[
0
]
.
data
.
d_status
=
GIMP_PDB_CANCEL
;
return
;
case
GIMP_EXPORT_IGNORE
:
break
;
case
GIMP_EXPORT_EXPORT
:
break
;
}
gimp_progress_init_printf
(
_
(
"
Saving
JPEG
XL
file
\
"
%
s
\
"
"
)
filename
)
;
if
(
!
SaveJpegXlImage
(
image_id
drawable_id
orig_image_id
filename
)
)
{
return
;
}
if
(
image_id
!
=
orig_image_id
)
{
gimp_image_delete
(
image_id
)
;
}
values
[
0
]
.
data
.
d_status
=
GIMP_PDB_SUCCESS
;
}
}
}
}
static
const
GimpPlugInInfo
PLUG_IN_INFO
=
{
nullptr
nullptr
&
jxl
:
:
Query
&
jxl
:
:
Run
}
;
MAIN
(
)
