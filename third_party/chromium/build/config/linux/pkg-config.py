import
json
import
os
import
subprocess
import
sys
import
re
from
optparse
import
OptionParser
def
SetConfigPath
(
options
)
:
  
"
"
"
Set
the
PKG_CONFIG_LIBDIR
environment
variable
.
  
This
takes
into
account
any
sysroot
and
architecture
specification
from
the
  
options
on
the
given
command
line
.
  
"
"
"
  
sysroot
=
options
.
sysroot
  
assert
sysroot
  
arch
=
options
.
arch
  
if
sysroot
and
not
arch
:
    
print
(
"
You
must
specify
an
architecture
via
-
a
if
using
a
sysroot
.
"
)
    
sys
.
exit
(
1
)
  
libdir
=
sysroot
+
'
/
usr
/
'
+
options
.
system_libdir
+
'
/
pkgconfig
'
  
libdir
+
=
'
:
'
+
sysroot
+
'
/
usr
/
share
/
pkgconfig
'
  
os
.
environ
[
'
PKG_CONFIG_LIBDIR
'
]
=
libdir
  
return
libdir
def
GetPkgConfigPrefixToStrip
(
options
args
)
:
  
"
"
"
Returns
the
prefix
from
pkg
-
config
where
packages
are
installed
.
  
This
returned
prefix
is
the
one
that
should
be
stripped
from
the
beginning
of
  
directory
names
to
take
into
account
sysroots
.
  
"
"
"
  
prefix
=
subprocess
.
check_output
(
[
options
.
pkg_config
      
"
-
-
variable
=
prefix
"
]
+
args
env
=
os
.
environ
)
.
decode
(
'
utf
-
8
'
)
  
if
prefix
[
:
4
]
=
=
'
/
usr
'
:
    
return
prefix
[
4
:
]
  
return
prefix
def
MatchesAnyRegexp
(
flag
list_of_regexps
)
:
  
"
"
"
Returns
true
if
the
first
argument
matches
any
regular
expression
in
the
  
given
list
.
"
"
"
  
for
regexp
in
list_of_regexps
:
    
if
regexp
.
search
(
flag
)
!
=
None
:
      
return
True
  
return
False
def
RewritePath
(
path
strip_prefix
sysroot
)
:
  
"
"
"
Rewrites
a
path
by
stripping
the
prefix
and
prepending
the
sysroot
.
"
"
"
  
if
os
.
path
.
isabs
(
path
)
and
not
path
.
startswith
(
sysroot
)
:
    
if
path
.
startswith
(
strip_prefix
)
:
      
path
=
path
[
len
(
strip_prefix
)
:
]
    
path
=
path
.
lstrip
(
'
/
'
)
    
return
os
.
path
.
join
(
sysroot
path
)
  
else
:
    
return
path
def
main
(
)
:
  
if
"
linux
"
not
in
sys
.
platform
:
    
print
(
"
[
[
]
[
]
[
]
[
]
[
]
]
"
)
    
return
0
  
parser
=
OptionParser
(
)
  
parser
.
add_option
(
'
-
d
'
'
-
-
debug
'
action
=
'
store_true
'
)
  
parser
.
add_option
(
'
-
p
'
action
=
'
store
'
dest
=
'
pkg_config
'
type
=
'
string
'
                    
default
=
'
pkg
-
config
'
)
  
parser
.
add_option
(
'
-
v
'
action
=
'
append
'
dest
=
'
strip_out
'
type
=
'
string
'
)
  
parser
.
add_option
(
'
-
s
'
action
=
'
store
'
dest
=
'
sysroot
'
type
=
'
string
'
)
  
parser
.
add_option
(
'
-
a
'
action
=
'
store
'
dest
=
'
arch
'
type
=
'
string
'
)
  
parser
.
add_option
(
'
-
-
system_libdir
'
action
=
'
store
'
dest
=
'
system_libdir
'
                    
type
=
'
string
'
default
=
'
lib
'
)
  
parser
.
add_option
(
'
-
-
atleast
-
version
'
action
=
'
store
'
                    
dest
=
'
atleast_version
'
type
=
'
string
'
)
  
parser
.
add_option
(
'
-
-
libdir
'
action
=
'
store_true
'
dest
=
'
libdir
'
)
  
parser
.
add_option
(
'
-
-
dridriverdir
'
action
=
'
store_true
'
dest
=
'
dridriverdir
'
)
  
parser
.
add_option
(
'
-
-
version
-
as
-
components
'
action
=
'
store_true
'
                    
dest
=
'
version_as_components
'
)
  
(
options
args
)
=
parser
.
parse_args
(
)
  
strip_out
=
[
]
  
if
options
.
strip_out
!
=
None
:
    
for
regexp
in
options
.
strip_out
:
      
strip_out
.
append
(
re
.
compile
(
regexp
)
)
  
if
options
.
sysroot
:
    
libdir
=
SetConfigPath
(
options
)
    
if
options
.
debug
:
      
sys
.
stderr
.
write
(
'
PKG_CONFIG_LIBDIR
=
%
s
\
n
'
%
libdir
)
    
prefix
=
GetPkgConfigPrefixToStrip
(
options
args
)
  
else
:
    
prefix
=
'
'
  
if
options
.
atleast_version
:
    
if
not
subprocess
.
call
(
[
options
.
pkg_config
                            
"
-
-
atleast
-
version
=
"
+
options
.
atleast_version
]
+
                            
args
)
:
      
print
(
"
true
"
)
    
else
:
      
print
(
"
false
"
)
    
return
0
  
if
options
.
version_as_components
:
    
cmd
=
[
options
.
pkg_config
"
-
-
modversion
"
]
+
args
    
try
:
      
version_string
=
subprocess
.
check_output
(
cmd
)
.
decode
(
'
utf
-
8
'
)
    
except
:
      
sys
.
stderr
.
write
(
'
Error
from
pkg
-
config
.
\
n
'
)
      
return
1
    
print
(
json
.
dumps
(
list
(
map
(
int
version_string
.
strip
(
)
.
split
(
"
.
"
)
)
)
)
)
    
return
0
  
if
options
.
libdir
:
    
cmd
=
[
options
.
pkg_config
"
-
-
variable
=
libdir
"
]
+
args
    
if
options
.
debug
:
      
sys
.
stderr
.
write
(
'
Running
:
%
s
\
n
'
%
cmd
)
    
try
:
      
libdir
=
subprocess
.
check_output
(
cmd
)
.
decode
(
'
utf
-
8
'
)
    
except
:
      
print
(
"
Error
from
pkg
-
config
.
"
)
      
return
1
    
sys
.
stdout
.
write
(
libdir
.
strip
(
)
)
    
return
0
  
if
options
.
dridriverdir
:
    
cmd
=
[
options
.
pkg_config
"
-
-
variable
=
dridriverdir
"
]
+
args
    
if
options
.
debug
:
      
sys
.
stderr
.
write
(
'
Running
:
%
s
\
n
'
%
cmd
)
    
try
:
      
dridriverdir
=
subprocess
.
check_output
(
cmd
)
.
decode
(
'
utf
-
8
'
)
    
except
:
      
print
(
"
Error
from
pkg
-
config
.
"
)
      
return
1
    
sys
.
stdout
.
write
(
dridriverdir
.
strip
(
)
)
    
return
  
cmd
=
[
options
.
pkg_config
"
-
-
cflags
"
"
-
-
libs
"
]
+
args
  
if
options
.
debug
:
    
sys
.
stderr
.
write
(
'
Running
:
%
s
\
n
'
%
'
'
.
join
(
cmd
)
)
  
try
:
    
flag_string
=
subprocess
.
check_output
(
cmd
)
.
decode
(
'
utf
-
8
'
)
  
except
:
    
sys
.
stderr
.
write
(
'
Could
not
run
pkg
-
config
.
\
n
'
)
    
return
1
  
all_flags
=
flag_string
.
strip
(
)
.
split
(
'
'
)
  
sysroot
=
options
.
sysroot
  
if
not
sysroot
:
    
sysroot
=
'
'
  
includes
=
[
]
  
cflags
=
[
]
  
libs
=
[
]
  
lib_dirs
=
[
]
  
for
flag
in
all_flags
[
:
]
:
    
if
len
(
flag
)
=
=
0
or
MatchesAnyRegexp
(
flag
strip_out
)
:
      
continue
;
    
if
flag
[
:
2
]
=
=
'
-
l
'
:
      
libs
.
append
(
RewritePath
(
flag
[
2
:
]
prefix
sysroot
)
)
    
elif
flag
[
:
2
]
=
=
'
-
L
'
:
      
lib_dirs
.
append
(
RewritePath
(
flag
[
2
:
]
prefix
sysroot
)
)
    
elif
flag
[
:
2
]
=
=
'
-
I
'
:
      
includes
.
append
(
RewritePath
(
flag
[
2
:
]
prefix
sysroot
)
)
    
elif
flag
[
:
3
]
=
=
'
-
Wl
'
:
      
pass
    
elif
flag
=
=
'
-
pthread
'
:
      
pass
    
else
:
      
cflags
.
append
(
flag
)
  
print
(
json
.
dumps
(
[
includes
cflags
libs
lib_dirs
]
)
)
  
return
0
if
__name__
=
=
'
__main__
'
:
  
sys
.
exit
(
main
(
)
)
