"
"
"
Removes
bundled
libraries
to
make
sure
they
are
not
used
.
See
README
for
more
details
.
"
"
"
import
optparse
import
os
.
path
import
sys
def
DoMain
(
argv
)
:
  
my_dirname
=
os
.
path
.
abspath
(
os
.
path
.
dirname
(
__file__
)
)
  
source_tree_root
=
os
.
path
.
abspath
(
    
os
.
path
.
join
(
my_dirname
'
.
.
'
'
.
.
'
'
.
.
'
)
)
  
if
os
.
path
.
join
(
source_tree_root
'
build
'
'
linux
'
'
unbundle
'
)
!
=
my_dirname
:
    
print
(
'
Sanity
check
failed
:
please
run
this
script
from
'
          
'
build
/
linux
/
unbundle
directory
.
'
)
    
return
1
  
parser
=
optparse
.
OptionParser
(
)
  
parser
.
add_option
(
'
-
-
do
-
remove
'
action
=
'
store_true
'
)
  
options
args
=
parser
.
parse_args
(
argv
)
  
exclusion_used
=
{
}
  
for
exclusion
in
args
:
    
exclusion_used
[
exclusion
]
=
False
  
for
root
dirs
files
in
os
.
walk
(
source_tree_root
topdown
=
False
)
:
    
root_relpath
=
os
.
path
.
relpath
(
root
source_tree_root
)
    
if
'
third_party
'
not
in
root_relpath
.
split
(
os
.
sep
)
:
      
continue
    
for
f
in
files
:
      
path
=
os
.
path
.
join
(
root
f
)
      
relpath
=
os
.
path
.
relpath
(
path
source_tree_root
)
      
excluded
=
False
      
for
exclusion
in
args
:
        
split
=
relpath
.
rsplit
(
os
.
sep
+
'
third_party
'
+
os
.
sep
1
)
        
if
len
(
split
)
>
1
and
split
[
0
]
.
startswith
(
exclusion
)
:
          
continue
        
if
relpath
.
startswith
(
exclusion
)
:
          
exclusion_used
[
exclusion
]
=
True
          
excluded
=
True
      
if
excluded
:
        
continue
      
if
f
.
endswith
(
'
.
gyp
'
)
or
f
.
endswith
(
'
.
gypi
'
)
:
        
continue
      
if
f
.
endswith
(
'
.
gn
'
)
or
f
.
endswith
(
'
.
gni
'
)
:
        
continue
      
if
f
.
endswith
(
'
.
isolate
'
)
:
        
continue
      
if
options
.
do_remove
:
        
os
.
remove
(
path
)
      
else
:
        
print
(
path
)
  
exit_code
=
0
  
for
exclusion
used
in
exclusion_used
.
items
(
)
:
    
if
not
used
:
      
print
(
'
%
s
does
not
exist
'
%
exclusion
)
      
exit_code
=
1
  
if
not
options
.
do_remove
:
    
print
(
'
To
actually
remove
files
printed
above
please
pass
'
          
'
-
-
do
-
remove
flag
.
'
)
  
return
exit_code
if
__name__
=
=
'
__main__
'
:
  
sys
.
exit
(
DoMain
(
sys
.
argv
[
1
:
]
)
)
