"
"
"
Small
utility
function
to
find
depot_tools
and
add
it
to
the
python
path
.
Will
throw
an
ImportError
exception
if
depot_tools
can
'
t
be
found
since
it
imports
breakpad
.
This
can
also
be
used
as
a
standalone
script
to
print
out
the
depot_tools
directory
location
.
"
"
"
import
os
import
sys
SRC
=
os
.
path
.
abspath
(
os
.
path
.
join
(
os
.
path
.
dirname
(
__file__
)
os
.
pardir
)
)
def
IsRealDepotTools
(
path
)
:
  
expanded_path
=
os
.
path
.
expanduser
(
path
)
  
return
os
.
path
.
isfile
(
os
.
path
.
join
(
expanded_path
'
gclient
.
py
'
)
)
def
add_depot_tools_to_path
(
)
:
  
"
"
"
Search
for
depot_tools
and
add
it
to
sys
.
path
.
"
"
"
  
deps_depot_tools
=
os
.
path
.
join
(
SRC
'
third_party
'
'
depot_tools
'
)
  
if
IsRealDepotTools
(
deps_depot_tools
)
:
    
sys
.
path
.
insert
(
0
deps_depot_tools
)
    
return
deps_depot_tools
  
for
i
in
sys
.
path
:
    
if
i
.
rstrip
(
os
.
sep
)
.
endswith
(
'
depot_tools
'
)
and
IsRealDepotTools
(
i
)
:
      
return
i
  
for
i
in
os
.
environ
[
'
PATH
'
]
.
split
(
os
.
pathsep
)
:
    
if
IsRealDepotTools
(
i
)
:
      
sys
.
path
.
append
(
i
.
rstrip
(
os
.
sep
)
)
      
return
i
  
root_dir
=
os
.
path
.
dirname
(
os
.
path
.
abspath
(
__file__
)
)
  
previous_dir
=
os
.
path
.
abspath
(
__file__
)
  
while
root_dir
and
root_dir
!
=
previous_dir
:
    
i
=
os
.
path
.
join
(
root_dir
'
depot_tools
'
)
    
if
IsRealDepotTools
(
i
)
:
      
sys
.
path
.
append
(
i
)
      
return
i
    
previous_dir
=
root_dir
    
root_dir
=
os
.
path
.
dirname
(
root_dir
)
  
print
(
'
Failed
to
find
depot_tools
'
file
=
sys
.
stderr
)
  
return
None
DEPOT_TOOLS_PATH
=
add_depot_tools_to_path
(
)
import
breakpad
def
main
(
)
:
  
if
DEPOT_TOOLS_PATH
is
None
:
    
return
1
  
print
(
DEPOT_TOOLS_PATH
)
  
return
0
if
__name__
=
=
'
__main__
'
:
  
sys
.
exit
(
main
(
)
)
