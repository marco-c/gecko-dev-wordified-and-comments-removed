import
contextlib
import
json
import
os
import
pathlib
import
socket
import
platform
import
sys
import
struct
sys
.
path
.
insert
(
1
os
.
path
.
join
(
os
.
path
.
dirname
(
__file__
)
'
.
.
'
)
)
from
util
import
build_utils
SOCKET_ADDRESS
=
'
\
0chromium_build_server_socket
'
BUILD_SERVER_ENV_VARIABLE
=
'
INVOKED_BY_BUILD_SERVER
'
ADD_TASK
=
'
add_task
'
QUERY_BUILD
=
'
query_build
'
POLL_HEARTBEAT
=
'
poll_heartbeat
'
REGISTER_BUILDER
=
'
register_builder
'
CANCEL_BUILD
=
'
cancel_build
'
SERVER_SCRIPT
=
pathlib
.
Path
(
    
build_utils
.
DIR_SOURCE_ROOT
)
/
'
build
'
/
'
android
'
/
'
fast_local_dev_server
.
py
'
def
MaybeRunCommand
(
name
argv
stamp_file
use_build_server
=
False
)
:
  
"
"
"
Returns
True
if
the
command
was
successfully
sent
to
the
build
server
.
"
"
"
  
if
platform
.
system
(
)
=
=
"
Darwin
"
:
    
return
False
  
if
BUILD_SERVER_ENV_VARIABLE
in
os
.
environ
:
    
return
False
  
if
not
use_build_server
:
    
return
False
  
autoninja_tty
=
os
.
environ
.
get
(
'
AUTONINJA_STDOUT_NAME
'
)
  
autoninja_build_id
=
os
.
environ
.
get
(
'
AUTONINJA_BUILD_ID
'
)
  
with
contextlib
.
closing
(
socket
.
socket
(
socket
.
AF_UNIX
)
)
as
sock
:
    
try
:
      
sock
.
connect
(
SOCKET_ADDRESS
)
    
except
socket
.
error
as
e
:
      
if
e
.
errno
=
=
111
:
        
raise
RuntimeError
(
            
'
\
n
\
nBuild
server
is
not
running
and
'
            
'
android_static_analysis
=
"
build_server
"
is
set
.
\
n
\
n
'
)
from
None
      
raise
e
    
SendMessage
(
        
sock
{
            
'
name
'
:
name
            
'
message_type
'
:
ADD_TASK
            
'
cmd
'
:
argv
            
'
cwd
'
:
os
.
getcwd
(
)
            
'
tty
'
:
autoninja_tty
            
'
build_id
'
:
autoninja_build_id
            
'
stamp_file
'
:
stamp_file
        
}
)
  
build_utils
.
Touch
(
stamp_file
)
  
return
True
def
MaybeTouch
(
stamp_file
)
:
  
"
"
"
Touch
|
stamp_file
|
if
we
are
not
running
under
the
build_server
.
"
"
"
  
if
BUILD_SERVER_ENV_VARIABLE
in
os
.
environ
:
    
return
  
build_utils
.
Touch
(
stamp_file
)
def
SendMessage
(
sock
:
socket
.
socket
message
:
dict
)
:
  
data
=
json
.
dumps
(
message
)
.
encode
(
'
utf
-
8
'
)
  
size_prefix
=
struct
.
pack
(
'
!
i
'
len
(
data
)
)
  
sock
.
sendall
(
size_prefix
+
data
)
def
ReceiveMessage
(
sock
:
socket
.
socket
)
-
>
dict
:
  
size_prefix
=
b
'
'
  
remaining
=
4
  
while
remaining
>
0
:
    
data
=
sock
.
recv
(
remaining
)
    
if
not
data
:
      
return
None
    
remaining
-
=
len
(
data
)
    
size_prefix
+
=
data
  
remaining
=
struct
.
unpack
(
'
!
i
'
size_prefix
)
  
received
=
[
]
  
while
remaining
>
0
:
    
data
=
sock
.
recv
(
remaining
)
    
if
not
data
:
      
break
    
received
.
append
(
data
)
    
remaining
-
=
len
(
data
)
  
if
received
:
    
return
json
.
loads
(
b
'
'
.
join
(
received
)
)
  
return
None
