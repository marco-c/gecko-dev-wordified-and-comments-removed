"
"
"
Runs
R8
'
s
TraceReferences
tool
to
ensure
DEX
files
are
valid
.
"
"
"
import
argparse
import
json
import
logging
import
os
import
pathlib
import
re
import
sys
from
util
import
build_utils
from
util
import
server_utils
import
action_helpers
_DUMP_DIR_NAME
=
'
r8inputs_tracerefs
'
_SUPPRESSION_PATTERN
=
'
|
'
.
join
(
[
    
r
'
Warning
:
Tracereferences
found
'
    
r
'
dalvik
\
.
system
'
    
r
'
libcore
\
.
io
'
    
r
'
sun
\
.
misc
\
.
Unsafe
'
    
r
'
com
\
.
google
\
.
common
\
.
flogger
\
.
backend
\
.
google
\
.
GooglePlatform
'
    
r
'
com
\
.
google
\
.
common
\
.
flogger
\
.
backend
\
.
system
\
.
DefaultPlatform
'
    
r
'
java
\
.
lang
\
.
instrument
\
.
ClassFileTransformer
'
    
r
'
java
\
.
lang
\
.
instrument
\
.
IllegalClassFormatException
'
    
r
'
java
\
.
lang
\
.
instrument
\
.
Instrumentation
'
    
r
'
java
\
.
lang
\
.
management
\
.
ManagementFactory
'
    
r
'
javax
\
.
management
\
.
MBeanServer
'
    
r
'
javax
\
.
management
\
.
ObjectInstance
'
    
r
'
javax
\
.
management
\
.
ObjectName
'
    
r
'
javax
\
.
management
\
.
StandardMBean
'
    
r
'
kotlin
\
.
KotlinVersion
'
    
r
'
ResultIgnorabilityUnspecified
'
    
r
'
kotlin
\
.
DeprecationLevel
'
    
r
'
Missing
method
\
S
+
android
\
.
'
    
r
'
Missing
class
android
\
.
'
    
r
'
Missing
class
com
.
google
.
ar
.
imp
.
core
\
.
'
]
)
def
_RunTraceReferences
(
error_title
r8jar
libs
dex_files
options
)
:
  
cmd
=
build_utils
.
JavaCmd
(
xmx
=
'
2G
'
)
  
if
options
.
dump_inputs
:
    
cmd
+
=
[
f
'
-
Dcom
.
android
.
tools
.
r8
.
dumpinputtodirectory
=
{
_DUMP_DIR_NAME
}
'
]
  
cmd
+
=
[
      
'
-
cp
'
r8jar
'
com
.
android
.
tools
.
r8
.
tracereferences
.
TraceReferences
'
      
'
-
-
map
-
diagnostics
:
MissingDefinitionsDiagnostic
'
'
error
'
'
warning
'
      
'
-
-
check
'
  
]
  
for
path
in
libs
:
    
cmd
+
=
[
'
-
-
lib
'
path
]
  
for
path
in
dex_files
:
    
cmd
+
=
[
'
-
-
source
'
path
]
  
failed_holder
=
[
False
]
  
def
stderr_filter
(
stderr
)
:
    
had_unfiltered_items
=
'
'
in
stderr
    
stderr
=
build_utils
.
FilterLines
(
stderr
_SUPPRESSION_PATTERN
)
    
if
stderr
:
      
if
'
Missing
'
in
stderr
:
        
failed_holder
[
0
]
=
True
        
stderr
=
'
TraceReferences
failed
:
'
+
error_title
+
"
"
"
Tip
:
Build
with
:
        
is_java_debug
=
false
        
treat_warnings_as_errors
=
false
        
enable_proguard_obfuscation
=
false
     
and
then
use
dexdump
to
see
which
class
(
s
)
reference
them
.
     
E
.
g
.
:
       
third_party
/
android_sdk
/
public
/
build
-
tools
/
*
/
dexdump
-
d
\
out
/
Release
/
apks
/
YourApk
.
apk
>
dex
.
txt
"
"
"
+
stderr
      
elif
had_unfiltered_items
:
        
stderr
=
'
'
    
return
stderr
  
try
:
    
if
options
.
verbose
:
      
stderr_filter
=
None
    
build_utils
.
CheckOutput
(
cmd
                            
print_stdout
=
True
                            
stderr_filter
=
stderr_filter
                            
fail_on_output
=
options
.
warnings_as_errors
)
  
except
build_utils
.
CalledProcessError
as
e
:
    
sys
.
stderr
.
write
(
e
.
output
)
    
sys
.
exit
(
1
)
  
return
failed_holder
[
0
]
def
main
(
)
:
  
build_utils
.
InitLogging
(
'
TRACEREFS_DEBUG
'
)
  
parser
=
argparse
.
ArgumentParser
(
)
  
parser
.
add_argument
(
'
-
-
tracerefs
-
json
'
)
  
parser
.
add_argument
(
'
-
-
use
-
build
-
server
'
                      
action
=
'
store_true
'
                      
help
=
'
Always
use
the
build
server
.
'
)
  
parser
.
add_argument
(
'
-
-
stamp
'
)
  
parser
.
add_argument
(
'
-
-
depfile
'
)
  
parser
.
add_argument
(
'
-
-
warnings
-
as
-
errors
'
                      
action
=
'
store_true
'
                      
help
=
'
Treat
all
warnings
as
errors
.
'
)
  
parser
.
add_argument
(
'
-
-
dump
-
inputs
'
                      
action
=
'
store_true
'
                      
help
=
'
Use
when
filing
R8
bugs
to
capture
inputs
.
'
                      
'
Stores
inputs
to
r8inputs
.
zip
'
)
  
parser
.
add_argument
(
'
-
-
verbose
'
                      
action
=
'
store_true
'
                      
help
=
'
Do
not
filter
output
'
)
  
args
=
parser
.
parse_args
(
)
  
with
open
(
args
.
tracerefs_json
)
as
f
:
    
spec
=
json
.
load
(
f
)
  
r8jar
=
spec
[
'
r8jar
'
]
  
libs
=
spec
[
'
libs
'
]
  
depfile_deps
=
[
]
  
depfile_deps
+
=
libs
  
for
job
in
spec
[
'
jobs
'
]
:
    
depfile_deps
+
=
job
[
'
jars
'
]
  
action_helpers
.
write_depfile
(
args
.
depfile
args
.
stamp
depfile_deps
)
  
if
server_utils
.
MaybeRunCommand
(
name
=
args
.
stamp
                                  
argv
=
sys
.
argv
                                  
stamp_file
=
args
.
stamp
                                  
use_build_server
=
args
.
use_build_server
)
:
    
return
  
if
args
.
dump_inputs
:
    
args
.
warnings_as_errors
=
False
    
dump_dir_name
=
_DUMP_DIR_NAME
    
dump_dir_path
=
pathlib
.
Path
(
dump_dir_name
)
    
if
dump_dir_path
.
exists
(
)
:
      
shutil
.
rmtree
(
dump_dir_path
)
    
dump_dir_path
.
mkdir
(
)
  
logging
.
debug
(
'
Running
TraceReferences
'
)
  
error_title
=
'
DEX
contains
references
to
non
-
existent
symbols
after
R8
.
'
  
for
job
in
spec
[
'
jobs
'
]
:
    
name
=
job
[
'
name
'
]
    
dex_files
=
job
[
'
jars
'
]
    
if
_RunTraceReferences
(
error_title
r8jar
libs
dex_files
args
)
:
      
break
    
error_title
=
(
f
'
DEX
within
module
"
{
name
}
"
contains
reference
(
s
)
to
'
                   
'
symbols
within
child
splits
'
)
  
logging
.
info
(
'
Checks
completed
.
'
)
  
server_utils
.
MaybeTouch
(
args
.
stamp
)
if
__name__
=
=
'
__main__
'
:
  
main
(
)
