"
"
"
Creates
size
-
info
/
*
.
info
files
used
by
SuperSize
.
"
"
"
import
argparse
import
collections
import
os
import
re
import
sys
import
zipfile
from
util
import
build_utils
from
util
import
jar_info_utils
import
action_helpers
_AAR_VERSION_PATTERN
=
re
.
compile
(
r
'
/
[
^
/
]
*
?
(
\
.
aar
/
|
\
.
jar
/
)
'
)
def
_RemoveDuplicatesFromList
(
source_list
)
:
  
return
collections
.
OrderedDict
.
fromkeys
(
source_list
)
.
keys
(
)
def
_TransformAarPaths
(
path
)
:
  
if
'
android_deps
'
not
in
path
:
    
return
path
  
return
_AAR_VERSION_PATTERN
.
sub
(
r
'
\
1
'
path
)
def
_MergeResInfoFiles
(
res_info_path
info_paths
)
:
  
with
action_helpers
.
atomic_output
(
res_info_path
'
w
+
'
)
as
dst
:
    
for
p
in
info_paths
:
      
with
open
(
p
)
as
src
:
        
dst
.
writelines
(
_TransformAarPaths
(
l
)
for
l
in
src
)
def
_PakInfoPathsForAssets
(
assets
)
:
  
return
[
f
.
split
(
'
:
'
)
[
0
]
+
'
.
info
'
for
f
in
assets
if
'
.
pak
'
in
f
]
def
_MergePakInfoFiles
(
merged_path
pak_infos
)
:
  
info_lines
=
set
(
)
  
for
pak_info_path
in
pak_infos
:
    
with
open
(
pak_info_path
'
r
'
)
as
src_info_file
:
      
info_lines
.
update
(
_TransformAarPaths
(
x
)
for
x
in
src_info_file
)
  
with
action_helpers
.
atomic_output
(
merged_path
                                    
only_if_changed
=
False
                                    
mode
=
'
w
+
'
)
as
f
:
    
f
.
writelines
(
sorted
(
info_lines
)
)
def
_FullJavaNameFromClassFilePath
(
path
)
:
  
if
not
path
.
endswith
(
'
.
class
'
)
:
    
return
'
'
  
path
=
os
.
path
.
splitext
(
path
)
[
0
]
  
parts
=
[
]
  
while
path
:
    
head
tail
=
os
.
path
.
split
(
path
)
    
path
=
head
    
parts
.
append
(
tail
)
  
parts
.
reverse
(
)
  
return
'
.
'
.
join
(
parts
)
def
_MergeJarInfoFiles
(
output
inputs
)
:
  
"
"
"
Merge
several
.
jar
.
info
files
to
generate
an
.
apk
.
jar
.
info
.
  
Args
:
    
output
:
output
file
path
.
    
inputs
:
List
of
.
jar
.
info
or
.
jar
files
.
  
"
"
"
  
info_data
=
dict
(
)
  
for
path
in
inputs
:
    
if
path
.
endswith
(
'
.
info
'
)
:
      
info_data
.
update
(
jar_info_utils
.
ParseJarInfoFile
(
path
)
)
    
else
:
      
attributed_path
=
path
      
if
not
path
.
startswith
(
'
.
.
'
)
:
        
parent_path
=
os
.
path
.
dirname
(
path
)
        
if
os
.
path
.
basename
(
parent_path
)
=
=
'
libs
'
:
          
parent_path
=
os
.
path
.
dirname
(
parent_path
)
        
aar_source_info_path
=
os
.
path
.
join
(
parent_path
'
source
.
info
'
)
        
if
os
.
path
.
exists
(
aar_source_info_path
)
:
          
attributed_path
=
jar_info_utils
.
ReadAarSourceInfo
(
              
aar_source_info_path
)
      
with
zipfile
.
ZipFile
(
path
)
as
zip_info
:
        
for
name
in
zip_info
.
namelist
(
)
:
          
fully_qualified_name
=
_FullJavaNameFromClassFilePath
(
name
)
          
if
fully_qualified_name
:
            
info_data
[
fully_qualified_name
]
=
_TransformAarPaths
(
'
{
}
/
{
}
'
.
format
(
                
attributed_path
name
)
)
  
with
action_helpers
.
atomic_output
(
output
only_if_changed
=
False
)
as
f
:
    
jar_info_utils
.
WriteJarInfoFile
(
f
info_data
)
def
_FindJarInputs
(
jar_paths
)
:
  
ret
=
[
]
  
for
jar_path
in
jar_paths
:
    
jar_info_path
=
jar_path
+
'
.
info
'
    
if
os
.
path
.
exists
(
jar_info_path
)
:
      
ret
.
append
(
jar_info_path
)
    
else
:
      
ret
.
append
(
jar_path
)
  
return
ret
def
main
(
args
)
:
  
args
=
build_utils
.
ExpandFileArgs
(
args
)
  
parser
=
argparse
.
ArgumentParser
(
description
=
__doc__
)
  
action_helpers
.
add_depfile_arg
(
parser
)
  
parser
.
add_argument
(
      
'
-
-
jar
-
info
-
path
'
required
=
True
help
=
'
Output
.
jar
.
info
file
'
)
  
parser
.
add_argument
(
      
'
-
-
pak
-
info
-
path
'
required
=
True
help
=
'
Output
.
pak
.
info
file
'
)
  
parser
.
add_argument
(
      
'
-
-
res
-
info
-
path
'
required
=
True
help
=
'
Output
.
res
.
info
file
'
)
  
parser
.
add_argument
(
      
'
-
-
jar
-
files
'
      
required
=
True
      
action
=
'
append
'
      
help
=
'
GN
-
list
of
.
jar
file
paths
'
)
  
parser
.
add_argument
(
      
'
-
-
assets
'
      
required
=
True
      
action
=
'
append
'
      
help
=
'
GN
-
list
of
files
to
add
as
assets
in
the
form
'
      
'
"
srcPath
:
zipPath
"
where
"
:
zipPath
"
is
optional
.
'
)
  
parser
.
add_argument
(
      
'
-
-
uncompressed
-
assets
'
      
required
=
True
      
action
=
'
append
'
      
help
=
'
Same
as
-
-
assets
except
disables
compression
.
'
)
  
parser
.
add_argument
(
      
'
-
-
in
-
res
-
info
-
path
'
      
required
=
True
      
action
=
'
append
'
      
help
=
'
Paths
to
.
ap_
.
info
files
'
)
  
options
=
parser
.
parse_args
(
args
)
  
options
.
jar_files
=
action_helpers
.
parse_gn_list
(
options
.
jar_files
)
  
options
.
assets
=
action_helpers
.
parse_gn_list
(
options
.
assets
)
  
options
.
uncompressed_assets
=
action_helpers
.
parse_gn_list
(
      
options
.
uncompressed_assets
)
  
jar_inputs
=
_FindJarInputs
(
_RemoveDuplicatesFromList
(
options
.
jar_files
)
)
  
pak_inputs
=
_PakInfoPathsForAssets
(
options
.
assets
+
                                      
options
.
uncompressed_assets
)
  
res_inputs
=
options
.
in_res_info_path
  
_MergeJarInfoFiles
(
options
.
jar_info_path
jar_inputs
)
  
_MergePakInfoFiles
(
options
.
pak_info_path
pak_inputs
)
  
_MergeResInfoFiles
(
options
.
res_info_path
res_inputs
)
  
all_inputs
=
jar_inputs
+
pak_inputs
+
res_inputs
  
action_helpers
.
write_depfile
(
options
.
depfile
                               
options
.
jar_info_path
                               
inputs
=
all_inputs
)
if
__name__
=
=
'
__main__
'
:
  
main
(
sys
.
argv
[
1
:
]
)
