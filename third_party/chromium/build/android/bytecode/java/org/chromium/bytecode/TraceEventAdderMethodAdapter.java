package
org
.
chromium
.
bytecode
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
ASM7
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
ATHROW
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
INVOKESTATIC
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
IRETURN
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
RETURN
;
import
static
org
.
chromium
.
bytecode
.
TypeUtils
.
STRING
;
import
static
org
.
chromium
.
bytecode
.
TypeUtils
.
VOID
;
import
org
.
objectweb
.
asm
.
MethodVisitor
;
class
TraceEventAdderMethodAdapter
extends
MethodVisitor
{
private
static
final
String
TRACE_EVENT_DESCRIPTOR
=
"
org
/
chromium
/
base
/
TraceEvent
"
;
private
static
final
String
TRACE_EVENT_SIGNATURE
=
TypeUtils
.
getMethodDescriptor
(
VOID
STRING
)
;
private
final
String
mEventName
;
public
TraceEventAdderMethodAdapter
(
MethodVisitor
methodVisitor
String
shortClassName
String
methodName
)
{
super
(
ASM7
methodVisitor
)
;
mEventName
=
shortClassName
+
"
.
"
+
methodName
;
}
Override
public
void
visitCode
(
)
{
super
.
visitCode
(
)
;
mv
.
visitLdcInsn
(
mEventName
)
;
mv
.
visitMethodInsn
(
INVOKESTATIC
TRACE_EVENT_DESCRIPTOR
"
begin
"
TRACE_EVENT_SIGNATURE
false
)
;
}
Override
public
void
visitInsn
(
int
opcode
)
{
if
(
(
opcode
>
=
IRETURN
&
&
opcode
<
=
RETURN
)
|
|
opcode
=
=
ATHROW
)
{
mv
.
visitLdcInsn
(
mEventName
)
;
mv
.
visitMethodInsn
(
INVOKESTATIC
TRACE_EVENT_DESCRIPTOR
"
end
"
TRACE_EVENT_SIGNATURE
false
)
;
}
mv
.
visitInsn
(
opcode
)
;
}
}
