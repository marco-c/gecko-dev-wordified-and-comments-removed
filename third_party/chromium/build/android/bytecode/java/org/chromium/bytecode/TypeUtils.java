package
org
.
chromium
.
bytecode
;
import
org
.
objectweb
.
asm
.
Type
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
class
TypeUtils
{
static
final
String
ASSERTION_ERROR
=
"
java
/
lang
/
AssertionError
"
;
static
final
String
ASSET_MANAGER
=
"
android
/
content
/
res
/
AssetManager
"
;
static
final
String
BUILD_HOOKS
=
"
org
/
chromium
/
build
/
BuildHooks
"
;
static
final
String
BUILD_HOOKS_ANDROID
=
"
org
/
chromium
/
build
/
BuildHooksAndroid
"
;
static
final
String
CONFIGURATION
=
"
android
/
content
/
res
/
Configuration
"
;
static
final
String
CONTEXT
=
"
android
/
content
/
Context
"
;
static
final
String
CONTEXT_WRAPPER
=
"
android
/
content
/
ContextWrapper
"
;
static
final
String
RESOURCES
=
"
android
/
content
/
res
/
Resources
"
;
static
final
String
STRING
=
"
java
/
lang
/
String
"
;
static
final
String
THEME
=
"
android
/
content
/
res
/
Resources
Theme
"
;
static
final
String
BOOLEAN
=
"
Z
"
;
static
final
String
INT
=
"
I
"
;
static
final
String
VOID
=
"
V
"
;
private
static
final
Map
<
String
Type
>
PRIMITIVE_DESCRIPTORS
;
static
{
PRIMITIVE_DESCRIPTORS
=
new
HashMap
<
>
(
)
;
PRIMITIVE_DESCRIPTORS
.
put
(
Type
.
BOOLEAN_TYPE
.
toString
(
)
Type
.
BOOLEAN_TYPE
)
;
PRIMITIVE_DESCRIPTORS
.
put
(
Type
.
INT_TYPE
.
toString
(
)
Type
.
INT_TYPE
)
;
PRIMITIVE_DESCRIPTORS
.
put
(
Type
.
VOID_TYPE
.
toString
(
)
Type
.
VOID_TYPE
)
;
}
static
String
getMethodSignature
(
String
methodName
String
returnType
String
.
.
.
argumentTypes
)
{
return
methodName
+
getMethodDescriptor
(
returnType
argumentTypes
)
;
}
static
String
getMethodDescriptor
(
String
returnType
String
.
.
.
argumentTypes
)
{
Type
[
]
typedArguments
=
new
Type
[
argumentTypes
.
length
]
;
for
(
int
i
=
0
;
i
<
argumentTypes
.
length
;
+
+
i
)
{
assert
!
Type
.
VOID_TYPE
.
toString
(
)
.
equals
(
argumentTypes
[
i
]
)
;
typedArguments
[
i
]
=
convert
(
argumentTypes
[
i
]
)
;
}
return
Type
.
getMethodDescriptor
(
convert
(
returnType
)
typedArguments
)
;
}
private
static
Type
convert
(
String
type
)
{
if
(
PRIMITIVE_DESCRIPTORS
.
containsKey
(
type
)
)
{
return
PRIMITIVE_DESCRIPTORS
.
get
(
type
)
;
}
return
Type
.
getObjectType
(
type
)
;
}
}
