package
org
.
chromium
.
bytecode
;
import
org
.
objectweb
.
asm
.
ClassVisitor
;
import
org
.
objectweb
.
asm
.
MethodVisitor
;
import
org
.
objectweb
.
asm
.
Opcodes
;
import
org
.
objectweb
.
asm
.
Type
;
import
org
.
objectweb
.
asm
.
commons
.
MethodRemapper
;
import
org
.
objectweb
.
asm
.
commons
.
Remapper
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
public
class
FragmentActivityReplacer
extends
ByteCodeRewriter
{
private
static
final
String
GET_ACTIVITY_METHOD_NAME
=
"
getActivity
"
;
private
static
final
String
GET_LIFECYCLE_ACTIVITY_METHOD_NAME
=
"
getLifecycleActivity
"
;
private
static
final
String
NEW_METHOD_DESCRIPTOR
=
"
(
)
Landroid
/
app
/
Activity
;
"
;
private
static
final
String
OLD_METHOD_DESCRIPTOR
=
"
(
)
Landroidx
/
fragment
/
app
/
FragmentActivity
;
"
;
private
static
final
String
REQUIRE_ACTIVITY_METHOD_NAME
=
"
requireActivity
"
;
private
static
final
String
SUPPORT_LIFECYCLE_FRAGMENT_IMPL_BINARY_NAME
=
"
com
.
google
.
android
.
gms
.
common
.
api
.
internal
.
SupportLifecycleFragmentImpl
"
;
public
static
void
main
(
String
[
]
args
)
throws
IOException
{
if
(
!
(
args
.
length
=
=
2
|
|
args
.
length
=
=
3
&
&
args
[
0
]
.
equals
(
"
-
-
single
-
androidx
"
)
)
)
{
System
.
err
.
println
(
"
Expected
arguments
:
[
-
-
single
-
androidx
]
<
input
.
jar
>
<
output
.
jar
>
"
)
;
System
.
exit
(
1
)
;
}
if
(
args
.
length
=
=
2
)
{
FragmentActivityReplacer
rewriter
=
new
FragmentActivityReplacer
(
false
)
;
rewriter
.
rewrite
(
new
File
(
args
[
0
]
)
new
File
(
args
[
1
]
)
)
;
}
else
{
FragmentActivityReplacer
rewriter
=
new
FragmentActivityReplacer
(
true
)
;
rewriter
.
rewrite
(
new
File
(
args
[
1
]
)
new
File
(
args
[
2
]
)
)
;
}
}
private
final
boolean
mSingleAndroidX
;
public
FragmentActivityReplacer
(
boolean
singleAndroidX
)
{
mSingleAndroidX
=
singleAndroidX
;
}
Override
protected
boolean
shouldRewriteClass
(
String
classPath
)
{
return
true
;
}
Override
protected
ClassVisitor
getClassVisitorForClass
(
String
classPath
ClassVisitor
delegate
)
{
ClassVisitor
invocationVisitor
=
new
InvocationReplacer
(
delegate
mSingleAndroidX
)
;
switch
(
classPath
)
{
case
"
androidx
/
fragment
/
app
/
Fragment
.
class
"
:
return
new
FragmentClassVisitor
(
invocationVisitor
)
;
case
"
com
/
google
/
android
/
gms
/
common
/
api
/
internal
/
SupportLifecycleFragmentImpl
.
class
"
:
return
new
SupportLifecycleFragmentImplClassVisitor
(
invocationVisitor
)
;
default
:
return
invocationVisitor
;
}
}
private
static
class
InvocationReplacer
extends
ClassVisitor
{
private
final
boolean
mSingleAndroidX
;
private
InvocationReplacer
(
ClassVisitor
baseVisitor
boolean
singleAndroidX
)
{
super
(
Opcodes
.
ASM7
baseVisitor
)
;
mSingleAndroidX
=
singleAndroidX
;
}
Override
public
MethodVisitor
visitMethod
(
int
access
String
name
String
descriptor
String
signature
String
[
]
exceptions
)
{
MethodVisitor
base
=
super
.
visitMethod
(
access
name
descriptor
signature
exceptions
)
;
return
new
MethodVisitor
(
Opcodes
.
ASM7
base
)
{
Override
public
void
visitMethodInsn
(
int
opcode
String
owner
String
name
String
descriptor
boolean
isInterface
)
{
boolean
isFragmentGetActivity
=
name
.
equals
(
GET_ACTIVITY_METHOD_NAME
)
&
&
descriptor
.
equals
(
OLD_METHOD_DESCRIPTOR
)
&
&
isFragmentSubclass
(
owner
)
;
boolean
isFragmentRequireActivity
=
name
.
equals
(
REQUIRE_ACTIVITY_METHOD_NAME
)
&
&
descriptor
.
equals
(
OLD_METHOD_DESCRIPTOR
)
&
&
isFragmentSubclass
(
owner
)
;
boolean
isSupportLifecycleFragmentImplGetLifecycleActivity
=
name
.
equals
(
GET_LIFECYCLE_ACTIVITY_METHOD_NAME
)
&
&
descriptor
.
equals
(
OLD_METHOD_DESCRIPTOR
)
&
&
owner
.
equals
(
SUPPORT_LIFECYCLE_FRAGMENT_IMPL_BINARY_NAME
)
;
if
(
(
opcode
=
=
Opcodes
.
INVOKEVIRTUAL
|
|
opcode
=
=
Opcodes
.
INVOKESPECIAL
)
&
&
(
isFragmentGetActivity
|
|
isFragmentRequireActivity
|
|
isSupportLifecycleFragmentImplGetLifecycleActivity
)
)
{
super
.
visitMethodInsn
(
opcode
owner
name
NEW_METHOD_DESCRIPTOR
isInterface
)
;
if
(
mSingleAndroidX
)
{
super
.
visitTypeInsn
(
Opcodes
.
CHECKCAST
"
androidx
/
fragment
/
app
/
FragmentActivity
"
)
;
}
}
else
{
super
.
visitMethodInsn
(
opcode
owner
name
descriptor
isInterface
)
;
}
}
private
boolean
isFragmentSubclass
(
String
internalType
)
{
ClassLoader
resourceStubbingClassLoader
=
new
ClassLoader
(
)
{
Override
protected
Class
<
?
>
findClass
(
String
name
)
throws
ClassNotFoundException
{
if
(
name
.
matches
(
"
.
*
\
\
.
R
(
\
\
.
+
)
?
"
)
)
{
return
Object
.
class
;
}
return
super
.
findClass
(
name
)
;
}
}
;
try
{
String
binaryName
=
Type
.
getObjectType
(
internalType
)
.
getClassName
(
)
;
Class
<
?
>
clazz
=
resourceStubbingClassLoader
.
loadClass
(
binaryName
)
;
while
(
clazz
!
=
null
)
{
if
(
clazz
.
getName
(
)
.
equals
(
"
androidx
.
fragment
.
app
.
Fragment
"
)
)
{
return
true
;
}
clazz
=
clazz
.
getSuperclass
(
)
;
}
return
false
;
}
catch
(
ClassNotFoundException
e
)
{
throw
new
RuntimeException
(
e
)
;
}
}
}
;
}
}
private
static
class
FragmentClassVisitor
extends
ClassVisitor
{
private
FragmentClassVisitor
(
ClassVisitor
baseVisitor
)
{
super
(
Opcodes
.
ASM7
baseVisitor
)
;
}
Override
public
MethodVisitor
visitMethod
(
int
access
String
name
String
descriptor
String
signature
String
[
]
exceptions
)
{
MethodVisitor
baseVisitor
;
if
(
descriptor
.
equals
(
OLD_METHOD_DESCRIPTOR
)
&
&
(
name
.
equals
(
GET_ACTIVITY_METHOD_NAME
)
|
|
name
.
equals
(
REQUIRE_ACTIVITY_METHOD_NAME
)
)
)
{
baseVisitor
=
super
.
visitMethod
(
access
&
~
Opcodes
.
ACC_FINAL
name
NEW_METHOD_DESCRIPTOR
null
exceptions
)
;
}
else
{
baseVisitor
=
super
.
visitMethod
(
access
name
descriptor
signature
exceptions
)
;
}
if
(
name
.
equals
(
GET_ACTIVITY_METHOD_NAME
)
&
&
descriptor
.
equals
(
OLD_METHOD_DESCRIPTOR
)
)
{
baseVisitor
.
visitVarInsn
(
Opcodes
.
ALOAD
0
)
;
baseVisitor
.
visitMethodInsn
(
Opcodes
.
INVOKEVIRTUAL
"
androidx
/
fragment
/
app
/
Fragment
"
"
getContext
"
"
(
)
Landroid
/
content
/
Context
;
"
false
)
;
baseVisitor
.
visitMethodInsn
(
Opcodes
.
INVOKESTATIC
"
org
/
chromium
/
utils
/
ContextUtils
"
"
activityFromContext
"
"
(
Landroid
/
content
/
Context
;
)
Landroid
/
app
/
Activity
;
"
false
)
;
baseVisitor
.
visitInsn
(
Opcodes
.
ARETURN
)
;
baseVisitor
.
visitMaxs
(
0
0
)
;
return
null
;
}
return
new
MethodRemapper
(
baseVisitor
new
Remapper
(
)
{
Override
public
String
mapType
(
String
internalName
)
{
if
(
internalName
.
equals
(
"
androidx
/
fragment
/
app
/
FragmentActivity
"
)
)
{
return
"
android
/
app
/
Activity
"
;
}
return
internalName
;
}
}
)
;
}
}
private
static
class
SupportLifecycleFragmentImplClassVisitor
extends
ClassVisitor
{
private
SupportLifecycleFragmentImplClassVisitor
(
ClassVisitor
baseVisitor
)
{
super
(
Opcodes
.
ASM7
baseVisitor
)
;
}
Override
public
MethodVisitor
visitMethod
(
int
access
String
name
String
descriptor
String
signature
String
[
]
exceptions
)
{
if
(
name
.
equals
(
GET_LIFECYCLE_ACTIVITY_METHOD_NAME
)
)
{
if
(
descriptor
.
equals
(
OLD_METHOD_DESCRIPTOR
)
)
{
return
super
.
visitMethod
(
access
name
NEW_METHOD_DESCRIPTOR
signature
exceptions
)
;
}
return
null
;
}
return
super
.
visitMethod
(
access
name
descriptor
signature
exceptions
)
;
}
}
}
