package
org
.
chromium
.
bytecode
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
ACC_ABSTRACT
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
ACC_INTERFACE
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
ALOAD
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
ASM7
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
ILOAD
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
INVOKESPECIAL
;
import
static
org
.
objectweb
.
asm
.
Opcodes
.
IRETURN
;
import
org
.
objectweb
.
asm
.
ClassVisitor
;
import
org
.
objectweb
.
asm
.
MethodVisitor
;
import
org
.
objectweb
.
asm
.
Type
;
import
java
.
util
.
ArrayList
;
class
EmptyOverrideGeneratorClassAdapter
extends
ClassVisitor
{
private
final
ArrayList
<
MethodDescription
>
mMethodsToGenerate
;
private
String
mSuperClassName
;
private
boolean
mIsAbstract
;
private
boolean
mIsInterface
;
public
EmptyOverrideGeneratorClassAdapter
(
ClassVisitor
cv
ArrayList
<
MethodDescription
>
methodsToGenerate
)
{
super
(
ASM7
cv
)
;
mMethodsToGenerate
=
methodsToGenerate
;
}
Override
public
void
visit
(
int
version
int
access
String
name
String
signature
String
superName
String
[
]
interfaces
)
{
super
.
visit
(
version
access
name
signature
superName
interfaces
)
;
mSuperClassName
=
superName
;
mIsAbstract
=
(
access
&
ACC_ABSTRACT
)
=
=
ACC_ABSTRACT
;
mIsInterface
=
(
access
&
ACC_INTERFACE
)
=
=
ACC_INTERFACE
;
}
Override
public
void
visitEnd
(
)
{
if
(
mIsAbstract
|
|
mIsInterface
|
|
mMethodsToGenerate
.
isEmpty
(
)
)
{
super
.
visitEnd
(
)
;
return
;
}
for
(
MethodDescription
method
:
mMethodsToGenerate
)
{
if
(
!
method
.
shouldCreateOverride
)
{
continue
;
}
MethodVisitor
mv
=
super
.
visitMethod
(
method
.
access
method
.
methodName
method
.
description
null
null
)
;
writeOverrideCode
(
mv
method
.
access
method
.
methodName
method
.
description
)
;
}
super
.
visitEnd
(
)
;
}
private
void
writeOverrideCode
(
MethodVisitor
mv
final
int
access
final
String
name
final
String
descriptor
)
{
assert
access
!
=
0
;
Type
[
]
argTypes
=
Type
.
getArgumentTypes
(
descriptor
)
;
Type
returnType
=
Type
.
getReturnType
(
descriptor
)
;
mv
.
visitCode
(
)
;
mv
.
visitVarInsn
(
ALOAD
0
)
;
int
i
=
1
;
for
(
Type
arg
:
argTypes
)
{
mv
.
visitVarInsn
(
arg
.
getOpcode
(
ILOAD
)
i
)
;
i
+
=
arg
.
getSize
(
)
;
}
mv
.
visitMethodInsn
(
INVOKESPECIAL
mSuperClassName
name
descriptor
false
)
;
mv
.
visitInsn
(
returnType
.
getOpcode
(
IRETURN
)
)
;
mv
.
visitMaxs
(
0
0
)
;
mv
.
visitEnd
(
)
;
}
}
