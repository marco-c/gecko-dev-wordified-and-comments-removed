import
argparse
import
os
import
stat
import
sys
import
shutil
import
subprocess
import
re
from
collections
import
defaultdict
EXPECTED_STDLIB_INPUT_REGEX
=
re
.
compile
(
r
"
(
[
0
-
9a
-
z_
]
+
)
(
?
:
-
(
[
0
-
9
]
+
)
)
?
"
)
RLIB_NAME_REGEX
=
re
.
compile
(
r
"
lib
(
[
0
-
9a
-
z_
]
+
)
-
(
[
0
-
9a
-
f
]
+
)
\
.
rlib
"
)
def
main
(
)
:
  
parser
=
argparse
.
ArgumentParser
(
"
find_std_rlibs
.
py
"
)
  
parser
.
add_argument
(
"
-
-
rust
-
bin
-
dir
"
                      
help
=
"
Path
to
Rust
binaries
"
                      
required
=
True
)
  
parser
.
add_argument
(
"
-
-
target
"
help
=
"
Rust
target
triple
"
required
=
False
)
  
parser
.
add_argument
(
"
-
-
output
"
                      
help
=
"
Path
to
rlibs
without
suffixes
"
                      
required
=
True
)
  
parser
.
add_argument
(
"
-
-
depfile
"
help
=
"
Path
to
write
depfile
"
required
=
True
)
  
parser
.
add_argument
(
"
-
-
depfile
-
target
"
                      
help
=
"
Target
to
key
depfile
around
"
                      
required
=
True
)
  
parser
.
add_argument
(
"
-
-
stdlibs
"
                      
help
=
"
Expected
list
of
standard
library
libraries
"
)
  
parser
.
add_argument
(
"
-
-
skip
-
stdlibs
"
                      
help
=
"
Standard
library
files
to
skip
"
                      
default
=
"
"
)
  
parser
.
add_argument
(
"
-
-
expected
-
rustc
-
version
"
                      
help
=
"
The
string
we
expect
to
be
reported
by
'
rustc
-
V
'
"
)
  
args
=
parser
.
parse_args
(
)
  
if
args
.
stdlibs
:
    
rlibs_expected
=
set
(
)
    
for
lib
in
args
.
stdlibs
.
split
(
'
'
)
:
      
(
name
version
)
=
EXPECTED_STDLIB_INPUT_REGEX
.
match
(
lib
)
.
group
(
1
2
)
      
if
version
is
None
:
        
rlibs_expected
.
add
(
name
)
      
else
:
        
rlibs_expected
.
add
(
f
"
{
name
}
-
{
version
}
"
)
  
else
:
    
rlibs_expected
=
None
  
rlibs_to_skip
=
set
(
args
.
skip_stdlibs
.
split
(
'
'
)
)
  
rustc
=
os
.
path
.
join
(
args
.
rust_bin_dir
"
rustc
"
)
  
if
args
.
expected_rustc_version
:
    
proc
=
subprocess
.
run
(
[
rustc
"
-
V
"
]
capture_output
=
True
text
=
True
)
    
proc
.
check_returncode
(
)
    
rustc_version
=
proc
.
stdout
.
rstrip
(
)
    
if
rustc_version
!
=
args
.
expected_rustc_version
:
      
raise
Exception
(
"
gn
arguments
state
that
the
rustc_version
is
%
s
"
                      
"
but
it
was
actually
%
s
.
Please
adjust
your
"
                      
"
gn
arguments
to
match
.
"
%
                      
(
args
.
expected_rustc_version
rustc_version
)
)
  
rustc_args
=
[
rustc
"
-
-
print
"
"
target
-
libdir
"
]
  
if
args
.
target
:
    
rustc_args
.
extend
(
[
"
-
-
target
"
args
.
target
]
)
  
rustlib_dir
=
subprocess
.
check_output
(
rustc_args
)
.
rstrip
(
)
.
decode
(
)
  
with
open
(
args
.
depfile
'
w
'
)
as
depfile
:
    
depfile
.
write
(
        
"
%
s
:
"
%
(
os
.
path
.
join
(
args
.
output
"
lib
%
s
.
rlib
"
%
args
.
depfile_target
)
)
)
    
rlibs_present
=
[
        
name
for
name
in
os
.
listdir
(
rustlib_dir
)
if
name
.
endswith
(
'
.
rlib
'
)
    
]
    
rlibs_present
.
sort
(
)
    
rlibs_seen
=
defaultdict
(
lambda
:
0
)
    
for
f
in
rlibs_present
:
      
(
crate_name
metadata
)
=
RLIB_NAME_REGEX
.
match
(
f
)
.
group
(
1
2
)
      
if
crate_name
in
rlibs_to_skip
:
        
continue
      
rlibs_seen
[
crate_name
]
+
=
1
      
if
rlibs_seen
[
crate_name
]
=
=
1
:
        
concise_name
=
crate_name
      
else
:
        
concise_name
=
"
%
s
-
%
d
"
%
(
crate_name
rlibs_seen
[
crate_name
]
)
      
output_filename
=
f
"
lib
{
concise_name
}
.
rlib
"
      
if
rlibs_expected
is
not
None
:
        
if
concise_name
not
in
rlibs_expected
:
          
raise
Exception
(
"
Found
stdlib
rlib
that
wasn
'
t
expected
:
%
s
"
%
f
)
        
rlibs_expected
.
remove
(
concise_name
)
      
infile
=
os
.
path
.
join
(
rustlib_dir
f
)
      
outfile
=
os
.
path
.
join
(
args
.
output
output_filename
)
      
depfile
.
write
(
"
%
s
"
%
infile
)
      
if
(
not
os
.
path
.
exists
(
outfile
)
          
or
os
.
stat
(
infile
)
.
st_mtime
!
=
os
.
stat
(
outfile
)
.
st_mtime
)
:
        
if
os
.
path
.
exists
(
outfile
)
:
          
st
=
os
.
stat
(
outfile
)
          
os
.
chmod
(
outfile
st
.
st_mode
|
stat
.
S_IWUSR
)
        
shutil
.
copy
(
infile
outfile
)
    
depfile
.
write
(
"
\
n
"
)
    
if
rlibs_expected
:
      
raise
Exception
(
"
We
failed
to
find
all
expected
stdlib
rlibs
:
%
s
"
%
                      
'
'
.
join
(
rlibs_expected
)
)
if
__name__
=
=
'
__main__
'
:
  
sys
.
exit
(
main
(
)
)
