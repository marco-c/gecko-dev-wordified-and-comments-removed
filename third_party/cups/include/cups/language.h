#
ifndef
_CUPS_LANGUAGE_H_
#
define
_CUPS_LANGUAGE_H_
#
include
<
locale
.
h
>
#
include
"
array
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
enum
cups_encoding_e
{
CUPS_AUTO_ENCODING
=
-
1
CUPS_US_ASCII
CUPS_ISO8859_1
CUPS_ISO8859_2
CUPS_ISO8859_3
CUPS_ISO8859_4
CUPS_ISO8859_5
CUPS_ISO8859_6
CUPS_ISO8859_7
CUPS_ISO8859_8
CUPS_ISO8859_9
CUPS_ISO8859_10
CUPS_UTF8
CUPS_ISO8859_13
CUPS_ISO8859_14
CUPS_ISO8859_15
CUPS_WINDOWS_874
CUPS_WINDOWS_1250
CUPS_WINDOWS_1251
CUPS_WINDOWS_1252
CUPS_WINDOWS_1253
CUPS_WINDOWS_1254
CUPS_WINDOWS_1255
CUPS_WINDOWS_1256
CUPS_WINDOWS_1257
CUPS_WINDOWS_1258
CUPS_KOI8_R
CUPS_KOI8_U
CUPS_ISO8859_11
CUPS_ISO8859_16
CUPS_MAC_ROMAN
CUPS_ENCODING_SBCS_END
=
63
CUPS_WINDOWS_932
CUPS_WINDOWS_936
CUPS_WINDOWS_949
CUPS_WINDOWS_950
CUPS_WINDOWS_1361
CUPS_ENCODING_DBCS_END
=
127
CUPS_EUC_CN
CUPS_EUC_JP
CUPS_EUC_KR
CUPS_EUC_TW
CUPS_JIS_X0213
CUPS_ENCODING_VBCS_END
=
191
}
cups_encoding_t
;
typedef
struct
cups_lang_s
{
struct
cups_lang_s
*
next
;
int
used
;
cups_encoding_t
encoding
;
char
language
[
16
]
;
cups_array_t
*
strings
;
}
cups_lang_t
;
extern
cups_lang_t
*
cupsLangDefault
(
void
)
_CUPS_PUBLIC
;
extern
const
char
*
cupsLangEncoding
(
cups_lang_t
*
lang
)
_CUPS_PUBLIC
;
extern
void
cupsLangFlush
(
void
)
_CUPS_PUBLIC
;
extern
void
cupsLangFree
(
cups_lang_t
*
lang
)
_CUPS_PUBLIC
;
extern
cups_lang_t
*
cupsLangGet
(
const
char
*
language
)
_CUPS_PUBLIC
;
#
ifdef
__cplusplus
}
#
endif
#
endif
