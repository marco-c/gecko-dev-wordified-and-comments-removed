#
ifndef
DAV1D_SRC_PICTURE_H
#
define
DAV1D_SRC_PICTURE_H
#
include
<
stdatomic
.
h
>
#
include
"
src
/
thread
.
h
"
#
include
"
dav1d
/
picture
.
h
"
#
include
"
src
/
thread_data
.
h
"
#
include
"
src
/
ref
.
h
"
enum
PlaneType
{
PLANE_TYPE_Y
PLANE_TYPE_UV
PLANE_TYPE_BLOCK
PLANE_TYPE_ALL
}
;
enum
PictureFlags
{
PICTURE_FLAG_NEW_SEQUENCE
=
1
<
<
0
PICTURE_FLAG_NEW_OP_PARAMS_INFO
=
1
<
<
1
PICTURE_FLAG_NEW_TEMPORAL_UNIT
=
1
<
<
2
}
;
typedef
struct
Dav1dThreadPicture
{
Dav1dPicture
p
;
int
visible
;
enum
PictureFlags
flags
;
atomic_uint
*
progress
;
}
Dav1dThreadPicture
;
typedef
struct
Dav1dPictureBuffer
{
void
*
data
;
struct
Dav1dPictureBuffer
*
next
;
}
Dav1dPictureBuffer
;
int
dav1d_thread_picture_alloc
(
Dav1dContext
*
c
Dav1dFrameContext
*
f
const
int
bpc
)
;
int
dav1d_picture_alloc_copy
(
Dav1dContext
*
c
Dav1dPicture
*
dst
const
int
w
const
Dav1dPicture
*
src
)
;
void
dav1d_picture_ref
(
Dav1dPicture
*
dst
const
Dav1dPicture
*
src
)
;
void
dav1d_thread_picture_ref
(
Dav1dThreadPicture
*
dst
const
Dav1dThreadPicture
*
src
)
;
void
dav1d_thread_picture_move_ref
(
Dav1dThreadPicture
*
dst
Dav1dThreadPicture
*
src
)
;
void
dav1d_thread_picture_unref
(
Dav1dThreadPicture
*
p
)
;
void
dav1d_picture_move_ref
(
Dav1dPicture
*
dst
Dav1dPicture
*
src
)
;
int
dav1d_default_picture_alloc
(
Dav1dPicture
*
p
void
*
cookie
)
;
void
dav1d_default_picture_release
(
Dav1dPicture
*
p
void
*
cookie
)
;
void
dav1d_picture_unref_internal
(
Dav1dPicture
*
p
)
;
enum
Dav1dEventFlags
dav1d_picture_get_event_flags
(
const
Dav1dThreadPicture
*
p
)
;
#
endif
