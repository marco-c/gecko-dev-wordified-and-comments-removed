#
ifndef
__DAV1D_SRC_PICTURE_H__
#
define
__DAV1D_SRC_PICTURE_H__
#
include
<
stdatomic
.
h
>
#
include
"
src
/
thread
.
h
"
#
include
"
dav1d
/
picture
.
h
"
#
include
"
src
/
thread_data
.
h
"
#
include
"
src
/
ref
.
h
"
enum
PlaneType
{
PLANE_TYPE_Y
PLANE_TYPE_UV
PLANE_TYPE_BLOCK
PLANE_TYPE_ALL
}
;
typedef
struct
Dav1dThreadPicture
{
Dav1dPicture
p
;
int
visible
;
struct
thread_data
*
t
;
atomic_uint
*
progress
;
}
Dav1dThreadPicture
;
int
dav1d_thread_picture_alloc
(
Dav1dThreadPicture
*
p
int
w
int
h
Dav1dSequenceHeader
*
seq_hdr
Dav1dRef
*
seq_hdr_ref
Dav1dFrameHeader
*
frame_hdr
Dav1dRef
*
frame_hdr_ref
int
bpc
const
Dav1dDataProps
*
props
struct
thread_data
*
t
int
visible
Dav1dPicAllocator
*
)
;
int
dav1d_picture_alloc_copy
(
Dav1dPicture
*
dst
const
int
w
const
Dav1dPicture
*
src
)
;
void
dav1d_picture_ref
(
Dav1dPicture
*
dst
const
Dav1dPicture
*
src
)
;
void
dav1d_thread_picture_ref
(
Dav1dThreadPicture
*
dst
const
Dav1dThreadPicture
*
src
)
;
void
dav1d_thread_picture_unref
(
Dav1dThreadPicture
*
p
)
;
void
dav1d_picture_move_ref
(
Dav1dPicture
*
dst
Dav1dPicture
*
src
)
;
int
dav1d_thread_picture_wait
(
const
Dav1dThreadPicture
*
p
int
y
enum
PlaneType
plane_type
)
;
void
dav1d_thread_picture_signal
(
const
Dav1dThreadPicture
*
p
int
y
enum
PlaneType
plane_type
)
;
int
default_picture_allocator
(
Dav1dPicture
*
void
*
cookie
)
;
void
default_picture_release
(
Dav1dPicture
*
void
*
cookie
)
;
void
dav1d_picture_unref_internal
(
Dav1dPicture
*
p
)
;
#
endif
