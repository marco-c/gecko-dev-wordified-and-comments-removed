#
include
"
src
/
cpu
.
h
"
#
include
"
src
/
looprestoration
.
h
"
#
if
ARCH_AARCH64
void
BF
(
dav1d_wiener_filter7
neon
)
(
pixel
*
p
const
ptrdiff_t
stride
const
pixel
(
*
left
)
[
4
]
const
pixel
*
lpf
const
int
w
int
h
const
LooprestorationParams
*
const
params
const
enum
LrEdgeFlags
edges
HIGHBD_DECL_SUFFIX
)
;
void
BF
(
dav1d_wiener_filter5
neon
)
(
pixel
*
p
const
ptrdiff_t
stride
const
pixel
(
*
left
)
[
4
]
const
pixel
*
lpf
const
int
w
int
h
const
LooprestorationParams
*
const
params
const
enum
LrEdgeFlags
edges
HIGHBD_DECL_SUFFIX
)
;
#
else
void
BF
(
dav1d_wiener_filter_h
neon
)
(
int16_t
*
dst
const
pixel
(
*
left
)
[
4
]
const
pixel
*
src
ptrdiff_t
stride
const
int16_t
fh
[
8
]
intptr_t
w
int
h
enum
LrEdgeFlags
edges
HIGHBD_DECL_SUFFIX
)
;
void
BF
(
dav1d_wiener_filter_v
neon
)
(
pixel
*
dst
ptrdiff_t
stride
const
int16_t
*
mid
int
w
int
h
const
int16_t
fv
[
8
]
enum
LrEdgeFlags
edges
ptrdiff_t
mid_stride
HIGHBD_DECL_SUFFIX
)
;
static
void
wiener_filter_neon
(
pixel
*
const
dst
const
ptrdiff_t
stride
const
pixel
(
*
const
left
)
[
4
]
const
pixel
*
lpf
const
int
w
const
int
h
const
LooprestorationParams
*
const
params
const
enum
LrEdgeFlags
edges
HIGHBD_DECL_SUFFIX
)
{
const
int16_t
(
*
const
filter
)
[
8
]
=
params
-
>
filter
;
ALIGN_STK_16
(
int16_t
mid
68
*
384
)
;
int
mid_stride
=
(
w
+
7
)
&
~
7
;
BF
(
dav1d_wiener_filter_h
neon
)
(
&
mid
[
2
*
mid_stride
]
left
dst
stride
filter
[
0
]
w
h
edges
HIGHBD_TAIL_SUFFIX
)
;
if
(
edges
&
LR_HAVE_TOP
)
BF
(
dav1d_wiener_filter_h
neon
)
(
mid
NULL
lpf
stride
filter
[
0
]
w
2
edges
HIGHBD_TAIL_SUFFIX
)
;
if
(
edges
&
LR_HAVE_BOTTOM
)
BF
(
dav1d_wiener_filter_h
neon
)
(
&
mid
[
(
2
+
h
)
*
mid_stride
]
NULL
lpf
+
6
*
PXSTRIDE
(
stride
)
stride
filter
[
0
]
w
2
edges
HIGHBD_TAIL_SUFFIX
)
;
BF
(
dav1d_wiener_filter_v
neon
)
(
dst
stride
&
mid
[
2
*
mid_stride
]
w
h
filter
[
1
]
edges
mid_stride
*
sizeof
(
*
mid
)
HIGHBD_TAIL_SUFFIX
)
;
}
#
endif
void
BF
(
dav1d_sgr_box3_h
neon
)
(
int32_t
*
sumsq
int16_t
*
sum
const
pixel
(
*
left
)
[
4
]
const
pixel
*
src
const
ptrdiff_t
stride
const
int
w
const
int
h
const
enum
LrEdgeFlags
edges
)
;
void
dav1d_sgr_box3_v_neon
(
int32_t
*
sumsq
int16_t
*
sum
const
int
w
const
int
h
const
enum
LrEdgeFlags
edges
)
;
void
dav1d_sgr_calc_ab1_neon
(
int32_t
*
a
int16_t
*
b
const
int
w
const
int
h
const
int
strength
const
int
bitdepth_max
)
;
void
BF
(
dav1d_sgr_finish_filter1
neon
)
(
int16_t
*
tmp
const
pixel
*
src
const
ptrdiff_t
stride
const
int32_t
*
a
const
int16_t
*
b
const
int
w
const
int
h
)
;
static
void
dav1d_sgr_filter1_neon
(
int16_t
*
tmp
const
pixel
*
src
const
ptrdiff_t
stride
const
pixel
(
*
left
)
[
4
]
const
pixel
*
lpf
const
int
w
const
int
h
const
int
strength
const
enum
LrEdgeFlags
edges
HIGHBD_DECL_SUFFIX
)
{
ALIGN_STK_16
(
int32_t
sumsq_mem
(
384
+
16
)
*
68
+
8
)
;
int32_t
*
const
sumsq
=
&
sumsq_mem
[
(
384
+
16
)
*
2
+
8
]
*
const
a
=
sumsq
;
ALIGN_STK_16
(
int16_t
sum_mem
(
384
+
16
)
*
68
+
16
)
;
int16_t
*
const
sum
=
&
sum_mem
[
(
384
+
16
)
*
2
+
16
]
*
const
b
=
sum
;
BF
(
dav1d_sgr_box3_h
neon
)
(
sumsq
sum
left
src
stride
w
h
edges
)
;
if
(
edges
&
LR_HAVE_TOP
)
BF
(
dav1d_sgr_box3_h
neon
)
(
&
sumsq
[
-
2
*
(
384
+
16
)
]
&
sum
[
-
2
*
(
384
+
16
)
]
NULL
lpf
stride
w
2
edges
)
;
if
(
edges
&
LR_HAVE_BOTTOM
)
BF
(
dav1d_sgr_box3_h
neon
)
(
&
sumsq
[
h
*
(
384
+
16
)
]
&
sum
[
h
*
(
384
+
16
)
]
NULL
lpf
+
6
*
PXSTRIDE
(
stride
)
stride
w
2
edges
)
;
dav1d_sgr_box3_v_neon
(
sumsq
sum
w
h
edges
)
;
dav1d_sgr_calc_ab1_neon
(
a
b
w
h
strength
BITDEPTH_MAX
)
;
BF
(
dav1d_sgr_finish_filter1
neon
)
(
tmp
src
stride
a
b
w
h
)
;
}
void
BF
(
dav1d_sgr_box5_h
neon
)
(
int32_t
*
sumsq
int16_t
*
sum
const
pixel
(
*
left
)
[
4
]
const
pixel
*
src
const
ptrdiff_t
stride
const
int
w
const
int
h
const
enum
LrEdgeFlags
edges
)
;
void
dav1d_sgr_box5_v_neon
(
int32_t
*
sumsq
int16_t
*
sum
const
int
w
const
int
h
const
enum
LrEdgeFlags
edges
)
;
void
dav1d_sgr_calc_ab2_neon
(
int32_t
*
a
int16_t
*
b
const
int
w
const
int
h
const
int
strength
const
int
bitdepth_max
)
;
void
BF
(
dav1d_sgr_finish_filter2
neon
)
(
int16_t
*
tmp
const
pixel
*
src
const
ptrdiff_t
stride
const
int32_t
*
a
const
int16_t
*
b
const
int
w
const
int
h
)
;
static
void
dav1d_sgr_filter2_neon
(
int16_t
*
tmp
const
pixel
*
src
const
ptrdiff_t
stride
const
pixel
(
*
left
)
[
4
]
const
pixel
*
lpf
const
int
w
const
int
h
const
int
strength
const
enum
LrEdgeFlags
edges
HIGHBD_DECL_SUFFIX
)
{
ALIGN_STK_16
(
int32_t
sumsq_mem
(
384
+
16
)
*
68
+
8
)
;
int32_t
*
const
sumsq
=
&
sumsq_mem
[
(
384
+
16
)
*
2
+
8
]
*
const
a
=
sumsq
;
ALIGN_STK_16
(
int16_t
sum_mem
(
384
+
16
)
*
68
+
16
)
;
int16_t
*
const
sum
=
&
sum_mem
[
(
384
+
16
)
*
2
+
16
]
*
const
b
=
sum
;
BF
(
dav1d_sgr_box5_h
neon
)
(
sumsq
sum
left
src
stride
w
h
edges
)
;
if
(
edges
&
LR_HAVE_TOP
)
BF
(
dav1d_sgr_box5_h
neon
)
(
&
sumsq
[
-
2
*
(
384
+
16
)
]
&
sum
[
-
2
*
(
384
+
16
)
]
NULL
lpf
stride
w
2
edges
)
;
if
(
edges
&
LR_HAVE_BOTTOM
)
BF
(
dav1d_sgr_box5_h
neon
)
(
&
sumsq
[
h
*
(
384
+
16
)
]
&
sum
[
h
*
(
384
+
16
)
]
NULL
lpf
+
6
*
PXSTRIDE
(
stride
)
stride
w
2
edges
)
;
dav1d_sgr_box5_v_neon
(
sumsq
sum
w
h
edges
)
;
dav1d_sgr_calc_ab2_neon
(
a
b
w
h
strength
BITDEPTH_MAX
)
;
BF
(
dav1d_sgr_finish_filter2
neon
)
(
tmp
src
stride
a
b
w
h
)
;
}
void
BF
(
dav1d_sgr_weighted1
neon
)
(
pixel
*
dst
const
ptrdiff_t
dst_stride
const
pixel
*
src
const
ptrdiff_t
src_stride
const
int16_t
*
t1
const
int
w
const
int
h
const
int
wt
HIGHBD_DECL_SUFFIX
)
;
void
BF
(
dav1d_sgr_weighted2
neon
)
(
pixel
*
dst
const
ptrdiff_t
dst_stride
const
pixel
*
src
const
ptrdiff_t
src_stride
const
int16_t
*
t1
const
int16_t
*
t2
const
int
w
const
int
h
const
int16_t
wt
[
2
]
HIGHBD_DECL_SUFFIX
)
;
static
void
sgr_filter_5x5_neon
(
pixel
*
const
dst
const
ptrdiff_t
stride
const
pixel
(
*
const
left
)
[
4
]
const
pixel
*
lpf
const
int
w
const
int
h
const
LooprestorationParams
*
const
params
const
enum
LrEdgeFlags
edges
HIGHBD_DECL_SUFFIX
)
{
ALIGN_STK_16
(
int16_t
tmp
64
*
384
)
;
dav1d_sgr_filter2_neon
(
tmp
dst
stride
left
lpf
w
h
params
-
>
sgr
.
s0
edges
HIGHBD_TAIL_SUFFIX
)
;
BF
(
dav1d_sgr_weighted1
neon
)
(
dst
stride
dst
stride
tmp
w
h
params
-
>
sgr
.
w0
HIGHBD_TAIL_SUFFIX
)
;
}
static
void
sgr_filter_3x3_neon
(
pixel
*
const
dst
const
ptrdiff_t
stride
const
pixel
(
*
const
left
)
[
4
]
const
pixel
*
lpf
const
int
w
const
int
h
const
LooprestorationParams
*
const
params
const
enum
LrEdgeFlags
edges
HIGHBD_DECL_SUFFIX
)
{
ALIGN_STK_16
(
int16_t
tmp
64
*
384
)
;
dav1d_sgr_filter1_neon
(
tmp
dst
stride
left
lpf
w
h
params
-
>
sgr
.
s1
edges
HIGHBD_TAIL_SUFFIX
)
;
BF
(
dav1d_sgr_weighted1
neon
)
(
dst
stride
dst
stride
tmp
w
h
params
-
>
sgr
.
w1
HIGHBD_TAIL_SUFFIX
)
;
}
static
void
sgr_filter_mix_neon
(
pixel
*
const
dst
const
ptrdiff_t
stride
const
pixel
(
*
const
left
)
[
4
]
const
pixel
*
lpf
const
int
w
const
int
h
const
LooprestorationParams
*
const
params
const
enum
LrEdgeFlags
edges
HIGHBD_DECL_SUFFIX
)
{
ALIGN_STK_16
(
int16_t
tmp1
64
*
384
)
;
ALIGN_STK_16
(
int16_t
tmp2
64
*
384
)
;
dav1d_sgr_filter2_neon
(
tmp1
dst
stride
left
lpf
w
h
params
-
>
sgr
.
s0
edges
HIGHBD_TAIL_SUFFIX
)
;
dav1d_sgr_filter1_neon
(
tmp2
dst
stride
left
lpf
w
h
params
-
>
sgr
.
s1
edges
HIGHBD_TAIL_SUFFIX
)
;
const
int16_t
wt
[
2
]
=
{
params
-
>
sgr
.
w0
params
-
>
sgr
.
w1
}
;
BF
(
dav1d_sgr_weighted2
neon
)
(
dst
stride
dst
stride
tmp1
tmp2
w
h
wt
HIGHBD_TAIL_SUFFIX
)
;
}
static
ALWAYS_INLINE
void
loop_restoration_dsp_init_arm
(
Dav1dLoopRestorationDSPContext
*
const
c
int
bpc
)
{
const
unsigned
flags
=
dav1d_get_cpu_flags
(
)
;
if
(
!
(
flags
&
DAV1D_ARM_CPU_FLAG_NEON
)
)
return
;
#
if
ARCH_AARCH64
c
-
>
wiener
[
0
]
=
BF
(
dav1d_wiener_filter7
neon
)
;
c
-
>
wiener
[
1
]
=
BF
(
dav1d_wiener_filter5
neon
)
;
#
else
c
-
>
wiener
[
0
]
=
c
-
>
wiener
[
1
]
=
wiener_filter_neon
;
#
endif
if
(
BITDEPTH
=
=
8
|
|
bpc
=
=
10
)
{
c
-
>
sgr
[
0
]
=
sgr_filter_5x5_neon
;
c
-
>
sgr
[
1
]
=
sgr_filter_3x3_neon
;
c
-
>
sgr
[
2
]
=
sgr_filter_mix_neon
;
}
}
