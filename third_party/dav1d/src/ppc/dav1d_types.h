#
ifndef
DAV1D_SRC_PPC_TYPES_H
#
define
DAV1D_SRC_PPC_TYPES_H
#
include
<
altivec
.
h
>
#
undef
pixel
#
define
u8x16
vector
unsigned
char
#
define
i8x16
vector
signed
char
#
define
b8x16
vector
bool
char
#
define
u16x8
vector
unsigned
short
#
define
i16x8
vector
signed
short
#
define
b16x8
vector
bool
short
#
define
u32x4
vector
unsigned
int
#
define
i32x4
vector
signed
int
#
define
b32x4
vector
bool
int
#
define
u64x2
vector
unsigned
long
long
#
define
i64x2
vector
signed
long
long
#
define
b64x2
vector
bool
long
long
#
define
i8h_to_i16
(
v
)
(
(
i16x8
)
vec_unpackh
(
(
i8x16
)
v
)
)
#
define
i8l_to_i16
(
v
)
(
(
i16x8
)
vec_unpackl
(
(
i8x16
)
v
)
)
#
define
u8h_to_i16
(
v
)
(
(
i16x8
)
vec_mergeh
(
(
u8x16
)
v
vec_splat_u8
(
0
)
)
)
#
define
u8l_to_i16
(
v
)
(
(
i16x8
)
vec_mergel
(
(
u8x16
)
v
vec_splat_u8
(
0
)
)
)
#
define
u8h_to_u16
(
v
)
(
(
u16x8
)
vec_mergeh
(
(
u8x16
)
v
vec_splat_u8
(
0
)
)
)
#
define
u8l_to_u16
(
v
)
(
(
u16x8
)
vec_mergel
(
(
u8x16
)
v
vec_splat_u8
(
0
)
)
)
#
define
u16h_to_i32
(
v
)
(
(
i32x4
)
vec_mergeh
(
(
u16x8
)
v
vec_splat_u16
(
0
)
)
)
#
define
i16h_to_i32
(
v
)
(
(
i32x4
)
vec_unpackh
(
(
i16x8
)
v
)
)
#
define
u16l_to_i32
(
v
)
(
(
i32x4
)
vec_mergel
(
(
u16x8
)
v
vec_splat_u16
(
0
)
)
)
#
define
i16l_to_i32
(
v
)
(
(
i32x4
)
vec_unpackl
(
(
i16x8
)
v
)
)
#
endif
