#
ifndef
DAV1D_H
#
define
DAV1D_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
errno
.
h
>
#
include
<
stdarg
.
h
>
#
include
"
common
.
h
"
#
include
"
picture
.
h
"
#
include
"
data
.
h
"
#
include
"
version
.
h
"
typedef
struct
Dav1dContext
Dav1dContext
;
typedef
struct
Dav1dRef
Dav1dRef
;
#
define
DAV1D_MAX_FRAME_THREADS
256
#
define
DAV1D_MAX_TILE_THREADS
64
typedef
struct
Dav1dLogger
{
void
*
cookie
;
void
(
*
callback
)
(
void
*
cookie
const
char
*
format
va_list
ap
)
;
}
Dav1dLogger
;
typedef
struct
Dav1dSettings
{
int
n_frame_threads
;
int
n_tile_threads
;
int
apply_grain
;
int
operating_point
;
int
all_layers
;
unsigned
frame_size_limit
;
Dav1dPicAllocator
allocator
;
Dav1dLogger
logger
;
uint8_t
reserved
[
32
]
;
}
Dav1dSettings
;
DAV1D_API
const
char
*
dav1d_version
(
void
)
;
DAV1D_API
void
dav1d_default_settings
(
Dav1dSettings
*
s
)
;
DAV1D_API
int
dav1d_open
(
Dav1dContext
*
*
c_out
const
Dav1dSettings
*
s
)
;
DAV1D_API
int
dav1d_parse_sequence_header
(
Dav1dSequenceHeader
*
out
const
uint8_t
*
buf
const
size_t
sz
)
;
DAV1D_API
int
dav1d_send_data
(
Dav1dContext
*
c
Dav1dData
*
in
)
;
DAV1D_API
int
dav1d_get_picture
(
Dav1dContext
*
c
Dav1dPicture
*
out
)
;
DAV1D_API
void
dav1d_close
(
Dav1dContext
*
*
c_out
)
;
DAV1D_API
void
dav1d_flush
(
Dav1dContext
*
c
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
