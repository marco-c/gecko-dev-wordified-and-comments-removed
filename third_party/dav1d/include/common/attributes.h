#
ifndef
__DAV1D_COMMON_ATTRIBUTES_H__
#
define
__DAV1D_COMMON_ATTRIBUTES_H__
#
include
"
config
.
h
"
#
include
<
stddef
.
h
>
#
if
ARCH_X86
#
define
ALIGN_32_VAL
32
#
define
ALIGN_16_VAL
16
#
elif
ARCH_ARM
|
|
ARCH_AARCH64
#
define
ALIGN_32_VAL
16
#
define
ALIGN_16_VAL
16
#
else
#
define
ALIGN_32_VAL
8
#
define
ALIGN_16_VAL
8
#
endif
#
ifdef
_MSC_VER
#
define
ALIGN
(
ll
a
)
\
__declspec
(
align
(
a
)
)
ll
#
else
#
define
ALIGN
(
line
align
)
\
line
__attribute__
(
(
aligned
(
align
)
)
)
#
endif
#
define
ALIGN_STK_32
(
type
var
sz1d
sznd
)
\
ALIGN
(
type
var
[
sz1d
]
sznd
ALIGN_32_VAL
)
#
define
ALIGN_STK_16
(
type
var
sz1d
sznd
)
\
ALIGN
(
type
var
[
sz1d
]
sznd
ALIGN_16_VAL
)
#
ifdef
_MSC_VER
#
define
NOINLINE
__declspec
(
noinline
)
#
else
#
define
NOINLINE
__attribute__
(
(
noinline
)
)
#
endif
#
if
defined
(
__GNUC__
)
&
&
!
defined
(
__INTEL_COMPILER
)
&
&
!
defined
(
__clang__
)
#
define
dav1d_uninit
(
x
)
x
=
x
#
else
#
define
dav1d_uninit
(
x
)
x
#
endif
#
ifdef
_MSC_VER
#
include
<
intrin
.
h
>
static
inline
int
ctz
(
const
unsigned
int
mask
)
{
unsigned
long
idx
;
_BitScanForward
(
&
idx
mask
)
;
return
idx
;
}
static
inline
int
clz
(
const
unsigned
int
mask
)
{
unsigned
long
leading_zero
=
0
;
_BitScanReverse
(
&
leading_zero
mask
)
;
return
(
31
-
leading_zero
)
;
}
#
ifdef
_WIN64
static
inline
int
clzll
(
const
unsigned
long
long
mask
)
{
unsigned
long
leading_zero
=
0
;
_BitScanReverse64
(
&
leading_zero
mask
)
;
return
(
63
-
leading_zero
)
;
}
#
else
static
inline
int
clzll
(
const
unsigned
long
long
mask
)
{
if
(
mask
>
>
32
)
return
clz
(
(
unsigned
)
(
mask
>
>
32
)
)
;
else
return
clz
(
(
unsigned
)
mask
)
+
32
;
}
#
endif
#
else
static
inline
int
ctz
(
const
unsigned
int
mask
)
{
return
__builtin_ctz
(
mask
)
;
}
static
inline
int
clz
(
const
unsigned
int
mask
)
{
return
__builtin_clz
(
mask
)
;
}
static
inline
int
clzll
(
const
unsigned
long
long
mask
)
{
return
__builtin_clzll
(
mask
)
;
}
#
endif
#
endif
