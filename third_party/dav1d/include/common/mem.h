#
ifndef
DAV1D_COMMON_MEM_H
#
define
DAV1D_COMMON_MEM_H
#
include
<
assert
.
h
>
#
include
<
stdlib
.
h
>
#
if
defined
(
HAVE_ALIGNED_MALLOC
)
|
|
defined
(
HAVE_MEMALIGN
)
#
include
<
malloc
.
h
>
#
endif
static
inline
void
*
dav1d_alloc_aligned
(
size_t
sz
size_t
align
)
{
#
ifdef
HAVE_POSIX_MEMALIGN
void
*
ptr
;
assert
(
!
(
align
&
(
align
-
1
)
)
)
;
if
(
posix_memalign
(
&
ptr
align
sz
)
)
return
NULL
;
return
ptr
;
#
elif
defined
(
HAVE_ALIGNED_MALLOC
)
return
_aligned_malloc
(
sz
align
)
;
#
elif
defined
(
HAVE_MEMALIGN
)
return
memalign
(
align
sz
)
;
#
else
#
error
Missing
aligned
alloc
implementation
#
endif
}
static
inline
void
dav1d_free_aligned
(
void
*
ptr
)
{
#
ifdef
HAVE_POSIX_MEMALIGN
free
(
ptr
)
;
#
elif
defined
(
HAVE_ALIGNED_MALLOC
)
_aligned_free
(
ptr
)
;
#
elif
defined
(
HAVE_MEMALIGN
)
free
(
ptr
)
;
#
endif
}
static
inline
void
dav1d_freep_aligned
(
void
*
ptr
)
{
void
*
*
mem
=
(
void
*
*
)
ptr
;
if
(
*
mem
)
{
dav1d_free_aligned
(
*
mem
)
;
*
mem
=
NULL
;
}
}
static
inline
void
freep
(
void
*
ptr
)
{
void
*
*
mem
=
(
void
*
*
)
ptr
;
if
(
*
mem
)
{
free
(
*
mem
)
;
*
mem
=
NULL
;
}
}
#
endif
