#
ifndef
__DAV1D_TESTS_CHECKASM_CHECKASM_H
#
define
__DAV1D_TESTS_CHECKASM_CHECKASM_H
#
include
"
config
.
h
"
#
include
<
stdint
.
h
>
#
include
<
stdlib
.
h
>
#
include
"
include
/
common
/
attributes
.
h
"
#
include
"
include
/
common
/
intops
.
h
"
void
checkasm_check_ipred_8bpc
(
void
)
;
void
checkasm_check_ipred_10bpc
(
void
)
;
void
checkasm_check_itx_8bpc
(
void
)
;
void
checkasm_check_itx_10bpc
(
void
)
;
void
checkasm_check_loopfilter_8bpc
(
void
)
;
void
checkasm_check_loopfilter_10bpc
(
void
)
;
void
checkasm_check_looprestoration_8bpc
(
void
)
;
void
checkasm_check_looprestoration_10bpc
(
void
)
;
void
checkasm_check_mc_8bpc
(
void
)
;
void
checkasm_check_mc_10bpc
(
void
)
;
void
*
checkasm_check_func
(
void
*
func
const
char
*
name
.
.
.
)
;
int
checkasm_bench_func
(
void
)
;
void
checkasm_fail_func
(
const
char
*
msg
.
.
.
)
;
void
checkasm_update_bench
(
int
iterations
uint64_t
cycles
)
;
void
checkasm_report
(
const
char
*
name
.
.
.
)
;
int
float_near_ulp
(
float
a
float
b
unsigned
max_ulp
)
;
int
float_near_abs_eps
(
float
a
float
b
float
eps
)
;
int
float_near_abs_eps_ulp
(
float
a
float
b
float
eps
unsigned
max_ulp
)
;
int
float_near_ulp_array
(
const
float
*
a
const
float
*
b
unsigned
max_ulp
int
len
)
;
int
float_near_abs_eps_array
(
const
float
*
a
const
float
*
b
float
eps
int
len
)
;
int
float_near_abs_eps_array_ulp
(
const
float
*
a
const
float
*
b
float
eps
unsigned
max_ulp
int
len
)
;
static
void
*
func_ref
*
func_new
;
#
define
BENCH_RUNS
(
1
<
<
16
)
/
*
Trade
-
off
between
accuracy
and
speed
*
/
#
define
check_func
(
func
.
.
.
)
\
(
func_ref
=
checkasm_check_func
(
(
func_new
=
func
)
__VA_ARGS__
)
)
#
define
declare_func
(
ret
.
.
.
)
\
declare_new
(
ret
__VA_ARGS__
)
typedef
ret
func_type
(
__VA_ARGS__
)
#
define
fail
(
)
checkasm_fail_func
(
"
%
s
:
%
d
"
__FILE__
__LINE__
)
#
define
report
checkasm_report
#
define
call_ref
(
.
.
.
)
(
(
func_type
*
)
func_ref
)
(
__VA_ARGS__
)
#
if
HAVE_ASM
#
if
ARCH_X86
#
ifdef
_MSC_VER
#
include
<
intrin
.
h
>
#
define
readtime
(
)
(
_mm_lfence
(
)
__rdtsc
(
)
)
#
else
static
inline
uint64_t
readtime
(
void
)
{
uint32_t
eax
edx
;
__asm__
__volatile__
(
"
lfence
\
nrdtsc
"
:
"
=
a
"
(
eax
)
"
=
d
"
(
edx
)
)
;
return
(
(
(
uint64_t
)
edx
)
<
<
32
)
|
eax
;
}
#
define
readtime
readtime
#
endif
#
elif
ARCH_AARCH64
#
ifdef
_MSC_VER
#
include
<
windows
.
h
>
#
define
readtime
(
)
(
_InstructionSynchronizationBarrier
(
)
ReadTimeStampCounter
(
)
)
#
else
static
inline
uint64_t
readtime
(
void
)
{
uint64_t
cycle_counter
;
__asm__
__volatile__
(
"
isb
\
nmrs
%
0
pmccntr_el0
"
:
"
=
r
"
(
cycle_counter
)
:
:
"
memory
"
)
;
return
cycle_counter
;
}
#
define
readtime
readtime
#
endif
#
elif
ARCH_ARM
&
&
!
defined
(
_MSC_VER
)
static
inline
uint64_t
readtime
(
void
)
{
uint32_t
cycle_counter
;
__asm__
__volatile__
(
"
isb
\
nmrc
p15
0
%
0
c9
c13
0
"
:
"
=
r
"
(
cycle_counter
)
:
:
"
memory
"
)
;
return
cycle_counter
;
}
#
define
readtime
readtime
#
endif
void
checkasm_checked_call
(
void
*
func
.
.
.
)
;
#
if
ARCH_X86_64
void
checkasm_stack_clobber
(
uint64_t
clobber
.
.
.
)
;
#
define
declare_new
(
ret
.
.
.
)
\
ret
(
*
checked_call
)
(
void
*
int
int
int
int
int
__VA_ARGS__
)
=
\
(
void
*
)
checkasm_checked_call
;
#
define
CLOB
(
UINT64_C
(
0xdeadbeefdeadbeef
)
)
#
define
call_new
(
.
.
.
)
\
(
checkasm_stack_clobber
(
CLOB
CLOB
CLOB
CLOB
CLOB
CLOB
CLOB
\
CLOB
CLOB
CLOB
CLOB
CLOB
CLOB
CLOB
\
CLOB
CLOB
CLOB
CLOB
CLOB
CLOB
CLOB
)
\
checked_call
(
func_new
0
0
0
0
0
__VA_ARGS__
)
)
#
elif
ARCH_X86_32
#
define
declare_new
(
ret
.
.
.
)
\
ret
(
*
checked_call
)
(
void
*
__VA_ARGS__
)
=
(
void
*
)
checkasm_checked_call
;
#
define
call_new
(
.
.
.
)
checked_call
(
func_new
__VA_ARGS__
)
#
elif
ARCH_ARM
void
checkasm_checked_call_vfp
(
void
*
func
int
dummy
.
.
.
)
;
#
define
declare_new
(
ret
.
.
.
)
\
ret
(
*
checked_call
)
(
void
*
int
dummy
__VA_ARGS__
)
=
\
(
void
*
)
checkasm_checked_call_vfp
;
#
define
call_new
(
.
.
.
)
checked_call
(
func_new
0
__VA_ARGS__
)
#
elif
ARCH_AARCH64
&
&
!
defined
(
__APPLE__
)
void
checkasm_stack_clobber
(
uint64_t
clobber
.
.
.
)
;
#
define
declare_new
(
ret
.
.
.
)
\
ret
(
*
checked_call
)
(
void
*
int
int
int
int
int
int
int
\
__VA_ARGS__
)
=
\
(
void
*
)
checkasm_checked_call
;
#
define
CLOB
(
UINT64_C
(
0xdeadbeefdeadbeef
)
)
#
define
call_new
(
.
.
.
)
\
(
checkasm_stack_clobber
(
CLOB
CLOB
CLOB
CLOB
CLOB
CLOB
\
CLOB
CLOB
CLOB
CLOB
CLOB
CLOB
\
CLOB
CLOB
CLOB
CLOB
CLOB
CLOB
\
CLOB
CLOB
CLOB
CLOB
CLOB
)
\
checked_call
(
func_new
0
0
0
0
0
0
0
__VA_ARGS__
)
)
#
else
#
define
declare_new
(
ret
.
.
.
)
#
define
call_new
(
.
.
.
)
(
(
func_type
*
)
func_new
)
(
__VA_ARGS__
)
#
endif
#
else
#
define
declare_new
(
ret
.
.
.
)
#
define
call_new
(
.
.
.
)
(
(
func_type
*
)
func_new
)
(
__VA_ARGS__
)
#
endif
#
ifdef
readtime
#
define
bench_new
(
.
.
.
)
\
do
{
\
if
(
checkasm_bench_func
(
)
)
{
\
func_type
*
tfunc
=
func_new
;
\
uint64_t
tsum
=
0
;
\
int
ti
tcount
=
0
;
\
for
(
ti
=
0
;
ti
<
BENCH_RUNS
;
ti
+
+
)
{
\
uint64_t
t
=
readtime
(
)
;
\
tfunc
(
__VA_ARGS__
)
;
\
tfunc
(
__VA_ARGS__
)
;
\
tfunc
(
__VA_ARGS__
)
;
\
tfunc
(
__VA_ARGS__
)
;
\
t
=
readtime
(
)
-
t
;
\
if
(
t
*
tcount
<
=
tsum
*
4
&
&
ti
>
0
)
{
\
tsum
+
=
t
;
\
tcount
+
+
;
\
}
\
}
\
checkasm_update_bench
(
tcount
tsum
)
;
\
}
\
}
while
(
0
)
#
else
#
define
bench_new
(
.
.
.
)
while
(
0
)
#
endif
#
endif
