#
include
<
inttypes
.
h
>
#
include
<
string
.
h
>
#
include
"
dav1d
/
dav1d
.
h
"
#
include
<
SDL
.
h
>
#
ifdef
HAVE_PLACEBO
#
include
<
libplacebo
/
config
.
h
>
#
endif
#
if
defined
(
HAVE_VULKAN
)
&
&
defined
(
SDL_VIDEO_VULKAN
)
#
if
defined
(
PL_HAVE_VULKAN
)
&
&
PL_HAVE_VULKAN
#
define
HAVE_RENDERER_PLACEBO
#
define
HAVE_PLACEBO_VULKAN
#
endif
#
endif
#
if
defined
(
PL_HAVE_OPENGL
)
&
&
PL_HAVE_OPENGL
#
define
HAVE_RENDERER_PLACEBO
#
define
HAVE_PLACEBO_OPENGL
#
endif
typedef
struct
{
const
char
*
inputfile
;
const
char
*
renderer_name
;
int
highquality
;
int
untimed
;
int
zerocopy
;
int
gpugrain
;
}
Dav1dPlaySettings
;
#
define
WINDOW_WIDTH
910
#
define
WINDOW_HEIGHT
512
enum
{
DAV1D_EVENT_NEW_FRAME
DAV1D_EVENT_SEEK_FRAME
DAV1D_EVENT_DEC_QUIT
}
;
typedef
struct
rdr_info
{
const
char
*
name
;
void
*
cookie
;
void
*
(
*
create_renderer
)
(
)
;
void
(
*
destroy_renderer
)
(
void
*
cookie
)
;
void
(
*
render
)
(
void
*
cookie
const
Dav1dPlaySettings
*
settings
)
;
int
(
*
update_frame
)
(
void
*
cookie
Dav1dPicture
*
dav1d_pic
const
Dav1dPlaySettings
*
settings
)
;
int
(
*
alloc_pic
)
(
Dav1dPicture
*
pic
void
*
cookie
)
;
void
(
*
release_pic
)
(
Dav1dPicture
*
pic
void
*
cookie
)
;
int
supports_gpu_grain
;
}
Dav1dPlayRenderInfo
;
extern
const
Dav1dPlayRenderInfo
rdr_placebo_vk
;
extern
const
Dav1dPlayRenderInfo
rdr_placebo_gl
;
extern
const
Dav1dPlayRenderInfo
rdr_sdl
;
static
const
Dav1dPlayRenderInfo
*
const
dp_renderers
[
]
=
{
&
rdr_placebo_vk
&
rdr_placebo_gl
&
rdr_sdl
}
;
static
inline
const
Dav1dPlayRenderInfo
*
dp_get_renderer
(
const
char
*
name
)
{
for
(
size_t
i
=
0
;
i
<
(
sizeof
(
dp_renderers
)
/
sizeof
(
*
dp_renderers
)
)
;
+
+
i
)
{
if
(
dp_renderers
[
i
]
-
>
name
=
=
NULL
)
continue
;
if
(
name
=
=
NULL
|
|
strcmp
(
name
dp_renderers
[
i
]
-
>
name
)
=
=
0
)
{
return
dp_renderers
[
i
]
;
}
}
return
NULL
;
}
static
inline
SDL_Window
*
dp_create_sdl_window
(
int
window_flags
)
{
SDL_Window
*
win
;
window_flags
|
=
SDL_WINDOW_SHOWN
|
SDL_WINDOW_ALLOW_HIGHDPI
;
win
=
SDL_CreateWindow
(
"
Dav1dPlay
"
SDL_WINDOWPOS_CENTERED
SDL_WINDOWPOS_CENTERED
WINDOW_WIDTH
WINDOW_HEIGHT
window_flags
)
;
SDL_SetWindowResizable
(
win
SDL_TRUE
)
;
return
win
;
}
