#
pragma
once
#
include
<
cstdint
>
#
include
"
types
.
h
"
#
include
"
sse2_gemm
.
h
"
#
include
"
ssse3_gemm
.
h
"
#
include
"
avx2_gemm
.
h
"
#
include
"
avx512_gemm
.
h
"
#
include
"
avx512vnni_gemm
.
h
"
namespace
intgemm
{
void
UnsupportedCPUError
(
)
;
struct
Unsupported_16bit
{
static
void
Quantize
(
const
float
*
int16_t
*
float
Index
)
{
UnsupportedCPUError
(
)
;
}
static
void
PrepareB
(
const
float
*
int16_t
*
float
Index
Index
)
{
UnsupportedCPUError
(
)
;
}
static
void
PrepareBQuantizedTransposed
(
const
int16_t
*
int16_t
*
Index
Index
)
{
UnsupportedCPUError
(
)
;
}
static
void
PrepareBTransposed
(
const
float
*
int16_t
*
float
Index
Index
)
{
UnsupportedCPUError
(
)
;
}
static
void
SelectColumnsB
(
const
int16_t
*
int16_t
*
Index
const
Index
*
const
Index
*
)
{
UnsupportedCPUError
(
)
;
}
template
<
typename
Callback
>
static
void
Multiply
(
const
int16_t
*
const
int16_t
*
Index
Index
Index
Callback
)
{
UnsupportedCPUError
(
)
;
}
constexpr
static
const
char
*
const
kName
=
"
16
-
bit
Unsupported
"
;
}
;
struct
Unsupported_8bit
{
static
void
Quantize
(
const
float
*
int8_t
*
float
Index
)
{
UnsupportedCPUError
(
)
;
}
static
void
QuantizeU
(
const
float
*
uint8_t
*
float
Index
)
{
UnsupportedCPUError
(
)
;
}
static
void
PrepareA
(
const
float
*
int8_t
*
float
Index
Index
)
{
UnsupportedCPUError
(
)
;
}
static
void
PrepareBQuantizedTransposed
(
const
int8_t
*
int8_t
*
Index
Index
)
{
UnsupportedCPUError
(
)
;
}
static
void
PrepareBTransposed
(
const
float
*
int8_t
*
float
Index
Index
)
{
UnsupportedCPUError
(
)
;
}
static
void
PrepareB
(
const
float
*
int8_t
*
float
Index
Index
)
{
UnsupportedCPUError
(
)
;
}
template
<
class
Callback
>
static
void
PrepareBias
(
const
int8_t
*
Index
Index
Callback
)
{
UnsupportedCPUError
(
)
;
}
static
void
SelectColumnsB
(
const
int8_t
*
int8_t
*
Index
const
Index
*
const
Index
*
)
{
UnsupportedCPUError
(
)
;
}
template
<
typename
Callback
>
static
void
Multiply
(
const
int8_t
*
const
int8_t
*
Index
Index
Index
Callback
)
{
UnsupportedCPUError
(
)
;
}
template
<
class
Callback
>
static
void
Multiply8Shift
(
const
uint8_t
*
const
int8_t
*
Index
Index
Index
Callback
)
{
UnsupportedCPUError
(
)
;
}
constexpr
static
const
char
*
const
kName
=
"
8
-
bit
Unsupported
"
;
}
;
#
ifndef
INTGEMM_COMPILER_SUPPORTS_AVX512VNNI
namespace
AVX512VNNI
{
typedef
Unsupported_8bit
Kernels8
;
}
#
endif
#
ifndef
INTGEMM_COMPILER_SUPPORTS_AVX512BW
namespace
AVX512BW
{
typedef
Unsupported_8bit
Kernels8
;
typedef
Unsupported_16bit
Kernels16
;
}
#
endif
#
ifndef
INTGEMM_COMPILER_SUPPORTS_AVX2
namespace
AVX2
{
typedef
Unsupported_8bit
Kernels8
;
typedef
Unsupported_16bit
Kernels16
;
}
#
endif
CPUType
GetCPUID
(
)
;
template
<
class
T
>
T
ChooseCPU
(
T
avx512vnni
T
avx512bw
T
avx2
T
ssse3
T
sse2
T
unsupported
)
{
const
T
ret
[
]
=
{
unsupported
sse2
ssse3
avx2
avx512bw
avx512vnni
}
;
return
ret
[
(
int
)
GetCPUID
(
)
]
;
}
struct
TileInfo
{
const
Index
a_rows
;
const
Index
a_cols
;
const
Index
b_rows
;
const
Index
b_cols
;
}
;
struct
Int8
{
using
Integer
=
int8_t
;
static
constexpr
TileInfo
tile_info
{
1
64
64
8
}
;
static
inline
void
PrepareA
(
const
float
*
input
int8_t
*
output
float
quant_mult
Index
rows
Index
cols
)
{
Quantize
(
input
output
quant_mult
rows
*
cols
)
;
}
static
void
(
*
Quantize
)
(
const
float
*
input
int8_t
*
output
float
quant_mult
Index
size
)
;
static
void
(
*
QuantizeU
)
(
const
float
*
input
uint8_t
*
output
float
quant_mult
Index
size
)
;
static
void
(
*
PrepareB
)
(
const
float
*
input
int8_t
*
output
float
quant_mult
Index
rows
Index
cols
)
;
static
void
(
*
PrepareBQuantizedTransposed
)
(
const
int8_t
*
input
int8_t
*
output
Index
inner
Index
B_untransposed_cols
)
;
static
void
(
*
PrepareBTransposed
)
(
const
float
*
input
int8_t
*
output
float
quant_mul
Index
inner
Index
B_untransposed_cols
)
;
static
void
(
*
SelectColumnsB
)
(
const
int8_t
*
input
int8_t
*
output
Index
rows
const
Index
*
cols_begin
const
Index
*
cols_end
)
;
template
<
typename
Callback
>
static
void
Multiply
(
const
int8_t
*
A
const
int8_t
*
B
Index
A_rows
Index
width
Index
B_cols
Callback
callback
)
{
MultiplyImpl
<
Callback
>
:
:
run
(
A
B
A_rows
width
B_cols
callback
)
;
}
static
const
char
*
const
kName
;
private
:
template
<
typename
Callback
>
struct
MultiplyImpl
{
static
void
(
*
run
)
(
const
int8_t
*
A
const
int8_t
*
B
Index
A_rows
Index
width
Index
B_cols
Callback
callback
)
;
}
;
}
;
template
<
typename
Callback
>
void
(
*
Int8
:
:
MultiplyImpl
<
Callback
>
:
:
run
)
(
const
int8_t
*
A
const
int8_t
*
B
Index
A_rows
Index
width
Index
B_cols
Callback
callback
)
=
ChooseCPU
(
OMPParallelWrap
<
Callback
AVX512VNNI
:
:
Kernels8
>
OMPParallelWrap
<
Callback
AVX512BW
:
:
Kernels8
>
OMPParallelWrap
<
Callback
AVX2
:
:
Kernels8
>
OMPParallelWrap
<
Callback
SSSE3
:
:
Kernels8
>
Unsupported_8bit
:
:
Multiply
<
Callback
>
Unsupported_8bit
:
:
Multiply
<
Callback
>
)
;
struct
Int8Shift
{
using
Integer
=
int8_t
;
static
constexpr
TileInfo
tile_info
{
1
64
64
8
}
;
static
inline
void
PrepareA
(
const
float
*
input
int8_t
*
output
float
quant_mult
Index
rows
Index
cols
)
{
QuantizeU
(
input
reinterpret_cast
<
uint8_t
*
>
(
output
)
quant_mult
rows
*
cols
)
;
}
static
void
(
*
QuantizeU
)
(
const
float
*
input
uint8_t
*
output
float
quant_mult
Index
size
)
;
static
void
PrepareB
(
const
float
*
input
int8_t
*
output
float
quant_mult
Index
rows
Index
cols
)
{
Int8
:
:
PrepareB
(
input
output
quant_mult
rows
cols
)
;
}
static
void
SelectColumnsB
(
const
int8_t
*
input
int8_t
*
output
Index
rows
const
Index
*
cols_begin
const
Index
*
cols_end
)
{
Int8
:
:
SelectColumnsB
(
input
output
rows
cols_begin
cols_end
)
;
}
template
<
class
Callback
>
static
void
Multiply
(
const
int8_t
*
A
const
int8_t
*
B
Index
A_rows
Index
width
Index
B_cols
Callback
callback
)
{
MultiplyImpl
<
Callback
>
:
:
run
(
(
const
uint8_t
*
)
A
B
A_rows
width
B_cols
callback
)
;
}
template
<
class
Callback
>
static
void
PrepareBias
(
const
int8_t
*
B
Index
width
Index
B_cols
Callback
callback
)
{
PrepareBiasImpl
<
Callback
>
:
:
run
(
B
width
B_cols
callback
)
;
}
static
const
char
*
const
kName
;
private
:
template
<
typename
Callback
>
struct
MultiplyImpl
{
static
void
(
*
run
)
(
const
uint8_t
*
A
const
int8_t
*
B
Index
A_rows
Index
width
Index
B_cols
Callback
callback
)
;
}
;
template
<
typename
Callback
>
struct
PrepareBiasImpl
{
static
void
(
*
run
)
(
const
int8_t
*
B
Index
width
Index
B_cols
Callback
callback
)
;
}
;
}
;
template
<
class
Callback
>
void
(
*
Int8Shift
:
:
MultiplyImpl
<
Callback
>
:
:
run
)
(
const
uint8_t
*
A
const
int8_t
*
B
Index
A_rows
Index
width
Index
B_cols
Callback
callback
)
=
ChooseCPU
(
OMPParallelWrap8Shift
<
Callback
AVX512VNNI
:
:
Kernels8
>
OMPParallelWrap8Shift
<
Callback
AVX512BW
:
:
Kernels8
>
OMPParallelWrap8Shift
<
Callback
AVX2
:
:
Kernels8
>
OMPParallelWrap8Shift
<
Callback
SSSE3
:
:
Kernels8
>
Unsupported_8bit
:
:
Multiply8Shift
<
Callback
>
Unsupported_8bit
:
:
Multiply8Shift
<
Callback
>
)
;
template
<
class
Callback
>
void
(
*
Int8Shift
:
:
PrepareBiasImpl
<
Callback
>
:
:
run
)
(
const
int8_t
*
B
Index
width
Index
B_cols
Callback
callback
)
=
ChooseCPU
(
AVX512VNNI
:
:
Kernels8
:
:
PrepareBias
<
Callback
>
AVX512BW
:
:
Kernels8
:
:
PrepareBias
<
Callback
>
AVX2
:
:
Kernels8
:
:
PrepareBias
<
Callback
>
SSSE3
:
:
Kernels8
:
:
PrepareBias
<
Callback
>
SSSE3
:
:
Kernels8
:
:
PrepareBias
<
Callback
>
Unsupported_8bit
:
:
PrepareBias
)
;
struct
Int16
{
using
Integer
=
int16_t
;
static
constexpr
TileInfo
tile_info
{
1
32
32
8
}
;
static
inline
void
PrepareA
(
const
float
*
input
int16_t
*
output
float
quant_mult
Index
rows
Index
cols
)
{
Quantize
(
input
output
quant_mult
rows
*
cols
)
;
}
static
void
(
*
Quantize
)
(
const
float
*
input
int16_t
*
output
float
quant_mult
Index
size
)
;
static
void
(
*
PrepareB
)
(
const
float
*
input
int16_t
*
output
float
quant_mult
Index
rows
Index
cols
)
;
static
void
(
*
PrepareBQuantizedTransposed
)
(
const
int16_t
*
input
int16_t
*
output
Index
inner
Index
B_untransposed_cols
)
;
static
void
(
*
PrepareBTransposed
)
(
const
float
*
input
int16_t
*
output
float
quant_mul
Index
inner
Index
B_untransposed_cols
)
;
static
void
(
*
SelectColumnsB
)
(
const
int16_t
*
input
int16_t
*
output
Index
rows
const
Index
*
cols_begin
const
Index
*
cols_end
)
;
template
<
typename
Callback
>
static
void
Multiply
(
const
int16_t
*
A
const
int16_t
*
B
Index
A_rows
Index
width
Index
B_cols
Callback
callback
)
{
MultiplyImpl
<
Callback
>
:
:
run
(
A
B
A_rows
width
B_cols
callback
)
;
}
static
const
char
*
const
kName
;
private
:
template
<
typename
Callback
>
struct
MultiplyImpl
{
static
void
(
*
run
)
(
const
int16_t
*
A
const
int16_t
*
B
Index
A_rows
Index
width
Index
B_cols
Callback
callback
)
;
}
;
}
;
template
<
typename
Callback
>
void
(
*
Int16
:
:
MultiplyImpl
<
Callback
>
:
:
run
)
(
const
int16_t
*
A
const
int16_t
*
B
Index
A_rows
Index
width
Index
B_cols
Callback
callback
)
=
ChooseCPU
(
OMPParallelWrap
<
Callback
AVX512BW
:
:
Kernels16
>
OMPParallelWrap
<
Callback
AVX512BW
:
:
Kernels16
>
OMPParallelWrap
<
Callback
AVX2
:
:
Kernels16
>
OMPParallelWrap
<
Callback
SSE2
:
:
Kernels16
>
OMPParallelWrap
<
Callback
SSE2
:
:
Kernels16
>
Unsupported_16bit
:
:
Multiply
<
Callback
>
)
;
extern
const
CPUType
kCPU
;
extern
float
(
*
MaxAbsolute
)
(
const
float
*
begin
const
float
*
end
)
;
extern
MeanStd
(
*
VectorMeanStd
)
(
const
float
*
begin
const
float
*
end
bool
)
;
static
inline
MeanStd
GetVectorMeanStd
(
const
float
*
begin
const
float
*
end
bool
absolute
=
false
)
{
return
VectorMeanStd
(
begin
end
absolute
)
;
}
}
