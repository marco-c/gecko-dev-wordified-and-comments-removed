#
pragma
once
#
include
"
intgemm
/
intgemm_config
.
h
"
#
include
<
exception
>
#
ifdef
INTGEMM_COMPILER_SUPPORTS_AVX2
#
include
<
immintrin
.
h
>
#
endif
#
include
<
emmintrin
.
h
>
#
if
defined
(
_MSC_VER
)
&
&
defined
(
__clang__
)
#
include
<
avxintrin
.
h
>
#
include
<
avx2intrin
.
h
>
#
include
<
smmintrin
.
h
>
#
include
<
avx512fintrin
.
h
>
#
include
<
avx512dqintrin
.
h
>
#
include
<
avx512bwintrin
.
h
>
#
include
<
avx512vnniintrin
.
h
>
#
endif
#
if
(
defined
(
_MSC_VER
)
&
&
!
defined
(
__clang__
)
)
|
|
defined
(
__INTEL_COMPILER
)
#
define
INTGEMM_SSE2
#
define
INTGEMM_SSSE3
#
define
INTGEMM_AVX2
#
define
INTGEMM_AVX512F
#
define
INTGEMM_AVX512BW
#
define
INTGEMM_AVX512DQ
#
define
INTGEMM_AVX512VNNI
#
else
#
define
INTGEMM_SSE2
__attribute__
(
(
target
(
"
sse2
"
)
)
)
#
define
INTGEMM_SSSE3
__attribute__
(
(
target
(
"
ssse3
"
)
)
)
#
define
INTGEMM_AVX2
__attribute__
(
(
target
(
"
avx2
"
)
)
)
#
define
INTGEMM_AVX512F
__attribute__
(
(
target
(
"
avx512f
"
)
)
)
#
define
INTGEMM_AVX512BW
__attribute__
(
(
target
(
"
avx512f
avx512bw
avx512dq
"
)
)
)
#
define
INTGEMM_AVX512DQ
__attribute__
(
(
target
(
"
avx512f
avx512bw
avx512dq
"
)
)
)
#
define
INTGEMM_AVX512VNNI
__attribute__
(
(
target
(
"
avx512f
avx512bw
avx512dq
avx512vnni
"
)
)
)
#
endif
namespace
intgemm
{
class
UnsupportedCPU
:
public
std
:
:
exception
{
public
:
UnsupportedCPU
(
)
{
}
~
UnsupportedCPU
(
)
throw
(
)
{
}
const
char
*
what
(
)
const
throw
(
)
override
{
return
"
Integer
matrix
multiplication
has
not
been
efficiently
implemented
for
your
CPU
.
"
;
}
}
;
typedef
unsigned
int
Index
;
enum
class
CPUType
{
UNSUPPORTED
=
0
SSE2
=
1
SSSE3
=
2
AVX2
=
3
AVX512BW
=
4
AVX512VNNI
=
5
}
;
extern
const
CPUType
kCPU
;
struct
MeanStd
{
float
mean
;
float
stddev
;
}
;
#
ifdef
INTGEMM_COMPILER_SUPPORTS_AVX512VNNI
namespace
AVX512VNNI
{
typedef
__m512i
Register
;
typedef
__m512
FRegister
;
}
#
endif
#
ifdef
INTGEMM_COMPILER_SUPPORTS_AVX512BW
namespace
AVX512BW
{
typedef
__m512i
Register
;
typedef
__m512
FRegister
;
}
#
endif
#
ifdef
INTGEMM_COMPILER_SUPPORTS_AVX2
namespace
AVX2
{
typedef
__m256i
Register
;
typedef
__m256
FRegister
;
}
#
endif
namespace
SSSE3
{
typedef
__m128i
Register
;
typedef
__m128
FRegister
;
}
namespace
SSE2
{
typedef
__m128i
Register
;
typedef
__m128
FRegister
;
}
}
