#
ifndef
AES_GCM_H
#
define
AES_GCM_H
#
include
"
cipher
.
h
"
#
include
"
srtp
.
h
"
#
include
"
datatypes
.
h
"
#
ifdef
OPENSSL
#
include
<
openssl
/
evp
.
h
>
#
include
<
openssl
/
aes
.
h
>
typedef
struct
{
int
key_size
;
int
tag_len
;
EVP_CIPHER_CTX
*
ctx
;
srtp_cipher_direction_t
dir
;
}
srtp_aes_gcm_ctx_t
;
#
endif
#
ifdef
MBEDTLS
#
define
MAX_AD_SIZE
2048
#
include
<
mbedtls
/
aes
.
h
>
#
include
<
mbedtls
/
gcm
.
h
>
typedef
struct
{
int
key_size
;
int
tag_len
;
int
aad_size
;
int
iv_len
;
uint8_t
iv
[
12
]
;
uint8_t
tag
[
16
]
;
uint8_t
aad
[
MAX_AD_SIZE
]
;
mbedtls_gcm_context
*
ctx
;
srtp_cipher_direction_t
dir
;
}
srtp_aes_gcm_ctx_t
;
#
endif
#
ifdef
NSS
#
define
NSS_PKCS11_2_0_COMPAT
1
#
include
<
nss
.
h
>
#
include
<
pk11pub
.
h
>
#
define
MAX_AD_SIZE
2048
typedef
struct
{
int
key_size
;
int
tag_size
;
srtp_cipher_direction_t
dir
;
NSSInitContext
*
nss
;
PK11SymKey
*
key
;
uint8_t
iv
[
12
]
;
uint8_t
aad
[
MAX_AD_SIZE
]
;
int
aad_size
;
CK_GCM_PARAMS
params
;
uint8_t
tag
[
16
]
;
}
srtp_aes_gcm_ctx_t
;
#
endif
#
endif
