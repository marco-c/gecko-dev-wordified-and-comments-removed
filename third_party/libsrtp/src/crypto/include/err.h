#
ifndef
ERR_H
#
define
ERR_H
#
include
<
stdio
.
h
>
#
include
<
stdarg
.
h
>
#
include
"
srtp
.
h
"
#
if
defined
(
__clang__
)
|
|
(
defined
(
__GNUC__
)
&
&
defined
(
__has_attribute
)
)
#
if
__has_attribute
(
format
)
#
define
LIBSRTP_FORMAT_PRINTF
(
fmt
args
)
\
__attribute__
(
(
format
(
__printf__
fmt
args
)
)
)
#
else
#
define
LIBSRTP_FORMAT_PRINTF
(
fmt
args
)
#
endif
#
else
#
define
LIBSRTP_FORMAT_PRINTF
(
fmt
args
)
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
enum
{
srtp_err_level_error
srtp_err_level_warning
srtp_err_level_info
srtp_err_level_debug
}
srtp_err_reporting_level_t
;
srtp_err_status_t
srtp_err_reporting_init
(
void
)
;
typedef
void
(
srtp_err_report_handler_func_t
)
(
srtp_err_reporting_level_t
level
const
char
*
msg
)
;
srtp_err_status_t
srtp_install_err_report_handler
(
srtp_err_report_handler_func_t
func
)
;
void
srtp_err_report
(
srtp_err_reporting_level_t
level
const
char
*
format
.
.
.
)
LIBSRTP_FORMAT_PRINTF
(
2
3
)
;
typedef
struct
{
int
on
;
const
char
*
name
;
}
srtp_debug_module_t
;
#
ifdef
ENABLE_DEBUG_LOGGING
#
define
debug_print0
(
mod
format
)
\
srtp_err_report
(
srtp_err_level_debug
(
"
%
s
:
"
format
"
\
n
"
)
mod
.
name
)
#
define
debug_print
(
mod
format
arg
)
\
srtp_err_report
(
srtp_err_level_debug
(
"
%
s
:
"
format
"
\
n
"
)
mod
.
name
arg
)
#
define
debug_print2
(
mod
format
arg1
arg2
)
\
srtp_err_report
(
srtp_err_level_debug
(
"
%
s
:
"
format
"
\
n
"
)
mod
.
name
\
arg1
arg2
)
#
else
#
define
debug_print0
(
mod
format
)
\
if
(
mod
.
on
)
\
srtp_err_report
(
srtp_err_level_debug
(
"
%
s
:
"
format
"
\
n
"
)
mod
.
name
)
#
define
debug_print
(
mod
format
arg
)
\
if
(
mod
.
on
)
\
srtp_err_report
(
srtp_err_level_debug
(
"
%
s
:
"
format
"
\
n
"
)
mod
.
name
arg
)
#
define
debug_print2
(
mod
format
arg1
arg2
)
\
if
(
mod
.
on
)
\
srtp_err_report
(
srtp_err_level_debug
(
"
%
s
:
"
format
"
\
n
"
)
mod
.
name
\
arg1
arg2
)
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
