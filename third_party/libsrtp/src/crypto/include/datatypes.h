#
ifndef
DATATYPES_H
#
define
DATATYPES_H
#
include
"
integers
.
h
"
#
include
"
alloc
.
h
"
#
include
<
stdarg
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
<
time
.
h
>
#
ifdef
HAVE_NETINET_IN_H
#
include
<
netinet
/
in
.
h
>
#
elif
defined
HAVE_WINSOCK2_H
#
include
<
winsock2
.
h
>
#
else
#
error
"
Platform
not
recognized
"
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
union
{
uint8_t
v8
[
16
]
;
uint16_t
v16
[
8
]
;
uint32_t
v32
[
4
]
;
uint64_t
v64
[
2
]
;
}
v128_t
;
#
define
MAX_PRINT_STRING_LEN
1024
char
*
srtp_octet_string_hex_string
(
const
void
*
str
int
length
)
;
char
*
v128_bit_string
(
v128_t
*
x
)
;
char
*
v128_hex_string
(
v128_t
*
x
)
;
void
v128_copy_octet_string
(
v128_t
*
x
const
uint8_t
s
[
16
]
)
;
void
v128_left_shift
(
v128_t
*
x
int
shift_index
)
;
#
define
v128_set_to_zero
(
x
)
\
(
(
x
)
-
>
v32
[
0
]
=
0
(
x
)
-
>
v32
[
1
]
=
0
(
x
)
-
>
v32
[
2
]
=
0
(
x
)
-
>
v32
[
3
]
=
0
)
#
define
v128_copy
(
x
y
)
\
(
(
x
)
-
>
v32
[
0
]
=
(
y
)
-
>
v32
[
0
]
(
x
)
-
>
v32
[
1
]
=
(
y
)
-
>
v32
[
1
]
\
(
x
)
-
>
v32
[
2
]
=
(
y
)
-
>
v32
[
2
]
(
x
)
-
>
v32
[
3
]
=
(
y
)
-
>
v32
[
3
]
)
#
define
v128_xor
(
z
x
y
)
\
(
(
z
)
-
>
v32
[
0
]
=
(
x
)
-
>
v32
[
0
]
^
(
y
)
-
>
v32
[
0
]
\
(
z
)
-
>
v32
[
1
]
=
(
x
)
-
>
v32
[
1
]
^
(
y
)
-
>
v32
[
1
]
\
(
z
)
-
>
v32
[
2
]
=
(
x
)
-
>
v32
[
2
]
^
(
y
)
-
>
v32
[
2
]
\
(
z
)
-
>
v32
[
3
]
=
(
x
)
-
>
v32
[
3
]
^
(
y
)
-
>
v32
[
3
]
)
#
ifdef
NO_64BIT_MATH
#
define
v128_xor_eq
(
z
x
)
\
(
(
z
)
-
>
v32
[
0
]
^
=
(
x
)
-
>
v32
[
0
]
(
z
)
-
>
v32
[
1
]
^
=
(
x
)
-
>
v32
[
1
]
\
(
z
)
-
>
v32
[
2
]
^
=
(
x
)
-
>
v32
[
2
]
(
z
)
-
>
v32
[
3
]
^
=
(
x
)
-
>
v32
[
3
]
)
#
else
#
define
v128_xor_eq
(
z
x
)
\
(
(
z
)
-
>
v64
[
0
]
^
=
(
x
)
-
>
v64
[
0
]
(
z
)
-
>
v64
[
1
]
^
=
(
x
)
-
>
v64
[
1
]
)
#
endif
#
define
v128_get_bit
(
x
bit
)
(
(
(
(
(
x
)
-
>
v32
[
(
bit
)
>
>
5
]
)
>
>
(
(
bit
)
&
31
)
)
&
1
)
)
#
define
v128_set_bit
(
x
bit
)
\
(
(
(
(
x
)
-
>
v32
[
(
bit
)
>
>
5
]
)
|
=
(
(
uint32_t
)
1
<
<
(
(
bit
)
&
31
)
)
)
)
#
define
v128_clear_bit
(
x
bit
)
\
(
(
(
(
x
)
-
>
v32
[
(
bit
)
>
>
5
]
)
&
=
~
(
(
uint32_t
)
1
<
<
(
(
bit
)
&
31
)
)
)
)
int
srtp_octet_string_is_eq
(
uint8_t
*
a
uint8_t
*
b
int
len
)
;
void
srtp_cleanse
(
void
*
s
size_t
len
)
;
void
octet_string_set_to_zero
(
void
*
s
size_t
len
)
;
#
if
defined
(
HAVE_CONFIG_H
)
#
ifdef
WORDS_BIGENDIAN
#
define
be32_to_cpu
(
x
)
(
x
)
#
define
be64_to_cpu
(
x
)
(
x
)
#
elif
defined
(
HAVE_BYTESWAP_H
)
#
include
<
byteswap
.
h
>
#
define
be32_to_cpu
(
x
)
bswap_32
(
(
x
)
)
#
define
be64_to_cpu
(
x
)
bswap_64
(
(
x
)
)
#
elif
defined
(
__APPLE__
)
#
include
<
libkern
/
OSByteOrder
.
h
>
#
define
be32_to_cpu
(
x
)
OSSwapInt32
(
x
)
#
define
be64_to_cpu
(
x
)
OSSwapInt64
(
x
)
#
else
#
if
defined
(
__GNUC__
)
&
&
(
defined
(
HAVE_X86
)
|
|
defined
(
__x86_64__
)
)
static
inline
uint32_t
be32_to_cpu
(
uint32_t
v
)
{
asm
(
"
bswap
%
0
"
:
"
=
r
"
(
v
)
:
"
0
"
(
v
)
)
;
return
v
;
}
#
else
#
ifdef
HAVE_NETINET_IN_H
#
include
<
netinet
/
in
.
h
>
#
elif
defined
HAVE_WINSOCK2_H
#
include
<
winsock2
.
h
>
#
endif
#
define
be32_to_cpu
(
x
)
ntohl
(
(
x
)
)
#
endif
static
inline
uint64_t
be64_to_cpu
(
uint64_t
v
)
{
#
ifdef
NO_64BIT_MATH
v
=
make64
(
htonl
(
low32
(
v
)
)
htonl
(
high32
(
v
)
)
)
;
#
else
v
=
(
uint64_t
)
(
(
be32_to_cpu
(
(
uint32_t
)
(
v
>
>
32
)
)
)
|
(
(
(
uint64_t
)
be32_to_cpu
(
(
uint32_t
)
v
)
)
<
<
32
)
)
;
#
endif
return
v
;
}
#
endif
#
endif
#
define
bits_per_word
32
#
define
bytes_per_word
4
typedef
struct
{
uint32_t
length
;
uint32_t
*
word
;
}
bitvector_t
;
#
define
bitvector_get_bit
(
v
bit_index
)
\
(
(
(
(
(
v
)
-
>
word
[
(
(
bit_index
)
>
>
5
)
]
)
>
>
(
(
bit_index
)
&
31
)
)
&
1
)
)
#
define
bitvector_set_bit
(
v
bit_index
)
\
(
(
(
(
v
)
-
>
word
[
(
(
bit_index
)
>
>
5
)
]
|
=
(
(
uint32_t
)
1
<
<
(
(
bit_index
)
&
31
)
)
)
)
)
#
define
bitvector_get_length
(
v
)
(
(
(
v
)
-
>
length
)
)
int
bitvector_alloc
(
bitvector_t
*
v
unsigned
long
length
)
;
void
bitvector_dealloc
(
bitvector_t
*
v
)
;
void
bitvector_set_to_zero
(
bitvector_t
*
x
)
;
void
bitvector_left_shift
(
bitvector_t
*
x
int
index
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
