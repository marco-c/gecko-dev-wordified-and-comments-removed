#
ifndef
RDBX_H
#
define
RDBX_H
#
include
"
datatypes
.
h
"
#
include
"
err
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
ifndef
ROC_TEST
typedef
uint16_t
srtp_sequence_number_t
;
typedef
uint32_t
srtp_rollover_counter_t
;
#
else
typedef
unsigned
char
srtp_sequence_number_t
;
typedef
uint16_t
srtp_rollover_counter_t
;
#
endif
#
define
seq_num_median
(
1
<
<
(
8
*
sizeof
(
srtp_sequence_number_t
)
-
1
)
)
#
define
seq_num_max
(
1
<
<
(
8
*
sizeof
(
srtp_sequence_number_t
)
)
)
typedef
uint64_t
srtp_xtd_seq_num_t
;
typedef
struct
{
srtp_xtd_seq_num_t
index
;
bitvector_t
bitmask
;
}
srtp_rdbx_t
;
srtp_err_status_t
srtp_rdbx_init
(
srtp_rdbx_t
*
rdbx
unsigned
long
ws
)
;
srtp_err_status_t
srtp_rdbx_dealloc
(
srtp_rdbx_t
*
rdbx
)
;
int32_t
srtp_rdbx_estimate_index
(
const
srtp_rdbx_t
*
rdbx
srtp_xtd_seq_num_t
*
guess
srtp_sequence_number_t
s
)
;
srtp_err_status_t
srtp_rdbx_check
(
const
srtp_rdbx_t
*
rdbx
int
difference
)
;
srtp_err_status_t
srtp_rdbx_add_index
(
srtp_rdbx_t
*
rdbx
int
delta
)
;
srtp_err_status_t
srtp_rdbx_set_roc
(
srtp_rdbx_t
*
rdbx
uint32_t
roc
)
;
srtp_xtd_seq_num_t
srtp_rdbx_get_packet_index
(
const
srtp_rdbx_t
*
rdbx
)
;
unsigned
long
srtp_rdbx_get_window_size
(
const
srtp_rdbx_t
*
rdbx
)
;
void
srtp_index_init
(
srtp_xtd_seq_num_t
*
pi
)
;
void
srtp_index_advance
(
srtp_xtd_seq_num_t
*
pi
srtp_sequence_number_t
s
)
;
int32_t
srtp_index_guess
(
const
srtp_xtd_seq_num_t
*
local
srtp_xtd_seq_num_t
*
guess
srtp_sequence_number_t
s
)
;
uint32_t
srtp_rdbx_get_roc
(
const
srtp_rdbx_t
*
rdbx
)
;
srtp_err_status_t
srtp_rdbx_set_roc_seq
(
srtp_rdbx_t
*
rdbx
uint32_t
roc
uint16_t
seq
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
