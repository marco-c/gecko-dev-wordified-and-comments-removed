#
ifndef
FROZEN_LETITGO_ELSA_H
#
define
FROZEN_LETITGO_ELSA_H
#
include
<
type_traits
>
namespace
frozen
{
template
<
class
T
=
void
>
struct
elsa
{
static_assert
(
std
:
:
is_integral
<
T
>
:
:
value
|
|
std
:
:
is_enum
<
T
>
:
:
value
"
only
supports
integral
types
specialize
for
other
types
"
)
;
constexpr
std
:
:
size_t
operator
(
)
(
T
const
&
value
std
:
:
size_t
seed
)
const
{
std
:
:
size_t
key
=
seed
^
static_cast
<
std
:
:
size_t
>
(
value
)
;
key
=
(
~
key
)
+
(
key
<
<
21
)
;
key
=
key
^
(
key
>
>
24
)
;
key
=
(
key
+
(
key
<
<
3
)
)
+
(
key
<
<
8
)
;
key
=
key
^
(
key
>
>
14
)
;
key
=
(
key
+
(
key
<
<
2
)
)
+
(
key
<
<
4
)
;
key
=
key
^
(
key
>
>
28
)
;
key
=
key
+
(
key
<
<
31
)
;
return
key
;
}
}
;
template
<
>
struct
elsa
<
void
>
{
template
<
class
T
>
constexpr
std
:
:
size_t
operator
(
)
(
T
const
&
value
std
:
:
size_t
seed
)
const
{
return
elsa
<
T
>
{
}
(
value
seed
)
;
}
}
;
template
<
class
T
=
void
>
using
anna
=
elsa
<
T
>
;
}
#
endif
