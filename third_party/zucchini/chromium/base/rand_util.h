#
ifndef
BASE_RAND_UTIL_H_
#
define
BASE_RAND_UTIL_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
algorithm
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
compiler_specific
.
h
"
#
include
"
base
/
gtest_prod_util
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
!
defined
(
MOZ_ZUCCHINI
)
#
if
!
BUILDFLAG
(
IS_NACL
)
#
include
"
third_party
/
boringssl
/
src
/
include
/
openssl
/
rand
.
h
"
#
endif
#
endif
namespace
memory_simulator
{
class
MemoryHolder
;
}
namespace
base
{
namespace
internal
{
#
if
BUILDFLAG
(
IS_ANDROID
)
void
ConfigureRandBytesFieldTrial
(
)
;
#
endif
#
if
!
defined
(
MOZ_ZUCCHINI
)
#
if
!
BUILDFLAG
(
IS_NACL
)
void
ConfigureBoringSSLBackedRandBytesFieldTrial
(
)
;
#
endif
#
endif
BASE_EXPORT
double
RandDoubleAvoidAllocation
(
)
;
}
BASE_EXPORT
uint64_t
RandUint64
(
)
;
BASE_EXPORT
int
RandInt
(
int
min
int
max
)
;
BASE_EXPORT
uint64_t
RandGenerator
(
uint64_t
range
)
;
BASE_EXPORT
double
RandDouble
(
)
;
BASE_EXPORT
float
RandFloat
(
)
;
BASE_EXPORT
double
BitsToOpenEndedUnitInterval
(
uint64_t
bits
)
;
BASE_EXPORT
float
BitsToOpenEndedUnitIntervalF
(
uint64_t
bits
)
;
BASE_EXPORT
void
RandBytes
(
void
*
output
size_t
output_length
)
;
BASE_EXPORT
std
:
:
string
RandBytesAsString
(
size_t
length
)
;
class
RandomBitGenerator
{
public
:
using
result_type
=
uint64_t
;
static
constexpr
result_type
min
(
)
{
return
0
;
}
static
constexpr
result_type
max
(
)
{
return
UINT64_MAX
;
}
result_type
operator
(
)
(
)
const
{
return
RandUint64
(
)
;
}
RandomBitGenerator
(
)
=
default
;
~
RandomBitGenerator
(
)
=
default
;
}
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
#
if
!
BUILDFLAG
(
IS_NACL
)
class
NonAllocatingRandomBitGenerator
{
public
:
using
result_type
=
uint64_t
;
static
constexpr
result_type
min
(
)
{
return
0
;
}
static
constexpr
result_type
max
(
)
{
return
UINT64_MAX
;
}
result_type
operator
(
)
(
)
const
{
uint64_t
result
;
RAND_get_system_entropy_for_custom_prng
(
reinterpret_cast
<
uint8_t
*
>
(
&
result
)
sizeof
(
result
)
)
;
return
result
;
}
NonAllocatingRandomBitGenerator
(
)
=
default
;
~
NonAllocatingRandomBitGenerator
(
)
=
default
;
}
;
#
endif
#
endif
template
<
typename
Itr
>
void
RandomShuffle
(
Itr
first
Itr
last
)
{
std
:
:
shuffle
(
first
last
RandomBitGenerator
(
)
)
;
}
#
if
BUILDFLAG
(
IS_POSIX
)
BASE_EXPORT
int
GetUrandomFD
(
)
;
#
endif
class
MetricsSubSampler
;
class
BASE_EXPORT
InsecureRandomGenerator
{
public
:
void
ReseedForTesting
(
uint64_t
seed
)
;
uint32_t
RandUint32
(
)
;
uint64_t
RandUint64
(
)
;
double
RandDouble
(
)
;
private
:
InsecureRandomGenerator
(
)
;
uint64_t
a_
=
0
b_
=
0
;
friend
class
memory_simulator
:
:
MemoryHolder
;
friend
class
MetricsSubSampler
;
FRIEND_TEST_ALL_PREFIXES
(
RandUtilTest
InsecureRandomGeneratorProducesBothValuesOfAllBits
)
;
FRIEND_TEST_ALL_PREFIXES
(
RandUtilTest
InsecureRandomGeneratorChiSquared
)
;
FRIEND_TEST_ALL_PREFIXES
(
RandUtilTest
InsecureRandomGeneratorRandDouble
)
;
FRIEND_TEST_ALL_PREFIXES
(
RandUtilPerfTest
InsecureRandomRandUint64
)
;
}
;
class
BASE_EXPORT
MetricsSubSampler
{
public
:
MetricsSubSampler
(
)
;
bool
ShouldSample
(
double
probability
)
;
class
BASE_EXPORT
ScopedDisableForTesting
{
public
:
ScopedDisableForTesting
(
)
;
~
ScopedDisableForTesting
(
)
;
}
;
private
:
InsecureRandomGenerator
generator_
;
}
;
}
#
endif
