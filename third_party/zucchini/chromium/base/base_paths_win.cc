#
include
<
windows
.
h
>
#
include
<
KnownFolders
.
h
>
#
include
<
shlobj
.
h
>
#
include
"
base
/
base_paths
.
h
"
#
if
!
defined
(
MOZ_ZUCCHINI
)
#
include
"
base
/
environment
.
h
"
#
endif
#
include
"
base
/
files
/
file_path
.
h
"
#
if
defined
(
MOZ_ZUCCHINI
)
#
include
"
base
/
notreached
.
h
"
#
endif
#
include
"
base
/
path_service
.
h
"
#
include
"
base
/
strings
/
string_util
.
h
"
#
include
"
base
/
strings
/
utf_string_conversions
.
h
"
#
include
"
base
/
win
/
current_module
.
h
"
#
if
!
defined
(
MOZ_ZUCCHINI
)
#
include
"
base
/
win
/
scoped_co_mem
.
h
"
#
endif
#
include
"
base
/
win
/
windows_version
.
h
"
using
base
:
:
FilePath
;
namespace
base
{
bool
PathProviderWin
(
int
key
FilePath
*
result
)
{
wchar_t
system_buffer
[
MAX_PATH
]
;
system_buffer
[
0
]
=
0
;
FilePath
cur
;
switch
(
key
)
{
case
base
:
:
FILE_EXE
:
if
(
GetModuleFileName
(
NULL
system_buffer
MAX_PATH
)
=
=
0
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
FILE_MODULE
:
{
if
(
GetModuleFileName
(
CURRENT_MODULE
(
)
system_buffer
MAX_PATH
)
=
=
0
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
}
case
base
:
:
DIR_WINDOWS
:
GetWindowsDirectory
(
system_buffer
MAX_PATH
)
;
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
DIR_SYSTEM
:
GetSystemDirectory
(
system_buffer
MAX_PATH
)
;
cur
=
FilePath
(
system_buffer
)
;
break
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
case
base
:
:
DIR_PROGRAM_FILESX86
:
if
(
win
:
:
OSInfo
:
:
GetArchitecture
(
)
!
=
win
:
:
OSInfo
:
:
X86_ARCHITECTURE
)
{
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_PROGRAM_FILESX86
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
}
[
[
fallthrough
]
]
;
#
endif
case
base
:
:
DIR_PROGRAM_FILES
:
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_PROGRAM_FILES
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
case
base
:
:
DIR_PROGRAM_FILES6432
:
#
if
!
defined
(
_WIN64
)
if
(
base
:
:
win
:
:
OSInfo
:
:
GetInstance
(
)
-
>
IsWowX86OnAMD64
(
)
)
{
std
:
:
unique_ptr
<
base
:
:
Environment
>
env
(
base
:
:
Environment
:
:
Create
(
)
)
;
std
:
:
string
programfiles_w6432
;
if
(
!
env
-
>
GetVar
(
"
ProgramW6432
"
&
programfiles_w6432
)
)
return
false
;
cur
=
FilePath
(
UTF8ToWide
(
programfiles_w6432
)
)
;
break
;
}
#
endif
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_PROGRAM_FILES
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
#
endif
case
base
:
:
DIR_IE_INTERNET_CACHE
:
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_INTERNET_CACHE
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
DIR_COMMON_START_MENU
:
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_COMMON_PROGRAMS
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
DIR_START_MENU
:
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_PROGRAMS
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
DIR_COMMON_STARTUP
:
if
(
FAILED
(
SHGetFolderPath
(
nullptr
CSIDL_COMMON_STARTUP
nullptr
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
DIR_USER_STARTUP
:
if
(
FAILED
(
SHGetFolderPath
(
nullptr
CSIDL_STARTUP
nullptr
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
DIR_ROAMING_APP_DATA
:
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_APPDATA
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
DIR_COMMON_APP_DATA
:
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_COMMON_APPDATA
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
DIR_LOCAL_APP_DATA
:
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_LOCAL_APPDATA
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
return
false
;
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
DIR_SRC_TEST_DATA_ROOT
:
{
FilePath
executableDir
;
PathService
:
:
Get
(
base
:
:
DIR_EXE
&
executableDir
)
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
cur
=
executableDir
.
DirName
(
)
.
DirName
(
)
;
#
else
cur
=
executableDir
.
DirName
(
)
.
DirName
(
)
.
DirName
(
)
;
#
endif
break
;
}
case
base
:
:
DIR_APP_SHORTCUTS
:
{
#
if
!
defined
(
MOZ_ZUCCHINI
)
base
:
:
win
:
:
ScopedCoMem
<
wchar_t
>
path_buf
;
if
(
FAILED
(
SHGetKnownFolderPath
(
FOLDERID_ApplicationShortcuts
0
NULL
&
path_buf
)
)
)
return
false
;
cur
=
FilePath
(
path_buf
.
get
(
)
)
;
break
;
#
else
NOTREACHED
(
)
;
return
false
;
#
endif
}
#
if
!
defined
(
MOZ_ZUCCHINI
)
case
base
:
:
DIR_USER_DESKTOP
:
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_DESKTOPDIRECTORY
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
{
return
false
;
}
cur
=
FilePath
(
system_buffer
)
;
break
;
#
endif
case
base
:
:
DIR_COMMON_DESKTOP
:
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_COMMON_DESKTOPDIRECTORY
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
{
return
false
;
}
cur
=
FilePath
(
system_buffer
)
;
break
;
case
base
:
:
DIR_USER_QUICK_LAUNCH
:
if
(
!
PathService
:
:
Get
(
base
:
:
DIR_ROAMING_APP_DATA
&
cur
)
)
return
false
;
cur
=
cur
.
Append
(
FILE_PATH_LITERAL
(
"
Microsoft
"
)
)
.
Append
(
FILE_PATH_LITERAL
(
"
Internet
Explorer
"
)
)
.
Append
(
FILE_PATH_LITERAL
(
"
Quick
Launch
"
)
)
;
break
;
case
base
:
:
DIR_TASKBAR_PINS
:
{
if
(
!
PathService
:
:
Get
(
base
:
:
DIR_USER_QUICK_LAUNCH
&
cur
)
)
return
false
;
cur
=
cur
.
Append
(
FILE_PATH_LITERAL
(
"
User
Pinned
"
)
)
.
Append
(
FILE_PATH_LITERAL
(
"
TaskBar
"
)
)
;
break
;
}
case
base
:
:
DIR_IMPLICIT_APP_SHORTCUTS
:
if
(
!
PathService
:
:
Get
(
base
:
:
DIR_USER_QUICK_LAUNCH
&
cur
)
)
return
false
;
cur
=
cur
.
Append
(
FILE_PATH_LITERAL
(
"
User
Pinned
"
)
)
.
Append
(
FILE_PATH_LITERAL
(
"
ImplicitAppShortcuts
"
)
)
;
break
;
case
base
:
:
DIR_WINDOWS_FONTS
:
if
(
FAILED
(
SHGetFolderPath
(
NULL
CSIDL_FONTS
NULL
SHGFP_TYPE_CURRENT
system_buffer
)
)
)
{
return
false
;
}
cur
=
FilePath
(
system_buffer
)
;
break
;
default
:
return
false
;
}
*
result
=
cur
;
return
true
;
}
}
