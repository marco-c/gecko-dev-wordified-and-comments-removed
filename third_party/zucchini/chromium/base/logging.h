#
ifndef
BASE_LOGGING_H_
#
define
BASE_LOGGING_H_
#
include
<
stddef
.
h
>
#
include
<
cassert
>
#
include
<
cstdint
>
#
include
<
sstream
>
#
include
<
string
>
#
include
<
string_view
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
compiler_specific
.
h
"
#
include
"
base
/
dcheck_is_on
.
h
"
#
include
"
base
/
functional
/
callback_forward
.
h
"
#
include
"
base
/
logging_buildflags
.
h
"
#
include
"
base
/
scoped_clear_last_error
.
h
"
#
include
"
base
/
strings
/
string_piece_forward
.
h
"
#
include
"
base
/
strings
/
utf_ostream_operators
.
h
"
#
include
"
build
/
build_config
.
h
"
#
include
"
build
/
chromeos_buildflags
.
h
"
#
if
BUILDFLAG
(
IS_CHROMEOS
)
#
include
<
cstdio
>
#
endif
namespace
logging
{
#
if
BUILDFLAG
(
IS_WIN
)
typedef
wchar_t
PathChar
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
typedef
char
PathChar
;
#
endif
using
LoggingDestination
=
uint32_t
;
enum
:
uint32_t
{
LOG_NONE
=
0
LOG_TO_FILE
=
1
<
<
0
LOG_TO_SYSTEM_DEBUG_LOG
=
1
<
<
1
LOG_TO_STDERR
=
1
<
<
2
LOG_TO_ALL
=
LOG_TO_FILE
|
LOG_TO_SYSTEM_DEBUG_LOG
|
LOG_TO_STDERR
#
if
BUILDFLAG
(
IS_FUCHSIA
)
|
|
BUILDFLAG
(
IS_NACL
)
LOG_DEFAULT
=
LOG_TO_SYSTEM_DEBUG_LOG
#
elif
BUILDFLAG
(
IS_WIN
)
LOG_DEFAULT
=
LOG_TO_FILE
#
elif
BUILDFLAG
(
IS_POSIX
)
LOG_DEFAULT
=
LOG_TO_SYSTEM_DEBUG_LOG
|
LOG_TO_STDERR
#
endif
}
;
enum
LogLockingState
{
LOCK_LOG_FILE
DONT_LOCK_LOG_FILE
}
;
enum
OldFileDeletionState
{
DELETE_OLD_LOG_FILE
APPEND_TO_OLD_LOG_FILE
}
;
#
if
BUILDFLAG
(
IS_CHROMEOS
)
enum
class
BASE_EXPORT
LogFormat
{
LOG_FORMAT_CHROME
LOG_FORMAT_SYSLOG
}
;
#
endif
struct
BASE_EXPORT
LoggingSettings
{
uint32_t
logging_dest
=
LOG_DEFAULT
;
const
PathChar
*
log_file_path
=
nullptr
;
LogLockingState
lock_log
=
LOCK_LOG_FILE
;
OldFileDeletionState
delete_old
=
APPEND_TO_OLD_LOG_FILE
;
#
if
BUILDFLAG
(
IS_CHROMEOS
)
FILE
*
log_file
=
nullptr
;
LogFormat
log_format
=
LogFormat
:
:
LOG_FORMAT_SYSLOG
;
#
endif
}
;
#
if
defined
(
NDEBUG
)
#
define
BaseInitLoggingImpl
BaseInitLoggingImpl_built_with_NDEBUG
#
else
#
define
BaseInitLoggingImpl
BaseInitLoggingImpl_built_without_NDEBUG
#
endif
BASE_EXPORT
bool
BaseInitLoggingImpl
(
const
LoggingSettings
&
settings
)
;
inline
bool
InitLogging
(
const
LoggingSettings
&
settings
)
{
return
BaseInitLoggingImpl
(
settings
)
;
}
BASE_EXPORT
void
SetMinLogLevel
(
int
level
)
;
BASE_EXPORT
int
GetMinLogLevel
(
)
;
BASE_EXPORT
bool
ShouldCreateLogMessage
(
int
severity
)
;
BASE_EXPORT
int
GetVlogVerbosity
(
)
;
BASE_EXPORT
int
GetVlogLevelHelper
(
const
char
*
file_start
size_t
N
)
;
template
<
size_t
N
>
int
GetVlogLevel
(
const
char
(
&
file
)
[
N
]
)
{
return
GetVlogLevelHelper
(
file
N
)
;
}
BASE_EXPORT
void
SetLogItems
(
bool
enable_process_id
bool
enable_thread_id
bool
enable_timestamp
bool
enable_tickcount
)
;
BASE_EXPORT
void
SetLogPrefix
(
const
char
*
prefix
)
;
BASE_EXPORT
void
SetShowErrorDialogs
(
bool
enable_dialogs
)
;
using
LogAssertHandlerFunction
=
base
:
:
RepeatingCallback
<
void
(
const
char
*
file
int
line
const
base
:
:
StringPiece
message
const
base
:
:
StringPiece
stack_trace
)
>
;
class
BASE_EXPORT
ScopedLogAssertHandler
{
public
:
explicit
ScopedLogAssertHandler
(
LogAssertHandlerFunction
handler
)
;
ScopedLogAssertHandler
(
const
ScopedLogAssertHandler
&
)
=
delete
;
ScopedLogAssertHandler
&
operator
=
(
const
ScopedLogAssertHandler
&
)
=
delete
;
~
ScopedLogAssertHandler
(
)
;
}
;
typedef
bool
(
*
LogMessageHandlerFunction
)
(
int
severity
const
char
*
file
int
line
size_t
message_start
const
std
:
:
string
&
str
)
;
BASE_EXPORT
void
SetLogMessageHandler
(
LogMessageHandlerFunction
handler
)
;
BASE_EXPORT
LogMessageHandlerFunction
GetLogMessageHandler
(
)
;
using
LogSeverity
=
int
;
constexpr
LogSeverity
LOGGING_VERBOSE
=
-
1
;
constexpr
LogSeverity
LOGGING_INFO
=
0
;
constexpr
LogSeverity
LOGGING_WARNING
=
1
;
constexpr
LogSeverity
LOGGING_ERROR
=
2
;
constexpr
LogSeverity
LOGGING_FATAL
=
3
;
constexpr
LogSeverity
LOGGING_NUM_SEVERITIES
=
4
;
#
if
DCHECK_IS_ON
(
)
constexpr
LogSeverity
LOGGING_DFATAL
=
LOGGING_FATAL
;
#
else
constexpr
LogSeverity
LOGGING_DFATAL
=
LOGGING_ERROR
;
#
endif
constexpr
LogSeverity
LOG_VERBOSE
=
LOGGING_VERBOSE
;
constexpr
LogSeverity
LOG_INFO
=
LOGGING_INFO
;
constexpr
LogSeverity
LOG_WARNING
=
LOGGING_WARNING
;
constexpr
LogSeverity
LOG_ERROR
=
LOGGING_ERROR
;
constexpr
LogSeverity
LOG_FATAL
=
LOGGING_FATAL
;
constexpr
LogSeverity
LOG_DFATAL
=
LOGGING_DFATAL
;
#
define
COMPACT_GOOGLE_LOG_EX_INFO
(
ClassName
.
.
.
)
\
:
:
logging
:
:
ClassName
(
__FILE__
__LINE__
:
:
logging
:
:
LOGGING_INFO
\
#
#
__VA_ARGS__
)
#
define
COMPACT_GOOGLE_LOG_EX_WARNING
(
ClassName
.
.
.
)
\
:
:
logging
:
:
ClassName
(
__FILE__
__LINE__
:
:
logging
:
:
LOGGING_WARNING
\
#
#
__VA_ARGS__
)
#
define
COMPACT_GOOGLE_LOG_EX_ERROR
(
ClassName
.
.
.
)
\
:
:
logging
:
:
ClassName
(
__FILE__
__LINE__
:
:
logging
:
:
LOGGING_ERROR
\
#
#
__VA_ARGS__
)
#
define
COMPACT_GOOGLE_LOG_EX_FATAL
(
ClassName
.
.
.
)
\
:
:
logging
:
:
ClassName
(
__FILE__
__LINE__
:
:
logging
:
:
LOGGING_FATAL
\
#
#
__VA_ARGS__
)
#
define
COMPACT_GOOGLE_LOG_EX_DFATAL
(
ClassName
.
.
.
)
\
:
:
logging
:
:
ClassName
(
__FILE__
__LINE__
:
:
logging
:
:
LOGGING_DFATAL
\
#
#
__VA_ARGS__
)
#
define
COMPACT_GOOGLE_LOG_EX_DCHECK
(
ClassName
.
.
.
)
\
:
:
logging
:
:
ClassName
(
__FILE__
__LINE__
:
:
logging
:
:
LOGGING_DCHECK
\
#
#
__VA_ARGS__
)
#
define
COMPACT_GOOGLE_LOG_INFO
COMPACT_GOOGLE_LOG_EX_INFO
(
LogMessage
)
#
define
COMPACT_GOOGLE_LOG_WARNING
COMPACT_GOOGLE_LOG_EX_WARNING
(
LogMessage
)
#
define
COMPACT_GOOGLE_LOG_ERROR
COMPACT_GOOGLE_LOG_EX_ERROR
(
LogMessage
)
#
define
COMPACT_GOOGLE_LOG_FATAL
COMPACT_GOOGLE_LOG_EX_FATAL
(
LogMessage
)
#
define
COMPACT_GOOGLE_LOG_DFATAL
COMPACT_GOOGLE_LOG_EX_DFATAL
(
LogMessage
)
#
define
COMPACT_GOOGLE_LOG_DCHECK
COMPACT_GOOGLE_LOG_EX_DCHECK
(
LogMessage
)
#
if
BUILDFLAG
(
IS_WIN
)
#
define
ERROR
0
#
define
COMPACT_GOOGLE_LOG_EX_0
(
ClassName
.
.
.
)
\
COMPACT_GOOGLE_LOG_EX_ERROR
(
ClassName
#
#
__VA_ARGS__
)
#
define
COMPACT_GOOGLE_LOG_0
COMPACT_GOOGLE_LOG_ERROR
constexpr
LogSeverity
LOGGING_0
=
LOGGING_ERROR
;
#
endif
#
define
LOG_IS_ON
(
severity
)
\
(
:
:
logging
:
:
ShouldCreateLogMessage
(
:
:
logging
:
:
LOGGING_
#
#
severity
)
)
#
if
!
BUILDFLAG
(
USE_RUNTIME_VLOG
)
BASE_EXPORT
int
GetDisableAllVLogLevel
(
)
;
#
if
!
defined
(
ENABLED_VLOG_LEVEL
)
#
define
ENABLED_VLOG_LEVEL
(
logging
:
:
GetDisableAllVLogLevel
(
)
)
#
endif
#
define
VLOG_IS_ON
(
verboselevel
)
(
(
verboselevel
)
<
=
(
ENABLED_VLOG_LEVEL
)
)
#
else
#
define
VLOG_IS_ON
(
verboselevel
)
\
(
(
verboselevel
)
<
=
:
:
logging
:
:
GetVlogLevel
(
__FILE__
)
)
#
endif
#
define
LAZY_STREAM
(
stream
condition
)
\
!
(
condition
)
?
(
void
)
0
:
:
:
logging
:
:
LogMessageVoidify
(
)
&
(
stream
)
#
define
LOG_STREAM
(
severity
)
COMPACT_GOOGLE_LOG_
#
#
severity
.
stream
(
)
#
define
LOG
(
severity
)
LAZY_STREAM
(
LOG_STREAM
(
severity
)
LOG_IS_ON
(
severity
)
)
#
define
LOG_IF
(
severity
condition
)
\
LAZY_STREAM
(
LOG_STREAM
(
severity
)
LOG_IS_ON
(
severity
)
&
&
(
condition
)
)
#
define
VLOG_STREAM
(
verbose_level
)
\
:
:
logging
:
:
LogMessage
(
__FILE__
__LINE__
-
(
verbose_level
)
)
.
stream
(
)
#
define
VLOG
(
verbose_level
)
\
LAZY_STREAM
(
VLOG_STREAM
(
verbose_level
)
VLOG_IS_ON
(
verbose_level
)
)
#
define
VLOG_IF
(
verbose_level
condition
)
\
LAZY_STREAM
(
VLOG_STREAM
(
verbose_level
)
\
VLOG_IS_ON
(
verbose_level
)
&
&
(
condition
)
)
#
if
BUILDFLAG
(
IS_WIN
)
#
define
VPLOG_STREAM
(
verbose_level
)
\
:
:
logging
:
:
Win32ErrorLogMessage
(
__FILE__
__LINE__
-
(
verbose_level
)
\
:
:
logging
:
:
GetLastSystemErrorCode
(
)
)
.
stream
(
)
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
#
define
VPLOG_STREAM
(
verbose_level
)
\
:
:
logging
:
:
ErrnoLogMessage
(
__FILE__
__LINE__
-
(
verbose_level
)
\
:
:
logging
:
:
GetLastSystemErrorCode
(
)
)
.
stream
(
)
#
endif
#
define
VPLOG
(
verbose_level
)
\
LAZY_STREAM
(
VPLOG_STREAM
(
verbose_level
)
VLOG_IS_ON
(
verbose_level
)
)
#
define
VPLOG_IF
(
verbose_level
condition
)
\
LAZY_STREAM
(
VPLOG_STREAM
(
verbose_level
)
\
VLOG_IS_ON
(
verbose_level
)
&
&
(
condition
)
)
#
define
LOG_ASSERT
(
condition
)
\
LOG_IF
(
FATAL
!
(
ANALYZER_ASSUME_TRUE
(
condition
)
)
)
\
<
<
"
Assert
failed
:
"
#
condition
"
.
"
#
if
BUILDFLAG
(
IS_WIN
)
#
define
PLOG_STREAM
(
severity
)
\
COMPACT_GOOGLE_LOG_EX_
#
#
severity
(
Win32ErrorLogMessage
\
:
:
logging
:
:
GetLastSystemErrorCode
(
)
)
.
stream
(
)
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
#
define
PLOG_STREAM
(
severity
)
\
COMPACT_GOOGLE_LOG_EX_
#
#
severity
(
ErrnoLogMessage
\
:
:
logging
:
:
GetLastSystemErrorCode
(
)
)
.
stream
(
)
#
endif
#
define
PLOG
(
severity
)
\
LAZY_STREAM
(
PLOG_STREAM
(
severity
)
LOG_IS_ON
(
severity
)
)
#
define
PLOG_IF
(
severity
condition
)
\
LAZY_STREAM
(
PLOG_STREAM
(
severity
)
LOG_IS_ON
(
severity
)
&
&
(
condition
)
)
BASE_EXPORT
extern
std
:
:
ostream
*
g_swallow_stream
;
#
define
EAT_STREAM_PARAMETERS
\
true
?
(
void
)
0
\
:
:
:
logging
:
:
LogMessageVoidify
(
)
&
(
*
:
:
logging
:
:
g_swallow_stream
)
#
if
DCHECK_IS_ON
(
)
#
define
DLOG_IS_ON
(
severity
)
LOG_IS_ON
(
severity
)
#
define
DLOG_IF
(
severity
condition
)
LOG_IF
(
severity
condition
)
#
define
DLOG_ASSERT
(
condition
)
LOG_ASSERT
(
condition
)
#
define
DPLOG_IF
(
severity
condition
)
PLOG_IF
(
severity
condition
)
#
define
DVLOG_IF
(
verboselevel
condition
)
VLOG_IF
(
verboselevel
condition
)
#
define
DVPLOG_IF
(
verboselevel
condition
)
VPLOG_IF
(
verboselevel
condition
)
#
else
#
define
DLOG_IS_ON
(
severity
)
false
#
define
DLOG_IF
(
severity
condition
)
EAT_STREAM_PARAMETERS
#
define
DLOG_ASSERT
(
condition
)
EAT_STREAM_PARAMETERS
#
define
DPLOG_IF
(
severity
condition
)
EAT_STREAM_PARAMETERS
#
define
DVLOG_IF
(
verboselevel
condition
)
EAT_STREAM_PARAMETERS
#
define
DVPLOG_IF
(
verboselevel
condition
)
EAT_STREAM_PARAMETERS
#
endif
#
define
DLOG
(
severity
)
\
LAZY_STREAM
(
LOG_STREAM
(
severity
)
DLOG_IS_ON
(
severity
)
)
#
define
DPLOG
(
severity
)
\
LAZY_STREAM
(
PLOG_STREAM
(
severity
)
DLOG_IS_ON
(
severity
)
)
#
define
DVLOG
(
verboselevel
)
DVLOG_IF
(
verboselevel
true
)
#
define
DVPLOG
(
verboselevel
)
DVPLOG_IF
(
verboselevel
true
)
#
if
BUILDFLAG
(
DCHECK_IS_CONFIGURABLE
)
BASE_EXPORT
extern
LogSeverity
LOGGING_DCHECK
;
#
else
constexpr
LogSeverity
LOGGING_DCHECK
=
LOGGING_FATAL
;
#
endif
#
undef
assert
#
define
assert
(
x
)
DLOG_ASSERT
(
x
)
class
BASE_EXPORT
LogMessage
{
public
:
LogMessage
(
const
char
*
file
int
line
LogSeverity
severity
)
;
LogMessage
(
const
char
*
file
int
line
const
char
*
condition
)
;
LogMessage
(
const
LogMessage
&
)
=
delete
;
LogMessage
&
operator
=
(
const
LogMessage
&
)
=
delete
;
virtual
~
LogMessage
(
)
;
std
:
:
ostream
&
stream
(
)
{
return
stream_
;
}
LogSeverity
severity
(
)
const
{
return
severity_
;
}
std
:
:
string
str
(
)
const
{
return
stream_
.
str
(
)
;
}
const
char
*
file
(
)
const
{
return
file_
;
}
int
line
(
)
const
{
return
line_
;
}
std
:
:
string
BuildCrashString
(
)
const
;
private
:
void
Init
(
const
char
*
file
int
line
)
;
const
LogSeverity
severity_
;
std
:
:
ostringstream
stream_
;
size_t
message_start_
;
const
char
*
const
file_
;
const
int
line_
;
base
:
:
ScopedClearLastError
last_error_
;
#
if
BUILDFLAG
(
IS_CHROMEOS
)
void
InitWithSyslogPrefix
(
base
:
:
StringPiece
filename
int
line
uint64_t
tick_count
const
char
*
log_severity_name_c_str
const
char
*
log_prefix
bool
enable_process_id
bool
enable_thread_id
bool
enable_timestamp
bool
enable_tickcount
)
;
#
endif
}
;
class
LogMessageVoidify
{
public
:
LogMessageVoidify
(
)
=
default
;
void
operator
&
(
std
:
:
ostream
&
)
{
}
}
;
#
if
BUILDFLAG
(
IS_WIN
)
typedef
unsigned
long
SystemErrorCode
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
typedef
int
SystemErrorCode
;
#
endif
BASE_EXPORT
SystemErrorCode
GetLastSystemErrorCode
(
)
;
BASE_EXPORT
std
:
:
string
SystemErrorCodeToString
(
SystemErrorCode
error_code
)
;
#
if
BUILDFLAG
(
IS_WIN
)
class
BASE_EXPORT
Win32ErrorLogMessage
:
public
LogMessage
{
public
:
Win32ErrorLogMessage
(
const
char
*
file
int
line
LogSeverity
severity
SystemErrorCode
err
)
;
Win32ErrorLogMessage
(
const
Win32ErrorLogMessage
&
)
=
delete
;
Win32ErrorLogMessage
&
operator
=
(
const
Win32ErrorLogMessage
&
)
=
delete
;
~
Win32ErrorLogMessage
(
)
override
;
private
:
SystemErrorCode
err_
;
}
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
class
BASE_EXPORT
ErrnoLogMessage
:
public
LogMessage
{
public
:
ErrnoLogMessage
(
const
char
*
file
int
line
LogSeverity
severity
SystemErrorCode
err
)
;
ErrnoLogMessage
(
const
ErrnoLogMessage
&
)
=
delete
;
ErrnoLogMessage
&
operator
=
(
const
ErrnoLogMessage
&
)
=
delete
;
~
ErrnoLogMessage
(
)
override
;
private
:
SystemErrorCode
err_
;
}
;
#
endif
BASE_EXPORT
void
CloseLogFile
(
)
;
#
if
BUILDFLAG
(
IS_CHROMEOS_ASH
)
BASE_EXPORT
FILE
*
DuplicateLogFILE
(
)
;
#
endif
BASE_EXPORT
void
RawLog
(
int
level
const
char
*
message
)
;
#
define
RAW_LOG
(
level
message
)
\
:
:
logging
:
:
RawLog
(
:
:
logging
:
:
LOGGING_
#
#
level
message
)
#
if
BUILDFLAG
(
IS_WIN
)
BASE_EXPORT
bool
IsLoggingToFileEnabled
(
)
;
BASE_EXPORT
std
:
:
wstring
GetLogFileFullPath
(
)
;
#
endif
}
#
endif
