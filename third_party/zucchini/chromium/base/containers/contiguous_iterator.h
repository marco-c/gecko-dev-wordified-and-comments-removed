#
ifndef
BASE_CONTAINERS_CONTIGUOUS_ITERATOR_H_
#
define
BASE_CONTAINERS_CONTIGUOUS_ITERATOR_H_
#
include
<
array
>
#
include
<
iterator
>
#
include
<
string
>
#
include
<
type_traits
>
#
include
<
vector
>
#
include
"
base
/
containers
/
checked_iterators
.
h
"
namespace
base
{
namespace
internal
{
template
<
typename
T
>
struct
PointsToObject
:
std
:
:
true_type
{
}
;
template
<
typename
T
>
struct
PointsToObject
<
T
*
>
:
std
:
:
is_object
<
T
>
{
}
;
template
<
typename
T
>
struct
IsPointer
:
std
:
:
is_pointer
<
T
>
{
}
;
template
<
typename
T
typename
StringT
=
std
:
:
basic_string
<
iter_value_t
<
T
>
>
>
struct
IsStringIterImpl
:
std
:
:
disjunction
<
std
:
:
is_same
<
T
typename
StringT
:
:
const_iterator
>
std
:
:
is_same
<
T
typename
StringT
:
:
iterator
>
>
{
}
;
template
<
typename
T
>
struct
IsStringIter
:
std
:
:
conjunction
<
std
:
:
is_trivial
<
iter_value_t
<
T
>
>
IsStringIterImpl
<
T
>
>
{
}
;
template
<
typename
T
typename
ArrayT
=
std
:
:
array
<
iter_value_t
<
T
>
1
>
>
struct
IsArrayIter
:
std
:
:
disjunction
<
std
:
:
is_same
<
T
typename
ArrayT
:
:
const_iterator
>
std
:
:
is_same
<
T
typename
ArrayT
:
:
iterator
>
>
{
}
;
template
<
typename
T
typename
VectorT
=
std
:
:
vector
<
iter_value_t
<
T
>
>
>
struct
IsVectorIter
:
std
:
:
conjunction
<
std
:
:
negation
<
std
:
:
is_same
<
iter_value_t
<
T
>
bool
>
>
std
:
:
disjunction
<
std
:
:
is_same
<
T
typename
VectorT
:
:
const_iterator
>
std
:
:
is_same
<
T
typename
VectorT
:
:
iterator
>
>
>
{
}
;
template
<
typename
T
>
struct
IsValueArrayIter
:
std
:
:
is_pointer
<
T
>
{
}
;
template
<
typename
T
typename
ValueT
=
iter_value_t
<
T
>
>
struct
IsCheckedContiguousIter
:
std
:
:
disjunction
<
std
:
:
is_same
<
T
base
:
:
CheckedContiguousConstIterator
<
ValueT
>
>
std
:
:
is_same
<
T
base
:
:
CheckedContiguousIterator
<
ValueT
>
>
>
{
}
;
template
<
typename
T
bool
B
=
PointsToObject
<
T
>
:
:
value
>
struct
IsContiguousIteratorImpl
:
std
:
:
false_type
{
}
;
template
<
typename
T
>
struct
IsContiguousIteratorImpl
<
T
true
>
:
std
:
:
disjunction
<
IsPointer
<
T
>
IsStringIter
<
T
>
IsArrayIter
<
T
>
IsVectorIter
<
T
>
IsValueArrayIter
<
T
>
IsCheckedContiguousIter
<
T
>
>
{
}
;
}
template
<
typename
T
>
struct
IsContiguousIterator
:
internal
:
:
IsContiguousIteratorImpl
<
remove_cvref_t
<
T
>
>
{
}
;
}
#
endif
