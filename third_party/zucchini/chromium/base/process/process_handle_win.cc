#
include
"
base
/
process
/
process_handle
.
h
"
#
include
<
windows
.
h
>
#
include
<
tlhelp32
.
h
>
#
include
<
ostream
>
#
include
"
base
/
win
/
scoped_handle
.
h
"
#
include
"
base
/
win
/
windows_version
.
h
"
namespace
base
{
ProcessId
GetCurrentProcId
(
)
{
return
:
:
GetCurrentProcessId
(
)
;
}
ProcessHandle
GetCurrentProcessHandle
(
)
{
return
:
:
GetCurrentProcess
(
)
;
}
ProcessId
GetProcId
(
ProcessHandle
process
)
{
if
(
process
=
=
base
:
:
kNullProcessHandle
)
return
0
;
ProcessId
result
=
GetProcessId
(
process
)
;
CHECK
(
result
!
=
0
|
|
GetLastError
(
)
!
=
ERROR_INVALID_HANDLE
)
<
<
"
process
handle
=
"
<
<
process
;
return
result
;
}
ProcessId
GetParentProcessId
(
ProcessHandle
process
)
{
ProcessId
child_pid
=
GetProcId
(
process
)
;
PROCESSENTRY32
process_entry
;
process_entry
.
dwSize
=
sizeof
(
PROCESSENTRY32
)
;
win
:
:
ScopedHandle
snapshot
(
CreateToolhelp32Snapshot
(
TH32CS_SNAPPROCESS
0
)
)
;
if
(
snapshot
.
is_valid
(
)
&
&
Process32First
(
snapshot
.
get
(
)
&
process_entry
)
)
{
do
{
if
(
process_entry
.
th32ProcessID
=
=
child_pid
)
return
process_entry
.
th32ParentProcessID
;
}
while
(
Process32Next
(
snapshot
.
get
(
)
&
process_entry
)
)
;
}
return
0u
;
}
}
