#
ifndef
BASE_PROCESS_PROCESS_METRICS_H_
#
define
BASE_PROCESS_PROCESS_METRICS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
gtest_prod_util
.
h
"
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
base
/
process
/
process_handle
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
#
include
"
base
/
time
/
time
.
h
"
#
include
"
base
/
values
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
BUILDFLAG
(
IS_APPLE
)
#
include
<
mach
/
mach
.
h
>
#
include
"
base
/
process
/
port_provider_mac
.
h
"
#
if
!
BUILDFLAG
(
IS_IOS
)
#
include
<
mach
/
mach_vm
.
h
>
#
endif
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
#
include
"
base
/
win
/
scoped_handle
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
#
endif
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
|
|
\
BUILDFLAG
(
IS_AIX
)
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
base
/
threading
/
platform_thread
.
h
"
#
endif
namespace
base
{
struct
IoCounters
;
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
struct
PageFaultCounts
{
int64_t
minor
;
int64_t
major
;
}
;
#
endif
BASE_EXPORT
int64_t
TimeValToMicroseconds
(
const
struct
timeval
&
tv
)
;
class
BASE_EXPORT
ProcessMetrics
{
public
:
ProcessMetrics
(
const
ProcessMetrics
&
)
=
delete
;
ProcessMetrics
&
operator
=
(
const
ProcessMetrics
&
)
=
delete
;
~
ProcessMetrics
(
)
;
#
if
!
BUILDFLAG
(
IS_MAC
)
static
std
:
:
unique_ptr
<
ProcessMetrics
>
CreateProcessMetrics
(
ProcessHandle
process
)
;
#
else
static
std
:
:
unique_ptr
<
ProcessMetrics
>
CreateProcessMetrics
(
ProcessHandle
process
PortProvider
*
port_provider
)
;
#
endif
static
std
:
:
unique_ptr
<
ProcessMetrics
>
CreateCurrentProcessMetrics
(
)
;
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
BASE_EXPORT
size_t
GetResidentSetSize
(
)
const
;
#
endif
[
[
nodiscard
]
]
double
GetPlatformIndependentCPUUsage
(
TimeDelta
cumulative_cpu
)
;
[
[
nodiscard
]
]
double
GetPlatformIndependentCPUUsage
(
)
;
[
[
nodiscard
]
]
TimeDelta
GetCumulativeCPUUsage
(
)
;
#
if
BUILDFLAG
(
IS_WIN
)
[
[
nodiscard
]
]
double
GetPreciseCPUUsage
(
TimeDelta
cumulative_cpu
)
;
[
[
nodiscard
]
]
double
GetPreciseCPUUsage
(
)
;
[
[
nodiscard
]
]
TimeDelta
GetPreciseCumulativeCPUUsage
(
)
;
#
endif
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
|
|
\
BUILDFLAG
(
IS_AIX
)
using
CPUUsagePerThread
=
std
:
:
vector
<
std
:
:
pair
<
PlatformThreadId
TimeDelta
>
>
;
bool
GetCumulativeCPUUsagePerThread
(
CPUUsagePerThread
&
)
;
#
endif
int
GetIdleWakeupsPerSecond
(
)
;
#
if
BUILDFLAG
(
IS_APPLE
)
int
GetPackageIdleWakeupsPerSecond
(
)
;
int
GetEnergyImpact
(
)
;
#
endif
bool
GetIOCounters
(
IoCounters
*
io_counters
)
const
;
uint64_t
GetCumulativeDiskUsageInBytes
(
)
;
#
if
BUILDFLAG
(
IS_POSIX
)
int
GetOpenFdCount
(
)
const
;
int
GetOpenFdSoftLimit
(
)
const
;
#
endif
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
uint64_t
GetVmSwapBytes
(
)
const
;
bool
GetPageFaultCounts
(
PageFaultCounts
*
counts
)
const
;
#
endif
size_t
GetMallocUsage
(
)
;
private
:
#
if
!
BUILDFLAG
(
IS_MAC
)
explicit
ProcessMetrics
(
ProcessHandle
process
)
;
#
else
ProcessMetrics
(
ProcessHandle
process
PortProvider
*
port_provider
)
;
#
endif
#
if
BUILDFLAG
(
IS_APPLE
)
|
|
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
\
BUILDFLAG
(
IS_AIX
)
int
CalculateIdleWakeupsPerSecond
(
uint64_t
absolute_idle_wakeups
)
;
#
endif
#
if
BUILDFLAG
(
IS_APPLE
)
int
CalculatePackageIdleWakeupsPerSecond
(
uint64_t
absolute_package_idle_wakeups
)
;
mach_port_t
TaskForPid
(
ProcessHandle
process
)
const
;
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
win
:
:
ScopedHandle
process_
;
#
else
ProcessHandle
process_
;
#
endif
TimeTicks
last_cpu_time_
;
#
if
!
BUILDFLAG
(
IS_FREEBSD
)
|
|
!
BUILDFLAG
(
IS_POSIX
)
TimeDelta
last_cumulative_cpu_
;
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
TimeTicks
last_cpu_time_for_precise_cpu_usage_
;
TimeDelta
last_precise_cumulative_cpu_
;
#
endif
#
if
BUILDFLAG
(
IS_APPLE
)
|
|
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
\
BUILDFLAG
(
IS_AIX
)
TimeTicks
last_idle_wakeups_time_
;
uint64_t
last_absolute_idle_wakeups_
;
#
endif
#
if
BUILDFLAG
(
IS_APPLE
)
TimeTicks
last_package_idle_wakeups_time_
;
uint64_t
last_absolute_package_idle_wakeups_
;
double
last_energy_impact_
;
uint64_t
last_energy_impact_time_
;
#
endif
#
if
BUILDFLAG
(
IS_MAC
)
raw_ptr
<
PortProvider
>
port_provider_
;
#
endif
}
;
BASE_EXPORT
size_t
GetSystemCommitCharge
(
)
;
BASE_EXPORT
size_t
GetMaxFds
(
)
;
BASE_EXPORT
size_t
GetHandleLimit
(
)
;
#
if
BUILDFLAG
(
IS_POSIX
)
BASE_EXPORT
void
IncreaseFdLimitTo
(
unsigned
int
max_descriptors
)
;
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
|
|
BUILDFLAG
(
IS_APPLE
)
|
|
BUILDFLAG
(
IS_LINUX
)
|
|
\
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
|
|
BUILDFLAG
(
IS_AIX
)
|
|
\
BUILDFLAG
(
IS_FUCHSIA
)
struct
BASE_EXPORT
SystemMemoryInfoKB
{
SystemMemoryInfoKB
(
)
;
SystemMemoryInfoKB
(
const
SystemMemoryInfoKB
&
other
)
;
SystemMemoryInfoKB
&
operator
=
(
const
SystemMemoryInfoKB
&
other
)
;
Value
:
:
Dict
ToDict
(
)
const
;
int
total
=
0
;
#
if
!
BUILDFLAG
(
IS_WIN
)
int
free
=
0
;
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
int
avail_phys
=
0
;
#
endif
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
|
|
\
BUILDFLAG
(
IS_AIX
)
int
available
=
0
;
#
endif
#
if
!
BUILDFLAG
(
IS_APPLE
)
int
swap_total
=
0
;
int
swap_free
=
0
;
#
endif
#
if
BUILDFLAG
(
IS_ANDROID
)
|
|
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
\
BUILDFLAG
(
IS_AIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
int
buffers
=
0
;
int
cached
=
0
;
int
active_anon
=
0
;
int
inactive_anon
=
0
;
int
active_file
=
0
;
int
inactive_file
=
0
;
int
dirty
=
0
;
int
reclaimable
=
0
;
#
endif
#
if
BUILDFLAG
(
IS_CHROMEOS
)
int
shmem
=
0
;
int
slab
=
0
;
#
endif
#
if
BUILDFLAG
(
IS_APPLE
)
int
speculative
=
0
;
int
file_backed
=
0
;
int
purgeable
=
0
;
#
endif
}
;
BASE_EXPORT
bool
GetSystemMemoryInfo
(
SystemMemoryInfoKB
*
meminfo
)
;
#
endif
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
|
|
\
BUILDFLAG
(
IS_AIX
)
BASE_EXPORT
int
ParseProcStatCPU
(
StringPiece
input
)
;
BASE_EXPORT
int64_t
GetNumberOfThreads
(
ProcessHandle
process
)
;
BASE_EXPORT
extern
const
char
kProcSelfExe
[
]
;
BASE_EXPORT
bool
ParseProcMeminfo
(
StringPiece
input
SystemMemoryInfoKB
*
meminfo
)
;
struct
BASE_EXPORT
VmStatInfo
{
Value
:
:
Dict
ToDict
(
)
const
;
uint64_t
pswpin
=
0
;
uint64_t
pswpout
=
0
;
uint64_t
pgmajfault
=
0
;
uint64_t
oom_kill
=
0
;
}
;
BASE_EXPORT
bool
GetVmStatInfo
(
VmStatInfo
*
vmstat
)
;
BASE_EXPORT
bool
ParseProcVmstat
(
StringPiece
input
VmStatInfo
*
vmstat
)
;
struct
BASE_EXPORT
SystemDiskInfo
{
SystemDiskInfo
(
)
;
SystemDiskInfo
(
const
SystemDiskInfo
&
)
;
SystemDiskInfo
&
operator
=
(
const
SystemDiskInfo
&
)
;
Value
:
:
Dict
ToDict
(
)
const
;
uint64_t
reads
=
0
;
uint64_t
reads_merged
=
0
;
uint64_t
sectors_read
=
0
;
uint64_t
read_time
=
0
;
uint64_t
writes
=
0
;
uint64_t
writes_merged
=
0
;
uint64_t
sectors_written
=
0
;
uint64_t
write_time
=
0
;
uint64_t
io
=
0
;
uint64_t
io_time
=
0
;
uint64_t
weighted_io_time
=
0
;
}
;
BASE_EXPORT
bool
IsValidDiskName
(
StringPiece
candidate
)
;
BASE_EXPORT
bool
GetSystemDiskInfo
(
SystemDiskInfo
*
diskinfo
)
;
BASE_EXPORT
TimeDelta
GetUserCpuTimeSinceBoot
(
)
;
#
endif
#
if
BUILDFLAG
(
IS_CHROMEOS
)
struct
BASE_EXPORT
SwapInfo
{
SwapInfo
(
)
:
num_reads
(
0
)
num_writes
(
0
)
compr_data_size
(
0
)
orig_data_size
(
0
)
mem_used_total
(
0
)
{
}
Value
:
:
Dict
ToDict
(
)
const
;
uint64_t
num_reads
=
0
;
uint64_t
num_writes
=
0
;
uint64_t
compr_data_size
=
0
;
uint64_t
orig_data_size
=
0
;
uint64_t
mem_used_total
=
0
;
}
;
BASE_EXPORT
bool
ParseZramMmStat
(
StringPiece
mm_stat_data
SwapInfo
*
swap_info
)
;
BASE_EXPORT
bool
ParseZramStat
(
StringPiece
stat_data
SwapInfo
*
swap_info
)
;
BASE_EXPORT
bool
GetSwapInfo
(
SwapInfo
*
swap_info
)
;
struct
BASE_EXPORT
GraphicsMemoryInfoKB
{
Value
:
:
Dict
ToDict
(
)
const
;
int
gpu_objects
=
-
1
;
int64_t
gpu_memory_size
=
-
1
;
}
;
BASE_EXPORT
bool
GetGraphicsMemoryInfo
(
GraphicsMemoryInfoKB
*
gpu_meminfo
)
;
#
endif
struct
BASE_EXPORT
SystemPerformanceInfo
{
SystemPerformanceInfo
(
)
;
SystemPerformanceInfo
(
const
SystemPerformanceInfo
&
other
)
;
SystemPerformanceInfo
&
operator
=
(
const
SystemPerformanceInfo
&
other
)
;
Value
:
:
Dict
ToDict
(
)
const
;
uint64_t
idle_time
=
0
;
uint64_t
read_transfer_count
=
0
;
uint64_t
write_transfer_count
=
0
;
uint64_t
other_transfer_count
=
0
;
uint64_t
read_operation_count
=
0
;
uint64_t
write_operation_count
=
0
;
uint64_t
other_operation_count
=
0
;
uint64_t
pagefile_pages_written
=
0
;
uint64_t
pagefile_pages_write_ios
=
0
;
uint64_t
available_pages
=
0
;
uint64_t
pages_read
=
0
;
uint64_t
page_read_ios
=
0
;
}
;
BASE_EXPORT
bool
GetSystemPerformanceInfo
(
SystemPerformanceInfo
*
info
)
;
class
BASE_EXPORT
SystemMetrics
{
public
:
SystemMetrics
(
)
;
static
SystemMetrics
Sample
(
)
;
Value
:
:
Dict
ToDict
(
)
const
;
private
:
FRIEND_TEST_ALL_PREFIXES
(
SystemMetricsTest
SystemMetrics
)
;
size_t
committed_memory_
;
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
SystemMemoryInfoKB
memory_info_
;
VmStatInfo
vmstat_info_
;
SystemDiskInfo
disk_info_
;
#
endif
#
if
BUILDFLAG
(
IS_CHROMEOS
)
SwapInfo
swap_info_
;
GraphicsMemoryInfoKB
gpu_memory_info_
;
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
SystemPerformanceInfo
performance_
;
#
endif
}
;
#
if
BUILDFLAG
(
IS_APPLE
)
enum
class
MachVMRegionResult
{
Finished
Error
Success
}
;
BASE_EXPORT
MachVMRegionResult
GetBasicInfo
(
mach_port_t
task
mach_vm_size_t
*
size
mach_vm_address_t
*
address
vm_region_basic_info_64
*
info
)
;
#
endif
#
if
BUILDFLAG
(
IS_MAC
)
BASE_EXPORT
MachVMRegionResult
GetTopInfo
(
mach_port_t
task
mach_vm_size_t
*
size
mach_vm_address_t
*
address
vm_region_top_info_data_t
*
info
)
;
#
endif
}
#
endif
