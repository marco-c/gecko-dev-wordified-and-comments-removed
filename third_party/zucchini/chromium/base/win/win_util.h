#
ifndef
BASE_WIN_WIN_UTIL_H_
#
define
BASE_WIN_WIN_UTIL_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
#
include
"
base
/
win
/
windows_types
.
h
"
struct
IPropertyStore
;
struct
_tagpropertykey
;
using
PROPERTYKEY
=
_tagpropertykey
;
namespace
base
{
struct
NativeLibraryLoadError
;
namespace
win
{
inline
uint32_t
HandleToUint32
(
HANDLE
h
)
{
return
static_cast
<
uint32_t
>
(
reinterpret_cast
<
uintptr_t
>
(
h
)
)
;
}
inline
HANDLE
Uint32ToHandle
(
uint32_t
h
)
{
return
reinterpret_cast
<
HANDLE
>
(
static_cast
<
uintptr_t
>
(
static_cast
<
int32_t
>
(
h
)
)
)
;
}
BASE_EXPORT
bool
GetUserSidString
(
std
:
:
wstring
*
user_sid
)
;
BASE_EXPORT
bool
UserAccountControlIsEnabled
(
)
;
BASE_EXPORT
bool
SetBooleanValueForPropertyStore
(
IPropertyStore
*
property_store
const
PROPERTYKEY
&
property_key
bool
property_bool_value
)
;
BASE_EXPORT
bool
SetStringValueForPropertyStore
(
IPropertyStore
*
property_store
const
PROPERTYKEY
&
property_key
const
wchar_t
*
property_string_value
)
;
BASE_EXPORT
bool
SetClsidForPropertyStore
(
IPropertyStore
*
property_store
const
PROPERTYKEY
&
property_key
const
CLSID
&
property_clsid_value
)
;
BASE_EXPORT
bool
SetAppIdForPropertyStore
(
IPropertyStore
*
property_store
const
wchar_t
*
app_id
)
;
BASE_EXPORT
bool
AddCommandToAutoRun
(
HKEY
root_key
const
std
:
:
wstring
&
name
const
std
:
:
wstring
&
command
)
;
BASE_EXPORT
bool
RemoveCommandFromAutoRun
(
HKEY
root_key
const
std
:
:
wstring
&
name
)
;
BASE_EXPORT
bool
ReadCommandFromAutoRun
(
HKEY
root_key
const
std
:
:
wstring
&
name
std
:
:
wstring
*
command
)
;
BASE_EXPORT
void
SetShouldCrashOnProcessDetach
(
bool
crash
)
;
BASE_EXPORT
bool
ShouldCrashOnProcessDetach
(
)
;
BASE_EXPORT
void
SetAbortBehaviorForCrashReporting
(
)
;
BASE_EXPORT
bool
IsWindows10OrGreaterTabletMode
(
HWND
hwnd
)
;
BASE_EXPORT
bool
IsTabletDevice
(
std
:
:
string
*
reason
HWND
hwnd
)
;
BASE_EXPORT
bool
IsDeviceUsedAsATablet
(
std
:
:
string
*
reason
)
;
BASE_EXPORT
bool
IsKeyboardPresentOnSlate
(
HWND
hwnd
std
:
:
string
*
reason
)
;
#
define
SIZEOF_STRUCT_WITH_SPECIFIED_LAST_MEMBER
(
struct_name
member
)
\
offsetof
(
struct_name
member
)
+
\
(
sizeof
static_cast
<
struct_name
*
>
(
NULL
)
-
>
member
)
BASE_EXPORT
bool
IsEnrolledToDomain
(
)
;
BASE_EXPORT
bool
IsJoinedToAzureAD
(
)
;
BASE_EXPORT
bool
IsDeviceRegisteredWithManagement
(
)
;
BASE_EXPORT
bool
IsUser32AndGdi32Available
(
)
;
BASE_EXPORT
bool
GetLoadedModulesSnapshot
(
HANDLE
process
std
:
:
vector
<
HMODULE
>
*
snapshot
)
;
BASE_EXPORT
void
EnableFlicks
(
HWND
hwnd
)
;
BASE_EXPORT
void
DisableFlicks
(
HWND
hwnd
)
;
BASE_EXPORT
void
EnableHighDPISupport
(
)
;
BASE_EXPORT
std
:
:
wstring
WStringFromGUID
(
const
:
:
GUID
&
rguid
)
;
BASE_EXPORT
bool
PinUser32
(
NativeLibraryLoadError
*
error
=
nullptr
)
;
BASE_EXPORT
void
*
GetUser32FunctionPointer
(
const
char
*
function_name
NativeLibraryLoadError
*
error
=
nullptr
)
;
BASE_EXPORT
std
:
:
wstring
GetWindowObjectName
(
HANDLE
handle
)
;
BASE_EXPORT
bool
IsRunningUnderDesktopName
(
WStringPiece
desktop_name
)
;
BASE_EXPORT
bool
IsCurrentSessionRemote
(
)
;
#
if
!
defined
(
OFFICIAL_BUILD
)
BASE_EXPORT
bool
IsAppVerifierEnabled
(
const
std
:
:
wstring
&
process_name
)
;
#
endif
BASE_EXPORT
bool
IsAppVerifierLoaded
(
)
;
class
BASE_EXPORT
ScopedDomainStateForTesting
{
public
:
explicit
ScopedDomainStateForTesting
(
bool
state
)
;
ScopedDomainStateForTesting
(
const
ScopedDomainStateForTesting
&
)
=
delete
;
ScopedDomainStateForTesting
&
operator
=
(
const
ScopedDomainStateForTesting
&
)
=
delete
;
~
ScopedDomainStateForTesting
(
)
;
private
:
bool
initial_state_
;
}
;
class
BASE_EXPORT
ScopedDeviceRegisteredWithManagementForTesting
{
public
:
explicit
ScopedDeviceRegisteredWithManagementForTesting
(
bool
state
)
;
ScopedDeviceRegisteredWithManagementForTesting
(
const
ScopedDeviceRegisteredWithManagementForTesting
&
)
=
delete
;
ScopedDeviceRegisteredWithManagementForTesting
&
operator
=
(
const
ScopedDeviceRegisteredWithManagementForTesting
&
)
=
delete
;
~
ScopedDeviceRegisteredWithManagementForTesting
(
)
;
private
:
bool
initial_state_
;
}
;
class
BASE_EXPORT
ScopedAzureADJoinStateForTesting
{
public
:
explicit
ScopedAzureADJoinStateForTesting
(
bool
state
)
;
ScopedAzureADJoinStateForTesting
(
const
ScopedAzureADJoinStateForTesting
&
)
=
delete
;
ScopedAzureADJoinStateForTesting
&
operator
=
(
const
ScopedAzureADJoinStateForTesting
&
)
=
delete
;
~
ScopedAzureADJoinStateForTesting
(
)
;
private
:
const
bool
initial_state_
;
}
;
}
}
#
endif
