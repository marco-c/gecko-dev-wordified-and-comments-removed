#
ifndef
BASE_WIN_WINDOWS_VERSION_H_
#
define
BASE_WIN_WINDOWS_VERSION_H_
#
include
<
stddef
.
h
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
gtest_prod_util
.
h
"
#
include
"
base
/
version
.
h
"
using
DWORD
=
unsigned
long
;
using
HANDLE
=
void
*
;
struct
_OSVERSIONINFOEXW
;
struct
_SYSTEM_INFO
;
namespace
base
{
namespace
test
{
class
ScopedOSInfoOverride
;
}
}
namespace
base
{
namespace
win
{
enum
class
Version
{
PRE_XP
=
0
XP
=
1
SERVER_2003
=
2
VISTA
=
3
WIN7
=
4
WIN8
=
5
WIN8_1
=
6
WIN10
=
7
WIN10_TH2
=
8
WIN10_RS1
=
9
WIN10_RS2
=
10
WIN10_RS3
=
11
WIN10_RS4
=
12
WIN10_RS5
=
13
WIN10_19H1
=
14
WIN10_19H2
=
15
WIN10_20H1
=
16
WIN10_20H2
=
17
WIN10_21H1
=
18
WIN10_21H2
=
19
WIN10_22H2
=
20
SERVER_2022
=
21
WIN11
=
22
WIN11_22H2
=
23
WIN_LAST
}
;
enum
VersionType
{
SUITE_HOME
=
0
SUITE_PROFESSIONAL
SUITE_SERVER
SUITE_ENTERPRISE
SUITE_EDUCATION
SUITE_EDUCATION_PRO
SUITE_LAST
}
;
class
BASE_EXPORT
OSInfo
{
public
:
struct
VersionNumber
{
uint32_t
major
;
uint32_t
minor
;
uint32_t
build
;
uint32_t
patch
;
}
;
struct
ServicePack
{
int
major
;
int
minor
;
}
;
enum
WindowsArchitecture
{
X86_ARCHITECTURE
X64_ARCHITECTURE
IA64_ARCHITECTURE
ARM64_ARCHITECTURE
OTHER_ARCHITECTURE
}
;
static
OSInfo
*
GetInstance
(
)
;
OSInfo
(
const
OSInfo
&
)
=
delete
;
OSInfo
&
operator
=
(
const
OSInfo
&
)
=
delete
;
static
WindowsArchitecture
GetArchitecture
(
)
;
static
bool
IsRunningEmulatedOnArm64
(
)
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
const
Version
&
version
(
)
const
{
return
version_
;
}
const
VersionNumber
&
version_number
(
)
const
{
return
version_number_
;
}
#
endif
static
Version
Kernel32Version
(
)
;
static
VersionNumber
Kernel32VersionNumber
(
)
;
static
base
:
:
Version
Kernel32BaseVersion
(
)
;
bool
IsWowDisabled
(
)
const
;
bool
IsWowX86OnAMD64
(
)
const
;
bool
IsWowX86OnARM64
(
)
const
;
bool
IsWowAMD64OnARM64
(
)
const
;
bool
IsWowX86OnOther
(
)
const
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
const
VersionType
&
version_type
(
)
const
{
return
version_type_
;
}
const
ServicePack
&
service_pack
(
)
const
{
return
service_pack_
;
}
const
std
:
:
string
&
service_pack_str
(
)
const
{
return
service_pack_str_
;
}
const
int
&
processors
(
)
const
{
return
processors_
;
}
#
endif
const
size_t
&
allocation_granularity
(
)
const
{
return
allocation_granularity_
;
}
#
if
!
defined
(
MOZ_ZUCCHINI
)
std
:
:
string
processor_model_name
(
)
;
const
std
:
:
string
&
release_id
(
)
const
{
return
release_id_
;
}
#
endif
private
:
friend
class
base
:
:
test
:
:
ScopedOSInfoOverride
;
FRIEND_TEST_ALL_PREFIXES
(
OSInfo
MajorMinorBuildToVersion
)
;
enum
class
WowProcessMachine
{
kDisabled
kX86
kARM32
kOther
kUnknown
}
;
enum
class
WowNativeMachine
{
kARM64
kAMD64
kOther
kUnknown
}
;
static
OSInfo
*
*
GetInstanceStorage
(
)
;
#
if
defined
(
MOZ_ZUCCHINI
)
OSInfo
(
const
_SYSTEM_INFO
&
system_info
)
;
#
else
OSInfo
(
const
_OSVERSIONINFOEXW
&
version_info
const
_SYSTEM_INFO
&
system_info
DWORD
os_type
)
;
#
endif
~
OSInfo
(
)
;
static
Version
MajorMinorBuildToVersion
(
uint32_t
major
uint32_t
minor
uint32_t
build
)
;
WowProcessMachine
GetWowProcessMachineArchitecture
(
const
int
process_machine
)
;
WowNativeMachine
GetWowNativeMachineArchitecture
(
const
int
native_machine
)
;
void
InitializeWowStatusValuesFromLegacyApi
(
HANDLE
process_handle
)
;
void
InitializeWowStatusValuesForProcess
(
HANDLE
process_handle
)
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
Version
version_
;
VersionNumber
version_number_
;
VersionType
version_type_
;
ServicePack
service_pack_
;
std
:
:
string
release_id_
;
std
:
:
string
service_pack_str_
;
int
processors_
;
#
endif
size_t
allocation_granularity_
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
WowProcessMachine
wow_process_machine_
;
WowNativeMachine
wow_native_machine_
;
std
:
:
string
processor_model_name_
;
#
endif
}
;
BASE_EXPORT
Version
GetVersion
(
)
;
}
}
#
endif
