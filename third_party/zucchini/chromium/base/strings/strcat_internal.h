#
ifndef
BASE_STRINGS_STRCAT_INTERNAL_H_
#
define
BASE_STRINGS_STRCAT_INTERNAL_H_
#
include
<
string
>
#
include
"
base
/
containers
/
span
.
h
"
#
include
"
base
/
template_util
.
h
"
namespace
base
{
namespace
internal
{
template
<
typename
CharT
>
auto
Resize
(
std
:
:
basic_string
<
CharT
>
&
str
size_t
total_size
priority_tag
<
1
>
)
-
>
decltype
(
str
.
__resize_default_init
(
total_size
)
)
{
str
.
__resize_default_init
(
total_size
)
;
}
template
<
typename
CharT
>
void
Resize
(
std
:
:
basic_string
<
CharT
>
&
str
size_t
total_size
priority_tag
<
0
>
)
{
str
.
resize
(
total_size
)
;
}
template
<
typename
CharT
typename
StringT
>
void
StrAppendT
(
std
:
:
basic_string
<
CharT
>
&
dest
span
<
const
StringT
>
pieces
)
{
const
size_t
initial_size
=
dest
.
size
(
)
;
size_t
total_size
=
initial_size
;
for
(
const
auto
&
cur
:
pieces
)
total_size
+
=
cur
.
size
(
)
;
Resize
(
dest
total_size
priority_tag
<
1
>
(
)
)
;
CharT
*
dest_char
=
&
dest
[
initial_size
]
;
for
(
const
auto
&
cur
:
pieces
)
{
std
:
:
char_traits
<
CharT
>
:
:
copy
(
dest_char
cur
.
data
(
)
cur
.
size
(
)
)
;
dest_char
+
=
cur
.
size
(
)
;
}
}
template
<
typename
StringT
>
auto
StrCatT
(
span
<
const
StringT
>
pieces
)
{
std
:
:
basic_string
<
typename
StringT
:
:
value_type
>
result
;
StrAppendT
(
result
pieces
)
;
return
result
;
}
}
}
#
endif
