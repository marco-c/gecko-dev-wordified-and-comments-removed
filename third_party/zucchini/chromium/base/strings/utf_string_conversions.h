#
ifndef
BASE_STRINGS_UTF_STRING_CONVERSIONS_H_
#
define
BASE_STRINGS_UTF_STRING_CONVERSIONS_H_
#
include
<
stddef
.
h
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
#
include
"
base
/
types
/
always_false
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
BASE_EXPORT
bool
WideToUTF8
(
const
wchar_t
*
src
size_t
src_len
std
:
:
string
*
output
)
;
[
[
nodiscard
]
]
BASE_EXPORT
std
:
:
string
WideToUTF8
(
WStringPiece
wide
)
;
BASE_EXPORT
bool
UTF8ToWide
(
const
char
*
src
size_t
src_len
std
:
:
wstring
*
output
)
;
[
[
nodiscard
]
]
BASE_EXPORT
std
:
:
wstring
UTF8ToWide
(
StringPiece
utf8
)
;
BASE_EXPORT
bool
WideToUTF16
(
const
wchar_t
*
src
size_t
src_len
std
:
:
u16string
*
output
)
;
[
[
nodiscard
]
]
BASE_EXPORT
std
:
:
u16string
WideToUTF16
(
WStringPiece
wide
)
;
BASE_EXPORT
bool
UTF16ToWide
(
const
char16_t
*
src
size_t
src_len
std
:
:
wstring
*
output
)
;
[
[
nodiscard
]
]
BASE_EXPORT
std
:
:
wstring
UTF16ToWide
(
StringPiece16
utf16
)
;
BASE_EXPORT
bool
UTF8ToUTF16
(
const
char
*
src
size_t
src_len
std
:
:
u16string
*
output
)
;
[
[
nodiscard
]
]
BASE_EXPORT
std
:
:
u16string
UTF8ToUTF16
(
StringPiece
utf8
)
;
BASE_EXPORT
bool
UTF16ToUTF8
(
const
char16_t
*
src
size_t
src_len
std
:
:
string
*
output
)
;
[
[
nodiscard
]
]
BASE_EXPORT
std
:
:
string
UTF16ToUTF8
(
StringPiece16
utf16
)
;
[
[
nodiscard
]
]
BASE_EXPORT
std
:
:
u16string
ASCIIToUTF16
(
StringPiece
ascii
)
;
[
[
nodiscard
]
]
BASE_EXPORT
std
:
:
string
UTF16ToASCII
(
StringPiece16
utf16
)
;
#
if
defined
(
WCHAR_T_IS_UTF16
)
[
[
nodiscard
]
]
BASE_EXPORT
std
:
:
wstring
ASCIIToWide
(
StringPiece
ascii
)
;
[
[
nodiscard
]
]
BASE_EXPORT
std
:
:
string
WideToASCII
(
WStringPiece
wide
)
;
#
endif
template
<
size_t
N
>
std
:
:
u16string
WideToUTF16
(
const
wchar_t
(
&
str
)
[
N
]
)
{
static_assert
(
AlwaysFalse
<
decltype
(
N
)
>
"
Error
:
Use
the
u
\
"
.
.
.
\
"
prefix
instead
.
"
)
;
return
std
:
:
u16string
(
)
;
}
template
<
size_t
N
>
std
:
:
u16string
UTF8ToUTF16
(
const
char
(
&
str
)
[
N
]
)
{
static_assert
(
AlwaysFalse
<
decltype
(
N
)
>
"
Error
:
Use
the
u
\
"
.
.
.
\
"
prefix
instead
.
"
)
;
return
std
:
:
u16string
(
)
;
}
template
<
size_t
N
>
std
:
:
u16string
ASCIIToUTF16
(
const
char
(
&
str
)
[
N
]
)
{
static_assert
(
AlwaysFalse
<
decltype
(
N
)
>
"
Error
:
Use
the
u
\
"
.
.
.
\
"
prefix
instead
.
"
)
;
return
std
:
:
u16string
(
)
;
}
template
<
size_t
N
>
std
:
:
u16string
ASCIIToUTF16
(
char
(
&
str
)
[
N
]
)
{
return
ASCIIToUTF16
(
StringPiece
(
str
)
)
;
}
}
#
endif
