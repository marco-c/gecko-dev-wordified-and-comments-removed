#
ifndef
BASE_STRINGS_TO_STRING_H_
#
define
BASE_STRINGS_TO_STRING_H_
#
include
<
ios
>
#
include
<
memory
>
#
include
<
sstream
>
#
include
<
string
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
base
/
template_util
.
h
"
#
include
"
base
/
types
/
supports_ostream_operator
.
h
"
namespace
base
{
namespace
internal
{
template
<
typename
T
typename
=
void
>
struct
SupportsToString
:
std
:
:
false_type
{
}
;
template
<
typename
T
>
struct
SupportsToString
<
T
decltype
(
void
(
std
:
:
declval
<
T
>
(
)
.
ToString
(
)
)
)
>
:
std
:
:
true_type
{
}
;
template
<
typename
T
typename
=
void
>
constexpr
bool
IsIomanip
=
false
;
template
<
typename
T
>
constexpr
bool
IsIomanip
<
T
&
(
T
&
)
std
:
:
enable_if_t
<
std
:
:
is_base_of_v
<
std
:
:
ios_base
T
>
>
>
=
true
;
template
<
typename
T
typename
=
void
>
constexpr
bool
WillBeIncorrectlyStreamedAsBool
=
false
;
template
<
typename
T
>
constexpr
bool
WillBeIncorrectlyStreamedAsBool
<
T
std
:
:
enable_if_t
<
std
:
:
is_function_v
<
std
:
:
remove_pointer_t
<
T
>
>
&
&
!
IsIomanip
<
std
:
:
remove_pointer_t
<
T
>
>
>
>
=
true
;
template
<
typename
T
typename
=
void
>
struct
ToStringHelper
{
static
void
Stringify
(
const
T
&
v
std
:
:
ostringstream
&
ss
)
{
ss
<
<
"
[
"
<
<
sizeof
(
v
)
<
<
"
-
byte
object
at
0x
"
<
<
std
:
:
addressof
(
v
)
<
<
"
]
"
;
}
}
;
template
<
typename
T
>
struct
ToStringHelper
<
T
std
:
:
enable_if_t
<
SupportsOstreamOperator
<
const
T
&
>
:
:
value
&
&
!
WillBeIncorrectlyStreamedAsBool
<
T
>
>
>
{
static
void
Stringify
(
const
T
&
v
std
:
:
ostringstream
&
ss
)
{
ss
<
<
v
;
}
}
;
template
<
typename
T
>
struct
ToStringHelper
<
T
std
:
:
enable_if_t
<
SupportsOstreamOperator
<
const
T
&
>
:
:
value
&
&
WillBeIncorrectlyStreamedAsBool
<
T
>
>
>
{
static
void
Stringify
(
const
T
&
v
std
:
:
ostringstream
&
ss
)
{
ToStringHelper
<
const
void
*
>
:
:
Stringify
(
reinterpret_cast
<
const
void
*
>
(
v
)
ss
)
;
}
}
;
template
<
typename
T
>
struct
ToStringHelper
<
T
std
:
:
enable_if_t
<
!
SupportsOstreamOperator
<
const
T
&
>
:
:
value
&
&
SupportsToString
<
const
T
&
>
:
:
value
>
>
{
static
void
Stringify
(
const
T
&
v
std
:
:
ostringstream
&
ss
)
{
ToStringHelper
<
decltype
(
v
.
ToString
(
)
)
>
:
:
Stringify
(
v
.
ToString
(
)
ss
)
;
}
}
;
template
<
typename
T
>
struct
ToStringHelper
<
T
std
:
:
enable_if_t
<
!
SupportsOstreamOperator
<
const
T
&
>
:
:
value
&
&
std
:
:
is_enum_v
<
T
>
>
>
{
static
void
Stringify
(
const
T
&
v
std
:
:
ostringstream
&
ss
)
{
using
UT
=
typename
std
:
:
underlying_type_t
<
T
>
;
ToStringHelper
<
UT
>
:
:
Stringify
(
static_cast
<
UT
>
(
v
)
ss
)
;
}
}
;
}
template
<
typename
.
.
.
Ts
>
std
:
:
string
ToString
(
const
Ts
&
.
.
.
values
)
{
std
:
:
ostringstream
ss
;
(
internal
:
:
ToStringHelper
<
remove_cvref_t
<
decltype
(
values
)
>
>
:
:
Stringify
(
values
ss
)
.
.
.
)
;
return
ss
.
str
(
)
;
}
}
#
endif
