#
ifndef
BASE_SEQUENCE_CHECKER_IMPL_H_
#
define
BASE_SEQUENCE_CHECKER_IMPL_H_
#
include
<
memory
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
synchronization
/
lock
.
h
"
#
include
"
base
/
thread_annotations
.
h
"
#
include
"
base
/
threading
/
thread_checker_impl
.
h
"
namespace
base
{
namespace
debug
{
class
StackTrace
;
}
class
THREAD_ANNOTATION_ATTRIBUTE__
(
capability
(
"
context
"
)
)
BASE_EXPORT
SequenceCheckerImpl
{
public
:
static
void
EnableStackLogging
(
)
;
SequenceCheckerImpl
(
)
;
SequenceCheckerImpl
(
SequenceCheckerImpl
&
&
other
)
;
SequenceCheckerImpl
&
operator
=
(
SequenceCheckerImpl
&
&
other
)
;
SequenceCheckerImpl
(
const
SequenceCheckerImpl
&
)
=
delete
;
SequenceCheckerImpl
&
operator
=
(
const
SequenceCheckerImpl
&
)
=
delete
;
~
SequenceCheckerImpl
(
)
;
[
[
nodiscard
]
]
bool
CalledOnValidSequence
(
std
:
:
unique_ptr
<
debug
:
:
StackTrace
>
*
out_bound_at
=
nullptr
)
const
;
void
DetachFromSequence
(
)
;
private
:
ThreadCheckerImpl
thread_checker_
;
}
;
}
#
endif
