#
ifndef
BASE_CPU_H_
#
define
BASE_CPU_H_
#
include
<
cstdint
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
#
if
defined
(
ARCH_CPU_X86_FAMILY
)
namespace
internal
{
struct
X86ModelInfo
{
int
family
;
int
model
;
int
ext_family
;
int
ext_model
;
}
;
BASE_EXPORT
X86ModelInfo
ComputeX86FamilyAndModel
(
const
std
:
:
string
&
vendor
int
signature
)
;
}
#
endif
class
BASE_EXPORT
CPU
final
{
public
:
CPU
(
)
;
CPU
(
CPU
&
&
)
;
CPU
(
const
CPU
&
)
=
delete
;
static
const
CPU
&
GetInstanceNoAllocation
(
)
;
enum
IntelMicroArchitecture
{
PENTIUM
=
0
SSE
=
1
SSE2
=
2
SSE3
=
3
SSSE3
=
4
SSE41
=
5
SSE42
=
6
AVX
=
7
AVX2
=
8
FMA3
=
9
MAX_INTEL_MICRO_ARCHITECTURE
=
10
}
;
const
std
:
:
string
&
vendor_name
(
)
const
{
return
cpu_vendor_
;
}
int
signature
(
)
const
{
return
signature_
;
}
int
stepping
(
)
const
{
return
stepping_
;
}
int
model
(
)
const
{
return
model_
;
}
int
family
(
)
const
{
return
family_
;
}
int
type
(
)
const
{
return
type_
;
}
int
extended_model
(
)
const
{
return
ext_model_
;
}
int
extended_family
(
)
const
{
return
ext_family_
;
}
bool
has_mmx
(
)
const
{
return
has_mmx_
;
}
bool
has_sse
(
)
const
{
return
has_sse_
;
}
bool
has_sse2
(
)
const
{
return
has_sse2_
;
}
bool
has_sse3
(
)
const
{
return
has_sse3_
;
}
bool
has_ssse3
(
)
const
{
return
has_ssse3_
;
}
bool
has_sse41
(
)
const
{
return
has_sse41_
;
}
bool
has_sse42
(
)
const
{
return
has_sse42_
;
}
bool
has_popcnt
(
)
const
{
return
has_popcnt_
;
}
bool
has_avx
(
)
const
{
return
has_avx_
;
}
bool
has_fma3
(
)
const
{
return
has_fma3_
;
}
bool
has_avx2
(
)
const
{
return
has_avx2_
;
}
bool
has_aesni
(
)
const
{
return
has_aesni_
;
}
bool
has_non_stop_time_stamp_counter
(
)
const
{
return
has_non_stop_time_stamp_counter_
;
}
bool
is_running_in_vm
(
)
const
{
return
is_running_in_vm_
;
}
#
if
defined
(
ARCH_CPU_ARM_FAMILY
)
uint8_t
implementer
(
)
const
{
return
implementer_
;
}
uint32_t
part_number
(
)
const
{
return
part_number_
;
}
#
endif
#
if
defined
(
ARCH_CPU_ARM_FAMILY
)
bool
has_mte
(
)
const
{
return
has_mte_
;
}
bool
has_bti
(
)
const
{
return
has_bti_
;
}
#
else
constexpr
bool
has_mte
(
)
const
{
return
false
;
}
constexpr
bool
has_bti
(
)
const
{
return
false
;
}
#
endif
#
if
defined
(
ARCH_CPU_X86_FAMILY
)
bool
has_pku
(
)
const
{
return
has_pku_
;
}
#
else
constexpr
bool
has_pku
(
)
const
{
return
false
;
}
#
endif
#
if
defined
(
ARCH_CPU_X86_FAMILY
)
IntelMicroArchitecture
GetIntelMicroArchitecture
(
)
const
;
#
endif
const
std
:
:
string
&
cpu_brand
(
)
const
{
return
cpu_brand_
;
}
private
:
void
Initialize
(
bool
requires_branding
)
;
explicit
CPU
(
bool
requires_branding
)
;
int
signature_
=
0
;
int
type_
=
0
;
int
family_
=
0
;
int
model_
=
0
;
int
stepping_
=
0
;
int
ext_model_
=
0
;
int
ext_family_
=
0
;
#
if
defined
(
ARCH_CPU_ARM_FAMILY
)
uint32_t
part_number_
=
0
;
uint8_t
implementer_
=
0
;
#
endif
bool
has_mmx_
=
false
;
bool
has_sse_
=
false
;
bool
has_sse2_
=
false
;
bool
has_sse3_
=
false
;
bool
has_ssse3_
=
false
;
bool
has_sse41_
=
false
;
bool
has_sse42_
=
false
;
bool
has_popcnt_
=
false
;
bool
has_avx_
=
false
;
bool
has_fma3_
=
false
;
bool
has_avx2_
=
false
;
bool
has_aesni_
=
false
;
#
if
defined
(
ARCH_CPU_ARM_FAMILY
)
bool
has_mte_
=
false
;
bool
has_bti_
=
false
;
#
endif
#
if
defined
(
ARCH_CPU_X86_FAMILY
)
bool
has_pku_
=
false
;
#
endif
bool
has_non_stop_time_stamp_counter_
=
false
;
bool
is_running_in_vm_
=
false
;
std
:
:
string
cpu_vendor_
=
"
unknown
"
;
std
:
:
string
cpu_brand_
;
}
;
}
#
endif
