#
include
"
base
/
base_paths
.
h
"
#
include
"
base
/
files
/
file_path
.
h
"
#
include
"
base
/
files
/
file_util
.
h
"
#
include
"
base
/
path_service
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
bool
PathProvider
(
int
key
FilePath
*
result
)
{
switch
(
key
)
{
case
DIR_EXE
:
if
(
!
PathService
:
:
Get
(
FILE_EXE
result
)
)
return
false
;
*
result
=
result
-
>
DirName
(
)
;
return
true
;
#
if
!
BUILDFLAG
(
IS_FUCHSIA
)
&
&
!
BUILDFLAG
(
IS_IOS
)
case
DIR_MODULE
:
if
(
!
PathService
:
:
Get
(
FILE_MODULE
result
)
)
return
false
;
*
result
=
result
-
>
DirName
(
)
;
return
true
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
case
DIR_ASSETS
:
return
PathService
:
:
Get
(
DIR_MODULE
result
)
;
#
endif
#
endif
case
DIR_TEMP
:
return
GetTempDir
(
result
)
;
case
DIR_HOME
:
*
result
=
GetHomeDir
(
)
;
return
true
;
case
base
:
:
DIR_SRC_TEST_DATA_ROOT
:
NOTREACHED
(
)
;
return
false
;
#
if
!
BUILDFLAG
(
IS_FUCHSIA
)
&
&
!
BUILDFLAG
(
IS_IOS
)
case
DIR_OUT_TEST_DATA_ROOT
:
return
PathService
:
:
Get
(
DIR_MODULE
result
)
;
#
endif
case
DIR_GEN_TEST_DATA_ROOT
:
if
(
!
PathService
:
:
Get
(
DIR_OUT_TEST_DATA_ROOT
result
)
)
{
return
false
;
}
*
result
=
result
-
>
Append
(
FILE_PATH_LITERAL
(
"
gen
"
)
)
;
return
true
;
case
DIR_TEST_DATA
:
{
FilePath
test_data_path
;
if
(
!
PathService
:
:
Get
(
DIR_SRC_TEST_DATA_ROOT
&
test_data_path
)
)
{
return
false
;
}
test_data_path
=
test_data_path
.
Append
(
FILE_PATH_LITERAL
(
"
base
"
)
)
;
test_data_path
=
test_data_path
.
Append
(
FILE_PATH_LITERAL
(
"
test
"
)
)
;
test_data_path
=
test_data_path
.
Append
(
FILE_PATH_LITERAL
(
"
data
"
)
)
;
if
(
!
PathExists
(
test_data_path
)
)
return
false
;
*
result
=
test_data_path
;
return
true
;
}
}
return
false
;
}
}
