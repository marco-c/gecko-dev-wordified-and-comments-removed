#
ifndef
BASE_IMMEDIATE_CRASH_H_
#
define
BASE_IMMEDIATE_CRASH_H_
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
COMPILER_GCC
)
#
if
BUILDFLAG
(
IS_NACL
)
#
define
TRAP_SEQUENCE1_
(
)
__builtin_trap
(
)
#
define
TRAP_SEQUENCE2_
(
)
asm
volatile
(
"
"
)
#
elif
defined
(
ARCH_CPU_X86_FAMILY
)
#
define
TRAP_SEQUENCE1_
(
)
asm
volatile
(
"
int3
"
)
#
if
BUILDFLAG
(
IS_APPLE
)
#
define
TRAP_SEQUENCE2_
(
)
asm
volatile
(
"
"
)
#
else
#
define
TRAP_SEQUENCE2_
(
)
asm
volatile
(
"
ud2
"
)
#
endif
#
elif
defined
(
ARCH_CPU_ARMEL
)
#
define
TRAP_SEQUENCE1_
(
)
asm
volatile
(
"
bkpt
#
0
"
)
#
define
TRAP_SEQUENCE2_
(
)
asm
volatile
(
"
udf
#
0
"
)
#
elif
defined
(
ARCH_CPU_ARM64
)
#
define
TRAP_SEQUENCE1_
(
)
asm
volatile
(
"
brk
#
0
"
)
#
define
TRAP_SEQUENCE2_
(
)
asm
volatile
(
"
hlt
#
0
"
)
#
else
#
define
TRAP_SEQUENCE1_
(
)
__builtin_trap
(
)
#
define
TRAP_SEQUENCE2_
(
)
asm
volatile
(
"
"
)
#
endif
#
elif
defined
(
COMPILER_MSVC
)
#
if
!
defined
(
__clang__
)
#
define
TRAP_SEQUENCE1_
(
)
__debugbreak
(
)
#
define
TRAP_SEQUENCE2_
(
)
#
elif
defined
(
ARCH_CPU_ARM64
)
#
define
TRAP_SEQUENCE1_
(
)
__debugbreak
(
)
#
define
TRAP_SEQUENCE2_
(
)
__asm
volatile
(
"
"
)
#
else
#
define
TRAP_SEQUENCE1_
(
)
asm
volatile
(
"
int3
"
)
#
define
TRAP_SEQUENCE2_
(
)
asm
volatile
(
"
ud2
"
)
#
endif
#
else
#
error
No
supported
trap
sequence
!
#
endif
#
define
TRAP_SEQUENCE_
(
)
\
do
{
\
TRAP_SEQUENCE1_
(
)
;
\
TRAP_SEQUENCE2_
(
)
;
\
}
while
(
false
)
#
if
defined
(
COMPILER_GCC
)
#
define
IMMEDIATE_CRASH_ALWAYS_INLINE
inline
__attribute__
(
(
__always_inline__
)
)
#
elif
defined
(
COMPILER_MSVC
)
#
define
IMMEDIATE_CRASH_ALWAYS_INLINE
__forceinline
#
else
#
define
IMMEDIATE_CRASH_ALWAYS_INLINE
inline
#
endif
namespace
base
{
[
[
noreturn
]
]
IMMEDIATE_CRASH_ALWAYS_INLINE
void
ImmediateCrash
(
)
{
TRAP_SEQUENCE_
(
)
;
#
if
defined
(
__clang__
)
|
|
defined
(
COMPILER_GCC
)
__builtin_unreachable
(
)
;
#
endif
}
}
#
endif
