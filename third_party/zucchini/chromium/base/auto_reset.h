#
ifndef
BASE_AUTO_RESET_H_
#
define
BASE_AUTO_RESET_H_
#
include
<
utility
>
#
include
"
base
/
check_op
.
h
"
#
include
"
base
/
memory
/
raw_ptr_exclusion
.
h
"
namespace
base
{
template
<
typename
T
>
class
[
[
maybe_unused
nodiscard
]
]
AutoReset
{
public
:
template
<
typename
U
>
AutoReset
(
T
*
scoped_variable
U
&
&
new_value
)
:
scoped_variable_
(
scoped_variable
)
original_value_
(
std
:
:
exchange
(
*
scoped_variable_
std
:
:
forward
<
U
>
(
new_value
)
)
)
{
}
template
<
typename
U
>
AutoReset
(
T
*
scoped_variable
U
&
&
new_value
const
T
&
expected_old_value
)
:
AutoReset
(
scoped_variable
new_value
)
{
DCHECK_EQ
(
original_value_
expected_old_value
)
;
}
AutoReset
(
AutoReset
&
&
other
)
:
scoped_variable_
(
std
:
:
exchange
(
other
.
scoped_variable_
nullptr
)
)
original_value_
(
std
:
:
move
(
other
.
original_value_
)
)
{
}
AutoReset
&
operator
=
(
AutoReset
&
&
rhs
)
{
scoped_variable_
=
std
:
:
exchange
(
rhs
.
scoped_variable_
nullptr
)
;
original_value_
=
std
:
:
move
(
rhs
.
original_value_
)
;
return
*
this
;
}
~
AutoReset
(
)
{
if
(
scoped_variable_
)
*
scoped_variable_
=
std
:
:
move
(
original_value_
)
;
}
private
:
RAW_PTR_EXCLUSION
T
*
scoped_variable_
;
T
original_value_
;
}
;
}
#
endif
