#
import
<
Foundation
/
Foundation
.
h
>
#
include
"
base
/
apple
/
bundle_locations
.
h
"
#
include
"
base
/
base_paths
.
h
"
#
include
"
base
/
base_paths_apple
.
h
"
#
include
"
base
/
files
/
file_path
.
h
"
#
include
"
base
/
files
/
file_util
.
h
"
#
include
"
base
/
mac
/
foundation_util
.
h
"
#
include
"
base
/
notreached
.
h
"
#
include
"
base
/
path_service
.
h
"
#
if
!
defined
(
__has_feature
)
|
|
!
__has_feature
(
objc_arc
)
#
error
"
This
file
requires
ARC
support
.
"
#
endif
namespace
base
{
bool
PathProviderMac
(
int
key
base
:
:
FilePath
*
result
)
{
switch
(
key
)
{
case
base
:
:
FILE_EXE
:
*
result
=
base
:
:
apple
:
:
internal
:
:
GetExecutablePath
(
)
;
return
true
;
case
base
:
:
FILE_MODULE
:
return
base
:
:
apple
:
:
internal
:
:
GetModulePathForAddress
(
result
reinterpret_cast
<
const
void
*
>
(
&
base
:
:
PathProviderMac
)
)
;
case
base
:
:
DIR_APP_DATA
:
{
bool
success
=
base
:
:
mac
:
:
GetUserDirectory
(
NSApplicationSupportDirectory
result
)
;
return
success
;
}
case
base
:
:
DIR_SRC_TEST_DATA_ROOT
:
if
(
!
PathService
:
:
Get
(
base
:
:
FILE_EXE
result
)
)
{
return
false
;
}
*
result
=
result
-
>
DirName
(
)
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
if
(
base
:
:
mac
:
:
AmIBundled
(
)
)
{
*
result
=
result
-
>
DirName
(
)
.
DirName
(
)
.
DirName
(
)
.
DirName
(
)
.
DirName
(
)
;
}
else
{
*
result
=
result
-
>
DirName
(
)
.
DirName
(
)
;
}
#
else
*
result
=
result
-
>
DirName
(
)
.
DirName
(
)
.
DirName
(
)
;
#
endif
return
true
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
case
base
:
:
DIR_USER_DESKTOP
:
return
base
:
:
mac
:
:
GetUserDirectory
(
NSDesktopDirectory
result
)
;
case
base
:
:
DIR_ASSETS
:
if
(
!
base
:
:
mac
:
:
AmIBundled
(
)
)
{
return
PathService
:
:
Get
(
base
:
:
DIR_MODULE
result
)
;
}
*
result
=
base
:
:
apple
:
:
FrameworkBundlePath
(
)
.
Append
(
FILE_PATH_LITERAL
(
"
Resources
"
)
)
;
return
true
;
case
base
:
:
DIR_CACHE
:
return
base
:
:
mac
:
:
GetUserDirectory
(
NSCachesDirectory
result
)
;
#
endif
default
:
return
false
;
}
}
}
