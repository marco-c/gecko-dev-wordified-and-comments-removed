#
ifndef
BASE_FILES_FILE_PATH_H_
#
define
BASE_FILES_FILE_PATH_H_
#
include
<
cstddef
>
#
include
<
iosfwd
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
strings
/
string_piece
.
h
"
#
include
"
base
/
trace_event
/
base_tracing_forward
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
BUILDFLAG
(
IS_WIN
)
#
define
FILE_PATH_USES_DRIVE_LETTERS
#
define
FILE_PATH_USES_WIN_SEPARATORS
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
#
define
PRFilePath
"
ls
"
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
#
define
PRFilePath
"
s
"
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
#
define
FILE_PATH_LITERAL_INTERNAL
(
x
)
L
#
#
x
#
define
FILE_PATH_LITERAL
(
x
)
FILE_PATH_LITERAL_INTERNAL
(
x
)
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
#
define
FILE_PATH_LITERAL
(
x
)
x
#
endif
namespace
base
{
class
SafeBaseName
;
class
Pickle
;
class
PickleIterator
;
class
BASE_EXPORT
FilePath
{
public
:
#
if
BUILDFLAG
(
IS_WIN
)
typedef
std
:
:
wstring
StringType
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
typedef
std
:
:
string
StringType
;
#
endif
typedef
StringType
:
:
value_type
CharType
;
typedef
BasicStringPiece
<
CharType
>
StringPieceType
;
static
constexpr
CharType
kSeparators
[
]
=
#
if
defined
(
FILE_PATH_USES_WIN_SEPARATORS
)
FILE_PATH_LITERAL
(
"
\
\
/
"
)
;
#
else
FILE_PATH_LITERAL
(
"
/
"
)
;
#
endif
static
constexpr
size_t
kSeparatorsLength
=
std
:
:
size
(
kSeparators
)
;
static
constexpr
CharType
kCurrentDirectory
[
]
=
FILE_PATH_LITERAL
(
"
.
"
)
;
static
constexpr
CharType
kParentDirectory
[
]
=
FILE_PATH_LITERAL
(
"
.
.
"
)
;
static
constexpr
CharType
kExtensionSeparator
=
FILE_PATH_LITERAL
(
'
.
'
)
;
FilePath
(
)
;
FilePath
(
const
FilePath
&
that
)
;
explicit
FilePath
(
StringPieceType
path
)
;
~
FilePath
(
)
;
FilePath
&
operator
=
(
const
FilePath
&
that
)
;
FilePath
(
FilePath
&
&
that
)
noexcept
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
FilePath
&
operator
=
(
FilePath
&
&
that
)
noexcept
;
#
else
FilePath
&
operator
=
(
FilePath
&
&
that
)
;
#
endif
bool
operator
=
=
(
const
FilePath
&
that
)
const
;
bool
operator
!
=
(
const
FilePath
&
that
)
const
;
bool
operator
<
(
const
FilePath
&
that
)
const
{
return
path_
<
that
.
path_
;
}
const
StringType
&
value
(
)
const
{
return
path_
;
}
[
[
nodiscard
]
]
bool
empty
(
)
const
{
return
path_
.
empty
(
)
;
}
void
clear
(
)
{
path_
.
clear
(
)
;
}
static
bool
IsSeparator
(
CharType
character
)
;
std
:
:
vector
<
FilePath
:
:
StringType
>
GetComponents
(
)
const
;
bool
IsParent
(
const
FilePath
&
child
)
const
;
bool
AppendRelativePath
(
const
FilePath
&
child
FilePath
*
path
)
const
;
[
[
nodiscard
]
]
FilePath
DirName
(
)
const
;
[
[
nodiscard
]
]
FilePath
BaseName
(
)
const
;
[
[
nodiscard
]
]
StringType
Extension
(
)
const
;
[
[
nodiscard
]
]
StringType
FinalExtension
(
)
const
;
[
[
nodiscard
]
]
FilePath
RemoveExtension
(
)
const
;
[
[
nodiscard
]
]
FilePath
RemoveFinalExtension
(
)
const
;
[
[
nodiscard
]
]
FilePath
InsertBeforeExtension
(
StringPieceType
suffix
)
const
;
[
[
nodiscard
]
]
FilePath
InsertBeforeExtensionASCII
(
StringPiece
suffix
)
const
;
[
[
nodiscard
]
]
FilePath
AddExtension
(
StringPieceType
extension
)
const
;
[
[
nodiscard
]
]
FilePath
AddExtensionASCII
(
StringPiece
extension
)
const
;
[
[
nodiscard
]
]
FilePath
ReplaceExtension
(
StringPieceType
extension
)
const
;
bool
MatchesExtension
(
StringPieceType
extension
)
const
;
bool
MatchesFinalExtension
(
StringPieceType
extension
)
const
;
[
[
nodiscard
]
]
FilePath
Append
(
StringPieceType
component
)
const
;
[
[
nodiscard
]
]
FilePath
Append
(
const
FilePath
&
component
)
const
;
[
[
nodiscard
]
]
FilePath
Append
(
const
SafeBaseName
&
component
)
const
;
[
[
nodiscard
]
]
FilePath
AppendASCII
(
StringPiece
component
)
const
;
bool
IsAbsolute
(
)
const
;
bool
IsNetwork
(
)
const
;
[
[
nodiscard
]
]
bool
EndsWithSeparator
(
)
const
;
[
[
nodiscard
]
]
FilePath
AsEndingWithSeparator
(
)
const
;
[
[
nodiscard
]
]
FilePath
StripTrailingSeparators
(
)
const
;
bool
ReferencesParent
(
)
const
;
std
:
:
u16string
LossyDisplayName
(
)
const
;
std
:
:
string
MaybeAsASCII
(
)
const
;
std
:
:
string
AsUTF8Unsafe
(
)
const
;
std
:
:
u16string
AsUTF16Unsafe
(
)
const
;
static
FilePath
FromASCII
(
StringPiece
ascii
)
;
static
FilePath
FromUTF8Unsafe
(
StringPiece
utf8
)
;
static
FilePath
FromUTF16Unsafe
(
StringPiece16
utf16
)
;
void
WriteToPickle
(
Pickle
*
pickle
)
const
;
bool
ReadFromPickle
(
PickleIterator
*
iter
)
;
[
[
nodiscard
]
]
FilePath
NormalizePathSeparators
(
)
const
;
[
[
nodiscard
]
]
FilePath
NormalizePathSeparatorsTo
(
CharType
separator
)
const
;
static
int
CompareIgnoreCase
(
StringPieceType
string1
StringPieceType
string2
)
;
static
bool
CompareEqualIgnoreCase
(
StringPieceType
string1
StringPieceType
string2
)
{
return
CompareIgnoreCase
(
string1
string2
)
=
=
0
;
}
static
bool
CompareLessIgnoreCase
(
StringPieceType
string1
StringPieceType
string2
)
{
return
CompareIgnoreCase
(
string1
string2
)
<
0
;
}
void
WriteIntoTrace
(
perfetto
:
:
TracedValue
context
)
const
;
#
if
BUILDFLAG
(
IS_APPLE
)
static
StringType
GetHFSDecomposedForm
(
StringPieceType
string
)
;
static
int
HFSFastUnicodeCompare
(
StringPieceType
string1
StringPieceType
string2
)
;
#
endif
#
if
BUILDFLAG
(
IS_ANDROID
)
bool
IsContentUri
(
)
const
;
#
endif
private
:
void
StripTrailingSeparatorsInternal
(
)
;
StringType
path_
;
}
;
BASE_EXPORT
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
out
const
FilePath
&
file_path
)
;
}
namespace
std
{
template
<
>
struct
hash
<
base
:
:
FilePath
>
{
typedef
base
:
:
FilePath
argument_type
;
typedef
std
:
:
size_t
result_type
;
result_type
operator
(
)
(
argument_type
const
&
f
)
const
{
return
hash
<
base
:
:
FilePath
:
:
StringType
>
(
)
(
f
.
value
(
)
)
;
}
}
;
}
#
endif
