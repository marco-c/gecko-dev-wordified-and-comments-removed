#
ifndef
BASE_FILES_FILE_H_
#
define
BASE_FILES_FILE_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
containers
/
span
.
h
"
#
include
"
base
/
files
/
file_path
.
h
"
#
include
"
base
/
files
/
file_tracing
.
h
"
#
include
"
base
/
files
/
platform_file
.
h
"
#
include
"
base
/
time
/
time
.
h
"
#
include
"
base
/
trace_event
/
base_tracing_forward
.
h
"
#
include
"
build
/
build_config
.
h
"
struct
stat
;
namespace
base
{
using
stat_wrapper_t
=
struct
stat
;
class
BASE_EXPORT
File
{
public
:
enum
Flags
:
uint32_t
{
FLAG_OPEN
=
1
<
<
0
FLAG_CREATE
=
1
<
<
1
FLAG_OPEN_ALWAYS
=
1
<
<
2
FLAG_CREATE_ALWAYS
=
1
<
<
3
FLAG_OPEN_TRUNCATED
=
1
<
<
4
FLAG_READ
=
1
<
<
5
FLAG_WRITE
=
1
<
<
6
FLAG_APPEND
=
1
<
<
7
FLAG_WIN_EXCLUSIVE_READ
=
1
<
<
8
FLAG_WIN_EXCLUSIVE_WRITE
=
1
<
<
9
FLAG_ASYNC
=
1
<
<
10
FLAG_WIN_TEMPORARY
=
1
<
<
11
FLAG_WIN_HIDDEN
=
1
<
<
12
FLAG_DELETE_ON_CLOSE
=
1
<
<
13
FLAG_WRITE_ATTRIBUTES
=
1
<
<
14
FLAG_WIN_SHARE_DELETE
=
1
<
<
15
FLAG_TERMINAL_DEVICE
=
1
<
<
16
FLAG_WIN_BACKUP_SEMANTICS
=
1
<
<
17
FLAG_WIN_EXECUTE
=
1
<
<
18
FLAG_WIN_SEQUENTIAL_SCAN
=
1
<
<
19
FLAG_CAN_DELETE_ON_CLOSE
=
1
<
<
20
#
if
!
defined
(
MOZ_ZUCCHINI
)
FLAG_WIN_NO_EXECUTE
=
1
<
<
21
#
endif
}
;
enum
Error
{
FILE_OK
=
0
FILE_ERROR_FAILED
=
-
1
FILE_ERROR_IN_USE
=
-
2
FILE_ERROR_EXISTS
=
-
3
FILE_ERROR_NOT_FOUND
=
-
4
FILE_ERROR_ACCESS_DENIED
=
-
5
FILE_ERROR_TOO_MANY_OPENED
=
-
6
FILE_ERROR_NO_MEMORY
=
-
7
FILE_ERROR_NO_SPACE
=
-
8
FILE_ERROR_NOT_A_DIRECTORY
=
-
9
FILE_ERROR_INVALID_OPERATION
=
-
10
FILE_ERROR_SECURITY
=
-
11
FILE_ERROR_ABORT
=
-
12
FILE_ERROR_NOT_A_FILE
=
-
13
FILE_ERROR_NOT_EMPTY
=
-
14
FILE_ERROR_INVALID_URL
=
-
15
FILE_ERROR_IO
=
-
16
FILE_ERROR_MAX
=
-
17
}
;
enum
Whence
{
FROM_BEGIN
=
0
FROM_CURRENT
=
1
FROM_END
=
2
}
;
struct
BASE_EXPORT
Info
{
Info
(
)
;
~
Info
(
)
;
#
if
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
void
FromStat
(
const
stat_wrapper_t
&
stat_info
)
;
#
endif
int64_t
size
=
0
;
bool
is_directory
=
false
;
bool
is_symbolic_link
=
false
;
Time
last_modified
;
Time
last_accessed
;
Time
creation_time
;
}
;
File
(
)
;
File
(
const
FilePath
&
path
uint32_t
flags
)
;
explicit
File
(
ScopedPlatformFile
platform_file
)
;
explicit
File
(
PlatformFile
platform_file
)
;
File
(
ScopedPlatformFile
platform_file
bool
async
)
;
File
(
PlatformFile
platform_file
bool
async
)
;
explicit
File
(
Error
error_details
)
;
File
(
File
&
&
other
)
;
File
(
const
File
&
)
=
delete
;
File
&
operator
=
(
const
File
&
)
=
delete
;
~
File
(
)
;
File
&
operator
=
(
File
&
&
other
)
;
void
Initialize
(
const
FilePath
&
path
uint32_t
flags
)
;
bool
IsValid
(
)
const
;
bool
created
(
)
const
{
return
created_
;
}
Error
error_details
(
)
const
{
return
error_details_
;
}
PlatformFile
GetPlatformFile
(
)
const
;
PlatformFile
TakePlatformFile
(
)
;
void
Close
(
)
;
int64_t
Seek
(
Whence
whence
int64_t
offset
)
;
bool
ReadAndCheck
(
int64_t
offset
span
<
uint8_t
>
data
)
;
bool
ReadAtCurrentPosAndCheck
(
span
<
uint8_t
>
data
)
;
bool
WriteAndCheck
(
int64_t
offset
span
<
const
uint8_t
>
data
)
;
bool
WriteAtCurrentPosAndCheck
(
span
<
const
uint8_t
>
data
)
;
int
Read
(
int64_t
offset
char
*
data
int
size
)
;
int
ReadAtCurrentPos
(
char
*
data
int
size
)
;
int
ReadNoBestEffort
(
int64_t
offset
char
*
data
int
size
)
;
int
ReadAtCurrentPosNoBestEffort
(
char
*
data
int
size
)
;
int
Write
(
int64_t
offset
const
char
*
data
int
size
)
;
int
WriteAtCurrentPos
(
const
char
*
data
int
size
)
;
int
WriteAtCurrentPosNoBestEffort
(
const
char
*
data
int
size
)
;
int64_t
GetLength
(
)
;
bool
SetLength
(
int64_t
length
)
;
bool
Flush
(
)
;
bool
SetTimes
(
Time
last_access_time
Time
last_modified_time
)
;
bool
GetInfo
(
Info
*
info
)
;
#
if
!
BUILDFLAG
(
\
IS_FUCHSIA
)
enum
class
LockMode
{
kShared
kExclusive
}
;
Error
Lock
(
LockMode
mode
)
;
Error
Unlock
(
)
;
#
endif
File
Duplicate
(
)
const
;
bool
async
(
)
const
{
return
async_
;
}
void
WriteIntoTrace
(
perfetto
:
:
TracedValue
context
)
const
;
#
if
BUILDFLAG
(
IS_WIN
)
bool
DeleteOnClose
(
bool
delete_on_close
)
;
#
endif
#
if
BUILDFLAG
(
IS_WIN
)
static
Error
OSErrorToFileError
(
DWORD
last_error
)
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
static
Error
OSErrorToFileError
(
int
saved_errno
)
;
#
endif
static
Error
GetLastFileError
(
)
;
static
std
:
:
string
ErrorToString
(
Error
error
)
;
#
if
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
static
int
Stat
(
const
char
*
path
stat_wrapper_t
*
sb
)
;
static
int
Fstat
(
int
fd
stat_wrapper_t
*
sb
)
;
static
int
Lstat
(
const
char
*
path
stat_wrapper_t
*
sb
)
;
#
endif
#
if
!
defined
(
MOZ_ZUCCHINI
)
static
constexpr
uint32_t
AddFlagsForPassingToUntrustedProcess
(
uint32_t
flags
)
{
if
(
flags
&
File
:
:
FLAG_WRITE
|
|
flags
&
File
:
:
FLAG_APPEND
|
|
flags
&
File
:
:
FLAG_WRITE_ATTRIBUTES
)
{
flags
|
=
File
:
:
FLAG_WIN_NO_EXECUTE
;
}
return
flags
;
}
#
endif
private
:
friend
class
FileTracing
:
:
ScopedTrace
;
void
DoInitialize
(
const
FilePath
&
path
uint32_t
flags
)
;
void
SetPlatformFile
(
PlatformFile
file
)
;
ScopedPlatformFile
file_
;
FilePath
tracing_path_
;
FileTracing
:
:
ScopedEnabler
trace_enabler_
;
Error
error_details_
=
FILE_ERROR_FAILED
;
bool
created_
=
false
;
bool
async_
=
false
;
}
;
}
#
endif
