#
ifndef
BASE_FILES_SCOPED_FILE_H_
#
define
BASE_FILES_SCOPED_FILE_H_
#
include
<
stdio
.
h
>
#
include
<
memory
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
scoped_generic
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
namespace
internal
{
#
if
BUILDFLAG
(
IS_ANDROID
)
struct
BASE_EXPORT
ScopedFDCloseTraits
:
public
ScopedGenericOwnershipTracking
{
static
int
InvalidValue
(
)
{
return
-
1
;
}
static
void
Free
(
int
)
;
static
void
Acquire
(
const
ScopedGeneric
<
int
ScopedFDCloseTraits
>
&
int
)
;
static
void
Release
(
const
ScopedGeneric
<
int
ScopedFDCloseTraits
>
&
int
)
;
}
;
#
elif
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
#
if
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_LINUX
)
struct
BASE_EXPORT
ScopedFDCloseTraits
:
public
ScopedGenericOwnershipTracking
{
#
else
struct
BASE_EXPORT
ScopedFDCloseTraits
{
#
endif
static
int
InvalidValue
(
)
{
return
-
1
;
}
static
void
Free
(
int
fd
)
;
#
if
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_LINUX
)
static
void
Acquire
(
const
ScopedGeneric
<
int
ScopedFDCloseTraits
>
&
int
)
;
static
void
Release
(
const
ScopedGeneric
<
int
ScopedFDCloseTraits
>
&
int
)
;
#
endif
}
;
#
endif
struct
ScopedFILECloser
{
inline
void
operator
(
)
(
FILE
*
x
)
const
{
if
(
x
)
fclose
(
x
)
;
}
}
;
}
#
if
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_LINUX
)
namespace
subtle
{
void
BASE_EXPORT
EnableFDOwnershipEnforcement
(
bool
enabled
)
;
void
BASE_EXPORT
ResetFDOwnership
(
)
;
}
#
endif
#
if
BUILDFLAG
(
IS_POSIX
)
|
|
BUILDFLAG
(
IS_FUCHSIA
)
typedef
ScopedGeneric
<
int
internal
:
:
ScopedFDCloseTraits
>
ScopedFD
;
#
endif
typedef
std
:
:
unique_ptr
<
FILE
internal
:
:
ScopedFILECloser
>
ScopedFILE
;
#
if
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_LINUX
)
bool
BASE_EXPORT
IsFDOwned
(
int
fd
)
;
#
endif
}
#
endif
