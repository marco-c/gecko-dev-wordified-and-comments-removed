#
include
"
base
/
files
/
file_util
.
h
"
#
import
<
Foundation
/
Foundation
.
h
>
#
include
<
copyfile
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
"
base
/
check_op
.
h
"
#
include
"
base
/
files
/
file_path
.
h
"
#
include
"
base
/
mac
/
foundation_util
.
h
"
#
include
"
base
/
strings
/
string_util
.
h
"
#
include
"
base
/
threading
/
scoped_blocking_call
.
h
"
#
if
!
defined
(
__has_feature
)
|
|
!
__has_feature
(
objc_arc
)
#
error
"
This
file
requires
ARC
support
.
"
#
endif
namespace
base
{
bool
CopyFile
(
const
FilePath
&
from_path
const
FilePath
&
to_path
)
{
ScopedBlockingCall
scoped_blocking_call
(
FROM_HERE
BlockingType
:
:
MAY_BLOCK
)
;
if
(
from_path
.
ReferencesParent
(
)
|
|
to_path
.
ReferencesParent
(
)
)
return
false
;
return
(
copyfile
(
from_path
.
value
(
)
.
c_str
(
)
to_path
.
value
(
)
.
c_str
(
)
nullptr
COPYFILE_DATA
)
=
=
0
)
;
}
bool
GetTempDir
(
base
:
:
FilePath
*
path
)
{
const
char
*
env_tmpdir
=
getenv
(
"
MAC_CHROMIUM_TMPDIR
"
)
;
if
(
env_tmpdir
)
{
*
path
=
base
:
:
FilePath
(
env_tmpdir
)
;
return
true
;
}
NSString
*
tmp
=
NSTemporaryDirectory
(
)
;
if
(
tmp
=
=
nil
)
return
false
;
*
path
=
base
:
:
mac
:
:
NSStringToFilePath
(
tmp
)
;
return
true
;
}
FilePath
GetHomeDir
(
)
{
NSString
*
tmp
=
NSHomeDirectory
(
)
;
if
(
tmp
!
=
nil
)
{
FilePath
mac_home_dir
=
base
:
:
mac
:
:
NSStringToFilePath
(
tmp
)
;
if
(
!
mac_home_dir
.
empty
(
)
)
return
mac_home_dir
;
}
FilePath
rv
;
if
(
GetTempDir
(
&
rv
)
)
return
rv
;
return
FilePath
(
"
/
tmp
"
)
;
}
}
