#
ifndef
BASE_FILES_FILE_TRACING_H_
#
define
BASE_FILES_FILE_TRACING_H_
#
include
<
stdint
.
h
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
define
FILE_TRACING_PREFIX
"
File
"
#
define
SCOPED_FILE_TRACE_WITH_SIZE
(
name
size
)
\
FileTracing
:
:
ScopedTrace
scoped_file_trace
;
\
if
(
FileTracing
:
:
IsCategoryEnabled
(
)
)
\
scoped_file_trace
.
Initialize
(
FILE_TRACING_PREFIX
"
:
:
"
name
this
size
)
#
define
SCOPED_FILE_TRACE
(
name
)
SCOPED_FILE_TRACE_WITH_SIZE
(
name
0
)
namespace
base
{
class
File
;
class
FilePath
;
class
BASE_EXPORT
FileTracing
{
public
:
static
bool
IsCategoryEnabled
(
)
;
class
Provider
{
public
:
virtual
~
Provider
(
)
=
default
;
virtual
bool
FileTracingCategoryIsEnabled
(
)
const
=
0
;
virtual
void
FileTracingEnable
(
const
void
*
id
)
=
0
;
virtual
void
FileTracingDisable
(
const
void
*
id
)
=
0
;
virtual
void
FileTracingEventBegin
(
const
char
*
name
const
void
*
id
const
FilePath
&
path
int64_t
size
)
=
0
;
virtual
void
FileTracingEventEnd
(
const
char
*
name
const
void
*
id
)
=
0
;
}
;
static
void
SetProvider
(
Provider
*
provider
)
;
class
ScopedEnabler
{
public
:
ScopedEnabler
(
)
;
~
ScopedEnabler
(
)
;
}
;
class
ScopedTrace
{
public
:
ScopedTrace
(
)
=
default
;
ScopedTrace
(
const
ScopedTrace
&
)
=
delete
;
ScopedTrace
&
operator
=
(
const
ScopedTrace
&
)
=
delete
;
~
ScopedTrace
(
)
;
void
Initialize
(
const
char
*
name
const
File
*
file
int64_t
size
)
;
private
:
raw_ptr
<
const
void
>
id_
=
nullptr
;
const
char
*
name_
;
}
;
FileTracing
(
const
FileTracing
&
)
=
delete
;
FileTracing
&
operator
=
(
const
FileTracing
&
)
=
delete
;
}
;
}
#
endif
