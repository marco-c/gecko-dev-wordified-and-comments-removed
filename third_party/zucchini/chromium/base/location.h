#
ifndef
BASE_LOCATION_H_
#
define
BASE_LOCATION_H_
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
debug
/
debugging_buildflags
.
h
"
#
include
"
base
/
memory
/
raw_ptr_exclusion
.
h
"
#
include
"
base
/
trace_event
/
base_tracing_forward
.
h
"
#
include
"
build
/
build_config
.
h
"
namespace
base
{
class
BASE_EXPORT
Location
{
public
:
Location
(
)
;
Location
(
const
Location
&
other
)
;
Location
(
Location
&
&
other
)
noexcept
;
Location
&
operator
=
(
const
Location
&
other
)
;
static
Location
CreateForTesting
(
const
char
*
function_name
const
char
*
file_name
int
line_number
const
void
*
program_counter
)
{
return
Location
(
function_name
file_name
line_number
program_counter
)
;
}
bool
operator
=
=
(
const
Location
&
other
)
const
{
return
program_counter_
=
=
other
.
program_counter_
;
}
bool
operator
<
(
const
Location
&
other
)
const
{
return
program_counter_
<
other
.
program_counter_
;
}
bool
has_source_info
(
)
const
{
return
function_name_
&
&
file_name_
;
}
const
char
*
function_name
(
)
const
{
return
function_name_
;
}
const
char
*
file_name
(
)
const
{
return
file_name_
;
}
int
line_number
(
)
const
{
return
line_number_
;
}
const
void
*
program_counter
(
)
const
{
return
program_counter_
;
}
std
:
:
string
ToString
(
)
const
;
void
WriteIntoTrace
(
perfetto
:
:
TracedValue
context
)
const
;
static
Location
Current
(
const
char
*
function_name
=
__builtin_FUNCTION
(
)
const
char
*
file_name
=
__builtin_FILE
(
)
int
line_number
=
__builtin_LINE
(
)
)
;
private
:
Location
(
const
char
*
file_name
const
void
*
program_counter
)
;
Location
(
const
char
*
function_name
const
char
*
file_name
int
line_number
const
void
*
program_counter
)
;
const
char
*
function_name_
=
nullptr
;
const
char
*
file_name_
=
nullptr
;
int
line_number_
=
-
1
;
RAW_PTR_EXCLUSION
const
void
*
program_counter_
=
nullptr
;
}
;
BASE_EXPORT
const
void
*
GetProgramCounter
(
)
;
#
define
FROM_HERE
:
:
base
:
:
Location
:
:
Current
(
)
}
#
endif
