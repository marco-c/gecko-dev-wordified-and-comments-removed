#
ifndef
BASE_THIRD_PARTY_ICU_ICU_UTF_H_
#
define
BASE_THIRD_PARTY_ICU_ICU_UTF_H_
#
include
<
stdint
.
h
>
namespace
base_icu
{
typedef
int8_t
UBool
;
typedef
int32_t
UChar32
;
#
define
CBU_SENTINEL
(
-
1
)
#
ifndef
CBUPRV_BLOCK_MACRO_BEGIN
#
define
CBUPRV_BLOCK_MACRO_BEGIN
do
#
endif
#
ifndef
CBUPRV_BLOCK_MACRO_END
#
define
CBUPRV_BLOCK_MACRO_END
while
(
0
)
#
endif
#
define
CBU_IS_UNICODE_NONCHAR
(
c
)
\
(
(
c
)
>
=
0xfdd0
&
&
\
(
(
c
)
<
=
0xfdef
|
|
(
(
c
)
&
0xfffe
)
=
=
0xfffe
)
&
&
(
c
)
<
=
0x10ffff
)
#
define
CBU_IS_UNICODE_CHAR
(
c
)
\
(
(
uint32_t
)
(
c
)
<
0xd800
|
|
\
(
0xdfff
<
(
c
)
&
&
(
c
)
<
=
0x10ffff
&
&
!
CBU_IS_UNICODE_NONCHAR
(
c
)
)
)
#
define
CBU_IS_SURROGATE
(
c
)
(
(
(
uint32_t
)
(
c
)
&
0xfffff800
)
=
=
0xd800
)
#
define
CBU_IS_SURROGATE_LEAD
(
c
)
(
(
(
c
)
&
0x400
)
=
=
0
)
#
define
CBU8_LEAD3_T1_BITS
"
\
x20
\
x30
\
x30
\
x30
\
x30
\
x30
\
x30
\
x30
\
x30
\
x30
\
x30
\
x30
\
x30
\
x10
\
x30
\
x30
"
#
define
CBU8_IS_VALID_LEAD3_AND_T1
(
lead
t1
)
(
CBU8_LEAD3_T1_BITS
[
(
lead
)
&
0xf
]
&
(
1
<
<
(
(
uint8_t
)
(
t1
)
>
>
5
)
)
)
#
define
CBU8_LEAD4_T1_BITS
"
\
x00
\
x00
\
x00
\
x00
\
x00
\
x00
\
x00
\
x00
\
x1E
\
x0F
\
x0F
\
x0F
\
x00
\
x00
\
x00
\
x00
"
#
define
CBU8_IS_VALID_LEAD4_AND_T1
(
lead
t1
)
(
CBU8_LEAD4_T1_BITS
[
(
uint8_t
)
(
t1
)
>
>
4
]
&
(
1
<
<
(
(
lead
)
&
7
)
)
)
#
define
CBU8_IS_SINGLE
(
c
)
(
(
(
c
)
&
0x80
)
=
=
0
)
#
define
CBU8_IS_LEAD
(
c
)
(
(
uint8_t
)
(
(
c
)
-
0xc2
)
<
=
0x32
)
#
define
CBU8_IS_TRAIL
(
c
)
(
(
int8_t
)
(
c
)
<
-
0x40
)
#
define
CBU8_LENGTH
(
c
)
\
(
(
uint32_t
)
(
c
)
<
=
0x7f
?
1
:
\
(
(
uint32_t
)
(
c
)
<
=
0x7ff
?
2
:
\
(
(
uint32_t
)
(
c
)
<
=
0xd7ff
?
3
:
\
(
(
uint32_t
)
(
c
)
<
=
0xdfff
|
|
(
uint32_t
)
(
c
)
>
0x10ffff
?
0
:
\
(
(
uint32_t
)
(
c
)
<
=
0xffff
?
3
:
4
)
\
)
\
)
\
)
\
)
#
define
CBU8_MAX_LENGTH
4
#
define
CBU8_NEXT
(
s
i
length
c
)
CBU8_INTERNAL_NEXT_OR_SUB
(
s
i
length
c
CBU_SENTINEL
)
#
define
CBU8_INTERNAL_NEXT_OR_SUB
(
s
i
length
c
sub
)
CBUPRV_BLOCK_MACRO_BEGIN
{
\
(
c
)
=
(
uint8_t
)
(
s
)
[
(
i
)
+
+
]
;
\
if
(
!
CBU8_IS_SINGLE
(
c
)
)
{
\
uint8_t
__t
=
0
;
\
if
(
(
i
)
!
=
(
length
)
&
&
\
/
*
fetch
/
validate
/
assemble
all
but
last
trail
byte
*
/
\
(
(
c
)
>
=
0xe0
?
\
(
(
c
)
<
0xf0
?
/
*
U
+
0800
.
.
U
+
FFFF
except
surrogates
*
/
\
CBU8_LEAD3_T1_BITS
[
(
c
)
&
=
0xf
]
&
(
1
<
<
(
(
__t
=
(
s
)
[
i
]
)
>
>
5
)
)
&
&
\
(
__t
&
=
0x3f
1
)
\
:
/
*
U
+
10000
.
.
U
+
10FFFF
*
/
\
(
(
c
)
-
=
0xf0
)
<
=
4
&
&
\
CBU8_LEAD4_T1_BITS
[
(
__t
=
(
s
)
[
i
]
)
>
>
4
]
&
(
1
<
<
(
c
)
)
&
&
\
(
(
c
)
=
(
(
c
)
<
<
6
)
|
(
__t
&
0x3f
)
+
+
(
i
)
!
=
(
length
)
)
&
&
\
(
__t
=
(
s
)
[
i
]
-
0x80
)
<
=
0x3f
)
&
&
\
/
*
valid
second
-
to
-
last
trail
byte
*
/
\
(
(
c
)
=
(
(
c
)
<
<
6
)
|
__t
+
+
(
i
)
!
=
(
length
)
)
\
:
/
*
U
+
0080
.
.
U
+
07FF
*
/
\
(
c
)
>
=
0xc2
&
&
(
(
c
)
&
=
0x1f
1
)
)
&
&
\
/
*
last
trail
byte
*
/
\
(
__t
=
(
s
)
[
i
]
-
0x80
)
<
=
0x3f
&
&
\
(
(
c
)
=
(
(
c
)
<
<
6
)
|
__t
+
+
(
i
)
1
)
)
{
\
}
else
{
\
(
c
)
=
(
sub
)
;
/
*
ill
-
formed
*
/
\
}
\
}
\
}
CBUPRV_BLOCK_MACRO_END
#
define
CBU8_APPEND_UNSAFE
(
s
i
c
)
\
CBUPRV_BLOCK_MACRO_BEGIN
{
\
uint32_t
__uc
=
(
uint32_t
)
(
c
)
;
\
if
(
__uc
<
=
0x7f
)
{
\
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
__uc
;
\
}
else
{
\
if
(
__uc
<
=
0x7ff
)
{
\
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
__uc
>
>
6
)
|
0xc0
)
;
\
}
else
{
\
if
(
__uc
<
=
0xffff
)
{
\
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
__uc
>
>
12
)
|
0xe0
)
;
\
}
else
{
\
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
__uc
>
>
18
)
|
0xf0
)
;
\
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
__uc
>
>
12
)
&
0x3f
)
|
0x80
)
;
\
}
\
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
(
__uc
>
>
6
)
&
0x3f
)
|
0x80
)
;
\
}
\
(
s
)
[
(
i
)
+
+
]
=
(
uint8_t
)
(
(
__uc
&
0x3f
)
|
0x80
)
;
\
}
\
}
\
CBUPRV_BLOCK_MACRO_END
#
define
CBU16_IS_SINGLE
(
c
)
!
CBU_IS_SURROGATE
(
c
)
#
define
CBU16_IS_LEAD
(
c
)
(
(
(
uint32_t
)
(
c
)
&
0xfffffc00
)
=
=
0xd800
)
#
define
CBU16_IS_TRAIL
(
c
)
(
(
(
uint32_t
)
(
c
)
&
0xfffffc00
)
=
=
0xdc00
)
#
define
CBU16_IS_SURROGATE
(
c
)
CBU_IS_SURROGATE
(
c
)
#
define
CBU16_IS_SURROGATE_LEAD
(
c
)
(
(
(
c
)
&
0x400
)
=
=
0
)
#
define
CBU16_SURROGATE_OFFSET
(
(
0xd800
<
<
10UL
)
+
0xdc00
-
0x10000
)
#
define
CBU16_GET_SUPPLEMENTARY
(
lead
trail
)
\
(
(
(
:
:
base_icu
:
:
UChar32
)
(
lead
)
<
<
10UL
)
+
(
:
:
base_icu
:
:
UChar32
)
(
trail
)
-
CBU16_SURROGATE_OFFSET
)
#
define
CBU16_LEAD
(
supplementary
)
(
:
:
base_icu
:
:
UChar
)
(
(
(
supplementary
)
>
>
10
)
+
0xd7c0
)
#
define
CBU16_TRAIL
(
supplementary
)
(
:
:
base_icu
:
:
UChar
)
(
(
(
supplementary
)
&
0x3ff
)
|
0xdc00
)
#
define
CBU16_LENGTH
(
c
)
(
(
uint32_t
)
(
c
)
<
=
0xffff
?
1
:
2
)
#
define
CBU16_MAX_LENGTH
2
#
define
CBU16_GET
(
s
start
i
length
c
)
CBUPRV_BLOCK_MACRO_BEGIN
{
\
(
c
)
=
(
s
)
[
i
]
;
\
if
(
CBU16_IS_SURROGATE
(
c
)
)
{
\
uint16_t
__c2
;
\
if
(
CBU16_IS_SURROGATE_LEAD
(
c
)
)
{
\
if
(
(
i
)
+
1
!
=
(
length
)
&
&
CBU16_IS_TRAIL
(
__c2
=
(
s
)
[
(
i
)
+
1
]
)
)
{
\
(
c
)
=
CBU16_GET_SUPPLEMENTARY
(
(
c
)
__c2
)
;
\
}
\
}
else
{
\
if
(
(
i
)
>
(
start
)
&
&
CBU16_IS_LEAD
(
__c2
=
(
s
)
[
(
i
)
-
1
]
)
)
{
\
(
c
)
=
CBU16_GET_SUPPLEMENTARY
(
__c2
(
c
)
)
;
\
}
\
}
\
}
\
}
CBUPRV_BLOCK_MACRO_END
#
define
CBU16_NEXT
(
s
i
length
c
)
CBUPRV_BLOCK_MACRO_BEGIN
{
\
(
c
)
=
(
s
)
[
(
i
)
+
+
]
;
\
if
(
CBU16_IS_LEAD
(
c
)
)
{
\
uint16_t
__c2
;
\
if
(
(
i
)
!
=
(
length
)
&
&
CBU16_IS_TRAIL
(
__c2
=
(
s
)
[
(
i
)
]
)
)
{
\
+
+
(
i
)
;
\
(
c
)
=
CBU16_GET_SUPPLEMENTARY
(
(
c
)
__c2
)
;
\
}
\
}
\
}
CBUPRV_BLOCK_MACRO_END
#
define
CBU16_APPEND_UNSAFE
(
s
i
c
)
CBUPRV_BLOCK_MACRO_BEGIN
{
\
if
(
(
uint32_t
)
(
c
)
<
=
0xffff
)
{
\
(
s
)
[
(
i
)
+
+
]
=
(
uint16_t
)
(
c
)
;
\
}
else
{
\
(
s
)
[
(
i
)
+
+
]
=
(
uint16_t
)
(
(
(
c
)
>
>
10
)
+
0xd7c0
)
;
\
(
s
)
[
(
i
)
+
+
]
=
(
uint16_t
)
(
(
(
c
)
&
0x3ff
)
|
0xdc00
)
;
\
}
\
}
CBUPRV_BLOCK_MACRO_END
#
define
CBU16_SET_CP_START
(
s
start
i
)
CBUPRV_BLOCK_MACRO_BEGIN
{
\
if
(
CBU16_IS_TRAIL
(
(
s
)
[
i
]
)
&
&
(
i
)
>
(
start
)
&
&
CBU16_IS_LEAD
(
(
s
)
[
(
i
)
-
1
]
)
)
{
\
-
-
(
i
)
;
\
}
\
}
CBUPRV_BLOCK_MACRO_END
#
define
CBU16_PREV
(
s
start
i
c
)
CBUPRV_BLOCK_MACRO_BEGIN
{
\
(
c
)
=
(
s
)
[
-
-
(
i
)
]
;
\
if
(
CBU16_IS_TRAIL
(
c
)
)
{
\
uint16_t
__c2
;
\
if
(
(
i
)
>
(
start
)
&
&
CBU16_IS_LEAD
(
__c2
=
(
s
)
[
(
i
)
-
1
]
)
)
{
\
-
-
(
i
)
;
\
(
c
)
=
CBU16_GET_SUPPLEMENTARY
(
__c2
(
c
)
)
;
\
}
\
}
\
}
CBUPRV_BLOCK_MACRO_END
#
define
CBU16_SET_CP_LIMIT
(
s
start
i
length
)
CBUPRV_BLOCK_MACRO_BEGIN
{
\
if
(
(
start
)
<
(
i
)
&
&
(
(
i
)
<
(
length
)
|
|
(
length
)
<
0
)
&
&
CBU16_IS_LEAD
(
(
s
)
[
(
i
)
-
1
]
)
&
&
CBU16_IS_TRAIL
(
(
s
)
[
i
]
)
)
{
\
+
+
(
i
)
;
\
}
\
}
CBUPRV_BLOCK_MACRO_END
}
#
endif
