#
ifndef
BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_COMPONENT_EXPORT_H_
#
define
BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_COMPONENT_EXPORT_H_
#
define
PA_COMPONENT_EXPORT
(
component
)
\
PA_COMPONENT_MACRO_CONDITIONAL_
(
IS_
#
#
component
#
#
_IMPL
\
PA_COMPONENT_EXPORT_ANNOTATION
\
PA_COMPONENT_IMPORT_ANNOTATION
)
#
define
PA_INSIDE_COMPONENT_IMPL
(
component
)
\
PA_COMPONENT_MACRO_CONDITIONAL_
(
IS_
#
#
component
#
#
_IMPL
1
0
)
#
if
defined
(
COMPONENT_BUILD
)
#
if
defined
(
WIN32
)
#
define
PA_COMPONENT_EXPORT_ANNOTATION
__declspec
(
dllexport
)
#
define
PA_COMPONENT_IMPORT_ANNOTATION
__declspec
(
dllimport
)
#
else
#
define
PA_COMPONENT_EXPORT_ANNOTATION
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
define
PA_COMPONENT_IMPORT_ANNOTATION
#
endif
#
else
#
define
PA_COMPONENT_EXPORT_ANNOTATION
#
define
PA_COMPONENT_IMPORT_ANNOTATION
#
endif
#
define
PA_COMPONENT_MACRO_CONDITIONAL_
(
condition
consequent
alternate
)
\
PA_COMPONENT_MACRO_SELECT_THIRD_ARGUMENT_
(
\
PA_COMPONENT_MACRO_CONDITIONAL_COMMA_
(
condition
)
consequent
alternate
)
#
define
PA_MSVC_EXPAND_ARG
(
arg
)
arg
#
define
PA_COMPONENT_MACRO_CONDITIONAL_COMMA_
(
.
.
.
)
\
PA_COMPONENT_MACRO_CONDITIONAL_COMMA_IMPL_
(
__VA_ARGS__
)
#
define
PA_COMPONENT_MACRO_CONDITIONAL_COMMA_IMPL_
(
x
.
.
.
)
\
PA_COMPONENT_MACRO_CONDITIONAL_COMMA_
#
#
x
#
#
_
#
define
PA_COMPONENT_MACRO_CONDITIONAL_COMMA_1_
#
define
PA_COMPONENT_MACRO_SELECT_THIRD_ARGUMENT_
(
.
.
.
)
\
PA_MSVC_EXPAND_ARG
(
\
PA_COMPONENT_MACRO_SELECT_THIRD_ARGUMENT_IMPL_
(
__VA_ARGS__
)
)
#
define
PA_COMPONENT_MACRO_SELECT_THIRD_ARGUMENT_IMPL_
(
a
b
c
.
.
.
)
c
#
endif
