#
ifndef
BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_COMPILER_SPECIFIC_H_
#
define
BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_COMPILER_SPECIFIC_H_
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
__has_attribute
)
#
define
PA_HAS_ATTRIBUTE
(
x
)
__has_attribute
(
x
)
#
else
#
define
PA_HAS_ATTRIBUTE
(
x
)
0
#
endif
#
if
defined
(
__has_builtin
)
#
define
PA_HAS_BUILTIN
(
x
)
__has_builtin
(
x
)
#
else
#
define
PA_HAS_BUILTIN
(
x
)
0
#
endif
#
if
defined
(
__clang__
)
&
&
PA_HAS_ATTRIBUTE
(
noinline
)
#
define
PA_NOINLINE
[
[
clang
:
:
noinline
]
]
#
elif
defined
(
COMPILER_GCC
)
&
&
PA_HAS_ATTRIBUTE
(
noinline
)
#
define
PA_NOINLINE
__attribute__
(
(
noinline
)
)
#
elif
defined
(
COMPILER_MSVC
)
#
define
PA_NOINLINE
__declspec
(
noinline
)
#
else
#
define
PA_NOINLINE
#
endif
#
if
defined
(
__clang__
)
&
&
defined
(
NDEBUG
)
&
&
PA_HAS_ATTRIBUTE
(
always_inline
)
#
define
PA_ALWAYS_INLINE
[
[
clang
:
:
always_inline
]
]
inline
#
elif
defined
(
COMPILER_GCC
)
&
&
defined
(
NDEBUG
)
&
&
\
PA_HAS_ATTRIBUTE
(
always_inline
)
#
define
PA_ALWAYS_INLINE
inline
__attribute__
(
(
__always_inline__
)
)
#
elif
defined
(
COMPILER_MSVC
)
&
&
defined
(
NDEBUG
)
#
define
PA_ALWAYS_INLINE
__forceinline
#
else
#
define
PA_ALWAYS_INLINE
inline
#
endif
#
if
defined
(
__clang__
)
&
&
PA_HAS_ATTRIBUTE
(
not_tail_called
)
#
define
PA_NOT_TAIL_CALLED
[
[
clang
:
:
not_tail_called
]
]
#
else
#
define
PA_NOT_TAIL_CALLED
#
endif
#
if
defined
(
__clang__
)
#
define
PA_ALIGNAS
(
byte_alignment
)
alignas
(
byte_alignment
)
#
elif
defined
(
COMPILER_MSVC
)
#
define
PA_ALIGNAS
(
byte_alignment
)
__declspec
(
align
(
byte_alignment
)
)
#
elif
defined
(
COMPILER_GCC
)
&
&
PA_HAS_ATTRIBUTE
(
aligned
)
#
define
PA_ALIGNAS
(
byte_alignment
)
__attribute__
(
(
aligned
(
byte_alignment
)
)
)
#
endif
#
if
(
defined
(
COMPILER_GCC
)
|
|
defined
(
__clang__
)
)
&
&
PA_HAS_ATTRIBUTE
(
format
)
#
define
PA_PRINTF_FORMAT
(
format_param
dots_param
)
\
__attribute__
(
(
format
(
printf
format_param
dots_param
)
)
)
#
else
#
define
PA_PRINTF_FORMAT
(
format_param
dots_param
)
#
endif
#
if
PA_HAS_ATTRIBUTE
(
no_sanitize
)
#
define
PA_NO_SANITIZE
(
what
)
__attribute__
(
(
no_sanitize
(
what
)
)
)
#
endif
#
if
!
defined
(
PA_NO_SANITIZE
)
#
define
PA_NO_SANITIZE
(
what
)
#
endif
#
if
defined
(
MEMORY_SANITIZER
)
#
include
<
sanitizer
/
msan_interface
.
h
>
#
define
PA_MSAN_UNPOISON
(
p
size
)
__msan_unpoison
(
p
size
)
#
else
#
define
PA_MSAN_UNPOISON
(
p
size
)
#
endif
#
if
!
defined
(
PA_UNLIKELY
)
#
if
defined
(
COMPILER_GCC
)
|
|
defined
(
__clang__
)
#
define
PA_UNLIKELY
(
x
)
__builtin_expect
(
!
!
(
x
)
0
)
#
else
#
define
PA_UNLIKELY
(
x
)
(
x
)
#
endif
#
endif
#
if
!
defined
(
PA_LIKELY
)
#
if
defined
(
COMPILER_GCC
)
|
|
defined
(
__clang__
)
#
define
PA_LIKELY
(
x
)
__builtin_expect
(
!
!
(
x
)
1
)
#
else
#
define
PA_LIKELY
(
x
)
(
x
)
#
endif
#
endif
#
if
!
defined
(
PA_CPU_ARM_NEON
)
#
if
defined
(
__arm__
)
#
if
!
defined
(
__ARMEB__
)
&
&
!
defined
(
__ARM_EABI__
)
&
&
!
defined
(
__EABI__
)
&
&
\
!
defined
(
__VFP_FP__
)
&
&
!
defined
(
_WIN32_WCE
)
&
&
!
defined
(
ANDROID
)
#
error
Chromium
does
not
support
middle
endian
architecture
#
endif
#
if
defined
(
__ARM_NEON__
)
#
define
PA_CPU_ARM_NEON
1
#
endif
#
endif
#
endif
#
if
!
defined
(
PA_HAVE_MIPS_MSA_INTRINSICS
)
#
if
defined
(
__mips_msa
)
&
&
defined
(
__mips_isa_rev
)
&
&
(
__mips_isa_rev
>
=
5
)
#
define
PA_HAVE_MIPS_MSA_INTRINSICS
1
#
endif
#
endif
#
if
defined
(
__clang_analyzer__
)
namespace
partition_alloc
:
:
internal
{
inline
constexpr
bool
AnalyzerNoReturn
(
)
__attribute__
(
(
analyzer_noreturn
)
)
{
return
false
;
}
inline
constexpr
bool
AnalyzerAssumeTrue
(
bool
arg
)
{
return
arg
|
|
AnalyzerNoReturn
(
)
;
}
}
#
define
PA_ANALYZER_ASSUME_TRUE
(
arg
)
\
:
:
partition_alloc
:
:
internal
:
:
AnalyzerAssumeTrue
(
!
!
(
arg
)
)
#
define
PA_ANALYZER_SKIP_THIS_PATH
(
)
\
static_cast
<
void
>
(
:
:
partition_alloc
:
:
internal
:
:
AnalyzerNoReturn
(
)
)
#
else
#
define
PA_ANALYZER_ASSUME_TRUE
(
arg
)
(
arg
)
#
define
PA_ANALYZER_SKIP_THIS_PATH
(
)
#
endif
#
if
defined
(
__clang__
)
&
&
PA_HAS_ATTRIBUTE
(
nomerge
)
#
define
PA_NOMERGE
[
[
clang
:
:
nomerge
]
]
#
else
#
define
PA_NOMERGE
#
endif
#
if
defined
(
__clang__
)
&
&
PA_HAS_ATTRIBUTE
(
trivial_abi
)
#
define
PA_TRIVIAL_ABI
[
[
clang
:
:
trivial_abi
]
]
#
else
#
define
PA_TRIVIAL_ABI
#
endif
#
if
PA_HAS_ATTRIBUTE
(
require_constant_initialization
)
#
define
PA_CONSTINIT
__attribute__
(
(
require_constant_initialization
)
)
#
endif
#
if
!
defined
(
PA_CONSTINIT
)
#
define
PA_CONSTINIT
#
endif
#
if
defined
(
__clang__
)
#
define
PA_GSL_POINTER
[
[
gsl
:
:
Pointer
]
]
#
else
#
define
PA_GSL_POINTER
#
endif
#
endif
