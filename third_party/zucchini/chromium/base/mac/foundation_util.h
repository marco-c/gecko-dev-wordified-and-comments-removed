#
ifndef
BASE_MAC_FOUNDATION_UTIL_H_
#
define
BASE_MAC_FOUNDATION_UTIL_H_
#
include
<
AvailabilityMacros
.
h
>
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
include
<
CoreText
/
CoreText
.
h
>
#
include
<
Security
/
Security
.
h
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
mac
/
scoped_cftyperef
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
defined
(
__OBJC__
)
#
import
<
Foundation
/
Foundation
.
h
>
class
NSFont
;
class
UIFont
;
#
endif
namespace
base
{
class
FilePath
;
}
namespace
base
:
:
mac
{
BASE_EXPORT
bool
AmIBundled
(
)
;
BASE_EXPORT
void
SetOverrideAmIBundled
(
bool
value
)
;
#
if
defined
(
UNIT_TEST
)
BASE_EXPORT
void
ClearAmIBundledCache
(
)
;
#
endif
BASE_EXPORT
bool
IsBackgroundOnlyProcess
(
)
;
BASE_EXPORT
FilePath
PathForFrameworkBundleResource
(
const
char
*
resource_name
)
;
OSType
CreatorCodeForCFBundleRef
(
CFBundleRef
bundle
)
;
BASE_EXPORT
OSType
CreatorCodeForApplication
(
)
;
#
if
defined
(
__OBJC__
)
BASE_EXPORT
bool
GetSearchPathDirectory
(
NSSearchPathDirectory
directory
NSSearchPathDomainMask
domain_mask
FilePath
*
result
)
;
BASE_EXPORT
bool
GetLocalDirectory
(
NSSearchPathDirectory
directory
FilePath
*
result
)
;
BASE_EXPORT
bool
GetUserDirectory
(
NSSearchPathDirectory
directory
FilePath
*
result
)
;
#
endif
BASE_EXPORT
FilePath
GetUserLibraryPath
(
)
;
BASE_EXPORT
FilePath
GetUserDocumentPath
(
)
;
BASE_EXPORT
FilePath
GetAppBundlePath
(
const
FilePath
&
exec_name
)
;
BASE_EXPORT
FilePath
GetInnermostAppBundlePath
(
const
FilePath
&
exec_name
)
;
#
define
TYPE_NAME_FOR_CF_TYPE_DECL
(
TypeCF
)
\
BASE_EXPORT
std
:
:
string
TypeNameForCFType
(
TypeCF
#
#
Ref
)
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFArray
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFBag
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFBoolean
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFData
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFDate
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFDictionary
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFNull
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFNumber
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFSet
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFString
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFURL
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CFUUID
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CGColor
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CTFont
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
CTRun
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
SecAccessControl
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
SecCertificate
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
SecKey
)
;
TYPE_NAME_FOR_CF_TYPE_DECL
(
SecPolicy
)
;
#
undef
TYPE_NAME_FOR_CF_TYPE_DECL
BASE_EXPORT
const
char
*
BaseBundleID
(
)
;
BASE_EXPORT
void
SetBaseBundleID
(
const
char
*
new_base_bundle_id
)
;
template
<
typename
T
>
T
CFCast
(
const
CFTypeRef
&
cf_val
)
;
template
<
typename
T
>
T
CFCastStrict
(
const
CFTypeRef
&
cf_val
)
;
#
define
CF_CAST_DECL
(
TypeCF
)
\
template
<
>
\
BASE_EXPORT
TypeCF
#
#
Ref
CFCast
<
TypeCF
#
#
Ref
>
(
const
CFTypeRef
&
cf_val
)
;
\
\
template
<
>
\
BASE_EXPORT
TypeCF
#
#
Ref
CFCastStrict
<
TypeCF
#
#
Ref
>
(
const
CFTypeRef
&
cf_val
)
CF_CAST_DECL
(
CFArray
)
;
CF_CAST_DECL
(
CFBag
)
;
CF_CAST_DECL
(
CFBoolean
)
;
CF_CAST_DECL
(
CFData
)
;
CF_CAST_DECL
(
CFDate
)
;
CF_CAST_DECL
(
CFDictionary
)
;
CF_CAST_DECL
(
CFNull
)
;
CF_CAST_DECL
(
CFNumber
)
;
CF_CAST_DECL
(
CFSet
)
;
CF_CAST_DECL
(
CFString
)
;
CF_CAST_DECL
(
CFURL
)
;
CF_CAST_DECL
(
CFUUID
)
;
CF_CAST_DECL
(
CGColor
)
;
CF_CAST_DECL
(
CTFont
)
;
CF_CAST_DECL
(
CTFontDescriptor
)
;
CF_CAST_DECL
(
CTRun
)
;
CF_CAST_DECL
(
SecAccessControl
)
;
CF_CAST_DECL
(
SecCertificate
)
;
CF_CAST_DECL
(
SecKey
)
;
CF_CAST_DECL
(
SecPolicy
)
;
#
undef
CF_CAST_DECL
#
if
defined
(
__OBJC__
)
template
<
typename
T
>
T
*
ObjCCast
(
id
objc_val
)
{
if
(
[
objc_val
isKindOfClass
:
[
T
class
]
]
)
{
return
reinterpret_cast
<
T
*
>
(
objc_val
)
;
}
return
nil
;
}
template
<
typename
T
>
T
*
ObjCCastStrict
(
id
objc_val
)
{
T
*
rv
=
ObjCCast
<
T
>
(
objc_val
)
;
DCHECK
(
objc_val
=
=
nil
|
|
rv
)
;
return
rv
;
}
#
endif
BASE_EXPORT
std
:
:
string
GetValueFromDictionaryErrorMessage
(
CFStringRef
key
const
std
:
:
string
&
expected_type
CFTypeRef
value
)
;
template
<
typename
T
>
T
GetValueFromDictionary
(
CFDictionaryRef
dict
CFStringRef
key
)
{
CFTypeRef
value
=
CFDictionaryGetValue
(
dict
key
)
;
T
value_specific
=
CFCast
<
T
>
(
value
)
;
if
(
value
&
&
!
value_specific
)
{
std
:
:
string
expected_type
=
TypeNameForCFType
(
value_specific
)
;
DLOG
(
WARNING
)
<
<
GetValueFromDictionaryErrorMessage
(
key
expected_type
value
)
;
}
return
value_specific
;
}
#
if
defined
(
__OBJC__
)
BASE_EXPORT
NSURL
*
FilePathToNSURL
(
const
FilePath
&
path
)
;
BASE_EXPORT
NSString
*
FilePathToNSString
(
const
FilePath
&
path
)
;
BASE_EXPORT
FilePath
NSStringToFilePath
(
NSString
*
str
)
;
BASE_EXPORT
FilePath
NSURLToFilePath
(
NSURL
*
url
)
;
#
endif
BASE_EXPORT
ScopedCFTypeRef
<
CFURLRef
>
FilePathToCFURL
(
const
FilePath
&
path
)
;
#
if
defined
(
__OBJC__
)
[
[
nodiscard
]
]
BASE_EXPORT
bool
CFRangeToNSRange
(
CFRange
range
NSRange
*
range_out
)
;
#
endif
}
BASE_EXPORT
extern
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
const
CFErrorRef
err
)
;
BASE_EXPORT
extern
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
const
CFStringRef
str
)
;
BASE_EXPORT
extern
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
CFRange
)
;
#
if
defined
(
__OBJC__
)
BASE_EXPORT
extern
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
id
)
;
BASE_EXPORT
extern
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
NSRange
)
;
BASE_EXPORT
extern
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
SEL
)
;
#
if
BUILDFLAG
(
IS_MAC
)
BASE_EXPORT
extern
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
NSPoint
)
;
BASE_EXPORT
extern
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
NSRect
)
;
BASE_EXPORT
extern
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
o
NSSize
)
;
#
endif
#
endif
#
endif
