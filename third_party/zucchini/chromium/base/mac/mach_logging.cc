#
include
"
base
/
mac
/
mach_logging
.
h
"
#
include
<
iomanip
>
#
include
<
string
>
#
include
"
base
/
strings
/
stringprintf
.
h
"
#
include
"
build
/
build_config
.
h
"
#
if
BUILDFLAG
(
USE_BLINK
)
#
if
BUILDFLAG
(
IS_IOS
)
#
include
"
base
/
ios
/
sim_header_shims
.
h
"
#
else
#
include
<
servers
/
bootstrap
.
h
>
#
endif
#
endif
namespace
{
std
:
:
string
FormatMachErrorNumber
(
mach_error_t
mach_err
)
{
if
(
mach_err
>
=
0
&
&
mach_err
<
KERN_RETURN_MAX
)
{
return
base
:
:
StringPrintf
(
"
(
%
d
)
"
mach_err
)
;
}
return
base
:
:
StringPrintf
(
"
(
0x
%
08x
)
"
mach_err
)
;
}
}
namespace
logging
{
MachLogMessage
:
:
MachLogMessage
(
const
char
*
file_path
int
line
LogSeverity
severity
mach_error_t
mach_err
)
:
LogMessage
(
file_path
line
severity
)
mach_err_
(
mach_err
)
{
}
MachLogMessage
:
:
~
MachLogMessage
(
)
{
stream
(
)
<
<
"
:
"
<
<
mach_error_string
(
mach_err_
)
<
<
FormatMachErrorNumber
(
mach_err_
)
;
}
#
if
BUILDFLAG
(
USE_BLINK
)
BootstrapLogMessage
:
:
BootstrapLogMessage
(
const
char
*
file_path
int
line
LogSeverity
severity
kern_return_t
bootstrap_err
)
:
LogMessage
(
file_path
line
severity
)
bootstrap_err_
(
bootstrap_err
)
{
}
BootstrapLogMessage
:
:
~
BootstrapLogMessage
(
)
{
stream
(
)
<
<
"
:
"
<
<
bootstrap_strerror
(
bootstrap_err_
)
;
switch
(
bootstrap_err_
)
{
case
BOOTSTRAP_SUCCESS
:
case
BOOTSTRAP_NOT_PRIVILEGED
:
case
BOOTSTRAP_NAME_IN_USE
:
case
BOOTSTRAP_UNKNOWN_SERVICE
:
case
BOOTSTRAP_SERVICE_ACTIVE
:
case
BOOTSTRAP_BAD_COUNT
:
case
BOOTSTRAP_NO_MEMORY
:
case
BOOTSTRAP_NO_CHILDREN
:
{
stream
(
)
<
<
"
(
"
<
<
bootstrap_err_
<
<
"
)
"
;
break
;
}
default
:
{
stream
(
)
<
<
FormatMachErrorNumber
(
bootstrap_err_
)
;
break
;
}
}
}
#
endif
}
