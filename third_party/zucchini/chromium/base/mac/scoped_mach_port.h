#
ifndef
BASE_MAC_SCOPED_MACH_PORT_H_
#
define
BASE_MAC_SCOPED_MACH_PORT_H_
#
include
<
mach
/
mach
.
h
>
#
include
"
base
/
base_export
.
h
"
#
include
"
base
/
scoped_generic
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
base
:
:
mac
{
namespace
internal
{
struct
BASE_EXPORT
SendRightTraits
{
static
mach_port_t
InvalidValue
(
)
{
return
MACH_PORT_NULL
;
}
BASE_EXPORT
static
void
Free
(
mach_port_t
port
)
;
}
;
struct
BASE_EXPORT
ReceiveRightTraits
{
static
mach_port_t
InvalidValue
(
)
{
return
MACH_PORT_NULL
;
}
BASE_EXPORT
static
void
Free
(
mach_port_t
port
)
;
}
;
struct
PortSetTraits
{
static
mach_port_t
InvalidValue
(
)
{
return
MACH_PORT_NULL
;
}
BASE_EXPORT
static
void
Free
(
mach_port_t
port
)
;
}
;
}
using
ScopedMachSendRight
=
ScopedGeneric
<
mach_port_t
internal
:
:
SendRightTraits
>
;
using
ScopedMachReceiveRight
=
ScopedGeneric
<
mach_port_t
internal
:
:
ReceiveRightTraits
>
;
using
ScopedMachPortSet
=
ScopedGeneric
<
mach_port_t
internal
:
:
PortSetTraits
>
;
BASE_EXPORT
bool
CreateMachPort
(
ScopedMachReceiveRight
*
receive
ScopedMachSendRight
*
send
absl
:
:
optional
<
mach_port_msgcount_t
>
queue_limit
=
absl
:
:
nullopt
)
;
BASE_EXPORT
ScopedMachSendRight
RetainMachSendRight
(
mach_port_t
port
)
;
}
#
endif
