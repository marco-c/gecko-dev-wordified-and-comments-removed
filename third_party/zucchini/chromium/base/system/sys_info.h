#
ifndef
BASE_SYSTEM_SYS_INFO_H_
#
define
BASE_SYSTEM_SYS_INFO_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
string
>
#
include
"
base
/
base_export
.
h
"
#
if
!
defined
(
MOZ_ZUCCHINI
)
#
include
"
base
/
functional
/
callback_forward
.
h
"
#
include
"
base
/
gtest_prod_util
.
h
"
#
include
"
base
/
metrics
/
field_trial_params
.
h
"
#
include
"
base
/
time
/
time
.
h
"
#
include
"
build
/
build_config
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
#
if
BUILDFLAG
(
IS_MAC
)
#
include
"
base
/
feature_list
.
h
"
#
endif
#
endif
namespace
base
{
#
if
!
defined
(
MOZ_ZUCCHINI
)
#
if
BUILDFLAG
(
IS_MAC
)
BASE_EXPORT
BASE_DECLARE_FEATURE
(
kNumberOfCoresWithCpuSecurityMitigation
)
;
#
endif
#
if
BUILDFLAG
(
IS_CHROMEOS_ASH
)
BASE_EXPORT
extern
const
char
kLsbReleaseKey
[
]
;
BASE_EXPORT
extern
const
char
kLsbReleaseTimeKey
[
]
;
#
endif
namespace
debug
{
FORWARD_DECLARE_TEST
(
SystemMetricsTest
ParseMeminfo
)
;
}
namespace
test
{
class
ScopedAmountOfPhysicalMemoryOverride
;
}
class
FilePath
;
struct
SystemMemoryInfoKB
;
#
endif
class
BASE_EXPORT
SysInfo
{
public
:
#
if
!
defined
(
MOZ_ZUCCHINI
)
static
int
NumberOfProcessors
(
)
;
static
int
NumberOfEfficientProcessors
(
)
;
static
uint64_t
AmountOfPhysicalMemory
(
)
;
static
uint64_t
AmountOfAvailablePhysicalMemory
(
)
;
static
uint64_t
AmountOfVirtualMemory
(
)
;
static
int
AmountOfPhysicalMemoryMB
(
)
{
return
static_cast
<
int
>
(
AmountOfPhysicalMemory
(
)
/
1024
/
1024
)
;
}
static
int
AmountOfVirtualMemoryMB
(
)
{
return
static_cast
<
int
>
(
AmountOfVirtualMemory
(
)
/
1024
/
1024
)
;
}
static
int64_t
AmountOfFreeDiskSpace
(
const
FilePath
&
path
)
;
static
int64_t
AmountOfTotalDiskSpace
(
const
FilePath
&
path
)
;
#
if
BUILDFLAG
(
IS_FUCHSIA
)
static
void
SetAmountOfTotalDiskSpace
(
const
FilePath
&
path
int64_t
bytes
)
;
#
endif
static
TimeDelta
Uptime
(
)
;
static
std
:
:
string
HardwareModelName
(
)
;
struct
HardwareInfo
{
std
:
:
string
manufacturer
;
std
:
:
string
model
;
}
;
static
void
GetHardwareInfo
(
base
:
:
OnceCallback
<
void
(
HardwareInfo
)
>
callback
)
;
static
std
:
:
string
OperatingSystemName
(
)
;
static
std
:
:
string
OperatingSystemVersion
(
)
;
static
void
OperatingSystemVersionNumbers
(
int32_t
*
major_version
int32_t
*
minor_version
int32_t
*
bugfix_version
)
;
static
std
:
:
string
OperatingSystemArchitecture
(
)
;
static
std
:
:
string
ProcessCPUArchitecture
(
)
;
static
std
:
:
string
CPUModelName
(
)
;
#
endif
static
size_t
VMAllocationGranularity
(
)
;
#
if
!
defined
(
MOZ_ZUCCHINI
)
#
if
BUILDFLAG
(
IS_CHROMEOS
)
static
bool
GetLsbReleaseValue
(
const
std
:
:
string
&
key
std
:
:
string
*
value
)
;
static
std
:
:
string
GetLsbReleaseBoard
(
)
;
static
Time
GetLsbReleaseTime
(
)
;
static
bool
IsRunningOnChromeOS
(
)
;
static
void
SetChromeOSVersionInfoForTest
(
const
std
:
:
string
&
lsb_release
const
Time
&
lsb_release_time
)
;
static
void
ResetChromeOSVersionInfoForTest
(
)
;
static
std
:
:
string
KernelVersion
(
)
;
static
void
CrashIfChromeOSNonTestImage
(
)
;
#
endif
#
if
BUILDFLAG
(
IS_ANDROID
)
static
std
:
:
string
GetAndroidBuildCodename
(
)
;
static
std
:
:
string
GetAndroidBuildID
(
)
;
static
std
:
:
string
GetAndroidHardwareEGL
(
)
;
static
int
DalvikHeapSizeMB
(
)
;
static
int
DalvikHeapGrowthLimitMB
(
)
;
#
endif
#
if
BUILDFLAG
(
IS_IOS
)
static
std
:
:
string
GetIOSBuildNumber
(
)
;
#
endif
static
bool
IsLowEndDevice
(
)
;
static
bool
IsLowEndDeviceOrPartialLowEndModeEnabled
(
)
;
static
bool
IsLowEndDeviceOrPartialLowEndModeEnabled
(
const
FeatureParam
<
bool
>
&
param_for_exclusion
)
;
#
if
BUILDFLAG
(
IS_MAC
)
static
void
SetCpuSecurityMitigationsEnabled
(
)
;
static
void
ResetCpuSecurityMitigationsEnabledForTesting
(
)
;
#
endif
private
:
friend
class
test
:
:
ScopedAmountOfPhysicalMemoryOverride
;
FRIEND_TEST_ALL_PREFIXES
(
SysInfoTest
AmountOfAvailablePhysicalMemory
)
;
FRIEND_TEST_ALL_PREFIXES
(
debug
:
:
SystemMetricsTest
ParseMeminfo
)
;
static
int
NumberOfEfficientProcessorsImpl
(
)
;
static
uint64_t
AmountOfPhysicalMemoryImpl
(
)
;
static
uint64_t
AmountOfAvailablePhysicalMemoryImpl
(
)
;
static
bool
IsLowEndDeviceImpl
(
)
;
static
HardwareInfo
GetHardwareInfoSync
(
)
;
#
if
BUILDFLAG
(
IS_LINUX
)
|
|
BUILDFLAG
(
IS_CHROMEOS
)
|
|
BUILDFLAG
(
IS_ANDROID
)
|
|
\
BUILDFLAG
(
IS_AIX
)
static
uint64_t
AmountOfAvailablePhysicalMemory
(
const
SystemMemoryInfoKB
&
meminfo
)
;
#
endif
static
absl
:
:
optional
<
uint64_t
>
SetAmountOfPhysicalMemoryMbForTesting
(
uint64_t
amount_of_memory_mb
)
;
static
void
ClearAmountOfPhysicalMemoryMbForTesting
(
)
;
#
endif
}
;
}
#
endif
