#
ifndef
COMPONENTS_ZUCCHINI_BUFFER_VIEW_H_
#
define
COMPONENTS_ZUCCHINI_BUFFER_VIEW_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
.
h
>
#
include
<
type_traits
>
#
include
"
base
/
check_op
.
h
"
#
include
"
base
/
ranges
/
algorithm
.
h
"
#
include
"
components
/
zucchini
/
algorithm
.
h
"
namespace
zucchini
{
struct
BufferRegion
{
size_t
lo
(
)
const
{
return
offset
;
}
size_t
hi
(
)
const
{
return
offset
+
size
;
}
bool
FitsIn
(
size_t
container_size
)
const
{
return
offset
<
=
container_size
&
&
container_size
-
offset
>
=
size
;
}
size_t
InclusiveClamp
(
size_t
v
)
const
{
return
zucchini
:
:
InclusiveClamp
(
v
lo
(
)
hi
(
)
)
;
}
size_t
offset
;
size_t
size
;
}
;
namespace
internal
{
template
<
class
T
>
class
BufferViewBase
{
public
:
using
value_type
=
T
;
using
reference
=
T
&
;
using
pointer
=
T
*
;
using
iterator
=
T
*
;
using
const_iterator
=
typename
std
:
:
add_const
<
T
>
:
:
type
*
;
using
size_type
=
std
:
:
size_t
;
using
difference_type
=
std
:
:
ptrdiff_t
;
static
BufferViewBase
FromRange
(
iterator
first
iterator
last
)
{
DCHECK_GE
(
last
first
)
;
BufferViewBase
ret
;
ret
.
first_
=
first
;
ret
.
last_
=
last
;
return
ret
;
}
BufferViewBase
(
)
=
default
;
BufferViewBase
(
iterator
first
size_type
size
)
:
first_
(
first
)
last_
(
first_
+
size
)
{
DCHECK_GE
(
last_
first_
)
;
}
template
<
class
U
>
BufferViewBase
(
const
BufferViewBase
<
U
>
&
that
)
:
first_
(
that
.
begin
(
)
)
last_
(
that
.
end
(
)
)
{
}
template
<
class
U
>
BufferViewBase
(
BufferViewBase
<
U
>
&
&
that
)
:
first_
(
that
.
begin
(
)
)
last_
(
that
.
end
(
)
)
{
}
BufferViewBase
(
const
BufferViewBase
&
)
=
default
;
BufferViewBase
&
operator
=
(
const
BufferViewBase
&
)
=
default
;
iterator
begin
(
)
const
{
return
first_
;
}
iterator
end
(
)
const
{
return
last_
;
}
const_iterator
cbegin
(
)
const
{
return
begin
(
)
;
}
const_iterator
cend
(
)
const
{
return
end
(
)
;
}
bool
empty
(
)
const
{
return
first_
=
=
last_
;
}
size_type
size
(
)
const
{
return
last_
-
first_
;
}
bool
covers
(
const
BufferRegion
&
region
)
const
{
return
region
.
FitsIn
(
size
(
)
)
;
}
bool
covers_array
(
size_t
offset
size_t
num
size_t
elt_size
)
{
DCHECK_GT
(
elt_size
0U
)
;
return
offset
<
=
size
(
)
&
&
(
size
(
)
-
offset
)
/
elt_size
>
=
num
;
}
reference
operator
[
]
(
size_type
pos
)
const
{
CHECK_LT
(
pos
size
(
)
)
;
return
first_
[
pos
]
;
}
BufferViewBase
operator
[
]
(
BufferRegion
region
)
const
{
DCHECK_LE
(
region
.
offset
size
(
)
)
;
DCHECK_LE
(
region
.
size
size
(
)
-
region
.
offset
)
;
return
{
begin
(
)
+
region
.
offset
region
.
size
}
;
}
template
<
class
U
>
U
read
(
size_type
pos
)
const
{
CHECK_LE
(
sizeof
(
U
)
size
(
)
)
;
CHECK_LE
(
pos
size
(
)
-
sizeof
(
U
)
)
;
U
ret
=
{
}
;
:
:
memcpy
(
&
ret
begin
(
)
+
pos
sizeof
(
U
)
)
;
return
ret
;
}
template
<
class
U
>
void
write
(
size_type
pos
const
U
&
value
)
{
CHECK_LE
(
sizeof
(
U
)
size
(
)
)
;
CHECK_LE
(
pos
size
(
)
-
sizeof
(
U
)
)
;
:
:
memcpy
(
begin
(
)
+
pos
&
value
sizeof
(
U
)
)
;
}
template
<
class
U
>
bool
can_access
(
size_type
pos
)
const
{
return
pos
<
size
(
)
&
&
size
(
)
-
pos
>
=
sizeof
(
U
)
;
}
BufferRegion
local_region
(
)
const
{
return
BufferRegion
{
0
size
(
)
}
;
}
bool
equals
(
BufferViewBase
other
)
const
{
return
base
:
:
ranges
:
:
equal
(
*
this
other
)
;
}
void
shrink
(
size_type
new_size
)
{
DCHECK_LE
(
first_
+
new_size
last_
)
;
last_
=
first_
+
new_size
;
}
void
remove_prefix
(
size_type
n
)
{
DCHECK_LE
(
n
size
(
)
)
;
first_
+
=
n
;
}
void
seek
(
iterator
it
)
{
DCHECK_GE
(
it
begin
(
)
)
;
DCHECK_LE
(
it
end
(
)
)
;
first_
=
it
;
}
bool
AlignOn
(
BufferViewBase
origin
size_type
alignment
)
{
DCHECK_GT
(
alignment
0U
)
;
DCHECK_LE
(
origin
.
first_
first_
)
;
DCHECK_GE
(
origin
.
last_
last_
)
;
size_type
aligned_size
=
AlignCeil
(
static_cast
<
size_type
>
(
first_
-
origin
.
first_
)
alignment
)
;
if
(
aligned_size
>
static_cast
<
size_type
>
(
last_
-
origin
.
first_
)
)
return
false
;
first_
=
origin
.
first_
+
aligned_size
;
return
true
;
}
private
:
iterator
first_
=
nullptr
;
iterator
last_
=
nullptr
;
}
;
}
using
ConstBufferView
=
internal
:
:
BufferViewBase
<
const
uint8_t
>
;
using
MutableBufferView
=
internal
:
:
BufferViewBase
<
uint8_t
>
;
}
#
endif
