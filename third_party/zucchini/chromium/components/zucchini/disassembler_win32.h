#
ifndef
COMPONENTS_ZUCCHINI_DISASSEMBLER_WIN32_H_
#
define
COMPONENTS_ZUCCHINI_DISASSEMBLER_WIN32_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
deque
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
base
/
memory
/
raw_ptr
.
h
"
#
include
"
components
/
zucchini
/
address_translator
.
h
"
#
include
"
components
/
zucchini
/
buffer_view
.
h
"
#
include
"
components
/
zucchini
/
disassembler
.
h
"
#
include
"
components
/
zucchini
/
image_utils
.
h
"
#
include
"
components
/
zucchini
/
type_win_pe
.
h
"
namespace
zucchini
{
class
Rel32FinderX86
;
class
Rel32FinderX64
;
struct
Win32X86Traits
{
static
constexpr
uint16_t
kVersion
=
1
;
static
constexpr
Bitness
kBitness
=
kBit32
;
static
constexpr
ExecutableType
kExeType
=
kExeTypeWin32X86
;
enum
:
uint16_t
{
kMagic
=
0x10B
}
;
enum
:
uint16_t
{
kRelocType
=
3
}
;
enum
:
uint32_t
{
kVAWidth
=
4
}
;
static
const
char
kExeTypeString
[
]
;
using
ImageOptionalHeader
=
pe
:
:
ImageOptionalHeader
;
using
RelFinder
=
Rel32FinderX86
;
using
Address
=
uint32_t
;
}
;
struct
Win32X64Traits
{
static
constexpr
uint16_t
kVersion
=
1
;
static
constexpr
Bitness
kBitness
=
kBit64
;
static
constexpr
ExecutableType
kExeType
=
kExeTypeWin32X64
;
enum
:
uint16_t
{
kMagic
=
0x20B
}
;
enum
:
uint16_t
{
kRelocType
=
10
}
;
enum
:
uint32_t
{
kVAWidth
=
8
}
;
static
const
char
kExeTypeString
[
]
;
using
ImageOptionalHeader
=
pe
:
:
ImageOptionalHeader64
;
using
RelFinder
=
Rel32FinderX64
;
using
Address
=
uint64_t
;
}
;
template
<
class
TRAITS
>
class
DisassemblerWin32
:
public
Disassembler
{
public
:
using
Traits
=
TRAITS
;
static
constexpr
uint16_t
kVersion
=
Traits
:
:
kVersion
;
enum
ReferenceType
:
uint8_t
{
kReloc
kAbs32
kRel32
kTypeCount
}
;
static
bool
QuickDetect
(
ConstBufferView
image
)
;
DisassemblerWin32
(
)
;
DisassemblerWin32
(
const
DisassemblerWin32
&
)
=
delete
;
const
DisassemblerWin32
&
operator
=
(
const
DisassemblerWin32
&
)
=
delete
;
~
DisassemblerWin32
(
)
override
;
ExecutableType
GetExeType
(
)
const
override
;
std
:
:
string
GetExeTypeString
(
)
const
override
;
std
:
:
vector
<
ReferenceGroup
>
MakeReferenceGroups
(
)
const
override
;
std
:
:
unique_ptr
<
ReferenceReader
>
MakeReadRelocs
(
offset_t
lo
offset_t
hi
)
;
std
:
:
unique_ptr
<
ReferenceReader
>
MakeReadAbs32
(
offset_t
lo
offset_t
hi
)
;
std
:
:
unique_ptr
<
ReferenceReader
>
MakeReadRel32
(
offset_t
lo
offset_t
hi
)
;
std
:
:
unique_ptr
<
ReferenceWriter
>
MakeWriteRelocs
(
MutableBufferView
image
)
;
std
:
:
unique_ptr
<
ReferenceWriter
>
MakeWriteAbs32
(
MutableBufferView
image
)
;
std
:
:
unique_ptr
<
ReferenceWriter
>
MakeWriteRel32
(
MutableBufferView
image
)
;
private
:
friend
Disassembler
;
bool
Parse
(
ConstBufferView
image
)
override
;
bool
ParseHeader
(
)
;
bool
ParseAndStoreRelocBlocks
(
)
;
bool
ParseAndStoreAbs32
(
)
;
bool
ParseAndStoreRel32
(
)
;
std
:
:
vector
<
pe
:
:
ImageSectionHeader
>
sections_
;
typename
Traits
:
:
Address
image_base_
=
0
;
raw_ptr
<
const
pe
:
:
ImageDataDirectory
>
base_relocation_table_
=
nullptr
;
AddressTranslator
translator_
;
BufferRegion
reloc_region_
=
{
kInvalidOffset
0U
}
;
std
:
:
vector
<
offset_t
>
reloc_block_offsets_
;
offset_t
reloc_end_
=
0
;
std
:
:
deque
<
offset_t
>
abs32_locations_
;
std
:
:
deque
<
offset_t
>
rel32_locations_
;
bool
has_parsed_relocs_
=
false
;
bool
has_parsed_abs32_
=
false
;
bool
has_parsed_rel32_
=
false
;
}
;
using
DisassemblerWin32X86
=
DisassemblerWin32
<
Win32X86Traits
>
;
using
DisassemblerWin32X64
=
DisassemblerWin32
<
Win32X64Traits
>
;
}
#
endif
