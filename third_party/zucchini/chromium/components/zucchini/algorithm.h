#
ifndef
COMPONENTS_ZUCCHINI_ALGORITHM_H_
#
define
COMPONENTS_ZUCCHINI_ALGORITHM_H_
#
include
<
stddef
.
h
>
#
include
<
algorithm
>
#
include
<
deque
>
#
include
<
type_traits
>
#
include
<
vector
>
#
include
"
base
/
check_op
.
h
"
namespace
zucchini
{
template
<
typename
T
>
bool
RangeIsBounded
(
T
begin
T
size
size_t
bound
)
{
static_assert
(
std
:
:
is_unsigned
<
T
>
:
:
value
"
Value
type
must
be
unsigned
.
"
)
;
return
begin
<
bound
&
&
size
<
=
bound
-
begin
;
}
template
<
typename
T
>
bool
RangeCovers
(
T
begin
T
size
T
value
)
{
static_assert
(
std
:
:
is_unsigned
<
T
>
:
:
value
"
Value
type
must
be
unsigned
.
"
)
;
return
begin
<
=
value
&
&
value
-
begin
<
size
;
}
template
<
class
T
>
T
InclusiveClamp
(
T
value
T
lo
T
hi
)
{
static_assert
(
std
:
:
is_unsigned
<
T
>
:
:
value
"
Value
type
must
be
unsigned
.
"
)
;
DCHECK_LE
(
lo
hi
)
;
return
value
<
=
lo
?
lo
:
(
value
>
=
hi
?
hi
:
value
)
;
}
template
<
class
T
>
constexpr
T
AlignCeil
(
T
x
T
m
)
{
static_assert
(
std
:
:
is_unsigned
<
T
>
:
:
value
"
Value
type
must
be
unsigned
.
"
)
;
return
T
(
(
x
+
m
-
1
)
/
m
)
*
m
;
}
template
<
class
T
>
inline
int
IncrementForAlignCeil2
(
T
pos
)
{
return
static_cast
<
int
>
(
pos
&
1
)
;
}
template
<
class
T
>
inline
int
IncrementForAlignCeil4
(
T
pos
)
{
return
static_cast
<
int
>
(
(
-
pos
)
&
3
)
;
}
template
<
class
T
>
void
SortAndUniquify
(
std
:
:
deque
<
T
>
*
container
)
{
std
:
:
sort
(
container
-
>
begin
(
)
container
-
>
end
(
)
)
;
container
-
>
erase
(
std
:
:
unique
(
container
-
>
begin
(
)
container
-
>
end
(
)
)
container
-
>
end
(
)
)
;
container
-
>
shrink_to_fit
(
)
;
}
template
<
int
pos
typename
T
>
constexpr
T
GetBit
(
T
v
)
{
return
(
v
>
>
pos
)
&
1
;
}
template
<
int
lo
int
hi
typename
T
>
constexpr
typename
std
:
:
make_signed
<
T
>
:
:
type
GetSignedBits
(
T
v
)
{
constexpr
int
kNumBits
=
sizeof
(
T
)
*
8
;
using
SignedType
=
typename
std
:
:
make_signed
<
T
>
:
:
type
;
return
static_cast
<
SignedType
>
(
v
<
<
(
kNumBits
-
1
-
hi
)
)
>
>
(
kNumBits
-
1
-
hi
+
lo
)
;
}
template
<
int
lo
int
hi
typename
T
>
constexpr
typename
std
:
:
make_unsigned
<
T
>
:
:
type
GetUnsignedBits
(
T
v
)
{
constexpr
int
kNumBits
=
sizeof
(
T
)
*
8
;
using
UnsignedType
=
typename
std
:
:
make_unsigned
<
T
>
:
:
type
;
return
static_cast
<
UnsignedType
>
(
v
<
<
(
kNumBits
-
1
-
hi
)
)
>
>
(
kNumBits
-
1
-
hi
+
lo
)
;
}
template
<
typename
T
>
constexpr
T
SignExtend
(
int
pos
T
v
)
{
int
kNumBits
=
sizeof
(
T
)
*
8
;
int
kShift
=
kNumBits
-
1
-
pos
;
return
static_cast
<
typename
std
:
:
make_signed
<
T
>
:
:
type
>
(
v
<
<
kShift
)
>
>
kShift
;
}
template
<
int
pos
typename
T
>
constexpr
T
SignExtend
(
T
v
)
{
constexpr
int
kNumBits
=
sizeof
(
T
)
*
8
;
constexpr
int
kShift
=
kNumBits
-
1
-
pos
;
return
static_cast
<
typename
std
:
:
make_signed
<
T
>
:
:
type
>
(
v
<
<
kShift
)
>
>
kShift
;
}
template
<
int
digs
typename
T
>
constexpr
bool
SignedFit
(
T
v
)
{
return
v
=
=
SignExtend
<
digs
-
1
T
>
(
v
)
;
}
}
#
endif
