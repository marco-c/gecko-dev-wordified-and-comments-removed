#
ifndef
COMPONENTS_ZUCCHINI_ARM_UTILS_H_
#
define
COMPONENTS_ZUCCHINI_ARM_UTILS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
base
/
check_op
.
h
"
#
include
"
components
/
zucchini
/
address_translator
.
h
"
#
include
"
components
/
zucchini
/
buffer_view
.
h
"
namespace
zucchini
{
using
arm_disp_t
=
int32_t
;
enum
ArmAlign
:
uint32_t
{
kArmAlignFail
=
0U
kArmAlign2
=
2U
kArmAlign4
=
4U
}
;
template
<
typename
ENUM_ADDR_TYPE
ENUM_ADDR_TYPE
ADDR_TYPE
typename
CODE_T
CODE_T
(
*
FETCH
)
(
ConstBufferView
offset_t
)
void
(
*
STORE
)
(
MutableBufferView
offset_t
CODE_T
)
ArmAlign
(
*
DECODE
)
(
CODE_T
arm_disp_t
*
)
bool
(
*
ENCODE
)
(
arm_disp_t
CODE_T
*
)
bool
(
*
READ
)
(
rva_t
CODE_T
rva_t
*
)
bool
(
*
WRITE
)
(
rva_t
rva_t
CODE_T
*
)
>
class
ArmAddrTraits
{
public
:
static
constexpr
ENUM_ADDR_TYPE
addr_type
=
ADDR_TYPE
;
using
code_t
=
CODE_T
;
static
constexpr
CODE_T
(
*
Fetch
)
(
ConstBufferView
offset_t
)
=
FETCH
;
static
constexpr
void
(
*
Store
)
(
MutableBufferView
offset_t
CODE_T
)
=
STORE
;
static
constexpr
ArmAlign
(
*
Decode
)
(
CODE_T
arm_disp_t
*
)
=
DECODE
;
static
constexpr
bool
(
*
Encode
)
(
arm_disp_t
CODE_T
*
)
=
ENCODE
;
static
constexpr
bool
(
*
Read
)
(
rva_t
CODE_T
rva_t
*
)
=
READ
;
static
constexpr
bool
(
*
Write
)
(
rva_t
rva_t
CODE_T
*
)
=
WRITE
;
}
;
inline
int
GetThumb2InstructionSize
(
uint16_t
code16
)
{
return
(
(
code16
&
0xF000
)
=
=
0xF000
|
|
(
code16
&
0xF800
)
=
=
0xE800
)
?
4
:
2
;
}
class
AArch32Rel32Translator
{
public
:
enum
AddrType
:
uint8_t
{
ADDR_NONE
=
0xFF
ADDR_A24
=
0
ADDR_T8
ADDR_T11
ADDR_T20
ADDR_T24
NUM_ADDR_TYPE
}
;
AArch32Rel32Translator
(
)
;
AArch32Rel32Translator
(
const
AArch32Rel32Translator
&
)
=
delete
;
const
AArch32Rel32Translator
&
operator
=
(
const
AArch32Rel32Translator
&
)
=
delete
;
static
inline
uint32_t
FetchArmCode32
(
ConstBufferView
view
offset_t
idx
)
{
return
view
.
read
<
uint32_t
>
(
idx
)
;
}
static
inline
uint16_t
FetchThumb2Code16
(
ConstBufferView
view
offset_t
idx
)
{
return
view
.
read
<
uint16_t
>
(
idx
)
;
}
static
inline
uint32_t
FetchThumb2Code32
(
ConstBufferView
view
offset_t
idx
)
{
return
(
static_cast
<
uint32_t
>
(
view
.
read
<
uint16_t
>
(
idx
)
)
<
<
16
)
|
view
.
read
<
uint16_t
>
(
idx
+
2
)
;
}
static
inline
void
StoreArmCode32
(
MutableBufferView
mutable_view
offset_t
idx
uint32_t
code
)
{
mutable_view
.
write
<
uint32_t
>
(
idx
code
)
;
}
static
inline
void
StoreThumb2Code16
(
MutableBufferView
mutable_view
offset_t
idx
uint16_t
code
)
{
mutable_view
.
write
<
uint16_t
>
(
idx
code
)
;
}
static
inline
void
StoreThumb2Code32
(
MutableBufferView
mutable_view
offset_t
idx
uint32_t
code
)
{
mutable_view
.
write
<
uint16_t
>
(
idx
static_cast
<
uint16_t
>
(
code
>
>
16
)
)
;
mutable_view
.
write
<
uint16_t
>
(
idx
+
2
static_cast
<
uint16_t
>
(
code
&
0xFFFF
)
)
;
}
static
ArmAlign
DecodeA24
(
uint32_t
code32
arm_disp_t
*
disp
)
;
static
bool
EncodeA24
(
arm_disp_t
disp
uint32_t
*
code32
)
;
static
bool
ReadA24
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
;
static
bool
WriteA24
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
;
static
ArmAlign
DecodeT8
(
uint16_t
code16
arm_disp_t
*
disp
)
;
static
bool
EncodeT8
(
arm_disp_t
disp
uint16_t
*
code16
)
;
static
bool
ReadT8
(
rva_t
instr_rva
uint16_t
code16
rva_t
*
target_rva
)
;
static
bool
WriteT8
(
rva_t
instr_rva
rva_t
target_rva
uint16_t
*
code16
)
;
static
ArmAlign
DecodeT11
(
uint16_t
code16
arm_disp_t
*
disp
)
;
static
bool
EncodeT11
(
arm_disp_t
disp
uint16_t
*
code16
)
;
static
bool
ReadT11
(
rva_t
instr_rva
uint16_t
code16
rva_t
*
target_rva
)
;
static
bool
WriteT11
(
rva_t
instr_rva
rva_t
target_rva
uint16_t
*
code16
)
;
static
ArmAlign
DecodeT20
(
uint32_t
code32
arm_disp_t
*
disp
)
;
static
bool
EncodeT20
(
arm_disp_t
disp
uint32_t
*
code32
)
;
static
bool
ReadT20
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
;
static
bool
WriteT20
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
;
static
ArmAlign
DecodeT24
(
uint32_t
code32
arm_disp_t
*
disp
)
;
static
bool
EncodeT24
(
arm_disp_t
disp
uint32_t
*
code32
)
;
static
bool
ReadT24
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
;
static
bool
WriteT24
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
;
static
inline
rva_t
GetArmTargetRvaFromDisp
(
rva_t
instr_rva
arm_disp_t
disp
ArmAlign
align
)
{
rva_t
ret
=
static_cast
<
rva_t
>
(
instr_rva
+
8
+
disp
)
;
DCHECK_NE
(
align
kArmAlignFail
)
;
return
ret
-
(
ret
&
static_cast
<
rva_t
>
(
align
-
1
)
)
;
}
static
inline
rva_t
GetThumb2TargetRvaFromDisp
(
rva_t
instr_rva
arm_disp_t
disp
ArmAlign
align
)
{
rva_t
ret
=
static_cast
<
rva_t
>
(
instr_rva
+
4
+
disp
)
;
DCHECK_NE
(
align
kArmAlignFail
)
;
return
ret
-
(
ret
&
static_cast
<
rva_t
>
(
align
-
1
)
)
;
}
static
inline
arm_disp_t
GetArmDispFromTargetRva
(
rva_t
instr_rva
rva_t
target_rva
ArmAlign
align
)
{
arm_disp_t
ret
=
static_cast
<
arm_disp_t
>
(
target_rva
)
-
static_cast
<
arm_disp_t
>
(
instr_rva
+
8
)
;
DCHECK_NE
(
align
kArmAlignFail
)
;
return
ret
+
(
(
-
ret
)
&
static_cast
<
arm_disp_t
>
(
align
-
1
)
)
;
}
static
inline
arm_disp_t
GetThumb2DispFromTargetRva
(
rva_t
instr_rva
rva_t
target_rva
ArmAlign
align
)
{
arm_disp_t
ret
=
static_cast
<
arm_disp_t
>
(
target_rva
)
-
static_cast
<
arm_disp_t
>
(
instr_rva
+
4
)
;
DCHECK_NE
(
align
kArmAlignFail
)
;
return
ret
+
(
(
-
ret
)
&
static_cast
<
arm_disp_t
>
(
align
-
1
)
)
;
}
using
AddrTraits_A24
=
ArmAddrTraits
<
AddrType
ADDR_A24
uint32_t
FetchArmCode32
StoreArmCode32
DecodeA24
EncodeA24
ReadA24
WriteA24
>
;
using
AddrTraits_T8
=
ArmAddrTraits
<
AddrType
ADDR_T8
uint16_t
FetchThumb2Code16
StoreThumb2Code16
DecodeT8
EncodeT8
ReadT8
WriteT8
>
;
using
AddrTraits_T11
=
ArmAddrTraits
<
AddrType
ADDR_T11
uint16_t
FetchThumb2Code16
StoreThumb2Code16
DecodeT11
EncodeT11
ReadT11
WriteT11
>
;
using
AddrTraits_T20
=
ArmAddrTraits
<
AddrType
ADDR_T20
uint32_t
FetchThumb2Code32
StoreThumb2Code32
DecodeT20
EncodeT20
ReadT20
WriteT20
>
;
using
AddrTraits_T24
=
ArmAddrTraits
<
AddrType
ADDR_T24
uint32_t
FetchThumb2Code32
StoreThumb2Code32
DecodeT24
EncodeT24
ReadT24
WriteT24
>
;
}
;
class
AArch64Rel32Translator
{
public
:
enum
AddrType
:
uint8_t
{
ADDR_NONE
=
0xFF
ADDR_IMMD14
=
0
ADDR_IMMD19
ADDR_IMMD26
NUM_ADDR_TYPE
}
;
AArch64Rel32Translator
(
)
;
AArch64Rel32Translator
(
const
AArch64Rel32Translator
&
)
=
delete
;
const
AArch64Rel32Translator
&
operator
=
(
const
AArch64Rel32Translator
&
)
=
delete
;
static
inline
uint32_t
FetchCode32
(
ConstBufferView
view
offset_t
idx
)
{
return
view
.
read
<
uint32_t
>
(
idx
)
;
}
static
inline
void
StoreCode32
(
MutableBufferView
mutable_view
offset_t
idx
uint32_t
code
)
{
mutable_view
.
write
<
uint32_t
>
(
idx
code
)
;
}
static
ArmAlign
DecodeImmd14
(
uint32_t
code32
arm_disp_t
*
disp
)
;
static
bool
EncodeImmd14
(
arm_disp_t
disp
uint32_t
*
code32
)
;
static
bool
ReadImmd14
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
;
static
bool
WriteImmd14
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
;
static
ArmAlign
DecodeImmd19
(
uint32_t
code32
arm_disp_t
*
disp
)
;
static
bool
EncodeImmd19
(
arm_disp_t
disp
uint32_t
*
code32
)
;
static
bool
ReadImmd19
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
;
static
bool
WriteImmd19
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
;
static
ArmAlign
DecodeImmd26
(
uint32_t
code32
arm_disp_t
*
disp
)
;
static
bool
EncodeImmd26
(
arm_disp_t
disp
uint32_t
*
code32
)
;
static
bool
ReadImmd26
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
;
static
bool
WriteImmd26
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
;
static
inline
rva_t
GetTargetRvaFromDisp
(
rva_t
instr_rva
arm_disp_t
disp
)
{
return
static_cast
<
rva_t
>
(
instr_rva
+
disp
)
;
}
static
inline
arm_disp_t
GetDispFromTargetRva
(
rva_t
instr_rva
rva_t
target_rva
)
{
return
static_cast
<
arm_disp_t
>
(
target_rva
-
instr_rva
)
;
}
using
AddrTraits_Immd14
=
ArmAddrTraits
<
AddrType
ADDR_IMMD14
uint32_t
FetchCode32
StoreCode32
DecodeImmd14
EncodeImmd14
ReadImmd14
WriteImmd14
>
;
using
AddrTraits_Immd19
=
ArmAddrTraits
<
AddrType
ADDR_IMMD19
uint32_t
FetchCode32
StoreCode32
DecodeImmd19
EncodeImmd19
ReadImmd19
WriteImmd19
>
;
using
AddrTraits_Immd26
=
ArmAddrTraits
<
AddrType
ADDR_IMMD26
uint32_t
FetchCode32
StoreCode32
DecodeImmd26
EncodeImmd26
ReadImmd26
WriteImmd26
>
;
}
;
}
#
endif
