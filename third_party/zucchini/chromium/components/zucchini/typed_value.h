#
ifndef
COMPONENTS_ZUCCHINI_TYPED_VALUE_H_
#
define
COMPONENTS_ZUCCHINI_TYPED_VALUE_H_
#
include
<
ostream
>
namespace
zucchini
{
template
<
class
Tag
class
T
>
class
TypedValue
{
public
:
constexpr
TypedValue
(
)
=
default
;
explicit
constexpr
TypedValue
(
const
T
&
value
)
:
value_
(
value
)
{
}
explicit
operator
T
(
)
const
{
return
value_
;
}
const
T
value
(
)
const
{
return
value_
;
}
friend
bool
operator
=
=
(
const
TypedValue
&
a
const
TypedValue
&
b
)
{
return
a
.
value_
=
=
b
.
value_
;
}
friend
bool
operator
!
=
(
const
TypedValue
&
a
const
TypedValue
&
b
)
{
return
!
(
a
=
=
b
)
;
}
friend
bool
operator
<
(
const
TypedValue
&
a
const
TypedValue
&
b
)
{
return
a
.
value_
<
b
.
value_
;
}
friend
bool
operator
>
(
const
TypedValue
&
a
const
TypedValue
&
b
)
{
return
b
<
a
;
}
private
:
T
value_
=
{
}
;
}
;
template
<
class
Tag
class
T
>
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
TypedValue
<
Tag
T
>
&
tag
)
{
return
os
<
<
tag
.
value
(
)
;
}
}
#
endif
