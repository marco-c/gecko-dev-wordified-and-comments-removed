#
ifndef
COMPONENTS_ZUCCHINI_TARGETS_AFFINITY_H_
#
define
COMPONENTS_ZUCCHINI_TARGETS_AFFINITY_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
deque
>
#
include
<
vector
>
#
include
"
components
/
zucchini
/
image_utils
.
h
"
namespace
zucchini
{
class
EquivalenceMap
;
class
TargetsAffinity
{
public
:
TargetsAffinity
(
)
;
TargetsAffinity
(
const
TargetsAffinity
&
)
=
delete
;
const
TargetsAffinity
&
operator
=
(
const
TargetsAffinity
&
)
=
delete
;
~
TargetsAffinity
(
)
;
void
InferFromSimilarities
(
const
EquivalenceMap
&
equivalence_map
const
std
:
:
deque
<
offset_t
>
&
old_targets
const
std
:
:
deque
<
offset_t
>
&
new_targets
)
;
uint32_t
AssignLabels
(
double
min_affinity
std
:
:
vector
<
uint32_t
>
*
old_labels
std
:
:
vector
<
uint32_t
>
*
new_labels
)
;
double
AffinityBetween
(
key_t
old_key
key_t
new_key
)
const
;
private
:
struct
Association
{
key_t
other
=
0
;
double
affinity
=
0
.
0
;
}
;
std
:
:
vector
<
Association
>
forward_association_
;
std
:
:
vector
<
Association
>
backward_association_
;
}
;
}
#
endif
