#
ifndef
COMPONENTS_ZUCCHINI_DISASSEMBLER_H_
#
define
COMPONENTS_ZUCCHINI_DISASSEMBLER_H_
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
components
/
zucchini
/
buffer_view
.
h
"
#
include
"
components
/
zucchini
/
image_utils
.
h
"
namespace
zucchini
{
class
EmptyReferenceReader
:
public
ReferenceReader
{
public
:
absl
:
:
optional
<
Reference
>
GetNext
(
)
override
;
}
;
class
EmptyReferenceWriter
:
public
ReferenceWriter
{
public
:
void
PutNext
(
Reference
reference
)
override
;
}
;
class
ReferenceGroup
;
class
Disassembler
{
public
:
template
<
class
DIS
>
static
std
:
:
unique_ptr
<
DIS
>
Make
(
ConstBufferView
image
)
{
auto
disasm
=
std
:
:
make_unique
<
DIS
>
(
)
;
if
(
!
disasm
-
>
Parse
(
image
)
)
return
nullptr
;
return
disasm
;
}
Disassembler
(
const
Disassembler
&
)
=
delete
;
const
Disassembler
&
operator
=
(
const
Disassembler
&
)
=
delete
;
virtual
~
Disassembler
(
)
;
virtual
ExecutableType
GetExeType
(
)
const
=
0
;
virtual
std
:
:
string
GetExeTypeString
(
)
const
=
0
;
virtual
std
:
:
vector
<
ReferenceGroup
>
MakeReferenceGroups
(
)
const
=
0
;
ConstBufferView
image
(
)
const
{
return
image_
;
}
size_t
size
(
)
const
{
return
image_
.
size
(
)
;
}
int
num_equivalence_iterations
(
)
const
{
return
num_equivalence_iterations_
;
}
protected
:
explicit
Disassembler
(
int
num_equivalence_iterations
)
;
virtual
bool
Parse
(
ConstBufferView
image
)
=
0
;
ConstBufferView
image_
;
int
num_equivalence_iterations_
;
}
;
class
ReferenceGroup
{
public
:
using
ReaderFactory
=
std
:
:
unique_ptr
<
ReferenceReader
>
(
Disassembler
:
:
*
)
(
offset_t
lower
offset_t
upper
)
;
using
WriterFactory
=
std
:
:
unique_ptr
<
ReferenceWriter
>
(
Disassembler
:
:
*
)
(
MutableBufferView
image
)
;
using
MixerFactory
=
std
:
:
unique_ptr
<
ReferenceMixer
>
(
Disassembler
:
:
*
)
(
ConstBufferView
old_image
ConstBufferView
new_image
)
;
template
<
class
RefinedReaderFactory
class
RefinedWriterFactory
>
ReferenceGroup
(
ReferenceTypeTraits
traits
RefinedReaderFactory
reader_factory
RefinedWriterFactory
writer_factory
)
:
traits_
(
traits
)
reader_factory_
(
static_cast
<
ReaderFactory
>
(
reader_factory
)
)
writer_factory_
(
static_cast
<
WriterFactory
>
(
writer_factory
)
)
{
}
template
<
class
RefinedReaderFactory
class
RefinedWriterFactory
class
RefinedMixerFactory
>
ReferenceGroup
(
ReferenceTypeTraits
traits
RefinedReaderFactory
reader_factory
RefinedWriterFactory
writer_factory
RefinedMixerFactory
mixer_factory
)
:
traits_
(
traits
)
reader_factory_
(
static_cast
<
ReaderFactory
>
(
reader_factory
)
)
writer_factory_
(
static_cast
<
WriterFactory
>
(
writer_factory
)
)
mixer_factory_
(
static_cast
<
MixerFactory
>
(
mixer_factory
)
)
{
}
std
:
:
unique_ptr
<
ReferenceReader
>
GetReader
(
Disassembler
*
disasm
)
const
;
std
:
:
unique_ptr
<
ReferenceReader
>
GetReader
(
offset_t
lower
offset_t
upper
Disassembler
*
disasm
)
const
;
std
:
:
unique_ptr
<
ReferenceWriter
>
GetWriter
(
MutableBufferView
image
Disassembler
*
disasm
)
const
;
std
:
:
unique_ptr
<
ReferenceMixer
>
GetMixer
(
ConstBufferView
old_image
ConstBufferView
new_image
Disassembler
*
disasm
)
const
;
const
ReferenceTypeTraits
&
traits
(
)
const
{
return
traits_
;
}
offset_t
width
(
)
const
{
return
traits
(
)
.
width
;
}
TypeTag
type_tag
(
)
const
{
return
traits
(
)
.
type_tag
;
}
PoolTag
pool_tag
(
)
const
{
return
traits
(
)
.
pool_tag
;
}
private
:
ReferenceTypeTraits
traits_
;
ReaderFactory
reader_factory_
=
nullptr
;
WriterFactory
writer_factory_
=
nullptr
;
MixerFactory
mixer_factory_
=
nullptr
;
}
;
}
#
endif
