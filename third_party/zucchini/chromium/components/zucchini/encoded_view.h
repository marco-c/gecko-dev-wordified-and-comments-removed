#
ifndef
COMPONENTS_ZUCCHINI_ENCODED_VIEW_H_
#
define
COMPONENTS_ZUCCHINI_ENCODED_VIEW_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
iterator
>
#
include
<
vector
>
#
include
"
base
/
memory
/
raw_ptr_exclusion
.
h
"
#
include
"
base
/
memory
/
raw_ref
.
h
"
#
include
"
components
/
zucchini
/
image_index
.
h
"
#
include
"
components
/
zucchini
/
image_utils
.
h
"
namespace
zucchini
{
constexpr
size_t
kReferencePaddingProjection
=
256
;
constexpr
size_t
kBaseReferenceProjection
=
257
;
class
EncodedView
{
public
:
class
Iterator
{
public
:
using
iterator_category
=
std
:
:
random_access_iterator_tag
;
using
value_type
=
size_t
;
using
difference_type
=
ptrdiff_t
;
using
reference
=
size_t
;
using
pointer
=
size_t
*
;
Iterator
(
const
EncodedView
*
encoded_view
difference_type
pos
)
:
encoded_view_
(
encoded_view
)
pos_
(
pos
)
{
}
Iterator
(
const
Iterator
&
)
=
default
;
Iterator
&
operator
=
(
const
Iterator
&
)
=
default
;
value_type
operator
*
(
)
const
{
return
encoded_view_
-
>
Projection
(
static_cast
<
offset_t
>
(
pos_
)
)
;
}
value_type
operator
[
]
(
difference_type
n
)
const
{
return
encoded_view_
-
>
Projection
(
static_cast
<
offset_t
>
(
pos_
+
n
)
)
;
}
Iterator
&
operator
+
+
(
)
{
+
+
pos_
;
return
*
this
;
}
Iterator
operator
+
+
(
int
)
{
Iterator
tmp
=
*
this
;
+
+
pos_
;
return
tmp
;
}
Iterator
&
operator
-
-
(
)
{
-
-
pos_
;
return
*
this
;
}
Iterator
operator
-
-
(
int
)
{
Iterator
tmp
=
*
this
;
-
-
pos_
;
return
tmp
;
}
Iterator
&
operator
+
=
(
difference_type
n
)
{
pos_
+
=
n
;
return
*
this
;
}
Iterator
&
operator
-
=
(
difference_type
n
)
{
pos_
-
=
n
;
return
*
this
;
}
friend
bool
operator
=
=
(
Iterator
a
Iterator
b
)
{
return
a
.
pos_
=
=
b
.
pos_
;
}
friend
bool
operator
!
=
(
Iterator
a
Iterator
b
)
{
return
!
(
a
=
=
b
)
;
}
friend
bool
operator
<
(
Iterator
a
Iterator
b
)
{
return
a
.
pos_
<
b
.
pos_
;
}
friend
bool
operator
>
(
Iterator
a
Iterator
b
)
{
return
b
<
a
;
}
friend
bool
operator
<
=
(
Iterator
a
Iterator
b
)
{
return
!
(
b
<
a
)
;
}
friend
bool
operator
>
=
(
Iterator
a
Iterator
b
)
{
return
!
(
a
<
b
)
;
}
friend
difference_type
operator
-
(
Iterator
a
Iterator
b
)
{
return
a
.
pos_
-
b
.
pos_
;
}
friend
Iterator
operator
+
(
Iterator
it
difference_type
n
)
{
it
+
=
n
;
return
it
;
}
friend
Iterator
operator
-
(
Iterator
it
difference_type
n
)
{
it
-
=
n
;
return
it
;
}
private
:
RAW_PTR_EXCLUSION
const
EncodedView
*
encoded_view_
;
difference_type
pos_
;
}
;
using
value_type
=
size_t
;
using
size_type
=
offset_t
;
using
difference_type
=
ptrdiff_t
;
using
const_iterator
=
Iterator
;
explicit
EncodedView
(
const
ImageIndex
&
image_index
)
;
EncodedView
(
const
EncodedView
&
)
=
delete
;
const
EncodedView
&
operator
=
(
const
EncodedView
&
)
=
delete
;
~
EncodedView
(
)
;
value_type
Projection
(
offset_t
location
)
const
;
bool
IsToken
(
offset_t
location
)
const
{
return
image_index_
-
>
IsToken
(
location
)
;
}
value_type
Cardinality
(
)
const
;
void
SetLabels
(
PoolTag
pool
std
:
:
vector
<
uint32_t
>
&
&
labels
size_t
bound
)
;
const
ImageIndex
&
image_index
(
)
const
{
return
*
image_index_
;
}
size_type
size
(
)
const
{
return
size_type
(
image_index_
-
>
size
(
)
)
;
}
const_iterator
begin
(
)
const
{
return
const_iterator
{
this
difference_type
(
0
)
}
;
}
const_iterator
end
(
)
const
{
return
const_iterator
{
this
difference_type
(
size
(
)
)
}
;
}
private
:
struct
PoolInfo
{
PoolInfo
(
)
;
PoolInfo
(
PoolInfo
&
&
)
;
~
PoolInfo
(
)
;
std
:
:
vector
<
uint32_t
>
labels
;
size_t
bound
=
0
;
}
;
const
raw_ref
<
const
ImageIndex
>
image_index_
;
std
:
:
vector
<
PoolInfo
>
pool_infos_
;
}
;
}
#
endif
