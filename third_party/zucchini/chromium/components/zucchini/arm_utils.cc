#
include
"
components
/
zucchini
/
arm_utils
.
h
"
#
include
"
components
/
zucchini
/
algorithm
.
h
"
namespace
zucchini
{
namespace
{
inline
bool
IsMisaligned
(
rva_t
rva
ArmAlign
align
)
{
return
(
rva
&
(
align
-
1
)
)
!
=
0
;
}
}
AArch32Rel32Translator
:
:
AArch32Rel32Translator
(
)
=
default
;
ArmAlign
AArch32Rel32Translator
:
:
DecodeA24
(
uint32_t
code32
arm_disp_t
*
disp
)
{
uint8_t
bits
=
GetUnsignedBits
<
24
27
>
(
code32
)
;
if
(
bits
=
=
0xA
|
|
bits
=
=
0xB
)
{
*
disp
=
GetSignedBits
<
0
23
>
(
code32
)
<
<
2
;
uint8_t
cond
=
GetUnsignedBits
<
28
31
>
(
code32
)
;
if
(
cond
=
=
0xF
)
{
uint32_t
H
=
GetBit
<
24
>
(
code32
)
;
*
disp
|
=
H
<
<
1
;
return
kArmAlign2
;
}
return
kArmAlign4
;
}
return
kArmAlignFail
;
}
bool
AArch32Rel32Translator
:
:
EncodeA24
(
arm_disp_t
disp
uint32_t
*
code32
)
{
uint32_t
t
=
*
code32
;
uint8_t
bits
=
GetUnsignedBits
<
24
27
>
(
t
)
;
if
(
bits
=
=
0xA
|
|
bits
=
=
0xB
)
{
if
(
!
SignedFit
<
26
>
(
disp
)
)
return
false
;
uint8_t
cond
=
GetUnsignedBits
<
28
31
>
(
t
)
;
if
(
cond
=
=
0xF
)
{
if
(
disp
%
2
)
return
false
;
uint32_t
H
=
GetBit
<
1
>
(
disp
)
;
t
=
(
t
&
0xFEFFFFFF
)
|
(
H
<
<
24
)
;
}
else
{
if
(
disp
%
4
)
return
false
;
}
t
=
(
t
&
0xFF000000
)
|
(
(
disp
>
>
2
)
&
0x00FFFFFF
)
;
*
code32
=
t
;
return
true
;
}
return
false
;
}
bool
AArch32Rel32Translator
:
:
ReadA24
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign4
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
)
return
false
;
arm_disp_t
disp
;
ArmAlign
target_align
=
DecodeA24
(
code32
&
disp
)
;
if
(
target_align
=
=
kArmAlignFail
)
return
false
;
*
target_rva
=
GetArmTargetRvaFromDisp
(
instr_rva
disp
target_align
)
;
return
true
;
}
bool
AArch32Rel32Translator
:
:
WriteA24
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign4
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
)
return
false
;
arm_disp_t
dummy_disp
;
ArmAlign
target_align
=
DecodeA24
(
*
code32
&
dummy_disp
)
;
if
(
target_align
=
=
kArmAlignFail
|
|
IsMisaligned
(
target_rva
target_align
)
)
return
false
;
arm_disp_t
disp
=
GetArmDispFromTargetRva
(
instr_rva
target_rva
target_align
)
;
return
EncodeA24
(
disp
code32
)
;
}
ArmAlign
AArch32Rel32Translator
:
:
DecodeT8
(
uint16_t
code16
arm_disp_t
*
disp
)
{
if
(
(
code16
&
0xF000
)
=
=
0xD000
&
&
(
code16
&
0x0F00
)
!
=
0x0F00
)
{
*
disp
=
GetSignedBits
<
0
7
>
(
code16
)
<
<
1
;
return
kArmAlign2
;
}
return
kArmAlignFail
;
}
bool
AArch32Rel32Translator
:
:
EncodeT8
(
arm_disp_t
disp
uint16_t
*
code16
)
{
uint16_t
t
=
*
code16
;
if
(
(
t
&
0xF000
)
=
=
0xD000
&
&
(
t
&
0x0F00
)
!
=
0x0F00
)
{
if
(
disp
%
2
)
return
false
;
if
(
!
SignedFit
<
9
>
(
disp
)
)
return
false
;
t
=
(
t
&
0xFF00
)
|
(
(
disp
>
>
1
)
&
0x00FF
)
;
*
code16
=
t
;
return
true
;
}
return
false
;
}
bool
AArch32Rel32Translator
:
:
ReadT8
(
rva_t
instr_rva
uint16_t
code16
rva_t
*
target_rva
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign2
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
)
return
false
;
arm_disp_t
disp
;
ArmAlign
target_align
=
DecodeT8
(
code16
&
disp
)
;
if
(
target_align
=
=
kArmAlignFail
)
return
false
;
*
target_rva
=
GetThumb2TargetRvaFromDisp
(
instr_rva
disp
target_align
)
;
return
true
;
}
bool
AArch32Rel32Translator
:
:
WriteT8
(
rva_t
instr_rva
rva_t
target_rva
uint16_t
*
code16
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign2
;
constexpr
ArmAlign
kTargetAlign
=
kArmAlign2
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
|
|
IsMisaligned
(
target_rva
kTargetAlign
)
)
{
return
false
;
}
arm_disp_t
disp
=
GetThumb2DispFromTargetRva
(
instr_rva
target_rva
kTargetAlign
)
;
return
EncodeT8
(
disp
code16
)
;
}
ArmAlign
AArch32Rel32Translator
:
:
DecodeT11
(
uint16_t
code16
arm_disp_t
*
disp
)
{
if
(
(
code16
&
0xF800
)
=
=
0xE000
)
{
*
disp
=
GetSignedBits
<
0
10
>
(
code16
)
<
<
1
;
return
kArmAlign2
;
}
return
kArmAlignFail
;
}
bool
AArch32Rel32Translator
:
:
EncodeT11
(
arm_disp_t
disp
uint16_t
*
code16
)
{
uint16_t
t
=
*
code16
;
if
(
(
t
&
0xF800
)
=
=
0xE000
)
{
if
(
disp
%
2
)
return
false
;
if
(
!
SignedFit
<
12
>
(
disp
)
)
return
false
;
t
=
(
t
&
0xF800
)
|
(
(
disp
>
>
1
)
&
0x07FF
)
;
*
code16
=
t
;
return
true
;
}
return
false
;
}
bool
AArch32Rel32Translator
:
:
ReadT11
(
rva_t
instr_rva
uint16_t
code16
rva_t
*
target_rva
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign2
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
)
return
false
;
arm_disp_t
disp
;
ArmAlign
target_align
=
DecodeT11
(
code16
&
disp
)
;
if
(
target_align
=
=
kArmAlignFail
)
return
false
;
*
target_rva
=
GetThumb2TargetRvaFromDisp
(
instr_rva
disp
target_align
)
;
return
true
;
}
bool
AArch32Rel32Translator
:
:
WriteT11
(
rva_t
instr_rva
rva_t
target_rva
uint16_t
*
code16
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign2
;
constexpr
ArmAlign
kTargetAlign
=
kArmAlign2
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
|
|
IsMisaligned
(
target_rva
kTargetAlign
)
)
{
return
false
;
}
arm_disp_t
disp
=
GetThumb2DispFromTargetRva
(
instr_rva
target_rva
kTargetAlign
)
;
return
EncodeT11
(
disp
code16
)
;
}
ArmAlign
AArch32Rel32Translator
:
:
DecodeT20
(
uint32_t
code32
arm_disp_t
*
disp
)
{
if
(
(
code32
&
0xF800D000
)
=
=
0xF0008000
&
&
(
code32
&
0x03C00000
)
!
=
0x03C00000
)
{
uint32_t
imm11
=
GetUnsignedBits
<
0
10
>
(
code32
)
;
uint32_t
J2
=
GetBit
<
11
>
(
code32
)
;
uint32_t
J1
=
GetBit
<
13
>
(
code32
)
;
uint32_t
imm6
=
GetUnsignedBits
<
16
21
>
(
code32
)
;
uint32_t
S
=
GetBit
<
26
>
(
code32
)
;
uint32_t
t
=
(
imm6
<
<
12
)
|
(
imm11
<
<
1
)
;
t
|
=
(
S
<
<
20
)
|
(
J2
<
<
19
)
|
(
J1
<
<
18
)
;
*
disp
=
SignExtend
<
20
int32_t
>
(
t
)
;
return
kArmAlign2
;
}
return
kArmAlignFail
;
}
bool
AArch32Rel32Translator
:
:
EncodeT20
(
arm_disp_t
disp
uint32_t
*
code32
)
{
uint32_t
t
=
*
code32
;
if
(
(
t
&
0xF800D000
)
=
=
0xF0008000
&
&
(
t
&
0x03C00000
)
!
=
0x03C00000
)
{
if
(
disp
%
2
)
return
false
;
if
(
!
SignedFit
<
21
>
(
disp
)
)
return
false
;
uint32_t
S
=
GetBit
<
20
>
(
disp
)
;
uint32_t
J2
=
GetBit
<
19
>
(
disp
)
;
uint32_t
J1
=
GetBit
<
18
>
(
disp
)
;
uint32_t
imm6
=
GetUnsignedBits
<
12
17
>
(
disp
)
;
uint32_t
imm11
=
GetUnsignedBits
<
1
11
>
(
disp
)
;
t
&
=
0xFBC0D000
;
t
|
=
(
S
<
<
26
)
|
(
imm6
<
<
16
)
|
(
J1
<
<
13
)
|
(
J2
<
<
11
)
|
imm11
;
*
code32
=
t
;
return
true
;
}
return
false
;
}
bool
AArch32Rel32Translator
:
:
ReadT20
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign2
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
)
return
false
;
arm_disp_t
disp
;
ArmAlign
target_align
=
DecodeT20
(
code32
&
disp
)
;
if
(
target_align
=
=
kArmAlignFail
)
return
false
;
*
target_rva
=
GetThumb2TargetRvaFromDisp
(
instr_rva
disp
target_align
)
;
return
true
;
}
bool
AArch32Rel32Translator
:
:
WriteT20
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign2
;
constexpr
ArmAlign
kTargetAlign
=
kArmAlign2
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
|
|
IsMisaligned
(
target_rva
kTargetAlign
)
)
{
return
false
;
}
arm_disp_t
disp
=
GetThumb2DispFromTargetRva
(
instr_rva
target_rva
kTargetAlign
)
;
return
EncodeT20
(
disp
code32
)
;
}
ArmAlign
AArch32Rel32Translator
:
:
DecodeT24
(
uint32_t
code32
arm_disp_t
*
disp
)
{
uint32_t
bits
=
code32
&
0xF800D000
;
if
(
bits
=
=
0xF0009000
|
|
bits
=
=
0xF000D000
|
|
bits
=
=
0xF000C000
)
{
uint32_t
imm11
=
GetUnsignedBits
<
0
10
>
(
code32
)
;
uint32_t
J2
=
GetBit
<
11
>
(
code32
)
;
uint32_t
J1
=
GetBit
<
13
>
(
code32
)
;
uint32_t
imm10
=
GetUnsignedBits
<
16
25
>
(
code32
)
;
uint32_t
S
=
GetBit
<
26
>
(
code32
)
;
uint32_t
t
=
(
imm10
<
<
12
)
|
(
imm11
<
<
1
)
;
t
|
=
(
S
<
<
24
)
|
(
(
J1
^
S
^
1
)
<
<
23
)
|
(
(
J2
^
S
^
1
)
<
<
22
)
;
t
=
SignExtend
<
24
int32_t
>
(
t
)
;
ArmAlign
target_align
=
kArmAlign2
;
if
(
bits
=
=
0xF000C000
)
{
uint32_t
H
=
GetBit
<
0
>
(
code32
)
;
if
(
H
)
return
kArmAlignFail
;
target_align
=
kArmAlign4
;
}
*
disp
=
static_cast
<
int32_t
>
(
t
)
;
return
target_align
;
}
return
kArmAlignFail
;
}
bool
AArch32Rel32Translator
:
:
EncodeT24
(
arm_disp_t
disp
uint32_t
*
code32
)
{
uint32_t
t
=
*
code32
;
uint32_t
bits
=
t
&
0xF800D000
;
if
(
bits
=
=
0xF0009000
|
|
bits
=
=
0xF000D000
|
|
bits
=
=
0xF000C000
)
{
if
(
disp
%
2
)
return
false
;
if
(
bits
=
=
0xF000C000
)
{
uint32_t
H
=
GetBit
<
1
>
(
disp
)
;
if
(
H
)
return
false
;
}
if
(
!
SignedFit
<
25
>
(
disp
)
)
return
false
;
uint32_t
imm11
=
GetUnsignedBits
<
1
11
>
(
disp
)
;
uint32_t
imm10
=
GetUnsignedBits
<
12
21
>
(
disp
)
;
uint32_t
I2
=
GetBit
<
22
>
(
disp
)
;
uint32_t
I1
=
GetBit
<
23
>
(
disp
)
;
uint32_t
S
=
GetBit
<
24
>
(
disp
)
;
t
&
=
0xF800D000
;
t
|
=
(
S
<
<
26
)
|
(
imm10
<
<
16
)
|
(
(
I1
^
S
^
1
)
<
<
13
)
|
(
(
I2
^
S
^
1
)
<
<
11
)
|
imm11
;
*
code32
=
t
;
return
true
;
}
return
false
;
}
bool
AArch32Rel32Translator
:
:
ReadT24
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign2
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
)
return
false
;
arm_disp_t
disp
;
ArmAlign
target_align
=
DecodeT24
(
code32
&
disp
)
;
if
(
target_align
=
=
kArmAlignFail
)
return
false
;
*
target_rva
=
GetThumb2TargetRvaFromDisp
(
instr_rva
disp
target_align
)
;
return
true
;
}
bool
AArch32Rel32Translator
:
:
WriteT24
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign2
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
)
return
false
;
arm_disp_t
dummy_disp
;
ArmAlign
target_align
=
DecodeT24
(
*
code32
&
dummy_disp
)
;
if
(
target_align
=
=
kArmAlignFail
|
|
IsMisaligned
(
target_rva
target_align
)
)
return
false
;
arm_disp_t
disp
=
GetThumb2DispFromTargetRva
(
instr_rva
target_rva
target_align
)
;
return
EncodeT24
(
disp
code32
)
;
}
AArch64Rel32Translator
:
:
AArch64Rel32Translator
(
)
=
default
;
ArmAlign
AArch64Rel32Translator
:
:
DecodeImmd14
(
uint32_t
code32
arm_disp_t
*
disp
)
{
uint32_t
bits
=
code32
&
0x7F000000
;
if
(
bits
=
=
0x36000000
|
|
bits
=
=
0x37000000
)
{
*
disp
=
GetSignedBits
<
5
18
>
(
code32
)
<
<
2
;
return
kArmAlign4
;
}
return
kArmAlignFail
;
}
bool
AArch64Rel32Translator
:
:
EncodeImmd14
(
arm_disp_t
disp
uint32_t
*
code32
)
{
uint32_t
t
=
*
code32
;
uint32_t
bits
=
t
&
0x7F000000
;
if
(
bits
=
=
0x36000000
|
|
bits
=
=
0x37000000
)
{
if
(
disp
%
4
)
return
false
;
if
(
!
SignedFit
<
16
>
(
disp
)
)
return
false
;
uint32_t
imm14
=
GetUnsignedBits
<
2
15
>
(
disp
)
;
t
&
=
0xFFF8001F
;
t
|
=
imm14
<
<
5
;
*
code32
=
t
;
return
true
;
}
return
false
;
}
bool
AArch64Rel32Translator
:
:
ReadImmd14
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign4
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
)
return
false
;
arm_disp_t
disp
;
if
(
DecodeImmd14
(
code32
&
disp
)
=
=
kArmAlignFail
)
return
false
;
*
target_rva
=
GetTargetRvaFromDisp
(
instr_rva
disp
)
;
return
true
;
}
bool
AArch64Rel32Translator
:
:
WriteImmd14
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign4
;
constexpr
ArmAlign
kTargetAlign
=
kArmAlign4
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
|
|
IsMisaligned
(
target_rva
kTargetAlign
)
)
{
return
false
;
}
arm_disp_t
disp
=
GetDispFromTargetRva
(
instr_rva
target_rva
)
;
return
EncodeImmd14
(
disp
code32
)
;
}
ArmAlign
AArch64Rel32Translator
:
:
DecodeImmd19
(
uint32_t
code32
arm_disp_t
*
disp
)
{
uint32_t
bits1
=
code32
&
0xFF000010
;
uint32_t
bits2
=
code32
&
0x7F000000
;
if
(
bits1
=
=
0x54000000
|
|
bits2
=
=
0x34000000
|
|
bits2
=
=
0x35000000
)
{
*
disp
=
GetSignedBits
<
5
23
>
(
code32
)
<
<
2
;
return
kArmAlign4
;
}
return
kArmAlignFail
;
}
bool
AArch64Rel32Translator
:
:
EncodeImmd19
(
arm_disp_t
disp
uint32_t
*
code32
)
{
uint32_t
t
=
*
code32
;
uint32_t
bits1
=
t
&
0xFF000010
;
uint32_t
bits2
=
t
&
0x7F000000
;
if
(
bits1
=
=
0x54000000
|
|
bits2
=
=
0x34000000
|
|
bits2
=
=
0x35000000
)
{
if
(
disp
%
4
)
return
false
;
if
(
!
SignedFit
<
21
>
(
disp
)
)
return
false
;
uint32_t
imm19
=
GetUnsignedBits
<
2
20
>
(
disp
)
;
t
&
=
0xFF00001F
;
t
|
=
imm19
<
<
5
;
*
code32
=
t
;
return
true
;
}
return
false
;
}
bool
AArch64Rel32Translator
:
:
ReadImmd19
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign4
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
)
return
false
;
arm_disp_t
disp
;
if
(
DecodeImmd19
(
code32
&
disp
)
=
=
kArmAlignFail
)
return
false
;
*
target_rva
=
GetTargetRvaFromDisp
(
instr_rva
disp
)
;
return
true
;
}
bool
AArch64Rel32Translator
:
:
WriteImmd19
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign4
;
constexpr
ArmAlign
kTargetAlign
=
kArmAlign4
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
|
|
IsMisaligned
(
target_rva
kTargetAlign
)
)
{
return
false
;
}
arm_disp_t
disp
=
GetDispFromTargetRva
(
instr_rva
target_rva
)
;
return
EncodeImmd19
(
disp
code32
)
;
}
ArmAlign
AArch64Rel32Translator
:
:
DecodeImmd26
(
uint32_t
code32
arm_disp_t
*
disp
)
{
uint32_t
bits
=
code32
&
0xFC000000
;
if
(
bits
=
=
0x14000000
|
|
bits
=
=
0x94000000
)
{
*
disp
=
GetSignedBits
<
0
25
>
(
code32
)
<
<
2
;
return
kArmAlign4
;
}
return
kArmAlignFail
;
}
bool
AArch64Rel32Translator
:
:
EncodeImmd26
(
arm_disp_t
disp
uint32_t
*
code32
)
{
uint32_t
t
=
*
code32
;
uint32_t
bits
=
t
&
0xFC000000
;
if
(
bits
=
=
0x14000000
|
|
bits
=
=
0x94000000
)
{
if
(
disp
%
4
)
return
false
;
if
(
!
SignedFit
<
28
>
(
disp
)
)
return
false
;
uint32_t
imm26
=
GetUnsignedBits
<
2
27
>
(
disp
)
;
t
&
=
0xFC000000
;
t
|
=
imm26
;
*
code32
=
t
;
return
true
;
}
return
false
;
}
bool
AArch64Rel32Translator
:
:
ReadImmd26
(
rva_t
instr_rva
uint32_t
code32
rva_t
*
target_rva
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign4
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
)
return
false
;
arm_disp_t
disp
;
if
(
DecodeImmd26
(
code32
&
disp
)
=
=
kArmAlignFail
)
return
false
;
*
target_rva
=
GetTargetRvaFromDisp
(
instr_rva
disp
)
;
return
true
;
}
bool
AArch64Rel32Translator
:
:
WriteImmd26
(
rva_t
instr_rva
rva_t
target_rva
uint32_t
*
code32
)
{
constexpr
ArmAlign
kInstrAlign
=
kArmAlign4
;
constexpr
ArmAlign
kTargetAlign
=
kArmAlign4
;
if
(
IsMisaligned
(
instr_rva
kInstrAlign
)
|
|
IsMisaligned
(
target_rva
kTargetAlign
)
)
{
return
false
;
}
arm_disp_t
disp
=
GetDispFromTargetRva
(
instr_rva
target_rva
)
;
return
EncodeImmd26
(
disp
code32
)
;
}
}
