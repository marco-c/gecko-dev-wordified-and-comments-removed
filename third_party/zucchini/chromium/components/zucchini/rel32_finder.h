#
ifndef
COMPONENTS_ZUCCHINI_REL32_FINDER_H_
#
define
COMPONENTS_ZUCCHINI_REL32_FINDER_H_
#
include
<
stddef
.
h
>
#
include
<
deque
>
#
include
"
components
/
zucchini
/
address_translator
.
h
"
#
include
"
components
/
zucchini
/
arm_utils
.
h
"
#
include
"
components
/
zucchini
/
buffer_view
.
h
"
#
include
"
components
/
zucchini
/
image_utils
.
h
"
namespace
zucchini
{
class
Abs32GapFinder
{
public
:
Abs32GapFinder
(
ConstBufferView
image
ConstBufferView
region
const
std
:
:
deque
<
offset_t
>
&
abs32_locations
size_t
abs32_width
)
;
Abs32GapFinder
(
const
Abs32GapFinder
&
)
=
delete
;
const
Abs32GapFinder
&
operator
=
(
const
Abs32GapFinder
&
)
=
delete
;
~
Abs32GapFinder
(
)
;
bool
FindNext
(
)
;
ConstBufferView
GetGap
(
)
const
{
return
gap_
;
}
private
:
const
ConstBufferView
:
:
const_iterator
base_
;
const
ConstBufferView
:
:
const_iterator
region_end_
;
ConstBufferView
:
:
const_iterator
cur_lo_
;
const
std
:
:
deque
<
offset_t
>
:
:
const_iterator
abs32_end_
;
std
:
:
deque
<
offset_t
>
:
:
const_iterator
abs32_cur_
;
const
size_t
abs32_width_
;
ConstBufferView
gap_
;
}
;
class
Rel32Finder
{
public
:
Rel32Finder
(
ConstBufferView
image
const
AddressTranslator
&
translator
)
;
Rel32Finder
(
const
Rel32Finder
&
)
=
delete
;
const
Rel32Finder
&
operator
=
(
const
Rel32Finder
&
)
=
delete
;
virtual
~
Rel32Finder
(
)
;
void
SetRegion
(
ConstBufferView
region
)
;
bool
FindNext
(
)
;
void
Accept
(
)
;
ConstBufferView
:
:
const_iterator
accept_it
(
)
const
{
return
accept_it_
;
}
ConstBufferView
region
(
)
const
{
return
region_
;
}
protected
:
struct
NextIterators
{
ConstBufferView
:
:
const_iterator
reject
;
ConstBufferView
:
:
const_iterator
accept
;
}
;
virtual
NextIterators
Scan
(
ConstBufferView
region
)
=
0
;
const
ConstBufferView
image_
;
AddressTranslator
:
:
OffsetToRvaCache
offset_to_rva_
;
private
:
ConstBufferView
region_
;
ConstBufferView
:
:
const_iterator
accept_it_
=
nullptr
;
}
;
class
Rel32FinderIntel
:
public
Rel32Finder
{
public
:
Rel32FinderIntel
(
const
Rel32FinderIntel
&
)
=
delete
;
const
Rel32FinderIntel
&
operator
=
(
const
Rel32FinderIntel
&
)
=
delete
;
struct
Result
{
offset_t
location
;
rva_t
target_rva
;
bool
can_point_outside_section
;
}
;
using
Rel32Finder
:
:
Rel32Finder
;
const
Result
&
GetRel32
(
)
{
return
rel32_
;
}
protected
:
Rel32Finder
:
:
NextIterators
SetResult
(
ConstBufferView
:
:
const_iterator
cursor
uint32_t
code_size
bool
can_point_outside_section
)
;
Result
rel32_
;
NextIterators
Scan
(
ConstBufferView
region
)
override
=
0
;
}
;
class
Rel32FinderX86
:
public
Rel32FinderIntel
{
public
:
using
Rel32FinderIntel
:
:
Rel32FinderIntel
;
Rel32FinderX86
(
const
Rel32FinderX86
&
)
=
delete
;
const
Rel32FinderX86
&
operator
=
(
const
Rel32FinderX86
&
)
=
delete
;
private
:
NextIterators
Scan
(
ConstBufferView
region
)
override
;
}
;
class
Rel32FinderX64
:
public
Rel32FinderIntel
{
public
:
using
Rel32FinderIntel
:
:
Rel32FinderIntel
;
Rel32FinderX64
(
const
Rel32FinderX64
&
)
=
delete
;
const
Rel32FinderX64
&
operator
=
(
const
Rel32FinderX64
&
)
=
delete
;
private
:
NextIterators
Scan
(
ConstBufferView
region
)
override
;
}
;
template
<
typename
ADDR_TYPE
>
class
Rel32FinderArm
:
public
Rel32Finder
{
public
:
struct
Result
{
offset_t
location
;
rva_t
target_rva
;
ADDR_TYPE
type
;
bool
operator
=
=
(
const
Result
&
other
)
const
{
return
location
=
=
other
.
location
&
&
target_rva
=
=
other
.
target_rva
&
&
type
=
=
other
.
type
;
}
}
;
Rel32FinderArm
(
ConstBufferView
image
const
AddressTranslator
&
translator
)
;
Rel32FinderArm
(
const
Rel32FinderArm
&
)
=
delete
;
const
Rel32FinderArm
&
operator
=
(
const
Rel32FinderArm
&
)
=
delete
;
~
Rel32FinderArm
(
)
override
;
NextIterators
SetResult
(
Result
&
&
result
ConstBufferView
:
:
const_iterator
cursor
int
instr_size
)
;
NextIterators
SetEmptyResult
(
)
;
protected
:
Result
rel32_
;
}
;
class
Rel32FinderAArch32
:
public
Rel32FinderArm
<
AArch32Rel32Translator
:
:
AddrType
>
{
public
:
Rel32FinderAArch32
(
ConstBufferView
image
const
AddressTranslator
&
translator
bool
is_thumb2
)
;
Rel32FinderAArch32
(
const
Rel32FinderAArch32
&
)
=
delete
;
const
Rel32FinderAArch32
&
operator
=
(
const
Rel32FinderAArch32
&
)
=
delete
;
~
Rel32FinderAArch32
(
)
override
;
const
Result
&
GetRel32
(
)
const
{
return
rel32_
;
}
private
:
NextIterators
ScanA32
(
ConstBufferView
region
)
;
NextIterators
ScanT32
(
ConstBufferView
region
)
;
NextIterators
Scan
(
ConstBufferView
region
)
override
;
const
bool
is_thumb2_
;
}
;
class
Rel32FinderAArch64
:
public
Rel32FinderArm
<
AArch64Rel32Translator
:
:
AddrType
>
{
public
:
Rel32FinderAArch64
(
ConstBufferView
image
const
AddressTranslator
&
translator
)
;
Rel32FinderAArch64
(
const
Rel32FinderAArch64
&
)
=
delete
;
const
Rel32FinderAArch64
&
operator
=
(
const
Rel32FinderAArch64
&
)
=
delete
;
~
Rel32FinderAArch64
(
)
override
;
const
Result
&
GetRel32
(
)
const
{
return
rel32_
;
}
private
:
NextIterators
Scan
(
ConstBufferView
region
)
override
;
}
;
}
#
endif
