#
include
"
components
/
zucchini
/
rel32_utils
.
h
"
#
include
<
stdint
.
h
>
#
include
<
deque
>
#
include
<
memory
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
base
/
test
/
gtest_util
.
h
"
#
include
"
components
/
zucchini
/
address_translator
.
h
"
#
include
"
components
/
zucchini
/
arm_utils
.
h
"
#
include
"
components
/
zucchini
/
image_utils
.
h
"
#
include
"
testing
/
gtest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
zucchini
{
namespace
{
class
TestAddressTranslator
:
public
AddressTranslator
{
public
:
TestAddressTranslator
(
offset_t
image_size
rva_t
rva_begin
)
{
#
if
!
defined
(
MOZ_ZUCCHINI
)
DCHECK_GE
(
rva_begin
0U
)
;
#
endif
CHECK_EQ
(
AddressTranslator
:
:
kSuccess
Initialize
(
{
{
0
image_size
rva_begin
image_size
}
}
)
)
;
}
}
;
void
CheckReader
(
const
std
:
:
vector
<
Reference
>
&
expected_refs
std
:
:
unique_ptr
<
ReferenceReader
>
reader
)
{
for
(
Reference
expected_ref
:
expected_refs
)
{
auto
ref
=
reader
-
>
GetNext
(
)
;
EXPECT_TRUE
(
ref
.
has_value
(
)
)
;
EXPECT_EQ
(
expected_ref
ref
.
value
(
)
)
;
}
EXPECT_EQ
(
absl
:
:
nullopt
reader
-
>
GetNext
(
)
)
;
}
using
ArmCopyDispFun
=
bool
(
*
)
(
ConstBufferView
src_view
offset_t
src_idx
MutableBufferView
dst_view
offset_t
dst_idx
)
;
void
CheckCopy
(
const
std
:
:
vector
<
uint8_t
>
&
bytes_exp_1_to_2
const
std
:
:
vector
<
uint8_t
>
&
bytes_exp_2_to_1
const
std
:
:
vector
<
uint8_t
>
&
bytes1
const
std
:
:
vector
<
uint8_t
>
&
bytes2
ArmCopyDispFun
copier
)
{
auto
run_test
=
[
&
copier
]
(
const
std
:
:
vector
<
uint8_t
>
&
bytes_exp
const
std
:
:
vector
<
uint8_t
>
&
bytes_in
std
:
:
vector
<
uint8_t
>
bytes_out
)
{
ConstBufferView
buffer_in
(
&
bytes_in
[
0
]
bytes_in
.
size
(
)
)
;
MutableBufferView
buffer_out
(
&
bytes_out
[
0
]
bytes_out
.
size
(
)
)
;
if
(
bytes_exp
.
empty
(
)
)
{
EXPECT_FALSE
(
copier
(
buffer_in
0U
buffer_out
0U
)
)
;
}
else
{
EXPECT_TRUE
(
copier
(
buffer_in
0U
buffer_out
0U
)
)
;
EXPECT_EQ
(
bytes_exp
bytes_out
)
;
}
}
;
run_test
(
bytes_exp_1_to_2
bytes1
bytes2
)
;
run_test
(
bytes_exp_2_to_1
bytes2
bytes1
)
;
}
}
TEST
(
Rel32UtilsTest
Rel32ReaderX86
)
{
constexpr
offset_t
kTestImageSize
=
0x00100000U
;
constexpr
rva_t
kRvaBegin
=
0x00030000U
;
TestAddressTranslator
translator
(
kTestImageSize
kRvaBegin
)
;
std
:
:
vector
<
uint8_t
>
bytes
=
{
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x04
0x00
0x00
0x00
0xFF
0xFF
0xFF
0xFF
0x00
0x00
0x00
0x00
0xFF
0xFF
0xFF
0xFF
0xF4
0xFF
0xFF
0xFF
0xE4
0xFF
0xFF
0xFF
}
;
ConstBufferView
buffer
(
bytes
.
data
(
)
bytes
.
size
(
)
)
;
std
:
:
deque
<
offset_t
>
rel32_locations
=
{
0x0008U
0x0010U
0x0018U
0x001CU
}
;
auto
reader1
=
std
:
:
make_unique
<
Rel32ReaderX86
>
(
buffer
0x0000U
0x0020U
&
rel32_locations
translator
)
;
CheckReader
(
{
{
0x0008U
0x0010U
}
{
0x0010U
0x0014U
}
{
0x0018U
0x0010U
}
{
0x001CU
0x0004U
}
}
std
:
:
move
(
reader1
)
)
;
auto
reader2
=
std
:
:
make_unique
<
Rel32ReaderX86
>
(
buffer
0x0000U
0x001CU
&
rel32_locations
translator
)
;
CheckReader
(
{
{
0x0008U
0x0010U
}
{
0x0010U
0x0014U
}
{
0x0018U
0x0010U
}
}
std
:
:
move
(
reader2
)
)
;
auto
reader3
=
std
:
:
make_unique
<
Rel32ReaderX86
>
(
buffer
0x000CU
0x0018U
&
rel32_locations
translator
)
;
CheckReader
(
{
{
0x0010U
0x0014U
}
}
std
:
:
move
(
reader3
)
)
;
}
TEST
(
Rel32UtilsTest
Rel32WriterX86
)
{
constexpr
offset_t
kTestImageSize
=
0x00100000U
;
constexpr
rva_t
kRvaBegin
=
0x00030000U
;
TestAddressTranslator
translator
(
kTestImageSize
kRvaBegin
)
;
std
:
:
vector
<
uint8_t
>
bytes
(
32
0xFF
)
;
MutableBufferView
buffer
(
bytes
.
data
(
)
bytes
.
size
(
)
)
;
Rel32WriterX86
writer
(
buffer
translator
)
;
writer
.
PutNext
(
{
0x0008U
0x0010U
}
)
;
EXPECT_EQ
(
0x00000004U
buffer
.
read
<
uint32_t
>
(
0x08
)
)
;
writer
.
PutNext
(
{
0x0010U
0x0014U
}
)
;
EXPECT_EQ
(
0x00000000U
buffer
.
read
<
uint32_t
>
(
0x10
)
)
;
writer
.
PutNext
(
{
0x0018U
0x0010U
}
)
;
EXPECT_EQ
(
0xFFFFFFF4U
buffer
.
read
<
uint32_t
>
(
0x18
)
)
;
writer
.
PutNext
(
{
0x001CU
0x0004U
}
)
;
EXPECT_EQ
(
0xFFFFFFE4U
buffer
.
read
<
uint32_t
>
(
0x1C
)
)
;
EXPECT_EQ
(
std
:
:
vector
<
uint8_t
>
(
{
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x04
0x00
0x00
0x00
0xFF
0xFF
0xFF
0xFF
0x00
0x00
0x00
0x00
0xFF
0xFF
0xFF
0xFF
0xF4
0xFF
0xFF
0xFF
0xE4
0xFF
0xFF
0xFF
}
)
bytes
)
;
}
TEST
(
Rel32UtilsTest
Rel32ReaderArm_AArch32
)
{
constexpr
offset_t
kTestImageSize
=
0x00100000U
;
constexpr
rva_t
kRvaBegin
=
0x00030000U
;
TestAddressTranslator
translator
(
kTestImageSize
kRvaBegin
)
;
std
:
:
vector
<
uint8_t
>
bytes
=
{
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x00
0x00
0x00
0xEA
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xEB
0xFF
0xFF
0xFF
0xFF
0xFC
0xFF
0xFF
0xEB
0xF8
0xFF
0xFF
0xEA
}
;
ConstBufferView
region
(
&
bytes
[
0
]
bytes
.
size
(
)
)
;
std
:
:
deque
<
offset_t
>
rel32_locations_A24
=
{
0x0008U
0x0010U
0x0018U
0x001CU
}
;
auto
reader1
=
std
:
:
make_unique
<
Rel32ReaderArm
<
AArch32Rel32Translator
:
:
AddrTraits_A24
>
>
(
translator
region
rel32_locations_A24
0x0000U
0x0020U
)
;
CheckReader
(
{
{
0x0008U
0x0010U
}
{
0x0010U
0x0014U
}
{
0x0018U
0x0010U
}
{
0x001CU
0x0004U
}
}
std
:
:
move
(
reader1
)
)
;
auto
reader2
=
std
:
:
make_unique
<
Rel32ReaderArm
<
AArch32Rel32Translator
:
:
AddrTraits_A24
>
>
(
translator
region
rel32_locations_A24
0x0000U
0x001CU
)
;
CheckReader
(
{
{
0x0008U
0x0010U
}
{
0x0010U
0x0014U
}
{
0x0018U
0x0010U
}
}
std
:
:
move
(
reader2
)
)
;
auto
reader3
=
std
:
:
make_unique
<
Rel32ReaderArm
<
AArch32Rel32Translator
:
:
AddrTraits_A24
>
>
(
translator
region
rel32_locations_A24
0x000CU
0x0018U
)
;
CheckReader
(
{
{
0x0010U
0x0014U
}
}
std
:
:
move
(
reader3
)
)
;
}
TEST
(
Rel32UtilsTest
Rel32WriterArm_AArch32_Easy
)
{
constexpr
offset_t
kTestImageSize
=
0x00100000U
;
constexpr
rva_t
kRvaBegin
=
0x00030000U
;
TestAddressTranslator
translator
(
kTestImageSize
kRvaBegin
)
;
std
:
:
vector
<
uint8_t
>
bytes
=
{
0xFF
0xFF
0x01
0xDE
0xFF
0xFF
0xFF
0xFF
0x01
0xE0
0xFF
0xFF
0x80
0xF3
0x00
0x80
}
;
MutableBufferView
region
(
&
bytes
[
0
]
bytes
.
size
(
)
)
;
auto
writer1
=
std
:
:
make_unique
<
Rel32WriterArm
<
AArch32Rel32Translator
:
:
AddrTraits_T8
>
>
(
translator
region
)
;
writer1
-
>
PutNext
(
{
0x0002U
0x0004U
}
)
;
EXPECT_EQ
(
0xFF
bytes
[
0x02
]
)
;
EXPECT_EQ
(
0xDE
bytes
[
0x03
]
)
;
writer1
-
>
PutNext
(
{
0x0002U
0x000AU
}
)
;
EXPECT_EQ
(
0x02
bytes
[
0x02
]
)
;
EXPECT_EQ
(
0xDE
bytes
[
0x03
]
)
;
auto
writer2
=
std
:
:
make_unique
<
Rel32WriterArm
<
AArch32Rel32Translator
:
:
AddrTraits_T11
>
>
(
translator
region
)
;
writer2
-
>
PutNext
(
{
0x0008U
0x0008U
}
)
;
EXPECT_EQ
(
0xFE
bytes
[
0x08
]
)
;
EXPECT_EQ
(
0xE7
bytes
[
0x09
]
)
;
writer2
-
>
PutNext
(
{
0x0008U
0x0010U
}
)
;
EXPECT_EQ
(
0x02
bytes
[
0x08
]
)
;
EXPECT_EQ
(
0xE0
bytes
[
0x09
]
)
;
auto
writer3
=
std
:
:
make_unique
<
Rel32WriterArm
<
AArch32Rel32Translator
:
:
AddrTraits_T20
>
>
(
translator
region
)
;
writer3
-
>
PutNext
(
{
0x000CU
0x000AU
}
)
;
EXPECT_EQ
(
0xBF
bytes
[
0x0C
]
)
;
EXPECT_EQ
(
0xF7
bytes
[
0x0D
]
)
;
EXPECT_EQ
(
0xFD
bytes
[
0x0E
]
)
;
EXPECT_EQ
(
0xAF
bytes
[
0x0F
]
)
;
writer3
-
>
PutNext
(
{
0x000CU
0x0010U
}
)
;
EXPECT_EQ
(
0x80
bytes
[
0x0C
]
)
;
EXPECT_EQ
(
0xF3
bytes
[
0x0D
]
)
;
EXPECT_EQ
(
0x00
bytes
[
0x0E
]
)
;
EXPECT_EQ
(
0x80
bytes
[
0x0F
]
)
;
}
TEST
(
Rel32UtilsTest
Rel32WriterArm_AArch32_Hard
)
{
constexpr
offset_t
kTestImageSize
=
0x10000000U
;
constexpr
rva_t
kRvaBegin
=
0x0C030000U
;
TestAddressTranslator
translator
(
kTestImageSize
kRvaBegin
)
;
std
:
:
vector
<
uint8_t
>
bytes
=
{
0xFF
0xFF
0x00
0xF0
0x00
0xB8
0xFF
0xFF
0xFF
0xFF
0x00
0xF0
0x7A
0xE8
0xFF
0xFF
0x00
0xF0
0x7A
0xE8
}
;
MutableBufferView
region
(
&
bytes
[
0
]
bytes
.
size
(
)
)
;
auto
writer
=
std
:
:
make_unique
<
Rel32WriterArm
<
AArch32Rel32Translator
:
:
AddrTraits_T24
>
>
(
translator
region
)
;
writer
-
>
PutNext
(
{
0x0002U
0x0000U
}
)
;
EXPECT_EQ
(
0xFF
bytes
[
0x02
]
)
;
EXPECT_EQ
(
0xF7
bytes
[
0x03
]
)
;
EXPECT_EQ
(
0xFD
bytes
[
0x04
]
)
;
EXPECT_EQ
(
0xBF
bytes
[
0x05
]
)
;
writer
-
>
PutNext
(
{
0x0002U
0x0008U
}
)
;
EXPECT_EQ
(
0x00
bytes
[
0x02
]
)
;
EXPECT_EQ
(
0xF0
bytes
[
0x03
]
)
;
EXPECT_EQ
(
0x01
bytes
[
0x04
]
)
;
EXPECT_EQ
(
0xB8
bytes
[
0x05
]
)
;
writer
-
>
PutNext
(
{
0x000AU
0x0010U
}
)
;
EXPECT_EQ
(
0x00
bytes
[
0x0A
]
)
;
EXPECT_EQ
(
0xF0
bytes
[
0x0B
]
)
;
EXPECT_EQ
(
0x02
bytes
[
0x0C
]
)
;
EXPECT_EQ
(
0xE8
bytes
[
0x0D
]
)
;
writer
-
>
PutNext
(
{
0x000AU
0x0100U
}
)
;
EXPECT_EQ
(
0x00
bytes
[
0x0A
]
)
;
EXPECT_EQ
(
0xF0
bytes
[
0x0B
]
)
;
EXPECT_EQ
(
0x7A
bytes
[
0x0C
]
)
;
EXPECT_EQ
(
0xE8
bytes
[
0x0D
]
)
;
writer
-
>
PutNext
(
{
0x000AU
0x0000U
}
)
;
EXPECT_EQ
(
0xFF
bytes
[
0x0A
]
)
;
EXPECT_EQ
(
0xF7
bytes
[
0x0B
]
)
;
EXPECT_EQ
(
0xFA
bytes
[
0x0C
]
)
;
EXPECT_EQ
(
0xEF
bytes
[
0x0D
]
)
;
writer
-
>
PutNext
(
{
0x0010U
0x0010U
}
)
;
EXPECT_EQ
(
0xFF
bytes
[
0x10
]
)
;
EXPECT_EQ
(
0xF7
bytes
[
0x11
]
)
;
EXPECT_EQ
(
0xFE
bytes
[
0x12
]
)
;
EXPECT_EQ
(
0xEF
bytes
[
0x13
]
)
;
writer
-
>
PutNext
(
{
0x0010U
0x0108U
}
)
;
EXPECT_EQ
(
0x00
bytes
[
0x10
]
)
;
EXPECT_EQ
(
0xF0
bytes
[
0x11
]
)
;
EXPECT_EQ
(
0x7A
bytes
[
0x12
]
)
;
EXPECT_EQ
(
0xE8
bytes
[
0x13
]
)
;
}
TEST
(
Rel32UtilsTest
AArch32SwitchToThumb2
)
{
constexpr
offset_t
kTestImageSize
=
0x10000000U
;
constexpr
rva_t
kRvaBegin
=
0x08030000U
;
TestAddressTranslator
translator
(
kTestImageSize
kRvaBegin
)
;
std
:
:
vector
<
uint8_t
>
bytes
=
{
0xFF
0xFF
0x00
0x00
0x00
0x00
0x00
0xFA
}
;
MutableBufferView
region
(
&
bytes
[
0
]
bytes
.
size
(
)
)
;
auto
writer
=
std
:
:
make_unique
<
Rel32WriterArm
<
AArch32Rel32Translator
:
:
AddrTraits_A24
>
>
(
translator
region
)
;
writer
-
>
PutNext
(
{
0x0004U
0x0100U
}
)
;
EXPECT_EQ
(
0x3D
bytes
[
0x04
]
)
;
EXPECT_EQ
(
0x00
bytes
[
0x05
]
)
;
EXPECT_EQ
(
0x00
bytes
[
0x06
]
)
;
EXPECT_EQ
(
0xFA
bytes
[
0x07
]
)
;
writer
-
>
PutNext
(
{
0x0004U
0x0052U
}
)
;
EXPECT_EQ
(
0x11
bytes
[
0x04
]
)
;
EXPECT_EQ
(
0x00
bytes
[
0x05
]
)
;
EXPECT_EQ
(
0x00
bytes
[
0x06
]
)
;
EXPECT_EQ
(
0xFB
bytes
[
0x07
]
)
;
writer
-
>
PutNext
(
{
0x0004U
0x000CU
}
)
;
EXPECT_EQ
(
0x00
bytes
[
0x04
]
)
;
EXPECT_EQ
(
0x00
bytes
[
0x05
]
)
;
EXPECT_EQ
(
0x00
bytes
[
0x06
]
)
;
EXPECT_EQ
(
0xFA
bytes
[
0x07
]
)
;
}
TEST
(
Rel32UtilsTest
ArmCopyDisp_AArch32
)
{
std
:
:
vector
<
uint8_t
>
expect_fail
;
ArmCopyDispFun
copier_A24
=
ArmCopyDisp
<
AArch32Rel32Translator
:
:
AddrTraits_A24
>
;
CheckCopy
(
{
0x12
0x34
0x56
0xEB
}
{
0xA0
0xC0
0x0E
0x2A
}
{
0x12
0x34
0x56
0x2A
}
{
0xA0
0xC0
0x0E
0xEB
}
copier_A24
)
;
ArmCopyDispFun
copier_T8
=
ArmCopyDisp
<
AArch32Rel32Translator
:
:
AddrTraits_T8
>
;
CheckCopy
(
{
0x12
0xD5
}
{
0xAB
0xD8
}
{
0x12
0xD8
}
{
0xAB
0xD5
}
copier_T8
)
;
ArmCopyDispFun
copier_T11
=
ArmCopyDisp
<
AArch32Rel32Translator
:
:
AddrTraits_T11
>
;
CheckCopy
(
{
0xF5
0xE0
}
{
0x12
0xE7
}
{
0xF5
0xE0
}
{
0x12
0xE7
}
copier_T11
)
;
CheckCopy
(
expect_fail
expect_fail
{
0xF5
0xE0
}
{
0x12
0xE7
}
copier_T8
)
;
ArmCopyDispFun
copier_T20
=
ArmCopyDisp
<
AArch32Rel32Translator
:
:
AddrTraits_T20
>
;
CheckCopy
(
{
0x41
0xF2
0xA5
0x88
}
{
0x04
0xF3
0x3C
0xA2
}
{
0x01
0xF3
0xA5
0x88
}
{
0x44
0xF2
0x3C
0xA2
}
copier_T20
)
;
CheckCopy
(
{
0x7F
0xF6
0xFF
0xAF
}
{
0x00
0xF3
0x00
0x80
}
{
0x3F
0xF7
0xFF
0xAF
}
{
0x40
0xF2
0x00
0x80
}
copier_T20
)
;
CheckCopy
(
expect_fail
expect_fail
{
0x41
0xF2
0xA5
0x88
}
{
0x84
0xF3
0x3C
0xA2
}
copier_A24
)
;
ArmCopyDispFun
copier_T24
=
ArmCopyDisp
<
AArch32Rel32Translator
:
:
AddrTraits_T24
>
;
CheckCopy
(
{
0xFF
0xF7
0xFF
0xFF
}
{
0x00
0xF0
0x00
0x90
}
{
0xFF
0xF7
0xFF
0xBF
}
{
0x00
0xF0
0x00
0xD0
}
copier_T24
)
;
CheckCopy
(
expect_fail
{
0x00
0xF0
0x00
0x90
}
{
0xFF
0xF7
0xFF
0xBF
}
{
0x00
0xF0
0x00
0xC0
}
copier_T24
)
;
CheckCopy
(
{
0xFF
0xF7
0xFE
0xEF
}
{
0x00
0xF0
0x00
0x90
}
{
0xFF
0xF7
0xFE
0xBF
}
{
0x00
0xF0
0x00
0xC0
}
copier_T24
)
;
}
TEST
(
Rel32UtilsTest
Rel32ReaderArm_AArch64
)
{
constexpr
offset_t
kTestImageSize
=
0x00100000U
;
constexpr
rva_t
kRvaBegin
=
0x00030000U
;
TestAddressTranslator
translator
(
kTestImageSize
kRvaBegin
)
;
std
:
:
vector
<
uint8_t
>
bytes
=
{
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x02
0x00
0x00
0x14
0xFF
0xFF
0xFF
0xFF
0x25
0x00
0x00
0x35
0xFF
0xFF
0xFF
0xFF
0xCA
0xFF
0xFF
0x54
0x4C
0xFF
0x8F
0x36
}
;
MutableBufferView
region
(
&
bytes
[
0
]
bytes
.
size
(
)
)
;
std
:
:
deque
<
offset_t
>
rel32_locations_Immd26
=
{
0x0008U
}
;
auto
reader1
=
std
:
:
make_unique
<
Rel32ReaderArm
<
AArch64Rel32Translator
:
:
AddrTraits_Immd26
>
>
(
translator
region
rel32_locations_Immd26
0x0000U
0x0020U
)
;
CheckReader
(
{
{
0x0008U
0x0010U
}
}
std
:
:
move
(
reader1
)
)
;
std
:
:
deque
<
offset_t
>
rel32_locations_Immd19
=
{
0x0010U
0x0018U
}
;
auto
reader2
=
std
:
:
make_unique
<
Rel32ReaderArm
<
AArch64Rel32Translator
:
:
AddrTraits_Immd19
>
>
(
translator
region
rel32_locations_Immd19
0x0000U
0x0020U
)
;
CheckReader
(
{
{
0x0010U
0x0014U
}
{
0x0018U
0x0010U
}
}
std
:
:
move
(
reader2
)
)
;
std
:
:
deque
<
offset_t
>
rel32_locations_Immd14
=
{
0x001CU
}
;
auto
reader3
=
std
:
:
make_unique
<
Rel32ReaderArm
<
AArch64Rel32Translator
:
:
AddrTraits_Immd14
>
>
(
translator
region
rel32_locations_Immd14
0x0000U
0x0020U
)
;
CheckReader
(
{
{
0x001CU
0x0004U
}
}
std
:
:
move
(
reader3
)
)
;
}
TEST
(
Rel32UtilsTest
Rel32WriterArm_AArch64
)
{
constexpr
offset_t
kTestImageSize
=
0x00100000U
;
constexpr
rva_t
kRvaBegin
=
0x00030000U
;
TestAddressTranslator
translator
(
kTestImageSize
kRvaBegin
)
;
std
:
:
vector
<
uint8_t
>
bytes
=
{
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0x02
0x00
0x00
0x14
0xFF
0xFF
0xFF
0xFF
0x25
0x00
0x00
0x35
0xFF
0xFF
0xFF
0xFF
0xCA
0xFF
0xFF
0x54
0x4C
0xFF
0x8F
0x36
}
;
MutableBufferView
region
(
&
bytes
[
0
]
bytes
.
size
(
)
)
;
auto
writer1
=
std
:
:
make_unique
<
Rel32WriterArm
<
AArch64Rel32Translator
:
:
AddrTraits_Immd26
>
>
(
translator
region
)
;
writer1
-
>
PutNext
(
{
0x0008U
0x0000U
}
)
;
EXPECT_EQ
(
0xFE
bytes
[
0x08
]
)
;
EXPECT_EQ
(
0xFF
bytes
[
0x09
]
)
;
EXPECT_EQ
(
0xFF
bytes
[
0x0A
]
)
;
EXPECT_EQ
(
0x17
bytes
[
0x0B
]
)
;
auto
writer2
=
std
:
:
make_unique
<
Rel32WriterArm
<
AArch64Rel32Translator
:
:
AddrTraits_Immd19
>
>
(
translator
region
)
;
writer2
-
>
PutNext
(
{
0x0010U
0x0000U
}
)
;
EXPECT_EQ
(
0x85
bytes
[
0x10
]
)
;
EXPECT_EQ
(
0xFF
bytes
[
0x11
]
)
;
EXPECT_EQ
(
0xFF
bytes
[
0x12
]
)
;
EXPECT_EQ
(
0x35
bytes
[
0x13
]
)
;
writer2
-
>
PutNext
(
{
0x0018U
0x001CU
}
)
;
EXPECT_EQ
(
0x2A
bytes
[
0x18
]
)
;
EXPECT_EQ
(
0x00
bytes
[
0x19
]
)
;
EXPECT_EQ
(
0x00
bytes
[
0x1A
]
)
;
EXPECT_EQ
(
0x54
bytes
[
0x1B
]
)
;
auto
writer3
=
std
:
:
make_unique
<
Rel32WriterArm
<
AArch64Rel32Translator
:
:
AddrTraits_Immd14
>
>
(
translator
region
)
;
writer3
-
>
PutNext
(
{
0x001CU
0x0010U
}
)
;
EXPECT_EQ
(
0xAC
bytes
[
0x1C
]
)
;
EXPECT_EQ
(
0xFF
bytes
[
0x1D
]
)
;
EXPECT_EQ
(
0x8F
bytes
[
0x1E
]
)
;
EXPECT_EQ
(
0x36
bytes
[
0x1F
]
)
;
}
TEST
(
Rel32UtilsTest
ArmCopyDisp_AArch64
)
{
std
:
:
vector
<
uint8_t
>
expect_fail
;
ArmCopyDispFun
copier_Immd26
=
ArmCopyDisp
<
AArch64Rel32Translator
:
:
AddrTraits_Immd26
>
;
CheckCopy
(
{
0x12
0x34
0x56
0x94
}
{
0xA1
0xC0
0x0E
0x17
}
{
0x12
0x34
0x56
0x14
}
{
0xA1
0xC0
0x0E
0x97
}
copier_Immd26
)
;
ArmCopyDispFun
copier_Immd19
=
ArmCopyDisp
<
AArch64Rel32Translator
:
:
AddrTraits_Immd19
>
;
CheckCopy
(
{
0x24
0x12
0x34
0x54
}
{
0xD7
0xA5
0xFC
0xB4
}
{
0x37
0x12
0x34
0xB4
}
{
0xC4
0xA5
0xFC
0x54
}
copier_Immd19
)
;
ArmCopyDispFun
copier_Immd14
=
ArmCopyDisp
<
AArch64Rel32Translator
:
:
AddrTraits_Immd14
>
;
CheckCopy
(
{
0x00
0x00
0x00
0x36
}
{
0xFF
0xFF
0xFF
0xB7
}
{
0x1F
0x00
0xF8
0xB7
}
{
0xE0
0xFF
0x07
0x36
}
copier_Immd14
)
;
CheckCopy
(
expect_fail
expect_fail
{
0x1F
0x00
0xF8
0xB7
}
{
0xE0
0xFF
0x07
0x36
}
copier_Immd26
)
;
}
}
