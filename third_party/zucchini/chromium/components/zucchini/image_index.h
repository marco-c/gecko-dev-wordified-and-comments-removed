#
ifndef
COMPONENTS_ZUCCHINI_IMAGE_INDEX_H_
#
define
COMPONENTS_ZUCCHINI_IMAGE_INDEX_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
vector
>
#
include
"
base
/
check_op
.
h
"
#
include
"
components
/
zucchini
/
buffer_view
.
h
"
#
include
"
components
/
zucchini
/
image_utils
.
h
"
#
include
"
components
/
zucchini
/
reference_set
.
h
"
#
include
"
components
/
zucchini
/
target_pool
.
h
"
namespace
zucchini
{
class
Disassembler
;
class
ImageIndex
{
public
:
explicit
ImageIndex
(
ConstBufferView
image
)
;
ImageIndex
(
const
ImageIndex
&
)
=
delete
;
ImageIndex
(
ImageIndex
&
&
)
;
~
ImageIndex
(
)
;
bool
Initialize
(
Disassembler
*
disasm
)
;
size_t
TypeCount
(
)
const
{
if
(
reference_sets_
.
empty
(
)
)
return
0U
;
return
reference_sets_
.
rbegin
(
)
-
>
first
.
value
(
)
+
1
;
}
size_t
PoolCount
(
)
const
{
if
(
target_pools_
.
empty
(
)
)
return
0U
;
return
target_pools_
.
rbegin
(
)
-
>
first
.
value
(
)
+
1
;
}
bool
IsToken
(
offset_t
location
)
const
;
bool
IsReference
(
offset_t
location
)
const
{
return
LookupType
(
location
)
!
=
kNoTypeTag
;
}
TypeTag
LookupType
(
offset_t
location
)
const
{
DCHECK_LT
(
location
size
(
)
)
;
return
type_tags_
[
location
]
;
}
uint8_t
GetRawValue
(
offset_t
location
)
const
{
DCHECK_LT
(
location
size
(
)
)
;
return
image_
[
location
]
;
}
const
std
:
:
map
<
PoolTag
TargetPool
>
&
target_pools
(
)
const
{
return
target_pools_
;
}
const
std
:
:
map
<
TypeTag
ReferenceSet
>
&
reference_sets
(
)
const
{
return
reference_sets_
;
}
const
TargetPool
&
pool
(
PoolTag
pool_tag
)
const
{
return
target_pools_
.
at
(
pool_tag
)
;
}
const
ReferenceSet
&
refs
(
TypeTag
type_tag
)
const
{
return
reference_sets_
.
at
(
type_tag
)
;
}
size_t
size
(
)
const
{
return
image_
.
size
(
)
;
}
private
:
bool
InsertReferences
(
const
ReferenceTypeTraits
&
traits
ReferenceReader
&
&
ref_reader
)
;
const
ConstBufferView
image_
;
std
:
:
vector
<
TypeTag
>
type_tags_
;
std
:
:
map
<
PoolTag
TargetPool
>
target_pools_
;
std
:
:
map
<
TypeTag
ReferenceSet
>
reference_sets_
;
}
;
}
#
endif
