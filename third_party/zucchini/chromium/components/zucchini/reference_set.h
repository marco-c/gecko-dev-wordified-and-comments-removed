#
ifndef
COMPONENTS_ZUCCHINI_REFERENCE_SET_H_
#
define
COMPONENTS_ZUCCHINI_REFERENCE_SET_H_
#
include
<
stddef
.
h
>
#
include
<
vector
>
#
include
"
base
/
memory
/
raw_ref
.
h
"
#
include
"
components
/
zucchini
/
image_utils
.
h
"
namespace
zucchini
{
class
TargetPool
;
class
ReferenceSet
{
public
:
using
const_iterator
=
std
:
:
vector
<
Reference
>
:
:
const_iterator
;
ReferenceSet
(
const
ReferenceTypeTraits
&
traits
const
TargetPool
&
target_pool
)
;
ReferenceSet
(
const
ReferenceSet
&
)
=
delete
;
ReferenceSet
(
ReferenceSet
&
&
)
;
~
ReferenceSet
(
)
;
void
InitReferences
(
ReferenceReader
&
&
ref_reader
)
;
void
InitReferences
(
const
std
:
:
vector
<
Reference
>
&
refs
)
;
const
std
:
:
vector
<
Reference
>
&
references
(
)
const
{
return
references_
;
}
const
ReferenceTypeTraits
&
traits
(
)
const
{
return
traits_
;
}
const
TargetPool
&
target_pool
(
)
const
{
return
*
target_pool_
;
}
TypeTag
type_tag
(
)
const
{
return
traits_
.
type_tag
;
}
PoolTag
pool_tag
(
)
const
{
return
traits_
.
pool_tag
;
}
offset_t
width
(
)
const
{
return
traits_
.
width
;
}
Reference
at
(
offset_t
offset
)
const
;
size_t
size
(
)
const
{
return
references_
.
size
(
)
;
}
const_iterator
begin
(
)
const
{
return
references_
.
begin
(
)
;
}
const_iterator
end
(
)
const
{
return
references_
.
end
(
)
;
}
private
:
ReferenceTypeTraits
traits_
;
const
raw_ref
<
const
TargetPool
>
target_pool_
;
std
:
:
vector
<
Reference
>
references_
;
}
;
}
#
endif
