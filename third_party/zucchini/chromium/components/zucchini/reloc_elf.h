#
ifndef
COMPONENTS_ZUCCHINI_RELOC_ELF_H_
#
define
COMPONENTS_ZUCCHINI_RELOC_ELF_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
base
/
memory
/
raw_ref
.
h
"
#
include
"
base
/
numerics
/
safe_conversions
.
h
"
#
include
"
components
/
zucchini
/
address_translator
.
h
"
#
include
"
components
/
zucchini
/
buffer_view
.
h
"
#
include
"
components
/
zucchini
/
image_utils
.
h
"
#
include
"
components
/
zucchini
/
type_elf
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
zucchini
{
struct
SectionDimensionsElf
{
SectionDimensionsElf
(
)
=
default
;
template
<
class
Elf_Shdr
>
explicit
SectionDimensionsElf
(
const
Elf_Shdr
&
section
)
:
region
(
BufferRegion
{
base
:
:
checked_cast
<
size_t
>
(
section
.
sh_offset
)
base
:
:
checked_cast
<
size_t
>
(
section
.
sh_size
)
}
)
entry_size
(
base
:
:
checked_cast
<
offset_t
>
(
section
.
sh_entsize
)
)
{
}
friend
bool
operator
<
(
const
SectionDimensionsElf
&
a
const
SectionDimensionsElf
&
b
)
{
return
a
.
region
.
offset
<
b
.
region
.
offset
;
}
friend
bool
operator
<
(
offset_t
offset
const
SectionDimensionsElf
&
section
)
{
return
offset
<
section
.
region
.
offset
;
}
BufferRegion
region
;
offset_t
entry_size
;
}
;
class
RelocReaderElf
:
public
ReferenceReader
{
public
:
RelocReaderElf
(
ConstBufferView
image
Bitness
bitness
const
std
:
:
vector
<
SectionDimensionsElf
>
&
reloc_section_dimensions
uint32_t
rel_type
offset_t
lo
offset_t
hi
const
AddressTranslator
&
translator
)
;
~
RelocReaderElf
(
)
override
;
rva_t
GetRelocationTarget
(
elf
:
:
Elf32_Rel
rel
)
const
;
rva_t
GetRelocationTarget
(
elf
:
:
Elf64_Rel
rel
)
const
;
absl
:
:
optional
<
Reference
>
GetNext
(
)
override
;
private
:
const
ConstBufferView
image_
;
const
Bitness
bitness_
;
const
uint32_t
rel_type_
;
const
raw_ref
<
const
std
:
:
vector
<
SectionDimensionsElf
>
>
reloc_section_dimensions_
;
std
:
:
vector
<
SectionDimensionsElf
>
:
:
const_iterator
cur_section_dimensions_
;
offset_t
hi_
;
offset_t
cursor_
;
AddressTranslator
:
:
RvaToOffsetCache
target_rva_to_offset_
;
}
;
class
RelocWriterElf
:
public
ReferenceWriter
{
public
:
RelocWriterElf
(
MutableBufferView
image
Bitness
bitness
const
AddressTranslator
&
translator
)
;
~
RelocWriterElf
(
)
override
;
void
PutNext
(
Reference
ref
)
override
;
private
:
MutableBufferView
image_
;
const
Bitness
bitness_
;
AddressTranslator
:
:
OffsetToRvaCache
target_offset_to_rva_
;
}
;
}
#
endif
