#
ifndef
COMPONENTS_ZUCCHINI_ABS32_UTILS_H_
#
define
COMPONENTS_ZUCCHINI_ABS32_UTILS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
deque
>
#
include
"
components
/
zucchini
/
address_translator
.
h
"
#
include
"
components
/
zucchini
/
buffer_view
.
h
"
#
include
"
components
/
zucchini
/
image_utils
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
zucchini
{
class
AbsoluteAddress
{
public
:
AbsoluteAddress
(
Bitness
bitness
uint64_t
image_base
)
;
AbsoluteAddress
(
AbsoluteAddress
&
&
)
;
~
AbsoluteAddress
(
)
;
bool
FromRva
(
rva_t
rva
)
;
rva_t
ToRva
(
)
const
;
bool
Read
(
offset_t
offset
const
ConstBufferView
&
image
)
;
bool
Write
(
offset_t
offset
MutableBufferView
*
image
)
;
uint32_t
width
(
)
const
{
return
WidthOf
(
bitness_
)
;
}
uint64_t
*
mutable_value
(
)
{
return
&
value_
;
}
private
:
const
Bitness
bitness_
;
const
uint64_t
image_base_
;
uint64_t
value_
;
}
;
class
Abs32RvaExtractorWin32
{
public
:
struct
Unit
{
offset_t
location
;
rva_t
target_rva
;
}
;
Abs32RvaExtractorWin32
(
ConstBufferView
image
AbsoluteAddress
&
&
addr
const
std
:
:
deque
<
offset_t
>
&
abs32_locations
offset_t
lo
offset_t
hi
)
;
Abs32RvaExtractorWin32
(
Abs32RvaExtractorWin32
&
&
)
;
~
Abs32RvaExtractorWin32
(
)
;
absl
:
:
optional
<
Unit
>
GetNext
(
)
;
private
:
ConstBufferView
image_
;
AbsoluteAddress
addr_
;
std
:
:
deque
<
offset_t
>
:
:
const_iterator
cur_abs32_
;
std
:
:
deque
<
offset_t
>
:
:
const_iterator
end_abs32_
;
}
;
class
Abs32ReaderWin32
:
public
ReferenceReader
{
public
:
Abs32ReaderWin32
(
Abs32RvaExtractorWin32
&
&
abs32_rva_extractor
const
AddressTranslator
&
translator
)
;
Abs32ReaderWin32
(
const
Abs32ReaderWin32
&
)
=
delete
;
const
Abs32ReaderWin32
&
operator
=
(
const
Abs32ReaderWin32
&
)
=
delete
;
~
Abs32ReaderWin32
(
)
override
;
absl
:
:
optional
<
Reference
>
GetNext
(
)
override
;
private
:
Abs32RvaExtractorWin32
abs32_rva_extractor_
;
AddressTranslator
:
:
RvaToOffsetCache
target_rva_to_offset_
;
}
;
class
Abs32WriterWin32
:
public
ReferenceWriter
{
public
:
Abs32WriterWin32
(
MutableBufferView
image
AbsoluteAddress
&
&
addr
const
AddressTranslator
&
translator
)
;
Abs32WriterWin32
(
const
Abs32WriterWin32
&
)
=
delete
;
const
Abs32WriterWin32
&
operator
=
(
const
Abs32WriterWin32
&
)
=
delete
;
~
Abs32WriterWin32
(
)
override
;
void
PutNext
(
Reference
ref
)
override
;
private
:
MutableBufferView
image_
;
AbsoluteAddress
addr_
;
AddressTranslator
:
:
OffsetToRvaCache
target_offset_to_rva_
;
}
;
size_t
RemoveUntranslatableAbs32
(
ConstBufferView
image
AbsoluteAddress
&
&
addr
const
AddressTranslator
&
translator
std
:
:
deque
<
offset_t
>
*
locations
)
;
size_t
RemoveOverlappingAbs32Locations
(
uint32_t
width
std
:
:
deque
<
offset_t
>
*
locations
)
;
}
#
endif
