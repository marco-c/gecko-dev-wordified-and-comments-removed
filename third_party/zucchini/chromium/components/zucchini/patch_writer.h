#
ifndef
COMPONENTS_ZUCCHINI_PATCH_WRITER_H_
#
define
COMPONENTS_ZUCCHINI_PATCH_WRITER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
base
/
check
.
h
"
#
include
"
components
/
zucchini
/
buffer_sink
.
h
"
#
include
"
components
/
zucchini
/
buffer_view
.
h
"
#
include
"
components
/
zucchini
/
image_utils
.
h
"
#
include
"
components
/
zucchini
/
patch_utils
.
h
"
#
include
"
third_party
/
abseil
-
cpp
/
absl
/
types
/
optional
.
h
"
namespace
zucchini
{
namespace
patch
{
bool
SerializeElementMatch
(
const
ElementMatch
&
element_match
BufferSink
*
sink
)
;
size_t
SerializedElementMatchSize
(
const
ElementMatch
&
element_match
)
;
bool
SerializeBuffer
(
const
std
:
:
vector
<
uint8_t
>
&
buffer
BufferSink
*
sink
)
;
size_t
SerializedBufferSize
(
const
std
:
:
vector
<
uint8_t
>
&
buffer
)
;
}
class
EquivalenceSink
{
public
:
EquivalenceSink
(
)
;
EquivalenceSink
(
const
std
:
:
vector
<
uint8_t
>
&
src_skip
const
std
:
:
vector
<
uint8_t
>
&
dst_skip
const
std
:
:
vector
<
uint8_t
>
&
copy_count
)
;
EquivalenceSink
(
EquivalenceSink
&
&
)
;
~
EquivalenceSink
(
)
;
void
PutNext
(
const
Equivalence
&
equivalence
)
;
size_t
SerializedSize
(
)
const
;
bool
SerializeInto
(
BufferSink
*
sink
)
const
;
private
:
std
:
:
vector
<
uint8_t
>
src_skip_
;
std
:
:
vector
<
uint8_t
>
dst_skip_
;
std
:
:
vector
<
uint8_t
>
copy_count_
;
offset_t
src_offset_
=
0
;
offset_t
dst_offset_
=
0
;
}
;
class
ExtraDataSink
{
public
:
ExtraDataSink
(
)
;
explicit
ExtraDataSink
(
const
std
:
:
vector
<
uint8_t
>
&
extra_data
)
;
ExtraDataSink
(
ExtraDataSink
&
&
)
;
~
ExtraDataSink
(
)
;
void
PutNext
(
ConstBufferView
region
)
;
size_t
SerializedSize
(
)
const
;
bool
SerializeInto
(
BufferSink
*
sink
)
const
;
private
:
std
:
:
vector
<
uint8_t
>
extra_data_
;
}
;
class
RawDeltaSink
{
public
:
RawDeltaSink
(
)
;
RawDeltaSink
(
const
std
:
:
vector
<
uint8_t
>
&
raw_delta_skip
const
std
:
:
vector
<
uint8_t
>
&
raw_delta_diff
)
;
RawDeltaSink
(
RawDeltaSink
&
&
)
;
~
RawDeltaSink
(
)
;
void
PutNext
(
const
RawDeltaUnit
&
delta
)
;
size_t
SerializedSize
(
)
const
;
bool
SerializeInto
(
BufferSink
*
sink
)
const
;
private
:
std
:
:
vector
<
uint8_t
>
raw_delta_skip_
;
std
:
:
vector
<
uint8_t
>
raw_delta_diff_
;
offset_t
copy_offset_compensation_
=
0
;
}
;
class
ReferenceDeltaSink
{
public
:
ReferenceDeltaSink
(
)
;
explicit
ReferenceDeltaSink
(
const
std
:
:
vector
<
uint8_t
>
&
reference_delta
)
;
ReferenceDeltaSink
(
ReferenceDeltaSink
&
&
)
;
~
ReferenceDeltaSink
(
)
;
void
PutNext
(
int32_t
diff
)
;
size_t
SerializedSize
(
)
const
;
bool
SerializeInto
(
BufferSink
*
sink
)
const
;
private
:
std
:
:
vector
<
uint8_t
>
reference_delta_
;
}
;
class
TargetSink
{
public
:
TargetSink
(
)
;
explicit
TargetSink
(
const
std
:
:
vector
<
uint8_t
>
&
extra_targets
)
;
TargetSink
(
TargetSink
&
&
)
;
~
TargetSink
(
)
;
void
PutNext
(
uint32_t
target
)
;
size_t
SerializedSize
(
)
const
;
bool
SerializeInto
(
BufferSink
*
sink
)
const
;
private
:
std
:
:
vector
<
uint8_t
>
extra_targets_
;
offset_t
target_compensation_
=
0
;
}
;
class
PatchElementWriter
{
public
:
PatchElementWriter
(
)
;
explicit
PatchElementWriter
(
ElementMatch
element_match
)
;
PatchElementWriter
(
PatchElementWriter
&
&
)
;
~
PatchElementWriter
(
)
;
const
ElementMatch
&
element_match
(
)
const
{
return
element_match_
;
}
const
Element
&
old_element
(
)
const
{
return
element_match_
.
old_element
;
}
const
Element
&
new_element
(
)
const
{
return
element_match_
.
new_element
;
}
void
SetEquivalenceSink
(
EquivalenceSink
&
&
equivalences
)
{
equivalences_
.
emplace
(
std
:
:
move
(
equivalences
)
)
;
}
void
SetExtraDataSink
(
ExtraDataSink
&
&
extra_data
)
{
extra_data_
.
emplace
(
std
:
:
move
(
extra_data
)
)
;
}
void
SetRawDeltaSink
(
RawDeltaSink
&
&
raw_delta
)
{
raw_delta_
.
emplace
(
std
:
:
move
(
raw_delta
)
)
;
}
void
SetReferenceDeltaSink
(
ReferenceDeltaSink
reference_delta
)
{
reference_delta_
.
emplace
(
std
:
:
move
(
reference_delta
)
)
;
}
void
SetTargetSink
(
PoolTag
pool_tag
TargetSink
&
&
extra_targets
)
{
DCHECK
(
pool_tag
!
=
kNoPoolTag
)
;
extra_targets_
.
emplace
(
pool_tag
std
:
:
move
(
extra_targets
)
)
;
}
size_t
SerializedSize
(
)
const
;
bool
SerializeInto
(
BufferSink
*
sink
)
const
;
private
:
ElementMatch
element_match_
;
absl
:
:
optional
<
EquivalenceSink
>
equivalences_
;
absl
:
:
optional
<
ExtraDataSink
>
extra_data_
;
absl
:
:
optional
<
RawDeltaSink
>
raw_delta_
;
absl
:
:
optional
<
ReferenceDeltaSink
>
reference_delta_
;
std
:
:
map
<
PoolTag
TargetSink
>
extra_targets_
;
}
;
class
EnsemblePatchWriter
{
public
:
explicit
EnsemblePatchWriter
(
const
PatchHeader
&
header
)
;
EnsemblePatchWriter
(
ConstBufferView
old_image
ConstBufferView
new_image
)
;
EnsemblePatchWriter
(
const
EnsemblePatchWriter
&
)
=
delete
;
const
EnsemblePatchWriter
&
operator
=
(
const
EnsemblePatchWriter
&
)
=
delete
;
~
EnsemblePatchWriter
(
)
;
void
ReserveElements
(
size_t
count
)
{
elements_
.
reserve
(
count
)
;
}
void
AddElement
(
PatchElementWriter
&
&
patch_element
)
;
size_t
SerializedSize
(
)
const
;
bool
SerializeInto
(
BufferSink
*
sink
)
const
;
bool
SerializeInto
(
MutableBufferView
buffer
)
const
{
BufferSink
sink
(
buffer
)
;
return
SerializeInto
(
&
sink
)
;
}
private
:
PatchHeader
header_
;
std
:
:
vector
<
PatchElementWriter
>
elements_
;
offset_t
current_dst_offset_
=
0
;
}
;
}
#
endif
