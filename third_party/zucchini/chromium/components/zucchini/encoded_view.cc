#
include
"
components
/
zucchini
/
encoded_view
.
h
"
#
include
<
algorithm
>
#
include
<
utility
>
#
include
"
base
/
check_op
.
h
"
namespace
zucchini
{
EncodedView
:
:
EncodedView
(
const
ImageIndex
&
image_index
)
:
image_index_
(
image_index
)
pool_infos_
(
image_index
.
PoolCount
(
)
)
{
}
EncodedView
:
:
~
EncodedView
(
)
=
default
;
EncodedView
:
:
value_type
EncodedView
:
:
Projection
(
offset_t
location
)
const
{
DCHECK_LT
(
location
image_index_
-
>
size
(
)
)
;
TypeTag
type
=
image_index_
-
>
LookupType
(
location
)
;
if
(
type
=
=
kNoTypeTag
)
{
return
image_index_
-
>
GetRawValue
(
location
)
;
}
const
ReferenceSet
&
ref_set
=
image_index_
-
>
refs
(
type
)
;
Reference
ref
=
ref_set
.
at
(
location
)
;
DCHECK_GE
(
location
ref
.
location
)
;
DCHECK_LT
(
location
ref
.
location
+
ref_set
.
width
(
)
)
;
if
(
location
!
=
ref
.
location
)
{
return
kReferencePaddingProjection
;
}
PoolTag
pool_tag
=
ref_set
.
pool_tag
(
)
;
const
auto
&
target_pool
=
ref_set
.
target_pool
(
)
;
DCHECK_EQ
(
target_pool
.
size
(
)
pool_infos_
[
pool_tag
.
value
(
)
]
.
labels
.
size
(
)
)
;
uint32_t
label
=
pool_infos_
[
pool_tag
.
value
(
)
]
.
labels
[
target_pool
.
KeyForOffset
(
ref
.
target
)
]
;
value_type
projection
=
label
;
projection
*
=
image_index_
-
>
TypeCount
(
)
;
projection
+
=
type
.
value
(
)
;
return
projection
+
kBaseReferenceProjection
;
}
size_t
EncodedView
:
:
Cardinality
(
)
const
{
size_t
max_width
=
0
;
for
(
const
auto
&
pool_info
:
pool_infos_
)
max_width
=
std
:
:
max
(
max_width
pool_info
.
bound
)
;
return
max_width
*
image_index_
-
>
TypeCount
(
)
+
kBaseReferenceProjection
;
}
void
EncodedView
:
:
SetLabels
(
PoolTag
pool
std
:
:
vector
<
uint32_t
>
&
&
labels
size_t
bound
)
{
DCHECK_EQ
(
labels
.
size
(
)
image_index_
-
>
pool
(
pool
)
.
size
(
)
)
;
DCHECK
(
labels
.
empty
(
)
|
|
*
max_element
(
labels
.
begin
(
)
labels
.
end
(
)
)
<
bound
)
;
pool_infos_
[
pool
.
value
(
)
]
.
labels
=
std
:
:
move
(
labels
)
;
pool_infos_
[
pool
.
value
(
)
]
.
bound
=
bound
;
}
EncodedView
:
:
PoolInfo
:
:
PoolInfo
(
)
=
default
;
EncodedView
:
:
PoolInfo
:
:
PoolInfo
(
PoolInfo
&
&
)
=
default
;
EncodedView
:
:
PoolInfo
:
:
~
PoolInfo
(
)
=
default
;
}
