#
ifndef
AOM_INTERNAL_AOM_CODEC_INTERNAL_H_
#
define
AOM_INTERNAL_AOM_CODEC_INTERNAL_H_
#
include
"
.
.
/
aom_decoder
.
h
"
#
include
"
.
.
/
aom_encoder
.
h
"
#
include
<
stdarg
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
AOM_CODEC_INTERNAL_ABI_VERSION
(
5
)
/
*
*
<
\
hideinitializer
*
/
typedef
struct
aom_codec_alg_priv
aom_codec_alg_priv_t
;
typedef
struct
aom_codec_priv_enc_mr_cfg
aom_codec_priv_enc_mr_cfg_t
;
typedef
aom_codec_err_t
(
*
aom_codec_init_fn_t
)
(
aom_codec_ctx_t
*
ctx
aom_codec_priv_enc_mr_cfg_t
*
data
)
;
typedef
aom_codec_err_t
(
*
aom_codec_destroy_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
)
;
typedef
aom_codec_err_t
(
*
aom_codec_peek_si_fn_t
)
(
const
uint8_t
*
data
size_t
data_sz
aom_codec_stream_info_t
*
si
)
;
typedef
aom_codec_err_t
(
*
aom_codec_get_si_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
aom_codec_stream_info_t
*
si
)
;
typedef
aom_codec_err_t
(
*
aom_codec_control_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
va_list
ap
)
;
typedef
const
struct
aom_codec_ctrl_fn_map
{
int
ctrl_id
;
aom_codec_control_fn_t
fn
;
}
aom_codec_ctrl_fn_map_t
;
typedef
aom_codec_err_t
(
*
aom_codec_decode_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
const
uint8_t
*
data
size_t
data_sz
void
*
user_priv
)
;
typedef
aom_image_t
*
(
*
aom_codec_get_frame_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
aom_codec_iter_t
*
iter
)
;
typedef
aom_codec_err_t
(
*
aom_codec_set_fb_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
aom_get_frame_buffer_cb_fn_t
cb_get
aom_release_frame_buffer_cb_fn_t
cb_release
void
*
cb_priv
)
;
typedef
aom_codec_err_t
(
*
aom_codec_encode_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
const
aom_image_t
*
img
aom_codec_pts_t
pts
unsigned
long
duration
aom_enc_frame_flags_t
flags
)
;
typedef
const
aom_codec_cx_pkt_t
*
(
*
aom_codec_get_cx_data_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
aom_codec_iter_t
*
iter
)
;
typedef
aom_codec_err_t
(
*
aom_codec_enc_config_set_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
const
aom_codec_enc_cfg_t
*
cfg
)
;
typedef
aom_fixed_buf_t
*
(
*
aom_codec_get_global_headers_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
)
;
typedef
aom_image_t
*
(
*
aom_codec_get_preview_frame_fn_t
)
(
aom_codec_alg_priv_t
*
ctx
)
;
typedef
aom_codec_err_t
(
*
aom_codec_enc_mr_get_mem_loc_fn_t
)
(
const
aom_codec_enc_cfg_t
*
cfg
void
*
*
mem_loc
)
;
typedef
const
struct
aom_codec_enc_cfg_map
{
int
usage
;
aom_codec_enc_cfg_t
cfg
;
}
aom_codec_enc_cfg_map_t
;
struct
aom_codec_iface
{
const
char
*
name
;
int
abi_version
;
aom_codec_caps_t
caps
;
aom_codec_init_fn_t
init
;
aom_codec_destroy_fn_t
destroy
;
aom_codec_ctrl_fn_map_t
*
ctrl_maps
;
struct
aom_codec_dec_iface
{
aom_codec_peek_si_fn_t
peek_si
;
aom_codec_get_si_fn_t
get_si
;
aom_codec_decode_fn_t
decode
;
aom_codec_get_frame_fn_t
get_frame
;
aom_codec_set_fb_fn_t
set_fb_fn
;
}
dec
;
struct
aom_codec_enc_iface
{
int
cfg_map_count
;
aom_codec_enc_cfg_map_t
*
cfg_maps
;
aom_codec_encode_fn_t
encode
;
aom_codec_get_cx_data_fn_t
get_cx_data
;
aom_codec_enc_config_set_fn_t
cfg_set
;
aom_codec_get_global_headers_fn_t
get_glob_hdrs
;
aom_codec_get_preview_frame_fn_t
get_preview
;
aom_codec_enc_mr_get_mem_loc_fn_t
mr_get_mem_loc
;
}
enc
;
}
;
typedef
struct
aom_codec_priv_cb_pair
{
union
{
aom_codec_put_frame_cb_fn_t
put_frame
;
aom_codec_put_slice_cb_fn_t
put_slice
;
}
u
;
void
*
user_priv
;
}
aom_codec_priv_cb_pair_t
;
struct
aom_codec_priv
{
const
char
*
err_detail
;
aom_codec_flags_t
init_flags
;
struct
{
aom_codec_priv_cb_pair_t
put_frame_cb
;
aom_codec_priv_cb_pair_t
put_slice_cb
;
}
dec
;
struct
{
aom_fixed_buf_t
cx_data_dst_buf
;
unsigned
int
cx_data_pad_before
;
unsigned
int
cx_data_pad_after
;
aom_codec_cx_pkt_t
cx_data_pkt
;
unsigned
int
total_encoders
;
}
enc
;
}
;
struct
aom_codec_priv_enc_mr_cfg
{
unsigned
int
mr_total_resolutions
;
unsigned
int
mr_encoder_id
;
struct
aom_rational
mr_down_sampling_factor
;
void
*
mr_low_res_mode_info
;
}
;
#
undef
AOM_CTRL_USE_TYPE
#
define
AOM_CTRL_USE_TYPE
(
id
typ
)
\
static
AOM_INLINE
typ
id
#
#
__value
(
va_list
args
)
{
return
va_arg
(
args
typ
)
;
}
#
undef
AOM_CTRL_USE_TYPE_DEPRECATED
#
define
AOM_CTRL_USE_TYPE_DEPRECATED
(
id
typ
)
\
static
AOM_INLINE
typ
id
#
#
__value
(
va_list
args
)
{
return
va_arg
(
args
typ
)
;
}
#
define
CAST
(
id
arg
)
id
#
#
__value
(
arg
)
#
define
CODEC_INTERFACE
(
id
)
\
aom_codec_iface_t
*
id
(
void
)
{
return
&
id
#
#
_algo
;
}
\
aom_codec_iface_t
id
#
#
_algo
struct
aom_codec_pkt_list
{
unsigned
int
cnt
;
unsigned
int
max
;
struct
aom_codec_cx_pkt
pkts
[
1
]
;
}
;
#
define
aom_codec_pkt_list_decl
(
n
)
\
union
{
\
struct
aom_codec_pkt_list
head
;
\
struct
{
\
struct
aom_codec_pkt_list
head
;
\
struct
aom_codec_cx_pkt
pkts
[
n
]
;
\
}
alloc
;
\
}
#
define
aom_codec_pkt_list_init
(
m
)
\
(
m
)
-
>
alloc
.
head
.
cnt
=
0
\
(
m
)
-
>
alloc
.
head
.
max
=
sizeof
(
(
m
)
-
>
alloc
.
pkts
)
/
sizeof
(
(
m
)
-
>
alloc
.
pkts
[
0
]
)
int
aom_codec_pkt_list_add
(
struct
aom_codec_pkt_list
*
const
struct
aom_codec_cx_pkt
*
)
;
const
aom_codec_cx_pkt_t
*
aom_codec_pkt_list_get
(
struct
aom_codec_pkt_list
*
list
aom_codec_iter_t
*
iter
)
;
#
include
<
stdio
.
h
>
#
include
<
setjmp
.
h
>
struct
aom_internal_error_info
{
aom_codec_err_t
error_code
;
int
has_detail
;
char
detail
[
80
]
;
int
setjmp
;
jmp_buf
jmp
;
}
;
#
define
CLANG_ANALYZER_NORETURN
#
if
defined
(
__has_feature
)
#
if
__has_feature
(
attribute_analyzer_noreturn
)
#
undef
CLANG_ANALYZER_NORETURN
#
define
CLANG_ANALYZER_NORETURN
__attribute__
(
(
analyzer_noreturn
)
)
#
endif
#
endif
void
aom_internal_error
(
struct
aom_internal_error_info
*
info
aom_codec_err_t
error
const
char
*
fmt
.
.
.
)
CLANG_ANALYZER_NORETURN
;
void
aom_merge_corrupted_flag
(
int
*
corrupted
int
value
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
