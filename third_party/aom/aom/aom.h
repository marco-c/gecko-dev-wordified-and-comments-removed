#
ifndef
AOM_AOM_H_
#
define
AOM_AOM_H_
#
include
"
.
/
aom_codec
.
h
"
#
include
"
.
/
aom_image
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
enum
aom_com_control_id
{
AOM_SET_REFERENCE
=
1
AOM_COPY_REFERENCE
=
2
AOM_SET_POSTPROC
=
3
AOM_SET_DBG_COLOR_REF_FRAME
=
4
AOM_SET_DBG_COLOR_MB_MODES
=
5
AOM_SET_DBG_COLOR_B_MODES
=
6
AOM_SET_DBG_DISPLAY_MV
=
7
AV1_GET_REFERENCE
=
128
AOM_COMMON_CTRL_ID_MAX
AV1_GET_NEW_FRAME_IMAGE
=
192
AOM_DECODER_CTRL_ID_START
=
256
}
;
enum
aom_postproc_level
{
AOM_NOFILTERING
=
0
AOM_DEBLOCK
=
1
<
<
0
AOM_DEMACROBLOCK
=
1
<
<
1
AOM_ADDNOISE
=
1
<
<
2
AOM_DEBUG_TXT_FRAME_INFO
=
1
<
<
3
AOM_DEBUG_TXT_MBLK_MODES
=
1
<
<
4
AOM_DEBUG_TXT_DC_DIFF
=
1
<
<
5
AOM_DEBUG_TXT_RATE_INFO
=
1
<
<
6
AOM_MFQE
=
1
<
<
10
}
;
typedef
struct
aom_postproc_cfg
{
int
post_proc_flag
;
int
deblocking_level
;
int
noise_level
;
}
aom_postproc_cfg_t
;
typedef
enum
aom_ref_frame_type
{
AOM_LAST_FRAME
=
1
AOM_GOLD_FRAME
=
2
AOM_ALTR_FRAME
=
4
}
aom_ref_frame_type_t
;
typedef
struct
aom_ref_frame
{
aom_ref_frame_type_t
frame_type
;
aom_image_t
img
;
}
aom_ref_frame_t
;
typedef
struct
av1_ref_frame
{
int
idx
;
aom_image_t
img
;
}
av1_ref_frame_t
;
AOM_CTRL_USE_TYPE
(
AOM_SET_REFERENCE
aom_ref_frame_t
*
)
#
define
AOM_CTRL_AOM_SET_REFERENCE
AOM_CTRL_USE_TYPE
(
AOM_COPY_REFERENCE
aom_ref_frame_t
*
)
#
define
AOM_CTRL_AOM_COPY_REFERENCE
AOM_CTRL_USE_TYPE
(
AOM_SET_POSTPROC
aom_postproc_cfg_t
*
)
#
define
AOM_CTRL_AOM_SET_POSTPROC
AOM_CTRL_USE_TYPE
(
AOM_SET_DBG_COLOR_REF_FRAME
int
)
#
define
AOM_CTRL_AOM_SET_DBG_COLOR_REF_FRAME
AOM_CTRL_USE_TYPE
(
AOM_SET_DBG_COLOR_MB_MODES
int
)
#
define
AOM_CTRL_AOM_SET_DBG_COLOR_MB_MODES
AOM_CTRL_USE_TYPE
(
AOM_SET_DBG_COLOR_B_MODES
int
)
#
define
AOM_CTRL_AOM_SET_DBG_COLOR_B_MODES
AOM_CTRL_USE_TYPE
(
AOM_SET_DBG_DISPLAY_MV
int
)
#
define
AOM_CTRL_AOM_SET_DBG_DISPLAY_MV
AOM_CTRL_USE_TYPE
(
AV1_GET_REFERENCE
av1_ref_frame_t
*
)
#
define
AOM_CTRL_AV1_GET_REFERENCE
AOM_CTRL_USE_TYPE
(
AV1_GET_NEW_FRAME_IMAGE
aom_image_t
*
)
#
define
AOM_CTRL_AV1_GET_NEW_FRAME_IMAGE
#
ifdef
__cplusplus
}
#
endif
#
endif
