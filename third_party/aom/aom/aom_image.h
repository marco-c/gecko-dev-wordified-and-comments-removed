#
ifndef
AOM_AOM_AOM_IMAGE_H_
#
define
AOM_AOM_AOM_IMAGE_H_
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
"
aom
/
aom_integer
.
h
"
#
define
AOM_IMAGE_ABI_VERSION
(
9
)
/
*
*
<
\
hideinitializer
*
/
#
define
AOM_IMG_FMT_PLANAR
0x100
/
*
*
<
Image
is
a
planar
format
.
*
/
#
define
AOM_IMG_FMT_UV_FLIP
0x200
/
*
*
<
V
plane
precedes
U
in
memory
.
*
/
#
define
AOM_IMG_FMT_HIGHBITDEPTH
0x800
/
*
*
<
Image
uses
16bit
framebuffer
.
*
/
typedef
enum
aom_img_fmt
{
AOM_IMG_FMT_NONE
AOM_IMG_FMT_YV12
=
AOM_IMG_FMT_PLANAR
|
AOM_IMG_FMT_UV_FLIP
|
1
AOM_IMG_FMT_I420
=
AOM_IMG_FMT_PLANAR
|
2
AOM_IMG_FMT_AOMYV12
=
AOM_IMG_FMT_PLANAR
|
AOM_IMG_FMT_UV_FLIP
|
3
AOM_IMG_FMT_AOMI420
=
AOM_IMG_FMT_PLANAR
|
4
AOM_IMG_FMT_I422
=
AOM_IMG_FMT_PLANAR
|
5
AOM_IMG_FMT_I444
=
AOM_IMG_FMT_PLANAR
|
6
#
define
AOM_HAVE_IMG_FMT_NV12
1
AOM_IMG_FMT_NV12
=
AOM_IMG_FMT_PLANAR
|
7
AOM_IMG_FMT_I42016
=
AOM_IMG_FMT_I420
|
AOM_IMG_FMT_HIGHBITDEPTH
AOM_IMG_FMT_YV1216
=
AOM_IMG_FMT_YV12
|
AOM_IMG_FMT_HIGHBITDEPTH
AOM_IMG_FMT_I42216
=
AOM_IMG_FMT_I422
|
AOM_IMG_FMT_HIGHBITDEPTH
AOM_IMG_FMT_I44416
=
AOM_IMG_FMT_I444
|
AOM_IMG_FMT_HIGHBITDEPTH
}
aom_img_fmt_t
;
typedef
enum
aom_color_primaries
{
AOM_CICP_CP_RESERVED_0
=
0
AOM_CICP_CP_BT_709
=
1
AOM_CICP_CP_UNSPECIFIED
=
2
AOM_CICP_CP_RESERVED_3
=
3
AOM_CICP_CP_BT_470_M
=
4
AOM_CICP_CP_BT_470_B_G
=
5
AOM_CICP_CP_BT_601
=
6
AOM_CICP_CP_SMPTE_240
=
7
AOM_CICP_CP_GENERIC_FILM
=
8
AOM_CICP_CP_BT_2020
=
9
AOM_CICP_CP_XYZ
=
10
AOM_CICP_CP_SMPTE_431
=
11
AOM_CICP_CP_SMPTE_432
=
12
AOM_CICP_CP_RESERVED_13
=
13
AOM_CICP_CP_EBU_3213
=
22
AOM_CICP_CP_RESERVED_23
=
23
}
aom_color_primaries_t
;
typedef
enum
aom_transfer_characteristics
{
AOM_CICP_TC_RESERVED_0
=
0
AOM_CICP_TC_BT_709
=
1
AOM_CICP_TC_UNSPECIFIED
=
2
AOM_CICP_TC_RESERVED_3
=
3
AOM_CICP_TC_BT_470_M
=
4
AOM_CICP_TC_BT_470_B_G
=
5
AOM_CICP_TC_BT_601
=
6
AOM_CICP_TC_SMPTE_240
=
7
AOM_CICP_TC_LINEAR
=
8
AOM_CICP_TC_LOG_100
=
9
AOM_CICP_TC_LOG_100_SQRT10
=
10
AOM_CICP_TC_IEC_61966
=
11
AOM_CICP_TC_BT_1361
=
12
AOM_CICP_TC_SRGB
=
13
AOM_CICP_TC_BT_2020_10_BIT
=
14
AOM_CICP_TC_BT_2020_12_BIT
=
15
AOM_CICP_TC_SMPTE_2084
=
16
AOM_CICP_TC_SMPTE_428
=
17
AOM_CICP_TC_HLG
=
18
AOM_CICP_TC_RESERVED_19
=
19
}
aom_transfer_characteristics_t
;
typedef
enum
aom_matrix_coefficients
{
AOM_CICP_MC_IDENTITY
=
0
AOM_CICP_MC_BT_709
=
1
AOM_CICP_MC_UNSPECIFIED
=
2
AOM_CICP_MC_RESERVED_3
=
3
AOM_CICP_MC_FCC
=
4
AOM_CICP_MC_BT_470_B_G
=
5
AOM_CICP_MC_BT_601
=
6
AOM_CICP_MC_SMPTE_240
=
7
AOM_CICP_MC_SMPTE_YCGCO
=
8
AOM_CICP_MC_BT_2020_NCL
=
9
AOM_CICP_MC_BT_2020_CL
=
10
AOM_CICP_MC_SMPTE_2085
=
11
AOM_CICP_MC_CHROMAT_NCL
=
12
AOM_CICP_MC_CHROMAT_CL
=
13
AOM_CICP_MC_ICTCP
=
14
AOM_CICP_MC_RESERVED_15
=
15
}
aom_matrix_coefficients_t
;
typedef
enum
aom_color_range
{
AOM_CR_STUDIO_RANGE
=
0
AOM_CR_FULL_RANGE
=
1
}
aom_color_range_t
;
typedef
enum
aom_chroma_sample_position
{
AOM_CSP_UNKNOWN
=
0
AOM_CSP_VERTICAL
=
1
AOM_CSP_COLOCATED
=
2
AOM_CSP_RESERVED
=
3
}
aom_chroma_sample_position_t
;
typedef
enum
aom_metadata_insert_flags
{
AOM_MIF_NON_KEY_FRAME
=
0
AOM_MIF_KEY_FRAME
=
1
AOM_MIF_ANY_FRAME
=
2
AOM_MIF_NON_KEY_FRAME_LAYER_SPECIFIC
=
16
AOM_MIF_KEY_FRAME_LAYER_SPECIFIC
=
17
AOM_MIF_ANY_FRAME_LAYER_SPECIFIC
=
18
}
aom_metadata_insert_flags_t
;
typedef
struct
aom_metadata_array
aom_metadata_array_t
;
typedef
struct
aom_metadata
{
uint32_t
type
;
uint8_t
*
payload
;
size_t
sz
;
aom_metadata_insert_flags_t
insert_flag
;
}
aom_metadata_t
;
typedef
struct
aom_image
{
aom_img_fmt_t
fmt
;
aom_color_primaries_t
cp
;
aom_transfer_characteristics_t
tc
;
aom_matrix_coefficients_t
mc
;
int
monochrome
;
aom_chroma_sample_position_t
csp
;
aom_color_range_t
range
;
unsigned
int
w
;
unsigned
int
h
;
unsigned
int
bit_depth
;
unsigned
int
d_w
;
unsigned
int
d_h
;
unsigned
int
r_w
;
unsigned
int
r_h
;
unsigned
int
x_chroma_shift
;
unsigned
int
y_chroma_shift
;
#
define
AOM_PLANE_PACKED
0
/
*
*
<
To
be
used
for
all
packed
formats
*
/
#
define
AOM_PLANE_Y
0
/
*
*
<
Y
(
Luminance
)
plane
*
/
#
define
AOM_PLANE_U
1
/
*
*
<
U
(
Chroma
)
plane
*
/
#
define
AOM_PLANE_V
2
/
*
*
<
V
(
Chroma
)
plane
*
/
unsigned
char
*
planes
[
3
]
;
int
stride
[
3
]
;
size_t
sz
;
int
bps
;
int
temporal_id
;
int
spatial_id
;
void
*
user_priv
;
unsigned
char
*
img_data
;
int
img_data_owner
;
int
self_allocd
;
aom_metadata_array_t
*
metadata
;
void
*
fb_priv
;
}
aom_image_t
;
aom_image_t
*
aom_img_alloc
(
aom_image_t
*
img
aom_img_fmt_t
fmt
unsigned
int
d_w
unsigned
int
d_h
unsigned
int
align
)
;
aom_image_t
*
aom_img_wrap
(
aom_image_t
*
img
aom_img_fmt_t
fmt
unsigned
int
d_w
unsigned
int
d_h
unsigned
int
stride_align
unsigned
char
*
img_data
)
;
aom_image_t
*
aom_img_alloc_with_border
(
aom_image_t
*
img
aom_img_fmt_t
fmt
unsigned
int
d_w
unsigned
int
d_h
unsigned
int
align
unsigned
int
size_align
unsigned
int
border
)
;
int
aom_img_set_rect
(
aom_image_t
*
img
unsigned
int
x
unsigned
int
y
unsigned
int
w
unsigned
int
h
unsigned
int
border
)
;
void
aom_img_flip
(
aom_image_t
*
img
)
;
void
aom_img_free
(
aom_image_t
*
img
)
;
int
aom_img_plane_width
(
const
aom_image_t
*
img
int
plane
)
;
int
aom_img_plane_height
(
const
aom_image_t
*
img
int
plane
)
;
int
aom_img_add_metadata
(
aom_image_t
*
img
uint32_t
type
const
uint8_t
*
data
size_t
sz
aom_metadata_insert_flags_t
insert_flag
)
;
const
aom_metadata_t
*
aom_img_get_metadata
(
const
aom_image_t
*
img
size_t
index
)
;
size_t
aom_img_num_metadata
(
const
aom_image_t
*
img
)
;
void
aom_img_remove_metadata
(
aom_image_t
*
img
)
;
aom_metadata_t
*
aom_img_metadata_alloc
(
uint32_t
type
const
uint8_t
*
data
size_t
sz
aom_metadata_insert_flags_t
insert_flag
)
;
void
aom_img_metadata_free
(
aom_metadata_t
*
metadata
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
