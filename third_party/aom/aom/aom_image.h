#
ifndef
AOM_AOM_IMAGE_H_
#
define
AOM_AOM_IMAGE_H_
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
AOM_IMAGE_ABI_VERSION
(
4
)
/
*
*
<
\
hideinitializer
*
/
#
define
AOM_IMG_FMT_PLANAR
0x100
/
*
*
<
Image
is
a
planar
format
.
*
/
#
define
AOM_IMG_FMT_UV_FLIP
0x200
/
*
*
<
V
plane
precedes
U
in
memory
.
*
/
#
define
AOM_IMG_FMT_HAS_ALPHA
0x400
/
*
*
<
Image
has
an
alpha
channel
.
*
/
#
define
AOM_IMG_FMT_HIGHBITDEPTH
0x800
/
*
*
<
Image
uses
16bit
framebuffer
.
*
/
#
include
"
.
/
aom_config
.
h
"
typedef
enum
aom_img_fmt
{
AOM_IMG_FMT_NONE
AOM_IMG_FMT_RGB24
AOM_IMG_FMT_RGB32
AOM_IMG_FMT_RGB565
AOM_IMG_FMT_RGB555
AOM_IMG_FMT_UYVY
AOM_IMG_FMT_YUY2
AOM_IMG_FMT_YVYU
AOM_IMG_FMT_BGR24
AOM_IMG_FMT_RGB32_LE
AOM_IMG_FMT_ARGB
AOM_IMG_FMT_ARGB_LE
AOM_IMG_FMT_RGB565_LE
AOM_IMG_FMT_RGB555_LE
AOM_IMG_FMT_YV12
=
AOM_IMG_FMT_PLANAR
|
AOM_IMG_FMT_UV_FLIP
|
1
AOM_IMG_FMT_I420
=
AOM_IMG_FMT_PLANAR
|
2
AOM_IMG_FMT_AOMYV12
=
AOM_IMG_FMT_PLANAR
|
AOM_IMG_FMT_UV_FLIP
|
3
AOM_IMG_FMT_AOMI420
=
AOM_IMG_FMT_PLANAR
|
4
AOM_IMG_FMT_I422
=
AOM_IMG_FMT_PLANAR
|
5
AOM_IMG_FMT_I444
=
AOM_IMG_FMT_PLANAR
|
6
AOM_IMG_FMT_I440
=
AOM_IMG_FMT_PLANAR
|
7
AOM_IMG_FMT_444A
=
AOM_IMG_FMT_PLANAR
|
AOM_IMG_FMT_HAS_ALPHA
|
6
AOM_IMG_FMT_I42016
=
AOM_IMG_FMT_I420
|
AOM_IMG_FMT_HIGHBITDEPTH
AOM_IMG_FMT_I42216
=
AOM_IMG_FMT_I422
|
AOM_IMG_FMT_HIGHBITDEPTH
AOM_IMG_FMT_I44416
=
AOM_IMG_FMT_I444
|
AOM_IMG_FMT_HIGHBITDEPTH
AOM_IMG_FMT_I44016
=
AOM_IMG_FMT_I440
|
AOM_IMG_FMT_HIGHBITDEPTH
}
aom_img_fmt_t
;
typedef
enum
aom_color_space
{
AOM_CS_UNKNOWN
=
0
AOM_CS_BT_601
=
1
AOM_CS_BT_709
=
2
AOM_CS_SMPTE_170
=
3
AOM_CS_SMPTE_240
=
4
#
if
CONFIG_COLORSPACE_HEADERS
AOM_CS_BT_2020_NCL
=
5
AOM_CS_BT_2020_CL
=
6
AOM_CS_SRGB
=
7
AOM_CS_ICTCP
=
8
AOM_CS_RESERVED
=
9
#
else
AOM_CS_BT_2020
=
5
AOM_CS_RESERVED
=
6
AOM_CS_SRGB
=
7
#
endif
}
aom_color_space_t
;
#
if
CONFIG_COLORSPACE_HEADERS
typedef
enum
aom_transfer_function
{
AOM_TF_UNKNOWN
=
0
AOM_TF_BT_709
=
1
AOM_TF_PQ
=
2
AOM_TF_HLG
=
3
AOM_TF_RESERVED
=
4
}
aom_transfer_function_t
;
#
endif
typedef
enum
aom_color_range
{
AOM_CR_STUDIO_RANGE
=
0
AOM_CR_FULL_RANGE
=
1
}
aom_color_range_t
;
#
if
CONFIG_COLORSPACE_HEADERS
typedef
enum
aom_chroma_sample_position
{
AOM_CSP_UNKNOWN
=
0
AOM_CSP_VERTICAL
=
1
AOM_CSP_COLOCATED
=
2
AOM_CSP_RESERVED
=
3
}
aom_chroma_sample_position_t
;
#
endif
typedef
struct
aom_image
{
aom_img_fmt_t
fmt
;
aom_color_space_t
cs
;
#
if
CONFIG_COLORSPACE_HEADERS
aom_transfer_function_t
tf
;
aom_chroma_sample_position_t
csp
;
#
endif
aom_color_range_t
range
;
unsigned
int
w
;
unsigned
int
h
;
unsigned
int
bit_depth
;
unsigned
int
d_w
;
unsigned
int
d_h
;
unsigned
int
r_w
;
unsigned
int
r_h
;
unsigned
int
x_chroma_shift
;
unsigned
int
y_chroma_shift
;
#
define
AOM_PLANE_PACKED
0
/
*
*
<
To
be
used
for
all
packed
formats
*
/
#
define
AOM_PLANE_Y
0
/
*
*
<
Y
(
Luminance
)
plane
*
/
#
define
AOM_PLANE_U
1
/
*
*
<
U
(
Chroma
)
plane
*
/
#
define
AOM_PLANE_V
2
/
*
*
<
V
(
Chroma
)
plane
*
/
#
define
AOM_PLANE_ALPHA
3
/
*
*
<
A
(
Transparency
)
plane
*
/
unsigned
char
*
planes
[
4
]
;
int
stride
[
4
]
;
int
bps
;
void
*
user_priv
;
unsigned
char
*
img_data
;
int
img_data_owner
;
int
self_allocd
;
void
*
fb_priv
;
}
aom_image_t
;
typedef
struct
aom_image_rect
{
unsigned
int
x
;
unsigned
int
y
;
unsigned
int
w
;
unsigned
int
h
;
}
aom_image_rect_t
;
aom_image_t
*
aom_img_alloc
(
aom_image_t
*
img
aom_img_fmt_t
fmt
unsigned
int
d_w
unsigned
int
d_h
unsigned
int
align
)
;
aom_image_t
*
aom_img_wrap
(
aom_image_t
*
img
aom_img_fmt_t
fmt
unsigned
int
d_w
unsigned
int
d_h
unsigned
int
align
unsigned
char
*
img_data
)
;
int
aom_img_set_rect
(
aom_image_t
*
img
unsigned
int
x
unsigned
int
y
unsigned
int
w
unsigned
int
h
)
;
void
aom_img_flip
(
aom_image_t
*
img
)
;
void
aom_img_free
(
aom_image_t
*
img
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
