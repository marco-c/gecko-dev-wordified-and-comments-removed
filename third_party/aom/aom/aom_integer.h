#
ifndef
AOM_AOM_INTEGER_H_
#
define
AOM_AOM_INTEGER_H_
#
include
<
stddef
.
h
>
#
if
defined
(
_MSC_VER
)
#
define
AOM_FORCE_INLINE
__forceinline
#
define
AOM_INLINE
__inline
#
else
#
define
AOM_FORCE_INLINE
__inline__
__attribute__
(
(
always_inline
)
)
#
define
AOM_INLINE
inline
#
endif
#
if
defined
(
AOM_EMULATE_INTTYPES
)
typedef
signed
char
int8_t
;
typedef
signed
short
int16_t
;
typedef
signed
int
int32_t
;
typedef
unsigned
char
uint8_t
;
typedef
unsigned
short
uint16_t
;
typedef
unsigned
int
uint32_t
;
#
ifndef
_UINTPTR_T_DEFINED
typedef
size_t
uintptr_t
;
#
endif
#
else
#
if
defined
(
__cplusplus
)
#
if
!
defined
(
__STDC_FORMAT_MACROS
)
#
define
__STDC_FORMAT_MACROS
#
endif
#
if
!
defined
(
__STDC_LIMIT_MACROS
)
#
define
__STDC_LIMIT_MACROS
#
endif
#
endif
#
include
<
stdint
.
h
>
#
endif
#
if
defined
(
_MSC_VER
)
&
&
_MSC_VER
<
1800
#
define
PRId64
"
I64d
"
#
else
#
include
<
inttypes
.
h
>
#
endif
#
define
NELEMENTS
(
x
)
(
int
)
(
sizeof
(
x
)
/
sizeof
(
x
[
0
]
)
)
#
endif
