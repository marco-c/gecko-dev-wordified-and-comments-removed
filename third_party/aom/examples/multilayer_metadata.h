#
ifndef
AOM_EXAMPLES_MULTILAYER_METADATA_H_
#
define
AOM_EXAMPLES_MULTILAYER_METADATA_H_
#
include
<
cstdint
>
#
include
<
utility
>
#
include
<
vector
>
namespace
libaom_examples
{
struct
ColorProperties
{
bool
color_range
;
uint8_t
color_primaries
;
uint8_t
transfer_characteristics
;
uint8_t
matrix_coefficients
;
}
;
enum
AlphaUse
{
ALPHA_STRAIGHT
=
0
ALPHA_PREMULTIPLIED
=
1
ALPHA_UNSPECIFIED
=
2
}
;
struct
AlphaInformation
{
AlphaUse
alpha_use_idc
;
bool
alpha_simple_flag
;
uint8_t
alpha_bit_depth
;
uint8_t
alpha_clip_idc
;
bool
alpha_incr_flag
;
uint16_t
alpha_transparent_value
;
uint16_t
alpha_opaque_value
;
std
:
:
pair
<
ColorProperties
bool
>
alpha_color_description
;
}
;
struct
DepthRepresentationElement
{
bool
sign_flag
;
uint8_t
exponent
;
uint8_t
mantissa_len
;
uint32_t
mantissa
;
}
;
struct
DepthInformation
{
std
:
:
pair
<
DepthRepresentationElement
bool
>
z_near
;
std
:
:
pair
<
DepthRepresentationElement
bool
>
z_far
;
std
:
:
pair
<
DepthRepresentationElement
bool
>
d_min
;
std
:
:
pair
<
DepthRepresentationElement
bool
>
d_max
;
uint8_t
depth_representation_type
;
uint8_t
disparity_ref_view_id
;
}
;
enum
MultilayerUseCase
{
MULTILAYER_USE_CASE_UNSPECIFIED
=
0
MULTILAYER_USE_CASE_GLOBAL_ALPHA
=
1
MULTILAYER_USE_CASE_GLOBAL_DEPTH
=
2
MULTILAYER_USE_CASE_ALPHA
=
3
MULTILAYER_USE_CASE_DEPTH
=
4
MULTILAYER_USE_CASE_STEREO
=
5
MULTILAYER_USE_CASE_STEREO_GLOBAL_ALPHA
=
6
MULTILAYER_USE_CASE_STEREO_GLOBAL_DEPTH
=
7
MULTILAYER_USE_CASE_STEREO_ALPHA
=
8
MULTILAYER_USE_CASE_STEREO_DEPTH
=
9
MULTILAYER_USE_CASE_444_GLOBAL_ALPHA
=
10
MULTILAYER_USE_CASE_444_GLOBAL_DEPTH
=
11
MULTILAYER_USE_CASE_444
=
12
MULTILAYER_USE_CASE_420_444
=
13
}
;
enum
LayerType
{
MULTILAYER_LAYER_TYPE_UNSPECIFIED
=
0
MULTILAYER_LAYER_TYPE_TEXTURE
=
1
MULTILAYER_LAYER_TYPE_TEXTURE_1
=
2
MULTILAYER_LAYER_TYPE_TEXTURE_2
=
3
MULTILAYER_LAYER_TYPE_TEXTURE_3
=
4
MULTILAYER_LAYER_TYPE_ALPHA
=
5
MULTILAYER_LAYER_TYPE_DEPTH
=
6
}
;
enum
MultilayerMetadataScope
{
SCOPE_UNSPECIFIED
=
0
SCOPE_LOCAL
=
1
SCOPE_GLOBAL
=
2
SCOPE_MIXED
=
3
}
;
enum
MultilayerViewType
{
VIEW_UNSPECIFIED
=
0
VIEW_CENTER
=
1
VIEW_LEFT
=
2
VIEW_RIGHT
=
3
}
;
struct
FrameLocalMetadata
{
long
frame_idx
;
AlphaInformation
alpha
;
DepthInformation
depth
;
}
;
struct
LayerMetadata
{
LayerType
layer_type
;
bool
luma_plane_only_flag
;
MultilayerViewType
layer_view_type
;
uint8_t
group_id
;
uint8_t
layer_dependency_idc
;
MultilayerMetadataScope
layer_metadata_scope
;
std
:
:
pair
<
ColorProperties
bool
>
layer_color_description
;
AlphaInformation
alpha
;
DepthInformation
depth
;
std
:
:
vector
<
FrameLocalMetadata
>
local_metadata
;
}
;
struct
MultilayerMetadata
{
MultilayerUseCase
use_case
;
std
:
:
vector
<
LayerMetadata
>
layers
;
}
;
bool
parse_multilayer_file
(
const
char
*
metadata_path
MultilayerMetadata
*
multilayer
)
;
void
print_multilayer_metadata
(
const
MultilayerMetadata
&
multilayer
)
;
bool
double_to_depth_representation_element
(
double
v
DepthRepresentationElement
*
element
)
;
double
depth_representation_element_to_double
(
const
DepthRepresentationElement
&
e
)
;
}
#
endif
