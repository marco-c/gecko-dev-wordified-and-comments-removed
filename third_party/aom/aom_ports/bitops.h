#
ifndef
AOM_AOM_PORTS_BITOPS_H_
#
define
AOM_AOM_PORTS_BITOPS_H_
#
include
<
assert
.
h
>
#
include
"
aom_ports
/
msvc
.
h
"
#
include
"
config
/
aom_config
.
h
"
#
ifdef
_MSC_VER
#
if
defined
(
_M_X64
)
|
|
defined
(
_M_IX86
)
#
include
<
intrin
.
h
>
#
define
USE_MSC_INTRINSICS
#
endif
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
if
defined
(
__GNUC__
)
&
&
\
(
(
__GNUC__
=
=
3
&
&
__GNUC_MINOR__
>
=
4
)
|
|
__GNUC__
>
=
4
)
static
INLINE
int
get_msb
(
unsigned
int
n
)
{
assert
(
n
!
=
0
)
;
return
31
^
__builtin_clz
(
n
)
;
}
#
elif
defined
(
USE_MSC_INTRINSICS
)
#
pragma
intrinsic
(
_BitScanReverse
)
static
INLINE
int
get_msb
(
unsigned
int
n
)
{
unsigned
long
first_set_bit
;
assert
(
n
!
=
0
)
;
_BitScanReverse
(
&
first_set_bit
n
)
;
return
first_set_bit
;
}
#
undef
USE_MSC_INTRINSICS
#
else
static
INLINE
int
get_msb
(
unsigned
int
n
)
{
int
log
=
0
;
unsigned
int
value
=
n
;
int
i
;
assert
(
n
!
=
0
)
;
for
(
i
=
4
;
i
>
=
0
;
-
-
i
)
{
const
int
shift
=
(
1
<
<
i
)
;
const
unsigned
int
x
=
value
>
>
shift
;
if
(
x
!
=
0
)
{
value
=
x
;
log
+
=
shift
;
}
}
return
log
;
}
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
