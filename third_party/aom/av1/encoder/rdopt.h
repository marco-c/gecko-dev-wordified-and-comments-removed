#
ifndef
AOM_AV1_ENCODER_RDOPT_H_
#
define
AOM_AV1_ENCODER_RDOPT_H_
#
include
<
stdbool
.
h
>
#
include
"
av1
/
common
/
blockd
.
h
"
#
include
"
av1
/
common
/
txb_common
.
h
"
#
include
"
av1
/
encoder
/
block
.
h
"
#
include
"
av1
/
encoder
/
context_tree
.
h
"
#
include
"
av1
/
encoder
/
encoder
.
h
"
#
include
"
av1
/
encoder
/
encodetxb
.
h
"
#
include
"
av1
/
encoder
/
rdopt_utils
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
COMP_TYPE_RD_THRESH_SCALE
11
#
define
COMP_TYPE_RD_THRESH_SHIFT
4
#
define
MAX_WINNER_MOTION_MODES
10
struct
TileInfo
;
struct
macroblock
;
struct
RD_STATS
;
void
av1_rd_pick_intra_mode_sb
(
const
struct
AV1_COMP
*
cpi
struct
macroblock
*
x
struct
RD_STATS
*
rd_cost
BLOCK_SIZE
bsize
PICK_MODE_CONTEXT
*
ctx
int64_t
best_rd
)
;
void
av1_rd_pick_inter_mode
(
struct
AV1_COMP
*
cpi
struct
TileDataEnc
*
tile_data
struct
macroblock
*
x
struct
RD_STATS
*
rd_cost
BLOCK_SIZE
bsize
PICK_MODE_CONTEXT
*
ctx
int64_t
best_rd_so_far
)
;
void
av1_nonrd_pick_intra_mode
(
AV1_COMP
*
cpi
MACROBLOCK
*
x
RD_STATS
*
rd_cost
BLOCK_SIZE
bsize
PICK_MODE_CONTEXT
*
ctx
)
;
void
av1_nonrd_pick_inter_mode_sb
(
struct
AV1_COMP
*
cpi
struct
TileDataEnc
*
tile_data
struct
macroblock
*
x
struct
RD_STATS
*
rd_cost
BLOCK_SIZE
bsize
PICK_MODE_CONTEXT
*
ctx
)
;
void
av1_rd_pick_inter_mode_sb_seg_skip
(
const
struct
AV1_COMP
*
cpi
struct
TileDataEnc
*
tile_data
struct
macroblock
*
x
int
mi_row
int
mi_col
struct
RD_STATS
*
rd_cost
BLOCK_SIZE
bsize
PICK_MODE_CONTEXT
*
ctx
int64_t
best_rd_so_far
)
;
void
av1_inter_mode_data_init
(
struct
TileDataEnc
*
tile_data
)
;
void
av1_inter_mode_data_fit
(
TileDataEnc
*
tile_data
int
rdmult
)
;
static
INLINE
int
coded_to_superres_mi
(
int
mi_col
int
denom
)
{
return
(
mi_col
*
denom
+
SCALE_NUMERATOR
/
2
)
/
SCALE_NUMERATOR
;
}
static
INLINE
int
av1_encoder_get_relative_dist
(
int
a
int
b
)
{
assert
(
a
>
=
0
&
&
b
>
=
0
)
;
return
(
a
-
b
)
;
}
static
INLINE
int
av1_get_sb_mi_size
(
const
AV1_COMMON
*
const
cm
)
{
const
int
mi_alloc_size_1d
=
mi_size_wide
[
cm
-
>
mi_params
.
mi_alloc_bsize
]
;
int
sb_mi_rows
=
(
mi_size_wide
[
cm
-
>
seq_params
-
>
sb_size
]
+
mi_alloc_size_1d
-
1
)
/
mi_alloc_size_1d
;
assert
(
mi_size_wide
[
cm
-
>
seq_params
-
>
sb_size
]
=
=
mi_size_high
[
cm
-
>
seq_params
-
>
sb_size
]
)
;
int
sb_mi_size
=
sb_mi_rows
*
sb_mi_rows
;
return
sb_mi_size
;
}
static
INLINE
int
prune_ref
(
const
MV_REFERENCE_FRAME
*
const
ref_frame
const
unsigned
int
*
const
ref_display_order_hint
const
unsigned
int
frame_display_order_hint
const
int
*
ref_frame_list
)
{
for
(
int
i
=
0
;
i
<
2
;
i
+
+
)
{
if
(
ref_frame_list
[
i
]
=
=
NONE_FRAME
)
continue
;
if
(
ref_frame
[
0
]
=
=
ref_frame_list
[
i
]
|
|
ref_frame
[
1
]
=
=
ref_frame_list
[
i
]
)
{
if
(
av1_encoder_get_relative_dist
(
ref_display_order_hint
[
ref_frame_list
[
i
]
-
LAST_FRAME
]
frame_display_order_hint
)
<
0
)
return
1
;
}
}
return
0
;
}
static
INLINE
int
has_closest_ref_frames
(
const
MV_REFERENCE_FRAME
*
ref_frame
int8_t
closest_past_ref
int8_t
closest_future_ref
)
{
int
has_closest_past_ref
=
(
ref_frame
[
0
]
=
=
closest_past_ref
)
|
|
(
ref_frame
[
1
]
=
=
closest_past_ref
)
;
int
has_closest_future_ref
=
(
ref_frame
[
0
]
=
=
closest_future_ref
)
|
|
(
ref_frame
[
1
]
=
=
closest_future_ref
)
;
return
(
has_closest_past_ref
&
&
has_closest_future_ref
)
;
}
static
INLINE
int
has_best_pred_mv_sad
(
const
MV_REFERENCE_FRAME
*
ref_frame
const
MACROBLOCK
*
const
x
)
{
int
has_best_past_pred_mv_sad
=
0
;
int
has_best_future_pred_mv_sad
=
0
;
if
(
x
-
>
best_pred_mv_sad
[
0
]
<
INT_MAX
&
&
x
-
>
best_pred_mv_sad
[
1
]
<
INT_MAX
)
{
has_best_past_pred_mv_sad
=
(
x
-
>
pred_mv_sad
[
ref_frame
[
0
]
]
=
=
x
-
>
best_pred_mv_sad
[
0
]
)
|
|
(
x
-
>
pred_mv_sad
[
ref_frame
[
1
]
]
=
=
x
-
>
best_pred_mv_sad
[
0
]
)
;
has_best_future_pred_mv_sad
=
(
x
-
>
pred_mv_sad
[
ref_frame
[
0
]
]
=
=
x
-
>
best_pred_mv_sad
[
1
]
)
|
|
(
x
-
>
pred_mv_sad
[
ref_frame
[
1
]
]
=
=
x
-
>
best_pred_mv_sad
[
1
]
)
;
}
return
(
has_best_past_pred_mv_sad
&
&
has_best_future_pred_mv_sad
)
;
}
static
INLINE
int
prune_ref_by_selective_ref_frame
(
const
AV1_COMP
*
const
cpi
const
MACROBLOCK
*
const
x
const
MV_REFERENCE_FRAME
*
const
ref_frame
const
unsigned
int
*
const
ref_display_order_hint
)
{
const
SPEED_FEATURES
*
const
sf
=
&
cpi
-
>
sf
;
if
(
!
sf
-
>
inter_sf
.
selective_ref_frame
)
return
0
;
const
int
comp_pred
=
ref_frame
[
1
]
>
INTRA_FRAME
;
if
(
sf
-
>
inter_sf
.
selective_ref_frame
>
=
2
|
|
(
sf
-
>
inter_sf
.
selective_ref_frame
=
=
1
&
&
comp_pred
)
)
{
int
ref_frame_list
[
2
]
=
{
LAST3_FRAME
LAST2_FRAME
}
;
if
(
x
!
=
NULL
)
{
if
(
x
-
>
tpl_keep_ref_frame
[
LAST3_FRAME
]
|
|
x
-
>
pred_mv_sad
[
LAST3_FRAME
]
=
=
x
-
>
best_pred_mv_sad
[
0
]
)
{
ref_frame_list
[
0
]
=
NONE_FRAME
;
}
if
(
x
-
>
tpl_keep_ref_frame
[
LAST2_FRAME
]
|
|
x
-
>
pred_mv_sad
[
LAST2_FRAME
]
=
=
x
-
>
best_pred_mv_sad
[
0
]
)
{
ref_frame_list
[
1
]
=
NONE_FRAME
;
}
}
if
(
prune_ref
(
ref_frame
ref_display_order_hint
ref_display_order_hint
[
GOLDEN_FRAME
-
LAST_FRAME
]
ref_frame_list
)
)
return
1
;
}
if
(
sf
-
>
inter_sf
.
selective_ref_frame
>
=
3
)
{
int
ref_frame_list
[
2
]
=
{
ALTREF2_FRAME
BWDREF_FRAME
}
;
if
(
x
!
=
NULL
)
{
if
(
x
-
>
tpl_keep_ref_frame
[
ALTREF2_FRAME
]
|
|
x
-
>
pred_mv_sad
[
ALTREF2_FRAME
]
=
=
x
-
>
best_pred_mv_sad
[
0
]
)
{
ref_frame_list
[
0
]
=
NONE_FRAME
;
}
if
(
x
-
>
tpl_keep_ref_frame
[
BWDREF_FRAME
]
|
|
x
-
>
pred_mv_sad
[
BWDREF_FRAME
]
=
=
x
-
>
best_pred_mv_sad
[
0
]
)
{
ref_frame_list
[
1
]
=
NONE_FRAME
;
}
}
if
(
prune_ref
(
ref_frame
ref_display_order_hint
ref_display_order_hint
[
LAST_FRAME
-
LAST_FRAME
]
ref_frame_list
)
)
return
1
;
}
if
(
x
!
=
NULL
&
&
sf
-
>
inter_sf
.
prune_comp_ref_frames
&
&
comp_pred
)
{
int
closest_ref_frames
=
has_closest_ref_frames
(
ref_frame
cpi
-
>
ref_frame_dist_info
.
nearest_past_ref
cpi
-
>
ref_frame_dist_info
.
nearest_future_ref
)
;
if
(
closest_ref_frames
=
=
0
)
{
if
(
sf
-
>
inter_sf
.
prune_comp_ref_frames
>
=
2
)
{
return
1
;
}
else
if
(
sf
-
>
inter_sf
.
prune_comp_ref_frames
=
=
1
)
{
if
(
has_best_pred_mv_sad
(
ref_frame
x
)
=
=
0
)
return
1
;
}
}
}
return
0
;
}
static
INLINE
void
av1_copy_mbmi_ext_to_mbmi_ext_frame
(
MB_MODE_INFO_EXT_FRAME
*
mbmi_ext_best
const
MB_MODE_INFO_EXT
*
const
mbmi_ext
uint8_t
ref_frame_type
)
{
memcpy
(
mbmi_ext_best
-
>
ref_mv_stack
mbmi_ext
-
>
ref_mv_stack
[
ref_frame_type
]
sizeof
(
mbmi_ext
-
>
ref_mv_stack
[
USABLE_REF_MV_STACK_SIZE
]
)
)
;
memcpy
(
mbmi_ext_best
-
>
weight
mbmi_ext
-
>
weight
[
ref_frame_type
]
sizeof
(
mbmi_ext
-
>
weight
[
USABLE_REF_MV_STACK_SIZE
]
)
)
;
mbmi_ext_best
-
>
mode_context
=
mbmi_ext
-
>
mode_context
[
ref_frame_type
]
;
mbmi_ext_best
-
>
ref_mv_count
=
mbmi_ext
-
>
ref_mv_count
[
ref_frame_type
]
;
memcpy
(
mbmi_ext_best
-
>
global_mvs
mbmi_ext
-
>
global_mvs
sizeof
(
mbmi_ext
-
>
global_mvs
)
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
