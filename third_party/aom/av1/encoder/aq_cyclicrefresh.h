#
ifndef
AOM_AV1_ENCODER_AQ_CYCLICREFRESH_H_
#
define
AOM_AV1_ENCODER_AQ_CYCLICREFRESH_H_
#
include
"
av1
/
common
/
blockd
.
h
"
#
include
"
av1
/
encoder
/
block
.
h
"
#
include
"
av1
/
encoder
/
tokenize
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
CR_SEGMENT_ID_BASE
0
#
define
CR_SEGMENT_ID_BOOST1
1
#
define
CR_SEGMENT_ID_BOOST2
2
#
define
CR_MAX_RATE_TARGET_RATIO
4
.
0
struct
CYCLIC_REFRESH
{
int
percent_refresh
;
int
percent_refresh_adjustment
;
int
max_qdelta_perc
;
int
sb_index
;
int
last_sb_index
;
int
time_for_refresh
;
int
target_num_seg_blocks
;
int
actual_num_seg1_blocks
;
int
actual_num_seg2_blocks
;
int
rdmult
;
int8_t
*
map
;
int64_t
thresh_rate_sb
;
int64_t
thresh_dist_sb
;
int16_t
motion_thresh
;
double
rate_ratio_qdelta
;
double
rate_ratio_qdelta_adjustment
;
int
rate_boost_fac
;
int
qindex_delta
[
3
]
;
int
apply_cyclic_refresh
;
int
skip_over4x4
;
int
counter_encode_maxq_scene_change
;
int
use_block_sad_scene_det
;
}
;
struct
AV1_COMP
;
typedef
struct
CYCLIC_REFRESH
CYCLIC_REFRESH
;
CYCLIC_REFRESH
*
av1_cyclic_refresh_alloc
(
int
mi_rows
int
mi_cols
)
;
void
av1_cyclic_refresh_free
(
CYCLIC_REFRESH
*
cr
)
;
int
av1_cyclic_refresh_estimate_bits_at_q
(
const
struct
AV1_COMP
*
cpi
double
correction_factor
)
;
int
av1_cyclic_refresh_rc_bits_per_mb
(
const
struct
AV1_COMP
*
cpi
int
i
double
correction_factor
)
;
void
av1_cyclic_reset_segment_skip
(
const
struct
AV1_COMP
*
cpi
MACROBLOCK
*
const
x
int
mi_row
int
mi_col
BLOCK_SIZE
bsize
RUN_TYPE
dry_run
)
;
void
av1_cyclic_refresh_update_segment
(
const
struct
AV1_COMP
*
cpi
MACROBLOCK
*
const
x
int
mi_row
int
mi_col
BLOCK_SIZE
bsize
int64_t
rate
int64_t
dist
int
skip
RUN_TYPE
dry_run
)
;
void
av1_init_cyclic_refresh_counters
(
MACROBLOCK
*
const
x
)
;
void
av1_accumulate_cyclic_refresh_counters
(
CYCLIC_REFRESH
*
const
cyclic_refresh
const
MACROBLOCK
*
const
x
)
;
void
av1_cyclic_refresh_set_golden_update
(
struct
AV1_COMP
*
const
cpi
)
;
void
av1_cyclic_refresh_update_parameters
(
struct
AV1_COMP
*
const
cpi
)
;
void
av1_cyclic_refresh_setup
(
struct
AV1_COMP
*
const
cpi
)
;
int
av1_cyclic_refresh_get_rdmult
(
const
CYCLIC_REFRESH
*
cr
)
;
int
av1_cyclic_refresh_disable_lf_cdef
(
struct
AV1_COMP
*
const
cpi
)
;
static
inline
int
cyclic_refresh_segment_id_boosted
(
int
segment_id
)
{
return
segment_id
=
=
CR_SEGMENT_ID_BOOST1
|
|
segment_id
=
=
CR_SEGMENT_ID_BOOST2
;
}
static
inline
int
cyclic_refresh_segment_id
(
int
segment_id
)
{
if
(
segment_id
=
=
CR_SEGMENT_ID_BOOST1
)
return
CR_SEGMENT_ID_BOOST1
;
else
if
(
segment_id
=
=
CR_SEGMENT_ID_BOOST2
)
return
CR_SEGMENT_ID_BOOST2
;
else
return
CR_SEGMENT_ID_BASE
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
