#
ifndef
AOM_AV1_ENCODER_ENCODEMB_H_
#
define
AOM_AV1_ENCODER_ENCODEMB_H_
#
include
"
config
/
aom_config
.
h
"
#
include
"
av1
/
common
/
av1_common_int
.
h
"
#
include
"
av1
/
common
/
txb_common
.
h
"
#
include
"
av1
/
encoder
/
av1_quantize
.
h
"
#
include
"
av1
/
encoder
/
block
.
h
"
#
include
"
av1
/
encoder
/
tokenize
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
enum
{
AV1_XFORM_QUANT_FP
=
0
AV1_XFORM_QUANT_B
=
1
AV1_XFORM_QUANT_DC
=
2
AV1_XFORM_QUANT_SKIP_QUANT
AV1_XFORM_QUANT_TYPES
}
UENUM1BYTE
(
AV1_XFORM_QUANT
)
;
enum
{
NONE_OPT
=
0
TRELLIS_OPT
=
1
DROPOUT_OPT
=
2
TRELLIS_DROPOUT_OPT
=
3
}
UENUM1BYTE
(
OPT_TYPE
)
;
enum
{
NO_TRELLIS_OPT
FULL_TRELLIS_OPT
FINAL_PASS_TRELLIS_OPT
NO_ESTIMATE_YRD_TRELLIS_OPT
}
UENUM1BYTE
(
TRELLIS_OPT_TYPE
)
;
struct
optimize_ctx
{
ENTROPY_CONTEXT
ta
[
MAX_MB_PLANE
]
[
MAX_MIB_SIZE
]
;
ENTROPY_CONTEXT
tl
[
MAX_MB_PLANE
]
[
MAX_MIB_SIZE
]
;
}
;
struct
encode_b_args
{
const
struct
AV1_COMP
*
cpi
;
MACROBLOCK
*
x
;
struct
optimize_ctx
*
ctx
;
ENTROPY_CONTEXT
*
ta
;
ENTROPY_CONTEXT
*
tl
;
RUN_TYPE
dry_run
;
TRELLIS_OPT_TYPE
enable_optimize_b
;
}
;
void
av1_encode_sb
(
const
struct
AV1_COMP
*
cpi
MACROBLOCK
*
x
BLOCK_SIZE
bsize
RUN_TYPE
dry_run
)
;
void
av1_foreach_transformed_block_in_plane
(
const
MACROBLOCKD
*
const
xd
BLOCK_SIZE
plane_bsize
int
plane
foreach_transformed_block_visitor
visit
void
*
arg
)
;
void
av1_encode_sby_pass1
(
struct
AV1_COMP
*
cpi
MACROBLOCK
*
x
BLOCK_SIZE
bsize
)
;
void
av1_setup_xform
(
const
AV1_COMMON
*
cm
MACROBLOCK
*
x
TX_SIZE
tx_size
TX_TYPE
tx_type
TxfmParam
*
txfm_param
)
;
void
av1_setup_quant
(
TX_SIZE
tx_size
int
use_optimize_b
int
xform_quant_idx
int
use_quant_b_adapt
QUANT_PARAM
*
qparam
)
;
void
av1_setup_qmatrix
(
const
CommonQuantParams
*
quant_params
const
MACROBLOCKD
*
xd
int
plane
TX_SIZE
tx_size
TX_TYPE
tx_type
QUANT_PARAM
*
qparam
)
;
void
av1_xform_dc_only
(
MACROBLOCK
*
x
int
plane
int
block
TxfmParam
*
txfm_param
int64_t
per_px_mean
)
;
void
av1_xform_quant
(
MACROBLOCK
*
x
int
plane
int
block
int
blk_row
int
blk_col
BLOCK_SIZE
plane_bsize
TxfmParam
*
txfm_param
const
QUANT_PARAM
*
qparam
)
;
void
av1_xform
(
MACROBLOCK
*
x
int
plane
int
block
int
blk_row
int
blk_col
BLOCK_SIZE
plane_bsize
TxfmParam
*
txfm_param
)
;
void
av1_quant
(
MACROBLOCK
*
x
int
plane
int
block
TxfmParam
*
txfm_param
const
QUANT_PARAM
*
qparam
)
;
int
av1_optimize_b
(
const
struct
AV1_COMP
*
cpi
MACROBLOCK
*
mb
int
plane
int
block
TX_SIZE
tx_size
TX_TYPE
tx_type
const
TXB_CTX
*
const
txb_ctx
int
*
rate_cost
)
;
void
av1_dropout_qcoeff
(
MACROBLOCK
*
mb
int
plane
int
block
TX_SIZE
tx_size
TX_TYPE
tx_type
int
qindex
)
;
void
av1_dropout_qcoeff_num
(
MACROBLOCK
*
mb
int
plane
int
block
TX_SIZE
tx_size
TX_TYPE
tx_type
int
dropout_num_before
int
dropout_num_after
)
;
void
av1_subtract_block
(
BitDepthInfo
bd_info
int
rows
int
cols
int16_t
*
diff
ptrdiff_t
diff_stride
const
uint8_t
*
src8
ptrdiff_t
src_stride
const
uint8_t
*
pred8
ptrdiff_t
pred_stride
)
;
void
av1_subtract_txb
(
MACROBLOCK
*
x
int
plane
BLOCK_SIZE
plane_bsize
int
blk_col
int
blk_row
TX_SIZE
tx_size
)
;
void
av1_subtract_plane
(
MACROBLOCK
*
x
BLOCK_SIZE
plane_bsize
int
plane
)
;
static
inline
void
av1_set_txb_context
(
MACROBLOCK
*
x
int
plane
int
block
TX_SIZE
tx_size
ENTROPY_CONTEXT
*
a
ENTROPY_CONTEXT
*
l
)
{
const
uint8_t
ctx
=
x
-
>
plane
[
plane
]
.
txb_entropy_ctx
[
block
]
;
memset
(
a
ctx
tx_size_wide_unit
[
tx_size
]
*
sizeof
(
*
a
)
)
;
memset
(
l
ctx
tx_size_high_unit
[
tx_size
]
*
sizeof
(
*
l
)
)
;
}
void
av1_encode_intra_block_plane
(
const
struct
AV1_COMP
*
cpi
MACROBLOCK
*
x
BLOCK_SIZE
bsize
int
plane
RUN_TYPE
dry_run
TRELLIS_OPT_TYPE
enable_optimize_b
)
;
static
inline
int
is_trellis_used
(
TRELLIS_OPT_TYPE
optimize_b
RUN_TYPE
dry_run
)
{
if
(
optimize_b
=
=
NO_TRELLIS_OPT
)
return
false
;
if
(
optimize_b
=
=
FINAL_PASS_TRELLIS_OPT
&
&
dry_run
!
=
OUTPUT_ENABLED
)
return
false
;
return
true
;
}
static
const
uint16_t
dc_coeff_scale
[
TX_SIZES_ALL
]
=
{
1024
2048
4096
4096
0
1448
1448
2896
2896
2896
2896
0
0
2048
2048
4096
4096
0
0
}
;
#
ifdef
__cplusplus
}
#
endif
#
endif
