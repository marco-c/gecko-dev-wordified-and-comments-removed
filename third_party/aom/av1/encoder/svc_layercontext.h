#
ifndef
AOM_AV1_ENCODER_SVC_LAYERCONTEXT_H_
#
define
AOM_AV1_ENCODER_SVC_LAYERCONTEXT_H_
#
include
"
aom_scale
/
yv12config
.
h
"
#
include
"
av1
/
encoder
/
aq_cyclicrefresh
.
h
"
#
include
"
av1
/
encoder
/
encoder
.
h
"
#
include
"
av1
/
encoder
/
ratectrl
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
struct
{
RATE_CONTROL
rc
;
PRIMARY_RATE_CONTROL
p_rc
;
int
framerate_factor
;
int64_t
layer_target_bitrate
;
int
scaling_factor_num
;
int
scaling_factor_den
;
int64_t
target_bandwidth
;
int64_t
spatial_layer_target_bandwidth
;
double
framerate
;
int
avg_frame_size
;
int
max_q
;
int
min_q
;
int
frames_from_key_frame
;
int
sb_index
;
int8_t
*
map
;
int
actual_num_seg1_blocks
;
int
actual_num_seg2_blocks
;
int
counter_encode_maxq_scene_change
;
uint8_t
speed
;
unsigned
char
group_index
;
int
is_key_frame
;
int
max_mv_magnitude
;
}
LAYER_CONTEXT
;
typedef
struct
SVC
{
int
spatial_layer_id
;
int
temporal_layer_id
;
int
number_spatial_layers
;
int
number_temporal_layers
;
int
prev_number_spatial_layers
;
int
use_flexible_mode
;
int
ksvc_fixed_mode
;
double
base_framerate
;
unsigned
int
current_superframe
;
int
skip_mvsearch_last
;
int
skip_mvsearch_gf
;
int
skip_mvsearch_altref
;
int
spatial_layer_fb
[
REF_FRAMES
]
;
int
temporal_layer_fb
[
REF_FRAMES
]
;
int
num_encoded_top_layer
;
int
first_layer_denoise
;
YV12_BUFFER_CONFIG
source_last_TL0
;
int
mi_cols_full_resoln
;
int
mi_rows_full_resoln
;
LAYER_CONTEXT
*
layer_context
;
int
num_allocated_layers
;
InterpFilter
downsample_filter_type
[
AOM_MAX_SS_LAYERS
]
;
int
downsample_filter_phase
[
AOM_MAX_SS_LAYERS
]
;
int
force_zero_mode_spatial_ref
;
int
has_lower_quality_layer
;
AOM_SVC_FRAME_DROP_MODE
framedrop_mode
;
bool
last_layer_dropped
[
AOM_MAX_SS_LAYERS
]
;
bool
drop_spatial_layer
[
AOM_MAX_SS_LAYERS
]
;
}
SVC
;
struct
AV1_COMP
;
struct
EncodeFrameInput
;
void
av1_init_layer_context
(
struct
AV1_COMP
*
const
cpi
)
;
bool
av1_alloc_layer_context
(
struct
AV1_COMP
*
cpi
int
num_layers
)
;
void
av1_update_layer_context_change_config
(
struct
AV1_COMP
*
const
cpi
const
int64_t
target_bandwidth
)
;
void
av1_update_temporal_layer_framerate
(
struct
AV1_COMP
*
const
cpi
)
;
void
av1_restore_layer_context
(
struct
AV1_COMP
*
const
cpi
)
;
void
av1_save_layer_context
(
struct
AV1_COMP
*
const
cpi
)
;
void
av1_free_svc_cyclic_refresh
(
struct
AV1_COMP
*
const
cpi
)
;
void
av1_svc_reset_temporal_layers
(
struct
AV1_COMP
*
const
cpi
int
is_key
)
;
void
av1_one_pass_cbr_svc_start_layer
(
struct
AV1_COMP
*
const
cpi
)
;
int
av1_svc_primary_ref_frame
(
const
struct
AV1_COMP
*
const
cpi
)
;
void
av1_get_layer_resolution
(
const
int
width_org
const
int
height_org
const
int
num
const
int
den
int
*
width_out
int
*
height_out
)
;
void
av1_set_svc_fixed_mode
(
struct
AV1_COMP
*
const
cpi
)
;
void
av1_svc_check_reset_layer_rc_flag
(
struct
AV1_COMP
*
const
cpi
)
;
void
av1_svc_set_last_source
(
struct
AV1_COMP
*
const
cpi
struct
EncodeFrameInput
*
frame_input
YV12_BUFFER_CONFIG
*
prev_source
)
;
void
av1_svc_update_buffer_slot_refreshed
(
struct
AV1_COMP
*
const
cpi
)
;
int
av1_svc_get_min_ref_dist
(
const
struct
AV1_COMP
*
cpi
)
;
void
av1_svc_set_reference_was_previous
(
struct
AV1_COMP
*
cpi
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
