#
ifndef
AOM_AV1_ENCODER_CNN_H_
#
define
AOM_AV1_ENCODER_CNN_H_
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
math
.
h
>
#
include
<
stdbool
.
h
>
#
include
"
aom_util
/
aom_thread
.
h
"
#
include
"
config
/
av1_rtcd
.
h
"
struct
AV1Common
;
#
define
CNN_MAX_HIDDEN_LAYERS
64
#
define
CNN_MAX_LAYERS
(
CNN_MAX_HIDDEN_LAYERS
+
1
)
#
define
CNN_MAX_CHANNELS
256
#
define
CNN_MAX_BRANCHES
4
#
define
CNN_MAX_THREADS
32
#
define
NO_BRANCH_CONFIG
{
0
0
0
}
#
define
NO_BN_PARAMS
{
NULL
NULL
NULL
NULL
}
enum
{
PADDING_SAME_ZERO
PADDING_SAME_REPLICATE
PADDING_VALID
}
UENUM1BYTE
(
PADDING_TYPE
)
;
enum
{
BRANCH_NO_COPY
BRANCH_INPUT
BRANCH_OUTPUT
BRANCH_COMBINED
}
UENUM1BYTE
(
BRANCH_COPY
)
;
enum
{
BRANCH_NOC
BRANCH_ADD
BRANCH_CAT
}
UENUM1BYTE
(
BRANCH_COMBINE
)
;
struct
CNN_BATCHNORM_PARAMS
{
const
float
*
bn_gamma
;
const
float
*
bn_beta
;
const
float
*
bn_mean
;
const
float
*
bn_std
;
}
;
struct
CNN_BRANCH_CONFIG
{
int
input_to_branches
;
int
channels_to_copy
;
int
branches_to_combine
;
}
;
struct
CNN_LAYER_CONFIG
{
int
in_channels
;
int
filter_width
;
int
filter_height
;
int
out_channels
;
int
skip_width
;
int
skip_height
;
int
maxpool
;
const
float
*
weights
;
const
float
*
bias
;
PADDING_TYPE
pad
;
ACTIVATION
activation
;
int
deconvolve
;
int
branch
;
BRANCH_COPY
branch_copy_type
;
BRANCH_COMBINE
branch_combine_type
;
struct
CNN_BRANCH_CONFIG
branch_config
;
struct
CNN_BATCHNORM_PARAMS
bn_params
;
int
output_num
;
}
;
struct
CNN_CONFIG
{
int
num_layers
;
int
is_residue
;
int
ext_width
ext_height
;
int
strict_bounds
;
CNN_LAYER_CONFIG
layer_config
[
CNN_MAX_LAYERS
]
;
}
;
struct
CNN_THREAD_DATA
{
int
num_workers
;
AVxWorker
*
workers
;
}
;
struct
CNN_MULTI_OUT
{
int
num_outputs
;
const
int
*
output_channels
;
const
int
*
output_strides
;
float
*
*
output_buffer
;
}
;
void
av1_find_cnn_output_size
(
int
in_width
int
in_height
const
CNN_CONFIG
*
cnn_config
int
*
out_width
int
*
out_height
int
*
out_channels
)
;
void
av1_find_cnn_layer_output_size
(
int
in_width
int
in_height
const
CNN_LAYER_CONFIG
*
layer_config
int
*
out_width
int
*
out_height
)
;
bool
av1_cnn_predict_img_multi_out
(
uint8_t
*
*
dgd
int
width
int
height
int
stride
const
CNN_CONFIG
*
cnn_config
const
CNN_THREAD_DATA
*
thread_data
struct
CNN_MULTI_OUT
*
output
)
;
bool
av1_cnn_predict_img_multi_out_highbd
(
uint16_t
*
*
dgd
int
width
int
height
int
stride
const
CNN_CONFIG
*
cnn_config
const
CNN_THREAD_DATA
*
thread_data
int
bit_depth
CNN_MULTI_OUT
*
output
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
