#
ifndef
AOM_AV1_ENCODER_PASS2_STRATEGY_H_
#
define
AOM_AV1_ENCODER_PASS2_STRATEGY_H_
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
AV1_COMP
;
struct
EncodeFrameParams
;
#
include
"
av1
/
encoder
/
encoder
.
h
"
typedef
struct
{
double
gf_group_err
;
double
gf_group_raw_error
;
double
gf_group_skip_pct
;
double
gf_group_inactive_zone_rows
;
double
mv_ratio_accumulator
;
double
decay_accumulator
;
double
zero_motion_accumulator
;
double
loop_decay_rate
;
double
last_loop_decay_rate
;
double
this_frame_mv_in_out
;
double
mv_in_out_accumulator
;
double
abs_mv_in_out_accumulator
;
double
avg_sr_coded_error
;
double
avg_pcnt_second_ref
;
double
avg_new_mv_count
;
double
avg_wavelet_energy
;
double
avg_raw_err_stdev
;
int
non_zero_stdev_count
;
}
GF_GROUP_STATS
;
typedef
struct
{
double
frame_err
;
double
frame_coded_error
;
double
frame_sr_coded_error
;
}
GF_FRAME_STATS
;
void
av1_init_second_pass
(
struct
AV1_COMP
*
cpi
)
;
void
av1_init_single_pass_lap
(
AV1_COMP
*
cpi
)
;
void
av1_get_second_pass_params
(
struct
AV1_COMP
*
cpi
struct
EncodeFrameParams
*
const
frame_params
unsigned
int
frame_flags
)
;
void
av1_twopass_postencode_update
(
struct
AV1_COMP
*
cpi
)
;
int
av1_calc_arf_boost
(
const
TWO_PASS
*
twopass
const
TWO_PASS_FRAME
*
twopass_frame
const
PRIMARY_RATE_CONTROL
*
p_rc
FRAME_INFO
*
frame_info
int
offset
int
f_frames
int
b_frames
int
*
num_fpstats_used
int
*
num_fpstats_required
int
project_gfu_boost
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
