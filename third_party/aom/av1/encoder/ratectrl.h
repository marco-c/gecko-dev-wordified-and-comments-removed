#
ifndef
AOM_AV1_ENCODER_RATECTRL_H_
#
define
AOM_AV1_ENCODER_RATECTRL_H_
#
include
"
aom
/
aom_codec
.
h
"
#
include
"
aom
/
aom_integer
.
h
"
#
include
"
aom_ports
/
mem
.
h
"
#
include
"
av1
/
common
/
av1_common_int
.
h
"
#
include
"
av1
/
common
/
blockd
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
BPER_MB_NORMBITS
9
#
define
USE_ALTREF_FOR_ONE_PASS
1
#
define
STATIC_KF_GROUP_THRESH
99
#
define
STATIC_KF_GROUP_FLOAT_THRESH
0
.
99
#
define
MAX_STATIC_GF_GROUP_LENGTH
250
#
define
MIN_GF_INTERVAL
4
#
define
MAX_GF_INTERVAL
32
#
define
FIXED_GF_INTERVAL
16
#
define
MAX_GF_LENGTH_LAP
16
#
define
FIXED_GF_INTERVAL_RT
80
#
define
MAX_GF_INTERVAL_RT
160
#
define
MAX_NUM_GF_INTERVALS
15
#
define
MAX_ARF_LAYERS
6
#
define
DEFAULT_KF_BOOST_RT
2300
#
define
DEFAULT_GF_BOOST_RT
2000
#
define
RT_PASSIVE_STRATEGY
0
#
define
MAX_Q_HISTORY
1000
typedef
struct
{
int
resize_width
;
int
resize_height
;
uint8_t
superres_denom
;
}
size_params_type
;
enum
{
INTER_NORMAL
GF_ARF_LOW
GF_ARF_STD
KF_STD
RATE_FACTOR_LEVELS
}
UENUM1BYTE
(
RATE_FACTOR_LEVEL
)
;
enum
{
KF_UPDATE
LF_UPDATE
GF_UPDATE
ARF_UPDATE
OVERLAY_UPDATE
INTNL_OVERLAY_UPDATE
INTNL_ARF_UPDATE
FRAME_UPDATE_TYPES
}
UENUM1BYTE
(
FRAME_UPDATE_TYPE
)
;
enum
{
REFBUF_RESET
REFBUF_UPDATE
REFBUF_STATES
}
UENUM1BYTE
(
REFBUF_STATE
)
;
typedef
enum
{
NO_RESIZE
=
0
DOWN_THREEFOUR
=
1
DOWN_ONEHALF
=
2
UP_THREEFOUR
=
-
1
UP_ORIG
=
-
2
}
RESIZE_ACTION
;
typedef
enum
{
ORIG
=
0
THREE_QUARTER
=
1
ONE_HALF
=
2
}
RESIZE_STATE
;
#
define
MAX_FIRSTPASS_ANALYSIS_FRAMES
150
typedef
enum
region_types
{
STABLE_REGION
=
0
HIGH_VAR_REGION
=
1
SCENECUT_REGION
=
2
BLENDING_REGION
=
3
}
REGION_TYPES
;
typedef
struct
regions
{
int
start
;
int
last
;
double
avg_noise_var
;
double
avg_cor_coeff
;
double
avg_sr_fr_ratio
;
double
avg_intra_err
;
double
avg_coded_err
;
REGION_TYPES
type
;
}
REGIONS
;
typedef
struct
{
int
base_frame_target
;
int
this_frame_target
;
int
projected_frame_size
;
int
coefficient_size
;
int
sb64_target_rate
;
int
frames_since_golden
;
int
frames_till_gf_update_due
;
int
intervals_till_gf_calculate_due
;
int
min_gf_interval
;
int
max_gf_interval
;
int
static_scene_max_gf_interval
;
int
frames_to_key
;
int
frames_since_key
;
int
frames_to_fwd_kf
;
int
is_src_frame_alt_ref
;
int
sframe_due
;
int
high_source_sad
;
uint64_t
avg_source_sad
;
uint64_t
prev_avg_source_sad
;
uint64_t
frame_source_sad
;
int
avg_frame_bandwidth
;
int
min_frame_bandwidth
;
int
max_frame_bandwidth
;
int
prev_avg_frame_bandwidth
;
int
ni_av_qi
;
int
ni_tot_qi
;
int
decimation_factor
;
int
decimation_count
;
int
prev_frame_is_dropped
;
int
drop_count_consec
;
int
max_consec_drop
;
unsigned
int
frame_number_encoded
;
int
worst_quality
;
int
best_quality
;
int
rc_1_frame
;
int
rc_2_frame
;
int
q_1_frame
;
int
q_2_frame
;
int
active_worst_quality
;
int
avg_frame_low_motion
;
int
cnt_zeromv
;
int
percent_blocks_with_motion
;
int
percent_blocks_inactive
;
uint64_t
max_block_source_sad
;
RESIZE_STATE
resize_state
;
int
resize_avg_qp
;
int
resize_buffer_underflow
;
int
resize_count
;
int
rtc_external_ratectrl
;
int
frame_level_fast_extra_bits
;
double
frame_level_rate_correction_factors
[
RATE_FACTOR_LEVELS
]
;
int
frame_num_last_gf_refresh
;
int
prev_coded_width
;
int
prev_coded_height
;
int
bit_est_ratio
;
int
use_external_qp_one_pass
;
}
RATE_CONTROL
;
typedef
struct
{
int64_t
gf_group_bits
;
int
kf_boost
;
int
gfu_boost
;
int
gf_intervals
[
MAX_NUM_GF_INTERVALS
]
;
int
cur_gf_index
;
int
num_regions
;
REGIONS
regions
[
MAX_FIRSTPASS_ANALYSIS_FRAMES
]
;
int
regions_offset
;
int
frames_till_regions_update
;
int
baseline_gf_interval
;
int
constrained_gf_group
;
int
this_key_frame_forced
;
int
next_key_frame_forced
;
int64_t
starting_buffer_level
;
int64_t
optimal_buffer_level
;
int64_t
maximum_buffer_size
;
int
arf_q
;
float_t
arf_boost_factor
;
int
base_layer_qp
;
int
num_stats_used_for_kf_boost
;
int
num_stats_used_for_gfu_boost
;
int
num_stats_required_for_gfu_boost
;
int
enable_scenecut_detection
;
int
use_arf_in_this_kf_group
;
int
ni_frames
;
double
tot_q
;
int
last_kf_qindex
;
int
avg_frame_qindex
[
FRAME_TYPES
]
;
#
if
CONFIG_FPMT_TEST
int
temp_active_best_quality
[
MAX_ARF_LAYERS
+
1
]
;
int
temp_last_boosted_qindex
;
double
temp_avg_q
;
int
temp_last_q
[
FRAME_TYPES
]
;
int
temp_projected_frame_size
;
int64_t
temp_total_actual_bits
;
int64_t
temp_buffer_level
;
int64_t
temp_vbr_bits_off_target
;
int64_t
temp_vbr_bits_off_target_fast
;
double
temp_rate_correction_factors
[
RATE_FACTOR_LEVELS
]
;
int
temp_rate_error_estimate
;
int
temp_rolling_arf_group_target_bits
;
int
temp_rolling_arf_group_actual_bits
;
int64_t
temp_bits_left
;
int
temp_extend_minq
;
int
temp_extend_maxq
;
#
endif
int
active_best_quality
[
MAX_ARF_LAYERS
+
1
]
;
int
last_boosted_qindex
;
double
avg_q
;
int
last_q
[
FRAME_TYPES
]
;
double
rate_correction_factors
[
RATE_FACTOR_LEVELS
]
;
int64_t
total_actual_bits
;
int64_t
total_target_bits
;
int64_t
buffer_level
;
int
rate_error_estimate
;
int64_t
vbr_bits_off_target
;
int64_t
vbr_bits_off_target_fast
;
int64_t
bits_off_target
;
int
rolling_target_bits
;
int
rolling_actual_bits
;
int
q_history
[
MAX_Q_HISTORY
]
;
}
PRIMARY_RATE_CONTROL
;
struct
AV1_COMP
;
struct
AV1EncoderConfig
;
struct
GF_GROUP
;
void
av1_primary_rc_init
(
const
struct
AV1EncoderConfig
*
oxcf
PRIMARY_RATE_CONTROL
*
p_rc
)
;
void
av1_rc_init
(
const
struct
AV1EncoderConfig
*
oxcf
RATE_CONTROL
*
rc
)
;
int
av1_estimate_bits_at_q
(
const
struct
AV1_COMP
*
cpi
int
q
double
correction_factor
)
;
double
av1_convert_qindex_to_q
(
int
qindex
aom_bit_depth_t
bit_depth
)
;
void
av1_rc_init_minq_luts
(
void
)
;
int
av1_rc_get_default_min_gf_interval
(
int
width
int
height
double
framerate
)
;
int
av1_rc_get_default_max_gf_interval
(
double
framerate
int
min_gf_interval
)
;
struct
EncodeFrameInput
;
void
av1_rc_postencode_update
(
struct
AV1_COMP
*
cpi
uint64_t
bytes_used
)
;
void
av1_rc_postencode_update_drop_frame
(
struct
AV1_COMP
*
cpi
)
;
void
av1_rc_update_rate_correction_factors
(
struct
AV1_COMP
*
cpi
int
is_encode_stage
int
width
int
height
)
;
int
av1_rc_drop_frame
(
struct
AV1_COMP
*
cpi
)
;
void
av1_rc_compute_frame_size_bounds
(
const
struct
AV1_COMP
*
cpi
int
this_frame_target
int
*
frame_under_shoot_limit
int
*
frame_over_shoot_limit
)
;
int
av1_rc_pick_q_and_bounds
(
struct
AV1_COMP
*
cpi
int
width
int
height
int
gf_index
int
*
bottom_index
int
*
top_index
)
;
int
av1_rc_regulate_q
(
const
struct
AV1_COMP
*
cpi
int
target_bits_per_frame
int
active_best_quality
int
active_worst_quality
int
width
int
height
)
;
int
av1_get_bpmb_enumerator
(
FRAME_TYPE
frame_type
const
int
is_screen_content_type
)
;
int
av1_rc_bits_per_mb
(
const
struct
AV1_COMP
*
cpi
FRAME_TYPE
frame_type
int
qindex
double
correction_factor
int
accurate_estimate
)
;
int
av1_rc_clamp_iframe_target_size
(
const
struct
AV1_COMP
*
const
cpi
int64_t
target
)
;
int
av1_rc_clamp_pframe_target_size
(
const
struct
AV1_COMP
*
const
cpi
int
target
uint8_t
frame_update_type
)
;
int
av1_find_qindex
(
double
desired_q
aom_bit_depth_t
bit_depth
int
best_qindex
int
worst_qindex
)
;
int
av1_compute_qdelta
(
const
RATE_CONTROL
*
rc
double
qstart
double
qtarget
aom_bit_depth_t
bit_depth
)
;
int
av1_compute_qdelta_by_rate
(
const
struct
AV1_COMP
*
cpi
FRAME_TYPE
frame_type
int
qindex
double
rate_target_ratio
)
;
int
av1_frame_type_qdelta
(
const
struct
AV1_COMP
*
cpi
int
q
)
;
void
av1_rc_update_framerate
(
struct
AV1_COMP
*
cpi
int
width
int
height
)
;
void
av1_rc_set_gf_interval_range
(
const
struct
AV1_COMP
*
const
cpi
RATE_CONTROL
*
const
rc
)
;
void
av1_set_target_rate
(
struct
AV1_COMP
*
cpi
int
width
int
height
)
;
int
av1_resize_one_pass_cbr
(
struct
AV1_COMP
*
cpi
)
;
void
av1_rc_set_frame_target
(
struct
AV1_COMP
*
cpi
int
target
int
width
int
height
)
;
void
av1_adjust_gf_refresh_qp_one_pass_rt
(
struct
AV1_COMP
*
cpi
)
;
void
av1_set_rtc_reference_structure_one_layer
(
struct
AV1_COMP
*
cpi
int
gf_update
)
;
int
av1_calc_pframe_target_size_one_pass_vbr
(
const
struct
AV1_COMP
*
const
cpi
FRAME_UPDATE_TYPE
frame_update_type
)
;
int
av1_calc_iframe_target_size_one_pass_vbr
(
const
struct
AV1_COMP
*
const
cpi
)
;
int
av1_calc_pframe_target_size_one_pass_cbr
(
const
struct
AV1_COMP
*
cpi
FRAME_UPDATE_TYPE
frame_update_type
)
;
int
av1_calc_iframe_target_size_one_pass_cbr
(
const
struct
AV1_COMP
*
cpi
)
;
void
av1_get_one_pass_rt_params
(
struct
AV1_COMP
*
cpi
FRAME_TYPE
*
const
frame_type
const
struct
EncodeFrameInput
*
frame_input
unsigned
int
frame_flags
)
;
int
av1_encodedframe_overshoot_cbr
(
struct
AV1_COMP
*
cpi
int
*
q
)
;
int
av1_q_mode_get_q_index
(
int
base_q_index
int
gf_update_type
int
gf_pyramid_level
int
arf_q
)
;
int
av1_get_arf_q_index
(
int
base_q_index
int
gfu_boost
int
bit_depth
double
arf_boost_factor
)
;
#
if
!
CONFIG_REALTIME_ONLY
struct
TplDepFrame
;
int
av1_get_arf_q_index_q_mode
(
struct
AV1_COMP
*
cpi
struct
TplDepFrame
*
tpl_frame
)
;
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
