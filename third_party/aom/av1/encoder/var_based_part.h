#
ifndef
AOM_AV1_ENCODER_VAR_BASED_PART_H_
#
define
AOM_AV1_ENCODER_VAR_BASED_PART_H_
#
include
<
stdio
.
h
>
#
include
"
config
/
aom_config
.
h
"
#
include
"
config
/
aom_dsp_rtcd
.
h
"
#
include
"
config
/
av1_rtcd
.
h
"
#
include
"
av1
/
encoder
/
encoder
.
h
"
#
define
GET_BLK_IDX_X
(
idx
level
)
(
(
(
idx
)
&
(
0x01
)
)
<
<
(
level
)
)
#
define
GET_BLK_IDX_Y
(
idx
level
)
(
(
(
idx
)
>
>
(
0x01
)
)
<
<
(
level
)
)
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
QINDEX_LARGE_BLOCK_THR
\
100
/
/
Use
increased
thresholds
for
midres
for
speed
9
when
qindex
is
above
#
define
CALC_CHROMA_THRESH_FOR_ZEROMV_SKIP
(
thresh_exit_part
)
\
(
(
3
*
(
thresh_exit_part
)
)
>
>
2
)
void
av1_set_variance_partition_thresholds
(
AV1_COMP
*
cpi
int
q
int
content_lowsumdiff
)
;
int
av1_choose_var_based_partitioning
(
AV1_COMP
*
cpi
const
TileInfo
*
const
tile
ThreadData
*
td
MACROBLOCK
*
x
int
mi_row
int
mi_col
)
;
int
av1_get_force_skip_low_temp_var_small_sb
(
const
uint8_t
*
variance_low
int
mi_row
int
mi_col
BLOCK_SIZE
bsize
)
;
int
av1_get_force_skip_low_temp_var
(
const
uint8_t
*
variance_low
int
mi_row
int
mi_col
BLOCK_SIZE
bsize
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
