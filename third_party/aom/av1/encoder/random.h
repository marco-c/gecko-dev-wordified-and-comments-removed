#
ifndef
AOM_AV1_ENCODER_RANDOM_H_
#
define
AOM_AV1_ENCODER_RANDOM_H_
#
include
<
stdint
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
static
INLINE
uint32_t
lcg_next
(
uint32_t
*
state
)
{
*
state
=
(
uint32_t
)
(
*
state
*
1103515245ULL
+
12345
)
;
return
*
state
;
}
static
INLINE
uint32_t
lcg_rand16
(
uint32_t
*
state
)
{
return
(
lcg_next
(
state
)
/
65536
)
%
32768
;
}
static
INLINE
uint32_t
lcg_randint
(
uint32_t
*
state
uint32_t
n
)
{
uint64_t
v
=
(
(
uint64_t
)
lcg_next
(
state
)
*
n
)
>
>
32
;
return
(
uint32_t
)
v
;
}
static
INLINE
uint32_t
lcg_randrange
(
uint32_t
*
state
uint32_t
lo
uint32_t
hi
)
{
assert
(
lo
<
hi
)
;
return
lo
+
lcg_randint
(
state
hi
-
lo
)
;
}
static
INLINE
void
lcg_pick
(
int
n
int
k
int
*
out
unsigned
int
*
seed
)
{
assert
(
0
<
=
k
&
&
k
<
=
n
)
;
for
(
int
i
=
0
;
i
<
k
;
i
+
+
)
{
int
v
;
resample
:
v
=
(
int
)
lcg_randint
(
seed
n
)
;
for
(
int
j
=
0
;
j
<
i
;
j
+
+
)
{
if
(
v
=
=
out
[
j
]
)
{
goto
resample
;
}
}
out
[
i
]
=
v
;
}
}
#
ifdef
__cplusplus
}
#
endif
#
endif
