#
ifndef
AOM_AV1_ENCODER_GLOBAL_MOTION_H_
#
define
AOM_AV1_ENCODER_GLOBAL_MOTION_H_
#
include
"
aom
/
aom_integer
.
h
"
#
include
"
aom_dsp
/
flow_estimation
/
flow_estimation
.
h
"
#
include
"
aom_util
/
aom_pthread
.
h
"
#
include
"
av1
/
encoder
/
enc_enums
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
RANSAC_NUM_MOTIONS
1
#
define
GM_MAX_REFINEMENT_STEPS
5
#
define
MAX_DIRECTIONS
2
typedef
struct
{
int
distance
;
MV_REFERENCE_FRAME
frame
;
}
FrameDistPair
;
typedef
struct
{
MotionModel
motion_models
[
RANSAC_NUM_MOTIONS
]
;
uint8_t
*
segment_map
;
}
GlobalMotionData
;
typedef
struct
{
int8_t
thread_id_to_dir
[
MAX_NUM_THREADS
]
;
int8_t
early_exit
[
MAX_DIRECTIONS
]
;
int8_t
next_frame_to_process
[
MAX_DIRECTIONS
]
;
}
GlobalMotionJobInfo
;
typedef
struct
{
GlobalMotionJobInfo
job_info
;
#
if
CONFIG_MULTITHREAD
pthread_mutex_t
*
mutex_
;
#
endif
bool
gm_mt_exit
;
}
AV1GlobalMotionSync
;
void
av1_convert_model_to_params
(
const
double
*
params
WarpedMotionParams
*
model
)
;
static
const
double
erroradv_tr
[
2
]
=
{
0
.
65
0
.
2
}
;
static
const
double
erroradv_prod_tr
=
20000
;
static
const
double
erroradv_early_tr
=
0
.
70
;
int
av1_is_enough_erroradvantage
(
double
best_erroradvantage
int
params_cost
double
gm_erroradv_tr
)
;
void
av1_compute_feature_segmentation_map
(
uint8_t
*
segment_map
int
width
int
height
int
*
inliers
int
num_inliers
)
;
int64_t
av1_segmented_frame_error
(
int
use_hbd
int
bd
const
uint8_t
*
ref
int
ref_stride
uint8_t
*
dst
int
dst_stride
int
p_width
int
p_height
uint8_t
*
segment_map
int
segment_map_stride
)
;
int64_t
av1_refine_integerized_param
(
WarpedMotionParams
*
wm
TransformationType
wmtype
int
use_hbd
int
bd
uint8_t
*
ref
int
r_width
int
r_height
int
r_stride
uint8_t
*
dst
int
d_width
int
d_height
int
d_stride
int
n_refinements
int64_t
ref_frame_error
uint8_t
*
segment_map
int
segment_map_stride
double
gm_erroradv_tr
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
