#
ifndef
AOM_AV1_ENCODER_ENCODETXB_H_
#
define
AOM_AV1_ENCODER_ENCODETXB_H_
#
include
"
config
/
aom_config
.
h
"
#
include
"
av1
/
common
/
av1_common_int
.
h
"
#
include
"
av1
/
common
/
blockd
.
h
"
#
include
"
av1
/
common
/
txb_common
.
h
"
#
include
"
av1
/
encoder
/
block
.
h
"
#
include
"
av1
/
encoder
/
encoder
.
h
"
#
include
"
aom_dsp
/
bitwriter
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
TXB_SKIP_CTX_MASK
15
#
define
DC_SIGN_CTX_SHIFT
4
#
define
DC_SIGN_CTX_MASK
3
int
av1_get_eob_pos_token
(
const
int
eob
int
*
const
extra
)
;
void
av1_alloc_txb_buf
(
AV1_COMP
*
cpi
)
;
void
av1_free_txb_buf
(
AV1_COMP
*
cpi
)
;
void
av1_write_coeffs_txb
(
const
AV1_COMMON
*
const
cm
MACROBLOCK
*
const
x
aom_writer
*
w
int
blk_row
int
blk_col
int
plane
int
block
TX_SIZE
tx_size
)
;
void
av1_write_intra_coeffs_mb
(
const
AV1_COMMON
*
const
cm
MACROBLOCK
*
x
aom_writer
*
w
BLOCK_SIZE
bsize
)
;
uint8_t
av1_get_txb_entropy_context
(
const
tran_low_t
*
qcoeff
const
SCAN_ORDER
*
scan_order
int
eob
)
;
void
av1_update_intra_mb_txb_context
(
const
AV1_COMP
*
cpi
ThreadData
*
td
RUN_TYPE
dry_run
BLOCK_SIZE
bsize
uint8_t
allow_update_cdf
)
;
void
av1_update_and_record_txb_context
(
int
plane
int
block
int
blk_row
int
blk_col
BLOCK_SIZE
plane_bsize
TX_SIZE
tx_size
void
*
arg
)
;
void
av1_record_txb_context
(
int
plane
int
block
int
blk_row
int
blk_col
BLOCK_SIZE
plane_bsize
TX_SIZE
tx_size
void
*
arg
)
;
CB_COEFF_BUFFER
*
av1_get_cb_coeff_buffer
(
const
struct
AV1_COMP
*
cpi
int
mi_row
int
mi_col
)
;
static
INLINE
int
av1_cost_skip_txb
(
const
CoeffCosts
*
coeff_costs
const
TXB_CTX
*
const
txb_ctx
int
plane
TX_SIZE
tx_size
)
{
const
TX_SIZE
txs_ctx
=
get_txsize_entropy_ctx
(
tx_size
)
;
const
PLANE_TYPE
plane_type
=
get_plane_type
(
plane
)
;
const
LV_MAP_COEFF_COST
*
const
coeff_costs_
=
&
coeff_costs
-
>
coeff_costs
[
txs_ctx
]
[
plane_type
]
;
return
coeff_costs_
-
>
txb_skip_cost
[
txb_ctx
-
>
txb_skip_ctx
]
[
1
]
;
}
static
const
int
plane_rd_mult
[
REF_TYPES
]
[
PLANE_TYPES
]
=
{
{
17
13
}
{
16
10
}
}
;
#
ifdef
__cplusplus
}
#
endif
#
endif
