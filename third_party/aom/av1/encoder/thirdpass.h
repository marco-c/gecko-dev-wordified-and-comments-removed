#
ifndef
AOM_AV1_ENCODER_THIRDPASS_H_
#
define
AOM_AV1_ENCODER_THIRDPASS_H_
#
include
"
av1
/
common
/
enums
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
"
av1
/
encoder
/
firstpass
.
h
"
#
include
"
av1
/
encoder
/
ratectrl
.
h
"
#
include
"
av1
/
encoder
/
tpl_model
.
h
"
struct
AV1_COMP
;
#
define
MAX_THIRD_PASS_BUF
\
(
AOMMAX
(
(
2
*
MAX_GF_INTERVAL
+
1
)
MAX_STATIC_GF_GROUP_LENGTH
)
)
typedef
struct
{
int
gf_length
;
int
num_frames
;
int
use_arf
;
}
THIRD_PASS_GOP_INFO
;
#
if
CONFIG_BITRATE_ACCURACY
typedef
struct
TPL_INFO
{
int
gf_length
;
int
tpl_ready
;
TplTxfmStats
txfm_stats_list
[
MAX_LENGTH_TPL_FRAME_STATS
]
;
double
qstep_ratio_ls
[
MAX_LENGTH_TPL_FRAME_STATS
]
;
FRAME_UPDATE_TYPE
update_type_list
[
MAX_LENGTH_TPL_FRAME_STATS
]
;
}
TPL_INFO
;
#
endif
typedef
struct
{
BLOCK_SIZE
bsize
;
PARTITION_TYPE
partition
;
int
mi_row_start
;
int
mi_col_start
;
int_mv
mv
[
2
]
;
MV_REFERENCE_FRAME
ref_frame
[
2
]
;
PREDICTION_MODE
pred_mode
;
}
THIRD_PASS_MI_INFO
;
typedef
struct
{
int
width
;
int
height
;
int
mi_stride
;
int
mi_rows
;
int
mi_cols
;
int
base_q_idx
;
int
is_show_existing_frame
;
int
is_show_frame
;
int
bits_allocated
;
int
actual_bits
;
uint64_t
sse
;
double
bpm_factor
;
FRAME_TYPE
frame_type
;
unsigned
int
order_hint
;
THIRD_PASS_MI_INFO
*
mi_info
;
}
THIRD_PASS_FRAME_INFO
;
typedef
struct
{
const
char
*
input_file_name
;
#
if
CONFIG_THREE_PASS
struct
AvxInputContext
*
input_ctx
;
#
endif
aom_codec_ctx_t
decoder
;
const
unsigned
char
*
frame
;
const
unsigned
char
*
end_frame
;
int
have_frame
;
uint8_t
*
buf
;
size_t
bytes_in_buffer
;
size_t
buffer_size
;
struct
aom_internal_error_info
*
err_info
;
int
this_frame_bits
;
THIRD_PASS_FRAME_INFO
frame_info
[
MAX_THIRD_PASS_BUF
]
;
int
frame_info_count
;
int
prev_gop_end
;
THIRD_PASS_GOP_INFO
gop_info
;
}
THIRD_PASS_DEC_CTX
;
void
av1_init_thirdpass_ctx
(
AV1_COMMON
*
cm
THIRD_PASS_DEC_CTX
*
*
ctx
const
char
*
file
)
;
void
av1_free_thirdpass_ctx
(
THIRD_PASS_DEC_CTX
*
ctx
)
;
void
av1_set_gop_third_pass
(
THIRD_PASS_DEC_CTX
*
ctx
)
;
void
av1_pop_third_pass_info
(
THIRD_PASS_DEC_CTX
*
ctx
)
;
void
av1_open_second_pass_log
(
struct
AV1_COMP
*
cpi
int
is_read
)
;
void
av1_close_second_pass_log
(
struct
AV1_COMP
*
cpi
)
;
void
av1_write_second_pass_gop_info
(
struct
AV1_COMP
*
cpi
)
;
void
av1_write_second_pass_per_frame_info
(
struct
AV1_COMP
*
cpi
int
gf_index
)
;
void
av1_read_second_pass_gop_info
(
FILE
*
second_pass_log_stream
THIRD_PASS_GOP_INFO
*
gop_info
struct
aom_internal_error_info
*
error
)
;
void
av1_read_second_pass_per_frame_info
(
FILE
*
second_pass_log_stream
THIRD_PASS_FRAME_INFO
*
frame_info_arr
int
frame_info_count
struct
aom_internal_error_info
*
error
)
;
int
av1_check_use_arf
(
THIRD_PASS_DEC_CTX
*
ctx
)
;
void
av1_get_third_pass_ratio
(
THIRD_PASS_DEC_CTX
*
ctx
int
fidx
int
fheight
int
fwidth
double
*
ratio_h
double
*
ratio_w
)
;
THIRD_PASS_MI_INFO
*
av1_get_third_pass_mi
(
THIRD_PASS_DEC_CTX
*
ctx
int
fidx
int
mi_row
int
mi_col
double
ratio_h
double
ratio_w
)
;
int_mv
av1_get_third_pass_adjusted_mv
(
THIRD_PASS_MI_INFO
*
this_mi
double
ratio_h
double
ratio_w
MV_REFERENCE_FRAME
frame
)
;
BLOCK_SIZE
av1_get_third_pass_adjusted_blk_size
(
THIRD_PASS_MI_INFO
*
this_mi
double
ratio_h
double
ratio_w
)
;
void
av1_third_pass_get_adjusted_mi
(
THIRD_PASS_MI_INFO
*
third_pass_mi
double
ratio_h
double
ratio_w
int
*
mi_row
int
*
mi_col
)
;
PARTITION_TYPE
av1_third_pass_get_sb_part_type
(
THIRD_PASS_DEC_CTX
*
ctx
THIRD_PASS_MI_INFO
*
this_mi
)
;
#
if
CONFIG_BITRATE_ACCURACY
void
av1_pack_tpl_info
(
TPL_INFO
*
tpl_info
const
GF_GROUP
*
gf_group
const
TplParams
*
tpl_data
)
;
void
av1_write_tpl_info
(
const
TPL_INFO
*
tpl_info
FILE
*
log_stream
struct
aom_internal_error_info
*
error
)
;
void
av1_read_tpl_info
(
TPL_INFO
*
tpl_info
FILE
*
log_stream
struct
aom_internal_error_info
*
error
)
;
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
