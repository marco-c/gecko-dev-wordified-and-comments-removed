#
ifndef
AV1_COMMON_CFL_H_
#
define
AV1_COMMON_CFL_H_
#
include
<
assert
.
h
>
#
include
"
av1
/
common
/
enums
.
h
"
typedef
struct
AV1Common
AV1_COMMON
;
typedef
struct
macroblockd
MACROBLOCKD
;
typedef
struct
{
uint8_t
y_pix
[
MAX_SB_SQUARE
]
;
uint8_t
y_down_pix
[
MAX_SB_SQUARE
]
;
int
y_height
y_width
;
int
uv_height
uv_width
;
int
y_averages_q3
[
MAX_NUM_TXB
]
;
int
y_averages_stride
;
int
are_parameters_computed
;
int
subsampling_x
subsampling_y
;
int
dc_pred
[
CFL_PRED_PLANES
]
;
int
costs
[
CFL_ALPHABET_SIZE
]
;
int
mi_row
mi_col
;
}
CFL_CTX
;
static
const
int
cfl_alpha_mags_q3
[
CFL_MAGS_SIZE
]
=
{
0
1
-
1
2
-
2
4
-
4
}
;
static
const
int
cfl_alpha_codes
[
CFL_ALPHABET_SIZE
]
[
CFL_PRED_PLANES
]
=
{
{
0
0
}
{
1
1
}
{
3
0
}
{
3
3
}
{
1
0
}
{
3
1
}
{
5
5
}
{
0
1
}
{
5
3
}
{
5
0
}
{
3
5
}
{
1
3
}
{
0
3
}
{
5
1
}
{
1
5
}
{
0
5
}
}
;
static
INLINE
int
get_scaled_luma_q0
(
int
alpha_q3
int
y_pix
int
avg_q3
)
{
return
(
alpha_q3
*
(
(
y_pix
<
<
3
)
-
avg_q3
)
+
32
)
>
>
6
;
}
void
cfl_init
(
CFL_CTX
*
cfl
AV1_COMMON
*
cm
)
;
void
cfl_predict_block
(
MACROBLOCKD
*
const
xd
uint8_t
*
dst
int
dst_stride
int
row
int
col
TX_SIZE
tx_size
int
plane
)
;
void
cfl_store
(
CFL_CTX
*
cfl
const
uint8_t
*
input
int
input_stride
int
row
int
col
TX_SIZE
tx_size
BLOCK_SIZE
bsize
)
;
void
cfl_compute_parameters
(
MACROBLOCKD
*
const
xd
TX_SIZE
tx_size
)
;
#
endif
