#
ifndef
AV1_COMMON_SCALE_H_
#
define
AV1_COMMON_SCALE_H_
#
include
"
av1
/
common
/
convolve
.
h
"
#
include
"
av1
/
common
/
mv
.
h
"
#
include
"
aom_dsp
/
aom_convolve
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
SCALE_NUMERATOR
8
#
define
REF_SCALE_SHIFT
14
#
define
REF_NO_SCALE
(
1
<
<
REF_SCALE_SHIFT
)
#
define
REF_INVALID_SCALE
-
1
struct
scale_factors
{
int
x_scale_fp
;
int
y_scale_fp
;
int
x_step_q4
;
int
y_step_q4
;
int
(
*
scale_value_x
)
(
int
val
const
struct
scale_factors
*
sf
)
;
int
(
*
scale_value_y
)
(
int
val
const
struct
scale_factors
*
sf
)
;
aom_convolve_fn_t
convolve
[
2
]
[
2
]
[
2
]
;
aom_highbd_convolve_fn_t
highbd_convolve
[
2
]
[
2
]
[
2
]
;
}
;
MV32
av1_scale_mv
(
const
MV
*
mv
int
x
int
y
const
struct
scale_factors
*
sf
)
;
void
av1_setup_scale_factors_for_frame
(
struct
scale_factors
*
sf
int
other_w
int
other_h
int
this_w
int
this_h
)
;
static
INLINE
int
av1_is_valid_scale
(
const
struct
scale_factors
*
sf
)
{
return
sf
-
>
x_scale_fp
!
=
REF_INVALID_SCALE
&
&
sf
-
>
y_scale_fp
!
=
REF_INVALID_SCALE
;
}
static
INLINE
int
av1_is_scaled
(
const
struct
scale_factors
*
sf
)
{
return
av1_is_valid_scale
(
sf
)
&
&
(
sf
-
>
x_scale_fp
!
=
REF_NO_SCALE
|
|
sf
-
>
y_scale_fp
!
=
REF_NO_SCALE
)
;
}
static
INLINE
int
valid_ref_frame_size
(
int
ref_width
int
ref_height
int
this_width
int
this_height
)
{
return
2
*
this_width
>
=
ref_width
&
&
2
*
this_height
>
=
ref_height
&
&
this_width
<
=
16
*
ref_width
&
&
this_height
<
=
16
*
ref_height
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
