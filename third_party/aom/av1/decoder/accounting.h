#
ifndef
AOM_ACCOUNTING_H_
#
define
AOM_ACCOUNTING_H_
#
include
<
stdlib
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
AOM_ACCOUNTING_HASH_SIZE
(
1021
)
#
define
MAX_SYMBOL_TYPES
(
256
)
#
define
AOM_ACCT_BITRES
(
3
)
typedef
struct
{
int16_t
x
;
int16_t
y
;
}
AccountingSymbolContext
;
typedef
struct
{
AccountingSymbolContext
context
;
uint32_t
id
;
uint32_t
bits
;
uint32_t
samples
;
}
AccountingSymbol
;
typedef
struct
{
char
*
(
strs
[
MAX_SYMBOL_TYPES
]
)
;
int
num_strs
;
}
AccountingDictionary
;
typedef
struct
{
AccountingSymbol
*
syms
;
int
num_syms
;
int
num_multi_syms
;
int
num_binary_syms
;
AccountingDictionary
dictionary
;
}
AccountingSymbols
;
typedef
struct
Accounting
Accounting
;
struct
Accounting
{
AccountingSymbols
syms
;
int
num_syms_allocated
;
int16_t
hash_dictionary
[
AOM_ACCOUNTING_HASH_SIZE
]
;
AccountingSymbolContext
context
;
uint32_t
last_tell_frac
;
}
;
void
aom_accounting_init
(
Accounting
*
accounting
)
;
void
aom_accounting_reset
(
Accounting
*
accounting
)
;
void
aom_accounting_clear
(
Accounting
*
accounting
)
;
void
aom_accounting_set_context
(
Accounting
*
accounting
int16_t
x
int16_t
y
)
;
int
aom_accounting_dictionary_lookup
(
Accounting
*
accounting
const
char
*
str
)
;
void
aom_accounting_record
(
Accounting
*
accounting
const
char
*
str
uint32_t
bits
)
;
void
aom_accounting_dump
(
Accounting
*
accounting
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
