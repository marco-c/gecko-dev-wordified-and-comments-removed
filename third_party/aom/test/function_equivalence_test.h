#
ifndef
AOM_TEST_FUNCTION_EQUIVALENCE_TEST_H_
#
define
AOM_TEST_FUNCTION_EQUIVALENCE_TEST_H_
#
include
<
ostream
>
#
include
"
third_party
/
googletest
/
src
/
googletest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
test
/
acm_random
.
h
"
#
include
"
test
/
util
.
h
"
using
libaom_test
:
:
ACMRandom
;
namespace
libaom_test
{
template
<
typename
T
>
struct
FuncParam
{
FuncParam
(
T
ref
=
nullptr
T
tst
=
nullptr
int
depth
=
0
)
:
ref_func
(
ref
)
tst_func
(
tst
)
bit_depth
(
depth
)
{
}
T
ref_func
;
T
tst_func
;
int
bit_depth
;
}
;
template
<
typename
T
>
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
FuncParam
<
T
>
&
p
)
{
return
os
<
<
"
bit_depth
:
"
<
<
p
.
bit_depth
<
<
"
function
:
"
<
<
reinterpret_cast
<
const
void
*
>
(
p
.
ref_func
)
<
<
"
function
:
"
<
<
reinterpret_cast
<
const
void
*
>
(
p
.
tst_func
)
;
}
template
<
typename
T
>
class
FunctionEquivalenceTest
:
public
:
:
testing
:
:
TestWithParam
<
FuncParam
<
T
>
>
{
public
:
FunctionEquivalenceTest
(
)
:
rng_
(
ACMRandom
:
:
DeterministicSeed
(
)
)
{
}
~
FunctionEquivalenceTest
(
)
override
=
default
;
void
SetUp
(
)
override
{
params_
=
this
-
>
GetParam
(
)
;
}
protected
:
ACMRandom
rng_
;
FuncParam
<
T
>
params_
;
}
;
}
#
endif
