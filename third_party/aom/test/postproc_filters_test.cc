#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
test
/
codec_factory
.
h
"
#
include
"
test
/
encode_test_driver
.
h
"
#
include
"
test
/
md5_helper
.
h
"
#
include
"
test
/
util
.
h
"
#
include
"
test
/
yuv_video_source
.
h
"
namespace
{
class
PostprocFiltersTest
:
public
:
:
libaom_test
:
:
CodecTestWith2Params
<
int
unsigned
int
>
public
:
:
libaom_test
:
:
EncoderTest
{
protected
:
PostprocFiltersTest
(
)
:
EncoderTest
(
GET_PARAM
(
0
)
)
set_skip_postproc_filtering_
(
false
)
frame_number_
(
0
)
cpu_used_
(
GET_PARAM
(
1
)
)
bd_
(
GET_PARAM
(
2
)
)
{
}
void
SetUp
(
)
override
{
InitializeConfig
(
:
:
libaom_test
:
:
kAllIntra
)
;
cfg_
.
g_input_bit_depth
=
bd_
;
}
void
PreEncodeFrameHook
(
:
:
libaom_test
:
:
VideoSource
*
video
:
:
libaom_test
:
:
Encoder
*
encoder
)
override
{
frame_number_
=
video
-
>
frame
(
)
;
if
(
frame_number_
=
=
0
)
{
encoder
-
>
Control
(
AOME_SET_CPUUSED
cpu_used_
)
;
encoder
-
>
Control
(
AOME_SET_CQ_LEVEL
kCqLevel
)
;
}
if
(
set_skip_postproc_filtering_
)
{
if
(
frame_number_
=
=
0
)
{
encoder
-
>
Control
(
AV1E_SET_SKIP_POSTPROC_FILTERING
1
)
;
}
else
if
(
frame_number_
=
=
10
)
{
encoder
-
>
Control
(
AV1E_SET_SKIP_POSTPROC_FILTERING
0
)
;
}
else
if
(
frame_number_
=
=
20
)
{
encoder
-
>
Control
(
AV1E_SET_SKIP_POSTPROC_FILTERING
1
)
;
}
}
}
void
FramePktHook
(
const
aom_codec_cx_pkt_t
*
pkt
)
override
{
:
:
libaom_test
:
:
MD5
md5_enc
;
md5_enc
.
Add
(
reinterpret_cast
<
uint8_t
*
>
(
pkt
-
>
data
.
frame
.
buf
)
pkt
-
>
data
.
frame
.
sz
)
;
md5_enc_
.
push_back
(
md5_enc
.
Get
(
)
)
;
}
void
PostEncodeFrameHook
(
:
:
libaom_test
:
:
Encoder
*
encoder
)
override
{
const
aom_image_t
*
img_enc
=
encoder
-
>
GetPreviewFrame
(
)
;
if
(
!
set_skip_postproc_filtering_
)
{
ASSERT_NE
(
img_enc
nullptr
)
;
}
else
{
if
(
frame_number_
<
10
)
{
ASSERT_EQ
(
img_enc
nullptr
)
;
}
else
if
(
frame_number_
<
20
)
{
ASSERT_NE
(
img_enc
nullptr
)
;
}
else
{
ASSERT_EQ
(
img_enc
nullptr
)
;
}
}
}
void
DoTest
(
)
{
std
:
:
unique_ptr
<
libaom_test
:
:
VideoSource
>
video
(
new
libaom_test
:
:
YUVVideoSource
(
"
niklas_640_480_30
.
yuv
"
AOM_IMG_FMT_I420
640
480
30
1
0
kFrames
)
)
;
ASSERT_NE
(
video
nullptr
)
;
set_skip_postproc_filtering_
=
false
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
video
.
get
(
)
)
)
;
std
:
:
vector
<
std
:
:
string
>
apply_postproc_filters_md5_enc
=
std
:
:
move
(
md5_enc_
)
;
md5_enc_
.
clear
(
)
;
set_skip_postproc_filtering_
=
true
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
video
.
get
(
)
)
)
;
std
:
:
vector
<
std
:
:
string
>
toggle_apply_postproc_filters_md5_enc
=
std
:
:
move
(
md5_enc_
)
;
md5_enc_
.
clear
(
)
;
ASSERT_EQ
(
apply_postproc_filters_md5_enc
toggle_apply_postproc_filters_md5_enc
)
;
}
bool
set_skip_postproc_filtering_
;
unsigned
int
frame_number_
;
std
:
:
vector
<
std
:
:
string
>
md5_enc_
;
private
:
static
constexpr
int
kFrames
=
30
;
static
constexpr
unsigned
int
kCqLevel
=
18
;
int
cpu_used_
;
unsigned
int
bd_
;
}
;
class
PostprocFiltersTestLarge
:
public
PostprocFiltersTest
{
}
;
TEST_P
(
PostprocFiltersTest
MD5Match
)
{
DoTest
(
)
;
}
TEST_P
(
PostprocFiltersTestLarge
MD5Match
)
{
DoTest
(
)
;
}
AV1_INSTANTIATE_TEST_SUITE
(
PostprocFiltersTest
:
:
testing
:
:
Values
(
9
)
:
:
testing
:
:
Values
(
8
10
)
)
;
AV1_INSTANTIATE_TEST_SUITE
(
PostprocFiltersTestLarge
:
:
testing
:
:
Values
(
3
6
)
:
:
testing
:
:
Values
(
8
10
)
)
;
}
