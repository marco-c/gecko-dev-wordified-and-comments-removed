#
include
"
av1
/
common
/
blockd
.
h
"
#
include
"
third_party
/
googletest
/
src
/
googletest
/
include
/
gtest
/
gtest
.
h
"
TEST
(
BlockdTest
GetPartitionSubsize
)
{
static
const
BLOCK_SIZE
kPartitionSubsize
[
10
]
[
BLOCK_SIZES_ALL
]
=
{
{
BLOCK_4X4
BLOCK_INVALID
BLOCK_INVALID
BLOCK_8X8
BLOCK_INVALID
BLOCK_INVALID
BLOCK_16X16
BLOCK_INVALID
BLOCK_INVALID
BLOCK_32X32
BLOCK_INVALID
BLOCK_INVALID
BLOCK_64X64
BLOCK_INVALID
BLOCK_INVALID
BLOCK_128X128
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
}
{
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_8X4
BLOCK_INVALID
BLOCK_INVALID
BLOCK_16X8
BLOCK_INVALID
BLOCK_INVALID
BLOCK_32X16
BLOCK_INVALID
BLOCK_INVALID
BLOCK_64X32
BLOCK_INVALID
BLOCK_INVALID
BLOCK_128X64
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
}
{
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_4X8
BLOCK_INVALID
BLOCK_INVALID
BLOCK_8X16
BLOCK_INVALID
BLOCK_INVALID
BLOCK_16X32
BLOCK_INVALID
BLOCK_INVALID
BLOCK_32X64
BLOCK_INVALID
BLOCK_INVALID
BLOCK_64X128
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
}
{
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_4X4
BLOCK_INVALID
BLOCK_INVALID
BLOCK_8X8
BLOCK_INVALID
BLOCK_INVALID
BLOCK_16X16
BLOCK_INVALID
BLOCK_INVALID
BLOCK_32X32
BLOCK_INVALID
BLOCK_INVALID
BLOCK_64X64
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
}
{
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_8X4
BLOCK_INVALID
BLOCK_INVALID
BLOCK_16X8
BLOCK_INVALID
BLOCK_INVALID
BLOCK_32X16
BLOCK_INVALID
BLOCK_INVALID
BLOCK_64X32
BLOCK_INVALID
BLOCK_INVALID
BLOCK_128X64
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
}
{
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_8X4
BLOCK_INVALID
BLOCK_INVALID
BLOCK_16X8
BLOCK_INVALID
BLOCK_INVALID
BLOCK_32X16
BLOCK_INVALID
BLOCK_INVALID
BLOCK_64X32
BLOCK_INVALID
BLOCK_INVALID
BLOCK_128X64
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
}
{
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_4X8
BLOCK_INVALID
BLOCK_INVALID
BLOCK_8X16
BLOCK_INVALID
BLOCK_INVALID
BLOCK_16X32
BLOCK_INVALID
BLOCK_INVALID
BLOCK_32X64
BLOCK_INVALID
BLOCK_INVALID
BLOCK_64X128
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
}
{
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_4X8
BLOCK_INVALID
BLOCK_INVALID
BLOCK_8X16
BLOCK_INVALID
BLOCK_INVALID
BLOCK_16X32
BLOCK_INVALID
BLOCK_INVALID
BLOCK_32X64
BLOCK_INVALID
BLOCK_INVALID
BLOCK_64X128
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
}
{
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_16X4
BLOCK_INVALID
BLOCK_INVALID
BLOCK_32X8
BLOCK_INVALID
BLOCK_INVALID
BLOCK_64X16
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
}
{
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_4X16
BLOCK_INVALID
BLOCK_INVALID
BLOCK_8X32
BLOCK_INVALID
BLOCK_INVALID
BLOCK_16X64
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
BLOCK_INVALID
}
}
;
for
(
int
partition
=
0
;
partition
<
10
;
partition
+
+
)
{
for
(
int
bsize
=
BLOCK_4X4
;
bsize
<
BLOCK_SIZES_ALL
;
bsize
+
+
)
{
EXPECT_EQ
(
kPartitionSubsize
[
partition
]
[
bsize
]
get_partition_subsize
(
static_cast
<
BLOCK_SIZE
>
(
bsize
)
static_cast
<
PARTITION_TYPE
>
(
partition
)
)
)
;
}
}
}
