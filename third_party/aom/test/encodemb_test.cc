#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
av1
/
encoder
/
block
.
h
"
#
include
"
av1
/
encoder
/
encodemb
.
h
"
#
include
"
av1
/
common
/
scan
.
h
"
namespace
{
void
ToScanOrder
(
TX_SIZE
tx_size
TX_TYPE
tx_type
tran_low_t
*
qcoeff_lexico
tran_low_t
*
qcoeff_scan
)
{
const
int
max_eob
=
av1_get_max_eob
(
tx_size
)
;
const
SCAN_ORDER
*
const
scan_order
=
get_scan
(
tx_size
tx_type
)
;
for
(
int
i
=
0
;
i
<
max_eob
;
+
+
i
)
{
qcoeff_scan
[
i
]
=
qcoeff_lexico
[
scan_order
-
>
scan
[
i
]
]
;
}
}
void
ToLexicoOrder
(
TX_SIZE
tx_size
TX_TYPE
tx_type
tran_low_t
*
qcoeff_scan
tran_low_t
*
qcoeff_lexico
)
{
const
int
max_eob
=
av1_get_max_eob
(
tx_size
)
;
const
SCAN_ORDER
*
const
scan_order
=
get_scan
(
tx_size
tx_type
)
;
for
(
int
i
=
0
;
i
<
max_eob
;
+
+
i
)
{
qcoeff_lexico
[
scan_order
-
>
scan
[
i
]
]
=
qcoeff_scan
[
i
]
;
}
}
void
Dropout
(
TX_SIZE
tx_size
TX_TYPE
tx_type
int
dropout_num_before
int
dropout_num_after
tran_low_t
*
qcoeff_scan
)
{
tran_low_t
qcoeff
[
MAX_TX_SQUARE
]
;
ToLexicoOrder
(
tx_size
tx_type
qcoeff_scan
qcoeff
)
;
const
int
max_eob
=
av1_get_max_eob
(
tx_size
)
;
const
int
kDequantFactor
=
10
;
tran_low_t
dqcoeff
[
MAX_TX_SQUARE
]
;
for
(
int
i
=
0
;
i
<
max_eob
;
+
+
i
)
{
dqcoeff
[
i
]
=
qcoeff
[
i
]
*
kDequantFactor
;
}
uint16_t
eob
=
max_eob
;
while
(
eob
>
0
&
&
qcoeff_scan
[
eob
-
1
]
=
=
0
)
-
-
eob
;
MACROBLOCK
mb
;
const
int
kPlane
=
0
;
const
int
kBlock
=
0
;
memset
(
&
mb
0
sizeof
(
mb
)
)
;
uint16_t
eobs
[
]
=
{
eob
}
;
mb
.
plane
[
kPlane
]
.
eobs
=
eobs
;
mb
.
plane
[
kPlane
]
.
qcoeff
=
qcoeff
;
mb
.
plane
[
kPlane
]
.
dqcoeff
=
dqcoeff
;
uint8_t
txb_entropy_ctx
[
1
]
;
mb
.
plane
[
kPlane
]
.
txb_entropy_ctx
=
txb_entropy_ctx
;
av1_dropout_qcoeff_num
(
&
mb
kPlane
kBlock
tx_size
tx_type
dropout_num_before
dropout_num_after
)
;
ToScanOrder
(
tx_size
tx_type
qcoeff
qcoeff_scan
)
;
uint16_t
new_eob
=
max_eob
;
while
(
new_eob
>
0
&
&
qcoeff_scan
[
new_eob
-
1
]
=
=
0
)
-
-
new_eob
;
EXPECT_EQ
(
new_eob
mb
.
plane
[
kPlane
]
.
eobs
[
0
]
)
;
for
(
int
i
=
0
;
i
<
max_eob
;
+
+
i
)
{
EXPECT_EQ
(
qcoeff
[
i
]
*
kDequantFactor
dqcoeff
[
i
]
)
;
}
}
void
ExpectArrayEq
(
tran_low_t
*
actual
std
:
:
vector
<
tran_low_t
>
expected
)
{
for
(
size_t
i
=
0
;
i
<
expected
.
size
(
)
;
+
+
i
)
{
EXPECT_EQ
(
expected
[
i
]
actual
[
i
]
)
<
<
"
Arrays
differ
at
index
"
<
<
i
;
}
}
static
constexpr
TX_TYPE
kTxType
=
DCT_DCT
;
TEST
(
DropoutTest
KeepsLargeCoeffs
)
{
const
TX_SIZE
tx_size
=
TX_8X4
;
const
uint32_t
dropout_num_before
=
4
;
const
uint32_t
dropout_num_after
=
6
;
tran_low_t
qcoeff_scan
[
]
=
{
0
0
0
0
0
0
42
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
-
30
0
0
0
0
0
0
0
0
}
;
Dropout
(
tx_size
kTxType
dropout_num_before
dropout_num_after
qcoeff_scan
)
;
ExpectArrayEq
(
qcoeff_scan
{
0
0
0
0
0
0
42
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
-
30
0
0
0
0
0
0
0
0
}
)
;
}
TEST
(
DropoutTest
RemovesSmallIsolatedCoeffs
)
{
const
TX_SIZE
tx_size
=
TX_8X4
;
const
uint32_t
dropout_num_before
=
4
;
const
uint32_t
dropout_num_after
=
6
;
tran_low_t
qcoeff_scan
[
]
=
{
0
0
0
0
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
-
2
0
0
0
0
0
0
0
0
0
0
0
}
;
Dropout
(
tx_size
kTxType
dropout_num_before
dropout_num_after
qcoeff_scan
)
;
ExpectArrayEq
(
qcoeff_scan
{
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
}
)
;
}
TEST
(
DropoutTest
KeepsSmallCoeffsAmongLargeOnes
)
{
const
TX_SIZE
tx_size
=
TX_8X4
;
const
uint32_t
dropout_num_before
=
4
;
const
uint32_t
dropout_num_after
=
6
;
tran_low_t
qcoeff_scan
[
]
=
{
1
0
0
0
-
5
0
0
-
1
0
0
0
10
0
0
2
0
0
0
0
0
0
0
0
0
0
-
2
0
0
0
0
0
0
}
;
Dropout
(
tx_size
kTxType
dropout_num_before
dropout_num_after
qcoeff_scan
)
;
ExpectArrayEq
(
qcoeff_scan
{
1
0
0
0
-
5
0
0
-
1
0
0
0
10
0
0
2
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
}
)
;
}
TEST
(
DropoutTest
KeepsSmallCoeffsCloseToStartOrEnd
)
{
const
TX_SIZE
tx_size
=
TX_8X4
;
const
uint32_t
dropout_num_before
=
4
;
const
uint32_t
dropout_num_after
=
6
;
tran_low_t
qcoeff_scan
[
]
=
{
0
0
-
1
0
0
0
0
0
0
0
0
10
0
0
0
0
0
0
0
2
0
0
0
0
0
0
0
0
0
0
-
1
0
}
;
Dropout
(
tx_size
kTxType
dropout_num_before
dropout_num_after
qcoeff_scan
)
;
ExpectArrayEq
(
qcoeff_scan
{
0
0
-
1
0
0
0
0
0
0
0
0
10
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
-
1
0
}
)
;
}
TEST
(
DropoutTest
RemovesSmallClusterOfCoeffs
)
{
const
TX_SIZE
tx_size
=
TX_8X4
;
const
uint32_t
dropout_num_before
=
4
;
const
uint32_t
dropout_num_after
=
6
;
tran_low_t
qcoeff_scan_two
[
]
=
{
0
0
0
0
1
0
0
-
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
}
;
Dropout
(
tx_size
kTxType
dropout_num_before
dropout_num_after
qcoeff_scan_two
)
;
ExpectArrayEq
(
qcoeff_scan_two
{
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
}
)
;
}
TEST
(
DropoutTest
KeepsLargeClusterOfCoeffs
)
{
const
TX_SIZE
tx_size
=
TX_8X4
;
const
uint32_t
dropout_num_before
=
4
;
const
uint32_t
dropout_num_after
=
6
;
tran_low_t
qcoeff_scan
[
]
=
{
0
0
0
0
1
0
1
-
1
0
0
0
0
0
0
0
0
0
0
0
0
0
-
2
0
0
0
0
0
0
0
0
0
0
}
;
Dropout
(
tx_size
kTxType
dropout_num_before
dropout_num_after
qcoeff_scan
)
;
ExpectArrayEq
(
qcoeff_scan
{
0
0
0
0
1
0
1
-
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
}
)
;
}
TEST
(
DropoutTest
NumBeforeLargerThanNumAfter
)
{
const
TX_SIZE
tx_size
=
TX_8X4
;
const
uint32_t
dropout_num_before
=
4
;
const
uint32_t
dropout_num_after
=
2
;
tran_low_t
qcoeff_scan
[
]
=
{
0
0
0
0
1
0
0
0
-
2
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
}
;
Dropout
(
tx_size
kTxType
dropout_num_before
dropout_num_after
qcoeff_scan
)
;
ExpectArrayEq
(
qcoeff_scan
{
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
}
)
;
}
TEST
(
DropoutTest
ComplexTest
)
{
const
TX_SIZE
tx_size
=
TX_8X8
;
const
uint32_t
dropout_num_before
=
4
;
const
uint32_t
dropout_num_after
=
2
;
tran_low_t
qcoeff_scan
[
]
=
{
1
12
0
0
0
0
1
0
0
0
0
-
12
0
0
0
1
0
0
-
2
0
1
0
0
1
0
0
0
0
5
0
-
1
0
0
0
0
1
0
0
0
-
1
0
0
0
0
2
0
0
0
0
1
0
0
0
5
0
0
0
0
1
1
0
0
0
-
2
}
;
Dropout
(
tx_size
kTxType
dropout_num_before
dropout_num_after
qcoeff_scan
)
;
ExpectArrayEq
(
qcoeff_scan
{
1
12
0
0
0
0
0
0
0
0
0
-
12
0
0
0
1
0
0
-
2
0
1
0
0
1
0
0
0
0
5
0
-
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
5
0
0
0
0
0
0
0
0
0
-
2
}
)
;
}
}
