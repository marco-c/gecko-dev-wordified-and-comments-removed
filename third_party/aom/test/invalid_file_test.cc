#
include
<
cstdio
>
#
include
<
string
>
#
include
"
third_party
/
googletest
/
src
/
googletest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
test
/
codec_factory
.
h
"
#
include
"
test
/
ivf_video_source
.
h
"
#
include
"
test
/
util
.
h
"
#
include
"
test
/
video_source
.
h
"
namespace
{
struct
DecodeParam
{
int
threads
;
const
char
*
filename
;
}
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
DecodeParam
&
dp
)
{
return
os
<
<
"
threads
:
"
<
<
dp
.
threads
<
<
"
file
:
"
<
<
dp
.
filename
;
}
class
InvalidFileTest
:
public
:
:
libaom_test
:
:
DecoderTest
public
:
:
libaom_test
:
:
CodecTestWithParam
<
DecodeParam
>
{
protected
:
InvalidFileTest
(
)
:
DecoderTest
(
GET_PARAM
(
0
)
)
res_file_
(
NULL
)
{
}
virtual
~
InvalidFileTest
(
)
{
if
(
res_file_
!
=
NULL
)
fclose
(
res_file_
)
;
}
void
OpenResFile
(
const
std
:
:
string
&
res_file_name
)
{
res_file_
=
libaom_test
:
:
OpenTestDataFile
(
res_file_name
)
;
ASSERT_TRUE
(
res_file_
!
=
NULL
)
<
<
"
Result
file
open
failed
.
Filename
:
"
<
<
res_file_name
;
}
virtual
bool
HandleDecodeResult
(
const
aom_codec_err_t
res_dec
const
libaom_test
:
:
CompressedVideoSource
&
video
libaom_test
:
:
Decoder
*
decoder
)
{
EXPECT_TRUE
(
res_file_
!
=
NULL
)
;
int
expected_res_dec
=
-
1
;
const
int
res
=
fscanf
(
res_file_
"
%
d
"
&
expected_res_dec
)
;
EXPECT_NE
(
res
EOF
)
<
<
"
Read
result
data
failed
"
;
if
(
expected_res_dec
!
=
-
1
)
{
const
DecodeParam
input
=
GET_PARAM
(
1
)
;
if
(
input
.
threads
>
1
)
{
EXPECT_TRUE
(
res_dec
=
=
expected_res_dec
|
|
res_dec
=
=
AOM_CODEC_CORRUPT_FRAME
)
<
<
"
Results
don
'
t
match
:
frame
number
=
"
<
<
video
.
frame_number
(
)
<
<
"
.
(
"
<
<
decoder
-
>
DecodeError
(
)
<
<
"
)
.
Expected
:
"
<
<
expected_res_dec
<
<
"
or
"
<
<
AOM_CODEC_CORRUPT_FRAME
;
}
else
{
EXPECT_EQ
(
expected_res_dec
res_dec
)
<
<
"
Results
don
'
t
match
:
frame
number
=
"
<
<
video
.
frame_number
(
)
<
<
"
.
(
"
<
<
decoder
-
>
DecodeError
(
)
<
<
"
)
"
;
}
}
return
!
HasFailure
(
)
;
}
virtual
void
HandlePeekResult
(
libaom_test
:
:
Decoder
*
const
libaom_test
:
:
CompressedVideoSource
*
const
aom_codec_err_t
)
{
}
void
RunTest
(
)
{
const
DecodeParam
input
=
GET_PARAM
(
1
)
;
aom_codec_dec_cfg_t
cfg
=
{
0
0
0
CONFIG_LOWBITDEPTH
{
1
}
}
;
cfg
.
threads
=
input
.
threads
;
const
std
:
:
string
filename
=
input
.
filename
;
libaom_test
:
:
IVFVideoSource
decode_video
(
filename
)
;
decode_video
.
Init
(
)
;
const
std
:
:
string
res_filename
=
filename
+
"
.
res
"
;
OpenResFile
(
res_filename
)
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
decode_video
cfg
)
)
;
}
private
:
FILE
*
res_file_
;
}
;
TEST_P
(
InvalidFileTest
ReturnCode
)
{
RunTest
(
)
;
}
const
DecodeParam
kAV1InvalidFileTests
[
]
=
{
{
1
"
invalid
-
bug
-
1814
.
ivf
"
}
{
4
"
invalid
-
oss
-
fuzz
-
9463
.
ivf
"
}
{
1
"
invalid
-
oss
-
fuzz
-
9482
.
ivf
"
}
{
1
"
invalid
-
oss
-
fuzz
-
9720
.
ivf
"
}
{
1
"
invalid
-
oss
-
fuzz
-
10061
.
ivf
"
}
{
1
"
invalid
-
oss
-
fuzz
-
10117
-
mc
-
buf
-
use
-
highbd
.
ivf
"
}
{
1
"
invalid
-
oss
-
fuzz
-
10227
.
ivf
"
}
}
;
AV1_INSTANTIATE_TEST_CASE
(
InvalidFileTest
:
:
testing
:
:
ValuesIn
(
kAV1InvalidFileTests
)
)
;
}
