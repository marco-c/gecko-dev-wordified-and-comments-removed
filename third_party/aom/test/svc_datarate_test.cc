#
include
<
climits
>
#
include
<
vector
>
#
include
"
config
/
aom_config
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
test
/
codec_factory
.
h
"
#
include
"
test
/
datarate_test
.
h
"
#
include
"
test
/
encode_test_driver
.
h
"
#
include
"
test
/
i420_video_source
.
h
"
#
include
"
test
/
util
.
h
"
#
include
"
test
/
y4m_video_source
.
h
"
#
include
"
aom
/
aom_codec
.
h
"
#
include
"
av1
/
common
/
enums
.
h
"
#
include
"
av1
/
encoder
/
encoder
.
h
"
namespace
datarate_test
{
namespace
{
struct
FrameInfo
{
FrameInfo
(
aom_codec_pts_t
_pts
unsigned
int
_w
unsigned
int
_h
)
:
pts
(
_pts
)
w
(
_w
)
h
(
_h
)
{
}
aom_codec_pts_t
pts
;
unsigned
int
w
;
unsigned
int
h
;
}
;
void
ScaleForFrameNumber
(
unsigned
int
frame
unsigned
int
initial_w
unsigned
int
initial_h
unsigned
int
*
w
unsigned
int
*
h
int
resize_pattern
)
{
*
w
=
initial_w
;
*
h
=
initial_h
;
if
(
resize_pattern
=
=
1
)
{
if
(
frame
<
50
)
{
*
w
=
initial_w
/
4
;
*
h
=
initial_h
/
4
;
}
else
if
(
frame
<
100
)
{
*
w
=
initial_w
/
2
;
*
h
=
initial_h
/
2
;
}
else
if
(
frame
<
150
)
{
*
w
=
initial_w
;
*
h
=
initial_h
;
}
else
if
(
frame
<
200
)
{
*
w
=
initial_w
/
4
;
*
h
=
initial_h
/
4
;
}
else
if
(
frame
<
250
)
{
*
w
=
initial_w
/
2
;
*
h
=
initial_h
/
2
;
}
}
else
if
(
resize_pattern
=
=
2
)
{
if
(
frame
<
50
)
{
*
w
=
initial_w
/
2
;
*
h
=
initial_h
/
2
;
}
else
if
(
frame
<
100
)
{
*
w
=
initial_w
/
4
;
*
h
=
initial_h
/
4
;
}
else
if
(
frame
<
150
)
{
*
w
=
initial_w
;
*
h
=
initial_h
;
}
else
if
(
frame
<
200
)
{
*
w
=
initial_w
/
2
;
*
h
=
initial_h
/
2
;
}
else
if
(
frame
<
250
)
{
*
w
=
initial_w
/
4
;
*
h
=
initial_h
/
4
;
}
}
}
class
ResizingVideoSource
:
public
:
:
libaom_test
:
:
DummyVideoSource
{
public
:
explicit
ResizingVideoSource
(
int
external_resize_pattern
)
{
external_resize_pattern_
=
external_resize_pattern
;
SetSize
(
1280
720
)
;
limit_
=
300
;
}
~
ResizingVideoSource
(
)
override
=
default
;
protected
:
void
Next
(
)
override
{
+
+
frame_
;
unsigned
int
width
=
0
;
unsigned
int
height
=
0
;
libaom_test
:
:
ACMRandom
rnd
(
libaom_test
:
:
ACMRandom
:
:
DeterministicSeed
(
)
)
;
ScaleForFrameNumber
(
frame_
1280
720
&
width
&
height
external_resize_pattern_
)
;
SetSize
(
width
height
)
;
FillFrame
(
)
;
unsigned
char
*
image
=
img_
-
>
planes
[
0
]
;
for
(
size_t
i
=
0
;
i
<
raw_sz_
;
+
+
i
)
{
image
[
i
]
=
rnd
.
Rand8
(
)
;
}
}
private
:
int
external_resize_pattern_
;
}
;
class
DatarateTestSVC
:
public
:
:
libaom_test
:
:
CodecTestWith4Params
<
libaom_test
:
:
TestMode
int
unsigned
int
int
>
public
DatarateTest
{
public
:
DatarateTestSVC
(
)
:
DatarateTest
(
GET_PARAM
(
0
)
)
{
set_cpu_used_
=
GET_PARAM
(
2
)
;
aq_mode_
=
GET_PARAM
(
3
)
;
}
protected
:
void
SetUp
(
)
override
{
InitializeConfig
(
GET_PARAM
(
1
)
)
;
ResetModel
(
)
;
}
void
DecompressedFrameHook
(
const
aom_image_t
&
img
aom_codec_pts_t
pts
)
override
{
frame_info_list_
.
push_back
(
FrameInfo
(
pts
img
.
d_w
img
.
d_h
)
)
;
+
+
decoded_nframes_
;
}
std
:
:
vector
<
FrameInfo
>
frame_info_list_
;
int
GetNumSpatialLayers
(
)
override
{
return
number_spatial_layers_
;
}
void
ResetModel
(
)
override
{
DatarateTest
:
:
ResetModel
(
)
;
layer_frame_cnt_
=
0
;
superframe_cnt_
=
0
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
1
;
for
(
int
i
=
0
;
i
<
AOM_MAX_LAYERS
;
i
+
+
)
{
target_layer_bitrate_
[
i
]
=
0
;
effective_datarate_tl
[
i
]
=
0
.
0
;
}
memset
(
&
layer_id_
0
sizeof
(
aom_svc_layer_id_t
)
)
;
memset
(
&
svc_params_
0
sizeof
(
aom_svc_params_t
)
)
;
memset
(
&
ref_frame_config_
0
sizeof
(
aom_svc_ref_frame_config_t
)
)
;
memset
(
&
ref_frame_comp_pred_
0
sizeof
(
aom_svc_ref_frame_comp_pred_t
)
)
;
drop_frames_
=
0
;
for
(
int
i
=
0
;
i
<
1000
;
i
+
+
)
drop_frames_list_
[
i
]
=
1000
;
decoded_nframes_
=
0
;
mismatch_nframes_
=
0
;
mismatch_psnr_
=
0
.
0
;
set_frame_level_er_
=
0
;
multi_ref_
=
0
;
use_fixed_mode_svc_
=
0
;
comp_pred_
=
0
;
dynamic_enable_disable_mode_
=
0
;
intra_only_
=
0
;
intra_only_single_layer_
=
false
;
frame_to_start_decoding_
=
0
;
layer_to_decode_
=
0
;
frame_sync_
=
0
;
current_video_frame_
=
0
;
screen_mode_
=
0
;
rps_mode_
=
0
;
rps_recovery_frame_
=
0
;
user_define_frame_qp_
=
0
;
set_speed_per_layer_
=
false
;
simulcast_mode_
=
false
;
use_last_as_scaled_
=
false
;
use_last_as_scaled_single_ref_
=
false
;
external_resize_dynamic_drop_layer_
=
false
;
external_resize_pattern_
=
0
;
}
void
PreEncodeFrameHook
(
:
:
libaom_test
:
:
VideoSource
*
video
:
:
libaom_test
:
:
Encoder
*
encoder
)
override
{
int
spatial_layer_id
=
0
;
current_video_frame_
=
video
-
>
frame
(
)
;
if
(
video
-
>
frame
(
)
=
=
0
&
&
layer_frame_cnt_
=
=
0
)
{
initialize_svc
(
number_temporal_layers_
number_spatial_layers_
&
svc_params_
)
;
if
(
dynamic_enable_disable_mode_
=
=
1
)
{
svc_params_
.
layer_target_bitrate
[
2
]
=
0
;
cfg_
.
rc_target_bitrate
-
=
target_layer_bitrate_
[
2
]
;
}
encoder
-
>
Control
(
AV1E_SET_SVC_PARAMS
&
svc_params_
)
;
encoder
-
>
Control
(
AV1E_SET_ENABLE_ORDER_HINT
0
)
;
encoder
-
>
Control
(
AV1E_SET_ENABLE_TPL_MODEL
0
)
;
encoder
-
>
Control
(
AV1E_SET_DELTAQ_MODE
0
)
;
if
(
cfg_
.
g_threads
>
1
)
{
if
(
auto_tiles_
)
{
encoder
-
>
Control
(
AV1E_SET_AUTO_TILES
1
)
;
}
else
{
encoder
-
>
Control
(
AV1E_SET_TILE_COLUMNS
tile_columns_
)
;
encoder
-
>
Control
(
AV1E_SET_TILE_ROWS
tile_rows_
)
;
}
encoder
-
>
Control
(
AV1E_SET_ROW_MT
1
)
;
}
if
(
screen_mode_
)
{
encoder
-
>
Control
(
AV1E_SET_TUNE_CONTENT
AOM_CONTENT_SCREEN
)
;
}
encoder
-
>
Control
(
AV1E_SET_POSTENCODE_DROP_RTC
1
)
;
if
(
external_resize_dynamic_drop_layer_
)
{
encoder
-
>
Control
(
AV1E_SET_POSTENCODE_DROP_RTC
0
)
;
DatarateTest
:
:
PreEncodeFrameHook
(
video
encoder
)
;
video
-
>
Next
(
)
;
}
}
if
(
number_spatial_layers_
=
=
2
)
{
spatial_layer_id
=
(
layer_frame_cnt_
%
2
=
=
0
)
?
0
:
1
;
}
else
if
(
number_spatial_layers_
=
=
3
)
{
spatial_layer_id
=
(
layer_frame_cnt_
%
3
=
=
0
)
?
0
:
(
(
layer_frame_cnt_
-
1
)
%
3
=
=
0
)
?
1
:
2
;
}
frame_flags_
=
set_layer_pattern
(
video
-
>
frame
(
)
&
layer_id_
&
ref_frame_config_
&
ref_frame_comp_pred_
spatial_layer_id
multi_ref_
comp_pred_
(
video
-
>
frame
(
)
%
cfg_
.
kf_max_dist
)
=
=
0
dynamic_enable_disable_mode_
rps_mode_
rps_recovery_frame_
simulcast_mode_
use_last_as_scaled_
use_last_as_scaled_single_ref_
)
;
if
(
intra_only_
=
=
1
&
&
frame_sync_
>
0
)
{
if
(
spatial_layer_id
=
=
0
&
&
video
-
>
frame
(
)
=
=
frame_sync_
)
{
ref_frame_config_
.
ref_idx
[
0
]
=
0
;
ref_frame_config_
.
ref_idx
[
3
]
=
3
;
ref_frame_config_
.
refresh
[
0
]
=
1
;
ref_frame_config_
.
refresh
[
3
]
=
1
;
for
(
int
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config_
.
reference
[
i
]
=
0
;
}
}
if
(
intra_only_
&
&
video
-
>
frame
(
)
=
=
50
&
&
spatial_layer_id
=
=
1
)
{
for
(
int
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config_
.
reference
[
i
]
=
0
;
}
encoder
-
>
Control
(
AV1E_SET_SVC_LAYER_ID
&
layer_id_
)
;
if
(
!
use_fixed_mode_svc_
)
{
encoder
-
>
Control
(
AV1E_SET_SVC_REF_FRAME_CONFIG
&
ref_frame_config_
)
;
encoder
-
>
Control
(
AV1E_SET_SVC_REF_FRAME_COMP_PRED
&
ref_frame_comp_pred_
)
;
}
if
(
set_speed_per_layer_
)
{
int
speed_per_layer
=
10
;
if
(
layer_id_
.
spatial_layer_id
=
=
0
)
{
if
(
layer_id_
.
temporal_layer_id
=
=
1
)
speed_per_layer
=
7
;
if
(
layer_id_
.
temporal_layer_id
=
=
2
)
speed_per_layer
=
8
;
}
else
if
(
layer_id_
.
spatial_layer_id
=
=
1
)
{
if
(
layer_id_
.
temporal_layer_id
=
=
0
)
speed_per_layer
=
7
;
if
(
layer_id_
.
temporal_layer_id
=
=
1
)
speed_per_layer
=
8
;
if
(
layer_id_
.
temporal_layer_id
=
=
2
)
speed_per_layer
=
9
;
}
else
if
(
layer_id_
.
spatial_layer_id
=
=
2
)
{
if
(
layer_id_
.
temporal_layer_id
=
=
0
)
speed_per_layer
=
8
;
if
(
layer_id_
.
temporal_layer_id
=
=
1
)
speed_per_layer
=
9
;
if
(
layer_id_
.
temporal_layer_id
=
=
2
)
speed_per_layer
=
10
;
}
encoder
-
>
Control
(
AOME_SET_CPUUSED
speed_per_layer
)
;
}
if
(
set_frame_level_er_
)
{
int
mode
=
(
layer_id_
.
spatial_layer_id
>
0
|
|
layer_id_
.
temporal_layer_id
>
0
)
;
encoder
-
>
Control
(
AV1E_SET_ERROR_RESILIENT_MODE
mode
)
;
}
if
(
dynamic_enable_disable_mode_
=
=
1
)
{
if
(
layer_frame_cnt_
=
=
300
&
&
spatial_layer_id
=
=
0
)
{
svc_params_
.
layer_target_bitrate
[
2
]
=
target_layer_bitrate_
[
2
]
;
cfg_
.
rc_target_bitrate
+
=
target_layer_bitrate_
[
2
]
;
encoder
-
>
Config
(
&
cfg_
)
;
encoder
-
>
Control
(
AV1E_SET_SVC_PARAMS
&
svc_params_
)
;
}
}
else
if
(
dynamic_enable_disable_mode_
=
=
2
)
{
if
(
layer_frame_cnt_
=
=
300
&
&
spatial_layer_id
=
=
0
)
{
svc_params_
.
layer_target_bitrate
[
2
]
=
0
;
cfg_
.
rc_target_bitrate
-
=
target_layer_bitrate_
[
2
]
;
encoder
-
>
Config
(
&
cfg_
)
;
encoder
-
>
Control
(
AV1E_SET_SVC_PARAMS
&
svc_params_
)
;
}
else
if
(
layer_frame_cnt_
=
=
600
&
&
spatial_layer_id
=
=
0
)
{
svc_params_
.
layer_target_bitrate
[
2
]
=
target_layer_bitrate_
[
2
]
;
cfg_
.
rc_target_bitrate
+
=
target_layer_bitrate_
[
2
]
;
encoder
-
>
Config
(
&
cfg_
)
;
encoder
-
>
Control
(
AV1E_SET_SVC_PARAMS
&
svc_params_
)
;
}
}
if
(
external_resize_dynamic_drop_layer_
)
{
frame_flags_
=
0
;
for
(
int
i
=
0
;
i
<
9
;
+
+
i
)
{
svc_params_
.
min_quantizers
[
i
]
=
20
;
svc_params_
.
max_quantizers
[
i
]
=
56
;
}
if
(
layer_id_
.
spatial_layer_id
=
=
0
&
&
(
video
-
>
frame
(
)
=
=
1
|
|
video
-
>
frame
(
)
=
=
150
)
)
{
top_sl_width_
=
video
-
>
img
(
)
-
>
d_w
;
top_sl_height_
=
video
-
>
img
(
)
-
>
d_h
;
for
(
int
i
=
0
;
i
<
9
;
+
+
i
)
{
bitrate_layer_
[
i
]
=
svc_params_
.
layer_target_bitrate
[
i
]
;
}
if
(
external_resize_pattern_
=
=
1
)
{
cfg_
.
rc_target_bitrate
-
=
svc_params_
.
layer_target_bitrate
[
5
]
+
svc_params_
.
layer_target_bitrate
[
8
]
;
for
(
int
i
=
3
;
i
<
9
;
+
+
i
)
{
svc_params_
.
layer_target_bitrate
[
i
]
=
0
;
}
for
(
int
sl
=
0
;
sl
<
3
;
sl
+
+
)
{
svc_params_
.
scaling_factor_num
[
sl
]
=
1
;
svc_params_
.
scaling_factor_den
[
sl
]
=
1
;
}
}
else
if
(
external_resize_pattern_
=
=
2
)
{
cfg_
.
rc_target_bitrate
-
=
svc_params_
.
layer_target_bitrate
[
8
]
;
for
(
int
i
=
6
;
i
<
9
;
+
+
i
)
{
svc_params_
.
layer_target_bitrate
[
i
]
=
0
;
}
svc_params_
.
scaling_factor_num
[
0
]
=
1
;
svc_params_
.
scaling_factor_den
[
0
]
=
2
;
svc_params_
.
scaling_factor_num
[
1
]
=
1
;
svc_params_
.
scaling_factor_den
[
1
]
=
1
;
svc_params_
.
scaling_factor_num
[
2
]
=
1
;
svc_params_
.
scaling_factor_den
[
2
]
=
1
;
}
encoder
-
>
Config
(
&
cfg_
)
;
encoder
-
>
Control
(
AV1E_SET_SVC_PARAMS
&
svc_params_
)
;
}
else
if
(
layer_id_
.
spatial_layer_id
=
=
0
&
&
(
video
-
>
frame
(
)
=
=
50
|
|
video
-
>
frame
(
)
=
=
200
)
)
{
top_sl_width_
=
video
-
>
img
(
)
-
>
d_w
;
top_sl_height_
=
video
-
>
img
(
)
-
>
d_h
;
if
(
external_resize_pattern_
=
=
1
)
{
cfg_
.
rc_target_bitrate
+
=
bitrate_layer_
[
5
]
;
for
(
int
i
=
3
;
i
<
6
;
+
+
i
)
{
svc_params_
.
layer_target_bitrate
[
i
]
=
bitrate_layer_
[
i
]
;
}
svc_params_
.
scaling_factor_num
[
0
]
=
1
;
svc_params_
.
scaling_factor_den
[
0
]
=
2
;
svc_params_
.
scaling_factor_num
[
1
]
=
1
;
svc_params_
.
scaling_factor_den
[
1
]
=
1
;
svc_params_
.
scaling_factor_num
[
2
]
=
1
;
svc_params_
.
scaling_factor_den
[
2
]
=
1
;
}
else
if
(
external_resize_pattern_
=
=
2
)
{
cfg_
.
rc_target_bitrate
-
=
bitrate_layer_
[
5
]
;
for
(
int
i
=
3
;
i
<
6
;
+
+
i
)
{
svc_params_
.
layer_target_bitrate
[
i
]
=
0
;
}
for
(
int
sl
=
0
;
sl
<
3
;
sl
+
+
)
{
svc_params_
.
scaling_factor_num
[
sl
]
=
1
;
svc_params_
.
scaling_factor_den
[
sl
]
=
1
;
}
}
encoder
-
>
Config
(
&
cfg_
)
;
encoder
-
>
Control
(
AV1E_SET_SVC_PARAMS
&
svc_params_
)
;
}
else
if
(
layer_id_
.
spatial_layer_id
=
=
0
&
&
(
video
-
>
frame
(
)
=
=
100
|
|
video
-
>
frame
(
)
=
=
250
)
)
{
top_sl_width_
=
video
-
>
img
(
)
-
>
d_w
;
top_sl_height_
=
video
-
>
img
(
)
-
>
d_h
;
cfg_
.
rc_target_bitrate
=
bitrate_layer_
[
2
]
+
bitrate_layer_
[
5
]
+
bitrate_layer_
[
8
]
;
for
(
int
i
=
0
;
i
<
9
;
+
+
i
)
{
svc_params_
.
layer_target_bitrate
[
i
]
=
bitrate_layer_
[
i
]
;
}
svc_params_
.
scaling_factor_num
[
0
]
=
1
;
svc_params_
.
scaling_factor_den
[
0
]
=
4
;
svc_params_
.
scaling_factor_num
[
1
]
=
1
;
svc_params_
.
scaling_factor_den
[
1
]
=
2
;
svc_params_
.
scaling_factor_num
[
2
]
=
1
;
svc_params_
.
scaling_factor_den
[
2
]
=
1
;
encoder
-
>
Config
(
&
cfg_
)
;
encoder
-
>
Control
(
AV1E_SET_SVC_PARAMS
&
svc_params_
)
;
}
}
layer_frame_cnt_
+
+
;
DatarateTest
:
:
PreEncodeFrameHook
(
video
encoder
)
;
if
(
user_define_frame_qp_
)
{
frame_qp_
=
rnd_
.
PseudoUniform
(
63
)
;
encoder
-
>
Control
(
AV1E_SET_QUANTIZER_ONE_PASS
frame_qp_
)
;
}
}
void
PostEncodeFrameHook
(
:
:
libaom_test
:
:
Encoder
*
encoder
)
override
{
int
num_operating_points
;
encoder
-
>
Control
(
AV1E_GET_NUM_OPERATING_POINTS
&
num_operating_points
)
;
ASSERT_EQ
(
num_operating_points
number_temporal_layers_
*
number_spatial_layers_
)
;
if
(
user_define_frame_qp_
)
{
if
(
current_video_frame_
>
=
static_cast
<
unsigned
int
>
(
total_frame_
)
)
return
;
int
qp
;
encoder
-
>
Control
(
AOME_GET_LAST_QUANTIZER_64
&
qp
)
;
ASSERT_EQ
(
qp
frame_qp_
)
;
}
}
void
FramePktHook
(
const
aom_codec_cx_pkt_t
*
pkt
)
override
{
const
size_t
frame_size_in_bits
=
pkt
-
>
data
.
frame
.
sz
*
8
;
for
(
int
i
=
layer_id_
.
temporal_layer_id
;
i
<
number_temporal_layers_
;
i
+
+
)
{
int
layer
=
layer_id_
.
spatial_layer_id
*
number_temporal_layers_
+
i
;
effective_datarate_tl
[
layer
]
+
=
1
.
0
*
frame_size_in_bits
;
}
if
(
layer_id_
.
spatial_layer_id
=
=
number_spatial_layers_
-
1
)
{
last_pts_
=
pkt
-
>
data
.
frame
.
pts
;
superframe_cnt_
+
+
;
}
if
(
simulcast_mode_
&
&
superframe_cnt_
=
=
(
int
)
frame_to_start_decoding_
)
{
if
(
layer_id_
.
spatial_layer_id
>
0
)
{
EXPECT_NE
(
pkt
-
>
data
.
frame
.
flags
&
AOM_FRAME_IS_KEY
AOM_FRAME_IS_KEY
)
;
}
else
if
(
layer_id_
.
spatial_layer_id
=
=
0
)
{
EXPECT_EQ
(
pkt
-
>
data
.
frame
.
flags
&
AOM_FRAME_IS_KEY
AOM_FRAME_IS_KEY
)
;
}
}
if
(
external_resize_dynamic_drop_layer_
)
{
if
(
layer_frame_cnt_
>
1
)
{
EXPECT_NE
(
pkt
-
>
data
.
frame
.
flags
&
AOM_FRAME_IS_KEY
AOM_FRAME_IS_KEY
)
;
}
}
}
void
EndPassHook
(
)
override
{
duration_
=
(
(
last_pts_
+
1
)
*
timebase_
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
effective_datarate_tl
[
i
]
=
(
effective_datarate_tl
[
i
]
/
1000
)
/
duration_
;
}
}
bool
DoDecode
(
)
const
override
{
if
(
drop_frames_
>
0
)
{
for
(
unsigned
int
i
=
0
;
i
<
drop_frames_
;
+
+
i
)
{
if
(
drop_frames_list_
[
i
]
=
=
(
unsigned
int
)
superframe_cnt_
)
{
std
:
:
cout
<
<
"
Skipping
decoding
frame
:
"
<
<
drop_frames_list_
[
i
]
<
<
"
\
n
"
;
return
false
;
}
}
}
else
if
(
intra_only_
=
=
1
)
{
if
(
current_video_frame_
<
frame_to_start_decoding_
)
return
false
;
if
(
layer_to_decode_
=
=
0
&
&
frame_sync_
>
0
&
&
(
layer_frame_cnt_
-
1
)
%
3
!
=
0
)
return
false
;
}
else
if
(
simulcast_mode_
)
{
if
(
current_video_frame_
<
frame_to_start_decoding_
)
return
false
;
if
(
layer_id_
.
spatial_layer_id
<
(
int
)
layer_to_decode_
)
return
false
;
}
return
true
;
}
void
MismatchHook
(
const
aom_image_t
*
img1
const
aom_image_t
*
img2
)
override
{
double
mismatch_psnr
=
compute_psnr
(
img1
img2
)
;
mismatch_psnr_
+
=
mismatch_psnr
;
+
+
mismatch_nframes_
;
}
unsigned
int
GetMismatchFrames
(
)
{
return
mismatch_nframes_
;
}
unsigned
int
GetDecodedFrames
(
)
{
return
decoded_nframes_
;
}
static
void
ref_config_rps
(
aom_svc_ref_frame_config_t
*
ref_frame_config
int
frame_cnt
int
rps_recovery_frame
)
{
int
last_idx
=
0
;
int
last_idx_refresh
=
0
;
int
gld_idx
=
0
;
int
alt_ref_idx
=
0
;
const
int
lag_alt
=
4
;
const
int
lag_gld
=
8
;
const
int
sh
=
8
;
if
(
frame_cnt
>
1
)
last_idx
=
(
frame_cnt
-
1
)
%
sh
;
last_idx_refresh
=
frame_cnt
%
sh
;
if
(
frame_cnt
>
lag_gld
)
gld_idx
=
(
frame_cnt
-
lag_gld
)
%
sh
;
if
(
frame_cnt
>
lag_alt
)
alt_ref_idx
=
(
frame_cnt
-
lag_alt
)
%
sh
;
for
(
int
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
last_idx
;
ref_frame_config
-
>
ref_idx
[
0
]
=
last_idx
;
ref_frame_config
-
>
ref_idx
[
1
]
=
last_idx_refresh
;
ref_frame_config
-
>
ref_idx
[
3
]
=
gld_idx
;
ref_frame_config
-
>
ref_idx
[
6
]
=
alt_ref_idx
;
ref_frame_config
-
>
refresh
[
last_idx_refresh
]
=
1
;
ref_frame_config
-
>
reference
[
0
]
=
1
;
ref_frame_config
-
>
reference
[
6
]
=
1
;
ref_frame_config
-
>
reference
[
3
]
=
1
;
if
(
frame_cnt
=
=
rps_recovery_frame
)
{
ref_frame_config
-
>
reference
[
0
]
=
0
;
ref_frame_config
-
>
reference
[
6
]
=
0
;
ref_frame_config
-
>
reference
[
3
]
=
1
;
}
else
if
(
frame_cnt
>
rps_recovery_frame
&
&
frame_cnt
<
rps_recovery_frame
+
8
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
ref_frame_config
-
>
reference
[
6
]
=
0
;
ref_frame_config
-
>
reference
[
3
]
=
0
;
}
}
static
void
ref_config_simulcast3SL3TL
(
aom_svc_ref_frame_config_t
*
ref_frame_config
aom_svc_layer_id_t
*
layer_id
int
is_key_frame
int
superframe_cnt
)
{
int
i
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
reference
[
i
]
=
0
;
for
(
i
=
0
;
i
<
REF_FRAMES
;
i
+
+
)
ref_frame_config
-
>
refresh
[
i
]
=
0
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
if
(
is_key_frame
)
{
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
ref_frame_config
-
>
ref_idx
[
0
]
=
0
;
ref_frame_config
-
>
ref_idx
[
3
]
=
1
;
ref_frame_config
-
>
refresh
[
0
]
=
1
;
ref_frame_config
-
>
refresh
[
1
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
ref_frame_config
-
>
ref_idx
[
0
]
=
2
;
ref_frame_config
-
>
ref_idx
[
3
]
=
3
;
ref_frame_config
-
>
refresh
[
2
]
=
1
;
ref_frame_config
-
>
refresh
[
3
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
2
)
{
ref_frame_config
-
>
ref_idx
[
0
]
=
4
;
ref_frame_config
-
>
ref_idx
[
3
]
=
5
;
ref_frame_config
-
>
refresh
[
4
]
=
1
;
ref_frame_config
-
>
refresh
[
5
]
=
1
;
}
}
else
if
(
superframe_cnt
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
0
;
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
1
;
ref_frame_config
-
>
ref_idx
[
0
]
=
0
;
ref_frame_config
-
>
refresh
[
0
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
3
;
ref_frame_config
-
>
ref_idx
[
0
]
=
2
;
ref_frame_config
-
>
refresh
[
2
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
2
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
5
;
ref_frame_config
-
>
ref_idx
[
0
]
=
4
;
ref_frame_config
-
>
refresh
[
4
]
=
1
;
}
}
else
if
(
(
superframe_cnt
-
1
)
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
2
;
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
1
;
ref_frame_config
-
>
ref_idx
[
0
]
=
0
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
3
;
ref_frame_config
-
>
ref_idx
[
0
]
=
2
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
2
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
5
;
ref_frame_config
-
>
ref_idx
[
0
]
=
4
;
}
}
else
if
(
(
superframe_cnt
-
2
)
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
1
;
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
1
;
ref_frame_config
-
>
ref_idx
[
0
]
=
0
;
ref_frame_config
-
>
refresh
[
1
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
3
;
ref_frame_config
-
>
ref_idx
[
0
]
=
2
;
ref_frame_config
-
>
refresh
[
3
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
2
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
5
;
ref_frame_config
-
>
ref_idx
[
0
]
=
4
;
ref_frame_config
-
>
refresh
[
5
]
=
1
;
}
}
else
if
(
(
superframe_cnt
-
3
)
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
2
;
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
ref_frame_config
-
>
ref_idx
[
0
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
2
;
ref_frame_config
-
>
ref_idx
[
0
]
=
3
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
2
)
{
ref_frame_config
-
>
reference
[
0
]
=
1
;
for
(
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
4
;
ref_frame_config
-
>
ref_idx
[
0
]
=
5
;
}
}
}
static
void
ref_config_3SL3TL
(
aom_svc_ref_frame_config_t
*
ref_frame_config
aom_svc_layer_id_t
*
layer_id
int
is_key_frame
int
superframe_cnt
)
{
if
(
superframe_cnt
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
0
;
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
ref_frame_config
-
>
refresh
[
0
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
ref_frame_config
-
>
ref_idx
[
0
]
=
1
;
ref_frame_config
-
>
refresh
[
1
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
2
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
1
;
ref_frame_config
-
>
ref_idx
[
0
]
=
2
;
ref_frame_config
-
>
refresh
[
2
]
=
1
;
}
}
else
if
(
(
superframe_cnt
-
1
)
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
2
;
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
ref_frame_config
-
>
ref_idx
[
3
]
=
3
;
ref_frame_config
-
>
refresh
[
3
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
3
;
ref_frame_config
-
>
ref_idx
[
0
]
=
1
;
ref_frame_config
-
>
ref_idx
[
1
]
=
4
;
ref_frame_config
-
>
refresh
[
4
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
2
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
4
;
ref_frame_config
-
>
ref_idx
[
0
]
=
2
;
}
}
else
if
(
(
superframe_cnt
-
2
)
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
1
;
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
ref_frame_config
-
>
ref_idx
[
3
]
=
3
;
ref_frame_config
-
>
refresh
[
3
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
3
;
ref_frame_config
-
>
ref_idx
[
0
]
=
1
;
ref_frame_config
-
>
ref_idx
[
2
]
=
4
;
ref_frame_config
-
>
refresh
[
4
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
2
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
4
;
ref_frame_config
-
>
ref_idx
[
0
]
=
2
;
ref_frame_config
-
>
ref_idx
[
2
]
=
5
;
ref_frame_config
-
>
refresh
[
5
]
=
1
;
}
}
else
if
(
(
superframe_cnt
-
3
)
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
2
;
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
ref_frame_config
-
>
ref_idx
[
0
]
=
3
;
ref_frame_config
-
>
ref_idx
[
3
]
=
3
;
ref_frame_config
-
>
refresh
[
3
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
ref_frame_config
-
>
ref_idx
[
0
]
=
4
;
ref_frame_config
-
>
ref_idx
[
3
]
=
3
;
ref_frame_config
-
>
ref_idx
[
1
]
=
4
;
ref_frame_config
-
>
refresh
[
4
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
2
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
ref_frame_config
-
>
ref_idx
[
0
]
=
5
;
ref_frame_config
-
>
ref_idx
[
3
]
=
4
;
}
}
if
(
layer_id
-
>
spatial_layer_id
>
0
)
{
ref_frame_config
-
>
reference
[
3
]
=
1
;
if
(
is_key_frame
&
&
layer_id
-
>
spatial_layer_id
>
0
)
{
ref_frame_config
-
>
reference
[
0
]
=
0
;
}
}
}
virtual
int
set_layer_pattern
(
int
frame_cnt
aom_svc_layer_id_t
*
layer_id
aom_svc_ref_frame_config_t
*
ref_frame_config
aom_svc_ref_frame_comp_pred_t
*
ref_frame_comp_pred
int
spatial_layer
int
multi_ref
int
comp_pred
int
is_key_frame
int
dynamic_enable_disable_mode
int
rps_mode
int
rps_recovery_frame
int
simulcast_mode
bool
use_last_as_scaled
bool
use_last_as_scaled_single_ref
)
{
int
lag_index
=
0
;
int
base_count
=
frame_cnt
>
>
2
;
layer_id
-
>
spatial_layer_id
=
spatial_layer
;
for
(
int
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
{
ref_frame_config
-
>
ref_idx
[
i
]
=
i
;
ref_frame_config
-
>
reference
[
i
]
=
0
;
}
for
(
int
i
=
0
;
i
<
REF_FRAMES
;
i
+
+
)
ref_frame_config
-
>
refresh
[
i
]
=
0
;
if
(
comp_pred
)
{
ref_frame_comp_pred
-
>
use_comp_pred
[
0
]
=
1
;
ref_frame_comp_pred
-
>
use_comp_pred
[
1
]
=
1
;
ref_frame_comp_pred
-
>
use_comp_pred
[
2
]
=
1
;
}
int
layer_flags
=
0
;
ref_frame_config
-
>
reference
[
0
]
=
1
;
if
(
number_temporal_layers_
=
=
1
&
&
number_spatial_layers_
=
=
1
)
{
layer_id
-
>
temporal_layer_id
=
0
;
ref_frame_config
-
>
refresh
[
0
]
=
1
;
if
(
rps_mode
)
ref_config_rps
(
ref_frame_config
frame_cnt
rps_recovery_frame
)
;
if
(
intra_only_single_layer_
)
{
ref_frame_config
-
>
ref_idx
[
0
]
=
0
;
ref_frame_config
-
>
ref_idx
[
3
]
=
1
;
ref_frame_config
-
>
ref_idx
[
6
]
=
2
;
if
(
frame_cnt
=
=
1
)
{
for
(
int
i
=
0
;
i
<
INTER_REFS_PER_FRAME
;
i
+
+
)
ref_frame_config
-
>
reference
[
i
]
=
0
;
}
}
}
if
(
number_temporal_layers_
=
=
2
&
&
number_spatial_layers_
=
=
1
)
{
base_count
=
frame_cnt
>
>
1
;
ref_frame_config
-
>
ref_idx
[
3
]
=
3
;
lag_index
=
5
;
if
(
base_count
>
0
)
{
lag_index
=
5
+
(
base_count
%
3
)
;
if
(
frame_cnt
%
2
!
=
0
)
lag_index
=
5
+
(
(
base_count
+
1
)
%
3
)
;
}
ref_frame_config
-
>
ref_idx
[
6
]
=
lag_index
;
if
(
frame_cnt
%
2
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
0
;
ref_frame_config
-
>
refresh
[
0
]
=
1
;
ref_frame_config
-
>
reference
[
0
]
=
1
;
ref_frame_config
-
>
refresh
[
lag_index
]
=
1
;
if
(
base_count
%
32
=
=
0
)
ref_frame_config
-
>
refresh
[
3
]
=
1
;
}
else
{
layer_id
-
>
temporal_layer_id
=
1
;
ref_frame_config
-
>
reference
[
0
]
=
1
;
}
if
(
layer_id
-
>
temporal_layer_id
=
=
0
)
{
ref_frame_config
-
>
reference
[
3
]
=
1
;
ref_frame_config
-
>
reference
[
6
]
=
1
;
}
}
else
if
(
number_temporal_layers_
=
=
3
&
&
number_spatial_layers_
=
=
1
)
{
if
(
multi_ref
)
{
ref_frame_config
-
>
ref_idx
[
3
]
=
3
;
lag_index
=
4
+
(
base_count
%
4
)
;
ref_frame_config
-
>
ref_idx
[
6
]
=
lag_index
;
}
if
(
frame_cnt
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
0
;
ref_frame_config
-
>
refresh
[
0
]
=
1
;
ref_frame_config
-
>
reference
[
3
]
=
1
;
if
(
multi_ref
)
{
if
(
base_count
%
10
=
=
0
)
ref_frame_config
-
>
refresh
[
3
]
=
1
;
ref_frame_config
-
>
refresh
[
lag_index
]
=
1
;
}
}
else
if
(
(
frame_cnt
-
1
)
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
2
;
}
else
if
(
(
frame_cnt
-
2
)
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
1
;
ref_frame_config
-
>
refresh
[
1
]
=
1
;
}
else
if
(
(
frame_cnt
-
3
)
%
4
=
=
0
)
{
layer_id
-
>
temporal_layer_id
=
2
;
ref_frame_config
-
>
ref_idx
[
0
]
=
1
;
ref_frame_config
-
>
ref_idx
[
1
]
=
0
;
}
if
(
multi_ref
)
{
ref_frame_config
-
>
reference
[
3
]
=
1
;
ref_frame_config
-
>
reference
[
6
]
=
1
;
}
}
else
if
(
number_temporal_layers_
=
=
1
&
&
number_spatial_layers_
=
=
2
)
{
layer_id
-
>
temporal_layer_id
=
0
;
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
ref_frame_config
-
>
ref_idx
[
0
]
=
0
;
ref_frame_config
-
>
ref_idx
[
3
]
=
3
;
ref_frame_config
-
>
refresh
[
0
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
ref_frame_config
-
>
ref_idx
[
0
]
=
3
;
ref_frame_config
-
>
ref_idx
[
3
]
=
0
;
ref_frame_config
-
>
refresh
[
3
]
=
1
;
}
if
(
layer_id
-
>
spatial_layer_id
>
0
)
ref_frame_config
-
>
reference
[
3
]
=
1
;
}
else
if
(
number_temporal_layers_
=
=
1
&
&
number_spatial_layers_
=
=
3
)
{
layer_id
-
>
temporal_layer_id
=
0
;
if
(
layer_id
-
>
spatial_layer_id
=
=
0
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
ref_frame_config
-
>
refresh
[
0
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
1
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
0
;
ref_frame_config
-
>
ref_idx
[
0
]
=
1
;
if
(
use_last_as_scaled
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
1
;
ref_frame_config
-
>
ref_idx
[
0
]
=
0
;
ref_frame_config
-
>
ref_idx
[
3
]
=
1
;
}
ref_frame_config
-
>
refresh
[
1
]
=
1
;
}
else
if
(
layer_id
-
>
spatial_layer_id
=
=
2
)
{
for
(
int
i
=
0
;
i
<
7
;
i
+
+
)
ref_frame_config
-
>
ref_idx
[
i
]
=
1
;
ref_frame_config
-
>
ref_idx
[
0
]
=
2
;
ref_frame_config
-
>
refresh
[
2
]
=
1
;
if
(
multi_ref
)
{
ref_frame_config
-
>
ref_idx
[
6
]
=
7
;
ref_frame_config
-
>
reference
[
6
]
=
1
;
if
(
base_count
%
10
=
=
0
)
ref_frame_config
-
>
refresh
[
7
]
=
1
;
}
}
if
(
layer_id
-
>
spatial_layer_id
>
0
)
{
if
(
use_last_as_scaled_single_ref
)
ref_frame_config
-
>
reference
[
3
]
=
0
;
else
ref_frame_config
-
>
reference
[
3
]
=
1
;
}
}
else
if
(
number_temporal_layers_
=
=
3
&
&
number_spatial_layers_
=
=
3
)
{
if
(
simulcast_mode
)
{
ref_config_simulcast3SL3TL
(
ref_frame_config
layer_id
is_key_frame
superframe_cnt_
)
;
}
else
{
ref_config_3SL3TL
(
ref_frame_config
layer_id
is_key_frame
superframe_cnt_
)
;
if
(
multi_ref
&
&
layer_id
-
>
spatial_layer_id
=
=
2
)
{
ref_frame_config
-
>
ref_idx
[
6
]
=
7
;
if
(
!
is_key_frame
)
ref_frame_config
-
>
reference
[
6
]
=
1
;
if
(
base_count
%
10
=
=
0
&
&
layer_id
-
>
temporal_layer_id
=
=
0
)
ref_frame_config
-
>
refresh
[
7
]
=
1
;
}
}
}
if
(
dynamic_enable_disable_mode
=
=
1
&
&
layer_id
-
>
spatial_layer_id
=
=
number_spatial_layers_
-
1
)
ref_frame_config
-
>
reference
[
0
]
=
0
;
return
layer_flags
;
}
virtual
void
initialize_svc
(
int
number_temporal_layers
int
number_spatial_layers
aom_svc_params
*
svc_params
)
{
svc_params
-
>
number_spatial_layers
=
number_spatial_layers
;
svc_params
-
>
number_temporal_layers
=
number_temporal_layers
;
for
(
int
i
=
0
;
i
<
number_temporal_layers
*
number_spatial_layers
;
+
+
i
)
{
svc_params
-
>
max_quantizers
[
i
]
=
60
;
svc_params
-
>
min_quantizers
[
i
]
=
2
;
svc_params
-
>
layer_target_bitrate
[
i
]
=
target_layer_bitrate_
[
i
]
;
}
svc_params
-
>
framerate_factor
[
0
]
=
1
;
if
(
number_temporal_layers
=
=
2
)
{
svc_params
-
>
framerate_factor
[
0
]
=
2
;
svc_params
-
>
framerate_factor
[
1
]
=
1
;
}
else
if
(
number_temporal_layers
=
=
3
)
{
svc_params
-
>
framerate_factor
[
0
]
=
4
;
svc_params
-
>
framerate_factor
[
1
]
=
2
;
svc_params
-
>
framerate_factor
[
2
]
=
1
;
}
svc_params
-
>
scaling_factor_num
[
0
]
=
1
;
svc_params
-
>
scaling_factor_den
[
0
]
=
1
;
if
(
number_spatial_layers
=
=
2
)
{
svc_params
-
>
scaling_factor_num
[
0
]
=
1
;
svc_params
-
>
scaling_factor_den
[
0
]
=
2
;
svc_params
-
>
scaling_factor_num
[
1
]
=
1
;
svc_params
-
>
scaling_factor_den
[
1
]
=
1
;
}
else
if
(
number_spatial_layers
=
=
3
)
{
svc_params
-
>
scaling_factor_num
[
0
]
=
1
;
svc_params
-
>
scaling_factor_den
[
0
]
=
4
;
svc_params
-
>
scaling_factor_num
[
1
]
=
1
;
svc_params
-
>
scaling_factor_den
[
1
]
=
2
;
svc_params
-
>
scaling_factor_num
[
2
]
=
1
;
svc_params
-
>
scaling_factor_den
[
2
]
=
1
;
}
}
virtual
void
BasicRateTargetingSVC3TL1SLTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
1
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
550
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
60
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
150
)
;
#
endif
}
virtual
void
SetFrameQpSVC3TL1SLTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
1
;
user_define_frame_qp_
=
1
;
total_frame_
=
300
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
550
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
}
virtual
void
SetFrameQpSVC3TL3SLTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
user_define_frame_qp_
=
1
;
total_frame_
=
300
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
}
virtual
void
BasicRateTargetingSVC3TL1SLScreenTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
screendata
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
1000
1500
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
screen_mode_
=
1
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
1
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
40
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
2
.
0
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
EXPECT_LE
(
(
int
)
GetMismatchFrames
(
)
30
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC2TL1SLScreenDropFrameTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
50
;
cfg_
.
rc_buf_optimal_sz
=
50
;
cfg_
.
rc_buf_sz
=
100
;
cfg_
.
rc_dropframe_thresh
=
30
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
52
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
60
100
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
screen_mode_
=
1
;
number_temporal_layers_
=
2
;
number_spatial_layers_
=
1
;
target_layer_bitrate_
[
0
]
=
60
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
75
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
8
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
EXPECT_LE
(
(
int
)
GetMismatchFrames
(
)
150
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC2TL1SLScreenDropFrame1920x1080Test
(
)
{
cfg_
.
rc_buf_initial_sz
=
50
;
cfg_
.
rc_buf_optimal_sz
=
50
;
cfg_
.
rc_buf_sz
=
100
;
cfg_
.
rc_dropframe_thresh
=
30
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
52
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
screendata
.
1920_1080
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
60
100
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
screen_mode_
=
1
;
number_temporal_layers_
=
2
;
number_spatial_layers_
=
1
;
target_layer_bitrate_
[
0
]
=
60
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
#
if
CONFIG_AV1_DECODER
EXPECT_LE
(
GetMismatchFrames
(
)
150u
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC2TL1SLScreenDropFrame1920x10804ThreadTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
50
;
cfg_
.
rc_buf_optimal_sz
=
50
;
cfg_
.
rc_buf_sz
=
100
;
cfg_
.
rc_dropframe_thresh
=
30
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
52
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
cfg_
.
g_threads
=
4
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
screendata
.
1920_1080
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
60
100
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
tile_columns_
=
1
;
tile_rows_
=
1
;
screen_mode_
=
1
;
number_temporal_layers_
=
2
;
number_spatial_layers_
=
1
;
target_layer_bitrate_
[
0
]
=
60
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
#
if
CONFIG_AV1_DECODER
EXPECT_LE
(
GetMismatchFrames
(
)
150u
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC1TL3SLScreenTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
niklas_1280_720_30
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
800
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
screen_mode_
=
1
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
30
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
60
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
50
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
5
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
0
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC1TL1SLScreenScCutsMotionTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
500
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
screen_mode_
=
1
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
1
;
target_layer_bitrate_
[
0
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
40
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
7
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
0
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL1SLResizeTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
cfg_
.
rc_resize_mode
=
RESIZE_DYNAMIC
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
niklas_640_480_30
.
yuv
"
640
480
30
1
0
400
)
;
cfg_
.
g_w
=
640
;
cfg_
.
g_h
=
480
;
const
int
bitrate_array
[
2
]
=
{
80
90
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
unsigned
int
last_w
=
cfg_
.
g_w
;
unsigned
int
last_h
=
cfg_
.
g_h
;
int
resize_down_count
=
0
;
for
(
std
:
:
vector
<
FrameInfo
>
:
:
const_iterator
info
=
frame_info_list_
.
begin
(
)
;
info
!
=
frame_info_list_
.
end
(
)
;
+
+
info
)
{
if
(
info
-
>
w
!
=
last_w
|
|
info
-
>
h
!
=
last_h
)
{
ASSERT_LT
(
info
-
>
w
last_w
)
;
ASSERT_LT
(
info
-
>
h
last_h
)
;
last_w
=
info
-
>
w
;
last_h
=
info
-
>
h
;
resize_down_count
+
+
;
}
}
ASSERT_GE
(
resize_down_count
1
)
;
#
else
printf
(
"
Warning
:
AV1
decoder
unavailable
unable
to
check
resize
count
!
\
n
"
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC1TL2SLTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
300
600
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
2
;
target_layer_bitrate_
[
0
]
=
2
*
cfg_
.
rc_target_bitrate
/
4
;
target_layer_bitrate_
[
1
]
=
2
*
cfg_
.
rc_target_bitrate
/
4
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC3TL3SLIntraStartDecodeBaseMidSeq
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
56
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
500
1000
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
intra_only_
=
1
;
frame_sync_
=
20
;
frame_to_start_decoding_
=
frame_sync_
;
layer_to_decode_
=
0
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
50
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
0
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL3SLIntraMidSeqDecodeAll
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
56
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
500
1000
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
intra_only_
=
1
;
frame_sync_
=
20
;
frame_to_start_decoding_
=
0
;
layer_to_decode_
=
3
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
585
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
150
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL3SLSimulcast
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
56
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
cfg_
.
kf_max_dist
=
150
;
cfg_
.
kf_min_dist
=
150
;
int
num_frames
=
300
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
num_frames
)
;
const
int
bitrate_array
[
2
]
=
{
500
1000
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
simulcast_mode_
=
1
;
frame_to_start_decoding_
=
cfg_
.
kf_max_dist
;
layer_to_decode_
=
2
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
tl
=
0
;
tl
<
number_temporal_layers_
;
tl
+
+
)
{
int
i
=
layer_to_decode_
*
number_temporal_layers_
+
tl
;
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
6
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
7
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
int
num_mismatch
=
(
num_frames
-
frame_to_start_decoding_
)
/
2
;
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
num_mismatch
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC1TL2SLIntraOnlyTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
300
600
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
intra_only_
=
1
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
2
;
target_layer_bitrate_
[
0
]
=
2
*
cfg_
.
rc_target_bitrate
/
4
;
target_layer_bitrate_
[
1
]
=
2
*
cfg_
.
rc_target_bitrate
/
4
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC1TL1SLIntraOnlyTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
300
600
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
intra_only_single_layer_
=
true
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
1
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
ASSERT_GE
(
effective_datarate_tl
[
0
]
cfg_
.
rc_target_bitrate
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
0
]
cfg_
.
rc_target_bitrate
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
virtual
void
BasicRateTargetingSVC1TL3SLTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
500
1000
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
1
]
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
2
]
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
38
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC1TL3SLLastIsScaledTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
500
1000
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
3
;
use_last_as_scaled_
=
true
;
target_layer_bitrate_
[
0
]
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
1
]
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
2
]
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
38
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC1TL3SLLastIsScaledSingleRefTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
500
1000
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
3
;
use_last_as_scaled_
=
true
;
use_last_as_scaled_single_ref_
=
true
;
target_layer_bitrate_
[
0
]
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
1
]
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
2
]
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
38
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC1TL3SLMultiRefTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
500
1000
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
multi_ref_
=
1
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
1
]
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
2
]
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
38
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC3TL3SLTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
50
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
38
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC3TL3SLHDTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
niklas_1280_720_30
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
70
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
45
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingFixedModeSVC3TL3SLHDTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
niklas_1280_720_30
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
use_fixed_mode_svc_
=
1
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
70
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
45
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC3TL3SLMultiThreadSpeedPerLayerTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
cfg_
.
g_threads
=
2
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
niklas_640_480_30
.
yuv
"
640
480
30
1
0
400
)
;
cfg_
.
g_w
=
640
;
cfg_
.
g_h
=
480
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
tile_columns_
=
1
;
tile_rows_
=
0
;
set_speed_per_layer_
=
true
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
70
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
45
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC3TL3SLHDMultiThread2Test
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
cfg_
.
g_threads
=
2
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
niklas_1280_720_30
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
tile_columns_
=
1
;
tile_rows_
=
0
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
70
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
45
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC2TL1SLHDMultiThread4Test
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
cfg_
.
g_threads
=
4
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
niklas_1280_720_30
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
tile_columns_
=
1
;
tile_rows_
=
1
;
number_temporal_layers_
=
2
;
number_spatial_layers_
=
1
;
target_layer_bitrate_
[
0
]
=
60
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
70
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
45
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC2TL1SLHDMultiThread4AutoTilesTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
cfg_
.
g_threads
=
4
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
niklas_1280_720_30
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
auto_tiles_
=
1
;
number_temporal_layers_
=
2
;
number_spatial_layers_
=
1
;
target_layer_bitrate_
[
0
]
=
60
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
70
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
45
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC3TL3SLHDMultiThread4Test
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
cfg_
.
g_threads
=
4
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
niklas_1280_720_30
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
tile_columns_
=
1
;
tile_rows_
=
1
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
70
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
45
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC3TL3SLHDMultiRefTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
niklas_1280_720_30
.
y4m
"
0
60
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
multi_ref_
=
1
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
70
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
45
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC3TL3SLKfTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
cfg_
.
kf_mode
=
AOM_KF_AUTO
;
cfg_
.
kf_min_dist
=
cfg_
.
kf_max_dist
=
100
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
55
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
4
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargeting444SVC3TL3SLTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
cfg_
.
g_profile
=
1
;
:
:
libaom_test
:
:
Y4mVideoSource
video
(
"
rush_hour_444
.
y4m
"
0
140
)
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
70
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
38
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC3TL1SLMultiRefDropAllEnhTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
550
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
multi_ref_
=
1
;
drop_frames_
=
300
-
300
/
4
;
int
n
=
0
;
for
(
int
i
=
0
;
i
<
300
;
i
+
+
)
{
if
(
i
%
4
!
=
0
)
{
drop_frames_list_
[
n
]
=
i
;
n
+
+
;
}
}
number_temporal_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
60
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
std
:
:
cout
<
<
"
Decoded
frames
:
"
<
<
GetDecodedFrames
(
)
<
<
"
\
n
"
;
std
:
:
cout
<
<
"
Mismatch
frames
:
"
<
<
GetMismatchFrames
(
)
<
<
"
\
n
"
;
EXPECT_EQ
(
300
-
GetDecodedFrames
(
)
drop_frames_
)
;
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
0
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL1SLDropAllEnhTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
550
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
drop_frames_
=
300
-
300
/
4
;
int
n
=
0
;
for
(
int
i
=
0
;
i
<
300
;
i
+
+
)
{
if
(
i
%
4
!
=
0
)
{
drop_frames_list_
[
n
]
=
i
;
n
+
+
;
}
}
number_temporal_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
60
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
std
:
:
cout
<
<
"
Decoded
frames
:
"
<
<
GetDecodedFrames
(
)
<
<
"
\
n
"
;
std
:
:
cout
<
<
"
Mismatch
frames
:
"
<
<
GetMismatchFrames
(
)
<
<
"
\
n
"
;
EXPECT_EQ
(
300
-
GetDecodedFrames
(
)
drop_frames_
)
;
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
0
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL1SLDropTL2EnhTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
550
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
drop_frames_
=
300
-
300
/
2
;
int
n
=
0
;
for
(
int
i
=
0
;
i
<
300
;
i
+
+
)
{
if
(
i
%
2
!
=
0
)
{
drop_frames_list_
[
n
]
=
i
;
n
+
+
;
}
}
number_temporal_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
60
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
std
:
:
cout
<
<
"
Decoded
frames
:
"
<
<
GetDecodedFrames
(
)
<
<
"
\
n
"
;
std
:
:
cout
<
<
"
Mismatch
frames
:
"
<
<
GetMismatchFrames
(
)
<
<
"
\
n
"
;
EXPECT_EQ
(
300
-
GetDecodedFrames
(
)
drop_frames_
)
;
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
0
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL1SLDropAllEnhFrameERTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
550
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
set_frame_level_er_
=
1
;
drop_frames_
=
300
-
300
/
4
;
int
n
=
0
;
for
(
int
i
=
0
;
i
<
300
;
i
+
+
)
{
if
(
i
%
4
!
=
0
)
{
drop_frames_list_
[
n
]
=
i
;
n
+
+
;
}
}
number_temporal_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
60
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
std
:
:
cout
<
<
"
Decoded
frames
:
"
<
<
GetDecodedFrames
(
)
<
<
"
\
n
"
;
std
:
:
cout
<
<
"
Mismatch
frames
:
"
<
<
GetMismatchFrames
(
)
<
<
"
\
n
"
;
EXPECT_EQ
(
300
-
GetDecodedFrames
(
)
drop_frames_
)
;
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
0
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL1SLDropSetEnhFrameERTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
550
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
set_frame_level_er_
=
1
;
int
n
=
0
;
#
if
CONFIG_AV1_DECODER
int
num_nonref
=
300
/
2
;
#
endif
for
(
int
i
=
101
;
i
<
200
;
i
+
+
)
{
if
(
i
%
4
!
=
0
)
{
drop_frames_list_
[
n
]
=
i
;
n
+
+
;
#
if
CONFIG_AV1_DECODER
if
(
i
%
2
!
=
0
)
num_nonref
-
=
1
;
#
endif
}
}
drop_frames_
=
n
;
number_temporal_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
60
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
std
:
:
cout
<
<
"
Decoded
frames
:
"
<
<
GetDecodedFrames
(
)
<
<
"
\
n
"
;
std
:
:
cout
<
<
"
Mismatch
frames
:
"
<
<
GetMismatchFrames
(
)
<
<
"
\
n
"
;
EXPECT_EQ
(
300
-
GetDecodedFrames
(
)
drop_frames_
)
;
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
num_nonref
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC2TL1SLDropSetEnhER0Test
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
550
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
cfg_
.
g_error_resilient
=
0
;
int
n
=
0
;
#
if
CONFIG_AV1_DECODER
int
num_nonref
=
300
/
2
;
#
endif
for
(
int
i
=
101
;
i
<
200
;
i
+
+
)
{
if
(
i
%
2
!
=
0
)
{
drop_frames_list_
[
n
]
=
i
;
n
+
+
;
#
if
CONFIG_AV1_DECODER
if
(
i
%
2
!
=
0
)
num_nonref
-
=
1
;
#
endif
}
}
drop_frames_
=
n
;
number_temporal_layers_
=
2
;
target_layer_bitrate_
[
0
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
60
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
std
:
:
cout
<
<
"
Decoded
frames
:
"
<
<
GetDecodedFrames
(
)
<
<
"
\
n
"
;
std
:
:
cout
<
<
"
Mismatch
frames
:
"
<
<
GetMismatchFrames
(
)
<
<
"
\
n
"
;
EXPECT_EQ
(
300
-
GetDecodedFrames
(
)
drop_frames_
)
;
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
num_nonref
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL1SLDropSetEnhER0Test
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
550
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
cfg_
.
g_error_resilient
=
0
;
int
n
=
0
;
#
if
CONFIG_AV1_DECODER
int
num_nonref
=
300
/
2
;
#
endif
for
(
int
i
=
101
;
i
<
200
;
i
+
+
)
{
if
(
i
%
4
!
=
0
)
{
drop_frames_list_
[
n
]
=
i
;
n
+
+
;
#
if
CONFIG_AV1_DECODER
if
(
i
%
2
!
=
0
)
num_nonref
-
=
1
;
#
endif
}
}
drop_frames_
=
n
;
number_temporal_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
60
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
std
:
:
cout
<
<
"
Decoded
frames
:
"
<
<
GetDecodedFrames
(
)
<
<
"
\
n
"
;
std
:
:
cout
<
<
"
Mismatch
frames
:
"
<
<
GetMismatchFrames
(
)
<
<
"
\
n
"
;
EXPECT_EQ
(
300
-
GetDecodedFrames
(
)
drop_frames_
)
;
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
num_nonref
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL3SLDropSetEnhER0Test
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
200
550
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
cfg_
.
g_error_resilient
=
0
;
int
n
=
0
;
#
if
CONFIG_AV1_DECODER
int
num_nonref
=
300
/
2
;
#
endif
for
(
int
i
=
101
;
i
<
200
;
i
+
+
)
{
if
(
i
%
4
!
=
0
)
{
drop_frames_list_
[
n
]
=
i
;
n
+
+
;
#
if
CONFIG_AV1_DECODER
if
(
i
%
2
!
=
0
)
num_nonref
-
=
1
;
#
endif
}
}
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
multi_ref_
=
1
;
drop_frames_
=
n
*
number_spatial_layers_
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
60
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
std
:
:
cout
<
<
"
Decoded
frames
:
"
<
<
GetDecodedFrames
(
)
<
<
"
\
n
"
;
std
:
:
cout
<
<
"
Mismatch
frames
:
"
<
<
GetMismatchFrames
(
)
<
<
"
\
n
"
;
EXPECT_EQ
(
300
*
number_spatial_layers_
-
GetDecodedFrames
(
)
drop_frames_
)
;
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
num_nonref
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL1SLMultiRefCompoundTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
niklas_640_480_30
.
yuv
"
640
480
30
1
0
400
)
;
cfg_
.
g_w
=
640
;
cfg_
.
g_h
=
480
;
const
int
bitrate_array
[
2
]
=
{
400
800
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
multi_ref_
=
1
;
comp_pred_
=
1
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
1
;
target_layer_bitrate_
[
0
]
=
50
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
cfg_
.
rc_target_bitrate
/
100
;
target_layer_bitrate_
[
2
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC1TL3SLDynEnablTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
niklas_640_480_30
.
yuv
"
640
480
30
1
0
400
)
;
const
int
bitrate_array
[
2
]
=
{
500
1000
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
1
]
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
2
]
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
dynamic_enable_disable_mode_
=
1
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_spatial_layers_
-
1
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
38
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingSVC1TL3SLDynDisEnablTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
500
1000
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
number_temporal_layers_
=
1
;
number_spatial_layers_
=
3
;
target_layer_bitrate_
[
0
]
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
1
]
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
2
]
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
dynamic_enable_disable_mode_
=
2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_spatial_layers_
-
1
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
80
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
38
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
}
virtual
void
BasicRateTargetingRPS1TL1SLDropFramesTest
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
:
:
libaom_test
:
:
I420VideoSource
video
(
"
hantro_collage_w352h288
.
yuv
"
352
288
30
1
0
300
)
;
const
int
bitrate_array
[
2
]
=
{
100
300
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
ResetModel
(
)
;
rps_mode_
=
1
;
rps_recovery_frame_
=
100
;
cfg_
.
g_error_resilient
=
0
;
int
n
=
0
;
for
(
int
i
=
rps_recovery_frame_
-
7
;
i
<
rps_recovery_frame_
;
i
+
+
)
{
drop_frames_list_
[
n
]
=
i
;
n
+
+
;
}
drop_frames_
=
n
;
number_spatial_layers_
=
1
;
number_temporal_layers_
=
1
;
target_layer_bitrate_
[
0
]
=
cfg_
.
rc_target_bitrate
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
for
(
int
i
=
0
;
i
<
number_temporal_layers_
*
number_spatial_layers_
;
i
+
+
)
{
ASSERT_GE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
0
.
60
)
<
<
"
The
datarate
for
the
file
is
lower
than
target
by
too
much
!
"
;
ASSERT_LE
(
effective_datarate_tl
[
i
]
target_layer_bitrate_
[
i
]
*
1
.
60
)
<
<
"
The
datarate
for
the
file
is
greater
than
target
by
too
much
!
"
;
}
#
if
CONFIG_AV1_DECODER
std
:
:
cout
<
<
"
Decoded
frames
:
"
<
<
GetDecodedFrames
(
)
<
<
"
\
n
"
;
std
:
:
cout
<
<
"
Mismatch
frames
:
"
<
<
GetMismatchFrames
(
)
<
<
"
\
n
"
;
EXPECT_EQ
(
300
-
GetDecodedFrames
(
)
drop_frames_
)
;
EXPECT_EQ
(
(
int
)
GetMismatchFrames
(
)
0
)
;
#
endif
}
virtual
void
BasicRateTargetingSVC3TL3SLExternalResizePattern1Test
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
cfg_
.
g_w
=
1280
;
cfg_
.
g_h
=
720
;
top_sl_width_
=
1280
;
top_sl_height_
=
720
;
ResizingVideoSource
video
(
1
)
;
ResetModel
(
)
;
external_resize_dynamic_drop_layer_
=
true
;
external_resize_pattern_
=
1
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
}
virtual
void
BasicRateTargetingSVC3TL3SLExternalResizePattern2Test
(
)
{
cfg_
.
rc_buf_initial_sz
=
500
;
cfg_
.
rc_buf_optimal_sz
=
500
;
cfg_
.
rc_buf_sz
=
1000
;
cfg_
.
rc_dropframe_thresh
=
0
;
cfg_
.
rc_min_quantizer
=
0
;
cfg_
.
rc_max_quantizer
=
63
;
cfg_
.
rc_end_usage
=
AOM_CBR
;
cfg_
.
g_lag_in_frames
=
0
;
cfg_
.
g_error_resilient
=
0
;
const
int
bitrate_array
[
2
]
=
{
600
1200
}
;
cfg_
.
rc_target_bitrate
=
bitrate_array
[
GET_PARAM
(
4
)
]
;
cfg_
.
g_w
=
1280
;
cfg_
.
g_h
=
720
;
top_sl_width_
=
1280
;
top_sl_height_
=
720
;
ResizingVideoSource
video
(
2
)
;
ResetModel
(
)
;
external_resize_dynamic_drop_layer_
=
true
;
external_resize_pattern_
=
2
;
number_temporal_layers_
=
3
;
number_spatial_layers_
=
3
;
const
int
bitrate_sl0
=
1
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
0
]
=
50
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
1
]
=
70
*
bitrate_sl0
/
100
;
target_layer_bitrate_
[
2
]
=
bitrate_sl0
;
const
int
bitrate_sl1
=
3
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
3
]
=
50
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
4
]
=
70
*
bitrate_sl1
/
100
;
target_layer_bitrate_
[
5
]
=
bitrate_sl1
;
const
int
bitrate_sl2
=
4
*
cfg_
.
rc_target_bitrate
/
8
;
target_layer_bitrate_
[
6
]
=
50
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
7
]
=
70
*
bitrate_sl2
/
100
;
target_layer_bitrate_
[
8
]
=
bitrate_sl2
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
}
int
layer_frame_cnt_
;
int
superframe_cnt_
;
int
number_temporal_layers_
;
int
number_spatial_layers_
;
int
target_layer_bitrate_
[
AOM_MAX_LAYERS
]
;
aom_svc_params_t
svc_params_
;
aom_svc_ref_frame_config_t
ref_frame_config_
;
aom_svc_ref_frame_comp_pred_t
ref_frame_comp_pred_
;
aom_svc_layer_id_t
layer_id_
;
double
effective_datarate_tl
[
AOM_MAX_LAYERS
]
;
unsigned
int
drop_frames_
;
unsigned
int
drop_frames_list_
[
1000
]
;
unsigned
int
mismatch_nframes_
;
unsigned
int
decoded_nframes_
;
double
mismatch_psnr_
;
int
set_frame_level_er_
;
int
multi_ref_
;
int
use_fixed_mode_svc_
;
int
comp_pred_
;
int
dynamic_enable_disable_mode_
;
int
intra_only_
;
int
intra_only_single_layer_
;
unsigned
int
frame_to_start_decoding_
;
unsigned
int
layer_to_decode_
;
unsigned
int
frame_sync_
;
unsigned
int
current_video_frame_
;
int
screen_mode_
;
int
rps_mode_
;
int
rps_recovery_frame_
;
int
simulcast_mode_
;
bool
use_last_as_scaled_
;
bool
use_last_as_scaled_single_ref_
;
int
user_define_frame_qp_
;
int
frame_qp_
;
int
total_frame_
;
bool
set_speed_per_layer_
;
libaom_test
:
:
ACMRandom
rnd_
;
bool
external_resize_dynamic_drop_layer_
;
int
bitrate_layer_
[
9
]
;
int
external_resize_pattern_
;
int
top_sl_width_
;
int
top_sl_height_
;
}
;
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL1SL
)
{
BasicRateTargetingSVC3TL1SLTest
(
)
;
}
TEST_P
(
DatarateTestSVC
SetFrameQpSVC3TL1SL
)
{
SetFrameQpSVC3TL1SLTest
(
)
;
}
TEST_P
(
DatarateTestSVC
SetFrameQpSVC3TL3SL
)
{
SetFrameQpSVC3TL3SLTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL1SLScreen
)
{
BasicRateTargetingSVC3TL1SLScreenTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC2TL1SLScreenDropFrame
)
{
BasicRateTargetingSVC2TL1SLScreenDropFrameTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC2TL1SLScreenDropFrame1920x1080
)
{
BasicRateTargetingSVC2TL1SLScreenDropFrame1920x1080Test
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC2TL1SLScreenDropFrame1920x10804Thread
)
{
BasicRateTargetingSVC2TL1SLScreenDropFrame1920x10804ThreadTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL3SLScreen
)
{
BasicRateTargetingSVC1TL3SLScreenTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL1SLScreenScCutsMotion
)
{
BasicRateTargetingSVC1TL1SLScreenScCutsMotionTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL1SLResize
)
{
BasicRateTargetingSVC3TL1SLResizeTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL2SL
)
{
BasicRateTargetingSVC1TL2SLTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLIntraStartDecodeBaseMidSeq
)
{
BasicRateTargetingSVC3TL3SLIntraStartDecodeBaseMidSeq
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLIntraMidSeqDecodeAll
)
{
BasicRateTargetingSVC3TL3SLIntraMidSeqDecodeAll
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLSimulcast
)
{
BasicRateTargetingSVC3TL3SLSimulcast
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL2SLIntraOnly
)
{
BasicRateTargetingSVC1TL2SLIntraOnlyTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL1SLIntraOnly
)
{
BasicRateTargetingSVC1TL1SLIntraOnlyTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL3SL
)
{
BasicRateTargetingSVC1TL3SLTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL3SLLastIsScaled
)
{
BasicRateTargetingSVC1TL3SLLastIsScaledTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL3SLastIsScaledSingleRef
)
{
BasicRateTargetingSVC1TL3SLLastIsScaledSingleRefTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL3SLMultiRef
)
{
BasicRateTargetingSVC1TL3SLMultiRefTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SL
)
{
BasicRateTargetingSVC3TL3SLTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLHD
)
{
BasicRateTargetingSVC3TL3SLHDTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingFixedModeSVC3TL3SLHD
)
{
BasicRateTargetingFixedModeSVC3TL3SLHDTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLMultiThreadSpeedPerLayer
)
{
BasicRateTargetingSVC3TL3SLMultiThreadSpeedPerLayerTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLHDMultiThread2
)
{
BasicRateTargetingSVC3TL3SLHDMultiThread2Test
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC2TL1SLHDMultiThread4
)
{
BasicRateTargetingSVC2TL1SLHDMultiThread4Test
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC2TL1SLHDMultiThread4AutoTiles
)
{
BasicRateTargetingSVC2TL1SLHDMultiThread4AutoTilesTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLHDMultiThread4
)
{
BasicRateTargetingSVC3TL3SLHDMultiThread4Test
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLHDMultiRef
)
{
BasicRateTargetingSVC3TL3SLHDMultiRefTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLKf
)
{
BasicRateTargetingSVC3TL3SLKfTest
(
)
;
}
#
if
defined
(
CONFIG_MAX_DECODE_PROFILE
)
&
&
CONFIG_MAX_DECODE_PROFILE
<
1
TEST_P
(
DatarateTestSVC
DISABLED_BasicRateTargeting444SVC3TL3SL
)
{
#
else
TEST_P
(
DatarateTestSVC
BasicRateTargeting444SVC3TL3SL
)
{
#
endif
BasicRateTargeting444SVC3TL3SLTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL1SLMultiRefDropAllEnh
)
{
BasicRateTargetingSVC3TL1SLMultiRefDropAllEnhTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL1SLDropAllEnh
)
{
BasicRateTargetingSVC3TL1SLDropAllEnhTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL1SLDropTL2Enh
)
{
BasicRateTargetingSVC3TL1SLDropTL2EnhTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL1SLDropAllEnhFrameER
)
{
BasicRateTargetingSVC3TL1SLDropAllEnhFrameERTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL1SLDropSetEnhFrameER
)
{
BasicRateTargetingSVC3TL1SLDropSetEnhFrameERTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC2TL1SLDropSetEnhER0
)
{
BasicRateTargetingSVC2TL1SLDropSetEnhER0Test
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL1SLDropSetEnhER0
)
{
BasicRateTargetingSVC3TL1SLDropSetEnhER0Test
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLDropSetEnhER0
)
{
BasicRateTargetingSVC3TL3SLDropSetEnhER0Test
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL1SLMultiRefCompound
)
{
BasicRateTargetingSVC3TL1SLMultiRefCompoundTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL3SLDynEnabl
)
{
BasicRateTargetingSVC1TL3SLDynEnablTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC1TL3SLDynDisEnabl
)
{
BasicRateTargetingSVC1TL3SLDynDisEnablTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingRPS1TL1SLDropFrames
)
{
BasicRateTargetingRPS1TL1SLDropFramesTest
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLExternalResizePattern1
)
{
BasicRateTargetingSVC3TL3SLExternalResizePattern1Test
(
)
;
}
TEST_P
(
DatarateTestSVC
BasicRateTargetingSVC3TL3SLExternalResizePattern2
)
{
BasicRateTargetingSVC3TL3SLExternalResizePattern2Test
(
)
;
}
TEST
(
SvcParams
BitrateOverflow
)
{
uint8_t
buf
[
6
]
=
{
0
}
;
aom_image_t
img
;
aom_codec_ctx_t
enc
;
aom_codec_enc_cfg_t
cfg
;
EXPECT_EQ
(
&
img
aom_img_wrap
(
&
img
AOM_IMG_FMT_I420
1
1
1
buf
)
)
;
aom_codec_iface_t
*
const
iface
=
aom_codec_av1_cx
(
)
;
EXPECT_EQ
(
aom_codec_enc_config_default
(
iface
&
cfg
AOM_USAGE_REALTIME
)
AOM_CODEC_OK
)
;
cfg
.
g_w
=
1
;
cfg
.
g_h
=
1
;
ASSERT_EQ
(
aom_codec_enc_init
(
&
enc
iface
&
cfg
0
)
AOM_CODEC_OK
)
;
aom_svc_params_t
svc_params
=
{
}
;
svc_params
.
framerate_factor
[
0
]
=
1
;
svc_params
.
framerate_factor
[
1
]
=
2
;
svc_params
.
number_spatial_layers
=
1
;
svc_params
.
number_temporal_layers
=
2
;
svc_params
.
layer_target_bitrate
[
0
]
=
INT_MAX
;
svc_params
.
layer_target_bitrate
[
1
]
=
INT_MAX
;
EXPECT_EQ
(
aom_codec_control
(
&
enc
AV1E_SET_SVC_PARAMS
&
svc_params
)
AOM_CODEC_OK
)
;
EXPECT_EQ
(
aom_codec_encode
(
&
enc
&
img
0
1
0
)
AOM_CODEC_OK
)
;
EXPECT_EQ
(
aom_codec_encode
(
&
enc
nullptr
0
0
0
)
AOM_CODEC_OK
)
;
EXPECT_EQ
(
aom_codec_destroy
(
&
enc
)
AOM_CODEC_OK
)
;
}
AV1_INSTANTIATE_TEST_SUITE
(
DatarateTestSVC
:
:
testing
:
:
Values
(
:
:
libaom_test
:
:
kRealTime
)
:
:
testing
:
:
Range
(
7
12
)
:
:
testing
:
:
Values
(
0
3
)
:
:
testing
:
:
Values
(
0
1
)
)
;
}
}
