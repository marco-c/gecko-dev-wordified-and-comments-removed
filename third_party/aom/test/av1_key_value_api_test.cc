#
include
<
cstring
>
#
include
<
tuple
>
#
include
"
aom
/
aom_codec
.
h
"
#
include
"
aom
/
aom_decoder
.
h
"
#
include
"
aom
/
aom_encoder
.
h
"
#
include
"
aom
/
aomcx
.
h
"
#
include
"
aom
/
aomdx
.
h
"
#
include
"
config
/
aom_config
.
h
"
#
include
"
third_party
/
googletest
/
src
/
googletest
/
include
/
gtest
/
gtest
.
h
"
namespace
{
typedef
std
:
:
tuple
<
const
char
*
const
char
*
>
KeyValParam
;
class
BaseKeyValAPI
:
public
testing
:
:
Test
{
public
:
void
SetUp
(
)
override
{
#
if
CONFIG_AV1_ENCODER
aom_codec_iface_t
*
iface_cx
=
aom_codec_av1_cx
(
)
;
aom_codec_enc_cfg_t
enc_cfg
;
#
if
CONFIG_REALTIME_ONLY
const
int
usage
=
1
;
#
else
const
int
usage
=
0
;
#
endif
EXPECT_EQ
(
AOM_CODEC_OK
aom_codec_enc_config_default
(
iface_cx
&
enc_cfg
usage
)
)
;
EXPECT_EQ
(
AOM_CODEC_OK
aom_codec_enc_init
(
&
enc_
iface_cx
&
enc_cfg
usage
)
)
;
#
endif
#
if
CONFIG_AV1_DECODER
aom_codec_iface_t
*
iface_dx
=
aom_codec_av1_dx
(
)
;
aom_codec_dec_cfg_t
dec_cfg
=
{
0
0
0
!
FORCE_HIGHBITDEPTH_DECODING
}
;
EXPECT_EQ
(
AOM_CODEC_OK
aom_codec_dec_init
(
&
dec_
iface_dx
&
dec_cfg
0
)
)
;
#
endif
}
void
TearDown
(
)
override
{
#
if
CONFIG_AV1_ENCODER
EXPECT_EQ
(
AOM_CODEC_OK
aom_codec_destroy
(
&
enc_
)
)
;
#
endif
#
if
CONFIG_AV1_DECODER
EXPECT_EQ
(
AOM_CODEC_OK
aom_codec_destroy
(
&
dec_
)
)
;
#
endif
}
protected
:
#
if
CONFIG_AV1_ENCODER
aom_codec_ctx_t
enc_
;
#
endif
#
if
CONFIG_AV1_DECODER
aom_codec_ctx_t
dec_
;
#
endif
}
;
#
if
CONFIG_AV1_ENCODER
class
EncValidTest
:
public
BaseKeyValAPI
public
testing
:
:
WithParamInterface
<
KeyValParam
>
{
}
;
class
EncInvalidTest
:
public
BaseKeyValAPI
public
testing
:
:
WithParamInterface
<
KeyValParam
>
{
}
;
TEST_P
(
EncValidTest
Valid
)
{
const
char
*
key
=
std
:
:
get
<
0
>
(
GetParam
(
)
)
;
const
char
*
val
=
std
:
:
get
<
1
>
(
GetParam
(
)
)
;
EXPECT_EQ
(
AOM_CODEC_OK
aom_codec_set_option
(
&
enc_
key
val
)
)
;
}
TEST_P
(
EncInvalidTest
NullArg
)
{
const
char
*
key
=
std
:
:
get
<
0
>
(
GetParam
(
)
)
;
const
char
*
val
=
std
:
:
get
<
1
>
(
GetParam
(
)
)
;
EXPECT_EQ
(
AOM_CODEC_INVALID_PARAM
aom_codec_set_option
(
nullptr
key
val
)
)
;
EXPECT_EQ
(
AOM_CODEC_INVALID_PARAM
aom_codec_set_option
(
&
enc_
nullptr
val
)
)
;
EXPECT_EQ
(
AOM_CODEC_INVALID_PARAM
aom_codec_set_option
(
&
enc_
key
nullptr
)
)
;
}
TEST_P
(
EncInvalidTest
InvalidParam
)
{
const
char
*
key
=
std
:
:
get
<
0
>
(
GetParam
(
)
)
;
const
char
*
val
=
std
:
:
get
<
1
>
(
GetParam
(
)
)
;
EXPECT_EQ
(
AOM_CODEC_INVALID_PARAM
aom_codec_set_option
(
&
enc_
key
val
)
)
;
ASSERT_NE
(
aom_codec_error_detail
(
&
enc_
)
nullptr
)
;
EXPECT_GT
(
strlen
(
aom_codec_error_detail
(
&
enc_
)
)
0u
)
;
}
const
KeyValParam
enc_valid_params
[
]
=
{
std
:
:
make_tuple
(
"
auto
-
intra
-
tools
-
off
"
"
1
"
)
std
:
:
make_tuple
(
"
min
-
gf
-
interval
"
"
10
"
)
std
:
:
make_tuple
(
"
min
-
partition
-
size
"
"
4
"
)
std
:
:
make_tuple
(
"
tune
"
"
psnr
"
)
}
;
const
KeyValParam
enc_invalid_params
[
]
=
{
std
:
:
make_tuple
(
"
a
-
b
-
c
"
"
10
"
)
std
:
:
make_tuple
(
"
min
-
gf
-
interval
"
"
-
1
"
)
std
:
:
make_tuple
(
"
min
-
gf
-
interval
"
"
1
.
1
"
)
std
:
:
make_tuple
(
"
min
-
gf
-
interval
"
"
abc
"
)
std
:
:
make_tuple
(
"
min
-
partition
-
size
"
"
1
.
1
"
)
std
:
:
make_tuple
(
"
min
-
partition
-
size
"
"
abc
"
)
std
:
:
make_tuple
(
"
tune
"
"
PsnR1
"
)
std
:
:
make_tuple
(
"
cq
-
level
"
"
1000
"
)
}
;
INSTANTIATE_TEST_SUITE_P
(
KeyValAPI
EncValidTest
testing
:
:
ValuesIn
(
enc_valid_params
)
)
;
INSTANTIATE_TEST_SUITE_P
(
KeyValAPI
EncInvalidTest
testing
:
:
ValuesIn
(
enc_invalid_params
)
)
;
#
endif
}
