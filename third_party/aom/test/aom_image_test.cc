#
include
"
aom
/
aom_image
.
h
"
#
include
"
third_party
/
googletest
/
src
/
googletest
/
include
/
gtest
/
gtest
.
h
"
TEST
(
AomImageTest
AomImgWrapInvalidAlign
)
{
const
int
kWidth
=
128
;
const
int
kHeight
=
128
;
unsigned
char
buf
[
kWidth
*
kHeight
*
3
]
;
aom_image_t
img
;
img
.
img_data
=
(
unsigned
char
*
)
"
"
;
img
.
img_data_owner
=
1
;
aom_img_fmt_t
format
=
AOM_IMG_FMT_I444
;
unsigned
int
align
=
31
;
EXPECT_EQ
(
aom_img_wrap
(
&
img
format
kWidth
kHeight
align
buf
)
nullptr
)
;
}
TEST
(
AomImageTest
AomImgSetRectOverflow
)
{
const
int
kWidth
=
128
;
const
int
kHeight
=
128
;
unsigned
char
buf
[
kWidth
*
kHeight
*
3
]
;
aom_image_t
img
;
aom_img_fmt_t
format
=
AOM_IMG_FMT_I444
;
unsigned
int
align
=
32
;
EXPECT_EQ
(
aom_img_wrap
(
&
img
format
kWidth
kHeight
align
buf
)
&
img
)
;
EXPECT_EQ
(
aom_img_set_rect
(
&
img
0
0
kWidth
kHeight
0
)
0
)
;
EXPECT_NE
(
aom_img_set_rect
(
&
img
static_cast
<
unsigned
int
>
(
-
1
)
static_cast
<
unsigned
int
>
(
-
1
)
kWidth
kHeight
0
)
0
)
;
}
TEST
(
AomImageTest
AomImgAllocNv12
)
{
const
int
kWidth
=
128
;
const
int
kHeight
=
128
;
aom_image_t
img
;
aom_img_fmt_t
format
=
AOM_IMG_FMT_NV12
;
unsigned
int
align
=
32
;
EXPECT_NE
(
aom_img_alloc
(
&
img
format
kWidth
kHeight
align
)
nullptr
)
;
EXPECT_EQ
(
img
.
stride
[
AOM_PLANE_U
]
img
.
stride
[
AOM_PLANE_Y
]
)
;
EXPECT_EQ
(
img
.
stride
[
AOM_PLANE_V
]
0
)
;
EXPECT_EQ
(
img
.
planes
[
AOM_PLANE_V
]
nullptr
)
;
aom_img_free
(
&
img
)
;
}
