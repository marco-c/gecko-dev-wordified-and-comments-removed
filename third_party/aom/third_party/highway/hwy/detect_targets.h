#
ifndef
HIGHWAY_HWY_DETECT_TARGETS_H_
#
define
HIGHWAY_HWY_DETECT_TARGETS_H_
#
include
"
third_party
/
highway
/
hwy
/
detect_compiler_arch
.
h
"
#
define
HWY_AVX10_2_512
(
1LL
<
<
3
)
/
/
AVX10
.
2
with
512
-
bit
vectors
#
define
HWY_AVX3_SPR
(
1LL
<
<
4
)
#
define
HWY_AVX10_2
(
1LL
<
<
5
)
/
/
AVX10
.
2
with
256
-
bit
vectors
#
define
HWY_AVX3_ZEN4
(
1LL
<
<
6
)
/
/
see
HWY_WANT_AVX3_ZEN4
below
#
define
HWY_AVX3_DL
(
1LL
<
<
7
)
#
define
HWY_AVX3
(
1LL
<
<
8
)
/
/
HWY_AVX2
plus
AVX
-
512F
/
BW
/
CD
/
DQ
/
VL
#
define
HWY_AVX2
(
1LL
<
<
9
)
/
/
HWY_SSE4
plus
BMI2
+
F16
+
FMA
#
define
HWY_SSE4
(
1LL
<
<
11
)
/
/
SSE4
.
2
plus
AES
+
CLMUL
#
define
HWY_SSSE3
(
1LL
<
<
12
)
/
/
S
-
SSE3
#
define
HWY_SSE2
(
1LL
<
<
14
)
#
define
HWY_HIGHEST_TARGET_BIT_X86
14
#
define
HWY_SVE2_128
(
1LL
<
<
18
)
/
/
specialized
(
e
.
g
.
Neoverse
V2
/
N2
/
N3
)
#
define
HWY_SVE_256
(
1LL
<
<
19
)
/
/
specialized
(
Neoverse
V1
)
#
define
HWY_SVE2
(
1LL
<
<
23
)
#
define
HWY_SVE
(
1LL
<
<
24
)
#
define
HWY_NEON_BF16
(
1LL
<
<
26
)
/
/
fp16
/
dot
/
bf16
(
e
.
g
.
Neoverse
V2
/
N2
/
N3
)
#
define
HWY_NEON
(
1LL
<
<
28
)
/
/
Implies
support
for
AES
#
define
HWY_NEON_WITHOUT_AES
(
1LL
<
<
29
)
#
define
HWY_HIGHEST_TARGET_BIT_ARM
29
#
define
HWY_ALL_NEON
(
HWY_NEON_WITHOUT_AES
|
HWY_NEON
|
HWY_NEON_BF16
)
#
define
HWY_ALL_SVE
(
HWY_SVE
|
HWY_SVE2
|
HWY_SVE_256
|
HWY_SVE2_128
)
#
define
HWY_RVV
(
1LL
<
<
37
)
#
define
HWY_HIGHEST_TARGET_BIT_RVV
38
#
define
HWY_LASX
(
1LL
<
<
40
)
#
define
HWY_LSX
(
1LL
<
<
41
)
#
define
HWY_HIGHEST_TARGET_BIT_LOONGARCH
41
#
define
HWY_PPC10
(
1LL
<
<
47
)
/
/
v3
.
1
#
define
HWY_PPC9
(
1LL
<
<
48
)
/
/
v3
.
0
#
define
HWY_PPC8
(
1LL
<
<
49
)
/
/
v2
.
07
#
define
HWY_Z15
(
1LL
<
<
50
)
/
/
Z15
#
define
HWY_Z14
(
1LL
<
<
51
)
/
/
Z14
#
define
HWY_HIGHEST_TARGET_BIT_PPC
51
#
define
HWY_ALL_PPC
(
HWY_PPC8
|
HWY_PPC9
|
HWY_PPC10
)
#
define
HWY_WASM_EMU256
(
1LL
<
<
58
)
/
/
Experimental
#
define
HWY_WASM
(
1LL
<
<
59
)
#
define
HWY_HIGHEST_TARGET_BIT_WASM
60
#
define
HWY_EMU128
(
1LL
<
<
61
)
#
define
HWY_SCALAR
(
1LL
<
<
62
)
#
define
HWY_HIGHEST_TARGET_BIT_SCALAR
62
#
ifndef
HWY_DISABLED_TARGETS
#
define
HWY_DISABLED_TARGETS
0
#
endif
#
ifndef
HWY_BROKEN_CLANG6
#
if
HWY_ARCH_X86
&
&
(
HWY_COMPILER_CLANG
!
=
0
&
&
HWY_COMPILER_CLANG
<
700
)
#
define
HWY_BROKEN_CLANG6
(
HWY_SSE4
|
(
HWY_SSE4
-
1
)
)
#
if
!
defined
(
HWY_COMPILE_ONLY_SCALAR
)
#
pragma
message
(
"
x86
Clang
<
=
6
:
define
HWY_COMPILE_ONLY_SCALAR
or
upgrade
.
"
)
#
endif
#
else
#
define
HWY_BROKEN_CLANG6
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_32BIT
#
if
HWY_ARCH_X86_32
#
if
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
>
=
1300
)
#
define
HWY_BROKEN_32BIT
(
HWY_AVX3
|
(
HWY_AVX3
-
1
)
)
#
else
#
define
HWY_BROKEN_32BIT
(
HWY_AVX2
|
(
HWY_AVX2
-
1
)
)
#
endif
#
else
#
define
HWY_BROKEN_32BIT
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_MSVC
#
if
HWY_COMPILER_MSVC
!
=
0
#
define
HWY_BROKEN_MSVC
(
HWY_AVX3
|
(
HWY_AVX3
-
1
)
)
#
else
#
define
HWY_BROKEN_MSVC
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_AVX3_DL_ZEN4
#
if
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
801
)
|
|
\
(
HWY_COMPILER_ICC
&
&
HWY_COMPILER_ICC
<
2021
)
#
define
HWY_BROKEN_AVX3_DL_ZEN4
(
HWY_AVX3_DL
|
HWY_AVX3_ZEN4
)
#
else
#
define
HWY_BROKEN_AVX3_DL_ZEN4
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_AVX3_SPR
#
if
(
HWY_COMPILER_CLANG
!
=
0
&
&
HWY_COMPILER_CLANG
<
1400
)
|
|
\
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
1200
)
|
|
\
(
HWY_COMPILER_ICC
&
&
HWY_COMPILER_ICC
<
2021
)
#
define
HWY_BROKEN_AVX3_SPR
(
HWY_AVX3_SPR
)
#
else
#
define
HWY_BROKEN_AVX3_SPR
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_ARM7_BIG_ENDIAN
#
if
HWY_ARCH_ARM_V7
&
&
HWY_IS_BIG_ENDIAN
#
define
HWY_BROKEN_ARM7_BIG_ENDIAN
HWY_ALL_NEON
#
else
#
define
HWY_BROKEN_ARM7_BIG_ENDIAN
0
#
endif
#
endif
#
ifdef
__ARM_NEON_FP
#
define
HWY_HAVE_NEON_FP
__ARM_NEON_FP
#
else
#
define
HWY_HAVE_NEON_FP
0
#
endif
#
ifndef
HWY_BROKEN_ARM7_WITHOUT_VFP4
#
if
HWY_ARCH_ARM_V7
&
&
(
__ARM_ARCH_PROFILE
=
=
'
A
'
)
&
&
\
!
defined
(
__ARM_VFPV4__
)
&
&
\
!
(
(
HWY_HAVE_NEON_FP
&
0x2
)
&
&
(
__ARM_FEATURE_FMA
=
=
1
)
)
#
define
HWY_BROKEN_ARM7_WITHOUT_VFP4
HWY_ALL_NEON
#
else
#
define
HWY_BROKEN_ARM7_WITHOUT_VFP4
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_NEON_BF16
#
if
(
HWY_COMPILER_CLANG
!
=
0
&
&
HWY_COMPILER_CLANG
<
1700
)
|
|
\
(
HWY_COMPILER_GCC_ACTUAL
!
=
0
&
&
HWY_COMPILER_GCC_ACTUAL
<
1302
)
#
define
HWY_BROKEN_NEON_BF16
(
HWY_NEON_BF16
)
#
else
#
define
HWY_BROKEN_NEON_BF16
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_SVE
#
if
(
HWY_COMPILER_CLANG
&
&
HWY_COMPILER_CLANG
<
2000
)
|
|
\
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
1000
)
|
|
\
HWY_OS_APPLE
#
define
HWY_BROKEN_SVE
(
HWY_SVE
|
HWY_SVE_256
)
#
else
#
define
HWY_BROKEN_SVE
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_SVE2
#
if
(
HWY_COMPILER_CLANG
&
&
HWY_COMPILER_CLANG
<
2000
)
|
|
\
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
1000
)
|
|
\
HWY_OS_APPLE
#
define
HWY_BROKEN_SVE2
(
HWY_SVE2
|
HWY_SVE2_128
)
#
else
#
define
HWY_BROKEN_SVE2
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_PPC10
#
if
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
1100
)
#
define
HWY_BROKEN_PPC10
(
HWY_PPC10
)
#
elif
HWY_ARCH_PPC
&
&
HWY_IS_BIG_ENDIAN
&
&
\
(
(
HWY_COMPILER3_CLANG
&
&
HWY_COMPILER3_CLANG
<
160001
)
|
|
\
(
HWY_COMPILER_GCC_ACTUAL
>
=
1200
&
&
HWY_COMPILER_GCC_ACTUAL
<
=
1203
)
|
|
\
(
HWY_COMPILER_GCC_ACTUAL
>
=
1300
&
&
HWY_COMPILER_GCC_ACTUAL
<
=
1301
)
)
#
define
HWY_BROKEN_PPC10
(
HWY_PPC10
)
#
else
#
define
HWY_BROKEN_PPC10
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_PPC_32BIT
#
if
HWY_ARCH_PPC
&
&
!
HWY_ARCH_PPC_64
#
define
HWY_BROKEN_PPC_32BIT
(
HWY_PPC8
|
HWY_PPC9
|
HWY_PPC10
)
#
else
#
define
HWY_BROKEN_PPC_32BIT
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_RVV
#
if
HWY_ARCH_RISCV
&
&
\
(
(
HWY_COMPILER_CLANG
&
&
HWY_COMPILER_CLANG
<
1600
)
|
|
\
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
1300
)
)
#
define
HWY_BROKEN_RVV
(
HWY_RVV
)
#
else
#
define
HWY_BROKEN_RVV
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_LOONGARCH
#
if
HWY_ARCH_LOONGARCH
&
&
\
(
(
HWY_COMPILER_CLANG
&
&
HWY_COMPILER_CLANG
<
1800
)
|
|
\
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
1400
)
)
#
define
HWY_BROKEN_LOONGARCH
(
HWY_LSX
|
HWY_LASX
)
#
else
#
define
HWY_BROKEN_LOONGARCH
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_Z14
#
if
HWY_ARCH_S390X
#
if
HWY_COMPILER_CLANG
&
&
HWY_COMPILER_CLANG
<
1900
#
define
HWY_BROKEN_Z14
(
HWY_Z14
|
HWY_Z15
)
#
elif
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
900
#
define
HWY_BROKEN_Z14
(
HWY_Z15
)
#
else
#
define
HWY_BROKEN_Z14
0
#
endif
#
else
#
define
HWY_BROKEN_Z14
0
#
endif
#
endif
#
ifndef
HWY_BROKEN_TARGETS
#
define
HWY_BROKEN_TARGETS
\
(
HWY_BROKEN_CLANG6
|
HWY_BROKEN_32BIT
|
HWY_BROKEN_MSVC
|
\
HWY_BROKEN_AVX3_DL_ZEN4
|
HWY_BROKEN_AVX3_SPR
|
\
HWY_BROKEN_ARM7_BIG_ENDIAN
|
HWY_BROKEN_ARM7_WITHOUT_VFP4
|
\
HWY_BROKEN_NEON_BF16
|
HWY_BROKEN_SVE
|
HWY_BROKEN_SVE2
|
\
HWY_BROKEN_PPC10
|
HWY_BROKEN_PPC_32BIT
|
HWY_BROKEN_RVV
|
\
HWY_BROKEN_LOONGARCH
|
HWY_BROKEN_Z14
)
#
endif
#
define
HWY_ENABLED
(
targets
)
\
(
(
targets
)
&
~
(
(
HWY_DISABLED_TARGETS
)
|
(
HWY_BROKEN_TARGETS
)
)
)
#
if
!
defined
(
HWY_BROKEN_EMU128
)
#
if
(
HWY_COMPILER_GCC_ACTUAL
&
&
HWY_COMPILER_GCC_ACTUAL
<
1400
)
|
|
\
defined
(
HWY_NO_LIBCXX
)
#
define
HWY_BROKEN_EMU128
1
#
else
#
define
HWY_BROKEN_EMU128
0
#
endif
#
endif
#
if
defined
(
HWY_COMPILE_ONLY_SCALAR
)
|
|
HWY_BROKEN_EMU128
#
define
HWY_BASELINE_SCALAR
HWY_SCALAR
#
else
#
define
HWY_BASELINE_SCALAR
HWY_EMU128
#
endif
#
if
HWY_ARCH_WASM
&
&
defined
(
__wasm_simd128__
)
#
if
defined
(
HWY_WANT_WASM2
)
#
define
HWY_BASELINE_WASM
HWY_WASM_EMU256
#
else
#
define
HWY_BASELINE_WASM
HWY_WASM
#
endif
#
else
#
define
HWY_BASELINE_WASM
0
#
endif
#
if
HWY_ARCH_PPC
&
&
HWY_COMPILER_GCC
&
&
defined
(
__ALTIVEC__
)
&
&
\
defined
(
__VSX__
)
&
&
defined
(
__POWER8_VECTOR__
)
&
&
\
(
defined
(
__CRYPTO__
)
|
|
defined
(
HWY_DISABLE_PPC8_CRYPTO
)
)
#
define
HWY_BASELINE_PPC8
HWY_PPC8
#
else
#
define
HWY_BASELINE_PPC8
0
#
endif
#
if
HWY_BASELINE_PPC8
!
=
0
&
&
defined
(
__POWER9_VECTOR__
)
#
define
HWY_BASELINE_PPC9
HWY_PPC9
#
else
#
define
HWY_BASELINE_PPC9
0
#
endif
#
if
HWY_BASELINE_PPC9
!
=
0
&
&
\
(
defined
(
_ARCH_PWR10
)
|
|
defined
(
__POWER10_VECTOR__
)
)
#
define
HWY_BASELINE_PPC10
HWY_PPC10
#
else
#
define
HWY_BASELINE_PPC10
0
#
endif
#
if
HWY_ARCH_S390X
&
&
defined
(
__VEC__
)
&
&
defined
(
__ARCH__
)
&
&
__ARCH__
>
=
12
#
define
HWY_BASELINE_Z14
HWY_Z14
#
else
#
define
HWY_BASELINE_Z14
0
#
endif
#
if
HWY_BASELINE_Z14
&
&
__ARCH__
>
=
13
#
define
HWY_BASELINE_Z15
HWY_Z15
#
else
#
define
HWY_BASELINE_Z15
0
#
endif
#
define
HWY_BASELINE_SVE2
0
#
define
HWY_BASELINE_SVE
0
#
define
HWY_BASELINE_NEON
0
#
if
HWY_ARCH_ARM
#
if
defined
(
__ARM_FEATURE_SVE2
)
&
&
\
(
HWY_COMPILER_CLANG
>
=
1400
|
|
HWY_COMPILER_GCC_ACTUAL
>
=
1200
)
#
undef
HWY_BASELINE_SVE2
/
/
was
0
will
be
re
-
defined
#
if
defined
(
__ARM_FEATURE_SVE_BITS
)
&
&
__ARM_FEATURE_SVE_BITS
=
=
128
#
define
HWY_BASELINE_SVE2
HWY_SVE2_128
#
else
#
define
HWY_BASELINE_SVE2
HWY_SVE2
#
endif
#
endif
#
if
defined
(
__ARM_FEATURE_SVE
)
&
&
\
(
HWY_COMPILER_CLANG
>
=
900
|
|
HWY_COMPILER_GCC_ACTUAL
>
=
800
)
#
undef
HWY_BASELINE_SVE
/
/
was
0
will
be
re
-
defined
#
if
defined
(
__ARM_FEATURE_SVE_BITS
)
&
&
__ARM_FEATURE_SVE_BITS
=
=
256
#
define
HWY_BASELINE_SVE
HWY_SVE_256
#
else
#
define
HWY_BASELINE_SVE
HWY_SVE
#
endif
#
endif
#
if
defined
(
__ARM_NEON__
)
|
|
defined
(
__ARM_NEON
)
#
undef
HWY_BASELINE_NEON
#
if
defined
(
__ARM_FEATURE_AES
)
&
&
\
defined
(
__ARM_FEATURE_FP16_VECTOR_ARITHMETIC
)
&
&
\
defined
(
__ARM_FEATURE_DOTPROD
)
&
&
\
defined
(
__ARM_FEATURE_BF16_VECTOR_ARITHMETIC
)
#
define
HWY_BASELINE_NEON
HWY_ALL_NEON
#
elif
defined
(
__ARM_FEATURE_AES
)
#
define
HWY_BASELINE_NEON
(
HWY_NEON_WITHOUT_AES
|
HWY_NEON
)
#
else
#
define
HWY_BASELINE_NEON
(
HWY_NEON_WITHOUT_AES
)
#
endif
#
endif
#
endif
#
if
HWY_COMPILER_MSVC
#
if
HWY_ARCH_X86_32
#
if
_M_IX86_FP
>
=
2
#
define
HWY_CHECK_SSE2
1
#
else
#
define
HWY_CHECK_SSE2
0
#
endif
#
elif
HWY_ARCH_X86_64
#
define
HWY_CHECK_SSE2
1
#
else
#
define
HWY_CHECK_SSE2
0
#
endif
#
if
defined
(
__AVX__
)
#
define
HWY_CHECK_SSSE3
1
#
define
HWY_CHECK_SSE4
1
#
else
#
define
HWY_CHECK_SSSE3
0
#
define
HWY_CHECK_SSE4
0
#
endif
#
define
HWY_CHECK_PCLMUL_AES
1
#
define
HWY_CHECK_BMI2_FMA
1
#
define
HWY_CHECK_F16C
1
#
else
#
if
defined
(
__SSE2__
)
#
define
HWY_CHECK_SSE2
1
#
else
#
define
HWY_CHECK_SSE2
0
#
endif
#
if
defined
(
__SSSE3__
)
#
define
HWY_CHECK_SSSE3
1
#
else
#
define
HWY_CHECK_SSSE3
0
#
endif
#
if
defined
(
__SSE4_1__
)
&
&
defined
(
__SSE4_2__
)
#
define
HWY_CHECK_SSE4
1
#
else
#
define
HWY_CHECK_SSE4
0
#
endif
#
if
defined
(
HWY_DISABLE_PCLMUL_AES
)
|
|
(
defined
(
__PCLMUL__
)
&
&
defined
(
__AES__
)
)
#
define
HWY_CHECK_PCLMUL_AES
1
#
else
#
define
HWY_CHECK_PCLMUL_AES
0
#
endif
#
if
defined
(
HWY_DISABLE_BMI2_FMA
)
|
|
(
defined
(
__BMI2__
)
&
&
defined
(
__FMA__
)
)
#
define
HWY_CHECK_BMI2_FMA
1
#
else
#
define
HWY_CHECK_BMI2_FMA
0
#
endif
#
if
defined
(
HWY_DISABLE_F16C
)
|
|
defined
(
__F16C__
)
#
define
HWY_CHECK_F16C
1
#
else
#
define
HWY_CHECK_F16C
0
#
endif
#
endif
#
if
HWY_ARCH_X86
&
&
\
(
(
defined
(
HWY_WANT_SSE2
)
&
&
HWY_WANT_SSE2
)
|
|
HWY_CHECK_SSE2
)
#
define
HWY_BASELINE_SSE2
HWY_SSE2
#
else
#
define
HWY_BASELINE_SSE2
0
#
endif
#
if
HWY_ARCH_X86
&
&
\
(
(
defined
(
HWY_WANT_SSSE3
)
&
&
HWY_WANT_SSSE3
)
|
|
HWY_CHECK_SSSE3
)
#
define
HWY_BASELINE_SSSE3
HWY_SSSE3
#
else
#
define
HWY_BASELINE_SSSE3
0
#
endif
#
if
HWY_ARCH_X86
&
&
(
(
defined
(
HWY_WANT_SSE4
)
&
&
HWY_WANT_SSE4
)
|
|
\
(
HWY_CHECK_SSE4
&
&
HWY_CHECK_PCLMUL_AES
)
)
#
define
HWY_BASELINE_SSE4
HWY_SSE4
#
else
#
define
HWY_BASELINE_SSE4
0
#
endif
#
if
HWY_BASELINE_SSE4
!
=
0
&
&
HWY_CHECK_BMI2_FMA
&
&
HWY_CHECK_F16C
&
&
\
defined
(
__AVX2__
)
#
define
HWY_BASELINE_AVX2
HWY_AVX2
#
else
#
define
HWY_BASELINE_AVX2
0
#
endif
#
if
HWY_BASELINE_AVX2
!
=
0
&
&
defined
(
__AVX512F__
)
&
&
defined
(
__AVX512BW__
)
&
&
\
defined
(
__AVX512DQ__
)
&
&
defined
(
__AVX512VL__
)
&
&
\
(
(
!
HWY_COMPILER_GCC_ACTUAL
&
&
!
HWY_COMPILER_CLANG
)
|
|
\
HWY_COMPILER_GCC_ACTUAL
<
1400
|
|
HWY_COMPILER_CLANG
<
1800
|
|
\
defined
(
__EVEX512__
)
)
#
define
HWY_BASELINE_AVX3
HWY_AVX3
#
else
#
define
HWY_BASELINE_AVX3
0
#
endif
#
if
HWY_BASELINE_AVX3
!
=
0
&
&
defined
(
__AVX512VNNI__
)
&
&
defined
(
__VAES__
)
&
&
\
defined
(
__VPCLMULQDQ__
)
&
&
defined
(
__AVX512VBMI__
)
&
&
\
defined
(
__AVX512VBMI2__
)
&
&
defined
(
__AVX512VPOPCNTDQ__
)
&
&
\
defined
(
__AVX512BITALG__
)
#
define
HWY_BASELINE_AVX3_DL
HWY_AVX3_DL
#
else
#
define
HWY_BASELINE_AVX3_DL
0
#
endif
#
if
defined
(
HWY_WANT_AVX3_ZEN4
)
&
&
HWY_BASELINE_AVX3_DL
!
=
0
#
define
HWY_BASELINE_AVX3_ZEN4
HWY_AVX3_ZEN4
#
else
#
define
HWY_BASELINE_AVX3_ZEN4
0
#
endif
#
if
HWY_BASELINE_AVX2
!
=
0
&
&
defined
(
__AVX10_2__
)
#
define
HWY_BASELINE_AVX10_2
HWY_AVX10_2
#
else
#
define
HWY_BASELINE_AVX10_2
0
#
endif
#
if
HWY_BASELINE_AVX3_DL
!
=
0
&
&
defined
(
__AVX512BF16__
)
&
&
\
defined
(
__AVX512FP16__
)
#
define
HWY_BASELINE_AVX3_SPR
HWY_AVX3_SPR
#
else
#
define
HWY_BASELINE_AVX3_SPR
0
#
endif
#
if
HWY_BASELINE_AVX3_SPR
!
=
0
&
&
defined
(
__AVX10_2_512__
)
#
define
HWY_BASELINE_AVX10_2_512
HWY_AVX10_2_512
#
else
#
define
HWY_BASELINE_AVX10_2_512
0
#
endif
#
if
HWY_ARCH_RISCV
&
&
defined
(
__riscv_v_intrinsic
)
&
&
\
__riscv_v_intrinsic
>
=
11000
#
define
HWY_BASELINE_RVV
HWY_RVV
#
else
#
define
HWY_BASELINE_RVV
0
#
endif
#
if
HWY_ARCH_LOONGARCH
&
&
defined
(
__loongarch_sx
)
&
&
defined
(
__loongarch_asx
)
#
define
HWY_BASELINE_LOONGARCH
(
HWY_LSX
|
HWY_LASX
)
#
elif
HWY_ARCH_LOONGARCH
&
&
defined
(
__loongarch_sx
)
#
define
HWY_BASELINE_LOONGARCH
(
HWY_LSX
)
#
else
#
define
HWY_BASELINE_LOONGARCH
0
#
endif
#
ifndef
HWY_BASELINE_TARGETS
#
define
HWY_BASELINE_TARGETS
\
(
HWY_BASELINE_SCALAR
|
HWY_BASELINE_WASM
|
HWY_BASELINE_PPC8
|
\
HWY_BASELINE_PPC9
|
HWY_BASELINE_PPC10
|
HWY_BASELINE_Z14
|
\
HWY_BASELINE_Z15
|
HWY_BASELINE_SVE2
|
HWY_BASELINE_SVE
|
\
HWY_BASELINE_NEON
|
HWY_BASELINE_SSE2
|
HWY_BASELINE_SSSE3
|
\
HWY_BASELINE_SSE4
|
HWY_BASELINE_AVX2
|
HWY_BASELINE_AVX3
|
\
HWY_BASELINE_AVX3_DL
|
HWY_BASELINE_AVX3_ZEN4
|
HWY_BASELINE_AVX10_2
|
\
HWY_BASELINE_AVX3_SPR
|
HWY_BASELINE_AVX10_2_512
|
HWY_BASELINE_RVV
|
\
HWY_BASELINE_LOONGARCH
)
#
endif
#
define
HWY_ENABLED_BASELINE
HWY_ENABLED
(
HWY_BASELINE_TARGETS
)
#
if
HWY_ENABLED_BASELINE
=
=
0
#
error
"
At
least
one
baseline
target
must
be
defined
and
enabled
"
#
endif
#
define
HWY_STATIC_TARGET
(
HWY_ENABLED_BASELINE
&
-
HWY_ENABLED_BASELINE
)
#
define
HWY_TARGET
HWY_STATIC_TARGET
#
if
HWY_ARCH_LOONGARCH
&
&
!
defined
(
HWY_COMPILE_ONLY_SCALAR
)
&
&
\
!
defined
(
HWY_COMPILE_ONLY_EMU128
)
#
undef
HWY_COMPILE_ONLY_STATIC
#
define
HWY_COMPILE_ONLY_EMU128
#
endif
#
if
1
<
(
defined
(
HWY_COMPILE_ONLY_SCALAR
)
+
defined
(
HWY_COMPILE_ONLY_EMU128
)
+
\
defined
(
HWY_COMPILE_ONLY_STATIC
)
)
#
error
"
Can
only
define
one
of
HWY_COMPILE_ONLY_
{
SCALAR
|
EMU128
|
STATIC
}
-
bug
?
"
#
endif
#
ifndef
HWY_HAVE_ASM_HWCAP
#
ifdef
TOOLCHAIN_MISS_ASM_HWCAP_H
#
define
HWY_HAVE_ASM_HWCAP
0
/
/
CMake
failed
to
find
the
header
#
elif
defined
(
__has_include
)
#
if
__has_include
(
<
asm
/
hwcap
.
h
>
)
#
define
HWY_HAVE_ASM_HWCAP
1
/
/
header
present
#
else
#
define
HWY_HAVE_ASM_HWCAP
0
/
/
header
not
present
#
endif
#
else
#
define
HWY_HAVE_ASM_HWCAP
0
#
endif
#
endif
#
ifndef
HWY_HAVE_AUXV
#
ifdef
TOOLCHAIN_MISS_SYS_AUXV_H
#
define
HWY_HAVE_AUXV
0
/
/
CMake
failed
to
find
the
header
#
elif
defined
(
__has_include
)
#
if
__has_include
(
<
sys
/
auxv
.
h
>
)
#
define
HWY_HAVE_AUXV
1
/
/
header
present
#
else
#
define
HWY_HAVE_AUXV
0
/
/
header
not
present
#
endif
#
else
#
define
HWY_HAVE_AUXV
0
#
endif
#
endif
#
ifndef
HWY_HAVE_RUNTIME_DISPATCH_RVV
#
if
HWY_ARCH_RISCV
&
&
HWY_COMPILER_CLANG
>
=
1900
&
&
0
#
define
HWY_HAVE_RUNTIME_DISPATCH_RVV
1
#
else
#
define
HWY_HAVE_RUNTIME_DISPATCH_RVV
0
#
endif
#
endif
#
ifndef
HWY_HAVE_RUNTIME_DISPATCH_APPLE
#
if
HWY_ARCH_ARM_A64
&
&
HWY_OS_APPLE
&
&
\
(
HWY_COMPILER_GCC_ACTUAL
|
|
HWY_COMPILER_CLANG
>
=
1700
)
#
define
HWY_HAVE_RUNTIME_DISPATCH_APPLE
1
#
else
#
define
HWY_HAVE_RUNTIME_DISPATCH_APPLE
0
#
endif
#
endif
#
ifndef
HWY_HAVE_RUNTIME_DISPATCH_LINUX
#
if
(
HWY_ARCH_ARM
|
|
HWY_ARCH_PPC
|
|
HWY_ARCH_S390X
)
&
&
HWY_OS_LINUX
&
&
\
(
HWY_COMPILER_GCC_ACTUAL
|
|
HWY_COMPILER_CLANG
>
=
1700
)
&
&
HWY_HAVE_AUXV
#
define
HWY_HAVE_RUNTIME_DISPATCH_LINUX
1
#
else
#
define
HWY_HAVE_RUNTIME_DISPATCH_LINUX
0
#
endif
#
endif
#
ifndef
HWY_HAVE_RUNTIME_DISPATCH
#
if
HWY_ARCH_X86
|
|
HWY_HAVE_RUNTIME_DISPATCH_RVV
|
|
\
HWY_HAVE_RUNTIME_DISPATCH_APPLE
|
|
HWY_HAVE_RUNTIME_DISPATCH_LINUX
#
define
HWY_HAVE_RUNTIME_DISPATCH
1
#
else
#
define
HWY_HAVE_RUNTIME_DISPATCH
0
#
endif
#
endif
#
if
HWY_ARCH_ARM_A64
&
&
HWY_HAVE_RUNTIME_DISPATCH
#
define
HWY_ATTAINABLE_NEON
HWY_ALL_NEON
#
elif
HWY_ARCH_ARM
#
define
HWY_ATTAINABLE_NEON
(
HWY_BASELINE_NEON
)
#
else
#
define
HWY_ATTAINABLE_NEON
0
#
endif
#
if
HWY_ARCH_ARM_A64
&
&
\
(
HWY_COMPILER_CLANG
>
=
900
|
|
HWY_COMPILER_GCC_ACTUAL
>
=
800
)
&
&
\
(
HWY_HAVE_RUNTIME_DISPATCH
|
|
\
(
HWY_ENABLED_BASELINE
&
(
HWY_SVE
|
HWY_SVE_256
)
)
)
#
define
HWY_ATTAINABLE_SVE
(
HWY_SVE
|
HWY_SVE_256
)
#
else
#
define
HWY_ATTAINABLE_SVE
0
#
endif
#
if
HWY_ARCH_ARM_A64
&
&
\
(
HWY_COMPILER_CLANG
>
=
1400
|
|
HWY_COMPILER_GCC_ACTUAL
>
=
1200
)
&
&
\
(
HWY_HAVE_RUNTIME_DISPATCH
|
|
\
(
HWY_ENABLED_BASELINE
&
(
HWY_SVE2
|
HWY_SVE2_128
)
)
)
#
define
HWY_ATTAINABLE_SVE2
(
HWY_SVE2
|
HWY_SVE2_128
)
#
else
#
define
HWY_ATTAINABLE_SVE2
0
#
endif
#
if
HWY_ARCH_PPC
&
&
defined
(
__ALTIVEC__
)
&
&
\
(
!
HWY_COMPILER_CLANG
|
|
HWY_BASELINE_PPC8
!
=
0
)
#
if
(
HWY_BASELINE_PPC9
|
HWY_BASELINE_PPC10
)
&
&
\
!
defined
(
HWY_SKIP_NON_BEST_BASELINE
)
#
define
HWY_SKIP_NON_BEST_BASELINE
#
endif
#
define
HWY_ATTAINABLE_PPC
(
HWY_PPC8
|
HWY_PPC9
|
HWY_PPC10
)
#
else
#
define
HWY_ATTAINABLE_PPC
0
#
endif
#
if
HWY_ARCH_S390X
&
&
HWY_BASELINE_Z14
!
=
0
#
define
HWY_ATTAINABLE_S390X
(
HWY_Z14
|
HWY_Z15
)
#
else
#
define
HWY_ATTAINABLE_S390X
0
#
endif
#
if
HWY_ARCH_RISCV
&
&
HWY_HAVE_RUNTIME_DISPATCH
#
define
HWY_ATTAINABLE_RISCV
HWY_RVV
#
else
#
define
HWY_ATTAINABLE_RISCV
HWY_BASELINE_RVV
#
endif
#
if
HWY_ARCH_LOONGARCH
&
&
HWY_HAVE_RUNTIME_DISPATCH
#
define
HWY_ATTAINABLE_LOONGARCH
(
HWY_LSX
|
HWY_LASX
)
#
else
#
define
HWY_ATTAINABLE_LOONGARCH
HWY_BASELINE_LOONGARCH
#
endif
#
ifndef
HWY_ATTAINABLE_TARGETS_X86
#
if
HWY_COMPILER_MSVC
&
&
defined
(
HWY_SLOW_MSVC
)
#
define
HWY_ATTAINABLE_TARGETS_X86
\
HWY_ENABLED
(
HWY_BASELINE_SCALAR
|
HWY_STATIC_TARGET
|
HWY_AVX2
)
#
else
#
define
HWY_ATTAINABLE_TARGETS_X86
\
HWY_ENABLED
(
HWY_BASELINE_SCALAR
|
HWY_SSE2
|
HWY_SSSE3
|
HWY_SSE4
|
\
HWY_AVX2
|
HWY_AVX3
|
HWY_AVX3_DL
|
HWY_AVX3_ZEN4
|
\
HWY_AVX3_SPR
)
#
endif
#
endif
#
if
HWY_ARCH_X86
#
define
HWY_ATTAINABLE_TARGETS
HWY_ATTAINABLE_TARGETS_X86
#
elif
HWY_ARCH_ARM
#
define
HWY_ATTAINABLE_TARGETS
\
HWY_ENABLED
(
HWY_BASELINE_SCALAR
|
HWY_ATTAINABLE_NEON
|
HWY_ATTAINABLE_SVE
|
\
HWY_ATTAINABLE_SVE2
)
#
elif
HWY_ARCH_PPC
#
define
HWY_ATTAINABLE_TARGETS
\
HWY_ENABLED
(
HWY_BASELINE_SCALAR
|
HWY_ATTAINABLE_PPC
)
#
elif
HWY_ARCH_S390X
#
define
HWY_ATTAINABLE_TARGETS
\
HWY_ENABLED
(
HWY_BASELINE_SCALAR
|
HWY_ATTAINABLE_S390X
)
#
elif
HWY_ARCH_RISCV
#
define
HWY_ATTAINABLE_TARGETS
\
HWY_ENABLED
(
HWY_BASELINE_SCALAR
|
HWY_ATTAINABLE_RISCV
)
#
elif
HWY_ARCH_LOONGARCH
#
define
HWY_ATTAINABLE_TARGETS
\
HWY_ENABLED
(
HWY_BASELINE_SCALAR
|
HWY_ATTAINABLE_LOONGARCH
)
#
else
#
define
HWY_ATTAINABLE_TARGETS
(
HWY_ENABLED_BASELINE
)
#
endif
#
if
defined
(
HWY_COMPILE_ONLY_EMU128
)
&
&
!
HWY_BROKEN_EMU128
#
undef
HWY_STATIC_TARGET
#
define
HWY_STATIC_TARGET
HWY_EMU128
/
/
override
baseline
#
define
HWY_TARGETS
HWY_EMU128
#
elif
defined
(
HWY_COMPILE_ONLY_SCALAR
)
|
|
\
(
defined
(
HWY_COMPILE_ONLY_EMU128
)
&
&
HWY_BROKEN_EMU128
)
#
undef
HWY_STATIC_TARGET
#
define
HWY_STATIC_TARGET
HWY_SCALAR
/
/
override
baseline
#
define
HWY_TARGETS
HWY_SCALAR
#
elif
defined
(
HWY_COMPILE_ONLY_STATIC
)
#
define
HWY_TARGETS
HWY_STATIC_TARGET
#
elif
(
defined
(
HWY_COMPILE_ALL_ATTAINABLE
)
|
|
defined
(
HWY_IS_TEST
)
)
&
&
\
!
defined
(
HWY_SKIP_NON_BEST_BASELINE
)
#
define
HWY_TARGETS
HWY_ATTAINABLE_TARGETS
#
else
#
define
HWY_TARGETS
\
(
HWY_ATTAINABLE_TARGETS
&
(
(
HWY_STATIC_TARGET
-
1LL
)
|
HWY_STATIC_TARGET
)
)
#
endif
#
if
(
HWY_TARGETS
&
HWY_STATIC_TARGET
)
=
=
0
#
error
"
Logic
error
:
best
baseline
should
be
included
in
dynamic
targets
"
#
endif
#
endif
