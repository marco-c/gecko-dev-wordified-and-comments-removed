#
ifndef
AOM_AOM_DSP_PROB_H_
#
define
AOM_AOM_DSP_PROB_H_
#
include
<
assert
.
h
>
#
include
<
stdio
.
h
>
#
include
"
config
/
aom_config
.
h
"
#
include
"
aom_dsp
/
aom_dsp_common
.
h
"
#
include
"
aom_dsp
/
entcode
.
h
"
#
include
"
aom_ports
/
bitops
.
h
"
#
include
"
aom_ports
/
mem
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
uint16_t
aom_cdf_prob
;
#
define
CDF_SIZE
(
x
)
(
(
x
)
+
1
)
#
define
CDF_PROB_BITS
15
#
define
CDF_PROB_TOP
(
1
<
<
CDF_PROB_BITS
)
#
define
AOM_ICDF
(
x
)
(
CDF_PROB_TOP
-
(
x
)
)
#
define
AOM_CDF2
(
a0
)
AOM_ICDF
(
a0
)
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF3
(
a0
a1
)
AOM_ICDF
(
a0
)
AOM_ICDF
(
a1
)
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF4
(
a0
a1
a2
)
\
AOM_ICDF
(
a0
)
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF5
(
a0
a1
a2
a3
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF6
(
a0
a1
a2
a3
a4
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
\
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF7
(
a0
a1
a2
a3
a4
a5
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
AOM_ICDF
(
a5
)
\
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF8
(
a0
a1
a2
a3
a4
a5
a6
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
AOM_ICDF
(
a5
)
\
AOM_ICDF
(
a6
)
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF9
(
a0
a1
a2
a3
a4
a5
a6
a7
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
AOM_ICDF
(
a5
)
\
AOM_ICDF
(
a6
)
AOM_ICDF
(
a7
)
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF10
(
a0
a1
a2
a3
a4
a5
a6
a7
a8
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
AOM_ICDF
(
a5
)
\
AOM_ICDF
(
a6
)
AOM_ICDF
(
a7
)
AOM_ICDF
(
a8
)
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF11
(
a0
a1
a2
a3
a4
a5
a6
a7
a8
a9
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
AOM_ICDF
(
a5
)
\
AOM_ICDF
(
a6
)
AOM_ICDF
(
a7
)
AOM_ICDF
(
a8
)
AOM_ICDF
(
a9
)
\
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF12
(
a0
a1
a2
a3
a4
a5
a6
a7
a8
a9
a10
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
AOM_ICDF
(
a5
)
\
AOM_ICDF
(
a6
)
AOM_ICDF
(
a7
)
AOM_ICDF
(
a8
)
AOM_ICDF
(
a9
)
AOM_ICDF
(
a10
)
\
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF13
(
a0
a1
a2
a3
a4
a5
a6
a7
a8
a9
a10
a11
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
AOM_ICDF
(
a5
)
\
AOM_ICDF
(
a6
)
AOM_ICDF
(
a7
)
AOM_ICDF
(
a8
)
AOM_ICDF
(
a9
)
AOM_ICDF
(
a10
)
\
AOM_ICDF
(
a11
)
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF14
(
a0
a1
a2
a3
a4
a5
a6
a7
a8
a9
a10
a11
a12
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
AOM_ICDF
(
a5
)
\
AOM_ICDF
(
a6
)
AOM_ICDF
(
a7
)
AOM_ICDF
(
a8
)
AOM_ICDF
(
a9
)
AOM_ICDF
(
a10
)
\
AOM_ICDF
(
a11
)
AOM_ICDF
(
a12
)
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF15
(
a0
a1
a2
a3
a4
a5
a6
a7
a8
a9
a10
a11
a12
a13
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
AOM_ICDF
(
a5
)
\
AOM_ICDF
(
a6
)
AOM_ICDF
(
a7
)
AOM_ICDF
(
a8
)
AOM_ICDF
(
a9
)
AOM_ICDF
(
a10
)
\
AOM_ICDF
(
a11
)
AOM_ICDF
(
a12
)
AOM_ICDF
(
a13
)
AOM_ICDF
(
CDF_PROB_TOP
)
0
#
define
AOM_CDF16
(
a0
a1
a2
a3
a4
a5
a6
a7
a8
a9
a10
a11
a12
a13
\
a14
)
\
AOM_ICDF
(
a0
)
\
AOM_ICDF
(
a1
)
AOM_ICDF
(
a2
)
AOM_ICDF
(
a3
)
AOM_ICDF
(
a4
)
AOM_ICDF
(
a5
)
\
AOM_ICDF
(
a6
)
AOM_ICDF
(
a7
)
AOM_ICDF
(
a8
)
AOM_ICDF
(
a9
)
AOM_ICDF
(
a10
)
\
AOM_ICDF
(
a11
)
AOM_ICDF
(
a12
)
AOM_ICDF
(
a13
)
AOM_ICDF
(
a14
)
\
AOM_ICDF
(
CDF_PROB_TOP
)
0
static
inline
uint8_t
get_prob
(
unsigned
int
num
unsigned
int
den
)
{
assert
(
den
!
=
0
)
;
{
const
int
p
=
(
int
)
(
(
(
uint64_t
)
num
*
256
+
(
den
>
>
1
)
)
/
den
)
;
const
int
clipped_prob
=
p
|
(
(
255
-
p
)
>
>
23
)
|
(
p
=
=
0
)
;
return
(
uint8_t
)
clipped_prob
;
}
}
static
inline
void
update_cdf
(
aom_cdf_prob
*
cdf
int8_t
val
int
nsymbs
)
{
assert
(
nsymbs
<
17
)
;
const
int
count
=
cdf
[
nsymbs
]
;
const
int
rate
=
4
+
(
count
>
>
4
)
+
(
nsymbs
>
3
)
;
int
i
=
0
;
do
{
if
(
i
<
val
)
{
cdf
[
i
]
+
=
(
CDF_PROB_TOP
-
cdf
[
i
]
)
>
>
rate
;
}
else
{
cdf
[
i
]
-
=
cdf
[
i
]
>
>
rate
;
}
}
while
(
+
+
i
<
nsymbs
-
1
)
;
cdf
[
nsymbs
]
+
=
(
count
<
32
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
