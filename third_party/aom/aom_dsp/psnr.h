#
ifndef
AOM_DSP_PSNR_H_
#
define
AOM_DSP_PSNR_H_
#
include
"
aom_scale
/
yv12config
.
h
"
#
define
MAX_PSNR
100
.
0
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
struct
{
double
psnr
[
4
]
;
uint64_t
sse
[
4
]
;
uint32_t
samples
[
4
]
;
}
PSNR_STATS
;
double
aom_sse_to_psnr
(
double
samples
double
peak
double
sse
)
;
int64_t
aom_get_y_sse_part
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
int
hstart
int
width
int
vstart
int
height
)
;
int64_t
aom_get_y_sse
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
)
;
int64_t
aom_get_u_sse_part
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
int
hstart
int
width
int
vstart
int
height
)
;
int64_t
aom_get_u_sse
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
)
;
int64_t
aom_get_v_sse_part
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
int
hstart
int
width
int
vstart
int
height
)
;
int64_t
aom_get_v_sse
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
)
;
int64_t
aom_get_sse_plane
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
int
plane
int
highbd
)
;
#
if
CONFIG_HIGHBITDEPTH
int64_t
aom_highbd_get_y_sse_part
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
int
hstart
int
width
int
vstart
int
height
)
;
int64_t
aom_highbd_get_y_sse
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
)
;
int64_t
aom_highbd_get_u_sse_part
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
int
hstart
int
width
int
vstart
int
height
)
;
int64_t
aom_highbd_get_u_sse
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
)
;
int64_t
aom_highbd_get_v_sse_part
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
int
hstart
int
width
int
vstart
int
height
)
;
int64_t
aom_highbd_get_v_sse
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
)
;
void
aom_calc_highbd_psnr
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
PSNR_STATS
*
psnr
unsigned
int
bit_depth
unsigned
int
in_bit_depth
)
;
#
endif
void
aom_calc_psnr
(
const
YV12_BUFFER_CONFIG
*
a
const
YV12_BUFFER_CONFIG
*
b
PSNR_STATS
*
psnr
)
;
double
aom_psnrhvs
(
const
YV12_BUFFER_CONFIG
*
source
const
YV12_BUFFER_CONFIG
*
dest
double
*
phvs_y
double
*
phvs_u
double
*
phvs_v
uint32_t
bd
uint32_t
in_bd
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
