#
ifndef
AOM_AOM_DSP_BUF_ANS_H_
#
define
AOM_AOM_DSP_BUF_ANS_H_
#
include
<
assert
.
h
>
#
include
"
config
/
aom_config
.
h
"
#
include
"
aom
/
aom_integer
.
h
"
#
include
"
aom_dsp
/
ans
.
h
"
#
include
"
aom_dsp
/
answriter
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
ANS_METHOD_RABS
0
#
define
ANS_METHOD_RANS
1
struct
buffered_ans_symbol
{
unsigned
int
method
:
1
;
unsigned
int
val_start
:
RANS_PROB_BITS
;
unsigned
int
prob
:
RANS_PROB_BITS
;
}
;
struct
BufAnsCoder
{
struct
aom_internal_error_info
*
error
;
struct
buffered_ans_symbol
*
buf
;
struct
AnsCoder
ans
;
int
size
;
int
offset
;
int
output_bytes
;
#
if
ANS_MAX_SYMBOLS
int
window_size
;
#
endif
int
pos
;
uint8_t
allow_update_cdf
;
}
;
void
aom_buf_ans_alloc
(
struct
BufAnsCoder
*
c
struct
aom_internal_error_info
*
error
)
;
void
aom_buf_ans_free
(
struct
BufAnsCoder
*
c
)
;
#
if
!
ANS_MAX_SYMBOLS
void
aom_buf_ans_grow
(
struct
BufAnsCoder
*
c
)
;
#
endif
void
aom_buf_ans_flush
(
struct
BufAnsCoder
*
const
c
)
;
static
INLINE
void
buf_ans_write_init
(
struct
BufAnsCoder
*
const
c
uint8_t
*
const
output_buffer
)
{
c
-
>
offset
=
0
;
c
-
>
output_bytes
=
0
;
ans_write_init
(
&
c
-
>
ans
output_buffer
)
;
}
static
INLINE
void
buf_rabs_write
(
struct
BufAnsCoder
*
const
c
uint8_t
val
AnsP8
prob
)
{
assert
(
c
-
>
offset
<
=
c
-
>
size
)
;
#
if
!
ANS_MAX_SYMBOLS
if
(
c
-
>
offset
=
=
c
-
>
size
)
{
aom_buf_ans_grow
(
c
)
;
}
#
endif
c
-
>
buf
[
c
-
>
offset
]
.
method
=
ANS_METHOD_RABS
;
c
-
>
buf
[
c
-
>
offset
]
.
val_start
=
val
;
c
-
>
buf
[
c
-
>
offset
]
.
prob
=
prob
;
+
+
c
-
>
offset
;
#
if
ANS_MAX_SYMBOLS
if
(
c
-
>
offset
=
=
c
-
>
size
)
aom_buf_ans_flush
(
c
)
;
#
endif
}
static
INLINE
void
buf_rans_write
(
struct
BufAnsCoder
*
const
c
aom_cdf_prob
cum_prob
aom_cdf_prob
prob
)
{
assert
(
c
-
>
offset
<
=
c
-
>
size
)
;
#
if
!
ANS_MAX_SYMBOLS
if
(
c
-
>
offset
=
=
c
-
>
size
)
{
aom_buf_ans_grow
(
c
)
;
}
#
endif
c
-
>
buf
[
c
-
>
offset
]
.
method
=
ANS_METHOD_RANS
;
c
-
>
buf
[
c
-
>
offset
]
.
val_start
=
cum_prob
;
c
-
>
buf
[
c
-
>
offset
]
.
prob
=
prob
;
+
+
c
-
>
offset
;
#
if
ANS_MAX_SYMBOLS
if
(
c
-
>
offset
=
=
c
-
>
size
)
aom_buf_ans_flush
(
c
)
;
#
endif
}
static
INLINE
void
buf_rabs_write_bit
(
struct
BufAnsCoder
*
c
int
bit
)
{
buf_rabs_write
(
c
bit
128
)
;
}
static
INLINE
void
buf_rabs_write_literal
(
struct
BufAnsCoder
*
c
int
literal
int
bits
)
{
int
bit
;
assert
(
bits
<
31
)
;
for
(
bit
=
bits
-
1
;
bit
>
=
0
;
bit
-
-
)
buf_rabs_write_bit
(
c
1
&
(
literal
>
>
bit
)
)
;
}
static
INLINE
int
buf_ans_write_end
(
struct
BufAnsCoder
*
const
c
)
{
assert
(
c
-
>
offset
=
=
0
)
;
return
c
-
>
output_bytes
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
