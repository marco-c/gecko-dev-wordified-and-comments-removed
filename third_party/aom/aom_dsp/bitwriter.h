#
ifndef
AOM_AOM_DSP_BITWRITER_H_
#
define
AOM_AOM_DSP_BITWRITER_H_
#
include
<
assert
.
h
>
#
include
"
config
/
aom_config
.
h
"
#
include
"
aom_dsp
/
daalaboolwriter
.
h
"
#
include
"
aom_dsp
/
prob
.
h
"
#
if
CONFIG_RD_DEBUG
#
include
"
av1
/
common
/
blockd
.
h
"
#
include
"
av1
/
encoder
/
cost
.
h
"
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
struct
daala_writer
aom_writer
;
typedef
struct
TOKEN_STATS
{
int
cost
;
#
if
CONFIG_RD_DEBUG
int
txb_coeff_cost_map
[
TXB_COEFF_COST_MAP_SIZE
]
[
TXB_COEFF_COST_MAP_SIZE
]
;
#
endif
}
TOKEN_STATS
;
static
INLINE
void
init_token_stats
(
TOKEN_STATS
*
token_stats
)
{
#
if
CONFIG_RD_DEBUG
int
r
c
;
for
(
r
=
0
;
r
<
TXB_COEFF_COST_MAP_SIZE
;
+
+
r
)
{
for
(
c
=
0
;
c
<
TXB_COEFF_COST_MAP_SIZE
;
+
+
c
)
{
token_stats
-
>
txb_coeff_cost_map
[
r
]
[
c
]
=
0
;
}
}
#
endif
token_stats
-
>
cost
=
0
;
}
static
INLINE
void
aom_start_encode
(
aom_writer
*
bc
uint8_t
*
buffer
)
{
aom_daala_start_encode
(
bc
buffer
)
;
}
static
INLINE
int
aom_stop_encode
(
aom_writer
*
bc
)
{
return
aom_daala_stop_encode
(
bc
)
;
}
static
INLINE
void
aom_write
(
aom_writer
*
br
int
bit
int
probability
)
{
aom_daala_write
(
br
bit
probability
)
;
}
static
INLINE
void
aom_write_bit
(
aom_writer
*
w
int
bit
)
{
aom_write
(
w
bit
128
)
;
}
static
INLINE
void
aom_write_literal
(
aom_writer
*
w
int
data
int
bits
)
{
int
bit
;
for
(
bit
=
bits
-
1
;
bit
>
=
0
;
bit
-
-
)
aom_write_bit
(
w
1
&
(
data
>
>
bit
)
)
;
}
static
INLINE
void
aom_write_cdf
(
aom_writer
*
w
int
symb
const
aom_cdf_prob
*
cdf
int
nsymbs
)
{
daala_write_symbol
(
w
symb
cdf
nsymbs
)
;
}
static
INLINE
void
aom_write_symbol
(
aom_writer
*
w
int
symb
aom_cdf_prob
*
cdf
int
nsymbs
)
{
aom_write_cdf
(
w
symb
cdf
nsymbs
)
;
if
(
w
-
>
allow_update_cdf
)
update_cdf
(
cdf
symb
nsymbs
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
