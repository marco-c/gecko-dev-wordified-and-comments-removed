#
ifndef
AOM_DSP_DKBOOLWRITER_H_
#
define
AOM_DSP_DKBOOLWRITER_H_
#
include
"
.
/
aom_config
.
h
"
#
if
CONFIG_BITSTREAM_DEBUG
#
include
<
stdio
.
h
>
#
include
"
aom_util
/
debug_util
.
h
"
#
endif
#
include
"
aom_dsp
/
prob
.
h
"
#
include
"
aom_ports
/
mem
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
struct
aom_dk_writer
{
unsigned
int
lowvalue
;
unsigned
int
range
;
int
count
;
unsigned
int
pos
;
uint8_t
*
buffer
;
}
aom_dk_writer
;
void
aom_dk_start_encode
(
aom_dk_writer
*
bc
uint8_t
*
buffer
)
;
void
aom_dk_stop_encode
(
aom_dk_writer
*
bc
)
;
static
INLINE
void
aom_dk_write
(
aom_dk_writer
*
br
int
bit
int
probability
)
{
unsigned
int
split
;
int
count
=
br
-
>
count
;
unsigned
int
range
=
br
-
>
range
;
unsigned
int
lowvalue
=
br
-
>
lowvalue
;
register
int
shift
;
#
if
CONFIG_BITSTREAM_DEBUG
bitstream_queue_push
(
bit
probability
)
;
#
endif
split
=
1
+
(
(
(
range
-
1
)
*
probability
)
>
>
8
)
;
range
=
split
;
if
(
bit
)
{
lowvalue
+
=
split
;
range
=
br
-
>
range
-
split
;
}
shift
=
aom_norm
[
range
]
;
range
<
<
=
shift
;
count
+
=
shift
;
if
(
count
>
=
0
)
{
int
offset
=
shift
-
count
;
if
(
(
lowvalue
<
<
(
offset
-
1
)
)
&
0x80000000
)
{
int
x
=
br
-
>
pos
-
1
;
while
(
x
>
=
0
&
&
br
-
>
buffer
[
x
]
=
=
0xff
)
{
br
-
>
buffer
[
x
]
=
0
;
x
-
-
;
}
br
-
>
buffer
[
x
]
+
=
1
;
}
br
-
>
buffer
[
br
-
>
pos
+
+
]
=
(
lowvalue
>
>
(
24
-
offset
)
)
;
lowvalue
<
<
=
offset
;
shift
=
count
;
lowvalue
&
=
0xffffff
;
count
-
=
8
;
}
lowvalue
<
<
=
shift
;
br
-
>
count
=
count
;
br
-
>
lowvalue
=
lowvalue
;
br
-
>
range
=
range
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
