#
ifndef
AOM_AOM_DSP_NOISE_MODEL_H_
#
define
AOM_AOM_DSP_NOISE_MODEL_H_
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
stdint
.
h
>
#
include
"
aom_dsp
/
grain_params
.
h
"
#
include
"
aom_ports
/
mem
.
h
"
#
include
"
aom_scale
/
yv12config
.
h
"
typedef
struct
{
double
*
A
;
double
*
b
;
double
*
x
;
int
n
;
}
aom_equation_system_t
;
typedef
struct
{
double
(
*
points
)
[
2
]
;
int
num_points
;
}
aom_noise_strength_lut_t
;
int
aom_noise_strength_lut_init
(
aom_noise_strength_lut_t
*
lut
int
num_points
)
;
void
aom_noise_strength_lut_free
(
aom_noise_strength_lut_t
*
lut
)
;
double
aom_noise_strength_lut_eval
(
const
aom_noise_strength_lut_t
*
lut
double
x
)
;
typedef
struct
{
aom_equation_system_t
eqns
;
double
min_intensity
;
double
max_intensity
;
int
num_bins
;
int
num_equations
;
double
total
;
}
aom_noise_strength_solver_t
;
int
aom_noise_strength_solver_init
(
aom_noise_strength_solver_t
*
solver
int
num_bins
int
bit_depth
)
;
void
aom_noise_strength_solver_free
(
aom_noise_strength_solver_t
*
solver
)
;
double
aom_noise_strength_solver_get_center
(
const
aom_noise_strength_solver_t
*
solver
int
i
)
;
void
aom_noise_strength_solver_add_measurement
(
aom_noise_strength_solver_t
*
solver
double
block_mean
double
noise_std
)
;
int
aom_noise_strength_solver_solve
(
aom_noise_strength_solver_t
*
solver
)
;
int
aom_noise_strength_solver_fit_piecewise
(
const
aom_noise_strength_solver_t
*
solver
int
max_num_points
aom_noise_strength_lut_t
*
lut
)
;
typedef
struct
{
double
*
AtA_inv
;
double
*
A
;
int
num_params
;
int
block_size
;
double
normalization
;
int
use_highbd
;
}
aom_flat_block_finder_t
;
int
aom_flat_block_finder_init
(
aom_flat_block_finder_t
*
block_finder
int
block_size
int
bit_depth
int
use_highbd
)
;
void
aom_flat_block_finder_free
(
aom_flat_block_finder_t
*
block_finder
)
;
void
aom_flat_block_finder_extract_block
(
const
aom_flat_block_finder_t
*
block_finder
const
uint8_t
*
const
data
int
w
int
h
int
stride
int
offsx
int
offsy
double
*
plane
double
*
block
)
;
int
aom_flat_block_finder_run
(
const
aom_flat_block_finder_t
*
block_finder
const
uint8_t
*
const
data
int
w
int
h
int
stride
uint8_t
*
flat_blocks
)
;
enum
{
AOM_NOISE_SHAPE_DIAMOND
=
0
AOM_NOISE_SHAPE_SQUARE
=
1
}
UENUM1BYTE
(
aom_noise_shape
)
;
typedef
struct
{
aom_noise_shape
shape
;
int
lag
;
int
bit_depth
;
int
use_highbd
;
}
aom_noise_model_params_t
;
typedef
struct
{
aom_equation_system_t
eqns
;
aom_noise_strength_solver_t
strength_solver
;
int
num_observations
;
double
ar_gain
;
}
aom_noise_state_t
;
typedef
struct
{
aom_noise_model_params_t
params
;
aom_noise_state_t
combined_state
[
3
]
;
aom_noise_state_t
latest_state
[
3
]
;
int
(
*
coords
)
[
2
]
;
int
n
;
int
bit_depth
;
}
aom_noise_model_t
;
enum
{
AOM_NOISE_STATUS_OK
=
0
AOM_NOISE_STATUS_INVALID_ARGUMENT
AOM_NOISE_STATUS_INSUFFICIENT_FLAT_BLOCKS
AOM_NOISE_STATUS_DIFFERENT_NOISE_TYPE
AOM_NOISE_STATUS_INTERNAL_ERROR
}
UENUM1BYTE
(
aom_noise_status_t
)
;
int
aom_noise_model_init
(
aom_noise_model_t
*
model
const
aom_noise_model_params_t
params
)
;
void
aom_noise_model_free
(
aom_noise_model_t
*
model
)
;
aom_noise_status_t
aom_noise_model_update
(
aom_noise_model_t
*
const
noise_model
const
uint8_t
*
const
data
[
3
]
const
uint8_t
*
const
denoised
[
3
]
int
w
int
h
int
strides
[
3
]
int
chroma_sub_log2
[
2
]
const
uint8_t
*
const
flat_blocks
int
block_size
)
;
void
aom_noise_model_save_latest
(
aom_noise_model_t
*
noise_model
)
;
int
aom_noise_model_get_grain_parameters
(
aom_noise_model_t
*
const
noise_model
aom_film_grain_t
*
film_grain
)
;
int
aom_wiener_denoise_2d
(
const
uint8_t
*
const
data
[
3
]
uint8_t
*
denoised
[
3
]
int
w
int
h
int
stride
[
3
]
int
chroma_sub_log2
[
2
]
float
*
noise_psd
[
3
]
int
block_size
int
bit_depth
int
use_highbd
)
;
struct
aom_denoise_and_model_t
;
int
aom_denoise_and_model_run
(
struct
aom_denoise_and_model_t
*
ctx
const
YV12_BUFFER_CONFIG
*
sd
aom_film_grain_t
*
grain
int
apply_denoise
)
;
struct
aom_denoise_and_model_t
*
aom_denoise_and_model_alloc
(
int
bit_depth
int
block_size
float
noise_level
)
;
void
aom_denoise_and_model_free
(
struct
aom_denoise_and_model_t
*
denoise_model
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
