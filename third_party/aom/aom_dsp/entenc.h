#
ifndef
AOM_AOM_DSP_ENTENC_H_
#
define
AOM_AOM_DSP_ENTENC_H_
#
include
<
stddef
.
h
>
#
include
"
aom_dsp
/
entcode
.
h
"
#
include
"
aom_util
/
endian_inl
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
uint64_t
od_ec_enc_window
;
typedef
struct
od_ec_enc
od_ec_enc
;
#
define
OD_MEASURE_EC_OVERHEAD
(
0
)
struct
od_ec_enc
{
unsigned
char
*
buf
;
uint32_t
storage
;
uint32_t
offs
;
od_ec_enc_window
low
;
uint16_t
rng
;
int16_t
cnt
;
int
error
;
#
if
OD_MEASURE_EC_OVERHEAD
double
entropy
;
int
nb_symbols
;
#
endif
}
;
void
od_ec_enc_init
(
od_ec_enc
*
enc
uint32_t
size
)
OD_ARG_NONNULL
(
1
)
;
void
od_ec_enc_reset
(
od_ec_enc
*
enc
)
OD_ARG_NONNULL
(
1
)
;
void
od_ec_enc_clear
(
od_ec_enc
*
enc
)
OD_ARG_NONNULL
(
1
)
;
void
od_ec_encode_bool_q15
(
od_ec_enc
*
enc
int
val
unsigned
f_q15
)
OD_ARG_NONNULL
(
1
)
;
void
od_ec_encode_cdf_q15
(
od_ec_enc
*
enc
int
s
const
uint16_t
*
cdf
int
nsyms
)
OD_ARG_NONNULL
(
1
)
OD_ARG_NONNULL
(
3
)
;
void
od_ec_enc_bits
(
od_ec_enc
*
enc
uint32_t
fl
unsigned
ftb
)
OD_ARG_NONNULL
(
1
)
;
OD_WARN_UNUSED_RESULT
unsigned
char
*
od_ec_enc_done
(
od_ec_enc
*
enc
uint32_t
*
nbytes
)
OD_ARG_NONNULL
(
1
)
OD_ARG_NONNULL
(
2
)
;
OD_WARN_UNUSED_RESULT
int
od_ec_enc_tell
(
const
od_ec_enc
*
enc
)
OD_ARG_NONNULL
(
1
)
;
OD_WARN_UNUSED_RESULT
uint32_t
od_ec_enc_tell_frac
(
const
od_ec_enc
*
enc
)
OD_ARG_NONNULL
(
1
)
;
static
inline
void
propagate_carry_bwd
(
unsigned
char
*
buf
uint32_t
offs
)
{
uint16_t
sum
carry
=
1
;
do
{
sum
=
(
uint16_t
)
buf
[
offs
]
+
1
;
buf
[
offs
-
-
]
=
(
unsigned
char
)
sum
;
carry
=
sum
>
>
8
;
}
while
(
carry
)
;
}
static
inline
void
write_enc_data_to_out_buf
(
unsigned
char
*
out
uint32_t
offs
uint64_t
output
uint64_t
carry
uint32_t
*
enc_offs
uint8_t
num_bytes_ready
)
{
const
uint64_t
reg
=
HToBE64
(
output
<
<
(
(
8
-
num_bytes_ready
)
<
<
3
)
)
;
memcpy
(
&
out
[
offs
]
&
reg
8
)
;
if
(
carry
)
{
assert
(
offs
>
0
)
;
propagate_carry_bwd
(
out
offs
-
1
)
;
}
*
enc_offs
=
offs
+
num_bytes_ready
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
