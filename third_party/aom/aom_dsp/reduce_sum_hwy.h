#
ifndef
AOM_AOM_DSP_REDUCE_SUM_HWY_H_
#
define
AOM_AOM_DSP_REDUCE_SUM_HWY_H_
#
include
<
type_traits
>
#
include
"
third_party
/
highway
/
hwy
/
highway
.
h
"
HWY_BEFORE_NAMESPACE
(
)
;
namespace
{
namespace
HWY_NAMESPACE
{
namespace
hn
=
hwy
:
:
HWY_NAMESPACE
;
template
<
size_t
NumBlocks
>
struct
BlockReduceTraits
;
template
<
>
struct
BlockReduceTraits
<
1
>
{
template
<
typename
D
>
HWY_ATTR
HWY_INLINE
static
hn
:
:
VFromD
<
D
>
ReduceSum
(
D
d
hn
:
:
VFromD
<
D
>
v
)
{
(
void
)
d
;
return
v
;
}
}
;
template
<
size_t
NumBlocks
>
struct
BlockReduceTraits
{
static_assert
(
NumBlocks
>
1
"
Primary
template
BlockReduceTraits
assumes
NumBlocks
>
1
"
)
;
static_assert
(
(
NumBlocks
&
(
NumBlocks
-
1
)
)
=
=
0
"
BlockReduceTraits
requires
NumBlocks
to
be
a
power
of
2
.
"
)
;
template
<
typename
D
>
HWY_ATTR
HWY_INLINE
static
hn
:
:
VFromD
<
hn
:
:
BlockDFromD
<
D
>
>
ReduceSum
(
D
d
hn
:
:
VFromD
<
D
>
v
)
{
(
void
)
d
;
constexpr
hn
:
:
Half
<
D
>
half_d
;
auto
v_half
=
hn
:
:
Add
(
hn
:
:
LowerHalf
(
half_d
v
)
hn
:
:
UpperHalf
(
half_d
v
)
)
;
return
BlockReduceTraits
<
NumBlocks
/
2
>
:
:
ReduceSum
(
half_d
v_half
)
;
}
}
;
template
<
typename
D
>
HWY_ATTR
HWY_INLINE
hn
:
:
Vec
<
hn
:
:
BlockDFromD
<
D
>
>
BlockReduceSum
(
D
int_tag
hn
:
:
VFromD
<
D
>
v
)
{
return
BlockReduceTraits
<
int_tag
.
MaxBlocks
(
)
>
:
:
ReduceSum
(
int_tag
v
)
;
}
}
}
HWY_AFTER_NAMESPACE
(
)
;
#
endif
