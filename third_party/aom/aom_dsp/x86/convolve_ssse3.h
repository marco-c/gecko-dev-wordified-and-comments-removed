#
ifndef
AOM_AOM_DSP_X86_CONVOLVE_SSSE3_H_
#
define
AOM_AOM_DSP_X86_CONVOLVE_SSSE3_H_
#
include
<
tmmintrin
.
h
>
static
INLINE
void
shuffle_filter_ssse3
(
const
int16_t
*
const
filter
__m128i
*
const
f
)
{
const
__m128i
f_values
=
_mm_load_si128
(
(
const
__m128i
*
)
filter
)
;
f
[
0
]
=
_mm_shuffle_epi8
(
f_values
_mm_set1_epi16
(
0x0200u
)
)
;
f
[
1
]
=
_mm_shuffle_epi8
(
f_values
_mm_set1_epi16
(
0x0604u
)
)
;
f
[
2
]
=
_mm_shuffle_epi8
(
f_values
_mm_set1_epi16
(
0x0a08u
)
)
;
f
[
3
]
=
_mm_shuffle_epi8
(
f_values
_mm_set1_epi16
(
0x0e0cu
)
)
;
}
static
INLINE
__m128i
convolve8_8_ssse3
(
const
__m128i
*
const
s
const
__m128i
*
const
f
)
{
const
__m128i
k_64
=
_mm_set1_epi16
(
1
<
<
6
)
;
const
__m128i
x0
=
_mm_maddubs_epi16
(
s
[
0
]
f
[
0
]
)
;
const
__m128i
x1
=
_mm_maddubs_epi16
(
s
[
1
]
f
[
1
]
)
;
const
__m128i
x2
=
_mm_maddubs_epi16
(
s
[
2
]
f
[
2
]
)
;
const
__m128i
x3
=
_mm_maddubs_epi16
(
s
[
3
]
f
[
3
]
)
;
__m128i
sum1
sum2
;
sum1
=
_mm_add_epi16
(
x0
x2
)
;
sum2
=
_mm_add_epi16
(
x1
x3
)
;
sum1
=
_mm_add_epi16
(
sum1
k_64
)
;
sum1
=
_mm_adds_epi16
(
sum1
sum2
)
;
sum1
=
_mm_srai_epi16
(
sum1
7
)
;
return
sum1
;
}
#
endif
