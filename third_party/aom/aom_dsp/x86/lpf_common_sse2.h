#
ifndef
_AOM_DSP_X86_LPF_COMMON_X86_H
#
define
_AOM_DSP_X86_LPF_COMMON_X86_H
#
include
<
emmintrin
.
h
>
#
include
"
.
/
aom_config
.
h
"
static
INLINE
void
highbd_transpose
(
uint16_t
*
src
[
]
int
in_p
uint16_t
*
dst
[
]
int
out_p
int
num_8x8_to_transpose
)
{
int
idx8x8
=
0
;
__m128i
p0
p1
p2
p3
p4
p5
p6
p7
x0
x1
x2
x3
x4
x5
x6
x7
;
do
{
uint16_t
*
in
=
src
[
idx8x8
]
;
uint16_t
*
out
=
dst
[
idx8x8
]
;
p0
=
_mm_loadu_si128
(
(
__m128i
*
)
(
in
+
0
*
in_p
)
)
;
p1
=
_mm_loadu_si128
(
(
__m128i
*
)
(
in
+
1
*
in_p
)
)
;
p2
=
_mm_loadu_si128
(
(
__m128i
*
)
(
in
+
2
*
in_p
)
)
;
p3
=
_mm_loadu_si128
(
(
__m128i
*
)
(
in
+
3
*
in_p
)
)
;
p4
=
_mm_loadu_si128
(
(
__m128i
*
)
(
in
+
4
*
in_p
)
)
;
p5
=
_mm_loadu_si128
(
(
__m128i
*
)
(
in
+
5
*
in_p
)
)
;
p6
=
_mm_loadu_si128
(
(
__m128i
*
)
(
in
+
6
*
in_p
)
)
;
p7
=
_mm_loadu_si128
(
(
__m128i
*
)
(
in
+
7
*
in_p
)
)
;
x0
=
_mm_unpacklo_epi16
(
p0
p1
)
;
x1
=
_mm_unpacklo_epi16
(
p2
p3
)
;
x2
=
_mm_unpacklo_epi16
(
p4
p5
)
;
x3
=
_mm_unpacklo_epi16
(
p6
p7
)
;
x4
=
_mm_unpacklo_epi32
(
x0
x1
)
;
x5
=
_mm_unpacklo_epi32
(
x2
x3
)
;
x6
=
_mm_unpacklo_epi64
(
x4
x5
)
;
x7
=
_mm_unpackhi_epi64
(
x4
x5
)
;
_mm_storeu_si128
(
(
__m128i
*
)
(
out
+
0
*
out_p
)
x6
)
;
_mm_storeu_si128
(
(
__m128i
*
)
(
out
+
1
*
out_p
)
x7
)
;
x4
=
_mm_unpackhi_epi32
(
x0
x1
)
;
x5
=
_mm_unpackhi_epi32
(
x2
x3
)
;
x6
=
_mm_unpacklo_epi64
(
x4
x5
)
;
x7
=
_mm_unpackhi_epi64
(
x4
x5
)
;
_mm_storeu_si128
(
(
__m128i
*
)
(
out
+
2
*
out_p
)
x6
)
;
_mm_storeu_si128
(
(
__m128i
*
)
(
out
+
3
*
out_p
)
x7
)
;
x0
=
_mm_unpackhi_epi16
(
p0
p1
)
;
x1
=
_mm_unpackhi_epi16
(
p2
p3
)
;
x2
=
_mm_unpackhi_epi16
(
p4
p5
)
;
x3
=
_mm_unpackhi_epi16
(
p6
p7
)
;
x4
=
_mm_unpacklo_epi32
(
x0
x1
)
;
x5
=
_mm_unpacklo_epi32
(
x2
x3
)
;
x6
=
_mm_unpacklo_epi64
(
x4
x5
)
;
x7
=
_mm_unpackhi_epi64
(
x4
x5
)
;
_mm_storeu_si128
(
(
__m128i
*
)
(
out
+
4
*
out_p
)
x6
)
;
_mm_storeu_si128
(
(
__m128i
*
)
(
out
+
5
*
out_p
)
x7
)
;
x4
=
_mm_unpackhi_epi32
(
x0
x1
)
;
x5
=
_mm_unpackhi_epi32
(
x2
x3
)
;
x6
=
_mm_unpacklo_epi64
(
x4
x5
)
;
x7
=
_mm_unpackhi_epi64
(
x4
x5
)
;
_mm_storeu_si128
(
(
__m128i
*
)
(
out
+
6
*
out_p
)
x6
)
;
_mm_storeu_si128
(
(
__m128i
*
)
(
out
+
7
*
out_p
)
x7
)
;
}
while
(
+
+
idx8x8
<
num_8x8_to_transpose
)
;
}
static
INLINE
void
highbd_transpose8x16
(
uint16_t
*
in0
uint16_t
*
in1
int
in_p
uint16_t
*
out
int
out_p
)
{
uint16_t
*
src0
[
1
]
;
uint16_t
*
src1
[
1
]
;
uint16_t
*
dest0
[
1
]
;
uint16_t
*
dest1
[
1
]
;
src0
[
0
]
=
in0
;
src1
[
0
]
=
in1
;
dest0
[
0
]
=
out
;
dest1
[
0
]
=
out
+
8
;
highbd_transpose
(
src0
in_p
dest0
out_p
1
)
;
highbd_transpose
(
src1
in_p
dest1
out_p
1
)
;
}
#
endif
