#
ifndef
AOM_AOM_DSP_X86_SYNONYMS_AVX2_H_
#
define
AOM_AOM_DSP_X86_SYNONYMS_AVX2_H_
#
include
<
immintrin
.
h
>
#
include
"
config
/
aom_config
.
h
"
#
include
"
aom
/
aom_integer
.
h
"
static
INLINE
__m256i
yy_load_256
(
const
void
*
a
)
{
return
_mm256_load_si256
(
(
const
__m256i
*
)
a
)
;
}
static
INLINE
__m256i
yy_loadu_256
(
const
void
*
a
)
{
return
_mm256_loadu_si256
(
(
const
__m256i
*
)
a
)
;
}
static
INLINE
void
yy_store_256
(
void
*
const
a
const
__m256i
v
)
{
_mm256_store_si256
(
(
__m256i
*
)
a
v
)
;
}
static
INLINE
void
yy_storeu_256
(
void
*
const
a
const
__m256i
v
)
{
_mm256_storeu_si256
(
(
__m256i
*
)
a
v
)
;
}
static
INLINE
__m256i
yy_set2_epi16
(
int16_t
a
int16_t
b
)
{
return
_mm256_setr_epi16
(
a
b
a
b
a
b
a
b
a
b
a
b
a
b
a
b
)
;
}
static
INLINE
__m256i
yy_set_m128i
(
__m128i
hi
__m128i
lo
)
{
return
_mm256_insertf128_si256
(
_mm256_castsi128_si256
(
lo
)
hi
1
)
;
}
static
INLINE
__m256i
yy_loadu2_128
(
const
void
*
hi
const
void
*
lo
)
{
__m128i
mhi
=
_mm_loadu_si128
(
(
const
__m128i
*
)
(
hi
)
)
;
__m128i
mlo
=
_mm_loadu_si128
(
(
const
__m128i
*
)
(
lo
)
)
;
return
yy_set_m128i
(
mhi
mlo
)
;
}
static
INLINE
void
yy_storeu2_128
(
void
*
hi
void
*
lo
const
__m256i
a
)
{
_mm_storeu_si128
(
(
__m128i
*
)
hi
_mm256_extracti128_si256
(
a
1
)
)
;
_mm_storeu_si128
(
(
__m128i
*
)
lo
_mm256_castsi256_si128
(
a
)
)
;
}
static
INLINE
__m256i
yy_roundn_epu16
(
__m256i
v_val_w
int
bits
)
{
const
__m256i
v_s_w
=
_mm256_srli_epi16
(
v_val_w
bits
-
1
)
;
return
_mm256_avg_epu16
(
v_s_w
_mm256_setzero_si256
(
)
)
;
}
#
endif
