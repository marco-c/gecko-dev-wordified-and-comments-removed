#
ifndef
AOM_DSP_X86_COMMON_AVX2_H
#
define
AOM_DSP_X86_COMMON_AVX2_H
#
include
<
immintrin
.
h
>
#
include
"
.
/
aom_config
.
h
"
static
INLINE
void
mm256_transpose_16x16
(
const
__m256i
*
in
__m256i
*
out
)
{
__m256i
tr0_0
=
_mm256_unpacklo_epi16
(
in
[
0
]
in
[
1
]
)
;
__m256i
tr0_1
=
_mm256_unpackhi_epi16
(
in
[
0
]
in
[
1
]
)
;
__m256i
tr0_2
=
_mm256_unpacklo_epi16
(
in
[
2
]
in
[
3
]
)
;
__m256i
tr0_3
=
_mm256_unpackhi_epi16
(
in
[
2
]
in
[
3
]
)
;
__m256i
tr0_4
=
_mm256_unpacklo_epi16
(
in
[
4
]
in
[
5
]
)
;
__m256i
tr0_5
=
_mm256_unpackhi_epi16
(
in
[
4
]
in
[
5
]
)
;
__m256i
tr0_6
=
_mm256_unpacklo_epi16
(
in
[
6
]
in
[
7
]
)
;
__m256i
tr0_7
=
_mm256_unpackhi_epi16
(
in
[
6
]
in
[
7
]
)
;
__m256i
tr0_8
=
_mm256_unpacklo_epi16
(
in
[
8
]
in
[
9
]
)
;
__m256i
tr0_9
=
_mm256_unpackhi_epi16
(
in
[
8
]
in
[
9
]
)
;
__m256i
tr0_a
=
_mm256_unpacklo_epi16
(
in
[
10
]
in
[
11
]
)
;
__m256i
tr0_b
=
_mm256_unpackhi_epi16
(
in
[
10
]
in
[
11
]
)
;
__m256i
tr0_c
=
_mm256_unpacklo_epi16
(
in
[
12
]
in
[
13
]
)
;
__m256i
tr0_d
=
_mm256_unpackhi_epi16
(
in
[
12
]
in
[
13
]
)
;
__m256i
tr0_e
=
_mm256_unpacklo_epi16
(
in
[
14
]
in
[
15
]
)
;
__m256i
tr0_f
=
_mm256_unpackhi_epi16
(
in
[
14
]
in
[
15
]
)
;
__m256i
tr1_0
=
_mm256_unpacklo_epi32
(
tr0_0
tr0_2
)
;
__m256i
tr1_1
=
_mm256_unpackhi_epi32
(
tr0_0
tr0_2
)
;
__m256i
tr1_2
=
_mm256_unpacklo_epi32
(
tr0_1
tr0_3
)
;
__m256i
tr1_3
=
_mm256_unpackhi_epi32
(
tr0_1
tr0_3
)
;
__m256i
tr1_4
=
_mm256_unpacklo_epi32
(
tr0_4
tr0_6
)
;
__m256i
tr1_5
=
_mm256_unpackhi_epi32
(
tr0_4
tr0_6
)
;
__m256i
tr1_6
=
_mm256_unpacklo_epi32
(
tr0_5
tr0_7
)
;
__m256i
tr1_7
=
_mm256_unpackhi_epi32
(
tr0_5
tr0_7
)
;
__m256i
tr1_8
=
_mm256_unpacklo_epi32
(
tr0_8
tr0_a
)
;
__m256i
tr1_9
=
_mm256_unpackhi_epi32
(
tr0_8
tr0_a
)
;
__m256i
tr1_a
=
_mm256_unpacklo_epi32
(
tr0_9
tr0_b
)
;
__m256i
tr1_b
=
_mm256_unpackhi_epi32
(
tr0_9
tr0_b
)
;
__m256i
tr1_c
=
_mm256_unpacklo_epi32
(
tr0_c
tr0_e
)
;
__m256i
tr1_d
=
_mm256_unpackhi_epi32
(
tr0_c
tr0_e
)
;
__m256i
tr1_e
=
_mm256_unpacklo_epi32
(
tr0_d
tr0_f
)
;
__m256i
tr1_f
=
_mm256_unpackhi_epi32
(
tr0_d
tr0_f
)
;
tr0_0
=
_mm256_unpacklo_epi64
(
tr1_0
tr1_4
)
;
tr0_1
=
_mm256_unpackhi_epi64
(
tr1_0
tr1_4
)
;
tr0_2
=
_mm256_unpacklo_epi64
(
tr1_1
tr1_5
)
;
tr0_3
=
_mm256_unpackhi_epi64
(
tr1_1
tr1_5
)
;
tr0_4
=
_mm256_unpacklo_epi64
(
tr1_2
tr1_6
)
;
tr0_5
=
_mm256_unpackhi_epi64
(
tr1_2
tr1_6
)
;
tr0_6
=
_mm256_unpacklo_epi64
(
tr1_3
tr1_7
)
;
tr0_7
=
_mm256_unpackhi_epi64
(
tr1_3
tr1_7
)
;
tr0_8
=
_mm256_unpacklo_epi64
(
tr1_8
tr1_c
)
;
tr0_9
=
_mm256_unpackhi_epi64
(
tr1_8
tr1_c
)
;
tr0_a
=
_mm256_unpacklo_epi64
(
tr1_9
tr1_d
)
;
tr0_b
=
_mm256_unpackhi_epi64
(
tr1_9
tr1_d
)
;
tr0_c
=
_mm256_unpacklo_epi64
(
tr1_a
tr1_e
)
;
tr0_d
=
_mm256_unpackhi_epi64
(
tr1_a
tr1_e
)
;
tr0_e
=
_mm256_unpacklo_epi64
(
tr1_b
tr1_f
)
;
tr0_f
=
_mm256_unpackhi_epi64
(
tr1_b
tr1_f
)
;
out
[
0
]
=
_mm256_permute2x128_si256
(
tr0_0
tr0_8
0x20
)
;
out
[
8
]
=
_mm256_permute2x128_si256
(
tr0_0
tr0_8
0x31
)
;
out
[
1
]
=
_mm256_permute2x128_si256
(
tr0_1
tr0_9
0x20
)
;
out
[
9
]
=
_mm256_permute2x128_si256
(
tr0_1
tr0_9
0x31
)
;
out
[
2
]
=
_mm256_permute2x128_si256
(
tr0_2
tr0_a
0x20
)
;
out
[
10
]
=
_mm256_permute2x128_si256
(
tr0_2
tr0_a
0x31
)
;
out
[
3
]
=
_mm256_permute2x128_si256
(
tr0_3
tr0_b
0x20
)
;
out
[
11
]
=
_mm256_permute2x128_si256
(
tr0_3
tr0_b
0x31
)
;
out
[
4
]
=
_mm256_permute2x128_si256
(
tr0_4
tr0_c
0x20
)
;
out
[
12
]
=
_mm256_permute2x128_si256
(
tr0_4
tr0_c
0x31
)
;
out
[
5
]
=
_mm256_permute2x128_si256
(
tr0_5
tr0_d
0x20
)
;
out
[
13
]
=
_mm256_permute2x128_si256
(
tr0_5
tr0_d
0x31
)
;
out
[
6
]
=
_mm256_permute2x128_si256
(
tr0_6
tr0_e
0x20
)
;
out
[
14
]
=
_mm256_permute2x128_si256
(
tr0_6
tr0_e
0x31
)
;
out
[
7
]
=
_mm256_permute2x128_si256
(
tr0_7
tr0_f
0x20
)
;
out
[
15
]
=
_mm256_permute2x128_si256
(
tr0_7
tr0_f
0x31
)
;
}
#
endif
