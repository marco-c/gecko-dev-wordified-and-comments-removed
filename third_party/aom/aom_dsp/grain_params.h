#
ifndef
AOM_AOM_DSP_GRAIN_PARAMS_H_
#
define
AOM_AOM_DSP_GRAIN_PARAMS_H_
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
stdint
.
h
>
#
include
<
string
.
h
>
#
include
"
config
/
aom_config
.
h
"
typedef
struct
{
int
apply_grain
;
int
update_parameters
;
int
scaling_points_y
[
14
]
[
2
]
;
int
num_y_points
;
int
scaling_points_cb
[
10
]
[
2
]
;
int
num_cb_points
;
int
scaling_points_cr
[
10
]
[
2
]
;
int
num_cr_points
;
int
scaling_shift
;
int
ar_coeff_lag
;
int
ar_coeffs_y
[
24
]
;
int
ar_coeffs_cb
[
25
]
;
int
ar_coeffs_cr
[
25
]
;
int
ar_coeff_shift
;
int
cb_mult
;
int
cb_luma_mult
;
int
cb_offset
;
int
cr_mult
;
int
cr_luma_mult
;
int
cr_offset
;
int
overlap_flag
;
int
clip_to_restricted_range
;
unsigned
int
bit_depth
;
int
chroma_scaling_from_luma
;
int
grain_scale_shift
;
uint16_t
random_seed
;
}
aom_film_grain_t
;
static
inline
int
aom_check_grain_params_equiv
(
const
aom_film_grain_t
*
const
pa
const
aom_film_grain_t
*
const
pb
)
{
if
(
pa
-
>
apply_grain
!
=
pb
-
>
apply_grain
)
return
0
;
if
(
pa
-
>
num_y_points
!
=
pb
-
>
num_y_points
)
return
0
;
if
(
memcmp
(
pa
-
>
scaling_points_y
pb
-
>
scaling_points_y
pa
-
>
num_y_points
*
2
*
sizeof
(
*
pa
-
>
scaling_points_y
)
)
!
=
0
)
return
0
;
if
(
pa
-
>
num_cb_points
!
=
pb
-
>
num_cb_points
)
return
0
;
if
(
memcmp
(
pa
-
>
scaling_points_cb
pb
-
>
scaling_points_cb
pa
-
>
num_cb_points
*
2
*
sizeof
(
*
pa
-
>
scaling_points_cb
)
)
!
=
0
)
return
0
;
if
(
pa
-
>
num_cr_points
!
=
pb
-
>
num_cr_points
)
return
0
;
if
(
memcmp
(
pa
-
>
scaling_points_cr
pb
-
>
scaling_points_cr
pa
-
>
num_cr_points
*
2
*
sizeof
(
*
pa
-
>
scaling_points_cr
)
)
!
=
0
)
return
0
;
if
(
pa
-
>
scaling_shift
!
=
pb
-
>
scaling_shift
)
return
0
;
if
(
pa
-
>
ar_coeff_lag
!
=
pb
-
>
ar_coeff_lag
)
return
0
;
const
int
num_pos
=
2
*
pa
-
>
ar_coeff_lag
*
(
pa
-
>
ar_coeff_lag
+
1
)
;
if
(
memcmp
(
pa
-
>
ar_coeffs_y
pb
-
>
ar_coeffs_y
num_pos
*
sizeof
(
*
pa
-
>
ar_coeffs_y
)
)
!
=
0
)
return
0
;
if
(
memcmp
(
pa
-
>
ar_coeffs_cb
pb
-
>
ar_coeffs_cb
num_pos
*
sizeof
(
*
pa
-
>
ar_coeffs_cb
)
)
!
=
0
)
return
0
;
if
(
memcmp
(
pa
-
>
ar_coeffs_cr
pb
-
>
ar_coeffs_cr
num_pos
*
sizeof
(
*
pa
-
>
ar_coeffs_cr
)
)
!
=
0
)
return
0
;
if
(
pa
-
>
ar_coeff_shift
!
=
pb
-
>
ar_coeff_shift
)
return
0
;
if
(
pa
-
>
cb_mult
!
=
pb
-
>
cb_mult
)
return
0
;
if
(
pa
-
>
cb_luma_mult
!
=
pb
-
>
cb_luma_mult
)
return
0
;
if
(
pa
-
>
cb_offset
!
=
pb
-
>
cb_offset
)
return
0
;
if
(
pa
-
>
cr_mult
!
=
pb
-
>
cr_mult
)
return
0
;
if
(
pa
-
>
cr_luma_mult
!
=
pb
-
>
cr_luma_mult
)
return
0
;
if
(
pa
-
>
cr_offset
!
=
pb
-
>
cr_offset
)
return
0
;
if
(
pa
-
>
overlap_flag
!
=
pb
-
>
overlap_flag
)
return
0
;
if
(
pa
-
>
clip_to_restricted_range
!
=
pb
-
>
clip_to_restricted_range
)
return
0
;
if
(
pa
-
>
bit_depth
!
=
pb
-
>
bit_depth
)
return
0
;
if
(
pa
-
>
chroma_scaling_from_luma
!
=
pb
-
>
chroma_scaling_from_luma
)
return
0
;
if
(
pa
-
>
grain_scale_shift
!
=
pb
-
>
grain_scale_shift
)
return
0
;
return
1
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
