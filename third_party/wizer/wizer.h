#
ifndef
_WIZER_H_
#
define
_WIZER_H_
#
ifdef
__cplusplus
#
define
__WIZER_EXTERN_C
extern
"
C
"
#
else
#
define
__WIZER_EXTERN_C
extern
#
endif
#
ifdef
__clang_major__
#
if
__clang_major__
>
=
15
|
|
(
__clang_major__
=
=
14
&
&
__clang_patchlevel__
=
=
4
)
#
define
WIZER_MAIN_VOID
__main_void
#
else
#
define
WIZER_MAIN_VOID
__original_main
#
endif
#
endif
#
ifndef
WIZER_MAIN_VOID
#
define
WIZER_MAIN_VOID
__main_void
#
endif
#
define
WIZER_INIT
(
init_func
)
\
__WIZER_EXTERN_C
void
__wasm_call_ctors
(
)
;
\
__WIZER_EXTERN_C
void
__wasm_call_dtors
(
)
;
\
__WIZER_EXTERN_C
int
WIZER_MAIN_VOID
(
)
;
\
/
*
This
function
'
s
export
name
wizer
.
initialize
is
specially
*
/
\
/
*
recognized
by
Wizer
.
It
is
the
direct
entry
point
for
pre
-
init
.
*
/
\
__attribute__
(
(
export_name
(
"
wizer
.
initialize
"
)
)
)
void
\
__wizer_initialize
(
)
{
\
/
*
__wasm_call_ctors
(
)
is
generated
by
wasm
-
ld
and
invokes
all
*
/
\
/
*
of
the
global
constructors
.
It
is
safe
(
and
in
fact
necessary
)
*
/
\
/
*
to
manually
invoke
it
here
because
wizer
.
initialize
is
the
*
/
\
/
*
direct
entry
point
and
no
libc
startup
(
crt1
.
o
or
equivalent
)
*
/
\
/
*
is
executed
before
this
code
does
.
*
/
\
__wasm_call_ctors
(
)
;
\
/
*
We
now
invoke
the
provided
init
function
before
returning
.
*
/
\
init_func
(
)
;
\
}
\
/
*
This
function
replaces
_start
(
the
WASI
-
specified
entry
point
)
in
*
/
\
/
*
the
pre
-
initialized
Wasm
module
.
*
/
\
__attribute__
(
(
export_name
(
"
wizer
.
resume
"
)
)
)
void
__wizer_resume
(
)
{
\
/
*
__main_void
(
)
is
defined
by
the
WASI
SDK
toolchain
due
to
*
/
\
/
*
special
semantics
in
C
/
C
+
+
for
the
main
(
)
function
i
.
e
.
ito
*
/
\
/
*
can
either
take
argc
/
argv
or
not
.
It
collects
arguments
using
*
/
\
/
*
the
appropriate
WASI
calls
and
then
invokes
the
user
program
'
s
*
/
\
/
*
main
(
)
.
This
may
change
in
the
future
;
when
it
does
we
will
*
/
\
/
*
coordinate
with
the
WASI
-
SDK
toolchain
to
implement
this
entry
*
/
\
/
*
point
in
an
alternate
way
.
*
/
\
WIZER_MAIN_VOID
(
)
;
\
/
*
Because
we
are
replacing
_start
(
)
we
need
to
manually
invoke
*
/
\
/
*
destructors
as
well
.
*
/
\
__wasm_call_dtors
(
)
;
\
}
#
define
WIZER_DEFAULT_INIT
(
)
\
static
void
__empty_init
(
)
{
}
\
WIZER_INIT
(
__empty_init
)
#
endif
