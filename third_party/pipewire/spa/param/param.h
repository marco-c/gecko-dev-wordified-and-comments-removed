#
ifndef
SPA_PARAM_H
#
define
SPA_PARAM_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
spa
/
utils
/
defs
.
h
>
enum
spa_param_type
{
SPA_PARAM_Invalid
SPA_PARAM_PropInfo
SPA_PARAM_Props
SPA_PARAM_EnumFormat
SPA_PARAM_Format
SPA_PARAM_Buffers
SPA_PARAM_Meta
SPA_PARAM_IO
SPA_PARAM_EnumProfile
SPA_PARAM_Profile
SPA_PARAM_EnumPortConfig
SPA_PARAM_PortConfig
SPA_PARAM_EnumRoute
SPA_PARAM_Route
SPA_PARAM_Control
SPA_PARAM_Latency
SPA_PARAM_ProcessLatency
}
;
struct
spa_param_info
{
uint32_t
id
;
#
define
SPA_PARAM_INFO_SERIAL
(
1
<
<
0
)
/
*
*
<
bit
to
signal
update
even
when
the
*
read
/
write
flags
don
'
t
change
*
/
#
define
SPA_PARAM_INFO_READ
(
1
<
<
1
)
#
define
SPA_PARAM_INFO_WRITE
(
1
<
<
2
)
#
define
SPA_PARAM_INFO_READWRITE
(
SPA_PARAM_INFO_WRITE
|
SPA_PARAM_INFO_READ
)
uint32_t
flags
;
uint32_t
user
;
uint32_t
padding
[
5
]
;
}
;
#
define
SPA_PARAM_INFO
(
id
flags
)
(
struct
spa_param_info
)
{
(
id
)
(
flags
)
}
enum
spa_param_buffers
{
SPA_PARAM_BUFFERS_START
SPA_PARAM_BUFFERS_buffers
SPA_PARAM_BUFFERS_blocks
SPA_PARAM_BUFFERS_size
SPA_PARAM_BUFFERS_stride
SPA_PARAM_BUFFERS_align
SPA_PARAM_BUFFERS_dataType
}
;
enum
spa_param_meta
{
SPA_PARAM_META_START
SPA_PARAM_META_type
SPA_PARAM_META_size
}
;
enum
spa_param_io
{
SPA_PARAM_IO_START
SPA_PARAM_IO_id
SPA_PARAM_IO_size
}
;
enum
spa_param_availability
{
SPA_PARAM_AVAILABILITY_unknown
SPA_PARAM_AVAILABILITY_no
SPA_PARAM_AVAILABILITY_yes
}
;
enum
spa_param_profile
{
SPA_PARAM_PROFILE_START
SPA_PARAM_PROFILE_index
SPA_PARAM_PROFILE_name
SPA_PARAM_PROFILE_description
SPA_PARAM_PROFILE_priority
SPA_PARAM_PROFILE_available
SPA_PARAM_PROFILE_info
SPA_PARAM_PROFILE_classes
SPA_PARAM_PROFILE_save
}
;
enum
spa_param_port_config_mode
{
SPA_PARAM_PORT_CONFIG_MODE_none
SPA_PARAM_PORT_CONFIG_MODE_passthrough
SPA_PARAM_PORT_CONFIG_MODE_convert
SPA_PARAM_PORT_CONFIG_MODE_dsp
}
;
enum
spa_param_port_config
{
SPA_PARAM_PORT_CONFIG_START
SPA_PARAM_PORT_CONFIG_direction
SPA_PARAM_PORT_CONFIG_mode
SPA_PARAM_PORT_CONFIG_monitor
SPA_PARAM_PORT_CONFIG_control
SPA_PARAM_PORT_CONFIG_format
}
;
enum
spa_param_route
{
SPA_PARAM_ROUTE_START
SPA_PARAM_ROUTE_index
SPA_PARAM_ROUTE_direction
SPA_PARAM_ROUTE_device
SPA_PARAM_ROUTE_name
SPA_PARAM_ROUTE_description
SPA_PARAM_ROUTE_priority
SPA_PARAM_ROUTE_available
SPA_PARAM_ROUTE_info
SPA_PARAM_ROUTE_profiles
SPA_PARAM_ROUTE_props
SPA_PARAM_ROUTE_devices
SPA_PARAM_ROUTE_profile
SPA_PARAM_ROUTE_save
}
;
enum
spa_param_latency
{
SPA_PARAM_LATENCY_START
SPA_PARAM_LATENCY_direction
SPA_PARAM_LATENCY_minQuantum
SPA_PARAM_LATENCY_maxQuantum
SPA_PARAM_LATENCY_minRate
SPA_PARAM_LATENCY_maxRate
SPA_PARAM_LATENCY_minNs
SPA_PARAM_LATENCY_maxNs
}
;
enum
spa_param_process_latency
{
SPA_PARAM_PROCESS_LATENCY_START
SPA_PARAM_PROCESS_LATENCY_quantum
SPA_PARAM_PROCESS_LATENCY_rate
SPA_PARAM_PROCESS_LATENCY_ns
}
;
enum
spa_param_bitorder
{
SPA_PARAM_BITORDER_unknown
SPA_PARAM_BITORDER_msb
SPA_PARAM_BITORDER_lsb
}
;
#
ifdef
__cplusplus
}
#
endif
#
endif
