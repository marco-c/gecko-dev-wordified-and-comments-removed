#
ifndef
SPA_RINGBUFFER_H
#
define
SPA_RINGBUFFER_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
spa_ringbuffer
;
#
include
<
string
.
h
>
#
include
<
spa
/
utils
/
defs
.
h
>
#
ifndef
SPA_API_RINGBUFFER
#
ifdef
SPA_API_IMPL
#
define
SPA_API_RINGBUFFER
SPA_API_IMPL
#
else
#
define
SPA_API_RINGBUFFER
static
inline
#
endif
#
endif
struct
spa_ringbuffer
{
uint32_t
readindex
;
uint32_t
writeindex
;
}
;
#
define
SPA_RINGBUFFER_INIT
(
)
(
(
struct
spa_ringbuffer
)
{
0
0
}
)
SPA_API_RINGBUFFER
void
spa_ringbuffer_init
(
struct
spa_ringbuffer
*
rbuf
)
{
*
rbuf
=
SPA_RINGBUFFER_INIT
(
)
;
}
SPA_API_RINGBUFFER
void
spa_ringbuffer_set_avail
(
struct
spa_ringbuffer
*
rbuf
uint32_t
size
)
{
rbuf
-
>
readindex
=
0
;
rbuf
-
>
writeindex
=
size
;
}
SPA_API_RINGBUFFER
int32_t
spa_ringbuffer_get_read_index
(
struct
spa_ringbuffer
*
rbuf
uint32_t
*
index
)
{
*
index
=
__atomic_load_n
(
&
rbuf
-
>
readindex
__ATOMIC_RELAXED
)
;
return
(
int32_t
)
(
__atomic_load_n
(
&
rbuf
-
>
writeindex
__ATOMIC_ACQUIRE
)
-
*
index
)
;
}
SPA_API_RINGBUFFER
void
spa_ringbuffer_read_data
(
struct
spa_ringbuffer
*
rbuf
SPA_UNUSED
const
void
*
buffer
uint32_t
size
uint32_t
offset
void
*
data
uint32_t
len
)
{
uint32_t
l0
=
SPA_MIN
(
len
size
-
offset
)
l1
=
len
-
l0
;
spa_memcpy
(
data
SPA_PTROFF
(
buffer
offset
void
)
l0
)
;
if
(
SPA_UNLIKELY
(
l1
>
0
)
)
spa_memcpy
(
SPA_PTROFF
(
data
l0
void
)
buffer
l1
)
;
}
SPA_API_RINGBUFFER
void
spa_ringbuffer_read_update
(
struct
spa_ringbuffer
*
rbuf
int32_t
index
)
{
__atomic_store_n
(
&
rbuf
-
>
readindex
index
__ATOMIC_RELEASE
)
;
}
SPA_API_RINGBUFFER
int32_t
spa_ringbuffer_get_write_index
(
struct
spa_ringbuffer
*
rbuf
uint32_t
*
index
)
{
*
index
=
__atomic_load_n
(
&
rbuf
-
>
writeindex
__ATOMIC_RELAXED
)
;
return
(
int32_t
)
(
*
index
-
__atomic_load_n
(
&
rbuf
-
>
readindex
__ATOMIC_ACQUIRE
)
)
;
}
SPA_API_RINGBUFFER
void
spa_ringbuffer_write_data
(
struct
spa_ringbuffer
*
rbuf
SPA_UNUSED
void
*
buffer
uint32_t
size
uint32_t
offset
const
void
*
data
uint32_t
len
)
{
uint32_t
l0
=
SPA_MIN
(
len
size
-
offset
)
l1
=
len
-
l0
;
spa_memcpy
(
SPA_PTROFF
(
buffer
offset
void
)
data
l0
)
;
if
(
SPA_UNLIKELY
(
l1
>
0
)
)
spa_memcpy
(
buffer
SPA_PTROFF
(
data
l0
void
)
l1
)
;
}
SPA_API_RINGBUFFER
void
spa_ringbuffer_write_update
(
struct
spa_ringbuffer
*
rbuf
int32_t
index
)
{
__atomic_store_n
(
&
rbuf
-
>
writeindex
index
__ATOMIC_RELEASE
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
