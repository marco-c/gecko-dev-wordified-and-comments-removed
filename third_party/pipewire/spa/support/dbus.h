#
ifndef
SPA_DBUS_H
#
define
SPA_DBUS_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
spa
/
support
/
loop
.
h
>
#
define
SPA_TYPE_INTERFACE_DBus
SPA_TYPE_INFO_INTERFACE_BASE
"
DBus
"
#
define
SPA_VERSION_DBUS
0
struct
spa_dbus
{
struct
spa_interface
iface
;
}
;
enum
spa_dbus_type
{
SPA_DBUS_TYPE_SESSION
SPA_DBUS_TYPE_SYSTEM
SPA_DBUS_TYPE_STARTER
}
;
struct
spa_dbus_connection
{
#
define
SPA_VERSION_DBUS_CONNECTION
0
uint32_t
version
;
void
*
(
*
get
)
(
struct
spa_dbus_connection
*
conn
)
;
void
(
*
destroy
)
(
struct
spa_dbus_connection
*
conn
)
;
}
;
#
define
spa_dbus_connection_get
(
c
)
(
c
)
-
>
get
(
(
c
)
)
#
define
spa_dbus_connection_destroy
(
c
)
(
c
)
-
>
destroy
(
(
c
)
)
struct
spa_dbus_methods
{
#
define
SPA_VERSION_DBUS_METHODS
0
uint32_t
version
;
struct
spa_dbus_connection
*
(
*
get_connection
)
(
void
*
object
enum
spa_dbus_type
type
)
;
}
;
static
inline
struct
spa_dbus_connection
*
spa_dbus_get_connection
(
struct
spa_dbus
*
dbus
enum
spa_dbus_type
type
)
{
struct
spa_dbus_connection
*
res
=
NULL
;
spa_interface_call_res
(
&
dbus
-
>
iface
struct
spa_dbus_methods
res
get_connection
0
type
)
;
return
res
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
