#
ifndef
SPA_LOG_IMPL_H
#
define
SPA_LOG_IMPL_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
stdio
.
h
>
#
include
<
spa
/
utils
/
type
.
h
>
#
include
<
spa
/
support
/
log
.
h
>
static
inline
SPA_PRINTF_FUNC
(
6
0
)
void
spa_log_impl_logv
(
void
*
object
enum
spa_log_level
level
const
char
*
file
int
line
const
char
*
func
const
char
*
fmt
va_list
args
)
{
char
text
[
512
]
location
[
1024
]
;
static
const
char
*
levels
[
]
=
{
"
-
"
"
E
"
"
W
"
"
I
"
"
D
"
"
T
"
}
;
vsnprintf
(
text
sizeof
(
text
)
fmt
args
)
;
snprintf
(
location
sizeof
(
location
)
"
[
%
s
]
[
%
s
:
%
i
%
s
(
)
]
%
s
\
n
"
levels
[
level
]
strrchr
(
file
'
/
'
)
+
1
line
func
text
)
;
fputs
(
location
stderr
)
;
}
static
inline
SPA_PRINTF_FUNC
(
6
7
)
void
spa_log_impl_log
(
void
*
object
enum
spa_log_level
level
const
char
*
file
int
line
const
char
*
func
const
char
*
fmt
.
.
.
)
{
va_list
args
;
va_start
(
args
fmt
)
;
spa_log_impl_logv
(
object
level
file
line
func
fmt
args
)
;
va_end
(
args
)
;
}
#
define
SPA_LOG_IMPL_DEFINE
(
name
)
\
struct
{
\
struct
spa_log
log
;
\
struct
spa_log_methods
methods
;
\
}
name
#
define
SPA_LOG_IMPL_INIT
(
name
)
\
{
{
{
SPA_TYPE_INTERFACE_Log
SPA_VERSION_LOG
\
SPA_CALLBACKS_INIT
(
&
name
.
methods
&
name
)
}
\
SPA_LOG_LEVEL_INFO
}
\
{
SPA_VERSION_LOG_METHODS
\
spa_log_impl_log
\
spa_log_impl_logv
}
}
#
define
SPA_LOG_IMPL
(
name
)
\
SPA_LOG_IMPL_DEFINE
(
name
)
=
SPA_LOG_IMPL_INIT
(
name
)
#
ifdef
__cplusplus
}
#
endif
#
endif
