#
ifndef
SPA_LOOP_H
#
define
SPA_LOOP_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
errno
.
h
>
#
include
<
spa
/
utils
/
defs
.
h
>
#
include
<
spa
/
utils
/
hook
.
h
>
#
include
<
spa
/
support
/
system
.
h
>
#
ifndef
SPA_API_LOOP
#
ifdef
SPA_API_IMPL
#
define
SPA_API_LOOP
SPA_API_IMPL
#
else
#
define
SPA_API_LOOP
static
inline
#
endif
#
endif
#
define
SPA_TYPE_INTERFACE_Loop
SPA_TYPE_INFO_INTERFACE_BASE
"
Loop
"
#
define
SPA_TYPE_INTERFACE_DataLoop
SPA_TYPE_INFO_INTERFACE_BASE
"
DataLoop
"
#
define
SPA_VERSION_LOOP
0
struct
spa_loop
{
struct
spa_interface
iface
;
}
;
#
define
SPA_TYPE_INTERFACE_LoopControl
SPA_TYPE_INFO_INTERFACE_BASE
"
LoopControl
"
#
define
SPA_VERSION_LOOP_CONTROL
1
struct
spa_loop_control
{
struct
spa_interface
iface
;
}
;
#
define
SPA_TYPE_INTERFACE_LoopUtils
SPA_TYPE_INFO_INTERFACE_BASE
"
LoopUtils
"
#
define
SPA_VERSION_LOOP_UTILS
0
struct
spa_loop_utils
{
struct
spa_interface
iface
;
}
;
struct
spa_source
;
typedef
void
(
*
spa_source_func_t
)
(
struct
spa_source
*
source
)
;
struct
spa_source
{
struct
spa_loop
*
loop
;
spa_source_func_t
func
;
void
*
data
;
int
fd
;
uint32_t
mask
;
uint32_t
rmask
;
void
*
priv
;
}
;
typedef
int
(
*
spa_invoke_func_t
)
(
struct
spa_loop
*
loop
bool
async
uint32_t
seq
const
void
*
data
size_t
size
void
*
user_data
)
;
struct
spa_loop_methods
{
#
define
SPA_VERSION_LOOP_METHODS
0
uint32_t
version
;
int
(
*
add_source
)
(
void
*
object
struct
spa_source
*
source
)
;
int
(
*
update_source
)
(
void
*
object
struct
spa_source
*
source
)
;
int
(
*
remove_source
)
(
void
*
object
struct
spa_source
*
source
)
;
int
(
*
invoke
)
(
void
*
object
spa_invoke_func_t
func
uint32_t
seq
const
void
*
data
size_t
size
bool
block
void
*
user_data
)
;
}
;
SPA_API_LOOP
int
spa_loop_add_source
(
struct
spa_loop
*
object
struct
spa_source
*
source
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop
&
object
-
>
iface
add_source
0
source
)
;
}
SPA_API_LOOP
int
spa_loop_update_source
(
struct
spa_loop
*
object
struct
spa_source
*
source
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop
&
object
-
>
iface
update_source
0
source
)
;
}
SPA_API_LOOP
int
spa_loop_remove_source
(
struct
spa_loop
*
object
struct
spa_source
*
source
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop
&
object
-
>
iface
remove_source
0
source
)
;
}
SPA_API_LOOP
int
spa_loop_invoke
(
struct
spa_loop
*
object
spa_invoke_func_t
func
uint32_t
seq
const
void
*
data
size_t
size
bool
block
void
*
user_data
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop
&
object
-
>
iface
invoke
0
func
seq
data
size
block
user_data
)
;
}
struct
spa_loop_control_hooks
{
#
define
SPA_VERSION_LOOP_CONTROL_HOOKS
0
uint32_t
version
;
void
(
*
before
)
(
void
*
data
)
;
void
(
*
after
)
(
void
*
data
)
;
}
;
SPA_API_LOOP
void
spa_loop_control_hook_before
(
struct
spa_hook_list
*
l
)
{
struct
spa_hook
*
h
;
spa_list_for_each_reverse
(
h
&
l
-
>
list
link
)
spa_callbacks_call_fast
(
&
h
-
>
cb
struct
spa_loop_control_hooks
before
0
)
;
}
SPA_API_LOOP
void
spa_loop_control_hook_after
(
struct
spa_hook_list
*
l
)
{
struct
spa_hook
*
h
;
spa_list_for_each
(
h
&
l
-
>
list
link
)
spa_callbacks_call_fast
(
&
h
-
>
cb
struct
spa_loop_control_hooks
after
0
)
;
}
struct
spa_loop_control_methods
{
#
define
SPA_VERSION_LOOP_CONTROL_METHODS
1
uint32_t
version
;
int
(
*
get_fd
)
(
void
*
object
)
;
void
(
*
add_hook
)
(
void
*
object
struct
spa_hook
*
hook
const
struct
spa_loop_control_hooks
*
hooks
void
*
data
)
;
void
(
*
enter
)
(
void
*
object
)
;
void
(
*
leave
)
(
void
*
object
)
;
int
(
*
iterate
)
(
void
*
object
int
timeout
)
;
int
(
*
check
)
(
void
*
object
)
;
}
;
SPA_API_LOOP
int
spa_loop_control_get_fd
(
struct
spa_loop_control
*
object
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop_control
&
object
-
>
iface
get_fd
0
)
;
}
SPA_API_LOOP
void
spa_loop_control_add_hook
(
struct
spa_loop_control
*
object
struct
spa_hook
*
hook
const
struct
spa_loop_control_hooks
*
hooks
void
*
data
)
{
spa_api_method_v
(
spa_loop_control
&
object
-
>
iface
add_hook
0
hook
hooks
data
)
;
}
SPA_API_LOOP
void
spa_loop_control_enter
(
struct
spa_loop_control
*
object
)
{
spa_api_method_v
(
spa_loop_control
&
object
-
>
iface
enter
0
)
;
}
SPA_API_LOOP
void
spa_loop_control_leave
(
struct
spa_loop_control
*
object
)
{
spa_api_method_v
(
spa_loop_control
&
object
-
>
iface
leave
0
)
;
}
SPA_API_LOOP
int
spa_loop_control_iterate
(
struct
spa_loop_control
*
object
int
timeout
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop_control
&
object
-
>
iface
iterate
0
timeout
)
;
}
SPA_API_LOOP
int
spa_loop_control_iterate_fast
(
struct
spa_loop_control
*
object
int
timeout
)
{
return
spa_api_method_fast_r
(
int
-
ENOTSUP
spa_loop_control
&
object
-
>
iface
iterate
0
timeout
)
;
}
SPA_API_LOOP
int
spa_loop_control_check
(
struct
spa_loop_control
*
object
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop_control
&
object
-
>
iface
check
1
)
;
}
typedef
void
(
*
spa_source_io_func_t
)
(
void
*
data
int
fd
uint32_t
mask
)
;
typedef
void
(
*
spa_source_idle_func_t
)
(
void
*
data
)
;
typedef
void
(
*
spa_source_event_func_t
)
(
void
*
data
uint64_t
count
)
;
typedef
void
(
*
spa_source_timer_func_t
)
(
void
*
data
uint64_t
expirations
)
;
typedef
void
(
*
spa_source_signal_func_t
)
(
void
*
data
int
signal_number
)
;
struct
spa_loop_utils_methods
{
#
define
SPA_VERSION_LOOP_UTILS_METHODS
0
uint32_t
version
;
struct
spa_source
*
(
*
add_io
)
(
void
*
object
int
fd
uint32_t
mask
bool
close
spa_source_io_func_t
func
void
*
data
)
;
int
(
*
update_io
)
(
void
*
object
struct
spa_source
*
source
uint32_t
mask
)
;
struct
spa_source
*
(
*
add_idle
)
(
void
*
object
bool
enabled
spa_source_idle_func_t
func
void
*
data
)
;
int
(
*
enable_idle
)
(
void
*
object
struct
spa_source
*
source
bool
enabled
)
;
struct
spa_source
*
(
*
add_event
)
(
void
*
object
spa_source_event_func_t
func
void
*
data
)
;
int
(
*
signal_event
)
(
void
*
object
struct
spa_source
*
source
)
;
struct
spa_source
*
(
*
add_timer
)
(
void
*
object
spa_source_timer_func_t
func
void
*
data
)
;
int
(
*
update_timer
)
(
void
*
object
struct
spa_source
*
source
struct
timespec
*
value
struct
timespec
*
interval
bool
absolute
)
;
struct
spa_source
*
(
*
add_signal
)
(
void
*
object
int
signal_number
spa_source_signal_func_t
func
void
*
data
)
;
void
(
*
destroy_source
)
(
void
*
object
struct
spa_source
*
source
)
;
}
;
SPA_API_LOOP
struct
spa_source
*
spa_loop_utils_add_io
(
struct
spa_loop_utils
*
object
int
fd
uint32_t
mask
bool
close
spa_source_io_func_t
func
void
*
data
)
{
return
spa_api_method_r
(
struct
spa_source
*
NULL
spa_loop_utils
&
object
-
>
iface
add_io
0
fd
mask
close
func
data
)
;
}
SPA_API_LOOP
int
spa_loop_utils_update_io
(
struct
spa_loop_utils
*
object
struct
spa_source
*
source
uint32_t
mask
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop_utils
&
object
-
>
iface
update_io
0
source
mask
)
;
}
SPA_API_LOOP
struct
spa_source
*
spa_loop_utils_add_idle
(
struct
spa_loop_utils
*
object
bool
enabled
spa_source_idle_func_t
func
void
*
data
)
{
return
spa_api_method_r
(
struct
spa_source
*
NULL
spa_loop_utils
&
object
-
>
iface
add_idle
0
enabled
func
data
)
;
}
SPA_API_LOOP
int
spa_loop_utils_enable_idle
(
struct
spa_loop_utils
*
object
struct
spa_source
*
source
bool
enabled
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop_utils
&
object
-
>
iface
enable_idle
0
source
enabled
)
;
}
SPA_API_LOOP
struct
spa_source
*
spa_loop_utils_add_event
(
struct
spa_loop_utils
*
object
spa_source_event_func_t
func
void
*
data
)
{
return
spa_api_method_r
(
struct
spa_source
*
NULL
spa_loop_utils
&
object
-
>
iface
add_event
0
func
data
)
;
}
SPA_API_LOOP
int
spa_loop_utils_signal_event
(
struct
spa_loop_utils
*
object
struct
spa_source
*
source
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop_utils
&
object
-
>
iface
signal_event
0
source
)
;
}
SPA_API_LOOP
struct
spa_source
*
spa_loop_utils_add_timer
(
struct
spa_loop_utils
*
object
spa_source_timer_func_t
func
void
*
data
)
{
return
spa_api_method_r
(
struct
spa_source
*
NULL
spa_loop_utils
&
object
-
>
iface
add_timer
0
func
data
)
;
}
SPA_API_LOOP
int
spa_loop_utils_update_timer
(
struct
spa_loop_utils
*
object
struct
spa_source
*
source
struct
timespec
*
value
struct
timespec
*
interval
bool
absolute
)
{
return
spa_api_method_r
(
int
-
ENOTSUP
spa_loop_utils
&
object
-
>
iface
update_timer
0
source
value
interval
absolute
)
;
}
SPA_API_LOOP
struct
spa_source
*
spa_loop_utils_add_signal
(
struct
spa_loop_utils
*
object
int
signal_number
spa_source_signal_func_t
func
void
*
data
)
{
return
spa_api_method_r
(
struct
spa_source
*
NULL
spa_loop_utils
&
object
-
>
iface
add_signal
0
signal_number
func
data
)
;
}
SPA_API_LOOP
void
spa_loop_utils_destroy_source
(
struct
spa_loop_utils
*
object
struct
spa_source
*
source
)
{
spa_api_method_v
(
spa_loop_utils
&
object
-
>
iface
destroy_source
0
source
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
