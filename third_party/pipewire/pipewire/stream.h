#
ifndef
PIPEWIRE_STREAM_H
#
define
PIPEWIRE_STREAM_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
pw_stream
;
#
include
<
spa
/
buffer
/
buffer
.
h
>
#
include
<
spa
/
param
/
param
.
h
>
#
include
<
spa
/
pod
/
command
.
h
>
#
include
<
spa
/
pod
/
event
.
h
>
enum
pw_stream_state
{
PW_STREAM_STATE_ERROR
=
-
1
PW_STREAM_STATE_UNCONNECTED
=
0
PW_STREAM_STATE_CONNECTING
=
1
PW_STREAM_STATE_PAUSED
=
2
PW_STREAM_STATE_STREAMING
=
3
}
;
struct
pw_buffer
{
struct
spa_buffer
*
buffer
;
void
*
user_data
;
uint64_t
size
;
uint64_t
requested
;
uint64_t
time
;
}
;
struct
pw_stream_control
{
const
char
*
name
;
uint32_t
flags
;
float
def
;
float
min
;
float
max
;
float
*
values
;
uint32_t
n_values
;
uint32_t
max_values
;
}
;
struct
pw_time
{
int64_t
now
;
struct
spa_fraction
rate
;
uint64_t
ticks
;
int64_t
delay
;
uint64_t
queued
;
uint64_t
buffered
;
uint32_t
queued_buffers
;
uint32_t
avail_buffers
;
uint64_t
size
;
}
;
#
include
<
pipewire
/
port
.
h
>
struct
pw_stream_events
{
#
define
PW_VERSION_STREAM_EVENTS
2
uint32_t
version
;
void
(
*
destroy
)
(
void
*
data
)
;
void
(
*
state_changed
)
(
void
*
data
enum
pw_stream_state
old
enum
pw_stream_state
state
const
char
*
error
)
;
void
(
*
control_info
)
(
void
*
data
uint32_t
id
const
struct
pw_stream_control
*
control
)
;
void
(
*
io_changed
)
(
void
*
data
uint32_t
id
void
*
area
uint32_t
size
)
;
void
(
*
param_changed
)
(
void
*
data
uint32_t
id
const
struct
spa_pod
*
param
)
;
void
(
*
add_buffer
)
(
void
*
data
struct
pw_buffer
*
buffer
)
;
void
(
*
remove_buffer
)
(
void
*
data
struct
pw_buffer
*
buffer
)
;
void
(
*
process
)
(
void
*
data
)
;
void
(
*
drained
)
(
void
*
data
)
;
void
(
*
command
)
(
void
*
data
const
struct
spa_command
*
command
)
;
void
(
*
trigger_done
)
(
void
*
data
)
;
}
;
const
char
*
pw_stream_state_as_string
(
enum
pw_stream_state
state
)
;
enum
pw_stream_flags
{
PW_STREAM_FLAG_NONE
=
0
PW_STREAM_FLAG_AUTOCONNECT
=
(
1
<
<
0
)
PW_STREAM_FLAG_INACTIVE
=
(
1
<
<
1
)
PW_STREAM_FLAG_MAP_BUFFERS
=
(
1
<
<
2
)
PW_STREAM_FLAG_DRIVER
=
(
1
<
<
3
)
PW_STREAM_FLAG_RT_PROCESS
=
(
1
<
<
4
)
PW_STREAM_FLAG_NO_CONVERT
=
(
1
<
<
5
)
PW_STREAM_FLAG_EXCLUSIVE
=
(
1
<
<
6
)
PW_STREAM_FLAG_DONT_RECONNECT
=
(
1
<
<
7
)
PW_STREAM_FLAG_ALLOC_BUFFERS
=
(
1
<
<
8
)
PW_STREAM_FLAG_TRIGGER
=
(
1
<
<
9
)
PW_STREAM_FLAG_ASYNC
=
(
1
<
<
10
)
PW_STREAM_FLAG_EARLY_PROCESS
=
(
1
<
<
11
)
PW_STREAM_FLAG_RT_TRIGGER_DONE
=
(
1
<
<
12
)
}
;
struct
pw_stream
*
pw_stream_new
(
struct
pw_core
*
core
const
char
*
name
struct
pw_properties
*
props
)
;
struct
pw_stream
*
pw_stream_new_simple
(
struct
pw_loop
*
loop
const
char
*
name
struct
pw_properties
*
props
const
struct
pw_stream_events
*
events
void
*
data
)
;
void
pw_stream_destroy
(
struct
pw_stream
*
stream
)
;
void
pw_stream_add_listener
(
struct
pw_stream
*
stream
struct
spa_hook
*
listener
const
struct
pw_stream_events
*
events
void
*
data
)
;
enum
pw_stream_state
pw_stream_get_state
(
struct
pw_stream
*
stream
const
char
*
*
error
)
;
const
char
*
pw_stream_get_name
(
struct
pw_stream
*
stream
)
;
struct
pw_core
*
pw_stream_get_core
(
struct
pw_stream
*
stream
)
;
const
struct
pw_properties
*
pw_stream_get_properties
(
struct
pw_stream
*
stream
)
;
int
pw_stream_update_properties
(
struct
pw_stream
*
stream
const
struct
spa_dict
*
dict
)
;
int
pw_stream_connect
(
struct
pw_stream
*
stream
enum
pw_direction
direction
uint32_t
target_id
enum
pw_stream_flags
flags
const
struct
spa_pod
*
*
params
uint32_t
n_params
)
;
uint32_t
pw_stream_get_node_id
(
struct
pw_stream
*
stream
)
;
int
pw_stream_disconnect
(
struct
pw_stream
*
stream
)
;
int
pw_stream_set_error
(
struct
pw_stream
*
stream
int
res
const
char
*
error
.
.
.
)
SPA_PRINTF_FUNC
(
3
4
)
;
int
pw_stream_update_params
(
struct
pw_stream
*
stream
const
struct
spa_pod
*
*
params
uint32_t
n_params
)
;
int
pw_stream_set_param
(
struct
pw_stream
*
stream
uint32_t
id
const
struct
spa_pod
*
param
)
;
const
struct
pw_stream_control
*
pw_stream_get_control
(
struct
pw_stream
*
stream
uint32_t
id
)
;
int
pw_stream_set_control
(
struct
pw_stream
*
stream
uint32_t
id
uint32_t
n_values
float
*
values
.
.
.
)
;
int
pw_stream_get_time_n
(
struct
pw_stream
*
stream
struct
pw_time
*
time
size_t
size
)
;
uint64_t
pw_stream_get_nsec
(
struct
pw_stream
*
stream
)
;
struct
pw_loop
*
pw_stream_get_data_loop
(
struct
pw_stream
*
stream
)
;
SPA_DEPRECATED
int
pw_stream_get_time
(
struct
pw_stream
*
stream
struct
pw_time
*
time
)
;
struct
pw_buffer
*
pw_stream_dequeue_buffer
(
struct
pw_stream
*
stream
)
;
int
pw_stream_queue_buffer
(
struct
pw_stream
*
stream
struct
pw_buffer
*
buffer
)
;
int
pw_stream_return_buffer
(
struct
pw_stream
*
stream
struct
pw_buffer
*
buffer
)
;
int
pw_stream_set_active
(
struct
pw_stream
*
stream
bool
active
)
;
int
pw_stream_flush
(
struct
pw_stream
*
stream
bool
drain
)
;
bool
pw_stream_is_driving
(
struct
pw_stream
*
stream
)
;
bool
pw_stream_is_lazy
(
struct
pw_stream
*
stream
)
;
int
pw_stream_trigger_process
(
struct
pw_stream
*
stream
)
;
int
pw_stream_emit_event
(
struct
pw_stream
*
stream
const
struct
spa_event
*
event
)
;
int
pw_stream_set_rate
(
struct
pw_stream
*
stream
double
rate
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
