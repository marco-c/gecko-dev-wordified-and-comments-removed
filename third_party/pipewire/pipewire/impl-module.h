#
ifndef
PIPEWIRE_IMPL_MODULE_H
#
define
PIPEWIRE_IMPL_MODULE_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
spa
/
utils
/
hook
.
h
>
#
include
<
pipewire
/
context
.
h
>
#
define
PIPEWIRE_SYMBOL_MODULE_INIT
"
pipewire__module_init
"
#
define
PIPEWIRE_MODULE_PREFIX
"
libpipewire
-
"
struct
pw_impl_module
;
typedef
int
(
*
pw_impl_module_init_func_t
)
(
struct
pw_impl_module
*
module
const
char
*
args
)
;
struct
pw_impl_module_events
{
#
define
PW_VERSION_IMPL_MODULE_EVENTS
0
uint32_t
version
;
void
(
*
destroy
)
(
void
*
data
)
;
void
(
*
free
)
(
void
*
data
)
;
void
(
*
initialized
)
(
void
*
data
)
;
void
(
*
registered
)
(
void
*
data
)
;
}
;
struct
pw_impl_module
*
pw_context_load_module
(
struct
pw_context
*
context
const
char
*
name
const
char
*
args
struct
pw_properties
*
properties
)
;
struct
pw_context
*
pw_impl_module_get_context
(
struct
pw_impl_module
*
module
)
;
struct
pw_global
*
pw_impl_module_get_global
(
struct
pw_impl_module
*
module
)
;
const
struct
pw_properties
*
pw_impl_module_get_properties
(
struct
pw_impl_module
*
module
)
;
int
pw_impl_module_update_properties
(
struct
pw_impl_module
*
module
const
struct
spa_dict
*
dict
)
;
const
struct
pw_module_info
*
pw_impl_module_get_info
(
struct
pw_impl_module
*
module
)
;
void
pw_impl_module_add_listener
(
struct
pw_impl_module
*
module
struct
spa_hook
*
listener
const
struct
pw_impl_module_events
*
events
void
*
data
)
;
void
pw_impl_module_destroy
(
struct
pw_impl_module
*
module
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
