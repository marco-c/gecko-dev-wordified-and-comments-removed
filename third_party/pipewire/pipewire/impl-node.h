#
ifndef
PIPEWIRE_IMPL_NODE_H
#
define
PIPEWIRE_IMPL_NODE_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
pw_impl_node
;
struct
pw_impl_port
;
#
include
<
spa
/
node
/
node
.
h
>
#
include
<
spa
/
node
/
event
.
h
>
#
include
<
pipewire
/
impl
.
h
>
struct
pw_impl_node_events
{
#
define
PW_VERSION_IMPL_NODE_EVENTS
0
uint32_t
version
;
void
(
*
destroy
)
(
void
*
data
)
;
void
(
*
free
)
(
void
*
data
)
;
void
(
*
initialized
)
(
void
*
data
)
;
void
(
*
port_init
)
(
void
*
data
struct
pw_impl_port
*
port
)
;
void
(
*
port_added
)
(
void
*
data
struct
pw_impl_port
*
port
)
;
void
(
*
port_removed
)
(
void
*
data
struct
pw_impl_port
*
port
)
;
void
(
*
info_changed
)
(
void
*
data
const
struct
pw_node_info
*
info
)
;
void
(
*
port_info_changed
)
(
void
*
data
struct
pw_impl_port
*
port
const
struct
pw_port_info
*
info
)
;
void
(
*
active_changed
)
(
void
*
data
bool
active
)
;
void
(
*
state_request
)
(
void
*
data
enum
pw_node_state
state
)
;
void
(
*
state_changed
)
(
void
*
data
enum
pw_node_state
old
enum
pw_node_state
state
const
char
*
error
)
;
void
(
*
result
)
(
void
*
data
int
seq
int
res
uint32_t
type
const
void
*
result
)
;
void
(
*
event
)
(
void
*
data
const
struct
spa_event
*
event
)
;
void
(
*
driver_changed
)
(
void
*
data
struct
pw_impl_node
*
old
struct
pw_impl_node
*
driver
)
;
void
(
*
peer_added
)
(
void
*
data
struct
pw_impl_node
*
peer
)
;
void
(
*
peer_removed
)
(
void
*
data
struct
pw_impl_node
*
peer
)
;
}
;
struct
pw_impl_node
*
pw_context_create_node
(
struct
pw_context
*
context
struct
pw_properties
*
properties
size_t
user_data_size
)
;
int
pw_impl_node_register
(
struct
pw_impl_node
*
node
struct
pw_properties
*
properties
)
;
void
pw_impl_node_destroy
(
struct
pw_impl_node
*
node
)
;
const
struct
pw_node_info
*
pw_impl_node_get_info
(
struct
pw_impl_node
*
node
)
;
void
*
pw_impl_node_get_user_data
(
struct
pw_impl_node
*
node
)
;
struct
pw_context
*
pw_impl_node_get_context
(
struct
pw_impl_node
*
node
)
;
struct
pw_global
*
pw_impl_node_get_global
(
struct
pw_impl_node
*
node
)
;
const
struct
pw_properties
*
pw_impl_node_get_properties
(
struct
pw_impl_node
*
node
)
;
int
pw_impl_node_update_properties
(
struct
pw_impl_node
*
node
const
struct
spa_dict
*
dict
)
;
int
pw_impl_node_set_implementation
(
struct
pw_impl_node
*
node
struct
spa_node
*
spa_node
)
;
struct
spa_node
*
pw_impl_node_get_implementation
(
struct
pw_impl_node
*
node
)
;
void
pw_impl_node_add_listener
(
struct
pw_impl_node
*
node
struct
spa_hook
*
listener
const
struct
pw_impl_node_events
*
events
void
*
data
)
;
int
pw_impl_node_for_each_port
(
struct
pw_impl_node
*
node
enum
pw_direction
direction
int
(
*
callback
)
(
void
*
data
struct
pw_impl_port
*
port
)
void
*
data
)
;
int
pw_impl_node_for_each_param
(
struct
pw_impl_node
*
node
int
seq
uint32_t
param_id
uint32_t
index
uint32_t
max
const
struct
spa_pod
*
filter
int
(
*
callback
)
(
void
*
data
int
seq
uint32_t
id
uint32_t
index
uint32_t
next
struct
spa_pod
*
param
)
void
*
data
)
;
struct
pw_impl_port
*
pw_impl_node_find_port
(
struct
pw_impl_node
*
node
enum
pw_direction
direction
uint32_t
port_id
)
;
uint32_t
pw_impl_node_get_free_port_id
(
struct
pw_impl_node
*
node
enum
pw_direction
direction
)
;
int
pw_impl_node_initialized
(
struct
pw_impl_node
*
node
)
;
int
pw_impl_node_set_active
(
struct
pw_impl_node
*
node
bool
active
)
;
bool
pw_impl_node_is_active
(
struct
pw_impl_node
*
node
)
;
int
pw_impl_node_send_command
(
struct
pw_impl_node
*
node
const
struct
spa_command
*
command
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
