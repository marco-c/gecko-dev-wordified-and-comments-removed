#
ifndef
PIPEWIRE_LOG_H
#
define
PIPEWIRE_LOG_H
#
include
<
spa
/
support
/
log
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
extern
enum
spa_log_level
pw_log_level
;
extern
struct
spa_log_topic
*
PW_LOG_TOPIC_DEFAULT
;
void
pw_log_set
(
struct
spa_log
*
log
)
;
struct
spa_log
*
pw_log_get
(
void
)
;
void
pw_log_set_level
(
enum
spa_log_level
level
)
;
void
pw_log_logt
(
enum
spa_log_level
level
const
struct
spa_log_topic
*
topic
const
char
*
file
int
line
const
char
*
func
const
char
*
fmt
.
.
.
)
SPA_PRINTF_FUNC
(
6
7
)
;
void
pw_log_logtv
(
enum
spa_log_level
level
const
struct
spa_log_topic
*
topic
const
char
*
file
int
line
const
char
*
func
const
char
*
fmt
va_list
args
)
SPA_PRINTF_FUNC
(
6
0
)
;
void
pw_log_log
(
enum
spa_log_level
level
const
char
*
file
int
line
const
char
*
func
const
char
*
fmt
.
.
.
)
SPA_PRINTF_FUNC
(
5
6
)
;
void
pw_log_logv
(
enum
spa_log_level
level
const
char
*
file
int
line
const
char
*
func
const
char
*
fmt
va_list
args
)
SPA_PRINTF_FUNC
(
5
0
)
;
void
_pw_log_topic_new
(
struct
spa_log_topic
*
topic
)
;
#
define
PW_LOG_TOPIC_STATIC
(
var
topic
)
\
static
struct
spa_log_topic
var
#
#
__LINE__
=
SPA_LOG_TOPIC
(
0
topic
)
;
\
static
struct
spa_log_topic
*
var
=
&
(
var
#
#
__LINE__
)
#
define
PW_LOG_TOPIC_EXTERN
(
var
)
\
extern
struct
spa_log_topic
*
var
#
define
PW_LOG_TOPIC
(
var
topic
)
\
struct
spa_log_topic
var
#
#
__LINE__
=
SPA_LOG_TOPIC
(
0
topic
)
;
\
struct
spa_log_topic
*
var
=
&
(
var
#
#
__LINE__
)
#
define
PW_LOG_TOPIC_INIT
(
var
)
\
spa_log_topic_init
(
pw_log_get
(
)
var
)
;
#
define
pw_log_level_enabled
(
lev
)
(
pw_log_level
>
=
(
lev
)
)
#
define
pw_log_topic_enabled
(
lev
t
)
(
(
t
)
&
&
(
t
)
-
>
has_custom_level
?
(
t
)
-
>
level
>
=
(
lev
)
:
pw_log_level_enabled
(
(
lev
)
)
)
#
define
pw_logtv
(
lev
topic
fmt
ap
)
\
(
{
\
if
(
SPA_UNLIKELY
(
pw_log_topic_enabled
(
lev
topic
)
)
)
\
pw_log_logtv
(
lev
topic
__FILE__
__LINE__
__func__
fmt
ap
)
;
\
}
)
#
define
pw_logt
(
lev
topic
.
.
.
)
\
(
{
\
if
(
SPA_UNLIKELY
(
pw_log_topic_enabled
(
lev
topic
)
)
)
\
pw_log_logt
(
lev
topic
__FILE__
__LINE__
__func__
__VA_ARGS__
)
;
\
}
)
#
define
pw_log
(
lev
.
.
.
)
pw_logt
(
lev
PW_LOG_TOPIC_DEFAULT
__VA_ARGS__
)
#
define
pw_log_error
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_ERROR
__VA_ARGS__
)
#
define
pw_log_warn
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_WARN
__VA_ARGS__
)
#
define
pw_log_info
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_INFO
__VA_ARGS__
)
#
define
pw_log_debug
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_DEBUG
__VA_ARGS__
)
#
define
pw_log_trace
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_TRACE
__VA_ARGS__
)
#
define
pw_logt_error
(
t
.
.
.
)
pw_logt
(
SPA_LOG_LEVEL_ERROR
t
__VA_ARGS__
)
#
define
pw_logt_warn
(
t
.
.
.
)
pw_logt
(
SPA_LOG_LEVEL_WARN
t
__VA_ARGS__
)
#
define
pw_logt_info
(
t
.
.
.
)
pw_logt
(
SPA_LOG_LEVEL_INFO
t
__VA_ARGS__
)
#
define
pw_logt_debug
(
t
.
.
.
)
pw_logt
(
SPA_LOG_LEVEL_DEBUG
t
__VA_ARGS__
)
#
define
pw_logt_trace
(
t
.
.
.
)
pw_logt
(
SPA_LOG_LEVEL_TRACE
t
__VA_ARGS__
)
#
ifndef
FASTPATH
#
define
pw_log_trace_fp
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_TRACE
__VA_ARGS__
)
#
else
#
define
pw_log_trace_fp
(
.
.
.
)
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
