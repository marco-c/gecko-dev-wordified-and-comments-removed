#
ifndef
PIPEWIRE_LOG_H
#
define
PIPEWIRE_LOG_H
#
include
<
spa
/
support
/
log
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
extern
enum
spa_log_level
pw_log_level
;
void
pw_log_set
(
struct
spa_log
*
log
)
;
struct
spa_log
*
pw_log_get
(
void
)
;
void
pw_log_set_level
(
enum
spa_log_level
level
)
;
void
pw_log_log
(
enum
spa_log_level
level
const
char
*
file
int
line
const
char
*
func
const
char
*
fmt
.
.
.
)
SPA_PRINTF_FUNC
(
5
6
)
;
void
pw_log_logv
(
enum
spa_log_level
level
const
char
*
file
int
line
const
char
*
func
const
char
*
fmt
va_list
args
)
SPA_PRINTF_FUNC
(
5
0
)
;
#
define
pw_log_level_enabled
(
lev
)
(
pw_log_level
>
=
(
lev
)
)
#
define
pw_log
(
lev
.
.
.
)
\
(
{
\
if
(
SPA_UNLIKELY
(
pw_log_level_enabled
(
lev
)
)
)
\
pw_log_log
(
lev
__FILE__
__LINE__
__func__
__VA_ARGS__
)
;
\
}
)
#
define
pw_log_error
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_ERROR
__VA_ARGS__
)
#
define
pw_log_warn
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_WARN
__VA_ARGS__
)
#
define
pw_log_info
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_INFO
__VA_ARGS__
)
#
define
pw_log_debug
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_DEBUG
__VA_ARGS__
)
#
define
pw_log_trace
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_TRACE
__VA_ARGS__
)
#
ifndef
FASTPATH
#
define
pw_log_trace_fp
(
.
.
.
)
pw_log
(
SPA_LOG_LEVEL_TRACE
__VA_ARGS__
)
#
else
#
define
pw_log_trace_fp
(
.
.
.
)
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
