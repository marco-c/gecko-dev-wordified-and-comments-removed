#
ifndef
PIPEWIRE_UTILS_H
#
define
PIPEWIRE_UTILS_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
<
sys
/
un
.
h
>
#
ifndef
_POSIX_C_SOURCE
#
include
<
sys
/
mount
.
h
>
#
endif
#
include
<
spa
/
utils
/
defs
.
h
>
#
include
<
spa
/
pod
/
pod
.
h
>
typedef
void
(
*
pw_destroy_t
)
(
void
*
object
)
;
const
char
*
pw_split_walk
(
const
char
*
str
const
char
*
delimiter
size_t
*
len
const
char
*
*
state
)
;
char
*
*
pw_split_strv
(
const
char
*
str
const
char
*
delimiter
int
max_tokens
int
*
n_tokens
)
;
void
pw_free_strv
(
char
*
*
str
)
;
char
*
pw_strip
(
char
*
str
const
char
*
whitespace
)
;
#
if
!
defined
(
strndupa
)
#
define
strndupa
(
s
n
)
\
(
{
\
const
char
*
__old
=
(
s
)
;
\
size_t
__len
=
strnlen
(
__old
(
n
)
)
;
\
char
*
__new
=
(
char
*
)
__builtin_alloca
(
__len
+
1
)
;
\
memcpy
(
__new
__old
__len
)
;
\
__new
[
__len
]
=
'
\
0
'
;
\
__new
;
\
}
)
#
endif
#
if
!
defined
(
strdupa
)
#
define
strdupa
(
s
)
\
(
{
\
const
char
*
__old
=
(
s
)
;
\
size_t
__len
=
strlen
(
__old
)
+
1
;
\
char
*
__new
=
(
char
*
)
alloca
(
__len
)
;
\
(
char
*
)
memcpy
(
__new
__old
__len
)
;
\
}
)
#
endif
ssize_t
pw_getrandom
(
void
*
buf
size_t
buflen
unsigned
int
flags
)
;
void
*
pw_reallocarray
(
void
*
ptr
size_t
nmemb
size_t
size
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
