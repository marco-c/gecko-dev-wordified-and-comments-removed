#
ifndef
PIPEWIRE_GLOBAL_H
#
define
PIPEWIRE_GLOBAL_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
pw_global
;
#
include
<
pipewire
/
impl
.
h
>
typedef
int
(
*
pw_global_bind_func_t
)
(
void
*
object
struct
pw_impl_client
*
client
uint32_t
permissions
uint32_t
version
uint32_t
id
)
;
struct
pw_global_events
{
#
define
PW_VERSION_GLOBAL_EVENTS
0
uint32_t
version
;
void
(
*
destroy
)
(
void
*
data
)
;
void
(
*
free
)
(
void
*
data
)
;
void
(
*
permissions_changed
)
(
void
*
data
struct
pw_impl_client
*
client
uint32_t
old_permissions
uint32_t
new_permissions
)
;
}
;
struct
pw_global
*
pw_global_new
(
struct
pw_context
*
context
const
char
*
type
uint32_t
version
struct
pw_properties
*
properties
pw_global_bind_func_t
func
void
*
object
)
;
int
pw_global_register
(
struct
pw_global
*
global
)
;
void
pw_global_add_listener
(
struct
pw_global
*
global
struct
spa_hook
*
listener
const
struct
pw_global_events
*
events
void
*
data
)
;
uint32_t
pw_global_get_permissions
(
struct
pw_global
*
global
struct
pw_impl_client
*
client
)
;
struct
pw_context
*
pw_global_get_context
(
struct
pw_global
*
global
)
;
const
char
*
pw_global_get_type
(
struct
pw_global
*
global
)
;
bool
pw_global_is_type
(
struct
pw_global
*
global
const
char
*
type
)
;
uint32_t
pw_global_get_version
(
struct
pw_global
*
global
)
;
const
struct
pw_properties
*
pw_global_get_properties
(
struct
pw_global
*
global
)
;
int
pw_global_update_keys
(
struct
pw_global
*
global
const
struct
spa_dict
*
dict
const
char
*
const
keys
[
]
)
;
void
*
pw_global_get_object
(
struct
pw_global
*
global
)
;
uint32_t
pw_global_get_id
(
struct
pw_global
*
global
)
;
uint64_t
pw_global_get_serial
(
struct
pw_global
*
global
)
;
int
pw_global_add_resource
(
struct
pw_global
*
global
struct
pw_resource
*
resource
)
;
int
pw_global_for_each_resource
(
struct
pw_global
*
global
int
(
*
callback
)
(
void
*
data
struct
pw_resource
*
resource
)
void
*
data
)
;
int
pw_global_bind
(
struct
pw_global
*
global
struct
pw_impl_client
*
client
uint32_t
permissions
uint32_t
version
uint32_t
id
)
;
int
pw_global_update_permissions
(
struct
pw_global
*
global
struct
pw_impl_client
*
client
uint32_t
old_permissions
uint32_t
new_permissions
)
;
void
pw_global_destroy
(
struct
pw_global
*
global
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
