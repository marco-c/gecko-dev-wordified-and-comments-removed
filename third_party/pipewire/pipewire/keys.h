#
ifndef
PIPEWIRE_KEYS_H
#
define
PIPEWIRE_KEYS_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
PW_KEY_PROTOCOL
"
pipewire
.
protocol
"
/
*
*
<
protocol
used
for
connection
*
/
#
define
PW_KEY_ACCESS
"
pipewire
.
access
"
/
*
*
<
how
the
client
access
is
controlled
*
/
#
define
PW_KEY_SEC_PID
"
pipewire
.
sec
.
pid
"
/
*
*
<
Client
pid
set
by
protocol
*
/
#
define
PW_KEY_SEC_UID
"
pipewire
.
sec
.
uid
"
/
*
*
<
Client
uid
set
by
protocol
*
/
#
define
PW_KEY_SEC_GID
"
pipewire
.
sec
.
gid
"
/
*
*
<
client
gid
set
by
protocol
*
/
#
define
PW_KEY_SEC_LABEL
"
pipewire
.
sec
.
label
"
/
*
*
<
client
security
label
set
by
protocol
*
/
#
define
PW_KEY_LIBRARY_NAME_SYSTEM
"
library
.
name
.
system
"
/
*
*
<
name
of
the
system
library
to
use
*
/
#
define
PW_KEY_LIBRARY_NAME_LOOP
"
library
.
name
.
loop
"
/
*
*
<
name
of
the
loop
library
to
use
*
/
#
define
PW_KEY_LIBRARY_NAME_DBUS
"
library
.
name
.
dbus
"
/
*
*
<
name
of
the
dbus
library
to
use
*
/
#
define
PW_KEY_OBJECT_PATH
"
object
.
path
"
/
*
*
<
unique
path
to
construct
the
object
*
/
#
define
PW_KEY_OBJECT_ID
"
object
.
id
"
/
*
*
<
a
global
object
id
*
/
#
define
PW_KEY_CONTEXT_PROFILE_MODULES
"
context
.
profile
.
modules
"
/
*
*
<
a
context
profile
for
modules
*
/
#
define
PW_KEY_USER_NAME
"
context
.
user
-
name
"
/
*
*
<
The
user
name
that
runs
pipewire
*
/
#
define
PW_KEY_HOST_NAME
"
context
.
host
-
name
"
/
*
*
<
The
host
name
of
the
machine
*
/
#
define
PW_KEY_CORE_NAME
"
core
.
name
"
/
*
*
<
The
name
of
the
core
.
Default
is
*
pipewire
-
<
user
-
name
>
-
<
pid
>
overwritten
*
by
env
(
PIPEWIRE_CORE
)
*
/
#
define
PW_KEY_CORE_VERSION
"
core
.
version
"
#
define
PW_KEY_CORE_DAEMON
"
core
.
daemon
"
/
*
*
<
If
the
core
is
listening
for
connections
.
*
/
#
define
PW_KEY_CORE_ID
"
core
.
id
"
/
*
*
<
the
core
id
*
/
#
define
PW_KEY_CORE_MONITORS
"
core
.
monitors
"
/
*
*
<
the
apis
monitored
by
core
.
*
/
#
define
PW_KEY_CPU_MAX_ALIGN
"
cpu
.
max
-
align
"
/
*
*
<
maximum
alignment
needed
to
support
*
all
CPU
optimizations
*
/
#
define
PW_KEY_CPU_CORES
"
cpu
.
cores
"
/
*
*
<
number
of
cores
*
/
#
define
PW_KEY_PRIORITY_SESSION
"
priority
.
session
"
/
*
*
<
priority
in
session
manager
*
/
#
define
PW_KEY_PRIORITY_DRIVER
"
priority
.
driver
"
/
*
*
<
priority
to
be
a
driver
*
/
#
define
PW_KEY_REMOTE_NAME
"
remote
.
name
"
/
*
*
<
The
name
of
the
remote
to
connect
to
*
default
pipewire
-
0
overwritten
by
*
env
(
PIPEWIRE_REMOTE
)
*
/
#
define
PW_KEY_REMOTE_INTENTION
"
remote
.
intention
"
#
define
PW_KEY_APP_NAME
"
application
.
name
"
/
*
*
<
application
name
.
Ex
:
"
Totem
Music
Player
"
*
/
#
define
PW_KEY_APP_ID
"
application
.
id
"
/
*
*
<
a
textual
id
for
identifying
an
*
application
logically
.
Ex
:
"
org
.
gnome
.
Totem
"
*
/
#
define
PW_KEY_APP_VERSION
"
application
.
version
"
#
define
PW_KEY_APP_ICON
"
application
.
icon
"
/
*
*
<
aa
base64
blob
with
PNG
image
data
*
/
#
define
PW_KEY_APP_ICON_NAME
"
application
.
icon
-
name
"
/
*
*
<
an
XDG
icon
name
for
the
application
.
*
Ex
:
"
totem
"
*
/
#
define
PW_KEY_APP_LANGUAGE
"
application
.
language
"
/
*
*
<
application
language
if
applicable
in
*
standard
POSIX
format
.
Ex
:
"
en_GB
"
*
/
#
define
PW_KEY_APP_PROCESS_ID
"
application
.
process
.
id
"
/
*
*
<
process
id
(
pid
)
*
/
#
define
PW_KEY_APP_PROCESS_BINARY
"
application
.
process
.
binary
"
/
*
*
<
binary
name
*
/
#
define
PW_KEY_APP_PROCESS_USER
"
application
.
process
.
user
"
/
*
*
<
user
name
*
/
#
define
PW_KEY_APP_PROCESS_HOST
"
application
.
process
.
host
"
/
*
*
<
host
name
*
/
#
define
PW_KEY_APP_PROCESS_MACHINE_ID
"
application
.
process
.
machine
-
id
"
/
*
*
<
the
D
-
Bus
host
id
the
*
application
runs
on
*
/
#
define
PW_KEY_APP_PROCESS_SESSION_ID
"
application
.
process
.
session
-
id
"
/
*
*
<
login
session
of
the
*
application
on
Unix
the
*
value
of
XDG_SESSION_ID
.
*
/
#
define
PW_KEY_WINDOW_X11_DISPLAY
"
window
.
x11
.
display
"
/
*
*
<
the
X11
display
string
.
Ex
.
"
:
0
.
0
"
*
/
#
define
PW_KEY_CLIENT_ID
"
client
.
id
"
/
*
*
<
a
client
id
*
/
#
define
PW_KEY_CLIENT_NAME
"
client
.
name
"
/
*
*
<
the
client
name
*
/
#
define
PW_KEY_CLIENT_API
"
client
.
api
"
/
*
*
<
the
client
api
used
to
access
*
PipeWire
*
/
#
define
PW_KEY_NODE_ID
"
node
.
id
"
/
*
*
<
node
id
*
/
#
define
PW_KEY_NODE_NAME
"
node
.
name
"
/
*
*
<
node
name
*
/
#
define
PW_KEY_NODE_NICK
"
node
.
nick
"
/
*
*
<
short
node
name
*
/
#
define
PW_KEY_NODE_DESCRIPTION
"
node
.
description
"
/
*
*
<
localized
human
readable
node
one
-
line
*
description
.
Ex
.
"
Foobar
USB
Headset
"
*
/
#
define
PW_KEY_NODE_PLUGGED
"
node
.
plugged
"
/
*
*
<
when
the
node
was
created
.
As
a
uint64
in
*
nanoseconds
.
*
/
#
define
PW_KEY_NODE_SESSION
"
node
.
session
"
#
define
PW_KEY_NODE_GROUP
"
node
.
group
"
#
define
PW_KEY_NODE_EXCLUSIVE
"
node
.
exclusive
"
/
*
*
<
node
wants
exclusive
access
to
resources
*
/
#
define
PW_KEY_NODE_AUTOCONNECT
"
node
.
autoconnect
"
/
*
*
<
node
wants
to
be
automatically
connected
*
to
a
compatible
node
*
/
#
define
PW_KEY_NODE_TARGET
"
node
.
target
"
/
*
*
<
node
wants
to
be
connected
to
the
target
*
node
/
session
*
/
#
define
PW_KEY_NODE_LATENCY
"
node
.
latency
"
/
*
*
<
the
requested
latency
of
the
node
as
*
a
fraction
.
Ex
:
128
/
48000
*
/
#
define
PW_KEY_NODE_DONT_RECONNECT
"
node
.
dont
-
reconnect
"
/
*
*
<
don
'
t
reconnect
this
node
*
/
#
define
PW_KEY_NODE_ALWAYS_PROCESS
"
node
.
always
-
process
"
/
*
*
<
process
even
when
unlinked
*
/
#
define
PW_KEY_NODE_PAUSE_ON_IDLE
"
node
.
pause
-
on
-
idle
"
/
*
*
<
pause
the
node
when
idle
*
/
#
define
PW_KEY_NODE_DRIVER
"
node
.
driver
"
/
*
*
<
node
can
drive
the
graph
*
/
#
define
PW_KEY_NODE_STREAM
"
node
.
stream
"
/
*
*
<
node
is
a
stream
the
server
side
should
*
add
a
converter
*
/
#
define
PW_KEY_PORT_ID
"
port
.
id
"
/
*
*
<
port
id
*
/
#
define
PW_KEY_PORT_NAME
"
port
.
name
"
/
*
*
<
port
name
*
/
#
define
PW_KEY_PORT_DIRECTION
"
port
.
direction
"
/
*
*
<
the
port
direction
one
of
"
in
"
or
"
out
"
*
or
"
control
"
and
"
notify
"
for
control
ports
*
/
#
define
PW_KEY_PORT_ALIAS
"
port
.
alias
"
/
*
*
<
port
alias
*
/
#
define
PW_KEY_PORT_PHYSICAL
"
port
.
physical
"
/
*
*
<
if
this
is
a
physical
port
*
/
#
define
PW_KEY_PORT_TERMINAL
"
port
.
terminal
"
/
*
*
<
if
this
port
consumes
the
data
*
/
#
define
PW_KEY_PORT_CONTROL
"
port
.
control
"
/
*
*
<
if
this
port
is
a
control
port
*
/
#
define
PW_KEY_PORT_MONITOR
"
port
.
monitor
"
/
*
*
<
if
this
port
is
a
monitor
port
*
/
#
define
PW_KEY_LINK_ID
"
link
.
id
"
/
*
*
<
a
link
id
*
/
#
define
PW_KEY_LINK_INPUT_NODE
"
link
.
input
.
node
"
/
*
*
<
input
node
id
of
a
link
*
/
#
define
PW_KEY_LINK_INPUT_PORT
"
link
.
input
.
port
"
/
*
*
<
input
port
id
of
a
link
*
/
#
define
PW_KEY_LINK_OUTPUT_NODE
"
link
.
output
.
node
"
/
*
*
<
output
node
id
of
a
link
*
/
#
define
PW_KEY_LINK_OUTPUT_PORT
"
link
.
output
.
port
"
/
*
*
<
output
port
id
of
a
link
*
/
#
define
PW_KEY_LINK_PASSIVE
"
link
.
passive
"
/
*
*
<
indicate
that
a
link
is
passive
and
*
does
not
cause
the
graph
to
be
*
runnable
.
*
/
#
define
PW_KEY_DEVICE_ID
"
device
.
id
"
/
*
*
<
device
id
*
/
#
define
PW_KEY_DEVICE_NAME
"
device
.
name
"
/
*
*
<
device
name
*
/
#
define
PW_KEY_DEVICE_PLUGGED
"
device
.
plugged
"
/
*
*
<
when
the
device
was
created
.
As
a
uint64
in
*
nanoseconds
.
*
/
#
define
PW_KEY_DEVICE_NICK
"
device
.
nick
"
#
define
PW_KEY_DEVICE_STRING
"
device
.
string
"
#
define
PW_KEY_DEVICE_API
"
device
.
api
"
#
define
PW_KEY_DEVICE_DESCRIPTION
"
device
.
description
"
#
define
PW_KEY_DEVICE_BUS_PATH
"
device
.
bus
-
path
"
#
define
PW_KEY_DEVICE_SERIAL
"
device
.
serial
"
/
*
*
<
Serial
number
if
applicable
*
/
#
define
PW_KEY_DEVICE_VENDOR_ID
"
device
.
vendor
.
id
"
/
*
*
<
vendor
ID
if
applicable
*
/
#
define
PW_KEY_DEVICE_VENDOR_NAME
"
device
.
vendor
.
name
"
/
*
*
<
vendor
name
if
applicable
*
/
#
define
PW_KEY_DEVICE_PRODUCT_ID
"
device
.
product
.
id
"
/
*
*
<
product
ID
if
applicable
*
/
#
define
PW_KEY_DEVICE_PRODUCT_NAME
"
device
.
product
.
name
"
/
*
*
<
product
name
if
applicable
*
/
#
define
PW_KEY_DEVICE_CLASS
"
device
.
class
"
/
*
*
<
device
class
*
/
#
define
PW_KEY_DEVICE_FORM_FACTOR
"
device
.
form
-
factor
"
/
*
*
<
form
factor
if
applicable
.
One
of
*
"
internal
"
"
speaker
"
"
handset
"
"
tv
"
*
"
webcam
"
"
microphone
"
"
headset
"
*
"
headphone
"
"
hands
-
free
"
"
car
"
"
hifi
"
*
"
computer
"
"
portable
"
*
/
#
define
PW_KEY_DEVICE_BUS
"
device
.
bus
"
#
define
PW_KEY_DEVICE_SUBSYSTEM
"
device
.
subsystem
"
#
define
PW_KEY_DEVICE_ICON
"
device
.
icon
"
#
define
PW_KEY_DEVICE_ICON_NAME
"
device
.
icon
-
name
"
#
define
PW_KEY_DEVICE_INTENDED_ROLES
"
device
.
intended
-
roles
"
#
define
PW_KEY_MODULE_ID
"
module
.
id
"
#
define
PW_KEY_MODULE_NAME
"
module
.
name
"
#
define
PW_KEY_MODULE_AUTHOR
"
module
.
author
"
#
define
PW_KEY_MODULE_DESCRIPTION
"
module
.
description
"
#
define
PW_KEY_MODULE_USAGE
"
module
.
usage
"
#
define
PW_KEY_MODULE_VERSION
"
module
.
version
"
#
define
PW_KEY_FACTORY_ID
"
factory
.
id
"
#
define
PW_KEY_FACTORY_NAME
"
factory
.
name
"
#
define
PW_KEY_FACTORY_USAGE
"
factory
.
usage
"
#
define
PW_KEY_FACTORY_TYPE_NAME
"
factory
.
type
.
name
"
#
define
PW_KEY_FACTORY_TYPE_VERSION
"
factory
.
type
.
version
"
#
define
PW_KEY_STREAM_IS_LIVE
"
stream
.
is
-
live
"
#
define
PW_KEY_STREAM_LATENCY_MIN
"
stream
.
latency
.
min
"
#
define
PW_KEY_STREAM_LATENCY_MAX
"
stream
.
latency
.
max
"
#
define
PW_KEY_STREAM_MONITOR
"
stream
.
monitor
"
#
define
PW_KEY_STREAM_DONT_REMIX
"
stream
.
dont
-
remix
"
#
define
PW_KEY_OBJECT_LINGER
"
object
.
linger
"
#
define
PW_KEY_MEDIA_TYPE
"
media
.
type
"
#
define
PW_KEY_MEDIA_CATEGORY
"
media
.
category
"
#
define
PW_KEY_MEDIA_ROLE
"
media
.
role
"
#
define
PW_KEY_MEDIA_CLASS
"
media
.
class
"
#
define
PW_KEY_MEDIA_NAME
"
media
.
name
"
#
define
PW_KEY_MEDIA_TITLE
"
media
.
title
"
#
define
PW_KEY_MEDIA_ARTIST
"
media
.
artist
"
#
define
PW_KEY_MEDIA_COPYRIGHT
"
media
.
copyright
"
#
define
PW_KEY_MEDIA_SOFTWARE
"
media
.
software
"
#
define
PW_KEY_MEDIA_LANGUAGE
"
media
.
language
"
#
define
PW_KEY_MEDIA_FILENAME
"
media
.
filename
"
#
define
PW_KEY_MEDIA_ICON
"
media
.
icon
"
#
define
PW_KEY_MEDIA_ICON_NAME
"
media
.
icon
-
name
"
#
define
PW_KEY_FORMAT_DSP
"
format
.
dsp
"
#
define
PW_KEY_AUDIO_CHANNEL
"
audio
.
channel
"
#
define
PW_KEY_AUDIO_RATE
"
audio
.
samplerate
"
#
define
PW_KEY_AUDIO_CHANNELS
"
audio
.
channels
"
#
define
PW_KEY_AUDIO_FORMAT
"
audio
.
format
"
#
define
PW_KEY_VIDEO_RATE
"
video
.
framerate
"
#
define
PW_KEY_VIDEO_FORMAT
"
video
.
format
"
#
define
PW_KEY_VIDEO_SIZE
"
video
.
size
"
#
ifdef
PW_ENABLE_DEPRECATED
#
define
PW_KEY_PRIORITY_MASTER
"
priority
.
master
"
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
