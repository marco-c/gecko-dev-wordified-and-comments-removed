#
ifndef
PIPEWIRE_MEM_H
#
define
PIPEWIRE_MEM_H
#
include
<
pipewire
/
properties
.
h
>
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
enum
pw_memblock_flags
{
PW_MEMBLOCK_FLAG_NONE
=
0
PW_MEMBLOCK_FLAG_READABLE
=
(
1
<
<
0
)
PW_MEMBLOCK_FLAG_WRITABLE
=
(
1
<
<
1
)
PW_MEMBLOCK_FLAG_SEAL
=
(
1
<
<
2
)
PW_MEMBLOCK_FLAG_MAP
=
(
1
<
<
3
)
PW_MEMBLOCK_FLAG_DONT_CLOSE
=
(
1
<
<
4
)
PW_MEMBLOCK_FLAG_DONT_NOTIFY
=
(
1
<
<
5
)
PW_MEMBLOCK_FLAG_READWRITE
=
PW_MEMBLOCK_FLAG_READABLE
|
PW_MEMBLOCK_FLAG_WRITABLE
}
;
enum
pw_memmap_flags
{
PW_MEMMAP_FLAG_NONE
=
0
PW_MEMMAP_FLAG_READ
=
(
1
<
<
0
)
PW_MEMMAP_FLAG_WRITE
=
(
1
<
<
1
)
PW_MEMMAP_FLAG_TWICE
=
(
1
<
<
2
)
PW_MEMMAP_FLAG_PRIVATE
=
(
1
<
<
3
)
PW_MEMMAP_FLAG_READWRITE
=
PW_MEMMAP_FLAG_READ
|
PW_MEMMAP_FLAG_WRITE
}
;
struct
pw_memchunk
;
struct
pw_mempool
{
struct
pw_properties
*
props
;
}
;
struct
pw_memblock
{
struct
pw_mempool
*
pool
;
uint32_t
id
;
int
ref
;
uint32_t
flags
;
uint32_t
type
;
int
fd
;
uint32_t
size
;
struct
pw_memmap
*
map
;
}
;
struct
pw_memmap
{
struct
pw_memblock
*
block
;
void
*
ptr
;
uint32_t
flags
;
uint32_t
offset
;
uint32_t
size
;
uint32_t
tag
[
5
]
;
}
;
struct
pw_mempool_events
{
#
define
PW_VERSION_MEMPOOL_EVENTS
0
uint32_t
version
;
void
(
*
destroy
)
(
void
*
data
)
;
void
(
*
added
)
(
void
*
data
struct
pw_memblock
*
block
)
;
void
(
*
removed
)
(
void
*
data
struct
pw_memblock
*
block
)
;
}
;
struct
pw_mempool
*
pw_mempool_new
(
struct
pw_properties
*
props
)
;
void
pw_mempool_add_listener
(
struct
pw_mempool
*
pool
struct
spa_hook
*
listener
const
struct
pw_mempool_events
*
events
void
*
data
)
;
void
pw_mempool_clear
(
struct
pw_mempool
*
pool
)
;
void
pw_mempool_destroy
(
struct
pw_mempool
*
pool
)
;
struct
pw_memblock
*
pw_mempool_alloc
(
struct
pw_mempool
*
pool
enum
pw_memblock_flags
flags
uint32_t
type
size_t
size
)
;
struct
pw_memblock
*
pw_mempool_import_block
(
struct
pw_mempool
*
pool
struct
pw_memblock
*
mem
)
;
struct
pw_memblock
*
pw_mempool_import
(
struct
pw_mempool
*
pool
enum
pw_memblock_flags
flags
uint32_t
type
int
fd
)
;
void
pw_memblock_free
(
struct
pw_memblock
*
mem
)
;
static
inline
void
pw_memblock_unref
(
struct
pw_memblock
*
mem
)
{
if
(
-
-
mem
-
>
ref
=
=
0
)
pw_memblock_free
(
mem
)
;
}
int
pw_mempool_remove_id
(
struct
pw_mempool
*
pool
uint32_t
id
)
;
struct
pw_memblock
*
pw_mempool_find_ptr
(
struct
pw_mempool
*
pool
const
void
*
ptr
)
;
struct
pw_memblock
*
pw_mempool_find_id
(
struct
pw_mempool
*
pool
uint32_t
id
)
;
struct
pw_memblock
*
pw_mempool_find_fd
(
struct
pw_mempool
*
pool
int
fd
)
;
struct
pw_memmap
*
pw_memblock_map
(
struct
pw_memblock
*
block
enum
pw_memmap_flags
flags
uint32_t
offset
uint32_t
size
uint32_t
tag
[
5
]
)
;
struct
pw_memmap
*
pw_mempool_map_id
(
struct
pw_mempool
*
pool
uint32_t
id
enum
pw_memmap_flags
flags
uint32_t
offset
uint32_t
size
uint32_t
tag
[
5
]
)
;
struct
pw_memmap
*
pw_mempool_import_map
(
struct
pw_mempool
*
pool
struct
pw_mempool
*
other
void
*
data
uint32_t
size
uint32_t
tag
[
5
]
)
;
struct
pw_memmap
*
pw_mempool_find_tag
(
struct
pw_mempool
*
pool
uint32_t
tag
[
5
]
size_t
size
)
;
int
pw_memmap_free
(
struct
pw_memmap
*
map
)
;
struct
pw_map_range
{
uint32_t
start
;
uint32_t
offset
;
uint32_t
size
;
}
;
#
define
PW_MAP_RANGE_INIT
(
struct
pw_map_range
)
{
0
}
static
inline
void
pw_map_range_init
(
struct
pw_map_range
*
range
uint32_t
offset
uint32_t
size
uint32_t
page_size
)
{
range
-
>
offset
=
SPA_ROUND_DOWN_N
(
offset
page_size
)
;
range
-
>
start
=
offset
-
range
-
>
offset
;
range
-
>
size
=
SPA_ROUND_UP_N
(
range
-
>
start
+
size
page_size
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
