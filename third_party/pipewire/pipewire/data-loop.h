#
ifndef
PIPEWIRE_DATA_LOOP_H
#
define
PIPEWIRE_DATA_LOOP_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
spa
/
utils
/
hook
.
h
>
#
include
<
spa
/
support
/
thread
.
h
>
struct
pw_data_loop
;
#
include
<
pipewire
/
loop
.
h
>
#
include
<
pipewire
/
properties
.
h
>
struct
pw_data_loop_events
{
#
define
PW_VERSION_DATA_LOOP_EVENTS
0
uint32_t
version
;
void
(
*
destroy
)
(
void
*
data
)
;
}
;
struct
pw_data_loop
*
pw_data_loop_new
(
const
struct
spa_dict
*
props
)
;
void
pw_data_loop_add_listener
(
struct
pw_data_loop
*
loop
struct
spa_hook
*
listener
const
struct
pw_data_loop_events
*
events
void
*
data
)
;
int
pw_data_loop_wait
(
struct
pw_data_loop
*
loop
int
timeout
)
;
void
pw_data_loop_exit
(
struct
pw_data_loop
*
loop
)
;
struct
pw_loop
*
pw_data_loop_get_loop
(
struct
pw_data_loop
*
loop
)
;
void
pw_data_loop_destroy
(
struct
pw_data_loop
*
loop
)
;
int
pw_data_loop_start
(
struct
pw_data_loop
*
loop
)
;
int
pw_data_loop_stop
(
struct
pw_data_loop
*
loop
)
;
bool
pw_data_loop_in_thread
(
struct
pw_data_loop
*
loop
)
;
struct
spa_thread
*
pw_data_loop_get_thread
(
struct
pw_data_loop
*
loop
)
;
int
pw_data_loop_invoke
(
struct
pw_data_loop
*
loop
spa_invoke_func_t
func
uint32_t
seq
const
void
*
data
size_t
size
bool
block
void
*
user_data
)
;
void
pw_data_loop_set_thread_utils
(
struct
pw_data_loop
*
loop
struct
spa_thread_utils
*
impl
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
