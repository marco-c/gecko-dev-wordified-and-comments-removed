#
ifndef
PIPEWIRE_FILTER_H
#
define
PIPEWIRE_FILTER_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
struct
pw_filter
;
#
include
<
spa
/
buffer
/
buffer
.
h
>
#
include
<
spa
/
node
/
io
.
h
>
#
include
<
spa
/
param
/
param
.
h
>
#
include
<
spa
/
pod
/
command
.
h
>
#
include
<
pipewire
/
core
.
h
>
#
include
<
pipewire
/
stream
.
h
>
enum
pw_filter_state
{
PW_FILTER_STATE_ERROR
=
-
1
PW_FILTER_STATE_UNCONNECTED
=
0
PW_FILTER_STATE_CONNECTING
=
1
PW_FILTER_STATE_PAUSED
=
2
PW_FILTER_STATE_STREAMING
=
3
}
;
#
if
0
struct
pw_buffer
{
struct
spa_buffer
*
buffer
;
void
*
user_data
;
uint64_t
size
;
}
;
#
endif
struct
pw_filter_events
{
#
define
PW_VERSION_FILTER_EVENTS
1
uint32_t
version
;
void
(
*
destroy
)
(
void
*
data
)
;
void
(
*
state_changed
)
(
void
*
data
enum
pw_filter_state
old
enum
pw_filter_state
state
const
char
*
error
)
;
void
(
*
io_changed
)
(
void
*
data
void
*
port_data
uint32_t
id
void
*
area
uint32_t
size
)
;
void
(
*
param_changed
)
(
void
*
data
void
*
port_data
uint32_t
id
const
struct
spa_pod
*
param
)
;
void
(
*
add_buffer
)
(
void
*
data
void
*
port_data
struct
pw_buffer
*
buffer
)
;
void
(
*
remove_buffer
)
(
void
*
data
void
*
port_data
struct
pw_buffer
*
buffer
)
;
void
(
*
process
)
(
void
*
data
struct
spa_io_position
*
position
)
;
void
(
*
drained
)
(
void
*
data
)
;
void
(
*
command
)
(
void
*
data
const
struct
spa_command
*
command
)
;
}
;
const
char
*
pw_filter_state_as_string
(
enum
pw_filter_state
state
)
;
enum
pw_filter_flags
{
PW_FILTER_FLAG_NONE
=
0
PW_FILTER_FLAG_INACTIVE
=
(
1
<
<
0
)
PW_FILTER_FLAG_DRIVER
=
(
1
<
<
1
)
PW_FILTER_FLAG_RT_PROCESS
=
(
1
<
<
2
)
PW_FILTER_FLAG_CUSTOM_LATENCY
=
(
1
<
<
3
)
}
;
enum
pw_filter_port_flags
{
PW_FILTER_PORT_FLAG_NONE
=
0
PW_FILTER_PORT_FLAG_MAP_BUFFERS
=
(
1
<
<
0
)
PW_FILTER_PORT_FLAG_ALLOC_BUFFERS
=
(
1
<
<
1
)
}
;
struct
pw_filter
*
pw_filter_new
(
struct
pw_core
*
core
const
char
*
name
struct
pw_properties
*
props
)
;
struct
pw_filter
*
pw_filter_new_simple
(
struct
pw_loop
*
loop
const
char
*
name
struct
pw_properties
*
props
const
struct
pw_filter_events
*
events
void
*
data
)
;
void
pw_filter_destroy
(
struct
pw_filter
*
filter
)
;
void
pw_filter_add_listener
(
struct
pw_filter
*
filter
struct
spa_hook
*
listener
const
struct
pw_filter_events
*
events
void
*
data
)
;
enum
pw_filter_state
pw_filter_get_state
(
struct
pw_filter
*
filter
const
char
*
*
error
)
;
const
char
*
pw_filter_get_name
(
struct
pw_filter
*
filter
)
;
struct
pw_core
*
pw_filter_get_core
(
struct
pw_filter
*
filter
)
;
int
pw_filter_connect
(
struct
pw_filter
*
filter
enum
pw_filter_flags
flags
const
struct
spa_pod
*
*
params
uint32_t
n_params
)
;
uint32_t
pw_filter_get_node_id
(
struct
pw_filter
*
filter
)
;
int
pw_filter_disconnect
(
struct
pw_filter
*
filter
)
;
void
*
pw_filter_add_port
(
struct
pw_filter
*
filter
enum
pw_direction
direction
enum
pw_filter_port_flags
flags
size_t
port_data_size
struct
pw_properties
*
props
const
struct
spa_pod
*
*
params
uint32_t
n_params
)
;
int
pw_filter_remove_port
(
void
*
port_data
)
;
const
struct
pw_properties
*
pw_filter_get_properties
(
struct
pw_filter
*
filter
void
*
port_data
)
;
int
pw_filter_update_properties
(
struct
pw_filter
*
filter
void
*
port_data
const
struct
spa_dict
*
dict
)
;
int
pw_filter_set_error
(
struct
pw_filter
*
filter
int
res
const
char
*
error
.
.
.
)
SPA_PRINTF_FUNC
(
3
4
)
;
int
pw_filter_update_params
(
struct
pw_filter
*
filter
void
*
port_data
const
struct
spa_pod
*
*
params
uint32_t
n_params
)
;
SPA_DEPRECATED
int
pw_filter_get_time
(
struct
pw_filter
*
filter
struct
pw_time
*
time
)
;
struct
pw_buffer
*
pw_filter_dequeue_buffer
(
void
*
port_data
)
;
int
pw_filter_queue_buffer
(
void
*
port_data
struct
pw_buffer
*
buffer
)
;
void
*
pw_filter_get_dsp_buffer
(
void
*
port_data
uint32_t
n_samples
)
;
int
pw_filter_set_active
(
struct
pw_filter
*
filter
bool
active
)
;
int
pw_filter_flush
(
struct
pw_filter
*
filter
bool
drain
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
