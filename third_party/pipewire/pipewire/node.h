#
ifndef
PIPEWIRE_NODE_H
#
define
PIPEWIRE_NODE_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
stdarg
.
h
>
#
include
<
errno
.
h
>
#
include
<
spa
/
utils
/
defs
.
h
>
#
include
<
spa
/
utils
/
hook
.
h
>
#
include
<
spa
/
node
/
command
.
h
>
#
include
<
spa
/
param
/
param
.
h
>
#
include
<
pipewire
/
proxy
.
h
>
#
define
PW_TYPE_INTERFACE_Node
PW_TYPE_INFO_INTERFACE_BASE
"
Node
"
#
define
PW_VERSION_NODE
3
struct
pw_node
;
enum
pw_node_state
{
PW_NODE_STATE_ERROR
=
-
1
PW_NODE_STATE_CREATING
=
0
PW_NODE_STATE_SUSPENDED
=
1
PW_NODE_STATE_IDLE
=
2
PW_NODE_STATE_RUNNING
=
3
}
;
const
char
*
pw_node_state_as_string
(
enum
pw_node_state
state
)
;
struct
pw_node_info
{
uint32_t
id
;
uint32_t
max_input_ports
;
uint32_t
max_output_ports
;
#
define
PW_NODE_CHANGE_MASK_INPUT_PORTS
(
1
<
<
0
)
#
define
PW_NODE_CHANGE_MASK_OUTPUT_PORTS
(
1
<
<
1
)
#
define
PW_NODE_CHANGE_MASK_STATE
(
1
<
<
2
)
#
define
PW_NODE_CHANGE_MASK_PROPS
(
1
<
<
3
)
#
define
PW_NODE_CHANGE_MASK_PARAMS
(
1
<
<
4
)
#
define
PW_NODE_CHANGE_MASK_ALL
(
(
1
<
<
5
)
-
1
)
uint64_t
change_mask
;
uint32_t
n_input_ports
;
uint32_t
n_output_ports
;
enum
pw_node_state
state
;
const
char
*
error
;
struct
spa_dict
*
props
;
struct
spa_param_info
*
params
;
uint32_t
n_params
;
}
;
struct
pw_node_info
*
pw_node_info_update
(
struct
pw_node_info
*
info
const
struct
pw_node_info
*
update
)
;
void
pw_node_info_free
(
struct
pw_node_info
*
info
)
;
#
define
PW_NODE_EVENT_INFO
0
#
define
PW_NODE_EVENT_PARAM
1
#
define
PW_NODE_EVENT_NUM
2
struct
pw_node_events
{
#
define
PW_VERSION_NODE_EVENTS
0
uint32_t
version
;
void
(
*
info
)
(
void
*
object
const
struct
pw_node_info
*
info
)
;
void
(
*
param
)
(
void
*
object
int
seq
uint32_t
id
uint32_t
index
uint32_t
next
const
struct
spa_pod
*
param
)
;
}
;
#
define
PW_NODE_METHOD_ADD_LISTENER
0
#
define
PW_NODE_METHOD_SUBSCRIBE_PARAMS
1
#
define
PW_NODE_METHOD_ENUM_PARAMS
2
#
define
PW_NODE_METHOD_SET_PARAM
3
#
define
PW_NODE_METHOD_SEND_COMMAND
4
#
define
PW_NODE_METHOD_NUM
5
struct
pw_node_methods
{
#
define
PW_VERSION_NODE_METHODS
0
uint32_t
version
;
int
(
*
add_listener
)
(
void
*
object
struct
spa_hook
*
listener
const
struct
pw_node_events
*
events
void
*
data
)
;
int
(
*
subscribe_params
)
(
void
*
object
uint32_t
*
ids
uint32_t
n_ids
)
;
int
(
*
enum_params
)
(
void
*
object
int
seq
uint32_t
id
uint32_t
start
uint32_t
num
const
struct
spa_pod
*
filter
)
;
int
(
*
set_param
)
(
void
*
object
uint32_t
id
uint32_t
flags
const
struct
spa_pod
*
param
)
;
int
(
*
send_command
)
(
void
*
object
const
struct
spa_command
*
command
)
;
}
;
#
define
pw_node_method
(
o
method
version
.
.
.
)
\
(
{
\
int
_res
=
-
ENOTSUP
;
\
spa_interface_call_res
(
(
struct
spa_interface
*
)
o
\
struct
pw_node_methods
_res
\
method
version
#
#
__VA_ARGS__
)
;
\
_res
;
\
}
)
#
define
pw_node_add_listener
(
c
.
.
.
)
pw_node_method
(
c
add_listener
0
__VA_ARGS__
)
#
define
pw_node_subscribe_params
(
c
.
.
.
)
pw_node_method
(
c
subscribe_params
0
__VA_ARGS__
)
#
define
pw_node_enum_params
(
c
.
.
.
)
pw_node_method
(
c
enum_params
0
__VA_ARGS__
)
#
define
pw_node_set_param
(
c
.
.
.
)
pw_node_method
(
c
set_param
0
__VA_ARGS__
)
#
define
pw_node_send_command
(
c
.
.
.
)
pw_node_method
(
c
send_command
0
__VA_ARGS__
)
#
ifdef
__cplusplus
}
#
endif
#
endif
