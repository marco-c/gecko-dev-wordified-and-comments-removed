#
ifndef
PIPEWIRE_LINK_H
#
define
PIPEWIRE_LINK_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
spa
/
utils
/
defs
.
h
>
#
include
<
spa
/
utils
/
hook
.
h
>
#
include
<
pipewire
/
proxy
.
h
>
#
define
PW_TYPE_INTERFACE_Link
PW_TYPE_INFO_INTERFACE_BASE
"
Link
"
#
define
PW_VERSION_LINK
3
struct
pw_link
;
enum
pw_link_state
{
PW_LINK_STATE_ERROR
=
-
2
PW_LINK_STATE_UNLINKED
=
-
1
PW_LINK_STATE_INIT
=
0
PW_LINK_STATE_NEGOTIATING
=
1
PW_LINK_STATE_ALLOCATING
=
2
PW_LINK_STATE_PAUSED
=
3
}
;
const
char
*
pw_link_state_as_string
(
enum
pw_link_state
state
)
;
struct
pw_link_info
{
uint32_t
id
;
uint32_t
output_node_id
;
uint32_t
output_port_id
;
uint32_t
input_node_id
;
uint32_t
input_port_id
;
#
define
PW_LINK_CHANGE_MASK_STATE
(
1
<
<
0
)
#
define
PW_LINK_CHANGE_MASK_FORMAT
(
1
<
<
1
)
#
define
PW_LINK_CHANGE_MASK_PROPS
(
1
<
<
2
)
#
define
PW_LINK_CHANGE_MASK_ALL
(
(
1
<
<
3
)
-
1
)
uint64_t
change_mask
;
enum
pw_link_state
state
;
const
char
*
error
;
struct
spa_pod
*
format
;
struct
spa_dict
*
props
;
}
;
struct
pw_link_info
*
pw_link_info_update
(
struct
pw_link_info
*
info
const
struct
pw_link_info
*
update
)
;
void
pw_link_info_free
(
struct
pw_link_info
*
info
)
;
#
define
PW_LINK_EVENT_INFO
0
#
define
PW_LINK_EVENT_NUM
1
struct
pw_link_events
{
#
define
PW_VERSION_LINK_EVENTS
0
uint32_t
version
;
void
(
*
info
)
(
void
*
object
const
struct
pw_link_info
*
info
)
;
}
;
#
define
PW_LINK_METHOD_ADD_LISTENER
0
#
define
PW_LINK_METHOD_NUM
1
struct
pw_link_methods
{
#
define
PW_VERSION_LINK_METHODS
0
uint32_t
version
;
int
(
*
add_listener
)
(
void
*
object
struct
spa_hook
*
listener
const
struct
pw_link_events
*
events
void
*
data
)
;
}
;
#
define
pw_link_method
(
o
method
version
.
.
.
)
\
(
{
\
int
_res
=
-
ENOTSUP
;
\
spa_interface_call_res
(
(
struct
spa_interface
*
)
o
\
struct
pw_link_methods
_res
\
method
version
#
#
__VA_ARGS__
)
;
\
_res
;
\
}
)
#
define
pw_link_add_listener
(
c
.
.
.
)
pw_link_method
(
c
add_listener
0
__VA_ARGS__
)
#
ifdef
__cplusplus
}
#
endif
#
endif
