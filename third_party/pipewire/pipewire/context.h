#
ifndef
PIPEWIRE_CONTEXT_H
#
define
PIPEWIRE_CONTEXT_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
spa
/
utils
/
defs
.
h
>
#
include
<
spa
/
utils
/
hook
.
h
>
struct
pw_context
;
struct
pw_global
;
struct
pw_impl_client
;
struct
pw_impl_node
;
#
include
<
pipewire
/
core
.
h
>
#
include
<
pipewire
/
loop
.
h
>
#
include
<
pipewire
/
properties
.
h
>
struct
pw_context_events
{
#
define
PW_VERSION_CONTEXT_EVENTS
1
uint32_t
version
;
void
(
*
destroy
)
(
void
*
data
)
;
void
(
*
free
)
(
void
*
data
)
;
void
(
*
check_access
)
(
void
*
data
struct
pw_impl_client
*
client
)
;
void
(
*
global_added
)
(
void
*
data
struct
pw_global
*
global
)
;
void
(
*
global_removed
)
(
void
*
data
struct
pw_global
*
global
)
;
void
(
*
driver_added
)
(
void
*
data
struct
pw_impl_node
*
node
)
;
void
(
*
driver_removed
)
(
void
*
data
struct
pw_impl_node
*
node
)
;
}
;
struct
pw_context
*
pw_context_new
(
struct
pw_loop
*
main_loop
struct
pw_properties
*
props
size_t
user_data_size
)
;
void
pw_context_destroy
(
struct
pw_context
*
context
)
;
void
*
pw_context_get_user_data
(
struct
pw_context
*
context
)
;
void
pw_context_add_listener
(
struct
pw_context
*
context
struct
spa_hook
*
listener
const
struct
pw_context_events
*
events
void
*
data
)
;
const
struct
pw_properties
*
pw_context_get_properties
(
struct
pw_context
*
context
)
;
int
pw_context_update_properties
(
struct
pw_context
*
context
const
struct
spa_dict
*
dict
)
;
const
char
*
pw_context_get_conf_section
(
struct
pw_context
*
context
const
char
*
section
)
;
int
pw_context_parse_conf_section
(
struct
pw_context
*
context
struct
pw_properties
*
conf
const
char
*
section
)
;
int
pw_context_conf_update_props
(
struct
pw_context
*
context
const
char
*
section
struct
pw_properties
*
props
)
;
int
pw_context_conf_section_for_each
(
struct
pw_context
*
context
const
char
*
section
int
(
*
callback
)
(
void
*
data
const
char
*
location
const
char
*
section
const
char
*
str
size_t
len
)
void
*
data
)
;
int
pw_context_conf_section_match_rules
(
struct
pw_context
*
context
const
char
*
section
const
struct
spa_dict
*
props
int
(
*
callback
)
(
void
*
data
const
char
*
location
const
char
*
action
const
char
*
str
size_t
len
)
void
*
data
)
;
const
struct
spa_support
*
pw_context_get_support
(
struct
pw_context
*
context
uint32_t
*
n_support
)
;
struct
pw_loop
*
pw_context_get_main_loop
(
struct
pw_context
*
context
)
;
struct
pw_data_loop
*
pw_context_get_data_loop
(
struct
pw_context
*
context
)
;
struct
pw_loop
*
pw_context_acquire_loop
(
struct
pw_context
*
context
const
struct
spa_dict
*
props
)
;
void
pw_context_release_loop
(
struct
pw_context
*
context
struct
pw_loop
*
loop
)
;
struct
pw_work_queue
*
pw_context_get_work_queue
(
struct
pw_context
*
context
)
;
struct
pw_mempool
*
pw_context_get_mempool
(
struct
pw_context
*
context
)
;
int
pw_context_for_each_global
(
struct
pw_context
*
context
int
(
*
callback
)
(
void
*
data
struct
pw_global
*
global
)
void
*
data
)
;
struct
pw_global
*
pw_context_find_global
(
struct
pw_context
*
context
uint32_t
id
)
;
int
pw_context_add_spa_lib
(
struct
pw_context
*
context
const
char
*
factory_regex
const
char
*
lib
)
;
const
char
*
pw_context_find_spa_lib
(
struct
pw_context
*
context
const
char
*
factory_name
)
;
struct
spa_handle
*
pw_context_load_spa_handle
(
struct
pw_context
*
context
const
char
*
factory_name
const
struct
spa_dict
*
info
)
;
struct
pw_export_type
{
struct
spa_list
link
;
const
char
*
type
;
struct
pw_proxy
*
(
*
func
)
(
struct
pw_core
*
core
const
char
*
type
const
struct
spa_dict
*
props
void
*
object
size_t
user_data_size
)
;
}
;
int
pw_context_register_export_type
(
struct
pw_context
*
context
struct
pw_export_type
*
type
)
;
const
struct
pw_export_type
*
pw_context_find_export_type
(
struct
pw_context
*
context
const
char
*
type
)
;
int
pw_context_set_object
(
struct
pw_context
*
context
const
char
*
type
void
*
value
)
;
void
*
pw_context_get_object
(
struct
pw_context
*
context
const
char
*
type
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
