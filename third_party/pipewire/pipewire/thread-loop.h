#
ifndef
PIPEWIRE_THREAD_LOOP_H
#
define
PIPEWIRE_THREAD_LOOP_H
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
<
pipewire
/
loop
.
h
>
struct
pw_thread_loop
;
struct
pw_thread_loop_events
{
#
define
PW_VERSION_THREAD_LOOP_EVENTS
0
uint32_t
version
;
void
(
*
destroy
)
(
void
*
data
)
;
}
;
struct
pw_thread_loop
*
pw_thread_loop_new
(
const
char
*
name
const
struct
spa_dict
*
props
)
;
struct
pw_thread_loop
*
pw_thread_loop_new_full
(
struct
pw_loop
*
loop
const
char
*
name
const
struct
spa_dict
*
props
)
;
void
pw_thread_loop_destroy
(
struct
pw_thread_loop
*
loop
)
;
void
pw_thread_loop_add_listener
(
struct
pw_thread_loop
*
loop
struct
spa_hook
*
listener
const
struct
pw_thread_loop_events
*
events
void
*
data
)
;
struct
pw_loop
*
pw_thread_loop_get_loop
(
struct
pw_thread_loop
*
loop
)
;
int
pw_thread_loop_start
(
struct
pw_thread_loop
*
loop
)
;
void
pw_thread_loop_stop
(
struct
pw_thread_loop
*
loop
)
;
void
pw_thread_loop_lock
(
struct
pw_thread_loop
*
loop
)
;
void
pw_thread_loop_unlock
(
struct
pw_thread_loop
*
loop
)
;
void
pw_thread_loop_wait
(
struct
pw_thread_loop
*
loop
)
;
int
pw_thread_loop_timed_wait
(
struct
pw_thread_loop
*
loop
int
wait_max_sec
)
;
int
pw_thread_loop_get_time
(
struct
pw_thread_loop
*
loop
struct
timespec
*
abstime
int64_t
timeout
)
;
int
pw_thread_loop_timed_wait_full
(
struct
pw_thread_loop
*
loop
struct
timespec
*
abstime
)
;
void
pw_thread_loop_signal
(
struct
pw_thread_loop
*
loop
bool
wait_for_accept
)
;
void
pw_thread_loop_accept
(
struct
pw_thread_loop
*
loop
)
;
bool
pw_thread_loop_in_thread
(
struct
pw_thread_loop
*
loop
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
