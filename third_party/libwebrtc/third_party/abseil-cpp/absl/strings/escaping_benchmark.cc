#
include
"
absl
/
strings
/
escaping
.
h
"
#
include
<
cstdint
>
#
include
<
cstdio
>
#
include
<
cstring
>
#
include
<
memory
>
#
include
<
random
>
#
include
<
string
>
#
include
"
benchmark
/
benchmark
.
h
"
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
strings
/
internal
/
escaping_test_common
.
h
"
#
include
"
absl
/
strings
/
str_cat
.
h
"
namespace
{
void
BM_CUnescapeHexString
(
benchmark
:
:
State
&
state
)
{
std
:
:
string
src
;
for
(
int
i
=
0
;
i
<
50
;
i
+
+
)
{
src
+
=
"
\
\
x55
"
;
}
std
:
:
string
dest
;
for
(
auto
_
:
state
)
{
absl
:
:
CUnescape
(
src
&
dest
)
;
}
}
BENCHMARK
(
BM_CUnescapeHexString
)
;
void
BM_WebSafeBase64Escape_string
(
benchmark
:
:
State
&
state
)
{
std
:
:
string
raw
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
for
(
const
auto
&
test_set
:
absl
:
:
strings_internal
:
:
base64_strings
(
)
)
{
raw
+
=
std
:
:
string
(
test_set
.
plaintext
)
;
}
}
std
:
:
string
escaped
;
for
(
auto
_
:
state
)
{
absl
:
:
WebSafeBase64Escape
(
raw
&
escaped
)
;
}
std
:
:
string
round_trip
;
absl
:
:
WebSafeBase64Unescape
(
escaped
&
round_trip
)
;
ABSL_RAW_CHECK
(
round_trip
=
=
raw
"
"
)
;
}
BENCHMARK
(
BM_WebSafeBase64Escape_string
)
;
const
char
kStringValueNoEscape
[
]
=
"
1234567890
"
;
const
char
kStringValueSomeEscaped
[
]
=
"
123
\
n56789
\
xA1
"
;
const
char
kStringValueMostEscaped
[
]
=
"
\
xA1
\
xA2
\
ny
\
xA4
\
xA5
\
xA6z
\
b
\
r
"
;
void
CEscapeBenchmarkHelper
(
benchmark
:
:
State
&
state
const
char
*
string_value
int
max_len
)
{
std
:
:
string
src
;
while
(
src
.
size
(
)
<
max_len
)
{
absl
:
:
StrAppend
(
&
src
string_value
)
;
}
for
(
auto
_
:
state
)
{
absl
:
:
CEscape
(
src
)
;
}
}
void
BM_CEscape_NoEscape
(
benchmark
:
:
State
&
state
)
{
CEscapeBenchmarkHelper
(
state
kStringValueNoEscape
state
.
range
(
0
)
)
;
}
BENCHMARK
(
BM_CEscape_NoEscape
)
-
>
Range
(
1
1
<
<
14
)
;
void
BM_CEscape_SomeEscaped
(
benchmark
:
:
State
&
state
)
{
CEscapeBenchmarkHelper
(
state
kStringValueSomeEscaped
state
.
range
(
0
)
)
;
}
BENCHMARK
(
BM_CEscape_SomeEscaped
)
-
>
Range
(
1
1
<
<
14
)
;
void
BM_CEscape_MostEscaped
(
benchmark
:
:
State
&
state
)
{
CEscapeBenchmarkHelper
(
state
kStringValueMostEscaped
state
.
range
(
0
)
)
;
}
BENCHMARK
(
BM_CEscape_MostEscaped
)
-
>
Range
(
1
1
<
<
14
)
;
}
