#
include
"
absl
/
strings
/
internal
/
cord_rep_consume
.
h
"
#
include
<
array
>
#
include
<
utility
>
#
include
"
absl
/
container
/
inlined_vector
.
h
"
#
include
"
absl
/
functional
/
function_ref
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_internal
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
cord_internal
{
namespace
{
CordRep
*
ClipSubstring
(
CordRepSubstring
*
substring
)
{
CordRep
*
child
=
substring
-
>
child
;
if
(
substring
-
>
refcount
.
IsOne
(
)
)
{
delete
substring
;
}
else
{
CordRep
:
:
Ref
(
child
)
;
CordRep
:
:
Unref
(
substring
)
;
}
return
child
;
}
}
void
Consume
(
CordRep
*
rep
ConsumeFn
consume_fn
)
{
size_t
offset
=
0
;
size_t
length
=
rep
-
>
length
;
if
(
rep
-
>
tag
=
=
SUBSTRING
)
{
offset
+
=
rep
-
>
substring
(
)
-
>
start
;
rep
=
ClipSubstring
(
rep
-
>
substring
(
)
)
;
}
consume_fn
(
rep
offset
length
)
;
}
void
ReverseConsume
(
CordRep
*
rep
ConsumeFn
consume_fn
)
{
return
Consume
(
rep
std
:
:
move
(
consume_fn
)
)
;
}
}
ABSL_NAMESPACE_END
}
