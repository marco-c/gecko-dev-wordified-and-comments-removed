#
include
"
absl
/
strings
/
internal
/
cord_rep_crc
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_internal
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_test_util
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
cord_internal
{
namespace
{
using
:
:
absl
:
:
cordrep_testing
:
:
MakeFlat
;
using
:
:
testing
:
:
Eq
;
using
:
:
testing
:
:
Ne
;
#
if
!
defined
(
NDEBUG
)
&
&
GTEST_HAS_DEATH_TEST
TEST
(
CordRepCrc
NewWithNullPtr
)
{
EXPECT_DEATH
(
CordRepCrc
:
:
New
(
nullptr
0
)
"
"
)
;
}
TEST
(
CordRepCrc
RemoveCrcWithNullptr
)
{
EXPECT_DEATH
(
RemoveCrcNode
(
nullptr
)
"
"
)
;
}
#
endif
TEST
(
CordRepCrc
NewDestroy
)
{
CordRep
*
rep
=
cordrep_testing
:
:
MakeFlat
(
"
Hello
world
"
)
;
CordRepCrc
*
crc
=
CordRepCrc
:
:
New
(
rep
12345
)
;
EXPECT_TRUE
(
crc
-
>
refcount
.
IsOne
(
)
)
;
EXPECT_THAT
(
crc
-
>
child
Eq
(
rep
)
)
;
EXPECT_THAT
(
crc
-
>
crc
Eq
(
12345
)
)
;
EXPECT_TRUE
(
rep
-
>
refcount
.
IsOne
(
)
)
;
CordRepCrc
:
:
Destroy
(
crc
)
;
}
TEST
(
CordRepCrc
NewExistingCrcNotShared
)
{
CordRep
*
rep
=
cordrep_testing
:
:
MakeFlat
(
"
Hello
world
"
)
;
CordRepCrc
*
crc
=
CordRepCrc
:
:
New
(
rep
12345
)
;
CordRepCrc
*
new_crc
=
CordRepCrc
:
:
New
(
crc
54321
)
;
EXPECT_THAT
(
new_crc
Eq
(
crc
)
)
;
EXPECT_TRUE
(
new_crc
-
>
refcount
.
IsOne
(
)
)
;
EXPECT_THAT
(
new_crc
-
>
child
Eq
(
rep
)
)
;
EXPECT_THAT
(
new_crc
-
>
crc
Eq
(
54321
)
)
;
EXPECT_TRUE
(
rep
-
>
refcount
.
IsOne
(
)
)
;
CordRepCrc
:
:
Destroy
(
new_crc
)
;
}
TEST
(
CordRepCrc
NewExistingCrcShared
)
{
CordRep
*
rep
=
cordrep_testing
:
:
MakeFlat
(
"
Hello
world
"
)
;
CordRepCrc
*
crc
=
CordRepCrc
:
:
New
(
rep
12345
)
;
CordRep
:
:
Ref
(
crc
)
;
CordRepCrc
*
new_crc
=
CordRepCrc
:
:
New
(
crc
54321
)
;
EXPECT_THAT
(
new_crc
Ne
(
crc
)
)
;
EXPECT_TRUE
(
new_crc
-
>
refcount
.
IsOne
(
)
)
;
EXPECT_TRUE
(
crc
-
>
refcount
.
IsOne
(
)
)
;
EXPECT_FALSE
(
rep
-
>
refcount
.
IsOne
(
)
)
;
EXPECT_THAT
(
crc
-
>
child
Eq
(
rep
)
)
;
EXPECT_THAT
(
new_crc
-
>
child
Eq
(
rep
)
)
;
EXPECT_THAT
(
crc
-
>
crc
Eq
(
12345
)
)
;
EXPECT_THAT
(
new_crc
-
>
crc
Eq
(
54321
)
)
;
CordRep
:
:
Unref
(
crc
)
;
CordRep
:
:
Unref
(
new_crc
)
;
}
TEST
(
CordRepCrc
RemoveCrcNotCrc
)
{
CordRep
*
rep
=
cordrep_testing
:
:
MakeFlat
(
"
Hello
world
"
)
;
CordRep
*
nocrc
=
RemoveCrcNode
(
rep
)
;
EXPECT_THAT
(
nocrc
Eq
(
rep
)
)
;
CordRep
:
:
Unref
(
nocrc
)
;
}
TEST
(
CordRepCrc
RemoveCrcNotShared
)
{
CordRep
*
rep
=
cordrep_testing
:
:
MakeFlat
(
"
Hello
world
"
)
;
CordRepCrc
*
crc
=
CordRepCrc
:
:
New
(
rep
12345
)
;
CordRep
*
nocrc
=
RemoveCrcNode
(
crc
)
;
EXPECT_THAT
(
nocrc
Eq
(
rep
)
)
;
EXPECT_TRUE
(
rep
-
>
refcount
.
IsOne
(
)
)
;
CordRep
:
:
Unref
(
nocrc
)
;
}
TEST
(
CordRepCrc
RemoveCrcShared
)
{
CordRep
*
rep
=
cordrep_testing
:
:
MakeFlat
(
"
Hello
world
"
)
;
CordRepCrc
*
crc
=
CordRepCrc
:
:
New
(
rep
12345
)
;
CordRep
:
:
Ref
(
crc
)
;
CordRep
*
nocrc
=
RemoveCrcNode
(
crc
)
;
EXPECT_THAT
(
nocrc
Eq
(
rep
)
)
;
EXPECT_FALSE
(
rep
-
>
refcount
.
IsOne
(
)
)
;
CordRep
:
:
Unref
(
nocrc
)
;
CordRep
:
:
Unref
(
crc
)
;
}
}
}
ABSL_NAMESPACE_END
}
