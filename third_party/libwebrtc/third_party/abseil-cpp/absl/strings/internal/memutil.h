#
ifndef
ABSL_STRINGS_INTERNAL_MEMUTIL_H_
#
define
ABSL_STRINGS_INTERNAL_MEMUTIL_H_
#
include
<
cstddef
>
#
include
<
cstring
>
#
include
"
absl
/
base
/
port
.
h
"
#
include
"
absl
/
strings
/
ascii
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
strings_internal
{
inline
char
*
memcat
(
char
*
dest
size_t
destlen
const
char
*
src
size_t
srclen
)
{
return
reinterpret_cast
<
char
*
>
(
memcpy
(
dest
+
destlen
src
srclen
)
)
;
}
int
memcasecmp
(
const
char
*
s1
const
char
*
s2
size_t
len
)
;
char
*
memdup
(
const
char
*
s
size_t
slen
)
;
char
*
memrchr
(
const
char
*
s
int
c
size_t
slen
)
;
size_t
memspn
(
const
char
*
s
size_t
slen
const
char
*
accept
)
;
size_t
memcspn
(
const
char
*
s
size_t
slen
const
char
*
reject
)
;
char
*
mempbrk
(
const
char
*
s
size_t
slen
const
char
*
accept
)
;
template
<
bool
case_sensitive
>
const
char
*
int_memmatch
(
const
char
*
haystack
size_t
haylen
const
char
*
needle
size_t
neelen
)
{
if
(
0
=
=
neelen
)
{
return
haystack
;
}
const
char
*
hayend
=
haystack
+
haylen
;
const
char
*
needlestart
=
needle
;
const
char
*
needleend
=
needlestart
+
neelen
;
for
(
;
haystack
<
hayend
;
+
+
haystack
)
{
char
hay
=
case_sensitive
?
*
haystack
:
absl
:
:
ascii_tolower
(
static_cast
<
unsigned
char
>
(
*
haystack
)
)
;
char
nee
=
case_sensitive
?
*
needle
:
absl
:
:
ascii_tolower
(
static_cast
<
unsigned
char
>
(
*
needle
)
)
;
if
(
hay
=
=
nee
)
{
if
(
+
+
needle
=
=
needleend
)
{
return
haystack
+
1
-
neelen
;
}
}
else
if
(
needle
!
=
needlestart
)
{
haystack
-
=
needle
-
needlestart
;
needle
=
needlestart
;
}
}
return
nullptr
;
}
inline
const
char
*
memstr
(
const
char
*
phaystack
size_t
haylen
const
char
*
pneedle
)
{
return
int_memmatch
<
true
>
(
phaystack
haylen
pneedle
strlen
(
pneedle
)
)
;
}
inline
const
char
*
memcasestr
(
const
char
*
phaystack
size_t
haylen
const
char
*
pneedle
)
{
return
int_memmatch
<
false
>
(
phaystack
haylen
pneedle
strlen
(
pneedle
)
)
;
}
inline
const
char
*
memmem
(
const
char
*
phaystack
size_t
haylen
const
char
*
pneedle
size_t
needlelen
)
{
return
int_memmatch
<
true
>
(
phaystack
haylen
pneedle
needlelen
)
;
}
inline
const
char
*
memcasemem
(
const
char
*
phaystack
size_t
haylen
const
char
*
pneedle
size_t
needlelen
)
{
return
int_memmatch
<
false
>
(
phaystack
haylen
pneedle
needlelen
)
;
}
const
char
*
memmatch
(
const
char
*
phaystack
size_t
haylen
const
char
*
pneedle
size_t
neelen
)
;
}
ABSL_NAMESPACE_END
}
#
endif
