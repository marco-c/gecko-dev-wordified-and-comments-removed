#
ifndef
ABSL_STRINGS_INTERNAL_CORD_REP_FLAT_H_
#
define
ABSL_STRINGS_INTERNAL_CORD_REP_FLAT_H_
#
include
<
cassert
>
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
"
absl
/
strings
/
internal
/
cord_internal
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
cord_internal
{
static
constexpr
size_t
kFlatOverhead
=
offsetof
(
CordRep
storage
)
;
static
constexpr
size_t
kMinFlatSize
=
32
;
static
constexpr
size_t
kMaxFlatSize
=
4096
;
static
constexpr
size_t
kMaxFlatLength
=
kMaxFlatSize
-
kFlatOverhead
;
static
constexpr
size_t
kMinFlatLength
=
kMinFlatSize
-
kFlatOverhead
;
constexpr
uint8_t
AllocatedSizeToTagUnchecked
(
size_t
size
)
{
return
static_cast
<
uint8_t
>
(
(
size
<
=
1024
)
?
size
/
8
+
1
:
129
+
size
/
32
-
1024
/
32
)
;
}
static_assert
(
kMinFlatSize
/
8
+
1
>
=
FLAT
"
"
)
;
static_assert
(
AllocatedSizeToTagUnchecked
(
kMaxFlatSize
)
<
=
MAX_FLAT_TAG
"
"
)
;
constexpr
size_t
DivUp
(
size_t
n
size_t
m
)
{
return
(
n
+
m
-
1
)
/
m
;
}
constexpr
size_t
RoundUp
(
size_t
n
size_t
m
)
{
return
DivUp
(
n
m
)
*
m
;
}
inline
size_t
RoundUpForTag
(
size_t
size
)
{
return
RoundUp
(
size
(
size
<
=
1024
)
?
8
:
32
)
;
}
inline
uint8_t
AllocatedSizeToTag
(
size_t
size
)
{
const
uint8_t
tag
=
AllocatedSizeToTagUnchecked
(
size
)
;
assert
(
tag
<
=
MAX_FLAT_TAG
)
;
return
tag
;
}
constexpr
size_t
TagToAllocatedSize
(
uint8_t
tag
)
{
return
(
tag
<
=
129
)
?
(
(
tag
-
1
)
*
8
)
:
(
1024
+
(
tag
-
129
)
*
32
)
;
}
constexpr
size_t
TagToLength
(
uint8_t
tag
)
{
return
TagToAllocatedSize
(
tag
)
-
kFlatOverhead
;
}
static_assert
(
TagToAllocatedSize
(
225
)
=
=
kMaxFlatSize
"
Bad
tag
logic
"
)
;
struct
CordRepFlat
:
public
CordRep
{
static
CordRepFlat
*
New
(
size_t
len
)
{
if
(
len
<
=
kMinFlatLength
)
{
len
=
kMinFlatLength
;
}
else
if
(
len
>
kMaxFlatLength
)
{
len
=
kMaxFlatLength
;
}
const
size_t
size
=
RoundUpForTag
(
len
+
kFlatOverhead
)
;
void
*
const
raw_rep
=
:
:
operator
new
(
size
)
;
CordRepFlat
*
rep
=
new
(
raw_rep
)
CordRepFlat
(
)
;
rep
-
>
tag
=
AllocatedSizeToTag
(
size
)
;
return
rep
;
}
static
void
Delete
(
CordRep
*
rep
)
{
assert
(
rep
-
>
tag
>
=
FLAT
&
&
rep
-
>
tag
<
=
MAX_FLAT_TAG
)
;
#
if
defined
(
__cpp_sized_deallocation
)
size_t
size
=
TagToAllocatedSize
(
rep
-
>
tag
)
;
rep
-
>
~
CordRep
(
)
;
:
:
operator
delete
(
rep
size
)
;
#
else
rep
-
>
~
CordRep
(
)
;
:
:
operator
delete
(
rep
)
;
#
endif
}
char
*
Data
(
)
{
return
reinterpret_cast
<
char
*
>
(
storage
)
;
}
const
char
*
Data
(
)
const
{
return
reinterpret_cast
<
const
char
*
>
(
storage
)
;
}
size_t
Capacity
(
)
const
{
return
TagToLength
(
tag
)
;
}
size_t
AllocatedSize
(
)
const
{
return
TagToAllocatedSize
(
tag
)
;
}
}
;
inline
CordRepFlat
*
CordRep
:
:
flat
(
)
{
assert
(
tag
>
=
FLAT
&
&
tag
<
=
MAX_FLAT_TAG
)
;
return
reinterpret_cast
<
CordRepFlat
*
>
(
this
)
;
}
inline
const
CordRepFlat
*
CordRep
:
:
flat
(
)
const
{
assert
(
tag
>
=
FLAT
&
&
tag
<
=
MAX_FLAT_TAG
)
;
return
reinterpret_cast
<
const
CordRepFlat
*
>
(
this
)
;
}
}
ABSL_NAMESPACE_END
}
#
endif
