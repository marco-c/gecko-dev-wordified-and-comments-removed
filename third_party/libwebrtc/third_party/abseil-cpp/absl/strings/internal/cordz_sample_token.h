#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
strings
/
internal
/
cordz_handle
.
h
"
#
include
"
absl
/
strings
/
internal
/
cordz_info
.
h
"
#
ifndef
ABSL_STRINGS_CORDZ_SAMPLE_TOKEN_H_
#
define
ABSL_STRINGS_CORDZ_SAMPLE_TOKEN_H_
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
cord_internal
{
class
CordzSampleToken
:
public
CordzSnapshot
{
public
:
class
Iterator
{
public
:
using
iterator_category
=
std
:
:
input_iterator_tag
;
using
value_type
=
const
CordzInfo
&
;
using
difference_type
=
ptrdiff_t
;
using
pointer
=
const
CordzInfo
*
;
using
reference
=
value_type
;
Iterator
(
)
=
default
;
Iterator
&
operator
+
+
(
)
;
Iterator
operator
+
+
(
int
)
;
friend
bool
operator
=
=
(
const
Iterator
&
lhs
const
Iterator
&
rhs
)
;
friend
bool
operator
!
=
(
const
Iterator
&
lhs
const
Iterator
&
rhs
)
;
reference
operator
*
(
)
const
;
pointer
operator
-
>
(
)
const
;
private
:
friend
class
CordzSampleToken
;
explicit
Iterator
(
const
CordzSampleToken
*
token
)
;
const
CordzSampleToken
*
token_
=
nullptr
;
pointer
current_
=
nullptr
;
}
;
CordzSampleToken
(
)
=
default
;
CordzSampleToken
(
const
CordzSampleToken
&
)
=
delete
;
CordzSampleToken
&
operator
=
(
const
CordzSampleToken
&
)
=
delete
;
Iterator
begin
(
)
{
return
Iterator
(
this
)
;
}
Iterator
end
(
)
{
return
Iterator
(
)
;
}
}
;
}
ABSL_NAMESPACE_END
}
#
endif
