#
include
"
absl
/
strings
/
internal
/
resize_uninitialized
.
h
"
#
include
"
gtest
/
gtest
.
h
"
namespace
{
int
resize_call_count
=
0
;
struct
resizable_string
{
size_t
size
(
)
const
{
return
0
;
}
char
&
operator
[
]
(
size_t
)
{
static
char
c
=
'
\
0
'
;
return
c
;
}
void
resize
(
size_t
)
{
resize_call_count
+
=
1
;
}
}
;
int
resize_default_init_call_count
=
0
;
struct
resize_default_init_string
{
size_t
size
(
)
const
{
return
0
;
}
char
&
operator
[
]
(
size_t
)
{
static
char
c
=
'
\
0
'
;
return
c
;
}
void
resize
(
size_t
)
{
resize_call_count
+
=
1
;
}
void
__resize_default_init
(
size_t
)
{
resize_default_init_call_count
+
=
1
;
}
}
;
TEST
(
ResizeUninit
WithAndWithout
)
{
resize_call_count
=
0
;
resize_default_init_call_count
=
0
;
{
resizable_string
rs
;
EXPECT_EQ
(
resize_call_count
0
)
;
EXPECT_EQ
(
resize_default_init_call_count
0
)
;
EXPECT_FALSE
(
absl
:
:
strings_internal
:
:
STLStringSupportsNontrashingResize
(
&
rs
)
)
;
EXPECT_EQ
(
resize_call_count
0
)
;
EXPECT_EQ
(
resize_default_init_call_count
0
)
;
absl
:
:
strings_internal
:
:
STLStringResizeUninitialized
(
&
rs
237
)
;
EXPECT_EQ
(
resize_call_count
1
)
;
EXPECT_EQ
(
resize_default_init_call_count
0
)
;
}
resize_call_count
=
0
;
resize_default_init_call_count
=
0
;
{
resize_default_init_string
rus
;
EXPECT_EQ
(
resize_call_count
0
)
;
EXPECT_EQ
(
resize_default_init_call_count
0
)
;
EXPECT_TRUE
(
absl
:
:
strings_internal
:
:
STLStringSupportsNontrashingResize
(
&
rus
)
)
;
EXPECT_EQ
(
resize_call_count
0
)
;
EXPECT_EQ
(
resize_default_init_call_count
0
)
;
absl
:
:
strings_internal
:
:
STLStringResizeUninitialized
(
&
rus
237
)
;
EXPECT_EQ
(
resize_call_count
0
)
;
EXPECT_EQ
(
resize_default_init_call_count
1
)
;
}
}
}
