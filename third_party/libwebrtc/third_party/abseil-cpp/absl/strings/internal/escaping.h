#
ifndef
ABSL_STRINGS_INTERNAL_ESCAPING_H_
#
define
ABSL_STRINGS_INTERNAL_ESCAPING_H_
#
include
<
cassert
>
#
include
"
absl
/
strings
/
internal
/
resize_uninitialized
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
strings_internal
{
ABSL_CONST_INIT
extern
const
char
kBase64Chars
[
]
;
size_t
CalculateBase64EscapedLenInternal
(
size_t
input_len
bool
do_padding
)
;
size_t
Base64EscapeInternal
(
const
unsigned
char
*
src
size_t
szsrc
char
*
dest
size_t
szdest
const
char
*
base64
bool
do_padding
)
;
template
<
typename
String
>
void
Base64EscapeInternal
(
const
unsigned
char
*
src
size_t
szsrc
String
*
dest
bool
do_padding
const
char
*
base64_chars
)
{
const
size_t
calc_escaped_size
=
CalculateBase64EscapedLenInternal
(
szsrc
do_padding
)
;
STLStringResizeUninitialized
(
dest
calc_escaped_size
)
;
const
size_t
escaped_len
=
Base64EscapeInternal
(
src
szsrc
&
(
*
dest
)
[
0
]
dest
-
>
size
(
)
base64_chars
do_padding
)
;
assert
(
calc_escaped_size
=
=
escaped_len
)
;
dest
-
>
erase
(
escaped_len
)
;
}
}
ABSL_NAMESPACE_END
}
#
endif
