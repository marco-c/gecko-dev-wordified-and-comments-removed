#
ifndef
ABSL_STRINGS_INTERNAL_CORD_DATA_EDGE_H_
#
define
ABSL_STRINGS_INTERNAL_CORD_DATA_EDGE_H_
#
include
<
cassert
>
#
include
<
cstddef
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_internal
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_flat
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
cord_internal
{
inline
bool
IsDataEdge
(
const
CordRep
*
edge
)
{
assert
(
edge
!
=
nullptr
)
;
if
(
edge
-
>
tag
=
=
EXTERNAL
|
|
edge
-
>
tag
>
=
FLAT
)
return
true
;
if
(
edge
-
>
tag
=
=
SUBSTRING
)
edge
=
edge
-
>
substring
(
)
-
>
child
;
return
edge
-
>
tag
=
=
EXTERNAL
|
|
edge
-
>
tag
>
=
FLAT
;
}
inline
absl
:
:
string_view
EdgeData
(
const
CordRep
*
edge
)
{
assert
(
IsDataEdge
(
edge
)
)
;
size_t
offset
=
0
;
const
size_t
length
=
edge
-
>
length
;
if
(
edge
-
>
IsSubstring
(
)
)
{
offset
=
edge
-
>
substring
(
)
-
>
start
;
edge
=
edge
-
>
substring
(
)
-
>
child
;
}
return
edge
-
>
tag
>
=
FLAT
?
absl
:
:
string_view
{
edge
-
>
flat
(
)
-
>
Data
(
)
+
offset
length
}
:
absl
:
:
string_view
{
edge
-
>
external
(
)
-
>
base
+
offset
length
}
;
}
}
ABSL_NAMESPACE_END
}
#
endif
