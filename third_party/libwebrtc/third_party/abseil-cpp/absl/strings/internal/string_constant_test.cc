#
include
"
absl
/
strings
/
internal
/
string_constant
.
h
"
#
include
"
absl
/
meta
/
type_traits
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
namespace
{
using
absl
:
:
strings_internal
:
:
MakeStringConstant
;
struct
Callable
{
constexpr
absl
:
:
string_view
operator
(
)
(
)
const
{
return
absl
:
:
string_view
(
"
Callable
"
8
)
;
}
}
;
TEST
(
StringConstant
Traits
)
{
constexpr
auto
str
=
MakeStringConstant
(
Callable
{
}
)
;
using
T
=
decltype
(
str
)
;
EXPECT_TRUE
(
std
:
:
is_empty
<
T
>
:
:
value
)
;
EXPECT_TRUE
(
std
:
:
is_trivial
<
T
>
:
:
value
)
;
EXPECT_TRUE
(
absl
:
:
is_trivially_default_constructible
<
T
>
:
:
value
)
;
EXPECT_TRUE
(
absl
:
:
is_trivially_copy_constructible
<
T
>
:
:
value
)
;
EXPECT_TRUE
(
absl
:
:
is_trivially_move_constructible
<
T
>
:
:
value
)
;
EXPECT_TRUE
(
absl
:
:
is_trivially_destructible
<
T
>
:
:
value
)
;
}
TEST
(
StringConstant
MakeFromCallable
)
{
constexpr
auto
str
=
MakeStringConstant
(
Callable
{
}
)
;
using
T
=
decltype
(
str
)
;
EXPECT_EQ
(
Callable
{
}
(
)
T
:
:
value
)
;
EXPECT_EQ
(
Callable
{
}
(
)
str
(
)
)
;
}
TEST
(
StringConstant
MakeFromStringConstant
)
{
constexpr
auto
str
=
MakeStringConstant
(
Callable
{
}
)
;
constexpr
auto
str2
=
MakeStringConstant
(
str
)
;
using
T
=
decltype
(
str2
)
;
EXPECT_EQ
(
Callable
{
}
(
)
T
:
:
value
)
;
EXPECT_EQ
(
Callable
{
}
(
)
str2
(
)
)
;
}
}
