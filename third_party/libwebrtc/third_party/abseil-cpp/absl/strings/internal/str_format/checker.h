#
ifndef
ABSL_STRINGS_INTERNAL_STR_FORMAT_CHECKER_H_
#
define
ABSL_STRINGS_INTERNAL_STR_FORMAT_CHECKER_H_
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
strings
/
internal
/
str_format
/
arg
.
h
"
#
include
"
absl
/
strings
/
internal
/
str_format
/
extension
.
h
"
#
ifndef
ABSL_INTERNAL_ENABLE_FORMAT_CHECKER
#
if
ABSL_HAVE_ATTRIBUTE
(
enable_if
)
&
&
!
defined
(
__native_client__
)
&
&
\
!
defined
(
__INTELLISENSE__
)
#
define
ABSL_INTERNAL_ENABLE_FORMAT_CHECKER
1
#
endif
#
endif
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
str_format_internal
{
constexpr
bool
AllOf
(
)
{
return
true
;
}
template
<
typename
.
.
.
T
>
constexpr
bool
AllOf
(
bool
b
T
.
.
.
t
)
{
return
b
&
&
AllOf
(
t
.
.
.
)
;
}
#
ifdef
ABSL_INTERNAL_ENABLE_FORMAT_CHECKER
constexpr
bool
ContainsChar
(
const
char
*
chars
char
c
)
{
return
*
chars
=
=
c
|
|
(
*
chars
&
&
ContainsChar
(
chars
+
1
c
)
)
;
}
struct
ConvList
{
const
FormatConversionCharSet
*
array
;
int
count
;
constexpr
FormatConversionCharSet
operator
[
]
(
int
i
)
const
{
return
i
<
count
?
array
[
i
]
:
FormatConversionCharSet
{
}
;
}
constexpr
ConvList
without_front
(
)
const
{
return
count
!
=
0
?
ConvList
{
array
+
1
count
-
1
}
:
*
this
;
}
}
;
template
<
size_t
count
>
struct
ConvListT
{
FormatConversionCharSet
list
[
count
?
count
:
1
]
;
}
;
constexpr
char
GetChar
(
string_view
str
size_t
index
)
{
return
index
<
str
.
size
(
)
?
str
[
index
]
:
char
{
}
;
}
constexpr
string_view
ConsumeFront
(
string_view
str
size_t
len
=
1
)
{
return
len
<
=
str
.
size
(
)
?
string_view
(
str
.
data
(
)
+
len
str
.
size
(
)
-
len
)
:
string_view
(
)
;
}
constexpr
string_view
ConsumeAnyOf
(
string_view
format
const
char
*
chars
)
{
return
ContainsChar
(
chars
GetChar
(
format
0
)
)
?
ConsumeAnyOf
(
ConsumeFront
(
format
)
chars
)
:
format
;
}
constexpr
bool
IsDigit
(
char
c
)
{
return
c
>
=
'
0
'
&
&
c
<
=
'
9
'
;
}
struct
Integer
{
string_view
format
;
int
value
;
constexpr
Integer
ConsumePositionalDollar
(
)
const
{
return
GetChar
(
format
0
)
=
=
'
'
?
Integer
{
ConsumeFront
(
format
)
value
}
:
Integer
{
format
0
}
;
}
}
;
constexpr
Integer
ParseDigits
(
string_view
format
int
value
=
0
)
{
return
IsDigit
(
GetChar
(
format
0
)
)
?
ParseDigits
(
ConsumeFront
(
format
)
10
*
value
+
GetChar
(
format
0
)
-
'
0
'
)
:
Integer
{
format
value
}
;
}
constexpr
Integer
ParsePositional
(
string_view
format
)
{
return
ParseDigits
(
format
)
.
ConsumePositionalDollar
(
)
;
}
class
ConvParser
{
constexpr
ConvParser
SetFormat
(
string_view
format
)
const
{
return
ConvParser
(
format
args_
error_
arg_position_
is_positional_
)
;
}
constexpr
ConvParser
SetArgs
(
ConvList
args
)
const
{
return
ConvParser
(
format_
args
error_
arg_position_
is_positional_
)
;
}
constexpr
ConvParser
SetError
(
bool
error
)
const
{
return
ConvParser
(
format_
args_
error_
|
|
error
arg_position_
is_positional_
)
;
}
constexpr
ConvParser
SetArgPosition
(
int
arg_position
)
const
{
return
ConvParser
(
format_
args_
error_
arg_position
is_positional_
)
;
}
constexpr
ConvParser
ConsumeNextArg
(
char
conv
)
const
{
return
SetArgs
(
args_
.
without_front
(
)
)
.
SetError
(
!
Contains
(
args_
[
0
]
conv
)
)
;
}
constexpr
ConvParser
VerifyPositional
(
Integer
i
char
conv
)
const
{
return
SetFormat
(
i
.
format
)
.
SetError
(
!
Contains
(
args_
[
i
.
value
-
1
]
conv
)
)
;
}
constexpr
ConvParser
ParseArgPosition
(
Integer
arg
)
const
{
return
SetFormat
(
arg
.
format
)
.
SetArgPosition
(
arg
.
value
)
;
}
constexpr
ConvParser
ParseFlags
(
)
const
{
return
SetFormat
(
ConsumeAnyOf
(
format_
"
-
+
#
0
"
)
)
;
}
constexpr
ConvParser
ParseWidth
(
)
const
{
return
IsDigit
(
GetChar
(
format_
0
)
)
?
SetFormat
(
ParseDigits
(
format_
)
.
format
)
:
GetChar
(
format_
0
)
=
=
'
*
'
?
is_positional_
?
VerifyPositional
(
ParsePositional
(
ConsumeFront
(
format_
)
)
'
*
'
)
:
SetFormat
(
ConsumeFront
(
format_
)
)
.
ConsumeNextArg
(
'
*
'
)
:
*
this
;
}
constexpr
ConvParser
ParsePrecision
(
)
const
{
return
GetChar
(
format_
0
)
!
=
'
.
'
?
*
this
:
GetChar
(
format_
1
)
=
=
'
*
'
?
is_positional_
?
VerifyPositional
(
ParsePositional
(
ConsumeFront
(
format_
2
)
)
'
*
'
)
:
SetFormat
(
ConsumeFront
(
format_
2
)
)
.
ConsumeNextArg
(
'
*
'
)
:
SetFormat
(
ParseDigits
(
ConsumeFront
(
format_
)
)
.
format
)
;
}
constexpr
ConvParser
ParseLength
(
)
const
{
return
SetFormat
(
ConsumeAnyOf
(
format_
"
lLhjztq
"
)
)
;
}
constexpr
ConvParser
ParseConversion
(
)
const
{
return
is_positional_
?
VerifyPositional
(
{
ConsumeFront
(
format_
)
arg_position_
}
GetChar
(
format_
0
)
)
:
ConsumeNextArg
(
GetChar
(
format_
0
)
)
.
SetFormat
(
ConsumeFront
(
format_
)
)
;
}
constexpr
ConvParser
(
string_view
format
ConvList
args
bool
error
int
arg_position
bool
is_positional
)
:
format_
(
format
)
args_
(
args
)
error_
(
error
)
arg_position_
(
arg_position
)
is_positional_
(
is_positional
)
{
}
public
:
constexpr
ConvParser
(
string_view
format
ConvList
args
bool
is_positional
)
:
format_
(
format
)
args_
(
args
)
error_
(
false
)
arg_position_
(
0
)
is_positional_
(
is_positional
)
{
}
constexpr
ConvParser
Run
(
)
const
{
return
(
is_positional_
?
ParseArgPosition
(
ParsePositional
(
format_
)
)
:
*
this
)
.
ParseFlags
(
)
.
ParseWidth
(
)
.
ParsePrecision
(
)
.
ParseLength
(
)
.
ParseConversion
(
)
;
}
constexpr
string_view
format
(
)
const
{
return
format_
;
}
constexpr
ConvList
args
(
)
const
{
return
args_
;
}
constexpr
bool
error
(
)
const
{
return
error_
;
}
constexpr
bool
is_positional
(
)
const
{
return
is_positional_
;
}
private
:
string_view
format_
;
ConvList
args_
;
bool
error_
;
int
arg_position_
;
bool
is_positional_
;
}
;
class
FormatParser
{
static
constexpr
bool
FoundPercent
(
string_view
format
)
{
return
format
.
empty
(
)
|
|
(
GetChar
(
format
0
)
=
=
'
%
'
&
&
GetChar
(
format
1
)
!
=
'
%
'
)
;
}
static
constexpr
string_view
ConsumeNonPercentInner
(
string_view
format
int
limit
=
20
)
{
return
FoundPercent
(
format
)
|
|
!
limit
?
format
:
ConsumeNonPercentInner
(
ConsumeFront
(
format
GetChar
(
format
0
)
=
=
'
%
'
&
&
GetChar
(
format
1
)
=
=
'
%
'
?
2
:
1
)
limit
-
1
)
;
}
static
constexpr
string_view
ConsumeNonPercent
(
string_view
format
)
{
return
FoundPercent
(
format
)
?
format
:
ConsumeNonPercent
(
ConsumeNonPercentInner
(
format
)
)
;
}
static
constexpr
bool
IsPositional
(
string_view
format
)
{
return
IsDigit
(
GetChar
(
format
0
)
)
?
IsPositional
(
ConsumeFront
(
format
)
)
:
GetChar
(
format
0
)
=
=
'
'
;
}
constexpr
bool
RunImpl
(
bool
is_positional
)
const
{
return
(
format_
.
empty
(
)
&
&
(
is_positional
|
|
args_
.
count
=
=
0
)
)
|
|
(
!
format_
.
empty
(
)
&
&
ValidateArg
(
ConvParser
(
ConsumeFront
(
format_
)
args_
is_positional
)
.
Run
(
)
)
)
;
}
constexpr
bool
ValidateArg
(
ConvParser
conv
)
const
{
return
!
conv
.
error
(
)
&
&
FormatParser
(
conv
.
format
(
)
conv
.
args
(
)
)
.
RunImpl
(
conv
.
is_positional
(
)
)
;
}
public
:
constexpr
FormatParser
(
string_view
format
ConvList
args
)
:
format_
(
ConsumeNonPercent
(
format
)
)
args_
(
args
)
{
}
constexpr
bool
Run
(
)
const
{
return
RunImpl
(
!
format_
.
empty
(
)
&
&
IsPositional
(
ConsumeFront
(
format_
)
)
)
;
}
private
:
string_view
format_
;
ConvList
args_
;
}
;
template
<
FormatConversionCharSet
.
.
.
C
>
constexpr
bool
ValidFormatImpl
(
string_view
format
)
{
return
FormatParser
(
format
{
ConvListT
<
sizeof
.
.
.
(
C
)
>
{
{
C
.
.
.
}
}
.
list
sizeof
.
.
.
(
C
)
}
)
.
Run
(
)
;
}
#
endif
}
ABSL_NAMESPACE_END
}
#
endif
