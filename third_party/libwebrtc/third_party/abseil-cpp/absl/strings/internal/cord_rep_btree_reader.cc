#
include
"
absl
/
strings
/
internal
/
cord_rep_btree_reader
.
h
"
#
include
<
cassert
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_internal
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_btree
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_btree_navigator
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_flat
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
cord_internal
{
absl
:
:
string_view
CordRepBtreeReader
:
:
Read
(
size_t
n
size_t
chunk_size
CordRep
*
&
tree
)
{
assert
(
chunk_size
<
=
navigator_
.
Current
(
)
-
>
length
)
;
CordRep
*
edge
=
chunk_size
?
navigator_
.
Current
(
)
:
navigator_
.
Next
(
)
;
const
size_t
offset
=
chunk_size
?
edge
-
>
length
-
chunk_size
:
0
;
ReadResult
result
=
navigator_
.
Read
(
offset
n
)
;
tree
=
result
.
tree
;
if
(
n
<
chunk_size
)
return
CordRepBtree
:
:
EdgeData
(
edge
)
.
substr
(
result
.
n
)
;
const
size_t
consumed_by_read
=
n
-
chunk_size
-
result
.
n
;
if
(
consumed_
+
consumed_by_read
>
=
length
(
)
)
{
consumed_
=
length
(
)
;
return
{
}
;
}
edge
=
navigator_
.
Current
(
)
;
consumed_
+
=
consumed_by_read
+
edge
-
>
length
;
return
CordRepBtree
:
:
EdgeData
(
edge
)
.
substr
(
result
.
n
)
;
}
}
ABSL_NAMESPACE_END
}
