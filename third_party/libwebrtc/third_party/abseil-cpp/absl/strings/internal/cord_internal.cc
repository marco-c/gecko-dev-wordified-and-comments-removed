#
include
"
absl
/
strings
/
internal
/
cord_internal
.
h
"
#
include
<
atomic
>
#
include
<
cassert
>
#
include
<
memory
>
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
container
/
inlined_vector
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_btree
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_crc
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_flat
.
h
"
#
include
"
absl
/
strings
/
internal
/
cord_rep_ring
.
h
"
#
include
"
absl
/
strings
/
str_cat
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
cord_internal
{
ABSL_CONST_INIT
std
:
:
atomic
<
bool
>
cord_ring_buffer_enabled
(
kCordEnableRingBufferDefault
)
;
ABSL_CONST_INIT
std
:
:
atomic
<
bool
>
shallow_subcords_enabled
(
kCordShallowSubcordsDefault
)
;
ABSL_CONST_INIT
std
:
:
atomic
<
bool
>
cord_btree_exhaustive_validation
(
false
)
;
void
LogFatalNodeType
(
CordRep
*
rep
)
{
ABSL_INTERNAL_LOG
(
FATAL
absl
:
:
StrCat
(
"
Unexpected
node
type
:
"
static_cast
<
int
>
(
rep
-
>
tag
)
)
)
;
}
void
CordRep
:
:
Destroy
(
CordRep
*
rep
)
{
assert
(
rep
!
=
nullptr
)
;
while
(
true
)
{
assert
(
!
rep
-
>
refcount
.
IsImmortal
(
)
)
;
if
(
rep
-
>
tag
=
=
BTREE
)
{
CordRepBtree
:
:
Destroy
(
rep
-
>
btree
(
)
)
;
return
;
}
else
if
(
rep
-
>
tag
=
=
RING
)
{
CordRepRing
:
:
Destroy
(
rep
-
>
ring
(
)
)
;
return
;
}
else
if
(
rep
-
>
tag
=
=
EXTERNAL
)
{
CordRepExternal
:
:
Delete
(
rep
)
;
return
;
}
else
if
(
rep
-
>
tag
=
=
SUBSTRING
)
{
CordRepSubstring
*
rep_substring
=
rep
-
>
substring
(
)
;
rep
=
rep_substring
-
>
child
;
delete
rep_substring
;
if
(
rep
-
>
refcount
.
Decrement
(
)
)
{
return
;
}
}
else
if
(
rep
-
>
tag
=
=
CRC
)
{
CordRepCrc
:
:
Destroy
(
rep
-
>
crc
(
)
)
;
return
;
}
else
{
assert
(
rep
-
>
IsFlat
(
)
)
;
CordRepFlat
:
:
Delete
(
rep
)
;
return
;
}
}
}
}
ABSL_NAMESPACE_END
}
