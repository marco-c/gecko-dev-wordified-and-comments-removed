#
ifndef
ABSL_STRINGS_HAS_ABSL_STRINGIFY_H_
#
define
ABSL_STRINGS_HAS_ABSL_STRINGIFY_H_
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
strings_internal
{
class
UnimplementedSink
{
public
:
void
Append
(
size_t
count
char
ch
)
;
void
Append
(
string_view
v
)
;
friend
void
AbslFormatFlush
(
UnimplementedSink
*
sink
absl
:
:
string_view
v
)
;
}
;
}
template
<
typename
T
typename
=
void
>
struct
HasAbslStringify
:
std
:
:
false_type
{
}
;
template
<
typename
T
>
struct
HasAbslStringify
<
T
std
:
:
enable_if_t
<
std
:
:
is_void
<
decltype
(
AbslStringify
(
std
:
:
declval
<
strings_internal
:
:
UnimplementedSink
&
>
(
)
std
:
:
declval
<
const
T
&
>
(
)
)
)
>
:
:
value
>
>
:
std
:
:
true_type
{
}
;
ABSL_NAMESPACE_END
}
#
endif
