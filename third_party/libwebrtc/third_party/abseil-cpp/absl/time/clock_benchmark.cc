#
include
"
absl
/
time
/
clock
.
h
"
#
if
!
defined
(
_WIN32
)
#
include
<
sys
/
time
.
h
>
#
else
#
include
<
winsock2
.
h
>
#
endif
#
include
<
cstdio
>
#
include
"
absl
/
base
/
internal
/
cycleclock
.
h
"
#
include
"
benchmark
/
benchmark
.
h
"
namespace
{
void
BM_Clock_Now_AbslTime
(
benchmark
:
:
State
&
state
)
{
while
(
state
.
KeepRunning
(
)
)
{
benchmark
:
:
DoNotOptimize
(
absl
:
:
Now
(
)
)
;
}
}
BENCHMARK
(
BM_Clock_Now_AbslTime
)
;
void
BM_Clock_Now_GetCurrentTimeNanos
(
benchmark
:
:
State
&
state
)
{
while
(
state
.
KeepRunning
(
)
)
{
benchmark
:
:
DoNotOptimize
(
absl
:
:
GetCurrentTimeNanos
(
)
)
;
}
}
BENCHMARK
(
BM_Clock_Now_GetCurrentTimeNanos
)
;
void
BM_Clock_Now_AbslTime_ToUnixNanos
(
benchmark
:
:
State
&
state
)
{
while
(
state
.
KeepRunning
(
)
)
{
benchmark
:
:
DoNotOptimize
(
absl
:
:
ToUnixNanos
(
absl
:
:
Now
(
)
)
)
;
}
}
BENCHMARK
(
BM_Clock_Now_AbslTime_ToUnixNanos
)
;
void
BM_Clock_Now_CycleClock
(
benchmark
:
:
State
&
state
)
{
while
(
state
.
KeepRunning
(
)
)
{
benchmark
:
:
DoNotOptimize
(
absl
:
:
base_internal
:
:
CycleClock
:
:
Now
(
)
)
;
}
}
BENCHMARK
(
BM_Clock_Now_CycleClock
)
;
#
if
!
defined
(
_WIN32
)
static
void
BM_Clock_Now_gettimeofday
(
benchmark
:
:
State
&
state
)
{
struct
timeval
tv
;
while
(
state
.
KeepRunning
(
)
)
{
benchmark
:
:
DoNotOptimize
(
gettimeofday
(
&
tv
nullptr
)
)
;
}
}
BENCHMARK
(
BM_Clock_Now_gettimeofday
)
;
static
void
BM_Clock_Now_clock_gettime
(
benchmark
:
:
State
&
state
)
{
struct
timespec
ts
;
while
(
state
.
KeepRunning
(
)
)
{
benchmark
:
:
DoNotOptimize
(
clock_gettime
(
CLOCK_REALTIME
&
ts
)
)
;
}
}
BENCHMARK
(
BM_Clock_Now_clock_gettime
)
;
#
endif
}
