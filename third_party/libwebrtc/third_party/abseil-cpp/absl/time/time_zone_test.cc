#
include
"
absl
/
time
/
internal
/
cctz
/
include
/
cctz
/
time_zone
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
time
/
internal
/
test_util
.
h
"
#
include
"
absl
/
time
/
time
.
h
"
namespace
cctz
=
absl
:
:
time_internal
:
:
cctz
;
namespace
{
TEST
(
TimeZone
ValueSemantics
)
{
absl
:
:
TimeZone
tz
;
absl
:
:
TimeZone
tz2
=
tz
;
EXPECT_EQ
(
tz
tz2
)
;
tz2
=
tz
;
EXPECT_EQ
(
tz
tz2
)
;
}
TEST
(
TimeZone
Equality
)
{
absl
:
:
TimeZone
a
b
;
EXPECT_EQ
(
a
b
)
;
EXPECT_EQ
(
a
.
name
(
)
b
.
name
(
)
)
;
absl
:
:
TimeZone
implicit_utc
;
absl
:
:
TimeZone
explicit_utc
=
absl
:
:
UTCTimeZone
(
)
;
EXPECT_EQ
(
implicit_utc
explicit_utc
)
;
EXPECT_EQ
(
implicit_utc
.
name
(
)
explicit_utc
.
name
(
)
)
;
absl
:
:
TimeZone
la
=
absl
:
:
time_internal
:
:
LoadTimeZone
(
"
America
/
Los_Angeles
"
)
;
absl
:
:
TimeZone
nyc
=
absl
:
:
time_internal
:
:
LoadTimeZone
(
"
America
/
New_York
"
)
;
EXPECT_NE
(
la
nyc
)
;
}
TEST
(
TimeZone
CCTZConversion
)
{
const
cctz
:
:
time_zone
cz
=
cctz
:
:
utc_time_zone
(
)
;
const
absl
:
:
TimeZone
tz
(
cz
)
;
EXPECT_EQ
(
cz
cctz
:
:
time_zone
(
tz
)
)
;
}
TEST
(
TimeZone
DefaultTimeZones
)
{
absl
:
:
TimeZone
tz
;
EXPECT_EQ
(
"
UTC
"
absl
:
:
TimeZone
(
)
.
name
(
)
)
;
EXPECT_EQ
(
"
UTC
"
absl
:
:
UTCTimeZone
(
)
.
name
(
)
)
;
}
TEST
(
TimeZone
FixedTimeZone
)
{
const
absl
:
:
TimeZone
tz
=
absl
:
:
FixedTimeZone
(
123
)
;
const
cctz
:
:
time_zone
cz
=
cctz
:
:
fixed_time_zone
(
cctz
:
:
seconds
(
123
)
)
;
EXPECT_EQ
(
tz
absl
:
:
TimeZone
(
cz
)
)
;
}
TEST
(
TimeZone
LocalTimeZone
)
{
const
absl
:
:
TimeZone
local_tz
=
absl
:
:
LocalTimeZone
(
)
;
absl
:
:
TimeZone
tz
=
absl
:
:
time_internal
:
:
LoadTimeZone
(
"
localtime
"
)
;
EXPECT_EQ
(
tz
local_tz
)
;
}
TEST
(
TimeZone
NamedTimeZones
)
{
absl
:
:
TimeZone
nyc
=
absl
:
:
time_internal
:
:
LoadTimeZone
(
"
America
/
New_York
"
)
;
EXPECT_EQ
(
"
America
/
New_York
"
nyc
.
name
(
)
)
;
absl
:
:
TimeZone
syd
=
absl
:
:
time_internal
:
:
LoadTimeZone
(
"
Australia
/
Sydney
"
)
;
EXPECT_EQ
(
"
Australia
/
Sydney
"
syd
.
name
(
)
)
;
absl
:
:
TimeZone
fixed
=
absl
:
:
FixedTimeZone
(
(
(
(
3
*
60
)
+
25
)
*
60
)
+
45
)
;
EXPECT_EQ
(
"
Fixed
/
UTC
+
03
:
25
:
45
"
fixed
.
name
(
)
)
;
}
TEST
(
TimeZone
Failures
)
{
absl
:
:
TimeZone
tz
=
absl
:
:
time_internal
:
:
LoadTimeZone
(
"
America
/
Los_Angeles
"
)
;
EXPECT_FALSE
(
LoadTimeZone
(
"
Invalid
/
TimeZone
"
&
tz
)
)
;
EXPECT_EQ
(
absl
:
:
UTCTimeZone
(
)
tz
)
;
tz
=
absl
:
:
time_internal
:
:
LoadTimeZone
(
"
America
/
Los_Angeles
"
)
;
EXPECT_FALSE
(
LoadTimeZone
(
"
Invalid
/
TimeZone
"
&
tz
)
)
;
EXPECT_EQ
(
absl
:
:
UTCTimeZone
(
)
tz
)
;
tz
=
absl
:
:
time_internal
:
:
LoadTimeZone
(
"
America
/
Los_Angeles
"
)
;
EXPECT_FALSE
(
LoadTimeZone
(
"
"
&
tz
)
)
;
EXPECT_EQ
(
absl
:
:
UTCTimeZone
(
)
tz
)
;
}
}
