#
include
<
cstdint
>
#
include
<
cstring
>
#
include
"
benchmark
/
benchmark
.
h
"
#
include
"
absl
/
algorithm
/
algorithm
.
h
"
namespace
{
constexpr
int
kMinBenchmarkSize
=
1024
;
constexpr
int
kMaxBenchmarkSize
=
8
*
1024
*
1024
;
struct
EightBits
{
explicit
EightBits
(
int
)
:
data
(
0
)
{
}
bool
operator
=
=
(
const
EightBits
&
rhs
)
const
{
return
data
=
=
rhs
.
data
;
}
uint8_t
data
;
}
;
template
<
typename
T
>
void
BM_absl_equal_benchmark
(
benchmark
:
:
State
&
state
)
{
std
:
:
vector
<
T
>
xs
(
state
.
range
(
0
)
T
(
0
)
)
;
std
:
:
vector
<
T
>
ys
=
xs
;
while
(
state
.
KeepRunning
(
)
)
{
const
bool
same
=
absl
:
:
equal
(
xs
.
begin
(
)
xs
.
end
(
)
ys
.
begin
(
)
ys
.
end
(
)
)
;
benchmark
:
:
DoNotOptimize
(
same
)
;
}
}
template
<
typename
T
>
void
BM_std_equal_benchmark
(
benchmark
:
:
State
&
state
)
{
std
:
:
vector
<
T
>
xs
(
state
.
range
(
0
)
T
(
0
)
)
;
std
:
:
vector
<
T
>
ys
=
xs
;
while
(
state
.
KeepRunning
(
)
)
{
const
bool
same
=
std
:
:
equal
(
xs
.
begin
(
)
xs
.
end
(
)
ys
.
begin
(
)
)
;
benchmark
:
:
DoNotOptimize
(
same
)
;
}
}
template
<
typename
T
>
void
BM_memcmp_benchmark
(
benchmark
:
:
State
&
state
)
{
std
:
:
vector
<
T
>
xs
(
state
.
range
(
0
)
T
(
0
)
)
;
std
:
:
vector
<
T
>
ys
=
xs
;
while
(
state
.
KeepRunning
(
)
)
{
const
bool
same
=
std
:
:
memcmp
(
xs
.
data
(
)
ys
.
data
(
)
xs
.
size
(
)
*
sizeof
(
T
)
)
=
=
0
;
benchmark
:
:
DoNotOptimize
(
same
)
;
}
}
template
<
typename
T
>
void
BM_absl_equal_self_benchmark
(
benchmark
:
:
State
&
state
)
{
std
:
:
vector
<
T
>
xs
(
state
.
range
(
0
)
T
(
0
)
)
;
while
(
state
.
KeepRunning
(
)
)
{
const
bool
same
=
absl
:
:
equal
(
xs
.
begin
(
)
xs
.
end
(
)
xs
.
begin
(
)
xs
.
end
(
)
)
;
benchmark
:
:
DoNotOptimize
(
same
)
;
}
}
BENCHMARK_TEMPLATE
(
BM_absl_equal_benchmark
uint8_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_std_equal_benchmark
uint8_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_memcmp_benchmark
uint8_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_absl_equal_self_benchmark
uint8_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_absl_equal_benchmark
uint16_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_std_equal_benchmark
uint16_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_memcmp_benchmark
uint16_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_absl_equal_self_benchmark
uint16_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_absl_equal_benchmark
uint32_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_std_equal_benchmark
uint32_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_memcmp_benchmark
uint32_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_absl_equal_self_benchmark
uint32_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_absl_equal_benchmark
uint64_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_std_equal_benchmark
uint64_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_memcmp_benchmark
uint64_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_absl_equal_self_benchmark
uint64_t
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_absl_equal_benchmark
EightBits
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_std_equal_benchmark
EightBits
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_memcmp_benchmark
EightBits
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
BENCHMARK_TEMPLATE
(
BM_absl_equal_self_benchmark
EightBits
)
-
>
Range
(
kMinBenchmarkSize
kMaxBenchmarkSize
)
;
}
