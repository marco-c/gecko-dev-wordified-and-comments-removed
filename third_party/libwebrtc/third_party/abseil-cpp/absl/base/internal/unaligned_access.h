#
ifndef
ABSL_BASE_INTERNAL_UNALIGNED_ACCESS_H_
#
define
ABSL_BASE_INTERNAL_UNALIGNED_ACCESS_H_
#
include
<
string
.
h
>
#
include
<
cstdint
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
if
defined
(
__cplusplus
)
#
if
defined
(
ABSL_HAVE_ADDRESS_SANITIZER
)
|
|
\
defined
(
ABSL_HAVE_THREAD_SANITIZER
)
|
|
defined
(
ABSL_HAVE_MEMORY_SANITIZER
)
#
include
<
stdint
.
h
>
extern
"
C
"
{
uint16_t
__sanitizer_unaligned_load16
(
const
void
*
p
)
;
uint32_t
__sanitizer_unaligned_load32
(
const
void
*
p
)
;
uint64_t
__sanitizer_unaligned_load64
(
const
void
*
p
)
;
void
__sanitizer_unaligned_store16
(
void
*
p
uint16_t
v
)
;
void
__sanitizer_unaligned_store32
(
void
*
p
uint32_t
v
)
;
void
__sanitizer_unaligned_store64
(
void
*
p
uint64_t
v
)
;
}
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
inline
uint16_t
UnalignedLoad16
(
const
void
*
p
)
{
return
__sanitizer_unaligned_load16
(
p
)
;
}
inline
uint32_t
UnalignedLoad32
(
const
void
*
p
)
{
return
__sanitizer_unaligned_load32
(
p
)
;
}
inline
uint64_t
UnalignedLoad64
(
const
void
*
p
)
{
return
__sanitizer_unaligned_load64
(
p
)
;
}
inline
void
UnalignedStore16
(
void
*
p
uint16_t
v
)
{
__sanitizer_unaligned_store16
(
p
v
)
;
}
inline
void
UnalignedStore32
(
void
*
p
uint32_t
v
)
{
__sanitizer_unaligned_store32
(
p
v
)
;
}
inline
void
UnalignedStore64
(
void
*
p
uint64_t
v
)
{
__sanitizer_unaligned_store64
(
p
v
)
;
}
}
ABSL_NAMESPACE_END
}
#
define
ABSL_INTERNAL_UNALIGNED_LOAD16
(
_p
)
\
(
absl
:
:
base_internal
:
:
UnalignedLoad16
(
_p
)
)
#
define
ABSL_INTERNAL_UNALIGNED_LOAD32
(
_p
)
\
(
absl
:
:
base_internal
:
:
UnalignedLoad32
(
_p
)
)
#
define
ABSL_INTERNAL_UNALIGNED_LOAD64
(
_p
)
\
(
absl
:
:
base_internal
:
:
UnalignedLoad64
(
_p
)
)
#
define
ABSL_INTERNAL_UNALIGNED_STORE16
(
_p
_val
)
\
(
absl
:
:
base_internal
:
:
UnalignedStore16
(
_p
_val
)
)
#
define
ABSL_INTERNAL_UNALIGNED_STORE32
(
_p
_val
)
\
(
absl
:
:
base_internal
:
:
UnalignedStore32
(
_p
_val
)
)
#
define
ABSL_INTERNAL_UNALIGNED_STORE64
(
_p
_val
)
\
(
absl
:
:
base_internal
:
:
UnalignedStore64
(
_p
_val
)
)
#
else
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
inline
uint16_t
UnalignedLoad16
(
const
void
*
p
)
{
uint16_t
t
;
memcpy
(
&
t
p
sizeof
t
)
;
return
t
;
}
inline
uint32_t
UnalignedLoad32
(
const
void
*
p
)
{
uint32_t
t
;
memcpy
(
&
t
p
sizeof
t
)
;
return
t
;
}
inline
uint64_t
UnalignedLoad64
(
const
void
*
p
)
{
uint64_t
t
;
memcpy
(
&
t
p
sizeof
t
)
;
return
t
;
}
inline
void
UnalignedStore16
(
void
*
p
uint16_t
v
)
{
memcpy
(
p
&
v
sizeof
v
)
;
}
inline
void
UnalignedStore32
(
void
*
p
uint32_t
v
)
{
memcpy
(
p
&
v
sizeof
v
)
;
}
inline
void
UnalignedStore64
(
void
*
p
uint64_t
v
)
{
memcpy
(
p
&
v
sizeof
v
)
;
}
}
ABSL_NAMESPACE_END
}
#
define
ABSL_INTERNAL_UNALIGNED_LOAD16
(
_p
)
\
(
absl
:
:
base_internal
:
:
UnalignedLoad16
(
_p
)
)
#
define
ABSL_INTERNAL_UNALIGNED_LOAD32
(
_p
)
\
(
absl
:
:
base_internal
:
:
UnalignedLoad32
(
_p
)
)
#
define
ABSL_INTERNAL_UNALIGNED_LOAD64
(
_p
)
\
(
absl
:
:
base_internal
:
:
UnalignedLoad64
(
_p
)
)
#
define
ABSL_INTERNAL_UNALIGNED_STORE16
(
_p
_val
)
\
(
absl
:
:
base_internal
:
:
UnalignedStore16
(
_p
_val
)
)
#
define
ABSL_INTERNAL_UNALIGNED_STORE32
(
_p
_val
)
\
(
absl
:
:
base_internal
:
:
UnalignedStore32
(
_p
_val
)
)
#
define
ABSL_INTERNAL_UNALIGNED_STORE64
(
_p
_val
)
\
(
absl
:
:
base_internal
:
:
UnalignedStore64
(
_p
_val
)
)
#
endif
#
endif
#
endif
