#
ifndef
ABSL_BASE_INTERNAL_EXPONENTIAL_BIASED_H_
#
define
ABSL_BASE_INTERNAL_EXPONENTIAL_BIASED_H_
#
include
<
stdint
.
h
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
macros
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
class
ExponentialBiased
{
public
:
static
constexpr
int
kPrngNumBits
=
48
;
int64_t
GetSkipCount
(
int64_t
mean
)
;
int64_t
GetStride
(
int64_t
mean
)
;
static
uint64_t
NextRandom
(
uint64_t
rnd
)
;
private
:
void
Initialize
(
)
;
uint64_t
rng_
{
0
}
;
double
bias_
{
0
}
;
bool
initialized_
{
false
}
;
}
;
inline
uint64_t
ExponentialBiased
:
:
NextRandom
(
uint64_t
rnd
)
{
const
uint64_t
prng_mult
=
uint64_t
{
0x5DEECE66D
}
;
const
uint64_t
prng_add
=
0xB
;
const
uint64_t
prng_mod_power
=
48
;
const
uint64_t
prng_mod_mask
=
~
(
(
~
static_cast
<
uint64_t
>
(
0
)
)
<
<
prng_mod_power
)
;
return
(
prng_mult
*
rnd
+
prng_add
)
&
prng_mod_mask
;
}
}
ABSL_NAMESPACE_END
}
#
endif
