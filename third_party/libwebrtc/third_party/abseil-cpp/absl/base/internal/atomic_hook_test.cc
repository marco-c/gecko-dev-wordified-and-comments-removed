#
include
"
absl
/
base
/
internal
/
atomic_hook
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
internal
/
atomic_hook_test_helper
.
h
"
namespace
{
using
:
:
testing
:
:
Eq
;
int
value
=
0
;
void
TestHook
(
int
x
)
{
value
=
x
;
}
TEST
(
AtomicHookTest
NoDefaultFunction
)
{
ABSL_INTERNAL_ATOMIC_HOOK_ATTRIBUTES
static
absl
:
:
base_internal
:
:
AtomicHook
<
void
(
*
)
(
int
)
>
hook
;
value
=
0
;
EXPECT_TRUE
(
hook
.
Load
(
)
=
=
nullptr
)
;
EXPECT_EQ
(
value
0
)
;
hook
(
1
)
;
EXPECT_EQ
(
value
0
)
;
hook
.
Store
(
TestHook
)
;
EXPECT_TRUE
(
hook
.
Load
(
)
=
=
TestHook
)
;
EXPECT_EQ
(
value
0
)
;
hook
(
1
)
;
EXPECT_EQ
(
value
1
)
;
hook
.
Store
(
TestHook
)
;
EXPECT_TRUE
(
hook
.
Load
(
)
=
=
TestHook
)
;
EXPECT_EQ
(
value
1
)
;
hook
(
2
)
;
EXPECT_EQ
(
value
2
)
;
}
TEST
(
AtomicHookTest
WithDefaultFunction
)
{
ABSL_INTERNAL_ATOMIC_HOOK_ATTRIBUTES
static
absl
:
:
base_internal
:
:
AtomicHook
<
void
(
*
)
(
int
)
>
hook
(
TestHook
)
;
value
=
0
;
EXPECT_TRUE
(
hook
.
Load
(
)
=
=
TestHook
)
;
EXPECT_EQ
(
value
0
)
;
hook
(
1
)
;
EXPECT_EQ
(
value
1
)
;
hook
.
Store
(
TestHook
)
;
EXPECT_TRUE
(
hook
.
Load
(
)
=
=
TestHook
)
;
EXPECT_EQ
(
value
1
)
;
hook
(
2
)
;
EXPECT_EQ
(
value
2
)
;
}
ABSL_CONST_INIT
int
override_func_calls
=
0
;
void
OverrideFunc
(
)
{
override_func_calls
+
+
;
}
static
struct
OverrideInstaller
{
OverrideInstaller
(
)
{
absl
:
:
atomic_hook_internal
:
:
func
.
Store
(
OverrideFunc
)
;
}
}
override_installer
;
TEST
(
AtomicHookTest
DynamicInitFromAnotherTU
)
{
EXPECT_THAT
(
absl
:
:
atomic_hook_internal
:
:
default_func_calls
Eq
(
0
)
)
;
EXPECT_THAT
(
override_func_calls
Eq
(
0
)
)
;
absl
:
:
atomic_hook_internal
:
:
func
(
)
;
EXPECT_THAT
(
absl
:
:
atomic_hook_internal
:
:
default_func_calls
Eq
(
0
)
)
;
EXPECT_THAT
(
override_func_calls
Eq
(
1
)
)
;
EXPECT_THAT
(
absl
:
:
atomic_hook_internal
:
:
func
.
Load
(
)
Eq
(
OverrideFunc
)
)
;
}
}
