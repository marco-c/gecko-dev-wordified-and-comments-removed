#
ifndef
ABSL_BASE_INTERNAL_PREFETCH_H_
#
define
ABSL_BASE_INTERNAL_PREFETCH_H_
#
include
"
absl
/
base
/
config
.
h
"
#
ifdef
__SSE__
#
include
<
xmmintrin
.
h
>
#
endif
#
if
defined
(
_MSC_VER
)
&
&
defined
(
ABSL_INTERNAL_HAVE_SSE
)
#
include
<
intrin
.
h
>
#
pragma
intrinsic
(
_mm_prefetch
)
#
endif
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
void
PrefetchT0
(
const
void
*
addr
)
;
void
PrefetchT1
(
const
void
*
addr
)
;
void
PrefetchT2
(
const
void
*
addr
)
;
void
PrefetchNta
(
const
void
*
addr
)
;
#
if
ABSL_HAVE_BUILTIN
(
__builtin_prefetch
)
|
|
defined
(
__GNUC__
)
#
define
ABSL_INTERNAL_HAVE_PREFETCH
1
inline
void
PrefetchT0
(
const
void
*
addr
)
{
__builtin_prefetch
(
addr
0
3
)
;
}
inline
void
PrefetchT1
(
const
void
*
addr
)
{
__builtin_prefetch
(
addr
0
2
)
;
}
inline
void
PrefetchT2
(
const
void
*
addr
)
{
__builtin_prefetch
(
addr
0
1
)
;
}
inline
void
PrefetchNta
(
const
void
*
addr
)
{
__builtin_prefetch
(
addr
0
0
)
;
}
#
elif
defined
(
ABSL_INTERNAL_HAVE_SSE
)
#
define
ABSL_INTERNAL_HAVE_PREFETCH
1
inline
void
PrefetchT0
(
const
void
*
addr
)
{
_mm_prefetch
(
reinterpret_cast
<
const
char
*
>
(
addr
)
_MM_HINT_T0
)
;
}
inline
void
PrefetchT1
(
const
void
*
addr
)
{
_mm_prefetch
(
reinterpret_cast
<
const
char
*
>
(
addr
)
_MM_HINT_T1
)
;
}
inline
void
PrefetchT2
(
const
void
*
addr
)
{
_mm_prefetch
(
reinterpret_cast
<
const
char
*
>
(
addr
)
_MM_HINT_T2
)
;
}
inline
void
PrefetchNta
(
const
void
*
addr
)
{
_mm_prefetch
(
reinterpret_cast
<
const
char
*
>
(
addr
)
_MM_HINT_NTA
)
;
}
#
else
inline
void
PrefetchT0
(
const
void
*
)
{
}
inline
void
PrefetchT1
(
const
void
*
)
{
}
inline
void
PrefetchT2
(
const
void
*
)
{
}
inline
void
PrefetchNta
(
const
void
*
)
{
}
#
endif
}
ABSL_NAMESPACE_END
}
#
endif
