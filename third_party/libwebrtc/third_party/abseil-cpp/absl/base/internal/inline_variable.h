#
ifndef
ABSL_BASE_INTERNAL_INLINE_VARIABLE_EMULATION_H_
#
define
ABSL_BASE_INTERNAL_INLINE_VARIABLE_EMULATION_H_
#
include
<
type_traits
>
#
include
"
absl
/
base
/
internal
/
identity
.
h
"
#
ifdef
__cpp_inline_variables
#
if
defined
(
__clang__
)
#
define
ABSL_INTERNAL_EXTERN_DECL
(
type
name
)
\
extern
const
:
:
absl
:
:
internal
:
:
identity_t
<
type
>
name
;
#
else
#
define
ABSL_INTERNAL_EXTERN_DECL
(
type
name
)
#
endif
#
define
ABSL_INTERNAL_INLINE_CONSTEXPR
(
type
name
init
)
\
ABSL_INTERNAL_EXTERN_DECL
(
type
name
)
\
inline
constexpr
:
:
absl
:
:
internal
:
:
identity_t
<
type
>
name
=
init
#
else
#
define
ABSL_INTERNAL_INLINE_CONSTEXPR
(
var_type
name
init
)
\
template
<
class
/
*
AbslInternalDummy
*
/
=
void
>
\
struct
AbslInternalInlineVariableHolder
#
#
name
{
\
static
constexpr
:
:
absl
:
:
internal
:
:
identity_t
<
var_type
>
kInstance
=
init
;
\
}
;
\
\
template
<
class
AbslInternalDummy
>
\
constexpr
:
:
absl
:
:
internal
:
:
identity_t
<
var_type
>
\
AbslInternalInlineVariableHolder
#
#
name
<
AbslInternalDummy
>
:
:
kInstance
;
\
\
static
constexpr
const
:
:
absl
:
:
internal
:
:
identity_t
<
var_type
>
&
\
name
=
/
*
NOLINT
*
/
\
AbslInternalInlineVariableHolder
#
#
name
<
>
:
:
kInstance
;
\
static_assert
(
sizeof
(
void
(
*
)
(
decltype
(
name
)
)
)
!
=
0
\
"
Silence
unused
variable
warnings
.
"
)
#
endif
#
endif
