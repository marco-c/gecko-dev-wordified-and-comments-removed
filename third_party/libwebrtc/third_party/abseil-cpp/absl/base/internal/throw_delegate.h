#
ifndef
ABSL_BASE_INTERNAL_THROW_DELEGATE_H_
#
define
ABSL_BASE_INTERNAL_THROW_DELEGATE_H_
#
include
<
string
>
#
include
"
absl
/
base
/
config
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
[
[
noreturn
]
]
void
ThrowStdLogicError
(
const
std
:
:
string
&
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdLogicError
(
const
char
*
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdInvalidArgument
(
const
std
:
:
string
&
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdInvalidArgument
(
const
char
*
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdDomainError
(
const
std
:
:
string
&
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdDomainError
(
const
char
*
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdLengthError
(
const
std
:
:
string
&
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdLengthError
(
const
char
*
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdOutOfRange
(
const
std
:
:
string
&
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdOutOfRange
(
const
char
*
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdRuntimeError
(
const
std
:
:
string
&
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdRuntimeError
(
const
char
*
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdRangeError
(
const
std
:
:
string
&
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdRangeError
(
const
char
*
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdOverflowError
(
const
std
:
:
string
&
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdOverflowError
(
const
char
*
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdUnderflowError
(
const
std
:
:
string
&
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdUnderflowError
(
const
char
*
what_arg
)
;
[
[
noreturn
]
]
void
ThrowStdBadFunctionCall
(
)
;
[
[
noreturn
]
]
void
ThrowStdBadAlloc
(
)
;
}
ABSL_NAMESPACE_END
}
#
endif
