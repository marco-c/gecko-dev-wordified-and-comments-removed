#
include
"
absl
/
base
/
internal
/
sysinfo
.
h
"
#
include
"
absl
/
base
/
attributes
.
h
"
#
ifdef
_WIN32
#
include
<
windows
.
h
>
#
else
#
include
<
fcntl
.
h
>
#
include
<
pthread
.
h
>
#
include
<
sys
/
stat
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
unistd
.
h
>
#
endif
#
ifdef
__linux__
#
include
<
sys
/
syscall
.
h
>
#
endif
#
if
defined
(
__APPLE__
)
|
|
defined
(
__FreeBSD__
)
#
include
<
sys
/
sysctl
.
h
>
#
endif
#
if
defined
(
__myriad2__
)
#
include
<
rtems
.
h
>
#
endif
#
include
<
string
.
h
>
#
include
<
cassert
>
#
include
<
cstdint
>
#
include
<
cstdio
>
#
include
<
cstdlib
>
#
include
<
ctime
>
#
include
<
limits
>
#
include
<
thread
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
base
/
call_once
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
base
/
internal
/
spinlock
.
h
"
#
include
"
absl
/
base
/
internal
/
unscaledcycleclock
.
h
"
#
include
"
absl
/
base
/
thread_annotations
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
static
int
GetNumCPUs
(
)
{
#
if
defined
(
__myriad2__
)
return
1
;
#
else
return
std
:
:
thread
:
:
hardware_concurrency
(
)
;
#
endif
}
#
if
defined
(
_WIN32
)
static
double
GetNominalCPUFrequency
(
)
{
#
if
WINAPI_FAMILY_PARTITION
(
WINAPI_PARTITION_APP
)
&
&
\
!
WINAPI_FAMILY_PARTITION
(
WINAPI_PARTITION_DESKTOP
)
return
1
.
0
;
#
else
#
pragma
comment
(
lib
"
advapi32
.
lib
"
)
/
/
For
Reg
*
functions
.
HKEY
key
;
if
(
RegOpenKeyExA
(
HKEY_LOCAL_MACHINE
"
HARDWARE
\
\
DESCRIPTION
\
\
System
\
\
CentralProcessor
\
\
0
"
0
KEY_READ
&
key
)
=
=
ERROR_SUCCESS
)
{
DWORD
type
=
0
;
DWORD
data
=
0
;
DWORD
data_size
=
sizeof
(
data
)
;
auto
result
=
RegQueryValueExA
(
key
"
~
MHz
"
0
&
type
reinterpret_cast
<
LPBYTE
>
(
&
data
)
&
data_size
)
;
RegCloseKey
(
key
)
;
if
(
result
=
=
ERROR_SUCCESS
&
&
type
=
=
REG_DWORD
&
&
data_size
=
=
sizeof
(
data
)
)
{
return
data
*
1e6
;
}
}
return
1
.
0
;
#
endif
}
#
elif
defined
(
CTL_HW
)
&
&
defined
(
HW_CPU_FREQ
)
static
double
GetNominalCPUFrequency
(
)
{
unsigned
freq
;
size_t
size
=
sizeof
(
freq
)
;
int
mib
[
2
]
=
{
CTL_HW
HW_CPU_FREQ
}
;
if
(
sysctl
(
mib
2
&
freq
&
size
nullptr
0
)
=
=
0
)
{
return
static_cast
<
double
>
(
freq
)
;
}
return
1
.
0
;
}
#
else
static
bool
ReadLongFromFile
(
const
char
*
file
long
*
value
)
{
bool
ret
=
false
;
int
fd
=
open
(
file
O_RDONLY
)
;
if
(
fd
!
=
-
1
)
{
char
line
[
1024
]
;
char
*
err
;
memset
(
line
'
\
0
'
sizeof
(
line
)
)
;
int
len
=
read
(
fd
line
sizeof
(
line
)
-
1
)
;
if
(
len
<
=
0
)
{
ret
=
false
;
}
else
{
const
long
temp_value
=
strtol
(
line
&
err
10
)
;
if
(
line
[
0
]
!
=
'
\
0
'
&
&
(
*
err
=
=
'
\
n
'
|
|
*
err
=
=
'
\
0
'
)
)
{
*
value
=
temp_value
;
ret
=
true
;
}
}
close
(
fd
)
;
}
return
ret
;
}
#
if
defined
(
ABSL_INTERNAL_UNSCALED_CYCLECLOCK_FREQUENCY_IS_CPU_FREQUENCY
)
static
int64_t
ReadMonotonicClockNanos
(
)
{
struct
timespec
t
;
#
ifdef
CLOCK_MONOTONIC_RAW
int
rc
=
clock_gettime
(
CLOCK_MONOTONIC_RAW
&
t
)
;
#
else
int
rc
=
clock_gettime
(
CLOCK_MONOTONIC
&
t
)
;
#
endif
if
(
rc
!
=
0
)
{
perror
(
"
clock_gettime
(
)
failed
"
)
;
abort
(
)
;
}
return
int64_t
{
t
.
tv_sec
}
*
1000000000
+
t
.
tv_nsec
;
}
class
UnscaledCycleClockWrapperForInitializeFrequency
{
public
:
static
int64_t
Now
(
)
{
return
base_internal
:
:
UnscaledCycleClock
:
:
Now
(
)
;
}
}
;
struct
TimeTscPair
{
int64_t
time
;
int64_t
tsc
;
}
;
static
TimeTscPair
GetTimeTscPair
(
)
{
int64_t
best_latency
=
std
:
:
numeric_limits
<
int64_t
>
:
:
max
(
)
;
TimeTscPair
best
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
int64_t
t0
=
ReadMonotonicClockNanos
(
)
;
int64_t
tsc
=
UnscaledCycleClockWrapperForInitializeFrequency
:
:
Now
(
)
;
int64_t
t1
=
ReadMonotonicClockNanos
(
)
;
int64_t
latency
=
t1
-
t0
;
if
(
latency
<
best_latency
)
{
best_latency
=
latency
;
best
.
time
=
t0
;
best
.
tsc
=
tsc
;
}
}
return
best
;
}
static
double
MeasureTscFrequencyWithSleep
(
int
sleep_nanoseconds
)
{
auto
t0
=
GetTimeTscPair
(
)
;
struct
timespec
ts
;
ts
.
tv_sec
=
0
;
ts
.
tv_nsec
=
sleep_nanoseconds
;
while
(
nanosleep
(
&
ts
&
ts
)
!
=
0
&
&
errno
=
=
EINTR
)
{
}
auto
t1
=
GetTimeTscPair
(
)
;
double
elapsed_ticks
=
t1
.
tsc
-
t0
.
tsc
;
double
elapsed_time
=
(
t1
.
time
-
t0
.
time
)
*
1e
-
9
;
return
elapsed_ticks
/
elapsed_time
;
}
static
double
MeasureTscFrequency
(
)
{
double
last_measurement
=
-
1
.
0
;
int
sleep_nanoseconds
=
1000000
;
for
(
int
i
=
0
;
i
<
8
;
+
+
i
)
{
double
measurement
=
MeasureTscFrequencyWithSleep
(
sleep_nanoseconds
)
;
if
(
measurement
*
0
.
99
<
last_measurement
&
&
last_measurement
<
measurement
*
1
.
01
)
{
return
measurement
;
}
last_measurement
=
measurement
;
sleep_nanoseconds
*
=
2
;
}
return
last_measurement
;
}
#
endif
static
double
GetNominalCPUFrequency
(
)
{
long
freq
=
0
;
if
(
ReadLongFromFile
(
"
/
sys
/
devices
/
system
/
cpu
/
cpu0
/
tsc_freq_khz
"
&
freq
)
)
{
return
freq
*
1e3
;
}
#
if
defined
(
ABSL_INTERNAL_UNSCALED_CYCLECLOCK_FREQUENCY_IS_CPU_FREQUENCY
)
return
MeasureTscFrequency
(
)
;
#
else
if
(
ReadLongFromFile
(
"
/
sys
/
devices
/
system
/
cpu
/
cpu0
/
cpufreq
/
cpuinfo_max_freq
"
&
freq
)
)
{
return
freq
*
1e3
;
}
return
1
.
0
;
#
endif
}
#
endif
ABSL_CONST_INIT
static
once_flag
init_num_cpus_once
;
ABSL_CONST_INIT
static
int
num_cpus
=
0
;
int
NumCPUs
(
)
{
base_internal
:
:
LowLevelCallOnce
(
&
init_num_cpus_once
[
]
(
)
{
num_cpus
=
GetNumCPUs
(
)
;
}
)
;
return
num_cpus
;
}
ABSL_CONST_INIT
static
once_flag
init_nominal_cpu_frequency_once
;
ABSL_CONST_INIT
static
double
nominal_cpu_frequency
=
1
.
0
;
double
NominalCPUFrequency
(
)
{
base_internal
:
:
LowLevelCallOnce
(
&
init_nominal_cpu_frequency_once
[
]
(
)
{
nominal_cpu_frequency
=
GetNominalCPUFrequency
(
)
;
}
)
;
return
nominal_cpu_frequency
;
}
#
if
defined
(
_WIN32
)
pid_t
GetTID
(
)
{
return
pid_t
{
GetCurrentThreadId
(
)
}
;
}
#
elif
defined
(
__linux__
)
#
ifndef
SYS_gettid
#
define
SYS_gettid
__NR_gettid
#
endif
pid_t
GetTID
(
)
{
return
syscall
(
SYS_gettid
)
;
}
#
elif
defined
(
__akaros__
)
pid_t
GetTID
(
)
{
if
(
in_vcore_context
(
)
)
return
0
;
return
reinterpret_cast
<
struct
pthread_tcb
*
>
(
current_uthread
)
-
>
id
;
}
#
elif
defined
(
__myriad2__
)
pid_t
GetTID
(
)
{
uint32_t
tid
;
rtems_task_ident
(
RTEMS_SELF
0
&
tid
)
;
return
tid
;
}
#
else
ABSL_CONST_INIT
static
once_flag
tid_once
;
ABSL_CONST_INIT
static
pthread_key_t
tid_key
;
ABSL_CONST_INIT
static
absl
:
:
base_internal
:
:
SpinLock
tid_lock
(
absl
:
:
kConstInit
base_internal
:
:
SCHEDULE_KERNEL_ONLY
)
;
ABSL_CONST_INIT
static
std
:
:
vector
<
uint32_t
>
*
tid_array
ABSL_GUARDED_BY
(
tid_lock
)
=
nullptr
;
static
constexpr
int
kBitsPerWord
=
32
;
static
void
FreeTID
(
void
*
v
)
{
intptr_t
tid
=
reinterpret_cast
<
intptr_t
>
(
v
)
;
int
word
=
tid
/
kBitsPerWord
;
uint32_t
mask
=
~
(
1u
<
<
(
tid
%
kBitsPerWord
)
)
;
absl
:
:
base_internal
:
:
SpinLockHolder
lock
(
&
tid_lock
)
;
assert
(
0
<
=
word
&
&
static_cast
<
size_t
>
(
word
)
<
tid_array
-
>
size
(
)
)
;
(
*
tid_array
)
[
word
]
&
=
mask
;
}
static
void
InitGetTID
(
)
{
if
(
pthread_key_create
(
&
tid_key
FreeTID
)
!
=
0
)
{
perror
(
"
pthread_key_create
failed
"
)
;
abort
(
)
;
}
absl
:
:
base_internal
:
:
SpinLockHolder
lock
(
&
tid_lock
)
;
tid_array
=
new
std
:
:
vector
<
uint32_t
>
(
1
)
;
(
*
tid_array
)
[
0
]
=
1
;
}
pid_t
GetTID
(
)
{
absl
:
:
call_once
(
tid_once
InitGetTID
)
;
intptr_t
tid
=
reinterpret_cast
<
intptr_t
>
(
pthread_getspecific
(
tid_key
)
)
;
if
(
tid
!
=
0
)
{
return
tid
;
}
int
bit
;
size_t
word
;
{
absl
:
:
base_internal
:
:
SpinLockHolder
lock
(
&
tid_lock
)
;
word
=
0
;
while
(
word
<
tid_array
-
>
size
(
)
&
&
~
(
*
tid_array
)
[
word
]
=
=
0
)
{
+
+
word
;
}
if
(
word
=
=
tid_array
-
>
size
(
)
)
{
tid_array
-
>
push_back
(
0
)
;
}
bit
=
0
;
while
(
bit
<
kBitsPerWord
&
&
(
(
(
*
tid_array
)
[
word
]
>
>
bit
)
&
1
)
!
=
0
)
{
+
+
bit
;
}
tid
=
(
word
*
kBitsPerWord
)
+
bit
;
(
*
tid_array
)
[
word
]
|
=
1u
<
<
bit
;
}
if
(
pthread_setspecific
(
tid_key
reinterpret_cast
<
void
*
>
(
tid
)
)
!
=
0
)
{
perror
(
"
pthread_setspecific
failed
"
)
;
abort
(
)
;
}
return
static_cast
<
pid_t
>
(
tid
)
;
}
#
endif
pid_t
GetCachedTID
(
)
{
#
if
ABSL_HAVE_THREAD_LOCAL
static
thread_local
pid_t
thread_id
=
GetTID
(
)
;
return
thread_id
;
#
else
return
GetTID
(
)
;
#
endif
}
}
ABSL_NAMESPACE_END
}
