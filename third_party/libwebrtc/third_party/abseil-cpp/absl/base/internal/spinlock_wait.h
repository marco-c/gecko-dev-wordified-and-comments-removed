#
ifndef
ABSL_BASE_INTERNAL_SPINLOCK_WAIT_H_
#
define
ABSL_BASE_INTERNAL_SPINLOCK_WAIT_H_
#
include
<
stdint
.
h
>
#
include
<
atomic
>
#
include
"
absl
/
base
/
internal
/
scheduling_mode
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
struct
SpinLockWaitTransition
{
uint32_t
from
;
uint32_t
to
;
bool
done
;
}
;
uint32_t
SpinLockWait
(
std
:
:
atomic
<
uint32_t
>
*
w
int
n
const
SpinLockWaitTransition
trans
[
]
SchedulingMode
scheduling_mode
)
;
void
SpinLockWake
(
std
:
:
atomic
<
uint32_t
>
*
w
bool
all
)
;
void
SpinLockDelay
(
std
:
:
atomic
<
uint32_t
>
*
w
uint32_t
value
int
loop
base_internal
:
:
SchedulingMode
scheduling_mode
)
;
int
SpinLockSuggestedDelayNS
(
int
loop
)
;
}
ABSL_NAMESPACE_END
}
extern
"
C
"
{
void
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalSpinLockWake
)
(
std
:
:
atomic
<
uint32_t
>
*
w
bool
all
)
;
void
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalSpinLockDelay
)
(
std
:
:
atomic
<
uint32_t
>
*
w
uint32_t
value
int
loop
absl
:
:
base_internal
:
:
SchedulingMode
scheduling_mode
)
;
}
inline
void
absl
:
:
base_internal
:
:
SpinLockWake
(
std
:
:
atomic
<
uint32_t
>
*
w
bool
all
)
{
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalSpinLockWake
)
(
w
all
)
;
}
inline
void
absl
:
:
base_internal
:
:
SpinLockDelay
(
std
:
:
atomic
<
uint32_t
>
*
w
uint32_t
value
int
loop
absl
:
:
base_internal
:
:
SchedulingMode
scheduling_mode
)
{
ABSL_INTERNAL_C_SYMBOL
(
AbslInternalSpinLockDelay
)
(
w
value
loop
scheduling_mode
)
;
}
#
endif
