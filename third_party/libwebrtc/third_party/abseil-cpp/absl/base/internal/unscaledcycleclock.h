#
ifndef
ABSL_BASE_INTERNAL_UNSCALEDCYCLECLOCK_H_
#
define
ABSL_BASE_INTERNAL_UNSCALEDCYCLECLOCK_H_
#
include
<
cstdint
>
#
if
defined
(
__APPLE__
)
#
include
<
TargetConditionals
.
h
>
#
endif
#
include
"
absl
/
base
/
port
.
h
"
#
if
defined
(
__i386__
)
|
|
defined
(
__x86_64__
)
|
|
defined
(
__aarch64__
)
|
|
\
defined
(
__powerpc__
)
|
|
defined
(
__ppc__
)
|
|
\
defined
(
_M_IX86
)
|
|
defined
(
_M_X64
)
#
define
ABSL_HAVE_UNSCALED_CYCLECLOCK_IMPLEMENTATION
1
#
else
#
define
ABSL_HAVE_UNSCALED_CYCLECLOCK_IMPLEMENTATION
0
#
endif
#
if
defined
(
__native_client__
)
|
|
\
(
defined
(
TARGET_OS_IPHONE
)
&
&
TARGET_OS_IPHONE
)
|
|
\
(
defined
(
__ANDROID__
)
&
&
defined
(
__aarch64__
)
)
#
define
ABSL_USE_UNSCALED_CYCLECLOCK_DEFAULT
0
#
else
#
define
ABSL_USE_UNSCALED_CYCLECLOCK_DEFAULT
1
#
endif
#
if
!
defined
(
ABSL_USE_UNSCALED_CYCLECLOCK
)
#
define
ABSL_USE_UNSCALED_CYCLECLOCK
\
(
ABSL_HAVE_UNSCALED_CYCLECLOCK_IMPLEMENTATION
&
&
\
ABSL_USE_UNSCALED_CYCLECLOCK_DEFAULT
)
#
endif
#
if
ABSL_USE_UNSCALED_CYCLECLOCK
#
if
(
defined
(
__i386__
)
|
|
defined
(
__x86_64__
)
|
|
\
defined
(
_M_IX86
)
|
|
defined
(
_M_X64
)
)
#
define
ABSL_INTERNAL_UNSCALED_CYCLECLOCK_FREQUENCY_IS_CPU_FREQUENCY
#
endif
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
time_internal
{
class
UnscaledCycleClockWrapperForGetCurrentTime
;
}
namespace
base_internal
{
class
CycleClock
;
class
UnscaledCycleClockWrapperForInitializeFrequency
;
class
UnscaledCycleClock
{
private
:
UnscaledCycleClock
(
)
=
delete
;
static
int64_t
Now
(
)
;
static
double
Frequency
(
)
;
friend
class
base_internal
:
:
CycleClock
;
friend
class
time_internal
:
:
UnscaledCycleClockWrapperForGetCurrentTime
;
friend
class
base_internal
:
:
UnscaledCycleClockWrapperForInitializeFrequency
;
}
;
}
ABSL_NAMESPACE_END
}
#
endif
#
endif
