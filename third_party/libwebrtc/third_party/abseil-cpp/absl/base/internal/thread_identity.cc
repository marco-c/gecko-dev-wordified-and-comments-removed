#
include
"
absl
/
base
/
internal
/
thread_identity
.
h
"
#
ifndef
_WIN32
#
include
<
pthread
.
h
>
#
include
<
signal
.
h
>
#
endif
#
include
<
atomic
>
#
include
<
cassert
>
#
include
<
memory
>
#
include
"
absl
/
base
/
call_once
.
h
"
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
base
/
internal
/
spinlock
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
base_internal
{
#
if
ABSL_THREAD_IDENTITY_MODE
!
=
ABSL_THREAD_IDENTITY_MODE_USE_CPP11
namespace
{
absl
:
:
once_flag
init_thread_identity_key_once
;
pthread_key_t
thread_identity_pthread_key
;
std
:
:
atomic
<
bool
>
pthread_key_initialized
(
false
)
;
void
AllocateThreadIdentityKey
(
ThreadIdentityReclaimerFunction
reclaimer
)
{
pthread_key_create
(
&
thread_identity_pthread_key
reclaimer
)
;
pthread_key_initialized
.
store
(
true
std
:
:
memory_order_release
)
;
}
}
#
endif
#
if
ABSL_THREAD_IDENTITY_MODE
=
=
ABSL_THREAD_IDENTITY_MODE_USE_TLS
|
|
\
ABSL_THREAD_IDENTITY_MODE
=
=
ABSL_THREAD_IDENTITY_MODE_USE_CPP11
#
ifdef
__GNUC__
__attribute__
(
(
visibility
(
"
protected
"
)
)
)
#
endif
#
if
ABSL_PER_THREAD_TLS
ABSL_PER_THREAD_TLS_KEYWORD
ThreadIdentity
*
thread_identity_ptr
=
nullptr
;
#
elif
defined
(
ABSL_HAVE_THREAD_LOCAL
)
thread_local
ThreadIdentity
*
thread_identity_ptr
=
nullptr
;
#
endif
#
endif
void
SetCurrentThreadIdentity
(
ThreadIdentity
*
identity
ThreadIdentityReclaimerFunction
reclaimer
)
{
assert
(
CurrentThreadIdentityIfPresent
(
)
=
=
nullptr
)
;
#
if
ABSL_THREAD_IDENTITY_MODE
=
=
ABSL_THREAD_IDENTITY_MODE_USE_POSIX_SETSPECIFIC
absl
:
:
call_once
(
init_thread_identity_key_once
AllocateThreadIdentityKey
reclaimer
)
;
#
if
defined
(
__EMSCRIPTEN__
)
|
|
defined
(
__MINGW32__
)
pthread_setspecific
(
thread_identity_pthread_key
reinterpret_cast
<
void
*
>
(
identity
)
)
;
#
else
sigset_t
all_signals
;
sigset_t
curr_signals
;
sigfillset
(
&
all_signals
)
;
pthread_sigmask
(
SIG_SETMASK
&
all_signals
&
curr_signals
)
;
pthread_setspecific
(
thread_identity_pthread_key
reinterpret_cast
<
void
*
>
(
identity
)
)
;
pthread_sigmask
(
SIG_SETMASK
&
curr_signals
nullptr
)
;
#
endif
#
elif
ABSL_THREAD_IDENTITY_MODE
=
=
ABSL_THREAD_IDENTITY_MODE_USE_TLS
absl
:
:
call_once
(
init_thread_identity_key_once
AllocateThreadIdentityKey
reclaimer
)
;
pthread_setspecific
(
thread_identity_pthread_key
reinterpret_cast
<
void
*
>
(
identity
)
)
;
thread_identity_ptr
=
identity
;
#
elif
ABSL_THREAD_IDENTITY_MODE
=
=
ABSL_THREAD_IDENTITY_MODE_USE_CPP11
thread_local
std
:
:
unique_ptr
<
ThreadIdentity
ThreadIdentityReclaimerFunction
>
holder
(
identity
reclaimer
)
;
thread_identity_ptr
=
identity
;
#
else
#
error
Unimplemented
ABSL_THREAD_IDENTITY_MODE
#
endif
}
#
if
ABSL_THREAD_IDENTITY_MODE
=
=
ABSL_THREAD_IDENTITY_MODE_USE_TLS
|
|
\
ABSL_THREAD_IDENTITY_MODE
=
=
ABSL_THREAD_IDENTITY_MODE_USE_CPP11
#
if
defined
(
ABSL_BUILD_DLL
)
|
|
defined
(
ABSL_CONSUME_DLL
)
ThreadIdentity
*
CurrentThreadIdentityIfPresent
(
)
{
return
thread_identity_ptr
;
}
#
endif
#
endif
void
ClearCurrentThreadIdentity
(
)
{
#
if
ABSL_THREAD_IDENTITY_MODE
=
=
ABSL_THREAD_IDENTITY_MODE_USE_TLS
|
|
\
ABSL_THREAD_IDENTITY_MODE
=
=
ABSL_THREAD_IDENTITY_MODE_USE_CPP11
thread_identity_ptr
=
nullptr
;
#
elif
ABSL_THREAD_IDENTITY_MODE
=
=
\
ABSL_THREAD_IDENTITY_MODE_USE_POSIX_SETSPECIFIC
assert
(
CurrentThreadIdentityIfPresent
(
)
=
=
nullptr
)
;
#
endif
}
#
if
ABSL_THREAD_IDENTITY_MODE
=
=
ABSL_THREAD_IDENTITY_MODE_USE_POSIX_SETSPECIFIC
ThreadIdentity
*
CurrentThreadIdentityIfPresent
(
)
{
bool
initialized
=
pthread_key_initialized
.
load
(
std
:
:
memory_order_acquire
)
;
if
(
!
initialized
)
{
return
nullptr
;
}
return
reinterpret_cast
<
ThreadIdentity
*
>
(
pthread_getspecific
(
thread_identity_pthread_key
)
)
;
}
#
endif
}
ABSL_NAMESPACE_END
}
