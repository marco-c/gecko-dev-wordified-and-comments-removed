#
ifndef
ABSL_BASE_CONFIG_H_
#
define
ABSL_BASE_CONFIG_H_
#
include
<
limits
.
h
>
#
ifdef
__cplusplus
#
include
<
cstddef
>
#
endif
#
if
defined
(
__APPLE__
)
#
include
<
Availability
.
h
>
#
include
<
TargetConditionals
.
h
>
#
endif
#
include
"
absl
/
base
/
options
.
h
"
#
include
"
absl
/
base
/
policy_checks
.
h
"
#
define
ABSL_INTERNAL_DO_TOKEN_STR
(
x
)
#
x
#
define
ABSL_INTERNAL_TOKEN_STR
(
x
)
ABSL_INTERNAL_DO_TOKEN_STR
(
x
)
#
if
!
defined
(
ABSL_OPTION_USE_INLINE_NAMESPACE
)
|
|
\
!
defined
(
ABSL_OPTION_INLINE_NAMESPACE_NAME
)
#
error
options
.
h
is
misconfigured
.
#
endif
#
if
defined
(
__cplusplus
)
&
&
ABSL_OPTION_USE_INLINE_NAMESPACE
=
=
1
#
define
ABSL_INTERNAL_INLINE_NAMESPACE_STR
\
ABSL_INTERNAL_TOKEN_STR
(
ABSL_OPTION_INLINE_NAMESPACE_NAME
)
static_assert
(
ABSL_INTERNAL_INLINE_NAMESPACE_STR
[
0
]
!
=
'
\
0
'
"
options
.
h
misconfigured
:
ABSL_OPTION_INLINE_NAMESPACE_NAME
must
"
"
not
be
empty
.
"
)
;
static_assert
(
ABSL_INTERNAL_INLINE_NAMESPACE_STR
[
0
]
!
=
'
h
'
|
|
ABSL_INTERNAL_INLINE_NAMESPACE_STR
[
1
]
!
=
'
e
'
|
|
ABSL_INTERNAL_INLINE_NAMESPACE_STR
[
2
]
!
=
'
a
'
|
|
ABSL_INTERNAL_INLINE_NAMESPACE_STR
[
3
]
!
=
'
d
'
|
|
ABSL_INTERNAL_INLINE_NAMESPACE_STR
[
4
]
!
=
'
\
0
'
"
options
.
h
misconfigured
:
ABSL_OPTION_INLINE_NAMESPACE_NAME
must
"
"
be
changed
to
a
new
unique
identifier
name
.
"
)
;
#
endif
#
if
ABSL_OPTION_USE_INLINE_NAMESPACE
=
=
0
#
define
ABSL_NAMESPACE_BEGIN
#
define
ABSL_NAMESPACE_END
#
elif
ABSL_OPTION_USE_INLINE_NAMESPACE
=
=
1
#
define
ABSL_NAMESPACE_BEGIN
\
inline
namespace
ABSL_OPTION_INLINE_NAMESPACE_NAME
{
#
define
ABSL_NAMESPACE_END
}
#
else
#
error
options
.
h
is
misconfigured
.
#
endif
#
ifdef
__has_builtin
#
define
ABSL_HAVE_BUILTIN
(
x
)
__has_builtin
(
x
)
#
else
#
define
ABSL_HAVE_BUILTIN
(
x
)
0
#
endif
#
if
defined
(
__is_identifier
)
#
define
ABSL_INTERNAL_HAS_KEYWORD
(
x
)
!
(
__is_identifier
(
x
)
)
#
else
#
define
ABSL_INTERNAL_HAS_KEYWORD
(
x
)
0
#
endif
#
ifdef
__has_feature
#
define
ABSL_HAVE_FEATURE
(
f
)
__has_feature
(
f
)
#
else
#
define
ABSL_HAVE_FEATURE
(
f
)
0
#
endif
#
ifdef
ABSL_HAVE_TLS
#
error
ABSL_HAVE_TLS
cannot
be
directly
set
#
elif
defined
(
__linux__
)
&
&
(
defined
(
__clang__
)
|
|
defined
(
_GLIBCXX_HAVE_TLS
)
)
#
define
ABSL_HAVE_TLS
1
#
endif
#
ifdef
ABSL_HAVE_STD_IS_TRIVIALLY_DESTRUCTIBLE
#
error
ABSL_HAVE_STD_IS_TRIVIALLY_DESTRUCTIBLE
cannot
be
directly
set
#
elif
defined
(
_LIBCPP_VERSION
)
|
|
\
(
!
defined
(
__clang__
)
&
&
defined
(
__GNUC__
)
&
&
defined
(
__GLIBCXX__
)
&
&
\
(
__GNUC__
>
4
|
|
(
__GNUC__
=
=
4
&
&
__GNUC_MINOR__
>
=
8
)
)
)
|
|
\
defined
(
_MSC_VER
)
#
define
ABSL_HAVE_STD_IS_TRIVIALLY_DESTRUCTIBLE
1
#
endif
#
if
defined
(
ABSL_HAVE_STD_IS_TRIVIALLY_CONSTRUCTIBLE
)
#
error
ABSL_HAVE_STD_IS_TRIVIALLY_CONSTRUCTIBLE
cannot
be
directly
set
#
elif
defined
(
ABSL_HAVE_STD_IS_TRIVIALLY_ASSIGNABLE
)
#
error
ABSL_HAVE_STD_IS_TRIVIALLY_ASSIGNABLE
cannot
directly
set
#
elif
(
defined
(
__clang__
)
&
&
defined
(
_LIBCPP_VERSION
)
)
|
|
\
(
!
defined
(
__clang__
)
&
&
defined
(
__GNUC__
)
&
&
\
(
__GNUC__
>
7
|
|
(
__GNUC__
=
=
7
&
&
__GNUC_MINOR__
>
=
4
)
)
&
&
\
(
defined
(
_LIBCPP_VERSION
)
|
|
defined
(
__GLIBCXX__
)
)
)
|
|
\
(
defined
(
_MSC_VER
)
&
&
!
defined
(
__NVCC__
)
)
#
define
ABSL_HAVE_STD_IS_TRIVIALLY_CONSTRUCTIBLE
1
#
define
ABSL_HAVE_STD_IS_TRIVIALLY_ASSIGNABLE
1
#
endif
#
ifndef
ABSL_HAVE_SOURCE_LOCATION_CURRENT
#
if
ABSL_INTERNAL_HAS_KEYWORD
(
__builtin_LINE
)
&
&
\
ABSL_INTERNAL_HAS_KEYWORD
(
__builtin_FILE
)
#
define
ABSL_HAVE_SOURCE_LOCATION_CURRENT
1
#
endif
#
endif
#
ifdef
ABSL_HAVE_THREAD_LOCAL
#
error
ABSL_HAVE_THREAD_LOCAL
cannot
be
directly
set
#
elif
defined
(
__APPLE__
)
#
if
ABSL_HAVE_FEATURE
(
cxx_thread_local
)
&
&
\
!
(
TARGET_OS_IPHONE
&
&
__IPHONE_OS_VERSION_MIN_REQUIRED
<
__IPHONE_9_0
)
#
define
ABSL_HAVE_THREAD_LOCAL
1
#
endif
#
else
#
define
ABSL_HAVE_THREAD_LOCAL
1
#
endif
#
if
defined
(
__ANDROID__
)
&
&
defined
(
__clang__
)
#
if
__has_include
(
<
android
/
ndk
-
version
.
h
>
)
#
include
<
android
/
ndk
-
version
.
h
>
#
endif
#
if
defined
(
__ANDROID__
)
&
&
defined
(
__clang__
)
&
&
defined
(
__NDK_MAJOR__
)
&
&
\
defined
(
__NDK_MINOR__
)
&
&
\
(
(
__NDK_MAJOR__
<
12
)
|
|
(
(
__NDK_MAJOR__
=
=
12
)
&
&
(
__NDK_MINOR__
<
1
)
)
)
#
undef
ABSL_HAVE_TLS
#
undef
ABSL_HAVE_THREAD_LOCAL
#
endif
#
endif
#
ifdef
ABSL_HAVE_INTRINSIC_INT128
#
error
ABSL_HAVE_INTRINSIC_INT128
cannot
be
directly
set
#
elif
defined
(
__SIZEOF_INT128__
)
#
if
(
defined
(
__clang__
)
&
&
!
defined
(
_WIN32
)
)
|
|
\
(
defined
(
__CUDACC__
)
&
&
__CUDACC_VER_MAJOR__
>
=
9
)
|
|
\
(
defined
(
__GNUC__
)
&
&
!
defined
(
__clang__
)
&
&
!
defined
(
__CUDACC__
)
)
#
define
ABSL_HAVE_INTRINSIC_INT128
1
#
elif
defined
(
__CUDACC__
)
#
if
__CUDACC_VER__
>
=
70000
#
define
ABSL_HAVE_INTRINSIC_INT128
1
#
endif
#
endif
#
endif
#
ifdef
ABSL_HAVE_EXCEPTIONS
#
error
ABSL_HAVE_EXCEPTIONS
cannot
be
directly
set
.
#
elif
defined
(
__clang__
)
#
if
__clang_major__
>
3
|
|
(
__clang_major__
=
=
3
&
&
__clang_minor__
>
=
6
)
#
if
ABSL_HAVE_FEATURE
(
cxx_exceptions
)
#
define
ABSL_HAVE_EXCEPTIONS
1
#
endif
#
else
#
if
defined
(
__EXCEPTIONS
)
&
&
ABSL_HAVE_FEATURE
(
cxx_exceptions
)
#
define
ABSL_HAVE_EXCEPTIONS
1
#
endif
#
endif
#
elif
!
(
defined
(
__GNUC__
)
&
&
(
__GNUC__
<
5
)
&
&
!
defined
(
__EXCEPTIONS
)
)
&
&
\
!
(
defined
(
__GNUC__
)
&
&
(
__GNUC__
>
=
5
)
&
&
!
defined
(
__cpp_exceptions
)
)
&
&
\
!
(
defined
(
_MSC_VER
)
&
&
!
defined
(
_CPPUNWIND
)
)
#
define
ABSL_HAVE_EXCEPTIONS
1
#
endif
#
ifdef
ABSL_HAVE_MMAP
#
error
ABSL_HAVE_MMAP
cannot
be
directly
set
#
elif
defined
(
__linux__
)
|
|
defined
(
__APPLE__
)
|
|
defined
(
__FreeBSD__
)
|
|
\
defined
(
__ros__
)
|
|
defined
(
__native_client__
)
|
|
defined
(
__asmjs__
)
|
|
\
defined
(
__wasm__
)
|
|
defined
(
__Fuchsia__
)
|
|
defined
(
__sun
)
|
|
\
defined
(
__ASYLO__
)
#
define
ABSL_HAVE_MMAP
1
#
endif
#
ifdef
ABSL_HAVE_PTHREAD_GETSCHEDPARAM
#
error
ABSL_HAVE_PTHREAD_GETSCHEDPARAM
cannot
be
directly
set
#
elif
defined
(
__linux__
)
|
|
defined
(
__APPLE__
)
|
|
defined
(
__FreeBSD__
)
|
|
\
defined
(
__ros__
)
#
define
ABSL_HAVE_PTHREAD_GETSCHEDPARAM
1
#
endif
#
ifdef
ABSL_HAVE_SCHED_YIELD
#
error
ABSL_HAVE_SCHED_YIELD
cannot
be
directly
set
#
elif
defined
(
__linux__
)
|
|
defined
(
__ros__
)
|
|
defined
(
__native_client__
)
#
define
ABSL_HAVE_SCHED_YIELD
1
#
endif
#
ifdef
ABSL_HAVE_SEMAPHORE_H
#
error
ABSL_HAVE_SEMAPHORE_H
cannot
be
directly
set
#
elif
defined
(
__linux__
)
|
|
defined
(
__ros__
)
#
define
ABSL_HAVE_SEMAPHORE_H
1
#
endif
#
ifdef
ABSL_HAVE_ALARM
#
error
ABSL_HAVE_ALARM
cannot
be
directly
set
#
elif
defined
(
__GOOGLE_GRTE_VERSION__
)
#
define
ABSL_HAVE_ALARM
1
#
elif
defined
(
__GLIBC__
)
#
define
ABSL_HAVE_ALARM
1
#
elif
defined
(
_MSC_VER
)
#
elif
defined
(
__MINGW32__
)
#
elif
defined
(
__EMSCRIPTEN__
)
#
elif
defined
(
__Fuchsia__
)
#
elif
defined
(
__native_client__
)
#
else
#
define
ABSL_HAVE_ALARM
1
#
endif
#
if
defined
(
ABSL_IS_BIG_ENDIAN
)
#
error
"
ABSL_IS_BIG_ENDIAN
cannot
be
directly
set
.
"
#
endif
#
if
defined
(
ABSL_IS_LITTLE_ENDIAN
)
#
error
"
ABSL_IS_LITTLE_ENDIAN
cannot
be
directly
set
.
"
#
endif
#
if
(
defined
(
__BYTE_ORDER__
)
&
&
defined
(
__ORDER_LITTLE_ENDIAN__
)
&
&
\
__BYTE_ORDER__
=
=
__ORDER_LITTLE_ENDIAN__
)
#
define
ABSL_IS_LITTLE_ENDIAN
1
#
elif
defined
(
__BYTE_ORDER__
)
&
&
defined
(
__ORDER_BIG_ENDIAN__
)
&
&
\
__BYTE_ORDER__
=
=
__ORDER_BIG_ENDIAN__
#
define
ABSL_IS_BIG_ENDIAN
1
#
elif
defined
(
_WIN32
)
#
define
ABSL_IS_LITTLE_ENDIAN
1
#
else
#
error
"
absl
endian
detection
needs
to
be
set
up
for
your
compiler
"
#
endif
#
if
defined
(
__APPLE__
)
&
&
defined
(
_LIBCPP_VERSION
)
&
&
\
(
(
defined
(
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
)
&
&
\
__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
<
101400
)
|
|
\
(
defined
(
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
)
&
&
\
__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
<
120000
)
|
|
\
(
defined
(
__ENVIRONMENT_WATCH_OS_VERSION_MIN_REQUIRED__
)
&
&
\
__ENVIRONMENT_WATCH_OS_VERSION_MIN_REQUIRED__
<
50000
)
|
|
\
(
defined
(
__ENVIRONMENT_TV_OS_VERSION_MIN_REQUIRED__
)
&
&
\
__ENVIRONMENT_TV_OS_VERSION_MIN_REQUIRED__
<
120000
)
)
#
define
ABSL_INTERNAL_APPLE_CXX17_TYPES_UNAVAILABLE
1
#
else
#
define
ABSL_INTERNAL_APPLE_CXX17_TYPES_UNAVAILABLE
0
#
endif
#
ifdef
ABSL_HAVE_STD_ANY
#
error
"
ABSL_HAVE_STD_ANY
cannot
be
directly
set
.
"
#
endif
#
ifdef
__has_include
#
if
__has_include
(
<
any
>
)
&
&
__cplusplus
>
=
201703L
&
&
\
!
ABSL_INTERNAL_APPLE_CXX17_TYPES_UNAVAILABLE
#
define
ABSL_HAVE_STD_ANY
1
#
endif
#
endif
#
ifdef
ABSL_HAVE_STD_OPTIONAL
#
error
"
ABSL_HAVE_STD_OPTIONAL
cannot
be
directly
set
.
"
#
endif
#
ifdef
__has_include
#
if
__has_include
(
<
optional
>
)
&
&
__cplusplus
>
=
201703L
&
&
\
!
ABSL_INTERNAL_APPLE_CXX17_TYPES_UNAVAILABLE
#
define
ABSL_HAVE_STD_OPTIONAL
1
#
endif
#
endif
#
ifdef
ABSL_HAVE_STD_VARIANT
#
error
"
ABSL_HAVE_STD_VARIANT
cannot
be
directly
set
.
"
#
endif
#
ifdef
__has_include
#
if
__has_include
(
<
variant
>
)
&
&
__cplusplus
>
=
201703L
&
&
\
!
ABSL_INTERNAL_APPLE_CXX17_TYPES_UNAVAILABLE
#
define
ABSL_HAVE_STD_VARIANT
1
#
endif
#
endif
#
ifdef
ABSL_HAVE_STD_STRING_VIEW
#
error
"
ABSL_HAVE_STD_STRING_VIEW
cannot
be
directly
set
.
"
#
endif
#
ifdef
__has_include
#
if
__has_include
(
<
string_view
>
)
&
&
__cplusplus
>
=
201703L
#
define
ABSL_HAVE_STD_STRING_VIEW
1
#
endif
#
endif
#
if
defined
(
_MSC_VER
)
&
&
_MSC_VER
>
=
1910
&
&
\
(
(
defined
(
_MSVC_LANG
)
&
&
_MSVC_LANG
>
201402
)
|
|
__cplusplus
>
201402
)
#
define
ABSL_HAVE_STD_OPTIONAL
1
#
define
ABSL_HAVE_STD_VARIANT
1
#
define
ABSL_HAVE_STD_STRING_VIEW
1
#
endif
#
if
!
defined
(
ABSL_OPTION_USE_STD_ANY
)
#
error
options
.
h
is
misconfigured
.
#
elif
ABSL_OPTION_USE_STD_ANY
=
=
0
|
|
\
(
ABSL_OPTION_USE_STD_ANY
=
=
2
&
&
!
defined
(
ABSL_HAVE_STD_ANY
)
)
#
undef
ABSL_USES_STD_ANY
#
elif
ABSL_OPTION_USE_STD_ANY
=
=
1
|
|
\
(
ABSL_OPTION_USE_STD_ANY
=
=
2
&
&
defined
(
ABSL_HAVE_STD_ANY
)
)
#
define
ABSL_USES_STD_ANY
1
#
else
#
error
options
.
h
is
misconfigured
.
#
endif
#
if
!
defined
(
ABSL_OPTION_USE_STD_OPTIONAL
)
#
error
options
.
h
is
misconfigured
.
#
elif
ABSL_OPTION_USE_STD_OPTIONAL
=
=
0
|
|
\
(
ABSL_OPTION_USE_STD_OPTIONAL
=
=
2
&
&
!
defined
(
ABSL_HAVE_STD_OPTIONAL
)
)
#
undef
ABSL_USES_STD_OPTIONAL
#
elif
ABSL_OPTION_USE_STD_OPTIONAL
=
=
1
|
|
\
(
ABSL_OPTION_USE_STD_OPTIONAL
=
=
2
&
&
defined
(
ABSL_HAVE_STD_OPTIONAL
)
)
#
define
ABSL_USES_STD_OPTIONAL
1
#
else
#
error
options
.
h
is
misconfigured
.
#
endif
#
if
!
defined
(
ABSL_OPTION_USE_STD_VARIANT
)
#
error
options
.
h
is
misconfigured
.
#
elif
ABSL_OPTION_USE_STD_VARIANT
=
=
0
|
|
\
(
ABSL_OPTION_USE_STD_VARIANT
=
=
2
&
&
!
defined
(
ABSL_HAVE_STD_VARIANT
)
)
#
undef
ABSL_USES_STD_VARIANT
#
elif
ABSL_OPTION_USE_STD_VARIANT
=
=
1
|
|
\
(
ABSL_OPTION_USE_STD_VARIANT
=
=
2
&
&
defined
(
ABSL_HAVE_STD_VARIANT
)
)
#
define
ABSL_USES_STD_VARIANT
1
#
else
#
error
options
.
h
is
misconfigured
.
#
endif
#
if
!
defined
(
ABSL_OPTION_USE_STD_STRING_VIEW
)
#
error
options
.
h
is
misconfigured
.
#
elif
ABSL_OPTION_USE_STD_STRING_VIEW
=
=
0
|
|
\
(
ABSL_OPTION_USE_STD_STRING_VIEW
=
=
2
&
&
\
!
defined
(
ABSL_HAVE_STD_STRING_VIEW
)
)
#
undef
ABSL_USES_STD_STRING_VIEW
#
elif
ABSL_OPTION_USE_STD_STRING_VIEW
=
=
1
|
|
\
(
ABSL_OPTION_USE_STD_STRING_VIEW
=
=
2
&
&
\
defined
(
ABSL_HAVE_STD_STRING_VIEW
)
)
#
define
ABSL_USES_STD_STRING_VIEW
1
#
else
#
error
options
.
h
is
misconfigured
.
#
endif
#
if
defined
(
_MSC_VER
)
&
&
_MSC_VER
>
=
1700
&
&
defined
(
_DEBUG
)
#
define
ABSL_INTERNAL_MSVC_2017_DBG_MODE
#
endif
#
if
defined
(
_MSC_VER
)
#
if
ABSL_OPTION_USE_INLINE_NAMESPACE
=
=
0
#
define
ABSL_INTERNAL_MANGLED_NS
"
absl
"
#
define
ABSL_INTERNAL_MANGLED_BACKREFERENCE
"
5
"
#
else
#
define
ABSL_INTERNAL_MANGLED_NS
\
ABSL_INTERNAL_TOKEN_STR
(
ABSL_OPTION_INLINE_NAMESPACE_NAME
)
"
absl
"
#
define
ABSL_INTERNAL_MANGLED_BACKREFERENCE
"
6
"
#
endif
#
endif
#
undef
ABSL_INTERNAL_HAS_KEYWORD
#
if
defined
(
_MSC_VER
)
#
if
defined
(
ABSL_BUILD_DLL
)
#
define
ABSL_DLL
__declspec
(
dllexport
)
#
elif
defined
(
ABSL_CONSUME_DLL
)
#
define
ABSL_DLL
__declspec
(
dllimport
)
#
else
#
define
ABSL_DLL
#
endif
#
else
#
define
ABSL_DLL
#
endif
#
ifdef
ABSL_HAVE_MEMORY_SANITIZER
#
error
"
ABSL_HAVE_MEMORY_SANITIZER
cannot
be
directly
set
.
"
#
elif
defined
(
MEMORY_SANITIZER
)
#
define
ABSL_HAVE_MEMORY_SANITIZER
1
#
elif
defined
(
__SANITIZE_MEMORY__
)
#
define
ABSL_HAVE_MEMORY_SANITIZER
1
#
elif
!
defined
(
__native_client__
)
&
&
ABSL_HAVE_FEATURE
(
memory_sanitizer
)
#
define
ABSL_HAVE_MEMORY_SANITIZER
1
#
endif
#
ifdef
ABSL_HAVE_THREAD_SANITIZER
#
error
"
ABSL_HAVE_THREAD_SANITIZER
cannot
be
directly
set
.
"
#
elif
defined
(
THREAD_SANITIZER
)
#
define
ABSL_HAVE_THREAD_SANITIZER
1
#
elif
defined
(
__SANITIZE_THREAD__
)
#
define
ABSL_HAVE_THREAD_SANITIZER
1
#
elif
ABSL_HAVE_FEATURE
(
thread_sanitizer
)
#
define
ABSL_HAVE_THREAD_SANITIZER
1
#
endif
#
ifdef
ABSL_HAVE_ADDRESS_SANITIZER
#
error
"
ABSL_HAVE_ADDRESS_SANITIZER
cannot
be
directly
set
.
"
#
elif
defined
(
ADDRESS_SANITIZER
)
#
define
ABSL_HAVE_ADDRESS_SANITIZER
1
#
elif
defined
(
__SANITIZE_ADDRESS__
)
#
define
ABSL_HAVE_ADDRESS_SANITIZER
1
#
elif
ABSL_HAVE_FEATURE
(
address_sanitizer
)
#
define
ABSL_HAVE_ADDRESS_SANITIZER
1
#
endif
#
endif
