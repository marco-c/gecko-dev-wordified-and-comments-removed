#
ifndef
ABSL_LOG_INTERNAL_TEST_ACTIONS_H_
#
define
ABSL_LOG_INTERNAL_TEST_ACTIONS_H_
#
include
<
iostream
>
#
include
<
ostream
>
#
include
<
string
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
log_severity
.
h
"
#
include
"
absl
/
log
/
log_entry
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
log_internal
{
struct
WriteToStderr
final
{
explicit
WriteToStderr
(
absl
:
:
string_view
m
)
:
message
(
m
)
{
}
std
:
:
string
message
;
template
<
typename
.
.
.
Args
>
void
operator
(
)
(
const
Args
&
.
.
.
)
const
{
std
:
:
cerr
<
<
message
<
<
std
:
:
endl
;
}
}
;
struct
WriteToStderrWithFilename
final
{
explicit
WriteToStderrWithFilename
(
absl
:
:
string_view
m
)
:
message
(
m
)
{
}
std
:
:
string
message
;
void
operator
(
)
(
const
absl
:
:
LogEntry
&
entry
)
const
;
}
;
struct
WriteEntryToStderr
final
{
explicit
WriteEntryToStderr
(
absl
:
:
string_view
m
)
:
message
(
m
)
{
}
std
:
:
string
message
=
"
"
;
void
operator
(
)
(
const
absl
:
:
LogEntry
&
entry
)
const
;
void
operator
(
)
(
absl
:
:
LogSeverity
absl
:
:
string_view
absl
:
:
string_view
)
const
;
}
;
inline
WriteEntryToStderr
DeathTestExpectedLogging
(
)
{
return
WriteEntryToStderr
{
"
Mock
received
expected
entry
:
"
}
;
}
inline
WriteEntryToStderr
DeathTestUnexpectedLogging
(
)
{
return
WriteEntryToStderr
{
"
Mock
received
unexpected
entry
:
"
}
;
}
}
ABSL_NAMESPACE_END
}
#
endif
