#
ifndef
ABSL_LOG_INTERNAL_APPEND_TRUNCATED_H_
#
define
ABSL_LOG_INTERNAL_APPEND_TRUNCATED_H_
#
include
<
cstddef
>
#
include
<
cstring
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
span
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
log_internal
{
inline
size_t
AppendTruncated
(
absl
:
:
string_view
src
absl
:
:
Span
<
char
>
&
dst
)
{
if
(
src
.
size
(
)
>
dst
.
size
(
)
)
src
=
src
.
substr
(
0
dst
.
size
(
)
)
;
memcpy
(
dst
.
data
(
)
src
.
data
(
)
src
.
size
(
)
)
;
dst
.
remove_prefix
(
src
.
size
(
)
)
;
return
src
.
size
(
)
;
}
inline
size_t
AppendTruncated
(
char
c
size_t
n
absl
:
:
Span
<
char
>
&
dst
)
{
if
(
n
>
dst
.
size
(
)
)
n
=
dst
.
size
(
)
;
memset
(
dst
.
data
(
)
c
n
)
;
dst
.
remove_prefix
(
n
)
;
return
n
;
}
}
ABSL_NAMESPACE_END
}
#
endif
