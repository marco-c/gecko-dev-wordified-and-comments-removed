#
ifndef
ABSL_LOG_LOG_STREAMER_H_
#
define
ABSL_LOG_LOG_STREAMER_H_
#
include
<
ios
>
#
include
<
memory
>
#
include
<
ostream
>
#
include
<
string
>
#
include
<
utility
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
log_severity
.
h
"
#
include
"
absl
/
log
/
absl_log
.
h
"
#
include
"
absl
/
strings
/
internal
/
ostringstream
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
absl
/
utility
/
utility
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
class
LogStreamer
final
{
public
:
explicit
LogStreamer
(
absl
:
:
LogSeverity
severity
absl
:
:
string_view
file
int
line
)
:
severity_
(
severity
)
line_
(
line
)
file_
(
file
)
stream_
(
absl
:
:
in_place
&
buf_
)
{
stream_
-
>
setf
(
std
:
:
ios_base
:
:
showbase
|
std
:
:
ios_base
:
:
boolalpha
)
;
}
LogStreamer
(
LogStreamer
&
&
that
)
noexcept
:
severity_
(
that
.
severity_
)
line_
(
that
.
line_
)
file_
(
std
:
:
move
(
that
.
file_
)
)
buf_
(
std
:
:
move
(
that
.
buf_
)
)
stream_
(
std
:
:
move
(
that
.
stream_
)
)
{
if
(
stream_
.
has_value
(
)
)
stream_
-
>
str
(
&
buf_
)
;
that
.
stream_
.
reset
(
)
;
}
LogStreamer
&
operator
=
(
LogStreamer
&
&
that
)
{
ABSL_LOG_IF
(
LEVEL
(
severity_
)
stream_
)
.
AtLocation
(
file_
line_
)
<
<
buf_
;
severity_
=
that
.
severity_
;
file_
=
std
:
:
move
(
that
.
file_
)
;
line_
=
that
.
line_
;
buf_
=
std
:
:
move
(
that
.
buf_
)
;
stream_
=
std
:
:
move
(
that
.
stream_
)
;
if
(
stream_
.
has_value
(
)
)
stream_
-
>
str
(
&
buf_
)
;
that
.
stream_
.
reset
(
)
;
return
*
this
;
}
~
LogStreamer
(
)
{
ABSL_LOG_IF
(
LEVEL
(
severity_
)
stream_
.
has_value
(
)
)
.
AtLocation
(
file_
line_
)
<
<
buf_
;
}
std
:
:
ostream
&
stream
(
)
{
return
*
stream_
;
}
private
:
absl
:
:
LogSeverity
severity_
;
int
line_
;
std
:
:
string
file_
;
std
:
:
string
buf_
;
absl
:
:
optional
<
absl
:
:
strings_internal
:
:
OStringStream
>
stream_
;
}
;
inline
LogStreamer
LogInfoStreamer
(
absl
:
:
string_view
file
int
line
)
{
return
absl
:
:
LogStreamer
(
absl
:
:
LogSeverity
:
:
kInfo
file
line
)
;
}
inline
LogStreamer
LogWarningStreamer
(
absl
:
:
string_view
file
int
line
)
{
return
absl
:
:
LogStreamer
(
absl
:
:
LogSeverity
:
:
kWarning
file
line
)
;
}
inline
LogStreamer
LogErrorStreamer
(
absl
:
:
string_view
file
int
line
)
{
return
absl
:
:
LogStreamer
(
absl
:
:
LogSeverity
:
:
kError
file
line
)
;
}
inline
LogStreamer
LogFatalStreamer
(
absl
:
:
string_view
file
int
line
)
{
return
absl
:
:
LogStreamer
(
absl
:
:
LogSeverity
:
:
kFatal
file
line
)
;
}
inline
LogStreamer
LogDebugFatalStreamer
(
absl
:
:
string_view
file
int
line
)
{
return
absl
:
:
LogStreamer
(
absl
:
:
kLogDebugFatal
file
line
)
;
}
ABSL_NAMESPACE_END
}
#
endif
