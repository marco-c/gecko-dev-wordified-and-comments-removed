#
ifndef
ABSL_TYPES_BAD_VARIANT_ACCESS_H_
#
define
ABSL_TYPES_BAD_VARIANT_ACCESS_H_
#
include
<
stdexcept
>
#
include
"
absl
/
base
/
config
.
h
"
#
ifdef
ABSL_USES_STD_VARIANT
#
include
<
variant
>
namespace
absl
{
ABSL_NAMESPACE_BEGIN
using
std
:
:
bad_variant_access
;
ABSL_NAMESPACE_END
}
#
else
namespace
absl
{
ABSL_NAMESPACE_BEGIN
class
bad_variant_access
:
public
std
:
:
exception
{
public
:
bad_variant_access
(
)
noexcept
=
default
;
~
bad_variant_access
(
)
override
;
const
char
*
what
(
)
const
noexcept
override
;
}
;
namespace
variant_internal
{
[
[
noreturn
]
]
void
ThrowBadVariantAccess
(
)
;
[
[
noreturn
]
]
void
Rethrow
(
)
;
}
ABSL_NAMESPACE_END
}
#
endif
#
endif
