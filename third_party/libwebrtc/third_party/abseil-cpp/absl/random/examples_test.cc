#
include
<
cinttypes
>
#
include
<
random
>
#
include
<
sstream
>
#
include
<
vector
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
random
/
random
.
h
"
template
<
typename
T
>
void
Use
(
T
)
{
}
TEST
(
Examples
Basic
)
{
absl
:
:
BitGen
gen
;
std
:
:
vector
<
int
>
objs
=
{
10
20
30
40
50
}
;
auto
elem
=
objs
[
absl
:
:
Uniform
(
gen
0u
objs
.
size
(
)
)
]
;
Use
(
elem
)
;
auto
dice_roll
=
absl
:
:
Uniform
<
int
>
(
absl
:
:
IntervalClosedClosed
gen
1
6
)
;
Use
(
dice_roll
)
;
auto
byte
=
absl
:
:
Uniform
<
uint8_t
>
(
gen
)
;
Use
(
byte
)
;
auto
fraction
=
absl
:
:
Uniform
<
float
>
(
gen
0
1
)
;
Use
(
fraction
)
;
bool
coin_toss
=
absl
:
:
Bernoulli
(
gen
0
.
5
)
;
Use
(
coin_toss
)
;
auto
file_size
=
absl
:
:
LogUniform
<
size_t
>
(
gen
1000
10
*
1000
*
1000
)
;
Use
(
file_size
)
;
std
:
:
shuffle
(
std
:
:
begin
(
objs
)
std
:
:
end
(
objs
)
gen
)
;
}
TEST
(
Examples
CreateingCorrelatedVariateSequences
)
{
{
auto
my_seed
=
absl
:
:
MakeSeedSeq
(
)
;
absl
:
:
BitGen
gen_1
(
my_seed
)
;
absl
:
:
BitGen
gen_2
(
my_seed
)
;
EXPECT_EQ
(
absl
:
:
Bernoulli
(
gen_1
0
.
5
)
absl
:
:
Bernoulli
(
gen_2
0
.
5
)
)
;
EXPECT_EQ
(
absl
:
:
Uniform
<
uint32_t
>
(
gen_1
)
absl
:
:
Uniform
<
uint32_t
>
(
gen_2
)
)
;
}
{
absl
:
:
BitGen
gen
;
auto
my_seed
=
absl
:
:
CreateSeedSeqFrom
(
&
gen
)
;
absl
:
:
BitGen
gen_1
(
my_seed
)
;
absl
:
:
BitGen
gen_2
(
my_seed
)
;
EXPECT_EQ
(
absl
:
:
Bernoulli
(
gen_1
0
.
5
)
absl
:
:
Bernoulli
(
gen_2
0
.
5
)
)
;
EXPECT_EQ
(
absl
:
:
Uniform
<
uint32_t
>
(
gen_1
)
absl
:
:
Uniform
<
uint32_t
>
(
gen_2
)
)
;
}
{
const
char
kData
[
]
=
"
A
simple
seed
string
"
;
std
:
:
seed_seq
my_seed
(
std
:
:
begin
(
kData
)
std
:
:
end
(
kData
)
)
;
absl
:
:
BitGen
gen_1
(
my_seed
)
;
absl
:
:
BitGen
gen_2
(
my_seed
)
;
EXPECT_EQ
(
absl
:
:
Bernoulli
(
gen_1
0
.
5
)
absl
:
:
Bernoulli
(
gen_2
0
.
5
)
)
;
EXPECT_EQ
(
absl
:
:
Uniform
<
uint32_t
>
(
gen_1
)
absl
:
:
Uniform
<
uint32_t
>
(
gen_2
)
)
;
}
}
