#
include
"
absl
/
random
/
internal
/
fast_uniform_bits
.
h
"
#
include
<
random
>
#
include
"
gtest
/
gtest
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
random_internal
{
namespace
{
template
<
typename
IntType
>
class
FastUniformBitsTypedTest
:
public
:
:
testing
:
:
Test
{
}
;
using
IntTypes
=
:
:
testing
:
:
Types
<
uint8_t
uint16_t
uint32_t
uint64_t
>
;
TYPED_TEST_SUITE
(
FastUniformBitsTypedTest
IntTypes
)
;
TYPED_TEST
(
FastUniformBitsTypedTest
BasicTest
)
{
using
Limits
=
std
:
:
numeric_limits
<
TypeParam
>
;
using
FastBits
=
FastUniformBits
<
TypeParam
>
;
EXPECT_EQ
(
0
(
FastBits
:
:
min
)
(
)
)
;
EXPECT_EQ
(
(
Limits
:
:
max
)
(
)
(
FastBits
:
:
max
)
(
)
)
;
constexpr
int
kIters
=
10000
;
std
:
:
random_device
rd
;
std
:
:
mt19937
gen
(
rd
(
)
)
;
FastBits
fast
;
for
(
int
i
=
0
;
i
<
kIters
;
i
+
+
)
{
const
auto
v
=
fast
(
gen
)
;
EXPECT_LE
(
v
(
FastBits
:
:
max
)
(
)
)
;
EXPECT_GE
(
v
(
FastBits
:
:
min
)
(
)
)
;
}
}
template
<
typename
UIntType
UIntType
Lo
UIntType
Hi
UIntType
Val
=
Lo
>
struct
FakeUrbg
{
using
result_type
=
UIntType
;
FakeUrbg
(
)
=
default
;
explicit
FakeUrbg
(
bool
r
)
:
reject
(
r
)
{
}
static
constexpr
result_type
(
max
)
(
)
{
return
Hi
;
}
static
constexpr
result_type
(
min
)
(
)
{
return
Lo
;
}
result_type
operator
(
)
(
)
{
return
(
(
+
+
calls
%
2
)
=
=
1
&
&
reject
)
?
Hi
:
Val
;
}
bool
reject
=
false
;
size_t
calls
=
0
;
}
;
TEST
(
FastUniformBitsTest
IsPowerOfTwoOrZero
)
{
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint8_t
{
0
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint8_t
{
1
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint8_t
{
2
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
uint8_t
{
3
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint8_t
{
4
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint8_t
{
16
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
uint8_t
{
17
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
(
std
:
:
numeric_limits
<
uint8_t
>
:
:
max
)
(
)
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint16_t
{
0
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint16_t
{
1
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint16_t
{
2
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
uint16_t
{
3
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint16_t
{
4
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint16_t
{
16
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
uint16_t
{
17
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
(
std
:
:
numeric_limits
<
uint16_t
>
:
:
max
)
(
)
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint32_t
{
0
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint32_t
{
1
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint32_t
{
2
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
uint32_t
{
3
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint32_t
{
32
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
uint32_t
{
17
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
(
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
)
(
)
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint64_t
{
0
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint64_t
{
1
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint64_t
{
2
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
uint64_t
{
3
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint64_t
{
4
}
)
)
;
EXPECT_TRUE
(
IsPowerOfTwoOrZero
(
uint64_t
{
64
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
uint64_t
{
17
}
)
)
;
EXPECT_FALSE
(
IsPowerOfTwoOrZero
(
(
std
:
:
numeric_limits
<
uint64_t
>
:
:
max
)
(
)
)
)
;
}
TEST
(
FastUniformBitsTest
IntegerLog2
)
{
EXPECT_EQ
(
0
IntegerLog2
(
uint16_t
{
0
}
)
)
;
EXPECT_EQ
(
0
IntegerLog2
(
uint16_t
{
1
}
)
)
;
EXPECT_EQ
(
1
IntegerLog2
(
uint16_t
{
2
}
)
)
;
EXPECT_EQ
(
1
IntegerLog2
(
uint16_t
{
3
}
)
)
;
EXPECT_EQ
(
2
IntegerLog2
(
uint16_t
{
4
}
)
)
;
EXPECT_EQ
(
2
IntegerLog2
(
uint16_t
{
5
}
)
)
;
EXPECT_EQ
(
2
IntegerLog2
(
uint16_t
{
7
}
)
)
;
EXPECT_EQ
(
3
IntegerLog2
(
uint16_t
{
8
}
)
)
;
EXPECT_EQ
(
63
IntegerLog2
(
(
std
:
:
numeric_limits
<
uint64_t
>
:
:
max
)
(
)
)
)
;
}
TEST
(
FastUniformBitsTest
RangeSize
)
{
EXPECT_EQ
(
2
(
RangeSize
<
FakeUrbg
<
uint8_t
0
1
>
>
(
)
)
)
;
EXPECT_EQ
(
3
(
RangeSize
<
FakeUrbg
<
uint8_t
0
2
>
>
(
)
)
)
;
EXPECT_EQ
(
4
(
RangeSize
<
FakeUrbg
<
uint8_t
0
3
>
>
(
)
)
)
;
EXPECT_EQ
(
4
(
RangeSize
<
FakeUrbg
<
uint8_t
2
5
>
>
(
)
)
)
;
EXPECT_EQ
(
5
(
RangeSize
<
FakeUrbg
<
uint8_t
2
6
>
>
(
)
)
)
;
EXPECT_EQ
(
9
(
RangeSize
<
FakeUrbg
<
uint8_t
2
10
>
>
(
)
)
)
;
EXPECT_EQ
(
0
(
RangeSize
<
FakeUrbg
<
uint8_t
0
(
std
:
:
numeric_limits
<
uint8_t
>
:
:
max
)
(
)
>
>
(
)
)
)
;
EXPECT_EQ
(
4
(
RangeSize
<
FakeUrbg
<
uint16_t
0
3
>
>
(
)
)
)
;
EXPECT_EQ
(
4
(
RangeSize
<
FakeUrbg
<
uint16_t
2
5
>
>
(
)
)
)
;
EXPECT_EQ
(
5
(
RangeSize
<
FakeUrbg
<
uint16_t
2
6
>
>
(
)
)
)
;
EXPECT_EQ
(
18
(
RangeSize
<
FakeUrbg
<
uint16_t
1000
1017
>
>
(
)
)
)
;
EXPECT_EQ
(
0
(
RangeSize
<
FakeUrbg
<
uint16_t
0
(
std
:
:
numeric_limits
<
uint16_t
>
:
:
max
)
(
)
>
>
(
)
)
)
;
EXPECT_EQ
(
4
(
RangeSize
<
FakeUrbg
<
uint32_t
0
3
>
>
(
)
)
)
;
EXPECT_EQ
(
4
(
RangeSize
<
FakeUrbg
<
uint32_t
2
5
>
>
(
)
)
)
;
EXPECT_EQ
(
5
(
RangeSize
<
FakeUrbg
<
uint32_t
2
6
>
>
(
)
)
)
;
EXPECT_EQ
(
18
(
RangeSize
<
FakeUrbg
<
uint32_t
1000
1017
>
>
(
)
)
)
;
EXPECT_EQ
(
0
(
RangeSize
<
FakeUrbg
<
uint32_t
0
0xffffffff
>
>
(
)
)
)
;
EXPECT_EQ
(
0xffffffff
(
RangeSize
<
FakeUrbg
<
uint32_t
1
0xffffffff
>
>
(
)
)
)
;
EXPECT_EQ
(
0xfffffffe
(
RangeSize
<
FakeUrbg
<
uint32_t
1
0xfffffffe
>
>
(
)
)
)
;
EXPECT_EQ
(
0xfffffffd
(
RangeSize
<
FakeUrbg
<
uint32_t
2
0xfffffffe
>
>
(
)
)
)
;
EXPECT_EQ
(
0
(
RangeSize
<
FakeUrbg
<
uint32_t
0
(
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
)
(
)
>
>
(
)
)
)
;
EXPECT_EQ
(
4
(
RangeSize
<
FakeUrbg
<
uint64_t
0
3
>
>
(
)
)
)
;
EXPECT_EQ
(
4
(
RangeSize
<
FakeUrbg
<
uint64_t
2
5
>
>
(
)
)
)
;
EXPECT_EQ
(
5
(
RangeSize
<
FakeUrbg
<
uint64_t
2
6
>
>
(
)
)
)
;
EXPECT_EQ
(
18
(
RangeSize
<
FakeUrbg
<
uint64_t
1000
1017
>
>
(
)
)
)
;
EXPECT_EQ
(
0x100000000
(
RangeSize
<
FakeUrbg
<
uint64_t
0
0xffffffff
>
>
(
)
)
)
;
EXPECT_EQ
(
0xffffffff
(
RangeSize
<
FakeUrbg
<
uint64_t
1
0xffffffff
>
>
(
)
)
)
;
EXPECT_EQ
(
0xfffffffe
(
RangeSize
<
FakeUrbg
<
uint64_t
1
0xfffffffe
>
>
(
)
)
)
;
EXPECT_EQ
(
0xfffffffd
(
RangeSize
<
FakeUrbg
<
uint64_t
2
0xfffffffe
>
>
(
)
)
)
;
EXPECT_EQ
(
0
(
RangeSize
<
FakeUrbg
<
uint64_t
0
0xffffffffffffffff
>
>
(
)
)
)
;
EXPECT_EQ
(
0xffffffffffffffff
(
RangeSize
<
FakeUrbg
<
uint64_t
1
0xffffffffffffffff
>
>
(
)
)
)
;
EXPECT_EQ
(
0xfffffffffffffffe
(
RangeSize
<
FakeUrbg
<
uint64_t
1
0xfffffffffffffffe
>
>
(
)
)
)
;
EXPECT_EQ
(
0xfffffffffffffffd
(
RangeSize
<
FakeUrbg
<
uint64_t
2
0xfffffffffffffffe
>
>
(
)
)
)
;
EXPECT_EQ
(
0
(
RangeSize
<
FakeUrbg
<
uint64_t
0
(
std
:
:
numeric_limits
<
uint64_t
>
:
:
max
)
(
)
>
>
(
)
)
)
;
}
using
Urng1_5bit
=
FakeUrbg
<
uint8_t
0
2
0
>
;
using
Urng4bits
=
FakeUrbg
<
uint8_t
1
0x10
2
>
;
using
Urng22bits
=
FakeUrbg
<
uint32_t
0
0x3fffff
0x301020
>
;
using
Urng31bits
=
FakeUrbg
<
uint32_t
1
0xfffffffe
0x60070f03
>
;
using
Urng32bits
=
FakeUrbg
<
uint32_t
0
0xffffffff
0x74010f01
>
;
using
Urng33bits
=
FakeUrbg
<
uint64_t
1
0x1ffffffff
0x013301033
>
;
using
Urng63bits
=
FakeUrbg
<
uint64_t
1
0xfffffffffffffffe
0xfedcba9012345678
>
;
using
Urng64bits
=
FakeUrbg
<
uint64_t
0
0xffffffffffffffff
0x123456780fedcba9
>
;
TEST
(
FastUniformBitsTest
OutputsUpTo32Bits
)
{
Urng1_5bit
urng1_5
;
Urng4bits
urng4
;
Urng22bits
urng22
;
Urng31bits
urng31
;
Urng32bits
urng32
;
Urng33bits
urng33
;
Urng63bits
urng63
;
Urng64bits
urng64
;
{
FastUniformBits
<
uint8_t
>
fast8
;
EXPECT_EQ
(
0x0
fast8
(
urng1_5
)
)
;
EXPECT_EQ
(
0x11
fast8
(
urng4
)
)
;
EXPECT_EQ
(
0x20
fast8
(
urng22
)
)
;
EXPECT_EQ
(
0x2
fast8
(
urng31
)
)
;
EXPECT_EQ
(
0x1
fast8
(
urng32
)
)
;
EXPECT_EQ
(
0x32
fast8
(
urng33
)
)
;
EXPECT_EQ
(
0x77
fast8
(
urng63
)
)
;
EXPECT_EQ
(
0xa9
fast8
(
urng64
)
)
;
}
{
FastUniformBits
<
uint16_t
>
fast16
;
EXPECT_EQ
(
0x0
fast16
(
urng1_5
)
)
;
EXPECT_EQ
(
0x1111
fast16
(
urng4
)
)
;
EXPECT_EQ
(
0x1020
fast16
(
urng22
)
)
;
EXPECT_EQ
(
0x0f02
fast16
(
urng31
)
)
;
EXPECT_EQ
(
0x0f01
fast16
(
urng32
)
)
;
EXPECT_EQ
(
0x1032
fast16
(
urng33
)
)
;
EXPECT_EQ
(
0x5677
fast16
(
urng63
)
)
;
EXPECT_EQ
(
0xcba9
fast16
(
urng64
)
)
;
}
{
FastUniformBits
<
uint32_t
>
fast32
;
EXPECT_EQ
(
0x0
fast32
(
urng1_5
)
)
;
EXPECT_EQ
(
0x11111111
fast32
(
urng4
)
)
;
EXPECT_EQ
(
0x08301020
fast32
(
urng22
)
)
;
EXPECT_EQ
(
0x0f020f02
fast32
(
urng31
)
)
;
EXPECT_EQ
(
0x74010f01
fast32
(
urng32
)
)
;
EXPECT_EQ
(
0x13301032
fast32
(
urng33
)
)
;
EXPECT_EQ
(
0x12345677
fast32
(
urng63
)
)
;
EXPECT_EQ
(
0x0fedcba9
fast32
(
urng64
)
)
;
}
}
TEST
(
FastUniformBitsTest
Outputs64Bits
)
{
FastUniformBits
<
uint64_t
>
fast64
;
{
FakeUrbg
<
uint8_t
0
1
0
>
urng0
;
FakeUrbg
<
uint8_t
0
1
1
>
urng1
;
Urng4bits
urng4
;
Urng22bits
urng22
;
Urng31bits
urng31
;
Urng32bits
urng32
;
Urng33bits
urng33
;
Urng63bits
urng63
;
Urng64bits
urng64
;
EXPECT_EQ
(
0x0
fast64
(
urng0
)
)
;
EXPECT_EQ
(
64
urng0
.
calls
)
;
EXPECT_EQ
(
0xffffffffffffffff
fast64
(
urng1
)
)
;
EXPECT_EQ
(
64
urng1
.
calls
)
;
EXPECT_EQ
(
0x1111111111111111
fast64
(
urng4
)
)
;
EXPECT_EQ
(
16
urng4
.
calls
)
;
EXPECT_EQ
(
0x01020c0408301020
fast64
(
urng22
)
)
;
EXPECT_EQ
(
3
urng22
.
calls
)
;
EXPECT_EQ
(
0x387811c3c0870f02
fast64
(
urng31
)
)
;
EXPECT_EQ
(
3
urng31
.
calls
)
;
EXPECT_EQ
(
0x74010f0174010f01
fast64
(
urng32
)
)
;
EXPECT_EQ
(
2
urng32
.
calls
)
;
EXPECT_EQ
(
0x808194040cb01032
fast64
(
urng33
)
)
;
EXPECT_EQ
(
3
urng33
.
calls
)
;
EXPECT_EQ
(
0x1234567712345677
fast64
(
urng63
)
)
;
EXPECT_EQ
(
2
urng63
.
calls
)
;
EXPECT_EQ
(
0x123456780fedcba9
fast64
(
urng64
)
)
;
EXPECT_EQ
(
1
urng64
.
calls
)
;
}
{
Urng1_5bit
urng1_5
;
EXPECT_EQ
(
0x0
fast64
(
urng1_5
)
)
;
EXPECT_EQ
(
65
urng1_5
.
calls
)
;
}
{
Urng1_5bit
urng1_5
(
true
)
;
Urng31bits
urng31
(
true
)
;
Urng33bits
urng33
(
true
)
;
Urng63bits
urng63
(
true
)
;
EXPECT_EQ
(
0
fast64
(
urng1_5
)
)
;
EXPECT_EQ
(
128
urng1_5
.
calls
)
;
EXPECT_EQ
(
0x387811c3c0870f02
fast64
(
urng31
)
)
;
EXPECT_EQ
(
6
urng31
.
calls
)
;
EXPECT_EQ
(
0x808194040cb01032
fast64
(
urng33
)
)
;
EXPECT_EQ
(
6
urng33
.
calls
)
;
EXPECT_EQ
(
0x1234567712345677
fast64
(
urng63
)
)
;
EXPECT_EQ
(
4
urng63
.
calls
)
;
}
}
TEST
(
FastUniformBitsTest
URBG32bitRegression
)
{
EXPECT_EQ
(
2147483646
RangeSize
<
std
:
:
minstd_rand
>
(
)
)
;
EXPECT_EQ
(
30
IntegerLog2
(
RangeSize
<
std
:
:
minstd_rand
>
(
)
)
)
;
std
:
:
minstd_rand
gen
(
1
)
;
FastUniformBits
<
uint64_t
>
fast64
;
EXPECT_EQ
(
0x05e47095f8791f45
fast64
(
gen
)
)
;
EXPECT_EQ
(
0x028be17e3c07c122
fast64
(
gen
)
)
;
EXPECT_EQ
(
0x55d2847c1626e8c2
fast64
(
gen
)
)
;
}
}
}
ABSL_NAMESPACE_END
}
