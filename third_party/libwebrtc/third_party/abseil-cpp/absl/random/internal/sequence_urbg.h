#
ifndef
ABSL_RANDOM_INTERNAL_SEQUENCE_URBG_H_
#
define
ABSL_RANDOM_INTERNAL_SEQUENCE_URBG_H_
#
include
<
cstdint
>
#
include
<
cstring
>
#
include
<
limits
>
#
include
<
type_traits
>
#
include
<
vector
>
#
include
"
absl
/
base
/
config
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
random_internal
{
class
sequence_urbg
{
public
:
using
result_type
=
uint64_t
;
static
constexpr
result_type
(
min
)
(
)
{
return
(
std
:
:
numeric_limits
<
result_type
>
:
:
min
)
(
)
;
}
static
constexpr
result_type
(
max
)
(
)
{
return
(
std
:
:
numeric_limits
<
result_type
>
:
:
max
)
(
)
;
}
sequence_urbg
(
std
:
:
initializer_list
<
result_type
>
data
)
:
i_
(
0
)
data_
(
data
)
{
}
void
reset
(
)
{
i_
=
0
;
}
result_type
operator
(
)
(
)
{
return
data_
[
i_
+
+
%
data_
.
size
(
)
]
;
}
size_t
invocations
(
)
const
{
return
i_
;
}
private
:
size_t
i_
;
std
:
:
vector
<
result_type
>
data_
;
}
;
}
ABSL_NAMESPACE_END
}
#
endif
