#
ifndef
ABSL_RANDOM_INTERNAL_TRAITS_H_
#
define
ABSL_RANDOM_INTERNAL_TRAITS_H_
#
include
<
cstdint
>
#
include
<
limits
>
#
include
<
type_traits
>
#
include
"
absl
/
base
/
config
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
random_internal
{
template
<
typename
A
typename
B
>
class
is_widening_convertible
{
template
<
class
T
>
static
constexpr
int
rank
(
)
{
return
!
std
:
:
numeric_limits
<
T
>
:
:
is_integer
+
std
:
:
numeric_limits
<
T
>
:
:
is_signed
;
}
public
:
static
constexpr
bool
value
=
std
:
:
numeric_limits
<
A
>
:
:
digits
<
=
std
:
:
numeric_limits
<
B
>
:
:
digits
&
&
rank
<
A
>
(
)
<
=
rank
<
B
>
(
)
;
}
;
template
<
size_t
N
>
struct
unsigned_bits
;
template
<
>
struct
unsigned_bits
<
8
>
{
using
type
=
uint8_t
;
}
;
template
<
>
struct
unsigned_bits
<
16
>
{
using
type
=
uint16_t
;
}
;
template
<
>
struct
unsigned_bits
<
32
>
{
using
type
=
uint32_t
;
}
;
template
<
>
struct
unsigned_bits
<
64
>
{
using
type
=
uint64_t
;
}
;
#
ifdef
ABSL_HAVE_INTRINSIC_INT128
template
<
>
struct
unsigned_bits
<
128
>
{
using
type
=
__uint128_t
;
}
;
#
endif
template
<
typename
IntType
>
struct
make_unsigned_bits
{
using
type
=
typename
unsigned_bits
<
std
:
:
numeric_limits
<
typename
std
:
:
make_unsigned
<
IntType
>
:
:
type
>
:
:
digits
>
:
:
type
;
}
;
}
ABSL_NAMESPACE_END
}
#
endif
