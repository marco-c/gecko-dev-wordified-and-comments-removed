#
include
"
absl
/
random
/
internal
/
nanobenchmark
.
h
"
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
strings
/
numbers
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
random_internal_nanobenchmark
{
namespace
{
uint64_t
Div
(
const
void
*
FuncInput
in
)
{
const
int64_t
d1
=
0xFFFFFFFFFFll
/
int64_t
(
in
)
;
return
d1
;
}
template
<
size_t
N
>
void
MeasureDiv
(
const
FuncInput
(
&
inputs
)
[
N
]
)
{
Result
results
[
N
]
;
Params
params
;
params
.
max_evals
=
6
;
const
size_t
num_results
=
Measure
(
&
Div
nullptr
inputs
N
results
params
)
;
if
(
num_results
=
=
0
)
{
ABSL_RAW_LOG
(
WARNING
"
WARNING
:
Measurement
failed
should
not
happen
when
using
"
"
PinThreadToCPU
unless
the
region
to
measure
takes
>
1
second
.
\
n
"
)
;
return
;
}
for
(
size_t
i
=
0
;
i
<
num_results
;
+
+
i
)
{
ABSL_RAW_LOG
(
INFO
"
%
5zu
:
%
6
.
2f
ticks
;
MAD
=
%
4
.
2f
%
%
\
n
"
results
[
i
]
.
input
results
[
i
]
.
ticks
results
[
i
]
.
variability
*
100
.
0
)
;
ABSL_RAW_CHECK
(
results
[
i
]
.
ticks
!
=
0
.
0f
"
Zero
duration
"
)
;
}
}
void
RunAll
(
const
int
argc
char
*
argv
[
]
)
{
int
cpu
=
-
1
;
if
(
argc
=
=
2
)
{
if
(
!
absl
:
:
SimpleAtoi
(
argv
[
1
]
&
cpu
)
)
{
ABSL_RAW_LOG
(
FATAL
"
The
optional
argument
must
be
a
CPU
number
>
=
0
.
\
n
"
)
;
}
}
PinThreadToCPU
(
cpu
)
;
const
FuncInput
unpredictable
=
argc
!
=
999
;
static
const
FuncInput
inputs
[
]
=
{
unpredictable
*
10
unpredictable
*
100
}
;
MeasureDiv
(
inputs
)
;
}
}
}
ABSL_NAMESPACE_END
}
int
main
(
int
argc
char
*
argv
[
]
)
{
absl
:
:
random_internal_nanobenchmark
:
:
RunAll
(
argc
argv
)
;
return
0
;
}
