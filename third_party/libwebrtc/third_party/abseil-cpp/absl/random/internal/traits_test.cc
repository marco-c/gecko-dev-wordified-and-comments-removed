#
include
"
absl
/
random
/
internal
/
traits
.
h
"
#
include
<
cstdint
>
#
include
<
type_traits
>
#
include
"
gtest
/
gtest
.
h
"
namespace
{
using
absl
:
:
random_internal
:
:
is_widening_convertible
;
template
<
typename
T
>
void
CheckWideningConvertsToSelf
(
)
{
static_assert
(
is_widening_convertible
<
T
T
>
:
:
value
"
Type
is
not
convertible
to
self
!
"
)
;
}
template
<
typename
T
typename
Next
typename
.
.
.
Args
>
void
CheckWideningConvertsToSelf
(
)
{
CheckWideningConvertsToSelf
<
T
>
(
)
;
CheckWideningConvertsToSelf
<
Next
Args
.
.
.
>
(
)
;
}
template
<
typename
T
>
void
CheckNotWideningConvertibleWithSigned
(
)
{
using
signed_t
=
typename
std
:
:
make_signed
<
T
>
:
:
type
;
static_assert
(
!
is_widening_convertible
<
T
signed_t
>
:
:
value
"
Unsigned
type
is
convertible
to
same
-
sized
signed
-
type
!
"
)
;
static_assert
(
!
is_widening_convertible
<
signed_t
T
>
:
:
value
"
Signed
type
is
convertible
to
same
-
sized
unsigned
-
type
!
"
)
;
}
template
<
typename
T
typename
Next
typename
.
.
.
Args
>
void
CheckNotWideningConvertibleWithSigned
(
)
{
CheckNotWideningConvertibleWithSigned
<
T
>
(
)
;
CheckWideningConvertsToSelf
<
Next
Args
.
.
.
>
(
)
;
}
template
<
typename
T
typename
Higher
>
void
CheckWideningConvertsToLargerTypes
(
)
{
using
signed_t
=
typename
std
:
:
make_signed
<
T
>
:
:
type
;
using
higher_t
=
Higher
;
using
signed_higher_t
=
typename
std
:
:
make_signed
<
Higher
>
:
:
type
;
static_assert
(
is_widening_convertible
<
T
higher_t
>
:
:
value
"
Type
not
embeddable
into
larger
type
!
"
)
;
static_assert
(
is_widening_convertible
<
T
signed_higher_t
>
:
:
value
"
Type
not
embeddable
into
larger
signed
type
!
"
)
;
static_assert
(
!
is_widening_convertible
<
signed_t
higher_t
>
:
:
value
"
Signed
type
is
embeddable
into
larger
unsigned
type
!
"
)
;
static_assert
(
is_widening_convertible
<
signed_t
signed_higher_t
>
:
:
value
"
Signed
type
not
embeddable
into
larger
signed
type
!
"
)
;
}
template
<
typename
T
typename
Higher
typename
Next
typename
.
.
.
Args
>
void
CheckWideningConvertsToLargerTypes
(
)
{
CheckWideningConvertsToLargerTypes
<
T
Higher
>
(
)
;
CheckWideningConvertsToLargerTypes
<
Higher
Next
Args
.
.
.
>
(
)
;
}
template
<
typename
T
typename
U
bool
expect
=
true
>
void
CheckWideningConvertsTo
(
)
{
static_assert
(
is_widening_convertible
<
T
U
>
:
:
value
=
=
expect
"
Unexpected
result
for
is_widening_convertible
<
T
U
>
!
"
)
;
}
TEST
(
TraitsTest
IsWideningConvertibleTest
)
{
constexpr
bool
kInvalid
=
false
;
CheckWideningConvertsToSelf
<
uint8_t
uint16_t
uint32_t
uint64_t
int8_t
int16_t
int32_t
int64_t
float
double
>
(
)
;
CheckNotWideningConvertibleWithSigned
<
uint8_t
uint16_t
uint32_t
uint64_t
>
(
)
;
CheckWideningConvertsToLargerTypes
<
uint8_t
uint16_t
uint32_t
uint64_t
>
(
)
;
CheckWideningConvertsTo
<
float
double
>
(
)
;
CheckWideningConvertsTo
<
uint16_t
float
>
(
)
;
CheckWideningConvertsTo
<
uint32_t
double
>
(
)
;
CheckWideningConvertsTo
<
uint64_t
double
kInvalid
>
(
)
;
CheckWideningConvertsTo
<
double
float
kInvalid
>
(
)
;
CheckWideningConvertsTo
<
bool
int
>
(
)
;
CheckWideningConvertsTo
<
bool
float
>
(
)
;
}
}
