#
ifndef
ABSL_RANDOM_INTERNAL_FASTMATH_H_
#
define
ABSL_RANDOM_INTERNAL_FASTMATH_H_
#
include
<
cassert
>
#
include
<
cmath
>
#
include
<
cstdint
>
#
include
"
absl
/
base
/
internal
/
bits
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
random_internal
{
inline
int
LeadingSetBit
(
uint64_t
n
)
{
return
64
-
base_internal
:
:
CountLeadingZeros64
(
n
)
;
}
inline
int
IntLog2Floor
(
uint64_t
n
)
{
return
(
n
<
=
1
)
?
0
:
(
63
-
base_internal
:
:
CountLeadingZeros64
(
n
)
)
;
}
inline
int
IntLog2Ceil
(
uint64_t
n
)
{
return
(
n
<
=
1
)
?
0
:
(
64
-
base_internal
:
:
CountLeadingZeros64
(
n
-
1
)
)
;
}
inline
double
StirlingLogFactorial
(
double
n
)
{
assert
(
n
>
=
1
)
;
constexpr
double
kLog2PI
=
1
.
83787706640934548356
;
const
double
logn
=
std
:
:
log
(
n
)
;
const
double
ninv
=
1
.
0
/
static_cast
<
double
>
(
n
)
;
return
n
*
logn
-
n
+
0
.
5
*
(
kLog2PI
+
logn
)
+
(
1
.
0
/
12
.
0
)
*
ninv
-
(
1
.
0
/
360
.
0
)
*
ninv
*
ninv
*
ninv
;
}
inline
constexpr
uint32_t
rotr
(
uint32_t
value
uint8_t
bits
)
{
return
(
value
>
>
(
bits
&
31
)
)
|
(
value
<
<
(
(
-
bits
)
&
31
)
)
;
}
inline
constexpr
uint64_t
rotr
(
uint64_t
value
uint8_t
bits
)
{
return
(
value
>
>
(
bits
&
63
)
)
|
(
value
<
<
(
(
-
bits
)
&
63
)
)
;
}
}
ABSL_NAMESPACE_END
}
#
endif
