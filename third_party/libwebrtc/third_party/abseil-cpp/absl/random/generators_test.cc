#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
random
>
#
include
<
vector
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
random
/
distributions
.
h
"
#
include
"
absl
/
random
/
random
.
h
"
namespace
{
template
<
typename
URBG
>
void
TestUniform
(
URBG
*
gen
)
{
absl
:
:
Uniform
(
*
gen
0
100
)
;
absl
:
:
Uniform
(
*
gen
0
1
.
0
)
;
absl
:
:
Uniform
(
*
gen
0
.
0f
1
.
0
)
;
absl
:
:
Uniform
(
*
gen
0
.
0
1
.
0
)
;
absl
:
:
Uniform
(
*
gen
-
1
1L
)
;
absl
:
:
Uniform
(
absl
:
:
IntervalClosedClosed
*
gen
1
6
)
;
absl
:
:
Uniform
(
absl
:
:
IntervalOpenOpen
*
gen
0
.
0
1
.
0
)
;
std
:
:
vector
<
int
>
elems
=
{
10
20
30
40
50
}
;
elems
[
absl
:
:
Uniform
(
*
gen
0u
elems
.
size
(
)
)
]
=
5
;
elems
[
absl
:
:
Uniform
<
size_t
>
(
*
gen
0
elems
.
size
(
)
)
]
=
3
;
absl
:
:
Uniform
(
absl
:
:
IntervalOpenOpen
*
gen
-
1
.
0
1
.
0
)
;
absl
:
:
Uniform
(
absl
:
:
IntervalOpenOpen
*
gen
0
1
.
0
)
;
absl
:
:
Uniform
<
int
>
(
*
gen
0
100
)
;
absl
:
:
Uniform
<
int8_t
>
(
*
gen
0
100
)
;
absl
:
:
Uniform
<
int16_t
>
(
*
gen
0
100
)
;
absl
:
:
Uniform
<
uint16_t
>
(
*
gen
0
100
)
;
absl
:
:
Uniform
<
int32_t
>
(
*
gen
0
1
<
<
10
)
;
absl
:
:
Uniform
<
uint32_t
>
(
*
gen
0
1
<
<
10
)
;
absl
:
:
Uniform
<
int64_t
>
(
*
gen
0
1
<
<
10
)
;
absl
:
:
Uniform
<
uint64_t
>
(
*
gen
0
1
<
<
10
)
;
absl
:
:
Uniform
<
float
>
(
*
gen
0
.
0
1
.
0
)
;
absl
:
:
Uniform
<
float
>
(
*
gen
0
1
)
;
absl
:
:
Uniform
<
float
>
(
*
gen
-
1
1
)
;
absl
:
:
Uniform
<
double
>
(
*
gen
0
.
0
1
.
0
)
;
absl
:
:
Uniform
<
float
>
(
*
gen
-
1
.
0
0
)
;
absl
:
:
Uniform
<
double
>
(
*
gen
-
1
.
0
0
)
;
absl
:
:
Uniform
<
double
>
(
absl
:
:
IntervalClosedClosed
*
gen
0
1
)
;
absl
:
:
Uniform
<
double
>
(
absl
:
:
IntervalClosedOpen
*
gen
0
1
)
;
absl
:
:
Uniform
<
double
>
(
absl
:
:
IntervalOpenOpen
*
gen
0
1
)
;
absl
:
:
Uniform
<
double
>
(
absl
:
:
IntervalOpenClosed
*
gen
0
1
)
;
absl
:
:
Uniform
<
double
>
(
absl
:
:
IntervalClosedClosed
*
gen
0
1
)
;
absl
:
:
Uniform
<
double
>
(
absl
:
:
IntervalOpenOpen
*
gen
0
1
)
;
absl
:
:
Uniform
<
int
>
(
absl
:
:
IntervalClosedClosed
*
gen
0
100
)
;
absl
:
:
Uniform
<
int
>
(
absl
:
:
IntervalClosedOpen
*
gen
0
100
)
;
absl
:
:
Uniform
<
int
>
(
absl
:
:
IntervalOpenOpen
*
gen
0
100
)
;
absl
:
:
Uniform
<
int
>
(
absl
:
:
IntervalOpenClosed
*
gen
0
100
)
;
absl
:
:
Uniform
<
int
>
(
absl
:
:
IntervalClosedClosed
*
gen
0
100
)
;
absl
:
:
Uniform
<
int
>
(
absl
:
:
IntervalOpenOpen
*
gen
0
100
)
;
absl
:
:
Uniform
<
int
>
(
URBG
(
)
0
100
)
;
absl
:
:
Uniform
<
double
>
(
URBG
(
)
0
.
0
1
.
0
)
;
}
template
<
typename
URBG
>
void
TestExponential
(
URBG
*
gen
)
{
absl
:
:
Exponential
<
float
>
(
*
gen
)
;
absl
:
:
Exponential
<
double
>
(
*
gen
)
;
absl
:
:
Exponential
<
double
>
(
URBG
(
)
)
;
}
template
<
typename
URBG
>
void
TestPoisson
(
URBG
*
gen
)
{
absl
:
:
Poisson
<
int
>
(
*
gen
)
;
absl
:
:
Poisson
<
int16_t
>
(
*
gen
)
;
absl
:
:
Poisson
<
uint16_t
>
(
*
gen
)
;
absl
:
:
Poisson
<
int32_t
>
(
*
gen
)
;
absl
:
:
Poisson
<
uint32_t
>
(
*
gen
)
;
absl
:
:
Poisson
<
int64_t
>
(
*
gen
)
;
absl
:
:
Poisson
<
uint64_t
>
(
*
gen
)
;
absl
:
:
Poisson
<
uint64_t
>
(
URBG
(
)
)
;
}
template
<
typename
URBG
>
void
TestBernoulli
(
URBG
*
gen
)
{
absl
:
:
Bernoulli
(
*
gen
0
.
5
)
;
absl
:
:
Bernoulli
(
*
gen
0
.
5
)
;
}
template
<
typename
URBG
>
void
TestZipf
(
URBG
*
gen
)
{
absl
:
:
Zipf
<
int
>
(
*
gen
100
)
;
absl
:
:
Zipf
<
int8_t
>
(
*
gen
100
)
;
absl
:
:
Zipf
<
int16_t
>
(
*
gen
100
)
;
absl
:
:
Zipf
<
uint16_t
>
(
*
gen
100
)
;
absl
:
:
Zipf
<
int32_t
>
(
*
gen
1
<
<
10
)
;
absl
:
:
Zipf
<
uint32_t
>
(
*
gen
1
<
<
10
)
;
absl
:
:
Zipf
<
int64_t
>
(
*
gen
1
<
<
10
)
;
absl
:
:
Zipf
<
uint64_t
>
(
*
gen
1
<
<
10
)
;
absl
:
:
Zipf
<
uint64_t
>
(
URBG
(
)
1
<
<
10
)
;
}
template
<
typename
URBG
>
void
TestGaussian
(
URBG
*
gen
)
{
absl
:
:
Gaussian
<
float
>
(
*
gen
1
.
0
1
.
0
)
;
absl
:
:
Gaussian
<
double
>
(
*
gen
1
.
0
1
.
0
)
;
absl
:
:
Gaussian
<
double
>
(
URBG
(
)
1
.
0
1
.
0
)
;
}
template
<
typename
URBG
>
void
TestLogNormal
(
URBG
*
gen
)
{
absl
:
:
LogUniform
<
int
>
(
*
gen
0
100
)
;
absl
:
:
LogUniform
<
int8_t
>
(
*
gen
0
100
)
;
absl
:
:
LogUniform
<
int16_t
>
(
*
gen
0
100
)
;
absl
:
:
LogUniform
<
uint16_t
>
(
*
gen
0
100
)
;
absl
:
:
LogUniform
<
int32_t
>
(
*
gen
0
1
<
<
10
)
;
absl
:
:
LogUniform
<
uint32_t
>
(
*
gen
0
1
<
<
10
)
;
absl
:
:
LogUniform
<
int64_t
>
(
*
gen
0
1
<
<
10
)
;
absl
:
:
LogUniform
<
uint64_t
>
(
*
gen
0
1
<
<
10
)
;
absl
:
:
LogUniform
<
uint64_t
>
(
URBG
(
)
0
1
<
<
10
)
;
}
template
<
typename
URBG
>
void
CompatibilityTest
(
)
{
URBG
gen
;
TestUniform
(
&
gen
)
;
TestExponential
(
&
gen
)
;
TestPoisson
(
&
gen
)
;
TestBernoulli
(
&
gen
)
;
TestZipf
(
&
gen
)
;
TestGaussian
(
&
gen
)
;
TestLogNormal
(
&
gen
)
;
}
TEST
(
std_mt19937_64
Compatibility
)
{
CompatibilityTest
<
std
:
:
mt19937_64
>
(
)
;
}
TEST
(
BitGen
Compatibility
)
{
CompatibilityTest
<
absl
:
:
BitGen
>
(
)
;
}
TEST
(
InsecureBitGen
Compatibility
)
{
CompatibilityTest
<
absl
:
:
InsecureBitGen
>
(
)
;
}
}
