#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
ifdef
ABSL_HAVE_EXCEPTIONS
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
base
/
internal
/
exception_safety_testing
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
{
constexpr
int
kLength
=
50
;
using
Thrower
=
testing
:
:
ThrowingValue
<
testing
:
:
TypeSpec
:
:
kEverythingThrows
>
;
TEST
(
MakeUnique
CheckForLeaks
)
{
constexpr
int
kValue
=
321
;
auto
tester
=
testing
:
:
MakeExceptionSafetyTester
(
)
.
WithInitialValue
(
Thrower
(
kValue
)
)
.
WithContracts
(
testing
:
:
strong_guarantee
)
;
EXPECT_TRUE
(
tester
.
Test
(
[
]
(
Thrower
*
thrower
)
{
static_cast
<
void
>
(
absl
:
:
make_unique
<
Thrower
>
(
*
thrower
)
)
;
}
)
)
;
EXPECT_TRUE
(
tester
.
Test
(
[
]
(
Thrower
*
thrower
)
{
static_cast
<
void
>
(
absl
:
:
make_unique
<
Thrower
>
(
std
:
:
move
(
*
thrower
)
)
)
;
}
)
)
;
EXPECT_TRUE
(
tester
.
Test
(
[
&
]
(
Thrower
*
)
{
static_cast
<
void
>
(
absl
:
:
make_unique
<
Thrower
[
]
>
(
kLength
)
)
;
}
)
)
;
}
}
ABSL_NAMESPACE_END
}
#
endif
