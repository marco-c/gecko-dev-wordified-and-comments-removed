#
include
"
absl
/
status
/
statusor
.
h
"
#
include
<
cstdlib
>
#
include
<
utility
>
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
status
/
status
.
h
"
#
include
"
absl
/
strings
/
str_cat
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
BadStatusOrAccess
:
:
BadStatusOrAccess
(
absl
:
:
Status
status
)
:
status_
(
std
:
:
move
(
status
)
)
{
}
BadStatusOrAccess
:
:
~
BadStatusOrAccess
(
)
=
default
;
const
char
*
BadStatusOrAccess
:
:
what
(
)
const
noexcept
{
return
"
Bad
StatusOr
access
"
;
}
const
absl
:
:
Status
&
BadStatusOrAccess
:
:
status
(
)
const
{
return
status_
;
}
namespace
internal_statusor
{
void
Helper
:
:
HandleInvalidStatusCtorArg
(
absl
:
:
Status
*
status
)
{
const
char
*
kMessage
=
"
An
OK
status
is
not
a
valid
constructor
argument
to
StatusOr
<
T
>
"
;
#
ifdef
NDEBUG
ABSL_INTERNAL_LOG
(
ERROR
kMessage
)
;
#
else
ABSL_INTERNAL_LOG
(
FATAL
kMessage
)
;
#
endif
*
status
=
absl
:
:
InternalError
(
kMessage
)
;
}
void
Helper
:
:
Crash
(
const
absl
:
:
Status
&
status
)
{
ABSL_INTERNAL_LOG
(
FATAL
absl
:
:
StrCat
(
"
Attempting
to
fetch
value
instead
of
handling
error
"
status
.
ToString
(
)
)
)
;
}
void
ThrowBadStatusOrAccess
(
absl
:
:
Status
status
)
{
#
ifdef
ABSL_HAVE_EXCEPTIONS
throw
absl
:
:
BadStatusOrAccess
(
std
:
:
move
(
status
)
)
;
#
else
ABSL_INTERNAL_LOG
(
FATAL
absl
:
:
StrCat
(
"
Attempting
to
fetch
value
instead
of
handling
error
"
status
.
ToString
(
)
)
)
;
std
:
:
abort
(
)
;
#
endif
}
}
ABSL_NAMESPACE_END
}
