#
ifndef
ABSL_STATUS_STATUS_H_
#
define
ABSL_STATUS_STATUS_H_
#
include
<
iostream
>
#
include
<
string
>
#
include
"
absl
/
container
/
inlined_vector
.
h
"
#
include
"
absl
/
status
/
internal
/
status_internal
.
h
"
#
include
"
absl
/
strings
/
cord
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
enum
class
StatusCode
:
int
{
kOk
=
0
kCancelled
=
1
kUnknown
=
2
kInvalidArgument
=
3
kDeadlineExceeded
=
4
kNotFound
=
5
kAlreadyExists
=
6
kPermissionDenied
=
7
kResourceExhausted
=
8
kFailedPrecondition
=
9
kAborted
=
10
kOutOfRange
=
11
kUnimplemented
=
12
kInternal
=
13
kUnavailable
=
14
kDataLoss
=
15
kUnauthenticated
=
16
kDoNotUseReservedForFutureExpansionUseDefaultInSwitchInstead_
=
20
}
;
std
:
:
string
StatusCodeToString
(
StatusCode
code
)
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
StatusCode
code
)
;
enum
class
StatusToStringMode
:
int
{
kWithNoExtraData
=
0
kWithPayload
=
1
<
<
0
kWithEverything
=
~
kWithNoExtraData
kDefault
=
kWithPayload
}
;
inline
constexpr
StatusToStringMode
operator
&
(
StatusToStringMode
lhs
StatusToStringMode
rhs
)
{
return
static_cast
<
StatusToStringMode
>
(
static_cast
<
int
>
(
lhs
)
&
static_cast
<
int
>
(
rhs
)
)
;
}
inline
constexpr
StatusToStringMode
operator
|
(
StatusToStringMode
lhs
StatusToStringMode
rhs
)
{
return
static_cast
<
StatusToStringMode
>
(
static_cast
<
int
>
(
lhs
)
|
static_cast
<
int
>
(
rhs
)
)
;
}
inline
constexpr
StatusToStringMode
operator
^
(
StatusToStringMode
lhs
StatusToStringMode
rhs
)
{
return
static_cast
<
StatusToStringMode
>
(
static_cast
<
int
>
(
lhs
)
^
static_cast
<
int
>
(
rhs
)
)
;
}
inline
constexpr
StatusToStringMode
operator
~
(
StatusToStringMode
arg
)
{
return
static_cast
<
StatusToStringMode
>
(
~
static_cast
<
int
>
(
arg
)
)
;
}
inline
StatusToStringMode
&
operator
&
=
(
StatusToStringMode
&
lhs
StatusToStringMode
rhs
)
{
lhs
=
lhs
&
rhs
;
return
lhs
;
}
inline
StatusToStringMode
&
operator
|
=
(
StatusToStringMode
&
lhs
StatusToStringMode
rhs
)
{
lhs
=
lhs
|
rhs
;
return
lhs
;
}
inline
StatusToStringMode
&
operator
^
=
(
StatusToStringMode
&
lhs
StatusToStringMode
rhs
)
{
lhs
=
lhs
^
rhs
;
return
lhs
;
}
class
Status
final
{
public
:
Status
(
)
;
Status
(
absl
:
:
StatusCode
code
absl
:
:
string_view
msg
)
;
Status
(
const
Status
&
)
;
Status
&
operator
=
(
const
Status
&
x
)
;
Status
(
Status
&
&
)
noexcept
;
Status
&
operator
=
(
Status
&
&
)
;
~
Status
(
)
;
void
Update
(
const
Status
&
new_status
)
;
void
Update
(
Status
&
&
new_status
)
;
ABSL_MUST_USE_RESULT
bool
ok
(
)
const
;
absl
:
:
StatusCode
code
(
)
const
;
int
raw_code
(
)
const
;
absl
:
:
string_view
message
(
)
const
;
friend
bool
operator
=
=
(
const
Status
&
const
Status
&
)
;
friend
bool
operator
!
=
(
const
Status
&
const
Status
&
)
;
std
:
:
string
ToString
(
StatusToStringMode
mode
=
StatusToStringMode
:
:
kDefault
)
const
;
void
IgnoreError
(
)
const
;
friend
void
swap
(
Status
&
a
Status
&
b
)
;
absl
:
:
optional
<
absl
:
:
Cord
>
GetPayload
(
absl
:
:
string_view
type_url
)
const
;
void
SetPayload
(
absl
:
:
string_view
type_url
absl
:
:
Cord
payload
)
;
bool
ErasePayload
(
absl
:
:
string_view
type_url
)
;
void
ForEachPayload
(
const
std
:
:
function
<
void
(
absl
:
:
string_view
const
absl
:
:
Cord
&
)
>
&
visitor
)
const
;
private
:
friend
Status
CancelledError
(
)
;
explicit
Status
(
absl
:
:
StatusCode
code
)
;
static
void
UnrefNonInlined
(
uintptr_t
rep
)
;
static
void
Ref
(
uintptr_t
rep
)
;
static
void
Unref
(
uintptr_t
rep
)
;
void
PrepareToModify
(
)
;
const
status_internal
:
:
Payloads
*
GetPayloads
(
)
const
;
status_internal
:
:
Payloads
*
GetPayloads
(
)
;
static
uintptr_t
NewRep
(
absl
:
:
StatusCode
code
absl
:
:
string_view
msg
std
:
:
unique_ptr
<
status_internal
:
:
Payloads
>
payload
)
;
static
bool
EqualsSlow
(
const
absl
:
:
Status
&
a
const
absl
:
:
Status
&
b
)
;
static
constexpr
const
char
kMovedFromString
[
]
=
"
Status
accessed
after
move
.
"
;
static
const
std
:
:
string
*
EmptyString
(
)
;
static
const
std
:
:
string
*
MovedFromString
(
)
;
static
bool
IsInlined
(
uintptr_t
rep
)
;
static
bool
IsMovedFrom
(
uintptr_t
rep
)
;
static
uintptr_t
MovedFromRep
(
)
;
static
uintptr_t
CodeToInlinedRep
(
absl
:
:
StatusCode
code
)
;
static
absl
:
:
StatusCode
InlinedRepToCode
(
uintptr_t
rep
)
;
static
uintptr_t
PointerToRep
(
status_internal
:
:
StatusRep
*
r
)
;
static
status_internal
:
:
StatusRep
*
RepToPointer
(
uintptr_t
r
)
;
std
:
:
string
ToStringSlow
(
StatusToStringMode
mode
)
const
;
uintptr_t
rep_
;
}
;
Status
OkStatus
(
)
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
Status
&
x
)
;
ABSL_MUST_USE_RESULT
bool
IsAborted
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsAlreadyExists
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsCancelled
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsDataLoss
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsDeadlineExceeded
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsFailedPrecondition
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsInternal
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsInvalidArgument
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsNotFound
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsOutOfRange
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsPermissionDenied
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsResourceExhausted
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsUnauthenticated
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsUnavailable
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsUnimplemented
(
const
Status
&
status
)
;
ABSL_MUST_USE_RESULT
bool
IsUnknown
(
const
Status
&
status
)
;
Status
AbortedError
(
absl
:
:
string_view
message
)
;
Status
AlreadyExistsError
(
absl
:
:
string_view
message
)
;
Status
CancelledError
(
absl
:
:
string_view
message
)
;
Status
DataLossError
(
absl
:
:
string_view
message
)
;
Status
DeadlineExceededError
(
absl
:
:
string_view
message
)
;
Status
FailedPreconditionError
(
absl
:
:
string_view
message
)
;
Status
InternalError
(
absl
:
:
string_view
message
)
;
Status
InvalidArgumentError
(
absl
:
:
string_view
message
)
;
Status
NotFoundError
(
absl
:
:
string_view
message
)
;
Status
OutOfRangeError
(
absl
:
:
string_view
message
)
;
Status
PermissionDeniedError
(
absl
:
:
string_view
message
)
;
Status
ResourceExhaustedError
(
absl
:
:
string_view
message
)
;
Status
UnauthenticatedError
(
absl
:
:
string_view
message
)
;
Status
UnavailableError
(
absl
:
:
string_view
message
)
;
Status
UnimplementedError
(
absl
:
:
string_view
message
)
;
Status
UnknownError
(
absl
:
:
string_view
message
)
;
inline
Status
:
:
Status
(
)
:
rep_
(
CodeToInlinedRep
(
absl
:
:
StatusCode
:
:
kOk
)
)
{
}
inline
Status
:
:
Status
(
absl
:
:
StatusCode
code
)
:
rep_
(
CodeToInlinedRep
(
code
)
)
{
}
inline
Status
:
:
Status
(
const
Status
&
x
)
:
rep_
(
x
.
rep_
)
{
Ref
(
rep_
)
;
}
inline
Status
&
Status
:
:
operator
=
(
const
Status
&
x
)
{
uintptr_t
old_rep
=
rep_
;
if
(
x
.
rep_
!
=
old_rep
)
{
Ref
(
x
.
rep_
)
;
rep_
=
x
.
rep_
;
Unref
(
old_rep
)
;
}
return
*
this
;
}
inline
Status
:
:
Status
(
Status
&
&
x
)
noexcept
:
rep_
(
x
.
rep_
)
{
x
.
rep_
=
MovedFromRep
(
)
;
}
inline
Status
&
Status
:
:
operator
=
(
Status
&
&
x
)
{
uintptr_t
old_rep
=
rep_
;
if
(
x
.
rep_
!
=
old_rep
)
{
rep_
=
x
.
rep_
;
x
.
rep_
=
MovedFromRep
(
)
;
Unref
(
old_rep
)
;
}
return
*
this
;
}
inline
void
Status
:
:
Update
(
const
Status
&
new_status
)
{
if
(
ok
(
)
)
{
*
this
=
new_status
;
}
}
inline
void
Status
:
:
Update
(
Status
&
&
new_status
)
{
if
(
ok
(
)
)
{
*
this
=
std
:
:
move
(
new_status
)
;
}
}
inline
Status
:
:
~
Status
(
)
{
Unref
(
rep_
)
;
}
inline
bool
Status
:
:
ok
(
)
const
{
return
rep_
=
=
CodeToInlinedRep
(
absl
:
:
StatusCode
:
:
kOk
)
;
}
inline
absl
:
:
string_view
Status
:
:
message
(
)
const
{
return
!
IsInlined
(
rep_
)
?
RepToPointer
(
rep_
)
-
>
message
:
(
IsMovedFrom
(
rep_
)
?
absl
:
:
string_view
(
kMovedFromString
)
:
absl
:
:
string_view
(
)
)
;
}
inline
bool
operator
=
=
(
const
Status
&
lhs
const
Status
&
rhs
)
{
return
lhs
.
rep_
=
=
rhs
.
rep_
|
|
Status
:
:
EqualsSlow
(
lhs
rhs
)
;
}
inline
bool
operator
!
=
(
const
Status
&
lhs
const
Status
&
rhs
)
{
return
!
(
lhs
=
=
rhs
)
;
}
inline
std
:
:
string
Status
:
:
ToString
(
StatusToStringMode
mode
)
const
{
return
ok
(
)
?
"
OK
"
:
ToStringSlow
(
mode
)
;
}
inline
void
Status
:
:
IgnoreError
(
)
const
{
}
inline
void
swap
(
absl
:
:
Status
&
a
absl
:
:
Status
&
b
)
{
using
std
:
:
swap
;
swap
(
a
.
rep_
b
.
rep_
)
;
}
inline
const
status_internal
:
:
Payloads
*
Status
:
:
GetPayloads
(
)
const
{
return
IsInlined
(
rep_
)
?
nullptr
:
RepToPointer
(
rep_
)
-
>
payloads
.
get
(
)
;
}
inline
status_internal
:
:
Payloads
*
Status
:
:
GetPayloads
(
)
{
return
IsInlined
(
rep_
)
?
nullptr
:
RepToPointer
(
rep_
)
-
>
payloads
.
get
(
)
;
}
inline
bool
Status
:
:
IsInlined
(
uintptr_t
rep
)
{
return
(
rep
&
1
)
=
=
0
;
}
inline
bool
Status
:
:
IsMovedFrom
(
uintptr_t
rep
)
{
return
IsInlined
(
rep
)
&
&
(
rep
&
2
)
!
=
0
;
}
inline
uintptr_t
Status
:
:
MovedFromRep
(
)
{
return
CodeToInlinedRep
(
absl
:
:
StatusCode
:
:
kInternal
)
|
2
;
}
inline
uintptr_t
Status
:
:
CodeToInlinedRep
(
absl
:
:
StatusCode
code
)
{
return
static_cast
<
uintptr_t
>
(
code
)
<
<
2
;
}
inline
absl
:
:
StatusCode
Status
:
:
InlinedRepToCode
(
uintptr_t
rep
)
{
assert
(
IsInlined
(
rep
)
)
;
return
static_cast
<
absl
:
:
StatusCode
>
(
rep
>
>
2
)
;
}
inline
status_internal
:
:
StatusRep
*
Status
:
:
RepToPointer
(
uintptr_t
rep
)
{
assert
(
!
IsInlined
(
rep
)
)
;
return
reinterpret_cast
<
status_internal
:
:
StatusRep
*
>
(
rep
-
1
)
;
}
inline
uintptr_t
Status
:
:
PointerToRep
(
status_internal
:
:
StatusRep
*
rep
)
{
return
reinterpret_cast
<
uintptr_t
>
(
rep
)
+
1
;
}
inline
void
Status
:
:
Ref
(
uintptr_t
rep
)
{
if
(
!
IsInlined
(
rep
)
)
{
RepToPointer
(
rep
)
-
>
ref
.
fetch_add
(
1
std
:
:
memory_order_relaxed
)
;
}
}
inline
void
Status
:
:
Unref
(
uintptr_t
rep
)
{
if
(
!
IsInlined
(
rep
)
)
{
UnrefNonInlined
(
rep
)
;
}
}
inline
Status
OkStatus
(
)
{
return
Status
(
)
;
}
inline
Status
CancelledError
(
)
{
return
Status
(
absl
:
:
StatusCode
:
:
kCancelled
)
;
}
ABSL_NAMESPACE_END
}
#
endif
