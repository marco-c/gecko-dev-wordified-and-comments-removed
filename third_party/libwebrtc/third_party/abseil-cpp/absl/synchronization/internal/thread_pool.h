#
ifndef
ABSL_SYNCHRONIZATION_INTERNAL_THREAD_POOL_H_
#
define
ABSL_SYNCHRONIZATION_INTERNAL_THREAD_POOL_H_
#
include
<
cassert
>
#
include
<
cstddef
>
#
include
<
functional
>
#
include
<
queue
>
#
include
<
thread
>
#
include
<
vector
>
#
include
"
absl
/
base
/
thread_annotations
.
h
"
#
include
"
absl
/
synchronization
/
mutex
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
synchronization_internal
{
class
ThreadPool
{
public
:
explicit
ThreadPool
(
int
num_threads
)
{
for
(
int
i
=
0
;
i
<
num_threads
;
+
+
i
)
{
threads_
.
push_back
(
std
:
:
thread
(
&
ThreadPool
:
:
WorkLoop
this
)
)
;
}
}
ThreadPool
(
const
ThreadPool
&
)
=
delete
;
ThreadPool
&
operator
=
(
const
ThreadPool
&
)
=
delete
;
~
ThreadPool
(
)
{
{
absl
:
:
MutexLock
l
(
&
mu_
)
;
for
(
size_t
i
=
0
;
i
<
threads_
.
size
(
)
;
i
+
+
)
{
queue_
.
push
(
nullptr
)
;
}
}
for
(
auto
&
t
:
threads_
)
{
t
.
join
(
)
;
}
}
void
Schedule
(
std
:
:
function
<
void
(
)
>
func
)
{
assert
(
func
!
=
nullptr
)
;
absl
:
:
MutexLock
l
(
&
mu_
)
;
queue_
.
push
(
std
:
:
move
(
func
)
)
;
}
private
:
bool
WorkAvailable
(
)
const
ABSL_EXCLUSIVE_LOCKS_REQUIRED
(
mu_
)
{
return
!
queue_
.
empty
(
)
;
}
void
WorkLoop
(
)
{
while
(
true
)
{
std
:
:
function
<
void
(
)
>
func
;
{
absl
:
:
MutexLock
l
(
&
mu_
)
;
mu_
.
Await
(
absl
:
:
Condition
(
this
&
ThreadPool
:
:
WorkAvailable
)
)
;
func
=
std
:
:
move
(
queue_
.
front
(
)
)
;
queue_
.
pop
(
)
;
}
if
(
func
=
=
nullptr
)
{
break
;
}
func
(
)
;
}
}
absl
:
:
Mutex
mu_
;
std
:
:
queue
<
std
:
:
function
<
void
(
)
>
>
queue_
ABSL_GUARDED_BY
(
mu_
)
;
std
:
:
vector
<
std
:
:
thread
>
threads_
;
}
;
}
ABSL_NAMESPACE_END
}
#
endif
