#
include
"
absl
/
synchronization
/
internal
/
waiter_base
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
internal
/
thread_identity
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
synchronization_internal
{
#
ifdef
ABSL_INTERNAL_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr
int
WaiterBase
:
:
kIdlePeriods
;
#
endif
void
WaiterBase
:
:
MaybeBecomeIdle
(
)
{
base_internal
:
:
ThreadIdentity
*
identity
=
base_internal
:
:
CurrentThreadIdentityIfPresent
(
)
;
assert
(
identity
!
=
nullptr
)
;
const
bool
is_idle
=
identity
-
>
is_idle
.
load
(
std
:
:
memory_order_relaxed
)
;
const
int
ticker
=
identity
-
>
ticker
.
load
(
std
:
:
memory_order_relaxed
)
;
const
int
wait_start
=
identity
-
>
wait_start
.
load
(
std
:
:
memory_order_relaxed
)
;
if
(
!
is_idle
&
&
ticker
-
wait_start
>
kIdlePeriods
)
{
identity
-
>
is_idle
.
store
(
true
std
:
:
memory_order_relaxed
)
;
}
}
}
ABSL_NAMESPACE_END
}
