#
ifndef
ABSL_SYNCHRONIZATION_INTERNAL_FUTEX_WAITER_H_
#
define
ABSL_SYNCHRONIZATION_INTERNAL_FUTEX_WAITER_H_
#
include
<
atomic
>
#
include
<
cstdint
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
synchronization
/
internal
/
kernel_timeout
.
h
"
#
include
"
absl
/
synchronization
/
internal
/
futex
.
h
"
#
include
"
absl
/
synchronization
/
internal
/
waiter_base
.
h
"
#
ifdef
ABSL_INTERNAL_HAVE_FUTEX
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
synchronization_internal
{
#
define
ABSL_INTERNAL_HAVE_FUTEX_WAITER
1
class
FutexWaiter
:
public
WaiterCrtp
<
FutexWaiter
>
{
public
:
FutexWaiter
(
)
:
futex_
(
0
)
{
}
bool
Wait
(
KernelTimeout
t
)
;
void
Post
(
)
;
void
Poke
(
)
;
static
constexpr
char
kName
[
]
=
"
FutexWaiter
"
;
private
:
static
int
WaitUntil
(
std
:
:
atomic
<
int32_t
>
*
v
int32_t
val
KernelTimeout
t
)
;
std
:
:
atomic
<
int32_t
>
futex_
;
static_assert
(
sizeof
(
int32_t
)
=
=
sizeof
(
futex_
)
"
Wrong
size
for
futex
"
)
;
}
;
}
ABSL_NAMESPACE_END
}
#
endif
#
endif
