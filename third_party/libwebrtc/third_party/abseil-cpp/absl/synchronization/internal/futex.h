#
ifndef
ABSL_SYNCHRONIZATION_INTERNAL_FUTEX_H_
#
define
ABSL_SYNCHRONIZATION_INTERNAL_FUTEX_H_
#
include
"
absl
/
base
/
config
.
h
"
#
ifdef
_WIN32
#
include
<
windows
.
h
>
#
else
#
include
<
sys
/
time
.
h
>
#
include
<
unistd
.
h
>
#
endif
#
ifdef
__linux__
#
include
<
linux
/
futex
.
h
>
#
include
<
sys
/
syscall
.
h
>
#
endif
#
include
<
errno
.
h
>
#
include
<
stdio
.
h
>
#
include
<
time
.
h
>
#
include
<
atomic
>
#
include
<
cstdint
>
#
include
"
absl
/
base
/
optimization
.
h
"
#
include
"
absl
/
synchronization
/
internal
/
kernel_timeout
.
h
"
#
ifdef
ABSL_INTERNAL_HAVE_FUTEX
#
error
ABSL_INTERNAL_HAVE_FUTEX
may
not
be
set
on
the
command
line
#
elif
defined
(
__BIONIC__
)
#
define
ABSL_INTERNAL_HAVE_FUTEX
#
elif
defined
(
__linux__
)
&
&
defined
(
FUTEX_CLOCK_REALTIME
)
#
define
ABSL_INTERNAL_HAVE_FUTEX
#
endif
#
ifdef
ABSL_INTERNAL_HAVE_FUTEX
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
synchronization_internal
{
#
ifdef
__BIONIC__
#
ifndef
SYS_futex
#
define
SYS_futex
__NR_futex
#
endif
#
ifndef
FUTEX_WAIT_BITSET
#
define
FUTEX_WAIT_BITSET
9
#
endif
#
ifndef
FUTEX_PRIVATE_FLAG
#
define
FUTEX_PRIVATE_FLAG
128
#
endif
#
ifndef
FUTEX_CLOCK_REALTIME
#
define
FUTEX_CLOCK_REALTIME
256
#
endif
#
ifndef
FUTEX_BITSET_MATCH_ANY
#
define
FUTEX_BITSET_MATCH_ANY
0xFFFFFFFF
#
endif
#
endif
#
if
defined
(
__NR_futex_time64
)
&
&
!
defined
(
SYS_futex_time64
)
#
define
SYS_futex_time64
__NR_futex_time64
#
endif
#
if
defined
(
SYS_futex_time64
)
&
&
!
defined
(
SYS_futex
)
#
define
SYS_futex
SYS_futex_time64
#
endif
class
FutexImpl
{
public
:
static
int
WaitUntil
(
std
:
:
atomic
<
int32_t
>
*
v
int32_t
val
KernelTimeout
t
)
{
int
err
=
0
;
if
(
t
.
has_timeout
(
)
)
{
struct
timespec
abs_timeout
=
t
.
MakeAbsTimespec
(
)
;
err
=
syscall
(
SYS_futex
reinterpret_cast
<
int32_t
*
>
(
v
)
FUTEX_WAIT_BITSET
|
FUTEX_PRIVATE_FLAG
|
FUTEX_CLOCK_REALTIME
val
&
abs_timeout
nullptr
FUTEX_BITSET_MATCH_ANY
)
;
}
else
{
err
=
syscall
(
SYS_futex
reinterpret_cast
<
int32_t
*
>
(
v
)
FUTEX_WAIT
|
FUTEX_PRIVATE_FLAG
val
nullptr
)
;
}
if
(
ABSL_PREDICT_FALSE
(
err
!
=
0
)
)
{
err
=
-
errno
;
}
return
err
;
}
static
int
WaitBitsetAbsoluteTimeout
(
std
:
:
atomic
<
int32_t
>
*
v
int32_t
val
int32_t
bits
const
struct
timespec
*
abstime
)
{
int
err
=
syscall
(
SYS_futex
reinterpret_cast
<
int32_t
*
>
(
v
)
FUTEX_WAIT_BITSET
|
FUTEX_PRIVATE_FLAG
val
abstime
nullptr
bits
)
;
if
(
ABSL_PREDICT_FALSE
(
err
!
=
0
)
)
{
err
=
-
errno
;
}
return
err
;
}
static
int
Wake
(
std
:
:
atomic
<
int32_t
>
*
v
int32_t
count
)
{
int
err
=
syscall
(
SYS_futex
reinterpret_cast
<
int32_t
*
>
(
v
)
FUTEX_WAKE
|
FUTEX_PRIVATE_FLAG
count
)
;
if
(
ABSL_PREDICT_FALSE
(
err
<
0
)
)
{
err
=
-
errno
;
}
return
err
;
}
static
int
WakeBitset
(
std
:
:
atomic
<
int32_t
>
*
v
int32_t
count
int32_t
bits
)
{
int
err
=
syscall
(
SYS_futex
reinterpret_cast
<
int32_t
*
>
(
v
)
FUTEX_WAKE_BITSET
|
FUTEX_PRIVATE_FLAG
count
nullptr
nullptr
bits
)
;
if
(
ABSL_PREDICT_FALSE
(
err
<
0
)
)
{
err
=
-
errno
;
}
return
err
;
}
}
;
class
Futex
:
public
FutexImpl
{
}
;
}
ABSL_NAMESPACE_END
}
#
endif
#
endif
