#
include
"
absl
/
synchronization
/
blocking_counter
.
h
"
#
include
<
thread
>
#
include
<
vector
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
time
/
clock
.
h
"
#
include
"
absl
/
time
/
time
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
{
void
PauseAndDecreaseCounter
(
BlockingCounter
*
counter
int
*
done
)
{
absl
:
:
SleepFor
(
absl
:
:
Seconds
(
1
)
)
;
*
done
=
1
;
counter
-
>
DecrementCount
(
)
;
}
TEST
(
BlockingCounterTest
BasicFunctionality
)
{
const
int
num_workers
=
10
;
BlockingCounter
counter
(
num_workers
)
;
std
:
:
vector
<
std
:
:
thread
>
workers
;
std
:
:
vector
<
int
>
done
(
num_workers
0
)
;
workers
.
reserve
(
num_workers
)
;
for
(
int
k
=
0
;
k
<
num_workers
;
k
+
+
)
{
workers
.
emplace_back
(
[
&
counter
&
done
k
]
{
PauseAndDecreaseCounter
(
&
counter
&
done
[
k
]
)
;
}
)
;
}
counter
.
Wait
(
)
;
for
(
int
k
=
0
;
k
<
num_workers
;
k
+
+
)
{
EXPECT_EQ
(
1
done
[
k
]
)
;
}
for
(
std
:
:
thread
&
w
:
workers
)
{
w
.
join
(
)
;
}
}
TEST
(
BlockingCounterTest
WaitZeroInitialCount
)
{
BlockingCounter
counter
(
0
)
;
counter
.
Wait
(
)
;
}
#
if
GTEST_HAS_DEATH_TEST
TEST
(
BlockingCounterTest
WaitNegativeInitialCount
)
{
EXPECT_DEATH
(
BlockingCounter
counter
(
-
1
)
"
BlockingCounter
initial_count
negative
"
)
;
}
#
endif
}
ABSL_NAMESPACE_END
}
