#
include
"
absl
/
synchronization
/
blocking_counter
.
h
"
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
static
bool
IsZero
(
void
*
arg
)
{
return
0
=
=
*
reinterpret_cast
<
int
*
>
(
arg
)
;
}
bool
BlockingCounter
:
:
DecrementCount
(
)
{
MutexLock
l
(
&
lock_
)
;
count_
-
-
;
if
(
count_
<
0
)
{
ABSL_RAW_LOG
(
FATAL
"
BlockingCounter
:
:
DecrementCount
(
)
called
too
many
times
.
count
=
%
d
"
count_
)
;
}
return
count_
=
=
0
;
}
void
BlockingCounter
:
:
Wait
(
)
{
MutexLock
l
(
&
this
-
>
lock_
)
;
ABSL_RAW_CHECK
(
count_
>
=
0
"
BlockingCounter
underflow
"
)
;
ABSL_RAW_CHECK
(
num_waiting_
=
=
0
"
multiple
threads
called
Wait
(
)
"
)
;
num_waiting_
+
+
;
this
-
>
lock_
.
Await
(
Condition
(
IsZero
&
this
-
>
count_
)
)
;
}
ABSL_NAMESPACE_END
}
