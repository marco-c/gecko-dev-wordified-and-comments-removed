#
include
"
absl
/
synchronization
/
barrier
.
h
"
#
include
<
thread
>
#
include
<
vector
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
synchronization
/
mutex
.
h
"
#
include
"
absl
/
time
/
clock
.
h
"
TEST
(
Barrier
SanityTest
)
{
constexpr
int
kNumThreads
=
10
;
absl
:
:
Barrier
*
barrier
=
new
absl
:
:
Barrier
(
kNumThreads
)
;
absl
:
:
Mutex
mutex
;
int
counter
=
0
;
auto
thread_func
=
[
&
]
{
if
(
barrier
-
>
Block
(
)
)
{
delete
barrier
;
}
absl
:
:
MutexLock
lock
(
&
mutex
)
;
+
+
counter
;
}
;
std
:
:
vector
<
std
:
:
thread
>
threads
;
for
(
int
i
=
0
;
i
<
kNumThreads
-
1
;
+
+
i
)
{
threads
.
push_back
(
std
:
:
thread
(
thread_func
)
)
;
}
absl
:
:
SleepFor
(
absl
:
:
Seconds
(
1
)
)
;
{
absl
:
:
MutexLock
lock
(
&
mutex
)
;
EXPECT_EQ
(
counter
0
)
;
}
threads
.
push_back
(
std
:
:
thread
(
thread_func
)
)
;
for
(
auto
&
thread
:
threads
)
{
thread
.
join
(
)
;
}
absl
:
:
MutexLock
lock
(
&
mutex
)
;
EXPECT_EQ
(
counter
kNumThreads
)
;
}
