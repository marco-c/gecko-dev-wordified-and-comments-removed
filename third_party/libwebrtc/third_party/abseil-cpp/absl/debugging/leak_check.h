#
ifndef
ABSL_DEBUGGING_LEAK_CHECK_H_
#
define
ABSL_DEBUGGING_LEAK_CHECK_H_
#
include
<
cstddef
>
#
include
"
absl
/
base
/
config
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
bool
HaveLeakSanitizer
(
)
;
void
DoIgnoreLeak
(
const
void
*
ptr
)
;
template
<
typename
T
>
T
*
IgnoreLeak
(
T
*
ptr
)
{
DoIgnoreLeak
(
ptr
)
;
return
ptr
;
}
class
LeakCheckDisabler
{
public
:
LeakCheckDisabler
(
)
;
LeakCheckDisabler
(
const
LeakCheckDisabler
&
)
=
delete
;
LeakCheckDisabler
&
operator
=
(
const
LeakCheckDisabler
&
)
=
delete
;
~
LeakCheckDisabler
(
)
;
}
;
void
RegisterLivePointers
(
const
void
*
ptr
size_t
size
)
;
void
UnRegisterLivePointers
(
const
void
*
ptr
size_t
size
)
;
ABSL_NAMESPACE_END
}
#
endif
