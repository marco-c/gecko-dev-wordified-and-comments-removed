#
include
"
absl
/
debugging
/
internal
/
examine_stack
.
h
"
#
ifndef
_WIN32
#
include
<
unistd
.
h
>
#
endif
#
ifdef
__APPLE__
#
include
<
sys
/
ucontext
.
h
>
#
endif
#
include
<
csignal
>
#
include
<
cstdio
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
internal
/
raw_logging
.
h
"
#
include
"
absl
/
base
/
macros
.
h
"
#
include
"
absl
/
debugging
/
stacktrace
.
h
"
#
include
"
absl
/
debugging
/
symbolize
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
debugging_internal
{
void
*
GetProgramCounter
(
void
*
vuc
)
{
#
ifdef
__linux__
if
(
vuc
!
=
nullptr
)
{
ucontext_t
*
context
=
reinterpret_cast
<
ucontext_t
*
>
(
vuc
)
;
#
if
defined
(
__aarch64__
)
return
reinterpret_cast
<
void
*
>
(
context
-
>
uc_mcontext
.
pc
)
;
#
elif
defined
(
__arm__
)
return
reinterpret_cast
<
void
*
>
(
context
-
>
uc_mcontext
.
arm_pc
)
;
#
elif
defined
(
__i386__
)
if
(
14
<
ABSL_ARRAYSIZE
(
context
-
>
uc_mcontext
.
gregs
)
)
return
reinterpret_cast
<
void
*
>
(
context
-
>
uc_mcontext
.
gregs
[
14
]
)
;
#
elif
defined
(
__mips__
)
return
reinterpret_cast
<
void
*
>
(
context
-
>
uc_mcontext
.
pc
)
;
#
elif
defined
(
__powerpc64__
)
return
reinterpret_cast
<
void
*
>
(
context
-
>
uc_mcontext
.
gp_regs
[
32
]
)
;
#
elif
defined
(
__powerpc__
)
return
reinterpret_cast
<
void
*
>
(
context
-
>
uc_mcontext
.
regs
-
>
nip
)
;
#
elif
defined
(
__riscv
)
return
reinterpret_cast
<
void
*
>
(
context
-
>
uc_mcontext
.
__gregs
[
REG_PC
]
)
;
#
elif
defined
(
__s390__
)
&
&
!
defined
(
__s390x__
)
return
reinterpret_cast
<
void
*
>
(
context
-
>
uc_mcontext
.
psw
.
addr
&
0x7fffffff
)
;
#
elif
defined
(
__s390__
)
&
&
defined
(
__s390x__
)
return
reinterpret_cast
<
void
*
>
(
context
-
>
uc_mcontext
.
psw
.
addr
)
;
#
elif
defined
(
__x86_64__
)
if
(
16
<
ABSL_ARRAYSIZE
(
context
-
>
uc_mcontext
.
gregs
)
)
return
reinterpret_cast
<
void
*
>
(
context
-
>
uc_mcontext
.
gregs
[
16
]
)
;
#
else
#
error
"
Undefined
Architecture
.
"
#
endif
}
#
elif
defined
(
__APPLE__
)
if
(
vuc
!
=
nullptr
)
{
ucontext_t
*
signal_ucontext
=
reinterpret_cast
<
ucontext_t
*
>
(
vuc
)
;
#
if
defined
(
__aarch64__
)
return
reinterpret_cast
<
void
*
>
(
__darwin_arm_thread_state64_get_pc
(
signal_ucontext
-
>
uc_mcontext
-
>
__ss
)
)
;
#
elif
defined
(
__arm__
)
#
if
__DARWIN_UNIX03
return
reinterpret_cast
<
void
*
>
(
signal_ucontext
-
>
uc_mcontext
-
>
__ss
.
__pc
)
;
#
else
return
reinterpret_cast
<
void
*
>
(
signal_ucontext
-
>
uc_mcontext
-
>
ss
.
pc
)
;
#
endif
#
elif
defined
(
__i386__
)
#
if
__DARWIN_UNIX03
return
reinterpret_cast
<
void
*
>
(
signal_ucontext
-
>
uc_mcontext
-
>
__ss
.
__eip
)
;
#
else
return
reinterpret_cast
<
void
*
>
(
signal_ucontext
-
>
uc_mcontext
-
>
ss
.
eip
)
;
#
endif
#
elif
defined
(
__x86_64__
)
#
if
__DARWIN_UNIX03
return
reinterpret_cast
<
void
*
>
(
signal_ucontext
-
>
uc_mcontext
-
>
__ss
.
__rip
)
;
#
else
return
reinterpret_cast
<
void
*
>
(
signal_ucontext
-
>
uc_mcontext
-
>
ss
.
rip
)
;
#
endif
#
endif
}
#
elif
defined
(
__akaros__
)
auto
*
ctx
=
reinterpret_cast
<
struct
user_context
*
>
(
vuc
)
;
return
reinterpret_cast
<
void
*
>
(
get_user_ctx_pc
(
ctx
)
)
;
#
endif
static_cast
<
void
>
(
vuc
)
;
return
nullptr
;
}
static
constexpr
int
kPrintfPointerFieldWidth
=
2
+
2
*
sizeof
(
void
*
)
;
static
void
DumpPCAndFrameSizeAndSymbol
(
void
(
*
writerfn
)
(
const
char
*
void
*
)
void
*
writerfn_arg
void
*
pc
void
*
symbolize_pc
int
framesize
const
char
*
const
prefix
)
{
char
tmp
[
1024
]
;
const
char
*
symbol
=
"
(
unknown
)
"
;
if
(
absl
:
:
Symbolize
(
symbolize_pc
tmp
sizeof
(
tmp
)
)
)
{
symbol
=
tmp
;
}
char
buf
[
1024
]
;
if
(
framesize
<
=
0
)
{
snprintf
(
buf
sizeof
(
buf
)
"
%
s
%
*
p
(
unknown
)
%
s
\
n
"
prefix
kPrintfPointerFieldWidth
pc
symbol
)
;
}
else
{
snprintf
(
buf
sizeof
(
buf
)
"
%
s
%
*
p
%
9d
%
s
\
n
"
prefix
kPrintfPointerFieldWidth
pc
framesize
symbol
)
;
}
writerfn
(
buf
writerfn_arg
)
;
}
static
void
DumpPCAndFrameSize
(
void
(
*
writerfn
)
(
const
char
*
void
*
)
void
*
writerfn_arg
void
*
pc
int
framesize
const
char
*
const
prefix
)
{
char
buf
[
100
]
;
if
(
framesize
<
=
0
)
{
snprintf
(
buf
sizeof
(
buf
)
"
%
s
%
*
p
(
unknown
)
\
n
"
prefix
kPrintfPointerFieldWidth
pc
)
;
}
else
{
snprintf
(
buf
sizeof
(
buf
)
"
%
s
%
*
p
%
9d
\
n
"
prefix
kPrintfPointerFieldWidth
pc
framesize
)
;
}
writerfn
(
buf
writerfn_arg
)
;
}
void
DumpPCAndFrameSizesAndStackTrace
(
void
*
pc
void
*
const
stack
[
]
int
frame_sizes
[
]
int
depth
int
min_dropped_frames
bool
symbolize_stacktrace
void
(
*
writerfn
)
(
const
char
*
void
*
)
void
*
writerfn_arg
)
{
if
(
pc
!
=
nullptr
)
{
if
(
symbolize_stacktrace
)
{
DumpPCAndFrameSizeAndSymbol
(
writerfn
writerfn_arg
pc
pc
0
"
PC
:
"
)
;
}
else
{
DumpPCAndFrameSize
(
writerfn
writerfn_arg
pc
0
"
PC
:
"
)
;
}
}
for
(
int
i
=
0
;
i
<
depth
;
i
+
+
)
{
if
(
symbolize_stacktrace
)
{
DumpPCAndFrameSizeAndSymbol
(
writerfn
writerfn_arg
stack
[
i
]
reinterpret_cast
<
char
*
>
(
stack
[
i
]
)
-
1
frame_sizes
[
i
]
"
"
)
;
}
else
{
DumpPCAndFrameSize
(
writerfn
writerfn_arg
stack
[
i
]
frame_sizes
[
i
]
"
"
)
;
}
}
if
(
min_dropped_frames
>
0
)
{
char
buf
[
100
]
;
snprintf
(
buf
sizeof
(
buf
)
"
.
.
.
and
at
least
%
d
more
frames
\
n
"
min_dropped_frames
)
;
writerfn
(
buf
writerfn_arg
)
;
}
}
}
ABSL_NAMESPACE_END
}
