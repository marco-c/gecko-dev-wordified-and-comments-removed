#
include
"
absl
/
container
/
internal
/
raw_hash_set
.
h
"
#
include
<
atomic
>
#
include
<
cstddef
>
#
include
"
absl
/
base
/
config
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
container_internal
{
constexpr
size_t
Group
:
:
kWidth
;
inline
size_t
RandomSeed
(
)
{
#
if
ABSL_HAVE_THREAD_LOCAL
static
thread_local
size_t
counter
=
0
;
size_t
value
=
+
+
counter
;
#
else
static
std
:
:
atomic
<
size_t
>
counter
(
0
)
;
size_t
value
=
counter
.
fetch_add
(
1
std
:
:
memory_order_relaxed
)
;
#
endif
return
value
^
static_cast
<
size_t
>
(
reinterpret_cast
<
uintptr_t
>
(
&
counter
)
)
;
}
bool
ShouldInsertBackwards
(
size_t
hash
ctrl_t
*
ctrl
)
{
return
(
H1
(
hash
ctrl
)
^
RandomSeed
(
)
)
%
13
>
6
;
}
}
ABSL_NAMESPACE_END
}
