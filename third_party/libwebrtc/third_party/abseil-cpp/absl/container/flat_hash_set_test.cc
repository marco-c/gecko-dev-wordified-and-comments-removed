#
include
"
absl
/
container
/
flat_hash_set
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
container
/
internal
/
container_memory
.
h
"
#
include
"
absl
/
container
/
internal
/
hash_generator_testing
.
h
"
#
include
"
absl
/
container
/
internal
/
unordered_set_constructor_test
.
h
"
#
include
"
absl
/
container
/
internal
/
unordered_set_lookup_test
.
h
"
#
include
"
absl
/
container
/
internal
/
unordered_set_members_test
.
h
"
#
include
"
absl
/
container
/
internal
/
unordered_set_modifiers_test
.
h
"
#
include
"
absl
/
log
/
check
.
h
"
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
container_internal
{
namespace
{
using
:
:
absl
:
:
container_internal
:
:
hash_internal
:
:
Enum
;
using
:
:
absl
:
:
container_internal
:
:
hash_internal
:
:
EnumClass
;
using
:
:
testing
:
:
IsEmpty
;
using
:
:
testing
:
:
Pointee
;
using
:
:
testing
:
:
UnorderedElementsAre
;
using
:
:
testing
:
:
UnorderedElementsAreArray
;
struct
BeforeMain
{
BeforeMain
(
)
{
absl
:
:
flat_hash_set
<
int
>
x
;
x
.
insert
(
1
)
;
CHECK
(
!
x
.
contains
(
0
)
)
<
<
"
x
should
not
contain
0
"
;
CHECK
(
x
.
contains
(
1
)
)
<
<
"
x
should
contain
1
"
;
}
}
;
const
BeforeMain
before_main
;
template
<
class
T
>
using
Set
=
absl
:
:
flat_hash_set
<
T
StatefulTestingHash
StatefulTestingEqual
Alloc
<
T
>
>
;
using
SetTypes
=
:
:
testing
:
:
Types
<
Set
<
int
>
Set
<
std
:
:
string
>
Set
<
Enum
>
Set
<
EnumClass
>
>
;
INSTANTIATE_TYPED_TEST_SUITE_P
(
FlatHashSet
ConstructorTest
SetTypes
)
;
INSTANTIATE_TYPED_TEST_SUITE_P
(
FlatHashSet
LookupTest
SetTypes
)
;
INSTANTIATE_TYPED_TEST_SUITE_P
(
FlatHashSet
MembersTest
SetTypes
)
;
INSTANTIATE_TYPED_TEST_SUITE_P
(
FlatHashSet
ModifiersTest
SetTypes
)
;
TEST
(
FlatHashSet
EmplaceString
)
{
std
:
:
vector
<
std
:
:
string
>
v
=
{
"
a
"
"
b
"
}
;
absl
:
:
flat_hash_set
<
absl
:
:
string_view
>
hs
(
v
.
begin
(
)
v
.
end
(
)
)
;
EXPECT_THAT
(
hs
UnorderedElementsAreArray
(
v
)
)
;
}
TEST
(
FlatHashSet
BitfieldArgument
)
{
union
{
int
n
:
1
;
}
;
n
=
0
;
absl
:
:
flat_hash_set
<
int
>
s
=
{
n
}
;
s
.
insert
(
n
)
;
s
.
insert
(
s
.
end
(
)
n
)
;
s
.
insert
(
{
n
}
)
;
s
.
erase
(
n
)
;
s
.
count
(
n
)
;
s
.
prefetch
(
n
)
;
s
.
find
(
n
)
;
s
.
contains
(
n
)
;
s
.
equal_range
(
n
)
;
}
TEST
(
FlatHashSet
MergeExtractInsert
)
{
struct
Hash
{
size_t
operator
(
)
(
const
std
:
:
unique_ptr
<
int
>
&
p
)
const
{
return
*
p
;
}
}
;
struct
Eq
{
bool
operator
(
)
(
const
std
:
:
unique_ptr
<
int
>
&
a
const
std
:
:
unique_ptr
<
int
>
&
b
)
const
{
return
*
a
=
=
*
b
;
}
}
;
absl
:
:
flat_hash_set
<
std
:
:
unique_ptr
<
int
>
Hash
Eq
>
set1
set2
;
set1
.
insert
(
absl
:
:
make_unique
<
int
>
(
7
)
)
;
set1
.
insert
(
absl
:
:
make_unique
<
int
>
(
17
)
)
;
set2
.
insert
(
absl
:
:
make_unique
<
int
>
(
7
)
)
;
set2
.
insert
(
absl
:
:
make_unique
<
int
>
(
19
)
)
;
EXPECT_THAT
(
set1
UnorderedElementsAre
(
Pointee
(
7
)
Pointee
(
17
)
)
)
;
EXPECT_THAT
(
set2
UnorderedElementsAre
(
Pointee
(
7
)
Pointee
(
19
)
)
)
;
set1
.
merge
(
set2
)
;
EXPECT_THAT
(
set1
UnorderedElementsAre
(
Pointee
(
7
)
Pointee
(
17
)
Pointee
(
19
)
)
)
;
EXPECT_THAT
(
set2
UnorderedElementsAre
(
Pointee
(
7
)
)
)
;
auto
node
=
set1
.
extract
(
absl
:
:
make_unique
<
int
>
(
7
)
)
;
EXPECT_TRUE
(
node
)
;
EXPECT_THAT
(
node
.
value
(
)
Pointee
(
7
)
)
;
EXPECT_THAT
(
set1
UnorderedElementsAre
(
Pointee
(
17
)
Pointee
(
19
)
)
)
;
auto
insert_result
=
set2
.
insert
(
std
:
:
move
(
node
)
)
;
EXPECT_FALSE
(
node
)
;
EXPECT_FALSE
(
insert_result
.
inserted
)
;
EXPECT_TRUE
(
insert_result
.
node
)
;
EXPECT_THAT
(
insert_result
.
node
.
value
(
)
Pointee
(
7
)
)
;
EXPECT_EQ
(
*
*
insert_result
.
position
7
)
;
EXPECT_NE
(
insert_result
.
position
-
>
get
(
)
insert_result
.
node
.
value
(
)
.
get
(
)
)
;
EXPECT_THAT
(
set2
UnorderedElementsAre
(
Pointee
(
7
)
)
)
;
node
=
set1
.
extract
(
absl
:
:
make_unique
<
int
>
(
17
)
)
;
EXPECT_TRUE
(
node
)
;
EXPECT_THAT
(
node
.
value
(
)
Pointee
(
17
)
)
;
EXPECT_THAT
(
set1
UnorderedElementsAre
(
Pointee
(
19
)
)
)
;
node
.
value
(
)
=
absl
:
:
make_unique
<
int
>
(
23
)
;
insert_result
=
set2
.
insert
(
std
:
:
move
(
node
)
)
;
EXPECT_FALSE
(
node
)
;
EXPECT_TRUE
(
insert_result
.
inserted
)
;
EXPECT_FALSE
(
insert_result
.
node
)
;
EXPECT_EQ
(
*
*
insert_result
.
position
23
)
;
EXPECT_THAT
(
set2
UnorderedElementsAre
(
Pointee
(
7
)
Pointee
(
23
)
)
)
;
}
bool
IsEven
(
int
k
)
{
return
k
%
2
=
=
0
;
}
TEST
(
FlatHashSet
EraseIf
)
{
{
flat_hash_set
<
int
>
s
=
{
1
2
3
4
5
}
;
EXPECT_EQ
(
erase_if
(
s
[
]
(
int
)
{
return
true
;
}
)
5
)
;
EXPECT_THAT
(
s
IsEmpty
(
)
)
;
}
{
flat_hash_set
<
int
>
s
=
{
1
2
3
4
5
}
;
EXPECT_EQ
(
erase_if
(
s
[
]
(
int
)
{
return
false
;
}
)
0
)
;
EXPECT_THAT
(
s
UnorderedElementsAre
(
1
2
3
4
5
)
)
;
}
{
flat_hash_set
<
int
>
s
=
{
1
2
3
4
5
}
;
EXPECT_EQ
(
erase_if
(
s
[
]
(
int
k
)
{
return
k
%
2
=
=
1
;
}
)
3
)
;
EXPECT_THAT
(
s
UnorderedElementsAre
(
2
4
)
)
;
}
{
flat_hash_set
<
int
>
s
=
{
1
2
3
4
5
}
;
EXPECT_EQ
(
erase_if
(
s
IsEven
)
2
)
;
EXPECT_THAT
(
s
UnorderedElementsAre
(
1
3
5
)
)
;
}
{
flat_hash_set
<
int
>
s
=
{
1
2
3
4
5
}
;
EXPECT_EQ
(
erase_if
(
s
&
IsEven
)
2
)
;
EXPECT_THAT
(
s
UnorderedElementsAre
(
1
3
5
)
)
;
}
}
class
PoisonInline
{
int64_t
data_
;
public
:
explicit
PoisonInline
(
int64_t
d
)
:
data_
(
d
)
{
SanitizerPoisonObject
(
&
data_
)
;
}
PoisonInline
(
const
PoisonInline
&
that
)
:
PoisonInline
(
*
that
)
{
}
~
PoisonInline
(
)
{
SanitizerUnpoisonObject
(
&
data_
)
;
}
int64_t
operator
*
(
)
const
{
SanitizerUnpoisonObject
(
&
data_
)
;
const
int64_t
ret
=
data_
;
SanitizerPoisonObject
(
&
data_
)
;
return
ret
;
}
template
<
typename
H
>
friend
H
AbslHashValue
(
H
h
const
PoisonInline
&
pi
)
{
return
H
:
:
combine
(
std
:
:
move
(
h
)
*
pi
)
;
}
bool
operator
=
=
(
const
PoisonInline
&
rhs
)
const
{
return
*
*
this
=
=
*
rhs
;
}
}
;
TEST
(
FlatHashSet
PoisonInline
)
{
PoisonInline
a
(
0
)
b
(
1
)
;
{
flat_hash_set
<
PoisonInline
>
set
;
set
.
insert
(
a
)
;
EXPECT_THAT
(
set
UnorderedElementsAre
(
a
)
)
;
set
.
insert
(
b
)
;
EXPECT_THAT
(
set
UnorderedElementsAre
(
a
b
)
)
;
set
.
erase
(
a
)
;
EXPECT_THAT
(
set
UnorderedElementsAre
(
b
)
)
;
set
.
rehash
(
0
)
;
EXPECT_THAT
(
set
UnorderedElementsAre
(
b
)
)
;
}
{
flat_hash_set
<
PoisonInline
>
set
;
set
.
insert
(
a
)
;
flat_hash_set
<
PoisonInline
>
set2
(
std
:
:
move
(
set
)
)
;
EXPECT_THAT
(
set2
UnorderedElementsAre
(
a
)
)
;
}
{
flat_hash_set
<
PoisonInline
>
set
set2
;
set
.
insert
(
a
)
;
set2
=
std
:
:
move
(
set
)
;
EXPECT_THAT
(
set2
UnorderedElementsAre
(
a
)
)
;
}
{
flat_hash_set
<
PoisonInline
>
set
;
set
.
insert
(
a
)
;
flat_hash_set
<
PoisonInline
>
set2
(
std
:
:
move
(
set
)
std
:
:
allocator
<
PoisonInline
>
(
)
)
;
EXPECT_THAT
(
set2
UnorderedElementsAre
(
a
)
)
;
}
}
}
}
ABSL_NAMESPACE_END
}
