constexpr
uint64_t
Int128Low64
(
int128
v
)
{
return
v
.
lo_
;
}
constexpr
int64_t
Int128High64
(
int128
v
)
{
return
v
.
hi_
;
}
#
if
defined
(
ABSL_IS_LITTLE_ENDIAN
)
constexpr
int128
:
:
int128
(
int64_t
high
uint64_t
low
)
:
lo_
(
low
)
hi_
(
high
)
{
}
constexpr
int128
:
:
int128
(
int
v
)
:
lo_
{
static_cast
<
uint64_t
>
(
v
)
}
hi_
{
v
<
0
?
~
int64_t
{
0
}
:
0
}
{
}
constexpr
int128
:
:
int128
(
long
v
)
:
lo_
{
static_cast
<
uint64_t
>
(
v
)
}
hi_
{
v
<
0
?
~
int64_t
{
0
}
:
0
}
{
}
constexpr
int128
:
:
int128
(
long
long
v
)
:
lo_
{
static_cast
<
uint64_t
>
(
v
)
}
hi_
{
v
<
0
?
~
int64_t
{
0
}
:
0
}
{
}
constexpr
int128
:
:
int128
(
unsigned
int
v
)
:
lo_
{
v
}
hi_
{
0
}
{
}
constexpr
int128
:
:
int128
(
unsigned
long
v
)
:
lo_
{
v
}
hi_
{
0
}
{
}
constexpr
int128
:
:
int128
(
unsigned
long
long
v
)
:
lo_
{
v
}
hi_
{
0
}
{
}
constexpr
int128
:
:
int128
(
uint128
v
)
:
lo_
{
Uint128Low64
(
v
)
}
hi_
{
static_cast
<
int64_t
>
(
Uint128High64
(
v
)
)
}
{
}
#
elif
defined
(
ABSL_IS_BIG_ENDIAN
)
constexpr
int128
:
:
int128
(
int64_t
high
uint64_t
low
)
:
hi_
{
high
}
lo_
{
low
}
{
}
constexpr
int128
:
:
int128
(
int
v
)
:
hi_
{
v
<
0
?
~
int64_t
{
0
}
:
0
}
lo_
{
static_cast
<
uint64_t
>
(
v
)
}
{
}
constexpr
int128
:
:
int128
(
long
v
)
:
hi_
{
v
<
0
?
~
int64_t
{
0
}
:
0
}
lo_
{
static_cast
<
uint64_t
>
(
v
)
}
{
}
constexpr
int128
:
:
int128
(
long
long
v
)
:
hi_
{
v
<
0
?
~
int64_t
{
0
}
:
0
}
lo_
{
static_cast
<
uint64_t
>
(
v
)
}
{
}
constexpr
int128
:
:
int128
(
unsigned
int
v
)
:
hi_
{
0
}
lo_
{
v
}
{
}
constexpr
int128
:
:
int128
(
unsigned
long
v
)
:
hi_
{
0
}
lo_
{
v
}
{
}
constexpr
int128
:
:
int128
(
unsigned
long
long
v
)
:
hi_
{
0
}
lo_
{
v
}
{
}
constexpr
int128
:
:
int128
(
uint128
v
)
:
hi_
{
static_cast
<
int64_t
>
(
Uint128High64
(
v
)
)
}
lo_
{
Uint128Low64
(
v
)
}
{
}
#
else
#
error
"
Unsupported
byte
order
:
must
be
little
-
endian
or
big
-
endian
.
"
#
endif
constexpr
int128
:
:
operator
bool
(
)
const
{
return
lo_
|
|
hi_
;
}
constexpr
int128
:
:
operator
char
(
)
const
{
return
static_cast
<
char
>
(
static_cast
<
long
long
>
(
*
this
)
)
;
}
constexpr
int128
:
:
operator
signed
char
(
)
const
{
return
static_cast
<
signed
char
>
(
static_cast
<
long
long
>
(
*
this
)
)
;
}
constexpr
int128
:
:
operator
unsigned
char
(
)
const
{
return
static_cast
<
unsigned
char
>
(
lo_
)
;
}
constexpr
int128
:
:
operator
char16_t
(
)
const
{
return
static_cast
<
char16_t
>
(
lo_
)
;
}
constexpr
int128
:
:
operator
char32_t
(
)
const
{
return
static_cast
<
char32_t
>
(
lo_
)
;
}
constexpr
int128
:
:
operator
ABSL_INTERNAL_WCHAR_T
(
)
const
{
return
static_cast
<
ABSL_INTERNAL_WCHAR_T
>
(
static_cast
<
long
long
>
(
*
this
)
)
;
}
constexpr
int128
:
:
operator
short
(
)
const
{
return
static_cast
<
short
>
(
static_cast
<
long
long
>
(
*
this
)
)
;
}
constexpr
int128
:
:
operator
unsigned
short
(
)
const
{
return
static_cast
<
unsigned
short
>
(
lo_
)
;
}
constexpr
int128
:
:
operator
int
(
)
const
{
return
static_cast
<
int
>
(
static_cast
<
long
long
>
(
*
this
)
)
;
}
constexpr
int128
:
:
operator
unsigned
int
(
)
const
{
return
static_cast
<
unsigned
int
>
(
lo_
)
;
}
constexpr
int128
:
:
operator
long
(
)
const
{
return
static_cast
<
long
>
(
static_cast
<
long
long
>
(
*
this
)
)
;
}
constexpr
int128
:
:
operator
unsigned
long
(
)
const
{
return
static_cast
<
unsigned
long
>
(
lo_
)
;
}
constexpr
int128
:
:
operator
long
long
(
)
const
{
return
int128_internal
:
:
BitCastToSigned
(
lo_
)
;
}
constexpr
int128
:
:
operator
unsigned
long
long
(
)
const
{
return
static_cast
<
unsigned
long
long
>
(
lo_
)
;
}
int128
operator
-
(
int128
v
)
;
bool
operator
!
=
(
int128
lhs
int128
rhs
)
;
inline
int128
:
:
operator
float
(
)
const
{
return
hi_
<
0
&
&
*
this
!
=
Int128Min
(
)
?
-
static_cast
<
float
>
(
-
*
this
)
:
static_cast
<
float
>
(
lo_
)
+
std
:
:
ldexp
(
static_cast
<
float
>
(
hi_
)
64
)
;
}
inline
int128
:
:
operator
double
(
)
const
{
return
hi_
<
0
&
&
*
this
!
=
Int128Min
(
)
?
-
static_cast
<
double
>
(
-
*
this
)
:
static_cast
<
double
>
(
lo_
)
+
std
:
:
ldexp
(
static_cast
<
double
>
(
hi_
)
64
)
;
}
inline
int128
:
:
operator
long
double
(
)
const
{
return
hi_
<
0
&
&
*
this
!
=
Int128Min
(
)
?
-
static_cast
<
long
double
>
(
-
*
this
)
:
static_cast
<
long
double
>
(
lo_
)
+
std
:
:
ldexp
(
static_cast
<
long
double
>
(
hi_
)
64
)
;
}
inline
bool
operator
=
=
(
int128
lhs
int128
rhs
)
{
return
(
Int128Low64
(
lhs
)
=
=
Int128Low64
(
rhs
)
&
&
Int128High64
(
lhs
)
=
=
Int128High64
(
rhs
)
)
;
}
inline
bool
operator
!
=
(
int128
lhs
int128
rhs
)
{
return
!
(
lhs
=
=
rhs
)
;
}
inline
bool
operator
<
(
int128
lhs
int128
rhs
)
{
return
(
Int128High64
(
lhs
)
=
=
Int128High64
(
rhs
)
)
?
(
Int128Low64
(
lhs
)
<
Int128Low64
(
rhs
)
)
:
(
Int128High64
(
lhs
)
<
Int128High64
(
rhs
)
)
;
}
inline
bool
operator
>
(
int128
lhs
int128
rhs
)
{
return
(
Int128High64
(
lhs
)
=
=
Int128High64
(
rhs
)
)
?
(
Int128Low64
(
lhs
)
>
Int128Low64
(
rhs
)
)
:
(
Int128High64
(
lhs
)
>
Int128High64
(
rhs
)
)
;
}
inline
bool
operator
<
=
(
int128
lhs
int128
rhs
)
{
return
!
(
lhs
>
rhs
)
;
}
inline
bool
operator
>
=
(
int128
lhs
int128
rhs
)
{
return
!
(
lhs
<
rhs
)
;
}
inline
int128
operator
-
(
int128
v
)
{
int64_t
hi
=
~
Int128High64
(
v
)
;
uint64_t
lo
=
~
Int128Low64
(
v
)
+
1
;
if
(
lo
=
=
0
)
+
+
hi
;
return
MakeInt128
(
hi
lo
)
;
}
inline
bool
operator
!
(
int128
v
)
{
return
!
Int128Low64
(
v
)
&
&
!
Int128High64
(
v
)
;
}
inline
int128
operator
~
(
int128
val
)
{
return
MakeInt128
(
~
Int128High64
(
val
)
~
Int128Low64
(
val
)
)
;
}
inline
int128
operator
+
(
int128
lhs
int128
rhs
)
{
int128
result
=
MakeInt128
(
Int128High64
(
lhs
)
+
Int128High64
(
rhs
)
Int128Low64
(
lhs
)
+
Int128Low64
(
rhs
)
)
;
if
(
Int128Low64
(
result
)
<
Int128Low64
(
lhs
)
)
{
return
MakeInt128
(
Int128High64
(
result
)
+
1
Int128Low64
(
result
)
)
;
}
return
result
;
}
inline
int128
operator
-
(
int128
lhs
int128
rhs
)
{
int128
result
=
MakeInt128
(
Int128High64
(
lhs
)
-
Int128High64
(
rhs
)
Int128Low64
(
lhs
)
-
Int128Low64
(
rhs
)
)
;
if
(
Int128Low64
(
lhs
)
<
Int128Low64
(
rhs
)
)
{
return
MakeInt128
(
Int128High64
(
result
)
-
1
Int128Low64
(
result
)
)
;
}
return
result
;
}
inline
int128
operator
*
(
int128
lhs
int128
rhs
)
{
uint128
result
=
uint128
(
lhs
)
*
rhs
;
return
MakeInt128
(
int128_internal
:
:
BitCastToSigned
(
Uint128High64
(
result
)
)
Uint128Low64
(
result
)
)
;
}
inline
int128
int128
:
:
operator
+
+
(
int
)
{
int128
tmp
(
*
this
)
;
*
this
+
=
1
;
return
tmp
;
}
inline
int128
int128
:
:
operator
-
-
(
int
)
{
int128
tmp
(
*
this
)
;
*
this
-
=
1
;
return
tmp
;
}
inline
int128
&
int128
:
:
operator
+
+
(
)
{
*
this
+
=
1
;
return
*
this
;
}
inline
int128
&
int128
:
:
operator
-
-
(
)
{
*
this
-
=
1
;
return
*
this
;
}
inline
int128
operator
|
(
int128
lhs
int128
rhs
)
{
return
MakeInt128
(
Int128High64
(
lhs
)
|
Int128High64
(
rhs
)
Int128Low64
(
lhs
)
|
Int128Low64
(
rhs
)
)
;
}
inline
int128
operator
&
(
int128
lhs
int128
rhs
)
{
return
MakeInt128
(
Int128High64
(
lhs
)
&
Int128High64
(
rhs
)
Int128Low64
(
lhs
)
&
Int128Low64
(
rhs
)
)
;
}
inline
int128
operator
^
(
int128
lhs
int128
rhs
)
{
return
MakeInt128
(
Int128High64
(
lhs
)
^
Int128High64
(
rhs
)
Int128Low64
(
lhs
)
^
Int128Low64
(
rhs
)
)
;
}
inline
int128
operator
<
<
(
int128
lhs
int
amount
)
{
if
(
amount
<
64
)
{
if
(
amount
!
=
0
)
{
return
MakeInt128
(
(
Int128High64
(
lhs
)
<
<
amount
)
|
static_cast
<
int64_t
>
(
Int128Low64
(
lhs
)
>
>
(
64
-
amount
)
)
Int128Low64
(
lhs
)
<
<
amount
)
;
}
return
lhs
;
}
return
MakeInt128
(
static_cast
<
int64_t
>
(
Int128Low64
(
lhs
)
<
<
(
amount
-
64
)
)
0
)
;
}
inline
int128
operator
>
>
(
int128
lhs
int
amount
)
{
if
(
amount
<
64
)
{
if
(
amount
!
=
0
)
{
return
MakeInt128
(
Int128High64
(
lhs
)
>
>
amount
(
Int128Low64
(
lhs
)
>
>
amount
)
|
(
static_cast
<
uint64_t
>
(
Int128High64
(
lhs
)
)
<
<
(
64
-
amount
)
)
)
;
}
return
lhs
;
}
return
MakeInt128
(
0
static_cast
<
uint64_t
>
(
Int128High64
(
lhs
)
>
>
(
amount
-
64
)
)
)
;
}
