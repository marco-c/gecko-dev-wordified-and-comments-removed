#
include
"
absl
/
flags
/
usage
.
h
"
#
include
<
stdlib
.
h
>
#
include
<
string
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
const_init
.
h
"
#
include
"
absl
/
base
/
thread_annotations
.
h
"
#
include
"
absl
/
flags
/
internal
/
usage
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
synchronization
/
mutex
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
flags_internal
{
namespace
{
ABSL_CONST_INIT
absl
:
:
Mutex
usage_message_guard
(
absl
:
:
kConstInit
)
;
ABSL_CONST_INIT
std
:
:
string
*
program_usage_message
ABSL_GUARDED_BY
(
usage_message_guard
)
=
nullptr
;
}
}
void
SetProgramUsageMessage
(
absl
:
:
string_view
new_usage_message
)
{
absl
:
:
MutexLock
l
(
&
flags_internal
:
:
usage_message_guard
)
;
if
(
flags_internal
:
:
program_usage_message
!
=
nullptr
)
{
ABSL_INTERNAL_LOG
(
FATAL
"
SetProgramUsageMessage
(
)
called
twice
.
"
)
;
std
:
:
exit
(
1
)
;
}
flags_internal
:
:
program_usage_message
=
new
std
:
:
string
(
new_usage_message
)
;
}
absl
:
:
string_view
ProgramUsageMessage
(
)
{
absl
:
:
MutexLock
l
(
&
flags_internal
:
:
usage_message_guard
)
;
return
flags_internal
:
:
program_usage_message
!
=
nullptr
?
absl
:
:
string_view
(
*
flags_internal
:
:
program_usage_message
)
:
"
Warning
:
SetProgramUsageMessage
(
)
never
called
"
;
}
ABSL_NAMESPACE_END
}
