#
include
"
absl
/
flags
/
reflection
.
h
"
#
include
<
assert
.
h
>
#
include
<
map
>
#
include
<
string
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
base
/
thread_annotations
.
h
"
#
include
"
absl
/
flags
/
commandlineflag
.
h
"
#
include
"
absl
/
flags
/
internal
/
private_handle_accessor
.
h
"
#
include
"
absl
/
flags
/
internal
/
registry
.
h
"
#
include
"
absl
/
flags
/
usage_config
.
h
"
#
include
"
absl
/
strings
/
str_cat
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
synchronization
/
mutex
.
h
"
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
flags_internal
{
class
FlagRegistry
{
public
:
FlagRegistry
(
)
=
default
;
~
FlagRegistry
(
)
=
default
;
void
RegisterFlag
(
CommandLineFlag
&
flag
)
;
void
Lock
(
)
ABSL_EXCLUSIVE_LOCK_FUNCTION
(
lock_
)
{
lock_
.
Lock
(
)
;
}
void
Unlock
(
)
ABSL_UNLOCK_FUNCTION
(
lock_
)
{
lock_
.
Unlock
(
)
;
}
CommandLineFlag
*
FindFlagLocked
(
absl
:
:
string_view
name
)
;
static
FlagRegistry
&
GlobalRegistry
(
)
;
private
:
friend
class
flags_internal
:
:
FlagSaverImpl
;
friend
void
ForEachFlagUnlocked
(
std
:
:
function
<
void
(
CommandLineFlag
&
)
>
visitor
)
;
using
FlagMap
=
std
:
:
map
<
absl
:
:
string_view
CommandLineFlag
*
>
;
using
FlagIterator
=
FlagMap
:
:
iterator
;
using
FlagConstIterator
=
FlagMap
:
:
const_iterator
;
FlagMap
flags_
;
absl
:
:
Mutex
lock_
;
FlagRegistry
(
const
FlagRegistry
&
)
;
FlagRegistry
&
operator
=
(
const
FlagRegistry
&
)
;
}
;
CommandLineFlag
*
FlagRegistry
:
:
FindFlagLocked
(
absl
:
:
string_view
name
)
{
FlagConstIterator
i
=
flags_
.
find
(
name
)
;
if
(
i
=
=
flags_
.
end
(
)
)
{
return
nullptr
;
}
return
i
-
>
second
;
}
namespace
{
class
FlagRegistryLock
{
public
:
explicit
FlagRegistryLock
(
FlagRegistry
&
fr
)
:
fr_
(
fr
)
{
fr_
.
Lock
(
)
;
}
~
FlagRegistryLock
(
)
{
fr_
.
Unlock
(
)
;
}
private
:
FlagRegistry
&
fr_
;
}
;
}
void
FlagRegistry
:
:
RegisterFlag
(
CommandLineFlag
&
flag
)
{
FlagRegistryLock
registry_lock
(
*
this
)
;
std
:
:
pair
<
FlagIterator
bool
>
ins
=
flags_
.
insert
(
FlagMap
:
:
value_type
(
flag
.
Name
(
)
&
flag
)
)
;
if
(
ins
.
second
=
=
false
)
{
CommandLineFlag
&
old_flag
=
*
ins
.
first
-
>
second
;
if
(
flag
.
IsRetired
(
)
!
=
old_flag
.
IsRetired
(
)
)
{
flags_internal
:
:
ReportUsageError
(
absl
:
:
StrCat
(
"
Retired
flag
'
"
flag
.
Name
(
)
"
'
was
defined
normally
in
file
'
"
(
flag
.
IsRetired
(
)
?
old_flag
.
Filename
(
)
:
flag
.
Filename
(
)
)
"
'
.
"
)
true
)
;
}
else
if
(
flags_internal
:
:
PrivateHandleAccessor
:
:
TypeId
(
flag
)
!
=
flags_internal
:
:
PrivateHandleAccessor
:
:
TypeId
(
old_flag
)
)
{
flags_internal
:
:
ReportUsageError
(
absl
:
:
StrCat
(
"
Flag
'
"
flag
.
Name
(
)
"
'
was
defined
more
than
once
but
with
"
"
differing
types
.
Defined
in
files
'
"
old_flag
.
Filename
(
)
"
'
and
'
"
flag
.
Filename
(
)
"
'
.
"
)
true
)
;
}
else
if
(
old_flag
.
IsRetired
(
)
)
{
return
;
}
else
if
(
old_flag
.
Filename
(
)
!
=
flag
.
Filename
(
)
)
{
flags_internal
:
:
ReportUsageError
(
absl
:
:
StrCat
(
"
Flag
'
"
flag
.
Name
(
)
"
'
was
defined
more
than
once
(
in
files
'
"
old_flag
.
Filename
(
)
"
'
and
'
"
flag
.
Filename
(
)
"
'
)
.
"
)
true
)
;
}
else
{
flags_internal
:
:
ReportUsageError
(
absl
:
:
StrCat
(
"
Something
is
wrong
with
flag
'
"
flag
.
Name
(
)
"
'
in
file
'
"
flag
.
Filename
(
)
"
'
.
One
possibility
:
file
'
"
flag
.
Filename
(
)
"
'
is
being
linked
both
statically
and
dynamically
into
this
"
"
executable
.
e
.
g
.
some
files
listed
as
srcs
to
a
test
and
also
"
"
listed
as
srcs
of
some
shared
lib
deps
of
the
same
test
.
"
)
true
)
;
}
std
:
:
exit
(
1
)
;
}
}
FlagRegistry
&
FlagRegistry
:
:
GlobalRegistry
(
)
{
static
FlagRegistry
*
global_registry
=
new
FlagRegistry
;
return
*
global_registry
;
}
void
ForEachFlagUnlocked
(
std
:
:
function
<
void
(
CommandLineFlag
&
)
>
visitor
)
{
FlagRegistry
&
registry
=
FlagRegistry
:
:
GlobalRegistry
(
)
;
for
(
FlagRegistry
:
:
FlagConstIterator
i
=
registry
.
flags_
.
begin
(
)
;
i
!
=
registry
.
flags_
.
end
(
)
;
+
+
i
)
{
visitor
(
*
i
-
>
second
)
;
}
}
void
ForEachFlag
(
std
:
:
function
<
void
(
CommandLineFlag
&
)
>
visitor
)
{
FlagRegistry
&
registry
=
FlagRegistry
:
:
GlobalRegistry
(
)
;
FlagRegistryLock
frl
(
registry
)
;
ForEachFlagUnlocked
(
visitor
)
;
}
bool
RegisterCommandLineFlag
(
CommandLineFlag
&
flag
)
{
FlagRegistry
:
:
GlobalRegistry
(
)
.
RegisterFlag
(
flag
)
;
return
true
;
}
namespace
{
class
RetiredFlagObj
final
:
public
CommandLineFlag
{
public
:
constexpr
RetiredFlagObj
(
const
char
*
name
FlagFastTypeId
type_id
)
:
name_
(
name
)
type_id_
(
type_id
)
{
}
private
:
absl
:
:
string_view
Name
(
)
const
override
{
return
name_
;
}
std
:
:
string
Filename
(
)
const
override
{
OnAccess
(
)
;
return
"
RETIRED
"
;
}
FlagFastTypeId
TypeId
(
)
const
override
{
return
type_id_
;
}
std
:
:
string
Help
(
)
const
override
{
OnAccess
(
)
;
return
"
"
;
}
bool
IsRetired
(
)
const
override
{
return
true
;
}
bool
IsSpecifiedOnCommandLine
(
)
const
override
{
OnAccess
(
)
;
return
false
;
}
std
:
:
string
DefaultValue
(
)
const
override
{
OnAccess
(
)
;
return
"
"
;
}
std
:
:
string
CurrentValue
(
)
const
override
{
OnAccess
(
)
;
return
"
"
;
}
bool
ValidateInputValue
(
absl
:
:
string_view
)
const
override
{
OnAccess
(
)
;
return
true
;
}
std
:
:
unique_ptr
<
flags_internal
:
:
FlagStateInterface
>
SaveState
(
)
override
{
return
nullptr
;
}
bool
ParseFrom
(
absl
:
:
string_view
flags_internal
:
:
FlagSettingMode
flags_internal
:
:
ValueSource
std
:
:
string
&
)
override
{
OnAccess
(
)
;
return
false
;
}
void
CheckDefaultValueParsingRoundtrip
(
)
const
override
{
OnAccess
(
)
;
}
void
Read
(
void
*
)
const
override
{
OnAccess
(
)
;
}
void
OnAccess
(
)
const
{
flags_internal
:
:
ReportUsageError
(
absl
:
:
StrCat
(
"
Accessing
retired
flag
'
"
name_
"
'
"
)
false
)
;
}
const
char
*
const
name_
;
const
FlagFastTypeId
type_id_
;
}
;
}
void
Retire
(
const
char
*
name
FlagFastTypeId
type_id
char
*
buf
)
{
static_assert
(
sizeof
(
RetiredFlagObj
)
=
=
kRetiredFlagObjSize
"
"
)
;
static_assert
(
alignof
(
RetiredFlagObj
)
=
=
kRetiredFlagObjAlignment
"
"
)
;
auto
*
flag
=
:
:
new
(
static_cast
<
void
*
>
(
buf
)
)
flags_internal
:
:
RetiredFlagObj
(
name
type_id
)
;
FlagRegistry
:
:
GlobalRegistry
(
)
.
RegisterFlag
(
*
flag
)
;
}
class
FlagSaverImpl
{
public
:
FlagSaverImpl
(
)
=
default
;
FlagSaverImpl
(
const
FlagSaverImpl
&
)
=
delete
;
void
operator
=
(
const
FlagSaverImpl
&
)
=
delete
;
void
SaveFromRegistry
(
)
{
assert
(
backup_registry_
.
empty
(
)
)
;
flags_internal
:
:
ForEachFlag
(
[
&
]
(
CommandLineFlag
&
flag
)
{
if
(
auto
flag_state
=
flags_internal
:
:
PrivateHandleAccessor
:
:
SaveState
(
flag
)
)
{
backup_registry_
.
emplace_back
(
std
:
:
move
(
flag_state
)
)
;
}
}
)
;
}
void
RestoreToRegistry
(
)
{
for
(
const
auto
&
flag_state
:
backup_registry_
)
{
flag_state
-
>
Restore
(
)
;
}
}
private
:
std
:
:
vector
<
std
:
:
unique_ptr
<
flags_internal
:
:
FlagStateInterface
>
>
backup_registry_
;
}
;
}
FlagSaver
:
:
FlagSaver
(
)
:
impl_
(
new
flags_internal
:
:
FlagSaverImpl
)
{
impl_
-
>
SaveFromRegistry
(
)
;
}
FlagSaver
:
:
~
FlagSaver
(
)
{
if
(
!
impl_
)
return
;
impl_
-
>
RestoreToRegistry
(
)
;
delete
impl_
;
}
CommandLineFlag
*
FindCommandLineFlag
(
absl
:
:
string_view
name
)
{
if
(
name
.
empty
(
)
)
return
nullptr
;
flags_internal
:
:
FlagRegistry
&
registry
=
flags_internal
:
:
FlagRegistry
:
:
GlobalRegistry
(
)
;
flags_internal
:
:
FlagRegistryLock
frl
(
registry
)
;
return
registry
.
FindFlagLocked
(
name
)
;
}
absl
:
:
flat_hash_map
<
absl
:
:
string_view
absl
:
:
CommandLineFlag
*
>
GetAllFlags
(
)
{
absl
:
:
flat_hash_map
<
absl
:
:
string_view
absl
:
:
CommandLineFlag
*
>
res
;
flags_internal
:
:
ForEachFlag
(
[
&
]
(
CommandLineFlag
&
flag
)
{
res
.
insert
(
{
flag
.
Name
(
)
&
flag
}
)
;
}
)
;
return
res
;
}
ABSL_NAMESPACE_END
}
