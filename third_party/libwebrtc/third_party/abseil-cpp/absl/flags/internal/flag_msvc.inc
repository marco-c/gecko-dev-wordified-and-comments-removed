namespace
flags_internal
{
absl
:
:
Mutex
*
GetGlobalConstructionGuard
(
)
;
}
template
<
typename
T
>
class
Flag
{
public
:
#
if
_MSC_VER
<
=
1900
constexpr
Flag
(
const
char
*
name
const
char
*
filename
const
flags_internal
:
:
HelpGenFunc
help_gen
const
flags_internal
:
:
FlagDfltGenFunc
default_value_gen
)
:
name_
(
name
)
filename_
(
filename
)
help_gen_
(
help_gen
)
default_value_gen_
(
default_value_gen
)
inited_
(
false
)
impl_
(
nullptr
)
{
}
#
endif
flags_internal
:
:
Flag
<
T
>
&
GetImpl
(
)
const
{
if
(
!
inited_
.
load
(
std
:
:
memory_order_acquire
)
)
{
absl
:
:
MutexLock
l
(
flags_internal
:
:
GetGlobalConstructionGuard
(
)
)
;
if
(
inited_
.
load
(
std
:
:
memory_order_acquire
)
)
{
return
*
impl_
;
}
impl_
=
new
flags_internal
:
:
Flag
<
T
>
(
name_
filename_
{
flags_internal
:
:
FlagHelpMsg
(
help_gen_
)
flags_internal
:
:
FlagHelpKind
:
:
kGenFunc
}
{
flags_internal
:
:
FlagDefaultSrc
(
default_value_gen_
)
flags_internal
:
:
FlagDefaultKind
:
:
kGenFunc
}
)
;
inited_
.
store
(
true
std
:
:
memory_order_release
)
;
}
return
*
impl_
;
}
bool
IsRetired
(
)
const
{
return
GetImpl
(
)
.
IsRetired
(
)
;
}
absl
:
:
string_view
Name
(
)
const
{
return
GetImpl
(
)
.
Name
(
)
;
}
std
:
:
string
Help
(
)
const
{
return
GetImpl
(
)
.
Help
(
)
;
}
bool
IsModified
(
)
const
{
return
GetImpl
(
)
.
IsModified
(
)
;
}
bool
IsSpecifiedOnCommandLine
(
)
const
{
return
GetImpl
(
)
.
IsSpecifiedOnCommandLine
(
)
;
}
std
:
:
string
Filename
(
)
const
{
return
GetImpl
(
)
.
Filename
(
)
;
}
std
:
:
string
DefaultValue
(
)
const
{
return
GetImpl
(
)
.
DefaultValue
(
)
;
}
std
:
:
string
CurrentValue
(
)
const
{
return
GetImpl
(
)
.
CurrentValue
(
)
;
}
template
<
typename
U
>
inline
bool
IsOfType
(
)
const
{
return
GetImpl
(
)
.
template
IsOfType
<
U
>
(
)
;
}
T
Get
(
)
const
{
return
flags_internal
:
:
FlagImplPeer
:
:
InvokeGet
<
T
>
(
GetImpl
(
)
)
;
}
void
Set
(
const
T
&
v
)
{
flags_internal
:
:
FlagImplPeer
:
:
InvokeSet
(
GetImpl
(
)
v
)
;
}
void
InvokeCallback
(
)
{
GetImpl
(
)
.
InvokeCallback
(
)
;
}
const
CommandLineFlag
&
Reflect
(
)
const
{
return
flags_internal
:
:
FlagImplPeer
:
:
InvokeReflect
(
GetImpl
(
)
)
;
}
const
char
*
name_
;
const
char
*
filename_
;
const
flags_internal
:
:
HelpGenFunc
help_gen_
;
const
flags_internal
:
:
FlagDfltGenFunc
default_value_gen_
;
mutable
std
:
:
atomic
<
bool
>
inited_
;
mutable
flags_internal
:
:
Flag
<
T
>
*
impl_
;
}
;
