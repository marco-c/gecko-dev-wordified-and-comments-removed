#
ifndef
ABSL_FLAGS_INTERNAL_PARSE_H_
#
define
ABSL_FLAGS_INTERNAL_PARSE_H_
#
include
<
iostream
>
#
include
<
ostream
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
base
/
config
.
h
"
#
include
"
absl
/
flags
/
declare
.
h
"
#
include
"
absl
/
flags
/
internal
/
usage
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
ABSL_DECLARE_FLAG
(
std
:
:
vector
<
std
:
:
string
>
flagfile
)
;
ABSL_DECLARE_FLAG
(
std
:
:
vector
<
std
:
:
string
>
fromenv
)
;
ABSL_DECLARE_FLAG
(
std
:
:
vector
<
std
:
:
string
>
tryfromenv
)
;
ABSL_DECLARE_FLAG
(
std
:
:
vector
<
std
:
:
string
>
undefok
)
;
namespace
absl
{
ABSL_NAMESPACE_BEGIN
namespace
flags_internal
{
enum
class
UsageFlagsAction
{
kHandleUsage
kIgnoreUsage
}
;
enum
class
OnUndefinedFlag
{
kIgnoreUndefined
kReportUndefined
kAbortIfUndefined
}
;
std
:
:
vector
<
char
*
>
ParseCommandLineImpl
(
int
argc
char
*
argv
[
]
UsageFlagsAction
usage_flag_action
OnUndefinedFlag
undef_flag_action
std
:
:
ostream
&
error_help_output
=
std
:
:
cout
)
;
bool
WasPresentOnCommandLine
(
absl
:
:
string_view
flag_name
)
;
std
:
:
vector
<
std
:
:
string
>
GetMisspellingHints
(
absl
:
:
string_view
flag
)
;
}
ABSL_NAMESPACE_END
}
#
endif
