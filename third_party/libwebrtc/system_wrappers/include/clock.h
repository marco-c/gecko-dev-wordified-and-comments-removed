#
ifndef
SYSTEM_WRAPPERS_INCLUDE_CLOCK_H_
#
define
SYSTEM_WRAPPERS_INCLUDE_CLOCK_H_
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
synchronization
/
rw_lock_wrapper
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
system_wrappers
/
include
/
ntp_time
.
h
"
namespace
webrtc
{
const
uint32_t
kNtpJan1970
=
2208988800UL
;
const
double
kMagicNtpFractionalUnit
=
4
.
294967296E
+
9
;
class
RTC_EXPORT
Clock
{
public
:
virtual
~
Clock
(
)
{
}
virtual
Timestamp
CurrentTime
(
)
=
0
;
int64_t
TimeInMilliseconds
(
)
{
return
CurrentTime
(
)
.
ms
(
)
;
}
int64_t
TimeInMicroseconds
(
)
{
return
CurrentTime
(
)
.
us
(
)
;
}
virtual
NtpTime
CurrentNtpTime
(
)
{
return
ConvertTimestampToNtpTime
(
CurrentTime
(
)
)
;
}
int64_t
CurrentNtpInMilliseconds
(
)
{
return
CurrentNtpTime
(
)
.
ToMs
(
)
;
}
virtual
NtpTime
ConvertTimestampToNtpTime
(
Timestamp
timestamp
)
=
0
;
int64_t
ConvertTimestampToNtpTimeInMilliseconds
(
int64_t
timestamp_ms
)
{
return
ConvertTimestampToNtpTime
(
Timestamp
:
:
Millis
(
timestamp_ms
)
)
.
ToMs
(
)
;
}
static
Clock
*
GetRealTimeClock
(
)
;
}
;
class
SimulatedClock
:
public
Clock
{
public
:
explicit
SimulatedClock
(
int64_t
initial_time_us
)
;
explicit
SimulatedClock
(
Timestamp
initial_time
)
;
~
SimulatedClock
(
)
override
;
Timestamp
CurrentTime
(
)
override
;
NtpTime
ConvertTimestampToNtpTime
(
Timestamp
timestamp
)
override
;
void
AdvanceTimeMilliseconds
(
int64_t
milliseconds
)
;
void
AdvanceTimeMicroseconds
(
int64_t
microseconds
)
;
void
AdvanceTime
(
TimeDelta
delta
)
;
private
:
Timestamp
time_
;
std
:
:
unique_ptr
<
RWLockWrapper
>
lock_
;
}
;
}
#
endif
