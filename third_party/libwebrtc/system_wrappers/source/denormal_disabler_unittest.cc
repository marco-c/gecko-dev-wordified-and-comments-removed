#
include
"
system_wrappers
/
include
/
denormal_disabler
.
h
"
#
include
<
cmath
>
#
include
<
limits
>
#
include
<
vector
>
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
float
kSmallest
=
std
:
:
numeric_limits
<
float
>
:
:
min
(
)
;
constexpr
float
kDenormalDivisors
[
]
=
{
123
.
125f
97
.
0f
32
.
0f
5
.
0f
1
.
5f
}
;
bool
DivisionIsDenormal
(
float
dividend
float
divisor
)
{
RTC_DCHECK_GE
(
std
:
:
fabsf
(
dividend
)
kSmallest
)
;
RTC_DCHECK_GE
(
std
:
:
fabsf
(
divisor
)
kSmallest
)
;
volatile
float
division
=
dividend
/
divisor
;
return
division
!
=
0
.
0f
&
&
std
:
:
fabsf
(
division
)
<
kSmallest
;
}
}
class
DenormalDisablerParametrization
:
public
:
:
testing
:
:
TestWithParam
<
bool
>
{
}
;
TEST_P
(
DenormalDisablerParametrization
InfNotZeroedExplicitlySetEnabled
)
{
DenormalDisabler
denormal_disabler
(
GetParam
(
)
)
;
constexpr
float
kMax
=
std
:
:
numeric_limits
<
float
>
:
:
max
(
)
;
for
(
float
x
:
{
-
2
.
0f
2
.
0f
}
)
{
SCOPED_TRACE
(
x
)
;
volatile
float
multiplication
=
kMax
*
x
;
EXPECT_TRUE
(
std
:
:
isinf
(
multiplication
)
)
;
}
}
TEST_P
(
DenormalDisablerParametrization
NanNotZeroedExplicitlySetEnabled
)
{
DenormalDisabler
denormal_disabler
(
GetParam
(
)
)
;
volatile
float
kNan
=
std
:
:
sqrt
(
-
1
.
0f
)
;
EXPECT_TRUE
(
std
:
:
isnan
(
kNan
)
)
;
}
INSTANTIATE_TEST_SUITE_P
(
DenormalDisabler
DenormalDisablerParametrization
:
:
testing
:
:
Values
(
false
true
)
[
]
(
const
:
:
testing
:
:
TestParamInfo
<
bool
>
&
info
)
{
return
info
.
param
?
"
enabled
"
:
"
disabled
"
;
}
)
;
TEST
(
DenormalDisabler
InfNotZeroed
)
{
DenormalDisabler
denormal_disabler
;
constexpr
float
kMax
=
std
:
:
numeric_limits
<
float
>
:
:
max
(
)
;
for
(
float
x
:
{
-
2
.
0f
2
.
0f
}
)
{
SCOPED_TRACE
(
x
)
;
volatile
float
multiplication
=
kMax
*
x
;
EXPECT_TRUE
(
std
:
:
isinf
(
multiplication
)
)
;
}
}
TEST
(
DenormalDisabler
NanNotZeroed
)
{
DenormalDisabler
denormal_disabler
;
volatile
float
kNan
=
std
:
:
sqrt
(
-
1
.
0f
)
;
EXPECT_TRUE
(
std
:
:
isnan
(
kNan
)
)
;
}
TEST
(
DenormalDisabler
DoNotZeroDenormalsIfDisabled
)
{
if
(
!
DenormalDisabler
:
:
IsSupported
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Unsupported
platform
.
"
;
}
ASSERT_TRUE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
<
<
"
Precondition
not
met
:
denormals
must
be
enabled
.
"
;
DenormalDisabler
denormal_disabler
(
false
)
;
for
(
float
x
:
kDenormalDivisors
)
{
SCOPED_TRACE
(
x
)
;
EXPECT_TRUE
(
DivisionIsDenormal
(
-
kSmallest
x
)
)
;
EXPECT_TRUE
(
DivisionIsDenormal
(
kSmallest
x
)
)
;
}
}
TEST
(
DenormalDisabler
ZeroDenormals
)
{
if
(
!
DenormalDisabler
:
:
IsSupported
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Unsupported
platform
.
"
;
}
DenormalDisabler
denormal_disabler
;
for
(
float
x
:
kDenormalDivisors
)
{
SCOPED_TRACE
(
x
)
;
EXPECT_FALSE
(
DivisionIsDenormal
(
-
kSmallest
x
)
)
;
EXPECT_FALSE
(
DivisionIsDenormal
(
kSmallest
x
)
)
;
}
}
TEST
(
DenormalDisabler
ZeroDenormalsExplicitlyEnabled
)
{
if
(
!
DenormalDisabler
:
:
IsSupported
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Unsupported
platform
.
"
;
}
DenormalDisabler
denormal_disabler
(
true
)
;
for
(
float
x
:
kDenormalDivisors
)
{
SCOPED_TRACE
(
x
)
;
EXPECT_FALSE
(
DivisionIsDenormal
(
-
kSmallest
x
)
)
;
EXPECT_FALSE
(
DivisionIsDenormal
(
kSmallest
x
)
)
;
}
}
TEST
(
DenormalDisabler
RestoreDenormalsEnabled
)
{
if
(
!
DenormalDisabler
:
:
IsSupported
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Unsupported
platform
.
"
;
}
ASSERT_TRUE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
<
<
"
Precondition
not
met
:
denormals
must
be
enabled
.
"
;
{
DenormalDisabler
denormal_disabler
;
ASSERT_FALSE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
;
}
EXPECT_TRUE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
;
}
TEST
(
DenormalDisabler
RestoreDenormalsEnabledExplicitlyEnabled
)
{
if
(
!
DenormalDisabler
:
:
IsSupported
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Unsupported
platform
.
"
;
}
ASSERT_TRUE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
<
<
"
Precondition
not
met
:
denormals
must
be
enabled
.
"
;
{
DenormalDisabler
denormal_disabler
(
true
)
;
ASSERT_FALSE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
;
}
EXPECT_TRUE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
;
}
TEST
(
DenormalDisabler
ZeroDenormalsNested
)
{
if
(
!
DenormalDisabler
:
:
IsSupported
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Unsupported
platform
.
"
;
}
DenormalDisabler
d1
;
ASSERT_FALSE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
;
{
DenormalDisabler
d2
;
ASSERT_FALSE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
;
}
EXPECT_FALSE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
;
}
TEST
(
DenormalDisabler
ZeroDenormalsNestedExplicitlyEnabled
)
{
if
(
!
DenormalDisabler
:
:
IsSupported
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Unsupported
platform
.
"
;
}
DenormalDisabler
d1
(
true
)
;
ASSERT_FALSE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
;
{
DenormalDisabler
d2
(
true
)
;
ASSERT_FALSE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
;
}
EXPECT_FALSE
(
DivisionIsDenormal
(
kSmallest
kDenormalDivisors
[
0
]
)
)
;
}
TEST
(
DenormalDisabler
DoNotZeroDenormalsIfUnsupported
)
{
if
(
DenormalDisabler
:
:
IsSupported
(
)
)
{
GTEST_SKIP
(
)
<
<
"
This
test
should
only
run
on
platforms
without
support
"
"
for
DenormalDisabler
.
"
;
}
DenormalDisabler
denormal_disabler
;
for
(
float
x
:
kDenormalDivisors
)
{
SCOPED_TRACE
(
x
)
;
EXPECT_TRUE
(
DivisionIsDenormal
(
-
kSmallest
x
)
)
;
EXPECT_TRUE
(
DivisionIsDenormal
(
kSmallest
x
)
)
;
}
}
TEST
(
DenormalDisabler
DoNotZeroDenormalsIfUnsupportedExplicitlyEnabled
)
{
if
(
DenormalDisabler
:
:
IsSupported
(
)
)
{
GTEST_SKIP
(
)
<
<
"
This
test
should
only
run
on
platforms
without
support
"
"
for
DenormalDisabler
.
"
;
}
DenormalDisabler
denormal_disabler
(
true
)
;
for
(
float
x
:
kDenormalDivisors
)
{
SCOPED_TRACE
(
x
)
;
EXPECT_TRUE
(
DivisionIsDenormal
(
-
kSmallest
x
)
)
;
EXPECT_TRUE
(
DivisionIsDenormal
(
kSmallest
x
)
)
;
}
}
}
