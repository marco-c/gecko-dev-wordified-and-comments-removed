#
include
"
system_wrappers
/
include
/
rtp_to_ntp_estimator
.
h
"
#
include
<
stddef
.
h
>
#
include
"
rtc_base
/
random
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
const
uint32_t
kOneMsInNtpFrac
=
4294967
;
const
uint32_t
kOneHourInNtpSec
=
60
*
60
;
const
uint32_t
kTimestampTicksPerMs
=
90
;
}
TEST
(
WrapAroundTests
OldRtcpWrapped_OldRtpTimestamp
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
-
=
kTimestampTicksPerMs
;
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
}
TEST
(
WrapAroundTests
OldRtcpWrapped_OldRtpTimestamp_Wraparound_Detected
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0xFFFFFFFE
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
2
*
kOneMsInNtpFrac
;
timestamp
+
=
2
*
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
-
=
kTimestampTicksPerMs
;
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
}
TEST
(
WrapAroundTests
NewRtcpWrapped
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0xFFFFFFFF
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
int64_t
timestamp_ms
=
-
1
;
EXPECT_TRUE
(
estimator
.
Estimate
(
0xFFFFFFFF
&
timestamp_ms
)
)
;
EXPECT_EQ
(
0
timestamp_ms
)
;
}
TEST
(
WrapAroundTests
RtpWrapped
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0xFFFFFFFF
-
2
*
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
int64_t
timestamp_ms
=
-
1
;
EXPECT_TRUE
(
estimator
.
Estimate
(
0xFFFFFFFF
-
2
*
kTimestampTicksPerMs
&
timestamp_ms
)
)
;
EXPECT_EQ
(
0
timestamp_ms
)
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
EXPECT_EQ
(
2
timestamp_ms
)
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
EXPECT_EQ
(
3
timestamp_ms
)
;
}
TEST
(
WrapAroundTests
OldRtp_RtcpsWrapped
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0xFFFFFFFF
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
timestamp
-
=
2
*
kTimestampTicksPerMs
;
int64_t
timestamp_ms
=
0xFFFFFFFF
;
EXPECT_FALSE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
}
TEST
(
WrapAroundTests
OldRtp_NewRtcpWrapped
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0xFFFFFFFF
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
timestamp
-
=
kTimestampTicksPerMs
;
int64_t
timestamp_ms
=
-
1
;
EXPECT_TRUE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
EXPECT_EQ
(
0
timestamp_ms
)
;
}
TEST
(
WrapAroundTests
GracefullyHandleRtpJump
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
-
=
kTimestampTicksPerMs
;
int64_t
timestamp_ms
=
-
1
;
EXPECT_TRUE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
EXPECT_EQ
(
0
timestamp_ms
)
;
timestamp
-
=
0xFFFFF
;
for
(
int
i
=
0
;
i
<
RtpToNtpEstimator
:
:
kMaxInvalidSamples
-
1
;
+
+
i
)
{
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
}
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
timestamp_ms
=
-
1
;
EXPECT_TRUE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
EXPECT_EQ
(
6
timestamp_ms
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForZeroNtp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
0
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_FALSE
(
new_sr
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForEqualNtp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
699925050
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
+
+
timestamp
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_FALSE
(
new_sr
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForOldNtp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
1
;
uint32_t
ntp_frac
=
699925050
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
ntp_frac
-
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForTooNewNtp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
1
;
uint32_t
ntp_frac
=
699925050
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
ntp_sec
+
=
kOneHourInNtpSec
*
2
;
timestamp
+
=
kTimestampTicksPerMs
*
10
;
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForEqualTimestamp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
2
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
+
+
ntp_frac
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_FALSE
(
new_sr
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForOldRtpTimestamp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
2
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
-
=
kTimestampTicksPerMs
;
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_FALSE
(
new_sr
)
;
}
TEST
(
UpdateRtcpMeasurementTests
VerifyParameters
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
1
;
uint32_t
ntp_frac
=
2
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
EXPECT_FALSE
(
estimator
.
params
(
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
estimator
.
params
(
)
)
;
EXPECT_DOUBLE_EQ
(
90
.
0
estimator
.
params
(
)
-
>
frequency_khz
)
;
EXPECT_NE
(
0
.
0
estimator
.
params
(
)
-
>
offset_ms
)
;
}
TEST
(
RtpToNtpTests
FailsForNoParameters
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
1
;
uint32_t
ntp_frac
=
2
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
EXPECT_FALSE
(
estimator
.
params
(
)
)
;
int64_t
timestamp_ms
=
-
1
;
EXPECT_FALSE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
}
TEST
(
RtpToNtpTests
AveragesErrorOut
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
1
;
uint32_t
ntp_frac
=
90000000
;
uint32_t
timestamp
=
0x12345678
;
const
int
kNtpSecStep
=
1
;
const
int
kRtpTicksPerMs
=
90
;
const
int
kRtpStep
=
kRtpTicksPerMs
*
1000
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
Random
rand
(
1123536L
)
;
for
(
size_t
i
=
0
;
i
<
1000
;
i
+
+
)
{
ntp_sec
+
=
kNtpSecStep
;
timestamp
+
=
kRtpStep
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
+
rand
.
Rand
(
-
static_cast
<
int
>
(
kOneMsInNtpFrac
)
static_cast
<
int
>
(
kOneMsInNtpFrac
)
)
timestamp
+
rand
.
Rand
(
-
kRtpTicksPerMs
kRtpTicksPerMs
)
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
int64_t
estimated_ntp_ms
;
EXPECT_TRUE
(
estimator
.
Estimate
(
timestamp
&
estimated_ntp_ms
)
)
;
EXPECT_NEAR
(
NtpTime
(
ntp_sec
ntp_frac
)
.
ToMs
(
)
estimated_ntp_ms
2
)
;
}
}
}
