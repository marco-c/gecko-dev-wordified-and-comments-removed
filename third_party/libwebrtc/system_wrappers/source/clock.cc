#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
namespace
webrtc
{
namespace
{
int64_t
NtpOffsetUsCalledOnce
(
)
{
constexpr
int64_t
kNtpJan1970Sec
=
2208988800
;
int64_t
clock_time
=
TimeMicros
(
)
;
int64_t
utc_time
=
TimeUTCMicros
(
)
;
return
utc_time
-
clock_time
+
kNtpJan1970Sec
*
kNumMicrosecsPerSec
;
}
NtpTime
TimeMicrosToNtp
(
int64_t
time_us
)
{
static
int64_t
ntp_offset_us
=
NtpOffsetUsCalledOnce
(
)
;
int64_t
time_ntp_us
=
time_us
+
ntp_offset_us
;
RTC_DCHECK_GE
(
time_ntp_us
0
)
;
uint32_t
ntp_seconds
=
static_cast
<
uint64_t
>
(
time_ntp_us
/
kNumMicrosecsPerSec
)
;
constexpr
int64_t
kNtpFractionsInSecond
=
1LL
<
<
32
;
int64_t
us_fractions
=
time_ntp_us
%
kNumMicrosecsPerSec
;
uint32_t
ntp_fractions
=
us_fractions
*
kNtpFractionsInSecond
/
kNumMicrosecsPerSec
;
return
NtpTime
(
ntp_seconds
ntp_fractions
)
;
}
}
class
RealTimeClock
:
public
Clock
{
public
:
RealTimeClock
(
)
=
default
;
Timestamp
CurrentTime
(
)
override
{
return
Timestamp
:
:
Micros
(
TimeMicros
(
)
)
;
}
NtpTime
ConvertTimestampToNtpTime
(
Timestamp
timestamp
)
override
{
return
TimeMicrosToNtp
(
timestamp
.
us
(
)
)
;
}
}
;
Clock
*
Clock
:
:
GetRealTimeClockRaw
(
)
{
static
Clock
*
const
clock
=
new
RealTimeClock
(
)
;
return
clock
;
}
SimulatedClock
:
:
SimulatedClock
(
int64_t
initial_time_us
)
:
time_us_
(
initial_time_us
)
{
}
SimulatedClock
:
:
SimulatedClock
(
Timestamp
initial_time
)
:
SimulatedClock
(
initial_time
.
us
(
)
)
{
}
SimulatedClock
:
:
~
SimulatedClock
(
)
{
}
Timestamp
SimulatedClock
:
:
CurrentTime
(
)
{
return
Timestamp
:
:
Micros
(
time_us_
.
load
(
std
:
:
memory_order_relaxed
)
)
;
}
NtpTime
SimulatedClock
:
:
ConvertTimestampToNtpTime
(
Timestamp
timestamp
)
{
int64_t
now_us
=
timestamp
.
us
(
)
;
uint32_t
seconds
=
(
now_us
/
1
'
000
'
000
)
+
kNtpJan1970
;
uint32_t
fractions
=
static_cast
<
uint32_t
>
(
(
now_us
%
1
'
000
'
000
)
*
kMagicNtpFractionalUnit
/
1
'
000
'
000
)
;
return
NtpTime
(
seconds
fractions
)
;
}
void
SimulatedClock
:
:
AdvanceTimeMilliseconds
(
int64_t
milliseconds
)
{
AdvanceTime
(
TimeDelta
:
:
Millis
(
milliseconds
)
)
;
}
void
SimulatedClock
:
:
AdvanceTimeMicroseconds
(
int64_t
microseconds
)
{
AdvanceTime
(
TimeDelta
:
:
Micros
(
microseconds
)
)
;
}
void
SimulatedClock
:
:
AdvanceTime
(
TimeDelta
delta
)
{
time_us_
.
fetch_add
(
delta
.
us
(
)
std
:
:
memory_order_relaxed
)
;
}
}
