import
glob
import
optparse
import
os
import
shutil
import
subprocess
import
sys
sys
.
path
.
insert
(
0
os
.
path
.
join
(
os
.
path
.
dirname
(
__file__
)
'
.
.
'
'
.
.
'
                                
'
third_party
'
'
pefile
'
)
)
import
pefile
def
reorder_imports
(
input_dir
output_dir
architecture
)
:
  
"
"
"
Swap
chrome_elf
.
dll
to
be
the
first
import
of
chrome
.
exe
.
  
Also
copy
over
any
related
files
that
might
be
needed
  
(
pdbs
manifests
etc
.
)
.
  
"
"
"
  
input_image
=
os
.
path
.
join
(
input_dir
'
chrome
.
exe
'
)
  
output_image
=
os
.
path
.
join
(
output_dir
'
chrome
.
exe
'
)
  
pe
=
pefile
.
PE
(
input_image
fast_load
=
True
)
  
if
architecture
=
=
'
x64
'
or
architecture
=
=
'
arm64
'
:
    
assert
pe
.
PE_TYPE
=
=
pefile
.
OPTIONAL_HEADER_MAGIC_PE_PLUS
  
else
:
    
assert
pe
.
PE_TYPE
=
=
pefile
.
OPTIONAL_HEADER_MAGIC_PE
  
pe
.
parse_data_directories
(
directories
=
[
      
pefile
.
DIRECTORY_ENTRY
[
'
IMAGE_DIRECTORY_ENTRY_IMPORT
'
]
]
)
  
found_elf
=
False
  
for
i
peimport
in
enumerate
(
pe
.
DIRECTORY_ENTRY_IMPORT
)
:
    
if
peimport
.
dll
.
lower
(
)
=
=
'
chrome_elf
.
dll
'
:
      
assert
not
found_elf
'
only
one
chrome_elf
.
dll
import
expected
'
      
found_elf
=
True
      
if
i
>
0
:
        
swap
=
pe
.
DIRECTORY_ENTRY_IMPORT
[
0
]
        
peimport
.
struct
.
OriginalFirstThunk
swap
.
struct
.
OriginalFirstThunk
=
\
            
swap
.
struct
.
OriginalFirstThunk
peimport
.
struct
.
OriginalFirstThunk
        
peimport
.
struct
.
TimeDateStamp
swap
.
struct
.
TimeDateStamp
=
\
            
swap
.
struct
.
TimeDateStamp
peimport
.
struct
.
TimeDateStamp
        
peimport
.
struct
.
ForwarderChain
swap
.
struct
.
ForwarderChain
=
\
            
swap
.
struct
.
ForwarderChain
peimport
.
struct
.
ForwarderChain
        
peimport
.
struct
.
Name
swap
.
struct
.
Name
=
\
            
swap
.
struct
.
Name
peimport
.
struct
.
Name
        
peimport
.
struct
.
FirstThunk
swap
.
struct
.
FirstThunk
=
\
            
swap
.
struct
.
FirstThunk
peimport
.
struct
.
FirstThunk
  
assert
found_elf
'
chrome_elf
.
dll
import
not
found
'
  
pe
.
write
(
filename
=
output_image
)
  
for
fname
in
glob
.
iglob
(
os
.
path
.
join
(
input_dir
'
chrome
.
exe
.
*
'
)
)
:
    
shutil
.
copy
(
fname
os
.
path
.
join
(
output_dir
os
.
path
.
basename
(
fname
)
)
)
  
return
0
def
main
(
argv
)
:
  
usage
=
'
reorder_imports
.
py
-
i
<
input_dir
>
-
o
<
output_dir
>
-
a
<
target_arch
>
'
  
parser
=
optparse
.
OptionParser
(
usage
=
usage
)
  
parser
.
add_option
(
'
-
i
'
'
-
-
input
'
help
=
'
reorder
chrome
.
exe
in
DIR
'
      
metavar
=
'
DIR
'
)
  
parser
.
add_option
(
'
-
o
'
'
-
-
output
'
help
=
'
write
new
chrome
.
exe
to
DIR
'
      
metavar
=
'
DIR
'
)
  
parser
.
add_option
(
'
-
a
'
'
-
-
arch
'
help
=
'
architecture
of
build
(
optional
)
'
      
default
=
'
ia32
'
)
  
opts
args
=
parser
.
parse_args
(
)
  
if
not
opts
.
input
or
not
opts
.
output
:
    
parser
.
error
(
'
Please
provide
and
input
and
output
directory
'
)
  
return
reorder_imports
(
opts
.
input
opts
.
output
opts
.
arch
)
if
__name__
=
=
"
__main__
"
:
  
sys
.
exit
(
main
(
sys
.
argv
[
1
:
]
)
)
