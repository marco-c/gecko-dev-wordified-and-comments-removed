from
__future__
import
print_function
import
difflib
import
distutils
.
dir_util
import
filecmp
import
os
import
re
import
shutil
import
subprocess
import
sys
import
tempfile
def
main
(
)
:
  
env_file
rest
=
sys
.
argv
[
1
]
sys
.
argv
[
2
:
]
  
header_dir
=
None
  
resource_dir
=
None
  
input_file
=
None
  
for
i
arg
in
enumerate
(
rest
)
:
    
if
arg
=
=
'
-
h
'
and
len
(
rest
)
>
i
+
1
:
      
assert
header_dir
=
=
None
      
header_dir
=
rest
[
i
+
1
]
    
elif
arg
=
=
'
-
r
'
and
len
(
rest
)
>
i
+
1
:
      
assert
resource_dir
=
=
None
      
resource_dir
=
rest
[
i
+
1
]
    
elif
arg
.
endswith
(
'
.
mc
'
)
or
arg
.
endswith
(
'
.
man
'
)
:
      
assert
input_file
=
=
None
      
input_file
=
arg
  
THIS_DIR
=
os
.
path
.
abspath
(
os
.
path
.
dirname
(
__file__
)
)
  
assert
header_dir
=
=
resource_dir
  
source
=
os
.
path
.
join
(
THIS_DIR
"
.
.
"
"
.
.
"
      
"
third_party
"
"
win_build_output
"
      
re
.
sub
(
r
'
^
(
?
:
[
^
/
]
+
/
)
?
gen
/
'
'
mc
/
'
header_dir
)
)
  
distutils
.
dir_util
.
copy_tree
(
source
header_dir
preserve_times
=
False
)
  
if
sys
.
platform
!
=
'
win32
'
:
    
return
  
env_pairs
=
open
(
env_file
)
.
read
(
)
[
:
-
2
]
.
split
(
'
\
0
'
)
  
env_dict
=
dict
(
[
item
.
split
(
'
=
'
1
)
for
item
in
env_pairs
]
)
  
extension
=
os
.
path
.
splitext
(
input_file
)
[
1
]
  
if
extension
in
[
'
.
man
'
'
.
mc
'
]
:
    
mc_help
=
subprocess
.
check_output
(
[
'
mc
.
exe
'
'
/
?
'
]
env
=
env_dict
                                      
stderr
=
subprocess
.
STDOUT
shell
=
True
)
    
version
=
re
.
search
(
br
'
Message
Compiler
\
s
+
Version
(
\
S
+
)
'
mc_help
)
.
group
(
1
)
    
if
version
!
=
'
10
.
0
.
15063
'
:
      
return
  
try
:
    
tmp_dir
=
tempfile
.
mkdtemp
(
)
    
delete_tmp_dir
=
True
    
if
header_dir
:
      
rest
[
rest
.
index
(
'
-
h
'
)
+
1
]
=
tmp_dir
      
header_dir
=
tmp_dir
    
if
resource_dir
:
      
rest
[
rest
.
index
(
'
-
r
'
)
+
1
]
=
tmp_dir
      
resource_dir
=
tmp_dir
    
subprocess
.
check_output
(
[
'
mc
.
exe
'
]
+
rest
                            
env
=
env_dict
                            
stderr
=
subprocess
.
STDOUT
                            
shell
=
True
)
    
if
header_dir
:
      
header_file
=
os
.
path
.
join
(
          
header_dir
os
.
path
.
splitext
(
os
.
path
.
basename
(
input_file
)
)
[
0
]
+
'
.
h
'
)
      
header_contents
=
[
]
      
with
open
(
header_file
'
rb
'
)
as
f
:
        
define_block
=
[
]
        
for
line
in
f
.
readlines
(
)
:
          
if
line
.
startswith
(
'
/
/
'
)
and
'
?
'
in
line
:
            
continue
          
if
line
.
startswith
(
'
#
define
'
)
:
            
define_block
.
append
(
line
)
            
continue
          
header_contents
+
=
sorted
(
define_block
key
=
lambda
s
:
s
.
split
(
)
[
-
1
]
)
          
define_block
=
[
]
          
header_contents
.
append
(
line
)
        
header_contents
+
=
sorted
(
define_block
key
=
lambda
s
:
s
.
split
(
)
[
-
1
]
)
      
with
open
(
header_file
'
wb
'
)
as
f
:
        
f
.
write
(
'
'
.
join
(
header_contents
)
)
    
diff
=
filecmp
.
dircmp
(
tmp_dir
source
)
    
if
diff
.
diff_files
or
set
(
diff
.
left_list
)
!
=
set
(
diff
.
right_list
)
:
      
print
(
'
mc
.
exe
output
different
from
files
in
%
s
see
%
s
'
%
(
source
                                                                  
tmp_dir
)
)
      
diff
.
report
(
)
      
for
f
in
diff
.
diff_files
:
        
if
f
.
endswith
(
'
.
bin
'
)
:
continue
        
fromfile
=
os
.
path
.
join
(
source
f
)
        
tofile
=
os
.
path
.
join
(
tmp_dir
f
)
        
print
(
'
'
.
join
(
            
difflib
.
unified_diff
(
                
open
(
fromfile
'
U
'
)
.
readlines
(
)
                
open
(
tofile
'
U
'
)
.
readlines
(
)
fromfile
tofile
)
)
)
      
delete_tmp_dir
=
False
      
sys
.
exit
(
1
)
  
except
subprocess
.
CalledProcessError
as
e
:
    
print
(
e
.
output
)
    
sys
.
exit
(
e
.
returncode
)
  
finally
:
    
if
os
.
path
.
exists
(
tmp_dir
)
and
delete_tmp_dir
:
      
shutil
.
rmtree
(
tmp_dir
)
if
__name__
=
=
'
__main__
'
:
  
main
(
)
