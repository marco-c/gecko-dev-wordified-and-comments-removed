#
include
"
build
/
build_config
.
h
"
#
if
defined
(
ADDRESS_SANITIZER
)
|
|
defined
(
LEAK_SANITIZER
)
|
|
\
defined
(
MEMORY_SANITIZER
)
|
|
defined
(
THREAD_SANITIZER
)
|
|
\
defined
(
UNDEFINED_SANITIZER
)
extern
"
C
"
void
_sanitizer_options_link_helper
(
)
{
}
#
define
SANITIZER_HOOK_ATTRIBUTE
\
extern
"
C
"
\
__attribute__
(
(
no_sanitize
(
"
address
"
"
memory
"
"
thread
"
"
undefined
"
)
)
)
\
__attribute__
(
(
visibility
(
"
default
"
)
)
)
\
__attribute__
(
(
used
)
)
#
endif
#
if
defined
(
ADDRESS_SANITIZER
)
#
if
defined
(
OS_LINUX
)
|
|
defined
(
OS_CHROMEOS
)
const
char
kAsanDefaultOptions
[
]
=
"
check_printf
=
1
use_sigaltstack
=
1
strip_path_prefix
=
/
.
.
/
.
.
/
"
"
fast_unwind_on_fatal
=
1
detect_stack_use_after_return
=
1
"
"
symbolize
=
1
detect_leaks
=
0
allow_user_segv_handler
=
1
"
;
#
elif
defined
(
OS_APPLE
)
const
char
*
kAsanDefaultOptions
=
"
check_printf
=
1
use_sigaltstack
=
1
strip_path_prefix
=
/
.
.
/
.
.
/
"
"
fast_unwind_on_fatal
=
1
detect_stack_use_after_return
=
1
"
;
#
elif
defined
(
OS_WIN
)
const
char
*
kAsanDefaultOptions
=
"
check_printf
=
1
use_sigaltstack
=
1
strip_path_prefix
=
\
\
.
.
\
\
.
.
\
\
"
"
fast_unwind_on_fatal
=
1
detect_stack_use_after_return
=
1
"
;
#
endif
#
if
defined
(
OS_LINUX
)
|
|
defined
(
OS_CHROMEOS
)
|
|
defined
(
OS_APPLE
)
|
|
\
defined
(
OS_WIN
)
extern
const
char
*
kAsanDefaultOptionsNaCl
;
__attribute__
(
(
weak
)
)
const
char
*
kAsanDefaultOptionsNaCl
=
nullptr
;
SANITIZER_HOOK_ATTRIBUTE
const
char
*
__asan_default_options
(
)
{
if
(
kAsanDefaultOptionsNaCl
)
return
kAsanDefaultOptionsNaCl
;
return
kAsanDefaultOptions
;
}
extern
char
kASanDefaultSuppressions
[
]
;
SANITIZER_HOOK_ATTRIBUTE
const
char
*
__asan_default_suppressions
(
)
{
return
kASanDefaultSuppressions
;
}
#
endif
#
endif
#
if
defined
(
THREAD_SANITIZER
)
&
&
(
defined
(
OS_LINUX
)
|
|
defined
(
OS_CHROMEOS
)
)
const
char
kTsanDefaultOptions
[
]
=
"
detect_deadlocks
=
1
second_deadlock_stack
=
1
report_signal_unsafe
=
0
"
"
report_thread_leaks
=
0
print_suppressions
=
1
history_size
=
7
"
"
strip_path_prefix
=
/
.
.
/
.
.
/
"
;
SANITIZER_HOOK_ATTRIBUTE
const
char
*
__tsan_default_options
(
)
{
return
kTsanDefaultOptions
;
}
extern
char
kTSanDefaultSuppressions
[
]
;
SANITIZER_HOOK_ATTRIBUTE
const
char
*
__tsan_default_suppressions
(
)
{
return
kTSanDefaultSuppressions
;
}
#
endif
#
if
defined
(
MEMORY_SANITIZER
)
const
char
kMsanDefaultOptions
[
]
=
"
strip_path_prefix
=
/
.
.
/
.
.
/
"
;
SANITIZER_HOOK_ATTRIBUTE
const
char
*
__msan_default_options
(
)
{
return
kMsanDefaultOptions
;
}
#
endif
#
if
defined
(
LEAK_SANITIZER
)
const
char
kLsanDefaultOptions
[
]
=
"
print_suppressions
=
1
strip_path_prefix
=
/
.
.
/
.
.
/
"
#
if
defined
(
ARCH_CPU_64_BITS
)
"
use_unaligned
=
1
"
#
endif
;
SANITIZER_HOOK_ATTRIBUTE
const
char
*
__lsan_default_options
(
)
{
return
kLsanDefaultOptions
;
}
extern
char
kLSanDefaultSuppressions
[
]
;
SANITIZER_HOOK_ATTRIBUTE
const
char
*
__lsan_default_suppressions
(
)
{
return
kLSanDefaultSuppressions
;
}
#
endif
#
if
defined
(
UNDEFINED_SANITIZER
)
const
char
kUbsanDefaultOptions
[
]
=
"
print_stacktrace
=
1
strip_path_prefix
=
/
.
.
/
.
.
/
"
;
SANITIZER_HOOK_ATTRIBUTE
const
char
*
__ubsan_default_options
(
)
{
return
kUbsanDefaultOptions
;
}
#
endif
