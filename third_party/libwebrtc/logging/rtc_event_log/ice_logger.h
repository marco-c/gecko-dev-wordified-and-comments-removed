#
ifndef
LOGGING_RTC_EVENT_LOG_ICE_LOGGER_H_
#
define
LOGGING_RTC_EVENT_LOG_ICE_LOGGER_H_
#
include
<
cstdint
>
#
include
<
unordered_map
>
#
include
"
logging
/
rtc_event_log
/
events
/
rtc_event_ice_candidate_pair
.
h
"
#
include
"
logging
/
rtc_event_log
/
events
/
rtc_event_ice_candidate_pair_config
.
h
"
namespace
webrtc
{
class
RtcEventLog
;
class
IceEventLog
{
public
:
IceEventLog
(
)
;
~
IceEventLog
(
)
;
void
set_event_log
(
RtcEventLog
*
event_log
)
{
event_log_
=
event_log
;
}
void
LogCandidatePairConfig
(
IceCandidatePairConfigType
type
uint32_t
candidate_pair_id
const
IceCandidatePairDescription
&
candidate_pair_desc
)
;
void
LogCandidatePairEvent
(
IceCandidatePairEventType
type
uint32_t
candidate_pair_id
uint32_t
transaction_id
)
;
void
DumpCandidatePairDescriptionToMemoryAsConfigEvents
(
)
const
;
private
:
RtcEventLog
*
event_log_
=
nullptr
;
std
:
:
unordered_map
<
uint32_t
IceCandidatePairDescription
>
candidate_pair_desc_by_id_
;
}
;
}
#
endif
