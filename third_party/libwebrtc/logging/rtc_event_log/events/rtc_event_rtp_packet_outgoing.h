#
ifndef
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_RTP_PACKET_OUTGOING_H_
#
define
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_RTP_PACKET_OUTGOING_H_
#
include
<
memory
>
#
include
"
api
/
rtc_event_log
/
rtc_event
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet
.
h
"
namespace
webrtc
{
class
RtpPacketToSend
;
class
RtcEventRtpPacketOutgoing
final
:
public
RtcEvent
{
public
:
static
constexpr
Type
kType
=
Type
:
:
RtpPacketOutgoing
;
RtcEventRtpPacketOutgoing
(
const
RtpPacketToSend
&
packet
int
probe_cluster_id
)
;
~
RtcEventRtpPacketOutgoing
(
)
override
;
Type
GetType
(
)
const
override
{
return
kType
;
}
bool
IsConfigEvent
(
)
const
override
{
return
false
;
}
std
:
:
unique_ptr
<
RtcEventRtpPacketOutgoing
>
Copy
(
)
const
;
size_t
packet_length
(
)
const
{
return
payload_length_
+
header_length_
+
padding_length_
;
}
const
RtpPacket
&
header
(
)
const
{
return
header_
;
}
size_t
payload_length
(
)
const
{
return
payload_length_
;
}
size_t
header_length
(
)
const
{
return
header_length_
;
}
size_t
padding_length
(
)
const
{
return
padding_length_
;
}
int
probe_cluster_id
(
)
const
{
return
probe_cluster_id_
;
}
private
:
RtcEventRtpPacketOutgoing
(
const
RtcEventRtpPacketOutgoing
&
other
)
;
RtpPacket
header_
;
const
size_t
payload_length_
;
const
size_t
header_length_
;
const
size_t
padding_length_
;
const
int
probe_cluster_id_
;
}
;
}
#
endif
