#
ifndef
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_RTP_PACKET_INCOMING_H_
#
define
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_RTP_PACKET_INCOMING_H_
#
include
<
memory
>
#
include
"
api
/
rtc_event_log
/
rtc_event
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet
.
h
"
namespace
webrtc
{
class
RtpPacketReceived
;
class
RtcEventRtpPacketIncoming
final
:
public
RtcEvent
{
public
:
explicit
RtcEventRtpPacketIncoming
(
const
RtpPacketReceived
&
packet
)
;
~
RtcEventRtpPacketIncoming
(
)
override
;
Type
GetType
(
)
const
override
;
bool
IsConfigEvent
(
)
const
override
;
std
:
:
unique_ptr
<
RtcEventRtpPacketIncoming
>
Copy
(
)
const
;
size_t
packet_length
(
)
const
{
return
payload_length_
+
header_length_
+
padding_length_
;
}
const
RtpPacket
&
header
(
)
const
{
return
header_
;
}
size_t
payload_length
(
)
const
{
return
payload_length_
;
}
size_t
header_length
(
)
const
{
return
header_length_
;
}
size_t
padding_length
(
)
const
{
return
padding_length_
;
}
private
:
RtcEventRtpPacketIncoming
(
const
RtcEventRtpPacketIncoming
&
other
)
;
RtpPacket
header_
;
const
size_t
payload_length_
;
const
size_t
header_length_
;
const
size_t
padding_length_
;
}
;
}
#
endif
