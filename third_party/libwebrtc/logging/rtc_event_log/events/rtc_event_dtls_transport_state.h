#
ifndef
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_DTLS_TRANSPORT_STATE_H_
#
define
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_DTLS_TRANSPORT_STATE_H_
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
dtls_transport_interface
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
logging
/
rtc_event_log
/
events
/
rtc_event_log_parse_status
.
h
"
namespace
webrtc
{
struct
LoggedDtlsTransportState
{
int64_t
log_time_us
(
)
const
{
return
timestamp
.
us
(
)
;
}
int64_t
log_time_ms
(
)
const
{
return
timestamp
.
ms
(
)
;
}
Timestamp
log_time
(
)
const
{
return
timestamp
;
}
Timestamp
timestamp
=
Timestamp
:
:
MinusInfinity
(
)
;
DtlsTransportState
dtls_transport_state
;
}
;
class
RtcEventDtlsTransportState
:
public
RtcEvent
{
public
:
static
constexpr
Type
kType
=
Type
:
:
DtlsTransportState
;
explicit
RtcEventDtlsTransportState
(
DtlsTransportState
state
)
;
~
RtcEventDtlsTransportState
(
)
override
;
Type
GetType
(
)
const
override
{
return
kType
;
}
bool
IsConfigEvent
(
)
const
override
{
return
false
;
}
std
:
:
unique_ptr
<
RtcEventDtlsTransportState
>
Copy
(
)
const
;
DtlsTransportState
dtls_transport_state
(
)
const
{
return
dtls_transport_state_
;
}
static
std
:
:
string
Encode
(
rtc
:
:
ArrayView
<
const
RtcEvent
*
>
)
{
return
"
"
;
}
static
RtcEventLogParseStatus
Parse
(
absl
:
:
string_view
bool
std
:
:
vector
<
LoggedDtlsTransportState
>
&
)
{
return
RtcEventLogParseStatus
:
:
Error
(
"
Not
Implemented
"
__FILE__
__LINE__
)
;
}
private
:
RtcEventDtlsTransportState
(
const
RtcEventDtlsTransportState
&
other
)
;
const
DtlsTransportState
dtls_transport_state_
;
}
;
}
#
endif
