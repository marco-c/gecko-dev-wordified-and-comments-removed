#
ifndef
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_DTLS_WRITABLE_STATE_H_
#
define
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_DTLS_WRITABLE_STATE_H_
#
include
<
memory
>
#
include
"
api
/
rtc_event_log
/
rtc_event
.
h
"
namespace
webrtc
{
class
RtcEventDtlsWritableState
:
public
RtcEvent
{
public
:
static
constexpr
Type
kType
=
Type
:
:
DtlsWritableState
;
explicit
RtcEventDtlsWritableState
(
bool
writable
)
;
~
RtcEventDtlsWritableState
(
)
override
;
Type
GetType
(
)
const
override
{
return
kType
;
}
bool
IsConfigEvent
(
)
const
override
{
return
false
;
}
std
:
:
unique_ptr
<
RtcEventDtlsWritableState
>
Copy
(
)
const
;
bool
writable
(
)
const
{
return
writable_
;
}
private
:
RtcEventDtlsWritableState
(
const
RtcEventDtlsWritableState
&
other
)
;
const
bool
writable_
;
}
;
struct
LoggedDtlsWritableState
{
LoggedDtlsWritableState
(
)
=
default
;
explicit
LoggedDtlsWritableState
(
bool
writable
)
:
writable
(
writable
)
{
}
int64_t
log_time_us
(
)
const
{
return
timestamp_us
;
}
int64_t
log_time_ms
(
)
const
{
return
timestamp_us
/
1000
;
}
int64_t
timestamp_us
;
bool
writable
;
}
;
}
#
endif
