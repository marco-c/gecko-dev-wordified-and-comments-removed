#
ifndef
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_AUDIO_SEND_STREAM_CONFIG_H_
#
define
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_AUDIO_SEND_STREAM_CONFIG_H_
#
include
<
memory
>
#
include
"
api
/
rtc_event_log
/
rtc_event
.
h
"
#
include
"
logging
/
rtc_event_log
/
rtc_stream_config
.
h
"
namespace
webrtc
{
class
RtcEventAudioSendStreamConfig
final
:
public
RtcEvent
{
public
:
static
constexpr
Type
kType
=
Type
:
:
AudioSendStreamConfig
;
explicit
RtcEventAudioSendStreamConfig
(
std
:
:
unique_ptr
<
rtclog
:
:
StreamConfig
>
config
)
;
~
RtcEventAudioSendStreamConfig
(
)
override
;
Type
GetType
(
)
const
override
{
return
kType
;
}
bool
IsConfigEvent
(
)
const
override
{
return
true
;
}
std
:
:
unique_ptr
<
RtcEventAudioSendStreamConfig
>
Copy
(
)
const
;
const
rtclog
:
:
StreamConfig
&
config
(
)
const
{
return
*
config_
;
}
private
:
RtcEventAudioSendStreamConfig
(
const
RtcEventAudioSendStreamConfig
&
other
)
;
const
std
:
:
unique_ptr
<
const
rtclog
:
:
StreamConfig
>
config_
;
}
;
struct
LoggedAudioSendConfig
{
LoggedAudioSendConfig
(
)
=
default
;
LoggedAudioSendConfig
(
int64_t
timestamp_us
const
rtclog
:
:
StreamConfig
config
)
:
timestamp_us
(
timestamp_us
)
config
(
config
)
{
}
int64_t
log_time_us
(
)
const
{
return
timestamp_us
;
}
int64_t
log_time_ms
(
)
const
{
return
timestamp_us
/
1000
;
}
int64_t
timestamp_us
;
rtclog
:
:
StreamConfig
config
;
}
;
}
#
endif
