#
ifndef
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_GENERIC_PACKET_RECEIVED_H_
#
define
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_GENERIC_PACKET_RECEIVED_H_
#
include
<
memory
>
#
include
"
api
/
rtc_event_log
/
rtc_event
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
namespace
webrtc
{
struct
LoggedGenericPacketReceived
{
LoggedGenericPacketReceived
(
)
=
default
;
LoggedGenericPacketReceived
(
Timestamp
timestamp
int64_t
packet_number
int
packet_length
)
:
timestamp
(
timestamp
)
packet_number
(
packet_number
)
packet_length
(
packet_length
)
{
}
int64_t
log_time_us
(
)
const
{
return
timestamp
.
us
(
)
;
}
int64_t
log_time_ms
(
)
const
{
return
timestamp
.
ms
(
)
;
}
Timestamp
timestamp
=
Timestamp
:
:
MinusInfinity
(
)
;
int64_t
packet_number
;
int
packet_length
;
}
;
class
RtcEventGenericPacketReceived
final
:
public
RtcEvent
{
public
:
static
constexpr
Type
kType
=
Type
:
:
GenericPacketReceived
;
RtcEventGenericPacketReceived
(
int64_t
packet_number
size_t
packet_length
)
;
~
RtcEventGenericPacketReceived
(
)
override
;
std
:
:
unique_ptr
<
RtcEventGenericPacketReceived
>
Copy
(
)
const
;
Type
GetType
(
)
const
override
{
return
kType
;
}
bool
IsConfigEvent
(
)
const
override
{
return
false
;
}
int64_t
packet_number
(
)
const
{
return
packet_number_
;
}
size_t
packet_length
(
)
const
{
return
packet_length_
;
}
private
:
RtcEventGenericPacketReceived
(
const
RtcEventGenericPacketReceived
&
packet
)
;
const
int64_t
packet_number_
;
const
size_t
packet_length_
;
}
;
}
#
endif
