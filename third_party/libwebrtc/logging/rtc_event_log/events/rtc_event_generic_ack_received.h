#
ifndef
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_GENERIC_ACK_RECEIVED_H_
#
define
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_GENERIC_ACK_RECEIVED_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event
.
h
"
namespace
webrtc
{
struct
AckedPacket
{
int64_t
packet_number
;
absl
:
:
optional
<
int64_t
>
receive_acked_packet_time_ms
;
}
;
class
RtcEventGenericAckReceived
final
:
public
RtcEvent
{
public
:
static
constexpr
Type
kType
=
Type
:
:
GenericAckReceived
;
static
std
:
:
vector
<
std
:
:
unique_ptr
<
RtcEventGenericAckReceived
>
>
CreateLogs
(
int64_t
packet_number
const
std
:
:
vector
<
AckedPacket
>
&
acked_packets
)
;
~
RtcEventGenericAckReceived
(
)
override
;
std
:
:
unique_ptr
<
RtcEventGenericAckReceived
>
Copy
(
)
const
;
Type
GetType
(
)
const
override
{
return
kType
;
}
bool
IsConfigEvent
(
)
const
override
{
return
false
;
}
int64_t
packet_number
(
)
const
{
return
packet_number_
;
}
int64_t
acked_packet_number
(
)
const
{
return
acked_packet_number_
;
}
absl
:
:
optional
<
int64_t
>
receive_acked_packet_time_ms
(
)
const
{
return
receive_acked_packet_time_ms_
;
}
private
:
RtcEventGenericAckReceived
(
const
RtcEventGenericAckReceived
&
packet
)
;
RtcEventGenericAckReceived
(
int64_t
timestamp_us
int64_t
packet_number
int64_t
acked_packet_number
absl
:
:
optional
<
int64_t
>
receive_acked_packet_time_ms
)
;
const
int64_t
packet_number_
;
const
int64_t
acked_packet_number_
;
const
absl
:
:
optional
<
int64_t
>
receive_acked_packet_time_ms_
;
}
;
}
#
endif
