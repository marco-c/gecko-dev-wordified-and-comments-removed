#
ifndef
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FIELD_EXTRACTION_H_
#
define
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FIELD_EXTRACTION_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
logging
/
rtc_event_log
/
encoder
/
rtc_event_log_encoder_common
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
namespace
webrtc_event_logging
{
uint8_t
UnsignedBitWidth
(
uint64_t
max_magnitude
)
;
uint8_t
SignedBitWidth
(
uint64_t
max_pos_magnitude
uint64_t
max_neg_magnitude
)
;
uint64_t
MaxUnsignedValueOfBitWidth
(
uint64_t
bit_width
)
;
uint64_t
UnsignedDelta
(
uint64_t
previous
uint64_t
current
uint64_t
bit_mask
)
;
}
namespace
webrtc
{
template
<
typename
T
std
:
:
enable_if_t
<
std
:
:
is_signed
<
T
>
:
:
value
bool
>
=
true
>
uint64_t
EncodeAsUnsigned
(
T
value
)
{
return
webrtc_event_logging
:
:
ToUnsigned
(
value
)
;
}
template
<
typename
T
std
:
:
enable_if_t
<
std
:
:
is_unsigned
<
T
>
:
:
value
bool
>
=
true
>
uint64_t
EncodeAsUnsigned
(
T
value
)
{
return
static_cast
<
uint64_t
>
(
value
)
;
}
template
<
typename
T
std
:
:
enable_if_t
<
std
:
:
is_signed
<
T
>
:
:
value
bool
>
=
true
>
T
DecodeFromUnsignedToType
(
uint64_t
value
)
{
T
signed_value
=
0
;
bool
success
=
webrtc_event_logging
:
:
ToSigned
<
T
>
(
value
&
signed_value
)
;
if
(
!
success
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
convert
"
<
<
value
<
<
"
to
signed
type
.
"
;
}
return
signed_value
;
}
template
<
typename
T
std
:
:
enable_if_t
<
std
:
:
is_unsigned
<
T
>
:
:
value
bool
>
=
true
>
T
DecodeFromUnsignedToType
(
uint64_t
value
)
{
return
static_cast
<
T
>
(
value
)
;
}
template
<
typename
T
>
class
RtcEventLogEnum
{
static_assert
(
sizeof
(
T
)
!
=
sizeof
(
T
)
"
Missing
specialisation
of
RtcEventLogEnum
for
type
"
)
;
}
;
struct
ValuesWithPositions
{
std
:
:
vector
<
bool
>
position_mask
;
std
:
:
vector
<
uint64_t
>
values
;
}
;
}
#
endif
