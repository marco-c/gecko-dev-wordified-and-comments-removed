#
ifndef
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FIELD_ENCODING_PARSER_H_
#
define
LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_FIELD_ENCODING_PARSER_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
logging
/
rtc_event_log
/
events
/
rtc_event_field_encoding
.
h
"
class
RtcEventLogParseStatus
{
public
:
static
RtcEventLogParseStatus
Success
(
)
{
return
RtcEventLogParseStatus
(
)
;
}
static
RtcEventLogParseStatus
Error
(
std
:
:
string
error
std
:
:
string
file
int
line
)
{
return
RtcEventLogParseStatus
(
error
file
line
)
;
}
bool
ok
(
)
const
{
return
error_
.
empty
(
)
;
}
std
:
:
string
message
(
)
const
{
return
error_
;
}
private
:
RtcEventLogParseStatus
(
)
:
error_
(
)
{
}
RtcEventLogParseStatus
(
std
:
:
string
error
std
:
:
string
file
int
line
)
:
error_
(
error
+
"
(
"
+
file
+
"
:
"
+
std
:
:
to_string
(
line
)
+
"
)
"
)
{
}
std
:
:
string
error_
;
}
;
namespace
webrtc
{
class
EventParser
{
public
:
EventParser
(
)
=
default
;
RtcEventLogParseStatus
Initialize
(
absl
:
:
string_view
s
bool
batched
)
;
RtcEventLogParseStatus
ParseField
(
const
FieldParameters
&
params
std
:
:
vector
<
uint64_t
>
*
values
std
:
:
vector
<
bool
>
*
positions
=
nullptr
)
;
uint64_t
NumEventsInBatch
(
)
const
{
return
num_events_
;
}
size_t
RemainingBytes
(
)
const
{
return
pending_data_
.
size
(
)
;
}
private
:
uint64_t
ReadLittleEndian
(
uint8_t
bytes
)
;
uint64_t
ReadVarInt
(
)
;
uint64_t
ReadSingleValue
(
FieldType
field_type
)
;
uint64_t
ReadOptionalValuePositions
(
std
:
:
vector
<
bool
>
*
positions
)
;
uint64_t
CountAndIgnoreOptionalValuePositions
(
)
;
void
ReadDeltasAndPopulateValues
(
FixedLengthEncodingParametersV3
params
uint64_t
num_deltas
const
uint64_t
base
std
:
:
vector
<
uint64_t
>
*
values
)
;
void
SetError
(
)
{
error_
=
true
;
}
bool
Ok
(
)
const
{
return
!
error_
;
}
absl
:
:
string_view
pending_data_
;
bool
error_
=
false
;
uint64_t
num_events_
=
1
;
uint64_t
last_field_id_
=
FieldParameters
:
:
kTimestampField
;
}
;
}
#
endif
