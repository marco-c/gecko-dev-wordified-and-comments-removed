#
include
"
media
/
base
/
rtp_utils
.
h
"
#
include
<
string
.
h
>
#
include
<
cstdint
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
media
/
base
/
fake_rtp
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
cricket
{
static
const
uint8_t
kInvalidPacket
[
]
=
{
0x80
0x00
}
;
static
const
uint8_t
kNonCompoundRtcpPliFeedbackPacket
[
]
=
{
0x81
0xCE
0x00
0x0C
0x00
0x00
0x11
0x11
0x00
0x00
0x11
0x11
}
;
static
const
uint8_t
kNonCompoundRtcpAppPacket
[
]
=
{
0x81
0xCC
0x00
0x0C
0x00
0x00
0x11
0x11
}
;
static
const
uint8_t
kNonCompoundRtcpSDESPacket
[
]
=
{
0x80
0xCA
0x00
0x00
}
;
static
uint8_t
kFakeTag
[
4
]
=
{
0xba
0xdd
0xba
0xdd
}
;
static
uint8_t
kTestKey
[
]
=
"
12345678901234567890
"
;
static
uint8_t
kTestAstValue
[
3
]
=
{
0xaa
0xbb
0xcc
}
;
static
uint8_t
kRtpMsgWith2ByteExtnHeader
[
]
=
{
0x90
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xAA
0xBB
0xCC
0XDD
0x10
0x00
0x00
0x01
0x01
0x00
0x00
0x00
}
;
static
uint8_t
kRtpMsgWithOneByteAbsSendTimeExtension
[
]
=
{
0x90
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xBE
0xDE
0x00
0x02
0x22
0x00
0x02
0x1c
0x32
0xaa
0xbb
0xcc
}
;
static
uint8_t
kRtpMsgWithTwoByteAbsSendTimeExtension
[
]
=
{
0x90
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x10
0x00
0x00
0x02
0x02
0x01
0x02
0x03
0x03
0xaa
0xbb
0xcc
}
;
static
const
int
kAstIndexInOneByteRtpMsg
=
21
;
static
const
int
kAstIndexInTwoByteRtpMsg
=
21
;
static
const
rtc
:
:
ArrayView
<
const
uint8_t
>
kPcmuFrameArrayView
=
rtc
:
:
MakeArrayView
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
)
;
static
const
rtc
:
:
ArrayView
<
const
uint8_t
>
kRtcpReportArrayView
=
rtc
:
:
MakeArrayView
(
kRtcpReport
sizeof
(
kRtcpReport
)
)
;
static
const
rtc
:
:
ArrayView
<
const
uint8_t
>
kInvalidPacketArrayView
=
rtc
:
:
MakeArrayView
(
kInvalidPacket
sizeof
(
kInvalidPacket
)
)
;
TEST
(
RtpUtilsTest
GetRtcp
)
{
int
pt
;
EXPECT_TRUE
(
GetRtcpType
(
kRtcpReport
sizeof
(
kRtcpReport
)
&
pt
)
)
;
EXPECT_EQ
(
0xc9
pt
)
;
EXPECT_FALSE
(
GetRtcpType
(
kInvalidPacket
sizeof
(
kInvalidPacket
)
&
pt
)
)
;
uint32_t
ssrc
;
EXPECT_TRUE
(
GetRtcpSsrc
(
kNonCompoundRtcpPliFeedbackPacket
sizeof
(
kNonCompoundRtcpPliFeedbackPacket
)
&
ssrc
)
)
;
EXPECT_TRUE
(
GetRtcpSsrc
(
kNonCompoundRtcpAppPacket
sizeof
(
kNonCompoundRtcpAppPacket
)
&
ssrc
)
)
;
EXPECT_FALSE
(
GetRtcpSsrc
(
kNonCompoundRtcpSDESPacket
sizeof
(
kNonCompoundRtcpSDESPacket
)
&
ssrc
)
)
;
}
TEST
(
RtpUtilsTest
InvalidRtpHeader
)
{
const
uint8_t
kRtpMsgWithInvalidLength
[
]
=
{
0x94
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xAA
0xBB
0xCC
0XDD
0xDD
0xCC
0xBB
0xAA
}
;
EXPECT_FALSE
(
ValidateRtpHeader
(
kRtpMsgWithInvalidLength
sizeof
(
kRtpMsgWithInvalidLength
)
nullptr
)
)
;
const
uint8_t
kRtpMsgWithInvalidExtnLength
[
]
=
{
0x90
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xBE
0xDE
0x0A
0x00
}
;
EXPECT_FALSE
(
ValidateRtpHeader
(
kRtpMsgWithInvalidExtnLength
sizeof
(
kRtpMsgWithInvalidExtnLength
)
nullptr
)
)
;
}
TEST
(
RtpUtilsTest
Valid2ByteExtnHdrRtpMessage
)
{
EXPECT_TRUE
(
ValidateRtpHeader
(
kRtpMsgWith2ByteExtnHeader
sizeof
(
kRtpMsgWith2ByteExtnHeader
)
nullptr
)
)
;
}
TEST
(
RtpUtilsTest
ValidRtpPacketWithOneByteAbsSendTimeExtension
)
{
EXPECT_TRUE
(
ValidateRtpHeader
(
kRtpMsgWithOneByteAbsSendTimeExtension
sizeof
(
kRtpMsgWithOneByteAbsSendTimeExtension
)
nullptr
)
)
;
}
TEST
(
RtpUtilsTest
ValidRtpPacketWithTwoByteAbsSendTimeExtension
)
{
EXPECT_TRUE
(
ValidateRtpHeader
(
kRtpMsgWithTwoByteAbsSendTimeExtension
sizeof
(
kRtpMsgWithTwoByteAbsSendTimeExtension
)
nullptr
)
)
;
}
TEST
(
RtpUtilsTest
UpdateAbsSendTimeExtensionInTurnSendIndication
)
{
uint8_t
message_without_extension
[
]
=
{
0x00
0x16
0x00
0x18
0x21
0x12
0xA4
0x42
'
0
'
'
1
'
'
2
'
'
3
'
'
4
'
'
5
'
'
6
'
'
7
'
'
8
'
'
9
'
'
a
'
'
b
'
0x00
0x20
0x00
0x04
0x00
0x00
0x00
0x00
0x00
0x13
0x00
0x0C
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
}
;
EXPECT_TRUE
(
UpdateRtpAbsSendTimeExtension
(
message_without_extension
sizeof
(
message_without_extension
)
3
0
)
)
;
uint8_t
message
[
]
=
{
0x00
0x16
0x00
0x24
0x21
0x12
0xA4
0x42
'
0
'
'
1
'
'
2
'
'
3
'
'
4
'
'
5
'
'
6
'
'
7
'
'
8
'
'
9
'
'
a
'
'
b
'
0x00
0x20
0x00
0x04
0x00
0x00
0x00
0x00
0x00
0x13
0x00
0x18
0x90
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xBE
0xDE
0x00
0x02
0x22
0xaa
0xbb
0xcc
0x32
0xaa
0xbb
0xcc
}
;
EXPECT_TRUE
(
UpdateRtpAbsSendTimeExtension
(
message
sizeof
(
message
)
3
0
)
)
;
}
TEST
(
RtpUtilsTest
ApplyPacketOptionsWithDefaultValues
)
{
webrtc
:
:
PacketTimeUpdateParams
packet_time_params
;
std
:
:
vector
<
uint8_t
>
rtp_packet
(
kRtpMsgWithOneByteAbsSendTimeExtension
kRtpMsgWithOneByteAbsSendTimeExtension
+
sizeof
(
kRtpMsgWithOneByteAbsSendTimeExtension
)
)
;
rtp_packet
.
insert
(
rtp_packet
.
end
(
)
kFakeTag
kFakeTag
+
sizeof
(
kFakeTag
)
)
;
EXPECT_TRUE
(
ApplyPacketOptions
(
&
rtp_packet
[
0
]
rtp_packet
.
size
(
)
packet_time_params
0
)
)
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
sizeof
(
kRtpMsgWithOneByteAbsSendTimeExtension
)
]
kFakeTag
4
)
)
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
kAstIndexInOneByteRtpMsg
]
kTestAstValue
sizeof
(
kTestAstValue
)
)
)
;
}
TEST
(
RtpUtilsTest
ApplyPacketOptionsWithAuthParams
)
{
webrtc
:
:
PacketTimeUpdateParams
packet_time_params
;
packet_time_params
.
srtp_auth_key
.
assign
(
kTestKey
kTestKey
+
sizeof
(
kTestKey
)
)
;
packet_time_params
.
srtp_auth_tag_len
=
4
;
std
:
:
vector
<
uint8_t
>
rtp_packet
(
kRtpMsgWithOneByteAbsSendTimeExtension
kRtpMsgWithOneByteAbsSendTimeExtension
+
sizeof
(
kRtpMsgWithOneByteAbsSendTimeExtension
)
)
;
rtp_packet
.
insert
(
rtp_packet
.
end
(
)
kFakeTag
kFakeTag
+
sizeof
(
kFakeTag
)
)
;
EXPECT_TRUE
(
ApplyPacketOptions
(
&
rtp_packet
[
0
]
rtp_packet
.
size
(
)
packet_time_params
0
)
)
;
uint8_t
kExpectedTag
[
]
=
{
0xc1
0x7a
0x8c
0xa0
}
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
sizeof
(
kRtpMsgWithOneByteAbsSendTimeExtension
)
]
kExpectedTag
sizeof
(
kExpectedTag
)
)
)
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
kAstIndexInOneByteRtpMsg
]
kTestAstValue
sizeof
(
kTestAstValue
)
)
)
;
}
TEST
(
RtpUtilsTest
UpdateOneByteAbsSendTimeExtensionInRtpPacket
)
{
std
:
:
vector
<
uint8_t
>
rtp_packet
(
kRtpMsgWithOneByteAbsSendTimeExtension
kRtpMsgWithOneByteAbsSendTimeExtension
+
sizeof
(
kRtpMsgWithOneByteAbsSendTimeExtension
)
)
;
EXPECT_TRUE
(
UpdateRtpAbsSendTimeExtension
(
&
rtp_packet
[
0
]
rtp_packet
.
size
(
)
3
51183266
)
)
;
const
uint8_t
kExpectedTimestamp
[
3
]
=
{
0xcc
0xbb
0xaa
}
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
kAstIndexInOneByteRtpMsg
]
kExpectedTimestamp
sizeof
(
kExpectedTimestamp
)
)
)
;
}
TEST
(
RtpUtilsTest
UpdateTwoByteAbsSendTimeExtensionInRtpPacket
)
{
std
:
:
vector
<
uint8_t
>
rtp_packet
(
kRtpMsgWithTwoByteAbsSendTimeExtension
kRtpMsgWithTwoByteAbsSendTimeExtension
+
sizeof
(
kRtpMsgWithTwoByteAbsSendTimeExtension
)
)
;
EXPECT_TRUE
(
UpdateRtpAbsSendTimeExtension
(
&
rtp_packet
[
0
]
rtp_packet
.
size
(
)
3
51183266
)
)
;
const
uint8_t
kExpectedTimestamp
[
3
]
=
{
0xcc
0xbb
0xaa
}
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
kAstIndexInTwoByteRtpMsg
]
kExpectedTimestamp
sizeof
(
kExpectedTimestamp
)
)
)
;
}
TEST
(
RtpUtilsTest
ApplyPacketOptionsWithAuthParamsAndAbsSendTime
)
{
webrtc
:
:
PacketTimeUpdateParams
packet_time_params
;
packet_time_params
.
srtp_auth_key
.
assign
(
kTestKey
kTestKey
+
sizeof
(
kTestKey
)
)
;
packet_time_params
.
srtp_auth_tag_len
=
4
;
packet_time_params
.
rtp_sendtime_extension_id
=
3
;
std
:
:
vector
<
uint8_t
>
rtp_packet
(
kRtpMsgWithOneByteAbsSendTimeExtension
kRtpMsgWithOneByteAbsSendTimeExtension
+
sizeof
(
kRtpMsgWithOneByteAbsSendTimeExtension
)
)
;
rtp_packet
.
insert
(
rtp_packet
.
end
(
)
kFakeTag
kFakeTag
+
sizeof
(
kFakeTag
)
)
;
EXPECT_TRUE
(
ApplyPacketOptions
(
&
rtp_packet
[
0
]
rtp_packet
.
size
(
)
packet_time_params
51183266
)
)
;
const
uint8_t
kExpectedTag
[
]
=
{
0x81
0xd1
0x2c
0x0e
}
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
sizeof
(
kRtpMsgWithOneByteAbsSendTimeExtension
)
]
kExpectedTag
sizeof
(
kExpectedTag
)
)
)
;
const
uint8_t
kExpectedTimestamp
[
3
]
=
{
0xcc
0xbb
0xaa
}
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
kAstIndexInOneByteRtpMsg
]
kExpectedTimestamp
sizeof
(
kExpectedTimestamp
)
)
)
;
}
TEST
(
RtpUtilsTest
InferRtpPacketType
)
{
EXPECT_EQ
(
RtpPacketType
:
:
kRtp
InferRtpPacketType
(
kPcmuFrameArrayView
)
)
;
EXPECT_EQ
(
RtpPacketType
:
:
kRtcp
InferRtpPacketType
(
kRtcpReportArrayView
)
)
;
EXPECT_EQ
(
RtpPacketType
:
:
kUnknown
InferRtpPacketType
(
kInvalidPacketArrayView
)
)
;
}
}
