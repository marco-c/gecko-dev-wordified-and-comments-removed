#
include
"
media
/
base
/
video_adapter
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
limits
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
utility
>
#
include
"
api
/
video
/
resolution
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_source_interface
.
h
"
#
include
"
media
/
base
/
fake_frame_source
.
h
"
#
include
"
media
/
base
/
video_common
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
#
include
"
test
/
field_trial
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
int
kWidth
=
1280
;
constexpr
int
kHeight
=
720
;
constexpr
int
kDefaultFps
=
30
;
using
test
:
:
ScopedFieldTrials
;
using
:
:
testing
:
:
_
;
using
:
:
testing
:
:
Eq
;
using
:
:
testing
:
:
Pair
;
VideoSinkWants
BuildSinkWants
(
std
:
:
optional
<
int
>
target_pixel_count
int
max_pixel_count
int
max_framerate_fps
int
sink_alignment
=
1
)
{
VideoSinkWants
wants
;
wants
.
target_pixel_count
=
target_pixel_count
;
wants
.
max_pixel_count
=
max_pixel_count
;
wants
.
max_framerate_fps
=
max_framerate_fps
;
wants
.
resolution_alignment
=
sink_alignment
;
wants
.
is_active
=
true
;
wants
.
aggregates
.
emplace
(
VideoSinkWants
:
:
Aggregates
(
)
)
;
wants
.
aggregates
-
>
any_active_without_requested_resolution
=
false
;
return
wants
;
}
VideoSinkWants
BuildSinkWants
(
std
:
:
optional
<
Resolution
>
scale_resolution_down_to
bool
any_active_without_requested_resolution
)
{
VideoSinkWants
wants
;
wants
.
max_framerate_fps
=
kDefaultFps
;
wants
.
resolution_alignment
=
1
;
wants
.
is_active
=
true
;
if
(
scale_resolution_down_to
)
{
wants
.
requested_resolution
.
emplace
(
VideoSinkWants
:
:
FrameSize
(
scale_resolution_down_to
-
>
width
scale_resolution_down_to
-
>
height
)
)
;
}
wants
.
aggregates
.
emplace
(
VideoSinkWants
:
:
Aggregates
(
)
)
;
wants
.
aggregates
-
>
any_active_without_requested_resolution
=
any_active_without_requested_resolution
;
return
wants
;
}
}
class
VideoAdapterTest
:
public
:
:
testing
:
:
Test
public
:
:
testing
:
:
WithParamInterface
<
bool
>
{
public
:
VideoAdapterTest
(
)
:
VideoAdapterTest
(
"
"
1
)
{
}
explicit
VideoAdapterTest
(
const
std
:
:
string
&
field_trials
int
source_resolution_alignment
)
:
override_field_trials_
(
field_trials
)
frame_source_
(
std
:
:
make_unique
<
FakeFrameSource
>
(
kWidth
kHeight
VideoFormat
:
:
FpsToInterval
(
kDefaultFps
)
/
kNumNanosecsPerMicrosec
)
)
adapter_
(
source_resolution_alignment
)
adapter_wrapper_
(
std
:
:
make_unique
<
VideoAdapterWrapper
>
(
&
adapter_
)
)
use_new_format_request_
(
GetParam
(
)
)
{
}
protected
:
class
VideoAdapterWrapper
{
public
:
struct
Stats
{
int
captured_frames
=
0
;
int
dropped_frames
=
0
;
bool
last_adapt_was_no_op
=
false
;
int
cropped_width
=
0
;
int
cropped_height
=
0
;
int
out_width
=
0
;
int
out_height
=
0
;
}
;
explicit
VideoAdapterWrapper
(
VideoAdapter
*
adapter
)
:
video_adapter_
(
adapter
)
{
}
void
AdaptFrame
(
const
VideoFrame
&
frame
)
{
const
int
in_width
=
frame
.
width
(
)
;
const
int
in_height
=
frame
.
height
(
)
;
int
cropped_width
;
int
cropped_height
;
int
out_width
;
int
out_height
;
if
(
video_adapter_
-
>
AdaptFrameResolution
(
in_width
in_height
frame
.
timestamp_us
(
)
*
kNumNanosecsPerMicrosec
&
cropped_width
&
cropped_height
&
out_width
&
out_height
)
)
{
stats_
.
cropped_width
=
cropped_width
;
stats_
.
cropped_height
=
cropped_height
;
stats_
.
out_width
=
out_width
;
stats_
.
out_height
=
out_height
;
stats_
.
last_adapt_was_no_op
=
(
in_width
=
=
cropped_width
&
&
in_height
=
=
cropped_height
&
&
in_width
=
=
out_width
&
&
in_height
=
=
out_height
)
;
}
else
{
+
+
stats_
.
dropped_frames
;
}
+
+
stats_
.
captured_frames
;
}
Stats
GetStats
(
)
const
{
return
stats_
;
}
private
:
VideoAdapter
*
video_adapter_
;
Stats
stats_
;
}
;
void
VerifyAdaptedResolution
(
const
VideoAdapterWrapper
:
:
Stats
&
stats
int
cropped_width
int
cropped_height
int
out_width
int
out_height
)
{
EXPECT_EQ
(
cropped_width
stats
.
cropped_width
)
;
EXPECT_EQ
(
cropped_height
stats
.
cropped_height
)
;
EXPECT_EQ
(
out_width
stats
.
out_width
)
;
EXPECT_EQ
(
out_height
stats
.
out_height
)
;
}
void
OnOutputFormatRequest
(
int
width
int
height
const
std
:
:
optional
<
int
>
&
fps
)
{
if
(
use_new_format_request_
)
{
std
:
:
optional
<
std
:
:
pair
<
int
int
>
>
target_aspect_ratio
=
std
:
:
make_pair
(
width
height
)
;
std
:
:
optional
<
int
>
max_pixel_count
=
width
*
height
;
std
:
:
optional
<
int
>
max_fps
=
fps
;
adapter_
.
OnOutputFormatRequest
(
target_aspect_ratio
max_pixel_count
max_fps
)
;
return
;
}
adapter_
.
OnOutputFormatRequest
(
VideoFormat
(
width
height
fps
?
VideoFormat
:
:
FpsToInterval
(
*
fps
)
:
0
FOURCC_I420
)
)
;
}
std
:
:
pair
<
Resolution
Resolution
>
AdaptFrameResolution
(
Resolution
res
)
{
Resolution
out
;
Resolution
cropped
;
timestamp_ns_
+
=
1000000000
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
res
.
width
res
.
height
timestamp_ns_
&
cropped
.
width
&
cropped
.
height
&
out
.
width
&
out
.
height
)
)
;
return
std
:
:
make_pair
(
out
cropped
)
;
}
ScopedFieldTrials
override_field_trials_
;
const
std
:
:
unique_ptr
<
FakeFrameSource
>
frame_source_
;
VideoAdapter
adapter_
;
int64_t
timestamp_ns_
=
0
;
int
cropped_width_
;
int
cropped_height_
;
int
out_width_
;
int
out_height_
;
const
std
:
:
unique_ptr
<
VideoAdapterWrapper
>
adapter_wrapper_
;
const
bool
use_new_format_request_
;
}
;
INSTANTIATE_TEST_SUITE_P
(
OnOutputFormatRequests
VideoAdapterTest
:
:
testing
:
:
Values
(
true
false
)
)
;
TEST_P
(
VideoAdapterTest
AdaptNothing
)
{
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
VideoAdapterWrapper
:
:
Stats
stats
=
adapter_wrapper_
-
>
GetStats
(
)
;
EXPECT_GE
(
stats
.
captured_frames
10
)
;
EXPECT_EQ
(
0
stats
.
dropped_frames
)
;
VerifyAdaptedResolution
(
stats
kWidth
kHeight
kWidth
kHeight
)
;
EXPECT_TRUE
(
stats
.
last_adapt_was_no_op
)
;
}
TEST_P
(
VideoAdapterTest
AdaptZeroInterval
)
{
OnOutputFormatRequest
(
kWidth
kHeight
std
:
:
nullopt
)
;
for
(
int
i
=
0
;
i
<
40
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
VideoAdapterWrapper
:
:
Stats
stats
=
adapter_wrapper_
-
>
GetStats
(
)
;
EXPECT_GE
(
stats
.
captured_frames
40
)
;
EXPECT_EQ
(
0
stats
.
dropped_frames
)
;
VerifyAdaptedResolution
(
stats
kWidth
kHeight
kWidth
kHeight
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFramerateToHalf
)
{
OnOutputFormatRequest
(
kWidth
kHeight
kDefaultFps
/
2
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
EXPECT_GE
(
adapter_wrapper_
-
>
GetStats
(
)
.
captured_frames
10
)
;
EXPECT_EQ
(
5
adapter_wrapper_
-
>
GetStats
(
)
.
dropped_frames
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFramerateToTwoThirds
)
{
OnOutputFormatRequest
(
kWidth
kHeight
kDefaultFps
*
2
/
3
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
EXPECT_GE
(
adapter_wrapper_
-
>
GetStats
(
)
.
captured_frames
10
)
;
EXPECT_EQ
(
3
adapter_wrapper_
-
>
GetStats
(
)
.
dropped_frames
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFramerateHighLimit
)
{
OnOutputFormatRequest
(
kWidth
kHeight
kDefaultFps
*
2
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
EXPECT_EQ
(
0
adapter_wrapper_
-
>
GetStats
(
)
.
dropped_frames
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFramerateToHalfWithNoPixelLimit
)
{
adapter_
.
OnOutputFormatRequest
(
std
:
:
nullopt
std
:
:
nullopt
kDefaultFps
/
2
)
;
int
expected_dropped_frames
=
0
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
EXPECT_GE
(
adapter_wrapper_
-
>
GetStats
(
)
.
captured_frames
i
+
1
)
;
if
(
i
%
2
=
=
1
)
+
+
expected_dropped_frames
;
EXPECT_EQ
(
expected_dropped_frames
adapter_wrapper_
-
>
GetStats
(
)
.
dropped_frames
)
;
VerifyAdaptedResolution
(
adapter_wrapper_
-
>
GetStats
(
)
kWidth
kHeight
kWidth
kHeight
)
;
}
}
TEST_P
(
VideoAdapterTest
AdaptFramerateOntheFly
)
{
OnOutputFormatRequest
(
kWidth
kHeight
kDefaultFps
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
EXPECT_EQ
(
0
adapter_wrapper_
-
>
GetStats
(
)
.
dropped_frames
)
;
OnOutputFormatRequest
(
kWidth
kHeight
kDefaultFps
/
2
)
;
for
(
int
i
=
0
;
i
<
20
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
EXPECT_GT
(
adapter_wrapper_
-
>
GetStats
(
)
.
dropped_frames
0
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFramerateRequestMax
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
VideoAdapterWrapper
:
:
Stats
stats
=
adapter_wrapper_
-
>
GetStats
(
)
;
EXPECT_GE
(
stats
.
captured_frames
10
)
;
EXPECT_EQ
(
0
stats
.
dropped_frames
)
;
VerifyAdaptedResolution
(
stats
kWidth
kHeight
kWidth
kHeight
)
;
EXPECT_TRUE
(
stats
.
last_adapt_was_no_op
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFramerateRequestZero
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
0
)
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
VideoAdapterWrapper
:
:
Stats
stats
=
adapter_wrapper_
-
>
GetStats
(
)
;
EXPECT_GE
(
stats
.
captured_frames
10
)
;
EXPECT_EQ
(
10
stats
.
dropped_frames
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFramerateRequestHalf
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
kDefaultFps
/
2
)
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
VideoAdapterWrapper
:
:
Stats
stats
=
adapter_wrapper_
-
>
GetStats
(
)
;
EXPECT_GE
(
stats
.
captured_frames
10
)
;
EXPECT_EQ
(
5
stats
.
dropped_frames
)
;
VerifyAdaptedResolution
(
stats
kWidth
kHeight
kWidth
kHeight
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFrameResolutionHighLimit
)
{
OnOutputFormatRequest
(
kWidth
*
10
kHeight
*
10
kDefaultFps
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
kWidth
kHeight
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
kWidth
cropped_width_
)
;
EXPECT_EQ
(
kHeight
cropped_height_
)
;
EXPECT_EQ
(
kWidth
out_width_
)
;
EXPECT_EQ
(
kHeight
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFrameResolutionIdentical
)
{
OnOutputFormatRequest
(
kWidth
kHeight
kDefaultFps
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
kWidth
kHeight
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
kWidth
cropped_width_
)
;
EXPECT_EQ
(
kHeight
cropped_height_
)
;
EXPECT_EQ
(
kWidth
out_width_
)
;
EXPECT_EQ
(
kHeight
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFrameResolutionQuarter
)
{
OnOutputFormatRequest
(
kWidth
/
2
kHeight
/
2
kDefaultFps
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
kWidth
kHeight
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
kWidth
cropped_width_
)
;
EXPECT_EQ
(
kHeight
cropped_height_
)
;
EXPECT_EQ
(
kWidth
/
2
out_width_
)
;
EXPECT_EQ
(
kHeight
/
2
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFrameResolutionDrop
)
{
OnOutputFormatRequest
(
kWidth
*
0
kHeight
*
0
kDefaultFps
)
;
EXPECT_FALSE
(
adapter_
.
AdaptFrameResolution
(
kWidth
kHeight
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
}
TEST_P
(
VideoAdapterTest
AdaptResolution
)
{
OnOutputFormatRequest
(
kWidth
/
2
kHeight
/
2
kDefaultFps
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
VideoAdapterWrapper
:
:
Stats
stats
=
adapter_wrapper_
-
>
GetStats
(
)
;
EXPECT_EQ
(
0
stats
.
dropped_frames
)
;
VerifyAdaptedResolution
(
stats
kWidth
kHeight
kWidth
/
2
kHeight
/
2
)
;
}
TEST_P
(
VideoAdapterTest
AdaptResolutionOnTheFly
)
{
OnOutputFormatRequest
(
kWidth
kHeight
kDefaultFps
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
VerifyAdaptedResolution
(
adapter_wrapper_
-
>
GetStats
(
)
kWidth
kHeight
kWidth
kHeight
)
;
OnOutputFormatRequest
(
kWidth
/
2
kHeight
/
2
kDefaultFps
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
VerifyAdaptedResolution
(
adapter_wrapper_
-
>
GetStats
(
)
kWidth
kHeight
kWidth
/
2
kHeight
/
2
)
;
}
TEST_P
(
VideoAdapterTest
DropAllFrames
)
{
OnOutputFormatRequest
(
kWidth
*
0
kHeight
*
0
kDefaultFps
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
VideoAdapterWrapper
:
:
Stats
stats
=
adapter_wrapper_
-
>
GetStats
(
)
;
EXPECT_GE
(
stats
.
captured_frames
10
)
;
EXPECT_EQ
(
stats
.
captured_frames
stats
.
dropped_frames
)
;
}
TEST_P
(
VideoAdapterTest
TestOnOutputFormatRequest
)
{
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
400
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
400
out_height_
)
;
OnOutputFormatRequest
(
640
400
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
400
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
400
out_height_
)
;
OnOutputFormatRequest
(
1280
720
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
OnOutputFormatRequest
(
0
0
std
:
:
nullopt
)
;
EXPECT_FALSE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
OnOutputFormatRequest
(
320
200
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
400
cropped_height_
)
;
EXPECT_EQ
(
320
out_width_
)
;
EXPECT_EQ
(
200
out_height_
)
;
OnOutputFormatRequest
(
424
265
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
400
cropped_height_
)
;
EXPECT_EQ
(
320
out_width_
)
;
EXPECT_EQ
(
200
out_height_
)
;
OnOutputFormatRequest
(
640
*
3
/
8
400
*
3
/
8
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
400
cropped_height_
)
;
EXPECT_EQ
(
640
*
3
/
8
out_width_
)
;
EXPECT_EQ
(
400
*
3
/
8
out_height_
)
;
OnOutputFormatRequest
(
320
200
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
400
cropped_height_
)
;
EXPECT_EQ
(
320
out_width_
)
;
EXPECT_EQ
(
200
out_height_
)
;
OnOutputFormatRequest
(
480
300
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
400
cropped_height_
)
;
EXPECT_EQ
(
480
out_width_
)
;
EXPECT_EQ
(
300
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestViewRequestPlusCameraSwitch
)
{
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
1280
out_width_
)
;
EXPECT_EQ
(
720
out_height_
)
;
OnOutputFormatRequest
(
640
360
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
360
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
OnOutputFormatRequest
(
640
360
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
360
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestVgaWidth
)
{
OnOutputFormatRequest
(
640
360
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
480
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
360
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
480
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestOnResolutionRequestInSmallSteps
)
{
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
1280
out_width_
)
;
EXPECT_EQ
(
720
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
1280
*
720
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
960
out_width_
)
;
EXPECT_EQ
(
540
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
960
*
540
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
640
*
360
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
480
out_width_
)
;
EXPECT_EQ
(
270
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
640
*
360
960
*
540
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
960
*
540
1280
*
720
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
960
out_width_
)
;
EXPECT_EQ
(
540
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
1280
*
720
1920
*
1080
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
1280
out_width_
)
;
EXPECT_EQ
(
720
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestOnResolutionRequestMaxZero
)
{
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
1280
out_width_
)
;
EXPECT_EQ
(
720
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
0
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_FALSE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
}
TEST_P
(
VideoAdapterTest
TestOnResolutionRequestInLargeSteps
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
640
*
360
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
480
out_width_
)
;
EXPECT_EQ
(
270
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
1280
*
720
1920
*
1080
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
1280
out_width_
)
;
EXPECT_EQ
(
720
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestOnOutputFormatRequestCapsMaxResolution
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
640
*
360
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
480
out_width_
)
;
EXPECT_EQ
(
270
out_height_
)
;
OnOutputFormatRequest
(
640
360
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
480
out_width_
)
;
EXPECT_EQ
(
270
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
960
*
720
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestOnResolutionRequestReset
)
{
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
1280
out_width_
)
;
EXPECT_EQ
(
720
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
640
*
360
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
480
out_width_
)
;
EXPECT_EQ
(
270
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
1280
out_width_
)
;
EXPECT_EQ
(
720
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestOnOutputFormatRequestResolutionReset
)
{
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
1280
out_width_
)
;
EXPECT_EQ
(
720
out_height_
)
;
adapter_
.
OnOutputFormatRequest
(
std
:
:
nullopt
640
*
360
-
1
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
480
out_width_
)
;
EXPECT_EQ
(
270
out_height_
)
;
adapter_
.
OnOutputFormatRequest
(
std
:
:
nullopt
std
:
:
nullopt
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1280
cropped_width_
)
;
EXPECT_EQ
(
720
cropped_height_
)
;
EXPECT_EQ
(
1280
out_width_
)
;
EXPECT_EQ
(
720
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestOnOutputFormatRequestFpsReset
)
{
OnOutputFormatRequest
(
kWidth
kHeight
kDefaultFps
/
2
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
const
int
dropped_frames
=
adapter_wrapper_
-
>
GetStats
(
)
.
dropped_frames
;
EXPECT_GT
(
dropped_frames
0
)
;
OnOutputFormatRequest
(
kWidth
kHeight
std
:
:
nullopt
)
;
for
(
int
i
=
0
;
i
<
20
;
+
+
i
)
adapter_wrapper_
-
>
AdaptFrame
(
frame_source_
-
>
GetFrame
(
)
)
;
EXPECT_EQ
(
dropped_frames
adapter_wrapper_
-
>
GetStats
(
)
.
dropped_frames
)
;
}
TEST_P
(
VideoAdapterTest
RequestAspectRatio
)
{
adapter_
.
OnOutputFormatRequest
(
std
:
:
make_pair
(
320
180
)
std
:
:
nullopt
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
adapter_
.
OnOutputFormatRequest
(
std
:
:
make_pair
(
1280
720
)
1280
*
720
-
1
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
2592
1944
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
2592
cropped_width_
)
;
EXPECT_EQ
(
1458
cropped_height_
)
;
EXPECT_EQ
(
1152
out_width_
)
;
EXPECT_EQ
(
648
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
RequestAspectRatioWithDifferentOrientation
)
{
OnOutputFormatRequest
(
720
1280
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
InvalidAspectRatioIgnored
)
{
adapter_
.
OnOutputFormatRequest
(
std
:
:
make_pair
(
320
0
)
std
:
:
nullopt
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
400
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
400
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
400
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestCroppingWithResolutionRequest
)
{
OnOutputFormatRequest
(
640
360
std
:
:
nullopt
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
480
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
640
*
360
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
480
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
480
out_width_
)
;
EXPECT_EQ
(
270
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
480
*
270
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
480
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
320
out_width_
)
;
EXPECT_EQ
(
180
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
480
*
270
640
*
360
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
480
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
480
out_width_
)
;
EXPECT_EQ
(
270
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
640
*
360
960
*
540
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
480
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
960
*
540
1280
*
720
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
480
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
360
cropped_height_
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestCroppingOddResolution
)
{
OnOutputFormatRequest
(
640
360
std
:
:
nullopt
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
640
*
360
*
3
/
16
*
3
/
16
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
480
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
cropped_width_
)
;
EXPECT_EQ
(
368
cropped_height_
)
;
EXPECT_EQ
(
120
out_width_
)
;
EXPECT_EQ
(
69
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
TestAdaptToVerySmallResolution
)
{
const
int
w
=
1920
;
const
int
h
=
1080
;
OnOutputFormatRequest
(
w
h
std
:
:
nullopt
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
w
*
h
*
1
/
16
*
1
/
16
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
w
h
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
1920
cropped_width_
)
;
EXPECT_EQ
(
1072
cropped_height_
)
;
EXPECT_EQ
(
120
out_width_
)
;
EXPECT_EQ
(
67
out_height_
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
w
*
h
*
3
/
32
*
3
/
32
w
*
h
*
1
/
8
*
1
/
8
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
w
h
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
160
out_width_
)
;
EXPECT_EQ
(
90
out_height_
)
;
}
TEST_P
(
VideoAdapterTest
AdaptFrameResolutionDropWithResolutionRequest
)
{
OnOutputFormatRequest
(
0
0
kDefaultFps
)
;
EXPECT_FALSE
(
adapter_
.
AdaptFrameResolution
(
kWidth
kHeight
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
960
*
540
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_FALSE
(
adapter_
.
AdaptFrameResolution
(
kWidth
kHeight
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
640
*
480
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_FALSE
(
adapter_
.
AdaptFrameResolution
(
kWidth
kHeight
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
}
TEST_P
(
VideoAdapterTest
TestAdaptToMax
)
{
OnOutputFormatRequest
(
640
360
kDefaultFps
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
640
*
360
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
640
360
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
640
out_width_
)
;
EXPECT_EQ
(
360
out_height_
)
;
}
TEST
(
VideoAdapterTestMultipleOrientation
TestNormal
)
{
VideoAdapter
video_adapter
;
video_adapter
.
OnOutputFormatRequest
(
std
:
:
make_pair
(
640
360
)
640
*
360
std
:
:
make_pair
(
360
640
)
360
*
640
30
)
;
int
cropped_width
;
int
cropped_height
;
int
out_width
;
int
out_height
;
EXPECT_TRUE
(
video_adapter
.
AdaptFrameResolution
(
640
480
0
&
cropped_width
&
cropped_height
&
out_width
&
out_height
)
)
;
EXPECT_EQ
(
640
cropped_width
)
;
EXPECT_EQ
(
360
cropped_height
)
;
EXPECT_EQ
(
640
out_width
)
;
EXPECT_EQ
(
360
out_height
)
;
EXPECT_TRUE
(
video_adapter
.
AdaptFrameResolution
(
480
640
kNumNanosecsPerSec
/
30
&
cropped_width
&
cropped_height
&
out_width
&
out_height
)
)
;
EXPECT_EQ
(
360
cropped_width
)
;
EXPECT_EQ
(
640
cropped_height
)
;
EXPECT_EQ
(
360
out_width
)
;
EXPECT_EQ
(
640
out_height
)
;
}
TEST
(
VideoAdapterTestMultipleOrientation
TestForcePortrait
)
{
VideoAdapter
video_adapter
;
video_adapter
.
OnOutputFormatRequest
(
std
:
:
make_pair
(
360
640
)
640
*
360
std
:
:
make_pair
(
360
640
)
360
*
640
30
)
;
int
cropped_width
;
int
cropped_height
;
int
out_width
;
int
out_height
;
EXPECT_TRUE
(
video_adapter
.
AdaptFrameResolution
(
640
480
0
&
cropped_width
&
cropped_height
&
out_width
&
out_height
)
)
;
EXPECT_EQ
(
270
cropped_width
)
;
EXPECT_EQ
(
480
cropped_height
)
;
EXPECT_EQ
(
270
out_width
)
;
EXPECT_EQ
(
480
out_height
)
;
EXPECT_TRUE
(
video_adapter
.
AdaptFrameResolution
(
480
640
kNumNanosecsPerSec
/
30
&
cropped_width
&
cropped_height
&
out_width
&
out_height
)
)
;
EXPECT_EQ
(
360
cropped_width
)
;
EXPECT_EQ
(
640
cropped_height
)
;
EXPECT_EQ
(
360
out_width
)
;
EXPECT_EQ
(
640
out_height
)
;
}
TEST_P
(
VideoAdapterTest
AdaptResolutionInStepsFirst3_4
)
{
OnOutputFormatRequest
(
kWidth
kHeight
std
:
:
nullopt
)
;
const
int
kExpectedWidths
[
]
=
{
960
640
480
320
240
160
}
;
const
int
kExpectedHeights
[
]
=
{
540
360
270
180
135
90
}
;
int
request_width
=
kWidth
;
int
request_height
=
kHeight
;
for
(
size_t
i
=
0
;
i
<
std
:
:
size
(
kExpectedWidths
)
;
+
+
i
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
request_width
*
request_height
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
kWidth
kHeight
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
kExpectedWidths
[
i
]
out_width_
)
;
EXPECT_EQ
(
kExpectedHeights
[
i
]
out_height_
)
;
request_width
=
out_width_
;
request_height
=
out_height_
;
}
}
TEST_P
(
VideoAdapterTest
AdaptResolutionInStepsFirst2_3
)
{
const
int
kWidth1080p
=
1920
;
const
int
kHeight1080p
=
1080
;
OnOutputFormatRequest
(
kWidth1080p
kHeight1080p
std
:
:
nullopt
)
;
const
int
kExpectedWidths
[
]
=
{
1280
960
640
480
320
240
160
}
;
const
int
kExpectedHeights
[
]
=
{
720
540
360
270
180
135
90
}
;
int
request_width
=
kWidth1080p
;
int
request_height
=
kHeight1080p
;
for
(
size_t
i
=
0
;
i
<
std
:
:
size
(
kExpectedWidths
)
;
+
+
i
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
request_width
*
request_height
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
kWidth1080p
kHeight1080p
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
kExpectedWidths
[
i
]
out_width_
)
;
EXPECT_EQ
(
kExpectedHeights
[
i
]
out_height_
)
;
request_width
=
out_width_
;
request_height
=
out_height_
;
}
}
TEST_P
(
VideoAdapterTest
AdaptResolutionInStepsFirst2x2_3
)
{
const
int
kWidth1080p4to3
=
1440
;
const
int
kHeight1080p4to3
=
1080
;
OnOutputFormatRequest
(
kWidth1080p4to3
kHeight1080p4to3
std
:
:
nullopt
)
;
const
int
kExpectedWidths
[
]
=
{
960
640
480
320
240
160
120
80
60
40
}
;
const
int
kExpectedHeights
[
]
=
{
720
480
360
240
180
120
90
60
45
30
}
;
int
request_width
=
kWidth1080p4to3
;
int
request_height
=
kHeight1080p4to3
;
for
(
size_t
i
=
0
;
i
<
std
:
:
size
(
kExpectedWidths
)
;
+
+
i
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
request_width
*
request_height
-
1
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
kWidth1080p4to3
kHeight1080p4to3
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
kExpectedWidths
[
i
]
out_width_
)
;
EXPECT_EQ
(
kExpectedHeights
[
i
]
out_height_
)
;
request_width
=
out_width_
;
request_height
=
out_height_
;
}
}
TEST_P
(
VideoAdapterTest
AdaptResolutionWithSinkAlignment
)
{
constexpr
int
kSourceWidth
=
1280
;
constexpr
int
kSourceHeight
=
720
;
constexpr
int
kSourceFramerate
=
30
;
constexpr
int
kRequestedWidth
=
480
;
constexpr
int
kRequestedHeight
=
270
;
constexpr
int
kRequestedFramerate
=
30
;
OnOutputFormatRequest
(
kRequestedWidth
kRequestedHeight
kRequestedFramerate
)
;
int
frame_num
=
1
;
for
(
const
int
sink_alignment
:
{
2
3
4
5
}
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
sink_alignment
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
kSourceWidth
kSourceHeight
frame_num
*
kNumNanosecsPerSec
/
kSourceFramerate
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
out_width_
%
sink_alignment
0
)
;
EXPECT_EQ
(
out_height_
%
sink_alignment
0
)
;
+
+
frame_num
;
}
}
TEST_P
(
VideoAdapterTest
UseScaleResolutionDownToInsteadOfOnOutputFormatRequest
)
{
{
OnOutputFormatRequest
(
640
360
kDefaultFps
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
Resolution
{
.
width
=
960
.
height
=
540
}
true
)
)
;
EXPECT_THAT
(
AdaptFrameResolution
(
{
.
width
=
1280
.
height
=
720
}
)
.
first
Eq
(
Resolution
{
.
width
=
640
.
height
=
360
}
)
)
;
}
{
OnOutputFormatRequest
(
640
360
kDefaultFps
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
Resolution
{
.
width
=
960
.
height
=
540
}
false
)
)
;
EXPECT_THAT
(
AdaptFrameResolution
(
{
.
width
=
1280
.
height
=
720
}
)
.
first
Eq
(
Resolution
{
.
width
=
960
.
height
=
540
}
)
)
;
}
{
OnOutputFormatRequest
(
640
360
kDefaultFps
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
false
)
)
;
EXPECT_THAT
(
AdaptFrameResolution
(
{
.
width
=
1280
.
height
=
720
}
)
.
first
Eq
(
Resolution
{
.
width
=
640
.
height
=
360
}
)
)
;
}
{
OnOutputFormatRequest
(
640
360
kDefaultFps
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
Resolution
{
.
width
=
960
.
height
=
540
}
false
)
)
;
EXPECT_THAT
(
AdaptFrameResolution
(
{
.
width
=
1280
.
height
=
720
}
)
.
first
Eq
(
Resolution
{
.
width
=
960
.
height
=
540
}
)
)
;
OnOutputFormatRequest
(
320
180
kDefaultFps
)
;
EXPECT_THAT
(
AdaptFrameResolution
(
{
.
width
=
1280
.
height
=
720
}
)
.
first
Eq
(
Resolution
{
.
width
=
960
.
height
=
540
}
)
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
false
)
)
;
EXPECT_THAT
(
AdaptFrameResolution
(
{
.
width
=
1280
.
height
=
720
}
)
.
first
Eq
(
Resolution
{
.
width
=
320
.
height
=
180
}
)
)
;
}
}
TEST_P
(
VideoAdapterTest
ScaleResolutionDownToIsOrientationAgnostic
)
{
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
Resolution
{
.
width
=
1280
.
height
=
720
}
false
)
)
;
EXPECT_THAT
(
AdaptFrameResolution
(
{
.
width
=
720
.
height
=
1280
}
)
.
first
Eq
(
Resolution
{
.
width
=
720
.
height
=
1280
}
)
)
;
}
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
Resolution
{
.
width
=
720
.
height
=
1280
}
false
)
)
;
EXPECT_THAT
(
AdaptFrameResolution
(
{
.
width
=
1280
.
height
=
720
}
)
.
first
Eq
(
Resolution
{
.
width
=
1280
.
height
=
720
}
)
)
;
}
}
TEST_P
(
VideoAdapterTest
ScaleResolutionDownToMaintainsAspectRatio
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
Resolution
{
.
width
=
720
.
height
=
720
}
false
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
out_width_
720
)
;
EXPECT_EQ
(
out_height_
405
)
;
EXPECT_EQ
(
cropped_width_
1280
)
;
EXPECT_EQ
(
cropped_height_
720
)
;
}
class
VideoAdapterWithSourceAlignmentTest
:
public
VideoAdapterTest
{
protected
:
static
constexpr
int
kSourceResolutionAlignment
=
7
;
VideoAdapterWithSourceAlignmentTest
(
)
:
VideoAdapterTest
(
"
"
kSourceResolutionAlignment
)
{
}
}
;
TEST_P
(
VideoAdapterWithSourceAlignmentTest
AdaptResolution
)
{
constexpr
int
kSourceWidth
=
1280
;
constexpr
int
kSourceHeight
=
720
;
constexpr
int
kRequestedWidth
=
480
;
constexpr
int
kRequestedHeight
=
270
;
constexpr
int
kRequestedFramerate
=
30
;
OnOutputFormatRequest
(
kRequestedWidth
kRequestedHeight
kRequestedFramerate
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
kSourceWidth
kSourceHeight
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
out_width_
%
kSourceResolutionAlignment
0
)
;
EXPECT_EQ
(
out_height_
%
kSourceResolutionAlignment
0
)
;
}
TEST_P
(
VideoAdapterWithSourceAlignmentTest
AdaptResolutionWithSinkAlignment
)
{
constexpr
int
kSourceWidth
=
1280
;
constexpr
int
kSourceHeight
=
720
;
constexpr
int
kRequestedWidth
=
480
;
constexpr
int
kRequestedHeight
=
270
;
constexpr
int
kRequestedFramerate
=
30
;
constexpr
int
kSinkResolutionAlignment
=
8
;
OnOutputFormatRequest
(
kRequestedWidth
kRequestedHeight
kRequestedFramerate
)
;
adapter_
.
OnSinkWants
(
BuildSinkWants
(
std
:
:
nullopt
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
kSinkResolutionAlignment
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
kSourceWidth
kSourceHeight
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
out_width_
%
kSourceResolutionAlignment
0
)
;
EXPECT_EQ
(
out_height_
%
kSourceResolutionAlignment
0
)
;
EXPECT_EQ
(
out_width_
%
kSinkResolutionAlignment
0
)
;
EXPECT_EQ
(
out_height_
%
kSinkResolutionAlignment
0
)
;
}
TEST_P
(
VideoAdapterWithSourceAlignmentTest
ScaleResolutionDownToMaintainsAspectRatioWithAlignment
)
{
adapter_
.
OnSinkWants
(
BuildSinkWants
(
Resolution
{
.
width
=
720
.
height
=
720
}
false
)
)
;
EXPECT_TRUE
(
adapter_
.
AdaptFrameResolution
(
1280
720
0
&
cropped_width_
&
cropped_height_
&
out_width_
&
out_height_
)
)
;
EXPECT_EQ
(
out_width_
714
)
;
EXPECT_EQ
(
out_height_
406
)
;
EXPECT_EQ
(
out_width_
%
kSourceResolutionAlignment
0
)
;
EXPECT_EQ
(
out_height_
%
kSourceResolutionAlignment
0
)
;
}
INSTANTIATE_TEST_SUITE_P
(
OnOutputFormatRequests
VideoAdapterWithSourceAlignmentTest
:
:
testing
:
:
Values
(
true
false
)
)
;
}
