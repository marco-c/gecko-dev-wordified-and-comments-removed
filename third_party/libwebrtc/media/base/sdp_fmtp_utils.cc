#
include
"
media
/
base
/
sdp_fmtp_utils
.
h
"
#
include
<
map
>
#
include
<
utility
>
#
include
"
rtc_base
/
string_to_number
.
h
"
namespace
webrtc
{
namespace
{
const
char
kVPxFmtpMaxFrameRate
[
]
=
"
max
-
fr
"
;
const
char
kVPxFmtpMaxFrameSize
[
]
=
"
max
-
fs
"
;
const
int
kVPxFmtpFrameSizeSubBlockPixels
=
256
;
absl
:
:
optional
<
int
>
ParsePositiveNumberFromParams
(
const
SdpVideoFormat
:
:
Parameters
&
params
const
char
*
parameter_name
)
{
const
auto
max_frame_rate_it
=
params
.
find
(
parameter_name
)
;
if
(
max_frame_rate_it
=
=
params
.
end
(
)
)
return
absl
:
:
nullopt
;
const
absl
:
:
optional
<
int
>
i
=
rtc
:
:
StringToNumber
<
int
>
(
max_frame_rate_it
-
>
second
)
;
if
(
!
i
.
has_value
(
)
|
|
i
.
value
(
)
<
=
0
)
return
absl
:
:
nullopt
;
return
i
;
}
}
absl
:
:
optional
<
int
>
ParseSdpForVPxMaxFrameRate
(
const
SdpVideoFormat
:
:
Parameters
&
params
)
{
return
ParsePositiveNumberFromParams
(
params
kVPxFmtpMaxFrameRate
)
;
}
absl
:
:
optional
<
int
>
ParseSdpForVPxMaxFrameSize
(
const
SdpVideoFormat
:
:
Parameters
&
params
)
{
const
absl
:
:
optional
<
int
>
i
=
ParsePositiveNumberFromParams
(
params
kVPxFmtpMaxFrameSize
)
;
return
i
?
absl
:
:
make_optional
(
i
.
value
(
)
*
kVPxFmtpFrameSizeSubBlockPixels
)
:
absl
:
:
nullopt
;
}
}
