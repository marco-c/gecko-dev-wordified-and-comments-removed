#
include
"
media
/
base
/
codec_list
.
h
"
#
include
<
cstddef
>
#
include
<
map
>
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
media_constants
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
string_encode
.
h
"
namespace
cricket
{
void
CodecList
:
:
CheckConsistency
(
)
{
#
if
RTC_DCHECK_IS_ON
std
:
:
map
<
int
int
>
pt_to_index
;
for
(
size_t
i
=
0
;
i
<
codecs_
.
size
(
)
;
i
+
+
)
{
const
Codec
&
codec
=
codecs_
[
i
]
;
if
(
codec
.
id
!
=
Codec
:
:
kIdNotSet
)
{
if
(
pt_to_index
.
count
(
codec
.
id
)
!
=
0
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Surprising
condition
:
Two
codecs
on
same
PT
.
"
<
<
"
First
:
"
<
<
codecs_
[
pt_to_index
[
codec
.
id
]
]
<
<
"
Second
:
"
<
<
codec
;
continue
;
}
pt_to_index
.
insert
(
{
codec
.
id
i
}
)
;
}
}
for
(
Codec
&
codec
:
codecs_
)
{
switch
(
codec
.
GetResiliencyType
(
)
)
{
case
Codec
:
:
ResiliencyType
:
:
kRed
:
break
;
case
Codec
:
:
ResiliencyType
:
:
kRtx
:
{
const
auto
apt_it
=
codec
.
params
.
find
(
kCodecParamAssociatedPayloadType
)
;
if
(
apt_it
=
=
codec
.
params
.
end
(
)
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Surprising
condition
:
RTX
codec
without
"
<
<
"
apt
parameter
:
"
<
<
codec
;
break
;
}
int
associated_pt
;
RTC_DCHECK
(
rtc
:
:
FromString
(
apt_it
-
>
second
&
associated_pt
)
)
;
if
(
pt_to_index
.
count
(
associated_pt
)
!
=
1
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Surprising
condition
:
RTX
codec
APT
not
found
:
"
<
<
codec
;
}
break
;
}
case
Codec
:
:
ResiliencyType
:
:
kNone
:
break
;
default
:
break
;
}
}
#
endif
}
}
