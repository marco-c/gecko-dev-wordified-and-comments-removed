#
include
"
media
/
base
/
codec_list
.
h
"
#
include
<
cstddef
>
#
include
<
map
>
#
include
<
vector
>
#
include
"
api
/
rtc_error
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
media_constants
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
string_encode
.
h
"
namespace
cricket
{
using
webrtc
:
:
RTCError
;
using
webrtc
:
:
RTCErrorOr
;
using
webrtc
:
:
RTCErrorType
;
namespace
{
RTCError
CheckInputConsistency
(
const
std
:
:
vector
<
Codec
>
&
codecs
)
{
std
:
:
map
<
int
int
>
pt_to_index
;
for
(
size_t
i
=
0
;
i
<
codecs
.
size
(
)
;
i
+
+
)
{
const
Codec
&
codec
=
codecs
[
i
]
;
if
(
codec
.
id
!
=
Codec
:
:
kIdNotSet
)
{
bool
inserted
=
pt_to_index
.
insert
(
{
codec
.
id
i
}
)
.
second
;
if
(
!
inserted
)
{
LOG_AND_RETURN_ERROR
(
RTCErrorType
:
:
INVALID_PARAMETER
"
Duplicate
payload
type
in
codec
list
"
)
;
}
}
}
for
(
const
Codec
&
codec
:
codecs
)
{
switch
(
codec
.
GetResiliencyType
(
)
)
{
case
Codec
:
:
ResiliencyType
:
:
kRed
:
break
;
case
Codec
:
:
ResiliencyType
:
:
kRtx
:
{
const
auto
apt_it
=
codec
.
params
.
find
(
kCodecParamAssociatedPayloadType
)
;
if
(
codec
.
id
=
=
Codec
:
:
kIdNotSet
)
{
if
(
apt_it
!
=
codec
.
params
.
end
(
)
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Surprising
condition
:
RTX
codec
without
"
<
<
"
PT
has
an
apt
parameter
"
;
}
break
;
}
if
(
apt_it
=
=
codec
.
params
.
end
(
)
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Surprising
condition
:
RTX
codec
without
"
<
<
"
apt
parameter
:
"
<
<
codec
;
break
;
}
int
associated_pt
;
if
(
!
(
rtc
:
:
FromString
(
apt_it
-
>
second
&
associated_pt
)
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Non
-
numeric
argument
to
rtx
apt
:
"
<
<
codec
<
<
"
apt
=
"
<
<
apt_it
-
>
second
;
LOG_AND_RETURN_ERROR
(
RTCErrorType
:
:
INVALID_PARAMETER
"
Non
-
numeric
argument
to
rtx
apt
parameter
"
)
;
}
if
(
codec
.
id
!
=
Codec
:
:
kIdNotSet
&
&
pt_to_index
.
count
(
associated_pt
)
!
=
1
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Surprising
condition
:
RTX
codec
APT
not
found
:
"
<
<
codec
<
<
"
points
to
a
PT
that
occurs
"
<
<
pt_to_index
.
count
(
associated_pt
)
<
<
"
times
"
;
LOG_AND_RETURN_ERROR
(
RTCErrorType
:
:
INVALID_PARAMETER
"
PT
pointed
to
by
rtx
apt
parameter
does
not
exist
"
)
;
}
break
;
}
case
Codec
:
:
ResiliencyType
:
:
kNone
:
break
;
default
:
break
;
}
}
return
RTCError
:
:
OK
(
)
;
}
}
RTCErrorOr
<
CodecList
>
CodecList
:
:
Create
(
const
std
:
:
vector
<
Codec
>
&
codecs
)
{
RTCError
error
=
CheckInputConsistency
(
codecs
)
;
if
(
!
error
.
ok
(
)
)
{
return
error
;
}
return
CodecList
(
codecs
)
;
}
void
CodecList
:
:
CheckConsistency
(
)
{
RTC_DCHECK
(
CheckInputConsistency
(
codecs_
)
.
ok
(
)
)
;
}
}
