#
ifndef
MEDIA_BASE_CODEC_LIST_H_
#
define
MEDIA_BASE_CODEC_LIST_H_
#
include
<
cstddef
>
#
include
<
vector
>
#
include
"
media
/
base
/
codec
.
h
"
namespace
cricket
{
class
CodecList
{
public
:
using
iterator
=
std
:
:
vector
<
Codec
>
:
:
iterator
;
using
const_iterator
=
std
:
:
vector
<
Codec
>
:
:
const_iterator
;
CodecList
(
)
{
}
explicit
CodecList
(
const
std
:
:
vector
<
Codec
>
&
codecs
)
{
codecs_
=
codecs
;
CheckConsistency
(
)
;
}
iterator
begin
(
)
{
return
codecs_
.
begin
(
)
;
}
iterator
end
(
)
{
return
codecs_
.
end
(
)
;
}
const_iterator
begin
(
)
const
{
return
codecs_
.
begin
(
)
;
}
const_iterator
end
(
)
const
{
return
codecs_
.
end
(
)
;
}
const
Codec
&
operator
[
]
(
size_t
i
)
const
{
return
codecs_
[
i
]
;
}
Codec
&
operator
[
]
(
size_t
i
)
{
return
codecs_
[
i
]
;
}
void
push_back
(
const
Codec
&
codec
)
{
codecs_
.
push_back
(
codec
)
;
}
bool
empty
(
)
const
{
return
codecs_
.
empty
(
)
;
}
const
std
:
:
vector
<
Codec
>
&
codecs
(
)
const
{
return
codecs_
;
}
std
:
:
vector
<
Codec
>
&
writable_codecs
(
)
{
return
codecs_
;
}
void
CheckConsistency
(
)
;
private
:
std
:
:
vector
<
Codec
>
codecs_
;
}
;
}
#
endif
