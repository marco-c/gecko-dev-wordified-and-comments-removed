#
ifndef
MEDIA_BASE_CODEC_LIST_H_
#
define
MEDIA_BASE_CODEC_LIST_H_
#
include
<
cstddef
>
#
include
<
vector
>
#
include
"
api
/
rtc_error
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
namespace
cricket
{
class
CodecList
{
public
:
using
iterator
=
std
:
:
vector
<
Codec
>
:
:
iterator
;
using
const_iterator
=
std
:
:
vector
<
Codec
>
:
:
const_iterator
;
using
value_type
=
Codec
;
CodecList
(
)
=
default
;
CodecList
(
const
CodecList
&
)
=
default
;
CodecList
&
operator
=
(
const
CodecList
&
)
=
default
;
CodecList
(
CodecList
&
&
)
=
default
;
CodecList
&
operator
=
(
CodecList
&
&
)
=
default
;
bool
operator
=
=
(
const
CodecList
&
o
)
const
{
return
codecs_
=
=
o
.
codecs_
;
}
static
webrtc
:
:
RTCErrorOr
<
CodecList
>
Create
(
const
std
:
:
vector
<
Codec
>
&
codecs
)
;
static
CodecList
CreateFromTrustedData
(
const
std
:
:
vector
<
Codec
>
&
codecs
)
{
return
CodecList
(
codecs
)
;
}
iterator
begin
(
)
{
return
codecs_
.
begin
(
)
;
}
iterator
end
(
)
{
return
codecs_
.
end
(
)
;
}
const_iterator
begin
(
)
const
{
return
codecs_
.
begin
(
)
;
}
const_iterator
end
(
)
const
{
return
codecs_
.
end
(
)
;
}
const
Codec
&
operator
[
]
(
size_t
i
)
const
{
return
codecs_
[
i
]
;
}
Codec
&
operator
[
]
(
size_t
i
)
{
return
codecs_
[
i
]
;
}
void
push_back
(
const
Codec
&
codec
)
{
codecs_
.
push_back
(
codec
)
;
CheckConsistency
(
)
;
}
bool
empty
(
)
const
{
return
codecs_
.
empty
(
)
;
}
void
clear
(
)
{
codecs_
.
clear
(
)
;
}
size_t
size
(
)
const
{
return
codecs_
.
size
(
)
;
}
const
std
:
:
vector
<
Codec
>
&
codecs
(
)
const
{
return
codecs_
;
}
std
:
:
vector
<
Codec
>
&
writable_codecs
(
)
{
return
codecs_
;
}
void
CheckConsistency
(
)
;
template
<
typename
Sink
>
friend
void
AbslStringify
(
Sink
&
sink
const
CodecList
&
list
)
{
absl
:
:
Format
(
&
sink
"
\
n
-
-
-
Codec
list
of
size
%
d
\
n
"
list
.
size
(
)
)
;
for
(
Codec
codec
:
list
)
{
absl
:
:
Format
(
&
sink
"
%
v
\
n
"
codec
)
;
}
sink
.
Append
(
"
-
-
-
End
\
n
"
)
;
}
private
:
explicit
CodecList
(
const
std
:
:
vector
<
Codec
>
&
codecs
)
{
codecs_
=
codecs
;
CheckConsistency
(
)
;
}
std
:
:
vector
<
Codec
>
codecs_
;
}
;
}
#
endif
