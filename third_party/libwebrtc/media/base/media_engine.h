#
ifndef
MEDIA_BASE_MEDIA_ENGINE_H_
#
define
MEDIA_BASE_MEDIA_ENGINE_H_
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
audio
/
audio_device
.
h
"
#
include
"
api
/
audio_codecs
/
audio_codec_pair_id
.
h
"
#
include
"
api
/
audio_codecs
/
audio_decoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder_factory
.
h
"
#
include
"
api
/
audio_options
.
h
"
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video
/
video_bitrate_allocator_factory
.
h
"
#
include
"
call
/
audio_state
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
media
/
base
/
media_config
.
h
"
#
include
"
media
/
base
/
stream_params
.
h
"
#
include
"
rtc_base
/
system
/
file_wrapper
.
h
"
namespace
webrtc
{
class
AudioMixer
;
class
Call
;
RTCError
CheckScalabilityModeValues
(
const
RtpParameters
&
new_parameters
ArrayView
<
Codec
>
send_codecs
std
:
:
optional
<
Codec
>
send_codec
)
;
RTCError
CheckRtpParametersValues
(
const
RtpParameters
&
new_parameters
ArrayView
<
Codec
>
send_codecs
std
:
:
optional
<
Codec
>
send_codec
const
FieldTrialsView
&
field_trials
)
;
RTCError
CheckRtpParametersInvalidModificationAndValues
(
const
RtpParameters
&
old_parameters
const
RtpParameters
&
new_parameters
ArrayView
<
Codec
>
send_codecs
std
:
:
optional
<
Codec
>
send_codec
const
FieldTrialsView
&
field_trials
)
;
RTCError
CheckRtpParametersInvalidModificationAndValues
(
const
RtpParameters
&
old_parameters
const
RtpParameters
&
new_parameters
const
FieldTrialsView
&
field_trials
)
;
class
RtpHeaderExtensionQueryInterface
{
public
:
virtual
~
RtpHeaderExtensionQueryInterface
(
)
=
default
;
virtual
std
:
:
vector
<
RtpHeaderExtensionCapability
>
GetRtpHeaderExtensions
(
)
const
=
0
;
}
;
class
VoiceEngineInterface
:
public
RtpHeaderExtensionQueryInterface
{
public
:
VoiceEngineInterface
(
)
=
default
;
virtual
~
VoiceEngineInterface
(
)
=
default
;
VoiceEngineInterface
(
const
VoiceEngineInterface
&
)
=
delete
;
VoiceEngineInterface
&
operator
=
(
const
VoiceEngineInterface
&
)
=
delete
;
virtual
void
Init
(
)
=
0
;
virtual
scoped_refptr
<
AudioState
>
GetAudioState
(
)
const
=
0
;
virtual
std
:
:
unique_ptr
<
VoiceMediaSendChannelInterface
>
CreateSendChannel
(
Call
*
const
MediaConfig
&
const
AudioOptions
&
const
CryptoOptions
&
AudioCodecPairId
)
=
0
;
virtual
std
:
:
unique_ptr
<
VoiceMediaReceiveChannelInterface
>
CreateReceiveChannel
(
Call
*
const
MediaConfig
&
const
AudioOptions
&
const
CryptoOptions
&
AudioCodecPairId
)
=
0
;
[
[
deprecated
]
]
inline
const
std
:
:
vector
<
Codec
>
&
send_codecs
(
)
const
{
return
LegacySendCodecs
(
)
;
}
[
[
deprecated
]
]
inline
const
std
:
:
vector
<
Codec
>
&
recv_codecs
(
)
const
{
return
LegacyRecvCodecs
(
)
;
}
virtual
const
std
:
:
vector
<
Codec
>
&
LegacySendCodecs
(
)
const
=
0
;
virtual
const
std
:
:
vector
<
Codec
>
&
LegacyRecvCodecs
(
)
const
=
0
;
virtual
AudioEncoderFactory
*
encoder_factory
(
)
const
=
0
;
virtual
AudioDecoderFactory
*
decoder_factory
(
)
const
=
0
;
virtual
bool
StartAecDump
(
FileWrapper
file
int64_t
max_size_bytes
)
=
0
;
virtual
void
StopAecDump
(
)
=
0
;
virtual
std
:
:
optional
<
AudioDeviceModule
:
:
Stats
>
GetAudioDeviceStats
(
)
=
0
;
}
;
class
VideoEngineInterface
:
public
RtpHeaderExtensionQueryInterface
{
public
:
VideoEngineInterface
(
)
=
default
;
virtual
~
VideoEngineInterface
(
)
=
default
;
VideoEngineInterface
(
const
VideoEngineInterface
&
)
=
delete
;
VideoEngineInterface
&
operator
=
(
const
VideoEngineInterface
&
)
=
delete
;
virtual
std
:
:
unique_ptr
<
VideoMediaSendChannelInterface
>
CreateSendChannel
(
Call
*
const
MediaConfig
&
const
VideoOptions
&
const
CryptoOptions
&
VideoBitrateAllocatorFactory
*
)
=
0
;
virtual
std
:
:
unique_ptr
<
VideoMediaReceiveChannelInterface
>
CreateReceiveChannel
(
Call
*
const
MediaConfig
&
const
VideoOptions
&
const
CryptoOptions
&
)
=
0
;
[
[
deprecated
]
]
inline
std
:
:
vector
<
Codec
>
send_codecs
(
)
const
{
return
LegacySendCodecs
(
)
;
}
[
[
deprecated
]
]
inline
std
:
:
vector
<
Codec
>
recv_codecs
(
)
const
{
return
LegacyRecvCodecs
(
)
;
}
virtual
std
:
:
vector
<
Codec
>
LegacySendCodecs
(
)
const
=
0
;
virtual
std
:
:
vector
<
Codec
>
LegacyRecvCodecs
(
)
const
=
0
;
[
[
deprecated
]
]
inline
std
:
:
vector
<
Codec
>
send_codecs
(
bool
include_rtx
)
const
{
return
LegacySendCodecs
(
include_rtx
)
;
}
virtual
std
:
:
vector
<
Codec
>
LegacySendCodecs
(
bool
include_rtx
)
const
=
0
;
virtual
std
:
:
vector
<
Codec
>
LegacyRecvCodecs
(
bool
include_rtx
)
const
=
0
;
[
[
deprecated
]
]
inline
std
:
:
vector
<
Codec
>
recv_codecs
(
bool
include_rtx
)
const
{
return
LegacyRecvCodecs
(
include_rtx
)
;
}
}
;
class
MediaEngineInterface
{
public
:
virtual
~
MediaEngineInterface
(
)
{
}
virtual
bool
Init
(
)
=
0
;
virtual
VoiceEngineInterface
&
voice
(
)
=
0
;
virtual
VideoEngineInterface
&
video
(
)
=
0
;
virtual
const
VoiceEngineInterface
&
voice
(
)
const
=
0
;
virtual
const
VideoEngineInterface
&
video
(
)
const
=
0
;
}
;
class
CompositeMediaEngine
:
public
MediaEngineInterface
{
public
:
CompositeMediaEngine
(
std
:
:
unique_ptr
<
FieldTrialsView
>
trials
std
:
:
unique_ptr
<
VoiceEngineInterface
>
audio_engine
std
:
:
unique_ptr
<
VideoEngineInterface
>
video_engine
)
;
CompositeMediaEngine
(
std
:
:
unique_ptr
<
VoiceEngineInterface
>
audio_engine
std
:
:
unique_ptr
<
VideoEngineInterface
>
video_engine
)
;
~
CompositeMediaEngine
(
)
override
;
bool
Init
(
)
override
;
VoiceEngineInterface
&
voice
(
)
override
;
VideoEngineInterface
&
video
(
)
override
;
const
VoiceEngineInterface
&
voice
(
)
const
override
;
const
VideoEngineInterface
&
video
(
)
const
override
;
private
:
const
std
:
:
unique_ptr
<
FieldTrialsView
>
trials_
;
const
std
:
:
unique_ptr
<
VoiceEngineInterface
>
voice_engine_
;
const
std
:
:
unique_ptr
<
VideoEngineInterface
>
video_engine_
;
}
;
RtpParameters
CreateRtpParametersWithOneEncoding
(
)
;
RtpParameters
CreateRtpParametersWithEncodings
(
StreamParams
sp
)
;
std
:
:
vector
<
RtpExtension
>
GetDefaultEnabledRtpHeaderExtensions
(
const
RtpHeaderExtensionQueryInterface
&
query_interface
)
;
}
#
ifdef
WEBRTC_ALLOW_DEPRECATED_NAMESPACES
namespace
cricket
{
using
:
:
webrtc
:
:
CheckRtpParametersInvalidModificationAndValues
;
using
:
:
webrtc
:
:
CheckRtpParametersValues
;
using
:
:
webrtc
:
:
CheckScalabilityModeValues
;
using
:
:
webrtc
:
:
CompositeMediaEngine
;
using
:
:
webrtc
:
:
CreateRtpParametersWithEncodings
;
using
:
:
webrtc
:
:
CreateRtpParametersWithOneEncoding
;
using
:
:
webrtc
:
:
GetDefaultEnabledRtpHeaderExtensions
;
using
:
:
webrtc
:
:
MediaEngineInterface
;
using
:
:
webrtc
:
:
RtpHeaderExtensionQueryInterface
;
using
:
:
webrtc
:
:
VideoEngineInterface
;
using
:
:
webrtc
:
:
VoiceEngineInterface
;
}
#
endif
#
endif
