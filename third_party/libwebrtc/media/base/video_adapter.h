#
ifndef
MEDIA_BASE_VIDEO_ADAPTER_H_
#
define
MEDIA_BASE_VIDEO_ADAPTER_H_
#
include
<
stdint
.
h
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
utility
>
#
include
"
api
/
video
/
resolution
.
h
"
#
include
"
api
/
video
/
video_source_interface
.
h
"
#
include
"
common_video
/
framerate_controller
.
h
"
#
include
"
media
/
base
/
video_common
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
cricket
{
class
RTC_EXPORT
VideoAdapter
{
public
:
VideoAdapter
(
)
;
explicit
VideoAdapter
(
int
source_resolution_alignment
)
;
virtual
~
VideoAdapter
(
)
;
VideoAdapter
(
const
VideoAdapter
&
)
=
delete
;
VideoAdapter
&
operator
=
(
const
VideoAdapter
&
)
=
delete
;
bool
AdaptFrameResolution
(
int
in_width
int
in_height
int64_t
in_timestamp_ns
int
*
cropped_width
int
*
cropped_height
int
*
out_width
int
*
out_height
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
;
void
OnOutputFormatRequest
(
const
std
:
:
optional
<
VideoFormat
>
&
format
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
;
void
OnOutputFormatRequest
(
const
std
:
:
optional
<
std
:
:
pair
<
int
int
>
>
&
target_aspect_ratio
const
std
:
:
optional
<
int
>
&
max_pixel_count
const
std
:
:
optional
<
int
>
&
max_fps
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
;
void
OnOutputFormatRequest
(
const
std
:
:
optional
<
std
:
:
pair
<
int
int
>
>
&
target_landscape_aspect_ratio
const
std
:
:
optional
<
int
>
&
max_landscape_pixel_count
const
std
:
:
optional
<
std
:
:
pair
<
int
int
>
>
&
target_portrait_aspect_ratio
const
std
:
:
optional
<
int
>
&
max_portrait_pixel_count
const
std
:
:
optional
<
int
>
&
max_fps
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
;
void
OnSinkWants
(
const
webrtc
:
:
VideoSinkWants
&
sink_wants
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
;
int
GetTargetPixels
(
)
const
;
float
GetMaxFramerate
(
)
const
;
private
:
bool
DropFrame
(
int64_t
in_timestamp_ns
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
int
frames_in_
RTC_GUARDED_BY
(
mutex_
)
;
int
frames_out_
RTC_GUARDED_BY
(
mutex_
)
;
int
frames_scaled_
RTC_GUARDED_BY
(
mutex_
)
;
int
adaption_changes_
RTC_GUARDED_BY
(
mutex_
)
;
int
previous_width_
RTC_GUARDED_BY
(
mutex_
)
;
int
previous_height_
RTC_GUARDED_BY
(
mutex_
)
;
const
int
source_resolution_alignment_
;
int
resolution_alignment_
RTC_GUARDED_BY
(
mutex_
)
;
struct
OutputFormatRequest
{
std
:
:
optional
<
std
:
:
pair
<
int
int
>
>
target_landscape_aspect_ratio
;
std
:
:
optional
<
int
>
max_landscape_pixel_count
;
std
:
:
optional
<
std
:
:
pair
<
int
int
>
>
target_portrait_aspect_ratio
;
std
:
:
optional
<
int
>
max_portrait_pixel_count
;
std
:
:
optional
<
int
>
max_fps
;
std
:
:
string
ToString
(
)
const
;
}
;
OutputFormatRequest
output_format_request_
RTC_GUARDED_BY
(
mutex_
)
;
int
resolution_request_target_pixel_count_
RTC_GUARDED_BY
(
mutex_
)
;
int
resolution_request_max_pixel_count_
RTC_GUARDED_BY
(
mutex_
)
;
int
max_framerate_request_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
optional
<
webrtc
:
:
Resolution
>
scale_resolution_down_to_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
optional
<
OutputFormatRequest
>
stashed_output_format_request_
RTC_GUARDED_BY
(
mutex_
)
;
webrtc
:
:
FramerateController
framerate_controller_
RTC_GUARDED_BY
(
mutex_
)
;
mutable
webrtc
:
:
Mutex
mutex_
;
}
;
}
#
endif
