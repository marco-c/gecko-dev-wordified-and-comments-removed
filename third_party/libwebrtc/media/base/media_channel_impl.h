#
ifndef
MEDIA_BASE_MEDIA_CHANNEL_IMPL_H_
#
define
MEDIA_BASE_MEDIA_CHANNEL_IMPL_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
functional
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
audio_options
.
h
"
#
include
"
api
/
call
/
audio_sink
.
h
"
#
include
"
api
/
call
/
transport
.
h
"
#
include
"
api
/
crypto
/
frame_decryptor_interface
.
h
"
#
include
"
api
/
crypto
/
frame_encryptor_interface
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtp_headers
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
rtp_sender_interface
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
transport
/
rtp
/
rtp_source
.
h
"
#
include
"
api
/
video
/
recordable_encoded_frame
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
api
/
video
/
video_source_interface
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
media
/
base
/
stream_params
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
rtc_base
/
dscp
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
network
/
sent_packet
.
h
"
#
include
"
rtc_base
/
network_route
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
cricket
{
class
VoiceMediaChannel
;
class
VideoMediaChannel
;
class
MediaChannelUtil
{
public
:
MediaChannelUtil
(
webrtc
:
:
TaskQueueBase
*
network_thread
bool
enable_dscp
=
false
)
;
virtual
~
MediaChannelUtil
(
)
;
virtual
int
GetRtpSendTimeExtnId
(
)
const
;
bool
SendPacket
(
rtc
:
:
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketOptions
&
options
)
;
bool
SendRtcp
(
rtc
:
:
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketOptions
&
options
)
;
int
SetOption
(
MediaChannelNetworkInterface
:
:
SocketType
type
rtc
:
:
Socket
:
:
Option
opt
int
option
)
;
void
SetExtmapAllowMixed
(
bool
extmap_allow_mixed
)
;
bool
ExtmapAllowMixed
(
)
const
;
void
SetInterface
(
MediaChannelNetworkInterface
*
iface
)
;
bool
HasNetworkInterface
(
)
const
;
void
SetFrameEncryptor
(
uint32_t
ssrc
rtc
:
:
scoped_refptr
<
webrtc
:
:
FrameEncryptorInterface
>
frame_encryptor
)
;
void
SetFrameDecryptor
(
uint32_t
ssrc
rtc
:
:
scoped_refptr
<
webrtc
:
:
FrameDecryptorInterface
>
frame_decryptor
)
;
void
SetEncoderToPacketizerFrameTransformer
(
uint32_t
ssrc
rtc
:
:
scoped_refptr
<
webrtc
:
:
FrameTransformerInterface
>
frame_transformer
)
;
void
SetDepacketizerToDecoderFrameTransformer
(
uint32_t
ssrc
rtc
:
:
scoped_refptr
<
webrtc
:
:
FrameTransformerInterface
>
frame_transformer
)
;
protected
:
int
SetOptionLocked
(
MediaChannelNetworkInterface
:
:
SocketType
type
rtc
:
:
Socket
:
:
Option
opt
int
option
)
RTC_RUN_ON
(
network_thread_
)
;
bool
DscpEnabled
(
)
const
;
rtc
:
:
DiffServCodePoint
PreferredDscp
(
)
const
;
void
SetPreferredDscp
(
rtc
:
:
DiffServCodePoint
new_dscp
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
PendingTaskSafetyFlag
>
network_safety
(
)
;
void
SendRtp
(
const
uint8_t
*
data
size_t
len
const
webrtc
:
:
PacketOptions
&
options
)
;
void
SendRtcp
(
const
uint8_t
*
data
size_t
len
)
;
private
:
void
UpdateDscp
(
)
RTC_RUN_ON
(
network_thread_
)
;
bool
DoSendPacket
(
rtc
:
:
CopyOnWriteBuffer
*
packet
bool
rtcp
const
rtc
:
:
PacketOptions
&
options
)
;
const
bool
enable_dscp_
;
const
rtc
:
:
scoped_refptr
<
webrtc
:
:
PendingTaskSafetyFlag
>
network_safety_
RTC_PT_GUARDED_BY
(
network_thread_
)
;
webrtc
:
:
TaskQueueBase
*
const
network_thread_
;
MediaChannelNetworkInterface
*
network_interface_
RTC_GUARDED_BY
(
network_thread_
)
=
nullptr
;
rtc
:
:
DiffServCodePoint
preferred_dscp_
RTC_GUARDED_BY
(
network_thread_
)
=
rtc
:
:
DSCP_DEFAULT
;
bool
extmap_allow_mixed_
=
false
;
}
;
class
MediaChannel
:
public
MediaChannelUtil
public
MediaSendChannelInterface
public
MediaReceiveChannelInterface
{
public
:
enum
class
Role
{
kSend
kReceive
kBoth
}
;
explicit
MediaChannel
(
Role
role
webrtc
:
:
TaskQueueBase
*
network_thread
bool
enable_dscp
=
false
)
;
virtual
~
MediaChannel
(
)
=
default
;
Role
role
(
)
const
{
return
role_
;
}
virtual
VideoMediaChannel
*
AsVideoChannel
(
)
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
virtual
VoiceMediaChannel
*
AsVoiceChannel
(
)
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
cricket
:
:
MediaType
media_type
(
)
const
override
=
0
;
void
OnPacketReceived
(
const
webrtc
:
:
RtpPacketReceived
&
packet
)
override
=
0
;
void
OnPacketSent
(
const
rtc
:
:
SentPacket
&
sent_packet
)
override
=
0
;
void
OnReadyToSend
(
bool
ready
)
override
=
0
;
void
OnNetworkRouteChanged
(
absl
:
:
string_view
transport_name
const
rtc
:
:
NetworkRoute
&
network_route
)
override
=
0
;
void
SetSendCodecChangedCallback
(
absl
:
:
AnyInvocable
<
void
(
)
>
callback
)
override
=
0
;
using
MediaChannelUtil
:
:
ExtmapAllowMixed
;
using
MediaChannelUtil
:
:
HasNetworkInterface
;
using
MediaChannelUtil
:
:
SetExtmapAllowMixed
;
using
MediaChannelUtil
:
:
SetInterface
;
private
:
const
Role
role_
;
}
;
class
VideoMediaChannel
:
public
MediaChannel
public
VideoMediaSendChannelInterface
public
VideoMediaReceiveChannelInterface
{
public
:
explicit
VideoMediaChannel
(
MediaChannel
:
:
Role
role
webrtc
:
:
TaskQueueBase
*
network_thread
bool
enable_dscp
=
false
)
:
MediaChannel
(
role
network_thread
enable_dscp
)
{
}
~
VideoMediaChannel
(
)
override
{
}
VideoMediaSendChannelInterface
*
AsVideoSendChannel
(
)
override
{
return
this
;
}
VoiceMediaSendChannelInterface
*
AsVoiceSendChannel
(
)
override
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
VideoMediaReceiveChannelInterface
*
AsVideoReceiveChannel
(
)
override
{
return
this
;
}
VoiceMediaReceiveChannelInterface
*
AsVoiceReceiveChannel
(
)
override
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
cricket
:
:
MediaType
media_type
(
)
const
override
;
VideoMediaChannel
*
AsVideoChannel
(
)
override
{
return
this
;
}
void
SetExtmapAllowMixed
(
bool
mixed
)
override
{
MediaChannel
:
:
SetExtmapAllowMixed
(
mixed
)
;
}
bool
ExtmapAllowMixed
(
)
const
override
{
return
MediaChannel
:
:
ExtmapAllowMixed
(
)
;
}
void
SetInterface
(
MediaChannelNetworkInterface
*
iface
)
override
{
return
MediaChannel
:
:
SetInterface
(
iface
)
;
}
bool
AddSendStream
(
const
StreamParams
&
sp
)
override
=
0
;
void
ChooseReceiverReportSsrc
(
const
std
:
:
set
<
uint32_t
>
&
choices
)
override
=
0
;
void
SetSsrcListChangedCallback
(
absl
:
:
AnyInvocable
<
void
(
const
std
:
:
set
<
uint32_t
>
&
)
>
callback
)
override
=
0
;
bool
AddRecvStream
(
const
StreamParams
&
sp
)
override
=
0
;
void
OnPacketReceived
(
const
webrtc
:
:
RtpPacketReceived
&
packet
)
override
=
0
;
void
SetEncoderSelector
(
uint32_t
ssrc
webrtc
:
:
VideoEncoderFactory
:
:
EncoderSelectorInterface
*
encoder_selector
)
override
{
}
void
FillBitrateInfo
(
BandwidthEstimationInfo
*
bwe_info
)
override
=
0
;
virtual
bool
GetSendStats
(
VideoMediaSendInfo
*
info
)
=
0
;
virtual
bool
GetReceiveStats
(
VideoMediaReceiveInfo
*
info
)
=
0
;
bool
GetStats
(
VideoMediaSendInfo
*
info
)
override
{
return
GetSendStats
(
info
)
;
}
bool
GetStats
(
VideoMediaReceiveInfo
*
info
)
override
{
return
GetReceiveStats
(
info
)
;
}
void
SetSendCodecChangedCallback
(
absl
:
:
AnyInvocable
<
void
(
)
>
callback
)
override
=
0
;
void
SetVideoCodecSwitchingEnabled
(
bool
enabled
)
override
;
private
:
bool
HasNetworkInterface
(
)
const
override
{
return
MediaChannel
:
:
HasNetworkInterface
(
)
;
}
MediaChannel
*
ImplForTesting
(
)
override
{
RTC_CHECK_NOTREACHED
(
)
;
}
}
;
class
VoiceMediaChannel
:
public
MediaChannel
public
VoiceMediaSendChannelInterface
public
VoiceMediaReceiveChannelInterface
{
public
:
MediaType
media_type
(
)
const
override
;
VoiceMediaChannel
(
MediaChannel
:
:
Role
role
webrtc
:
:
TaskQueueBase
*
network_thread
bool
enable_dscp
=
false
)
:
MediaChannel
(
role
network_thread
enable_dscp
)
{
}
~
VoiceMediaChannel
(
)
override
{
}
VoiceMediaSendChannelInterface
*
AsVoiceSendChannel
(
)
override
{
return
this
;
}
VoiceMediaReceiveChannelInterface
*
AsVoiceReceiveChannel
(
)
override
{
return
this
;
}
VoiceMediaChannel
*
AsVoiceChannel
(
)
override
{
return
this
;
}
VideoMediaSendChannelInterface
*
AsVideoSendChannel
(
)
override
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
VideoMediaReceiveChannelInterface
*
AsVideoReceiveChannel
(
)
override
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
bool
AddSendStream
(
const
StreamParams
&
sp
)
override
=
0
;
bool
AddRecvStream
(
const
StreamParams
&
sp
)
override
=
0
;
void
OnPacketReceived
(
const
webrtc
:
:
RtpPacketReceived
&
packet
)
override
=
0
;
void
SetEncoderSelector
(
uint32_t
ssrc
webrtc
:
:
VideoEncoderFactory
:
:
EncoderSelectorInterface
*
encoder_selector
)
override
{
}
void
ChooseReceiverReportSsrc
(
const
std
:
:
set
<
uint32_t
>
&
choices
)
override
=
0
;
void
SetSsrcListChangedCallback
(
absl
:
:
AnyInvocable
<
void
(
const
std
:
:
set
<
uint32_t
>
&
)
>
callback
)
override
=
0
;
webrtc
:
:
RtpParameters
GetRtpSendParameters
(
uint32_t
ssrc
)
const
override
=
0
;
webrtc
:
:
RTCError
SetRtpSendParameters
(
uint32_t
ssrc
const
webrtc
:
:
RtpParameters
&
parameters
webrtc
:
:
SetParametersCallback
callback
=
nullptr
)
override
=
0
;
void
SetExtmapAllowMixed
(
bool
mixed
)
override
{
MediaChannel
:
:
SetExtmapAllowMixed
(
mixed
)
;
}
bool
ExtmapAllowMixed
(
)
const
override
{
return
MediaChannel
:
:
ExtmapAllowMixed
(
)
;
}
void
SetInterface
(
MediaChannelNetworkInterface
*
iface
)
override
{
return
MediaChannel
:
:
SetInterface
(
iface
)
;
}
bool
HasNetworkInterface
(
)
const
override
{
return
MediaChannel
:
:
HasNetworkInterface
(
)
;
}
virtual
bool
GetSendStats
(
VoiceMediaSendInfo
*
info
)
=
0
;
virtual
bool
GetReceiveStats
(
VoiceMediaReceiveInfo
*
info
bool
get_and_clear_legacy_stats
)
=
0
;
bool
GetStats
(
VoiceMediaSendInfo
*
info
)
override
{
return
GetSendStats
(
info
)
;
}
bool
GetStats
(
VoiceMediaReceiveInfo
*
info
bool
get_and_clear_legacy_stats
)
override
{
return
GetReceiveStats
(
info
get_and_clear_legacy_stats
)
;
}
private
:
MediaChannel
*
ImplForTesting
(
)
override
{
RTC_CHECK_NOTREACHED
(
)
;
}
}
;
}
#
endif
