#
include
"
media
/
base
/
codec_comparators
.
h
"
#
include
<
cstddef
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
algorithm
/
container
.
h
"
#
include
"
absl
/
strings
/
match
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
video_codecs
/
av1_profile
.
h
"
#
include
"
api
/
video_codecs
/
h264_profile_level_id
.
h
"
#
ifdef
RTC_ENABLE_H265
#
include
"
api
/
video_codecs
/
h265_profile_tier_level
.
h
"
#
endif
#
include
"
api
/
video_codecs
/
vp9_profile
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
media_constants
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
string_encode
.
h
"
namespace
webrtc
{
namespace
{
using
cricket
:
:
Codec
;
std
:
:
string
GetFmtpParameterOrDefault
(
const
CodecParameterMap
&
params
const
std
:
:
string
&
name
const
std
:
:
string
&
default_value
)
{
const
auto
it
=
params
.
find
(
name
)
;
if
(
it
!
=
params
.
end
(
)
)
{
return
it
-
>
second
;
}
return
default_value
;
}
std
:
:
string
H264GetPacketizationModeOrDefault
(
const
CodecParameterMap
&
params
)
{
return
GetFmtpParameterOrDefault
(
params
cricket
:
:
kH264FmtpPacketizationMode
"
0
"
)
;
}
bool
H264IsSamePacketizationMode
(
const
CodecParameterMap
&
left
const
CodecParameterMap
&
right
)
{
return
H264GetPacketizationModeOrDefault
(
left
)
=
=
H264GetPacketizationModeOrDefault
(
right
)
;
}
std
:
:
string
AV1GetTierOrDefault
(
const
CodecParameterMap
&
params
)
{
return
GetFmtpParameterOrDefault
(
params
cricket
:
:
kAv1FmtpTier
"
0
"
)
;
}
bool
AV1IsSameTier
(
const
CodecParameterMap
&
left
const
CodecParameterMap
&
right
)
{
return
AV1GetTierOrDefault
(
left
)
=
=
AV1GetTierOrDefault
(
right
)
;
}
std
:
:
string
AV1GetLevelIdxOrDefault
(
const
CodecParameterMap
&
params
)
{
return
GetFmtpParameterOrDefault
(
params
cricket
:
:
kAv1FmtpLevelIdx
"
5
"
)
;
}
bool
AV1IsSameLevelIdx
(
const
CodecParameterMap
&
left
const
CodecParameterMap
&
right
)
{
return
AV1GetLevelIdxOrDefault
(
left
)
=
=
AV1GetLevelIdxOrDefault
(
right
)
;
}
#
ifdef
RTC_ENABLE_H265
std
:
:
string
GetH265TxModeOrDefault
(
const
CodecParameterMap
&
params
)
{
return
GetFmtpParameterOrDefault
(
params
cricket
:
:
kH265FmtpTxMode
"
SRST
"
)
;
}
bool
IsSameH265TxMode
(
const
CodecParameterMap
&
left
const
CodecParameterMap
&
right
)
{
return
absl
:
:
EqualsIgnoreCase
(
GetH265TxModeOrDefault
(
left
)
GetH265TxModeOrDefault
(
right
)
)
;
}
#
endif
bool
IsSameCodecSpecific
(
const
std
:
:
string
&
name1
const
CodecParameterMap
&
params1
const
std
:
:
string
&
name2
const
CodecParameterMap
&
params2
)
{
auto
either_name_matches
=
[
&
]
(
const
std
:
:
string
name
)
{
return
absl
:
:
EqualsIgnoreCase
(
name
name1
)
|
|
absl
:
:
EqualsIgnoreCase
(
name
name2
)
;
}
;
if
(
either_name_matches
(
cricket
:
:
kH264CodecName
)
)
return
H264IsSameProfile
(
params1
params2
)
&
&
H264IsSamePacketizationMode
(
params1
params2
)
;
if
(
either_name_matches
(
cricket
:
:
kVp9CodecName
)
)
return
VP9IsSameProfile
(
params1
params2
)
;
if
(
either_name_matches
(
cricket
:
:
kAv1CodecName
)
)
return
AV1IsSameProfile
(
params1
params2
)
&
&
AV1IsSameTier
(
params1
params2
)
&
&
AV1IsSameLevelIdx
(
params1
params2
)
;
#
ifdef
RTC_ENABLE_H265
if
(
either_name_matches
(
cricket
:
:
kH265CodecName
)
)
{
return
H265IsSameProfile
(
params1
params2
)
&
&
H265IsSameTier
(
params1
params2
)
&
&
IsSameH265TxMode
(
params1
params2
)
;
}
#
endif
return
true
;
}
bool
ReferencedCodecsMatch
(
const
std
:
:
vector
<
Codec
>
&
codecs1
const
int
codec1_id
const
std
:
:
vector
<
Codec
>
&
codecs2
const
int
codec2_id
)
{
const
Codec
*
codec1
=
FindCodecById
(
codecs1
codec1_id
)
;
const
Codec
*
codec2
=
FindCodecById
(
codecs2
codec2_id
)
;
return
codec1
!
=
nullptr
&
&
codec2
!
=
nullptr
&
&
codec1
-
>
Matches
(
*
codec2
)
;
}
}
bool
MatchesWithCodecRules
(
const
Codec
&
left_codec
const
Codec
&
right_codec
)
{
const
int
kLowerDynamicRangeMin
=
35
;
const
int
kLowerDynamicRangeMax
=
65
;
const
int
kUpperDynamicRangeMin
=
96
;
const
int
kUpperDynamicRangeMax
=
127
;
const
bool
is_id_in_dynamic_range
=
(
left_codec
.
id
>
=
kLowerDynamicRangeMin
&
&
left_codec
.
id
<
=
kLowerDynamicRangeMax
)
|
|
(
left_codec
.
id
>
=
kUpperDynamicRangeMin
&
&
left_codec
.
id
<
=
kUpperDynamicRangeMax
)
;
const
bool
is_codec_id_in_dynamic_range
=
(
right_codec
.
id
>
=
kLowerDynamicRangeMin
&
&
right_codec
.
id
<
=
kLowerDynamicRangeMax
)
|
|
(
right_codec
.
id
>
=
kUpperDynamicRangeMin
&
&
right_codec
.
id
<
=
kUpperDynamicRangeMax
)
;
bool
matches_id
;
if
(
(
is_id_in_dynamic_range
&
&
is_codec_id_in_dynamic_range
)
|
|
left_codec
.
id
=
=
Codec
:
:
kIdNotSet
|
|
right_codec
.
id
=
=
Codec
:
:
kIdNotSet
)
{
matches_id
=
absl
:
:
EqualsIgnoreCase
(
left_codec
.
name
right_codec
.
name
)
;
}
else
{
matches_id
=
(
left_codec
.
id
=
=
right_codec
.
id
)
;
}
auto
matches_type_specific
=
[
&
]
(
)
{
switch
(
left_codec
.
type
)
{
case
Codec
:
:
Type
:
:
kAudio
:
return
(
(
right_codec
.
clockrate
=
=
0
)
|
|
left_codec
.
clockrate
=
=
right_codec
.
clockrate
)
&
&
(
right_codec
.
bitrate
=
=
0
|
|
left_codec
.
bitrate
<
=
0
|
|
left_codec
.
bitrate
=
=
right_codec
.
bitrate
)
&
&
(
(
right_codec
.
channels
<
2
&
&
left_codec
.
channels
<
2
)
|
|
left_codec
.
channels
=
=
right_codec
.
channels
)
;
case
Codec
:
:
Type
:
:
kVideo
:
return
IsSameCodecSpecific
(
left_codec
.
name
left_codec
.
params
right_codec
.
name
right_codec
.
params
)
;
}
}
;
return
matches_id
&
&
matches_type_specific
(
)
;
}
std
:
:
optional
<
Codec
>
FindMatchingCodec
(
const
std
:
:
vector
<
Codec
>
&
codecs1
const
std
:
:
vector
<
Codec
>
&
codecs2
const
Codec
&
codec_to_match
)
{
RTC_DCHECK
(
absl
:
:
c_any_of
(
codecs1
[
&
codec_to_match
]
(
const
Codec
&
codec
)
{
return
&
codec
=
=
&
codec_to_match
;
}
)
)
;
for
(
const
Codec
&
potential_match
:
codecs2
)
{
if
(
potential_match
.
Matches
(
codec_to_match
)
)
{
if
(
codec_to_match
.
GetResiliencyType
(
)
=
=
Codec
:
:
ResiliencyType
:
:
kRtx
)
{
int
apt_value_1
=
0
;
int
apt_value_2
=
0
;
if
(
!
codec_to_match
.
GetParam
(
cricket
:
:
kCodecParamAssociatedPayloadType
&
apt_value_1
)
|
|
!
potential_match
.
GetParam
(
cricket
:
:
kCodecParamAssociatedPayloadType
&
apt_value_2
)
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
RTX
missing
associated
payload
type
.
"
;
continue
;
}
if
(
!
ReferencedCodecsMatch
(
codecs1
apt_value_1
codecs2
apt_value_2
)
)
{
continue
;
}
}
else
if
(
codec_to_match
.
GetResiliencyType
(
)
=
=
Codec
:
:
ResiliencyType
:
:
kRed
)
{
auto
red_parameters_1
=
codec_to_match
.
params
.
find
(
cricket
:
:
kCodecParamNotInNameValueFormat
)
;
auto
red_parameters_2
=
potential_match
.
params
.
find
(
cricket
:
:
kCodecParamNotInNameValueFormat
)
;
bool
has_parameters_1
=
red_parameters_1
!
=
codec_to_match
.
params
.
end
(
)
;
bool
has_parameters_2
=
red_parameters_2
!
=
potential_match
.
params
.
end
(
)
;
if
(
potential_match
.
id
=
=
Codec
:
:
kIdNotSet
&
&
!
has_parameters_2
)
{
return
potential_match
;
}
if
(
codec_to_match
.
id
=
=
Codec
:
:
kIdNotSet
&
&
!
has_parameters_1
)
{
return
potential_match
;
}
if
(
has_parameters_1
&
&
has_parameters_2
)
{
std
:
:
vector
<
absl
:
:
string_view
>
redundant_payloads_1
=
rtc
:
:
split
(
red_parameters_1
-
>
second
'
/
'
)
;
std
:
:
vector
<
absl
:
:
string_view
>
redundant_payloads_2
=
rtc
:
:
split
(
red_parameters_2
-
>
second
'
/
'
)
;
if
(
redundant_payloads_1
.
size
(
)
>
0
&
&
redundant_payloads_2
.
size
(
)
>
0
)
{
bool
consistent
=
true
;
for
(
size_t
i
=
1
;
i
<
redundant_payloads_1
.
size
(
)
;
i
+
+
)
{
if
(
redundant_payloads_1
[
i
]
!
=
redundant_payloads_1
[
0
]
)
{
consistent
=
false
;
break
;
}
}
for
(
size_t
i
=
1
;
i
<
redundant_payloads_2
.
size
(
)
;
i
+
+
)
{
if
(
redundant_payloads_2
[
i
]
!
=
redundant_payloads_2
[
0
]
)
{
consistent
=
false
;
break
;
}
}
if
(
!
consistent
)
{
continue
;
}
int
red_value_1
;
int
red_value_2
;
if
(
rtc
:
:
FromString
(
redundant_payloads_1
[
0
]
&
red_value_1
)
&
&
rtc
:
:
FromString
(
redundant_payloads_2
[
0
]
&
red_value_2
)
)
{
if
(
!
ReferencedCodecsMatch
(
codecs1
red_value_1
codecs2
red_value_2
)
)
{
continue
;
}
}
}
}
else
if
(
has_parameters_1
!
=
has_parameters_2
)
{
continue
;
}
}
return
potential_match
;
}
}
return
std
:
:
nullopt
;
}
}
