#
ifndef
MEDIA_BASE_FAKE_VIDEO_RENDERER_H_
#
define
MEDIA_BASE_FAKE_VIDEO_RENDERER_H_
#
include
<
stdint
.
h
>
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_rotation
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
namespace
webrtc
{
class
FakeVideoRenderer
:
public
VideoSinkInterface
<
VideoFrame
>
{
public
:
FakeVideoRenderer
(
)
;
void
OnFrame
(
const
VideoFrame
&
frame
)
override
;
int
width
(
)
const
{
MutexLock
lock
(
&
mutex_
)
;
return
width_
;
}
int
height
(
)
const
{
MutexLock
lock
(
&
mutex_
)
;
return
height_
;
}
VideoRotation
rotation
(
)
const
{
MutexLock
lock
(
&
mutex_
)
;
return
rotation_
;
}
int64_t
timestamp_us
(
)
const
{
MutexLock
lock
(
&
mutex_
)
;
return
timestamp_us_
;
}
int
num_rendered_frames
(
)
const
{
MutexLock
lock
(
&
mutex_
)
;
return
num_rendered_frames_
;
}
bool
black_frame
(
)
const
{
MutexLock
lock
(
&
mutex_
)
;
return
black_frame_
;
}
private
:
int
width_
=
0
;
int
height_
=
0
;
VideoRotation
rotation_
=
webrtc
:
:
kVideoRotation_0
;
int64_t
timestamp_us_
=
0
;
int
num_rendered_frames_
=
0
;
bool
black_frame_
=
false
;
mutable
Mutex
mutex_
;
}
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
FakeVideoRenderer
;
}
#
endif
