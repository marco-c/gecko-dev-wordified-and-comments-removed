#
ifndef
MEDIA_BASE_ADAPTED_VIDEO_TRACK_SOURCE_H_
#
define
MEDIA_BASE_ADAPTED_VIDEO_TRACK_SOURCE_H_
#
include
<
stdint
.
h
>
#
include
<
optional
>
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
notifier
.
h
"
#
include
"
api
/
video
/
recordable_encoded_frame
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
api
/
video
/
video_source_interface
.
h
"
#
include
"
api
/
video_track_source_constraints
.
h
"
#
include
"
media
/
base
/
video_adapter
.
h
"
#
include
"
media
/
base
/
video_broadcaster
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
AdaptedVideoTrackSource
:
public
Notifier
<
VideoTrackSourceInterface
>
{
public
:
AdaptedVideoTrackSource
(
)
;
~
AdaptedVideoTrackSource
(
)
override
;
protected
:
explicit
AdaptedVideoTrackSource
(
int
required_alignment
)
;
void
OnFrame
(
const
VideoFrame
&
frame
)
;
void
OnFrameDropped
(
)
;
bool
AdaptFrame
(
int
width
int
height
int64_t
time_us
int
*
out_width
int
*
out_height
int
*
crop_width
int
*
crop_height
int
*
crop_x
int
*
crop_y
)
;
bool
apply_rotation
(
)
;
VideoAdapter
*
video_adapter
(
)
{
return
&
video_adapter_
;
}
private
:
void
AddOrUpdateSink
(
VideoSinkInterface
<
VideoFrame
>
*
sink
const
VideoSinkWants
&
wants
)
override
;
void
RemoveSink
(
VideoSinkInterface
<
VideoFrame
>
*
sink
)
override
;
bool
GetStats
(
Stats
*
stats
)
override
;
void
OnSinkWantsChanged
(
const
VideoSinkWants
&
wants
)
;
bool
SupportsEncodedOutput
(
)
const
override
{
return
false
;
}
void
GenerateKeyFrame
(
)
override
{
}
void
AddEncodedSink
(
VideoSinkInterface
<
RecordableEncodedFrame
>
*
)
override
{
}
void
RemoveEncodedSink
(
VideoSinkInterface
<
RecordableEncodedFrame
>
*
)
override
{
}
void
ProcessConstraints
(
const
VideoTrackSourceConstraints
&
constraints
)
override
;
VideoAdapter
video_adapter_
;
Mutex
stats_mutex_
;
std
:
:
optional
<
Stats
>
stats_
RTC_GUARDED_BY
(
stats_mutex_
)
;
VideoBroadcaster
broadcaster_
;
}
;
}
namespace
rtc
{
using
:
:
webrtc
:
:
AdaptedVideoTrackSource
;
}
#
endif
