#
ifndef
MEDIA_BASE_TEST_UTILS_H_
#
define
MEDIA_BASE_TEST_UTILS_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
media
/
base
/
stream_params
.
h
"
#
include
"
rtc_base
/
arraysize
.
h
"
namespace
webrtc
{
class
VideoFrame
;
}
namespace
webrtc
{
#
define
I420_SIZE
(
w
h
)
(
w
*
h
+
(
(
(
w
+
1
)
/
2
)
*
(
(
h
+
1
)
/
2
)
)
*
2
)
#
define
ARGB_SIZE
(
w
h
)
(
w
*
h
*
4
)
template
<
class
T
>
inline
std
:
:
vector
<
T
>
MakeVector
(
const
T
a
[
]
size_t
s
)
{
return
std
:
:
vector
<
T
>
(
a
a
+
s
)
;
}
#
define
MAKE_VECTOR
(
a
)
webrtc
:
:
MakeVector
(
a
arraysize
(
a
)
)
cricket
:
:
StreamParams
CreateSimStreamParams
(
const
std
:
:
string
&
cname
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
)
;
cricket
:
:
StreamParams
CreateSimWithRtxStreamParams
(
const
std
:
:
string
&
cname
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
const
std
:
:
vector
<
uint32_t
>
&
rtx_ssrcs
)
;
cricket
:
:
StreamParams
CreatePrimaryWithFecFrStreamParams
(
const
std
:
:
string
&
cname
uint32_t
primary_ssrc
uint32_t
flexfec_ssrc
)
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
CreatePrimaryWithFecFrStreamParams
;
using
:
:
webrtc
:
:
CreateSimStreamParams
;
using
:
:
webrtc
:
:
CreateSimWithRtxStreamParams
;
using
:
:
webrtc
:
:
MakeVector
;
}
#
endif
