#
include
"
media
/
base
/
turn_utils
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
cricket
{
TEST
(
TurnUtilsTest
InvalidTurnSendIndicationMessages
)
{
size_t
content_pos
=
SIZE_MAX
;
size_t
content_size
=
SIZE_MAX
;
uint8_t
kTurnSendIndicationMsgWithNoAttributes
[
]
=
{
0x00
0x16
0x00
0x00
0x21
0x12
0xA4
0x42
'
0
'
'
1
'
'
2
'
'
3
'
'
4
'
'
5
'
'
6
'
'
7
'
'
8
'
'
9
'
'
a
'
'
b
'
}
;
EXPECT_FALSE
(
UnwrapTurnPacket
(
kTurnSendIndicationMsgWithNoAttributes
sizeof
(
kTurnSendIndicationMsgWithNoAttributes
)
&
content_pos
&
content_size
)
)
;
EXPECT_EQ
(
SIZE_MAX
content_pos
)
;
EXPECT_EQ
(
SIZE_MAX
content_size
)
;
const
uint8_t
kTurnSendIndicationMsgWithInvalidLength
[
]
=
{
0x00
0x16
0xFF
0x00
0x21
0x12
0xA4
0x42
'
0
'
'
1
'
'
2
'
'
3
'
'
4
'
'
5
'
'
6
'
'
7
'
'
8
'
'
9
'
'
a
'
'
b
'
}
;
EXPECT_FALSE
(
UnwrapTurnPacket
(
kTurnSendIndicationMsgWithInvalidLength
sizeof
(
kTurnSendIndicationMsgWithInvalidLength
)
&
content_pos
&
content_size
)
)
;
EXPECT_EQ
(
SIZE_MAX
content_pos
)
;
EXPECT_EQ
(
SIZE_MAX
content_size
)
;
const
uint8_t
kTurnSendIndicatinMsgWithNoDataAttribute
[
]
=
{
0x00
0x16
0x00
0x08
0x21
0x12
0xA4
0x42
'
0
'
'
1
'
'
2
'
'
3
'
'
4
'
'
5
'
'
6
'
'
7
'
'
8
'
'
9
'
'
a
'
'
b
'
0x00
0x20
0x00
0x04
0x00
0x00
0x00
0x00
}
;
EXPECT_FALSE
(
UnwrapTurnPacket
(
kTurnSendIndicatinMsgWithNoDataAttribute
sizeof
(
kTurnSendIndicatinMsgWithNoDataAttribute
)
&
content_pos
&
content_size
)
)
;
EXPECT_EQ
(
SIZE_MAX
content_pos
)
;
EXPECT_EQ
(
SIZE_MAX
content_size
)
;
}
TEST
(
TurnUtilsTest
ValidTurnSendIndicationMessage
)
{
size_t
content_pos
=
SIZE_MAX
;
size_t
content_size
=
SIZE_MAX
;
const
uint8_t
kTurnSendIndicationMsgWithoutRtpExtension
[
]
=
{
0x00
0x16
0x00
0x18
0x21
0x12
0xA4
0x42
'
0
'
'
1
'
'
2
'
'
3
'
'
4
'
'
5
'
'
6
'
'
7
'
'
8
'
'
9
'
'
a
'
'
b
'
0x00
0x20
0x00
0x04
0x00
0x00
0x00
0x00
0x00
0x13
0x00
0x0C
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
}
;
EXPECT_TRUE
(
UnwrapTurnPacket
(
kTurnSendIndicationMsgWithoutRtpExtension
sizeof
(
kTurnSendIndicationMsgWithoutRtpExtension
)
&
content_pos
&
content_size
)
)
;
EXPECT_EQ
(
12U
content_size
)
;
EXPECT_EQ
(
32U
content_pos
)
;
}
TEST
(
TurnUtilsTest
ValidTurnChannelMessages
)
{
const
uint8_t
kTurnChannelMsgWithRtpPacket
[
]
=
{
0x40
0x00
0x00
0x0C
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
}
;
size_t
content_pos
=
0
content_size
=
0
;
EXPECT_TRUE
(
UnwrapTurnPacket
(
kTurnChannelMsgWithRtpPacket
sizeof
(
kTurnChannelMsgWithRtpPacket
)
&
content_pos
&
content_size
)
)
;
EXPECT_EQ
(
12U
content_size
)
;
EXPECT_EQ
(
4U
content_pos
)
;
}
TEST
(
TurnUtilsTest
ChannelMessageZeroLength
)
{
const
uint8_t
kTurnChannelMsgWithZeroLength
[
]
=
{
0x40
0x00
0x00
0x00
}
;
size_t
content_pos
=
SIZE_MAX
;
size_t
content_size
=
SIZE_MAX
;
EXPECT_TRUE
(
UnwrapTurnPacket
(
kTurnChannelMsgWithZeroLength
sizeof
(
kTurnChannelMsgWithZeroLength
)
&
content_pos
&
content_size
)
)
;
EXPECT_EQ
(
4u
content_pos
)
;
EXPECT_EQ
(
0u
content_size
)
;
}
}
