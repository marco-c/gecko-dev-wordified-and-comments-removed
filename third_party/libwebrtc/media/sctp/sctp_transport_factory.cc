#
include
"
media
/
sctp
/
sctp_transport_factory
.
h
"
#
include
"
api
/
webrtc_key_value_config
.
h
"
#
include
"
rtc_base
/
system
/
unused
.
h
"
#
ifdef
WEBRTC_HAVE_DCSCTP
#
include
"
media
/
sctp
/
dcsctp_transport
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
endif
#
ifdef
WEBRTC_HAVE_USRSCTP
#
include
"
media
/
sctp
/
usrsctp_transport
.
h
"
#
endif
namespace
cricket
{
SctpTransportFactory
:
:
SctpTransportFactory
(
rtc
:
:
Thread
*
network_thread
const
webrtc
:
:
WebRtcKeyValueConfig
&
field_trials
)
:
network_thread_
(
network_thread
)
use_usrsctp_
(
"
Disabled
"
false
)
{
RTC_UNUSED
(
network_thread_
)
;
#
ifdef
WEBRTC_HAVE_DCSCTP
webrtc
:
:
ParseFieldTrial
(
{
&
use_usrsctp_
}
field_trials
.
Lookup
(
"
WebRTC
-
DataChannel
-
Dcsctp
"
)
)
;
#
endif
}
std
:
:
unique_ptr
<
SctpTransportInternal
>
SctpTransportFactory
:
:
CreateSctpTransport
(
rtc
:
:
PacketTransportInternal
*
transport
)
{
std
:
:
unique_ptr
<
SctpTransportInternal
>
result
;
#
ifdef
WEBRTC_HAVE_DCSCTP
if
(
!
use_usrsctp_
.
Get
(
)
)
{
result
=
std
:
:
unique_ptr
<
SctpTransportInternal
>
(
new
webrtc
:
:
DcSctpTransport
(
network_thread_
transport
webrtc
:
:
Clock
:
:
GetRealTimeClock
(
)
)
)
;
}
#
endif
#
ifdef
WEBRTC_HAVE_USRSCTP
if
(
!
result
)
{
result
=
std
:
:
unique_ptr
<
SctpTransportInternal
>
(
new
UsrsctpTransport
(
network_thread_
transport
)
)
;
}
#
endif
return
result
;
}
}
