#
ifndef
MEDIA_SCTP_SCTP_TRANSPORT_INTERNAL_H_
#
define
MEDIA_SCTP_SCTP_TRANSPORT_INTERNAL_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
functional
>
#
include
<
optional
>
#
include
"
api
/
priority
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
sctp_transport_interface
.
h
"
#
include
"
api
/
transport
/
data_channel_transport_interface
.
h
"
#
include
"
p2p
/
dtls
/
dtls_transport_internal
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
namespace
webrtc
{
constexpr
uint16_t
kMaxSctpStreams
=
1024
;
constexpr
uint16_t
kMaxSctpSid
=
kMaxSctpStreams
-
1
;
constexpr
uint16_t
kMinSctpSid
=
0
;
constexpr
uint16_t
kSpecMaxSctpSid
=
65535
;
const
int
kSctpDefaultPort
=
5000
;
enum
class
SctpErrorCauseCode
:
uint16_t
{
kInvalidStreamIdentifier
=
1
kMissingMandatoryParameter
=
2
kStaleCookieError
=
3
kOutOfResource
=
4
kUnresolvableAddress
=
5
kUnrecognizedChunkType
=
6
kInvalidMandatoryParameter
=
7
kUnrecognizedParameters
=
8
kNoUserData
=
9
kCookieReceivedWhileShuttingDown
=
10
kRestartWithNewAddresses
=
11
kUserInitiatedAbort
=
12
kProtocolViolation
=
13
}
;
class
SctpTransportInternal
{
public
:
virtual
~
SctpTransportInternal
(
)
{
}
virtual
void
SetOnConnectedCallback
(
std
:
:
function
<
void
(
)
>
callback
)
=
0
;
virtual
void
SetDataChannelSink
(
DataChannelSink
*
sink
)
=
0
;
virtual
void
SetDtlsTransport
(
DtlsTransportInternal
*
transport
)
=
0
;
virtual
bool
Start
(
const
SctpOptions
&
options
)
=
0
;
[
[
deprecated
(
"
Call
with
SctpOptions
"
)
]
]
virtual
bool
Start
(
int
local_sctp_port
int
remote_sctp_port
int
max_message_size
)
{
return
Start
(
{
.
local_port
=
local_sctp_port
.
remote_port
=
remote_sctp_port
.
max_message_size
=
max_message_size
}
)
;
}
virtual
bool
OpenStream
(
int
sid
PriorityValue
priority
)
=
0
;
virtual
bool
ResetStream
(
int
sid
)
=
0
;
virtual
RTCError
SendData
(
int
sid
const
SendDataParams
&
params
const
CopyOnWriteBuffer
&
payload
)
=
0
;
virtual
bool
ReadyToSendData
(
)
=
0
;
virtual
int
max_message_size
(
)
const
=
0
;
virtual
std
:
:
optional
<
int
>
max_outbound_streams
(
)
const
=
0
;
virtual
std
:
:
optional
<
int
>
max_inbound_streams
(
)
const
=
0
;
virtual
size_t
buffered_amount
(
int
sid
)
const
=
0
;
virtual
size_t
buffered_amount_low_threshold
(
int
sid
)
const
=
0
;
virtual
void
SetBufferedAmountLowThreshold
(
int
sid
size_t
bytes
)
=
0
;
virtual
void
set_debug_name_for_testing
(
const
char
*
debug_name
)
=
0
;
}
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
kMaxSctpSid
;
using
:
:
webrtc
:
:
kMaxSctpStreams
;
using
:
:
webrtc
:
:
kMinSctpSid
;
using
:
:
webrtc
:
:
kSctpDefaultPort
;
using
:
:
webrtc
:
:
kSpecMaxSctpSid
;
using
:
:
webrtc
:
:
SctpErrorCauseCode
;
using
:
:
webrtc
:
:
SctpTransportInternal
;
}
#
endif
