#
ifndef
MEDIA_SCTP_SCTP_TRANSPORT_INTERNAL_H_
#
define
MEDIA_SCTP_SCTP_TRANSPORT_INTERNAL_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
transport
/
data_channel_transport_interface
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
p2p
/
base
/
packet_transport_internal
.
h
"
namespace
cricket
{
constexpr
int
kSctpSendBufferSize
=
256
*
1024
;
constexpr
uint16_t
kMaxSctpStreams
=
1024
;
constexpr
uint16_t
kMaxSctpSid
=
kMaxSctpStreams
-
1
;
constexpr
uint16_t
kMinSctpSid
=
0
;
const
int
kSctpDefaultPort
=
5000
;
enum
class
SctpErrorCauseCode
:
uint16_t
{
kInvalidStreamIdentifier
=
1
kMissingMandatoryParameter
=
2
kStaleCookieError
=
3
kOutOfResource
=
4
kUnresolvableAddress
=
5
kUnrecognizedChunkType
=
6
kInvalidMandatoryParameter
=
7
kUnrecognizedParameters
=
8
kNoUserData
=
9
kCookieReceivedWhileShuttingDown
=
10
kRestartWithNewAddresses
=
11
kUserInitiatedAbort
=
12
kProtocolViolation
=
13
}
;
class
SctpTransportInternal
{
public
:
virtual
~
SctpTransportInternal
(
)
{
}
virtual
void
SetDtlsTransport
(
rtc
:
:
PacketTransportInternal
*
transport
)
=
0
;
virtual
bool
Start
(
int
local_sctp_port
int
remote_sctp_port
int
max_message_size
)
=
0
;
virtual
bool
OpenStream
(
int
sid
)
=
0
;
virtual
bool
ResetStream
(
int
sid
)
=
0
;
virtual
bool
SendData
(
int
sid
const
webrtc
:
:
SendDataParams
&
params
const
rtc
:
:
CopyOnWriteBuffer
&
payload
SendDataResult
*
result
=
nullptr
)
=
0
;
virtual
bool
ReadyToSendData
(
)
=
0
;
virtual
int
max_message_size
(
)
const
=
0
;
virtual
absl
:
:
optional
<
int
>
max_outbound_streams
(
)
const
=
0
;
virtual
absl
:
:
optional
<
int
>
max_inbound_streams
(
)
const
=
0
;
sigslot
:
:
signal0
<
>
SignalReadyToSendData
;
sigslot
:
:
signal0
<
>
SignalAssociationChangeCommunicationUp
;
sigslot
:
:
signal2
<
const
ReceiveDataParams
&
const
rtc
:
:
CopyOnWriteBuffer
&
>
SignalDataReceived
;
sigslot
:
:
signal1
<
int
>
SignalClosingProcedureStartedRemotely
;
sigslot
:
:
signal1
<
int
>
SignalClosingProcedureComplete
;
sigslot
:
:
signal1
<
webrtc
:
:
RTCError
>
SignalClosedAbruptly
;
virtual
void
set_debug_name_for_testing
(
const
char
*
debug_name
)
=
0
;
}
;
}
#
endif
