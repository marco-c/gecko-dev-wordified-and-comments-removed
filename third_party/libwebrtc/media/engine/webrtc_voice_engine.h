#
ifndef
MEDIA_ENGINE_WEBRTC_VOICE_ENGINE_H_
#
define
MEDIA_ENGINE_WEBRTC_VOICE_ENGINE_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
set
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
audio
/
audio_device
.
h
"
#
include
"
api
/
audio
/
audio_frame_processor
.
h
"
#
include
"
api
/
audio
/
audio_mixer
.
h
"
#
include
"
api
/
audio
/
audio_processing
.
h
"
#
include
"
api
/
audio_codecs
/
audio_codec_pair_id
.
h
"
#
include
"
api
/
audio_codecs
/
audio_decoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
api
/
audio_options
.
h
"
#
include
"
api
/
call
/
audio_sink
.
h
"
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
crypto
/
frame_decryptor_interface
.
h
"
#
include
"
api
/
crypto
/
frame_encryptor_interface
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtp_headers
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
rtp_sender_interface
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
transport
/
rtp
/
rtp_source
.
h
"
#
include
"
call
/
audio_send_stream
.
h
"
#
include
"
call
/
audio_state
.
h
"
#
include
"
call
/
call
.
h
"
#
include
"
media
/
base
/
audio_source
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
media
/
base
/
media_channel_impl
.
h
"
#
include
"
media
/
base
/
media_config
.
h
"
#
include
"
media
/
base
/
media_engine
.
h
"
#
include
"
media
/
base
/
stream_params
.
h
"
#
include
"
modules
/
async_audio_processing
/
async_audio_processing
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_header_extension_map
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
network
/
sent_packet
.
h
"
#
include
"
rtc_base
/
network_route
.
h
"
#
include
"
rtc_base
/
system
/
file_wrapper
.
h
"
namespace
webrtc
{
class
AudioFrameProcessor
;
class
WebRtcVoiceEngine
final
:
public
VoiceEngineInterface
{
friend
class
WebRtcVoiceSendChannel
;
friend
class
WebRtcVoiceReceiveChannel
;
public
:
WebRtcVoiceEngine
(
TaskQueueFactory
*
task_queue_factory
AudioDeviceModule
*
adm
const
scoped_refptr
<
AudioEncoderFactory
>
&
encoder_factory
const
scoped_refptr
<
AudioDecoderFactory
>
&
decoder_factory
scoped_refptr
<
AudioMixer
>
audio_mixer
scoped_refptr
<
AudioProcessing
>
audio_processing
std
:
:
unique_ptr
<
AudioFrameProcessor
>
owned_audio_frame_processor
const
FieldTrialsView
&
trials
)
;
WebRtcVoiceEngine
(
)
=
delete
;
WebRtcVoiceEngine
(
const
WebRtcVoiceEngine
&
)
=
delete
;
WebRtcVoiceEngine
&
operator
=
(
const
WebRtcVoiceEngine
&
)
=
delete
;
~
WebRtcVoiceEngine
(
)
override
;
void
Init
(
)
override
;
scoped_refptr
<
AudioState
>
GetAudioState
(
)
const
override
;
std
:
:
unique_ptr
<
VoiceMediaSendChannelInterface
>
CreateSendChannel
(
Call
*
call
const
MediaConfig
&
config
const
AudioOptions
&
options
const
CryptoOptions
&
crypto_options
AudioCodecPairId
codec_pair_id
)
override
;
std
:
:
unique_ptr
<
VoiceMediaReceiveChannelInterface
>
CreateReceiveChannel
(
Call
*
call
const
MediaConfig
&
config
const
AudioOptions
&
options
const
CryptoOptions
&
crypto_options
AudioCodecPairId
codec_pair_id
)
override
;
const
std
:
:
vector
<
Codec
>
&
LegacySendCodecs
(
)
const
override
;
const
std
:
:
vector
<
Codec
>
&
LegacyRecvCodecs
(
)
const
override
;
AudioEncoderFactory
*
encoder_factory
(
)
const
override
{
return
encoder_factory_
.
get
(
)
;
}
AudioDecoderFactory
*
decoder_factory
(
)
const
override
{
return
decoder_factory_
.
get
(
)
;
}
std
:
:
vector
<
RtpHeaderExtensionCapability
>
GetRtpHeaderExtensions
(
)
const
override
;
bool
StartAecDump
(
FileWrapper
file
int64_t
max_size_bytes
)
override
;
void
StopAecDump
(
)
override
;
std
:
:
optional
<
AudioDeviceModule
:
:
Stats
>
GetAudioDeviceStats
(
)
override
;
private
:
void
ApplyOptions
(
const
AudioOptions
&
options
)
;
TaskQueueFactory
*
const
task_queue_factory_
;
std
:
:
unique_ptr
<
TaskQueueBase
TaskQueueDeleter
>
low_priority_worker_queue_
;
AudioDeviceModule
*
adm
(
)
;
AudioProcessing
*
apm
(
)
const
;
AudioState
*
audio_state
(
)
;
SequenceChecker
signal_thread_checker_
{
SequenceChecker
:
:
kDetached
}
;
SequenceChecker
worker_thread_checker_
{
SequenceChecker
:
:
kDetached
}
;
scoped_refptr
<
AudioDeviceModule
>
adm_
;
scoped_refptr
<
AudioEncoderFactory
>
encoder_factory_
;
scoped_refptr
<
AudioDecoderFactory
>
decoder_factory_
;
scoped_refptr
<
AudioMixer
>
audio_mixer_
;
scoped_refptr
<
AudioProcessing
>
apm_
;
std
:
:
unique_ptr
<
AudioFrameProcessor
>
audio_frame_processor_
;
scoped_refptr
<
AudioState
>
audio_state_
;
std
:
:
vector
<
Codec
>
send_codecs_
;
std
:
:
vector
<
Codec
>
recv_codecs_
;
bool
is_dumping_aec_
=
false
;
bool
initialized_
=
false
;
size_t
audio_jitter_buffer_max_packets_
=
200
;
bool
audio_jitter_buffer_fast_accelerate_
=
false
;
int
audio_jitter_buffer_min_delay_ms_
=
0
;
const
bool
minimized_remsampling_on_mobile_trial_enabled_
;
const
bool
payload_types_in_transport_trial_enabled_
;
}
;
class
WebRtcVoiceSendChannel
final
:
public
MediaChannelUtil
public
VoiceMediaSendChannelInterface
{
public
:
WebRtcVoiceSendChannel
(
WebRtcVoiceEngine
*
engine
const
MediaConfig
&
config
const
AudioOptions
&
options
const
CryptoOptions
&
crypto_options
Call
*
call
AudioCodecPairId
codec_pair_id
)
;
WebRtcVoiceSendChannel
(
)
=
delete
;
WebRtcVoiceSendChannel
(
const
WebRtcVoiceSendChannel
&
)
=
delete
;
WebRtcVoiceSendChannel
&
operator
=
(
const
WebRtcVoiceSendChannel
&
)
=
delete
;
~
WebRtcVoiceSendChannel
(
)
override
;
MediaType
media_type
(
)
const
override
{
return
MediaType
:
:
AUDIO
;
}
VideoMediaSendChannelInterface
*
AsVideoSendChannel
(
)
override
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
VoiceMediaSendChannelInterface
*
AsVoiceSendChannel
(
)
override
{
return
this
;
}
std
:
:
optional
<
Codec
>
GetSendCodec
(
)
const
override
;
void
SetInterface
(
MediaChannelNetworkInterface
*
iface
)
override
{
MediaChannelUtil
:
:
SetInterface
(
iface
)
;
}
bool
HasNetworkInterface
(
)
const
override
{
return
MediaChannelUtil
:
:
HasNetworkInterface
(
)
;
}
void
SetExtmapAllowMixed
(
bool
extmap_allow_mixed
)
override
{
MediaChannelUtil
:
:
SetExtmapAllowMixed
(
extmap_allow_mixed
)
;
}
bool
ExtmapAllowMixed
(
)
const
override
{
return
MediaChannelUtil
:
:
ExtmapAllowMixed
(
)
;
}
const
AudioOptions
&
options
(
)
const
{
return
options_
;
}
bool
SetSenderParameters
(
const
AudioSenderParameter
&
params
)
override
;
RtpParameters
GetRtpSendParameters
(
uint32_t
ssrc
)
const
override
;
RTCError
SetRtpSendParameters
(
uint32_t
ssrc
const
RtpParameters
&
parameters
SetParametersCallback
callback
)
override
;
void
SetSend
(
bool
send
)
override
;
bool
SetAudioSend
(
uint32_t
ssrc
bool
enable
const
AudioOptions
*
options
AudioSource
*
source
)
override
;
bool
AddSendStream
(
const
StreamParams
&
sp
)
override
;
bool
RemoveSendStream
(
uint32_t
ssrc
)
override
;
void
SetSsrcListChangedCallback
(
absl
:
:
AnyInvocable
<
void
(
const
std
:
:
set
<
uint32_t
>
&
)
>
callback
)
override
;
void
SetFrameEncryptor
(
uint32_t
ssrc
scoped_refptr
<
FrameEncryptorInterface
>
frame_encryptor
)
override
;
bool
CanInsertDtmf
(
)
override
;
bool
InsertDtmf
(
uint32_t
ssrc
int
event
int
duration
)
override
;
void
OnPacketSent
(
const
SentPacketInfo
&
sent_packet
)
override
;
void
OnNetworkRouteChanged
(
absl
:
:
string_view
transport_name
const
NetworkRoute
&
network_route
)
override
;
void
OnReadyToSend
(
bool
ready
)
override
;
bool
GetStats
(
VoiceMediaSendInfo
*
info
)
override
;
void
SetEncoderToPacketizerFrameTransformer
(
uint32_t
ssrc
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
)
override
;
bool
SenderNackEnabled
(
)
const
override
{
if
(
!
send_codec_spec_
)
{
return
false
;
}
return
send_codec_spec_
-
>
nack_enabled
;
}
bool
SenderNonSenderRttEnabled
(
)
const
override
{
if
(
!
send_codec_spec_
)
{
return
false
;
}
return
send_codec_spec_
-
>
enable_non_sender_rtt
;
}
bool
SendCodecHasNack
(
)
const
override
{
return
SenderNackEnabled
(
)
;
}
void
SetSendCodecChangedCallback
(
absl
:
:
AnyInvocable
<
void
(
)
>
callback
)
override
{
send_codec_changed_callback_
=
std
:
:
move
(
callback
)
;
}
private
:
bool
SetOptions
(
const
AudioOptions
&
options
)
;
bool
SetSendCodecs
(
const
std
:
:
vector
<
Codec
>
&
codecs
std
:
:
optional
<
Codec
>
preferred_codec
)
;
bool
SetLocalSource
(
uint32_t
ssrc
AudioSource
*
source
)
;
bool
MuteStream
(
uint32_t
ssrc
bool
mute
)
;
WebRtcVoiceEngine
*
engine
(
)
{
return
engine_
;
}
bool
SetMaxSendBitrate
(
int
bps
)
;
void
SetupRecording
(
)
;
TaskQueueBase
*
const
worker_thread_
;
ScopedTaskSafety
task_safety_
;
SequenceChecker
network_thread_checker_
{
SequenceChecker
:
:
kDetached
}
;
WebRtcVoiceEngine
*
const
engine_
=
nullptr
;
std
:
:
vector
<
Codec
>
send_codecs_
;
int
max_send_bitrate_bps_
=
0
;
AudioOptions
options_
;
std
:
:
optional
<
int
>
dtmf_payload_type_
;
int
dtmf_payload_freq_
=
-
1
;
bool
enable_non_sender_rtt_
=
false
;
bool
send_
=
false
;
Call
*
const
call_
=
nullptr
;
const
MediaConfig
:
:
Audio
audio_config_
;
class
WebRtcAudioSendStream
;
std
:
:
map
<
uint32_t
WebRtcAudioSendStream
*
>
send_streams_
;
std
:
:
vector
<
RtpExtension
>
send_rtp_extensions_
;
std
:
:
string
mid_
;
RtcpMode
rtcp_mode_
;
std
:
:
optional
<
AudioSendStream
:
:
Config
:
:
SendCodecSpec
>
send_codec_spec_
;
const
AudioCodecPairId
codec_pair_id_
;
const
CryptoOptions
crypto_options_
;
scoped_refptr
<
FrameTransformerInterface
>
unsignaled_frame_transformer_
;
void
FillSendCodecStats
(
VoiceMediaSendInfo
*
voice_media_info
)
;
absl
:
:
AnyInvocable
<
void
(
)
>
send_codec_changed_callback_
;
absl
:
:
AnyInvocable
<
void
(
const
std
:
:
set
<
uint32_t
>
&
)
>
ssrc_list_changed_callback_
;
}
;
class
WebRtcVoiceReceiveChannel
final
:
public
MediaChannelUtil
public
VoiceMediaReceiveChannelInterface
{
public
:
WebRtcVoiceReceiveChannel
(
WebRtcVoiceEngine
*
engine
const
MediaConfig
&
config
const
AudioOptions
&
options
const
CryptoOptions
&
crypto_options
Call
*
call
AudioCodecPairId
codec_pair_id
)
;
WebRtcVoiceReceiveChannel
(
)
=
delete
;
WebRtcVoiceReceiveChannel
(
const
WebRtcVoiceReceiveChannel
&
)
=
delete
;
WebRtcVoiceReceiveChannel
&
operator
=
(
const
WebRtcVoiceReceiveChannel
&
)
=
delete
;
~
WebRtcVoiceReceiveChannel
(
)
override
;
MediaType
media_type
(
)
const
override
{
return
MediaType
:
:
AUDIO
;
}
VideoMediaReceiveChannelInterface
*
AsVideoReceiveChannel
(
)
override
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
VoiceMediaReceiveChannelInterface
*
AsVoiceReceiveChannel
(
)
override
{
return
this
;
}
const
AudioOptions
&
options
(
)
const
{
return
options_
;
}
void
SetInterface
(
MediaChannelNetworkInterface
*
iface
)
override
{
MediaChannelUtil
:
:
SetInterface
(
iface
)
;
}
bool
SetReceiverParameters
(
const
AudioReceiverParameters
&
params
)
override
;
RtpParameters
GetRtpReceiverParameters
(
uint32_t
ssrc
)
const
override
;
RtpParameters
GetDefaultRtpReceiveParameters
(
)
const
override
;
void
SetPlayout
(
bool
playout
)
override
;
bool
AddRecvStream
(
const
StreamParams
&
sp
)
override
;
bool
RemoveRecvStream
(
uint32_t
ssrc
)
override
;
void
ResetUnsignaledRecvStream
(
)
override
;
std
:
:
optional
<
uint32_t
>
GetUnsignaledSsrc
(
)
const
override
;
void
ChooseReceiverReportSsrc
(
const
std
:
:
set
<
uint32_t
>
&
choices
)
override
;
void
OnDemuxerCriteriaUpdatePending
(
)
override
;
void
OnDemuxerCriteriaUpdateComplete
(
)
override
;
void
SetFrameDecryptor
(
uint32_t
ssrc
scoped_refptr
<
FrameDecryptorInterface
>
frame_decryptor
)
override
;
bool
SetOutputVolume
(
uint32_t
ssrc
double
volume
)
override
;
bool
SetDefaultOutputVolume
(
double
volume
)
override
;
bool
SetBaseMinimumPlayoutDelayMs
(
uint32_t
ssrc
int
delay_ms
)
override
;
std
:
:
optional
<
int
>
GetBaseMinimumPlayoutDelayMs
(
uint32_t
ssrc
)
const
override
;
void
OnPacketReceived
(
const
RtpPacketReceived
&
packet
)
override
;
bool
GetStats
(
VoiceMediaReceiveInfo
*
info
bool
get_and_clear_legacy_stats
)
override
;
void
SetRawAudioSink
(
uint32_t
ssrc
std
:
:
unique_ptr
<
AudioSinkInterface
>
sink
)
override
;
void
SetDefaultRawAudioSink
(
std
:
:
unique_ptr
<
AudioSinkInterface
>
sink
)
override
;
std
:
:
vector
<
RtpSource
>
GetSources
(
uint32_t
ssrc
)
const
override
;
void
SetDepacketizerToDecoderFrameTransformer
(
uint32_t
ssrc
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
)
override
;
:
:
webrtc
:
:
RtcpMode
RtcpMode
(
)
const
override
{
return
recv_rtcp_mode_
;
}
void
SetRtcpMode
(
:
:
webrtc
:
:
RtcpMode
mode
)
override
;
void
SetReceiveNackEnabled
(
bool
enabled
)
override
;
void
SetReceiveNonSenderRttEnabled
(
bool
enabled
)
override
;
private
:
bool
SetOptions
(
const
AudioOptions
&
options
)
;
bool
SetRecvCodecs
(
const
std
:
:
vector
<
Codec
>
&
codecs
)
;
bool
SetLocalSource
(
uint32_t
ssrc
AudioSource
*
source
)
;
bool
MuteStream
(
uint32_t
ssrc
bool
mute
)
;
WebRtcVoiceEngine
*
engine
(
)
{
return
engine_
;
}
void
SetupRecording
(
)
;
bool
MaybeCreateDefaultReceiveStream
(
const
RtpPacketReceived
&
packet
)
;
bool
MaybeDeregisterUnsignaledRecvStream
(
uint32_t
ssrc
)
;
TaskQueueBase
*
const
worker_thread_
;
ScopedTaskSafety
task_safety_
;
SequenceChecker
network_thread_checker_
{
SequenceChecker
:
:
kDetached
}
;
WebRtcVoiceEngine
*
const
engine_
=
nullptr
;
std
:
:
map
<
int
SdpAudioFormat
>
decoder_map_
;
std
:
:
vector
<
Codec
>
recv_codecs_
;
AudioOptions
options_
;
bool
recv_nack_enabled_
=
false
;
:
:
webrtc
:
:
RtcpMode
recv_rtcp_mode_
=
RtcpMode
:
:
kCompound
;
bool
enable_non_sender_rtt_
=
false
;
bool
playout_
=
false
;
Call
*
const
call_
=
nullptr
;
const
MediaConfig
:
:
Audio
audio_config_
;
std
:
:
vector
<
uint32_t
>
unsignaled_recv_ssrcs_
;
StreamParams
unsignaled_stream_params_
;
double
default_recv_volume_
=
1
.
0
;
int
default_recv_base_minimum_delay_ms_
=
0
;
std
:
:
unique_ptr
<
AudioSinkInterface
>
default_sink_
;
uint32_t
receiver_reports_ssrc_
=
0xFA17FA17u
;
std
:
:
string
mid_
;
class
WebRtcAudioReceiveStream
;
std
:
:
map
<
uint32_t
WebRtcAudioReceiveStream
*
>
recv_streams_
;
std
:
:
vector
<
RtpExtension
>
recv_rtp_extensions_
;
RtpHeaderExtensionMap
recv_rtp_extension_map_
;
std
:
:
optional
<
AudioSendStream
:
:
Config
:
:
SendCodecSpec
>
send_codec_spec_
;
const
AudioCodecPairId
codec_pair_id_
;
const
CryptoOptions
crypto_options_
;
scoped_refptr
<
FrameDecryptorInterface
>
unsignaled_frame_decryptor_
;
scoped_refptr
<
FrameTransformerInterface
>
unsignaled_frame_transformer_
;
void
FillReceiveCodecStats
(
VoiceMediaReceiveInfo
*
voice_media_info
)
;
}
;
}
#
ifdef
WEBRTC_ALLOW_DEPRECATED_NAMESPACES
namespace
cricket
{
using
:
:
webrtc
:
:
WebRtcVoiceEngine
;
using
:
:
webrtc
:
:
WebRtcVoiceReceiveChannel
;
using
:
:
webrtc
:
:
WebRtcVoiceSendChannel
;
}
#
endif
#
endif
