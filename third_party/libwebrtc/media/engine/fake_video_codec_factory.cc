#
include
"
media
/
engine
/
fake_video_codec_factory
.
h
"
#
include
<
memory
>
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_error_codes
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
test
/
fake_decoder
.
h
"
#
include
"
test
/
fake_encoder
.
h
"
namespace
{
static
const
char
kFakeCodecFactoryCodecName
[
]
=
"
FakeCodec
"
;
}
namespace
webrtc
{
std
:
:
vector
<
SdpVideoFormat
>
FakeVideoEncoderFactory
:
:
GetSupportedFormats
(
)
const
{
return
std
:
:
vector
<
SdpVideoFormat
>
(
1
SdpVideoFormat
(
kFakeCodecFactoryCodecName
)
)
;
}
std
:
:
unique_ptr
<
VideoEncoder
>
FakeVideoEncoderFactory
:
:
Create
(
const
Environment
&
env
const
SdpVideoFormat
&
)
{
return
std
:
:
make_unique
<
test
:
:
FakeEncoder
>
(
env
)
;
}
FakeVideoDecoderFactory
:
:
FakeVideoDecoderFactory
(
)
=
default
;
std
:
:
unique_ptr
<
VideoDecoder
>
FakeVideoDecoderFactory
:
:
CreateVideoDecoder
(
)
{
return
std
:
:
make_unique
<
test
:
:
FakeDecoder
>
(
)
;
}
std
:
:
vector
<
SdpVideoFormat
>
FakeVideoDecoderFactory
:
:
GetSupportedFormats
(
)
const
{
return
std
:
:
vector
<
SdpVideoFormat
>
(
1
SdpVideoFormat
(
kFakeCodecFactoryCodecName
)
)
;
}
std
:
:
unique_ptr
<
VideoDecoder
>
FakeVideoDecoderFactory
:
:
Create
(
const
Environment
&
const
SdpVideoFormat
&
)
{
return
std
:
:
make_unique
<
test
:
:
FakeDecoder
>
(
)
;
}
}
