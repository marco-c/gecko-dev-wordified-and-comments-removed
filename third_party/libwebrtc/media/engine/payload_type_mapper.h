#
ifndef
MEDIA_ENGINE_PAYLOAD_TYPE_MAPPER_H_
#
define
MEDIA_ENGINE_PAYLOAD_TYPE_MAPPER_H_
#
include
<
map
>
#
include
<
set
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
namespace
cricket
{
webrtc
:
:
SdpAudioFormat
AudioCodecToSdpAudioFormat
(
const
Codec
&
ac
)
;
class
PayloadTypeMapper
{
public
:
PayloadTypeMapper
(
)
;
~
PayloadTypeMapper
(
)
;
absl
:
:
optional
<
int
>
GetMappingFor
(
const
webrtc
:
:
SdpAudioFormat
&
format
)
;
absl
:
:
optional
<
int
>
FindMappingFor
(
const
webrtc
:
:
SdpAudioFormat
&
format
)
const
;
absl
:
:
optional
<
Codec
>
ToAudioCodec
(
const
webrtc
:
:
SdpAudioFormat
&
format
)
;
private
:
struct
SdpAudioFormatOrdering
{
bool
operator
(
)
(
const
webrtc
:
:
SdpAudioFormat
&
a
const
webrtc
:
:
SdpAudioFormat
&
b
)
const
;
}
;
int
next_unused_payload_type_
;
int
max_payload_type_
;
std
:
:
map
<
webrtc
:
:
SdpAudioFormat
int
SdpAudioFormatOrdering
>
mappings_
;
std
:
:
set
<
int
>
used_payload_types_
;
}
;
}
#
endif
