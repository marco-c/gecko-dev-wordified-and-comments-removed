#
ifndef
MEDIA_ENGINE_NULL_WEBRTC_VIDEO_ENGINE_H_
#
define
MEDIA_ENGINE_NULL_WEBRTC_VIDEO_ENGINE_H_
#
include
<
vector
>
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
media
/
base
/
media_engine
.
h
"
namespace
webrtc
{
class
Call
;
}
namespace
cricket
{
class
VideoMediaChannel
;
class
NullWebRtcVideoEngine
:
public
VideoEngineInterface
{
public
:
std
:
:
vector
<
VideoCodec
>
send_codecs
(
bool
)
const
override
{
return
std
:
:
vector
<
VideoCodec
>
(
)
;
}
std
:
:
vector
<
VideoCodec
>
recv_codecs
(
bool
)
const
override
{
return
std
:
:
vector
<
VideoCodec
>
(
)
;
}
std
:
:
vector
<
VideoCodec
>
send_codecs
(
)
const
override
{
return
std
:
:
vector
<
VideoCodec
>
(
)
;
}
std
:
:
vector
<
VideoCodec
>
recv_codecs
(
)
const
override
{
return
std
:
:
vector
<
VideoCodec
>
(
)
;
}
std
:
:
vector
<
webrtc
:
:
RtpHeaderExtensionCapability
>
GetRtpHeaderExtensions
(
)
const
override
{
return
{
}
;
}
VideoMediaChannel
*
CreateMediaChannel
(
webrtc
:
:
Call
*
call
const
MediaConfig
&
config
const
VideoOptions
&
options
const
webrtc
:
:
CryptoOptions
&
crypto_options
webrtc
:
:
VideoBitrateAllocatorFactory
*
video_bitrate_allocator_factory
)
override
{
return
nullptr
;
}
}
;
}
#
endif
