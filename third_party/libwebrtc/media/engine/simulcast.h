#
ifndef
MEDIA_ENGINE_SIMULCAST_H_
#
define
MEDIA_ENGINE_SIMULCAST_H_
#
include
<
stddef
.
h
>
#
include
<
vector
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_config
.
h
"
namespace
cricket
{
webrtc
:
:
DataRate
GetTotalMaxBitrate
(
const
std
:
:
vector
<
webrtc
:
:
VideoStream
>
&
streams
)
;
void
BoostMaxSimulcastLayer
(
webrtc
:
:
DataRate
max_bitrate
std
:
:
vector
<
webrtc
:
:
VideoStream
>
*
layers
)
;
int
NormalizeSimulcastSize
(
int
size
size_t
simulcast_layers
)
;
std
:
:
vector
<
webrtc
:
:
VideoStream
>
GetSimulcastConfig
(
size_t
min_layers
size_t
max_layers
int
width
int
height
double
bitrate_priority
int
max_qp
bool
is_screenshare_with_conference_mode
bool
temporal_layers_supported
const
webrtc
:
:
FieldTrialsView
&
trials
)
;
std
:
:
vector
<
webrtc
:
:
VideoStream
>
GetNormalSimulcastLayers
(
size_t
max_layers
int
width
int
height
double
bitrate_priority
int
max_qp
bool
temporal_layers_supported
bool
base_heavy_tl3_rate_alloc
const
webrtc
:
:
FieldTrialsView
&
trials
)
;
std
:
:
vector
<
webrtc
:
:
VideoStream
>
GetScreenshareLayers
(
size_t
max_layers
int
width
int
height
double
bitrate_priority
int
max_qp
bool
temporal_layers_supported
bool
base_heavy_tl3_rate_alloc
const
webrtc
:
:
FieldTrialsView
&
trials
)
;
}
#
endif
