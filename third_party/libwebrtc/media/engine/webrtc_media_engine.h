#
ifndef
MEDIA_ENGINE_WEBRTC_MEDIA_ENGINE_H_
#
define
MEDIA_ENGINE_WEBRTC_MEDIA_ENGINE_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
audio
/
audio_mixer
.
h
"
#
include
"
api
/
audio_codecs
/
audio_decoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder_factory
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
transport
/
bitrate_settings
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
media_engine
.
h
"
#
include
"
modules
/
audio_device
/
include
/
audio_device
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
cricket
{
struct
MediaEngineDependencies
{
MediaEngineDependencies
(
)
=
default
;
MediaEngineDependencies
(
const
MediaEngineDependencies
&
)
=
delete
;
MediaEngineDependencies
(
MediaEngineDependencies
&
&
)
=
default
;
MediaEngineDependencies
&
operator
=
(
const
MediaEngineDependencies
&
)
=
delete
;
MediaEngineDependencies
&
operator
=
(
MediaEngineDependencies
&
&
)
=
default
;
~
MediaEngineDependencies
(
)
=
default
;
webrtc
:
:
TaskQueueFactory
*
task_queue_factory
=
nullptr
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioDeviceModule
>
adm
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioEncoderFactory
>
audio_encoder_factory
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioDecoderFactory
>
audio_decoder_factory
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioMixer
>
audio_mixer
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioProcessing
>
audio_processing
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoderFactory
>
video_encoder_factory
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoDecoderFactory
>
video_decoder_factory
;
}
;
RTC_EXPORT
std
:
:
unique_ptr
<
MediaEngineInterface
>
CreateMediaEngine
(
MediaEngineDependencies
dependencies
)
;
bool
ValidateRtpExtensions
(
const
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
&
extensions
)
;
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
FilterRtpExtensions
(
const
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
&
extensions
bool
(
*
supported
)
(
absl
:
:
string_view
)
bool
filter_redundant_extensions
)
;
webrtc
:
:
BitrateConstraints
GetBitrateConfigForCodec
(
const
Codec
&
codec
)
;
}
#
endif
