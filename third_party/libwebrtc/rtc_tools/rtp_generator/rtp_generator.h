#
ifndef
RTC_TOOLS_RTP_GENERATOR_RTP_GENERATOR_H_
#
define
RTC_TOOLS_RTP_GENERATOR_RTP_GENERATOR_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
call
/
transport
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
video
/
builtin_video_bitrate_allocator_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
call
/
call
.
h
"
#
include
"
call
/
rtp_config
.
h
"
#
include
"
call
/
video_send_stream
.
h
"
#
include
"
media
/
engine
/
webrtc_video_engine
.
h
"
#
include
"
test
/
frame_generator_capturer
.
h
"
#
include
"
test
/
rtp_file_reader
.
h
"
#
include
"
test
/
rtp_file_writer
.
h
"
#
include
"
video
/
config
/
video_encoder_config
.
h
"
namespace
webrtc
{
struct
RtpGeneratorOptions
{
struct
VideoSendStreamConfig
{
int
duration_ms
=
10000
;
int
video_width
=
640
;
int
video_height
=
480
;
int
video_fps
=
24
;
int
num_squares
=
128
;
RtpConfig
rtp
;
}
;
std
:
:
vector
<
VideoSendStreamConfig
>
video_streams
;
}
;
absl
:
:
optional
<
RtpGeneratorOptions
>
ParseRtpGeneratorOptionsFromFile
(
const
std
:
:
string
&
options_file
)
;
class
RtpGenerator
final
:
public
webrtc
:
:
Transport
{
public
:
explicit
RtpGenerator
(
const
RtpGeneratorOptions
&
options
)
;
RtpGenerator
(
)
=
delete
;
RtpGenerator
(
const
RtpGenerator
&
)
=
delete
;
RtpGenerator
&
operator
=
(
const
RtpGenerator
&
)
=
delete
;
~
RtpGenerator
(
)
override
;
void
GenerateRtpDump
(
const
std
:
:
string
&
rtp_dump_path
)
;
private
:
bool
SendRtp
(
rtc
:
:
ArrayView
<
const
uint8_t
>
packet
const
webrtc
:
:
PacketOptions
&
options
)
override
;
bool
SendRtcp
(
rtc
:
:
ArrayView
<
const
uint8_t
>
packet
)
override
;
int
GetMaxDuration
(
)
const
;
void
WaitUntilAllVideoStreamsFinish
(
)
;
test
:
:
RtpPacket
DataToRtpPacket
(
const
uint8_t
*
packet
size_t
packet_len
)
;
const
RtpGeneratorOptions
options_
;
std
:
:
unique_ptr
<
VideoEncoderFactory
>
video_encoder_factory_
;
std
:
:
unique_ptr
<
VideoDecoderFactory
>
video_decoder_factory_
;
std
:
:
unique_ptr
<
VideoBitrateAllocatorFactory
>
video_bitrate_allocator_factory_
;
std
:
:
unique_ptr
<
RtcEventLog
>
event_log_
;
std
:
:
unique_ptr
<
Call
>
call_
;
std
:
:
unique_ptr
<
test
:
:
RtpFileWriter
>
rtp_dump_writer_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
test
:
:
FrameGeneratorCapturer
>
>
frame_generators_
;
std
:
:
vector
<
VideoSendStream
*
>
video_send_streams_
;
std
:
:
vector
<
uint32_t
>
durations_ms_
;
uint32_t
start_ms_
=
0
;
std
:
:
unique_ptr
<
TaskQueueFactory
>
task_queue_
;
}
;
}
#
endif
