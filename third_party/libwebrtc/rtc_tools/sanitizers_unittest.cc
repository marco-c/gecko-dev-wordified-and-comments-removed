#
include
<
stddef
.
h
>
#
include
<
stdio
.
h
>
#
include
<
memory
>
#
include
<
random
>
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
null_socket_server
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
rtc
{
namespace
{
#
if
defined
(
MEMORY_SANITIZER
)
void
UseOfUninitializedValue
(
)
{
int
*
buf
=
new
int
[
2
]
;
std
:
:
random_device
engine
;
if
(
buf
[
engine
(
)
%
2
]
)
{
printf
(
"
Externally
visible
action
.
"
)
;
}
delete
[
]
buf
;
}
TEST
(
SanitizersDeathTest
MemorySanitizer
)
{
EXPECT_DEATH
(
UseOfUninitializedValue
(
)
"
use
-
of
-
uninitialized
-
value
"
)
;
}
#
endif
#
if
defined
(
ADDRESS_SANITIZER
)
void
HeapUseAfterFree
(
)
{
char
*
buf
=
new
char
[
2
]
;
delete
[
]
buf
;
buf
[
0
]
=
buf
[
1
]
;
}
TEST
(
SanitizersDeathTest
AddressSanitizer
)
{
EXPECT_DEATH
(
HeapUseAfterFree
(
)
"
heap
-
use
-
after
-
free
"
)
;
}
#
endif
#
if
defined
(
UNDEFINED_SANITIZER
)
void
SignedIntegerOverflow
(
)
{
int32_t
x
=
1234567890
;
x
*
=
2
;
(
void
)
x
;
}
struct
Base
{
virtual
void
f
(
)
{
}
virtual
~
Base
(
)
{
}
}
;
struct
Derived
:
public
Base
{
}
;
void
InvalidVptr
(
)
{
Base
b
;
auto
*
d
=
static_cast
<
Derived
*
>
(
&
b
)
;
d
-
>
f
(
)
;
}
TEST
(
SanitizersDeathTest
UndefinedSanitizer
)
{
EXPECT_DEATH
(
{
SignedIntegerOverflow
(
)
;
InvalidVptr
(
)
;
}
"
runtime
error
"
)
;
}
#
endif
#
if
defined
(
THREAD_SANITIZER
)
class
IncrementThread
:
public
Thread
{
public
:
explicit
IncrementThread
(
int
*
value
)
:
Thread
(
std
:
:
make_unique
<
NullSocketServer
>
(
)
)
value_
(
value
)
{
}
void
Run
(
)
override
{
+
+
*
value_
;
Thread
:
:
Current
(
)
-
>
SleepMs
(
100
)
;
}
void
Join
(
)
{
Thread
:
:
Join
(
)
;
}
private
:
int
*
value_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
IncrementThread
)
;
}
;
void
DataRace
(
)
{
int
value
=
0
;
IncrementThread
thread1
(
&
value
)
;
IncrementThread
thread2
(
&
value
)
;
thread1
.
Start
(
)
;
thread2
.
Start
(
)
;
thread1
.
Join
(
)
;
thread2
.
Join
(
)
;
RTC_CHECK_NOTREACHED
(
)
;
}
TEST
(
SanitizersDeathTest
ThreadSanitizer
)
{
EXPECT_DEATH
(
DataRace
(
)
"
data
race
"
)
;
}
#
endif
}
}
