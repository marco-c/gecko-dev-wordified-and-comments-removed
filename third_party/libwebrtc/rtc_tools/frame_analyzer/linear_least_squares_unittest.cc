#
include
"
rtc_tools
/
frame_analyzer
/
linear_least_squares
.
h
"
#
include
<
cstdint
>
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
test
{
TEST
(
LinearLeastSquares
ScalarIdentityOneObservation
)
{
IncrementalLinearLeastSquares
lls
;
lls
.
AddObservations
(
{
{
1
}
}
{
{
1
}
}
)
;
EXPECT_EQ
(
std
:
:
vector
<
std
:
:
vector
<
double
>
>
(
{
{
1
.
0
}
}
)
lls
.
GetBestSolution
(
)
)
;
}
TEST
(
LinearLeastSquares
ScalarIdentityTwoObservationsOneCall
)
{
IncrementalLinearLeastSquares
lls
;
lls
.
AddObservations
(
{
{
1
2
}
}
{
{
1
2
}
}
)
;
EXPECT_EQ
(
std
:
:
vector
<
std
:
:
vector
<
double
>
>
(
{
{
1
.
0
}
}
)
lls
.
GetBestSolution
(
)
)
;
}
TEST
(
LinearLeastSquares
ScalarIdentityTwoObservationsTwoCalls
)
{
IncrementalLinearLeastSquares
lls
;
lls
.
AddObservations
(
{
{
1
}
}
{
{
1
}
}
)
;
lls
.
AddObservations
(
{
{
2
}
}
{
{
2
}
}
)
;
EXPECT_EQ
(
std
:
:
vector
<
std
:
:
vector
<
double
>
>
(
{
{
1
.
0
}
}
)
lls
.
GetBestSolution
(
)
)
;
}
TEST
(
LinearLeastSquares
MatrixIdentityOneObservation
)
{
IncrementalLinearLeastSquares
lls
;
lls
.
AddObservations
(
{
{
1
2
}
{
3
4
}
}
{
{
1
2
}
{
3
4
}
}
)
;
EXPECT_EQ
(
std
:
:
vector
<
std
:
:
vector
<
double
>
>
(
{
{
1
.
0
0
.
0
}
{
0
.
0
1
.
0
}
}
)
lls
.
GetBestSolution
(
)
)
;
}
TEST
(
LinearLeastSquares
MatrixManyObservations
)
{
IncrementalLinearLeastSquares
lls
;
lls
.
AddObservations
(
{
{
1
}
{
2
}
}
{
{
5
}
{
11
}
}
)
;
lls
.
AddObservations
(
{
{
3
}
{
4
}
}
{
{
11
}
{
25
}
}
)
;
lls
.
AddObservations
(
{
{
5
}
{
6
}
}
{
{
17
}
{
39
}
}
)
;
const
std
:
:
vector
<
std
:
:
vector
<
double
>
>
result
=
lls
.
GetBestSolution
(
)
;
EXPECT_DOUBLE_EQ
(
1
.
0
result
[
0
]
[
0
]
)
;
EXPECT_DOUBLE_EQ
(
2
.
0
result
[
0
]
[
1
]
)
;
EXPECT_DOUBLE_EQ
(
3
.
0
result
[
1
]
[
0
]
)
;
EXPECT_DOUBLE_EQ
(
4
.
0
result
[
1
]
[
1
]
)
;
}
TEST
(
LinearLeastSquares
MatrixVectorOneObservation
)
{
IncrementalLinearLeastSquares
lls
;
lls
.
AddObservations
(
{
{
1
3
5
}
{
2
4
6
}
}
{
{
5
11
17
}
}
)
;
const
std
:
:
vector
<
std
:
:
vector
<
double
>
>
result
=
lls
.
GetBestSolution
(
)
;
EXPECT_DOUBLE_EQ
(
1
.
0
result
[
0
]
[
0
]
)
;
EXPECT_DOUBLE_EQ
(
2
.
0
result
[
0
]
[
1
]
)
;
}
TEST
(
LinearLeastSquares
LinearLeastSquaresNonPerfectSolution
)
{
IncrementalLinearLeastSquares
lls
;
lls
.
AddObservations
(
{
{
1
2
3
2
1
}
}
{
{
21
39
60
41
19
}
}
)
;
EXPECT_DOUBLE_EQ
(
20
.
0
lls
.
GetBestSolution
(
)
[
0
]
[
0
]
)
;
}
}
}
