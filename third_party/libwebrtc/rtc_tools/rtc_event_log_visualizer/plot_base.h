#
ifndef
RTC_TOOLS_RTC_EVENT_LOG_VISUALIZER_PLOT_BASE_H_
#
define
RTC_TOOLS_RTC_EVENT_LOG_VISUALIZER_PLOT_BASE_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
rtc_base
/
ignore_wundef
.
h
"
RTC_PUSH_IGNORING_WUNDEF
(
)
#
include
"
rtc_tools
/
rtc_event_log_visualizer
/
proto
/
chart
.
pb
.
h
"
RTC_POP_IGNORING_WUNDEF
(
)
namespace
webrtc
{
enum
class
LineStyle
{
kNone
kLine
kStep
kBar
}
;
enum
class
PointStyle
{
kNone
kHighlight
}
;
struct
TimeSeriesPoint
{
TimeSeriesPoint
(
float
x
float
y
)
:
x
(
x
)
y
(
y
)
{
}
float
x
;
float
y
;
}
;
struct
TimeSeries
{
TimeSeries
(
)
=
default
;
TimeSeries
(
const
char
*
label
LineStyle
line_style
PointStyle
point_style
=
PointStyle
:
:
kNone
)
:
label
(
label
)
line_style
(
line_style
)
point_style
(
point_style
)
{
}
TimeSeries
(
const
std
:
:
string
&
label
LineStyle
line_style
PointStyle
point_style
=
PointStyle
:
:
kNone
)
:
label
(
label
)
line_style
(
line_style
)
point_style
(
point_style
)
{
}
TimeSeries
(
TimeSeries
&
&
other
)
:
label
(
std
:
:
move
(
other
.
label
)
)
line_style
(
other
.
line_style
)
point_style
(
other
.
point_style
)
points
(
std
:
:
move
(
other
.
points
)
)
{
}
TimeSeries
&
operator
=
(
TimeSeries
&
&
other
)
{
label
=
std
:
:
move
(
other
.
label
)
;
line_style
=
other
.
line_style
;
point_style
=
other
.
point_style
;
points
=
std
:
:
move
(
other
.
points
)
;
return
*
this
;
}
std
:
:
string
label
;
LineStyle
line_style
=
LineStyle
:
:
kLine
;
PointStyle
point_style
=
PointStyle
:
:
kNone
;
std
:
:
vector
<
TimeSeriesPoint
>
points
;
}
;
struct
Interval
{
Interval
(
)
=
default
;
Interval
(
double
begin
double
end
)
:
begin
(
begin
)
end
(
end
)
{
}
double
begin
;
double
end
;
}
;
struct
IntervalSeries
{
enum
Orientation
{
kHorizontal
kVertical
}
;
IntervalSeries
(
)
=
default
;
IntervalSeries
(
const
std
:
:
string
&
label
const
std
:
:
string
&
color
IntervalSeries
:
:
Orientation
orientation
)
:
label
(
label
)
color
(
color
)
orientation
(
orientation
)
{
}
std
:
:
string
label
;
std
:
:
string
color
;
Orientation
orientation
;
std
:
:
vector
<
Interval
>
intervals
;
}
;
class
Plot
{
public
:
virtual
~
Plot
(
)
{
}
ABSL_DEPRECATED
(
"
Use
PrintPythonCode
(
)
or
ExportProtobuf
(
)
instead
.
"
)
virtual
void
Draw
(
)
{
}
void
SetXAxis
(
float
min_value
float
max_value
std
:
:
string
label
float
left_margin
=
0
float
right_margin
=
0
)
;
void
SetSuggestedXAxis
(
float
min_value
float
max_value
std
:
:
string
label
float
left_margin
=
0
float
right_margin
=
0
)
;
void
SetYAxis
(
float
min_value
float
max_value
std
:
:
string
label
float
bottom_margin
=
0
float
top_margin
=
0
)
;
void
SetSuggestedYAxis
(
float
min_value
float
max_value
std
:
:
string
label
float
bottom_margin
=
0
float
top_margin
=
0
)
;
void
SetYAxisTickLabels
(
const
std
:
:
vector
<
std
:
:
pair
<
float
std
:
:
string
>
>
&
labels
)
;
void
SetTitle
(
const
std
:
:
string
&
title
)
;
void
SetId
(
const
std
:
:
string
&
id
)
;
void
AppendTimeSeries
(
TimeSeries
&
&
time_series
)
;
void
AppendIntervalSeries
(
IntervalSeries
&
&
interval_series
)
;
void
AppendTimeSeriesIfNotEmpty
(
TimeSeries
&
&
time_series
)
;
void
PrintPythonCode
(
absl
:
:
string_view
figure_output_path
=
absl
:
:
string_view
(
)
)
const
;
void
ExportProtobuf
(
webrtc
:
:
analytics
:
:
Chart
*
chart
)
const
;
protected
:
float
xaxis_min_
;
float
xaxis_max_
;
std
:
:
string
xaxis_label_
;
float
yaxis_min_
;
float
yaxis_max_
;
std
:
:
string
yaxis_label_
;
std
:
:
vector
<
std
:
:
pair
<
float
std
:
:
string
>
>
yaxis_tick_labels_
;
std
:
:
string
title_
;
std
:
:
string
id_
;
std
:
:
vector
<
TimeSeries
>
series_list_
;
std
:
:
vector
<
IntervalSeries
>
interval_list_
;
}
;
class
PlotCollection
{
public
:
virtual
~
PlotCollection
(
)
{
}
ABSL_DEPRECATED
(
"
Use
PrintPythonCode
(
)
or
ExportProtobuf
(
)
instead
.
"
)
virtual
void
Draw
(
)
{
}
virtual
Plot
*
AppendNewPlot
(
)
;
void
SetCallTimeToUtcOffsetMs
(
int64_t
calltime_to_utc_ms
)
{
calltime_to_utc_ms_
=
calltime_to_utc_ms
;
}
void
PrintPythonCode
(
bool
shared_xaxis
absl
:
:
string_view
figure_output_path
=
absl
:
:
string_view
(
)
)
const
;
void
ExportProtobuf
(
webrtc
:
:
analytics
:
:
ChartCollection
*
collection
)
const
;
protected
:
std
:
:
vector
<
std
:
:
unique_ptr
<
Plot
>
>
plots_
;
absl
:
:
optional
<
int64_t
>
calltime_to_utc_ms_
;
}
;
}
#
endif
