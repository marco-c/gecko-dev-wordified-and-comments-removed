#
ifndef
RTC_TOOLS_DATA_CHANNEL_BENCHMARK_PEER_CONNECTION_CLIENT_H_
#
define
RTC_TOOLS_DATA_CHANNEL_BENCHMARK_PEER_CONNECTION_CLIENT_H_
#
include
<
stdint
.
h
>
#
include
<
functional
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
data_channel_interface
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
jsep
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_tools
/
data_channel_benchmark
/
signaling_interface
.
h
"
namespace
webrtc
{
class
PeerConnectionClient
:
public
PeerConnectionObserver
{
public
:
explicit
PeerConnectionClient
(
PeerConnectionFactoryInterface
*
factory
SignalingInterface
*
signaling
)
;
~
PeerConnectionClient
(
)
override
;
PeerConnectionClient
(
const
PeerConnectionClient
&
)
=
delete
;
PeerConnectionClient
&
operator
=
(
const
PeerConnectionClient
&
)
=
delete
;
bool
StartPeerConnection
(
)
;
bool
IsConnected
(
)
;
void
Disconnect
(
)
;
scoped_refptr
<
PeerConnectionInterface
>
peerConnection
(
)
{
return
peer_connection_
;
}
void
SetOnDataChannel
(
std
:
:
function
<
void
(
scoped_refptr
<
DataChannelInterface
>
)
>
callback
)
;
std
:
:
vector
<
scoped_refptr
<
DataChannelInterface
>
>
&
dataChannels
(
)
{
return
data_channels_
;
}
static
scoped_refptr
<
PeerConnectionFactoryInterface
>
CreateDefaultFactory
(
Thread
*
signaling_thread
std
:
:
unique_ptr
<
FieldTrialsView
>
field_trials
)
;
private
:
void
AddIceCandidate
(
std
:
:
unique_ptr
<
IceCandidate
>
candidate
)
;
bool
SetRemoteDescription
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
)
;
bool
InitializePeerConnection
(
PeerConnectionFactoryInterface
*
factory
)
;
void
DeletePeerConnection
(
)
;
void
OnSignalingChange
(
PeerConnectionInterface
:
:
SignalingState
new_state
)
override
{
RTC_LOG
(
LS_INFO
)
<
<
__FUNCTION__
<
<
"
new
state
:
"
<
<
new_state
;
}
void
OnDataChannel
(
scoped_refptr
<
DataChannelInterface
>
channel
)
override
;
void
OnNegotiationNeededEvent
(
uint32_t
event_id
)
override
;
void
OnIceConnectionChange
(
PeerConnectionInterface
:
:
IceConnectionState
new_state
)
override
;
void
OnIceGatheringChange
(
PeerConnectionInterface
:
:
IceGatheringState
new_state
)
override
;
void
OnIceCandidate
(
const
IceCandidate
*
candidate
)
override
;
void
OnIceConnectionReceivingChange
(
bool
receiving
)
override
{
RTC_LOG
(
LS_INFO
)
<
<
__FUNCTION__
<
<
"
receiving
?
"
<
<
receiving
;
}
scoped_refptr
<
PeerConnectionInterface
>
peer_connection_
;
std
:
:
function
<
void
(
scoped_refptr
<
DataChannelInterface
>
)
>
on_data_channel_callback_
;
std
:
:
vector
<
scoped_refptr
<
DataChannelInterface
>
>
data_channels_
;
SignalingInterface
*
signaling_
;
}
;
}
#
endif
