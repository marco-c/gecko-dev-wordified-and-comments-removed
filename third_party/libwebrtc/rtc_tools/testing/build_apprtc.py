"
"
"
Builds
the
AppRTC
collider
using
the
golang
toolchain
.
The
golang
toolchain
is
downloaded
by
download_apprtc
.
py
.
We
use
that
here
to
build
the
AppRTC
collider
server
.
This
script
needs
to
know
the
path
to
the
'
src
'
directory
in
apprtc
the
root
directory
of
'
go
'
and
the
output_dir
.
"
"
"
import
fileinput
import
os
import
shutil
import
subprocess
import
sys
import
utils
USAGE_STR
=
"
Usage
:
{
}
<
apprtc_dir
>
<
go_dir
>
<
output_dir
>
"
def
_ConfigureApprtcServerToDeveloperMode
(
app_yaml_path
)
:
  
for
line
in
fileinput
.
input
(
app_yaml_path
inplace
=
True
)
:
    
line
=
line
.
replace
(
'
BYPASS_JOIN_CONFIRMATION
:
false
'
                        
'
BYPASS_JOIN_CONFIRMATION
:
true
'
)
    
sys
.
stdout
.
write
(
line
)
def
main
(
argv
)
:
  
if
len
(
argv
)
!
=
4
:
    
print
(
USAGE_STR
.
format
(
argv
[
0
]
)
)
  
apprtc_dir
=
os
.
path
.
abspath
(
argv
[
1
]
)
  
go_root_dir
=
os
.
path
.
abspath
(
argv
[
2
]
)
  
golang_workspace
=
os
.
path
.
abspath
(
argv
[
3
]
)
  
app_yaml_path
=
os
.
path
.
join
(
apprtc_dir
'
out
'
'
app_engine
'
'
app
.
yaml
'
)
  
_ConfigureApprtcServerToDeveloperMode
(
app_yaml_path
)
  
utils
.
RemoveDirectory
(
golang_workspace
)
  
collider_dir
=
os
.
path
.
join
(
apprtc_dir
'
src
'
'
collider
'
)
  
shutil
.
copytree
(
collider_dir
os
.
path
.
join
(
golang_workspace
'
src
'
)
)
  
golang_path
=
os
.
path
.
join
(
go_root_dir
'
bin
'
                             
'
go
'
+
utils
.
GetExecutableExtension
(
)
)
  
golang_env
=
os
.
environ
.
copy
(
)
  
golang_env
[
'
GOROOT
'
]
=
go_root_dir
  
golang_env
[
'
GOPATH
'
]
=
golang_workspace
  
golang_env
[
'
GO111MODULE
'
]
=
'
off
'
  
collider_out
=
os
.
path
.
join
(
golang_workspace
                              
'
collidermain
'
+
utils
.
GetExecutableExtension
(
)
)
  
subprocess
.
check_call
(
      
[
golang_path
'
build
'
'
-
o
'
collider_out
'
collidermain
'
]
      
env
=
golang_env
)
if
__name__
=
=
'
__main__
'
:
  
sys
.
exit
(
main
(
sys
.
argv
)
)
