#
include
"
rtc_base
/
ssl_adapter
.
h
"
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
test
/
rtc_error_matchers
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
rtc_base
/
ip_address
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_identity
.
h
"
#
include
"
rtc_base
/
ssl_stream_adapter
.
h
"
#
include
"
rtc_base
/
string_encode
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
virtual_socket_server
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
wait_until
.
h
"
using
:
:
testing
:
:
_
;
using
:
:
testing
:
:
Return
;
static
const
webrtc
:
:
TimeDelta
kTimeout
=
webrtc
:
:
TimeDelta
:
:
Millis
(
5000
)
;
static
webrtc
:
:
Socket
*
CreateSocket
(
)
{
webrtc
:
:
SocketAddress
address
(
webrtc
:
:
IPAddress
(
INADDR_ANY
)
0
)
;
webrtc
:
:
Socket
*
socket
=
webrtc
:
:
Thread
:
:
Current
(
)
-
>
socketserver
(
)
-
>
CreateSocket
(
address
.
family
(
)
SOCK_STREAM
)
;
socket
-
>
Bind
(
address
)
;
return
socket
;
}
class
MockCertVerifier
:
public
rtc
:
:
SSLCertificateVerifier
{
public
:
virtual
~
MockCertVerifier
(
)
=
default
;
MOCK_METHOD
(
bool
Verify
(
const
rtc
:
:
SSLCertificate
&
)
(
override
)
)
;
}
;
class
SSLAdapterTestDummy
:
public
sigslot
:
:
has_slots
<
>
{
public
:
explicit
SSLAdapterTestDummy
(
)
:
socket_
(
CreateSocket
(
)
)
{
}
virtual
~
SSLAdapterTestDummy
(
)
=
default
;
void
CreateSSLAdapter
(
webrtc
:
:
Socket
*
socket
webrtc
:
:
SSLRole
role
)
{
ssl_adapter_
.
reset
(
rtc
:
:
SSLAdapter
:
:
Create
(
socket
)
)
;
ssl_adapter_
-
>
SetIgnoreBadCert
(
true
)
;
ssl_adapter_
-
>
SignalReadEvent
.
connect
(
this
&
SSLAdapterTestDummy
:
:
OnSSLAdapterReadEvent
)
;
ssl_adapter_
-
>
SignalCloseEvent
.
connect
(
this
&
SSLAdapterTestDummy
:
:
OnSSLAdapterCloseEvent
)
;
ssl_adapter_
-
>
SetRole
(
role
)
;
}
void
SetIgnoreBadCert
(
bool
ignore_bad_cert
)
{
ssl_adapter_
-
>
SetIgnoreBadCert
(
ignore_bad_cert
)
;
}
void
SetCertVerifier
(
rtc
:
:
SSLCertificateVerifier
*
ssl_cert_verifier
)
{
ssl_adapter_
-
>
SetCertVerifier
(
ssl_cert_verifier
)
;
}
void
SetAlpnProtocols
(
const
std
:
:
vector
<
std
:
:
string
>
&
protos
)
{
ssl_adapter_
-
>
SetAlpnProtocols
(
protos
)
;
}
void
SetEllipticCurves
(
const
std
:
:
vector
<
std
:
:
string
>
&
curves
)
{
ssl_adapter_
-
>
SetEllipticCurves
(
curves
)
;
}
webrtc
:
:
SocketAddress
GetAddress
(
)
const
{
return
ssl_adapter_
-
>
GetLocalAddress
(
)
;
}
webrtc
:
:
Socket
:
:
ConnState
GetState
(
)
const
{
return
ssl_adapter_
-
>
GetState
(
)
;
}
const
std
:
:
string
&
GetReceivedData
(
)
const
{
return
data_
;
}
int
Close
(
)
{
return
ssl_adapter_
-
>
Close
(
)
;
}
int
Send
(
absl
:
:
string_view
message
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
Sending
'
"
<
<
message
<
<
"
'
"
;
return
ssl_adapter_
-
>
Send
(
message
.
data
(
)
message
.
length
(
)
)
;
}
void
OnSSLAdapterReadEvent
(
webrtc
:
:
Socket
*
socket
)
{
char
buffer
[
4096
]
=
"
"
;
int
read
=
socket
-
>
Recv
(
buffer
sizeof
(
buffer
)
-
1
nullptr
)
;
if
(
read
!
=
-
1
)
{
buffer
[
read
]
=
'
\
0
'
;
RTC_LOG
(
LS_INFO
)
<
<
"
Received
'
"
<
<
buffer
<
<
"
'
"
;
data_
+
=
buffer
;
}
}
void
OnSSLAdapterCloseEvent
(
webrtc
:
:
Socket
*
socket
int
error
)
{
if
(
socket
-
>
GetState
(
)
!
=
webrtc
:
:
Socket
:
:
CS_CLOSED
)
{
socket
-
>
Close
(
)
;
}
}
protected
:
std
:
:
unique_ptr
<
rtc
:
:
SSLAdapter
>
ssl_adapter_
;
std
:
:
unique_ptr
<
webrtc
:
:
Socket
>
socket_
;
private
:
std
:
:
string
data_
;
}
;
class
SSLAdapterTestDummyClient
:
public
SSLAdapterTestDummy
{
public
:
explicit
SSLAdapterTestDummyClient
(
)
:
SSLAdapterTestDummy
(
)
{
CreateSSLAdapter
(
socket_
.
release
(
)
webrtc
:
:
SSL_CLIENT
)
;
}
int
Connect
(
absl
:
:
string_view
hostname
const
webrtc
:
:
SocketAddress
&
address
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
Initiating
connection
with
"
<
<
address
.
ToString
(
)
;
int
rv
=
ssl_adapter_
-
>
Connect
(
address
)
;
if
(
rv
=
=
0
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
Starting
TLS
handshake
with
"
<
<
hostname
;
if
(
ssl_adapter_
-
>
StartSSL
(
hostname
)
!
=
0
)
{
return
-
1
;
}
}
return
rv
;
}
}
;
class
SSLAdapterTestDummyServer
:
public
SSLAdapterTestDummy
{
public
:
explicit
SSLAdapterTestDummyServer
(
const
rtc
:
:
KeyParams
&
key_params
)
:
SSLAdapterTestDummy
(
)
ssl_identity_
(
rtc
:
:
SSLIdentity
:
:
Create
(
GetHostname
(
)
key_params
)
)
{
socket_
-
>
Listen
(
1
)
;
socket_
-
>
SignalReadEvent
.
connect
(
this
&
SSLAdapterTestDummyServer
:
:
OnReadEvent
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
TCP
server
listening
on
"
<
<
socket_
-
>
GetLocalAddress
(
)
.
ToString
(
)
;
}
webrtc
:
:
SocketAddress
GetAddress
(
)
const
{
return
socket_
-
>
GetLocalAddress
(
)
;
}
std
:
:
string
GetHostname
(
)
const
{
return
"
example
.
com
"
;
}
protected
:
void
OnReadEvent
(
webrtc
:
:
Socket
*
socket
)
{
CreateSSLAdapter
(
socket_
-
>
Accept
(
nullptr
)
webrtc
:
:
SSL_SERVER
)
;
ssl_adapter_
-
>
SetIdentity
(
ssl_identity_
-
>
Clone
(
)
)
;
if
(
ssl_adapter_
-
>
StartSSL
(
GetHostname
(
)
)
!
=
0
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Starting
SSL
from
server
failed
.
"
;
}
}
private
:
std
:
:
unique_ptr
<
rtc
:
:
SSLIdentity
>
ssl_identity_
;
}
;
class
SSLAdapterTestBase
:
public
:
:
testing
:
:
Test
public
sigslot
:
:
has_slots
<
>
{
public
:
explicit
SSLAdapterTestBase
(
const
rtc
:
:
KeyParams
&
key_params
)
:
vss_
(
new
webrtc
:
:
VirtualSocketServer
(
)
)
thread_
(
vss_
.
get
(
)
)
server_
(
new
SSLAdapterTestDummyServer
(
key_params
)
)
client_
(
new
SSLAdapterTestDummyClient
(
)
)
handshake_wait_
(
webrtc
:
:
TimeDelta
:
:
Millis
(
kTimeout
.
ms
(
)
)
)
{
}
void
SetHandshakeWait
(
int
wait
)
{
handshake_wait_
=
webrtc
:
:
TimeDelta
:
:
Millis
(
wait
)
;
}
void
SetIgnoreBadCert
(
bool
ignore_bad_cert
)
{
client_
-
>
SetIgnoreBadCert
(
ignore_bad_cert
)
;
}
void
SetCertVerifier
(
rtc
:
:
SSLCertificateVerifier
*
ssl_cert_verifier
)
{
client_
-
>
SetCertVerifier
(
ssl_cert_verifier
)
;
}
void
SetAlpnProtocols
(
const
std
:
:
vector
<
std
:
:
string
>
&
protos
)
{
client_
-
>
SetAlpnProtocols
(
protos
)
;
}
void
SetEllipticCurves
(
const
std
:
:
vector
<
std
:
:
string
>
&
curves
)
{
client_
-
>
SetEllipticCurves
(
curves
)
;
}
void
SetMockCertVerifier
(
bool
return_value
)
{
auto
mock_verifier
=
std
:
:
make_unique
<
MockCertVerifier
>
(
)
;
EXPECT_CALL
(
*
mock_verifier
Verify
(
_
)
)
.
WillRepeatedly
(
Return
(
return_value
)
)
;
cert_verifier_
=
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificateVerifier
>
(
std
:
:
move
(
mock_verifier
)
)
;
SetIgnoreBadCert
(
false
)
;
SetCertVerifier
(
cert_verifier_
.
get
(
)
)
;
}
void
TestHandshake
(
bool
expect_success
)
{
int
rv
;
ASSERT_EQ
(
webrtc
:
:
Socket
:
:
CS_CLOSED
client_
-
>
GetState
(
)
)
;
rv
=
client_
-
>
Connect
(
server_
-
>
GetHostname
(
)
server_
-
>
GetAddress
(
)
)
;
ASSERT_EQ
(
0
rv
)
;
ASSERT_EQ
(
webrtc
:
:
Socket
:
:
CS_CONNECTING
client_
-
>
GetState
(
)
)
;
if
(
expect_success
)
{
EXPECT_THAT
(
webrtc
:
:
WaitUntil
(
[
&
]
{
return
client_
-
>
GetState
(
)
;
}
:
:
testing
:
:
Eq
(
webrtc
:
:
Socket
:
:
CS_CONNECTED
)
{
.
timeout
=
handshake_wait_
}
)
webrtc
:
:
IsRtcOk
(
)
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
TLS
handshake
complete
.
"
;
}
else
{
EXPECT_THAT
(
webrtc
:
:
WaitUntil
(
[
&
]
{
return
client_
-
>
GetState
(
)
;
}
:
:
testing
:
:
Eq
(
webrtc
:
:
Socket
:
:
CS_CLOSED
)
{
.
timeout
=
handshake_wait_
}
)
webrtc
:
:
IsRtcOk
(
)
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
TLS
handshake
failed
.
"
;
}
}
void
TestTransfer
(
absl
:
:
string_view
message
)
{
int
rv
;
rv
=
client_
-
>
Send
(
message
)
;
ASSERT_EQ
(
static_cast
<
int
>
(
message
.
length
(
)
)
rv
)
;
EXPECT_THAT
(
webrtc
:
:
WaitUntil
(
[
&
]
{
return
server_
-
>
GetReceivedData
(
)
;
}
:
:
testing
:
:
Eq
(
message
)
{
.
timeout
=
kTimeout
}
)
webrtc
:
:
IsRtcOk
(
)
)
;
rv
=
server_
-
>
Send
(
message
)
;
ASSERT_EQ
(
static_cast
<
int
>
(
message
.
length
(
)
)
rv
)
;
EXPECT_THAT
(
webrtc
:
:
WaitUntil
(
[
&
]
{
return
client_
-
>
GetReceivedData
(
)
;
}
:
:
testing
:
:
Eq
(
message
)
{
.
timeout
=
kTimeout
}
)
webrtc
:
:
IsRtcOk
(
)
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
Transfer
complete
.
"
;
}
protected
:
std
:
:
unique_ptr
<
webrtc
:
:
VirtualSocketServer
>
vss_
;
webrtc
:
:
AutoSocketServerThread
thread_
;
std
:
:
unique_ptr
<
SSLAdapterTestDummyServer
>
server_
;
std
:
:
unique_ptr
<
SSLAdapterTestDummyClient
>
client_
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificateVerifier
>
cert_verifier_
;
webrtc
:
:
TimeDelta
handshake_wait_
;
}
;
class
SSLAdapterTestTLS_RSA
:
public
SSLAdapterTestBase
{
public
:
SSLAdapterTestTLS_RSA
(
)
:
SSLAdapterTestBase
(
rtc
:
:
KeyParams
:
:
RSA
(
)
)
{
}
}
;
class
SSLAdapterTestTLS_ECDSA
:
public
SSLAdapterTestBase
{
public
:
SSLAdapterTestTLS_ECDSA
(
)
:
SSLAdapterTestBase
(
rtc
:
:
KeyParams
:
:
ECDSA
(
)
)
{
}
}
;
TEST_F
(
SSLAdapterTestTLS_RSA
TestTLSConnect
)
{
TestHandshake
(
true
)
;
}
TEST_F
(
SSLAdapterTestTLS_RSA
TestTLSConnectCustomCertVerifierSucceeds
)
{
SetMockCertVerifier
(
true
)
;
TestHandshake
(
true
)
;
}
TEST_F
(
SSLAdapterTestTLS_RSA
TestTLSConnectCustomCertVerifierFails
)
{
SetMockCertVerifier
(
false
)
;
TestHandshake
(
false
)
;
}
TEST_F
(
SSLAdapterTestTLS_ECDSA
TestTLSConnect
)
{
SetMockCertVerifier
(
true
)
;
TestHandshake
(
true
)
;
}
TEST_F
(
SSLAdapterTestTLS_ECDSA
TestTLSConnectCustomCertVerifierSucceeds
)
{
SetMockCertVerifier
(
true
)
;
TestHandshake
(
true
)
;
}
TEST_F
(
SSLAdapterTestTLS_ECDSA
TestTLSConnectCustomCertVerifierFails
)
{
SetMockCertVerifier
(
false
)
;
TestHandshake
(
false
)
;
}
TEST_F
(
SSLAdapterTestTLS_RSA
TestTLSTransfer
)
{
TestHandshake
(
true
)
;
TestTransfer
(
"
Hello
world
!
"
)
;
}
TEST_F
(
SSLAdapterTestTLS_RSA
TestTLSTransferCustomCertVerifier
)
{
SetMockCertVerifier
(
true
)
;
TestHandshake
(
true
)
;
TestTransfer
(
"
Hello
world
!
"
)
;
}
TEST_F
(
SSLAdapterTestTLS_RSA
TestTLSTransferWithBlockedSocket
)
{
TestHandshake
(
true
)
;
vss_
-
>
SetSendingBlocked
(
true
)
;
std
:
:
string
expected
;
int
rv
;
for
(
int
i
=
0
;
i
<
1024
;
+
+
i
)
{
std
:
:
string
message
=
"
Hello
world
:
"
+
rtc
:
:
ToString
(
i
)
;
rv
=
client_
-
>
Send
(
message
)
;
if
(
rv
!
=
static_cast
<
int
>
(
message
.
size
(
)
)
)
{
ASSERT_EQ
(
-
1
rv
)
;
break
;
}
expected
+
=
message
;
}
ASSERT_EQ
(
-
1
rv
)
;
EXPECT_EQ
(
-
1
client_
-
>
Send
(
"
Never
sent
"
)
)
;
vss_
-
>
SetSendingBlocked
(
false
)
;
EXPECT_THAT
(
webrtc
:
:
WaitUntil
(
[
&
]
{
return
server_
-
>
GetReceivedData
(
)
;
}
:
:
testing
:
:
Eq
(
expected
)
{
.
timeout
=
kTimeout
}
)
webrtc
:
:
IsRtcOk
(
)
)
;
std
:
:
string
final_message
=
"
Fin
.
"
;
expected
+
=
final_message
;
EXPECT_EQ
(
static_cast
<
int
>
(
final_message
.
size
(
)
)
client_
-
>
Send
(
final_message
)
)
;
EXPECT_THAT
(
webrtc
:
:
WaitUntil
(
[
&
]
{
return
server_
-
>
GetReceivedData
(
)
;
}
:
:
testing
:
:
Eq
(
expected
)
{
.
timeout
=
kTimeout
}
)
webrtc
:
:
IsRtcOk
(
)
)
;
}
TEST_F
(
SSLAdapterTestTLS_ECDSA
TestTLSTransfer
)
{
TestHandshake
(
true
)
;
TestTransfer
(
"
Hello
world
!
"
)
;
}
TEST_F
(
SSLAdapterTestTLS_ECDSA
TestTLSTransferCustomCertVerifier
)
{
SetMockCertVerifier
(
true
)
;
TestHandshake
(
true
)
;
TestTransfer
(
"
Hello
world
!
"
)
;
}
TEST_F
(
SSLAdapterTestTLS_ECDSA
TestTLSALPN
)
{
std
:
:
vector
<
std
:
:
string
>
alpn_protos
{
"
h2
"
"
http
/
1
.
1
"
}
;
SetAlpnProtocols
(
alpn_protos
)
;
TestHandshake
(
true
)
;
TestTransfer
(
"
Hello
world
!
"
)
;
}
TEST_F
(
SSLAdapterTestTLS_ECDSA
TestTLSEllipticCurves
)
{
std
:
:
vector
<
std
:
:
string
>
elliptic_curves
{
"
X25519
"
"
P
-
256
"
"
P
-
384
"
"
P
-
521
"
}
;
SetEllipticCurves
(
elliptic_curves
)
;
TestHandshake
(
true
)
;
TestTransfer
(
"
Hello
world
!
"
)
;
}
