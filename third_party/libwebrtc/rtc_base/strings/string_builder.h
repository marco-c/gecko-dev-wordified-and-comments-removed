#
ifndef
RTC_BASE_STRINGS_STRING_BUILDER_H_
#
define
RTC_BASE_STRINGS_STRING_BUILDER_H_
#
include
<
cstdio
>
#
include
<
string
>
#
include
<
utility
>
#
include
"
absl
/
strings
/
str_cat
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
array_view
.
h
"
namespace
webrtc
{
class
SimpleStringBuilder
{
public
:
explicit
SimpleStringBuilder
(
ArrayView
<
char
>
buffer
)
;
SimpleStringBuilder
(
const
SimpleStringBuilder
&
)
=
delete
;
SimpleStringBuilder
&
operator
=
(
const
SimpleStringBuilder
&
)
=
delete
;
SimpleStringBuilder
&
operator
<
<
(
char
ch
)
;
SimpleStringBuilder
&
operator
<
<
(
absl
:
:
string_view
str
)
;
SimpleStringBuilder
&
operator
<
<
(
int
i
)
;
SimpleStringBuilder
&
operator
<
<
(
unsigned
i
)
;
SimpleStringBuilder
&
operator
<
<
(
long
i
)
;
SimpleStringBuilder
&
operator
<
<
(
long
long
i
)
;
SimpleStringBuilder
&
operator
<
<
(
unsigned
long
i
)
;
SimpleStringBuilder
&
operator
<
<
(
unsigned
long
long
i
)
;
SimpleStringBuilder
&
operator
<
<
(
float
f
)
;
SimpleStringBuilder
&
operator
<
<
(
double
f
)
;
SimpleStringBuilder
&
operator
<
<
(
long
double
f
)
;
const
char
*
str
(
)
const
{
return
buffer_
.
data
(
)
;
}
size_t
size
(
)
const
{
return
size_
;
}
#
if
defined
(
__GNUC__
)
__attribute__
(
(
__format__
(
__printf__
2
3
)
)
)
#
endif
SimpleStringBuilder
&
AppendFormat
(
const
char
*
fmt
.
.
.
)
;
private
:
bool
IsConsistent
(
)
const
{
return
size_
<
=
buffer_
.
size
(
)
-
1
&
&
buffer_
[
size_
]
=
=
'
\
0
'
;
}
const
ArrayView
<
char
>
buffer_
;
size_t
size_
=
0
;
}
;
class
StringBuilder
{
public
:
StringBuilder
(
)
{
}
explicit
StringBuilder
(
absl
:
:
string_view
s
)
:
str_
(
s
)
{
}
StringBuilder
(
const
StringBuilder
&
)
=
delete
;
StringBuilder
&
operator
=
(
const
StringBuilder
&
)
=
delete
;
StringBuilder
&
operator
<
<
(
const
absl
:
:
string_view
str
)
{
str_
.
append
(
str
.
data
(
)
str
.
length
(
)
)
;
return
*
this
;
}
StringBuilder
&
operator
<
<
(
char
c
)
=
delete
;
StringBuilder
&
operator
<
<
(
int
i
)
{
str_
+
=
absl
:
:
StrCat
(
i
)
;
return
*
this
;
}
StringBuilder
&
operator
<
<
(
unsigned
i
)
{
str_
+
=
absl
:
:
StrCat
(
i
)
;
return
*
this
;
}
StringBuilder
&
operator
<
<
(
long
i
)
{
str_
+
=
absl
:
:
StrCat
(
i
)
;
return
*
this
;
}
StringBuilder
&
operator
<
<
(
long
long
i
)
{
str_
+
=
absl
:
:
StrCat
(
i
)
;
return
*
this
;
}
StringBuilder
&
operator
<
<
(
unsigned
long
i
)
{
str_
+
=
absl
:
:
StrCat
(
i
)
;
return
*
this
;
}
StringBuilder
&
operator
<
<
(
unsigned
long
long
i
)
{
str_
+
=
absl
:
:
StrCat
(
i
)
;
return
*
this
;
}
StringBuilder
&
operator
<
<
(
float
f
)
{
str_
+
=
absl
:
:
StrCat
(
f
)
;
return
*
this
;
}
StringBuilder
&
operator
<
<
(
double
f
)
{
str_
+
=
absl
:
:
StrCat
(
f
)
;
return
*
this
;
}
const
std
:
:
string
&
str
(
)
const
{
return
str_
;
}
void
Clear
(
)
{
str_
.
clear
(
)
;
}
size_t
size
(
)
const
{
return
str_
.
size
(
)
;
}
std
:
:
string
Release
(
)
{
std
:
:
string
ret
=
std
:
:
move
(
str_
)
;
str_
.
clear
(
)
;
return
ret
;
}
StringBuilder
&
AppendFormat
(
const
char
*
fmt
.
.
.
)
#
if
defined
(
__GNUC__
)
__attribute__
(
(
__format__
(
__printf__
2
3
)
)
)
#
endif
;
private
:
std
:
:
string
str_
;
}
;
}
#
ifdef
WEBRTC_ALLOW_DEPRECATED_NAMESPACES
namespace
rtc
{
using
:
:
webrtc
:
:
SimpleStringBuilder
;
using
:
:
webrtc
:
:
StringBuilder
;
}
#
endif
#
endif
