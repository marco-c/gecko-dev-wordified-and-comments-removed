#
include
"
rtc_base
/
ifaddrs_converter
.
h
"
namespace
rtc
{
IfAddrsConverter
:
:
IfAddrsConverter
(
)
{
}
IfAddrsConverter
:
:
~
IfAddrsConverter
(
)
{
}
bool
IfAddrsConverter
:
:
ConvertIfAddrsToIPAddress
(
const
struct
ifaddrs
*
interface
webrtc
:
:
InterfaceAddress
*
ip
webrtc
:
:
IPAddress
*
mask
)
{
switch
(
interface
-
>
ifa_addr
-
>
sa_family
)
{
case
AF_INET
:
{
*
ip
=
webrtc
:
:
InterfaceAddress
(
webrtc
:
:
IPAddress
(
reinterpret_cast
<
sockaddr_in
*
>
(
interface
-
>
ifa_addr
)
-
>
sin_addr
)
)
;
*
mask
=
webrtc
:
:
IPAddress
(
reinterpret_cast
<
sockaddr_in
*
>
(
interface
-
>
ifa_netmask
)
-
>
sin_addr
)
;
return
true
;
}
case
AF_INET6
:
{
int
ip_attributes
=
webrtc
:
:
IPV6_ADDRESS_FLAG_NONE
;
if
(
!
ConvertNativeAttributesToIPAttributes
(
interface
&
ip_attributes
)
)
{
return
false
;
}
*
ip
=
webrtc
:
:
InterfaceAddress
(
reinterpret_cast
<
sockaddr_in6
*
>
(
interface
-
>
ifa_addr
)
-
>
sin6_addr
ip_attributes
)
;
*
mask
=
webrtc
:
:
IPAddress
(
reinterpret_cast
<
sockaddr_in6
*
>
(
interface
-
>
ifa_netmask
)
-
>
sin6_addr
)
;
return
true
;
}
default
:
{
return
false
;
}
}
}
bool
IfAddrsConverter
:
:
ConvertNativeAttributesToIPAttributes
(
const
struct
ifaddrs
*
int
*
ip_attributes
)
{
*
ip_attributes
=
webrtc
:
:
IPV6_ADDRESS_FLAG_NONE
;
return
true
;
}
#
if
!
defined
(
WEBRTC_MAC
)
IfAddrsConverter
*
CreateIfAddrsConverter
(
)
{
return
new
IfAddrsConverter
(
)
;
}
#
endif
}
