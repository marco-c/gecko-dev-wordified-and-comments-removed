#
ifndef
RTC_BASE_MEMORY_ALWAYS_VALID_POINTER_H_
#
define
RTC_BASE_MEMORY_ALWAYS_VALID_POINTER_H_
#
include
<
memory
>
#
include
<
utility
>
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
template
<
typename
Interface
typename
Default
=
Interface
>
class
AlwaysValidPointer
{
public
:
explicit
AlwaysValidPointer
(
Interface
*
pointer
)
:
owned_instance_
(
pointer
?
nullptr
:
std
:
:
make_unique
<
Default
>
(
)
)
pointer_
(
pointer
?
pointer
:
owned_instance_
.
get
(
)
)
{
RTC_DCHECK
(
pointer_
)
;
}
template
<
typename
.
.
.
Args
>
AlwaysValidPointer
(
Interface
*
pointer
Args
.
.
.
args
)
:
owned_instance_
(
pointer
?
nullptr
:
std
:
:
make_unique
<
Default
>
(
std
:
:
move
(
args
.
.
.
)
)
)
pointer_
(
pointer
?
pointer
:
owned_instance_
.
get
(
)
)
{
RTC_DCHECK
(
pointer_
)
;
}
Interface
*
get
(
)
{
return
pointer_
;
}
Interface
*
operator
-
>
(
)
{
return
pointer_
;
}
Interface
&
operator
*
(
)
{
return
*
pointer_
;
}
private
:
const
std
:
:
unique_ptr
<
Interface
>
owned_instance_
;
Interface
*
const
pointer_
;
}
;
}
#
endif
