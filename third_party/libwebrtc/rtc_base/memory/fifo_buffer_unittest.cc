#
include
"
rtc_base
/
memory
/
fifo_buffer
.
h
"
#
include
<
string
.
h
>
#
include
"
test
/
gtest
.
h
"
namespace
rtc
{
TEST
(
FifoBufferTest
TestAll
)
{
const
size_t
kSize
=
16
;
const
char
in
[
kSize
*
2
+
1
]
=
"
0123456789ABCDEFGHIJKLMNOPQRSTUV
"
;
char
out
[
kSize
*
2
]
;
void
*
p
;
const
void
*
q
;
size_t
bytes
;
FifoBuffer
buf
(
kSize
)
;
EXPECT_EQ
(
SS_OPEN
buf
.
GetState
(
)
)
;
EXPECT_EQ
(
SR_BLOCK
buf
.
Read
(
out
kSize
&
bytes
nullptr
)
)
;
EXPECT_TRUE
(
nullptr
!
=
buf
.
GetWriteBuffer
(
&
bytes
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
buf
.
ConsumeWriteBuffer
(
0
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
SR_BLOCK
buf
.
Write
(
in
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
)
)
;
EXPECT_EQ
(
SR_BLOCK
buf
.
Read
(
out
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
*
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
bytes
kSize
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
*
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
/
2
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
/
2
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
/
2
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
*
3
/
4
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
*
3
/
4
bytes
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
/
2
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
/
4
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
4
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
+
kSize
/
2
out
kSize
/
4
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
/
2
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
/
2
)
)
;
buf
.
GetWriteBuffer
(
&
bytes
)
;
buf
.
ConsumeWriteBuffer
(
0
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
&
bytes
nullptr
)
)
;
q
=
buf
.
GetReadData
(
&
bytes
)
;
EXPECT_TRUE
(
nullptr
!
=
q
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
q
in
kSize
)
)
;
buf
.
ConsumeReadData
(
kSize
)
;
EXPECT_EQ
(
SR_BLOCK
buf
.
Read
(
out
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
&
bytes
nullptr
)
)
;
q
=
buf
.
GetReadData
(
&
bytes
)
;
EXPECT_TRUE
(
nullptr
!
=
q
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
q
in
kSize
/
2
)
)
;
buf
.
ConsumeReadData
(
kSize
/
2
)
;
q
=
buf
.
GetReadData
(
&
bytes
)
;
EXPECT_TRUE
(
nullptr
!
=
q
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
q
in
+
kSize
/
2
kSize
/
2
)
)
;
buf
.
ConsumeReadData
(
kSize
/
2
)
;
EXPECT_EQ
(
SR_BLOCK
buf
.
Read
(
out
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
*
3
/
4
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
/
2
&
bytes
nullptr
)
)
;
q
=
buf
.
GetReadData
(
&
bytes
)
;
EXPECT_TRUE
(
nullptr
!
=
q
)
;
EXPECT_EQ
(
kSize
/
4
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
q
in
+
kSize
*
3
/
4
kSize
/
4
)
)
;
buf
.
ConsumeReadData
(
kSize
/
4
)
;
q
=
buf
.
GetReadData
(
&
bytes
)
;
EXPECT_TRUE
(
nullptr
!
=
q
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
q
in
kSize
/
2
)
)
;
buf
.
ConsumeReadData
(
kSize
/
2
)
;
buf
.
GetWriteBuffer
(
&
bytes
)
;
buf
.
ConsumeWriteBuffer
(
0
)
;
p
=
buf
.
GetWriteBuffer
(
&
bytes
)
;
EXPECT_TRUE
(
nullptr
!
=
p
)
;
EXPECT_EQ
(
kSize
bytes
)
;
memcpy
(
p
in
kSize
)
;
buf
.
ConsumeWriteBuffer
(
kSize
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
)
)
;
p
=
buf
.
GetWriteBuffer
(
&
bytes
)
;
EXPECT_TRUE
(
nullptr
!
=
p
)
;
EXPECT_EQ
(
kSize
bytes
)
;
memcpy
(
p
in
kSize
/
2
)
;
buf
.
ConsumeWriteBuffer
(
kSize
/
2
)
;
p
=
buf
.
GetWriteBuffer
(
&
bytes
)
;
EXPECT_TRUE
(
nullptr
!
=
p
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
memcpy
(
p
in
+
kSize
/
2
kSize
/
2
)
;
buf
.
ConsumeWriteBuffer
(
kSize
/
2
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
*
3
/
4
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
/
2
&
bytes
nullptr
)
)
;
p
=
buf
.
GetWriteBuffer
(
&
bytes
)
;
EXPECT_TRUE
(
nullptr
!
=
p
)
;
EXPECT_EQ
(
kSize
/
4
bytes
)
;
memcpy
(
p
in
kSize
/
4
)
;
buf
.
ConsumeWriteBuffer
(
kSize
/
4
)
;
p
=
buf
.
GetWriteBuffer
(
&
bytes
)
;
EXPECT_TRUE
(
nullptr
!
=
p
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
memcpy
(
p
in
+
kSize
/
4
kSize
/
4
)
;
buf
.
ConsumeWriteBuffer
(
kSize
/
4
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
*
3
/
4
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
*
3
/
4
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
+
kSize
/
2
out
kSize
/
4
)
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
+
kSize
/
4
kSize
/
4
)
)
;
EXPECT_EQ
(
SR_BLOCK
buf
.
Read
(
out
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_TRUE
(
buf
.
SetCapacity
(
kSize
*
2
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
+
kSize
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
*
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
*
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
*
2
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_TRUE
(
buf
.
SetCapacity
(
kSize
)
)
;
EXPECT_EQ
(
SR_BLOCK
buf
.
Write
(
in
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
kSize
/
2
&
bytes
nullptr
)
)
;
buf
.
Close
(
)
;
EXPECT_EQ
(
SS_CLOSED
buf
.
GetState
(
)
)
;
EXPECT_EQ
(
SR_EOS
buf
.
Write
(
in
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Read
(
out
kSize
/
2
&
bytes
nullptr
)
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
/
2
)
)
;
EXPECT_EQ
(
SR_EOS
buf
.
Read
(
out
kSize
/
2
&
bytes
nullptr
)
)
;
}
TEST
(
FifoBufferTest
FullBufferCheck
)
{
FifoBuffer
buff
(
10
)
;
buff
.
ConsumeWriteBuffer
(
10
)
;
size_t
free
;
EXPECT_TRUE
(
buff
.
GetWriteBuffer
(
&
free
)
!
=
nullptr
)
;
EXPECT_EQ
(
0U
free
)
;
}
TEST
(
FifoBufferTest
WriteOffsetAndReadOffset
)
{
const
size_t
kSize
=
16
;
const
char
in
[
kSize
*
2
+
1
]
=
"
0123456789ABCDEFGHIJKLMNOPQRSTUV
"
;
char
out
[
kSize
*
2
]
;
FifoBuffer
buf
(
kSize
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
Write
(
in
14
nullptr
nullptr
)
)
;
size_t
buffered
;
EXPECT_TRUE
(
buf
.
GetBuffered
(
&
buffered
)
)
;
EXPECT_EQ
(
14u
buffered
)
;
buf
.
ConsumeReadData
(
10
)
;
size_t
remaining
;
EXPECT_TRUE
(
buf
.
GetWriteRemaining
(
&
remaining
)
)
;
EXPECT_EQ
(
12u
remaining
)
;
EXPECT_EQ
(
SR_BLOCK
buf
.
WriteOffset
(
in
10
12
nullptr
)
)
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
WriteOffset
(
in
8
4
nullptr
)
)
;
EXPECT_TRUE
(
buf
.
GetWriteRemaining
(
&
remaining
)
)
;
EXPECT_EQ
(
12u
remaining
)
;
buf
.
ConsumeWriteBuffer
(
12
)
;
size_t
read
;
EXPECT_EQ
(
SR_SUCCESS
buf
.
ReadOffset
(
out
8
8
&
read
)
)
;
EXPECT_EQ
(
8u
read
)
;
EXPECT_EQ
(
0
memcmp
(
out
in
8
)
)
;
EXPECT_TRUE
(
buf
.
GetBuffered
(
&
buffered
)
)
;
EXPECT_EQ
(
16u
buffered
)
;
EXPECT_EQ
(
SR_BLOCK
buf
.
ReadOffset
(
out
10
16
nullptr
)
)
;
}
}
