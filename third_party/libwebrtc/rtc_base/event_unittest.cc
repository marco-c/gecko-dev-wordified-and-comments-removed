#
include
"
rtc_base
/
event
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
rtc_base
/
platform_thread
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
TEST
(
EventTest
InitiallySignaled
)
{
Event
event
(
false
true
)
;
ASSERT_TRUE
(
event
.
Wait
(
TimeDelta
:
:
Zero
(
)
)
)
;
}
TEST
(
EventTest
ManualReset
)
{
Event
event
(
true
false
)
;
ASSERT_FALSE
(
event
.
Wait
(
TimeDelta
:
:
Zero
(
)
)
)
;
event
.
Set
(
)
;
ASSERT_TRUE
(
event
.
Wait
(
TimeDelta
:
:
Zero
(
)
)
)
;
ASSERT_TRUE
(
event
.
Wait
(
TimeDelta
:
:
Zero
(
)
)
)
;
event
.
Reset
(
)
;
ASSERT_FALSE
(
event
.
Wait
(
TimeDelta
:
:
Zero
(
)
)
)
;
}
TEST
(
EventTest
AutoReset
)
{
Event
event
;
ASSERT_FALSE
(
event
.
Wait
(
TimeDelta
:
:
Zero
(
)
)
)
;
event
.
Set
(
)
;
ASSERT_TRUE
(
event
.
Wait
(
TimeDelta
:
:
Zero
(
)
)
)
;
ASSERT_FALSE
(
event
.
Wait
(
TimeDelta
:
:
Zero
(
)
)
)
;
}
class
SignalerThread
{
public
:
void
Start
(
Event
*
writer
Event
*
reader
)
{
writer_
=
writer
;
reader_
=
reader
;
thread_
=
rtc
:
:
PlatformThread
:
:
SpawnJoinable
(
[
this
]
{
while
(
!
stop_event_
.
Wait
(
TimeDelta
:
:
Zero
(
)
)
)
{
writer_
-
>
Set
(
)
;
reader_
-
>
Wait
(
Event
:
:
kForever
)
;
}
}
"
EventPerf
"
)
;
}
void
Stop
(
)
{
stop_event_
.
Set
(
)
;
thread_
.
Finalize
(
)
;
}
Event
stop_event_
;
Event
*
writer_
;
Event
*
reader_
;
rtc
:
:
PlatformThread
thread_
;
}
;
TEST
(
EventTest
UnsignaledWaitDoesNotReturnBeforeTimeout
)
{
constexpr
TimeDelta
kDuration
=
TimeDelta
:
:
Micros
(
10
'
499
)
;
Event
event
;
auto
begin
=
Clock
:
:
GetRealTimeClock
(
)
-
>
CurrentTime
(
)
;
EXPECT_FALSE
(
event
.
Wait
(
kDuration
)
)
;
EXPECT_GE
(
Clock
:
:
GetRealTimeClock
(
)
-
>
CurrentTime
(
)
begin
+
kDuration
)
;
}
TEST
(
EventTest
DISABLED_PerformanceSingleThread
)
{
static
const
int
kNumIterations
=
10000000
;
Event
event
;
for
(
int
i
=
0
;
i
<
kNumIterations
;
+
+
i
)
{
event
.
Set
(
)
;
event
.
Wait
(
TimeDelta
:
:
Zero
(
)
)
;
}
}
TEST
(
EventTest
DISABLED_PerformanceMultiThread
)
{
static
const
int
kNumIterations
=
10000
;
Event
read
;
Event
write
;
SignalerThread
thread
;
thread
.
Start
(
&
read
&
write
)
;
for
(
int
i
=
0
;
i
<
kNumIterations
;
+
+
i
)
{
write
.
Set
(
)
;
read
.
Wait
(
Event
:
:
kForever
)
;
}
write
.
Set
(
)
;
thread
.
Stop
(
)
;
}
#
if
RTC_DCHECK_IS_ON
&
&
GTEST_HAS_DEATH_TEST
&
&
!
defined
(
WEBRTC_ANDROID
)
TEST
(
EventTestDeathTest
DisallowEventWait
)
{
Event
event
;
RTC_DISALLOW_WAIT
(
)
;
EXPECT_DEATH
(
event
.
Wait
(
Event
:
:
kForever
)
"
"
)
;
}
#
endif
}
