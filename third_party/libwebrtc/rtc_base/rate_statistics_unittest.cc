#
include
"
rtc_base
/
rate_statistics
.
h
"
#
include
<
cstdlib
>
#
include
"
test
/
gtest
.
h
"
namespace
{
using
webrtc
:
:
RateStatistics
;
const
int64_t
kWindowMs
=
500
;
class
RateStatisticsTest
:
public
:
:
testing
:
:
Test
{
protected
:
RateStatisticsTest
(
)
:
stats_
(
kWindowMs
8000
)
{
}
RateStatistics
stats_
;
}
;
TEST_F
(
RateStatisticsTest
TestStrictMode
)
{
int64_t
now_ms
=
0
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
const
uint32_t
kPacketSize
=
1500u
;
const
uint32_t
kExpectedRateBps
=
kPacketSize
*
1000
*
8
;
stats_
.
Update
(
kPacketSize
now_ms
+
+
)
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
stats_
.
Update
(
kPacketSize
now_ms
)
;
EXPECT_EQ
(
kExpectedRateBps
*
stats_
.
Rate
(
now_ms
)
)
;
stats_
.
Reset
(
)
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
const
int
kInterval
=
10
;
for
(
int
i
=
0
;
i
<
100000
;
+
+
i
)
{
if
(
i
%
kInterval
=
=
0
)
stats_
.
Update
(
kPacketSize
now_ms
)
;
if
(
i
>
kInterval
)
{
std
:
:
optional
<
uint32_t
>
rate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
rate
)
)
;
uint32_t
samples
=
i
/
kInterval
+
1
;
uint64_t
total_bits
=
samples
*
kPacketSize
*
8
;
uint32_t
rate_bps
=
static_cast
<
uint32_t
>
(
(
1000
*
total_bits
)
/
(
i
+
1
)
)
;
EXPECT_NEAR
(
rate_bps
*
rate
22000u
)
;
}
now_ms
+
=
1
;
}
now_ms
+
=
kWindowMs
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
}
TEST_F
(
RateStatisticsTest
IncreasingThenDecreasingBitrate
)
{
int64_t
now_ms
=
0
;
stats_
.
Reset
(
)
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
stats_
.
Update
(
1000
+
+
now_ms
)
;
const
uint32_t
kExpectedBitrate
=
8000000
;
int
prev_error
=
kExpectedBitrate
;
std
:
:
optional
<
uint32_t
>
bitrate
;
while
(
+
+
now_ms
<
10000
)
{
stats_
.
Update
(
1000
now_ms
)
;
bitrate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
bitrate
)
)
;
int
error
=
kExpectedBitrate
-
*
bitrate
;
error
=
std
:
:
abs
(
error
)
;
EXPECT_LE
(
error
prev_error
+
1
)
;
prev_error
=
error
;
}
EXPECT_EQ
(
kExpectedBitrate
*
bitrate
)
;
while
(
+
+
now_ms
<
10000
)
{
stats_
.
Update
(
1000
now_ms
)
;
bitrate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_EQ
(
kExpectedBitrate
*
bitrate
)
;
}
while
(
+
+
now_ms
<
20000
)
{
stats_
.
Update
(
0
now_ms
)
;
std
:
:
optional
<
uint32_t
>
new_bitrate
=
stats_
.
Rate
(
now_ms
)
;
if
(
static_cast
<
bool
>
(
new_bitrate
)
&
&
*
new_bitrate
!
=
*
bitrate
)
{
EXPECT_LT
(
*
new_bitrate
*
bitrate
)
;
}
else
{
EXPECT_EQ
(
0u
*
new_bitrate
)
;
break
;
}
bitrate
=
new_bitrate
;
}
while
(
+
+
now_ms
<
20000
)
{
stats_
.
Update
(
0
now_ms
)
;
EXPECT_EQ
(
0u
*
stats_
.
Rate
(
now_ms
)
)
;
}
}
TEST_F
(
RateStatisticsTest
ResetAfterSilence
)
{
int64_t
now_ms
=
0
;
stats_
.
Reset
(
)
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
const
uint32_t
kExpectedBitrate
=
8000000
;
int
prev_error
=
kExpectedBitrate
;
std
:
:
optional
<
uint32_t
>
bitrate
;
while
(
+
+
now_ms
<
10000
)
{
stats_
.
Update
(
1000
now_ms
)
;
bitrate
=
stats_
.
Rate
(
now_ms
)
;
if
(
bitrate
)
{
int
error
=
kExpectedBitrate
-
*
bitrate
;
error
=
std
:
:
abs
(
error
)
;
EXPECT_LE
(
error
prev_error
+
1
)
;
prev_error
=
error
;
}
}
EXPECT_EQ
(
kExpectedBitrate
*
bitrate
)
;
now_ms
+
=
kWindowMs
+
1
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
stats_
.
Update
(
1000
now_ms
)
;
+
+
now_ms
;
stats_
.
Update
(
1000
now_ms
)
;
EXPECT_EQ
(
kExpectedBitrate
*
stats_
.
Rate
(
now_ms
)
)
;
stats_
.
Reset
(
)
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
stats_
.
Update
(
1000
now_ms
)
;
+
+
now_ms
;
stats_
.
Update
(
1000
now_ms
)
;
EXPECT_EQ
(
kExpectedBitrate
*
stats_
.
Rate
(
now_ms
)
)
;
}
TEST_F
(
RateStatisticsTest
HandlesChangingWindowSize
)
{
int64_t
now_ms
=
0
;
stats_
.
Reset
(
)
;
EXPECT_TRUE
(
stats_
.
SetWindowSize
(
kWindowMs
now_ms
)
)
;
EXPECT_FALSE
(
stats_
.
SetWindowSize
(
kWindowMs
+
1
now_ms
)
)
;
EXPECT_FALSE
(
stats_
.
SetWindowSize
(
0
now_ms
)
)
;
EXPECT_TRUE
(
stats_
.
SetWindowSize
(
1
now_ms
)
)
;
EXPECT_TRUE
(
stats_
.
SetWindowSize
(
kWindowMs
now_ms
)
)
;
const
int
kBatchSize
=
10
;
for
(
int
i
=
0
;
i
<
=
kWindowMs
;
i
+
=
kBatchSize
)
stats_
.
Update
(
kBatchSize
now_ms
+
=
kBatchSize
)
;
EXPECT_EQ
(
static_cast
<
uint32_t
>
(
8000
)
*
stats_
.
Rate
(
now_ms
)
)
;
EXPECT_TRUE
(
stats_
.
SetWindowSize
(
kWindowMs
/
2
now_ms
)
)
;
EXPECT_EQ
(
static_cast
<
uint32_t
>
(
8000
)
*
stats_
.
Rate
(
now_ms
)
)
;
EXPECT_TRUE
(
stats_
.
SetWindowSize
(
kWindowMs
now_ms
)
)
;
EXPECT_EQ
(
static_cast
<
uint32_t
>
(
8000
)
*
stats_
.
Rate
(
now_ms
)
)
;
for
(
int
i
=
0
;
i
<
kWindowMs
/
2
;
i
+
=
kBatchSize
)
stats_
.
Update
(
kBatchSize
*
2
now_ms
+
=
kBatchSize
)
;
EXPECT_EQ
(
static_cast
<
uint32_t
>
(
(
8000
*
3
)
/
2
)
*
stats_
.
Rate
(
now_ms
)
)
;
}
TEST_F
(
RateStatisticsTest
RespectsWindowSizeEdges
)
{
int64_t
now_ms
=
0
;
stats_
.
Reset
(
)
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
stats_
.
Update
(
kWindowMs
now_ms
)
;
now_ms
+
=
kWindowMs
-
2
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
+
+
now_ms
;
std
:
:
optional
<
uint32_t
>
bitrate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
bitrate
)
)
;
EXPECT_EQ
(
1000
*
8u
*
bitrate
)
;
stats_
.
Update
(
kWindowMs
now_ms
)
;
bitrate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
bitrate
)
)
;
EXPECT_EQ
(
2
*
1000
*
8u
*
bitrate
)
;
now_ms
+
=
1
;
bitrate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
bitrate
)
)
;
EXPECT_EQ
(
1000
*
8u
*
bitrate
)
;
}
TEST_F
(
RateStatisticsTest
HandlesZeroCounts
)
{
int64_t
now_ms
=
0
;
stats_
.
Reset
(
)
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
stats_
.
Update
(
kWindowMs
now_ms
)
;
now_ms
+
=
kWindowMs
-
1
;
stats_
.
Update
(
0
now_ms
)
;
std
:
:
optional
<
uint32_t
>
bitrate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
bitrate
)
)
;
EXPECT_EQ
(
1000
*
8u
*
bitrate
)
;
+
+
now_ms
;
bitrate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
bitrate
)
)
;
EXPECT_EQ
(
0u
*
bitrate
)
;
now_ms
+
=
kWindowMs
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
}
TEST_F
(
RateStatisticsTest
HandlesQuietPeriods
)
{
int64_t
now_ms
=
0
;
stats_
.
Reset
(
)
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
stats_
.
Update
(
0
now_ms
)
;
now_ms
+
=
kWindowMs
-
1
;
std
:
:
optional
<
uint32_t
>
bitrate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
bitrate
)
)
;
EXPECT_EQ
(
0u
*
bitrate
)
;
+
+
now_ms
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
now_ms
+
=
2
*
kWindowMs
;
stats_
.
Update
(
0
now_ms
)
;
bitrate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_FALSE
(
static_cast
<
bool
>
(
stats_
.
Rate
(
now_ms
)
)
)
;
+
+
now_ms
;
stats_
.
Update
(
0
now_ms
)
;
bitrate
=
stats_
.
Rate
(
now_ms
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
bitrate
)
)
;
EXPECT_EQ
(
0u
*
bitrate
)
;
}
TEST_F
(
RateStatisticsTest
HandlesBigNumbers
)
{
int64_t
large_number
=
0x100000000u
;
int64_t
now_ms
=
0
;
stats_
.
Update
(
large_number
now_ms
+
+
)
;
stats_
.
Update
(
large_number
now_ms
)
;
EXPECT_TRUE
(
stats_
.
Rate
(
now_ms
)
)
;
EXPECT_EQ
(
large_number
*
RateStatistics
:
:
kBpsScale
*
stats_
.
Rate
(
now_ms
)
)
;
}
TEST_F
(
RateStatisticsTest
HandlesTooLargeNumbers
)
{
int64_t
very_large_number
=
std
:
:
numeric_limits
<
int64_t
>
:
:
max
(
)
;
int64_t
now_ms
=
0
;
stats_
.
Update
(
very_large_number
now_ms
+
+
)
;
stats_
.
Update
(
very_large_number
now_ms
)
;
EXPECT_FALSE
(
stats_
.
Rate
(
now_ms
)
)
;
}
TEST_F
(
RateStatisticsTest
HandlesSomewhatLargeNumbers
)
{
int64_t
very_large_number
=
std
:
:
numeric_limits
<
int64_t
>
:
:
max
(
)
;
int64_t
now_ms
=
0
;
stats_
.
Update
(
very_large_number
/
4
now_ms
+
+
)
;
stats_
.
Update
(
very_large_number
/
4
now_ms
)
;
EXPECT_FALSE
(
stats_
.
Rate
(
now_ms
)
)
;
}
TEST_F
(
RateStatisticsTest
HandlesLowFps
)
{
RateStatistics
fps_stats
(
1000
1000
)
;
const
int64_t
kExpectedFps
=
1
;
constexpr
int64_t
kTimeDelta
=
1000
/
kExpectedFps
;
int64_t
now_ms
=
0
;
EXPECT_FALSE
(
stats_
.
Rate
(
now_ms
)
)
;
while
(
now_ms
<
1000
)
{
fps_stats
.
Update
(
1
now_ms
)
;
now_ms
+
=
kTimeDelta
;
}
while
(
now_ms
<
10000
)
{
fps_stats
.
Update
(
1
now_ms
)
;
EXPECT_EQ
(
kExpectedFps
fps_stats
.
Rate
(
now_ms
)
)
;
now_ms
+
=
kTimeDelta
;
}
}
TEST_F
(
RateStatisticsTest
Handles25Fps
)
{
RateStatistics
fps_stats
(
1000
1000
)
;
constexpr
int64_t
kExpectedFps
=
25
;
constexpr
int64_t
kTimeDelta
=
1000
/
kExpectedFps
;
int64_t
now_ms
=
0
;
EXPECT_FALSE
(
stats_
.
Rate
(
now_ms
)
)
;
while
(
now_ms
<
1000
)
{
fps_stats
.
Update
(
1
now_ms
)
;
now_ms
+
=
kTimeDelta
;
}
while
(
now_ms
<
10000
)
{
fps_stats
.
Update
(
1
now_ms
)
;
EXPECT_EQ
(
kExpectedFps
fps_stats
.
Rate
(
now_ms
)
)
;
now_ms
+
=
kTimeDelta
;
}
}
}
