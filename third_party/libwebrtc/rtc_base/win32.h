#
ifndef
RTC_BASE_WIN32_H_
#
define
RTC_BASE_WIN32_H_
#
ifndef
WEBRTC_WIN
#
error
"
Only
#
include
this
header
in
Windows
builds
"
#
endif
#
ifndef
NOMINMAX
#
define
NOMINMAX
#
endif
#
include
<
winsock2
.
h
>
#
include
<
windows
.
h
>
typedef
int
socklen_t
;
#
ifndef
SECURITY_MANDATORY_LABEL_AUTHORITY
#
define
SECURITY_MANDATORY_MEDIUM_RID
(
0x00002000L
)
#
define
TokenIntegrityLevel
static_cast
<
TOKEN_INFORMATION_CLASS
>
(
0x19
)
typedef
struct
_TOKEN_MANDATORY_LABEL
{
SID_AND_ATTRIBUTES
Label
;
}
TOKEN_MANDATORY_LABEL
*
PTOKEN_MANDATORY_LABEL
;
#
endif
#
undef
SetPort
#
include
<
string
>
namespace
rtc
{
const
char
*
win32_inet_ntop
(
int
af
const
void
*
src
char
*
dst
socklen_t
size
)
;
int
win32_inet_pton
(
int
af
const
char
*
src
void
*
dst
)
;
enum
WindowsMajorVersions
{
kWindows2000
=
5
kWindowsVista
=
6
kWindows10
=
10
}
;
#
if
!
defined
(
WINUWP
)
bool
GetOsVersion
(
int
*
major
int
*
minor
int
*
build
)
;
inline
bool
IsWindowsVistaOrLater
(
)
{
int
major
;
return
(
GetOsVersion
(
&
major
nullptr
nullptr
)
&
&
major
>
=
kWindowsVista
)
;
}
inline
bool
IsWindowsXpOrLater
(
)
{
int
major
minor
;
return
(
GetOsVersion
(
&
major
&
minor
nullptr
)
&
&
(
major
>
=
kWindowsVista
|
|
(
major
=
=
kWindows2000
&
&
minor
>
=
1
)
)
)
;
}
inline
bool
IsWindows8OrLater
(
)
{
int
major
minor
;
return
(
GetOsVersion
(
&
major
&
minor
nullptr
)
&
&
(
major
>
kWindowsVista
|
|
(
major
=
=
kWindowsVista
&
&
minor
>
=
2
)
)
)
;
}
inline
bool
IsWindows10OrLater
(
)
{
int
major
;
return
(
GetOsVersion
(
&
major
nullptr
nullptr
)
&
&
(
major
>
=
kWindows10
)
)
;
}
#
else
inline
bool
IsWindowsVistaOrLater
(
)
{
return
true
;
}
inline
bool
IsWindowsXpOrLater
(
)
{
return
true
;
}
inline
bool
IsWindows8OrLater
(
)
{
return
true
;
}
inline
bool
IsWindows10OrLater
(
)
{
return
true
;
}
#
endif
}
#
endif
