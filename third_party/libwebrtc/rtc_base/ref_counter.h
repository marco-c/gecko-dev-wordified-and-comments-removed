#
ifndef
RTC_BASE_REF_COUNTER_H_
#
define
RTC_BASE_REF_COUNTER_H_
#
include
<
atomic
>
#
include
"
rtc_base
/
ref_count
.
h
"
namespace
webrtc
{
namespace
webrtc_impl
{
class
RefCounter
{
public
:
explicit
RefCounter
(
int
ref_count
)
:
ref_count_
(
ref_count
)
{
}
RefCounter
(
)
=
delete
;
void
IncRef
(
)
{
ref_count_
.
fetch_add
(
1
std
:
:
memory_order_relaxed
)
;
}
rtc
:
:
RefCountReleaseStatus
DecRef
(
)
{
int
ref_count_after_subtract
=
ref_count_
.
fetch_sub
(
1
std
:
:
memory_order_acq_rel
)
-
1
;
return
ref_count_after_subtract
=
=
0
?
rtc
:
:
RefCountReleaseStatus
:
:
kDroppedLastRef
:
rtc
:
:
RefCountReleaseStatus
:
:
kOtherRefsRemained
;
}
bool
HasOneRef
(
)
const
{
return
ref_count_
.
load
(
std
:
:
memory_order_acquire
)
=
=
1
;
}
private
:
std
:
:
atomic
<
int
>
ref_count_
;
}
;
}
}
#
endif
