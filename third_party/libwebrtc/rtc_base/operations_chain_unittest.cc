#
include
"
rtc_base
/
operations_chain
.
h
"
#
include
<
atomic
>
#
include
<
cstddef
>
#
include
<
functional
>
#
include
<
memory
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
test
/
rtc_error_matchers
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
wait_until
.
h
"
namespace
rtc
{
using
:
:
testing
:
:
ElementsAre
;
namespace
{
constexpr
webrtc
:
:
TimeDelta
kDefaultTimeout
=
webrtc
:
:
TimeDelta
:
:
Millis
(
3000
)
;
}
class
OperationTracker
{
public
:
OperationTracker
(
)
:
background_thread_
(
webrtc
:
:
Thread
:
:
Create
(
)
)
{
background_thread_
-
>
Start
(
)
;
}
~
OperationTracker
(
)
{
}
std
:
:
function
<
void
(
std
:
:
function
<
void
(
)
>
)
>
BindSynchronousOperation
(
webrtc
:
:
Event
*
operation_complete_event
)
{
return
[
this
operation_complete_event
]
(
std
:
:
function
<
void
(
)
>
callback
)
{
StartSynchronousOperation
(
operation_complete_event
std
:
:
move
(
callback
)
)
;
}
;
}
std
:
:
function
<
void
(
std
:
:
function
<
void
(
)
>
)
>
BindAsynchronousOperation
(
webrtc
:
:
Event
*
unblock_operation_event
webrtc
:
:
Event
*
operation_complete_event
)
{
return
[
this
unblock_operation_event
operation_complete_event
]
(
std
:
:
function
<
void
(
)
>
callback
)
{
StartAsynchronousOperation
(
unblock_operation_event
operation_complete_event
std
:
:
move
(
callback
)
)
;
}
;
}
const
std
:
:
vector
<
webrtc
:
:
Event
*
>
&
completed_operation_events
(
)
const
{
return
completed_operation_events_
;
}
private
:
void
StartSynchronousOperation
(
webrtc
:
:
Event
*
operation_complete_event
std
:
:
function
<
void
(
)
>
callback
)
{
completed_operation_events_
.
push_back
(
operation_complete_event
)
;
operation_complete_event
-
>
Set
(
)
;
callback
(
)
;
}
void
StartAsynchronousOperation
(
webrtc
:
:
Event
*
unblock_operation_event
webrtc
:
:
Event
*
operation_complete_event
std
:
:
function
<
void
(
)
>
callback
)
{
webrtc
:
:
Thread
*
current_thread
=
webrtc
:
:
Thread
:
:
Current
(
)
;
background_thread_
-
>
PostTask
(
[
this
current_thread
unblock_operation_event
operation_complete_event
callback
]
(
)
{
unblock_operation_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
current_thread
-
>
PostTask
(
[
this
operation_complete_event
callback
]
(
)
{
completed_operation_events_
.
push_back
(
operation_complete_event
)
;
operation_complete_event
-
>
Set
(
)
;
callback
(
)
;
}
)
;
}
)
;
}
std
:
:
unique_ptr
<
webrtc
:
:
Thread
>
background_thread_
;
std
:
:
vector
<
webrtc
:
:
Event
*
>
completed_operation_events_
;
}
;
class
OperationTrackerProxy
{
public
:
OperationTrackerProxy
(
)
:
operations_chain_thread_
(
webrtc
:
:
Thread
:
:
Create
(
)
)
operation_tracker_
(
nullptr
)
operations_chain_
(
nullptr
)
{
operations_chain_thread_
-
>
Start
(
)
;
}
std
:
:
unique_ptr
<
webrtc
:
:
Event
>
Initialize
(
)
{
std
:
:
unique_ptr
<
webrtc
:
:
Event
>
event
=
std
:
:
make_unique
<
webrtc
:
:
Event
>
(
)
;
operations_chain_thread_
-
>
PostTask
(
[
this
event_ptr
=
event
.
get
(
)
]
(
)
{
operation_tracker_
=
std
:
:
make_unique
<
OperationTracker
>
(
)
;
operations_chain_
=
OperationsChain
:
:
Create
(
)
;
event_ptr
-
>
Set
(
)
;
}
)
;
return
event
;
}
void
SetOnChainEmptyCallback
(
std
:
:
function
<
void
(
)
>
on_chain_empty_callback
)
{
webrtc
:
:
Event
event
;
operations_chain_thread_
-
>
PostTask
(
[
this
&
event
on_chain_empty_callback
=
std
:
:
move
(
on_chain_empty_callback
)
]
(
)
{
operations_chain_
-
>
SetOnChainEmptyCallback
(
std
:
:
move
(
on_chain_empty_callback
)
)
;
event
.
Set
(
)
;
}
)
;
event
.
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
}
bool
IsEmpty
(
)
{
webrtc
:
:
Event
event
;
bool
is_empty
=
false
;
operations_chain_thread_
-
>
PostTask
(
[
this
&
event
&
is_empty
]
(
)
{
is_empty
=
operations_chain_
-
>
IsEmpty
(
)
;
event
.
Set
(
)
;
}
)
;
event
.
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
return
is_empty
;
}
std
:
:
unique_ptr
<
webrtc
:
:
Event
>
ReleaseOperationChain
(
)
{
std
:
:
unique_ptr
<
webrtc
:
:
Event
>
event
=
std
:
:
make_unique
<
webrtc
:
:
Event
>
(
)
;
operations_chain_thread_
-
>
PostTask
(
[
this
event_ptr
=
event
.
get
(
)
]
(
)
{
operations_chain_
=
nullptr
;
event_ptr
-
>
Set
(
)
;
}
)
;
return
event
;
}
std
:
:
unique_ptr
<
webrtc
:
:
Event
>
PostSynchronousOperation
(
)
{
std
:
:
unique_ptr
<
webrtc
:
:
Event
>
operation_complete_event
=
std
:
:
make_unique
<
webrtc
:
:
Event
>
(
)
;
operations_chain_thread_
-
>
PostTask
(
[
this
operation_complete_event_ptr
=
operation_complete_event
.
get
(
)
]
(
)
{
operations_chain_
-
>
ChainOperation
(
operation_tracker_
-
>
BindSynchronousOperation
(
operation_complete_event_ptr
)
)
;
}
)
;
return
operation_complete_event
;
}
std
:
:
unique_ptr
<
webrtc
:
:
Event
>
PostAsynchronousOperation
(
webrtc
:
:
Event
*
unblock_operation_event
)
{
std
:
:
unique_ptr
<
webrtc
:
:
Event
>
operation_complete_event
=
std
:
:
make_unique
<
webrtc
:
:
Event
>
(
)
;
operations_chain_thread_
-
>
PostTask
(
[
this
unblock_operation_event
operation_complete_event_ptr
=
operation_complete_event
.
get
(
)
]
(
)
{
operations_chain_
-
>
ChainOperation
(
operation_tracker_
-
>
BindAsynchronousOperation
(
unblock_operation_event
operation_complete_event_ptr
)
)
;
}
)
;
return
operation_complete_event
;
}
const
std
:
:
vector
<
webrtc
:
:
Event
*
>
&
completed_operation_events
(
)
const
{
return
operation_tracker_
-
>
completed_operation_events
(
)
;
}
private
:
std
:
:
unique_ptr
<
webrtc
:
:
Thread
>
operations_chain_thread_
;
std
:
:
unique_ptr
<
OperationTracker
>
operation_tracker_
;
scoped_refptr
<
OperationsChain
>
operations_chain_
;
}
;
class
SignalOnDestruction
final
{
public
:
SignalOnDestruction
(
bool
*
destructor_called
)
:
destructor_called_
(
destructor_called
)
{
RTC_DCHECK
(
destructor_called_
)
;
}
~
SignalOnDestruction
(
)
{
if
(
destructor_called_
)
{
*
destructor_called_
=
true
;
}
}
SignalOnDestruction
(
const
SignalOnDestruction
&
)
=
delete
;
SignalOnDestruction
&
operator
=
(
const
SignalOnDestruction
&
)
=
delete
;
SignalOnDestruction
(
SignalOnDestruction
&
&
other
)
:
SignalOnDestruction
(
other
.
destructor_called_
)
{
other
.
destructor_called_
=
nullptr
;
}
SignalOnDestruction
&
operator
=
(
SignalOnDestruction
&
&
other
)
{
destructor_called_
=
other
.
destructor_called_
;
other
.
destructor_called_
=
nullptr
;
return
*
this
;
}
private
:
bool
*
destructor_called_
;
}
;
TEST
(
OperationsChainTest
SynchronousOperation
)
{
OperationTrackerProxy
operation_tracker_proxy
;
operation_tracker_proxy
.
Initialize
(
)
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
operation_tracker_proxy
.
PostSynchronousOperation
(
)
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
}
TEST
(
OperationsChainTest
AsynchronousOperation
)
{
OperationTrackerProxy
operation_tracker_proxy
;
operation_tracker_proxy
.
Initialize
(
)
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
webrtc
:
:
Event
unblock_async_operation_event
;
auto
async_operation_completed_event
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
unblock_async_operation_event
)
;
EXPECT_FALSE
(
async_operation_completed_event
-
>
Wait
(
webrtc
:
:
TimeDelta
:
:
Zero
(
)
)
)
;
unblock_async_operation_event
.
Set
(
)
;
async_operation_completed_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
}
TEST
(
OperationsChainTest
SynchronousOperationsAreExecutedImmediatelyWhenChainIsEmpty
)
{
scoped_refptr
<
OperationsChain
>
operations_chain
=
OperationsChain
:
:
Create
(
)
;
OperationTracker
operation_tracker
;
webrtc
:
:
Event
event0
;
operations_chain
-
>
ChainOperation
(
operation_tracker
.
BindSynchronousOperation
(
&
event0
)
)
;
EXPECT_TRUE
(
event0
.
Wait
(
webrtc
:
:
TimeDelta
:
:
Zero
(
)
)
)
;
webrtc
:
:
Event
event1
;
operations_chain
-
>
ChainOperation
(
operation_tracker
.
BindSynchronousOperation
(
&
event1
)
)
;
EXPECT_TRUE
(
event1
.
Wait
(
webrtc
:
:
TimeDelta
:
:
Zero
(
)
)
)
;
}
TEST
(
OperationsChainTest
AsynchronousOperationBlocksSynchronousOperation
)
{
OperationTrackerProxy
operation_tracker_proxy
;
operation_tracker_proxy
.
Initialize
(
)
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
webrtc
:
:
Event
unblock_async_operation_event
;
auto
async_operation_completed_event
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
unblock_async_operation_event
)
;
auto
sync_operation_completed_event
=
operation_tracker_proxy
.
PostSynchronousOperation
(
)
;
unblock_async_operation_event
.
Set
(
)
;
sync_operation_completed_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_TRUE
(
async_operation_completed_event
-
>
Wait
(
webrtc
:
:
TimeDelta
:
:
Zero
(
)
)
)
;
}
TEST
(
OperationsChainTest
OperationsAreExecutedInOrder
)
{
OperationTrackerProxy
operation_tracker_proxy
;
operation_tracker_proxy
.
Initialize
(
)
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
webrtc
:
:
Event
operation0_unblock_event
;
auto
operation0_completed_event
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
operation0_unblock_event
)
;
webrtc
:
:
Event
operation1_unblock_event
;
auto
operation1_completed_event
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
operation1_unblock_event
)
;
auto
operation2_completed_event
=
operation_tracker_proxy
.
PostSynchronousOperation
(
)
;
auto
operation3_completed_event
=
operation_tracker_proxy
.
PostSynchronousOperation
(
)
;
webrtc
:
:
Event
operation4_unblock_event
;
auto
operation4_completed_event
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
operation4_unblock_event
)
;
auto
operation5_completed_event
=
operation_tracker_proxy
.
PostSynchronousOperation
(
)
;
webrtc
:
:
Event
operation6_unblock_event
;
auto
operation6_completed_event
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
operation6_unblock_event
)
;
operation6_unblock_event
.
Set
(
)
;
operation4_unblock_event
.
Set
(
)
;
operation1_unblock_event
.
Set
(
)
;
operation0_unblock_event
.
Set
(
)
;
operation0_completed_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
operation1_completed_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
operation2_completed_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
operation3_completed_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
operation4_completed_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
operation5_completed_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
operation6_completed_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_THAT
(
operation_tracker_proxy
.
completed_operation_events
(
)
ElementsAre
(
operation0_completed_event
.
get
(
)
operation1_completed_event
.
get
(
)
operation2_completed_event
.
get
(
)
operation3_completed_event
.
get
(
)
operation4_completed_event
.
get
(
)
operation5_completed_event
.
get
(
)
operation6_completed_event
.
get
(
)
)
)
;
}
TEST
(
OperationsChainTest
IsEmpty
)
{
OperationTrackerProxy
operation_tracker_proxy
;
operation_tracker_proxy
.
Initialize
(
)
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_TRUE
(
operation_tracker_proxy
.
IsEmpty
(
)
)
;
webrtc
:
:
Event
unblock_async_operation_event0
;
auto
async_operation_completed_event0
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
unblock_async_operation_event0
)
;
EXPECT_FALSE
(
operation_tracker_proxy
.
IsEmpty
(
)
)
;
unblock_async_operation_event0
.
Set
(
)
;
async_operation_completed_event0
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_TRUE
(
operation_tracker_proxy
.
IsEmpty
(
)
)
;
webrtc
:
:
Event
unblock_async_operation_event1
;
auto
async_operation_completed_event1
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
unblock_async_operation_event1
)
;
webrtc
:
:
Event
unblock_async_operation_event2
;
auto
async_operation_completed_event2
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
unblock_async_operation_event2
)
;
EXPECT_FALSE
(
operation_tracker_proxy
.
IsEmpty
(
)
)
;
unblock_async_operation_event1
.
Set
(
)
;
async_operation_completed_event1
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_FALSE
(
operation_tracker_proxy
.
IsEmpty
(
)
)
;
unblock_async_operation_event2
.
Set
(
)
;
async_operation_completed_event2
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_TRUE
(
operation_tracker_proxy
.
IsEmpty
(
)
)
;
}
TEST
(
OperationsChainTest
OnChainEmptyCallback
)
{
webrtc
:
:
AutoThread
main_thread
;
OperationTrackerProxy
operation_tracker_proxy
;
operation_tracker_proxy
.
Initialize
(
)
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
std
:
:
atomic
<
size_t
>
on_empty_callback_counter
(
0u
)
;
operation_tracker_proxy
.
SetOnChainEmptyCallback
(
[
&
on_empty_callback_counter
]
{
+
+
on_empty_callback_counter
;
}
)
;
webrtc
:
:
Event
unblock_async_operation_event0
;
auto
async_operation_completed_event0
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
unblock_async_operation_event0
)
;
EXPECT_EQ
(
0u
on_empty_callback_counter
)
;
unblock_async_operation_event0
.
Set
(
)
;
async_operation_completed_event0
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_THAT
(
webrtc
:
:
WaitUntil
(
[
&
]
{
return
on_empty_callback_counter
=
=
1u
;
}
:
:
testing
:
:
IsTrue
(
)
{
.
timeout
=
kDefaultTimeout
}
)
webrtc
:
:
IsRtcOk
(
)
)
;
webrtc
:
:
Event
unblock_async_operation_event1
;
auto
async_operation_completed_event1
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
unblock_async_operation_event1
)
;
webrtc
:
:
Event
unblock_async_operation_event2
;
auto
async_operation_completed_event2
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
unblock_async_operation_event2
)
;
EXPECT_THAT
(
webrtc
:
:
WaitUntil
(
[
&
]
{
return
on_empty_callback_counter
=
=
1u
;
}
:
:
testing
:
:
IsTrue
(
)
{
.
timeout
=
kDefaultTimeout
}
)
webrtc
:
:
IsRtcOk
(
)
)
;
unblock_async_operation_event1
.
Set
(
)
;
async_operation_completed_event1
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_THAT
(
webrtc
:
:
WaitUntil
(
[
&
]
{
return
on_empty_callback_counter
=
=
1u
;
}
:
:
testing
:
:
IsTrue
(
)
{
.
timeout
=
kDefaultTimeout
}
)
webrtc
:
:
IsRtcOk
(
)
)
;
unblock_async_operation_event2
.
Set
(
)
;
async_operation_completed_event2
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_THAT
(
webrtc
:
:
WaitUntil
(
[
&
]
{
return
on_empty_callback_counter
=
=
2u
;
}
:
:
testing
:
:
IsTrue
(
)
{
.
timeout
=
kDefaultTimeout
}
)
webrtc
:
:
IsRtcOk
(
)
)
;
}
TEST
(
OperationsChainTest
SafeToReleaseReferenceToOperationChainWhileOperationIsPending
)
{
OperationTrackerProxy
operation_tracker_proxy
;
operation_tracker_proxy
.
Initialize
(
)
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
webrtc
:
:
Event
unblock_async_operation_event
;
auto
async_operation_completed_event
=
operation_tracker_proxy
.
PostAsynchronousOperation
(
&
unblock_async_operation_event
)
;
operation_tracker_proxy
.
ReleaseOperationChain
(
)
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
unblock_async_operation_event
.
Set
(
)
;
async_operation_completed_event
-
>
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
}
TEST
(
OperationsChainTest
FunctorIsNotDestroyedWhileExecuting
)
{
scoped_refptr
<
OperationsChain
>
operations_chain
=
OperationsChain
:
:
Create
(
)
;
bool
destructor_called
=
false
;
SignalOnDestruction
signal_on_destruction
(
&
destructor_called
)
;
operations_chain
-
>
ChainOperation
(
[
signal_on_destruction
=
std
:
:
move
(
signal_on_destruction
)
&
destructor_called
]
(
std
:
:
function
<
void
(
)
>
callback
)
{
EXPECT_FALSE
(
destructor_called
)
;
callback
(
)
;
EXPECT_FALSE
(
destructor_called
)
;
}
)
;
EXPECT_TRUE
(
destructor_called
)
;
}
#
if
RTC_DCHECK_IS_ON
&
&
GTEST_HAS_DEATH_TEST
&
&
!
defined
(
WEBRTC_ANDROID
)
TEST
(
OperationsChainDeathTest
OperationNotInvokingCallbackShouldCrash
)
{
scoped_refptr
<
OperationsChain
>
operations_chain
=
OperationsChain
:
:
Create
(
)
;
EXPECT_DEATH
(
operations_chain
-
>
ChainOperation
(
[
]
(
std
:
:
function
<
void
(
)
>
callback
)
{
}
)
"
"
)
;
}
TEST
(
OperationsChainDeathTest
OperationInvokingCallbackMultipleTimesShouldCrash
)
{
scoped_refptr
<
OperationsChain
>
operations_chain
=
OperationsChain
:
:
Create
(
)
;
EXPECT_DEATH
(
operations_chain
-
>
ChainOperation
(
[
]
(
std
:
:
function
<
void
(
)
>
callback
)
{
callback
(
)
;
callback
(
)
;
}
)
"
"
)
;
}
#
endif
}
