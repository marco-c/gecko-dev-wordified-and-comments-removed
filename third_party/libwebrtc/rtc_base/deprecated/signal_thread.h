#
ifndef
RTC_BASE_DEPRECATED_SIGNAL_THREAD_H_
#
define
RTC_BASE_DEPRECATED_SIGNAL_THREAD_H_
#
include
<
string
>
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
deprecation
.
h
"
#
include
"
rtc_base
/
message_handler
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
rtc
{
class
DEPRECATED_SignalThread
:
public
sigslot
:
:
has_slots
<
>
protected
MessageHandlerAutoCleanup
{
public
:
DEPRECATED_SignalThread
(
)
;
bool
SetName
(
const
std
:
:
string
&
name
const
void
*
obj
)
;
void
Start
(
)
;
void
Destroy
(
bool
wait
)
;
void
Release
(
)
;
sigslot
:
:
signal1
<
DEPRECATED_SignalThread
*
>
SignalWorkDone
;
enum
{
ST_MSG_WORKER_DONE
ST_MSG_FIRST_AVAILABLE
}
;
protected
:
~
DEPRECATED_SignalThread
(
)
override
;
Thread
*
worker
(
)
{
return
&
worker_
;
}
virtual
void
OnWorkStart
(
)
{
}
virtual
void
DoWork
(
)
=
0
;
bool
ContinueWork
(
)
;
virtual
void
OnWorkStop
(
)
{
}
virtual
void
OnWorkDone
(
)
{
}
void
OnMessage
(
Message
*
msg
)
override
;
private
:
enum
State
{
kInit
kRunning
kReleasing
kComplete
kStopping
}
;
class
Worker
:
public
Thread
{
public
:
explicit
Worker
(
DEPRECATED_SignalThread
*
parent
)
;
Worker
(
)
=
delete
;
Worker
(
const
Worker
&
)
=
delete
;
Worker
&
operator
=
(
const
Worker
&
)
=
delete
;
~
Worker
(
)
override
;
void
Run
(
)
override
;
bool
IsProcessingMessagesForTesting
(
)
override
;
private
:
DEPRECATED_SignalThread
*
parent_
;
}
;
class
RTC_SCOPED_LOCKABLE
EnterExit
{
public
:
explicit
EnterExit
(
DEPRECATED_SignalThread
*
t
)
RTC_EXCLUSIVE_LOCK_FUNCTION
(
t
-
>
mutex_
)
:
t_
(
t
)
{
t_
-
>
mutex_
.
Lock
(
)
;
RTC_DCHECK_NE
(
0
t_
-
>
refcount_
)
;
+
+
t_
-
>
refcount_
;
}
EnterExit
(
)
=
delete
;
EnterExit
(
const
EnterExit
&
)
=
delete
;
EnterExit
&
operator
=
(
const
EnterExit
&
)
=
delete
;
~
EnterExit
(
)
RTC_UNLOCK_FUNCTION
(
)
{
bool
d
=
(
0
=
=
-
-
t_
-
>
refcount_
)
;
t_
-
>
mutex_
.
Unlock
(
)
;
if
(
d
)
delete
t_
;
}
private
:
DEPRECATED_SignalThread
*
t_
;
}
;
void
Run
(
)
;
void
OnMainThreadDestroyed
(
)
;
Thread
*
main_
;
Worker
worker_
;
webrtc
:
:
Mutex
mutex_
;
State
state_
RTC_GUARDED_BY
(
mutex_
)
;
int
refcount_
RTC_GUARDED_BY
(
mutex_
)
;
bool
destroy_called_
RTC_GUARDED_BY
(
mutex_
)
=
false
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
DEPRECATED_SignalThread
)
;
}
;
typedef
RTC_DEPRECATED
DEPRECATED_SignalThread
SignalThread
;
}
#
endif
