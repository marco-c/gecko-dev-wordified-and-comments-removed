#
include
"
rtc_base
/
platform_thread
.
h
"
#
include
<
optional
>
#
include
"
rtc_base
/
event
.
h
"
#
include
"
system_wrappers
/
include
/
sleep
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
rtc
{
TEST
(
PlatformThreadTest
DefaultConstructedIsEmpty
)
{
PlatformThread
thread
;
EXPECT_EQ
(
thread
.
GetHandle
(
)
std
:
:
nullopt
)
;
EXPECT_TRUE
(
thread
.
empty
(
)
)
;
}
TEST
(
PlatformThreadTest
StartFinalize
)
{
PlatformThread
thread
=
PlatformThread
:
:
SpawnJoinable
(
[
]
{
}
"
1
"
)
;
EXPECT_NE
(
thread
.
GetHandle
(
)
std
:
:
nullopt
)
;
EXPECT_FALSE
(
thread
.
empty
(
)
)
;
thread
.
Finalize
(
)
;
EXPECT_TRUE
(
thread
.
empty
(
)
)
;
webrtc
:
:
Event
done
;
thread
=
PlatformThread
:
:
SpawnDetached
(
[
&
]
{
done
.
Set
(
)
;
}
"
2
"
)
;
EXPECT_FALSE
(
thread
.
empty
(
)
)
;
thread
.
Finalize
(
)
;
EXPECT_TRUE
(
thread
.
empty
(
)
)
;
done
.
Wait
(
webrtc
:
:
TimeDelta
:
:
Seconds
(
30
)
)
;
}
TEST
(
PlatformThreadTest
MovesEmpty
)
{
PlatformThread
thread1
;
PlatformThread
thread2
=
std
:
:
move
(
thread1
)
;
EXPECT_TRUE
(
thread1
.
empty
(
)
)
;
EXPECT_TRUE
(
thread2
.
empty
(
)
)
;
}
TEST
(
PlatformThreadTest
MovesHandles
)
{
PlatformThread
thread1
=
PlatformThread
:
:
SpawnJoinable
(
[
]
{
}
"
1
"
)
;
PlatformThread
thread2
=
std
:
:
move
(
thread1
)
;
EXPECT_TRUE
(
thread1
.
empty
(
)
)
;
EXPECT_FALSE
(
thread2
.
empty
(
)
)
;
webrtc
:
:
Event
done
;
thread1
=
PlatformThread
:
:
SpawnDetached
(
[
&
]
{
done
.
Set
(
)
;
}
"
2
"
)
;
thread2
=
std
:
:
move
(
thread1
)
;
EXPECT_TRUE
(
thread1
.
empty
(
)
)
;
EXPECT_FALSE
(
thread2
.
empty
(
)
)
;
done
.
Wait
(
webrtc
:
:
TimeDelta
:
:
Seconds
(
30
)
)
;
}
TEST
(
PlatformThreadTest
TwoThreadHandlesAreDifferentWhenStartedAndEqualWhenJoined
)
{
PlatformThread
thread1
=
PlatformThread
(
)
;
PlatformThread
thread2
=
PlatformThread
(
)
;
EXPECT_EQ
(
thread1
.
GetHandle
(
)
thread2
.
GetHandle
(
)
)
;
thread1
=
PlatformThread
:
:
SpawnJoinable
(
[
]
{
}
"
1
"
)
;
thread2
=
PlatformThread
:
:
SpawnJoinable
(
[
]
{
}
"
2
"
)
;
EXPECT_NE
(
thread1
.
GetHandle
(
)
thread2
.
GetHandle
(
)
)
;
thread1
.
Finalize
(
)
;
EXPECT_NE
(
thread1
.
GetHandle
(
)
thread2
.
GetHandle
(
)
)
;
thread2
.
Finalize
(
)
;
EXPECT_EQ
(
thread1
.
GetHandle
(
)
thread2
.
GetHandle
(
)
)
;
}
TEST
(
PlatformThreadTest
RunFunctionIsCalled
)
{
bool
flag
=
false
;
PlatformThread
:
:
SpawnJoinable
(
[
&
]
{
flag
=
true
;
}
"
T
"
)
;
EXPECT_TRUE
(
flag
)
;
}
TEST
(
PlatformThreadTest
JoinsThread
)
{
webrtc
:
:
Event
event
;
PlatformThread
:
:
SpawnJoinable
(
[
&
]
{
event
.
Set
(
)
;
}
"
T
"
)
;
EXPECT_TRUE
(
event
.
Wait
(
webrtc
:
:
TimeDelta
:
:
Zero
(
)
)
)
;
}
TEST
(
PlatformThreadTest
StopsBeforeDetachedThreadExits
)
{
bool
flag
=
false
;
webrtc
:
:
Event
thread_started
;
webrtc
:
:
Event
thread_continue
;
webrtc
:
:
Event
thread_exiting
;
PlatformThread
:
:
SpawnDetached
(
[
&
]
{
thread_started
.
Set
(
)
;
thread_continue
.
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
flag
=
true
;
thread_exiting
.
Set
(
)
;
}
"
T
"
)
;
thread_started
.
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_FALSE
(
flag
)
;
thread_continue
.
Set
(
)
;
thread_exiting
.
Wait
(
webrtc
:
:
Event
:
:
kForever
)
;
EXPECT_TRUE
(
flag
)
;
}
}
