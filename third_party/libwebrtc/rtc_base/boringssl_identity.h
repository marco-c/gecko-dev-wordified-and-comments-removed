#
ifndef
RTC_BASE_BORINGSSL_IDENTITY_H_
#
define
RTC_BASE_BORINGSSL_IDENTITY_H_
#
include
<
openssl
/
ossl_typ
.
h
>
#
include
<
ctime
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
rtc_base
/
boringssl_certificate
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
openssl_key_pair
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_identity
.
h
"
namespace
rtc
{
class
BoringSSLIdentity
final
:
public
SSLIdentity
{
public
:
static
std
:
:
unique_ptr
<
BoringSSLIdentity
>
CreateWithExpiration
(
const
std
:
:
string
&
common_name
const
KeyParams
&
key_params
time_t
certificate_lifetime
)
;
static
std
:
:
unique_ptr
<
BoringSSLIdentity
>
CreateForTest
(
const
SSLIdentityParams
&
params
)
;
static
std
:
:
unique_ptr
<
SSLIdentity
>
CreateFromPEMStrings
(
const
std
:
:
string
&
private_key
const
std
:
:
string
&
certificate
)
;
static
std
:
:
unique_ptr
<
SSLIdentity
>
CreateFromPEMChainStrings
(
const
std
:
:
string
&
private_key
const
std
:
:
string
&
certificate_chain
)
;
~
BoringSSLIdentity
(
)
override
;
const
BoringSSLCertificate
&
certificate
(
)
const
override
;
const
SSLCertChain
&
cert_chain
(
)
const
override
;
bool
ConfigureIdentity
(
SSL_CTX
*
ctx
)
;
std
:
:
string
PrivateKeyToPEMString
(
)
const
override
;
std
:
:
string
PublicKeyToPEMString
(
)
const
override
;
bool
operator
=
=
(
const
BoringSSLIdentity
&
other
)
const
;
bool
operator
!
=
(
const
BoringSSLIdentity
&
other
)
const
;
private
:
BoringSSLIdentity
(
std
:
:
unique_ptr
<
OpenSSLKeyPair
>
key_pair
std
:
:
unique_ptr
<
BoringSSLCertificate
>
certificate
)
;
BoringSSLIdentity
(
std
:
:
unique_ptr
<
OpenSSLKeyPair
>
key_pair
std
:
:
unique_ptr
<
SSLCertChain
>
cert_chain
)
;
std
:
:
unique_ptr
<
SSLIdentity
>
CloneInternal
(
)
const
override
;
static
std
:
:
unique_ptr
<
BoringSSLIdentity
>
CreateInternal
(
const
SSLIdentityParams
&
params
)
;
std
:
:
unique_ptr
<
OpenSSLKeyPair
>
key_pair_
;
std
:
:
unique_ptr
<
SSLCertChain
>
cert_chain_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
BoringSSLIdentity
)
;
}
;
}
#
endif
