#
ifndef
RTC_BASE_FAKE_SSL_IDENTITY_H_
#
define
RTC_BASE_FAKE_SSL_IDENTITY_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_identity
.
h
"
namespace
webrtc
{
class
FakeSSLCertificate
:
public
rtc
:
:
SSLCertificate
{
public
:
explicit
FakeSSLCertificate
(
absl
:
:
string_view
pem_string
)
;
FakeSSLCertificate
(
const
FakeSSLCertificate
&
)
;
~
FakeSSLCertificate
(
)
override
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificate
>
Clone
(
)
const
override
;
std
:
:
string
ToPEMString
(
)
const
override
;
void
ToDER
(
Buffer
*
der_buffer
)
const
override
;
int64_t
CertificateExpirationTime
(
)
const
override
;
bool
GetSignatureDigestAlgorithm
(
std
:
:
string
*
algorithm
)
const
override
;
bool
ComputeDigest
(
absl
:
:
string_view
algorithm
unsigned
char
*
digest
size_t
size
size_t
*
length
)
const
override
;
void
SetCertificateExpirationTime
(
int64_t
expiration_time
)
;
void
set_digest_algorithm
(
absl
:
:
string_view
algorithm
)
;
private
:
std
:
:
string
pem_string_
;
std
:
:
string
digest_algorithm_
;
int64_t
expiration_time_
;
}
;
class
FakeSSLIdentity
:
public
rtc
:
:
SSLIdentity
{
public
:
explicit
FakeSSLIdentity
(
absl
:
:
string_view
pem_string
)
;
explicit
FakeSSLIdentity
(
const
std
:
:
vector
<
std
:
:
string
>
&
pem_strings
)
;
explicit
FakeSSLIdentity
(
const
FakeSSLCertificate
&
cert
)
;
explicit
FakeSSLIdentity
(
const
FakeSSLIdentity
&
o
)
;
~
FakeSSLIdentity
(
)
override
;
const
rtc
:
:
SSLCertificate
&
certificate
(
)
const
override
;
const
rtc
:
:
SSLCertChain
&
cert_chain
(
)
const
override
;
std
:
:
string
PrivateKeyToPEMString
(
)
const
override
;
std
:
:
string
PublicKeyToPEMString
(
)
const
override
;
virtual
bool
operator
=
=
(
const
rtc
:
:
SSLIdentity
&
other
)
const
;
private
:
std
:
:
unique_ptr
<
rtc
:
:
SSLIdentity
>
CloneInternal
(
)
const
override
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertChain
>
cert_chain_
;
}
;
}
namespace
rtc
{
using
:
:
webrtc
:
:
FakeSSLCertificate
;
using
:
:
webrtc
:
:
FakeSSLIdentity
;
}
#
endif
