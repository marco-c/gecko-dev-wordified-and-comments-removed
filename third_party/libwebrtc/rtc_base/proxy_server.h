#
ifndef
RTC_BASE_PROXY_SERVER_H_
#
define
RTC_BASE_PROXY_SERVER_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
rtc_base
/
memory
/
fifo_buffer
.
h
"
#
include
"
rtc_base
/
server_socket_adapters
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
namespace
rtc
{
class
SocketFactory
;
class
ProxyBinding
:
public
sigslot
:
:
has_slots
<
>
{
public
:
ProxyBinding
(
AsyncProxyServerSocket
*
in_socket
Socket
*
out_socket
)
;
~
ProxyBinding
(
)
override
;
ProxyBinding
(
const
ProxyBinding
&
)
=
delete
;
ProxyBinding
&
operator
=
(
const
ProxyBinding
&
)
=
delete
;
sigslot
:
:
signal1
<
ProxyBinding
*
>
SignalDestroyed
;
private
:
void
OnConnectRequest
(
AsyncProxyServerSocket
*
socket
const
SocketAddress
&
addr
)
;
void
OnInternalRead
(
Socket
*
socket
)
;
void
OnInternalWrite
(
Socket
*
socket
)
;
void
OnInternalClose
(
Socket
*
socket
int
err
)
;
void
OnExternalConnect
(
Socket
*
socket
)
;
void
OnExternalRead
(
Socket
*
socket
)
;
void
OnExternalWrite
(
Socket
*
socket
)
;
void
OnExternalClose
(
Socket
*
socket
int
err
)
;
static
void
Read
(
Socket
*
socket
FifoBuffer
*
buffer
)
;
static
void
Write
(
Socket
*
socket
FifoBuffer
*
buffer
)
;
void
Destroy
(
)
;
static
const
int
kBufferSize
=
4096
;
std
:
:
unique_ptr
<
AsyncProxyServerSocket
>
int_socket_
;
std
:
:
unique_ptr
<
Socket
>
ext_socket_
;
bool
connected_
;
FifoBuffer
out_buffer_
;
FifoBuffer
in_buffer_
;
}
;
class
ProxyServer
:
public
sigslot
:
:
has_slots
<
>
{
public
:
ProxyServer
(
SocketFactory
*
int_factory
const
SocketAddress
&
int_addr
SocketFactory
*
ext_factory
const
SocketAddress
&
ext_ip
)
;
~
ProxyServer
(
)
override
;
ProxyServer
(
const
ProxyServer
&
)
=
delete
;
ProxyServer
&
operator
=
(
const
ProxyServer
&
)
=
delete
;
SocketAddress
GetServerAddress
(
)
;
protected
:
void
OnAcceptEvent
(
Socket
*
socket
)
;
virtual
AsyncProxyServerSocket
*
WrapSocket
(
Socket
*
socket
)
=
0
;
private
:
SocketFactory
*
ext_factory_
;
SocketAddress
ext_ip_
;
std
:
:
unique_ptr
<
Socket
>
server_socket_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
ProxyBinding
>
>
bindings_
;
}
;
class
SocksProxyServer
:
public
ProxyServer
{
public
:
SocksProxyServer
(
SocketFactory
*
int_factory
const
SocketAddress
&
int_addr
SocketFactory
*
ext_factory
const
SocketAddress
&
ext_ip
)
:
ProxyServer
(
int_factory
int_addr
ext_factory
ext_ip
)
{
}
SocksProxyServer
(
const
SocksProxyServer
&
)
=
delete
;
SocksProxyServer
&
operator
=
(
const
SocksProxyServer
&
)
=
delete
;
protected
:
AsyncProxyServerSocket
*
WrapSocket
(
Socket
*
socket
)
override
;
}
;
}
#
endif
