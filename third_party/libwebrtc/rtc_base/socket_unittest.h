#
ifndef
RTC_BASE_SOCKET_UNITTEST_H_
#
define
RTC_BASE_SOCKET_UNITTEST_H_
#
include
"
rtc_base
/
gunit
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
rtc
{
class
SocketTest
:
public
:
:
testing
:
:
Test
{
protected
:
explicit
SocketTest
(
rtc
:
:
SocketFactory
*
socket_factory
)
:
kIPv4Loopback
(
INADDR_LOOPBACK
)
kIPv6Loopback
(
in6addr_loopback
)
socket_factory_
(
socket_factory
)
{
}
void
TestConnectIPv4
(
)
;
void
TestConnectIPv6
(
)
;
void
TestConnectWithDnsLookupIPv4
(
)
;
void
TestConnectWithDnsLookupIPv6
(
)
;
void
TestConnectFailIPv4
(
)
;
void
TestConnectFailIPv6
(
)
;
void
TestConnectWithDnsLookupFailIPv4
(
)
;
void
TestConnectWithDnsLookupFailIPv6
(
)
;
void
TestConnectWithClosedSocketIPv4
(
)
;
void
TestConnectWithClosedSocketIPv6
(
)
;
void
TestConnectWhileNotClosedIPv4
(
)
;
void
TestConnectWhileNotClosedIPv6
(
)
;
void
TestServerCloseDuringConnectIPv4
(
)
;
void
TestServerCloseDuringConnectIPv6
(
)
;
void
TestClientCloseDuringConnectIPv4
(
)
;
void
TestClientCloseDuringConnectIPv6
(
)
;
void
TestServerCloseIPv4
(
)
;
void
TestServerCloseIPv6
(
)
;
void
TestCloseInClosedCallbackIPv4
(
)
;
void
TestCloseInClosedCallbackIPv6
(
)
;
void
TestDeleteInReadCallbackIPv4
(
)
;
void
TestDeleteInReadCallbackIPv6
(
)
;
void
TestSocketServerWaitIPv4
(
)
;
void
TestSocketServerWaitIPv6
(
)
;
void
TestTcpIPv4
(
)
;
void
TestTcpIPv6
(
)
;
void
TestSingleFlowControlCallbackIPv4
(
)
;
void
TestSingleFlowControlCallbackIPv6
(
)
;
void
TestUdpIPv4
(
)
;
void
TestUdpIPv6
(
)
;
void
TestUdpReadyToSendIPv4
(
)
;
void
TestUdpReadyToSendIPv6
(
)
;
void
TestGetSetOptionsIPv4
(
)
;
void
TestGetSetOptionsIPv6
(
)
;
void
TestSocketRecvTimestampIPv4
(
)
;
void
TestSocketRecvTimestampIPv6
(
)
;
static
const
int
kTimeout
=
5000
;
const
IPAddress
kIPv4Loopback
;
const
IPAddress
kIPv6Loopback
;
protected
:
void
TcpInternal
(
const
IPAddress
&
loopback
size_t
data_size
ptrdiff_t
max_send_size
)
;
private
:
void
ConnectInternal
(
const
IPAddress
&
loopback
)
;
void
ConnectWithDnsLookupInternal
(
const
IPAddress
&
loopback
const
std
:
:
string
&
host
)
;
void
ConnectFailInternal
(
const
IPAddress
&
loopback
)
;
void
ConnectWithDnsLookupFailInternal
(
const
IPAddress
&
loopback
)
;
void
ConnectWithClosedSocketInternal
(
const
IPAddress
&
loopback
)
;
void
ConnectWhileNotClosedInternal
(
const
IPAddress
&
loopback
)
;
void
ServerCloseDuringConnectInternal
(
const
IPAddress
&
loopback
)
;
void
ClientCloseDuringConnectInternal
(
const
IPAddress
&
loopback
)
;
void
ServerCloseInternal
(
const
IPAddress
&
loopback
)
;
void
CloseInClosedCallbackInternal
(
const
IPAddress
&
loopback
)
;
void
DeleteInReadCallbackInternal
(
const
IPAddress
&
loopback
)
;
void
SocketServerWaitInternal
(
const
IPAddress
&
loopback
)
;
void
SingleFlowControlCallbackInternal
(
const
IPAddress
&
loopback
)
;
void
UdpInternal
(
const
IPAddress
&
loopback
)
;
void
UdpReadyToSend
(
const
IPAddress
&
loopback
)
;
void
GetSetOptionsInternal
(
const
IPAddress
&
loopback
)
;
void
SocketRecvTimestamp
(
const
IPAddress
&
loopback
)
;
SocketFactory
*
socket_factory_
;
}
;
bool
IsUnspecOrEmptyIP
(
const
IPAddress
&
address
)
;
}
#
endif
