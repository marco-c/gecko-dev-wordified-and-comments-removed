#
include
"
rtc_base
/
server_socket_adapters
.
h
"
#
include
<
string
>
#
include
"
rtc_base
/
byte_buffer
.
h
"
namespace
rtc
{
AsyncProxyServerSocket
:
:
AsyncProxyServerSocket
(
Socket
*
socket
size_t
buffer_size
)
:
BufferedReadAdapter
(
socket
buffer_size
)
{
}
AsyncProxyServerSocket
:
:
~
AsyncProxyServerSocket
(
)
=
default
;
AsyncSSLServerSocket
:
:
AsyncSSLServerSocket
(
Socket
*
socket
)
:
BufferedReadAdapter
(
socket
1024
)
{
BufferInput
(
true
)
;
}
void
AsyncSSLServerSocket
:
:
ProcessInput
(
char
*
data
size_t
*
len
)
{
const
ArrayView
<
const
uint8_t
>
client_hello
=
AsyncSSLSocket
:
:
SslClientHello
(
)
;
if
(
*
len
<
client_hello
.
size
(
)
)
{
return
;
}
if
(
memcmp
(
client_hello
.
data
(
)
data
client_hello
.
size
(
)
)
!
=
0
)
{
Close
(
)
;
SignalCloseEvent
(
this
0
)
;
return
;
}
*
len
-
=
client_hello
.
size
(
)
;
RTC_DCHECK
(
*
len
=
=
0
)
;
const
ArrayView
<
const
uint8_t
>
server_hello
=
AsyncSSLSocket
:
:
SslServerHello
(
)
;
DirectSend
(
server_hello
.
data
(
)
server_hello
.
size
(
)
)
;
BufferInput
(
false
)
;
}
}
