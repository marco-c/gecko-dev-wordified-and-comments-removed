#
include
"
rtc_base
/
fake_clock
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
int64_t
FakeClock
:
:
TimeNanos
(
)
const
{
MutexLock
lock
(
&
lock_
)
;
return
time_ns_
;
}
void
FakeClock
:
:
SetTime
(
Timestamp
new_time
)
{
MutexLock
lock
(
&
lock_
)
;
RTC_DCHECK
(
new_time
.
us
(
)
*
1000
>
=
time_ns_
)
;
time_ns_
=
new_time
.
us
(
)
*
1000
;
}
void
FakeClock
:
:
AdvanceTime
(
TimeDelta
delta
)
{
MutexLock
lock
(
&
lock_
)
;
time_ns_
+
=
delta
.
ns
(
)
;
}
void
ThreadProcessingFakeClock
:
:
SetTime
(
Timestamp
time
)
{
clock_
.
SetTime
(
time
)
;
ThreadManager
:
:
ProcessAllMessageQueuesForTesting
(
)
;
}
void
ThreadProcessingFakeClock
:
:
AdvanceTime
(
TimeDelta
delta
)
{
clock_
.
AdvanceTime
(
delta
)
;
ThreadManager
:
:
ProcessAllMessageQueuesForTesting
(
)
;
}
ScopedBaseFakeClock
:
:
ScopedBaseFakeClock
(
)
{
prev_clock_
=
SetClockForTesting
(
this
)
;
}
ScopedBaseFakeClock
:
:
~
ScopedBaseFakeClock
(
)
{
SetClockForTesting
(
prev_clock_
)
;
}
ScopedFakeClock
:
:
ScopedFakeClock
(
)
{
prev_clock_
=
SetClockForTesting
(
this
)
;
}
ScopedFakeClock
:
:
~
ScopedFakeClock
(
)
{
SetClockForTesting
(
prev_clock_
)
;
}
}
