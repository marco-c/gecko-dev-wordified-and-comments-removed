#
ifndef
RTC_BASE_THREAD_MESSAGE_H_
#
define
RTC_BASE_THREAD_MESSAGE_H_
#
include
<
list
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
rtc_base
/
location
.
h
"
#
include
"
rtc_base
/
message_handler
.
h
"
namespace
rtc
{
class
MessageData
{
public
:
MessageData
(
)
{
}
virtual
~
MessageData
(
)
{
}
}
;
template
<
class
T
>
class
TypedMessageData
:
public
MessageData
{
public
:
explicit
TypedMessageData
(
const
T
&
data
)
:
data_
(
data
)
{
}
const
T
&
data
(
)
const
{
return
data_
;
}
T
&
data
(
)
{
return
data_
;
}
private
:
T
data_
;
}
;
template
<
class
T
>
class
ScopedMessageData
:
public
MessageData
{
public
:
explicit
ScopedMessageData
(
std
:
:
unique_ptr
<
T
>
data
)
:
data_
(
std
:
:
move
(
data
)
)
{
}
explicit
ScopedMessageData
(
T
*
data
)
:
data_
(
data
)
{
}
const
std
:
:
unique_ptr
<
T
>
&
data
(
)
const
{
return
data_
;
}
std
:
:
unique_ptr
<
T
>
&
data
(
)
{
return
data_
;
}
const
T
&
inner_data
(
)
const
{
return
*
data_
;
}
T
&
inner_data
(
)
{
return
*
data_
;
}
private
:
std
:
:
unique_ptr
<
T
>
data_
;
}
;
template
<
class
T
>
class
ScopedRefMessageData
:
public
MessageData
{
public
:
explicit
ScopedRefMessageData
(
T
*
data
)
:
data_
(
data
)
{
}
const
scoped_refptr
<
T
>
&
data
(
)
const
{
return
data_
;
}
scoped_refptr
<
T
>
&
data
(
)
{
return
data_
;
}
private
:
scoped_refptr
<
T
>
data_
;
}
;
template
<
class
T
>
inline
MessageData
*
WrapMessageData
(
const
T
&
data
)
{
return
new
TypedMessageData
<
T
>
(
data
)
;
}
template
<
class
T
>
inline
const
T
&
UseMessageData
(
MessageData
*
data
)
{
return
static_cast
<
TypedMessageData
<
T
>
*
>
(
data
)
-
>
data
(
)
;
}
template
<
class
T
>
class
DisposeData
:
public
MessageData
{
public
:
explicit
DisposeData
(
T
*
data
)
:
data_
(
data
)
{
}
virtual
~
DisposeData
(
)
{
delete
data_
;
}
private
:
T
*
data_
;
}
;
const
uint32_t
MQID_ANY
=
static_cast
<
uint32_t
>
(
-
1
)
;
const
uint32_t
MQID_DISPOSE
=
static_cast
<
uint32_t
>
(
-
2
)
;
struct
Message
{
Message
(
)
:
phandler
(
nullptr
)
message_id
(
0
)
pdata
(
nullptr
)
{
}
inline
bool
Match
(
MessageHandler
*
handler
uint32_t
id
)
const
{
return
(
handler
=
=
nullptr
|
|
handler
=
=
phandler
)
&
&
(
id
=
=
MQID_ANY
|
|
id
=
=
message_id
)
;
}
Location
posted_from
;
MessageHandler
*
phandler
;
uint32_t
message_id
;
MessageData
*
pdata
;
}
;
typedef
std
:
:
list
<
Message
>
MessageList
;
}
#
endif
