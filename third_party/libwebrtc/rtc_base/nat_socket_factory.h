#
ifndef
RTC_BASE_NAT_SOCKET_FACTORY_H_
#
define
RTC_BASE_NAT_SOCKET_FACTORY_H_
#
include
<
stddef
.
h
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
nat_server
.
h
"
#
include
"
rtc_base
/
nat_types
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
socket_factory
.
h
"
#
include
"
rtc_base
/
socket_server
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
rtc
{
const
size_t
kNATEncodedIPv4AddressSize
=
8U
;
const
size_t
kNATEncodedIPv6AddressSize
=
20U
;
class
NATInternalSocketFactory
{
public
:
virtual
~
NATInternalSocketFactory
(
)
{
}
virtual
Socket
*
CreateInternalSocket
(
int
family
int
type
const
SocketAddress
&
local_addr
SocketAddress
*
nat_addr
)
=
0
;
}
;
class
NATSocketFactory
:
public
SocketFactory
public
NATInternalSocketFactory
{
public
:
NATSocketFactory
(
SocketFactory
*
factory
const
SocketAddress
&
nat_udp_addr
const
SocketAddress
&
nat_tcp_addr
)
;
Socket
*
CreateSocket
(
int
family
int
type
)
override
;
Socket
*
CreateInternalSocket
(
int
family
int
type
const
SocketAddress
&
local_addr
SocketAddress
*
nat_addr
)
override
;
private
:
SocketFactory
*
factory_
;
SocketAddress
nat_udp_addr_
;
SocketAddress
nat_tcp_addr_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
NATSocketFactory
)
;
}
;
class
NATSocketServer
:
public
SocketServer
public
NATInternalSocketFactory
{
public
:
class
Translator
;
class
TranslatorMap
:
private
std
:
:
map
<
SocketAddress
Translator
*
>
{
public
:
~
TranslatorMap
(
)
;
Translator
*
Get
(
const
SocketAddress
&
ext_ip
)
;
Translator
*
Add
(
const
SocketAddress
&
ext_ip
Translator
*
)
;
void
Remove
(
const
SocketAddress
&
ext_ip
)
;
Translator
*
FindClient
(
const
SocketAddress
&
int_ip
)
;
}
;
class
Translator
{
public
:
Translator
(
NATSocketServer
*
server
NATType
type
const
SocketAddress
&
int_addr
SocketFactory
*
ext_factory
const
SocketAddress
&
ext_addr
)
;
~
Translator
(
)
;
SocketFactory
*
internal_factory
(
)
{
return
internal_server_
.
get
(
)
;
}
SocketAddress
internal_udp_address
(
)
const
{
return
nat_server_
-
>
internal_udp_address
(
)
;
}
SocketAddress
internal_tcp_address
(
)
const
{
return
SocketAddress
(
)
;
}
Translator
*
GetTranslator
(
const
SocketAddress
&
ext_ip
)
;
Translator
*
AddTranslator
(
const
SocketAddress
&
ext_ip
const
SocketAddress
&
int_ip
NATType
type
)
;
void
RemoveTranslator
(
const
SocketAddress
&
ext_ip
)
;
bool
AddClient
(
const
SocketAddress
&
int_ip
)
;
void
RemoveClient
(
const
SocketAddress
&
int_ip
)
;
Translator
*
FindClient
(
const
SocketAddress
&
int_ip
)
;
private
:
NATSocketServer
*
server_
;
std
:
:
unique_ptr
<
SocketServer
>
internal_server_
;
std
:
:
unique_ptr
<
NATServer
>
nat_server_
;
TranslatorMap
nats_
;
std
:
:
set
<
SocketAddress
>
clients_
;
}
;
explicit
NATSocketServer
(
SocketServer
*
ss
)
;
SocketServer
*
socketserver
(
)
{
return
server_
;
}
Thread
*
queue
(
)
{
return
msg_queue_
;
}
Translator
*
GetTranslator
(
const
SocketAddress
&
ext_ip
)
;
Translator
*
AddTranslator
(
const
SocketAddress
&
ext_ip
const
SocketAddress
&
int_ip
NATType
type
)
;
void
RemoveTranslator
(
const
SocketAddress
&
ext_ip
)
;
Socket
*
CreateSocket
(
int
family
int
type
)
override
;
void
SetMessageQueue
(
Thread
*
queue
)
override
;
bool
Wait
(
int
cms
bool
process_io
)
override
;
void
WakeUp
(
)
override
;
Socket
*
CreateInternalSocket
(
int
family
int
type
const
SocketAddress
&
local_addr
SocketAddress
*
nat_addr
)
override
;
private
:
SocketServer
*
server_
;
Thread
*
msg_queue_
;
TranslatorMap
nats_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
NATSocketServer
)
;
}
;
size_t
PackAddressForNAT
(
char
*
buf
size_t
buf_size
const
SocketAddress
&
remote_addr
)
;
size_t
UnpackAddressFromNAT
(
const
char
*
buf
size_t
buf_size
SocketAddress
*
remote_addr
)
;
}
#
endif
