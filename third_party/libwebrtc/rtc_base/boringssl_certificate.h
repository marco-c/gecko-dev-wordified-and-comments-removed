#
ifndef
RTC_BASE_BORINGSSL_CERTIFICATE_H_
#
define
RTC_BASE_BORINGSSL_CERTIFICATE_H_
#
include
<
openssl
/
ossl_typ
.
h
>
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_identity
.
h
"
namespace
rtc
{
class
OpenSSLKeyPair
;
class
BoringSSLCertificate
final
:
public
SSLCertificate
{
public
:
explicit
BoringSSLCertificate
(
bssl
:
:
UniquePtr
<
CRYPTO_BUFFER
>
cert_buffer
)
;
static
std
:
:
unique_ptr
<
BoringSSLCertificate
>
Generate
(
OpenSSLKeyPair
*
key_pair
const
SSLIdentityParams
&
params
)
;
static
std
:
:
unique_ptr
<
BoringSSLCertificate
>
FromPEMString
(
const
std
:
:
string
&
pem_string
)
;
~
BoringSSLCertificate
(
)
override
;
std
:
:
unique_ptr
<
SSLCertificate
>
Clone
(
)
const
override
;
CRYPTO_BUFFER
*
cert_buffer
(
)
const
{
return
cert_buffer_
.
get
(
)
;
}
std
:
:
string
ToPEMString
(
)
const
override
;
void
ToDER
(
Buffer
*
der_buffer
)
const
override
;
bool
operator
=
=
(
const
BoringSSLCertificate
&
other
)
const
;
bool
operator
!
=
(
const
BoringSSLCertificate
&
other
)
const
;
bool
ComputeDigest
(
const
std
:
:
string
&
algorithm
unsigned
char
*
digest
size_t
size
size_t
*
length
)
const
override
;
static
bool
ComputeDigest
(
const
CRYPTO_BUFFER
*
cert_buffer
const
std
:
:
string
&
algorithm
unsigned
char
*
digest
size_t
size
size_t
*
length
)
;
bool
GetSignatureDigestAlgorithm
(
std
:
:
string
*
algorithm
)
const
override
;
int64_t
CertificateExpirationTime
(
)
const
override
;
private
:
bssl
:
:
UniquePtr
<
CRYPTO_BUFFER
>
cert_buffer_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
BoringSSLCertificate
)
;
}
;
}
#
endif
