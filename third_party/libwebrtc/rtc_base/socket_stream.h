#
ifndef
RTC_BASE_SOCKET_STREAM_H_
#
define
RTC_BASE_SOCKET_STREAM_H_
#
include
<
stddef
.
h
>
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
stream
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
namespace
rtc
{
class
SocketStream
:
public
StreamInterface
public
sigslot
:
:
has_slots
<
>
{
public
:
explicit
SocketStream
(
Socket
*
socket
)
;
~
SocketStream
(
)
override
;
SocketStream
(
const
SocketStream
&
)
=
delete
;
SocketStream
&
operator
=
(
const
SocketStream
&
)
=
delete
;
void
Attach
(
Socket
*
socket
)
;
Socket
*
Detach
(
)
;
Socket
*
GetSocket
(
)
{
return
socket_
;
}
StreamState
GetState
(
)
const
override
;
StreamResult
Read
(
void
*
buffer
size_t
buffer_len
size_t
*
read
int
*
error
)
override
;
StreamResult
Write
(
const
void
*
data
size_t
data_len
size_t
*
written
int
*
error
)
override
;
void
Close
(
)
override
;
private
:
void
OnConnectEvent
(
Socket
*
socket
)
;
void
OnReadEvent
(
Socket
*
socket
)
;
void
OnWriteEvent
(
Socket
*
socket
)
;
void
OnCloseEvent
(
Socket
*
socket
int
err
)
;
Socket
*
socket_
;
}
;
}
#
endif
