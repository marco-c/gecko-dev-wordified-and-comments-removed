#
ifndef
RTC_BASE_FAKE_CLOCK_H_
#
define
RTC_BASE_FAKE_CLOCK_H_
#
include
<
stdint
.
h
>
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
namespace
webrtc
{
class
FakeClock
:
public
rtc
:
:
ClockInterface
{
public
:
FakeClock
(
)
=
default
;
FakeClock
(
const
FakeClock
&
)
=
delete
;
FakeClock
&
operator
=
(
const
FakeClock
&
)
=
delete
;
~
FakeClock
(
)
override
=
default
;
int64_t
TimeNanos
(
)
const
override
;
void
SetTime
(
Timestamp
new_time
)
;
void
AdvanceTime
(
TimeDelta
delta
)
;
private
:
mutable
Mutex
lock_
;
int64_t
time_ns_
RTC_GUARDED_BY
(
lock_
)
=
0
;
}
;
class
ThreadProcessingFakeClock
:
public
rtc
:
:
ClockInterface
{
public
:
int64_t
TimeNanos
(
)
const
override
{
return
clock_
.
TimeNanos
(
)
;
}
void
SetTime
(
Timestamp
time
)
;
void
AdvanceTime
(
TimeDelta
delta
)
;
private
:
FakeClock
clock_
;
}
;
class
ScopedBaseFakeClock
:
public
FakeClock
{
public
:
ScopedBaseFakeClock
(
)
;
~
ScopedBaseFakeClock
(
)
override
;
private
:
rtc
:
:
ClockInterface
*
prev_clock_
;
}
;
class
ScopedFakeClock
:
public
ThreadProcessingFakeClock
{
public
:
ScopedFakeClock
(
)
;
~
ScopedFakeClock
(
)
override
;
private
:
rtc
:
:
ClockInterface
*
prev_clock_
;
}
;
}
namespace
rtc
{
using
:
:
webrtc
:
:
FakeClock
;
using
:
:
webrtc
:
:
ScopedBaseFakeClock
;
using
:
:
webrtc
:
:
ScopedFakeClock
;
using
:
:
webrtc
:
:
ThreadProcessingFakeClock
;
}
#
endif
