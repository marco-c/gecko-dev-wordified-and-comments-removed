#
ifndef
RTC_BASE_ROBO_CALLER_H_
#
define
RTC_BASE_ROBO_CALLER_H_
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
function_view
.
h
"
#
include
"
rtc_base
/
system
/
assume
.
h
"
#
include
"
rtc_base
/
untyped_function
.
h
"
namespace
webrtc
{
namespace
robo_caller_impl
{
class
RoboCallerReceivers
{
public
:
RoboCallerReceivers
(
)
;
RoboCallerReceivers
(
const
RoboCallerReceivers
&
)
=
delete
;
RoboCallerReceivers
&
operator
=
(
const
RoboCallerReceivers
&
)
=
delete
;
RoboCallerReceivers
(
RoboCallerReceivers
&
&
)
=
delete
;
RoboCallerReceivers
&
operator
=
(
RoboCallerReceivers
&
&
)
=
delete
;
~
RoboCallerReceivers
(
)
;
void
AddReceiver
(
UntypedFunction
&
&
f
)
{
AddReceiverImpl
(
&
f
)
;
RTC_ASSUME
(
f
.
IsTriviallyDestructible
(
)
)
;
}
void
Foreach
(
rtc
:
:
FunctionView
<
void
(
UntypedFunction
&
)
>
fv
)
;
private
:
void
AddReceiverImpl
(
UntypedFunction
*
f
)
;
std
:
:
vector
<
UntypedFunction
>
receivers_
;
}
;
}
template
<
typename
.
.
.
ArgT
>
class
RoboCaller
{
public
:
RoboCaller
(
)
=
default
;
RoboCaller
(
const
RoboCaller
&
)
=
delete
;
RoboCaller
&
operator
=
(
const
RoboCaller
&
)
=
delete
;
RoboCaller
(
RoboCaller
&
&
)
=
delete
;
RoboCaller
&
operator
=
(
RoboCaller
&
&
)
=
delete
;
template
<
typename
F
>
void
AddReceiver
(
F
&
&
f
)
{
receivers_
.
AddReceiver
(
UntypedFunction
:
:
Create
<
void
(
ArgT
.
.
.
)
>
(
std
:
:
forward
<
F
>
(
f
)
)
)
;
}
template
<
typename
.
.
.
ArgU
>
void
Send
(
ArgU
&
&
.
.
.
args
)
{
receivers_
.
Foreach
(
[
&
]
(
UntypedFunction
&
f
)
{
f
.
Call
<
void
(
ArgT
.
.
.
)
>
(
std
:
:
forward
<
ArgU
>
(
args
)
.
.
.
)
;
}
)
;
}
private
:
robo_caller_impl
:
:
RoboCallerReceivers
receivers_
;
}
;
}
#
endif
