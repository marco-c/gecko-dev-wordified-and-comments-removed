#
ifndef
RTC_BASE_TASK_QUEUE_H_
#
define
RTC_BASE_TASK_QUEUE_H_
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
rtc
{
class
RTC_LOCKABLE
RTC_EXPORT
TaskQueue
{
public
:
using
Priority
=
:
:
webrtc
:
:
TaskQueueFactory
:
:
Priority
;
explicit
TaskQueue
(
std
:
:
unique_ptr
<
webrtc
:
:
TaskQueueBase
webrtc
:
:
TaskQueueDeleter
>
task_queue
)
;
~
TaskQueue
(
)
;
TaskQueue
(
const
TaskQueue
&
)
=
delete
;
TaskQueue
&
operator
=
(
const
TaskQueue
&
)
=
delete
;
bool
IsCurrent
(
)
const
;
webrtc
:
:
TaskQueueBase
*
Get
(
)
{
return
impl_
;
}
void
PostTask
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
)
{
impl_
-
>
PostTask
(
std
:
:
move
(
task
)
)
;
}
void
PostDelayedTask
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
webrtc
:
:
TimeDelta
delay
)
{
impl_
-
>
PostDelayedTask
(
std
:
:
move
(
task
)
delay
)
;
}
void
PostDelayedHighPrecisionTask
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
webrtc
:
:
TimeDelta
delay
)
{
impl_
-
>
PostDelayedHighPrecisionTask
(
std
:
:
move
(
task
)
delay
)
;
}
private
:
webrtc
:
:
TaskQueueBase
*
const
impl_
;
}
;
}
#
endif
