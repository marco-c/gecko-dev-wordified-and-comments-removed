#
ifndef
RTC_BASE_TASK_QUEUE_H_
#
define
RTC_BASE_TASK_QUEUE_H_
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
api
/
task_queue
/
queued_task
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
task_utils
/
to_queued_task
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
rtc
{
class
RTC_LOCKABLE
RTC_EXPORT
TaskQueue
{
public
:
using
Priority
=
:
:
webrtc
:
:
TaskQueueFactory
:
:
Priority
;
explicit
TaskQueue
(
std
:
:
unique_ptr
<
webrtc
:
:
TaskQueueBase
webrtc
:
:
TaskQueueDeleter
>
task_queue
)
;
~
TaskQueue
(
)
;
TaskQueue
(
const
TaskQueue
&
)
=
delete
;
TaskQueue
&
operator
=
(
const
TaskQueue
&
)
=
delete
;
bool
IsCurrent
(
)
const
;
webrtc
:
:
TaskQueueBase
*
Get
(
)
{
return
impl_
;
}
void
PostTask
(
std
:
:
unique_ptr
<
webrtc
:
:
QueuedTask
>
task
)
;
void
PostDelayedTask
(
std
:
:
unique_ptr
<
webrtc
:
:
QueuedTask
>
task
uint32_t
milliseconds
)
;
void
PostDelayedHighPrecisionTask
(
std
:
:
unique_ptr
<
webrtc
:
:
QueuedTask
>
task
uint32_t
milliseconds
)
;
void
PostDelayedTaskWithPrecision
(
webrtc
:
:
TaskQueueBase
:
:
DelayPrecision
precision
std
:
:
unique_ptr
<
webrtc
:
:
QueuedTask
>
task
uint32_t
milliseconds
)
;
template
<
class
Closure
typename
std
:
:
enable_if
<
!
std
:
:
is_convertible
<
Closure
std
:
:
unique_ptr
<
webrtc
:
:
QueuedTask
>
>
:
:
value
>
:
:
type
*
=
nullptr
>
void
PostTask
(
Closure
&
&
closure
)
{
PostTask
(
webrtc
:
:
ToQueuedTask
(
std
:
:
forward
<
Closure
>
(
closure
)
)
)
;
}
template
<
class
Closure
typename
std
:
:
enable_if
<
!
std
:
:
is_convertible
<
Closure
std
:
:
unique_ptr
<
webrtc
:
:
QueuedTask
>
>
:
:
value
>
:
:
type
*
=
nullptr
>
void
PostDelayedTask
(
Closure
&
&
closure
uint32_t
milliseconds
)
{
PostDelayedTask
(
webrtc
:
:
ToQueuedTask
(
std
:
:
forward
<
Closure
>
(
closure
)
)
milliseconds
)
;
}
template
<
class
Closure
typename
std
:
:
enable_if
<
!
std
:
:
is_convertible
<
Closure
std
:
:
unique_ptr
<
webrtc
:
:
QueuedTask
>
>
:
:
value
>
:
:
type
*
=
nullptr
>
void
PostDelayedHighPrecisionTask
(
Closure
&
&
closure
uint32_t
milliseconds
)
{
PostDelayedHighPrecisionTask
(
webrtc
:
:
ToQueuedTask
(
std
:
:
forward
<
Closure
>
(
closure
)
)
milliseconds
)
;
}
template
<
class
Closure
typename
std
:
:
enable_if
<
!
std
:
:
is_convertible
<
Closure
std
:
:
unique_ptr
<
webrtc
:
:
QueuedTask
>
>
:
:
value
>
:
:
type
*
=
nullptr
>
void
PostDelayedTaskWithPrecision
(
webrtc
:
:
TaskQueueBase
:
:
DelayPrecision
precision
Closure
&
&
closure
uint32_t
milliseconds
)
{
PostDelayedTaskWithPrecision
(
precision
webrtc
:
:
ToQueuedTask
(
std
:
:
forward
<
Closure
>
(
closure
)
)
milliseconds
)
;
}
private
:
webrtc
:
:
TaskQueueBase
*
const
impl_
;
}
;
}
#
endif
