#
ifndef
RTC_BASE_STRING_ENCODE_H_
#
define
RTC_BASE_STRING_ENCODE_H_
#
include
<
stddef
.
h
>
#
include
<
string
>
#
include
<
type_traits
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
string_to_number
.
h
"
namespace
rtc
{
std
:
:
string
hex_encode
(
const
std
:
:
string
&
str
)
;
std
:
:
string
hex_encode
(
const
char
*
source
size_t
srclen
)
;
std
:
:
string
hex_encode_with_delimiter
(
const
char
*
source
size_t
srclen
char
delimiter
)
;
size_t
hex_decode
(
char
*
buffer
size_t
buflen
const
char
*
source
size_t
srclen
)
;
size_t
hex_decode_with_delimiter
(
char
*
buffer
size_t
buflen
const
char
*
source
size_t
srclen
char
delimiter
)
;
size_t
hex_decode
(
char
*
buffer
size_t
buflen
const
std
:
:
string
&
source
)
;
size_t
hex_decode_with_delimiter
(
char
*
buffer
size_t
buflen
const
std
:
:
string
&
source
char
delimiter
)
;
std
:
:
string
join
(
const
std
:
:
vector
<
std
:
:
string
>
&
source
char
delimiter
)
;
size_t
split
(
const
std
:
:
string
&
source
char
delimiter
std
:
:
vector
<
std
:
:
string
>
*
fields
)
;
size_t
tokenize
(
const
std
:
:
string
&
source
char
delimiter
std
:
:
vector
<
std
:
:
string
>
*
fields
)
;
bool
tokenize_first
(
const
std
:
:
string
&
source
const
char
delimiter
std
:
:
string
*
token
std
:
:
string
*
rest
)
;
std
:
:
string
ToString
(
bool
b
)
;
std
:
:
string
ToString
(
const
char
*
s
)
;
std
:
:
string
ToString
(
std
:
:
string
t
)
;
std
:
:
string
ToString
(
short
s
)
;
std
:
:
string
ToString
(
unsigned
short
s
)
;
std
:
:
string
ToString
(
int
s
)
;
std
:
:
string
ToString
(
unsigned
int
s
)
;
std
:
:
string
ToString
(
long
int
s
)
;
std
:
:
string
ToString
(
unsigned
long
int
s
)
;
std
:
:
string
ToString
(
long
long
int
s
)
;
std
:
:
string
ToString
(
unsigned
long
long
int
s
)
;
std
:
:
string
ToString
(
double
t
)
;
std
:
:
string
ToString
(
long
double
t
)
;
std
:
:
string
ToString
(
const
void
*
p
)
;
template
<
typename
T
typename
std
:
:
enable_if
<
std
:
:
is_arithmetic
<
T
>
:
:
value
&
&
!
std
:
:
is_same
<
T
bool
>
:
:
value
int
>
:
:
type
=
0
>
static
bool
FromString
(
const
std
:
:
string
&
s
T
*
t
)
{
RTC_DCHECK
(
t
)
;
absl
:
:
optional
<
T
>
result
=
StringToNumber
<
T
>
(
s
)
;
if
(
result
)
*
t
=
*
result
;
return
result
.
has_value
(
)
;
}
bool
FromString
(
const
std
:
:
string
&
s
bool
*
b
)
;
template
<
typename
T
>
static
inline
T
FromString
(
const
std
:
:
string
&
str
)
{
T
val
;
FromString
(
str
&
val
)
;
return
val
;
}
}
#
endif
