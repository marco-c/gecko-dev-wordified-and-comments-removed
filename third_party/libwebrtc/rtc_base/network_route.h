#
ifndef
RTC_BASE_NETWORK_ROUTE_H_
#
define
RTC_BASE_NETWORK_ROUTE_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
rtc_base
/
network_constants
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
#
include
"
rtc_base
/
system
/
inline
.
h
"
namespace
rtc
{
class
RouteEndpoint
{
public
:
RouteEndpoint
(
)
{
}
RouteEndpoint
(
webrtc
:
:
AdapterType
adapter_type
uint16_t
adapter_id
uint16_t
network_id
bool
uses_turn
)
:
adapter_type_
(
adapter_type
)
adapter_id_
(
adapter_id
)
network_id_
(
network_id
)
uses_turn_
(
uses_turn
)
{
}
RouteEndpoint
(
const
RouteEndpoint
&
)
=
default
;
RouteEndpoint
&
operator
=
(
const
RouteEndpoint
&
)
=
default
;
static
RouteEndpoint
CreateWithNetworkId
(
uint16_t
network_id
)
{
return
RouteEndpoint
(
webrtc
:
:
ADAPTER_TYPE_UNKNOWN
0
network_id
false
)
;
}
RouteEndpoint
CreateWithTurn
(
bool
uses_turn
)
const
{
return
RouteEndpoint
(
adapter_type_
adapter_id_
network_id_
uses_turn
)
;
}
webrtc
:
:
AdapterType
adapter_type
(
)
const
{
return
adapter_type_
;
}
uint16_t
adapter_id
(
)
const
{
return
adapter_id_
;
}
uint16_t
network_id
(
)
const
{
return
network_id_
;
}
bool
uses_turn
(
)
const
{
return
uses_turn_
;
}
bool
operator
=
=
(
const
RouteEndpoint
&
other
)
const
;
private
:
webrtc
:
:
AdapterType
adapter_type_
=
webrtc
:
:
ADAPTER_TYPE_UNKNOWN
;
uint16_t
adapter_id_
=
0
;
uint16_t
network_id_
=
0
;
bool
uses_turn_
=
false
;
}
;
struct
NetworkRoute
{
bool
connected
=
false
;
RouteEndpoint
local
;
RouteEndpoint
remote
;
int
last_sent_packet_id
=
-
1
;
int
packet_overhead
=
0
;
RTC_NO_INLINE
inline
std
:
:
string
DebugString
(
)
const
{
webrtc
:
:
StringBuilder
oss
;
oss
<
<
"
[
connected
:
"
<
<
connected
<
<
"
local
:
[
"
<
<
local
.
adapter_id
(
)
<
<
"
/
"
<
<
local
.
network_id
(
)
<
<
"
"
<
<
webrtc
:
:
AdapterTypeToString
(
local
.
adapter_type
(
)
)
<
<
"
turn
:
"
<
<
local
.
uses_turn
(
)
<
<
"
]
remote
:
[
"
<
<
remote
.
adapter_id
(
)
<
<
"
/
"
<
<
remote
.
network_id
(
)
<
<
"
"
<
<
webrtc
:
:
AdapterTypeToString
(
remote
.
adapter_type
(
)
)
<
<
"
turn
:
"
<
<
remote
.
uses_turn
(
)
<
<
"
]
packet_overhead_bytes
:
"
<
<
packet_overhead
<
<
"
]
"
;
return
oss
.
Release
(
)
;
}
bool
operator
=
=
(
const
NetworkRoute
&
other
)
const
;
bool
operator
!
=
(
const
NetworkRoute
&
other
)
{
return
!
operator
=
=
(
other
)
;
}
}
;
}
#
endif
