#
include
"
rtc_base
/
numerics
/
moving_average
.
h
"
#
include
<
algorithm
>
#
include
"
rtc_base
/
checks
.
h
"
namespace
rtc
{
MovingAverage
:
:
MovingAverage
(
size_t
window_size
)
:
history_
(
window_size
0
)
{
RTC_DCHECK_LE
(
window_size
(
int64_t
{
1
}
<
<
32
)
-
1
)
;
}
MovingAverage
:
:
~
MovingAverage
(
)
=
default
;
void
MovingAverage
:
:
AddSample
(
int
sample
)
{
count_
+
+
;
size_t
index
=
count_
%
history_
.
size
(
)
;
if
(
count_
>
history_
.
size
(
)
)
sum_
-
=
history_
[
index
]
;
sum_
+
=
sample
;
history_
[
index
]
=
sample
;
}
absl
:
:
optional
<
int
>
MovingAverage
:
:
GetAverageRoundedDown
(
)
const
{
if
(
count_
=
=
0
)
return
absl
:
:
nullopt
;
return
sum_
/
Size
(
)
;
}
absl
:
:
optional
<
int
>
MovingAverage
:
:
GetAverageRoundedToClosest
(
)
const
{
if
(
count_
=
=
0
)
return
absl
:
:
nullopt
;
return
(
sum_
+
Size
(
)
/
2
)
/
Size
(
)
;
}
absl
:
:
optional
<
double
>
MovingAverage
:
:
GetUnroundedAverage
(
)
const
{
if
(
count_
=
=
0
)
return
absl
:
:
nullopt
;
return
sum_
/
static_cast
<
double
>
(
Size
(
)
)
;
}
void
MovingAverage
:
:
Reset
(
)
{
count_
=
0
;
sum_
=
0
;
}
size_t
MovingAverage
:
:
Size
(
)
const
{
return
std
:
:
min
(
count_
history_
.
size
(
)
)
;
}
}
