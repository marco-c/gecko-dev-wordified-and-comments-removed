#
ifndef
RTC_BASE_NUMERICS_EVENT_BASED_EXPONENTIAL_MOVING_AVERAGE_H_
#
define
RTC_BASE_NUMERICS_EVENT_BASED_EXPONENTIAL_MOVING_AVERAGE_H_
#
include
<
cmath
>
#
include
<
cstdint
>
#
include
<
limits
>
#
include
"
absl
/
types
/
optional
.
h
"
namespace
rtc
{
class
EventBasedExponentialMovingAverage
{
public
:
explicit
EventBasedExponentialMovingAverage
(
int
half_time
)
;
void
AddSample
(
int64_t
now
int
value
)
;
double
GetAverage
(
)
const
{
return
value_
;
}
double
GetVariance
(
)
const
{
return
sample_variance_
;
}
double
GetConfidenceInterval
(
)
const
;
void
Reset
(
)
;
void
SetHalfTime
(
int
half_time
)
;
private
:
double
tau_
;
double
value_
=
std
:
:
nan
(
"
uninit
"
)
;
double
sample_variance_
=
std
:
:
numeric_limits
<
double
>
:
:
infinity
(
)
;
double
estimator_variance_
=
1
;
absl
:
:
optional
<
int64_t
>
last_observation_timestamp_
;
}
;
}
#
endif
