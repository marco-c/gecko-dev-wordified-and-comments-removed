#
include
"
rtc_base
/
numerics
/
sample_counter
.
h
"
#
include
<
initializer_list
>
#
include
<
optional
>
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
using
:
:
testing
:
:
Eq
;
namespace
rtc
{
TEST
(
SampleCounterTest
ProcessesNoSamples
)
{
constexpr
int
kMinSamples
=
1
;
SampleCounter
counter
;
EXPECT_THAT
(
counter
.
Avg
(
kMinSamples
)
Eq
(
std
:
:
nullopt
)
)
;
EXPECT_THAT
(
counter
.
Max
(
)
Eq
(
std
:
:
nullopt
)
)
;
EXPECT_THAT
(
counter
.
Min
(
)
Eq
(
std
:
:
nullopt
)
)
;
}
TEST
(
SampleCounterTest
NotEnoughSamples
)
{
constexpr
int
kMinSamples
=
6
;
SampleCounter
counter
;
for
(
int
value
:
{
1
2
3
4
5
}
)
{
counter
.
Add
(
value
)
;
}
EXPECT_THAT
(
counter
.
Avg
(
kMinSamples
)
Eq
(
std
:
:
nullopt
)
)
;
EXPECT_THAT
(
counter
.
Sum
(
kMinSamples
)
Eq
(
std
:
:
nullopt
)
)
;
EXPECT_THAT
(
counter
.
Max
(
)
Eq
(
5
)
)
;
EXPECT_THAT
(
counter
.
Min
(
)
Eq
(
1
)
)
;
}
TEST
(
SampleCounterTest
EnoughSamples
)
{
constexpr
int
kMinSamples
=
5
;
SampleCounter
counter
;
for
(
int
value
:
{
1
2
3
4
5
}
)
{
counter
.
Add
(
value
)
;
}
EXPECT_THAT
(
counter
.
Avg
(
kMinSamples
)
Eq
(
3
)
)
;
EXPECT_THAT
(
counter
.
Sum
(
kMinSamples
)
Eq
(
15
)
)
;
EXPECT_THAT
(
counter
.
Max
(
)
Eq
(
5
)
)
;
EXPECT_THAT
(
counter
.
Min
(
)
Eq
(
1
)
)
;
}
TEST
(
SampleCounterTest
ComputesVariance
)
{
constexpr
int
kMinSamples
=
5
;
SampleCounterWithVariance
counter
;
for
(
int
value
:
{
1
2
3
4
5
}
)
{
counter
.
Add
(
value
)
;
}
EXPECT_THAT
(
counter
.
Variance
(
kMinSamples
)
Eq
(
2
)
)
;
}
TEST
(
SampleCounterTest
AggregatesTwoCounters
)
{
constexpr
int
kMinSamples
=
5
;
SampleCounterWithVariance
counter1
;
for
(
int
value
:
{
1
2
3
}
)
{
counter1
.
Add
(
value
)
;
}
SampleCounterWithVariance
counter2
;
for
(
int
value
:
{
4
5
}
)
{
counter2
.
Add
(
value
)
;
}
EXPECT_THAT
(
counter1
.
Avg
(
kMinSamples
)
Eq
(
std
:
:
nullopt
)
)
;
EXPECT_THAT
(
counter1
.
Variance
(
kMinSamples
)
Eq
(
std
:
:
nullopt
)
)
;
counter1
.
Add
(
counter2
)
;
EXPECT_THAT
(
counter1
.
Avg
(
kMinSamples
)
Eq
(
3
)
)
;
EXPECT_THAT
(
counter1
.
Max
(
)
Eq
(
5
)
)
;
EXPECT_THAT
(
counter1
.
Min
(
)
Eq
(
1
)
)
;
EXPECT_THAT
(
counter1
.
Variance
(
kMinSamples
)
Eq
(
2
)
)
;
}
}
