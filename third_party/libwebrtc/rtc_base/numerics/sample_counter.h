#
ifndef
RTC_BASE_NUMERICS_SAMPLE_COUNTER_H_
#
define
RTC_BASE_NUMERICS_SAMPLE_COUNTER_H_
#
include
<
stdint
.
h
>
#
include
"
absl
/
types
/
optional
.
h
"
namespace
rtc
{
class
SampleCounter
{
public
:
SampleCounter
(
)
;
~
SampleCounter
(
)
;
void
Add
(
int
sample
)
;
absl
:
:
optional
<
int
>
Avg
(
int64_t
min_required_samples
)
const
;
absl
:
:
optional
<
int
>
Max
(
)
const
;
absl
:
:
optional
<
int
>
Min
(
)
const
;
absl
:
:
optional
<
int64_t
>
Sum
(
int64_t
min_required_samples
)
const
;
int64_t
NumSamples
(
)
const
;
void
Reset
(
)
;
void
Add
(
const
SampleCounter
&
other
)
;
protected
:
int64_t
sum_
=
0
;
int64_t
num_samples_
=
0
;
absl
:
:
optional
<
int
>
max_
;
absl
:
:
optional
<
int
>
min_
;
}
;
class
SampleCounterWithVariance
:
public
SampleCounter
{
public
:
SampleCounterWithVariance
(
)
;
~
SampleCounterWithVariance
(
)
;
void
Add
(
int
sample
)
;
absl
:
:
optional
<
int64_t
>
Variance
(
int64_t
min_required_samples
)
const
;
void
Reset
(
)
;
void
Add
(
const
SampleCounterWithVariance
&
other
)
;
private
:
int64_t
sum_squared_
=
0
;
}
;
}
#
endif
