#
include
"
rtc_base
/
cpu_time
.
h
"
#
include
"
rtc_base
/
platform_thread
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
#
include
"
system_wrappers
/
include
/
sleep
.
h
"
#
include
"
test
/
gtest
.
h
"
#
if
defined
(
THREAD_SANITIZER
)
|
|
defined
(
MEMORY_SANITIZER
)
|
|
\
defined
(
ADDRESS_SANITIZER
)
#
define
MAYBE_TEST
(
test_name
)
DISABLED_
#
#
test_name
#
else
#
define
MAYBE_TEST
(
test_name
)
test_name
#
endif
namespace
{
const
int
kAllowedErrorMillisecs
=
30
;
const
int
kProcessingTimeMillisecs
=
500
;
const
int
kWorkingThreads
=
2
;
void
WorkingFunction
(
void
*
counter_pointer
)
{
int64_t
*
counter
=
reinterpret_cast
<
int64_t
*
>
(
counter_pointer
)
;
*
counter
=
0
;
int64_t
stop_cpu_time
=
rtc
:
:
GetThreadCpuTimeNanos
(
)
+
kProcessingTimeMillisecs
*
rtc
:
:
kNumNanosecsPerMillisec
;
while
(
rtc
:
:
GetThreadCpuTimeNanos
(
)
<
stop_cpu_time
)
{
(
*
counter
)
+
+
;
}
}
}
namespace
rtc
{
TEST
(
CpuTimeTest
BasicTest
)
{
int64_t
process_start_time_nanos
=
GetProcessCpuTimeNanos
(
)
;
int64_t
thread_start_time_nanos
=
GetThreadCpuTimeNanos
(
)
;
int64_t
process_duration_nanos
=
GetProcessCpuTimeNanos
(
)
-
process_start_time_nanos
;
int64_t
thread_duration_nanos
=
GetThreadCpuTimeNanos
(
)
-
thread_start_time_nanos
;
EXPECT_GE
(
process_duration_nanos
0
)
;
EXPECT_GE
(
thread_duration_nanos
0
)
;
}
TEST
(
CpuTimeTest
MAYBE_TEST
(
TwoThreads
)
)
{
int64_t
process_start_time_nanos
=
GetProcessCpuTimeNanos
(
)
;
int64_t
thread_start_time_nanos
=
GetThreadCpuTimeNanos
(
)
;
int64_t
counter1
;
int64_t
counter2
;
PlatformThread
thread1
(
WorkingFunction
reinterpret_cast
<
void
*
>
(
&
counter1
)
"
Thread1
"
)
;
PlatformThread
thread2
(
WorkingFunction
reinterpret_cast
<
void
*
>
(
&
counter2
)
"
Thread2
"
)
;
thread1
.
Start
(
)
;
thread2
.
Start
(
)
;
thread1
.
Stop
(
)
;
thread2
.
Stop
(
)
;
EXPECT_GE
(
counter1
0
)
;
EXPECT_GE
(
counter2
0
)
;
int64_t
process_duration_nanos
=
GetProcessCpuTimeNanos
(
)
-
process_start_time_nanos
;
int64_t
thread_duration_nanos
=
GetThreadCpuTimeNanos
(
)
-
thread_start_time_nanos
;
EXPECT_LE
(
thread_duration_nanos
(
kProcessingTimeMillisecs
-
kAllowedErrorMillisecs
)
*
kNumNanosecsPerMillisec
)
;
EXPECT_GE
(
process_duration_nanos
kWorkingThreads
*
(
kProcessingTimeMillisecs
-
kAllowedErrorMillisecs
)
*
kNumNanosecsPerMillisec
)
;
}
TEST
(
CpuTimeTest
MAYBE_TEST
(
Sleeping
)
)
{
int64_t
process_start_time_nanos
=
GetProcessCpuTimeNanos
(
)
;
webrtc
:
:
SleepMs
(
kProcessingTimeMillisecs
)
;
int64_t
process_duration_nanos
=
GetProcessCpuTimeNanos
(
)
-
process_start_time_nanos
;
EXPECT_LE
(
process_duration_nanos
(
kProcessingTimeMillisecs
-
kAllowedErrorMillisecs
)
*
kNumNanosecsPerMillisec
)
;
}
}
