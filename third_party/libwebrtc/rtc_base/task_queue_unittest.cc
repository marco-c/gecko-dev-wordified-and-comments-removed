#
if
defined
(
WEBRTC_WIN
)
#
include
<
windows
.
h
>
#
include
<
mmsystem
.
h
>
#
endif
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
task_queue_for_test
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
class
EnableHighResTimers
{
public
:
#
if
!
defined
(
WEBRTC_WIN
)
EnableHighResTimers
(
)
{
}
#
else
EnableHighResTimers
(
)
:
enabled_
(
timeBeginPeriod
(
1
)
=
=
TIMERR_NOERROR
)
{
}
~
EnableHighResTimers
(
)
{
if
(
enabled_
)
timeEndPeriod
(
1
)
;
}
private
:
const
bool
enabled_
;
#
endif
}
;
}
TEST
(
TaskQueueTest
DISABLED_PostDelayedHighRes
)
{
EnableHighResTimers
high_res_scope
;
static
const
char
kQueueName
[
]
=
"
PostDelayedHighRes
"
;
Event
event
;
TaskQueueForTest
queue
(
kQueueName
TaskQueueFactory
:
:
Priority
:
:
HIGH
)
;
uint32_t
start
=
rtc
:
:
TimeMillis
(
)
;
queue
.
PostDelayedTask
(
[
&
event
&
queue
]
{
EXPECT_TRUE
(
queue
.
IsCurrent
(
)
)
;
event
.
Set
(
)
;
}
TimeDelta
:
:
Millis
(
3
)
)
;
EXPECT_TRUE
(
event
.
Wait
(
TimeDelta
:
:
Seconds
(
1
)
)
)
;
uint32_t
end
=
rtc
:
:
TimeMillis
(
)
;
EXPECT_GE
(
end
-
start
3u
)
;
EXPECT_NEAR
(
end
-
start
3
3u
)
;
}
}
