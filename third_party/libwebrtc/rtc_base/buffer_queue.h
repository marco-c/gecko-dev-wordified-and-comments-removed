#
ifndef
RTC_BASE_BUFFER_QUEUE_H_
#
define
RTC_BASE_BUFFER_QUEUE_H_
#
include
<
stddef
.
h
>
#
include
<
deque
>
#
include
<
vector
>
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
rtc
{
class
BufferQueue
{
public
:
BufferQueue
(
size_t
capacity
size_t
default_size
)
;
virtual
~
BufferQueue
(
)
;
size_t
size
(
)
const
;
void
Clear
(
)
;
bool
ReadFront
(
void
*
data
size_t
bytes
size_t
*
bytes_read
)
;
bool
WriteBack
(
const
void
*
data
size_t
bytes
size_t
*
bytes_written
)
;
protected
:
virtual
void
NotifyReadableForTest
(
)
{
}
virtual
void
NotifyWritableForTest
(
)
{
}
private
:
size_t
capacity_
;
size_t
default_size_
;
mutable
webrtc
:
:
Mutex
mutex_
;
std
:
:
deque
<
Buffer
*
>
queue_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
vector
<
Buffer
*
>
free_list_
RTC_GUARDED_BY
(
mutex_
)
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
BufferQueue
)
;
}
;
}
#
endif
