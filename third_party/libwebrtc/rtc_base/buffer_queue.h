#
ifndef
RTC_BASE_BUFFER_QUEUE_H_
#
define
RTC_BASE_BUFFER_QUEUE_H_
#
include
<
stddef
.
h
>
#
include
<
deque
>
#
include
<
vector
>
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
rtc
{
class
BufferQueue
final
{
public
:
BufferQueue
(
size_t
capacity
size_t
default_size
)
;
~
BufferQueue
(
)
;
size_t
size
(
)
const
;
void
Clear
(
)
;
bool
ReadFront
(
void
*
data
size_t
bytes
size_t
*
bytes_read
)
;
bool
WriteBack
(
const
void
*
data
size_t
bytes
size_t
*
bytes_written
)
;
bool
is_writable
(
)
const
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
return
queue_
.
size
(
)
<
capacity_
;
}
bool
is_readable
(
)
const
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
return
!
queue_
.
empty
(
)
;
}
private
:
RTC_NO_UNIQUE_ADDRESS
webrtc
:
:
SequenceChecker
sequence_checker_
;
const
size_t
capacity_
;
const
size_t
default_size_
;
std
:
:
deque
<
Buffer
*
>
queue_
RTC_GUARDED_BY
(
sequence_checker_
)
;
std
:
:
vector
<
Buffer
*
>
free_list_
RTC_GUARDED_BY
(
sequence_checker_
)
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
BufferQueue
)
;
}
;
}
#
endif
