#
include
"
rtc_base
/
event_tracer
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
rtc_base
/
trace_event
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
{
class
TestStatistics
{
public
:
void
Reset
(
)
{
webrtc
:
:
MutexLock
lock
(
&
mutex_
)
;
events_logged_
=
0
;
}
void
Increment
(
)
{
webrtc
:
:
MutexLock
lock
(
&
mutex_
)
;
+
+
events_logged_
;
}
int
Count
(
)
const
{
webrtc
:
:
MutexLock
lock
(
&
mutex_
)
;
return
events_logged_
;
}
static
TestStatistics
*
Get
(
)
{
static
auto
&
test_stats
=
*
new
TestStatistics
(
)
;
return
&
test_stats
;
}
private
:
mutable
webrtc
:
:
Mutex
mutex_
;
int
events_logged_
RTC_GUARDED_BY
(
mutex_
)
=
0
;
}
;
}
namespace
webrtc
{
TEST
(
EventTracerTest
EventTracerDisabled
)
{
{
TRACE_EVENT0
(
"
test
"
"
EventTracerDisabled
"
)
;
}
EXPECT_FALSE
(
TestStatistics
:
:
Get
(
)
-
>
Count
(
)
)
;
TestStatistics
:
:
Get
(
)
-
>
Reset
(
)
;
}
#
if
RTC_TRACE_EVENTS_ENABLED
TEST
(
EventTracerTest
ScopedTraceEvent
)
{
SetupEventTracer
(
[
]
(
const
char
*
)
{
return
reinterpret_cast
<
const
unsigned
char
*
>
(
"
test
"
)
;
}
[
]
(
char
const
unsigned
char
*
const
char
*
unsigned
long
long
int
const
char
*
*
const
unsigned
char
*
const
unsigned
long
long
*
unsigned
char
)
{
TestStatistics
:
:
Get
(
)
-
>
Increment
(
)
;
}
)
;
{
TRACE_EVENT0
(
"
test
"
"
ScopedTraceEvent
"
)
;
}
EXPECT_EQ
(
2
TestStatistics
:
:
Get
(
)
-
>
Count
(
)
)
;
TestStatistics
:
:
Get
(
)
-
>
Reset
(
)
;
}
#
endif
}
