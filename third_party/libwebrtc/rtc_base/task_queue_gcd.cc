#
include
"
rtc_base
/
task_queue_gcd
.
h
"
#
include
<
dispatch
/
dispatch
.
h
>
#
include
<
string
.
h
>
#
include
<
memory
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
task_queue
/
queued_task
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
system
/
gcd_helpers
.
h
"
namespace
webrtc
{
namespace
{
int
TaskQueuePriorityToGCD
(
TaskQueueFactory
:
:
Priority
priority
)
{
switch
(
priority
)
{
case
TaskQueueFactory
:
:
Priority
:
:
NORMAL
:
return
DISPATCH_QUEUE_PRIORITY_DEFAULT
;
case
TaskQueueFactory
:
:
Priority
:
:
HIGH
:
return
DISPATCH_QUEUE_PRIORITY_HIGH
;
case
TaskQueueFactory
:
:
Priority
:
:
LOW
:
return
DISPATCH_QUEUE_PRIORITY_LOW
;
}
}
class
TaskQueueGcd
:
public
TaskQueueBase
{
public
:
TaskQueueGcd
(
absl
:
:
string_view
queue_name
int
gcd_priority
)
;
void
Delete
(
)
override
;
void
PostTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
)
override
;
void
PostDelayedTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
uint32_t
milliseconds
)
override
;
private
:
struct
TaskContext
{
TaskContext
(
TaskQueueGcd
*
queue
std
:
:
unique_ptr
<
QueuedTask
>
task
)
:
queue
(
queue
)
task
(
std
:
:
move
(
task
)
)
{
}
TaskQueueGcd
*
const
queue
;
std
:
:
unique_ptr
<
QueuedTask
>
task
;
}
;
~
TaskQueueGcd
(
)
override
;
static
void
RunTask
(
void
*
task_context
)
;
static
void
SetNotActive
(
void
*
task_queue
)
;
static
void
DeleteQueue
(
void
*
task_queue
)
;
dispatch_queue_t
queue_
;
bool
is_active_
;
}
;
TaskQueueGcd
:
:
TaskQueueGcd
(
absl
:
:
string_view
queue_name
int
gcd_priority
)
:
queue_
(
RTCDispatchQueueCreateWithTarget
(
std
:
:
string
(
queue_name
)
.
c_str
(
)
DISPATCH_QUEUE_SERIAL
dispatch_get_global_queue
(
gcd_priority
0
)
)
)
is_active_
(
true
)
{
RTC_CHECK
(
queue_
)
;
dispatch_set_context
(
queue_
this
)
;
dispatch_set_finalizer_f
(
queue_
&
DeleteQueue
)
;
}
TaskQueueGcd
:
:
~
TaskQueueGcd
(
)
=
default
;
void
TaskQueueGcd
:
:
Delete
(
)
{
RTC_DCHECK
(
!
IsCurrent
(
)
)
;
dispatch_sync_f
(
queue_
this
&
SetNotActive
)
;
dispatch_release
(
queue_
)
;
}
void
TaskQueueGcd
:
:
PostTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
)
{
auto
*
context
=
new
TaskContext
(
this
std
:
:
move
(
task
)
)
;
dispatch_async_f
(
queue_
context
&
RunTask
)
;
}
void
TaskQueueGcd
:
:
PostDelayedTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
uint32_t
milliseconds
)
{
auto
*
context
=
new
TaskContext
(
this
std
:
:
move
(
task
)
)
;
dispatch_after_f
(
dispatch_time
(
DISPATCH_TIME_NOW
milliseconds
*
NSEC_PER_MSEC
)
queue_
context
&
RunTask
)
;
}
void
TaskQueueGcd
:
:
RunTask
(
void
*
task_context
)
{
std
:
:
unique_ptr
<
TaskContext
>
tc
(
static_cast
<
TaskContext
*
>
(
task_context
)
)
;
if
(
!
tc
-
>
queue
-
>
is_active_
)
return
;
CurrentTaskQueueSetter
set_current
(
tc
-
>
queue
)
;
auto
*
task
=
tc
-
>
task
.
release
(
)
;
if
(
task
-
>
Run
(
)
)
{
delete
task
;
}
}
void
TaskQueueGcd
:
:
SetNotActive
(
void
*
task_queue
)
{
static_cast
<
TaskQueueGcd
*
>
(
task_queue
)
-
>
is_active_
=
false
;
}
void
TaskQueueGcd
:
:
DeleteQueue
(
void
*
task_queue
)
{
delete
static_cast
<
TaskQueueGcd
*
>
(
task_queue
)
;
}
class
TaskQueueGcdFactory
final
:
public
TaskQueueFactory
{
public
:
std
:
:
unique_ptr
<
TaskQueueBase
TaskQueueDeleter
>
CreateTaskQueue
(
absl
:
:
string_view
name
Priority
priority
)
const
override
{
return
std
:
:
unique_ptr
<
TaskQueueBase
TaskQueueDeleter
>
(
new
TaskQueueGcd
(
name
TaskQueuePriorityToGCD
(
priority
)
)
)
;
}
}
;
}
std
:
:
unique_ptr
<
TaskQueueFactory
>
CreateTaskQueueGcdFactory
(
)
{
return
std
:
:
make_unique
<
TaskQueueGcdFactory
>
(
)
;
}
}
