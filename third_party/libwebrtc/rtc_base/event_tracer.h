#
ifndef
RTC_BASE_EVENT_TRACER_H_
#
define
RTC_BASE_EVENT_TRACER_H_
#
include
<
stdio
.
h
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
#
if
defined
(
RTC_USE_PERFETTO
)
void
RegisterPerfettoTrackEvents
(
)
;
#
else
typedef
const
unsigned
char
*
(
*
GetCategoryEnabledPtr
)
(
const
char
*
name
)
;
typedef
void
(
*
AddTraceEventPtr
)
(
char
phase
const
unsigned
char
*
category_enabled
const
char
*
name
unsigned
long
long
id
int
num_args
const
char
*
*
arg_names
const
unsigned
char
*
arg_types
const
unsigned
long
long
*
arg_values
unsigned
char
flags
)
;
void
SetupEventTracer
(
GetCategoryEnabledPtr
get_category_enabled_ptr
AddTraceEventPtr
add_trace_event_ptr
)
;
class
EventTracer
{
public
:
static
const
unsigned
char
*
GetCategoryEnabled
(
const
char
*
name
)
;
static
void
AddTraceEvent
(
char
phase
const
unsigned
char
*
category_enabled
const
char
*
name
unsigned
long
long
id
int
num_args
const
char
*
*
arg_names
const
unsigned
char
*
arg_types
const
unsigned
long
long
*
arg_values
unsigned
char
flags
)
;
}
;
#
endif
namespace
tracing
{
RTC_EXPORT
void
SetupInternalTracer
(
bool
enable_all_categories
=
true
)
;
RTC_EXPORT
bool
StartInternalCapture
(
absl
:
:
string_view
filename
)
;
RTC_EXPORT
void
StartInternalCaptureToFile
(
FILE
*
file
)
;
RTC_EXPORT
void
StopInternalCapture
(
)
;
RTC_EXPORT
void
ShutdownInternalTracer
(
)
;
}
}
namespace
rtc
:
:
tracing
{
using
:
:
webrtc
:
:
tracing
:
:
SetupInternalTracer
;
using
:
:
webrtc
:
:
tracing
:
:
ShutdownInternalTracer
;
using
:
:
webrtc
:
:
tracing
:
:
StartInternalCapture
;
using
:
:
webrtc
:
:
tracing
:
:
StartInternalCaptureToFile
;
using
:
:
webrtc
:
:
tracing
:
:
StopInternalCapture
;
}
#
endif
