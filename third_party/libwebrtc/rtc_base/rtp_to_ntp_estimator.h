#
ifndef
RTC_BASE_RTP_TO_NTP_ESTIMATOR_H_
#
define
RTC_BASE_RTP_TO_NTP_ESTIMATOR_H_
#
include
<
cstdint
>
#
include
<
list
>
#
include
<
optional
>
#
include
"
rtc_base
/
numerics
/
sequence_number_unwrapper
.
h
"
#
include
"
system_wrappers
/
include
/
ntp_time
.
h
"
namespace
webrtc
{
class
RtpToNtpEstimator
{
public
:
static
constexpr
int
kMaxInvalidSamples
=
3
;
RtpToNtpEstimator
(
)
=
default
;
RtpToNtpEstimator
(
const
RtpToNtpEstimator
&
)
=
delete
;
RtpToNtpEstimator
&
operator
=
(
const
RtpToNtpEstimator
&
)
=
delete
;
~
RtpToNtpEstimator
(
)
=
default
;
enum
UpdateResult
{
kInvalidMeasurement
kSameMeasurement
kNewMeasurement
}
;
UpdateResult
UpdateMeasurements
(
NtpTime
ntp
uint32_t
rtp_timestamp
)
;
NtpTime
Estimate
(
uint32_t
rtp_timestamp
)
const
;
double
EstimatedFrequencyKhz
(
)
const
;
private
:
struct
Parameters
{
double
slope
;
double
offset
;
}
;
struct
RtcpMeasurement
{
NtpTime
ntp_time
;
int64_t
unwrapped_rtp_timestamp
;
}
;
void
UpdateParameters
(
)
;
int
consecutive_invalid_samples_
=
0
;
std
:
:
list
<
RtcpMeasurement
>
measurements_
;
std
:
:
optional
<
Parameters
>
params_
;
mutable
RtpTimestampUnwrapper
unwrapper_
;
}
;
}
#
endif
