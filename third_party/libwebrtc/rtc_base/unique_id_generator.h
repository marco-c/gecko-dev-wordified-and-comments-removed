#
ifndef
RTC_BASE_UNIQUE_ID_GENERATOR_H_
#
define
RTC_BASE_UNIQUE_ID_GENERATOR_H_
#
include
<
limits
>
#
include
<
set
>
#
include
<
string
>
#
include
"
api
/
array_view
.
h
"
namespace
rtc
{
template
<
typename
TIntegral
>
class
UniqueNumberGenerator
{
public
:
typedef
TIntegral
value_type
;
UniqueNumberGenerator
(
)
;
explicit
UniqueNumberGenerator
(
ArrayView
<
TIntegral
>
known_ids
)
;
~
UniqueNumberGenerator
(
)
;
TIntegral
GenerateNumber
(
)
;
TIntegral
operator
(
)
(
)
{
return
GenerateNumber
(
)
;
}
bool
AddKnownId
(
TIntegral
value
)
;
private
:
static_assert
(
std
:
:
is_integral
<
TIntegral
>
:
:
value
"
Must
be
integral
type
.
"
)
;
TIntegral
counter_
;
std
:
:
set
<
TIntegral
>
known_ids_
;
}
;
class
UniqueRandomIdGenerator
{
public
:
typedef
uint32_t
value_type
;
UniqueRandomIdGenerator
(
)
;
explicit
UniqueRandomIdGenerator
(
ArrayView
<
uint32_t
>
known_ids
)
;
~
UniqueRandomIdGenerator
(
)
;
uint32_t
GenerateId
(
)
;
uint32_t
operator
(
)
(
)
{
return
GenerateId
(
)
;
}
bool
AddKnownId
(
uint32_t
value
)
;
private
:
std
:
:
set
<
uint32_t
>
known_ids_
;
}
;
class
UniqueStringGenerator
{
public
:
typedef
std
:
:
string
value_type
;
UniqueStringGenerator
(
)
;
explicit
UniqueStringGenerator
(
ArrayView
<
std
:
:
string
>
known_ids
)
;
~
UniqueStringGenerator
(
)
;
std
:
:
string
GenerateString
(
)
;
std
:
:
string
operator
(
)
(
)
{
return
GenerateString
(
)
;
}
bool
AddKnownId
(
const
std
:
:
string
&
value
)
;
private
:
UniqueNumberGenerator
<
uint32_t
>
unique_number_generator_
;
}
;
template
<
typename
TIntegral
>
UniqueNumberGenerator
<
TIntegral
>
:
:
UniqueNumberGenerator
(
)
:
counter_
(
0
)
{
}
template
<
typename
TIntegral
>
UniqueNumberGenerator
<
TIntegral
>
:
:
UniqueNumberGenerator
(
ArrayView
<
TIntegral
>
known_ids
)
:
counter_
(
0
)
known_ids_
(
known_ids
.
begin
(
)
known_ids
.
end
(
)
)
{
}
template
<
typename
TIntegral
>
UniqueNumberGenerator
<
TIntegral
>
:
:
~
UniqueNumberGenerator
(
)
{
}
template
<
typename
TIntegral
>
TIntegral
UniqueNumberGenerator
<
TIntegral
>
:
:
GenerateNumber
(
)
{
while
(
true
)
{
RTC_CHECK_LT
(
counter_
std
:
:
numeric_limits
<
TIntegral
>
:
:
max
(
)
)
;
auto
pair
=
known_ids_
.
insert
(
counter_
+
+
)
;
if
(
pair
.
second
)
{
return
*
pair
.
first
;
}
}
}
template
<
typename
TIntegral
>
bool
UniqueNumberGenerator
<
TIntegral
>
:
:
AddKnownId
(
TIntegral
value
)
{
return
known_ids_
.
insert
(
value
)
.
second
;
}
}
#
endif
