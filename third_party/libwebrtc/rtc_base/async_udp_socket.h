#
ifndef
RTC_BASE_ASYNC_UDP_SOCKET_H_
#
define
RTC_BASE_ASYNC_UDP_SOCKET_H_
#
include
<
stddef
.
h
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
socket_factory
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
rtc
{
class
AsyncUDPSocket
:
public
AsyncPacketSocket
{
public
:
static
AsyncUDPSocket
*
Create
(
Socket
*
socket
const
SocketAddress
&
bind_address
)
;
static
AsyncUDPSocket
*
Create
(
SocketFactory
*
factory
const
SocketAddress
&
bind_address
)
;
explicit
AsyncUDPSocket
(
Socket
*
socket
)
;
~
AsyncUDPSocket
(
)
=
default
;
SocketAddress
GetLocalAddress
(
)
const
override
;
SocketAddress
GetRemoteAddress
(
)
const
override
;
int
Send
(
const
void
*
pv
size_t
cb
const
rtc
:
:
PacketOptions
&
options
)
override
;
int
SendTo
(
const
void
*
pv
size_t
cb
const
SocketAddress
&
addr
const
rtc
:
:
PacketOptions
&
options
)
override
;
int
Close
(
)
override
;
State
GetState
(
)
const
override
;
int
GetOption
(
Socket
:
:
Option
opt
int
*
value
)
override
;
int
SetOption
(
Socket
:
:
Option
opt
int
value
)
override
;
int
GetError
(
)
const
override
;
void
SetError
(
int
error
)
override
;
private
:
void
OnReadEvent
(
Socket
*
socket
)
;
void
OnWriteEvent
(
Socket
*
socket
)
;
RTC_NO_UNIQUE_ADDRESS
webrtc
:
:
SequenceChecker
sequence_checker_
;
std
:
:
unique_ptr
<
Socket
>
socket_
;
rtc
:
:
Buffer
buffer_
RTC_GUARDED_BY
(
sequence_checker_
)
;
absl
:
:
optional
<
webrtc
:
:
TimeDelta
>
socket_time_offset_
RTC_GUARDED_BY
(
sequence_checker_
)
;
}
;
}
#
endif
