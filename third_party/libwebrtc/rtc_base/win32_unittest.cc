#
include
"
rtc_base
/
win32
.
h
"
#
include
<
string
>
#
include
"
rtc_base
/
gunit
.
h
"
#
include
"
rtc_base
/
net_helpers
.
h
"
#
if
!
defined
(
WEBRTC_WIN
)
#
error
Only
for
Windows
#
endif
namespace
rtc
{
class
Win32Test
:
public
:
:
testing
:
:
Test
{
public
:
Win32Test
(
)
{
}
}
;
TEST_F
(
Win32Test
IPv6AddressCompression
)
{
IPAddress
ipv6
;
ASSERT_TRUE
(
IPFromString
(
"
2a00
:
8a00
:
a000
:
1190
:
0000
:
0001
:
000
:
252
"
&
ipv6
)
)
;
EXPECT_EQ
(
"
2a00
:
8a00
:
a000
:
1190
:
:
1
:
0
:
252
"
ipv6
.
ToString
(
)
)
;
ASSERT_TRUE
(
IPFromString
(
"
0
:
0
:
0
:
0
:
0
:
0
:
0
:
1
"
&
ipv6
)
)
;
EXPECT_EQ
(
"
:
:
1
"
ipv6
.
ToString
(
)
)
;
ASSERT_TRUE
(
IPFromString
(
"
fe80
:
0
:
0
:
0
:
2aa
:
ff
:
fe9a
:
4ca2
"
&
ipv6
)
)
;
EXPECT_EQ
(
"
fe80
:
:
2aa
:
ff
:
fe9a
:
4ca2
"
ipv6
.
ToString
(
)
)
;
ASSERT_TRUE
(
IPFromString
(
"
2a00
:
8a00
:
a000
:
1190
:
0000
:
0001
:
000
:
00
"
&
ipv6
)
)
;
EXPECT_EQ
(
"
2a00
:
8a00
:
a000
:
1190
:
0
:
1
:
:
"
ipv6
.
ToString
(
)
)
;
ASSERT_TRUE
(
IPFromString
(
"
0
:
0
:
000
:
1190
:
0000
:
0001
:
000
:
00
"
&
ipv6
)
)
;
EXPECT_EQ
(
"
:
:
1190
:
0
:
1
:
0
:
0
"
ipv6
.
ToString
(
)
)
;
ASSERT_TRUE
(
IPFromString
(
"
0
:
1
:
000
:
1190
:
0000
:
0001
:
000
:
01
"
&
ipv6
)
)
;
EXPECT_EQ
(
"
:
:
1
:
0
:
1190
:
0
:
1
:
0
:
1
"
ipv6
.
ToString
(
)
)
;
ASSERT_TRUE
(
IPFromString
(
"
1234
:
5678
:
abcd
:
1234
:
5678
:
abcd
:
1234
:
5678
"
&
ipv6
)
)
;
EXPECT_EQ
(
"
1234
:
5678
:
abcd
:
1234
:
5678
:
abcd
:
1234
:
5678
"
ipv6
.
ToString
(
)
)
;
}
TEST_F
(
Win32Test
InvalidIPv6AddressParsing
)
{
IPAddress
ipv6
;
EXPECT_FALSE
(
IPFromString
(
"
1
:
:
2
:
:
3
"
&
ipv6
)
)
;
EXPECT_FALSE
(
IPFromString
(
"
1
:
:
2
:
:
3
:
:
4
:
:
5
:
:
6
:
:
7
:
:
8
"
&
ipv6
)
)
;
EXPECT_FALSE
(
IPFromString
(
"
1
:
:
:
2
"
&
ipv6
)
)
;
EXPECT_FALSE
(
IPFromString
(
"
test
:
:
1
"
&
ipv6
)
)
;
EXPECT_FALSE
(
IPFromString
(
"
abcde
:
:
1
"
&
ipv6
)
)
;
EXPECT_FALSE
(
IPFromString
(
"
1
:
2
:
3
:
4
:
5
:
6
:
7
:
8
:
9
"
&
ipv6
)
)
;
EXPECT_FALSE
(
IPFromString
(
"
1
:
2
:
3
:
4
:
5
:
6
:
7
"
&
ipv6
)
)
;
}
}
