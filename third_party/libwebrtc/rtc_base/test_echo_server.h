#
ifndef
RTC_BASE_TEST_ECHO_SERVER_H_
#
define
RTC_BASE_TEST_ECHO_SERVER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
list
>
#
include
<
memory
>
#
include
"
absl
/
algorithm
/
container
.
h
"
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
async_tcp_socket
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
class
TestEchoServer
:
public
sigslot
:
:
has_slots
<
>
{
public
:
TestEchoServer
(
rtc
:
:
Thread
*
thread
const
SocketAddress
&
addr
)
;
~
TestEchoServer
(
)
override
;
TestEchoServer
(
const
TestEchoServer
&
)
=
delete
;
TestEchoServer
&
operator
=
(
const
TestEchoServer
&
)
=
delete
;
SocketAddress
address
(
)
const
{
return
server_socket_
-
>
GetLocalAddress
(
)
;
}
private
:
void
OnAccept
(
rtc
:
:
Socket
*
socket
)
{
rtc
:
:
Socket
*
raw_socket
=
socket
-
>
Accept
(
nullptr
)
;
if
(
raw_socket
)
{
rtc
:
:
AsyncTCPSocket
*
packet_socket
=
new
rtc
:
:
AsyncTCPSocket
(
raw_socket
)
;
packet_socket
-
>
RegisterReceivedPacketCallback
(
[
&
]
(
rtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
ReceivedPacket
&
packet
)
{
OnPacket
(
socket
packet
)
;
}
)
;
packet_socket
-
>
SubscribeCloseEvent
(
this
[
this
]
(
rtc
:
:
AsyncPacketSocket
*
s
int
err
)
{
OnClose
(
s
err
)
;
}
)
;
client_sockets_
.
push_back
(
packet_socket
)
;
}
}
void
OnPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
ReceivedPacket
&
packet
)
{
rtc
:
:
PacketOptions
options
;
socket
-
>
Send
(
packet
.
payload
(
)
.
data
(
)
packet
.
payload
(
)
.
size
(
)
options
)
;
}
void
OnClose
(
rtc
:
:
AsyncPacketSocket
*
socket
int
err
)
{
ClientList
:
:
iterator
it
=
absl
:
:
c_find
(
client_sockets_
socket
)
;
client_sockets_
.
erase
(
it
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
PostTask
(
[
socket
=
absl
:
:
WrapUnique
(
socket
)
]
{
}
)
;
}
typedef
std
:
:
list
<
rtc
:
:
AsyncTCPSocket
*
>
ClientList
;
std
:
:
unique_ptr
<
rtc
:
:
Socket
>
server_socket_
;
ClientList
client_sockets_
;
}
;
}
namespace
rtc
{
using
:
:
webrtc
:
:
TestEchoServer
;
}
#
endif
