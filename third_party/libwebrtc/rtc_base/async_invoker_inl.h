#
ifndef
RTC_BASE_ASYNC_INVOKER_INL_H_
#
define
RTC_BASE_ASYNC_INVOKER_INL_H_
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
message_handler
.
h
"
#
include
"
rtc_base
/
ref_counted_object
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
rtc
{
class
DEPRECATED_AsyncInvoker
;
class
AsyncClosure
{
public
:
explicit
AsyncClosure
(
DEPRECATED_AsyncInvoker
*
invoker
)
;
virtual
~
AsyncClosure
(
)
;
virtual
void
Execute
(
)
=
0
;
protected
:
DEPRECATED_AsyncInvoker
*
invoker_
;
rtc
:
:
scoped_refptr
<
FinalRefCountedObject
<
Event
>
>
invocation_complete_
;
}
;
template
<
class
FunctorT
>
class
FireAndForgetAsyncClosure
:
public
AsyncClosure
{
public
:
explicit
FireAndForgetAsyncClosure
(
DEPRECATED_AsyncInvoker
*
invoker
FunctorT
&
&
functor
)
:
AsyncClosure
(
invoker
)
functor_
(
std
:
:
forward
<
FunctorT
>
(
functor
)
)
{
}
virtual
void
Execute
(
)
{
functor_
(
)
;
}
private
:
typename
std
:
:
decay
<
FunctorT
>
:
:
type
functor_
;
}
;
}
#
endif
