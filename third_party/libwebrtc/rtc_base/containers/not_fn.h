#
ifndef
RTC_BASE_CONTAINERS_NOT_FN_H_
#
define
RTC_BASE_CONTAINERS_NOT_FN_H_
#
include
<
type_traits
>
#
include
<
utility
>
#
include
"
rtc_base
/
containers
/
invoke
.
h
"
namespace
webrtc
{
namespace
not_fn_internal
{
template
<
typename
F
>
struct
NotFnImpl
{
F
f
;
template
<
typename
.
.
.
Args
>
constexpr
decltype
(
auto
)
operator
(
)
(
Args
&
&
.
.
.
args
)
&
noexcept
{
return
!
webrtc
:
:
invoke
(
f
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
template
<
typename
.
.
.
Args
>
constexpr
decltype
(
auto
)
operator
(
)
(
Args
&
&
.
.
.
args
)
const
&
noexcept
{
return
!
webrtc
:
:
invoke
(
f
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
template
<
typename
.
.
.
Args
>
constexpr
decltype
(
auto
)
operator
(
)
(
Args
&
&
.
.
.
args
)
&
&
noexcept
{
return
!
webrtc
:
:
invoke
(
std
:
:
move
(
f
)
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
template
<
typename
.
.
.
Args
>
constexpr
decltype
(
auto
)
operator
(
)
(
Args
&
&
.
.
.
args
)
const
&
&
noexcept
{
return
!
webrtc
:
:
invoke
(
std
:
:
move
(
f
)
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
;
}
}
;
}
template
<
typename
F
>
constexpr
not_fn_internal
:
:
NotFnImpl
<
std
:
:
decay_t
<
F
>
>
not_fn
(
F
&
&
f
)
{
return
{
std
:
:
forward
<
F
>
(
f
)
}
;
}
}
#
endif
