#
ifndef
RTC_BASE_CONTAINERS_MOVE_ONLY_INT_H_
#
define
RTC_BASE_CONTAINERS_MOVE_ONLY_INT_H_
namespace
webrtc
{
class
MoveOnlyInt
{
public
:
explicit
MoveOnlyInt
(
int
data
=
1
)
:
data_
(
data
)
{
}
MoveOnlyInt
(
const
MoveOnlyInt
&
other
)
=
delete
;
MoveOnlyInt
&
operator
=
(
const
MoveOnlyInt
&
other
)
=
delete
;
MoveOnlyInt
(
MoveOnlyInt
&
&
other
)
:
data_
(
other
.
data_
)
{
other
.
data_
=
0
;
}
~
MoveOnlyInt
(
)
{
data_
=
0
;
}
MoveOnlyInt
&
operator
=
(
MoveOnlyInt
&
&
other
)
{
data_
=
other
.
data_
;
other
.
data_
=
0
;
return
*
this
;
}
friend
bool
operator
=
=
(
const
MoveOnlyInt
&
lhs
const
MoveOnlyInt
&
rhs
)
{
return
lhs
.
data_
=
=
rhs
.
data_
;
}
friend
bool
operator
!
=
(
const
MoveOnlyInt
&
lhs
const
MoveOnlyInt
&
rhs
)
{
return
!
operator
=
=
(
lhs
rhs
)
;
}
friend
bool
operator
<
(
const
MoveOnlyInt
&
lhs
int
rhs
)
{
return
lhs
.
data_
<
rhs
;
}
friend
bool
operator
<
(
int
lhs
const
MoveOnlyInt
&
rhs
)
{
return
lhs
<
rhs
.
data_
;
}
friend
bool
operator
<
(
const
MoveOnlyInt
&
lhs
const
MoveOnlyInt
&
rhs
)
{
return
lhs
.
data_
<
rhs
.
data_
;
}
friend
bool
operator
>
(
const
MoveOnlyInt
&
lhs
const
MoveOnlyInt
&
rhs
)
{
return
rhs
<
lhs
;
}
friend
bool
operator
<
=
(
const
MoveOnlyInt
&
lhs
const
MoveOnlyInt
&
rhs
)
{
return
!
(
rhs
<
lhs
)
;
}
friend
bool
operator
>
=
(
const
MoveOnlyInt
&
lhs
const
MoveOnlyInt
&
rhs
)
{
return
!
(
lhs
<
rhs
)
;
}
int
data
(
)
const
{
return
data_
;
}
private
:
volatile
int
data_
;
}
;
}
#
endif
