#
include
"
rtc_base
/
time
/
timestamp_extrapolator
.
h
"
#
include
<
stdint
.
h
>
#
include
<
limits
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
units
/
frequency
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
using
:
:
testing
:
:
Eq
;
using
:
:
testing
:
:
Optional
;
namespace
{
constexpr
Frequency
kRtpHz
=
Frequency
:
:
KiloHertz
(
90
)
;
constexpr
Frequency
k25Fps
=
Frequency
:
:
Hertz
(
25
)
;
constexpr
TimeDelta
k25FpsDelay
=
1
/
k25Fps
;
}
TEST
(
TimestampExtrapolatorTest
ExtrapolationOccursAfter2Packets
)
{
SimulatedClock
clock
(
Timestamp
:
:
Millis
(
1337
)
)
;
TimestampExtrapolator
ts_extrapolator
(
clock
.
CurrentTime
(
)
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
90000
)
Eq
(
absl
:
:
nullopt
)
)
;
uint32_t
rtp
=
90000
;
clock
.
AdvanceTime
(
k25FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
)
Optional
(
clock
.
CurrentTime
(
)
)
)
;
rtp
+
=
kRtpHz
/
k25Fps
;
clock
.
AdvanceTime
(
k25FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
)
Optional
(
clock
.
CurrentTime
(
)
)
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
+
90000
)
Optional
(
clock
.
CurrentTime
(
)
+
TimeDelta
:
:
Seconds
(
1
)
)
)
;
}
TEST
(
TimestampExtrapolatorTest
ResetsAfter10SecondPause
)
{
SimulatedClock
clock
(
Timestamp
:
:
Millis
(
1337
)
)
;
TimestampExtrapolator
ts_extrapolator
(
clock
.
CurrentTime
(
)
)
;
uint32_t
rtp
=
90000
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
)
Optional
(
clock
.
CurrentTime
(
)
)
)
;
rtp
+
=
kRtpHz
/
k25Fps
;
clock
.
AdvanceTime
(
k25FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
)
Optional
(
clock
.
CurrentTime
(
)
)
)
;
rtp
+
=
10
*
kRtpHz
.
hertz
(
)
;
clock
.
AdvanceTime
(
TimeDelta
:
:
Seconds
(
10
)
+
TimeDelta
:
:
Micros
(
1
)
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
)
Optional
(
clock
.
CurrentTime
(
)
)
)
;
}
TEST
(
TimestampExtrapolatorTest
TimestampExtrapolatesMultipleRtpWrapArounds
)
{
SimulatedClock
clock
(
Timestamp
:
:
Millis
(
1337
)
)
;
TimestampExtrapolator
ts_extrapolator
(
clock
.
CurrentTime
(
)
)
;
uint32_t
rtp
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
)
Optional
(
clock
.
CurrentTime
(
)
)
)
;
rtp
+
=
static_cast
<
uint32_t
>
(
kRtpHz
/
k25Fps
)
;
clock
.
AdvanceTime
(
k25FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
)
Optional
(
clock
.
CurrentTime
(
)
)
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
+
90000
)
Optional
(
clock
.
CurrentTime
(
)
+
TimeDelta
:
:
Seconds
(
1
)
)
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
-
90000
)
Optional
(
clock
.
CurrentTime
(
)
-
TimeDelta
:
:
Millis
(
999
)
)
)
;
constexpr
TimeDelta
kRtpOverflowDelay
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
/
kRtpHz
;
const
Timestamp
overflow_time
=
clock
.
CurrentTime
(
)
+
kRtpOverflowDelay
*
2
;
while
(
clock
.
CurrentTime
(
)
<
overflow_time
)
{
clock
.
AdvanceTime
(
TimeDelta
:
:
Seconds
(
10
)
)
;
rtp
+
=
static_cast
<
uint32_t
>
(
kRtpHz
*
TimeDelta
:
:
Seconds
(
10
)
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
)
Optional
(
clock
.
CurrentTime
(
)
)
)
;
}
}
TEST
(
TimestampExtrapolatorTest
Slow90KHzClock
)
{
SimulatedClock
clock
(
Timestamp
:
:
Millis
(
1337
)
)
;
TimestampExtrapolator
ts_extrapolator
(
clock
.
CurrentTime
(
)
)
;
constexpr
TimeDelta
k24FpsDelay
=
1
/
Frequency
:
:
Hertz
(
24
)
;
uint32_t
rtp
=
90000
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
for
(
int
i
=
0
;
i
<
25
;
+
+
i
)
{
rtp
+
=
kRtpHz
/
k25Fps
;
clock
.
AdvanceTime
(
k24FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
}
constexpr
Frequency
kSlowRtpHz
=
90000
/
(
25
*
k24FpsDelay
)
;
auto
ts
=
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
+
kSlowRtpHz
.
hertz
(
)
)
;
ASSERT_TRUE
(
ts
.
has_value
(
)
)
;
EXPECT_EQ
(
ts
-
>
ms
(
)
clock
.
TimeInMilliseconds
(
)
+
1000
)
;
}
TEST
(
TimestampExtrapolatorTest
Fast90KHzClock
)
{
SimulatedClock
clock
(
Timestamp
:
:
Millis
(
1337
)
)
;
TimestampExtrapolator
ts_extrapolator
(
clock
.
CurrentTime
(
)
)
;
constexpr
TimeDelta
k26FpsDelay
=
1
/
Frequency
:
:
Hertz
(
26
)
;
uint32_t
rtp
=
90000
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
for
(
int
i
=
0
;
i
<
25
;
+
+
i
)
{
rtp
+
=
kRtpHz
/
k25Fps
;
clock
.
AdvanceTime
(
k26FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
}
constexpr
Frequency
kSlowRtpHz
=
90000
/
(
25
*
k26FpsDelay
)
;
auto
ts
=
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
+
kSlowRtpHz
.
hertz
(
)
)
;
ASSERT_TRUE
(
ts
.
has_value
(
)
)
;
EXPECT_EQ
(
ts
-
>
ms
(
)
clock
.
TimeInMilliseconds
(
)
+
1000
)
;
}
TEST
(
TimestampExtrapolatorTest
TimestampJump
)
{
SimulatedClock
clock
(
Timestamp
:
:
Millis
(
1337
)
)
;
TimestampExtrapolator
ts_extrapolator
(
clock
.
CurrentTime
(
)
)
;
uint32_t
rtp
=
90000
;
clock
.
AdvanceTime
(
k25FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
rtp
+
=
kRtpHz
/
k25Fps
;
clock
.
AdvanceTime
(
k25FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
rtp
+
=
kRtpHz
/
k25Fps
;
clock
.
AdvanceTime
(
k25FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
rtp
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
)
Optional
(
clock
.
CurrentTime
(
)
)
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
rtp
+
90000
)
Optional
(
clock
.
CurrentTime
(
)
+
TimeDelta
:
:
Seconds
(
1
)
)
)
;
uint32_t
new_rtp
=
1337
*
90000
;
clock
.
AdvanceTime
(
k25FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
new_rtp
)
;
new_rtp
+
=
kRtpHz
/
k25Fps
;
clock
.
AdvanceTime
(
k25FpsDelay
)
;
ts_extrapolator
.
Update
(
clock
.
CurrentTime
(
)
new_rtp
)
;
EXPECT_THAT
(
ts_extrapolator
.
ExtrapolateLocalTime
(
new_rtp
)
Optional
(
clock
.
CurrentTime
(
)
)
)
;
}
}
