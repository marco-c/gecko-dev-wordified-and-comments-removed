#
ifndef
RTC_BASE_SYSTEM_FILE_WRAPPER_H_
#
define
RTC_BASE_SYSTEM_FILE_WRAPPER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
namespace
webrtc
{
class
FileWrapper
final
{
public
:
static
FileWrapper
OpenReadOnly
(
absl
:
:
string_view
file_name_utf8
)
;
static
FileWrapper
OpenWriteOnly
(
absl
:
:
string_view
file_name_utf8
int
*
error
=
nullptr
)
;
FileWrapper
(
)
=
default
;
explicit
FileWrapper
(
FILE
*
file
)
:
file_
(
file
)
{
}
~
FileWrapper
(
)
{
Close
(
)
;
}
FileWrapper
(
const
FileWrapper
&
)
=
delete
;
FileWrapper
&
operator
=
(
const
FileWrapper
&
)
=
delete
;
FileWrapper
(
FileWrapper
&
&
)
;
FileWrapper
&
operator
=
(
FileWrapper
&
&
)
;
bool
is_open
(
)
const
{
return
file_
!
=
nullptr
;
}
bool
Close
(
)
;
FILE
*
Release
(
)
;
bool
Flush
(
)
;
bool
Rewind
(
)
{
return
SeekTo
(
0
)
;
}
bool
SeekRelative
(
int64_t
offset
)
;
bool
SeekTo
(
int64_t
position
)
;
absl
:
:
optional
<
size_t
>
FileSize
(
)
;
size_t
Read
(
void
*
buf
size_t
length
)
;
bool
ReadEof
(
)
const
;
bool
Write
(
const
void
*
buf
size_t
length
)
;
private
:
FILE
*
file_
=
nullptr
;
}
;
}
#
endif
