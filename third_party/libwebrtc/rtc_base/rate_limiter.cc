#
include
"
rtc_base
/
rate_limiter
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
limits
>
#
include
<
optional
>
#
include
"
rtc_base
/
rate_statistics
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
RateLimiter
:
:
RateLimiter
(
Clock
*
clock
int64_t
max_window_ms
)
:
clock_
(
clock
)
current_rate_
(
max_window_ms
RateStatistics
:
:
kBpsScale
)
window_size_ms_
(
max_window_ms
)
max_rate_bps_
(
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
)
{
}
RateLimiter
:
:
~
RateLimiter
(
)
{
}
bool
RateLimiter
:
:
TryUseRate
(
size_t
packet_size_bytes
)
{
MutexLock
lock
(
&
lock_
)
;
int64_t
now_ms
=
clock_
-
>
TimeInMilliseconds
(
)
;
std
:
:
optional
<
uint32_t
>
current_rate
=
current_rate_
.
Rate
(
now_ms
)
;
if
(
current_rate
)
{
size_t
bitrate_addition_bps
=
(
packet_size_bytes
*
8
*
1000
)
/
window_size_ms_
;
if
(
*
current_rate
+
bitrate_addition_bps
>
max_rate_bps_
)
return
false
;
}
current_rate_
.
Update
(
packet_size_bytes
now_ms
)
;
return
true
;
}
void
RateLimiter
:
:
SetMaxRate
(
uint32_t
max_rate_bps
)
{
MutexLock
lock
(
&
lock_
)
;
max_rate_bps_
=
max_rate_bps
;
}
bool
RateLimiter
:
:
SetWindowSize
(
int64_t
window_size_ms
)
{
MutexLock
lock
(
&
lock_
)
;
window_size_ms_
=
window_size_ms
;
return
current_rate_
.
SetWindowSize
(
window_size_ms
clock_
-
>
TimeInMilliseconds
(
)
)
;
}
}
