#
ifndef
RTC_BASE_CRYPTO_RANDOM_H_
#
define
RTC_BASE_CRYPTO_RANDOM_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
RandomGenerator
{
public
:
virtual
~
RandomGenerator
(
)
{
}
virtual
bool
Init
(
const
void
*
seed
size_t
len
)
=
0
;
virtual
bool
Generate
(
void
*
buf
size_t
len
)
=
0
;
}
;
void
SetDefaultRandomGenerator
(
)
;
void
SetRandomGenerator
(
std
:
:
unique_ptr
<
RandomGenerator
>
generator
)
;
void
SetRandomTestMode
(
bool
test
)
;
bool
InitRandom
(
int
seed
)
;
bool
InitRandom
(
const
char
*
seed
size_t
len
)
;
RTC_EXPORT
std
:
:
string
CreateRandomString
(
size_t
length
)
;
RTC_EXPORT
bool
CreateRandomString
(
size_t
length
std
:
:
string
*
str
)
;
RTC_EXPORT
bool
CreateRandomString
(
size_t
length
absl
:
:
string_view
table
std
:
:
string
*
str
)
;
bool
CreateRandomData
(
size_t
length
std
:
:
string
*
data
)
;
std
:
:
string
CreateRandomUuid
(
)
;
uint32_t
CreateRandomId
(
)
;
RTC_EXPORT
uint64_t
CreateRandomId64
(
)
;
uint32_t
CreateRandomNonZeroId
(
)
;
double
CreateRandomDouble
(
)
;
}
#
ifdef
WEBRTC_ALLOW_DEPRECATED_NAMESPACES
namespace
rtc
{
using
:
:
webrtc
:
:
CreateRandomData
;
using
:
:
webrtc
:
:
CreateRandomDouble
;
using
:
:
webrtc
:
:
CreateRandomId
;
using
:
:
webrtc
:
:
CreateRandomId64
;
using
:
:
webrtc
:
:
CreateRandomNonZeroId
;
using
:
:
webrtc
:
:
CreateRandomString
;
using
:
:
webrtc
:
:
CreateRandomUuid
;
using
:
:
webrtc
:
:
InitRandom
;
using
:
:
webrtc
:
:
RandomGenerator
;
using
:
:
webrtc
:
:
SetDefaultRandomGenerator
;
using
:
:
webrtc
:
:
SetRandomGenerator
;
using
:
:
webrtc
:
:
SetRandomTestMode
;
}
#
endif
#
endif
