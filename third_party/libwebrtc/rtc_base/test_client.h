#
ifndef
RTC_BASE_TEST_CLIENT_H_
#
define
RTC_BASE_TEST_CLIENT_H_
#
include
<
cstddef
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
fake_clock
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
namespace
webrtc
{
class
TestClient
:
public
sigslot
:
:
has_slots
<
>
{
public
:
struct
Packet
{
Packet
(
const
ReceivedIpPacket
&
received_packet
)
;
Packet
(
const
Packet
&
p
)
;
SocketAddress
addr
;
Buffer
buf
;
std
:
:
optional
<
Timestamp
>
packet_time
;
}
;
static
const
int
kTimeoutMs
=
5000
;
explicit
TestClient
(
std
:
:
unique_ptr
<
AsyncPacketSocket
>
socket
)
;
TestClient
(
std
:
:
unique_ptr
<
AsyncPacketSocket
>
socket
ThreadProcessingFakeClock
*
fake_clock
)
;
~
TestClient
(
)
override
;
TestClient
(
const
TestClient
&
)
=
delete
;
TestClient
&
operator
=
(
const
TestClient
&
)
=
delete
;
SocketAddress
address
(
)
const
{
return
socket_
-
>
GetLocalAddress
(
)
;
}
SocketAddress
remote_address
(
)
const
{
return
socket_
-
>
GetRemoteAddress
(
)
;
}
bool
CheckConnState
(
AsyncPacketSocket
:
:
State
state
)
;
bool
CheckConnected
(
)
{
return
CheckConnState
(
AsyncPacketSocket
:
:
STATE_CONNECTED
)
;
}
int
Send
(
const
char
*
buf
size_t
size
)
;
int
SendTo
(
const
char
*
buf
size_t
size
const
SocketAddress
&
dest
)
;
std
:
:
unique_ptr
<
Packet
>
NextPacket
(
int
timeout_ms
)
;
bool
CheckNextPacket
(
const
char
*
buf
size_t
len
SocketAddress
*
addr
)
;
bool
CheckNoPacket
(
)
;
int
GetError
(
)
;
int
SetOption
(
Socket
:
:
Option
opt
int
value
)
;
bool
ready_to_send
(
)
const
{
return
ready_to_send_count
(
)
>
0
;
}
int
ready_to_send_count
(
)
const
{
return
ready_to_send_count_
;
}
private
:
static
const
int
kNoPacketTimeoutMs
=
1000
;
Socket
:
:
ConnState
GetState
(
)
;
void
OnPacket
(
AsyncPacketSocket
*
socket
const
ReceivedIpPacket
&
received_packet
)
;
void
OnReadyToSend
(
AsyncPacketSocket
*
socket
)
;
bool
CheckTimestamp
(
std
:
:
optional
<
Timestamp
>
packet_timestamp
)
;
void
AdvanceTime
(
int
ms
)
;
ThreadProcessingFakeClock
*
fake_clock_
=
nullptr
;
Mutex
mutex_
;
std
:
:
unique_ptr
<
AsyncPacketSocket
>
socket_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
Packet
>
>
packets_
;
int
ready_to_send_count_
=
0
;
std
:
:
optional
<
Timestamp
>
prev_packet_timestamp_
;
}
;
}
#
ifdef
WEBRTC_ALLOW_DEPRECATED_NAMESPACES
namespace
rtc
{
using
:
:
webrtc
:
:
TestClient
;
}
#
endif
#
endif
