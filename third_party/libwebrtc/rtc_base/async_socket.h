#
ifndef
RTC_BASE_ASYNC_SOCKET_H_
#
define
RTC_BASE_ASYNC_SOCKET_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
namespace
rtc
{
class
AsyncSocket
:
public
Socket
{
public
:
AsyncSocket
(
)
;
~
AsyncSocket
(
)
override
;
AsyncSocket
*
Accept
(
SocketAddress
*
paddr
)
override
=
0
;
sigslot
:
:
signal1
<
AsyncSocket
*
sigslot
:
:
multi_threaded_local
>
SignalReadEvent
;
sigslot
:
:
signal1
<
AsyncSocket
*
sigslot
:
:
multi_threaded_local
>
SignalWriteEvent
;
sigslot
:
:
signal1
<
AsyncSocket
*
>
SignalConnectEvent
;
sigslot
:
:
signal2
<
AsyncSocket
*
int
>
SignalCloseEvent
;
}
;
class
AsyncSocketAdapter
:
public
AsyncSocket
public
sigslot
:
:
has_slots
<
>
{
public
:
explicit
AsyncSocketAdapter
(
AsyncSocket
*
socket
)
;
SocketAddress
GetLocalAddress
(
)
const
override
;
SocketAddress
GetRemoteAddress
(
)
const
override
;
int
Bind
(
const
SocketAddress
&
addr
)
override
;
int
Connect
(
const
SocketAddress
&
addr
)
override
;
int
Send
(
const
void
*
pv
size_t
cb
)
override
;
int
SendTo
(
const
void
*
pv
size_t
cb
const
SocketAddress
&
addr
)
override
;
int
Recv
(
void
*
pv
size_t
cb
int64_t
*
timestamp
)
override
;
int
RecvFrom
(
void
*
pv
size_t
cb
SocketAddress
*
paddr
int64_t
*
timestamp
)
override
;
int
Listen
(
int
backlog
)
override
;
AsyncSocket
*
Accept
(
SocketAddress
*
paddr
)
override
;
int
Close
(
)
override
;
int
GetError
(
)
const
override
;
void
SetError
(
int
error
)
override
;
ConnState
GetState
(
)
const
override
;
int
GetOption
(
Option
opt
int
*
value
)
override
;
int
SetOption
(
Option
opt
int
value
)
override
;
protected
:
virtual
void
OnConnectEvent
(
AsyncSocket
*
socket
)
;
virtual
void
OnReadEvent
(
AsyncSocket
*
socket
)
;
virtual
void
OnWriteEvent
(
AsyncSocket
*
socket
)
;
virtual
void
OnCloseEvent
(
AsyncSocket
*
socket
int
err
)
;
AsyncSocket
*
GetSocket
(
)
const
{
return
socket_
.
get
(
)
;
}
private
:
const
std
:
:
unique_ptr
<
AsyncSocket
>
socket_
;
}
;
}
#
endif
