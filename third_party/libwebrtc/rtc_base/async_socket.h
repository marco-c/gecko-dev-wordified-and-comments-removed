#
ifndef
RTC_BASE_ASYNC_SOCKET_H_
#
define
RTC_BASE_ASYNC_SOCKET_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
namespace
webrtc
{
class
AsyncSocketAdapter
:
public
Socket
public
sigslot
:
:
has_slots
<
>
{
public
:
explicit
AsyncSocketAdapter
(
Socket
*
socket
)
;
SocketAddress
GetLocalAddress
(
)
const
override
;
SocketAddress
GetRemoteAddress
(
)
const
override
;
int
Bind
(
const
SocketAddress
&
addr
)
override
;
int
Connect
(
const
SocketAddress
&
addr
)
override
;
int
Send
(
const
void
*
pv
size_t
cb
)
override
;
int
SendTo
(
const
void
*
pv
size_t
cb
const
SocketAddress
&
addr
)
override
;
int
Recv
(
void
*
pv
size_t
cb
int64_t
*
timestamp
)
override
;
int
RecvFrom
(
void
*
pv
size_t
cb
SocketAddress
*
paddr
int64_t
*
timestamp
)
override
;
int
Listen
(
int
backlog
)
override
;
Socket
*
Accept
(
SocketAddress
*
paddr
)
override
;
int
Close
(
)
override
;
int
GetError
(
)
const
override
;
void
SetError
(
int
error
)
override
;
ConnState
GetState
(
)
const
override
;
int
GetOption
(
Option
opt
int
*
value
)
override
;
int
SetOption
(
Option
opt
int
value
)
override
;
protected
:
virtual
void
OnConnectEvent
(
Socket
*
socket
)
;
virtual
void
OnReadEvent
(
Socket
*
socket
)
;
virtual
void
OnWriteEvent
(
Socket
*
socket
)
;
virtual
void
OnCloseEvent
(
Socket
*
socket
int
err
)
;
Socket
*
GetSocket
(
)
const
{
return
socket_
.
get
(
)
;
}
private
:
const
std
:
:
unique_ptr
<
Socket
>
socket_
;
}
;
}
namespace
rtc
{
using
:
:
webrtc
:
:
AsyncSocketAdapter
;
}
#
endif
