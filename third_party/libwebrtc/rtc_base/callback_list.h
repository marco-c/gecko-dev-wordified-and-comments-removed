#
ifndef
RTC_BASE_CALLBACK_LIST_H_
#
define
RTC_BASE_CALLBACK_LIST_H_
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
function_view
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
system
/
assume
.
h
"
#
include
"
rtc_base
/
system
/
inline
.
h
"
#
include
"
rtc_base
/
untyped_function
.
h
"
namespace
webrtc
{
namespace
callback_list_impl
{
class
CallbackListReceivers
{
public
:
CallbackListReceivers
(
)
;
CallbackListReceivers
(
const
CallbackListReceivers
&
)
=
delete
;
CallbackListReceivers
&
operator
=
(
const
CallbackListReceivers
&
)
=
delete
;
CallbackListReceivers
(
CallbackListReceivers
&
&
)
=
delete
;
CallbackListReceivers
&
operator
=
(
CallbackListReceivers
&
&
)
=
delete
;
~
CallbackListReceivers
(
)
;
template
<
typename
UntypedFunctionArgsT
>
RTC_NO_INLINE
void
AddReceiver
(
UntypedFunctionArgsT
args
)
{
RTC_CHECK
(
!
send_in_progress_
)
;
receivers_
.
push_back
(
UntypedFunction
:
:
Create
(
args
)
)
;
}
void
Foreach
(
rtc
:
:
FunctionView
<
void
(
UntypedFunction
&
)
>
fv
)
;
private
:
std
:
:
vector
<
UntypedFunction
>
receivers_
;
bool
send_in_progress_
=
false
;
}
;
extern
template
void
CallbackListReceivers
:
:
AddReceiver
(
UntypedFunction
:
:
TrivialUntypedFunctionArgs
<
1
>
)
;
extern
template
void
CallbackListReceivers
:
:
AddReceiver
(
UntypedFunction
:
:
TrivialUntypedFunctionArgs
<
2
>
)
;
extern
template
void
CallbackListReceivers
:
:
AddReceiver
(
UntypedFunction
:
:
TrivialUntypedFunctionArgs
<
3
>
)
;
extern
template
void
CallbackListReceivers
:
:
AddReceiver
(
UntypedFunction
:
:
TrivialUntypedFunctionArgs
<
4
>
)
;
extern
template
void
CallbackListReceivers
:
:
AddReceiver
(
UntypedFunction
:
:
NontrivialUntypedFunctionArgs
)
;
extern
template
void
CallbackListReceivers
:
:
AddReceiver
(
UntypedFunction
:
:
FunctionPointerUntypedFunctionArgs
)
;
}
template
<
typename
.
.
.
ArgT
>
class
CallbackList
{
public
:
CallbackList
(
)
=
default
;
CallbackList
(
const
CallbackList
&
)
=
delete
;
CallbackList
&
operator
=
(
const
CallbackList
&
)
=
delete
;
CallbackList
(
CallbackList
&
&
)
=
delete
;
CallbackList
&
operator
=
(
CallbackList
&
&
)
=
delete
;
template
<
typename
F
>
void
AddReceiver
(
F
&
&
f
)
{
receivers_
.
AddReceiver
(
UntypedFunction
:
:
PrepareArgs
<
void
(
ArgT
.
.
.
)
>
(
std
:
:
forward
<
F
>
(
f
)
)
)
;
}
template
<
typename
.
.
.
ArgU
>
void
Send
(
ArgU
&
&
.
.
.
args
)
{
receivers_
.
Foreach
(
[
&
]
(
UntypedFunction
&
f
)
{
f
.
Call
<
void
(
ArgT
.
.
.
)
>
(
std
:
:
forward
<
ArgU
>
(
args
)
.
.
.
)
;
}
)
;
}
private
:
callback_list_impl
:
:
CallbackListReceivers
receivers_
;
}
;
}
#
endif
