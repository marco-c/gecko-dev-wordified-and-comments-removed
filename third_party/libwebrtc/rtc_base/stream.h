#
ifndef
RTC_BASE_STREAM_H_
#
define
RTC_BASE_STREAM_H_
#
include
<
memory
>
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
message_handler
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
rtc
{
enum
StreamState
{
SS_CLOSED
SS_OPENING
SS_OPEN
}
;
enum
StreamResult
{
SR_ERROR
SR_SUCCESS
SR_BLOCK
SR_EOS
}
;
enum
StreamEvent
{
SE_OPEN
=
1
SE_READ
=
2
SE_WRITE
=
4
SE_CLOSE
=
8
}
;
struct
StreamEventData
:
public
MessageData
{
int
events
error
;
StreamEventData
(
int
ev
int
er
)
:
events
(
ev
)
error
(
er
)
{
}
}
;
class
RTC_EXPORT
StreamInterface
:
public
MessageHandlerAutoCleanup
{
public
:
enum
{
MSG_POST_EVENT
=
0xF1F1
MSG_MAX
=
MSG_POST_EVENT
}
;
~
StreamInterface
(
)
override
;
virtual
StreamState
GetState
(
)
const
=
0
;
virtual
StreamResult
Read
(
void
*
buffer
size_t
buffer_len
size_t
*
read
int
*
error
)
=
0
;
virtual
StreamResult
Write
(
const
void
*
data
size_t
data_len
size_t
*
written
int
*
error
)
=
0
;
virtual
void
Close
(
)
=
0
;
sigslot
:
:
signal3
<
StreamInterface
*
int
int
>
SignalEvent
;
void
PostEvent
(
Thread
*
t
int
events
int
err
)
;
void
PostEvent
(
int
events
int
err
)
;
virtual
bool
Flush
(
)
;
StreamResult
WriteAll
(
const
void
*
data
size_t
data_len
size_t
*
written
int
*
error
)
;
protected
:
StreamInterface
(
)
;
void
OnMessage
(
Message
*
msg
)
override
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
StreamInterface
)
;
}
;
class
StreamAdapterInterface
:
public
StreamInterface
public
sigslot
:
:
has_slots
<
>
{
public
:
explicit
StreamAdapterInterface
(
StreamInterface
*
stream
bool
owned
=
true
)
;
StreamState
GetState
(
)
const
override
;
StreamResult
Read
(
void
*
buffer
size_t
buffer_len
size_t
*
read
int
*
error
)
override
;
StreamResult
Write
(
const
void
*
data
size_t
data_len
size_t
*
written
int
*
error
)
override
;
void
Close
(
)
override
;
bool
Flush
(
)
override
;
void
Attach
(
StreamInterface
*
stream
bool
owned
=
true
)
;
StreamInterface
*
Detach
(
)
;
protected
:
~
StreamAdapterInterface
(
)
override
;
virtual
void
OnEvent
(
StreamInterface
*
stream
int
events
int
err
)
;
StreamInterface
*
stream
(
)
{
return
stream_
;
}
private
:
StreamInterface
*
stream_
;
bool
owned_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
StreamAdapterInterface
)
;
}
;
}
#
endif
