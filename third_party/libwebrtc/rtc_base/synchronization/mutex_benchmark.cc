#
include
"
benchmark
/
benchmark
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
system
/
unused
.
h
"
namespace
webrtc
{
class
PerfTestData
{
public
:
PerfTestData
(
)
:
cache_line_barrier_1_
(
)
cache_line_barrier_2_
(
)
{
cache_line_barrier_1_
[
0
]
+
+
;
cache_line_barrier_2_
[
0
]
+
+
;
}
int
AddToCounter
(
int
add
)
{
MutexLock
mu
(
&
mu_
)
;
my_counter_
+
=
add
;
return
0
;
}
private
:
uint8_t
cache_line_barrier_1_
[
64
]
;
Mutex
mu_
;
uint8_t
cache_line_barrier_2_
[
64
]
;
int64_t
my_counter_
=
0
;
}
;
void
BM_LockWithMutex
(
benchmark
:
:
State
&
state
)
{
static
PerfTestData
test_data
;
for
(
auto
s
:
state
)
{
RTC_UNUSED
(
s
)
;
int
add_to_counter
=
test_data
.
AddToCounter
(
2
)
;
benchmark
:
:
DoNotOptimize
(
add_to_counter
)
;
}
}
BENCHMARK
(
BM_LockWithMutex
)
-
>
Threads
(
1
)
;
BENCHMARK
(
BM_LockWithMutex
)
-
>
Threads
(
2
)
;
BENCHMARK
(
BM_LockWithMutex
)
-
>
Threads
(
4
)
;
BENCHMARK
(
BM_LockWithMutex
)
-
>
ThreadPerCpu
(
)
;
}
