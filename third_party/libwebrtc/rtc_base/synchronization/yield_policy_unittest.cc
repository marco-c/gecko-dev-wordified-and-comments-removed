#
include
"
rtc_base
/
synchronization
/
yield_policy
.
h
"
#
include
<
thread
>
#
include
"
rtc_base
/
event
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
class
MockYieldHandler
:
public
YieldInterface
{
public
:
MOCK_METHOD
(
void
YieldExecution
(
)
(
override
)
)
;
}
;
}
TEST
(
YieldPolicyTest
HandlerReceivesYieldSignalWhenSet
)
{
:
:
testing
:
:
StrictMock
<
MockYieldHandler
>
handler
;
{
Event
event
;
EXPECT_CALL
(
handler
YieldExecution
(
)
)
.
Times
(
1
)
;
ScopedYieldPolicy
policy
(
&
handler
)
;
event
.
Set
(
)
;
event
.
Wait
(
Event
:
:
kForever
)
;
}
{
Event
event
;
EXPECT_CALL
(
handler
YieldExecution
(
)
)
.
Times
(
0
)
;
event
.
Set
(
)
;
event
.
Wait
(
Event
:
:
kForever
)
;
}
}
TEST
(
YieldPolicyTest
IsThreadLocal
)
{
Event
events
[
3
]
;
std
:
:
thread
other_thread
(
[
&
]
(
)
{
:
:
testing
:
:
StrictMock
<
MockYieldHandler
>
local_handler
;
EXPECT_CALL
(
local_handler
YieldExecution
(
)
)
.
Times
(
0
)
;
ScopedYieldPolicy
policy
(
&
local_handler
)
;
events
[
0
]
.
Set
(
)
;
events
[
1
]
.
Set
(
)
;
events
[
2
]
.
Set
(
)
;
}
)
;
events
[
0
]
.
Wait
(
Event
:
:
kForever
)
;
events
[
1
]
.
Wait
(
Event
:
:
kForever
)
;
:
:
testing
:
:
StrictMock
<
MockYieldHandler
>
main_handler
;
EXPECT_CALL
(
main_handler
YieldExecution
(
)
)
.
Times
(
1
)
;
ScopedYieldPolicy
policy
(
&
main_handler
)
;
events
[
2
]
.
Wait
(
Event
:
:
kForever
)
;
other_thread
.
join
(
)
;
}
}
