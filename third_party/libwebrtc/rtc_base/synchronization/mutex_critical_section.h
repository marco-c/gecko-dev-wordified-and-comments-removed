#
ifndef
RTC_BASE_SYNCHRONIZATION_MUTEX_CRITICAL_SECTION_H_
#
define
RTC_BASE_SYNCHRONIZATION_MUTEX_CRITICAL_SECTION_H_
#
if
defined
(
WEBRTC_WIN
)
#
include
<
winsock2
.
h
>
#
include
<
windows
.
h
>
#
include
<
sal
.
h
>
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
RTC_LOCKABLE
MutexImpl
final
{
public
:
MutexImpl
(
)
{
InitializeCriticalSection
(
&
critical_section_
)
;
}
MutexImpl
(
const
MutexImpl
&
)
=
delete
;
MutexImpl
&
operator
=
(
const
MutexImpl
&
)
=
delete
;
~
MutexImpl
(
)
{
DeleteCriticalSection
(
&
critical_section_
)
;
}
void
Lock
(
)
RTC_EXCLUSIVE_LOCK_FUNCTION
(
)
{
EnterCriticalSection
(
&
critical_section_
)
;
}
RTC_WARN_UNUSED_RESULT
bool
TryLock
(
)
RTC_EXCLUSIVE_TRYLOCK_FUNCTION
(
true
)
{
return
TryEnterCriticalSection
(
&
critical_section_
)
!
=
FALSE
;
}
void
Unlock
(
)
RTC_UNLOCK_FUNCTION
(
)
{
LeaveCriticalSection
(
&
critical_section_
)
;
}
private
:
CRITICAL_SECTION
critical_section_
;
}
;
}
#
endif
#
endif
