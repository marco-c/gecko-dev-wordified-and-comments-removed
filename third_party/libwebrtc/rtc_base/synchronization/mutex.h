#
ifndef
RTC_BASE_SYNCHRONIZATION_MUTEX_H_
#
define
RTC_BASE_SYNCHRONIZATION_MUTEX_H_
#
include
<
atomic
>
#
include
"
absl
/
base
/
const_init
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
platform_thread_types
.
h
"
#
include
"
rtc_base
/
system
/
unused
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
if
defined
(
WEBRTC_ABSL_MUTEX
)
#
include
"
rtc_base
/
synchronization
/
mutex_abseil
.
h
"
#
elif
defined
(
WEBRTC_WIN
)
#
include
"
rtc_base
/
synchronization
/
mutex_critical_section
.
h
"
#
elif
defined
(
WEBRTC_POSIX
)
#
include
"
rtc_base
/
synchronization
/
mutex_pthread
.
h
"
#
else
#
error
Unsupported
platform
.
#
endif
namespace
webrtc
{
class
RTC_LOCKABLE
Mutex
final
{
public
:
Mutex
(
)
=
default
;
Mutex
(
const
Mutex
&
)
=
delete
;
Mutex
&
operator
=
(
const
Mutex
&
)
=
delete
;
void
Lock
(
)
RTC_EXCLUSIVE_LOCK_FUNCTION
(
)
{
rtc
:
:
PlatformThreadRef
current
=
CurrentThreadRefAssertingNotBeingHolder
(
)
;
impl_
.
Lock
(
)
;
holder_
.
store
(
current
std
:
:
memory_order_relaxed
)
;
}
RTC_WARN_UNUSED_RESULT
bool
TryLock
(
)
RTC_EXCLUSIVE_TRYLOCK_FUNCTION
(
true
)
{
rtc
:
:
PlatformThreadRef
current
=
CurrentThreadRefAssertingNotBeingHolder
(
)
;
if
(
impl_
.
TryLock
(
)
)
{
holder_
.
store
(
current
std
:
:
memory_order_relaxed
)
;
return
true
;
}
return
false
;
}
void
Unlock
(
)
RTC_UNLOCK_FUNCTION
(
)
{
holder_
.
store
(
0
std
:
:
memory_order_relaxed
)
;
impl_
.
Unlock
(
)
;
}
private
:
rtc
:
:
PlatformThreadRef
CurrentThreadRefAssertingNotBeingHolder
(
)
{
rtc
:
:
PlatformThreadRef
holder
=
holder_
.
load
(
std
:
:
memory_order_relaxed
)
;
rtc
:
:
PlatformThreadRef
current
=
rtc
:
:
CurrentThreadRef
(
)
;
RTC_CHECK_NE
(
holder
current
)
;
return
current
;
}
MutexImpl
impl_
;
std
:
:
atomic
<
rtc
:
:
PlatformThreadRef
>
holder_
=
{
0
}
;
}
;
class
RTC_SCOPED_LOCKABLE
MutexLock
final
{
public
:
MutexLock
(
const
MutexLock
&
)
=
delete
;
MutexLock
&
operator
=
(
const
MutexLock
&
)
=
delete
;
explicit
MutexLock
(
Mutex
*
mutex
)
RTC_EXCLUSIVE_LOCK_FUNCTION
(
mutex
)
:
mutex_
(
mutex
)
{
mutex
-
>
Lock
(
)
;
}
~
MutexLock
(
)
RTC_UNLOCK_FUNCTION
(
)
{
mutex_
-
>
Unlock
(
)
;
}
private
:
Mutex
*
mutex_
;
}
;
#
if
defined
(
WEBRTC_ABSL_MUTEX
)
using
GlobalMutex
=
absl
:
:
Mutex
;
using
GlobalMutexLock
=
absl
:
:
MutexLock
;
#
else
class
RTC_LOCKABLE
GlobalMutex
final
{
public
:
GlobalMutex
(
const
GlobalMutex
&
)
=
delete
;
GlobalMutex
&
operator
=
(
const
GlobalMutex
&
)
=
delete
;
constexpr
explicit
GlobalMutex
(
absl
:
:
ConstInitType
)
:
mutex_locked_
(
0
)
{
}
void
Lock
(
)
RTC_EXCLUSIVE_LOCK_FUNCTION
(
)
;
void
Unlock
(
)
RTC_UNLOCK_FUNCTION
(
)
;
private
:
std
:
:
atomic
<
int
>
mutex_locked_
;
}
;
class
RTC_SCOPED_LOCKABLE
GlobalMutexLock
final
{
public
:
GlobalMutexLock
(
const
GlobalMutexLock
&
)
=
delete
;
GlobalMutexLock
&
operator
=
(
const
GlobalMutexLock
&
)
=
delete
;
explicit
GlobalMutexLock
(
GlobalMutex
*
mutex
)
RTC_EXCLUSIVE_LOCK_FUNCTION
(
mutex_
)
;
~
GlobalMutexLock
(
)
RTC_UNLOCK_FUNCTION
(
)
;
private
:
GlobalMutex
*
mutex_
;
}
;
#
endif
}
#
endif
