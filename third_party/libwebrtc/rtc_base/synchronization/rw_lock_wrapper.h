#
ifndef
RTC_BASE_SYNCHRONIZATION_RW_LOCK_WRAPPER_H_
#
define
RTC_BASE_SYNCHRONIZATION_RW_LOCK_WRAPPER_H_
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
RTC_LOCKABLE
RWLockWrapper
{
public
:
static
RWLockWrapper
*
CreateRWLock
(
)
;
virtual
~
RWLockWrapper
(
)
{
}
virtual
void
AcquireLockExclusive
(
)
RTC_EXCLUSIVE_LOCK_FUNCTION
(
)
=
0
;
virtual
void
ReleaseLockExclusive
(
)
RTC_UNLOCK_FUNCTION
(
)
=
0
;
virtual
void
AcquireLockShared
(
)
RTC_SHARED_LOCK_FUNCTION
(
)
=
0
;
virtual
void
ReleaseLockShared
(
)
RTC_UNLOCK_FUNCTION
(
)
=
0
;
}
;
class
RTC_SCOPED_LOCKABLE
ReadLockScoped
{
public
:
explicit
ReadLockScoped
(
RWLockWrapper
&
rw_lock
)
RTC_SHARED_LOCK_FUNCTION
(
rw_lock
)
:
rw_lock_
(
rw_lock
)
{
rw_lock_
.
AcquireLockShared
(
)
;
}
~
ReadLockScoped
(
)
RTC_UNLOCK_FUNCTION
(
)
{
rw_lock_
.
ReleaseLockShared
(
)
;
}
private
:
RWLockWrapper
&
rw_lock_
;
}
;
class
RTC_SCOPED_LOCKABLE
WriteLockScoped
{
public
:
explicit
WriteLockScoped
(
RWLockWrapper
&
rw_lock
)
RTC_EXCLUSIVE_LOCK_FUNCTION
(
rw_lock
)
:
rw_lock_
(
rw_lock
)
{
rw_lock_
.
AcquireLockExclusive
(
)
;
}
~
WriteLockScoped
(
)
RTC_UNLOCK_FUNCTION
(
)
{
rw_lock_
.
ReleaseLockExclusive
(
)
;
}
private
:
RWLockWrapper
&
rw_lock_
;
}
;
}
#
endif
