#
ifndef
RTC_BASE_NAT_SERVER_H_
#
define
RTC_BASE_NAT_SERVER_H_
#
include
<
map
>
#
include
<
set
>
#
include
"
rtc_base
/
async_udp_socket
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
nat_types
.
h
"
#
include
"
rtc_base
/
proxy_server
.
h
"
#
include
"
rtc_base
/
socket_address_pair
.
h
"
#
include
"
rtc_base
/
socket_factory
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
rtc
{
struct
RouteCmp
{
explicit
RouteCmp
(
NAT
*
nat
)
;
size_t
operator
(
)
(
const
SocketAddressPair
&
r
)
const
;
bool
operator
(
)
(
const
SocketAddressPair
&
r1
const
SocketAddressPair
&
r2
)
const
;
bool
symmetric
;
}
;
struct
AddrCmp
{
explicit
AddrCmp
(
NAT
*
nat
)
;
size_t
operator
(
)
(
const
SocketAddress
&
r
)
const
;
bool
operator
(
)
(
const
SocketAddress
&
r1
const
SocketAddress
&
r2
)
const
;
bool
use_ip
;
bool
use_port
;
}
;
const
int
NAT_SERVER_UDP_PORT
=
4237
;
const
int
NAT_SERVER_TCP_PORT
=
4238
;
class
NATServer
:
public
sigslot
:
:
has_slots
<
>
{
public
:
NATServer
(
NATType
type
SocketFactory
*
internal
const
SocketAddress
&
internal_udp_addr
const
SocketAddress
&
internal_tcp_addr
SocketFactory
*
external
const
SocketAddress
&
external_ip
)
;
~
NATServer
(
)
override
;
SocketAddress
internal_udp_address
(
)
const
{
return
udp_server_socket_
-
>
GetLocalAddress
(
)
;
}
SocketAddress
internal_tcp_address
(
)
const
{
return
tcp_proxy_server_
-
>
GetServerAddress
(
)
;
}
void
OnInternalUDPPacket
(
AsyncPacketSocket
*
socket
const
char
*
buf
size_t
size
const
SocketAddress
&
addr
const
int64_t
&
packet_time_us
)
;
void
OnExternalUDPPacket
(
AsyncPacketSocket
*
socket
const
char
*
buf
size_t
size
const
SocketAddress
&
remote_addr
const
int64_t
&
packet_time_us
)
;
private
:
typedef
std
:
:
set
<
SocketAddress
AddrCmp
>
AddressSet
;
struct
TransEntry
{
TransEntry
(
const
SocketAddressPair
&
r
AsyncUDPSocket
*
s
NAT
*
nat
)
;
~
TransEntry
(
)
;
void
AllowlistInsert
(
const
SocketAddress
&
addr
)
;
bool
AllowlistContains
(
const
SocketAddress
&
ext_addr
)
;
SocketAddressPair
route
;
AsyncUDPSocket
*
socket
;
AddressSet
*
allowlist
;
webrtc
:
:
Mutex
mutex_
;
}
;
typedef
std
:
:
map
<
SocketAddressPair
TransEntry
*
RouteCmp
>
InternalMap
;
typedef
std
:
:
map
<
SocketAddress
TransEntry
*
>
ExternalMap
;
void
Translate
(
const
SocketAddressPair
&
route
)
;
bool
ShouldFilterOut
(
TransEntry
*
entry
const
SocketAddress
&
ext_addr
)
;
NAT
*
nat_
;
SocketFactory
*
external_
;
SocketAddress
external_ip_
;
AsyncUDPSocket
*
udp_server_socket_
;
ProxyServer
*
tcp_proxy_server_
;
InternalMap
*
int_map_
;
ExternalMap
*
ext_map_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
NATServer
)
;
}
;
}
#
endif
