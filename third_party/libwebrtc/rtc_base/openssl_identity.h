#
ifndef
RTC_BASE_OPENSSL_IDENTITY_H_
#
define
RTC_BASE_OPENSSL_IDENTITY_H_
#
include
<
openssl
/
ossl_typ
.
h
>
#
include
<
ctime
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
rtc_base
/
openssl_certificate
.
h
"
#
include
"
rtc_base
/
openssl_key_pair
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_identity
.
h
"
namespace
webrtc
{
class
OpenSSLIdentity
final
:
public
SSLIdentity
{
public
:
static
std
:
:
unique_ptr
<
OpenSSLIdentity
>
CreateWithExpiration
(
absl
:
:
string_view
common_name
const
KeyParams
&
key_params
time_t
certificate_lifetime
)
;
static
std
:
:
unique_ptr
<
OpenSSLIdentity
>
CreateForTest
(
const
SSLIdentityParams
&
params
)
;
static
std
:
:
unique_ptr
<
SSLIdentity
>
CreateFromPEMStrings
(
absl
:
:
string_view
private_key
absl
:
:
string_view
certificate
)
;
static
std
:
:
unique_ptr
<
SSLIdentity
>
CreateFromPEMChainStrings
(
absl
:
:
string_view
private_key
absl
:
:
string_view
certificate_chain
)
;
~
OpenSSLIdentity
(
)
override
;
OpenSSLIdentity
(
const
OpenSSLIdentity
&
)
=
delete
;
OpenSSLIdentity
&
operator
=
(
const
OpenSSLIdentity
&
)
=
delete
;
const
OpenSSLCertificate
&
certificate
(
)
const
override
;
const
SSLCertChain
&
cert_chain
(
)
const
override
;
bool
ConfigureIdentity
(
SSL_CTX
*
ctx
)
;
std
:
:
string
PrivateKeyToPEMString
(
)
const
override
;
std
:
:
string
PublicKeyToPEMString
(
)
const
override
;
bool
operator
=
=
(
const
OpenSSLIdentity
&
other
)
const
;
bool
operator
!
=
(
const
OpenSSLIdentity
&
other
)
const
;
private
:
OpenSSLIdentity
(
std
:
:
unique_ptr
<
OpenSSLKeyPair
>
key_pair
std
:
:
unique_ptr
<
OpenSSLCertificate
>
certificate
)
;
OpenSSLIdentity
(
std
:
:
unique_ptr
<
OpenSSLKeyPair
>
key_pair
std
:
:
unique_ptr
<
SSLCertChain
>
cert_chain
)
;
std
:
:
unique_ptr
<
SSLIdentity
>
CloneInternal
(
)
const
override
;
static
std
:
:
unique_ptr
<
OpenSSLIdentity
>
CreateInternal
(
const
SSLIdentityParams
&
params
)
;
std
:
:
unique_ptr
<
OpenSSLKeyPair
>
key_pair_
;
std
:
:
unique_ptr
<
SSLCertChain
>
cert_chain_
;
}
;
}
#
ifdef
WEBRTC_ALLOW_DEPRECATED_NAMESPACES
namespace
rtc
{
using
:
:
webrtc
:
:
OpenSSLIdentity
;
}
#
endif
#
endif
