#
include
"
rtc_base
/
rtc_certificate_generator
.
h
"
#
include
<
time
.
h
>
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
location
.
h
"
#
include
"
rtc_base
/
message_handler
.
h
"
#
include
"
rtc_base
/
ssl_identity
.
h
"
namespace
rtc
{
namespace
{
const
char
kIdentityName
[
]
=
"
WebRTC
"
;
const
uint64_t
kYearInSeconds
=
365
*
24
*
60
*
60
;
}
scoped_refptr
<
RTCCertificate
>
RTCCertificateGenerator
:
:
GenerateCertificate
(
const
KeyParams
&
key_params
const
absl
:
:
optional
<
uint64_t
>
&
expires_ms
)
{
if
(
!
key_params
.
IsValid
(
)
)
{
return
nullptr
;
}
std
:
:
unique_ptr
<
SSLIdentity
>
identity
;
if
(
!
expires_ms
)
{
identity
=
SSLIdentity
:
:
Create
(
kIdentityName
key_params
)
;
}
else
{
uint64_t
expires_s
=
*
expires_ms
/
1000
;
expires_s
=
std
:
:
min
(
expires_s
kYearInSeconds
)
;
time_t
cert_lifetime_s
=
static_cast
<
time_t
>
(
expires_s
)
;
identity
=
SSLIdentity
:
:
Create
(
kIdentityName
key_params
cert_lifetime_s
)
;
}
if
(
!
identity
)
{
return
nullptr
;
}
return
RTCCertificate
:
:
Create
(
std
:
:
move
(
identity
)
)
;
}
RTCCertificateGenerator
:
:
RTCCertificateGenerator
(
Thread
*
signaling_thread
Thread
*
worker_thread
)
:
signaling_thread_
(
signaling_thread
)
worker_thread_
(
worker_thread
)
{
RTC_DCHECK
(
signaling_thread_
)
;
RTC_DCHECK
(
worker_thread_
)
;
}
void
RTCCertificateGenerator
:
:
GenerateCertificateAsync
(
const
KeyParams
&
key_params
const
absl
:
:
optional
<
uint64_t
>
&
expires_ms
const
scoped_refptr
<
RTCCertificateGeneratorCallback
>
&
callback
)
{
RTC_DCHECK
(
signaling_thread_
-
>
IsCurrent
(
)
)
;
RTC_DCHECK
(
callback
)
;
worker_thread_
-
>
PostTask
(
[
key_params
expires_ms
signaling_thread
=
signaling_thread_
cb
=
callback
]
(
)
{
scoped_refptr
<
RTCCertificate
>
certificate
=
RTCCertificateGenerator
:
:
GenerateCertificate
(
key_params
expires_ms
)
;
signaling_thread
-
>
PostTask
(
[
cert
=
std
:
:
move
(
certificate
)
cb
=
std
:
:
move
(
cb
)
]
(
)
{
cert
?
cb
-
>
OnSuccess
(
cert
)
:
cb
-
>
OnFailure
(
)
;
}
)
;
}
)
;
}
}
