#
ifndef
RTC_BASE_SSL_CERTIFICATE_H_
#
define
RTC_BASE_SSL_CERTIFICATE_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
rtc
{
struct
RTC_EXPORT
SSLCertificateStats
{
SSLCertificateStats
(
std
:
:
string
&
&
fingerprint
std
:
:
string
&
&
fingerprint_algorithm
std
:
:
string
&
&
base64_certificate
std
:
:
unique_ptr
<
SSLCertificateStats
>
issuer
)
;
~
SSLCertificateStats
(
)
;
std
:
:
string
fingerprint
;
std
:
:
string
fingerprint_algorithm
;
std
:
:
string
base64_certificate
;
std
:
:
unique_ptr
<
SSLCertificateStats
>
issuer
;
}
;
class
RTC_EXPORT
SSLCertificate
{
public
:
static
std
:
:
unique_ptr
<
SSLCertificate
>
FromPEMString
(
const
std
:
:
string
&
pem_string
)
;
virtual
~
SSLCertificate
(
)
=
default
;
virtual
std
:
:
unique_ptr
<
SSLCertificate
>
Clone
(
)
const
=
0
;
virtual
std
:
:
string
ToPEMString
(
)
const
=
0
;
virtual
void
ToDER
(
Buffer
*
der_buffer
)
const
=
0
;
virtual
bool
GetSignatureDigestAlgorithm
(
std
:
:
string
*
algorithm
)
const
=
0
;
virtual
bool
ComputeDigest
(
const
std
:
:
string
&
algorithm
unsigned
char
*
digest
size_t
size
size_t
*
length
)
const
=
0
;
virtual
int64_t
CertificateExpirationTime
(
)
const
=
0
;
std
:
:
unique_ptr
<
SSLCertificateStats
>
GetStats
(
)
const
;
}
;
class
RTC_EXPORT
SSLCertChain
final
{
public
:
explicit
SSLCertChain
(
std
:
:
unique_ptr
<
SSLCertificate
>
single_cert
)
;
explicit
SSLCertChain
(
std
:
:
vector
<
std
:
:
unique_ptr
<
SSLCertificate
>
>
certs
)
;
SSLCertChain
(
SSLCertChain
&
&
)
;
SSLCertChain
&
operator
=
(
SSLCertChain
&
&
)
;
~
SSLCertChain
(
)
;
size_t
GetSize
(
)
const
{
return
certs_
.
size
(
)
;
}
const
SSLCertificate
&
Get
(
size_t
pos
)
const
{
return
*
(
certs_
[
pos
]
)
;
}
std
:
:
unique_ptr
<
SSLCertChain
>
Clone
(
)
const
;
std
:
:
unique_ptr
<
SSLCertificateStats
>
GetStats
(
)
const
;
private
:
std
:
:
vector
<
std
:
:
unique_ptr
<
SSLCertificate
>
>
certs_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
SSLCertChain
)
;
}
;
class
SSLCertificateVerifier
{
public
:
virtual
~
SSLCertificateVerifier
(
)
=
default
;
virtual
bool
Verify
(
const
SSLCertificate
&
certificate
)
=
0
;
}
;
}
#
endif
