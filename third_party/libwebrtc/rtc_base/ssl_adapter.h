#
ifndef
RTC_BASE_SSL_ADAPTER_H_
#
define
RTC_BASE_SSL_ADAPTER_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
rtc_base
/
async_socket
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_identity
.
h
"
#
include
"
rtc_base
/
ssl_stream_adapter
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
rtc
{
class
SSLAdapter
;
class
SSLAdapterFactory
{
public
:
virtual
~
SSLAdapterFactory
(
)
{
}
virtual
void
SetMode
(
webrtc
:
:
SSLMode
mode
)
=
0
;
virtual
void
SetCertVerifier
(
SSLCertificateVerifier
*
ssl_cert_verifier
)
=
0
;
virtual
void
SetIdentity
(
std
:
:
unique_ptr
<
SSLIdentity
>
identity
)
=
0
;
virtual
void
SetRole
(
webrtc
:
:
SSLRole
role
)
=
0
;
virtual
void
SetIgnoreBadCert
(
bool
ignore
)
=
0
;
virtual
SSLAdapter
*
CreateAdapter
(
webrtc
:
:
Socket
*
socket
)
=
0
;
static
std
:
:
unique_ptr
<
SSLAdapterFactory
>
Create
(
)
;
}
;
class
SSLAdapter
:
public
webrtc
:
:
AsyncSocketAdapter
{
public
:
explicit
SSLAdapter
(
webrtc
:
:
Socket
*
socket
)
:
webrtc
:
:
AsyncSocketAdapter
(
socket
)
{
}
virtual
void
SetIgnoreBadCert
(
bool
ignore
)
=
0
;
virtual
void
SetAlpnProtocols
(
const
std
:
:
vector
<
std
:
:
string
>
&
protos
)
=
0
;
virtual
void
SetEllipticCurves
(
const
std
:
:
vector
<
std
:
:
string
>
&
curves
)
=
0
;
[
[
deprecated
(
"
Only
TLS
is
supported
by
the
adapter
"
)
]
]
virtual
void
SetMode
(
webrtc
:
:
SSLMode
mode
)
=
0
;
virtual
void
SetCertVerifier
(
SSLCertificateVerifier
*
ssl_cert_verifier
)
=
0
;
virtual
void
SetIdentity
(
std
:
:
unique_ptr
<
SSLIdentity
>
identity
)
=
0
;
virtual
void
SetRole
(
webrtc
:
:
SSLRole
role
)
=
0
;
virtual
int
StartSSL
(
absl
:
:
string_view
hostname
)
=
0
;
virtual
bool
IsResumedSession
(
)
=
0
;
static
SSLAdapter
*
Create
(
webrtc
:
:
Socket
*
socket
)
;
private
:
int
Listen
(
int
backlog
)
override
{
RTC_CHECK
(
false
)
;
}
webrtc
:
:
Socket
*
Accept
(
webrtc
:
:
SocketAddress
*
paddr
)
override
{
RTC_CHECK
(
false
)
;
}
}
;
RTC_EXPORT
bool
InitializeSSL
(
)
;
RTC_EXPORT
bool
CleanupSSL
(
)
;
}
#
endif
