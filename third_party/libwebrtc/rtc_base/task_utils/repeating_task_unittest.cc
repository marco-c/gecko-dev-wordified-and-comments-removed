#
include
"
rtc_base
/
task_utils
/
repeating_task
.
h
"
#
include
<
atomic
>
#
include
<
memory
>
#
include
"
api
/
task_queue
/
queued_task
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
task_queue_for_test
.
h
"
#
include
"
rtc_base
/
task_utils
/
to_queued_task
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
using
:
:
testing
:
:
AtLeast
;
using
:
:
testing
:
:
Invoke
;
using
:
:
testing
:
:
MockFunction
;
using
:
:
testing
:
:
NiceMock
;
using
:
:
testing
:
:
Return
;
constexpr
TimeDelta
kTimeout
=
TimeDelta
:
:
Millis
(
1000
)
;
class
MockClosure
{
public
:
MOCK_METHOD
(
TimeDelta
Call
(
)
)
;
MOCK_METHOD
(
void
Delete
(
)
)
;
}
;
class
MockTaskQueue
:
public
TaskQueueBase
{
public
:
MockTaskQueue
(
)
:
task_queue_setter_
(
this
)
{
}
MOCK_METHOD
(
void
Delete
(
)
(
override
)
)
;
MOCK_METHOD
(
void
PostTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
)
(
override
)
)
;
MOCK_METHOD
(
void
PostDelayedTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
uint32_t
milliseconds
)
(
override
)
)
;
private
:
CurrentTaskQueueSetter
task_queue_setter_
;
}
;
class
FakeTaskQueue
:
public
TaskQueueBase
{
public
:
explicit
FakeTaskQueue
(
SimulatedClock
*
clock
)
:
task_queue_setter_
(
this
)
clock_
(
clock
)
{
}
void
Delete
(
)
override
{
}
void
PostTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
)
override
{
last_task_
=
std
:
:
move
(
task
)
;
last_precision_
=
absl
:
:
nullopt
;
last_delay_
=
0
;
}
void
PostDelayedTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
uint32_t
milliseconds
)
override
{
last_task_
=
std
:
:
move
(
task
)
;
last_precision_
=
TaskQueueBase
:
:
DelayPrecision
:
:
kLow
;
last_delay_
=
milliseconds
;
}
void
PostDelayedHighPrecisionTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
uint32_t
milliseconds
)
override
{
last_task_
=
std
:
:
move
(
task
)
;
last_precision_
=
TaskQueueBase
:
:
DelayPrecision
:
:
kHigh
;
last_delay_
=
milliseconds
;
}
bool
AdvanceTimeAndRunLastTask
(
)
{
EXPECT_TRUE
(
last_task_
)
;
EXPECT_TRUE
(
last_delay_
)
;
clock_
-
>
AdvanceTimeMilliseconds
(
last_delay_
.
value_or
(
0
)
)
;
last_delay_
.
reset
(
)
;
auto
task
=
std
:
:
move
(
last_task_
)
;
bool
delete_task
=
task
-
>
Run
(
)
;
if
(
!
delete_task
)
{
task
.
release
(
)
;
}
return
delete_task
;
}
bool
IsTaskQueued
(
)
{
return
!
!
last_task_
;
}
uint32_t
last_delay
(
)
const
{
EXPECT_TRUE
(
last_delay_
.
has_value
(
)
)
;
return
last_delay_
.
value_or
(
-
1
)
;
}
absl
:
:
optional
<
TaskQueueBase
:
:
DelayPrecision
>
last_precision
(
)
const
{
return
last_precision_
;
}
private
:
CurrentTaskQueueSetter
task_queue_setter_
;
SimulatedClock
*
clock_
;
std
:
:
unique_ptr
<
QueuedTask
>
last_task_
;
absl
:
:
optional
<
uint32_t
>
last_delay_
;
absl
:
:
optional
<
TaskQueueBase
:
:
DelayPrecision
>
last_precision_
;
}
;
class
MoveOnlyClosure
{
public
:
explicit
MoveOnlyClosure
(
MockClosure
*
mock
)
:
mock_
(
mock
)
{
}
MoveOnlyClosure
(
const
MoveOnlyClosure
&
)
=
delete
;
MoveOnlyClosure
(
MoveOnlyClosure
&
&
other
)
:
mock_
(
other
.
mock_
)
{
other
.
mock_
=
nullptr
;
}
~
MoveOnlyClosure
(
)
{
if
(
mock_
)
mock_
-
>
Delete
(
)
;
}
TimeDelta
operator
(
)
(
)
{
return
mock_
-
>
Call
(
)
;
}
private
:
MockClosure
*
mock_
;
}
;
}
TEST
(
RepeatingTaskTest
TaskIsStoppedOnStop
)
{
const
TimeDelta
kShortInterval
=
TimeDelta
:
:
Millis
(
50
)
;
SimulatedClock
clock
(
Timestamp
:
:
Zero
(
)
)
;
FakeTaskQueue
task_queue
(
&
clock
)
;
std
:
:
atomic_int
counter
(
0
)
;
auto
handle
=
RepeatingTaskHandle
:
:
Start
(
&
task_queue
[
&
]
{
counter
+
+
;
return
kShortInterval
;
}
)
;
EXPECT_EQ
(
task_queue
.
last_delay
(
)
0u
)
;
EXPECT_FALSE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
EXPECT_EQ
(
counter
.
load
(
)
1
)
;
EXPECT_EQ
(
task_queue
.
last_delay
(
)
kShortInterval
.
ms
(
)
)
;
handle
.
Stop
(
)
;
EXPECT_TRUE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
EXPECT_EQ
(
counter
.
load
(
)
1
)
;
}
TEST
(
RepeatingTaskTest
CompensatesForLongRunTime
)
{
const
TimeDelta
kRepeatInterval
=
TimeDelta
:
:
Millis
(
2
)
;
const
TimeDelta
kSleepDuration
=
TimeDelta
:
:
Millis
(
20
)
;
std
:
:
atomic_int
counter
(
0
)
;
SimulatedClock
clock
(
Timestamp
:
:
Zero
(
)
)
;
FakeTaskQueue
task_queue
(
&
clock
)
;
RepeatingTaskHandle
:
:
Start
(
&
task_queue
[
&
]
{
+
+
counter
;
clock
.
AdvanceTime
(
kSleepDuration
)
;
return
kRepeatInterval
;
}
TaskQueueBase
:
:
DelayPrecision
:
:
kLow
&
clock
)
;
EXPECT_EQ
(
task_queue
.
last_delay
(
)
0u
)
;
EXPECT_FALSE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
EXPECT_EQ
(
task_queue
.
last_delay
(
)
0u
)
;
EXPECT_EQ
(
counter
.
load
(
)
1
)
;
}
TEST
(
RepeatingTaskTest
CompensatesForShortRunTime
)
{
SimulatedClock
clock
(
Timestamp
:
:
Millis
(
0
)
)
;
FakeTaskQueue
task_queue
(
&
clock
)
;
std
:
:
atomic_int
counter
(
0
)
;
RepeatingTaskHandle
:
:
Start
(
&
task_queue
[
&
]
{
counter
+
+
;
clock
.
AdvanceTime
(
TimeDelta
:
:
Millis
(
100
)
)
;
return
TimeDelta
:
:
Millis
(
300
)
;
}
TaskQueueBase
:
:
DelayPrecision
:
:
kLow
&
clock
)
;
EXPECT_EQ
(
task_queue
.
last_delay
(
)
0u
)
;
EXPECT_FALSE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
EXPECT_EQ
(
task_queue
.
last_delay
(
)
200u
)
;
}
TEST
(
RepeatingTaskTest
CancelDelayedTaskBeforeItRuns
)
{
rtc
:
:
Event
done
;
MockClosure
mock
;
EXPECT_CALL
(
mock
Call
)
.
Times
(
0
)
;
EXPECT_CALL
(
mock
Delete
)
.
WillOnce
(
Invoke
(
[
&
done
]
{
done
.
Set
(
)
;
}
)
)
;
TaskQueueForTest
task_queue
(
"
queue
"
)
;
auto
handle
=
RepeatingTaskHandle
:
:
DelayedStart
(
task_queue
.
Get
(
)
TimeDelta
:
:
Millis
(
100
)
MoveOnlyClosure
(
&
mock
)
)
;
task_queue
.
PostTask
(
[
handle
=
std
:
:
move
(
handle
)
]
(
)
mutable
{
handle
.
Stop
(
)
;
}
)
;
EXPECT_TRUE
(
done
.
Wait
(
kTimeout
.
ms
(
)
)
)
;
}
TEST
(
RepeatingTaskTest
CancelTaskAfterItRuns
)
{
rtc
:
:
Event
done
;
MockClosure
mock
;
EXPECT_CALL
(
mock
Call
)
.
WillOnce
(
Return
(
TimeDelta
:
:
Millis
(
100
)
)
)
;
EXPECT_CALL
(
mock
Delete
)
.
WillOnce
(
Invoke
(
[
&
done
]
{
done
.
Set
(
)
;
}
)
)
;
TaskQueueForTest
task_queue
(
"
queue
"
)
;
auto
handle
=
RepeatingTaskHandle
:
:
Start
(
task_queue
.
Get
(
)
MoveOnlyClosure
(
&
mock
)
)
;
task_queue
.
PostTask
(
[
handle
=
std
:
:
move
(
handle
)
]
(
)
mutable
{
handle
.
Stop
(
)
;
}
)
;
EXPECT_TRUE
(
done
.
Wait
(
kTimeout
.
ms
(
)
)
)
;
}
TEST
(
RepeatingTaskTest
TaskCanStopItself
)
{
std
:
:
atomic_int
counter
(
0
)
;
SimulatedClock
clock
(
Timestamp
:
:
Zero
(
)
)
;
FakeTaskQueue
task_queue
(
&
clock
)
;
RepeatingTaskHandle
handle
=
RepeatingTaskHandle
:
:
Start
(
&
task_queue
[
&
]
{
+
+
counter
;
handle
.
Stop
(
)
;
return
TimeDelta
:
:
Millis
(
2
)
;
}
)
;
EXPECT_EQ
(
task_queue
.
last_delay
(
)
0u
)
;
EXPECT_TRUE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
EXPECT_EQ
(
counter
.
load
(
)
1
)
;
}
TEST
(
RepeatingTaskTest
TaskCanStopItselfByReturningInfinity
)
{
std
:
:
atomic_int
counter
(
0
)
;
SimulatedClock
clock
(
Timestamp
:
:
Zero
(
)
)
;
FakeTaskQueue
task_queue
(
&
clock
)
;
RepeatingTaskHandle
handle
=
RepeatingTaskHandle
:
:
Start
(
&
task_queue
[
&
]
{
+
+
counter
;
return
TimeDelta
:
:
PlusInfinity
(
)
;
}
)
;
EXPECT_EQ
(
task_queue
.
last_delay
(
)
0u
)
;
EXPECT_TRUE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
EXPECT_EQ
(
counter
.
load
(
)
1
)
;
}
TEST
(
RepeatingTaskTest
ZeroReturnValueRepostsTheTask
)
{
NiceMock
<
MockClosure
>
closure
;
rtc
:
:
Event
done
;
EXPECT_CALL
(
closure
Call
(
)
)
.
WillOnce
(
Return
(
TimeDelta
:
:
Zero
(
)
)
)
.
WillOnce
(
Invoke
(
[
&
]
{
done
.
Set
(
)
;
return
TimeDelta
:
:
PlusInfinity
(
)
;
}
)
)
;
TaskQueueForTest
task_queue
(
"
queue
"
)
;
RepeatingTaskHandle
:
:
Start
(
task_queue
.
Get
(
)
MoveOnlyClosure
(
&
closure
)
)
;
EXPECT_TRUE
(
done
.
Wait
(
kTimeout
.
ms
(
)
)
)
;
}
TEST
(
RepeatingTaskTest
StartPeriodicTask
)
{
MockFunction
<
TimeDelta
(
)
>
closure
;
rtc
:
:
Event
done
;
EXPECT_CALL
(
closure
Call
(
)
)
.
WillOnce
(
Return
(
TimeDelta
:
:
Millis
(
20
)
)
)
.
WillOnce
(
Return
(
TimeDelta
:
:
Millis
(
20
)
)
)
.
WillOnce
(
Invoke
(
[
&
]
{
done
.
Set
(
)
;
return
TimeDelta
:
:
PlusInfinity
(
)
;
}
)
)
;
TaskQueueForTest
task_queue
(
"
queue
"
)
;
RepeatingTaskHandle
:
:
Start
(
task_queue
.
Get
(
)
closure
.
AsStdFunction
(
)
)
;
EXPECT_TRUE
(
done
.
Wait
(
kTimeout
.
ms
(
)
)
)
;
}
TEST
(
RepeatingTaskTest
Example
)
{
class
ObjectOnTaskQueue
{
public
:
void
DoPeriodicTask
(
)
{
}
TimeDelta
TimeUntilNextRun
(
)
{
return
TimeDelta
:
:
Millis
(
100
)
;
}
void
StartPeriodicTask
(
RepeatingTaskHandle
*
handle
TaskQueueBase
*
task_queue
)
{
*
handle
=
RepeatingTaskHandle
:
:
Start
(
task_queue
[
this
]
{
DoPeriodicTask
(
)
;
return
TimeUntilNextRun
(
)
;
}
)
;
}
}
;
TaskQueueForTest
task_queue
(
"
queue
"
)
;
auto
object
=
std
:
:
make_unique
<
ObjectOnTaskQueue
>
(
)
;
RepeatingTaskHandle
handle
;
object
-
>
StartPeriodicTask
(
&
handle
task_queue
.
Get
(
)
)
;
task_queue
.
PostTask
(
[
handle
=
std
:
:
move
(
handle
)
]
(
)
mutable
{
handle
.
Stop
(
)
;
}
)
;
object
-
>
StartPeriodicTask
(
&
handle
task_queue
.
Get
(
)
)
;
task_queue
.
PostTask
(
[
handle
=
std
:
:
move
(
handle
)
]
(
)
mutable
{
handle
.
Stop
(
)
;
}
)
;
struct
Destructor
{
void
operator
(
)
(
)
{
object
.
reset
(
)
;
}
std
:
:
unique_ptr
<
ObjectOnTaskQueue
>
object
;
}
;
task_queue
.
PostTask
(
Destructor
{
std
:
:
move
(
object
)
}
)
;
}
TEST
(
RepeatingTaskTest
ClockIntegration
)
{
std
:
:
unique_ptr
<
QueuedTask
>
delayed_task
;
uint32_t
expected_ms
=
0
;
SimulatedClock
clock
(
Timestamp
:
:
Millis
(
0
)
)
;
NiceMock
<
MockTaskQueue
>
task_queue
;
ON_CALL
(
task_queue
PostDelayedTask
)
.
WillByDefault
(
Invoke
(
[
&
delayed_task
&
expected_ms
]
(
std
:
:
unique_ptr
<
QueuedTask
>
task
uint32_t
milliseconds
)
{
EXPECT_EQ
(
milliseconds
expected_ms
)
;
delayed_task
=
std
:
:
move
(
task
)
;
}
)
)
;
expected_ms
=
100
;
RepeatingTaskHandle
handle
=
RepeatingTaskHandle
:
:
DelayedStart
(
&
task_queue
TimeDelta
:
:
Millis
(
100
)
[
&
clock
]
(
)
{
EXPECT_EQ
(
Timestamp
:
:
Millis
(
100
)
clock
.
CurrentTime
(
)
)
;
clock
.
AdvanceTimeMilliseconds
(
10
)
;
return
TimeDelta
:
:
Millis
(
100
)
;
}
TaskQueueBase
:
:
DelayPrecision
:
:
kLow
&
clock
)
;
clock
.
AdvanceTimeMilliseconds
(
100
)
;
QueuedTask
*
task_to_run
=
delayed_task
.
release
(
)
;
expected_ms
=
90
;
EXPECT_FALSE
(
task_to_run
-
>
Run
(
)
)
;
EXPECT_NE
(
nullptr
delayed_task
.
get
(
)
)
;
handle
.
Stop
(
)
;
}
TEST
(
RepeatingTaskTest
CanBeStoppedAfterTaskQueueDeletedTheRepeatingTask
)
{
std
:
:
unique_ptr
<
QueuedTask
>
repeating_task
;
MockTaskQueue
task_queue
;
EXPECT_CALL
(
task_queue
PostDelayedTask
)
.
WillOnce
(
[
&
]
(
std
:
:
unique_ptr
<
QueuedTask
>
task
uint32_t
milliseconds
)
{
repeating_task
=
std
:
:
move
(
task
)
;
}
)
;
RepeatingTaskHandle
handle
=
RepeatingTaskHandle
:
:
DelayedStart
(
&
task_queue
TimeDelta
:
:
Millis
(
100
)
[
]
{
return
TimeDelta
:
:
Millis
(
100
)
;
}
)
;
repeating_task
=
nullptr
;
handle
.
Stop
(
)
;
}
TEST
(
RepeatingTaskTest
DefaultPrecisionIsLow
)
{
SimulatedClock
clock
(
Timestamp
:
:
Zero
(
)
)
;
FakeTaskQueue
task_queue
(
&
clock
)
;
MockFunction
<
TimeDelta
(
)
>
closure
;
EXPECT_CALL
(
closure
Call
(
)
)
.
WillOnce
(
Return
(
TimeDelta
:
:
Millis
(
1
)
)
)
.
WillOnce
(
Return
(
TimeDelta
:
:
PlusInfinity
(
)
)
)
;
RepeatingTaskHandle
:
:
Start
(
&
task_queue
closure
.
AsStdFunction
(
)
)
;
EXPECT_FALSE
(
task_queue
.
last_precision
(
)
.
has_value
(
)
)
;
EXPECT_FALSE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
EXPECT_TRUE
(
task_queue
.
last_precision
(
)
.
has_value
(
)
)
;
EXPECT_EQ
(
task_queue
.
last_precision
(
)
.
value
(
)
TaskQueueBase
:
:
DelayPrecision
:
:
kLow
)
;
EXPECT_TRUE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
}
TEST
(
RepeatingTaskTest
CanSpecifyToPostTasksWithLowPrecision
)
{
SimulatedClock
clock
(
Timestamp
:
:
Zero
(
)
)
;
FakeTaskQueue
task_queue
(
&
clock
)
;
MockFunction
<
TimeDelta
(
)
>
closure
;
EXPECT_CALL
(
closure
Call
(
)
)
.
WillOnce
(
Return
(
TimeDelta
:
:
Millis
(
1
)
)
)
.
WillOnce
(
Return
(
TimeDelta
:
:
PlusInfinity
(
)
)
)
;
RepeatingTaskHandle
:
:
Start
(
&
task_queue
closure
.
AsStdFunction
(
)
TaskQueueBase
:
:
DelayPrecision
:
:
kLow
)
;
EXPECT_FALSE
(
task_queue
.
last_precision
(
)
.
has_value
(
)
)
;
EXPECT_FALSE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
EXPECT_TRUE
(
task_queue
.
last_precision
(
)
.
has_value
(
)
)
;
EXPECT_EQ
(
task_queue
.
last_precision
(
)
.
value
(
)
TaskQueueBase
:
:
DelayPrecision
:
:
kLow
)
;
EXPECT_TRUE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
}
TEST
(
RepeatingTaskTest
CanSpecifyToPostTasksWithHighPrecision
)
{
SimulatedClock
clock
(
Timestamp
:
:
Zero
(
)
)
;
FakeTaskQueue
task_queue
(
&
clock
)
;
MockFunction
<
TimeDelta
(
)
>
closure
;
EXPECT_CALL
(
closure
Call
(
)
)
.
WillOnce
(
Return
(
TimeDelta
:
:
Millis
(
1
)
)
)
.
WillOnce
(
Return
(
TimeDelta
:
:
PlusInfinity
(
)
)
)
;
RepeatingTaskHandle
:
:
Start
(
&
task_queue
closure
.
AsStdFunction
(
)
TaskQueueBase
:
:
DelayPrecision
:
:
kHigh
)
;
EXPECT_FALSE
(
task_queue
.
last_precision
(
)
.
has_value
(
)
)
;
EXPECT_FALSE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
EXPECT_TRUE
(
task_queue
.
last_precision
(
)
.
has_value
(
)
)
;
EXPECT_EQ
(
task_queue
.
last_precision
(
)
.
value
(
)
TaskQueueBase
:
:
DelayPrecision
:
:
kHigh
)
;
EXPECT_TRUE
(
task_queue
.
AdvanceTimeAndRunLastTask
(
)
)
;
}
}
