#
ifndef
RTC_BASE_TASK_UTILS_PENDING_TASK_SAFETY_FLAG_H_
#
define
RTC_BASE_TASK_UTILS_PENDING_TASK_SAFETY_FLAG_H_
#
include
"
api
/
ref_counted_base
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
namespace
webrtc
{
class
PendingTaskSafetyFlag
final
:
public
rtc
:
:
RefCountedNonVirtual
<
PendingTaskSafetyFlag
>
{
public
:
static
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
Create
(
)
;
static
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
CreateDetached
(
)
;
static
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
CreateDetachedInactive
(
)
;
~
PendingTaskSafetyFlag
(
)
=
default
;
void
SetNotAlive
(
)
;
void
SetAlive
(
)
;
bool
alive
(
)
const
;
protected
:
explicit
PendingTaskSafetyFlag
(
bool
alive
)
:
alive_
(
alive
)
{
}
private
:
static
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
CreateInternal
(
bool
alive
)
;
bool
alive_
=
true
;
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
main_sequence_
;
}
;
class
ScopedTaskSafety
final
{
public
:
ScopedTaskSafety
(
)
=
default
;
explicit
ScopedTaskSafety
(
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
flag
)
:
flag_
(
std
:
:
move
(
flag
)
)
{
}
~
ScopedTaskSafety
(
)
{
flag_
-
>
SetNotAlive
(
)
;
}
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
flag
(
)
const
{
return
flag_
;
}
void
reset
(
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
new_flag
=
PendingTaskSafetyFlag
:
:
Create
(
)
)
{
flag_
-
>
SetNotAlive
(
)
;
flag_
=
std
:
:
move
(
new_flag
)
;
}
private
:
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
flag_
=
PendingTaskSafetyFlag
:
:
Create
(
)
;
}
;
class
ScopedTaskSafetyDetached
final
{
public
:
ScopedTaskSafetyDetached
(
)
=
default
;
~
ScopedTaskSafetyDetached
(
)
{
flag_
-
>
SetNotAlive
(
)
;
}
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
flag
(
)
const
{
return
flag_
;
}
private
:
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
flag_
=
PendingTaskSafetyFlag
:
:
CreateDetached
(
)
;
}
;
}
#
endif
