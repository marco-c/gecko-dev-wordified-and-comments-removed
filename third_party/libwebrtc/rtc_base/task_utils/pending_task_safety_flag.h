#
ifndef
RTC_BASE_TASK_UTILS_PENDING_TASK_SAFETY_FLAG_H_
#
define
RTC_BASE_TASK_UTILS_PENDING_TASK_SAFETY_FLAG_H_
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
ref_count
.
h
"
#
include
"
rtc_base
/
synchronization
/
sequence_checker
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
namespace
webrtc
{
class
PendingTaskSafetyFlag
:
public
rtc
:
:
RefCountInterface
{
public
:
static
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
Create
(
)
;
~
PendingTaskSafetyFlag
(
)
=
default
;
void
SetNotAlive
(
)
;
bool
alive
(
)
const
;
protected
:
PendingTaskSafetyFlag
(
)
=
default
;
private
:
bool
alive_
=
true
;
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
main_sequence_
;
}
;
class
ScopedTaskSafety
{
public
:
ScopedTaskSafety
(
)
=
default
;
~
ScopedTaskSafety
(
)
{
flag_
-
>
SetNotAlive
(
)
;
}
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
flag
(
)
const
{
return
flag_
;
}
private
:
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
flag_
=
PendingTaskSafetyFlag
:
:
Create
(
)
;
}
;
}
#
endif
