#
ifndef
RTC_BASE_EXPERIMENTS_FIELD_TRIAL_PARSER_H_
#
define
RTC_BASE_EXPERIMENTS_FIELD_TRIAL_PARSER_H_
#
include
<
stdint
.
h
>
#
include
<
initializer_list
>
#
include
<
map
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
namespace
webrtc
{
class
FieldTrialParameterInterface
{
public
:
virtual
~
FieldTrialParameterInterface
(
)
;
std
:
:
string
key
(
)
const
{
return
key_
;
}
protected
:
FieldTrialParameterInterface
(
const
FieldTrialParameterInterface
&
)
=
default
;
FieldTrialParameterInterface
&
operator
=
(
const
FieldTrialParameterInterface
&
)
=
default
;
explicit
FieldTrialParameterInterface
(
std
:
:
string
key
)
;
friend
void
ParseFieldTrial
(
std
:
:
initializer_list
<
FieldTrialParameterInterface
*
>
fields
absl
:
:
string_view
trial_string
)
;
void
MarkAsUsed
(
)
{
used_
=
true
;
}
virtual
bool
Parse
(
absl
:
:
optional
<
std
:
:
string
>
str_value
)
=
0
;
virtual
void
ParseDone
(
)
{
}
std
:
:
vector
<
FieldTrialParameterInterface
*
>
sub_parameters_
;
private
:
std
:
:
string
key_
;
bool
used_
=
false
;
}
;
void
ParseFieldTrial
(
std
:
:
initializer_list
<
FieldTrialParameterInterface
*
>
fields
absl
:
:
string_view
trial_string
)
;
template
<
typename
T
>
absl
:
:
optional
<
T
>
ParseTypedParameter
(
std
:
:
string
)
;
template
<
typename
T
>
class
FieldTrialParameter
:
public
FieldTrialParameterInterface
{
public
:
FieldTrialParameter
(
std
:
:
string
key
T
default_value
)
:
FieldTrialParameterInterface
(
key
)
value_
(
default_value
)
{
}
T
Get
(
)
const
{
return
value_
;
}
explicit
operator
T
(
)
const
{
return
Get
(
)
;
}
const
T
*
operator
-
>
(
)
const
{
return
&
value_
;
}
void
SetForTest
(
T
value
)
{
value_
=
value
;
}
protected
:
bool
Parse
(
absl
:
:
optional
<
std
:
:
string
>
str_value
)
override
{
if
(
str_value
)
{
absl
:
:
optional
<
T
>
value
=
ParseTypedParameter
<
T
>
(
*
str_value
)
;
if
(
value
.
has_value
(
)
)
{
value_
=
value
.
value
(
)
;
return
true
;
}
}
return
false
;
}
private
:
T
value_
;
}
;
template
<
typename
T
>
class
FieldTrialConstrained
:
public
FieldTrialParameterInterface
{
public
:
FieldTrialConstrained
(
std
:
:
string
key
T
default_value
absl
:
:
optional
<
T
>
lower_limit
absl
:
:
optional
<
T
>
upper_limit
)
:
FieldTrialParameterInterface
(
key
)
value_
(
default_value
)
lower_limit_
(
lower_limit
)
upper_limit_
(
upper_limit
)
{
}
T
Get
(
)
const
{
return
value_
;
}
operator
T
(
)
const
{
return
Get
(
)
;
}
const
T
*
operator
-
>
(
)
const
{
return
&
value_
;
}
protected
:
bool
Parse
(
absl
:
:
optional
<
std
:
:
string
>
str_value
)
override
{
if
(
str_value
)
{
absl
:
:
optional
<
T
>
value
=
ParseTypedParameter
<
T
>
(
*
str_value
)
;
if
(
value
&
&
(
!
lower_limit_
|
|
*
value
>
=
*
lower_limit_
)
&
&
(
!
upper_limit_
|
|
*
value
<
=
*
upper_limit_
)
)
{
value_
=
*
value
;
return
true
;
}
}
return
false
;
}
private
:
T
value_
;
absl
:
:
optional
<
T
>
lower_limit_
;
absl
:
:
optional
<
T
>
upper_limit_
;
}
;
class
AbstractFieldTrialEnum
:
public
FieldTrialParameterInterface
{
public
:
AbstractFieldTrialEnum
(
std
:
:
string
key
int
default_value
std
:
:
map
<
std
:
:
string
int
>
mapping
)
;
~
AbstractFieldTrialEnum
(
)
override
;
AbstractFieldTrialEnum
(
const
AbstractFieldTrialEnum
&
)
;
protected
:
bool
Parse
(
absl
:
:
optional
<
std
:
:
string
>
str_value
)
override
;
protected
:
int
value_
;
std
:
:
map
<
std
:
:
string
int
>
enum_mapping_
;
std
:
:
set
<
int
>
valid_values_
;
}
;
template
<
typename
T
>
class
FieldTrialEnum
:
public
AbstractFieldTrialEnum
{
public
:
FieldTrialEnum
(
std
:
:
string
key
T
default_value
std
:
:
map
<
std
:
:
string
T
>
mapping
)
:
AbstractFieldTrialEnum
(
key
static_cast
<
int
>
(
default_value
)
ToIntMap
(
mapping
)
)
{
}
T
Get
(
)
const
{
return
static_cast
<
T
>
(
value_
)
;
}
operator
T
(
)
const
{
return
Get
(
)
;
}
private
:
static
std
:
:
map
<
std
:
:
string
int
>
ToIntMap
(
std
:
:
map
<
std
:
:
string
T
>
mapping
)
{
std
:
:
map
<
std
:
:
string
int
>
res
;
for
(
const
auto
&
it
:
mapping
)
res
[
it
.
first
]
=
static_cast
<
int
>
(
it
.
second
)
;
return
res
;
}
}
;
template
<
typename
T
>
class
FieldTrialOptional
:
public
FieldTrialParameterInterface
{
public
:
explicit
FieldTrialOptional
(
std
:
:
string
key
)
:
FieldTrialParameterInterface
(
key
)
{
}
FieldTrialOptional
(
std
:
:
string
key
absl
:
:
optional
<
T
>
default_value
)
:
FieldTrialParameterInterface
(
key
)
value_
(
default_value
)
{
}
absl
:
:
optional
<
T
>
GetOptional
(
)
const
{
return
value_
;
}
const
T
&
Value
(
)
const
{
return
value_
.
value
(
)
;
}
const
T
&
operator
*
(
)
const
{
return
value_
.
value
(
)
;
}
const
T
*
operator
-
>
(
)
const
{
return
&
value_
.
value
(
)
;
}
explicit
operator
bool
(
)
const
{
return
value_
.
has_value
(
)
;
}
protected
:
bool
Parse
(
absl
:
:
optional
<
std
:
:
string
>
str_value
)
override
{
if
(
str_value
)
{
absl
:
:
optional
<
T
>
value
=
ParseTypedParameter
<
T
>
(
*
str_value
)
;
if
(
!
value
.
has_value
(
)
)
return
false
;
value_
=
value
.
value
(
)
;
}
else
{
value_
=
absl
:
:
nullopt
;
}
return
true
;
}
private
:
absl
:
:
optional
<
T
>
value_
;
}
;
class
FieldTrialFlag
:
public
FieldTrialParameterInterface
{
public
:
explicit
FieldTrialFlag
(
std
:
:
string
key
)
;
FieldTrialFlag
(
std
:
:
string
key
bool
default_value
)
;
bool
Get
(
)
const
;
explicit
operator
bool
(
)
const
;
protected
:
bool
Parse
(
absl
:
:
optional
<
std
:
:
string
>
str_value
)
override
;
private
:
bool
value_
;
}
;
template
<
typename
T
>
absl
:
:
optional
<
absl
:
:
optional
<
T
>
>
ParseOptionalParameter
(
std
:
:
string
str
)
{
if
(
str
.
empty
(
)
)
return
absl
:
:
optional
<
T
>
(
)
;
auto
parsed
=
ParseTypedParameter
<
T
>
(
str
)
;
if
(
parsed
.
has_value
(
)
)
return
parsed
;
return
absl
:
:
nullopt
;
}
template
<
>
absl
:
:
optional
<
bool
>
ParseTypedParameter
<
bool
>
(
std
:
:
string
str
)
;
template
<
>
absl
:
:
optional
<
double
>
ParseTypedParameter
<
double
>
(
std
:
:
string
str
)
;
template
<
>
absl
:
:
optional
<
int
>
ParseTypedParameter
<
int
>
(
std
:
:
string
str
)
;
template
<
>
absl
:
:
optional
<
unsigned
>
ParseTypedParameter
<
unsigned
>
(
std
:
:
string
str
)
;
template
<
>
absl
:
:
optional
<
std
:
:
string
>
ParseTypedParameter
<
std
:
:
string
>
(
std
:
:
string
str
)
;
template
<
>
absl
:
:
optional
<
absl
:
:
optional
<
bool
>
>
ParseTypedParameter
<
absl
:
:
optional
<
bool
>
>
(
std
:
:
string
str
)
;
template
<
>
absl
:
:
optional
<
absl
:
:
optional
<
int
>
>
ParseTypedParameter
<
absl
:
:
optional
<
int
>
>
(
std
:
:
string
str
)
;
template
<
>
absl
:
:
optional
<
absl
:
:
optional
<
unsigned
>
>
ParseTypedParameter
<
absl
:
:
optional
<
unsigned
>
>
(
std
:
:
string
str
)
;
template
<
>
absl
:
:
optional
<
absl
:
:
optional
<
double
>
>
ParseTypedParameter
<
absl
:
:
optional
<
double
>
>
(
std
:
:
string
str
)
;
extern
template
class
FieldTrialParameter
<
bool
>
;
extern
template
class
FieldTrialParameter
<
double
>
;
extern
template
class
FieldTrialParameter
<
int
>
;
extern
template
class
FieldTrialParameter
<
unsigned
>
;
extern
template
class
FieldTrialParameter
<
std
:
:
string
>
;
extern
template
class
FieldTrialConstrained
<
double
>
;
extern
template
class
FieldTrialConstrained
<
int
>
;
extern
template
class
FieldTrialConstrained
<
unsigned
>
;
extern
template
class
FieldTrialOptional
<
double
>
;
extern
template
class
FieldTrialOptional
<
int
>
;
extern
template
class
FieldTrialOptional
<
unsigned
>
;
extern
template
class
FieldTrialOptional
<
bool
>
;
extern
template
class
FieldTrialOptional
<
std
:
:
string
>
;
}
#
endif
