#
ifndef
RTC_BASE_EXPERIMENTS_ENCODER_INFO_SETTINGS_H_
#
define
RTC_BASE_EXPERIMENTS_ENCODER_INFO_SETTINGS_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
rtc_base
/
experiments
/
field_trial_parser
.
h
"
namespace
webrtc
{
class
EncoderInfoSettings
{
public
:
virtual
~
EncoderInfoSettings
(
)
;
struct
BitrateLimit
{
int
frame_size_pixels
=
0
;
int
min_start_bitrate_bps
=
0
;
int
min_bitrate_bps
=
0
;
int
max_bitrate_bps
=
0
;
}
;
absl
:
:
optional
<
uint32_t
>
requested_resolution_alignment
(
)
const
;
bool
apply_alignment_to_all_simulcast_layers
(
)
const
{
return
apply_alignment_to_all_simulcast_layers_
.
Get
(
)
;
}
std
:
:
vector
<
VideoEncoder
:
:
ResolutionBitrateLimits
>
resolution_bitrate_limits
(
)
const
{
return
resolution_bitrate_limits_
;
}
static
std
:
:
vector
<
VideoEncoder
:
:
ResolutionBitrateLimits
>
GetDefaultSinglecastBitrateLimits
(
VideoCodecType
codec_type
)
;
static
absl
:
:
optional
<
VideoEncoder
:
:
ResolutionBitrateLimits
>
GetDefaultSinglecastBitrateLimitsForResolution
(
VideoCodecType
codec_type
int
frame_size_pixels
)
;
static
std
:
:
vector
<
VideoEncoder
:
:
ResolutionBitrateLimits
>
GetDefaultSinglecastBitrateLimitsWhenQpIsUntrusted
(
)
;
static
absl
:
:
optional
<
VideoEncoder
:
:
ResolutionBitrateLimits
>
GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted
(
absl
:
:
optional
<
int
>
frame_size_pixels
const
std
:
:
vector
<
VideoEncoder
:
:
ResolutionBitrateLimits
>
&
resolution_bitrate_limits
)
;
protected
:
explicit
EncoderInfoSettings
(
absl
:
:
string_view
name
)
;
private
:
FieldTrialOptional
<
uint32_t
>
requested_resolution_alignment_
;
FieldTrialFlag
apply_alignment_to_all_simulcast_layers_
;
std
:
:
vector
<
VideoEncoder
:
:
ResolutionBitrateLimits
>
resolution_bitrate_limits_
;
}
;
class
SimulcastEncoderAdapterEncoderInfoSettings
:
public
EncoderInfoSettings
{
public
:
SimulcastEncoderAdapterEncoderInfoSettings
(
)
;
~
SimulcastEncoderAdapterEncoderInfoSettings
(
)
override
{
}
}
;
class
LibvpxVp8EncoderInfoSettings
:
public
EncoderInfoSettings
{
public
:
LibvpxVp8EncoderInfoSettings
(
)
;
~
LibvpxVp8EncoderInfoSettings
(
)
override
{
}
}
;
class
LibvpxVp9EncoderInfoSettings
:
public
EncoderInfoSettings
{
public
:
LibvpxVp9EncoderInfoSettings
(
)
;
~
LibvpxVp9EncoderInfoSettings
(
)
override
{
}
}
;
class
LibaomAv1EncoderInfoSettings
:
public
EncoderInfoSettings
{
public
:
LibaomAv1EncoderInfoSettings
(
)
;
~
LibaomAv1EncoderInfoSettings
(
)
override
{
}
}
;
}
#
endif
