#
ifndef
RTC_BASE_NETWORK_RECEIVED_PACKET_H_
#
define
RTC_BASE_NETWORK_RECEIVED_PACKET_H_
#
include
<
cstdint
>
#
include
<
optional
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
network
/
ecn_marking
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
rtc
{
class
RTC_EXPORT
ReceivedPacket
{
public
:
enum
DecryptionInfo
{
kNotDecrypted
kDtlsDecrypted
kSrtpEncrypted
}
;
ReceivedPacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
const
webrtc
:
:
SocketAddress
&
source_address
std
:
:
optional
<
webrtc
:
:
Timestamp
>
arrival_time
=
std
:
:
nullopt
EcnMarking
ecn
=
EcnMarking
:
:
kNotEct
DecryptionInfo
decryption
=
kNotDecrypted
)
;
ReceivedPacket
CopyAndSet
(
DecryptionInfo
decryption_info
)
const
;
const
webrtc
:
:
SocketAddress
&
source_address
(
)
const
{
return
source_address_
;
}
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
(
)
const
{
return
payload_
;
}
std
:
:
optional
<
webrtc
:
:
Timestamp
>
arrival_time
(
)
const
{
return
arrival_time_
;
}
EcnMarking
ecn
(
)
const
{
return
ecn_
;
}
const
DecryptionInfo
&
decryption_info
(
)
const
{
return
decryption_info_
;
}
static
ReceivedPacket
CreateFromLegacy
(
const
char
*
data
size_t
size
int64_t
packet_time_us
const
webrtc
:
:
SocketAddress
&
addr
=
webrtc
:
:
SocketAddress
(
)
)
{
return
CreateFromLegacy
(
reinterpret_cast
<
const
uint8_t
*
>
(
data
)
size
packet_time_us
addr
)
;
}
static
ReceivedPacket
CreateFromLegacy
(
const
uint8_t
*
data
size_t
size
int64_t
packet_time_us
const
webrtc
:
:
SocketAddress
&
=
webrtc
:
:
SocketAddress
(
)
)
;
private
:
rtc
:
:
ArrayView
<
const
uint8_t
>
payload_
;
std
:
:
optional
<
webrtc
:
:
Timestamp
>
arrival_time_
;
const
webrtc
:
:
SocketAddress
&
source_address_
;
EcnMarking
ecn_
;
DecryptionInfo
decryption_info_
;
}
;
}
#
endif
