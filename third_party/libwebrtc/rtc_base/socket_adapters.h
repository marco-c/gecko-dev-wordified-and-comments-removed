#
ifndef
RTC_BASE_SOCKET_ADAPTERS_H_
#
define
RTC_BASE_SOCKET_ADAPTERS_H_
#
include
<
string
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
rtc_base
/
async_socket
.
h
"
namespace
rtc
{
struct
HttpAuthContext
;
class
ByteBufferReader
;
class
ByteBufferWriter
;
}
namespace
webrtc
{
class
BufferedReadAdapter
:
public
AsyncSocketAdapter
{
public
:
BufferedReadAdapter
(
Socket
*
socket
size_t
buffer_size
)
;
~
BufferedReadAdapter
(
)
override
;
BufferedReadAdapter
(
const
BufferedReadAdapter
&
)
=
delete
;
BufferedReadAdapter
&
operator
=
(
const
BufferedReadAdapter
&
)
=
delete
;
int
Send
(
const
void
*
pv
size_t
cb
)
override
;
int
Recv
(
void
*
pv
size_t
cb
int64_t
*
timestamp
)
override
;
protected
:
int
DirectSend
(
const
void
*
pv
size_t
cb
)
{
return
AsyncSocketAdapter
:
:
Send
(
pv
cb
)
;
}
void
BufferInput
(
bool
on
=
true
)
;
virtual
void
ProcessInput
(
char
*
data
size_t
*
len
)
=
0
;
void
OnReadEvent
(
Socket
*
socket
)
override
;
private
:
char
*
buffer_
;
size_t
buffer_size_
data_len_
;
bool
buffering_
;
}
;
class
AsyncSSLSocket
:
public
BufferedReadAdapter
{
public
:
static
rtc
:
:
ArrayView
<
const
uint8_t
>
SslClientHello
(
)
;
static
rtc
:
:
ArrayView
<
const
uint8_t
>
SslServerHello
(
)
;
explicit
AsyncSSLSocket
(
Socket
*
socket
)
;
AsyncSSLSocket
(
const
AsyncSSLSocket
&
)
=
delete
;
AsyncSSLSocket
&
operator
=
(
const
AsyncSSLSocket
&
)
=
delete
;
int
Connect
(
const
SocketAddress
&
addr
)
override
;
protected
:
void
OnConnectEvent
(
Socket
*
socket
)
override
;
void
ProcessInput
(
char
*
data
size_t
*
len
)
override
;
}
;
}
namespace
rtc
{
using
:
:
webrtc
:
:
AsyncSSLSocket
;
using
:
:
webrtc
:
:
BufferedReadAdapter
;
}
#
endif
