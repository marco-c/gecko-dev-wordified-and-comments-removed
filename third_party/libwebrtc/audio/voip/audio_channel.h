#
ifndef
AUDIO_VOIP_AUDIO_CHANNEL_H_
#
define
AUDIO_VOIP_AUDIO_CHANNEL_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
queue
>
#
include
<
utility
>
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
voip
/
voip_base
.
h
"
#
include
"
audio
/
voip
/
audio_egress
.
h
"
#
include
"
audio
/
voip
/
audio_ingress
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_rtcp_impl2
.
h
"
#
include
"
modules
/
utility
/
include
/
process_thread
.
h
"
#
include
"
rtc_base
/
ref_count
.
h
"
namespace
webrtc
{
class
AudioChannel
:
public
rtc
:
:
RefCountInterface
{
public
:
AudioChannel
(
Transport
*
transport
uint32_t
local_ssrc
TaskQueueFactory
*
task_queue_factory
ProcessThread
*
process_thread
AudioMixer
*
audio_mixer
rtc
:
:
scoped_refptr
<
AudioDecoderFactory
>
decoder_factory
)
;
~
AudioChannel
(
)
override
;
void
SetId
(
ChannelId
id
)
{
id_
=
id
;
}
ChannelId
GetId
(
)
const
{
return
id_
;
}
bool
StartSend
(
)
;
void
StopSend
(
)
;
bool
StartPlay
(
)
;
void
StopPlay
(
)
;
bool
IsSendingMedia
(
)
const
{
return
egress_
-
>
IsSending
(
)
;
}
AudioSender
*
GetAudioSender
(
)
{
return
egress_
.
get
(
)
;
}
void
SetEncoder
(
int
payload_type
const
SdpAudioFormat
&
encoder_format
std
:
:
unique_ptr
<
AudioEncoder
>
encoder
)
{
egress_
-
>
SetEncoder
(
payload_type
encoder_format
std
:
:
move
(
encoder
)
)
;
}
absl
:
:
optional
<
SdpAudioFormat
>
GetEncoderFormat
(
)
const
{
return
egress_
-
>
GetEncoderFormat
(
)
;
}
void
RegisterTelephoneEventType
(
int
rtp_payload_type
int
sample_rate_hz
)
{
egress_
-
>
RegisterTelephoneEventType
(
rtp_payload_type
sample_rate_hz
)
;
}
bool
SendTelephoneEvent
(
int
dtmf_event
int
duration_ms
)
{
return
egress_
-
>
SendTelephoneEvent
(
dtmf_event
duration_ms
)
;
}
bool
IsPlaying
(
)
const
{
return
ingress_
-
>
IsPlaying
(
)
;
}
void
ReceivedRTPPacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
rtp_packet
)
{
ingress_
-
>
ReceivedRTPPacket
(
rtp_packet
)
;
}
void
ReceivedRTCPPacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
rtcp_packet
)
{
ingress_
-
>
ReceivedRTCPPacket
(
rtcp_packet
)
;
}
void
SetReceiveCodecs
(
const
std
:
:
map
<
int
SdpAudioFormat
>
&
codecs
)
{
ingress_
-
>
SetReceiveCodecs
(
codecs
)
;
}
private
:
ChannelId
id_
;
AudioMixer
*
audio_mixer_
;
ProcessThread
*
process_thread_
;
std
:
:
unique_ptr
<
ReceiveStatistics
>
receive_statistics_
;
std
:
:
unique_ptr
<
ModuleRtpRtcpImpl2
>
rtp_rtcp_
;
std
:
:
unique_ptr
<
AudioIngress
>
ingress_
;
std
:
:
unique_ptr
<
AudioEgress
>
egress_
;
}
;
}
#
endif
