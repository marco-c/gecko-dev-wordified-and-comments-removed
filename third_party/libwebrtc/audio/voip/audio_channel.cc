#
include
"
audio
/
voip
/
audio_channel
.
h
"
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
receive_statistics
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_rtcp_impl2
.
h
"
#
include
"
rtc_base
/
location
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
namespace
webrtc
{
namespace
{
constexpr
int
kRtcpReportIntervalMs
=
5000
;
}
AudioChannel
:
:
AudioChannel
(
Transport
*
transport
uint32_t
local_ssrc
TaskQueueFactory
*
task_queue_factory
ProcessThread
*
process_thread
AudioMixer
*
audio_mixer
rtc
:
:
scoped_refptr
<
AudioDecoderFactory
>
decoder_factory
)
:
audio_mixer_
(
audio_mixer
)
process_thread_
(
process_thread
)
{
RTC_DCHECK
(
task_queue_factory
)
;
RTC_DCHECK
(
process_thread
)
;
RTC_DCHECK
(
audio_mixer
)
;
Clock
*
clock
=
Clock
:
:
GetRealTimeClock
(
)
;
receive_statistics_
=
ReceiveStatistics
:
:
Create
(
clock
)
;
RtpRtcpInterface
:
:
Configuration
rtp_config
;
rtp_config
.
clock
=
clock
;
rtp_config
.
audio
=
true
;
rtp_config
.
receive_statistics
=
receive_statistics_
.
get
(
)
;
rtp_config
.
rtcp_report_interval_ms
=
kRtcpReportIntervalMs
;
rtp_config
.
outgoing_transport
=
transport
;
rtp_config
.
local_media_ssrc
=
local_ssrc
;
rtp_rtcp_
=
ModuleRtpRtcpImpl2
:
:
Create
(
rtp_config
)
;
rtp_rtcp_
-
>
SetSendingMediaStatus
(
false
)
;
rtp_rtcp_
-
>
SetRTCPStatus
(
RtcpMode
:
:
kCompound
)
;
process_thread_
-
>
RegisterModule
(
rtp_rtcp_
.
get
(
)
RTC_FROM_HERE
)
;
ingress_
=
std
:
:
make_unique
<
AudioIngress
>
(
rtp_rtcp_
.
get
(
)
clock
receive_statistics_
.
get
(
)
std
:
:
move
(
decoder_factory
)
)
;
egress_
=
std
:
:
make_unique
<
AudioEgress
>
(
rtp_rtcp_
.
get
(
)
clock
task_queue_factory
)
;
audio_mixer_
-
>
AddSource
(
ingress_
.
get
(
)
)
;
}
AudioChannel
:
:
~
AudioChannel
(
)
{
if
(
egress_
-
>
IsSending
(
)
)
{
StopSend
(
)
;
}
if
(
ingress_
-
>
IsPlaying
(
)
)
{
StopPlay
(
)
;
}
audio_mixer_
-
>
RemoveSource
(
ingress_
.
get
(
)
)
;
process_thread_
-
>
DeRegisterModule
(
rtp_rtcp_
.
get
(
)
)
;
}
bool
AudioChannel
:
:
StartSend
(
)
{
if
(
!
egress_
-
>
StartSend
(
)
)
{
return
false
;
}
if
(
!
rtp_rtcp_
-
>
Sending
(
)
)
{
rtp_rtcp_
-
>
SetSendingStatus
(
true
)
;
}
return
true
;
}
void
AudioChannel
:
:
StopSend
(
)
{
egress_
-
>
StopSend
(
)
;
if
(
!
ingress_
-
>
IsPlaying
(
)
&
&
rtp_rtcp_
-
>
Sending
(
)
)
{
rtp_rtcp_
-
>
SetSendingStatus
(
false
)
;
}
}
bool
AudioChannel
:
:
StartPlay
(
)
{
if
(
!
ingress_
-
>
StartPlay
(
)
)
{
return
false
;
}
if
(
!
rtp_rtcp_
-
>
Sending
(
)
)
{
rtp_rtcp_
-
>
SetSendingStatus
(
true
)
;
}
return
true
;
}
void
AudioChannel
:
:
StopPlay
(
)
{
ingress_
-
>
StopPlay
(
)
;
if
(
!
rtp_rtcp_
-
>
SendingMedia
(
)
&
&
rtp_rtcp_
-
>
Sending
(
)
)
{
rtp_rtcp_
-
>
SetSendingStatus
(
false
)
;
}
}
}
