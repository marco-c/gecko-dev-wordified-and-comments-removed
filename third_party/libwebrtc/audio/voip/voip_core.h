#
ifndef
AUDIO_VOIP_VOIP_CORE_H_
#
define
AUDIO_VOIP_VOIP_CORE_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
queue
>
#
include
<
unordered_map
>
#
include
<
vector
>
#
include
"
api
/
audio_codecs
/
audio_decoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder_factory
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
voip
/
voip_base
.
h
"
#
include
"
api
/
voip
/
voip_codec
.
h
"
#
include
"
api
/
voip
/
voip_dtmf
.
h
"
#
include
"
api
/
voip
/
voip_engine
.
h
"
#
include
"
api
/
voip
/
voip_network
.
h
"
#
include
"
audio
/
audio_transport_impl
.
h
"
#
include
"
audio
/
voip
/
audio_channel
.
h
"
#
include
"
modules
/
audio_device
/
include
/
audio_device
.
h
"
#
include
"
modules
/
audio_mixer
/
audio_mixer_impl
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
modules
/
utility
/
include
/
process_thread
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
namespace
webrtc
{
class
VoipCore
:
public
VoipEngine
public
VoipBase
public
VoipNetwork
public
VoipCodec
public
VoipDtmf
{
public
:
~
VoipCore
(
)
override
=
default
;
bool
Init
(
rtc
:
:
scoped_refptr
<
AudioEncoderFactory
>
encoder_factory
rtc
:
:
scoped_refptr
<
AudioDecoderFactory
>
decoder_factory
std
:
:
unique_ptr
<
TaskQueueFactory
>
task_queue_factory
rtc
:
:
scoped_refptr
<
AudioDeviceModule
>
audio_device_module
rtc
:
:
scoped_refptr
<
AudioProcessing
>
audio_processing
std
:
:
unique_ptr
<
ProcessThread
>
process_thread
=
nullptr
)
;
VoipBase
&
Base
(
)
override
{
return
*
this
;
}
VoipNetwork
&
Network
(
)
override
{
return
*
this
;
}
VoipCodec
&
Codec
(
)
override
{
return
*
this
;
}
VoipDtmf
&
Dtmf
(
)
override
{
return
*
this
;
}
absl
:
:
optional
<
ChannelId
>
CreateChannel
(
Transport
*
transport
absl
:
:
optional
<
uint32_t
>
local_ssrc
)
override
;
void
ReleaseChannel
(
ChannelId
channel
)
override
;
bool
StartSend
(
ChannelId
channel
)
override
;
bool
StopSend
(
ChannelId
channel
)
override
;
bool
StartPlayout
(
ChannelId
channel
)
override
;
bool
StopPlayout
(
ChannelId
channel
)
override
;
void
ReceivedRTPPacket
(
ChannelId
channel
rtc
:
:
ArrayView
<
const
uint8_t
>
rtp_packet
)
override
;
void
ReceivedRTCPPacket
(
ChannelId
channel
rtc
:
:
ArrayView
<
const
uint8_t
>
rtcp_packet
)
override
;
void
SetSendCodec
(
ChannelId
channel
int
payload_type
const
SdpAudioFormat
&
encoder_format
)
override
;
void
SetReceiveCodecs
(
ChannelId
channel
const
std
:
:
map
<
int
SdpAudioFormat
>
&
decoder_specs
)
override
;
void
RegisterTelephoneEventType
(
ChannelId
channel
int
rtp_payload_type
int
sample_rate_hz
)
override
;
bool
SendDtmfEvent
(
ChannelId
channel
DtmfEvent
dtmf_event
int
duration_ms
)
override
;
private
:
rtc
:
:
scoped_refptr
<
AudioChannel
>
GetChannel
(
ChannelId
channel
)
;
bool
UpdateAudioTransportWithSenders
(
)
;
rtc
:
:
scoped_refptr
<
AudioEncoderFactory
>
encoder_factory_
;
rtc
:
:
scoped_refptr
<
AudioDecoderFactory
>
decoder_factory_
;
std
:
:
unique_ptr
<
TaskQueueFactory
>
task_queue_factory_
;
rtc
:
:
scoped_refptr
<
AudioProcessing
>
audio_processing_
;
rtc
:
:
scoped_refptr
<
AudioMixer
>
audio_mixer_
;
std
:
:
unique_ptr
<
AudioTransportImpl
>
audio_transport_
;
rtc
:
:
scoped_refptr
<
AudioDeviceModule
>
audio_device_module_
;
std
:
:
unique_ptr
<
ProcessThread
>
process_thread_
;
Mutex
lock_
;
int
next_channel_id_
RTC_GUARDED_BY
(
lock_
)
=
0
;
std
:
:
unordered_map
<
ChannelId
rtc
:
:
scoped_refptr
<
AudioChannel
>
>
channels_
RTC_GUARDED_BY
(
lock_
)
;
}
;
}
#
endif
