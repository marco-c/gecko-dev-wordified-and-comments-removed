#
ifndef
AUDIO_AUDIO_RECEIVE_STREAM_H_
#
define
AUDIO_AUDIO_RECEIVE_STREAM_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
audio
/
audio_frame
.
h
"
#
include
"
api
/
audio
/
audio_mixer
.
h
"
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
api
/
crypto
/
frame_decryptor_interface
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
neteq
/
neteq_factory
.
h
"
#
include
"
api
/
rtp_headers
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
transport
/
rtp
/
rtp_source
.
h
"
#
include
"
audio
/
audio_state
.
h
"
#
include
"
call
/
audio_receive_stream
.
h
"
#
include
"
call
/
audio_state
.
h
"
#
include
"
call
/
syncable
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
PacketRouter
;
class
RtpStreamReceiverControllerInterface
;
class
RtpStreamReceiverInterface
;
namespace
voe
{
class
ChannelReceiveInterface
;
}
class
AudioReceiveStreamImpl
final
:
public
webrtc
:
:
AudioReceiveStreamInterface
public
AudioMixer
:
:
Source
public
Syncable
{
public
:
AudioReceiveStreamImpl
(
const
Environment
&
env
PacketRouter
*
packet_router
NetEqFactory
*
neteq_factory
const
webrtc
:
:
AudioReceiveStreamInterface
:
:
Config
&
config
const
scoped_refptr
<
webrtc
:
:
AudioState
>
&
audio_state
)
;
AudioReceiveStreamImpl
(
const
Environment
&
env
PacketRouter
*
packet_router
const
webrtc
:
:
AudioReceiveStreamInterface
:
:
Config
&
config
const
scoped_refptr
<
webrtc
:
:
AudioState
>
&
audio_state
std
:
:
unique_ptr
<
voe
:
:
ChannelReceiveInterface
>
channel_receive
)
;
AudioReceiveStreamImpl
(
)
=
delete
;
AudioReceiveStreamImpl
(
const
AudioReceiveStreamImpl
&
)
=
delete
;
AudioReceiveStreamImpl
&
operator
=
(
const
AudioReceiveStreamImpl
&
)
=
delete
;
~
AudioReceiveStreamImpl
(
)
override
;
void
RegisterWithTransport
(
RtpStreamReceiverControllerInterface
*
receiver_controller
)
;
void
UnregisterFromTransport
(
)
;
void
Start
(
)
override
;
void
Stop
(
)
override
;
bool
IsRunning
(
)
const
override
;
void
SetDepacketizerToDecoderFrameTransformer
(
scoped_refptr
<
webrtc
:
:
FrameTransformerInterface
>
frame_transformer
)
override
;
void
SetDecoderMap
(
std
:
:
map
<
int
SdpAudioFormat
>
decoder_map
)
override
;
void
SetNackHistory
(
int
history_ms
)
override
;
void
SetRtcpMode
(
RtcpMode
mode
)
override
;
void
SetNonSenderRttMeasurement
(
bool
enabled
)
override
;
void
SetFrameDecryptor
(
scoped_refptr
<
webrtc
:
:
FrameDecryptorInterface
>
frame_decryptor
)
override
;
webrtc
:
:
AudioReceiveStreamInterface
:
:
Stats
GetStats
(
bool
get_and_clear_legacy_stats
)
const
override
;
void
SetSink
(
AudioSinkInterface
*
sink
)
override
;
void
SetGain
(
float
gain
)
override
;
bool
SetBaseMinimumPlayoutDelayMs
(
int
delay_ms
)
override
;
int
GetBaseMinimumPlayoutDelayMs
(
)
const
override
;
std
:
:
vector
<
webrtc
:
:
RtpSource
>
GetSources
(
)
const
override
;
AudioMixer
:
:
Source
*
source
(
)
override
{
return
this
;
}
AudioFrameInfo
GetAudioFrameWithInfo
(
int
sample_rate_hz
AudioFrame
*
audio_frame
)
override
;
int
Ssrc
(
)
const
override
;
int
PreferredSampleRate
(
)
const
override
;
uint32_t
id
(
)
const
override
;
std
:
:
optional
<
Syncable
:
:
Info
>
GetInfo
(
)
const
override
;
bool
GetPlayoutRtpTimestamp
(
uint32_t
*
rtp_timestamp
int64_t
*
time_ms
)
const
override
;
void
SetEstimatedPlayoutNtpTimestampMs
(
int64_t
ntp_timestamp_ms
int64_t
time_ms
)
override
;
bool
SetMinimumPlayoutDelay
(
int
delay_ms
)
override
;
void
DeliverRtcp
(
const
uint8_t
*
packet
size_t
length
)
;
void
SetSyncGroup
(
absl
:
:
string_view
sync_group
)
;
void
SetLocalSsrc
(
uint32_t
local_ssrc
)
;
uint32_t
local_ssrc
(
)
const
;
uint32_t
remote_ssrc
(
)
const
override
{
return
config_
.
rtp
.
remote_ssrc
;
}
const
std
:
:
string
&
sync_group
(
)
const
;
void
ReconfigureForTesting
(
const
webrtc
:
:
AudioReceiveStreamInterface
:
:
Config
&
config
)
;
private
:
internal
:
:
AudioState
*
audio_state
(
)
const
;
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
worker_thread_checker_
;
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
packet_sequence_checker_
{
SequenceChecker
:
:
kDetached
}
;
webrtc
:
:
AudioReceiveStreamInterface
:
:
Config
config_
;
scoped_refptr
<
webrtc
:
:
AudioState
>
audio_state_
;
const
std
:
:
unique_ptr
<
voe
:
:
ChannelReceiveInterface
>
channel_receive_
;
bool
playing_
RTC_GUARDED_BY
(
worker_thread_checker_
)
=
false
;
std
:
:
unique_ptr
<
RtpStreamReceiverInterface
>
rtp_stream_receiver_
RTC_GUARDED_BY
(
packet_sequence_checker_
)
;
}
;
}
#
endif
