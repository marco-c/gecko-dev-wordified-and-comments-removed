#
ifndef
AUDIO_CHANNEL_SEND_H_
#
define
AUDIO_CHANNEL_SEND_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
audio
/
audio_frame
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder
.
h
"
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
api
/
call
/
bitrate_allocation
.
h
"
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
function_view
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
report_block_data
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_rtcp_interface
.
h
"
namespace
webrtc
{
class
FrameEncryptorInterface
;
class
RtpTransportControllerSendInterface
;
struct
CallSendStatistics
{
int64_t
rttMs
;
int64_t
payload_bytes_sent
;
int64_t
header_and_padding_bytes_sent
;
uint64_t
retransmitted_bytes_sent
;
int
packetsSent
;
TimeDelta
total_packet_send_delay
=
TimeDelta
:
:
Zero
(
)
;
uint64_t
retransmitted_packets_sent
;
RtcpPacketTypeCounter
rtcp_packet_type_counts
;
std
:
:
vector
<
ReportBlockData
>
report_block_datas
;
uint32_t
nacks_received
;
}
;
namespace
voe
{
class
ChannelSendInterface
{
public
:
virtual
~
ChannelSendInterface
(
)
=
default
;
virtual
void
ReceivedRTCPPacket
(
const
uint8_t
*
packet
size_t
length
)
=
0
;
virtual
CallSendStatistics
GetRTCPStatistics
(
)
const
=
0
;
virtual
void
SetEncoder
(
int
payload_type
const
SdpAudioFormat
&
encoder_format
std
:
:
unique_ptr
<
AudioEncoder
>
encoder
)
=
0
;
virtual
void
ModifyEncoder
(
FunctionView
<
void
(
std
:
:
unique_ptr
<
AudioEncoder
>
*
)
>
modifier
)
=
0
;
virtual
void
CallEncoder
(
FunctionView
<
void
(
AudioEncoder
*
)
>
modifier
)
=
0
;
virtual
void
SetRTCP_CNAME
(
absl
:
:
string_view
c_name
)
=
0
;
virtual
void
SetSendAudioLevelIndicationStatus
(
bool
enable
int
id
)
=
0
;
virtual
void
RegisterSenderCongestionControlObjects
(
RtpTransportControllerSendInterface
*
transport
)
=
0
;
virtual
void
ResetSenderCongestionControlObjects
(
)
=
0
;
virtual
std
:
:
vector
<
ReportBlockData
>
GetRemoteRTCPReportBlocks
(
)
const
=
0
;
virtual
ANAStats
GetANAStatistics
(
)
const
=
0
;
virtual
void
RegisterCngPayloadType
(
int
payload_type
int
payload_frequency
)
=
0
;
virtual
void
SetSendTelephoneEventPayloadType
(
int
payload_type
int
payload_frequency
)
=
0
;
virtual
bool
SendTelephoneEventOutband
(
int
event
int
duration_ms
)
=
0
;
virtual
void
OnBitrateAllocation
(
BitrateAllocationUpdate
update
)
=
0
;
virtual
int
GetTargetBitrate
(
)
const
=
0
;
virtual
void
SetInputMute
(
bool
muted
)
=
0
;
virtual
void
ProcessAndEncodeAudio
(
std
:
:
unique_ptr
<
AudioFrame
>
audio_frame
)
=
0
;
virtual
RtpRtcpInterface
*
GetRtpRtcp
(
)
const
=
0
;
virtual
void
StartSend
(
)
=
0
;
virtual
void
StopSend
(
)
=
0
;
virtual
void
SetFrameEncryptor
(
rtc
:
:
scoped_refptr
<
FrameEncryptorInterface
>
frame_encryptor
)
=
0
;
virtual
void
SetEncoderToPacketizerFrameTransformer
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
FrameTransformerInterface
>
frame_transformer
)
=
0
;
virtual
std
:
:
optional
<
DataRate
>
GetUsedRate
(
)
const
=
0
;
virtual
void
RegisterPacketOverhead
(
int
packet_byte_overhead
)
=
0
;
}
;
std
:
:
unique_ptr
<
ChannelSendInterface
>
CreateChannelSend
(
const
Environment
&
env
Transport
*
rtp_transport
RtcpRttStats
*
rtcp_rtt_stats
FrameEncryptorInterface
*
frame_encryptor
const
webrtc
:
:
CryptoOptions
&
crypto_options
bool
extmap_allow_mixed
int
rtcp_report_interval_ms
uint32_t
ssrc
rtc
:
:
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
RtpTransportControllerSendInterface
*
transport_controller
)
;
}
}
#
endif
