#
ifndef
AUDIO_CHANNEL_SEND_H_
#
define
AUDIO_CHANNEL_SEND_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
audio
/
audio_frame
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder
.
h
"
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
function_view
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
report_block_data
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_rtcp_interface
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_sender_audio
.
h
"
namespace
webrtc
{
class
FrameEncryptorInterface
;
class
RtcEventLog
;
class
RtpTransportControllerSendInterface
;
struct
CallSendStatistics
{
int64_t
rttMs
;
int64_t
payload_bytes_sent
;
int64_t
header_and_padding_bytes_sent
;
uint64_t
retransmitted_bytes_sent
;
int
packetsSent
;
TimeDelta
total_packet_send_delay
=
TimeDelta
:
:
Zero
(
)
;
uint64_t
retransmitted_packets_sent
;
RtcpPacketTypeCounter
rtcp_packet_type_counts
;
std
:
:
vector
<
ReportBlockData
>
report_block_datas
;
uint32_t
nacks_received
;
}
;
struct
ReportBlock
{
uint32_t
sender_SSRC
;
uint32_t
source_SSRC
;
uint8_t
fraction_lost
;
int32_t
cumulative_num_packets_lost
;
uint32_t
extended_highest_sequence_number
;
uint32_t
interarrival_jitter
;
uint32_t
last_SR_timestamp
;
uint32_t
delay_since_last_SR
;
}
;
namespace
voe
{
class
ChannelSendInterface
{
public
:
virtual
~
ChannelSendInterface
(
)
=
default
;
virtual
void
ReceivedRTCPPacket
(
const
uint8_t
*
packet
size_t
length
)
=
0
;
virtual
CallSendStatistics
GetRTCPStatistics
(
)
const
=
0
;
virtual
void
SetEncoder
(
int
payload_type
std
:
:
unique_ptr
<
AudioEncoder
>
encoder
)
=
0
;
virtual
void
ModifyEncoder
(
rtc
:
:
FunctionView
<
void
(
std
:
:
unique_ptr
<
AudioEncoder
>
*
)
>
modifier
)
=
0
;
virtual
void
CallEncoder
(
rtc
:
:
FunctionView
<
void
(
AudioEncoder
*
)
>
modifier
)
=
0
;
virtual
void
SetRTCP_CNAME
(
absl
:
:
string_view
c_name
)
=
0
;
virtual
void
SetSendAudioLevelIndicationStatus
(
bool
enable
int
id
)
=
0
;
virtual
void
RegisterSenderCongestionControlObjects
(
RtpTransportControllerSendInterface
*
transport
RtcpBandwidthObserver
*
bandwidth_observer
)
=
0
;
virtual
void
ResetSenderCongestionControlObjects
(
)
=
0
;
virtual
std
:
:
vector
<
ReportBlock
>
GetRemoteRTCPReportBlocks
(
)
const
=
0
;
virtual
ANAStats
GetANAStatistics
(
)
const
=
0
;
virtual
void
RegisterCngPayloadType
(
int
payload_type
int
payload_frequency
)
=
0
;
virtual
void
SetSendTelephoneEventPayloadType
(
int
payload_type
int
payload_frequency
)
=
0
;
virtual
bool
SendTelephoneEventOutband
(
int
event
int
duration_ms
)
=
0
;
virtual
void
OnBitrateAllocation
(
BitrateAllocationUpdate
update
)
=
0
;
virtual
int
GetTargetBitrate
(
)
const
=
0
;
virtual
void
SetInputMute
(
bool
muted
)
=
0
;
virtual
void
ProcessAndEncodeAudio
(
std
:
:
unique_ptr
<
AudioFrame
>
audio_frame
)
=
0
;
virtual
RtpRtcpInterface
*
GetRtpRtcp
(
)
const
=
0
;
virtual
int64_t
GetRTT
(
)
const
=
0
;
virtual
void
StartSend
(
)
=
0
;
virtual
void
StopSend
(
)
=
0
;
virtual
void
SetFrameEncryptor
(
rtc
:
:
scoped_refptr
<
FrameEncryptorInterface
>
frame_encryptor
)
=
0
;
virtual
void
SetEncoderToPacketizerFrameTransformer
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
FrameTransformerInterface
>
frame_transformer
)
=
0
;
}
;
std
:
:
unique_ptr
<
ChannelSendInterface
>
CreateChannelSend
(
Clock
*
clock
TaskQueueFactory
*
task_queue_factory
Transport
*
rtp_transport
RtcpRttStats
*
rtcp_rtt_stats
RtcEventLog
*
rtc_event_log
FrameEncryptorInterface
*
frame_encryptor
const
webrtc
:
:
CryptoOptions
&
crypto_options
bool
extmap_allow_mixed
int
rtcp_report_interval_ms
uint32_t
ssrc
rtc
:
:
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
TransportFeedbackObserver
*
feedback_observer
const
FieldTrialsView
&
field_trials
)
;
}
}
#
endif
