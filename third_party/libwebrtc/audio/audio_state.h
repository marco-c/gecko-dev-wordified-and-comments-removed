#
ifndef
AUDIO_AUDIO_STATE_H_
#
define
AUDIO_AUDIO_STATE_H_
#
include
<
map
>
#
include
<
memory
>
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
audio
/
audio_transport_impl
.
h
"
#
include
"
audio
/
null_audio_poller
.
h
"
#
include
"
call
/
audio_state
.
h
"
#
include
"
rtc_base
/
containers
/
flat_set
.
h
"
#
include
"
rtc_base
/
ref_count
.
h
"
namespace
webrtc
{
class
AudioSendStream
;
class
AudioReceiveStream
;
namespace
internal
{
class
AudioState
:
public
webrtc
:
:
AudioState
{
public
:
explicit
AudioState
(
const
AudioState
:
:
Config
&
config
)
;
AudioState
(
)
=
delete
;
AudioState
(
const
AudioState
&
)
=
delete
;
AudioState
&
operator
=
(
const
AudioState
&
)
=
delete
;
~
AudioState
(
)
override
;
AudioProcessing
*
audio_processing
(
)
override
;
AudioTransport
*
audio_transport
(
)
override
;
void
SetPlayout
(
bool
enabled
)
override
;
void
SetRecording
(
bool
enabled
)
override
;
void
SetStereoChannelSwapping
(
bool
enable
)
override
;
AudioDeviceModule
*
audio_device_module
(
)
{
RTC_DCHECK
(
config_
.
audio_device_module
)
;
return
config_
.
audio_device_module
.
get
(
)
;
}
void
AddReceivingStream
(
webrtc
:
:
AudioReceiveStream
*
stream
)
;
void
RemoveReceivingStream
(
webrtc
:
:
AudioReceiveStream
*
stream
)
;
void
AddSendingStream
(
webrtc
:
:
AudioSendStream
*
stream
int
sample_rate_hz
size_t
num_channels
)
;
void
RemoveSendingStream
(
webrtc
:
:
AudioSendStream
*
stream
)
;
private
:
void
UpdateAudioTransportWithSendingStreams
(
)
;
void
UpdateNullAudioPollerState
(
)
;
SequenceChecker
thread_checker_
;
SequenceChecker
process_thread_checker_
;
const
webrtc
:
:
AudioState
:
:
Config
config_
;
bool
recording_enabled_
=
true
;
bool
playout_enabled_
=
true
;
AudioTransportImpl
audio_transport_
;
std
:
:
unique_ptr
<
NullAudioPoller
>
null_audio_poller_
;
webrtc
:
:
flat_set
<
webrtc
:
:
AudioReceiveStream
*
>
receiving_streams_
;
struct
StreamProperties
{
int
sample_rate_hz
=
0
;
size_t
num_channels
=
0
;
}
;
std
:
:
map
<
webrtc
:
:
AudioSendStream
*
StreamProperties
>
sending_streams_
;
}
;
}
}
#
endif
