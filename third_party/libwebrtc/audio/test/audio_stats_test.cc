#
include
"
audio
/
test
/
audio_end_to_end_test
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_compare
.
h
"
#
include
"
system_wrappers
/
include
/
sleep
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
{
bool
IsNear
(
int
reference
int
v
)
{
const
int
error
=
reference
/
10
+
1
;
return
std
:
:
abs
(
reference
-
v
)
<
=
error
;
}
class
NoLossTest
:
public
AudioEndToEndTest
{
public
:
const
int
kTestDurationMs
=
8000
;
const
int
kBytesSent
=
69351
;
const
int32_t
kPacketsSent
=
400
;
const
int64_t
kRttMs
=
100
;
NoLossTest
(
)
=
default
;
BuiltInNetworkBehaviorConfig
GetNetworkPipeConfig
(
)
const
override
{
BuiltInNetworkBehaviorConfig
pipe_config
;
pipe_config
.
queue_delay_ms
=
kRttMs
/
2
;
return
pipe_config
;
}
void
PerformTest
(
)
override
{
SleepMs
(
kTestDurationMs
)
;
send_audio_device
(
)
-
>
StopRecording
(
)
;
AudioEndToEndTest
:
:
PerformTest
(
)
;
}
void
OnStreamsStopped
(
)
override
{
AudioSendStream
:
:
Stats
send_stats
=
send_stream
(
)
-
>
GetStats
(
)
;
EXPECT_PRED2
(
IsNear
kBytesSent
send_stats
.
payload_bytes_sent
)
;
EXPECT_PRED2
(
IsNear
kPacketsSent
send_stats
.
packets_sent
)
;
EXPECT_EQ
(
0
send_stats
.
packets_lost
)
;
EXPECT_EQ
(
0
.
0f
send_stats
.
fraction_lost
)
;
EXPECT_EQ
(
"
opus
"
send_stats
.
codec_name
)
;
EXPECT_PRED2
(
IsNear
kRttMs
send_stats
.
rtt_ms
)
;
EXPECT_EQ
(
0
send_stats
.
audio_level
)
;
EXPECT_FALSE
(
send_stats
.
apm_statistics
.
delay_median_ms
)
;
EXPECT_FALSE
(
send_stats
.
apm_statistics
.
delay_standard_deviation_ms
)
;
EXPECT_FALSE
(
send_stats
.
apm_statistics
.
echo_return_loss
)
;
EXPECT_FALSE
(
send_stats
.
apm_statistics
.
echo_return_loss_enhancement
)
;
EXPECT_FALSE
(
send_stats
.
apm_statistics
.
residual_echo_likelihood
)
;
EXPECT_FALSE
(
send_stats
.
apm_statistics
.
residual_echo_likelihood_recent_max
)
;
AudioReceiveStream
:
:
Stats
recv_stats
=
receive_stream
(
)
-
>
GetStats
(
true
)
;
EXPECT_PRED2
(
IsNear
kBytesSent
recv_stats
.
payload_bytes_rcvd
)
;
EXPECT_PRED2
(
IsNear
kPacketsSent
recv_stats
.
packets_rcvd
)
;
EXPECT_EQ
(
0u
recv_stats
.
packets_lost
)
;
EXPECT_EQ
(
"
opus
"
send_stats
.
codec_name
)
;
EXPECT_EQ
(
20u
recv_stats
.
jitter_buffer_preferred_ms
)
;
EXPECT_EQ
(
0
recv_stats
.
audio_level
)
;
EXPECT_EQ
(
0
.
0
recv_stats
.
secondary_decoded_rate
)
;
EXPECT_EQ
(
0
.
0
recv_stats
.
secondary_discarded_rate
)
;
EXPECT_EQ
(
0
.
0
recv_stats
.
accelerate_rate
)
;
EXPECT_EQ
(
0
.
0
recv_stats
.
preemptive_expand_rate
)
;
EXPECT_EQ
(
0
recv_stats
.
decoding_calls_to_silence_generator
)
;
EXPECT_EQ
(
0
recv_stats
.
decoding_cng
)
;
EXPECT_EQ
(
-
1
recv_stats
.
capture_start_ntp_time_ms
)
;
EXPECT_EQ
(
send_stats
.
local_ssrc
recv_stats
.
remote_ssrc
)
;
EXPECT_EQ
(
*
send_stats
.
codec_payload_type
*
recv_stats
.
codec_payload_type
)
;
}
}
;
}
using
AudioStatsTest
=
CallTest
;
TEST_F
(
AudioStatsTest
DISABLED_NoLoss
)
{
NoLossTest
test
;
RunBaseTest
(
&
test
)
;
}
}
}
