package
org
.
webrtc
;
import
android
.
os
.
Handler
;
import
android
.
os
.
HandlerThread
;
import
android
.
os
.
Looper
;
import
android
.
os
.
Message
;
import
androidx
.
annotation
.
GuardedBy
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
webrtc
.
EglBase
.
EglConnection
;
public
class
EglThread
{
public
interface
ReleaseMonitor
{
boolean
onRelease
(
EglThread
eglThread
)
;
}
public
static
EglThread
create
(
Nullable
ReleaseMonitor
releaseMonitor
Nullable
final
EglBase
.
Context
sharedContext
final
int
[
]
configAttributes
)
{
final
HandlerThread
renderThread
=
new
HandlerThread
(
"
EglThread
"
)
;
renderThread
.
start
(
)
;
HandlerWithExceptionCallbacks
handler
=
new
HandlerWithExceptionCallbacks
(
renderThread
.
getLooper
(
)
)
;
EglConnection
eglConnection
=
ThreadUtils
.
invokeAtFrontUninterruptibly
(
handler
(
)
-
>
{
if
(
sharedContext
=
=
null
)
{
return
EglConnection
.
createEgl10
(
configAttributes
)
;
}
else
{
return
EglConnection
.
create
(
sharedContext
configAttributes
)
;
}
}
)
;
return
new
EglThread
(
releaseMonitor
!
=
null
?
releaseMonitor
:
eglThread
-
>
true
handler
eglConnection
)
;
}
private
static
class
HandlerWithExceptionCallbacks
extends
Handler
{
private
final
Object
callbackLock
=
new
Object
(
)
;
GuardedBy
(
"
callbackLock
"
)
private
final
List
<
Runnable
>
exceptionCallbacks
=
new
ArrayList
<
>
(
)
;
public
HandlerWithExceptionCallbacks
(
Looper
looper
)
{
super
(
looper
)
;
}
Override
public
void
dispatchMessage
(
Message
msg
)
{
try
{
super
.
dispatchMessage
(
msg
)
;
}
catch
(
Exception
e
)
{
Logging
.
e
(
"
EglThread
"
"
Exception
on
EglThread
"
e
)
;
synchronized
(
callbackLock
)
{
for
(
Runnable
callback
:
exceptionCallbacks
)
{
callback
.
run
(
)
;
}
}
throw
e
;
}
}
public
void
addExceptionCallback
(
Runnable
callback
)
{
synchronized
(
callbackLock
)
{
exceptionCallbacks
.
add
(
callback
)
;
}
}
public
void
removeExceptionCallback
(
Runnable
callback
)
{
synchronized
(
callbackLock
)
{
exceptionCallbacks
.
remove
(
callback
)
;
}
}
}
private
final
ReleaseMonitor
releaseMonitor
;
private
final
HandlerWithExceptionCallbacks
handler
;
private
final
EglConnection
eglConnection
;
private
EglThread
(
ReleaseMonitor
releaseMonitor
HandlerWithExceptionCallbacks
handler
EglConnection
eglConnection
)
{
this
.
releaseMonitor
=
releaseMonitor
;
this
.
handler
=
handler
;
this
.
eglConnection
=
eglConnection
;
}
public
void
release
(
)
{
if
(
!
releaseMonitor
.
onRelease
(
this
)
)
{
return
;
}
handler
.
post
(
eglConnection
:
:
release
)
;
handler
.
getLooper
(
)
.
quitSafely
(
)
;
}
public
EglBase
createEglBaseWithSharedConnection
(
)
{
return
EglBase
.
create
(
eglConnection
)
;
}
public
Handler
getHandler
(
)
{
return
handler
;
}
public
void
addExceptionCallback
(
Runnable
callback
)
{
handler
.
addExceptionCallback
(
callback
)
;
}
public
void
removeExceptionCallback
(
Runnable
callback
)
{
handler
.
removeExceptionCallback
(
callback
)
;
}
}
