package
org
.
webrtc
;
import
java
.
nio
.
ByteBuffer
;
public
class
YuvHelper
{
public
static
void
I420Copy
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dst
int
dstWidth
int
dstHeight
int
dstStrideY
int
dstSliceHeightY
int
dstStrideU
int
dstSliceHeightU
)
{
final
int
chromaWidth
=
(
dstWidth
+
1
)
/
2
;
final
int
chromaHeight
=
(
dstHeight
+
1
)
/
2
;
final
int
dstStartY
=
0
;
final
int
dstEndY
=
dstStartY
+
dstStrideY
*
dstHeight
;
final
int
dstStartU
=
dstStartY
+
dstStrideY
*
dstSliceHeightY
;
final
int
dstEndU
=
dstStartU
+
dstStrideU
*
chromaHeight
;
final
int
dstStartV
=
dstStartU
+
dstStrideU
*
dstSliceHeightU
;
final
int
dstEndV
=
dstStartV
+
dstStrideU
*
(
chromaHeight
-
1
)
+
chromaWidth
;
if
(
dst
.
capacity
(
)
<
dstEndV
)
{
throw
new
IllegalArgumentException
(
"
Expected
destination
buffer
capacity
to
be
at
least
"
+
dstEndV
+
"
was
"
+
dst
.
capacity
(
)
)
;
}
dst
.
limit
(
dstEndY
)
;
dst
.
position
(
dstStartY
)
;
final
ByteBuffer
dstY
=
dst
.
slice
(
)
;
dst
.
limit
(
dstEndU
)
;
dst
.
position
(
dstStartU
)
;
final
ByteBuffer
dstU
=
dst
.
slice
(
)
;
dst
.
limit
(
dstEndV
)
;
dst
.
position
(
dstStartV
)
;
final
ByteBuffer
dstV
=
dst
.
slice
(
)
;
I420Copy
(
srcY
srcStrideY
srcU
srcStrideU
srcV
srcStrideV
dstY
dstStrideY
dstU
dstStrideU
dstV
dstStrideU
dstWidth
dstHeight
)
;
}
public
static
void
I420Copy
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dst
int
dstWidth
int
dstHeight
)
{
I420Copy
(
srcY
srcStrideY
srcU
srcStrideU
srcV
srcStrideV
dst
dstWidth
dstHeight
dstWidth
dstHeight
(
dstWidth
+
1
)
/
2
(
dstHeight
+
1
)
/
2
)
;
}
public
static
void
I420ToNV12
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dst
int
dstWidth
int
dstHeight
int
dstStrideY
int
dstSliceHeightY
)
{
final
int
chromaHeight
=
(
dstHeight
+
1
)
/
2
;
final
int
chromaWidth
=
(
dstWidth
+
1
)
/
2
;
final
int
dstStartY
=
0
;
final
int
dstEndY
=
dstStartY
+
dstStrideY
*
dstHeight
;
final
int
dstStartUV
=
dstStartY
+
dstStrideY
*
dstSliceHeightY
;
final
int
dstEndUV
=
dstStartUV
+
chromaWidth
*
chromaHeight
*
2
;
if
(
dst
.
capacity
(
)
<
dstEndUV
)
{
throw
new
IllegalArgumentException
(
"
Expected
destination
buffer
capacity
to
be
at
least
"
+
dstEndUV
+
"
was
"
+
dst
.
capacity
(
)
)
;
}
dst
.
limit
(
dstEndY
)
;
dst
.
position
(
dstStartY
)
;
final
ByteBuffer
dstY
=
dst
.
slice
(
)
;
dst
.
limit
(
dstEndUV
)
;
dst
.
position
(
dstStartUV
)
;
final
ByteBuffer
dstUV
=
dst
.
slice
(
)
;
I420ToNV12
(
srcY
srcStrideY
srcU
srcStrideU
srcV
srcStrideV
dstY
dstStrideY
dstUV
chromaWidth
*
2
dstWidth
dstHeight
)
;
}
public
static
void
I420ToNV12
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dst
int
dstWidth
int
dstHeight
)
{
I420ToNV12
(
srcY
srcStrideY
srcU
srcStrideU
srcV
srcStrideV
dst
dstWidth
dstHeight
dstWidth
dstHeight
)
;
}
public
static
void
I420Rotate
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dst
int
srcWidth
int
srcHeight
int
rotationMode
)
{
final
int
dstWidth
=
rotationMode
%
180
=
=
0
?
srcWidth
:
srcHeight
;
final
int
dstHeight
=
rotationMode
%
180
=
=
0
?
srcHeight
:
srcWidth
;
final
int
dstChromaHeight
=
(
dstHeight
+
1
)
/
2
;
final
int
dstChromaWidth
=
(
dstWidth
+
1
)
/
2
;
final
int
minSize
=
dstWidth
*
dstHeight
+
dstChromaWidth
*
dstChromaHeight
*
2
;
if
(
dst
.
capacity
(
)
<
minSize
)
{
throw
new
IllegalArgumentException
(
"
Expected
destination
buffer
capacity
to
be
at
least
"
+
minSize
+
"
was
"
+
dst
.
capacity
(
)
)
;
}
final
int
startY
=
0
;
final
int
startU
=
dstHeight
*
dstWidth
;
final
int
startV
=
startU
+
dstChromaHeight
*
dstChromaWidth
;
dst
.
position
(
startY
)
;
final
ByteBuffer
dstY
=
dst
.
slice
(
)
;
dst
.
position
(
startU
)
;
final
ByteBuffer
dstU
=
dst
.
slice
(
)
;
dst
.
position
(
startV
)
;
final
ByteBuffer
dstV
=
dst
.
slice
(
)
;
nativeI420Rotate
(
srcY
srcStrideY
srcU
srcStrideU
srcV
srcStrideV
dstY
dstWidth
dstU
dstChromaWidth
dstV
dstChromaWidth
srcWidth
srcHeight
rotationMode
)
;
}
public
static
void
copyPlane
(
ByteBuffer
src
int
srcStride
ByteBuffer
dst
int
dstStride
int
width
int
height
)
{
nativeCopyPlane
(
src
srcStride
dst
dstStride
width
height
)
;
}
public
static
void
ABGRToI420
(
ByteBuffer
src
int
srcStride
ByteBuffer
dstY
int
dstStrideY
ByteBuffer
dstU
int
dstStrideU
ByteBuffer
dstV
int
dstStrideV
int
width
int
height
)
{
nativeABGRToI420
(
src
srcStride
dstY
dstStrideY
dstU
dstStrideU
dstV
dstStrideV
width
height
)
;
}
public
static
void
I420Copy
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dstY
int
dstStrideY
ByteBuffer
dstU
int
dstStrideU
ByteBuffer
dstV
int
dstStrideV
int
width
int
height
)
{
if
(
srcY
=
=
null
|
|
srcU
=
=
null
|
|
srcV
=
=
null
|
|
dstY
=
=
null
|
|
dstU
=
=
null
|
|
dstV
=
=
null
|
|
width
<
=
0
|
|
height
<
=
0
)
{
throw
new
IllegalArgumentException
(
"
Invalid
I420Copy
input
arguments
"
)
;
}
nativeI420Copy
(
srcY
srcStrideY
srcU
srcStrideU
srcV
srcStrideV
dstY
dstStrideY
dstU
dstStrideU
dstV
dstStrideV
width
height
)
;
}
public
static
void
I420ToNV12
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dstY
int
dstStrideY
ByteBuffer
dstUV
int
dstStrideUV
int
width
int
height
)
{
if
(
srcY
=
=
null
|
|
srcU
=
=
null
|
|
srcV
=
=
null
|
|
dstY
=
=
null
|
|
dstUV
=
=
null
|
|
width
<
=
0
|
|
height
<
=
0
)
{
throw
new
IllegalArgumentException
(
"
Invalid
I420ToNV12
input
arguments
"
)
;
}
nativeI420ToNV12
(
srcY
srcStrideY
srcU
srcStrideU
srcV
srcStrideV
dstY
dstStrideY
dstUV
dstStrideUV
width
height
)
;
}
public
static
void
I420Rotate
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dstY
int
dstStrideY
ByteBuffer
dstU
int
dstStrideU
ByteBuffer
dstV
int
dstStrideV
int
srcWidth
int
srcHeight
int
rotationMode
)
{
nativeI420Rotate
(
srcY
srcStrideY
srcU
srcStrideU
srcV
srcStrideV
dstY
dstStrideY
dstU
dstStrideU
dstV
dstStrideV
srcWidth
srcHeight
rotationMode
)
;
}
private
static
native
void
nativeCopyPlane
(
ByteBuffer
src
int
srcStride
ByteBuffer
dst
int
dstStride
int
width
int
height
)
;
private
static
native
void
nativeI420Copy
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dstY
int
dstStrideY
ByteBuffer
dstU
int
dstStrideU
ByteBuffer
dstV
int
dstStrideV
int
width
int
height
)
;
private
static
native
void
nativeI420ToNV12
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dstY
int
dstStrideY
ByteBuffer
dstUV
int
dstStrideUV
int
width
int
height
)
;
private
static
native
void
nativeI420Rotate
(
ByteBuffer
srcY
int
srcStrideY
ByteBuffer
srcU
int
srcStrideU
ByteBuffer
srcV
int
srcStrideV
ByteBuffer
dstY
int
dstStrideY
ByteBuffer
dstU
int
dstStrideU
ByteBuffer
dstV
int
dstStrideV
int
srcWidth
int
srcHeight
int
rotationMode
)
;
private
static
native
void
nativeABGRToI420
(
ByteBuffer
src
int
srcStride
ByteBuffer
dstY
int
dstStrideY
ByteBuffer
dstU
int
dstStrideU
ByteBuffer
dstV
int
dstStrideV
int
width
int
height
)
;
}
