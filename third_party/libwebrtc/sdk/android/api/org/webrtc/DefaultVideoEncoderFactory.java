package
org
.
webrtc
;
import
android
.
support
.
annotation
.
Nullable
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
LinkedHashSet
;
public
class
DefaultVideoEncoderFactory
implements
VideoEncoderFactory
{
private
final
VideoEncoderFactory
hardwareVideoEncoderFactory
;
private
final
VideoEncoderFactory
softwareVideoEncoderFactory
=
new
SoftwareVideoEncoderFactory
(
)
;
public
DefaultVideoEncoderFactory
(
EglBase
.
Context
eglContext
boolean
enableIntelVp8Encoder
boolean
enableH264HighProfile
)
{
this
.
hardwareVideoEncoderFactory
=
new
HardwareVideoEncoderFactory
(
eglContext
enableIntelVp8Encoder
enableH264HighProfile
)
;
}
DefaultVideoEncoderFactory
(
VideoEncoderFactory
hardwareVideoEncoderFactory
)
{
this
.
hardwareVideoEncoderFactory
=
hardwareVideoEncoderFactory
;
}
Nullable
Override
public
VideoEncoder
createEncoder
(
VideoCodecInfo
info
)
{
final
VideoEncoder
softwareEncoder
=
softwareVideoEncoderFactory
.
createEncoder
(
info
)
;
final
VideoEncoder
hardwareEncoder
=
hardwareVideoEncoderFactory
.
createEncoder
(
info
)
;
if
(
hardwareEncoder
!
=
null
&
&
softwareEncoder
!
=
null
)
{
return
new
VideoEncoderFallback
(
softwareEncoder
hardwareEncoder
)
;
}
return
hardwareEncoder
!
=
null
?
hardwareEncoder
:
softwareEncoder
;
}
Override
public
VideoCodecInfo
[
]
getSupportedCodecs
(
)
{
LinkedHashSet
<
VideoCodecInfo
>
supportedCodecInfos
=
new
LinkedHashSet
<
VideoCodecInfo
>
(
)
;
supportedCodecInfos
.
addAll
(
Arrays
.
asList
(
softwareVideoEncoderFactory
.
getSupportedCodecs
(
)
)
)
;
supportedCodecInfos
.
addAll
(
Arrays
.
asList
(
hardwareVideoEncoderFactory
.
getSupportedCodecs
(
)
)
)
;
return
supportedCodecInfos
.
toArray
(
new
VideoCodecInfo
[
supportedCodecInfos
.
size
(
)
]
)
;
}
}
