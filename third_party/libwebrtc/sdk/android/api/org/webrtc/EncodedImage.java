package
org
.
webrtc
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
util
.
concurrent
.
TimeUnit
;
public
class
EncodedImage
implements
RefCounted
{
public
enum
FrameType
{
EmptyFrame
(
0
)
VideoFrameKey
(
3
)
VideoFrameDelta
(
4
)
;
private
final
int
nativeIndex
;
private
FrameType
(
int
nativeIndex
)
{
this
.
nativeIndex
=
nativeIndex
;
}
public
int
getNative
(
)
{
return
nativeIndex
;
}
CalledByNative
(
"
FrameType
"
)
static
FrameType
fromNativeIndex
(
int
nativeIndex
)
{
for
(
FrameType
type
:
FrameType
.
values
(
)
)
{
if
(
type
.
getNative
(
)
=
=
nativeIndex
)
{
return
type
;
}
}
throw
new
IllegalArgumentException
(
"
Unknown
native
frame
type
:
"
+
nativeIndex
)
;
}
}
private
final
RefCountDelegate
refCountDelegate
;
public
final
ByteBuffer
buffer
;
public
final
int
encodedWidth
;
public
final
int
encodedHeight
;
public
final
long
captureTimeMs
;
public
final
long
captureTimeNs
;
public
final
FrameType
frameType
;
public
final
int
rotation
;
public
final
Nullable
Integer
qp
;
Override
public
void
retain
(
)
{
refCountDelegate
.
retain
(
)
;
}
Override
public
void
release
(
)
{
refCountDelegate
.
release
(
)
;
}
CalledByNative
private
EncodedImage
(
ByteBuffer
buffer
Nullable
Runnable
releaseCallback
int
encodedWidth
int
encodedHeight
long
captureTimeNs
FrameType
frameType
int
rotation
Nullable
Integer
qp
)
{
this
.
buffer
=
buffer
;
this
.
encodedWidth
=
encodedWidth
;
this
.
encodedHeight
=
encodedHeight
;
this
.
captureTimeMs
=
TimeUnit
.
NANOSECONDS
.
toMillis
(
captureTimeNs
)
;
this
.
captureTimeNs
=
captureTimeNs
;
this
.
frameType
=
frameType
;
this
.
rotation
=
rotation
;
this
.
qp
=
qp
;
this
.
refCountDelegate
=
new
RefCountDelegate
(
releaseCallback
)
;
}
SuppressWarnings
(
"
UnusedMethod
"
)
CalledByNative
private
ByteBuffer
getBuffer
(
)
{
return
buffer
;
}
SuppressWarnings
(
"
UnusedMethod
"
)
CalledByNative
private
int
getEncodedWidth
(
)
{
return
encodedWidth
;
}
SuppressWarnings
(
"
UnusedMethod
"
)
CalledByNative
private
int
getEncodedHeight
(
)
{
return
encodedHeight
;
}
SuppressWarnings
(
"
UnusedMethod
"
)
CalledByNative
private
long
getCaptureTimeNs
(
)
{
return
captureTimeNs
;
}
SuppressWarnings
(
"
UnusedMethod
"
)
CalledByNative
private
int
getFrameType
(
)
{
return
frameType
.
getNative
(
)
;
}
SuppressWarnings
(
"
UnusedMethod
"
)
CalledByNative
private
int
getRotation
(
)
{
return
rotation
;
}
SuppressWarnings
(
"
UnusedMethod
"
)
CalledByNative
private
Nullable
Integer
getQp
(
)
{
return
qp
;
}
public
static
Builder
builder
(
)
{
return
new
Builder
(
)
;
}
public
static
class
Builder
{
private
ByteBuffer
buffer
;
private
Nullable
Runnable
releaseCallback
;
private
int
encodedWidth
;
private
int
encodedHeight
;
private
long
captureTimeNs
;
private
EncodedImage
.
FrameType
frameType
;
private
int
rotation
;
private
Nullable
Integer
qp
;
private
Builder
(
)
{
}
public
Builder
setBuffer
(
ByteBuffer
buffer
Nullable
Runnable
releaseCallback
)
{
this
.
buffer
=
buffer
;
this
.
releaseCallback
=
releaseCallback
;
return
this
;
}
public
Builder
setEncodedWidth
(
int
encodedWidth
)
{
this
.
encodedWidth
=
encodedWidth
;
return
this
;
}
public
Builder
setEncodedHeight
(
int
encodedHeight
)
{
this
.
encodedHeight
=
encodedHeight
;
return
this
;
}
Deprecated
public
Builder
setCaptureTimeMs
(
long
captureTimeMs
)
{
this
.
captureTimeNs
=
TimeUnit
.
MILLISECONDS
.
toNanos
(
captureTimeMs
)
;
return
this
;
}
public
Builder
setCaptureTimeNs
(
long
captureTimeNs
)
{
this
.
captureTimeNs
=
captureTimeNs
;
return
this
;
}
public
Builder
setFrameType
(
EncodedImage
.
FrameType
frameType
)
{
this
.
frameType
=
frameType
;
return
this
;
}
public
Builder
setRotation
(
int
rotation
)
{
this
.
rotation
=
rotation
;
return
this
;
}
public
Builder
setQp
(
Nullable
Integer
qp
)
{
this
.
qp
=
qp
;
return
this
;
}
public
EncodedImage
createEncodedImage
(
)
{
return
new
EncodedImage
(
buffer
releaseCallback
encodedWidth
encodedHeight
captureTimeNs
frameType
rotation
qp
)
;
}
}
}
