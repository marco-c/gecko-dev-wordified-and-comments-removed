package
org
.
webrtc
;
import
java
.
util
.
IdentityHashMap
;
public
class
VideoTrack
extends
MediaStreamTrack
{
private
final
IdentityHashMap
<
VideoSink
Long
>
sinks
=
new
IdentityHashMap
<
VideoSink
Long
>
(
)
;
public
VideoTrack
(
long
nativeTrack
)
{
super
(
nativeTrack
)
;
}
public
void
addSink
(
VideoSink
sink
)
{
if
(
sink
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
The
VideoSink
is
not
allowed
to
be
null
"
)
;
}
if
(
!
sinks
.
containsKey
(
sink
)
)
{
final
long
nativeSink
=
nativeWrapSink
(
sink
)
;
sinks
.
put
(
sink
nativeSink
)
;
nativeAddSink
(
getNativeMediaStreamTrack
(
)
nativeSink
)
;
}
}
public
void
removeSink
(
VideoSink
sink
)
{
final
Long
nativeSink
=
sinks
.
remove
(
sink
)
;
if
(
nativeSink
!
=
null
)
{
nativeRemoveSink
(
getNativeMediaStreamTrack
(
)
nativeSink
)
;
nativeFreeSink
(
nativeSink
)
;
}
}
Override
public
void
dispose
(
)
{
for
(
long
nativeSink
:
sinks
.
values
(
)
)
{
nativeRemoveSink
(
getNativeMediaStreamTrack
(
)
nativeSink
)
;
nativeFreeSink
(
nativeSink
)
;
}
sinks
.
clear
(
)
;
super
.
dispose
(
)
;
}
long
getNativeVideoTrack
(
)
{
return
getNativeMediaStreamTrack
(
)
;
}
private
static
native
void
nativeAddSink
(
long
track
long
nativeSink
)
;
private
static
native
void
nativeRemoveSink
(
long
track
long
nativeSink
)
;
private
static
native
long
nativeWrapSink
(
VideoSink
sink
)
;
private
static
native
void
nativeFreeSink
(
long
sink
)
;
}
