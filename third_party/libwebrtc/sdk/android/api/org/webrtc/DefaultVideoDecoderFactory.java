package
org
.
webrtc
;
import
android
.
support
.
annotation
.
Nullable
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
LinkedHashSet
;
public
class
DefaultVideoDecoderFactory
implements
VideoDecoderFactory
{
private
final
VideoDecoderFactory
hardwareVideoDecoderFactory
;
private
final
VideoDecoderFactory
softwareVideoDecoderFactory
=
new
SoftwareVideoDecoderFactory
(
)
;
private
final
Nullable
VideoDecoderFactory
platformSoftwareVideoDecoderFactory
;
public
DefaultVideoDecoderFactory
(
Nullable
EglBase
.
Context
eglContext
)
{
this
.
hardwareVideoDecoderFactory
=
new
HardwareVideoDecoderFactory
(
eglContext
)
;
this
.
platformSoftwareVideoDecoderFactory
=
new
PlatformSoftwareVideoDecoderFactory
(
eglContext
)
;
}
DefaultVideoDecoderFactory
(
VideoDecoderFactory
hardwareVideoDecoderFactory
)
{
this
.
hardwareVideoDecoderFactory
=
hardwareVideoDecoderFactory
;
this
.
platformSoftwareVideoDecoderFactory
=
null
;
}
Override
public
Nullable
VideoDecoder
createDecoder
(
VideoCodecInfo
codecType
)
{
VideoDecoder
softwareDecoder
=
softwareVideoDecoderFactory
.
createDecoder
(
codecType
)
;
final
VideoDecoder
hardwareDecoder
=
hardwareVideoDecoderFactory
.
createDecoder
(
codecType
)
;
if
(
softwareDecoder
=
=
null
&
&
platformSoftwareVideoDecoderFactory
!
=
null
)
{
softwareDecoder
=
platformSoftwareVideoDecoderFactory
.
createDecoder
(
codecType
)
;
}
if
(
hardwareDecoder
!
=
null
&
&
softwareDecoder
!
=
null
)
{
return
new
VideoDecoderFallback
(
softwareDecoder
hardwareDecoder
)
;
}
return
hardwareDecoder
!
=
null
?
hardwareDecoder
:
softwareDecoder
;
}
Override
public
VideoCodecInfo
[
]
getSupportedCodecs
(
)
{
LinkedHashSet
<
VideoCodecInfo
>
supportedCodecInfos
=
new
LinkedHashSet
<
VideoCodecInfo
>
(
)
;
supportedCodecInfos
.
addAll
(
Arrays
.
asList
(
softwareVideoDecoderFactory
.
getSupportedCodecs
(
)
)
)
;
supportedCodecInfos
.
addAll
(
Arrays
.
asList
(
hardwareVideoDecoderFactory
.
getSupportedCodecs
(
)
)
)
;
if
(
platformSoftwareVideoDecoderFactory
!
=
null
)
{
supportedCodecInfos
.
addAll
(
Arrays
.
asList
(
platformSoftwareVideoDecoderFactory
.
getSupportedCodecs
(
)
)
)
;
}
return
supportedCodecInfos
.
toArray
(
new
VideoCodecInfo
[
supportedCodecInfos
.
size
(
)
]
)
;
}
}
