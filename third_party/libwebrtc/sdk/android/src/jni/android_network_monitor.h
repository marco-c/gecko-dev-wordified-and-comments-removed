#
ifndef
SDK_ANDROID_SRC_JNI_ANDROID_NETWORK_MONITOR_H_
#
define
SDK_ANDROID_SRC_JNI_ANDROID_NETWORK_MONITOR_H_
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
rtc_base
/
async_invoker
.
h
"
#
include
"
rtc_base
/
network_monitor
.
h
"
#
include
"
rtc_base
/
network_monitor_factory
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
sdk
/
android
/
src
/
jni
/
jni_helpers
.
h
"
namespace
webrtc
{
namespace
jni
{
typedef
int64_t
NetworkHandle
;
enum
NetworkType
{
NETWORK_UNKNOWN
NETWORK_ETHERNET
NETWORK_WIFI
NETWORK_5G
NETWORK_4G
NETWORK_3G
NETWORK_2G
NETWORK_UNKNOWN_CELLULAR
NETWORK_BLUETOOTH
NETWORK_VPN
NETWORK_NONE
}
;
struct
NetworkInformation
{
std
:
:
string
interface_name
;
NetworkHandle
handle
;
NetworkType
type
;
NetworkType
underlying_type_for_vpn
;
std
:
:
vector
<
rtc
:
:
IPAddress
>
ip_addresses
;
NetworkInformation
(
)
;
NetworkInformation
(
const
NetworkInformation
&
)
;
NetworkInformation
(
NetworkInformation
&
&
)
;
~
NetworkInformation
(
)
;
NetworkInformation
&
operator
=
(
const
NetworkInformation
&
)
;
NetworkInformation
&
operator
=
(
NetworkInformation
&
&
)
;
std
:
:
string
ToString
(
)
const
;
}
;
class
AndroidNetworkMonitor
:
public
rtc
:
:
NetworkMonitorInterface
public
rtc
:
:
NetworkBinderInterface
{
public
:
AndroidNetworkMonitor
(
JNIEnv
*
env
const
JavaRef
<
jobject
>
&
j_application_context
)
;
~
AndroidNetworkMonitor
(
)
override
;
static
void
SetAndroidContext
(
JNIEnv
*
jni
jobject
context
)
{
}
void
Start
(
)
override
;
void
Stop
(
)
override
;
rtc
:
:
NetworkBindingResult
BindSocketToNetwork
(
int
socket_fd
const
rtc
:
:
IPAddress
&
address
)
override
;
rtc
:
:
AdapterType
GetAdapterType
(
const
std
:
:
string
&
if_name
)
override
;
rtc
:
:
AdapterType
GetVpnUnderlyingAdapterType
(
const
std
:
:
string
&
if_name
)
override
;
rtc
:
:
NetworkPreference
GetNetworkPreference
(
const
std
:
:
string
&
if_name
)
override
;
void
SetNetworkInfos
(
const
std
:
:
vector
<
NetworkInformation
>
&
network_infos
)
;
void
NotifyConnectionTypeChanged
(
JNIEnv
*
env
const
JavaRef
<
jobject
>
&
j_caller
)
;
void
NotifyOfNetworkConnect
(
JNIEnv
*
env
const
JavaRef
<
jobject
>
&
j_caller
const
JavaRef
<
jobject
>
&
j_network_info
)
;
void
NotifyOfNetworkDisconnect
(
JNIEnv
*
env
const
JavaRef
<
jobject
>
&
j_caller
jlong
network_handle
)
;
void
NotifyOfActiveNetworkList
(
JNIEnv
*
env
const
JavaRef
<
jobject
>
&
j_caller
const
JavaRef
<
jobjectArray
>
&
j_network_infos
)
;
void
NotifyOfNetworkPreference
(
JNIEnv
*
env
const
JavaRef
<
jobject
>
&
j_caller
const
JavaRef
<
jobject
>
&
j_connection_type
jint
preference
)
;
absl
:
:
optional
<
NetworkHandle
>
FindNetworkHandleFromAddress
(
const
rtc
:
:
IPAddress
&
address
)
const
;
private
:
void
OnNetworkConnected_n
(
const
NetworkInformation
&
network_info
)
;
void
OnNetworkDisconnected_n
(
NetworkHandle
network_handle
)
;
void
OnNetworkPreference_n
(
NetworkType
type
rtc
:
:
NetworkPreference
preference
)
;
const
int
android_sdk_int_
;
ScopedJavaGlobalRef
<
jobject
>
j_application_context_
;
ScopedJavaGlobalRef
<
jobject
>
j_network_monitor_
;
rtc
:
:
Thread
*
network_thread_
;
bool
started_
RTC_GUARDED_BY
(
network_thread_
)
=
false
;
std
:
:
map
<
std
:
:
string
rtc
:
:
AdapterType
>
adapter_type_by_name_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
map
<
std
:
:
string
rtc
:
:
AdapterType
>
vpn_underlying_adapter_type_by_name_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
map
<
rtc
:
:
IPAddress
NetworkHandle
>
network_handle_by_address_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
map
<
NetworkHandle
NetworkInformation
>
network_info_by_handle_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
map
<
rtc
:
:
AdapterType
rtc
:
:
NetworkPreference
>
network_preference_by_adapter_type_
RTC_GUARDED_BY
(
network_thread_
)
;
bool
find_network_handle_without_ipv6_temporary_part_
RTC_GUARDED_BY
(
network_thread_
)
=
false
;
bool
surface_cellular_types_
RTC_GUARDED_BY
(
network_thread_
)
=
false
;
rtc
:
:
AsyncInvoker
invoker_
;
}
;
class
AndroidNetworkMonitorFactory
:
public
rtc
:
:
NetworkMonitorFactory
{
public
:
AndroidNetworkMonitorFactory
(
)
;
AndroidNetworkMonitorFactory
(
JNIEnv
*
env
const
JavaRef
<
jobject
>
&
j_application_context
)
;
~
AndroidNetworkMonitorFactory
(
)
override
;
rtc
:
:
NetworkMonitorInterface
*
CreateNetworkMonitor
(
)
override
;
private
:
ScopedJavaGlobalRef
<
jobject
>
j_application_context_
;
}
;
}
}
namespace
webrtc_jni
{
using
webrtc
:
:
jni
:
:
AndroidNetworkMonitor
;
using
webrtc
:
:
jni
:
:
AndroidNetworkMonitorFactory
;
}
#
endif
