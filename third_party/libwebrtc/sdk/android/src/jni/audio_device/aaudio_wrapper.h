#
ifndef
SDK_ANDROID_SRC_JNI_AUDIO_DEVICE_AAUDIO_WRAPPER_H_
#
define
SDK_ANDROID_SRC_JNI_AUDIO_DEVICE_AAUDIO_WRAPPER_H_
#
include
<
aaudio
/
AAudio
.
h
>
#
include
"
modules
/
audio_device
/
include
/
audio_device_defines
.
h
"
#
include
"
rtc_base
/
thread_checker
.
h
"
namespace
webrtc
{
namespace
jni
{
class
AAudioObserverInterface
{
public
:
virtual
aaudio_data_callback_result_t
OnDataCallback
(
void
*
audio_data
int32_t
num_frames
)
=
0
;
virtual
void
OnErrorCallback
(
aaudio_result_t
error
)
=
0
;
protected
:
virtual
~
AAudioObserverInterface
(
)
{
}
}
;
class
AAudioWrapper
{
public
:
AAudioWrapper
(
const
AudioParameters
&
audio_parameters
aaudio_direction_t
direction
AAudioObserverInterface
*
observer
)
;
~
AAudioWrapper
(
)
;
bool
Init
(
)
;
bool
Start
(
)
;
bool
Stop
(
)
;
double
EstimateLatencyMillis
(
)
const
;
bool
IncreaseOutputBufferSize
(
)
;
void
ClearInputStream
(
void
*
audio_data
int32_t
num_frames
)
;
AAudioObserverInterface
*
observer
(
)
const
;
AudioParameters
audio_parameters
(
)
const
;
int32_t
samples_per_frame
(
)
const
;
int32_t
buffer_size_in_frames
(
)
const
;
int32_t
buffer_capacity_in_frames
(
)
const
;
int32_t
device_id
(
)
const
;
int32_t
xrun_count
(
)
const
;
int32_t
format
(
)
const
;
int32_t
sample_rate
(
)
const
;
int32_t
channel_count
(
)
const
;
int32_t
frames_per_callback
(
)
const
;
aaudio_sharing_mode_t
sharing_mode
(
)
const
;
aaudio_performance_mode_t
performance_mode
(
)
const
;
aaudio_stream_state_t
stream_state
(
)
const
;
int64_t
frames_written
(
)
const
;
int64_t
frames_read
(
)
const
;
aaudio_direction_t
direction
(
)
const
{
return
direction_
;
}
AAudioStream
*
stream
(
)
const
{
return
stream_
;
}
int32_t
frames_per_burst
(
)
const
{
return
frames_per_burst_
;
}
private
:
void
SetStreamConfiguration
(
AAudioStreamBuilder
*
builder
)
;
bool
OpenStream
(
AAudioStreamBuilder
*
builder
)
;
void
CloseStream
(
)
;
void
LogStreamConfiguration
(
)
;
void
LogStreamState
(
)
;
bool
VerifyStreamConfiguration
(
)
;
bool
OptimizeBuffers
(
)
;
rtc
:
:
ThreadChecker
thread_checker_
;
rtc
:
:
ThreadChecker
aaudio_thread_checker_
;
const
AudioParameters
audio_parameters_
;
const
aaudio_direction_t
direction_
;
AAudioObserverInterface
*
observer_
=
nullptr
;
AAudioStream
*
stream_
=
nullptr
;
int32_t
frames_per_burst_
=
0
;
}
;
}
}
#
endif
