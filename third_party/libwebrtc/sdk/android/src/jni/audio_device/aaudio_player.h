#
ifndef
SDK_ANDROID_SRC_JNI_AUDIO_DEVICE_AAUDIO_PLAYER_H_
#
define
SDK_ANDROID_SRC_JNI_AUDIO_DEVICE_AAUDIO_PLAYER_H_
#
include
<
aaudio
/
AAudio
.
h
>
#
include
<
memory
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
modules
/
audio_device
/
audio_device_buffer
.
h
"
#
include
"
modules
/
audio_device
/
include
/
audio_device_defines
.
h
"
#
include
"
rtc_base
/
message_handler
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
rtc_base
/
thread_checker
.
h
"
#
include
"
sdk
/
android
/
src
/
jni
/
audio_device
/
aaudio_wrapper
.
h
"
#
include
"
sdk
/
android
/
src
/
jni
/
audio_device
/
audio_device_module
.
h
"
namespace
webrtc
{
class
AudioDeviceBuffer
;
class
FineAudioBuffer
;
namespace
jni
{
class
AAudioPlayer
final
:
public
AudioOutput
public
AAudioObserverInterface
public
rtc
:
:
MessageHandler
{
public
:
explicit
AAudioPlayer
(
const
AudioParameters
&
audio_parameters
)
;
~
AAudioPlayer
(
)
override
;
int
Init
(
)
override
;
int
Terminate
(
)
override
;
int
InitPlayout
(
)
override
;
bool
PlayoutIsInitialized
(
)
const
override
;
int
StartPlayout
(
)
override
;
int
StopPlayout
(
)
override
;
bool
Playing
(
)
const
override
;
void
AttachAudioBuffer
(
AudioDeviceBuffer
*
audioBuffer
)
override
;
bool
SpeakerVolumeIsAvailable
(
)
override
;
int
SetSpeakerVolume
(
uint32_t
volume
)
override
;
absl
:
:
optional
<
uint32_t
>
SpeakerVolume
(
)
const
override
;
absl
:
:
optional
<
uint32_t
>
MaxSpeakerVolume
(
)
const
override
;
absl
:
:
optional
<
uint32_t
>
MinSpeakerVolume
(
)
const
override
;
protected
:
aaudio_data_callback_result_t
OnDataCallback
(
void
*
audio_data
int32_t
num_frames
)
override
;
void
OnErrorCallback
(
aaudio_result_t
error
)
override
;
void
OnMessage
(
rtc
:
:
Message
*
msg
)
override
;
private
:
void
HandleStreamDisconnected
(
)
;
rtc
:
:
ThreadChecker
main_thread_checker_
;
rtc
:
:
ThreadChecker
thread_checker_aaudio_
;
rtc
:
:
Thread
*
main_thread_
;
AAudioWrapper
aaudio_
;
std
:
:
unique_ptr
<
FineAudioBuffer
>
fine_audio_buffer_
;
int32_t
underrun_count_
=
0
;
bool
first_data_callback_
=
true
;
AudioDeviceBuffer
*
audio_device_buffer_
RTC_GUARDED_BY
(
main_thread_checker_
)
=
nullptr
;
bool
initialized_
RTC_GUARDED_BY
(
main_thread_checker_
)
=
false
;
bool
playing_
RTC_GUARDED_BY
(
main_thread_checker_
)
=
false
;
double
latency_millis_
RTC_GUARDED_BY
(
thread_checker_aaudio_
)
=
0
;
}
;
}
}
#
endif
