#
ifndef
SDK_ANDROID_SRC_JNI_AUDIO_DEVICE_OPENSLES_COMMON_H_
#
define
SDK_ANDROID_SRC_JNI_AUDIO_DEVICE_OPENSLES_COMMON_H_
#
include
<
SLES
/
OpenSLES
.
h
>
#
include
<
stddef
.
h
>
#
include
"
api
/
ref_counted_base
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
synchronization
/
sequence_checker
.
h
"
namespace
webrtc
{
namespace
jni
{
const
char
*
GetSLErrorString
(
size_t
code
)
;
SLDataFormat_PCM
CreatePCMConfiguration
(
size_t
channels
int
sample_rate
size_t
bits_per_sample
)
;
template
<
typename
SLType
typename
SLDerefType
>
class
ScopedSLObject
{
public
:
ScopedSLObject
(
)
:
obj_
(
nullptr
)
{
}
~
ScopedSLObject
(
)
{
Reset
(
)
;
}
SLType
*
Receive
(
)
{
RTC_DCHECK
(
!
obj_
)
;
return
&
obj_
;
}
SLDerefType
operator
-
>
(
)
{
return
*
obj_
;
}
SLType
Get
(
)
const
{
return
obj_
;
}
void
Reset
(
)
{
if
(
obj_
)
{
(
*
obj_
)
-
>
Destroy
(
obj_
)
;
obj_
=
nullptr
;
}
}
private
:
SLType
obj_
;
}
;
typedef
ScopedSLObject
<
SLObjectItf
const
SLObjectItf_
*
>
ScopedSLObjectItf
;
class
OpenSLEngineManager
:
public
rtc
:
:
RefCountedBase
{
public
:
OpenSLEngineManager
(
)
;
~
OpenSLEngineManager
(
)
override
;
SLObjectItf
GetOpenSLEngine
(
)
;
private
:
SequenceChecker
thread_checker_
;
ScopedSLObjectItf
engine_object_
;
}
;
}
}
#
endif
