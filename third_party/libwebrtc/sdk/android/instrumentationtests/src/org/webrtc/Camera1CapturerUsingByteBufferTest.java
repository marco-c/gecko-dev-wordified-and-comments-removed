package
org
.
webrtc
;
import
android
.
content
.
Context
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
androidx
.
test
.
filters
.
LargeTest
;
import
androidx
.
test
.
filters
.
MediumTest
;
import
androidx
.
test
.
filters
.
SmallTest
;
import
org
.
chromium
.
base
.
test
.
BaseJUnit4ClassRunner
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
RunWith
(
BaseJUnit4ClassRunner
.
class
)
public
class
Camera1CapturerUsingByteBufferTest
{
static
final
String
TAG
=
"
Camera1CapturerUsingByteBufferTest
"
;
private
static
class
TestObjectFactory
extends
CameraVideoCapturerTestFixtures
.
TestObjectFactory
{
Override
public
boolean
isCapturingToTexture
(
)
{
return
false
;
}
Override
public
CameraEnumerator
getCameraEnumerator
(
)
{
return
new
Camera1Enumerator
(
false
)
;
}
Override
public
Context
getAppContext
(
)
{
return
InstrumentationRegistry
.
getTargetContext
(
)
;
}
SuppressWarnings
(
"
deprecation
"
)
Override
public
Object
rawOpenCamera
(
String
cameraName
)
{
return
android
.
hardware
.
Camera
.
open
(
Camera1Enumerator
.
getCameraIndex
(
cameraName
)
)
;
}
SuppressWarnings
(
"
deprecation
"
)
Override
public
void
rawCloseCamera
(
Object
camera
)
{
(
(
android
.
hardware
.
Camera
)
camera
)
.
release
(
)
;
}
}
private
CameraVideoCapturerTestFixtures
fixtures
;
Before
public
void
setUp
(
)
{
fixtures
=
new
CameraVideoCapturerTestFixtures
(
new
TestObjectFactory
(
)
)
;
}
After
public
void
tearDown
(
)
{
fixtures
.
dispose
(
)
;
}
Test
SmallTest
public
void
testCreateAndDispose
(
)
throws
InterruptedException
{
fixtures
.
createCapturerAndDispose
(
)
;
}
Test
SmallTest
public
void
testCreateNonExistingCamera
(
)
throws
InterruptedException
{
fixtures
.
createNonExistingCamera
(
)
;
}
Test
MediumTest
public
void
testCreateCapturerAndRender
(
)
throws
InterruptedException
{
fixtures
.
createCapturerAndRender
(
)
;
}
Test
MediumTest
public
void
testStartFrontFacingVideoCapturer
(
)
throws
InterruptedException
{
fixtures
.
createFrontFacingCapturerAndRender
(
)
;
}
Test
MediumTest
public
void
testStartBackFacingVideoCapturer
(
)
throws
InterruptedException
{
fixtures
.
createBackFacingCapturerAndRender
(
)
;
}
Test
MediumTest
public
void
testSwitchVideoCapturer
(
)
throws
InterruptedException
{
fixtures
.
switchCamera
(
)
;
}
Test
MediumTest
public
void
testSwitchVideoCapturerToSpecificCameraName
(
)
throws
InterruptedException
{
fixtures
.
switchCamera
(
true
)
;
}
Test
MediumTest
public
void
testCameraEvents
(
)
throws
InterruptedException
{
fixtures
.
cameraEventsInvoked
(
)
;
}
Test
MediumTest
public
void
testCameraCallsAfterStop
(
)
throws
InterruptedException
{
fixtures
.
cameraCallsAfterStop
(
)
;
}
Test
LargeTest
public
void
testStopRestartVideoSource
(
)
throws
InterruptedException
{
fixtures
.
stopRestartVideoSource
(
)
;
}
Test
LargeTest
public
void
testStartStopWithDifferentResolutions
(
)
throws
InterruptedException
{
fixtures
.
startStopWithDifferentResolutions
(
)
;
}
Test
LargeTest
public
void
testReturnBufferLate
(
)
throws
InterruptedException
{
fixtures
.
returnBufferLate
(
)
;
}
Test
MediumTest
public
void
testReturnBufferLateEndToEnd
(
)
throws
InterruptedException
{
fixtures
.
returnBufferLateEndToEnd
(
)
;
}
Test
MediumTest
public
void
testScaleCameraOutput
(
)
throws
InterruptedException
{
fixtures
.
scaleCameraOutput
(
)
;
}
Test
MediumTest
public
void
testCropCameraOutput
(
)
throws
InterruptedException
{
fixtures
.
cropCameraOutput
(
)
;
}
Test
LargeTest
public
void
testStartWhileCameraIsAlreadyOpen
(
)
throws
InterruptedException
{
fixtures
.
startWhileCameraIsAlreadyOpen
(
)
;
}
Test
LargeTest
public
void
testStartWhileCameraIsAlreadyOpenAndCloseCamera
(
)
throws
InterruptedException
{
fixtures
.
startWhileCameraIsAlreadyOpenAndCloseCamera
(
)
;
}
Test
MediumTest
public
void
testStartWhileCameraIsAlreadyOpenAndStop
(
)
throws
InterruptedException
{
fixtures
.
startWhileCameraIsAlreadyOpenAndStop
(
)
;
}
}
