package
org
.
webrtc
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
junit
.
Assert
.
fail
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
androidx
.
test
.
filters
.
SmallTest
;
import
org
.
chromium
.
base
.
test
.
BaseJUnit4ClassRunner
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
RunWith
(
BaseJUnit4ClassRunner
.
class
)
public
class
VideoTrackTest
{
private
PeerConnectionFactory
factory
;
private
VideoSource
videoSource
;
private
VideoTrack
videoTrack
;
Before
public
void
setUp
(
)
{
PeerConnectionFactory
.
initialize
(
PeerConnectionFactory
.
InitializationOptions
.
builder
(
InstrumentationRegistry
.
getTargetContext
(
)
)
.
setNativeLibraryName
(
TestConstants
.
NATIVE_LIBRARY
)
.
createInitializationOptions
(
)
)
;
factory
=
PeerConnectionFactory
.
builder
(
)
.
createPeerConnectionFactory
(
)
;
videoSource
=
factory
.
createVideoSource
(
false
)
;
videoTrack
=
factory
.
createVideoTrack
(
"
video
"
videoSource
)
;
}
Test
SmallTest
public
void
testAddingNullVideoSink
(
)
{
try
{
videoTrack
.
addSink
(
null
)
;
fail
(
"
Should
have
thrown
an
IllegalArgumentException
.
"
)
;
}
catch
(
IllegalArgumentException
e
)
{
}
}
Test
SmallTest
public
void
testRemovingNullVideoSink
(
)
{
videoTrack
.
removeSink
(
null
)
;
}
Test
SmallTest
public
void
testRemovingNonExistantVideoSink
(
)
{
final
VideoSink
videoSink
=
new
VideoSink
(
)
{
Override
public
void
onFrame
(
VideoFrame
frame
)
{
}
}
;
videoTrack
.
removeSink
(
videoSink
)
;
}
Test
SmallTest
public
void
testAddingSameVideoSinkMultipleTimes
(
)
{
class
FrameCounter
implements
VideoSink
{
private
int
count
;
public
int
getCount
(
)
{
return
count
;
}
Override
public
void
onFrame
(
VideoFrame
frame
)
{
count
+
=
1
;
}
}
final
FrameCounter
frameCounter
=
new
FrameCounter
(
)
;
final
VideoFrame
videoFrame
=
new
VideoFrame
(
JavaI420Buffer
.
allocate
(
32
32
)
0
0
)
;
videoTrack
.
addSink
(
frameCounter
)
;
videoTrack
.
addSink
(
frameCounter
)
;
videoSource
.
getCapturerObserver
(
)
.
onFrameCaptured
(
videoFrame
)
;
assertEquals
(
1
frameCounter
.
count
)
;
}
Test
SmallTest
public
void
testAddingAndRemovingVideoSink
(
)
{
final
VideoFrame
videoFrame
=
new
VideoFrame
(
JavaI420Buffer
.
allocate
(
32
32
)
0
0
)
;
final
VideoSink
failSink
=
new
VideoSink
(
)
{
Override
public
void
onFrame
(
VideoFrame
frame
)
{
fail
(
"
onFrame
(
)
should
not
be
called
on
removed
sink
"
)
;
}
}
;
videoTrack
.
addSink
(
failSink
)
;
videoTrack
.
removeSink
(
failSink
)
;
videoSource
.
getCapturerObserver
(
)
.
onFrameCaptured
(
videoFrame
)
;
}
}
