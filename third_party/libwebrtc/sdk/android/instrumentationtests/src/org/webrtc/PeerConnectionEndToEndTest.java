package
org
.
webrtc
;
import
static
com
.
google
.
common
.
truth
.
Truth
.
assertThat
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
junit
.
Assert
.
assertFalse
;
import
static
org
.
junit
.
Assert
.
assertNotNull
;
import
static
org
.
junit
.
Assert
.
assertNull
;
import
static
org
.
junit
.
Assert
.
assertTrue
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
test
.
filters
.
MediumTest
;
import
androidx
.
test
.
filters
.
SmallTest
;
import
java
.
lang
.
ref
.
WeakReference
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
nio
.
charset
.
Charset
;
import
java
.
util
.
ArrayDeque
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
IdentityHashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Queue
;
import
java
.
util
.
TreeSet
;
import
java
.
util
.
concurrent
.
CountDownLatch
;
import
java
.
util
.
concurrent
.
TimeUnit
;
import
org
.
chromium
.
base
.
test
.
BaseJUnit4ClassRunner
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
webrtc
.
PeerConnection
.
IceConnectionState
;
import
org
.
webrtc
.
PeerConnection
.
IceGatheringState
;
import
org
.
webrtc
.
PeerConnection
.
PeerConnectionState
;
import
org
.
webrtc
.
PeerConnection
.
SignalingState
;
RunWith
(
BaseJUnit4ClassRunner
.
class
)
public
class
PeerConnectionEndToEndTest
{
private
static
final
String
TAG
=
"
PeerConnectionEndToEndTest
"
;
private
static
final
int
DEFAULT_TIMEOUT_SECONDS
=
20
;
private
static
final
int
SHORT_TIMEOUT_SECONDS
=
5
;
Before
public
void
setUp
(
)
{
PeerConnectionFactory
.
initialize
(
PeerConnectionFactory
.
InitializationOptions
.
builder
(
InstrumentationRegistry
.
getTargetContext
(
)
)
.
setNativeLibraryName
(
TestConstants
.
NATIVE_LIBRARY
)
.
createInitializationOptions
(
)
)
;
}
private
static
class
ObserverExpectations
implements
PeerConnection
.
Observer
VideoSink
DataChannel
.
Observer
StatsObserver
RTCStatsCollectorCallback
RtpReceiver
.
Observer
{
private
final
String
name
;
private
int
expectedIceCandidates
;
private
int
expectedErrors
;
private
int
expectedRenegotiations
;
private
int
expectedWidth
;
private
int
expectedHeight
;
private
int
expectedFramesDelivered
;
private
int
expectedTracksAdded
;
private
Queue
<
SignalingState
>
expectedSignalingChanges
=
new
ArrayDeque
<
>
(
)
;
private
Queue
<
IceConnectionState
>
expectedIceConnectionChanges
=
new
ArrayDeque
<
>
(
)
;
private
Queue
<
IceConnectionState
>
expectedStandardizedIceConnectionChanges
=
new
ArrayDeque
<
>
(
)
;
private
Queue
<
PeerConnectionState
>
expectedConnectionChanges
=
new
ArrayDeque
<
>
(
)
;
private
Queue
<
IceGatheringState
>
expectedIceGatheringChanges
=
new
ArrayDeque
<
>
(
)
;
private
Queue
<
String
>
expectedAddStreamLabels
=
new
ArrayDeque
<
>
(
)
;
private
Queue
<
String
>
expectedRemoveStreamLabels
=
new
ArrayDeque
<
>
(
)
;
private
final
List
<
IceCandidate
>
gotIceCandidates
=
new
ArrayList
<
>
(
)
;
private
Map
<
MediaStream
WeakReference
<
VideoSink
>
>
videoSinks
=
new
IdentityHashMap
<
>
(
)
;
private
DataChannel
dataChannel
;
private
Queue
<
DataChannel
.
Buffer
>
expectedBuffers
=
new
ArrayDeque
<
>
(
)
;
private
Queue
<
DataChannel
.
State
>
expectedStateChanges
=
new
ArrayDeque
<
>
(
)
;
private
Queue
<
String
>
expectedRemoteDataChannelLabels
=
new
ArrayDeque
<
>
(
)
;
private
int
expectedOldStatsCallbacks
;
private
int
expectedNewStatsCallbacks
;
private
List
<
StatsReport
[
]
>
gotStatsReports
=
new
ArrayList
<
>
(
)
;
private
final
HashSet
<
MediaStream
>
gotRemoteStreams
=
new
HashSet
<
>
(
)
;
private
int
expectedFirstAudioPacket
;
private
int
expectedFirstVideoPacket
;
public
ObserverExpectations
(
String
name
)
{
this
.
name
=
name
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
setDataChannel
(
DataChannel
dataChannel
)
{
assertNull
(
this
.
dataChannel
)
;
this
.
dataChannel
=
dataChannel
;
this
.
dataChannel
.
registerObserver
(
this
)
;
assertNotNull
(
this
.
dataChannel
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectIceCandidates
(
int
count
)
{
expectedIceCandidates
+
=
count
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onIceCandidate
(
IceCandidate
candidate
)
{
Logging
.
d
(
TAG
"
onIceCandidate
:
"
+
candidate
.
toString
(
)
)
;
-
-
expectedIceCandidates
;
synchronized
(
gotIceCandidates
)
{
gotIceCandidates
.
add
(
candidate
)
;
gotIceCandidates
.
notifyAll
(
)
;
}
}
Override
public
void
onIceCandidatesRemoved
(
IceCandidate
[
]
candidates
)
{
}
Override
public
void
onSelectedCandidatePairChanged
(
CandidatePairChangeEvent
event
)
{
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
setExpectedResolution
(
int
width
int
height
)
{
expectedWidth
=
width
;
expectedHeight
=
height
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectFramesDelivered
(
int
count
)
{
expectedFramesDelivered
+
=
count
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onFrame
(
VideoFrame
frame
)
{
if
(
expectedFramesDelivered
<
=
0
)
{
return
;
}
assertTrue
(
expectedWidth
>
0
)
;
assertTrue
(
expectedHeight
>
0
)
;
assertEquals
(
expectedWidth
frame
.
getRotatedWidth
(
)
)
;
assertEquals
(
expectedHeight
frame
.
getRotatedHeight
(
)
)
;
-
-
expectedFramesDelivered
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectSignalingChange
(
SignalingState
newState
)
{
expectedSignalingChanges
.
add
(
newState
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onSignalingChange
(
SignalingState
newState
)
{
assertEquals
(
expectedSignalingChanges
.
remove
(
)
newState
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectIceConnectionChange
(
IceConnectionState
newState
)
{
expectedIceConnectionChanges
.
add
(
newState
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectStandardizedIceConnectionChange
(
IceConnectionState
newState
)
{
expectedStandardizedIceConnectionChanges
.
add
(
newState
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onIceConnectionChange
(
IceConnectionState
newState
)
{
if
(
newState
.
equals
(
IceConnectionState
.
COMPLETED
)
)
{
return
;
}
if
(
expectedIceConnectionChanges
.
isEmpty
(
)
)
{
Logging
.
d
(
TAG
name
+
"
Got
an
unexpected
ICE
connection
change
"
+
newState
)
;
return
;
}
assertEquals
(
expectedIceConnectionChanges
.
remove
(
)
newState
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onStandardizedIceConnectionChange
(
IceConnectionState
newState
)
{
if
(
newState
.
equals
(
IceConnectionState
.
COMPLETED
)
)
{
return
;
}
if
(
expectedIceConnectionChanges
.
isEmpty
(
)
)
{
Logging
.
d
(
TAG
name
+
"
Got
an
unexpected
standardized
ICE
connection
change
"
+
newState
)
;
return
;
}
assertEquals
(
expectedStandardizedIceConnectionChanges
.
remove
(
)
newState
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectConnectionChange
(
PeerConnectionState
newState
)
{
expectedConnectionChanges
.
add
(
newState
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onConnectionChange
(
PeerConnectionState
newState
)
{
if
(
expectedConnectionChanges
.
isEmpty
(
)
)
{
Logging
.
d
(
TAG
name
+
"
got
an
unexpected
DTLS
connection
change
"
+
newState
)
;
return
;
}
assertEquals
(
expectedConnectionChanges
.
remove
(
)
newState
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onIceConnectionReceivingChange
(
boolean
receiving
)
{
Logging
.
d
(
TAG
name
+
"
got
an
ICE
connection
receiving
change
"
+
receiving
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectIceGatheringChange
(
IceGatheringState
newState
)
{
expectedIceGatheringChanges
.
add
(
newState
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onIceGatheringChange
(
IceGatheringState
newState
)
{
if
(
newState
=
=
IceGatheringState
.
GATHERING
)
{
return
;
}
if
(
expectedIceGatheringChanges
.
isEmpty
(
)
)
{
Logging
.
d
(
TAG
name
+
"
Got
an
unexpected
ICE
gathering
change
"
+
newState
)
;
}
assertEquals
(
expectedIceGatheringChanges
.
remove
(
)
newState
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectAddStream
(
String
label
)
{
expectedAddStreamLabels
.
add
(
label
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onAddStream
(
MediaStream
stream
)
{
assertEquals
(
expectedAddStreamLabels
.
remove
(
)
stream
.
getId
(
)
)
;
for
(
AudioTrack
track
:
stream
.
audioTracks
)
{
assertEquals
(
"
audio
"
track
.
kind
(
)
)
;
}
for
(
VideoTrack
track
:
stream
.
videoTracks
)
{
assertEquals
(
"
video
"
track
.
kind
(
)
)
;
track
.
addSink
(
this
)
;
assertNull
(
videoSinks
.
put
(
stream
new
WeakReference
<
VideoSink
>
(
this
)
)
)
;
}
gotRemoteStreams
.
add
(
stream
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectRemoveStream
(
String
label
)
{
expectedRemoveStreamLabels
.
add
(
label
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onRemoveStream
(
MediaStream
stream
)
{
assertEquals
(
expectedRemoveStreamLabels
.
remove
(
)
stream
.
getId
(
)
)
;
WeakReference
<
VideoSink
>
videoSink
=
videoSinks
.
remove
(
stream
)
;
assertNotNull
(
videoSink
)
;
assertNotNull
(
videoSink
.
get
(
)
)
;
for
(
VideoTrack
videoTrack
:
stream
.
videoTracks
)
{
videoTrack
.
removeSink
(
videoSink
.
get
(
)
)
;
}
gotRemoteStreams
.
remove
(
stream
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectDataChannel
(
String
label
)
{
expectedRemoteDataChannelLabels
.
add
(
label
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onDataChannel
(
DataChannel
remoteDataChannel
)
{
assertEquals
(
expectedRemoteDataChannelLabels
.
remove
(
)
remoteDataChannel
.
label
(
)
)
;
setDataChannel
(
remoteDataChannel
)
;
assertEquals
(
DataChannel
.
State
.
CONNECTING
dataChannel
.
state
(
)
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectRenegotiationNeeded
(
)
{
+
+
expectedRenegotiations
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onRenegotiationNeeded
(
)
{
assertTrue
(
-
-
expectedRenegotiations
>
=
0
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectAddTrack
(
int
expectedTracksAdded
)
{
this
.
expectedTracksAdded
=
expectedTracksAdded
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onAddTrack
(
RtpReceiver
receiver
MediaStream
[
]
mediaStreams
)
{
expectedTracksAdded
-
-
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectMessage
(
ByteBuffer
expectedBuffer
boolean
expectedBinary
)
{
expectedBuffers
.
add
(
new
DataChannel
.
Buffer
(
expectedBuffer
expectedBinary
)
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onMessage
(
DataChannel
.
Buffer
buffer
)
{
DataChannel
.
Buffer
expected
=
expectedBuffers
.
remove
(
)
;
assertEquals
(
expected
.
binary
buffer
.
binary
)
;
assertTrue
(
expected
.
data
.
equals
(
buffer
.
data
)
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onBufferedAmountChange
(
long
previousAmount
)
{
assertFalse
(
previousAmount
=
=
dataChannel
.
bufferedAmount
(
)
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onStateChange
(
)
{
assertEquals
(
expectedStateChanges
.
remove
(
)
dataChannel
.
state
(
)
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectStateChange
(
DataChannel
.
State
state
)
{
expectedStateChanges
.
add
(
state
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onComplete
(
StatsReport
[
]
reports
)
{
if
(
-
-
expectedOldStatsCallbacks
<
0
)
{
throw
new
RuntimeException
(
"
Unexpected
stats
report
:
"
+
Arrays
.
toString
(
reports
)
)
;
}
gotStatsReports
.
add
(
reports
)
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onStatsDelivered
(
RTCStatsReport
report
)
{
if
(
-
-
expectedNewStatsCallbacks
<
0
)
{
throw
new
RuntimeException
(
"
Unexpected
stats
report
:
"
+
report
)
;
}
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onFirstPacketReceived
(
MediaStreamTrack
.
MediaType
mediaType
)
{
if
(
mediaType
=
=
MediaStreamTrack
.
MediaType
.
MEDIA_TYPE_AUDIO
)
{
expectedFirstAudioPacket
-
-
;
}
else
{
expectedFirstVideoPacket
-
-
;
}
if
(
expectedFirstAudioPacket
<
0
|
|
expectedFirstVideoPacket
<
0
)
{
throw
new
RuntimeException
(
"
Unexpected
call
of
onFirstPacketReceived
"
)
;
}
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectFirstPacketReceived
(
)
{
expectedFirstAudioPacket
=
1
;
expectedFirstVideoPacket
=
1
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectOldStatsCallback
(
)
{
+
+
expectedOldStatsCallbacks
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
expectNewStatsCallback
(
)
{
+
+
expectedNewStatsCallbacks
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
List
<
StatsReport
[
]
>
takeStatsReports
(
)
{
List
<
StatsReport
[
]
>
got
=
gotStatsReports
;
gotStatsReports
=
new
ArrayList
<
StatsReport
[
]
>
(
)
;
return
got
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
TreeSet
<
String
>
unsatisfiedExpectations
(
)
{
TreeSet
<
String
>
stillWaitingForExpectations
=
new
TreeSet
<
String
>
(
)
;
if
(
expectedIceCandidates
>
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedIceCandidates
"
)
;
}
if
(
expectedErrors
!
=
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedErrors
:
"
+
expectedErrors
)
;
}
if
(
expectedSignalingChanges
.
size
(
)
!
=
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedSignalingChanges
:
"
+
expectedSignalingChanges
.
size
(
)
)
;
}
if
(
expectedIceConnectionChanges
.
size
(
)
!
=
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedIceConnectionChanges
:
"
+
expectedIceConnectionChanges
.
size
(
)
)
;
}
if
(
expectedIceGatheringChanges
.
size
(
)
!
=
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedIceGatheringChanges
:
"
+
expectedIceGatheringChanges
.
size
(
)
)
;
}
if
(
expectedAddStreamLabels
.
size
(
)
!
=
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedAddStreamLabels
:
"
+
expectedAddStreamLabels
.
size
(
)
)
;
}
if
(
expectedRemoveStreamLabels
.
size
(
)
!
=
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedRemoveStreamLabels
:
"
+
expectedRemoveStreamLabels
.
size
(
)
)
;
}
if
(
expectedFramesDelivered
>
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedFramesDelivered
:
"
+
expectedFramesDelivered
)
;
}
if
(
!
expectedBuffers
.
isEmpty
(
)
)
{
stillWaitingForExpectations
.
add
(
"
expectedBuffers
:
"
+
expectedBuffers
.
size
(
)
)
;
}
if
(
!
expectedStateChanges
.
isEmpty
(
)
)
{
stillWaitingForExpectations
.
add
(
"
expectedStateChanges
:
"
+
expectedStateChanges
.
size
(
)
)
;
}
if
(
!
expectedRemoteDataChannelLabels
.
isEmpty
(
)
)
{
stillWaitingForExpectations
.
add
(
"
expectedRemoteDataChannelLabels
:
"
+
expectedRemoteDataChannelLabels
.
size
(
)
)
;
}
if
(
expectedOldStatsCallbacks
!
=
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedOldStatsCallbacks
:
"
+
expectedOldStatsCallbacks
)
;
}
if
(
expectedNewStatsCallbacks
!
=
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedNewStatsCallbacks
:
"
+
expectedNewStatsCallbacks
)
;
}
if
(
expectedFirstAudioPacket
>
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedFirstAudioPacket
:
"
+
expectedFirstAudioPacket
)
;
}
if
(
expectedFirstVideoPacket
>
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedFirstVideoPacket
:
"
+
expectedFirstVideoPacket
)
;
}
if
(
expectedTracksAdded
!
=
0
)
{
stillWaitingForExpectations
.
add
(
"
expectedAddedTrack
:
"
+
expectedTracksAdded
)
;
}
return
stillWaitingForExpectations
;
}
public
boolean
waitForAllExpectationsToBeSatisfied
(
int
timeoutSeconds
)
{
long
endTime
=
System
.
currentTimeMillis
(
)
+
1000
*
timeoutSeconds
;
TreeSet
<
String
>
prev
=
null
;
TreeSet
<
String
>
stillWaitingForExpectations
=
unsatisfiedExpectations
(
)
;
while
(
!
stillWaitingForExpectations
.
isEmpty
(
)
)
{
if
(
!
stillWaitingForExpectations
.
equals
(
prev
)
)
{
Logging
.
d
(
TAG
name
+
"
still
waiting
at
\
n
"
+
(
new
Throwable
(
)
)
.
getStackTrace
(
)
[
1
]
+
"
\
n
for
:
"
+
Arrays
.
toString
(
stillWaitingForExpectations
.
toArray
(
)
)
)
;
}
if
(
endTime
<
System
.
currentTimeMillis
(
)
)
{
Logging
.
d
(
TAG
name
+
"
timed
out
waiting
for
:
"
+
Arrays
.
toString
(
stillWaitingForExpectations
.
toArray
(
)
)
)
;
return
false
;
}
try
{
Thread
.
sleep
(
10
)
;
}
catch
(
InterruptedException
e
)
{
throw
new
RuntimeException
(
e
)
;
}
prev
=
stillWaitingForExpectations
;
stillWaitingForExpectations
=
unsatisfiedExpectations
(
)
;
}
if
(
prev
=
=
null
)
{
Logging
.
d
(
TAG
name
+
"
didn
'
t
need
to
wait
at
\
n
"
+
(
new
Throwable
(
)
)
.
getStackTrace
(
)
[
1
]
)
;
}
return
true
;
}
public
List
<
IceCandidate
>
getAtLeastOneIceCandidate
(
)
throws
InterruptedException
{
synchronized
(
gotIceCandidates
)
{
while
(
gotIceCandidates
.
isEmpty
(
)
)
{
gotIceCandidates
.
wait
(
)
;
}
return
new
ArrayList
<
IceCandidate
>
(
gotIceCandidates
)
;
}
}
}
private
static
class
ExpectedResolutionSetter
implements
VideoSink
{
private
ObserverExpectations
observer
;
public
ExpectedResolutionSetter
(
ObserverExpectations
observer
)
{
this
.
observer
=
observer
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onFrame
(
VideoFrame
frame
)
{
assertTrue
(
frame
.
getRotatedWidth
(
)
>
0
)
;
assertTrue
(
frame
.
getRotatedHeight
(
)
>
0
)
;
observer
.
setExpectedResolution
(
frame
.
getRotatedWidth
(
)
frame
.
getRotatedHeight
(
)
)
;
frame
.
retain
(
)
;
}
}
private
static
class
SdpObserverLatch
implements
SdpObserver
{
private
boolean
success
;
private
Nullable
SessionDescription
sdp
;
private
Nullable
String
error
;
private
CountDownLatch
latch
=
new
CountDownLatch
(
1
)
;
public
SdpObserverLatch
(
)
{
}
Override
public
void
onCreateSuccess
(
SessionDescription
sdp
)
{
this
.
sdp
=
sdp
;
onSetSuccess
(
)
;
}
Override
public
void
onSetSuccess
(
)
{
success
=
true
;
latch
.
countDown
(
)
;
}
Override
public
void
onCreateFailure
(
String
error
)
{
onSetFailure
(
error
)
;
}
Override
public
void
onSetFailure
(
String
error
)
{
this
.
error
=
error
;
latch
.
countDown
(
)
;
}
public
boolean
await
(
)
{
try
{
assertTrue
(
latch
.
await
(
1000
TimeUnit
.
MILLISECONDS
)
)
;
return
getSuccess
(
)
;
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
e
)
;
}
}
public
boolean
getSuccess
(
)
{
return
success
;
}
public
Nullable
SessionDescription
getSdp
(
)
{
return
sdp
;
}
public
Nullable
String
getError
(
)
{
return
error
;
}
}
private
static
WeakReference
<
MediaStream
>
addTracksToPC
(
PeerConnectionFactory
factory
PeerConnection
pc
VideoSource
videoSource
String
streamLabel
String
videoTrackId
String
audioTrackId
VideoSink
videoSink
)
{
MediaStream
lMS
=
factory
.
createLocalMediaStream
(
streamLabel
)
;
VideoTrack
videoTrack
=
factory
.
createVideoTrack
(
videoTrackId
videoSource
)
;
assertNotNull
(
videoTrack
)
;
assertNotNull
(
videoSink
)
;
videoTrack
.
addSink
(
videoSink
)
;
lMS
.
addTrack
(
videoTrack
)
;
lMS
.
removeTrack
(
videoTrack
)
;
lMS
.
addTrack
(
videoTrack
)
;
lMS
.
addTrack
(
factory
.
createAudioTrack
(
audioTrackId
factory
.
createAudioSource
(
new
MediaConstraints
(
)
)
)
)
;
pc
.
addStream
(
lMS
)
;
return
new
WeakReference
<
MediaStream
>
(
lMS
)
;
}
Test
MediumTest
public
void
testCompleteSession
(
)
throws
Exception
{
Metrics
.
enable
(
)
;
PeerConnectionFactory
.
Options
options
=
new
PeerConnectionFactory
.
Options
(
)
;
options
.
networkIgnoreMask
=
0
;
PeerConnectionFactory
factory
=
PeerConnectionFactory
.
builder
(
)
.
setOptions
(
options
)
.
setVideoEncoderFactory
(
new
SoftwareVideoEncoderFactory
(
)
)
.
setVideoDecoderFactory
(
new
SoftwareVideoDecoderFactory
(
)
)
.
createPeerConnectionFactory
(
)
;
List
<
PeerConnection
.
IceServer
>
iceServers
=
new
ArrayList
<
>
(
)
;
iceServers
.
add
(
PeerConnection
.
IceServer
.
builder
(
"
stun
:
stun
.
l
.
google
.
com
:
19302
"
)
.
createIceServer
(
)
)
;
iceServers
.
add
(
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword
"
)
.
createIceServer
(
)
)
;
PeerConnection
.
RTCConfiguration
rtcConfig
=
new
PeerConnection
.
RTCConfiguration
(
iceServers
)
;
ObserverExpectations
offeringExpectations
=
new
ObserverExpectations
(
"
PCTest
:
offerer
"
)
;
PeerConnection
offeringPC
=
factory
.
createPeerConnection
(
rtcConfig
offeringExpectations
)
;
assertNotNull
(
offeringPC
)
;
ObserverExpectations
answeringExpectations
=
new
ObserverExpectations
(
"
PCTest
:
answerer
"
)
;
PeerConnection
answeringPC
=
factory
.
createPeerConnection
(
rtcConfig
answeringExpectations
)
;
assertNotNull
(
answeringPC
)
;
final
CameraEnumerator
enumerator
=
new
Camera1Enumerator
(
false
)
;
final
VideoCapturer
videoCapturer
=
enumerator
.
createCapturer
(
enumerator
.
getDeviceNames
(
)
[
0
]
null
)
;
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
"
null
)
;
final
VideoSource
videoSource
=
factory
.
createVideoSource
(
false
)
;
videoCapturer
.
initialize
(
surfaceTextureHelper
InstrumentationRegistry
.
getTargetContext
(
)
videoSource
.
getCapturerObserver
(
)
)
;
videoCapturer
.
startCapture
(
640
480
30
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
WeakReference
<
MediaStream
>
oLMS
=
addTracksToPC
(
factory
offeringPC
videoSource
"
offeredMediaStream
"
"
offeredVideoTrack
"
"
offeredAudioTrack
"
new
ExpectedResolutionSetter
(
answeringExpectations
)
)
;
offeringExpectations
.
expectAddTrack
(
2
)
;
answeringExpectations
.
expectAddTrack
(
2
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
DataChannel
offeringDC
=
offeringPC
.
createDataChannel
(
"
offeringDC
"
new
DataChannel
.
Init
(
)
)
;
assertEquals
(
"
offeringDC
"
offeringDC
.
label
(
)
)
;
offeringExpectations
.
setDataChannel
(
offeringDC
)
;
SdpObserverLatch
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringPC
.
createOffer
(
sdpLatch
new
MediaConstraints
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
offerSdp
=
sdpLatch
.
getSdp
(
)
;
assertEquals
(
offerSdp
.
type
SessionDescription
.
Type
.
OFFER
)
;
assertFalse
(
offerSdp
.
description
.
isEmpty
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringExpectations
.
expectSignalingChange
(
SignalingState
.
HAVE_REMOTE_OFFER
)
;
answeringExpectations
.
expectAddStream
(
"
offeredMediaStream
"
)
;
answeringPC
.
setRemoteDescription
(
sdpLatch
offerSdp
)
;
assertEquals
(
PeerConnection
.
SignalingState
.
STABLE
offeringPC
.
signalingState
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
answeringExpectations
.
expectRenegotiationNeeded
(
)
;
WeakReference
<
MediaStream
>
aLMS
=
addTracksToPC
(
factory
answeringPC
videoSource
"
answeredMediaStream
"
"
answeredVideoTrack
"
"
answeredAudioTrack
"
new
ExpectedResolutionSetter
(
offeringExpectations
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringPC
.
createAnswer
(
sdpLatch
new
MediaConstraints
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
answerSdp
=
sdpLatch
.
getSdp
(
)
;
assertEquals
(
answerSdp
.
type
SessionDescription
.
Type
.
ANSWER
)
;
assertFalse
(
answerSdp
.
description
.
isEmpty
(
)
)
;
offeringExpectations
.
expectIceCandidates
(
2
)
;
answeringExpectations
.
expectIceCandidates
(
2
)
;
offeringExpectations
.
expectIceGatheringChange
(
IceGatheringState
.
COMPLETE
)
;
answeringExpectations
.
expectIceGatheringChange
(
IceGatheringState
.
COMPLETE
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringExpectations
.
expectSignalingChange
(
SignalingState
.
STABLE
)
;
answeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTING
)
;
answeringPC
.
setLocalDescription
(
sdpLatch
answerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
HAVE_LOCAL_OFFER
)
;
offeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTING
)
;
offeringPC
.
setLocalDescription
(
sdpLatch
offerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
STABLE
)
;
offeringExpectations
.
expectAddStream
(
"
answeredMediaStream
"
)
;
offeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
offeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
offeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
offeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
offeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTED
)
;
answeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
answeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
answeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
answeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
answeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTED
)
;
offeringPC
.
setRemoteDescription
(
sdpLatch
answerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
assertEquals
(
offeringPC
.
getLocalDescription
(
)
.
type
offerSdp
.
type
)
;
assertEquals
(
offeringPC
.
getRemoteDescription
(
)
.
type
answerSdp
.
type
)
;
assertEquals
(
answeringPC
.
getLocalDescription
(
)
.
type
answerSdp
.
type
)
;
assertEquals
(
answeringPC
.
getRemoteDescription
(
)
.
type
offerSdp
.
type
)
;
assertEquals
(
offeringPC
.
getSenders
(
)
.
size
(
)
2
)
;
assertEquals
(
offeringPC
.
getReceivers
(
)
.
size
(
)
2
)
;
assertEquals
(
answeringPC
.
getSenders
(
)
.
size
(
)
2
)
;
assertEquals
(
answeringPC
.
getReceivers
(
)
.
size
(
)
2
)
;
offeringExpectations
.
expectFirstPacketReceived
(
)
;
answeringExpectations
.
expectFirstPacketReceived
(
)
;
for
(
RtpReceiver
receiver
:
offeringPC
.
getReceivers
(
)
)
{
receiver
.
SetObserver
(
offeringExpectations
)
;
}
for
(
RtpReceiver
receiver
:
answeringPC
.
getReceivers
(
)
)
{
receiver
.
SetObserver
(
answeringExpectations
)
;
}
offeringExpectations
.
expectFramesDelivered
(
10
)
;
answeringExpectations
.
expectFramesDelivered
(
10
)
;
offeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
OPEN
)
;
answeringExpectations
.
expectDataChannel
(
"
offeringDC
"
)
;
answeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
OPEN
)
;
for
(
IceCandidate
candidate
:
offeringExpectations
.
getAtLeastOneIceCandidate
(
)
)
{
answeringPC
.
addIceCandidate
(
candidate
)
;
}
for
(
IceCandidate
candidate
:
answeringExpectations
.
getAtLeastOneIceCandidate
(
)
)
{
offeringPC
.
addIceCandidate
(
candidate
)
;
}
assertTrue
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
assertTrue
(
answeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
assertEquals
(
PeerConnection
.
SignalingState
.
STABLE
offeringPC
.
signalingState
(
)
)
;
assertEquals
(
PeerConnection
.
SignalingState
.
STABLE
answeringPC
.
signalingState
(
)
)
;
RtpSender
videoSender
=
null
;
RtpSender
audioSender
=
null
;
for
(
RtpSender
sender
:
offeringPC
.
getSenders
(
)
)
{
if
(
sender
.
track
(
)
.
kind
(
)
.
equals
(
"
video
"
)
)
{
videoSender
=
sender
;
}
else
{
audioSender
=
sender
;
}
}
assertNotNull
(
videoSender
)
;
assertNotNull
(
audioSender
)
;
RtpParameters
rtpParameters
=
videoSender
.
getParameters
(
)
;
assertNotNull
(
rtpParameters
)
;
assertEquals
(
1
rtpParameters
.
encodings
.
size
(
)
)
;
assertNull
(
rtpParameters
.
encodings
.
get
(
0
)
.
maxBitrateBps
)
;
assertNull
(
rtpParameters
.
encodings
.
get
(
0
)
.
minBitrateBps
)
;
assertNull
(
rtpParameters
.
encodings
.
get
(
0
)
.
maxFramerate
)
;
assertNull
(
rtpParameters
.
encodings
.
get
(
0
)
.
numTemporalLayers
)
;
assertNull
(
rtpParameters
.
encodings
.
get
(
0
)
.
scaleResolutionDownBy
)
;
assertTrue
(
rtpParameters
.
encodings
.
get
(
0
)
.
rid
.
isEmpty
(
)
)
;
rtpParameters
.
encodings
.
get
(
0
)
.
maxBitrateBps
=
300000
;
rtpParameters
.
encodings
.
get
(
0
)
.
minBitrateBps
=
100000
;
rtpParameters
.
encodings
.
get
(
0
)
.
maxFramerate
=
20
;
rtpParameters
.
encodings
.
get
(
0
)
.
numTemporalLayers
=
2
;
rtpParameters
.
encodings
.
get
(
0
)
.
scaleResolutionDownBy
=
2
.
0
;
assertTrue
(
videoSender
.
setParameters
(
rtpParameters
)
)
;
DtmfSender
dtmfSender
=
audioSender
.
dtmf
(
)
;
assertNotNull
(
dtmfSender
)
;
assertTrue
(
dtmfSender
.
canInsertDtmf
(
)
)
;
assertTrue
(
dtmfSender
.
insertDtmf
(
"
123
"
300
100
)
)
;
rtpParameters
=
videoSender
.
getParameters
(
)
;
assertEquals
(
300000
(
int
)
rtpParameters
.
encodings
.
get
(
0
)
.
maxBitrateBps
)
;
assertEquals
(
100000
(
int
)
rtpParameters
.
encodings
.
get
(
0
)
.
minBitrateBps
)
;
assertEquals
(
20
(
int
)
rtpParameters
.
encodings
.
get
(
0
)
.
maxFramerate
)
;
assertEquals
(
2
(
int
)
rtpParameters
.
encodings
.
get
(
0
)
.
numTemporalLayers
)
;
assertThat
(
rtpParameters
.
encodings
.
get
(
0
)
.
scaleResolutionDownBy
)
.
isEqualTo
(
2
.
0
)
;
answeringExpectations
.
expectMessage
(
ByteBuffer
.
wrap
(
"
hello
!
"
.
getBytes
(
Charset
.
forName
(
"
UTF
-
8
"
)
)
)
false
)
;
DataChannel
.
Buffer
buffer
=
new
DataChannel
.
Buffer
(
ByteBuffer
.
wrap
(
"
hello
!
"
.
getBytes
(
Charset
.
forName
(
"
UTF
-
8
"
)
)
)
false
)
;
assertTrue
(
offeringExpectations
.
dataChannel
.
send
(
buffer
)
)
;
assertTrue
(
answeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
ByteBuffer
expectedBinaryMessage
=
ByteBuffer
.
allocateDirect
(
5
)
;
for
(
byte
i
=
1
;
i
<
6
;
+
+
i
)
{
expectedBinaryMessage
.
put
(
i
)
;
}
expectedBinaryMessage
.
flip
(
)
;
offeringExpectations
.
expectMessage
(
expectedBinaryMessage
true
)
;
assertTrue
(
answeringExpectations
.
dataChannel
.
send
(
new
DataChannel
.
Buffer
(
ByteBuffer
.
wrap
(
new
byte
[
]
{
1
2
3
4
5
}
)
true
)
)
)
;
assertTrue
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
offeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
CLOSING
)
;
answeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
CLOSING
)
;
offeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
CLOSED
)
;
answeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
CLOSED
)
;
answeringExpectations
.
dataChannel
.
close
(
)
;
offeringExpectations
.
dataChannel
.
close
(
)
;
assertTrue
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
assertTrue
(
answeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
assertTrue
(
offeringPC
.
setBitrate
(
100000
5000000
500000000
)
)
;
assertFalse
(
offeringPC
.
setBitrate
(
3
2
1
)
)
;
shutdownPC
(
offeringPC
offeringExpectations
)
;
offeringPC
=
null
;
shutdownPC
(
answeringPC
answeringExpectations
)
;
answeringPC
=
null
;
videoCapturer
.
stopCapture
(
)
;
videoCapturer
.
dispose
(
)
;
videoSource
.
dispose
(
)
;
surfaceTextureHelper
.
dispose
(
)
;
factory
.
dispose
(
)
;
System
.
gc
(
)
;
}
Test
MediumTest
public
void
testDataChannelOnlySession
(
)
throws
Exception
{
PeerConnectionFactory
.
Options
options
=
new
PeerConnectionFactory
.
Options
(
)
;
options
.
networkIgnoreMask
=
0
;
PeerConnectionFactory
factory
=
PeerConnectionFactory
.
builder
(
)
.
setOptions
(
options
)
.
createPeerConnectionFactory
(
)
;
List
<
PeerConnection
.
IceServer
>
iceServers
=
new
ArrayList
<
>
(
)
;
iceServers
.
add
(
PeerConnection
.
IceServer
.
builder
(
"
stun
:
stun
.
l
.
google
.
com
:
19302
"
)
.
createIceServer
(
)
)
;
iceServers
.
add
(
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword
"
)
.
createIceServer
(
)
)
;
PeerConnection
.
RTCConfiguration
rtcConfig
=
new
PeerConnection
.
RTCConfiguration
(
iceServers
)
;
ObserverExpectations
offeringExpectations
=
new
ObserverExpectations
(
"
PCTest
:
offerer
"
)
;
PeerConnection
offeringPC
=
factory
.
createPeerConnection
(
rtcConfig
offeringExpectations
)
;
assertNotNull
(
offeringPC
)
;
ObserverExpectations
answeringExpectations
=
new
ObserverExpectations
(
"
PCTest
:
answerer
"
)
;
PeerConnection
answeringPC
=
factory
.
createPeerConnection
(
rtcConfig
answeringExpectations
)
;
assertNotNull
(
answeringPC
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
DataChannel
offeringDC
=
offeringPC
.
createDataChannel
(
"
offeringDC
"
new
DataChannel
.
Init
(
)
)
;
assertEquals
(
"
offeringDC
"
offeringDC
.
label
(
)
)
;
offeringExpectations
.
setDataChannel
(
offeringDC
)
;
SdpObserverLatch
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringPC
.
createOffer
(
sdpLatch
new
MediaConstraints
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
offerSdp
=
sdpLatch
.
getSdp
(
)
;
assertEquals
(
offerSdp
.
type
SessionDescription
.
Type
.
OFFER
)
;
assertFalse
(
offerSdp
.
description
.
isEmpty
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringExpectations
.
expectSignalingChange
(
SignalingState
.
HAVE_REMOTE_OFFER
)
;
answeringPC
.
setRemoteDescription
(
sdpLatch
offerSdp
)
;
assertEquals
(
PeerConnection
.
SignalingState
.
STABLE
offeringPC
.
signalingState
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringPC
.
createAnswer
(
sdpLatch
new
MediaConstraints
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
answerSdp
=
sdpLatch
.
getSdp
(
)
;
assertEquals
(
answerSdp
.
type
SessionDescription
.
Type
.
ANSWER
)
;
assertFalse
(
answerSdp
.
description
.
isEmpty
(
)
)
;
offeringExpectations
.
expectIceCandidates
(
2
)
;
answeringExpectations
.
expectIceCandidates
(
2
)
;
offeringExpectations
.
expectIceGatheringChange
(
IceGatheringState
.
COMPLETE
)
;
answeringExpectations
.
expectIceGatheringChange
(
IceGatheringState
.
COMPLETE
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringExpectations
.
expectSignalingChange
(
SignalingState
.
STABLE
)
;
answeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTING
)
;
answeringPC
.
setLocalDescription
(
sdpLatch
answerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
HAVE_LOCAL_OFFER
)
;
offeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTING
)
;
offeringPC
.
setLocalDescription
(
sdpLatch
offerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
STABLE
)
;
offeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
offeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
offeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
offeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
offeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTED
)
;
answeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
answeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
answeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
answeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
answeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTED
)
;
offeringPC
.
setRemoteDescription
(
sdpLatch
answerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
assertEquals
(
offeringPC
.
getLocalDescription
(
)
.
type
offerSdp
.
type
)
;
assertEquals
(
offeringPC
.
getRemoteDescription
(
)
.
type
answerSdp
.
type
)
;
assertEquals
(
answeringPC
.
getLocalDescription
(
)
.
type
answerSdp
.
type
)
;
assertEquals
(
answeringPC
.
getRemoteDescription
(
)
.
type
offerSdp
.
type
)
;
offeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
OPEN
)
;
answeringExpectations
.
expectDataChannel
(
"
offeringDC
"
)
;
answeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
OPEN
)
;
for
(
IceCandidate
candidate
:
offeringExpectations
.
getAtLeastOneIceCandidate
(
)
)
{
answeringPC
.
addIceCandidate
(
candidate
)
;
}
for
(
IceCandidate
candidate
:
answeringExpectations
.
getAtLeastOneIceCandidate
(
)
)
{
offeringPC
.
addIceCandidate
(
candidate
)
;
}
assertTrue
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
assertTrue
(
answeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
assertEquals
(
PeerConnection
.
SignalingState
.
STABLE
offeringPC
.
signalingState
(
)
)
;
assertEquals
(
PeerConnection
.
SignalingState
.
STABLE
answeringPC
.
signalingState
(
)
)
;
answeringExpectations
.
expectMessage
(
ByteBuffer
.
wrap
(
"
hello
!
"
.
getBytes
(
Charset
.
forName
(
"
UTF
-
8
"
)
)
)
false
)
;
DataChannel
.
Buffer
buffer
=
new
DataChannel
.
Buffer
(
ByteBuffer
.
wrap
(
"
hello
!
"
.
getBytes
(
Charset
.
forName
(
"
UTF
-
8
"
)
)
)
false
)
;
assertTrue
(
offeringExpectations
.
dataChannel
.
send
(
buffer
)
)
;
assertTrue
(
answeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
ByteBuffer
expectedBinaryMessage
=
ByteBuffer
.
allocateDirect
(
5
)
;
for
(
byte
i
=
1
;
i
<
6
;
+
+
i
)
{
expectedBinaryMessage
.
put
(
i
)
;
}
expectedBinaryMessage
.
flip
(
)
;
offeringExpectations
.
expectMessage
(
expectedBinaryMessage
true
)
;
assertTrue
(
answeringExpectations
.
dataChannel
.
send
(
new
DataChannel
.
Buffer
(
ByteBuffer
.
wrap
(
new
byte
[
]
{
1
2
3
4
5
}
)
true
)
)
)
;
assertTrue
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
offeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
CLOSING
)
;
answeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
CLOSING
)
;
offeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
CLOSED
)
;
answeringExpectations
.
expectStateChange
(
DataChannel
.
State
.
CLOSED
)
;
answeringExpectations
.
dataChannel
.
close
(
)
;
offeringExpectations
.
dataChannel
.
close
(
)
;
assertTrue
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
assertTrue
(
answeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
shutdownPC
(
offeringPC
offeringExpectations
)
;
offeringPC
=
null
;
shutdownPC
(
answeringPC
answeringExpectations
)
;
answeringPC
=
null
;
factory
.
dispose
(
)
;
System
.
gc
(
)
;
}
Test
SmallTest
public
void
testSurfaceIceCandidatesWhenIceTransportTypeChanged
(
)
throws
Exception
{
PeerConnectionFactory
.
Options
options
=
new
PeerConnectionFactory
.
Options
(
)
;
options
.
networkIgnoreMask
=
0
;
PeerConnectionFactory
factory
=
PeerConnectionFactory
.
builder
(
)
.
setOptions
(
options
)
.
createPeerConnectionFactory
(
)
;
PeerConnection
.
RTCConfiguration
rtcConfig
=
new
PeerConnection
.
RTCConfiguration
(
Arrays
.
asList
(
)
)
;
rtcConfig
.
iceTransportsType
=
PeerConnection
.
IceTransportsType
.
NONE
;
rtcConfig
.
continualGatheringPolicy
=
PeerConnection
.
ContinualGatheringPolicy
.
GATHER_CONTINUALLY
;
rtcConfig
.
surfaceIceCandidatesOnIceTransportTypeChanged
=
true
;
ObserverExpectations
offeringExpectations
=
new
ObserverExpectations
(
"
PCTest
:
offerer
"
)
;
PeerConnection
offeringPC
=
factory
.
createPeerConnection
(
rtcConfig
offeringExpectations
)
;
assertNotNull
(
offeringPC
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
DataChannel
offeringDC
=
offeringPC
.
createDataChannel
(
"
offeringDC
"
new
DataChannel
.
Init
(
)
)
;
assertEquals
(
"
offeringDC
"
offeringDC
.
label
(
)
)
;
offeringExpectations
.
setDataChannel
(
offeringDC
)
;
SdpObserverLatch
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringPC
.
createOffer
(
sdpLatch
new
MediaConstraints
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
offerSdp
=
sdpLatch
.
getSdp
(
)
;
assertEquals
(
offerSdp
.
type
SessionDescription
.
Type
.
OFFER
)
;
assertFalse
(
offerSdp
.
description
.
isEmpty
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
HAVE_LOCAL_OFFER
)
;
offeringPC
.
setLocalDescription
(
sdpLatch
offerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
assertEquals
(
offeringPC
.
getLocalDescription
(
)
.
type
offerSdp
.
type
)
;
assertTrue
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
offeringExpectations
.
expectIceCandidates
(
1
)
;
assertFalse
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
SHORT_TIMEOUT_SECONDS
)
)
;
rtcConfig
.
iceTransportsType
=
PeerConnection
.
IceTransportsType
.
ALL
;
offeringPC
.
setConfiguration
(
rtcConfig
)
;
assertTrue
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
}
Test
MediumTest
public
void
testTrackRemovalAndAddition
(
)
throws
Exception
{
PeerConnectionFactory
.
Options
options
=
new
PeerConnectionFactory
.
Options
(
)
;
options
.
networkIgnoreMask
=
0
;
PeerConnectionFactory
factory
=
PeerConnectionFactory
.
builder
(
)
.
setOptions
(
options
)
.
setVideoEncoderFactory
(
new
SoftwareVideoEncoderFactory
(
)
)
.
setVideoDecoderFactory
(
new
SoftwareVideoDecoderFactory
(
)
)
.
createPeerConnectionFactory
(
)
;
List
<
PeerConnection
.
IceServer
>
iceServers
=
new
ArrayList
<
>
(
)
;
iceServers
.
add
(
PeerConnection
.
IceServer
.
builder
(
"
stun
:
stun
.
l
.
google
.
com
:
19302
"
)
.
createIceServer
(
)
)
;
PeerConnection
.
RTCConfiguration
rtcConfig
=
new
PeerConnection
.
RTCConfiguration
(
iceServers
)
;
ObserverExpectations
offeringExpectations
=
new
ObserverExpectations
(
"
PCTest
:
offerer
"
)
;
PeerConnection
offeringPC
=
factory
.
createPeerConnection
(
rtcConfig
offeringExpectations
)
;
assertNotNull
(
offeringPC
)
;
ObserverExpectations
answeringExpectations
=
new
ObserverExpectations
(
"
PCTest
:
answerer
"
)
;
PeerConnection
answeringPC
=
factory
.
createPeerConnection
(
rtcConfig
answeringExpectations
)
;
assertNotNull
(
answeringPC
)
;
final
CameraEnumerator
enumerator
=
new
Camera1Enumerator
(
false
)
;
final
VideoCapturer
videoCapturer
=
enumerator
.
createCapturer
(
enumerator
.
getDeviceNames
(
)
[
0
]
null
)
;
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
"
null
)
;
final
VideoSource
videoSource
=
factory
.
createVideoSource
(
false
)
;
videoCapturer
.
initialize
(
surfaceTextureHelper
InstrumentationRegistry
.
getTargetContext
(
)
videoSource
.
getCapturerObserver
(
)
)
;
videoCapturer
.
startCapture
(
640
480
30
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
WeakReference
<
MediaStream
>
oLMS
=
addTracksToPC
(
factory
offeringPC
videoSource
"
offeredMediaStream
"
"
offeredVideoTrack
"
"
offeredAudioTrack
"
new
ExpectedResolutionSetter
(
answeringExpectations
)
)
;
offeringExpectations
.
expectAddTrack
(
2
)
;
answeringExpectations
.
expectAddTrack
(
2
)
;
SdpObserverLatch
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringPC
.
createOffer
(
sdpLatch
new
MediaConstraints
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
offerSdp
=
sdpLatch
.
getSdp
(
)
;
assertEquals
(
offerSdp
.
type
SessionDescription
.
Type
.
OFFER
)
;
assertFalse
(
offerSdp
.
description
.
isEmpty
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
HAVE_LOCAL_OFFER
)
;
offeringExpectations
.
expectIceCandidates
(
2
)
;
offeringExpectations
.
expectIceGatheringChange
(
IceGatheringState
.
COMPLETE
)
;
offeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTING
)
;
offeringPC
.
setLocalDescription
(
sdpLatch
offerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringExpectations
.
expectSignalingChange
(
SignalingState
.
HAVE_REMOTE_OFFER
)
;
answeringExpectations
.
expectAddStream
(
"
offeredMediaStream
"
)
;
answeringPC
.
setRemoteDescription
(
sdpLatch
offerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
answeringExpectations
.
expectRenegotiationNeeded
(
)
;
WeakReference
<
MediaStream
>
aLMS
=
addTracksToPC
(
factory
answeringPC
videoSource
"
answeredMediaStream
"
"
answeredVideoTrack
"
"
answeredAudioTrack
"
new
ExpectedResolutionSetter
(
offeringExpectations
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringPC
.
createAnswer
(
sdpLatch
new
MediaConstraints
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
answerSdp
=
sdpLatch
.
getSdp
(
)
;
assertEquals
(
answerSdp
.
type
SessionDescription
.
Type
.
ANSWER
)
;
assertFalse
(
answerSdp
.
description
.
isEmpty
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringExpectations
.
expectSignalingChange
(
SignalingState
.
STABLE
)
;
answeringExpectations
.
expectIceCandidates
(
2
)
;
answeringExpectations
.
expectIceGatheringChange
(
IceGatheringState
.
COMPLETE
)
;
answeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTING
)
;
answeringPC
.
setLocalDescription
(
sdpLatch
answerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
STABLE
)
;
offeringExpectations
.
expectAddStream
(
"
answeredMediaStream
"
)
;
offeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
offeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
offeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
offeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
offeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTED
)
;
answeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
answeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
answeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CHECKING
)
;
answeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CONNECTED
)
;
answeringExpectations
.
expectConnectionChange
(
PeerConnectionState
.
CONNECTED
)
;
offeringPC
.
setRemoteDescription
(
sdpLatch
answerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
for
(
IceCandidate
candidate
:
offeringExpectations
.
getAtLeastOneIceCandidate
(
)
)
{
answeringPC
.
addIceCandidate
(
candidate
)
;
}
for
(
IceCandidate
candidate
:
answeringExpectations
.
getAtLeastOneIceCandidate
(
)
)
{
offeringPC
.
addIceCandidate
(
candidate
)
;
}
offeringExpectations
.
expectFramesDelivered
(
1
)
;
answeringExpectations
.
expectFramesDelivered
(
1
)
;
assertTrue
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
assertTrue
(
answeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
assertEquals
(
PeerConnection
.
SignalingState
.
STABLE
offeringPC
.
signalingState
(
)
)
;
assertEquals
(
PeerConnection
.
SignalingState
.
STABLE
answeringPC
.
signalingState
(
)
)
;
VideoTrack
offererVideoTrack
=
oLMS
.
get
(
)
.
videoTracks
.
get
(
0
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
oLMS
.
get
(
)
.
removeTrack
(
offererVideoTrack
)
;
negotiate
(
offeringPC
offeringExpectations
answeringPC
answeringExpectations
)
;
MediaStream
aRMS
=
answeringExpectations
.
gotRemoteStreams
.
iterator
(
)
.
next
(
)
;
assertTrue
(
aRMS
.
videoTracks
.
isEmpty
(
)
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
oLMS
.
get
(
)
.
addTrack
(
offererVideoTrack
)
;
answeringExpectations
.
expectAddTrack
(
1
)
;
offeringExpectations
.
expectAddTrack
(
0
)
;
negotiate
(
offeringPC
offeringExpectations
answeringPC
answeringExpectations
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
oLMS
.
get
(
)
.
removeTrack
(
offererVideoTrack
)
;
AudioTrack
offererAudioTrack
=
oLMS
.
get
(
)
.
audioTracks
.
get
(
0
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
oLMS
.
get
(
)
.
removeTrack
(
offererAudioTrack
)
;
answeringExpectations
.
expectRemoveStream
(
"
offeredMediaStream
"
)
;
negotiate
(
offeringPC
offeringExpectations
answeringPC
answeringExpectations
)
;
assertTrue
(
answeringExpectations
.
gotRemoteStreams
.
isEmpty
(
)
)
;
shutdownPC
(
offeringPC
offeringExpectations
)
;
offeringPC
=
null
;
shutdownPC
(
answeringPC
answeringExpectations
)
;
answeringPC
=
null
;
offererVideoTrack
.
dispose
(
)
;
offererAudioTrack
.
dispose
(
)
;
videoCapturer
.
stopCapture
(
)
;
videoCapturer
.
dispose
(
)
;
videoSource
.
dispose
(
)
;
surfaceTextureHelper
.
dispose
(
)
;
factory
.
dispose
(
)
;
System
.
gc
(
)
;
}
Test
MediumTest
public
void
testRemoteStreamUpdatedWhenTracksAddedOrRemoved
(
)
throws
Exception
{
PeerConnectionFactory
factory
=
PeerConnectionFactory
.
builder
(
)
.
setVideoEncoderFactory
(
new
SoftwareVideoEncoderFactory
(
)
)
.
setVideoDecoderFactory
(
new
SoftwareVideoDecoderFactory
(
)
)
.
createPeerConnectionFactory
(
)
;
List
<
PeerConnection
.
IceServer
>
iceServers
=
new
ArrayList
<
>
(
)
;
MediaConstraints
offerConstraints
=
new
MediaConstraints
(
)
;
offerConstraints
.
mandatory
.
add
(
new
MediaConstraints
.
KeyValuePair
(
"
OfferToReceiveAudio
"
"
true
"
)
)
;
offerConstraints
.
mandatory
.
add
(
new
MediaConstraints
.
KeyValuePair
(
"
OfferToReceiveVideo
"
"
true
"
)
)
;
ObserverExpectations
offeringExpectations
=
new
ObserverExpectations
(
"
offerer
"
)
;
PeerConnection
offeringPC
=
factory
.
createPeerConnection
(
iceServers
offeringExpectations
)
;
assertNotNull
(
offeringPC
)
;
ObserverExpectations
expectations
=
new
ObserverExpectations
(
"
PC
under
test
"
)
;
PeerConnection
pcUnderTest
=
factory
.
createPeerConnection
(
iceServers
expectations
)
;
assertNotNull
(
pcUnderTest
)
;
MediaStream
localStream
=
factory
.
createLocalMediaStream
(
"
stream
"
)
;
AudioTrack
localAudioTrack
=
factory
.
createAudioTrack
(
"
audio
"
factory
.
createAudioSource
(
new
MediaConstraints
(
)
)
)
;
localStream
.
addTrack
(
localAudioTrack
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
offeringPC
.
addStream
(
localStream
)
;
SdpObserverLatch
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringPC
.
createOffer
(
sdpLatch
offerConstraints
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
offerSdp
=
sdpLatch
.
getSdp
(
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
expectations
.
expectSignalingChange
(
SignalingState
.
HAVE_REMOTE_OFFER
)
;
expectations
.
expectAddStream
(
"
stream
"
)
;
pcUnderTest
.
setRemoteDescription
(
sdpLatch
offerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
MediaStream
remoteStream
=
expectations
.
gotRemoteStreams
.
iterator
(
)
.
next
(
)
;
assertEquals
(
remoteStream
.
audioTracks
.
size
(
)
1
)
;
assertEquals
(
remoteStream
.
videoTracks
.
size
(
)
0
)
;
final
CameraEnumerator
enumerator
=
new
Camera1Enumerator
(
false
)
;
final
VideoCapturer
videoCapturer
=
enumerator
.
createCapturer
(
enumerator
.
getDeviceNames
(
)
[
0
]
null
)
;
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
"
null
)
;
final
VideoSource
videoSource
=
factory
.
createVideoSource
(
false
)
;
videoCapturer
.
initialize
(
surfaceTextureHelper
InstrumentationRegistry
.
getTargetContext
(
)
videoSource
.
getCapturerObserver
(
)
)
;
VideoTrack
videoTrack
=
factory
.
createVideoTrack
(
"
video
"
videoSource
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
localStream
.
addTrack
(
videoTrack
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringPC
.
createOffer
(
sdpLatch
offerConstraints
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
offerSdp
=
sdpLatch
.
getSdp
(
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
pcUnderTest
.
setRemoteDescription
(
sdpLatch
offerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertEquals
(
remoteStream
.
audioTracks
.
size
(
)
1
)
;
assertEquals
(
remoteStream
.
videoTracks
.
size
(
)
1
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
localStream
.
removeTrack
(
localAudioTrack
)
;
localAudioTrack
.
dispose
(
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringPC
.
createOffer
(
sdpLatch
offerConstraints
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
offerSdp
=
sdpLatch
.
getSdp
(
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
pcUnderTest
.
setRemoteDescription
(
sdpLatch
offerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertEquals
(
remoteStream
.
audioTracks
.
size
(
)
0
)
;
assertEquals
(
remoteStream
.
videoTracks
.
size
(
)
1
)
;
offeringExpectations
.
expectIceConnectionChange
(
IceConnectionState
.
CLOSED
)
;
offeringExpectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CLOSED
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
CLOSED
)
;
offeringExpectations
.
expectIceGatheringChange
(
IceGatheringState
.
COMPLETE
)
;
offeringPC
.
dispose
(
)
;
expectations
.
expectIceConnectionChange
(
IceConnectionState
.
CLOSED
)
;
expectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CLOSED
)
;
expectations
.
expectSignalingChange
(
SignalingState
.
CLOSED
)
;
expectations
.
expectIceGatheringChange
(
IceGatheringState
.
COMPLETE
)
;
pcUnderTest
.
dispose
(
)
;
videoCapturer
.
dispose
(
)
;
videoSource
.
dispose
(
)
;
surfaceTextureHelper
.
dispose
(
)
;
factory
.
dispose
(
)
;
}
Test
SmallTest
public
void
testRollback
(
)
throws
Exception
{
PeerConnectionFactory
factory
=
PeerConnectionFactory
.
builder
(
)
.
createPeerConnectionFactory
(
)
;
PeerConnection
.
RTCConfiguration
config
=
new
PeerConnection
.
RTCConfiguration
(
Arrays
.
asList
(
)
)
;
config
.
sdpSemantics
=
PeerConnection
.
SdpSemantics
.
UNIFIED_PLAN
;
ObserverExpectations
offeringExpectations
=
new
ObserverExpectations
(
"
PCTest
:
offerer
"
)
;
PeerConnection
pc
=
factory
.
createPeerConnection
(
config
offeringExpectations
)
;
SdpObserverLatch
sdpLatch
=
new
SdpObserverLatch
(
)
;
pc
.
createOffer
(
sdpLatch
new
MediaConstraints
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
offer
=
sdpLatch
.
getSdp
(
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
HAVE_LOCAL_OFFER
)
;
pc
.
setLocalDescription
(
sdpLatch
offer
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
rollback
=
new
SessionDescription
(
SessionDescription
.
Type
.
ROLLBACK
"
"
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
STABLE
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
offeringExpectations
.
expectRenegotiationNeeded
(
)
;
pc
.
setLocalDescription
(
sdpLatch
rollback
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertTrue
(
offeringExpectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
}
private
static
void
negotiate
(
PeerConnection
offeringPC
ObserverExpectations
offeringExpectations
PeerConnection
answeringPC
ObserverExpectations
answeringExpectations
)
{
SdpObserverLatch
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringPC
.
createOffer
(
sdpLatch
new
MediaConstraints
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
offerSdp
=
sdpLatch
.
getSdp
(
)
;
assertEquals
(
offerSdp
.
type
SessionDescription
.
Type
.
OFFER
)
;
assertFalse
(
offerSdp
.
description
.
isEmpty
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
HAVE_LOCAL_OFFER
)
;
offeringPC
.
setLocalDescription
(
sdpLatch
offerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringExpectations
.
expectSignalingChange
(
SignalingState
.
HAVE_REMOTE_OFFER
)
;
answeringPC
.
setRemoteDescription
(
sdpLatch
offerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringPC
.
createAnswer
(
sdpLatch
new
MediaConstraints
(
)
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
SessionDescription
answerSdp
=
sdpLatch
.
getSdp
(
)
;
assertEquals
(
answerSdp
.
type
SessionDescription
.
Type
.
ANSWER
)
;
assertFalse
(
answerSdp
.
description
.
isEmpty
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
answeringExpectations
.
expectSignalingChange
(
SignalingState
.
STABLE
)
;
answeringPC
.
setLocalDescription
(
sdpLatch
answerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
sdpLatch
=
new
SdpObserverLatch
(
)
;
offeringExpectations
.
expectSignalingChange
(
SignalingState
.
STABLE
)
;
offeringPC
.
setRemoteDescription
(
sdpLatch
answerSdp
)
;
assertTrue
(
sdpLatch
.
await
(
)
)
;
assertNull
(
sdpLatch
.
getSdp
(
)
)
;
}
SuppressWarnings
(
"
deprecation
"
)
private
static
void
shutdownPC
(
PeerConnection
pc
ObserverExpectations
expectations
)
{
if
(
expectations
.
dataChannel
!
=
null
)
{
expectations
.
dataChannel
.
unregisterObserver
(
)
;
expectations
.
dataChannel
.
dispose
(
)
;
}
expectations
.
expectOldStatsCallback
(
)
;
assertTrue
(
pc
.
getStats
(
expectations
null
)
)
;
assertTrue
(
expectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
expectations
.
expectNewStatsCallback
(
)
;
pc
.
getStats
(
expectations
)
;
assertTrue
(
expectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
expectations
.
expectIceConnectionChange
(
IceConnectionState
.
CLOSED
)
;
expectations
.
expectStandardizedIceConnectionChange
(
IceConnectionState
.
CLOSED
)
;
expectations
.
expectConnectionChange
(
PeerConnectionState
.
CLOSED
)
;
expectations
.
expectSignalingChange
(
SignalingState
.
CLOSED
)
;
pc
.
close
(
)
;
assertTrue
(
expectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
expectations
.
expectOldStatsCallback
(
)
;
assertTrue
(
pc
.
getStats
(
expectations
null
)
)
;
assertTrue
(
expectations
.
waitForAllExpectationsToBeSatisfied
(
DEFAULT_TIMEOUT_SECONDS
)
)
;
Logging
.
d
(
TAG
"
FYI
stats
:
"
)
;
int
reportIndex
=
-
1
;
for
(
StatsReport
[
]
reports
:
expectations
.
takeStatsReports
(
)
)
{
Logging
.
d
(
TAG
"
Report
#
"
+
(
+
+
reportIndex
)
)
;
for
(
int
i
=
0
;
i
<
reports
.
length
;
+
+
i
)
{
Logging
.
d
(
TAG
"
"
+
reports
[
i
]
.
toString
(
)
)
;
}
}
assertEquals
(
1
reportIndex
)
;
Logging
.
d
(
TAG
"
End
stats
.
"
)
;
pc
.
dispose
(
)
;
}
}
