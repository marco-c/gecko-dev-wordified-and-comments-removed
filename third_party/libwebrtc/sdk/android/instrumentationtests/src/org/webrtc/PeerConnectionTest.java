package
org
.
webrtc
;
import
static
java
.
util
.
Collections
.
singletonList
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
junit
.
Assert
.
assertFalse
;
import
static
org
.
junit
.
Assert
.
assertNotNull
;
import
static
org
.
junit
.
Assert
.
assertNull
;
import
static
org
.
junit
.
Assert
.
assertTrue
;
import
static
org
.
mockito
.
Mockito
.
mock
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
androidx
.
test
.
filters
.
SmallTest
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
List
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
webrtc
.
PeerConnection
.
TlsCertPolicy
;
public
class
PeerConnectionTest
{
Before
public
void
setUp
(
)
{
PeerConnectionFactory
.
initialize
(
PeerConnectionFactory
.
InitializationOptions
.
builder
(
InstrumentationRegistry
.
getTargetContext
(
)
)
.
setNativeLibraryName
(
TestConstants
.
NATIVE_LIBRARY
)
.
createInitializationOptions
(
)
)
;
}
Test
SmallTest
public
void
testIceServerChanged
(
)
throws
Exception
{
PeerConnection
.
IceServer
iceServer1
=
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword
"
)
.
setTlsCertPolicy
(
TlsCertPolicy
.
TLS_CERT_POLICY_SECURE
)
.
setHostname
(
"
fakeHostname
"
)
.
setTlsAlpnProtocols
(
singletonList
(
"
fakeTlsAlpnProtocol
"
)
)
.
setTlsEllipticCurves
(
singletonList
(
"
fakeTlsEllipticCurve
"
)
)
.
createIceServer
(
)
;
PeerConnection
.
IceServer
iceServer2
=
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword
"
)
.
setTlsCertPolicy
(
TlsCertPolicy
.
TLS_CERT_POLICY_SECURE
)
.
setHostname
(
"
fakeHostname
"
)
.
setTlsAlpnProtocols
(
singletonList
(
"
fakeTlsAlpnProtocol
"
)
)
.
setTlsEllipticCurves
(
singletonList
(
"
fakeTlsEllipticCurve
"
)
)
.
createIceServer
(
)
;
PeerConnection
.
IceServer
iceServer3
=
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example2
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword
"
)
.
setTlsCertPolicy
(
TlsCertPolicy
.
TLS_CERT_POLICY_SECURE
)
.
setHostname
(
"
fakeHostname
"
)
.
setTlsAlpnProtocols
(
singletonList
(
"
fakeTlsAlpnProtocol
"
)
)
.
setTlsEllipticCurves
(
singletonList
(
"
fakeTlsEllipticCurve
"
)
)
.
createIceServer
(
)
;
PeerConnection
.
IceServer
iceServer4
=
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername2
"
)
.
setPassword
(
"
fakePassword
"
)
.
setTlsCertPolicy
(
TlsCertPolicy
.
TLS_CERT_POLICY_SECURE
)
.
setHostname
(
"
fakeHostname
"
)
.
setTlsAlpnProtocols
(
singletonList
(
"
fakeTlsAlpnProtocol
"
)
)
.
setTlsEllipticCurves
(
singletonList
(
"
fakeTlsEllipticCurve
"
)
)
.
createIceServer
(
)
;
PeerConnection
.
IceServer
iceServer5
=
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword2
"
)
.
setTlsCertPolicy
(
TlsCertPolicy
.
TLS_CERT_POLICY_SECURE
)
.
setHostname
(
"
fakeHostname
"
)
.
setTlsAlpnProtocols
(
singletonList
(
"
fakeTlsAlpnProtocol
"
)
)
.
setTlsEllipticCurves
(
singletonList
(
"
fakeTlsEllipticCurve
"
)
)
.
createIceServer
(
)
;
PeerConnection
.
IceServer
iceServer6
=
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword
"
)
.
setTlsCertPolicy
(
TlsCertPolicy
.
TLS_CERT_POLICY_INSECURE_NO_CHECK
)
.
setHostname
(
"
fakeHostname
"
)
.
setTlsAlpnProtocols
(
singletonList
(
"
fakeTlsAlpnProtocol
"
)
)
.
setTlsEllipticCurves
(
singletonList
(
"
fakeTlsEllipticCurve
"
)
)
.
createIceServer
(
)
;
PeerConnection
.
IceServer
iceServer7
=
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword
"
)
.
setTlsCertPolicy
(
TlsCertPolicy
.
TLS_CERT_POLICY_INSECURE_NO_CHECK
)
.
setHostname
(
"
fakeHostname2
"
)
.
setTlsAlpnProtocols
(
singletonList
(
"
fakeTlsAlpnProtocol
"
)
)
.
setTlsEllipticCurves
(
singletonList
(
"
fakeTlsEllipticCurve
"
)
)
.
createIceServer
(
)
;
PeerConnection
.
IceServer
iceServer8
=
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword
"
)
.
setTlsCertPolicy
(
TlsCertPolicy
.
TLS_CERT_POLICY_INSECURE_NO_CHECK
)
.
setHostname
(
"
fakeHostname
"
)
.
setTlsAlpnProtocols
(
singletonList
(
"
fakeTlsAlpnProtocol2
"
)
)
.
setTlsEllipticCurves
(
singletonList
(
"
fakeTlsEllipticCurve
"
)
)
.
createIceServer
(
)
;
PeerConnection
.
IceServer
iceServer9
=
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword
"
)
.
setTlsCertPolicy
(
TlsCertPolicy
.
TLS_CERT_POLICY_INSECURE_NO_CHECK
)
.
setHostname
(
"
fakeHostname
"
)
.
setTlsAlpnProtocols
(
singletonList
(
"
fakeTlsAlpnProtocol
"
)
)
.
setTlsEllipticCurves
(
singletonList
(
"
fakeTlsEllipticCurve2
"
)
)
.
createIceServer
(
)
;
assertTrue
(
iceServer1
.
equals
(
iceServer2
)
)
;
assertFalse
(
iceServer1
.
equals
(
iceServer3
)
)
;
assertFalse
(
iceServer1
.
equals
(
iceServer4
)
)
;
assertFalse
(
iceServer1
.
equals
(
iceServer5
)
)
;
assertFalse
(
iceServer1
.
equals
(
iceServer6
)
)
;
assertFalse
(
iceServer1
.
equals
(
iceServer7
)
)
;
assertFalse
(
iceServer1
.
equals
(
iceServer8
)
)
;
assertFalse
(
iceServer1
.
equals
(
iceServer9
)
)
;
}
Test
SmallTest
public
void
testCreationWithConfig
(
)
throws
Exception
{
PeerConnectionFactory
factory
=
PeerConnectionFactory
.
builder
(
)
.
createPeerConnectionFactory
(
)
;
List
<
PeerConnection
.
IceServer
>
iceServers
=
Arrays
.
asList
(
PeerConnection
.
IceServer
.
builder
(
"
stun
:
stun
.
l
.
google
.
com
:
19302
"
)
.
createIceServer
(
)
PeerConnection
.
IceServer
.
builder
(
"
turn
:
fake
.
example
.
com
"
)
.
setUsername
(
"
fakeUsername
"
)
.
setPassword
(
"
fakePassword
"
)
.
createIceServer
(
)
)
;
PeerConnection
.
RTCConfiguration
config
=
new
PeerConnection
.
RTCConfiguration
(
iceServers
)
;
config
.
sdpSemantics
=
PeerConnection
.
SdpSemantics
.
UNIFIED_PLAN
;
config
.
continualGatheringPolicy
=
PeerConnection
.
ContinualGatheringPolicy
.
GATHER_CONTINUALLY
;
PeerConnection
offeringPC
=
factory
.
createPeerConnection
(
config
mock
(
PeerConnection
.
Observer
.
class
)
)
;
assertNotNull
(
offeringPC
)
;
}
Test
SmallTest
public
void
testCreationWithCertificate
(
)
throws
Exception
{
PeerConnectionFactory
factory
=
PeerConnectionFactory
.
builder
(
)
.
createPeerConnectionFactory
(
)
;
PeerConnection
.
RTCConfiguration
config
=
new
PeerConnection
.
RTCConfiguration
(
Arrays
.
asList
(
)
)
;
config
.
sdpSemantics
=
PeerConnection
.
SdpSemantics
.
UNIFIED_PLAN
;
RtcCertificatePem
originalCert
=
RtcCertificatePem
.
generateCertificate
(
)
;
config
.
certificate
=
originalCert
;
PeerConnection
offeringPC
=
factory
.
createPeerConnection
(
config
mock
(
PeerConnection
.
Observer
.
class
)
)
;
RtcCertificatePem
restoredCert
=
offeringPC
.
getCertificate
(
)
;
assertEquals
(
originalCert
.
privateKey
restoredCert
.
privateKey
)
;
assertEquals
(
originalCert
.
certificate
restoredCert
.
certificate
)
;
}
Test
SmallTest
public
void
testCreationWithCryptoOptions
(
)
throws
Exception
{
PeerConnectionFactory
factory
=
PeerConnectionFactory
.
builder
(
)
.
createPeerConnectionFactory
(
)
;
PeerConnection
.
RTCConfiguration
config
=
new
PeerConnection
.
RTCConfiguration
(
Arrays
.
asList
(
)
)
;
config
.
sdpSemantics
=
PeerConnection
.
SdpSemantics
.
UNIFIED_PLAN
;
assertNull
(
config
.
cryptoOptions
)
;
CryptoOptions
cryptoOptions
=
CryptoOptions
.
builder
(
)
.
setEnableGcmCryptoSuites
(
true
)
.
setEnableAes128Sha1_32CryptoCipher
(
true
)
.
setEnableEncryptedRtpHeaderExtensions
(
true
)
.
setRequireFrameEncryption
(
true
)
.
createCryptoOptions
(
)
;
config
.
cryptoOptions
=
cryptoOptions
;
PeerConnection
offeringPC
=
factory
.
createPeerConnection
(
config
mock
(
PeerConnection
.
Observer
.
class
)
)
;
assertNotNull
(
offeringPC
)
;
}
}
