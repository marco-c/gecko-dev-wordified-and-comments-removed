package
org
.
webrtc
;
import
static
org
.
junit
.
Assert
.
assertArrayEquals
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
webrtc
.
RendererCommon
.
ScalingType
.
SCALE_ASPECT_BALANCED
;
import
static
org
.
webrtc
.
RendererCommon
.
ScalingType
.
SCALE_ASPECT_FILL
;
import
static
org
.
webrtc
.
RendererCommon
.
ScalingType
.
SCALE_ASPECT_FIT
;
import
static
org
.
webrtc
.
RendererCommon
.
getDisplaySize
;
import
static
org
.
webrtc
.
RendererCommon
.
getLayoutMatrix
;
import
android
.
graphics
.
Point
;
import
androidx
.
test
.
filters
.
SmallTest
;
import
org
.
junit
.
Test
;
public
class
RendererCommonTest
{
Test
SmallTest
public
void
testDisplaySizeNoFrame
(
)
{
assertEquals
(
new
Point
(
0
0
)
getDisplaySize
(
SCALE_ASPECT_FIT
0
.
0f
0
0
)
)
;
assertEquals
(
new
Point
(
0
0
)
getDisplaySize
(
SCALE_ASPECT_FILL
0
.
0f
0
0
)
)
;
assertEquals
(
new
Point
(
0
0
)
getDisplaySize
(
SCALE_ASPECT_BALANCED
0
.
0f
0
0
)
)
;
}
Test
SmallTest
public
void
testDisplaySizeDegenerateAspectRatio
(
)
{
assertEquals
(
new
Point
(
1280
720
)
getDisplaySize
(
SCALE_ASPECT_FIT
0
.
0f
1280
720
)
)
;
assertEquals
(
new
Point
(
1280
720
)
getDisplaySize
(
SCALE_ASPECT_FILL
0
.
0f
1280
720
)
)
;
assertEquals
(
new
Point
(
1280
720
)
getDisplaySize
(
SCALE_ASPECT_BALANCED
0
.
0f
1280
720
)
)
;
}
Test
SmallTest
public
void
testZeroDisplaySize
(
)
{
assertEquals
(
new
Point
(
0
0
)
getDisplaySize
(
SCALE_ASPECT_FIT
16
.
0f
/
9
0
0
)
)
;
assertEquals
(
new
Point
(
0
0
)
getDisplaySize
(
SCALE_ASPECT_FILL
16
.
0f
/
9
0
0
)
)
;
assertEquals
(
new
Point
(
0
0
)
getDisplaySize
(
SCALE_ASPECT_BALANCED
16
.
0f
/
9
0
0
)
)
;
}
Test
SmallTest
public
void
testDisplaySizePerfectFit
(
)
{
assertEquals
(
new
Point
(
1280
720
)
getDisplaySize
(
SCALE_ASPECT_FIT
16
.
0f
/
9
1280
720
)
)
;
assertEquals
(
new
Point
(
1280
720
)
getDisplaySize
(
SCALE_ASPECT_FILL
16
.
0f
/
9
1280
720
)
)
;
assertEquals
(
new
Point
(
1280
720
)
getDisplaySize
(
SCALE_ASPECT_BALANCED
16
.
0f
/
9
1280
720
)
)
;
assertEquals
(
new
Point
(
720
1280
)
getDisplaySize
(
SCALE_ASPECT_FIT
9
.
0f
/
16
720
1280
)
)
;
assertEquals
(
new
Point
(
720
1280
)
getDisplaySize
(
SCALE_ASPECT_FILL
9
.
0f
/
16
720
1280
)
)
;
assertEquals
(
new
Point
(
720
1280
)
getDisplaySize
(
SCALE_ASPECT_BALANCED
9
.
0f
/
16
720
1280
)
)
;
}
Test
SmallTest
public
void
testLandscapeVideoInPortraitDisplay
(
)
{
assertEquals
(
new
Point
(
720
405
)
getDisplaySize
(
SCALE_ASPECT_FIT
16
.
0f
/
9
720
1280
)
)
;
assertEquals
(
new
Point
(
720
1280
)
getDisplaySize
(
SCALE_ASPECT_FILL
16
.
0f
/
9
720
1280
)
)
;
assertEquals
(
new
Point
(
720
720
)
getDisplaySize
(
SCALE_ASPECT_BALANCED
16
.
0f
/
9
720
1280
)
)
;
}
Test
SmallTest
public
void
testPortraitVideoInLandscapeDisplay
(
)
{
assertEquals
(
new
Point
(
405
720
)
getDisplaySize
(
SCALE_ASPECT_FIT
9
.
0f
/
16
1280
720
)
)
;
assertEquals
(
new
Point
(
1280
720
)
getDisplaySize
(
SCALE_ASPECT_FILL
9
.
0f
/
16
1280
720
)
)
;
assertEquals
(
new
Point
(
720
720
)
getDisplaySize
(
SCALE_ASPECT_BALANCED
9
.
0f
/
16
1280
720
)
)
;
}
Test
SmallTest
public
void
testFourToThreeVideoInSixteenToNineDisplay
(
)
{
assertEquals
(
new
Point
(
960
720
)
getDisplaySize
(
SCALE_ASPECT_FIT
4
.
0f
/
3
1280
720
)
)
;
assertEquals
(
new
Point
(
1280
720
)
getDisplaySize
(
SCALE_ASPECT_FILL
4
.
0f
/
3
1280
720
)
)
;
assertEquals
(
new
Point
(
1280
720
)
getDisplaySize
(
SCALE_ASPECT_BALANCED
4
.
0f
/
3
1280
720
)
)
;
}
private
static
double
[
]
round
(
float
[
]
array
)
{
assertEquals
(
16
array
.
length
)
;
final
double
[
]
doubleArray
=
new
double
[
16
]
;
for
(
int
i
=
0
;
i
<
16
;
+
+
i
)
{
doubleArray
[
i
]
=
Math
.
round
(
100
*
array
[
i
]
)
/
100
.
0
;
}
return
doubleArray
;
}
Test
SmallTest
public
void
testLayoutMatrixDefault
(
)
{
final
float
layoutMatrix
[
]
=
getLayoutMatrix
(
false
1
.
0f
1
.
0f
)
;
assertArrayEquals
(
new
double
[
]
{
1
0
0
0
0
1
0
0
0
0
1
0
0
0
0
1
}
round
(
layoutMatrix
)
0
.
0
)
;
}
Test
SmallTest
public
void
testLayoutMatrixMirror
(
)
{
final
float
layoutMatrix
[
]
=
getLayoutMatrix
(
true
1
.
0f
1
.
0f
)
;
assertArrayEquals
(
new
double
[
]
{
-
1
0
0
0
0
1
0
0
0
0
1
0
1
0
0
1
}
round
(
layoutMatrix
)
0
.
0
)
;
}
Test
SmallTest
public
void
testLayoutMatrixScale
(
)
{
final
float
layoutMatrix
[
]
=
getLayoutMatrix
(
false
2
.
0f
1
.
0f
)
;
assertArrayEquals
(
new
double
[
]
{
0
.
5
0
0
0
0
1
0
0
0
0
1
0
0
.
25
0
0
1
}
round
(
layoutMatrix
)
0
.
0
)
;
}
}
