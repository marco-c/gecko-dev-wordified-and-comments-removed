#
import
"
RTCVideoFrame
.
h
"
#
import
"
RTCI420Buffer
.
h
"
#
import
"
RTCVideoFrameBuffer
.
h
"
implementation
RTC_OBJC_TYPE
(
RTCVideoFrame
)
{
RTCVideoRotation
_rotation
;
int64_t
_timeStampNs
;
}
synthesize
buffer
=
_buffer
;
synthesize
timeStamp
;
-
(
int
)
width
{
return
_buffer
.
width
;
}
-
(
int
)
height
{
return
_buffer
.
height
;
}
-
(
RTCVideoRotation
)
rotation
{
return
_rotation
;
}
-
(
int64_t
)
timeStampNs
{
return
_timeStampNs
;
}
-
(
RTC_OBJC_TYPE
(
RTCVideoFrame
)
*
)
newI420VideoFrame
{
return
[
[
RTC_OBJC_TYPE
(
RTCVideoFrame
)
alloc
]
initWithBuffer
:
[
_buffer
toI420
]
rotation
:
_rotation
timeStampNs
:
_timeStampNs
]
;
}
-
(
instancetype
)
initWithPixelBuffer
:
(
CVPixelBufferRef
)
pixelBuffer
rotation
:
(
RTCVideoRotation
)
rotation
timeStampNs
:
(
int64_t
)
timeStampNs
{
return
nil
;
}
-
(
instancetype
)
initWithPixelBuffer
:
(
CVPixelBufferRef
)
pixelBuffer
scaledWidth
:
(
int
)
scaledWidth
scaledHeight
:
(
int
)
scaledHeight
cropWidth
:
(
int
)
cropWidth
cropHeight
:
(
int
)
cropHeight
cropX
:
(
int
)
cropX
cropY
:
(
int
)
cropY
rotation
:
(
RTCVideoRotation
)
rotation
timeStampNs
:
(
int64_t
)
timeStampNs
{
return
nil
;
}
-
(
instancetype
)
initWithBuffer
:
(
id
<
RTC_OBJC_TYPE
(
RTCVideoFrameBuffer
)
>
)
buffer
rotation
:
(
RTCVideoRotation
)
rotation
timeStampNs
:
(
int64_t
)
timeStampNs
{
if
(
self
=
[
super
init
]
)
{
_buffer
=
buffer
;
_rotation
=
rotation
;
_timeStampNs
=
timeStampNs
;
}
return
self
;
}
end
