#
import
"
RTCCameraPreviewView
.
h
"
#
import
<
AVFoundation
/
AVFoundation
.
h
>
#
import
<
UIKit
/
UIKit
.
h
>
#
import
"
RTCDispatcher
+
Private
.
h
"
implementation
RTC_OBJC_TYPE
(
RTCCameraPreviewView
)
synthesize
captureSession
=
_captureSession
;
+
(
Class
)
layerClass
{
return
[
AVCaptureVideoPreviewLayer
class
]
;
}
-
(
instancetype
)
initWithFrame
:
(
CGRect
)
aRect
{
self
=
[
super
initWithFrame
:
aRect
]
;
if
(
self
)
{
[
self
addOrientationObserver
]
;
}
return
self
;
}
-
(
instancetype
)
initWithCoder
:
(
NSCoder
*
)
aDecoder
{
self
=
[
super
initWithCoder
:
aDecoder
]
;
if
(
self
)
{
[
self
addOrientationObserver
]
;
}
return
self
;
}
-
(
void
)
dealloc
{
[
self
removeOrientationObserver
]
;
}
-
(
void
)
setCaptureSession
:
(
AVCaptureSession
*
)
captureSession
{
if
(
_captureSession
=
=
captureSession
)
{
return
;
}
_captureSession
=
captureSession
;
[
RTC_OBJC_TYPE
(
RTCDispatcher
)
dispatchAsyncOnType
:
RTCDispatcherTypeMain
block
:
^
{
AVCaptureVideoPreviewLayer
*
previewLayer
=
[
self
previewLayer
]
;
[
RTC_OBJC_TYPE
(
RTCDispatcher
)
dispatchAsyncOnType
:
RTCDispatcherTypeCaptureSession
block
:
^
{
previewLayer
.
session
=
captureSession
;
[
RTC_OBJC_TYPE
(
RTCDispatcher
)
dispatchAsyncOnType
:
RTCDispatcherTypeMain
block
:
^
{
[
self
setCorrectVideoOrientation
]
;
}
]
;
}
]
;
}
]
;
}
-
(
void
)
layoutSubviews
{
[
super
layoutSubviews
]
;
[
self
setCorrectVideoOrientation
]
;
}
-
(
void
)
orientationChanged
:
(
NSNotification
*
)
notification
{
[
self
setCorrectVideoOrientation
]
;
}
-
(
void
)
setCorrectVideoOrientation
{
UIDeviceOrientation
deviceOrientation
=
[
UIDevice
currentDevice
]
.
orientation
;
AVCaptureVideoPreviewLayer
*
previewLayer
=
[
self
previewLayer
]
;
if
(
previewLayer
.
connection
.
isVideoOrientationSupported
)
{
if
(
deviceOrientation
=
=
UIDeviceOrientationPortraitUpsideDown
)
{
previewLayer
.
connection
.
videoOrientation
=
AVCaptureVideoOrientationPortraitUpsideDown
;
}
else
if
(
deviceOrientation
=
=
UIDeviceOrientationLandscapeRight
)
{
previewLayer
.
connection
.
videoOrientation
=
AVCaptureVideoOrientationLandscapeRight
;
}
else
if
(
deviceOrientation
=
=
UIDeviceOrientationLandscapeLeft
)
{
previewLayer
.
connection
.
videoOrientation
=
AVCaptureVideoOrientationLandscapeLeft
;
}
else
if
(
deviceOrientation
=
=
UIDeviceOrientationPortrait
)
{
previewLayer
.
connection
.
videoOrientation
=
AVCaptureVideoOrientationPortrait
;
}
}
}
#
pragma
mark
-
Private
-
(
void
)
addOrientationObserver
{
[
[
NSNotificationCenter
defaultCenter
]
addObserver
:
self
selector
:
selector
(
orientationChanged
:
)
name
:
UIDeviceOrientationDidChangeNotification
object
:
nil
]
;
}
-
(
void
)
removeOrientationObserver
{
[
[
NSNotificationCenter
defaultCenter
]
removeObserver
:
self
name
:
UIDeviceOrientationDidChangeNotification
object
:
nil
]
;
}
-
(
AVCaptureVideoPreviewLayer
*
)
previewLayer
{
return
(
AVCaptureVideoPreviewLayer
*
)
self
.
layer
;
}
end
