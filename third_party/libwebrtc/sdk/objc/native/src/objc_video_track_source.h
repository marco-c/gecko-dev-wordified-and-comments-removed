#
ifndef
SDK_OBJC_CLASSES_VIDEO_OBJC_VIDEO_TRACK_SOURCE_H_
#
define
SDK_OBJC_CLASSES_VIDEO_OBJC_VIDEO_TRACK_SOURCE_H_
#
import
"
base
/
RTCVideoCapturer
.
h
"
#
include
"
base
/
RTCMacros
.
h
"
#
include
"
media
/
base
/
adapted_video_track_source
.
h
"
#
include
"
rtc_base
/
timestamp_aligner
.
h
"
RTC_FWD_DECL_OBJC_CLASS
(
RTC_OBJC_TYPE
(
RTCVideoFrame
)
)
;
interface
RTCObjCVideoSourceAdapter
:
NSObject
<
RTC_OBJC_TYPE
(
RTCVideoCapturerDelegate
)
>
end
namespace
webrtc
{
class
ObjCVideoTrackSource
:
public
rtc
:
:
AdaptedVideoTrackSource
{
public
:
ObjCVideoTrackSource
(
)
;
explicit
ObjCVideoTrackSource
(
bool
is_screencast
)
;
explicit
ObjCVideoTrackSource
(
RTCObjCVideoSourceAdapter
*
adapter
)
;
bool
is_screencast
(
)
const
override
;
std
:
:
optional
<
bool
>
needs_denoising
(
)
const
override
;
SourceState
state
(
)
const
override
;
bool
remote
(
)
const
override
;
void
OnCapturedFrame
(
RTC_OBJC_TYPE
(
RTCVideoFrame
)
*
frame
)
;
void
OnOutputFormatRequest
(
int
width
int
height
int
fps
)
;
private
:
rtc
:
:
VideoBroadcaster
broadcaster_
;
rtc
:
:
TimestampAligner
timestamp_aligner_
;
RTCObjCVideoSourceAdapter
*
adapter_
;
bool
is_screencast_
;
}
;
}
#
endif
