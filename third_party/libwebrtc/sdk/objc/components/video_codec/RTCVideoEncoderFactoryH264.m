#
import
"
RTCVideoEncoderFactoryH264
.
h
"
#
import
"
RTCH264ProfileLevelId
.
h
"
#
import
"
RTCVideoEncoderH264
.
h
"
implementation
RTC_OBJC_TYPE
(
RTCVideoEncoderFactoryH264
)
-
(
NSArray
<
RTC_OBJC_TYPE
(
RTCVideoCodecInfo
)
*
>
*
)
supportedCodecs
{
NSMutableArray
<
RTC_OBJC_TYPE
(
RTCVideoCodecInfo
)
*
>
*
codecs
=
[
NSMutableArray
array
]
;
NSString
*
codecName
=
kRTCVideoCodecH264Name
;
NSDictionary
<
NSString
*
NSString
*
>
*
constrainedHighParams
=
{
"
profile
-
level
-
id
"
:
kRTCMaxSupportedH264ProfileLevelConstrainedHigh
"
level
-
asymmetry
-
allowed
"
:
"
1
"
"
packetization
-
mode
"
:
"
1
"
}
;
RTC_OBJC_TYPE
(
RTCVideoCodecInfo
)
*
constrainedHighInfo
=
[
[
RTC_OBJC_TYPE
(
RTCVideoCodecInfo
)
alloc
]
initWithName
:
codecName
parameters
:
constrainedHighParams
]
;
[
codecs
addObject
:
constrainedHighInfo
]
;
NSDictionary
<
NSString
*
NSString
*
>
*
constrainedBaselineParams
=
{
"
profile
-
level
-
id
"
:
kRTCMaxSupportedH264ProfileLevelConstrainedBaseline
"
level
-
asymmetry
-
allowed
"
:
"
1
"
"
packetization
-
mode
"
:
"
1
"
}
;
RTC_OBJC_TYPE
(
RTCVideoCodecInfo
)
*
constrainedBaselineInfo
=
[
[
RTC_OBJC_TYPE
(
RTCVideoCodecInfo
)
alloc
]
initWithName
:
codecName
parameters
:
constrainedBaselineParams
]
;
[
codecs
addObject
:
constrainedBaselineInfo
]
;
return
[
codecs
copy
]
;
}
-
(
id
<
RTC_OBJC_TYPE
(
RTCVideoEncoder
)
>
)
createEncoder
:
(
RTC_OBJC_TYPE
(
RTCVideoCodecInfo
)
*
)
info
{
return
[
[
RTC_OBJC_TYPE
(
RTCVideoEncoderH264
)
alloc
]
initWithCodecInfo
:
info
]
;
}
end
