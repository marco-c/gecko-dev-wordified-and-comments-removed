#
import
"
RTCAudioSessionConfiguration
.
h
"
#
import
"
RTCAudioSession
.
h
"
#
import
"
helpers
/
RTCDispatcher
.
h
"
#
import
"
helpers
/
UIDevice
+
RTCDevice
.
h
"
const
int
kRTCAudioSessionPreferredNumberOfChannels
=
1
;
const
double
kRTCAudioSessionHighPerformanceSampleRate
=
48000
.
0
;
const
double
kRTCAudioSessionHighPerformanceIOBufferDuration
=
0
.
02
;
static
RTC_OBJC_TYPE
(
RTCAudioSessionConfiguration
)
*
gWebRTCConfiguration
=
nil
;
implementation
RTC_OBJC_TYPE
(
RTCAudioSessionConfiguration
)
synthesize
category
=
_category
;
synthesize
categoryOptions
=
_categoryOptions
;
synthesize
mode
=
_mode
;
synthesize
sampleRate
=
_sampleRate
;
synthesize
ioBufferDuration
=
_ioBufferDuration
;
synthesize
inputNumberOfChannels
=
_inputNumberOfChannels
;
synthesize
outputNumberOfChannels
=
_outputNumberOfChannels
;
-
(
instancetype
)
init
{
self
=
[
super
init
]
;
if
(
self
)
{
_category
=
AVAudioSessionCategoryPlayAndRecord
;
_categoryOptions
=
AVAudioSessionCategoryOptionAllowBluetooth
;
_mode
=
AVAudioSessionModeVoiceChat
;
_sampleRate
=
kRTCAudioSessionHighPerformanceSampleRate
;
_ioBufferDuration
=
kRTCAudioSessionHighPerformanceIOBufferDuration
;
_inputNumberOfChannels
=
kRTCAudioSessionPreferredNumberOfChannels
;
_outputNumberOfChannels
=
kRTCAudioSessionPreferredNumberOfChannels
;
}
return
self
;
}
+
(
void
)
initialize
{
gWebRTCConfiguration
=
[
[
self
alloc
]
init
]
;
}
+
(
instancetype
)
currentConfiguration
{
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
session
=
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
sharedInstance
]
;
RTC_OBJC_TYPE
(
RTCAudioSessionConfiguration
)
*
config
=
[
[
RTC_OBJC_TYPE
(
RTCAudioSessionConfiguration
)
alloc
]
init
]
;
config
.
category
=
session
.
category
;
config
.
categoryOptions
=
session
.
categoryOptions
;
config
.
mode
=
session
.
mode
;
config
.
sampleRate
=
session
.
sampleRate
;
config
.
ioBufferDuration
=
session
.
IOBufferDuration
;
config
.
inputNumberOfChannels
=
session
.
inputNumberOfChannels
;
config
.
outputNumberOfChannels
=
session
.
outputNumberOfChannels
;
return
config
;
}
+
(
instancetype
)
webRTCConfiguration
{
synchronized
(
self
)
{
return
(
RTC_OBJC_TYPE
(
RTCAudioSessionConfiguration
)
*
)
gWebRTCConfiguration
;
}
}
+
(
void
)
setWebRTCConfiguration
:
(
RTC_OBJC_TYPE
(
RTCAudioSessionConfiguration
)
*
)
configuration
{
synchronized
(
self
)
{
gWebRTCConfiguration
=
configuration
;
}
}
end
