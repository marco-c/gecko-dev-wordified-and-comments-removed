#
import
"
RTCNativeAudioSessionDelegateAdapter
.
h
"
#
include
"
sdk
/
objc
/
native
/
src
/
audio
/
audio_session_observer
.
h
"
#
import
"
base
/
RTCLogging
.
h
"
implementation
RTCNativeAudioSessionDelegateAdapter
{
webrtc
:
:
AudioSessionObserver
*
_observer
;
}
-
(
instancetype
)
initWithObserver
:
(
webrtc
:
:
AudioSessionObserver
*
)
observer
{
RTC_DCHECK
(
observer
)
;
self
=
[
super
init
]
;
if
(
self
)
{
_observer
=
observer
;
}
return
self
;
}
#
pragma
mark
-
RTC_OBJC_TYPE
(
RTCAudioSessionDelegate
)
-
(
void
)
audioSessionDidBeginInterruption
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
{
_observer
-
>
OnInterruptionBegin
(
)
;
}
-
(
void
)
audioSessionDidEndInterruption
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
shouldResumeSession
:
(
BOOL
)
shouldResumeSession
{
_observer
-
>
OnInterruptionEnd
(
)
;
}
-
(
void
)
audioSessionDidChangeRoute
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
reason
:
(
AVAudioSessionRouteChangeReason
)
reason
previousRoute
:
(
AVAudioSessionRouteDescription
*
)
previousRoute
{
switch
(
reason
)
{
case
AVAudioSessionRouteChangeReasonUnknown
:
case
AVAudioSessionRouteChangeReasonNewDeviceAvailable
:
case
AVAudioSessionRouteChangeReasonOldDeviceUnavailable
:
case
AVAudioSessionRouteChangeReasonCategoryChange
:
case
AVAudioSessionRouteChangeReasonOverride
:
case
AVAudioSessionRouteChangeReasonWakeFromSleep
:
case
AVAudioSessionRouteChangeReasonNoSuitableRouteForCategory
:
_observer
-
>
OnValidRouteChange
(
)
;
break
;
case
AVAudioSessionRouteChangeReasonRouteConfigurationChange
:
RTCLog
(
"
Ignoring
RouteConfigurationChange
"
)
;
break
;
}
}
-
(
void
)
audioSessionMediaServerTerminated
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
{
}
-
(
void
)
audioSessionMediaServerReset
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
{
}
-
(
void
)
audioSession
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
didChangeCanPlayOrRecord
:
(
BOOL
)
canPlayOrRecord
{
_observer
-
>
OnCanPlayOrRecordChange
(
canPlayOrRecord
)
;
}
-
(
void
)
audioSessionDidStartPlayOrRecord
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
{
}
-
(
void
)
audioSessionDidStopPlayOrRecord
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
{
}
-
(
void
)
audioSession
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
audioSession
didChangeOutputVolume
:
(
float
)
outputVolume
{
_observer
-
>
OnChangedOutputVolume
(
)
;
}
end
