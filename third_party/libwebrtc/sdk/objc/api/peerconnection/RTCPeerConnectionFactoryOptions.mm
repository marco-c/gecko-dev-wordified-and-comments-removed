#
import
"
RTCPeerConnectionFactoryOptions
+
Private
.
h
"
#
include
"
rtc_base
/
network_constants
.
h
"
namespace
{
void
setNetworkBit
(
webrtc
:
:
PeerConnectionFactoryInterface
:
:
Options
*
options
webrtc
:
:
AdapterType
type
bool
ignore
)
{
if
(
ignore
)
{
options
-
>
network_ignore_mask
|
=
type
;
}
else
{
options
-
>
network_ignore_mask
&
=
~
type
;
}
}
}
implementation
RTC_OBJC_TYPE
(
RTCPeerConnectionFactoryOptions
)
synthesize
disableEncryption
=
_disableEncryption
;
synthesize
disableNetworkMonitor
=
_disableNetworkMonitor
;
synthesize
ignoreLoopbackNetworkAdapter
=
_ignoreLoopbackNetworkAdapter
;
synthesize
ignoreVPNNetworkAdapter
=
_ignoreVPNNetworkAdapter
;
synthesize
ignoreCellularNetworkAdapter
=
_ignoreCellularNetworkAdapter
;
synthesize
ignoreWiFiNetworkAdapter
=
_ignoreWiFiNetworkAdapter
;
synthesize
ignoreEthernetNetworkAdapter
=
_ignoreEthernetNetworkAdapter
;
-
(
instancetype
)
init
{
return
[
super
init
]
;
}
-
(
webrtc
:
:
PeerConnectionFactoryInterface
:
:
Options
)
nativeOptions
{
webrtc
:
:
PeerConnectionFactoryInterface
:
:
Options
options
;
options
.
disable_encryption
=
self
.
disableEncryption
;
options
.
disable_network_monitor
=
self
.
disableNetworkMonitor
;
setNetworkBit
(
&
options
webrtc
:
:
ADAPTER_TYPE_LOOPBACK
self
.
ignoreLoopbackNetworkAdapter
)
;
setNetworkBit
(
&
options
webrtc
:
:
ADAPTER_TYPE_VPN
self
.
ignoreVPNNetworkAdapter
)
;
setNetworkBit
(
&
options
webrtc
:
:
ADAPTER_TYPE_CELLULAR
self
.
ignoreCellularNetworkAdapter
)
;
setNetworkBit
(
&
options
webrtc
:
:
ADAPTER_TYPE_WIFI
self
.
ignoreWiFiNetworkAdapter
)
;
setNetworkBit
(
&
options
webrtc
:
:
ADAPTER_TYPE_ETHERNET
self
.
ignoreEthernetNetworkAdapter
)
;
return
options
;
}
end
