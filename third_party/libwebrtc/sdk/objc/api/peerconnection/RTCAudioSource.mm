#
import
"
RTCAudioSource
+
Private
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
implementation
RTC_OBJC_TYPE
(
RTCAudioSource
)
{
}
synthesize
volume
=
_volume
;
synthesize
nativeAudioSource
=
_nativeAudioSource
;
-
(
instancetype
)
initWithFactory
:
(
RTC_OBJC_TYPE
(
RTCPeerConnectionFactory
)
*
)
factory
nativeAudioSource
:
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioSourceInterface
>
)
nativeAudioSource
{
RTC_DCHECK
(
factory
)
;
RTC_DCHECK
(
nativeAudioSource
)
;
if
(
self
=
[
super
initWithFactory
:
factory
nativeMediaSource
:
nativeAudioSource
type
:
RTCMediaSourceTypeAudio
]
)
{
_nativeAudioSource
=
nativeAudioSource
;
}
return
self
;
}
-
(
instancetype
)
initWithFactory
:
(
RTC_OBJC_TYPE
(
RTCPeerConnectionFactory
)
*
)
factory
nativeMediaSource
:
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
MediaSourceInterface
>
)
nativeMediaSource
type
:
(
RTCMediaSourceType
)
type
{
RTC_DCHECK_NOTREACHED
(
)
;
return
nil
;
}
-
(
NSString
*
)
description
{
NSString
*
stateString
=
[
[
self
class
]
stringForState
:
self
.
state
]
;
return
[
NSString
stringWithFormat
:
"
RTC_OBJC_TYPE
(
RTCAudioSource
)
(
%
p
)
:
%
"
self
stateString
]
;
}
-
(
void
)
setVolume
:
(
double
)
volume
{
_volume
=
volume
;
_nativeAudioSource
-
>
SetVolume
(
volume
)
;
}
end
