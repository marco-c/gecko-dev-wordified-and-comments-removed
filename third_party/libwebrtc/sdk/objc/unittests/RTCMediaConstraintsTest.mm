#
import
<
Foundation
/
Foundation
.
h
>
#
import
<
XCTest
/
XCTest
.
h
>
#
include
<
memory
>
#
include
"
rtc_base
/
gunit
.
h
"
#
import
"
api
/
peerconnection
/
RTCMediaConstraints
+
Private
.
h
"
#
import
"
api
/
peerconnection
/
RTCMediaConstraints
.
h
"
#
import
"
helpers
/
NSString
+
RTCStdString
.
h
"
interface
RTCMediaConstraintsTests
:
XCTestCase
end
implementation
RTCMediaConstraintsTests
-
(
void
)
testMediaConstraints
{
NSDictionary
*
mandatory
=
{
"
key1
"
:
"
value1
"
"
key2
"
:
"
value2
"
}
;
NSDictionary
*
optional
=
{
"
key3
"
:
"
value3
"
"
key4
"
:
"
value4
"
}
;
RTC_OBJC_TYPE
(
RTCMediaConstraints
)
*
constraints
=
[
[
RTC_OBJC_TYPE
(
RTCMediaConstraints
)
alloc
]
initWithMandatoryConstraints
:
mandatory
optionalConstraints
:
optional
]
;
std
:
:
unique_ptr
<
webrtc
:
:
MediaConstraints
>
nativeConstraints
=
[
constraints
nativeConstraints
]
;
webrtc
:
:
MediaConstraints
:
:
Constraints
nativeMandatory
=
nativeConstraints
-
>
GetMandatory
(
)
;
[
self
expectConstraints
:
mandatory
inNativeConstraints
:
nativeMandatory
]
;
webrtc
:
:
MediaConstraints
:
:
Constraints
nativeOptional
=
nativeConstraints
-
>
GetOptional
(
)
;
[
self
expectConstraints
:
optional
inNativeConstraints
:
nativeOptional
]
;
}
-
(
void
)
expectConstraints
:
(
NSDictionary
*
)
constraints
inNativeConstraints
:
(
webrtc
:
:
MediaConstraints
:
:
Constraints
)
nativeConstraints
{
EXPECT_EQ
(
constraints
.
count
nativeConstraints
.
size
(
)
)
;
for
(
NSString
*
key
in
constraints
)
{
NSString
*
value
=
[
constraints
objectForKey
:
key
]
;
std
:
:
string
nativeValue
;
bool
found
=
nativeConstraints
.
FindFirst
(
key
.
stdString
&
nativeValue
)
;
EXPECT_TRUE
(
found
)
;
EXPECT_EQ
(
value
.
stdString
nativeValue
)
;
}
}
end
