#
import
<
Foundation
/
Foundation
.
h
>
#
import
<
OCMock
/
OCMock
.
h
>
#
include
"
rtc_base
/
gunit
.
h
"
static
const
int
kFormatWidth
=
789
;
static
const
int
kFormatHeight
=
987
;
static
const
int
kFramerate
=
30
;
static
cricket
:
:
VideoFormat
expectedFormat
=
cricket
:
:
VideoFormat
(
kFormatWidth
kFormatHeight
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
kFramerate
)
cricket
:
:
FOURCC_NV12
)
;
interface
AVCaptureDeviceFormatMock
:
NSObject
property
(
nonatomic
assign
)
CMVideoFormatDescriptionRef
format
;
property
(
nonatomic
strong
)
OCMockObject
*
rangeMock
;
-
(
instancetype
)
initWithMediaSubtype
:
(
FourCharCode
)
subtype
minFps
:
(
float
)
minFps
maxFps
:
(
float
)
maxFps
;
+
(
instancetype
)
validFormat
;
+
(
instancetype
)
invalidFpsFormat
;
+
(
instancetype
)
invalidMediaSubtypeFormat
;
end
implementation
AVCaptureDeviceFormatMock
synthesize
format
=
_format
;
synthesize
rangeMock
=
_rangeMock
;
-
(
instancetype
)
initWithMediaSubtype
:
(
FourCharCode
)
subtype
minFps
:
(
float
)
minFps
maxFps
:
(
float
)
maxFps
{
if
(
self
=
[
super
init
]
)
{
CMVideoFormatDescriptionCreate
(
nil
subtype
kFormatWidth
kFormatHeight
nil
&
_format
)
;
_rangeMock
=
[
OCMockObject
mockForClass
:
[
AVFrameRateRange
class
]
]
;
[
[
[
_rangeMock
stub
]
andReturnValue
:
(
minFps
)
]
minFrameRate
]
;
[
[
[
_rangeMock
stub
]
andReturnValue
:
(
maxFps
)
]
maxFrameRate
]
;
}
return
self
;
}
+
(
instancetype
)
validFormat
{
AVCaptureDeviceFormatMock
*
instance
=
[
[
AVCaptureDeviceFormatMock
alloc
]
initWithMediaSubtype
:
kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange
minFps
:
0
.
0
maxFps
:
30
.
0
]
;
return
instance
;
}
+
(
instancetype
)
invalidFpsFormat
{
AVCaptureDeviceFormatMock
*
instance
=
[
[
AVCaptureDeviceFormatMock
alloc
]
initWithMediaSubtype
:
kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange
minFps
:
0
.
0
maxFps
:
22
.
0
]
;
return
instance
;
}
+
(
instancetype
)
invalidMediaSubtypeFormat
{
AVCaptureDeviceFormatMock
*
instance
=
[
[
AVCaptureDeviceFormatMock
alloc
]
initWithMediaSubtype
:
kCVPixelFormatType_420YpCbCr8Planar
minFps
:
0
.
0
maxFps
:
60
.
0
]
;
return
instance
;
}
-
(
void
)
dealloc
{
if
(
_format
!
=
nil
)
{
CFRelease
(
_format
)
;
_format
=
nil
;
}
}
-
(
CMVideoFormatDescriptionRef
)
formatDescription
{
return
self
.
format
;
}
-
(
NSArray
*
)
videoSupportedFrameRateRanges
{
return
[
self
.
rangeMock
]
;
}
end
TEST
(
AVFormatMapperTest
SuportedCricketFormatsWithInvalidFramerateFormats
)
{
id
mockDevice
=
OCMClassMock
(
[
AVCaptureDevice
class
]
)
;
AVCaptureDeviceFormatMock
*
mock
=
[
AVCaptureDeviceFormatMock
invalidFpsFormat
]
;
OCMStub
(
[
mockDevice
formats
]
)
.
andReturn
(
[
mock
]
)
;
std
:
:
set
<
cricket
:
:
VideoFormat
>
result
=
webrtc
:
:
GetSupportedVideoFormatsForDevice
(
mockDevice
)
;
EXPECT_TRUE
(
result
.
empty
(
)
)
;
}
TEST
(
AVFormatMapperTest
SuportedCricketFormatsWithInvalidFormats
)
{
id
mockDevice
=
OCMClassMock
(
[
AVCaptureDevice
class
]
)
;
AVCaptureDeviceFormatMock
*
mock
=
[
AVCaptureDeviceFormatMock
invalidMediaSubtypeFormat
]
;
OCMStub
(
[
mockDevice
formats
]
)
.
andReturn
(
[
mock
]
)
;
std
:
:
set
<
cricket
:
:
VideoFormat
>
result
=
webrtc
:
:
GetSupportedVideoFormatsForDevice
(
mockDevice
)
;
EXPECT_TRUE
(
result
.
empty
(
)
)
;
}
TEST
(
AVFormatMapperTest
SuportedCricketFormats
)
{
id
mockDevice
=
OCMClassMock
(
[
AVCaptureDevice
class
]
)
;
AVCaptureDeviceFormatMock
*
mock
=
[
AVCaptureDeviceFormatMock
validFormat
]
;
OCMStub
(
[
mockDevice
formats
]
)
.
andReturn
(
[
mock
]
)
;
std
:
:
set
<
cricket
:
:
VideoFormat
>
result
=
webrtc
:
:
GetSupportedVideoFormatsForDevice
(
mockDevice
)
;
EXPECT_EQ
(
1u
result
.
size
(
)
)
;
EXPECT_EQ
(
expectedFormat
*
result
.
begin
(
)
)
;
}
TEST
(
AVFormatMapperTest
MediaSubtypePreference
)
{
id
mockDevice
=
OCMClassMock
(
[
AVCaptureDevice
class
]
)
;
AVCaptureDeviceFormatMock
*
mockOne
=
[
[
AVCaptureDeviceFormatMock
alloc
]
initWithMediaSubtype
:
kCVPixelFormatType_420YpCbCr8BiPlanarFullRange
minFps
:
0
.
0
maxFps
:
30
.
0
]
;
AVCaptureDeviceFormatMock
*
mockTwo
=
[
[
AVCaptureDeviceFormatMock
alloc
]
initWithMediaSubtype
:
kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange
minFps
:
0
.
0
maxFps
:
30
.
0
]
;
OCMStub
(
[
mockDevice
lockForConfiguration
:
[
OCMArg
setTo
:
nil
]
]
)
.
andReturn
(
YES
)
;
OCMStub
(
[
mockDevice
unlockForConfiguration
]
)
;
NSArray
*
array
=
[
mockOne
mockTwo
]
;
OCMStub
(
[
mockDevice
formats
]
)
.
andReturn
(
array
)
;
OCMExpect
(
[
mockDevice
setActiveFormat
:
(
AVCaptureDeviceFormat
*
)
mockTwo
]
)
;
OCMExpect
(
[
mockDevice
setActiveVideoMinFrameDuration
:
CMTimeMake
(
1
kFramerate
)
]
)
;
bool
resultFormat
=
webrtc
:
:
SetFormatForCaptureDevice
(
mockDevice
nil
expectedFormat
)
;
EXPECT_TRUE
(
resultFormat
)
;
[
mockDevice
verify
]
;
}
TEST
(
AVFormatMapperTest
SetFormatWhenDeviceCannotLock
)
{
id
mockDevice
=
OCMClassMock
(
[
AVCaptureDevice
class
]
)
;
[
[
[
mockDevice
stub
]
andReturnValue
:
(
NO
)
]
lockForConfiguration
:
[
OCMArg
setTo
:
nil
]
]
;
[
[
[
mockDevice
stub
]
andReturn
:
[
]
]
formats
]
;
bool
resultFormat
=
webrtc
:
:
SetFormatForCaptureDevice
(
mockDevice
nil
cricket
:
:
VideoFormat
(
)
)
;
EXPECT_FALSE
(
resultFormat
)
;
}
TEST
(
AVFormatMapperTest
SetFormatWhenFormatIsIncompatible
)
{
id
mockDevice
=
OCMClassMock
(
[
AVCaptureDevice
class
]
)
;
OCMStub
(
[
mockDevice
formats
]
)
.
andReturn
(
[
]
)
;
OCMStub
(
[
mockDevice
lockForConfiguration
:
[
OCMArg
setTo
:
nil
]
]
)
.
andReturn
(
YES
)
;
NSException
*
testException
=
[
NSException
exceptionWithName
:
"
Test
exception
"
reason
:
"
Raised
from
unit
tests
"
userInfo
:
nil
]
;
OCMStub
(
[
mockDevice
setActiveFormat
:
[
OCMArg
any
]
]
)
.
andThrow
(
testException
)
;
OCMExpect
(
[
mockDevice
unlockForConfiguration
]
)
;
bool
resultFormat
=
webrtc
:
:
SetFormatForCaptureDevice
(
mockDevice
nil
cricket
:
:
VideoFormat
(
)
)
;
EXPECT_FALSE
(
resultFormat
)
;
try
{
[
mockDevice
verify
]
;
}
catch
(
NSException
*
exception
)
{
if
(
[
exception
.
reason
isEqual
:
testException
.
reason
]
)
{
EXPECT_TRUE
(
[
exception
.
reason
isEqualToString
:
exception
.
reason
]
)
;
}
}
}
