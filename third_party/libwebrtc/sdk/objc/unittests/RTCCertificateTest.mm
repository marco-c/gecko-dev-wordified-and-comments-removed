#
import
<
Foundation
/
Foundation
.
h
>
#
import
<
XCTest
/
XCTest
.
h
>
#
include
<
vector
>
#
include
"
rtc_base
/
gunit
.
h
"
#
import
"
api
/
peerconnection
/
RTCConfiguration
+
Private
.
h
"
#
import
"
api
/
peerconnection
/
RTCConfiguration
.
h
"
#
import
"
api
/
peerconnection
/
RTCIceServer
.
h
"
#
import
"
api
/
peerconnection
/
RTCMediaConstraints
.
h
"
#
import
"
api
/
peerconnection
/
RTCPeerConnection
.
h
"
#
import
"
api
/
peerconnection
/
RTCPeerConnectionFactory
.
h
"
#
import
"
helpers
/
NSString
+
RTCStdString
.
h
"
interface
RTCCertificateTest
:
XCTestCase
end
implementation
RTCCertificateTest
-
(
void
)
testCertificateIsUsedInConfig
{
RTC_OBJC_TYPE
(
RTCConfiguration
)
*
originalConfig
=
[
[
RTC_OBJC_TYPE
(
RTCConfiguration
)
alloc
]
init
]
;
NSArray
*
urlStrings
=
[
"
stun
:
stun1
.
example
.
net
"
]
;
RTC_OBJC_TYPE
(
RTCIceServer
)
*
server
=
[
[
RTC_OBJC_TYPE
(
RTCIceServer
)
alloc
]
initWithURLStrings
:
urlStrings
]
;
originalConfig
.
iceServers
=
[
server
]
;
RTC_OBJC_TYPE
(
RTCCertificate
)
*
originalCertificate
=
[
RTC_OBJC_TYPE
(
RTCCertificate
)
generateCertificateWithParams
:
{
"
expires
"
:
100000
"
name
"
:
"
RSASSA
-
PKCS1
-
v1_5
"
}
]
;
originalConfig
.
certificate
=
originalCertificate
;
RTC_OBJC_TYPE
(
RTCMediaConstraints
)
*
contraints
=
[
[
RTC_OBJC_TYPE
(
RTCMediaConstraints
)
alloc
]
initWithMandatoryConstraints
:
{
}
optionalConstraints
:
nil
]
;
RTC_OBJC_TYPE
(
RTCPeerConnectionFactory
)
*
factory
=
[
[
RTC_OBJC_TYPE
(
RTCPeerConnectionFactory
)
alloc
]
init
]
;
RTC_OBJC_TYPE
(
RTCPeerConnection
)
*
peerConnection
=
[
factory
peerConnectionWithConfiguration
:
originalConfig
constraints
:
contraints
delegate
:
nil
]
;
RTC_OBJC_TYPE
(
RTCConfiguration
)
*
retrievedConfig
=
peerConnection
.
configuration
;
std
:
:
string
originalPrivateKeyField
=
[
[
originalCertificate
private_key
]
UTF8String
]
;
std
:
:
string
originalCertificateField
=
[
[
originalCertificate
certificate
]
UTF8String
]
;
RTC_OBJC_TYPE
(
RTCCertificate
)
*
retrievedCertificate
=
retrievedConfig
.
certificate
;
std
:
:
string
retrievedPrivateKeyField
=
[
[
retrievedCertificate
private_key
]
UTF8String
]
;
std
:
:
string
retrievedCertificateField
=
[
[
retrievedCertificate
certificate
]
UTF8String
]
;
EXPECT_EQ
(
originalPrivateKeyField
retrievedPrivateKeyField
)
;
EXPECT_EQ
(
retrievedCertificateField
retrievedCertificateField
)
;
}
end
