#
import
<
Foundation
/
Foundation
.
h
>
#
import
<
OCMock
/
OCMock
.
h
>
#
include
<
vector
>
#
include
"
rtc_base
/
gunit
.
h
"
#
import
"
components
/
audio
/
RTCAudioSession
+
Private
.
h
"
#
import
"
components
/
audio
/
RTCAudioSession
.
h
"
#
import
"
components
/
audio
/
RTCAudioSessionConfiguration
.
h
"
interface
RTC_OBJC_TYPE
(
RTCAudioSession
)
(
UnitTesting
)
property
(
nonatomic
readonly
)
std
:
:
vector
<
__weak
id
<
RTC_OBJC_TYPE
(
RTCAudioSessionDelegate
)
>
>
delegates
;
-
(
instancetype
)
initWithAudioSession
:
(
id
)
audioSession
;
end
interface
MockAVAudioSession
:
NSObject
property
(
nonatomic
readwrite
assign
)
float
outputVolume
;
end
implementation
MockAVAudioSession
synthesize
outputVolume
=
_outputVolume
;
end
interface
RTCAudioSessionTestDelegate
:
NSObject
<
RTC_OBJC_TYPE
(
RTCAudioSessionDelegate
)
>
property
(
nonatomic
readonly
)
float
outputVolume
;
end
implementation
RTCAudioSessionTestDelegate
synthesize
outputVolume
=
_outputVolume
;
-
(
instancetype
)
init
{
if
(
self
=
[
super
init
]
)
{
_outputVolume
=
-
1
;
}
return
self
;
}
-
(
void
)
audioSessionDidBeginInterruption
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
{
}
-
(
void
)
audioSessionDidEndInterruption
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
shouldResumeSession
:
(
BOOL
)
shouldResumeSession
{
}
-
(
void
)
audioSessionDidChangeRoute
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
reason
:
(
AVAudioSessionRouteChangeReason
)
reason
previousRoute
:
(
AVAudioSessionRouteDescription
*
)
previousRoute
{
}
-
(
void
)
audioSessionMediaServerTerminated
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
{
}
-
(
void
)
audioSessionMediaServerReset
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
{
}
-
(
void
)
audioSessionShouldConfigure
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
{
}
-
(
void
)
audioSessionShouldUnconfigure
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
session
{
}
-
(
void
)
audioSession
:
(
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
)
audioSession
didChangeOutputVolume
:
(
float
)
outputVolume
{
_outputVolume
=
outputVolume
;
}
end
interface
RTCTestRemoveOnDeallocDelegate
:
RTCAudioSessionTestDelegate
end
implementation
RTCTestRemoveOnDeallocDelegate
-
(
instancetype
)
init
{
if
(
self
=
[
super
init
]
)
{
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
session
=
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
sharedInstance
]
;
[
session
addDelegate
:
self
]
;
}
return
self
;
}
-
(
void
)
dealloc
{
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
session
=
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
sharedInstance
]
;
[
session
removeDelegate
:
self
]
;
}
end
interface
RTCAudioSessionTest
:
NSObject
end
implementation
RTCAudioSessionTest
-
(
void
)
testAddAndRemoveDelegates
{
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
session
=
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
sharedInstance
]
;
NSMutableArray
*
delegates
=
[
NSMutableArray
array
]
;
const
size_t
count
=
5
;
for
(
size_t
i
=
0
;
i
<
count
;
+
+
i
)
{
RTCAudioSessionTestDelegate
*
delegate
=
[
[
RTCAudioSessionTestDelegate
alloc
]
init
]
;
[
session
addDelegate
:
delegate
]
;
[
delegates
addObject
:
delegate
]
;
EXPECT_EQ
(
i
+
1
session
.
delegates
.
size
(
)
)
;
}
[
delegates
enumerateObjectsUsingBlock
:
^
(
RTCAudioSessionTestDelegate
*
obj
NSUInteger
idx
BOOL
*
stop
)
{
[
session
removeDelegate
:
obj
]
;
}
]
;
EXPECT_EQ
(
0u
session
.
delegates
.
size
(
)
)
;
}
-
(
void
)
testPushDelegate
{
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
session
=
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
sharedInstance
]
;
NSMutableArray
*
delegates
=
[
NSMutableArray
array
]
;
const
size_t
count
=
2
;
for
(
size_t
i
=
0
;
i
<
count
;
+
+
i
)
{
RTCAudioSessionTestDelegate
*
delegate
=
[
[
RTCAudioSessionTestDelegate
alloc
]
init
]
;
[
session
addDelegate
:
delegate
]
;
[
delegates
addObject
:
delegate
]
;
}
RTCAudioSessionTestDelegate
*
pushedDelegate
=
[
[
RTCAudioSessionTestDelegate
alloc
]
init
]
;
[
session
pushDelegate
:
pushedDelegate
]
;
EXPECT_TRUE
(
pushedDelegate
=
=
session
.
delegates
[
0
]
)
;
for
(
size_t
i
=
0
;
i
<
count
;
+
+
i
)
{
RTCAudioSessionTestDelegate
*
delegate
=
[
[
RTCAudioSessionTestDelegate
alloc
]
init
]
;
[
session
addDelegate
:
delegate
]
;
[
delegates
addObject
:
delegate
]
;
}
EXPECT_TRUE
(
pushedDelegate
=
=
session
.
delegates
[
0
]
)
;
pushedDelegate
=
[
[
RTCAudioSessionTestDelegate
alloc
]
init
]
;
[
session
pushDelegate
:
pushedDelegate
]
;
EXPECT_TRUE
(
pushedDelegate
=
=
session
.
delegates
[
0
]
)
;
}
-
(
void
)
testZeroingWeakDelegate
{
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
session
=
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
sharedInstance
]
;
autoreleasepool
{
RTCAudioSessionTestDelegate
*
delegate
=
[
[
RTCAudioSessionTestDelegate
alloc
]
init
]
;
[
session
addDelegate
:
delegate
]
;
EXPECT_EQ
(
1u
session
.
delegates
.
size
(
)
)
;
EXPECT_TRUE
(
session
.
delegates
[
0
]
)
;
}
EXPECT_FALSE
(
session
.
delegates
[
0
]
)
;
RTCAudioSessionTestDelegate
*
delegate
=
[
[
RTCAudioSessionTestDelegate
alloc
]
init
]
;
[
session
addDelegate
:
delegate
]
;
EXPECT_EQ
(
1u
session
.
delegates
.
size
(
)
)
;
EXPECT_TRUE
(
session
.
delegates
[
0
]
)
;
}
-
(
void
)
testRemoveDelegateOnDealloc
{
autoreleasepool
{
RTCTestRemoveOnDeallocDelegate
*
delegate
=
[
[
RTCTestRemoveOnDeallocDelegate
alloc
]
init
]
;
EXPECT_TRUE
(
delegate
)
;
}
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
session
=
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
sharedInstance
]
;
EXPECT_EQ
(
0u
session
.
delegates
.
size
(
)
)
;
}
-
(
void
)
testAudioSessionActivation
{
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
audioSession
=
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
sharedInstance
]
;
EXPECT_EQ
(
0
audioSession
.
activationCount
)
;
[
audioSession
audioSessionDidActivate
:
[
AVAudioSession
sharedInstance
]
]
;
EXPECT_EQ
(
1
audioSession
.
activationCount
)
;
[
audioSession
audioSessionDidDeactivate
:
[
AVAudioSession
sharedInstance
]
]
;
EXPECT_EQ
(
0
audioSession
.
activationCount
)
;
}
OCMLocation
*
OCMMakeLocation
(
id
testCase
const
char
*
fileCString
int
line
)
{
return
[
OCMLocation
locationWithTestCase
:
testCase
file
:
[
NSString
stringWithUTF8String
:
fileCString
]
line
:
line
]
;
}
-
(
void
)
testConfigureWebRTCSession
{
NSError
*
error
=
nil
;
void
(
^
setActiveBlock
)
(
NSInvocation
*
invocation
)
=
^
(
NSInvocation
*
invocation
)
{
__autoreleasing
NSError
*
*
retError
;
[
invocation
getArgument
:
&
retError
atIndex
:
4
]
;
*
retError
=
[
NSError
errorWithDomain
:
"
AVAudioSession
"
code
:
AVAudioSessionErrorCodeCannotInterruptOthers
userInfo
:
nil
]
;
BOOL
failure
=
NO
;
[
invocation
setReturnValue
:
&
failure
]
;
}
;
id
mockAVAudioSession
=
OCMPartialMock
(
[
AVAudioSession
sharedInstance
]
)
;
OCMStub
(
[
[
mockAVAudioSession
ignoringNonObjectArgs
]
setActive
:
YES
withOptions
:
0
error
:
(
[
OCMArg
anyObjectRef
]
)
]
)
.
andDo
(
setActiveBlock
)
;
id
mockAudioSession
=
OCMPartialMock
(
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
sharedInstance
]
)
;
OCMStub
(
[
mockAudioSession
session
]
)
.
andReturn
(
mockAVAudioSession
)
;
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
audioSession
=
mockAudioSession
;
EXPECT_EQ
(
0
audioSession
.
activationCount
)
;
[
audioSession
lockForConfiguration
]
;
OCMExpect
(
[
[
mockAVAudioSession
ignoringNonObjectArgs
]
setActive
:
YES
withOptions
:
0
error
:
(
[
OCMArg
anyObjectRef
]
)
]
)
.
andDo
(
setActiveBlock
)
;
OCMExpect
(
[
mockAudioSession
session
]
)
.
andReturn
(
mockAVAudioSession
)
;
EXPECT_FALSE
(
[
audioSession
configureWebRTCSession
:
&
error
]
)
;
EXPECT_EQ
(
0
audioSession
.
activationCount
)
;
id
session
=
audioSession
.
session
;
EXPECT_EQ
(
session
mockAVAudioSession
)
;
EXPECT_EQ
(
NO
[
mockAVAudioSession
setActive
:
YES
withOptions
:
0
error
:
&
error
]
)
;
[
audioSession
unlockForConfiguration
]
;
OCMVerify
(
[
mockAudioSession
session
]
)
;
OCMVerify
(
[
[
mockAVAudioSession
ignoringNonObjectArgs
]
setActive
:
YES
withOptions
:
0
error
:
&
error
]
)
;
OCMVerify
(
[
[
mockAVAudioSession
ignoringNonObjectArgs
]
setActive
:
NO
withOptions
:
0
error
:
&
error
]
)
;
[
mockAVAudioSession
stopMocking
]
;
[
mockAudioSession
stopMocking
]
;
}
-
(
void
)
testAudioVolumeDidNotify
{
MockAVAudioSession
*
mockAVAudioSession
=
[
[
MockAVAudioSession
alloc
]
init
]
;
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
session
=
[
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
alloc
]
initWithAudioSession
:
mockAVAudioSession
]
;
RTCAudioSessionTestDelegate
*
delegate
=
[
[
RTCAudioSessionTestDelegate
alloc
]
init
]
;
[
session
addDelegate
:
delegate
]
;
float
expectedVolume
=
0
.
75
;
mockAVAudioSession
.
outputVolume
=
expectedVolume
;
EXPECT_EQ
(
expectedVolume
delegate
.
outputVolume
)
;
}
end
namespace
webrtc
{
class
AudioSessionTest
:
public
:
:
testing
:
:
Test
{
protected
:
void
TearDown
(
)
override
{
RTC_OBJC_TYPE
(
RTCAudioSession
)
*
session
=
[
RTC_OBJC_TYPE
(
RTCAudioSession
)
sharedInstance
]
;
for
(
id
<
RTC_OBJC_TYPE
(
RTCAudioSessionDelegate
)
>
delegate
:
session
.
delegates
)
{
[
session
removeDelegate
:
delegate
]
;
}
}
}
;
TEST_F
(
AudioSessionTest
AddAndRemoveDelegates
)
{
RTCAudioSessionTest
*
test
=
[
[
RTCAudioSessionTest
alloc
]
init
]
;
[
test
testAddAndRemoveDelegates
]
;
}
TEST_F
(
AudioSessionTest
PushDelegate
)
{
RTCAudioSessionTest
*
test
=
[
[
RTCAudioSessionTest
alloc
]
init
]
;
[
test
testPushDelegate
]
;
}
TEST_F
(
AudioSessionTest
ZeroingWeakDelegate
)
{
RTCAudioSessionTest
*
test
=
[
[
RTCAudioSessionTest
alloc
]
init
]
;
[
test
testZeroingWeakDelegate
]
;
}
TEST_F
(
AudioSessionTest
RemoveDelegateOnDealloc
)
{
RTCAudioSessionTest
*
test
=
[
[
RTCAudioSessionTest
alloc
]
init
]
;
[
test
testRemoveDelegateOnDealloc
]
;
}
TEST_F
(
AudioSessionTest
AudioSessionActivation
)
{
RTCAudioSessionTest
*
test
=
[
[
RTCAudioSessionTest
alloc
]
init
]
;
[
test
testAudioSessionActivation
]
;
}
TEST_F
(
AudioSessionTest
ConfigureWebRTCSession
)
{
RTCAudioSessionTest
*
test
=
[
[
RTCAudioSessionTest
alloc
]
init
]
;
[
test
testConfigureWebRTCSession
]
;
}
TEST_F
(
AudioSessionTest
AudioVolumeDidNotify
)
{
RTCAudioSessionTest
*
test
=
[
[
RTCAudioSessionTest
alloc
]
init
]
;
[
test
testAudioVolumeDidNotify
]
;
}
}
