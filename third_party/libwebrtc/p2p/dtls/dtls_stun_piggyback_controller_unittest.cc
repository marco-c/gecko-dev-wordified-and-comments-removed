#
include
"
p2p
/
dtls
/
dtls_stun_piggyback_controller
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
transport
/
stun
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
{
const
std
:
:
vector
<
uint8_t
>
dtls_flight1
=
{
0x16
0xfe
0xfd
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x00
0x0c
0x0e
0x00
0x00
0x00
0x12
0x34
0x00
0x00
0x00
0x00
0x00
0x00
}
;
const
std
:
:
vector
<
uint8_t
>
dtls_flight2
=
{
0x16
0xfe
0xfd
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x02
0x00
0x0c
0x0e
0x00
0x00
0x00
0x43
0x21
0x00
0x00
0x00
0x00
0x00
0x00
}
;
const
std
:
:
vector
<
uint8_t
>
dtls_flight3
=
{
0x16
0xfe
0xfd
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x03
0x00
0x0c
0x0e
0x00
0x00
0x00
0x44
0x44
0x00
0x00
0x00
0x00
0x00
0x00
}
;
const
std
:
:
vector
<
uint8_t
>
dtls_flight4
=
{
0x16
0xfe
0xfd
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x04
0x00
0x0c
0x0e
0x00
0x00
0x00
0x54
0x86
0x00
0x00
0x00
0x00
0x00
0x00
}
;
const
std
:
:
vector
<
uint8_t
>
empty
=
{
}
;
}
namespace
cricket
{
using
State
=
DtlsStunPiggybackController
:
:
State
;
class
DtlsStunPiggybackControllerTest
:
public
:
:
testing
:
:
Test
{
protected
:
DtlsStunPiggybackControllerTest
(
)
:
client_
(
[
]
(
rtc
:
:
ArrayView
<
const
uint8_t
>
data
)
{
}
)
server_
(
[
]
(
rtc
:
:
ArrayView
<
const
uint8_t
>
data
)
{
}
)
{
}
void
SendClientToServer
(
const
std
:
:
vector
<
uint8_t
>
data
StunMessageType
type
)
{
client_
.
SetDataToPiggyback
(
data
)
;
std
:
:
unique_ptr
<
StunByteStringAttribute
>
attr_data
;
if
(
client_
.
GetDataToPiggyback
(
type
)
)
{
attr_data
=
std
:
:
make_unique
<
StunByteStringAttribute
>
(
STUN_ATTR_META_DTLS_IN_STUN
*
client_
.
GetDataToPiggyback
(
type
)
)
;
}
std
:
:
unique_ptr
<
StunByteStringAttribute
>
attr_ack
;
if
(
client_
.
GetAckToPiggyback
(
type
)
)
{
attr_ack
=
std
:
:
make_unique
<
StunByteStringAttribute
>
(
STUN_ATTR_META_DTLS_IN_STUN_ACK
*
client_
.
GetAckToPiggyback
(
type
)
)
;
}
server_
.
ReportDataPiggybacked
(
attr_data
.
get
(
)
attr_ack
.
get
(
)
)
;
if
(
data
=
=
dtls_flight3
)
{
server_
.
SetDtlsHandshakeComplete
(
false
)
;
}
}
void
SendServerToClient
(
const
std
:
:
vector
<
uint8_t
>
data
StunMessageType
type
)
{
server_
.
SetDataToPiggyback
(
data
)
;
std
:
:
unique_ptr
<
StunByteStringAttribute
>
attr_data
;
if
(
server_
.
GetDataToPiggyback
(
type
)
)
{
attr_data
=
std
:
:
make_unique
<
StunByteStringAttribute
>
(
STUN_ATTR_META_DTLS_IN_STUN
*
server_
.
GetDataToPiggyback
(
type
)
)
;
}
std
:
:
unique_ptr
<
StunByteStringAttribute
>
attr_ack
;
if
(
server_
.
GetAckToPiggyback
(
type
)
)
{
attr_ack
=
std
:
:
make_unique
<
StunByteStringAttribute
>
(
STUN_ATTR_META_DTLS_IN_STUN_ACK
*
server_
.
GetAckToPiggyback
(
type
)
)
;
}
client_
.
ReportDataPiggybacked
(
attr_data
.
get
(
)
attr_ack
.
get
(
)
)
;
if
(
data
=
=
dtls_flight4
)
{
client_
.
SetDtlsHandshakeComplete
(
true
)
;
}
}
void
DisableSupport
(
DtlsStunPiggybackController
&
client_or_server
)
{
ASSERT_EQ
(
client_or_server
.
state
(
)
State
:
:
TENTATIVE
)
;
client_or_server
.
ReportDataPiggybacked
(
nullptr
nullptr
)
;
ASSERT_EQ
(
client_or_server
.
state
(
)
State
:
:
OFF
)
;
}
DtlsStunPiggybackController
client_
;
DtlsStunPiggybackController
server_
;
}
;
TEST_F
(
DtlsStunPiggybackControllerTest
BasicHandshake
)
{
SendClientToServer
(
dtls_flight1
STUN_BINDING_REQUEST
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
CONFIRMED
)
;
SendServerToClient
(
dtls_flight2
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
CONFIRMED
)
;
SendClientToServer
(
dtls_flight3
STUN_BINDING_REQUEST
)
;
SendServerToClient
(
dtls_flight4
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
PENDING
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
PENDING
)
;
SendServerToClient
(
empty
STUN_BINDING_REQUEST
)
;
SendClientToServer
(
empty
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
COMPLETE
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
COMPLETE
)
;
}
TEST_F
(
DtlsStunPiggybackControllerTest
FirstClientPacketLost
)
{
SendServerToClient
(
empty
STUN_BINDING_REQUEST
)
;
SendClientToServer
(
dtls_flight1
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
CONFIRMED
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
CONFIRMED
)
;
SendServerToClient
(
dtls_flight2
STUN_BINDING_REQUEST
)
;
SendClientToServer
(
dtls_flight3
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
PENDING
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
CONFIRMED
)
;
SendServerToClient
(
dtls_flight4
STUN_BINDING_REQUEST
)
;
SendClientToServer
(
empty
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
COMPLETE
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
PENDING
)
;
SendServerToClient
(
empty
STUN_BINDING_REQUEST
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
COMPLETE
)
;
}
TEST_F
(
DtlsStunPiggybackControllerTest
NotSupportedByServer
)
{
DisableSupport
(
server_
)
;
SendClientToServer
(
dtls_flight1
STUN_BINDING_REQUEST
)
;
SendServerToClient
(
empty
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
OFF
)
;
}
TEST_F
(
DtlsStunPiggybackControllerTest
NotSupportedByServerClientReceives
)
{
DisableSupport
(
server_
)
;
SendServerToClient
(
empty
STUN_BINDING_REQUEST
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
OFF
)
;
}
TEST_F
(
DtlsStunPiggybackControllerTest
NotSupportedByClient
)
{
DisableSupport
(
client_
)
;
SendServerToClient
(
empty
STUN_BINDING_REQUEST
)
;
SendClientToServer
(
empty
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
OFF
)
;
}
TEST_F
(
DtlsStunPiggybackControllerTest
SomeRequestsDoNotGoThrough
)
{
SendServerToClient
(
empty
STUN_BINDING_REQUEST
)
;
SendClientToServer
(
dtls_flight1
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
CONFIRMED
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
CONFIRMED
)
;
SendClientToServer
(
dtls_flight1
STUN_BINDING_REQUEST
)
;
SendServerToClient
(
dtls_flight2
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
CONFIRMED
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
CONFIRMED
)
;
SendClientToServer
(
dtls_flight3
STUN_BINDING_REQUEST
)
;
SendServerToClient
(
dtls_flight4
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
PENDING
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
PENDING
)
;
SendClientToServer
(
empty
STUN_BINDING_REQUEST
)
;
SendServerToClient
(
empty
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
COMPLETE
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
COMPLETE
)
;
}
TEST_F
(
DtlsStunPiggybackControllerTest
LossOnPostHandshakeAck
)
{
SendClientToServer
(
dtls_flight1
STUN_BINDING_REQUEST
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
CONFIRMED
)
;
SendServerToClient
(
dtls_flight2
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
CONFIRMED
)
;
SendClientToServer
(
dtls_flight3
STUN_BINDING_REQUEST
)
;
SendServerToClient
(
dtls_flight4
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
PENDING
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
PENDING
)
;
SendServerToClient
(
empty
STUN_BINDING_REQUEST
)
;
SendClientToServer
(
empty
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
COMPLETE
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
COMPLETE
)
;
}
TEST_F
(
DtlsStunPiggybackControllerTest
UnsupportedStateAfterFallbackHandshakeRemainsOff
)
{
DisableSupport
(
client_
)
;
DisableSupport
(
server_
)
;
client_
.
SetDtlsHandshakeComplete
(
true
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
OFF
)
;
server_
.
SetDtlsHandshakeComplete
(
true
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
OFF
)
;
}
TEST_F
(
DtlsStunPiggybackControllerTest
BasicHandshakeAckData
)
{
EXPECT_EQ
(
server_
.
GetAckToPiggyback
(
STUN_BINDING_RESPONSE
)
"
"
)
;
EXPECT_EQ
(
client_
.
GetAckToPiggyback
(
STUN_BINDING_REQUEST
)
"
"
)
;
SendClientToServer
(
dtls_flight1
STUN_BINDING_REQUEST
)
;
SendServerToClient
(
dtls_flight2
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
GetAckToPiggyback
(
STUN_BINDING_REQUEST
)
std
:
:
string
(
"
\
x12
\
x34
"
2
)
)
;
EXPECT_EQ
(
client_
.
GetAckToPiggyback
(
STUN_BINDING_RESPONSE
)
std
:
:
string
(
"
\
x43
\
x21
"
2
)
)
;
SendClientToServer
(
dtls_flight3
STUN_BINDING_REQUEST
)
;
SendServerToClient
(
dtls_flight4
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
GetAckToPiggyback
(
STUN_BINDING_RESPONSE
)
std
:
:
string
(
"
\
x12
\
x34
\
x44
\
x44
"
4
)
)
;
EXPECT_EQ
(
client_
.
GetAckToPiggyback
(
STUN_BINDING_REQUEST
)
std
:
:
string
(
"
\
x43
\
x21
\
x54
\
x86
"
4
)
)
;
SendServerToClient
(
empty
STUN_BINDING_REQUEST
)
;
SendClientToServer
(
empty
STUN_BINDING_RESPONSE
)
;
EXPECT_EQ
(
server_
.
state
(
)
State
:
:
COMPLETE
)
;
EXPECT_EQ
(
client_
.
state
(
)
State
:
:
COMPLETE
)
;
EXPECT_EQ
(
server_
.
GetAckToPiggyback
(
STUN_BINDING_RESPONSE
)
std
:
:
nullopt
)
;
EXPECT_EQ
(
client_
.
GetAckToPiggyback
(
STUN_BINDING_REQUEST
)
std
:
:
nullopt
)
;
}
TEST_F
(
DtlsStunPiggybackControllerTest
AckDataNoDuplicates
)
{
SendClientToServer
(
dtls_flight1
STUN_BINDING_REQUEST
)
;
EXPECT_EQ
(
server_
.
GetAckToPiggyback
(
STUN_BINDING_REQUEST
)
std
:
:
string
(
"
\
x12
\
x34
"
2
)
)
;
SendClientToServer
(
dtls_flight3
STUN_BINDING_REQUEST
)
;
EXPECT_EQ
(
server_
.
GetAckToPiggyback
(
STUN_BINDING_REQUEST
)
std
:
:
string
(
"
\
x12
\
x34
\
x44
\
x44
"
4
)
)
;
SendClientToServer
(
dtls_flight1
STUN_BINDING_REQUEST
)
;
EXPECT_EQ
(
server_
.
GetAckToPiggyback
(
STUN_BINDING_REQUEST
)
std
:
:
string
(
"
\
x12
\
x34
\
x44
\
x44
"
4
)
)
;
}
}
