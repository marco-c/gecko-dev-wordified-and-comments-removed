#
include
"
p2p
/
dtls
/
dtls_utils
.
h
"
#
include
<
cstdint
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
rtc_base
/
byte_buffer
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
crc32
.
h
"
namespace
{
const
uint8_t
kDtlsChangeCipherSpecRecord
=
20
;
const
uint8_t
kDtlsHandshakeRecord
=
22
;
const
uint8_t
kFixedBitmask
=
0b00100000
;
const
uint8_t
kConnectionBitmask
=
0b00010000
;
const
uint8_t
kSequenceNumberBitmask
=
0b00001000
;
const
uint8_t
kLengthPresentBitmask
=
0b00000100
;
}
namespace
webrtc
{
bool
IsDtlsPacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
)
{
const
uint8_t
*
u
=
payload
.
data
(
)
;
return
(
payload
.
size
(
)
>
=
kDtlsRecordHeaderLen
&
&
(
u
[
0
]
>
19
&
&
u
[
0
]
<
64
)
)
;
}
bool
IsDtlsClientHelloPacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
)
{
if
(
!
IsDtlsPacket
(
payload
)
)
{
return
false
;
}
const
uint8_t
*
u
=
payload
.
data
(
)
;
return
payload
.
size
(
)
>
17
&
&
u
[
0
]
=
=
kDtlsHandshakeRecord
&
&
u
[
13
]
=
=
1
;
}
bool
IsDtlsHandshakePacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
)
{
if
(
!
IsDtlsPacket
(
payload
)
)
{
return
false
;
}
return
payload
.
size
(
)
>
17
&
&
(
payload
[
0
]
=
=
kDtlsHandshakeRecord
|
|
payload
[
0
]
=
=
kDtlsChangeCipherSpecRecord
)
;
}
std
:
:
optional
<
std
:
:
vector
<
uint16_t
>
>
GetDtlsHandshakeAcks
(
rtc
:
:
ArrayView
<
const
uint8_t
>
dtls_packet
)
{
std
:
:
vector
<
uint16_t
>
acks
;
ByteBufferReader
record_buf
(
dtls_packet
)
;
while
(
record_buf
.
Length
(
)
>
=
kDtlsRecordHeaderLen
)
{
uint8_t
content_type
;
uint64_t
epoch_and_seq
;
uint16_t
len
;
if
(
!
record_buf
.
ReadUInt8
(
&
content_type
)
)
{
return
std
:
:
nullopt
;
}
if
(
(
content_type
&
kFixedBitmask
)
=
=
kFixedBitmask
)
{
if
(
(
content_type
&
kConnectionBitmask
)
!
=
0
)
{
return
std
:
:
nullopt
;
}
if
(
!
record_buf
.
Consume
(
(
content_type
&
kSequenceNumberBitmask
)
=
=
kSequenceNumberBitmask
?
2
:
1
)
)
{
return
std
:
:
nullopt
;
}
if
(
(
content_type
&
kLengthPresentBitmask
)
=
=
kLengthPresentBitmask
)
{
if
(
!
(
record_buf
.
ReadUInt16
(
&
len
)
&
&
record_buf
.
Consume
(
len
)
)
)
{
return
std
:
:
nullopt
;
}
}
continue
;
}
if
(
!
(
record_buf
.
Consume
(
2
)
&
&
record_buf
.
ReadUInt64
(
&
epoch_and_seq
)
&
&
record_buf
.
ReadUInt16
(
&
len
)
&
&
record_buf
.
Length
(
)
>
=
len
)
)
{
return
std
:
:
nullopt
;
}
if
(
content_type
!
=
kDtlsHandshakeRecord
)
{
record_buf
.
Consume
(
len
)
;
continue
;
}
if
(
epoch_and_seq
>
>
6
!
=
0
)
{
record_buf
.
Consume
(
len
)
;
continue
;
}
ByteBufferReader
handshake_buf
(
record_buf
.
DataView
(
)
.
subview
(
0
len
)
)
;
while
(
handshake_buf
.
Length
(
)
>
0
)
{
uint16_t
msg_seq
;
uint32_t
fragment_len
;
uint32_t
fragment_offset
;
if
(
!
(
handshake_buf
.
Consume
(
1
+
3
)
&
&
handshake_buf
.
ReadUInt16
(
&
msg_seq
)
&
&
handshake_buf
.
ReadUInt24
(
&
fragment_offset
)
&
&
handshake_buf
.
ReadUInt24
(
&
fragment_len
)
&
&
handshake_buf
.
Consume
(
fragment_len
)
)
)
{
return
std
:
:
nullopt
;
}
acks
.
push_back
(
msg_seq
)
;
record_buf
.
Consume
(
12
+
fragment_len
)
;
}
RTC_DCHECK
(
handshake_buf
.
Length
(
)
=
=
0
)
;
}
if
(
record_buf
.
Length
(
)
!
=
0
)
{
return
std
:
:
nullopt
;
}
return
acks
;
}
uint32_t
ComputeDtlsPacketHash
(
rtc
:
:
ArrayView
<
const
uint8_t
>
dtls_packet
)
{
return
webrtc
:
:
ComputeCrc32
(
dtls_packet
.
data
(
)
dtls_packet
.
size
(
)
)
;
}
}
