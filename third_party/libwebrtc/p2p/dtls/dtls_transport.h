#
ifndef
P2P_DTLS_DTLS_TRANSPORT_H_
#
define
P2P_DTLS_DTLS_TRANSPORT_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
dtls_transport_interface
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
p2p
/
base
/
ice_transport_internal
.
h
"
#
include
"
p2p
/
base
/
packet_transport_internal
.
h
"
#
include
"
p2p
/
dtls
/
dtls_stun_piggyback_controller
.
h
"
#
include
"
p2p
/
dtls
/
dtls_transport_internal
.
h
"
#
include
"
p2p
/
dtls
/
dtls_utils
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
buffer_queue
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
#
include
"
rtc_base
/
network
/
sent_packet
.
h
"
#
include
"
rtc_base
/
network_route
.
h
"
#
include
"
rtc_base
/
rtc_certificate
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_stream_adapter
.
h
"
#
include
"
rtc_base
/
stream
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
StreamInterfaceChannel
:
public
StreamInterface
{
public
:
explicit
StreamInterfaceChannel
(
webrtc
:
:
IceTransportInternal
*
ice_transport
)
;
void
SetDtlsStunPiggybackController
(
webrtc
:
:
DtlsStunPiggybackController
*
dtls_stun_piggyback_controller
)
;
StreamInterfaceChannel
(
const
StreamInterfaceChannel
&
)
=
delete
;
StreamInterfaceChannel
&
operator
=
(
const
StreamInterfaceChannel
&
)
=
delete
;
bool
OnPacketReceived
(
const
char
*
data
size_t
size
)
;
StreamState
GetState
(
)
const
override
;
void
Close
(
)
override
;
StreamResult
Read
(
ArrayView
<
uint8_t
>
buffer
size_t
&
read
int
&
error
)
override
;
StreamResult
Write
(
ArrayView
<
const
uint8_t
>
data
size_t
&
written
int
&
error
)
override
;
bool
Flush
(
)
override
;
private
:
webrtc
:
:
IceTransportInternal
*
const
ice_transport_
;
webrtc
:
:
DtlsStunPiggybackController
*
dtls_stun_piggyback_controller_
=
nullptr
;
StreamState
state_
RTC_GUARDED_BY
(
callback_sequence_
)
;
webrtc
:
:
BufferQueue
packets_
RTC_GUARDED_BY
(
callback_sequence_
)
;
}
;
class
DtlsTransportInternalImpl
:
public
webrtc
:
:
DtlsTransportInternal
{
public
:
DtlsTransportInternalImpl
(
webrtc
:
:
IceTransportInternal
*
ice_transport
const
webrtc
:
:
CryptoOptions
&
crypto_options
webrtc
:
:
RtcEventLog
*
event_log
webrtc
:
:
SSLProtocolVersion
max_version
=
webrtc
:
:
SSL_PROTOCOL_DTLS_12
)
;
~
DtlsTransportInternalImpl
(
)
override
;
DtlsTransportInternalImpl
(
const
DtlsTransportInternalImpl
&
)
=
delete
;
DtlsTransportInternalImpl
&
operator
=
(
const
DtlsTransportInternalImpl
&
)
=
delete
;
webrtc
:
:
DtlsTransportState
dtls_state
(
)
const
override
;
const
std
:
:
string
&
transport_name
(
)
const
override
;
int
component
(
)
const
override
;
bool
IsDtlsActive
(
)
const
override
;
bool
SetLocalCertificate
(
const
scoped_refptr
<
webrtc
:
:
RTCCertificate
>
&
certificate
)
override
;
scoped_refptr
<
webrtc
:
:
RTCCertificate
>
GetLocalCertificate
(
)
const
override
;
bool
SetRemoteFingerprint
(
absl
:
:
string_view
digest_alg
const
uint8_t
*
digest
size_t
digest_len
)
override
;
webrtc
:
:
RTCError
SetRemoteParameters
(
absl
:
:
string_view
digest_alg
const
uint8_t
*
digest
size_t
digest_len
std
:
:
optional
<
webrtc
:
:
SSLRole
>
role
)
override
;
int
SendPacket
(
const
char
*
data
size_t
size
const
AsyncSocketPacketOptions
&
options
int
flags
)
override
;
bool
GetOption
(
webrtc
:
:
Socket
:
:
Option
opt
int
*
value
)
override
;
bool
GetSslVersionBytes
(
int
*
version
)
const
override
;
bool
GetSrtpCryptoSuite
(
int
*
cipher
)
const
override
;
uint16_t
GetSslPeerSignatureAlgorithm
(
)
const
override
;
bool
GetDtlsRole
(
webrtc
:
:
SSLRole
*
role
)
const
override
;
bool
SetDtlsRole
(
webrtc
:
:
SSLRole
role
)
override
;
bool
GetSslCipherSuite
(
int
*
cipher
)
const
override
;
std
:
:
optional
<
absl
:
:
string_view
>
GetTlsCipherSuiteName
(
)
const
override
;
std
:
:
unique_ptr
<
webrtc
:
:
SSLCertChain
>
GetRemoteSSLCertChain
(
)
const
override
;
bool
ExportSrtpKeyingMaterial
(
ZeroOnFreeBuffer
<
uint8_t
>
&
keying_material
)
override
;
webrtc
:
:
IceTransportInternal
*
ice_transport
(
)
override
;
bool
IsDtlsConnected
(
)
;
bool
receiving
(
)
const
override
;
bool
writable
(
)
const
override
;
int
GetError
(
)
override
;
std
:
:
optional
<
webrtc
:
:
NetworkRoute
>
network_route
(
)
const
override
;
int
SetOption
(
webrtc
:
:
Socket
:
:
Option
opt
int
value
)
override
;
std
:
:
string
ToString
(
)
const
{
const
absl
:
:
string_view
RECEIVING_ABBREV
[
2
]
=
{
"
_
"
"
R
"
}
;
const
absl
:
:
string_view
WRITABLE_ABBREV
[
2
]
=
{
"
_
"
"
W
"
}
;
StringBuilder
sb
;
sb
<
<
"
DtlsTransport
[
"
<
<
transport_name
(
)
<
<
"
|
"
<
<
component_
<
<
"
|
"
<
<
RECEIVING_ABBREV
[
receiving
(
)
]
<
<
WRITABLE_ABBREV
[
writable
(
)
]
<
<
"
]
"
;
return
sb
.
Release
(
)
;
}
int
GetRetransmissionCount
(
)
const
;
int
GetStunDataCount
(
)
const
;
bool
IsDtlsPiggybackSupportedByPeer
(
)
;
bool
WasDtlsCompletedByPiggybacking
(
)
;
private
:
void
ConnectToIceTransport
(
)
;
void
OnWritableState
(
webrtc
:
:
PacketTransportInternal
*
transport
)
;
void
OnReadPacket
(
webrtc
:
:
PacketTransportInternal
*
transport
const
ReceivedIpPacket
&
packet
bool
piggybacked
)
;
void
OnSentPacket
(
webrtc
:
:
PacketTransportInternal
*
transport
const
SentPacketInfo
&
sent_packet
)
;
void
OnReadyToSend
(
webrtc
:
:
PacketTransportInternal
*
transport
)
;
void
OnReceivingState
(
webrtc
:
:
PacketTransportInternal
*
transport
)
;
void
OnDtlsEvent
(
int
sig
int
err
)
;
void
OnNetworkRouteChanged
(
std
:
:
optional
<
webrtc
:
:
NetworkRoute
>
network_route
)
;
bool
SetupDtls
(
)
;
void
MaybeStartDtls
(
)
;
bool
HandleDtlsPacket
(
ArrayView
<
const
uint8_t
>
payload
)
;
void
OnDtlsHandshakeError
(
webrtc
:
:
SSLHandshakeError
error
)
;
void
ConfigureHandshakeTimeout
(
)
;
void
set_receiving
(
bool
receiving
)
;
void
set_writable
(
bool
writable
)
;
void
set_dtls_state
(
webrtc
:
:
DtlsTransportState
state
)
;
void
SetPiggybackDtlsDataCallback
(
absl
:
:
AnyInvocable
<
void
(
webrtc
:
:
PacketTransportInternal
*
transport
const
webrtc
:
:
ReceivedIpPacket
&
packet
)
>
callback
)
;
void
PeriodicRetransmitDtlsPacketUntilDtlsConnected
(
)
;
RTC_NO_UNIQUE_ADDRESS
webrtc
:
:
SequenceChecker
thread_checker_
;
const
int
component_
;
webrtc
:
:
DtlsTransportState
dtls_state_
=
webrtc
:
:
DtlsTransportState
:
:
kNew
;
webrtc
:
:
IceTransportInternal
*
const
ice_transport_
;
std
:
:
unique_ptr
<
webrtc
:
:
SSLStreamAdapter
>
dtls_
;
StreamInterfaceChannel
*
downward_
;
const
std
:
:
vector
<
int
>
srtp_ciphers_
;
const
std
:
:
vector
<
uint16_t
>
ephemeral_key_exchange_cipher_groups_
;
bool
dtls_active_
=
false
;
scoped_refptr
<
webrtc
:
:
RTCCertificate
>
local_certificate_
;
std
:
:
optional
<
webrtc
:
:
SSLRole
>
dtls_role_
;
const
webrtc
:
:
SSLProtocolVersion
ssl_max_version_
;
Buffer
remote_fingerprint_value_
;
std
:
:
string
remote_fingerprint_algorithm_
;
PacketStash
cached_client_hello_
;
bool
receiving_
=
false
;
bool
writable_
=
false
;
bool
ice_has_been_writable_
=
false
;
webrtc
:
:
RtcEventLog
*
const
event_log_
;
bool
dtls_in_stun_
=
false
;
webrtc
:
:
DtlsStunPiggybackController
dtls_stun_piggyback_controller_
;
absl
:
:
AnyInvocable
<
void
(
webrtc
:
:
PacketTransportInternal
*
const
webrtc
:
:
ReceivedIpPacket
&
)
>
piggybacked_dtls_callback_
;
bool
pending_periodic_retransmit_dtls_packet_
=
false
;
webrtc
:
:
ScopedTaskSafetyDetached
safety_flag_
;
}
;
}
#
ifdef
WEBRTC_ALLOW_DEPRECATED_NAMESPACES
namespace
cricket
{
using
DtlsTransport
=
:
:
webrtc
:
:
DtlsTransportInternalImpl
;
using
:
:
webrtc
:
:
StreamInterfaceChannel
;
}
#
endif
#
endif
