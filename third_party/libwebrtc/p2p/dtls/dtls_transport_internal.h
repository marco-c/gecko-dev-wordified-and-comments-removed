#
ifndef
P2P_DTLS_DTLS_TRANSPORT_INTERNAL_H_
#
define
P2P_DTLS_DTLS_TRANSPORT_INTERNAL_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
utility
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
dtls_transport_interface
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
p2p
/
base
/
ice_transport_internal
.
h
"
#
include
"
p2p
/
base
/
packet_transport_internal
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
callback_list
.
h
"
#
include
"
rtc_base
/
rtc_certificate
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_stream_adapter
.
h
"
namespace
cricket
{
enum
PacketFlags
{
PF_NORMAL
=
0x00
PF_SRTP_BYPASS
=
0x01
}
;
class
DtlsTransportInternal
:
public
rtc
:
:
PacketTransportInternal
{
public
:
~
DtlsTransportInternal
(
)
override
;
DtlsTransportInternal
(
const
DtlsTransportInternal
&
)
=
delete
;
DtlsTransportInternal
&
operator
=
(
const
DtlsTransportInternal
&
)
=
delete
;
virtual
webrtc
:
:
DtlsTransportState
dtls_state
(
)
const
=
0
;
virtual
int
component
(
)
const
=
0
;
virtual
bool
IsDtlsActive
(
)
const
=
0
;
virtual
bool
GetDtlsRole
(
webrtc
:
:
SSLRole
*
role
)
const
=
0
;
virtual
bool
SetDtlsRole
(
webrtc
:
:
SSLRole
role
)
=
0
;
virtual
bool
GetSslVersionBytes
(
int
*
version
)
const
=
0
;
virtual
bool
GetSrtpCryptoSuite
(
int
*
cipher
)
const
=
0
;
virtual
bool
GetSslCipherSuite
(
int
*
cipher
)
const
=
0
;
virtual
std
:
:
optional
<
absl
:
:
string_view
>
GetTlsCipherSuiteName
(
)
const
=
0
;
virtual
uint16_t
GetSslPeerSignatureAlgorithm
(
)
const
=
0
;
virtual
rtc
:
:
scoped_refptr
<
webrtc
:
:
RTCCertificate
>
GetLocalCertificate
(
)
const
=
0
;
virtual
bool
SetLocalCertificate
(
const
rtc
:
:
scoped_refptr
<
webrtc
:
:
RTCCertificate
>
&
certificate
)
=
0
;
virtual
std
:
:
unique_ptr
<
webrtc
:
:
SSLCertChain
>
GetRemoteSSLCertChain
(
)
const
=
0
;
virtual
bool
ExportSrtpKeyingMaterial
(
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
keying_material
)
=
0
;
ABSL_DEPRECATED
(
"
Use
SetRemoteParameters
instead
.
"
)
virtual
bool
SetRemoteFingerprint
(
absl
:
:
string_view
digest_alg
const
uint8_t
*
digest
size_t
digest_len
)
=
0
;
virtual
webrtc
:
:
RTCError
SetRemoteParameters
(
absl
:
:
string_view
digest_alg
const
uint8_t
*
digest
size_t
digest_len
std
:
:
optional
<
webrtc
:
:
SSLRole
>
role
)
=
0
;
ABSL_DEPRECATED
(
"
Set
the
max
version
via
construction
.
"
)
bool
SetSslMaxProtocolVersion
(
webrtc
:
:
SSLProtocolVersion
)
{
return
true
;
}
virtual
webrtc
:
:
IceTransportInternal
*
ice_transport
(
)
=
0
;
template
<
typename
F
>
void
SubscribeDtlsTransportState
(
F
&
&
callback
)
{
dtls_transport_state_callback_list_
.
AddReceiver
(
std
:
:
forward
<
F
>
(
callback
)
)
;
}
template
<
typename
F
>
void
SubscribeDtlsTransportState
(
const
void
*
id
F
&
&
callback
)
{
dtls_transport_state_callback_list_
.
AddReceiver
(
id
std
:
:
forward
<
F
>
(
callback
)
)
;
}
void
UnsubscribeDtlsTransportState
(
const
void
*
id
)
{
dtls_transport_state_callback_list_
.
RemoveReceivers
(
id
)
;
}
void
SendDtlsState
(
DtlsTransportInternal
*
transport
webrtc
:
:
DtlsTransportState
state
)
{
dtls_transport_state_callback_list_
.
Send
(
transport
state
)
;
}
template
<
typename
F
>
void
SubscribeDtlsHandshakeError
(
F
&
&
callback
)
{
dtls_handshake_error_callback_list_
.
AddReceiver
(
std
:
:
forward
<
F
>
(
callback
)
)
;
}
void
SendDtlsHandshakeError
(
webrtc
:
:
SSLHandshakeError
error
)
{
dtls_handshake_error_callback_list_
.
Send
(
error
)
;
}
protected
:
DtlsTransportInternal
(
)
;
private
:
webrtc
:
:
CallbackList
<
const
webrtc
:
:
SSLHandshakeError
>
dtls_handshake_error_callback_list_
;
webrtc
:
:
CallbackList
<
DtlsTransportInternal
*
const
webrtc
:
:
DtlsTransportState
>
dtls_transport_state_callback_list_
;
}
;
}
#
endif
