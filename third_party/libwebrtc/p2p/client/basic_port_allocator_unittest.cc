#
include
"
p2p
/
client
/
basic_port_allocator
.
h
"
#
include
<
memory
>
#
include
<
ostream
>
#
include
"
absl
/
algorithm
/
container
.
h
"
#
include
"
p2p
/
base
/
basic_packet_socket_factory
.
h
"
#
include
"
p2p
/
base
/
p2p_constants
.
h
"
#
include
"
p2p
/
base
/
stun_port
.
h
"
#
include
"
p2p
/
base
/
stun_request
.
h
"
#
include
"
p2p
/
base
/
stun_server
.
h
"
#
include
"
p2p
/
base
/
test_stun_server
.
h
"
#
include
"
p2p
/
base
/
test_turn_server
.
h
"
#
include
"
rtc_base
/
fake_clock
.
h
"
#
include
"
rtc_base
/
fake_mdns_responder
.
h
"
#
include
"
rtc_base
/
fake_network
.
h
"
#
include
"
rtc_base
/
firewall_socket_server
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
#
include
"
rtc_base
/
ip_address
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
nat_server
.
h
"
#
include
"
rtc_base
/
nat_socket_factory
.
h
"
#
include
"
rtc_base
/
nat_types
.
h
"
#
include
"
rtc_base
/
net_helper
.
h
"
#
include
"
rtc_base
/
net_helpers
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
network_constants
.
h
"
#
include
"
rtc_base
/
network_monitor
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
socket_address_pair
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
virtual_socket_server
.
h
"
#
include
"
system_wrappers
/
include
/
metrics
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
scoped_key_value_config
.
h
"
using
rtc
:
:
IPAddress
;
using
rtc
:
:
SocketAddress
;
using
:
:
testing
:
:
Contains
;
using
:
:
testing
:
:
Not
;
#
define
MAYBE_SKIP_IPV4
\
if
(
!
rtc
:
:
HasIPv4Enabled
(
)
)
{
\
RTC_LOG
(
LS_INFO
)
<
<
"
No
IPv4
.
.
.
skipping
"
;
\
return
;
\
}
static
const
SocketAddress
kAnyAddr
(
"
0
.
0
.
0
.
0
"
0
)
;
static
const
SocketAddress
kClientAddr
(
"
11
.
11
.
11
.
11
"
0
)
;
static
const
SocketAddress
kClientAddr2
(
"
22
.
22
.
22
.
22
"
0
)
;
static
const
SocketAddress
kLoopbackAddr
(
"
127
.
0
.
0
.
1
"
0
)
;
static
const
SocketAddress
kPrivateAddr
(
"
192
.
168
.
1
.
11
"
0
)
;
static
const
SocketAddress
kPrivateAddr2
(
"
192
.
168
.
1
.
12
"
0
)
;
static
const
SocketAddress
kClientIPv6Addr
(
"
2401
:
fa00
:
4
:
1000
:
be30
:
5bff
:
fee5
:
c3
"
0
)
;
static
const
SocketAddress
kClientIPv6Addr2
(
"
2401
:
fa00
:
4
:
2000
:
be30
:
5bff
:
fee5
:
c3
"
0
)
;
static
const
SocketAddress
kClientIPv6Addr3
(
"
2401
:
fa00
:
4
:
3000
:
be30
:
5bff
:
fee5
:
c3
"
0
)
;
static
const
SocketAddress
kNatUdpAddr
(
"
77
.
77
.
77
.
77
"
rtc
:
:
NAT_SERVER_UDP_PORT
)
;
static
const
SocketAddress
kNatTcpAddr
(
"
77
.
77
.
77
.
77
"
rtc
:
:
NAT_SERVER_TCP_PORT
)
;
static
const
SocketAddress
kRemoteClientAddr
(
"
22
.
22
.
22
.
22
"
0
)
;
static
const
SocketAddress
kStunAddr
(
"
99
.
99
.
99
.
1
"
cricket
:
:
STUN_SERVER_PORT
)
;
static
const
SocketAddress
kTurnUdpIntAddr
(
"
99
.
99
.
99
.
4
"
3478
)
;
static
const
SocketAddress
kTurnUdpIntIPv6Addr
(
"
2402
:
fb00
:
4
:
1000
:
be30
:
5bff
:
fee5
:
c3
"
3479
)
;
static
const
SocketAddress
kTurnTcpIntAddr
(
"
99
.
99
.
99
.
5
"
3478
)
;
static
const
SocketAddress
kTurnTcpIntIPv6Addr
(
"
2402
:
fb00
:
4
:
2000
:
be30
:
5bff
:
fee5
:
c3
"
3479
)
;
static
const
SocketAddress
kTurnUdpExtAddr
(
"
99
.
99
.
99
.
6
"
0
)
;
static
const
int
kMinPort
=
10000
;
static
const
int
kMaxPort
=
10099
;
static
const
char
kIceUfrag0
[
]
=
"
UF00
"
;
static
const
char
kIcePwd0
[
]
=
"
TESTICEPWD00000000000000
"
;
static
const
char
kContentName
[
]
=
"
test
content
"
;
static
const
int
kDefaultAllocationTimeout
=
3000
;
static
const
char
kTurnUsername
[
]
=
"
test
"
;
static
const
char
kTurnPassword
[
]
=
"
test
"
;
static
const
int
kStunTimeoutMs
=
cricket
:
:
STUN_TOTAL_TIMEOUT
;
namespace
{
void
CheckStunKeepaliveIntervalOfAllReadyPorts
(
const
cricket
:
:
PortAllocatorSession
*
allocator_session
int
expected
)
{
auto
ready_ports
=
allocator_session
-
>
ReadyPorts
(
)
;
for
(
const
auto
*
port
:
ready_ports
)
{
if
(
port
-
>
Type
(
)
=
=
cricket
:
:
STUN_PORT_TYPE
|
|
(
port
-
>
Type
(
)
=
=
cricket
:
:
LOCAL_PORT_TYPE
&
&
port
-
>
GetProtocol
(
)
=
=
cricket
:
:
PROTO_UDP
)
)
{
EXPECT_EQ
(
static_cast
<
const
cricket
:
:
UDPPort
*
>
(
port
)
-
>
stun_keepalive_delay
(
)
expected
)
;
}
}
}
}
namespace
cricket
{
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
std
:
:
vector
<
Candidate
>
&
candidates
)
{
os
<
<
'
[
'
;
bool
first
=
true
;
for
(
const
Candidate
&
c
:
candidates
)
{
if
(
!
first
)
{
os
<
<
"
"
;
}
os
<
<
c
.
ToString
(
)
;
first
=
false
;
}
os
<
<
'
]
'
;
return
os
;
}
class
BasicPortAllocatorTestBase
:
public
:
:
testing
:
:
Test
public
sigslot
:
:
has_slots
<
>
{
public
:
BasicPortAllocatorTestBase
(
)
:
vss_
(
new
rtc
:
:
VirtualSocketServer
(
)
)
fss_
(
new
rtc
:
:
FirewallSocketServer
(
vss_
.
get
(
)
)
)
thread_
(
fss_
.
get
(
)
)
nat_factory_
(
vss_
.
get
(
)
kNatUdpAddr
kNatTcpAddr
)
nat_socket_factory_
(
new
rtc
:
:
BasicPacketSocketFactory
(
&
nat_factory_
)
)
stun_server_
(
TestStunServer
:
:
Create
(
fss_
.
get
(
)
kStunAddr
)
)
turn_server_
(
rtc
:
:
Thread
:
:
Current
(
)
fss_
.
get
(
)
kTurnUdpIntAddr
kTurnUdpExtAddr
)
candidate_allocation_done_
(
false
)
{
ServerAddresses
stun_servers
;
stun_servers
.
insert
(
kStunAddr
)
;
allocator_
=
std
:
:
make_unique
<
BasicPortAllocator
>
(
&
network_manager_
std
:
:
make_unique
<
rtc
:
:
BasicPacketSocketFactory
>
(
fss_
.
get
(
)
)
stun_servers
)
;
allocator_
-
>
Initialize
(
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
webrtc
:
:
metrics
:
:
Reset
(
)
;
}
void
AddInterface
(
const
SocketAddress
&
addr
)
{
network_manager_
.
AddInterface
(
addr
)
;
}
void
AddInterface
(
const
SocketAddress
&
addr
const
std
:
:
string
&
if_name
)
{
network_manager_
.
AddInterface
(
addr
if_name
)
;
}
void
AddInterface
(
const
SocketAddress
&
addr
const
std
:
:
string
&
if_name
rtc
:
:
AdapterType
type
)
{
network_manager_
.
AddInterface
(
addr
if_name
type
)
;
}
void
AddInterfaceAsDefaultSourceAddresss
(
const
SocketAddress
&
addr
)
{
AddInterface
(
addr
)
;
vss_
-
>
SetDefaultSourceAddress
(
addr
.
ipaddr
(
)
)
;
}
void
RemoveInterface
(
const
SocketAddress
&
addr
)
{
network_manager_
.
RemoveInterface
(
addr
)
;
}
bool
SetPortRange
(
int
min_port
int
max_port
)
{
return
allocator_
-
>
SetPortRange
(
min_port
max_port
)
;
}
void
ResetWithNoServersOrNat
(
)
{
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
std
:
:
make_unique
<
rtc
:
:
BasicPacketSocketFactory
>
(
fss_
.
get
(
)
)
)
)
;
allocator_
-
>
Initialize
(
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
}
void
ResetWithStunServerAndNat
(
const
rtc
:
:
SocketAddress
&
stun_server
)
{
ResetWithStunServer
(
stun_server
true
)
;
}
void
ResetWithStunServerNoNat
(
const
rtc
:
:
SocketAddress
&
stun_server
)
{
ResetWithStunServer
(
stun_server
false
)
;
}
void
ResetWithTurnServersNoNat
(
const
rtc
:
:
SocketAddress
&
udp_turn
const
rtc
:
:
SocketAddress
&
tcp_turn
)
{
ResetWithNoServersOrNat
(
)
;
AddTurnServers
(
udp_turn
tcp_turn
)
;
}
RelayServerConfig
CreateTurnServers
(
const
rtc
:
:
SocketAddress
&
udp_turn
const
rtc
:
:
SocketAddress
&
tcp_turn
)
{
RelayServerConfig
turn_server
;
RelayCredentials
credentials
(
kTurnUsername
kTurnPassword
)
;
turn_server
.
credentials
=
credentials
;
if
(
!
udp_turn
.
IsNil
(
)
)
{
turn_server
.
ports
.
push_back
(
ProtocolAddress
(
udp_turn
PROTO_UDP
)
)
;
}
if
(
!
tcp_turn
.
IsNil
(
)
)
{
turn_server
.
ports
.
push_back
(
ProtocolAddress
(
tcp_turn
PROTO_TCP
)
)
;
}
return
turn_server
;
}
void
AddTurnServers
(
const
rtc
:
:
SocketAddress
&
udp_turn
const
rtc
:
:
SocketAddress
&
tcp_turn
)
{
RelayServerConfig
turn_server
=
CreateTurnServers
(
udp_turn
tcp_turn
)
;
allocator_
-
>
AddTurnServer
(
turn_server
)
;
}
bool
CreateSession
(
int
component
)
{
session_
=
CreateSession
(
"
session
"
component
)
;
if
(
!
session_
)
{
return
false
;
}
return
true
;
}
bool
CreateSession
(
int
component
const
std
:
:
string
&
content_name
)
{
session_
=
CreateSession
(
"
session
"
content_name
component
)
;
if
(
!
session_
)
{
return
false
;
}
return
true
;
}
std
:
:
unique_ptr
<
PortAllocatorSession
>
CreateSession
(
const
std
:
:
string
&
sid
int
component
)
{
return
CreateSession
(
sid
kContentName
component
)
;
}
std
:
:
unique_ptr
<
PortAllocatorSession
>
CreateSession
(
const
std
:
:
string
&
sid
const
std
:
:
string
&
content_name
int
component
)
{
return
CreateSession
(
sid
content_name
component
kIceUfrag0
kIcePwd0
)
;
}
std
:
:
unique_ptr
<
PortAllocatorSession
>
CreateSession
(
const
std
:
:
string
&
sid
const
std
:
:
string
&
content_name
int
component
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
{
std
:
:
unique_ptr
<
PortAllocatorSession
>
session
=
allocator_
-
>
CreateSession
(
content_name
component
ice_ufrag
ice_pwd
)
;
session
-
>
SignalPortReady
.
connect
(
this
&
BasicPortAllocatorTestBase
:
:
OnPortReady
)
;
session
-
>
SignalPortsPruned
.
connect
(
this
&
BasicPortAllocatorTestBase
:
:
OnPortsPruned
)
;
session
-
>
SignalCandidatesReady
.
connect
(
this
&
BasicPortAllocatorTestBase
:
:
OnCandidatesReady
)
;
session
-
>
SignalCandidatesRemoved
.
connect
(
this
&
BasicPortAllocatorTestBase
:
:
OnCandidatesRemoved
)
;
session
-
>
SignalCandidatesAllocationDone
.
connect
(
this
&
BasicPortAllocatorTestBase
:
:
OnCandidatesAllocationDone
)
;
return
session
;
}
static
bool
AddressMatch
(
const
SocketAddress
&
address
const
SocketAddress
&
pattern
)
{
return
address
.
ipaddr
(
)
=
=
pattern
.
ipaddr
(
)
&
&
(
(
pattern
.
port
(
)
=
=
0
&
&
(
address
.
port
(
)
!
=
0
|
|
IPIsAny
(
address
.
ipaddr
(
)
)
)
)
|
|
(
pattern
.
port
(
)
!
=
0
&
&
address
.
port
(
)
=
=
pattern
.
port
(
)
)
)
;
}
static
int
CountPorts
(
const
std
:
:
vector
<
PortInterface
*
>
&
ports
const
std
:
:
string
&
type
ProtocolType
protocol
const
SocketAddress
&
client_addr
)
{
return
absl
:
:
c_count_if
(
ports
[
type
protocol
client_addr
]
(
PortInterface
*
port
)
{
return
port
-
>
Type
(
)
=
=
type
&
&
port
-
>
GetProtocol
(
)
=
=
protocol
&
&
port
-
>
Network
(
)
-
>
GetBestIP
(
)
=
=
client_addr
.
ipaddr
(
)
;
}
)
;
}
static
int
CountCandidates
(
const
std
:
:
vector
<
Candidate
>
&
candidates
const
std
:
:
string
&
type
const
std
:
:
string
&
proto
const
SocketAddress
&
addr
)
{
return
absl
:
:
c_count_if
(
candidates
[
type
proto
addr
]
(
const
Candidate
&
c
)
{
return
c
.
type
(
)
=
=
type
&
&
c
.
protocol
(
)
=
=
proto
&
&
AddressMatch
(
c
.
address
(
)
addr
)
;
}
)
;
}
static
bool
FindCandidate
(
const
std
:
:
vector
<
Candidate
>
&
candidates
const
std
:
:
string
&
type
const
std
:
:
string
&
proto
const
SocketAddress
&
addr
Candidate
*
found
)
{
auto
it
=
absl
:
:
c_find_if
(
candidates
[
type
proto
addr
]
(
const
Candidate
&
c
)
{
return
c
.
type
(
)
=
=
type
&
&
c
.
protocol
(
)
=
=
proto
&
&
AddressMatch
(
c
.
address
(
)
addr
)
;
}
)
;
if
(
it
!
=
candidates
.
end
(
)
&
&
found
)
{
*
found
=
*
it
;
}
return
it
!
=
candidates
.
end
(
)
;
}
static
bool
HasCandidate
(
const
std
:
:
vector
<
Candidate
>
&
candidates
const
std
:
:
string
&
type
const
std
:
:
string
&
proto
const
SocketAddress
&
addr
)
{
return
FindCandidate
(
candidates
type
proto
addr
nullptr
)
;
}
static
bool
HasCandidateWithRelatedAddr
(
const
std
:
:
vector
<
Candidate
>
&
candidates
const
std
:
:
string
&
type
const
std
:
:
string
&
proto
const
SocketAddress
&
addr
const
SocketAddress
&
related_addr
)
{
return
absl
:
:
c_any_of
(
candidates
[
type
proto
addr
related_addr
]
(
const
Candidate
&
c
)
{
return
c
.
type
(
)
=
=
type
&
&
c
.
protocol
(
)
=
=
proto
&
&
AddressMatch
(
c
.
address
(
)
addr
)
&
&
AddressMatch
(
c
.
related_address
(
)
related_addr
)
;
}
)
;
}
static
bool
CheckPort
(
const
rtc
:
:
SocketAddress
&
addr
int
min_port
int
max_port
)
{
return
(
addr
.
port
(
)
>
=
min_port
&
&
addr
.
port
(
)
<
=
max_port
)
;
}
void
OnCandidatesAllocationDone
(
PortAllocatorSession
*
session
)
{
if
(
session
=
=
session_
.
get
(
)
)
{
ASSERT_FALSE
(
candidate_allocation_done_
)
;
candidate_allocation_done_
=
true
;
}
EXPECT_TRUE
(
session
-
>
CandidatesAllocationDone
(
)
)
;
}
void
CheckSendBufferSizesOfAllPorts
(
int
expected
)
{
std
:
:
vector
<
PortInterface
*
>
:
:
iterator
it
;
for
(
it
=
ports_
.
begin
(
)
;
it
<
ports_
.
end
(
)
;
+
+
it
)
{
int
send_buffer_size
;
if
(
expected
=
=
-
1
)
{
EXPECT_EQ
(
SOCKET_ERROR
(
*
it
)
-
>
GetOption
(
rtc
:
:
Socket
:
:
OPT_SNDBUF
&
send_buffer_size
)
)
;
}
else
{
EXPECT_EQ
(
0
(
*
it
)
-
>
GetOption
(
rtc
:
:
Socket
:
:
OPT_SNDBUF
&
send_buffer_size
)
)
;
ASSERT_EQ
(
expected
send_buffer_size
)
;
}
}
}
rtc
:
:
VirtualSocketServer
*
virtual_socket_server
(
)
{
return
vss_
.
get
(
)
;
}
protected
:
BasicPortAllocator
&
allocator
(
)
{
return
*
allocator_
;
}
void
OnPortReady
(
PortAllocatorSession
*
ses
PortInterface
*
port
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
OnPortReady
:
"
<
<
port
-
>
ToString
(
)
;
ports_
.
push_back
(
port
)
;
auto
ready_ports
=
ses
-
>
ReadyPorts
(
)
;
EXPECT_THAT
(
ready_ports
Contains
(
port
)
)
;
}
void
OnPortsPruned
(
PortAllocatorSession
*
ses
const
std
:
:
vector
<
PortInterface
*
>
&
pruned_ports
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
Number
of
ports
pruned
:
"
<
<
pruned_ports
.
size
(
)
;
auto
ready_ports
=
ses
-
>
ReadyPorts
(
)
;
auto
new_end
=
ports_
.
end
(
)
;
for
(
PortInterface
*
port
:
pruned_ports
)
{
new_end
=
std
:
:
remove
(
ports_
.
begin
(
)
new_end
port
)
;
EXPECT_THAT
(
ready_ports
Not
(
Contains
(
port
)
)
)
;
}
ports_
.
erase
(
new_end
ports_
.
end
(
)
)
;
}
void
OnCandidatesReady
(
PortAllocatorSession
*
ses
const
std
:
:
vector
<
Candidate
>
&
candidates
)
{
for
(
const
Candidate
&
candidate
:
candidates
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
OnCandidatesReady
:
"
<
<
candidate
.
ToString
(
)
;
EXPECT_EQ
(
ICE_CANDIDATE_COMPONENT_RTP
candidate
.
component
(
)
)
;
candidates_
.
push_back
(
candidate
)
;
}
auto
ses_candidates
=
ses
-
>
ReadyCandidates
(
)
;
for
(
const
Candidate
&
candidate
:
candidates
)
{
EXPECT_THAT
(
ses_candidates
Contains
(
candidate
)
)
;
}
}
void
OnCandidatesRemoved
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
Candidate
>
&
removed_candidates
)
{
auto
new_end
=
std
:
:
remove_if
(
candidates_
.
begin
(
)
candidates_
.
end
(
)
[
removed_candidates
]
(
Candidate
&
candidate
)
{
for
(
const
Candidate
&
removed_candidate
:
removed_candidates
)
{
if
(
candidate
.
MatchesForRemoval
(
removed_candidate
)
)
{
return
true
;
}
}
return
false
;
}
)
;
candidates_
.
erase
(
new_end
candidates_
.
end
(
)
)
;
}
bool
HasRelayAddress
(
const
ProtocolAddress
&
proto_addr
)
{
for
(
size_t
i
=
0
;
i
<
allocator_
-
>
turn_servers
(
)
.
size
(
)
;
+
+
i
)
{
RelayServerConfig
server_config
=
allocator_
-
>
turn_servers
(
)
[
i
]
;
PortList
:
:
const_iterator
relay_port
;
for
(
relay_port
=
server_config
.
ports
.
begin
(
)
;
relay_port
!
=
server_config
.
ports
.
end
(
)
;
+
+
relay_port
)
{
if
(
proto_addr
.
address
=
=
relay_port
-
>
address
&
&
proto_addr
.
proto
=
=
relay_port
-
>
proto
)
return
true
;
}
}
return
false
;
}
void
ResetWithStunServer
(
const
rtc
:
:
SocketAddress
&
stun_server
bool
with_nat
)
{
if
(
with_nat
)
{
nat_server_
.
reset
(
new
rtc
:
:
NATServer
(
rtc
:
:
NAT_OPEN_CONE
vss_
.
get
(
)
kNatUdpAddr
kNatTcpAddr
vss_
.
get
(
)
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
)
)
;
}
else
{
nat_socket_factory_
=
std
:
:
make_unique
<
rtc
:
:
BasicPacketSocketFactory
>
(
fss_
.
get
(
)
)
;
}
ServerAddresses
stun_servers
;
if
(
!
stun_server
.
IsNil
(
)
)
{
stun_servers
.
insert
(
stun_server
)
;
}
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
nat_socket_factory_
.
get
(
)
stun_servers
)
)
;
allocator_
-
>
Initialize
(
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
}
std
:
:
unique_ptr
<
rtc
:
:
VirtualSocketServer
>
vss_
;
std
:
:
unique_ptr
<
rtc
:
:
FirewallSocketServer
>
fss_
;
rtc
:
:
AutoSocketServerThread
thread_
;
std
:
:
unique_ptr
<
rtc
:
:
NATServer
>
nat_server_
;
rtc
:
:
NATSocketFactory
nat_factory_
;
std
:
:
unique_ptr
<
rtc
:
:
BasicPacketSocketFactory
>
nat_socket_factory_
;
std
:
:
unique_ptr
<
TestStunServer
>
stun_server_
;
TestTurnServer
turn_server_
;
rtc
:
:
FakeNetworkManager
network_manager_
;
std
:
:
unique_ptr
<
BasicPortAllocator
>
allocator_
;
std
:
:
unique_ptr
<
PortAllocatorSession
>
session_
;
std
:
:
vector
<
PortInterface
*
>
ports_
;
std
:
:
vector
<
Candidate
>
candidates_
;
bool
candidate_allocation_done_
;
}
;
class
BasicPortAllocatorTestWithRealClock
:
public
BasicPortAllocatorTestBase
{
}
;
class
FakeClockBase
{
public
:
rtc
:
:
ScopedFakeClock
fake_clock
;
}
;
class
BasicPortAllocatorTest
:
public
FakeClockBase
public
BasicPortAllocatorTestBase
{
public
:
void
CheckDisableAdapterEnumeration
(
uint32_t
total_ports
const
rtc
:
:
IPAddress
&
host_candidate_addr
const
rtc
:
:
IPAddress
&
stun_candidate_addr
const
rtc
:
:
IPAddress
&
relay_candidate_udp_transport_addr
const
rtc
:
:
IPAddress
&
relay_candidate_tcp_transport_addr
)
{
network_manager_
.
set_default_local_addresses
(
kPrivateAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
)
;
if
(
!
session_
)
{
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
}
session_
-
>
set_flags
(
session_
-
>
flags
(
)
|
PORTALLOCATOR_DISABLE_ADAPTER_ENUMERATION
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
allocator
(
)
.
set_allow_tcp_listen
(
false
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
uint32_t
total_candidates
=
0
;
if
(
!
host_candidate_addr
.
IsNil
(
)
)
{
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
rtc
:
:
SocketAddress
(
kPrivateAddr
.
ipaddr
(
)
0
)
)
)
;
+
+
total_candidates
;
}
if
(
!
stun_candidate_addr
.
IsNil
(
)
)
{
rtc
:
:
SocketAddress
related_address
(
host_candidate_addr
0
)
;
if
(
host_candidate_addr
.
IsNil
(
)
)
{
related_address
.
SetIP
(
rtc
:
:
GetAnyIP
(
stun_candidate_addr
.
family
(
)
)
)
;
}
EXPECT_TRUE
(
HasCandidateWithRelatedAddr
(
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
stun_candidate_addr
0
)
related_address
)
)
;
+
+
total_candidates
;
}
if
(
!
relay_candidate_udp_transport_addr
.
IsNil
(
)
)
{
EXPECT_TRUE
(
HasCandidateWithRelatedAddr
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
relay_candidate_udp_transport_addr
0
)
rtc
:
:
SocketAddress
(
stun_candidate_addr
0
)
)
)
;
+
+
total_candidates
;
}
if
(
!
relay_candidate_tcp_transport_addr
.
IsNil
(
)
)
{
EXPECT_TRUE
(
HasCandidateWithRelatedAddr
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
relay_candidate_tcp_transport_addr
0
)
rtc
:
:
SocketAddress
(
stun_candidate_addr
0
)
)
)
;
+
+
total_candidates
;
}
EXPECT_EQ
(
total_candidates
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
total_ports
ports_
.
size
(
)
)
;
}
void
TestIPv6TurnPortPrunesIPv4TurnPort
(
)
{
turn_server_
.
AddInternalSocket
(
kTurnUdpIntIPv6Addr
PROTO_UDP
)
;
AddInterface
(
kClientAddr
"
net1
"
)
;
AddInterface
(
kClientIPv6Addr
"
net1
"
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
std
:
:
make_unique
<
rtc
:
:
BasicPacketSocketFactory
>
(
fss_
.
get
(
)
)
)
)
;
allocator_
-
>
Initialize
(
)
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
0
webrtc
:
:
PRUNE_BASED_ON_PRIORITY
)
;
AddTurnServers
(
kTurnUdpIntIPv6Addr
rtc
:
:
SocketAddress
(
)
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_ENABLE_IPV6
|
PORTALLOCATOR_DISABLE_TCP
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
session_
-
>
ReadyPorts
(
)
.
size
(
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientIPv6Addr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kClientIPv6Addr
)
)
;
EXPECT_EQ
(
0
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kClientAddr
)
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
const
std
:
:
vector
<
Candidate
>
&
ready_candidates
=
session_
-
>
ReadyCandidates
(
)
;
EXPECT_EQ
(
3U
ready_candidates
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
)
;
}
void
TestTurnPortPrunesWithUdpAndTcpPorts
(
webrtc
:
:
PortPrunePolicy
prune_policy
bool
tcp_pruned
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddInterface
(
kClientAddr
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
std
:
:
make_unique
<
rtc
:
:
BasicPacketSocketFactory
>
(
fss_
.
get
(
)
)
)
)
;
allocator_
-
>
Initialize
(
)
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
0
prune_policy
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
session_
-
>
ReadyPorts
(
)
.
size
(
)
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientAddr
)
)
;
int
num_udp_ports
=
tcp_pruned
?
1
:
0
;
EXPECT_EQ
(
num_udp_ports
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kClientAddr
)
)
;
EXPECT_EQ
(
1
-
num_udp_ports
CountPorts
(
ports_
"
relay
"
PROTO_TCP
kClientAddr
)
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
const
std
:
:
vector
<
Candidate
>
&
ready_candidates
=
session_
-
>
ReadyCandidates
(
)
;
EXPECT_EQ
(
2U
ready_candidates
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
)
;
}
void
TestEachInterfaceHasItsOwnTurnPorts
(
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
turn_server_
.
AddInternalSocket
(
kTurnUdpIntIPv6Addr
PROTO_UDP
)
;
turn_server_
.
AddInternalSocket
(
kTurnTcpIntIPv6Addr
PROTO_TCP
)
;
AddInterface
(
kClientAddr
"
net1
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
kClientIPv6Addr
"
net1
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
kClientAddr2
"
net2
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
AddInterface
(
kClientIPv6Addr2
"
net2
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
std
:
:
make_unique
<
rtc
:
:
BasicPacketSocketFactory
>
(
fss_
.
get
(
)
)
)
)
;
allocator_
-
>
Initialize
(
)
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
0
webrtc
:
:
PRUNE_BASED_ON_PRIORITY
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
AddTurnServers
(
kTurnUdpIntIPv6Addr
kTurnTcpIntIPv6Addr
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_ENABLE_IPV6
|
PORTALLOCATOR_ENABLE_IPV6_ON_WIFI
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
10U
session_
-
>
ReadyPorts
(
)
.
size
(
)
)
;
EXPECT_EQ
(
10U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientAddr2
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientIPv6Addr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientIPv6Addr2
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_TCP
kClientAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_TCP
kClientAddr2
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_TCP
kClientIPv6Addr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_TCP
kClientIPv6Addr2
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kClientIPv6Addr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kClientIPv6Addr2
)
)
;
EXPECT_EQ
(
10U
candidates_
.
size
(
)
)
;
const
std
:
:
vector
<
Candidate
>
&
ready_candidates
=
session_
-
>
ReadyCandidates
(
)
;
EXPECT_EQ
(
10U
ready_candidates
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
local
"
"
udp
"
kClientAddr2
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
local
"
"
udp
"
kClientIPv6Addr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
local
"
"
udp
"
kClientIPv6Addr2
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
local
"
"
tcp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
local
"
"
tcp
"
kClientAddr2
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
local
"
"
tcp
"
kClientIPv6Addr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
local
"
"
tcp
"
kClientIPv6Addr2
)
)
;
EXPECT_TRUE
(
HasCandidate
(
ready_candidates
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
)
;
}
}
;
TEST_F
(
BasicPortAllocatorTest
TestBasic
)
{
EXPECT_EQ
(
&
network_manager_
allocator
(
)
.
network_manager
(
)
)
;
EXPECT_EQ
(
kStunAddr
*
allocator
(
)
.
stun_servers
(
)
.
begin
(
)
)
;
ASSERT_EQ
(
0u
allocator
(
)
.
turn_servers
(
)
.
size
(
)
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
EXPECT_FALSE
(
session_
-
>
CandidatesAllocationDone
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestIgnoreOnlyLoopbackNetworkByDefault
)
{
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345600U
)
0
)
"
test_eth0
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345601U
)
0
)
"
test_wlan0
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345602U
)
0
)
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345603U
)
0
)
"
test_vpn0
"
rtc
:
:
ADAPTER_TYPE_VPN
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345604U
)
0
)
"
test_lo
"
rtc
:
:
ADAPTER_TYPE_LOOPBACK
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
4U
candidates_
.
size
(
)
)
;
for
(
const
Candidate
&
candidate
:
candidates_
)
{
EXPECT_LT
(
candidate
.
address
(
)
.
ip
(
)
0x12345604U
)
;
}
}
TEST_F
(
BasicPortAllocatorTest
TestIgnoreNetworksAccordingToIgnoreMask
)
{
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345600U
)
0
)
"
test_eth0
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345601U
)
0
)
"
test_wlan0
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345602U
)
0
)
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
allocator_
-
>
SetNetworkIgnoreMask
(
rtc
:
:
ADAPTER_TYPE_ETHERNET
|
rtc
:
:
ADAPTER_TYPE_LOOPBACK
|
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
0x12345602U
candidates_
[
0
]
.
address
(
)
.
ip
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
WifiUsedInsteadOfCellWhenCostlyNetworksDisabled
)
{
SocketAddress
wifi
(
IPAddress
(
0x12345600U
)
0
)
;
SocketAddress
cell
(
IPAddress
(
0x12345601U
)
0
)
;
AddInterface
(
wifi
"
test_wlan0
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
cell
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
allocator
(
)
.
set_flags
(
cricket
:
:
PORTALLOCATOR_DISABLE_STUN
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
|
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
|
cricket
:
:
PORTALLOCATOR_DISABLE_COSTLY_NETWORKS
)
;
ASSERT_TRUE
(
CreateSession
(
cricket
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
wifi
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
UnknownInterfaceUsedInsteadOfCellWhenCostlyNetworksDisabled
)
{
SocketAddress
cell
(
IPAddress
(
0x12345601U
)
0
)
;
SocketAddress
unknown1
(
IPAddress
(
0x12345602U
)
0
)
;
SocketAddress
unknown2
(
IPAddress
(
0x12345603U
)
0
)
;
AddInterface
(
cell
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
AddInterface
(
unknown1
"
test_unknown0
"
rtc
:
:
ADAPTER_TYPE_UNKNOWN
)
;
AddInterface
(
unknown2
"
test_unknown1
"
rtc
:
:
ADAPTER_TYPE_UNKNOWN
)
;
allocator
(
)
.
set_flags
(
cricket
:
:
PORTALLOCATOR_DISABLE_STUN
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
|
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
|
cricket
:
:
PORTALLOCATOR_DISABLE_COSTLY_NETWORKS
)
;
ASSERT_TRUE
(
CreateSession
(
cricket
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
unknown1
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
unknown2
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
WifiUsedInsteadOfUnknownOrCellWhenCostlyNetworksDisabled
)
{
SocketAddress
wifi
(
IPAddress
(
0x12345600U
)
0
)
;
SocketAddress
cellular
(
IPAddress
(
0x12345601U
)
0
)
;
SocketAddress
unknown1
(
IPAddress
(
0x12345602U
)
0
)
;
SocketAddress
unknown2
(
IPAddress
(
0x12345603U
)
0
)
;
AddInterface
(
wifi
"
test_wlan0
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
cellular
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
AddInterface
(
unknown1
"
test_unknown0
"
rtc
:
:
ADAPTER_TYPE_UNKNOWN
)
;
AddInterface
(
unknown2
"
test_unknown1
"
rtc
:
:
ADAPTER_TYPE_UNKNOWN
)
;
allocator
(
)
.
set_flags
(
cricket
:
:
PORTALLOCATOR_DISABLE_STUN
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
|
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
|
cricket
:
:
PORTALLOCATOR_DISABLE_COSTLY_NETWORKS
)
;
ASSERT_TRUE
(
CreateSession
(
cricket
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
wifi
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
CellUsedWhenCostlyNetworksDisabledButThereAreNoOtherInterfaces
)
{
SocketAddress
cellular
(
IPAddress
(
0x12345601U
)
0
)
;
AddInterface
(
cellular
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
allocator
(
)
.
set_flags
(
cricket
:
:
PORTALLOCATOR_DISABLE_STUN
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
|
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
|
cricket
:
:
PORTALLOCATOR_DISABLE_COSTLY_NETWORKS
)
;
ASSERT_TRUE
(
CreateSession
(
cricket
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
cellular
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
CellNotRemovedWhenCostlyNetworksDisabledAndWifiIsLinkLocal
)
{
SocketAddress
wifi_link_local
(
"
169
.
254
.
0
.
1
"
0
)
;
SocketAddress
cellular
(
IPAddress
(
0x12345601U
)
0
)
;
AddInterface
(
wifi_link_local
"
test_wlan0
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
cellular
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
allocator
(
)
.
set_flags
(
cricket
:
:
PORTALLOCATOR_DISABLE_STUN
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
|
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
|
cricket
:
:
PORTALLOCATOR_DISABLE_COSTLY_NETWORKS
)
;
ASSERT_TRUE
(
CreateSession
(
cricket
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
wifi_link_local
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
cellular
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
CellRemovedWhenCostlyNetworksDisabledAndBothWifisPresent
)
{
SocketAddress
wifi
(
IPAddress
(
0x12345600U
)
0
)
;
SocketAddress
wifi_link_local
(
"
169
.
254
.
0
.
1
"
0
)
;
SocketAddress
cellular
(
IPAddress
(
0x12345601U
)
0
)
;
AddInterface
(
wifi
"
test_wlan0
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
wifi_link_local
"
test_wlan1
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
cellular
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
allocator
(
)
.
set_flags
(
cricket
:
:
PORTALLOCATOR_DISABLE_STUN
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
|
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
|
cricket
:
:
PORTALLOCATOR_DISABLE_COSTLY_NETWORKS
)
;
ASSERT_TRUE
(
CreateSession
(
cricket
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
wifi
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
wifi_link_local
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
EthernetIsNotFilteredOutWhenCostlyNetworksDisabledAndVpnPresent
)
{
AddInterface
(
kClientAddr
"
eth0
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
AddInterface
(
kClientAddr2
"
tap0
"
rtc
:
:
ADAPTER_TYPE_VPN
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_DISABLE_COSTLY_NETWORKS
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
ASSERT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
ports_
[
0
]
-
>
Network
(
)
-
>
name
(
)
"
eth0
"
)
;
EXPECT_EQ
(
ports_
[
1
]
-
>
Network
(
)
-
>
name
(
)
"
eth0
"
)
;
}
TEST_F
(
BasicPortAllocatorTest
MaxIpv6NetworksLimitEnforced
)
{
allocator
(
)
.
set_max_ipv6_networks
(
2
)
;
AddInterface
(
kClientIPv6Addr
"
eth0
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
AddInterface
(
kClientIPv6Addr2
"
eth1
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
AddInterface
(
kClientIPv6Addr3
"
eth2
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_ENABLE_IPV6
|
PORTALLOCATOR_DISABLE_TCP
|
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
)
;
ASSERT_TRUE
(
CreateSession
(
cricket
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientIPv6Addr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientIPv6Addr2
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
MaxIpv6NetworksLimitDoesNotImpactIpv4Networks
)
{
allocator
(
)
.
set_max_ipv6_networks
(
1
)
;
AddInterface
(
kClientIPv6Addr
"
eth0
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
AddInterface
(
kClientIPv6Addr2
"
eth1
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
AddInterface
(
kClientAddr
"
eth2
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
AddInterface
(
kClientAddr2
"
eth3
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_ENABLE_IPV6
|
PORTALLOCATOR_DISABLE_TCP
|
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
)
;
ASSERT_TRUE
(
CreateSession
(
cricket
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientIPv6Addr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr2
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestLoopbackNetworkInterface
)
{
AddInterface
(
kLoopbackAddr
"
test_loopback
"
rtc
:
:
ADAPTER_TYPE_LOOPBACK
)
;
allocator_
-
>
SetNetworkIgnoreMask
(
0
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsWithMinimumStepDelay
)
{
AddInterface
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
stun
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientAddr
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSameNetworkDownAndUpWhenSessionNotStopped
)
{
std
:
:
string
if_name
(
"
test_net0
"
)
;
AddInterface
(
kClientAddr
if_name
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
candidate_allocation_done_
=
false
;
candidates_
.
clear
(
)
;
ports_
.
clear
(
)
;
fss_
-
>
set_tcp_sockets_enabled
(
false
)
;
fss_
-
>
set_udp_sockets_enabled
(
false
)
;
RemoveInterface
(
kClientAddr
)
;
SIMULATED_WAIT
(
false
1000
fake_clock
)
;
EXPECT_EQ
(
0U
candidates_
.
size
(
)
)
;
ports_
.
clear
(
)
;
candidate_allocation_done_
=
false
;
fss_
-
>
set_tcp_sockets_enabled
(
true
)
;
fss_
-
>
set_udp_sockets_enabled
(
true
)
;
AddInterface
(
kClientAddr
if_name
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSameNetworkDownAndUpWhenSessionStopped
)
{
std
:
:
string
if_name
(
"
test_net0
"
)
;
AddInterface
(
kClientAddr
if_name
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
session_
-
>
StopGettingPorts
(
)
;
candidates_
.
clear
(
)
;
ports_
.
clear
(
)
;
RemoveInterface
(
kClientAddr
)
;
SIMULATED_WAIT
(
false
1000
fake_clock
)
;
EXPECT_EQ
(
0U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
0U
ports_
.
size
(
)
)
;
AddInterface
(
kClientAddr
if_name
)
;
SIMULATED_WAIT
(
false
1000
fake_clock
)
;
EXPECT_EQ
(
0U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
0U
ports_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
CandidatesRegatheredAfterBindingFails
)
{
ResetWithNoServersOrNat
(
)
;
std
:
:
string
if_name
(
"
test_net0
"
)
;
AddInterface
(
kClientAddr
if_name
)
;
fss_
-
>
set_tcp_sockets_enabled
(
false
)
;
fss_
-
>
set_udp_sockets_enabled
(
false
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
ASSERT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientAddr
)
)
;
candidate_allocation_done_
=
false
;
fss_
-
>
set_tcp_sockets_enabled
(
true
)
;
fss_
-
>
set_udp_sockets_enabled
(
true
)
;
AddInterface
(
kClientAddr
if_name
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
ASSERT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientAddr
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsWithOneSecondStepDelay
)
{
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_step_delay
(
kDefaultStepDelay
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_SIMULATED_WAIT
(
2U
candidates_
.
size
(
)
1000
fake_clock
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
ASSERT_EQ_SIMULATED_WAIT
(
3U
candidates_
.
size
(
)
2000
fake_clock
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
ASSERT_EQ_SIMULATED_WAIT
(
3U
candidates_
.
size
(
)
1500
fake_clock
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientAddr
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
session_
-
>
StopGettingPorts
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSetupVideoRtpPortsWithNormalSendBuffers
)
{
AddInterface
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
CN_VIDEO
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
session_
-
>
StopGettingPorts
(
)
;
CheckSendBufferSizesOfAllPorts
(
-
1
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestStopGetAllPorts
)
{
AddInterface
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_SIMULATED_WAIT
(
2U
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
session_
-
>
StopGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsPortRange
)
{
AddInterface
(
kClientAddr
)
;
EXPECT_FALSE
(
SetPortRange
(
kMaxPort
kMinPort
)
)
;
EXPECT_TRUE
(
SetPortRange
(
0
0
)
)
;
EXPECT_TRUE
(
SetPortRange
(
kMinPort
kMaxPort
)
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
int
num_nonrelay_candidates
=
0
;
for
(
const
Candidate
&
candidate
:
candidates_
)
{
if
(
candidate
.
type
(
)
!
=
RELAY_PORT_TYPE
)
{
EXPECT_TRUE
(
CheckPort
(
candidate
.
address
(
)
kMinPort
kMaxPort
)
)
;
+
+
num_nonrelay_candidates
;
}
}
EXPECT_EQ
(
3
num_nonrelay_candidates
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsNoAdapters
)
{
ResetWithStunServerAndNat
(
kStunAddr
)
;
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
AddTurnServers
(
kTurnUdpIntIPv6Addr
kTurnTcpIntIPv6Addr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
stun
"
PROTO_UDP
kAnyAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_TCP
kAnyAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kAnyAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_TCP
kAnyAddr
)
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
)
)
;
EXPECT_EQ
(
2
CountCandidates
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationWithoutNatRelayTransportOnly
)
{
ResetWithStunServerNoNat
(
kStunAddr
)
;
allocator
(
)
.
SetCandidateFilter
(
CF_RELAY
)
;
CheckDisableAdapterEnumeration
(
0U
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationBehindNatMultipleInterfaces
)
{
AddInterface
(
kPrivateAddr
)
;
AddInterface
(
kPrivateAddr2
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_ENABLE_IPV6
)
;
CheckDisableAdapterEnumeration
(
5U
kPrivateAddr
.
ipaddr
(
)
kNatUdpAddr
.
ipaddr
(
)
kTurnUdpExtAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationBehindNatWithTcp
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddInterface
(
kPrivateAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
CheckDisableAdapterEnumeration
(
4U
kPrivateAddr
.
ipaddr
(
)
kNatUdpAddr
.
ipaddr
(
)
kTurnUdpExtAddr
.
ipaddr
(
)
kTurnUdpExtAddr
.
ipaddr
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationWithoutNatOrServers
)
{
ResetWithNoServersOrNat
(
)
;
CheckDisableAdapterEnumeration
(
2U
kPrivateAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationWithoutNatLocalhostCandidateDisabled
)
{
ResetWithStunServerNoNat
(
kStunAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_DEFAULT_LOCAL_CANDIDATE
)
;
CheckDisableAdapterEnumeration
(
2U
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationWithoutNatLocalhostCandDisabledDiffRoute
)
{
ResetWithStunServerNoNat
(
kStunAddr
)
;
AddInterfaceAsDefaultSourceAddresss
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_DEFAULT_LOCAL_CANDIDATE
)
;
CheckDisableAdapterEnumeration
(
2U
rtc
:
:
IPAddress
(
)
kClientAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationWithNatLocalhostCandidateDisabled
)
{
ResetWithStunServerAndNat
(
kStunAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_DEFAULT_LOCAL_CANDIDATE
)
;
CheckDisableAdapterEnumeration
(
2U
rtc
:
:
IPAddress
(
)
kNatUdpAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableUdpTurn
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_UDP_RELAY
|
PORTALLOCATOR_DISABLE_UDP
|
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
Candidate
turn_candidate
;
EXPECT_TRUE
(
FindCandidate
(
candidates_
"
relay
"
"
udp
"
kTurnUdpExtAddr
&
turn_candidate
)
)
;
EXPECT_EQ
(
TCP_PROTOCOL_NAME
turn_candidate
.
relay_protocol
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientAddr
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAllPorts
)
{
AddInterface
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_UDP
|
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
1000
fake_clock
)
;
EXPECT_EQ
(
0U
candidates_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsNoUdpSockets
)
{
AddInterface
(
kClientAddr
)
;
fss_
-
>
set_udp_sockets_enabled
(
false
)
;
ASSERT_TRUE
(
CreateSession
(
1
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientAddr
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsNoUdpSocketsNoTcpListen
)
{
AddInterface
(
kClientAddr
)
;
fss_
-
>
set_udp_sockets_enabled
(
false
)
;
fss_
-
>
set_tcp_listen_enabled
(
false
)
;
ASSERT_TRUE
(
CreateSession
(
1
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientAddr
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsNoSockets
)
{
AddInterface
(
kClientAddr
)
;
fss_
-
>
set_tcp_sockets_enabled
(
false
)
;
fss_
-
>
set_udp_sockets_enabled
(
false
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
SIMULATED_WAIT
(
candidates_
.
size
(
)
>
0
2000
fake_clock
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsNoUdpAllowed
)
{
fss_
-
>
AddRule
(
false
rtc
:
:
FP_UDP
rtc
:
:
FD_ANY
kClientAddr
)
;
AddInterface
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_EQ_SIMULATED_WAIT
(
2U
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientAddr
)
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
cricket
:
:
STUN_TOTAL_TIMEOUT
fake_clock
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestCandidatePriorityOfMultipleInterfaces
)
{
AddInterface
(
kClientAddr
)
;
AddInterface
(
kClientAddr2
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_DISABLE_TCP
|
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
ASSERT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_NE
(
candidates_
[
0
]
.
priority
(
)
candidates_
[
1
]
.
priority
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsRestarts
)
{
AddInterface
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSessionUsesOwnCandidateFilter
)
{
AddInterface
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
allocator
(
)
.
SetCandidateFilter
(
CF_RELAY
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestCandidateFilterWithRelayOnly
)
{
AddInterface
(
kClientAddr
)
;
ResetWithTurnServersNoNat
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator
(
)
.
SetCandidateFilter
(
CF_RELAY
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
std
:
:
string
(
RELAY_PORT_TYPE
)
candidates_
[
0
]
.
type
(
)
)
;
EXPECT_EQ
(
candidates_
[
0
]
.
related_address
(
)
rtc
:
:
EmptySocketAddressWithFamily
(
candidates_
[
0
]
.
address
(
)
.
family
(
)
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestCandidateFilterWithHostOnly
)
{
AddInterface
(
kClientAddr
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
allocator
(
)
.
SetCandidateFilter
(
CF_HOST
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
for
(
const
Candidate
&
candidate
:
candidates_
)
{
EXPECT_EQ
(
std
:
:
string
(
LOCAL_PORT_TYPE
)
candidate
.
type
(
)
)
;
}
}
TEST_F
(
BasicPortAllocatorTest
TestCandidateFilterWithReflexiveOnly
)
{
AddInterface
(
kPrivateAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
allocator
(
)
.
SetCandidateFilter
(
CF_REFLEXIVE
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
std
:
:
string
(
STUN_PORT_TYPE
)
candidates_
[
0
]
.
type
(
)
)
;
EXPECT_EQ
(
candidates_
[
0
]
.
related_address
(
)
rtc
:
:
EmptySocketAddressWithFamily
(
candidates_
[
0
]
.
address
(
)
.
family
(
)
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestCandidateFilterWithReflexiveOnlyAndNoNAT
)
{
AddInterface
(
kClientAddr
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
allocator
(
)
.
SetCandidateFilter
(
CF_REFLEXIVE
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
for
(
const
Candidate
&
candidate
:
candidates_
)
{
EXPECT_EQ
(
std
:
:
string
(
LOCAL_PORT_TYPE
)
candidate
.
type
(
)
)
;
}
}
TEST_F
(
BasicPortAllocatorTest
TestEnableSharedUfrag
)
{
AddInterface
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
stun
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientAddr
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
for
(
const
Candidate
&
candidate
:
candidates_
)
{
EXPECT_EQ
(
kIceUfrag0
candidate
.
username
(
)
)
;
EXPECT_EQ
(
kIcePwd0
candidate
.
password
(
)
)
;
}
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithoutNat
)
{
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_SIMULATED_WAIT
(
2U
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithNat
)
{
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_SIMULATED_WAIT
(
3U
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
ASSERT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
)
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithoutNatUsingTurn
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddInterface
(
kClientAddr
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
std
:
:
make_unique
<
rtc
:
:
BasicPacketSocketFactory
>
(
fss_
.
get
(
)
)
)
)
;
allocator_
-
>
Initialize
(
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
ASSERT_EQ
(
3U
candidates_
.
size
(
)
)
;
ASSERT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestUdpTurnPortPrunesTcpTurnPortWithTcpPortReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
200
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnTcpIntAddr
100
)
;
TestTurnPortPrunesWithUdpAndTcpPorts
(
webrtc
:
:
PRUNE_BASED_ON_PRIORITY
true
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestUdpTurnPortPrunesTcpTurnPortsWithUdpPortReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
100
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnTcpIntAddr
200
)
;
TestTurnPortPrunesWithUdpAndTcpPorts
(
webrtc
:
:
PRUNE_BASED_ON_PRIORITY
true
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestUdpTurnPortPrunesTcpTurnPortIfUdpReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
100
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnTcpIntAddr
200
)
;
TestTurnPortPrunesWithUdpAndTcpPorts
(
webrtc
:
:
KEEP_FIRST_READY
true
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestTcpTurnPortPrunesUdpTurnPortIfTcpReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
200
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnTcpIntAddr
100
)
;
TestTurnPortPrunesWithUdpAndTcpPorts
(
webrtc
:
:
KEEP_FIRST_READY
false
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestIPv6TurnPortPrunesIPv4TurnPortWithIPv4PortReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
100
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntIPv6Addr
200
)
;
TestIPv6TurnPortPrunesIPv4TurnPort
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestIPv6TurnPortPrunesIPv4TurnPortWithIPv6PortReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
200
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntIPv6Addr
100
)
;
TestIPv6TurnPortPrunesIPv4TurnPort
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestEachInterfaceHasItsOwnTurnPortsNoDelay
)
{
TestEachInterfaceHasItsOwnTurnPorts
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestEachInterfaceHasItsOwnTurnPortsWithTcpIPv4ReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnTcpIntAddr
10
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
100
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnTcpIntIPv6Addr
20
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntIPv6Addr
300
)
;
TestEachInterfaceHasItsOwnTurnPorts
(
)
;
}
TEST_F
(
BasicPortAllocatorTestWithRealClock
TestSharedSocketWithServerAddressResolve
)
{
MAYBE_SKIP_IPV4
;
turn_server_
.
AddInternalSocket
(
rtc
:
:
SocketAddress
(
"
127
.
0
.
0
.
1
"
3478
)
PROTO_UDP
)
;
AddInterface
(
kClientAddr
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
std
:
:
make_unique
<
rtc
:
:
BasicPacketSocketFactory
>
(
fss_
.
get
(
)
)
)
)
;
allocator_
-
>
Initialize
(
)
;
RelayServerConfig
turn_server
;
RelayCredentials
credentials
(
kTurnUsername
kTurnPassword
)
;
turn_server
.
credentials
=
credentials
;
turn_server
.
ports
.
push_back
(
ProtocolAddress
(
rtc
:
:
SocketAddress
(
"
localhost
"
3478
)
PROTO_UDP
)
)
;
allocator_
-
>
AddTurnServer
(
turn_server
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_EQ_WAIT
(
2U
ports_
.
size
(
)
kDefaultAllocationTimeout
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithNatUsingTurn
)
{
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
ASSERT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
ports_
[
0
]
-
>
Candidates
(
)
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
1
]
-
>
Candidates
(
)
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithNatUsingTurnAsStun
)
{
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
SocketAddress
(
)
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_step_delay
(
0
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
Candidate
stun_candidate
;
EXPECT_TRUE
(
FindCandidate
(
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
&
stun_candidate
)
)
;
EXPECT_TRUE
(
HasCandidateWithRelatedAddr
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
stun_candidate
.
address
(
)
)
)
;
EXPECT_EQ
(
2U
ports_
[
0
]
-
>
Candidates
(
)
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
1
]
-
>
Candidates
(
)
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithNatUsingTurnTcpOnly
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
rtc
:
:
SocketAddress
(
)
)
;
AddTurnServers
(
rtc
:
:
SocketAddress
(
)
kTurnTcpIntAddr
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
ASSERT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
)
;
EXPECT_EQ
(
1U
ports_
[
0
]
-
>
Candidates
(
)
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
1
]
-
>
Candidates
(
)
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestNonSharedSocketWithNatUsingTurnAsStun
)
{
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
SocketAddress
(
)
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_DISABLE_TCP
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
ASSERT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
Candidate
stun_candidate
;
EXPECT_TRUE
(
FindCandidate
(
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
&
stun_candidate
)
)
;
Candidate
turn_candidate
;
EXPECT_TRUE
(
FindCandidate
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
&
turn_candidate
)
)
;
EXPECT_NE
(
turn_candidate
.
related_address
(
)
stun_candidate
.
address
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
0
]
-
>
Candidates
(
)
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
1
]
-
>
Candidates
(
)
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
2
]
-
>
Candidates
(
)
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithNatUsingTurnAndStun
)
{
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
stun_server_
.
reset
(
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_SIMULATED_WAIT
(
3U
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
Candidate
stun_candidate
;
EXPECT_TRUE
(
FindCandidate
(
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
&
stun_candidate
)
)
;
EXPECT_TRUE
(
HasCandidateWithRelatedAddr
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
stun_candidate
.
address
(
)
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketNoUdpAllowed
)
{
allocator
(
)
.
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
fss_
-
>
AddRule
(
false
rtc
:
:
FP_UDP
rtc
:
:
FD_ANY
kClientAddr
)
;
AddInterface
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_SIMULATED_WAIT
(
1U
ports_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kStunTimeoutMs
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestNetworkPermissionBlocked
)
{
network_manager_
.
set_default_local_addresses
(
kPrivateAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
)
;
network_manager_
.
set_enumeration_permission
(
rtc
:
:
NetworkManager
:
:
ENUMERATION_BLOCKED
)
;
allocator
(
)
.
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
EXPECT_EQ
(
0U
allocator_
-
>
flags
(
)
&
PORTALLOCATOR_DISABLE_ADAPTER_ENUMERATION
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
EXPECT_EQ
(
0U
session_
-
>
flags
(
)
&
PORTALLOCATOR_DISABLE_ADAPTER_ENUMERATION
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_EQ_SIMULATED_WAIT
(
1U
ports_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kPrivateAddr
)
)
;
EXPECT_NE
(
0U
session_
-
>
flags
(
)
&
PORTALLOCATOR_DISABLE_ADAPTER_ENUMERATION
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestEnableIPv6Addresses
)
{
allocator
(
)
.
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_ENABLE_IPV6
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
AddInterface
(
kClientIPv6Addr
)
;
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
4U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientIPv6Addr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
udp
"
kClientAddr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientIPv6Addr
)
)
;
EXPECT_TRUE
(
HasCandidate
(
candidates_
"
local
"
"
tcp
"
kClientAddr
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestStopGettingPorts
)
{
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_step_delay
(
kDefaultStepDelay
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_SIMULATED_WAIT
(
2U
candidates_
.
size
(
)
1000
fake_clock
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
session_
-
>
StopGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
1000
fake_clock
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
candidates_
.
clear
(
)
;
ports_
.
clear
(
)
;
candidate_allocation_done_
=
false
;
network_manager_
.
AddInterface
(
kClientAddr2
)
;
SIMULATED_WAIT
(
false
1000
fake_clock
)
;
EXPECT_EQ
(
0U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
0U
ports_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestClearGettingPorts
)
{
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_step_delay
(
kDefaultStepDelay
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_SIMULATED_WAIT
(
2U
candidates_
.
size
(
)
1000
fake_clock
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
session_
-
>
ClearGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
1000
fake_clock
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
candidates_
.
clear
(
)
;
ports_
.
clear
(
)
;
candidate_allocation_done_
=
false
;
network_manager_
.
AddInterface
(
kClientAddr2
)
;
ASSERT_EQ_SIMULATED_WAIT
(
2U
candidates_
.
size
(
)
1000
fake_clock
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestTransportInformationUpdated
)
{
AddInterface
(
kClientAddr
)
;
int
pool_size
=
1
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
pool_size
webrtc
:
:
NO_PRUNE
)
;
const
PortAllocatorSession
*
peeked_session
=
allocator_
-
>
GetPooledSession
(
)
;
ASSERT_NE
(
nullptr
peeked_session
)
;
EXPECT_EQ_SIMULATED_WAIT
(
true
peeked_session
-
>
CandidatesAllocationDone
(
)
kDefaultAllocationTimeout
fake_clock
)
;
session_
=
allocator_
-
>
TakePooledSession
(
kContentName
1
kIceUfrag0
kIcePwd0
)
;
ASSERT_NE
(
nullptr
session_
.
get
(
)
)
;
auto
ready_ports
=
session_
-
>
ReadyPorts
(
)
;
auto
candidates
=
session_
-
>
ReadyCandidates
(
)
;
EXPECT_FALSE
(
ready_ports
.
empty
(
)
)
;
EXPECT_FALSE
(
candidates
.
empty
(
)
)
;
for
(
const
PortInterface
*
port_interface
:
ready_ports
)
{
const
Port
*
port
=
static_cast
<
const
Port
*
>
(
port_interface
)
;
EXPECT_EQ
(
kContentName
port
-
>
content_name
(
)
)
;
EXPECT_EQ
(
1
port
-
>
component
(
)
)
;
EXPECT_EQ
(
kIceUfrag0
port
-
>
username_fragment
(
)
)
;
EXPECT_EQ
(
kIcePwd0
port
-
>
password
(
)
)
;
}
for
(
const
Candidate
&
candidate
:
candidates
)
{
EXPECT_EQ
(
1
candidate
.
component
(
)
)
;
EXPECT_EQ
(
kIceUfrag0
candidate
.
username
(
)
)
;
EXPECT_EQ
(
kIcePwd0
candidate
.
password
(
)
)
;
}
}
TEST_F
(
BasicPortAllocatorTest
TestSetCandidateFilterAfterCandidatesGathered
)
{
AddInterface
(
kClientAddr
)
;
int
pool_size
=
1
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
pool_size
webrtc
:
:
NO_PRUNE
)
;
const
PortAllocatorSession
*
peeked_session
=
allocator_
-
>
GetPooledSession
(
)
;
ASSERT_NE
(
nullptr
peeked_session
)
;
EXPECT_EQ_SIMULATED_WAIT
(
true
peeked_session
-
>
CandidatesAllocationDone
(
)
kDefaultAllocationTimeout
fake_clock
)
;
size_t
initial_candidates_size
=
peeked_session
-
>
ReadyCandidates
(
)
.
size
(
)
;
size_t
initial_ports_size
=
peeked_session
-
>
ReadyPorts
(
)
.
size
(
)
;
allocator_
-
>
SetCandidateFilter
(
CF_RELAY
)
;
session_
=
allocator_
-
>
TakePooledSession
(
kContentName
1
kIceUfrag0
kIcePwd0
)
;
ASSERT_NE
(
nullptr
session_
.
get
(
)
)
;
auto
candidates
=
session_
-
>
ReadyCandidates
(
)
;
auto
ports
=
session_
-
>
ReadyPorts
(
)
;
EXPECT_GT
(
initial_candidates_size
candidates
.
size
(
)
)
;
EXPECT_GT
(
initial_ports_size
ports
.
size
(
)
)
;
for
(
const
PortInterface
*
port
:
ports
)
{
EXPECT_EQ
(
RELAY_PORT_TYPE
port
-
>
Type
(
)
)
;
}
for
(
const
Candidate
&
candidate
:
candidates
)
{
EXPECT_EQ
(
std
:
:
string
(
RELAY_PORT_TYPE
)
candidate
.
type
(
)
)
;
EXPECT_EQ
(
candidate
.
related_address
(
)
rtc
:
:
EmptySocketAddressWithFamily
(
candidate
.
address
(
)
.
family
(
)
)
)
;
}
}
TEST_F
(
BasicPortAllocatorTest
SurfaceNewCandidatesAfterSetCandidateFilterToAddCandidateTypes
)
{
AddInterface
(
kPrivateAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
allocator_
-
>
SetCandidateFilter
(
CF_NONE
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_TRUE
(
candidates_
.
empty
(
)
)
;
EXPECT_TRUE
(
ports_
.
empty
(
)
)
;
session_
-
>
SetCandidateFilter
(
CF_RELAY
)
;
ASSERT_EQ_SIMULATED_WAIT
(
1u
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
RELAY_PORT_TYPE
candidates_
.
back
(
)
.
type
(
)
)
;
EXPECT_EQ
(
1u
ports_
.
size
(
)
)
;
session_
-
>
SetCandidateFilter
(
CF_RELAY
|
CF_REFLEXIVE
)
;
ASSERT_EQ_SIMULATED_WAIT
(
2u
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
STUN_PORT_TYPE
candidates_
.
back
(
)
.
type
(
)
)
;
EXPECT_EQ
(
2u
ports_
.
size
(
)
)
;
session_
-
>
SetCandidateFilter
(
CF_ALL
)
;
ASSERT_EQ_SIMULATED_WAIT
(
3u
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
LOCAL_PORT_TYPE
candidates_
.
back
(
)
.
type
(
)
)
;
EXPECT_EQ
(
2u
ports_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
SurfaceNewCandidatesAfterSetCandidateFilterToAllowDifferentCandidateTypes
)
{
AddInterface
(
kPrivateAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
allocator_
-
>
SetCandidateFilter
(
CF_NONE
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_TRUE
(
candidates_
.
empty
(
)
)
;
EXPECT_TRUE
(
ports_
.
empty
(
)
)
;
session_
-
>
SetCandidateFilter
(
CF_RELAY
)
;
EXPECT_EQ_SIMULATED_WAIT
(
1u
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
RELAY_PORT_TYPE
candidates_
.
back
(
)
.
type
(
)
)
;
EXPECT_EQ
(
1u
ports_
.
size
(
)
)
;
session_
-
>
SetCandidateFilter
(
CF_REFLEXIVE
)
;
EXPECT_EQ_SIMULATED_WAIT
(
2u
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
STUN_PORT_TYPE
candidates_
.
back
(
)
.
type
(
)
)
;
EXPECT_EQ
(
2u
ports_
.
size
(
)
)
;
session_
-
>
SetCandidateFilter
(
CF_HOST
)
;
EXPECT_EQ_SIMULATED_WAIT
(
3u
candidates_
.
size
(
)
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
LOCAL_PORT_TYPE
candidates_
.
back
(
)
.
type
(
)
)
;
EXPECT_EQ
(
2u
ports_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
NoCandidateSurfacedWhenUpdatingCandidateFilterIfSessionStopped
)
{
AddInterface
(
kPrivateAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
allocator_
-
>
SetCandidateFilter
(
CF_NONE
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
auto
test_invariants
=
[
this
]
(
)
{
EXPECT_TRUE
(
candidates_
.
empty
(
)
)
;
EXPECT_TRUE
(
ports_
.
empty
(
)
)
;
}
;
test_invariants
(
)
;
session_
-
>
StopGettingPorts
(
)
;
session_
-
>
SetCandidateFilter
(
CF_RELAY
)
;
SIMULATED_WAIT
(
false
kDefaultAllocationTimeout
fake_clock
)
;
test_invariants
(
)
;
session_
-
>
SetCandidateFilter
(
CF_RELAY
|
CF_REFLEXIVE
)
;
SIMULATED_WAIT
(
false
kDefaultAllocationTimeout
fake_clock
)
;
test_invariants
(
)
;
session_
-
>
SetCandidateFilter
(
CF_ALL
)
;
SIMULATED_WAIT
(
false
kDefaultAllocationTimeout
fake_clock
)
;
test_invariants
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
SetStunKeepaliveIntervalForPorts
)
{
const
int
pool_size
=
1
;
const
int
expected_stun_keepalive_interval
=
123
;
AddInterface
(
kClientAddr
)
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
pool_size
webrtc
:
:
NO_PRUNE
nullptr
expected_stun_keepalive_interval
)
;
auto
*
pooled_session
=
allocator_
-
>
GetPooledSession
(
)
;
ASSERT_NE
(
nullptr
pooled_session
)
;
EXPECT_EQ_SIMULATED_WAIT
(
true
pooled_session
-
>
CandidatesAllocationDone
(
)
kDefaultAllocationTimeout
fake_clock
)
;
CheckStunKeepaliveIntervalOfAllReadyPorts
(
pooled_session
expected_stun_keepalive_interval
)
;
}
TEST_F
(
BasicPortAllocatorTest
ChangeStunKeepaliveIntervalForPortsAfterInitialConfig
)
{
const
int
pool_size
=
1
;
AddInterface
(
kClientAddr
)
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
pool_size
webrtc
:
:
NO_PRUNE
nullptr
123
)
;
auto
*
pooled_session
=
allocator_
-
>
GetPooledSession
(
)
;
ASSERT_NE
(
nullptr
pooled_session
)
;
EXPECT_EQ_SIMULATED_WAIT
(
true
pooled_session
-
>
CandidatesAllocationDone
(
)
kDefaultAllocationTimeout
fake_clock
)
;
const
int
expected_stun_keepalive_interval
=
321
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
pool_size
webrtc
:
:
NO_PRUNE
nullptr
expected_stun_keepalive_interval
)
;
CheckStunKeepaliveIntervalOfAllReadyPorts
(
pooled_session
expected_stun_keepalive_interval
)
;
}
TEST_F
(
BasicPortAllocatorTest
SetStunKeepaliveIntervalForPortsWithSharedSocket
)
{
const
int
pool_size
=
1
;
const
int
expected_stun_keepalive_interval
=
123
;
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
pool_size
webrtc
:
:
NO_PRUNE
nullptr
expected_stun_keepalive_interval
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
CheckStunKeepaliveIntervalOfAllReadyPorts
(
session_
.
get
(
)
expected_stun_keepalive_interval
)
;
}
TEST_F
(
BasicPortAllocatorTest
SetStunKeepaliveIntervalForPortsWithoutSharedSocket
)
{
const
int
pool_size
=
1
;
const
int
expected_stun_keepalive_interval
=
123
;
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
&
~
(
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
)
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
pool_size
webrtc
:
:
NO_PRUNE
nullptr
expected_stun_keepalive_interval
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
CheckStunKeepaliveIntervalOfAllReadyPorts
(
session_
.
get
(
)
expected_stun_keepalive_interval
)
;
}
TEST_F
(
BasicPortAllocatorTest
IceRegatheringMetricsLoggedWhenNetworkChanges
)
{
ResetWithNoServersOrNat
(
)
;
AddInterface
(
kClientAddr
"
test_net0
"
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
candidate_allocation_done_
=
false
;
AddInterface
(
kClientAddr2
"
test_net1
"
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_METRIC_EQ
(
1
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
IceRegatheringReason
"
static_cast
<
int
>
(
IceRegatheringReason
:
:
NETWORK_CHANGE
)
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
HostCandidateAddressIsReplacedByHostname
)
{
ResetWithStunServerAndNat
(
kStunAddr
)
;
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
AddTurnServers
(
kTurnUdpIntIPv6Addr
kTurnTcpIntIPv6Addr
)
;
ASSERT_EQ
(
&
network_manager_
allocator
(
)
.
network_manager
(
)
)
;
network_manager_
.
set_mdns_responder
(
std
:
:
make_unique
<
webrtc
:
:
FakeMdnsResponder
>
(
rtc
:
:
Thread
:
:
Current
(
)
)
)
;
AddInterface
(
kClientAddr
)
;
ASSERT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
fake_clock
)
;
EXPECT_EQ
(
5u
candidates_
.
size
(
)
)
;
int
num_host_udp_candidates
=
0
;
int
num_host_tcp_candidates
=
0
;
int
num_srflx_candidates
=
0
;
int
num_relay_candidates
=
0
;
for
(
const
auto
&
candidate
:
candidates_
)
{
const
auto
&
raddr
=
candidate
.
related_address
(
)
;
if
(
candidate
.
type
(
)
=
=
LOCAL_PORT_TYPE
)
{
EXPECT_FALSE
(
candidate
.
address
(
)
.
hostname
(
)
.
empty
(
)
)
;
EXPECT_TRUE
(
raddr
.
IsNil
(
)
)
;
if
(
candidate
.
protocol
(
)
=
=
UDP_PROTOCOL_NAME
)
{
+
+
num_host_udp_candidates
;
}
else
{
+
+
num_host_tcp_candidates
;
}
}
else
if
(
candidate
.
type
(
)
=
=
STUN_PORT_TYPE
)
{
EXPECT_TRUE
(
IPIsAny
(
raddr
.
ipaddr
(
)
)
)
;
EXPECT_EQ
(
raddr
.
port
(
)
0
)
;
+
+
num_srflx_candidates
;
}
else
if
(
candidate
.
type
(
)
=
=
RELAY_PORT_TYPE
)
{
EXPECT_EQ
(
kNatUdpAddr
.
ipaddr
(
)
raddr
.
ipaddr
(
)
)
;
EXPECT_EQ
(
kNatUdpAddr
.
family
(
)
raddr
.
family
(
)
)
;
+
+
num_relay_candidates
;
}
else
{
FAIL
(
)
;
}
}
EXPECT_EQ
(
1
num_host_udp_candidates
)
;
EXPECT_EQ
(
1
num_host_tcp_candidates
)
;
EXPECT_EQ
(
1
num_srflx_candidates
)
;
EXPECT_EQ
(
2
num_relay_candidates
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestUseTurnServerAsStunSever
)
{
ServerAddresses
stun_servers
;
stun_servers
.
insert
(
kStunAddr
)
;
PortConfiguration
port_config
(
stun_servers
"
"
"
"
)
;
RelayServerConfig
turn_servers
=
CreateTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
port_config
.
AddRelay
(
turn_servers
)
;
EXPECT_EQ
(
2U
port_config
.
StunServers
(
)
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDoNotUseTurnServerAsStunSever
)
{
webrtc
:
:
test
:
:
ScopedKeyValueConfig
field_trials
(
"
WebRTC
-
UseTurnServerAsStunServer
/
Disabled
/
"
)
;
ServerAddresses
stun_servers
;
stun_servers
.
insert
(
kStunAddr
)
;
PortConfiguration
port_config
(
stun_servers
"
"
"
"
&
field_trials
)
;
RelayServerConfig
turn_servers
=
CreateTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
port_config
.
AddRelay
(
turn_servers
)
;
EXPECT_EQ
(
1U
port_config
.
StunServers
(
)
.
size
(
)
)
;
}
}
