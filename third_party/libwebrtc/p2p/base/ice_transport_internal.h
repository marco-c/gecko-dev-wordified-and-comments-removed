#
ifndef
P2P_BASE_ICE_TRANSPORT_INTERNAL_H_
#
define
P2P_BASE_ICE_TRANSPORT_INTERNAL_H_
#
include
<
stdint
.
h
>
#
include
<
functional
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
transport
/
enums
.
h
"
#
include
"
api
/
transport
/
stun
.
h
"
#
include
"
p2p
/
base
/
candidate_pair_interface
.
h
"
#
include
"
p2p
/
base
/
connection
.
h
"
#
include
"
p2p
/
base
/
connection_info
.
h
"
#
include
"
p2p
/
base
/
packet_transport_internal
.
h
"
#
include
"
p2p
/
base
/
port
.
h
"
#
include
"
p2p
/
base
/
stun_dictionary
.
h
"
#
include
"
p2p
/
base
/
transport_description
.
h
"
#
include
"
p2p
/
dtls
/
dtls_stun_piggyback_callbacks
.
h
"
#
include
"
rtc_base
/
callback_list
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
network_constants
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
namespace
cricket
{
enum
class
IceTransportState
{
STATE_INIT
STATE_CONNECTING
STATE_COMPLETED
STATE_FAILED
}
;
enum
IceConnectionState
{
kIceConnectionConnecting
=
0
kIceConnectionFailed
kIceConnectionConnected
kIceConnectionCompleted
}
;
}
namespace
webrtc
{
struct
IceTransportStats
{
cricket
:
:
CandidateStatsList
candidate_stats_list
;
cricket
:
:
ConnectionInfos
connection_infos
;
uint32_t
selected_candidate_pair_changes
=
0
;
uint64_t
bytes_sent
=
0
;
uint64_t
bytes_received
=
0
;
uint64_t
packets_sent
=
0
;
uint64_t
packets_received
=
0
;
cricket
:
:
IceRole
ice_role
=
cricket
:
:
ICEROLE_UNKNOWN
;
std
:
:
string
ice_local_username_fragment
;
IceTransportState
ice_state
=
IceTransportState
:
:
kNew
;
}
;
typedef
std
:
:
vector
<
Candidate
>
Candidates
;
enum
IceGatheringState
{
kIceGatheringNew
=
0
kIceGatheringGathering
kIceGatheringComplete
}
;
enum
ContinualGatheringPolicy
{
GATHER_ONCE
=
0
GATHER_CONTINUALLY
}
;
enum
class
NominationMode
{
REGULAR
AGGRESSIVE
SEMI_AGGRESSIVE
}
;
RTCError
VerifyCandidate
(
const
Candidate
&
cand
)
;
RTCError
VerifyCandidates
(
const
Candidates
&
candidates
)
;
struct
RTC_EXPORT
IceConfig
{
std
:
:
optional
<
int
>
receiving_timeout
;
std
:
:
optional
<
int
>
backup_connection_ping_interval
;
ContinualGatheringPolicy
continual_gathering_policy
=
GATHER_ONCE
;
bool
gather_continually
(
)
const
{
return
continual_gathering_policy
=
=
GATHER_CONTINUALLY
;
}
bool
prioritize_most_likely_candidate_pairs
=
false
;
std
:
:
optional
<
int
>
stable_writable_connection_ping_interval
;
bool
presume_writable_when_fully_relayed
=
false
;
bool
surface_ice_candidates_on_ice_transport_type_changed
=
false
;
std
:
:
optional
<
int
>
regather_on_failed_networks_interval
;
std
:
:
optional
<
int
>
receiving_switching_delay
;
NominationMode
default_nomination_mode
=
NominationMode
:
:
SEMI_AGGRESSIVE
;
std
:
:
optional
<
int
>
ice_check_interval_strong_connectivity
;
std
:
:
optional
<
int
>
ice_check_interval_weak_connectivity
;
std
:
:
optional
<
int
>
ice_check_min_interval
;
std
:
:
optional
<
int
>
ice_unwritable_timeout
;
std
:
:
optional
<
int
>
ice_unwritable_min_checks
;
std
:
:
optional
<
int
>
ice_inactive_timeout
;
std
:
:
optional
<
int
>
stun_keepalive_interval
;
std
:
:
optional
<
AdapterType
>
network_preference
;
VpnPreference
vpn_preference
=
VpnPreference
:
:
kDefault
;
bool
dtls_handshake_in_stun
=
false
;
IceConfig
(
)
;
IceConfig
(
int
receiving_timeout_ms
int
backup_connection_ping_interval
ContinualGatheringPolicy
gathering_policy
bool
prioritize_most_likely_candidate_pairs
int
stable_writable_connection_ping_interval_ms
bool
presume_writable_when_fully_relayed
int
regather_on_failed_networks_interval_ms
int
receiving_switching_delay_ms
)
;
explicit
IceConfig
(
const
PeerConnectionInterface
:
:
RTCConfiguration
&
config
)
;
~
IceConfig
(
)
;
RTCError
IsValid
(
)
const
;
int
receiving_timeout_or_default
(
)
const
;
int
backup_connection_ping_interval_or_default
(
)
const
;
int
stable_writable_connection_ping_interval_or_default
(
)
const
;
int
regather_on_failed_networks_interval_or_default
(
)
const
;
int
receiving_switching_delay_or_default
(
)
const
;
int
ice_check_interval_strong_connectivity_or_default
(
)
const
;
int
ice_check_interval_weak_connectivity_or_default
(
)
const
;
int
ice_check_min_interval_or_default
(
)
const
;
int
ice_unwritable_timeout_or_default
(
)
const
;
int
ice_unwritable_min_checks_or_default
(
)
const
;
int
ice_inactive_timeout_or_default
(
)
const
;
int
stun_keepalive_interval_or_default
(
)
const
;
}
;
class
RTC_EXPORT
IceTransportInternal
:
public
rtc
:
:
PacketTransportInternal
{
public
:
IceTransportInternal
(
)
;
~
IceTransportInternal
(
)
override
;
virtual
cricket
:
:
IceTransportState
GetState
(
)
const
=
0
;
virtual
IceTransportState
GetIceTransportState
(
)
const
=
0
;
virtual
int
component
(
)
const
=
0
;
virtual
cricket
:
:
IceRole
GetIceRole
(
)
const
=
0
;
virtual
void
SetIceRole
(
cricket
:
:
IceRole
role
)
=
0
;
virtual
void
SetIceTiebreaker
(
uint64_t
)
{
RTC_CHECK_NOTREACHED
(
)
;
}
virtual
void
SetIceCredentials
(
absl
:
:
string_view
ice_ufrag
absl
:
:
string_view
ice_pwd
)
;
virtual
void
SetRemoteIceCredentials
(
absl
:
:
string_view
ice_ufrag
absl
:
:
string_view
ice_pwd
)
;
virtual
void
SetIceParameters
(
const
cricket
:
:
IceParameters
&
ice_params
)
=
0
;
virtual
void
SetRemoteIceParameters
(
const
cricket
:
:
IceParameters
&
ice_params
)
=
0
;
virtual
void
SetRemoteIceMode
(
cricket
:
:
IceMode
mode
)
=
0
;
virtual
void
SetIceConfig
(
const
IceConfig
&
config
)
=
0
;
virtual
const
IceConfig
&
config
(
)
const
{
RTC_CHECK_NOTREACHED
(
)
;
}
virtual
void
MaybeStartGathering
(
)
=
0
;
virtual
void
AddRemoteCandidate
(
const
Candidate
&
candidate
)
=
0
;
virtual
void
RemoveRemoteCandidate
(
const
Candidate
&
candidate
)
=
0
;
virtual
void
RemoveAllRemoteCandidates
(
)
=
0
;
virtual
IceGatheringState
gathering_state
(
)
const
=
0
;
virtual
bool
GetStats
(
IceTransportStats
*
ice_transport_stats
)
=
0
;
virtual
std
:
:
optional
<
int
>
GetRttEstimate
(
)
=
0
;
virtual
const
cricket
:
:
Connection
*
selected_connection
(
)
const
=
0
;
virtual
std
:
:
optional
<
const
cricket
:
:
CandidatePair
>
GetSelectedCandidatePair
(
)
const
=
0
;
virtual
std
:
:
optional
<
std
:
:
reference_wrapper
<
cricket
:
:
StunDictionaryWriter
>
>
GetDictionaryWriter
(
)
{
return
std
:
:
nullopt
;
}
void
AddGatheringStateCallback
(
const
void
*
removal_tag
absl
:
:
AnyInvocable
<
void
(
webrtc
:
:
IceTransportInternal
*
)
>
callback
)
;
void
RemoveGatheringStateCallback
(
const
void
*
removal_tag
)
;
sigslot
:
:
signal2
<
IceTransportInternal
*
const
Candidate
&
>
SignalCandidateGathered
;
void
SetCandidateErrorCallback
(
absl
:
:
AnyInvocable
<
void
(
webrtc
:
:
IceTransportInternal
*
const
cricket
:
:
IceCandidateErrorEvent
&
)
>
callback
)
{
RTC_DCHECK
(
!
candidate_error_callback_
)
;
candidate_error_callback_
=
std
:
:
move
(
callback
)
;
}
void
SetCandidatesRemovedCallback
(
absl
:
:
AnyInvocable
<
void
(
webrtc
:
:
IceTransportInternal
*
const
Candidates
&
)
>
callback
)
{
RTC_DCHECK
(
!
candidates_removed_callback_
)
;
candidates_removed_callback_
=
std
:
:
move
(
callback
)
;
}
sigslot
:
:
signal2
<
IceTransportInternal
*
const
Candidate
&
>
SignalRouteChange
;
void
SetCandidatePairChangeCallback
(
absl
:
:
AnyInvocable
<
void
(
const
cricket
:
:
CandidatePairChangeEvent
&
)
>
callback
)
{
RTC_DCHECK
(
!
candidate_pair_change_callback_
)
;
candidate_pair_change_callback_
=
std
:
:
move
(
callback
)
;
}
sigslot
:
:
signal1
<
IceTransportInternal
*
>
SignalRoleConflict
;
sigslot
:
:
signal1
<
IceTransportInternal
*
>
SignalStateChanged
;
sigslot
:
:
signal1
<
IceTransportInternal
*
>
SignalIceTransportStateChanged
;
sigslot
:
:
signal1
<
IceTransportInternal
*
>
SignalDestroyed
;
template
<
typename
F
>
void
AddDictionaryViewUpdatedCallback
(
const
void
*
tag
F
&
&
callback
)
{
dictionary_view_updated_callback_list_
.
AddReceiver
(
tag
std
:
:
forward
<
F
>
(
callback
)
)
;
}
void
RemoveDictionaryViewUpdatedCallback
(
const
void
*
tag
)
{
dictionary_view_updated_callback_list_
.
RemoveReceivers
(
tag
)
;
}
template
<
typename
F
>
void
AddDictionaryWriterSyncedCallback
(
const
void
*
tag
F
&
&
callback
)
{
dictionary_writer_synced_callback_list_
.
AddReceiver
(
tag
std
:
:
forward
<
F
>
(
callback
)
)
;
}
void
RemoveDictionaryWriterSyncedCallback
(
const
void
*
tag
)
{
dictionary_writer_synced_callback_list_
.
RemoveReceivers
(
tag
)
;
}
virtual
const
FieldTrialsView
*
field_trials
(
)
const
{
return
nullptr
;
}
virtual
void
ResetDtlsStunPiggybackCallbacks
(
)
{
}
virtual
void
SetDtlsStunPiggybackCallbacks
(
cricket
:
:
DtlsStunPiggybackCallbacks
&
&
callbacks
)
{
}
protected
:
void
SendGatheringStateEvent
(
)
{
gathering_state_callback_list_
.
Send
(
this
)
;
}
CallbackList
<
IceTransportInternal
*
const
cricket
:
:
StunDictionaryView
&
rtc
:
:
ArrayView
<
uint16_t
>
>
dictionary_view_updated_callback_list_
;
CallbackList
<
IceTransportInternal
*
const
cricket
:
:
StunDictionaryWriter
&
>
dictionary_writer_synced_callback_list_
;
CallbackList
<
IceTransportInternal
*
>
gathering_state_callback_list_
;
absl
:
:
AnyInvocable
<
void
(
webrtc
:
:
IceTransportInternal
*
const
cricket
:
:
IceCandidateErrorEvent
&
)
>
candidate_error_callback_
;
absl
:
:
AnyInvocable
<
void
(
webrtc
:
:
IceTransportInternal
*
const
Candidates
&
)
>
candidates_removed_callback_
;
absl
:
:
AnyInvocable
<
void
(
const
cricket
:
:
CandidatePairChangeEvent
&
)
>
candidate_pair_change_callback_
;
}
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
Candidates
;
using
:
:
webrtc
:
:
ContinualGatheringPolicy
;
using
:
:
webrtc
:
:
GATHER_CONTINUALLY
;
using
:
:
webrtc
:
:
GATHER_ONCE
;
using
:
:
webrtc
:
:
IceConfig
;
using
:
:
webrtc
:
:
IceGatheringState
;
using
:
:
webrtc
:
:
IceTransportInternal
;
using
:
:
webrtc
:
:
IceTransportStats
;
using
:
:
webrtc
:
:
kIceGatheringComplete
;
using
:
:
webrtc
:
:
kIceGatheringGathering
;
using
:
:
webrtc
:
:
kIceGatheringNew
;
using
:
:
webrtc
:
:
NominationMode
;
using
:
:
webrtc
:
:
VerifyCandidate
;
using
:
:
webrtc
:
:
VerifyCandidates
;
}
#
endif
