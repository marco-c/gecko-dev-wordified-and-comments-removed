#
include
"
p2p
/
base
/
ice_credentials_iterator
.
h
"
#
include
"
p2p
/
base
/
p2p_constants
.
h
"
#
include
"
rtc_base
/
crypto_random
.
h
"
namespace
cricket
{
IceCredentialsIterator
:
:
IceCredentialsIterator
(
const
std
:
:
vector
<
IceParameters
>
&
pooled_credentials
)
:
pooled_ice_credentials_
(
pooled_credentials
)
{
}
IceCredentialsIterator
:
:
~
IceCredentialsIterator
(
)
=
default
;
IceParameters
IceCredentialsIterator
:
:
CreateRandomIceCredentials
(
)
{
return
IceParameters
(
webrtc
:
:
CreateRandomString
(
ICE_UFRAG_LENGTH
)
webrtc
:
:
CreateRandomString
(
ICE_PWD_LENGTH
)
false
)
;
}
IceParameters
IceCredentialsIterator
:
:
GetIceCredentials
(
)
{
if
(
pooled_ice_credentials_
.
empty
(
)
)
{
return
CreateRandomIceCredentials
(
)
;
}
IceParameters
credentials
=
pooled_ice_credentials_
.
back
(
)
;
pooled_ice_credentials_
.
pop_back
(
)
;
return
credentials
;
}
}
