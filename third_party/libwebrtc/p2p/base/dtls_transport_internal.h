#
ifndef
P2P_BASE_DTLS_TRANSPORT_INTERNAL_H_
#
define
P2P_BASE_DTLS_TRANSPORT_INTERNAL_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
dtls_transport_interface
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
p2p
/
base
/
ice_transport_internal
.
h
"
#
include
"
p2p
/
base
/
packet_transport_internal
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
robo_caller
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_fingerprint
.
h
"
#
include
"
rtc_base
/
ssl_stream_adapter
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
namespace
cricket
{
enum
DtlsTransportState
{
DTLS_TRANSPORT_NEW
=
0
DTLS_TRANSPORT_CONNECTING
DTLS_TRANSPORT_CONNECTED
DTLS_TRANSPORT_CLOSED
DTLS_TRANSPORT_FAILED
}
;
webrtc
:
:
DtlsTransportState
ConvertDtlsTransportState
(
cricket
:
:
DtlsTransportState
cricket_state
)
;
enum
PacketFlags
{
PF_NORMAL
=
0x00
PF_SRTP_BYPASS
=
0x01
}
;
class
DtlsTransportInternal
:
public
rtc
:
:
PacketTransportInternal
{
public
:
~
DtlsTransportInternal
(
)
override
;
virtual
const
webrtc
:
:
CryptoOptions
&
crypto_options
(
)
const
=
0
;
virtual
DtlsTransportState
dtls_state
(
)
const
=
0
;
virtual
int
component
(
)
const
=
0
;
virtual
bool
IsDtlsActive
(
)
const
=
0
;
virtual
bool
GetDtlsRole
(
rtc
:
:
SSLRole
*
role
)
const
=
0
;
virtual
bool
SetDtlsRole
(
rtc
:
:
SSLRole
role
)
=
0
;
virtual
bool
GetSslVersionBytes
(
int
*
version
)
const
=
0
;
virtual
bool
GetSrtpCryptoSuite
(
int
*
cipher
)
=
0
;
virtual
bool
GetSslCipherSuite
(
int
*
cipher
)
=
0
;
virtual
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
GetLocalCertificate
(
)
const
=
0
;
virtual
bool
SetLocalCertificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
=
0
;
virtual
std
:
:
unique_ptr
<
rtc
:
:
SSLCertChain
>
GetRemoteSSLCertChain
(
)
const
=
0
;
virtual
bool
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8_t
*
context
size_t
context_len
bool
use_context
uint8_t
*
result
size_t
result_len
)
=
0
;
virtual
bool
SetRemoteFingerprint
(
const
std
:
:
string
&
digest_alg
const
uint8_t
*
digest
size_t
digest_len
)
=
0
;
virtual
bool
SetSslMaxProtocolVersion
(
rtc
:
:
SSLProtocolVersion
version
)
=
0
;
virtual
IceTransportInternal
*
ice_transport
(
)
=
0
;
sigslot
:
:
signal2
<
DtlsTransportInternal
*
DtlsTransportState
>
SignalDtlsState
;
webrtc
:
:
RoboCaller
<
rtc
:
:
SSLHandshakeError
>
SignalDtlsHandshakeError
;
protected
:
DtlsTransportInternal
(
)
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
DtlsTransportInternal
)
;
}
;
}
#
endif
