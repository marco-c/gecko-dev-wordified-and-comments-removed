#
include
"
p2p
/
base
/
tcp_port
.
h
"
#
include
<
errno
.
h
>
#
include
<
vector
>
#
include
"
absl
/
algorithm
/
container
.
h
"
#
include
"
p2p
/
base
/
p2p_constants
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
ip_address
.
h
"
#
include
"
rtc_base
/
location
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
net_helper
.
h
"
#
include
"
rtc_base
/
rate_tracker
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
namespace
cricket
{
TCPPort
:
:
TCPPort
(
rtc
:
:
Thread
*
thread
rtc
:
:
PacketSocketFactory
*
factory
rtc
:
:
Network
*
network
uint16_t
min_port
uint16_t
max_port
const
std
:
:
string
&
username
const
std
:
:
string
&
password
bool
allow_listen
)
:
Port
(
thread
LOCAL_PORT_TYPE
factory
network
min_port
max_port
username
password
)
allow_listen_
(
allow_listen
)
socket_
(
NULL
)
error_
(
0
)
{
if
(
allow_listen_
)
{
TryCreateServerSocket
(
)
;
}
}
TCPPort
:
:
~
TCPPort
(
)
{
delete
socket_
;
std
:
:
list
<
Incoming
>
:
:
iterator
it
;
for
(
it
=
incoming_
.
begin
(
)
;
it
!
=
incoming_
.
end
(
)
;
+
+
it
)
delete
it
-
>
socket
;
incoming_
.
clear
(
)
;
}
Connection
*
TCPPort
:
:
CreateConnection
(
const
Candidate
&
address
CandidateOrigin
origin
)
{
if
(
!
SupportsProtocol
(
address
.
protocol
(
)
)
)
{
return
NULL
;
}
if
(
(
address
.
tcptype
(
)
=
=
TCPTYPE_ACTIVE_STR
&
&
address
.
type
(
)
!
=
PRFLX_PORT_TYPE
)
|
|
(
address
.
tcptype
(
)
.
empty
(
)
&
&
address
.
address
(
)
.
port
(
)
=
=
0
)
)
{
return
NULL
;
}
if
(
origin
=
=
ORIGIN_OTHER_PORT
)
return
NULL
;
if
(
(
address
.
protocol
(
)
=
=
SSLTCP_PROTOCOL_NAME
)
&
&
(
origin
=
=
ORIGIN_THIS_PORT
)
)
{
return
NULL
;
}
if
(
!
IsCompatibleAddress
(
address
.
address
(
)
)
)
{
return
NULL
;
}
TCPConnection
*
conn
=
NULL
;
if
(
rtc
:
:
AsyncPacketSocket
*
socket
=
GetIncoming
(
address
.
address
(
)
true
)
)
{
socket
-
>
SignalReadPacket
.
disconnect
(
this
)
;
conn
=
new
TCPConnection
(
this
address
socket
)
;
}
else
{
conn
=
new
TCPConnection
(
this
address
)
;
if
(
conn
-
>
socket
(
)
)
{
conn
-
>
socket
(
)
-
>
SignalReadyToSend
.
connect
(
this
&
TCPPort
:
:
OnReadyToSend
)
;
conn
-
>
socket
(
)
-
>
SignalSentPacket
.
connect
(
this
&
TCPPort
:
:
OnSentPacket
)
;
}
}
AddOrReplaceConnection
(
conn
)
;
return
conn
;
}
void
TCPPort
:
:
PrepareAddress
(
)
{
if
(
socket_
)
{
RTC_LOG
(
LS_VERBOSE
)
<
<
"
Preparing
TCP
address
current
state
:
"
<
<
socket_
-
>
GetState
(
)
;
if
(
socket_
-
>
GetState
(
)
=
=
rtc
:
:
AsyncPacketSocket
:
:
STATE_BOUND
|
|
socket_
-
>
GetState
(
)
=
=
rtc
:
:
AsyncPacketSocket
:
:
STATE_CLOSED
)
AddAddress
(
socket_
-
>
GetLocalAddress
(
)
socket_
-
>
GetLocalAddress
(
)
rtc
:
:
SocketAddress
(
)
TCP_PROTOCOL_NAME
"
"
TCPTYPE_PASSIVE_STR
LOCAL_PORT_TYPE
ICE_TYPE_PREFERENCE_HOST_TCP
0
"
"
true
)
;
}
else
{
RTC_LOG
(
LS_INFO
)
<
<
ToString
(
)
<
<
"
:
Not
listening
due
to
firewall
restrictions
.
"
;
AddAddress
(
rtc
:
:
SocketAddress
(
Network
(
)
-
>
GetBestIP
(
)
DISCARD_PORT
)
rtc
:
:
SocketAddress
(
Network
(
)
-
>
GetBestIP
(
)
0
)
rtc
:
:
SocketAddress
(
)
TCP_PROTOCOL_NAME
"
"
TCPTYPE_ACTIVE_STR
LOCAL_PORT_TYPE
ICE_TYPE_PREFERENCE_HOST_TCP
0
"
"
true
)
;
}
}
int
TCPPort
:
:
SendTo
(
const
void
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
addr
const
rtc
:
:
PacketOptions
&
options
bool
payload
)
{
rtc
:
:
AsyncPacketSocket
*
socket
=
NULL
;
TCPConnection
*
conn
=
static_cast
<
TCPConnection
*
>
(
GetConnection
(
addr
)
)
;
if
(
conn
)
{
if
(
!
conn
-
>
connected
(
)
)
{
conn
-
>
MaybeReconnect
(
)
;
return
SOCKET_ERROR
;
}
socket
=
conn
-
>
socket
(
)
;
if
(
!
socket
)
{
RTC_LOG
(
LS_INFO
)
<
<
ToString
(
)
<
<
"
:
Attempted
to
send
to
an
uninitialized
socket
:
"
<
<
addr
.
ToSensitiveString
(
)
;
error_
=
EHOSTUNREACH
;
return
SOCKET_ERROR
;
}
}
else
{
socket
=
GetIncoming
(
addr
)
;
if
(
!
socket
)
{
RTC_LOG
(
LS_ERROR
)
<
<
ToString
(
)
<
<
"
:
Attempted
to
send
to
an
unknown
destination
:
"
<
<
addr
.
ToSensitiveString
(
)
;
error_
=
EHOSTUNREACH
;
return
SOCKET_ERROR
;
}
}
rtc
:
:
PacketOptions
modified_options
(
options
)
;
CopyPortInformationToPacketInfo
(
&
modified_options
.
info_signaled_after_sent
)
;
int
sent
=
socket
-
>
Send
(
data
size
modified_options
)
;
if
(
sent
<
0
)
{
error_
=
socket
-
>
GetError
(
)
;
RTC_LOG
(
LS_ERROR
)
<
<
ToString
(
)
<
<
"
:
TCP
send
of
"
<
<
size
<
<
"
bytes
failed
with
error
"
<
<
error_
;
}
return
sent
;
}
int
TCPPort
:
:
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
{
if
(
socket_
)
{
return
socket_
-
>
GetOption
(
opt
value
)
;
}
else
{
return
SOCKET_ERROR
;
}
}
int
TCPPort
:
:
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
{
if
(
socket_
)
{
return
socket_
-
>
SetOption
(
opt
value
)
;
}
else
{
return
SOCKET_ERROR
;
}
}
int
TCPPort
:
:
GetError
(
)
{
return
error_
;
}
bool
TCPPort
:
:
SupportsProtocol
(
const
std
:
:
string
&
protocol
)
const
{
return
protocol
=
=
TCP_PROTOCOL_NAME
|
|
protocol
=
=
SSLTCP_PROTOCOL_NAME
;
}
ProtocolType
TCPPort
:
:
GetProtocol
(
)
const
{
return
PROTO_TCP
;
}
void
TCPPort
:
:
OnNewConnection
(
rtc
:
:
AsyncPacketSocket
*
socket
rtc
:
:
AsyncPacketSocket
*
new_socket
)
{
RTC_DCHECK
(
socket
=
=
socket_
)
;
Incoming
incoming
;
incoming
.
addr
=
new_socket
-
>
GetRemoteAddress
(
)
;
incoming
.
socket
=
new_socket
;
incoming
.
socket
-
>
SignalReadPacket
.
connect
(
this
&
TCPPort
:
:
OnReadPacket
)
;
incoming
.
socket
-
>
SignalReadyToSend
.
connect
(
this
&
TCPPort
:
:
OnReadyToSend
)
;
incoming
.
socket
-
>
SignalSentPacket
.
connect
(
this
&
TCPPort
:
:
OnSentPacket
)
;
RTC_LOG
(
LS_VERBOSE
)
<
<
ToString
(
)
<
<
"
:
Accepted
connection
from
"
<
<
incoming
.
addr
.
ToSensitiveString
(
)
;
incoming_
.
push_back
(
incoming
)
;
}
void
TCPPort
:
:
TryCreateServerSocket
(
)
{
socket_
=
socket_factory
(
)
-
>
CreateServerTcpSocket
(
rtc
:
:
SocketAddress
(
Network
(
)
-
>
GetBestIP
(
)
0
)
min_port
(
)
max_port
(
)
false
)
;
if
(
!
socket_
)
{
RTC_LOG
(
LS_WARNING
)
<
<
ToString
(
)
<
<
"
:
TCP
server
socket
creation
failed
;
continuing
anyway
.
"
;
return
;
}
socket_
-
>
SignalNewConnection
.
connect
(
this
&
TCPPort
:
:
OnNewConnection
)
;
socket_
-
>
SignalAddressReady
.
connect
(
this
&
TCPPort
:
:
OnAddressReady
)
;
}
rtc
:
:
AsyncPacketSocket
*
TCPPort
:
:
GetIncoming
(
const
rtc
:
:
SocketAddress
&
addr
bool
remove
)
{
rtc
:
:
AsyncPacketSocket
*
socket
=
NULL
;
for
(
std
:
:
list
<
Incoming
>
:
:
iterator
it
=
incoming_
.
begin
(
)
;
it
!
=
incoming_
.
end
(
)
;
+
+
it
)
{
if
(
it
-
>
addr
=
=
addr
)
{
socket
=
it
-
>
socket
;
if
(
remove
)
incoming_
.
erase
(
it
)
;
break
;
}
}
return
socket
;
}
void
TCPPort
:
:
OnReadPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
remote_addr
const
int64_t
&
packet_time_us
)
{
Port
:
:
OnReadPacket
(
data
size
remote_addr
PROTO_TCP
)
;
}
void
TCPPort
:
:
OnSentPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
SentPacket
&
sent_packet
)
{
PortInterface
:
:
SignalSentPacket
(
sent_packet
)
;
}
void
TCPPort
:
:
OnReadyToSend
(
rtc
:
:
AsyncPacketSocket
*
socket
)
{
Port
:
:
OnReadyToSend
(
)
;
}
void
TCPPort
:
:
OnAddressReady
(
rtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
SocketAddress
&
address
)
{
AddAddress
(
address
address
rtc
:
:
SocketAddress
(
)
TCP_PROTOCOL_NAME
"
"
TCPTYPE_PASSIVE_STR
LOCAL_PORT_TYPE
ICE_TYPE_PREFERENCE_HOST_TCP
0
"
"
true
)
;
}
TCPConnection
:
:
TCPConnection
(
TCPPort
*
port
const
Candidate
&
candidate
rtc
:
:
AsyncPacketSocket
*
socket
)
:
Connection
(
port
0
candidate
)
socket_
(
socket
)
error_
(
0
)
outgoing_
(
socket
=
=
NULL
)
connection_pending_
(
false
)
pretending_to_be_writable_
(
false
)
reconnection_timeout_
(
cricket
:
:
CONNECTION_WRITE_CONNECT_TIMEOUT
)
{
if
(
outgoing_
)
{
CreateOutgoingTcpSocket
(
)
;
}
else
{
RTC_LOG
(
LS_VERBOSE
)
<
<
ToString
(
)
<
<
"
:
socket
ipaddr
:
"
<
<
socket_
-
>
GetLocalAddress
(
)
.
ToSensitiveString
(
)
<
<
"
port
(
)
Network
:
"
<
<
port
-
>
Network
(
)
-
>
ToString
(
)
;
RTC_DCHECK
(
absl
:
:
c_any_of
(
port_
-
>
Network
(
)
-
>
GetIPs
(
)
[
this
]
(
const
rtc
:
:
InterfaceAddress
&
addr
)
{
return
socket_
-
>
GetLocalAddress
(
)
.
ipaddr
(
)
=
=
addr
;
}
)
)
;
ConnectSocketSignals
(
socket
)
;
}
}
TCPConnection
:
:
~
TCPConnection
(
)
{
}
int
TCPConnection
:
:
Send
(
const
void
*
data
size_t
size
const
rtc
:
:
PacketOptions
&
options
)
{
if
(
!
socket_
)
{
error_
=
ENOTCONN
;
return
SOCKET_ERROR
;
}
if
(
!
connected
(
)
)
{
MaybeReconnect
(
)
;
return
SOCKET_ERROR
;
}
if
(
pretending_to_be_writable_
|
|
write_state
(
)
!
=
STATE_WRITABLE
)
{
error_
=
ENOTCONN
;
return
SOCKET_ERROR
;
}
stats_
.
sent_total_packets
+
+
;
rtc
:
:
PacketOptions
modified_options
(
options
)
;
static_cast
<
TCPPort
*
>
(
port_
)
-
>
CopyPortInformationToPacketInfo
(
&
modified_options
.
info_signaled_after_sent
)
;
int
sent
=
socket_
-
>
Send
(
data
size
modified_options
)
;
int64_t
now
=
rtc
:
:
TimeMillis
(
)
;
if
(
sent
<
0
)
{
stats_
.
sent_discarded_packets
+
+
;
error_
=
socket_
-
>
GetError
(
)
;
}
else
{
send_rate_tracker_
.
AddSamplesAtTime
(
now
sent
)
;
}
last_send_data_
=
now
;
return
sent
;
}
int
TCPConnection
:
:
GetError
(
)
{
return
error_
;
}
void
TCPConnection
:
:
OnConnectionRequestResponse
(
ConnectionRequest
*
req
StunMessage
*
response
)
{
Connection
:
:
OnConnectionRequestResponse
(
req
response
)
;
if
(
pretending_to_be_writable_
)
{
Connection
:
:
OnReadyToSend
(
)
;
}
pretending_to_be_writable_
=
false
;
RTC_DCHECK
(
write_state
(
)
=
=
STATE_WRITABLE
)
;
}
void
TCPConnection
:
:
OnConnect
(
rtc
:
:
AsyncPacketSocket
*
socket
)
{
RTC_DCHECK
(
socket
=
=
socket_
.
get
(
)
)
;
const
rtc
:
:
SocketAddress
&
socket_address
=
socket
-
>
GetLocalAddress
(
)
;
if
(
absl
:
:
c_any_of
(
port_
-
>
Network
(
)
-
>
GetIPs
(
)
[
socket_address
]
(
const
rtc
:
:
InterfaceAddress
&
addr
)
{
return
socket_address
.
ipaddr
(
)
=
=
addr
;
}
)
)
{
RTC_LOG
(
LS_VERBOSE
)
<
<
ToString
(
)
<
<
"
:
Connection
established
to
"
<
<
socket
-
>
GetRemoteAddress
(
)
.
ToSensitiveString
(
)
;
}
else
{
if
(
socket
-
>
GetLocalAddress
(
)
.
IsLoopbackIP
(
)
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Socket
is
bound
to
the
address
:
"
<
<
socket_address
.
ipaddr
(
)
.
ToSensitiveString
(
)
<
<
"
rather
than
an
address
associated
with
network
:
"
<
<
port_
-
>
Network
(
)
-
>
ToString
(
)
<
<
"
.
Still
allowing
it
since
it
'
s
localhost
.
"
;
}
else
if
(
IPIsAny
(
port_
-
>
Network
(
)
-
>
GetBestIP
(
)
)
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Socket
is
bound
to
the
address
:
"
<
<
socket_address
.
ipaddr
(
)
.
ToSensitiveString
(
)
<
<
"
rather
than
an
address
associated
with
network
:
"
<
<
port_
-
>
Network
(
)
-
>
ToString
(
)
<
<
"
.
Still
allowing
it
since
it
'
s
the
'
any
'
address
"
"
possibly
caused
by
multiple_routes
being
disabled
.
"
;
}
else
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Dropping
connection
as
TCP
socket
bound
to
IP
"
<
<
socket_address
.
ipaddr
(
)
.
ToSensitiveString
(
)
<
<
"
rather
than
an
address
associated
with
network
:
"
<
<
port_
-
>
Network
(
)
-
>
ToString
(
)
;
OnClose
(
socket
0
)
;
return
;
}
}
set_connected
(
true
)
;
connection_pending_
=
false
;
}
void
TCPConnection
:
:
OnClose
(
rtc
:
:
AsyncPacketSocket
*
socket
int
error
)
{
RTC_DCHECK
(
socket
=
=
socket_
.
get
(
)
)
;
RTC_LOG
(
LS_INFO
)
<
<
ToString
(
)
<
<
"
:
Connection
closed
with
error
"
<
<
error
;
if
(
connected
(
)
)
{
set_connected
(
false
)
;
pretending_to_be_writable_
=
true
;
port
(
)
-
>
thread
(
)
-
>
PostDelayed
(
RTC_FROM_HERE
reconnection_timeout
(
)
this
MSG_TCPCONNECTION_DELAYED_ONCLOSE
)
;
}
else
if
(
!
pretending_to_be_writable_
)
{
Destroy
(
)
;
}
}
void
TCPConnection
:
:
OnMessage
(
rtc
:
:
Message
*
pmsg
)
{
switch
(
pmsg
-
>
message_id
)
{
case
MSG_TCPCONNECTION_DELAYED_ONCLOSE
:
if
(
pretending_to_be_writable_
)
{
Destroy
(
)
;
}
break
;
case
MSG_TCPCONNECTION_FAILED_CREATE_SOCKET
:
FailAndPrune
(
)
;
break
;
default
:
Connection
:
:
OnMessage
(
pmsg
)
;
}
}
void
TCPConnection
:
:
MaybeReconnect
(
)
{
if
(
connected
(
)
|
|
connection_pending_
|
|
!
outgoing_
)
{
return
;
}
RTC_LOG
(
LS_INFO
)
<
<
ToString
(
)
<
<
"
:
TCP
Connection
with
remote
is
closed
"
"
trying
to
reconnect
"
;
CreateOutgoingTcpSocket
(
)
;
error_
=
EPIPE
;
}
void
TCPConnection
:
:
OnReadPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
remote_addr
const
int64_t
&
packet_time_us
)
{
RTC_DCHECK
(
socket
=
=
socket_
.
get
(
)
)
;
Connection
:
:
OnReadPacket
(
data
size
packet_time_us
)
;
}
void
TCPConnection
:
:
OnReadyToSend
(
rtc
:
:
AsyncPacketSocket
*
socket
)
{
RTC_DCHECK
(
socket
=
=
socket_
.
get
(
)
)
;
Connection
:
:
OnReadyToSend
(
)
;
}
void
TCPConnection
:
:
CreateOutgoingTcpSocket
(
)
{
RTC_DCHECK
(
outgoing_
)
;
int
opts
=
(
remote_candidate
(
)
.
protocol
(
)
=
=
SSLTCP_PROTOCOL_NAME
)
?
rtc
:
:
PacketSocketFactory
:
:
OPT_TLS_FAKE
:
0
;
rtc
:
:
PacketSocketTcpOptions
tcp_opts
;
tcp_opts
.
opts
=
opts
;
socket_
.
reset
(
port
(
)
-
>
socket_factory
(
)
-
>
CreateClientTcpSocket
(
rtc
:
:
SocketAddress
(
port
(
)
-
>
Network
(
)
-
>
GetBestIP
(
)
0
)
remote_candidate
(
)
.
address
(
)
port
(
)
-
>
proxy
(
)
port
(
)
-
>
user_agent
(
)
tcp_opts
)
)
;
if
(
socket_
)
{
RTC_LOG
(
LS_VERBOSE
)
<
<
ToString
(
)
<
<
"
:
Connecting
from
"
<
<
socket_
-
>
GetLocalAddress
(
)
.
ToSensitiveString
(
)
<
<
"
to
"
<
<
remote_candidate
(
)
.
address
(
)
.
ToSensitiveString
(
)
;
set_connected
(
false
)
;
connection_pending_
=
true
;
ConnectSocketSignals
(
socket_
.
get
(
)
)
;
}
else
{
RTC_LOG
(
LS_WARNING
)
<
<
ToString
(
)
<
<
"
:
Failed
to
create
connection
to
"
<
<
remote_candidate
(
)
.
address
(
)
.
ToSensitiveString
(
)
;
set_state
(
IceCandidatePairState
:
:
FAILED
)
;
port
(
)
-
>
thread
(
)
-
>
Post
(
RTC_FROM_HERE
this
MSG_TCPCONNECTION_FAILED_CREATE_SOCKET
)
;
}
}
void
TCPConnection
:
:
ConnectSocketSignals
(
rtc
:
:
AsyncPacketSocket
*
socket
)
{
if
(
outgoing_
)
{
socket
-
>
SignalConnect
.
connect
(
this
&
TCPConnection
:
:
OnConnect
)
;
}
socket
-
>
SignalReadPacket
.
connect
(
this
&
TCPConnection
:
:
OnReadPacket
)
;
socket
-
>
SignalReadyToSend
.
connect
(
this
&
TCPConnection
:
:
OnReadyToSend
)
;
socket
-
>
SignalClose
.
connect
(
this
&
TCPConnection
:
:
OnClose
)
;
}
}
