#
ifndef
P2P_BASE_TURN_PORT_H_
#
define
P2P_BASE_TURN_PORT_H_
#
include
<
stdio
.
h
>
#
include
<
cstdint
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
async_dns_resolver
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
packet_socket_factory
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
transport
/
stun
.
h
"
#
include
"
p2p
/
base
/
connection
.
h
"
#
include
"
p2p
/
base
/
port
.
h
"
#
include
"
p2p
/
base
/
port_allocator
.
h
"
#
include
"
p2p
/
base
/
port_interface
.
h
"
#
include
"
p2p
/
base
/
stun_request
.
h
"
#
include
"
p2p
/
client
/
relay_port_factory_interface
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
dscp
.
h
"
#
include
"
rtc_base
/
ip_address
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
#
include
"
rtc_base
/
network
/
sent_packet
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
namespace
webrtc
{
class
TurnCustomizer
;
}
namespace
cricket
{
const
int
kMaxTurnUsernameLength
=
509
;
extern
const
int
STUN_ATTR_TURN_LOGGING_ID
;
extern
const
char
TURN_PORT_TYPE
[
]
;
class
TurnAllocateRequest
;
class
TurnEntry
;
class
TurnPort
:
public
Port
{
public
:
enum
PortState
{
STATE_CONNECTING
STATE_CONNECTED
STATE_READY
STATE_RECEIVEONLY
STATE_DISCONNECTED
}
;
static
bool
Validate
(
const
CreateRelayPortArgs
&
args
)
{
if
(
args
.
config
-
>
credentials
.
username
.
size
(
)
>
kMaxTurnUsernameLength
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Attempt
to
use
TURN
with
a
too
long
username
"
<
<
"
of
length
"
<
<
args
.
config
-
>
credentials
.
username
.
size
(
)
;
return
false
;
}
if
(
!
AllowedTurnPort
(
args
.
server_address
-
>
address
.
port
(
)
args
.
field_trials
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Attempt
to
use
TURN
to
connect
to
port
"
<
<
args
.
server_address
-
>
address
.
port
(
)
;
return
false
;
}
return
true
;
}
static
std
:
:
unique_ptr
<
TurnPort
>
Create
(
const
CreateRelayPortArgs
&
args
webrtc
:
:
AsyncPacketSocket
*
socket
)
{
if
(
!
Validate
(
args
)
)
{
return
nullptr
;
}
return
absl
:
:
WrapUnique
(
new
TurnPort
(
{
.
network_thread
=
args
.
network_thread
.
socket_factory
=
args
.
socket_factory
.
network
=
args
.
network
.
ice_username_fragment
=
args
.
username
.
ice_password
=
args
.
password
.
field_trials
=
args
.
field_trials
}
socket
*
args
.
server_address
args
.
config
-
>
credentials
args
.
relative_priority
args
.
config
-
>
tls_alpn_protocols
args
.
config
-
>
tls_elliptic_curves
args
.
turn_customizer
args
.
config
-
>
tls_cert_verifier
)
)
;
}
static
std
:
:
unique_ptr
<
TurnPort
>
Create
(
const
CreateRelayPortArgs
&
args
int
min_port
int
max_port
)
{
if
(
!
Validate
(
args
)
)
{
return
nullptr
;
}
return
absl
:
:
WrapUnique
(
new
TurnPort
(
{
.
network_thread
=
args
.
network_thread
.
socket_factory
=
args
.
socket_factory
.
network
=
args
.
network
.
ice_username_fragment
=
args
.
username
.
ice_password
=
args
.
password
.
field_trials
=
args
.
field_trials
}
min_port
max_port
*
args
.
server_address
args
.
config
-
>
credentials
args
.
relative_priority
args
.
config
-
>
tls_alpn_protocols
args
.
config
-
>
tls_elliptic_curves
args
.
turn_customizer
args
.
config
-
>
tls_cert_verifier
)
)
;
}
~
TurnPort
(
)
override
;
const
ProtocolAddress
&
server_address
(
)
const
{
return
server_address_
;
}
webrtc
:
:
SocketAddress
GetLocalAddress
(
)
const
;
bool
ready
(
)
const
{
return
state_
=
=
STATE_READY
;
}
bool
connected
(
)
const
{
return
state_
=
=
STATE_READY
|
|
state_
=
=
STATE_CONNECTED
;
}
const
webrtc
:
:
RelayCredentials
&
credentials
(
)
const
{
return
credentials_
;
}
webrtc
:
:
ProtocolType
GetProtocol
(
)
const
override
;
virtual
webrtc
:
:
TlsCertPolicy
GetTlsCertPolicy
(
)
const
;
virtual
void
SetTlsCertPolicy
(
webrtc
:
:
TlsCertPolicy
tls_cert_policy
)
;
void
SetTurnLoggingId
(
absl
:
:
string_view
turn_logging_id
)
;
virtual
std
:
:
vector
<
std
:
:
string
>
GetTlsAlpnProtocols
(
)
const
;
virtual
std
:
:
vector
<
std
:
:
string
>
GetTlsEllipticCurves
(
)
const
;
void
Release
(
)
;
void
PrepareAddress
(
)
override
;
Connection
*
CreateConnection
(
const
webrtc
:
:
Candidate
&
c
webrtc
:
:
PortInterface
:
:
CandidateOrigin
origin
)
override
;
int
SendTo
(
const
void
*
data
size_t
size
const
webrtc
:
:
SocketAddress
&
addr
const
rtc
:
:
PacketOptions
&
options
bool
payload
)
override
;
int
SetOption
(
webrtc
:
:
Socket
:
:
Option
opt
int
value
)
override
;
int
GetOption
(
webrtc
:
:
Socket
:
:
Option
opt
int
*
value
)
override
;
int
GetError
(
)
override
;
bool
HandleIncomingPacket
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
ReceivedPacket
&
packet
)
override
;
bool
CanHandleIncomingPacketsFrom
(
const
webrtc
:
:
SocketAddress
&
addr
)
const
override
;
void
SendBindingErrorResponse
(
StunMessage
*
message
const
webrtc
:
:
SocketAddress
&
addr
int
error_code
absl
:
:
string_view
reason
)
override
;
virtual
void
OnReadPacket
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
ReceivedPacket
&
packet
)
;
void
OnSentPacket
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
SentPacket
&
sent_packet
)
override
;
virtual
void
OnReadyToSend
(
webrtc
:
:
AsyncPacketSocket
*
socket
)
;
bool
SupportsProtocol
(
absl
:
:
string_view
protocol
)
const
override
;
void
OnSocketConnect
(
webrtc
:
:
AsyncPacketSocket
*
socket
)
;
void
OnSocketClose
(
webrtc
:
:
AsyncPacketSocket
*
socket
int
error
)
;
const
std
:
:
string
&
hash
(
)
const
{
return
hash_
;
}
const
std
:
:
string
&
nonce
(
)
const
{
return
nonce_
;
}
int
error
(
)
const
{
return
error_
;
}
void
OnAllocateMismatch
(
)
;
webrtc
:
:
AsyncPacketSocket
*
socket
(
)
const
{
return
socket_
;
}
StunRequestManager
&
request_manager
(
)
{
return
request_manager_
;
}
bool
HasRequests
(
)
{
return
!
request_manager_
.
empty
(
)
;
}
void
set_credentials
(
const
webrtc
:
:
RelayCredentials
&
credentials
)
{
credentials_
=
credentials
;
}
void
HandleConnectionDestroyed
(
Connection
*
conn
)
override
;
void
CloseForTest
(
)
{
Close
(
)
;
}
class
CallbacksForTest
{
public
:
virtual
~
CallbacksForTest
(
)
{
}
virtual
void
OnTurnCreatePermissionResult
(
int
code
)
=
0
;
virtual
void
OnTurnRefreshResult
(
int
code
)
=
0
;
virtual
void
OnTurnPortClosed
(
)
=
0
;
}
;
void
SetCallbacksForTest
(
CallbacksForTest
*
callbacks
)
;
protected
:
TurnPort
(
const
PortParametersRef
&
args
webrtc
:
:
AsyncPacketSocket
*
socket
const
ProtocolAddress
&
server_address
const
webrtc
:
:
RelayCredentials
&
credentials
int
server_priority
const
std
:
:
vector
<
std
:
:
string
>
&
tls_alpn_protocols
const
std
:
:
vector
<
std
:
:
string
>
&
tls_elliptic_curves
webrtc
:
:
TurnCustomizer
*
customizer
rtc
:
:
SSLCertificateVerifier
*
tls_cert_verifier
=
nullptr
)
;
TurnPort
(
const
PortParametersRef
&
args
uint16_t
min_port
uint16_t
max_port
const
ProtocolAddress
&
server_address
const
webrtc
:
:
RelayCredentials
&
credentials
int
server_priority
const
std
:
:
vector
<
std
:
:
string
>
&
tls_alpn_protocols
const
std
:
:
vector
<
std
:
:
string
>
&
tls_elliptic_curves
webrtc
:
:
TurnCustomizer
*
customizer
rtc
:
:
SSLCertificateVerifier
*
tls_cert_verifier
=
nullptr
)
;
[
[
deprecated
(
"
Pass
arguments
using
PortParametersRef
"
)
]
]
TurnPort
(
webrtc
:
:
TaskQueueBase
*
thread
webrtc
:
:
PacketSocketFactory
*
factory
const
rtc
:
:
Network
*
network
webrtc
:
:
AsyncPacketSocket
*
socket
absl
:
:
string_view
username
absl
:
:
string_view
password
const
ProtocolAddress
&
server_address
const
webrtc
:
:
RelayCredentials
&
credentials
int
server_priority
const
std
:
:
vector
<
std
:
:
string
>
&
tls_alpn_protocols
const
std
:
:
vector
<
std
:
:
string
>
&
tls_elliptic_curves
webrtc
:
:
TurnCustomizer
*
customizer
rtc
:
:
SSLCertificateVerifier
*
tls_cert_verifier
=
nullptr
const
webrtc
:
:
FieldTrialsView
*
field_trials
=
nullptr
)
;
[
[
deprecated
(
"
Pass
arguments
using
PortParametersRef
"
)
]
]
TurnPort
(
webrtc
:
:
TaskQueueBase
*
thread
webrtc
:
:
PacketSocketFactory
*
factory
const
rtc
:
:
Network
*
network
uint16_t
min_port
uint16_t
max_port
absl
:
:
string_view
username
absl
:
:
string_view
password
const
ProtocolAddress
&
server_address
const
webrtc
:
:
RelayCredentials
&
credentials
int
server_priority
const
std
:
:
vector
<
std
:
:
string
>
&
tls_alpn_protocols
const
std
:
:
vector
<
std
:
:
string
>
&
tls_elliptic_curves
webrtc
:
:
TurnCustomizer
*
customizer
rtc
:
:
SSLCertificateVerifier
*
tls_cert_verifier
=
nullptr
const
webrtc
:
:
FieldTrialsView
*
field_trials
=
nullptr
)
;
bool
CreateOrRefreshEntry
(
Connection
*
conn
int
channel_number
)
;
rtc
:
:
DiffServCodePoint
StunDscpValue
(
)
const
override
;
void
Close
(
)
;
private
:
typedef
std
:
:
map
<
webrtc
:
:
Socket
:
:
Option
int
>
SocketOptionsMap
;
typedef
std
:
:
set
<
webrtc
:
:
SocketAddress
>
AttemptedServerSet
;
static
bool
AllowedTurnPort
(
int
port
const
webrtc
:
:
FieldTrialsView
*
field_trials
)
;
void
TryAlternateServer
(
)
;
bool
CreateTurnClientSocket
(
)
;
void
set_nonce
(
absl
:
:
string_view
nonce
)
{
nonce_
=
std
:
:
string
(
nonce
)
;
}
void
set_realm
(
absl
:
:
string_view
realm
)
;
void
OnRefreshError
(
)
;
void
HandleRefreshError
(
)
;
bool
SetAlternateServer
(
const
webrtc
:
:
SocketAddress
&
address
)
;
void
ResolveTurnAddress
(
const
webrtc
:
:
SocketAddress
&
address
)
;
void
OnResolveResult
(
const
webrtc
:
:
AsyncDnsResolverResult
&
result
)
;
void
AddRequestAuthInfo
(
StunMessage
*
msg
)
;
void
OnSendStunPacket
(
const
void
*
data
size_t
size
StunRequest
*
request
)
;
void
OnStunAddress
(
const
webrtc
:
:
SocketAddress
&
address
)
;
void
OnAllocateSuccess
(
const
webrtc
:
:
SocketAddress
&
address
const
webrtc
:
:
SocketAddress
&
stun_address
)
;
void
OnAllocateError
(
int
error_code
absl
:
:
string_view
reason
)
;
void
OnAllocateRequestTimeout
(
)
;
void
HandleDataIndication
(
const
char
*
data
size_t
size
int64_t
packet_time_us
)
;
void
HandleChannelData
(
uint16_t
channel_id
const
char
*
data
size_t
size
int64_t
packet_time_us
)
;
void
DispatchPacket
(
const
char
*
data
size_t
size
const
webrtc
:
:
SocketAddress
&
remote_addr
webrtc
:
:
ProtocolType
proto
int64_t
packet_time_us
)
;
bool
ScheduleRefresh
(
uint32_t
lifetime
)
;
void
SendRequest
(
StunRequest
*
request
int
delay
)
;
int
Send
(
const
void
*
data
size_t
size
const
rtc
:
:
PacketOptions
&
options
)
;
void
UpdateHash
(
)
;
bool
UpdateNonce
(
StunMessage
*
response
)
;
void
ResetNonce
(
)
;
bool
HasPermission
(
const
webrtc
:
:
IPAddress
&
ipaddr
)
const
;
TurnEntry
*
FindEntry
(
const
webrtc
:
:
SocketAddress
&
address
)
const
;
TurnEntry
*
FindEntry
(
uint16_t
channel_id
)
const
;
bool
FailAndPruneConnection
(
const
webrtc
:
:
SocketAddress
&
address
)
;
void
MaybeAddTurnLoggingId
(
StunMessage
*
message
)
;
void
TurnCustomizerMaybeModifyOutgoingStunMessage
(
StunMessage
*
message
)
;
bool
TurnCustomizerAllowChannelData
(
const
void
*
data
size_t
size
bool
payload
)
;
ProtocolAddress
server_address_
;
std
:
:
string
ReconstructServerUrl
(
)
;
std
:
:
string
server_url_
;
webrtc
:
:
TlsCertPolicy
tls_cert_policy_
=
webrtc
:
:
TlsCertPolicy
:
:
TLS_CERT_POLICY_SECURE
;
std
:
:
vector
<
std
:
:
string
>
tls_alpn_protocols_
;
std
:
:
vector
<
std
:
:
string
>
tls_elliptic_curves_
;
rtc
:
:
SSLCertificateVerifier
*
tls_cert_verifier_
;
webrtc
:
:
RelayCredentials
credentials_
;
AttemptedServerSet
attempted_server_addresses_
;
webrtc
:
:
AsyncPacketSocket
*
socket_
;
SocketOptionsMap
socket_options_
;
std
:
:
unique_ptr
<
webrtc
:
:
AsyncDnsResolverInterface
>
resolver_
;
int
error_
;
rtc
:
:
DiffServCodePoint
stun_dscp_value_
;
StunRequestManager
request_manager_
;
std
:
:
string
realm_
;
std
:
:
string
nonce_
;
std
:
:
string
hash_
;
int
next_channel_number_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
TurnEntry
>
>
entries_
;
PortState
state_
;
int
server_priority_
;
size_t
allocate_mismatch_retries_
;
webrtc
:
:
TurnCustomizer
*
turn_customizer_
=
nullptr
;
std
:
:
string
turn_logging_id_
;
webrtc
:
:
ScopedTaskSafety
task_safety_
;
CallbacksForTest
*
callbacks_for_test_
=
nullptr
;
friend
class
TurnEntry
;
friend
class
TurnAllocateRequest
;
friend
class
TurnRefreshRequest
;
friend
class
TurnCreatePermissionRequest
;
friend
class
TurnChannelBindRequest
;
}
;
}
#
endif
