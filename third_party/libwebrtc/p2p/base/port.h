#
ifndef
P2P_BASE_PORT_H_
#
define
P2P_BASE_PORT_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
functional
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
set
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
packet_socket_factory
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
transport
/
stun
.
h
"
#
include
"
p2p
/
base
/
candidate_pair_interface
.
h
"
#
include
"
p2p
/
base
/
connection
.
h
"
#
include
"
p2p
/
base
/
p2p_constants
.
h
"
#
include
"
p2p
/
base
/
port_interface
.
h
"
#
include
"
p2p
/
base
/
transport_description
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
callback_list
.
h
"
#
include
"
rtc_base
/
dscp
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
#
include
"
rtc_base
/
network
/
sent_packet
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
rtc_base
/
weak_ptr
.
h
"
namespace
webrtc
{
extern
const
int
DISCARD_PORT
;
extern
const
char
TCPTYPE_ACTIVE_STR
[
]
;
extern
const
char
TCPTYPE_PASSIVE_STR
[
]
;
extern
const
char
TCPTYPE_SIMOPEN_STR
[
]
;
enum
class
MdnsNameRegistrationStatus
{
kNotStarted
kInProgress
kCompleted
}
;
class
StunStats
{
public
:
StunStats
(
)
=
default
;
StunStats
(
const
StunStats
&
)
=
default
;
~
StunStats
(
)
=
default
;
StunStats
&
operator
=
(
const
StunStats
&
other
)
=
default
;
int
stun_binding_requests_sent
=
0
;
int
stun_binding_responses_received
=
0
;
double
stun_binding_rtt_ms_total
=
0
;
double
stun_binding_rtt_ms_squared_total
=
0
;
}
;
class
CandidateStats
{
public
:
CandidateStats
(
)
=
default
;
CandidateStats
(
const
CandidateStats
&
)
=
default
;
CandidateStats
(
CandidateStats
&
&
)
=
default
;
CandidateStats
(
Candidate
candidate
std
:
:
optional
<
StunStats
>
stats
=
std
:
:
nullopt
)
:
candidate_
(
std
:
:
move
(
candidate
)
)
stun_stats_
(
std
:
:
move
(
stats
)
)
{
}
~
CandidateStats
(
)
=
default
;
CandidateStats
&
operator
=
(
const
CandidateStats
&
other
)
=
default
;
const
Candidate
&
candidate
(
)
const
{
return
candidate_
;
}
const
std
:
:
optional
<
StunStats
>
&
stun_stats
(
)
const
{
return
stun_stats_
;
}
private
:
Candidate
candidate_
;
std
:
:
optional
<
StunStats
>
stun_stats_
;
}
;
typedef
std
:
:
vector
<
CandidateStats
>
CandidateStatsList
;
const
char
*
ProtoToString
(
ProtocolType
proto
)
;
std
:
:
optional
<
ProtocolType
>
StringToProto
(
absl
:
:
string_view
proto_name
)
;
struct
ProtocolAddress
{
SocketAddress
address
;
ProtocolType
proto
;
ProtocolAddress
(
const
SocketAddress
&
a
ProtocolType
p
)
:
address
(
a
)
proto
(
p
)
{
}
bool
operator
=
=
(
const
ProtocolAddress
&
o
)
const
{
return
address
=
=
o
.
address
&
&
proto
=
=
o
.
proto
;
}
bool
operator
!
=
(
const
ProtocolAddress
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
struct
IceCandidateErrorEvent
{
IceCandidateErrorEvent
(
)
=
default
;
IceCandidateErrorEvent
(
absl
:
:
string_view
address
int
port
absl
:
:
string_view
url
int
error_code
absl
:
:
string_view
error_text
)
:
address
(
std
:
:
move
(
address
)
)
port
(
port
)
url
(
std
:
:
move
(
url
)
)
error_code
(
error_code
)
error_text
(
std
:
:
move
(
error_text
)
)
{
}
std
:
:
string
address
;
int
port
=
0
;
std
:
:
string
url
;
int
error_code
=
0
;
std
:
:
string
error_text
;
}
;
struct
CandidatePairChangeEvent
{
CandidatePair
selected_candidate_pair
;
int64_t
last_data_received_ms
;
std
:
:
string
reason
;
int64_t
estimated_disconnected_time_ms
;
}
;
typedef
std
:
:
set
<
SocketAddress
>
ServerAddresses
;
class
RTC_EXPORT
Port
:
public
PortInterface
public
sigslot
:
:
has_slots
<
>
{
public
:
struct
PortParametersRef
{
Environment
env
;
TaskQueueBase
*
network_thread
;
PacketSocketFactory
*
socket_factory
;
const
:
:
webrtc
:
:
Network
*
network
;
absl
:
:
string_view
ice_username_fragment
;
absl
:
:
string_view
ice_password
;
}
;
protected
:
Port
(
const
PortParametersRef
&
args
IceCandidateType
type
)
;
Port
(
const
PortParametersRef
&
args
IceCandidateType
type
uint16_t
min_port
uint16_t
max_port
bool
shared_socket
=
false
)
;
public
:
~
Port
(
)
override
;
IceCandidateType
Type
(
)
const
override
;
const
:
:
webrtc
:
:
Network
*
Network
(
)
const
override
;
IceRole
GetIceRole
(
)
const
override
;
void
SetIceRole
(
IceRole
role
)
override
;
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
override
;
uint64_t
IceTiebreaker
(
)
const
override
;
bool
SharedSocket
(
)
const
override
;
void
ResetSharedSocket
(
)
{
shared_socket_
=
false
;
}
void
KeepAliveUntilPruned
(
)
;
void
Prune
(
)
;
void
CancelPendingTasks
(
)
;
TaskQueueBase
*
thread
(
)
override
{
return
thread_
;
}
PacketSocketFactory
*
socket_factory
(
)
const
override
{
return
factory_
;
}
const
std
:
:
string
&
content_name
(
)
const
override
{
return
content_name_
;
}
void
set_content_name
(
absl
:
:
string_view
content_name
)
{
content_name_
=
std
:
:
string
(
content_name
)
;
}
int
component
(
)
const
{
return
component_
;
}
void
set_component
(
int
component
)
{
component_
=
component
;
}
bool
send_retransmit_count_attribute
(
)
const
override
{
return
send_retransmit_count_attribute_
;
}
void
set_send_retransmit_count_attribute
(
bool
enable
)
{
send_retransmit_count_attribute_
=
enable
;
}
uint32_t
generation
(
)
const
override
{
return
generation_
;
}
void
set_generation
(
uint32_t
generation
)
override
{
generation_
=
generation
;
}
const
std
:
:
string
&
username_fragment
(
)
const
;
const
std
:
:
string
&
password
(
)
const
{
return
password_
;
}
void
SetIceParameters
(
int
component
absl
:
:
string_view
username_fragment
absl
:
:
string_view
password
)
;
sigslot
:
:
signal2
<
Port
*
const
Candidate
&
>
SignalCandidateReady
;
const
std
:
:
vector
<
Candidate
>
&
Candidates
(
)
const
override
;
sigslot
:
:
signal2
<
Port
*
const
IceCandidateErrorEvent
&
>
SignalCandidateError
;
sigslot
:
:
signal1
<
Port
*
>
SignalPortComplete
;
sigslot
:
:
signal1
<
Port
*
>
SignalPortError
;
void
SubscribePortDestroyed
(
std
:
:
function
<
void
(
PortInterface
*
)
>
callback
)
override
;
void
SendPortDestroyed
(
Port
*
port
)
;
typedef
std
:
:
map
<
SocketAddress
Connection
*
>
AddressMap
;
const
AddressMap
&
connections
(
)
{
return
connections_
;
}
Connection
*
GetConnection
(
const
SocketAddress
&
remote_addr
)
override
;
void
DestroyConnection
(
Connection
*
conn
)
override
{
DestroyConnectionInternal
(
conn
false
)
;
}
void
DestroyConnectionAsync
(
Connection
*
conn
)
override
{
DestroyConnectionInternal
(
conn
true
)
;
}
virtual
bool
HandleIncomingPacket
(
AsyncPacketSocket
*
socket
const
ReceivedIpPacket
&
packet
)
;
virtual
bool
CanHandleIncomingPacketsFrom
(
const
SocketAddress
&
remote_addr
)
const
;
void
SendBindingErrorResponse
(
StunMessage
*
message
const
SocketAddress
&
addr
int
error_code
absl
:
:
string_view
reason
)
override
;
void
SendUnknownAttributesErrorResponse
(
StunMessage
*
message
const
SocketAddress
&
addr
const
std
:
:
vector
<
uint16_t
>
&
unknown_types
)
;
void
EnablePortPackets
(
)
override
;
void
Destroy
(
)
;
std
:
:
string
ToString
(
)
const
override
;
uint16_t
min_port
(
)
{
return
min_port_
;
}
uint16_t
max_port
(
)
{
return
max_port_
;
}
void
set_timeout_delay
(
int
delay
)
;
bool
ParseStunUsername
(
const
StunMessage
*
stun_msg
std
:
:
string
*
local_username
std
:
:
string
*
remote_username
)
const
override
;
std
:
:
string
CreateStunUsername
(
absl
:
:
string_view
remote_username
)
const
override
;
bool
MaybeIceRoleConflict
(
const
SocketAddress
&
addr
IceMessage
*
stun_msg
absl
:
:
string_view
remote_ufrag
)
override
;
virtual
void
OnSentPacket
(
AsyncPacketSocket
*
socket
const
SentPacketInfo
&
sent_packet
)
=
0
;
void
OnReadyToSend
(
)
;
void
AddPrflxCandidate
(
const
Candidate
&
local
)
override
;
int16_t
network_cost
(
)
const
override
{
return
network_cost_
;
}
void
GetStunStats
(
std
:
:
optional
<
StunStats
>
*
)
override
{
}
protected
:
void
UpdateNetworkCost
(
)
override
;
WeakPtr
<
Port
>
NewWeakPtr
(
)
{
return
weak_factory_
.
GetWeakPtr
(
)
;
}
void
AddAddress
(
const
SocketAddress
&
address
const
SocketAddress
&
base_address
const
SocketAddress
&
related_address
absl
:
:
string_view
protocol
absl
:
:
string_view
relay_protocol
absl
:
:
string_view
tcptype
IceCandidateType
type
uint32_t
type_preference
uint32_t
relay_preference
absl
:
:
string_view
url
bool
is_final
)
;
void
FinishAddingAddress
(
const
Candidate
&
c
bool
is_final
)
RTC_RUN_ON
(
thread_
)
;
virtual
void
PostAddAddress
(
bool
is_final
)
;
void
AddOrReplaceConnection
(
Connection
*
conn
)
;
void
OnReadPacket
(
const
ReceivedIpPacket
&
packet
ProtocolType
proto
)
;
[
[
deprecated
(
"
Use
OnReadPacket
(
const
webrtc
:
:
ReceivedIpPacket
&
packet
ProtocolType
"
"
proto
)
"
)
]
]
void
OnReadPacket
(
const
char
*
data
size_t
size
const
SocketAddress
&
addr
ProtocolType
proto
)
{
OnReadPacket
(
ReceivedIpPacket
:
:
CreateFromLegacy
(
data
size
-
1
addr
)
proto
)
;
}
bool
GetStunMessage
(
const
char
*
data
size_t
size
const
SocketAddress
&
addr
std
:
:
unique_ptr
<
IceMessage
>
*
out_msg
std
:
:
string
*
out_username
)
override
;
bool
IsCompatibleAddress
(
const
SocketAddress
&
addr
)
;
DiffServCodePoint
StunDscpValue
(
)
const
override
;
virtual
void
HandleConnectionDestroyed
(
Connection
*
)
{
}
void
DestroyAllConnections
(
)
;
void
CopyPortInformationToPacketInfo
(
PacketInfo
*
info
)
const
;
MdnsNameRegistrationStatus
mdns_name_registration_status
(
)
const
{
return
mdns_name_registration_status_
;
}
void
set_mdns_name_registration_status
(
MdnsNameRegistrationStatus
status
)
{
mdns_name_registration_status_
=
status
;
}
const
FieldTrialsView
&
field_trials
(
)
const
{
return
env_
.
field_trials
(
)
;
}
IceCandidateType
type
(
)
const
{
return
type_
;
}
private
:
bool
MaybeObfuscateAddress
(
const
Candidate
&
c
bool
is_final
)
RTC_RUN_ON
(
thread_
)
;
void
PostDestroyIfDead
(
bool
delayed
)
;
void
DestroyIfDead
(
)
;
bool
OnConnectionDestroyed
(
Connection
*
conn
)
;
void
DestroyConnectionInternal
(
Connection
*
conn
bool
async
)
;
void
OnNetworkTypeChanged
(
const
:
:
webrtc
:
:
Network
*
network
)
;
const
Environment
env_
;
TaskQueueBase
*
const
thread_
;
PacketSocketFactory
*
const
factory_
;
const
IceCandidateType
type_
;
bool
send_retransmit_count_attribute_
;
const
:
:
webrtc
:
:
Network
*
network_
;
uint16_t
min_port_
;
uint16_t
max_port_
;
std
:
:
string
content_name_
;
int
component_
;
uint32_t
generation_
;
std
:
:
string
ice_username_fragment_
RTC_GUARDED_BY
(
thread_
)
;
std
:
:
string
password_
RTC_GUARDED_BY
(
thread_
)
;
std
:
:
vector
<
Candidate
>
candidates_
RTC_GUARDED_BY
(
thread_
)
;
AddressMap
connections_
;
int
timeout_delay_
;
bool
enable_port_packets_
;
IceRole
ice_role_
;
uint64_t
tiebreaker_
;
bool
shared_socket_
;
int16_t
network_cost_
;
enum
class
State
{
INIT
KEEP_ALIVE_UNTIL_PRUNED
PRUNED
}
;
State
state_
=
State
:
:
INIT
;
int64_t
last_time_all_connections_removed_
=
0
;
MdnsNameRegistrationStatus
mdns_name_registration_status_
=
MdnsNameRegistrationStatus
:
:
kNotStarted
;
CallbackList
<
PortInterface
*
>
port_destroyed_callback_list_
;
WeakPtrFactory
<
Port
>
weak_factory_
;
}
;
}
#
ifdef
WEBRTC_ALLOW_DEPRECATED_NAMESPACES
namespace
cricket
{
using
:
:
webrtc
:
:
CandidatePairChangeEvent
;
using
:
:
webrtc
:
:
CandidateStats
;
using
:
:
webrtc
:
:
CandidateStatsList
;
using
:
:
webrtc
:
:
DISCARD_PORT
;
using
:
:
webrtc
:
:
IceCandidateErrorEvent
;
using
:
:
webrtc
:
:
MdnsNameRegistrationStatus
;
using
:
:
webrtc
:
:
Port
;
using
:
:
webrtc
:
:
ProtocolAddress
;
using
:
:
webrtc
:
:
ProtoToString
;
using
:
:
webrtc
:
:
ServerAddresses
;
using
:
:
webrtc
:
:
StringToProto
;
using
:
:
webrtc
:
:
StunStats
;
using
:
:
webrtc
:
:
TCPTYPE_ACTIVE_STR
;
using
:
:
webrtc
:
:
TCPTYPE_PASSIVE_STR
;
using
:
:
webrtc
:
:
TCPTYPE_SIMOPEN_STR
;
}
#
endif
#
endif
