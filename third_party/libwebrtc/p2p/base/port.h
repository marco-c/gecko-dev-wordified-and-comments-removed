#
ifndef
P2P_BASE_PORT_H_
#
define
P2P_BASE_PORT_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
packet_socket_factory
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
transport
/
field_trial_based_config
.
h
"
#
include
"
api
/
transport
/
stun
.
h
"
#
include
"
logging
/
rtc_event_log
/
events
/
rtc_event_ice_candidate_pair
.
h
"
#
include
"
logging
/
rtc_event_log
/
events
/
rtc_event_ice_candidate_pair_config
.
h
"
#
include
"
logging
/
rtc_event_log
/
ice_logger
.
h
"
#
include
"
p2p
/
base
/
candidate_pair_interface
.
h
"
#
include
"
p2p
/
base
/
connection
.
h
"
#
include
"
p2p
/
base
/
connection_info
.
h
"
#
include
"
p2p
/
base
/
p2p_constants
.
h
"
#
include
"
p2p
/
base
/
port_interface
.
h
"
#
include
"
p2p
/
base
/
stun_request
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
callback_list
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
memory
/
always_valid_pointer
.
h
"
#
include
"
rtc_base
/
net_helper
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
proxy_info
.
h
"
#
include
"
rtc_base
/
rate_tracker
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
weak_ptr
.
h
"
namespace
cricket
{
RTC_EXPORT
extern
const
char
LOCAL_PORT_TYPE
[
]
;
RTC_EXPORT
extern
const
char
STUN_PORT_TYPE
[
]
;
RTC_EXPORT
extern
const
char
PRFLX_PORT_TYPE
[
]
;
RTC_EXPORT
extern
const
char
RELAY_PORT_TYPE
[
]
;
extern
const
int
DISCARD_PORT
;
extern
const
char
TCPTYPE_ACTIVE_STR
[
]
;
extern
const
char
TCPTYPE_PASSIVE_STR
[
]
;
extern
const
char
TCPTYPE_SIMOPEN_STR
[
]
;
enum
IcePriorityValue
{
ICE_TYPE_PREFERENCE_RELAY_TLS
=
0
ICE_TYPE_PREFERENCE_RELAY_TCP
=
1
ICE_TYPE_PREFERENCE_RELAY_UDP
=
2
ICE_TYPE_PREFERENCE_PRFLX_TCP
=
80
ICE_TYPE_PREFERENCE_HOST_TCP
=
90
ICE_TYPE_PREFERENCE_SRFLX
=
100
ICE_TYPE_PREFERENCE_PRFLX
=
110
ICE_TYPE_PREFERENCE_HOST
=
126
}
;
enum
class
MdnsNameRegistrationStatus
{
kNotStarted
kInProgress
kCompleted
}
;
class
StunStats
{
public
:
StunStats
(
)
=
default
;
StunStats
(
const
StunStats
&
)
=
default
;
~
StunStats
(
)
=
default
;
StunStats
&
operator
=
(
const
StunStats
&
other
)
=
default
;
int
stun_binding_requests_sent
=
0
;
int
stun_binding_responses_received
=
0
;
double
stun_binding_rtt_ms_total
=
0
;
double
stun_binding_rtt_ms_squared_total
=
0
;
}
;
class
CandidateStats
{
public
:
CandidateStats
(
)
=
default
;
CandidateStats
(
const
CandidateStats
&
)
=
default
;
CandidateStats
(
CandidateStats
&
&
)
=
default
;
CandidateStats
(
Candidate
candidate
absl
:
:
optional
<
StunStats
>
stats
=
absl
:
:
nullopt
)
:
candidate_
(
std
:
:
move
(
candidate
)
)
stun_stats_
(
std
:
:
move
(
stats
)
)
{
}
~
CandidateStats
(
)
=
default
;
CandidateStats
&
operator
=
(
const
CandidateStats
&
other
)
=
default
;
const
Candidate
&
candidate
(
)
const
{
return
candidate_
;
}
const
absl
:
:
optional
<
StunStats
>
&
stun_stats
(
)
const
{
return
stun_stats_
;
}
private
:
Candidate
candidate_
;
absl
:
:
optional
<
StunStats
>
stun_stats_
;
}
;
typedef
std
:
:
vector
<
CandidateStats
>
CandidateStatsList
;
const
char
*
ProtoToString
(
ProtocolType
proto
)
;
bool
StringToProto
(
const
char
*
value
ProtocolType
*
proto
)
;
struct
ProtocolAddress
{
rtc
:
:
SocketAddress
address
;
ProtocolType
proto
;
ProtocolAddress
(
const
rtc
:
:
SocketAddress
&
a
ProtocolType
p
)
:
address
(
a
)
proto
(
p
)
{
}
bool
operator
=
=
(
const
ProtocolAddress
&
o
)
const
{
return
address
=
=
o
.
address
&
&
proto
=
=
o
.
proto
;
}
bool
operator
!
=
(
const
ProtocolAddress
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
struct
IceCandidateErrorEvent
{
IceCandidateErrorEvent
(
)
=
default
;
IceCandidateErrorEvent
(
std
:
:
string
address
int
port
std
:
:
string
url
int
error_code
std
:
:
string
error_text
)
:
address
(
std
:
:
move
(
address
)
)
port
(
port
)
url
(
std
:
:
move
(
url
)
)
error_code
(
error_code
)
error_text
(
std
:
:
move
(
error_text
)
)
{
}
std
:
:
string
address
;
int
port
=
0
;
std
:
:
string
url
;
int
error_code
=
0
;
std
:
:
string
error_text
;
}
;
struct
CandidatePairChangeEvent
{
CandidatePair
selected_candidate_pair
;
int64_t
last_data_received_ms
;
std
:
:
string
reason
;
int64_t
estimated_disconnected_time_ms
;
}
;
typedef
std
:
:
set
<
rtc
:
:
SocketAddress
>
ServerAddresses
;
class
Port
:
public
PortInterface
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
enum
class
State
{
INIT
KEEP_ALIVE_UNTIL_PRUNED
PRUNED
}
;
Port
(
rtc
:
:
Thread
*
thread
const
std
:
:
string
&
type
rtc
:
:
PacketSocketFactory
*
factory
const
rtc
:
:
Network
*
network
const
std
:
:
string
&
username_fragment
const
std
:
:
string
&
password
const
webrtc
:
:
FieldTrialsView
*
field_trials
=
nullptr
)
;
Port
(
rtc
:
:
Thread
*
thread
const
std
:
:
string
&
type
rtc
:
:
PacketSocketFactory
*
factory
const
rtc
:
:
Network
*
network
uint16_t
min_port
uint16_t
max_port
const
std
:
:
string
&
username_fragment
const
std
:
:
string
&
password
const
webrtc
:
:
FieldTrialsView
*
field_trials
=
nullptr
)
;
~
Port
(
)
override
;
const
std
:
:
string
&
Type
(
)
const
override
;
const
rtc
:
:
Network
*
Network
(
)
const
override
;
IceRole
GetIceRole
(
)
const
override
;
void
SetIceRole
(
IceRole
role
)
override
;
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
override
;
uint64_t
IceTiebreaker
(
)
const
override
;
bool
SharedSocket
(
)
const
override
;
void
ResetSharedSocket
(
)
{
shared_socket_
=
false
;
}
void
KeepAliveUntilPruned
(
)
;
void
Prune
(
)
;
void
CancelPendingTasks
(
)
;
rtc
:
:
Thread
*
thread
(
)
{
return
thread_
;
}
rtc
:
:
PacketSocketFactory
*
socket_factory
(
)
const
{
return
factory_
;
}
const
std
:
:
string
&
content_name
(
)
const
{
return
content_name_
;
}
void
set_content_name
(
const
std
:
:
string
&
content_name
)
{
content_name_
=
content_name
;
}
int
component
(
)
const
{
return
component_
;
}
void
set_component
(
int
component
)
{
component_
=
component
;
}
bool
send_retransmit_count_attribute
(
)
const
{
return
send_retransmit_count_attribute_
;
}
void
set_send_retransmit_count_attribute
(
bool
enable
)
{
send_retransmit_count_attribute_
=
enable
;
}
uint32_t
generation
(
)
const
{
return
generation_
;
}
void
set_generation
(
uint32_t
generation
)
{
generation_
=
generation
;
}
const
std
:
:
string
username_fragment
(
)
const
;
const
std
:
:
string
&
password
(
)
const
{
return
password_
;
}
void
SetIceParameters
(
int
component
const
std
:
:
string
&
username_fragment
const
std
:
:
string
&
password
)
;
sigslot
:
:
signal2
<
Port
*
const
Candidate
&
>
SignalCandidateReady
;
const
std
:
:
vector
<
Candidate
>
&
Candidates
(
)
const
override
;
sigslot
:
:
signal2
<
Port
*
const
IceCandidateErrorEvent
&
>
SignalCandidateError
;
sigslot
:
:
signal1
<
Port
*
>
SignalPortComplete
;
sigslot
:
:
signal1
<
Port
*
>
SignalPortError
;
void
SubscribePortDestroyed
(
std
:
:
function
<
void
(
PortInterface
*
)
>
callback
)
override
;
void
SendPortDestroyed
(
Port
*
port
)
;
typedef
std
:
:
map
<
rtc
:
:
SocketAddress
Connection
*
>
AddressMap
;
const
AddressMap
&
connections
(
)
{
return
connections_
;
}
Connection
*
GetConnection
(
const
rtc
:
:
SocketAddress
&
remote_addr
)
override
;
sigslot
:
:
signal2
<
Port
*
Connection
*
>
SignalConnectionCreated
;
virtual
bool
HandleIncomingPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
remote_addr
int64_t
packet_time_us
)
;
virtual
bool
CanHandleIncomingPacketsFrom
(
const
rtc
:
:
SocketAddress
&
remote_addr
)
const
;
void
SendBindingErrorResponse
(
StunMessage
*
message
const
rtc
:
:
SocketAddress
&
addr
int
error_code
const
std
:
:
string
&
reason
)
override
;
void
SendUnknownAttributesErrorResponse
(
StunMessage
*
message
const
rtc
:
:
SocketAddress
&
addr
const
std
:
:
vector
<
uint16_t
>
&
unknown_types
)
;
void
set_proxy
(
const
std
:
:
string
&
user_agent
const
rtc
:
:
ProxyInfo
&
proxy
)
{
user_agent_
=
user_agent
;
proxy_
=
proxy
;
}
const
std
:
:
string
&
user_agent
(
)
{
return
user_agent_
;
}
const
rtc
:
:
ProxyInfo
&
proxy
(
)
{
return
proxy_
;
}
void
EnablePortPackets
(
)
override
;
void
Destroy
(
)
;
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
override
;
std
:
:
string
ToString
(
)
const
override
;
uint16_t
min_port
(
)
{
return
min_port_
;
}
uint16_t
max_port
(
)
{
return
max_port_
;
}
void
set_timeout_delay
(
int
delay
)
;
bool
ParseStunUsername
(
const
StunMessage
*
stun_msg
std
:
:
string
*
local_username
std
:
:
string
*
remote_username
)
const
;
void
CreateStunUsername
(
const
std
:
:
string
&
remote_username
std
:
:
string
*
stun_username_attr_str
)
const
;
bool
MaybeIceRoleConflict
(
const
rtc
:
:
SocketAddress
&
addr
IceMessage
*
stun_msg
const
std
:
:
string
&
remote_ufrag
)
;
virtual
void
OnSentPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
SentPacket
&
sent_packet
)
=
0
;
void
OnReadyToSend
(
)
;
size_t
AddPrflxCandidate
(
const
Candidate
&
local
)
;
int16_t
network_cost
(
)
const
{
return
network_cost_
;
}
void
GetStunStats
(
absl
:
:
optional
<
StunStats
>
*
stats
)
override
{
}
static
std
:
:
string
ComputeFoundation
(
const
std
:
:
string
&
type
const
std
:
:
string
&
protocol
const
std
:
:
string
&
relay_protocol
const
rtc
:
:
SocketAddress
&
base_address
)
;
rtc
:
:
WeakPtr
<
Port
>
NewWeakPtr
(
)
{
return
weak_factory_
.
GetWeakPtr
(
)
;
}
protected
:
enum
{
MSG_DESTROY_IF_DEAD
=
0
MSG_FIRST_AVAILABLE
}
;
virtual
void
UpdateNetworkCost
(
)
;
void
set_type
(
const
std
:
:
string
&
type
)
{
type_
=
type
;
}
void
AddAddress
(
const
rtc
:
:
SocketAddress
&
address
const
rtc
:
:
SocketAddress
&
base_address
const
rtc
:
:
SocketAddress
&
related_address
const
std
:
:
string
&
protocol
const
std
:
:
string
&
relay_protocol
const
std
:
:
string
&
tcptype
const
std
:
:
string
&
type
uint32_t
type_preference
uint32_t
relay_preference
const
std
:
:
string
&
url
bool
is_final
)
;
void
FinishAddingAddress
(
const
Candidate
&
c
bool
is_final
)
;
virtual
void
PostAddAddress
(
bool
is_final
)
;
void
AddOrReplaceConnection
(
Connection
*
conn
)
;
void
OnReadPacket
(
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
addr
ProtocolType
proto
)
;
bool
GetStunMessage
(
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
addr
std
:
:
unique_ptr
<
IceMessage
>
*
out_msg
std
:
:
string
*
out_username
)
;
bool
IsCompatibleAddress
(
const
rtc
:
:
SocketAddress
&
addr
)
;
virtual
rtc
:
:
DiffServCodePoint
StunDscpValue
(
)
const
;
virtual
void
HandleConnectionDestroyed
(
Connection
*
conn
)
{
}
void
DestroyAllConnections
(
)
;
void
CopyPortInformationToPacketInfo
(
rtc
:
:
PacketInfo
*
info
)
const
;
MdnsNameRegistrationStatus
mdns_name_registration_status
(
)
const
{
return
mdns_name_registration_status_
;
}
void
set_mdns_name_registration_status
(
MdnsNameRegistrationStatus
status
)
{
mdns_name_registration_status_
=
status
;
}
private
:
void
Construct
(
)
;
void
OnConnectionDestroyed
(
Connection
*
conn
)
;
void
OnNetworkTypeChanged
(
const
rtc
:
:
Network
*
network
)
;
rtc
:
:
Thread
*
const
thread_
;
rtc
:
:
PacketSocketFactory
*
const
factory_
;
std
:
:
string
type_
;
bool
send_retransmit_count_attribute_
;
const
rtc
:
:
Network
*
network_
;
uint16_t
min_port_
;
uint16_t
max_port_
;
std
:
:
string
content_name_
;
int
component_
;
uint32_t
generation_
;
std
:
:
string
ice_username_fragment_
;
std
:
:
string
password_
;
std
:
:
vector
<
Candidate
>
candidates_
;
AddressMap
connections_
;
int
timeout_delay_
;
bool
enable_port_packets_
;
IceRole
ice_role_
;
uint64_t
tiebreaker_
;
bool
shared_socket_
;
std
:
:
string
user_agent_
;
rtc
:
:
ProxyInfo
proxy_
;
int16_t
network_cost_
;
State
state_
=
State
:
:
INIT
;
int64_t
last_time_all_connections_removed_
=
0
;
MdnsNameRegistrationStatus
mdns_name_registration_status_
=
MdnsNameRegistrationStatus
:
:
kNotStarted
;
rtc
:
:
WeakPtrFactory
<
Port
>
weak_factory_
;
webrtc
:
:
AlwaysValidPointer
<
const
webrtc
:
:
FieldTrialsView
webrtc
:
:
FieldTrialBasedConfig
>
field_trials_
;
bool
MaybeObfuscateAddress
(
Candidate
*
c
const
std
:
:
string
&
type
bool
is_final
)
;
friend
class
Connection
;
webrtc
:
:
CallbackList
<
PortInterface
*
>
port_destroyed_callback_list_
;
}
;
}
#
endif
