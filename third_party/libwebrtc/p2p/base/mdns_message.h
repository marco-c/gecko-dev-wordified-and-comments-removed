#
ifndef
P2P_BASE_MDNS_MESSAGE_H_
#
define
P2P_BASE_MDNS_MESSAGE_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
rtc_base
/
byte_buffer
.
h
"
#
include
"
rtc_base
/
ip_address
.
h
"
#
include
"
rtc_base
/
message_buffer_reader
.
h
"
namespace
webrtc
{
enum
class
SectionEntryType
{
kA
kAAAA
kUnsupported
}
;
enum
class
SectionEntryClass
{
kIN
kUnsupported
}
;
class
MdnsHeader
final
{
public
:
bool
Read
(
MessageBufferReader
*
buf
)
;
void
Write
(
rtc
:
:
ByteBufferWriter
*
buf
)
const
;
void
SetQueryOrResponse
(
bool
is_query
)
;
bool
IsQuery
(
)
const
;
void
SetAuthoritative
(
bool
is_authoritative
)
;
bool
IsAuthoritative
(
)
const
;
uint16_t
id
=
0
;
uint16_t
flags
=
0
;
uint16_t
qdcount
=
0
;
uint16_t
ancount
=
0
;
uint16_t
nscount
=
0
;
uint16_t
arcount
=
0
;
}
;
class
MdnsSectionEntry
{
public
:
MdnsSectionEntry
(
)
;
MdnsSectionEntry
(
const
MdnsSectionEntry
&
other
)
;
virtual
~
MdnsSectionEntry
(
)
;
virtual
bool
Read
(
MessageBufferReader
*
buf
)
=
0
;
virtual
bool
Write
(
rtc
:
:
ByteBufferWriter
*
buf
)
const
=
0
;
void
SetName
(
const
std
:
:
string
&
name
)
{
name_
=
name
;
}
std
:
:
string
GetName
(
)
const
{
return
name_
;
}
void
SetType
(
SectionEntryType
type
)
;
SectionEntryType
GetType
(
)
const
;
void
SetClass
(
SectionEntryClass
cls
)
;
SectionEntryClass
GetClass
(
)
const
;
protected
:
std
:
:
string
name_
;
uint16_t
type_
=
0
;
uint16_t
class_
=
0
;
}
;
class
MdnsQuestion
final
:
public
MdnsSectionEntry
{
public
:
MdnsQuestion
(
)
;
MdnsQuestion
(
const
MdnsQuestion
&
other
)
;
~
MdnsQuestion
(
)
override
;
bool
Read
(
MessageBufferReader
*
buf
)
override
;
bool
Write
(
rtc
:
:
ByteBufferWriter
*
buf
)
const
override
;
void
SetUnicastResponse
(
bool
should_unicast
)
;
bool
ShouldUnicastResponse
(
)
const
;
}
;
class
MdnsResourceRecord
final
:
public
MdnsSectionEntry
{
public
:
MdnsResourceRecord
(
)
;
MdnsResourceRecord
(
const
MdnsResourceRecord
&
other
)
;
~
MdnsResourceRecord
(
)
override
;
bool
Read
(
MessageBufferReader
*
buf
)
override
;
bool
Write
(
rtc
:
:
ByteBufferWriter
*
buf
)
const
override
;
void
SetTtlSeconds
(
uint32_t
ttl_seconds
)
{
ttl_seconds_
=
ttl_seconds
;
}
uint32_t
GetTtlSeconds
(
)
const
{
return
ttl_seconds_
;
}
bool
SetIPAddressInRecordData
(
const
rtc
:
:
IPAddress
&
address
)
;
bool
GetIPAddressFromRecordData
(
rtc
:
:
IPAddress
*
address
)
const
;
private
:
bool
ReadARData
(
MessageBufferReader
*
buf
)
;
void
WriteARData
(
rtc
:
:
ByteBufferWriter
*
buf
)
const
;
bool
ReadQuadARData
(
MessageBufferReader
*
buf
)
;
void
WriteQuadARData
(
rtc
:
:
ByteBufferWriter
*
buf
)
const
;
uint32_t
ttl_seconds_
=
0
;
uint16_t
rdlength_
=
0
;
std
:
:
string
rdata_
;
}
;
class
MdnsMessage
final
{
public
:
enum
class
Section
{
kQuestion
kAnswer
kAuthority
kAdditional
}
;
MdnsMessage
(
)
;
~
MdnsMessage
(
)
;
bool
Read
(
MessageBufferReader
*
buf
)
;
bool
Write
(
rtc
:
:
ByteBufferWriter
*
buf
)
const
;
void
SetId
(
uint16_t
id
)
{
header_
.
id
=
id
;
}
uint16_t
GetId
(
)
const
{
return
header_
.
id
;
}
void
SetQueryOrResponse
(
bool
is_query
)
{
header_
.
SetQueryOrResponse
(
is_query
)
;
}
bool
IsQuery
(
)
const
{
return
header_
.
IsQuery
(
)
;
}
void
SetAuthoritative
(
bool
is_authoritative
)
{
header_
.
SetAuthoritative
(
is_authoritative
)
;
}
bool
IsAuthoritative
(
)
const
{
return
header_
.
IsAuthoritative
(
)
;
}
bool
ShouldUnicastResponse
(
)
const
;
void
AddQuestion
(
const
MdnsQuestion
&
question
)
;
void
AddAnswerRecord
(
const
MdnsResourceRecord
&
answer
)
;
const
std
:
:
vector
<
MdnsQuestion
>
&
question_section
(
)
const
{
return
question_section_
;
}
const
std
:
:
vector
<
MdnsResourceRecord
>
&
answer_section
(
)
const
{
return
answer_section_
;
}
const
std
:
:
vector
<
MdnsResourceRecord
>
&
authority_section
(
)
const
{
return
authority_section_
;
}
const
std
:
:
vector
<
MdnsResourceRecord
>
&
additional_section
(
)
const
{
return
additional_section_
;
}
private
:
MdnsHeader
header_
;
std
:
:
vector
<
MdnsQuestion
>
question_section_
;
std
:
:
vector
<
MdnsResourceRecord
>
answer_section_
;
std
:
:
vector
<
MdnsResourceRecord
>
authority_section_
;
std
:
:
vector
<
MdnsResourceRecord
>
additional_section_
;
}
;
}
#
endif
