#
ifndef
P2P_BASE_P2P_CONSTANTS_H_
#
define
P2P_BASE_P2P_CONSTANTS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
extern
const
char
CN_AUDIO
[
]
;
extern
const
char
CN_VIDEO
[
]
;
extern
const
char
CN_DATA
[
]
;
extern
const
char
CN_OTHER
[
]
;
extern
const
char
GROUP_TYPE_BUNDLE
[
]
;
RTC_EXPORT
extern
const
int
ICE_UFRAG_LENGTH
;
RTC_EXPORT
extern
const
int
ICE_PWD_LENGTH
;
extern
const
size_t
ICE_UFRAG_MIN_LENGTH
;
extern
const
size_t
ICE_PWD_MIN_LENGTH
;
extern
const
size_t
ICE_UFRAG_MAX_LENGTH
;
extern
const
size_t
ICE_PWD_MAX_LENGTH
;
RTC_EXPORT
extern
const
int
ICE_CANDIDATE_COMPONENT_RTP
;
RTC_EXPORT
extern
const
int
ICE_CANDIDATE_COMPONENT_RTCP
;
RTC_EXPORT
extern
const
int
ICE_CANDIDATE_COMPONENT_DEFAULT
;
extern
const
char
CONNECTIONROLE_ACTIVE_STR
[
]
;
extern
const
char
CONNECTIONROLE_PASSIVE_STR
[
]
;
extern
const
char
CONNECTIONROLE_ACTPASS_STR
[
]
;
extern
const
char
CONNECTIONROLE_HOLDCONN_STR
[
]
;
extern
const
char
LOCAL_TLD
[
]
;
extern
const
int
RECEIVING_TIMEOUT
;
extern
const
int
MIN_CHECK_RECEIVING_INTERVAL
;
extern
const
int
STRONG_PING_INTERVAL
;
extern
const
int
WEAK_PING_INTERVAL
;
extern
const
int
STRONG_AND_STABLE_WRITABLE_CONNECTION_PING_INTERVAL
;
extern
const
int
WEAK_OR_STABILIZING_WRITABLE_CONNECTION_PING_INTERVAL
;
extern
const
int
BACKUP_CONNECTION_PING_INTERVAL
;
extern
const
int
RECEIVING_SWITCHING_DELAY
;
extern
const
int
REGATHER_ON_FAILED_NETWORKS_INTERVAL
;
extern
const
int
CONNECTION_WRITE_CONNECT_TIMEOUT
;
extern
const
uint32_t
CONNECTION_WRITE_CONNECT_FAILURES
;
extern
const
int
CONNECTION_WRITE_TIMEOUT
;
extern
const
int
STUN_KEEPALIVE_INTERVAL
;
static
const
int
MIN_PINGS_AT_WEAK_PING_INTERVAL
=
3
;
extern
const
int
WEAK_CONNECTION_RECEIVE_TIMEOUT
;
extern
const
int
DEAD_CONNECTION_RECEIVE_TIMEOUT
;
extern
const
int
CONNECTION_RESPONSE_TIMEOUT
;
extern
const
int
MIN_CONNECTION_LIFETIME
;
enum
IcePriorityValue
:
uint8_t
{
ICE_TYPE_PREFERENCE_RELAY_TLS
=
0
ICE_TYPE_PREFERENCE_RELAY_TCP
=
1
ICE_TYPE_PREFERENCE_RELAY_UDP
=
2
ICE_TYPE_PREFERENCE_PRFLX_TCP
=
80
ICE_TYPE_PREFERENCE_HOST_TCP
=
90
ICE_TYPE_PREFERENCE_SRFLX
=
100
ICE_TYPE_PREFERENCE_PRFLX
=
110
ICE_TYPE_PREFERENCE_HOST
=
126
}
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
BACKUP_CONNECTION_PING_INTERVAL
;
using
:
:
webrtc
:
:
CN_AUDIO
;
using
:
:
webrtc
:
:
CN_DATA
;
using
:
:
webrtc
:
:
CN_OTHER
;
using
:
:
webrtc
:
:
CN_VIDEO
;
using
:
:
webrtc
:
:
CONNECTION_RESPONSE_TIMEOUT
;
using
:
:
webrtc
:
:
CONNECTION_WRITE_CONNECT_FAILURES
;
using
:
:
webrtc
:
:
CONNECTION_WRITE_CONNECT_TIMEOUT
;
using
:
:
webrtc
:
:
CONNECTION_WRITE_TIMEOUT
;
using
:
:
webrtc
:
:
CONNECTIONROLE_ACTIVE_STR
;
using
:
:
webrtc
:
:
CONNECTIONROLE_ACTPASS_STR
;
using
:
:
webrtc
:
:
CONNECTIONROLE_HOLDCONN_STR
;
using
:
:
webrtc
:
:
CONNECTIONROLE_PASSIVE_STR
;
using
:
:
webrtc
:
:
DEAD_CONNECTION_RECEIVE_TIMEOUT
;
using
:
:
webrtc
:
:
GROUP_TYPE_BUNDLE
;
using
:
:
webrtc
:
:
ICE_CANDIDATE_COMPONENT_DEFAULT
;
using
:
:
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTCP
;
using
:
:
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
;
using
:
:
webrtc
:
:
ICE_PWD_LENGTH
;
using
:
:
webrtc
:
:
ICE_PWD_MAX_LENGTH
;
using
:
:
webrtc
:
:
ICE_PWD_MIN_LENGTH
;
using
:
:
webrtc
:
:
ICE_TYPE_PREFERENCE_HOST
;
using
:
:
webrtc
:
:
ICE_TYPE_PREFERENCE_HOST_TCP
;
using
:
:
webrtc
:
:
ICE_TYPE_PREFERENCE_PRFLX
;
using
:
:
webrtc
:
:
ICE_TYPE_PREFERENCE_PRFLX_TCP
;
using
:
:
webrtc
:
:
ICE_TYPE_PREFERENCE_RELAY_TCP
;
using
:
:
webrtc
:
:
ICE_TYPE_PREFERENCE_RELAY_TLS
;
using
:
:
webrtc
:
:
ICE_TYPE_PREFERENCE_RELAY_UDP
;
using
:
:
webrtc
:
:
ICE_TYPE_PREFERENCE_SRFLX
;
using
:
:
webrtc
:
:
ICE_UFRAG_LENGTH
;
using
:
:
webrtc
:
:
ICE_UFRAG_MAX_LENGTH
;
using
:
:
webrtc
:
:
ICE_UFRAG_MIN_LENGTH
;
using
:
:
webrtc
:
:
IcePriorityValue
;
using
:
:
webrtc
:
:
LOCAL_TLD
;
using
:
:
webrtc
:
:
MIN_CHECK_RECEIVING_INTERVAL
;
using
:
:
webrtc
:
:
MIN_CONNECTION_LIFETIME
;
using
:
:
webrtc
:
:
MIN_PINGS_AT_WEAK_PING_INTERVAL
;
using
:
:
webrtc
:
:
RECEIVING_SWITCHING_DELAY
;
using
:
:
webrtc
:
:
RECEIVING_TIMEOUT
;
using
:
:
webrtc
:
:
REGATHER_ON_FAILED_NETWORKS_INTERVAL
;
using
:
:
webrtc
:
:
STRONG_AND_STABLE_WRITABLE_CONNECTION_PING_INTERVAL
;
using
:
:
webrtc
:
:
STRONG_PING_INTERVAL
;
using
:
:
webrtc
:
:
STUN_KEEPALIVE_INTERVAL
;
using
:
:
webrtc
:
:
WEAK_CONNECTION_RECEIVE_TIMEOUT
;
using
:
:
webrtc
:
:
WEAK_OR_STABILIZING_WRITABLE_CONNECTION_PING_INTERVAL
;
using
:
:
webrtc
:
:
WEAK_PING_INTERVAL
;
}
#
endif
