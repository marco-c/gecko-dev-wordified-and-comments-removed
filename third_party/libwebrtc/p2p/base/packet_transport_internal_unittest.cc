#
include
"
p2p
/
base
/
packet_transport_internal
.
h
"
#
include
<
optional
>
#
include
"
p2p
/
test
/
fake_packet_transport
.
h
"
#
include
"
rtc_base
/
network
/
ecn_marking
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
{
using
:
:
testing
:
:
MockFunction
;
TEST
(
PacketTransportInternal
NotifyPacketReceivedPassthrougPacketToRegisteredListener
)
{
webrtc
:
:
FakePacketTransport
packet_transport
(
"
test
"
)
;
MockFunction
<
void
(
webrtc
:
:
PacketTransportInternal
*
const
rtc
:
:
ReceivedPacket
&
)
>
receiver
;
packet_transport
.
RegisterReceivedPacketCallback
(
&
receiver
receiver
.
AsStdFunction
(
)
)
;
EXPECT_CALL
(
receiver
Call
)
.
WillOnce
(
[
]
(
webrtc
:
:
PacketTransportInternal
*
const
rtc
:
:
ReceivedPacket
&
packet
)
{
EXPECT_EQ
(
packet
.
decryption_info
(
)
rtc
:
:
ReceivedPacket
:
:
kDtlsDecrypted
)
;
}
)
;
packet_transport
.
NotifyPacketReceived
(
rtc
:
:
ReceivedPacket
(
{
}
webrtc
:
:
SocketAddress
(
)
std
:
:
nullopt
rtc
:
:
EcnMarking
:
:
kNotEct
rtc
:
:
ReceivedPacket
:
:
kDtlsDecrypted
)
)
;
packet_transport
.
DeregisterReceivedPacketCallback
(
&
receiver
)
;
}
TEST
(
PacketTransportInternal
NotifiesOnceOnClose
)
{
webrtc
:
:
FakePacketTransport
packet_transport
(
"
test
"
)
;
int
call_count
=
0
;
packet_transport
.
SetOnCloseCallback
(
[
&
]
(
)
{
+
+
call_count
;
}
)
;
ASSERT_EQ
(
call_count
0
)
;
packet_transport
.
NotifyOnClose
(
)
;
EXPECT_EQ
(
call_count
1
)
;
packet_transport
.
NotifyOnClose
(
)
;
EXPECT_EQ
(
call_count
1
)
;
}
}
