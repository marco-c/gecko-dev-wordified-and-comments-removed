#
ifndef
P2P_BASE_TRANSPORT_DESCRIPTION_FACTORY_H_
#
define
P2P_BASE_TRANSPORT_DESCRIPTION_FACTORY_H_
#
include
<
memory
>
#
include
"
p2p
/
base
/
ice_credentials_iterator
.
h
"
#
include
"
p2p
/
base
/
transport_description
.
h
"
#
include
"
rtc_base
/
rtc_certificate
.
h
"
namespace
rtc
{
class
SSLIdentity
;
}
namespace
cricket
{
struct
TransportOptions
{
bool
ice_restart
=
false
;
bool
prefer_passive_role
=
false
;
bool
enable_ice_renomination
=
false
;
}
;
class
TransportDescriptionFactory
{
public
:
TransportDescriptionFactory
(
)
;
~
TransportDescriptionFactory
(
)
;
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
(
)
const
{
return
certificate_
;
}
void
set_certificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
{
certificate_
=
certificate
;
}
bool
IsEncrypted
(
)
const
{
return
certificate_
!
=
nullptr
;
}
std
:
:
unique_ptr
<
TransportDescription
>
CreateOffer
(
const
TransportOptions
&
options
const
TransportDescription
*
current_description
IceCredentialsIterator
*
ice_credentials
)
const
;
std
:
:
unique_ptr
<
TransportDescription
>
CreateAnswer
(
const
TransportDescription
*
offer
const
TransportOptions
&
options
bool
require_transport_attributes
const
TransportDescription
*
current_description
IceCredentialsIterator
*
ice_credentials
)
const
;
private
:
bool
SetSecurityInfo
(
TransportDescription
*
description
ConnectionRole
role
)
const
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
certificate_
;
}
;
}
#
endif
