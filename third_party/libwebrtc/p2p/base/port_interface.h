#
ifndef
P2P_BASE_PORT_INTERFACE_H_
#
define
P2P_BASE_PORT_INTERFACE_H_
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
packet_socket_factory
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
p2p
/
base
/
transport_description
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
callback_list
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
namespace
rtc
{
class
Network
;
struct
PacketOptions
;
}
namespace
cricket
{
class
Connection
;
class
IceMessage
;
class
StunMessage
;
class
StunStats
;
}
namespace
webrtc
{
enum
ProtocolType
{
PROTO_UDP
PROTO_TCP
PROTO_SSLTCP
PROTO_TLS
PROTO_LAST
=
PROTO_TLS
}
;
class
PortInterface
{
public
:
virtual
~
PortInterface
(
)
;
virtual
IceCandidateType
Type
(
)
const
=
0
;
virtual
const
rtc
:
:
Network
*
Network
(
)
const
=
0
;
virtual
void
SetIceRole
(
cricket
:
:
IceRole
role
)
=
0
;
virtual
cricket
:
:
IceRole
GetIceRole
(
)
const
=
0
;
virtual
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
=
0
;
virtual
uint64_t
IceTiebreaker
(
)
const
=
0
;
virtual
bool
SharedSocket
(
)
const
=
0
;
virtual
bool
SupportsProtocol
(
absl
:
:
string_view
protocol
)
const
=
0
;
virtual
void
PrepareAddress
(
)
=
0
;
virtual
cricket
:
:
Connection
*
GetConnection
(
const
SocketAddress
&
remote_addr
)
=
0
;
enum
CandidateOrigin
{
ORIGIN_THIS_PORT
ORIGIN_OTHER_PORT
ORIGIN_MESSAGE
}
;
virtual
cricket
:
:
Connection
*
CreateConnection
(
const
cricket
:
:
Candidate
&
remote_candidate
CandidateOrigin
origin
)
=
0
;
virtual
int
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
=
0
;
virtual
int
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
=
0
;
virtual
int
GetError
(
)
=
0
;
virtual
ProtocolType
GetProtocol
(
)
const
=
0
;
virtual
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
Candidates
(
)
const
=
0
;
virtual
int
SendTo
(
const
void
*
data
size_t
size
const
SocketAddress
&
addr
const
rtc
:
:
PacketOptions
&
options
bool
payload
)
=
0
;
sigslot
:
:
signal6
<
PortInterface
*
const
SocketAddress
&
ProtocolType
cricket
:
:
IceMessage
*
const
std
:
:
string
&
bool
>
SignalUnknownAddress
;
virtual
void
SendBindingErrorResponse
(
cricket
:
:
StunMessage
*
message
const
SocketAddress
&
addr
int
error_code
absl
:
:
string_view
reason
)
=
0
;
virtual
void
SubscribePortDestroyed
(
std
:
:
function
<
void
(
webrtc
:
:
PortInterface
*
)
>
callback
)
=
0
;
sigslot
:
:
signal1
<
PortInterface
*
>
SignalRoleConflict
;
virtual
void
EnablePortPackets
(
)
=
0
;
sigslot
:
:
signal4
<
PortInterface
*
const
char
*
size_t
const
SocketAddress
&
>
SignalReadPacket
;
sigslot
:
:
signal1
<
const
rtc
:
:
SentPacket
&
>
SignalSentPacket
;
virtual
std
:
:
string
ToString
(
)
const
=
0
;
virtual
void
GetStunStats
(
std
:
:
optional
<
cricket
:
:
StunStats
>
*
stats
)
=
0
;
virtual
void
DestroyConnection
(
cricket
:
:
Connection
*
conn
)
=
0
;
virtual
void
DestroyConnectionAsync
(
cricket
:
:
Connection
*
conn
)
=
0
;
virtual
TaskQueueBase
*
thread
(
)
=
0
;
virtual
rtc
:
:
PacketSocketFactory
*
socket_factory
(
)
const
=
0
;
virtual
uint32_t
generation
(
)
const
=
0
;
virtual
void
set_generation
(
uint32_t
generation
)
=
0
;
virtual
bool
send_retransmit_count_attribute
(
)
const
=
0
;
virtual
const
std
:
:
string
&
content_name
(
)
const
=
0
;
virtual
void
AddPrflxCandidate
(
const
cricket
:
:
Candidate
&
local
)
=
0
;
protected
:
PortInterface
(
)
;
virtual
void
UpdateNetworkCost
(
)
=
0
;
virtual
rtc
:
:
DiffServCodePoint
StunDscpValue
(
)
const
=
0
;
virtual
bool
GetStunMessage
(
const
char
*
data
size_t
size
const
SocketAddress
&
addr
std
:
:
unique_ptr
<
cricket
:
:
IceMessage
>
*
out_msg
std
:
:
string
*
out_username
)
=
0
;
virtual
bool
ParseStunUsername
(
const
cricket
:
:
StunMessage
*
stun_msg
std
:
:
string
*
local_username
std
:
:
string
*
remote_username
)
const
=
0
;
virtual
std
:
:
string
CreateStunUsername
(
absl
:
:
string_view
remote_username
)
const
=
0
;
virtual
bool
MaybeIceRoleConflict
(
const
SocketAddress
&
addr
cricket
:
:
IceMessage
*
stun_msg
absl
:
:
string_view
remote_ufrag
)
=
0
;
virtual
int16_t
network_cost
(
)
const
=
0
;
friend
class
cricket
:
:
Connection
;
}
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
PortInterface
;
using
:
:
webrtc
:
:
PROTO_LAST
;
using
:
:
webrtc
:
:
PROTO_SSLTCP
;
using
:
:
webrtc
:
:
PROTO_TCP
;
using
:
:
webrtc
:
:
PROTO_TLS
;
using
:
:
webrtc
:
:
PROTO_UDP
;
using
:
:
webrtc
:
:
ProtocolType
;
}
#
endif
