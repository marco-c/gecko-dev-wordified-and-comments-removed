#
include
"
p2p
/
base
/
basic_async_resolver_factory
.
h
"
#
include
"
api
/
test
/
mock_async_dns_resolver
.
h
"
#
include
"
p2p
/
base
/
mock_async_resolver
.
h
"
#
include
"
rtc_base
/
async_resolver
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
testsupport
/
rtc_expect_death
.
h
"
namespace
webrtc
{
#
pragma
clang
diagnostic
push
#
pragma
clang
diagnostic
ignored
"
-
Wdeprecated
-
declarations
"
class
BasicAsyncResolverFactoryTest
:
public
:
:
testing
:
:
Test
public
sigslot
:
:
has_slots
<
>
{
public
:
void
TestCreate
(
)
{
BasicAsyncResolverFactory
factory
;
rtc
:
:
AsyncResolverInterface
*
resolver
=
factory
.
Create
(
)
;
ASSERT_TRUE
(
resolver
)
;
resolver
-
>
SignalDone
.
connect
(
this
&
BasicAsyncResolverFactoryTest
:
:
SetAddressResolved
)
;
rtc
:
:
SocketAddress
address
(
"
"
0
)
;
resolver
-
>
Start
(
address
)
;
ASSERT_TRUE_WAIT
(
address_resolved_
10000
)
;
resolver
-
>
Destroy
(
false
)
;
}
void
SetAddressResolved
(
rtc
:
:
AsyncResolverInterface
*
resolver
)
{
address_resolved_
=
true
;
}
private
:
bool
address_resolved_
=
false
;
}
;
TEST_F
(
BasicAsyncResolverFactoryTest
TestCreate
)
{
rtc
:
:
AutoThread
main_thread
;
TestCreate
(
)
;
}
TEST
(
WrappingAsyncDnsResolverFactoryTest
TestCreateAndResolve
)
{
rtc
:
:
AutoThread
main_thread
;
WrappingAsyncDnsResolverFactory
factory
(
std
:
:
make_unique
<
BasicAsyncResolverFactory
>
(
)
)
;
std
:
:
unique_ptr
<
AsyncDnsResolverInterface
>
resolver
(
factory
.
Create
(
)
)
;
ASSERT_TRUE
(
resolver
)
;
bool
address_resolved
=
false
;
rtc
:
:
SocketAddress
address
(
"
"
0
)
;
resolver
-
>
Start
(
address
[
&
address_resolved
]
(
)
{
address_resolved
=
true
;
}
)
;
ASSERT_TRUE_WAIT
(
address_resolved
10000
)
;
resolver
.
reset
(
)
;
}
TEST
(
WrappingAsyncDnsResolverFactoryTest
WrapOtherResolver
)
{
rtc
:
:
AutoThread
main_thread
;
BasicAsyncResolverFactory
non_owned_factory
;
WrappingAsyncDnsResolverFactory
factory
(
&
non_owned_factory
)
;
std
:
:
unique_ptr
<
AsyncDnsResolverInterface
>
resolver
(
factory
.
Create
(
)
)
;
ASSERT_TRUE
(
resolver
)
;
bool
address_resolved
=
false
;
rtc
:
:
SocketAddress
address
(
"
"
0
)
;
resolver
-
>
Start
(
address
[
&
address_resolved
]
(
)
{
address_resolved
=
true
;
}
)
;
ASSERT_TRUE_WAIT
(
address_resolved
10000
)
;
resolver
.
reset
(
)
;
}
#
if
GTEST_HAS_DEATH_TEST
&
&
defined
(
WEBRTC_LINUX
)
void
CallResolver
(
WrappingAsyncDnsResolverFactory
&
factory
)
{
rtc
:
:
SocketAddress
address
(
"
"
0
)
;
std
:
:
unique_ptr
<
AsyncDnsResolverInterface
>
resolver
(
factory
.
Create
(
)
)
;
resolver
-
>
Start
(
address
[
&
resolver
]
(
)
{
resolver
.
reset
(
)
;
}
)
;
WAIT
(
!
resolver
.
get
(
)
10000
)
;
}
TEST
(
WrappingAsyncDnsResolverFactoryDeathTest
DestroyResolverInCallback
)
{
rtc
:
:
AutoThread
main_thread
;
WrappingAsyncDnsResolverFactory
factory
(
std
:
:
make_unique
<
BasicAsyncResolverFactory
>
(
)
)
;
RTC_EXPECT_DEATH
(
CallResolver
(
factory
)
"
Check
failed
:
!
within_resolve_result_
"
)
;
}
#
endif
#
pragma
clang
diagnostic
pop
}
