#
include
"
p2p
/
base
/
ice_credentials_iterator
.
h
"
#
include
<
vector
>
#
include
"
p2p
/
base
/
transport_description
.
h
"
#
include
"
test
/
gtest
.
h
"
using
:
:
webrtc
:
:
IceCredentialsIterator
;
using
:
:
webrtc
:
:
IceParameters
;
TEST
(
IceCredentialsIteratorTest
GetEmpty
)
{
std
:
:
vector
<
IceParameters
>
empty
;
IceCredentialsIterator
iterator
(
empty
)
;
IceParameters
credentials1
=
iterator
.
GetIceCredentials
(
)
;
}
TEST
(
IceCredentialsIteratorTest
GetOne
)
{
std
:
:
vector
<
IceParameters
>
one
=
{
IceCredentialsIterator
:
:
CreateRandomIceCredentials
(
)
}
;
IceCredentialsIterator
iterator
(
one
)
;
EXPECT_EQ
(
iterator
.
GetIceCredentials
(
)
one
[
0
]
)
;
auto
random
=
iterator
.
GetIceCredentials
(
)
;
EXPECT_NE
(
random
one
[
0
]
)
;
EXPECT_NE
(
random
iterator
.
GetIceCredentials
(
)
)
;
}
TEST
(
IceCredentialsIteratorTest
GetTwo
)
{
std
:
:
vector
<
IceParameters
>
two
=
{
IceCredentialsIterator
:
:
CreateRandomIceCredentials
(
)
IceCredentialsIterator
:
:
CreateRandomIceCredentials
(
)
}
;
IceCredentialsIterator
iterator
(
two
)
;
EXPECT_EQ
(
iterator
.
GetIceCredentials
(
)
two
[
1
]
)
;
EXPECT_EQ
(
iterator
.
GetIceCredentials
(
)
two
[
0
]
)
;
auto
random
=
iterator
.
GetIceCredentials
(
)
;
EXPECT_NE
(
random
two
[
0
]
)
;
EXPECT_NE
(
random
two
[
1
]
)
;
EXPECT_NE
(
random
iterator
.
GetIceCredentials
(
)
)
;
}
