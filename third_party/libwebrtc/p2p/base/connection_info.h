#
ifndef
P2P_BASE_CONNECTION_INFO_H_
#
define
P2P_BASE_CONNECTION_INFO_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
namespace
webrtc
{
enum
class
IceCandidatePairState
{
WAITING
=
0
IN_PROGRESS
SUCCEEDED
FAILED
}
;
struct
ConnectionInfo
{
ConnectionInfo
(
)
;
ConnectionInfo
(
const
ConnectionInfo
&
)
;
~
ConnectionInfo
(
)
;
bool
best_connection
;
bool
writable
;
bool
receiving
;
bool
timeout
;
size_t
rtt
;
size_t
sent_discarded_bytes
;
size_t
sent_total_bytes
;
size_t
sent_bytes_second
;
size_t
sent_discarded_packets
;
size_t
sent_total_packets
;
size_t
sent_ping_requests_total
;
size_t
sent_ping_requests_before_first_response
;
size_t
sent_ping_responses
;
size_t
recv_total_bytes
;
size_t
recv_bytes_second
;
size_t
packets_received
;
size_t
recv_ping_requests
;
size_t
recv_ping_responses
;
Candidate
local_candidate
;
Candidate
remote_candidate
;
void
*
key
;
IceCandidatePairState
state
;
uint64_t
priority
;
bool
nominated
;
uint64_t
total_round_trip_time_ms
;
std
:
:
optional
<
uint32_t
>
current_round_trip_time_ms
;
std
:
:
optional
<
Timestamp
>
last_data_received
;
std
:
:
optional
<
Timestamp
>
last_data_sent
;
}
;
typedef
std
:
:
vector
<
ConnectionInfo
>
ConnectionInfos
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
ConnectionInfo
;
using
:
:
webrtc
:
:
ConnectionInfos
;
using
:
:
webrtc
:
:
IceCandidatePairState
;
}
#
endif
