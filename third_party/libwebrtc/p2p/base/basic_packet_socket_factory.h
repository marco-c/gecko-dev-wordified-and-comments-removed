#
ifndef
P2P_BASE_BASIC_PACKET_SOCKET_FACTORY_H_
#
define
P2P_BASE_BASIC_PACKET_SOCKET_FACTORY_H_
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
"
api
/
async_dns_resolver
.
h
"
#
include
"
api
/
packet_socket_factory
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
socket_factory
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
BasicPacketSocketFactory
:
public
PacketSocketFactory
{
public
:
explicit
BasicPacketSocketFactory
(
SocketFactory
*
socket_factory
)
;
~
BasicPacketSocketFactory
(
)
override
;
AsyncPacketSocket
*
CreateUdpSocket
(
const
SocketAddress
&
local_address
uint16_t
min_port
uint16_t
max_port
)
override
;
AsyncListenSocket
*
CreateServerTcpSocket
(
const
SocketAddress
&
local_address
uint16_t
min_port
uint16_t
max_port
int
opts
)
override
;
AsyncPacketSocket
*
CreateClientTcpSocket
(
const
SocketAddress
&
local_address
const
SocketAddress
&
remote_address
const
PacketSocketTcpOptions
&
tcp_options
)
override
;
std
:
:
unique_ptr
<
AsyncDnsResolverInterface
>
CreateAsyncDnsResolver
(
)
override
;
private
:
int
BindSocket
(
Socket
*
socket
const
SocketAddress
&
local_address
uint16_t
min_port
uint16_t
max_port
)
;
SocketFactory
*
socket_factory_
;
}
;
}
#
ifdef
WEBRTC_ALLOW_DEPRECATED_NAMESPACES
namespace
rtc
{
using
:
:
webrtc
:
:
BasicPacketSocketFactory
;
}
#
endif
#
endif
