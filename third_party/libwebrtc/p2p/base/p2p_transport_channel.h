#
ifndef
P2P_BASE_P2P_TRANSPORT_CHANNEL_H_
#
define
P2P_BASE_P2P_TRANSPORT_CHANNEL_H_
#
include
<
algorithm
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
async_resolver_factory
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
logging
/
rtc_event_log
/
events
/
rtc_event_ice_candidate_pair_config
.
h
"
#
include
"
logging
/
rtc_event_log
/
ice_logger
.
h
"
#
include
"
p2p
/
base
/
candidate_pair_interface
.
h
"
#
include
"
p2p
/
base
/
ice_controller_factory_interface
.
h
"
#
include
"
p2p
/
base
/
ice_controller_interface
.
h
"
#
include
"
p2p
/
base
/
ice_transport_internal
.
h
"
#
include
"
p2p
/
base
/
p2p_constants
.
h
"
#
include
"
p2p
/
base
/
p2p_transport_channel_ice_field_trials
.
h
"
#
include
"
p2p
/
base
/
port_allocator
.
h
"
#
include
"
p2p
/
base
/
port_interface
.
h
"
#
include
"
p2p
/
base
/
regathering_controller
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
task_utils
/
pending_task_safety_flag
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
RtcEventLog
;
}
namespace
cricket
{
enum
class
IceRestartState
{
CONNECTING
CONNECTED
DISCONNECTED
MAX_VALUE
}
;
static
const
int
MIN_PINGS_AT_WEAK_PING_INTERVAL
=
3
;
bool
IceCredentialsChanged
(
const
std
:
:
string
&
old_ufrag
const
std
:
:
string
&
old_pwd
const
std
:
:
string
&
new_ufrag
const
std
:
:
string
&
new_pwd
)
;
class
RemoteCandidate
:
public
Candidate
{
public
:
RemoteCandidate
(
const
Candidate
&
c
PortInterface
*
origin_port
)
:
Candidate
(
c
)
origin_port_
(
origin_port
)
{
}
PortInterface
*
origin_port
(
)
{
return
origin_port_
;
}
private
:
PortInterface
*
origin_port_
;
}
;
class
RTC_EXPORT
P2PTransportChannel
:
public
IceTransportInternal
{
public
:
P2PTransportChannel
(
const
std
:
:
string
&
transport_name
int
component
PortAllocator
*
allocator
)
;
P2PTransportChannel
(
const
std
:
:
string
&
transport_name
int
component
PortAllocator
*
allocator
webrtc
:
:
AsyncResolverFactory
*
async_resolver_factory
webrtc
:
:
RtcEventLog
*
event_log
=
nullptr
IceControllerFactoryInterface
*
ice_controller_factory
=
nullptr
)
;
~
P2PTransportChannel
(
)
override
;
IceTransportState
GetState
(
)
const
override
;
webrtc
:
:
IceTransportState
GetIceTransportState
(
)
const
override
;
const
std
:
:
string
&
transport_name
(
)
const
override
;
int
component
(
)
const
override
;
bool
writable
(
)
const
override
;
bool
receiving
(
)
const
override
;
void
SetIceRole
(
IceRole
role
)
override
;
IceRole
GetIceRole
(
)
const
override
;
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
override
;
void
SetIceParameters
(
const
IceParameters
&
ice_params
)
override
;
void
SetRemoteIceParameters
(
const
IceParameters
&
ice_params
)
override
;
void
SetRemoteIceMode
(
IceMode
mode
)
override
;
void
Connect
(
)
{
}
void
MaybeStartGathering
(
)
override
;
IceGatheringState
gathering_state
(
)
const
override
;
void
ResolveHostnameCandidate
(
const
Candidate
&
candidate
)
;
void
AddRemoteCandidate
(
const
Candidate
&
candidate
)
override
;
void
RemoveRemoteCandidate
(
const
Candidate
&
candidate
)
override
;
void
RemoveAllRemoteCandidates
(
)
override
;
void
SetIceConfig
(
const
IceConfig
&
config
)
override
;
const
IceConfig
&
config
(
)
const
;
static
webrtc
:
:
RTCError
ValidateIceConfig
(
const
IceConfig
&
config
)
;
int
SendPacket
(
const
char
*
data
size_t
len
const
rtc
:
:
PacketOptions
&
options
int
flags
)
override
;
int
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
override
;
bool
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
override
;
int
GetError
(
)
override
;
bool
GetStats
(
IceTransportStats
*
ice_transport_stats
)
override
;
absl
:
:
optional
<
int
>
GetRttEstimate
(
)
override
;
const
Connection
*
selected_connection
(
)
const
override
;
absl
:
:
optional
<
const
CandidatePair
>
GetSelectedCandidatePair
(
)
const
override
;
const
Connection
*
best_connection
(
)
const
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
return
selected_connection_
;
}
void
set_incoming_only
(
bool
value
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
incoming_only_
=
value
;
}
const
std
:
:
vector
<
PortInterface
*
>
&
ports
(
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
return
ports_
;
}
const
std
:
:
vector
<
PortInterface
*
>
&
pruned_ports
(
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
return
pruned_ports_
;
}
IceMode
remote_ice_mode
(
)
const
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
return
remote_ice_mode_
;
}
void
PruneAllPorts
(
)
;
int
check_receiving_interval
(
)
const
;
absl
:
:
optional
<
rtc
:
:
NetworkRoute
>
network_route
(
)
const
override
;
rtc
:
:
DiffServCodePoint
DefaultDscpValue
(
)
const
;
Connection
*
FindNextPingableConnection
(
)
;
void
MarkConnectionPinged
(
Connection
*
conn
)
;
rtc
:
:
ArrayView
<
Connection
*
>
connections
(
)
const
;
PortAllocatorSession
*
allocator_session
(
)
const
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
if
(
allocator_sessions_
.
empty
(
)
)
{
return
nullptr
;
}
return
allocator_sessions_
.
back
(
)
.
get
(
)
;
}
const
std
:
:
vector
<
RemoteCandidate
>
&
remote_candidates
(
)
const
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
return
remote_candidates_
;
}
std
:
:
string
ToString
(
)
const
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
const
std
:
:
string
RECEIVING_ABBREV
[
2
]
=
{
"
_
"
"
R
"
}
;
const
std
:
:
string
WRITABLE_ABBREV
[
2
]
=
{
"
_
"
"
W
"
}
;
rtc
:
:
StringBuilder
ss
;
ss
<
<
"
Channel
[
"
<
<
transport_name_
<
<
"
|
"
<
<
component_
<
<
"
|
"
<
<
RECEIVING_ABBREV
[
receiving_
]
<
<
WRITABLE_ABBREV
[
writable_
]
<
<
"
]
"
;
return
ss
.
Release
(
)
;
}
private
:
bool
IsGettingPorts
(
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
return
allocator_session
(
)
-
>
IsGettingPorts
(
)
;
}
bool
ReadyToSend
(
Connection
*
connection
)
const
;
bool
PresumedWritable
(
const
Connection
*
conn
)
const
;
void
UpdateConnectionStates
(
)
;
void
RequestSortAndStateUpdate
(
IceControllerEvent
reason_to_sort
)
;
void
MaybeStartPinging
(
)
;
void
SortConnectionsAndUpdateState
(
IceControllerEvent
reason_to_sort
)
;
void
SortConnections
(
)
;
void
SortConnectionsIfNeeded
(
)
;
void
SwitchSelectedConnection
(
Connection
*
conn
IceControllerEvent
reason
)
;
void
UpdateState
(
)
;
void
HandleAllTimedOut
(
)
;
void
MaybeStopPortAllocatorSessions
(
)
;
IceTransportState
ComputeState
(
)
const
;
webrtc
:
:
IceTransportState
ComputeIceTransportState
(
)
const
;
bool
CreateConnections
(
const
Candidate
&
remote_candidate
PortInterface
*
origin_port
)
;
bool
CreateConnection
(
PortInterface
*
port
const
Candidate
&
remote_candidate
PortInterface
*
origin_port
)
;
bool
FindConnection
(
const
Connection
*
connection
)
const
;
uint32_t
GetRemoteCandidateGeneration
(
const
Candidate
&
candidate
)
;
bool
IsDuplicateRemoteCandidate
(
const
Candidate
&
candidate
)
;
void
RememberRemoteCandidate
(
const
Candidate
&
remote_candidate
PortInterface
*
origin_port
)
;
void
PingConnection
(
Connection
*
conn
)
;
void
AddAllocatorSession
(
std
:
:
unique_ptr
<
PortAllocatorSession
>
session
)
;
void
AddConnection
(
Connection
*
connection
)
;
void
OnPortReady
(
PortAllocatorSession
*
session
PortInterface
*
port
)
;
void
OnPortsPruned
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
PortInterface
*
>
&
ports
)
;
void
OnCandidatesReady
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
Candidate
>
&
candidates
)
;
void
OnCandidateError
(
PortAllocatorSession
*
session
const
IceCandidateErrorEvent
&
event
)
;
void
OnCandidatesRemoved
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
Candidate
>
&
candidates
)
;
void
OnCandidatesAllocationDone
(
PortAllocatorSession
*
session
)
;
void
OnUnknownAddress
(
PortInterface
*
port
const
rtc
:
:
SocketAddress
&
addr
ProtocolType
proto
IceMessage
*
stun_msg
const
std
:
:
string
&
remote_username
bool
port_muxed
)
;
void
OnCandidateFilterChanged
(
uint32_t
prev_filter
uint32_t
cur_filter
)
;
void
OnPortDestroyed
(
PortInterface
*
port
)
;
bool
PrunePort
(
PortInterface
*
port
)
;
void
OnRoleConflict
(
PortInterface
*
port
)
;
void
OnConnectionStateChange
(
Connection
*
connection
)
;
void
OnReadPacket
(
Connection
*
connection
const
char
*
data
size_t
len
int64_t
packet_time_us
)
;
void
OnSentPacket
(
const
rtc
:
:
SentPacket
&
sent_packet
)
;
void
OnReadyToSend
(
Connection
*
connection
)
;
void
OnConnectionDestroyed
(
Connection
*
connection
)
;
void
OnNominated
(
Connection
*
conn
)
;
void
CheckAndPing
(
)
;
void
LogCandidatePairConfig
(
Connection
*
conn
webrtc
:
:
IceCandidatePairConfigType
type
)
;
uint32_t
GetNominationAttr
(
Connection
*
conn
)
const
;
bool
GetUseCandidateAttr
(
Connection
*
conn
)
const
;
bool
MaybeSwitchSelectedConnection
(
Connection
*
new_connection
IceControllerEvent
reason
)
;
bool
MaybeSwitchSelectedConnection
(
IceControllerEvent
reason
IceControllerInterface
:
:
SwitchResult
result
)
;
void
PruneConnections
(
)
;
IceParameters
*
remote_ice
(
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
return
remote_ice_parameters_
.
empty
(
)
?
nullptr
:
&
remote_ice_parameters_
.
back
(
)
;
}
const
IceParameters
*
FindRemoteIceFromUfrag
(
const
std
:
:
string
&
ufrag
uint32_t
*
generation
)
;
uint32_t
remote_ice_generation
(
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
return
remote_ice_parameters_
.
empty
(
)
?
0
:
static_cast
<
uint32_t
>
(
remote_ice_parameters_
.
size
(
)
-
1
)
;
}
bool
IsPortPruned
(
const
Port
*
port
)
const
;
bool
IsRemoteCandidatePruned
(
const
Candidate
&
cand
)
const
;
void
SetWritable
(
bool
writable
)
;
void
SetReceiving
(
bool
receiving
)
;
Candidate
SanitizeLocalCandidate
(
const
Candidate
&
c
)
const
;
Candidate
SanitizeRemoteCandidate
(
const
Candidate
&
c
)
const
;
Connection
*
FromIceController
(
const
Connection
*
conn
)
{
RTC_DCHECK
(
FindConnection
(
conn
)
)
;
return
const_cast
<
Connection
*
>
(
conn
)
;
}
int64_t
ComputeEstimatedDisconnectedTimeMs
(
int64_t
now
Connection
*
old_connection
)
;
webrtc
:
:
ScopedTaskSafety
task_safety_
;
std
:
:
string
transport_name_
RTC_GUARDED_BY
(
network_thread_
)
;
int
component_
RTC_GUARDED_BY
(
network_thread_
)
;
PortAllocator
*
allocator_
RTC_GUARDED_BY
(
network_thread_
)
;
webrtc
:
:
AsyncResolverFactory
*
async_resolver_factory_
RTC_GUARDED_BY
(
network_thread_
)
;
rtc
:
:
Thread
*
const
network_thread_
;
bool
incoming_only_
RTC_GUARDED_BY
(
network_thread_
)
;
int
error_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
vector
<
std
:
:
unique_ptr
<
PortAllocatorSession
>
>
allocator_sessions_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
vector
<
PortInterface
*
>
ports_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
vector
<
PortInterface
*
>
pruned_ports_
RTC_GUARDED_BY
(
network_thread_
)
;
Connection
*
selected_connection_
RTC_GUARDED_BY
(
network_thread_
)
=
nullptr
;
std
:
:
vector
<
RemoteCandidate
>
remote_candidates_
RTC_GUARDED_BY
(
network_thread_
)
;
bool
sort_dirty_
RTC_GUARDED_BY
(
network_thread_
)
;
bool
had_connection_
RTC_GUARDED_BY
(
network_thread_
)
=
false
;
typedef
std
:
:
map
<
rtc
:
:
Socket
:
:
Option
int
>
OptionMap
;
OptionMap
options_
RTC_GUARDED_BY
(
network_thread_
)
;
IceParameters
ice_parameters_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
vector
<
IceParameters
>
remote_ice_parameters_
RTC_GUARDED_BY
(
network_thread_
)
;
IceMode
remote_ice_mode_
RTC_GUARDED_BY
(
network_thread_
)
;
IceRole
ice_role_
RTC_GUARDED_BY
(
network_thread_
)
;
uint64_t
tiebreaker_
RTC_GUARDED_BY
(
network_thread_
)
;
IceGatheringState
gathering_state_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
unique_ptr
<
webrtc
:
:
BasicRegatheringController
>
regathering_controller_
RTC_GUARDED_BY
(
network_thread_
)
;
int64_t
last_ping_sent_ms_
RTC_GUARDED_BY
(
network_thread_
)
=
0
;
int
weak_ping_interval_
RTC_GUARDED_BY
(
network_thread_
)
=
WEAK_PING_INTERVAL
;
IceTransportState
state_
RTC_GUARDED_BY
(
network_thread_
)
=
IceTransportState
:
:
STATE_INIT
;
webrtc
:
:
IceTransportState
standardized_state_
RTC_GUARDED_BY
(
network_thread_
)
=
webrtc
:
:
IceTransportState
:
:
kNew
;
IceConfig
config_
RTC_GUARDED_BY
(
network_thread_
)
;
int
last_sent_packet_id_
RTC_GUARDED_BY
(
network_thread_
)
=
-
1
;
bool
started_pinging_
RTC_GUARDED_BY
(
network_thread_
)
=
false
;
uint32_t
nomination_
RTC_GUARDED_BY
(
network_thread_
)
=
0
;
bool
receiving_
RTC_GUARDED_BY
(
network_thread_
)
=
false
;
bool
writable_
RTC_GUARDED_BY
(
network_thread_
)
=
false
;
bool
has_been_writable_
RTC_GUARDED_BY
(
network_thread_
)
=
false
;
absl
:
:
optional
<
rtc
:
:
NetworkRoute
>
network_route_
RTC_GUARDED_BY
(
network_thread_
)
;
webrtc
:
:
IceEventLog
ice_event_log_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
unique_ptr
<
IceControllerInterface
>
ice_controller_
RTC_GUARDED_BY
(
network_thread_
)
;
struct
CandidateAndResolver
final
{
CandidateAndResolver
(
const
Candidate
&
candidate
rtc
:
:
AsyncResolverInterface
*
resolver
)
;
~
CandidateAndResolver
(
)
;
Candidate
candidate_
;
rtc
:
:
AsyncResolverInterface
*
resolver_
;
}
;
std
:
:
vector
<
CandidateAndResolver
>
resolvers_
RTC_GUARDED_BY
(
network_thread_
)
;
void
FinishAddingRemoteCandidate
(
const
Candidate
&
new_remote_candidate
)
;
void
OnCandidateResolved
(
rtc
:
:
AsyncResolverInterface
*
resolver
)
;
void
AddRemoteCandidateWithResolver
(
Candidate
candidate
rtc
:
:
AsyncResolverInterface
*
resolver
)
;
uint32_t
selected_candidate_pair_changes_
=
0
;
int64_t
last_data_received_ms_
=
0
;
IceFieldTrials
field_trials_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
P2PTransportChannel
)
;
}
;
}
#
endif
