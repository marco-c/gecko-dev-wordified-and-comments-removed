#
ifndef
P2P_BASE_PACKET_TRANSPORT_INTERNAL_H_
#
define
P2P_BASE_PACKET_TRANSPORT_INTERNAL_H_
#
include
<
cstddef
>
#
include
<
optional
>
#
include
<
string
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
callback_list
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
#
include
"
rtc_base
/
network_route
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
rtc
{
struct
PacketOptions
;
struct
SentPacket
;
class
RTC_EXPORT
PacketTransportInternal
:
public
sigslot
:
:
has_slots
<
>
{
public
:
virtual
const
std
:
:
string
&
transport_name
(
)
const
=
0
;
virtual
bool
writable
(
)
const
=
0
;
virtual
bool
receiving
(
)
const
=
0
;
virtual
int
SendPacket
(
const
char
*
data
size_t
len
const
rtc
:
:
PacketOptions
&
options
int
flags
=
0
)
=
0
;
virtual
int
SetOption
(
webrtc
:
:
Socket
:
:
Option
opt
int
value
)
=
0
;
virtual
bool
GetOption
(
webrtc
:
:
Socket
:
:
Option
opt
int
*
value
)
;
virtual
int
GetError
(
)
=
0
;
virtual
std
:
:
optional
<
webrtc
:
:
NetworkRoute
>
network_route
(
)
const
;
sigslot
:
:
signal1
<
PacketTransportInternal
*
>
SignalWritableState
;
sigslot
:
:
signal1
<
PacketTransportInternal
*
>
SignalReadyToSend
;
sigslot
:
:
signal1
<
PacketTransportInternal
*
>
SignalReceivingState
;
void
RegisterReceivedPacketCallback
(
void
*
id
absl
:
:
AnyInvocable
<
void
(
PacketTransportInternal
*
const
rtc
:
:
ReceivedPacket
&
)
>
callback
)
;
void
DeregisterReceivedPacketCallback
(
void
*
id
)
;
sigslot
:
:
signal2
<
PacketTransportInternal
*
const
rtc
:
:
SentPacket
&
>
SignalSentPacket
;
sigslot
:
:
signal1
<
std
:
:
optional
<
webrtc
:
:
NetworkRoute
>
>
SignalNetworkRouteChanged
;
void
SetOnCloseCallback
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
callback
)
;
protected
:
PacketTransportInternal
(
)
;
~
PacketTransportInternal
(
)
override
;
void
NotifyPacketReceived
(
const
rtc
:
:
ReceivedPacket
&
packet
)
;
void
NotifyOnClose
(
)
;
webrtc
:
:
SequenceChecker
network_checker_
{
webrtc
:
:
SequenceChecker
:
:
kDetached
}
;
private
:
webrtc
:
:
CallbackList
<
PacketTransportInternal
*
const
rtc
:
:
ReceivedPacket
&
>
received_packet_callback_list_
RTC_GUARDED_BY
(
&
network_checker_
)
;
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
on_close_
;
}
;
}
#
endif
