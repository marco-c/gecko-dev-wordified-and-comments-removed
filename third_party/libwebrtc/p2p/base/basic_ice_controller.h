#
ifndef
P2P_BASE_BASIC_ICE_CONTROLLER_H_
#
define
P2P_BASE_BASIC_ICE_CONTROLLER_H_
#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
<
functional
>
#
include
<
map
>
#
include
<
optional
>
#
include
<
set
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
p2p
/
base
/
connection
.
h
"
#
include
"
p2p
/
base
/
ice_controller_factory_interface
.
h
"
#
include
"
p2p
/
base
/
ice_controller_interface
.
h
"
#
include
"
p2p
/
base
/
ice_switch_reason
.
h
"
#
include
"
p2p
/
base
/
ice_transport_internal
.
h
"
#
include
"
p2p
/
base
/
p2p_constants
.
h
"
#
include
"
p2p
/
base
/
transport_description
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
network_constants
.
h
"
namespace
cricket
{
class
BasicIceController
:
public
IceControllerInterface
{
public
:
explicit
BasicIceController
(
const
webrtc
:
:
IceControllerFactoryArgs
&
args
)
;
virtual
~
BasicIceController
(
)
;
void
SetIceConfig
(
const
webrtc
:
:
IceConfig
&
config
)
override
;
void
SetSelectedConnection
(
const
Connection
*
selected_connection
)
override
;
void
AddConnection
(
const
Connection
*
connection
)
override
;
void
OnConnectionDestroyed
(
const
Connection
*
connection
)
override
;
rtc
:
:
ArrayView
<
const
Connection
*
const
>
GetConnections
(
)
const
override
{
return
connections_
;
}
rtc
:
:
ArrayView
<
const
Connection
*
>
connections
(
)
const
override
{
return
rtc
:
:
ArrayView
<
const
Connection
*
>
(
const_cast
<
const
Connection
*
*
>
(
connections_
.
data
(
)
)
connections_
.
size
(
)
)
;
}
bool
HasPingableConnection
(
)
const
override
;
PingResult
SelectConnectionToPing
(
int64_t
last_ping_sent_ms
)
override
;
bool
GetUseCandidateAttr
(
const
Connection
*
conn
webrtc
:
:
NominationMode
mode
IceMode
remote_ice_mode
)
const
override
;
SwitchResult
ShouldSwitchConnection
(
IceSwitchReason
reason
const
Connection
*
connection
)
override
;
SwitchResult
SortAndSwitchConnection
(
IceSwitchReason
reason
)
override
;
std
:
:
vector
<
const
Connection
*
>
PruneConnections
(
)
override
;
const
Connection
*
FindNextPingableConnection
(
)
override
;
void
MarkConnectionPinged
(
const
Connection
*
conn
)
override
;
private
:
bool
weak
(
)
const
{
return
!
selected_connection_
|
|
selected_connection_
-
>
weak
(
)
;
}
int
weak_ping_interval
(
)
const
{
return
std
:
:
max
(
config_
.
ice_check_interval_weak_connectivity_or_default
(
)
config_
.
ice_check_min_interval_or_default
(
)
)
;
}
int
strong_ping_interval
(
)
const
{
return
std
:
:
max
(
config_
.
ice_check_interval_strong_connectivity_or_default
(
)
config_
.
ice_check_min_interval_or_default
(
)
)
;
}
int
check_receiving_interval
(
)
const
{
return
std
:
:
max
(
MIN_CHECK_RECEIVING_INTERVAL
config_
.
receiving_timeout_or_default
(
)
/
10
)
;
}
const
Connection
*
FindOldestConnectionNeedingTriggeredCheck
(
int64_t
now
)
;
const
Connection
*
MorePingable
(
const
Connection
*
conn1
const
Connection
*
conn2
)
;
const
Connection
*
MostLikelyToWork
(
const
Connection
*
conn1
const
Connection
*
conn2
)
;
const
Connection
*
LeastRecentlyPinged
(
const
Connection
*
conn1
const
Connection
*
conn2
)
;
bool
IsPingable
(
const
Connection
*
conn
int64_t
now
)
const
;
bool
IsBackupConnection
(
const
Connection
*
conn
)
const
;
bool
WritableConnectionPastPingInterval
(
const
Connection
*
conn
int64_t
now
)
const
;
int
CalculateActiveWritablePingInterval
(
const
Connection
*
conn
int64_t
now
)
const
;
std
:
:
map
<
const
webrtc
:
:
Network
*
const
Connection
*
>
GetBestConnectionByNetwork
(
)
const
;
std
:
:
vector
<
const
Connection
*
>
GetBestWritableConnectionPerNetwork
(
)
const
;
bool
ReadyToSend
(
const
Connection
*
connection
)
const
;
bool
PresumedWritable
(
const
Connection
*
conn
)
const
;
int
CompareCandidatePairNetworks
(
const
Connection
*
a
const
Connection
*
b
std
:
:
optional
<
webrtc
:
:
AdapterType
>
network_preference
)
const
;
int
CompareConnectionStates
(
const
Connection
*
a
const
Connection
*
b
std
:
:
optional
<
int64_t
>
receiving_unchanged_threshold
bool
*
missed_receiving_unchanged_threshold
)
const
;
int
CompareConnectionCandidates
(
const
Connection
*
a
const
Connection
*
b
)
const
;
int
CompareConnections
(
const
Connection
*
a
const
Connection
*
b
std
:
:
optional
<
int64_t
>
receiving_unchanged_threshold
bool
*
missed_receiving_unchanged_threshold
)
const
;
SwitchResult
HandleInitialSelectDampening
(
IceSwitchReason
reason
const
Connection
*
new_connection
)
;
std
:
:
function
<
IceTransportState
(
)
>
ice_transport_state_func_
;
std
:
:
function
<
IceRole
(
)
>
ice_role_func_
;
std
:
:
function
<
bool
(
const
Connection
*
)
>
is_connection_pruned_func_
;
webrtc
:
:
IceConfig
config_
;
const
IceFieldTrials
*
field_trials_
;
const
Connection
*
selected_connection_
=
nullptr
;
std
:
:
vector
<
const
Connection
*
>
connections_
;
std
:
:
set
<
const
Connection
*
>
pinged_connections_
;
std
:
:
set
<
const
Connection
*
>
unpinged_connections_
;
int64_t
initial_select_timestamp_ms_
=
0
;
}
;
}
#
endif
