#
include
"
p2p
/
base
/
transport_description_factory
.
h
"
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
p2p
/
base
/
ice_credentials_iterator
.
h
"
#
include
"
p2p
/
base
/
transport_description
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
ssl_fingerprint
.
h
"
namespace
webrtc
{
TransportDescriptionFactory
:
:
TransportDescriptionFactory
(
const
FieldTrialsView
&
field_trials
)
:
field_trials_
(
field_trials
)
{
}
TransportDescriptionFactory
:
:
~
TransportDescriptionFactory
(
)
=
default
;
std
:
:
unique_ptr
<
cricket
:
:
TransportDescription
>
TransportDescriptionFactory
:
:
CreateOffer
(
const
TransportOptions
&
options
const
cricket
:
:
TransportDescription
*
current_description
cricket
:
:
IceCredentialsIterator
*
ice_credentials
)
const
{
auto
desc
=
std
:
:
make_unique
<
cricket
:
:
TransportDescription
>
(
)
;
if
(
!
current_description
|
|
options
.
ice_restart
)
{
cricket
:
:
IceParameters
credentials
=
ice_credentials
-
>
GetIceCredentials
(
)
;
desc
-
>
ice_ufrag
=
credentials
.
ufrag
;
desc
-
>
ice_pwd
=
credentials
.
pwd
;
}
else
{
desc
-
>
ice_ufrag
=
current_description
-
>
ice_ufrag
;
desc
-
>
ice_pwd
=
current_description
-
>
ice_pwd
;
}
desc
-
>
AddOption
(
cricket
:
:
ICE_OPTION_TRICKLE
)
;
if
(
options
.
enable_ice_renomination
)
{
desc
-
>
AddOption
(
cricket
:
:
ICE_OPTION_RENOMINATION
)
;
}
if
(
insecure_
&
&
!
certificate_
)
{
return
desc
;
}
if
(
!
SetSecurityInfo
(
desc
.
get
(
)
cricket
:
:
CONNECTIONROLE_ACTPASS
)
)
{
return
NULL
;
}
return
desc
;
}
std
:
:
unique_ptr
<
cricket
:
:
TransportDescription
>
TransportDescriptionFactory
:
:
CreateAnswer
(
const
cricket
:
:
TransportDescription
*
offer
const
TransportOptions
&
options
bool
require_transport_attributes
const
cricket
:
:
TransportDescription
*
current_description
cricket
:
:
IceCredentialsIterator
*
ice_credentials
)
const
{
if
(
!
offer
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Failed
to
create
TransportDescription
answer
"
"
because
offer
is
NULL
"
;
return
NULL
;
}
auto
desc
=
std
:
:
make_unique
<
cricket
:
:
TransportDescription
>
(
)
;
if
(
!
current_description
|
|
options
.
ice_restart
)
{
cricket
:
:
IceParameters
credentials
=
ice_credentials
-
>
GetIceCredentials
(
)
;
desc
-
>
ice_ufrag
=
credentials
.
ufrag
;
desc
-
>
ice_pwd
=
credentials
.
pwd
;
}
else
{
desc
-
>
ice_ufrag
=
current_description
-
>
ice_ufrag
;
desc
-
>
ice_pwd
=
current_description
-
>
ice_pwd
;
}
desc
-
>
AddOption
(
cricket
:
:
ICE_OPTION_TRICKLE
)
;
if
(
options
.
enable_ice_renomination
)
{
desc
-
>
AddOption
(
cricket
:
:
ICE_OPTION_RENOMINATION
)
;
}
if
(
(
!
certificate_
|
|
!
offer
-
>
identity_fingerprint
.
get
(
)
)
&
&
insecure
(
)
)
{
return
desc
;
}
if
(
!
offer
-
>
identity_fingerprint
.
get
(
)
)
{
if
(
require_transport_attributes
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Failed
to
create
TransportDescription
answer
"
"
because
of
incompatible
security
settings
"
;
return
NULL
;
}
return
desc
;
}
RTC_CHECK
(
certificate_
)
;
cricket
:
:
ConnectionRole
role
=
cricket
:
:
CONNECTIONROLE_NONE
;
if
(
offer
-
>
connection_role
=
=
cricket
:
:
CONNECTIONROLE_ACTPASS
)
{
role
=
(
options
.
prefer_passive_role
)
?
cricket
:
:
CONNECTIONROLE_PASSIVE
:
cricket
:
:
CONNECTIONROLE_ACTIVE
;
}
else
if
(
offer
-
>
connection_role
=
=
cricket
:
:
CONNECTIONROLE_ACTIVE
)
{
role
=
cricket
:
:
CONNECTIONROLE_PASSIVE
;
}
else
if
(
offer
-
>
connection_role
=
=
cricket
:
:
CONNECTIONROLE_PASSIVE
)
{
role
=
cricket
:
:
CONNECTIONROLE_ACTIVE
;
}
else
if
(
offer
-
>
connection_role
=
=
cricket
:
:
CONNECTIONROLE_NONE
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Remote
offer
connection
role
is
NONE
which
is
"
"
a
protocol
violation
"
;
role
=
(
options
.
prefer_passive_role
)
?
cricket
:
:
CONNECTIONROLE_PASSIVE
:
cricket
:
:
CONNECTIONROLE_ACTIVE
;
}
else
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Remote
offer
connection
role
is
"
<
<
role
<
<
"
which
is
a
protocol
violation
"
;
RTC_DCHECK_NOTREACHED
(
)
;
return
NULL
;
}
if
(
!
SetSecurityInfo
(
desc
.
get
(
)
role
)
)
{
return
NULL
;
}
return
desc
;
}
bool
TransportDescriptionFactory
:
:
SetSecurityInfo
(
cricket
:
:
TransportDescription
*
desc
cricket
:
:
ConnectionRole
role
)
const
{
if
(
!
certificate_
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Cannot
create
identity
digest
with
no
certificate
"
;
return
false
;
}
desc
-
>
identity_fingerprint
=
SSLFingerprint
:
:
CreateFromCertificate
(
*
certificate_
)
;
if
(
!
desc
-
>
identity_fingerprint
)
{
return
false
;
}
desc
-
>
connection_role
=
role
;
return
true
;
}
}
