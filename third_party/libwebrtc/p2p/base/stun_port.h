#
ifndef
P2P_BASE_STUN_PORT_H_
#
define
P2P_BASE_STUN_PORT_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
functional
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
optional
>
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
async_dns_resolver
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
packet_socket_factory
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
p2p
/
base
/
connection
.
h
"
#
include
"
p2p
/
base
/
port
.
h
"
#
include
"
p2p
/
base
/
port_interface
.
h
"
#
include
"
p2p
/
base
/
stun_request
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
dscp
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
#
include
"
rtc_base
/
network
/
sent_packet
.
h
"
#
include
"
rtc_base
/
network_constants
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
cricket
{
static
const
int
INFINITE_LIFETIME
=
-
1
;
static
const
int
HIGH_COST_PORT_KEEPALIVE_LIFETIME
=
2
*
60
*
1000
;
class
RTC_EXPORT
UDPPort
:
public
Port
{
public
:
static
std
:
:
unique_ptr
<
UDPPort
>
Create
(
const
PortParametersRef
&
args
webrtc
:
:
AsyncPacketSocket
*
socket
bool
emit_local_for_anyaddress
std
:
:
optional
<
int
>
stun_keepalive_interval
)
{
auto
port
=
absl
:
:
WrapUnique
(
new
UDPPort
(
args
webrtc
:
:
IceCandidateType
:
:
kHost
socket
emit_local_for_anyaddress
)
)
;
port
-
>
set_stun_keepalive_delay
(
stun_keepalive_interval
)
;
if
(
!
port
-
>
Init
(
)
)
{
return
nullptr
;
}
return
port
;
}
[
[
deprecated
(
"
Pass
arguments
using
PortParametersRef
"
)
]
]
static
std
:
:
unique_ptr
<
UDPPort
>
Create
(
webrtc
:
:
TaskQueueBase
*
thread
webrtc
:
:
PacketSocketFactory
*
factory
const
rtc
:
:
Network
*
network
webrtc
:
:
AsyncPacketSocket
*
socket
absl
:
:
string_view
username
absl
:
:
string_view
password
bool
emit_local_for_anyaddress
std
:
:
optional
<
int
>
stun_keepalive_interval
const
webrtc
:
:
FieldTrialsView
*
field_trials
=
nullptr
)
{
return
Create
(
{
.
network_thread
=
thread
.
socket_factory
=
factory
.
network
=
network
.
ice_username_fragment
=
username
.
ice_password
=
password
.
field_trials
=
field_trials
}
socket
emit_local_for_anyaddress
stun_keepalive_interval
)
;
}
static
std
:
:
unique_ptr
<
UDPPort
>
Create
(
const
PortParametersRef
&
args
uint16_t
min_port
uint16_t
max_port
bool
emit_local_for_anyaddress
std
:
:
optional
<
int
>
stun_keepalive_interval
)
{
auto
port
=
absl
:
:
WrapUnique
(
new
UDPPort
(
args
webrtc
:
:
IceCandidateType
:
:
kHost
min_port
max_port
emit_local_for_anyaddress
)
)
;
port
-
>
set_stun_keepalive_delay
(
stun_keepalive_interval
)
;
if
(
!
port
-
>
Init
(
)
)
{
return
nullptr
;
}
return
port
;
}
[
[
deprecated
(
"
Pass
arguments
using
PortParametersRef
"
)
]
]
static
std
:
:
unique_ptr
<
UDPPort
>
Create
(
webrtc
:
:
TaskQueueBase
*
thread
webrtc
:
:
PacketSocketFactory
*
factory
const
rtc
:
:
Network
*
network
uint16_t
min_port
uint16_t
max_port
absl
:
:
string_view
username
absl
:
:
string_view
password
bool
emit_local_for_anyaddress
std
:
:
optional
<
int
>
stun_keepalive_interval
const
webrtc
:
:
FieldTrialsView
*
field_trials
=
nullptr
)
{
return
Create
(
{
.
network_thread
=
thread
.
socket_factory
=
factory
.
network
=
network
.
ice_username_fragment
=
username
.
ice_password
=
password
.
field_trials
=
field_trials
}
min_port
max_port
emit_local_for_anyaddress
stun_keepalive_interval
)
;
}
~
UDPPort
(
)
override
;
webrtc
:
:
SocketAddress
GetLocalAddress
(
)
const
{
return
socket_
-
>
GetLocalAddress
(
)
;
}
const
ServerAddresses
&
server_addresses
(
)
const
{
return
server_addresses_
;
}
void
set_server_addresses
(
const
ServerAddresses
&
addresses
)
{
server_addresses_
=
addresses
;
}
void
PrepareAddress
(
)
override
;
Connection
*
CreateConnection
(
const
webrtc
:
:
Candidate
&
address
CandidateOrigin
origin
)
override
;
int
SetOption
(
webrtc
:
:
Socket
:
:
Option
opt
int
value
)
override
;
int
GetOption
(
webrtc
:
:
Socket
:
:
Option
opt
int
*
value
)
override
;
int
GetError
(
)
override
;
bool
HandleIncomingPacket
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
ReceivedPacket
&
packet
)
override
;
bool
SupportsProtocol
(
absl
:
:
string_view
protocol
)
const
override
;
webrtc
:
:
ProtocolType
GetProtocol
(
)
const
override
;
void
GetStunStats
(
std
:
:
optional
<
StunStats
>
*
stats
)
override
;
void
set_stun_keepalive_delay
(
const
std
:
:
optional
<
int
>
&
delay
)
;
int
stun_keepalive_delay
(
)
const
{
return
stun_keepalive_delay_
;
}
int
stun_keepalive_lifetime
(
)
const
{
return
stun_keepalive_lifetime_
;
}
void
set_stun_keepalive_lifetime
(
int
lifetime
)
{
stun_keepalive_lifetime_
=
lifetime
;
}
StunRequestManager
&
request_manager
(
)
{
return
request_manager_
;
}
protected
:
UDPPort
(
const
PortParametersRef
&
args
webrtc
:
:
IceCandidateType
type
webrtc
:
:
AsyncPacketSocket
*
socket
bool
emit_local_for_anyaddress
)
;
UDPPort
(
const
PortParametersRef
&
args
webrtc
:
:
IceCandidateType
type
uint16_t
min_port
uint16_t
max_port
bool
emit_local_for_anyaddress
)
;
bool
Init
(
)
;
int
SendTo
(
const
void
*
data
size_t
size
const
webrtc
:
:
SocketAddress
&
addr
const
rtc
:
:
PacketOptions
&
options
bool
payload
)
override
;
void
UpdateNetworkCost
(
)
override
;
rtc
:
:
DiffServCodePoint
StunDscpValue
(
)
const
override
;
void
OnLocalAddressReady
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
webrtc
:
:
SocketAddress
&
address
)
;
void
PostAddAddress
(
bool
is_final
)
override
;
void
OnReadPacket
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
ReceivedPacket
&
packet
)
;
void
OnSentPacket
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
SentPacket
&
sent_packet
)
override
;
void
OnReadyToSend
(
webrtc
:
:
AsyncPacketSocket
*
socket
)
;
void
MaybePrepareStunCandidate
(
)
;
void
SendStunBindingRequests
(
)
;
bool
MaybeSetDefaultLocalAddress
(
webrtc
:
:
SocketAddress
*
addr
)
const
;
private
:
class
AddressResolver
{
public
:
explicit
AddressResolver
(
webrtc
:
:
PacketSocketFactory
*
factory
std
:
:
function
<
void
(
const
webrtc
:
:
SocketAddress
&
int
)
>
done_callback
)
;
void
Resolve
(
const
webrtc
:
:
SocketAddress
&
address
int
family
const
webrtc
:
:
FieldTrialsView
&
field_trials
)
;
bool
GetResolvedAddress
(
const
webrtc
:
:
SocketAddress
&
input
int
family
webrtc
:
:
SocketAddress
*
output
)
const
;
private
:
typedef
std
:
:
map
<
webrtc
:
:
SocketAddress
std
:
:
unique_ptr
<
webrtc
:
:
AsyncDnsResolverInterface
>
>
ResolverMap
;
webrtc
:
:
PacketSocketFactory
*
socket_factory_
;
std
:
:
function
<
void
(
const
webrtc
:
:
SocketAddress
&
int
)
>
done_
;
ResolverMap
resolvers_
;
}
;
void
ResolveStunAddress
(
const
webrtc
:
:
SocketAddress
&
stun_addr
)
;
void
OnResolveResult
(
const
webrtc
:
:
SocketAddress
&
input
int
error
)
;
void
SendStunBindingRequest
(
const
webrtc
:
:
SocketAddress
&
stun_addr
)
;
void
OnStunBindingRequestSucceeded
(
int
rtt_ms
const
webrtc
:
:
SocketAddress
&
stun_server_addr
const
webrtc
:
:
SocketAddress
&
stun_reflected_addr
)
;
void
OnStunBindingOrResolveRequestFailed
(
const
webrtc
:
:
SocketAddress
&
stun_server_addr
int
error_code
absl
:
:
string_view
reason
)
;
void
OnSendPacket
(
const
void
*
data
size_t
size
StunRequest
*
req
)
;
void
MaybeSetPortCompleteOrError
(
)
;
bool
HasStunCandidateWithAddress
(
const
webrtc
:
:
SocketAddress
&
addr
)
const
;
int
GetStunKeepaliveLifetime
(
)
{
return
(
network_cost
(
)
>
=
webrtc
:
:
kNetworkCostHigh
)
?
HIGH_COST_PORT_KEEPALIVE_LIFETIME
:
INFINITE_LIFETIME
;
}
ServerAddresses
server_addresses_
;
ServerAddresses
bind_request_succeeded_servers_
;
ServerAddresses
bind_request_failed_servers_
;
StunRequestManager
request_manager_
;
webrtc
:
:
AsyncPacketSocket
*
socket_
;
int
error_
;
int
send_error_count_
=
0
;
std
:
:
unique_ptr
<
AddressResolver
>
resolver_
;
bool
ready_
;
int
stun_keepalive_delay_
;
int
stun_keepalive_lifetime_
=
INFINITE_LIFETIME
;
rtc
:
:
DiffServCodePoint
dscp_
;
StunStats
stats_
;
bool
emit_local_for_anyaddress_
;
friend
class
StunBindingRequest
;
}
;
class
StunPort
:
public
UDPPort
{
public
:
static
std
:
:
unique_ptr
<
StunPort
>
Create
(
const
PortParametersRef
&
args
uint16_t
min_port
uint16_t
max_port
const
ServerAddresses
&
servers
std
:
:
optional
<
int
>
stun_keepalive_interval
)
;
[
[
deprecated
(
"
Pass
arguments
using
PortParametersRef
"
)
]
]
static
std
:
:
unique_ptr
<
StunPort
>
Create
(
webrtc
:
:
TaskQueueBase
*
thread
webrtc
:
:
PacketSocketFactory
*
factory
const
rtc
:
:
Network
*
network
uint16_t
min_port
uint16_t
max_port
absl
:
:
string_view
username
absl
:
:
string_view
password
const
ServerAddresses
&
servers
std
:
:
optional
<
int
>
stun_keepalive_interval
const
webrtc
:
:
FieldTrialsView
*
field_trials
)
;
void
PrepareAddress
(
)
override
;
protected
:
StunPort
(
const
PortParametersRef
&
args
uint16_t
min_port
uint16_t
max_port
const
ServerAddresses
&
servers
)
;
}
;
}
#
endif
