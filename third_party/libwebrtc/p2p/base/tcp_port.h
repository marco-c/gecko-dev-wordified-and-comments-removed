#
ifndef
P2P_BASE_TCP_PORT_H_
#
define
P2P_BASE_TCP_PORT_H_
#
include
<
list
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
p2p
/
base
/
connection
.
h
"
#
include
"
p2p
/
base
/
port
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
containers
/
flat_map
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
namespace
cricket
{
class
TCPConnection
;
class
TCPPort
:
public
Port
{
public
:
static
std
:
:
unique_ptr
<
TCPPort
>
Create
(
const
PortParametersRef
&
args
uint16_t
min_port
uint16_t
max_port
bool
allow_listen
)
{
return
absl
:
:
WrapUnique
(
new
TCPPort
(
args
min_port
max_port
allow_listen
)
)
;
}
[
[
deprecated
(
"
Pass
arguments
using
PortParametersRef
"
)
]
]
static
std
:
:
unique_ptr
<
TCPPort
>
Create
(
webrtc
:
:
TaskQueueBase
*
thread
webrtc
:
:
PacketSocketFactory
*
factory
const
rtc
:
:
Network
*
network
uint16_t
min_port
uint16_t
max_port
absl
:
:
string_view
username
absl
:
:
string_view
password
bool
allow_listen
const
webrtc
:
:
FieldTrialsView
*
field_trials
=
nullptr
)
{
return
Create
(
{
.
network_thread
=
thread
.
socket_factory
=
factory
.
network
=
network
.
ice_username_fragment
=
username
.
ice_password
=
password
.
field_trials
=
field_trials
}
min_port
max_port
allow_listen
)
;
}
~
TCPPort
(
)
override
;
Connection
*
CreateConnection
(
const
webrtc
:
:
Candidate
&
address
CandidateOrigin
origin
)
override
;
void
PrepareAddress
(
)
override
;
int
GetOption
(
webrtc
:
:
Socket
:
:
Option
opt
int
*
value
)
override
;
int
SetOption
(
webrtc
:
:
Socket
:
:
Option
opt
int
value
)
override
;
int
GetError
(
)
override
;
bool
SupportsProtocol
(
absl
:
:
string_view
protocol
)
const
override
;
webrtc
:
:
ProtocolType
GetProtocol
(
)
const
override
;
protected
:
TCPPort
(
const
PortParametersRef
&
args
uint16_t
min_port
uint16_t
max_port
bool
allow_listen
)
;
int
SendTo
(
const
void
*
data
size_t
size
const
webrtc
:
:
SocketAddress
&
addr
const
rtc
:
:
PacketOptions
&
options
bool
payload
)
override
;
void
OnNewConnection
(
webrtc
:
:
AsyncListenSocket
*
socket
webrtc
:
:
AsyncPacketSocket
*
new_socket
)
;
private
:
struct
Incoming
{
webrtc
:
:
SocketAddress
addr
;
webrtc
:
:
AsyncPacketSocket
*
socket
;
}
;
void
TryCreateServerSocket
(
)
;
webrtc
:
:
AsyncPacketSocket
*
GetIncoming
(
const
webrtc
:
:
SocketAddress
&
addr
bool
remove
=
false
)
;
void
OnReadPacket
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
ReceivedPacket
&
packet
)
;
void
OnSentPacket
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
SentPacket
&
sent_packet
)
override
;
void
OnReadyToSend
(
webrtc
:
:
AsyncPacketSocket
*
socket
)
;
bool
allow_listen_
;
std
:
:
unique_ptr
<
webrtc
:
:
AsyncListenSocket
>
listen_socket_
;
webrtc
:
:
flat_map
<
webrtc
:
:
Socket
:
:
Option
int
>
socket_options_
;
int
error_
;
std
:
:
list
<
Incoming
>
incoming_
;
friend
class
TCPConnection
;
}
;
class
TCPConnection
:
public
Connection
public
sigslot
:
:
has_slots
<
>
{
public
:
TCPConnection
(
rtc
:
:
WeakPtr
<
Port
>
tcp_port
const
webrtc
:
:
Candidate
&
candidate
webrtc
:
:
AsyncPacketSocket
*
socket
=
nullptr
)
;
~
TCPConnection
(
)
override
;
int
Send
(
const
void
*
data
size_t
size
const
rtc
:
:
PacketOptions
&
options
)
override
;
int
GetError
(
)
override
;
webrtc
:
:
AsyncPacketSocket
*
socket
(
)
{
return
socket_
.
get
(
)
;
}
int
reconnection_timeout
(
)
const
{
return
reconnection_timeout_
;
}
void
set_reconnection_timeout
(
int
timeout_in_ms
)
{
reconnection_timeout_
=
timeout_in_ms
;
}
protected
:
void
OnConnectionRequestResponse
(
StunRequest
*
req
StunMessage
*
response
)
override
;
private
:
friend
class
TCPPort
;
void
MaybeReconnect
(
)
;
void
CreateOutgoingTcpSocket
(
)
RTC_RUN_ON
(
network_thread
(
)
)
;
void
ConnectSocketSignals
(
webrtc
:
:
AsyncPacketSocket
*
socket
)
RTC_RUN_ON
(
network_thread
(
)
)
;
void
DisconnectSocketSignals
(
webrtc
:
:
AsyncPacketSocket
*
socket
)
RTC_RUN_ON
(
network_thread
(
)
)
;
void
OnConnect
(
webrtc
:
:
AsyncPacketSocket
*
socket
)
;
void
OnClose
(
webrtc
:
:
AsyncPacketSocket
*
socket
int
error
)
;
void
OnSentPacket
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
SentPacket
&
sent_packet
)
;
void
OnReadPacket
(
webrtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
ReceivedPacket
&
packet
)
;
void
OnReadyToSend
(
webrtc
:
:
AsyncPacketSocket
*
socket
)
;
void
OnDestroyed
(
Connection
*
c
)
;
TCPPort
*
tcp_port
(
)
{
RTC_DCHECK_EQ
(
port
(
)
-
>
GetProtocol
(
)
webrtc
:
:
PROTO_TCP
)
;
return
static_cast
<
TCPPort
*
>
(
port
(
)
)
;
}
std
:
:
unique_ptr
<
webrtc
:
:
AsyncPacketSocket
>
socket_
;
int
error_
;
const
bool
outgoing_
;
bool
connection_pending_
;
bool
pretending_to_be_writable_
;
int
reconnection_timeout_
;
webrtc
:
:
ScopedTaskSafety
network_safety_
;
}
;
}
#
endif
