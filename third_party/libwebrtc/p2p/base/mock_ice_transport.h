#
ifndef
P2P_BASE_MOCK_ICE_TRANSPORT_H_
#
define
P2P_BASE_MOCK_ICE_TRANSPORT_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
p2p
/
base
/
ice_transport_internal
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
cricket
{
class
MockIceTransport
:
public
IceTransportInternal
{
public
:
MockIceTransport
(
)
{
SignalReadyToSend
(
this
)
;
SignalWritableState
(
this
)
;
}
MOCK_METHOD
(
int
SendPacket
(
const
char
*
data
size_t
len
const
rtc
:
:
PacketOptions
&
options
int
flags
)
(
override
)
)
;
MOCK_METHOD
(
int
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
(
override
)
)
;
MOCK_METHOD
(
int
GetError
(
)
(
override
)
)
;
MOCK_METHOD
(
cricket
:
:
IceRole
GetIceRole
(
)
(
const
override
)
)
;
MOCK_METHOD
(
bool
GetStats
(
cricket
:
:
IceTransportStats
*
ice_transport_stats
)
(
override
)
)
;
IceTransportState
GetState
(
)
const
override
{
return
IceTransportState
:
:
STATE_INIT
;
}
webrtc
:
:
IceTransportState
GetIceTransportState
(
)
const
override
{
return
webrtc
:
:
IceTransportState
:
:
kNew
;
}
const
std
:
:
string
&
transport_name
(
)
const
override
{
return
transport_name_
;
}
int
component
(
)
const
override
{
return
0
;
}
void
SetIceRole
(
IceRole
)
override
{
}
void
SetIceParameters
(
const
IceParameters
&
)
override
{
}
void
SetRemoteIceParameters
(
const
IceParameters
&
)
override
{
}
void
SetRemoteIceMode
(
IceMode
)
override
{
}
void
SetIceConfig
(
const
IceConfig
&
config
)
override
{
ice_config_
=
config
;
}
const
IceConfig
&
config
(
)
const
override
{
return
ice_config_
;
}
std
:
:
optional
<
int
>
GetRttEstimate
(
)
override
{
return
std
:
:
nullopt
;
}
const
Connection
*
selected_connection
(
)
const
override
{
return
nullptr
;
}
std
:
:
optional
<
const
CandidatePair
>
GetSelectedCandidatePair
(
)
const
override
{
return
std
:
:
nullopt
;
}
void
MaybeStartGathering
(
)
override
{
}
void
AddRemoteCandidate
(
const
Candidate
&
)
override
{
}
void
RemoveRemoteCandidate
(
const
Candidate
&
)
override
{
}
void
RemoveAllRemoteCandidates
(
)
override
{
}
IceGatheringState
gathering_state
(
)
const
override
{
return
IceGatheringState
:
:
kIceGatheringComplete
;
}
bool
receiving
(
)
const
override
{
return
true
;
}
bool
writable
(
)
const
override
{
return
true
;
}
private
:
std
:
:
string
transport_name_
;
IceConfig
ice_config_
;
}
;
}
#
endif
