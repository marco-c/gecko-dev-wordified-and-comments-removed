#
include
"
p2p
/
test
/
stun_server
.
h
"
#
include
<
string
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
api
/
transport
/
stun
.
h
"
#
include
"
rtc_base
/
async_udp_socket
.
h
"
#
include
"
rtc_base
/
byte_buffer
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
test_client
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
virtual_socket_server
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
const
SocketAddress
server_addr
(
"
99
.
99
.
99
.
1
"
3478
)
;
const
SocketAddress
client_addr
(
"
1
.
2
.
3
.
4
"
1234
)
;
}
class
StunServerTest
:
public
:
:
testing
:
:
Test
{
public
:
StunServerTest
(
)
:
ss_
(
new
VirtualSocketServer
(
)
)
{
ss_
-
>
SetMessageQueue
(
&
main_thread
)
;
server_
.
reset
(
new
StunServer
(
AsyncUDPSocket
:
:
Create
(
ss_
.
get
(
)
server_addr
)
)
)
;
client_
.
reset
(
new
TestClient
(
absl
:
:
WrapUnique
(
AsyncUDPSocket
:
:
Create
(
ss_
.
get
(
)
client_addr
)
)
)
)
;
}
void
Send
(
const
StunMessage
&
msg
)
{
ByteBufferWriter
buf
;
msg
.
Write
(
&
buf
)
;
Send
(
reinterpret_cast
<
const
char
*
>
(
buf
.
Data
(
)
)
static_cast
<
int
>
(
buf
.
Length
(
)
)
)
;
}
void
Send
(
const
char
*
buf
int
len
)
{
client_
-
>
SendTo
(
buf
len
server_addr
)
;
}
bool
ReceiveFails
(
)
{
return
(
client_
-
>
CheckNoPacket
(
)
)
;
}
StunMessage
*
Receive
(
)
{
StunMessage
*
msg
=
NULL
;
std
:
:
unique_ptr
<
TestClient
:
:
Packet
>
packet
=
client_
-
>
NextPacket
(
TestClient
:
:
kTimeoutMs
)
;
if
(
packet
)
{
ByteBufferReader
buf
(
packet
-
>
buf
)
;
msg
=
new
StunMessage
(
)
;
msg
-
>
Read
(
&
buf
)
;
}
return
msg
;
}
private
:
AutoThread
main_thread
;
std
:
:
unique_ptr
<
VirtualSocketServer
>
ss_
;
std
:
:
unique_ptr
<
StunServer
>
server_
;
std
:
:
unique_ptr
<
TestClient
>
client_
;
}
;
TEST_F
(
StunServerTest
TestGood
)
{
std
:
:
string
transaction_id
=
"
0123456789abcdef
"
;
StunMessage
req
(
STUN_BINDING_REQUEST
transaction_id
)
;
Send
(
req
)
;
StunMessage
*
msg
=
Receive
(
)
;
ASSERT_TRUE
(
msg
!
=
NULL
)
;
EXPECT_EQ
(
STUN_BINDING_RESPONSE
msg
-
>
type
(
)
)
;
EXPECT_EQ
(
req
.
transaction_id
(
)
msg
-
>
transaction_id
(
)
)
;
const
StunAddressAttribute
*
mapped_addr
=
msg
-
>
GetAddress
(
STUN_ATTR_MAPPED_ADDRESS
)
;
EXPECT_TRUE
(
mapped_addr
!
=
NULL
)
;
EXPECT_EQ
(
1
mapped_addr
-
>
family
(
)
)
;
EXPECT_EQ
(
client_addr
.
port
(
)
mapped_addr
-
>
port
(
)
)
;
delete
msg
;
}
TEST_F
(
StunServerTest
TestGoodXorMappedAddr
)
{
std
:
:
string
transaction_id
=
"
0123456789ab
"
;
StunMessage
req
(
STUN_BINDING_REQUEST
transaction_id
)
;
Send
(
req
)
;
StunMessage
*
msg
=
Receive
(
)
;
ASSERT_TRUE
(
msg
!
=
NULL
)
;
EXPECT_EQ
(
STUN_BINDING_RESPONSE
msg
-
>
type
(
)
)
;
EXPECT_EQ
(
req
.
transaction_id
(
)
msg
-
>
transaction_id
(
)
)
;
const
StunAddressAttribute
*
mapped_addr
=
msg
-
>
GetAddress
(
STUN_ATTR_XOR_MAPPED_ADDRESS
)
;
EXPECT_TRUE
(
mapped_addr
!
=
NULL
)
;
EXPECT_EQ
(
1
mapped_addr
-
>
family
(
)
)
;
EXPECT_EQ
(
client_addr
.
port
(
)
mapped_addr
-
>
port
(
)
)
;
delete
msg
;
}
TEST_F
(
StunServerTest
TestNoXorMappedAddr
)
{
std
:
:
string
transaction_id
=
"
0123456789abcdef
"
;
StunMessage
req
(
STUN_BINDING_REQUEST
transaction_id
)
;
Send
(
req
)
;
StunMessage
*
msg
=
Receive
(
)
;
ASSERT_TRUE
(
msg
!
=
NULL
)
;
EXPECT_EQ
(
STUN_BINDING_RESPONSE
msg
-
>
type
(
)
)
;
EXPECT_EQ
(
req
.
transaction_id
(
)
msg
-
>
transaction_id
(
)
)
;
const
StunAddressAttribute
*
mapped_addr
=
msg
-
>
GetAddress
(
STUN_ATTR_XOR_MAPPED_ADDRESS
)
;
EXPECT_TRUE
(
mapped_addr
=
=
NULL
)
;
delete
msg
;
}
TEST_F
(
StunServerTest
TestBad
)
{
const
char
*
bad
=
"
this
is
a
completely
nonsensical
message
whose
only
"
"
purpose
is
to
make
the
parser
go
'
ack
'
.
it
doesn
'
t
"
"
look
anything
like
a
normal
stun
message
"
;
Send
(
bad
static_cast
<
int
>
(
strlen
(
bad
)
)
)
;
ASSERT_TRUE
(
ReceiveFails
(
)
)
;
}
}
