#
ifndef
P2P_TEST_MOCK_DNS_RESOLVING_PACKET_SOCKET_FACTORY_H_
#
define
P2P_TEST_MOCK_DNS_RESOLVING_PACKET_SOCKET_FACTORY_H_
#
include
<
functional
>
#
include
<
memory
>
#
include
"
api
/
async_dns_resolver
.
h
"
#
include
"
api
/
test
/
mock_async_dns_resolver
.
h
"
#
include
"
p2p
/
base
/
basic_packet_socket_factory
.
h
"
#
include
"
rtc_base
/
socket_factory
.
h
"
namespace
webrtc
{
class
MockDnsResolvingPacketSocketFactory
:
public
BasicPacketSocketFactory
{
public
:
using
Expectations
=
std
:
:
function
<
void
(
MockAsyncDnsResolver
*
MockAsyncDnsResolverResult
*
)
>
;
explicit
MockDnsResolvingPacketSocketFactory
(
SocketFactory
*
socket_factory
)
:
BasicPacketSocketFactory
(
socket_factory
)
{
}
std
:
:
unique_ptr
<
AsyncDnsResolverInterface
>
CreateAsyncDnsResolver
(
)
override
{
std
:
:
unique_ptr
<
MockAsyncDnsResolver
>
resolver
=
std
:
:
make_unique
<
MockAsyncDnsResolver
>
(
)
;
if
(
expectations_
)
{
expectations_
(
resolver
.
get
(
)
&
resolver_result_
)
;
}
return
resolver
;
}
void
SetExpectations
(
Expectations
expectations
)
{
expectations_
=
expectations
;
}
private
:
MockAsyncDnsResolverResult
resolver_result_
;
Expectations
expectations_
;
}
;
}
#
ifdef
WEBRTC_ALLOW_DEPRECATED_NAMESPACES
namespace
rtc
{
using
:
:
webrtc
:
:
MockDnsResolvingPacketSocketFactory
;
}
#
endif
#
endif
