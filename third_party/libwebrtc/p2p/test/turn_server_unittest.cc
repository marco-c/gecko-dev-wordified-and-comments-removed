#
include
"
p2p
/
test
/
turn_server
.
h
"
#
include
<
memory
>
#
include
"
p2p
/
base
/
basic_packet_socket_factory
.
h
"
#
include
"
p2p
/
base
/
port_interface
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
virtual_socket_server
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
class
TurnServerConnectionTest
:
public
:
:
testing
:
:
Test
{
public
:
TurnServerConnectionTest
(
)
:
thread_
(
&
vss_
)
socket_factory_
(
&
vss_
)
{
}
void
ExpectEqual
(
const
TurnServerConnection
&
a
const
TurnServerConnection
&
b
)
{
EXPECT_TRUE
(
a
=
=
b
)
;
EXPECT_FALSE
(
a
<
b
)
;
EXPECT_FALSE
(
b
<
a
)
;
}
void
ExpectNotEqual
(
const
TurnServerConnection
&
a
const
TurnServerConnection
&
b
)
{
EXPECT_FALSE
(
a
=
=
b
)
;
EXPECT_TRUE
(
(
a
<
b
)
!
=
(
b
<
a
)
)
;
}
protected
:
VirtualSocketServer
vss_
;
AutoSocketServerThread
thread_
;
BasicPacketSocketFactory
socket_factory_
;
}
;
TEST_F
(
TurnServerConnectionTest
ComparisonOperators
)
{
std
:
:
unique_ptr
<
AsyncPacketSocket
>
socket1
(
socket_factory_
.
CreateUdpSocket
(
SocketAddress
(
"
1
.
1
.
1
.
1
"
1
)
0
0
)
)
;
std
:
:
unique_ptr
<
AsyncPacketSocket
>
socket2
(
socket_factory_
.
CreateUdpSocket
(
SocketAddress
(
"
2
.
2
.
2
.
2
"
2
)
0
0
)
)
;
TurnServerConnection
connection1
(
socket2
-
>
GetLocalAddress
(
)
PROTO_UDP
socket1
.
get
(
)
)
;
TurnServerConnection
connection2
(
socket2
-
>
GetLocalAddress
(
)
PROTO_UDP
socket1
.
get
(
)
)
;
TurnServerConnection
connection3
(
socket1
-
>
GetLocalAddress
(
)
PROTO_UDP
socket2
.
get
(
)
)
;
TurnServerConnection
connection4
(
socket2
-
>
GetLocalAddress
(
)
PROTO_TCP
socket1
.
get
(
)
)
;
ExpectEqual
(
connection1
connection2
)
;
ExpectNotEqual
(
connection1
connection3
)
;
ExpectNotEqual
(
connection1
connection4
)
;
}
}
