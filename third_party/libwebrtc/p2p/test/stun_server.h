#
ifndef
P2P_TEST_STUN_SERVER_H_
#
define
P2P_TEST_STUN_SERVER_H_
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
transport
/
stun
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
async_udp_socket
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
namespace
webrtc
{
const
int
STUN_SERVER_PORT
=
3478
;
class
StunServer
{
public
:
explicit
StunServer
(
AsyncUDPSocket
*
socket
)
;
virtual
~
StunServer
(
)
;
protected
:
void
OnPacket
(
AsyncPacketSocket
*
socket
const
rtc
:
:
ReceivedPacket
&
packet
)
;
virtual
void
OnBindingRequest
(
cricket
:
:
StunMessage
*
msg
const
SocketAddress
&
addr
)
;
void
OnAllocateRequest
(
cricket
:
:
StunMessage
*
msg
const
SocketAddress
&
addr
)
;
void
OnSharedSecretRequest
(
cricket
:
:
StunMessage
*
msg
const
SocketAddress
&
addr
)
;
void
OnSendRequest
(
cricket
:
:
StunMessage
*
msg
const
SocketAddress
&
addr
)
;
void
SendErrorResponse
(
const
cricket
:
:
StunMessage
&
msg
const
SocketAddress
&
addr
int
error_code
absl
:
:
string_view
error_desc
)
;
void
SendResponse
(
const
cricket
:
:
StunMessage
&
msg
const
SocketAddress
&
addr
)
;
void
GetStunBindResponse
(
cricket
:
:
StunMessage
*
message
const
SocketAddress
&
remote_addr
cricket
:
:
StunMessage
*
response
)
const
;
private
:
SequenceChecker
sequence_checker_
;
std
:
:
unique_ptr
<
AsyncUDPSocket
>
socket_
;
}
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
STUN_SERVER_PORT
;
using
:
:
webrtc
:
:
StunServer
;
}
#
endif
