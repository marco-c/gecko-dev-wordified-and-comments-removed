#
ifndef
P2P_TEST_TEST_STUN_SERVER_H_
#
define
P2P_TEST_TEST_STUN_SERVER_H_
#
include
<
memory
>
#
include
"
api
/
transport
/
stun
.
h
"
#
include
"
p2p
/
test
/
stun_server
.
h
"
#
include
"
rtc_base
/
async_udp_socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
rtc_base
/
socket_server
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
cricket
{
class
TestStunServer
:
StunServer
{
public
:
using
StunServerPtr
=
std
:
:
unique_ptr
<
TestStunServer
std
:
:
function
<
void
(
TestStunServer
*
)
>
>
;
static
StunServerPtr
Create
(
rtc
:
:
SocketServer
*
ss
const
rtc
:
:
SocketAddress
&
addr
rtc
:
:
Thread
&
network_thread
)
;
void
set_fake_stun_addr
(
const
rtc
:
:
SocketAddress
&
addr
)
{
fake_stun_addr_
=
addr
;
}
private
:
static
void
DeleteOnNetworkThread
(
TestStunServer
*
server
)
;
TestStunServer
(
rtc
:
:
AsyncUDPSocket
*
socket
rtc
:
:
Thread
&
network_thread
)
:
StunServer
(
socket
)
network_thread_
(
network_thread
)
{
}
void
OnBindingRequest
(
StunMessage
*
msg
const
rtc
:
:
SocketAddress
&
remote_addr
)
override
;
private
:
rtc
:
:
SocketAddress
fake_stun_addr_
;
rtc
:
:
Thread
&
network_thread_
;
}
;
}
#
endif
