#
ifndef
TEST_MOCK_AUDIO_ENCODER_H_
#
define
TEST_MOCK_AUDIO_ENCODER_H_
#
include
<
string
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
class
MockAudioEncoder
:
public
AudioEncoder
{
public
:
MockAudioEncoder
(
)
;
~
MockAudioEncoder
(
)
;
MOCK_METHOD
(
int
SampleRateHz
(
)
(
const
override
)
)
;
MOCK_METHOD
(
size_t
NumChannels
(
)
(
const
override
)
)
;
MOCK_METHOD
(
int
RtpTimestampRateHz
(
)
(
const
override
)
)
;
MOCK_METHOD
(
size_t
Num10MsFramesInNextPacket
(
)
(
const
override
)
)
;
MOCK_METHOD
(
size_t
Max10MsFramesInAPacket
(
)
(
const
override
)
)
;
MOCK_METHOD
(
int
GetTargetBitrate
(
)
(
const
override
)
)
;
MOCK_METHOD
(
(
std
:
:
optional
<
std
:
:
pair
<
TimeDelta
TimeDelta
>
>
)
GetFrameLengthRange
(
)
(
const
override
)
)
;
MOCK_METHOD
(
(
std
:
:
optional
<
std
:
:
pair
<
DataRate
DataRate
>
>
)
GetBitrateRange
(
)
(
const
override
)
)
;
MOCK_METHOD
(
void
Reset
(
)
(
override
)
)
;
MOCK_METHOD
(
bool
SetFec
(
bool
enable
)
(
override
)
)
;
MOCK_METHOD
(
bool
SetDtx
(
bool
enable
)
(
override
)
)
;
MOCK_METHOD
(
bool
SetApplication
(
Application
application
)
(
override
)
)
;
MOCK_METHOD
(
void
SetMaxPlaybackRate
(
int
frequency_hz
)
(
override
)
)
;
MOCK_METHOD
(
void
OnReceivedUplinkBandwidth
(
int
target_audio_bitrate_bps
std
:
:
optional
<
int64_t
>
probing_interval_ms
)
(
override
)
)
;
MOCK_METHOD
(
void
OnReceivedUplinkPacketLossFraction
(
float
uplink_packet_loss_fraction
)
(
override
)
)
;
MOCK_METHOD
(
void
OnReceivedOverhead
(
size_t
overhead_bytes_per_packet
)
(
override
)
)
;
MOCK_METHOD
(
bool
EnableAudioNetworkAdaptor
(
const
std
:
:
string
&
config_string
RtcEventLog
*
)
(
override
)
)
;
MOCK_METHOD
(
EncodedInfo
EncodeImpl
(
uint32_t
timestamp
webrtc
:
:
ArrayView
<
const
int16_t
>
audio
webrtc
:
:
Buffer
*
)
(
override
)
)
;
class
FakeEncoding
{
public
:
explicit
FakeEncoding
(
const
AudioEncoder
:
:
EncodedInfo
&
info
)
;
explicit
FakeEncoding
(
size_t
encoded_bytes
)
;
AudioEncoder
:
:
EncodedInfo
operator
(
)
(
uint32_t
timestamp
ArrayView
<
const
int16_t
>
audio
Buffer
*
encoded
)
;
private
:
AudioEncoder
:
:
EncodedInfo
info_
;
}
;
class
CopyEncoding
{
public
:
~
CopyEncoding
(
)
;
CopyEncoding
(
AudioEncoder
:
:
EncodedInfo
info
ArrayView
<
const
uint8_t
>
payload
)
;
explicit
CopyEncoding
(
ArrayView
<
const
uint8_t
>
payload
)
;
AudioEncoder
:
:
EncodedInfo
operator
(
)
(
uint32_t
timestamp
ArrayView
<
const
int16_t
>
audio
Buffer
*
encoded
)
;
private
:
AudioEncoder
:
:
EncodedInfo
info_
;
ArrayView
<
const
uint8_t
>
payload_
;
}
;
}
;
}
#
endif
