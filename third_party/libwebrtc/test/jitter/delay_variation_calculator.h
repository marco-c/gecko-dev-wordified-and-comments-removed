#
ifndef
TEST_JITTER_DELAY_VARIATION_CALCULATOR_H_
#
define
TEST_JITTER_DELAY_VARIATION_CALCULATOR_H_
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
string
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
numerics
/
samples_stats_counter
.
h
"
#
include
"
api
/
test
/
metrics
/
metrics_logger
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
api
/
video
/
video_frame_type
.
h
"
#
include
"
rtc_base
/
numerics
/
sequence_number_unwrapper
.
h
"
namespace
webrtc
{
namespace
test
{
class
DelayVariationCalculator
{
public
:
struct
TimeSeries
{
SamplesStatsCounter
rtp_timestamps
;
SamplesStatsCounter
arrival_times_ms
;
SamplesStatsCounter
sizes_bytes
;
SamplesStatsCounter
inter_departure_times_ms
;
SamplesStatsCounter
inter_arrival_times_ms
;
SamplesStatsCounter
inter_delay_variations_ms
;
SamplesStatsCounter
inter_size_variations_bytes
;
}
;
DelayVariationCalculator
(
)
=
default
;
~
DelayVariationCalculator
(
)
=
default
;
void
Insert
(
uint32_t
rtp_timestamp
Timestamp
arrival_time
DataSize
size
absl
:
:
optional
<
int
>
spatial_layer
=
absl
:
:
nullopt
absl
:
:
optional
<
int
>
temporal_layer
=
absl
:
:
nullopt
absl
:
:
optional
<
VideoFrameType
>
frame_type
=
absl
:
:
nullopt
)
;
const
TimeSeries
&
time_series
(
)
const
{
return
time_series_
;
}
private
:
struct
Frame
{
uint32_t
rtp_timestamp
;
int64_t
unwrapped_rtp_timestamp
;
Timestamp
arrival_time
;
DataSize
size
;
absl
:
:
optional
<
int
>
spatial_layer
;
absl
:
:
optional
<
int
>
temporal_layer
;
absl
:
:
optional
<
VideoFrameType
>
frame_type
;
}
;
using
MetadataT
=
std
:
:
map
<
std
:
:
string
std
:
:
string
>
;
void
InsertFirstFrame
(
const
Frame
&
frame
Timestamp
sample_time
MetadataT
sample_metadata
)
;
void
InsertFrame
(
const
Frame
&
frame
Timestamp
sample_time
MetadataT
sample_metadata
)
;
MetadataT
BuildMetadata
(
const
Frame
&
frame
)
;
RtpTimestampUnwrapper
unwrapper_
;
absl
:
:
optional
<
Frame
>
prev_frame_
=
absl
:
:
nullopt
;
TimeSeries
time_series_
;
}
;
}
}
#
endif
