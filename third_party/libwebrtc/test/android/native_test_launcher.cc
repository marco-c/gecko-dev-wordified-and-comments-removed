#
include
"
test
/
android
/
native_test_launcher
.
h
"
#
include
<
errno
.
h
>
#
include
<
pthread
.
h
>
#
include
<
signal
.
h
>
#
include
<
unistd
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
test
/
android
/
native_test_util
.
h
"
#
include
"
test
/
native_test_jni
/
NativeTestWebrtc_jni
.
h
"
#
include
"
third_party
/
jni_zero
/
jni_zero
.
h
"
extern
int
main
(
int
argc
char
*
*
argv
)
;
namespace
webrtc
{
namespace
test
{
namespace
android
{
namespace
{
const
char
kCrashedMarker
[
]
=
"
[
CRASHED
]
\
n
"
;
const
int
kExceptionSignals
[
]
=
{
SIGSEGV
SIGABRT
SIGFPE
SIGILL
SIGBUS
-
1
}
;
struct
sigaction
g_old_sa
[
NSIG
]
;
void
SignalHandler
(
int
sig
siginfo_t
*
info
void
*
reserved
)
{
write
(
STDOUT_FILENO
kCrashedMarker
sizeof
(
kCrashedMarker
)
-
1
)
;
g_old_sa
[
sig
]
.
sa_sigaction
(
sig
info
reserved
)
;
}
}
static
void
JNI_NativeTestWebrtc_RunTests
(
JNIEnv
*
env
std
:
:
string
&
command_line_flags
std
:
:
string
&
command_line_file_path
std
:
:
string
&
stdout_file_path
std
:
:
string
&
test_data_dir
)
{
AndroidLog
(
ANDROID_LOG_INFO
"
Entering
JNI_NativeTestWebrtc_RunTests
with
command_line_flags
=
%
s
"
"
command_line_file_path
=
%
s
stdout_file_path
=
%
s
test_data_dir
=
%
s
\
n
"
command_line_flags
.
c_str
(
)
command_line_file_path
.
c_str
(
)
stdout_file_path
.
c_str
(
)
test_data_dir
.
c_str
(
)
)
;
pthread_atfork
(
nullptr
nullptr
jni_zero
:
:
DisableJvmForTesting
)
;
std
:
:
vector
<
std
:
:
string
>
args
;
if
(
command_line_file_path
.
empty
(
)
)
args
.
push_back
(
"
_
"
)
;
else
ParseArgsFromCommandLineFile
(
command_line_file_path
.
c_str
(
)
&
args
)
;
ParseArgsFromString
(
command_line_flags
&
args
)
;
std
:
:
vector
<
char
*
>
argv
;
int
argc
=
ArgsToArgv
(
args
&
argv
)
;
if
(
freopen
(
stdout_file_path
.
c_str
(
)
"
a
+
"
stdout
)
=
=
NULL
)
{
AndroidLog
(
ANDROID_LOG_ERROR
"
Failed
to
redirect
stream
to
file
:
%
s
:
%
s
\
n
"
stdout_file_path
.
c_str
(
)
strerror
(
errno
)
)
;
exit
(
EXIT_FAILURE
)
;
}
AndroidLog
(
ANDROID_LOG_INFO
"
Redirecting
stdout
to
file
:
%
s
\
n
"
stdout_file_path
.
c_str
(
)
)
;
dup2
(
STDOUT_FILENO
STDERR_FILENO
)
;
ScopedMainEntryLogger
scoped_main_entry_logger
;
main
(
argc
&
argv
[
0
]
)
;
}
void
InstallHandlers
(
)
{
struct
sigaction
sa
;
memset
(
&
sa
0
sizeof
(
sa
)
)
;
sa
.
sa_sigaction
=
SignalHandler
;
sa
.
sa_flags
=
SA_SIGINFO
;
for
(
unsigned
int
i
=
0
;
kExceptionSignals
[
i
]
!
=
-
1
;
+
+
i
)
{
sigaction
(
kExceptionSignals
[
i
]
&
sa
&
g_old_sa
[
kExceptionSignals
[
i
]
]
)
;
}
}
}
}
}
