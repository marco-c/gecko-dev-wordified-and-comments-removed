#
ifndef
TEST_ANDROID_NATIVE_TEST_UTIL_H_
#
define
TEST_ANDROID_NATIVE_TEST_UTIL_H_
#
include
<
android
/
log
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
third_party
/
jni_zero
/
jni_zero
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
android
{
void
AndroidLog
(
int
priority
const
char
*
format
.
.
.
)
;
std
:
:
string
ASCIIJavaStringToUTF8
(
JNIEnv
*
env
jstring
str
)
;
void
ParseArgsFromString
(
const
std
:
:
string
&
command_line
std
:
:
vector
<
std
:
:
string
>
*
args
)
;
void
ParseArgsFromCommandLineFile
(
const
char
*
path
std
:
:
vector
<
std
:
:
string
>
*
args
)
;
int
ArgsToArgv
(
const
std
:
:
vector
<
std
:
:
string
>
&
args
std
:
:
vector
<
char
*
>
*
argv
)
;
class
ScopedMainEntryLogger
{
public
:
ScopedMainEntryLogger
(
)
{
AndroidLog
(
ANDROID_LOG_INFO
"
>
>
ScopedMainEntryLogger
\
n
"
)
;
}
~
ScopedMainEntryLogger
(
)
{
AndroidLog
(
ANDROID_LOG_INFO
"
<
<
ScopedMainEntryLogger
\
n
"
)
;
fflush
(
stdout
)
;
fflush
(
stderr
)
;
}
}
;
}
}
}
namespace
jni_zero
{
template
<
>
inline
std
:
:
string
FromJniType
<
std
:
:
string
>
(
JNIEnv
*
env
const
JavaRef
<
jobject
>
&
input
)
{
return
webrtc
:
:
test
:
:
android
:
:
ASCIIJavaStringToUTF8
(
env
static_cast
<
jstring
>
(
input
.
obj
(
)
)
)
;
}
}
#
endif
