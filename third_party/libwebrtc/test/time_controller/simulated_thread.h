#
ifndef
TEST_TIME_CONTROLLER_SIMULATED_THREAD_H_
#
define
TEST_TIME_CONTROLLER_SIMULATED_THREAD_H_
#
include
<
memory
>
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
test
/
time_controller
/
simulated_time_controller
.
h
"
namespace
webrtc
{
class
SimulatedThread
:
public
rtc
:
:
Thread
public
sim_time_impl
:
:
SimulatedSequenceRunner
{
public
:
using
CurrentThreadSetter
=
CurrentThreadSetter
;
SimulatedThread
(
sim_time_impl
:
:
SimulatedTimeControllerImpl
*
handler
absl
:
:
string_view
name
std
:
:
unique_ptr
<
rtc
:
:
SocketServer
>
socket_server
)
;
~
SimulatedThread
(
)
override
;
void
RunReady
(
Timestamp
at_time
)
override
;
Timestamp
GetNextRunTime
(
)
const
override
{
MutexLock
lock
(
&
lock_
)
;
return
next_run_time_
;
}
TaskQueueBase
*
GetAsTaskQueue
(
)
override
{
return
this
;
}
void
BlockingCallImpl
(
rtc
:
:
FunctionView
<
void
(
)
>
functor
const
Location
&
location
)
override
;
void
PostTaskImpl
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
const
PostTaskTraits
&
traits
const
Location
&
location
)
override
;
void
PostDelayedTaskImpl
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
TimeDelta
delay
const
PostDelayedTaskTraits
&
traits
const
Location
&
location
)
override
;
void
Stop
(
)
override
;
private
:
sim_time_impl
:
:
SimulatedTimeControllerImpl
*
const
handler_
;
char
*
name_
;
mutable
Mutex
lock_
;
Timestamp
next_run_time_
RTC_GUARDED_BY
(
lock_
)
=
Timestamp
:
:
PlusInfinity
(
)
;
}
;
class
SimulatedMainThread
:
public
SimulatedThread
{
public
:
explicit
SimulatedMainThread
(
sim_time_impl
:
:
SimulatedTimeControllerImpl
*
handler
)
;
~
SimulatedMainThread
(
)
;
private
:
CurrentThreadSetter
current_setter_
;
}
;
}
#
endif
