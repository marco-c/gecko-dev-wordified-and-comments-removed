#
ifndef
TEST_TIME_CONTROLLER_EXTERNAL_TIME_CONTROLLER_H_
#
define
TEST_TIME_CONTROLLER_EXTERNAL_TIME_CONTROLLER_H_
#
include
<
functional
>
#
include
<
memory
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
test
/
time_controller
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
modules
/
utility
/
include
/
process_thread
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
time_controller
/
simulated_time_controller
.
h
"
namespace
webrtc
{
class
ExternalTimeController
:
public
TimeController
public
TaskQueueFactory
{
public
:
explicit
ExternalTimeController
(
ControlledAlarmClock
*
alarm
)
;
Clock
*
GetClock
(
)
override
;
TaskQueueFactory
*
GetTaskQueueFactory
(
)
override
;
std
:
:
unique_ptr
<
ProcessThread
>
CreateProcessThread
(
const
char
*
thread_name
)
override
;
void
AdvanceTime
(
TimeDelta
duration
)
override
;
std
:
:
unique_ptr
<
rtc
:
:
Thread
>
CreateThread
(
const
std
:
:
string
&
name
std
:
:
unique_ptr
<
rtc
:
:
SocketServer
>
socket_server
)
override
;
rtc
:
:
Thread
*
GetMainThread
(
)
override
;
std
:
:
unique_ptr
<
TaskQueueBase
TaskQueueDeleter
>
CreateTaskQueue
(
absl
:
:
string_view
name
TaskQueueFactory
:
:
Priority
priority
)
const
override
;
private
:
class
ProcessThreadWrapper
;
class
TaskQueueWrapper
;
void
Run
(
)
;
void
UpdateTime
(
)
;
void
ScheduleNext
(
)
;
ControlledAlarmClock
*
alarm_
;
sim_time_impl
:
:
SimulatedTimeControllerImpl
impl_
;
rtc
:
:
ScopedYieldPolicy
yield_policy_
;
rtc
:
:
ScopedBaseFakeClock
global_clock_
;
}
;
}
#
endif
