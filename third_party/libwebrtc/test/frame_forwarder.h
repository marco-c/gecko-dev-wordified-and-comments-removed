#
ifndef
TEST_FRAME_FORWARDER_H_
#
define
TEST_FRAME_FORWARDER_H_
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
api
/
video
/
video_source_interface
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
namespace
test
{
class
FrameForwarder
:
public
VideoSourceInterface
<
VideoFrame
>
{
public
:
FrameForwarder
(
)
;
~
FrameForwarder
(
)
override
;
virtual
void
IncomingCapturedFrame
(
const
VideoFrame
&
video_frame
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
;
VideoSinkWants
sink_wants
(
)
const
RTC_LOCKS_EXCLUDED
(
mutex_
)
;
bool
has_sinks
(
)
const
RTC_LOCKS_EXCLUDED
(
mutex_
)
;
protected
:
VideoSinkWants
sink_wants_locked
(
)
const
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
void
AddOrUpdateSink
(
VideoSinkInterface
<
VideoFrame
>
*
sink
const
VideoSinkWants
&
wants
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
override
;
void
AddOrUpdateSinkLocked
(
VideoSinkInterface
<
VideoFrame
>
*
sink
const
VideoSinkWants
&
wants
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
void
RemoveSink
(
VideoSinkInterface
<
VideoFrame
>
*
sink
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
override
;
mutable
Mutex
mutex_
;
VideoSinkInterface
<
VideoFrame
>
*
sink_
RTC_GUARDED_BY
(
mutex_
)
;
VideoSinkWants
sink_wants_
RTC_GUARDED_BY
(
mutex_
)
;
}
;
}
}
#
endif
