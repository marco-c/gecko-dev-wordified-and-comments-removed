#
include
"
test
/
logging
/
memory_log_writer
.
h
"
#
include
<
memory
>
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
namespace
webrtc
{
namespace
{
class
MemoryLogWriter
final
:
public
RtcEventLogOutput
{
public
:
explicit
MemoryLogWriter
(
std
:
:
map
<
std
:
:
string
std
:
:
string
>
*
target
std
:
:
string
filename
)
:
target_
(
target
)
filename_
(
filename
)
{
}
~
MemoryLogWriter
(
)
final
{
target_
-
>
insert
(
{
filename_
std
:
:
move
(
buffer_
)
}
)
;
}
bool
IsActive
(
)
const
override
{
return
true
;
}
bool
Write
(
absl
:
:
string_view
value
)
override
{
buffer_
.
append
(
value
.
data
(
)
value
.
size
(
)
)
;
return
true
;
}
void
Flush
(
)
override
{
}
private
:
std
:
:
map
<
std
:
:
string
std
:
:
string
>
*
const
target_
;
const
std
:
:
string
filename_
;
std
:
:
string
buffer_
;
}
;
class
MemoryLogWriterFactory
final
:
public
LogWriterFactoryInterface
{
public
:
explicit
MemoryLogWriterFactory
(
std
:
:
map
<
std
:
:
string
std
:
:
string
>
*
target
)
:
target_
(
target
)
{
}
~
MemoryLogWriterFactory
(
)
override
{
}
std
:
:
unique_ptr
<
RtcEventLogOutput
>
Create
(
std
:
:
string
filename
)
override
{
return
std
:
:
make_unique
<
MemoryLogWriter
>
(
target_
filename
)
;
}
private
:
std
:
:
map
<
std
:
:
string
std
:
:
string
>
*
const
target_
;
}
;
}
MemoryLogStorage
:
:
MemoryLogStorage
(
)
{
}
MemoryLogStorage
:
:
~
MemoryLogStorage
(
)
{
}
std
:
:
unique_ptr
<
LogWriterFactoryInterface
>
MemoryLogStorage
:
:
CreateFactory
(
)
{
return
std
:
:
make_unique
<
MemoryLogWriterFactory
>
(
&
logs_
)
;
}
}
