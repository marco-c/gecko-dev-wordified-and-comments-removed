#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
peer_scenario
/
peer_scenario
.
h
"
#
include
"
test
/
peer_scenario
/
peer_scenario_client
.
h
"
#
include
"
test
/
scenario
/
stats_collection
.
h
"
namespace
webrtc
{
namespace
test
{
#
if
defined
(
WEBRTC_WIN
)
#
define
MAYBE_PsnrIsCollected
DISABLED_PsnrIsCollected
#
else
#
define
MAYBE_PsnrIsCollected
PsnrIsCollected
#
endif
TEST
(
PeerScenarioQualityTest
MAYBE_PsnrIsCollected
)
{
VideoQualityAnalyzer
analyzer
;
{
PeerScenario
s
(
*
test_info_
)
;
auto
caller
=
s
.
CreateClient
(
PeerScenarioClient
:
:
Config
(
)
)
;
auto
callee
=
s
.
CreateClient
(
PeerScenarioClient
:
:
Config
(
)
)
;
PeerScenarioClient
:
:
VideoSendTrackConfig
video_conf
;
video_conf
.
generator
.
squares_video
-
>
framerate
=
20
;
auto
video
=
caller
-
>
CreateVideo
(
"
VIDEO
"
video_conf
)
;
auto
link_builder
=
s
.
net
(
)
-
>
NodeBuilder
(
)
.
delay_ms
(
100
)
.
capacity_kbps
(
600
)
;
s
.
AttachVideoQualityAnalyzer
(
&
analyzer
video
.
track
.
get
(
)
callee
)
;
s
.
SimpleConnection
(
caller
callee
{
link_builder
.
Build
(
)
.
node
}
{
link_builder
.
Build
(
)
.
node
}
)
;
s
.
ProcessMessages
(
TimeDelta
:
:
Seconds
(
2
)
)
;
}
EXPECT_GT
(
analyzer
.
stats
(
)
.
render
.
count
10
)
;
EXPECT_GT
(
analyzer
.
stats
(
)
.
psnr_with_freeze
.
Mean
(
)
20
)
;
}
}
}
