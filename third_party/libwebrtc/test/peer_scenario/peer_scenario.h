#
ifndef
TEST_PEER_SCENARIO_PEER_SCENARIO_H_
#
define
TEST_PEER_SCENARIO_PEER_SCENARIO_H_
#
include
<
atomic
>
#
include
<
list
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
test
/
network_emulation_manager
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
logging
/
log_writer
.
h
"
#
include
"
test
/
network
/
network_emulation
.
h
"
#
include
"
test
/
network
/
network_emulation_manager
.
h
"
#
include
"
test
/
peer_scenario
/
peer_scenario_client
.
h
"
#
include
"
test
/
peer_scenario
/
signaling_route
.
h
"
#
include
"
test
/
scenario
/
stats_collection
.
h
"
#
include
"
test
/
scenario
/
video_frame_matcher
.
h
"
namespace
webrtc
{
namespace
test
{
class
PeerScenario
{
public
:
explicit
PeerScenario
(
const
testing
:
:
TestInfo
&
test_info
TimeMode
mode
=
TimeMode
:
:
kSimulated
)
;
explicit
PeerScenario
(
std
:
:
string
file_name
TimeMode
mode
=
TimeMode
:
:
kSimulated
)
;
explicit
PeerScenario
(
std
:
:
unique_ptr
<
LogWriterFactoryInterface
>
log_writer_manager
TimeMode
mode
=
TimeMode
:
:
kSimulated
)
;
NetworkEmulationManagerImpl
*
net
(
)
{
return
&
net_
;
}
PeerScenarioClient
*
CreateClient
(
PeerScenarioClient
:
:
Config
config
)
;
PeerScenarioClient
*
CreateClient
(
std
:
:
string
name
PeerScenarioClient
:
:
Config
config
)
;
SignalingRoute
ConnectSignaling
(
PeerScenarioClient
*
caller
PeerScenarioClient
*
callee
std
:
:
vector
<
EmulatedNetworkNode
*
>
send_link
std
:
:
vector
<
EmulatedNetworkNode
*
>
ret_link
)
;
void
SimpleConnection
(
PeerScenarioClient
*
caller
PeerScenarioClient
*
callee
std
:
:
vector
<
EmulatedNetworkNode
*
>
send_link
std
:
:
vector
<
EmulatedNetworkNode
*
>
ret_link
)
;
void
AttachVideoQualityAnalyzer
(
VideoQualityAnalyzer
*
analyzer
VideoTrackInterface
*
send_track
PeerScenarioClient
*
receiver
)
;
bool
WaitAndProcess
(
std
:
:
atomic
<
bool
>
*
event
TimeDelta
max_duration
=
TimeDelta
:
:
Seconds
(
5
)
)
;
void
ProcessMessages
(
TimeDelta
duration
)
;
private
:
struct
PeerVideoQualityPair
{
public
:
PeerVideoQualityPair
(
Clock
*
capture_clock
VideoQualityAnalyzer
*
analyzer
)
:
matcher_
(
{
analyzer
-
>
Handler
(
)
}
)
capture_tap_
(
capture_clock
&
matcher_
)
decode_tap_
(
capture_clock
&
matcher_
0
)
{
}
VideoFrameMatcher
matcher_
;
CapturedFrameTap
capture_tap_
;
DecodedFrameTap
decode_tap_
;
}
;
Clock
*
clock
(
)
{
return
Clock
:
:
GetRealTimeClock
(
)
;
}
std
:
:
unique_ptr
<
LogWriterFactoryInterface
>
GetLogWriterFactory
(
std
:
:
string
name
)
;
const
std
:
:
unique_ptr
<
LogWriterFactoryInterface
>
log_writer_manager_
;
NetworkEmulationManagerImpl
net_
;
Thread
*
const
signaling_thread_
;
std
:
:
list
<
PeerVideoQualityPair
>
video_quality_pairs_
;
std
:
:
list
<
PeerScenarioClient
>
peer_clients_
;
}
;
}
}
#
endif
