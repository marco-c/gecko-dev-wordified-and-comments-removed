#
ifndef
TEST_PEER_SCENARIO_SIGNALING_ROUTE_H_
#
define
TEST_PEER_SCENARIO_SIGNALING_ROUTE_H_
#
include
<
string
>
#
include
<
utility
>
#
include
"
test
/
network
/
network_emulation_manager
.
h
"
#
include
"
test
/
peer_scenario
/
peer_scenario_client
.
h
"
namespace
webrtc
{
namespace
test
{
class
SignalingRoute
{
public
:
SignalingRoute
(
PeerScenarioClient
*
caller
PeerScenarioClient
*
callee
TrafficRoute
*
send_route
TrafficRoute
*
ret_route
)
;
void
StartIceSignaling
(
)
;
void
NegotiateSdp
(
std
:
:
function
<
void
(
SessionDescriptionInterface
*
offer
)
>
munge_offer
std
:
:
function
<
void
(
SessionDescriptionInterface
*
offer
)
>
modify_offer
std
:
:
function
<
void
(
const
SessionDescriptionInterface
&
answer
)
>
exchange_finished
)
;
void
NegotiateSdp
(
std
:
:
function
<
void
(
SessionDescriptionInterface
*
offer
)
>
modify_offer
std
:
:
function
<
void
(
const
SessionDescriptionInterface
&
answer
)
>
exchange_finished
)
;
void
NegotiateSdp
(
std
:
:
function
<
void
(
const
SessionDescriptionInterface
&
answer
)
>
exchange_finished
)
;
SignalingRoute
reverse
(
)
{
return
SignalingRoute
(
callee_
caller_
ret_route_
send_route_
)
;
}
private
:
PeerScenarioClient
*
const
caller_
;
PeerScenarioClient
*
const
callee_
;
TrafficRoute
*
const
send_route_
;
TrafficRoute
*
const
ret_route_
;
}
;
}
}
#
endif
