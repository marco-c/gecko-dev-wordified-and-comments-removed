#
import
<
Cocoa
/
Cocoa
.
h
>
#
include
"
test
/
run_test
.
h
"
typedef
void
(
^
TestBlock
)
(
)
;
TestBlock
functionToBlock
(
void
(
*
function
)
(
)
)
{
return
[
^
(
void
)
{
function
(
)
;
}
copy
]
;
}
interface
TestRunner
:
NSObject
{
BOOL
running_
;
}
-
(
void
)
runAllTests
:
(
TestBlock
)
ignored
;
-
(
BOOL
)
running
;
end
implementation
TestRunner
-
(
id
)
init
{
self
=
[
super
init
]
;
if
(
self
)
{
running_
=
YES
;
}
return
self
;
}
-
(
void
)
runAllTests
:
(
TestBlock
)
testBlock
{
autoreleasepool
{
testBlock
(
)
;
running_
=
NO
;
}
}
-
(
BOOL
)
running
{
return
running_
;
}
end
namespace
webrtc
{
namespace
test
{
void
RunTest
(
void
(
*
test
)
(
)
)
{
autoreleasepool
{
[
NSApplication
sharedApplication
]
;
TestRunner
*
testRunner
=
[
[
TestRunner
alloc
]
init
]
;
TestBlock
testBlock
=
functionToBlock
(
test
)
;
[
NSThread
detachNewThreadSelector
:
selector
(
runAllTests
:
)
toTarget
:
testRunner
withObject
:
testBlock
]
;
NSRunLoop
*
runLoop
=
[
NSRunLoop
currentRunLoop
]
;
while
(
[
testRunner
running
]
&
&
[
runLoop
runMode
:
NSDefaultRunLoopMode
beforeDate
:
[
NSDate
dateWithTimeIntervalSinceNow
:
0
.
1
]
]
)
;
}
}
}
}
