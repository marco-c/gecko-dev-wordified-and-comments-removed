#
ifndef
TEST_TESTSUPPORT_PERF_TEST_H_
#
define
TEST_TESTSUPPORT_PERF_TEST_H_
#
include
<
sstream
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
numerics
/
samples_stats_counter
.
h
"
namespace
webrtc
{
namespace
test
{
enum
class
ImproveDirection
{
kNone
kSmallerIsBetter
kBiggerIsBetter
}
;
void
PrintResult
(
const
std
:
:
string
&
measurement
const
std
:
:
string
&
modifier
const
std
:
:
string
&
user_story
const
double
value
const
std
:
:
string
&
units
bool
important
ImproveDirection
improve_direction
=
ImproveDirection
:
:
kNone
)
;
void
PrintResultMeanAndError
(
const
std
:
:
string
&
measurement
const
std
:
:
string
&
modifier
const
std
:
:
string
&
user_story
const
double
mean
const
double
error
const
std
:
:
string
&
units
bool
important
ImproveDirection
improve_direction
=
ImproveDirection
:
:
kNone
)
;
void
PrintResultList
(
const
std
:
:
string
&
measurement
const
std
:
:
string
&
modifier
const
std
:
:
string
&
user_story
rtc
:
:
ArrayView
<
const
double
>
values
const
std
:
:
string
&
units
bool
important
ImproveDirection
improve_direction
=
ImproveDirection
:
:
kNone
)
;
void
PrintResult
(
const
std
:
:
string
&
measurement
const
std
:
:
string
&
modifier
const
std
:
:
string
&
user_story
const
SamplesStatsCounter
&
counter
const
std
:
:
string
&
units
const
bool
important
ImproveDirection
improve_direction
=
ImproveDirection
:
:
kNone
)
;
std
:
:
string
GetPerfResults
(
)
;
void
PrintPlottableResults
(
const
std
:
:
vector
<
std
:
:
string
>
&
desired_graphs
)
;
bool
WritePerfResults
(
const
std
:
:
string
&
output_path
)
;
void
SetPerfResultsOutput
(
FILE
*
output
)
;
void
ClearPerfResults
(
)
;
}
}
#
endif
