#
include
"
test
/
testsupport
/
fixed_fps_video_frame_writer_adapter
.
h
"
#
include
<
cmath
>
#
include
<
utility
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
testsupport
/
video_frame_writer
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
{
constexpr
TimeDelta
kOneSecond
=
TimeDelta
:
:
Seconds
(
1
)
;
}
FixedFpsVideoFrameWriterAdapter
:
:
FixedFpsVideoFrameWriterAdapter
(
int
fps
Clock
*
clock
std
:
:
unique_ptr
<
VideoFrameWriter
>
delegate
)
:
inter_frame_interval_
(
kOneSecond
/
fps
)
clock_
(
clock
)
delegate_
(
std
:
:
move
(
delegate
)
)
{
}
FixedFpsVideoFrameWriterAdapter
:
:
~
FixedFpsVideoFrameWriterAdapter
(
)
{
Close
(
)
;
}
void
FixedFpsVideoFrameWriterAdapter
:
:
Close
(
)
{
if
(
is_closed_
)
{
return
;
}
is_closed_
=
true
;
if
(
!
last_frame_
.
has_value
(
)
)
{
return
;
}
Timestamp
now
=
Now
(
)
;
RTC_CHECK
(
WriteMissedSlotsExceptLast
(
now
)
)
;
RTC_CHECK
(
delegate_
-
>
WriteFrame
(
*
last_frame_
)
)
;
delegate_
-
>
Close
(
)
;
}
bool
FixedFpsVideoFrameWriterAdapter
:
:
WriteFrame
(
const
VideoFrame
&
frame
)
{
RTC_CHECK
(
!
is_closed_
)
;
Timestamp
now
=
Now
(
)
;
if
(
!
last_frame_
.
has_value
(
)
)
{
RTC_CHECK
(
!
last_frame_time_
.
IsFinite
(
)
)
;
last_frame_
=
frame
;
last_frame_time_
=
now
;
return
true
;
}
RTC_CHECK
(
last_frame_time_
.
IsFinite
(
)
)
;
if
(
last_frame_time_
>
now
)
{
RTC_CHECK_LE
(
last_frame_time_
-
now
inter_frame_interval_
/
2
)
;
last_frame_
=
frame
;
return
true
;
}
if
(
!
WriteMissedSlotsExceptLast
(
now
)
)
{
return
false
;
}
if
(
now
-
last_frame_time_
<
inter_frame_interval_
/
2
)
{
last_frame_
=
frame
;
return
true
;
}
if
(
!
delegate_
-
>
WriteFrame
(
*
last_frame_
)
)
{
return
false
;
}
last_frame_
=
frame
;
last_frame_time_
=
last_frame_time_
+
inter_frame_interval_
;
return
true
;
}
bool
FixedFpsVideoFrameWriterAdapter
:
:
WriteMissedSlotsExceptLast
(
Timestamp
now
)
{
RTC_CHECK
(
last_frame_time_
.
IsFinite
(
)
)
;
while
(
now
-
last_frame_time_
>
inter_frame_interval_
)
{
if
(
!
delegate_
-
>
WriteFrame
(
*
last_frame_
)
)
{
return
false
;
}
last_frame_time_
=
last_frame_time_
+
inter_frame_interval_
;
}
return
true
;
}
Timestamp
FixedFpsVideoFrameWriterAdapter
:
:
Now
(
)
const
{
return
clock_
-
>
CurrentTime
(
)
;
}
}
}
