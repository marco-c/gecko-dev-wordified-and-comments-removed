#
ifndef
TEST_TESTSUPPORT_FRAME_READER_H_
#
define
TEST_TESTSUPPORT_FRAME_READER_H_
#
include
<
stdio
.
h
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video
/
i420_buffer
.
h
"
#
include
"
api
/
video
/
resolution
.
h
"
namespace
webrtc
{
namespace
test
{
class
FrameReader
{
public
:
struct
Ratio
{
int
num
=
1
;
int
den
=
1
;
}
;
static
constexpr
Ratio
kNoScale
=
Ratio
(
{
.
num
=
1
.
den
=
1
}
)
;
virtual
~
FrameReader
(
)
{
}
virtual
rtc
:
:
scoped_refptr
<
I420Buffer
>
PullFrame
(
)
=
0
;
virtual
rtc
:
:
scoped_refptr
<
I420Buffer
>
PullFrame
(
int
*
frame_num
)
=
0
;
virtual
rtc
:
:
scoped_refptr
<
I420Buffer
>
ReadFrame
(
int
frame_num
)
=
0
;
virtual
rtc
:
:
scoped_refptr
<
I420Buffer
>
PullFrame
(
int
*
frame_num
Resolution
resolution
Ratio
framerate_scale
)
=
0
;
virtual
rtc
:
:
scoped_refptr
<
I420Buffer
>
ReadFrame
(
int
frame_num
Resolution
resolution
)
=
0
;
virtual
int
num_frames
(
)
const
=
0
;
}
;
class
YuvFrameReaderImpl
:
public
FrameReader
{
public
:
enum
class
RepeatMode
{
kSingle
kRepeat
kPingPong
}
;
YuvFrameReaderImpl
(
std
:
:
string
filepath
Resolution
resolution
RepeatMode
repeat_mode
)
;
~
YuvFrameReaderImpl
(
)
override
;
virtual
void
Init
(
)
;
rtc
:
:
scoped_refptr
<
I420Buffer
>
PullFrame
(
)
override
;
rtc
:
:
scoped_refptr
<
I420Buffer
>
PullFrame
(
int
*
frame_num
)
override
;
rtc
:
:
scoped_refptr
<
I420Buffer
>
PullFrame
(
int
*
frame_num
Resolution
resolution
Ratio
framerate_scale
)
override
;
rtc
:
:
scoped_refptr
<
I420Buffer
>
ReadFrame
(
int
frame_num
)
override
;
rtc
:
:
scoped_refptr
<
I420Buffer
>
ReadFrame
(
int
frame_num
Resolution
resolution
)
override
;
int
num_frames
(
)
const
override
{
return
num_frames_
;
}
protected
:
class
RateScaler
{
public
:
int
Skip
(
Ratio
framerate_scale
)
;
private
:
std
:
:
optional
<
int
>
ticks_
;
}
;
const
std
:
:
string
filepath_
;
Resolution
resolution_
;
const
RepeatMode
repeat_mode_
;
int
num_frames_
;
int
frame_num_
;
int
frame_size_bytes_
;
int
header_size_bytes_
;
FILE
*
file_
;
RateScaler
framerate_scaler_
;
}
;
class
Y4mFrameReaderImpl
:
public
YuvFrameReaderImpl
{
public
:
Y4mFrameReaderImpl
(
std
:
:
string
filepath
RepeatMode
repeat_mode
)
;
void
Init
(
)
override
;
}
;
std
:
:
unique_ptr
<
FrameReader
>
CreateYuvFrameReader
(
std
:
:
string
filepath
Resolution
resolution
)
;
std
:
:
unique_ptr
<
FrameReader
>
CreateYuvFrameReader
(
std
:
:
string
filepath
Resolution
resolution
YuvFrameReaderImpl
:
:
RepeatMode
repeat_mode
)
;
std
:
:
unique_ptr
<
FrameReader
>
CreateY4mFrameReader
(
std
:
:
string
filepath
)
;
std
:
:
unique_ptr
<
FrameReader
>
CreateY4mFrameReader
(
std
:
:
string
filepath
YuvFrameReaderImpl
:
:
RepeatMode
repeat_mode
)
;
}
}
#
endif
