#
ifndef
TEST_TESTSUPPORT_FRAME_READER_H_
#
define
TEST_TESTSUPPORT_FRAME_READER_H_
#
include
<
stdio
.
h
>
#
include
<
string
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
namespace
webrtc
{
class
I420Buffer
;
namespace
test
{
class
FrameReader
{
public
:
virtual
~
FrameReader
(
)
{
}
virtual
bool
Init
(
)
=
0
;
virtual
rtc
:
:
scoped_refptr
<
I420Buffer
>
ReadFrame
(
)
=
0
;
virtual
void
Close
(
)
=
0
;
virtual
size_t
FrameLength
(
)
=
0
;
virtual
int
NumberOfFrames
(
)
=
0
;
}
;
class
YuvFrameReaderImpl
:
public
FrameReader
{
public
:
enum
class
RepeatMode
{
kSingle
kRepeat
kPingPong
}
;
class
DropperUtil
{
public
:
DropperUtil
(
int
source_fps
int
target_fps
)
;
enum
class
DropDecision
{
kDropframe
kKeepFrame
}
;
DropDecision
UpdateLevel
(
)
;
private
:
const
double
frame_size_buckets_
;
double
bucket_level_
;
}
;
YuvFrameReaderImpl
(
std
:
:
string
input_filename
int
width
int
height
)
;
YuvFrameReaderImpl
(
std
:
:
string
input_filename
int
input_width
int
input_height
int
desired_width
int
desired_height
RepeatMode
repeat_mode
absl
:
:
optional
<
int
>
clip_fps
int
target_fps
)
;
~
YuvFrameReaderImpl
(
)
override
;
bool
Init
(
)
override
;
rtc
:
:
scoped_refptr
<
I420Buffer
>
ReadFrame
(
)
override
;
void
Close
(
)
override
;
size_t
FrameLength
(
)
override
;
int
NumberOfFrames
(
)
override
;
protected
:
const
std
:
:
string
input_filename_
;
size_t
frame_length_in_bytes_
;
const
int
input_width_
;
const
int
input_height_
;
const
int
desired_width_
;
const
int
desired_height_
;
const
size_t
frame_size_bytes_
;
const
RepeatMode
repeat_mode_
;
int
number_of_frames_
;
int
current_frame_index_
;
std
:
:
unique_ptr
<
DropperUtil
>
dropper_
;
FILE
*
input_file_
;
}
;
class
Y4mFrameReaderImpl
:
public
YuvFrameReaderImpl
{
public
:
Y4mFrameReaderImpl
(
std
:
:
string
input_filename
int
width
int
height
)
;
~
Y4mFrameReaderImpl
(
)
override
;
bool
Init
(
)
override
;
rtc
:
:
scoped_refptr
<
I420Buffer
>
ReadFrame
(
)
override
;
private
:
uint8_t
*
buffer_
;
}
;
}
}
#
endif
