#
ifndef
TEST_TESTSUPPORT_FRAME_WRITER_H_
#
define
TEST_TESTSUPPORT_FRAME_WRITER_H_
#
include
<
stdio
.
h
>
#
include
<
string
>
#
include
"
api
/
video
/
video_frame
.
h
"
namespace
webrtc
{
namespace
test
{
class
FrameWriter
{
public
:
virtual
~
FrameWriter
(
)
{
}
virtual
bool
Init
(
)
=
0
;
virtual
bool
WriteFrame
(
const
uint8_t
*
frame_buffer
)
=
0
;
virtual
void
Close
(
)
=
0
;
virtual
size_t
FrameLength
(
)
=
0
;
}
;
class
YuvFrameWriterImpl
:
public
FrameWriter
{
public
:
YuvFrameWriterImpl
(
std
:
:
string
output_filename
int
width
int
height
)
;
~
YuvFrameWriterImpl
(
)
override
;
bool
Init
(
)
override
;
bool
WriteFrame
(
const
uint8_t
*
frame_buffer
)
override
;
void
Close
(
)
override
;
size_t
FrameLength
(
)
override
;
protected
:
const
std
:
:
string
output_filename_
;
size_t
frame_length_in_bytes_
;
const
int
width_
;
const
int
height_
;
FILE
*
output_file_
;
}
;
class
Y4mFrameWriterImpl
:
public
YuvFrameWriterImpl
{
public
:
Y4mFrameWriterImpl
(
std
:
:
string
output_filename
int
width
int
height
int
frame_rate
)
;
~
Y4mFrameWriterImpl
(
)
override
;
bool
Init
(
)
override
;
bool
WriteFrame
(
const
uint8_t
*
frame_buffer
)
override
;
private
:
const
int
frame_rate_
;
}
;
class
JpegFrameWriter
{
public
:
JpegFrameWriter
(
const
std
:
:
string
&
output_filename
)
;
bool
WriteFrame
(
const
VideoFrame
&
input_frame
int
quality
)
;
#
if
!
defined
(
WEBRTC_IOS
)
private
:
bool
frame_written_
;
const
std
:
:
string
output_filename_
;
FILE
*
output_file_
;
#
endif
}
;
}
}
#
endif
