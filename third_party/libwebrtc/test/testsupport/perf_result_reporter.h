#
ifndef
TEST_TESTSUPPORT_PERF_RESULT_REPORTER_H_
#
define
TEST_TESTSUPPORT_PERF_RESULT_REPORTER_H_
#
include
<
string
>
#
include
<
unordered_map
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
test
/
testsupport
/
perf_test
.
h
"
namespace
webrtc
{
namespace
test
{
enum
class
Unit
{
kMs
kMsBestFitFormat
kMsTs
kNPercent
kSizeInBytes
kBytesPerSecond
kHertz
kUnitless
kCount
kSigma
}
;
struct
MetricInfo
{
Unit
unit
;
ImproveDirection
improve_direction
;
}
;
class
PerfResultReporter
{
public
:
PerfResultReporter
(
const
std
:
:
string
&
metric_basename
const
std
:
:
string
&
story_name
)
;
~
PerfResultReporter
(
)
;
void
RegisterMetric
(
const
std
:
:
string
&
metric_suffix
Unit
unit
)
;
void
RegisterMetric
(
const
std
:
:
string
&
metric_suffix
Unit
unit
ImproveDirection
improve_direction
)
;
void
AddResult
(
const
std
:
:
string
&
metric_suffix
size_t
value
)
const
;
void
AddResult
(
const
std
:
:
string
&
metric_suffix
double
value
)
const
;
void
AddResultList
(
const
std
:
:
string
&
metric_suffix
rtc
:
:
ArrayView
<
const
double
>
values
)
const
;
void
AddResultMeanAndError
(
const
std
:
:
string
&
metric_suffix
const
double
mean
const
double
error
)
;
absl
:
:
optional
<
MetricInfo
>
GetMetricInfo
(
const
std
:
:
string
&
metric_suffix
)
const
;
private
:
MetricInfo
GetMetricInfoOrFail
(
const
std
:
:
string
&
metric_suffix
)
const
;
std
:
:
string
metric_basename_
;
std
:
:
string
story_name_
;
std
:
:
unordered_map
<
std
:
:
string
MetricInfo
>
metric_map_
;
}
;
}
}
#
endif
