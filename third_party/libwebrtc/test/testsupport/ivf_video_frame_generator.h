#
ifndef
TEST_TESTSUPPORT_IVF_VIDEO_FRAME_GENERATOR_H_
#
define
TEST_TESTSUPPORT_IVF_VIDEO_FRAME_GENERATOR_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
test
/
frame_generator_interface
.
h
"
#
include
"
api
/
video
/
video_codec_type
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
modules
/
video_coding
/
utility
/
ivf_file_reader
.
h
"
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
namespace
webrtc
{
namespace
test
{
class
IvfVideoFrameGenerator
:
public
FrameGeneratorInterface
{
public
:
explicit
IvfVideoFrameGenerator
(
const
std
:
:
string
&
file_name
)
;
~
IvfVideoFrameGenerator
(
)
override
;
VideoFrameData
NextFrame
(
)
override
;
void
ChangeResolution
(
size_t
width
size_t
height
)
override
;
Resolution
GetResolution
(
)
const
override
;
private
:
class
DecodedCallback
:
public
DecodedImageCallback
{
public
:
explicit
DecodedCallback
(
IvfVideoFrameGenerator
*
reader
)
:
reader_
(
reader
)
{
}
int32_t
Decoded
(
VideoFrame
&
decoded_image
)
override
;
int32_t
Decoded
(
VideoFrame
&
decoded_image
int64_t
decode_time_ms
)
override
;
void
Decoded
(
VideoFrame
&
decoded_image
absl
:
:
optional
<
int32_t
>
decode_time_ms
absl
:
:
optional
<
uint8_t
>
qp
)
override
;
private
:
IvfVideoFrameGenerator
*
const
reader_
;
}
;
void
OnFrameDecoded
(
const
VideoFrame
&
decoded_frame
)
;
static
std
:
:
unique_ptr
<
VideoDecoder
>
CreateVideoDecoder
(
VideoCodecType
codec_type
)
;
DecodedCallback
callback_
;
std
:
:
unique_ptr
<
IvfFileReader
>
file_reader_
;
std
:
:
unique_ptr
<
VideoDecoder
>
video_decoder_
;
size_t
width_
;
size_t
height_
;
Mutex
lock_
;
Mutex
frame_decode_lock_
;
rtc
:
:
Event
next_frame_decoded_
;
absl
:
:
optional
<
VideoFrame
>
next_frame_
RTC_GUARDED_BY
(
frame_decode_lock_
)
;
}
;
}
}
#
endif
