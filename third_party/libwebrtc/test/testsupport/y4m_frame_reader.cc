#
include
<
stdio
.
h
>
#
include
<
string
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video
/
i420_buffer
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
#
include
"
test
/
testsupport
/
file_utils
.
h
"
#
include
"
test
/
testsupport
/
frame_reader
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
{
const
size_t
kFileHeaderMaxSize
=
38
;
const
size_t
kFileHeaderMinSize
=
26
;
const
size_t
kFrameHeaderSize
=
6
;
std
:
:
string
GetExpectedHeaderPrefix
(
int
width
int
height
)
{
rtc
:
:
StringBuilder
out
;
out
<
<
"
YUV4MPEG2
W
"
<
<
width
<
<
"
H
"
<
<
height
<
<
"
F
"
;
return
out
.
str
(
)
;
}
}
Y4mFrameReaderImpl
:
:
Y4mFrameReaderImpl
(
std
:
:
string
input_filename
int
width
int
height
)
:
YuvFrameReaderImpl
(
input_filename
width
height
)
{
frame_length_in_bytes_
+
=
kFrameHeaderSize
;
buffer_
=
new
char
[
kFileHeaderMaxSize
]
;
}
Y4mFrameReaderImpl
:
:
~
Y4mFrameReaderImpl
(
)
{
delete
[
]
buffer_
;
}
bool
Y4mFrameReaderImpl
:
:
Init
(
)
{
if
(
input_width_
<
=
0
|
|
input_height_
<
=
0
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Frame
width
and
height
must
be
positive
.
Was
:
"
<
<
input_width_
<
<
"
x
"
<
<
input_height_
;
return
false
;
}
input_file_
=
fopen
(
input_filename_
.
c_str
(
)
"
rb
"
)
;
if
(
input_file_
=
=
nullptr
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Couldn
'
t
open
input
file
:
"
<
<
input_filename_
;
return
false
;
}
size_t
source_file_size
=
GetFileSize
(
input_filename_
)
;
if
(
source_file_size
<
=
0u
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Input
file
"
<
<
input_filename_
<
<
"
is
empty
.
"
;
return
false
;
}
char
*
c_file_header
=
fgets
(
buffer_
kFileHeaderMaxSize
input_file_
)
;
std
:
:
string
file_header
(
c_file_header
)
;
if
(
file_header
.
size
(
)
<
kFileHeaderMinSize
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Couldn
'
t
read
Y4M
header
from
input
file
:
"
<
<
input_filename_
;
return
false
;
}
if
(
file_header
.
find
(
GetExpectedHeaderPrefix
(
input_width_
input_height_
)
)
!
=
0
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Couldn
'
t
read
Y4M
file
:
"
<
<
input_filename_
<
<
"
.
Input
file
has
different
resolution
expected
:
"
<
<
GetExpectedHeaderPrefix
(
input_width_
input_height_
)
<
<
"
[
0
-
9
]
?
:
1
C420
;
got
:
"
<
<
file_header
;
return
false
;
}
number_of_frames_
=
static_cast
<
int
>
(
(
source_file_size
-
file_header
.
size
(
)
)
/
frame_length_in_bytes_
)
;
if
(
number_of_frames_
=
=
0
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Input
file
"
<
<
input_filename_
<
<
"
is
too
small
.
"
;
}
return
true
;
}
rtc
:
:
scoped_refptr
<
I420Buffer
>
Y4mFrameReaderImpl
:
:
ReadFrame
(
)
{
if
(
input_file_
=
=
nullptr
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Y4mFrameReaderImpl
is
not
initialized
.
"
;
return
nullptr
;
}
if
(
fread
(
buffer_
1
kFrameHeaderSize
input_file_
)
<
kFrameHeaderSize
&
&
ferror
(
input_file_
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Couldn
'
t
read
frame
header
from
input
file
:
"
<
<
input_filename_
;
return
nullptr
;
}
return
YuvFrameReaderImpl
:
:
ReadFrame
(
)
;
}
}
}
