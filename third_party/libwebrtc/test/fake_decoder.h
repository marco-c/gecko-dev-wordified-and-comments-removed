#
ifndef
TEST_FAKE_DECODER_H_
#
define
TEST_FAKE_DECODER_H_
#
include
<
stdint
.
h
>
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
video
/
encoded_image
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
#
include
"
rtc_base
/
task_queue
.
h
"
namespace
webrtc
{
namespace
test
{
class
FakeDecoder
:
public
VideoDecoder
{
public
:
enum
{
kDefaultWidth
=
320
kDefaultHeight
=
180
}
;
FakeDecoder
(
)
;
explicit
FakeDecoder
(
TaskQueueFactory
*
task_queue_factory
)
;
virtual
~
FakeDecoder
(
)
{
}
bool
Configure
(
const
Settings
&
settings
)
override
;
int32_t
Decode
(
const
EncodedImage
&
input
bool
missing_frames
int64_t
render_time_ms
)
override
;
int32_t
RegisterDecodeCompleteCallback
(
DecodedImageCallback
*
callback
)
override
;
int32_t
Release
(
)
override
;
DecoderInfo
GetDecoderInfo
(
)
const
override
;
const
char
*
ImplementationName
(
)
const
override
;
static
const
char
*
kImplementationName
;
void
SetDelayedDecoding
(
int
decode_delay_ms
)
;
private
:
DecodedImageCallback
*
callback_
;
int
width_
;
int
height_
;
std
:
:
unique_ptr
<
rtc
:
:
TaskQueue
>
task_queue_
;
TaskQueueFactory
*
task_queue_factory_
;
int
decode_delay_ms_
;
}
;
class
FakeH264Decoder
:
public
FakeDecoder
{
public
:
virtual
~
FakeH264Decoder
(
)
{
}
int32_t
Decode
(
const
EncodedImage
&
input
bool
missing_frames
int64_t
render_time_ms
)
override
;
}
;
}
}
#
endif
