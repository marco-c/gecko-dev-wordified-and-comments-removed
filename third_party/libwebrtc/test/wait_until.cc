#
include
"
test
/
wait_until
.
h
"
#
include
<
variant
>
#
include
"
absl
/
functional
/
overload
.
h
"
#
include
"
api
/
test
/
time_controller
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
namespace
wait_until_internal
{
Timestamp
GetTimeFromClockVariant
(
const
ClockVariant
&
clock
)
{
return
std
:
:
visit
(
absl
:
:
Overload
{
[
]
(
const
std
:
:
monostate
&
)
{
return
Timestamp
:
:
Micros
(
rtc
:
:
TimeMicros
(
)
)
;
}
[
]
(
SimulatedClock
*
clock
)
{
return
clock
-
>
CurrentTime
(
)
;
}
[
]
(
TimeController
*
time_controller
)
{
return
time_controller
-
>
GetClock
(
)
-
>
CurrentTime
(
)
;
}
[
]
(
auto
*
clock
)
{
return
Timestamp
:
:
Micros
(
clock
-
>
TimeNanos
(
)
/
1000
)
;
}
}
clock
)
;
}
void
AdvanceTimeOnClockVariant
(
ClockVariant
&
clock
TimeDelta
delta
)
{
std
:
:
visit
(
absl
:
:
Overload
{
[
&
]
(
const
std
:
:
monostate
&
)
{
rtc
:
:
Thread
:
:
Current
(
)
-
>
ProcessMessages
(
0
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
SleepMs
(
delta
.
ms
(
)
)
;
}
[
&
]
(
auto
*
clock
)
{
clock
-
>
AdvanceTime
(
delta
)
;
}
}
clock
)
;
}
}
}
