#
include
<
memory
>
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
environment
/
environment_factory
.
h
"
#
include
"
modules
/
include
/
module_common_types_public
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
byte_io
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
fec_test_helper
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
ulpfec_generator
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
namespace
{
constexpr
uint8_t
kFecPayloadType
=
96
;
constexpr
uint8_t
kRedPayloadType
=
97
;
}
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
static
const
Environment
*
const
env
=
new
Environment
(
CreateEnvironment
(
std
:
:
make_unique
<
SimulatedClock
>
(
1
)
)
)
;
UlpfecGenerator
generator
(
*
env
kRedPayloadType
kFecPayloadType
)
;
size_t
i
=
0
;
if
(
size
<
4
)
return
;
FecProtectionParams
params
=
{
data
[
i
+
+
]
%
128
static_cast
<
int
>
(
data
[
i
+
+
]
%
10
)
kFecMaskBursty
}
;
generator
.
SetProtectionParameters
(
params
params
)
;
uint16_t
seq_num
=
data
[
i
+
+
]
;
uint16_t
prev_seq_num
=
0
;
while
(
i
+
3
<
size
)
{
size_t
rtp_header_length
=
data
[
i
+
+
]
%
10
+
12
;
size_t
payload_size
=
data
[
i
+
+
]
%
10
;
if
(
i
+
payload_size
+
rtp_header_length
+
2
>
size
)
break
;
rtc
:
:
CopyOnWriteBuffer
packet
(
&
data
[
i
]
payload_size
+
rtp_header_length
)
;
packet
.
EnsureCapacity
(
IP_PACKET_SIZE
)
;
ByteWriter
<
uint8_t
>
:
:
WriteBigEndian
(
packet
.
MutableData
(
)
2
<
<
6
)
;
ByteWriter
<
uint16_t
>
:
:
WriteBigEndian
(
packet
.
MutableData
(
)
+
2
seq_num
+
+
)
;
i
+
=
payload_size
+
rtp_header_length
;
const
bool
protect
=
data
[
i
+
+
]
%
2
=
=
1
;
if
(
protect
&
&
IsNewerSequenceNumber
(
seq_num
prev_seq_num
)
&
&
seq_num
<
prev_seq_num
+
kUlpfecMaxMediaPackets
)
{
RtpPacketToSend
rtp_packet
(
nullptr
)
;
RTC_CHECK
(
rtp_packet
.
Parse
(
packet
)
)
;
generator
.
AddPacketAndGenerateFec
(
rtp_packet
)
;
prev_seq_num
=
seq_num
;
}
generator
.
GetFecPackets
(
)
;
}
}
}
