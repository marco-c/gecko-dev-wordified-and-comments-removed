#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
audio_codecs
/
opus
/
audio_decoder_multi_channel_opus
.
h
"
#
include
"
api
/
audio_codecs
/
opus
/
audio_decoder_multi_channel_opus_config
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
fuzzers
/
audio_decoder_fuzzer
.
h
"
namespace
webrtc
{
AudioDecoderMultiChannelOpusConfig
MakeDecoderConfig
(
int
num_channels
int
num_streams
int
coupled_streams
std
:
:
vector
<
unsigned
char
>
channel_mapping
)
{
AudioDecoderMultiChannelOpusConfig
config
;
config
.
num_channels
=
num_channels
;
config
.
num_streams
=
num_streams
;
config
.
coupled_streams
=
coupled_streams
;
config
.
channel_mapping
=
channel_mapping
;
return
config
;
}
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
const
std
:
:
vector
<
AudioDecoderMultiChannelOpusConfig
>
surround_configs
=
{
MakeDecoderConfig
(
1
1
0
{
0
}
)
MakeDecoderConfig
(
2
2
0
{
0
0
}
)
MakeDecoderConfig
(
4
2
2
{
0
1
2
3
}
)
MakeDecoderConfig
(
6
4
2
{
0
4
1
2
3
5
}
)
MakeDecoderConfig
(
8
5
3
{
0
6
1
2
3
4
5
7
}
)
}
;
const
auto
config
=
surround_configs
[
data
[
0
]
%
surround_configs
.
size
(
)
]
;
RTC_CHECK
(
config
.
IsOk
(
)
)
;
std
:
:
unique_ptr
<
AudioDecoder
>
dec
=
AudioDecoderMultiChannelOpus
:
:
MakeAudioDecoder
(
config
)
;
RTC_CHECK
(
dec
)
;
const
int
kSampleRateHz
=
48000
;
const
size_t
kAllocatedOuputSizeSamples
=
4
*
kSampleRateHz
/
10
;
int16_t
output
[
kAllocatedOuputSizeSamples
]
;
FuzzAudioDecoder
(
DecoderFunctionType
:
:
kNormalDecode
data
size
dec
.
get
(
)
kSampleRateHz
sizeof
(
output
)
output
)
;
}
}
