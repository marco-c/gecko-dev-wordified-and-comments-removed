#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
test
/
rtc_error_matchers
.
h
"
#
include
"
pc
/
test
/
integration_test_helpers
.
h
"
#
include
"
test
/
wait_until
.
h
"
namespace
webrtc
{
class
FuzzerTest
:
public
PeerConnectionIntegrationBaseTest
{
public
:
FuzzerTest
(
)
:
PeerConnectionIntegrationBaseTest
(
SdpSemantics
:
:
kUnifiedPlan
)
{
}
void
RunNegotiateCycle
(
absl
:
:
string_view
message
)
{
CreatePeerConnectionWrappers
(
)
;
auto
srd_observer
=
rtc
:
:
make_ref_counted
<
FakeSetRemoteDescriptionObserver
>
(
)
;
SdpParseError
error
;
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
sdp
=
CreateSessionDescription
(
SdpType
:
:
kOffer
std
:
:
string
(
message
)
&
error
)
;
caller
(
)
-
>
pc
(
)
-
>
SetRemoteDescription
(
std
:
:
move
(
sdp
)
srd_observer
)
;
EXPECT_THAT
(
WaitUntil
(
[
&
]
{
return
srd_observer
-
>
called
(
)
;
}
:
:
testing
:
:
IsTrue
(
)
)
IsRtcOk
(
)
)
;
auto
sld_observer
=
rtc
:
:
make_ref_counted
<
FakeSetLocalDescriptionObserver
>
(
)
;
if
(
srd_observer
-
>
error
(
)
.
ok
(
)
)
{
caller
(
)
-
>
pc
(
)
-
>
SetLocalDescription
(
sld_observer
)
;
EXPECT_THAT
(
WaitUntil
(
[
&
]
{
return
sld_observer
-
>
called
(
)
;
}
:
:
testing
:
:
IsTrue
(
)
)
IsRtcOk
(
)
)
;
}
RTC_CHECK
(
!
HasFailure
(
)
)
;
}
void
TestBody
(
)
override
{
}
}
;
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
if
(
size
>
16384
)
{
return
;
}
FuzzerTest
test
;
test
.
RunNegotiateCycle
(
absl
:
:
string_view
(
reinterpret_cast
<
const
char
*
>
(
data
)
size
)
)
;
}
}
