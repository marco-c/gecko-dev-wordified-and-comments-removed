#
include
"
test
/
fuzzers
/
audio_encoder_fuzzer
.
h
"
#
include
<
cstring
>
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
fuzzers
/
fuzz_data_helper
.
h
"
namespace
webrtc
{
void
FuzzAudioEncoder
(
rtc
:
:
ArrayView
<
const
uint8_t
>
data_view
std
:
:
unique_ptr
<
AudioEncoder
>
encoder
)
{
test
:
:
FuzzDataHelper
data
(
data_view
)
;
const
size_t
block_size_samples
=
encoder
-
>
SampleRateHz
(
)
/
100
*
encoder
-
>
NumChannels
(
)
;
const
size_t
block_size_bytes
=
block_size_samples
*
sizeof
(
int16_t
)
;
if
(
data_view
.
size
(
)
/
block_size_bytes
>
1000
)
{
return
;
}
rtc
:
:
BufferT
<
int16_t
>
input_aligned
(
block_size_samples
)
;
rtc
:
:
Buffer
encoded
;
const
size_t
bytes_to_read
=
block_size_bytes
+
sizeof
(
uint32_t
)
;
while
(
data
.
CanReadBytes
(
bytes_to_read
)
)
{
const
uint32_t
timestamp
=
data
.
Read
<
uint32_t
>
(
)
;
auto
byte_array
=
data
.
ReadByteArray
(
block_size_bytes
)
;
RTC_DCHECK_EQ
(
input_aligned
.
size
(
)
*
sizeof
(
int16_t
)
byte_array
.
size
(
)
*
sizeof
(
uint8_t
)
)
;
memcpy
(
input_aligned
.
data
(
)
byte_array
.
data
(
)
byte_array
.
size
(
)
)
;
auto
info
=
encoder
-
>
Encode
(
timestamp
input_aligned
&
encoded
)
;
}
}
}
