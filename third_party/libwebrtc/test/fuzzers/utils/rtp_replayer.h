#
ifndef
TEST_FUZZERS_UTILS_RTP_REPLAYER_H_
#
define
TEST_FUZZERS_UTILS_RTP_REPLAYER_H_
#
include
<
stdio
.
h
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
test
/
video
/
function_video_decoder_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
call
/
call
.
h
"
#
include
"
media
/
engine
/
internal_decoder_factory
.
h
"
#
include
"
rtc_base
/
fake_clock
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
#
include
"
test
/
null_transport
.
h
"
#
include
"
test
/
rtp_file_reader
.
h
"
#
include
"
test
/
test_video_capturer
.
h
"
#
include
"
test
/
video_renderer
.
h
"
namespace
webrtc
{
namespace
test
{
class
RtpReplayer
final
{
public
:
struct
StreamState
{
test
:
:
NullTransport
transport
;
std
:
:
vector
<
std
:
:
unique_ptr
<
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
>
>
sinks
;
std
:
:
vector
<
VideoReceiveStreamInterface
*
>
receive_streams
;
std
:
:
unique_ptr
<
VideoDecoderFactory
>
decoder_factory
;
}
;
static
void
Replay
(
const
std
:
:
string
&
replay_config_filepath
const
uint8_t
*
rtp_dump_data
size_t
rtp_dump_size
)
;
static
void
Replay
(
std
:
:
unique_ptr
<
StreamState
>
stream_state
std
:
:
vector
<
VideoReceiveStreamInterface
:
:
Config
>
receive_stream_config
const
uint8_t
*
rtp_dump_data
size_t
rtp_dump_size
)
;
private
:
static
std
:
:
vector
<
VideoReceiveStreamInterface
:
:
Config
>
ReadConfigFromFile
(
const
std
:
:
string
&
replay_config
Transport
*
transport
)
;
static
void
SetupVideoStreams
(
std
:
:
vector
<
VideoReceiveStreamInterface
:
:
Config
>
*
receive_stream_configs
StreamState
*
stream_state
Call
*
call
)
;
static
std
:
:
unique_ptr
<
test
:
:
RtpFileReader
>
CreateRtpReader
(
const
uint8_t
*
rtp_dump_data
size_t
rtp_dump_size
)
;
static
void
ReplayPackets
(
rtc
:
:
FakeClock
*
clock
Call
*
call
test
:
:
RtpFileReader
*
rtp_reader
const
RtpHeaderExtensionMap
&
extensions
)
;
}
;
}
}
#
endif
