#
include
<
memory
>
#
include
<
utility
>
#
include
"
modules
/
video_coding
/
frame_object
.
h
"
#
include
"
modules
/
video_coding
/
packet_buffer
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
fuzzers
/
fuzz_data_helper
.
h
"
namespace
webrtc
{
void
IgnoreResult
(
video_coding
:
:
PacketBuffer
:
:
InsertResult
result
)
{
}
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
if
(
size
>
200000
)
{
return
;
}
SimulatedClock
clock
(
0
)
;
video_coding
:
:
PacketBuffer
packet_buffer
(
&
clock
8
1024
)
;
test
:
:
FuzzDataHelper
helper
(
rtc
:
:
ArrayView
<
const
uint8_t
>
(
data
size
)
)
;
while
(
helper
.
BytesLeft
(
)
)
{
auto
packet
=
std
:
:
make_unique
<
video_coding
:
:
PacketBuffer
:
:
Packet
>
(
)
;
helper
.
CopyTo
(
&
packet
-
>
marker_bit
)
;
helper
.
CopyTo
(
&
packet
-
>
payload_type
)
;
helper
.
CopyTo
(
&
packet
-
>
seq_num
)
;
helper
.
CopyTo
(
&
packet
-
>
timestamp
)
;
helper
.
CopyTo
(
&
packet
-
>
times_nacked
)
;
packet
-
>
video_payload
.
SetSize
(
helper
.
ReadOrDefaultValue
<
uint8_t
>
(
0
)
)
;
IgnoreResult
(
packet_buffer
.
InsertPacket
(
std
:
:
move
(
packet
)
)
)
;
}
}
}
