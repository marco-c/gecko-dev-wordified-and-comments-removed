#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
limits
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
video
/
video_layers_allocation
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_video_layers_allocation_extension
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
constexpr
int
kMaxSize
=
std
:
:
numeric_limits
<
uint8_t
>
:
:
max
(
)
;
if
(
size
>
kMaxSize
)
{
return
;
}
auto
raw
=
webrtc
:
:
MakeArrayView
(
data
size
)
;
VideoLayersAllocation
allocation1
;
if
(
!
RtpVideoLayersAllocationExtension
:
:
Parse
(
raw
&
allocation1
)
)
{
return
;
}
size_t
value_size
=
RtpVideoLayersAllocationExtension
:
:
ValueSize
(
allocation1
)
;
RTC_CHECK_LE
(
value_size
raw
.
size
(
)
)
;
uint8_t
some_memory
[
kMaxSize
]
;
RTC_CHECK_LE
(
value_size
kMaxSize
)
;
webrtc
:
:
ArrayView
<
uint8_t
>
write_buffer
(
some_memory
value_size
)
;
RTC_CHECK
(
RtpVideoLayersAllocationExtension
:
:
Write
(
write_buffer
allocation1
)
)
;
VideoLayersAllocation
allocation2
;
RTC_CHECK
(
RtpVideoLayersAllocationExtension
:
:
Parse
(
write_buffer
&
allocation2
)
)
;
RTC_CHECK_EQ
(
allocation1
.
rtp_stream_index
allocation2
.
rtp_stream_index
)
;
RTC_CHECK_EQ
(
allocation1
.
resolution_and_frame_rate_is_valid
allocation2
.
resolution_and_frame_rate_is_valid
)
;
RTC_CHECK_EQ
(
allocation1
.
active_spatial_layers
.
size
(
)
allocation2
.
active_spatial_layers
.
size
(
)
)
;
RTC_CHECK
(
allocation1
=
=
allocation2
)
;
}
}
