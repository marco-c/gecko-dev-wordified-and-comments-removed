#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
"
modules
/
audio_coding
/
codecs
/
pcm16b
/
audio_decoder_pcm16b
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
fuzzers
/
audio_decoder_fuzzer
.
h
"
namespace
webrtc
{
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
if
(
size
>
10000
|
|
size
<
2
)
{
return
;
}
int
sample_rate_hz
;
switch
(
data
[
0
]
%
4
)
{
case
0
:
sample_rate_hz
=
8000
;
break
;
case
1
:
sample_rate_hz
=
16000
;
break
;
case
2
:
sample_rate_hz
=
32000
;
break
;
case
3
:
sample_rate_hz
=
48000
;
break
;
default
:
RTC_DCHECK_NOTREACHED
(
)
;
return
;
}
const
size_t
num_channels
=
data
[
1
]
%
16
+
1
;
data
+
=
2
;
size
-
=
2
;
AudioDecoderPcm16B
dec
(
sample_rate_hz
num_channels
)
;
const
size_t
allocated_ouput_size_samples
=
sample_rate_hz
*
num_channels
/
10
;
std
:
:
unique_ptr
<
int16_t
[
]
>
output
=
std
:
:
make_unique
<
int16_t
[
]
>
(
allocated_ouput_size_samples
)
;
FuzzAudioDecoder
(
DecoderFunctionType
:
:
kNormalDecode
data
size
&
dec
sample_rate_hz
allocated_ouput_size_samples
*
sizeof
(
int16_t
)
output
.
get
(
)
)
;
}
}
