#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
p2p
/
base
/
pseudo_tcp
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
class
FakeIPseudoTcpNotify
:
public
cricket
:
:
IPseudoTcpNotify
{
public
:
void
OnTcpOpen
(
cricket
:
:
PseudoTcp
*
tcp
)
{
}
void
OnTcpReadable
(
cricket
:
:
PseudoTcp
*
tcp
)
{
}
void
OnTcpWriteable
(
cricket
:
:
PseudoTcp
*
tcp
)
{
}
void
OnTcpClosed
(
cricket
:
:
PseudoTcp
*
tcp
uint32_t
error
)
{
}
cricket
:
:
IPseudoTcpNotify
:
:
WriteResult
TcpWritePacket
(
cricket
:
:
PseudoTcp
*
tcp
const
char
*
buffer
size_t
len
)
{
return
cricket
:
:
IPseudoTcpNotify
:
:
WriteResult
:
:
WR_SUCCESS
;
}
}
;
struct
Environment
{
explicit
Environment
(
cricket
:
:
IPseudoTcpNotify
*
notifier
)
:
ptcp
(
notifier
0
)
{
}
rtc
:
:
AutoThread
thread
;
cricket
:
:
PseudoTcp
ptcp
;
}
;
Environment
*
env
=
new
Environment
(
new
FakeIPseudoTcpNotify
(
)
)
;
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
env
-
>
ptcp
.
NotifyPacket
(
reinterpret_cast
<
const
char
*
>
(
data
)
size
)
;
}
}
