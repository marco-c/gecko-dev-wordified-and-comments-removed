#
include
<
algorithm
>
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
transport
/
rtp
/
dependency_descriptor
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_dependency_descriptor_extension
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
fuzzers
/
fuzz_data_helper
.
h
"
namespace
webrtc
{
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
FrameDependencyStructure
structure1
;
const
FrameDependencyStructure
*
structure1_ptr
=
nullptr
;
std
:
:
unique_ptr
<
const
FrameDependencyStructure
>
structure2
;
test
:
:
FuzzDataHelper
fuzz_data
(
rtc
:
:
MakeArrayView
(
data
size
)
)
;
while
(
fuzz_data
.
CanReadBytes
(
1
)
)
{
size_t
next_size
=
fuzz_data
.
Read
<
uint8_t
>
(
)
;
auto
raw
=
fuzz_data
.
ReadByteArray
(
std
:
:
min
(
next_size
fuzz_data
.
BytesLeft
(
)
)
)
;
DependencyDescriptor
descriptor1
;
if
(
!
RtpDependencyDescriptorExtension
:
:
Parse
(
raw
structure1_ptr
&
descriptor1
)
)
{
continue
;
}
if
(
descriptor1
.
attached_structure
)
{
structure1
=
*
descriptor1
.
attached_structure
;
structure1_ptr
=
&
structure1
;
}
RTC_CHECK
(
structure1_ptr
)
;
size_t
value_size
=
RtpDependencyDescriptorExtension
:
:
ValueSize
(
structure1
descriptor1
)
;
RTC_CHECK_LE
(
value_size
raw
.
size
(
)
)
;
uint8_t
some_memory
[
256
]
;
RTC_CHECK_LT
(
value_size
256
)
;
rtc
:
:
ArrayView
<
uint8_t
>
write_buffer
(
some_memory
value_size
)
;
RTC_CHECK
(
RtpDependencyDescriptorExtension
:
:
Write
(
write_buffer
structure1
descriptor1
)
)
;
DependencyDescriptor
descriptor2
;
RTC_CHECK
(
RtpDependencyDescriptorExtension
:
:
Parse
(
write_buffer
structure2
.
get
(
)
&
descriptor2
)
)
;
RTC_CHECK_EQ
(
descriptor1
.
first_packet_in_frame
descriptor2
.
first_packet_in_frame
)
;
RTC_CHECK_EQ
(
descriptor1
.
last_packet_in_frame
descriptor2
.
last_packet_in_frame
)
;
RTC_CHECK_EQ
(
descriptor1
.
attached_structure
!
=
nullptr
descriptor2
.
attached_structure
!
=
nullptr
)
;
RTC_CHECK_EQ
(
descriptor1
.
active_decode_targets_bitmask
.
value_or
(
0
)
descriptor2
.
active_decode_targets_bitmask
.
value_or
(
0
)
)
;
RTC_CHECK_EQ
(
descriptor1
.
frame_number
descriptor2
.
frame_number
)
;
RTC_CHECK
(
descriptor1
.
resolution
=
=
descriptor2
.
resolution
)
;
RTC_CHECK
(
descriptor1
.
frame_dependencies
=
=
descriptor2
.
frame_dependencies
)
;
if
(
descriptor2
.
attached_structure
)
{
structure2
=
std
:
:
move
(
descriptor2
.
attached_structure
)
;
}
}
}
}
