#
include
"
test
/
run_loop
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
namespace
webrtc
{
namespace
test
{
RunLoop
:
:
RunLoop
(
)
{
worker_thread_
.
WrapCurrent
(
)
;
}
RunLoop
:
:
~
RunLoop
(
)
{
worker_thread_
.
UnwrapCurrent
(
)
;
}
TaskQueueBase
*
RunLoop
:
:
task_queue
(
)
{
return
&
worker_thread_
;
}
void
RunLoop
:
:
Run
(
)
{
worker_thread_
.
ProcessMessages
(
WorkerThread
:
:
kForever
)
;
}
void
RunLoop
:
:
Quit
(
)
{
socket_server_
.
FailNextWait
(
)
;
}
void
RunLoop
:
:
Flush
(
)
{
worker_thread_
.
PostTask
(
[
this
]
(
)
{
socket_server_
.
FailNextWait
(
)
;
}
)
;
int
cms
=
rtc
:
:
GetClockForTesting
(
)
?
0
:
1000
;
worker_thread_
.
ProcessMessages
(
cms
)
;
}
RunLoop
:
:
FakeSocketServer
:
:
FakeSocketServer
(
)
=
default
;
RunLoop
:
:
FakeSocketServer
:
:
~
FakeSocketServer
(
)
=
default
;
void
RunLoop
:
:
FakeSocketServer
:
:
FailNextWait
(
)
{
fail_next_wait_
=
true
;
}
bool
RunLoop
:
:
FakeSocketServer
:
:
Wait
(
int
cms
bool
process_io
)
{
if
(
fail_next_wait_
)
{
fail_next_wait_
=
false
;
return
false
;
}
return
true
;
}
void
RunLoop
:
:
FakeSocketServer
:
:
WakeUp
(
)
{
}
rtc
:
:
Socket
*
RunLoop
:
:
FakeSocketServer
:
:
CreateSocket
(
int
family
int
type
)
{
return
nullptr
;
}
RunLoop
:
:
WorkerThread
:
:
WorkerThread
(
rtc
:
:
SocketServer
*
ss
)
:
rtc
:
:
Thread
(
ss
)
tq_setter_
(
this
)
{
}
}
}
