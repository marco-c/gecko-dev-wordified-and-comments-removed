#
ifndef
TEST_RUN_LOOP_H_
#
define
TEST_RUN_LOOP_H_
#
include
<
utility
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
namespace
test
{
class
RunLoop
{
public
:
RunLoop
(
)
;
~
RunLoop
(
)
;
TaskQueueBase
*
task_queue
(
)
;
void
Run
(
)
;
void
Quit
(
)
;
void
Flush
(
)
;
void
PostTask
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
)
{
task_queue
(
)
-
>
PostTask
(
std
:
:
move
(
task
)
)
;
}
private
:
class
FakeSocketServer
:
public
SocketServer
{
public
:
FakeSocketServer
(
)
;
~
FakeSocketServer
(
)
;
void
FailNextWait
(
)
;
private
:
bool
Wait
(
webrtc
:
:
TimeDelta
max_wait_duration
bool
process_io
)
override
;
void
WakeUp
(
)
override
;
Socket
*
CreateSocket
(
int
family
int
type
)
override
;
private
:
bool
fail_next_wait_
=
false
;
}
;
class
WorkerThread
:
public
rtc
:
:
Thread
{
public
:
explicit
WorkerThread
(
SocketServer
*
ss
)
;
private
:
CurrentTaskQueueSetter
tq_setter_
;
}
;
FakeSocketServer
socket_server_
;
WorkerThread
worker_thread_
{
&
socket_server_
}
;
}
;
}
}
#
endif
