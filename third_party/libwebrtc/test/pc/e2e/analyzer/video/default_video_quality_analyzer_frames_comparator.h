#
ifndef
TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_FRAMES_COMPARATOR_H_
#
define
TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_FRAMES_COMPARATOR_H_
#
include
<
deque
>
#
include
<
map
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
platform_thread
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
default_video_quality_analyzer_cpu_measurer
.
h
"
#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
default_video_quality_analyzer_internal_shared_objects
.
h
"
#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
default_video_quality_analyzer_shared_objects
.
h
"
namespace
webrtc
{
struct
FramesComparatorStats
{
SamplesStatsCounter
comparisons_queue_size
;
int64_t
comparisons_done
=
0
;
int64_t
cpu_overloaded_comparisons_done
=
0
;
int64_t
memory_overloaded_comparisons_done
=
0
;
}
;
class
DefaultVideoQualityAnalyzerFramesComparator
{
public
:
DefaultVideoQualityAnalyzerFramesComparator
(
webrtc
:
:
Clock
*
clock
DefaultVideoQualityAnalyzerCpuMeasurer
&
cpu_measurer
webrtc_pc_e2e
:
:
DefaultVideoQualityAnalyzerOptions
options
=
{
}
)
:
options_
(
options
)
clock_
(
clock
)
cpu_measurer_
(
cpu_measurer
)
{
}
~
DefaultVideoQualityAnalyzerFramesComparator
(
)
{
Stop
(
{
}
)
;
}
void
Start
(
int
max_threads_count
)
;
void
Stop
(
const
std
:
:
map
<
InternalStatsKey
Timestamp
>
&
last_rendered_frame_times
)
;
void
EnsureStatsForStream
(
size_t
stream_index
size_t
sender_peer_index
size_t
peers_count
Timestamp
captured_time
Timestamp
start_time
)
;
void
RegisterParticipantInCall
(
rtc
:
:
ArrayView
<
std
:
:
pair
<
InternalStatsKey
Timestamp
>
>
stream_started_time
Timestamp
start_time
)
;
void
AddComparison
(
InternalStatsKey
stats_key
absl
:
:
optional
<
VideoFrame
>
captured
absl
:
:
optional
<
VideoFrame
>
rendered
bool
dropped
FrameStats
frame_stats
)
;
void
AddComparison
(
InternalStatsKey
stats_key
int
skipped_between_rendered
absl
:
:
optional
<
VideoFrame
>
captured
absl
:
:
optional
<
VideoFrame
>
rendered
bool
dropped
FrameStats
frame_stats
)
;
std
:
:
map
<
InternalStatsKey
webrtc_pc_e2e
:
:
StreamStats
>
stream_stats
(
)
const
{
MutexLock
lock
(
&
mutex_
)
;
return
stream_stats_
;
}
FramesComparatorStats
frames_comparator_stats
(
)
const
{
MutexLock
lock
(
&
mutex_
)
;
return
frames_comparator_stats_
;
}
private
:
enum
State
{
kNew
kActive
kStopped
}
;
void
AddComparisonInternal
(
InternalStatsKey
stats_key
absl
:
:
optional
<
VideoFrame
>
captured
absl
:
:
optional
<
VideoFrame
>
rendered
bool
dropped
FrameStats
frame_stats
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
void
ProcessComparisons
(
)
;
void
ProcessComparison
(
const
FrameComparison
&
comparison
)
;
Timestamp
Now
(
)
;
const
webrtc_pc_e2e
:
:
DefaultVideoQualityAnalyzerOptions
options_
;
webrtc
:
:
Clock
*
const
clock_
;
DefaultVideoQualityAnalyzerCpuMeasurer
&
cpu_measurer_
;
mutable
Mutex
mutex_
;
State
state_
RTC_GUARDED_BY
(
mutex_
)
=
State
:
:
kNew
;
std
:
:
map
<
InternalStatsKey
webrtc_pc_e2e
:
:
StreamStats
>
stream_stats_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
map
<
InternalStatsKey
Timestamp
>
stream_last_freeze_end_time_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
deque
<
FrameComparison
>
comparisons_
RTC_GUARDED_BY
(
mutex_
)
;
FramesComparatorStats
frames_comparator_stats_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
vector
<
rtc
:
:
PlatformThread
>
thread_pool_
;
rtc
:
:
Event
comparison_available_event_
;
}
;
}
#
endif
