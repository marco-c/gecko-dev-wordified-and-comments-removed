#
ifndef
TEST_PC_E2E_ANALYZER_VIDEO_QUALITY_ANALYZING_VIDEO_ENCODER_H_
#
define
TEST_PC_E2E_ANALYZER_VIDEO_QUALITY_ANALYZING_VIDEO_ENCODER_H_
#
include
<
list
>
#
include
<
memory
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
test
/
video_quality_analyzer_interface
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
api
/
video_codecs
/
video_codec
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
encoded_image_data_injector
.
h
"
#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
id_generator
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
constexpr
int
kAnalyzeAnySpatialStream
=
-
1
;
class
QualityAnalyzingVideoEncoder
:
public
VideoEncoder
public
EncodedImageCallback
{
public
:
QualityAnalyzingVideoEncoder
(
int
id
absl
:
:
string_view
peer_name
std
:
:
unique_ptr
<
VideoEncoder
>
delegate
double
bitrate_multiplier
std
:
:
map
<
std
:
:
string
absl
:
:
optional
<
int
>
>
stream_required_spatial_index
EncodedImageDataInjector
*
injector
VideoQualityAnalyzerInterface
*
analyzer
)
;
~
QualityAnalyzingVideoEncoder
(
)
override
;
void
SetFecControllerOverride
(
FecControllerOverride
*
fec_controller_override
)
override
;
int32_t
InitEncode
(
const
VideoCodec
*
codec_settings
const
Settings
&
settings
)
override
;
int32_t
RegisterEncodeCompleteCallback
(
EncodedImageCallback
*
callback
)
override
;
int32_t
Release
(
)
override
;
int32_t
Encode
(
const
VideoFrame
&
frame
const
std
:
:
vector
<
VideoFrameType
>
*
frame_types
)
override
;
void
SetRates
(
const
VideoEncoder
:
:
RateControlParameters
&
parameters
)
override
;
EncoderInfo
GetEncoderInfo
(
)
const
override
;
EncodedImageCallback
:
:
Result
OnEncodedImage
(
const
EncodedImage
&
encoded_image
const
CodecSpecificInfo
*
codec_specific_info
)
override
;
void
OnDroppedFrame
(
DropReason
reason
)
override
;
private
:
enum
SimulcastMode
{
kNormal
kSimulcast
kSVC
kKSVC
}
;
bool
ShouldDiscard
(
uint16_t
frame_id
const
EncodedImage
&
encoded_image
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
lock_
)
;
const
int
id_
;
const
std
:
:
string
peer_name_
;
std
:
:
unique_ptr
<
VideoEncoder
>
delegate_
;
const
double
bitrate_multiplier_
;
std
:
:
map
<
std
:
:
string
absl
:
:
optional
<
int
>
>
stream_required_spatial_index_
;
EncodedImageDataInjector
*
const
injector_
;
VideoQualityAnalyzerInterface
*
const
analyzer_
;
Mutex
lock_
;
VideoCodec
codec_settings_
;
SimulcastMode
mode_
RTC_GUARDED_BY
(
lock_
)
;
EncodedImageCallback
*
delegate_callback_
RTC_GUARDED_BY
(
lock_
)
;
std
:
:
list
<
std
:
:
pair
<
uint32_t
uint16_t
>
>
timestamp_to_frame_id_list_
RTC_GUARDED_BY
(
lock_
)
;
VideoBitrateAllocation
bitrate_allocation_
RTC_GUARDED_BY
(
lock_
)
;
}
;
class
QualityAnalyzingVideoEncoderFactory
:
public
VideoEncoderFactory
{
public
:
QualityAnalyzingVideoEncoderFactory
(
absl
:
:
string_view
peer_name
std
:
:
unique_ptr
<
VideoEncoderFactory
>
delegate
double
bitrate_multiplier
std
:
:
map
<
std
:
:
string
absl
:
:
optional
<
int
>
>
stream_required_spatial_index
IdGenerator
<
int
>
*
id_generator
EncodedImageDataInjector
*
injector
VideoQualityAnalyzerInterface
*
analyzer
)
;
~
QualityAnalyzingVideoEncoderFactory
(
)
override
;
std
:
:
vector
<
SdpVideoFormat
>
GetSupportedFormats
(
)
const
override
;
VideoEncoderFactory
:
:
CodecInfo
QueryVideoEncoder
(
const
SdpVideoFormat
&
format
)
const
override
;
std
:
:
unique_ptr
<
VideoEncoder
>
CreateVideoEncoder
(
const
SdpVideoFormat
&
format
)
override
;
private
:
const
std
:
:
string
peer_name_
;
std
:
:
unique_ptr
<
VideoEncoderFactory
>
delegate_
;
const
double
bitrate_multiplier_
;
std
:
:
map
<
std
:
:
string
absl
:
:
optional
<
int
>
>
stream_required_spatial_index_
;
IdGenerator
<
int
>
*
const
id_generator_
;
EncodedImageDataInjector
*
const
injector_
;
VideoQualityAnalyzerInterface
*
const
analyzer_
;
}
;
}
}
#
endif
