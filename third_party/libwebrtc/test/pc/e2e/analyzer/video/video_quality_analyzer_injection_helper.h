#
ifndef
TEST_PC_E2E_ANALYZER_VIDEO_VIDEO_QUALITY_ANALYZER_INJECTION_HELPER_H_
#
define
TEST_PC_E2E_ANALYZER_VIDEO_VIDEO_QUALITY_ANALYZER_INJECTION_HELPER_H_
#
include
<
stdio
.
h
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
test
/
peerconnection_quality_test_fixture
.
h
"
#
include
"
api
/
test
/
stats_observer_interface
.
h
"
#
include
"
api
/
test
/
video_quality_analyzer_interface
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
encoded_image_data_injector
.
h
"
#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
quality_analyzing_video_encoder
.
h
"
#
include
"
test
/
test_video_capturer
.
h
"
#
include
"
test
/
testsupport
/
video_frame_writer
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
class
VideoQualityAnalyzerInjectionHelper
:
public
StatsObserverInterface
{
public
:
using
VideoConfig
=
PeerConnectionE2EQualityTestFixture
:
:
VideoConfig
;
VideoQualityAnalyzerInjectionHelper
(
Clock
*
clock
std
:
:
unique_ptr
<
VideoQualityAnalyzerInterface
>
analyzer
EncodedImageDataInjector
*
injector
EncodedImageDataExtractor
*
extractor
)
;
~
VideoQualityAnalyzerInjectionHelper
(
)
override
;
std
:
:
unique_ptr
<
VideoEncoderFactory
>
WrapVideoEncoderFactory
(
absl
:
:
string_view
peer_name
std
:
:
unique_ptr
<
VideoEncoderFactory
>
delegate
double
bitrate_multiplier
QualityAnalyzingVideoEncoder
:
:
EmulatedSFUConfigMap
stream_to_sfu_config
)
const
;
std
:
:
unique_ptr
<
VideoDecoderFactory
>
WrapVideoDecoderFactory
(
absl
:
:
string_view
peer_name
std
:
:
unique_ptr
<
VideoDecoderFactory
>
delegate
)
const
;
std
:
:
unique_ptr
<
test
:
:
TestVideoCapturer
:
:
FramePreprocessor
>
CreateFramePreprocessor
(
absl
:
:
string_view
peer_name
const
VideoConfig
&
config
)
;
std
:
:
unique_ptr
<
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
>
CreateVideoSink
(
absl
:
:
string_view
peer_name
)
;
void
Start
(
std
:
:
string
test_case_name
rtc
:
:
ArrayView
<
const
std
:
:
string
>
peer_names
int
max_threads_count
=
1
)
;
void
RegisterParticipantInCall
(
absl
:
:
string_view
peer_name
)
;
void
UnregisterParticipantInCall
(
absl
:
:
string_view
peer_name
)
;
void
OnStatsReports
(
absl
:
:
string_view
pc_label
const
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
&
report
)
override
;
void
Stop
(
)
;
private
:
class
AnalyzingVideoSink
final
:
public
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
{
public
:
explicit
AnalyzingVideoSink
(
absl
:
:
string_view
peer_name
VideoQualityAnalyzerInjectionHelper
*
helper
)
:
peer_name_
(
peer_name
)
helper_
(
helper
)
{
}
~
AnalyzingVideoSink
(
)
override
=
default
;
void
OnFrame
(
const
VideoFrame
&
frame
)
override
{
helper_
-
>
OnFrame
(
peer_name_
frame
)
;
}
private
:
const
std
:
:
string
peer_name_
;
VideoQualityAnalyzerInjectionHelper
*
const
helper_
;
}
;
struct
ReceiverStream
{
ReceiverStream
(
absl
:
:
string_view
peer_name
absl
:
:
string_view
stream_label
)
:
peer_name
(
peer_name
)
stream_label
(
stream_label
)
{
}
std
:
:
string
peer_name
;
std
:
:
string
stream_label
;
bool
operator
=
=
(
const
ReceiverStream
&
o
)
const
{
return
peer_name
=
=
o
.
peer_name
&
&
stream_label
=
=
o
.
stream_label
;
}
bool
operator
<
(
const
ReceiverStream
&
o
)
const
{
return
(
peer_name
=
=
o
.
peer_name
)
?
stream_label
<
o
.
stream_label
:
peer_name
<
o
.
peer_name
;
}
}
;
class
VideoFrameIdsWriter
final
:
public
test
:
:
VideoFrameWriter
{
public
:
explicit
VideoFrameIdsWriter
(
absl
:
:
string_view
file_name
)
;
~
VideoFrameIdsWriter
(
)
{
Close
(
)
;
}
bool
WriteFrame
(
const
VideoFrame
&
frame
)
override
;
void
Close
(
)
override
;
private
:
const
std
:
:
string
file_name_
;
FILE
*
output_file_
;
}
;
class
VideoWriter
final
:
public
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
{
public
:
VideoWriter
(
test
:
:
VideoFrameWriter
*
video_writer
int
sampling_modulo
)
;
~
VideoWriter
(
)
override
=
default
;
void
OnFrame
(
const
VideoFrame
&
frame
)
override
;
private
:
test
:
:
VideoFrameWriter
*
const
video_writer_
;
const
int
sampling_modulo_
;
int64_t
frames_counter_
=
0
;
}
;
test
:
:
VideoFrameWriter
*
CreateVideoWriter
(
absl
:
:
string_view
file_name
absl
:
:
optional
<
std
:
:
string
>
frame_ids_dump_file_name
const
PeerConnectionE2EQualityTestFixture
:
:
VideoConfig
&
config
)
;
void
OnFrame
(
absl
:
:
string_view
peer_name
const
VideoFrame
&
frame
)
;
std
:
:
vector
<
std
:
:
unique_ptr
<
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
>
>
*
PopulateSinks
(
const
ReceiverStream
&
receiver_stream
)
;
Clock
*
const
clock_
;
std
:
:
unique_ptr
<
VideoQualityAnalyzerInterface
>
analyzer_
;
EncodedImageDataInjector
*
injector_
;
EncodedImageDataExtractor
*
extractor_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
test
:
:
VideoFrameWriter
>
>
video_writers_
;
Mutex
mutex_
;
int
peers_count_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
map
<
std
:
:
string
VideoConfig
>
known_video_configs_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
map
<
ReceiverStream
std
:
:
vector
<
std
:
:
unique_ptr
<
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
>
>
>
sinks_
RTC_GUARDED_BY
(
mutex_
)
;
}
;
}
}
#
endif
