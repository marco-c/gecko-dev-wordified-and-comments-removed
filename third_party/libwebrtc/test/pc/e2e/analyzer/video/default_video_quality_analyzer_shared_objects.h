#
ifndef
TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_SHARED_OBJECTS_H_
#
define
TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_SHARED_OBJECTS_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
ostream
>
#
include
<
set
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
numerics
/
samples_stats_counter
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
namespace
webrtc
{
constexpr
size_t
kDefaultMaxFramesInFlightPerStream
=
270
;
class
SamplesRateCounter
{
public
:
void
AddEvent
(
Timestamp
event_time
)
;
bool
IsEmpty
(
)
const
{
return
event_first_time_
=
=
event_last_time_
;
}
double
GetEventsPerSecond
(
)
const
;
private
:
Timestamp
event_first_time_
=
Timestamp
:
:
MinusInfinity
(
)
;
Timestamp
event_last_time_
=
Timestamp
:
:
MinusInfinity
(
)
;
int64_t
events_count_
=
0
;
}
;
struct
FrameCounters
{
int64_t
captured
=
0
;
int64_t
pre_encoded
=
0
;
int64_t
encoded
=
0
;
int64_t
received
=
0
;
int64_t
decoded
=
0
;
int64_t
rendered
=
0
;
int64_t
dropped
=
0
;
int64_t
failed_to_decode
=
0
;
}
;
struct
StreamCodecInfo
{
std
:
:
string
codec_name
;
uint16_t
first_frame_id
;
uint16_t
last_frame_id
;
Timestamp
switched_on_at
=
Timestamp
:
:
PlusInfinity
(
)
;
Timestamp
switched_from_at
=
Timestamp
:
:
PlusInfinity
(
)
;
std
:
:
string
ToString
(
)
const
;
}
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
StreamCodecInfo
&
state
)
;
rtc
:
:
StringBuilder
&
operator
<
<
(
rtc
:
:
StringBuilder
&
sb
const
StreamCodecInfo
&
state
)
;
bool
operator
=
=
(
const
StreamCodecInfo
&
a
const
StreamCodecInfo
&
b
)
;
enum
class
FrameDropPhase
:
int
{
kBeforeEncoder
kByEncoder
kTransport
kByDecoder
kAfterDecoder
kLastValue
}
;
std
:
:
string
ToString
(
FrameDropPhase
phase
)
;
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
FrameDropPhase
phase
)
;
rtc
:
:
StringBuilder
&
operator
<
<
(
rtc
:
:
StringBuilder
&
sb
FrameDropPhase
phase
)
;
struct
StreamStats
{
explicit
StreamStats
(
Timestamp
stream_started_time
)
;
Timestamp
stream_started_time
;
SamplesStatsCounter
psnr
;
SamplesStatsCounter
ssim
;
SamplesStatsCounter
transport_time_ms
;
SamplesStatsCounter
total_delay_incl_transport_ms
;
SamplesStatsCounter
time_between_rendered_frames_ms
;
SamplesRateCounter
capture_frame_rate
;
SamplesRateCounter
encode_frame_rate
;
SamplesStatsCounter
encode_time_ms
;
SamplesStatsCounter
decode_time_ms
;
SamplesStatsCounter
receive_to_render_time_ms
;
SamplesStatsCounter
skipped_between_rendered
;
SamplesStatsCounter
freeze_time_ms
;
SamplesStatsCounter
time_between_freezes_ms
;
SamplesStatsCounter
resolution_of_rendered_frame
;
SamplesStatsCounter
target_encode_bitrate
;
int64_t
total_encoded_images_payload
=
0
;
std
:
:
map
<
FrameDropPhase
int64_t
>
dropped_by_phase
;
int64_t
num_send_key_frames
=
0
;
int64_t
num_recv_key_frames
=
0
;
SamplesStatsCounter
recv_key_frame_size_bytes
;
SamplesStatsCounter
recv_delta_frame_size_bytes
;
std
:
:
vector
<
StreamCodecInfo
>
encoders
;
std
:
:
vector
<
StreamCodecInfo
>
decoders
;
}
;
struct
AnalyzerStats
{
SamplesStatsCounter
comparisons_queue_size
;
int64_t
comparisons_done
=
0
;
int64_t
cpu_overloaded_comparisons_done
=
0
;
int64_t
memory_overloaded_comparisons_done
=
0
;
SamplesStatsCounter
frames_in_flight_left_count
;
}
;
struct
StatsKey
{
StatsKey
(
std
:
:
string
stream_label
std
:
:
string
receiver
)
:
stream_label
(
std
:
:
move
(
stream_label
)
)
receiver
(
std
:
:
move
(
receiver
)
)
{
}
std
:
:
string
ToString
(
)
const
;
std
:
:
string
stream_label
;
std
:
:
string
receiver
;
}
;
bool
operator
<
(
const
StatsKey
&
a
const
StatsKey
&
b
)
;
bool
operator
=
=
(
const
StatsKey
&
a
const
StatsKey
&
b
)
;
class
VideoStreamsInfo
{
public
:
std
:
:
set
<
StatsKey
>
GetStatsKeys
(
)
const
;
std
:
:
set
<
std
:
:
string
>
GetStreams
(
)
const
;
std
:
:
set
<
std
:
:
string
>
GetStreams
(
absl
:
:
string_view
sender_name
)
const
;
absl
:
:
optional
<
std
:
:
string
>
GetSender
(
absl
:
:
string_view
stream_label
)
const
;
std
:
:
set
<
std
:
:
string
>
GetReceivers
(
absl
:
:
string_view
stream_label
)
const
;
protected
:
friend
class
DefaultVideoQualityAnalyzer
;
VideoStreamsInfo
(
std
:
:
map
<
std
:
:
string
std
:
:
string
>
stream_to_sender
std
:
:
map
<
std
:
:
string
std
:
:
set
<
std
:
:
string
>
>
sender_to_streams
std
:
:
map
<
std
:
:
string
std
:
:
set
<
std
:
:
string
>
>
stream_to_receivers
)
;
private
:
std
:
:
map
<
std
:
:
string
std
:
:
string
>
stream_to_sender_
;
std
:
:
map
<
std
:
:
string
std
:
:
set
<
std
:
:
string
>
>
sender_to_streams_
;
std
:
:
map
<
std
:
:
string
std
:
:
set
<
std
:
:
string
>
>
stream_to_receivers_
;
}
;
struct
DefaultVideoQualityAnalyzerOptions
{
bool
compute_psnr
=
true
;
bool
compute_ssim
=
true
;
bool
use_weighted_psnr
=
false
;
bool
report_detailed_frame_stats
=
false
;
bool
adjust_cropping_before_comparing_frames
=
false
;
size_t
max_frames_in_flight_per_stream_count
=
kDefaultMaxFramesInFlightPerStream
;
bool
enable_receive_own_stream
=
false
;
}
;
}
#
endif
