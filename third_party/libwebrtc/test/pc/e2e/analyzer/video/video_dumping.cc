#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
video_dumping
.
h
"
#
include
<
stdio
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
test
/
peerconnection_quality_test_fixture
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
testsupport
/
video_frame_writer
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
namespace
{
class
VideoFrameIdsWriter
final
:
public
test
:
:
VideoFrameWriter
{
public
:
explicit
VideoFrameIdsWriter
(
absl
:
:
string_view
file_name
)
:
file_name_
(
file_name
)
{
output_file_
=
fopen
(
file_name_
.
c_str
(
)
"
wb
"
)
;
RTC_CHECK
(
output_file_
!
=
nullptr
)
<
<
"
Failed
to
open
file
to
dump
frame
ids
for
writing
:
"
<
<
file_name_
;
}
~
VideoFrameIdsWriter
(
)
override
{
Close
(
)
;
}
bool
WriteFrame
(
const
VideoFrame
&
frame
)
override
{
RTC_CHECK
(
output_file_
!
=
nullptr
)
<
<
"
Writer
is
already
closed
"
;
int
chars_written
=
fprintf
(
output_file_
"
%
d
\
n
"
frame
.
id
(
)
)
;
if
(
chars_written
<
2
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
write
frame
id
to
the
output
file
:
"
<
<
file_name_
;
return
false
;
}
return
true
;
}
void
Close
(
)
override
{
if
(
output_file_
!
=
nullptr
)
{
fclose
(
output_file_
)
;
output_file_
=
nullptr
;
}
}
private
:
const
std
:
:
string
file_name_
;
FILE
*
output_file_
;
}
;
class
BroadcastingFrameWriter
final
:
public
test
:
:
VideoFrameWriter
{
public
:
explicit
BroadcastingFrameWriter
(
std
:
:
vector
<
std
:
:
unique_ptr
<
test
:
:
VideoFrameWriter
>
>
delegates
)
:
delegates_
(
std
:
:
move
(
delegates
)
)
{
}
~
BroadcastingFrameWriter
(
)
override
{
Close
(
)
;
}
bool
WriteFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
override
{
for
(
auto
&
delegate
:
delegates_
)
{
if
(
!
delegate
-
>
WriteFrame
(
frame
)
)
{
return
false
;
}
}
return
true
;
}
void
Close
(
)
override
{
for
(
auto
&
delegate
:
delegates_
)
{
delegate
-
>
Close
(
)
;
}
}
private
:
std
:
:
vector
<
std
:
:
unique_ptr
<
test
:
:
VideoFrameWriter
>
>
delegates_
;
}
;
}
VideoWriter
:
:
VideoWriter
(
test
:
:
VideoFrameWriter
*
video_writer
int
sampling_modulo
)
:
video_writer_
(
video_writer
)
sampling_modulo_
(
sampling_modulo
)
{
}
void
VideoWriter
:
:
OnFrame
(
const
VideoFrame
&
frame
)
{
if
(
frames_counter_
+
+
%
sampling_modulo_
!
=
0
)
{
return
;
}
bool
result
=
video_writer_
-
>
WriteFrame
(
frame
)
;
RTC_CHECK
(
result
)
<
<
"
Failed
to
write
frame
"
;
}
std
:
:
unique_ptr
<
test
:
:
VideoFrameWriter
>
CreateVideoFrameWriter
(
absl
:
:
string_view
file_name
absl
:
:
optional
<
std
:
:
string
>
frame_ids_dump_file_name
const
PeerConnectionE2EQualityTestFixture
:
:
VideoResolution
&
resolution
)
{
std
:
:
vector
<
std
:
:
unique_ptr
<
test
:
:
VideoFrameWriter
>
>
requested_writers
;
requested_writers
.
push_back
(
std
:
:
make_unique
<
test
:
:
Y4mVideoFrameWriterImpl
>
(
std
:
:
string
(
file_name
)
resolution
.
width
(
)
resolution
.
height
(
)
resolution
.
fps
(
)
)
)
;
if
(
frame_ids_dump_file_name
.
has_value
(
)
)
{
requested_writers
.
push_back
(
std
:
:
make_unique
<
VideoFrameIdsWriter
>
(
*
frame_ids_dump_file_name
)
)
;
}
return
std
:
:
make_unique
<
BroadcastingFrameWriter
>
(
std
:
:
move
(
requested_writers
)
)
;
}
}
}
