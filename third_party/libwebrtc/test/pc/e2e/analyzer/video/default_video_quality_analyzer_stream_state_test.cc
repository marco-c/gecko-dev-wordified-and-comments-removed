#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
default_video_quality_analyzer_stream_state
.
h
"
#
include
<
set
>
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
TEST
(
StreamStateTest
PopFrontAndFrontIndependentForEachPeer
)
{
AnalyzerStreamState
state
(
0
std
:
:
set
<
size_t
>
{
1
2
}
Timestamp
:
:
Seconds
(
1
)
Clock
:
:
GetRealTimeClock
(
)
)
;
state
.
PushBack
(
1
)
;
state
.
PushBack
(
2
)
;
EXPECT_EQ
(
state
.
Front
(
1
)
1
)
;
EXPECT_EQ
(
state
.
PopFront
(
1
)
1
)
;
EXPECT_EQ
(
state
.
Front
(
1
)
2
)
;
EXPECT_EQ
(
state
.
PopFront
(
1
)
2
)
;
EXPECT_EQ
(
state
.
Front
(
2
)
1
)
;
EXPECT_EQ
(
state
.
PopFront
(
2
)
1
)
;
EXPECT_EQ
(
state
.
Front
(
2
)
2
)
;
EXPECT_EQ
(
state
.
PopFront
(
2
)
2
)
;
}
TEST
(
StreamStateTest
IsEmpty
)
{
AnalyzerStreamState
state
(
0
std
:
:
set
<
size_t
>
{
1
2
}
Timestamp
:
:
Seconds
(
1
)
Clock
:
:
GetRealTimeClock
(
)
)
;
state
.
PushBack
(
1
)
;
EXPECT_FALSE
(
state
.
IsEmpty
(
1
)
)
;
state
.
PopFront
(
1
)
;
EXPECT_TRUE
(
state
.
IsEmpty
(
1
)
)
;
}
TEST
(
StreamStateTest
PopFrontForOnlyOnePeerDontChangeAliveFramesCount
)
{
AnalyzerStreamState
state
(
0
std
:
:
set
<
size_t
>
{
1
2
}
Timestamp
:
:
Seconds
(
1
)
Clock
:
:
GetRealTimeClock
(
)
)
;
state
.
PushBack
(
1
)
;
state
.
PushBack
(
2
)
;
EXPECT_EQ
(
state
.
GetAliveFramesCount
(
)
2lu
)
;
state
.
PopFront
(
1
)
;
state
.
PopFront
(
1
)
;
EXPECT_EQ
(
state
.
GetAliveFramesCount
(
)
2lu
)
;
}
TEST
(
StreamStateTest
PopFrontForAllPeersReducesAliveFramesCount
)
{
AnalyzerStreamState
state
(
0
std
:
:
set
<
size_t
>
{
1
2
}
Timestamp
:
:
Seconds
(
1
)
Clock
:
:
GetRealTimeClock
(
)
)
;
state
.
PushBack
(
1
)
;
state
.
PushBack
(
2
)
;
EXPECT_EQ
(
state
.
GetAliveFramesCount
(
)
2lu
)
;
state
.
PopFront
(
1
)
;
state
.
PopFront
(
2
)
;
EXPECT_EQ
(
state
.
GetAliveFramesCount
(
)
1lu
)
;
}
TEST
(
StreamStateTest
RemovePeerForLastExpectedReceiverUpdatesAliveFrames
)
{
AnalyzerStreamState
state
(
0
std
:
:
set
<
size_t
>
{
1
2
}
Timestamp
:
:
Seconds
(
1
)
Clock
:
:
GetRealTimeClock
(
)
)
;
state
.
PushBack
(
1
)
;
state
.
PushBack
(
2
)
;
state
.
PopFront
(
1
)
;
EXPECT_EQ
(
state
.
GetAliveFramesCount
(
)
2lu
)
;
state
.
RemovePeer
(
2
)
;
EXPECT_EQ
(
state
.
GetAliveFramesCount
(
)
1lu
)
;
}
}
}
