#
ifndef
TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_INTERNAL_SHARED_OBJECTS_H_
#
define
TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_INTERNAL_SHARED_OBJECTS_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_frame_type
.
h
"
#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
default_video_quality_analyzer_shared_objects
.
h
"
namespace
webrtc
{
struct
InternalStatsKey
{
InternalStatsKey
(
size_t
stream
size_t
sender
size_t
receiver
)
:
stream
(
stream
)
sender
(
sender
)
receiver
(
receiver
)
{
}
std
:
:
string
ToString
(
)
const
;
size_t
stream
;
size_t
sender
;
size_t
receiver
;
}
;
bool
operator
<
(
const
InternalStatsKey
&
a
const
InternalStatsKey
&
b
)
;
bool
operator
=
=
(
const
InternalStatsKey
&
a
const
InternalStatsKey
&
b
)
;
struct
FrameStats
{
FrameStats
(
uint16_t
frame_id
Timestamp
captured_time
)
:
frame_id
(
frame_id
)
captured_time
(
captured_time
)
{
}
uint16_t
frame_id
;
Timestamp
captured_time
;
Timestamp
pre_encode_time
=
Timestamp
:
:
MinusInfinity
(
)
;
Timestamp
encoded_time
=
Timestamp
:
:
MinusInfinity
(
)
;
Timestamp
received_time
=
Timestamp
:
:
MinusInfinity
(
)
;
Timestamp
decode_start_time
=
Timestamp
:
:
MinusInfinity
(
)
;
Timestamp
decode_end_time
=
Timestamp
:
:
MinusInfinity
(
)
;
Timestamp
rendered_time
=
Timestamp
:
:
MinusInfinity
(
)
;
Timestamp
prev_frame_rendered_time
=
Timestamp
:
:
MinusInfinity
(
)
;
VideoFrameType
encoded_frame_type
=
VideoFrameType
:
:
kEmptyFrame
;
DataSize
encoded_image_size
=
DataSize
:
:
Bytes
(
0
)
;
VideoFrameType
pre_decoded_frame_type
=
VideoFrameType
:
:
kEmptyFrame
;
DataSize
pre_decoded_image_size
=
DataSize
:
:
Bytes
(
0
)
;
uint32_t
target_encode_bitrate
=
0
;
std
:
:
vector
<
int
>
qp_values
;
absl
:
:
optional
<
int
>
decoded_frame_width
=
absl
:
:
nullopt
;
absl
:
:
optional
<
int
>
decoded_frame_height
=
absl
:
:
nullopt
;
absl
:
:
optional
<
StreamCodecInfo
>
used_encoder
=
absl
:
:
nullopt
;
absl
:
:
optional
<
StreamCodecInfo
>
used_decoder
=
absl
:
:
nullopt
;
bool
decoder_failed
=
false
;
}
;
enum
class
OverloadReason
{
kNone
kCpu
kMemory
}
;
enum
class
FrameComparisonType
{
kRegular
kDroppedFrame
kFrameInFlight
}
;
struct
FrameComparison
{
FrameComparison
(
InternalStatsKey
stats_key
absl
:
:
optional
<
VideoFrame
>
captured
absl
:
:
optional
<
VideoFrame
>
rendered
FrameComparisonType
type
FrameStats
frame_stats
OverloadReason
overload_reason
)
;
InternalStatsKey
stats_key
;
absl
:
:
optional
<
VideoFrame
>
captured
;
absl
:
:
optional
<
VideoFrame
>
rendered
;
FrameComparisonType
type
;
FrameStats
frame_stats
;
OverloadReason
overload_reason
;
}
;
}
#
endif
