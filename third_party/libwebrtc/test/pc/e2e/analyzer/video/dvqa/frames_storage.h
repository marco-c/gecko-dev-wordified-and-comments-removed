#
ifndef
TEST_PC_E2E_ANALYZER_VIDEO_DVQA_FRAMES_STORAGE_H_
#
define
TEST_PC_E2E_ANALYZER_VIDEO_DVQA_FRAMES_STORAGE_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
optional
>
#
include
<
unordered_map
>
#
include
<
vector
>
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
FramesStorage
{
public
:
FramesStorage
(
TimeDelta
max_storage_duration
Clock
*
clock
)
:
max_storage_duration_
(
max_storage_duration
)
clock_
(
clock
)
{
}
FramesStorage
(
const
FramesStorage
&
)
=
delete
;
FramesStorage
&
operator
=
(
const
FramesStorage
&
)
=
delete
;
FramesStorage
(
FramesStorage
&
&
)
=
default
;
FramesStorage
&
operator
=
(
FramesStorage
&
&
)
=
default
;
void
Add
(
const
VideoFrame
&
frame
Timestamp
captured_time
)
;
std
:
:
optional
<
VideoFrame
>
Get
(
uint16_t
frame_id
)
;
void
Remove
(
uint16_t
frame_id
)
;
private
:
struct
HeapNode
{
VideoFrame
frame
;
Timestamp
captured_time
;
}
;
void
RemoveInternal
(
uint16_t
frame_id
)
;
void
Heapify
(
size_t
index
)
;
void
HeapifyUp
(
size_t
index
)
;
void
HeapifyDown
(
size_t
index
)
;
void
RemoveTooOldFrames
(
)
;
TimeDelta
max_storage_duration_
;
Clock
*
clock_
;
std
:
:
unordered_map
<
uint16_t
size_t
>
frame_id_index_
;
std
:
:
vector
<
HeapNode
>
heap_
;
}
;
}
#
endif
