#
ifndef
TEST_PC_E2E_ANALYZER_VIDEO_DVQA_PAUSABLE_STATE_H_
#
define
TEST_PC_E2E_ANALYZER_VIDEO_DVQA_PAUSABLE_STATE_H_
#
include
<
cstdint
>
#
include
<
vector
>
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
PausableState
{
public
:
explicit
PausableState
(
Clock
*
clock
)
:
clock_
(
clock
)
{
}
PausableState
(
const
PausableState
&
)
=
delete
;
PausableState
&
operator
=
(
const
PausableState
&
)
=
delete
;
PausableState
(
PausableState
&
&
)
=
default
;
PausableState
&
operator
=
(
PausableState
&
&
)
=
default
;
void
Pause
(
)
;
void
Resume
(
)
;
bool
IsPaused
(
)
const
;
bool
WasPausedAt
(
Timestamp
time
)
const
;
bool
WasResumedAfter
(
Timestamp
time
)
const
;
Timestamp
GetLastEventTime
(
)
const
;
TimeDelta
GetActiveDurationFrom
(
Timestamp
time
)
const
;
private
:
struct
Event
{
Timestamp
time
;
bool
is_paused
;
}
;
int64_t
GetPos
(
Timestamp
time
)
const
;
Clock
*
clock_
;
std
:
:
vector
<
Event
>
events_
;
}
;
}
#
endif
