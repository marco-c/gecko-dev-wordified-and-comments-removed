#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
names_collection
.
h
"
#
include
<
set
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
namespace
webrtc
{
NamesCollection
:
:
NamesCollection
(
rtc
:
:
ArrayView
<
const
std
:
:
string
>
names
)
{
names_
=
std
:
:
vector
<
std
:
:
string
>
(
names
.
begin
(
)
names
.
end
(
)
)
;
for
(
size_t
i
=
0
;
i
<
names_
.
size
(
)
;
+
+
i
)
{
index_
.
emplace
(
names_
[
i
]
i
)
;
removed_
.
emplace_back
(
false
)
;
}
size_
=
names_
.
size
(
)
;
}
bool
NamesCollection
:
:
HasName
(
absl
:
:
string_view
name
)
const
{
auto
it
=
index_
.
find
(
name
)
;
if
(
it
=
=
index_
.
end
(
)
)
{
return
false
;
}
return
!
removed_
[
it
-
>
second
]
;
}
size_t
NamesCollection
:
:
AddIfAbsent
(
absl
:
:
string_view
name
)
{
auto
it
=
index_
.
find
(
name
)
;
if
(
it
!
=
index_
.
end
(
)
)
{
size_t
index
=
it
-
>
second
;
if
(
removed_
[
index
]
)
{
removed_
[
index
]
=
false
;
size_
+
+
;
}
return
index
;
}
size_t
out
=
names_
.
size
(
)
;
size_t
old_capacity
=
names_
.
capacity
(
)
;
names_
.
emplace_back
(
name
)
;
removed_
.
emplace_back
(
false
)
;
size_
+
+
;
size_t
new_capacity
=
names_
.
capacity
(
)
;
if
(
old_capacity
=
=
new_capacity
)
{
index_
.
emplace
(
names_
[
out
]
out
)
;
}
else
{
index_
.
clear
(
)
;
for
(
size_t
i
=
0
;
i
<
names_
.
size
(
)
;
+
+
i
)
{
index_
.
emplace
(
names_
[
i
]
i
)
;
}
}
return
out
;
}
absl
:
:
optional
<
size_t
>
NamesCollection
:
:
RemoveIfPresent
(
absl
:
:
string_view
name
)
{
auto
it
=
index_
.
find
(
name
)
;
if
(
it
=
=
index_
.
end
(
)
)
{
return
absl
:
:
nullopt
;
}
size_t
index
=
it
-
>
second
;
if
(
removed_
[
index
]
)
{
return
absl
:
:
nullopt
;
}
removed_
[
index
]
=
true
;
size_
-
-
;
return
index
;
}
std
:
:
set
<
size_t
>
NamesCollection
:
:
GetPresentIndexes
(
)
const
{
std
:
:
set
<
size_t
>
out
;
for
(
size_t
i
=
0
;
i
<
removed_
.
size
(
)
;
+
+
i
)
{
if
(
!
removed_
[
i
]
)
{
out
.
insert
(
i
)
;
}
}
return
out
;
}
std
:
:
set
<
size_t
>
NamesCollection
:
:
GetAllIndexes
(
)
const
{
std
:
:
set
<
size_t
>
out
;
for
(
size_t
i
=
0
;
i
<
names_
.
size
(
)
;
+
+
i
)
{
out
.
insert
(
i
)
;
}
return
out
;
}
}
