#
ifndef
TEST_PC_E2E_ANALYZER_VIDEO_QUALITY_ANALYZING_VIDEO_DECODER_H_
#
define
TEST_PC_E2E_ANALYZER_VIDEO_QUALITY_ANALYZING_VIDEO_DECODER_H_
#
include
<
cstdint
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
test
/
video_quality_analyzer_interface
.
h
"
#
include
"
api
/
video
/
encoded_image
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_frame_buffer
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
test
/
pc
/
e2e
/
analyzer
/
video
/
encoded_image_data_injector
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
class
QualityAnalyzingVideoDecoder
:
public
VideoDecoder
{
public
:
QualityAnalyzingVideoDecoder
(
absl
:
:
string_view
peer_name
std
:
:
unique_ptr
<
VideoDecoder
>
delegate
EncodedImageDataExtractor
*
extractor
VideoQualityAnalyzerInterface
*
analyzer
)
;
~
QualityAnalyzingVideoDecoder
(
)
override
;
bool
Configure
(
const
Settings
&
settings
)
override
;
int32_t
Decode
(
const
EncodedImage
&
input_image
int64_t
render_time_ms
)
override
;
int32_t
RegisterDecodeCompleteCallback
(
DecodedImageCallback
*
callback
)
override
;
int32_t
Release
(
)
override
;
DecoderInfo
GetDecoderInfo
(
)
const
override
;
const
char
*
ImplementationName
(
)
const
override
;
private
:
class
DecoderCallback
:
public
DecodedImageCallback
{
public
:
explicit
DecoderCallback
(
QualityAnalyzingVideoDecoder
*
decoder
)
;
~
DecoderCallback
(
)
override
;
void
SetDelegateCallback
(
DecodedImageCallback
*
delegate
)
;
int32_t
Decoded
(
VideoFrame
&
decodedImage
)
override
;
int32_t
Decoded
(
VideoFrame
&
decodedImage
int64_t
decode_time_ms
)
override
;
void
Decoded
(
VideoFrame
&
decodedImage
std
:
:
optional
<
int32_t
>
decode_time_ms
std
:
:
optional
<
uint8_t
>
qp
)
override
;
int32_t
IrrelevantSimulcastStreamDecoded
(
uint16_t
frame_id
uint32_t
timestamp_ms
)
;
private
:
scoped_refptr
<
webrtc
:
:
VideoFrameBuffer
>
GetDummyFrameBuffer
(
)
;
QualityAnalyzingVideoDecoder
*
const
decoder_
;
scoped_refptr
<
webrtc
:
:
VideoFrameBuffer
>
dummy_frame_buffer_
;
Mutex
callback_mutex_
;
DecodedImageCallback
*
delegate_callback_
RTC_GUARDED_BY
(
callback_mutex_
)
;
}
;
void
OnFrameDecoded
(
VideoFrame
*
frame
std
:
:
optional
<
int32_t
>
decode_time_ms
std
:
:
optional
<
uint8_t
>
qp
)
;
const
std
:
:
string
peer_name_
;
const
std
:
:
string
implementation_name_
;
std
:
:
unique_ptr
<
VideoDecoder
>
delegate_
;
EncodedImageDataExtractor
*
const
extractor_
;
VideoQualityAnalyzerInterface
*
const
analyzer_
;
std
:
:
unique_ptr
<
DecoderCallback
>
analyzing_callback_
;
Mutex
mutex_
;
std
:
:
string
codec_name_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
map
<
uint32_t
std
:
:
optional
<
uint16_t
>
>
timestamp_to_frame_id_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
map
<
uint32_t
EncodedImage
>
decoding_images_
RTC_GUARDED_BY
(
mutex_
)
;
}
;
class
QualityAnalyzingVideoDecoderFactory
:
public
VideoDecoderFactory
{
public
:
QualityAnalyzingVideoDecoderFactory
(
absl
:
:
string_view
peer_name
std
:
:
unique_ptr
<
VideoDecoderFactory
>
delegate
EncodedImageDataExtractor
*
extractor
VideoQualityAnalyzerInterface
*
analyzer
)
;
~
QualityAnalyzingVideoDecoderFactory
(
)
override
;
std
:
:
vector
<
SdpVideoFormat
>
GetSupportedFormats
(
)
const
override
;
std
:
:
unique_ptr
<
VideoDecoder
>
Create
(
const
Environment
&
env
const
SdpVideoFormat
&
format
)
override
;
private
:
const
std
:
:
string
peer_name_
;
std
:
:
unique_ptr
<
VideoDecoderFactory
>
delegate_
;
EncodedImageDataExtractor
*
const
extractor_
;
VideoQualityAnalyzerInterface
*
const
analyzer_
;
}
;
}
}
#
endif
