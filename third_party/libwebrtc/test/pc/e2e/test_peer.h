#
ifndef
TEST_PC_E2E_TEST_PEER_H_
#
define
TEST_PC_E2E_TEST_PEER_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
function_view
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
set_remote_description_observer_interface
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
api
/
test
/
frame_generator_interface
.
h
"
#
include
"
api
/
test
/
pclf
/
media_configuration
.
h
"
#
include
"
api
/
test
/
pclf
/
media_quality_test_params
.
h
"
#
include
"
api
/
test
/
pclf
/
peer_configurer
.
h
"
#
include
"
pc
/
peer_connection_wrapper
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
test
/
pc
/
e2e
/
stats_provider
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
class
TestPeer
final
:
public
StatsProvider
{
public
:
~
TestPeer
(
)
override
=
default
;
const
Params
&
params
(
)
const
{
return
params_
;
}
ConfigurableParams
configurable_params
(
)
const
;
void
AddVideoConfig
(
VideoConfig
config
)
;
void
RemoveVideoConfig
(
absl
:
:
string_view
stream_label
)
;
void
SetVideoSubscription
(
VideoSubscription
subscription
)
;
void
GetStats
(
RTCStatsCollectorCallback
*
callback
)
override
;
PeerConfigurer
:
:
VideoSource
ReleaseVideoSource
(
size_t
i
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
std
:
:
move
(
video_sources_
[
i
]
)
;
}
PeerConnectionFactoryInterface
*
pc_factory
(
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
pc_factory
(
)
;
}
PeerConnectionInterface
*
pc
(
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
pc
(
)
;
}
MockPeerConnectionObserver
*
observer
(
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
observer
(
)
;
}
void
CreateOffer
(
rtc
:
:
scoped_refptr
<
CreateSessionDescriptionObserver
>
observer
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
pc
(
)
-
>
CreateOffer
(
observer
.
get
(
)
params_
.
rtc_offer_answer_options
)
;
}
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
CreateOffer
(
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
CreateOffer
(
params_
.
rtc_offer_answer_options
)
;
}
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
CreateAnswer
(
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
CreateAnswer
(
)
;
}
bool
SetLocalDescription
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
std
:
:
string
*
error_out
=
nullptr
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
SetLocalDescription
(
std
:
:
move
(
desc
)
error_out
)
;
}
bool
SetRemoteDescription
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
std
:
:
string
*
error_out
=
nullptr
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
AddTransceiver
(
cricket
:
:
MediaType
media_type
const
RtpTransceiverInit
&
init
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
AddTransceiver
(
media_type
init
)
;
}
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
AddTrack
(
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
=
{
}
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
AddTrack
(
track
stream_ids
)
;
}
rtc
:
:
scoped_refptr
<
DataChannelInterface
>
CreateDataChannel
(
const
std
:
:
string
&
label
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
CreateDataChannel
(
label
)
;
}
PeerConnectionInterface
:
:
SignalingState
signaling_state
(
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
signaling_state
(
)
;
}
bool
IsIceGatheringDone
(
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
IsIceGatheringDone
(
)
;
}
bool
IsIceConnected
(
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
IsIceConnected
(
)
;
}
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
GetStats
(
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
return
wrapper_
-
>
GetStats
(
)
;
}
void
DetachAecDump
(
)
{
RTC_CHECK
(
wrapper_
)
<
<
"
TestPeer
is
already
closed
"
;
if
(
audio_processing_
)
{
audio_processing_
-
>
DetachAecDump
(
)
;
}
}
bool
AddIceCandidates
(
std
:
:
vector
<
std
:
:
unique_ptr
<
IceCandidateInterface
>
>
candidates
)
;
void
Close
(
)
;
protected
:
friend
class
TestPeerFactory
;
TestPeer
(
rtc
:
:
scoped_refptr
<
PeerConnectionFactoryInterface
>
pc_factory
rtc
:
:
scoped_refptr
<
PeerConnectionInterface
>
pc
std
:
:
unique_ptr
<
MockPeerConnectionObserver
>
observer
Params
params
ConfigurableParams
configurable_params
std
:
:
vector
<
PeerConfigurer
:
:
VideoSource
>
video_sources
rtc
:
:
scoped_refptr
<
AudioProcessing
>
audio_processing
std
:
:
unique_ptr
<
rtc
:
:
Thread
>
worker_thread
)
;
private
:
const
Params
params_
;
mutable
Mutex
mutex_
;
ConfigurableParams
configurable_params_
RTC_GUARDED_BY
(
mutex_
)
;
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
signaling_thread_task_safety_
=
nullptr
;
std
:
:
unique_ptr
<
rtc
:
:
Thread
>
worker_thread_
;
std
:
:
unique_ptr
<
PeerConnectionWrapper
>
wrapper_
;
std
:
:
vector
<
PeerConfigurer
:
:
VideoSource
>
video_sources_
;
rtc
:
:
scoped_refptr
<
AudioProcessing
>
audio_processing_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
IceCandidateInterface
>
>
remote_ice_candidates_
;
}
;
}
}
#
endif
