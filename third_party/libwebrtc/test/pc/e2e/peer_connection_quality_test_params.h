#
ifndef
TEST_PC_E2E_PEER_CONNECTION_QUALITY_TEST_PARAMS_H_
#
define
TEST_PC_E2E_PEER_CONNECTION_QUALITY_TEST_PARAMS_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
async_resolver_factory
.
h
"
#
include
"
api
/
call
/
call_factory_interface
.
h
"
#
include
"
api
/
fec_controller
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log_factory_interface
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
test
/
peerconnection_quality_test_fixture
.
h
"
#
include
"
api
/
transport
/
network_control
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
rtc_certificate_generator
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
struct
PeerConnectionFactoryComponents
{
std
:
:
unique_ptr
<
TaskQueueFactory
>
task_queue_factory
;
std
:
:
unique_ptr
<
CallFactoryInterface
>
call_factory
;
std
:
:
unique_ptr
<
RtcEventLogFactoryInterface
>
event_log_factory
;
std
:
:
unique_ptr
<
FecControllerFactoryInterface
>
fec_controller_factory
;
std
:
:
unique_ptr
<
NetworkControllerFactoryInterface
>
network_controller_factory
;
std
:
:
unique_ptr
<
NetEqFactory
>
neteq_factory
;
std
:
:
unique_ptr
<
VideoEncoderFactory
>
video_encoder_factory
;
std
:
:
unique_ptr
<
VideoDecoderFactory
>
video_decoder_factory
;
}
;
struct
PeerConnectionComponents
{
explicit
PeerConnectionComponents
(
rtc
:
:
NetworkManager
*
network_manager
)
:
network_manager
(
network_manager
)
{
RTC_CHECK
(
network_manager
)
;
}
rtc
:
:
NetworkManager
*
const
network_manager
;
std
:
:
unique_ptr
<
webrtc
:
:
AsyncResolverFactory
>
async_resolver_factory
;
std
:
:
unique_ptr
<
rtc
:
:
RTCCertificateGeneratorInterface
>
cert_generator
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificateVerifier
>
tls_cert_verifier
;
std
:
:
unique_ptr
<
IceTransportFactory
>
ice_transport_factory
;
}
;
struct
InjectableComponents
{
explicit
InjectableComponents
(
rtc
:
:
Thread
*
network_thread
rtc
:
:
NetworkManager
*
network_manager
)
:
network_thread
(
network_thread
)
pcf_dependencies
(
std
:
:
make_unique
<
PeerConnectionFactoryComponents
>
(
)
)
pc_dependencies
(
std
:
:
make_unique
<
PeerConnectionComponents
>
(
network_manager
)
)
{
RTC_CHECK
(
network_thread
)
;
}
rtc
:
:
Thread
*
const
network_thread
;
std
:
:
unique_ptr
<
PeerConnectionFactoryComponents
>
pcf_dependencies
;
std
:
:
unique_ptr
<
PeerConnectionComponents
>
pc_dependencies
;
}
;
struct
Params
{
absl
:
:
optional
<
std
:
:
string
>
name
;
std
:
:
vector
<
PeerConnectionE2EQualityTestFixture
:
:
VideoConfig
>
video_configs
;
absl
:
:
optional
<
PeerConnectionE2EQualityTestFixture
:
:
AudioConfig
>
audio_config
;
absl
:
:
optional
<
std
:
:
string
>
rtc_event_log_path
;
absl
:
:
optional
<
std
:
:
string
>
aec_dump_path
;
PeerConnectionInterface
:
:
RTCConfiguration
rtc_configuration
;
BitrateSettings
bitrate_settings
;
}
;
}
}
#
endif
