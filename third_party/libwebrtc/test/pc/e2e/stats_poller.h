#
ifndef
TEST_PC_E2E_STATS_POLLER_H_
#
define
TEST_PC_E2E_STATS_POLLER_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
stats
/
rtc_stats_collector_callback
.
h
"
#
include
"
api
/
test
/
stats_observer_interface
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
test
/
pc
/
e2e
/
test_peer
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
class
InternalStatsObserver
:
public
RTCStatsCollectorCallback
{
public
:
InternalStatsObserver
(
absl
:
:
string_view
pc_label
TestPeer
*
peer
std
:
:
vector
<
StatsObserverInterface
*
>
observers
)
:
pc_label_
(
pc_label
)
peer_
(
peer
)
observers_
(
std
:
:
move
(
observers
)
)
{
}
void
PollStats
(
)
;
void
OnStatsDelivered
(
const
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
&
report
)
override
;
private
:
std
:
:
string
pc_label_
;
TestPeer
*
peer_
;
std
:
:
vector
<
StatsObserverInterface
*
>
observers_
;
}
;
class
StatsPoller
{
public
:
StatsPoller
(
std
:
:
vector
<
StatsObserverInterface
*
>
observers
std
:
:
map
<
std
:
:
string
TestPeer
*
>
peers_to_observe
)
;
void
PollStatsAndNotifyObservers
(
)
;
void
RegisterParticipantInCall
(
absl
:
:
string_view
peer_name
TestPeer
*
peer
)
;
private
:
const
std
:
:
vector
<
StatsObserverInterface
*
>
observers_
;
webrtc
:
:
Mutex
mutex_
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
InternalStatsObserver
>
>
pollers_
RTC_GUARDED_BY
(
mutex_
)
;
}
;
}
}
#
endif
