#
ifndef
TEST_PC_E2E_TEST_ACTIVITIES_EXECUTOR_H_
#
define
TEST_PC_E2E_TEST_ACTIVITIES_EXECUTOR_H_
#
include
<
functional
>
#
include
<
optional
>
#
include
<
queue
>
#
include
<
vector
>
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
task_queue_for_test
.
h
"
#
include
"
rtc_base
/
task_utils
/
repeating_task
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
class
TestActivitiesExecutor
{
public
:
explicit
TestActivitiesExecutor
(
Clock
*
clock
)
:
clock_
(
clock
)
{
}
~
TestActivitiesExecutor
(
)
{
Stop
(
)
;
}
void
Start
(
TaskQueueForTest
*
task_queue
)
{
Start
(
task_queue
-
>
Get
(
)
)
;
}
void
Start
(
TaskQueueBase
*
task_queue
)
;
void
Stop
(
)
;
void
ScheduleActivity
(
TimeDelta
initial_delay_since_start
std
:
:
optional
<
TimeDelta
>
interval
std
:
:
function
<
void
(
TimeDelta
)
>
func
)
;
private
:
struct
ScheduledActivity
{
ScheduledActivity
(
TimeDelta
initial_delay_since_start
std
:
:
optional
<
TimeDelta
>
interval
std
:
:
function
<
void
(
TimeDelta
)
>
func
)
;
TimeDelta
initial_delay_since_start
;
std
:
:
optional
<
TimeDelta
>
interval
;
std
:
:
function
<
void
(
TimeDelta
)
>
func
;
}
;
void
PostActivity
(
ScheduledActivity
activity
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
lock_
)
;
Timestamp
Now
(
)
const
;
Clock
*
const
clock_
;
TaskQueueBase
*
task_queue_
;
Mutex
lock_
;
Timestamp
start_time_
RTC_GUARDED_BY
(
lock_
)
=
Timestamp
:
:
MinusInfinity
(
)
;
std
:
:
queue
<
ScheduledActivity
>
scheduled_activities_
RTC_GUARDED_BY
(
lock_
)
;
std
:
:
vector
<
RepeatingTaskHandle
>
repeating_task_handles_
RTC_GUARDED_BY
(
lock_
)
;
}
;
}
}
#
endif
