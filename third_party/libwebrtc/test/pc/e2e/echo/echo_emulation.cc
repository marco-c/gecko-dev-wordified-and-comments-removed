#
include
"
test
/
pc
/
e2e
/
echo
/
echo_emulation
.
h
"
#
include
<
limits
>
#
include
<
utility
>
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
namespace
{
constexpr
int
kSingleBufferDurationMs
=
10
;
}
EchoEmulatingCapturer
:
:
EchoEmulatingCapturer
(
std
:
:
unique_ptr
<
TestAudioDeviceModule
:
:
Capturer
>
capturer
PeerConnectionE2EQualityTestFixture
:
:
EchoEmulationConfig
config
)
:
delegate_
(
std
:
:
move
(
capturer
)
)
config_
(
config
)
renderer_queue_
(
2
*
config_
.
echo_delay
.
ms
(
)
/
kSingleBufferDurationMs
)
queue_input_
(
TestAudioDeviceModule
:
:
SamplesPerFrame
(
delegate_
-
>
SamplingFrequency
(
)
)
*
delegate_
-
>
NumChannels
(
)
)
queue_output_
(
TestAudioDeviceModule
:
:
SamplesPerFrame
(
delegate_
-
>
SamplingFrequency
(
)
)
*
delegate_
-
>
NumChannels
(
)
)
{
renderer_thread_
.
Detach
(
)
;
capturer_thread_
.
Detach
(
)
;
}
void
EchoEmulatingCapturer
:
:
OnAudioRendered
(
rtc
:
:
ArrayView
<
const
int16_t
>
data
)
{
RTC_DCHECK_RUN_ON
(
&
renderer_thread_
)
;
if
(
!
recording_started_
)
{
bool
is_empty
=
true
;
for
(
auto
d
:
data
)
{
if
(
d
!
=
0
)
{
is_empty
=
false
;
break
;
}
}
if
(
is_empty
)
{
return
;
}
recording_started_
=
true
;
}
queue_input_
.
assign
(
data
.
begin
(
)
data
.
end
(
)
)
;
if
(
!
renderer_queue_
.
Insert
(
&
queue_input_
)
)
{
RTC_LOG
(
WARNING
)
<
<
"
Echo
queue
is
full
"
;
}
}
bool
EchoEmulatingCapturer
:
:
Capture
(
rtc
:
:
BufferT
<
int16_t
>
*
buffer
)
{
RTC_DCHECK_RUN_ON
(
&
capturer_thread_
)
;
bool
result
=
delegate_
-
>
Capture
(
buffer
)
;
for
(
size_t
i
=
0
;
i
<
buffer
-
>
size
(
)
;
+
+
i
)
{
(
*
buffer
)
[
i
]
/
=
2
;
}
if
(
!
delay_accumulated_
)
{
delay_accumulated_
=
renderer_queue_
.
SizeAtLeast
(
)
>
=
static_cast
<
size_t
>
(
config_
.
echo_delay
.
ms
(
)
/
kSingleBufferDurationMs
)
;
}
if
(
delay_accumulated_
)
{
RTC_CHECK
(
renderer_queue_
.
Remove
(
&
queue_output_
)
)
;
for
(
size_t
i
=
0
;
i
<
buffer
-
>
size
(
)
&
&
i
<
queue_output_
.
size
(
)
;
+
+
i
)
{
int32_t
res
=
(
*
buffer
)
[
i
]
+
queue_output_
[
i
]
;
if
(
res
<
std
:
:
numeric_limits
<
int16_t
>
:
:
min
(
)
)
{
res
=
std
:
:
numeric_limits
<
int16_t
>
:
:
min
(
)
;
}
if
(
res
>
std
:
:
numeric_limits
<
int16_t
>
:
:
max
(
)
)
{
res
=
std
:
:
numeric_limits
<
int16_t
>
:
:
max
(
)
;
}
(
*
buffer
)
[
i
]
=
static_cast
<
int16_t
>
(
res
)
;
}
}
return
result
;
}
EchoEmulatingRenderer
:
:
EchoEmulatingRenderer
(
std
:
:
unique_ptr
<
TestAudioDeviceModule
:
:
Renderer
>
renderer
EchoEmulatingCapturer
*
echo_emulating_capturer
)
:
delegate_
(
std
:
:
move
(
renderer
)
)
echo_emulating_capturer_
(
echo_emulating_capturer
)
{
RTC_DCHECK
(
echo_emulating_capturer_
)
;
}
bool
EchoEmulatingRenderer
:
:
Render
(
rtc
:
:
ArrayView
<
const
int16_t
>
data
)
{
if
(
data
.
size
(
)
>
0
)
{
echo_emulating_capturer_
-
>
OnAudioRendered
(
data
)
;
}
return
delegate_
-
>
Render
(
data
)
;
}
}
}
