#
include
"
test
/
pc
/
e2e
/
stats_poller
.
h
"
#
include
"
api
/
stats
/
rtc_stats_collector_callback
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
namespace
{
using
:
:
testing
:
:
Eq
;
class
TestStatsProvider
:
public
StatsProvider
{
public
:
~
TestStatsProvider
(
)
override
=
default
;
void
GetStats
(
RTCStatsCollectorCallback
*
callback
)
override
{
stats_collections_count_
+
+
;
}
int
stats_collections_count
(
)
const
{
return
stats_collections_count_
;
}
private
:
int
stats_collections_count_
=
0
;
}
;
class
MockStatsObserver
:
public
StatsObserverInterface
{
public
:
~
MockStatsObserver
(
)
override
=
default
;
MOCK_METHOD
(
void
OnStatsReports
(
absl
:
:
string_view
pc_label
const
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
&
report
)
)
;
}
;
TEST
(
StatsPollerTest
UnregisterParticipantAddedInCtor
)
{
TestStatsProvider
alice
;
TestStatsProvider
bob
;
MockStatsObserver
stats_observer
;
StatsPoller
poller
(
{
&
stats_observer
}
{
{
"
alice
"
&
alice
}
{
"
bob
"
&
bob
}
}
)
;
poller
.
PollStatsAndNotifyObservers
(
)
;
EXPECT_THAT
(
alice
.
stats_collections_count
(
)
Eq
(
1
)
)
;
EXPECT_THAT
(
bob
.
stats_collections_count
(
)
Eq
(
1
)
)
;
poller
.
UnregisterParticipantInCall
(
"
bob
"
)
;
poller
.
PollStatsAndNotifyObservers
(
)
;
EXPECT_THAT
(
alice
.
stats_collections_count
(
)
Eq
(
2
)
)
;
EXPECT_THAT
(
bob
.
stats_collections_count
(
)
Eq
(
1
)
)
;
}
TEST
(
StatsPollerTest
UnregisterParticipantRegisteredInCall
)
{
TestStatsProvider
alice
;
TestStatsProvider
bob
;
MockStatsObserver
stats_observer
;
StatsPoller
poller
(
{
&
stats_observer
}
{
{
"
alice
"
&
alice
}
}
)
;
poller
.
RegisterParticipantInCall
(
"
bob
"
&
bob
)
;
poller
.
PollStatsAndNotifyObservers
(
)
;
EXPECT_THAT
(
alice
.
stats_collections_count
(
)
Eq
(
1
)
)
;
EXPECT_THAT
(
bob
.
stats_collections_count
(
)
Eq
(
1
)
)
;
poller
.
UnregisterParticipantInCall
(
"
bob
"
)
;
poller
.
PollStatsAndNotifyObservers
(
)
;
EXPECT_THAT
(
alice
.
stats_collections_count
(
)
Eq
(
2
)
)
;
EXPECT_THAT
(
bob
.
stats_collections_count
(
)
Eq
(
1
)
)
;
}
}
}
}
