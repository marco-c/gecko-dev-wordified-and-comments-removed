#
include
"
test
/
network
/
schedulable_network_behavior
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
test
/
create_network_emulation_manager
.
h
"
#
include
"
api
/
test
/
network_emulation_manager
.
h
"
#
include
"
api
/
test
/
simulated_network
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
using
:
:
testing
:
:
Mock
;
using
:
:
testing
:
:
MockFunction
;
using
:
:
testing
:
:
Return
;
using
:
:
testing
:
:
Sequence
;
using
:
:
testing
:
:
SizeIs
;
class
SchedulableNetworkBehaviorTestFixture
{
public
:
SchedulableNetworkBehaviorTestFixture
(
)
:
manager_
(
webrtc
:
:
CreateNetworkEmulationManager
(
{
.
time_mode
=
TimeMode
:
:
kSimulated
}
)
)
{
}
webrtc
:
:
Clock
&
clock
(
)
const
{
return
*
manager_
-
>
time_controller
(
)
-
>
GetClock
(
)
;
}
void
AdvanceTime
(
webrtc
:
:
TimeDelta
delta
)
{
manager_
-
>
time_controller
(
)
-
>
AdvanceTime
(
delta
)
;
}
void
AdvanceTimeTo
(
int64_t
timestamp_us
)
{
TimeDelta
delta
=
Timestamp
:
:
Micros
(
timestamp_us
)
-
TimeNow
(
)
;
ASSERT_GE
(
delta
TimeDelta
:
:
Zero
(
)
)
;
manager_
-
>
time_controller
(
)
-
>
AdvanceTime
(
delta
)
;
}
webrtc
:
:
Timestamp
TimeNow
(
)
const
{
return
manager_
-
>
time_controller
(
)
-
>
GetClock
(
)
-
>
CurrentTime
(
)
;
}
private
:
const
std
:
:
unique_ptr
<
webrtc
:
:
NetworkEmulationManager
>
manager_
;
}
;
TEST
(
SchedulableNetworkBehaviorTest
NoSchedule
)
{
SchedulableNetworkBehaviorTestFixture
fixture
;
network_behaviour
:
:
NetworkConfigSchedule
schedule
;
SchedulableNetworkBehavior
network_behaviour
(
schedule
fixture
.
clock
(
)
)
;
webrtc
:
:
Timestamp
send_time
=
fixture
.
TimeNow
(
)
;
EXPECT_TRUE
(
network_behaviour
.
EnqueuePacket
(
{
1000
/
8
send_time
.
us
(
)
1
}
)
)
;
ASSERT_TRUE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
fixture
.
AdvanceTimeTo
(
*
network_behaviour
.
NextDeliveryTimeUs
(
)
)
;
EXPECT_THAT
(
network_behaviour
.
DequeueDeliverablePackets
(
fixture
.
TimeNow
(
)
.
us
(
)
)
SizeIs
(
1
)
)
;
}
TEST
(
SchedulableNetworkBehaviorTest
ScheduleWithoutUpdates
)
{
SchedulableNetworkBehaviorTestFixture
fixture
;
network_behaviour
:
:
NetworkConfigSchedule
schedule
;
auto
initial_config
=
schedule
.
add_item
(
)
;
initial_config
-
>
set_link_capacity_kbps
(
10
)
;
initial_config
-
>
set_queue_delay_ms
(
70
)
;
SchedulableNetworkBehavior
network_behaviour
(
schedule
fixture
.
clock
(
)
)
;
webrtc
:
:
Timestamp
send_time
=
fixture
.
TimeNow
(
)
;
EXPECT_TRUE
(
network_behaviour
.
EnqueuePacket
(
{
1000
/
8
send_time
.
us
(
)
1
}
)
)
;
std
:
:
vector
<
webrtc
:
:
PacketDeliveryInfo
>
packet_delivery_infos
;
while
(
packet_delivery_infos
.
empty
(
)
)
{
ASSERT_TRUE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
fixture
.
AdvanceTimeTo
(
*
network_behaviour
.
NextDeliveryTimeUs
(
)
)
;
packet_delivery_infos
=
network_behaviour
.
DequeueDeliverablePackets
(
fixture
.
TimeNow
(
)
.
us
(
)
)
;
}
EXPECT_EQ
(
fixture
.
TimeNow
(
)
send_time
+
TimeDelta
:
:
Millis
(
170
)
)
;
ASSERT_THAT
(
packet_delivery_infos
SizeIs
(
1
)
)
;
EXPECT_EQ
(
packet_delivery_infos
[
0
]
.
packet_id
1u
)
;
EXPECT_EQ
(
packet_delivery_infos
[
0
]
.
receive_time_us
send_time
.
us
(
)
+
170
'
000
)
;
}
TEST
(
SchedulableNetworkBehaviorTest
TriggersDeliveryTimeChangedCallbackOnScheduleIfPacketInLinkCapacityQueue
)
{
SchedulableNetworkBehaviorTestFixture
fixture
;
network_behaviour
:
:
NetworkConfigSchedule
schedule
;
auto
initial_config
=
schedule
.
add_item
(
)
;
initial_config
-
>
set_link_capacity_kbps
(
10
)
;
initial_config
-
>
set_queue_delay_ms
(
10
)
;
auto
updated_capacity
=
schedule
.
add_item
(
)
;
updated_capacity
-
>
set_time_since_first_sent_packet_ms
(
50
)
;
updated_capacity
-
>
set_link_capacity_kbps
(
100
)
;
SchedulableNetworkBehavior
network_behaviour
(
schedule
fixture
.
clock
(
)
)
;
MockFunction
<
void
(
)
>
delivery_time_changed_callback
;
network_behaviour
.
RegisterDeliveryTimeChangedCallback
(
delivery_time_changed_callback
.
AsStdFunction
(
)
)
;
webrtc
:
:
Timestamp
first_packet_send_time
=
fixture
.
TimeNow
(
)
;
EXPECT_CALL
(
delivery_time_changed_callback
Call
)
.
WillOnce
(
[
&
]
(
)
{
EXPECT_EQ
(
fixture
.
TimeNow
(
)
first_packet_send_time
+
TimeDelta
:
:
Millis
(
50
)
)
;
ASSERT_TRUE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
}
)
;
EXPECT_TRUE
(
network_behaviour
.
EnqueuePacket
(
{
1000
/
8
first_packet_send_time
.
us
(
)
1
}
)
)
;
fixture
.
AdvanceTime
(
TimeDelta
:
:
Millis
(
updated_capacity
-
>
time_since_first_sent_packet_ms
(
)
)
)
;
Mock
:
:
VerifyAndClearExpectations
(
&
delivery_time_changed_callback
)
;
ASSERT_TRUE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
fixture
.
AdvanceTime
(
TimeDelta
:
:
Micros
(
*
network_behaviour
.
NextDeliveryTimeUs
(
)
)
)
;
std
:
:
vector
<
PacketDeliveryInfo
>
dequeued_packets
=
network_behaviour
.
DequeueDeliverablePackets
(
fixture
.
TimeNow
(
)
.
us
(
)
)
;
ASSERT_FALSE
(
dequeued_packets
.
empty
(
)
)
;
EXPECT_EQ
(
dequeued_packets
[
0
]
.
receive_time_us
(
first_packet_send_time
+
TimeDelta
:
:
Millis
(
55
)
+
TimeDelta
:
:
Millis
(
10
)
)
.
us
(
)
)
;
}
TEST
(
SchedulableNetworkBehaviorTest
ScheduleStartedWhenStartConditionTrue
)
{
SchedulableNetworkBehaviorTestFixture
fixture
;
network_behaviour
:
:
NetworkConfigSchedule
schedule
;
auto
initial_config
=
schedule
.
add_item
(
)
;
initial_config
-
>
set_link_capacity_kbps
(
0
)
;
auto
item
=
schedule
.
add_item
(
)
;
item
-
>
set_time_since_first_sent_packet_ms
(
1
)
;
item
-
>
set_link_capacity_kbps
(
1000000
)
;
MockFunction
<
bool
(
Timestamp
)
>
start_condition
;
webrtc
:
:
Timestamp
first_packet_send_time
=
fixture
.
TimeNow
(
)
;
webrtc
:
:
Timestamp
second_packet_send_time
=
fixture
.
TimeNow
(
)
+
TimeDelta
:
:
Millis
(
100
)
;
Sequence
s
;
EXPECT_CALL
(
start_condition
Call
(
first_packet_send_time
)
)
.
InSequence
(
s
)
.
WillOnce
(
Return
(
false
)
)
;
EXPECT_CALL
(
start_condition
Call
(
second_packet_send_time
)
)
.
InSequence
(
s
)
.
WillOnce
(
Return
(
true
)
)
;
SchedulableNetworkBehavior
network_behaviour
(
schedule
fixture
.
clock
(
)
start_condition
.
AsStdFunction
(
)
)
;
EXPECT_TRUE
(
network_behaviour
.
EnqueuePacket
(
{
1000
/
8
first_packet_send_time
.
us
(
)
1
}
)
)
;
EXPECT_FALSE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
fixture
.
AdvanceTime
(
TimeDelta
:
:
Millis
(
100
)
)
;
EXPECT_FALSE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
EXPECT_TRUE
(
network_behaviour
.
EnqueuePacket
(
{
1000
/
8
second_packet_send_time
.
us
(
)
2
}
)
)
;
EXPECT_FALSE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
fixture
.
AdvanceTime
(
TimeDelta
:
:
Millis
(
1
)
)
;
EXPECT_TRUE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
}
TEST
(
SchedulableNetworkBehaviorTest
ScheduleWithRepeat
)
{
SchedulableNetworkBehaviorTestFixture
fixture
;
network_behaviour
:
:
NetworkConfigSchedule
schedule
;
auto
initial_config
=
schedule
.
add_item
(
)
;
initial_config
-
>
set_link_capacity_kbps
(
10
)
;
auto
updated_capacity
=
schedule
.
add_item
(
)
;
updated_capacity
-
>
set_time_since_first_sent_packet_ms
(
150
)
;
updated_capacity
-
>
set_link_capacity_kbps
(
100
)
;
schedule
.
set_repeat_schedule_after_last_ms
(
200
)
;
SchedulableNetworkBehavior
network_behaviour
(
schedule
fixture
.
clock
(
)
)
;
webrtc
:
:
Timestamp
first_packet_send_time
=
fixture
.
TimeNow
(
)
;
EXPECT_TRUE
(
network_behaviour
.
EnqueuePacket
(
{
1000
/
8
first_packet_send_time
.
us
(
)
1
}
)
)
;
ASSERT_TRUE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
EXPECT_EQ
(
*
network_behaviour
.
NextDeliveryTimeUs
(
)
fixture
.
TimeNow
(
)
.
us
(
)
+
TimeDelta
:
:
Millis
(
100
)
.
us
(
)
)
;
fixture
.
AdvanceTimeTo
(
*
network_behaviour
.
NextDeliveryTimeUs
(
)
)
;
EXPECT_THAT
(
network_behaviour
.
DequeueDeliverablePackets
(
fixture
.
TimeNow
(
)
.
us
(
)
)
SizeIs
(
1
)
)
;
fixture
.
AdvanceTime
(
TimeDelta
:
:
Millis
(
updated_capacity
-
>
time_since_first_sent_packet_ms
(
)
+
schedule
.
repeat_schedule_after_last_ms
(
)
-
100
)
)
;
EXPECT_TRUE
(
network_behaviour
.
EnqueuePacket
(
{
1000
/
8
fixture
.
TimeNow
(
)
.
us
(
)
2
}
)
)
;
ASSERT_TRUE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
EXPECT_EQ
(
*
network_behaviour
.
NextDeliveryTimeUs
(
)
fixture
.
TimeNow
(
)
.
us
(
)
+
TimeDelta
:
:
Millis
(
100
)
.
us
(
)
)
;
}
TEST
(
SchedulableNetworkBehaviorTest
ScheduleWithoutRepeat
)
{
SchedulableNetworkBehaviorTestFixture
fixture
;
network_behaviour
:
:
NetworkConfigSchedule
schedule
;
auto
initial_config
=
schedule
.
add_item
(
)
;
initial_config
-
>
set_link_capacity_kbps
(
10
)
;
auto
updated_capacity
=
schedule
.
add_item
(
)
;
updated_capacity
-
>
set_time_since_first_sent_packet_ms
(
150
)
;
updated_capacity
-
>
set_link_capacity_kbps
(
100
)
;
SchedulableNetworkBehavior
network_behaviour
(
schedule
fixture
.
clock
(
)
)
;
webrtc
:
:
Timestamp
first_packet_send_time
=
fixture
.
TimeNow
(
)
;
EXPECT_TRUE
(
network_behaviour
.
EnqueuePacket
(
{
1000
/
8
first_packet_send_time
.
us
(
)
1
}
)
)
;
ASSERT_TRUE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
EXPECT_EQ
(
*
network_behaviour
.
NextDeliveryTimeUs
(
)
fixture
.
TimeNow
(
)
.
us
(
)
+
TimeDelta
:
:
Millis
(
100
)
.
us
(
)
)
;
fixture
.
AdvanceTimeTo
(
*
network_behaviour
.
NextDeliveryTimeUs
(
)
)
;
EXPECT_THAT
(
network_behaviour
.
DequeueDeliverablePackets
(
fixture
.
TimeNow
(
)
.
us
(
)
)
SizeIs
(
1
)
)
;
fixture
.
AdvanceTime
(
TimeDelta
:
:
Millis
(
updated_capacity
-
>
time_since_first_sent_packet_ms
(
)
-
100
)
+
TimeDelta
:
:
Minutes
(
1
)
)
;
EXPECT_TRUE
(
network_behaviour
.
EnqueuePacket
(
{
1000
/
8
fixture
.
TimeNow
(
)
.
us
(
)
2
}
)
)
;
ASSERT_TRUE
(
network_behaviour
.
NextDeliveryTimeUs
(
)
.
has_value
(
)
)
;
EXPECT_EQ
(
*
network_behaviour
.
NextDeliveryTimeUs
(
)
fixture
.
TimeNow
(
)
.
us
(
)
+
TimeDelta
:
:
Millis
(
10
)
.
us
(
)
)
;
fixture
.
AdvanceTimeTo
(
*
network_behaviour
.
NextDeliveryTimeUs
(
)
)
;
EXPECT_THAT
(
network_behaviour
.
DequeueDeliverablePackets
(
fixture
.
TimeNow
(
)
.
us
(
)
)
SizeIs
(
1
)
)
;
}
}
}
