#
ifndef
TEST_NETWORK_EMULATED_NETWORK_MANAGER_H_
#
define
TEST_NETWORK_EMULATED_NETWORK_MANAGER_H_
#
include
<
functional
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
base
/
nullability
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
test
/
network_emulation
/
network_emulation_interfaces
.
h
"
#
include
"
api
/
test
/
network_emulation_manager
.
h
"
#
include
"
api
/
test
/
time_controller
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
socket_server
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
test
/
network
/
network_emulation
.
h
"
namespace
webrtc
{
namespace
test
{
class
EmulatedNetworkManager
:
public
EmulatedNetworkManagerInterface
{
public
:
EmulatedNetworkManager
(
absl
:
:
Nonnull
<
TimeController
*
>
time_controller
absl
:
:
Nonnull
<
TaskQueueBase
*
>
task_queue
absl
:
:
Nonnull
<
EndpointsContainer
*
>
endpoints_container
)
;
~
EmulatedNetworkManager
(
)
override
;
void
UpdateNetworks
(
)
;
absl
:
:
Nonnull
<
Thread
*
>
network_thread
(
)
override
{
return
network_thread_
.
get
(
)
;
}
absl
:
:
Nonnull
<
rtc
:
:
SocketFactory
*
>
socket_factory
(
)
override
{
return
socket_server_
;
}
absl
:
:
Nonnull
<
std
:
:
unique_ptr
<
rtc
:
:
NetworkManager
>
>
ReleaseNetworkManager
(
)
override
;
std
:
:
vector
<
EmulatedEndpoint
*
>
endpoints
(
)
const
override
{
return
endpoints_container_
-
>
GetEndpoints
(
)
;
}
void
GetStats
(
std
:
:
function
<
void
(
EmulatedNetworkStats
)
>
stats_callback
)
const
override
;
private
:
class
NetworkManagerImpl
;
const
absl
:
:
Nonnull
<
TaskQueueBase
*
>
task_queue_
;
const
absl
:
:
Nonnull
<
const
EndpointsContainer
*
>
endpoints_container_
;
const
absl
:
:
Nonnull
<
rtc
:
:
SocketServer
*
>
socket_server_
;
const
absl
:
:
Nonnull
<
std
:
:
unique_ptr
<
Thread
>
>
network_thread_
;
absl
:
:
Nullable
<
std
:
:
unique_ptr
<
NetworkManagerImpl
>
>
network_manager_
;
const
absl
:
:
Nonnull
<
NetworkManagerImpl
*
>
network_manager_ptr_
;
}
;
}
}
#
endif
