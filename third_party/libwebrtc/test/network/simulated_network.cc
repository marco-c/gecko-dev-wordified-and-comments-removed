#
include
"
test
/
network
/
simulated_network
.
h
"
#
include
<
algorithm
>
#
include
<
cmath
>
#
include
<
cstdint
>
#
include
<
utility
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
test
/
simulated_network
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
Timestamp
CalculateArrivalTime
(
Timestamp
start_time
int64_t
bits
DataRate
capacity
)
{
if
(
capacity
.
IsInfinite
(
)
)
{
return
start_time
;
}
if
(
capacity
.
IsZero
(
)
)
{
return
Timestamp
:
:
PlusInfinity
(
)
;
}
return
start_time
+
TimeDelta
:
:
Micros
(
(
1000
*
bits
+
capacity
.
kbps
(
)
-
1
)
/
capacity
.
kbps
(
)
)
;
}
void
UpdateLegacyConfiguration
(
SimulatedNetwork
:
:
Config
&
config
)
{
if
(
config
.
link_capacity_kbps
!
=
0
)
{
RTC_DCHECK
(
config
.
link_capacity
=
=
DataRate
:
:
KilobitsPerSec
(
config
.
link_capacity_kbps
)
|
|
config
.
link_capacity
=
=
DataRate
:
:
Infinity
(
)
)
;
config
.
link_capacity
=
DataRate
:
:
KilobitsPerSec
(
config
.
link_capacity_kbps
)
;
}
}
}
SimulatedNetwork
:
:
SimulatedNetwork
(
Config
config
uint64_t
random_seed
)
:
random_
(
random_seed
)
bursting_
(
false
)
last_enqueue_time_us_
(
0
)
{
SetConfig
(
config
)
;
}
SimulatedNetwork
:
:
~
SimulatedNetwork
(
)
=
default
;
void
SimulatedNetwork
:
:
SetConfig
(
const
Config
&
config
)
{
MutexLock
lock
(
&
config_lock_
)
;
config_state_
.
config
=
config
;
UpdateLegacyConfiguration
(
config_state_
.
config
)
;
double
prob_loss
=
config
.
loss_percent
/
100
.
0
;
if
(
config_state_
.
config
.
avg_burst_loss_length
=
=
-
1
)
{
config_state_
.
prob_loss_bursting
=
prob_loss
;
config_state_
.
prob_start_bursting
=
prob_loss
;
}
else
{
int
avg_burst_loss_length
=
config
.
avg_burst_loss_length
;
int
min_avg_burst_loss_length
=
std
:
:
ceil
(
prob_loss
/
(
1
-
prob_loss
)
)
;
RTC_CHECK_GT
(
avg_burst_loss_length
min_avg_burst_loss_length
)
<
<
"
For
a
total
packet
loss
of
"
<
<
config
.
loss_percent
<
<
"
%
%
then
"
"
avg_burst_loss_length
must
be
"
<
<
min_avg_burst_loss_length
+
1
<
<
"
or
higher
.
"
;
config_state_
.
prob_loss_bursting
=
(
1
.
0
-
1
.
0
/
avg_burst_loss_length
)
;
config_state_
.
prob_start_bursting
=
prob_loss
/
(
1
-
prob_loss
)
/
avg_burst_loss_length
;
}
}
void
SimulatedNetwork
:
:
SetConfig
(
const
BuiltInNetworkBehaviorConfig
&
new_config
Timestamp
config_update_time
)
{
RTC_DCHECK_RUNS_SERIALIZED
(
&
process_checker_
)
;
if
(
!
capacity_link_
.
empty
(
)
)
{
const
BuiltInNetworkBehaviorConfig
&
current_config
=
GetConfigState
(
)
.
config
;
TimeDelta
duration_with_current_config
=
config_update_time
-
capacity_link_
.
front
(
)
.
last_update_time
;
RTC_DCHECK_GE
(
duration_with_current_config
TimeDelta
:
:
Zero
(
)
)
;
capacity_link_
.
front
(
)
.
bits_left_to_send
-
=
std
:
:
min
(
duration_with_current_config
.
ms
(
)
*
current_config
.
link_capacity
.
kbps
(
)
capacity_link_
.
front
(
)
.
bits_left_to_send
)
;
capacity_link_
.
front
(
)
.
last_update_time
=
config_update_time
;
}
SetConfig
(
new_config
)
;
UpdateCapacityQueue
(
GetConfigState
(
)
config_update_time
)
;
if
(
UpdateNextProcessTime
(
)
&
&
next_process_time_changed_callback_
)
{
next_process_time_changed_callback_
(
)
;
}
}
void
SimulatedNetwork
:
:
UpdateConfig
(
std
:
:
function
<
void
(
BuiltInNetworkBehaviorConfig
*
)
>
config_modifier
)
{
MutexLock
lock
(
&
config_lock_
)
;
config_modifier
(
&
config_state_
.
config
)
;
UpdateLegacyConfiguration
(
config_state_
.
config
)
;
}
void
SimulatedNetwork
:
:
PauseTransmissionUntil
(
int64_t
until_us
)
{
MutexLock
lock
(
&
config_lock_
)
;
config_state_
.
pause_transmission_until_us
=
until_us
;
}
bool
SimulatedNetwork
:
:
EnqueuePacket
(
PacketInFlightInfo
packet
)
{
RTC_DCHECK_RUNS_SERIALIZED
(
&
process_checker_
)
;
ConfigState
state
=
GetConfigState
(
)
;
packet
.
size
+
=
state
.
config
.
packet_overhead
;
if
(
state
.
config
.
queue_length_packets
>
0
&
&
capacity_link_
.
size
(
)
>
=
state
.
config
.
queue_length_packets
)
{
return
false
;
}
Timestamp
enqueue_time
=
Timestamp
:
:
Micros
(
packet
.
send_time_us
)
;
Timestamp
arrival_time
=
capacity_link_
.
empty
(
)
?
CalculateArrivalTime
(
std
:
:
max
(
enqueue_time
last_capacity_link_exit_time_
)
packet
.
size
*
8
state
.
config
.
link_capacity
)
:
Timestamp
:
:
PlusInfinity
(
)
;
capacity_link_
.
push
(
{
.
packet
=
packet
.
last_update_time
=
enqueue_time
.
bits_left_to_send
=
8
*
static_cast
<
int64_t
>
(
packet
.
size
)
.
arrival_time
=
arrival_time
}
)
;
if
(
next_process_time_
.
IsInfinite
(
)
&
&
arrival_time
.
IsFinite
(
)
)
{
RTC_DCHECK_EQ
(
capacity_link_
.
size
(
)
1
)
;
next_process_time_
=
arrival_time
;
}
last_enqueue_time_us_
=
packet
.
send_time_us
;
return
true
;
}
absl
:
:
optional
<
int64_t
>
SimulatedNetwork
:
:
NextDeliveryTimeUs
(
)
const
{
RTC_DCHECK_RUNS_SERIALIZED
(
&
process_checker_
)
;
if
(
next_process_time_
.
IsFinite
(
)
)
{
return
next_process_time_
.
us
(
)
;
}
return
absl
:
:
nullopt
;
}
void
SimulatedNetwork
:
:
UpdateCapacityQueue
(
ConfigState
state
Timestamp
time_now
)
{
if
(
!
capacity_link_
.
empty
(
)
)
{
capacity_link_
.
front
(
)
.
last_update_time
=
std
:
:
max
(
capacity_link_
.
front
(
)
.
last_update_time
last_capacity_link_exit_time_
)
;
capacity_link_
.
front
(
)
.
arrival_time
=
CalculateArrivalTime
(
capacity_link_
.
front
(
)
.
last_update_time
capacity_link_
.
front
(
)
.
bits_left_to_send
state
.
config
.
link_capacity
)
;
}
if
(
capacity_link_
.
empty
(
)
|
|
time_now
<
capacity_link_
.
front
(
)
.
arrival_time
)
{
return
;
}
bool
reorder_packets
=
false
;
do
{
PacketInfo
packet
=
capacity_link_
.
front
(
)
;
RTC_DCHECK
(
packet
.
arrival_time
.
IsFinite
(
)
)
;
capacity_link_
.
pop
(
)
;
if
(
state
.
pause_transmission_until_us
>
packet
.
arrival_time
.
us
(
)
)
{
packet
.
arrival_time
=
Timestamp
:
:
Micros
(
state
.
pause_transmission_until_us
)
;
}
last_capacity_link_exit_time_
=
packet
.
arrival_time
;
if
(
(
bursting_
&
&
random_
.
Rand
<
double
>
(
)
<
state
.
prob_loss_bursting
)
|
|
(
!
bursting_
&
&
random_
.
Rand
<
double
>
(
)
<
state
.
prob_start_bursting
)
)
{
bursting_
=
true
;
packet
.
arrival_time
=
Timestamp
:
:
MinusInfinity
(
)
;
}
else
{
bursting_
=
false
;
TimeDelta
arrival_time_jitter
=
TimeDelta
:
:
Micros
(
std
:
:
max
(
random_
.
Gaussian
(
state
.
config
.
queue_delay_ms
*
1000
state
.
config
.
delay_standard_deviation_ms
*
1000
)
0
.
0
)
)
;
Timestamp
last_arrival_time
=
delay_link_
.
empty
(
)
?
Timestamp
:
:
MinusInfinity
(
)
:
delay_link_
.
back
(
)
.
arrival_time
;
if
(
!
state
.
config
.
allow_reordering
&
&
!
delay_link_
.
empty
(
)
&
&
packet
.
arrival_time
+
arrival_time_jitter
<
last_arrival_time
)
{
arrival_time_jitter
=
last_arrival_time
-
packet
.
arrival_time
;
}
packet
.
arrival_time
+
=
arrival_time_jitter
;
if
(
last_arrival_time
>
packet
.
arrival_time
)
{
reorder_packets
=
true
;
}
}
delay_link_
.
emplace_back
(
packet
)
;
if
(
capacity_link_
.
empty
(
)
)
{
break
;
}
Timestamp
next_start
=
std
:
:
max
(
last_capacity_link_exit_time_
capacity_link_
.
front
(
)
.
last_update_time
)
;
capacity_link_
.
front
(
)
.
arrival_time
=
CalculateArrivalTime
(
next_start
capacity_link_
.
front
(
)
.
packet
.
size
*
8
state
.
config
.
link_capacity
)
;
}
while
(
capacity_link_
.
front
(
)
.
arrival_time
<
=
time_now
)
;
if
(
state
.
config
.
allow_reordering
&
&
reorder_packets
)
{
std
:
:
stable_sort
(
delay_link_
.
begin
(
)
delay_link_
.
end
(
)
[
]
(
const
PacketInfo
&
p1
const
PacketInfo
&
p2
)
{
return
p1
.
arrival_time
<
p2
.
arrival_time
;
}
)
;
}
}
SimulatedNetwork
:
:
ConfigState
SimulatedNetwork
:
:
GetConfigState
(
)
const
{
MutexLock
lock
(
&
config_lock_
)
;
return
config_state_
;
}
std
:
:
vector
<
PacketDeliveryInfo
>
SimulatedNetwork
:
:
DequeueDeliverablePackets
(
int64_t
receive_time_us
)
{
RTC_DCHECK_RUNS_SERIALIZED
(
&
process_checker_
)
;
Timestamp
receive_time
=
Timestamp
:
:
Micros
(
receive_time_us
)
;
UpdateCapacityQueue
(
GetConfigState
(
)
receive_time
)
;
std
:
:
vector
<
PacketDeliveryInfo
>
packets_to_deliver
;
while
(
!
delay_link_
.
empty
(
)
&
&
receive_time
>
=
delay_link_
.
front
(
)
.
arrival_time
)
{
PacketInfo
packet_info
=
delay_link_
.
front
(
)
;
packets_to_deliver
.
emplace_back
(
PacketDeliveryInfo
(
packet_info
.
packet
packet_info
.
arrival_time
.
IsFinite
(
)
?
packet_info
.
arrival_time
.
us
(
)
:
PacketDeliveryInfo
:
:
kNotReceived
)
)
;
delay_link_
.
pop_front
(
)
;
}
UpdateNextProcessTime
(
)
;
return
packets_to_deliver
;
}
bool
SimulatedNetwork
:
:
UpdateNextProcessTime
(
)
{
Timestamp
next_process_time
=
next_process_time_
;
next_process_time_
=
Timestamp
:
:
PlusInfinity
(
)
;
for
(
const
PacketInfo
&
packet
:
delay_link_
)
{
if
(
packet
.
arrival_time
.
IsFinite
(
)
)
{
next_process_time_
=
packet
.
arrival_time
;
break
;
}
}
if
(
next_process_time_
.
IsInfinite
(
)
&
&
!
capacity_link_
.
empty
(
)
)
{
next_process_time_
=
capacity_link_
.
front
(
)
.
arrival_time
;
}
return
next_process_time
!
=
next_process_time_
;
}
void
SimulatedNetwork
:
:
RegisterDeliveryTimeChangedCallback
(
absl
:
:
AnyInvocable
<
void
(
)
>
callback
)
{
RTC_DCHECK_RUNS_SERIALIZED
(
&
process_checker_
)
;
next_process_time_changed_callback_
=
std
:
:
move
(
callback
)
;
}
}
