#
ifndef
TEST_NETWORK_FAKE_NETWORK_SOCKET_SERVER_H_
#
define
TEST_NETWORK_FAKE_NETWORK_SOCKET_SERVER_H_
#
include
<
set
>
#
include
<
vector
>
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
socket_server
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
network
/
network_emulation
.
h
"
namespace
webrtc
{
namespace
test
{
class
FakeNetworkSocket
;
class
FakeNetworkSocketServer
:
public
rtc
:
:
SocketServer
{
public
:
explicit
FakeNetworkSocketServer
(
EndpointsContainer
*
endpoints_controller
)
;
~
FakeNetworkSocketServer
(
)
override
;
rtc
:
:
Socket
*
CreateSocket
(
int
family
int
type
)
override
;
void
SetMessageQueue
(
rtc
:
:
Thread
*
thread
)
override
;
bool
Wait
(
int
cms
bool
process_io
)
override
;
void
WakeUp
(
)
override
;
protected
:
friend
class
FakeNetworkSocket
;
EmulatedEndpointImpl
*
GetEndpointNode
(
const
rtc
:
:
IPAddress
&
ip
)
;
void
Unregister
(
FakeNetworkSocket
*
socket
)
;
private
:
const
EndpointsContainer
*
endpoints_container_
;
rtc
:
:
Event
wakeup_
;
rtc
:
:
Thread
*
thread_
=
nullptr
;
Mutex
lock_
;
std
:
:
vector
<
FakeNetworkSocket
*
>
sockets_
RTC_GUARDED_BY
(
lock_
)
;
}
;
}
}
#
endif
