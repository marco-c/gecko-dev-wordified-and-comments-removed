#
ifndef
TEST_NETWORK_SIMULATED_NETWORK_H_
#
define
TEST_NETWORK_SIMULATED_NETWORK_H_
#
include
<
stdint
.
h
>
#
include
<
cstdint
>
#
include
<
deque
>
#
include
<
optional
>
#
include
<
queue
>
#
include
<
vector
>
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
test
/
simulated_network
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
race_checker
.
h
"
#
include
"
rtc_base
/
random
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
SimulatedNetwork
:
public
SimulatedNetworkInterface
{
public
:
using
Config
=
BuiltInNetworkBehaviorConfig
;
explicit
SimulatedNetwork
(
Config
config
uint64_t
random_seed
=
1
)
;
~
SimulatedNetwork
(
)
override
;
void
SetConfig
(
const
Config
&
config
)
override
;
void
SetConfig
(
const
BuiltInNetworkBehaviorConfig
&
config
Timestamp
config_update_time
)
;
void
UpdateConfig
(
std
:
:
function
<
void
(
BuiltInNetworkBehaviorConfig
*
)
>
config_modifier
)
override
;
void
PauseTransmissionUntil
(
int64_t
until_us
)
override
;
bool
EnqueuePacket
(
PacketInFlightInfo
packet
)
override
;
std
:
:
vector
<
PacketDeliveryInfo
>
DequeueDeliverablePackets
(
int64_t
receive_time_us
)
override
;
std
:
:
optional
<
int64_t
>
NextDeliveryTimeUs
(
)
const
override
;
void
RegisterDeliveryTimeChangedCallback
(
absl
:
:
AnyInvocable
<
void
(
)
>
callback
)
override
;
private
:
struct
PacketInfo
{
PacketInFlightInfo
packet
;
Timestamp
last_update_time
;
int64_t
bits_left_to_send
;
Timestamp
arrival_time
;
}
;
struct
ConfigState
{
Config
config
;
double
prob_loss_bursting
;
double
prob_start_bursting
;
int64_t
pause_transmission_until_us
=
0
;
}
;
bool
UpdateNextProcessTime
(
)
RTC_RUN_ON
(
&
process_checker_
)
;
void
UpdateCapacityQueue
(
ConfigState
state
Timestamp
time_now
)
RTC_RUN_ON
(
&
process_checker_
)
;
ConfigState
GetConfigState
(
)
const
;
mutable
Mutex
config_lock_
;
rtc
:
:
RaceChecker
process_checker_
;
std
:
:
queue
<
PacketInfo
>
capacity_link_
RTC_GUARDED_BY
(
process_checker_
)
;
std
:
:
deque
<
PacketInfo
>
delay_link_
RTC_GUARDED_BY
(
process_checker_
)
;
Timestamp
next_process_time_
RTC_GUARDED_BY
(
process_checker_
)
=
Timestamp
:
:
PlusInfinity
(
)
;
absl
:
:
AnyInvocable
<
void
(
)
>
next_process_time_changed_callback_
RTC_GUARDED_BY
(
process_checker_
)
=
nullptr
;
ConfigState
config_state_
RTC_GUARDED_BY
(
config_lock_
)
;
Random
random_
RTC_GUARDED_BY
(
process_checker_
)
;
bool
bursting_
;
int64_t
last_enqueue_time_us_
;
Timestamp
last_capacity_link_exit_time_
=
Timestamp
:
:
MinusInfinity
(
)
;
}
;
}
#
endif
