#
ifndef
TEST_VIDEO_DECODER_PROXY_FACTORY_H_
#
define
TEST_VIDEO_DECODER_PROXY_FACTORY_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
namespace
webrtc
{
namespace
test
{
class
VideoDecoderProxyFactory
final
:
public
VideoDecoderFactory
{
public
:
explicit
VideoDecoderProxyFactory
(
VideoDecoder
*
decoder
)
:
decoder_
(
decoder
)
{
}
std
:
:
vector
<
SdpVideoFormat
>
GetSupportedFormats
(
)
const
override
{
RTC_NOTREACHED
(
)
;
return
{
}
;
}
std
:
:
unique_ptr
<
VideoDecoder
>
CreateVideoDecoder
(
const
SdpVideoFormat
&
format
)
override
{
return
std
:
:
make_unique
<
DecoderProxy
>
(
decoder_
)
;
}
private
:
class
DecoderProxy
final
:
public
VideoDecoder
{
public
:
explicit
DecoderProxy
(
VideoDecoder
*
decoder
)
:
decoder_
(
decoder
)
{
}
private
:
int32_t
Decode
(
const
EncodedImage
&
input_image
bool
missing_frames
int64_t
render_time_ms
)
override
{
return
decoder_
-
>
Decode
(
input_image
missing_frames
render_time_ms
)
;
}
bool
Configure
(
const
Settings
&
settings
)
override
{
return
decoder_
-
>
Configure
(
settings
)
;
}
int32_t
RegisterDecodeCompleteCallback
(
DecodedImageCallback
*
callback
)
override
{
return
decoder_
-
>
RegisterDecodeCompleteCallback
(
callback
)
;
}
int32_t
Release
(
)
override
{
return
decoder_
-
>
Release
(
)
;
}
DecoderInfo
GetDecoderInfo
(
)
const
override
{
return
decoder_
-
>
GetDecoderInfo
(
)
;
}
const
char
*
ImplementationName
(
)
const
override
{
return
decoder_
-
>
ImplementationName
(
)
;
}
VideoDecoder
*
const
decoder_
;
}
;
VideoDecoder
*
const
decoder_
;
}
;
}
}
#
endif
