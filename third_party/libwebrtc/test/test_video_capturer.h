#
ifndef
TEST_TEST_VIDEO_CAPTURER_H_
#
define
TEST_TEST_VIDEO_CAPTURER_H_
#
include
<
memory
>
#
include
<
optional
>
#
include
<
utility
>
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
api
/
video
/
video_source_interface
.
h
"
#
include
"
media
/
base
/
video_adapter
.
h
"
#
include
"
media
/
base
/
video_broadcaster
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
namespace
test
{
class
TestVideoCapturer
:
public
VideoSourceInterface
<
VideoFrame
>
{
public
:
class
FramePreprocessor
{
public
:
virtual
~
FramePreprocessor
(
)
=
default
;
virtual
VideoFrame
Preprocess
(
const
VideoFrame
&
frame
)
=
0
;
}
;
~
TestVideoCapturer
(
)
override
;
void
AddOrUpdateSink
(
VideoSinkInterface
<
VideoFrame
>
*
sink
const
VideoSinkWants
&
wants
)
override
;
void
RemoveSink
(
VideoSinkInterface
<
VideoFrame
>
*
sink
)
override
;
void
SetFramePreprocessor
(
std
:
:
unique_ptr
<
FramePreprocessor
>
preprocessor
)
{
MutexLock
lock
(
&
lock_
)
;
preprocessor_
=
std
:
:
move
(
preprocessor
)
;
}
void
SetEnableAdaptation
(
bool
enable_adaptation
)
{
MutexLock
lock
(
&
lock_
)
;
enable_adaptation_
=
enable_adaptation
;
}
void
OnOutputFormatRequest
(
int
width
int
height
const
std
:
:
optional
<
int
>
&
max_fps
)
;
virtual
void
Start
(
)
=
0
;
virtual
void
Stop
(
)
=
0
;
virtual
int
GetFrameWidth
(
)
const
=
0
;
virtual
int
GetFrameHeight
(
)
const
=
0
;
protected
:
void
OnFrame
(
const
VideoFrame
&
frame
)
;
VideoSinkWants
GetSinkWants
(
)
;
private
:
void
UpdateVideoAdapter
(
)
;
VideoFrame
MaybePreprocess
(
const
VideoFrame
&
frame
)
;
Mutex
lock_
;
std
:
:
unique_ptr
<
FramePreprocessor
>
preprocessor_
RTC_GUARDED_BY
(
lock_
)
;
bool
enable_adaptation_
RTC_GUARDED_BY
(
lock_
)
=
true
;
VideoBroadcaster
broadcaster_
;
VideoAdapter
video_adapter_
;
}
;
}
}
#
endif
