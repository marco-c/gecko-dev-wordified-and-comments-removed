#
ifndef
TEST_MOCK_AUDIO_DECODER_FACTORY_H_
#
define
TEST_MOCK_AUDIO_DECODER_FACTORY_H_
#
include
<
memory
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
audio_codecs
/
audio_codec_pair_id
.
h
"
#
include
"
api
/
audio_codecs
/
audio_decoder
.
h
"
#
include
"
api
/
audio_codecs
/
audio_decoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
make_ref_counted
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
class
MockAudioDecoderFactory
:
public
AudioDecoderFactory
{
public
:
static
scoped_refptr
<
AudioDecoderFactory
>
CreateUnusedFactory
(
)
{
auto
factory
=
make_ref_counted
<
testing
:
:
NiceMock
<
MockAudioDecoderFactory
>
>
(
)
;
EXPECT_CALL
(
*
factory
Create
)
.
Times
(
0
)
;
return
factory
;
}
static
scoped_refptr
<
AudioDecoderFactory
>
CreateEmptyFactory
(
)
{
return
make_ref_counted
<
testing
:
:
NiceMock
<
MockAudioDecoderFactory
>
>
(
)
;
}
MOCK_METHOD
(
std
:
:
vector
<
AudioCodecSpec
>
GetSupportedDecoders
(
)
(
override
)
)
;
MOCK_METHOD
(
bool
IsSupportedDecoder
(
const
SdpAudioFormat
&
)
(
override
)
)
;
MOCK_METHOD
(
std
:
:
unique_ptr
<
AudioDecoder
>
Create
(
const
Environment
&
const
SdpAudioFormat
&
std
:
:
optional
<
AudioCodecPairId
>
)
(
override
)
)
;
}
;
}
#
endif
