#
ifndef
API_TEST_NETWORK_EMULATION_NETWORK_EMULATION_INTERFACES_H_
#
define
API_TEST_NETWORK_EMULATION_NETWORK_EMULATION_INTERFACES_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
map
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
api
/
numerics
/
samples_stats_counter
.
h
"
#
include
"
api
/
test
/
network_emulation
/
ecn_marking_counter
.
h
"
#
include
"
api
/
transport
/
ecn_marking
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
rtc_base
/
ip_address
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
namespace
webrtc
{
struct
EmulatedIpPacket
{
public
:
EmulatedIpPacket
(
const
SocketAddress
&
from
const
SocketAddress
&
to
CopyOnWriteBuffer
data
Timestamp
arrival_time
uint16_t
application_overhead
=
0
EcnMarking
ecn
=
EcnMarking
:
:
kNotEct
)
;
~
EmulatedIpPacket
(
)
=
default
;
EmulatedIpPacket
(
const
EmulatedIpPacket
&
)
=
delete
;
EmulatedIpPacket
&
operator
=
(
const
EmulatedIpPacket
&
)
=
delete
;
EmulatedIpPacket
(
EmulatedIpPacket
&
&
)
=
default
;
EmulatedIpPacket
&
operator
=
(
EmulatedIpPacket
&
&
)
=
default
;
size_t
size
(
)
const
{
return
data
.
size
(
)
;
}
const
uint8_t
*
cdata
(
)
const
{
return
data
.
cdata
(
)
;
}
size_t
ip_packet_size
(
)
const
{
return
size
(
)
+
headers_size
;
}
SocketAddress
from
;
SocketAddress
to
;
CopyOnWriteBuffer
data
;
uint16_t
headers_size
;
Timestamp
arrival_time
;
EcnMarking
ecn
;
}
;
class
EmulatedNetworkReceiverInterface
{
public
:
virtual
~
EmulatedNetworkReceiverInterface
(
)
=
default
;
virtual
void
OnPacketReceived
(
EmulatedIpPacket
packet
)
=
0
;
}
;
struct
EmulatedNetworkOutgoingStats
{
int64_t
packets_sent
=
0
;
DataSize
bytes_sent
=
DataSize
:
:
Zero
(
)
;
SamplesStatsCounter
sent_packets_size
;
DataSize
first_sent_packet_size
=
DataSize
:
:
Zero
(
)
;
Timestamp
first_packet_sent_time
=
Timestamp
:
:
PlusInfinity
(
)
;
Timestamp
last_packet_sent_time
=
Timestamp
:
:
MinusInfinity
(
)
;
EcnMarkingCounter
ecn_count
;
DataRate
AverageSendRate
(
)
const
;
}
;
struct
EmulatedNetworkIncomingStats
{
int64_t
packets_received
=
0
;
DataSize
bytes_received
=
DataSize
:
:
Zero
(
)
;
SamplesStatsCounter
received_packets_size
;
int64_t
packets_discarded_no_receiver
=
0
;
DataSize
bytes_discarded_no_receiver
=
DataSize
:
:
Zero
(
)
;
SamplesStatsCounter
packets_discarded_no_receiver_size
;
DataSize
first_received_packet_size
=
DataSize
:
:
Zero
(
)
;
Timestamp
first_packet_received_time
=
Timestamp
:
:
PlusInfinity
(
)
;
Timestamp
last_packet_received_time
=
Timestamp
:
:
MinusInfinity
(
)
;
EcnMarkingCounter
ecn_count
;
DataRate
AverageReceiveRate
(
)
const
;
}
;
struct
EmulatedNetworkStats
{
int64_t
PacketsSent
(
)
const
{
return
overall_outgoing_stats
.
packets_sent
;
}
DataSize
BytesSent
(
)
const
{
return
overall_outgoing_stats
.
bytes_sent
;
}
const
SamplesStatsCounter
&
SentPacketsSizeCounter
(
)
const
{
return
overall_outgoing_stats
.
sent_packets_size
;
}
DataSize
FirstSentPacketSize
(
)
const
{
return
overall_outgoing_stats
.
first_sent_packet_size
;
}
Timestamp
FirstPacketSentTime
(
)
const
{
return
overall_outgoing_stats
.
first_packet_sent_time
;
}
Timestamp
LastPacketSentTime
(
)
const
{
return
overall_outgoing_stats
.
last_packet_sent_time
;
}
DataRate
AverageSendRate
(
)
const
{
return
overall_outgoing_stats
.
AverageSendRate
(
)
;
}
int64_t
PacketsReceived
(
)
const
{
return
overall_incoming_stats
.
packets_received
;
}
DataSize
BytesReceived
(
)
const
{
return
overall_incoming_stats
.
bytes_received
;
}
const
SamplesStatsCounter
&
ReceivedPacketsSizeCounter
(
)
const
{
return
overall_incoming_stats
.
received_packets_size
;
}
int64_t
PacketsDiscardedNoReceiver
(
)
const
{
return
overall_incoming_stats
.
packets_discarded_no_receiver
;
}
DataSize
BytesDiscardedNoReceiver
(
)
const
{
return
overall_incoming_stats
.
bytes_discarded_no_receiver
;
}
const
SamplesStatsCounter
&
PacketsDiscardedNoReceiverSizeCounter
(
)
const
{
return
overall_incoming_stats
.
packets_discarded_no_receiver_size
;
}
DataSize
FirstReceivedPacketSize
(
)
const
{
return
overall_incoming_stats
.
first_received_packet_size
;
}
Timestamp
FirstPacketReceivedTime
(
)
const
{
return
overall_incoming_stats
.
first_packet_received_time
;
}
Timestamp
LastPacketReceivedTime
(
)
const
{
return
overall_incoming_stats
.
last_packet_received_time
;
}
DataRate
AverageReceiveRate
(
)
const
{
return
overall_incoming_stats
.
AverageReceiveRate
(
)
;
}
std
:
:
vector
<
IPAddress
>
local_addresses
;
EmulatedNetworkOutgoingStats
overall_outgoing_stats
;
EmulatedNetworkIncomingStats
overall_incoming_stats
;
std
:
:
map
<
IPAddress
EmulatedNetworkOutgoingStats
>
outgoing_stats_per_destination
;
std
:
:
map
<
IPAddress
EmulatedNetworkIncomingStats
>
incoming_stats_per_source
;
SamplesStatsCounter
sent_packets_queue_wait_time_us
;
}
;
struct
EmulatedNetworkNodeStats
{
SamplesStatsCounter
packet_transport_time
;
SamplesStatsCounter
size_to_packet_transport_time
;
}
;
class
EmulatedEndpoint
:
public
EmulatedNetworkReceiverInterface
{
public
:
virtual
void
SendPacket
(
const
SocketAddress
&
from
const
SocketAddress
&
to
CopyOnWriteBuffer
packet_data
uint16_t
application_overhead
=
0
EcnMarking
ecn
=
EcnMarking
:
:
kNotEct
)
=
0
;
virtual
std
:
:
optional
<
uint16_t
>
BindReceiver
(
uint16_t
desired_port
EmulatedNetworkReceiverInterface
*
receiver
)
=
0
;
virtual
void
UnbindReceiver
(
uint16_t
port
)
=
0
;
virtual
void
BindDefaultReceiver
(
EmulatedNetworkReceiverInterface
*
receiver
)
=
0
;
virtual
void
UnbindDefaultReceiver
(
)
=
0
;
virtual
IPAddress
GetPeerLocalAddress
(
)
const
=
0
;
private
:
friend
class
EmulatedEndpointImpl
;
EmulatedEndpoint
(
)
=
default
;
}
;
class
TcpMessageRoute
{
public
:
virtual
void
SendMessage
(
size_t
size
absl
:
:
AnyInvocable
<
void
(
)
>
on_received
)
=
0
;
protected
:
~
TcpMessageRoute
(
)
=
default
;
}
;
}
#
endif
