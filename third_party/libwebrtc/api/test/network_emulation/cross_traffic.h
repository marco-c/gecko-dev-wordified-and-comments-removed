#
ifndef
API_TEST_NETWORK_EMULATION_CROSS_TRAFFIC_H_
#
define
API_TEST_NETWORK_EMULATION_CROSS_TRAFFIC_H_
#
include
<
cstddef
>
#
include
<
functional
>
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
namespace
webrtc
{
class
CrossTrafficRoute
{
public
:
virtual
~
CrossTrafficRoute
(
)
=
default
;
virtual
void
TriggerPacketBurst
(
size_t
num_packets
size_t
packet_size
)
=
0
;
virtual
void
SendPacket
(
size_t
packet_size
)
=
0
;
virtual
void
NetworkDelayedAction
(
size_t
packet_size
std
:
:
function
<
void
(
)
>
action
)
=
0
;
}
;
class
CrossTrafficGenerator
{
public
:
virtual
~
CrossTrafficGenerator
(
)
=
default
;
virtual
TimeDelta
GetProcessInterval
(
)
const
=
0
;
virtual
void
Process
(
Timestamp
at_time
)
=
0
;
}
;
struct
RandomWalkConfig
{
int
random_seed
=
1
;
DataRate
peak_rate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
DataSize
min_packet_size
=
DataSize
:
:
Bytes
(
200
)
;
TimeDelta
min_packet_interval
=
TimeDelta
:
:
Millis
(
1
)
;
TimeDelta
update_interval
=
TimeDelta
:
:
Millis
(
200
)
;
double
variance
=
0
.
6
;
double
bias
=
-
0
.
1
;
}
;
struct
PulsedPeaksConfig
{
DataRate
peak_rate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
DataSize
min_packet_size
=
DataSize
:
:
Bytes
(
200
)
;
TimeDelta
min_packet_interval
=
TimeDelta
:
:
Millis
(
1
)
;
TimeDelta
send_duration
=
TimeDelta
:
:
Millis
(
100
)
;
TimeDelta
hold_duration
=
TimeDelta
:
:
Millis
(
2000
)
;
}
;
struct
FakeTcpConfig
{
DataSize
packet_size
=
DataSize
:
:
Bytes
(
1200
)
;
DataSize
send_limit
=
DataSize
:
:
PlusInfinity
(
)
;
TimeDelta
process_interval
=
TimeDelta
:
:
Millis
(
200
)
;
TimeDelta
packet_timeout
=
TimeDelta
:
:
Seconds
(
1
)
;
}
;
}
#
endif
