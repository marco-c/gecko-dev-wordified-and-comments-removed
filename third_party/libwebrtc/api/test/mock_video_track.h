#
ifndef
API_TEST_MOCK_VIDEO_TRACK_H_
#
define
API_TEST_MOCK_VIDEO_TRACK_H_
#
include
<
string
>
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
api
/
video
/
video_source_interface
.
h
"
#
include
"
rtc_base
/
ref_counted_object
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
class
MockVideoTrack
:
public
RefCountedObject
<
VideoTrackInterface
>
{
public
:
static
scoped_refptr
<
MockVideoTrack
>
Create
(
)
{
return
scoped_refptr
<
MockVideoTrack
>
(
new
MockVideoTrack
(
)
)
;
}
MOCK_METHOD
(
void
RegisterObserver
(
ObserverInterface
*
observer
)
(
override
)
)
;
MOCK_METHOD
(
void
UnregisterObserver
(
ObserverInterface
*
observer
)
(
override
)
)
;
MOCK_METHOD
(
std
:
:
string
kind
(
)
(
const
override
)
)
;
MOCK_METHOD
(
std
:
:
string
id
(
)
(
const
override
)
)
;
MOCK_METHOD
(
bool
enabled
(
)
(
const
override
)
)
;
MOCK_METHOD
(
bool
set_enabled
(
bool
enable
)
(
override
)
)
;
MOCK_METHOD
(
TrackState
state
(
)
(
const
override
)
)
;
MOCK_METHOD
(
void
AddOrUpdateSink
(
VideoSinkInterface
<
VideoFrame
>
*
sink
const
VideoSinkWants
&
wants
)
(
override
)
)
;
MOCK_METHOD
(
void
RemoveSink
(
VideoSinkInterface
<
VideoFrame
>
*
sink
)
(
override
)
)
;
MOCK_METHOD
(
VideoTrackSourceInterface
*
GetSource
(
)
(
const
override
)
)
;
MOCK_METHOD
(
ContentHint
content_hint
(
)
(
const
override
)
)
;
MOCK_METHOD
(
void
set_content_hint
(
ContentHint
hint
)
(
override
)
)
;
}
;
}
#
endif
