#
ifndef
API_TEST_CREATE_FRAME_GENERATOR_H_
#
define
API_TEST_CREATE_FRAME_GENERATOR_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
base
/
nullability
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
test
/
frame_generator_interface
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
namespace
test
{
std
:
:
unique_ptr
<
FrameGeneratorInterface
>
CreateSquareFrameGenerator
(
int
width
int
height
std
:
:
optional
<
FrameGeneratorInterface
:
:
OutputType
>
type
std
:
:
optional
<
int
>
num_squares
)
;
std
:
:
unique_ptr
<
FrameGeneratorInterface
>
CreateFromYuvFileFrameGenerator
(
std
:
:
vector
<
std
:
:
string
>
filenames
size_t
width
size_t
height
int
frame_repeat_count
)
;
std
:
:
unique_ptr
<
FrameGeneratorInterface
>
CreateFromNV12FileFrameGenerator
(
std
:
:
vector
<
std
:
:
string
>
filenames
size_t
width
size_t
height
int
frame_repeat_count
=
1
)
;
absl
:
:
Nonnull
<
std
:
:
unique_ptr
<
FrameGeneratorInterface
>
>
CreateFromIvfFileFrameGenerator
(
const
Environment
&
env
absl
:
:
string_view
filename
)
;
std
:
:
unique_ptr
<
FrameGeneratorInterface
>
CreateScrollingInputFromYuvFilesFrameGenerator
(
Clock
*
clock
std
:
:
vector
<
std
:
:
string
>
filenames
size_t
source_width
size_t
source_height
size_t
target_width
size_t
target_height
int64_t
scroll_time_ms
int64_t
pause_time_ms
)
;
std
:
:
unique_ptr
<
FrameGeneratorInterface
>
CreateSlideFrameGenerator
(
int
width
int
height
int
frame_repeat_count
)
;
}
}
#
endif
