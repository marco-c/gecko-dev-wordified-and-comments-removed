#
ifndef
API_TEST_PEERCONNECTION_QUALITY_TEST_FIXTURE_H_
#
define
API_TEST_PEERCONNECTION_QUALITY_TEST_FIXTURE_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
memory
/
memory
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
async_resolver_factory
.
h
"
#
include
"
api
/
call
/
call_factory_interface
.
h
"
#
include
"
api
/
fec_controller
.
h
"
#
include
"
api
/
function_view
.
h
"
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log_factory_interface
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
test
/
audio_quality_analyzer_interface
.
h
"
#
include
"
api
/
test
/
frame_generator_interface
.
h
"
#
include
"
api
/
test
/
simulated_network
.
h
"
#
include
"
api
/
test
/
stats_observer_interface
.
h
"
#
include
"
api
/
test
/
track_id_stream_info_map
.
h
"
#
include
"
api
/
test
/
video_quality_analyzer_interface
.
h
"
#
include
"
api
/
transport
/
network_control
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
media
/
base
/
media_constants
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
rtc_certificate_generator
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
constexpr
size_t
kDefaultSlidesWidth
=
1850
;
constexpr
size_t
kDefaultSlidesHeight
=
1110
;
class
PeerConnectionE2EQualityTestFixture
{
public
:
enum
class
CapturingDeviceIndex
:
size_t
{
}
;
struct
ScrollingParams
{
ScrollingParams
(
TimeDelta
duration
size_t
source_width
size_t
source_height
)
:
duration
(
duration
)
source_width
(
source_width
)
source_height
(
source_height
)
{
RTC_CHECK_GT
(
duration
.
ms
(
)
0
)
;
}
TimeDelta
duration
;
size_t
source_width
;
size_t
source_height
;
}
;
struct
ScreenShareConfig
{
explicit
ScreenShareConfig
(
TimeDelta
slide_change_interval
)
:
slide_change_interval
(
slide_change_interval
)
{
RTC_CHECK_GT
(
slide_change_interval
.
ms
(
)
0
)
;
}
TimeDelta
slide_change_interval
;
bool
generate_slides
=
false
;
absl
:
:
optional
<
ScrollingParams
>
scrolling_params
;
std
:
:
vector
<
std
:
:
string
>
slides_yuv_file_names
;
}
;
struct
VideoSimulcastConfig
{
explicit
VideoSimulcastConfig
(
int
simulcast_streams_count
)
:
simulcast_streams_count
(
simulcast_streams_count
)
{
RTC_CHECK_GT
(
simulcast_streams_count
1
)
;
}
VideoSimulcastConfig
(
int
simulcast_streams_count
int
target_spatial_index
)
:
simulcast_streams_count
(
simulcast_streams_count
)
target_spatial_index
(
target_spatial_index
)
{
RTC_CHECK_GT
(
simulcast_streams_count
1
)
;
RTC_CHECK_GE
(
target_spatial_index
0
)
;
RTC_CHECK_LT
(
target_spatial_index
simulcast_streams_count
)
;
}
int
simulcast_streams_count
;
absl
:
:
optional
<
int
>
target_spatial_index
;
std
:
:
vector
<
RtpEncodingParameters
>
encoding_params
;
}
;
struct
VideoConfig
{
VideoConfig
(
size_t
width
size_t
height
int32_t
fps
)
:
width
(
width
)
height
(
height
)
fps
(
fps
)
{
}
VideoConfig
(
std
:
:
string
stream_label
size_t
width
size_t
height
int32_t
fps
)
:
width
(
width
)
height
(
height
)
fps
(
fps
)
stream_label
(
std
:
:
move
(
stream_label
)
)
{
}
const
size_t
width
;
const
size_t
height
;
const
int32_t
fps
;
absl
:
:
optional
<
std
:
:
string
>
stream_label
;
absl
:
:
optional
<
VideoTrackInterface
:
:
ContentHint
>
content_hint
;
absl
:
:
optional
<
VideoSimulcastConfig
>
simulcast_config
;
absl
:
:
optional
<
int
>
temporal_layers_count
;
absl
:
:
optional
<
int
>
max_encode_bitrate_bps
;
absl
:
:
optional
<
int
>
min_encode_bitrate_bps
;
absl
:
:
optional
<
std
:
:
string
>
input_dump_file_name
;
int
input_dump_sampling_modulo
=
1
;
absl
:
:
optional
<
std
:
:
string
>
output_dump_file_name
;
int
output_dump_sampling_modulo
=
1
;
bool
show_on_screen
=
false
;
absl
:
:
optional
<
std
:
:
string
>
sync_group
;
}
;
struct
AudioConfig
{
enum
Mode
{
kGenerated
kFile
}
;
AudioConfig
(
)
=
default
;
explicit
AudioConfig
(
std
:
:
string
stream_label
)
:
stream_label
(
std
:
:
move
(
stream_label
)
)
{
}
absl
:
:
optional
<
std
:
:
string
>
stream_label
;
Mode
mode
=
kGenerated
;
absl
:
:
optional
<
std
:
:
string
>
input_file_name
;
absl
:
:
optional
<
std
:
:
string
>
input_dump_file_name
;
absl
:
:
optional
<
std
:
:
string
>
output_dump_file_name
;
cricket
:
:
AudioOptions
audio_options
;
int
sampling_frequency_in_hz
=
48000
;
absl
:
:
optional
<
std
:
:
string
>
sync_group
;
}
;
struct
VideoCodecConfig
{
explicit
VideoCodecConfig
(
std
:
:
string
name
)
:
name
(
std
:
:
move
(
name
)
)
required_params
(
)
{
}
VideoCodecConfig
(
std
:
:
string
name
std
:
:
map
<
std
:
:
string
std
:
:
string
>
required_params
)
:
name
(
std
:
:
move
(
name
)
)
required_params
(
std
:
:
move
(
required_params
)
)
{
}
std
:
:
string
name
=
cricket
:
:
kVp8CodecName
;
std
:
:
map
<
std
:
:
string
std
:
:
string
>
required_params
;
}
;
class
PeerConfigurer
{
public
:
virtual
~
PeerConfigurer
(
)
=
default
;
virtual
PeerConfigurer
*
SetName
(
absl
:
:
string_view
name
)
=
0
;
virtual
PeerConfigurer
*
SetTaskQueueFactory
(
std
:
:
unique_ptr
<
TaskQueueFactory
>
task_queue_factory
)
=
0
;
virtual
PeerConfigurer
*
SetCallFactory
(
std
:
:
unique_ptr
<
CallFactoryInterface
>
call_factory
)
=
0
;
virtual
PeerConfigurer
*
SetEventLogFactory
(
std
:
:
unique_ptr
<
RtcEventLogFactoryInterface
>
event_log_factory
)
=
0
;
virtual
PeerConfigurer
*
SetFecControllerFactory
(
std
:
:
unique_ptr
<
FecControllerFactoryInterface
>
fec_controller_factory
)
=
0
;
virtual
PeerConfigurer
*
SetNetworkControllerFactory
(
std
:
:
unique_ptr
<
NetworkControllerFactoryInterface
>
network_controller_factory
)
=
0
;
virtual
PeerConfigurer
*
SetVideoEncoderFactory
(
std
:
:
unique_ptr
<
VideoEncoderFactory
>
video_encoder_factory
)
=
0
;
virtual
PeerConfigurer
*
SetVideoDecoderFactory
(
std
:
:
unique_ptr
<
VideoDecoderFactory
>
video_decoder_factory
)
=
0
;
virtual
PeerConfigurer
*
SetNetEqFactory
(
std
:
:
unique_ptr
<
NetEqFactory
>
neteq_factory
)
=
0
;
virtual
PeerConfigurer
*
SetAsyncResolverFactory
(
std
:
:
unique_ptr
<
webrtc
:
:
AsyncResolverFactory
>
async_resolver_factory
)
=
0
;
virtual
PeerConfigurer
*
SetRTCCertificateGenerator
(
std
:
:
unique_ptr
<
rtc
:
:
RTCCertificateGeneratorInterface
>
cert_generator
)
=
0
;
virtual
PeerConfigurer
*
SetSSLCertificateVerifier
(
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificateVerifier
>
tls_cert_verifier
)
=
0
;
virtual
PeerConfigurer
*
SetIceTransportFactory
(
std
:
:
unique_ptr
<
IceTransportFactory
>
factory
)
=
0
;
virtual
PeerConfigurer
*
AddVideoConfig
(
VideoConfig
config
)
=
0
;
virtual
PeerConfigurer
*
AddVideoConfig
(
VideoConfig
config
std
:
:
unique_ptr
<
test
:
:
FrameGeneratorInterface
>
generator
)
=
0
;
virtual
PeerConfigurer
*
AddVideoConfig
(
VideoConfig
config
CapturingDeviceIndex
capturing_device_index
)
=
0
;
virtual
PeerConfigurer
*
SetVideoCodecs
(
std
:
:
vector
<
VideoCodecConfig
>
video_codecs
)
=
0
;
virtual
PeerConfigurer
*
SetAudioConfig
(
AudioConfig
config
)
=
0
;
virtual
PeerConfigurer
*
SetRtcEventLogPath
(
std
:
:
string
path
)
=
0
;
virtual
PeerConfigurer
*
SetAecDumpPath
(
std
:
:
string
path
)
=
0
;
virtual
PeerConfigurer
*
SetRTCConfiguration
(
PeerConnectionInterface
:
:
RTCConfiguration
configuration
)
=
0
;
virtual
PeerConfigurer
*
SetBitrateSettings
(
BitrateSettings
bitrate_settings
)
=
0
;
}
;
struct
EchoEmulationConfig
{
TimeDelta
echo_delay
=
TimeDelta
:
:
Millis
(
50
)
;
}
;
struct
RunParams
{
explicit
RunParams
(
TimeDelta
run_duration
)
:
run_duration
(
run_duration
)
{
}
TimeDelta
run_duration
;
bool
use_ulp_fec
=
false
;
bool
use_flex_fec
=
false
;
double
video_encoder_bitrate_multiplier
=
1
.
0
;
bool
use_conference_mode
=
false
;
absl
:
:
optional
<
EchoEmulationConfig
>
echo_emulation_config
;
}
;
class
QualityMetricsReporter
:
public
StatsObserverInterface
{
public
:
virtual
~
QualityMetricsReporter
(
)
=
default
;
virtual
void
Start
(
absl
:
:
string_view
test_case_name
const
TrackIdStreamInfoMap
*
reporter_helper
)
=
0
;
virtual
void
StopAndReportResults
(
)
=
0
;
}
;
class
PeerHandle
{
public
:
virtual
~
PeerHandle
(
)
=
default
;
}
;
virtual
~
PeerConnectionE2EQualityTestFixture
(
)
=
default
;
virtual
void
ExecuteAt
(
TimeDelta
target_time_since_start
std
:
:
function
<
void
(
TimeDelta
)
>
func
)
=
0
;
virtual
void
ExecuteEvery
(
TimeDelta
initial_delay_since_start
TimeDelta
interval
std
:
:
function
<
void
(
TimeDelta
)
>
func
)
=
0
;
virtual
void
AddQualityMetricsReporter
(
std
:
:
unique_ptr
<
QualityMetricsReporter
>
quality_metrics_reporter
)
=
0
;
virtual
void
AddPeer
(
rtc
:
:
Thread
*
network_thread
rtc
:
:
NetworkManager
*
network_manager
rtc
:
:
FunctionView
<
void
(
PeerConfigurer
*
)
>
configurer
)
{
}
virtual
PeerHandle
*
AddAndReturnPeer
(
rtc
:
:
Thread
*
network_thread
rtc
:
:
NetworkManager
*
network_manager
rtc
:
:
FunctionView
<
void
(
PeerConfigurer
*
)
>
configurer
)
{
return
nullptr
;
}
virtual
void
Run
(
RunParams
run_params
)
=
0
;
virtual
TimeDelta
GetRealTestDuration
(
)
const
=
0
;
}
;
}
}
#
endif
