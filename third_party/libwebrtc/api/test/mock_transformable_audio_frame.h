#
ifndef
API_TEST_MOCK_TRANSFORMABLE_AUDIO_FRAME_H_
#
define
API_TEST_MOCK_TRANSFORMABLE_AUDIO_FRAME_H_
#
include
<
cstdint
>
#
include
<
string
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
class
MockTransformableAudioFrame
:
public
TransformableAudioFrameInterface
{
public
:
MockTransformableAudioFrame
(
)
:
TransformableAudioFrameInterface
(
Passkey
(
)
)
{
}
MOCK_METHOD
(
rtc
:
:
ArrayView
<
const
uint8_t
>
GetData
(
)
(
const
override
)
)
;
MOCK_METHOD
(
void
SetData
(
rtc
:
:
ArrayView
<
const
uint8_t
>
)
(
override
)
)
;
MOCK_METHOD
(
void
SetRTPTimestamp
(
uint32_t
)
(
override
)
)
;
MOCK_METHOD
(
uint8_t
GetPayloadType
(
)
(
const
override
)
)
;
MOCK_METHOD
(
uint32_t
GetSsrc
(
)
(
const
override
)
)
;
MOCK_METHOD
(
uint32_t
GetTimestamp
(
)
(
const
override
)
)
;
MOCK_METHOD
(
std
:
:
string
GetMimeType
(
)
(
const
override
)
)
;
MOCK_METHOD
(
rtc
:
:
ArrayView
<
const
uint32_t
>
GetContributingSources
(
)
(
const
override
)
)
;
MOCK_METHOD
(
const
absl
:
:
optional
<
uint16_t
>
SequenceNumber
(
)
(
const
override
)
)
;
MOCK_METHOD
(
TransformableFrameInterface
:
:
Direction
GetDirection
(
)
(
const
override
)
)
;
MOCK_METHOD
(
absl
:
:
optional
<
uint64_t
>
AbsoluteCaptureTimestamp
(
)
(
const
override
)
)
;
MOCK_METHOD
(
TransformableAudioFrameInterface
:
:
FrameType
Type
(
)
(
const
override
)
)
;
MOCK_METHOD
(
absl
:
:
optional
<
uint8_t
>
AudioLevel
(
)
(
const
override
)
)
;
MOCK_METHOD
(
absl
:
:
optional
<
Timestamp
>
ReceiveTime
(
)
(
const
override
)
)
;
}
;
}
#
endif
