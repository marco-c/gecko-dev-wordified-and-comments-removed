#
ifndef
API_TEST_MOCK_PACKET_SOCKET_FACTORY_H_
#
define
API_TEST_MOCK_PACKET_SOCKET_FACTORY_H_
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
type_traits
>
#
include
"
api
/
async_dns_resolver
.
h
"
#
include
"
api
/
packet_socket_factory
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
class
MockPacketSocketFactory
:
public
rtc
:
:
PacketSocketFactory
{
public
:
MOCK_METHOD
(
rtc
:
:
AsyncPacketSocket
*
CreateUdpSocket
(
const
SocketAddress
&
uint16_t
uint16_t
)
(
override
)
)
;
MOCK_METHOD
(
rtc
:
:
AsyncListenSocket
*
CreateServerTcpSocket
(
const
SocketAddress
&
uint16_t
uint16_t
int
opts
)
(
override
)
)
;
MOCK_METHOD
(
rtc
:
:
AsyncPacketSocket
*
CreateClientTcpSocket
(
const
SocketAddress
&
local_address
const
SocketAddress
&
const
rtc
:
:
PacketSocketTcpOptions
&
)
(
override
)
)
;
MOCK_METHOD
(
std
:
:
unique_ptr
<
AsyncDnsResolverInterface
>
CreateAsyncDnsResolver
(
)
(
override
)
)
;
}
;
static_assert
(
!
std
:
:
is_abstract_v
<
MockPacketSocketFactory
>
"
"
)
;
}
namespace
rtc
{
using
:
:
webrtc
:
:
MockPacketSocketFactory
;
}
#
endif
