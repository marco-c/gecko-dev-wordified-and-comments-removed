#
ifndef
API_TEST_FRAME_GENERATOR_INTERFACE_H_
#
define
API_TEST_FRAME_GENERATOR_INTERFACE_H_
#
include
<
cstddef
>
#
include
<
utility
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_frame_buffer
.
h
"
namespace
webrtc
{
namespace
test
{
class
FrameGeneratorInterface
{
public
:
struct
Resolution
{
size_t
width
;
size_t
height
;
}
;
struct
VideoFrameData
{
VideoFrameData
(
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
buffer
absl
:
:
optional
<
VideoFrame
:
:
UpdateRect
>
update_rect
)
:
buffer
(
std
:
:
move
(
buffer
)
)
update_rect
(
update_rect
)
{
}
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
buffer
;
absl
:
:
optional
<
VideoFrame
:
:
UpdateRect
>
update_rect
;
}
;
enum
class
OutputType
{
kI420
kI420A
kI010
kNV12
}
;
static
const
char
*
OutputTypeToString
(
OutputType
type
)
;
virtual
~
FrameGeneratorInterface
(
)
=
default
;
virtual
VideoFrameData
NextFrame
(
)
=
0
;
virtual
void
SkipNextFrame
(
)
{
NextFrame
(
)
;
}
virtual
void
ChangeResolution
(
size_t
width
size_t
height
)
=
0
;
virtual
Resolution
GetResolution
(
)
const
=
0
;
virtual
absl
:
:
optional
<
int
>
fps
(
)
const
=
0
;
}
;
}
}
#
endif
