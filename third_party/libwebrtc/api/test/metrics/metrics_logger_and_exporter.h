#
ifndef
API_TEST_METRICS_METRICS_LOGGER_AND_EXPORTER_H_
#
define
API_TEST_METRICS_METRICS_LOGGER_AND_EXPORTER_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
numerics
/
samples_stats_counter
.
h
"
#
include
"
api
/
test
/
metrics
/
metric
.
h
"
#
include
"
api
/
test
/
metrics
/
metrics_exporter
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
namespace
test
{
class
MetricsLoggerAndExporter
{
public
:
MetricsLoggerAndExporter
(
webrtc
:
:
Clock
*
clock
std
:
:
vector
<
std
:
:
unique_ptr
<
MetricsExporter
>
>
exporters
bool
crash_on_export_failure
=
true
)
:
clock_
(
clock
)
crash_on_export_failure_
(
crash_on_export_failure
)
exporters_
(
std
:
:
move
(
exporters
)
)
{
}
~
MetricsLoggerAndExporter
(
)
;
void
LogSingleValueMetric
(
absl
:
:
string_view
name
absl
:
:
string_view
test_case_name
double
value
Unit
unit
ImprovementDirection
improvement_direction
std
:
:
map
<
std
:
:
string
std
:
:
string
>
metadata
=
{
}
)
;
void
LogMetric
(
absl
:
:
string_view
name
absl
:
:
string_view
test_case_name
const
SamplesStatsCounter
&
values
Unit
unit
ImprovementDirection
improvement_direction
std
:
:
map
<
std
:
:
string
std
:
:
string
>
metadata
=
{
}
)
;
void
LogMetric
(
absl
:
:
string_view
name
absl
:
:
string_view
test_case_name
const
Metric
:
:
Stats
&
metric_stats
Unit
unit
ImprovementDirection
improvement_direction
std
:
:
map
<
std
:
:
string
std
:
:
string
>
metadata
=
{
}
)
;
std
:
:
vector
<
Metric
>
GetCollectedMetrics
(
)
const
{
MutexLock
lock
(
&
mutex_
)
;
return
metrics_
;
}
private
:
webrtc
:
:
Timestamp
Now
(
)
;
bool
Export
(
)
;
webrtc
:
:
Clock
*
const
clock_
;
const
bool
crash_on_export_failure_
;
mutable
Mutex
mutex_
;
std
:
:
vector
<
Metric
>
metrics_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
vector
<
std
:
:
unique_ptr
<
MetricsExporter
>
>
exporters_
;
}
;
}
}
#
endif
