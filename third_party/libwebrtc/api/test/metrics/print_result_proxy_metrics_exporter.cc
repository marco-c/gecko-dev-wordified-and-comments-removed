#
include
"
api
/
test
/
metrics
/
print_result_proxy_metrics_exporter
.
h
"
#
include
<
string
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
test
/
metrics
/
metric
.
h
"
#
include
"
test
/
testsupport
/
perf_test
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
{
std
:
:
string
ToPrintResultUnit
(
Unit
unit
)
{
switch
(
unit
)
{
case
Unit
:
:
kMilliseconds
:
return
"
msBestFitFormat
"
;
case
Unit
:
:
kPercent
:
return
"
n
%
"
;
case
Unit
:
:
kBytes
:
return
"
sizeInBytes
"
;
case
Unit
:
:
kKilobitsPerSecond
:
return
"
bytesPerSecond
"
;
case
Unit
:
:
kHertz
:
return
"
Hz
"
;
case
Unit
:
:
kUnitless
:
return
"
unitless
"
;
case
Unit
:
:
kCount
:
return
"
count
"
;
}
}
double
ToPrintResultValue
(
double
value
Unit
unit
)
{
switch
(
unit
)
{
case
Unit
:
:
kKilobitsPerSecond
:
return
value
*
1000
/
8
;
default
:
return
value
;
}
}
ImproveDirection
ToPrintResultImproveDirection
(
ImprovementDirection
direction
)
{
switch
(
direction
)
{
case
ImprovementDirection
:
:
kBiggerIsBetter
:
return
ImproveDirection
:
:
kBiggerIsBetter
;
case
ImprovementDirection
:
:
kNeitherIsBetter
:
return
ImproveDirection
:
:
kNone
;
case
ImprovementDirection
:
:
kSmallerIsBetter
:
return
ImproveDirection
:
:
kSmallerIsBetter
;
}
}
bool
IsEmpty
(
const
Metric
:
:
Stats
&
stats
)
{
return
!
stats
.
mean
.
has_value
(
)
&
&
!
stats
.
stddev
.
has_value
(
)
&
&
!
stats
.
min
.
has_value
(
)
&
&
!
stats
.
max
.
has_value
(
)
;
}
}
bool
PrintResultProxyMetricsExporter
:
:
Export
(
rtc
:
:
ArrayView
<
const
Metric
>
metrics
)
{
for
(
const
Metric
&
metric
:
metrics
)
{
if
(
metric
.
time_series
.
samples
.
empty
(
)
&
&
IsEmpty
(
metric
.
stats
)
)
{
PrintResult
(
metric
.
name
"
"
metric
.
test_case
ToPrintResultValue
(
0
metric
.
unit
)
ToPrintResultUnit
(
metric
.
unit
)
false
ToPrintResultImproveDirection
(
metric
.
improvement_direction
)
)
;
continue
;
}
if
(
metric
.
time_series
.
samples
.
empty
(
)
)
{
PrintResultMeanAndError
(
metric
.
name
"
"
metric
.
test_case
ToPrintResultValue
(
*
metric
.
stats
.
mean
metric
.
unit
)
ToPrintResultValue
(
*
metric
.
stats
.
stddev
metric
.
unit
)
ToPrintResultUnit
(
metric
.
unit
)
false
ToPrintResultImproveDirection
(
metric
.
improvement_direction
)
)
;
continue
;
}
SamplesStatsCounter
counter
;
for
(
size_t
i
=
0
;
i
<
metric
.
time_series
.
samples
.
size
(
)
;
+
+
i
)
{
counter
.
AddSample
(
SamplesStatsCounter
:
:
StatsSample
{
.
value
=
ToPrintResultValue
(
metric
.
time_series
.
samples
[
i
]
.
value
metric
.
unit
)
.
time
=
metric
.
time_series
.
samples
[
i
]
.
timestamp
.
metadata
=
metric
.
time_series
.
samples
[
i
]
.
sample_metadata
}
)
;
}
PrintResult
(
metric
.
name
"
"
metric
.
test_case
counter
ToPrintResultUnit
(
metric
.
unit
)
false
ToPrintResultImproveDirection
(
metric
.
improvement_direction
)
)
;
}
return
true
;
}
}
}
