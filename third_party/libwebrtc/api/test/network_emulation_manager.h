#
ifndef
API_TEST_NETWORK_EMULATION_MANAGER_H_
#
define
API_TEST_NETWORK_EMULATION_MANAGER_H_
#
include
<
functional
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
test
/
network_emulation
/
network_emulation_interfaces
.
h
"
#
include
"
api
/
test
/
simulated_network
.
h
"
#
include
"
api
/
test
/
time_controller
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
network_constants
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
class
EmulatedNetworkNode
;
class
EmulatedRoute
;
struct
EmulatedEndpointConfig
{
enum
class
IpAddressFamily
{
kIpv4
kIpv6
}
;
IpAddressFamily
generated_ip_family
=
IpAddressFamily
:
:
kIpv4
;
absl
:
:
optional
<
rtc
:
:
IPAddress
>
ip
;
bool
start_as_enabled
=
true
;
rtc
:
:
AdapterType
type
=
rtc
:
:
AdapterType
:
:
ADAPTER_TYPE_UNKNOWN
;
}
;
class
EmulatedNetworkManagerInterface
{
public
:
virtual
~
EmulatedNetworkManagerInterface
(
)
=
default
;
virtual
rtc
:
:
Thread
*
network_thread
(
)
=
0
;
virtual
rtc
:
:
NetworkManager
*
network_manager
(
)
=
0
;
virtual
std
:
:
vector
<
EmulatedEndpoint
*
>
endpoints
(
)
const
=
0
;
virtual
void
GetStats
(
std
:
:
function
<
void
(
std
:
:
unique_ptr
<
EmulatedNetworkStats
>
)
>
stats_callback
)
const
=
0
;
}
;
enum
class
TimeMode
{
kRealTime
kSimulated
}
;
class
NetworkEmulationManager
{
public
:
struct
SimulatedNetworkNode
{
SimulatedNetworkInterface
*
simulation
;
EmulatedNetworkNode
*
node
;
class
Builder
{
public
:
explicit
Builder
(
NetworkEmulationManager
*
net
)
:
net_
(
net
)
{
}
Builder
(
)
:
net_
(
nullptr
)
{
}
Builder
(
const
Builder
&
)
=
default
;
Builder
&
config
(
BuiltInNetworkBehaviorConfig
config
)
;
Builder
&
delay_ms
(
int
queue_delay_ms
)
;
Builder
&
capacity_kbps
(
int
link_capacity_kbps
)
;
Builder
&
capacity_Mbps
(
int
link_capacity_Mbps
)
;
Builder
&
loss
(
double
loss_rate
)
;
Builder
&
packet_queue_length
(
int
max_queue_length_in_packets
)
;
SimulatedNetworkNode
Build
(
)
const
;
SimulatedNetworkNode
Build
(
NetworkEmulationManager
*
net
)
const
;
private
:
NetworkEmulationManager
*
const
net_
;
BuiltInNetworkBehaviorConfig
config_
;
}
;
}
;
virtual
~
NetworkEmulationManager
(
)
=
default
;
virtual
TimeController
*
time_controller
(
)
=
0
;
virtual
EmulatedNetworkNode
*
CreateEmulatedNode
(
BuiltInNetworkBehaviorConfig
config
)
=
0
;
virtual
EmulatedNetworkNode
*
CreateEmulatedNode
(
std
:
:
unique_ptr
<
NetworkBehaviorInterface
>
network_behavior
)
=
0
;
virtual
SimulatedNetworkNode
:
:
Builder
NodeBuilder
(
)
=
0
;
virtual
EmulatedEndpoint
*
CreateEndpoint
(
EmulatedEndpointConfig
config
)
=
0
;
virtual
void
EnableEndpoint
(
EmulatedEndpoint
*
endpoint
)
=
0
;
virtual
void
DisableEndpoint
(
EmulatedEndpoint
*
endpoint
)
=
0
;
virtual
EmulatedRoute
*
CreateRoute
(
EmulatedEndpoint
*
from
const
std
:
:
vector
<
EmulatedNetworkNode
*
>
&
via_nodes
EmulatedEndpoint
*
to
)
=
0
;
virtual
EmulatedRoute
*
CreateRoute
(
const
std
:
:
vector
<
EmulatedNetworkNode
*
>
&
via_nodes
)
=
0
;
virtual
void
ClearRoute
(
EmulatedRoute
*
route
)
=
0
;
virtual
TcpMessageRoute
*
CreateTcpRoute
(
EmulatedRoute
*
send_route
EmulatedRoute
*
ret_route
)
=
0
;
virtual
EmulatedNetworkManagerInterface
*
CreateEmulatedNetworkManagerInterface
(
const
std
:
:
vector
<
EmulatedEndpoint
*
>
&
endpoints
)
=
0
;
virtual
void
GetStats
(
rtc
:
:
ArrayView
<
EmulatedEndpoint
*
>
endpoints
std
:
:
function
<
void
(
std
:
:
unique_ptr
<
EmulatedNetworkStats
>
)
>
stats_callback
)
=
0
;
}
;
}
#
endif
