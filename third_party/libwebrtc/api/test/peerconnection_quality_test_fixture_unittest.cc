#
include
"
api
/
test
/
peerconnection_quality_test_fixture
.
h
"
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
namespace
{
using
VideoResolution
=
:
:
webrtc
:
:
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
VideoResolution
;
using
VideoConfig
=
:
:
webrtc
:
:
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
VideoConfig
;
using
VideoSubscription
=
:
:
webrtc
:
:
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
VideoSubscription
;
TEST
(
PclfVideoSubscriptionTest
MaxFromSenderSpecEqualIndependentOfOtherFields
)
{
VideoResolution
r1
(
VideoResolution
:
:
Spec
:
:
kMaxFromSender
)
;
r1
.
set_width
(
1
)
;
r1
.
set_height
(
2
)
;
r1
.
set_fps
(
3
)
;
VideoResolution
r2
(
VideoResolution
:
:
Spec
:
:
kMaxFromSender
)
;
r1
.
set_width
(
4
)
;
r1
.
set_height
(
5
)
;
r1
.
set_fps
(
6
)
;
EXPECT_EQ
(
r1
r2
)
;
}
TEST
(
PclfVideoSubscriptionTest
WhenSpecIsNotSetFieldsAreCompared
)
{
VideoResolution
test_resolution
(
1
2
3
)
;
VideoResolution
equal_resolution
(
1
2
3
)
;
VideoResolution
different_width
(
10
2
3
)
;
VideoResolution
different_height
(
1
20
3
)
;
VideoResolution
different_fps
(
1
20
30
)
;
EXPECT_EQ
(
test_resolution
equal_resolution
)
;
EXPECT_NE
(
test_resolution
different_width
)
;
EXPECT_NE
(
test_resolution
different_height
)
;
EXPECT_NE
(
test_resolution
different_fps
)
;
}
TEST
(
PclfVideoSubscriptionTest
GetMaxResolutionForEmptyReturnsNullopt
)
{
absl
:
:
optional
<
VideoResolution
>
resolution
=
VideoSubscription
:
:
GetMaxResolution
(
std
:
:
vector
<
VideoConfig
>
{
}
)
;
ASSERT_FALSE
(
resolution
.
has_value
(
)
)
;
}
TEST
(
PclfVideoSubscriptionTest
GetMaxResolutionSelectMaxForEachDimention
)
{
VideoConfig
max_width
(
1000
1
1
)
;
VideoConfig
max_height
(
1
100
1
)
;
VideoConfig
max_fps
(
1
1
10
)
;
absl
:
:
optional
<
VideoResolution
>
resolution
=
VideoSubscription
:
:
GetMaxResolution
(
std
:
:
vector
<
VideoConfig
>
{
max_width
max_height
max_fps
}
)
;
ASSERT_TRUE
(
resolution
.
has_value
(
)
)
;
EXPECT_EQ
(
resolution
-
>
width
(
)
static_cast
<
size_t
>
(
1000
)
)
;
EXPECT_EQ
(
resolution
-
>
height
(
)
static_cast
<
size_t
>
(
100
)
)
;
EXPECT_EQ
(
resolution
-
>
fps
(
)
10
)
;
}
}
}
}
