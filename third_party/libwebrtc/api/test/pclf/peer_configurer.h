#
ifndef
API_TEST_PCLF_PEER_CONFIGURER_H_
#
define
API_TEST_PCLF_PEER_CONFIGURER_H_
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
async_resolver_factory
.
h
"
#
include
"
api
/
audio
/
audio_mixer
.
h
"
#
include
"
api
/
call
/
call_factory_interface
.
h
"
#
include
"
api
/
fec_controller
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log_factory_interface
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
test
/
create_peer_connection_quality_test_frame_generator
.
h
"
#
include
"
api
/
test
/
pclf
/
media_configuration
.
h
"
#
include
"
api
/
test
/
pclf
/
media_quality_test_params
.
h
"
#
include
"
api
/
test
/
peer_network_dependencies
.
h
"
#
include
"
api
/
test
/
peerconnection_quality_test_fixture
.
h
"
#
include
"
api
/
transport
/
network_control
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
rtc_certificate_generator
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
namespace
webrtc_pc_e2e
{
class
PeerConfigurerImpl
final
:
public
PeerConnectionE2EQualityTestFixture
:
:
PeerConfigurer
{
public
:
using
VideoSource
=
absl
:
:
variant
<
std
:
:
unique_ptr
<
test
:
:
FrameGeneratorInterface
>
CapturingDeviceIndex
>
;
explicit
PeerConfigurerImpl
(
const
PeerNetworkDependencies
&
network_dependencies
)
;
PeerConfigurerImpl
(
rtc
:
:
Thread
*
network_thread
rtc
:
:
NetworkManager
*
network_manager
rtc
:
:
PacketSocketFactory
*
packet_socket_factory
)
:
components_
(
std
:
:
make_unique
<
InjectableComponents
>
(
network_thread
network_manager
packet_socket_factory
)
)
params_
(
std
:
:
make_unique
<
Params
>
(
)
)
configurable_params_
(
std
:
:
make_unique
<
ConfigurableParams
>
(
)
)
{
}
PeerConfigurer
*
SetName
(
absl
:
:
string_view
name
)
override
;
PeerConfigurer
*
SetTaskQueueFactory
(
std
:
:
unique_ptr
<
TaskQueueFactory
>
task_queue_factory
)
override
;
PeerConfigurer
*
SetCallFactory
(
std
:
:
unique_ptr
<
CallFactoryInterface
>
call_factory
)
override
;
PeerConfigurer
*
SetEventLogFactory
(
std
:
:
unique_ptr
<
RtcEventLogFactoryInterface
>
event_log_factory
)
override
;
PeerConfigurer
*
SetFecControllerFactory
(
std
:
:
unique_ptr
<
FecControllerFactoryInterface
>
fec_controller_factory
)
override
;
PeerConfigurer
*
SetNetworkControllerFactory
(
std
:
:
unique_ptr
<
NetworkControllerFactoryInterface
>
network_controller_factory
)
override
;
PeerConfigurer
*
SetVideoEncoderFactory
(
std
:
:
unique_ptr
<
VideoEncoderFactory
>
video_encoder_factory
)
override
;
PeerConfigurer
*
SetVideoDecoderFactory
(
std
:
:
unique_ptr
<
VideoDecoderFactory
>
video_decoder_factory
)
override
;
PeerConfigurer
*
SetNetEqFactory
(
std
:
:
unique_ptr
<
NetEqFactory
>
neteq_factory
)
override
;
PeerConfigurer
*
SetAudioProcessing
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioProcessing
>
audio_processing
)
override
;
PeerConfigurer
*
SetAudioMixer
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioMixer
>
audio_mixer
)
override
;
PeerConfigurer
*
SetUseNetworkThreadAsWorkerThread
(
)
override
;
PeerConfigurer
*
SetAsyncResolverFactory
(
std
:
:
unique_ptr
<
webrtc
:
:
AsyncResolverFactory
>
async_resolver_factory
)
override
;
PeerConfigurer
*
SetRTCCertificateGenerator
(
std
:
:
unique_ptr
<
rtc
:
:
RTCCertificateGeneratorInterface
>
cert_generator
)
override
;
PeerConfigurer
*
SetSSLCertificateVerifier
(
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificateVerifier
>
tls_cert_verifier
)
override
;
PeerConfigurer
*
SetIceTransportFactory
(
std
:
:
unique_ptr
<
IceTransportFactory
>
factory
)
override
;
PeerConfigurer
*
SetPortAllocatorExtraFlags
(
uint32_t
extra_flags
)
override
;
PeerConfigurer
*
AddVideoConfig
(
VideoConfig
config
)
override
;
PeerConfigurer
*
AddVideoConfig
(
VideoConfig
config
std
:
:
unique_ptr
<
test
:
:
FrameGeneratorInterface
>
generator
)
override
;
PeerConfigurer
*
AddVideoConfig
(
VideoConfig
config
CapturingDeviceIndex
capturing_device_index
)
override
;
PeerConfigurer
*
SetVideoSubscription
(
VideoSubscription
subscription
)
override
;
PeerConfigurer
*
SetVideoCodecs
(
std
:
:
vector
<
VideoCodecConfig
>
video_codecs
)
override
;
PeerConfigurer
*
SetAudioConfig
(
AudioConfig
config
)
override
;
PeerConfigurer
*
SetUseUlpFEC
(
bool
value
)
override
;
PeerConfigurer
*
SetUseFlexFEC
(
bool
value
)
override
;
PeerConfigurer
*
SetVideoEncoderBitrateMultiplier
(
double
multiplier
)
override
;
PeerConfigurer
*
SetRtcEventLogPath
(
std
:
:
string
path
)
override
;
PeerConfigurer
*
SetAecDumpPath
(
std
:
:
string
path
)
override
;
PeerConfigurer
*
SetRTCConfiguration
(
PeerConnectionInterface
:
:
RTCConfiguration
configuration
)
override
;
PeerConfigurer
*
SetRTCOfferAnswerOptions
(
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
)
override
;
PeerConfigurer
*
SetBitrateSettings
(
BitrateSettings
bitrate_settings
)
override
;
std
:
:
unique_ptr
<
InjectableComponents
>
ReleaseComponents
(
)
;
std
:
:
unique_ptr
<
Params
>
ReleaseParams
(
)
;
std
:
:
unique_ptr
<
ConfigurableParams
>
ReleaseConfigurableParams
(
)
;
std
:
:
vector
<
VideoSource
>
ReleaseVideoSources
(
)
;
InjectableComponents
*
components
(
)
{
return
components_
.
get
(
)
;
}
Params
*
params
(
)
{
return
params_
.
get
(
)
;
}
ConfigurableParams
*
configurable_params
(
)
{
return
configurable_params_
.
get
(
)
;
}
const
Params
&
params
(
)
const
{
return
*
params_
;
}
const
ConfigurableParams
&
configurable_params
(
)
const
{
return
*
configurable_params_
;
}
std
:
:
vector
<
VideoSource
>
*
video_sources
(
)
{
return
&
video_sources_
;
}
private
:
std
:
:
unique_ptr
<
InjectableComponents
>
components_
;
std
:
:
unique_ptr
<
Params
>
params_
;
std
:
:
unique_ptr
<
ConfigurableParams
>
configurable_params_
;
std
:
:
vector
<
VideoSource
>
video_sources_
;
}
;
class
DefaultNamesProvider
{
public
:
explicit
DefaultNamesProvider
(
absl
:
:
string_view
prefix
rtc
:
:
ArrayView
<
const
absl
:
:
string_view
>
default_names
=
{
}
)
;
void
MaybeSetName
(
absl
:
:
optional
<
std
:
:
string
>
&
name
)
;
private
:
std
:
:
string
GenerateName
(
)
;
std
:
:
string
GenerateNameInternal
(
)
;
const
std
:
:
string
prefix_
;
const
rtc
:
:
ArrayView
<
const
absl
:
:
string_view
>
default_names_
;
std
:
:
set
<
std
:
:
string
>
known_names_
;
size_t
counter_
=
0
;
}
;
class
PeerParamsPreprocessor
{
public
:
PeerParamsPreprocessor
(
)
;
void
SetDefaultValuesForMissingParams
(
PeerConfigurerImpl
&
peer
)
;
void
ValidateParams
(
const
PeerConfigurerImpl
&
peer
)
;
private
:
DefaultNamesProvider
peer_names_provider_
;
std
:
:
set
<
std
:
:
string
>
peer_names_
;
std
:
:
set
<
std
:
:
string
>
video_labels_
;
std
:
:
set
<
std
:
:
string
>
audio_labels_
;
std
:
:
set
<
std
:
:
string
>
video_sync_groups_
;
std
:
:
set
<
std
:
:
string
>
audio_sync_groups_
;
}
;
}
}
#
endif
