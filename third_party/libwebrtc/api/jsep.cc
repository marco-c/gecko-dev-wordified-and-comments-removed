#
include
"
api
/
jsep
.
h
"
namespace
webrtc
{
std
:
:
string
IceCandidateInterface
:
:
server_url
(
)
const
{
return
"
"
;
}
size_t
SessionDescriptionInterface
:
:
RemoveCandidates
(
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
candidates
)
{
return
0
;
}
const
char
SessionDescriptionInterface
:
:
kOffer
[
]
=
"
offer
"
;
const
char
SessionDescriptionInterface
:
:
kPrAnswer
[
]
=
"
pranswer
"
;
const
char
SessionDescriptionInterface
:
:
kAnswer
[
]
=
"
answer
"
;
const
char
SessionDescriptionInterface
:
:
kRollback
[
]
=
"
rollback
"
;
const
char
*
SdpTypeToString
(
SdpType
type
)
{
switch
(
type
)
{
case
SdpType
:
:
kOffer
:
return
SessionDescriptionInterface
:
:
kOffer
;
case
SdpType
:
:
kPrAnswer
:
return
SessionDescriptionInterface
:
:
kPrAnswer
;
case
SdpType
:
:
kAnswer
:
return
SessionDescriptionInterface
:
:
kAnswer
;
case
SdpType
:
:
kRollback
:
return
SessionDescriptionInterface
:
:
kRollback
;
}
return
"
"
;
}
std
:
:
optional
<
SdpType
>
SdpTypeFromString
(
const
std
:
:
string
&
type_str
)
{
if
(
type_str
=
=
SessionDescriptionInterface
:
:
kOffer
)
{
return
SdpType
:
:
kOffer
;
}
else
if
(
type_str
=
=
SessionDescriptionInterface
:
:
kPrAnswer
)
{
return
SdpType
:
:
kPrAnswer
;
}
else
if
(
type_str
=
=
SessionDescriptionInterface
:
:
kAnswer
)
{
return
SdpType
:
:
kAnswer
;
}
else
if
(
type_str
=
=
SessionDescriptionInterface
:
:
kRollback
)
{
return
SdpType
:
:
kRollback
;
}
else
{
return
std
:
:
nullopt
;
}
}
}
