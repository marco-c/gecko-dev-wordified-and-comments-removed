#
ifndef
API_AUDIO_BUILTIN_AUDIO_PROCESSING_FACTORY_H_
#
define
API_AUDIO_BUILTIN_AUDIO_PROCESSING_FACTORY_H_
#
include
<
memory
>
#
include
<
utility
>
#
include
"
absl
/
base
/
nullability
.
h
"
#
include
"
api
/
audio
/
audio_processing
.
h
"
#
include
"
api
/
audio
/
echo_control
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
BuiltinAudioProcessingFactory
:
public
AudioProcessingFactory
{
public
:
BuiltinAudioProcessingFactory
(
)
=
default
;
explicit
BuiltinAudioProcessingFactory
(
const
AudioProcessing
:
:
Config
&
config
)
:
config_
(
config
)
{
}
BuiltinAudioProcessingFactory
(
const
BuiltinAudioProcessingFactory
&
)
=
delete
;
BuiltinAudioProcessingFactory
&
operator
=
(
const
BuiltinAudioProcessingFactory
&
)
=
delete
;
~
BuiltinAudioProcessingFactory
(
)
override
=
default
;
BuiltinAudioProcessingFactory
&
SetConfig
(
const
AudioProcessing
:
:
Config
&
config
)
{
config_
=
config
;
return
*
this
;
}
BuiltinAudioProcessingFactory
&
SetEchoControlFactory
(
std
:
:
unique_ptr
<
EchoControlFactory
>
echo_control_factory
)
{
echo_control_factory_
=
std
:
:
move
(
echo_control_factory
)
;
return
*
this
;
}
BuiltinAudioProcessingFactory
&
SetCapturePostProcessing
(
std
:
:
unique_ptr
<
CustomProcessing
>
capture_post_processing
)
{
capture_post_processing_
=
std
:
:
move
(
capture_post_processing
)
;
return
*
this
;
}
BuiltinAudioProcessingFactory
&
SetRenderPreProcessing
(
std
:
:
unique_ptr
<
CustomProcessing
>
render_pre_processing
)
{
render_pre_processing_
=
std
:
:
move
(
render_pre_processing
)
;
return
*
this
;
}
BuiltinAudioProcessingFactory
&
SetEchoDetector
(
rtc
:
:
scoped_refptr
<
EchoDetector
>
echo_detector
)
{
echo_detector_
=
std
:
:
move
(
echo_detector
)
;
return
*
this
;
}
BuiltinAudioProcessingFactory
&
SetCaptureAnalyzer
(
std
:
:
unique_ptr
<
CustomAudioAnalyzer
>
capture_analyzer
)
{
capture_analyzer_
=
std
:
:
move
(
capture_analyzer
)
;
return
*
this
;
}
absl
:
:
Nullable
<
scoped_refptr
<
AudioProcessing
>
>
Create
(
const
Environment
&
env
)
override
;
private
:
bool
called_create_
=
false
;
AudioProcessing
:
:
Config
config_
;
std
:
:
unique_ptr
<
EchoControlFactory
>
echo_control_factory_
;
std
:
:
unique_ptr
<
CustomProcessing
>
capture_post_processing_
;
std
:
:
unique_ptr
<
CustomProcessing
>
render_pre_processing_
;
scoped_refptr
<
EchoDetector
>
echo_detector_
;
std
:
:
unique_ptr
<
CustomAudioAnalyzer
>
capture_analyzer_
;
}
;
}
#
endif
