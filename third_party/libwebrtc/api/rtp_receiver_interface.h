#
ifndef
API_RTP_RECEIVER_INTERFACE_H_
#
define
API_RTP_RECEIVER_INTERFACE_H_
#
include
<
optional
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
crypto
/
frame_decryptor_interface
.
h
"
#
include
"
api
/
dtls_transport_interface
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
ref_count
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
transport
/
rtp
/
rtp_source
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
RtpReceiverObserverInterface
{
public
:
virtual
void
OnFirstPacketReceived
(
MediaType
media_type
)
=
0
;
protected
:
virtual
~
RtpReceiverObserverInterface
(
)
{
}
}
;
class
RTC_EXPORT
RtpReceiverInterface
:
public
RefCountInterface
public
FrameTransformerHost
{
public
:
virtual
scoped_refptr
<
MediaStreamTrackInterface
>
track
(
)
const
=
0
;
virtual
scoped_refptr
<
DtlsTransportInterface
>
dtls_transport
(
)
const
;
virtual
std
:
:
vector
<
std
:
:
string
>
stream_ids
(
)
const
;
virtual
std
:
:
vector
<
scoped_refptr
<
MediaStreamInterface
>
>
streams
(
)
const
;
virtual
MediaType
media_type
(
)
const
=
0
;
virtual
std
:
:
string
id
(
)
const
=
0
;
virtual
RtpParameters
GetParameters
(
)
const
=
0
;
virtual
bool
SetParameters
(
const
RtpParameters
&
)
{
return
false
;
}
virtual
void
SetObserver
(
RtpReceiverObserverInterface
*
observer
)
=
0
;
virtual
void
SetJitterBufferMinimumDelay
(
std
:
:
optional
<
double
>
delay_seconds
)
=
0
;
virtual
std
:
:
vector
<
RtpSource
>
GetSources
(
)
const
;
virtual
void
SetFrameDecryptor
(
scoped_refptr
<
FrameDecryptorInterface
>
frame_decryptor
)
;
virtual
scoped_refptr
<
FrameDecryptorInterface
>
GetFrameDecryptor
(
)
const
;
virtual
void
SetDepacketizerToDecoderFrameTransformer
(
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
)
{
SetFrameTransformer
(
std
:
:
move
(
frame_transformer
)
)
;
}
void
SetFrameTransformer
(
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
)
override
;
protected
:
~
RtpReceiverInterface
(
)
override
=
default
;
}
;
}
#
endif
