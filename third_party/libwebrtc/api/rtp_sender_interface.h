#
ifndef
API_RTP_SENDER_INTERFACE_H_
#
define
API_RTP_SENDER_INTERFACE_H_
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
api
/
crypto
/
frame_encryptor_interface
.
h
"
#
include
"
api
/
dtls_transport_interface
.
h
"
#
include
"
api
/
dtmf_sender_interface
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
ref_count
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
api
/
rtp_sender_setparameters_callback
.
h
"
namespace
webrtc
{
class
RtpSenderObserverInterface
{
public
:
virtual
void
OnFirstPacketSent
(
webrtc
:
:
MediaType
media_type
)
=
0
;
protected
:
virtual
~
RtpSenderObserverInterface
(
)
{
}
}
;
class
RTC_EXPORT
RtpSenderInterface
:
public
webrtc
:
:
RefCountInterface
public
FrameTransformerHost
{
public
:
virtual
bool
SetTrack
(
MediaStreamTrackInterface
*
track
)
=
0
;
virtual
scoped_refptr
<
MediaStreamTrackInterface
>
track
(
)
const
=
0
;
virtual
scoped_refptr
<
DtlsTransportInterface
>
dtls_transport
(
)
const
=
0
;
virtual
uint32_t
ssrc
(
)
const
=
0
;
virtual
webrtc
:
:
MediaType
media_type
(
)
const
=
0
;
virtual
std
:
:
string
id
(
)
const
=
0
;
virtual
std
:
:
vector
<
std
:
:
string
>
stream_ids
(
)
const
=
0
;
virtual
void
SetStreams
(
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
)
=
0
;
virtual
std
:
:
vector
<
RtpEncodingParameters
>
init_send_encodings
(
)
const
=
0
;
virtual
RtpParameters
GetParameters
(
)
const
=
0
;
virtual
RTCError
SetParameters
(
const
RtpParameters
&
parameters
)
=
0
;
virtual
void
SetParametersAsync
(
const
RtpParameters
&
parameters
SetParametersCallback
callback
)
;
virtual
void
SetObserver
(
RtpSenderObserverInterface
*
)
{
}
virtual
scoped_refptr
<
DtmfSenderInterface
>
GetDtmfSender
(
)
const
=
0
;
virtual
void
SetFrameEncryptor
(
scoped_refptr
<
FrameEncryptorInterface
>
frame_encryptor
)
=
0
;
virtual
scoped_refptr
<
FrameEncryptorInterface
>
GetFrameEncryptor
(
)
const
=
0
;
virtual
void
SetEncoderToPacketizerFrameTransformer
(
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
)
{
SetFrameTransformer
(
std
:
:
move
(
frame_transformer
)
)
;
}
virtual
void
SetEncoderSelector
(
std
:
:
unique_ptr
<
VideoEncoderFactory
:
:
EncoderSelectorInterface
>
encoder_selector
)
=
0
;
void
SetFrameTransformer
(
scoped_refptr
<
FrameTransformerInterface
>
)
override
{
}
protected
:
~
RtpSenderInterface
(
)
override
=
default
;
}
;
}
#
endif
