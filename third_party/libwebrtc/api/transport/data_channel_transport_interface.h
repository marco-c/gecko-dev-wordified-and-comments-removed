#
ifndef
API_TRANSPORT_DATA_CHANNEL_TRANSPORT_INTERFACE_H_
#
define
API_TRANSPORT_DATA_CHANNEL_TRANSPORT_INTERFACE_H_
#
include
<
cstddef
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
priority
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
namespace
webrtc
{
enum
class
DataMessageType
{
kText
kBinary
kControl
}
;
struct
SendDataParams
{
DataMessageType
type
=
DataMessageType
:
:
kText
;
bool
ordered
=
false
;
absl
:
:
optional
<
int
>
max_rtx_count
;
absl
:
:
optional
<
int
>
max_rtx_ms
;
}
;
class
DataChannelSink
{
public
:
virtual
~
DataChannelSink
(
)
=
default
;
virtual
void
OnDataReceived
(
int
channel_id
DataMessageType
type
const
rtc
:
:
CopyOnWriteBuffer
&
buffer
)
=
0
;
virtual
void
OnChannelClosing
(
int
channel_id
)
=
0
;
virtual
void
OnChannelClosed
(
int
channel_id
)
=
0
;
virtual
void
OnReadyToSend
(
)
=
0
;
virtual
void
OnTransportClosed
(
RTCError
error
)
{
}
virtual
void
OnBufferedAmountLow
(
int
channel_id
)
=
0
;
}
;
class
DataChannelTransportInterface
{
public
:
virtual
~
DataChannelTransportInterface
(
)
=
default
;
virtual
RTCError
OpenChannel
(
int
channel_id
PriorityValue
priority
)
=
0
;
virtual
RTCError
SendData
(
int
channel_id
const
SendDataParams
&
params
const
rtc
:
:
CopyOnWriteBuffer
&
buffer
)
=
0
;
virtual
RTCError
CloseChannel
(
int
channel_id
)
=
0
;
virtual
void
SetDataSink
(
DataChannelSink
*
sink
)
=
0
;
virtual
bool
IsReadyToSend
(
)
const
=
0
;
virtual
size_t
buffered_amount
(
int
channel_id
)
const
=
0
;
virtual
size_t
buffered_amount_low_threshold
(
int
channel_id
)
const
=
0
;
virtual
void
SetBufferedAmountLowThreshold
(
int
channel_id
size_t
bytes
)
=
0
;
}
;
}
#
endif
