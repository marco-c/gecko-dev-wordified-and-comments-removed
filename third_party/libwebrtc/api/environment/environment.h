#
ifndef
API_ENVIRONMENT_ENVIRONMENT_H_
#
define
API_ENVIRONMENT_ENVIRONMENT_H_
#
include
<
utility
>
#
include
"
absl
/
base
/
nullability
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
ref_counted_base
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
Environment
final
{
public
:
Environment
(
)
=
delete
;
Environment
(
const
Environment
&
)
=
default
;
Environment
(
Environment
&
&
)
=
default
;
Environment
&
operator
=
(
const
Environment
&
)
=
default
;
Environment
&
operator
=
(
Environment
&
&
)
=
default
;
~
Environment
(
)
=
default
;
const
FieldTrialsView
&
field_trials
(
)
const
;
Clock
&
clock
(
)
const
;
TaskQueueFactory
&
task_queue_factory
(
)
const
;
RtcEventLog
&
event_log
(
)
const
;
private
:
friend
class
EnvironmentFactory
;
Environment
(
scoped_refptr
<
const
rtc
:
:
RefCountedBase
>
storage
const
FieldTrialsView
*
absl_nonnull
field_trials
Clock
*
absl_nonnull
clock
TaskQueueFactory
*
absl_nonnull
task_queue_factory
RtcEventLog
*
absl_nonnull
event_log
)
:
storage_
(
std
:
:
move
(
storage
)
)
field_trials_
(
field_trials
)
clock_
(
clock
)
task_queue_factory_
(
task_queue_factory
)
event_log_
(
event_log
)
{
}
scoped_refptr
<
const
rtc
:
:
RefCountedBase
>
storage_
;
const
FieldTrialsView
*
absl_nonnull
field_trials_
;
Clock
*
absl_nonnull
clock_
;
TaskQueueFactory
*
absl_nonnull
task_queue_factory_
;
RtcEventLog
*
absl_nonnull
event_log_
;
}
;
inline
const
FieldTrialsView
&
Environment
:
:
field_trials
(
)
const
{
return
*
field_trials_
;
}
inline
Clock
&
Environment
:
:
clock
(
)
const
{
return
*
clock_
;
}
inline
TaskQueueFactory
&
Environment
:
:
task_queue_factory
(
)
const
{
return
*
task_queue_factory_
;
}
inline
RtcEventLog
&
Environment
:
:
event_log
(
)
const
{
return
*
event_log_
;
}
}
#
endif
