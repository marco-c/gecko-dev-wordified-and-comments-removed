#
ifndef
API_STATS_RTC_STATS_H_
#
define
API_STATS_RTC_STATS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
stats
/
rtc_stats_member
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export_template
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
RTCStats
{
public
:
RTCStats
(
const
std
:
:
string
&
id
Timestamp
timestamp
)
:
id_
(
id
)
timestamp_
(
timestamp
)
{
}
virtual
~
RTCStats
(
)
{
}
virtual
std
:
:
unique_ptr
<
RTCStats
>
copy
(
)
const
=
0
;
const
std
:
:
string
&
id
(
)
const
{
return
id_
;
}
Timestamp
timestamp
(
)
const
{
return
timestamp_
;
}
virtual
const
char
*
type
(
)
const
=
0
;
std
:
:
vector
<
const
RTCStatsMemberInterface
*
>
Members
(
)
const
;
bool
operator
=
=
(
const
RTCStats
&
other
)
const
;
bool
operator
!
=
(
const
RTCStats
&
other
)
const
;
std
:
:
string
ToJson
(
)
const
;
template
<
typename
T
>
const
T
&
cast_to
(
)
const
{
RTC_DCHECK_EQ
(
type
(
)
T
:
:
kType
)
;
return
static_cast
<
const
T
&
>
(
*
this
)
;
}
protected
:
virtual
std
:
:
vector
<
const
RTCStatsMemberInterface
*
>
MembersOfThisObjectAndAncestors
(
size_t
additional_capacity
)
const
;
std
:
:
string
const
id_
;
Timestamp
timestamp_
;
}
;
#
define
WEBRTC_RTCSTATS_DECL
(
)
\
protected
:
\
std
:
:
vector
<
const
webrtc
:
:
RTCStatsMemberInterface
*
>
\
MembersOfThisObjectAndAncestors
(
size_t
local_var_additional_capacity
)
\
const
override
;
\
\
public
:
\
static
const
char
kType
[
]
;
\
\
std
:
:
unique_ptr
<
webrtc
:
:
RTCStats
>
copy
(
)
const
override
;
\
const
char
*
type
(
)
const
override
#
define
WEBRTC_RTCSTATS_IMPL
(
this_class
parent_class
type_str
.
.
.
)
\
const
char
this_class
:
:
kType
[
]
=
type_str
;
\
\
std
:
:
unique_ptr
<
webrtc
:
:
RTCStats
>
this_class
:
:
copy
(
)
const
{
\
return
std
:
:
make_unique
<
this_class
>
(
*
this
)
;
\
}
\
\
const
char
*
this_class
:
:
type
(
)
const
{
\
return
this_class
:
:
kType
;
\
}
\
\
std
:
:
vector
<
const
webrtc
:
:
RTCStatsMemberInterface
*
>
\
this_class
:
:
MembersOfThisObjectAndAncestors
(
\
size_t
local_var_additional_capacity
)
const
{
\
const
webrtc
:
:
RTCStatsMemberInterface
*
local_var_members
[
]
=
{
\
__VA_ARGS__
}
;
\
size_t
local_var_members_count
=
\
sizeof
(
local_var_members
)
/
sizeof
(
local_var_members
[
0
]
)
;
\
std
:
:
vector
<
const
webrtc
:
:
RTCStatsMemberInterface
*
>
\
local_var_members_vec
=
parent_class
:
:
MembersOfThisObjectAndAncestors
(
\
local_var_members_count
+
local_var_additional_capacity
)
;
\
RTC_DCHECK_GE
(
\
local_var_members_vec
.
capacity
(
)
-
local_var_members_vec
.
size
(
)
\
local_var_members_count
+
local_var_additional_capacity
)
;
\
local_var_members_vec
.
insert
(
local_var_members_vec
.
end
(
)
\
&
local_var_members
[
0
]
\
&
local_var_members
[
local_var_members_count
]
)
;
\
return
local_var_members_vec
;
\
}
#
define
WEBRTC_RTCSTATS_IMPL_NO_MEMBERS
(
this_class
parent_class
type_str
)
\
const
char
this_class
:
:
kType
[
]
=
type_str
;
\
\
std
:
:
unique_ptr
<
webrtc
:
:
RTCStats
>
this_class
:
:
copy
(
)
const
{
\
return
std
:
:
make_unique
<
this_class
>
(
*
this
)
;
\
}
\
\
const
char
*
this_class
:
:
type
(
)
const
{
\
return
this_class
:
:
kType
;
\
}
\
\
std
:
:
vector
<
const
webrtc
:
:
RTCStatsMemberInterface
*
>
\
this_class
:
:
MembersOfThisObjectAndAncestors
(
\
size_t
local_var_additional_capacity
)
const
{
\
return
parent_class
:
:
MembersOfThisObjectAndAncestors
(
0
)
;
\
}
}
#
endif
