#
ifndef
API_STATS_RTC_STATS_MEMBER_H_
#
define
API_STATS_RTC_STATS_MEMBER_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export_template
.
h
"
namespace
webrtc
{
class
RTCStatsMemberInterface
{
public
:
enum
Type
{
kBool
kInt32
kUint32
kInt64
kUint64
kDouble
kString
kSequenceBool
kSequenceInt32
kSequenceUint32
kSequenceInt64
kSequenceUint64
kSequenceDouble
kSequenceString
kMapStringUint64
kMapStringDouble
}
;
virtual
~
RTCStatsMemberInterface
(
)
{
}
virtual
Type
type
(
)
const
=
0
;
virtual
bool
is_sequence
(
)
const
=
0
;
virtual
bool
is_string
(
)
const
=
0
;
virtual
bool
is_defined
(
)
const
=
0
;
bool
operator
=
=
(
const
RTCStatsMemberInterface
&
other
)
const
{
return
IsEqual
(
other
)
;
}
bool
operator
!
=
(
const
RTCStatsMemberInterface
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
virtual
std
:
:
string
ValueToString
(
)
const
=
0
;
virtual
std
:
:
string
ValueToJson
(
)
const
=
0
;
virtual
const
RTCStatsMemberInterface
*
member_ptr
(
)
const
{
return
this
;
}
template
<
typename
T
>
const
T
&
cast_to
(
)
const
{
RTC_DCHECK_EQ
(
type
(
)
T
:
:
StaticType
(
)
)
;
return
static_cast
<
const
T
&
>
(
*
member_ptr
(
)
)
;
}
protected
:
virtual
bool
IsEqual
(
const
RTCStatsMemberInterface
&
other
)
const
=
0
;
}
;
template
<
typename
T
>
class
RTCStatsMember
:
public
RTCStatsMemberInterface
{
public
:
RTCStatsMember
(
)
{
}
explicit
RTCStatsMember
(
const
T
&
value
)
:
value_
(
value
)
{
}
static
Type
StaticType
(
)
;
Type
type
(
)
const
override
{
return
StaticType
(
)
;
}
bool
is_sequence
(
)
const
override
;
bool
is_string
(
)
const
override
;
bool
is_defined
(
)
const
override
{
return
value_
.
has_value
(
)
;
}
std
:
:
string
ValueToString
(
)
const
override
;
std
:
:
string
ValueToJson
(
)
const
override
;
template
<
typename
U
>
inline
T
ValueOrDefault
(
U
default_value
)
const
{
return
value_
.
value_or
(
default_value
)
;
}
T
&
operator
=
(
const
T
&
value
)
{
value_
=
value
;
return
value_
.
value
(
)
;
}
T
&
operator
=
(
const
T
&
&
value
)
{
value_
=
std
:
:
move
(
value
)
;
return
value_
.
value
(
)
;
}
bool
has_value
(
)
const
{
return
value_
.
has_value
(
)
;
}
const
T
&
value
(
)
const
{
return
value_
.
value
(
)
;
}
T
&
value
(
)
{
return
value_
.
value
(
)
;
}
T
&
operator
*
(
)
{
RTC_DCHECK
(
value_
)
;
return
*
value_
;
}
const
T
&
operator
*
(
)
const
{
RTC_DCHECK
(
value_
)
;
return
*
value_
;
}
T
*
operator
-
>
(
)
{
RTC_DCHECK
(
value_
)
;
return
&
(
*
value_
)
;
}
const
T
*
operator
-
>
(
)
const
{
RTC_DCHECK
(
value_
)
;
return
&
(
*
value_
)
;
}
bool
IsEqual
(
const
RTCStatsMemberInterface
&
other
)
const
override
{
if
(
type
(
)
!
=
other
.
type
(
)
)
return
false
;
const
RTCStatsMember
<
T
>
&
other_t
=
static_cast
<
const
RTCStatsMember
<
T
>
&
>
(
other
)
;
return
value_
=
=
other_t
.
value_
;
}
private
:
absl
:
:
optional
<
T
>
value_
;
}
;
namespace
rtc_stats_internal
{
typedef
std
:
:
map
<
std
:
:
string
uint64_t
>
MapStringUint64
;
typedef
std
:
:
map
<
std
:
:
string
double
>
MapStringDouble
;
}
#
define
WEBRTC_DECLARE_RTCSTATSMEMBER
(
T
)
\
template
<
>
\
RTC_EXPORT
RTCStatsMemberInterface
:
:
Type
RTCStatsMember
<
T
>
:
:
StaticType
(
)
;
\
template
<
>
\
RTC_EXPORT
bool
RTCStatsMember
<
T
>
:
:
is_sequence
(
)
const
;
\
template
<
>
\
RTC_EXPORT
bool
RTCStatsMember
<
T
>
:
:
is_string
(
)
const
;
\
template
<
>
\
RTC_EXPORT
std
:
:
string
RTCStatsMember
<
T
>
:
:
ValueToString
(
)
const
;
\
template
<
>
\
RTC_EXPORT
std
:
:
string
RTCStatsMember
<
T
>
:
:
ValueToJson
(
)
const
;
\
extern
template
class
RTC_EXPORT_TEMPLATE_DECLARE
(
RTC_EXPORT
)
\
RTCStatsMember
<
T
>
WEBRTC_DECLARE_RTCSTATSMEMBER
(
bool
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
int32_t
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
uint32_t
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
int64_t
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
uint64_t
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
double
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
std
:
:
string
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
std
:
:
vector
<
bool
>
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
std
:
:
vector
<
int32_t
>
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
std
:
:
vector
<
uint32_t
>
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
std
:
:
vector
<
int64_t
>
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
std
:
:
vector
<
uint64_t
>
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
std
:
:
vector
<
double
>
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
std
:
:
vector
<
std
:
:
string
>
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
rtc_stats_internal
:
:
MapStringUint64
)
;
WEBRTC_DECLARE_RTCSTATSMEMBER
(
rtc_stats_internal
:
:
MapStringDouble
)
;
}
#
endif
