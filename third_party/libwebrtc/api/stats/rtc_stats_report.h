#
ifndef
API_STATS_RTC_STATS_REPORT_H_
#
define
API_STATS_RTC_STATS_REPORT_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
stats
/
rtc_stats
.
h
"
#
include
"
rtc_base
/
ref_count
.
h
"
#
include
"
rtc_base
/
ref_counted_object
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
RTCStatsReport
:
public
rtc
:
:
RefCountInterface
{
public
:
typedef
std
:
:
map
<
std
:
:
string
std
:
:
unique_ptr
<
const
RTCStats
>
>
StatsMap
;
class
RTC_EXPORT
ConstIterator
{
public
:
ConstIterator
(
ConstIterator
&
&
other
)
;
~
ConstIterator
(
)
;
ConstIterator
&
operator
+
+
(
)
;
ConstIterator
&
operator
+
+
(
int
)
;
const
RTCStats
&
operator
*
(
)
const
;
const
RTCStats
*
operator
-
>
(
)
const
;
bool
operator
=
=
(
const
ConstIterator
&
other
)
const
;
bool
operator
!
=
(
const
ConstIterator
&
other
)
const
;
private
:
friend
class
RTCStatsReport
;
ConstIterator
(
const
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
&
report
StatsMap
:
:
const_iterator
it
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report_
;
StatsMap
:
:
const_iterator
it_
;
}
;
static
rtc
:
:
scoped_refptr
<
RTCStatsReport
>
Create
(
int64_t
timestamp_us
=
0
)
;
explicit
RTCStatsReport
(
int64_t
timestamp_us
)
;
RTCStatsReport
(
const
RTCStatsReport
&
other
)
=
delete
;
rtc
:
:
scoped_refptr
<
RTCStatsReport
>
Copy
(
)
const
;
int64_t
timestamp_us
(
)
const
{
return
timestamp_us_
;
}
void
AddStats
(
std
:
:
unique_ptr
<
const
RTCStats
>
stats
)
;
const
RTCStats
*
Get
(
const
std
:
:
string
&
id
)
const
;
size_t
size
(
)
const
{
return
stats_
.
size
(
)
;
}
template
<
typename
T
>
const
T
*
GetAs
(
const
std
:
:
string
&
id
)
const
{
const
RTCStats
*
stats
=
Get
(
id
)
;
if
(
!
stats
|
|
stats
-
>
type
(
)
!
=
T
:
:
kType
)
{
return
nullptr
;
}
return
&
stats
-
>
cast_to
<
const
T
>
(
)
;
}
std
:
:
unique_ptr
<
const
RTCStats
>
Take
(
const
std
:
:
string
&
id
)
;
void
TakeMembersFrom
(
rtc
:
:
scoped_refptr
<
RTCStatsReport
>
other
)
;
ConstIterator
begin
(
)
const
;
ConstIterator
end
(
)
const
;
template
<
typename
T
>
std
:
:
vector
<
const
T
*
>
GetStatsOfType
(
)
const
{
std
:
:
vector
<
const
T
*
>
stats_of_type
;
for
(
const
RTCStats
&
stats
:
*
this
)
{
if
(
stats
.
type
(
)
=
=
T
:
:
kType
)
stats_of_type
.
push_back
(
&
stats
.
cast_to
<
const
T
>
(
)
)
;
}
return
stats_of_type
;
}
std
:
:
string
ToJson
(
)
const
;
friend
class
rtc
:
:
RefCountedObject
<
RTCStatsReport
>
;
private
:
~
RTCStatsReport
(
)
override
;
int64_t
timestamp_us_
;
StatsMap
stats_
;
}
;
}
#
endif
