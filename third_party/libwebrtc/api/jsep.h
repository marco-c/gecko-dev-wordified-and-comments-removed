#
ifndef
API_JSEP_H_
#
define
API_JSEP_H_
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
base
/
nullability
.
h
"
#
include
"
absl
/
strings
/
str_format
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
ref_count
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
SessionDescription
;
struct
SdpParseError
{
public
:
std
:
:
string
line
;
std
:
:
string
description
;
}
;
class
RTC_EXPORT
IceCandidate
final
{
public
:
IceCandidate
(
absl
:
:
string_view
sdp_mid
int
sdp_mline_index
const
Candidate
&
candidate
)
;
~
IceCandidate
(
)
=
default
;
IceCandidate
(
const
IceCandidate
&
)
=
delete
;
IceCandidate
&
operator
=
(
const
IceCandidate
&
)
=
delete
;
static
std
:
:
unique_ptr
<
IceCandidate
>
Create
(
absl
:
:
string_view
mid
int
sdp_mline_index
absl
:
:
string_view
sdp
SdpParseError
*
absl_nullable
error
=
nullptr
)
;
std
:
:
string
sdp_mid
(
)
const
{
return
sdp_mid_
;
}
int
sdp_mline_index
(
)
const
{
return
sdp_mline_index_
;
}
const
Candidate
&
candidate
(
)
const
{
return
candidate_
;
}
std
:
:
string
server_url
(
)
const
{
return
candidate_
.
url
(
)
;
}
std
:
:
string
ToString
(
)
const
;
bool
ToString
(
std
:
:
string
*
out
)
const
{
if
(
!
out
)
return
false
;
*
out
=
ToString
(
)
;
return
!
out
-
>
empty
(
)
;
}
template
<
typename
Sink
>
friend
void
AbslStringify
(
Sink
&
sink
const
IceCandidate
&
c
)
{
absl
:
:
Format
(
&
sink
"
IceCandidate
:
{
'
%
s
'
%
i
'
%
s
'
}
"
c
.
sdp_mid_
.
c_str
(
)
c
.
sdp_mline_index_
c
.
ToString
(
)
.
c_str
(
)
)
;
}
private
:
const
std
:
:
string
sdp_mid_
;
const
int
sdp_mline_index_
;
const
Candidate
candidate_
;
}
;
using
JsepIceCandidate
=
IceCandidate
;
using
IceCandidateInterface
=
IceCandidate
;
RTC_EXPORT
IceCandidate
*
CreateIceCandidate
(
const
std
:
:
string
&
sdp_mid
int
sdp_mline_index
const
std
:
:
string
&
sdp
SdpParseError
*
error
)
;
RTC_EXPORT
std
:
:
unique_ptr
<
IceCandidate
>
CreateIceCandidate
(
const
std
:
:
string
&
sdp_mid
int
sdp_mline_index
const
Candidate
&
candidate
)
;
class
IceCandidateCollection
final
{
public
:
IceCandidateCollection
(
)
=
default
;
explicit
IceCandidateCollection
(
std
:
:
vector
<
std
:
:
unique_ptr
<
IceCandidate
>
>
&
&
candidates
)
:
candidates_
(
std
:
:
move
(
candidates
)
)
{
}
~
IceCandidateCollection
(
)
=
default
;
IceCandidateCollection
(
IceCandidateCollection
&
&
o
)
=
default
;
IceCandidateCollection
(
const
IceCandidateCollection
&
)
=
delete
;
IceCandidateCollection
&
operator
=
(
const
IceCandidateCollection
&
)
=
delete
;
size_t
count
(
)
const
{
return
candidates_
.
size
(
)
;
}
bool
empty
(
)
const
{
return
candidates_
.
empty
(
)
;
}
const
IceCandidate
*
at
(
size_t
index
)
const
;
void
add
(
std
:
:
unique_ptr
<
IceCandidate
>
candidate
)
;
[
[
deprecated
(
"
Use
unique_ptr
version
"
)
]
]
void
add
(
IceCandidate
*
candidate
)
;
size_t
remove
(
const
Candidate
&
candidate
)
;
size_t
remove
(
const
IceCandidate
*
candidate
)
;
const
std
:
:
vector
<
std
:
:
unique_ptr
<
IceCandidate
>
>
&
candidates
(
)
const
{
return
candidates_
;
}
bool
HasCandidate
(
const
IceCandidate
*
candidate
)
const
;
IceCandidateCollection
Clone
(
)
const
;
private
:
std
:
:
vector
<
std
:
:
unique_ptr
<
IceCandidate
>
>
candidates_
;
}
;
using
JsepCandidateCollection
=
IceCandidateCollection
;
enum
class
SdpType
{
kOffer
kPrAnswer
kAnswer
kRollback
}
;
RTC_EXPORT
const
char
*
SdpTypeToString
(
SdpType
type
)
;
RTC_EXPORT
std
:
:
optional
<
SdpType
>
SdpTypeFromString
(
const
std
:
:
string
&
type_str
)
;
class
RTC_EXPORT
SessionDescriptionInterface
{
public
:
static
const
char
kOffer
[
]
;
static
const
char
kPrAnswer
[
]
;
static
const
char
kAnswer
[
]
;
static
const
char
kRollback
[
]
;
virtual
~
SessionDescriptionInterface
(
)
{
}
virtual
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
Clone
(
)
const
{
return
nullptr
;
}
virtual
SessionDescription
*
description
(
)
=
0
;
virtual
const
SessionDescription
*
description
(
)
const
=
0
;
virtual
std
:
:
string
session_id
(
)
const
=
0
;
virtual
std
:
:
string
session_version
(
)
const
=
0
;
virtual
SdpType
GetType
(
)
const
;
virtual
std
:
:
string
type
(
)
const
=
0
;
virtual
bool
AddCandidate
(
const
IceCandidate
*
candidate
)
=
0
;
virtual
bool
RemoveCandidate
(
const
IceCandidate
*
candidate
)
=
0
;
virtual
size_t
RemoveCandidates
(
const
std
:
:
vector
<
Candidate
>
&
candidates
)
;
virtual
size_t
number_of_mediasections
(
)
const
=
0
;
virtual
const
IceCandidateCollection
*
candidates
(
size_t
mediasection_index
)
const
=
0
;
virtual
bool
ToString
(
std
:
:
string
*
out
)
const
=
0
;
template
<
typename
Sink
>
friend
void
AbslStringify
(
Sink
&
sink
const
SessionDescriptionInterface
&
p
)
{
sink
.
Append
(
"
\
n
-
-
-
BEGIN
SDP
"
)
;
sink
.
Append
(
SdpTypeToString
(
p
.
GetType
(
)
)
)
;
sink
.
Append
(
"
-
-
-
\
n
"
)
;
std
:
:
string
temp
;
if
(
p
.
ToString
(
&
temp
)
)
{
sink
.
Append
(
temp
)
;
}
else
{
sink
.
Append
(
"
Error
in
ToString
\
n
"
)
;
}
sink
.
Append
(
"
-
-
-
END
SDP
-
-
-
\
n
"
)
;
}
}
;
[
[
deprecated
(
"
Use
version
with
SdpType
argument
"
)
]
]
RTC_EXPORT
SessionDescriptionInterface
*
CreateSessionDescription
(
const
std
:
:
string
&
type
const
std
:
:
string
&
sdp
SdpParseError
*
error
)
;
RTC_EXPORT
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
CreateSessionDescription
(
SdpType
type
const
std
:
:
string
&
sdp
)
;
RTC_EXPORT
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
CreateSessionDescription
(
SdpType
type
const
std
:
:
string
&
sdp
SdpParseError
*
error_out
)
;
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
CreateSessionDescription
(
SdpType
type
const
std
:
:
string
&
session_id
const
std
:
:
string
&
session_version
std
:
:
unique_ptr
<
SessionDescription
>
description
)
;
class
RTC_EXPORT
CreateSessionDescriptionObserver
:
public
RefCountInterface
{
public
:
virtual
void
OnSuccess
(
SessionDescriptionInterface
*
desc
)
=
0
;
virtual
void
OnFailure
(
RTCError
error
)
=
0
;
protected
:
~
CreateSessionDescriptionObserver
(
)
override
=
default
;
}
;
class
RTC_EXPORT
SetSessionDescriptionObserver
:
public
RefCountInterface
{
public
:
virtual
void
OnSuccess
(
)
=
0
;
virtual
void
OnFailure
(
RTCError
error
)
=
0
;
protected
:
~
SetSessionDescriptionObserver
(
)
override
=
default
;
}
;
}
#
endif
