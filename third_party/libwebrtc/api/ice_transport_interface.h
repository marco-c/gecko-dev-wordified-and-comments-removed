#
ifndef
API_ICE_TRANSPORT_INTERFACE_H_
#
define
API_ICE_TRANSPORT_INTERFACE_H_
#
include
<
string
>
#
include
"
api
/
async_dns_resolver
.
h
"
#
include
"
api
/
async_resolver_factory
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
rtc_base
/
ref_count
.
h
"
namespace
cricket
{
class
IceTransportInternal
;
class
PortAllocator
;
}
namespace
webrtc
{
class
IceTransportInterface
:
public
rtc
:
:
RefCountInterface
{
public
:
virtual
cricket
:
:
IceTransportInternal
*
internal
(
)
=
0
;
}
;
struct
IceTransportInit
final
{
public
:
IceTransportInit
(
)
=
default
;
IceTransportInit
(
const
IceTransportInit
&
)
=
delete
;
IceTransportInit
(
IceTransportInit
&
&
)
=
default
;
IceTransportInit
&
operator
=
(
const
IceTransportInit
&
)
=
delete
;
IceTransportInit
&
operator
=
(
IceTransportInit
&
&
)
=
default
;
cricket
:
:
PortAllocator
*
port_allocator
(
)
{
return
port_allocator_
;
}
void
set_port_allocator
(
cricket
:
:
PortAllocator
*
port_allocator
)
{
port_allocator_
=
port_allocator
;
}
AsyncDnsResolverFactoryInterface
*
async_dns_resolver_factory
(
)
{
return
async_dns_resolver_factory_
;
}
void
set_async_dns_resolver_factory
(
AsyncDnsResolverFactoryInterface
*
async_dns_resolver_factory
)
{
RTC_DCHECK
(
!
async_resolver_factory_
)
;
async_dns_resolver_factory_
=
async_dns_resolver_factory
;
}
AsyncResolverFactory
*
async_resolver_factory
(
)
{
return
async_resolver_factory_
;
}
ABSL_DEPRECATED
(
"
bugs
.
webrtc
.
org
/
12598
"
)
void
set_async_resolver_factory
(
AsyncResolverFactory
*
async_resolver_factory
)
{
RTC_DCHECK
(
!
async_dns_resolver_factory_
)
;
async_resolver_factory_
=
async_resolver_factory
;
}
RtcEventLog
*
event_log
(
)
{
return
event_log_
;
}
void
set_event_log
(
RtcEventLog
*
event_log
)
{
event_log_
=
event_log
;
}
private
:
cricket
:
:
PortAllocator
*
port_allocator_
=
nullptr
;
AsyncDnsResolverFactoryInterface
*
async_dns_resolver_factory_
=
nullptr
;
AsyncResolverFactory
*
async_resolver_factory_
=
nullptr
;
RtcEventLog
*
event_log_
=
nullptr
;
}
;
class
IceTransportFactory
{
public
:
virtual
~
IceTransportFactory
(
)
=
default
;
virtual
rtc
:
:
scoped_refptr
<
IceTransportInterface
>
CreateIceTransport
(
const
std
:
:
string
&
transport_name
int
component
IceTransportInit
init
)
=
0
;
}
;
}
#
endif
