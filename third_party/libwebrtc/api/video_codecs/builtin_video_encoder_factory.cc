#
include
"
api
/
video_codecs
/
builtin_video_encoder_factory
.
h
"
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
match
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
media_constants
.
h
"
#
include
"
media
/
engine
/
encoder_simulcast_proxy
.
h
"
#
include
"
media
/
engine
/
internal_encoder_factory
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
bool
IsFormatSupported
(
const
std
:
:
vector
<
SdpVideoFormat
>
&
supported_formats
const
SdpVideoFormat
&
format
)
{
for
(
const
SdpVideoFormat
&
supported_format
:
supported_formats
)
{
if
(
cricket
:
:
IsSameCodec
(
format
.
name
format
.
parameters
supported_format
.
name
supported_format
.
parameters
)
)
{
return
true
;
}
}
return
false
;
}
class
BuiltinVideoEncoderFactory
:
public
VideoEncoderFactory
{
public
:
BuiltinVideoEncoderFactory
(
)
:
internal_encoder_factory_
(
new
InternalEncoderFactory
(
)
)
{
}
VideoEncoderFactory
:
:
CodecInfo
QueryVideoEncoder
(
const
SdpVideoFormat
&
format
)
const
override
{
RTC_DCHECK
(
IsFormatSupported
(
internal_encoder_factory_
-
>
GetSupportedFormats
(
)
format
)
)
;
VideoEncoderFactory
:
:
CodecInfo
info
;
return
info
;
}
std
:
:
unique_ptr
<
VideoEncoder
>
CreateVideoEncoder
(
const
SdpVideoFormat
&
format
)
override
{
std
:
:
unique_ptr
<
VideoEncoder
>
internal_encoder
;
if
(
IsFormatSupported
(
internal_encoder_factory_
-
>
GetSupportedFormats
(
)
format
)
)
{
internal_encoder
=
std
:
:
make_unique
<
EncoderSimulcastProxy
>
(
internal_encoder_factory_
.
get
(
)
format
)
;
}
return
internal_encoder
;
}
std
:
:
vector
<
SdpVideoFormat
>
GetSupportedFormats
(
)
const
override
{
return
internal_encoder_factory_
-
>
GetSupportedFormats
(
)
;
}
private
:
const
std
:
:
unique_ptr
<
VideoEncoderFactory
>
internal_encoder_factory_
;
}
;
}
std
:
:
unique_ptr
<
VideoEncoderFactory
>
CreateBuiltinVideoEncoderFactory
(
)
{
return
std
:
:
make_unique
<
BuiltinVideoEncoderFactory
>
(
)
;
}
}
