#
ifndef
API_VIDEO_CODECS_SDP_VIDEO_FORMAT_H_
#
define
API_VIDEO_CODECS_SDP_VIDEO_FORMAT_H_
#
include
<
map
>
#
include
<
string
>
#
include
"
absl
/
container
/
inlined_vector
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
video_codecs
/
scalability_mode
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
struct
RTC_EXPORT
SdpVideoFormat
{
using
Parameters
[
[
deprecated
(
"
Use
webrtc
:
:
CodecParameterMap
"
)
]
]
=
std
:
:
map
<
std
:
:
string
std
:
:
string
>
;
explicit
SdpVideoFormat
(
const
std
:
:
string
&
name
)
;
SdpVideoFormat
(
const
std
:
:
string
&
name
const
CodecParameterMap
&
parameters
)
;
SdpVideoFormat
(
const
std
:
:
string
&
name
const
CodecParameterMap
&
parameters
const
absl
:
:
InlinedVector
<
ScalabilityMode
kScalabilityModeCount
>
&
scalability_modes
)
;
SdpVideoFormat
(
const
SdpVideoFormat
&
format
const
absl
:
:
InlinedVector
<
ScalabilityMode
kScalabilityModeCount
>
&
scalability_modes
)
;
SdpVideoFormat
(
const
SdpVideoFormat
&
)
;
SdpVideoFormat
(
SdpVideoFormat
&
&
)
;
SdpVideoFormat
&
operator
=
(
const
SdpVideoFormat
&
)
;
SdpVideoFormat
&
operator
=
(
SdpVideoFormat
&
&
)
;
~
SdpVideoFormat
(
)
;
bool
IsSameCodec
(
const
SdpVideoFormat
&
other
)
const
;
bool
IsCodecInList
(
rtc
:
:
ArrayView
<
const
webrtc
:
:
SdpVideoFormat
>
formats
)
const
;
std
:
:
string
ToString
(
)
const
;
friend
RTC_EXPORT
bool
operator
=
=
(
const
SdpVideoFormat
&
a
const
SdpVideoFormat
&
b
)
;
friend
RTC_EXPORT
bool
operator
!
=
(
const
SdpVideoFormat
&
a
const
SdpVideoFormat
&
b
)
{
return
!
(
a
=
=
b
)
;
}
std
:
:
string
name
;
CodecParameterMap
parameters
;
absl
:
:
InlinedVector
<
ScalabilityMode
kScalabilityModeCount
>
scalability_modes
;
static
const
SdpVideoFormat
VP8
(
)
;
static
const
SdpVideoFormat
H264
(
)
;
static
const
SdpVideoFormat
VP9Profile0
(
)
;
static
const
SdpVideoFormat
VP9Profile1
(
)
;
static
const
SdpVideoFormat
VP9Profile2
(
)
;
static
const
SdpVideoFormat
VP9Profile3
(
)
;
static
const
SdpVideoFormat
AV1Profile0
(
)
;
static
const
SdpVideoFormat
AV1Profile1
(
)
;
}
;
absl
:
:
optional
<
SdpVideoFormat
>
FuzzyMatchSdpVideoFormat
(
rtc
:
:
ArrayView
<
const
SdpVideoFormat
>
supported_formats
const
SdpVideoFormat
&
format
)
;
}
#
endif
