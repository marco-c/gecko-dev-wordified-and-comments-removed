#
ifndef
API_VIDEO_CODECS_VIDEO_CODEC_H_
#
define
API_VIDEO_CODECS_VIDEO_CODEC_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
video
/
video_bitrate_allocation
.
h
"
#
include
"
api
/
video
/
video_codec_type
.
h
"
#
include
"
api
/
video_codecs
/
spatial_layer
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
enum
class
VideoCodecComplexity
{
kComplexityLow
=
-
1
kComplexityNormal
=
0
kComplexityHigh
=
1
kComplexityHigher
=
2
kComplexityMax
=
3
}
;
struct
VideoCodecVP8
{
bool
operator
=
=
(
const
VideoCodecVP8
&
other
)
const
;
bool
operator
!
=
(
const
VideoCodecVP8
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
VideoCodecComplexity
complexity
;
unsigned
char
numberOfTemporalLayers
;
bool
denoisingOn
;
bool
automaticResizeOn
;
bool
frameDroppingOn
;
int
keyFrameInterval
;
}
;
enum
class
InterLayerPredMode
:
int
{
kOff
=
0
kOn
=
1
kOnKeyPic
=
2
}
;
struct
VideoCodecVP9
{
bool
operator
=
=
(
const
VideoCodecVP9
&
other
)
const
;
bool
operator
!
=
(
const
VideoCodecVP9
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
VideoCodecComplexity
complexity
;
unsigned
char
numberOfTemporalLayers
;
bool
denoisingOn
;
bool
frameDroppingOn
;
int
keyFrameInterval
;
bool
adaptiveQpMode
;
bool
automaticResizeOn
;
unsigned
char
numberOfSpatialLayers
;
bool
flexibleMode
;
InterLayerPredMode
interLayerPred
;
}
;
struct
VideoCodecH264
{
bool
operator
=
=
(
const
VideoCodecH264
&
other
)
const
;
bool
operator
!
=
(
const
VideoCodecH264
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
bool
frameDroppingOn
;
int
keyFrameInterval
;
double
scaleDownBy
;
uint8_t
numberOfTemporalLayers
;
uint8_t
packetizationMode
;
}
;
RTC_EXPORT
const
char
*
CodecTypeToPayloadString
(
VideoCodecType
type
)
;
RTC_EXPORT
VideoCodecType
PayloadStringToCodecType
(
const
std
:
:
string
&
name
)
;
union
VideoCodecUnion
{
VideoCodecVP8
VP8
;
VideoCodecVP9
VP9
;
VideoCodecH264
H264
;
}
;
enum
class
VideoCodecMode
{
kRealtimeVideo
kScreensharing
}
;
class
RTC_EXPORT
VideoCodec
{
public
:
VideoCodec
(
)
;
absl
:
:
string_view
ScalabilityMode
(
)
const
{
return
scalability_mode_
;
}
void
SetScalabilityMode
(
absl
:
:
string_view
scalability_mode
)
{
scalability_mode_
=
std
:
:
string
(
scalability_mode
)
;
}
VideoCodecComplexity
GetVideoEncoderComplexity
(
)
const
;
void
SetVideoEncoderComplexity
(
VideoCodecComplexity
complexity_setting
)
;
VideoCodecType
codecType
;
uint16_t
width
;
uint16_t
height
;
unsigned
int
startBitrate
;
unsigned
int
maxBitrate
;
unsigned
int
minBitrate
;
uint32_t
maxFramerate
;
bool
active
;
unsigned
int
qpMax
;
unsigned
char
numberOfSimulcastStreams
;
SpatialLayer
simulcastStream
[
kMaxSimulcastStreams
]
;
SpatialLayer
spatialLayers
[
kMaxSpatialLayers
]
;
VideoCodecMode
mode
;
bool
expect_encode_from_texture
;
struct
TimingFrameTriggerThresholds
{
int64_t
delay_ms
;
uint16_t
outlier_ratio_percent
;
}
timing_frame_thresholds
;
bool
legacy_conference_mode
;
bool
operator
=
=
(
const
VideoCodec
&
other
)
const
=
delete
;
bool
operator
!
=
(
const
VideoCodec
&
other
)
const
=
delete
;
VideoCodecVP8
*
VP8
(
)
;
const
VideoCodecVP8
&
VP8
(
)
const
;
VideoCodecVP9
*
VP9
(
)
;
const
VideoCodecVP9
&
VP9
(
)
const
;
VideoCodecH264
*
H264
(
)
;
const
VideoCodecH264
&
H264
(
)
const
;
private
:
VideoCodecUnion
codec_specific_
;
std
:
:
string
scalability_mode_
;
absl
:
:
optional
<
VideoCodecComplexity
>
complexity_
;
}
;
}
#
endif
