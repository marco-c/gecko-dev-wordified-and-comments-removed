#
ifndef
API_VIDEO_CODECS_VIDEO_DECODER_FACTORY_H_
#
define
API_VIDEO_CODECS_VIDEO_DECODER_FACTORY_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
VideoDecoder
;
class
RTC_EXPORT
VideoDecoderFactory
{
public
:
struct
CodecSupport
{
bool
is_supported
=
false
;
bool
is_power_efficient
=
false
;
}
;
virtual
std
:
:
vector
<
SdpVideoFormat
>
GetSupportedFormats
(
)
const
=
0
;
virtual
CodecSupport
QueryCodecSupport
(
const
SdpVideoFormat
&
format
bool
reference_scaling
)
const
{
CodecSupport
codec_support
;
codec_support
.
is_supported
=
!
reference_scaling
&
&
format
.
IsCodecInList
(
GetSupportedFormats
(
)
)
;
return
codec_support
;
}
virtual
CodecSupport
QueryCodecSupport
(
const
SdpVideoFormat
&
format
absl
:
:
optional
<
std
:
:
string
>
scalability_mode
)
const
{
CodecSupport
codec_support
;
if
(
!
scalability_mode
)
{
codec_support
.
is_supported
=
format
.
IsCodecInList
(
GetSupportedFormats
(
)
)
;
}
return
codec_support
;
}
virtual
std
:
:
unique_ptr
<
VideoDecoder
>
CreateVideoDecoder
(
const
SdpVideoFormat
&
format
)
=
0
;
virtual
~
VideoDecoderFactory
(
)
{
}
}
;
}
#
endif
