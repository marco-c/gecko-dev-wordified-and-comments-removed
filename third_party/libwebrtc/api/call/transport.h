#
ifndef
API_CALL_TRANSPORT_H_
#
define
API_CALL_TRANSPORT_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
ref_counted_base
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
namespace
webrtc
{
struct
PacketOptions
{
PacketOptions
(
)
;
PacketOptions
(
const
PacketOptions
&
)
;
~
PacketOptions
(
)
;
int
packet_id
=
-
1
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RefCountedBase
>
additional_data
;
bool
is_retransmit
=
false
;
bool
included_in_feedback
=
false
;
bool
included_in_allocation
=
false
;
bool
batchable
=
false
;
bool
last_packet_in_batch
=
false
;
}
;
class
Transport
{
public
:
#
if
defined
(
__clang__
)
#
pragma
clang
diagnostic
push
#
pragma
clang
diagnostic
ignored
"
-
Wdeprecated
-
declarations
"
#
elif
defined
(
__GNUC__
)
#
pragma
GCC
diagnostic
push
#
pragma
GCC
diagnostic
ignored
"
-
Wdeprecated
-
declarations
"
#
endif
virtual
bool
SendRtp
(
rtc
:
:
ArrayView
<
const
uint8_t
>
packet
const
PacketOptions
&
options
)
{
return
SendRtp
(
packet
.
data
(
)
packet
.
size
(
)
options
)
;
}
virtual
bool
SendRtcp
(
rtc
:
:
ArrayView
<
const
uint8_t
>
packet
)
{
return
SendRtcp
(
packet
.
data
(
)
packet
.
size
(
)
)
;
}
#
if
defined
(
__clang__
)
#
pragma
clang
diagnostic
pop
#
elif
defined
(
__GNUC__
)
#
pragma
GCC
diagnostic
pop
#
endif
[
[
deprecated
(
"
Use
ArrayView
version
"
)
]
]
virtual
bool
SendRtp
(
const
uint8_t
*
packet
size_t
length
const
PacketOptions
&
options
)
{
return
SendRtp
(
rtc
:
:
MakeArrayView
(
packet
length
)
options
)
;
}
[
[
deprecated
(
"
Use
ArrayView
version
"
)
]
]
virtual
bool
SendRtcp
(
const
uint8_t
*
packet
size_t
length
)
{
return
SendRtcp
(
rtc
:
:
MakeArrayView
(
packet
length
)
)
;
}
protected
:
virtual
~
Transport
(
)
{
}
}
;
}
#
endif
