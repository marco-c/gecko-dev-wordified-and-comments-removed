#
include
"
api
/
ice_transport_factory
.
h
"
#
include
<
memory
>
#
include
<
utility
>
#
include
"
api
/
ice_transport_interface
.
h
"
#
include
"
api
/
make_ref_counted
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
p2p
/
base
/
ice_transport_internal
.
h
"
#
include
"
p2p
/
base
/
p2p_constants
.
h
"
#
include
"
p2p
/
base
/
p2p_transport_channel
.
h
"
#
include
"
p2p
/
base
/
port_allocator
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
namespace
{
class
IceTransportWithTransportChannel
:
public
IceTransportInterface
{
public
:
IceTransportWithTransportChannel
(
std
:
:
unique_ptr
<
IceTransportInternal
>
internal
)
:
internal_
(
std
:
:
move
(
internal
)
)
{
}
~
IceTransportWithTransportChannel
(
)
override
{
RTC_DCHECK_RUN_ON
(
&
thread_checker_
)
;
}
IceTransportInternal
*
internal
(
)
override
{
RTC_DCHECK_RUN_ON
(
&
thread_checker_
)
;
return
internal_
.
get
(
)
;
}
private
:
const
SequenceChecker
thread_checker_
{
}
;
const
std
:
:
unique_ptr
<
IceTransportInternal
>
internal_
RTC_GUARDED_BY
(
thread_checker_
)
;
}
;
}
scoped_refptr
<
IceTransportInterface
>
CreateIceTransport
(
PortAllocator
*
port_allocator
)
{
IceTransportInit
init
;
init
.
set_port_allocator
(
port_allocator
)
;
return
CreateIceTransport
(
std
:
:
move
(
init
)
)
;
}
scoped_refptr
<
IceTransportInterface
>
CreateIceTransport
(
IceTransportInit
init
)
{
return
make_ref_counted
<
IceTransportWithTransportChannel
>
(
P2PTransportChannel
:
:
Create
(
"
standalone
"
ICE_CANDIDATE_COMPONENT_RTP
std
:
:
move
(
init
)
)
)
;
}
}
