#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
<
set
>
#
include
<
vector
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
ssl_stream_adapter
.
h
"
namespace
webrtc
{
CryptoOptions
:
:
CryptoOptions
(
)
{
}
CryptoOptions
:
:
CryptoOptions
(
const
CryptoOptions
&
other
)
{
srtp
=
other
.
srtp
;
sframe
=
other
.
sframe
;
}
CryptoOptions
:
:
~
CryptoOptions
(
)
{
}
CryptoOptions
CryptoOptions
:
:
NoGcm
(
)
{
CryptoOptions
options
;
options
.
srtp
.
enable_gcm_crypto_suites
=
false
;
return
options
;
}
std
:
:
vector
<
int
>
CryptoOptions
:
:
GetSupportedDtlsSrtpCryptoSuites
(
)
const
{
std
:
:
vector
<
int
>
crypto_suites
;
if
(
srtp
.
enable_aes128_sha1_32_crypto_cipher
)
{
crypto_suites
.
push_back
(
kSrtpAes128CmSha1_32
)
;
}
if
(
srtp
.
enable_aes128_sha1_80_crypto_cipher
)
{
crypto_suites
.
push_back
(
kSrtpAes128CmSha1_80
)
;
}
if
(
srtp
.
enable_gcm_crypto_suites
)
{
crypto_suites
.
push_back
(
kSrtpAeadAes256Gcm
)
;
crypto_suites
.
push_back
(
kSrtpAeadAes128Gcm
)
;
}
RTC_CHECK
(
!
crypto_suites
.
empty
(
)
)
;
return
crypto_suites
;
}
bool
CryptoOptions
:
:
operator
=
=
(
const
CryptoOptions
&
other
)
const
{
struct
data_being_tested_for_equality
{
struct
Srtp
{
bool
enable_gcm_crypto_suites
;
bool
enable_aes128_sha1_32_crypto_cipher
;
bool
enable_aes128_sha1_80_crypto_cipher
;
bool
enable_encrypted_rtp_header_extensions
;
}
srtp
;
struct
SFrame
{
bool
require_frame_encryption
;
}
sframe
;
EphemeralKeyExchangeCipherGroups
ephemeral_key_exchange_cipher_groups
;
}
;
static_assert
(
sizeof
(
data_being_tested_for_equality
)
=
=
sizeof
(
*
this
)
"
Did
you
add
something
to
CryptoOptions
and
forget
to
"
"
update
operator
=
=
?
"
)
;
return
srtp
.
enable_gcm_crypto_suites
=
=
other
.
srtp
.
enable_gcm_crypto_suites
&
&
srtp
.
enable_aes128_sha1_32_crypto_cipher
=
=
other
.
srtp
.
enable_aes128_sha1_32_crypto_cipher
&
&
srtp
.
enable_aes128_sha1_80_crypto_cipher
=
=
other
.
srtp
.
enable_aes128_sha1_80_crypto_cipher
&
&
srtp
.
enable_encrypted_rtp_header_extensions
=
=
other
.
srtp
.
enable_encrypted_rtp_header_extensions
&
&
sframe
.
require_frame_encryption
=
=
other
.
sframe
.
require_frame_encryption
&
&
ephemeral_key_exchange_cipher_groups
=
=
other
.
ephemeral_key_exchange_cipher_groups
;
}
bool
CryptoOptions
:
:
operator
!
=
(
const
CryptoOptions
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
CryptoOptions
:
:
EphemeralKeyExchangeCipherGroups
:
:
EphemeralKeyExchangeCipherGroups
(
)
:
enabled_
(
SSLStreamAdapter
:
:
GetDefaultEphemeralKeyExchangeCipherGroups
(
nullptr
)
)
{
}
bool
CryptoOptions
:
:
EphemeralKeyExchangeCipherGroups
:
:
operator
=
=
(
const
CryptoOptions
:
:
EphemeralKeyExchangeCipherGroups
&
other
)
const
{
return
enabled_
=
=
other
.
enabled_
;
}
std
:
:
set
<
uint16_t
>
CryptoOptions
:
:
EphemeralKeyExchangeCipherGroups
:
:
GetSupported
(
)
{
return
SSLStreamAdapter
:
:
GetSupportedEphemeralKeyExchangeCipherGroups
(
)
;
}
void
CryptoOptions
:
:
EphemeralKeyExchangeCipherGroups
:
:
AddFirst
(
uint16_t
group
)
{
std
:
:
erase
(
enabled_
group
)
;
enabled_
.
insert
(
enabled_
.
begin
(
)
group
)
;
}
void
CryptoOptions
:
:
EphemeralKeyExchangeCipherGroups
:
:
Update
(
const
FieldTrialsView
*
field_trials
const
std
:
:
vector
<
uint16_t
>
*
disabled_groups
)
{
std
:
:
vector
<
uint16_t
>
current
;
enabled_
=
SSLStreamAdapter
:
:
GetDefaultEphemeralKeyExchangeCipherGroups
(
field_trials
)
;
if
(
disabled_groups
)
{
enabled_
.
erase
(
std
:
:
remove_if
(
enabled_
.
begin
(
)
enabled_
.
end
(
)
[
&
]
(
uint16_t
val
)
{
return
std
:
:
find
(
disabled_groups
-
>
begin
(
)
disabled_groups
-
>
end
(
)
val
)
!
=
disabled_groups
-
>
end
(
)
;
}
)
)
;
}
auto
end
=
enabled_
.
end
(
)
;
for
(
auto
val
:
current
)
{
if
(
std
:
:
find
(
enabled_
.
begin
(
)
end
val
)
=
=
end
)
{
enabled_
.
push_back
(
val
)
;
}
}
}
}
