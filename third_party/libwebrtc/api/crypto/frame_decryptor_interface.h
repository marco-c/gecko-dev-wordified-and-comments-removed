#
ifndef
API_CRYPTO_FRAME_DECRYPTOR_INTERFACE_H_
#
define
API_CRYPTO_FRAME_DECRYPTOR_INTERFACE_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
ref_count
.
h
"
namespace
webrtc
{
class
FrameDecryptorInterface
:
public
RefCountInterface
{
public
:
enum
class
Status
{
kOk
kRecoverable
kFailedToDecrypt
kUnknown
}
;
struct
Result
{
Result
(
Status
status
size_t
bytes_written
)
:
status
(
status
)
bytes_written
(
bytes_written
)
{
}
bool
IsOk
(
)
const
{
return
status
=
=
Status
:
:
kOk
;
}
const
Status
status
;
const
size_t
bytes_written
;
}
;
~
FrameDecryptorInterface
(
)
override
{
}
virtual
Result
Decrypt
(
MediaType
media_type
const
std
:
:
vector
<
uint32_t
>
&
csrcs
ArrayView
<
const
uint8_t
>
additional_data
ArrayView
<
const
uint8_t
>
encrypted_frame
ArrayView
<
uint8_t
>
frame
)
=
0
;
virtual
size_t
GetMaxPlaintextByteSize
(
MediaType
media_type
size_t
encrypted_frame_size
)
=
0
;
}
;
}
#
endif
