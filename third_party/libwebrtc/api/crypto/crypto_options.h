#
ifndef
API_CRYPTO_CRYPTO_OPTIONS_H_
#
define
API_CRYPTO_CRYPTO_OPTIONS_H_
#
include
<
cstdint
>
#
include
<
optional
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
struct
RTC_EXPORT
CryptoOptions
{
CryptoOptions
(
)
;
static
CryptoOptions
NoGcm
(
)
;
std
:
:
vector
<
int
>
GetSupportedDtlsSrtpCryptoSuites
(
)
const
;
bool
operator
=
=
(
const
CryptoOptions
&
other
)
const
;
bool
operator
!
=
(
const
CryptoOptions
&
other
)
const
;
struct
Srtp
{
bool
enable_gcm_crypto_suites
=
true
;
bool
enable_aes128_sha1_32_crypto_cipher
=
false
;
bool
enable_aes128_sha1_80_crypto_cipher
=
true
;
bool
enable_encrypted_rtp_header_extensions
=
true
;
}
srtp
;
struct
SFrame
{
bool
require_frame_encryption
=
false
;
}
sframe
;
class
EphemeralKeyExchangeCipherGroups
{
public
:
static
constexpr
uint16_t
kSECP224R1
=
21
;
static
constexpr
uint16_t
kSECP256R1
=
23
;
static
constexpr
uint16_t
kSECP384R1
=
24
;
static
constexpr
uint16_t
kSECP521R1
=
25
;
static
constexpr
uint16_t
kX25519
=
29
;
static
constexpr
uint16_t
kX25519_MLKEM768
=
0x11ec
;
static
std
:
:
set
<
uint16_t
>
GetSupported
(
)
;
static
std
:
:
optional
<
std
:
:
string
>
GetName
(
uint16_t
)
;
EphemeralKeyExchangeCipherGroups
(
)
;
std
:
:
vector
<
uint16_t
>
GetEnabled
(
)
const
{
return
enabled_
;
}
void
SetEnabled
(
const
std
:
:
vector
<
uint16_t
>
&
groups
)
{
enabled_
=
groups
;
}
void
AddFirst
(
uint16_t
group
)
;
void
Update
(
const
FieldTrialsView
*
field_trials
const
std
:
:
vector
<
uint16_t
>
*
disabled_groups
=
nullptr
)
;
bool
operator
=
=
(
const
EphemeralKeyExchangeCipherGroups
&
other
)
const
;
private
:
std
:
:
vector
<
uint16_t
>
enabled_
;
}
ephemeral_key_exchange_cipher_groups
;
}
;
}
#
endif
