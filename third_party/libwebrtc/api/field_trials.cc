#
include
"
api
/
field_trials
.
h
"
#
include
<
atomic
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
containers
/
flat_map
.
h
"
#
include
"
system_wrappers
/
include
/
field_trial
.
h
"
namespace
{
webrtc
:
:
flat_map
<
std
:
:
string
std
:
:
string
>
InsertIntoMap
(
const
std
:
:
string
&
s
)
{
std
:
:
string
:
:
size_type
field_start
=
0
;
webrtc
:
:
flat_map
<
std
:
:
string
std
:
:
string
>
key_value_map
;
while
(
field_start
<
s
.
size
(
)
)
{
std
:
:
string
:
:
size_type
separator_pos
=
s
.
find
(
'
/
'
field_start
)
;
RTC_CHECK_NE
(
separator_pos
std
:
:
string
:
:
npos
)
<
<
"
Missing
separator
'
/
'
after
field
trial
key
.
"
;
RTC_CHECK_GT
(
separator_pos
field_start
)
<
<
"
Field
trial
key
cannot
be
empty
.
"
;
std
:
:
string
key
=
s
.
substr
(
field_start
separator_pos
-
field_start
)
;
field_start
=
separator_pos
+
1
;
RTC_CHECK_LT
(
field_start
s
.
size
(
)
)
<
<
"
Missing
value
after
field
trial
key
.
String
ended
.
"
;
separator_pos
=
s
.
find
(
'
/
'
field_start
)
;
RTC_CHECK_NE
(
separator_pos
std
:
:
string
:
:
npos
)
<
<
"
Missing
terminating
'
/
'
in
field
trial
string
.
"
;
RTC_CHECK_GT
(
separator_pos
field_start
)
<
<
"
Field
trial
value
cannot
be
empty
.
"
;
std
:
:
string
value
=
s
.
substr
(
field_start
separator_pos
-
field_start
)
;
field_start
=
separator_pos
+
1
;
key_value_map
.
emplace
(
key
value
)
;
}
RTC_CHECK_EQ
(
field_start
s
.
size
(
)
)
;
return
key_value_map
;
}
std
:
:
atomic
<
bool
>
instance_created_
{
false
}
;
}
namespace
webrtc
{
FieldTrials
:
:
FieldTrials
(
const
std
:
:
string
&
s
)
:
uses_global_
(
true
)
field_trial_string_
(
s
)
previous_field_trial_string_
(
webrtc
:
:
field_trial
:
:
GetFieldTrialString
(
)
)
key_value_map_
(
InsertIntoMap
(
s
)
)
{
field_trial
:
:
InitFieldTrialsFromString
(
field_trial_string_
.
c_str
(
)
)
;
RTC_CHECK
(
!
instance_created_
.
exchange
(
true
)
)
<
<
"
Only
one
instance
may
be
instanciated
at
any
given
time
!
"
;
}
std
:
:
unique_ptr
<
FieldTrials
>
FieldTrials
:
:
CreateNoGlobal
(
const
std
:
:
string
&
s
)
{
return
std
:
:
unique_ptr
<
FieldTrials
>
(
new
FieldTrials
(
s
true
)
)
;
}
FieldTrials
:
:
FieldTrials
(
const
std
:
:
string
&
s
bool
)
:
uses_global_
(
false
)
previous_field_trial_string_
(
nullptr
)
key_value_map_
(
InsertIntoMap
(
s
)
)
{
}
FieldTrials
:
:
~
FieldTrials
(
)
{
if
(
uses_global_
)
{
field_trial
:
:
InitFieldTrialsFromString
(
previous_field_trial_string_
)
;
RTC_CHECK
(
instance_created_
.
exchange
(
false
)
)
;
}
}
std
:
:
string
FieldTrials
:
:
GetValue
(
absl
:
:
string_view
key
)
const
{
auto
it
=
key_value_map_
.
find
(
std
:
:
string
(
key
)
)
;
if
(
it
!
=
key_value_map_
.
end
(
)
)
return
it
-
>
second
;
if
(
uses_global_
)
{
return
field_trial
:
:
FindFullName
(
std
:
:
string
(
key
)
)
;
}
return
"
"
;
}
}
