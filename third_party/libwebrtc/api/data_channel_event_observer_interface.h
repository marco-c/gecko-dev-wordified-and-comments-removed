#
ifndef
API_DATA_CHANNEL_EVENT_OBSERVER_INTERFACE_H_
#
define
API_DATA_CHANNEL_EVENT_OBSERVER_INTERFACE_H_
#
include
<
cstdint
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
array_view
.
h
"
namespace
webrtc
{
class
DataChannelEventObserverInterface
{
public
:
virtual
~
DataChannelEventObserverInterface
(
)
=
default
;
class
Message
{
public
:
enum
class
Direction
{
kSend
kReceive
}
;
enum
class
DataType
{
kString
kBinary
}
;
int64_t
unix_timestamp_ms
(
)
const
{
return
unix_timestamp_
;
}
void
set_unix_timestamp_ms
(
int64_t
timestamp
)
{
unix_timestamp_
=
timestamp
;
}
int
datachannel_id
(
)
const
{
return
datachannel_id_
;
}
void
set_datachannel_id
(
int
id
)
{
datachannel_id_
=
id
;
}
absl
:
:
string_view
label
(
)
const
{
return
label_
;
}
void
set_label
(
absl
:
:
string_view
label
)
{
label_
=
std
:
:
string
(
label
)
;
}
Direction
direction
(
)
const
{
return
direction_
;
}
void
set_direction
(
Direction
direction
)
{
direction_
=
direction
;
}
DataType
data_type
(
)
const
{
return
data_type_
;
}
void
set_data_type
(
DataType
type
)
{
data_type_
=
type
;
}
const
std
:
:
vector
<
uint8_t
>
&
data
(
)
const
{
return
data_
;
}
void
set_data
(
ArrayView
<
const
uint8_t
>
d
)
{
data_
.
assign
(
d
.
begin
(
)
d
.
end
(
)
)
;
}
private
:
int64_t
unix_timestamp_
;
int
datachannel_id_
;
std
:
:
string
label_
;
Direction
direction_
;
DataType
data_type_
;
std
:
:
vector
<
uint8_t
>
data_
;
}
;
virtual
void
OnMessage
(
const
Message
&
message
)
=
0
;
}
;
}
#
endif
