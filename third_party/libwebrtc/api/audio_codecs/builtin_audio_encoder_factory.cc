#
include
"
api
/
audio_codecs
/
builtin_audio_encoder_factory
.
h
"
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
audio_codecs
/
L16
/
audio_encoder_L16
.
h
"
#
include
"
api
/
audio_codecs
/
audio_codec_pair_id
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder_factory_template
.
h
"
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
api
/
audio_codecs
/
g711
/
audio_encoder_g711
.
h
"
#
include
"
api
/
audio_codecs
/
g722
/
audio_encoder_g722
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
if
WEBRTC_USE_BUILTIN_ILBC
#
include
"
api
/
audio_codecs
/
ilbc
/
audio_encoder_ilbc
.
h
"
#
endif
#
if
WEBRTC_USE_BUILTIN_OPUS
#
include
"
api
/
audio_codecs
/
opus
/
audio_encoder_multi_channel_opus
.
h
"
#
include
"
api
/
audio_codecs
/
opus
/
audio_encoder_opus
.
h
"
#
endif
namespace
webrtc
{
namespace
{
template
<
typename
T
>
struct
NotAdvertised
{
using
Config
=
typename
T
:
:
Config
;
static
absl
:
:
optional
<
Config
>
SdpToConfig
(
const
SdpAudioFormat
&
audio_format
)
{
return
T
:
:
SdpToConfig
(
audio_format
)
;
}
static
void
AppendSupportedEncoders
(
std
:
:
vector
<
AudioCodecSpec
>
*
specs
)
{
}
static
AudioCodecInfo
QueryAudioEncoder
(
const
Config
&
config
)
{
return
T
:
:
QueryAudioEncoder
(
config
)
;
}
static
std
:
:
unique_ptr
<
AudioEncoder
>
MakeAudioEncoder
(
const
Config
&
config
int
payload_type
absl
:
:
optional
<
AudioCodecPairId
>
codec_pair_id
=
absl
:
:
nullopt
const
FieldTrialsView
*
field_trials
=
nullptr
)
{
return
T
:
:
MakeAudioEncoder
(
config
payload_type
codec_pair_id
field_trials
)
;
}
}
;
}
rtc
:
:
scoped_refptr
<
AudioEncoderFactory
>
CreateBuiltinAudioEncoderFactory
(
)
{
return
CreateAudioEncoderFactory
<
#
if
WEBRTC_USE_BUILTIN_OPUS
AudioEncoderOpus
NotAdvertised
<
AudioEncoderMultiChannelOpus
>
#
endif
AudioEncoderG722
#
if
WEBRTC_USE_BUILTIN_ILBC
AudioEncoderIlbc
#
endif
AudioEncoderG711
NotAdvertised
<
AudioEncoderL16
>
>
(
)
;
}
}
