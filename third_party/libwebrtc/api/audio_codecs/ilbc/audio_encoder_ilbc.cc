#
include
"
api
/
audio_codecs
/
ilbc
/
audio_encoder_ilbc
.
h
"
#
include
<
map
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
match
.
h
"
#
include
"
api
/
audio_codecs
/
audio_codec_pair_id
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder
.
h
"
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
api
/
audio_codecs
/
ilbc
/
audio_encoder_ilbc_config
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
modules
/
audio_coding
/
codecs
/
ilbc
/
audio_encoder_ilbc
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_minmax
.
h
"
#
include
"
rtc_base
/
string_to_number
.
h
"
namespace
webrtc
{
namespace
{
int
GetIlbcBitrate
(
int
ptime
)
{
switch
(
ptime
)
{
case
20
:
case
40
:
return
15200
;
case
30
:
case
60
:
return
13333
;
default
:
RTC_CHECK_NOTREACHED
(
)
;
}
}
}
std
:
:
optional
<
AudioEncoderIlbcConfig
>
AudioEncoderIlbc
:
:
SdpToConfig
(
const
SdpAudioFormat
&
format
)
{
if
(
!
absl
:
:
EqualsIgnoreCase
(
format
.
name
.
c_str
(
)
"
ILBC
"
)
|
|
format
.
clockrate_hz
!
=
8000
|
|
format
.
num_channels
!
=
1
)
{
return
std
:
:
nullopt
;
}
AudioEncoderIlbcConfig
config
;
auto
ptime_iter
=
format
.
parameters
.
find
(
"
ptime
"
)
;
if
(
ptime_iter
!
=
format
.
parameters
.
end
(
)
)
{
auto
ptime
=
rtc
:
:
StringToNumber
<
int
>
(
ptime_iter
-
>
second
)
;
if
(
ptime
&
&
*
ptime
>
0
)
{
const
int
whole_packets
=
*
ptime
/
10
;
config
.
frame_size_ms
=
rtc
:
:
SafeClamp
<
int
>
(
whole_packets
*
10
20
60
)
;
}
}
if
(
!
config
.
IsOk
(
)
)
{
RTC_DCHECK_NOTREACHED
(
)
;
return
std
:
:
nullopt
;
}
return
config
;
}
void
AudioEncoderIlbc
:
:
AppendSupportedEncoders
(
std
:
:
vector
<
AudioCodecSpec
>
*
specs
)
{
const
SdpAudioFormat
fmt
=
{
"
ILBC
"
8000
1
}
;
const
AudioCodecInfo
info
=
QueryAudioEncoder
(
*
SdpToConfig
(
fmt
)
)
;
specs
-
>
push_back
(
{
fmt
info
}
)
;
}
AudioCodecInfo
AudioEncoderIlbc
:
:
QueryAudioEncoder
(
const
AudioEncoderIlbcConfig
&
config
)
{
RTC_DCHECK
(
config
.
IsOk
(
)
)
;
return
{
8000
1
GetIlbcBitrate
(
config
.
frame_size_ms
)
}
;
}
std
:
:
unique_ptr
<
AudioEncoder
>
AudioEncoderIlbc
:
:
MakeAudioEncoder
(
const
AudioEncoderIlbcConfig
&
config
int
payload_type
std
:
:
optional
<
AudioCodecPairId
>
const
FieldTrialsView
*
field_trials
)
{
if
(
!
config
.
IsOk
(
)
)
{
RTC_DCHECK_NOTREACHED
(
)
;
return
nullptr
;
}
return
std
:
:
make_unique
<
AudioEncoderIlbcImpl
>
(
config
payload_type
)
;
}
}
