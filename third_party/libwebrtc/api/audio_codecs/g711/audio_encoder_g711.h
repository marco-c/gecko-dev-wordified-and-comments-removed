#
ifndef
API_AUDIO_CODECS_G711_AUDIO_ENCODER_G711_H_
#
define
API_AUDIO_CODECS_G711_AUDIO_ENCODER_G711_H_
#
include
<
memory
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
audio_codecs
/
audio_codec_pair_id
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder
.
h
"
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
struct
RTC_EXPORT
AudioEncoderG711
{
struct
Config
{
enum
class
Type
{
kPcmU
kPcmA
}
;
bool
IsOk
(
)
const
{
return
(
type
=
=
Type
:
:
kPcmU
|
|
type
=
=
Type
:
:
kPcmA
)
&
&
frame_size_ms
>
0
&
&
frame_size_ms
%
10
=
=
0
&
&
num_channels
>
=
1
&
&
num_channels
<
=
AudioEncoder
:
:
kMaxNumberOfChannels
;
}
Type
type
=
Type
:
:
kPcmU
;
int
num_channels
=
1
;
int
frame_size_ms
=
20
;
}
;
static
std
:
:
optional
<
AudioEncoderG711
:
:
Config
>
SdpToConfig
(
const
SdpAudioFormat
&
audio_format
)
;
static
void
AppendSupportedEncoders
(
std
:
:
vector
<
AudioCodecSpec
>
*
specs
)
;
static
AudioCodecInfo
QueryAudioEncoder
(
const
Config
&
config
)
;
static
std
:
:
unique_ptr
<
AudioEncoder
>
MakeAudioEncoder
(
const
Config
&
config
int
payload_type
std
:
:
optional
<
AudioCodecPairId
>
codec_pair_id
=
std
:
:
nullopt
const
FieldTrialsView
*
field_trials
=
nullptr
)
;
}
;
}
#
endif
