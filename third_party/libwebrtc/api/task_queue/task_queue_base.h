#
ifndef
API_TASK_QUEUE_TASK_QUEUE_BASE_H_
#
define
API_TASK_QUEUE_TASK_QUEUE_BASE_H_
#
include
<
memory
>
#
include
<
utility
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
api
/
task_queue
/
queued_task
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
RTC_LOCKABLE
RTC_EXPORT
TaskQueueBase
{
public
:
enum
class
DelayPrecision
{
kLow
kHigh
}
;
virtual
void
Delete
(
)
=
0
;
virtual
void
PostTask
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
)
;
virtual
void
PostTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
)
;
virtual
void
PostDelayedTask
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
TimeDelta
delay
)
;
virtual
void
PostDelayedTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
uint32_t
milliseconds
)
;
virtual
void
PostDelayedHighPrecisionTask
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
TimeDelta
delay
)
;
virtual
void
PostDelayedHighPrecisionTask
(
std
:
:
unique_ptr
<
QueuedTask
>
task
uint32_t
milliseconds
)
{
PostDelayedTask
(
std
:
:
move
(
task
)
milliseconds
)
;
}
void
PostDelayedTaskWithPrecision
(
DelayPrecision
precision
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
TimeDelta
delay
)
{
switch
(
precision
)
{
case
DelayPrecision
:
:
kLow
:
PostDelayedTask
(
std
:
:
move
(
task
)
delay
)
;
break
;
case
DelayPrecision
:
:
kHigh
:
PostDelayedHighPrecisionTask
(
std
:
:
move
(
task
)
delay
)
;
break
;
}
}
void
PostDelayedTaskWithPrecision
(
DelayPrecision
precision
std
:
:
unique_ptr
<
QueuedTask
>
task
uint32_t
milliseconds
)
{
switch
(
precision
)
{
case
DelayPrecision
:
:
kLow
:
PostDelayedTask
(
std
:
:
move
(
task
)
milliseconds
)
;
break
;
case
DelayPrecision
:
:
kHigh
:
PostDelayedHighPrecisionTask
(
std
:
:
move
(
task
)
milliseconds
)
;
break
;
}
}
static
TaskQueueBase
*
Current
(
)
;
bool
IsCurrent
(
)
const
{
return
Current
(
)
=
=
this
;
}
protected
:
class
RTC_EXPORT
CurrentTaskQueueSetter
{
public
:
explicit
CurrentTaskQueueSetter
(
TaskQueueBase
*
task_queue
)
;
CurrentTaskQueueSetter
(
const
CurrentTaskQueueSetter
&
)
=
delete
;
CurrentTaskQueueSetter
&
operator
=
(
const
CurrentTaskQueueSetter
&
)
=
delete
;
~
CurrentTaskQueueSetter
(
)
;
private
:
TaskQueueBase
*
const
previous_
;
}
;
virtual
~
TaskQueueBase
(
)
=
default
;
}
;
struct
TaskQueueDeleter
{
void
operator
(
)
(
TaskQueueBase
*
task_queue
)
const
{
task_queue
-
>
Delete
(
)
;
}
}
;
}
#
endif
