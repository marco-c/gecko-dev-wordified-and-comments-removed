#
include
"
api
/
create_peerconnection_factory
.
h
"
#
include
<
memory
>
#
include
<
utility
>
#
include
"
api
/
audio
/
audio_device
.
h
"
#
include
"
api
/
audio
/
audio_mixer
.
h
"
#
include
"
api
/
audio
/
audio_processing
.
h
"
#
include
"
api
/
audio
/
builtin_audio_processing_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_decoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder_factory
.
h
"
#
include
"
api
/
enable_media
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log_factory
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
rtc
:
:
scoped_refptr
<
PeerConnectionFactoryInterface
>
CreatePeerConnectionFactory
(
rtc
:
:
Thread
*
network_thread
rtc
:
:
Thread
*
worker_thread
rtc
:
:
Thread
*
signaling_thread
rtc
:
:
scoped_refptr
<
AudioDeviceModule
>
default_adm
rtc
:
:
scoped_refptr
<
AudioEncoderFactory
>
audio_encoder_factory
rtc
:
:
scoped_refptr
<
AudioDecoderFactory
>
audio_decoder_factory
std
:
:
unique_ptr
<
VideoEncoderFactory
>
video_encoder_factory
std
:
:
unique_ptr
<
VideoDecoderFactory
>
video_decoder_factory
rtc
:
:
scoped_refptr
<
AudioMixer
>
audio_mixer
rtc
:
:
scoped_refptr
<
AudioProcessing
>
audio_processing
std
:
:
unique_ptr
<
AudioFrameProcessor
>
audio_frame_processor
std
:
:
unique_ptr
<
FieldTrialsView
>
field_trials
)
{
PeerConnectionFactoryDependencies
dependencies
;
dependencies
.
network_thread
=
network_thread
;
dependencies
.
worker_thread
=
worker_thread
;
dependencies
.
signaling_thread
=
signaling_thread
;
dependencies
.
event_log_factory
=
std
:
:
make_unique
<
RtcEventLogFactory
>
(
)
;
dependencies
.
trials
=
std
:
:
move
(
field_trials
)
;
if
(
network_thread
)
{
dependencies
.
socket_factory
=
network_thread
-
>
socketserver
(
)
;
}
dependencies
.
adm
=
std
:
:
move
(
default_adm
)
;
dependencies
.
audio_encoder_factory
=
std
:
:
move
(
audio_encoder_factory
)
;
dependencies
.
audio_decoder_factory
=
std
:
:
move
(
audio_decoder_factory
)
;
dependencies
.
audio_frame_processor
=
std
:
:
move
(
audio_frame_processor
)
;
if
(
audio_processing
!
=
nullptr
)
{
dependencies
.
audio_processing_factory
=
CustomAudioProcessing
(
std
:
:
move
(
audio_processing
)
)
;
}
else
{
#
ifndef
WEBRTC_EXCLUDE_AUDIO_PROCESSING_MODULE
dependencies
.
audio_processing_factory
=
std
:
:
make_unique
<
BuiltinAudioProcessingFactory
>
(
)
;
#
endif
}
dependencies
.
audio_mixer
=
std
:
:
move
(
audio_mixer
)
;
dependencies
.
video_encoder_factory
=
std
:
:
move
(
video_encoder_factory
)
;
dependencies
.
video_decoder_factory
=
std
:
:
move
(
video_decoder_factory
)
;
EnableMedia
(
dependencies
)
;
return
CreateModularPeerConnectionFactory
(
std
:
:
move
(
dependencies
)
)
;
}
}
