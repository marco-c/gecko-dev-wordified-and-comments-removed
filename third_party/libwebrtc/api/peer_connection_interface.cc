#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
pc
/
media_factory
.
h
"
namespace
webrtc
{
PeerConnectionInterface
:
:
IceServer
:
:
IceServer
(
)
=
default
;
PeerConnectionInterface
:
:
IceServer
:
:
IceServer
(
const
IceServer
&
rhs
)
=
default
;
PeerConnectionInterface
:
:
IceServer
:
:
~
IceServer
(
)
=
default
;
PeerConnectionInterface
:
:
RTCConfiguration
:
:
RTCConfiguration
(
)
=
default
;
PeerConnectionInterface
:
:
RTCConfiguration
:
:
RTCConfiguration
(
const
RTCConfiguration
&
rhs
)
=
default
;
PeerConnectionInterface
:
:
RTCConfiguration
:
:
RTCConfiguration
(
RTCConfigurationType
type
)
{
if
(
type
=
=
RTCConfigurationType
:
:
kAggressive
)
{
bundle_policy
=
kBundlePolicyMaxBundle
;
rtcp_mux_policy
=
kRtcpMuxPolicyRequire
;
ice_connection_receiving_timeout
=
kAggressiveIceConnectionReceivingTimeout
;
enable_ice_renomination
=
true
;
redetermine_role_on_ice_restart
=
false
;
}
}
PeerConnectionInterface
:
:
RTCConfiguration
:
:
~
RTCConfiguration
(
)
=
default
;
PeerConnectionDependencies
:
:
PeerConnectionDependencies
(
PeerConnectionObserver
*
observer_in
)
:
observer
(
observer_in
)
{
}
#
pragma
clang
diagnostic
push
#
pragma
clang
diagnostic
ignored
"
-
Wdeprecated
-
declarations
"
PeerConnectionDependencies
:
:
PeerConnectionDependencies
(
PeerConnectionDependencies
&
&
)
=
default
;
#
pragma
clang
diagnostic
pop
PeerConnectionDependencies
:
:
~
PeerConnectionDependencies
(
)
=
default
;
PeerConnectionFactoryDependencies
:
:
PeerConnectionFactoryDependencies
(
)
=
default
;
#
pragma
clang
diagnostic
push
#
pragma
clang
diagnostic
ignored
"
-
Wdeprecated
-
declarations
"
PeerConnectionFactoryDependencies
:
:
PeerConnectionFactoryDependencies
(
PeerConnectionFactoryDependencies
&
&
)
=
default
;
#
pragma
clang
diagnostic
pop
PeerConnectionFactoryDependencies
:
:
~
PeerConnectionFactoryDependencies
(
)
=
default
;
}
