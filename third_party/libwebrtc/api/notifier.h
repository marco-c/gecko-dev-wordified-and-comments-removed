#
ifndef
API_NOTIFIER_H_
#
define
API_NOTIFIER_H_
#
include
<
list
>
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
namespace
webrtc
{
template
<
class
T
>
class
Notifier
:
public
T
{
public
:
Notifier
(
)
=
default
;
virtual
void
RegisterObserver
(
ObserverInterface
*
observer
)
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
RTC_DCHECK
(
observer
!
=
nullptr
)
;
observers_
.
push_back
(
observer
)
;
}
virtual
void
UnregisterObserver
(
ObserverInterface
*
observer
)
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
for
(
std
:
:
list
<
ObserverInterface
*
>
:
:
iterator
it
=
observers_
.
begin
(
)
;
it
!
=
observers_
.
end
(
)
;
it
+
+
)
{
if
(
*
it
=
=
observer
)
{
observers_
.
erase
(
it
)
;
break
;
}
}
}
void
FireOnChanged
(
)
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
std
:
:
list
<
ObserverInterface
*
>
observers
=
observers_
;
for
(
std
:
:
list
<
ObserverInterface
*
>
:
:
iterator
it
=
observers
.
begin
(
)
;
it
!
=
observers
.
end
(
)
;
+
+
it
)
{
(
*
it
)
-
>
OnChanged
(
)
;
}
}
protected
:
std
:
:
list
<
ObserverInterface
*
>
observers_
RTC_GUARDED_BY
(
sequence_checker_
)
;
private
:
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
sequence_checker_
{
SequenceChecker
:
:
kDetached
}
;
}
;
}
#
endif
