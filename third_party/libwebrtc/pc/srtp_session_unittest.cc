#
include
"
pc
/
srtp_session
.
h
"
#
include
<
string
.
h
>
#
include
<
cstdint
>
#
include
<
cstring
>
#
include
<
limits
>
#
include
<
vector
>
#
include
"
api
/
field_trials
.
h
"
#
include
"
media
/
base
/
fake_rtp
.
h
"
#
include
"
pc
/
test
/
srtp_test_util
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
byte_order
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
rtc_base
/
ssl_stream_adapter
.
h
"
#
include
"
system_wrappers
/
include
/
metrics
.
h
"
#
include
"
test
/
create_test_field_trials
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
third_party
/
libsrtp
/
include
/
srtp
.
h
"
using
:
:
testing
:
:
ElementsAre
;
using
:
:
testing
:
:
Pair
;
namespace
webrtc
{
std
:
:
vector
<
int
>
kEncryptedHeaderExtensionIds
;
class
SrtpSessionTest
:
public
:
:
testing
:
:
Test
{
public
:
SrtpSessionTest
(
)
:
s1_
(
field_trials_
)
s2_
(
field_trials_
)
{
metrics
:
:
Reset
(
)
;
}
protected
:
void
SetUp
(
)
override
{
rtp_len_
=
sizeof
(
kPcmuFrame
)
;
rtcp_len_
=
sizeof
(
kRtcpReport
)
;
rtp_packet_
.
EnsureCapacity
(
rtp_len_
+
10
)
;
rtp_packet_
.
SetData
(
kPcmuFrame
rtp_len_
)
;
rtcp_packet_
.
EnsureCapacity
(
rtcp_len_
+
4
+
10
)
;
rtcp_packet_
.
SetData
(
kRtcpReport
rtcp_len_
)
;
}
void
TestProtectRtp
(
int
crypto_suite
)
{
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
rtp_packet_
)
)
;
EXPECT_EQ
(
rtp_packet_
.
size
(
)
rtp_len_
+
rtp_auth_tag_len
(
crypto_suite
)
)
;
EXPECT_NE
(
0
std
:
:
memcmp
(
kPcmuFrame
rtp_packet_
.
data
(
)
rtp_len_
)
)
;
rtp_len_
=
rtp_packet_
.
size
(
)
;
}
void
TestProtectRtcp
(
int
crypto_suite
)
{
EXPECT_TRUE
(
s1_
.
ProtectRtcp
(
rtcp_packet_
)
)
;
EXPECT_EQ
(
rtcp_packet_
.
size
(
)
rtcp_len_
+
4
+
rtcp_auth_tag_len
(
crypto_suite
)
)
;
EXPECT_NE
(
0
std
:
:
memcmp
(
kRtcpReport
rtcp_packet_
.
data
(
)
rtcp_len_
)
)
;
rtcp_len_
=
rtcp_packet_
.
size
(
)
;
}
void
TestUnprotectRtp
(
int
crypto_suite
)
{
EXPECT_TRUE
(
s2_
.
UnprotectRtp
(
rtp_packet_
)
)
;
EXPECT_EQ
(
rtp_packet_
.
size
(
)
sizeof
(
kPcmuFrame
)
)
;
EXPECT_EQ
(
0
std
:
:
memcmp
(
kPcmuFrame
rtp_packet_
.
data
(
)
rtp_packet_
.
size
(
)
)
)
;
}
void
TestUnprotectRtcp
(
int
crypto_suite
)
{
EXPECT_TRUE
(
s2_
.
UnprotectRtcp
(
rtcp_packet_
)
)
;
EXPECT_EQ
(
rtcp_packet_
.
size
(
)
sizeof
(
kRtcpReport
)
)
;
EXPECT_EQ
(
0
std
:
:
memcmp
(
kRtcpReport
rtcp_packet_
.
data
(
)
rtcp_packet_
.
size
(
)
)
)
;
}
FieldTrials
field_trials_
=
CreateTestFieldTrials
(
)
;
SrtpSession
s1_
;
SrtpSession
s2_
;
CopyOnWriteBuffer
rtp_packet_
;
CopyOnWriteBuffer
rtcp_packet_
;
size_t
rtp_len_
;
size_t
rtcp_len_
;
}
;
TEST_F
(
SrtpSessionTest
TestGoodSetup
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
}
TEST_F
(
SrtpSessionTest
TestBadSetup
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_FALSE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey2
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_FALSE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
kTestKey2
kEncryptedHeaderExtensionIds
)
)
;
}
TEST_F
(
SrtpSessionTest
TestKeysTooShort
)
{
EXPECT_FALSE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
ZeroOnFreeBuffer
<
uint8_t
>
(
kTestKey1
.
data
(
)
1
)
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_FALSE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
ZeroOnFreeBuffer
<
uint8_t
>
(
kTestKey1
.
data
(
)
1
)
kEncryptedHeaderExtensionIds
)
)
;
}
TEST_F
(
SrtpSessionTest
TestProtect_AES_CM_128_HMAC_SHA1_80
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
TestProtectRtp
(
kSrtpAes128CmSha1_80
)
;
TestProtectRtcp
(
kSrtpAes128CmSha1_80
)
;
TestUnprotectRtp
(
kSrtpAes128CmSha1_80
)
;
TestUnprotectRtcp
(
kSrtpAes128CmSha1_80
)
;
}
TEST_F
(
SrtpSessionTest
TestProtect_AES_CM_128_HMAC_SHA1_32
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_32
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_32
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
TestProtectRtp
(
kSrtpAes128CmSha1_32
)
;
TestProtectRtcp
(
kSrtpAes128CmSha1_32
)
;
TestUnprotectRtp
(
kSrtpAes128CmSha1_32
)
;
TestUnprotectRtcp
(
kSrtpAes128CmSha1_32
)
;
}
TEST_F
(
SrtpSessionTest
TestGetSendStreamPacketIndex
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_32
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
int64_t
index
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
rtp_packet_
&
index
)
)
;
int64_t
be64_index
=
static_cast
<
int64_t
>
(
NetworkToHost64
(
1
<
<
16
)
)
;
EXPECT_EQ
(
be64_index
index
)
;
}
TEST_F
(
SrtpSessionTest
TestTamperReject
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
TestProtectRtp
(
kSrtpAes128CmSha1_80
)
;
rtp_packet_
.
MutableData
<
uint8_t
>
(
)
[
0
]
=
0x12
;
EXPECT_FALSE
(
s2_
.
UnprotectRtp
(
rtp_packet_
)
)
;
EXPECT_METRIC_THAT
(
metrics
:
:
Samples
(
"
WebRTC
.
PeerConnection
.
SrtpUnprotectError
"
)
ElementsAre
(
Pair
(
srtp_err_status_bad_param
1
)
)
)
;
TestProtectRtcp
(
kSrtpAes128CmSha1_80
)
;
rtcp_packet_
.
MutableData
<
uint8_t
>
(
)
[
1
]
=
0x34
;
EXPECT_FALSE
(
s2_
.
UnprotectRtcp
(
rtcp_packet_
)
)
;
EXPECT_METRIC_THAT
(
metrics
:
:
Samples
(
"
WebRTC
.
PeerConnection
.
SrtcpUnprotectError
"
)
ElementsAre
(
Pair
(
srtp_err_status_auth_fail
1
)
)
)
;
}
TEST_F
(
SrtpSessionTest
TestUnencryptReject
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_FALSE
(
s2_
.
UnprotectRtp
(
rtp_packet_
)
)
;
EXPECT_METRIC_THAT
(
metrics
:
:
Samples
(
"
WebRTC
.
PeerConnection
.
SrtpUnprotectError
"
)
ElementsAre
(
Pair
(
srtp_err_status_auth_fail
1
)
)
)
;
EXPECT_FALSE
(
s2_
.
UnprotectRtcp
(
rtcp_packet_
)
)
;
EXPECT_METRIC_THAT
(
metrics
:
:
Samples
(
"
WebRTC
.
PeerConnection
.
SrtcpUnprotectError
"
)
ElementsAre
(
Pair
(
srtp_err_status_cant_check
1
)
)
)
;
}
TEST_F
(
SrtpSessionTest
TestBuffersTooSmall
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
CopyOnWriteBuffer
rtp_packet
(
rtp_packet_
.
data
(
)
rtp_packet_
.
size
(
)
rtp_packet_
.
size
(
)
)
;
EXPECT_FALSE
(
s1_
.
ProtectRtp
(
rtp_packet
)
)
;
CopyOnWriteBuffer
rtcp_packet
(
rtcp_packet_
.
data
(
)
rtcp_packet_
.
size
(
)
rtcp_packet_
.
size
(
)
)
;
EXPECT_FALSE
(
s1_
.
ProtectRtcp
(
rtcp_packet
)
)
;
}
TEST_F
(
SrtpSessionTest
TestReplay
)
{
static
const
uint16_t
kMaxSeqnum
=
std
:
:
numeric_limits
<
uint16_t
>
:
:
max
(
)
-
1
;
static
const
uint16_t
seqnum_big
=
62275
;
static
const
uint16_t
seqnum_small
=
10
;
static
const
uint16_t
replay_window
=
1024
;
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
SetBE16
(
rtp_packet_
.
MutableData
<
uint8_t
>
(
)
+
2
seqnum_big
)
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
rtp_packet_
)
)
;
rtp_packet_
.
SetData
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
)
;
SetBE16
(
rtp_packet_
.
MutableData
<
uint8_t
>
(
)
+
2
seqnum_big
-
replay_window
+
1
)
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
rtp_packet_
)
)
;
rtp_packet_
.
SetData
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
)
;
SetBE16
(
rtp_packet_
.
MutableData
<
uint8_t
>
(
)
+
2
seqnum_big
-
replay_window
-
1
)
;
EXPECT_FALSE
(
s1_
.
ProtectRtp
(
rtp_packet_
)
)
;
rtp_packet_
.
SetData
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
)
;
SetBE16
(
rtp_packet_
.
MutableData
<
uint8_t
>
(
)
+
2
seqnum_small
)
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
rtp_packet_
)
)
;
SetBE16
(
rtp_packet_
.
MutableData
<
uint8_t
>
(
)
+
2
kMaxSeqnum
+
seqnum_small
-
replay_window
-
1
)
;
EXPECT_FALSE
(
s1_
.
ProtectRtp
(
rtp_packet_
)
)
;
rtp_packet_
.
SetData
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
)
;
for
(
uint16_t
seqnum
=
65000
;
seqnum
<
65003
;
+
+
seqnum
)
{
SetBE16
(
rtp_packet_
.
MutableData
<
uint8_t
>
(
)
+
2
seqnum
)
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
rtp_packet_
)
)
;
rtp_packet_
.
SetData
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
)
;
}
SetBE16
(
rtp_packet_
.
MutableData
<
uint8_t
>
(
)
+
2
seqnum_small
+
1
)
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
rtp_packet_
)
)
;
}
TEST_F
(
SrtpSessionTest
RemoveSsrc
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
rtp_packet_
)
)
;
EXPECT_TRUE
(
s2_
.
UnprotectRtp
(
rtp_packet_
)
)
;
EXPECT_EQ
(
sizeof
(
kPcmuFrame
)
rtp_packet_
.
size
(
)
)
;
EXPECT_EQ
(
0
std
:
:
memcmp
(
kPcmuFrame
rtp_packet_
.
data
(
)
rtp_packet_
.
size
(
)
)
)
;
rtp_packet_
.
SetData
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
)
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
rtp_packet_
)
)
;
EXPECT_FALSE
(
s2_
.
UnprotectRtp
(
rtp_packet_
)
)
;
EXPECT_TRUE
(
s2_
.
RemoveSsrcFromSession
(
1
)
)
;
EXPECT_FALSE
(
s2_
.
RemoveSsrcFromSession
(
1
)
)
;
EXPECT_TRUE
(
s2_
.
UnprotectRtp
(
rtp_packet_
)
)
;
EXPECT_EQ
(
sizeof
(
kPcmuFrame
)
rtp_packet_
.
size
(
)
)
;
EXPECT_EQ
(
0
std
:
:
memcmp
(
kPcmuFrame
rtp_packet_
.
data
(
)
rtp_packet_
.
size
(
)
)
)
;
EXPECT_TRUE
(
s2_
.
RemoveSsrcFromSession
(
1
)
)
;
}
TEST_F
(
SrtpSessionTest
ProtectUnprotectWrapAroundRocMismatch
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
unsigned
char
kFrame1
[
]
=
{
0x80
0x00
0xFF
0xFF
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0xBE
0xEF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
}
;
CopyOnWriteBuffer
packet1
(
kFrame1
sizeof
(
kFrame1
)
-
10
sizeof
(
kFrame1
)
)
;
unsigned
char
kFrame2
[
]
=
{
0x80
0x00
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0xBE
0xEF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
}
;
CopyOnWriteBuffer
packet2
(
kFrame2
sizeof
(
kFrame2
)
-
10
sizeof
(
kFrame1
)
)
;
const
unsigned
char
kPayload
[
]
=
{
0xBE
0xEF
}
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
packet1
)
)
;
EXPECT_EQ
(
packet1
.
size
(
)
24u
)
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
packet2
)
)
;
EXPECT_EQ
(
packet2
.
size
(
)
24u
)
;
EXPECT_FALSE
(
s2_
.
UnprotectRtp
(
packet2
)
)
;
EXPECT_TRUE
(
s2_
.
UnprotectRtp
(
packet1
)
)
;
ASSERT_EQ
(
packet1
.
size
(
)
14u
)
;
EXPECT_EQ
(
0
std
:
:
memcmp
(
packet1
.
data
(
)
+
12
kPayload
sizeof
(
kPayload
)
)
)
;
EXPECT_TRUE
(
s2_
.
UnprotectRtp
(
packet2
)
)
;
ASSERT_EQ
(
packet2
.
size
(
)
14u
)
;
EXPECT_EQ
(
0
std
:
:
memcmp
(
packet2
.
data
(
)
+
12
kPayload
sizeof
(
kPayload
)
)
)
;
}
TEST_F
(
SrtpSessionTest
ProtectGetPacketIndex
)
{
EXPECT_TRUE
(
s1_
.
SetSend
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
EXPECT_TRUE
(
s2_
.
SetReceive
(
kSrtpAes128CmSha1_80
kTestKey1
kEncryptedHeaderExtensionIds
)
)
;
unsigned
char
kFrame1
[
]
=
{
0x80
0x00
0xFF
0xFF
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0xBE
0xEF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
}
;
CopyOnWriteBuffer
packet1
(
kFrame1
sizeof
(
kFrame1
)
-
10
sizeof
(
kFrame1
)
)
;
unsigned
char
kFrame2
[
]
=
{
0x80
0x00
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0xBE
0xEF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
0xFF
}
;
CopyOnWriteBuffer
packet2
(
kFrame2
sizeof
(
kFrame2
)
-
10
sizeof
(
kFrame1
)
)
;
int64_t
index
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
packet1
&
index
)
)
;
EXPECT_EQ
(
packet1
.
size
(
)
24u
)
;
EXPECT_EQ
(
index
0xffff00000000
)
;
EXPECT_TRUE
(
s1_
.
ProtectRtp
(
packet2
&
index
)
)
;
EXPECT_EQ
(
packet2
.
size
(
)
24u
)
;
EXPECT_EQ
(
index
0x10001000000
)
;
}
}
