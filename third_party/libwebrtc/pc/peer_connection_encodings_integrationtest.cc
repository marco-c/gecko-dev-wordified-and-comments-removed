#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
audio_codecs
/
builtin_audio_decoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
builtin_audio_encoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
opus_audio_decoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
opus_audio_encoder_factory
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
stats
/
rtcstats_objects
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory_template
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory_template_dav1d_adapter
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory_template_libvpx_vp8_adapter
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory_template_libvpx_vp9_adapter
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory_template_open_h264_adapter
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory_template
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory_template_libaom_av1_adapter
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory_template_libvpx_vp8_adapter
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory_template_libvpx_vp9_adapter
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory_template_open_h264_adapter
.
h
"
#
include
"
pc
/
sdp_utils
.
h
"
#
include
"
pc
/
simulcast_description
.
h
"
#
include
"
pc
/
test
/
mock_peer_connection_observers
.
h
"
#
include
"
pc
/
test
/
peer_connection_test_wrapper
.
h
"
#
include
"
pc
/
test
/
simulcast_layer_util
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
#
include
"
rtc_base
/
physical_socket_server
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
using
:
:
testing
:
:
Eq
;
using
:
:
testing
:
:
Optional
;
using
:
:
testing
:
:
SizeIs
;
using
:
:
testing
:
:
StrCaseEq
;
using
:
:
testing
:
:
StrEq
;
namespace
webrtc
{
namespace
{
constexpr
TimeDelta
kDefaultTimeout
=
TimeDelta
:
:
Seconds
(
5
)
;
constexpr
TimeDelta
kLongTimeoutForRampingUp
=
TimeDelta
:
:
Minutes
(
1
)
;
constexpr
DataRate
kVp9ExpectedMaxBitrateForL1T3
=
DataRate
:
:
KilobitsPerSec
(
1500
)
;
struct
StringParamToString
{
std
:
:
string
operator
(
)
(
const
:
:
testing
:
:
TestParamInfo
<
std
:
:
string
>
&
info
)
{
return
info
.
param
;
}
}
;
bool
IsReliabilityMechanism
(
const
webrtc
:
:
RtpCodecCapability
&
codec
)
{
return
absl
:
:
EqualsIgnoreCase
(
codec
.
name
cricket
:
:
kRtxCodecName
)
|
|
absl
:
:
EqualsIgnoreCase
(
codec
.
name
cricket
:
:
kRedCodecName
)
|
|
absl
:
:
EqualsIgnoreCase
(
codec
.
name
cricket
:
:
kUlpfecCodecName
)
;
}
std
:
:
string
GetCurrentCodecMimeType
(
rtc
:
:
scoped_refptr
<
const
webrtc
:
:
RTCStatsReport
>
report
const
webrtc
:
:
RTCOutboundRtpStreamStats
&
outbound_rtp
)
{
return
outbound_rtp
.
codec_id
.
is_defined
(
)
?
*
report
-
>
GetAs
<
webrtc
:
:
RTCCodecStats
>
(
*
outbound_rtp
.
codec_id
)
-
>
mime_type
:
"
"
;
}
struct
RidAndResolution
{
std
:
:
string
rid
;
uint32_t
width
;
uint32_t
height
;
}
;
const
webrtc
:
:
RTCOutboundRtpStreamStats
*
FindOutboundRtpByRid
(
const
std
:
:
vector
<
const
webrtc
:
:
RTCOutboundRtpStreamStats
*
>
&
outbound_rtps
const
absl
:
:
string_view
&
rid
)
{
for
(
const
auto
*
outbound_rtp
:
outbound_rtps
)
{
if
(
outbound_rtp
-
>
rid
.
is_defined
(
)
&
&
*
outbound_rtp
-
>
rid
=
=
rid
)
{
return
outbound_rtp
;
}
}
return
nullptr
;
}
}
class
PeerConnectionEncodingsIntegrationTest
:
public
:
:
testing
:
:
Test
{
public
:
PeerConnectionEncodingsIntegrationTest
(
)
:
background_thread_
(
std
:
:
make_unique
<
rtc
:
:
Thread
>
(
&
pss_
)
)
{
RTC_CHECK
(
background_thread_
-
>
Start
(
)
)
;
}
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
CreatePc
(
)
{
auto
pc_wrapper
=
rtc
:
:
make_ref_counted
<
PeerConnectionTestWrapper
>
(
"
pc
"
&
pss_
background_thread_
.
get
(
)
background_thread_
.
get
(
)
)
;
pc_wrapper
-
>
CreatePc
(
{
}
webrtc
:
:
CreateOpusAudioEncoderFactory
(
)
webrtc
:
:
CreateOpusAudioDecoderFactory
(
)
)
;
return
pc_wrapper
;
}
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
AddTransceiverWithSimulcastLayers
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
init_layers
)
{
rtc
:
:
scoped_refptr
<
webrtc
:
:
MediaStreamInterface
>
stream
=
local
-
>
GetUserMedia
(
false
cricket
:
:
AudioOptions
(
)
true
{
.
width
=
1280
.
height
=
720
}
)
;
rtc
:
:
scoped_refptr
<
VideoTrackInterface
>
track
=
stream
-
>
GetVideoTracks
(
)
[
0
]
;
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
>
transceiver_or_error
=
local
-
>
pc
(
)
-
>
AddTransceiver
(
track
CreateTransceiverInit
(
init_layers
)
)
;
EXPECT_TRUE
(
transceiver_or_error
.
ok
(
)
)
;
return
transceiver_or_error
.
value
(
)
;
}
bool
HasSenderVideoCodecCapability
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
absl
:
:
string_view
codec_name
)
{
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
pc_wrapper
-
>
pc_factory
(
)
-
>
GetRtpSenderCapabilities
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
.
codecs
;
return
std
:
:
find_if
(
codecs
.
begin
(
)
codecs
.
end
(
)
[
&
codec_name
]
(
const
RtpCodecCapability
&
codec
)
{
return
absl
:
:
EqualsIgnoreCase
(
codec
.
name
codec_name
)
;
}
)
!
=
codecs
.
end
(
)
;
}
std
:
:
vector
<
RtpCodecCapability
>
GetCapabilitiesAndRestrictToCodec
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
absl
:
:
string_view
codec_name
)
{
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
pc_wrapper
-
>
pc_factory
(
)
-
>
GetRtpSenderCapabilities
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
.
codecs
;
codecs
.
erase
(
std
:
:
remove_if
(
codecs
.
begin
(
)
codecs
.
end
(
)
[
&
codec_name
]
(
const
RtpCodecCapability
&
codec
)
{
return
!
IsReliabilityMechanism
(
codec
)
&
&
!
absl
:
:
EqualsIgnoreCase
(
codec
.
name
codec_name
)
;
}
)
codecs
.
end
(
)
)
;
RTC_DCHECK
(
std
:
:
find_if
(
codecs
.
begin
(
)
codecs
.
end
(
)
[
&
codec_name
]
(
const
RtpCodecCapability
&
codec
)
{
return
absl
:
:
EqualsIgnoreCase
(
codec
.
name
codec_name
)
;
}
)
!
=
codecs
.
end
(
)
)
;
return
codecs
;
}
void
ExchangeIceCandidates
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
)
{
local_pc_wrapper
-
>
SignalOnIceCandidateReady
.
connect
(
remote_pc_wrapper
.
get
(
)
&
PeerConnectionTestWrapper
:
:
AddIceCandidate
)
;
remote_pc_wrapper
-
>
SignalOnIceCandidateReady
.
connect
(
local_pc_wrapper
.
get
(
)
&
PeerConnectionTestWrapper
:
:
AddIceCandidate
)
;
}
void
NegotiateWithSimulcastTweaks
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
init_layers
)
{
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
offer
=
CreateOffer
(
local_pc_wrapper
)
;
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
p1
=
SetLocalDescription
(
local_pc_wrapper
offer
.
get
(
)
)
;
cricket
:
:
SimulcastDescription
simulcast_description
=
RemoveSimulcast
(
offer
.
get
(
)
)
;
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
p2
=
SetRemoteDescription
(
remote_pc_wrapper
offer
.
get
(
)
)
;
EXPECT_TRUE
(
Await
(
{
p1
p2
}
)
)
;
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
answer
=
CreateAnswer
(
remote_pc_wrapper
)
;
p1
=
SetLocalDescription
(
remote_pc_wrapper
answer
.
get
(
)
)
;
cricket
:
:
MediaContentDescription
*
mcd_answer
=
answer
-
>
description
(
)
-
>
contents
(
)
[
0
]
.
media_description
(
)
;
mcd_answer
-
>
mutable_streams
(
)
.
clear
(
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
simulcast_layers
=
simulcast_description
.
send_layers
(
)
.
GetAllLayers
(
)
;
cricket
:
:
SimulcastLayerList
&
receive_layers
=
mcd_answer
-
>
simulcast_description
(
)
.
receive_layers
(
)
;
for
(
const
auto
&
layer
:
simulcast_layers
)
{
receive_layers
.
AddLayer
(
layer
)
;
}
p2
=
SetRemoteDescription
(
local_pc_wrapper
answer
.
get
(
)
)
;
EXPECT_TRUE
(
Await
(
{
p1
p2
}
)
)
;
}
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
GetStats
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
)
{
auto
callback
=
rtc
:
:
make_ref_counted
<
MockRTCStatsCollectorCallback
>
(
)
;
pc_wrapper
-
>
pc
(
)
-
>
GetStats
(
callback
.
get
(
)
)
;
EXPECT_TRUE_WAIT
(
callback
-
>
called
(
)
kDefaultTimeout
.
ms
(
)
)
;
return
callback
-
>
report
(
)
;
}
bool
HasOutboundRtpBytesSent
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
size_t
num_layers
)
{
return
HasOutboundRtpBytesSent
(
pc_wrapper
num_layers
num_layers
)
;
}
bool
HasOutboundRtpBytesSent
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
size_t
num_layers
size_t
num_active_layers
)
{
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
if
(
outbound_rtps
.
size
(
)
!
=
num_layers
)
{
return
false
;
}
size_t
num_sending_layers
=
0
;
for
(
const
auto
*
outbound_rtp
:
outbound_rtps
)
{
if
(
outbound_rtp
-
>
bytes_sent
.
is_defined
(
)
&
&
*
outbound_rtp
-
>
bytes_sent
>
0u
)
{
+
+
num_sending_layers
;
}
}
return
num_sending_layers
=
=
num_active_layers
;
}
bool
HasOutboundRtpWithRidAndScalabilityMode
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
absl
:
:
string_view
rid
absl
:
:
string_view
expected_scalability_mode
uint32_t
frame_height
)
{
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
auto
*
outbound_rtp
=
FindOutboundRtpByRid
(
outbound_rtps
rid
)
;
if
(
!
outbound_rtp
|
|
!
outbound_rtp
-
>
scalability_mode
.
is_defined
(
)
|
|
*
outbound_rtp
-
>
scalability_mode
!
=
expected_scalability_mode
)
{
return
false
;
}
if
(
outbound_rtp
-
>
frame_height
.
is_defined
(
)
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
Waiting
for
target
resolution
(
"
<
<
frame_height
<
<
"
p
)
.
Currently
at
"
<
<
*
outbound_rtp
-
>
frame_height
<
<
"
p
.
.
.
"
;
}
else
{
RTC_LOG
(
LS_INFO
)
<
<
"
Waiting
for
target
resolution
.
No
frames
encoded
yet
.
.
.
"
;
}
if
(
!
outbound_rtp
-
>
frame_height
.
is_defined
(
)
|
|
*
outbound_rtp
-
>
frame_height
!
=
frame_height
)
{
rtc
:
:
Thread
:
:
Current
(
)
-
>
SleepMs
(
1000
)
;
return
false
;
}
return
true
;
}
bool
OutboundRtpResolutionsAreLessThanOrEqualToExpectations
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
std
:
:
vector
<
RidAndResolution
>
resolutions
)
{
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
for
(
const
RidAndResolution
&
resolution
:
resolutions
)
{
const
RTCOutboundRtpStreamStats
*
outbound_rtp
=
nullptr
;
if
(
!
resolution
.
rid
.
empty
(
)
)
{
outbound_rtp
=
FindOutboundRtpByRid
(
outbound_rtps
resolution
.
rid
)
;
}
else
if
(
outbound_rtps
.
size
(
)
=
=
1u
)
{
outbound_rtp
=
outbound_rtps
[
0
]
;
}
if
(
!
outbound_rtp
|
|
!
outbound_rtp
-
>
frame_width
.
is_defined
(
)
|
|
!
outbound_rtp
-
>
frame_height
.
is_defined
(
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
rid
=
"
<
<
resolution
.
rid
<
<
"
does
not
have
"
<
<
"
resolution
metrics
"
;
return
false
;
}
if
(
*
outbound_rtp
-
>
frame_width
>
resolution
.
width
|
|
*
outbound_rtp
-
>
frame_height
>
resolution
.
height
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
rid
=
"
<
<
resolution
.
rid
<
<
"
is
"
<
<
*
outbound_rtp
-
>
frame_width
<
<
"
x
"
<
<
*
outbound_rtp
-
>
frame_height
<
<
"
this
is
greater
than
the
"
<
<
"
expected
"
<
<
resolution
.
width
<
<
"
x
"
<
<
resolution
.
height
;
return
false
;
}
}
return
true
;
}
protected
:
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
CreateOffer
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
)
{
auto
observer
=
rtc
:
:
make_ref_counted
<
MockCreateSessionDescriptionObserver
>
(
)
;
pc_wrapper
-
>
pc
(
)
-
>
CreateOffer
(
observer
.
get
(
)
{
}
)
;
EXPECT_EQ_WAIT
(
true
observer
-
>
called
(
)
kDefaultTimeout
.
ms
(
)
)
;
return
observer
-
>
MoveDescription
(
)
;
}
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
CreateAnswer
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
)
{
auto
observer
=
rtc
:
:
make_ref_counted
<
MockCreateSessionDescriptionObserver
>
(
)
;
pc_wrapper
-
>
pc
(
)
-
>
CreateAnswer
(
observer
.
get
(
)
{
}
)
;
EXPECT_EQ_WAIT
(
true
observer
-
>
called
(
)
kDefaultTimeout
.
ms
(
)
)
;
return
observer
-
>
MoveDescription
(
)
;
}
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
SetLocalDescription
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
SessionDescriptionInterface
*
sdp
)
{
auto
observer
=
rtc
:
:
make_ref_counted
<
MockSetSessionDescriptionObserver
>
(
)
;
pc_wrapper
-
>
pc
(
)
-
>
SetLocalDescription
(
observer
.
get
(
)
CloneSessionDescription
(
sdp
)
.
release
(
)
)
;
return
observer
;
}
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
SetRemoteDescription
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
pc_wrapper
SessionDescriptionInterface
*
sdp
)
{
auto
observer
=
rtc
:
:
make_ref_counted
<
MockSetSessionDescriptionObserver
>
(
)
;
pc_wrapper
-
>
pc
(
)
-
>
SetRemoteDescription
(
observer
.
get
(
)
CloneSessionDescription
(
sdp
)
.
release
(
)
)
;
return
observer
;
}
bool
Await
(
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
>
observers
)
{
for
(
auto
&
observer
:
observers
)
{
EXPECT_EQ_WAIT
(
true
observer
-
>
called
(
)
kDefaultTimeout
.
ms
(
)
)
;
if
(
!
observer
-
>
result
(
)
)
{
return
false
;
}
}
return
true
;
}
rtc
:
:
PhysicalSocketServer
pss_
;
std
:
:
unique_ptr
<
rtc
:
:
Thread
>
background_thread_
;
}
;
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP8_SingleEncodingDefaultsToL1T1
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
"
VP8
"
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpBytesSent
(
local_pc_wrapper
1u
)
kDefaultTimeout
.
ms
(
)
)
;
EXPECT_TRUE
(
OutboundRtpResolutionsAreLessThanOrEqualToExpectations
(
local_pc_wrapper
{
{
"
"
1280
720
}
}
)
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
local_pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
ASSERT_THAT
(
outbound_rtps
SizeIs
(
1u
)
)
;
EXPECT_THAT
(
GetCurrentCodecMimeType
(
report
*
outbound_rtps
[
0
]
)
StrCaseEq
(
"
video
/
VP8
"
)
)
;
EXPECT_THAT
(
*
outbound_rtps
[
0
]
-
>
scalability_mode
StrEq
(
"
L1T1
"
)
)
;
}
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP8_RejectsSvcAndDefaultsToL1T1
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
"
VP8
"
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_EQ
(
parameters
.
encodings
.
size
(
)
1u
)
;
parameters
.
encodings
[
0
]
.
scalability_mode
=
"
L3T3_KEY
"
;
parameters
.
encodings
[
0
]
.
scale_resolution_down_by
=
1
;
EXPECT_FALSE
(
sender
-
>
SetParameters
(
parameters
)
.
ok
(
)
)
;
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_EQ
(
parameters
.
encodings
.
size
(
)
1u
)
;
EXPECT_THAT
(
parameters
.
encodings
[
0
]
.
scalability_mode
Eq
(
absl
:
:
nullopt
)
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpBytesSent
(
local_pc_wrapper
1u
)
kDefaultTimeout
.
ms
(
)
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
local_pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
ASSERT_THAT
(
outbound_rtps
SizeIs
(
1u
)
)
;
EXPECT_THAT
(
GetCurrentCodecMimeType
(
report
*
outbound_rtps
[
0
]
)
StrCaseEq
(
"
video
/
VP8
"
)
)
;
EXPECT_THAT
(
*
outbound_rtps
[
0
]
-
>
scalability_mode
StrEq
(
"
L1T1
"
)
)
;
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_EQ
(
parameters
.
encodings
.
size
(
)
1u
)
;
EXPECT_THAT
(
parameters
.
encodings
[
0
]
.
scalability_mode
Eq
(
absl
:
:
nullopt
)
)
;
}
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP8_FallbackFromSvcResultsInL1T2
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
local_pc_wrapper
-
>
pc_factory
(
)
-
>
GetRtpSenderCapabilities
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
.
codecs
;
EXPECT_THAT
(
codecs
[
0
]
.
name
StrCaseEq
(
"
VP8
"
)
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_EQ
(
parameters
.
encodings
.
size
(
)
1u
)
;
parameters
.
encodings
[
0
]
.
scalability_mode
=
"
L3T3_KEY
"
;
parameters
.
encodings
[
0
]
.
scale_resolution_down_by
=
1
;
EXPECT_TRUE
(
sender
-
>
SetParameters
(
parameters
)
.
ok
(
)
)
;
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_EQ
(
parameters
.
encodings
.
size
(
)
1u
)
;
EXPECT_THAT
(
parameters
.
encodings
[
0
]
.
scalability_mode
Optional
(
std
:
:
string
(
"
L3T3_KEY
"
)
)
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_EQ
(
parameters
.
encodings
.
size
(
)
1u
)
;
EXPECT_THAT
(
parameters
.
encodings
[
0
]
.
scalability_mode
Optional
(
std
:
:
string
(
"
L1T2
"
)
)
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpBytesSent
(
local_pc_wrapper
1u
)
kDefaultTimeout
.
ms
(
)
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
local_pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
ASSERT_THAT
(
outbound_rtps
SizeIs
(
1u
)
)
;
EXPECT_THAT
(
GetCurrentCodecMimeType
(
report
*
outbound_rtps
[
0
]
)
StrCaseEq
(
"
video
/
VP8
"
)
)
;
EXPECT_THAT
(
*
outbound_rtps
[
0
]
-
>
scalability_mode
StrEq
(
"
L1T2
"
)
)
;
}
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP9_LegacySvcWhenScalabilityModeNotSpecified
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
"
h
"
"
q
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
"
VP9
"
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpBytesSent
(
local_pc_wrapper
1u
)
kDefaultTimeout
.
ms
(
)
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpWithRidAndScalabilityMode
(
local_pc_wrapper
"
f
"
"
L3T3_KEY
"
720
)
kLongTimeoutForRampingUp
.
ms
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
std
:
:
vector
<
RtpEncodingParameters
>
encodings
=
sender
-
>
GetParameters
(
)
.
encodings
;
ASSERT_EQ
(
encodings
.
size
(
)
3u
)
;
EXPECT_FALSE
(
encodings
[
0
]
.
scalability_mode
.
has_value
(
)
)
;
EXPECT_FALSE
(
encodings
[
1
]
.
scalability_mode
.
has_value
(
)
)
;
EXPECT_FALSE
(
encodings
[
2
]
.
scalability_mode
.
has_value
(
)
)
;
}
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP9_StandardSvcWithOnlyOneEncoding
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
"
VP9
"
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_EQ
(
parameters
.
encodings
.
size
(
)
1u
)
;
parameters
.
encodings
[
0
]
.
scalability_mode
=
"
L3T3_KEY
"
;
parameters
.
encodings
[
0
]
.
scale_resolution_down_by
=
1
;
EXPECT_TRUE
(
sender
-
>
SetParameters
(
parameters
)
.
ok
(
)
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpBytesSent
(
local_pc_wrapper
1u
)
kDefaultTimeout
.
ms
(
)
)
;
EXPECT_TRUE
(
OutboundRtpResolutionsAreLessThanOrEqualToExpectations
(
local_pc_wrapper
{
{
"
"
1280
720
}
}
)
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
local_pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
ASSERT_THAT
(
outbound_rtps
SizeIs
(
1u
)
)
;
EXPECT_THAT
(
GetCurrentCodecMimeType
(
report
*
outbound_rtps
[
0
]
)
StrCaseEq
(
"
video
/
VP9
"
)
)
;
EXPECT_THAT
(
*
outbound_rtps
[
0
]
-
>
scalability_mode
StrEq
(
"
L3T3_KEY
"
)
)
;
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_EQ
(
parameters
.
encodings
.
size
(
)
1u
)
;
EXPECT_THAT
(
parameters
.
encodings
[
0
]
.
scalability_mode
Optional
(
std
:
:
string
(
"
L3T3_KEY
"
)
)
)
;
}
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP9_StandardSvcWithSingleActiveEncoding
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
"
h
"
"
q
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
"
VP9
"
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_THAT
(
parameters
.
encodings
SizeIs
(
3
)
)
;
parameters
.
encodings
[
0
]
.
scalability_mode
=
"
L3T3_KEY
"
;
parameters
.
encodings
[
0
]
.
scale_resolution_down_by
=
1
;
parameters
.
encodings
[
1
]
.
active
=
false
;
parameters
.
encodings
[
2
]
.
active
=
false
;
EXPECT_TRUE
(
sender
-
>
SetParameters
(
parameters
)
.
ok
(
)
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpBytesSent
(
local_pc_wrapper
3u
1u
)
kDefaultTimeout
.
ms
(
)
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpWithRidAndScalabilityMode
(
local_pc_wrapper
"
f
"
"
L3T3_KEY
"
720
)
kLongTimeoutForRampingUp
.
ms
(
)
)
;
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_THAT
(
parameters
.
encodings
SizeIs
(
3
)
)
;
EXPECT_THAT
(
parameters
.
encodings
[
0
]
.
scalability_mode
Optional
(
std
:
:
string
(
"
L3T3_KEY
"
)
)
)
;
EXPECT_FALSE
(
parameters
.
encodings
[
1
]
.
scalability_mode
.
has_value
(
)
)
;
EXPECT_FALSE
(
parameters
.
encodings
[
2
]
.
scalability_mode
.
has_value
(
)
)
;
}
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP9_SwitchFromLegacySvcToStandardSingleActiveEncodingSvc
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
"
h
"
"
q
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
"
VP9
"
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_THAT
(
parameters
.
encodings
SizeIs
(
3
)
)
;
parameters
.
encodings
[
0
]
.
active
=
true
;
parameters
.
encodings
[
0
]
.
scalability_mode
=
"
L2T2_KEY
"
;
parameters
.
encodings
[
0
]
.
scale_resolution_down_by
=
2
.
0
;
parameters
.
encodings
[
1
]
.
active
=
false
;
parameters
.
encodings
[
1
]
.
scalability_mode
=
absl
:
:
nullopt
;
parameters
.
encodings
[
2
]
.
active
=
false
;
parameters
.
encodings
[
2
]
.
scalability_mode
=
absl
:
:
nullopt
;
sender
-
>
SetParameters
(
parameters
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpBytesSent
(
local_pc_wrapper
3u
1u
)
kDefaultTimeout
.
ms
(
)
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpWithRidAndScalabilityMode
(
local_pc_wrapper
"
f
"
"
L2T2_KEY
"
720
/
2
)
kLongTimeoutForRampingUp
.
ms
(
)
)
;
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_THAT
(
parameters
.
encodings
SizeIs
(
3
)
)
;
EXPECT_THAT
(
parameters
.
encodings
[
0
]
.
scalability_mode
Optional
(
std
:
:
string
(
"
L2T2_KEY
"
)
)
)
;
EXPECT_FALSE
(
parameters
.
encodings
[
1
]
.
scalability_mode
.
has_value
(
)
)
;
EXPECT_FALSE
(
parameters
.
encodings
[
2
]
.
scalability_mode
.
has_value
(
)
)
;
}
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP9_AllLayersInactive_LegacySvc
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
"
h
"
"
q
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
"
VP9
"
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_THAT
(
parameters
.
encodings
SizeIs
(
3
)
)
;
parameters
.
encodings
[
0
]
.
active
=
false
;
parameters
.
encodings
[
1
]
.
active
=
false
;
parameters
.
encodings
[
2
]
.
active
=
false
;
sender
-
>
SetParameters
(
parameters
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
SleepMs
(
1000
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
local_pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
ASSERT_THAT
(
outbound_rtps
SizeIs
(
1u
)
)
;
EXPECT_EQ
(
*
outbound_rtps
[
0
]
-
>
bytes_sent
0u
)
;
}
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP9_AllLayersInactive_StandardSvc
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
"
h
"
"
q
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
"
VP9
"
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_THAT
(
parameters
.
encodings
SizeIs
(
3
)
)
;
parameters
.
encodings
[
0
]
.
scalability_mode
=
"
L3T3_KEY
"
;
parameters
.
encodings
[
0
]
.
scale_resolution_down_by
=
1
;
parameters
.
encodings
[
0
]
.
active
=
false
;
parameters
.
encodings
[
1
]
.
active
=
false
;
parameters
.
encodings
[
2
]
.
active
=
false
;
sender
-
>
SetParameters
(
parameters
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
SleepMs
(
1000
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
local_pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
ASSERT_THAT
(
outbound_rtps
SizeIs
(
3u
)
)
;
EXPECT_EQ
(
*
outbound_rtps
[
0
]
-
>
bytes_sent
0u
)
;
EXPECT_EQ
(
*
outbound_rtps
[
1
]
-
>
bytes_sent
0u
)
;
EXPECT_EQ
(
*
outbound_rtps
[
2
]
-
>
bytes_sent
0u
)
;
}
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP9_TargetBitrate_LegacyL1T3
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
"
h
"
"
q
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
"
VP9
"
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
parameters
.
encodings
[
0
]
.
active
=
false
;
parameters
.
encodings
[
1
]
.
active
=
false
;
parameters
.
encodings
[
2
]
.
active
=
true
;
sender
-
>
SetParameters
(
parameters
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpWithRidAndScalabilityMode
(
local_pc_wrapper
"
f
"
"
L1T3
"
720
)
kLongTimeoutForRampingUp
.
ms
(
)
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
SleepMs
(
1000
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
local_pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
ASSERT_THAT
(
outbound_rtps
SizeIs
(
1
)
)
;
DataRate
target_bitrate
=
DataRate
:
:
BitsPerSec
(
*
outbound_rtps
[
0
]
-
>
target_bitrate
)
;
EXPECT_LE
(
target_bitrate
.
kbps
(
)
kVp9ExpectedMaxBitrateForL1T3
.
kbps
(
)
)
;
}
TEST_F
(
PeerConnectionEncodingsIntegrationTest
VP9_TargetBitrate_StandardL1T3
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
"
h
"
"
q
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
"
VP9
"
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
parameters
.
encodings
[
0
]
.
active
=
true
;
parameters
.
encodings
[
0
]
.
scale_resolution_down_by
=
1
.
0
;
parameters
.
encodings
[
0
]
.
scalability_mode
=
"
L1T3
"
;
parameters
.
encodings
[
1
]
.
active
=
false
;
parameters
.
encodings
[
2
]
.
active
=
false
;
sender
-
>
SetParameters
(
parameters
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpWithRidAndScalabilityMode
(
local_pc_wrapper
"
f
"
"
L1T3
"
720
)
kLongTimeoutForRampingUp
.
ms
(
)
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
SleepMs
(
1000
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
local_pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
ASSERT_THAT
(
outbound_rtps
SizeIs
(
3
)
)
;
auto
*
outbound_rtp
=
FindOutboundRtpByRid
(
outbound_rtps
"
f
"
)
;
ASSERT_TRUE
(
outbound_rtp
)
;
DataRate
target_bitrate
=
DataRate
:
:
BitsPerSec
(
*
outbound_rtp
-
>
target_bitrate
)
;
EXPECT_LE
(
target_bitrate
.
kbps
(
)
kVp9ExpectedMaxBitrateForL1T3
.
kbps
(
)
)
;
}
class
PeerConnectionEncodingsIntegrationParameterizedTest
:
public
PeerConnectionEncodingsIntegrationTest
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
string
>
{
public
:
PeerConnectionEncodingsIntegrationParameterizedTest
(
)
:
codec_name_
(
GetParam
(
)
)
mime_type_
(
"
video
/
"
+
codec_name_
)
{
}
bool
SkipTestDueToAv1Missing
(
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
)
{
if
(
codec_name_
=
=
"
AV1
"
&
&
!
HasSenderVideoCodecCapability
(
local_pc_wrapper
"
AV1
"
)
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
\
n
*
*
*
\
nAV1
is
not
available
skipping
test
.
\
n
*
*
*
"
;
return
true
;
}
return
false
;
}
protected
:
const
std
:
:
string
codec_name_
;
const
std
:
:
string
mime_type_
;
}
;
TEST_P
(
PeerConnectionEncodingsIntegrationParameterizedTest
AllLayersInactive
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
if
(
SkipTestDueToAv1Missing
(
local_pc_wrapper
)
)
{
return
;
}
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
"
h
"
"
q
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
codec_name_
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_THAT
(
parameters
.
encodings
SizeIs
(
3
)
)
;
parameters
.
encodings
[
0
]
.
scalability_mode
=
"
L1T3
"
;
parameters
.
encodings
[
0
]
.
scale_resolution_down_by
=
1
;
parameters
.
encodings
[
0
]
.
active
=
false
;
parameters
.
encodings
[
1
]
.
active
=
false
;
parameters
.
encodings
[
2
]
.
active
=
false
;
sender
-
>
SetParameters
(
parameters
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
SleepMs
(
1000
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
local_pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
ASSERT_THAT
(
outbound_rtps
SizeIs
(
3u
)
)
;
EXPECT_EQ
(
*
outbound_rtps
[
0
]
-
>
bytes_sent
0u
)
;
EXPECT_EQ
(
*
outbound_rtps
[
1
]
-
>
bytes_sent
0u
)
;
EXPECT_EQ
(
*
outbound_rtps
[
2
]
-
>
bytes_sent
0u
)
;
}
TEST_P
(
PeerConnectionEncodingsIntegrationParameterizedTest
Simulcast
)
{
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
local_pc_wrapper
=
CreatePc
(
)
;
if
(
SkipTestDueToAv1Missing
(
local_pc_wrapper
)
)
{
return
;
}
rtc
:
:
scoped_refptr
<
PeerConnectionTestWrapper
>
remote_pc_wrapper
=
CreatePc
(
)
;
ExchangeIceCandidates
(
local_pc_wrapper
remote_pc_wrapper
)
;
std
:
:
vector
<
cricket
:
:
SimulcastLayer
>
layers
=
CreateLayers
(
{
"
f
"
"
h
"
"
q
"
}
true
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
transceiver
=
AddTransceiverWithSimulcastLayers
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
=
GetCapabilitiesAndRestrictToCodec
(
local_pc_wrapper
codec_name_
)
;
transceiver
-
>
SetCodecPreferences
(
codecs
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
=
transceiver
-
>
sender
(
)
;
RtpParameters
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_THAT
(
parameters
.
encodings
SizeIs
(
3
)
)
;
parameters
.
encodings
[
0
]
.
scalability_mode
=
"
L1T3
"
;
parameters
.
encodings
[
0
]
.
scale_resolution_down_by
=
4
;
parameters
.
encodings
[
1
]
.
scalability_mode
=
"
L1T3
"
;
parameters
.
encodings
[
1
]
.
scale_resolution_down_by
=
2
;
parameters
.
encodings
[
2
]
.
scalability_mode
=
"
L1T3
"
;
parameters
.
encodings
[
2
]
.
scale_resolution_down_by
=
1
;
sender
-
>
SetParameters
(
parameters
)
;
NegotiateWithSimulcastTweaks
(
local_pc_wrapper
remote_pc_wrapper
layers
)
;
local_pc_wrapper
-
>
WaitForConnection
(
)
;
remote_pc_wrapper
-
>
WaitForConnection
(
)
;
parameters
=
sender
-
>
GetParameters
(
)
;
ASSERT_THAT
(
parameters
.
encodings
SizeIs
(
3
)
)
;
EXPECT_THAT
(
parameters
.
encodings
[
0
]
.
scalability_mode
Optional
(
std
:
:
string
(
"
L1T3
"
)
)
)
;
EXPECT_THAT
(
parameters
.
encodings
[
1
]
.
scalability_mode
Optional
(
std
:
:
string
(
"
L1T3
"
)
)
)
;
EXPECT_THAT
(
parameters
.
encodings
[
2
]
.
scalability_mode
Optional
(
std
:
:
string
(
"
L1T3
"
)
)
)
;
ASSERT_TRUE_WAIT
(
HasOutboundRtpBytesSent
(
local_pc_wrapper
3u
)
kLongTimeoutForRampingUp
.
ms
(
)
)
;
EXPECT_TRUE
(
OutboundRtpResolutionsAreLessThanOrEqualToExpectations
(
local_pc_wrapper
{
{
"
f
"
320
180
}
{
"
h
"
640
360
}
{
"
q
"
1280
720
}
}
)
)
;
rtc
:
:
scoped_refptr
<
const
RTCStatsReport
>
report
=
GetStats
(
local_pc_wrapper
)
;
std
:
:
vector
<
const
RTCOutboundRtpStreamStats
*
>
outbound_rtps
=
report
-
>
GetStatsOfType
<
RTCOutboundRtpStreamStats
>
(
)
;
ASSERT_THAT
(
outbound_rtps
SizeIs
(
3u
)
)
;
EXPECT_THAT
(
GetCurrentCodecMimeType
(
report
*
outbound_rtps
[
0
]
)
StrCaseEq
(
mime_type_
)
)
;
EXPECT_THAT
(
GetCurrentCodecMimeType
(
report
*
outbound_rtps
[
1
]
)
StrCaseEq
(
mime_type_
)
)
;
EXPECT_THAT
(
GetCurrentCodecMimeType
(
report
*
outbound_rtps
[
2
]
)
StrCaseEq
(
mime_type_
)
)
;
EXPECT_THAT
(
*
outbound_rtps
[
0
]
-
>
scalability_mode
StrEq
(
"
L1T3
"
)
)
;
EXPECT_THAT
(
*
outbound_rtps
[
1
]
-
>
scalability_mode
StrEq
(
"
L1T3
"
)
)
;
EXPECT_THAT
(
*
outbound_rtps
[
2
]
-
>
scalability_mode
StrEq
(
"
L1T3
"
)
)
;
}
INSTANTIATE_TEST_SUITE_P
(
StandardPath
PeerConnectionEncodingsIntegrationParameterizedTest
:
:
testing
:
:
Values
(
"
VP8
"
"
VP9
"
#
if
defined
(
WEBRTC_USE_H264
)
"
H264
"
#
endif
"
AV1
"
)
StringParamToString
(
)
)
;
}
