#
ifndef
PC_JSEP_TRANSPORT_CONTROLLER_H_
#
define
PC_JSEP_TRANSPORT_CONTROLLER_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
ice_transport_factory
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log
.
h
"
#
include
"
media
/
sctp
/
sctp_transport_internal
.
h
"
#
include
"
p2p
/
base
/
dtls_transport
.
h
"
#
include
"
p2p
/
base
/
dtls_transport_factory
.
h
"
#
include
"
p2p
/
base
/
p2p_transport_channel
.
h
"
#
include
"
pc
/
channel
.
h
"
#
include
"
pc
/
dtls_srtp_transport
.
h
"
#
include
"
pc
/
dtls_transport
.
h
"
#
include
"
pc
/
jsep_transport
.
h
"
#
include
"
pc
/
rtp_transport
.
h
"
#
include
"
pc
/
srtp_transport
.
h
"
#
include
"
rtc_base
/
async_invoker
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
ref_counted_object
.
h
"
#
include
"
rtc_base
/
robo_caller
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
namespace
rtc
{
class
Thread
;
class
PacketTransportInternal
;
}
namespace
webrtc
{
class
JsepTransportController
:
public
sigslot
:
:
has_slots
<
>
{
public
:
class
Observer
{
public
:
virtual
~
Observer
(
)
{
}
virtual
bool
OnTransportChanged
(
const
std
:
:
string
&
mid
RtpTransportInternal
*
rtp_transport
rtc
:
:
scoped_refptr
<
DtlsTransport
>
dtls_transport
DataChannelTransportInterface
*
data_channel_transport
)
=
0
;
}
;
struct
Config
{
bool
redetermine_role_on_ice_restart
=
true
;
rtc
:
:
SSLProtocolVersion
ssl_max_version
=
rtc
:
:
SSL_PROTOCOL_DTLS_12
;
webrtc
:
:
CryptoOptions
crypto_options
;
PeerConnectionInterface
:
:
BundlePolicy
bundle_policy
=
PeerConnectionInterface
:
:
kBundlePolicyBalanced
;
PeerConnectionInterface
:
:
RtcpMuxPolicy
rtcp_mux_policy
=
PeerConnectionInterface
:
:
kRtcpMuxPolicyRequire
;
bool
disable_encryption
=
false
;
bool
enable_external_auth
=
false
;
webrtc
:
:
IceTransportFactory
*
ice_transport_factory
=
nullptr
;
cricket
:
:
DtlsTransportFactory
*
dtls_transport_factory
=
nullptr
;
Observer
*
transport_observer
=
nullptr
;
std
:
:
function
<
void
(
const
rtc
:
:
CopyOnWriteBuffer
&
packet
int64_t
packet_time_us
)
>
rtcp_handler
;
bool
active_reset_srtp_params
=
false
;
RtcEventLog
*
event_log
=
nullptr
;
SctpTransportFactoryInterface
*
sctp_factory
=
nullptr
;
}
;
JsepTransportController
(
rtc
:
:
Thread
*
signaling_thread
rtc
:
:
Thread
*
network_thread
cricket
:
:
PortAllocator
*
port_allocator
AsyncResolverFactory
*
async_resolver_factory
Config
config
)
;
virtual
~
JsepTransportController
(
)
;
RTCError
SetLocalDescription
(
SdpType
type
const
cricket
:
:
SessionDescription
*
description
)
;
RTCError
SetRemoteDescription
(
SdpType
type
const
cricket
:
:
SessionDescription
*
description
)
;
RtpTransportInternal
*
GetRtpTransport
(
const
std
:
:
string
&
mid
)
const
;
cricket
:
:
DtlsTransportInternal
*
GetDtlsTransport
(
const
std
:
:
string
&
mid
)
;
const
cricket
:
:
DtlsTransportInternal
*
GetRtcpDtlsTransport
(
const
std
:
:
string
&
mid
)
const
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
DtlsTransport
>
LookupDtlsTransportByMid
(
const
std
:
:
string
&
mid
)
;
rtc
:
:
scoped_refptr
<
SctpTransport
>
GetSctpTransport
(
const
std
:
:
string
&
mid
)
const
;
DataChannelTransportInterface
*
GetDataChannelTransport
(
const
std
:
:
string
&
mid
)
const
;
void
SetIceConfig
(
const
cricket
:
:
IceConfig
&
config
)
;
void
SetNeedsIceRestartFlag
(
)
;
bool
NeedsIceRestart
(
const
std
:
:
string
&
mid
)
const
;
void
MaybeStartGathering
(
)
;
RTCError
AddRemoteCandidates
(
const
std
:
:
string
&
mid
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
candidates
)
;
RTCError
RemoveRemoteCandidates
(
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
candidates
)
;
bool
SetLocalCertificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
GetLocalCertificate
(
const
std
:
:
string
&
mid
)
const
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertChain
>
GetRemoteSSLCertChain
(
const
std
:
:
string
&
mid
)
const
;
absl
:
:
optional
<
rtc
:
:
SSLRole
>
GetDtlsRole
(
const
std
:
:
string
&
mid
)
const
;
bool
GetStats
(
const
std
:
:
string
&
mid
cricket
:
:
TransportStats
*
stats
)
;
bool
initial_offerer
(
)
const
{
return
initial_offerer_
&
&
*
initial_offerer_
;
}
void
SetActiveResetSrtpParams
(
bool
active_reset_srtp_params
)
;
void
RollbackTransports
(
)
;
RoboCaller
<
cricket
:
:
IceConnectionState
>
SignalIceConnectionState
;
RoboCaller
<
PeerConnectionInterface
:
:
PeerConnectionState
>
SignalConnectionState
;
RoboCaller
<
PeerConnectionInterface
:
:
IceConnectionState
>
SignalStandardizedIceConnectionState
;
RoboCaller
<
cricket
:
:
IceGatheringState
>
SignalIceGatheringState
;
RoboCaller
<
const
std
:
:
string
&
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
>
SignalIceCandidatesGathered
;
RoboCaller
<
const
cricket
:
:
IceCandidateErrorEvent
&
>
SignalIceCandidateError
;
RoboCaller
<
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
>
SignalIceCandidatesRemoved
;
RoboCaller
<
const
cricket
:
:
CandidatePairChangeEvent
&
>
SignalIceCandidatePairChanged
;
RoboCaller
<
rtc
:
:
SSLHandshakeError
>
SignalDtlsHandshakeError
;
private
:
RTCError
ApplyDescription_n
(
bool
local
SdpType
type
const
cricket
:
:
SessionDescription
*
description
)
;
RTCError
ValidateAndMaybeUpdateBundleGroup
(
bool
local
SdpType
type
const
cricket
:
:
SessionDescription
*
description
)
;
RTCError
ValidateContent
(
const
cricket
:
:
ContentInfo
&
content_info
)
;
void
HandleRejectedContent
(
const
cricket
:
:
ContentInfo
&
content_info
const
cricket
:
:
SessionDescription
*
description
)
;
bool
HandleBundledContent
(
const
cricket
:
:
ContentInfo
&
content_info
)
;
bool
SetTransportForMid
(
const
std
:
:
string
&
mid
cricket
:
:
JsepTransport
*
jsep_transport
)
;
void
RemoveTransportForMid
(
const
std
:
:
string
&
mid
)
;
cricket
:
:
JsepTransportDescription
CreateJsepTransportDescription
(
const
cricket
:
:
ContentInfo
&
content_info
const
cricket
:
:
TransportInfo
&
transport_info
const
std
:
:
vector
<
int
>
&
encrypted_extension_ids
int
rtp_abs_sendtime_extn_id
)
;
absl
:
:
optional
<
std
:
:
string
>
bundled_mid
(
)
const
{
absl
:
:
optional
<
std
:
:
string
>
bundled_mid
;
if
(
bundle_group_
&
&
bundle_group_
-
>
FirstContentName
(
)
)
{
bundled_mid
=
*
(
bundle_group_
-
>
FirstContentName
(
)
)
;
}
return
bundled_mid
;
}
bool
IsBundled
(
const
std
:
:
string
&
mid
)
const
{
return
bundle_group_
&
&
bundle_group_
-
>
HasContentName
(
mid
)
;
}
bool
ShouldUpdateBundleGroup
(
SdpType
type
const
cricket
:
:
SessionDescription
*
description
)
;
std
:
:
vector
<
int
>
MergeEncryptedHeaderExtensionIdsForBundle
(
const
cricket
:
:
SessionDescription
*
description
)
;
std
:
:
vector
<
int
>
GetEncryptedHeaderExtensionIds
(
const
cricket
:
:
ContentInfo
&
content_info
)
;
int
GetRtpAbsSendTimeHeaderExtensionId
(
const
cricket
:
:
ContentInfo
&
content_info
)
;
const
cricket
:
:
JsepTransport
*
GetJsepTransportForMid
(
const
std
:
:
string
&
mid
)
const
;
cricket
:
:
JsepTransport
*
GetJsepTransportForMid
(
const
std
:
:
string
&
mid
)
;
const
cricket
:
:
JsepTransport
*
GetJsepTransportByName
(
const
std
:
:
string
&
transport_name
)
const
;
cricket
:
:
JsepTransport
*
GetJsepTransportByName
(
const
std
:
:
string
&
transport_name
)
;
RTCError
MaybeCreateJsepTransport
(
bool
local
const
cricket
:
:
ContentInfo
&
content_info
const
cricket
:
:
SessionDescription
&
description
)
;
void
MaybeDestroyJsepTransport
(
const
std
:
:
string
&
mid
)
;
void
DestroyAllJsepTransports_n
(
)
;
void
SetIceRole_n
(
cricket
:
:
IceRole
ice_role
)
;
cricket
:
:
IceRole
DetermineIceRole
(
cricket
:
:
JsepTransport
*
jsep_transport
const
cricket
:
:
TransportInfo
&
transport_info
SdpType
type
bool
local
)
;
std
:
:
unique_ptr
<
cricket
:
:
DtlsTransportInternal
>
CreateDtlsTransport
(
const
cricket
:
:
ContentInfo
&
content_info
cricket
:
:
IceTransportInternal
*
ice
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
IceTransportInterface
>
CreateIceTransport
(
const
std
:
:
string
&
transport_name
bool
rtcp
)
;
std
:
:
unique_ptr
<
webrtc
:
:
RtpTransport
>
CreateUnencryptedRtpTransport
(
const
std
:
:
string
&
transport_name
rtc
:
:
PacketTransportInternal
*
rtp_packet_transport
rtc
:
:
PacketTransportInternal
*
rtcp_packet_transport
)
;
std
:
:
unique_ptr
<
webrtc
:
:
SrtpTransport
>
CreateSdesTransport
(
const
std
:
:
string
&
transport_name
cricket
:
:
DtlsTransportInternal
*
rtp_dtls_transport
cricket
:
:
DtlsTransportInternal
*
rtcp_dtls_transport
)
;
std
:
:
unique_ptr
<
webrtc
:
:
DtlsSrtpTransport
>
CreateDtlsSrtpTransport
(
const
std
:
:
string
&
transport_name
cricket
:
:
DtlsTransportInternal
*
rtp_dtls_transport
cricket
:
:
DtlsTransportInternal
*
rtcp_dtls_transport
)
;
std
:
:
vector
<
cricket
:
:
DtlsTransportInternal
*
>
GetDtlsTransports
(
)
;
void
OnTransportWritableState_n
(
rtc
:
:
PacketTransportInternal
*
transport
)
;
void
OnTransportReceivingState_n
(
rtc
:
:
PacketTransportInternal
*
transport
)
;
void
OnTransportGatheringState_n
(
cricket
:
:
IceTransportInternal
*
transport
)
;
void
OnTransportCandidateGathered_n
(
cricket
:
:
IceTransportInternal
*
transport
const
cricket
:
:
Candidate
&
candidate
)
;
void
OnTransportCandidateError_n
(
cricket
:
:
IceTransportInternal
*
transport
const
cricket
:
:
IceCandidateErrorEvent
&
event
)
;
void
OnTransportCandidatesRemoved_n
(
cricket
:
:
IceTransportInternal
*
transport
const
cricket
:
:
Candidates
&
candidates
)
;
void
OnTransportRoleConflict_n
(
cricket
:
:
IceTransportInternal
*
transport
)
;
void
OnTransportStateChanged_n
(
cricket
:
:
IceTransportInternal
*
transport
)
;
void
OnTransportCandidatePairChanged_n
(
const
cricket
:
:
CandidatePairChangeEvent
&
event
)
;
void
UpdateAggregateStates_n
(
)
;
void
OnRtcpPacketReceived_n
(
rtc
:
:
CopyOnWriteBuffer
*
packet
int64_t
packet_time_us
)
;
void
OnDtlsHandshakeError
(
rtc
:
:
SSLHandshakeError
error
)
;
rtc
:
:
Thread
*
const
signaling_thread_
=
nullptr
;
rtc
:
:
Thread
*
const
network_thread_
=
nullptr
;
cricket
:
:
PortAllocator
*
const
port_allocator_
=
nullptr
;
AsyncResolverFactory
*
const
async_resolver_factory_
=
nullptr
;
std
:
:
map
<
std
:
:
string
std
:
:
unique_ptr
<
cricket
:
:
JsepTransport
>
>
jsep_transports_by_name_
;
std
:
:
map
<
std
:
:
string
cricket
:
:
JsepTransport
*
>
mid_to_transport_
;
std
:
:
vector
<
std
:
:
string
>
pending_mids_
RTC_GUARDED_BY
(
network_thread_
)
;
cricket
:
:
IceConnectionState
ice_connection_state_
=
cricket
:
:
kIceConnectionConnecting
;
PeerConnectionInterface
:
:
IceConnectionState
standardized_ice_connection_state_
=
PeerConnectionInterface
:
:
kIceConnectionNew
;
PeerConnectionInterface
:
:
PeerConnectionState
combined_connection_state_
=
PeerConnectionInterface
:
:
PeerConnectionState
:
:
kNew
;
cricket
:
:
IceGatheringState
ice_gathering_state_
=
cricket
:
:
kIceGatheringNew
;
Config
config_
;
const
cricket
:
:
SessionDescription
*
local_desc_
=
nullptr
;
const
cricket
:
:
SessionDescription
*
remote_desc_
=
nullptr
;
absl
:
:
optional
<
bool
>
initial_offerer_
;
absl
:
:
optional
<
cricket
:
:
ContentGroup
>
bundle_group_
;
cricket
:
:
IceConfig
ice_config_
;
cricket
:
:
IceRole
ice_role_
=
cricket
:
:
ICEROLE_CONTROLLING
;
uint64_t
ice_tiebreaker_
=
rtc
:
:
CreateRandomId64
(
)
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
certificate_
;
rtc
:
:
AsyncInvoker
invoker_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
JsepTransportController
)
;
}
;
}
#
endif
