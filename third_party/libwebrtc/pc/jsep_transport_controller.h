#
ifndef
PC_JSEP_TRANSPORT_CONTROLLER_H_
#
define
PC_JSEP_TRANSPORT_CONTROLLER_H_
#
include
<
stdint
.
h
>
#
include
<
functional
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
async_dns_resolver
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
ice_transport_interface
.
h
"
#
include
"
api
/
jsep
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
transport
/
data_channel_transport_interface
.
h
"
#
include
"
api
/
transport
/
sctp_transport_factory_interface
.
h
"
#
include
"
call
/
payload_type
.
h
"
#
include
"
call
/
payload_type_picker
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
p2p
/
base
/
ice_transport_internal
.
h
"
#
include
"
p2p
/
base
/
p2p_transport_channel
.
h
"
#
include
"
p2p
/
base
/
packet_transport_internal
.
h
"
#
include
"
p2p
/
base
/
port
.
h
"
#
include
"
p2p
/
base
/
port_allocator
.
h
"
#
include
"
p2p
/
base
/
transport_description
.
h
"
#
include
"
p2p
/
base
/
transport_info
.
h
"
#
include
"
p2p
/
dtls
/
dtls_transport_factory
.
h
"
#
include
"
p2p
/
dtls
/
dtls_transport_internal
.
h
"
#
include
"
pc
/
dtls_srtp_transport
.
h
"
#
include
"
pc
/
dtls_transport
.
h
"
#
include
"
pc
/
jsep_transport
.
h
"
#
include
"
pc
/
jsep_transport_collection
.
h
"
#
include
"
pc
/
rtp_transport
.
h
"
#
include
"
pc
/
rtp_transport_internal
.
h
"
#
include
"
pc
/
sctp_transport
.
h
"
#
include
"
pc
/
session_description
.
h
"
#
include
"
pc
/
srtp_transport
.
h
"
#
include
"
pc
/
transport_stats
.
h
"
#
include
"
rtc_base
/
callback_list
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
rtc_base
/
rtc_certificate
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_stream_adapter
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
JsepTransportController
:
public
PayloadTypeSuggester
public
sigslot
:
:
has_slots
<
>
{
public
:
class
Observer
{
public
:
virtual
~
Observer
(
)
{
}
virtual
bool
OnTransportChanged
(
const
std
:
:
string
&
mid
RtpTransportInternal
*
rtp_transport
scoped_refptr
<
DtlsTransport
>
dtls_transport
DataChannelTransportInterface
*
data_channel_transport
)
=
0
;
}
;
struct
Config
{
bool
redetermine_role_on_ice_restart
=
true
;
SSLProtocolVersion
ssl_max_version
=
SSL_PROTOCOL_DTLS_12
;
CryptoOptions
crypto_options
;
PeerConnectionInterface
:
:
BundlePolicy
bundle_policy
=
PeerConnectionInterface
:
:
kBundlePolicyBalanced
;
PeerConnectionInterface
:
:
RtcpMuxPolicy
rtcp_mux_policy
=
PeerConnectionInterface
:
:
kRtcpMuxPolicyRequire
;
bool
disable_encryption
=
false
;
bool
enable_external_auth
=
false
;
IceTransportFactory
*
ice_transport_factory
=
nullptr
;
DtlsTransportFactory
*
dtls_transport_factory
=
nullptr
;
Observer
*
transport_observer
=
nullptr
;
absl
:
:
AnyInvocable
<
void
(
const
webrtc
:
:
CopyOnWriteBuffer
&
packet
int64_t
packet_time_us
)
const
>
rtcp_handler
;
absl
:
:
AnyInvocable
<
void
(
const
RtpPacketReceived
&
parsed_packet
)
const
>
un_demuxable_packet_handler
;
bool
active_reset_srtp_params
=
false
;
RtcEventLog
*
event_log
=
nullptr
;
SctpTransportFactoryInterface
*
sctp_factory
=
nullptr
;
std
:
:
function
<
void
(
webrtc
:
:
SSLHandshakeError
)
>
on_dtls_handshake_error_
;
}
;
JsepTransportController
(
const
Environment
&
env
Thread
*
network_thread
PortAllocator
*
port_allocator
AsyncDnsResolverFactoryInterface
*
async_dns_resolver_factory
PayloadTypePicker
&
payload_type_picker
Config
config
)
;
virtual
~
JsepTransportController
(
)
;
JsepTransportController
(
const
JsepTransportController
&
)
=
delete
;
JsepTransportController
&
operator
=
(
const
JsepTransportController
&
)
=
delete
;
RTCError
SetLocalDescription
(
SdpType
type
const
SessionDescription
*
local_desc
const
SessionDescription
*
remote_desc
)
;
RTCError
SetRemoteDescription
(
SdpType
type
const
SessionDescription
*
local_desc
const
SessionDescription
*
remote_desc
)
;
RtpTransportInternal
*
GetRtpTransport
(
absl
:
:
string_view
mid
)
const
;
DtlsTransportInternal
*
GetDtlsTransport
(
const
std
:
:
string
&
mid
)
;
const
DtlsTransportInternal
*
GetRtcpDtlsTransport
(
const
std
:
:
string
&
mid
)
const
;
scoped_refptr
<
DtlsTransport
>
LookupDtlsTransportByMid
(
const
std
:
:
string
&
mid
)
;
scoped_refptr
<
SctpTransport
>
GetSctpTransport
(
const
std
:
:
string
&
mid
)
const
;
DataChannelTransportInterface
*
GetDataChannelTransport
(
const
std
:
:
string
&
mid
)
const
;
void
SetIceConfig
(
const
IceConfig
&
config
)
;
void
SetNeedsIceRestartFlag
(
)
;
bool
NeedsIceRestart
(
const
std
:
:
string
&
mid
)
const
;
void
MaybeStartGathering
(
)
;
RTCError
AddRemoteCandidates
(
const
std
:
:
string
&
mid
const
std
:
:
vector
<
Candidate
>
&
candidates
)
;
RTCError
RemoveRemoteCandidates
(
const
std
:
:
vector
<
Candidate
>
&
candidates
)
;
bool
SetLocalCertificate
(
const
scoped_refptr
<
RTCCertificate
>
&
certificate
)
;
scoped_refptr
<
RTCCertificate
>
GetLocalCertificate
(
const
std
:
:
string
&
mid
)
const
;
std
:
:
unique_ptr
<
SSLCertChain
>
GetRemoteSSLCertChain
(
const
std
:
:
string
&
mid
)
const
;
std
:
:
optional
<
SSLRole
>
GetDtlsRole
(
const
std
:
:
string
&
mid
)
const
;
RTCErrorOr
<
PayloadType
>
SuggestPayloadType
(
const
std
:
:
string
&
mid
Codec
codec
)
override
;
RTCError
AddLocalMapping
(
const
std
:
:
string
&
mid
PayloadType
payload_type
const
Codec
&
codec
)
override
;
const
PayloadTypePicker
&
PayloadTypePickerForTesting
(
)
const
{
return
payload_type_picker_
;
}
bool
GetStats
(
const
std
:
:
string
&
mid
TransportStats
*
stats
)
const
;
bool
initial_offerer
(
)
const
{
return
initial_offerer_
&
&
*
initial_offerer_
;
}
void
SetActiveResetSrtpParams
(
bool
active_reset_srtp_params
)
;
RTCError
RollbackTransports
(
)
;
template
<
typename
F
>
void
SubscribeIceCandidateGathered
(
F
&
&
callback
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
signal_ice_candidates_gathered_
.
AddReceiver
(
std
:
:
forward
<
F
>
(
callback
)
)
;
}
template
<
typename
F
>
void
SubscribeIceConnectionState
(
F
&
&
callback
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
signal_ice_connection_state_
.
AddReceiver
(
std
:
:
forward
<
F
>
(
callback
)
)
;
}
template
<
typename
F
>
void
SubscribeConnectionState
(
F
&
&
callback
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
signal_connection_state_
.
AddReceiver
(
std
:
:
forward
<
F
>
(
callback
)
)
;
}
template
<
typename
F
>
void
SubscribeStandardizedIceConnectionState
(
F
&
&
callback
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
signal_standardized_ice_connection_state_
.
AddReceiver
(
std
:
:
forward
<
F
>
(
callback
)
)
;
}
template
<
typename
F
>
void
SubscribeIceGatheringState
(
F
&
&
callback
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
signal_ice_gathering_state_
.
AddReceiver
(
std
:
:
forward
<
F
>
(
callback
)
)
;
}
template
<
typename
F
>
void
SubscribeIceCandidateError
(
F
&
&
callback
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
signal_ice_candidate_error_
.
AddReceiver
(
std
:
:
forward
<
F
>
(
callback
)
)
;
}
template
<
typename
F
>
void
SubscribeIceCandidatesRemoved
(
F
&
&
callback
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
signal_ice_candidates_removed_
.
AddReceiver
(
std
:
:
forward
<
F
>
(
callback
)
)
;
}
template
<
typename
F
>
void
SubscribeIceCandidatePairChanged
(
F
&
&
callback
)
{
RTC_DCHECK_RUN_ON
(
network_thread_
)
;
signal_ice_candidate_pair_changed_
.
AddReceiver
(
std
:
:
forward
<
F
>
(
callback
)
)
;
}
private
:
CallbackList
<
IceConnectionState
>
signal_ice_connection_state_
RTC_GUARDED_BY
(
network_thread_
)
;
CallbackList
<
PeerConnectionInterface
:
:
PeerConnectionState
>
signal_connection_state_
RTC_GUARDED_BY
(
network_thread_
)
;
CallbackList
<
PeerConnectionInterface
:
:
IceConnectionState
>
signal_standardized_ice_connection_state_
RTC_GUARDED_BY
(
network_thread_
)
;
CallbackList
<
IceGatheringState
>
signal_ice_gathering_state_
RTC_GUARDED_BY
(
network_thread_
)
;
CallbackList
<
const
std
:
:
string
&
const
std
:
:
vector
<
Candidate
>
&
>
signal_ice_candidates_gathered_
RTC_GUARDED_BY
(
network_thread_
)
;
CallbackList
<
const
IceCandidateErrorEvent
&
>
signal_ice_candidate_error_
RTC_GUARDED_BY
(
network_thread_
)
;
CallbackList
<
const
std
:
:
vector
<
Candidate
>
&
>
signal_ice_candidates_removed_
RTC_GUARDED_BY
(
network_thread_
)
;
CallbackList
<
const
CandidatePairChangeEvent
&
>
signal_ice_candidate_pair_changed_
RTC_GUARDED_BY
(
network_thread_
)
;
RTCError
ApplyDescription_n
(
bool
local
SdpType
type
const
SessionDescription
*
local_desc
const
SessionDescription
*
remote_desc
)
RTC_RUN_ON
(
network_thread_
)
;
RTCError
ValidateAndMaybeUpdateBundleGroups
(
bool
local
SdpType
type
const
SessionDescription
*
local_desc
const
SessionDescription
*
remote_desc
)
RTC_RUN_ON
(
network_thread_
)
;
RTCError
ValidateContent
(
const
ContentInfo
&
content_info
)
;
void
HandleRejectedContent
(
const
ContentInfo
&
content_info
)
RTC_RUN_ON
(
network_thread_
)
;
bool
HandleBundledContent
(
const
ContentInfo
&
content_info
const
ContentGroup
&
bundle_group
)
RTC_RUN_ON
(
network_thread_
)
;
JsepTransportDescription
CreateJsepTransportDescription
(
const
ContentInfo
&
content_info
const
TransportInfo
&
transport_info
const
std
:
:
vector
<
int
>
&
encrypted_extension_ids
int
rtp_abs_sendtime_extn_id
)
;
std
:
:
map
<
const
ContentGroup
*
std
:
:
vector
<
int
>
>
MergeEncryptedHeaderExtensionIdsForBundles
(
const
SessionDescription
*
description
)
;
std
:
:
vector
<
int
>
GetEncryptedHeaderExtensionIds
(
const
ContentInfo
&
content_info
)
;
int
GetRtpAbsSendTimeHeaderExtensionId
(
const
ContentInfo
&
content_info
)
;
const
JsepTransport
*
GetJsepTransportForMid
(
const
std
:
:
string
&
mid
)
const
RTC_RUN_ON
(
network_thread_
)
;
JsepTransport
*
GetJsepTransportForMid
(
const
std
:
:
string
&
mid
)
RTC_RUN_ON
(
network_thread_
)
;
const
JsepTransport
*
GetJsepTransportForMid
(
absl
:
:
string_view
mid
)
const
RTC_RUN_ON
(
network_thread_
)
;
JsepTransport
*
GetJsepTransportForMid
(
absl
:
:
string_view
mid
)
RTC_RUN_ON
(
network_thread_
)
;
const
JsepTransport
*
GetJsepTransportByName
(
const
std
:
:
string
&
transport_name
)
const
RTC_RUN_ON
(
network_thread_
)
;
JsepTransport
*
GetJsepTransportByName
(
const
std
:
:
string
&
transport_name
)
RTC_RUN_ON
(
network_thread_
)
;
RTCError
MaybeCreateJsepTransport
(
bool
local
const
ContentInfo
&
content_info
const
SessionDescription
&
description
)
RTC_RUN_ON
(
network_thread_
)
;
void
DestroyAllJsepTransports_n
(
)
RTC_RUN_ON
(
network_thread_
)
;
void
SetIceRole_n
(
IceRole
ice_role
)
RTC_RUN_ON
(
network_thread_
)
;
IceRole
DetermineIceRole
(
JsepTransport
*
jsep_transport
const
TransportInfo
&
transport_info
SdpType
type
bool
local
)
;
std
:
:
unique_ptr
<
DtlsTransportInternal
>
CreateDtlsTransport
(
const
ContentInfo
&
content_info
IceTransportInternal
*
ice
)
;
scoped_refptr
<
IceTransportInterface
>
CreateIceTransport
(
const
std
:
:
string
&
transport_name
bool
rtcp
)
;
std
:
:
unique_ptr
<
RtpTransport
>
CreateUnencryptedRtpTransport
(
const
std
:
:
string
&
transport_name
PacketTransportInternal
*
rtp_packet_transport
PacketTransportInternal
*
rtcp_packet_transport
)
;
std
:
:
unique_ptr
<
SrtpTransport
>
CreateSdesTransport
(
const
std
:
:
string
&
transport_name
DtlsTransportInternal
*
rtp_dtls_transport
DtlsTransportInternal
*
rtcp_dtls_transport
)
;
std
:
:
unique_ptr
<
DtlsSrtpTransport
>
CreateDtlsSrtpTransport
(
const
std
:
:
string
&
transport_name
DtlsTransportInternal
*
rtp_dtls_transport
DtlsTransportInternal
*
rtcp_dtls_transport
)
;
std
:
:
vector
<
DtlsTransportInternal
*
>
GetDtlsTransports
(
)
;
std
:
:
vector
<
DtlsTransportInternal
*
>
GetActiveDtlsTransports
(
)
;
void
OnTransportWritableState_n
(
PacketTransportInternal
*
transport
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnTransportReceivingState_n
(
PacketTransportInternal
*
transport
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnTransportGatheringState_n
(
IceTransportInternal
*
transport
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnTransportCandidateGathered_n
(
IceTransportInternal
*
transport
const
Candidate
&
candidate
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnTransportCandidateError_n
(
IceTransportInternal
*
transport
const
IceCandidateErrorEvent
&
event
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnTransportCandidatesRemoved_n
(
IceTransportInternal
*
transport
const
Candidates
&
candidates
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnTransportRoleConflict_n
(
IceTransportInternal
*
transport
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnTransportStateChanged_n
(
IceTransportInternal
*
transport
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnTransportCandidatePairChanged_n
(
const
CandidatePairChangeEvent
&
event
)
RTC_RUN_ON
(
network_thread_
)
;
void
UpdateAggregateStates_n
(
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnRtcpPacketReceived_n
(
CopyOnWriteBuffer
*
packet
int64_t
packet_time_us
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnUnDemuxableRtpPacketReceived_n
(
const
RtpPacketReceived
&
packet
)
RTC_RUN_ON
(
network_thread_
)
;
void
OnDtlsHandshakeError
(
SSLHandshakeError
error
)
;
bool
OnTransportChanged
(
const
std
:
:
string
&
mid
JsepTransport
*
transport
)
;
const
Environment
env_
;
Thread
*
const
network_thread_
=
nullptr
;
PortAllocator
*
const
port_allocator_
=
nullptr
;
AsyncDnsResolverFactoryInterface
*
const
async_dns_resolver_factory_
=
nullptr
;
JsepTransportCollection
transports_
RTC_GUARDED_BY
(
network_thread_
)
;
IceConnectionState
ice_connection_state_
=
kIceConnectionConnecting
;
PeerConnectionInterface
:
:
IceConnectionState
standardized_ice_connection_state_
=
PeerConnectionInterface
:
:
kIceConnectionNew
;
PeerConnectionInterface
:
:
PeerConnectionState
combined_connection_state_
=
PeerConnectionInterface
:
:
PeerConnectionState
:
:
kNew
;
IceGatheringState
ice_gathering_state_
=
kIceGatheringNew
;
const
Config
config_
;
bool
active_reset_srtp_params_
RTC_GUARDED_BY
(
network_thread_
)
;
std
:
:
optional
<
bool
>
initial_offerer_
;
IceConfig
ice_config_
;
IceRole
ice_role_
=
ICEROLE_CONTROLLING
;
scoped_refptr
<
RTCCertificate
>
certificate_
;
BundleManager
bundles_
;
PayloadTypePicker
&
payload_type_picker_
;
}
;
}
#
endif
