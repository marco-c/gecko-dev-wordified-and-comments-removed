#
include
"
pc
/
test
/
integration_test_helpers
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
functional
/
any_invocable
.
h
"
#
include
"
api
/
audio
/
builtin_audio_processing_builder
.
h
"
#
include
"
api
/
enable_media_with_defaults
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
jsep
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log_factory
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
stats
/
rtcstats_objects
.
h
"
#
include
"
api
/
task_queue
/
default_task_queue_factory
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
logging
/
rtc_event_log
/
fake_rtc_event_log_factory
.
h
"
#
include
"
pc
/
peer_connection_factory
.
h
"
#
include
"
pc
/
test
/
fake_audio_capture_module
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
fake_network
.
h
"
#
include
"
rtc_base
/
socket_server
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
IceRestartOfferAnswerOptions
(
)
{
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
ice_restart
=
true
;
return
options
;
}
void
RemoveSsrcsAndMsids
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
&
sdp
)
{
for
(
ContentInfo
&
content
:
sdp
-
>
description
(
)
-
>
contents
(
)
)
{
content
.
media_description
(
)
-
>
mutable_streams
(
)
.
clear
(
)
;
}
sdp
-
>
description
(
)
-
>
set_msid_signaling
(
0
)
;
}
void
RemoveSsrcsAndKeepMsids
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
&
sdp
)
{
for
(
ContentInfo
&
content
:
sdp
-
>
description
(
)
-
>
contents
(
)
)
{
std
:
:
string
track_id
;
std
:
:
vector
<
std
:
:
string
>
stream_ids
;
if
(
!
content
.
media_description
(
)
-
>
streams
(
)
.
empty
(
)
)
{
const
StreamParams
&
first_stream
=
content
.
media_description
(
)
-
>
streams
(
)
[
0
]
;
track_id
=
first_stream
.
id
;
stream_ids
=
first_stream
.
stream_ids
(
)
;
}
content
.
media_description
(
)
-
>
mutable_streams
(
)
.
clear
(
)
;
StreamParams
new_stream
;
new_stream
.
id
=
track_id
;
new_stream
.
set_stream_ids
(
stream_ids
)
;
content
.
media_description
(
)
-
>
AddStream
(
new_stream
)
;
}
}
void
SetSdpType
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
&
sdp
SdpType
sdpType
)
{
std
:
:
string
str
;
sdp
-
>
ToString
(
&
str
)
;
sdp
=
CreateSessionDescription
(
sdpType
str
)
;
}
int
FindFirstMediaStatsIndexByKind
(
const
std
:
:
string
&
kind
const
std
:
:
vector
<
const
RTCInboundRtpStreamStats
*
>
&
inbound_rtps
)
{
for
(
size_t
i
=
0
;
i
<
inbound_rtps
.
size
(
)
;
i
+
+
)
{
if
(
*
inbound_rtps
[
i
]
-
>
kind
=
=
kind
)
{
return
i
;
}
}
return
-
1
;
}
void
ReplaceFirstSsrc
(
StreamParams
&
stream
uint32_t
ssrc
)
{
stream
.
ssrcs
[
0
]
=
ssrc
;
for
(
auto
&
group
:
stream
.
ssrc_groups
)
{
group
.
ssrcs
[
0
]
=
ssrc
;
}
}
TaskQueueMetronome
:
:
TaskQueueMetronome
(
TimeDelta
tick_period
)
:
tick_period_
(
tick_period
)
{
}
TaskQueueMetronome
:
:
~
TaskQueueMetronome
(
)
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
}
void
TaskQueueMetronome
:
:
RequestCallOnNextTick
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
callback
)
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
callbacks_
.
push_back
(
std
:
:
move
(
callback
)
)
;
if
(
callbacks_
.
size
(
)
=
=
1
)
{
TaskQueueBase
:
:
Current
(
)
-
>
PostDelayedTask
(
SafeTask
(
safety_
.
flag
(
)
[
this
]
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
std
:
:
vector
<
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
>
callbacks
;
callbacks_
.
swap
(
callbacks
)
;
for
(
auto
&
callback
:
callbacks
)
std
:
:
move
(
callback
)
(
)
;
}
)
tick_period_
)
;
}
}
TimeDelta
TaskQueueMetronome
:
:
TickPeriod
(
)
const
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
return
tick_period_
;
}
void
PeerConnectionIntegrationWrapper
:
:
StartWatchingDelayStats
(
)
{
auto
received_stats
=
NewGetStats
(
)
;
auto
rtp_stats
=
received_stats
-
>
GetStatsOfType
<
RTCInboundRtpStreamStats
>
(
)
[
0
]
;
ASSERT_TRUE
(
rtp_stats
-
>
relative_packet_arrival_delay
.
has_value
(
)
)
;
ASSERT_TRUE
(
rtp_stats
-
>
packets_received
.
has_value
(
)
)
;
rtp_stats_id_
=
rtp_stats
-
>
id
(
)
;
audio_packets_stat_
=
*
rtp_stats
-
>
packets_received
;
audio_delay_stat_
=
*
rtp_stats
-
>
relative_packet_arrival_delay
;
audio_samples_stat_
=
*
rtp_stats
-
>
total_samples_received
;
audio_concealed_stat_
=
*
rtp_stats
-
>
concealed_samples
;
}
void
PeerConnectionIntegrationWrapper
:
:
UpdateDelayStats
(
std
:
:
string
tag
int
desc_size
)
{
auto
report
=
NewGetStats
(
)
;
auto
rtp_stats
=
report
-
>
GetAs
<
RTCInboundRtpStreamStats
>
(
rtp_stats_id_
)
;
ASSERT_TRUE
(
rtp_stats
)
;
auto
delta_packets
=
*
rtp_stats
-
>
packets_received
-
audio_packets_stat_
;
auto
delta_rpad
=
*
rtp_stats
-
>
relative_packet_arrival_delay
-
audio_delay_stat_
;
auto
recent_delay
=
delta_packets
>
0
?
delta_rpad
/
delta_packets
:
-
1
;
#
if
!
defined
(
NDEBUG
)
EXPECT_GT
(
0
.
25
recent_delay
)
<
<
tag
<
<
"
size
"
<
<
desc_size
;
#
else
EXPECT_GT
(
0
.
1
recent_delay
)
<
<
tag
<
<
"
size
"
<
<
desc_size
;
#
endif
auto
delta_samples
=
*
rtp_stats
-
>
total_samples_received
-
audio_samples_stat_
;
auto
delta_concealed
=
*
rtp_stats
-
>
concealed_samples
-
audio_concealed_stat_
;
#
if
!
defined
(
NDEBUG
)
EXPECT_GT
(
18000U
delta_concealed
)
<
<
"
Concealed
"
<
<
delta_concealed
<
<
"
of
"
<
<
delta_samples
<
<
"
samples
"
;
#
else
EXPECT_GT
(
15000U
delta_concealed
)
<
<
"
Concealed
"
<
<
delta_concealed
<
<
"
of
"
<
<
delta_samples
<
<
"
samples
"
;
#
endif
if
(
delta_samples
>
0
)
{
#
if
!
defined
(
NDEBUG
)
EXPECT_LT
(
1
.
0
*
delta_concealed
/
delta_samples
0
.
99
)
<
<
"
Concealed
"
<
<
delta_concealed
<
<
"
of
"
<
<
delta_samples
<
<
"
samples
"
;
#
else
EXPECT_LT
(
1
.
0
*
delta_concealed
/
delta_samples
0
.
7
)
<
<
"
Concealed
"
<
<
delta_concealed
<
<
"
of
"
<
<
delta_samples
<
<
"
samples
"
;
#
endif
}
audio_packets_stat_
=
*
rtp_stats
-
>
packets_received
;
audio_delay_stat_
=
*
rtp_stats
-
>
relative_packet_arrival_delay
;
audio_samples_stat_
=
*
rtp_stats
-
>
total_samples_received
;
audio_concealed_stat_
=
*
rtp_stats
-
>
concealed_samples
;
}
bool
PeerConnectionIntegrationWrapper
:
:
Init
(
const
PeerConnectionFactory
:
:
Options
*
options
const
PeerConnectionInterface
:
:
RTCConfiguration
*
config
PeerConnectionDependencies
dependencies
SocketServer
*
socket_server
Thread
*
network_thread
Thread
*
worker_thread
std
:
:
unique_ptr
<
FieldTrialsView
>
field_trials
std
:
:
unique_ptr
<
FakeRtcEventLogFactory
>
event_log_factory
bool
reset_encoder_factory
bool
reset_decoder_factory
bool
create_media_engine
)
{
RTC_DCHECK
(
!
peer_connection_
)
;
RTC_DCHECK
(
!
peer_connection_factory_
)
;
auto
network_manager
=
std
:
:
make_unique
<
FakeNetworkManager
>
(
)
;
fake_network_manager_
=
network_manager
.
get
(
)
;
fake_network_manager_
-
>
AddInterface
(
kDefaultLocalAddress
)
;
network_thread_
=
network_thread
;
fake_audio_capture_module_
=
FakeAudioCaptureModule
:
:
Create
(
)
;
if
(
!
fake_audio_capture_module_
)
{
return
false
;
}
Thread
*
const
signaling_thread
=
Thread
:
:
Current
(
)
;
PeerConnectionFactoryDependencies
pc_factory_dependencies
;
pc_factory_dependencies
.
network_thread
=
network_thread
;
pc_factory_dependencies
.
worker_thread
=
worker_thread
;
pc_factory_dependencies
.
signaling_thread
=
signaling_thread
;
pc_factory_dependencies
.
socket_factory
=
socket_server
;
pc_factory_dependencies
.
network_manager
=
std
:
:
move
(
network_manager
)
;
pc_factory_dependencies
.
task_queue_factory
=
CreateDefaultTaskQueueFactory
(
)
;
pc_factory_dependencies
.
trials
=
std
:
:
move
(
field_trials
)
;
pc_factory_dependencies
.
decode_metronome
=
std
:
:
make_unique
<
TaskQueueMetronome
>
(
TimeDelta
:
:
Millis
(
8
)
)
;
pc_factory_dependencies
.
adm
=
fake_audio_capture_module_
;
if
(
create_media_engine
)
{
pc_factory_dependencies
.
audio_processing_builder
=
std
:
:
make_unique
<
BuiltinAudioProcessingBuilder
>
(
)
;
EnableMediaWithDefaults
(
pc_factory_dependencies
)
;
}
if
(
reset_encoder_factory
)
{
pc_factory_dependencies
.
video_encoder_factory
.
reset
(
)
;
}
if
(
reset_decoder_factory
)
{
pc_factory_dependencies
.
video_decoder_factory
.
reset
(
)
;
}
if
(
event_log_factory
)
{
event_log_factory_
=
event_log_factory
.
get
(
)
;
pc_factory_dependencies
.
event_log_factory
=
std
:
:
move
(
event_log_factory
)
;
}
else
{
pc_factory_dependencies
.
event_log_factory
=
std
:
:
make_unique
<
RtcEventLogFactory
>
(
)
;
}
peer_connection_factory_
=
CreateModularPeerConnectionFactory
(
std
:
:
move
(
pc_factory_dependencies
)
)
;
if
(
!
peer_connection_factory_
)
{
fake_network_manager_
=
nullptr
;
return
false
;
}
if
(
options
)
{
peer_connection_factory_
-
>
SetOptions
(
*
options
)
;
}
if
(
config
)
{
sdp_semantics_
=
config
-
>
sdp_semantics
;
}
peer_connection_
=
CreatePeerConnection
(
config
std
:
:
move
(
dependencies
)
)
;
return
peer_connection_
.
get
(
)
!
=
nullptr
;
}
}
