#
ifndef
PC_TEST_MOCK_CHANNEL_INTERFACE_H_
#
define
PC_TEST_MOCK_CHANNEL_INTERFACE_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
pc
/
channel_interface
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
cricket
{
class
MockChannelInterface
:
public
cricket
:
:
ChannelInterface
{
public
:
MOCK_METHOD
(
cricket
:
:
MediaType
media_type
(
)
(
const
override
)
)
;
MOCK_METHOD
(
MediaChannel
*
media_channel
(
)
(
const
override
)
)
;
MOCK_METHOD
(
MediaChannel
*
media_send_channel
(
)
(
const
override
)
)
;
MOCK_METHOD
(
VoiceMediaChannel
*
voice_media_send_channel
(
)
(
const
override
)
)
;
MOCK_METHOD
(
VideoMediaChannel
*
video_media_send_channel
(
)
(
const
override
)
)
;
MOCK_METHOD
(
MediaChannel
*
media_receive_channel
(
)
(
const
override
)
)
;
MOCK_METHOD
(
VoiceMediaChannel
*
voice_media_receive_channel
(
)
(
const
override
)
)
;
MOCK_METHOD
(
VideoMediaChannel
*
video_media_receive_channel
(
)
(
const
override
)
)
;
MOCK_METHOD
(
absl
:
:
string_view
transport_name
(
)
(
const
override
)
)
;
MOCK_METHOD
(
const
std
:
:
string
&
mid
(
)
(
const
override
)
)
;
MOCK_METHOD
(
void
Enable
(
bool
)
(
override
)
)
;
MOCK_METHOD
(
void
SetFirstPacketReceivedCallback
(
std
:
:
function
<
void
(
)
>
)
(
override
)
)
;
MOCK_METHOD
(
bool
SetLocalContent
(
const
cricket
:
:
MediaContentDescription
*
webrtc
:
:
SdpType
std
:
:
string
&
)
(
override
)
)
;
MOCK_METHOD
(
bool
SetRemoteContent
(
const
cricket
:
:
MediaContentDescription
*
webrtc
:
:
SdpType
std
:
:
string
&
)
(
override
)
)
;
MOCK_METHOD
(
bool
SetPayloadTypeDemuxingEnabled
(
bool
)
(
override
)
)
;
MOCK_METHOD
(
const
std
:
:
vector
<
StreamParams
>
&
local_streams
(
)
(
const
override
)
)
;
MOCK_METHOD
(
const
std
:
:
vector
<
StreamParams
>
&
remote_streams
(
)
(
const
override
)
)
;
MOCK_METHOD
(
bool
SetRtpTransport
(
webrtc
:
:
RtpTransportInternal
*
)
(
override
)
)
;
}
;
}
#
endif
