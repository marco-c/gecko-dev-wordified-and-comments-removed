#
ifndef
PC_REMOTE_AUDIO_SOURCE_H_
#
define
PC_REMOTE_AUDIO_SOURCE_H_
#
include
<
stdint
.
h
>
#
include
<
list
>
#
include
<
string
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
call
/
audio_sink
.
h
"
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
notifier
.
h
"
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
pc
/
channel
.
h
"
#
include
"
rtc_base
/
message_handler
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_message
.
h
"
namespace
rtc
{
struct
Message
;
class
Thread
;
}
namespace
webrtc
{
class
RemoteAudioSource
:
public
Notifier
<
AudioSourceInterface
>
rtc
:
:
MessageHandler
{
public
:
explicit
RemoteAudioSource
(
rtc
:
:
Thread
*
worker_thread
)
;
void
Start
(
cricket
:
:
VoiceMediaChannel
*
media_channel
absl
:
:
optional
<
uint32_t
>
ssrc
)
;
void
Stop
(
cricket
:
:
VoiceMediaChannel
*
media_channel
absl
:
:
optional
<
uint32_t
>
ssrc
)
;
MediaSourceInterface
:
:
SourceState
state
(
)
const
override
;
bool
remote
(
)
const
override
;
void
SetVolume
(
double
volume
)
override
;
void
RegisterAudioObserver
(
AudioObserver
*
observer
)
override
;
void
UnregisterAudioObserver
(
AudioObserver
*
observer
)
override
;
void
AddSink
(
AudioTrackSinkInterface
*
sink
)
override
;
void
RemoveSink
(
AudioTrackSinkInterface
*
sink
)
override
;
protected
:
~
RemoteAudioSource
(
)
override
;
private
:
class
AudioDataProxy
;
void
OnData
(
const
AudioSinkInterface
:
:
Data
&
audio
)
;
void
OnAudioChannelGone
(
)
;
void
OnMessage
(
rtc
:
:
Message
*
msg
)
override
;
rtc
:
:
Thread
*
const
main_thread_
;
rtc
:
:
Thread
*
const
worker_thread_
;
std
:
:
list
<
AudioObserver
*
>
audio_observers_
;
Mutex
sink_lock_
;
std
:
:
list
<
AudioTrackSinkInterface
*
>
sinks_
;
SourceState
state_
;
}
;
}
#
endif
