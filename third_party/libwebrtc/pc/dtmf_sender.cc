#
include
"
pc
/
dtmf_sender
.
h
"
#
include
<
ctype
.
h
>
#
include
<
string
.
h
>
#
include
<
string
>
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
ref_counted_object
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
static
const
int
kDtmfCommaDelay
=
-
1
;
static
const
char
kDtmfValidTones
[
]
=
"
0123456789
*
#
ABCDabcd
"
;
static
const
char
kDtmfTonesTable
[
]
=
"
0123456789
*
#
ABCD
"
;
static
const
int
kDtmfDefaultDurationMs
=
100
;
static
const
int
kDtmfMinDurationMs
=
40
;
static
const
int
kDtmfMaxDurationMs
=
6000
;
static
const
int
kDtmfDefaultGapMs
=
50
;
static
const
int
kDtmfMinGapMs
=
30
;
bool
GetDtmfCode
(
char
tone
int
*
code
)
{
char
event
=
toupper
(
tone
)
;
const
char
*
p
=
strchr
(
kDtmfTonesTable
event
)
;
if
(
!
p
)
{
return
false
;
}
*
code
=
p
-
kDtmfTonesTable
-
1
;
return
true
;
}
rtc
:
:
scoped_refptr
<
DtmfSender
>
DtmfSender
:
:
Create
(
rtc
:
:
Thread
*
signaling_thread
DtmfProviderInterface
*
provider
)
{
if
(
!
signaling_thread
)
{
return
nullptr
;
}
rtc
:
:
scoped_refptr
<
DtmfSender
>
dtmf_sender
(
new
rtc
:
:
RefCountedObject
<
DtmfSender
>
(
signaling_thread
provider
)
)
;
return
dtmf_sender
;
}
DtmfSender
:
:
DtmfSender
(
rtc
:
:
Thread
*
signaling_thread
DtmfProviderInterface
*
provider
)
:
observer_
(
nullptr
)
signaling_thread_
(
signaling_thread
)
provider_
(
provider
)
duration_
(
kDtmfDefaultDurationMs
)
inter_tone_gap_
(
kDtmfDefaultGapMs
)
comma_delay_
(
kDtmfDefaultCommaDelayMs
)
{
RTC_DCHECK
(
signaling_thread_
)
;
if
(
provider_
)
{
RTC_DCHECK
(
provider_
-
>
GetOnDestroyedSignal
(
)
)
;
provider_
-
>
GetOnDestroyedSignal
(
)
-
>
connect
(
this
&
DtmfSender
:
:
OnProviderDestroyed
)
;
}
}
DtmfSender
:
:
~
DtmfSender
(
)
{
StopSending
(
)
;
}
void
DtmfSender
:
:
RegisterObserver
(
DtmfSenderObserverInterface
*
observer
)
{
observer_
=
observer
;
}
void
DtmfSender
:
:
UnregisterObserver
(
)
{
observer_
=
nullptr
;
}
bool
DtmfSender
:
:
CanInsertDtmf
(
)
{
RTC_DCHECK
(
signaling_thread_
-
>
IsCurrent
(
)
)
;
if
(
!
provider_
)
{
return
false
;
}
return
provider_
-
>
CanInsertDtmf
(
)
;
}
bool
DtmfSender
:
:
InsertDtmf
(
const
std
:
:
string
&
tones
int
duration
int
inter_tone_gap
int
comma_delay
)
{
RTC_DCHECK
(
signaling_thread_
-
>
IsCurrent
(
)
)
;
if
(
duration
>
kDtmfMaxDurationMs
|
|
duration
<
kDtmfMinDurationMs
|
|
inter_tone_gap
<
kDtmfMinGapMs
|
|
comma_delay
<
kDtmfMinGapMs
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
InsertDtmf
is
called
with
invalid
duration
or
tones
gap
.
"
"
The
duration
cannot
be
more
than
"
<
<
kDtmfMaxDurationMs
<
<
"
ms
or
less
than
"
<
<
kDtmfMinDurationMs
<
<
"
ms
.
The
gap
between
tones
must
be
at
least
"
<
<
kDtmfMinGapMs
<
<
"
ms
.
"
;
return
false
;
}
if
(
!
CanInsertDtmf
(
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
InsertDtmf
is
called
on
DtmfSender
that
can
'
t
send
DTMF
.
"
;
return
false
;
}
tones_
=
tones
;
duration_
=
duration
;
inter_tone_gap_
=
inter_tone_gap
;
comma_delay_
=
comma_delay
;
dtmf_driver_
.
Clear
(
)
;
QueueInsertDtmf
(
RTC_FROM_HERE
1
)
;
return
true
;
}
std
:
:
string
DtmfSender
:
:
tones
(
)
const
{
return
tones_
;
}
int
DtmfSender
:
:
duration
(
)
const
{
return
duration_
;
}
int
DtmfSender
:
:
inter_tone_gap
(
)
const
{
return
inter_tone_gap_
;
}
int
DtmfSender
:
:
comma_delay
(
)
const
{
return
comma_delay_
;
}
void
DtmfSender
:
:
QueueInsertDtmf
(
const
rtc
:
:
Location
&
posted_from
uint32_t
delay_ms
)
{
dtmf_driver_
.
AsyncInvokeDelayed
<
void
>
(
posted_from
signaling_thread_
[
this
]
{
DoInsertDtmf
(
)
;
}
delay_ms
)
;
}
void
DtmfSender
:
:
DoInsertDtmf
(
)
{
RTC_DCHECK
(
signaling_thread_
-
>
IsCurrent
(
)
)
;
size_t
first_tone_pos
=
tones_
.
find_first_of
(
kDtmfValidTones
)
;
int
code
=
0
;
if
(
first_tone_pos
=
=
std
:
:
string
:
:
npos
)
{
tones_
.
clear
(
)
;
if
(
observer_
)
{
observer_
-
>
OnToneChange
(
std
:
:
string
(
)
tones_
)
;
observer_
-
>
OnToneChange
(
std
:
:
string
(
)
)
;
}
return
;
}
else
{
char
tone
=
tones_
[
first_tone_pos
]
;
if
(
!
GetDtmfCode
(
tone
&
code
)
)
{
RTC_NOTREACHED
(
)
;
}
}
int
tone_gap
=
inter_tone_gap_
;
if
(
code
=
=
kDtmfCommaDelay
)
{
tone_gap
=
comma_delay_
;
}
else
{
if
(
!
provider_
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
The
DtmfProvider
has
been
destroyed
.
"
;
return
;
}
if
(
!
provider_
-
>
InsertDtmf
(
code
duration_
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
The
DtmfProvider
can
no
longer
send
DTMF
.
"
;
return
;
}
tone_gap
+
=
duration_
;
}
if
(
observer_
)
{
observer_
-
>
OnToneChange
(
tones_
.
substr
(
first_tone_pos
1
)
tones_
.
substr
(
first_tone_pos
+
1
)
)
;
observer_
-
>
OnToneChange
(
tones_
.
substr
(
first_tone_pos
1
)
)
;
}
tones_
.
erase
(
0
first_tone_pos
+
1
)
;
QueueInsertDtmf
(
RTC_FROM_HERE
tone_gap
)
;
}
void
DtmfSender
:
:
OnProviderDestroyed
(
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
The
Dtmf
provider
is
deleted
.
Clear
the
sending
queue
.
"
;
StopSending
(
)
;
provider_
=
nullptr
;
}
void
DtmfSender
:
:
StopSending
(
)
{
dtmf_driver_
.
Clear
(
)
;
}
}
