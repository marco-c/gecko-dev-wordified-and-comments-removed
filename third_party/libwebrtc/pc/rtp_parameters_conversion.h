#
ifndef
PC_RTP_PARAMETERS_CONVERSION_H_
#
define
PC_RTP_PARAMETERS_CONVERSION_H_
#
include
<
iosfwd
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
stream_params
.
h
"
#
include
"
pc
/
session_description
.
h
"
namespace
webrtc
{
RTCErrorOr
<
cricket
:
:
FeedbackParam
>
ToCricketFeedbackParam
(
const
RtcpFeedback
&
feedback
)
;
template
<
typename
C
>
RTCErrorOr
<
C
>
ToCricketCodec
(
const
RtpCodecParameters
&
codec
)
;
template
<
typename
C
>
RTCErrorOr
<
std
:
:
vector
<
C
>
>
ToCricketCodecs
(
const
std
:
:
vector
<
RtpCodecParameters
>
&
codecs
)
;
RTCErrorOr
<
cricket
:
:
StreamParamsVec
>
ToCricketStreamParamsVec
(
const
std
:
:
vector
<
RtpEncodingParameters
>
&
encodings
)
;
absl
:
:
optional
<
RtcpFeedback
>
ToRtcpFeedback
(
const
cricket
:
:
FeedbackParam
&
cricket_feedback
)
;
std
:
:
vector
<
RtpEncodingParameters
>
ToRtpEncodings
(
const
cricket
:
:
StreamParamsVec
&
stream_params
)
;
template
<
typename
C
>
RtpCodecParameters
ToRtpCodecParameters
(
const
C
&
cricket_codec
)
;
template
<
typename
C
>
RtpCodecCapability
ToRtpCodecCapability
(
const
C
&
cricket_codec
)
;
template
<
class
C
>
RtpCapabilities
ToRtpCapabilities
(
const
std
:
:
vector
<
C
>
&
cricket_codecs
const
cricket
:
:
RtpHeaderExtensions
&
cricket_extensions
)
;
template
<
class
C
>
RtpParameters
ToRtpParameters
(
const
std
:
:
vector
<
C
>
&
cricket_codecs
const
cricket
:
:
RtpHeaderExtensions
&
cricket_extensions
const
cricket
:
:
StreamParamsVec
&
stream_params
)
;
}
#
endif
