#
ifndef
PC_SCTP_UTILS_H_
#
define
PC_SCTP_UTILS_H_
#
include
<
string
>
#
include
"
api
/
data_channel_interface
.
h
"
#
include
"
api
/
priority
.
h
"
#
include
"
api
/
transport
/
data_channel_transport_interface
.
h
"
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
media
/
sctp
/
sctp_transport_internal
.
h
"
#
include
"
net
/
dcsctp
/
public
/
types
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
rtc_base
/
ssl_stream_adapter
.
h
"
namespace
webrtc
{
class
CopyOnWriteBuffer
;
struct
DataChannelInit
;
class
StreamId
{
public
:
StreamId
(
)
=
default
;
explicit
StreamId
(
uint16_t
id
)
:
id_
(
id
)
{
}
StreamId
(
const
StreamId
&
sid
)
=
default
;
StreamId
&
operator
=
(
const
StreamId
&
sid
)
=
default
;
int
stream_id_int
(
)
const
{
return
static_cast
<
int
>
(
id_
.
value
(
)
)
;
}
bool
operator
=
=
(
const
StreamId
&
sid
)
const
{
return
id_
=
=
sid
.
id_
;
}
bool
operator
<
(
const
StreamId
&
sid
)
const
{
return
id_
<
sid
.
id_
;
}
bool
operator
!
=
(
const
StreamId
&
sid
)
const
{
return
!
(
operator
=
=
(
sid
)
)
;
}
private
:
dcsctp
:
:
StreamID
id_
;
}
;
bool
IsOpenMessage
(
const
CopyOnWriteBuffer
&
payload
)
;
bool
ParseDataChannelOpenMessage
(
const
CopyOnWriteBuffer
&
payload
std
:
:
string
*
label
DataChannelInit
*
config
)
;
bool
ParseDataChannelOpenAckMessage
(
const
CopyOnWriteBuffer
&
payload
)
;
bool
WriteDataChannelOpenMessage
(
const
std
:
:
string
&
label
const
std
:
:
string
&
protocol
std
:
:
optional
<
PriorityValue
>
priority
bool
ordered
std
:
:
optional
<
int
>
max_retransmits
std
:
:
optional
<
int
>
max_retransmit_time
CopyOnWriteBuffer
*
payload
)
;
bool
WriteDataChannelOpenMessage
(
const
std
:
:
string
&
label
const
DataChannelInit
&
config
CopyOnWriteBuffer
*
payload
)
;
void
WriteDataChannelOpenAckMessage
(
CopyOnWriteBuffer
*
payload
)
;
}
#
endif
