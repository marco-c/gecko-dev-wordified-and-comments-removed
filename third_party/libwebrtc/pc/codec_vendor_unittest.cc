#
include
"
pc
/
codec_vendor
.
h
"
#
include
<
stddef
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
call
/
payload_type
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
codec_list
.
h
"
#
include
"
media
/
base
/
media_constants
.
h
"
#
include
"
media
/
base
/
test_utils
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
cricket
{
namespace
{
Codec
CreateRedAudioCodec
(
absl
:
:
string_view
encoding_id
)
{
Codec
red
=
CreateAudioCodec
(
63
"
red
"
48000
2
)
;
red
.
SetParam
(
kCodecParamNotInNameValueFormat
std
:
:
string
(
encoding_id
)
+
'
/
'
+
std
:
:
string
(
encoding_id
)
)
;
return
red
;
}
const
Codec
kAudioCodecs1
[
]
=
{
CreateAudioCodec
(
111
"
opus
"
48000
2
)
CreateRedAudioCodec
(
"
111
"
)
CreateAudioCodec
(
102
"
iLBC
"
8000
1
)
CreateAudioCodec
(
0
"
PCMU
"
8000
1
)
CreateAudioCodec
(
8
"
PCMA
"
8000
1
)
CreateAudioCodec
(
107
"
CN
"
48000
1
)
}
;
const
Codec
kAudioCodecs2
[
]
=
{
CreateAudioCodec
(
126
"
foo
"
16000
1
)
CreateAudioCodec
(
0
"
PCMU
"
8000
1
)
CreateAudioCodec
(
127
"
iLBC
"
8000
1
)
}
;
const
Codec
kAudioCodecsAnswer
[
]
=
{
CreateAudioCodec
(
102
"
iLBC
"
8000
1
)
CreateAudioCodec
(
0
"
PCMU
"
8000
1
)
}
;
TEST
(
CodecVendorTest
TestSetAudioCodecs
)
{
CodecVendor
codec_vendor
(
nullptr
false
)
;
std
:
:
vector
<
Codec
>
send_codecs
=
MAKE_VECTOR
(
kAudioCodecs1
)
;
std
:
:
vector
<
Codec
>
recv_codecs
=
MAKE_VECTOR
(
kAudioCodecs2
)
;
const
std
:
:
vector
<
Codec
>
sendrecv_codecs
=
MAKE_VECTOR
(
kAudioCodecsAnswer
)
;
CodecList
no_codecs
;
RTC_CHECK_EQ
(
send_codecs
[
2
]
.
name
"
iLBC
"
)
<
<
"
Please
don
'
t
change
shared
test
data
!
"
;
RTC_CHECK_EQ
(
recv_codecs
[
2
]
.
name
"
iLBC
"
)
<
<
"
Please
don
'
t
change
shared
test
data
!
"
;
send_codecs
[
2
]
.
channels
=
0
;
recv_codecs
[
2
]
.
name
=
"
ilbc
"
;
codec_vendor
.
set_audio_codecs
(
CodecList
:
:
CreateFromTrustedData
(
send_codecs
)
CodecList
:
:
CreateFromTrustedData
(
recv_codecs
)
)
;
EXPECT_EQ
(
send_codecs
codec_vendor
.
audio_send_codecs
(
)
.
codecs
(
)
)
;
EXPECT_EQ
(
recv_codecs
codec_vendor
.
audio_recv_codecs
(
)
.
codecs
(
)
)
;
EXPECT_EQ
(
sendrecv_codecs
codec_vendor
.
audio_sendrecv_codecs
(
)
.
codecs
(
)
)
;
codec_vendor
.
set_audio_codecs
(
no_codecs
CodecList
:
:
CreateFromTrustedData
(
recv_codecs
)
)
;
EXPECT_EQ
(
no_codecs
.
codecs
(
)
codec_vendor
.
audio_send_codecs
(
)
.
codecs
(
)
)
;
EXPECT_EQ
(
recv_codecs
codec_vendor
.
audio_recv_codecs
(
)
.
codecs
(
)
)
;
EXPECT_EQ
(
no_codecs
.
codecs
(
)
codec_vendor
.
audio_sendrecv_codecs
(
)
.
codecs
(
)
)
;
codec_vendor
.
set_audio_codecs
(
CodecList
:
:
CreateFromTrustedData
(
send_codecs
)
no_codecs
)
;
EXPECT_EQ
(
send_codecs
codec_vendor
.
audio_send_codecs
(
)
.
codecs
(
)
)
;
EXPECT_EQ
(
no_codecs
.
codecs
(
)
codec_vendor
.
audio_recv_codecs
(
)
.
codecs
(
)
)
;
EXPECT_EQ
(
no_codecs
.
codecs
(
)
codec_vendor
.
audio_sendrecv_codecs
(
)
.
codecs
(
)
)
;
codec_vendor
.
set_audio_codecs
(
no_codecs
no_codecs
)
;
EXPECT_EQ
(
no_codecs
codec_vendor
.
audio_send_codecs
(
)
)
;
EXPECT_EQ
(
no_codecs
codec_vendor
.
audio_recv_codecs
(
)
)
;
EXPECT_EQ
(
no_codecs
codec_vendor
.
audio_sendrecv_codecs
(
)
)
;
}
}
}
