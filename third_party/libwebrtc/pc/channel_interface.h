#
ifndef
PC_CHANNEL_INTERFACE_H_
#
define
PC_CHANNEL_INTERFACE_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
jsep
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
pc
/
rtp_transport_internal
.
h
"
namespace
cricket
{
class
MediaContentDescription
;
class
ChannelInterface
{
public
:
virtual
cricket
:
:
MediaType
media_type
(
)
const
=
0
;
virtual
MediaChannel
*
media_channel
(
)
const
=
0
;
virtual
absl
:
:
string_view
transport_name
(
)
const
=
0
;
virtual
const
std
:
:
string
&
content_name
(
)
const
=
0
;
virtual
void
Enable
(
bool
enable
)
=
0
;
virtual
void
SetFirstPacketReceivedCallback
(
std
:
:
function
<
void
(
)
>
callback
)
=
0
;
virtual
bool
SetLocalContent
(
const
MediaContentDescription
*
content
webrtc
:
:
SdpType
type
std
:
:
string
&
error_desc
)
=
0
;
virtual
bool
SetRemoteContent
(
const
MediaContentDescription
*
content
webrtc
:
:
SdpType
type
std
:
:
string
&
error_desc
)
=
0
;
virtual
bool
SetPayloadTypeDemuxingEnabled
(
bool
enabled
)
=
0
;
virtual
const
std
:
:
vector
<
StreamParams
>
&
local_streams
(
)
const
=
0
;
virtual
const
std
:
:
vector
<
StreamParams
>
&
remote_streams
(
)
const
=
0
;
virtual
bool
SetRtpTransport
(
webrtc
:
:
RtpTransportInternal
*
rtp_transport
)
=
0
;
protected
:
virtual
~
ChannelInterface
(
)
=
default
;
}
;
}
#
endif
