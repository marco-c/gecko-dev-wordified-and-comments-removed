#
ifndef
PC_WEBRTC_SDP_H_
#
define
PC_WEBRTC_SDP_H_
#
include
<
string
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
jsep
.
h
"
#
include
"
api
/
jsep_ice_candidate
.
h
"
#
include
"
api
/
jsep_session_description
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
cricket
{
class
Candidate
;
}
namespace
webrtc
{
class
IceCandidateInterface
;
class
JsepIceCandidate
;
class
JsepSessionDescription
;
struct
SdpParseError
;
std
:
:
string
SdpSerialize
(
const
JsepSessionDescription
&
jdesc
)
;
std
:
:
string
SdpSerializeCandidate
(
const
IceCandidateInterface
&
candidate
)
;
RTC_EXPORT
std
:
:
string
SdpSerializeCandidate
(
const
cricket
:
:
Candidate
&
candidate
)
;
bool
SdpDeserialize
(
absl
:
:
string_view
message
JsepSessionDescription
*
jdesc
SdpParseError
*
error
)
;
RTC_EXPORT
bool
SdpDeserializeCandidate
(
absl
:
:
string_view
message
JsepIceCandidate
*
candidate
SdpParseError
*
error
)
;
RTC_EXPORT
bool
SdpDeserializeCandidate
(
absl
:
:
string_view
transport_name
absl
:
:
string_view
message
cricket
:
:
Candidate
*
candidate
SdpParseError
*
error
)
;
RTC_EXPORT
bool
ParseCandidate
(
absl
:
:
string_view
message
cricket
:
:
Candidate
*
candidate
SdpParseError
*
error
bool
is_raw
)
;
bool
WriteFmtpParameters
(
const
webrtc
:
:
CodecParameterMap
&
parameters
StringBuilder
*
os
)
;
bool
ParseFmtpParameterSet
(
absl
:
:
string_view
line_params
webrtc
:
:
CodecParameterMap
&
codec_params
SdpParseError
*
error
)
;
}
#
endif
