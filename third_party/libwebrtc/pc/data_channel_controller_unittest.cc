#
include
"
pc
/
data_channel_controller
.
h
"
#
include
<
memory
>
#
include
"
pc
/
peer_connection_internal
.
h
"
#
include
"
pc
/
sctp_data_channel
.
h
"
#
include
"
pc
/
test
/
mock_peer_connection_internal
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
run_loop
.
h
"
namespace
webrtc
{
namespace
{
using
:
:
testing
:
:
NiceMock
;
using
:
:
testing
:
:
Return
;
class
DataChannelControllerTest
:
public
:
:
testing
:
:
Test
{
protected
:
DataChannelControllerTest
(
)
{
pc_
=
rtc
:
:
make_ref_counted
<
NiceMock
<
MockPeerConnectionInternal
>
>
(
)
;
ON_CALL
(
*
pc_
signaling_thread
)
.
WillByDefault
(
Return
(
rtc
:
:
Thread
:
:
Current
(
)
)
)
;
}
~
DataChannelControllerTest
(
)
override
{
run_loop_
.
Flush
(
)
;
}
test
:
:
RunLoop
run_loop_
;
rtc
:
:
scoped_refptr
<
NiceMock
<
MockPeerConnectionInternal
>
>
pc_
;
}
;
TEST_F
(
DataChannelControllerTest
CreateAndDestroy
)
{
DataChannelController
dcc
(
pc_
.
get
(
)
)
;
}
TEST_F
(
DataChannelControllerTest
CreateDataChannelEarlyRelease
)
{
DataChannelController
dcc
(
pc_
.
get
(
)
)
;
auto
channel
=
dcc
.
InternalCreateDataChannelWithProxy
(
"
label
"
std
:
:
make_unique
<
InternalDataChannelInit
>
(
DataChannelInit
(
)
)
.
get
(
)
)
;
channel
=
nullptr
;
}
TEST_F
(
DataChannelControllerTest
CreateDataChannelLateRelease
)
{
auto
dcc
=
std
:
:
make_unique
<
DataChannelController
>
(
pc_
.
get
(
)
)
;
auto
channel
=
dcc
-
>
InternalCreateDataChannelWithProxy
(
"
label
"
std
:
:
make_unique
<
InternalDataChannelInit
>
(
DataChannelInit
(
)
)
.
get
(
)
)
;
dcc
.
reset
(
)
;
channel
=
nullptr
;
}
TEST_F
(
DataChannelControllerTest
CloseAfterControllerDestroyed
)
{
auto
dcc
=
std
:
:
make_unique
<
DataChannelController
>
(
pc_
.
get
(
)
)
;
auto
channel
=
dcc
-
>
InternalCreateDataChannelWithProxy
(
"
label
"
std
:
:
make_unique
<
InternalDataChannelInit
>
(
DataChannelInit
(
)
)
.
get
(
)
)
;
auto
inner_channel
=
DowncastProxiedDataChannelInterfaceToSctpDataChannelForTesting
(
channel
.
get
(
)
)
;
dcc
-
>
ConnectDataChannel
(
inner_channel
)
;
dcc
.
reset
(
)
;
channel
-
>
Close
(
)
;
}
TEST_F
(
DataChannelControllerTest
AsyncChannelCloseTeardown
)
{
DataChannelController
dcc
(
pc_
.
get
(
)
)
;
rtc
:
:
scoped_refptr
<
DataChannelInterface
>
channel
=
dcc
.
InternalCreateDataChannelWithProxy
(
"
label
"
std
:
:
make_unique
<
InternalDataChannelInit
>
(
DataChannelInit
(
)
)
.
get
(
)
)
;
SctpDataChannel
*
inner_channel
=
DowncastProxiedDataChannelInterfaceToSctpDataChannelForTesting
(
channel
.
get
(
)
)
;
inner_channel
-
>
AddRef
(
)
;
channel
=
nullptr
;
EXPECT_TRUE
(
dcc
.
HasDataChannels
(
)
)
;
dcc
.
ConnectDataChannel
(
inner_channel
)
;
inner_channel
-
>
Close
(
)
;
EXPECT_FALSE
(
dcc
.
HasDataChannels
(
)
)
;
ASSERT_NE
(
inner_channel
-
>
Release
(
)
rtc
:
:
RefCountReleaseStatus
:
:
kDroppedLastRef
)
;
inner_channel
-
>
AddRef
(
)
;
run_loop_
.
Flush
(
)
;
EXPECT_EQ
(
inner_channel
-
>
Release
(
)
rtc
:
:
RefCountReleaseStatus
:
:
kDroppedLastRef
)
;
}
}
}
