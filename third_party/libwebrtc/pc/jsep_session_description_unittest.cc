#
include
"
api
/
jsep_session_description
.
h
"
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
str_cat
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
jsep
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
p2p
/
base
/
p2p_constants
.
h
"
#
include
"
p2p
/
base
/
transport_description
.
h
"
#
include
"
p2p
/
base
/
transport_info
.
h
"
#
include
"
pc
/
session_description
.
h
"
#
include
"
pc
/
webrtc_sdp
.
h
"
#
include
"
rtc_base
/
crypto_random
.
h
"
#
include
"
rtc_base
/
net_helper
.
h
"
#
include
"
rtc_base
/
socket_address
.
h
"
#
include
"
test
/
gtest
.
h
"
using
:
:
testing
:
:
Values
;
using
webrtc
:
:
IceCandidate
;
using
webrtc
:
:
IceCandidateCollection
;
using
webrtc
:
:
IceCandidateType
;
using
webrtc
:
:
JsepSessionDescription
;
using
:
:
webrtc
:
:
MediaProtocolType
;
using
webrtc
:
:
SdpType
;
using
webrtc
:
:
SessionDescriptionInterface
;
static
const
char
kCandidateUfrag
[
]
=
"
ufrag
"
;
static
const
char
kCandidatePwd
[
]
=
"
pwd
"
;
static
const
char
kCandidateUfragVoice
[
]
=
"
ufrag_voice
"
;
static
const
char
kCandidatePwdVoice
[
]
=
"
pwd_voice
"
;
static
const
char
kCandidateUfragVideo
[
]
=
"
ufrag_video
"
;
static
const
char
kCandidatePwdVideo
[
]
=
"
pwd_video
"
;
static
const
char
kCandidateFoundation
[
]
=
"
a0
+
B
/
1
"
;
static
const
uint32_t
kCandidatePriority
=
2130706432U
;
static
const
uint32_t
kCandidateGeneration
=
2
;
static
std
:
:
unique_ptr
<
webrtc
:
:
SessionDescription
>
CreateCricketSessionDescription
(
)
{
auto
desc
=
std
:
:
make_unique
<
webrtc
:
:
SessionDescription
>
(
)
;
auto
audio
=
std
:
:
make_unique
<
webrtc
:
:
AudioContentDescription
>
(
)
;
auto
video
=
std
:
:
make_unique
<
webrtc
:
:
VideoContentDescription
>
(
)
;
audio
-
>
AddCodec
(
webrtc
:
:
CreateAudioCodec
(
103
"
ISAC
"
16000
0
)
)
;
desc
-
>
AddContent
(
webrtc
:
:
CN_AUDIO
MediaProtocolType
:
:
kRtp
std
:
:
move
(
audio
)
)
;
video
-
>
AddCodec
(
webrtc
:
:
CreateVideoCodec
(
120
"
VP8
"
)
)
;
desc
-
>
AddContent
(
webrtc
:
:
CN_VIDEO
MediaProtocolType
:
:
kRtp
std
:
:
move
(
video
)
)
;
desc
-
>
AddTransportInfo
(
webrtc
:
:
TransportInfo
(
webrtc
:
:
CN_AUDIO
webrtc
:
:
TransportDescription
(
std
:
:
vector
<
std
:
:
string
>
(
)
kCandidateUfragVoice
kCandidatePwdVoice
webrtc
:
:
ICEMODE_FULL
webrtc
:
:
CONNECTIONROLE_NONE
nullptr
)
)
)
;
desc
-
>
AddTransportInfo
(
webrtc
:
:
TransportInfo
(
webrtc
:
:
CN_VIDEO
webrtc
:
:
TransportDescription
(
std
:
:
vector
<
std
:
:
string
>
(
)
kCandidateUfragVideo
kCandidatePwdVideo
webrtc
:
:
ICEMODE_FULL
webrtc
:
:
CONNECTIONROLE_NONE
nullptr
)
)
)
;
return
desc
;
}
class
JsepSessionDescriptionTest
:
public
:
:
testing
:
:
Test
{
protected
:
virtual
void
SetUp
(
)
{
int
port
=
1234
;
webrtc
:
:
SocketAddress
address
(
"
127
.
0
.
0
.
1
"
port
+
+
)
;
webrtc
:
:
Candidate
candidate
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
udp
"
address
1
"
"
"
"
IceCandidateType
:
:
kHost
0
"
1
"
)
;
candidate_
=
candidate
;
const
std
:
:
string
session_id
=
absl
:
:
StrCat
(
webrtc
:
:
CreateRandomId64
(
)
)
;
const
std
:
:
string
session_version
=
absl
:
:
StrCat
(
webrtc
:
:
CreateRandomId
(
)
)
;
jsep_desc_
=
std
:
:
make_unique
<
JsepSessionDescription
>
(
SdpType
:
:
kOffer
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
Initialize
(
CreateCricketSessionDescription
(
)
session_id
session_version
)
)
;
}
std
:
:
string
Serialize
(
const
SessionDescriptionInterface
*
desc
)
{
std
:
:
string
sdp
;
EXPECT_TRUE
(
desc
-
>
ToString
(
&
sdp
)
)
;
EXPECT_FALSE
(
sdp
.
empty
(
)
)
;
return
sdp
;
}
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
DeSerialize
(
const
std
:
:
string
&
sdp
)
{
auto
jsep_desc
=
std
:
:
make_unique
<
JsepSessionDescription
>
(
SdpType
:
:
kOffer
)
;
EXPECT_TRUE
(
webrtc
:
:
SdpDeserialize
(
sdp
jsep_desc
.
get
(
)
nullptr
)
)
;
return
std
:
:
move
(
jsep_desc
)
;
}
webrtc
:
:
Candidate
candidate_
;
std
:
:
unique_ptr
<
JsepSessionDescription
>
jsep_desc_
;
}
;
TEST_F
(
JsepSessionDescriptionTest
CloneDefault
)
{
auto
new_desc
=
jsep_desc_
-
>
Clone
(
)
;
EXPECT_EQ
(
jsep_desc_
-
>
type
(
)
new_desc
-
>
type
(
)
)
;
std
:
:
string
old_desc_string
;
std
:
:
string
new_desc_string
;
EXPECT_TRUE
(
jsep_desc_
-
>
ToString
(
&
old_desc_string
)
)
;
EXPECT_TRUE
(
new_desc
-
>
ToString
(
&
new_desc_string
)
)
;
EXPECT_EQ
(
old_desc_string
new_desc_string
)
;
EXPECT_EQ
(
jsep_desc_
-
>
session_id
(
)
new_desc
-
>
session_id
(
)
)
;
EXPECT_EQ
(
jsep_desc_
-
>
session_version
(
)
new_desc
-
>
session_version
(
)
)
;
}
TEST_F
(
JsepSessionDescriptionTest
CloneRollback
)
{
auto
jsep_desc
=
std
:
:
make_unique
<
JsepSessionDescription
>
(
SdpType
:
:
kRollback
)
;
auto
new_desc
=
jsep_desc
-
>
Clone
(
)
;
EXPECT_EQ
(
jsep_desc
-
>
type
(
)
new_desc
-
>
type
(
)
)
;
}
TEST_F
(
JsepSessionDescriptionTest
CloneWithCandidates
)
{
webrtc
:
:
Candidate
candidate_v4
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
udp
"
webrtc
:
:
SocketAddress
(
"
192
.
168
.
1
.
5
"
1234
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kSrflx
kCandidateGeneration
kCandidateFoundation
)
;
webrtc
:
:
Candidate
candidate_v6
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
udp
"
webrtc
:
:
SocketAddress
(
"
:
:
1
"
1234
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kHost
kCandidateGeneration
kCandidateFoundation
)
;
IceCandidate
jice_v4
(
"
audio
"
0
candidate_v4
)
;
IceCandidate
jice_v6
(
"
audio
"
0
candidate_v6
)
;
IceCandidate
jice_v4_video
(
"
video
"
0
candidate_v4
)
;
IceCandidate
jice_v6_video
(
"
video
"
0
candidate_v6
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice_v4
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice_v6
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice_v4_video
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice_v6_video
)
)
;
auto
new_desc
=
jsep_desc_
-
>
Clone
(
)
;
EXPECT_EQ
(
jsep_desc_
-
>
type
(
)
new_desc
-
>
type
(
)
)
;
std
:
:
string
old_desc_string
;
std
:
:
string
new_desc_string
;
EXPECT_TRUE
(
jsep_desc_
-
>
ToString
(
&
old_desc_string
)
)
;
EXPECT_TRUE
(
new_desc
-
>
ToString
(
&
new_desc_string
)
)
;
EXPECT_EQ
(
old_desc_string
new_desc_string
)
;
}
TEST_F
(
JsepSessionDescriptionTest
CheckSessionDescription
)
{
EXPECT_EQ
(
2u
jsep_desc_
-
>
number_of_mediasections
(
)
)
;
}
TEST_F
(
JsepSessionDescriptionTest
AddCandidateWithoutMid
)
{
IceCandidate
jsep_candidate
(
"
"
0
candidate_
)
;
EXPECT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jsep_candidate
)
)
;
const
IceCandidateCollection
*
ice_candidates
=
jsep_desc_
-
>
candidates
(
0
)
;
ASSERT_TRUE
(
ice_candidates
!
=
nullptr
)
;
EXPECT_EQ
(
1u
ice_candidates
-
>
count
(
)
)
;
const
IceCandidate
*
ice_candidate
=
ice_candidates
-
>
at
(
0
)
;
ASSERT_TRUE
(
ice_candidate
!
=
nullptr
)
;
candidate_
.
set_username
(
kCandidateUfragVoice
)
;
candidate_
.
set_password
(
kCandidatePwdVoice
)
;
EXPECT_TRUE
(
ice_candidate
-
>
candidate
(
)
.
IsEquivalent
(
candidate_
)
)
;
EXPECT_EQ
(
0
ice_candidate
-
>
sdp_mline_index
(
)
)
;
EXPECT_EQ
(
"
audio
"
ice_candidate
-
>
sdp_mid
(
)
)
;
EXPECT_EQ
(
0u
jsep_desc_
-
>
candidates
(
1
)
-
>
count
(
)
)
;
}
TEST_F
(
JsepSessionDescriptionTest
AddAndRemoveCandidatesWithMid
)
{
std
:
:
string
mid
=
"
video
"
;
IceCandidate
jsep_candidate
(
mid
0
candidate_
)
;
EXPECT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jsep_candidate
)
)
;
EXPECT_EQ
(
0u
jsep_desc_
-
>
candidates
(
0
)
-
>
count
(
)
)
;
const
IceCandidateCollection
*
ice_candidates
=
jsep_desc_
-
>
candidates
(
1
)
;
ASSERT_TRUE
(
ice_candidates
!
=
nullptr
)
;
EXPECT_EQ
(
1u
ice_candidates
-
>
count
(
)
)
;
const
IceCandidate
*
ice_candidate
=
ice_candidates
-
>
at
(
0
)
;
ASSERT_TRUE
(
ice_candidate
!
=
nullptr
)
;
candidate_
.
set_username
(
kCandidateUfragVideo
)
;
candidate_
.
set_password
(
kCandidatePwdVideo
)
;
EXPECT_TRUE
(
ice_candidate
-
>
candidate
(
)
.
IsEquivalent
(
candidate_
)
)
;
EXPECT_EQ
(
1
ice_candidate
-
>
sdp_mline_index
(
)
)
;
std
:
:
vector
<
webrtc
:
:
Candidate
>
candidates
(
1
candidate_
)
;
candidates
[
0
]
.
set_transport_name
(
mid
)
;
EXPECT_EQ
(
1u
jsep_desc_
-
>
RemoveCandidates
(
candidates
)
)
;
EXPECT_EQ
(
0u
jsep_desc_
-
>
candidates
(
0
)
-
>
count
(
)
)
;
EXPECT_EQ
(
0u
jsep_desc_
-
>
candidates
(
1
)
-
>
count
(
)
)
;
}
TEST_F
(
JsepSessionDescriptionTest
AddCandidateAlreadyHasUfrag
)
{
candidate_
.
set_username
(
kCandidateUfrag
)
;
candidate_
.
set_password
(
kCandidatePwd
)
;
IceCandidate
jsep_candidate
(
"
audio
"
0
candidate_
)
;
EXPECT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jsep_candidate
)
)
;
const
IceCandidateCollection
*
ice_candidates
=
jsep_desc_
-
>
candidates
(
0
)
;
ASSERT_TRUE
(
ice_candidates
!
=
nullptr
)
;
EXPECT_EQ
(
1u
ice_candidates
-
>
count
(
)
)
;
const
IceCandidate
*
ice_candidate
=
ice_candidates
-
>
at
(
0
)
;
ASSERT_TRUE
(
ice_candidate
!
=
nullptr
)
;
candidate_
.
set_username
(
kCandidateUfrag
)
;
candidate_
.
set_password
(
kCandidatePwd
)
;
EXPECT_TRUE
(
ice_candidate
-
>
candidate
(
)
.
IsEquivalent
(
candidate_
)
)
;
EXPECT_EQ
(
0u
jsep_desc_
-
>
candidates
(
1
)
-
>
count
(
)
)
;
}
TEST_F
(
JsepSessionDescriptionTest
AddBadCandidate
)
{
IceCandidate
bad_candidate1
(
"
"
55
candidate_
)
;
EXPECT_FALSE
(
jsep_desc_
-
>
AddCandidate
(
&
bad_candidate1
)
)
;
IceCandidate
bad_candidate2
(
"
some
weird
mid
"
0
candidate_
)
;
EXPECT_FALSE
(
jsep_desc_
-
>
AddCandidate
(
&
bad_candidate2
)
)
;
}
TEST_F
(
JsepSessionDescriptionTest
AddCandidateDuplicates
)
{
IceCandidate
jsep_candidate
(
"
"
0
candidate_
)
;
EXPECT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jsep_candidate
)
)
;
EXPECT_EQ
(
1u
jsep_desc_
-
>
candidates
(
0
)
-
>
count
(
)
)
;
EXPECT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jsep_candidate
)
)
;
EXPECT_EQ
(
1u
jsep_desc_
-
>
candidates
(
0
)
-
>
count
(
)
)
;
candidate_
.
set_username
(
kCandidateUfragVoice
)
;
candidate_
.
set_password
(
kCandidatePwdVoice
)
;
IceCandidate
jsep_candidate_with_credentials
(
"
"
0
candidate_
)
;
EXPECT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jsep_candidate_with_credentials
)
)
;
EXPECT_EQ
(
1u
jsep_desc_
-
>
candidates
(
0
)
-
>
count
(
)
)
;
}
TEST_F
(
JsepSessionDescriptionTest
AddHostnameCandidate
)
{
webrtc
:
:
Candidate
c
;
c
.
set_component
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
;
c
.
set_protocol
(
webrtc
:
:
UDP_PROTOCOL_NAME
)
;
c
.
set_address
(
webrtc
:
:
SocketAddress
(
"
example
.
local
"
1234
)
)
;
c
.
set_type
(
IceCandidateType
:
:
kHost
)
;
const
size_t
audio_index
=
0
;
IceCandidate
hostname_candidate
(
"
audio
"
audio_index
c
)
;
EXPECT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
hostname_candidate
)
)
;
ASSERT_NE
(
nullptr
jsep_desc_
-
>
description
(
)
)
;
ASSERT_EQ
(
2u
jsep_desc_
-
>
description
(
)
-
>
contents
(
)
.
size
(
)
)
;
const
auto
&
content
=
jsep_desc_
-
>
description
(
)
-
>
contents
(
)
[
audio_index
]
;
EXPECT_EQ
(
"
0
.
0
.
0
.
0
:
9
"
content
.
media_description
(
)
-
>
connection_address
(
)
.
ToString
(
)
)
;
}
TEST_F
(
JsepSessionDescriptionTest
SerializeDeserialize
)
{
std
:
:
string
sdp
=
Serialize
(
jsep_desc_
.
get
(
)
)
;
auto
parsed_jsep_desc
=
DeSerialize
(
sdp
)
;
EXPECT_EQ
(
2u
parsed_jsep_desc
-
>
number_of_mediasections
(
)
)
;
std
:
:
string
parsed_sdp
=
Serialize
(
parsed_jsep_desc
.
get
(
)
)
;
EXPECT_EQ
(
sdp
parsed_sdp
)
;
}
TEST_F
(
JsepSessionDescriptionTest
SerializeDeserializeWithHostnameCandidate
)
{
webrtc
:
:
Candidate
c
;
c
.
set_component
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
;
c
.
set_protocol
(
webrtc
:
:
UDP_PROTOCOL_NAME
)
;
c
.
set_address
(
webrtc
:
:
SocketAddress
(
"
example
.
local
"
1234
)
)
;
c
.
set_type
(
IceCandidateType
:
:
kHost
)
;
const
size_t
audio_index
=
0
;
const
size_t
video_index
=
1
;
IceCandidate
hostname_candidate_audio
(
"
audio
"
audio_index
c
)
;
IceCandidate
hostname_candidate_video
(
"
video
"
video_index
c
)
;
EXPECT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
hostname_candidate_audio
)
)
;
EXPECT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
hostname_candidate_video
)
)
;
std
:
:
string
sdp
=
Serialize
(
jsep_desc_
.
get
(
)
)
;
auto
parsed_jsep_desc
=
DeSerialize
(
sdp
)
;
EXPECT_EQ
(
2u
parsed_jsep_desc
-
>
number_of_mediasections
(
)
)
;
ASSERT_NE
(
nullptr
parsed_jsep_desc
-
>
description
(
)
)
;
ASSERT_EQ
(
2u
parsed_jsep_desc
-
>
description
(
)
-
>
contents
(
)
.
size
(
)
)
;
const
auto
&
audio_content
=
parsed_jsep_desc
-
>
description
(
)
-
>
contents
(
)
[
audio_index
]
;
const
auto
&
video_content
=
parsed_jsep_desc
-
>
description
(
)
-
>
contents
(
)
[
video_index
]
;
EXPECT_EQ
(
"
0
.
0
.
0
.
0
:
9
"
audio_content
.
media_description
(
)
-
>
connection_address
(
)
.
ToString
(
)
)
;
EXPECT_EQ
(
"
0
.
0
.
0
.
0
:
9
"
video_content
.
media_description
(
)
-
>
connection_address
(
)
.
ToString
(
)
)
;
}
TEST_F
(
JsepSessionDescriptionTest
SerializeDeserializeWithCandidates
)
{
std
:
:
string
sdp
=
Serialize
(
jsep_desc_
.
get
(
)
)
;
IceCandidate
jsep_candidate
(
"
audio
"
0
candidate_
)
;
EXPECT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jsep_candidate
)
)
;
std
:
:
string
sdp_with_candidate
=
Serialize
(
jsep_desc_
.
get
(
)
)
;
EXPECT_NE
(
sdp
sdp_with_candidate
)
;
auto
parsed_jsep_desc
=
DeSerialize
(
sdp_with_candidate
)
;
std
:
:
string
parsed_sdp_with_candidate
=
Serialize
(
parsed_jsep_desc
.
get
(
)
)
;
EXPECT_EQ
(
sdp_with_candidate
parsed_sdp_with_candidate
)
;
}
TEST_F
(
JsepSessionDescriptionTest
SerializeSessionDescriptionWithIPv6Only
)
{
webrtc
:
:
Candidate
candidate1
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
udp
"
webrtc
:
:
SocketAddress
(
"
:
:
1
"
1234
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kSrflx
kCandidateGeneration
kCandidateFoundation
)
;
webrtc
:
:
Candidate
candidate2
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
udp
"
webrtc
:
:
SocketAddress
(
"
:
:
2
"
1235
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kHost
kCandidateGeneration
kCandidateFoundation
)
;
IceCandidate
jice1
(
"
audio
"
0
candidate1
)
;
IceCandidate
jice2
(
"
audio
"
0
candidate2
)
;
IceCandidate
jice3
(
"
video
"
0
candidate1
)
;
IceCandidate
jice4
(
"
video
"
0
candidate2
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice1
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice2
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice3
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice4
)
)
;
std
:
:
string
message
=
Serialize
(
jsep_desc_
.
get
(
)
)
;
EXPECT_NE
(
message
.
find
(
"
c
=
IN
IP6
:
:
1
"
)
std
:
:
string
:
:
npos
)
;
EXPECT_EQ
(
message
.
find
(
"
c
=
IN
IP4
"
)
std
:
:
string
:
:
npos
)
;
}
TEST_F
(
JsepSessionDescriptionTest
SerializeSessionDescriptionWithBothIPFamilies
)
{
webrtc
:
:
Candidate
candidate_v4
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
udp
"
webrtc
:
:
SocketAddress
(
"
192
.
168
.
1
.
5
"
1234
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kSrflx
kCandidateGeneration
kCandidateFoundation
)
;
webrtc
:
:
Candidate
candidate_v6
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
udp
"
webrtc
:
:
SocketAddress
(
"
:
:
1
"
1234
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kHost
kCandidateGeneration
kCandidateFoundation
)
;
IceCandidate
jice_v4
(
"
audio
"
0
candidate_v4
)
;
IceCandidate
jice_v6
(
"
audio
"
0
candidate_v6
)
;
IceCandidate
jice_v4_video
(
"
video
"
0
candidate_v4
)
;
IceCandidate
jice_v6_video
(
"
video
"
0
candidate_v6
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice_v4
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice_v6
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice_v4_video
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice_v6_video
)
)
;
std
:
:
string
message
=
Serialize
(
jsep_desc_
.
get
(
)
)
;
EXPECT_NE
(
message
.
find
(
"
c
=
IN
IP4
192
.
168
.
1
.
5
"
)
std
:
:
string
:
:
npos
)
;
EXPECT_EQ
(
message
.
find
(
"
c
=
IN
IP6
"
)
std
:
:
string
:
:
npos
)
;
}
TEST_F
(
JsepSessionDescriptionTest
SerializeSessionDescriptionWithBothProtocols
)
{
webrtc
:
:
Candidate
candidate1
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
tcp
"
webrtc
:
:
SocketAddress
(
"
:
:
1
"
1234
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kSrflx
kCandidateGeneration
kCandidateFoundation
)
;
webrtc
:
:
Candidate
candidate2
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
udp
"
webrtc
:
:
SocketAddress
(
"
fe80
:
:
1234
:
5678
:
abcd
:
ef12
"
1235
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kHost
kCandidateGeneration
kCandidateFoundation
)
;
IceCandidate
jice1
(
"
audio
"
0
candidate1
)
;
IceCandidate
jice2
(
"
audio
"
0
candidate2
)
;
IceCandidate
jice3
(
"
video
"
0
candidate1
)
;
IceCandidate
jice4
(
"
video
"
0
candidate2
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice1
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice2
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice3
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice4
)
)
;
std
:
:
string
message
=
Serialize
(
jsep_desc_
.
get
(
)
)
;
EXPECT_NE
(
message
.
find
(
"
c
=
IN
IP6
fe80
:
:
1234
:
5678
:
abcd
:
ef12
"
)
std
:
:
string
:
:
npos
)
;
EXPECT_EQ
(
message
.
find
(
"
c
=
IN
IP4
"
)
std
:
:
string
:
:
npos
)
;
}
TEST_F
(
JsepSessionDescriptionTest
SerializeSessionDescriptionWithTCPOnly
)
{
webrtc
:
:
Candidate
candidate1
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
tcp
"
webrtc
:
:
SocketAddress
(
"
:
:
1
"
1234
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kSrflx
kCandidateGeneration
kCandidateFoundation
)
;
webrtc
:
:
Candidate
candidate2
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
tcp
"
webrtc
:
:
SocketAddress
(
"
:
:
2
"
1235
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kHost
kCandidateGeneration
kCandidateFoundation
)
;
IceCandidate
jice1
(
"
audio
"
0
candidate1
)
;
IceCandidate
jice2
(
"
audio
"
0
candidate2
)
;
IceCandidate
jice3
(
"
video
"
0
candidate1
)
;
IceCandidate
jice4
(
"
video
"
0
candidate2
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice1
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice2
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice3
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice4
)
)
;
std
:
:
string
message
=
Serialize
(
jsep_desc_
.
get
(
)
)
;
EXPECT_EQ
(
message
.
find
(
"
c
=
IN
IP6
:
:
3
"
)
std
:
:
string
:
:
npos
)
;
EXPECT_NE
(
message
.
find
(
"
c
=
IN
IP4
0
.
0
.
0
.
0
"
)
std
:
:
string
:
:
npos
)
;
}
TEST_F
(
JsepSessionDescriptionTest
RemoveCandidateAndSetConnectionAddress
)
{
webrtc
:
:
Candidate
candidate1
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
udp
"
webrtc
:
:
SocketAddress
(
"
:
:
1
"
1234
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kHost
kCandidateGeneration
kCandidateFoundation
)
;
candidate1
.
set_transport_name
(
"
audio
"
)
;
webrtc
:
:
Candidate
candidate2
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
tcp
"
webrtc
:
:
SocketAddress
(
"
:
:
2
"
1235
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kHost
kCandidateGeneration
kCandidateFoundation
)
;
candidate2
.
set_transport_name
(
"
audio
"
)
;
webrtc
:
:
Candidate
candidate3
(
webrtc
:
:
ICE_CANDIDATE_COMPONENT_RTP
"
udp
"
webrtc
:
:
SocketAddress
(
"
192
.
168
.
1
.
1
"
1236
)
kCandidatePriority
"
"
"
"
IceCandidateType
:
:
kHost
kCandidateGeneration
kCandidateFoundation
)
;
candidate3
.
set_transport_name
(
"
audio
"
)
;
IceCandidate
jice1
(
"
audio
"
0
candidate1
)
;
IceCandidate
jice2
(
"
audio
"
0
candidate2
)
;
IceCandidate
jice3
(
"
audio
"
0
candidate3
)
;
size_t
audio_index
=
0
;
auto
media_desc
=
jsep_desc_
-
>
description
(
)
-
>
contents
(
)
[
audio_index
]
.
media_description
(
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice1
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice2
)
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
AddCandidate
(
&
jice3
)
)
;
std
:
:
vector
<
webrtc
:
:
Candidate
>
candidates
;
EXPECT_EQ
(
"
192
.
168
.
1
.
1
:
1236
"
media_desc
-
>
connection_address
(
)
.
ToString
(
)
)
;
candidates
.
push_back
(
candidate3
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
RemoveCandidates
(
candidates
)
)
;
EXPECT_EQ
(
"
[
:
:
1
]
:
1234
"
media_desc
-
>
connection_address
(
)
.
ToString
(
)
)
;
candidates
.
clear
(
)
;
candidates
.
push_back
(
candidate2
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
RemoveCandidates
(
candidates
)
)
;
EXPECT_EQ
(
"
[
:
:
1
]
:
1234
"
media_desc
-
>
connection_address
(
)
.
ToString
(
)
)
;
candidates
.
clear
(
)
;
candidates
.
push_back
(
candidate1
)
;
ASSERT_TRUE
(
jsep_desc_
-
>
RemoveCandidates
(
candidates
)
)
;
EXPECT_EQ
(
"
0
.
0
.
0
.
0
:
9
"
media_desc
-
>
connection_address
(
)
.
ToString
(
)
)
;
}
class
EnumerateAllSdpTypesTest
:
public
:
:
testing
:
:
Test
public
:
:
testing
:
:
WithParamInterface
<
SdpType
>
{
}
;
TEST_P
(
EnumerateAllSdpTypesTest
TestIdentity
)
{
SdpType
type
=
GetParam
(
)
;
const
char
*
str
=
webrtc
:
:
SdpTypeToString
(
type
)
;
EXPECT_EQ
(
type
webrtc
:
:
SdpTypeFromString
(
str
)
)
;
}
INSTANTIATE_TEST_SUITE_P
(
JsepSessionDescriptionTest
EnumerateAllSdpTypesTest
Values
(
SdpType
:
:
kOffer
SdpType
:
:
kPrAnswer
SdpType
:
:
kAnswer
)
)
;
