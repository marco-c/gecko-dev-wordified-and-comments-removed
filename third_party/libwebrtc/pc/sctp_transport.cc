#
include
"
pc
/
sctp_transport
.
h
"
#
include
<
algorithm
>
#
include
<
utility
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
location
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
synchronization
/
sequence_checker
.
h
"
namespace
webrtc
{
SctpTransport
:
:
SctpTransport
(
std
:
:
unique_ptr
<
cricket
:
:
SctpTransportInternal
>
internal
)
:
owner_thread_
(
rtc
:
:
Thread
:
:
Current
(
)
)
info_
(
SctpTransportState
:
:
kNew
)
internal_sctp_transport_
(
std
:
:
move
(
internal
)
)
{
RTC_DCHECK
(
internal_sctp_transport_
.
get
(
)
)
;
internal_sctp_transport_
-
>
SignalAssociationChangeCommunicationUp
.
connect
(
this
&
SctpTransport
:
:
OnAssociationChangeCommunicationUp
)
;
if
(
dtls_transport_
)
{
UpdateInformation
(
SctpTransportState
:
:
kConnecting
)
;
}
else
{
UpdateInformation
(
SctpTransportState
:
:
kNew
)
;
}
}
SctpTransport
:
:
~
SctpTransport
(
)
{
RTC_DCHECK
(
owner_thread_
-
>
IsCurrent
(
)
|
|
!
internal_sctp_transport_
)
;
}
SctpTransportInformation
SctpTransport
:
:
Information
(
)
const
{
RTC_DCHECK_RUN_ON
(
owner_thread_
)
;
return
info_
;
}
void
SctpTransport
:
:
RegisterObserver
(
SctpTransportObserverInterface
*
observer
)
{
RTC_DCHECK_RUN_ON
(
owner_thread_
)
;
RTC_DCHECK
(
observer
)
;
RTC_DCHECK
(
!
observer_
)
;
observer_
=
observer
;
}
void
SctpTransport
:
:
UnregisterObserver
(
)
{
RTC_DCHECK_RUN_ON
(
owner_thread_
)
;
observer_
=
nullptr
;
}
rtc
:
:
scoped_refptr
<
DtlsTransportInterface
>
SctpTransport
:
:
dtls_transport
(
)
const
{
RTC_DCHECK_RUN_ON
(
owner_thread_
)
;
return
dtls_transport_
;
}
void
SctpTransport
:
:
Clear
(
)
{
RTC_DCHECK_RUN_ON
(
owner_thread_
)
;
RTC_DCHECK
(
internal
(
)
)
;
dtls_transport_
=
nullptr
;
internal_sctp_transport_
=
nullptr
;
UpdateInformation
(
SctpTransportState
:
:
kClosed
)
;
}
void
SctpTransport
:
:
SetDtlsTransport
(
rtc
:
:
scoped_refptr
<
DtlsTransport
>
transport
)
{
RTC_DCHECK_RUN_ON
(
owner_thread_
)
;
SctpTransportState
next_state
=
info_
.
state
(
)
;
dtls_transport_
=
transport
;
if
(
internal_sctp_transport_
)
{
if
(
transport
)
{
internal_sctp_transport_
-
>
SetDtlsTransport
(
transport
-
>
internal
(
)
)
;
transport
-
>
internal
(
)
-
>
SignalDtlsState
.
connect
(
this
&
SctpTransport
:
:
OnDtlsStateChange
)
;
if
(
info_
.
state
(
)
=
=
SctpTransportState
:
:
kNew
)
{
next_state
=
SctpTransportState
:
:
kConnecting
;
}
}
else
{
internal_sctp_transport_
-
>
SetDtlsTransport
(
nullptr
)
;
}
}
UpdateInformation
(
next_state
)
;
}
void
SctpTransport
:
:
Start
(
int
local_port
int
remote_port
int
max_message_size
)
{
RTC_DCHECK_RUN_ON
(
owner_thread_
)
;
info_
=
SctpTransportInformation
(
info_
.
state
(
)
info_
.
dtls_transport
(
)
max_message_size
info_
.
MaxChannels
(
)
)
;
if
(
!
internal
(
)
-
>
Start
(
local_port
remote_port
max_message_size
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
push
down
SCTP
parameters
closing
.
"
;
UpdateInformation
(
SctpTransportState
:
:
kClosed
)
;
}
}
void
SctpTransport
:
:
UpdateInformation
(
SctpTransportState
state
)
{
RTC_DCHECK_RUN_ON
(
owner_thread_
)
;
bool
must_send_update
=
(
state
!
=
info_
.
state
(
)
)
;
if
(
internal_sctp_transport_
)
{
info_
=
SctpTransportInformation
(
state
dtls_transport_
info_
.
MaxMessageSize
(
)
info_
.
MaxChannels
(
)
)
;
}
else
{
info_
=
SctpTransportInformation
(
state
dtls_transport_
info_
.
MaxMessageSize
(
)
info_
.
MaxChannels
(
)
)
;
}
if
(
observer_
&
&
must_send_update
)
{
observer_
-
>
OnStateChange
(
info_
)
;
}
}
void
SctpTransport
:
:
OnAssociationChangeCommunicationUp
(
)
{
RTC_DCHECK_RUN_ON
(
owner_thread_
)
;
RTC_DCHECK
(
internal_sctp_transport_
)
;
if
(
internal_sctp_transport_
-
>
max_outbound_streams
(
)
&
&
internal_sctp_transport_
-
>
max_inbound_streams
(
)
)
{
int
max_channels
=
std
:
:
min
(
*
(
internal_sctp_transport_
-
>
max_outbound_streams
(
)
)
*
(
internal_sctp_transport_
-
>
max_inbound_streams
(
)
)
)
;
info_
=
SctpTransportInformation
(
info_
.
state
(
)
info_
.
dtls_transport
(
)
info_
.
MaxMessageSize
(
)
max_channels
)
;
}
UpdateInformation
(
SctpTransportState
:
:
kConnected
)
;
}
void
SctpTransport
:
:
OnDtlsStateChange
(
cricket
:
:
DtlsTransportInternal
*
transport
cricket
:
:
DtlsTransportState
state
)
{
RTC_DCHECK_RUN_ON
(
owner_thread_
)
;
RTC_CHECK
(
transport
=
=
dtls_transport_
-
>
internal
(
)
)
;
if
(
state
=
=
cricket
:
:
DTLS_TRANSPORT_CLOSED
|
|
state
=
=
cricket
:
:
DTLS_TRANSPORT_FAILED
)
{
UpdateInformation
(
SctpTransportState
:
:
kClosed
)
;
}
}
}
