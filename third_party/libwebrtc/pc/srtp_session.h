#
ifndef
PC_SRTP_SESSION_H_
#
define
PC_SRTP_SESSION_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
struct
srtp_event_data_t
;
struct
srtp_ctx_t_
;
namespace
webrtc
{
void
ProhibitLibsrtpInitialization
(
)
;
class
SrtpSession
{
public
:
SrtpSession
(
)
;
explicit
SrtpSession
(
const
FieldTrialsView
&
field_trials
)
;
~
SrtpSession
(
)
;
SrtpSession
(
const
SrtpSession
&
)
=
delete
;
SrtpSession
&
operator
=
(
const
SrtpSession
&
)
=
delete
;
bool
SetSend
(
int
crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
key
const
std
:
:
vector
<
int
>
&
extension_ids
)
;
bool
UpdateSend
(
int
crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
key
const
std
:
:
vector
<
int
>
&
extension_ids
)
;
bool
SetReceive
(
int
crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
key
const
std
:
:
vector
<
int
>
&
extension_ids
)
;
bool
UpdateReceive
(
int
crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
key
const
std
:
:
vector
<
int
>
&
extension_ids
)
;
[
[
deprecated
(
"
Pass
CopyOnWriteBuffer
"
)
]
]
bool
ProtectRtp
(
void
*
data
int
in_len
int
max_len
int
*
out_len
)
;
bool
ProtectRtp
(
CopyOnWriteBuffer
&
buffer
)
;
[
[
deprecated
(
"
Pass
CopyOnWriteBuffer
"
)
]
]
bool
ProtectRtp
(
void
*
data
int
in_len
int
max_len
int
*
out_len
int64_t
*
index
)
;
bool
ProtectRtp
(
CopyOnWriteBuffer
&
buffer
int64_t
*
index
)
;
[
[
deprecated
(
"
Pass
CopyOnWriteBuffer
"
)
]
]
bool
ProtectRtcp
(
void
*
data
int
in_len
int
max_len
int
*
out_len
)
;
bool
ProtectRtcp
(
CopyOnWriteBuffer
&
buffer
)
;
[
[
deprecated
(
"
Pass
CopyOnWriteBuffer
"
)
]
]
bool
UnprotectRtp
(
void
*
data
int
in_len
int
*
out_len
)
;
bool
UnprotectRtp
(
CopyOnWriteBuffer
&
buffer
)
;
[
[
deprecated
(
"
Pass
CopyOnWriteBuffer
"
)
]
]
bool
UnprotectRtcp
(
void
*
data
int
in_len
int
*
out_len
)
;
bool
UnprotectRtcp
(
CopyOnWriteBuffer
&
buffer
)
;
bool
GetRtpAuthParams
(
uint8_t
*
*
key
int
*
key_len
int
*
tag_len
)
;
int
GetSrtpOverhead
(
)
const
;
void
EnableExternalAuth
(
)
;
bool
IsExternalAuthEnabled
(
)
const
;
bool
IsExternalAuthActive
(
)
const
;
bool
RemoveSsrcFromSession
(
uint32_t
ssrc
)
;
private
:
bool
DoSetKey
(
int
type
int
crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
key
const
std
:
:
vector
<
int
>
&
extension_ids
)
;
bool
SetKey
(
int
type
int
crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
key
const
std
:
:
vector
<
int
>
&
extension_ids
)
;
bool
UpdateKey
(
int
type
int
crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
key
const
std
:
:
vector
<
int
>
&
extension_ids
)
;
bool
GetSendStreamPacketIndex
(
CopyOnWriteBuffer
&
buffer
int64_t
*
index
)
;
void
DumpPacket
(
const
CopyOnWriteBuffer
&
buffer
bool
outbound
)
;
[
[
deprecated
(
"
Pass
CopyOnWriteBuffer
"
)
]
]
void
DumpPacket
(
const
void
*
buf
int
len
bool
outbound
)
;
void
HandleEvent
(
const
srtp_event_data_t
*
ev
)
;
static
void
HandleEventThunk
(
srtp_event_data_t
*
ev
)
;
SequenceChecker
thread_checker_
;
srtp_ctx_t_
*
session_
=
nullptr
;
int
rtp_auth_tag_len_
=
0
;
int
rtcp_auth_tag_len_
=
0
;
bool
inited_
=
false
;
int
last_send_seq_num_
=
-
1
;
bool
external_auth_active_
=
false
;
bool
external_auth_enabled_
=
false
;
int
decryption_failure_count_
=
0
;
bool
dump_plain_rtp_
=
false
;
}
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
ProhibitLibsrtpInitialization
;
using
:
:
webrtc
:
:
SrtpSession
;
}
#
endif
