#
include
"
pc
/
bundle_manager
.
h
"
namespace
webrtc
{
void
BundleManager
:
:
Update
(
const
cricket
:
:
SessionDescription
*
description
)
{
bundle_groups_
.
clear
(
)
;
for
(
const
cricket
:
:
ContentGroup
*
new_bundle_group
:
description
-
>
GetGroupsByName
(
cricket
:
:
GROUP_TYPE_BUNDLE
)
)
{
bundle_groups_
.
push_back
(
std
:
:
make_unique
<
cricket
:
:
ContentGroup
>
(
*
new_bundle_group
)
)
;
}
}
void
BundleManager
:
:
DeleteMid
(
const
cricket
:
:
ContentGroup
*
bundle_group
const
std
:
:
string
&
mid
)
{
auto
bundle_group_it
=
std
:
:
find_if
(
bundle_groups_
.
begin
(
)
bundle_groups_
.
end
(
)
[
bundle_group
]
(
std
:
:
unique_ptr
<
cricket
:
:
ContentGroup
>
&
group
)
{
return
bundle_group
=
=
group
.
get
(
)
;
}
)
;
RTC_DCHECK
(
bundle_group_it
!
=
bundle_groups_
.
end
(
)
)
;
(
*
bundle_group_it
)
-
>
RemoveContentName
(
mid
)
;
}
void
BundleManager
:
:
DeleteGroup
(
const
cricket
:
:
ContentGroup
*
bundle_group
)
{
auto
bundle_group_it
=
std
:
:
find_if
(
bundle_groups_
.
begin
(
)
bundle_groups_
.
end
(
)
[
bundle_group
]
(
std
:
:
unique_ptr
<
cricket
:
:
ContentGroup
>
&
group
)
{
return
bundle_group
=
=
group
.
get
(
)
;
}
)
;
RTC_DCHECK
(
bundle_group_it
!
=
bundle_groups_
.
end
(
)
)
;
bundle_groups_
.
erase
(
bundle_group_it
)
;
}
}
