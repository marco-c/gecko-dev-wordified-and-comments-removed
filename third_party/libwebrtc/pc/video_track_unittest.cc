#
include
"
pc
/
video_track
.
h
"
#
include
<
memory
>
#
include
"
media
/
base
/
fake_frame_source
.
h
"
#
include
"
pc
/
test
/
fake_video_track_renderer
.
h
"
#
include
"
pc
/
test
/
fake_video_track_source
.
h
"
#
include
"
pc
/
video_track_source
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
#
include
"
test
/
gtest
.
h
"
using
webrtc
:
:
FakeVideoTrackRenderer
;
using
webrtc
:
:
FakeVideoTrackSource
;
using
webrtc
:
:
MediaSourceInterface
;
using
webrtc
:
:
MediaStreamTrackInterface
;
using
webrtc
:
:
VideoTrack
;
using
webrtc
:
:
VideoTrackInterface
;
using
webrtc
:
:
VideoTrackSource
;
class
VideoTrackTest
:
public
:
:
testing
:
:
Test
{
public
:
VideoTrackTest
(
)
:
frame_source_
(
640
480
webrtc
:
:
kNumMicrosecsPerSec
/
30
)
{
static
const
char
kVideoTrackId
[
]
=
"
track_id
"
;
video_track_source_
=
rtc
:
:
make_ref_counted
<
FakeVideoTrackSource
>
(
false
)
;
video_track_
=
VideoTrack
:
:
Create
(
kVideoTrackId
video_track_source_
webrtc
:
:
Thread
:
:
Current
(
)
)
;
}
protected
:
webrtc
:
:
AutoThread
main_thread_
;
rtc
:
:
scoped_refptr
<
FakeVideoTrackSource
>
video_track_source_
;
rtc
:
:
scoped_refptr
<
VideoTrack
>
video_track_
;
webrtc
:
:
FakeFrameSource
frame_source_
;
}
;
TEST_F
(
VideoTrackTest
CheckApiProxyAndInternalSource
)
{
EXPECT_NE
(
video_track_
-
>
GetSource
(
)
video_track_source_
.
get
(
)
)
;
EXPECT_EQ
(
video_track_
-
>
GetSourceInternal
(
)
video_track_source_
.
get
(
)
)
;
}
TEST_F
(
VideoTrackTest
SourceStateChangeTrackState
)
{
EXPECT_EQ
(
MediaStreamTrackInterface
:
:
kLive
video_track_
-
>
state
(
)
)
;
video_track_source_
-
>
SetState
(
MediaSourceInterface
:
:
kEnded
)
;
EXPECT_EQ
(
MediaStreamTrackInterface
:
:
kEnded
video_track_
-
>
state
(
)
)
;
}
TEST_F
(
VideoTrackTest
RenderVideo
)
{
std
:
:
unique_ptr
<
FakeVideoTrackRenderer
>
renderer_1
(
new
FakeVideoTrackRenderer
(
video_track_
.
get
(
)
)
)
;
video_track_source_
-
>
InjectFrame
(
frame_source_
.
GetFrame
(
)
)
;
EXPECT_EQ
(
1
renderer_1
-
>
num_rendered_frames
(
)
)
;
std
:
:
unique_ptr
<
FakeVideoTrackRenderer
>
renderer_2
(
new
FakeVideoTrackRenderer
(
video_track_
.
get
(
)
)
)
;
video_track_source_
-
>
InjectFrame
(
frame_source_
.
GetFrame
(
)
)
;
EXPECT_EQ
(
2
renderer_1
-
>
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
1
renderer_2
-
>
num_rendered_frames
(
)
)
;
renderer_1
.
reset
(
nullptr
)
;
video_track_source_
-
>
InjectFrame
(
frame_source_
.
GetFrame
(
)
)
;
EXPECT_EQ
(
2
renderer_2
-
>
num_rendered_frames
(
)
)
;
}
TEST_F
(
VideoTrackTest
DisableTrackBlackout
)
{
std
:
:
unique_ptr
<
FakeVideoTrackRenderer
>
renderer
(
new
FakeVideoTrackRenderer
(
video_track_
.
get
(
)
)
)
;
video_track_source_
-
>
InjectFrame
(
frame_source_
.
GetFrame
(
)
)
;
EXPECT_EQ
(
1
renderer
-
>
num_rendered_frames
(
)
)
;
EXPECT_FALSE
(
renderer
-
>
black_frame
(
)
)
;
video_track_
-
>
set_enabled
(
false
)
;
video_track_source_
-
>
InjectFrame
(
frame_source_
.
GetFrame
(
)
)
;
EXPECT_EQ
(
2
renderer
-
>
num_rendered_frames
(
)
)
;
EXPECT_TRUE
(
renderer
-
>
black_frame
(
)
)
;
video_track_
-
>
set_enabled
(
true
)
;
video_track_source_
-
>
InjectFrame
(
frame_source_
.
GetFrame
(
)
)
;
EXPECT_EQ
(
3
renderer
-
>
num_rendered_frames
(
)
)
;
EXPECT_FALSE
(
renderer
-
>
black_frame
(
)
)
;
}
