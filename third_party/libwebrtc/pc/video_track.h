#
ifndef
PC_VIDEO_TRACK_H_
#
define
PC_VIDEO_TRACK_H_
#
include
<
string
>
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
media_stream_track
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
api
/
video
/
video_source_interface
.
h
"
#
include
"
media
/
base
/
video_source_base
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
VideoTrack
:
public
MediaStreamTrack
<
VideoTrackInterface
>
public
rtc
:
:
VideoSourceBaseGuarded
public
ObserverInterface
{
public
:
static
rtc
:
:
scoped_refptr
<
VideoTrack
>
Create
(
const
std
:
:
string
&
label
VideoTrackSourceInterface
*
source
rtc
:
:
Thread
*
worker_thread
)
;
void
AddOrUpdateSink
(
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
sink
const
rtc
:
:
VideoSinkWants
&
wants
)
override
;
void
RemoveSink
(
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
sink
)
override
;
void
RequestRefreshFrame
(
)
override
;
VideoTrackSourceInterface
*
GetSource
(
)
const
override
;
ContentHint
content_hint
(
)
const
override
;
void
set_content_hint
(
ContentHint
hint
)
override
;
bool
set_enabled
(
bool
enable
)
override
;
bool
enabled
(
)
const
override
;
MediaStreamTrackInterface
:
:
TrackState
state
(
)
const
override
;
std
:
:
string
kind
(
)
const
override
;
protected
:
VideoTrack
(
const
std
:
:
string
&
id
VideoTrackSourceInterface
*
video_source
rtc
:
:
Thread
*
worker_thread
)
;
~
VideoTrack
(
)
;
private
:
void
OnChanged
(
)
override
;
RTC_NO_UNIQUE_ADDRESS
webrtc
:
:
SequenceChecker
signaling_thread_
;
rtc
:
:
Thread
*
const
worker_thread_
;
const
rtc
:
:
scoped_refptr
<
VideoTrackSourceInterface
>
video_source_
;
ContentHint
content_hint_
RTC_GUARDED_BY
(
&
signaling_thread_
)
;
bool
enabled_w_
RTC_GUARDED_BY
(
worker_thread_
)
=
true
;
}
;
}
#
endif
