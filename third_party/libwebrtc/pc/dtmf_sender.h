#
ifndef
PC_DTMF_SENDER_H_
#
define
PC_DTMF_SENDER_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
api
/
dtmf_sender_interface
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
pc
/
proxy
.
h
"
#
include
"
rtc_base
/
location
.
h
"
#
include
"
rtc_base
/
ref_count
.
h
"
#
include
"
rtc_base
/
task_utils
/
pending_task_safety_flag
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
DtmfProviderInterface
{
public
:
virtual
bool
CanInsertDtmf
(
)
=
0
;
virtual
bool
InsertDtmf
(
int
code
int
duration
)
=
0
;
virtual
sigslot
:
:
signal0
<
>
*
GetOnDestroyedSignal
(
)
=
0
;
protected
:
virtual
~
DtmfProviderInterface
(
)
{
}
}
;
class
DtmfSender
:
public
DtmfSenderInterface
public
sigslot
:
:
has_slots
<
>
{
public
:
static
rtc
:
:
scoped_refptr
<
DtmfSender
>
Create
(
rtc
:
:
Thread
*
signaling_thread
DtmfProviderInterface
*
provider
)
;
void
RegisterObserver
(
DtmfSenderObserverInterface
*
observer
)
override
;
void
UnregisterObserver
(
)
override
;
bool
CanInsertDtmf
(
)
override
;
bool
InsertDtmf
(
const
std
:
:
string
&
tones
int
duration
int
inter_tone_gap
int
comma_delay
=
kDtmfDefaultCommaDelayMs
)
override
;
std
:
:
string
tones
(
)
const
override
;
int
duration
(
)
const
override
;
int
inter_tone_gap
(
)
const
override
;
int
comma_delay
(
)
const
override
;
protected
:
DtmfSender
(
rtc
:
:
Thread
*
signaling_thread
DtmfProviderInterface
*
provider
)
;
virtual
~
DtmfSender
(
)
;
DtmfSender
(
const
DtmfSender
&
)
=
delete
;
DtmfSender
&
operator
=
(
const
DtmfSender
&
)
=
delete
;
private
:
DtmfSender
(
)
;
void
QueueInsertDtmf
(
const
rtc
:
:
Location
&
posted_from
uint32_t
delay_ms
)
RTC_RUN_ON
(
signaling_thread_
)
;
void
DoInsertDtmf
(
)
RTC_RUN_ON
(
signaling_thread_
)
;
void
OnProviderDestroyed
(
)
;
void
StopSending
(
)
RTC_RUN_ON
(
signaling_thread_
)
;
DtmfSenderObserverInterface
*
observer_
RTC_GUARDED_BY
(
signaling_thread_
)
;
rtc
:
:
Thread
*
signaling_thread_
;
DtmfProviderInterface
*
provider_
RTC_GUARDED_BY
(
signaling_thread_
)
;
std
:
:
string
tones_
RTC_GUARDED_BY
(
signaling_thread_
)
;
int
duration_
RTC_GUARDED_BY
(
signaling_thread_
)
;
int
inter_tone_gap_
RTC_GUARDED_BY
(
signaling_thread_
)
;
int
comma_delay_
RTC_GUARDED_BY
(
signaling_thread_
)
;
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
safety_flag_
RTC_GUARDED_BY
(
signaling_thread_
)
RTC_PT_GUARDED_BY
(
signaling_thread_
)
=
nullptr
;
}
;
BEGIN_PRIMARY_PROXY_MAP
(
DtmfSender
)
PROXY_PRIMARY_THREAD_DESTRUCTOR
(
)
PROXY_METHOD1
(
void
RegisterObserver
DtmfSenderObserverInterface
*
)
PROXY_METHOD0
(
void
UnregisterObserver
)
PROXY_METHOD0
(
bool
CanInsertDtmf
)
PROXY_METHOD4
(
bool
InsertDtmf
const
std
:
:
string
&
int
int
int
)
PROXY_CONSTMETHOD0
(
std
:
:
string
tones
)
PROXY_CONSTMETHOD0
(
int
duration
)
PROXY_CONSTMETHOD0
(
int
inter_tone_gap
)
PROXY_CONSTMETHOD0
(
int
comma_delay
)
END_PROXY_MAP
(
DtmfSender
)
bool
GetDtmfCode
(
char
tone
int
*
code
)
;
}
#
endif
