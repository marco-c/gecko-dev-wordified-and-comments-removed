#
ifndef
PC_STATS_COLLECTOR_H_
#
define
PC_STATS_COLLECTOR_H_
#
include
<
stdint
.
h
>
#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
stats_types
.
h
"
#
include
"
p2p
/
base
/
connection_info
.
h
"
#
include
"
p2p
/
base
/
port
.
h
"
#
include
"
pc
/
peer_connection_internal
.
h
"
#
include
"
pc
/
stats_collector_interface
.
h
"
#
include
"
rtc_base
/
network_constants
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
namespace
webrtc
{
const
char
*
IceCandidateTypeToStatsType
(
const
std
:
:
string
&
candidate_type
)
;
const
char
*
AdapterTypeToStatsType
(
rtc
:
:
AdapterType
type
)
;
typedef
std
:
:
map
<
std
:
:
string
StatsReport
*
>
TrackIdMap
;
class
StatsCollector
:
public
StatsCollectorInterface
{
public
:
explicit
StatsCollector
(
PeerConnectionInternal
*
pc
)
;
virtual
~
StatsCollector
(
)
;
void
AddStream
(
MediaStreamInterface
*
stream
)
;
void
AddTrack
(
MediaStreamTrackInterface
*
track
)
;
void
AddLocalAudioTrack
(
AudioTrackInterface
*
audio_track
uint32_t
ssrc
)
override
;
void
RemoveLocalAudioTrack
(
AudioTrackInterface
*
audio_track
uint32_t
ssrc
)
override
;
void
UpdateStats
(
PeerConnectionInterface
:
:
StatsOutputLevel
level
)
;
void
GetStats
(
MediaStreamTrackInterface
*
track
StatsReports
*
reports
)
override
;
StatsReport
*
PrepareReport
(
bool
local
uint32_t
ssrc
const
std
:
:
string
&
track_id
const
StatsReport
:
:
Id
&
transport_id
StatsReport
:
:
Direction
direction
)
;
StatsReport
*
PrepareADMReport
(
)
;
bool
IsValidTrack
(
const
std
:
:
string
&
track_id
)
;
void
ClearUpdateStatsCacheForTest
(
)
;
bool
UseStandardBytesStats
(
)
const
{
return
use_standard_bytes_stats_
;
}
private
:
friend
class
StatsCollectorTest
;
virtual
double
GetTimeNow
(
)
;
bool
CopySelectedReports
(
const
std
:
:
string
&
selector
StatsReports
*
reports
)
;
StatsReport
*
AddCandidateReport
(
const
cricket
:
:
CandidateStats
&
candidate_stats
bool
local
)
;
StatsReport
*
AddCertificateReports
(
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificateStats
>
cert_stats
)
;
StatsReport
*
AddConnectionInfoReport
(
const
std
:
:
string
&
content_name
int
component
int
connection_id
const
StatsReport
:
:
Id
&
channel_report_id
const
cricket
:
:
ConnectionInfo
&
info
)
;
void
ExtractDataInfo
(
)
;
void
ExtractSessionInfo
(
)
;
void
ExtractBweInfo
(
)
;
void
ExtractMediaInfo
(
)
;
void
ExtractSenderInfo
(
)
;
webrtc
:
:
StatsReport
*
GetReport
(
const
StatsReport
:
:
StatsType
&
type
const
std
:
:
string
&
id
StatsReport
:
:
Direction
direction
)
;
void
UpdateStatsFromExistingLocalAudioTracks
(
bool
has_remote_tracks
)
;
void
UpdateReportFromAudioTrack
(
AudioTrackInterface
*
track
StatsReport
*
report
bool
has_remote_tracks
)
;
void
UpdateTrackReports
(
)
;
StatsCollection
reports_
;
TrackIdMap
track_ids_
;
PeerConnectionInternal
*
const
pc_
;
double
stats_gathering_started_
;
const
bool
use_standard_bytes_stats_
;
typedef
std
:
:
vector
<
std
:
:
pair
<
AudioTrackInterface
*
uint32_t
>
>
LocalAudioTrackVector
;
LocalAudioTrackVector
local_audio_tracks_
;
}
;
}
#
endif
