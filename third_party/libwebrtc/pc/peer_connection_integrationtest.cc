#
if
!
defined
(
THREAD_SANITIZER
)
#
include
<
stdio
.
h
>
#
include
<
algorithm
>
#
include
<
functional
>
#
include
<
list
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
algorithm
/
container
.
h
"
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
peer_connection_proxy
.
h
"
#
include
"
api
/
rtc_event_log
/
rtc_event_log_factory
.
h
"
#
include
"
api
/
rtp_receiver_interface
.
h
"
#
include
"
api
/
task_queue
/
default_task_queue_factory
.
h
"
#
include
"
api
/
transport
/
field_trial_based_config
.
h
"
#
include
"
api
/
uma_metrics
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
call
/
call
.
h
"
#
include
"
logging
/
rtc_event_log
/
fake_rtc_event_log_factory
.
h
"
#
include
"
media
/
engine
/
fake_webrtc_video_engine
.
h
"
#
include
"
media
/
engine
/
webrtc_media_engine
.
h
"
#
include
"
media
/
engine
/
webrtc_media_engine_defaults
.
h
"
#
include
"
modules
/
audio_processing
/
test
/
audio_processing_builder_for_testing
.
h
"
#
include
"
p2p
/
base
/
fake_ice_transport
.
h
"
#
include
"
p2p
/
base
/
mock_async_resolver
.
h
"
#
include
"
p2p
/
base
/
p2p_constants
.
h
"
#
include
"
p2p
/
base
/
port_interface
.
h
"
#
include
"
p2p
/
base
/
test_stun_server
.
h
"
#
include
"
p2p
/
base
/
test_turn_customizer
.
h
"
#
include
"
p2p
/
base
/
test_turn_server
.
h
"
#
include
"
p2p
/
client
/
basic_port_allocator
.
h
"
#
include
"
pc
/
dtmf_sender
.
h
"
#
include
"
pc
/
local_audio_source
.
h
"
#
include
"
pc
/
media_session
.
h
"
#
include
"
pc
/
peer_connection
.
h
"
#
include
"
pc
/
peer_connection_factory
.
h
"
#
include
"
pc
/
rtp_media_utils
.
h
"
#
include
"
pc
/
session_description
.
h
"
#
include
"
pc
/
test
/
fake_audio_capture_module
.
h
"
#
include
"
pc
/
test
/
fake_periodic_video_track_source
.
h
"
#
include
"
pc
/
test
/
fake_rtc_certificate_generator
.
h
"
#
include
"
pc
/
test
/
fake_video_track_renderer
.
h
"
#
include
"
pc
/
test
/
mock_peer_connection_observers
.
h
"
#
include
"
rtc_base
/
fake_clock
.
h
"
#
include
"
rtc_base
/
fake_mdns_responder
.
h
"
#
include
"
rtc_base
/
fake_network
.
h
"
#
include
"
rtc_base
/
firewall_socket_server
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_conversions
.
h
"
#
include
"
rtc_base
/
test_certificate_verifier
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
#
include
"
rtc_base
/
virtual_socket_server
.
h
"
#
include
"
system_wrappers
/
include
/
metrics
.
h
"
#
include
"
test
/
field_trial
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
namespace
{
using
:
:
cricket
:
:
ContentInfo
;
using
:
:
cricket
:
:
StreamParams
;
using
:
:
rtc
:
:
SocketAddress
;
using
:
:
testing
:
:
_
;
using
:
:
testing
:
:
Combine
;
using
:
:
testing
:
:
Contains
;
using
:
:
testing
:
:
DoAll
;
using
:
:
testing
:
:
ElementsAre
;
using
:
:
testing
:
:
NiceMock
;
using
:
:
testing
:
:
Return
;
using
:
:
testing
:
:
SetArgPointee
;
using
:
:
testing
:
:
UnorderedElementsAreArray
;
using
:
:
testing
:
:
Values
;
using
RTCConfiguration
=
PeerConnectionInterface
:
:
RTCConfiguration
;
static
const
int
kDefaultTimeout
=
10000
;
static
const
int
kMaxWaitForStatsMs
=
3000
;
static
const
int
kMaxWaitForActivationMs
=
5000
;
static
const
int
kMaxWaitForFramesMs
=
10000
;
static
const
int
kDefaultExpectedAudioFrameCount
=
3
;
static
const
int
kDefaultExpectedVideoFrameCount
=
3
;
static
const
char
kDataChannelLabel
[
]
=
"
data_channel
"
;
static
const
int
kDefaultSrtpCryptoSuite
=
rtc
:
:
SRTP_AES128_CM_SHA1_80
;
static
const
int
kDefaultSrtpCryptoSuiteGcm
=
rtc
:
:
SRTP_AEAD_AES_256_GCM
;
static
const
SocketAddress
kDefaultLocalAddress
(
"
192
.
168
.
1
.
1
"
0
)
;
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
IceRestartOfferAnswerOptions
(
)
{
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
ice_restart
=
true
;
return
options
;
}
void
RemoveSsrcsAndMsids
(
cricket
:
:
SessionDescription
*
desc
)
{
for
(
ContentInfo
&
content
:
desc
-
>
contents
(
)
)
{
content
.
media_description
(
)
-
>
mutable_streams
(
)
.
clear
(
)
;
}
desc
-
>
set_msid_supported
(
false
)
;
desc
-
>
set_msid_signaling
(
0
)
;
}
void
RemoveSsrcsAndKeepMsids
(
cricket
:
:
SessionDescription
*
desc
)
{
for
(
ContentInfo
&
content
:
desc
-
>
contents
(
)
)
{
std
:
:
string
track_id
;
std
:
:
vector
<
std
:
:
string
>
stream_ids
;
if
(
!
content
.
media_description
(
)
-
>
streams
(
)
.
empty
(
)
)
{
const
StreamParams
&
first_stream
=
content
.
media_description
(
)
-
>
streams
(
)
[
0
]
;
track_id
=
first_stream
.
id
;
stream_ids
=
first_stream
.
stream_ids
(
)
;
}
content
.
media_description
(
)
-
>
mutable_streams
(
)
.
clear
(
)
;
StreamParams
new_stream
;
new_stream
.
id
=
track_id
;
new_stream
.
set_stream_ids
(
stream_ids
)
;
content
.
media_description
(
)
-
>
AddStream
(
new_stream
)
;
}
}
int
FindFirstMediaStatsIndexByKind
(
const
std
:
:
string
&
kind
const
std
:
:
vector
<
const
webrtc
:
:
RTCMediaStreamTrackStats
*
>
&
media_stats_vec
)
{
for
(
size_t
i
=
0
;
i
<
media_stats_vec
.
size
(
)
;
i
+
+
)
{
if
(
media_stats_vec
[
i
]
-
>
kind
.
ValueToString
(
)
=
=
kind
)
{
return
i
;
}
}
return
-
1
;
}
class
SignalingMessageReceiver
{
public
:
virtual
void
ReceiveSdpMessage
(
SdpType
type
const
std
:
:
string
&
msg
)
=
0
;
virtual
void
ReceiveIceMessage
(
const
std
:
:
string
&
sdp_mid
int
sdp_mline_index
const
std
:
:
string
&
msg
)
=
0
;
protected
:
SignalingMessageReceiver
(
)
{
}
virtual
~
SignalingMessageReceiver
(
)
{
}
}
;
class
MockRtpReceiverObserver
:
public
webrtc
:
:
RtpReceiverObserverInterface
{
public
:
explicit
MockRtpReceiverObserver
(
cricket
:
:
MediaType
media_type
)
:
expected_media_type_
(
media_type
)
{
}
void
OnFirstPacketReceived
(
cricket
:
:
MediaType
media_type
)
override
{
ASSERT_EQ
(
expected_media_type_
media_type
)
;
first_packet_received_
=
true
;
}
bool
first_packet_received
(
)
const
{
return
first_packet_received_
;
}
virtual
~
MockRtpReceiverObserver
(
)
{
}
private
:
bool
first_packet_received_
=
false
;
cricket
:
:
MediaType
expected_media_type_
;
}
;
class
PeerConnectionWrapper
:
public
webrtc
:
:
PeerConnectionObserver
public
SignalingMessageReceiver
{
public
:
static
PeerConnectionWrapper
*
CreateWithDtlsIdentityStore
(
const
std
:
:
string
&
debug_name
std
:
:
unique_ptr
<
rtc
:
:
RTCCertificateGeneratorInterface
>
cert_generator
rtc
:
:
Thread
*
network_thread
rtc
:
:
Thread
*
worker_thread
)
{
PeerConnectionWrapper
*
client
(
new
PeerConnectionWrapper
(
debug_name
)
)
;
webrtc
:
:
PeerConnectionDependencies
dependencies
(
nullptr
)
;
dependencies
.
cert_generator
=
std
:
:
move
(
cert_generator
)
;
if
(
!
client
-
>
Init
(
nullptr
nullptr
std
:
:
move
(
dependencies
)
network_thread
worker_thread
nullptr
false
false
)
)
{
delete
client
;
return
nullptr
;
}
return
client
;
}
webrtc
:
:
PeerConnectionFactoryInterface
*
pc_factory
(
)
const
{
return
peer_connection_factory_
.
get
(
)
;
}
webrtc
:
:
PeerConnectionInterface
*
pc
(
)
const
{
return
peer_connection_
.
get
(
)
;
}
void
CreateAndSetAndSignalOffer
(
)
{
auto
offer
=
CreateOfferAndWait
(
)
;
ASSERT_NE
(
nullptr
offer
)
;
EXPECT_TRUE
(
SetLocalDescriptionAndSendSdpMessage
(
std
:
:
move
(
offer
)
)
)
;
}
void
SetOfferAnswerOptions
(
const
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
&
options
)
{
offer_answer_options_
=
options
;
}
void
SetReceivedSdpMunger
(
std
:
:
function
<
void
(
cricket
:
:
SessionDescription
*
)
>
munger
)
{
received_sdp_munger_
=
std
:
:
move
(
munger
)
;
}
void
SetGeneratedSdpMunger
(
std
:
:
function
<
void
(
cricket
:
:
SessionDescription
*
)
>
munger
)
{
generated_sdp_munger_
=
std
:
:
move
(
munger
)
;
}
void
SetRemoteOfferHandler
(
std
:
:
function
<
void
(
)
>
handler
)
{
remote_offer_handler_
=
std
:
:
move
(
handler
)
;
}
void
SetRemoteAsyncResolver
(
rtc
:
:
MockAsyncResolver
*
resolver
)
{
remote_async_resolver_
=
resolver
;
}
std
:
:
vector
<
PeerConnectionInterface
:
:
IceConnectionState
>
ice_connection_state_history
(
)
const
{
return
ice_connection_state_history_
;
}
void
clear_ice_connection_state_history
(
)
{
ice_connection_state_history_
.
clear
(
)
;
}
std
:
:
vector
<
PeerConnectionInterface
:
:
IceConnectionState
>
standardized_ice_connection_state_history
(
)
const
{
return
standardized_ice_connection_state_history_
;
}
std
:
:
vector
<
PeerConnectionInterface
:
:
PeerConnectionState
>
peer_connection_state_history
(
)
const
{
return
peer_connection_state_history_
;
}
std
:
:
vector
<
PeerConnectionInterface
:
:
IceGatheringState
>
ice_gathering_state_history
(
)
const
{
return
ice_gathering_state_history_
;
}
std
:
:
vector
<
cricket
:
:
CandidatePairChangeEvent
>
ice_candidate_pair_change_history
(
)
const
{
return
ice_candidate_pair_change_history_
;
}
std
:
:
vector
<
PeerConnectionInterface
:
:
SignalingState
>
peer_connection_signaling_state_history
(
)
const
{
return
peer_connection_signaling_state_history_
;
}
void
AddAudioVideoTracks
(
)
{
AddAudioTrack
(
)
;
AddVideoTrack
(
)
;
}
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
AddAudioTrack
(
)
{
return
AddTrack
(
CreateLocalAudioTrack
(
)
)
;
}
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
AddVideoTrack
(
)
{
return
AddTrack
(
CreateLocalVideoTrack
(
)
)
;
}
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioTrackInterface
>
CreateLocalAudioTrack
(
)
{
cricket
:
:
AudioOptions
options
;
options
.
highpass_filter
=
false
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioSourceInterface
>
source
=
peer_connection_factory_
-
>
CreateAudioSource
(
options
)
;
return
peer_connection_factory_
-
>
CreateAudioTrack
(
rtc
:
:
CreateRandomUuid
(
)
source
)
;
}
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
CreateLocalVideoTrack
(
)
{
webrtc
:
:
FakePeriodicVideoSource
:
:
Config
config
;
config
.
timestamp_offset_ms
=
rtc
:
:
TimeMillis
(
)
;
return
CreateLocalVideoTrackInternal
(
config
)
;
}
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
CreateLocalVideoTrackWithConfig
(
webrtc
:
:
FakePeriodicVideoSource
:
:
Config
config
)
{
return
CreateLocalVideoTrackInternal
(
config
)
;
}
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
CreateLocalVideoTrackWithRotation
(
webrtc
:
:
VideoRotation
rotation
)
{
webrtc
:
:
FakePeriodicVideoSource
:
:
Config
config
;
config
.
rotation
=
rotation
;
config
.
timestamp_offset_ms
=
rtc
:
:
TimeMillis
(
)
;
return
CreateLocalVideoTrackInternal
(
config
)
;
}
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
AddTrack
(
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
=
{
}
)
{
auto
result
=
pc
(
)
-
>
AddTrack
(
track
stream_ids
)
;
EXPECT_EQ
(
RTCErrorType
:
:
NONE
result
.
error
(
)
.
type
(
)
)
;
return
result
.
MoveValue
(
)
;
}
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpReceiverInterface
>
>
GetReceiversOfType
(
cricket
:
:
MediaType
media_type
)
{
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpReceiverInterface
>
>
receivers
;
for
(
const
auto
&
receiver
:
pc
(
)
-
>
GetReceivers
(
)
)
{
if
(
receiver
-
>
media_type
(
)
=
=
media_type
)
{
receivers
.
push_back
(
receiver
)
;
}
}
return
receivers
;
}
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
GetFirstTransceiverOfType
(
cricket
:
:
MediaType
media_type
)
{
for
(
auto
transceiver
:
pc
(
)
-
>
GetTransceivers
(
)
)
{
if
(
transceiver
-
>
receiver
(
)
-
>
media_type
(
)
=
=
media_type
)
{
return
transceiver
;
}
}
return
nullptr
;
}
bool
SignalingStateStable
(
)
{
return
pc
(
)
-
>
signaling_state
(
)
=
=
webrtc
:
:
PeerConnectionInterface
:
:
kStable
;
}
void
CreateDataChannel
(
)
{
CreateDataChannel
(
nullptr
)
;
}
void
CreateDataChannel
(
const
webrtc
:
:
DataChannelInit
*
init
)
{
CreateDataChannel
(
kDataChannelLabel
init
)
;
}
void
CreateDataChannel
(
const
std
:
:
string
&
label
const
webrtc
:
:
DataChannelInit
*
init
)
{
data_channel_
=
pc
(
)
-
>
CreateDataChannel
(
label
init
)
;
ASSERT_TRUE
(
data_channel_
.
get
(
)
!
=
nullptr
)
;
data_observer_
.
reset
(
new
MockDataChannelObserver
(
data_channel_
)
)
;
}
DataChannelInterface
*
data_channel
(
)
{
return
data_channel_
;
}
const
MockDataChannelObserver
*
data_observer
(
)
const
{
return
data_observer_
.
get
(
)
;
}
int
audio_frames_received
(
)
const
{
return
fake_audio_capture_module_
-
>
frames_received
(
)
;
}
int
min_video_frames_received_per_track
(
)
const
{
int
min_frames
=
INT_MAX
;
if
(
fake_video_renderers_
.
empty
(
)
)
{
return
0
;
}
for
(
const
auto
&
pair
:
fake_video_renderers_
)
{
min_frames
=
std
:
:
min
(
min_frames
pair
.
second
-
>
num_rendered_frames
(
)
)
;
}
return
min_frames
;
}
rtc
:
:
scoped_refptr
<
MockStatsObserver
>
OldGetStatsForTrack
(
webrtc
:
:
MediaStreamTrackInterface
*
track
)
{
rtc
:
:
scoped_refptr
<
MockStatsObserver
>
observer
(
new
rtc
:
:
RefCountedObject
<
MockStatsObserver
>
(
)
)
;
EXPECT_TRUE
(
peer_connection_
-
>
GetStats
(
observer
nullptr
PeerConnectionInterface
:
:
kStatsOutputLevelStandard
)
)
;
EXPECT_TRUE_WAIT
(
observer
-
>
called
(
)
kDefaultTimeout
)
;
return
observer
;
}
rtc
:
:
scoped_refptr
<
MockStatsObserver
>
OldGetStats
(
)
{
return
OldGetStatsForTrack
(
nullptr
)
;
}
rtc
:
:
scoped_refptr
<
const
webrtc
:
:
RTCStatsReport
>
NewGetStats
(
)
{
rtc
:
:
scoped_refptr
<
webrtc
:
:
MockRTCStatsCollectorCallback
>
callback
(
new
rtc
:
:
RefCountedObject
<
webrtc
:
:
MockRTCStatsCollectorCallback
>
(
)
)
;
peer_connection_
-
>
GetStats
(
callback
)
;
EXPECT_TRUE_WAIT
(
callback
-
>
called
(
)
kDefaultTimeout
)
;
return
callback
-
>
report
(
)
;
}
int
rendered_width
(
)
{
EXPECT_FALSE
(
fake_video_renderers_
.
empty
(
)
)
;
return
fake_video_renderers_
.
empty
(
)
?
0
:
fake_video_renderers_
.
begin
(
)
-
>
second
-
>
width
(
)
;
}
int
rendered_height
(
)
{
EXPECT_FALSE
(
fake_video_renderers_
.
empty
(
)
)
;
return
fake_video_renderers_
.
empty
(
)
?
0
:
fake_video_renderers_
.
begin
(
)
-
>
second
-
>
height
(
)
;
}
double
rendered_aspect_ratio
(
)
{
if
(
rendered_height
(
)
=
=
0
)
{
return
0
.
0
;
}
return
static_cast
<
double
>
(
rendered_width
(
)
)
/
rendered_height
(
)
;
}
webrtc
:
:
VideoRotation
rendered_rotation
(
)
{
EXPECT_FALSE
(
fake_video_renderers_
.
empty
(
)
)
;
return
fake_video_renderers_
.
empty
(
)
?
webrtc
:
:
kVideoRotation_0
:
fake_video_renderers_
.
begin
(
)
-
>
second
-
>
rotation
(
)
;
}
int
local_rendered_width
(
)
{
return
local_video_renderer_
?
local_video_renderer_
-
>
width
(
)
:
0
;
}
int
local_rendered_height
(
)
{
return
local_video_renderer_
?
local_video_renderer_
-
>
height
(
)
:
0
;
}
double
local_rendered_aspect_ratio
(
)
{
if
(
local_rendered_height
(
)
=
=
0
)
{
return
0
.
0
;
}
return
static_cast
<
double
>
(
local_rendered_width
(
)
)
/
local_rendered_height
(
)
;
}
size_t
number_of_remote_streams
(
)
{
if
(
!
pc
(
)
)
{
return
0
;
}
return
pc
(
)
-
>
remote_streams
(
)
-
>
count
(
)
;
}
StreamCollectionInterface
*
remote_streams
(
)
const
{
if
(
!
pc
(
)
)
{
ADD_FAILURE
(
)
;
return
nullptr
;
}
return
pc
(
)
-
>
remote_streams
(
)
;
}
StreamCollectionInterface
*
local_streams
(
)
{
if
(
!
pc
(
)
)
{
ADD_FAILURE
(
)
;
return
nullptr
;
}
return
pc
(
)
-
>
local_streams
(
)
;
}
webrtc
:
:
PeerConnectionInterface
:
:
SignalingState
signaling_state
(
)
{
return
pc
(
)
-
>
signaling_state
(
)
;
}
webrtc
:
:
PeerConnectionInterface
:
:
IceConnectionState
ice_connection_state
(
)
{
return
pc
(
)
-
>
ice_connection_state
(
)
;
}
webrtc
:
:
PeerConnectionInterface
:
:
IceConnectionState
standardized_ice_connection_state
(
)
{
return
pc
(
)
-
>
standardized_ice_connection_state
(
)
;
}
webrtc
:
:
PeerConnectionInterface
:
:
IceGatheringState
ice_gathering_state
(
)
{
return
pc
(
)
-
>
ice_gathering_state
(
)
;
}
const
std
:
:
vector
<
std
:
:
unique_ptr
<
MockRtpReceiverObserver
>
>
&
rtp_receiver_observers
(
)
{
return
rtp_receiver_observers_
;
}
void
ResetRtpReceiverObservers
(
)
{
rtp_receiver_observers_
.
clear
(
)
;
for
(
const
rtc
:
:
scoped_refptr
<
RtpReceiverInterface
>
&
receiver
:
pc
(
)
-
>
GetReceivers
(
)
)
{
std
:
:
unique_ptr
<
MockRtpReceiverObserver
>
observer
(
new
MockRtpReceiverObserver
(
receiver
-
>
media_type
(
)
)
)
;
receiver
-
>
SetObserver
(
observer
.
get
(
)
)
;
rtp_receiver_observers_
.
push_back
(
std
:
:
move
(
observer
)
)
;
}
}
rtc
:
:
FakeNetworkManager
*
network_manager
(
)
const
{
return
fake_network_manager_
.
get
(
)
;
}
cricket
:
:
PortAllocator
*
port_allocator
(
)
const
{
return
port_allocator_
;
}
webrtc
:
:
FakeRtcEventLogFactory
*
event_log_factory
(
)
const
{
return
event_log_factory_
;
}
const
cricket
:
:
Candidate
&
last_candidate_gathered
(
)
const
{
return
last_candidate_gathered_
;
}
const
cricket
:
:
IceCandidateErrorEvent
&
error_event
(
)
const
{
return
error_event_
;
}
void
SetMdnsResponder
(
std
:
:
unique_ptr
<
webrtc
:
:
FakeMdnsResponder
>
mdns_responder
)
{
RTC_DCHECK
(
mdns_responder
!
=
nullptr
)
;
mdns_responder_
=
mdns_responder
.
get
(
)
;
network_manager
(
)
-
>
set_mdns_responder
(
std
:
:
move
(
mdns_responder
)
)
;
}
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
CreateOfferAndWait
(
)
{
rtc
:
:
scoped_refptr
<
MockCreateSessionDescriptionObserver
>
observer
(
new
rtc
:
:
RefCountedObject
<
MockCreateSessionDescriptionObserver
>
(
)
)
;
pc
(
)
-
>
CreateOffer
(
observer
offer_answer_options_
)
;
return
WaitForDescriptionFromObserver
(
observer
)
;
}
bool
Rollback
(
)
{
return
SetRemoteDescription
(
webrtc
:
:
CreateSessionDescription
(
SdpType
:
:
kRollback
"
"
)
)
;
}
void
StartWatchingDelayStats
(
)
{
auto
received_stats
=
NewGetStats
(
)
;
auto
track_stats
=
received_stats
-
>
GetStatsOfType
<
webrtc
:
:
RTCMediaStreamTrackStats
>
(
)
[
0
]
;
ASSERT_TRUE
(
track_stats
-
>
relative_packet_arrival_delay
.
is_defined
(
)
)
;
auto
rtp_stats
=
received_stats
-
>
GetStatsOfType
<
webrtc
:
:
RTCInboundRTPStreamStats
>
(
)
[
0
]
;
ASSERT_TRUE
(
rtp_stats
-
>
packets_received
.
is_defined
(
)
)
;
ASSERT_TRUE
(
rtp_stats
-
>
track_id
.
is_defined
(
)
)
;
audio_track_stats_id_
=
track_stats
-
>
id
(
)
;
ASSERT_TRUE
(
received_stats
-
>
Get
(
audio_track_stats_id_
)
)
;
rtp_stats_id_
=
rtp_stats
-
>
id
(
)
;
ASSERT_EQ
(
audio_track_stats_id_
*
rtp_stats
-
>
track_id
)
;
audio_packets_stat_
=
*
rtp_stats
-
>
packets_received
;
audio_delay_stat_
=
*
track_stats
-
>
relative_packet_arrival_delay
;
audio_samples_stat_
=
*
track_stats
-
>
total_samples_received
;
audio_concealed_stat_
=
*
track_stats
-
>
concealed_samples
;
}
void
UpdateDelayStats
(
std
:
:
string
tag
int
desc_size
)
{
auto
report
=
NewGetStats
(
)
;
auto
track_stats
=
report
-
>
GetAs
<
webrtc
:
:
RTCMediaStreamTrackStats
>
(
audio_track_stats_id_
)
;
ASSERT_TRUE
(
track_stats
)
;
auto
rtp_stats
=
report
-
>
GetAs
<
webrtc
:
:
RTCInboundRTPStreamStats
>
(
rtp_stats_id_
)
;
ASSERT_TRUE
(
rtp_stats
)
;
auto
delta_packets
=
*
rtp_stats
-
>
packets_received
-
audio_packets_stat_
;
auto
delta_rpad
=
*
track_stats
-
>
relative_packet_arrival_delay
-
audio_delay_stat_
;
auto
recent_delay
=
delta_packets
>
0
?
delta_rpad
/
delta_packets
:
-
1
;
#
if
!
defined
(
NDEBUG
)
EXPECT_GT
(
0
.
25
recent_delay
)
<
<
tag
<
<
"
size
"
<
<
desc_size
;
#
else
EXPECT_GT
(
0
.
1
recent_delay
)
<
<
tag
<
<
"
size
"
<
<
desc_size
;
#
endif
auto
delta_samples
=
*
track_stats
-
>
total_samples_received
-
audio_samples_stat_
;
auto
delta_concealed
=
*
track_stats
-
>
concealed_samples
-
audio_concealed_stat_
;
#
if
!
defined
(
NDEBUG
)
EXPECT_GT
(
18000U
delta_concealed
)
<
<
"
Concealed
"
<
<
delta_concealed
<
<
"
of
"
<
<
delta_samples
<
<
"
samples
"
;
#
else
EXPECT_GT
(
15000U
delta_concealed
)
<
<
"
Concealed
"
<
<
delta_concealed
<
<
"
of
"
<
<
delta_samples
<
<
"
samples
"
;
#
endif
if
(
delta_samples
>
0
)
{
#
if
!
defined
(
NDEBUG
)
EXPECT_GT
(
0
.
95
1
.
0
*
delta_concealed
/
delta_samples
)
<
<
"
Concealed
"
<
<
delta_concealed
<
<
"
of
"
<
<
delta_samples
<
<
"
samples
"
;
#
else
EXPECT_GT
(
0
.
6
1
.
0
*
delta_concealed
/
delta_samples
)
<
<
"
Concealed
"
<
<
delta_concealed
<
<
"
of
"
<
<
delta_samples
<
<
"
samples
"
;
#
endif
}
audio_packets_stat_
=
*
rtp_stats
-
>
packets_received
;
audio_delay_stat_
=
*
track_stats
-
>
relative_packet_arrival_delay
;
audio_samples_stat_
=
*
track_stats
-
>
total_samples_received
;
audio_concealed_stat_
=
*
track_stats
-
>
concealed_samples
;
}
private
:
explicit
PeerConnectionWrapper
(
const
std
:
:
string
&
debug_name
)
:
debug_name_
(
debug_name
)
{
}
bool
Init
(
const
PeerConnectionFactory
:
:
Options
*
options
const
PeerConnectionInterface
:
:
RTCConfiguration
*
config
webrtc
:
:
PeerConnectionDependencies
dependencies
rtc
:
:
Thread
*
network_thread
rtc
:
:
Thread
*
worker_thread
std
:
:
unique_ptr
<
webrtc
:
:
FakeRtcEventLogFactory
>
event_log_factory
bool
reset_encoder_factory
bool
reset_decoder_factory
)
{
RTC_DCHECK
(
!
peer_connection_
)
;
RTC_DCHECK
(
!
peer_connection_factory_
)
;
fake_network_manager_
.
reset
(
new
rtc
:
:
FakeNetworkManager
(
)
)
;
fake_network_manager_
-
>
AddInterface
(
kDefaultLocalAddress
)
;
std
:
:
unique_ptr
<
cricket
:
:
PortAllocator
>
port_allocator
(
new
cricket
:
:
BasicPortAllocator
(
fake_network_manager_
.
get
(
)
)
)
;
port_allocator_
=
port_allocator
.
get
(
)
;
fake_audio_capture_module_
=
FakeAudioCaptureModule
:
:
Create
(
)
;
if
(
!
fake_audio_capture_module_
)
{
return
false
;
}
rtc
:
:
Thread
*
const
signaling_thread
=
rtc
:
:
Thread
:
:
Current
(
)
;
webrtc
:
:
PeerConnectionFactoryDependencies
pc_factory_dependencies
;
pc_factory_dependencies
.
network_thread
=
network_thread
;
pc_factory_dependencies
.
worker_thread
=
worker_thread
;
pc_factory_dependencies
.
signaling_thread
=
signaling_thread
;
pc_factory_dependencies
.
task_queue_factory
=
webrtc
:
:
CreateDefaultTaskQueueFactory
(
)
;
pc_factory_dependencies
.
trials
=
std
:
:
make_unique
<
FieldTrialBasedConfig
>
(
)
;
cricket
:
:
MediaEngineDependencies
media_deps
;
media_deps
.
task_queue_factory
=
pc_factory_dependencies
.
task_queue_factory
.
get
(
)
;
media_deps
.
adm
=
fake_audio_capture_module_
;
webrtc
:
:
SetMediaEngineDefaults
(
&
media_deps
)
;
if
(
reset_encoder_factory
)
{
media_deps
.
video_encoder_factory
.
reset
(
)
;
}
if
(
reset_decoder_factory
)
{
media_deps
.
video_decoder_factory
.
reset
(
)
;
}
if
(
!
media_deps
.
audio_processing
)
{
media_deps
.
audio_processing
=
AudioProcessingBuilderForTesting
(
)
.
Create
(
)
;
}
media_deps
.
trials
=
pc_factory_dependencies
.
trials
.
get
(
)
;
pc_factory_dependencies
.
media_engine
=
cricket
:
:
CreateMediaEngine
(
std
:
:
move
(
media_deps
)
)
;
pc_factory_dependencies
.
call_factory
=
webrtc
:
:
CreateCallFactory
(
)
;
if
(
event_log_factory
)
{
event_log_factory_
=
event_log_factory
.
get
(
)
;
pc_factory_dependencies
.
event_log_factory
=
std
:
:
move
(
event_log_factory
)
;
}
else
{
pc_factory_dependencies
.
event_log_factory
=
std
:
:
make_unique
<
webrtc
:
:
RtcEventLogFactory
>
(
pc_factory_dependencies
.
task_queue_factory
.
get
(
)
)
;
}
peer_connection_factory_
=
webrtc
:
:
CreateModularPeerConnectionFactory
(
std
:
:
move
(
pc_factory_dependencies
)
)
;
if
(
!
peer_connection_factory_
)
{
return
false
;
}
if
(
options
)
{
peer_connection_factory_
-
>
SetOptions
(
*
options
)
;
}
if
(
config
)
{
sdp_semantics_
=
config
-
>
sdp_semantics
;
}
dependencies
.
allocator
=
std
:
:
move
(
port_allocator
)
;
peer_connection_
=
CreatePeerConnection
(
config
std
:
:
move
(
dependencies
)
)
;
return
peer_connection_
.
get
(
)
!
=
nullptr
;
}
rtc
:
:
scoped_refptr
<
webrtc
:
:
PeerConnectionInterface
>
CreatePeerConnection
(
const
PeerConnectionInterface
:
:
RTCConfiguration
*
config
webrtc
:
:
PeerConnectionDependencies
dependencies
)
{
PeerConnectionInterface
:
:
RTCConfiguration
modified_config
;
if
(
config
)
{
modified_config
=
*
config
;
}
modified_config
.
set_cpu_adaptation
(
false
)
;
dependencies
.
observer
=
this
;
return
peer_connection_factory_
-
>
CreatePeerConnection
(
modified_config
std
:
:
move
(
dependencies
)
)
;
}
void
set_signaling_message_receiver
(
SignalingMessageReceiver
*
signaling_message_receiver
)
{
signaling_message_receiver_
=
signaling_message_receiver
;
}
void
set_signaling_delay_ms
(
int
delay_ms
)
{
signaling_delay_ms_
=
delay_ms
;
}
void
set_signal_ice_candidates
(
bool
signal
)
{
signal_ice_candidates_
=
signal
;
}
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
CreateLocalVideoTrackInternal
(
webrtc
:
:
FakePeriodicVideoSource
:
:
Config
config
)
{
config
.
frame_interval_ms
=
100
;
video_track_sources_
.
emplace_back
(
new
rtc
:
:
RefCountedObject
<
webrtc
:
:
FakePeriodicVideoTrackSource
>
(
config
false
)
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
track
(
peer_connection_factory_
-
>
CreateVideoTrack
(
rtc
:
:
CreateRandomUuid
(
)
video_track_sources_
.
back
(
)
)
)
;
if
(
!
local_video_renderer_
)
{
local_video_renderer_
.
reset
(
new
webrtc
:
:
FakeVideoTrackRenderer
(
track
)
)
;
}
return
track
;
}
void
HandleIncomingOffer
(
const
std
:
:
string
&
msg
)
{
RTC_LOG
(
LS_INFO
)
<
<
debug_name_
<
<
"
:
HandleIncomingOffer
"
;
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
=
webrtc
:
:
CreateSessionDescription
(
SdpType
:
:
kOffer
msg
)
;
if
(
received_sdp_munger_
)
{
received_sdp_munger_
(
desc
-
>
description
(
)
)
;
}
EXPECT_TRUE
(
SetRemoteDescription
(
std
:
:
move
(
desc
)
)
)
;
ResetRtpReceiverObservers
(
)
;
if
(
remote_offer_handler_
)
{
remote_offer_handler_
(
)
;
}
auto
answer
=
CreateAnswer
(
)
;
ASSERT_NE
(
nullptr
answer
)
;
EXPECT_TRUE
(
SetLocalDescriptionAndSendSdpMessage
(
std
:
:
move
(
answer
)
)
)
;
}
void
HandleIncomingAnswer
(
const
std
:
:
string
&
msg
)
{
RTC_LOG
(
LS_INFO
)
<
<
debug_name_
<
<
"
:
HandleIncomingAnswer
"
;
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
=
webrtc
:
:
CreateSessionDescription
(
SdpType
:
:
kAnswer
msg
)
;
if
(
received_sdp_munger_
)
{
received_sdp_munger_
(
desc
-
>
description
(
)
)
;
}
EXPECT_TRUE
(
SetRemoteDescription
(
std
:
:
move
(
desc
)
)
)
;
ResetRtpReceiverObservers
(
)
;
}
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
CreateAnswer
(
)
{
rtc
:
:
scoped_refptr
<
MockCreateSessionDescriptionObserver
>
observer
(
new
rtc
:
:
RefCountedObject
<
MockCreateSessionDescriptionObserver
>
(
)
)
;
pc
(
)
-
>
CreateAnswer
(
observer
offer_answer_options_
)
;
return
WaitForDescriptionFromObserver
(
observer
)
;
}
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
WaitForDescriptionFromObserver
(
MockCreateSessionDescriptionObserver
*
observer
)
{
EXPECT_EQ_WAIT
(
true
observer
-
>
called
(
)
kDefaultTimeout
)
;
if
(
!
observer
-
>
result
(
)
)
{
return
nullptr
;
}
auto
description
=
observer
-
>
MoveDescription
(
)
;
if
(
generated_sdp_munger_
)
{
generated_sdp_munger_
(
description
-
>
description
(
)
)
;
}
return
description
;
}
bool
SetLocalDescriptionAndSendSdpMessage
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
)
{
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
observer
(
new
rtc
:
:
RefCountedObject
<
MockSetSessionDescriptionObserver
>
(
)
)
;
RTC_LOG
(
LS_INFO
)
<
<
debug_name_
<
<
"
:
SetLocalDescriptionAndSendSdpMessage
"
;
SdpType
type
=
desc
-
>
GetType
(
)
;
std
:
:
string
sdp
;
EXPECT_TRUE
(
desc
-
>
ToString
(
&
sdp
)
)
;
RTC_LOG
(
LS_INFO
)
<
<
debug_name_
<
<
"
:
local
SDP
contents
=
\
n
"
<
<
sdp
;
pc
(
)
-
>
SetLocalDescription
(
observer
desc
.
release
(
)
)
;
RemoveUnusedVideoRenderers
(
)
;
SendSdpMessage
(
type
sdp
)
;
EXPECT_TRUE_WAIT
(
observer
-
>
called
(
)
kDefaultTimeout
)
;
return
true
;
}
bool
SetRemoteDescription
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
)
{
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
observer
(
new
rtc
:
:
RefCountedObject
<
MockSetSessionDescriptionObserver
>
(
)
)
;
RTC_LOG
(
LS_INFO
)
<
<
debug_name_
<
<
"
:
SetRemoteDescription
"
;
pc
(
)
-
>
SetRemoteDescription
(
observer
desc
.
release
(
)
)
;
RemoveUnusedVideoRenderers
(
)
;
EXPECT_TRUE_WAIT
(
observer
-
>
called
(
)
kDefaultTimeout
)
;
return
observer
-
>
result
(
)
;
}
void
RemoveUnusedVideoRenderers
(
)
{
if
(
sdp_semantics_
!
=
SdpSemantics
:
:
kUnifiedPlan
)
{
return
;
}
auto
transceivers
=
pc
(
)
-
>
GetTransceivers
(
)
;
std
:
:
set
<
std
:
:
string
>
active_renderers
;
for
(
auto
&
transceiver
:
transceivers
)
{
if
(
transceiver
-
>
receiver
(
)
-
>
media_type
(
)
=
=
cricket
:
:
MEDIA_TYPE_VIDEO
)
{
active_renderers
.
insert
(
transceiver
-
>
receiver
(
)
-
>
track
(
)
-
>
id
(
)
)
;
}
}
for
(
auto
it
=
fake_video_renderers_
.
begin
(
)
;
it
!
=
fake_video_renderers_
.
end
(
)
;
)
{
if
(
!
active_renderers
.
count
(
it
-
>
first
)
)
{
it
=
fake_video_renderers_
.
erase
(
it
)
;
}
else
{
it
+
+
;
}
}
}
void
SendSdpMessage
(
SdpType
type
const
std
:
:
string
&
msg
)
{
if
(
signaling_delay_ms_
=
=
0
)
{
RelaySdpMessageIfReceiverExists
(
type
msg
)
;
}
else
{
invoker_
.
AsyncInvokeDelayed
<
void
>
(
RTC_FROM_HERE
rtc
:
:
Thread
:
:
Current
(
)
[
this
type
msg
]
{
RelaySdpMessageIfReceiverExists
(
type
msg
)
;
}
signaling_delay_ms_
)
;
}
}
void
RelaySdpMessageIfReceiverExists
(
SdpType
type
const
std
:
:
string
&
msg
)
{
if
(
signaling_message_receiver_
)
{
signaling_message_receiver_
-
>
ReceiveSdpMessage
(
type
msg
)
;
}
}
void
SendIceMessage
(
const
std
:
:
string
&
sdp_mid
int
sdp_mline_index
const
std
:
:
string
&
msg
)
{
if
(
signaling_delay_ms_
=
=
0
)
{
RelayIceMessageIfReceiverExists
(
sdp_mid
sdp_mline_index
msg
)
;
}
else
{
invoker_
.
AsyncInvokeDelayed
<
void
>
(
RTC_FROM_HERE
rtc
:
:
Thread
:
:
Current
(
)
[
this
sdp_mid
sdp_mline_index
msg
]
{
RelayIceMessageIfReceiverExists
(
sdp_mid
sdp_mline_index
msg
)
;
}
signaling_delay_ms_
)
;
}
}
void
RelayIceMessageIfReceiverExists
(
const
std
:
:
string
&
sdp_mid
int
sdp_mline_index
const
std
:
:
string
&
msg
)
{
if
(
signaling_message_receiver_
)
{
signaling_message_receiver_
-
>
ReceiveIceMessage
(
sdp_mid
sdp_mline_index
msg
)
;
}
}
void
ReceiveSdpMessage
(
SdpType
type
const
std
:
:
string
&
msg
)
override
{
if
(
type
=
=
SdpType
:
:
kOffer
)
{
HandleIncomingOffer
(
msg
)
;
}
else
{
HandleIncomingAnswer
(
msg
)
;
}
}
void
ReceiveIceMessage
(
const
std
:
:
string
&
sdp_mid
int
sdp_mline_index
const
std
:
:
string
&
msg
)
override
{
RTC_LOG
(
LS_INFO
)
<
<
debug_name_
<
<
"
:
ReceiveIceMessage
"
;
std
:
:
unique_ptr
<
webrtc
:
:
IceCandidateInterface
>
candidate
(
webrtc
:
:
CreateIceCandidate
(
sdp_mid
sdp_mline_index
msg
nullptr
)
)
;
EXPECT_TRUE
(
pc
(
)
-
>
AddIceCandidate
(
candidate
.
get
(
)
)
)
;
}
void
OnSignalingChange
(
webrtc
:
:
PeerConnectionInterface
:
:
SignalingState
new_state
)
override
{
EXPECT_EQ
(
pc
(
)
-
>
signaling_state
(
)
new_state
)
;
peer_connection_signaling_state_history_
.
push_back
(
new_state
)
;
}
void
OnAddTrack
(
rtc
:
:
scoped_refptr
<
RtpReceiverInterface
>
receiver
const
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
MediaStreamInterface
>
>
&
streams
)
override
{
if
(
receiver
-
>
media_type
(
)
=
=
cricket
:
:
MEDIA_TYPE_VIDEO
)
{
rtc
:
:
scoped_refptr
<
VideoTrackInterface
>
video_track
(
static_cast
<
VideoTrackInterface
*
>
(
receiver
-
>
track
(
)
.
get
(
)
)
)
;
ASSERT_TRUE
(
fake_video_renderers_
.
find
(
video_track
-
>
id
(
)
)
=
=
fake_video_renderers_
.
end
(
)
)
;
fake_video_renderers_
[
video_track
-
>
id
(
)
]
=
std
:
:
make_unique
<
FakeVideoTrackRenderer
>
(
video_track
)
;
}
}
void
OnRemoveTrack
(
rtc
:
:
scoped_refptr
<
RtpReceiverInterface
>
receiver
)
override
{
if
(
receiver
-
>
media_type
(
)
=
=
cricket
:
:
MEDIA_TYPE_VIDEO
)
{
auto
it
=
fake_video_renderers_
.
find
(
receiver
-
>
track
(
)
-
>
id
(
)
)
;
if
(
it
!
=
fake_video_renderers_
.
end
(
)
)
{
fake_video_renderers_
.
erase
(
it
)
;
}
else
{
RTC_LOG
(
LS_ERROR
)
<
<
"
OnRemoveTrack
called
for
non
-
active
renderer
"
;
}
}
}
void
OnRenegotiationNeeded
(
)
override
{
}
void
OnIceConnectionChange
(
webrtc
:
:
PeerConnectionInterface
:
:
IceConnectionState
new_state
)
override
{
EXPECT_EQ
(
pc
(
)
-
>
ice_connection_state
(
)
new_state
)
;
ice_connection_state_history_
.
push_back
(
new_state
)
;
}
void
OnStandardizedIceConnectionChange
(
webrtc
:
:
PeerConnectionInterface
:
:
IceConnectionState
new_state
)
override
{
standardized_ice_connection_state_history_
.
push_back
(
new_state
)
;
}
void
OnConnectionChange
(
webrtc
:
:
PeerConnectionInterface
:
:
PeerConnectionState
new_state
)
override
{
peer_connection_state_history_
.
push_back
(
new_state
)
;
}
void
OnIceGatheringChange
(
webrtc
:
:
PeerConnectionInterface
:
:
IceGatheringState
new_state
)
override
{
EXPECT_EQ
(
pc
(
)
-
>
ice_gathering_state
(
)
new_state
)
;
ice_gathering_state_history_
.
push_back
(
new_state
)
;
}
void
OnIceSelectedCandidatePairChanged
(
const
cricket
:
:
CandidatePairChangeEvent
&
event
)
{
ice_candidate_pair_change_history_
.
push_back
(
event
)
;
}
void
OnIceCandidate
(
const
webrtc
:
:
IceCandidateInterface
*
candidate
)
override
{
RTC_LOG
(
LS_INFO
)
<
<
debug_name_
<
<
"
:
OnIceCandidate
"
;
if
(
remote_async_resolver_
)
{
const
auto
&
local_candidate
=
candidate
-
>
candidate
(
)
;
if
(
local_candidate
.
address
(
)
.
IsUnresolvedIP
(
)
)
{
RTC_DCHECK
(
local_candidate
.
type
(
)
=
=
cricket
:
:
LOCAL_PORT_TYPE
)
;
rtc
:
:
SocketAddress
resolved_addr
(
local_candidate
.
address
(
)
)
;
const
auto
resolved_ip
=
mdns_responder_
-
>
GetMappedAddressForName
(
local_candidate
.
address
(
)
.
hostname
(
)
)
;
RTC_DCHECK
(
!
resolved_ip
.
IsNil
(
)
)
;
resolved_addr
.
SetResolvedIP
(
resolved_ip
)
;
EXPECT_CALL
(
*
remote_async_resolver_
GetResolvedAddress
(
_
_
)
)
.
WillOnce
(
DoAll
(
SetArgPointee
<
1
>
(
resolved_addr
)
Return
(
true
)
)
)
;
EXPECT_CALL
(
*
remote_async_resolver_
Destroy
(
_
)
)
;
}
}
std
:
:
string
ice_sdp
;
EXPECT_TRUE
(
candidate
-
>
ToString
(
&
ice_sdp
)
)
;
if
(
signaling_message_receiver_
=
=
nullptr
|
|
!
signal_ice_candidates_
)
{
return
;
}
SendIceMessage
(
candidate
-
>
sdp_mid
(
)
candidate
-
>
sdp_mline_index
(
)
ice_sdp
)
;
last_candidate_gathered_
=
candidate
-
>
candidate
(
)
;
}
void
OnIceCandidateError
(
const
std
:
:
string
&
address
int
port
const
std
:
:
string
&
url
int
error_code
const
std
:
:
string
&
error_text
)
override
{
error_event_
=
cricket
:
:
IceCandidateErrorEvent
(
address
port
url
error_code
error_text
)
;
}
void
OnDataChannel
(
rtc
:
:
scoped_refptr
<
DataChannelInterface
>
data_channel
)
override
{
RTC_LOG
(
LS_INFO
)
<
<
debug_name_
<
<
"
:
OnDataChannel
"
;
data_channel_
=
data_channel
;
data_observer_
.
reset
(
new
MockDataChannelObserver
(
data_channel
)
)
;
}
std
:
:
string
debug_name_
;
std
:
:
unique_ptr
<
rtc
:
:
FakeNetworkManager
>
fake_network_manager_
;
webrtc
:
:
FakeMdnsResponder
*
mdns_responder_
=
nullptr
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
PeerConnectionInterface
>
peer_connection_
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
PeerConnectionFactoryInterface
>
peer_connection_factory_
;
cricket
:
:
PortAllocator
*
port_allocator_
;
rtc
:
:
scoped_refptr
<
FakeAudioCaptureModule
>
fake_audio_capture_module_
;
std
:
:
map
<
std
:
:
string
std
:
:
unique_ptr
<
webrtc
:
:
FakeVideoTrackRenderer
>
>
fake_video_renderers_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
webrtc
:
:
FakeVideoTrackRenderer
>
>
removed_fake_video_renderers_
;
SignalingMessageReceiver
*
signaling_message_receiver_
=
nullptr
;
int
signaling_delay_ms_
=
0
;
bool
signal_ice_candidates_
=
true
;
cricket
:
:
Candidate
last_candidate_gathered_
;
cricket
:
:
IceCandidateErrorEvent
error_event_
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackSource
>
>
video_track_sources_
;
std
:
:
unique_ptr
<
webrtc
:
:
FakeVideoTrackRenderer
>
local_video_renderer_
;
SdpSemantics
sdp_semantics_
;
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
offer_answer_options_
;
std
:
:
function
<
void
(
cricket
:
:
SessionDescription
*
)
>
received_sdp_munger_
;
std
:
:
function
<
void
(
cricket
:
:
SessionDescription
*
)
>
generated_sdp_munger_
;
std
:
:
function
<
void
(
)
>
remote_offer_handler_
;
rtc
:
:
MockAsyncResolver
*
remote_async_resolver_
=
nullptr
;
rtc
:
:
scoped_refptr
<
DataChannelInterface
>
data_channel_
;
std
:
:
unique_ptr
<
MockDataChannelObserver
>
data_observer_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
MockRtpReceiverObserver
>
>
rtp_receiver_observers_
;
std
:
:
vector
<
PeerConnectionInterface
:
:
IceConnectionState
>
ice_connection_state_history_
;
std
:
:
vector
<
PeerConnectionInterface
:
:
IceConnectionState
>
standardized_ice_connection_state_history_
;
std
:
:
vector
<
PeerConnectionInterface
:
:
PeerConnectionState
>
peer_connection_state_history_
;
std
:
:
vector
<
PeerConnectionInterface
:
:
IceGatheringState
>
ice_gathering_state_history_
;
std
:
:
vector
<
cricket
:
:
CandidatePairChangeEvent
>
ice_candidate_pair_change_history_
;
std
:
:
vector
<
PeerConnectionInterface
:
:
SignalingState
>
peer_connection_signaling_state_history_
;
webrtc
:
:
FakeRtcEventLogFactory
*
event_log_factory_
;
int
audio_packets_stat_
=
0
;
double
audio_delay_stat_
=
0
.
0
;
uint64_t
audio_samples_stat_
=
0
;
uint64_t
audio_concealed_stat_
=
0
;
std
:
:
string
rtp_stats_id_
;
std
:
:
string
audio_track_stats_id_
;
rtc
:
:
AsyncInvoker
invoker_
;
friend
class
PeerConnectionIntegrationBaseTest
;
}
;
class
MockRtcEventLogOutput
:
public
webrtc
:
:
RtcEventLogOutput
{
public
:
virtual
~
MockRtcEventLogOutput
(
)
=
default
;
MOCK_METHOD
(
bool
IsActive
(
)
(
const
override
)
)
;
MOCK_METHOD
(
bool
Write
(
const
std
:
:
string
&
)
(
override
)
)
;
}
;
class
MediaExpectations
{
public
:
enum
ExpectFrames
{
kExpectSomeFrames
kExpectNoFrames
kNoExpectation
}
;
void
ExpectBidirectionalAudioAndVideo
(
)
{
ExpectBidirectionalAudio
(
)
;
ExpectBidirectionalVideo
(
)
;
}
void
ExpectBidirectionalAudio
(
)
{
CallerExpectsSomeAudio
(
)
;
CalleeExpectsSomeAudio
(
)
;
}
void
ExpectNoAudio
(
)
{
CallerExpectsNoAudio
(
)
;
CalleeExpectsNoAudio
(
)
;
}
void
ExpectBidirectionalVideo
(
)
{
CallerExpectsSomeVideo
(
)
;
CalleeExpectsSomeVideo
(
)
;
}
void
ExpectNoVideo
(
)
{
CallerExpectsNoVideo
(
)
;
CalleeExpectsNoVideo
(
)
;
}
void
CallerExpectsSomeAudioAndVideo
(
)
{
CallerExpectsSomeAudio
(
)
;
CallerExpectsSomeVideo
(
)
;
}
void
CalleeExpectsSomeAudioAndVideo
(
)
{
CalleeExpectsSomeAudio
(
)
;
CalleeExpectsSomeVideo
(
)
;
}
void
CallerExpectsSomeAudio
(
int
expected_audio_frames
=
kDefaultExpectedAudioFrameCount
)
{
caller_audio_expectation_
=
kExpectSomeFrames
;
caller_audio_frames_expected_
=
expected_audio_frames
;
}
void
CallerExpectsNoAudio
(
)
{
caller_audio_expectation_
=
kExpectNoFrames
;
caller_audio_frames_expected_
=
0
;
}
void
CallerExpectsSomeVideo
(
int
expected_video_frames
=
kDefaultExpectedVideoFrameCount
)
{
caller_video_expectation_
=
kExpectSomeFrames
;
caller_video_frames_expected_
=
expected_video_frames
;
}
void
CallerExpectsNoVideo
(
)
{
caller_video_expectation_
=
kExpectNoFrames
;
caller_video_frames_expected_
=
0
;
}
void
CalleeExpectsSomeAudio
(
int
expected_audio_frames
=
kDefaultExpectedAudioFrameCount
)
{
callee_audio_expectation_
=
kExpectSomeFrames
;
callee_audio_frames_expected_
=
expected_audio_frames
;
}
void
CalleeExpectsNoAudio
(
)
{
callee_audio_expectation_
=
kExpectNoFrames
;
callee_audio_frames_expected_
=
0
;
}
void
CalleeExpectsSomeVideo
(
int
expected_video_frames
=
kDefaultExpectedVideoFrameCount
)
{
callee_video_expectation_
=
kExpectSomeFrames
;
callee_video_frames_expected_
=
expected_video_frames
;
}
void
CalleeExpectsNoVideo
(
)
{
callee_video_expectation_
=
kExpectNoFrames
;
callee_video_frames_expected_
=
0
;
}
ExpectFrames
caller_audio_expectation_
=
kNoExpectation
;
ExpectFrames
caller_video_expectation_
=
kNoExpectation
;
ExpectFrames
callee_audio_expectation_
=
kNoExpectation
;
ExpectFrames
callee_video_expectation_
=
kNoExpectation
;
int
caller_audio_frames_expected_
=
0
;
int
caller_video_frames_expected_
=
0
;
int
callee_audio_frames_expected_
=
0
;
int
callee_video_frames_expected_
=
0
;
}
;
class
MockIceTransport
:
public
webrtc
:
:
IceTransportInterface
{
public
:
MockIceTransport
(
const
std
:
:
string
&
name
int
component
)
:
internal_
(
std
:
:
make_unique
<
cricket
:
:
FakeIceTransport
>
(
name
component
nullptr
)
)
{
}
~
MockIceTransport
(
)
=
default
;
cricket
:
:
IceTransportInternal
*
internal
(
)
{
return
internal_
.
get
(
)
;
}
private
:
std
:
:
unique_ptr
<
cricket
:
:
FakeIceTransport
>
internal_
;
}
;
class
MockIceTransportFactory
:
public
IceTransportFactory
{
public
:
~
MockIceTransportFactory
(
)
override
=
default
;
rtc
:
:
scoped_refptr
<
IceTransportInterface
>
CreateIceTransport
(
const
std
:
:
string
&
transport_name
int
component
IceTransportInit
init
)
{
RecordIceTransportCreated
(
)
;
return
new
rtc
:
:
RefCountedObject
<
MockIceTransport
>
(
transport_name
component
)
;
}
MOCK_METHOD
(
void
RecordIceTransportCreated
(
)
)
;
}
;
class
PeerConnectionIntegrationBaseTest
:
public
:
:
testing
:
:
Test
{
public
:
explicit
PeerConnectionIntegrationBaseTest
(
SdpSemantics
sdp_semantics
)
:
sdp_semantics_
(
sdp_semantics
)
ss_
(
new
rtc
:
:
VirtualSocketServer
(
)
)
fss_
(
new
rtc
:
:
FirewallSocketServer
(
ss_
.
get
(
)
)
)
network_thread_
(
new
rtc
:
:
Thread
(
fss_
.
get
(
)
)
)
worker_thread_
(
rtc
:
:
Thread
:
:
Create
(
)
)
{
network_thread_
-
>
SetName
(
"
PCNetworkThread
"
this
)
;
worker_thread_
-
>
SetName
(
"
PCWorkerThread
"
this
)
;
RTC_CHECK
(
network_thread_
-
>
Start
(
)
)
;
RTC_CHECK
(
worker_thread_
-
>
Start
(
)
)
;
webrtc
:
:
metrics
:
:
Reset
(
)
;
}
~
PeerConnectionIntegrationBaseTest
(
)
{
if
(
caller_
)
{
caller_
-
>
set_signaling_message_receiver
(
nullptr
)
;
delete
SetCallerPcWrapperAndReturnCurrent
(
nullptr
)
;
}
if
(
callee_
)
{
callee_
-
>
set_signaling_message_receiver
(
nullptr
)
;
delete
SetCalleePcWrapperAndReturnCurrent
(
nullptr
)
;
}
network_thread
(
)
-
>
Invoke
<
void
>
(
RTC_FROM_HERE
[
this
]
{
turn_servers_
.
clear
(
)
;
turn_customizers_
.
clear
(
)
;
}
)
;
}
bool
SignalingStateStable
(
)
{
return
caller_
-
>
SignalingStateStable
(
)
&
&
callee_
-
>
SignalingStateStable
(
)
;
}
bool
DtlsConnected
(
)
{
return
(
callee
(
)
-
>
ice_connection_state
(
)
=
=
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
|
|
callee
(
)
-
>
ice_connection_state
(
)
=
=
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionCompleted
)
&
&
(
caller
(
)
-
>
ice_connection_state
(
)
=
=
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
|
|
caller
(
)
-
>
ice_connection_state
(
)
=
=
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionCompleted
)
;
}
std
:
:
unique_ptr
<
PeerConnectionWrapper
>
CreatePeerConnectionWrapper
(
const
std
:
:
string
&
debug_name
const
PeerConnectionFactory
:
:
Options
*
options
const
RTCConfiguration
*
config
webrtc
:
:
PeerConnectionDependencies
dependencies
std
:
:
unique_ptr
<
webrtc
:
:
FakeRtcEventLogFactory
>
event_log_factory
bool
reset_encoder_factory
bool
reset_decoder_factory
)
{
RTCConfiguration
modified_config
;
if
(
config
)
{
modified_config
=
*
config
;
}
modified_config
.
sdp_semantics
=
sdp_semantics_
;
if
(
!
dependencies
.
cert_generator
)
{
dependencies
.
cert_generator
=
std
:
:
make_unique
<
FakeRTCCertificateGenerator
>
(
)
;
}
std
:
:
unique_ptr
<
PeerConnectionWrapper
>
client
(
new
PeerConnectionWrapper
(
debug_name
)
)
;
if
(
!
client
-
>
Init
(
options
&
modified_config
std
:
:
move
(
dependencies
)
network_thread_
.
get
(
)
worker_thread_
.
get
(
)
std
:
:
move
(
event_log_factory
)
reset_encoder_factory
reset_decoder_factory
)
)
{
return
nullptr
;
}
return
client
;
}
std
:
:
unique_ptr
<
PeerConnectionWrapper
>
CreatePeerConnectionWrapperWithFakeRtcEventLog
(
const
std
:
:
string
&
debug_name
const
PeerConnectionFactory
:
:
Options
*
options
const
RTCConfiguration
*
config
webrtc
:
:
PeerConnectionDependencies
dependencies
)
{
return
CreatePeerConnectionWrapper
(
debug_name
options
config
std
:
:
move
(
dependencies
)
std
:
:
make_unique
<
webrtc
:
:
FakeRtcEventLogFactory
>
(
)
false
false
)
;
}
bool
CreatePeerConnectionWrappers
(
)
{
return
CreatePeerConnectionWrappersWithConfig
(
PeerConnectionInterface
:
:
RTCConfiguration
(
)
PeerConnectionInterface
:
:
RTCConfiguration
(
)
)
;
}
bool
CreatePeerConnectionWrappersWithSdpSemantics
(
SdpSemantics
caller_semantics
SdpSemantics
callee_semantics
)
{
SdpSemantics
original_semantics
=
sdp_semantics_
;
sdp_semantics_
=
caller_semantics
;
caller_
=
CreatePeerConnectionWrapper
(
"
Caller
"
nullptr
nullptr
webrtc
:
:
PeerConnectionDependencies
(
nullptr
)
nullptr
false
false
)
;
sdp_semantics_
=
callee_semantics
;
callee_
=
CreatePeerConnectionWrapper
(
"
Callee
"
nullptr
nullptr
webrtc
:
:
PeerConnectionDependencies
(
nullptr
)
nullptr
false
false
)
;
sdp_semantics_
=
original_semantics
;
return
caller_
&
&
callee_
;
}
bool
CreatePeerConnectionWrappersWithConfig
(
const
PeerConnectionInterface
:
:
RTCConfiguration
&
caller_config
const
PeerConnectionInterface
:
:
RTCConfiguration
&
callee_config
)
{
caller_
=
CreatePeerConnectionWrapper
(
"
Caller
"
nullptr
&
caller_config
webrtc
:
:
PeerConnectionDependencies
(
nullptr
)
nullptr
false
false
)
;
callee_
=
CreatePeerConnectionWrapper
(
"
Callee
"
nullptr
&
callee_config
webrtc
:
:
PeerConnectionDependencies
(
nullptr
)
nullptr
false
false
)
;
return
caller_
&
&
callee_
;
}
bool
CreatePeerConnectionWrappersWithConfigAndDeps
(
const
PeerConnectionInterface
:
:
RTCConfiguration
&
caller_config
webrtc
:
:
PeerConnectionDependencies
caller_dependencies
const
PeerConnectionInterface
:
:
RTCConfiguration
&
callee_config
webrtc
:
:
PeerConnectionDependencies
callee_dependencies
)
{
caller_
=
CreatePeerConnectionWrapper
(
"
Caller
"
nullptr
&
caller_config
std
:
:
move
(
caller_dependencies
)
nullptr
false
false
)
;
callee_
=
CreatePeerConnectionWrapper
(
"
Callee
"
nullptr
&
callee_config
std
:
:
move
(
callee_dependencies
)
nullptr
false
false
)
;
return
caller_
&
&
callee_
;
}
bool
CreatePeerConnectionWrappersWithOptions
(
const
PeerConnectionFactory
:
:
Options
&
caller_options
const
PeerConnectionFactory
:
:
Options
&
callee_options
)
{
caller_
=
CreatePeerConnectionWrapper
(
"
Caller
"
&
caller_options
nullptr
webrtc
:
:
PeerConnectionDependencies
(
nullptr
)
nullptr
false
false
)
;
callee_
=
CreatePeerConnectionWrapper
(
"
Callee
"
&
callee_options
nullptr
webrtc
:
:
PeerConnectionDependencies
(
nullptr
)
nullptr
false
false
)
;
return
caller_
&
&
callee_
;
}
bool
CreatePeerConnectionWrappersWithFakeRtcEventLog
(
)
{
PeerConnectionInterface
:
:
RTCConfiguration
default_config
;
caller_
=
CreatePeerConnectionWrapperWithFakeRtcEventLog
(
"
Caller
"
nullptr
&
default_config
webrtc
:
:
PeerConnectionDependencies
(
nullptr
)
)
;
callee_
=
CreatePeerConnectionWrapperWithFakeRtcEventLog
(
"
Callee
"
nullptr
&
default_config
webrtc
:
:
PeerConnectionDependencies
(
nullptr
)
)
;
return
caller_
&
&
callee_
;
}
std
:
:
unique_ptr
<
PeerConnectionWrapper
>
CreatePeerConnectionWrapperWithAlternateKey
(
)
{
std
:
:
unique_ptr
<
FakeRTCCertificateGenerator
>
cert_generator
(
new
FakeRTCCertificateGenerator
(
)
)
;
cert_generator
-
>
use_alternate_key
(
)
;
webrtc
:
:
PeerConnectionDependencies
dependencies
(
nullptr
)
;
dependencies
.
cert_generator
=
std
:
:
move
(
cert_generator
)
;
return
CreatePeerConnectionWrapper
(
"
New
Peer
"
nullptr
nullptr
std
:
:
move
(
dependencies
)
nullptr
false
false
)
;
}
bool
CreateOneDirectionalPeerConnectionWrappers
(
bool
caller_to_callee
)
{
caller_
=
CreatePeerConnectionWrapper
(
"
Caller
"
nullptr
nullptr
webrtc
:
:
PeerConnectionDependencies
(
nullptr
)
nullptr
!
caller_to_callee
caller_to_callee
)
;
callee_
=
CreatePeerConnectionWrapper
(
"
Callee
"
nullptr
nullptr
webrtc
:
:
PeerConnectionDependencies
(
nullptr
)
nullptr
caller_to_callee
!
caller_to_callee
)
;
return
caller_
&
&
callee_
;
}
cricket
:
:
TestTurnServer
*
CreateTurnServer
(
rtc
:
:
SocketAddress
internal_address
rtc
:
:
SocketAddress
external_address
cricket
:
:
ProtocolType
type
=
cricket
:
:
ProtocolType
:
:
PROTO_UDP
const
std
:
:
string
&
common_name
=
"
test
turn
server
"
)
{
rtc
:
:
Thread
*
thread
=
network_thread
(
)
;
std
:
:
unique_ptr
<
cricket
:
:
TestTurnServer
>
turn_server
=
network_thread
(
)
-
>
Invoke
<
std
:
:
unique_ptr
<
cricket
:
:
TestTurnServer
>
>
(
RTC_FROM_HERE
[
thread
internal_address
external_address
type
common_name
]
{
return
std
:
:
make_unique
<
cricket
:
:
TestTurnServer
>
(
thread
internal_address
external_address
type
true
common_name
)
;
}
)
;
turn_servers_
.
push_back
(
std
:
:
move
(
turn_server
)
)
;
return
turn_servers_
.
back
(
)
.
get
(
)
;
}
cricket
:
:
TestTurnCustomizer
*
CreateTurnCustomizer
(
)
{
std
:
:
unique_ptr
<
cricket
:
:
TestTurnCustomizer
>
turn_customizer
=
network_thread
(
)
-
>
Invoke
<
std
:
:
unique_ptr
<
cricket
:
:
TestTurnCustomizer
>
>
(
RTC_FROM_HERE
[
]
{
return
std
:
:
make_unique
<
cricket
:
:
TestTurnCustomizer
>
(
)
;
}
)
;
turn_customizers_
.
push_back
(
std
:
:
move
(
turn_customizer
)
)
;
return
turn_customizers_
.
back
(
)
.
get
(
)
;
}
void
ExpectTurnCustomizerCountersIncremented
(
cricket
:
:
TestTurnCustomizer
*
turn_customizer
)
{
unsigned
int
allow_channel_data_counter
=
network_thread
(
)
-
>
Invoke
<
unsigned
int
>
(
RTC_FROM_HERE
[
turn_customizer
]
{
return
turn_customizer
-
>
allow_channel_data_cnt_
;
}
)
;
EXPECT_GT
(
allow_channel_data_counter
0u
)
;
unsigned
int
modify_counter
=
network_thread
(
)
-
>
Invoke
<
unsigned
int
>
(
RTC_FROM_HERE
[
turn_customizer
]
{
return
turn_customizer
-
>
modify_cnt_
;
}
)
;
EXPECT_GT
(
modify_counter
0u
)
;
}
void
ConnectFakeSignaling
(
)
{
caller_
-
>
set_signaling_message_receiver
(
callee_
.
get
(
)
)
;
callee_
-
>
set_signaling_message_receiver
(
caller_
.
get
(
)
)
;
}
void
ConnectFakeSignalingForSdpOnly
(
)
{
ConnectFakeSignaling
(
)
;
SetSignalIceCandidates
(
false
)
;
}
void
SetSignalingDelayMs
(
int
delay_ms
)
{
caller_
-
>
set_signaling_delay_ms
(
delay_ms
)
;
callee_
-
>
set_signaling_delay_ms
(
delay_ms
)
;
}
void
SetSignalIceCandidates
(
bool
signal
)
{
caller_
-
>
set_signal_ice_candidates
(
signal
)
;
callee_
-
>
set_signal_ice_candidates
(
signal
)
;
}
void
SendRtpDataWithRetries
(
webrtc
:
:
DataChannelInterface
*
dc
const
std
:
:
string
&
data
int
retries
)
{
for
(
int
i
=
0
;
i
<
retries
;
+
+
i
)
{
dc
-
>
Send
(
DataBuffer
(
data
)
)
;
}
}
rtc
:
:
Thread
*
network_thread
(
)
{
return
network_thread_
.
get
(
)
;
}
rtc
:
:
VirtualSocketServer
*
virtual_socket_server
(
)
{
return
ss_
.
get
(
)
;
}
PeerConnectionWrapper
*
caller
(
)
{
return
caller_
.
get
(
)
;
}
PeerConnectionWrapper
*
SetCallerPcWrapperAndReturnCurrent
(
PeerConnectionWrapper
*
wrapper
)
{
PeerConnectionWrapper
*
old
=
caller_
.
release
(
)
;
caller_
.
reset
(
wrapper
)
;
return
old
;
}
PeerConnectionWrapper
*
callee
(
)
{
return
callee_
.
get
(
)
;
}
PeerConnectionWrapper
*
SetCalleePcWrapperAndReturnCurrent
(
PeerConnectionWrapper
*
wrapper
)
{
PeerConnectionWrapper
*
old
=
callee_
.
release
(
)
;
callee_
.
reset
(
wrapper
)
;
return
old
;
}
void
SetPortAllocatorFlags
(
uint32_t
caller_flags
uint32_t
callee_flags
)
{
network_thread
(
)
-
>
Invoke
<
void
>
(
RTC_FROM_HERE
[
this
caller_flags
]
{
caller
(
)
-
>
port_allocator
(
)
-
>
set_flags
(
caller_flags
)
;
}
)
;
network_thread
(
)
-
>
Invoke
<
void
>
(
RTC_FROM_HERE
[
this
callee_flags
]
{
callee
(
)
-
>
port_allocator
(
)
-
>
set_flags
(
callee_flags
)
;
}
)
;
}
rtc
:
:
FirewallSocketServer
*
firewall
(
)
const
{
return
fss_
.
get
(
)
;
}
bool
ExpectNewFrames
(
const
MediaExpectations
&
media_expectations
)
{
caller
(
)
-
>
RemoveUnusedVideoRenderers
(
)
;
callee
(
)
-
>
RemoveUnusedVideoRenderers
(
)
;
int
total_caller_audio_frames_expected
=
caller
(
)
-
>
audio_frames_received
(
)
;
if
(
media_expectations
.
caller_audio_expectation_
=
=
MediaExpectations
:
:
kExpectSomeFrames
)
{
total_caller_audio_frames_expected
+
=
media_expectations
.
caller_audio_frames_expected_
;
}
int
total_caller_video_frames_expected
=
caller
(
)
-
>
min_video_frames_received_per_track
(
)
;
if
(
media_expectations
.
caller_video_expectation_
=
=
MediaExpectations
:
:
kExpectSomeFrames
)
{
total_caller_video_frames_expected
+
=
media_expectations
.
caller_video_frames_expected_
;
}
int
total_callee_audio_frames_expected
=
callee
(
)
-
>
audio_frames_received
(
)
;
if
(
media_expectations
.
callee_audio_expectation_
=
=
MediaExpectations
:
:
kExpectSomeFrames
)
{
total_callee_audio_frames_expected
+
=
media_expectations
.
callee_audio_frames_expected_
;
}
int
total_callee_video_frames_expected
=
callee
(
)
-
>
min_video_frames_received_per_track
(
)
;
if
(
media_expectations
.
callee_video_expectation_
=
=
MediaExpectations
:
:
kExpectSomeFrames
)
{
total_callee_video_frames_expected
+
=
media_expectations
.
callee_video_frames_expected_
;
}
EXPECT_TRUE_WAIT
(
caller
(
)
-
>
audio_frames_received
(
)
>
=
total_caller_audio_frames_expected
&
&
caller
(
)
-
>
min_video_frames_received_per_track
(
)
>
=
total_caller_video_frames_expected
&
&
callee
(
)
-
>
audio_frames_received
(
)
>
=
total_callee_audio_frames_expected
&
&
callee
(
)
-
>
min_video_frames_received_per_track
(
)
>
=
total_callee_video_frames_expected
kMaxWaitForFramesMs
)
;
bool
expectations_correct
=
caller
(
)
-
>
audio_frames_received
(
)
>
=
total_caller_audio_frames_expected
&
&
caller
(
)
-
>
min_video_frames_received_per_track
(
)
>
=
total_caller_video_frames_expected
&
&
callee
(
)
-
>
audio_frames_received
(
)
>
=
total_callee_audio_frames_expected
&
&
callee
(
)
-
>
min_video_frames_received_per_track
(
)
>
=
total_callee_video_frames_expected
;
EXPECT_GE
(
caller
(
)
-
>
audio_frames_received
(
)
total_caller_audio_frames_expected
)
;
EXPECT_GE
(
caller
(
)
-
>
min_video_frames_received_per_track
(
)
total_caller_video_frames_expected
)
;
EXPECT_GE
(
callee
(
)
-
>
audio_frames_received
(
)
total_callee_audio_frames_expected
)
;
EXPECT_GE
(
callee
(
)
-
>
min_video_frames_received_per_track
(
)
total_callee_video_frames_expected
)
;
if
(
media_expectations
.
caller_audio_expectation_
=
=
MediaExpectations
:
:
kExpectNoFrames
)
{
EXPECT_EQ
(
caller
(
)
-
>
audio_frames_received
(
)
total_caller_audio_frames_expected
)
;
if
(
caller
(
)
-
>
audio_frames_received
(
)
!
=
total_caller_audio_frames_expected
)
{
expectations_correct
=
false
;
}
}
if
(
media_expectations
.
caller_video_expectation_
=
=
MediaExpectations
:
:
kExpectNoFrames
)
{
EXPECT_EQ
(
caller
(
)
-
>
min_video_frames_received_per_track
(
)
total_caller_video_frames_expected
)
;
if
(
caller
(
)
-
>
min_video_frames_received_per_track
(
)
!
=
total_caller_video_frames_expected
)
{
expectations_correct
=
false
;
}
}
if
(
media_expectations
.
callee_audio_expectation_
=
=
MediaExpectations
:
:
kExpectNoFrames
)
{
EXPECT_EQ
(
callee
(
)
-
>
audio_frames_received
(
)
total_callee_audio_frames_expected
)
;
if
(
callee
(
)
-
>
audio_frames_received
(
)
!
=
total_callee_audio_frames_expected
)
{
expectations_correct
=
false
;
}
}
if
(
media_expectations
.
callee_video_expectation_
=
=
MediaExpectations
:
:
kExpectNoFrames
)
{
EXPECT_EQ
(
callee
(
)
-
>
min_video_frames_received_per_track
(
)
total_callee_video_frames_expected
)
;
if
(
callee
(
)
-
>
min_video_frames_received_per_track
(
)
!
=
total_callee_video_frames_expected
)
{
expectations_correct
=
false
;
}
}
return
expectations_correct
;
}
void
ClosePeerConnections
(
)
{
caller
(
)
-
>
pc
(
)
-
>
Close
(
)
;
callee
(
)
-
>
pc
(
)
-
>
Close
(
)
;
}
void
TestNegotiatedCipherSuite
(
const
PeerConnectionFactory
:
:
Options
&
caller_options
const
PeerConnectionFactory
:
:
Options
&
callee_options
int
expected_cipher_suite
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithOptions
(
caller_options
callee_options
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
DtlsConnected
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
rtc
:
:
SrtpCryptoSuiteToName
(
expected_cipher_suite
)
caller
(
)
-
>
OldGetStats
(
)
-
>
SrtpCipher
(
)
kDefaultTimeout
)
;
EXPECT_METRIC_EQ
(
1
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
SrtpCryptoSuite
.
Audio
"
expected_cipher_suite
)
)
;
}
void
TestGcmNegotiationUsesCipherSuite
(
bool
local_gcm_enabled
bool
remote_gcm_enabled
bool
aes_ctr_enabled
int
expected_cipher_suite
)
{
PeerConnectionFactory
:
:
Options
caller_options
;
caller_options
.
crypto_options
.
srtp
.
enable_gcm_crypto_suites
=
local_gcm_enabled
;
caller_options
.
crypto_options
.
srtp
.
enable_aes128_sha1_80_crypto_cipher
=
aes_ctr_enabled
;
PeerConnectionFactory
:
:
Options
callee_options
;
callee_options
.
crypto_options
.
srtp
.
enable_gcm_crypto_suites
=
remote_gcm_enabled
;
callee_options
.
crypto_options
.
srtp
.
enable_aes128_sha1_80_crypto_cipher
=
aes_ctr_enabled
;
TestNegotiatedCipherSuite
(
caller_options
callee_options
expected_cipher_suite
)
;
}
protected
:
SdpSemantics
sdp_semantics_
;
private
:
std
:
:
unique_ptr
<
rtc
:
:
VirtualSocketServer
>
ss_
;
std
:
:
unique_ptr
<
rtc
:
:
FirewallSocketServer
>
fss_
;
std
:
:
unique_ptr
<
rtc
:
:
Thread
>
network_thread_
;
std
:
:
unique_ptr
<
rtc
:
:
Thread
>
worker_thread_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
cricket
:
:
TestTurnServer
>
>
turn_servers_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
cricket
:
:
TestTurnCustomizer
>
>
turn_customizers_
;
std
:
:
unique_ptr
<
PeerConnectionWrapper
>
caller_
;
std
:
:
unique_ptr
<
PeerConnectionWrapper
>
callee_
;
}
;
class
PeerConnectionIntegrationTest
:
public
PeerConnectionIntegrationBaseTest
public
:
:
testing
:
:
WithParamInterface
<
SdpSemantics
>
{
protected
:
PeerConnectionIntegrationTest
(
)
:
PeerConnectionIntegrationBaseTest
(
GetParam
(
)
)
{
}
}
;
class
FakeClockForTest
:
public
rtc
:
:
ScopedFakeClock
{
protected
:
FakeClockForTest
(
)
{
AdvanceTime
(
webrtc
:
:
TimeDelta
:
:
Seconds
(
1
)
)
;
}
ScopedFakeClock
&
FakeClock
(
)
{
return
*
this
;
}
}
;
class
PeerConnectionIntegrationTestWithFakeClock
:
public
FakeClockForTest
public
PeerConnectionIntegrationTest
{
}
;
class
PeerConnectionIntegrationTestPlanB
:
public
PeerConnectionIntegrationBaseTest
{
protected
:
PeerConnectionIntegrationTestPlanB
(
)
:
PeerConnectionIntegrationBaseTest
(
SdpSemantics
:
:
kPlanB
)
{
}
}
;
class
PeerConnectionIntegrationTestUnifiedPlan
:
public
PeerConnectionIntegrationBaseTest
{
protected
:
PeerConnectionIntegrationTestUnifiedPlan
(
)
:
PeerConnectionIntegrationBaseTest
(
SdpSemantics
:
:
kUnifiedPlan
)
{
}
}
;
TEST_P
(
PeerConnectionIntegrationTest
RtpReceiverObserverOnFirstPacketReceived
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ
(
2U
caller
(
)
-
>
rtp_receiver_observers
(
)
.
size
(
)
)
;
EXPECT_EQ
(
2U
callee
(
)
-
>
rtp_receiver_observers
(
)
.
size
(
)
)
;
EXPECT_TRUE_WAIT
(
absl
:
:
c_all_of
(
caller
(
)
-
>
rtp_receiver_observers
(
)
[
]
(
const
std
:
:
unique_ptr
<
MockRtpReceiverObserver
>
&
o
)
{
return
o
-
>
first_packet_received
(
)
;
}
)
kMaxWaitForFramesMs
)
;
EXPECT_TRUE_WAIT
(
absl
:
:
c_all_of
(
callee
(
)
-
>
rtp_receiver_observers
(
)
[
]
(
const
std
:
:
unique_ptr
<
MockRtpReceiverObserver
>
&
o
)
{
return
o
-
>
first_packet_received
(
)
;
}
)
kMaxWaitForFramesMs
)
;
caller
(
)
-
>
ResetRtpReceiverObservers
(
)
;
callee
(
)
-
>
ResetRtpReceiverObservers
(
)
;
EXPECT_EQ
(
2U
caller
(
)
-
>
rtp_receiver_observers
(
)
.
size
(
)
)
;
EXPECT_EQ
(
2U
callee
(
)
-
>
rtp_receiver_observers
(
)
.
size
(
)
)
;
EXPECT_TRUE
(
absl
:
:
c_all_of
(
caller
(
)
-
>
rtp_receiver_observers
(
)
[
]
(
const
std
:
:
unique_ptr
<
MockRtpReceiverObserver
>
&
o
)
{
return
o
-
>
first_packet_received
(
)
;
}
)
)
;
EXPECT_TRUE
(
absl
:
:
c_all_of
(
callee
(
)
-
>
rtp_receiver_observers
(
)
[
]
(
const
std
:
:
unique_ptr
<
MockRtpReceiverObserver
>
&
o
)
{
return
o
-
>
first_packet_received
(
)
;
}
)
)
;
}
class
DummyDtmfObserver
:
public
DtmfSenderObserverInterface
{
public
:
DummyDtmfObserver
(
)
:
completed_
(
false
)
{
}
void
OnToneChange
(
const
std
:
:
string
&
tone
)
override
{
tones_
.
push_back
(
tone
)
;
if
(
tone
.
empty
(
)
)
{
completed_
=
true
;
}
}
const
std
:
:
vector
<
std
:
:
string
>
&
tones
(
)
const
{
return
tones_
;
}
bool
completed
(
)
const
{
return
completed_
;
}
private
:
bool
completed_
;
std
:
:
vector
<
std
:
:
string
>
tones_
;
}
;
void
TestDtmfFromSenderToReceiver
(
PeerConnectionWrapper
*
sender
PeerConnectionWrapper
*
receiver
)
{
rtc
:
:
scoped_refptr
<
DtmfSenderInterface
>
dtmf_sender
=
sender
-
>
pc
(
)
-
>
GetSenders
(
)
.
at
(
0
)
-
>
GetDtmfSender
(
)
;
ASSERT_TRUE
(
dtmf_sender
)
;
DummyDtmfObserver
observer
;
dtmf_sender
-
>
RegisterObserver
(
&
observer
)
;
EXPECT_TRUE
(
dtmf_sender
-
>
CanInsertDtmf
(
)
)
;
EXPECT_TRUE
(
dtmf_sender
-
>
InsertDtmf
(
"
1a
"
100
50
)
)
;
EXPECT_TRUE_WAIT
(
observer
.
completed
(
)
kDefaultTimeout
)
;
std
:
:
vector
<
std
:
:
string
>
tones
=
{
"
1
"
"
a
"
"
"
}
;
EXPECT_EQ
(
tones
observer
.
tones
(
)
)
;
dtmf_sender
-
>
UnregisterObserver
(
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
DtmfSenderObserver
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
DtlsConnected
(
)
kDefaultTimeout
)
;
TestDtmfFromSenderToReceiver
(
caller
(
)
callee
(
)
)
;
TestDtmfFromSenderToReceiver
(
callee
(
)
caller
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithDtls
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
EXPECT_METRIC_LE
(
2
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
KeyProtocol
"
webrtc
:
:
kEnumCounterKeyProtocolDtls
)
)
;
EXPECT_METRIC_EQ
(
0
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
KeyProtocol
"
webrtc
:
:
kEnumCounterKeyProtocolSdes
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithSdes
)
{
PeerConnectionInterface
:
:
RTCConfiguration
sdes_config
;
sdes_config
.
enable_dtls_srtp
.
emplace
(
false
)
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
sdes_config
sdes_config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
EXPECT_METRIC_LE
(
2
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
KeyProtocol
"
webrtc
:
:
kEnumCounterKeyProtocolSdes
)
)
;
EXPECT_METRIC_EQ
(
0
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
KeyProtocol
"
webrtc
:
:
kEnumCounterKeyProtocolDtls
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithEncryptedRtpHeaderExtensions
)
{
CryptoOptions
crypto_options
;
crypto_options
.
srtp
.
enable_encrypted_rtp_header_extensions
=
true
;
PeerConnectionInterface
:
:
RTCConfiguration
config
;
config
.
crypto_options
=
crypto_options
;
config
.
offer_extmap_allow_mixed
=
true
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
Send1280By720ResolutionAndReceive16To9AspectRatio
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
webrtc
:
:
FakePeriodicVideoSource
:
:
Config
config
;
config
.
width
=
1280
;
config
.
height
=
720
;
config
.
timestamp_offset_ms
=
rtc
:
:
TimeMillis
(
)
;
caller
(
)
-
>
AddTrack
(
caller
(
)
-
>
CreateLocalVideoTrackWithConfig
(
config
)
)
;
callee
(
)
-
>
AddTrack
(
callee
(
)
-
>
CreateLocalVideoTrackWithConfig
(
config
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
caller
(
)
-
>
min_video_frames_received_per_track
(
)
>
0
&
&
callee
(
)
-
>
min_video_frames_received_per_track
(
)
>
0
kMaxWaitForFramesMs
)
;
EXPECT_EQ
(
16
.
0
/
9
caller
(
)
-
>
local_rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
16
.
0
/
9
caller
(
)
-
>
rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
16
.
0
/
9
callee
(
)
-
>
local_rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
16
.
0
/
9
callee
(
)
-
>
rendered_aspect_ratio
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
OneWayMediaCall
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudioAndVideo
(
)
;
media_expectations
.
CallerExpectsNoAudio
(
)
;
media_expectations
.
CallerExpectsNoVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithSendOnlyVideo
)
{
ASSERT_TRUE
(
CreateOneDirectionalPeerConnectionWrappers
(
true
)
)
;
ConnectFakeSignaling
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
caller_track
=
caller
(
)
-
>
CreateLocalVideoTrack
(
)
;
caller
(
)
-
>
AddTrack
(
caller_track
)
;
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_video
=
0
;
caller
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_EQ
(
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
1u
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CallerExpectsNoVideo
(
)
;
media_expectations
.
CalleeExpectsSomeVideo
(
)
;
EXPECT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithReceiveOnlyVideo
)
{
ASSERT_TRUE
(
CreateOneDirectionalPeerConnectionWrappers
(
false
)
)
;
ConnectFakeSignaling
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
callee_track
=
callee
(
)
-
>
CreateLocalVideoTrack
(
)
;
callee
(
)
-
>
AddTrack
(
callee_track
)
;
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_video
=
1
;
caller
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_EQ
(
caller
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
1u
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CallerExpectsSomeVideo
(
)
;
media_expectations
.
CalleeExpectsNoVideo
(
)
;
EXPECT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallAddReceiveVideoToSendOnlyCall
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
caller_track
=
caller
(
)
-
>
CreateLocalVideoTrack
(
)
;
caller
(
)
-
>
AddTrack
(
caller_track
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
callee_track
=
callee
(
)
-
>
CreateLocalVideoTrack
(
)
;
callee
(
)
-
>
AddTrack
(
callee_track
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallAddSendVideoToReceiveOnlyCall
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
callee_track
=
callee
(
)
-
>
CreateLocalVideoTrack
(
)
;
callee
(
)
-
>
AddTrack
(
callee_track
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
caller_track
=
caller
(
)
-
>
CreateLocalVideoTrack
(
)
;
caller
(
)
-
>
AddTrack
(
caller_track
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallRemoveReceiveVideoFromSendReceiveCall
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
caller_track
=
caller
(
)
-
>
CreateLocalVideoTrack
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
RtpSenderInterface
>
caller_sender
=
caller
(
)
-
>
AddTrack
(
caller_track
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
callee_track
=
callee
(
)
-
>
CreateLocalVideoTrack
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
RtpSenderInterface
>
callee_sender
=
callee
(
)
-
>
AddTrack
(
callee_track
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
callee
(
)
-
>
pc
(
)
-
>
RemoveTrack
(
callee_sender
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CallerExpectsNoVideo
(
)
;
media_expectations
.
CalleeExpectsSomeVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallRemoveSendVideoFromSendReceiveCall
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
caller_track
=
caller
(
)
-
>
CreateLocalVideoTrack
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
RtpSenderInterface
>
caller_sender
=
caller
(
)
-
>
AddTrack
(
caller_track
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
callee_track
=
callee
(
)
-
>
CreateLocalVideoTrack
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
RtpSenderInterface
>
callee_sender
=
callee
(
)
-
>
AddTrack
(
callee_track
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
pc
(
)
-
>
RemoveTrack
(
caller_sender
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsNoVideo
(
)
;
media_expectations
.
CallerExpectsSomeVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
AudioToVideoUpgrade
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioTrack
(
)
;
if
(
sdp_semantics_
=
=
SdpSemantics
:
:
kPlanB
)
{
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_video
=
0
;
callee
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
}
else
{
callee
(
)
-
>
SetRemoteOfferHandler
(
[
this
]
{
callee
(
)
-
>
GetFirstTransceiverOfType
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
-
>
StopInternal
(
)
;
}
)
;
}
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudio
(
)
;
media_expectations
.
ExpectNoVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
ASSERT_NE
(
nullptr
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
)
;
const
ContentInfo
*
callee_video_content
=
GetFirstVideoContent
(
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
)
;
ASSERT_NE
(
nullptr
callee_video_content
)
;
EXPECT_TRUE
(
callee_video_content
-
>
rejected
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
if
(
sdp_semantics_
=
=
SdpSemantics
:
:
kPlanB
)
{
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_video
=
1
;
callee
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
}
else
{
callee
(
)
-
>
SetRemoteOfferHandler
(
nullptr
)
;
caller
(
)
-
>
SetRemoteOfferHandler
(
[
this
]
{
auto
transceivers
=
caller
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
;
ASSERT_EQ
(
2U
transceivers
.
size
(
)
)
;
ASSERT_EQ
(
cricket
:
:
MEDIA_TYPE_VIDEO
transceivers
[
1
]
-
>
receiver
(
)
-
>
media_type
(
)
)
;
transceivers
[
1
]
-
>
sender
(
)
-
>
SetTrack
(
caller
(
)
-
>
CreateLocalVideoTrack
(
)
)
;
transceivers
[
1
]
-
>
SetDirectionWithError
(
RtpTransceiverDirection
:
:
kSendRecv
)
;
}
)
;
}
callee
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
}
TEST_P
(
PeerConnectionIntegrationTest
AddAudioToVideoOnlyCall
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
CallTransferredForCallee
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
std
:
:
unique_ptr
<
PeerConnectionWrapper
>
original_peer
(
SetCallerPcWrapperAndReturnCurrent
(
CreatePeerConnectionWrapperWithAlternateKey
(
)
.
release
(
)
)
)
;
original_peer
-
>
pc
(
)
-
>
Close
(
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
CallTransferredForCaller
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
std
:
:
unique_ptr
<
PeerConnectionWrapper
>
original_peer
(
SetCalleePcWrapperAndReturnCurrent
(
CreatePeerConnectionWrapperWithAlternateKey
(
)
.
release
(
)
)
)
;
original_peer
-
>
pc
(
)
-
>
Close
(
)
;
ConnectFakeSignaling
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
SetOfferAnswerOptions
(
IceRestartOfferAnswerOptions
(
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
BundlingEnabledWhileIceRestartOccurs
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
[
]
(
cricket
:
:
SessionDescription
*
desc
)
{
desc
-
>
RemoveGroupByName
(
"
BUNDLE
"
)
;
}
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
callee
(
)
-
>
SetReceivedSdpMunger
(
nullptr
)
;
caller
(
)
-
>
SetOfferAnswerOptions
(
IceRestartOfferAnswerOptions
(
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
}
TEST_P
(
PeerConnectionIntegrationTest
RotatedVideoWithCVOExtension
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddTrack
(
caller
(
)
-
>
CreateLocalVideoTrackWithRotation
(
webrtc
:
:
kVideoRotation_90
)
)
;
callee
(
)
-
>
AddTrack
(
callee
(
)
-
>
CreateLocalVideoTrackWithRotation
(
webrtc
:
:
kVideoRotation_270
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
caller
(
)
-
>
min_video_frames_received_per_track
(
)
>
0
&
&
callee
(
)
-
>
min_video_frames_received_per_track
(
)
>
0
kMaxWaitForFramesMs
)
;
EXPECT_EQ
(
4
.
0
/
3
caller
(
)
-
>
local_rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
4
.
0
/
3
caller
(
)
-
>
rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
4
.
0
/
3
callee
(
)
-
>
local_rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
4
.
0
/
3
callee
(
)
-
>
rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
kVideoRotation_270
caller
(
)
-
>
rendered_rotation
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
kVideoRotation_90
callee
(
)
-
>
rendered_rotation
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
RotatedVideoWithoutCVOExtension
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddTrack
(
caller
(
)
-
>
CreateLocalVideoTrackWithRotation
(
webrtc
:
:
kVideoRotation_90
)
)
;
callee
(
)
-
>
AddTrack
(
callee
(
)
-
>
CreateLocalVideoTrackWithRotation
(
webrtc
:
:
kVideoRotation_270
)
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
[
]
(
cricket
:
:
SessionDescription
*
desc
)
{
cricket
:
:
VideoContentDescription
*
video
=
GetFirstVideoContentDescription
(
desc
)
;
video
-
>
ClearRtpHeaderExtensions
(
)
;
}
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
caller
(
)
-
>
min_video_frames_received_per_track
(
)
>
0
&
&
callee
(
)
-
>
min_video_frames_received_per_track
(
)
>
0
kMaxWaitForFramesMs
)
;
EXPECT_EQ
(
3
.
0
/
4
caller
(
)
-
>
local_rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
3
.
0
/
4
caller
(
)
-
>
rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
3
.
0
/
4
callee
(
)
-
>
local_rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
3
.
0
/
4
callee
(
)
-
>
rendered_aspect_ratio
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
kVideoRotation_0
caller
(
)
-
>
rendered_rotation
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
kVideoRotation_0
callee
(
)
-
>
rendered_rotation
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
AnswererRejectsAudioSection
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
if
(
sdp_semantics_
=
=
SdpSemantics
:
:
kPlanB
)
{
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_audio
=
0
;
callee
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
}
else
{
callee
(
)
-
>
SetRemoteOfferHandler
(
[
this
]
{
callee
(
)
-
>
GetFirstTransceiverOfType
(
cricket
:
:
MEDIA_TYPE_AUDIO
)
-
>
StopInternal
(
)
;
}
)
;
}
callee
(
)
-
>
AddTrack
(
callee
(
)
-
>
CreateLocalVideoTrack
(
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalVideo
(
)
;
media_expectations
.
ExpectNoAudio
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
ASSERT_NE
(
nullptr
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
)
;
const
ContentInfo
*
callee_audio_content
=
GetFirstAudioContent
(
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
)
;
ASSERT_NE
(
nullptr
callee_audio_content
)
;
EXPECT_TRUE
(
callee_audio_content
-
>
rejected
)
;
if
(
sdp_semantics_
=
=
SdpSemantics
:
:
kUnifiedPlan
)
{
EXPECT_EQ
(
nullptr
caller
(
)
-
>
GetFirstTransceiverOfType
(
cricket
:
:
MEDIA_TYPE_AUDIO
)
)
;
}
}
TEST_P
(
PeerConnectionIntegrationTest
AnswererRejectsVideoSection
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
if
(
sdp_semantics_
=
=
SdpSemantics
:
:
kPlanB
)
{
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_video
=
0
;
callee
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
}
else
{
callee
(
)
-
>
SetRemoteOfferHandler
(
[
this
]
{
callee
(
)
-
>
GetFirstTransceiverOfType
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
-
>
StopInternal
(
)
;
}
)
;
}
callee
(
)
-
>
AddTrack
(
callee
(
)
-
>
CreateLocalAudioTrack
(
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudio
(
)
;
media_expectations
.
ExpectNoVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
ASSERT_NE
(
nullptr
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
)
;
const
ContentInfo
*
callee_video_content
=
GetFirstVideoContent
(
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
)
;
ASSERT_NE
(
nullptr
callee_video_content
)
;
EXPECT_TRUE
(
callee_video_content
-
>
rejected
)
;
if
(
sdp_semantics_
=
=
SdpSemantics
:
:
kUnifiedPlan
)
{
EXPECT_EQ
(
nullptr
caller
(
)
-
>
GetFirstTransceiverOfType
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
)
;
}
}
TEST_P
(
PeerConnectionIntegrationTest
AnswererRejectsAudioAndVideoSections
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
if
(
sdp_semantics_
=
=
SdpSemantics
:
:
kPlanB
)
{
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_audio
=
0
;
options
.
offer_to_receive_video
=
0
;
callee
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
}
else
{
callee
(
)
-
>
SetRemoteOfferHandler
(
[
this
]
{
for
(
const
auto
&
transceiver
:
callee
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
)
{
transceiver
-
>
StopInternal
(
)
;
}
}
)
;
}
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_NE
(
nullptr
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
)
;
const
ContentInfo
*
callee_audio_content
=
GetFirstAudioContent
(
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
)
;
ASSERT_NE
(
nullptr
callee_audio_content
)
;
EXPECT_TRUE
(
callee_audio_content
-
>
rejected
)
;
const
ContentInfo
*
callee_video_content
=
GetFirstVideoContent
(
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
)
;
ASSERT_NE
(
nullptr
callee_video_content
)
;
EXPECT_TRUE
(
callee_video_content
-
>
rejected
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
VideoRejectedInSubsequentOffer
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
if
(
sdp_semantics_
=
=
SdpSemantics
:
:
kPlanB
)
{
caller
(
)
-
>
SetGeneratedSdpMunger
(
[
]
(
cricket
:
:
SessionDescription
*
description
)
{
for
(
cricket
:
:
ContentInfo
&
content
:
description
-
>
contents
(
)
)
{
if
(
cricket
:
:
IsVideoContent
(
&
content
)
)
{
content
.
rejected
=
true
;
}
}
}
)
;
}
else
{
caller
(
)
-
>
GetFirstTransceiverOfType
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
-
>
StopInternal
(
)
;
}
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kMaxWaitForActivationMs
)
;
ASSERT_NE
(
nullptr
caller
(
)
-
>
pc
(
)
-
>
local_description
(
)
)
;
const
ContentInfo
*
caller_video_content
=
GetFirstVideoContent
(
caller
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
)
;
ASSERT_NE
(
nullptr
caller_video_content
)
;
EXPECT_TRUE
(
caller_video_content
-
>
rejected
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudio
(
)
;
media_expectations
.
ExpectNoVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
}
TEST_F
(
PeerConnectionIntegrationTestPlanB
EnableAudioAfterRejecting
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioTrackInterface
>
track
=
caller
(
)
-
>
CreateLocalAudioTrack
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
RtpSenderInterface
>
sender
=
caller
(
)
-
>
pc
(
)
-
>
AddTrack
(
track
{
"
stream
"
}
)
.
MoveValue
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
pc
(
)
-
>
RemoveTrack
(
sender
)
;
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_audio
=
0
;
caller
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
sender
=
caller
(
)
-
>
pc
(
)
-
>
AddTrack
(
track
{
"
stream
"
}
)
.
MoveValue
(
)
;
options
.
offer_to_receive_audio
=
1
;
caller
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
)
;
EXPECT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithoutSsrcOrMsidSignaling
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
RemoveSsrcsAndMsids
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
EndToEndCallWithoutSsrcSignaling
)
{
const
char
kStreamId
[
]
=
"
streamId
"
;
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddTrack
(
caller
(
)
-
>
CreateLocalAudioTrack
(
)
{
kStreamId
}
)
;
callee
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
RemoveSsrcsAndKeepMsids
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudio
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
EndToEndCallAddReceiveVideoToSendOnlyCall
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
track
=
caller
(
)
-
>
CreateLocalVideoTrack
(
)
;
RtpTransceiverInit
video_transceiver_init
;
video_transceiver_init
.
stream_ids
=
{
"
video1
"
}
;
video_transceiver_init
.
direction
=
RtpTransceiverDirection
:
:
kSendOnly
;
auto
video_sender
=
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
track
video_transceiver_init
)
.
MoveValue
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
video_sender
-
>
SetDirectionWithError
(
RtpTransceiverDirection
:
:
kSendRecv
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
callee_track
=
callee
(
)
-
>
CreateLocalVideoTrack
(
)
;
callee
(
)
-
>
AddTrack
(
callee_track
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
EndToEndCallWithTwoVideoTracksAndNoSignaledSsrc
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
SetReceivedSdpMunger
(
&
RemoveSsrcsAndKeepMsids
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
&
RemoveSsrcsAndKeepMsids
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_EQ
(
2u
caller
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
)
;
ASSERT_EQ
(
2u
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalVideo
(
)
;
EXPECT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
void
RemoveBundleGroupSsrcsAndMidExtension
(
cricket
:
:
SessionDescription
*
desc
)
{
RemoveSsrcsAndKeepMsids
(
desc
)
;
desc
-
>
RemoveGroupByName
(
"
BUNDLE
"
)
;
for
(
ContentInfo
&
content
:
desc
-
>
contents
(
)
)
{
cricket
:
:
MediaContentDescription
*
media
=
content
.
media_description
(
)
;
cricket
:
:
RtpHeaderExtensions
extensions
=
media
-
>
rtp_header_extensions
(
)
;
extensions
.
erase
(
std
:
:
remove_if
(
extensions
.
begin
(
)
extensions
.
end
(
)
[
]
(
const
RtpExtension
&
extension
)
{
return
extension
.
uri
=
=
RtpExtension
:
:
kMidUri
;
}
)
extensions
.
end
(
)
)
;
media
-
>
set_rtp_header_extensions
(
extensions
)
;
}
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
EndToEndCallWithTwoVideoTracksNoBundleNoSignaledSsrcAndNoMid
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
SetReceivedSdpMunger
(
&
RemoveBundleGroupSsrcsAndMidExtension
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
&
RemoveBundleGroupSsrcsAndMidExtension
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_EQ
(
2u
caller
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
)
;
ASSERT_EQ
(
2u
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
)
;
ASSERT_NE
(
caller
(
)
-
>
pc
(
)
-
>
GetSenders
(
)
[
0
]
-
>
dtls_transport
(
)
caller
(
)
-
>
pc
(
)
-
>
GetSenders
(
)
[
1
]
-
>
dtls_transport
(
)
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalVideo
(
)
;
EXPECT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
void
ModifyPayloadTypesAndRemoveMidExtension
(
cricket
:
:
SessionDescription
*
desc
)
{
int
pt
=
96
;
for
(
ContentInfo
&
content
:
desc
-
>
contents
(
)
)
{
cricket
:
:
MediaContentDescription
*
media
=
content
.
media_description
(
)
;
cricket
:
:
RtpHeaderExtensions
extensions
=
media
-
>
rtp_header_extensions
(
)
;
extensions
.
erase
(
std
:
:
remove_if
(
extensions
.
begin
(
)
extensions
.
end
(
)
[
]
(
const
RtpExtension
&
extension
)
{
return
extension
.
uri
=
=
RtpExtension
:
:
kMidUri
;
}
)
extensions
.
end
(
)
)
;
media
-
>
set_rtp_header_extensions
(
extensions
)
;
cricket
:
:
VideoContentDescription
*
video
=
media
-
>
as_video
(
)
;
ASSERT_TRUE
(
video
!
=
nullptr
)
;
std
:
:
vector
<
cricket
:
:
VideoCodec
>
codecs
=
{
{
pt
+
+
"
VP8
"
}
}
;
video
-
>
set_codecs
(
codecs
)
;
}
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
EndToEndCallWithTwoVideoTracksDemultiplexedByPayloadType
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
SetGeneratedSdpMunger
(
&
ModifyPayloadTypesAndRemoveMidExtension
)
;
callee
(
)
-
>
SetGeneratedSdpMunger
(
&
ModifyPayloadTypesAndRemoveMidExtension
)
;
caller
(
)
-
>
SetReceivedSdpMunger
(
&
RemoveSsrcsAndKeepMsids
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
&
RemoveSsrcsAndKeepMsids
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_EQ
(
2u
caller
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
)
;
ASSERT_EQ
(
2u
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
)
;
ASSERT_EQ
(
caller
(
)
-
>
pc
(
)
-
>
GetSenders
(
)
[
0
]
-
>
dtls_transport
(
)
caller
(
)
-
>
pc
(
)
-
>
GetSenders
(
)
[
1
]
-
>
dtls_transport
(
)
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalVideo
(
)
;
EXPECT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
NoStreamsMsidLinePresent
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
callee_receivers
=
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
;
ASSERT_EQ
(
2u
callee_receivers
.
size
(
)
)
;
EXPECT_TRUE
(
callee_receivers
[
0
]
-
>
stream_ids
(
)
.
empty
(
)
)
;
EXPECT_TRUE
(
callee_receivers
[
1
]
-
>
stream_ids
(
)
.
empty
(
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
NoStreamsMsidLineMissing
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
RemoveSsrcsAndMsids
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
callee_receivers
=
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
;
ASSERT_EQ
(
2u
callee_receivers
.
size
(
)
)
;
ASSERT_EQ
(
1u
callee_receivers
[
0
]
-
>
stream_ids
(
)
.
size
(
)
)
;
ASSERT_EQ
(
1u
callee_receivers
[
1
]
-
>
stream_ids
(
)
.
size
(
)
)
;
EXPECT_EQ
(
callee_receivers
[
0
]
-
>
stream_ids
(
)
[
0
]
callee_receivers
[
1
]
-
>
stream_ids
(
)
[
0
]
)
;
EXPECT_EQ
(
callee_receivers
[
0
]
-
>
streams
(
)
[
0
]
callee_receivers
[
1
]
-
>
streams
(
)
[
0
]
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithTwoVideoTracks
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_EQ
(
3u
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
static
void
MakeSpecCompliantMaxBundleOffer
(
cricket
:
:
SessionDescription
*
desc
)
{
bool
first
=
true
;
for
(
cricket
:
:
ContentInfo
&
content
:
desc
-
>
contents
(
)
)
{
if
(
first
)
{
first
=
false
;
continue
;
}
content
.
bundle_only
=
true
;
}
first
=
true
;
for
(
cricket
:
:
TransportInfo
&
transport
:
desc
-
>
transport_infos
(
)
)
{
if
(
first
)
{
first
=
false
;
continue
;
}
transport
.
description
.
ice_ufrag
.
clear
(
)
;
transport
.
description
.
ice_pwd
.
clear
(
)
;
transport
.
description
.
connection_role
=
cricket
:
:
CONNECTIONROLE_NONE
;
transport
.
description
.
identity_fingerprint
.
reset
(
nullptr
)
;
}
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithSpecCompliantMaxBundleOffer
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
MakeSpecCompliantMaxBundleOffer
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
GetAudioOutputLevelStatsWithOldStatsApi
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
callee
(
)
-
>
OldGetStats
(
)
-
>
AudioOutputLevel
(
)
>
0
kMaxWaitForFramesMs
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
GetAudioInputLevelStatsWithOldStatsApi
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
caller
(
)
-
>
OldGetStats
(
)
-
>
AudioInputLevel
(
)
>
0
kMaxWaitForStatsMs
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
GetBytesReceivedStatsWithOldStatsApi
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
for
(
const
auto
&
receiver
:
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
)
{
EXPECT_GT
(
callee
(
)
-
>
OldGetStatsForTrack
(
receiver
-
>
track
(
)
)
-
>
BytesReceived
(
)
0
)
;
}
}
TEST_P
(
PeerConnectionIntegrationTest
GetBytesSentStatsWithOldStatsApi
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
auto
audio_track
=
caller
(
)
-
>
CreateLocalAudioTrack
(
)
;
auto
video_track
=
caller
(
)
-
>
CreateLocalVideoTrack
(
)
;
caller
(
)
-
>
AddTrack
(
audio_track
)
;
caller
(
)
-
>
AddTrack
(
video_track
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
EXPECT_GT
(
caller
(
)
-
>
OldGetStatsForTrack
(
audio_track
)
-
>
BytesSent
(
)
0
)
;
EXPECT_GT
(
caller
(
)
-
>
OldGetStatsForTrack
(
video_track
)
-
>
BytesSent
(
)
0
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
GetCaptureStartNtpTimeWithOldStatsApi
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
receivers
=
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
;
ASSERT_EQ
(
1u
receivers
.
size
(
)
)
;
auto
remote_audio_track
=
receivers
[
0
]
-
>
track
(
)
;
EXPECT_TRUE_WAIT
(
callee
(
)
-
>
OldGetStatsForTrack
(
remote_audio_track
)
-
>
CaptureStartNtpTime
(
)
>
0
2
*
kMaxWaitForFramesMs
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
OldGetStatsAssociatesTrackIdForManyMediaSections
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
auto
audio_sender_1
=
caller
(
)
-
>
AddAudioTrack
(
)
;
auto
video_sender_1
=
caller
(
)
-
>
AddVideoTrack
(
)
;
auto
audio_sender_2
=
caller
(
)
-
>
AddAudioTrack
(
)
;
auto
video_sender_2
=
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudioAndVideo
(
)
;
ASSERT_TRUE_WAIT
(
ExpectNewFrames
(
media_expectations
)
kDefaultTimeout
)
;
std
:
:
vector
<
std
:
:
string
>
track_ids
=
{
audio_sender_1
-
>
track
(
)
-
>
id
(
)
video_sender_1
-
>
track
(
)
-
>
id
(
)
audio_sender_2
-
>
track
(
)
-
>
id
(
)
video_sender_2
-
>
track
(
)
-
>
id
(
)
}
;
auto
caller_stats
=
caller
(
)
-
>
OldGetStats
(
)
;
EXPECT_THAT
(
caller_stats
-
>
TrackIds
(
)
UnorderedElementsAreArray
(
track_ids
)
)
;
auto
callee_stats
=
callee
(
)
-
>
OldGetStats
(
)
;
EXPECT_THAT
(
callee_stats
-
>
TrackIds
(
)
UnorderedElementsAreArray
(
track_ids
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
NewGetStatsManyAudioAndManyVideoStreams
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
auto
audio_sender_1
=
caller
(
)
-
>
AddAudioTrack
(
)
;
auto
video_sender_1
=
caller
(
)
-
>
AddVideoTrack
(
)
;
auto
audio_sender_2
=
caller
(
)
-
>
AddAudioTrack
(
)
;
auto
video_sender_2
=
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudioAndVideo
(
)
;
ASSERT_TRUE_WAIT
(
ExpectNewFrames
(
media_expectations
)
kDefaultTimeout
)
;
std
:
:
vector
<
std
:
:
string
>
track_ids
=
{
audio_sender_1
-
>
track
(
)
-
>
id
(
)
video_sender_1
-
>
track
(
)
-
>
id
(
)
audio_sender_2
-
>
track
(
)
-
>
id
(
)
video_sender_2
-
>
track
(
)
-
>
id
(
)
}
;
rtc
:
:
scoped_refptr
<
const
webrtc
:
:
RTCStatsReport
>
caller_report
=
caller
(
)
-
>
NewGetStats
(
)
;
ASSERT_TRUE
(
caller_report
)
;
auto
outbound_stream_stats
=
caller_report
-
>
GetStatsOfType
<
webrtc
:
:
RTCOutboundRTPStreamStats
>
(
)
;
ASSERT_EQ
(
outbound_stream_stats
.
size
(
)
4u
)
;
std
:
:
vector
<
std
:
:
string
>
outbound_track_ids
;
for
(
const
auto
&
stat
:
outbound_stream_stats
)
{
ASSERT_TRUE
(
stat
-
>
bytes_sent
.
is_defined
(
)
)
;
EXPECT_LT
(
0u
*
stat
-
>
bytes_sent
)
;
if
(
*
stat
-
>
kind
=
=
"
video
"
)
{
ASSERT_TRUE
(
stat
-
>
key_frames_encoded
.
is_defined
(
)
)
;
EXPECT_GT
(
*
stat
-
>
key_frames_encoded
0u
)
;
ASSERT_TRUE
(
stat
-
>
frames_encoded
.
is_defined
(
)
)
;
EXPECT_GE
(
*
stat
-
>
frames_encoded
*
stat
-
>
key_frames_encoded
)
;
}
ASSERT_TRUE
(
stat
-
>
track_id
.
is_defined
(
)
)
;
const
auto
*
track_stat
=
caller_report
-
>
GetAs
<
webrtc
:
:
RTCMediaStreamTrackStats
>
(
*
stat
-
>
track_id
)
;
ASSERT_TRUE
(
track_stat
)
;
outbound_track_ids
.
push_back
(
*
track_stat
-
>
track_identifier
)
;
}
EXPECT_THAT
(
outbound_track_ids
UnorderedElementsAreArray
(
track_ids
)
)
;
rtc
:
:
scoped_refptr
<
const
webrtc
:
:
RTCStatsReport
>
callee_report
=
callee
(
)
-
>
NewGetStats
(
)
;
ASSERT_TRUE
(
callee_report
)
;
auto
inbound_stream_stats
=
callee_report
-
>
GetStatsOfType
<
webrtc
:
:
RTCInboundRTPStreamStats
>
(
)
;
ASSERT_EQ
(
4u
inbound_stream_stats
.
size
(
)
)
;
std
:
:
vector
<
std
:
:
string
>
inbound_track_ids
;
for
(
const
auto
&
stat
:
inbound_stream_stats
)
{
ASSERT_TRUE
(
stat
-
>
bytes_received
.
is_defined
(
)
)
;
EXPECT_LT
(
0u
*
stat
-
>
bytes_received
)
;
if
(
*
stat
-
>
kind
=
=
"
video
"
)
{
ASSERT_TRUE
(
stat
-
>
key_frames_decoded
.
is_defined
(
)
)
;
EXPECT_GT
(
*
stat
-
>
key_frames_decoded
0u
)
;
ASSERT_TRUE
(
stat
-
>
frames_decoded
.
is_defined
(
)
)
;
EXPECT_GE
(
*
stat
-
>
frames_decoded
*
stat
-
>
key_frames_decoded
)
;
}
ASSERT_TRUE
(
stat
-
>
track_id
.
is_defined
(
)
)
;
const
auto
*
track_stat
=
callee_report
-
>
GetAs
<
webrtc
:
:
RTCMediaStreamTrackStats
>
(
*
stat
-
>
track_id
)
;
ASSERT_TRUE
(
track_stat
)
;
inbound_track_ids
.
push_back
(
*
track_stat
-
>
track_identifier
)
;
}
EXPECT_THAT
(
inbound_track_ids
UnorderedElementsAreArray
(
track_ids
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
GetStatsForUnsignaledStreamWithNewStatsApi
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
RemoveSsrcsAndMsids
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
1
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
rtc
:
:
scoped_refptr
<
const
webrtc
:
:
RTCStatsReport
>
report
=
callee
(
)
-
>
NewGetStats
(
)
;
ASSERT_NE
(
nullptr
report
)
;
auto
inbound_stream_stats
=
report
-
>
GetStatsOfType
<
webrtc
:
:
RTCInboundRTPStreamStats
>
(
)
;
ASSERT_EQ
(
1U
inbound_stream_stats
.
size
(
)
)
;
ASSERT_TRUE
(
inbound_stream_stats
[
0
]
-
>
bytes_received
.
is_defined
(
)
)
;
ASSERT_GT
(
*
inbound_stream_stats
[
0
]
-
>
bytes_received
0U
)
;
ASSERT_TRUE
(
inbound_stream_stats
[
0
]
-
>
track_id
.
is_defined
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
GetStatsForUnsignaledStreamWithOldStatsApi
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
RemoveSsrcsAndMsids
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
callee
(
)
-
>
OldGetStats
(
)
-
>
BytesReceived
(
)
>
0
kDefaultTimeout
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
GetMediaStatsForUnsignaledStreamWithNewStatsApi
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
RemoveSsrcsAndMsids
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
1
)
;
media_expectations
.
CalleeExpectsSomeVideo
(
1
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
rtc
:
:
scoped_refptr
<
const
webrtc
:
:
RTCStatsReport
>
report
=
callee
(
)
-
>
NewGetStats
(
)
;
ASSERT_NE
(
nullptr
report
)
;
auto
media_stats
=
report
-
>
GetStatsOfType
<
webrtc
:
:
RTCMediaStreamTrackStats
>
(
)
;
auto
audio_index
=
FindFirstMediaStatsIndexByKind
(
"
audio
"
media_stats
)
;
ASSERT_GE
(
audio_index
0
)
;
EXPECT_TRUE
(
media_stats
[
audio_index
]
-
>
audio_level
.
is_defined
(
)
)
;
}
void
ModifySsrcs
(
cricket
:
:
SessionDescription
*
desc
)
{
for
(
ContentInfo
&
content
:
desc
-
>
contents
(
)
)
{
for
(
StreamParams
&
stream
:
content
.
media_description
(
)
-
>
mutable_streams
(
)
)
{
for
(
uint32_t
&
ssrc
:
stream
.
ssrcs
)
{
ssrc
=
rtc
:
:
CreateRandomId
(
)
;
}
}
}
}
TEST_P
(
PeerConnectionIntegrationTest
TrackStatsUpdatedCorrectlyWhenUnsignaledSsrcChanges
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
SetReceivedSdpMunger
(
RemoveSsrcsAndMsids
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
50
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
rtc
:
:
scoped_refptr
<
const
webrtc
:
:
RTCStatsReport
>
report
=
callee
(
)
-
>
NewGetStats
(
)
;
ASSERT_NE
(
nullptr
report
)
;
auto
track_stats
=
report
-
>
GetStatsOfType
<
webrtc
:
:
RTCMediaStreamTrackStats
>
(
)
;
ASSERT_EQ
(
1U
track_stats
.
size
(
)
)
;
ASSERT_TRUE
(
track_stats
[
0
]
-
>
total_samples_received
.
is_defined
(
)
)
;
ASSERT_GT
(
*
track_stats
[
0
]
-
>
total_samples_received
0U
)
;
caller
(
)
-
>
SetGeneratedSdpMunger
(
ModifySsrcs
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
25
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
report
=
callee
(
)
-
>
NewGetStats
(
)
;
ASSERT_NE
(
nullptr
report
)
;
track_stats
=
report
-
>
GetStatsOfType
<
webrtc
:
:
RTCMediaStreamTrackStats
>
(
)
;
ASSERT_EQ
(
1U
track_stats
.
size
(
)
)
;
ASSERT_TRUE
(
track_stats
[
0
]
-
>
total_samples_received
.
is_defined
(
)
)
;
constexpr
double
kAcceptableConcealedSamplesPercentage
=
0
.
50
;
ASSERT_TRUE
(
track_stats
[
0
]
-
>
concealed_samples
.
is_defined
(
)
)
;
EXPECT_LT
(
*
track_stats
[
0
]
-
>
concealed_samples
*
track_stats
[
0
]
-
>
total_samples_received
*
kAcceptableConcealedSamplesPercentage
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithDtls10
)
{
PeerConnectionFactory
:
:
Options
dtls_10_options
;
dtls_10_options
.
ssl_max_version
=
rtc
:
:
SSL_PROTOCOL_DTLS_10
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithOptions
(
dtls_10_options
dtls_10_options
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
Dtls10CipherStatsAndUmaMetrics
)
{
PeerConnectionFactory
:
:
Options
dtls_10_options
;
dtls_10_options
.
ssl_max_version
=
rtc
:
:
SSL_PROTOCOL_DTLS_10
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithOptions
(
dtls_10_options
dtls_10_options
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
DtlsConnected
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
rtc
:
:
SSLStreamAdapter
:
:
IsAcceptableCipher
(
caller
(
)
-
>
OldGetStats
(
)
-
>
DtlsCipher
(
)
rtc
:
:
KT_DEFAULT
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
rtc
:
:
SrtpCryptoSuiteToName
(
kDefaultSrtpCryptoSuite
)
caller
(
)
-
>
OldGetStats
(
)
-
>
SrtpCipher
(
)
kDefaultTimeout
)
;
EXPECT_METRIC_EQ
(
1
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
SrtpCryptoSuite
.
Audio
"
kDefaultSrtpCryptoSuite
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
Dtls12CipherStatsAndUmaMetrics
)
{
PeerConnectionFactory
:
:
Options
dtls_12_options
;
dtls_12_options
.
ssl_max_version
=
rtc
:
:
SSL_PROTOCOL_DTLS_12
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithOptions
(
dtls_12_options
dtls_12_options
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
DtlsConnected
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
rtc
:
:
SSLStreamAdapter
:
:
IsAcceptableCipher
(
caller
(
)
-
>
OldGetStats
(
)
-
>
DtlsCipher
(
)
rtc
:
:
KT_DEFAULT
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
rtc
:
:
SrtpCryptoSuiteToName
(
kDefaultSrtpCryptoSuite
)
caller
(
)
-
>
OldGetStats
(
)
-
>
SrtpCipher
(
)
kDefaultTimeout
)
;
EXPECT_METRIC_EQ
(
1
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
SrtpCryptoSuite
.
Audio
"
kDefaultSrtpCryptoSuite
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
CallerDtls12ToCalleeDtls10
)
{
PeerConnectionFactory
:
:
Options
caller_options
;
caller_options
.
ssl_max_version
=
rtc
:
:
SSL_PROTOCOL_DTLS_12
;
PeerConnectionFactory
:
:
Options
callee_options
;
callee_options
.
ssl_max_version
=
rtc
:
:
SSL_PROTOCOL_DTLS_10
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithOptions
(
caller_options
callee_options
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
CallerDtls10ToCalleeDtls12
)
{
PeerConnectionFactory
:
:
Options
caller_options
;
caller_options
.
ssl_max_version
=
rtc
:
:
SSL_PROTOCOL_DTLS_10
;
PeerConnectionFactory
:
:
Options
callee_options
;
callee_options
.
ssl_max_version
=
rtc
:
:
SSL_PROTOCOL_DTLS_12
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithOptions
(
caller_options
callee_options
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
Aes128Sha1_32_CipherNotUsedWhenOnlyCallerSupported
)
{
PeerConnectionFactory
:
:
Options
caller_options
;
caller_options
.
crypto_options
.
srtp
.
enable_aes128_sha1_32_crypto_cipher
=
true
;
PeerConnectionFactory
:
:
Options
callee_options
;
callee_options
.
crypto_options
.
srtp
.
enable_aes128_sha1_32_crypto_cipher
=
false
;
int
expected_cipher_suite
=
rtc
:
:
SRTP_AES128_CM_SHA1_80
;
TestNegotiatedCipherSuite
(
caller_options
callee_options
expected_cipher_suite
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
Aes128Sha1_32_CipherNotUsedWhenOnlyCalleeSupported
)
{
PeerConnectionFactory
:
:
Options
caller_options
;
caller_options
.
crypto_options
.
srtp
.
enable_aes128_sha1_32_crypto_cipher
=
false
;
PeerConnectionFactory
:
:
Options
callee_options
;
callee_options
.
crypto_options
.
srtp
.
enable_aes128_sha1_32_crypto_cipher
=
true
;
int
expected_cipher_suite
=
rtc
:
:
SRTP_AES128_CM_SHA1_80
;
TestNegotiatedCipherSuite
(
caller_options
callee_options
expected_cipher_suite
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
Aes128Sha1_32_CipherUsedWhenSupported
)
{
PeerConnectionFactory
:
:
Options
caller_options
;
caller_options
.
crypto_options
.
srtp
.
enable_aes128_sha1_32_crypto_cipher
=
true
;
PeerConnectionFactory
:
:
Options
callee_options
;
callee_options
.
crypto_options
.
srtp
.
enable_aes128_sha1_32_crypto_cipher
=
true
;
int
expected_cipher_suite
=
rtc
:
:
SRTP_AES128_CM_SHA1_32
;
TestNegotiatedCipherSuite
(
caller_options
callee_options
expected_cipher_suite
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
NonGcmCipherUsedWhenGcmNotSupported
)
{
bool
local_gcm_enabled
=
false
;
bool
remote_gcm_enabled
=
false
;
bool
aes_ctr_enabled
=
true
;
int
expected_cipher_suite
=
kDefaultSrtpCryptoSuite
;
TestGcmNegotiationUsesCipherSuite
(
local_gcm_enabled
remote_gcm_enabled
aes_ctr_enabled
expected_cipher_suite
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
GcmCipherUsedWhenOnlyGcmSupported
)
{
bool
local_gcm_enabled
=
true
;
bool
remote_gcm_enabled
=
true
;
bool
aes_ctr_enabled
=
false
;
int
expected_cipher_suite
=
kDefaultSrtpCryptoSuiteGcm
;
TestGcmNegotiationUsesCipherSuite
(
local_gcm_enabled
remote_gcm_enabled
aes_ctr_enabled
expected_cipher_suite
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithGcmCipher
)
{
PeerConnectionFactory
:
:
Options
gcm_options
;
gcm_options
.
crypto_options
.
srtp
.
enable_gcm_crypto_suites
=
true
;
gcm_options
.
crypto_options
.
srtp
.
enable_aes128_sha1_80_crypto_cipher
=
false
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithOptions
(
gcm_options
gcm_options
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithRtpDataChannel
)
{
PeerConnectionInterface
:
:
RTCConfiguration
rtc_config
;
rtc_config
.
enable_rtp_data_channel
=
true
;
rtc_config
.
enable_dtls_srtp
=
false
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
rtc_config
rtc_config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
ASSERT_NE
(
nullptr
caller
(
)
-
>
data_channel
(
)
)
;
ASSERT_NE
(
nullptr
callee
(
)
-
>
data_channel
(
)
)
;
EXPECT_TRUE_WAIT
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
std
:
:
string
data
=
"
hello
world
"
;
SendRtpDataWithRetries
(
caller
(
)
-
>
data_channel
(
)
data
5
)
;
EXPECT_EQ_WAIT
(
data
callee
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
SendRtpDataWithRetries
(
callee
(
)
-
>
data_channel
(
)
data
5
)
;
EXPECT_EQ_WAIT
(
data
caller
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
RtpDataChannelWorksAfterRollback
)
{
PeerConnectionInterface
:
:
RTCConfiguration
rtc_config
;
rtc_config
.
enable_rtp_data_channel
=
true
;
rtc_config
.
enable_dtls_srtp
=
false
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
rtc_config
rtc_config
)
)
;
ConnectFakeSignaling
(
)
;
auto
data_channel
=
caller
(
)
-
>
pc
(
)
-
>
CreateDataChannel
(
"
label_1
"
nullptr
)
;
ASSERT_TRUE
(
data_channel
.
get
(
)
!
=
nullptr
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
CreateDataChannel
(
"
label_2
"
nullptr
)
;
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
observer
(
new
rtc
:
:
RefCountedObject
<
MockSetSessionDescriptionObserver
>
(
)
)
;
caller
(
)
-
>
pc
(
)
-
>
SetLocalDescription
(
observer
caller
(
)
-
>
CreateOfferAndWait
(
)
.
release
(
)
)
;
EXPECT_TRUE_WAIT
(
observer
-
>
called
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
Rollback
(
)
;
std
:
:
string
data
=
"
hello
world
"
;
SendRtpDataWithRetries
(
data_channel
data
5
)
;
EXPECT_EQ_WAIT
(
data
callee
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
RtpDataChannelSignaledClosedInCalleeOffer
)
{
PeerConnectionInterface
:
:
RTCConfiguration
rtc_config
;
rtc_config
.
enable_rtp_data_channel
=
true
;
rtc_config
.
enable_dtls_srtp
=
false
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
rtc_config
rtc_config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_NE
(
nullptr
caller
(
)
-
>
data_channel
(
)
)
;
ASSERT_NE
(
nullptr
callee
(
)
-
>
data_channel
(
)
)
;
ASSERT_TRUE_WAIT
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
callee
(
)
-
>
data_channel
(
)
-
>
Close
(
)
;
callee
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_FALSE
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
)
;
EXPECT_FALSE
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTestWithFakeClock
DataBufferedUntilRtpDataChannelObserverRegistered
)
{
virtual_socket_server
(
)
-
>
set_delay_mean
(
5
)
;
virtual_socket_server
(
)
-
>
UpdateDelayDistribution
(
)
;
PeerConnectionInterface
:
:
RTCConfiguration
rtc_config
;
rtc_config
.
enable_rtp_data_channel
=
true
;
rtc_config
.
enable_dtls_srtp
=
false
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
rtc_config
rtc_config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE
(
caller
(
)
-
>
data_channel
(
)
!
=
nullptr
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
callee
(
)
-
>
data_channel
(
)
!
=
nullptr
kDefaultTimeout
FakeClock
(
)
)
;
ASSERT_TRUE_SIMULATED_WAIT
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
FakeClock
(
)
)
;
ASSERT_EQ_SIMULATED_WAIT
(
DataChannelInterface
:
:
kOpen
callee
(
)
-
>
data_channel
(
)
-
>
state
(
)
kDefaultTimeout
FakeClock
(
)
)
;
callee
(
)
-
>
data_channel
(
)
-
>
UnregisterObserver
(
)
;
std
:
:
string
data
=
"
hello
world
"
;
caller
(
)
-
>
data_channel
(
)
-
>
Send
(
DataBuffer
(
data
)
)
;
SIMULATED_WAIT
(
false
50
FakeClock
(
)
)
;
MockDataChannelObserver
new_observer
(
callee
(
)
-
>
data_channel
(
)
)
;
EXPECT_EQ_SIMULATED_WAIT
(
data
new_observer
.
last_message
(
)
kDefaultTimeout
FakeClock
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
RtpDataChannelsRejectedByCallee
)
{
PeerConnectionInterface
:
:
RTCConfiguration
rtc_config_1
;
rtc_config_1
.
enable_rtp_data_channel
=
true
;
rtc_config_1
.
enable_dtls_srtp
=
false
;
PeerConnectionInterface
:
:
RTCConfiguration
rtc_config_2
;
rtc_config_2
.
enable_dtls_srtp
=
false
;
rtc_config_2
.
enable_dtls_srtp
=
false
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
rtc_config_1
rtc_config_2
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
ASSERT_TRUE
(
caller
(
)
-
>
data_channel
(
)
!
=
nullptr
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_TRUE
(
caller
(
)
-
>
data_channel
(
)
!
=
nullptr
)
;
EXPECT_FALSE
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
)
;
EXPECT_EQ
(
nullptr
callee
(
)
-
>
data_channel
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
AddRtpDataChannelInSubsequentOffer
)
{
PeerConnectionInterface
:
:
RTCConfiguration
rtc_config
;
rtc_config
.
enable_rtp_data_channel
=
true
;
rtc_config
.
enable_dtls_srtp
=
false
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
rtc_config
rtc_config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_NE
(
nullptr
caller
(
)
-
>
data_channel
(
)
)
;
ASSERT_NE
(
nullptr
callee
(
)
-
>
data_channel
(
)
)
;
EXPECT_TRUE_WAIT
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
std
:
:
string
data
=
"
hello
world
"
;
SendRtpDataWithRetries
(
caller
(
)
-
>
data_channel
(
)
data
5
)
;
EXPECT_EQ_WAIT
(
data
callee
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
SendRtpDataWithRetries
(
callee
(
)
-
>
data_channel
(
)
data
5
)
;
EXPECT_EQ_WAIT
(
data
caller
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
}
#
ifdef
WEBRTC_HAVE_SCTP
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithSctpDataChannel
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
ASSERT_NE
(
nullptr
caller
(
)
-
>
data_channel
(
)
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_channel
(
)
!
=
nullptr
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
std
:
:
string
data
=
"
hello
world
"
;
caller
(
)
-
>
data_channel
(
)
-
>
Send
(
DataBuffer
(
data
)
)
;
EXPECT_EQ_WAIT
(
data
callee
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
callee
(
)
-
>
data_channel
(
)
-
>
Send
(
DataBuffer
(
data
)
)
;
EXPECT_EQ_WAIT
(
data
caller
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
CalleeClosesSctpDataChannel
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_NE
(
nullptr
caller
(
)
-
>
data_channel
(
)
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_channel
(
)
!
=
nullptr
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
callee
(
)
-
>
data_channel
(
)
-
>
Close
(
)
;
EXPECT_TRUE_WAIT
(
!
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
!
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
SctpDataChannelConfigSentToOtherSide
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
webrtc
:
:
DataChannelInit
init
;
init
.
id
=
53
;
init
.
maxRetransmits
=
52
;
caller
(
)
-
>
CreateDataChannel
(
"
data
-
channel
"
&
init
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_channel
(
)
!
=
nullptr
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
EXPECT_NE
(
init
.
id
callee
(
)
-
>
data_channel
(
)
-
>
id
(
)
)
;
EXPECT_EQ
(
"
data
-
channel
"
callee
(
)
-
>
data_channel
(
)
-
>
label
(
)
)
;
EXPECT_EQ
(
init
.
maxRetransmits
callee
(
)
-
>
data_channel
(
)
-
>
maxRetransmits
(
)
)
;
EXPECT_FALSE
(
callee
(
)
-
>
data_channel
(
)
-
>
negotiated
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
StressTestUnorderedSctpDataChannel
)
{
virtual_socket_server
(
)
-
>
set_delay_mean
(
20
)
;
virtual_socket_server
(
)
-
>
set_delay_stddev
(
5
)
;
virtual_socket_server
(
)
-
>
UpdateDelayDistribution
(
)
;
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
webrtc
:
:
DataChannelInit
init
;
init
.
ordered
=
false
;
caller
(
)
-
>
CreateDataChannel
(
&
init
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_NE
(
nullptr
caller
(
)
-
>
data_channel
(
)
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_channel
(
)
!
=
nullptr
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
static
constexpr
int
kNumMessages
=
100
;
static
constexpr
size_t
kMaxMessageSize
=
4096
;
std
:
:
vector
<
std
:
:
string
>
sent_messages
;
for
(
int
i
=
0
;
i
<
kNumMessages
;
+
+
i
)
{
size_t
length
=
(
rand
(
)
%
kMaxMessageSize
)
+
1
;
std
:
:
string
message
;
ASSERT_TRUE
(
rtc
:
:
CreateRandomString
(
length
&
message
)
)
;
caller
(
)
-
>
data_channel
(
)
-
>
Send
(
DataBuffer
(
message
)
)
;
callee
(
)
-
>
data_channel
(
)
-
>
Send
(
DataBuffer
(
message
)
)
;
sent_messages
.
push_back
(
message
)
;
}
EXPECT_EQ_WAIT
(
rtc
:
:
checked_cast
<
size_t
>
(
kNumMessages
)
caller
(
)
-
>
data_observer
(
)
-
>
received_message_count
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
rtc
:
:
checked_cast
<
size_t
>
(
kNumMessages
)
callee
(
)
-
>
data_observer
(
)
-
>
received_message_count
(
)
kDefaultTimeout
)
;
std
:
:
vector
<
std
:
:
string
>
caller_received_messages
=
caller
(
)
-
>
data_observer
(
)
-
>
messages
(
)
;
std
:
:
vector
<
std
:
:
string
>
callee_received_messages
=
callee
(
)
-
>
data_observer
(
)
-
>
messages
(
)
;
absl
:
:
c_sort
(
sent_messages
)
;
absl
:
:
c_sort
(
caller_received_messages
)
;
absl
:
:
c_sort
(
callee_received_messages
)
;
EXPECT_EQ
(
sent_messages
caller_received_messages
)
;
EXPECT_EQ
(
sent_messages
callee_received_messages
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
AddSctpDataChannelInSubsequentOffer
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_NE
(
nullptr
caller
(
)
-
>
data_channel
(
)
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_channel
(
)
!
=
nullptr
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
std
:
:
string
data
=
"
hello
world
"
;
caller
(
)
-
>
data_channel
(
)
-
>
Send
(
DataBuffer
(
data
)
)
;
EXPECT_EQ_WAIT
(
data
callee
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
callee
(
)
-
>
data_channel
(
)
-
>
Send
(
DataBuffer
(
data
)
)
;
EXPECT_EQ_WAIT
(
data
caller
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
SctpDataChannelToAudioVideoUpgrade
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_channel
(
)
!
=
nullptr
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
static
void
MakeSpecCompliantSctpOffer
(
cricket
:
:
SessionDescription
*
desc
)
{
cricket
:
:
SctpDataContentDescription
*
dcd_offer
=
GetFirstSctpDataContentDescription
(
desc
)
;
ASSERT_TRUE
(
dcd_offer
)
;
dcd_offer
-
>
set_use_sctpmap
(
false
)
;
dcd_offer
-
>
set_protocol
(
"
UDP
/
DTLS
/
SCTP
"
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
DataChannelWorksWhenSpecCompliantSctpOfferReceived
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
SetGeneratedSdpMunger
(
MakeSpecCompliantSctpOffer
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_channel
(
)
!
=
nullptr
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
std
:
:
string
data
=
"
hello
world
"
;
caller
(
)
-
>
data_channel
(
)
-
>
Send
(
DataBuffer
(
data
)
)
;
EXPECT_EQ_WAIT
(
data
callee
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
callee
(
)
-
>
data_channel
(
)
-
>
Send
(
DataBuffer
(
data
)
)
;
EXPECT_EQ_WAIT
(
data
caller
(
)
-
>
data_observer
(
)
-
>
last_message
(
)
kDefaultTimeout
)
;
}
#
endif
TEST_P
(
PeerConnectionIntegrationTest
IceStatesReachCompletion
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceGatheringComplete
caller
(
)
-
>
ice_gathering_state
(
)
kMaxWaitForFramesMs
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceGatheringComplete
callee
(
)
-
>
ice_gathering_state
(
)
kMaxWaitForFramesMs
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
callee
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
)
;
}
constexpr
int
kOnlyLocalPorts
=
cricket
:
:
PORTALLOCATOR_DISABLE_STUN
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
|
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
;
TEST_P
(
PeerConnectionIntegrationTest
IceStatesReachCompletionWithRemoteHostname
)
{
auto
caller_resolver_factory
=
std
:
:
make_unique
<
NiceMock
<
webrtc
:
:
MockAsyncResolverFactory
>
>
(
)
;
auto
callee_resolver_factory
=
std
:
:
make_unique
<
NiceMock
<
webrtc
:
:
MockAsyncResolverFactory
>
>
(
)
;
NiceMock
<
rtc
:
:
MockAsyncResolver
>
callee_async_resolver
;
NiceMock
<
rtc
:
:
MockAsyncResolver
>
caller_async_resolver
;
EXPECT_CALL
(
*
caller_resolver_factory
Create
(
)
)
.
WillOnce
(
Return
(
&
caller_async_resolver
)
)
;
webrtc
:
:
PeerConnectionDependencies
caller_deps
(
nullptr
)
;
caller_deps
.
async_resolver_factory
=
std
:
:
move
(
caller_resolver_factory
)
;
EXPECT_CALL
(
*
callee_resolver_factory
Create
(
)
)
.
WillOnce
(
Return
(
&
callee_async_resolver
)
)
;
webrtc
:
:
PeerConnectionDependencies
callee_deps
(
nullptr
)
;
callee_deps
.
async_resolver_factory
=
std
:
:
move
(
callee_resolver_factory
)
;
PeerConnectionInterface
:
:
RTCConfiguration
config
;
config
.
bundle_policy
=
PeerConnectionInterface
:
:
kBundlePolicyMaxBundle
;
config
.
rtcp_mux_policy
=
PeerConnectionInterface
:
:
kRtcpMuxPolicyRequire
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfigAndDeps
(
config
std
:
:
move
(
caller_deps
)
config
std
:
:
move
(
callee_deps
)
)
)
;
caller
(
)
-
>
SetRemoteAsyncResolver
(
&
callee_async_resolver
)
;
callee
(
)
-
>
SetRemoteAsyncResolver
(
&
caller_async_resolver
)
;
caller
(
)
-
>
SetMdnsResponder
(
std
:
:
make_unique
<
webrtc
:
:
FakeMdnsResponder
>
(
network_thread
(
)
)
)
;
callee
(
)
-
>
SetMdnsResponder
(
std
:
:
make_unique
<
webrtc
:
:
FakeMdnsResponder
>
(
network_thread
(
)
)
)
;
SetPortAllocatorFlags
(
kOnlyLocalPorts
kOnlyLocalPorts
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
callee
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
)
;
EXPECT_METRIC_EQ
(
1
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
CandidatePairType_UDP
"
webrtc
:
:
kIceCandidatePairHostNameHostName
)
)
;
}
class
PeerConnectionIntegrationIceStatesTest
:
public
PeerConnectionIntegrationBaseTest
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
tuple
<
SdpSemantics
std
:
:
tuple
<
std
:
:
string
uint32_t
>
>
>
{
protected
:
PeerConnectionIntegrationIceStatesTest
(
)
:
PeerConnectionIntegrationBaseTest
(
std
:
:
get
<
0
>
(
GetParam
(
)
)
)
{
port_allocator_flags_
=
std
:
:
get
<
1
>
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
;
}
void
StartStunServer
(
const
SocketAddress
&
server_address
)
{
stun_server_
.
reset
(
cricket
:
:
TestStunServer
:
:
Create
(
firewall
(
)
server_address
)
)
;
}
bool
TestIPv6
(
)
{
return
(
port_allocator_flags_
&
cricket
:
:
PORTALLOCATOR_ENABLE_IPV6
)
;
}
void
SetPortAllocatorFlags
(
)
{
PeerConnectionIntegrationBaseTest
:
:
SetPortAllocatorFlags
(
port_allocator_flags_
port_allocator_flags_
)
;
}
std
:
:
vector
<
SocketAddress
>
CallerAddresses
(
)
{
std
:
:
vector
<
SocketAddress
>
addresses
;
addresses
.
push_back
(
SocketAddress
(
"
1
.
1
.
1
.
1
"
0
)
)
;
if
(
TestIPv6
(
)
)
{
addresses
.
push_back
(
SocketAddress
(
"
1111
:
0
:
a
:
b
:
c
:
d
:
e
:
f
"
0
)
)
;
}
return
addresses
;
}
std
:
:
vector
<
SocketAddress
>
CalleeAddresses
(
)
{
std
:
:
vector
<
SocketAddress
>
addresses
;
addresses
.
push_back
(
SocketAddress
(
"
2
.
2
.
2
.
2
"
0
)
)
;
if
(
TestIPv6
(
)
)
{
addresses
.
push_back
(
SocketAddress
(
"
2222
:
0
:
a
:
b
:
c
:
d
:
e
:
f
"
0
)
)
;
}
return
addresses
;
}
void
SetUpNetworkInterfaces
(
)
{
caller
(
)
-
>
network_manager
(
)
-
>
RemoveInterface
(
kDefaultLocalAddress
)
;
callee
(
)
-
>
network_manager
(
)
-
>
RemoveInterface
(
kDefaultLocalAddress
)
;
for
(
const
auto
&
caller_address
:
CallerAddresses
(
)
)
{
caller
(
)
-
>
network_manager
(
)
-
>
AddInterface
(
caller_address
)
;
}
for
(
const
auto
&
callee_address
:
CalleeAddresses
(
)
)
{
callee
(
)
-
>
network_manager
(
)
-
>
AddInterface
(
callee_address
)
;
}
}
private
:
uint32_t
port_allocator_flags_
;
std
:
:
unique_ptr
<
cricket
:
:
TestStunServer
>
stun_server_
;
}
;
class
PeerConnectionIntegrationIceStatesTestWithFakeClock
:
public
FakeClockForTest
public
PeerConnectionIntegrationIceStatesTest
{
}
;
TEST_P
(
PeerConnectionIntegrationIceStatesTestWithFakeClock
VerifyIceStates
)
{
const
SocketAddress
kStunServerAddress
=
SocketAddress
(
"
99
.
99
.
99
.
1
"
cricket
:
:
STUN_SERVER_PORT
)
;
StartStunServer
(
kStunServerAddress
)
;
PeerConnectionInterface
:
:
RTCConfiguration
config
;
PeerConnectionInterface
:
:
IceServer
ice_stun_server
;
ice_stun_server
.
urls
.
push_back
(
"
stun
:
"
+
kStunServerAddress
.
HostAsURIString
(
)
+
"
:
"
+
kStunServerAddress
.
PortAsString
(
)
)
;
config
.
servers
.
push_back
(
ice_stun_server
)
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
SetPortAllocatorFlags
(
)
;
SetUpNetworkInterfaces
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
ASSERT_EQ
(
PeerConnectionInterface
:
:
kIceGatheringNew
caller
(
)
-
>
ice_gathering_state
(
)
)
;
ASSERT_EQ
(
PeerConnectionInterface
:
:
kIceConnectionNew
caller
(
)
-
>
ice_connection_state
(
)
)
;
ASSERT_EQ
(
PeerConnectionInterface
:
:
kIceConnectionNew
caller
(
)
-
>
standardized_ice_connection_state
(
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_EQ_SIMULATED_WAIT
(
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
FakeClock
(
)
)
;
ASSERT_EQ_SIMULATED_WAIT
(
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
standardized_ice_connection_state
(
)
kDefaultTimeout
FakeClock
(
)
)
;
EXPECT_THAT
(
caller
(
)
-
>
ice_connection_state_history
(
)
ElementsAre
(
PeerConnectionInterface
:
:
kIceConnectionChecking
PeerConnectionInterface
:
:
kIceConnectionConnected
PeerConnectionInterface
:
:
kIceConnectionCompleted
)
)
;
EXPECT_THAT
(
caller
(
)
-
>
standardized_ice_connection_state_history
(
)
ElementsAre
(
PeerConnectionInterface
:
:
kIceConnectionChecking
PeerConnectionInterface
:
:
kIceConnectionConnected
PeerConnectionInterface
:
:
kIceConnectionCompleted
)
)
;
EXPECT_THAT
(
caller
(
)
-
>
peer_connection_state_history
(
)
ElementsAre
(
PeerConnectionInterface
:
:
PeerConnectionState
:
:
kConnecting
PeerConnectionInterface
:
:
PeerConnectionState
:
:
kConnected
)
)
;
EXPECT_THAT
(
caller
(
)
-
>
ice_gathering_state_history
(
)
ElementsAre
(
PeerConnectionInterface
:
:
kIceGatheringGathering
PeerConnectionInterface
:
:
kIceGatheringComplete
)
)
;
for
(
const
auto
&
caller_address
:
CallerAddresses
(
)
)
{
firewall
(
)
-
>
AddRule
(
false
rtc
:
:
FP_ANY
rtc
:
:
FD_ANY
caller_address
)
;
}
RTC_LOG
(
LS_INFO
)
<
<
"
Firewall
rules
applied
"
;
ASSERT_EQ_SIMULATED_WAIT
(
PeerConnectionInterface
:
:
kIceConnectionDisconnected
caller
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
FakeClock
(
)
)
;
ASSERT_EQ_SIMULATED_WAIT
(
PeerConnectionInterface
:
:
kIceConnectionDisconnected
caller
(
)
-
>
standardized_ice_connection_state
(
)
kDefaultTimeout
FakeClock
(
)
)
;
firewall
(
)
-
>
ClearRules
(
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
Firewall
rules
cleared
"
;
ASSERT_EQ_SIMULATED_WAIT
(
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
FakeClock
(
)
)
;
ASSERT_EQ_SIMULATED_WAIT
(
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
standardized_ice_connection_state
(
)
kDefaultTimeout
FakeClock
(
)
)
;
constexpr
int
kConsentTimeout
=
30000
;
for
(
const
auto
&
caller_address
:
CallerAddresses
(
)
)
{
firewall
(
)
-
>
AddRule
(
false
rtc
:
:
FP_ANY
rtc
:
:
FD_ANY
caller_address
)
;
}
RTC_LOG
(
LS_INFO
)
<
<
"
Firewall
rules
applied
again
"
;
ASSERT_EQ_SIMULATED_WAIT
(
PeerConnectionInterface
:
:
kIceConnectionFailed
caller
(
)
-
>
ice_connection_state
(
)
kConsentTimeout
FakeClock
(
)
)
;
ASSERT_EQ_SIMULATED_WAIT
(
PeerConnectionInterface
:
:
kIceConnectionFailed
caller
(
)
-
>
standardized_ice_connection_state
(
)
kConsentTimeout
FakeClock
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationIceStatesTestWithFakeClock
IceStateSetupFailure
)
{
for
(
const
auto
&
caller_address
:
CallerAddresses
(
)
)
{
firewall
(
)
-
>
AddRule
(
false
rtc
:
:
FP_ANY
rtc
:
:
FD_ANY
caller_address
)
;
}
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
SetPortAllocatorFlags
(
)
;
SetUpNetworkInterfaces
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
constexpr
int
kConsentTimeout
=
30000
;
ASSERT_EQ_SIMULATED_WAIT
(
PeerConnectionInterface
:
:
kIceConnectionFailed
caller
(
)
-
>
standardized_ice_connection_state
(
)
kConsentTimeout
FakeClock
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationIceStatesTest
VerifyBestConnection
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
SetPortAllocatorFlags
(
)
;
SetUpNetworkInterfaces
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
callee
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
)
;
const
int
num_best_ipv4
=
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
IPMetrics
"
webrtc
:
:
kBestConnections_IPv4
)
;
const
int
num_best_ipv6
=
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
IPMetrics
"
webrtc
:
:
kBestConnections_IPv6
)
;
if
(
TestIPv6
(
)
)
{
EXPECT_METRIC_EQ
(
0
num_best_ipv4
)
;
EXPECT_METRIC_EQ
(
1
num_best_ipv6
)
;
}
else
{
EXPECT_METRIC_EQ
(
1
num_best_ipv4
)
;
EXPECT_METRIC_EQ
(
0
num_best_ipv6
)
;
}
EXPECT_METRIC_EQ
(
0
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
CandidatePairType_UDP
"
webrtc
:
:
kIceCandidatePairHostHost
)
)
;
EXPECT_METRIC_EQ
(
1
webrtc
:
:
metrics
:
:
NumEvents
(
"
WebRTC
.
PeerConnection
.
CandidatePairType_UDP
"
webrtc
:
:
kIceCandidatePairHostPublicHostPublic
)
)
;
}
constexpr
uint32_t
kFlagsIPv4NoStun
=
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
|
cricket
:
:
PORTALLOCATOR_DISABLE_STUN
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
;
constexpr
uint32_t
kFlagsIPv6NoStun
=
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
|
cricket
:
:
PORTALLOCATOR_DISABLE_STUN
|
cricket
:
:
PORTALLOCATOR_ENABLE_IPV6
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
;
constexpr
uint32_t
kFlagsIPv4Stun
=
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
;
INSTANTIATE_TEST_SUITE_P
(
PeerConnectionIntegrationTest
PeerConnectionIntegrationIceStatesTest
Combine
(
Values
(
SdpSemantics
:
:
kPlanB
SdpSemantics
:
:
kUnifiedPlan
)
Values
(
std
:
:
make_pair
(
"
IPv4
no
STUN
"
kFlagsIPv4NoStun
)
std
:
:
make_pair
(
"
IPv6
no
STUN
"
kFlagsIPv6NoStun
)
std
:
:
make_pair
(
"
IPv4
with
STUN
"
kFlagsIPv4Stun
)
)
)
)
;
INSTANTIATE_TEST_SUITE_P
(
PeerConnectionIntegrationTest
PeerConnectionIntegrationIceStatesTestWithFakeClock
Combine
(
Values
(
SdpSemantics
:
:
kPlanB
SdpSemantics
:
:
kUnifiedPlan
)
Values
(
std
:
:
make_pair
(
"
IPv4
no
STUN
"
kFlagsIPv4NoStun
)
std
:
:
make_pair
(
"
IPv6
no
STUN
"
kFlagsIPv6NoStun
)
std
:
:
make_pair
(
"
IPv4
with
STUN
"
kFlagsIPv4Stun
)
)
)
)
;
TEST_P
(
PeerConnectionIntegrationTest
MediaContinuesFlowingAfterIceRestart
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
ice_connection_state
(
)
kMaxWaitForFramesMs
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
callee
(
)
-
>
ice_connection_state
(
)
kMaxWaitForFramesMs
)
;
const
webrtc
:
:
IceCandidateCollection
*
audio_candidates_caller
=
caller
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
candidates
(
0
)
;
const
webrtc
:
:
IceCandidateCollection
*
audio_candidates_callee
=
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
candidates
(
0
)
;
ASSERT_GT
(
audio_candidates_caller
-
>
count
(
)
0u
)
;
ASSERT_GT
(
audio_candidates_callee
-
>
count
(
)
0u
)
;
std
:
:
string
caller_candidate_pre_restart
;
ASSERT_TRUE
(
audio_candidates_caller
-
>
at
(
0
)
-
>
ToString
(
&
caller_candidate_pre_restart
)
)
;
std
:
:
string
callee_candidate_pre_restart
;
ASSERT_TRUE
(
audio_candidates_callee
-
>
at
(
0
)
-
>
ToString
(
&
callee_candidate_pre_restart
)
)
;
const
cricket
:
:
SessionDescription
*
desc
=
caller
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
;
std
:
:
string
caller_ufrag_pre_restart
=
desc
-
>
transport_infos
(
)
[
0
]
.
description
.
ice_ufrag
;
desc
=
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
;
std
:
:
string
callee_ufrag_pre_restart
=
desc
-
>
transport_infos
(
)
[
0
]
.
description
.
ice_ufrag
;
EXPECT_EQ
(
caller
(
)
-
>
ice_candidate_pair_change_history
(
)
.
size
(
)
1u
)
;
caller
(
)
-
>
SetOfferAnswerOptions
(
IceRestartOfferAnswerOptions
(
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
ice_connection_state
(
)
kMaxWaitForFramesMs
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
callee
(
)
-
>
ice_connection_state
(
)
kMaxWaitForFramesMs
)
;
audio_candidates_caller
=
caller
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
candidates
(
0
)
;
audio_candidates_callee
=
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
candidates
(
0
)
;
ASSERT_GT
(
audio_candidates_caller
-
>
count
(
)
0u
)
;
ASSERT_GT
(
audio_candidates_callee
-
>
count
(
)
0u
)
;
std
:
:
string
caller_candidate_post_restart
;
ASSERT_TRUE
(
audio_candidates_caller
-
>
at
(
0
)
-
>
ToString
(
&
caller_candidate_post_restart
)
)
;
std
:
:
string
callee_candidate_post_restart
;
ASSERT_TRUE
(
audio_candidates_callee
-
>
at
(
0
)
-
>
ToString
(
&
callee_candidate_post_restart
)
)
;
desc
=
caller
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
;
std
:
:
string
caller_ufrag_post_restart
=
desc
-
>
transport_infos
(
)
[
0
]
.
description
.
ice_ufrag
;
desc
=
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
;
std
:
:
string
callee_ufrag_post_restart
=
desc
-
>
transport_infos
(
)
[
0
]
.
description
.
ice_ufrag
;
ASSERT_NE
(
caller_candidate_pre_restart
caller_candidate_post_restart
)
;
ASSERT_NE
(
callee_candidate_pre_restart
callee_candidate_post_restart
)
;
ASSERT_NE
(
caller_ufrag_pre_restart
caller_ufrag_post_restart
)
;
ASSERT_NE
(
callee_ufrag_pre_restart
callee_ufrag_post_restart
)
;
EXPECT_GT
(
caller
(
)
-
>
ice_candidate_pair_change_history
(
)
.
size
(
)
1u
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
EndToEndCallWithIceRenomination
)
{
PeerConnectionInterface
:
:
RTCConfiguration
config
;
config
.
enable_ice_renomination
=
true
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
const
cricket
:
:
SessionDescription
*
desc
=
caller
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
;
for
(
const
cricket
:
:
TransportInfo
&
info
:
desc
-
>
transport_infos
(
)
)
{
ASSERT_THAT
(
info
.
description
.
transport_options
Contains
(
"
renomination
"
)
)
;
}
desc
=
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
;
for
(
const
cricket
:
:
TransportInfo
&
info
:
desc
-
>
transport_infos
(
)
)
{
ASSERT_THAT
(
info
.
description
.
transport_options
Contains
(
"
renomination
"
)
)
;
}
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
AddMediaToConnectedBundleDoesNotRestartIce
)
{
PeerConnectionInterface
:
:
RTCConfiguration
config
;
config
.
bundle_policy
=
PeerConnectionInterface
:
:
kBundlePolicyMaxBundle
;
config
.
rtcp_mux_policy
=
PeerConnectionInterface
:
:
kRtcpMuxPolicyRequire
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
PeerConnectionInterface
:
:
RTCConfiguration
(
)
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_EQ_WAIT
(
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
clear_ice_connection_state_history
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ
(
0u
caller
(
)
-
>
ice_connection_state_history
(
)
.
size
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
VideoFlowsAfterMediaSectionIsRejectedAndRecycled
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
if
(
sdp_semantics_
=
=
SdpSemantics
:
:
kPlanB
)
{
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_video
=
0
;
callee
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
}
else
{
callee
(
)
-
>
SetRemoteOfferHandler
(
[
this
]
{
callee
(
)
-
>
GetFirstTransceiverOfType
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
-
>
StopInternal
(
)
;
}
)
;
}
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
const
ContentInfo
*
answer_video_content
=
cricket
:
:
GetFirstVideoContent
(
callee
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
)
;
ASSERT_NE
(
nullptr
answer_video_content
)
;
ASSERT_TRUE
(
answer_video_content
-
>
rejected
)
;
if
(
sdp_semantics_
=
=
SdpSemantics
:
:
kPlanB
)
{
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_video
=
1
;
callee
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
}
else
{
auto
caller_transceiver
=
caller
(
)
-
>
GetFirstTransceiverOfType
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
;
EXPECT_EQ
(
nullptr
caller_transceiver
.
get
(
)
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
}
callee
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
SetRemoteOfferHandler
(
nullptr
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
)
;
media_expectations
.
ExpectBidirectionalVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestPlanB
MediaFlowsAfterEarlyWarmupWithCreateSender
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
auto
caller_audio_sender
=
caller
(
)
-
>
pc
(
)
-
>
CreateSender
(
"
audio
"
"
caller_stream
"
)
;
auto
caller_video_sender
=
caller
(
)
-
>
pc
(
)
-
>
CreateSender
(
"
video
"
"
caller_stream
"
)
;
auto
callee_audio_sender
=
callee
(
)
-
>
pc
(
)
-
>
CreateSender
(
"
audio
"
"
callee_stream
"
)
;
auto
callee_video_sender
=
callee
(
)
-
>
pc
(
)
-
>
CreateSender
(
"
video
"
"
callee_stream
"
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kMaxWaitForActivationMs
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
ice_connection_state
(
)
kMaxWaitForFramesMs
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
callee
(
)
-
>
ice_connection_state
(
)
kMaxWaitForFramesMs
)
;
EXPECT_TRUE
(
caller_audio_sender
-
>
SetTrack
(
caller
(
)
-
>
CreateLocalAudioTrack
(
)
)
)
;
EXPECT_TRUE
(
caller_video_sender
-
>
SetTrack
(
caller
(
)
-
>
CreateLocalVideoTrack
(
)
)
)
;
EXPECT_TRUE
(
callee_audio_sender
-
>
SetTrack
(
callee
(
)
-
>
CreateLocalAudioTrack
(
)
)
)
;
EXPECT_TRUE
(
callee_video_sender
-
>
SetTrack
(
callee
(
)
-
>
CreateLocalVideoTrack
(
)
)
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
MediaFlowsAfterEarlyWarmupWithAddTransceiver
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
auto
audio_result
=
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
cricket
:
:
MEDIA_TYPE_AUDIO
)
;
ASSERT_EQ
(
RTCErrorType
:
:
NONE
audio_result
.
error
(
)
.
type
(
)
)
;
auto
caller_audio_sender
=
audio_result
.
MoveValue
(
)
-
>
sender
(
)
;
auto
video_result
=
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
;
ASSERT_EQ
(
RTCErrorType
:
:
NONE
video_result
.
error
(
)
.
type
(
)
)
;
auto
caller_video_sender
=
video_result
.
MoveValue
(
)
-
>
sender
(
)
;
callee
(
)
-
>
SetRemoteOfferHandler
(
[
this
]
{
ASSERT_EQ
(
2u
callee
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
.
size
(
)
)
;
callee
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
[
0
]
-
>
SetDirectionWithError
(
RtpTransceiverDirection
:
:
kSendRecv
)
;
callee
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
[
1
]
-
>
SetDirectionWithError
(
RtpTransceiverDirection
:
:
kSendRecv
)
;
}
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kMaxWaitForActivationMs
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionCompleted
caller
(
)
-
>
ice_connection_state
(
)
kMaxWaitForFramesMs
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
callee
(
)
-
>
ice_connection_state
(
)
kMaxWaitForFramesMs
)
;
auto
callee_audio_sender
=
callee
(
)
-
>
pc
(
)
-
>
GetSenders
(
)
[
0
]
;
auto
callee_video_sender
=
callee
(
)
-
>
pc
(
)
-
>
GetSenders
(
)
[
1
]
;
ASSERT_TRUE
(
caller_audio_sender
-
>
SetTrack
(
caller
(
)
-
>
CreateLocalAudioTrack
(
)
)
)
;
ASSERT_TRUE
(
caller_video_sender
-
>
SetTrack
(
caller
(
)
-
>
CreateLocalVideoTrack
(
)
)
)
;
ASSERT_TRUE
(
callee_audio_sender
-
>
SetTrack
(
callee
(
)
-
>
CreateLocalAudioTrack
(
)
)
)
;
ASSERT_TRUE
(
callee_video_sender
-
>
SetTrack
(
callee
(
)
-
>
CreateLocalVideoTrack
(
)
)
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestPlanB
CanSendRemoteVideoTrack
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kMaxWaitForActivationMs
)
;
ASSERT_EQ
(
1U
callee
(
)
-
>
remote_streams
(
)
-
>
count
(
)
)
;
callee
(
)
-
>
pc
(
)
-
>
AddStream
(
callee
(
)
-
>
remote_streams
(
)
-
>
at
(
0
)
)
;
callee
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kMaxWaitForActivationMs
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTestWithFakeClock
EndToEndConnectionTimeWithTurnTurnPair
)
{
static
constexpr
int
media_hop_delay_ms
=
50
;
static
constexpr
int
signaling_trip_delay_ms
=
500
;
static
constexpr
int
required_media_hops
=
9
;
static
constexpr
int
required_signaling_trips
=
2
;
static
constexpr
int
allowed_internal_delay_ms
=
20
;
static
constexpr
int
total_connection_time_ms
=
media_hop_delay_ms
*
required_media_hops
+
signaling_trip_delay_ms
*
required_signaling_trips
+
allowed_internal_delay_ms
;
static
const
rtc
:
:
SocketAddress
turn_server_1_internal_address
{
"
88
.
88
.
88
.
0
"
3478
}
;
static
const
rtc
:
:
SocketAddress
turn_server_1_external_address
{
"
88
.
88
.
88
.
1
"
0
}
;
static
const
rtc
:
:
SocketAddress
turn_server_2_internal_address
{
"
99
.
99
.
99
.
0
"
3478
}
;
static
const
rtc
:
:
SocketAddress
turn_server_2_external_address
{
"
99
.
99
.
99
.
1
"
0
}
;
cricket
:
:
TestTurnServer
*
turn_server_1
=
CreateTurnServer
(
turn_server_1_internal_address
turn_server_1_external_address
)
;
cricket
:
:
TestTurnServer
*
turn_server_2
=
CreateTurnServer
(
turn_server_2_internal_address
turn_server_2_external_address
)
;
network_thread
(
)
-
>
Invoke
<
void
>
(
RTC_FROM_HERE
[
turn_server_1
]
{
turn_server_1
-
>
set_enable_permission_checks
(
false
)
;
}
)
;
network_thread
(
)
-
>
Invoke
<
void
>
(
RTC_FROM_HERE
[
turn_server_2
]
{
turn_server_2
-
>
set_enable_permission_checks
(
false
)
;
}
)
;
PeerConnectionInterface
:
:
RTCConfiguration
client_1_config
;
webrtc
:
:
PeerConnectionInterface
:
:
IceServer
ice_server_1
;
ice_server_1
.
urls
.
push_back
(
"
turn
:
88
.
88
.
88
.
0
:
3478
"
)
;
ice_server_1
.
username
=
"
test
"
;
ice_server_1
.
password
=
"
test
"
;
client_1_config
.
servers
.
push_back
(
ice_server_1
)
;
client_1_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
client_1_config
.
presume_writable_when_fully_relayed
=
true
;
PeerConnectionInterface
:
:
RTCConfiguration
client_2_config
;
webrtc
:
:
PeerConnectionInterface
:
:
IceServer
ice_server_2
;
ice_server_2
.
urls
.
push_back
(
"
turn
:
99
.
99
.
99
.
0
:
3478
"
)
;
ice_server_2
.
username
=
"
test
"
;
ice_server_2
.
password
=
"
test
"
;
client_2_config
.
servers
.
push_back
(
ice_server_2
)
;
client_2_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
client_2_config
.
presume_writable_when_fully_relayed
=
true
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
client_1_config
client_2_config
)
)
;
SetSignalingDelayMs
(
signaling_trip_delay_ms
)
;
ConnectFakeSignaling
(
)
;
virtual_socket_server
(
)
-
>
set_delay_mean
(
media_hop_delay_ms
)
;
virtual_socket_server
(
)
-
>
UpdateDelayDistribution
(
)
;
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_audio
=
1
;
options
.
offer_to_receive_video
=
1
;
caller
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
EXPECT_TRUE_SIMULATED_WAIT
(
DtlsConnected
(
)
total_connection_time_ms
FakeClock
(
)
)
;
ClosePeerConnections
(
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
TurnCustomizerUsedForTurnConnections
)
{
static
const
rtc
:
:
SocketAddress
turn_server_1_internal_address
{
"
88
.
88
.
88
.
0
"
3478
}
;
static
const
rtc
:
:
SocketAddress
turn_server_1_external_address
{
"
88
.
88
.
88
.
1
"
0
}
;
static
const
rtc
:
:
SocketAddress
turn_server_2_internal_address
{
"
99
.
99
.
99
.
0
"
3478
}
;
static
const
rtc
:
:
SocketAddress
turn_server_2_external_address
{
"
99
.
99
.
99
.
1
"
0
}
;
CreateTurnServer
(
turn_server_1_internal_address
turn_server_1_external_address
)
;
CreateTurnServer
(
turn_server_2_internal_address
turn_server_2_external_address
)
;
PeerConnectionInterface
:
:
RTCConfiguration
client_1_config
;
webrtc
:
:
PeerConnectionInterface
:
:
IceServer
ice_server_1
;
ice_server_1
.
urls
.
push_back
(
"
turn
:
88
.
88
.
88
.
0
:
3478
"
)
;
ice_server_1
.
username
=
"
test
"
;
ice_server_1
.
password
=
"
test
"
;
client_1_config
.
servers
.
push_back
(
ice_server_1
)
;
client_1_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
auto
*
customizer1
=
CreateTurnCustomizer
(
)
;
client_1_config
.
turn_customizer
=
customizer1
;
PeerConnectionInterface
:
:
RTCConfiguration
client_2_config
;
webrtc
:
:
PeerConnectionInterface
:
:
IceServer
ice_server_2
;
ice_server_2
.
urls
.
push_back
(
"
turn
:
99
.
99
.
99
.
0
:
3478
"
)
;
ice_server_2
.
username
=
"
test
"
;
ice_server_2
.
password
=
"
test
"
;
client_2_config
.
servers
.
push_back
(
ice_server_2
)
;
client_2_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
auto
*
customizer2
=
CreateTurnCustomizer
(
)
;
client_2_config
.
turn_customizer
=
customizer2
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
client_1_config
client_2_config
)
)
;
ConnectFakeSignaling
(
)
;
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_audio
=
1
;
options
.
offer_to_receive_video
=
1
;
caller
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
DtlsConnected
(
)
kDefaultTimeout
)
;
ExpectTurnCustomizerCountersIncremented
(
customizer1
)
;
ExpectTurnCustomizerCountersIncremented
(
customizer2
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
TCPUsedForTurnConnections
)
{
static
const
rtc
:
:
SocketAddress
turn_server_internal_address
{
"
88
.
88
.
88
.
0
"
3478
}
;
static
const
rtc
:
:
SocketAddress
turn_server_external_address
{
"
88
.
88
.
88
.
1
"
0
}
;
CreateTurnServer
(
turn_server_internal_address
turn_server_external_address
cricket
:
:
PROTO_TCP
)
;
webrtc
:
:
PeerConnectionInterface
:
:
IceServer
ice_server
;
ice_server
.
urls
.
push_back
(
"
turn
:
88
.
88
.
88
.
0
:
3478
?
transport
=
tcp
"
)
;
ice_server
.
username
=
"
test
"
;
ice_server
.
password
=
"
test
"
;
PeerConnectionInterface
:
:
RTCConfiguration
client_1_config
;
client_1_config
.
servers
.
push_back
(
ice_server
)
;
client_1_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
PeerConnectionInterface
:
:
RTCConfiguration
client_2_config
;
client_2_config
.
servers
.
push_back
(
ice_server
)
;
client_2_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
client_1_config
client_2_config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
callee
(
)
-
>
ice_connection_state
(
)
kMaxWaitForFramesMs
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
EXPECT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
SSLCertificateVerifierUsedForTurnConnections
)
{
static
const
rtc
:
:
SocketAddress
turn_server_internal_address
{
"
88
.
88
.
88
.
0
"
3478
}
;
static
const
rtc
:
:
SocketAddress
turn_server_external_address
{
"
88
.
88
.
88
.
1
"
0
}
;
CreateTurnServer
(
turn_server_internal_address
turn_server_external_address
cricket
:
:
PROTO_TLS
"
88
.
88
.
88
.
0
"
)
;
webrtc
:
:
PeerConnectionInterface
:
:
IceServer
ice_server
;
ice_server
.
urls
.
push_back
(
"
turns
:
88
.
88
.
88
.
0
:
3478
?
transport
=
tcp
"
)
;
ice_server
.
username
=
"
test
"
;
ice_server
.
password
=
"
test
"
;
PeerConnectionInterface
:
:
RTCConfiguration
client_1_config
;
client_1_config
.
servers
.
push_back
(
ice_server
)
;
client_1_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
PeerConnectionInterface
:
:
RTCConfiguration
client_2_config
;
client_2_config
.
servers
.
push_back
(
ice_server
)
;
client_2_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
rtc
:
:
TestCertificateVerifier
*
client_1_cert_verifier
=
new
rtc
:
:
TestCertificateVerifier
(
)
;
client_1_cert_verifier
-
>
verify_certificate_
=
true
;
rtc
:
:
TestCertificateVerifier
*
client_2_cert_verifier
=
new
rtc
:
:
TestCertificateVerifier
(
)
;
client_2_cert_verifier
-
>
verify_certificate_
=
true
;
webrtc
:
:
PeerConnectionDependencies
client_1_deps
(
nullptr
)
;
client_1_deps
.
tls_cert_verifier
=
std
:
:
unique_ptr
<
rtc
:
:
TestCertificateVerifier
>
(
client_1_cert_verifier
)
;
webrtc
:
:
PeerConnectionDependencies
client_2_deps
(
nullptr
)
;
client_2_deps
.
tls_cert_verifier
=
std
:
:
unique_ptr
<
rtc
:
:
TestCertificateVerifier
>
(
client_2_cert_verifier
)
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfigAndDeps
(
client_1_config
std
:
:
move
(
client_1_deps
)
client_2_config
std
:
:
move
(
client_2_deps
)
)
)
;
ConnectFakeSignaling
(
)
;
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_audio
=
1
;
options
.
offer_to_receive_video
=
1
;
caller
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
DtlsConnected
(
)
kDefaultTimeout
)
;
EXPECT_GT
(
client_1_cert_verifier
-
>
call_count_
0u
)
;
EXPECT_GT
(
client_2_cert_verifier
-
>
call_count_
0u
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
SSLCertificateVerifierFailureUsedForTurnConnectionsFailsConnection
)
{
static
const
rtc
:
:
SocketAddress
turn_server_internal_address
{
"
88
.
88
.
88
.
0
"
3478
}
;
static
const
rtc
:
:
SocketAddress
turn_server_external_address
{
"
88
.
88
.
88
.
1
"
0
}
;
CreateTurnServer
(
turn_server_internal_address
turn_server_external_address
cricket
:
:
PROTO_TLS
"
88
.
88
.
88
.
0
"
)
;
webrtc
:
:
PeerConnectionInterface
:
:
IceServer
ice_server
;
ice_server
.
urls
.
push_back
(
"
turns
:
88
.
88
.
88
.
0
:
3478
?
transport
=
tcp
"
)
;
ice_server
.
username
=
"
test
"
;
ice_server
.
password
=
"
test
"
;
PeerConnectionInterface
:
:
RTCConfiguration
client_1_config
;
client_1_config
.
servers
.
push_back
(
ice_server
)
;
client_1_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
PeerConnectionInterface
:
:
RTCConfiguration
client_2_config
;
client_2_config
.
servers
.
push_back
(
ice_server
)
;
client_2_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
rtc
:
:
TestCertificateVerifier
*
client_1_cert_verifier
=
new
rtc
:
:
TestCertificateVerifier
(
)
;
client_1_cert_verifier
-
>
verify_certificate_
=
false
;
rtc
:
:
TestCertificateVerifier
*
client_2_cert_verifier
=
new
rtc
:
:
TestCertificateVerifier
(
)
;
client_2_cert_verifier
-
>
verify_certificate_
=
false
;
webrtc
:
:
PeerConnectionDependencies
client_1_deps
(
nullptr
)
;
client_1_deps
.
tls_cert_verifier
=
std
:
:
unique_ptr
<
rtc
:
:
TestCertificateVerifier
>
(
client_1_cert_verifier
)
;
webrtc
:
:
PeerConnectionDependencies
client_2_deps
(
nullptr
)
;
client_2_deps
.
tls_cert_verifier
=
std
:
:
unique_ptr
<
rtc
:
:
TestCertificateVerifier
>
(
client_2_cert_verifier
)
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfigAndDeps
(
client_1_config
std
:
:
move
(
client_1_deps
)
client_2_config
std
:
:
move
(
client_2_deps
)
)
)
;
ConnectFakeSignaling
(
)
;
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_audio
=
1
;
options
.
offer_to_receive_video
=
1
;
caller
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
bool
wait_res
=
true
;
WAIT_
(
DtlsConnected
(
)
kDefaultTimeout
wait_res
)
;
ASSERT_FALSE
(
wait_res
)
;
EXPECT_GT
(
client_1_cert_verifier
-
>
call_count_
0u
)
;
EXPECT_GT
(
client_2_cert_verifier
-
>
call_count_
0u
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
IceTransportFactoryUsedForConnections
)
{
PeerConnectionInterface
:
:
RTCConfiguration
default_config
;
PeerConnectionDependencies
dependencies
(
nullptr
)
;
auto
ice_transport_factory
=
std
:
:
make_unique
<
MockIceTransportFactory
>
(
)
;
EXPECT_CALL
(
*
ice_transport_factory
RecordIceTransportCreated
(
)
)
.
Times
(
1
)
;
dependencies
.
ice_transport_factory
=
std
:
:
move
(
ice_transport_factory
)
;
auto
wrapper
=
CreatePeerConnectionWrapper
(
"
Caller
"
nullptr
&
default_config
std
:
:
move
(
dependencies
)
nullptr
false
false
)
;
ASSERT_TRUE
(
wrapper
)
;
wrapper
-
>
CreateDataChannel
(
)
;
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
observer
(
new
rtc
:
:
RefCountedObject
<
MockSetSessionDescriptionObserver
>
(
)
)
;
wrapper
-
>
pc
(
)
-
>
SetLocalDescription
(
observer
wrapper
-
>
CreateOfferAndWait
(
)
.
release
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
CodecNamesAreCaseInsensitive
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
SetGeneratedSdpMunger
(
[
]
(
cricket
:
:
SessionDescription
*
description
)
{
cricket
:
:
AudioContentDescription
*
audio
=
GetFirstAudioContentDescription
(
description
)
;
ASSERT_NE
(
nullptr
audio
)
;
auto
audio_codecs
=
audio
-
>
codecs
(
)
;
audio_codecs
.
erase
(
std
:
:
remove_if
(
audio_codecs
.
begin
(
)
audio_codecs
.
end
(
)
[
]
(
const
cricket
:
:
AudioCodec
&
codec
)
{
return
codec
.
name
!
=
"
opus
"
;
}
)
audio_codecs
.
end
(
)
)
;
ASSERT_EQ
(
1u
audio_codecs
.
size
(
)
)
;
audio_codecs
[
0
]
.
name
=
"
OpUs
"
;
audio
-
>
set_codecs
(
audio_codecs
)
;
cricket
:
:
VideoContentDescription
*
video
=
GetFirstVideoContentDescription
(
description
)
;
ASSERT_NE
(
nullptr
video
)
;
auto
video_codecs
=
video
-
>
codecs
(
)
;
video_codecs
.
erase
(
std
:
:
remove_if
(
video_codecs
.
begin
(
)
video_codecs
.
end
(
)
[
]
(
const
cricket
:
:
VideoCodec
&
codec
)
{
return
codec
.
name
!
=
"
VP8
"
;
}
)
video_codecs
.
end
(
)
)
;
ASSERT_EQ
(
1u
video_codecs
.
size
(
)
)
;
video_codecs
[
0
]
.
name
=
"
vP8
"
;
video
-
>
set_codecs
(
video_codecs
)
;
}
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
GetSourcesAudio
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
1
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
ASSERT_EQ
(
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
1u
)
;
auto
receiver
=
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
[
0
]
;
ASSERT_EQ
(
receiver
-
>
media_type
(
)
cricket
:
:
MEDIA_TYPE_AUDIO
)
;
auto
sources
=
receiver
-
>
GetSources
(
)
;
ASSERT_GT
(
receiver
-
>
GetParameters
(
)
.
encodings
.
size
(
)
0u
)
;
EXPECT_EQ
(
receiver
-
>
GetParameters
(
)
.
encodings
[
0
]
.
ssrc
sources
[
0
]
.
source_id
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
RtpSourceType
:
:
SSRC
sources
[
0
]
.
source_type
(
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
GetSourcesVideo
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeVideo
(
1
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
ASSERT_EQ
(
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
1u
)
;
auto
receiver
=
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
[
0
]
;
ASSERT_EQ
(
receiver
-
>
media_type
(
)
cricket
:
:
MEDIA_TYPE_VIDEO
)
;
auto
sources
=
receiver
-
>
GetSources
(
)
;
ASSERT_GT
(
receiver
-
>
GetParameters
(
)
.
encodings
.
size
(
)
0u
)
;
ASSERT_GT
(
sources
.
size
(
)
0u
)
;
EXPECT_EQ
(
receiver
-
>
GetParameters
(
)
.
encodings
[
0
]
.
ssrc
sources
[
0
]
.
source_id
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
RtpSourceType
:
:
SSRC
sources
[
0
]
.
source_type
(
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestPlanB
RemoveAndAddTrackWithNewStreamId
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioTrackInterface
>
track
=
caller
(
)
-
>
CreateLocalAudioTrack
(
)
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
RtpSenderInterface
>
sender
=
caller
(
)
-
>
AddTrack
(
track
{
"
stream_1
"
}
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
1
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
caller
(
)
-
>
pc
(
)
-
>
RemoveTrack
(
sender
)
;
sender
=
caller
(
)
-
>
AddTrack
(
track
{
"
stream_2
"
}
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
}
TEST_P
(
PeerConnectionIntegrationTest
RtcEventLogOutputWriteCalled
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
auto
output
=
std
:
:
make_unique
<
testing
:
:
NiceMock
<
MockRtcEventLogOutput
>
>
(
)
;
ON_CALL
(
*
output
IsActive
(
)
)
.
WillByDefault
(
:
:
testing
:
:
Return
(
true
)
)
;
ON_CALL
(
*
output
Write
(
:
:
testing
:
:
_
)
)
.
WillByDefault
(
:
:
testing
:
:
Return
(
true
)
)
;
EXPECT_CALL
(
*
output
Write
(
:
:
testing
:
:
_
)
)
.
Times
(
:
:
testing
:
:
AtLeast
(
1
)
)
;
EXPECT_TRUE
(
caller
(
)
-
>
pc
(
)
-
>
StartRtcEventLog
(
std
:
:
move
(
output
)
webrtc
:
:
RtcEventLog
:
:
kImmediateOutput
)
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
MediaFlowsWhenCandidatesSetOnlyInSdp
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignalingForSdpOnly
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_EQ_WAIT
(
PeerConnectionInterface
:
:
kIceGatheringComplete
caller
(
)
-
>
ice_gathering_state
(
)
kDefaultTimeout
)
;
ASSERT_EQ_WAIT
(
PeerConnectionInterface
:
:
kIceGatheringComplete
callee
(
)
-
>
ice_gathering_state
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
DisableAndEnableAudioPlayout
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
pc
(
)
-
>
SetAudioPlayout
(
false
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
WAIT
(
false
1000
)
;
EXPECT_EQ
(
0
caller
(
)
-
>
audio_frames_received
(
)
)
;
ASSERT_GT
(
callee
(
)
-
>
audio_frames_received
(
)
0
)
;
caller
(
)
-
>
pc
(
)
-
>
SetAudioPlayout
(
true
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudio
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
double
GetAudioEnergyStat
(
PeerConnectionWrapper
*
pc
)
{
auto
report
=
pc
-
>
NewGetStats
(
)
;
auto
track_stats_list
=
report
-
>
GetStatsOfType
<
webrtc
:
:
RTCMediaStreamTrackStats
>
(
)
;
const
webrtc
:
:
RTCMediaStreamTrackStats
*
remote_track_stats
=
nullptr
;
for
(
const
auto
*
track_stats
:
track_stats_list
)
{
if
(
track_stats
-
>
remote_source
.
is_defined
(
)
&
&
*
track_stats
-
>
remote_source
)
{
remote_track_stats
=
track_stats
;
break
;
}
}
if
(
!
remote_track_stats
-
>
total_audio_energy
.
is_defined
(
)
)
{
return
0
.
0
;
}
return
*
remote_track_stats
-
>
total_audio_energy
;
}
TEST_P
(
PeerConnectionIntegrationTest
DisableAudioPlayoutStillGeneratesAudioStats
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
pc
(
)
-
>
SetAudioPlayout
(
false
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_TRUE_WAIT
(
GetAudioEnergyStat
(
caller
(
)
)
>
0
kMaxWaitForFramesMs
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
DisableAndEnableAudioRecording
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
pc
(
)
-
>
SetAudioRecording
(
false
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
WAIT
(
false
1000
)
;
EXPECT_EQ
(
0
callee
(
)
-
>
audio_frames_received
(
)
)
;
ASSERT_GT
(
caller
(
)
-
>
audio_frames_received
(
)
0
)
;
caller
(
)
-
>
pc
(
)
-
>
SetAudioRecording
(
true
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudio
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
ClosingConnectionStopsPacketFlow
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
#
ifdef
WEBRTC_HAVE_SCTP
caller
(
)
-
>
CreateDataChannel
(
)
;
#
endif
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
ClosePeerConnections
(
)
;
uint32_t
sent_packets_a
=
virtual_socket_server
(
)
-
>
sent_packets
(
)
;
WAIT
(
false
1000
)
;
uint32_t
sent_packets_b
=
virtual_socket_server
(
)
-
>
sent_packets
(
)
;
EXPECT_EQ
(
sent_packets_a
sent_packets_b
)
;
}
#
ifdef
WEBRTC_HAVE_SCTP
TEST_P
(
PeerConnectionIntegrationTest
TransportStatsReportedForDataChannelOnlyConnection
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_channel
(
)
kDefaultTimeout
)
;
auto
caller_report
=
caller
(
)
-
>
NewGetStats
(
)
;
EXPECT_EQ
(
1u
caller_report
-
>
GetStatsOfType
<
RTCTransportStats
>
(
)
.
size
(
)
)
;
auto
callee_report
=
callee
(
)
-
>
NewGetStats
(
)
;
EXPECT_EQ
(
1u
callee_report
-
>
GetStatsOfType
<
RTCTransportStats
>
(
)
.
size
(
)
)
;
}
#
endif
TEST_P
(
PeerConnectionIntegrationTest
IceEventsGeneratedAndLoggedInRtcEventLog
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithFakeRtcEventLog
(
)
)
;
ConnectFakeSignaling
(
)
;
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
options
;
options
.
offer_to_receive_audio
=
1
;
caller
(
)
-
>
SetOfferAnswerOptions
(
options
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
DtlsConnected
(
)
kDefaultTimeout
)
;
ASSERT_NE
(
nullptr
caller
(
)
-
>
event_log_factory
(
)
)
;
ASSERT_NE
(
nullptr
callee
(
)
-
>
event_log_factory
(
)
)
;
webrtc
:
:
FakeRtcEventLog
*
caller_event_log
=
caller
(
)
-
>
event_log_factory
(
)
-
>
last_log_created
(
)
;
webrtc
:
:
FakeRtcEventLog
*
callee_event_log
=
callee
(
)
-
>
event_log_factory
(
)
-
>
last_log_created
(
)
;
ASSERT_NE
(
nullptr
caller_event_log
)
;
ASSERT_NE
(
nullptr
callee_event_log
)
;
int
caller_ice_config_count
=
caller_event_log
-
>
GetEventCount
(
webrtc
:
:
RtcEvent
:
:
Type
:
:
IceCandidatePairConfig
)
;
int
caller_ice_event_count
=
caller_event_log
-
>
GetEventCount
(
webrtc
:
:
RtcEvent
:
:
Type
:
:
IceCandidatePairEvent
)
;
int
callee_ice_config_count
=
callee_event_log
-
>
GetEventCount
(
webrtc
:
:
RtcEvent
:
:
Type
:
:
IceCandidatePairConfig
)
;
int
callee_ice_event_count
=
callee_event_log
-
>
GetEventCount
(
webrtc
:
:
RtcEvent
:
:
Type
:
:
IceCandidatePairEvent
)
;
EXPECT_LT
(
0
caller_ice_config_count
)
;
EXPECT_LT
(
0
caller_ice_event_count
)
;
EXPECT_LT
(
0
callee_ice_config_count
)
;
EXPECT_LT
(
0
callee_ice_event_count
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
RegatherAfterChangingIceTransportType
)
{
static
const
rtc
:
:
SocketAddress
turn_server_internal_address
{
"
88
.
88
.
88
.
0
"
3478
}
;
static
const
rtc
:
:
SocketAddress
turn_server_external_address
{
"
88
.
88
.
88
.
1
"
0
}
;
CreateTurnServer
(
turn_server_internal_address
turn_server_external_address
)
;
webrtc
:
:
PeerConnectionInterface
:
:
IceServer
ice_server
;
ice_server
.
urls
.
push_back
(
"
turn
:
88
.
88
.
88
.
0
:
3478
"
)
;
ice_server
.
username
=
"
test
"
;
ice_server
.
password
=
"
test
"
;
PeerConnectionInterface
:
:
RTCConfiguration
caller_config
;
caller_config
.
servers
.
push_back
(
ice_server
)
;
caller_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
caller_config
.
continual_gathering_policy
=
PeerConnection
:
:
GATHER_CONTINUALLY
;
caller_config
.
surface_ice_candidates_on_ice_transport_type_changed
=
true
;
PeerConnectionInterface
:
:
RTCConfiguration
callee_config
;
callee_config
.
servers
.
push_back
(
ice_server
)
;
callee_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
callee_config
.
continual_gathering_policy
=
PeerConnection
:
:
GATHER_CONTINUALLY
;
callee_config
.
surface_ice_candidates_on_ice_transport_type_changed
=
true
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
caller_config
callee_config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
caller
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
webrtc
:
:
PeerConnectionInterface
:
:
kIceConnectionConnected
callee
(
)
-
>
ice_connection_state
(
)
kDefaultTimeout
)
;
EXPECT_EQ
(
cricket
:
:
RELAY_PORT_TYPE
caller
(
)
-
>
last_candidate_gathered
(
)
.
type
(
)
)
;
EXPECT_EQ
(
cricket
:
:
RELAY_PORT_TYPE
callee
(
)
-
>
last_candidate_gathered
(
)
.
type
(
)
)
;
caller_config
=
caller
(
)
-
>
pc
(
)
-
>
GetConfiguration
(
)
;
caller_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kAll
;
caller
(
)
-
>
pc
(
)
-
>
SetConfiguration
(
caller_config
)
;
EXPECT_EQ_WAIT
(
cricket
:
:
LOCAL_PORT_TYPE
caller
(
)
-
>
last_candidate_gathered
(
)
.
type
(
)
kDefaultTimeout
)
;
callee_config
=
callee
(
)
-
>
pc
(
)
-
>
GetConfiguration
(
)
;
callee_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kAll
;
callee
(
)
-
>
pc
(
)
-
>
SetConfiguration
(
callee_config
)
;
EXPECT_EQ_WAIT
(
cricket
:
:
LOCAL_PORT_TYPE
callee
(
)
-
>
last_candidate_gathered
(
)
.
type
(
)
kDefaultTimeout
)
;
std
:
:
string
caller_ufrag_pre_offer
=
caller
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
-
>
transport_infos
(
)
[
0
]
.
description
.
ice_ufrag
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
std
:
:
string
caller_ufrag_post_offer
=
caller
(
)
-
>
pc
(
)
-
>
local_description
(
)
-
>
description
(
)
-
>
transport_infos
(
)
[
0
]
.
description
.
ice_ufrag
;
EXPECT_EQ
(
caller_ufrag_pre_offer
caller_ufrag_post_offer
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
OnIceCandidateError
)
{
static
const
rtc
:
:
SocketAddress
turn_server_internal_address
{
"
88
.
88
.
88
.
0
"
3478
}
;
static
const
rtc
:
:
SocketAddress
turn_server_external_address
{
"
88
.
88
.
88
.
1
"
0
}
;
CreateTurnServer
(
turn_server_internal_address
turn_server_external_address
)
;
webrtc
:
:
PeerConnectionInterface
:
:
IceServer
ice_server
;
ice_server
.
urls
.
push_back
(
"
turn
:
88
.
88
.
88
.
0
:
3478
"
)
;
ice_server
.
username
=
"
test
"
;
ice_server
.
password
=
"
123
"
;
PeerConnectionInterface
:
:
RTCConfiguration
caller_config
;
caller_config
.
servers
.
push_back
(
ice_server
)
;
caller_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
caller_config
.
continual_gathering_policy
=
PeerConnection
:
:
GATHER_CONTINUALLY
;
PeerConnectionInterface
:
:
RTCConfiguration
callee_config
;
callee_config
.
servers
.
push_back
(
ice_server
)
;
callee_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
callee_config
.
continual_gathering_policy
=
PeerConnection
:
:
GATHER_CONTINUALLY
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
caller_config
callee_config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
401
caller
(
)
-
>
error_event
(
)
.
error_code
kDefaultTimeout
)
;
EXPECT_EQ
(
"
Unauthorized
"
caller
(
)
-
>
error_event
(
)
.
error_text
)
;
EXPECT_EQ
(
"
turn
:
88
.
88
.
88
.
0
:
3478
?
transport
=
udp
"
caller
(
)
-
>
error_event
(
)
.
url
)
;
EXPECT_NE
(
caller
(
)
-
>
error_event
(
)
.
address
"
"
)
;
}
TEST_P
(
PeerConnectionIntegrationTest
OnIceCandidateErrorWithEmptyAddress
)
{
webrtc
:
:
PeerConnectionInterface
:
:
IceServer
ice_server
;
ice_server
.
urls
.
push_back
(
"
turn
:
127
.
0
.
0
.
1
:
3478
?
transport
=
tcp
"
)
;
ice_server
.
username
=
"
test
"
;
ice_server
.
password
=
"
test
"
;
PeerConnectionInterface
:
:
RTCConfiguration
caller_config
;
caller_config
.
servers
.
push_back
(
ice_server
)
;
caller_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
caller_config
.
continual_gathering_policy
=
PeerConnection
:
:
GATHER_CONTINUALLY
;
PeerConnectionInterface
:
:
RTCConfiguration
callee_config
;
callee_config
.
servers
.
push_back
(
ice_server
)
;
callee_config
.
type
=
webrtc
:
:
PeerConnectionInterface
:
:
kRelay
;
callee_config
.
continual_gathering_policy
=
PeerConnection
:
:
GATHER_CONTINUALLY
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
caller_config
callee_config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ_WAIT
(
701
caller
(
)
-
>
error_event
(
)
.
error_code
kDefaultTimeout
)
;
EXPECT_EQ
(
caller
(
)
-
>
error_event
(
)
.
address
"
"
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
AudioKeepsFlowingAfterImplicitRollback
)
{
PeerConnectionInterface
:
:
RTCConfiguration
config
;
config
.
sdp_semantics
=
SdpSemantics
:
:
kUnifiedPlan
;
config
.
enable_implicit_rollback
=
true
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudio
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
SetSignalIceCandidates
(
false
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
observer
(
new
rtc
:
:
RefCountedObject
<
MockSetSessionDescriptionObserver
>
(
)
)
;
callee
(
)
-
>
pc
(
)
-
>
SetLocalDescription
(
observer
callee
(
)
-
>
CreateOfferAndWait
(
)
.
release
(
)
)
;
EXPECT_TRUE_WAIT
(
observer
-
>
called
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
ImplicitRollbackVisitsStableState
)
{
RTCConfiguration
config
;
config
.
sdp_semantics
=
SdpSemantics
:
:
kUnifiedPlan
;
config
.
enable_implicit_rollback
=
true
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
sld_observer
(
new
rtc
:
:
RefCountedObject
<
MockSetSessionDescriptionObserver
>
(
)
)
;
callee
(
)
-
>
pc
(
)
-
>
SetLocalDescription
(
sld_observer
callee
(
)
-
>
CreateOfferAndWait
(
)
.
release
(
)
)
;
EXPECT_TRUE_WAIT
(
sld_observer
-
>
called
(
)
kDefaultTimeout
)
;
EXPECT_EQ
(
sld_observer
-
>
error
(
)
"
"
)
;
rtc
:
:
scoped_refptr
<
MockSetSessionDescriptionObserver
>
srd_observer
(
new
rtc
:
:
RefCountedObject
<
MockSetSessionDescriptionObserver
>
(
)
)
;
callee
(
)
-
>
pc
(
)
-
>
SetRemoteDescription
(
srd_observer
caller
(
)
-
>
CreateOfferAndWait
(
)
.
release
(
)
)
;
EXPECT_TRUE_WAIT
(
srd_observer
-
>
called
(
)
kDefaultTimeout
)
;
EXPECT_EQ
(
srd_observer
-
>
error
(
)
"
"
)
;
EXPECT_THAT
(
callee
(
)
-
>
peer_connection_signaling_state_history
(
)
ElementsAre
(
PeerConnectionInterface
:
:
kHaveLocalOffer
PeerConnectionInterface
:
:
kStable
PeerConnectionInterface
:
:
kHaveRemoteOffer
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
H264FmtpSpsPpsIdrInKeyframeParameterUsage
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
auto
munger
=
[
]
(
cricket
:
:
SessionDescription
*
desc
)
{
cricket
:
:
VideoContentDescription
*
video
=
GetFirstVideoContentDescription
(
desc
)
;
auto
codecs
=
video
-
>
codecs
(
)
;
for
(
auto
&
&
codec
:
codecs
)
{
if
(
codec
.
name
=
=
"
H264
"
)
{
std
:
:
string
value
;
EXPECT_FALSE
(
codec
.
GetParam
(
cricket
:
:
kH264FmtpSpsPpsIdrInKeyframe
&
value
)
)
;
codec
.
SetParam
(
std
:
:
string
(
cricket
:
:
kH264FmtpSpsPpsIdrInKeyframe
)
std
:
:
string
(
"
"
)
)
;
}
}
video
-
>
set_codecs
(
codecs
)
;
}
;
caller
(
)
-
>
SetGeneratedSdpMunger
(
munger
)
;
caller
(
)
-
>
SetReceivedSdpMunger
(
munger
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
SetGeneratedSdpMunger
(
[
]
(
cricket
:
:
SessionDescription
*
desc
)
{
cricket
:
:
VideoContentDescription
*
video
=
GetFirstVideoContentDescription
(
desc
)
;
for
(
auto
&
&
codec
:
video
-
>
codecs
(
)
)
{
if
(
codec
.
name
=
=
"
H264
"
)
{
std
:
:
string
value
;
EXPECT_TRUE
(
codec
.
GetParam
(
cricket
:
:
kH264FmtpSpsPpsIdrInKeyframe
&
value
)
)
;
}
}
}
)
;
caller
(
)
-
>
CreateOfferAndWait
(
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
RenegotiateManyAudioTransceivers
)
{
PeerConnectionInterface
:
:
RTCConfiguration
config
;
config
.
sdp_semantics
=
SdpSemantics
:
:
kUnifiedPlan
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
cricket
:
:
MEDIA_TYPE_AUDIO
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
int
current_size
=
caller
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
.
size
(
)
;
while
(
current_size
<
8
)
{
for
(
int
i
=
0
;
i
<
current_size
;
i
+
+
)
{
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
cricket
:
:
MEDIA_TYPE_AUDIO
)
;
}
current_size
=
caller
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
.
size
(
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
Renegotiating
with
"
<
<
current_size
<
<
"
tracks
"
;
auto
start_time_ms
=
rtc
:
:
TimeMillis
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
elapsed_time_ms
=
rtc
:
:
TimeMillis
(
)
-
start_time_ms
;
RTC_LOG
(
LS_INFO
)
<
<
"
Renegotiating
took
"
<
<
elapsed_time_ms
<
<
"
ms
"
;
ASSERT_GT
(
1000
elapsed_time_ms
)
<
<
"
Audio
transceivers
:
Negotiation
took
too
long
after
"
<
<
current_size
<
<
"
tracks
added
"
;
}
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
RenegotiateManyVideoTransceivers
)
{
PeerConnectionInterface
:
:
RTCConfiguration
config
;
config
.
sdp_semantics
=
SdpSemantics
:
:
kUnifiedPlan
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
int
current_size
=
caller
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
.
size
(
)
;
while
(
current_size
<
16
)
{
for
(
int
i
=
0
;
i
<
current_size
;
i
+
+
)
{
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
;
}
current_size
=
caller
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
.
size
(
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
Renegotiating
with
"
<
<
current_size
<
<
"
tracks
"
;
auto
start_time_ms
=
rtc
:
:
TimeMillis
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
elapsed_time_ms
=
rtc
:
:
TimeMillis
(
)
-
start_time_ms
;
RTC_LOG
(
LS_INFO
)
<
<
"
Renegotiating
took
"
<
<
elapsed_time_ms
<
<
"
ms
"
;
ASSERT_GT
(
1000
elapsed_time_ms
)
<
<
"
Video
transceivers
:
Negotiation
took
too
long
after
"
<
<
current_size
<
<
"
tracks
added
"
;
}
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
RenegotiateManyVideoTransceiversAndWatchAudioDelay
)
{
PeerConnectionInterface
:
:
RTCConfiguration
config
;
config
.
sdp_semantics
=
SdpSemantics
:
:
kUnifiedPlan
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
caller
(
)
-
>
StartWatchingDelayStats
(
)
;
callee
(
)
-
>
StartWatchingDelayStats
(
)
;
int
current_size
=
caller
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
.
size
(
)
;
while
(
current_size
<
16
)
{
for
(
int
i
=
0
;
i
<
current_size
;
i
+
+
)
{
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
;
}
current_size
=
caller
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
.
size
(
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
Renegotiating
with
"
<
<
current_size
<
<
"
tracks
"
;
auto
start_time_ms
=
rtc
:
:
TimeMillis
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
elapsed_time_ms
=
rtc
:
:
TimeMillis
(
)
-
start_time_ms
;
RTC_LOG
(
LS_INFO
)
<
<
"
Renegotiating
took
"
<
<
elapsed_time_ms
<
<
"
ms
"
;
ASSERT_GT
(
5000
elapsed_time_ms
)
<
<
"
Video
transceivers
:
Negotiation
took
too
long
after
"
<
<
current_size
<
<
"
tracks
added
"
;
caller
(
)
-
>
UpdateDelayStats
(
"
caller
reception
"
current_size
)
;
callee
(
)
-
>
UpdateDelayStats
(
"
callee
reception
"
current_size
)
;
}
}
INSTANTIATE_TEST_SUITE_P
(
PeerConnectionIntegrationTest
PeerConnectionIntegrationTest
Values
(
SdpSemantics
:
:
kPlanB
SdpSemantics
:
:
kUnifiedPlan
)
)
;
INSTANTIATE_TEST_SUITE_P
(
PeerConnectionIntegrationTest
PeerConnectionIntegrationTestWithFakeClock
Values
(
SdpSemantics
:
:
kPlanB
SdpSemantics
:
:
kUnifiedPlan
)
)
;
class
PeerConnectionIntegrationInteropTest
:
public
PeerConnectionIntegrationBaseTest
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
tuple
<
SdpSemantics
SdpSemantics
>
>
{
protected
:
PeerConnectionIntegrationInteropTest
(
)
:
PeerConnectionIntegrationBaseTest
(
SdpSemantics
:
:
kPlanB
)
caller_semantics_
(
std
:
:
get
<
0
>
(
GetParam
(
)
)
)
callee_semantics_
(
std
:
:
get
<
1
>
(
GetParam
(
)
)
)
{
}
bool
CreatePeerConnectionWrappersWithSemantics
(
)
{
return
CreatePeerConnectionWrappersWithSdpSemantics
(
caller_semantics_
callee_semantics_
)
;
}
const
SdpSemantics
caller_semantics_
;
const
SdpSemantics
callee_semantics_
;
}
;
TEST_P
(
PeerConnectionIntegrationInteropTest
NoMediaLocalToNoMediaRemote
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithSemantics
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
}
TEST_P
(
PeerConnectionIntegrationInteropTest
OneAudioLocalToNoMediaRemote
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithSemantics
(
)
)
;
ConnectFakeSignaling
(
)
;
auto
audio_sender
=
caller
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
receivers
=
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
;
ASSERT_EQ
(
1u
receivers
.
size
(
)
)
;
EXPECT_EQ
(
cricket
:
:
MEDIA_TYPE_AUDIO
receivers
[
0
]
-
>
media_type
(
)
)
;
EXPECT_EQ
(
receivers
[
0
]
-
>
track
(
)
-
>
id
(
)
audio_sender
-
>
track
(
)
-
>
id
(
)
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationInteropTest
OneAudioOneVideoToNoMediaRemote
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithSemantics
(
)
)
;
ConnectFakeSignaling
(
)
;
auto
video_sender
=
caller
(
)
-
>
AddVideoTrack
(
)
;
auto
audio_sender
=
caller
(
)
-
>
AddAudioTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
audio_receivers
=
callee
(
)
-
>
GetReceiversOfType
(
cricket
:
:
MEDIA_TYPE_AUDIO
)
;
ASSERT_EQ
(
1u
audio_receivers
.
size
(
)
)
;
EXPECT_EQ
(
audio_receivers
[
0
]
-
>
track
(
)
-
>
id
(
)
audio_sender
-
>
track
(
)
-
>
id
(
)
)
;
auto
video_receivers
=
callee
(
)
-
>
GetReceiversOfType
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
;
ASSERT_EQ
(
1u
video_receivers
.
size
(
)
)
;
EXPECT_EQ
(
video_receivers
[
0
]
-
>
track
(
)
-
>
id
(
)
video_sender
-
>
track
(
)
-
>
id
(
)
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationInteropTest
OneAudioOneVideoLocalToOneAudioOneVideoRemote
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithSemantics
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
ExpectBidirectionalAudioAndVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_P
(
PeerConnectionIntegrationInteropTest
ReverseRolesOneAudioLocalToOneVideoRemote
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithSemantics
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
AddAudioTrack
(
)
;
callee
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ
(
0u
caller
(
)
-
>
GetReceiversOfType
(
cricket
:
:
MEDIA_TYPE_VIDEO
)
.
size
(
)
)
;
callee
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CallerExpectsSomeVideo
(
)
;
media_expectations
.
CalleeExpectsSomeAudio
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
INSTANTIATE_TEST_SUITE_P
(
PeerConnectionIntegrationTest
PeerConnectionIntegrationInteropTest
Values
(
std
:
:
make_tuple
(
SdpSemantics
:
:
kPlanB
SdpSemantics
:
:
kUnifiedPlan
)
std
:
:
make_tuple
(
SdpSemantics
:
:
kUnifiedPlan
SdpSemantics
:
:
kPlanB
)
)
)
;
TEST_F
(
PeerConnectionIntegrationTestPlanB
TwoVideoUnifiedPlanToNoMediaPlanB
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithSdpSemantics
(
SdpSemantics
:
:
kUnifiedPlan
SdpSemantics
:
:
kPlanB
)
)
;
ConnectFakeSignaling
(
)
;
auto
first_sender
=
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
AddVideoTrack
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
receivers
=
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
;
ASSERT_EQ
(
1u
receivers
.
size
(
)
)
;
EXPECT_TRUE
(
receivers
[
0
]
-
>
track
(
)
-
>
enabled
(
)
)
;
EXPECT_EQ
(
first_sender
-
>
track
(
)
-
>
id
(
)
receivers
[
0
]
-
>
track
(
)
-
>
id
(
)
)
;
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
ReOfferWithStoppedBundleTaggedTransceiver
)
{
RTCConfiguration
config
;
config
.
bundle_policy
=
PeerConnectionInterface
:
:
kBundlePolicyMaxBundle
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
auto
audio_transceiver_or_error
=
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
caller
(
)
-
>
CreateLocalAudioTrack
(
)
)
;
ASSERT_TRUE
(
audio_transceiver_or_error
.
ok
(
)
)
;
auto
audio_transceiver
=
audio_transceiver_or_error
.
MoveValue
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeAudio
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
audio_transceiver
-
>
StopInternal
(
)
;
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
caller
(
)
-
>
CreateLocalVideoTrack
(
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
{
MediaExpectations
media_expectations
;
media_expectations
.
CalleeExpectsSomeVideo
(
)
;
ASSERT_TRUE
(
ExpectNewFrames
(
media_expectations
)
)
;
}
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
StopTransceiverRemovesDtlsTransports
)
{
RTCConfiguration
config
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
auto
audio_transceiver_or_error
=
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
caller
(
)
-
>
CreateLocalAudioTrack
(
)
)
;
ASSERT_TRUE
(
audio_transceiver_or_error
.
ok
(
)
)
;
auto
audio_transceiver
=
audio_transceiver_or_error
.
MoveValue
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
audio_transceiver
-
>
StopStandard
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_EQ
(
0U
caller
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
.
size
(
)
)
;
EXPECT_EQ
(
PeerConnectionInterface
:
:
kIceGatheringNew
caller
(
)
-
>
pc
(
)
-
>
ice_gathering_state
(
)
)
;
EXPECT_THAT
(
caller
(
)
-
>
ice_gathering_state_history
(
)
ElementsAre
(
PeerConnectionInterface
:
:
kIceGatheringGathering
PeerConnectionInterface
:
:
kIceGatheringComplete
PeerConnectionInterface
:
:
kIceGatheringNew
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
StopTransceiverStopsAndRemovesTransceivers
)
{
RTCConfiguration
config
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
auto
audio_transceiver_or_error
=
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
caller
(
)
-
>
CreateLocalAudioTrack
(
)
)
;
ASSERT_TRUE
(
audio_transceiver_or_error
.
ok
(
)
)
;
auto
caller_transceiver
=
audio_transceiver_or_error
.
MoveValue
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
caller_transceiver
-
>
StopStandard
(
)
;
auto
callee_transceiver
=
callee
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
[
0
]
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ
(
0U
caller
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
.
size
(
)
)
;
EXPECT_EQ
(
0U
callee
(
)
-
>
pc
(
)
-
>
GetTransceivers
(
)
.
size
(
)
)
;
EXPECT_EQ
(
0U
caller
(
)
-
>
pc
(
)
-
>
GetSenders
(
)
.
size
(
)
)
;
EXPECT_EQ
(
0U
callee
(
)
-
>
pc
(
)
-
>
GetSenders
(
)
.
size
(
)
)
;
EXPECT_EQ
(
0U
caller
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
)
;
EXPECT_EQ
(
0U
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
.
size
(
)
)
;
EXPECT_TRUE
(
caller_transceiver
-
>
stopped
(
)
)
;
EXPECT_TRUE
(
callee_transceiver
-
>
stopped
(
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
StopTransceiverEndsIncomingAudioTrack
)
{
RTCConfiguration
config
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
auto
audio_transceiver_or_error
=
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
caller
(
)
-
>
CreateLocalAudioTrack
(
)
)
;
ASSERT_TRUE
(
audio_transceiver_or_error
.
ok
(
)
)
;
auto
audio_transceiver
=
audio_transceiver_or_error
.
MoveValue
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
caller_track
=
audio_transceiver
-
>
receiver
(
)
-
>
track
(
)
;
auto
callee_track
=
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
[
0
]
-
>
track
(
)
;
audio_transceiver
-
>
StopStandard
(
)
;
EXPECT_EQ
(
MediaStreamTrackInterface
:
:
TrackState
:
:
kEnded
caller_track
-
>
state
(
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ
(
MediaStreamTrackInterface
:
:
TrackState
:
:
kEnded
callee_track
-
>
state
(
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
StopTransceiverEndsIncomingVideoTrack
)
{
RTCConfiguration
config
;
ASSERT_TRUE
(
CreatePeerConnectionWrappersWithConfig
(
config
config
)
)
;
ConnectFakeSignaling
(
)
;
auto
audio_transceiver_or_error
=
caller
(
)
-
>
pc
(
)
-
>
AddTransceiver
(
caller
(
)
-
>
CreateLocalVideoTrack
(
)
)
;
ASSERT_TRUE
(
audio_transceiver_or_error
.
ok
(
)
)
;
auto
audio_transceiver
=
audio_transceiver_or_error
.
MoveValue
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
auto
caller_track
=
audio_transceiver
-
>
receiver
(
)
-
>
track
(
)
;
auto
callee_track
=
callee
(
)
-
>
pc
(
)
-
>
GetReceivers
(
)
[
0
]
-
>
track
(
)
;
audio_transceiver
-
>
StopStandard
(
)
;
EXPECT_EQ
(
MediaStreamTrackInterface
:
:
TrackState
:
:
kEnded
caller_track
-
>
state
(
)
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
EXPECT_EQ
(
MediaStreamTrackInterface
:
:
TrackState
:
:
kEnded
callee_track
-
>
state
(
)
)
;
}
#
ifdef
WEBRTC_HAVE_SCTP
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
EndToEndCallWithBundledSctpDataChannel
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
AddAudioVideoTracks
(
)
;
callee
(
)
-
>
AddAudioVideoTracks
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_EQ_WAIT
(
SctpTransportState
:
:
kConnected
caller
(
)
-
>
pc
(
)
-
>
GetSctpTransport
(
)
-
>
Information
(
)
.
state
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_channel
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
EndToEndCallWithDataChannelOnlyConnects
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_channel
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
ASSERT_TRUE
(
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
DataChannelClosesWhenClosed
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
data_channel
(
)
-
>
Close
(
)
;
ASSERT_TRUE_WAIT
(
!
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
DataChannelClosesWhenClosedReverse
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
callee
(
)
-
>
data_channel
(
)
-
>
Close
(
)
;
ASSERT_TRUE_WAIT
(
!
caller
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
}
TEST_F
(
PeerConnectionIntegrationTestUnifiedPlan
DataChannelClosesWhenPeerConnectionClosed
)
{
ASSERT_TRUE
(
CreatePeerConnectionWrappers
(
)
)
;
ConnectFakeSignaling
(
)
;
caller
(
)
-
>
CreateDataChannel
(
)
;
caller
(
)
-
>
CreateAndSetAndSignalOffer
(
)
;
ASSERT_TRUE_WAIT
(
SignalingStateStable
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
kDefaultTimeout
)
;
ASSERT_TRUE_WAIT
(
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
caller
(
)
-
>
pc
(
)
-
>
Close
(
)
;
ASSERT_TRUE_WAIT
(
!
callee
(
)
-
>
data_observer
(
)
-
>
IsOpen
(
)
kDefaultTimeout
)
;
}
#
endif
}
}
#
endif
