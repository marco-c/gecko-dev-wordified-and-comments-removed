#
include
"
pc
/
jitter_buffer_delay
.
h
"
#
include
<
stdint
.
h
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
pc
/
test
/
mock_delayable
.
h
"
#
include
"
rtc_base
/
ref_counted_object
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
using
:
:
testing
:
:
Return
;
namespace
{
constexpr
int
kSsrc
=
1234
;
}
namespace
webrtc
{
class
JitterBufferDelayTest
:
public
:
:
testing
:
:
Test
{
public
:
JitterBufferDelayTest
(
)
:
delay_
(
rtc
:
:
make_ref_counted
<
JitterBufferDelay
>
(
rtc
:
:
Thread
:
:
Current
(
)
)
)
{
}
protected
:
rtc
:
:
scoped_refptr
<
JitterBufferDelayInterface
>
delay_
;
MockDelayable
delayable_
;
}
;
TEST_F
(
JitterBufferDelayTest
Set
)
{
delay_
-
>
OnStart
(
&
delayable_
kSsrc
)
;
EXPECT_CALL
(
delayable_
SetBaseMinimumPlayoutDelayMs
(
kSsrc
3000
)
)
.
WillOnce
(
Return
(
true
)
)
;
delay_
-
>
Set
(
3
.
0
)
;
}
TEST_F
(
JitterBufferDelayTest
Caching
)
{
delay_
-
>
Set
(
4
.
0
)
;
EXPECT_CALL
(
delayable_
SetBaseMinimumPlayoutDelayMs
(
kSsrc
4000
)
)
.
WillOnce
(
Return
(
true
)
)
;
delay_
-
>
OnStart
(
&
delayable_
kSsrc
)
;
}
TEST_F
(
JitterBufferDelayTest
Clamping
)
{
delay_
-
>
OnStart
(
&
delayable_
kSsrc
)
;
EXPECT_CALL
(
delayable_
SetBaseMinimumPlayoutDelayMs
(
kSsrc
10000
)
)
.
WillOnce
(
Return
(
true
)
)
;
delay_
-
>
Set
(
10
.
5
)
;
EXPECT_CALL
(
delayable_
SetBaseMinimumPlayoutDelayMs
(
kSsrc
10000
)
)
.
WillOnce
(
Return
(
true
)
)
;
delay_
-
>
Set
(
21474836470
.
0
)
;
EXPECT_CALL
(
delayable_
SetBaseMinimumPlayoutDelayMs
(
kSsrc
0
)
)
.
WillOnce
(
Return
(
true
)
)
;
delay_
-
>
Set
(
-
21474836470
.
0
)
;
EXPECT_CALL
(
delayable_
SetBaseMinimumPlayoutDelayMs
(
kSsrc
0
)
)
.
WillOnce
(
Return
(
true
)
)
;
delay_
-
>
Set
(
0
.
0009
)
;
EXPECT_CALL
(
delayable_
SetBaseMinimumPlayoutDelayMs
(
kSsrc
0
)
)
.
WillOnce
(
Return
(
true
)
)
;
delay_
-
>
Set
(
-
2
.
0
)
;
}
}
