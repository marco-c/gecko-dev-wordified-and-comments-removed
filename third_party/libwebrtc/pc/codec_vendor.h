#
ifndef
PC_CODEC_VENDOR_H_
#
define
PC_CODEC_VENDOR_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtp_transceiver_direction
.
h
"
#
include
"
call
/
payload_type
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
codec_list
.
h
"
#
include
"
media
/
base
/
media_engine
.
h
"
#
include
"
pc
/
media_options
.
h
"
#
include
"
pc
/
session_description
.
h
"
#
include
"
pc
/
typed_codec_vendor
.
h
"
namespace
webrtc
{
class
CodecVendor
{
public
:
CodecVendor
(
cricket
:
:
MediaEngineInterface
*
media_engine
bool
rtx_enabled
const
FieldTrialsView
&
trials
)
;
public
:
RTCErrorOr
<
std
:
:
vector
<
cricket
:
:
Codec
>
>
GetNegotiatedCodecsForOffer
(
const
MediaDescriptionOptions
&
media_description_options
const
MediaSessionOptions
&
session_options
const
ContentInfo
*
current_content
PayloadTypeSuggester
&
pt_suggester
)
;
RTCErrorOr
<
cricket
:
:
Codecs
>
GetNegotiatedCodecsForAnswer
(
const
MediaDescriptionOptions
&
media_description_options
const
MediaSessionOptions
&
session_options
RtpTransceiverDirection
offer_rtd
RtpTransceiverDirection
answer_rtd
const
ContentInfo
*
current_content
std
:
:
vector
<
cricket
:
:
Codec
>
codecs_from_offer
PayloadTypeSuggester
&
pt_suggester
)
;
void
set_audio_codecs
(
const
cricket
:
:
CodecList
&
send_codecs
const
cricket
:
:
CodecList
&
recv_codecs
)
;
void
set_audio_codecs
(
const
std
:
:
vector
<
cricket
:
:
Codec
>
&
send_codecs
const
std
:
:
vector
<
cricket
:
:
Codec
>
&
recv_codecs
)
{
set_audio_codecs
(
cricket
:
:
CodecList
:
:
CreateFromTrustedData
(
send_codecs
)
cricket
:
:
CodecList
:
:
CreateFromTrustedData
(
recv_codecs
)
)
;
}
void
set_video_codecs
(
const
cricket
:
:
CodecList
&
send_codecs
const
cricket
:
:
CodecList
&
recv_codecs
)
;
void
set_video_codecs
(
const
std
:
:
vector
<
cricket
:
:
Codec
>
&
send_codecs
const
std
:
:
vector
<
cricket
:
:
Codec
>
&
recv_codecs
)
{
set_video_codecs
(
cricket
:
:
CodecList
:
:
CreateFromTrustedData
(
send_codecs
)
cricket
:
:
CodecList
:
:
CreateFromTrustedData
(
recv_codecs
)
)
;
}
cricket
:
:
CodecList
audio_sendrecv_codecs
(
)
const
;
const
cricket
:
:
CodecList
&
audio_send_codecs
(
)
const
;
const
cricket
:
:
CodecList
&
audio_recv_codecs
(
)
const
;
cricket
:
:
CodecList
video_sendrecv_codecs
(
)
const
;
const
cricket
:
:
CodecList
&
video_send_codecs
(
)
const
;
const
cricket
:
:
CodecList
&
video_recv_codecs
(
)
const
;
private
:
cricket
:
:
CodecList
GetAudioCodecsForOffer
(
const
RtpTransceiverDirection
&
direction
)
const
;
cricket
:
:
CodecList
GetAudioCodecsForAnswer
(
const
RtpTransceiverDirection
&
offer
const
RtpTransceiverDirection
&
answer
)
const
;
cricket
:
:
CodecList
GetVideoCodecsForOffer
(
const
RtpTransceiverDirection
&
direction
)
const
;
cricket
:
:
CodecList
GetVideoCodecsForAnswer
(
const
RtpTransceiverDirection
&
offer
const
RtpTransceiverDirection
&
answer
)
const
;
cricket
:
:
CodecList
all_video_codecs
(
)
const
;
cricket
:
:
CodecList
all_audio_codecs
(
)
const
;
TypedCodecVendor
audio_send_codecs_
;
TypedCodecVendor
audio_recv_codecs_
;
TypedCodecVendor
video_send_codecs_
;
TypedCodecVendor
video_recv_codecs_
;
}
;
class
CodecLookupHelper
{
public
:
virtual
~
CodecLookupHelper
(
)
=
default
;
virtual
PayloadTypeSuggester
*
PayloadTypeSuggester
(
)
=
0
;
virtual
CodecVendor
*
CodecVendor
(
const
std
:
:
string
&
mid
)
=
0
;
}
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
CodecLookupHelper
;
using
:
:
webrtc
:
:
CodecVendor
;
}
#
endif
