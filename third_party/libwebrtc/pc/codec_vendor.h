#
ifndef
PC_CODEC_VENDOR_H_
#
define
PC_CODEC_VENDOR_H_
#
include
<
vector
>
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtp_transceiver_direction
.
h
"
#
include
"
call
/
payload_type
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
codec_list
.
h
"
#
include
"
media
/
base
/
media_engine
.
h
"
#
include
"
pc
/
media_options
.
h
"
#
include
"
pc
/
session_description
.
h
"
namespace
cricket
{
class
TypedCodecVendor
{
public
:
TypedCodecVendor
(
)
{
}
TypedCodecVendor
(
MediaEngineInterface
*
media_engine
MediaType
type
bool
is_sender
bool
rtx_enabled
)
;
const
CodecList
&
codecs
(
)
const
{
return
codecs_
;
}
void
set_codecs
(
const
CodecList
&
codecs
)
{
codecs_
=
codecs
;
}
TypedCodecVendor
(
const
TypedCodecVendor
&
from
)
=
default
;
TypedCodecVendor
&
operator
=
(
const
TypedCodecVendor
&
from
)
=
default
;
private
:
CodecList
codecs_
;
}
;
class
CodecVendor
{
public
:
CodecVendor
(
MediaEngineInterface
*
media_engine
bool
rtx_enabled
)
;
public
:
webrtc
:
:
RTCError
GetCodecsForOffer
(
const
std
:
:
vector
<
const
ContentInfo
*
>
&
current_active_contents
CodecList
&
audio_codecs
CodecList
&
video_codecs
)
const
;
webrtc
:
:
RTCError
GetCodecsForAnswer
(
const
std
:
:
vector
<
const
ContentInfo
*
>
&
current_active_contents
const
SessionDescription
&
remote_offer
CodecList
&
audio_codecs
CodecList
&
video_codecs
)
const
;
webrtc
:
:
RTCErrorOr
<
std
:
:
vector
<
Codec
>
>
GetNegotiatedCodecsForOffer
(
const
MediaDescriptionOptions
&
media_description_options
const
MediaSessionOptions
&
session_options
const
ContentInfo
*
current_content
webrtc
:
:
PayloadTypeSuggester
&
pt_suggester
const
CodecList
&
codecs
)
;
webrtc
:
:
RTCErrorOr
<
Codecs
>
GetNegotiatedCodecsForAnswer
(
const
MediaDescriptionOptions
&
media_description_options
const
MediaSessionOptions
&
session_options
webrtc
:
:
RtpTransceiverDirection
offer_rtd
webrtc
:
:
RtpTransceiverDirection
answer_rtd
const
ContentInfo
*
current_content
std
:
:
vector
<
Codec
>
codecs_from_offer
webrtc
:
:
PayloadTypeSuggester
&
pt_suggester
const
CodecList
&
codecs
)
;
void
set_audio_codecs
(
const
CodecList
&
send_codecs
const
CodecList
&
recv_codecs
)
;
void
set_audio_codecs
(
const
std
:
:
vector
<
Codec
>
&
send_codecs
const
std
:
:
vector
<
Codec
>
&
recv_codecs
)
{
set_audio_codecs
(
CodecList
:
:
CreateFromTrustedData
(
send_codecs
)
CodecList
:
:
CreateFromTrustedData
(
recv_codecs
)
)
;
}
void
set_video_codecs
(
const
CodecList
&
send_codecs
const
CodecList
&
recv_codecs
)
;
void
set_video_codecs
(
const
std
:
:
vector
<
Codec
>
&
send_codecs
const
std
:
:
vector
<
Codec
>
&
recv_codecs
)
{
set_video_codecs
(
CodecList
:
:
CreateFromTrustedData
(
send_codecs
)
CodecList
:
:
CreateFromTrustedData
(
recv_codecs
)
)
;
}
CodecList
audio_sendrecv_codecs
(
)
const
;
const
CodecList
&
audio_send_codecs
(
)
const
;
const
CodecList
&
audio_recv_codecs
(
)
const
;
CodecList
video_sendrecv_codecs
(
)
const
;
const
CodecList
&
video_send_codecs
(
)
const
;
const
CodecList
&
video_recv_codecs
(
)
const
;
private
:
CodecList
GetAudioCodecsForOffer
(
const
webrtc
:
:
RtpTransceiverDirection
&
direction
)
const
;
CodecList
GetAudioCodecsForAnswer
(
const
webrtc
:
:
RtpTransceiverDirection
&
offer
const
webrtc
:
:
RtpTransceiverDirection
&
answer
)
const
;
CodecList
GetVideoCodecsForOffer
(
const
webrtc
:
:
RtpTransceiverDirection
&
direction
)
const
;
CodecList
GetVideoCodecsForAnswer
(
const
webrtc
:
:
RtpTransceiverDirection
&
offer
const
webrtc
:
:
RtpTransceiverDirection
&
answer
)
const
;
CodecList
all_video_codecs
(
)
const
;
CodecList
all_audio_codecs
(
)
const
;
TypedCodecVendor
audio_send_codecs_
;
TypedCodecVendor
audio_recv_codecs_
;
TypedCodecVendor
video_send_codecs_
;
TypedCodecVendor
video_recv_codecs_
;
}
;
}
#
endif
