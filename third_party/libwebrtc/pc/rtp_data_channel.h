#
ifndef
PC_RTP_DATA_CHANNEL_H_
#
define
PC_RTP_DATA_CHANNEL_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
api
/
data_channel_interface
.
h
"
#
include
"
api
/
priority
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
transport
/
data_channel_transport_interface
.
h
"
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
pc
/
channel
.
h
"
#
include
"
pc
/
data_channel_utils
.
h
"
#
include
"
rtc_base
/
async_invoker
.
h
"
#
include
"
rtc_base
/
third_party
/
sigslot
/
sigslot
.
h
"
namespace
webrtc
{
class
RtpDataChannel
;
class
RtpDataChannelProviderInterface
{
public
:
virtual
bool
SendData
(
const
cricket
:
:
SendDataParams
&
params
const
rtc
:
:
CopyOnWriteBuffer
&
payload
cricket
:
:
SendDataResult
*
result
)
=
0
;
virtual
bool
ConnectDataChannel
(
RtpDataChannel
*
data_channel
)
=
0
;
virtual
void
DisconnectDataChannel
(
RtpDataChannel
*
data_channel
)
=
0
;
virtual
bool
ReadyToSendData
(
)
const
=
0
;
protected
:
virtual
~
RtpDataChannelProviderInterface
(
)
{
}
}
;
class
RtpDataChannel
:
public
DataChannelInterface
public
sigslot
:
:
has_slots
<
>
{
public
:
static
rtc
:
:
scoped_refptr
<
RtpDataChannel
>
Create
(
RtpDataChannelProviderInterface
*
provider
const
std
:
:
string
&
label
const
DataChannelInit
&
config
rtc
:
:
Thread
*
signaling_thread
)
;
static
rtc
:
:
scoped_refptr
<
DataChannelInterface
>
CreateProxy
(
rtc
:
:
scoped_refptr
<
RtpDataChannel
>
channel
)
;
void
RegisterObserver
(
DataChannelObserver
*
observer
)
override
;
void
UnregisterObserver
(
)
override
;
std
:
:
string
label
(
)
const
override
{
return
label_
;
}
bool
reliable
(
)
const
override
{
return
false
;
}
bool
ordered
(
)
const
override
{
return
config_
.
ordered
;
}
uint16_t
maxRetransmitTime
(
)
const
override
{
return
config_
.
maxRetransmitTime
?
*
config_
.
maxRetransmitTime
:
static_cast
<
uint16_t
>
(
-
1
)
;
}
uint16_t
maxRetransmits
(
)
const
override
{
return
config_
.
maxRetransmits
?
*
config_
.
maxRetransmits
:
static_cast
<
uint16_t
>
(
-
1
)
;
}
absl
:
:
optional
<
int
>
maxPacketLifeTime
(
)
const
override
{
return
config_
.
maxRetransmitTime
;
}
absl
:
:
optional
<
int
>
maxRetransmitsOpt
(
)
const
override
{
return
config_
.
maxRetransmits
;
}
std
:
:
string
protocol
(
)
const
override
{
return
config_
.
protocol
;
}
bool
negotiated
(
)
const
override
{
return
config_
.
negotiated
;
}
int
id
(
)
const
override
{
return
config_
.
id
;
}
Priority
priority
(
)
const
override
{
return
config_
.
priority
?
*
config_
.
priority
:
Priority
:
:
kLow
;
}
virtual
int
internal_id
(
)
const
{
return
internal_id_
;
}
uint64_t
buffered_amount
(
)
const
override
{
return
0
;
}
void
Close
(
)
override
;
DataState
state
(
)
const
override
;
RTCError
error
(
)
const
override
;
uint32_t
messages_sent
(
)
const
override
;
uint64_t
bytes_sent
(
)
const
override
;
uint32_t
messages_received
(
)
const
override
;
uint64_t
bytes_received
(
)
const
override
;
bool
Send
(
const
DataBuffer
&
buffer
)
override
;
void
CloseAbruptlyWithError
(
RTCError
error
)
;
void
OnChannelReady
(
bool
writable
)
;
void
OnDataReceived
(
const
cricket
:
:
ReceiveDataParams
&
params
const
rtc
:
:
CopyOnWriteBuffer
&
payload
)
;
void
OnTransportChannelClosed
(
)
;
DataChannelStats
GetStats
(
)
const
;
void
RemotePeerRequestClose
(
)
;
void
SetSendSsrc
(
uint32_t
send_ssrc
)
;
void
SetReceiveSsrc
(
uint32_t
receive_ssrc
)
;
sigslot
:
:
signal1
<
DataChannelInterface
*
>
SignalOpened
;
sigslot
:
:
signal1
<
DataChannelInterface
*
>
SignalClosed
;
static
void
ResetInternalIdAllocatorForTesting
(
int
new_value
)
;
protected
:
RtpDataChannel
(
const
DataChannelInit
&
config
RtpDataChannelProviderInterface
*
client
const
std
:
:
string
&
label
rtc
:
:
Thread
*
signaling_thread
)
;
~
RtpDataChannel
(
)
override
;
private
:
bool
Init
(
)
;
void
UpdateState
(
)
;
void
SetState
(
DataState
state
)
;
void
DisconnectFromProvider
(
)
;
void
DeliverQueuedReceivedData
(
)
;
bool
SendDataMessage
(
const
DataBuffer
&
buffer
)
;
rtc
:
:
Thread
*
const
signaling_thread_
;
const
int
internal_id_
;
const
std
:
:
string
label_
;
const
DataChannelInit
config_
;
DataChannelObserver
*
observer_
RTC_GUARDED_BY
(
signaling_thread_
)
=
nullptr
;
DataState
state_
RTC_GUARDED_BY
(
signaling_thread_
)
=
kConnecting
;
RTCError
error_
RTC_GUARDED_BY
(
signaling_thread_
)
;
uint32_t
messages_sent_
RTC_GUARDED_BY
(
signaling_thread_
)
=
0
;
uint64_t
bytes_sent_
RTC_GUARDED_BY
(
signaling_thread_
)
=
0
;
uint32_t
messages_received_
RTC_GUARDED_BY
(
signaling_thread_
)
=
0
;
uint64_t
bytes_received_
RTC_GUARDED_BY
(
signaling_thread_
)
=
0
;
RtpDataChannelProviderInterface
*
const
provider_
;
bool
connected_to_provider_
RTC_GUARDED_BY
(
signaling_thread_
)
=
false
;
bool
send_ssrc_set_
RTC_GUARDED_BY
(
signaling_thread_
)
=
false
;
bool
receive_ssrc_set_
RTC_GUARDED_BY
(
signaling_thread_
)
=
false
;
bool
writable_
RTC_GUARDED_BY
(
signaling_thread_
)
=
false
;
uint32_t
send_ssrc_
RTC_GUARDED_BY
(
signaling_thread_
)
=
0
;
uint32_t
receive_ssrc_
RTC_GUARDED_BY
(
signaling_thread_
)
=
0
;
PacketQueue
queued_received_data_
RTC_GUARDED_BY
(
signaling_thread_
)
;
rtc
:
:
AsyncInvoker
invoker_
RTC_GUARDED_BY
(
signaling_thread_
)
;
}
;
}
#
endif
