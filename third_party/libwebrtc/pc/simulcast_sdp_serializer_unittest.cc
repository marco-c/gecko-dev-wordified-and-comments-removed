#
include
"
pc
/
simulcast_sdp_serializer
.
h
"
#
include
<
stddef
.
h
>
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
rid_description
.
h
"
#
include
"
pc
/
session_description
.
h
"
#
include
"
pc
/
simulcast_description
.
h
"
#
include
"
test
/
gtest
.
h
"
using
cricket
:
:
RidDescription
;
using
cricket
:
:
RidDirection
;
using
:
:
testing
:
:
TestWithParam
;
using
:
:
testing
:
:
ValuesIn
;
using
:
:
webrtc
:
:
SimulcastDescription
;
using
:
:
webrtc
:
:
SimulcastLayer
;
using
:
:
webrtc
:
:
SimulcastLayerList
;
namespace
webrtc
{
namespace
{
template
<
typename
TElement
>
void
ExpectEqual
(
const
std
:
:
vector
<
TElement
>
&
expected
const
std
:
:
vector
<
TElement
>
&
actual
)
{
ASSERT_EQ
(
expected
.
size
(
)
actual
.
size
(
)
)
;
for
(
size_t
i
=
0
;
i
<
expected
.
size
(
)
;
i
+
+
)
{
EXPECT_EQ
(
expected
[
i
]
actual
[
i
]
)
<
<
"
Vectors
differ
at
element
"
<
<
i
;
}
}
template
<
>
void
ExpectEqual
(
const
std
:
:
vector
<
SimulcastLayer
>
&
expected
const
std
:
:
vector
<
SimulcastLayer
>
&
actual
)
{
EXPECT_EQ
(
expected
.
size
(
)
actual
.
size
(
)
)
;
for
(
size_t
i
=
0
;
i
<
expected
.
size
(
)
;
i
+
+
)
{
EXPECT_EQ
(
expected
[
i
]
.
rid
actual
[
i
]
.
rid
)
;
EXPECT_EQ
(
expected
[
i
]
.
is_paused
actual
[
i
]
.
is_paused
)
;
}
}
template
<
typename
TKey
typename
TValue
>
void
ExpectEqual
(
const
std
:
:
map
<
TKey
TValue
>
&
expected
const
std
:
:
map
<
TKey
TValue
>
&
actual
)
{
typedef
typename
std
:
:
map
<
TKey
TValue
>
:
:
const_iterator
const_iterator
;
ASSERT_EQ
(
expected
.
size
(
)
actual
.
size
(
)
)
;
for
(
const
auto
&
pair
:
expected
)
{
const_iterator
iter
=
actual
.
find
(
pair
.
first
)
;
EXPECT_NE
(
iter
actual
.
end
(
)
)
<
<
"
Key
:
"
<
<
pair
.
first
<
<
"
not
found
"
;
EXPECT_EQ
(
pair
.
second
iter
-
>
second
)
;
}
}
void
ExpectEqual
(
const
SimulcastLayerList
&
expected
const
SimulcastLayerList
&
actual
)
{
EXPECT_EQ
(
expected
.
size
(
)
actual
.
size
(
)
)
;
for
(
size_t
i
=
0
;
i
<
expected
.
size
(
)
;
i
+
+
)
{
ExpectEqual
(
expected
[
i
]
actual
[
i
]
)
;
}
}
void
ExpectEqual
(
const
SimulcastDescription
&
expected
const
SimulcastDescription
&
actual
)
{
ExpectEqual
(
expected
.
send_layers
(
)
actual
.
send_layers
(
)
)
;
ExpectEqual
(
expected
.
receive_layers
(
)
actual
.
receive_layers
(
)
)
;
}
void
ExpectEqual
(
const
RidDescription
&
expected
const
RidDescription
&
actual
)
{
EXPECT_EQ
(
expected
.
rid
actual
.
rid
)
;
EXPECT_EQ
(
expected
.
direction
actual
.
direction
)
;
ExpectEqual
(
expected
.
codecs
actual
.
codecs
)
;
ExpectEqual
(
expected
.
restrictions
actual
.
restrictions
)
;
}
}
class
SimulcastSdpSerializerTest
:
public
TestWithParam
<
const
char
*
>
{
public
:
void
TestDeserialization
(
const
std
:
:
string
&
str
const
SimulcastDescription
&
expected
)
const
{
SimulcastSdpSerializer
deserializer
;
auto
result
=
deserializer
.
DeserializeSimulcastDescription
(
str
)
;
EXPECT_TRUE
(
result
.
ok
(
)
)
;
ExpectEqual
(
expected
result
.
value
(
)
)
;
}
void
TestSerialization
(
const
SimulcastDescription
&
simulcast
const
std
:
:
string
&
expected
)
const
{
SimulcastSdpSerializer
serializer
;
auto
result
=
serializer
.
SerializeSimulcastDescription
(
simulcast
)
;
EXPECT_EQ
(
expected
result
)
;
}
}
;
TEST_F
(
SimulcastSdpSerializerTest
Deserialize_SimpleCaseNoAlternatives
)
{
std
:
:
string
simulcast_str
=
"
send
1
;
2
recv
3
;
4
"
;
SimulcastDescription
expected
;
expected
.
send_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
1
"
false
)
)
;
expected
.
send_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
2
"
false
)
)
;
expected
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
3
"
false
)
)
;
expected
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
4
"
false
)
)
;
TestDeserialization
(
simulcast_str
expected
)
;
}
TEST_F
(
SimulcastSdpSerializerTest
Deserialize_SimpleCaseWithAlternatives
)
{
std
:
:
string
simulcast_str
=
"
send
1
5
;
2
6
recv
3
7
;
4
8
"
;
SimulcastDescription
expected
;
expected
.
send_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
1
"
false
)
SimulcastLayer
(
"
5
"
false
)
}
)
;
expected
.
send_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
2
"
false
)
SimulcastLayer
(
"
6
"
false
)
}
)
;
expected
.
receive_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
3
"
false
)
SimulcastLayer
(
"
7
"
false
)
}
)
;
expected
.
receive_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
4
"
false
)
SimulcastLayer
(
"
8
"
false
)
}
)
;
TestDeserialization
(
simulcast_str
expected
)
;
}
TEST_F
(
SimulcastSdpSerializerTest
Deserialize_WithSomeAlternatives
)
{
std
:
:
string
simulcast_str
=
"
send
1
;
2
6
recv
3
7
;
4
"
;
SimulcastDescription
expected
;
expected
.
send_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
1
"
false
)
)
;
expected
.
send_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
2
"
false
)
SimulcastLayer
(
"
6
"
false
)
}
)
;
expected
.
receive_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
3
"
false
)
SimulcastLayer
(
"
7
"
false
)
}
)
;
expected
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
4
"
false
)
)
;
TestDeserialization
(
simulcast_str
expected
)
;
}
TEST_F
(
SimulcastSdpSerializerTest
Deserialize_OnlySendStreams
)
{
std
:
:
string
simulcast_str
=
"
send
1
;
2
6
;
3
7
;
4
"
;
SimulcastDescription
expected
;
expected
.
send_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
1
"
false
)
)
;
expected
.
send_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
2
"
false
)
SimulcastLayer
(
"
6
"
false
)
}
)
;
expected
.
send_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
3
"
false
)
SimulcastLayer
(
"
7
"
false
)
}
)
;
expected
.
send_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
4
"
false
)
)
;
TestDeserialization
(
simulcast_str
expected
)
;
}
TEST_F
(
SimulcastSdpSerializerTest
Deserialize_OnlyReceiveStreams
)
{
std
:
:
string
simulcast_str
=
"
recv
1
;
2
6
;
3
7
;
4
"
;
SimulcastDescription
expected
;
expected
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
1
"
false
)
)
;
expected
.
receive_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
2
"
false
)
SimulcastLayer
(
"
6
"
false
)
}
)
;
expected
.
receive_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
3
"
false
)
SimulcastLayer
(
"
7
"
false
)
}
)
;
expected
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
4
"
false
)
)
;
TestDeserialization
(
simulcast_str
expected
)
;
}
TEST_F
(
SimulcastSdpSerializerTest
Deserialize_SendReceiveReversed
)
{
std
:
:
string
simulcast_str
=
"
recv
1
;
2
6
send
3
7
;
4
"
;
SimulcastDescription
expected
;
expected
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
1
"
false
)
)
;
expected
.
receive_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
2
"
false
)
SimulcastLayer
(
"
6
"
false
)
}
)
;
expected
.
send_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
3
"
false
)
SimulcastLayer
(
"
7
"
false
)
}
)
;
expected
.
send_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
4
"
false
)
)
;
TestDeserialization
(
simulcast_str
expected
)
;
}
TEST_F
(
SimulcastSdpSerializerTest
Deserialize_PausedStreams
)
{
std
:
:
string
simulcast_str
=
"
recv
1
;
~
2
6
send
3
7
;
~
4
"
;
SimulcastDescription
expected
;
expected
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
1
"
false
)
)
;
expected
.
receive_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
2
"
true
)
SimulcastLayer
(
"
6
"
false
)
}
)
;
expected
.
send_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
3
"
false
)
SimulcastLayer
(
"
7
"
false
)
}
)
;
expected
.
send_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
4
"
true
)
)
;
TestDeserialization
(
simulcast_str
expected
)
;
}
TEST_P
(
SimulcastSdpSerializerTest
SimulcastDeserializationFailed
)
{
SimulcastSdpSerializer
deserializer
;
auto
result
=
deserializer
.
DeserializeSimulcastDescription
(
GetParam
(
)
)
;
EXPECT_FALSE
(
result
.
ok
(
)
)
;
}
const
char
*
kSimulcastMalformedStrings
[
]
=
{
"
send
"
"
recv
"
"
recv
1
send
"
"
receive
1
"
"
recv
1
;
~
2
6
recv
3
7
;
~
4
"
"
send
1
;
~
2
6
send
3
7
;
~
4
"
"
send
~
;
~
2
6
"
"
send
1
;
;
~
2
6
"
"
send
1
;
~
2
6
"
"
recv
1
send
2
3
"
"
"
}
;
INSTANTIATE_TEST_SUITE_P
(
SimulcastDeserializationErrors
SimulcastSdpSerializerTest
ValuesIn
(
kSimulcastMalformedStrings
)
)
;
TEST_F
(
SimulcastSdpSerializerTest
Serialize_SimpleCase
)
{
SimulcastDescription
simulcast
;
simulcast
.
send_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
1
"
false
)
)
;
simulcast
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
2
"
false
)
)
;
TestSerialization
(
simulcast
"
send
1
recv
2
"
)
;
}
TEST_F
(
SimulcastSdpSerializerTest
Serialize_OnlySend
)
{
SimulcastDescription
simulcast
;
simulcast
.
send_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
1
"
false
)
)
;
simulcast
.
send_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
2
"
false
)
)
;
TestSerialization
(
simulcast
"
send
1
;
2
"
)
;
}
TEST_F
(
SimulcastSdpSerializerTest
Serialize_OnlyReceive
)
{
SimulcastDescription
simulcast
;
simulcast
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
1
"
false
)
)
;
simulcast
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
2
"
false
)
)
;
TestSerialization
(
simulcast
"
recv
1
;
2
"
)
;
}
TEST_F
(
SimulcastSdpSerializerTest
Serialize_ComplexSerialization
)
{
SimulcastDescription
simulcast
;
simulcast
.
send_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
2
"
false
)
SimulcastLayer
(
"
1
"
true
)
}
)
;
simulcast
.
send_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
4
"
false
)
SimulcastLayer
(
"
3
"
false
)
}
)
;
simulcast
.
receive_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
6
"
false
)
SimulcastLayer
(
"
7
"
false
)
}
)
;
simulcast
.
receive_layers
(
)
.
AddLayer
(
SimulcastLayer
(
"
8
"
true
)
)
;
simulcast
.
receive_layers
(
)
.
AddLayerWithAlternatives
(
{
SimulcastLayer
(
"
9
"
false
)
SimulcastLayer
(
"
10
"
true
)
SimulcastLayer
(
"
11
"
false
)
}
)
;
TestSerialization
(
simulcast
"
send
2
~
1
;
4
3
recv
6
7
;
~
8
;
9
~
10
11
"
)
;
}
class
RidDescriptionSdpSerializerTest
:
public
TestWithParam
<
const
char
*
>
{
public
:
void
TestDeserialization
(
const
MediaContentDescription
&
media_desc
const
std
:
:
string
&
str
const
RidDescription
&
expected
)
const
{
SimulcastSdpSerializer
deserializer
;
auto
result
=
deserializer
.
DeserializeRidDescription
(
media_desc
str
)
;
EXPECT_TRUE
(
result
.
ok
(
)
)
;
ExpectEqual
(
expected
result
.
value
(
)
)
;
}
void
TestSerialization
(
const
MediaContentDescription
&
media_desc
const
RidDescription
&
rid_description
const
std
:
:
string
&
expected
)
const
{
SimulcastSdpSerializer
serializer
;
auto
result
=
serializer
.
SerializeRidDescription
(
media_desc
rid_description
)
;
EXPECT_EQ
(
expected
result
)
;
}
}
;
TEST_F
(
RidDescriptionSdpSerializerTest
Serialize_OnlyDirectionSend
)
{
RidDescription
rid_description
(
"
1
"
RidDirection
:
:
kSend
)
;
TestSerialization
(
VideoContentDescription
(
)
rid_description
"
1
send
"
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Serialize_OnlyDirectionReceive
)
{
RidDescription
rid_description
(
"
2
"
RidDirection
:
:
kReceive
)
;
TestSerialization
(
VideoContentDescription
(
)
rid_description
"
2
recv
"
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Serialize_FormatList
)
{
Codec
vp8
=
CreateVideoCodec
(
101
"
VP8
"
)
;
Codec
vp9
=
CreateVideoCodec
(
102
"
VP9
"
)
;
VideoContentDescription
video_desc
;
video_desc
.
set_codecs
(
{
vp8
vp9
}
)
;
RidDescription
rid_description
(
"
3
"
RidDirection
:
:
kSend
)
;
rid_description
.
codecs
=
{
vp9
vp8
}
;
TestSerialization
(
video_desc
rid_description
"
3
send
pt
=
102
101
"
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Serialize_FormatListSingleFormat
)
{
Codec
vp8
=
CreateVideoCodec
(
100
"
VP8
"
)
;
VideoContentDescription
video_desc
;
video_desc
.
set_codecs
(
{
vp8
}
)
;
RidDescription
rid_description
(
"
4
"
RidDirection
:
:
kReceive
)
;
rid_description
.
codecs
=
{
vp8
}
;
TestSerialization
(
video_desc
rid_description
"
4
recv
pt
=
100
"
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Serialize_AttributeList
)
{
RidDescription
rid_description
(
"
5
"
RidDirection
:
:
kSend
)
;
rid_description
.
restrictions
[
"
max
-
width
"
]
=
"
1280
"
;
rid_description
.
restrictions
[
"
max
-
height
"
]
=
"
720
"
;
TestSerialization
(
VideoContentDescription
(
)
rid_description
"
5
send
max
-
height
=
720
;
max
-
width
=
1280
"
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Serialize_FormatAndAttributeList
)
{
Codec
vp8
=
CreateVideoCodec
(
103
"
VP8
"
)
;
Codec
vp9
=
CreateVideoCodec
(
104
"
VP9
"
)
;
VideoContentDescription
video_desc
;
video_desc
.
set_codecs
(
{
vp8
vp9
}
)
;
RidDescription
rid_description
(
"
6
"
RidDirection
:
:
kSend
)
;
rid_description
.
codecs
=
{
vp8
vp9
}
;
rid_description
.
restrictions
[
"
max
-
mbps
"
]
=
"
108000
"
;
rid_description
.
restrictions
[
"
max
-
br
"
]
=
"
64000
"
;
TestSerialization
(
video_desc
rid_description
"
6
send
pt
=
103
104
;
max
-
br
=
64000
;
max
-
mbps
=
108000
"
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Serialize_RestrictionWithoutValue
)
{
Codec
vp8
=
CreateVideoCodec
(
103
"
VP8
"
)
;
VideoContentDescription
video_desc
;
video_desc
.
set_codecs
(
{
vp8
}
)
;
RidDescription
rid_description
(
"
7
"
RidDirection
:
:
kReceive
)
;
rid_description
.
codecs
=
{
vp8
}
;
rid_description
.
restrictions
[
"
max
-
width
"
]
=
"
1280
"
;
rid_description
.
restrictions
[
"
max
-
height
"
]
=
"
720
"
;
rid_description
.
restrictions
[
"
max
-
myval
"
]
=
"
"
;
TestSerialization
(
video_desc
rid_description
"
7
recv
pt
=
103
;
max
-
height
=
720
;
max
-
myval
;
max
-
width
=
1280
"
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_SimpleSendCase
)
{
RidDescription
rid_description
(
"
1
"
RidDirection
:
:
kSend
)
;
TestDeserialization
(
VideoContentDescription
(
)
"
1
send
"
rid_description
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_SimpleReceiveCase
)
{
RidDescription
rid_description
(
"
2
"
RidDirection
:
:
kReceive
)
;
TestDeserialization
(
VideoContentDescription
(
)
"
2
recv
"
rid_description
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_WithFormat
)
{
Codec
vp8
=
CreateVideoCodec
(
101
"
VP8
"
)
;
VideoContentDescription
video_desc
;
video_desc
.
set_codecs
(
{
vp8
}
)
;
RidDescription
rid_description
(
"
3
"
RidDirection
:
:
kSend
)
;
rid_description
.
codecs
=
{
vp8
}
;
TestDeserialization
(
video_desc
"
3
send
pt
=
101
"
rid_description
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_ReferencingUnknownCodec
)
{
Codec
vp8
=
CreateVideoCodec
(
101
"
VP8
"
)
;
VideoContentDescription
video_desc
;
video_desc
.
set_codecs
(
{
vp8
}
)
;
RidDescription
rid_description
(
"
3
"
RidDirection
:
:
kSend
)
;
rid_description
.
codecs
=
{
}
;
TestDeserialization
(
video_desc
"
3
send
pt
=
97
"
rid_description
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_WithMultipleFormats
)
{
Codec
vp8
=
CreateVideoCodec
(
101
"
VP8
"
)
;
Codec
vp9
=
CreateVideoCodec
(
102
"
VP9
"
)
;
Codec
av1
=
CreateVideoCodec
(
103
"
AV1
"
)
;
Codec
h264
=
CreateVideoCodec
(
104
"
H264
"
)
;
VideoContentDescription
video_desc
;
video_desc
.
set_codecs
(
{
vp8
vp9
av1
h264
}
)
;
RidDescription
rid_description
(
"
4
"
RidDirection
:
:
kSend
)
;
rid_description
.
codecs
=
{
av1
h264
vp8
vp9
}
;
TestDeserialization
(
video_desc
"
4
send
pt
=
103
104
101
102
"
rid_description
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_WithRestriction
)
{
RidDescription
rid_description
(
"
5
"
RidDirection
:
:
kReceive
)
;
rid_description
.
restrictions
[
"
max
-
height
"
]
=
"
720
"
;
TestDeserialization
(
VideoContentDescription
(
)
"
5
recv
max
-
height
=
720
"
rid_description
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_WithMultipleRestrictions
)
{
RidDescription
rid_description
(
"
6
"
RidDirection
:
:
kReceive
)
;
rid_description
.
restrictions
[
"
max
-
height
"
]
=
"
720
"
;
rid_description
.
restrictions
[
"
max
-
width
"
]
=
"
1920
"
;
rid_description
.
restrictions
[
"
max
-
fr
"
]
=
"
60
"
;
rid_description
.
restrictions
[
"
max
-
bps
"
]
=
"
14000
"
;
TestDeserialization
(
VideoContentDescription
(
)
"
6
recv
max
-
height
=
720
;
max
-
width
=
1920
;
max
-
bps
=
14000
;
max
-
fr
=
60
"
rid_description
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_WithCustomRestrictions
)
{
RidDescription
rid_description
(
"
7
"
RidDirection
:
:
kSend
)
;
rid_description
.
restrictions
[
"
foo
"
]
=
"
bar
"
;
rid_description
.
restrictions
[
"
max
-
height
"
]
=
"
720
"
;
TestDeserialization
(
VideoContentDescription
(
)
"
7
send
max
-
height
=
720
;
foo
=
bar
"
rid_description
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_WithFormatAndRestrictions
)
{
Codec
av1
=
CreateVideoCodec
(
103
"
AV1
"
)
;
Codec
h264
=
CreateVideoCodec
(
104
"
H264
"
)
;
VideoContentDescription
video_desc
;
video_desc
.
set_codecs
(
{
av1
h264
}
)
;
RidDescription
rid_description
(
"
8
"
RidDirection
:
:
kSend
)
;
rid_description
.
codecs
=
{
h264
av1
}
;
rid_description
.
restrictions
[
"
max
-
height
"
]
=
"
720
"
;
rid_description
.
restrictions
[
"
max
-
width
"
]
=
"
1920
"
;
TestDeserialization
(
video_desc
"
8
send
pt
=
104
103
;
max
-
height
=
720
;
max
-
width
=
1920
"
rid_description
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_RestrictionHasNoValue
)
{
Codec
h264
=
CreateVideoCodec
(
104
"
H264
"
)
;
VideoContentDescription
video_desc
;
video_desc
.
set_codecs
(
{
h264
}
)
;
RidDescription
rid_description
(
"
9
"
RidDirection
:
:
kReceive
)
;
rid_description
.
codecs
=
{
h264
}
;
rid_description
.
restrictions
[
"
max
-
height
"
]
;
rid_description
.
restrictions
[
"
max
-
width
"
]
=
"
1920
"
;
TestDeserialization
(
video_desc
"
9
recv
pt
=
104
;
max
-
height
;
max
-
width
=
1920
"
rid_description
)
;
}
TEST_F
(
RidDescriptionSdpSerializerTest
Deserialize_AmbiguousCase
)
{
RidDescription
rid_description
(
"
1
"
RidDirection
:
:
kSend
)
;
rid_description
.
restrictions
[
"
recv
"
]
;
TestDeserialization
(
VideoContentDescription
(
)
"
1
send
recv
"
rid_description
)
;
}
TEST_P
(
RidDescriptionSdpSerializerTest
RidDescriptionDeserializationFailed
)
{
VideoContentDescription
video_desc
;
video_desc
.
set_codecs
(
{
CreateVideoCodec
(
101
"
VP8
"
)
CreateVideoCodec
(
102
"
VP9
"
)
}
)
;
SimulcastSdpSerializer
deserializer
;
auto
result
=
deserializer
.
DeserializeRidDescription
(
video_desc
GetParam
(
)
)
;
EXPECT_FALSE
(
result
.
ok
(
)
)
;
}
const
char
*
kRidDescriptionMalformedStrings
[
]
=
{
"
1
"
"
recv
"
"
send
"
"
recv
1
"
"
send
1
"
"
1
receive
"
"
one
direction
"
"
1
send
pt
=
1
max
-
width
=
720
"
"
1
recv
;
"
"
1
recv
=
"
"
1
recv
a
=
b
=
c
"
"
1
send
max
-
width
=
720
;
pt
=
101
"
"
1
send
pt
=
101
;
pt
=
102
"
"
1
send
pt
=
101
101
"
"
1
recv
max
-
width
=
720
;
max
-
width
=
720
"
"
1
send
pt
=
"
"
1
send
pt
=
abc
"
"
1
recv
;
;
"
"
~
1
recv
"
"
1
2
send
"
"
1
=
2
send
"
"
1
*
send
"
}
;
INSTANTIATE_TEST_SUITE_P
(
RidDescriptionDeserializationErrors
RidDescriptionSdpSerializerTest
ValuesIn
(
kRidDescriptionMalformedStrings
)
)
;
}
