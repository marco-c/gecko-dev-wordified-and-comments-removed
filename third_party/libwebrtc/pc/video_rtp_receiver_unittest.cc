#
include
"
pc
/
video_rtp_receiver
.
h
"
#
include
<
functional
>
#
include
<
memory
>
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
video
/
recordable_encoded_frame
.
h
"
#
include
"
api
/
video
/
test
/
mock_recordable_encoded_frame
.
h
"
#
include
"
media
/
base
/
fake_media_engine
.
h
"
#
include
"
rtc_base
/
location
.
h
"
#
include
"
rtc_base
/
ref_counted_object
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
using
:
:
testing
:
:
_
;
using
:
:
testing
:
:
AnyNumber
;
using
:
:
testing
:
:
InSequence
;
using
:
:
testing
:
:
Mock
;
using
:
:
testing
:
:
NiceMock
;
using
:
:
testing
:
:
SaveArg
;
using
:
:
testing
:
:
StrictMock
;
namespace
webrtc
{
namespace
{
class
VideoRtpReceiverTest
:
public
testing
:
:
Test
{
protected
:
class
MockVideoMediaChannel
:
public
cricket
:
:
FakeVideoMediaChannel
{
public
:
MockVideoMediaChannel
(
cricket
:
:
FakeVideoEngine
*
engine
const
cricket
:
:
VideoOptions
&
options
TaskQueueBase
*
network_thread
=
rtc
:
:
Thread
:
:
Current
(
)
)
:
FakeVideoMediaChannel
(
engine
options
network_thread
)
{
}
MOCK_METHOD
(
void
SetRecordableEncodedFrameCallback
(
uint32_t
std
:
:
function
<
void
(
const
RecordableEncodedFrame
&
)
>
)
(
override
)
)
;
MOCK_METHOD
(
void
ClearRecordableEncodedFrameCallback
(
uint32_t
)
(
override
)
)
;
MOCK_METHOD
(
void
GenerateKeyFrame
(
uint32_t
)
(
override
)
)
;
}
;
class
MockVideoSink
:
public
rtc
:
:
VideoSinkInterface
<
RecordableEncodedFrame
>
{
public
:
MOCK_METHOD
(
void
OnFrame
(
const
RecordableEncodedFrame
&
)
(
override
)
)
;
}
;
VideoRtpReceiverTest
(
)
:
worker_thread_
(
rtc
:
:
Thread
:
:
Create
(
)
)
channel_
(
nullptr
cricket
:
:
VideoOptions
(
)
)
receiver_
(
rtc
:
:
make_ref_counted
<
VideoRtpReceiver
>
(
worker_thread_
.
get
(
)
std
:
:
string
(
"
receiver
"
)
std
:
:
vector
<
std
:
:
string
>
(
{
"
stream
"
}
)
)
)
{
worker_thread_
-
>
Start
(
)
;
SetMediaChannel
(
&
channel_
)
;
}
~
VideoRtpReceiverTest
(
)
override
{
Mock
:
:
VerifyAndClearExpectations
(
&
channel_
)
;
receiver_
-
>
Stop
(
)
;
SetMediaChannel
(
nullptr
)
;
}
void
SetMediaChannel
(
cricket
:
:
MediaChannel
*
media_channel
)
{
worker_thread_
-
>
Invoke
<
void
>
(
RTC_FROM_HERE
[
&
]
(
)
{
receiver_
-
>
SetMediaChannel
(
media_channel
)
;
}
)
;
}
webrtc
:
:
VideoTrackSourceInterface
*
Source
(
)
{
return
receiver_
-
>
streams
(
)
[
0
]
-
>
FindVideoTrack
(
"
receiver
"
)
-
>
GetSource
(
)
;
}
rtc
:
:
AutoThread
main_thread_
;
std
:
:
unique_ptr
<
rtc
:
:
Thread
>
worker_thread_
;
NiceMock
<
MockVideoMediaChannel
>
channel_
;
rtc
:
:
scoped_refptr
<
VideoRtpReceiver
>
receiver_
;
}
;
TEST_F
(
VideoRtpReceiverTest
SupportsEncodedOutput
)
{
EXPECT_TRUE
(
Source
(
)
-
>
SupportsEncodedOutput
(
)
)
;
}
TEST_F
(
VideoRtpReceiverTest
GeneratesKeyFrame
)
{
EXPECT_CALL
(
channel_
GenerateKeyFrame
(
0
)
)
;
Source
(
)
-
>
GenerateKeyFrame
(
)
;
}
TEST_F
(
VideoRtpReceiverTest
GenerateKeyFrameOnChannelSwitchUnlessGenerateKeyframeCalled
)
{
MockVideoMediaChannel
channel2
(
nullptr
cricket
:
:
VideoOptions
(
)
)
;
EXPECT_CALL
(
channel_
GenerateKeyFrame
)
.
Times
(
0
)
;
EXPECT_CALL
(
channel2
GenerateKeyFrame
)
.
Times
(
0
)
;
SetMediaChannel
(
&
channel2
)
;
Mock
:
:
VerifyAndClearExpectations
(
&
channel2
)
;
EXPECT_CALL
(
channel2
GenerateKeyFrame
)
.
Times
(
1
)
;
Source
(
)
-
>
GenerateKeyFrame
(
)
;
MockVideoMediaChannel
channel3
(
nullptr
cricket
:
:
VideoOptions
(
)
)
;
EXPECT_CALL
(
channel3
GenerateKeyFrame
)
;
SetMediaChannel
(
&
channel3
)
;
StrictMock
<
MockVideoMediaChannel
>
channel4
(
nullptr
cricket
:
:
VideoOptions
(
)
)
;
SetMediaChannel
(
&
channel4
)
;
SetMediaChannel
(
nullptr
)
;
}
TEST_F
(
VideoRtpReceiverTest
EnablesEncodedOutput
)
{
EXPECT_CALL
(
channel_
SetRecordableEncodedFrameCallback
(
0
_
)
)
;
EXPECT_CALL
(
channel_
ClearRecordableEncodedFrameCallback
)
.
Times
(
0
)
;
MockVideoSink
sink
;
Source
(
)
-
>
AddEncodedSink
(
&
sink
)
;
}
TEST_F
(
VideoRtpReceiverTest
DisablesEncodedOutput
)
{
EXPECT_CALL
(
channel_
ClearRecordableEncodedFrameCallback
(
0
)
)
;
MockVideoSink
sink
;
Source
(
)
-
>
AddEncodedSink
(
&
sink
)
;
Source
(
)
-
>
RemoveEncodedSink
(
&
sink
)
;
}
TEST_F
(
VideoRtpReceiverTest
DisablesEnablesEncodedOutputOnChannelSwitch
)
{
InSequence
s
;
EXPECT_CALL
(
channel_
SetRecordableEncodedFrameCallback
)
;
EXPECT_CALL
(
channel_
ClearRecordableEncodedFrameCallback
)
;
MockVideoSink
sink
;
Source
(
)
-
>
AddEncodedSink
(
&
sink
)
;
MockVideoMediaChannel
channel2
(
nullptr
cricket
:
:
VideoOptions
(
)
)
;
EXPECT_CALL
(
channel2
SetRecordableEncodedFrameCallback
)
;
SetMediaChannel
(
&
channel2
)
;
Mock
:
:
VerifyAndClearExpectations
(
&
channel2
)
;
EXPECT_CALL
(
channel2
ClearRecordableEncodedFrameCallback
)
;
Source
(
)
-
>
RemoveEncodedSink
(
&
sink
)
;
StrictMock
<
MockVideoMediaChannel
>
channel3
(
nullptr
cricket
:
:
VideoOptions
(
)
)
;
SetMediaChannel
(
&
channel3
)
;
SetMediaChannel
(
nullptr
)
;
}
TEST_F
(
VideoRtpReceiverTest
BroadcastsEncodedFramesWhenEnabled
)
{
std
:
:
function
<
void
(
const
RecordableEncodedFrame
&
)
>
broadcast
;
EXPECT_CALL
(
channel_
SetRecordableEncodedFrameCallback
(
_
_
)
)
.
WillRepeatedly
(
SaveArg
<
1
>
(
&
broadcast
)
)
;
MockVideoSink
sink
;
Source
(
)
-
>
AddEncodedSink
(
&
sink
)
;
Mock
:
:
VerifyAndClearExpectations
(
&
channel_
)
;
EXPECT_CALL
(
sink
OnFrame
)
.
Times
(
2
)
;
MockRecordableEncodedFrame
frame
;
broadcast
(
frame
)
;
worker_thread_
-
>
Invoke
<
void
>
(
RTC_FROM_HERE
[
&
]
{
broadcast
(
frame
)
;
}
)
;
}
TEST_F
(
VideoRtpReceiverTest
EnablesEncodedOutputOnChannelRestart
)
{
InSequence
s
;
MockVideoSink
sink
;
Source
(
)
-
>
AddEncodedSink
(
&
sink
)
;
EXPECT_CALL
(
channel_
SetRecordableEncodedFrameCallback
(
4711
_
)
)
;
receiver_
-
>
SetupMediaChannel
(
4711
)
;
EXPECT_CALL
(
channel_
ClearRecordableEncodedFrameCallback
(
4711
)
)
;
EXPECT_CALL
(
channel_
SetRecordableEncodedFrameCallback
(
0
_
)
)
;
receiver_
-
>
SetupUnsignaledMediaChannel
(
)
;
}
}
}
