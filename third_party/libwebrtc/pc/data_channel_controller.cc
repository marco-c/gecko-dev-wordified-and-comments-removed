#
include
"
pc
/
data_channel_controller
.
h
"
#
include
<
utility
>
#
include
"
absl
/
algorithm
/
container
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
pc
/
peer_connection_internal
.
h
"
#
include
"
pc
/
sctp_utils
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
namespace
webrtc
{
DataChannelController
:
:
~
DataChannelController
(
)
{
}
bool
DataChannelController
:
:
HasDataChannels
(
)
const
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
return
!
sctp_data_channels_
.
empty
(
)
;
}
bool
DataChannelController
:
:
HasUsedDataChannels
(
)
const
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
return
has_used_data_channels_
;
}
bool
DataChannelController
:
:
SendData
(
int
sid
const
SendDataParams
&
params
const
rtc
:
:
CopyOnWriteBuffer
&
payload
cricket
:
:
SendDataResult
*
result
)
{
if
(
data_channel_transport
(
)
)
return
DataChannelSendData
(
sid
params
payload
result
)
;
RTC_LOG
(
LS_ERROR
)
<
<
"
SendData
called
before
transport
is
ready
"
;
return
false
;
}
bool
DataChannelController
:
:
ConnectDataChannel
(
SctpDataChannel
*
webrtc_data_channel
)
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
return
data_channel_transport
(
)
?
true
:
false
;
}
void
DataChannelController
:
:
AddSctpDataStream
(
int
sid
)
{
if
(
data_channel_transport
(
)
)
{
network_thread
(
)
-
>
BlockingCall
(
[
this
sid
]
{
if
(
data_channel_transport
(
)
)
{
data_channel_transport
(
)
-
>
OpenChannel
(
sid
)
;
}
}
)
;
}
}
void
DataChannelController
:
:
RemoveSctpDataStream
(
int
sid
)
{
if
(
data_channel_transport
(
)
)
{
network_thread
(
)
-
>
BlockingCall
(
[
this
sid
]
{
if
(
data_channel_transport
(
)
)
{
data_channel_transport
(
)
-
>
CloseChannel
(
sid
)
;
}
}
)
;
}
}
bool
DataChannelController
:
:
ReadyToSendData
(
)
const
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
return
(
data_channel_transport
(
)
&
&
data_channel_transport_ready_to_send_
)
;
}
void
DataChannelController
:
:
OnChannelStateChanged
(
SctpDataChannel
*
channel
DataChannelInterface
:
:
DataState
state
)
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
if
(
state
=
=
DataChannelInterface
:
:
DataState
:
:
kClosed
)
OnSctpDataChannelClosed
(
channel
)
;
pc_
-
>
OnSctpDataChannelStateChanged
(
channel
state
)
;
}
void
DataChannelController
:
:
OnDataReceived
(
int
channel_id
DataMessageType
type
const
rtc
:
:
CopyOnWriteBuffer
&
buffer
)
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
if
(
HandleOpenMessage_n
(
channel_id
type
buffer
)
)
return
;
signaling_thread
(
)
-
>
PostTask
(
SafeTask
(
signaling_safety_
.
flag
(
)
[
this
channel_id
type
buffer
]
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
for
(
const
auto
&
channel
:
sctp_data_channels_
)
{
if
(
channel
-
>
id
(
)
=
=
channel_id
)
channel
-
>
OnDataReceived
(
type
buffer
)
;
}
}
)
)
;
}
void
DataChannelController
:
:
OnChannelClosing
(
int
channel_id
)
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
signaling_thread
(
)
-
>
PostTask
(
SafeTask
(
signaling_safety_
.
flag
(
)
[
this
channel_id
]
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
for
(
const
auto
&
channel
:
sctp_data_channels_
)
{
if
(
channel
-
>
id
(
)
=
=
channel_id
)
channel
-
>
OnClosingProcedureStartedRemotely
(
)
;
}
}
)
)
;
}
void
DataChannelController
:
:
OnChannelClosed
(
int
channel_id
)
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
signaling_thread
(
)
-
>
PostTask
(
SafeTask
(
signaling_safety_
.
flag
(
)
[
this
channel_id
]
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
auto
it
=
absl
:
:
c_find_if
(
sctp_data_channels_
[
&
]
(
const
auto
&
c
)
{
return
c
-
>
id
(
)
=
=
channel_id
;
}
)
;
if
(
it
!
=
sctp_data_channels_
.
end
(
)
)
{
rtc
:
:
scoped_refptr
<
SctpDataChannel
>
channel
=
std
:
:
move
(
*
it
)
;
sctp_data_channels_
.
erase
(
it
)
;
sid_allocator_
.
ReleaseSid
(
channel
-
>
sid
(
)
)
;
channel
-
>
OnClosingProcedureComplete
(
)
;
}
}
)
)
;
}
void
DataChannelController
:
:
OnReadyToSend
(
)
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
signaling_thread
(
)
-
>
PostTask
(
SafeTask
(
signaling_safety_
.
flag
(
)
[
this
]
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
data_channel_transport_ready_to_send_
=
true
;
for
(
const
auto
&
channel
:
sctp_data_channels_
)
channel
-
>
OnTransportReady
(
true
)
;
}
)
)
;
}
void
DataChannelController
:
:
OnTransportClosed
(
RTCError
error
)
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
signaling_thread
(
)
-
>
PostTask
(
SafeTask
(
signaling_safety_
.
flag
(
)
[
this
error
]
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
OnTransportChannelClosed
(
error
)
;
}
)
)
;
}
void
DataChannelController
:
:
SetupDataChannelTransport_n
(
)
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
NotifyDataChannelsOfTransportCreated
(
)
;
}
void
DataChannelController
:
:
TeardownDataChannelTransport_n
(
)
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
if
(
data_channel_transport
(
)
)
{
data_channel_transport
(
)
-
>
SetDataSink
(
nullptr
)
;
}
set_data_channel_transport
(
nullptr
)
;
}
void
DataChannelController
:
:
OnTransportChanged
(
DataChannelTransportInterface
*
new_data_channel_transport
)
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
if
(
data_channel_transport
(
)
&
&
data_channel_transport
(
)
!
=
new_data_channel_transport
)
{
data_channel_transport
(
)
-
>
SetDataSink
(
nullptr
)
;
set_data_channel_transport
(
new_data_channel_transport
)
;
if
(
new_data_channel_transport
)
{
new_data_channel_transport
-
>
SetDataSink
(
this
)
;
NotifyDataChannelsOfTransportCreated
(
)
;
}
}
}
std
:
:
vector
<
DataChannelStats
>
DataChannelController
:
:
GetDataChannelStats
(
)
const
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
std
:
:
vector
<
DataChannelStats
>
stats
;
stats
.
reserve
(
sctp_data_channels_
.
size
(
)
)
;
for
(
const
auto
&
channel
:
sctp_data_channels_
)
stats
.
push_back
(
channel
-
>
GetStats
(
)
)
;
return
stats
;
}
bool
DataChannelController
:
:
HandleOpenMessage_n
(
int
channel_id
DataMessageType
type
const
rtc
:
:
CopyOnWriteBuffer
&
buffer
)
{
if
(
type
!
=
DataMessageType
:
:
kControl
|
|
!
IsOpenMessage
(
buffer
)
)
return
false
;
std
:
:
string
label
;
InternalDataChannelInit
config
;
config
.
id
=
channel_id
;
if
(
!
ParseDataChannelOpenMessage
(
buffer
&
label
&
config
)
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Failed
to
parse
the
OPEN
message
for
sid
"
<
<
channel_id
;
}
else
{
config
.
open_handshake_role
=
InternalDataChannelInit
:
:
kAcker
;
signaling_thread
(
)
-
>
PostTask
(
SafeTask
(
signaling_safety_
.
flag
(
)
[
this
label
=
std
:
:
move
(
label
)
config
=
std
:
:
move
(
config
)
]
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
OnDataChannelOpenMessage
(
label
config
)
;
}
)
)
;
}
return
true
;
}
void
DataChannelController
:
:
OnDataChannelOpenMessage
(
const
std
:
:
string
&
label
const
InternalDataChannelInit
&
config
)
{
rtc
:
:
scoped_refptr
<
DataChannelInterface
>
channel
(
InternalCreateDataChannelWithProxy
(
label
&
config
)
)
;
if
(
!
channel
.
get
(
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
create
DataChannel
from
the
OPEN
message
.
"
;
return
;
}
pc_
-
>
Observer
(
)
-
>
OnDataChannel
(
std
:
:
move
(
channel
)
)
;
pc_
-
>
NoteDataAddedEvent
(
)
;
}
rtc
:
:
scoped_refptr
<
DataChannelInterface
>
DataChannelController
:
:
InternalCreateDataChannelWithProxy
(
const
std
:
:
string
&
label
const
InternalDataChannelInit
*
config
)
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
if
(
pc_
-
>
IsClosed
(
)
)
{
return
nullptr
;
}
rtc
:
:
scoped_refptr
<
SctpDataChannel
>
channel
=
InternalCreateSctpDataChannel
(
label
config
)
;
if
(
channel
)
{
return
SctpDataChannel
:
:
CreateProxy
(
channel
)
;
}
return
nullptr
;
}
rtc
:
:
scoped_refptr
<
SctpDataChannel
>
DataChannelController
:
:
InternalCreateSctpDataChannel
(
const
std
:
:
string
&
label
const
InternalDataChannelInit
*
config
)
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
InternalDataChannelInit
new_config
=
config
?
(
*
config
)
:
InternalDataChannelInit
(
)
;
StreamId
sid
(
new_config
.
id
)
;
if
(
!
sid
.
HasValue
(
)
)
{
rtc
:
:
SSLRole
role
;
if
(
pc_
-
>
GetSctpSslRole
(
&
role
)
&
&
!
sid_allocator_
.
AllocateSid
(
role
&
sid
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
No
id
can
be
allocated
for
the
SCTP
data
channel
.
"
;
return
nullptr
;
}
}
else
if
(
!
sid_allocator_
.
ReserveSid
(
sid
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
create
a
SCTP
data
channel
"
"
because
the
id
is
already
in
use
or
out
of
range
.
"
;
return
nullptr
;
}
new_config
.
id
=
sid
.
stream_id_int
(
)
;
rtc
:
:
scoped_refptr
<
SctpDataChannel
>
channel
(
SctpDataChannel
:
:
Create
(
weak_factory_
.
GetWeakPtr
(
)
label
new_config
signaling_thread
(
)
network_thread
(
)
)
)
;
if
(
!
channel
)
{
sid_allocator_
.
ReleaseSid
(
sid
)
;
return
nullptr
;
}
sctp_data_channels_
.
push_back
(
channel
)
;
has_used_data_channels_
=
true
;
return
channel
;
}
void
DataChannelController
:
:
AllocateSctpSids
(
rtc
:
:
SSLRole
role
)
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
SctpDataChannel
>
>
channels_to_close
;
for
(
const
auto
&
channel
:
sctp_data_channels_
)
{
if
(
!
channel
-
>
sid
(
)
.
HasValue
(
)
)
{
StreamId
sid
;
if
(
!
sid_allocator_
.
AllocateSid
(
role
&
sid
)
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Failed
to
allocate
SCTP
sid
closing
channel
.
"
;
channels_to_close
.
push_back
(
channel
)
;
continue
;
}
channel
-
>
SetSctpSid
(
sid
)
;
}
}
for
(
const
auto
&
channel
:
channels_to_close
)
{
channel
-
>
CloseAbruptlyWithDataChannelFailure
(
"
Failed
to
allocate
SCTP
SID
"
)
;
}
}
void
DataChannelController
:
:
OnSctpDataChannelClosed
(
SctpDataChannel
*
channel
)
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
for
(
auto
it
=
sctp_data_channels_
.
begin
(
)
;
it
!
=
sctp_data_channels_
.
end
(
)
;
+
+
it
)
{
if
(
it
-
>
get
(
)
=
=
channel
)
{
if
(
channel
-
>
sid
(
)
.
HasValue
(
)
)
{
sid_allocator_
.
ReleaseSid
(
channel
-
>
sid
(
)
)
;
}
rtc
:
:
scoped_refptr
<
SctpDataChannel
>
release
=
std
:
:
move
(
*
it
)
;
sctp_data_channels_
.
erase
(
it
)
;
signaling_thread
(
)
-
>
PostTask
(
SafeTask
(
signaling_safety_
.
flag
(
)
[
release
=
std
:
:
move
(
release
)
]
{
}
)
)
;
return
;
}
}
}
void
DataChannelController
:
:
OnTransportChannelClosed
(
RTCError
error
)
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
SctpDataChannel
>
>
temp_sctp_dcs
;
temp_sctp_dcs
.
swap
(
sctp_data_channels_
)
;
for
(
const
auto
&
channel
:
temp_sctp_dcs
)
{
channel
-
>
OnTransportChannelClosed
(
error
)
;
}
}
DataChannelTransportInterface
*
DataChannelController
:
:
data_channel_transport
(
)
const
{
return
data_channel_transport_
;
}
void
DataChannelController
:
:
set_data_channel_transport
(
DataChannelTransportInterface
*
transport
)
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
data_channel_transport_
=
transport
;
}
bool
DataChannelController
:
:
DataChannelSendData
(
int
sid
const
SendDataParams
&
params
const
rtc
:
:
CopyOnWriteBuffer
&
payload
cricket
:
:
SendDataResult
*
result
)
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
RTC_DCHECK
(
data_channel_transport
(
)
)
;
RTCError
error
=
network_thread
(
)
-
>
BlockingCall
(
[
this
sid
params
payload
]
{
return
data_channel_transport
(
)
-
>
SendData
(
sid
params
payload
)
;
}
)
;
if
(
error
.
ok
(
)
)
{
*
result
=
cricket
:
:
SendDataResult
:
:
SDR_SUCCESS
;
return
true
;
}
else
if
(
error
.
type
(
)
=
=
RTCErrorType
:
:
RESOURCE_EXHAUSTED
)
{
*
result
=
cricket
:
:
SendDataResult
:
:
SDR_BLOCK
;
return
false
;
}
*
result
=
cricket
:
:
SendDataResult
:
:
SDR_ERROR
;
return
false
;
}
void
DataChannelController
:
:
NotifyDataChannelsOfTransportCreated
(
)
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
signaling_thread
(
)
-
>
PostTask
(
SafeTask
(
signaling_safety_
.
flag
(
)
[
this
]
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
for
(
const
auto
&
channel
:
sctp_data_channels_
)
{
channel
-
>
OnTransportChannelCreated
(
)
;
}
}
)
)
;
}
rtc
:
:
Thread
*
DataChannelController
:
:
network_thread
(
)
const
{
return
pc_
-
>
network_thread
(
)
;
}
rtc
:
:
Thread
*
DataChannelController
:
:
signaling_thread
(
)
const
{
return
pc_
-
>
signaling_thread
(
)
;
}
}
