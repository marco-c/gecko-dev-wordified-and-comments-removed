#
ifndef
PC_MEDIA_OPTIONS_H_
#
define
PC_MEDIA_OPTIONS_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
rtp_transceiver_direction
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
#
include
"
media
/
base
/
rid_description
.
h
"
#
include
"
p2p
/
base
/
transport_description
.
h
"
#
include
"
p2p
/
base
/
transport_description_factory
.
h
"
#
include
"
pc
/
simulcast_description
.
h
"
namespace
cricket
{
const
char
kDefaultRtcpCname
[
]
=
"
DefaultRtcpCname
"
;
struct
SenderOptions
{
std
:
:
string
track_id
;
std
:
:
vector
<
std
:
:
string
>
stream_ids
;
std
:
:
vector
<
RidDescription
>
rids
;
SimulcastLayerList
simulcast_layers
;
int
num_sim_layers
;
}
;
struct
MediaDescriptionOptions
{
MediaDescriptionOptions
(
MediaType
type
const
std
:
:
string
&
mid
webrtc
:
:
RtpTransceiverDirection
direction
bool
stopped
)
:
type
(
type
)
mid
(
mid
)
direction
(
direction
)
stopped
(
stopped
)
{
}
void
AddAudioSender
(
const
std
:
:
string
&
track_id
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
)
;
void
AddVideoSender
(
const
std
:
:
string
&
track_id
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
const
std
:
:
vector
<
RidDescription
>
&
rids
const
SimulcastLayerList
&
simulcast_layers
int
num_sim_layers
)
;
MediaType
type
;
std
:
:
string
mid
;
webrtc
:
:
RtpTransceiverDirection
direction
;
bool
stopped
;
TransportOptions
transport_options
;
std
:
:
vector
<
SenderOptions
>
sender_options
;
std
:
:
vector
<
webrtc
:
:
RtpCodecCapability
>
codec_preferences
;
std
:
:
vector
<
webrtc
:
:
RtpHeaderExtensionCapability
>
header_extensions
;
std
:
:
vector
<
Codec
>
codecs_to_include
;
private
:
void
AddSenderInternal
(
const
std
:
:
string
&
track_id
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
const
std
:
:
vector
<
RidDescription
>
&
rids
const
SimulcastLayerList
&
simulcast_layers
int
num_sim_layers
)
;
}
;
struct
MediaSessionOptions
{
MediaSessionOptions
(
)
{
}
bool
has_audio
(
)
const
{
return
HasMediaDescription
(
MEDIA_TYPE_AUDIO
)
;
}
bool
has_video
(
)
const
{
return
HasMediaDescription
(
MEDIA_TYPE_VIDEO
)
;
}
bool
has_data
(
)
const
{
return
HasMediaDescription
(
MEDIA_TYPE_DATA
)
;
}
bool
HasMediaDescription
(
MediaType
type
)
const
;
bool
vad_enabled
=
true
;
bool
rtcp_mux_enabled
=
true
;
bool
bundle_enabled
=
false
;
bool
offer_extmap_allow_mixed
=
false
;
bool
raw_packetization_for_video
=
false
;
std
:
:
string
rtcp_cname
=
kDefaultRtcpCname
;
webrtc
:
:
CryptoOptions
crypto_options
;
std
:
:
vector
<
MediaDescriptionOptions
>
media_description_options
;
std
:
:
vector
<
IceParameters
>
pooled_ice_credentials
;
bool
use_obsolete_sctp_sdp
=
true
;
}
;
}
#
endif
