#
ifndef
PC_RTP_TRANSCEIVER_H_
#
define
PC_RTP_TRANSCEIVER_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
rtp_transceiver_interface
.
h
"
#
include
"
pc
/
channel_interface
.
h
"
#
include
"
pc
/
channel_manager
.
h
"
#
include
"
pc
/
rtp_receiver
.
h
"
#
include
"
pc
/
rtp_sender
.
h
"
namespace
webrtc
{
class
RtpTransceiver
final
:
public
rtc
:
:
RefCountedObject
<
RtpTransceiverInterface
>
public
sigslot
:
:
has_slots
<
>
{
public
:
explicit
RtpTransceiver
(
cricket
:
:
MediaType
media_type
)
;
RtpTransceiver
(
rtc
:
:
scoped_refptr
<
RtpSenderProxyWithInternal
<
RtpSenderInternal
>
>
sender
rtc
:
:
scoped_refptr
<
RtpReceiverProxyWithInternal
<
RtpReceiverInternal
>
>
receiver
cricket
:
:
ChannelManager
*
channel_manager
std
:
:
vector
<
RtpHeaderExtensionCapability
>
HeaderExtensionsToOffer
std
:
:
function
<
void
(
)
>
on_negotiation_needed
)
;
~
RtpTransceiver
(
)
override
;
cricket
:
:
ChannelInterface
*
channel
(
)
const
{
return
channel_
;
}
void
SetChannel
(
cricket
:
:
ChannelInterface
*
channel
)
;
void
AddSender
(
rtc
:
:
scoped_refptr
<
RtpSenderProxyWithInternal
<
RtpSenderInternal
>
>
sender
)
;
bool
RemoveSender
(
RtpSenderInterface
*
sender
)
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpSenderProxyWithInternal
<
RtpSenderInternal
>
>
>
senders
(
)
const
{
return
senders_
;
}
void
AddReceiver
(
rtc
:
:
scoped_refptr
<
RtpReceiverProxyWithInternal
<
RtpReceiverInternal
>
>
receiver
)
;
bool
RemoveReceiver
(
RtpReceiverInterface
*
receiver
)
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpReceiverProxyWithInternal
<
RtpReceiverInternal
>
>
>
receivers
(
)
const
{
return
receivers_
;
}
rtc
:
:
scoped_refptr
<
RtpSenderInternal
>
sender_internal
(
)
const
;
rtc
:
:
scoped_refptr
<
RtpReceiverInternal
>
receiver_internal
(
)
const
;
absl
:
:
optional
<
size_t
>
mline_index
(
)
const
{
return
mline_index_
;
}
void
set_mline_index
(
absl
:
:
optional
<
size_t
>
mline_index
)
{
mline_index_
=
mline_index
;
}
void
set_mid
(
const
absl
:
:
optional
<
std
:
:
string
>
&
mid
)
{
mid_
=
mid
;
}
void
set_direction
(
RtpTransceiverDirection
direction
)
{
direction_
=
direction
;
}
void
set_current_direction
(
RtpTransceiverDirection
direction
)
;
void
set_fired_direction
(
RtpTransceiverDirection
direction
)
;
void
set_created_by_addtrack
(
bool
created_by_addtrack
)
{
created_by_addtrack_
=
created_by_addtrack
;
}
void
set_reused_for_addtrack
(
bool
reused_for_addtrack
)
{
reused_for_addtrack_
=
reused_for_addtrack
;
}
bool
created_by_addtrack
(
)
const
{
return
created_by_addtrack_
;
}
bool
reused_for_addtrack
(
)
const
{
return
reused_for_addtrack_
;
}
bool
has_ever_been_used_to_send
(
)
const
{
return
has_ever_been_used_to_send_
;
}
void
SetPeerConnectionClosed
(
)
;
void
StopTransceiverProcedure
(
)
;
cricket
:
:
MediaType
media_type
(
)
const
override
;
absl
:
:
optional
<
std
:
:
string
>
mid
(
)
const
override
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
(
)
const
override
;
rtc
:
:
scoped_refptr
<
RtpReceiverInterface
>
receiver
(
)
const
override
;
bool
stopped
(
)
const
override
;
bool
stopping
(
)
const
override
;
RtpTransceiverDirection
direction
(
)
const
override
;
RTCError
SetDirectionWithError
(
RtpTransceiverDirection
new_direction
)
override
;
absl
:
:
optional
<
RtpTransceiverDirection
>
current_direction
(
)
const
override
;
absl
:
:
optional
<
RtpTransceiverDirection
>
fired_direction
(
)
const
override
;
RTCError
StopStandard
(
)
override
;
void
StopInternal
(
)
override
;
RTCError
SetCodecPreferences
(
rtc
:
:
ArrayView
<
RtpCodecCapability
>
codecs
)
override
;
std
:
:
vector
<
RtpCodecCapability
>
codec_preferences
(
)
const
override
{
return
codec_preferences_
;
}
std
:
:
vector
<
RtpHeaderExtensionCapability
>
HeaderExtensionsToOffer
(
)
const
override
;
RTCError
SetOfferedRtpHeaderExtensions
(
rtc
:
:
ArrayView
<
const
RtpHeaderExtensionCapability
>
header_extensions_to_offer
)
override
;
private
:
void
OnFirstPacketReceived
(
cricket
:
:
ChannelInterface
*
channel
)
;
void
StopSendingAndReceiving
(
)
;
const
TaskQueueBase
*
thread_
;
const
bool
unified_plan_
;
const
cricket
:
:
MediaType
media_type_
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpSenderProxyWithInternal
<
RtpSenderInternal
>
>
>
senders_
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpReceiverProxyWithInternal
<
RtpReceiverInternal
>
>
>
receivers_
;
bool
stopped_
=
false
;
bool
stopping_
RTC_GUARDED_BY
(
thread_
)
=
false
;
bool
is_pc_closed_
=
false
;
RtpTransceiverDirection
direction_
=
RtpTransceiverDirection
:
:
kInactive
;
absl
:
:
optional
<
RtpTransceiverDirection
>
current_direction_
;
absl
:
:
optional
<
RtpTransceiverDirection
>
fired_direction_
;
absl
:
:
optional
<
std
:
:
string
>
mid_
;
absl
:
:
optional
<
size_t
>
mline_index_
;
bool
created_by_addtrack_
=
false
;
bool
reused_for_addtrack_
=
false
;
bool
has_ever_been_used_to_send_
=
false
;
cricket
:
:
ChannelInterface
*
channel_
=
nullptr
;
cricket
:
:
ChannelManager
*
channel_manager_
=
nullptr
;
std
:
:
vector
<
RtpCodecCapability
>
codec_preferences_
;
std
:
:
vector
<
RtpHeaderExtensionCapability
>
header_extensions_to_offer_
;
const
std
:
:
function
<
void
(
)
>
on_negotiation_needed_
;
}
;
BEGIN_SIGNALING_PROXY_MAP
(
RtpTransceiver
)
PROXY_SIGNALING_THREAD_DESTRUCTOR
(
)
BYPASS_PROXY_CONSTMETHOD0
(
cricket
:
:
MediaType
media_type
)
PROXY_CONSTMETHOD0
(
absl
:
:
optional
<
std
:
:
string
>
mid
)
PROXY_CONSTMETHOD0
(
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
)
PROXY_CONSTMETHOD0
(
rtc
:
:
scoped_refptr
<
RtpReceiverInterface
>
receiver
)
PROXY_CONSTMETHOD0
(
bool
stopped
)
PROXY_CONSTMETHOD0
(
bool
stopping
)
PROXY_CONSTMETHOD0
(
RtpTransceiverDirection
direction
)
PROXY_METHOD1
(
webrtc
:
:
RTCError
SetDirectionWithError
RtpTransceiverDirection
)
PROXY_CONSTMETHOD0
(
absl
:
:
optional
<
RtpTransceiverDirection
>
current_direction
)
PROXY_CONSTMETHOD0
(
absl
:
:
optional
<
RtpTransceiverDirection
>
fired_direction
)
PROXY_METHOD0
(
webrtc
:
:
RTCError
StopStandard
)
PROXY_METHOD0
(
void
StopInternal
)
PROXY_METHOD1
(
webrtc
:
:
RTCError
SetCodecPreferences
rtc
:
:
ArrayView
<
RtpCodecCapability
>
)
PROXY_CONSTMETHOD0
(
std
:
:
vector
<
RtpCodecCapability
>
codec_preferences
)
PROXY_CONSTMETHOD0
(
std
:
:
vector
<
RtpHeaderExtensionCapability
>
HeaderExtensionsToOffer
)
PROXY_METHOD1
(
webrtc
:
:
RTCError
SetOfferedRtpHeaderExtensions
rtc
:
:
ArrayView
<
const
RtpHeaderExtensionCapability
>
)
END_PROXY_MAP
(
)
}
#
endif
