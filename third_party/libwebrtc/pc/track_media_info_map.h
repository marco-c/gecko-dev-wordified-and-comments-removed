#
ifndef
PC_TRACK_MEDIA_INFO_MAP_H_
#
define
PC_TRACK_MEDIA_INFO_MAP_H_
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
pc
/
rtp_receiver
.
h
"
#
include
"
pc
/
rtp_sender
.
h
"
#
include
"
rtc_base
/
ref_count
.
h
"
namespace
webrtc
{
class
TrackMediaInfoMap
{
public
:
TrackMediaInfoMap
(
)
;
void
Initialize
(
std
:
:
optional
<
VoiceMediaInfo
>
voice_media_info
std
:
:
optional
<
VideoMediaInfo
>
video_media_info
rtc
:
:
ArrayView
<
rtc
:
:
scoped_refptr
<
RtpSenderInternal
>
>
rtp_senders
rtc
:
:
ArrayView
<
rtc
:
:
scoped_refptr
<
RtpReceiverInternal
>
>
rtp_receivers
)
;
const
std
:
:
optional
<
VoiceMediaInfo
>
&
voice_media_info
(
)
const
{
RTC_DCHECK
(
is_initialized_
)
;
return
voice_media_info_
;
}
const
std
:
:
optional
<
VideoMediaInfo
>
&
video_media_info
(
)
const
{
RTC_DCHECK
(
is_initialized_
)
;
return
video_media_info_
;
}
const
VoiceSenderInfo
*
GetVoiceSenderInfoBySsrc
(
uint32_t
ssrc
)
const
;
const
VoiceReceiverInfo
*
GetVoiceReceiverInfoBySsrc
(
uint32_t
ssrc
)
const
;
const
VideoSenderInfo
*
GetVideoSenderInfoBySsrc
(
uint32_t
ssrc
)
const
;
const
VideoReceiverInfo
*
GetVideoReceiverInfoBySsrc
(
uint32_t
ssrc
)
const
;
rtc
:
:
scoped_refptr
<
AudioTrackInterface
>
GetAudioTrack
(
const
VoiceSenderInfo
&
voice_sender_info
)
const
;
rtc
:
:
scoped_refptr
<
AudioTrackInterface
>
GetAudioTrack
(
const
VoiceReceiverInfo
&
voice_receiver_info
)
const
;
rtc
:
:
scoped_refptr
<
VideoTrackInterface
>
GetVideoTrack
(
const
VideoSenderInfo
&
video_sender_info
)
const
;
rtc
:
:
scoped_refptr
<
VideoTrackInterface
>
GetVideoTrack
(
const
VideoReceiverInfo
&
video_receiver_info
)
const
;
std
:
:
optional
<
int
>
GetAttachmentIdByTrack
(
const
MediaStreamTrackInterface
*
track
)
const
;
private
:
bool
is_initialized_
=
false
;
std
:
:
optional
<
VoiceMediaInfo
>
voice_media_info_
;
std
:
:
optional
<
VideoMediaInfo
>
video_media_info_
;
std
:
:
map
<
const
VoiceSenderInfo
*
rtc
:
:
scoped_refptr
<
AudioTrackInterface
>
>
audio_track_by_sender_info_
;
std
:
:
map
<
const
VoiceReceiverInfo
*
rtc
:
:
scoped_refptr
<
AudioTrackInterface
>
>
audio_track_by_receiver_info_
;
std
:
:
map
<
const
VideoSenderInfo
*
rtc
:
:
scoped_refptr
<
VideoTrackInterface
>
>
video_track_by_sender_info_
;
std
:
:
map
<
const
VideoReceiverInfo
*
rtc
:
:
scoped_refptr
<
VideoTrackInterface
>
>
video_track_by_receiver_info_
;
std
:
:
map
<
const
MediaStreamTrackInterface
*
int
>
attachment_id_by_track_
;
std
:
:
map
<
uint32_t
VoiceSenderInfo
*
>
voice_info_by_sender_ssrc_
;
std
:
:
map
<
uint32_t
VoiceReceiverInfo
*
>
voice_info_by_receiver_ssrc_
;
std
:
:
map
<
uint32_t
VideoSenderInfo
*
>
video_info_by_sender_ssrc_
;
std
:
:
map
<
uint32_t
VideoReceiverInfo
*
>
video_info_by_receiver_ssrc_
;
}
;
}
#
endif
