#
ifndef
PC_CHANNEL_H_
#
define
PC_CHANNEL_H_
#
include
<
stdint
.
h
>
#
include
<
functional
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
jsep
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
api
/
rtp_transceiver_direction
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
call
/
rtp_demuxer
.
h
"
#
include
"
call
/
rtp_packet_sink_interface
.
h
"
#
include
"
media
/
base
/
media_channel
.
h
"
#
include
"
media
/
base
/
stream_params
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
pc
/
channel_interface
.
h
"
#
include
"
pc
/
rtp_transport_internal
.
h
"
#
include
"
pc
/
session_description
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
containers
/
flat_set
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
rtc_base
/
network
/
sent_packet
.
h
"
#
include
"
rtc_base
/
network_route
.
h
"
#
include
"
rtc_base
/
socket
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
rtc_base
/
unique_id_generator
.
h
"
namespace
webrtc
{
class
VideoChannel
;
class
VoiceChannel
;
class
BaseChannel
:
public
ChannelInterface
public
cricket
:
:
MediaChannelNetworkInterface
public
RtpPacketSinkInterface
{
public
:
BaseChannel
(
TaskQueueBase
*
worker_thread
Thread
*
network_thread
TaskQueueBase
*
signaling_thread
std
:
:
unique_ptr
<
cricket
:
:
MediaSendChannelInterface
>
media_send_channel
std
:
:
unique_ptr
<
cricket
:
:
MediaReceiveChannelInterface
>
media_receive_channel
absl
:
:
string_view
mid
bool
srtp_required
CryptoOptions
crypto_options
UniqueRandomIdGenerator
*
ssrc_generator
)
;
virtual
~
BaseChannel
(
)
;
TaskQueueBase
*
worker_thread
(
)
const
{
return
worker_thread_
;
}
Thread
*
network_thread
(
)
const
{
return
network_thread_
;
}
const
std
:
:
string
&
mid
(
)
const
override
{
return
demuxer_criteria_
.
mid
(
)
;
}
absl
:
:
string_view
transport_name
(
)
const
override
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
if
(
rtp_transport_
)
return
rtp_transport_
-
>
transport_name
(
)
;
return
"
"
;
}
bool
srtp_active
(
)
const
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
return
rtp_transport_
&
&
rtp_transport_
-
>
IsSrtpActive
(
)
;
}
bool
SetRtpTransport
(
RtpTransportInternal
*
rtp_transport
)
override
;
RtpTransportInternal
*
rtp_transport
(
)
const
{
RTC_DCHECK_RUN_ON
(
network_thread
(
)
)
;
return
rtp_transport_
;
}
bool
SetLocalContent
(
const
MediaContentDescription
*
content
SdpType
type
std
:
:
string
&
error_desc
)
override
;
bool
SetRemoteContent
(
const
MediaContentDescription
*
content
SdpType
type
std
:
:
string
&
error_desc
)
override
;
bool
SetPayloadTypeDemuxingEnabled
(
bool
enabled
)
override
;
void
Enable
(
bool
enable
)
override
;
const
std
:
:
vector
<
cricket
:
:
StreamParams
>
&
local_streams
(
)
const
override
{
return
local_streams_
;
}
const
std
:
:
vector
<
cricket
:
:
StreamParams
>
&
remote_streams
(
)
const
override
{
return
remote_streams_
;
}
void
SetFirstPacketReceivedCallback
(
std
:
:
function
<
void
(
)
>
callback
)
override
;
void
SetFirstPacketSentCallback
(
std
:
:
function
<
void
(
)
>
callback
)
override
;
void
OnTransportReadyToSend
(
bool
ready
)
;
int
SetOption
(
SocketType
type
Socket
:
:
Option
o
int
val
)
override
;
void
OnRtpPacket
(
const
RtpPacketReceived
&
packet
)
override
;
cricket
:
:
VideoMediaSendChannelInterface
*
video_media_send_channel
(
)
override
{
RTC_CHECK
(
false
)
<
<
"
Attempt
to
fetch
video
channel
from
non
-
video
"
;
return
nullptr
;
}
cricket
:
:
VoiceMediaSendChannelInterface
*
voice_media_send_channel
(
)
override
{
RTC_CHECK
(
false
)
<
<
"
Attempt
to
fetch
voice
channel
from
non
-
voice
"
;
return
nullptr
;
}
cricket
:
:
VideoMediaReceiveChannelInterface
*
video_media_receive_channel
(
)
override
{
RTC_CHECK
(
false
)
<
<
"
Attempt
to
fetch
video
channel
from
non
-
video
"
;
return
nullptr
;
}
cricket
:
:
VoiceMediaReceiveChannelInterface
*
voice_media_receive_channel
(
)
override
{
RTC_CHECK
(
false
)
<
<
"
Attempt
to
fetch
voice
channel
from
non
-
voice
"
;
return
nullptr
;
}
protected
:
void
set_local_content_direction
(
RtpTransceiverDirection
direction
)
RTC_RUN_ON
(
worker_thread
(
)
)
{
local_content_direction_
=
direction
;
}
RtpTransceiverDirection
local_content_direction
(
)
const
RTC_RUN_ON
(
worker_thread
(
)
)
{
return
local_content_direction_
;
}
void
set_remote_content_direction
(
RtpTransceiverDirection
direction
)
RTC_RUN_ON
(
worker_thread
(
)
)
{
remote_content_direction_
=
direction
;
}
RtpTransceiverDirection
remote_content_direction
(
)
const
RTC_RUN_ON
(
worker_thread
(
)
)
{
return
remote_content_direction_
;
}
RtpExtension
:
:
Filter
extensions_filter
(
)
const
{
return
extensions_filter_
;
}
bool
network_initialized
(
)
RTC_RUN_ON
(
network_thread
(
)
)
{
return
media_send_channel
(
)
-
>
HasNetworkInterface
(
)
;
}
bool
enabled
(
)
const
RTC_RUN_ON
(
worker_thread
(
)
)
{
return
enabled_
;
}
TaskQueueBase
*
signaling_thread
(
)
const
{
return
signaling_thread_
;
}
bool
IsReadyToSendMedia_w
(
)
const
RTC_RUN_ON
(
worker_thread
(
)
)
;
bool
SendPacket
(
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketOptions
&
options
)
override
;
bool
SendRtcp
(
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketOptions
&
options
)
override
;
void
OnWritableState
(
bool
writable
)
;
void
OnNetworkRouteChanged
(
std
:
:
optional
<
NetworkRoute
>
network_route
)
;
bool
SendPacket
(
bool
rtcp
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketOptions
&
options
)
;
void
EnableMedia_w
(
)
RTC_RUN_ON
(
worker_thread
(
)
)
;
void
DisableMedia_w
(
)
RTC_RUN_ON
(
worker_thread
(
)
)
;
void
UpdateWritableState_n
(
)
RTC_RUN_ON
(
network_thread
(
)
)
;
void
ChannelWritable_n
(
)
RTC_RUN_ON
(
network_thread
(
)
)
;
void
ChannelNotWritable_n
(
)
RTC_RUN_ON
(
network_thread
(
)
)
;
bool
SetPayloadTypeDemuxingEnabled_w
(
bool
enabled
)
RTC_RUN_ON
(
worker_thread
(
)
)
;
virtual
void
UpdateMediaSendRecvState_w
(
)
RTC_RUN_ON
(
worker_thread
(
)
)
=
0
;
bool
UpdateLocalStreams_w
(
const
std
:
:
vector
<
cricket
:
:
StreamParams
>
&
streams
SdpType
type
std
:
:
string
&
error_desc
)
RTC_RUN_ON
(
worker_thread
(
)
)
;
bool
UpdateRemoteStreams_w
(
const
MediaContentDescription
*
content
SdpType
type
std
:
:
string
&
error_desc
)
RTC_RUN_ON
(
worker_thread
(
)
)
;
virtual
bool
SetLocalContent_w
(
const
MediaContentDescription
*
content
SdpType
type
std
:
:
string
&
error_desc
)
RTC_RUN_ON
(
worker_thread
(
)
)
=
0
;
virtual
bool
SetRemoteContent_w
(
const
MediaContentDescription
*
content
SdpType
type
std
:
:
string
&
error_desc
)
RTC_RUN_ON
(
worker_thread
(
)
)
=
0
;
RtpHeaderExtensions
GetDeduplicatedRtpHeaderExtensions
(
const
RtpHeaderExtensions
&
extensions
)
;
bool
MaybeAddHandledPayloadType
(
int
payload_type
)
RTC_RUN_ON
(
worker_thread
(
)
)
;
bool
ClearHandledPayloadTypes
(
)
RTC_RUN_ON
(
worker_thread
(
)
)
;
bool
MaybeUpdateDemuxerAndRtpExtensions_w
(
bool
update_demuxer
std
:
:
optional
<
RtpHeaderExtensions
>
extensions
std
:
:
string
&
error_desc
)
RTC_RUN_ON
(
worker_thread
(
)
)
;
bool
RegisterRtpDemuxerSink_w
(
)
RTC_RUN_ON
(
worker_thread
(
)
)
;
std
:
:
string
ToString
(
)
const
;
const
std
:
:
unique_ptr
<
cricket
:
:
MediaSendChannelInterface
>
media_send_channel_
;
const
std
:
:
unique_ptr
<
cricket
:
:
MediaReceiveChannelInterface
>
media_receive_channel_
;
private
:
bool
ConnectToRtpTransport_n
(
)
RTC_RUN_ON
(
network_thread
(
)
)
;
void
DisconnectFromRtpTransport_n
(
)
RTC_RUN_ON
(
network_thread
(
)
)
;
void
SignalSentPacket_n
(
const
rtc
:
:
SentPacket
&
sent_packet
)
;
TaskQueueBase
*
const
worker_thread_
;
Thread
*
const
network_thread_
;
TaskQueueBase
*
const
signaling_thread_
;
scoped_refptr
<
PendingTaskSafetyFlag
>
alive_
;
std
:
:
function
<
void
(
)
>
on_first_packet_received_
RTC_GUARDED_BY
(
network_thread
(
)
)
;
std
:
:
function
<
void
(
)
>
on_first_packet_sent_
RTC_GUARDED_BY
(
network_thread
(
)
)
;
RtpTransportInternal
*
rtp_transport_
RTC_GUARDED_BY
(
network_thread
(
)
)
=
nullptr
;
std
:
:
vector
<
std
:
:
pair
<
Socket
:
:
Option
int
>
>
socket_options_
RTC_GUARDED_BY
(
network_thread
(
)
)
;
std
:
:
vector
<
std
:
:
pair
<
Socket
:
:
Option
int
>
>
rtcp_socket_options_
RTC_GUARDED_BY
(
network_thread
(
)
)
;
bool
writable_
RTC_GUARDED_BY
(
network_thread
(
)
)
=
false
;
bool
was_ever_writable_n_
RTC_GUARDED_BY
(
network_thread
(
)
)
=
false
;
bool
was_ever_writable_
RTC_GUARDED_BY
(
worker_thread
(
)
)
=
false
;
const
bool
srtp_required_
=
true
;
const
RtpExtension
:
:
Filter
extensions_filter_
;
bool
enabled_
RTC_GUARDED_BY
(
worker_thread
(
)
)
=
false
;
bool
enabled_s_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
false
;
bool
payload_type_demuxing_enabled_
RTC_GUARDED_BY
(
worker_thread
(
)
)
=
true
;
std
:
:
vector
<
cricket
:
:
StreamParams
>
local_streams_
RTC_GUARDED_BY
(
worker_thread
(
)
)
;
std
:
:
vector
<
cricket
:
:
StreamParams
>
remote_streams_
RTC_GUARDED_BY
(
worker_thread
(
)
)
;
RtpTransceiverDirection
local_content_direction_
RTC_GUARDED_BY
(
worker_thread
(
)
)
=
RtpTransceiverDirection
:
:
kInactive
;
RtpTransceiverDirection
remote_content_direction_
RTC_GUARDED_BY
(
worker_thread
(
)
)
=
RtpTransceiverDirection
:
:
kInactive
;
flat_set
<
uint8_t
>
payload_types_
RTC_GUARDED_BY
(
worker_thread
(
)
)
;
RtpHeaderExtensions
rtp_header_extensions_
RTC_GUARDED_BY
(
worker_thread
(
)
)
;
RtpDemuxerCriteria
demuxer_criteria_
;
UniqueRandomIdGenerator
*
const
ssrc_generator_
;
}
;
class
VoiceChannel
:
public
BaseChannel
{
public
:
VoiceChannel
(
TaskQueueBase
*
worker_thread
Thread
*
network_thread
TaskQueueBase
*
signaling_thread
std
:
:
unique_ptr
<
cricket
:
:
VoiceMediaSendChannelInterface
>
send_channel_impl
std
:
:
unique_ptr
<
cricket
:
:
VoiceMediaReceiveChannelInterface
>
receive_channel_impl
absl
:
:
string_view
mid
bool
srtp_required
CryptoOptions
crypto_options
UniqueRandomIdGenerator
*
ssrc_generator
)
;
~
VoiceChannel
(
)
;
VideoChannel
*
AsVideoChannel
(
)
override
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
VoiceChannel
*
AsVoiceChannel
(
)
override
{
return
this
;
}
cricket
:
:
VoiceMediaSendChannelInterface
*
send_channel
(
)
{
return
media_send_channel_
-
>
AsVoiceSendChannel
(
)
;
}
cricket
:
:
VoiceMediaReceiveChannelInterface
*
receive_channel
(
)
{
return
media_receive_channel_
-
>
AsVoiceReceiveChannel
(
)
;
}
cricket
:
:
VoiceMediaSendChannelInterface
*
media_send_channel
(
)
override
{
return
send_channel
(
)
;
}
cricket
:
:
VoiceMediaSendChannelInterface
*
voice_media_send_channel
(
)
override
{
return
send_channel
(
)
;
}
cricket
:
:
VoiceMediaReceiveChannelInterface
*
media_receive_channel
(
)
override
{
return
receive_channel
(
)
;
}
cricket
:
:
VoiceMediaReceiveChannelInterface
*
voice_media_receive_channel
(
)
override
{
return
receive_channel
(
)
;
}
MediaType
media_type
(
)
const
override
{
return
MediaType
:
:
AUDIO
;
}
private
:
void
UpdateMediaSendRecvState_w
(
)
RTC_RUN_ON
(
worker_thread
(
)
)
override
;
bool
SetLocalContent_w
(
const
MediaContentDescription
*
content
SdpType
type
std
:
:
string
&
error_desc
)
RTC_RUN_ON
(
worker_thread
(
)
)
override
;
bool
SetRemoteContent_w
(
const
MediaContentDescription
*
content
SdpType
type
std
:
:
string
&
error_desc
)
RTC_RUN_ON
(
worker_thread
(
)
)
override
;
cricket
:
:
AudioSenderParameter
last_send_params_
RTC_GUARDED_BY
(
worker_thread
(
)
)
;
cricket
:
:
AudioReceiverParameters
last_recv_params_
RTC_GUARDED_BY
(
worker_thread
(
)
)
;
}
;
class
VideoChannel
:
public
BaseChannel
{
public
:
VideoChannel
(
TaskQueueBase
*
worker_thread
Thread
*
network_thread
TaskQueueBase
*
signaling_thread
std
:
:
unique_ptr
<
cricket
:
:
VideoMediaSendChannelInterface
>
media_send_channel
std
:
:
unique_ptr
<
cricket
:
:
VideoMediaReceiveChannelInterface
>
media_receive_channel
absl
:
:
string_view
mid
bool
srtp_required
CryptoOptions
crypto_options
UniqueRandomIdGenerator
*
ssrc_generator
)
;
~
VideoChannel
(
)
;
VideoChannel
*
AsVideoChannel
(
)
override
{
return
this
;
}
VoiceChannel
*
AsVoiceChannel
(
)
override
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
cricket
:
:
VideoMediaSendChannelInterface
*
send_channel
(
)
{
return
media_send_channel_
-
>
AsVideoSendChannel
(
)
;
}
cricket
:
:
VideoMediaReceiveChannelInterface
*
receive_channel
(
)
{
return
media_receive_channel_
-
>
AsVideoReceiveChannel
(
)
;
}
cricket
:
:
VideoMediaSendChannelInterface
*
media_send_channel
(
)
override
{
return
send_channel
(
)
;
}
cricket
:
:
VideoMediaSendChannelInterface
*
video_media_send_channel
(
)
override
{
return
send_channel
(
)
;
}
cricket
:
:
VideoMediaReceiveChannelInterface
*
media_receive_channel
(
)
override
{
return
receive_channel
(
)
;
}
cricket
:
:
VideoMediaReceiveChannelInterface
*
video_media_receive_channel
(
)
override
{
return
receive_channel
(
)
;
}
MediaType
media_type
(
)
const
override
{
return
MediaType
:
:
VIDEO
;
}
private
:
void
UpdateMediaSendRecvState_w
(
)
RTC_RUN_ON
(
worker_thread
(
)
)
override
;
bool
SetLocalContent_w
(
const
MediaContentDescription
*
content
SdpType
type
std
:
:
string
&
error_desc
)
RTC_RUN_ON
(
worker_thread
(
)
)
override
;
bool
SetRemoteContent_w
(
const
MediaContentDescription
*
content
SdpType
type
std
:
:
string
&
error_desc
)
RTC_RUN_ON
(
worker_thread
(
)
)
override
;
cricket
:
:
VideoSenderParameters
last_send_params_
RTC_GUARDED_BY
(
worker_thread
(
)
)
;
cricket
:
:
VideoReceiverParameters
last_recv_params_
RTC_GUARDED_BY
(
worker_thread
(
)
)
;
}
;
}
namespace
cricket
{
using
:
:
webrtc
:
:
BaseChannel
;
using
:
:
webrtc
:
:
VideoChannel
;
using
:
:
webrtc
:
:
VoiceChannel
;
}
#
endif
