#
ifndef
PC_PEER_CONNECTION_INTERNAL_H_
#
define
PC_PEER_CONNECTION_INTERNAL_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
call
/
call
.
h
"
#
include
"
pc
/
rtp_transceiver
.
h
"
#
include
"
pc
/
sctp_data_channel
.
h
"
namespace
webrtc
{
class
PeerConnectionInternal
:
public
PeerConnectionInterface
{
public
:
virtual
rtc
:
:
Thread
*
network_thread
(
)
const
=
0
;
virtual
rtc
:
:
Thread
*
worker_thread
(
)
const
=
0
;
virtual
std
:
:
string
session_id
(
)
const
=
0
;
virtual
bool
initial_offerer
(
)
const
=
0
;
virtual
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
>
GetTransceiversInternal
(
)
const
=
0
;
virtual
sigslot
:
:
signal1
<
SctpDataChannel
*
>
&
SignalSctpDataChannelCreated
(
)
=
0
;
virtual
std
:
:
vector
<
DataChannelStats
>
GetDataChannelStats
(
)
const
{
return
{
}
;
}
virtual
absl
:
:
optional
<
std
:
:
string
>
sctp_transport_name
(
)
const
=
0
;
virtual
absl
:
:
optional
<
std
:
:
string
>
sctp_mid
(
)
const
=
0
;
virtual
cricket
:
:
CandidateStatsList
GetPooledCandidateStats
(
)
const
=
0
;
virtual
std
:
:
map
<
std
:
:
string
cricket
:
:
TransportStats
>
GetTransportStatsByNames
(
const
std
:
:
set
<
std
:
:
string
>
&
transport_names
)
=
0
;
virtual
Call
:
:
Stats
GetCallStats
(
)
=
0
;
virtual
bool
GetLocalCertificate
(
const
std
:
:
string
&
transport_name
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
*
certificate
)
=
0
;
virtual
std
:
:
unique_ptr
<
rtc
:
:
SSLCertChain
>
GetRemoteSSLCertChain
(
const
std
:
:
string
&
transport_name
)
=
0
;
virtual
bool
IceRestartPending
(
const
std
:
:
string
&
content_name
)
const
=
0
;
virtual
bool
NeedsIceRestart
(
const
std
:
:
string
&
content_name
)
const
=
0
;
virtual
bool
GetSslRole
(
const
std
:
:
string
&
content_name
rtc
:
:
SSLRole
*
role
)
=
0
;
}
;
}
#
endif
