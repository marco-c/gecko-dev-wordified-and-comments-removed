#
ifndef
PC_PEER_CONNECTION_INTERNAL_H_
#
define
PC_PEER_CONNECTION_INTERNAL_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
audio
/
audio_device
.
h
"
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
crypto
/
crypto_options
.
h
"
#
include
"
api
/
data_channel_interface
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
jsep
.
h
"
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
rtc_error
.
h
"
#
include
"
api
/
rtp_transceiver_interface
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sctp_transport_interface
.
h
"
#
include
"
call
/
call
.
h
"
#
include
"
call
/
payload_type_picker
.
h
"
#
include
"
p2p
/
base
/
port
.
h
"
#
include
"
p2p
/
base
/
port_allocator
.
h
"
#
include
"
pc
/
data_channel_utils
.
h
"
#
include
"
pc
/
jsep_transport_controller
.
h
"
#
include
"
pc
/
peer_connection_message_handler
.
h
"
#
include
"
pc
/
rtp_transceiver
.
h
"
#
include
"
pc
/
rtp_transmission_manager
.
h
"
#
include
"
pc
/
session_description
.
h
"
#
include
"
pc
/
transport_stats
.
h
"
#
include
"
pc
/
usage_pattern
.
h
"
#
include
"
rtc_base
/
rtc_certificate
.
h
"
#
include
"
rtc_base
/
ssl_certificate
.
h
"
#
include
"
rtc_base
/
ssl_stream_adapter
.
h
"
namespace
webrtc
{
class
DataChannelController
;
class
LegacyStatsCollector
;
class
PeerConnectionSdpMethods
{
public
:
virtual
~
PeerConnectionSdpMethods
(
)
=
default
;
virtual
std
:
:
string
session_id
(
)
const
=
0
;
virtual
bool
NeedsIceRestart
(
const
std
:
:
string
&
content_name
)
const
=
0
;
virtual
std
:
:
optional
<
std
:
:
string
>
sctp_mid
(
)
const
=
0
;
virtual
const
PeerConnectionInterface
:
:
RTCConfiguration
*
configuration
(
)
const
=
0
;
virtual
void
ReportSdpBundleUsage
(
const
SessionDescriptionInterface
&
remote_description
)
=
0
;
virtual
PeerConnectionMessageHandler
*
message_handler
(
)
=
0
;
virtual
RtpTransmissionManager
*
rtp_manager
(
)
=
0
;
virtual
const
RtpTransmissionManager
*
rtp_manager
(
)
const
=
0
;
virtual
bool
dtls_enabled
(
)
const
=
0
;
virtual
const
PeerConnectionFactoryInterface
:
:
Options
*
options
(
)
const
=
0
;
virtual
CryptoOptions
GetCryptoOptions
(
)
=
0
;
virtual
JsepTransportController
*
transport_controller_s
(
)
=
0
;
virtual
JsepTransportController
*
transport_controller_n
(
)
=
0
;
virtual
DataChannelController
*
data_channel_controller
(
)
=
0
;
virtual
PortAllocator
*
port_allocator
(
)
=
0
;
virtual
LegacyStatsCollector
*
legacy_stats
(
)
=
0
;
virtual
PeerConnectionObserver
*
Observer
(
)
const
=
0
;
virtual
std
:
:
optional
<
SSLRole
>
GetSctpSslRole_n
(
)
=
0
;
virtual
PeerConnectionInterface
:
:
IceConnectionState
ice_connection_state_internal
(
)
=
0
;
virtual
void
SetIceConnectionState
(
PeerConnectionInterface
:
:
IceConnectionState
new_state
)
=
0
;
virtual
void
NoteUsageEvent
(
UsageEvent
event
)
=
0
;
virtual
bool
IsClosed
(
)
const
=
0
;
virtual
bool
IsUnifiedPlan
(
)
const
=
0
;
virtual
bool
ValidateBundleSettings
(
const
SessionDescription
*
desc
const
std
:
:
map
<
std
:
:
string
const
ContentGroup
*
>
&
bundle_groups_by_mid
)
=
0
;
virtual
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
>
AddTransceiver
(
cricket
:
:
MediaType
media_type
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
const
RtpTransceiverInit
&
init
bool
fire_callback
=
true
)
=
0
;
virtual
RTCError
StartSctpTransport
(
const
SctpOptions
&
options
)
=
0
;
[
[
deprecated
(
"
Call
with
SctpOptions
"
)
]
]
virtual
void
StartSctpTransport
(
int
local_port
int
remote_port
int
max_message_size
)
{
StartSctpTransport
(
{
.
local_port
=
local_port
.
remote_port
=
remote_port
.
max_message_size
=
max_message_size
}
)
;
}
virtual
void
AddRemoteCandidate
(
absl
:
:
string_view
mid
const
Candidate
&
candidate
)
=
0
;
virtual
Call
*
call_ptr
(
)
=
0
;
virtual
bool
SrtpRequired
(
)
const
=
0
;
virtual
bool
CreateDataChannelTransport
(
absl
:
:
string_view
mid
)
=
0
;
virtual
void
DestroyDataChannelTransport
(
RTCError
error
)
=
0
;
virtual
const
FieldTrialsView
&
trials
(
)
const
=
0
;
virtual
void
ClearStatsCache
(
)
=
0
;
virtual
PayloadTypePicker
&
payload_type_picker
(
)
=
0
;
}
;
class
PeerConnectionInternal
:
public
PeerConnectionInterface
public
PeerConnectionSdpMethods
{
public
:
virtual
Thread
*
network_thread
(
)
const
=
0
;
virtual
Thread
*
worker_thread
(
)
const
=
0
;
virtual
bool
initial_offerer
(
)
const
=
0
;
virtual
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
>
GetTransceiversInternal
(
)
const
=
0
;
virtual
std
:
:
vector
<
DataChannelStats
>
GetDataChannelStats
(
)
const
{
return
{
}
;
}
virtual
std
:
:
optional
<
std
:
:
string
>
sctp_transport_name
(
)
const
=
0
;
virtual
cricket
:
:
CandidateStatsList
GetPooledCandidateStats
(
)
const
=
0
;
virtual
std
:
:
map
<
std
:
:
string
cricket
:
:
TransportStats
>
GetTransportStatsByNames
(
const
std
:
:
set
<
std
:
:
string
>
&
transport_names
)
=
0
;
virtual
Call
:
:
Stats
GetCallStats
(
)
=
0
;
virtual
std
:
:
optional
<
AudioDeviceModule
:
:
Stats
>
GetAudioDeviceStats
(
)
=
0
;
virtual
bool
GetLocalCertificate
(
const
std
:
:
string
&
transport_name
rtc
:
:
scoped_refptr
<
RTCCertificate
>
*
certificate
)
=
0
;
virtual
std
:
:
unique_ptr
<
rtc
:
:
SSLCertChain
>
GetRemoteSSLCertChain
(
const
std
:
:
string
&
transport_name
)
=
0
;
virtual
bool
IceRestartPending
(
const
std
:
:
string
&
content_name
)
const
=
0
;
virtual
bool
GetSslRole
(
const
std
:
:
string
&
content_name
SSLRole
*
role
)
=
0
;
virtual
void
NoteDataAddedEvent
(
)
{
}
virtual
void
OnSctpDataChannelStateChanged
(
int
channel_id
DataChannelInterface
:
:
DataState
state
)
{
}
}
;
}
#
endif
