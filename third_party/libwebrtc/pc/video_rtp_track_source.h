#
ifndef
PC_VIDEO_RTP_TRACK_SOURCE_H_
#
define
PC_VIDEO_RTP_TRACK_SOURCE_H_
#
include
<
vector
>
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
video
/
recordable_encoded_frame
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
api
/
video
/
video_source_interface
.
h
"
#
include
"
media
/
base
/
video_broadcaster
.
h
"
#
include
"
pc
/
video_track_source
.
h
"
#
include
"
rtc_base
/
callback
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
VideoRtpTrackSource
:
public
VideoTrackSource
{
public
:
class
Callback
{
public
:
virtual
~
Callback
(
)
=
default
;
virtual
void
OnGenerateKeyFrame
(
)
=
0
;
virtual
void
OnEncodedSinkEnabled
(
bool
enable
)
=
0
;
}
;
explicit
VideoRtpTrackSource
(
Callback
*
callback
)
;
void
ClearCallback
(
)
;
void
BroadcastRecordableEncodedFrame
(
const
RecordableEncodedFrame
&
frame
)
const
;
rtc
:
:
VideoSourceInterface
<
VideoFrame
>
*
source
(
)
override
;
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
sink
(
)
;
bool
SupportsEncodedOutput
(
)
const
override
;
void
GenerateKeyFrame
(
)
override
;
void
AddEncodedSink
(
rtc
:
:
VideoSinkInterface
<
RecordableEncodedFrame
>
*
sink
)
override
;
void
RemoveEncodedSink
(
rtc
:
:
VideoSinkInterface
<
RecordableEncodedFrame
>
*
sink
)
override
;
private
:
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
worker_sequence_checker_
;
rtc
:
:
VideoBroadcaster
broadcaster_
;
mutable
Mutex
mu_
;
std
:
:
vector
<
rtc
:
:
VideoSinkInterface
<
RecordableEncodedFrame
>
*
>
encoded_sinks_
RTC_GUARDED_BY
(
mu_
)
;
Callback
*
callback_
RTC_GUARDED_BY
(
worker_sequence_checker_
)
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
VideoRtpTrackSource
)
;
}
;
}
#
endif
