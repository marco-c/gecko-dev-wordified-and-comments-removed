#
ifndef
PC_PEER_CONNECTION_H_
#
define
PC_PEER_CONNECTION_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
peer_connection_interface
.
h
"
#
include
"
api
/
transport
/
data_channel_transport_interface
.
h
"
#
include
"
api
/
turn_customizer
.
h
"
#
include
"
pc
/
data_channel_controller
.
h
"
#
include
"
pc
/
ice_server_parsing
.
h
"
#
include
"
pc
/
jsep_transport_controller
.
h
"
#
include
"
pc
/
peer_connection_factory
.
h
"
#
include
"
pc
/
peer_connection_internal
.
h
"
#
include
"
pc
/
rtc_stats_collector
.
h
"
#
include
"
pc
/
rtp_sender
.
h
"
#
include
"
pc
/
rtp_transceiver
.
h
"
#
include
"
pc
/
sctp_transport
.
h
"
#
include
"
pc
/
stats_collector
.
h
"
#
include
"
pc
/
stream_collection
.
h
"
#
include
"
pc
/
webrtc_session_description_factory
.
h
"
#
include
"
rtc_base
/
experiments
/
field_trial_parser
.
h
"
#
include
"
rtc_base
/
operations_chain
.
h
"
#
include
"
rtc_base
/
race_checker
.
h
"
#
include
"
rtc_base
/
unique_id_generator
.
h
"
#
include
"
rtc_base
/
weak_ptr
.
h
"
namespace
webrtc
{
class
MediaStreamObserver
;
class
VideoRtpReceiver
;
class
RtcEventLog
;
class
PeerConnection
:
public
PeerConnectionInternal
public
JsepTransportController
:
:
Observer
public
RtpSenderBase
:
:
SetStreamsObserver
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
enum
class
UsageEvent
:
int
{
TURN_SERVER_ADDED
=
0x01
STUN_SERVER_ADDED
=
0x02
DATA_ADDED
=
0x04
AUDIO_ADDED
=
0x08
VIDEO_ADDED
=
0x10
SET_LOCAL_DESCRIPTION_SUCCEEDED
=
0x20
SET_REMOTE_DESCRIPTION_SUCCEEDED
=
0x40
CANDIDATE_COLLECTED
=
0x80
ADD_ICE_CANDIDATE_SUCCEEDED
=
0x100
ICE_STATE_CONNECTED
=
0x200
CLOSE_CALLED
=
0x400
PRIVATE_CANDIDATE_COLLECTED
=
0x800
REMOTE_PRIVATE_CANDIDATE_ADDED
=
0x1000
MDNS_CANDIDATE_COLLECTED
=
0x2000
REMOTE_MDNS_CANDIDATE_ADDED
=
0x4000
IPV6_CANDIDATE_COLLECTED
=
0x8000
REMOTE_IPV6_CANDIDATE_ADDED
=
0x10000
REMOTE_CANDIDATE_ADDED
=
0x20000
DIRECT_CONNECTION_SELECTED
=
0x40000
MAX_VALUE
=
0x80000
}
;
explicit
PeerConnection
(
PeerConnectionFactory
*
factory
std
:
:
unique_ptr
<
RtcEventLog
>
event_log
std
:
:
unique_ptr
<
Call
>
call
)
;
bool
Initialize
(
const
PeerConnectionInterface
:
:
RTCConfiguration
&
configuration
PeerConnectionDependencies
dependencies
)
;
rtc
:
:
scoped_refptr
<
StreamCollectionInterface
>
local_streams
(
)
override
;
rtc
:
:
scoped_refptr
<
StreamCollectionInterface
>
remote_streams
(
)
override
;
bool
AddStream
(
MediaStreamInterface
*
local_stream
)
override
;
void
RemoveStream
(
MediaStreamInterface
*
local_stream
)
override
;
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
>
AddTrack
(
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
)
override
;
bool
RemoveTrack
(
RtpSenderInterface
*
sender
)
override
;
RTCError
RemoveTrackNew
(
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
)
override
;
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
>
AddTransceiver
(
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
)
override
;
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
>
AddTransceiver
(
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
const
RtpTransceiverInit
&
init
)
override
;
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
>
AddTransceiver
(
cricket
:
:
MediaType
media_type
)
override
;
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
>
AddTransceiver
(
cricket
:
:
MediaType
media_type
const
RtpTransceiverInit
&
init
)
override
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificate
>
GetRemoteAudioSSLCertificate
(
)
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertChain
>
GetRemoteAudioSSLCertChain
(
)
;
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
CreateSender
(
const
std
:
:
string
&
kind
const
std
:
:
string
&
stream_id
)
override
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
>
GetSenders
(
)
const
override
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpReceiverInterface
>
>
GetReceivers
(
)
const
override
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
>
GetTransceivers
(
)
const
override
;
rtc
:
:
scoped_refptr
<
DataChannelInterface
>
CreateDataChannel
(
const
std
:
:
string
&
label
const
DataChannelInit
*
config
)
override
;
bool
GetStats
(
StatsObserver
*
observer
webrtc
:
:
MediaStreamTrackInterface
*
track
StatsOutputLevel
level
)
override
;
void
GetStats
(
RTCStatsCollectorCallback
*
callback
)
override
;
void
GetStats
(
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
selector
rtc
:
:
scoped_refptr
<
RTCStatsCollectorCallback
>
callback
)
override
;
void
GetStats
(
rtc
:
:
scoped_refptr
<
RtpReceiverInterface
>
selector
rtc
:
:
scoped_refptr
<
RTCStatsCollectorCallback
>
callback
)
override
;
void
ClearStatsCache
(
)
override
;
SignalingState
signaling_state
(
)
override
;
IceConnectionState
ice_connection_state
(
)
override
;
IceConnectionState
standardized_ice_connection_state
(
)
override
;
PeerConnectionState
peer_connection_state
(
)
override
;
IceGatheringState
ice_gathering_state
(
)
override
;
absl
:
:
optional
<
bool
>
can_trickle_ice_candidates
(
)
override
;
const
SessionDescriptionInterface
*
local_description
(
)
const
override
;
const
SessionDescriptionInterface
*
remote_description
(
)
const
override
;
const
SessionDescriptionInterface
*
current_local_description
(
)
const
override
;
const
SessionDescriptionInterface
*
current_remote_description
(
)
const
override
;
const
SessionDescriptionInterface
*
pending_local_description
(
)
const
override
;
const
SessionDescriptionInterface
*
pending_remote_description
(
)
const
override
;
void
RestartIce
(
)
override
;
void
CreateOffer
(
CreateSessionDescriptionObserver
*
observer
const
RTCOfferAnswerOptions
&
options
)
override
;
void
CreateAnswer
(
CreateSessionDescriptionObserver
*
observer
const
RTCOfferAnswerOptions
&
options
)
override
;
void
SetLocalDescription
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
rtc
:
:
scoped_refptr
<
SetLocalDescriptionObserverInterface
>
observer
)
override
;
void
SetLocalDescription
(
rtc
:
:
scoped_refptr
<
SetLocalDescriptionObserverInterface
>
observer
)
override
;
void
SetLocalDescription
(
SetSessionDescriptionObserver
*
observer
SessionDescriptionInterface
*
desc
)
override
;
void
SetLocalDescription
(
SetSessionDescriptionObserver
*
observer
)
override
;
void
SetRemoteDescription
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
rtc
:
:
scoped_refptr
<
SetRemoteDescriptionObserverInterface
>
observer
)
override
;
void
SetRemoteDescription
(
SetSessionDescriptionObserver
*
observer
SessionDescriptionInterface
*
desc
)
override
;
PeerConnectionInterface
:
:
RTCConfiguration
GetConfiguration
(
)
override
;
RTCError
SetConfiguration
(
const
PeerConnectionInterface
:
:
RTCConfiguration
&
configuration
)
override
;
bool
AddIceCandidate
(
const
IceCandidateInterface
*
candidate
)
override
;
void
AddIceCandidate
(
std
:
:
unique_ptr
<
IceCandidateInterface
>
candidate
std
:
:
function
<
void
(
RTCError
)
>
callback
)
override
;
bool
RemoveIceCandidates
(
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
candidates
)
override
;
RTCError
SetBitrate
(
const
BitrateSettings
&
bitrate
)
override
;
void
SetAudioPlayout
(
bool
playout
)
override
;
void
SetAudioRecording
(
bool
recording
)
override
;
rtc
:
:
scoped_refptr
<
DtlsTransportInterface
>
LookupDtlsTransportByMid
(
const
std
:
:
string
&
mid
)
override
;
rtc
:
:
scoped_refptr
<
DtlsTransport
>
LookupDtlsTransportByMidInternal
(
const
std
:
:
string
&
mid
)
;
rtc
:
:
scoped_refptr
<
SctpTransportInterface
>
GetSctpTransport
(
)
const
override
;
void
AddAdaptationResource
(
rtc
:
:
scoped_refptr
<
Resource
>
resource
)
override
;
bool
StartRtcEventLog
(
std
:
:
unique_ptr
<
RtcEventLogOutput
>
output
int64_t
output_period_ms
)
override
;
bool
StartRtcEventLog
(
std
:
:
unique_ptr
<
RtcEventLogOutput
>
output
)
override
;
void
StopRtcEventLog
(
)
override
;
void
Close
(
)
override
;
rtc
:
:
Thread
*
signaling_thread
(
)
const
final
{
return
factory_
-
>
signaling_thread
(
)
;
}
rtc
:
:
Thread
*
network_thread
(
)
const
final
{
return
factory_
-
>
network_thread
(
)
;
}
rtc
:
:
Thread
*
worker_thread
(
)
const
final
{
return
factory_
-
>
worker_thread
(
)
;
}
std
:
:
string
session_id
(
)
const
override
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
return
session_id_
;
}
bool
initial_offerer
(
)
const
override
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
return
transport_controller_
&
&
transport_controller_
-
>
initial_offerer
(
)
;
}
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
>
GetTransceiversInternal
(
)
const
override
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
return
transceivers_
;
}
sigslot
:
:
signal1
<
RtpDataChannel
*
>
&
SignalRtpDataChannelCreated
(
)
override
{
return
data_channel_controller_
.
SignalRtpDataChannelCreated
(
)
;
}
sigslot
:
:
signal1
<
SctpDataChannel
*
>
&
SignalSctpDataChannelCreated
(
)
override
{
return
data_channel_controller_
.
SignalSctpDataChannelCreated
(
)
;
}
cricket
:
:
RtpDataChannel
*
rtp_data_channel
(
)
const
override
{
return
data_channel_controller_
.
rtp_data_channel
(
)
;
}
std
:
:
vector
<
DataChannelStats
>
GetDataChannelStats
(
)
const
override
;
absl
:
:
optional
<
std
:
:
string
>
sctp_transport_name
(
)
const
override
;
cricket
:
:
CandidateStatsList
GetPooledCandidateStats
(
)
const
override
;
std
:
:
map
<
std
:
:
string
std
:
:
string
>
GetTransportNamesByMid
(
)
const
override
;
std
:
:
map
<
std
:
:
string
cricket
:
:
TransportStats
>
GetTransportStatsByNames
(
const
std
:
:
set
<
std
:
:
string
>
&
transport_names
)
override
;
Call
:
:
Stats
GetCallStats
(
)
override
;
bool
GetLocalCertificate
(
const
std
:
:
string
&
transport_name
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
*
certificate
)
override
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertChain
>
GetRemoteSSLCertChain
(
const
std
:
:
string
&
transport_name
)
override
;
bool
IceRestartPending
(
const
std
:
:
string
&
content_name
)
const
override
;
bool
NeedsIceRestart
(
const
std
:
:
string
&
content_name
)
const
override
;
bool
GetSslRole
(
const
std
:
:
string
&
content_name
rtc
:
:
SSLRole
*
role
)
override
;
void
NoteDataAddedEvent
(
)
{
NoteUsageEvent
(
UsageEvent
:
:
DATA_ADDED
)
;
}
PeerConnectionObserver
*
Observer
(
)
const
;
bool
IsClosed
(
)
const
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
return
signaling_state_
=
=
PeerConnectionInterface
:
:
kClosed
;
}
bool
GetSctpSslRole
(
rtc
:
:
SSLRole
*
role
)
;
void
OnSctpDataChannelClosed
(
DataChannelInterface
*
channel
)
;
bool
ShouldFireNegotiationNeededEvent
(
uint32_t
event_id
)
override
;
void
ReturnHistogramVeryQuicklyForTesting
(
)
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
return_histogram_very_quickly_
=
true
;
}
void
RequestUsagePatternReportForTesting
(
)
;
absl
:
:
optional
<
std
:
:
string
>
sctp_mid
(
)
{
RTC_DCHECK_RUN_ON
(
signaling_thread
(
)
)
;
return
sctp_mid_s_
;
}
protected
:
~
PeerConnection
(
)
override
;
private
:
class
ImplicitCreateSessionDescriptionObserver
;
friend
class
ImplicitCreateSessionDescriptionObserver
;
class
SetSessionDescriptionObserverAdapter
;
friend
class
SetSessionDescriptionObserverAdapter
;
class
LocalIceCredentialsToReplace
;
struct
RtpSenderInfo
{
RtpSenderInfo
(
)
:
first_ssrc
(
0
)
{
}
RtpSenderInfo
(
const
std
:
:
string
&
stream_id
const
std
:
:
string
sender_id
uint32_t
ssrc
)
:
stream_id
(
stream_id
)
sender_id
(
sender_id
)
first_ssrc
(
ssrc
)
{
}
bool
operator
=
=
(
const
RtpSenderInfo
&
other
)
{
return
this
-
>
stream_id
=
=
other
.
stream_id
&
&
this
-
>
sender_id
=
=
other
.
sender_id
&
&
this
-
>
first_ssrc
=
=
other
.
first_ssrc
;
}
std
:
:
string
stream_id
;
std
:
:
string
sender_id
;
uint32_t
first_ssrc
;
}
;
class
TransceiverStableState
{
public
:
TransceiverStableState
(
)
{
}
void
set_newly_created
(
)
;
void
SetMSectionIfUnset
(
absl
:
:
optional
<
std
:
:
string
>
mid
absl
:
:
optional
<
size_t
>
mline_index
)
;
void
SetRemoteStreamIdsIfUnset
(
const
std
:
:
vector
<
std
:
:
string
>
&
ids
)
;
absl
:
:
optional
<
std
:
:
string
>
mid
(
)
const
{
return
mid_
;
}
absl
:
:
optional
<
size_t
>
mline_index
(
)
const
{
return
mline_index_
;
}
absl
:
:
optional
<
std
:
:
vector
<
std
:
:
string
>
>
remote_stream_ids
(
)
const
{
return
remote_stream_ids_
;
}
bool
has_m_section
(
)
const
{
return
has_m_section_
;
}
bool
newly_created
(
)
const
{
return
newly_created_
;
}
private
:
absl
:
:
optional
<
std
:
:
string
>
mid_
;
absl
:
:
optional
<
size_t
>
mline_index_
;
absl
:
:
optional
<
std
:
:
vector
<
std
:
:
string
>
>
remote_stream_ids_
;
bool
has_m_section_
=
false
;
bool
newly_created_
=
false
;
}
;
void
OnMessage
(
rtc
:
:
Message
*
msg
)
override
;
cricket
:
:
VoiceMediaChannel
*
voice_media_channel
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
cricket
:
:
VideoMediaChannel
*
video_media_channel
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpSenderProxyWithInternal
<
RtpSenderInternal
>
>
>
GetSendersInternal
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpReceiverProxyWithInternal
<
RtpReceiverInternal
>
>
>
GetReceiversInternal
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
GetAudioTransceiver
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
GetVideoTransceiver
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
GetFirstAudioTransceiver
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
DoCreateOffer
(
const
RTCOfferAnswerOptions
&
options
rtc
:
:
scoped_refptr
<
CreateSessionDescriptionObserver
>
observer
)
;
void
DoCreateAnswer
(
const
RTCOfferAnswerOptions
&
options
rtc
:
:
scoped_refptr
<
CreateSessionDescriptionObserver
>
observer
)
;
void
DoSetLocalDescription
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
rtc
:
:
scoped_refptr
<
SetLocalDescriptionObserverInterface
>
observer
)
;
void
DoSetRemoteDescription
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
rtc
:
:
scoped_refptr
<
SetRemoteDescriptionObserverInterface
>
observer
)
;
void
RemoveStoppedTransceivers
(
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
CreateAudioReceiver
(
MediaStreamInterface
*
stream
const
RtpSenderInfo
&
remote_sender_info
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
CreateVideoReceiver
(
MediaStreamInterface
*
stream
const
RtpSenderInfo
&
remote_sender_info
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpReceiverInterface
>
RemoveAndStopReceiver
(
const
RtpSenderInfo
&
remote_sender_info
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
AddAudioTrack
(
AudioTrackInterface
*
track
MediaStreamInterface
*
stream
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
RemoveAudioTrack
(
AudioTrackInterface
*
track
MediaStreamInterface
*
stream
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
AddVideoTrack
(
VideoTrackInterface
*
track
MediaStreamInterface
*
stream
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
RemoveVideoTrack
(
VideoTrackInterface
*
track
MediaStreamInterface
*
stream
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
>
AddTrackUnifiedPlan
(
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
>
AddTrackPlanB
(
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
FindFirstTransceiverForAddedTrack
(
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
FindTransceiverBySender
(
rtc
:
:
scoped_refptr
<
RtpSenderInterface
>
sender
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
>
AddTransceiver
(
cricket
:
:
MediaType
media_type
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
const
RtpTransceiverInit
&
init
bool
fire_callback
=
true
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpSenderProxyWithInternal
<
RtpSenderInternal
>
>
CreateSender
(
cricket
:
:
MediaType
media_type
const
std
:
:
string
&
id
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
const
std
:
:
vector
<
RtpEncodingParameters
>
&
send_encodings
)
;
rtc
:
:
scoped_refptr
<
RtpReceiverProxyWithInternal
<
RtpReceiverInternal
>
>
CreateReceiver
(
cricket
:
:
MediaType
media_type
const
std
:
:
string
&
receiver_id
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
CreateAndAddTransceiver
(
rtc
:
:
scoped_refptr
<
RtpSenderProxyWithInternal
<
RtpSenderInternal
>
>
sender
rtc
:
:
scoped_refptr
<
RtpReceiverProxyWithInternal
<
RtpReceiverInternal
>
>
receiver
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
SetIceConnectionState
(
IceConnectionState
new_state
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
SetStandardizedIceConnectionState
(
PeerConnectionInterface
:
:
IceConnectionState
new_state
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
SetConnectionState
(
PeerConnectionInterface
:
:
PeerConnectionState
new_state
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnIceGatheringChange
(
IceGatheringState
new_state
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnIceCandidate
(
std
:
:
unique_ptr
<
IceCandidateInterface
>
candidate
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnIceCandidateError
(
const
std
:
:
string
&
address
int
port
const
std
:
:
string
&
url
int
error_code
const
std
:
:
string
&
error_text
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnIceCandidatesRemoved
(
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
candidates
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnSelectedCandidatePairChanged
(
const
cricket
:
:
CandidatePairChangeEvent
&
event
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
ChangeSignalingState
(
SignalingState
signaling_state
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnAudioTrackAdded
(
AudioTrackInterface
*
track
MediaStreamInterface
*
stream
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnAudioTrackRemoved
(
AudioTrackInterface
*
track
MediaStreamInterface
*
stream
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnVideoTrackAdded
(
VideoTrackInterface
*
track
MediaStreamInterface
*
stream
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnVideoTrackRemoved
(
VideoTrackInterface
*
track
MediaStreamInterface
*
stream
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
PostSetSessionDescriptionSuccess
(
SetSessionDescriptionObserver
*
observer
)
;
void
PostSetSessionDescriptionFailure
(
SetSessionDescriptionObserver
*
observer
RTCError
&
&
error
)
;
void
PostCreateSessionDescriptionFailure
(
CreateSessionDescriptionObserver
*
observer
RTCError
error
)
;
RTCError
ApplyLocalDescription
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
)
;
RTCError
ApplyRemoteDescription
(
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
desc
)
;
RTCError
UpdateTransceiversAndDataChannels
(
cricket
:
:
ContentSource
source
const
SessionDescriptionInterface
&
new_session
const
SessionDescriptionInterface
*
old_local_description
const
SessionDescriptionInterface
*
old_remote_description
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCError
UpdateTransceiverChannel
(
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
transceiver
const
cricket
:
:
ContentInfo
&
content
const
cricket
:
:
ContentGroup
*
bundle_group
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCError
UpdateDataChannel
(
cricket
:
:
ContentSource
source
const
cricket
:
:
ContentInfo
&
content
const
cricket
:
:
ContentGroup
*
bundle_group
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCErrorOr
<
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
>
AssociateTransceiver
(
cricket
:
:
ContentSource
source
SdpType
type
size_t
mline_index
const
cricket
:
:
ContentInfo
&
content
const
cricket
:
:
ContentInfo
*
old_local_content
const
cricket
:
:
ContentInfo
*
old_remote_content
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
GetAssociatedTransceiver
(
const
std
:
:
string
&
mid
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
GetTransceiverByMLineIndex
(
size_t
mline_index
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
FindAvailableTransceiverToReceive
(
cricket
:
:
MediaType
media_type
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
const
cricket
:
:
ContentInfo
*
FindMediaSectionForTransceiver
(
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
transceiver
const
SessionDescriptionInterface
*
sdesc
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
SetAssociatedRemoteStreams
(
rtc
:
:
scoped_refptr
<
RtpReceiverInternal
>
receiver
const
std
:
:
vector
<
std
:
:
string
>
&
stream_ids
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
MediaStreamInterface
>
>
*
added_streams
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
MediaStreamInterface
>
>
*
removed_streams
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
ProcessRemovalOfRemoteTrack
(
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
transceiver
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpTransceiverInterface
>
>
*
remove_list
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
MediaStreamInterface
>
>
*
removed_streams
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
RemoveRemoteStreamsIfEmpty
(
const
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
MediaStreamInterface
>
>
&
remote_streams
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
MediaStreamInterface
>
>
*
removed_streams
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnNegotiationNeeded
(
)
;
void
GetOptionsForOffer
(
const
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
&
offer_answer_options
cricket
:
:
MediaSessionOptions
*
session_options
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
GetOptionsForPlanBOffer
(
const
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
&
offer_answer_options
cricket
:
:
MediaSessionOptions
*
session_options
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
GetOptionsForUnifiedPlanOffer
(
const
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
&
offer_answer_options
cricket
:
:
MediaSessionOptions
*
session_options
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCError
HandleLegacyOfferOptions
(
const
RTCOfferAnswerOptions
&
options
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
RemoveRecvDirectionFromReceivingTransceiversOfType
(
cricket
:
:
MediaType
media_type
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
AddUpToOneReceivingTransceiverOfType
(
cricket
:
:
MediaType
media_type
)
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
>
GetReceivingTransceiversOfType
(
cricket
:
:
MediaType
media_type
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
GetOptionsForAnswer
(
const
RTCOfferAnswerOptions
&
offer_answer_options
cricket
:
:
MediaSessionOptions
*
session_options
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
GetOptionsForPlanBAnswer
(
const
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
&
offer_answer_options
cricket
:
:
MediaSessionOptions
*
session_options
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
GetOptionsForUnifiedPlanAnswer
(
const
PeerConnectionInterface
:
:
RTCOfferAnswerOptions
&
offer_answer_options
cricket
:
:
MediaSessionOptions
*
session_options
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
GenerateMediaDescriptionOptions
(
const
SessionDescriptionInterface
*
session_desc
RtpTransceiverDirection
audio_direction
RtpTransceiverDirection
video_direction
absl
:
:
optional
<
size_t
>
*
audio_index
absl
:
:
optional
<
size_t
>
*
video_index
absl
:
:
optional
<
size_t
>
*
data_index
cricket
:
:
MediaSessionOptions
*
session_options
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
cricket
:
:
MediaDescriptionOptions
GetMediaDescriptionOptionsForActiveData
(
const
std
:
:
string
&
mid
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
cricket
:
:
MediaDescriptionOptions
GetMediaDescriptionOptionsForRejectedData
(
const
std
:
:
string
&
mid
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
absl
:
:
optional
<
std
:
:
string
>
GetDataMid
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
RemoveSenders
(
cricket
:
:
MediaType
media_type
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
UpdateRemoteSendersList
(
const
std
:
:
vector
<
cricket
:
:
StreamParams
>
&
streams
bool
default_track_needed
cricket
:
:
MediaType
media_type
StreamCollection
*
new_streams
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnRemoteSenderAdded
(
const
RtpSenderInfo
&
sender_info
cricket
:
:
MediaType
media_type
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnRemoteSenderRemoved
(
const
RtpSenderInfo
&
sender_info
cricket
:
:
MediaType
media_type
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
UpdateEndedRemoteMediaStreams
(
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
UpdateLocalSenders
(
const
std
:
:
vector
<
cricket
:
:
StreamParams
>
&
streams
cricket
:
:
MediaType
media_type
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnLocalSenderAdded
(
const
RtpSenderInfo
&
sender_info
cricket
:
:
MediaType
media_type
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnLocalSenderRemoved
(
const
RtpSenderInfo
&
sender_info
cricket
:
:
MediaType
media_type
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
bool
IsUnifiedPlan
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
{
return
configuration_
.
sdp_semantics
=
=
SdpSemantics
:
:
kUnifiedPlan
;
}
void
FillInMissingRemoteMids
(
cricket
:
:
SessionDescription
*
remote_description
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpSenderProxyWithInternal
<
RtpSenderInternal
>
>
FindSenderForTrack
(
MediaStreamTrackInterface
*
track
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpSenderProxyWithInternal
<
RtpSenderInternal
>
>
FindSenderById
(
const
std
:
:
string
&
sender_id
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RtpReceiverProxyWithInternal
<
RtpReceiverInternal
>
>
FindReceiverById
(
const
std
:
:
string
&
receiver_id
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
std
:
:
vector
<
RtpSenderInfo
>
*
GetRemoteSenderInfos
(
cricket
:
:
MediaType
media_type
)
;
std
:
:
vector
<
RtpSenderInfo
>
*
GetLocalSenderInfos
(
cricket
:
:
MediaType
media_type
)
;
const
RtpSenderInfo
*
FindSenderInfo
(
const
std
:
:
vector
<
RtpSenderInfo
>
&
infos
const
std
:
:
string
&
stream_id
const
std
:
:
string
sender_id
)
const
;
SctpDataChannel
*
FindDataChannelBySid
(
int
sid
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
struct
InitializePortAllocatorResult
{
bool
enable_ipv6
;
}
;
InitializePortAllocatorResult
InitializePortAllocator_n
(
const
cricket
:
:
ServerAddresses
&
stun_servers
const
std
:
:
vector
<
cricket
:
:
RelayServerConfig
>
&
turn_servers
const
RTCConfiguration
&
configuration
)
;
bool
ReconfigurePortAllocator_n
(
const
cricket
:
:
ServerAddresses
&
stun_servers
const
std
:
:
vector
<
cricket
:
:
RelayServerConfig
>
&
turn_servers
IceTransportsType
type
int
candidate_pool_size
PortPrunePolicy
turn_port_prune_policy
webrtc
:
:
TurnCustomizer
*
turn_customizer
absl
:
:
optional
<
int
>
stun_candidate_keepalive_interval
bool
have_local_description
)
;
bool
StartRtcEventLog_w
(
std
:
:
unique_ptr
<
RtcEventLogOutput
>
output
int64_t
output_period_ms
)
;
void
StopRtcEventLog_w
(
)
;
RTCError
ValidateConfiguration
(
const
RTCConfiguration
&
config
)
const
;
cricket
:
:
ChannelManager
*
channel_manager
(
)
const
;
enum
class
SessionError
{
kNone
kContent
kTransport
}
;
SessionError
session_error
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
{
return
session_error_
;
}
const
std
:
:
string
&
session_error_desc
(
)
const
{
return
session_error_desc_
;
}
cricket
:
:
ChannelInterface
*
GetChannel
(
const
std
:
:
string
&
content_name
)
;
cricket
:
:
IceConfig
ParseIceConfig
(
const
PeerConnectionInterface
:
:
RTCConfiguration
&
config
)
const
;
cricket
:
:
DataChannelType
data_channel_type
(
)
const
;
void
OnCertificateReady
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
;
void
OnDtlsSrtpSetupFailure
(
cricket
:
:
BaseChannel
*
bool
rtcp
)
;
SessionDescriptionInterface
*
mutable_local_description
(
)
RTC_RUN_ON
(
signaling_thread
(
)
)
{
return
pending_local_description_
?
pending_local_description_
.
get
(
)
:
current_local_description_
.
get
(
)
;
}
SessionDescriptionInterface
*
mutable_remote_description
(
)
RTC_RUN_ON
(
signaling_thread
(
)
)
{
return
pending_remote_description_
?
pending_remote_description_
.
get
(
)
:
current_remote_description_
.
get
(
)
;
}
void
SetSessionError
(
SessionError
error
const
std
:
:
string
&
error_desc
)
;
RTCError
UpdateSessionState
(
SdpType
type
cricket
:
:
ContentSource
source
const
cricket
:
:
SessionDescription
*
description
)
;
void
UpdatePayloadTypeDemuxingState
(
cricket
:
:
ContentSource
source
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCError
PushdownMediaDescription
(
SdpType
type
cricket
:
:
ContentSource
source
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCError
PushdownTransportDescription
(
cricket
:
:
ContentSource
source
SdpType
type
)
;
static
bool
GetTransportDescription
(
const
cricket
:
:
SessionDescription
*
description
const
std
:
:
string
&
content_name
cricket
:
:
TransportDescription
*
info
)
;
void
EnableSending
(
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
DestroyAllChannels
(
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
bool
GetLocalCandidateMediaIndex
(
const
std
:
:
string
&
content_name
int
*
sdp_mline_index
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
bool
UseCandidatesInSessionDescription
(
const
SessionDescriptionInterface
*
remote_desc
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
bool
UseCandidate
(
const
IceCandidateInterface
*
candidate
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCErrorOr
<
const
cricket
:
:
ContentInfo
*
>
FindContentInfo
(
const
SessionDescriptionInterface
*
description
const
IceCandidateInterface
*
candidate
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
RemoveUnusedChannels
(
const
cricket
:
:
SessionDescription
*
desc
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCError
CreateChannels
(
const
cricket
:
:
SessionDescription
&
desc
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RTCErrorOr
<
const
cricket
:
:
ContentGroup
*
>
GetEarlyBundleGroup
(
const
cricket
:
:
SessionDescription
&
desc
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
cricket
:
:
VoiceChannel
*
CreateVoiceChannel
(
const
std
:
:
string
&
mid
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
cricket
:
:
VideoChannel
*
CreateVideoChannel
(
const
std
:
:
string
&
mid
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
bool
CreateDataChannel
(
const
std
:
:
string
&
mid
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
bool
SetupDataChannelTransport_n
(
const
std
:
:
string
&
mid
)
RTC_RUN_ON
(
network_thread
(
)
)
;
void
TeardownDataChannelTransport_n
(
)
RTC_RUN_ON
(
network_thread
(
)
)
;
bool
ValidateBundleSettings
(
const
cricket
:
:
SessionDescription
*
desc
)
;
bool
HasRtcpMuxEnabled
(
const
cricket
:
:
ContentInfo
*
content
)
;
RTCError
ValidateSessionDescription
(
const
SessionDescriptionInterface
*
sdesc
cricket
:
:
ContentSource
source
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
bool
ExpectSetLocalDescription
(
SdpType
type
)
;
bool
ExpectSetRemoteDescription
(
SdpType
type
)
;
bool
ValidateDtlsSetupAttribute
(
const
cricket
:
:
SessionDescription
*
desc
SdpType
type
)
;
bool
ReadyToUseRemoteCandidate
(
const
IceCandidateInterface
*
candidate
const
SessionDescriptionInterface
*
remote_desc
bool
*
valid
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
bool
SrtpRequired
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnTransportControllerConnectionState
(
cricket
:
:
IceConnectionState
state
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnTransportControllerGatheringState
(
cricket
:
:
IceGatheringState
state
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnTransportControllerCandidatesGathered
(
const
std
:
:
string
&
transport_name
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
candidates
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnTransportControllerCandidateError
(
const
cricket
:
:
IceCandidateErrorEvent
&
event
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnTransportControllerCandidatesRemoved
(
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
candidates
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnTransportControllerCandidateChanged
(
const
cricket
:
:
CandidatePairChangeEvent
&
event
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnTransportControllerDtlsHandshakeError
(
rtc
:
:
SSLHandshakeError
error
)
;
const
char
*
SessionErrorToString
(
SessionError
error
)
const
;
std
:
:
string
GetSessionErrorMsg
(
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
ReportSdpFormatReceived
(
const
SessionDescriptionInterface
&
remote_offer
)
;
void
ReportNegotiatedSdpSemantics
(
const
SessionDescriptionInterface
&
answer
)
;
void
ReportTransportStats
(
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
ReportBestConnectionState
(
const
cricket
:
:
TransportStats
&
stats
)
;
void
ReportNegotiatedCiphers
(
const
cricket
:
:
TransportStats
&
stats
const
std
:
:
set
<
cricket
:
:
MediaType
>
&
media_types
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
ReportIceCandidateCollected
(
const
cricket
:
:
Candidate
&
candidate
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
ReportRemoteIceCandidateAdded
(
const
cricket
:
:
Candidate
&
candidate
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
NoteUsageEvent
(
UsageEvent
event
)
;
void
ReportUsagePattern
(
)
const
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
OnSentPacket_w
(
const
rtc
:
:
SentPacket
&
sent_packet
)
;
const
std
:
:
string
GetTransportName
(
const
std
:
:
string
&
content_name
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
DestroyTransceiverChannel
(
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
transceiver
)
;
void
DestroyDataChannelTransport
(
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
void
DestroyChannelInterface
(
cricket
:
:
ChannelInterface
*
channel
)
;
bool
OnTransportChanged
(
const
std
:
:
string
&
mid
RtpTransportInternal
*
rtp_transport
rtc
:
:
scoped_refptr
<
DtlsTransport
>
dtls_transport
DataChannelTransportInterface
*
data_channel_transport
)
override
;
void
OnSetStreams
(
)
override
;
CryptoOptions
GetCryptoOptions
(
)
RTC_RUN_ON
(
signaling_thread
(
)
)
;
RtpTransportInternal
*
GetRtpTransport
(
const
std
:
:
string
&
mid
)
RTC_RUN_ON
(
signaling_thread
(
)
)
{
auto
rtp_transport
=
transport_controller_
-
>
GetRtpTransport
(
mid
)
;
RTC_DCHECK
(
rtp_transport
)
;
return
rtp_transport
;
}
void
UpdateNegotiationNeeded
(
)
;
bool
CheckIfNegotiationIsNeeded
(
)
;
void
OnOperationsChainEmpty
(
)
;
void
GenerateNegotiationNeededEvent
(
)
;
RTCError
Rollback
(
SdpType
desc_type
)
;
const
rtc
:
:
scoped_refptr
<
PeerConnectionFactory
>
factory_
;
PeerConnectionObserver
*
observer_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
nullptr
;
std
:
:
unique_ptr
<
RtcEventLog
>
event_log_
RTC_GUARDED_BY
(
worker_thread
(
)
)
;
RtcEventLog
*
const
event_log_ptr_
RTC_PT_GUARDED_BY
(
worker_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
rtc
:
:
OperationsChain
>
operations_chain_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
SignalingState
signaling_state_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
kStable
;
IceConnectionState
ice_connection_state_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
kIceConnectionNew
;
PeerConnectionInterface
:
:
IceConnectionState
standardized_ice_connection_state_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
kIceConnectionNew
;
PeerConnectionInterface
:
:
PeerConnectionState
connection_state_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
PeerConnectionState
:
:
kNew
;
IceGatheringState
ice_gathering_state_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
kIceGatheringNew
;
PeerConnectionInterface
:
:
RTCConfiguration
configuration_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
unique_ptr
<
AsyncResolverFactory
>
async_resolver_factory_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
unique_ptr
<
rtc
:
:
PacketSocketFactory
>
packet_socket_factory_
;
std
:
:
unique_ptr
<
cricket
:
:
PortAllocator
>
port_allocator_
;
std
:
:
unique_ptr
<
webrtc
:
:
IceTransportFactory
>
ice_transport_factory_
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificateVerifier
>
tls_cert_verifier_
;
const
std
:
:
string
rtcp_cname_
;
const
rtc
:
:
scoped_refptr
<
StreamCollection
>
local_streams_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
const
rtc
:
:
scoped_refptr
<
StreamCollection
>
remote_streams_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
vector
<
std
:
:
unique_ptr
<
MediaStreamObserver
>
>
stream_observers_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
vector
<
RtpSenderInfo
>
remote_audio_sender_infos_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
vector
<
RtpSenderInfo
>
remote_video_sender_infos_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
vector
<
RtpSenderInfo
>
local_audio_sender_infos_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
vector
<
RtpSenderInfo
>
local_video_sender_infos_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
bool
remote_peer_supports_msid_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
false
;
std
:
:
unique_ptr
<
Call
>
call_
RTC_GUARDED_BY
(
worker_thread
(
)
)
;
rtc
:
:
AsyncInvoker
rtcp_invoker_
RTC_GUARDED_BY
(
network_thread
(
)
)
;
Call
*
const
call_ptr_
;
std
:
:
unique_ptr
<
StatsCollector
>
stats_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
rtc
:
:
scoped_refptr
<
RTCStatsCollector
>
stats_collector_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
map
<
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
TransceiverStableState
>
transceiver_stable_states_by_transceivers_
;
bool
have_pending_rtp_data_channel_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
false
;
std
:
:
map
<
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
std
:
:
vector
<
std
:
:
string
>
>
remote_stream_ids_by_transceivers_
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
RtpTransceiverProxyWithInternal
<
RtpTransceiver
>
>
>
transceivers_
;
rtc
:
:
scoped_refptr
<
MediaStreamInterface
>
missing_msid_default_stream_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
rtc
:
:
UniqueStringGenerator
mid_generator_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
SessionError
session_error_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
SessionError
:
:
kNone
;
std
:
:
string
session_error_desc_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
string
session_id_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
unique_ptr
<
JsepTransportController
>
transport_controller_
;
absl
:
:
optional
<
std
:
:
string
>
sctp_mid_s_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
absl
:
:
optional
<
std
:
:
string
>
sctp_mid_n_
RTC_GUARDED_BY
(
network_thread
(
)
)
;
absl
:
:
optional
<
bool
>
is_caller_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
current_local_description_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
pending_local_description_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
current_remote_description_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
unique_ptr
<
SessionDescriptionInterface
>
pending_remote_description_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
bool
dtls_enabled_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
false
;
std
:
:
set
<
std
:
:
string
>
pending_ice_restarts_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
unique_ptr
<
WebRtcSessionDescriptionFactory
>
webrtc_session_desc_factory_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
cricket
:
:
AudioOptions
audio_options_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
cricket
:
:
VideoOptions
video_options_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
int
usage_event_accumulator_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
0
;
bool
return_histogram_very_quickly_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
false
;
rtc
:
:
UniqueRandomIdGenerator
ssrc_generator_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoBitrateAllocatorFactory
>
video_bitrate_allocator_factory_
;
std
:
:
unique_ptr
<
LocalIceCredentialsToReplace
>
local_ice_credentials_to_replace_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
bool
is_negotiation_needed_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
false
;
bool
update_negotiation_needed_on_empty_chain_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
=
false
;
uint32_t
negotiation_needed_event_id_
=
0
;
DataChannelController
data_channel_controller_
;
rtc
:
:
WeakPtrFactory
<
PeerConnection
>
weak_ptr_factory_
RTC_GUARDED_BY
(
signaling_thread
(
)
)
;
}
;
}
#
endif
