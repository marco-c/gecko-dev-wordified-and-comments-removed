#
ifndef
PC_SRTP_TRANSPORT_H_
#
define
PC_SRTP_TRANSPORT_H_
#
include
<
stddef
.
h
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
call
/
rtp_demuxer
.
h
"
#
include
"
p2p
/
base
/
packet_transport_internal
.
h
"
#
include
"
pc
/
rtp_transport
.
h
"
#
include
"
pc
/
srtp_session
.
h
"
#
include
"
rtc_base
/
async_packet_socket
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
rtc_base
/
network
/
received_packet
.
h
"
#
include
"
rtc_base
/
network_route
.
h
"
namespace
webrtc
{
class
SrtpTransport
:
public
RtpTransport
{
public
:
SrtpTransport
(
bool
rtcp_mux_enabled
const
FieldTrialsView
&
field_trials
)
;
virtual
~
SrtpTransport
(
)
=
default
;
bool
SendRtpPacket
(
rtc
:
:
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketOptions
&
options
int
flags
)
override
;
bool
SendRtcpPacket
(
rtc
:
:
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketOptions
&
options
int
flags
)
override
;
bool
IsSrtpActive
(
)
const
override
;
bool
IsWritable
(
bool
rtcp
)
const
override
;
bool
SetRtpParams
(
int
send_crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
send_key
const
std
:
:
vector
<
int
>
&
send_extension_ids
int
recv_crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
recv_key
const
std
:
:
vector
<
int
>
&
recv_extension_ids
)
;
bool
SetRtcpParams
(
int
send_crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
send_key
const
std
:
:
vector
<
int
>
&
send_extension_ids
int
recv_crypto_suite
const
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
&
recv_key
const
std
:
:
vector
<
int
>
&
recv_extension_ids
)
;
void
ResetParams
(
)
;
void
EnableExternalAuth
(
)
;
bool
IsExternalAuthEnabled
(
)
const
;
bool
IsExternalAuthActive
(
)
const
;
bool
GetSrtpOverhead
(
int
*
srtp_overhead
)
const
;
bool
GetRtpAuthParams
(
uint8_t
*
*
key
int
*
key_len
int
*
tag_len
)
;
void
CacheRtpAbsSendTimeHeaderExtension
(
int
rtp_abs_sendtime_extn_id
)
{
rtp_abs_sendtime_extn_id_
=
rtp_abs_sendtime_extn_id
;
}
bool
UnregisterRtpDemuxerSink
(
RtpPacketSinkInterface
*
sink
)
override
;
protected
:
void
MaybeUpdateWritableState
(
)
;
private
:
void
ConnectToRtpTransport
(
)
;
void
CreateSrtpSessions
(
)
;
void
OnRtpPacketReceived
(
const
rtc
:
:
ReceivedPacket
&
packet
)
override
;
void
OnRtcpPacketReceived
(
const
rtc
:
:
ReceivedPacket
&
packet
)
override
;
void
OnNetworkRouteChanged
(
std
:
:
optional
<
NetworkRoute
>
network_route
)
override
;
void
OnWritableState
(
rtc
:
:
PacketTransportInternal
*
packet_transport
)
override
;
bool
ProtectRtp
(
rtc
:
:
CopyOnWriteBuffer
&
buffer
)
;
bool
ProtectRtp
(
rtc
:
:
CopyOnWriteBuffer
&
buffer
int64_t
*
index
)
;
bool
ProtectRtcp
(
rtc
:
:
CopyOnWriteBuffer
&
buffer
)
;
bool
UnprotectRtp
(
rtc
:
:
CopyOnWriteBuffer
&
buffer
)
;
bool
UnprotectRtcp
(
rtc
:
:
CopyOnWriteBuffer
&
buffer
)
;
const
std
:
:
string
content_name_
;
std
:
:
unique_ptr
<
cricket
:
:
SrtpSession
>
send_session_
;
std
:
:
unique_ptr
<
cricket
:
:
SrtpSession
>
recv_session_
;
std
:
:
unique_ptr
<
cricket
:
:
SrtpSession
>
send_rtcp_session_
;
std
:
:
unique_ptr
<
cricket
:
:
SrtpSession
>
recv_rtcp_session_
;
std
:
:
optional
<
int
>
send_crypto_suite_
;
std
:
:
optional
<
int
>
recv_crypto_suite_
;
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
send_key_
;
rtc
:
:
ZeroOnFreeBuffer
<
uint8_t
>
recv_key_
;
bool
writable_
=
false
;
bool
external_auth_enabled_
=
false
;
int
rtp_abs_sendtime_extn_id_
=
-
1
;
int
decryption_failure_count_
=
0
;
const
FieldTrialsView
&
field_trials_
;
}
;
}
#
endif
