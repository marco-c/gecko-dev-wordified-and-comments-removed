#
ifndef
EXAMPLES_PEERCONNECTION_CLIENT_LINUX_MAIN_WND_H_
#
define
EXAMPLES_PEERCONNECTION_CLIENT_LINUX_MAIN_WND_H_
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
examples
/
peerconnection
/
client
/
main_wnd
.
h
"
#
include
"
examples
/
peerconnection
/
client
/
peer_connection_client
.
h
"
typedef
struct
_GtkWidget
GtkWidget
;
typedef
union
_GdkEvent
GdkEvent
;
typedef
struct
_GdkEventKey
GdkEventKey
;
typedef
struct
_GtkTreeView
GtkTreeView
;
typedef
struct
_GtkTreePath
GtkTreePath
;
typedef
struct
_GtkTreeViewColumn
GtkTreeViewColumn
;
typedef
struct
_cairo
cairo_t
;
class
GtkMainWnd
:
public
MainWindow
{
public
:
GtkMainWnd
(
const
char
*
server
int
port
bool
autoconnect
bool
autocall
)
;
~
GtkMainWnd
(
)
;
virtual
void
RegisterObserver
(
MainWndCallback
*
callback
)
;
virtual
bool
IsWindow
(
)
;
virtual
void
SwitchToConnectUI
(
)
;
virtual
void
SwitchToPeerList
(
const
Peers
&
peers
)
;
virtual
void
SwitchToStreamingUI
(
)
;
virtual
void
MessageBox
(
const
char
*
caption
const
char
*
text
bool
is_error
)
;
virtual
MainWindow
:
:
UI
current_ui
(
)
;
virtual
void
StartLocalRenderer
(
webrtc
:
:
VideoTrackInterface
*
local_video
)
;
virtual
void
StopLocalRenderer
(
)
;
virtual
void
StartRemoteRenderer
(
webrtc
:
:
VideoTrackInterface
*
remote_video
)
;
virtual
void
StopRemoteRenderer
(
)
;
virtual
void
QueueUIThreadCallback
(
int
msg_id
void
*
data
)
;
bool
Create
(
)
;
bool
Destroy
(
)
;
void
OnDestroyed
(
GtkWidget
*
widget
GdkEvent
*
event
)
;
void
OnClicked
(
GtkWidget
*
widget
)
;
void
OnKeyPress
(
GtkWidget
*
widget
GdkEventKey
*
key
)
;
void
OnRowActivated
(
GtkTreeView
*
tree_view
GtkTreePath
*
path
GtkTreeViewColumn
*
column
)
;
void
OnRedraw
(
)
;
void
Draw
(
GtkWidget
*
widget
cairo_t
*
cr
)
;
protected
:
class
VideoRenderer
:
public
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
{
public
:
VideoRenderer
(
GtkMainWnd
*
main_wnd
webrtc
:
:
VideoTrackInterface
*
track_to_render
)
;
virtual
~
VideoRenderer
(
)
;
void
OnFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
override
;
const
uint8_t
*
image
(
)
const
{
return
image_
.
get
(
)
;
}
int
width
(
)
const
{
return
width_
;
}
int
height
(
)
const
{
return
height_
;
}
protected
:
void
SetSize
(
int
width
int
height
)
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
image_
;
int
width_
;
int
height_
;
GtkMainWnd
*
main_wnd_
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoTrackInterface
>
rendered_track_
;
}
;
protected
:
GtkWidget
*
window_
;
GtkWidget
*
draw_area_
;
GtkWidget
*
vbox_
;
GtkWidget
*
server_edit_
;
GtkWidget
*
port_edit_
;
GtkWidget
*
peer_list_
;
MainWndCallback
*
callback_
;
std
:
:
string
server_
;
std
:
:
string
port_
;
bool
autoconnect_
;
bool
autocall_
;
std
:
:
unique_ptr
<
VideoRenderer
>
local_renderer_
;
std
:
:
unique_ptr
<
VideoRenderer
>
remote_renderer_
;
int
width_
;
int
height_
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
draw_buffer_
;
int
draw_buffer_size_
;
}
;
#
endif
