#
include
<
glib
.
h
>
#
include
<
gtk
/
gtk
.
h
>
#
include
<
stdio
.
h
>
#
include
"
absl
/
flags
/
parse
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
examples
/
peerconnection
/
client
/
conductor
.
h
"
#
include
"
examples
/
peerconnection
/
client
/
flag_defs
.
h
"
#
include
"
examples
/
peerconnection
/
client
/
linux
/
main_wnd
.
h
"
#
include
"
examples
/
peerconnection
/
client
/
peer_connection_client
.
h
"
#
include
"
rtc_base
/
physical_socket_server
.
h
"
#
include
"
rtc_base
/
ssl_adapter
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
system_wrappers
/
include
/
field_trial
.
h
"
#
include
"
test
/
field_trial
.
h
"
class
CustomSocketServer
:
public
webrtc
:
:
PhysicalSocketServer
{
public
:
explicit
CustomSocketServer
(
GtkMainWnd
*
wnd
)
:
wnd_
(
wnd
)
conductor_
(
nullptr
)
client_
(
nullptr
)
{
}
virtual
~
CustomSocketServer
(
)
{
}
void
SetMessageQueue
(
webrtc
:
:
Thread
*
queue
)
override
{
message_queue_
=
queue
;
}
void
set_client
(
PeerConnectionClient
*
client
)
{
client_
=
client
;
}
void
set_conductor
(
Conductor
*
conductor
)
{
conductor_
=
conductor
;
}
bool
Wait
(
webrtc
:
:
TimeDelta
max_wait_duration
bool
process_io
)
override
{
while
(
gtk_events_pending
(
)
)
gtk_main_iteration
(
)
;
if
(
!
wnd_
-
>
IsWindow
(
)
&
&
!
conductor_
-
>
connection_active
(
)
&
&
client_
!
=
nullptr
&
&
!
client_
-
>
is_connected
(
)
)
{
message_queue_
-
>
Quit
(
)
;
}
return
webrtc
:
:
PhysicalSocketServer
:
:
Wait
(
webrtc
:
:
TimeDelta
:
:
Zero
(
)
process_io
)
;
}
protected
:
webrtc
:
:
Thread
*
message_queue_
;
GtkMainWnd
*
wnd_
;
Conductor
*
conductor_
;
PeerConnectionClient
*
client_
;
}
;
int
main
(
int
argc
char
*
argv
[
]
)
{
gtk_init
(
&
argc
&
argv
)
;
#
if
!
GLIB_CHECK_VERSION
(
2
35
0
)
g_type_init
(
)
;
#
endif
#
if
!
GLIB_CHECK_VERSION
(
2
31
0
)
g_thread_init
(
NULL
)
;
#
endif
absl
:
:
ParseCommandLine
(
argc
argv
)
;
const
std
:
:
string
forced_field_trials
=
absl
:
:
GetFlag
(
FLAGS_force_fieldtrials
)
;
webrtc
:
:
field_trial
:
:
InitFieldTrialsFromString
(
forced_field_trials
.
c_str
(
)
)
;
if
(
(
absl
:
:
GetFlag
(
FLAGS_port
)
<
1
)
|
|
(
absl
:
:
GetFlag
(
FLAGS_port
)
>
65535
)
)
{
printf
(
"
Error
:
%
i
is
not
a
valid
port
.
\
n
"
absl
:
:
GetFlag
(
FLAGS_port
)
)
;
return
-
1
;
}
const
std
:
:
string
server
=
absl
:
:
GetFlag
(
FLAGS_server
)
;
GtkMainWnd
wnd
(
server
.
c_str
(
)
absl
:
:
GetFlag
(
FLAGS_port
)
absl
:
:
GetFlag
(
FLAGS_autoconnect
)
absl
:
:
GetFlag
(
FLAGS_autocall
)
)
;
wnd
.
Create
(
)
;
CustomSocketServer
socket_server
(
&
wnd
)
;
webrtc
:
:
AutoSocketServerThread
thread
(
&
socket_server
)
;
webrtc
:
:
InitializeSSL
(
)
;
PeerConnectionClient
client
;
auto
conductor
=
webrtc
:
:
make_ref_counted
<
Conductor
>
(
&
client
&
wnd
)
;
socket_server
.
set_client
(
&
client
)
;
socket_server
.
set_conductor
(
conductor
.
get
(
)
)
;
thread
.
Run
(
)
;
wnd
.
Destroy
(
)
;
webrtc
:
:
CleanupSSL
(
)
;
return
0
;
}
