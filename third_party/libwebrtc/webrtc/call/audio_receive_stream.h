#
ifndef
CALL_AUDIO_RECEIVE_STREAM_H_
#
define
CALL_AUDIO_RECEIVE_STREAM_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
audio_codecs
/
audio_decoder_factory
.
h
"
#
include
"
api
/
call
/
transport
.
h
"
#
include
"
api
/
optional
.
h
"
#
include
"
api
/
rtpparameters
.
h
"
#
include
"
api
/
rtpreceiverinterface
.
h
"
#
include
"
call
/
rtp_config
.
h
"
#
include
"
common_types
.
h
"
#
include
"
rtc_base
/
scoped_ref_ptr
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
AudioSinkInterface
;
class
AudioReceiveStream
{
public
:
struct
Stats
{
uint32_t
remote_ssrc
=
0
;
int64_t
bytes_rcvd
=
0
;
uint32_t
packets_rcvd
=
0
;
uint32_t
packets_lost
=
0
;
float
fraction_lost
=
0
.
0f
;
std
:
:
string
codec_name
;
rtc
:
:
Optional
<
int
>
codec_payload_type
;
uint32_t
ext_seqnum
=
0
;
uint32_t
jitter_ms
=
0
;
uint32_t
jitter_buffer_ms
=
0
;
uint32_t
jitter_buffer_preferred_ms
=
0
;
uint32_t
delay_estimate_ms
=
0
;
int32_t
audio_level
=
-
1
;
double
total_output_energy
=
0
.
0
;
uint64_t
total_samples_received
=
0
;
double
total_output_duration
=
0
.
0
;
uint64_t
concealed_samples
=
0
;
uint64_t
concealment_events
=
0
;
double
jitter_buffer_delay_seconds
=
0
.
0
;
float
expand_rate
=
0
.
0f
;
float
speech_expand_rate
=
0
.
0f
;
float
secondary_decoded_rate
=
0
.
0f
;
float
secondary_discarded_rate
=
0
.
0f
;
float
accelerate_rate
=
0
.
0f
;
float
preemptive_expand_rate
=
0
.
0f
;
int32_t
decoding_calls_to_silence_generator
=
0
;
int32_t
decoding_calls_to_neteq
=
0
;
int32_t
decoding_normal
=
0
;
int32_t
decoding_plc
=
0
;
int32_t
decoding_cng
=
0
;
int32_t
decoding_plc_cng
=
0
;
int32_t
decoding_muted_output
=
0
;
int64_t
capture_start_ntp_time_ms
=
0
;
}
;
struct
Config
{
std
:
:
string
ToString
(
)
const
;
struct
Rtp
{
std
:
:
string
ToString
(
)
const
;
uint32_t
remote_ssrc
=
0
;
uint32_t
local_ssrc
=
0
;
bool
transport_cc
=
false
;
NackConfig
nack
;
std
:
:
vector
<
RtpExtension
>
extensions
;
}
rtp
;
Transport
*
rtcp_send_transport
=
nullptr
;
int
voe_channel_id
=
-
1
;
std
:
:
string
sync_group
;
std
:
:
map
<
int
SdpAudioFormat
>
decoder_map
;
rtc
:
:
scoped_refptr
<
AudioDecoderFactory
>
decoder_factory
;
}
;
virtual
void
Start
(
)
=
0
;
virtual
void
Stop
(
)
=
0
;
virtual
Stats
GetStats
(
)
const
=
0
;
virtual
int
GetOutputLevel
(
)
const
=
0
;
virtual
void
SetSink
(
std
:
:
unique_ptr
<
AudioSinkInterface
>
sink
)
=
0
;
virtual
void
SetGain
(
float
gain
)
=
0
;
virtual
std
:
:
vector
<
RtpSource
>
GetSources
(
)
const
=
0
;
protected
:
virtual
~
AudioReceiveStream
(
)
{
}
}
;
}
#
endif
