#
ifndef
MODULES_BITRATE_CONTROLLER_INCLUDE_BITRATE_CONTROLLER_H_
#
define
MODULES_BITRATE_CONTROLLER_INCLUDE_BITRATE_CONTROLLER_H_
#
include
<
map
>
#
include
"
modules
/
congestion_controller
/
delay_based_bwe
.
h
"
#
include
"
modules
/
include
/
module
.
h
"
#
include
"
modules
/
pacing
/
paced_sender
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
namespace
webrtc
{
class
RtcEventLog
;
class
BitrateObserver
{
public
:
virtual
void
OnNetworkChanged
(
uint32_t
bitrate_bps
uint8_t
fraction_loss
int64_t
rtt_ms
)
=
0
;
virtual
void
OnNetworkChanged
(
uint32_t
bitrate_for_encoder_bps
uint32_t
bitrate_for_pacer_bps
bool
in_probe_rtt
int64_t
target_set_time
uint64_t
congestion_window
)
{
}
virtual
void
OnBytesAcked
(
size_t
bytes
)
{
}
virtual
size_t
pacer_queue_size_in_bytes
(
)
{
return
0
;
}
virtual
~
BitrateObserver
(
)
{
}
}
;
class
BitrateController
:
public
Module
public
RtcpBandwidthObserver
{
public
:
static
const
int
kDefaultStartBitratebps
=
300000
;
static
BitrateController
*
CreateBitrateController
(
const
Clock
*
clock
BitrateObserver
*
observer
RtcEventLog
*
event_log
)
;
static
BitrateController
*
CreateBitrateController
(
const
Clock
*
clock
RtcEventLog
*
event_log
)
;
virtual
~
BitrateController
(
)
{
}
RTC_DEPRECATED
virtual
RtcpBandwidthObserver
*
CreateRtcpBandwidthObserver
(
)
=
0
;
virtual
void
SetStartBitrate
(
int
start_bitrate_bps
)
=
0
;
virtual
void
SetMinMaxBitrate
(
int
min_bitrate_bps
int
max_bitrate_bps
)
=
0
;
virtual
void
SetBitrates
(
int
start_bitrate_bps
int
min_bitrate_bps
int
max_bitrate_bps
)
=
0
;
virtual
void
ResetBitrates
(
int
bitrate_bps
int
min_bitrate_bps
int
max_bitrate_bps
)
=
0
;
virtual
void
OnDelayBasedBweResult
(
const
DelayBasedBwe
:
:
Result
&
result
)
=
0
;
virtual
bool
AvailableBandwidth
(
uint32_t
*
bandwidth
)
const
=
0
;
virtual
void
SetReservedBitrate
(
uint32_t
reserved_bitrate_bps
)
=
0
;
virtual
bool
GetNetworkParameters
(
uint32_t
*
bitrate
uint8_t
*
fraction_loss
int64_t
*
rtt
)
=
0
;
}
;
}
#
endif
