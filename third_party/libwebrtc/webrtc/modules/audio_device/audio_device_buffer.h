#
ifndef
MODULES_AUDIO_DEVICE_AUDIO_DEVICE_BUFFER_H_
#
define
MODULES_AUDIO_DEVICE_AUDIO_DEVICE_BUFFER_H_
#
include
"
modules
/
audio_device
/
include
/
audio_device
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
rtc_base
/
task_queue
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
rtc_base
/
thread_checker
.
h
"
#
include
"
system_wrappers
/
include
/
file_wrapper
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
const
size_t
kMaxDeltaTimeInMs
=
500
;
const
size_t
kMaxBufferSizeBytes
=
3840
;
class
AudioDeviceBuffer
{
public
:
enum
LogState
{
LOG_START
=
0
LOG_STOP
LOG_ACTIVE
}
;
struct
Stats
{
void
ResetRecStats
(
)
{
rec_callbacks
=
0
;
rec_samples
=
0
;
max_rec_level
=
0
;
}
void
ResetPlayStats
(
)
{
play_callbacks
=
0
;
play_samples
=
0
;
max_play_level
=
0
;
}
uint64_t
rec_callbacks
=
0
;
uint64_t
play_callbacks
=
0
;
uint64_t
rec_samples
=
0
;
uint64_t
play_samples
=
0
;
int16_t
max_rec_level
=
0
;
int16_t
max_play_level
=
0
;
}
;
AudioDeviceBuffer
(
)
;
virtual
~
AudioDeviceBuffer
(
)
;
int32_t
RegisterAudioCallback
(
AudioTransport
*
audio_callback
)
;
void
StartPlayout
(
)
;
void
StartRecording
(
)
;
void
StopPlayout
(
)
;
void
StopRecording
(
)
;
int32_t
SetRecordingSampleRate
(
uint32_t
fsHz
)
;
int32_t
SetPlayoutSampleRate
(
uint32_t
fsHz
)
;
int32_t
RecordingSampleRate
(
)
const
;
int32_t
PlayoutSampleRate
(
)
const
;
int32_t
SetRecordingChannels
(
size_t
channels
)
;
int32_t
SetPlayoutChannels
(
size_t
channels
)
;
size_t
RecordingChannels
(
)
const
;
size_t
PlayoutChannels
(
)
const
;
virtual
int32_t
SetRecordedBuffer
(
const
void
*
audio_buffer
size_t
samples_per_channel
)
;
int32_t
SetCurrentMicLevel
(
uint32_t
level
)
;
virtual
void
SetVQEData
(
int
play_delay_ms
int
rec_delay_ms
int
clock_drift
)
;
virtual
int32_t
DeliverRecordedData
(
)
;
uint32_t
NewMicLevel
(
)
const
;
virtual
int32_t
RequestPlayoutData
(
size_t
samples_per_channel
)
;
virtual
int32_t
GetPlayoutData
(
void
*
audio_buffer
)
;
int32_t
SetTypingStatus
(
bool
typing_status
)
;
void
NativeAudioInterrupted
(
)
;
private
:
void
StartPeriodicLogging
(
)
;
void
StopPeriodicLogging
(
)
;
void
LogStats
(
LogState
state
)
;
void
UpdateRecStats
(
int16_t
max_abs
size_t
samples_per_channel
)
;
void
UpdatePlayStats
(
int16_t
max_abs
size_t
samples_per_channel
)
;
void
ResetRecStats
(
)
;
void
ResetPlayStats
(
)
;
rtc
:
:
ThreadChecker
main_thread_checker_
;
rtc
:
:
ThreadChecker
playout_thread_checker_
;
rtc
:
:
ThreadChecker
recording_thread_checker_
;
rtc
:
:
CriticalSection
lock_
;
rtc
:
:
TaskQueue
task_queue_
;
AudioTransport
*
audio_transport_cb_
;
uint32_t
rec_sample_rate_
;
uint32_t
play_sample_rate_
;
size_t
rec_channels_
;
size_t
play_channels_
;
bool
playing_
RTC_ACCESS_ON
(
main_thread_checker_
)
;
bool
recording_
RTC_ACCESS_ON
(
main_thread_checker_
)
;
rtc
:
:
BufferT
<
int16_t
>
play_buffer_
RTC_ACCESS_ON
(
playout_thread_checker_
)
;
rtc
:
:
BufferT
<
int16_t
>
rec_buffer_
RTC_ACCESS_ON
(
recording_thread_checker_
)
;
#
if
!
defined
(
WEBRTC_WIN
)
uint32_t
current_mic_level_
RTC_ACCESS_ON
(
recording_thread_checker_
)
;
#
else
uint32_t
current_mic_level_
;
#
endif
uint32_t
new_mic_level_
RTC_ACCESS_ON
(
recording_thread_checker_
)
;
bool
typing_status_
RTC_ACCESS_ON
(
recording_thread_checker_
)
;
int
play_delay_ms_
RTC_ACCESS_ON
(
recording_thread_checker_
)
;
int
rec_delay_ms_
RTC_ACCESS_ON
(
recording_thread_checker_
)
;
int
clock_drift_
RTC_ACCESS_ON
(
recording_thread_checker_
)
;
size_t
num_stat_reports_
RTC_ACCESS_ON
(
task_queue_
)
;
int64_t
last_timer_task_time_
RTC_ACCESS_ON
(
task_queue_
)
;
int16_t
rec_stat_count_
RTC_ACCESS_ON
(
recording_thread_checker_
)
;
int16_t
play_stat_count_
RTC_ACCESS_ON
(
playout_thread_checker_
)
;
int64_t
play_start_time_
RTC_ACCESS_ON
(
main_thread_checker_
)
;
int64_t
rec_start_time_
RTC_ACCESS_ON
(
main_thread_checker_
)
;
Stats
stats_
RTC_GUARDED_BY
(
lock_
)
;
Stats
last_stats_
RTC_ACCESS_ON
(
task_queue_
)
;
bool
only_silence_recorded_
;
bool
log_stats_
RTC_ACCESS_ON
(
task_queue_
)
;
#
ifdef
AUDIO_DEVICE_PLAYS_SINUS_TONE
double
phase_
RTC_ACCESS_ON
(
playout_thread_checker_
)
;
#
endif
}
;
}
#
endif
