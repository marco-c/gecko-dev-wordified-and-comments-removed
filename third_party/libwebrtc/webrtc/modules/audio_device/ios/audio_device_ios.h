#
ifndef
MODULES_AUDIO_DEVICE_IOS_AUDIO_DEVICE_IOS_H_
#
define
MODULES_AUDIO_DEVICE_IOS_AUDIO_DEVICE_IOS_H_
#
include
<
memory
>
#
include
"
sdk
/
objc
/
Framework
/
Headers
/
WebRTC
/
RTCMacros
.
h
"
#
include
"
modules
/
audio_device
/
audio_device_generic
.
h
"
#
include
"
modules
/
audio_device
/
ios
/
audio_session_observer
.
h
"
#
include
"
modules
/
audio_device
/
ios
/
voice_processing_audio_unit
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
gtest_prod_util
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
rtc_base
/
thread_checker
.
h
"
RTC_FWD_DECL_OBJC_CLASS
(
RTCAudioSessionDelegateAdapter
)
;
namespace
webrtc
{
class
FineAudioBuffer
;
class
AudioDeviceIOS
:
public
AudioDeviceGeneric
public
AudioSessionObserver
public
VoiceProcessingAudioUnitObserver
public
rtc
:
:
MessageHandler
{
public
:
AudioDeviceIOS
(
)
;
~
AudioDeviceIOS
(
)
;
void
AttachAudioBuffer
(
AudioDeviceBuffer
*
audioBuffer
)
override
;
InitStatus
Init
(
)
override
;
int32_t
Terminate
(
)
override
;
bool
Initialized
(
)
const
override
;
int32_t
InitPlayout
(
)
override
;
bool
PlayoutIsInitialized
(
)
const
override
;
int32_t
InitRecording
(
)
override
;
bool
RecordingIsInitialized
(
)
const
override
;
int32_t
StartPlayout
(
)
override
;
int32_t
StopPlayout
(
)
override
;
bool
Playing
(
)
const
override
{
return
playing_
;
}
int32_t
StartRecording
(
)
override
;
int32_t
StopRecording
(
)
override
;
bool
Recording
(
)
const
override
{
return
recording_
;
}
int32_t
PlayoutDelay
(
uint16_t
&
delayMS
)
const
override
;
int
GetPlayoutAudioParameters
(
AudioParameters
*
params
)
const
override
;
int
GetRecordAudioParameters
(
AudioParameters
*
params
)
const
override
;
int32_t
ActiveAudioLayer
(
AudioDeviceModule
:
:
AudioLayer
&
audioLayer
)
const
override
;
int32_t
PlayoutIsAvailable
(
bool
&
available
)
override
;
int32_t
RecordingIsAvailable
(
bool
&
available
)
override
;
int32_t
SetAGC
(
bool
enable
)
override
;
bool
AGC
(
)
const
override
;
int16_t
PlayoutDevices
(
)
override
;
int16_t
RecordingDevices
(
)
override
;
int32_t
PlayoutDeviceName
(
uint16_t
index
char
name
[
kAdmMaxDeviceNameSize
]
char
guid
[
kAdmMaxGuidSize
]
)
override
;
int32_t
RecordingDeviceName
(
uint16_t
index
char
name
[
kAdmMaxDeviceNameSize
]
char
guid
[
kAdmMaxGuidSize
]
)
override
;
int32_t
SetPlayoutDevice
(
uint16_t
index
)
override
;
int32_t
SetPlayoutDevice
(
AudioDeviceModule
:
:
WindowsDeviceType
device
)
override
;
int32_t
SetRecordingDevice
(
uint16_t
index
)
override
;
int32_t
SetRecordingDevice
(
AudioDeviceModule
:
:
WindowsDeviceType
device
)
override
;
int32_t
InitSpeaker
(
)
override
;
bool
SpeakerIsInitialized
(
)
const
override
;
int32_t
InitMicrophone
(
)
override
;
bool
MicrophoneIsInitialized
(
)
const
override
;
int32_t
SpeakerVolumeIsAvailable
(
bool
&
available
)
override
;
int32_t
SetSpeakerVolume
(
uint32_t
volume
)
override
;
int32_t
SpeakerVolume
(
uint32_t
&
volume
)
const
override
;
int32_t
MaxSpeakerVolume
(
uint32_t
&
maxVolume
)
const
override
;
int32_t
MinSpeakerVolume
(
uint32_t
&
minVolume
)
const
override
;
int32_t
MicrophoneVolumeIsAvailable
(
bool
&
available
)
override
;
int32_t
SetMicrophoneVolume
(
uint32_t
volume
)
override
;
int32_t
MicrophoneVolume
(
uint32_t
&
volume
)
const
override
;
int32_t
MaxMicrophoneVolume
(
uint32_t
&
maxVolume
)
const
override
;
int32_t
MinMicrophoneVolume
(
uint32_t
&
minVolume
)
const
override
;
int32_t
MicrophoneMuteIsAvailable
(
bool
&
available
)
override
;
int32_t
SetMicrophoneMute
(
bool
enable
)
override
;
int32_t
MicrophoneMute
(
bool
&
enabled
)
const
override
;
int32_t
SpeakerMuteIsAvailable
(
bool
&
available
)
override
;
int32_t
SetSpeakerMute
(
bool
enable
)
override
;
int32_t
SpeakerMute
(
bool
&
enabled
)
const
override
;
int32_t
StereoPlayoutIsAvailable
(
bool
&
available
)
override
;
int32_t
SetStereoPlayout
(
bool
enable
)
override
;
int32_t
StereoPlayout
(
bool
&
enabled
)
const
override
;
int32_t
StereoRecordingIsAvailable
(
bool
&
available
)
override
;
int32_t
SetStereoRecording
(
bool
enable
)
override
;
int32_t
StereoRecording
(
bool
&
enabled
)
const
override
;
void
OnInterruptionBegin
(
)
override
;
void
OnInterruptionEnd
(
)
override
;
void
OnValidRouteChange
(
)
override
;
void
OnCanPlayOrRecordChange
(
bool
can_play_or_record
)
override
;
void
OnChangedOutputVolume
(
)
override
;
OSStatus
OnDeliverRecordedData
(
AudioUnitRenderActionFlags
*
flags
const
AudioTimeStamp
*
time_stamp
UInt32
bus_number
UInt32
num_frames
AudioBufferList
*
io_data
)
override
;
OSStatus
OnGetPlayoutData
(
AudioUnitRenderActionFlags
*
flags
const
AudioTimeStamp
*
time_stamp
UInt32
bus_number
UInt32
num_frames
AudioBufferList
*
io_data
)
override
;
void
OnMessage
(
rtc
:
:
Message
*
msg
)
override
;
private
:
void
HandleInterruptionBegin
(
)
;
void
HandleInterruptionEnd
(
)
;
void
HandleValidRouteChange
(
)
;
void
HandleCanPlayOrRecordChange
(
bool
can_play_or_record
)
;
void
HandleSampleRateChange
(
float
sample_rate
)
;
void
HandlePlayoutGlitchDetected
(
)
;
void
HandleOutputVolumeChange
(
)
;
void
UpdateAudioDeviceBuffer
(
)
;
void
SetupAudioBuffersForActiveAudioSession
(
)
;
bool
CreateAudioUnit
(
)
;
void
UpdateAudioUnit
(
bool
can_play_or_record
)
;
bool
ConfigureAudioSession
(
)
;
void
UnconfigureAudioSession
(
)
;
bool
InitPlayOrRecord
(
)
;
void
ShutdownPlayOrRecord
(
)
;
rtc
:
:
ThreadChecker
thread_checker_
;
rtc
:
:
ThreadChecker
io_thread_checker_
;
rtc
:
:
Thread
*
thread_
;
AudioDeviceBuffer
*
audio_device_buffer_
;
AudioParameters
playout_parameters_
;
AudioParameters
record_parameters_
;
std
:
:
unique_ptr
<
VoiceProcessingAudioUnit
>
audio_unit_
;
std
:
:
unique_ptr
<
FineAudioBuffer
>
fine_audio_buffer_
;
rtc
:
:
BufferT
<
int8_t
>
record_audio_buffer_
;
volatile
int
recording_
;
volatile
int
playing_
;
bool
initialized_
RTC_ACCESS_ON
(
thread_checker_
)
;
bool
audio_is_initialized_
;
bool
is_interrupted_
;
RTCAudioSessionDelegateAdapter
*
audio_session_observer_
RTC_ACCESS_ON
(
thread_checker_
)
;
bool
has_configured_session_
RTC_ACCESS_ON
(
thread_checker_
)
;
int64_t
num_detected_playout_glitches_
RTC_ACCESS_ON
(
thread_checker_
)
;
int64_t
last_playout_time_
RTC_ACCESS_ON
(
io_thread_checker_
)
;
int64_t
num_playout_callbacks_
;
int64_t
last_output_volume_change_time_
RTC_ACCESS_ON
(
thread_checker_
)
;
FRIEND_TEST_ALL_PREFIXES
(
AudioDeviceTest
testInterruptedAudioSession
)
;
}
;
}
#
endif
