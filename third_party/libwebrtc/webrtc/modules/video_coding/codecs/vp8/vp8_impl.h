#
ifndef
MODULES_VIDEO_CODING_CODECS_VP8_VP8_IMPL_H_
#
define
MODULES_VIDEO_CODING_CODECS_VP8_VP8_IMPL_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
vpx
/
vp8cx
.
h
"
#
include
"
vpx
/
vp8dx
.
h
"
#
include
"
vpx
/
vpx_decoder
.
h
"
#
include
"
vpx
/
vpx_encoder
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
common_video
/
include
/
i420_buffer_pool
.
h
"
#
include
"
common_video
/
include
/
video_frame
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
vp8
/
include
/
vp8
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
vp8
/
temporal_layers
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
#
include
"
modules
/
video_coding
/
utility
/
quality_scaler
.
h
"
namespace
webrtc
{
class
TemporalLayers
;
class
VP8EncoderImpl
:
public
VP8Encoder
{
public
:
VP8EncoderImpl
(
)
;
virtual
~
VP8EncoderImpl
(
)
;
int
Release
(
)
override
;
int
InitEncode
(
const
VideoCodec
*
codec_settings
int
number_of_cores
size_t
max_payload_size
)
override
;
int
Encode
(
const
VideoFrame
&
input_image
const
CodecSpecificInfo
*
codec_specific_info
const
std
:
:
vector
<
FrameType
>
*
frame_types
)
override
;
int
RegisterEncodeCompleteCallback
(
EncodedImageCallback
*
callback
)
override
;
int
SetChannelParameters
(
uint32_t
packet_loss
int64_t
rtt
)
override
;
int
SetRateAllocation
(
const
BitrateAllocation
&
bitrate
uint32_t
new_framerate
)
override
;
ScalingSettings
GetScalingSettings
(
)
const
override
;
const
char
*
ImplementationName
(
)
const
override
;
static
vpx_enc_frame_flags_t
EncodeFlags
(
const
TemporalLayers
:
:
FrameConfig
&
references
)
;
private
:
void
SetupTemporalLayers
(
int
num_streams
int
num_temporal_layers
const
VideoCodec
&
codec
)
;
int
SetCpuSpeed
(
int
width
int
height
)
;
int
NumberOfThreads
(
int
width
int
height
int
number_of_cores
)
;
int
InitAndSetControlSettings
(
)
;
void
PopulateCodecSpecific
(
CodecSpecificInfo
*
codec_specific
const
TemporalLayers
:
:
FrameConfig
&
tl_config
const
vpx_codec_cx_pkt
&
pkt
int
stream_idx
uint32_t
timestamp
)
;
int
GetEncodedPartitions
(
const
TemporalLayers
:
:
FrameConfig
tl_configs
[
]
const
VideoFrame
&
input_image
)
;
void
SetStreamState
(
bool
send_stream
int
stream_idx
)
;
uint32_t
MaxIntraTarget
(
uint32_t
optimal_buffer_size
)
;
const
bool
use_gf_boost_
;
EncodedImageCallback
*
encoded_complete_callback_
;
VideoCodec
codec_
;
bool
inited_
;
int64_t
timestamp_
;
int
qp_max_
;
int
cpu_speed_default_
;
int
number_of_cores_
;
uint32_t
rc_max_intra_target_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
TemporalLayers
>
>
temporal_layers_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
TemporalLayersChecker
>
>
temporal_layers_checkers_
;
std
:
:
vector
<
uint16_t
>
picture_id_
;
std
:
:
vector
<
uint8_t
>
tl0_pic_idx_
;
std
:
:
vector
<
bool
>
key_frame_request_
;
std
:
:
vector
<
bool
>
send_stream_
;
std
:
:
vector
<
int
>
cpu_speed_
;
std
:
:
vector
<
vpx_image_t
>
raw_images_
;
std
:
:
vector
<
EncodedImage
>
encoded_images_
;
std
:
:
vector
<
vpx_codec_ctx_t
>
encoders_
;
std
:
:
vector
<
vpx_codec_enc_cfg_t
>
configurations_
;
std
:
:
vector
<
vpx_rational_t
>
downsampling_factors_
;
}
;
class
VP8DecoderImpl
:
public
VP8Decoder
{
public
:
VP8DecoderImpl
(
)
;
virtual
~
VP8DecoderImpl
(
)
;
int
InitDecode
(
const
VideoCodec
*
inst
int
number_of_cores
)
override
;
int
Decode
(
const
EncodedImage
&
input_image
bool
missing_frames
const
RTPFragmentationHeader
*
fragmentation
const
CodecSpecificInfo
*
codec_specific_info
int64_t
)
override
;
int
RegisterDecodeCompleteCallback
(
DecodedImageCallback
*
callback
)
override
;
int
Release
(
)
override
;
const
char
*
ImplementationName
(
)
const
override
;
struct
DeblockParams
{
int
max_level
=
6
;
int
degrade_qp
=
1
;
int
min_qp
=
0
;
}
;
private
:
class
QpSmoother
;
int
ReturnFrame
(
const
vpx_image_t
*
img
uint32_t
timeStamp
int64_t
ntp_time_ms
int
qp
)
;
const
bool
use_postproc_arm_
;
I420BufferPool
buffer_pool_
;
DecodedImageCallback
*
decode_complete_callback_
;
bool
inited_
;
vpx_codec_ctx_t
*
decoder_
;
int
propagation_cnt_
;
int
last_frame_width_
;
int
last_frame_height_
;
bool
key_frame_required_
;
DeblockParams
deblock_
;
const
std
:
:
unique_ptr
<
QpSmoother
>
qp_smoother_
;
}
;
}
#
endif
