#
ifndef
MODULES_VIDEO_CODING_CODECS_VP8_TEMPORAL_LAYERS_H_
#
define
MODULES_VIDEO_CODING_CODECS_VP8_TEMPORAL_LAYERS_H_
#
include
<
vector
>
#
include
<
memory
>
#
include
"
typedefs
.
h
"
struct
vpx_codec_enc_cfg
;
typedef
struct
vpx_codec_enc_cfg
vpx_codec_enc_cfg_t
;
namespace
webrtc
{
struct
CodecSpecificInfoVP8
;
class
TemporalLayers
{
public
:
enum
BufferFlags
{
kNone
=
0
kReference
=
1
kUpdate
=
2
kReferenceAndUpdate
=
kReference
|
kUpdate
}
;
enum
FreezeEntropy
{
kFreezeEntropy
}
;
struct
FrameConfig
{
FrameConfig
(
)
;
FrameConfig
(
BufferFlags
last
BufferFlags
golden
BufferFlags
arf
)
;
FrameConfig
(
BufferFlags
last
BufferFlags
golden
BufferFlags
arf
FreezeEntropy
)
;
bool
drop_frame
;
BufferFlags
last_buffer_flags
;
BufferFlags
golden_buffer_flags
;
BufferFlags
arf_buffer_flags
;
int
encoder_layer_id
;
int
packetizer_temporal_idx
;
bool
layer_sync
;
bool
freeze_entropy
;
bool
operator
=
=
(
const
FrameConfig
&
o
)
const
{
return
drop_frame
=
=
o
.
drop_frame
&
&
last_buffer_flags
=
=
o
.
last_buffer_flags
&
&
golden_buffer_flags
=
=
o
.
golden_buffer_flags
&
&
arf_buffer_flags
=
=
o
.
arf_buffer_flags
&
&
layer_sync
=
=
o
.
layer_sync
&
&
freeze_entropy
=
=
o
.
freeze_entropy
&
&
encoder_layer_id
=
=
o
.
encoder_layer_id
&
&
packetizer_temporal_idx
=
=
o
.
packetizer_temporal_idx
;
}
bool
operator
!
=
(
const
FrameConfig
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
private
:
FrameConfig
(
BufferFlags
last
BufferFlags
golden
BufferFlags
arf
bool
freeze_entropy
)
;
}
;
virtual
~
TemporalLayers
(
)
{
}
virtual
FrameConfig
UpdateLayerConfig
(
uint32_t
timestamp
)
=
0
;
virtual
std
:
:
vector
<
uint32_t
>
OnRatesUpdated
(
int
bitrate_kbps
int
max_bitrate_kbps
int
framerate
)
=
0
;
virtual
bool
UpdateConfiguration
(
vpx_codec_enc_cfg_t
*
cfg
)
=
0
;
virtual
void
PopulateCodecSpecific
(
bool
is_keyframe
const
TemporalLayers
:
:
FrameConfig
&
tl_config
CodecSpecificInfoVP8
*
vp8_info
uint32_t
timestamp
)
=
0
;
virtual
void
FrameEncoded
(
unsigned
int
size
int
qp
)
=
0
;
virtual
uint8_t
Tl0PicIdx
(
)
const
=
0
;
}
;
class
TemporalLayersListener
;
class
TemporalLayersChecker
;
class
TemporalLayersFactory
{
public
:
TemporalLayersFactory
(
)
:
listener_
(
nullptr
)
{
}
virtual
~
TemporalLayersFactory
(
)
{
}
virtual
TemporalLayers
*
Create
(
int
simulcast_id
int
temporal_layers
uint8_t
initial_tl0_pic_idx
)
const
;
virtual
std
:
:
unique_ptr
<
TemporalLayersChecker
>
CreateChecker
(
int
simulcast_id
int
temporal_layers
uint8_t
initial_tl0_pic_idx
)
const
;
void
SetListener
(
TemporalLayersListener
*
listener
)
;
protected
:
TemporalLayersListener
*
listener_
;
}
;
class
ScreenshareTemporalLayersFactory
:
public
webrtc
:
:
TemporalLayersFactory
{
public
:
ScreenshareTemporalLayersFactory
(
)
{
}
virtual
~
ScreenshareTemporalLayersFactory
(
)
{
}
webrtc
:
:
TemporalLayers
*
Create
(
int
simulcast_id
int
num_temporal_layers
uint8_t
initial_tl0_pic_idx
)
const
override
;
std
:
:
unique_ptr
<
webrtc
:
:
TemporalLayersChecker
>
CreateChecker
(
int
simulcast_id
int
temporal_layers
uint8_t
initial_tl0_pic_idx
)
const
override
;
}
;
class
TemporalLayersListener
{
public
:
TemporalLayersListener
(
)
{
}
virtual
~
TemporalLayersListener
(
)
{
}
virtual
void
OnTemporalLayersCreated
(
int
simulcast_id
TemporalLayers
*
layers
)
=
0
;
}
;
class
TemporalLayersChecker
{
public
:
TemporalLayersChecker
(
int
num_temporal_layers
uint8_t
initial_tl0_pic_idx
)
;
virtual
~
TemporalLayersChecker
(
)
{
}
virtual
bool
CheckTemporalConfig
(
bool
frame_is_keyframe
const
TemporalLayers
:
:
FrameConfig
&
frame_config
)
;
private
:
struct
BufferState
{
BufferState
(
)
:
is_keyframe
(
true
)
temporal_layer
(
0
)
sequence_number
(
0
)
{
}
bool
is_keyframe
;
uint8_t
temporal_layer
;
uint32_t
sequence_number
;
}
;
bool
CheckAndUpdateBufferState
(
BufferState
*
state
bool
*
need_sync
bool
frame_is_keyframe
uint8_t
temporal_layer
webrtc
:
:
TemporalLayers
:
:
BufferFlags
flags
uint32_t
sequence_number
uint32_t
*
lowest_sequence_referenced
)
;
BufferState
last_
;
BufferState
arf_
;
BufferState
golden_
;
int
num_temporal_layers_
;
uint32_t
sequence_number_
;
uint32_t
last_sync_sequence_number_
;
uint32_t
last_tl0_sequence_number_
;
}
;
}
#
endif
