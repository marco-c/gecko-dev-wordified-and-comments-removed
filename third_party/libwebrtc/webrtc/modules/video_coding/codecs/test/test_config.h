#
ifndef
MODULES_VIDEO_CODING_CODECS_TEST_TEST_CONFIG_H_
#
define
MODULES_VIDEO_CODING_CODECS_TEST_TEST_CONFIG_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
common_types
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
h264
/
include
/
h264_globals
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
test
/
packet_manipulator
.
h
"
namespace
webrtc
{
namespace
test
{
enum
ExcludeFrameTypes
{
kExcludeOnlyFirstKeyFrame
kExcludeAllKeyFrames
}
;
struct
TestConfig
{
class
EncodedFrameChecker
{
public
:
virtual
~
EncodedFrameChecker
(
)
=
default
;
virtual
void
CheckEncodedFrame
(
webrtc
:
:
VideoCodecType
codec
const
EncodedImage
&
encoded_frame
)
const
=
0
;
}
;
void
SetCodecSettings
(
VideoCodecType
codec_type
int
num_temporal_layers
bool
error_concealment_on
bool
denoising_on
bool
frame_dropper_on
bool
spatial_resize_on
bool
resilience_on
int
width
int
height
)
;
int
NumberOfCores
(
)
const
;
int
NumberOfTemporalLayers
(
)
const
;
int
TemporalLayerForFrame
(
int
frame_idx
)
const
;
std
:
:
vector
<
FrameType
>
FrameTypeForFrame
(
int
frame_idx
)
const
;
std
:
:
string
ToString
(
)
const
;
std
:
:
string
CodecName
(
)
const
;
std
:
:
string
FilenameWithParams
(
)
const
;
std
:
:
string
filename
;
std
:
:
string
input_filename
;
std
:
:
string
output_filename
;
int
num_frames
=
0
;
NetworkingConfig
networking_config
;
ExcludeFrameTypes
exclude_frame_types
=
kExcludeOnlyFirstKeyFrame
;
bool
use_single_core
=
false
;
bool
measure_cpu
=
false
;
int
keyframe_interval
=
0
;
webrtc
:
:
VideoCodec
codec_settings
;
struct
H264CodecSettings
{
H264
:
:
Profile
profile
=
H264
:
:
kProfileConstrainedBaseline
;
H264PacketizationMode
packetization_mode
=
webrtc
:
:
H264PacketizationMode
:
:
NonInterleaved
;
}
h264_codec_settings
;
bool
hw_encoder
=
false
;
bool
hw_decoder
=
false
;
bool
sw_fallback_encoder
=
false
;
bool
sw_fallback_decoder
=
false
;
const
EncodedFrameChecker
*
encoded_frame_checker
=
nullptr
;
}
;
}
}
#
endif
