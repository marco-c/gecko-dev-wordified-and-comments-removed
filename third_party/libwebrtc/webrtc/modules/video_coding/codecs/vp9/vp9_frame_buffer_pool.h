#
ifndef
MODULES_VIDEO_CODING_CODECS_VP9_VP9_FRAME_BUFFER_POOL_H_
#
define
MODULES_VIDEO_CODING_CODECS_VP9_VP9_FRAME_BUFFER_POOL_H_
#
include
<
vector
>
#
include
"
rtc_base
/
basictypes
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
rtc_base
/
refcount
.
h
"
#
include
"
rtc_base
/
scoped_ref_ptr
.
h
"
struct
vpx_codec_ctx
;
struct
vpx_codec_frame_buffer
;
namespace
webrtc
{
class
Vp9FrameBufferPool
{
public
:
class
Vp9FrameBuffer
:
public
rtc
:
:
RefCountInterface
{
public
:
uint8_t
*
GetData
(
)
;
size_t
GetDataSize
(
)
const
;
void
SetSize
(
size_t
size
)
;
virtual
bool
HasOneRef
(
)
const
=
0
;
private
:
rtc
:
:
Buffer
data_
;
}
;
bool
InitializeVpxUsePool
(
vpx_codec_ctx
*
vpx_codec_context
)
;
rtc
:
:
scoped_refptr
<
Vp9FrameBuffer
>
GetFrameBuffer
(
size_t
min_size
)
;
int
GetNumBuffersInUse
(
)
const
;
void
ClearPool
(
)
;
static
int32_t
VpxGetFrameBuffer
(
void
*
user_priv
size_t
min_size
vpx_codec_frame_buffer
*
fb
)
;
static
int32_t
VpxReleaseFrameBuffer
(
void
*
user_priv
vpx_codec_frame_buffer
*
fb
)
;
private
:
rtc
:
:
CriticalSection
buffers_lock_
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
Vp9FrameBuffer
>
>
allocated_buffers_
RTC_GUARDED_BY
(
buffers_lock_
)
;
static
const
size_t
max_num_buffers_
=
68
;
}
;
}
#
endif
