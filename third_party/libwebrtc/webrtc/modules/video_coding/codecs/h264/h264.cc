#
include
"
modules
/
video_coding
/
codecs
/
h264
/
include
/
h264
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
media
/
base
/
h264_profile_level_id
.
h
"
#
if
defined
(
WEBRTC_USE_H264
)
#
include
"
modules
/
video_coding
/
codecs
/
h264
/
h264_decoder_impl
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
h264
/
h264_encoder_impl
.
h
"
#
endif
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
ptr_util
.
h
"
namespace
webrtc
{
namespace
{
#
if
defined
(
WEBRTC_USE_H264
)
bool
g_rtc_use_h264
=
true
;
#
endif
bool
IsH264CodecSupported
(
)
{
#
if
defined
(
WEBRTC_USE_H264
)
return
g_rtc_use_h264
;
#
else
return
false
;
#
endif
}
SdpVideoFormat
CreateH264Format
(
H264
:
:
Profile
profile
H264
:
:
Level
level
)
{
const
rtc
:
:
Optional
<
std
:
:
string
>
profile_string
=
H264
:
:
ProfileLevelIdToString
(
H264
:
:
ProfileLevelId
(
profile
level
)
)
;
RTC_CHECK
(
profile_string
)
;
return
SdpVideoFormat
(
cricket
:
:
kH264CodecName
{
{
cricket
:
:
kH264FmtpProfileLevelId
*
profile_string
}
{
cricket
:
:
kH264FmtpLevelAsymmetryAllowed
"
1
"
}
{
cricket
:
:
kH264FmtpPacketizationMode
"
1
"
}
}
)
;
}
}
void
DisableRtcUseH264
(
)
{
#
if
defined
(
WEBRTC_USE_H264
)
g_rtc_use_h264
=
false
;
#
endif
}
std
:
:
vector
<
SdpVideoFormat
>
SupportedH264Codecs
(
)
{
if
(
!
IsH264CodecSupported
(
)
)
return
std
:
:
vector
<
SdpVideoFormat
>
(
)
;
return
{
CreateH264Format
(
H264
:
:
kProfileBaseline
H264
:
:
kLevel3_1
)
CreateH264Format
(
H264
:
:
kProfileConstrainedBaseline
H264
:
:
kLevel3_1
)
}
;
}
std
:
:
unique_ptr
<
H264Encoder
>
H264Encoder
:
:
Create
(
const
cricket
:
:
VideoCodec
&
codec
)
{
RTC_DCHECK
(
H264Encoder
:
:
IsSupported
(
)
)
;
#
if
defined
(
WEBRTC_USE_H264
)
RTC_CHECK
(
g_rtc_use_h264
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
Creating
H264EncoderImpl
.
"
;
return
rtc
:
:
MakeUnique
<
H264EncoderImpl
>
(
codec
)
;
#
else
RTC_NOTREACHED
(
)
;
return
nullptr
;
#
endif
}
bool
H264Encoder
:
:
IsSupported
(
)
{
return
IsH264CodecSupported
(
)
;
}
std
:
:
unique_ptr
<
H264Decoder
>
H264Decoder
:
:
Create
(
)
{
RTC_DCHECK
(
H264Decoder
:
:
IsSupported
(
)
)
;
#
if
defined
(
WEBRTC_USE_H264
)
RTC_CHECK
(
g_rtc_use_h264
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
Creating
H264DecoderImpl
.
"
;
return
rtc
:
:
MakeUnique
<
H264DecoderImpl
>
(
)
;
#
else
RTC_NOTREACHED
(
)
;
return
nullptr
;
#
endif
}
bool
H264Decoder
:
:
IsSupported
(
)
{
return
IsH264CodecSupported
(
)
;
}
}
