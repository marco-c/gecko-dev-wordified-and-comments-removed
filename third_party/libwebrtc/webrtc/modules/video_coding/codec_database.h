#
ifndef
MODULES_VIDEO_CODING_CODEC_DATABASE_H_
#
define
MODULES_VIDEO_CODING_CODEC_DATABASE_H_
#
include
<
map
>
#
include
<
memory
>
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_coding
.
h
"
#
include
"
modules
/
video_coding
/
generic_decoder
.
h
"
#
include
"
modules
/
video_coding
/
generic_encoder
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
struct
VCMDecoderMapItem
{
public
:
VCMDecoderMapItem
(
VideoCodec
*
settings
int
number_of_cores
bool
require_key_frame
)
;
std
:
:
unique_ptr
<
VideoCodec
>
settings
;
int
number_of_cores
;
bool
require_key_frame
;
}
;
struct
VCMExtDecoderMapItem
{
public
:
VCMExtDecoderMapItem
(
VideoDecoder
*
external_decoder_instance
uint8_t
payload_type
)
;
uint8_t
payload_type
;
VideoDecoder
*
external_decoder_instance
;
}
;
class
VCMCodecDataBase
{
public
:
explicit
VCMCodecDataBase
(
VCMEncodedFrameCallback
*
encoded_frame_callback
)
;
~
VCMCodecDataBase
(
)
;
bool
SetSendCodec
(
const
VideoCodec
*
send_codec
int
number_of_cores
size_t
max_payload_size
)
;
bool
SendCodec
(
VideoCodec
*
current_send_codec
)
const
;
VideoCodecType
SendCodec
(
)
const
;
void
RegisterExternalEncoder
(
VideoEncoder
*
external_encoder
uint8_t
payload_type
bool
internal_source
)
;
bool
DeregisterExternalEncoder
(
uint8_t
payload_type
bool
*
was_send_codec
)
;
VCMGenericEncoder
*
GetEncoder
(
)
;
bool
SetPeriodicKeyFrames
(
bool
enable
)
;
bool
DeregisterExternalDecoder
(
uint8_t
payload_type
)
;
void
RegisterExternalDecoder
(
VideoDecoder
*
external_decoder
uint8_t
payload_type
)
;
bool
DecoderRegistered
(
)
const
;
bool
RegisterReceiveCodec
(
const
VideoCodec
*
receive_codec
int
number_of_cores
bool
require_key_frame
)
;
bool
DeregisterReceiveCodec
(
uint8_t
payload_type
)
;
VCMGenericDecoder
*
GetDecoder
(
const
VCMEncodedFrame
&
frame
VCMDecodedFrameCallback
*
decoded_frame_callback
)
;
VCMGenericDecoder
*
GetCurrentDecoder
(
)
;
bool
PrefersLateDecoding
(
)
const
;
bool
MatchesCurrentResolution
(
int
width
int
height
)
const
;
private
:
typedef
std
:
:
map
<
uint8_t
VCMDecoderMapItem
*
>
DecoderMap
;
typedef
std
:
:
map
<
uint8_t
VCMExtDecoderMapItem
*
>
ExternalDecoderMap
;
std
:
:
unique_ptr
<
VCMGenericDecoder
>
CreateAndInitDecoder
(
const
VCMEncodedFrame
&
frame
VideoCodec
*
new_codec
)
const
;
bool
RequiresEncoderReset
(
const
VideoCodec
&
send_codec
)
;
void
DeleteEncoder
(
)
;
const
VCMDecoderMapItem
*
FindDecoderItem
(
uint8_t
payload_type
)
const
;
const
VCMExtDecoderMapItem
*
FindExternalDecoderItem
(
uint8_t
payload_type
)
const
;
int
number_of_cores_
;
size_t
max_payload_size_
;
bool
periodic_key_frames_
;
bool
pending_encoder_reset_
;
VideoCodec
send_codec_
;
VideoCodec
receive_codec_
;
uint8_t
encoder_payload_type_
;
VideoEncoder
*
external_encoder_
;
bool
internal_source_
;
VCMEncodedFrameCallback
*
const
encoded_frame_callback_
;
std
:
:
unique_ptr
<
VCMGenericEncoder
>
ptr_encoder_
;
std
:
:
unique_ptr
<
VCMGenericDecoder
>
ptr_decoder_
;
DecoderMap
dec_map_
;
ExternalDecoderMap
dec_external_map_
;
}
;
}
#
endif
