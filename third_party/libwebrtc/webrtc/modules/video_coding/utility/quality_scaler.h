#
ifndef
MODULES_VIDEO_CODING_UTILITY_QUALITY_SCALER_H_
#
define
MODULES_VIDEO_CODING_UTILITY_QUALITY_SCALER_H_
#
include
<
utility
>
#
include
"
api
/
optional
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
common_types
.
h
"
#
include
"
modules
/
video_coding
/
utility
/
moving_average
.
h
"
#
include
"
rtc_base
/
sequenced_task_checker
.
h
"
namespace
webrtc
{
class
AdaptationObserverInterface
{
public
:
enum
AdaptReason
:
size_t
{
kQuality
=
0
kCpu
=
1
}
;
static
const
size_t
kScaleReasonSize
=
2
;
virtual
void
AdaptUp
(
AdaptReason
reason
)
=
0
;
virtual
void
AdaptDown
(
AdaptReason
reason
)
=
0
;
protected
:
virtual
~
AdaptationObserverInterface
(
)
{
}
}
;
class
QualityScaler
{
public
:
QualityScaler
(
AdaptationObserverInterface
*
observer
VideoCodecType
codec_type
)
;
QualityScaler
(
AdaptationObserverInterface
*
observer
VideoEncoder
:
:
QpThresholds
thresholds
)
;
virtual
~
QualityScaler
(
)
;
void
ReportDroppedFrame
(
)
;
void
ReportQP
(
int
qp
)
;
protected
:
QualityScaler
(
AdaptationObserverInterface
*
observer
VideoEncoder
:
:
QpThresholds
thresholds
int64_t
sampling_period
)
;
private
:
class
CheckQPTask
;
void
CheckQP
(
)
;
void
ClearSamples
(
)
;
void
ReportQPLow
(
)
;
void
ReportQPHigh
(
)
;
int64_t
GetSamplingPeriodMs
(
)
const
;
CheckQPTask
*
check_qp_task_
RTC_GUARDED_BY
(
&
task_checker_
)
;
AdaptationObserverInterface
*
const
observer_
RTC_GUARDED_BY
(
&
task_checker_
)
;
rtc
:
:
SequencedTaskChecker
task_checker_
;
const
int64_t
sampling_period_ms_
;
bool
fast_rampup_
RTC_GUARDED_BY
(
&
task_checker_
)
;
MovingAverage
average_qp_
RTC_GUARDED_BY
(
&
task_checker_
)
;
MovingAverage
framedrop_percent_
RTC_GUARDED_BY
(
&
task_checker_
)
;
VideoEncoder
:
:
QpThresholds
thresholds_
RTC_GUARDED_BY
(
&
task_checker_
)
;
}
;
}
#
endif
