#
include
"
modules
/
desktop_capture
/
shared_desktop_frame
.
h
"
#
include
<
memory
>
#
include
<
utility
>
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
rtc_base
/
ptr_util
.
h
"
namespace
webrtc
{
SharedDesktopFrame
:
:
~
SharedDesktopFrame
(
)
{
}
std
:
:
unique_ptr
<
SharedDesktopFrame
>
SharedDesktopFrame
:
:
Wrap
(
std
:
:
unique_ptr
<
DesktopFrame
>
desktop_frame
)
{
return
std
:
:
unique_ptr
<
SharedDesktopFrame
>
(
new
SharedDesktopFrame
(
new
Core
(
std
:
:
move
(
desktop_frame
)
)
)
)
;
}
SharedDesktopFrame
*
SharedDesktopFrame
:
:
Wrap
(
DesktopFrame
*
desktop_frame
)
{
return
Wrap
(
std
:
:
unique_ptr
<
DesktopFrame
>
(
desktop_frame
)
)
.
release
(
)
;
}
DesktopFrame
*
SharedDesktopFrame
:
:
GetUnderlyingFrame
(
)
{
return
core_
-
>
get
(
)
;
}
bool
SharedDesktopFrame
:
:
ShareFrameWith
(
const
SharedDesktopFrame
&
other
)
const
{
return
core_
-
>
get
(
)
=
=
other
.
core_
-
>
get
(
)
;
}
std
:
:
unique_ptr
<
SharedDesktopFrame
>
SharedDesktopFrame
:
:
Share
(
)
{
std
:
:
unique_ptr
<
SharedDesktopFrame
>
result
(
new
SharedDesktopFrame
(
core_
)
)
;
result
-
>
CopyFrameInfoFrom
(
*
this
)
;
return
result
;
}
bool
SharedDesktopFrame
:
:
IsShared
(
)
{
return
!
core_
-
>
HasOneRef
(
)
;
}
SharedDesktopFrame
:
:
SharedDesktopFrame
(
rtc
:
:
scoped_refptr
<
Core
>
core
)
:
DesktopFrame
(
(
*
core
)
-
>
size
(
)
(
*
core
)
-
>
stride
(
)
(
*
core
)
-
>
data
(
)
(
*
core
)
-
>
shared_memory
(
)
)
core_
(
core
)
{
CopyFrameInfoFrom
(
*
(
core_
-
>
get
(
)
)
)
;
}
}
