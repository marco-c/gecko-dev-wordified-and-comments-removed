#
ifndef
MODULES_REMOTE_BITRATE_ESTIMATOR_TEST_ESTIMATORS_BBR_H_
#
define
MODULES_REMOTE_BITRATE_ESTIMATOR_TEST_ESTIMATORS_BBR_H_
#
include
<
list
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
optional
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
test
/
bwe
.
h
"
#
include
"
rtc_base
/
numerics
/
sequence_number_util
.
h
"
#
include
"
rtc_base
/
random
.
h
"
namespace
webrtc
{
namespace
testing
{
namespace
bwe
{
class
MaxBandwidthFilter
;
class
MinRttFilter
;
class
CongestionWindow
;
class
BbrBweSender
:
public
BweSender
{
public
:
explicit
BbrBweSender
(
BitrateObserver
*
observer
Clock
*
clock
)
;
virtual
~
BbrBweSender
(
)
;
enum
Mode
{
STARTUP
DRAIN
PROBE_BW
PROBE_RTT
RECOVERY
}
;
struct
PacketStats
{
PacketStats
(
)
{
}
PacketStats
(
uint16_t
sequence_number_
int64_t
last_sent_packet_send_time_ms_
int64_t
send_time_ms_
int64_t
ack_time_ms_
int64_t
last_acked_packet_ack_time_ms_
size_t
payload_size_bytes_
size_t
data_sent_bytes_
size_t
data_sent_before_last_sent_packet_bytes_
size_t
data_acked_bytes_
size_t
data_acked_before_last_acked_packet_bytes_
)
:
sequence_number
(
sequence_number_
)
last_sent_packet_send_time_ms
(
last_sent_packet_send_time_ms_
)
send_time_ms
(
send_time_ms_
)
ack_time_ms
(
ack_time_ms_
)
last_acked_packet_ack_time_ms
(
last_acked_packet_ack_time_ms_
)
payload_size_bytes
(
payload_size_bytes_
)
data_sent_bytes
(
data_sent_bytes_
)
data_sent_before_last_sent_packet_bytes
(
data_sent_before_last_sent_packet_bytes_
)
data_acked_bytes
(
data_acked_bytes_
)
data_acked_before_last_acked_packet_bytes
(
data_acked_before_last_acked_packet_bytes_
)
{
}
uint16_t
sequence_number
;
int64_t
last_sent_packet_send_time_ms
;
int64_t
send_time_ms
;
int64_t
ack_time_ms
;
int64_t
last_acked_packet_ack_time_ms
;
size_t
payload_size_bytes
;
size_t
data_sent_bytes
;
size_t
data_sent_before_last_sent_packet_bytes
;
size_t
data_acked_bytes
;
size_t
data_acked_before_last_acked_packet_bytes
;
}
;
struct
AverageRtt
{
AverageRtt
(
)
{
}
AverageRtt
(
int64_t
sum_of_rtts_ms_
int64_t
num_samples_
uint64_t
round_
)
:
sum_of_rtts_ms
(
sum_of_rtts_ms_
)
num_samples
(
num_samples_
)
round
(
round_
)
{
}
int64_t
sum_of_rtts_ms
;
int64_t
num_samples
;
uint64_t
round
;
}
;
void
OnPacketsSent
(
const
Packets
&
packets
)
override
;
int
GetFeedbackIntervalMs
(
)
const
override
;
void
GiveFeedback
(
const
FeedbackPacket
&
feedback
)
override
;
int64_t
TimeUntilNextProcess
(
)
override
;
void
Process
(
)
override
;
private
:
void
EnterStartup
(
)
;
void
UpdateBandwidthAndMinRtt
(
int64_t
now_ms
const
std
:
:
vector
<
uint16_t
>
&
feedback_vector
int64_t
bytes_acked
)
;
void
TryExitingStartup
(
)
;
void
TryExitingDrain
(
int64_t
now_ms
)
;
void
EnterProbeBw
(
int64_t
now_ms
)
;
void
TryUpdatingCyclePhase
(
int64_t
now_ms
)
;
void
TryEnteringProbeRtt
(
int64_t
now_ms
)
;
void
TryExitingProbeRtt
(
int64_t
now_ms
int64_t
round
)
;
void
TryEnteringRecovery
(
bool
new_round_started
)
;
void
TryExitingRecovery
(
bool
new_round_started
)
;
size_t
TargetCongestionWindow
(
float
gain
)
;
void
CalculatePacingRate
(
)
;
rtc
:
:
Optional
<
int64_t
>
CalculateBandwidthSample
(
size_t
data_sent
int64_t
send_time_delta_ms
size_t
data_acked
int64_t
ack_time_delta_ms
)
;
void
AddSampleForHighGain
(
)
;
void
HandleLoss
(
uint64_t
last_acked_packet
uint64_t
recently_acked_packet
)
;
void
AddToPastRtts
(
int64_t
rtt_sample_ms
)
;
BitrateObserver
*
observer_
;
Clock
*
const
clock_
;
Mode
mode_
;
std
:
:
unique_ptr
<
MaxBandwidthFilter
>
max_bandwidth_filter_
;
std
:
:
unique_ptr
<
MinRttFilter
>
min_rtt_filter_
;
std
:
:
unique_ptr
<
CongestionWindow
>
congestion_window_
;
std
:
:
unique_ptr
<
Random
>
rand_
;
uint64_t
round_count_
;
uint64_t
round_trip_end_
;
float
pacing_gain_
;
float
congestion_window_gain_
;
bool
full_bandwidth_reached_
;
int64_t
cycle_start_time_ms_
;
int64_t
cycle_index_
;
size_t
bytes_acked_
;
int64_t
probe_rtt_start_time_ms_
;
rtc
:
:
Optional
<
int64_t
>
minimum_congestion_window_start_time_ms_
;
int64_t
minimum_congestion_window_start_round_
;
size_t
bytes_sent_
;
uint16_t
last_packet_sent_sequence_number_
;
uint16_t
last_packet_acked_sequence_number_
;
int64_t
last_packet_ack_time_
;
int64_t
last_packet_send_time_
;
int64_t
pacing_rate_bps_
;
rtc
:
:
Optional
<
int64_t
>
first_packet_send_time_during_high_gain_ms_
;
int64_t
last_packet_send_time_during_high_gain_ms_
;
int64_t
data_sent_before_high_gain_started_bytes_
;
int64_t
data_sent_before_high_gain_ended_bytes_
;
int64_t
first_packet_ack_time_during_high_gain_ms_
;
int64_t
last_packet_ack_time_during_high_gain_ms_
;
int64_t
data_acked_before_high_gain_started_bytes_
;
int64_t
data_acked_before_high_gain_ended_bytes_
;
uint16_t
first_packet_seq_num_during_high_gain_
;
uint16_t
last_packet_seq_num_during_high_gain_
;
bool
high_gain_over_
;
std
:
:
map
<
int64_t
PacketStats
>
packet_stats_
;
std
:
:
list
<
AverageRtt
>
past_rtts_
;
}
;
class
BbrBweReceiver
:
public
BweReceiver
{
public
:
explicit
BbrBweReceiver
(
int
flow_id
)
;
virtual
~
BbrBweReceiver
(
)
;
void
ReceivePacket
(
int64_t
arrival_time_ms
const
MediaPacket
&
media_packet
)
override
;
FeedbackPacket
*
GetFeedback
(
int64_t
now_ms
)
override
;
private
:
SimulatedClock
clock_
;
std
:
:
vector
<
uint16_t
>
packet_feedbacks_
;
int64_t
last_feedback_ms_
;
}
;
}
}
}
#
endif
