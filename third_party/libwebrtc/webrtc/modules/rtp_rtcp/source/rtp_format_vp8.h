#
ifndef
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VP8_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VP8_H_
#
include
<
queue
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_format
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
RtpPacketizerVp8
:
public
RtpPacketizer
{
public
:
RtpPacketizerVp8
(
const
RTPVideoHeaderVP8
&
hdr_info
size_t
max_payload_len
size_t
last_packet_reduction_len
)
;
virtual
~
RtpPacketizerVp8
(
)
;
size_t
SetPayloadData
(
const
uint8_t
*
payload_data
size_t
payload_size
const
RTPFragmentationHeader
*
fragmentation
)
override
;
bool
NextPacket
(
RtpPacketToSend
*
packet
)
override
;
std
:
:
string
ToString
(
)
override
;
private
:
typedef
struct
{
size_t
payload_start_pos
;
size_t
size
;
bool
first_packet
;
}
InfoStruct
;
typedef
std
:
:
queue
<
InfoStruct
>
InfoQueue
;
static
const
int
kXBit
=
0x80
;
static
const
int
kNBit
=
0x20
;
static
const
int
kSBit
=
0x10
;
static
const
int
kPartIdField
=
0x0F
;
static
const
int
kKeyIdxField
=
0x1F
;
static
const
int
kIBit
=
0x80
;
static
const
int
kLBit
=
0x40
;
static
const
int
kTBit
=
0x20
;
static
const
int
kKBit
=
0x10
;
static
const
int
kYBit
=
0x20
;
int
GeneratePackets
(
)
;
void
GeneratePacketsSplitPayloadBalanced
(
size_t
payload_len
size_t
capacity
)
;
void
QueuePacket
(
size_t
start_pos
size_t
packet_size
bool
first_packet
)
;
int
WriteHeaderAndPayload
(
const
InfoStruct
&
packet_info
uint8_t
*
buffer
size_t
buffer_length
)
const
;
int
WriteExtensionFields
(
uint8_t
*
buffer
size_t
buffer_length
)
const
;
int
WritePictureIDFields
(
uint8_t
*
x_field
uint8_t
*
buffer
size_t
buffer_length
size_t
*
extension_length
)
const
;
int
WriteTl0PicIdxFields
(
uint8_t
*
x_field
uint8_t
*
buffer
size_t
buffer_length
size_t
*
extension_length
)
const
;
int
WriteTIDAndKeyIdxFields
(
uint8_t
*
x_field
uint8_t
*
buffer
size_t
buffer_length
size_t
*
extension_length
)
const
;
int
WritePictureID
(
uint8_t
*
buffer
size_t
buffer_length
)
const
;
size_t
PayloadDescriptorExtraLength
(
)
const
;
size_t
PictureIdLength
(
)
const
;
bool
XFieldPresent
(
)
const
;
bool
TIDFieldPresent
(
)
const
;
bool
KeyIdxFieldPresent
(
)
const
;
bool
TL0PicIdxFieldPresent
(
)
const
;
bool
PictureIdPresent
(
)
const
{
return
(
PictureIdLength
(
)
>
0
)
;
}
const
uint8_t
*
payload_data_
;
size_t
payload_size_
;
const
size_t
vp8_fixed_payload_descriptor_bytes_
;
const
RTPVideoHeaderVP8
hdr_info_
;
const
size_t
max_payload_len_
;
const
size_t
last_packet_reduction_len_
;
InfoQueue
packets_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
RtpPacketizerVp8
)
;
}
;
class
RtpDepacketizerVp8
:
public
RtpDepacketizer
{
public
:
virtual
~
RtpDepacketizerVp8
(
)
{
}
bool
Parse
(
ParsedPayload
*
parsed_payload
const
uint8_t
*
payload_data
size_t
payload_data_length
)
override
;
}
;
}
#
endif
