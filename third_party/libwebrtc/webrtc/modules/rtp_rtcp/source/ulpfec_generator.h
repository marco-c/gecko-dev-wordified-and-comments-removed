#
ifndef
MODULES_RTP_RTCP_SOURCE_ULPFEC_GENERATOR_H_
#
define
MODULES_RTP_RTCP_SOURCE_ULPFEC_GENERATOR_H_
#
include
<
list
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
modules
/
rtp_rtcp
/
source
/
forward_error_correction
.
h
"
namespace
webrtc
{
class
FlexfecSender
;
class
RedPacket
{
public
:
explicit
RedPacket
(
size_t
length
)
;
void
CreateHeader
(
const
uint8_t
*
rtp_header
size_t
header_length
int
red_payload_type
int
payload_type
)
;
void
SetSeqNum
(
int
seq_num
)
;
void
AssignPayload
(
const
uint8_t
*
payload
size_t
length
)
;
void
ClearMarkerBit
(
)
;
uint8_t
*
data
(
)
const
;
size_t
length
(
)
const
;
private
:
std
:
:
unique_ptr
<
uint8_t
[
]
>
data_
;
size_t
length_
;
size_t
header_length_
;
}
;
class
UlpfecGenerator
{
friend
class
FlexfecSender
;
public
:
UlpfecGenerator
(
)
;
~
UlpfecGenerator
(
)
;
void
SetFecParameters
(
const
FecProtectionParams
&
params
)
;
int
AddRtpPacketAndGenerateFec
(
const
uint8_t
*
data_buffer
size_t
payload_length
size_t
rtp_header_length
)
;
bool
FecAvailable
(
)
const
;
size_t
NumAvailableFecPackets
(
)
const
;
size_t
MaxPacketOverhead
(
)
const
;
std
:
:
vector
<
std
:
:
unique_ptr
<
RedPacket
>
>
GetUlpfecPacketsAsRed
(
int
red_payload_type
int
ulpfec_payload_type
uint16_t
first_seq_num
size_t
rtp_header_length
)
;
private
:
explicit
UlpfecGenerator
(
std
:
:
unique_ptr
<
ForwardErrorCorrection
>
fec
)
;
int
Overhead
(
)
const
;
bool
ExcessOverheadBelowMax
(
)
const
;
bool
MinimumMediaPacketsReached
(
)
const
;
void
ResetState
(
)
;
std
:
:
unique_ptr
<
ForwardErrorCorrection
>
fec_
;
ForwardErrorCorrection
:
:
PacketList
media_packets_
;
std
:
:
list
<
ForwardErrorCorrection
:
:
Packet
*
>
generated_fec_packets_
;
int
num_protected_frames_
;
int
min_num_media_packets_
;
FecProtectionParams
params_
;
FecProtectionParams
new_params_
;
}
;
}
#
endif
