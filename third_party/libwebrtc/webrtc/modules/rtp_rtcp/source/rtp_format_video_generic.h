#
ifndef
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VIDEO_GENERIC_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VIDEO_GENERIC_H_
#
include
<
string
>
#
include
"
common_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_format
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
namespace
RtpFormatVideoGeneric
{
static
const
uint8_t
kKeyFrameBit
=
0x01
;
static
const
uint8_t
kFirstPacketBit
=
0x02
;
}
class
RtpPacketizerGeneric
:
public
RtpPacketizer
{
public
:
RtpPacketizerGeneric
(
FrameType
frametype
size_t
max_payload_len
size_t
last_packet_reduction_len
)
;
virtual
~
RtpPacketizerGeneric
(
)
;
size_t
SetPayloadData
(
const
uint8_t
*
payload_data
size_t
payload_size
const
RTPFragmentationHeader
*
fragmentation
)
override
;
bool
NextPacket
(
RtpPacketToSend
*
packet
)
override
;
std
:
:
string
ToString
(
)
override
;
private
:
const
uint8_t
*
payload_data_
;
size_t
payload_size_
;
const
size_t
max_payload_len_
;
const
size_t
last_packet_reduction_len_
;
FrameType
frame_type_
;
size_t
payload_len_per_packet_
;
uint8_t
generic_header_
;
size_t
num_packets_left_
;
size_t
num_larger_packets_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
RtpPacketizerGeneric
)
;
}
;
class
RtpDepacketizerGeneric
:
public
RtpDepacketizer
{
public
:
virtual
~
RtpDepacketizerGeneric
(
)
{
}
bool
Parse
(
ParsedPayload
*
parsed_payload
const
uint8_t
*
payload_data
size_t
payload_data_length
)
override
;
}
;
}
#
endif
