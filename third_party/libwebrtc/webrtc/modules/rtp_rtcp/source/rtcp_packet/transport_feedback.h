#
ifndef
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_TRANSPORT_FEEDBACK_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_TRANSPORT_FEEDBACK_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
rtpfb
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
CommonHeader
;
class
TransportFeedback
:
public
Rtpfb
{
public
:
class
ReceivedPacket
{
public
:
ReceivedPacket
(
uint16_t
sequence_number
int16_t
delta_ticks
)
:
sequence_number_
(
sequence_number
)
delta_ticks_
(
delta_ticks
)
{
}
ReceivedPacket
(
const
ReceivedPacket
&
)
=
default
;
ReceivedPacket
&
operator
=
(
const
ReceivedPacket
&
)
=
default
;
uint16_t
sequence_number
(
)
const
{
return
sequence_number_
;
}
int16_t
delta_ticks
(
)
const
{
return
delta_ticks_
;
}
int32_t
delta_us
(
)
const
{
return
delta_ticks_
*
kDeltaScaleFactor
;
}
private
:
uint16_t
sequence_number_
;
int16_t
delta_ticks_
;
}
;
static
constexpr
uint8_t
kFeedbackMessageType
=
15
;
static
constexpr
int
kDeltaScaleFactor
=
250
;
static
constexpr
size_t
kMaxReportedPackets
=
0xffff
;
TransportFeedback
(
)
;
~
TransportFeedback
(
)
override
;
void
SetBase
(
uint16_t
base_sequence
int64_t
ref_timestamp_us
)
;
void
SetFeedbackSequenceNumber
(
uint8_t
feedback_sequence
)
;
bool
AddReceivedPacket
(
uint16_t
sequence_number
int64_t
timestamp_us
)
;
const
std
:
:
vector
<
ReceivedPacket
>
&
GetReceivedPackets
(
)
const
;
uint16_t
GetBaseSequence
(
)
const
;
size_t
GetPacketStatusCount
(
)
const
{
return
num_seq_no_
;
}
int64_t
GetBaseTimeUs
(
)
const
;
bool
Parse
(
const
CommonHeader
&
packet
)
;
static
std
:
:
unique_ptr
<
TransportFeedback
>
ParseFrom
(
const
uint8_t
*
buffer
size_t
length
)
;
bool
IsConsistent
(
)
const
;
size_t
BlockLength
(
)
const
override
;
bool
Create
(
uint8_t
*
packet
size_t
*
position
size_t
max_length
PacketReadyCallback
*
callback
)
const
override
;
private
:
using
DeltaSize
=
uint8_t
;
class
LastChunk
;
void
Clear
(
)
;
bool
AddDeltaSize
(
DeltaSize
delta_size
)
;
uint16_t
base_seq_no_
;
uint16_t
num_seq_no_
;
int32_t
base_time_ticks_
;
uint8_t
feedback_seq_
;
int64_t
last_timestamp_us_
;
std
:
:
vector
<
ReceivedPacket
>
packets_
;
std
:
:
vector
<
uint16_t
>
encoded_chunks_
;
const
std
:
:
unique_ptr
<
LastChunk
>
last_chunk_
;
size_t
size_bytes_
;
}
;
}
}
#
endif
