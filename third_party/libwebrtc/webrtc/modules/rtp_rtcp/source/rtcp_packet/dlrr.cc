#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
dlrr
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
byte_io
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_conversions
.
h
"
namespace
webrtc
{
namespace
rtcp
{
Dlrr
:
:
Dlrr
(
)
=
default
;
Dlrr
:
:
Dlrr
(
const
Dlrr
&
other
)
=
default
;
Dlrr
:
:
~
Dlrr
(
)
=
default
;
bool
Dlrr
:
:
Parse
(
const
uint8_t
*
buffer
uint16_t
block_length_32bits
)
{
RTC_DCHECK
(
buffer
[
0
]
=
=
kBlockType
)
;
RTC_DCHECK_EQ
(
block_length_32bits
ByteReader
<
uint16_t
>
:
:
ReadBigEndian
(
&
buffer
[
2
]
)
)
;
if
(
block_length_32bits
%
3
!
=
0
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Invalid
size
for
dlrr
block
.
"
;
return
false
;
}
size_t
blocks_count
=
block_length_32bits
/
3
;
const
uint8_t
*
read_at
=
buffer
+
kBlockHeaderLength
;
sub_blocks_
.
resize
(
blocks_count
)
;
for
(
ReceiveTimeInfo
&
sub_block
:
sub_blocks_
)
{
sub_block
.
ssrc
=
ByteReader
<
uint32_t
>
:
:
ReadBigEndian
(
&
read_at
[
0
]
)
;
sub_block
.
last_rr
=
ByteReader
<
uint32_t
>
:
:
ReadBigEndian
(
&
read_at
[
4
]
)
;
sub_block
.
delay_since_last_rr
=
ByteReader
<
uint32_t
>
:
:
ReadBigEndian
(
&
read_at
[
8
]
)
;
read_at
+
=
kSubBlockLength
;
}
return
true
;
}
size_t
Dlrr
:
:
BlockLength
(
)
const
{
if
(
sub_blocks_
.
empty
(
)
)
return
0
;
return
kBlockHeaderLength
+
kSubBlockLength
*
sub_blocks_
.
size
(
)
;
}
void
Dlrr
:
:
Create
(
uint8_t
*
buffer
)
const
{
if
(
sub_blocks_
.
empty
(
)
)
return
;
const
uint8_t
kReserved
=
0
;
buffer
[
0
]
=
kBlockType
;
buffer
[
1
]
=
kReserved
;
ByteWriter
<
uint16_t
>
:
:
WriteBigEndian
(
&
buffer
[
2
]
rtc
:
:
dchecked_cast
<
uint16_t
>
(
3
*
sub_blocks_
.
size
(
)
)
)
;
uint8_t
*
write_at
=
buffer
+
kBlockHeaderLength
;
for
(
const
ReceiveTimeInfo
&
sub_block
:
sub_blocks_
)
{
ByteWriter
<
uint32_t
>
:
:
WriteBigEndian
(
&
write_at
[
0
]
sub_block
.
ssrc
)
;
ByteWriter
<
uint32_t
>
:
:
WriteBigEndian
(
&
write_at
[
4
]
sub_block
.
last_rr
)
;
ByteWriter
<
uint32_t
>
:
:
WriteBigEndian
(
&
write_at
[
8
]
sub_block
.
delay_since_last_rr
)
;
write_at
+
=
kSubBlockLength
;
}
RTC_DCHECK_EQ
(
buffer
+
BlockLength
(
)
write_at
)
;
}
}
}
