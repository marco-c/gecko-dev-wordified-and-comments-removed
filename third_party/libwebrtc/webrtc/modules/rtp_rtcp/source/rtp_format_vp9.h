#
ifndef
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VP9_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VP9_H_
#
include
<
queue
>
#
include
<
string
>
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_format
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
RtpPacketizerVp9
:
public
RtpPacketizer
{
public
:
RtpPacketizerVp9
(
const
RTPVideoHeaderVP9
&
hdr
size_t
max_payload_length
size_t
last_packet_reduction_len
)
;
virtual
~
RtpPacketizerVp9
(
)
;
std
:
:
string
ToString
(
)
override
;
size_t
SetPayloadData
(
const
uint8_t
*
payload
size_t
payload_size
const
RTPFragmentationHeader
*
fragmentation
)
override
;
bool
NextPacket
(
RtpPacketToSend
*
packet
)
override
;
typedef
struct
{
size_t
payload_start_pos
;
size_t
size
;
bool
layer_begin
;
bool
layer_end
;
}
PacketInfo
;
typedef
std
:
:
queue
<
PacketInfo
>
PacketInfoQueue
;
private
:
void
GeneratePackets
(
)
;
bool
WriteHeaderAndPayload
(
const
PacketInfo
&
packet_info
RtpPacketToSend
*
packet
bool
last
)
const
;
bool
WriteHeader
(
const
PacketInfo
&
packet_info
uint8_t
*
buffer
size_t
*
header_length
)
const
;
const
RTPVideoHeaderVP9
hdr_
;
const
size_t
max_payload_length_
;
const
uint8_t
*
payload_
;
size_t
payload_size_
;
const
size_t
last_packet_reduction_len_
;
PacketInfoQueue
packets_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
RtpPacketizerVp9
)
;
}
;
class
RtpDepacketizerVp9
:
public
RtpDepacketizer
{
public
:
virtual
~
RtpDepacketizerVp9
(
)
{
}
bool
Parse
(
ParsedPayload
*
parsed_payload
const
uint8_t
*
payload
size_t
payload_length
)
override
;
}
;
}
#
endif
