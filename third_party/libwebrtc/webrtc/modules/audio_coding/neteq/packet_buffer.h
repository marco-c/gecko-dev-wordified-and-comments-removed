#
ifndef
MODULES_AUDIO_CODING_NETEQ_PACKET_BUFFER_H_
#
define
MODULES_AUDIO_CODING_NETEQ_PACKET_BUFFER_H_
#
include
"
api
/
optional
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
packet
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
DecoderDatabase
;
class
StatisticsCalculator
;
class
TickTimer
;
class
PacketBuffer
{
public
:
enum
BufferReturnCodes
{
kOK
=
0
kFlushed
kNotFound
kBufferEmpty
kInvalidPacket
kInvalidPointer
}
;
PacketBuffer
(
size_t
max_number_of_packets
const
TickTimer
*
tick_timer
)
;
virtual
~
PacketBuffer
(
)
;
virtual
void
Flush
(
)
;
virtual
bool
Empty
(
)
const
;
virtual
int
InsertPacket
(
Packet
&
&
packet
StatisticsCalculator
*
stats
)
;
virtual
int
InsertPacketList
(
PacketList
*
packet_list
const
DecoderDatabase
&
decoder_database
rtc
:
:
Optional
<
uint8_t
>
*
current_rtp_payload_type
rtc
:
:
Optional
<
uint8_t
>
*
current_cng_rtp_payload_type
StatisticsCalculator
*
stats
)
;
virtual
int
NextTimestamp
(
uint32_t
*
next_timestamp
)
const
;
virtual
int
NextHigherTimestamp
(
uint32_t
timestamp
uint32_t
*
next_timestamp
)
const
;
virtual
const
Packet
*
PeekNextPacket
(
)
const
;
virtual
rtc
:
:
Optional
<
Packet
>
GetNextPacket
(
)
;
virtual
int
DiscardNextPacket
(
StatisticsCalculator
*
stats
)
;
virtual
void
DiscardOldPackets
(
uint32_t
timestamp_limit
uint32_t
horizon_samples
StatisticsCalculator
*
stats
)
;
virtual
void
DiscardAllOldPackets
(
uint32_t
timestamp_limit
StatisticsCalculator
*
stats
)
;
virtual
void
DiscardPacketsWithPayloadType
(
uint8_t
payload_type
StatisticsCalculator
*
stats
)
;
virtual
size_t
NumPacketsInBuffer
(
)
const
;
virtual
size_t
NumSamplesInBuffer
(
size_t
last_decoded_length
)
const
;
virtual
void
BufferStat
(
int
*
num_packets
int
*
max_num_packets
)
const
;
static
bool
IsObsoleteTimestamp
(
uint32_t
timestamp
uint32_t
timestamp_limit
uint32_t
horizon_samples
)
{
return
IsNewerTimestamp
(
timestamp_limit
timestamp
)
&
&
(
horizon_samples
=
=
0
|
|
IsNewerTimestamp
(
timestamp
timestamp_limit
-
horizon_samples
)
)
;
}
private
:
size_t
max_number_of_packets_
;
PacketList
buffer_
;
const
TickTimer
*
tick_timer_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
PacketBuffer
)
;
}
;
}
#
endif
