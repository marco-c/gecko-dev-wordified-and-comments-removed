#
ifndef
MODULES_AUDIO_CODING_NETEQ_TOOLS_AUDIO_SINK_H_
#
define
MODULES_AUDIO_CODING_NETEQ_TOOLS_AUDIO_SINK_H_
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
namespace
test
{
class
AudioSink
{
public
:
AudioSink
(
)
{
}
virtual
~
AudioSink
(
)
{
}
virtual
bool
WriteArray
(
const
int16_t
*
audio
size_t
num_samples
)
=
0
;
bool
WriteAudioFrame
(
const
AudioFrame
&
audio_frame
)
{
return
WriteArray
(
audio_frame
.
data
(
)
audio_frame
.
samples_per_channel_
*
audio_frame
.
num_channels_
)
;
}
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
AudioSink
)
;
}
;
class
AudioSinkFork
:
public
AudioSink
{
public
:
AudioSinkFork
(
AudioSink
*
left
AudioSink
*
right
)
:
left_sink_
(
left
)
right_sink_
(
right
)
{
}
bool
WriteArray
(
const
int16_t
*
audio
size_t
num_samples
)
override
;
private
:
AudioSink
*
left_sink_
;
AudioSink
*
right_sink_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
AudioSinkFork
)
;
}
;
class
VoidAudioSink
:
public
AudioSink
{
public
:
VoidAudioSink
(
)
=
default
;
bool
WriteArray
(
const
int16_t
*
audio
size_t
num_samples
)
override
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
VoidAudioSink
)
;
}
;
}
}
#
endif
