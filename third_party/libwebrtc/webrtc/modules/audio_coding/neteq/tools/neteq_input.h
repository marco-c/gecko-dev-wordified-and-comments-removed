#
ifndef
MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_INPUT_H_
#
define
MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_INPUT_H_
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
api
/
optional
.
h
"
#
include
"
common_types
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
tools
/
packet
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
tools
/
packet_source
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
namespace
webrtc
{
namespace
test
{
class
NetEqInput
{
public
:
struct
PacketData
{
std
:
:
string
ToString
(
)
const
;
RTPHeader
header
;
rtc
:
:
Buffer
payload
;
double
time_ms
;
}
;
virtual
~
NetEqInput
(
)
=
default
;
virtual
rtc
:
:
Optional
<
int64_t
>
NextPacketTime
(
)
const
=
0
;
virtual
rtc
:
:
Optional
<
int64_t
>
NextOutputEventTime
(
)
const
=
0
;
rtc
:
:
Optional
<
int64_t
>
NextEventTime
(
)
const
{
const
auto
a
=
NextPacketTime
(
)
;
const
auto
b
=
NextOutputEventTime
(
)
;
if
(
a
)
{
return
b
?
std
:
:
min
(
*
a
*
b
)
:
a
;
}
return
b
?
b
:
rtc
:
:
nullopt
;
}
virtual
std
:
:
unique_ptr
<
PacketData
>
PopPacket
(
)
=
0
;
virtual
void
AdvanceOutputEvent
(
)
=
0
;
virtual
bool
ended
(
)
const
=
0
;
virtual
rtc
:
:
Optional
<
RTPHeader
>
NextHeader
(
)
const
=
0
;
}
;
}
}
#
endif
