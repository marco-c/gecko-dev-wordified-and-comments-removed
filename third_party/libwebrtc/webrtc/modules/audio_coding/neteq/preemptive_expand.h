#
ifndef
MODULES_AUDIO_CODING_NETEQ_PREEMPTIVE_EXPAND_H_
#
define
MODULES_AUDIO_CODING_NETEQ_PREEMPTIVE_EXPAND_H_
#
include
<
assert
.
h
>
#
include
"
modules
/
audio_coding
/
neteq
/
audio_multi_vector
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
time_stretch
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
BackgroundNoise
;
class
PreemptiveExpand
:
public
TimeStretch
{
public
:
PreemptiveExpand
(
int
sample_rate_hz
size_t
num_channels
const
BackgroundNoise
&
background_noise
size_t
overlap_samples
)
:
TimeStretch
(
sample_rate_hz
num_channels
background_noise
)
old_data_length_per_channel_
(
0
)
overlap_samples_
(
overlap_samples
)
{
}
ReturnCodes
Process
(
const
int16_t
*
pw16_decoded
size_t
len
size_t
old_data_len
AudioMultiVector
*
output
size_t
*
length_change_samples
)
;
protected
:
void
SetParametersForPassiveSpeech
(
size_t
input_length
int16_t
*
best_correlation
size_t
*
peak_index
)
const
override
;
ReturnCodes
CheckCriteriaAndStretch
(
const
int16_t
*
input
size_t
input_length
size_t
peak_index
int16_t
best_correlation
bool
active_speech
bool
AudioMultiVector
*
output
)
const
override
;
private
:
size_t
old_data_length_per_channel_
;
size_t
overlap_samples_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
PreemptiveExpand
)
;
}
;
struct
PreemptiveExpandFactory
{
PreemptiveExpandFactory
(
)
{
}
virtual
~
PreemptiveExpandFactory
(
)
{
}
virtual
PreemptiveExpand
*
Create
(
int
sample_rate_hz
size_t
num_channels
const
BackgroundNoise
&
background_noise
size_t
overlap_samples
)
const
;
}
;
}
#
endif
