#
ifndef
MODULES_PACING_PACKET_QUEUE_H_
#
define
MODULES_PACING_PACKET_QUEUE_H_
#
include
<
list
>
#
include
<
queue
>
#
include
<
set
>
#
include
<
vector
>
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
namespace
webrtc
{
class
PacketQueue
{
public
:
explicit
PacketQueue
(
const
Clock
*
clock
)
;
virtual
~
PacketQueue
(
)
;
struct
Packet
{
Packet
(
RtpPacketSender
:
:
Priority
priority
uint32_t
ssrc
uint16_t
seq_number
int64_t
capture_time_ms
int64_t
enqueue_time_ms
size_t
length_in_bytes
bool
retransmission
uint64_t
enqueue_order
)
;
Packet
(
const
Packet
&
other
)
;
virtual
~
Packet
(
)
;
bool
operator
<
(
const
Packet
&
other
)
const
{
if
(
priority
!
=
other
.
priority
)
return
priority
>
other
.
priority
;
if
(
retransmission
!
=
other
.
retransmission
)
return
other
.
retransmission
;
return
enqueue_order
>
other
.
enqueue_order
;
}
RtpPacketSender
:
:
Priority
priority
;
uint32_t
ssrc
;
uint16_t
sequence_number
;
int64_t
capture_time_ms
;
int64_t
enqueue_time_ms
;
int64_t
sum_paused_ms
;
size_t
bytes
;
bool
retransmission
;
uint64_t
enqueue_order
;
std
:
:
list
<
Packet
>
:
:
iterator
this_it
;
std
:
:
multiset
<
int64_t
>
:
:
iterator
enqueue_time_it
;
}
;
virtual
void
Push
(
const
Packet
&
packet
)
;
virtual
const
Packet
&
BeginPop
(
)
;
virtual
void
CancelPop
(
const
Packet
&
packet
)
;
virtual
void
FinalizePop
(
const
Packet
&
packet
)
;
virtual
bool
Empty
(
)
const
;
virtual
size_t
SizeInPackets
(
)
const
;
virtual
uint64_t
SizeInBytes
(
)
const
;
virtual
int64_t
OldestEnqueueTimeMs
(
)
const
;
virtual
void
UpdateQueueTime
(
int64_t
timestamp_ms
)
;
virtual
void
SetPauseState
(
bool
paused
int64_t
timestamp_ms
)
;
virtual
int64_t
AverageQueueTimeMs
(
)
const
;
private
:
bool
AddToDupeSet
(
const
Packet
&
packet
)
;
void
RemoveFromDupeSet
(
const
Packet
&
packet
)
;
struct
Comparator
{
bool
operator
(
)
(
const
Packet
*
first
const
Packet
*
second
)
{
if
(
first
-
>
priority
!
=
second
-
>
priority
)
return
first
-
>
priority
>
second
-
>
priority
;
if
(
second
-
>
retransmission
!
=
first
-
>
retransmission
)
return
second
-
>
retransmission
;
if
(
first
-
>
capture_time_ms
!
=
second
-
>
capture_time_ms
)
return
first
-
>
capture_time_ms
>
second
-
>
capture_time_ms
;
return
first
-
>
enqueue_order
>
second
-
>
enqueue_order
;
}
}
;
std
:
:
list
<
Packet
>
packet_list_
;
std
:
:
priority_queue
<
Packet
*
std
:
:
vector
<
Packet
*
>
Comparator
>
prio_queue_
;
uint64_t
bytes_
;
const
Clock
*
const
clock_
;
int64_t
queue_time_sum_
;
int64_t
time_last_updated_
;
bool
paused_
;
}
;
}
#
endif
