#
ifndef
MODULES_PACING_PACED_SENDER_H_
#
define
MODULES_PACING_PACED_SENDER_H_
#
include
<
memory
>
#
include
"
api
/
optional
.
h
"
#
include
"
modules
/
pacing
/
pacer
.
h
"
#
include
"
modules
/
pacing
/
packet_queue2
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
AlrDetector
;
class
BitrateProber
;
class
Clock
;
class
ProbeClusterCreatedObserver
;
class
RtcEventLog
;
class
IntervalBudget
;
class
PacedSender
:
public
Pacer
{
public
:
class
PacketSender
{
public
:
virtual
bool
TimeToSendPacket
(
uint32_t
ssrc
uint16_t
sequence_number
int64_t
capture_time_ms
bool
retransmission
const
PacedPacketInfo
&
cluster_info
)
=
0
;
virtual
size_t
TimeToSendPadding
(
size_t
bytes
const
PacedPacketInfo
&
cluster_info
)
=
0
;
protected
:
virtual
~
PacketSender
(
)
{
}
}
;
static
const
int64_t
kMaxQueueLengthMs
;
static
const
float
kDefaultPaceMultiplier
;
PacedSender
(
const
Clock
*
clock
PacketSender
*
packet_sender
RtcEventLog
*
event_log
)
;
PacedSender
(
const
Clock
*
clock
PacketSender
*
packet_sender
RtcEventLog
*
event_log
std
:
:
unique_ptr
<
PacketQueue
>
packets
)
;
~
PacedSender
(
)
override
;
virtual
void
CreateProbeCluster
(
int
bitrate_bps
)
;
void
Pause
(
)
;
void
Resume
(
)
;
void
SetProbingEnabled
(
bool
enabled
)
;
void
SetEstimatedBitrate
(
uint32_t
bitrate_bps
)
override
;
void
SetSendBitrateLimits
(
int
min_send_bitrate_bps
int
max_padding_bitrate_bps
)
;
void
InsertPacket
(
RtpPacketSender
:
:
Priority
priority
uint32_t
ssrc
uint16_t
sequence_number
int64_t
capture_time_ms
size_t
bytes
bool
retransmission
)
override
;
void
SetAccountForAudioPackets
(
bool
account_for_audio
)
override
;
virtual
int64_t
QueueInMs
(
)
const
;
virtual
size_t
QueueSizePackets
(
)
const
;
virtual
int64_t
FirstSentPacketTimeMs
(
)
const
;
virtual
int64_t
ExpectedQueueTimeMs
(
)
const
;
virtual
rtc
:
:
Optional
<
int64_t
>
GetApplicationLimitedRegionStartTime
(
)
const
;
int64_t
TimeUntilNextProcess
(
)
override
;
void
Process
(
)
override
;
void
ProcessThreadAttached
(
ProcessThread
*
process_thread
)
override
;
void
SetPacingFactor
(
float
pacing_factor
)
;
float
GetPacingFactor
(
)
const
;
void
SetQueueTimeLimit
(
int
limit_ms
)
;
private
:
void
UpdateBudgetWithElapsedTime
(
int64_t
delta_time_in_ms
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
critsect_
)
;
void
UpdateBudgetWithBytesSent
(
size_t
bytes
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
critsect_
)
;
bool
SendPacket
(
const
PacketQueue
:
:
Packet
&
packet
const
PacedPacketInfo
&
cluster_info
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
critsect_
)
;
size_t
SendPadding
(
size_t
padding_needed
const
PacedPacketInfo
&
cluster_info
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
critsect_
)
;
const
Clock
*
const
clock_
;
PacketSender
*
const
packet_sender_
;
const
std
:
:
unique_ptr
<
AlrDetector
>
alr_detector_
RTC_PT_GUARDED_BY
(
critsect_
)
;
rtc
:
:
CriticalSection
critsect_
;
bool
paused_
RTC_GUARDED_BY
(
critsect_
)
;
const
std
:
:
unique_ptr
<
IntervalBudget
>
media_budget_
RTC_PT_GUARDED_BY
(
critsect_
)
;
const
std
:
:
unique_ptr
<
IntervalBudget
>
padding_budget_
RTC_PT_GUARDED_BY
(
critsect_
)
;
const
std
:
:
unique_ptr
<
BitrateProber
>
prober_
RTC_PT_GUARDED_BY
(
critsect_
)
;
bool
probing_send_failure_
RTC_GUARDED_BY
(
critsect_
)
;
uint32_t
estimated_bitrate_bps_
RTC_GUARDED_BY
(
critsect_
)
;
uint32_t
min_send_bitrate_kbps_
RTC_GUARDED_BY
(
critsect_
)
;
uint32_t
max_padding_bitrate_kbps_
RTC_GUARDED_BY
(
critsect_
)
;
uint32_t
pacing_bitrate_kbps_
RTC_GUARDED_BY
(
critsect_
)
;
int64_t
time_last_update_us_
RTC_GUARDED_BY
(
critsect_
)
;
int64_t
first_sent_packet_ms_
RTC_GUARDED_BY
(
critsect_
)
;
const
std
:
:
unique_ptr
<
PacketQueue
>
packets_
RTC_PT_GUARDED_BY
(
critsect_
)
;
uint64_t
packet_counter_
RTC_GUARDED_BY
(
critsect_
)
;
ProcessThread
*
process_thread_
=
nullptr
;
float
pacing_factor_
RTC_GUARDED_BY
(
critsect_
)
;
int64_t
queue_time_limit
RTC_GUARDED_BY
(
critsect_
)
;
bool
account_for_audio_
RTC_GUARDED_BY
(
critsect_
)
;
}
;
}
#
endif
