#
include
<
algorithm
>
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
gain_controller2
.
h
"
#
include
"
modules
/
audio_processing
/
audio_buffer
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
{
constexpr
size_t
kFrameSizeMs
=
10u
;
constexpr
size_t
kStereo
=
2u
;
void
SetAudioBufferSamples
(
float
value
AudioBuffer
*
ab
)
{
for
(
size_t
k
=
0
;
k
<
ab
-
>
num_channels
(
)
;
+
+
k
)
{
std
:
:
fill
(
ab
-
>
channels_f
(
)
[
k
]
ab
-
>
channels_f
(
)
[
k
]
+
ab
-
>
num_frames
(
)
value
)
;
}
}
}
TEST
(
GainController2
CreateApplyConfig
)
{
std
:
:
unique_ptr
<
GainController2
>
gain_controller2
(
new
GainController2
(
)
)
;
AudioProcessing
:
:
Config
:
:
GainController2
config
;
EXPECT_TRUE
(
GainController2
:
:
Validate
(
config
)
)
;
gain_controller2
-
>
ApplyConfig
(
config
)
;
config
.
fixed_gain_db
=
-
5
.
f
;
EXPECT_FALSE
(
GainController2
:
:
Validate
(
config
)
)
;
for
(
const
float
&
fixed_gain_db
:
{
0
.
f
5
.
f
10
.
f
50
.
f
}
)
{
config
.
fixed_gain_db
=
fixed_gain_db
;
EXPECT_TRUE
(
GainController2
:
:
Validate
(
config
)
)
;
gain_controller2
-
>
ApplyConfig
(
config
)
;
}
}
TEST
(
GainController2
ToString
)
{
AudioProcessing
:
:
Config
:
:
GainController2
config
;
config
.
fixed_gain_db
=
5
.
f
;
config
.
enabled
=
false
;
EXPECT_EQ
(
"
{
enabled
:
false
fixed_gain_dB
:
5
}
"
GainController2
:
:
ToString
(
config
)
)
;
config
.
enabled
=
true
;
EXPECT_EQ
(
"
{
enabled
:
true
fixed_gain_dB
:
5
}
"
GainController2
:
:
ToString
(
config
)
)
;
}
TEST
(
GainController2
Usage
)
{
std
:
:
unique_ptr
<
GainController2
>
gain_controller2
(
new
GainController2
(
)
)
;
gain_controller2
-
>
Initialize
(
AudioProcessing
:
:
kSampleRate48kHz
)
;
const
size_t
num_frames
=
rtc
:
:
CheckedDivExact
<
size_t
>
(
kFrameSizeMs
*
AudioProcessing
:
:
kSampleRate48kHz
1000
)
;
AudioBuffer
ab
(
num_frames
kStereo
num_frames
kStereo
num_frames
)
;
constexpr
float
sample_value
=
1000
.
f
;
SetAudioBufferSamples
(
sample_value
&
ab
)
;
AudioProcessing
:
:
Config
:
:
GainController2
config
;
ASSERT_EQ
(
config
.
fixed_gain_db
0
.
f
)
;
gain_controller2
-
>
ApplyConfig
(
config
)
;
gain_controller2
-
>
Process
(
&
ab
)
;
EXPECT_EQ
(
ab
.
channels_f
(
)
[
0
]
[
0
]
sample_value
)
;
config
.
fixed_gain_db
=
5
.
f
;
gain_controller2
-
>
ApplyConfig
(
config
)
;
gain_controller2
-
>
Process
(
&
ab
)
;
EXPECT_LT
(
sample_value
ab
.
channels_f
(
)
[
0
]
[
0
]
)
;
}
}
}
