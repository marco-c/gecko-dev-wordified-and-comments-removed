#
ifndef
MODULES_AUDIO_PROCESSING_AEC3_ERLE_ESTIMATOR_H_
#
define
MODULES_AUDIO_PROCESSING_AEC3_ERLE_ESTIMATOR_H_
#
include
<
array
>
#
include
"
modules
/
audio_processing
/
aec3
/
aec3_common
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
webrtc
{
class
ErleEstimator
{
public
:
ErleEstimator
(
float
min_erle
float
max_erle_lf
float
max_erle_hf
)
;
~
ErleEstimator
(
)
;
void
Update
(
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
&
render_spectrum
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
&
capture_spectrum
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
&
subtractor_spectrum
)
;
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
&
Erle
(
)
const
{
return
erle_
;
}
float
ErleTimeDomain
(
)
const
{
return
erle_time_domain_
;
}
private
:
std
:
:
array
<
float
kFftLengthBy2Plus1
>
erle_
;
std
:
:
array
<
int
kFftLengthBy2Minus1
>
hold_counters_
;
float
erle_time_domain_
;
int
hold_counter_time_domain_
;
const
float
min_erle_
;
const
float
max_erle_lf_
;
const
float
max_erle_hf_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
ErleEstimator
)
;
}
;
}
#
endif
