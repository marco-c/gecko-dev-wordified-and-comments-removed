#
include
"
modules
/
audio_processing
/
aec3
/
erl_estimator
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
void
VerifyErl
(
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
&
erl
float
erl_time_domain
float
reference
)
{
std
:
:
for_each
(
erl
.
begin
(
)
erl
.
end
(
)
[
reference
]
(
float
a
)
{
EXPECT_NEAR
(
reference
a
0
.
001
)
;
}
)
;
EXPECT_NEAR
(
reference
erl_time_domain
0
.
001
)
;
}
}
TEST
(
ErlEstimator
Estimates
)
{
std
:
:
array
<
float
kFftLengthBy2Plus1
>
X2
;
std
:
:
array
<
float
kFftLengthBy2Plus1
>
Y2
;
ErlEstimator
estimator
;
X2
.
fill
(
500
*
1000
.
f
*
1000
.
f
)
;
Y2
.
fill
(
10
*
X2
[
0
]
)
;
for
(
size_t
k
=
0
;
k
<
200
;
+
+
k
)
{
estimator
.
Update
(
X2
Y2
)
;
}
VerifyErl
(
estimator
.
Erl
(
)
estimator
.
ErlTimeDomain
(
)
10
.
f
)
;
Y2
.
fill
(
10000
*
X2
[
0
]
)
;
for
(
size_t
k
=
0
;
k
<
998
;
+
+
k
)
{
estimator
.
Update
(
X2
Y2
)
;
}
VerifyErl
(
estimator
.
Erl
(
)
estimator
.
ErlTimeDomain
(
)
10
.
f
)
;
estimator
.
Update
(
X2
Y2
)
;
VerifyErl
(
estimator
.
Erl
(
)
estimator
.
ErlTimeDomain
(
)
20
.
f
)
;
for
(
size_t
k
=
0
;
k
<
1000
;
+
+
k
)
{
estimator
.
Update
(
X2
Y2
)
;
}
VerifyErl
(
estimator
.
Erl
(
)
estimator
.
ErlTimeDomain
(
)
1000
.
f
)
;
X2
.
fill
(
1000
.
f
*
1000
.
f
)
;
Y2
.
fill
(
10
*
X2
[
0
]
)
;
for
(
size_t
k
=
0
;
k
<
200
;
+
+
k
)
{
estimator
.
Update
(
X2
Y2
)
;
}
VerifyErl
(
estimator
.
Erl
(
)
estimator
.
ErlTimeDomain
(
)
1000
.
f
)
;
}
}
