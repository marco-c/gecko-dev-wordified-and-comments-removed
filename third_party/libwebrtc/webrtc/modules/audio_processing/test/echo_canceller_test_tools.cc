#
include
"
modules
/
audio_processing
/
test
/
echo_canceller_test_tools
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
void
RandomizeSampleVector
(
Random
*
random_generator
rtc
:
:
ArrayView
<
float
>
v
)
{
for
(
auto
&
v_k
:
v
)
{
v_k
=
2
*
32767
.
f
*
random_generator
-
>
Rand
<
float
>
(
)
-
32767
.
f
;
}
}
template
<
typename
T
>
void
DelayBuffer
<
T
>
:
:
Delay
(
rtc
:
:
ArrayView
<
const
T
>
x
rtc
:
:
ArrayView
<
T
>
x_delayed
)
{
RTC_DCHECK_EQ
(
x
.
size
(
)
x_delayed
.
size
(
)
)
;
if
(
buffer_
.
empty
(
)
)
{
std
:
:
copy
(
x
.
begin
(
)
x
.
end
(
)
x_delayed
.
begin
(
)
)
;
}
else
{
for
(
size_t
k
=
0
;
k
<
x
.
size
(
)
;
+
+
k
)
{
x_delayed
[
k
]
=
buffer_
[
next_insert_index_
]
;
buffer_
[
next_insert_index_
]
=
x
[
k
]
;
next_insert_index_
=
(
next_insert_index_
+
1
)
%
buffer_
.
size
(
)
;
}
}
}
template
class
DelayBuffer
<
float
>
;
template
class
DelayBuffer
<
int
>
;
}
