#
include
<
vector
>
#
include
"
modules
/
audio_processing
/
residual_echo_detector
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
TEST
(
ResidualEchoDetectorTests
Echo
)
{
ResidualEchoDetector
echo_detector
;
echo_detector
.
SetReliabilityForTest
(
1
.
0f
)
;
std
:
:
vector
<
float
>
ones
(
160
1
.
f
)
;
std
:
:
vector
<
float
>
zeros
(
160
0
.
f
)
;
for
(
int
i
=
0
;
i
<
1000
;
i
+
+
)
{
if
(
i
%
20
=
=
0
)
{
echo_detector
.
AnalyzeRenderAudio
(
ones
)
;
echo_detector
.
AnalyzeCaptureAudio
(
zeros
)
;
}
else
if
(
i
%
20
=
=
10
)
{
echo_detector
.
AnalyzeRenderAudio
(
zeros
)
;
echo_detector
.
AnalyzeCaptureAudio
(
ones
)
;
}
else
{
echo_detector
.
AnalyzeRenderAudio
(
zeros
)
;
echo_detector
.
AnalyzeCaptureAudio
(
zeros
)
;
}
}
EXPECT_NEAR
(
1
.
f
echo_detector
.
echo_likelihood
(
)
0
.
01f
)
;
}
TEST
(
ResidualEchoDetectorTests
NoEcho
)
{
ResidualEchoDetector
echo_detector
;
echo_detector
.
SetReliabilityForTest
(
1
.
0f
)
;
std
:
:
vector
<
float
>
ones
(
160
1
.
f
)
;
std
:
:
vector
<
float
>
zeros
(
160
0
.
f
)
;
for
(
int
i
=
0
;
i
<
1000
;
i
+
+
)
{
if
(
i
%
20
=
=
0
)
{
echo_detector
.
AnalyzeRenderAudio
(
ones
)
;
}
else
{
echo_detector
.
AnalyzeRenderAudio
(
zeros
)
;
}
echo_detector
.
AnalyzeCaptureAudio
(
zeros
)
;
}
EXPECT_NEAR
(
0
.
f
echo_detector
.
echo_likelihood
(
)
0
.
01f
)
;
}
TEST
(
ResidualEchoDetectorTests
EchoWithRenderClockDrift
)
{
ResidualEchoDetector
echo_detector
;
echo_detector
.
SetReliabilityForTest
(
1
.
0f
)
;
std
:
:
vector
<
float
>
ones
(
160
1
.
f
)
;
std
:
:
vector
<
float
>
zeros
(
160
0
.
f
)
;
for
(
int
i
=
0
;
i
<
1000
;
i
+
+
)
{
if
(
i
%
20
=
=
0
)
{
echo_detector
.
AnalyzeRenderAudio
(
ones
)
;
echo_detector
.
AnalyzeCaptureAudio
(
zeros
)
;
}
else
if
(
i
%
20
=
=
10
)
{
echo_detector
.
AnalyzeRenderAudio
(
zeros
)
;
echo_detector
.
AnalyzeCaptureAudio
(
ones
)
;
}
else
{
echo_detector
.
AnalyzeRenderAudio
(
zeros
)
;
echo_detector
.
AnalyzeCaptureAudio
(
zeros
)
;
}
if
(
i
%
100
=
=
0
)
{
echo_detector
.
AnalyzeRenderAudio
(
zeros
)
;
}
}
EXPECT_GT
(
echo_detector
.
echo_likelihood
(
)
0
.
75f
)
;
}
TEST
(
ResidualEchoDetectorTests
EchoWithCaptureClockDrift
)
{
ResidualEchoDetector
echo_detector
;
echo_detector
.
SetReliabilityForTest
(
1
.
0f
)
;
std
:
:
vector
<
float
>
ones
(
160
1
.
f
)
;
std
:
:
vector
<
float
>
zeros
(
160
0
.
f
)
;
for
(
int
i
=
0
;
i
<
1000
;
i
+
+
)
{
if
(
i
%
20
=
=
0
)
{
echo_detector
.
AnalyzeRenderAudio
(
ones
)
;
echo_detector
.
AnalyzeCaptureAudio
(
zeros
)
;
}
else
if
(
i
%
20
=
=
10
)
{
echo_detector
.
AnalyzeRenderAudio
(
zeros
)
;
echo_detector
.
AnalyzeCaptureAudio
(
ones
)
;
}
else
{
echo_detector
.
AnalyzeRenderAudio
(
zeros
)
;
echo_detector
.
AnalyzeCaptureAudio
(
zeros
)
;
}
if
(
i
%
100
=
=
0
)
{
echo_detector
.
AnalyzeCaptureAudio
(
zeros
)
;
}
}
EXPECT_NEAR
(
1
.
f
echo_detector
.
echo_likelihood
(
)
0
.
01f
)
;
}
}
