#
include
"
media
/
engine
/
payload_type_mapper
.
h
"
#
include
<
utility
>
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
common_types
.
h
"
#
include
"
media
/
base
/
mediaconstants
.
h
"
namespace
cricket
{
webrtc
:
:
SdpAudioFormat
AudioCodecToSdpAudioFormat
(
const
AudioCodec
&
ac
)
{
return
webrtc
:
:
SdpAudioFormat
(
ac
.
name
ac
.
clockrate
ac
.
channels
ac
.
params
)
;
}
PayloadTypeMapper
:
:
PayloadTypeMapper
(
)
:
next_unused_payload_type_
(
96
)
max_payload_type_
(
127
)
mappings_
(
{
{
{
"
PCMU
"
8000
1
}
0
}
{
{
"
GSM
"
8000
1
}
3
}
{
{
"
G723
"
8000
1
}
4
}
{
{
"
DVI4
"
8000
1
}
5
}
{
{
"
DVI4
"
16000
1
}
6
}
{
{
"
LPC
"
8000
1
}
7
}
{
{
"
PCMA
"
8000
1
}
8
}
{
{
"
G722
"
8000
1
}
9
}
{
{
"
L16
"
44100
2
}
10
}
{
{
"
L16
"
44100
1
}
11
}
{
{
"
QCELP
"
8000
1
}
12
}
{
{
"
CN
"
8000
1
}
13
}
{
{
"
MPA
"
90000
0
}
14
}
{
{
"
MPA
"
90000
1
}
14
}
{
{
"
G728
"
8000
1
}
15
}
{
{
"
DVI4
"
11025
1
}
16
}
{
{
"
DVI4
"
22050
1
}
17
}
{
{
"
G729
"
8000
1
}
18
}
{
{
kGoogleRtpDataCodecName
0
0
}
kGoogleRtpDataCodecPlType
}
{
{
kIlbcCodecName
8000
1
}
102
}
{
{
kIsacCodecName
16000
1
}
103
}
{
{
kIsacCodecName
32000
1
}
104
}
{
{
kCnCodecName
16000
1
}
105
}
{
{
kCnCodecName
32000
1
}
106
}
{
{
kGoogleSctpDataCodecName
0
0
}
kGoogleSctpDataCodecPlType
}
{
{
kOpusCodecName
48000
2
{
{
"
minptime
"
"
10
"
}
{
"
useinbandfec
"
"
1
"
}
}
}
111
}
{
{
kDtmfCodecName
48000
1
}
110
}
{
{
kDtmfCodecName
32000
1
}
112
}
{
{
kDtmfCodecName
16000
1
}
113
}
{
{
kDtmfCodecName
8000
1
}
126
}
}
)
{
for
(
const
auto
&
mapping
:
mappings_
)
{
used_payload_types_
.
insert
(
mapping
.
second
)
;
}
}
PayloadTypeMapper
:
:
~
PayloadTypeMapper
(
)
=
default
;
rtc
:
:
Optional
<
int
>
PayloadTypeMapper
:
:
GetMappingFor
(
const
webrtc
:
:
SdpAudioFormat
&
format
)
{
auto
iter
=
mappings_
.
find
(
format
)
;
if
(
iter
!
=
mappings_
.
end
(
)
)
return
iter
-
>
second
;
for
(
;
next_unused_payload_type_
<
=
max_payload_type_
;
+
+
next_unused_payload_type_
)
{
int
payload_type
=
next_unused_payload_type_
;
if
(
used_payload_types_
.
find
(
payload_type
)
=
=
used_payload_types_
.
end
(
)
)
{
used_payload_types_
.
insert
(
payload_type
)
;
mappings_
[
format
]
=
payload_type
;
+
+
next_unused_payload_type_
;
return
payload_type
;
}
}
return
rtc
:
:
nullopt
;
}
rtc
:
:
Optional
<
int
>
PayloadTypeMapper
:
:
FindMappingFor
(
const
webrtc
:
:
SdpAudioFormat
&
format
)
const
{
auto
iter
=
mappings_
.
find
(
format
)
;
if
(
iter
!
=
mappings_
.
end
(
)
)
return
iter
-
>
second
;
return
rtc
:
:
nullopt
;
}
rtc
:
:
Optional
<
AudioCodec
>
PayloadTypeMapper
:
:
ToAudioCodec
(
const
webrtc
:
:
SdpAudioFormat
&
format
)
{
auto
opt_payload_type
=
GetMappingFor
(
format
)
;
if
(
opt_payload_type
)
{
AudioCodec
codec
(
*
opt_payload_type
format
.
name
format
.
clockrate_hz
0
format
.
num_channels
)
;
codec
.
params
=
format
.
parameters
;
return
std
:
:
move
(
codec
)
;
}
return
rtc
:
:
nullopt
;
}
bool
PayloadTypeMapper
:
:
SdpAudioFormatOrdering
:
:
operator
(
)
(
const
webrtc
:
:
SdpAudioFormat
&
a
const
webrtc
:
:
SdpAudioFormat
&
b
)
const
{
if
(
a
.
clockrate_hz
=
=
b
.
clockrate_hz
)
{
if
(
a
.
num_channels
=
=
b
.
num_channels
)
{
int
name_cmp
=
STR_CASE_CMP
(
a
.
name
.
c_str
(
)
b
.
name
.
c_str
(
)
)
;
if
(
name_cmp
=
=
0
)
return
a
.
parameters
<
b
.
parameters
;
return
name_cmp
<
0
;
}
return
a
.
num_channels
<
b
.
num_channels
;
}
return
a
.
clockrate_hz
<
b
.
clockrate_hz
;
}
}
