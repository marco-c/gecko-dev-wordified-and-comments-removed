#
ifndef
MEDIA_BASE_ADAPTEDVIDEOTRACKSOURCE_H_
#
define
MEDIA_BASE_ADAPTEDVIDEOTRACKSOURCE_H_
#
include
"
api
/
mediastreaminterface
.
h
"
#
include
"
api
/
notifier
.
h
"
#
include
"
media
/
base
/
videoadapter
.
h
"
#
include
"
media
/
base
/
videobroadcaster
.
h
"
namespace
rtc
{
class
AdaptedVideoTrackSource
:
public
webrtc
:
:
Notifier
<
webrtc
:
:
VideoTrackSourceInterface
>
{
public
:
AdaptedVideoTrackSource
(
)
;
protected
:
explicit
AdaptedVideoTrackSource
(
int
required_alignment
)
;
void
OnFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
;
bool
AdaptFrame
(
int
width
int
height
int64_t
time_us
int
*
out_width
int
*
out_height
int
*
crop_width
int
*
crop_height
int
*
crop_x
int
*
crop_y
)
;
bool
apply_rotation
(
)
;
cricket
:
:
VideoAdapter
*
video_adapter
(
)
{
return
&
video_adapter_
;
}
private
:
void
AddOrUpdateSink
(
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
const
rtc
:
:
VideoSinkWants
&
wants
)
override
;
void
RemoveSink
(
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
)
override
;
bool
GetStats
(
Stats
*
stats
)
override
;
void
OnSinkWantsChanged
(
const
rtc
:
:
VideoSinkWants
&
wants
)
;
rtc
:
:
ThreadChecker
thread_checker_
;
cricket
:
:
VideoAdapter
video_adapter_
;
rtc
:
:
CriticalSection
stats_crit_
;
rtc
:
:
Optional
<
Stats
>
stats_
RTC_GUARDED_BY
(
stats_crit_
)
;
VideoBroadcaster
broadcaster_
;
}
;
}
#
endif
