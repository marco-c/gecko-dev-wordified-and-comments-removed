#
include
<
vector
>
#
include
"
media
/
base
/
rtputils
.
h
"
#
include
"
media
/
base
/
fakertp
.
h
"
#
include
"
rtc_base
/
asyncpacketsocket
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
namespace
cricket
{
static
const
uint8_t
kRtpPacketWithMarker
[
]
=
{
0x80
0x80
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
}
;
static
const
uint8_t
kRtpPacketWithMarkerAndCsrcAndExtension
[
]
=
{
0x93
0x80
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x02
0x03
0x04
0x12
0x34
0x56
0x78
0xAA
0xBB
0xCC
0xDD
0xBE
0xDE
0x00
0x02
0x11
0x22
0x33
0x44
0x55
0x66
0x77
0x88
}
;
static
const
uint8_t
kInvalidPacket
[
]
=
{
0x80
0x00
}
;
static
const
uint8_t
kInvalidPacketWithCsrc
[
]
=
{
0x83
0x00
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x02
0x03
0x04
0x12
0x34
0x56
0x78
0xAA
0xBB
0xCC
}
;
static
const
uint8_t
kInvalidPacketWithCsrcAndExtension1
[
]
=
{
0x93
0x80
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x02
0x03
0x04
0x12
0x34
0x56
0x78
0xAA
0xBB
0xCC
0xDD
0xBE
0xDE
0x00
}
;
static
const
uint8_t
kInvalidPacketWithCsrcAndExtension2
[
]
=
{
0x93
0x80
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x01
0x01
0x02
0x03
0x04
0x12
0x34
0x56
0x78
0xAA
0xBB
0xCC
0xDD
0xBE
0xDE
0x00
0x02
0x11
0x22
0x33
0x44
0x55
0x66
0x77
}
;
static
const
uint8_t
kNonCompoundRtcpPliFeedbackPacket
[
]
=
{
0x81
0xCE
0x00
0x0C
0x00
0x00
0x11
0x11
0x00
0x00
0x11
0x11
}
;
static
const
uint8_t
kNonCompoundRtcpAppPacket
[
]
=
{
0x81
0xCC
0x00
0x0C
0x00
0x00
0x11
0x11
}
;
static
const
uint8_t
kNonCompoundRtcpSDESPacket
[
]
=
{
0x80
0xCA
0x00
0x00
}
;
static
uint8_t
kFakeTag
[
4
]
=
{
0xba
0xdd
0xba
0xdd
}
;
static
uint8_t
kTestKey
[
]
=
"
12345678901234567890
"
;
static
uint8_t
kTestAstValue
[
3
]
=
{
0xaa
0xbb
0xcc
}
;
static
uint8_t
kRtpMsgWith2ByteExtnHeader
[
]
=
{
0x90
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xAA
0xBB
0xCC
0XDD
0x10
0x00
0x00
0x01
0x01
0x00
0x00
0x00
}
;
static
uint8_t
kRtpMsgWithAbsSendTimeExtension
[
]
=
{
0x90
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xBE
0xDE
0x00
0x02
0x22
0x00
0x02
0x1c
0x32
0xaa
0xbb
0xcc
}
;
static
const
int
kAstIndexInRtpMsg
=
21
;
TEST
(
RtpUtilsTest
GetRtp
)
{
EXPECT_TRUE
(
IsRtpPacket
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
)
)
;
int
pt
;
EXPECT_TRUE
(
GetRtpPayloadType
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
&
pt
)
)
;
EXPECT_EQ
(
0
pt
)
;
EXPECT_TRUE
(
GetRtpPayloadType
(
kRtpPacketWithMarker
sizeof
(
kRtpPacketWithMarker
)
&
pt
)
)
;
EXPECT_EQ
(
0
pt
)
;
int
seq_num
;
EXPECT_TRUE
(
GetRtpSeqNum
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
&
seq_num
)
)
;
EXPECT_EQ
(
1
seq_num
)
;
uint32_t
ts
;
EXPECT_TRUE
(
GetRtpTimestamp
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
&
ts
)
)
;
EXPECT_EQ
(
0u
ts
)
;
uint32_t
ssrc
;
EXPECT_TRUE
(
GetRtpSsrc
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
&
ssrc
)
)
;
EXPECT_EQ
(
1u
ssrc
)
;
RtpHeader
header
;
EXPECT_TRUE
(
GetRtpHeader
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
&
header
)
)
;
EXPECT_EQ
(
0
header
.
payload_type
)
;
EXPECT_EQ
(
1
header
.
seq_num
)
;
EXPECT_EQ
(
0u
header
.
timestamp
)
;
EXPECT_EQ
(
1u
header
.
ssrc
)
;
EXPECT_FALSE
(
GetRtpPayloadType
(
kInvalidPacket
sizeof
(
kInvalidPacket
)
&
pt
)
)
;
EXPECT_FALSE
(
GetRtpSeqNum
(
kInvalidPacket
sizeof
(
kInvalidPacket
)
&
seq_num
)
)
;
EXPECT_FALSE
(
GetRtpTimestamp
(
kInvalidPacket
sizeof
(
kInvalidPacket
)
&
ts
)
)
;
EXPECT_FALSE
(
GetRtpSsrc
(
kInvalidPacket
sizeof
(
kInvalidPacket
)
&
ssrc
)
)
;
}
TEST
(
RtpUtilsTest
SetRtpHeader
)
{
uint8_t
packet
[
]
=
{
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
}
;
RtpHeader
header
=
{
9
1111
2222u
3333u
}
;
EXPECT_TRUE
(
SetRtpHeader
(
packet
sizeof
(
packet
)
header
)
)
;
EXPECT_EQ
(
128u
packet
[
0
]
)
;
size_t
len
;
EXPECT_TRUE
(
GetRtpHeaderLen
(
packet
sizeof
(
packet
)
&
len
)
)
;
EXPECT_EQ
(
12U
len
)
;
EXPECT_TRUE
(
GetRtpHeader
(
packet
sizeof
(
packet
)
&
header
)
)
;
EXPECT_EQ
(
9
header
.
payload_type
)
;
EXPECT_EQ
(
1111
header
.
seq_num
)
;
EXPECT_EQ
(
2222u
header
.
timestamp
)
;
EXPECT_EQ
(
3333u
header
.
ssrc
)
;
}
TEST
(
RtpUtilsTest
GetRtpHeaderLen
)
{
size_t
len
;
EXPECT_TRUE
(
GetRtpHeaderLen
(
kPcmuFrame
sizeof
(
kPcmuFrame
)
&
len
)
)
;
EXPECT_EQ
(
12U
len
)
;
EXPECT_TRUE
(
GetRtpHeaderLen
(
kRtpPacketWithMarkerAndCsrcAndExtension
sizeof
(
kRtpPacketWithMarkerAndCsrcAndExtension
)
&
len
)
)
;
EXPECT_EQ
(
sizeof
(
kRtpPacketWithMarkerAndCsrcAndExtension
)
len
)
;
EXPECT_FALSE
(
GetRtpHeaderLen
(
kInvalidPacket
sizeof
(
kInvalidPacket
)
&
len
)
)
;
EXPECT_FALSE
(
GetRtpHeaderLen
(
kInvalidPacketWithCsrc
sizeof
(
kInvalidPacketWithCsrc
)
&
len
)
)
;
EXPECT_FALSE
(
GetRtpHeaderLen
(
kInvalidPacketWithCsrcAndExtension1
sizeof
(
kInvalidPacketWithCsrcAndExtension1
)
&
len
)
)
;
EXPECT_FALSE
(
GetRtpHeaderLen
(
kInvalidPacketWithCsrcAndExtension2
sizeof
(
kInvalidPacketWithCsrcAndExtension2
)
&
len
)
)
;
}
TEST
(
RtpUtilsTest
GetRtcp
)
{
int
pt
;
EXPECT_TRUE
(
GetRtcpType
(
kRtcpReport
sizeof
(
kRtcpReport
)
&
pt
)
)
;
EXPECT_EQ
(
0xc9
pt
)
;
EXPECT_FALSE
(
GetRtcpType
(
kInvalidPacket
sizeof
(
kInvalidPacket
)
&
pt
)
)
;
uint32_t
ssrc
;
EXPECT_TRUE
(
GetRtcpSsrc
(
kNonCompoundRtcpPliFeedbackPacket
sizeof
(
kNonCompoundRtcpPliFeedbackPacket
)
&
ssrc
)
)
;
EXPECT_TRUE
(
GetRtcpSsrc
(
kNonCompoundRtcpAppPacket
sizeof
(
kNonCompoundRtcpAppPacket
)
&
ssrc
)
)
;
EXPECT_FALSE
(
GetRtcpSsrc
(
kNonCompoundRtcpSDESPacket
sizeof
(
kNonCompoundRtcpSDESPacket
)
&
ssrc
)
)
;
}
TEST
(
RtpUtilsTest
InvalidRtpHeader
)
{
const
uint8_t
kRtpMsgWithInvalidLength
[
]
=
{
0x94
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xAA
0xBB
0xCC
0XDD
0xDD
0xCC
0xBB
0xAA
}
;
EXPECT_FALSE
(
ValidateRtpHeader
(
kRtpMsgWithInvalidLength
sizeof
(
kRtpMsgWithInvalidLength
)
nullptr
)
)
;
const
uint8_t
kRtpMsgWithInvalidExtnLength
[
]
=
{
0x90
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xBE
0xDE
0x0A
0x00
}
;
EXPECT_FALSE
(
ValidateRtpHeader
(
kRtpMsgWithInvalidExtnLength
sizeof
(
kRtpMsgWithInvalidExtnLength
)
nullptr
)
)
;
}
TEST
(
RtpUtilsTest
Valid2ByteExtnHdrRtpMessage
)
{
EXPECT_TRUE
(
ValidateRtpHeader
(
kRtpMsgWith2ByteExtnHeader
sizeof
(
kRtpMsgWith2ByteExtnHeader
)
nullptr
)
)
;
}
TEST
(
RtpUtilsTest
ValidRtpPacketWithAbsSendTimeExtension
)
{
EXPECT_TRUE
(
ValidateRtpHeader
(
kRtpMsgWithAbsSendTimeExtension
sizeof
(
kRtpMsgWithAbsSendTimeExtension
)
nullptr
)
)
;
}
TEST
(
RtpUtilsTest
UpdateAbsSendTimeExtensionIn2ByteHeaderExtn
)
{
std
:
:
vector
<
uint8_t
>
data
(
kRtpMsgWith2ByteExtnHeader
kRtpMsgWith2ByteExtnHeader
+
sizeof
(
kRtpMsgWith2ByteExtnHeader
)
)
;
EXPECT_FALSE
(
UpdateRtpAbsSendTimeExtension
(
&
data
[
0
]
data
.
size
(
)
3
0
)
)
;
}
TEST
(
RtpUtilsTest
UpdateAbsSendTimeExtensionInTurnSendIndication
)
{
uint8_t
message_without_extension
[
]
=
{
0x00
0x16
0x00
0x18
0x21
0x12
0xA4
0x42
'
0
'
'
1
'
'
2
'
'
3
'
'
4
'
'
5
'
'
6
'
'
7
'
'
8
'
'
9
'
'
a
'
'
b
'
0x00
0x20
0x00
0x04
0x00
0x00
0x00
0x00
0x00
0x13
0x00
0x0C
0x80
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
}
;
EXPECT_TRUE
(
UpdateRtpAbsSendTimeExtension
(
message_without_extension
sizeof
(
message_without_extension
)
3
0
)
)
;
uint8_t
message
[
]
=
{
0x00
0x16
0x00
0x24
0x21
0x12
0xA4
0x42
'
0
'
'
1
'
'
2
'
'
3
'
'
4
'
'
5
'
'
6
'
'
7
'
'
8
'
'
9
'
'
a
'
'
b
'
0x00
0x20
0x00
0x04
0x00
0x00
0x00
0x00
0x00
0x13
0x00
0x18
0x90
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0xBE
0xDE
0x00
0x02
0x22
0xaa
0xbb
0xcc
0x32
0xaa
0xbb
0xcc
}
;
EXPECT_TRUE
(
UpdateRtpAbsSendTimeExtension
(
message
sizeof
(
message
)
3
0
)
)
;
}
TEST
(
RtpUtilsTest
ApplyPacketOptionsWithDefaultValues
)
{
rtc
:
:
PacketTimeUpdateParams
packet_time_params
;
std
:
:
vector
<
uint8_t
>
rtp_packet
(
kRtpMsgWithAbsSendTimeExtension
kRtpMsgWithAbsSendTimeExtension
+
sizeof
(
kRtpMsgWithAbsSendTimeExtension
)
)
;
rtp_packet
.
insert
(
rtp_packet
.
end
(
)
kFakeTag
kFakeTag
+
sizeof
(
kFakeTag
)
)
;
EXPECT_TRUE
(
ApplyPacketOptions
(
&
rtp_packet
[
0
]
rtp_packet
.
size
(
)
packet_time_params
0
)
)
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
sizeof
(
kRtpMsgWithAbsSendTimeExtension
)
]
kFakeTag
4
)
)
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
kAstIndexInRtpMsg
]
kTestAstValue
sizeof
(
kTestAstValue
)
)
)
;
}
TEST
(
RtpUtilsTest
ApplyPacketOptionsWithAuthParams
)
{
rtc
:
:
PacketTimeUpdateParams
packet_time_params
;
packet_time_params
.
srtp_auth_key
.
assign
(
kTestKey
kTestKey
+
sizeof
(
kTestKey
)
)
;
packet_time_params
.
srtp_auth_tag_len
=
4
;
std
:
:
vector
<
uint8_t
>
rtp_packet
(
kRtpMsgWithAbsSendTimeExtension
kRtpMsgWithAbsSendTimeExtension
+
sizeof
(
kRtpMsgWithAbsSendTimeExtension
)
)
;
rtp_packet
.
insert
(
rtp_packet
.
end
(
)
kFakeTag
kFakeTag
+
sizeof
(
kFakeTag
)
)
;
EXPECT_TRUE
(
ApplyPacketOptions
(
&
rtp_packet
[
0
]
rtp_packet
.
size
(
)
packet_time_params
0
)
)
;
uint8_t
kExpectedTag
[
]
=
{
0xc1
0x7a
0x8c
0xa0
}
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
sizeof
(
kRtpMsgWithAbsSendTimeExtension
)
]
kExpectedTag
sizeof
(
kExpectedTag
)
)
)
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
kAstIndexInRtpMsg
]
kTestAstValue
sizeof
(
kTestAstValue
)
)
)
;
}
TEST
(
RtpUtilsTest
UpdateAbsSendTimeExtensionInRtpPacket
)
{
std
:
:
vector
<
uint8_t
>
rtp_packet
(
kRtpMsgWithAbsSendTimeExtension
kRtpMsgWithAbsSendTimeExtension
+
sizeof
(
kRtpMsgWithAbsSendTimeExtension
)
)
;
EXPECT_TRUE
(
UpdateRtpAbsSendTimeExtension
(
&
rtp_packet
[
0
]
rtp_packet
.
size
(
)
3
51183266
)
)
;
const
uint8_t
kExpectedTimestamp
[
3
]
=
{
0xcc
0xbb
0xaa
}
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
kAstIndexInRtpMsg
]
kExpectedTimestamp
sizeof
(
kExpectedTimestamp
)
)
)
;
}
TEST
(
RtpUtilsTest
ApplyPacketOptionsWithAuthParamsAndAbsSendTime
)
{
rtc
:
:
PacketTimeUpdateParams
packet_time_params
;
packet_time_params
.
srtp_auth_key
.
assign
(
kTestKey
kTestKey
+
sizeof
(
kTestKey
)
)
;
packet_time_params
.
srtp_auth_tag_len
=
4
;
packet_time_params
.
rtp_sendtime_extension_id
=
3
;
std
:
:
vector
<
uint8_t
>
rtp_packet
(
kRtpMsgWithAbsSendTimeExtension
kRtpMsgWithAbsSendTimeExtension
+
sizeof
(
kRtpMsgWithAbsSendTimeExtension
)
)
;
rtp_packet
.
insert
(
rtp_packet
.
end
(
)
kFakeTag
kFakeTag
+
sizeof
(
kFakeTag
)
)
;
EXPECT_TRUE
(
ApplyPacketOptions
(
&
rtp_packet
[
0
]
rtp_packet
.
size
(
)
packet_time_params
51183266
)
)
;
const
uint8_t
kExpectedTag
[
]
=
{
0x81
0xd1
0x2c
0x0e
}
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
sizeof
(
kRtpMsgWithAbsSendTimeExtension
)
]
kExpectedTag
sizeof
(
kExpectedTag
)
)
)
;
const
uint8_t
kExpectedTimestamp
[
3
]
=
{
0xcc
0xbb
0xaa
}
;
EXPECT_EQ
(
0
memcmp
(
&
rtp_packet
[
kAstIndexInRtpMsg
]
kExpectedTimestamp
sizeof
(
kExpectedTimestamp
)
)
)
;
}
}
