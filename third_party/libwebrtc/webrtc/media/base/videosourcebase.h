#
ifndef
MEDIA_BASE_VIDEOSOURCEBASE_H_
#
define
MEDIA_BASE_VIDEOSOURCEBASE_H_
#
include
<
vector
>
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
media
/
base
/
videosourceinterface
.
h
"
#
include
"
rtc_base
/
thread_checker
.
h
"
namespace
rtc
{
class
VideoSourceBase
:
public
VideoSourceInterface
<
webrtc
:
:
VideoFrame
>
{
public
:
VideoSourceBase
(
)
;
void
AddOrUpdateSink
(
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
const
VideoSinkWants
&
wants
)
override
;
void
RemoveSink
(
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
)
override
;
protected
:
struct
SinkPair
{
SinkPair
(
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
VideoSinkWants
wants
)
:
sink
(
sink
)
wants
(
wants
)
{
}
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
;
VideoSinkWants
wants
;
}
;
SinkPair
*
FindSinkPair
(
const
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
)
;
const
std
:
:
vector
<
SinkPair
>
&
sink_pairs
(
)
const
{
return
sinks_
;
}
ThreadChecker
thread_checker_
;
private
:
std
:
:
vector
<
SinkPair
>
sinks_
;
}
;
}
#
endif
