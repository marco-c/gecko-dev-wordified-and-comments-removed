#
ifndef
MEDIA_BASE_VIDEOADAPTER_H_
#
define
MEDIA_BASE_VIDEOADAPTER_H_
#
include
"
api
/
optional
.
h
"
#
include
"
media
/
base
/
videocommon
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
namespace
cricket
{
class
VideoAdapter
{
public
:
VideoAdapter
(
)
;
explicit
VideoAdapter
(
int
required_resolution_alignment
)
;
virtual
~
VideoAdapter
(
)
;
bool
AdaptFrameResolution
(
int
in_width
int
in_height
int64_t
in_timestamp_ns
int
*
cropped_width
int
*
cropped_height
int
*
out_width
int
*
out_height
)
;
void
OnOutputFormatRequest
(
const
VideoFormat
&
format
)
;
void
OnResolutionFramerateRequest
(
const
rtc
:
:
Optional
<
int
>
&
target_pixel_count
int
max_pixel_count
int
max_framerate_fps
)
;
virtual
void
OnScaleResolutionBy
(
rtc
:
:
Optional
<
float
>
scale_resolution_by
)
;
private
:
bool
KeepFrame
(
int64_t
in_timestamp_ns
)
;
int
frames_in_
;
int
frames_out_
;
int
frames_scaled_
;
int
adaption_changes_
;
int
previous_width_
;
int
previous_height_
;
const
int
required_resolution_alignment_
;
rtc
:
:
Optional
<
int64_t
>
next_frame_timestamp_ns_
RTC_GUARDED_BY
(
critical_section_
)
;
rtc
:
:
Optional
<
VideoFormat
>
requested_format_
RTC_GUARDED_BY
(
critical_section_
)
;
int
resolution_request_target_pixel_count_
RTC_GUARDED_BY
(
critical_section_
)
;
int
resolution_request_max_pixel_count_
RTC_GUARDED_BY
(
critical_section_
)
;
int
max_framerate_request_
RTC_GUARDED_BY
(
critical_section_
)
;
float
scale_resolution_by_
RTC_GUARDED_BY
(
critical_section_
)
;
bool
scale_
RTC_GUARDED_BY
(
critical_section_
)
;
rtc
:
:
CriticalSection
critical_section_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
VideoAdapter
)
;
}
;
}
#
endif
