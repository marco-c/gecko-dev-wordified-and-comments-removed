#
ifndef
MEDIA_BASE_VIDEOCOMMON_H_
#
define
MEDIA_BASE_VIDEOCOMMON_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
rtc_base
/
timeutils
.
h
"
namespace
cricket
{
const
uint32_t
kDummyVideoSsrc
=
0xFFFFFFFF
;
#
define
FPS_TO_INTERVAL
(
fps
)
\
(
fps
?
rtc
:
:
kNumNanosecsPerSec
/
fps
:
\
rtc
:
:
kNumNanosecsPerSec
/
10000
)
#
define
FOURCC
(
a
b
c
d
)
\
(
(
static_cast
<
uint32_t
>
(
a
)
)
|
(
static_cast
<
uint32_t
>
(
b
)
<
<
8
)
|
\
(
static_cast
<
uint32_t
>
(
c
)
<
<
16
)
|
(
static_cast
<
uint32_t
>
(
d
)
<
<
24
)
)
enum
FourCC
{
FOURCC_I420
=
FOURCC
(
'
I
'
'
4
'
'
2
'
'
0
'
)
FOURCC_I422
=
FOURCC
(
'
I
'
'
4
'
'
2
'
'
2
'
)
FOURCC_I444
=
FOURCC
(
'
I
'
'
4
'
'
4
'
'
4
'
)
FOURCC_I411
=
FOURCC
(
'
I
'
'
4
'
'
1
'
'
1
'
)
FOURCC_I400
=
FOURCC
(
'
I
'
'
4
'
'
0
'
'
0
'
)
FOURCC_NV21
=
FOURCC
(
'
N
'
'
V
'
'
2
'
'
1
'
)
FOURCC_NV12
=
FOURCC
(
'
N
'
'
V
'
'
1
'
'
2
'
)
FOURCC_YUY2
=
FOURCC
(
'
Y
'
'
U
'
'
Y
'
'
2
'
)
FOURCC_UYVY
=
FOURCC
(
'
U
'
'
Y
'
'
V
'
'
Y
'
)
FOURCC_M420
=
FOURCC
(
'
M
'
'
4
'
'
2
'
'
0
'
)
FOURCC_ARGB
=
FOURCC
(
'
A
'
'
R
'
'
G
'
'
B
'
)
FOURCC_BGRA
=
FOURCC
(
'
B
'
'
G
'
'
R
'
'
A
'
)
FOURCC_ABGR
=
FOURCC
(
'
A
'
'
B
'
'
G
'
'
R
'
)
FOURCC_24BG
=
FOURCC
(
'
2
'
'
4
'
'
B
'
'
G
'
)
FOURCC_RAW
=
FOURCC
(
'
r
'
'
a
'
'
w
'
'
'
)
FOURCC_RGBA
=
FOURCC
(
'
R
'
'
G
'
'
B
'
'
A
'
)
FOURCC_RGBP
=
FOURCC
(
'
R
'
'
G
'
'
B
'
'
P
'
)
FOURCC_RGBO
=
FOURCC
(
'
R
'
'
G
'
'
B
'
'
O
'
)
FOURCC_R444
=
FOURCC
(
'
R
'
'
4
'
'
4
'
'
4
'
)
FOURCC_RGGB
=
FOURCC
(
'
R
'
'
G
'
'
G
'
'
B
'
)
FOURCC_BGGR
=
FOURCC
(
'
B
'
'
G
'
'
G
'
'
R
'
)
FOURCC_GRBG
=
FOURCC
(
'
G
'
'
R
'
'
B
'
'
G
'
)
FOURCC_GBRG
=
FOURCC
(
'
G
'
'
B
'
'
R
'
'
G
'
)
FOURCC_MJPG
=
FOURCC
(
'
M
'
'
J
'
'
P
'
'
G
'
)
FOURCC_YV12
=
FOURCC
(
'
Y
'
'
V
'
'
1
'
'
2
'
)
FOURCC_YV16
=
FOURCC
(
'
Y
'
'
V
'
'
1
'
'
6
'
)
FOURCC_YV24
=
FOURCC
(
'
Y
'
'
V
'
'
2
'
'
4
'
)
FOURCC_YU12
=
FOURCC
(
'
Y
'
'
U
'
'
1
'
'
2
'
)
FOURCC_J420
=
FOURCC
(
'
J
'
'
4
'
'
2
'
'
0
'
)
FOURCC_J400
=
FOURCC
(
'
J
'
'
4
'
'
0
'
'
0
'
)
FOURCC_IYUV
=
FOURCC
(
'
I
'
'
Y
'
'
U
'
'
V
'
)
FOURCC_YU16
=
FOURCC
(
'
Y
'
'
U
'
'
1
'
'
6
'
)
FOURCC_YU24
=
FOURCC
(
'
Y
'
'
U
'
'
2
'
'
4
'
)
FOURCC_YUYV
=
FOURCC
(
'
Y
'
'
U
'
'
Y
'
'
V
'
)
FOURCC_YUVS
=
FOURCC
(
'
y
'
'
u
'
'
v
'
'
s
'
)
FOURCC_HDYC
=
FOURCC
(
'
H
'
'
D
'
'
Y
'
'
C
'
)
FOURCC_2VUY
=
FOURCC
(
'
2
'
'
v
'
'
u
'
'
y
'
)
FOURCC_JPEG
=
FOURCC
(
'
J
'
'
P
'
'
E
'
'
G
'
)
FOURCC_DMB1
=
FOURCC
(
'
d
'
'
m
'
'
b
'
'
1
'
)
FOURCC_BA81
=
FOURCC
(
'
B
'
'
A
'
'
8
'
'
1
'
)
FOURCC_RGB3
=
FOURCC
(
'
R
'
'
G
'
'
B
'
'
3
'
)
FOURCC_BGR3
=
FOURCC
(
'
B
'
'
G
'
'
R
'
'
3
'
)
FOURCC_CM32
=
FOURCC
(
0
0
0
32
)
FOURCC_CM24
=
FOURCC
(
0
0
0
24
)
FOURCC_H264
=
FOURCC
(
'
H
'
'
2
'
'
6
'
'
4
'
)
}
;
static
const
uint32_t
FOURCC_ANY
=
0xFFFFFFFF
;
uint32_t
CanonicalFourCC
(
uint32_t
fourcc
)
;
inline
std
:
:
string
GetFourccName
(
uint32_t
fourcc
)
{
std
:
:
string
name
;
name
.
push_back
(
static_cast
<
char
>
(
fourcc
&
0xFF
)
)
;
name
.
push_back
(
static_cast
<
char
>
(
(
fourcc
>
>
8
)
&
0xFF
)
)
;
name
.
push_back
(
static_cast
<
char
>
(
(
fourcc
>
>
16
)
&
0xFF
)
)
;
name
.
push_back
(
static_cast
<
char
>
(
(
fourcc
>
>
24
)
&
0xFF
)
)
;
return
name
;
}
struct
VideoFormatPod
{
int
width
;
int
height
;
int64_t
interval
;
uint32_t
fourcc
;
}
;
struct
VideoFormat
:
VideoFormatPod
{
static
const
int64_t
kMinimumInterval
=
rtc
:
:
kNumNanosecsPerSec
/
10000
;
VideoFormat
(
)
{
Construct
(
0
0
0
0
)
;
}
VideoFormat
(
int
w
int
h
int64_t
interval_ns
uint32_t
cc
)
{
Construct
(
w
h
interval_ns
cc
)
;
}
explicit
VideoFormat
(
const
VideoFormatPod
&
format
)
{
Construct
(
format
.
width
format
.
height
format
.
interval
format
.
fourcc
)
;
}
void
Construct
(
int
w
int
h
int64_t
interval_ns
uint32_t
cc
)
{
width
=
w
;
height
=
h
;
interval
=
interval_ns
;
fourcc
=
cc
;
}
static
int64_t
FpsToInterval
(
int
fps
)
{
return
fps
?
rtc
:
:
kNumNanosecsPerSec
/
fps
:
kMinimumInterval
;
}
static
int
IntervalToFps
(
int64_t
interval
)
{
if
(
!
interval
)
{
return
0
;
}
return
static_cast
<
int
>
(
rtc
:
:
kNumNanosecsPerSec
/
interval
)
;
}
static
float
IntervalToFpsFloat
(
int64_t
interval
)
{
if
(
!
interval
)
{
return
0
.
f
;
}
return
static_cast
<
float
>
(
rtc
:
:
kNumNanosecsPerSec
)
/
static_cast
<
float
>
(
interval
)
;
}
bool
operator
=
=
(
const
VideoFormat
&
format
)
const
{
return
width
=
=
format
.
width
&
&
height
=
=
format
.
height
&
&
interval
=
=
format
.
interval
&
&
fourcc
=
=
format
.
fourcc
;
}
bool
operator
!
=
(
const
VideoFormat
&
format
)
const
{
return
!
(
*
this
=
=
format
)
;
}
bool
operator
<
(
const
VideoFormat
&
format
)
const
{
return
(
fourcc
<
format
.
fourcc
)
|
|
(
fourcc
=
=
format
.
fourcc
&
&
width
<
format
.
width
)
|
|
(
fourcc
=
=
format
.
fourcc
&
&
width
=
=
format
.
width
&
&
height
<
format
.
height
)
|
|
(
fourcc
=
=
format
.
fourcc
&
&
width
=
=
format
.
width
&
&
height
=
=
format
.
height
&
&
interval
>
format
.
interval
)
;
}
int
framerate
(
)
const
{
return
IntervalToFps
(
interval
)
;
}
bool
IsSize0x0
(
)
const
{
return
0
=
=
width
&
&
0
=
=
height
;
}
bool
IsPixelRateLess
(
const
VideoFormat
&
format
)
const
{
return
width
*
height
*
framerate
(
)
<
format
.
width
*
format
.
height
*
format
.
framerate
(
)
;
}
std
:
:
string
ToString
(
)
const
;
}
;
}
#
endif
