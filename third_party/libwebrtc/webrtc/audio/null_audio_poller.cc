#
include
"
audio
/
null_audio_poller
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
namespace
internal
{
namespace
{
constexpr
int64_t
kPollDelayMs
=
10
;
constexpr
size_t
kNumChannels
=
1
;
constexpr
uint32_t
kSamplesPerSecond
=
48000
;
constexpr
size_t
kNumSamples
=
kSamplesPerSecond
/
100
;
}
NullAudioPoller
:
:
NullAudioPoller
(
AudioTransport
*
audio_transport
)
:
audio_transport_
(
audio_transport
)
reschedule_at_
(
rtc
:
:
TimeMillis
(
)
+
kPollDelayMs
)
{
RTC_DCHECK
(
audio_transport
)
;
OnMessage
(
nullptr
)
;
}
NullAudioPoller
:
:
~
NullAudioPoller
(
)
{
RTC_DCHECK
(
thread_checker_
.
CalledOnValidThread
(
)
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
Clear
(
this
)
;
}
void
NullAudioPoller
:
:
OnMessage
(
rtc
:
:
Message
*
msg
)
{
RTC_DCHECK
(
thread_checker_
.
CalledOnValidThread
(
)
)
;
int16_t
buffer
[
kNumSamples
*
kNumChannels
]
;
size_t
n_samples
;
int64_t
elapsed_time_ms
;
int64_t
ntp_time_ms
;
audio_transport_
-
>
NeedMorePlayData
(
kNumSamples
sizeof
(
int16_t
)
kNumChannels
kSamplesPerSecond
buffer
n_samples
&
elapsed_time_ms
&
ntp_time_ms
)
;
int64_t
now
=
rtc
:
:
TimeMillis
(
)
;
if
(
reschedule_at_
<
now
)
{
reschedule_at_
=
now
;
}
rtc
:
:
Thread
:
:
Current
(
)
-
>
PostAt
(
RTC_FROM_HERE
reschedule_at_
this
0
)
;
reschedule_at_
+
=
kPollDelayMs
;
}
}
}
