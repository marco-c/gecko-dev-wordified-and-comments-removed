#
ifndef
VOICE_ENGINE_TRANSPORT_FEEDBACK_PACKET_LOSS_TRACKER_H_
#
define
VOICE_ENGINE_TRANSPORT_FEEDBACK_PACKET_LOSS_TRACKER_H_
#
include
<
map
>
#
include
"
api
/
optional
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
TransportFeedback
;
}
struct
PacketFeedback
;
class
TransportFeedbackPacketLossTracker
final
{
public
:
TransportFeedbackPacketLossTracker
(
int64_t
max_window_size_ms
size_t
plr_min_num_acked_packets
size_t
rplr_min_num_acked_pairs
)
;
void
OnPacketAdded
(
uint16_t
seq_num
int64_t
send_time_ms
)
;
void
OnPacketFeedbackVector
(
const
std
:
:
vector
<
PacketFeedback
>
&
packet_feedbacks_vector
)
;
rtc
:
:
Optional
<
float
>
GetPacketLossRate
(
)
const
;
rtc
:
:
Optional
<
float
>
GetRecoverablePacketLossRate
(
)
const
;
void
Validate
(
)
const
;
private
:
enum
class
PacketStatus
{
Unacked
=
0
Received
=
1
Lost
=
2
}
;
struct
SentPacket
{
SentPacket
(
int64_t
send_time_ms
PacketStatus
status
)
:
send_time_ms
(
send_time_ms
)
status
(
status
)
{
}
int64_t
send_time_ms
;
PacketStatus
status
;
}
;
typedef
std
:
:
map
<
uint16_t
SentPacket
>
SentPacketStatusMap
;
typedef
SentPacketStatusMap
:
:
const_iterator
ConstPacketStatusIterator
;
void
Reset
(
)
;
uint16_t
ReferenceSequenceNumber
(
)
const
;
uint16_t
NewestSequenceNumber
(
)
const
;
void
UpdatePacketStatus
(
SentPacketStatusMap
:
:
iterator
it
PacketStatus
new_status
)
;
void
RemoveOldestPacketStatus
(
)
;
void
UpdateMetrics
(
ConstPacketStatusIterator
it
bool
apply
)
;
void
UpdatePlr
(
ConstPacketStatusIterator
it
bool
apply
)
;
void
UpdateRplr
(
ConstPacketStatusIterator
it
bool
apply
)
;
ConstPacketStatusIterator
PreviousPacketStatus
(
ConstPacketStatusIterator
it
)
const
;
ConstPacketStatusIterator
NextPacketStatus
(
ConstPacketStatusIterator
it
)
const
;
const
int64_t
max_window_size_ms_
;
size_t
acked_packets_
;
SentPacketStatusMap
packet_status_window_
;
ConstPacketStatusIterator
ref_packet_status_
;
struct
PlrState
{
explicit
PlrState
(
size_t
min_num_acked_packets
)
:
min_num_acked_packets_
(
min_num_acked_packets
)
{
Reset
(
)
;
}
void
Reset
(
)
{
num_received_packets_
=
0
;
num_lost_packets_
=
0
;
}
rtc
:
:
Optional
<
float
>
GetMetric
(
)
const
;
const
size_t
min_num_acked_packets_
;
size_t
num_received_packets_
;
size_t
num_lost_packets_
;
}
plr_state_
;
struct
RplrState
{
explicit
RplrState
(
size_t
min_num_acked_pairs
)
:
min_num_acked_pairs_
(
min_num_acked_pairs
)
{
Reset
(
)
;
}
void
Reset
(
)
{
num_acked_pairs_
=
0
;
num_recoverable_losses_
=
0
;
}
rtc
:
:
Optional
<
float
>
GetMetric
(
)
const
;
const
size_t
min_num_acked_pairs_
;
size_t
num_acked_pairs_
;
size_t
num_recoverable_losses_
;
}
rplr_state_
;
}
;
}
#
endif
