#
include
"
rtc_base
/
signalthread
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
rtc
{
SignalThread
:
:
SignalThread
(
bool
use_socket_server
)
:
main_
(
Thread
:
:
Current
(
)
)
worker_
(
this
use_socket_server
)
state_
(
kInit
)
refcount_
(
1
)
{
main_
-
>
SignalQueueDestroyed
.
connect
(
this
&
SignalThread
:
:
OnMainThreadDestroyed
)
;
worker_
.
SetName
(
"
SignalThread
"
this
)
;
}
SignalThread
:
:
~
SignalThread
(
)
{
RTC_DCHECK
(
refcount_
=
=
0
)
;
}
bool
SignalThread
:
:
SetName
(
const
std
:
:
string
&
name
const
void
*
obj
)
{
EnterExit
ee
(
this
)
;
RTC_DCHECK
(
main_
-
>
IsCurrent
(
)
)
;
RTC_DCHECK
(
kInit
=
=
state_
)
;
return
worker_
.
SetName
(
name
obj
)
;
}
void
SignalThread
:
:
Start
(
)
{
EnterExit
ee
(
this
)
;
RTC_DCHECK
(
main_
-
>
IsCurrent
(
)
)
;
if
(
kInit
=
=
state_
|
|
kComplete
=
=
state_
)
{
state_
=
kRunning
;
OnWorkStart
(
)
;
worker_
.
Start
(
)
;
}
else
{
RTC_NOTREACHED
(
)
;
}
}
void
SignalThread
:
:
Destroy
(
bool
wait
)
{
EnterExit
ee
(
this
)
;
RTC_DCHECK
(
main_
-
>
IsCurrent
(
)
)
;
if
(
(
kInit
=
=
state_
)
|
|
(
kComplete
=
=
state_
)
)
{
refcount_
-
-
;
}
else
if
(
kRunning
=
=
state_
|
|
kReleasing
=
=
state_
)
{
state_
=
kStopping
;
worker_
.
Quit
(
)
;
OnWorkStop
(
)
;
if
(
wait
)
{
cs_
.
Leave
(
)
;
worker_
.
Stop
(
)
;
cs_
.
Enter
(
)
;
refcount_
-
-
;
}
}
else
{
RTC_NOTREACHED
(
)
;
}
}
void
SignalThread
:
:
Release
(
)
{
EnterExit
ee
(
this
)
;
RTC_DCHECK
(
main_
-
>
IsCurrent
(
)
)
;
if
(
kComplete
=
=
state_
)
{
refcount_
-
-
;
}
else
if
(
kRunning
=
=
state_
)
{
state_
=
kReleasing
;
}
else
{
RTC_NOTREACHED
(
)
;
}
}
bool
SignalThread
:
:
ContinueWork
(
)
{
EnterExit
ee
(
this
)
;
RTC_DCHECK
(
worker_
.
IsCurrent
(
)
)
;
return
worker_
.
ProcessMessages
(
0
)
;
}
void
SignalThread
:
:
OnMessage
(
Message
*
msg
)
{
EnterExit
ee
(
this
)
;
if
(
ST_MSG_WORKER_DONE
=
=
msg
-
>
message_id
)
{
RTC_DCHECK
(
main_
-
>
IsCurrent
(
)
)
;
OnWorkDone
(
)
;
bool
do_delete
=
false
;
if
(
kRunning
=
=
state_
)
{
state_
=
kComplete
;
}
else
{
do_delete
=
true
;
}
if
(
kStopping
!
=
state_
)
{
worker_
.
Stop
(
)
;
SignalWorkDone
(
this
)
;
}
if
(
do_delete
)
{
refcount_
-
-
;
}
}
}
SignalThread
:
:
Worker
:
:
~
Worker
(
)
{
Stop
(
)
;
}
void
SignalThread
:
:
Worker
:
:
Run
(
)
{
parent_
-
>
Run
(
)
;
}
void
SignalThread
:
:
Run
(
)
{
DoWork
(
)
;
{
EnterExit
ee
(
this
)
;
if
(
main_
)
{
main_
-
>
Post
(
RTC_FROM_HERE
this
ST_MSG_WORKER_DONE
)
;
}
}
}
void
SignalThread
:
:
OnMainThreadDestroyed
(
)
{
EnterExit
ee
(
this
)
;
main_
=
nullptr
;
}
bool
SignalThread
:
:
Worker
:
:
IsProcessingMessages
(
)
{
return
false
;
}
}
