#
ifndef
RTC_BASE_RANDOM_H_
#
define
RTC_BASE_RANDOM_H_
#
include
<
limits
>
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
Random
{
public
:
explicit
Random
(
uint64_t
seed
)
;
template
<
typename
T
>
T
Rand
(
)
{
static_assert
(
std
:
:
numeric_limits
<
T
>
:
:
is_integer
&
&
std
:
:
numeric_limits
<
T
>
:
:
radix
=
=
2
&
&
std
:
:
numeric_limits
<
T
>
:
:
digits
<
=
32
"
Rand
is
only
supported
for
built
-
in
integer
types
that
are
"
"
32
bits
or
smaller
.
"
)
;
return
static_cast
<
T
>
(
NextOutput
(
)
)
;
}
uint32_t
Rand
(
uint32_t
t
)
;
uint32_t
Rand
(
uint32_t
low
uint32_t
high
)
;
int32_t
Rand
(
int32_t
low
int32_t
high
)
;
double
Gaussian
(
double
mean
double
standard_deviation
)
;
double
Exponential
(
double
lambda
)
;
private
:
uint64_t
NextOutput
(
)
{
state_
^
=
state_
>
>
12
;
state_
^
=
state_
<
<
25
;
state_
^
=
state_
>
>
27
;
RTC_DCHECK
(
state_
!
=
0x0ULL
)
;
return
state_
*
2685821657736338717ull
;
}
uint64_t
state_
;
RTC_DISALLOW_IMPLICIT_CONSTRUCTORS
(
Random
)
;
}
;
template
<
>
float
Random
:
:
Rand
<
float
>
(
)
;
template
<
>
double
Random
:
:
Rand
<
double
>
(
)
;
template
<
>
bool
Random
:
:
Rand
<
bool
>
(
)
;
}
#
endif
