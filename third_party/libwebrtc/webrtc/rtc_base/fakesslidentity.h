#
ifndef
RTC_BASE_FAKESSLIDENTITY_H_
#
define
RTC_BASE_FAKESSLIDENTITY_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
rtc_base
/
sslidentity
.
h
"
namespace
rtc
{
class
FakeSSLCertificate
:
public
rtc
:
:
SSLCertificate
{
public
:
explicit
FakeSSLCertificate
(
const
std
:
:
string
&
data
)
;
explicit
FakeSSLCertificate
(
const
std
:
:
vector
<
std
:
:
string
>
&
certs
)
;
FakeSSLCertificate
(
const
FakeSSLCertificate
&
)
;
~
FakeSSLCertificate
(
)
override
;
FakeSSLCertificate
*
GetReference
(
)
const
override
;
std
:
:
string
ToPEMString
(
)
const
override
;
void
ToDER
(
Buffer
*
der_buffer
)
const
override
;
int64_t
CertificateExpirationTime
(
)
const
override
;
bool
GetSignatureDigestAlgorithm
(
std
:
:
string
*
algorithm
)
const
override
;
bool
ComputeDigest
(
const
std
:
:
string
&
algorithm
unsigned
char
*
digest
size_t
size
size_t
*
length
)
const
override
;
std
:
:
unique_ptr
<
SSLCertChain
>
GetChain
(
)
const
override
;
void
SetCertificateExpirationTime
(
int64_t
expiration_time
)
;
void
set_digest_algorithm
(
const
std
:
:
string
&
algorithm
)
;
private
:
static
std
:
:
unique_ptr
<
SSLCertificate
>
DupCert
(
FakeSSLCertificate
cert
)
{
return
cert
.
GetUniqueReference
(
)
;
}
static
void
DeleteCert
(
SSLCertificate
*
cert
)
{
delete
cert
;
}
std
:
:
string
data_
;
std
:
:
vector
<
FakeSSLCertificate
>
certs_
;
std
:
:
string
digest_algorithm_
;
int64_t
expiration_time_
;
}
;
class
FakeSSLIdentity
:
public
rtc
:
:
SSLIdentity
{
public
:
explicit
FakeSSLIdentity
(
const
std
:
:
string
&
data
)
;
explicit
FakeSSLIdentity
(
const
FakeSSLCertificate
&
cert
)
;
FakeSSLIdentity
*
GetReference
(
)
const
override
;
const
FakeSSLCertificate
&
certificate
(
)
const
override
;
std
:
:
string
PrivateKeyToPEMString
(
)
const
override
;
std
:
:
string
PublicKeyToPEMString
(
)
const
override
;
virtual
bool
operator
=
=
(
const
SSLIdentity
&
other
)
const
;
private
:
FakeSSLCertificate
cert_
;
}
;
}
#
endif
