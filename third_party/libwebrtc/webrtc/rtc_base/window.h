#
ifndef
RTC_BASE_WINDOW_H_
#
define
RTC_BASE_WINDOW_H_
#
include
<
stdint
.
h
>
#
include
"
rtc_base
/
stringencode
.
h
"
#
if
defined
(
WEBRTC_LINUX
)
&
&
!
defined
(
WEBRTC_ANDROID
)
typedef
unsigned
long
Window
;
#
elif
defined
(
WEBRTC_WIN
)
#
include
"
rtc_base
/
win32
.
h
"
#
elif
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_IOS
)
typedef
unsigned
int
CGWindowID
;
typedef
unsigned
int
CGDirectDisplayID
;
#
endif
namespace
rtc
{
class
WindowId
{
public
:
#
if
defined
(
WEBRTC_LINUX
)
&
&
!
defined
(
WEBRTC_ANDROID
)
typedef
Window
WindowT
;
#
elif
defined
(
WEBRTC_WIN
)
typedef
HWND
WindowT
;
#
elif
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_IOS
)
typedef
CGWindowID
WindowT
;
#
else
typedef
unsigned
int
WindowT
;
#
endif
static
WindowId
Cast
(
uint64_t
id
)
{
#
if
defined
(
WEBRTC_WIN
)
return
WindowId
(
reinterpret_cast
<
WindowId
:
:
WindowT
>
(
id
)
)
;
#
else
return
WindowId
(
static_cast
<
WindowId
:
:
WindowT
>
(
id
)
)
;
#
endif
}
static
uint64_t
Format
(
const
WindowT
&
id
)
{
#
if
defined
(
WEBRTC_WIN
)
return
static_cast
<
uint64_t
>
(
reinterpret_cast
<
uintptr_t
>
(
id
)
)
;
#
else
return
static_cast
<
uint64_t
>
(
id
)
;
#
endif
}
WindowId
(
)
:
id_
(
0
)
{
}
WindowId
(
const
WindowT
&
id
)
:
id_
(
id
)
{
}
const
WindowT
&
id
(
)
const
{
return
id_
;
}
bool
IsValid
(
)
const
{
return
id_
!
=
0
;
}
bool
Equals
(
const
WindowId
&
other
)
const
{
return
id_
=
=
other
.
id
(
)
;
}
private
:
WindowT
id_
;
}
;
inline
std
:
:
string
ToString
(
const
WindowId
&
window
)
{
return
ToString
(
window
.
id
(
)
)
;
}
}
#
endif
