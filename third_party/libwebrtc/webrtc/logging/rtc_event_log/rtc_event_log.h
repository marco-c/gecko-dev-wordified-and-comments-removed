#
ifndef
LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_H_
#
define
LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
"
api
/
rtceventlogoutput
.
h
"
#
include
"
logging
/
rtc_event_log
/
events
/
rtc_event
.
h
"
namespace
webrtc
{
class
Clock
;
enum
PacketDirection
{
kIncomingPacket
=
0
kOutgoingPacket
}
;
class
RtcEventLog
{
public
:
enum
:
size_t
{
kUnlimitedOutput
=
0
}
;
enum
:
int64_t
{
kImmediateOutput
=
0
}
;
enum
class
EncodingType
{
Legacy
}
;
virtual
~
RtcEventLog
(
)
{
}
static
std
:
:
unique_ptr
<
RtcEventLog
>
Create
(
EncodingType
encoding_type
)
;
static
std
:
:
unique_ptr
<
RtcEventLog
>
Create
(
const
Clock
*
clock
EncodingType
encoding_type
)
{
return
Create
(
encoding_type
)
;
}
static
std
:
:
unique_ptr
<
RtcEventLog
>
CreateNull
(
)
;
virtual
bool
StartLogging
(
std
:
:
unique_ptr
<
RtcEventLogOutput
>
output
int64_t
output_period_ms
)
=
0
;
virtual
void
StopLogging
(
)
=
0
;
virtual
void
Log
(
std
:
:
unique_ptr
<
RtcEvent
>
event
)
=
0
;
}
;
class
RtcEventLogNullImpl
:
public
RtcEventLog
{
public
:
bool
StartLogging
(
std
:
:
unique_ptr
<
RtcEventLogOutput
>
output
int64_t
output_period_ms
)
override
{
return
false
;
}
void
StopLogging
(
)
override
{
}
void
Log
(
std
:
:
unique_ptr
<
RtcEvent
>
event
)
override
{
}
}
;
}
#
endif
