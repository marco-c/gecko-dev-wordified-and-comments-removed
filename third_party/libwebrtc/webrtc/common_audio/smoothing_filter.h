#
ifndef
COMMON_AUDIO_SMOOTHING_FILTER_H_
#
define
COMMON_AUDIO_SMOOTHING_FILTER_H_
#
include
"
api
/
optional
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
SmoothingFilter
{
public
:
virtual
~
SmoothingFilter
(
)
=
default
;
virtual
void
AddSample
(
float
sample
)
=
0
;
virtual
rtc
:
:
Optional
<
float
>
GetAverage
(
)
=
0
;
virtual
bool
SetTimeConstantMs
(
int
time_constant_ms
)
=
0
;
}
;
class
SmoothingFilterImpl
final
:
public
SmoothingFilter
{
public
:
explicit
SmoothingFilterImpl
(
int
init_time_ms
)
;
~
SmoothingFilterImpl
(
)
override
;
void
AddSample
(
float
sample
)
override
;
rtc
:
:
Optional
<
float
>
GetAverage
(
)
override
;
bool
SetTimeConstantMs
(
int
time_constant_ms
)
override
;
float
alpha
(
)
const
{
return
alpha_
;
}
private
:
void
UpdateAlpha
(
int
time_constant_ms
)
;
void
ExtrapolateLastSample
(
int64_t
time_ms
)
;
const
int
init_time_ms_
;
const
float
init_factor_
;
const
float
init_const_
;
rtc
:
:
Optional
<
int64_t
>
init_end_time_ms_
;
float
last_sample_
;
float
alpha_
;
float
state_
;
int64_t
last_state_time_ms_
;
RTC_DISALLOW_IMPLICIT_CONSTRUCTORS
(
SmoothingFilterImpl
)
;
}
;
}
#
endif
