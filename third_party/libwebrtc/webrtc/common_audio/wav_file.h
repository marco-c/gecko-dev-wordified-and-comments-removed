#
ifndef
COMMON_AUDIO_WAV_FILE_H_
#
define
COMMON_AUDIO_WAV_FILE_H_
#
ifdef
__cplusplus
#
include
<
stdint
.
h
>
#
include
<
cstddef
>
#
include
<
string
>
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
webrtc
{
class
WavFile
{
public
:
virtual
~
WavFile
(
)
{
}
virtual
int
sample_rate
(
)
const
=
0
;
virtual
size_t
num_channels
(
)
const
=
0
;
virtual
size_t
num_samples
(
)
const
=
0
;
std
:
:
string
FormatAsString
(
)
const
;
}
;
class
WavWriter
final
:
public
WavFile
{
public
:
WavWriter
(
const
std
:
:
string
&
filename
int
sample_rate
size_t
num_channels
)
;
~
WavWriter
(
)
override
;
void
WriteSamples
(
const
float
*
samples
size_t
num_samples
)
;
void
WriteSamples
(
const
int16_t
*
samples
size_t
num_samples
)
;
int
sample_rate
(
)
const
override
;
size_t
num_channels
(
)
const
override
;
size_t
num_samples
(
)
const
override
;
private
:
void
Close
(
)
;
const
int
sample_rate_
;
const
size_t
num_channels_
;
size_t
num_samples_
;
FILE
*
file_handle_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
WavWriter
)
;
}
;
class
WavReader
final
:
public
WavFile
{
public
:
explicit
WavReader
(
const
std
:
:
string
&
filename
)
;
~
WavReader
(
)
override
;
size_t
ReadSamples
(
size_t
num_samples
float
*
samples
)
;
size_t
ReadSamples
(
size_t
num_samples
int16_t
*
samples
)
;
int
sample_rate
(
)
const
override
;
size_t
num_channels
(
)
const
override
;
size_t
num_samples
(
)
const
override
;
private
:
void
Close
(
)
;
int
sample_rate_
;
size_t
num_channels_
;
size_t
num_samples_
;
size_t
num_samples_remaining_
;
FILE
*
file_handle_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
WavReader
)
;
}
;
}
extern
"
C
"
{
#
endif
typedef
struct
rtc_WavWriter
rtc_WavWriter
;
rtc_WavWriter
*
rtc_WavOpen
(
const
char
*
filename
int
sample_rate
size_t
num_channels
)
;
void
rtc_WavClose
(
rtc_WavWriter
*
wf
)
;
void
rtc_WavWriteSamples
(
rtc_WavWriter
*
wf
const
float
*
samples
size_t
num_samples
)
;
int
rtc_WavSampleRate
(
const
rtc_WavWriter
*
wf
)
;
size_t
rtc_WavNumChannels
(
const
rtc_WavWriter
*
wf
)
;
size_t
rtc_WavNumSamples
(
const
rtc_WavWriter
*
wf
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
