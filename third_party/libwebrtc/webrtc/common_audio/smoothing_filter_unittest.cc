#
include
<
cmath
>
#
include
<
memory
>
#
include
"
common_audio
/
smoothing_filter
.
h
"
#
include
"
rtc_base
/
fakeclock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
float
kMaxAbsError
=
1e
-
5f
;
constexpr
int64_t
kClockInitialTime
=
123456
;
struct
SmoothingFilterStates
{
explicit
SmoothingFilterStates
(
int
init_time_ms
)
:
smoothing_filter
(
init_time_ms
)
{
fake_clock
.
AdvanceTime
(
rtc
:
:
TimeDelta
:
:
FromMilliseconds
(
kClockInitialTime
)
)
;
}
rtc
:
:
ScopedFakeClock
fake_clock
;
SmoothingFilterImpl
smoothing_filter
;
}
;
void
CheckOutput
(
SmoothingFilterStates
*
states
float
sample
int
advance_time_ms
float
expected_ouput
)
{
states
-
>
smoothing_filter
.
AddSample
(
sample
)
;
states
-
>
fake_clock
.
AdvanceTime
(
rtc
:
:
TimeDelta
:
:
FromMilliseconds
(
advance_time_ms
)
)
;
auto
output
=
states
-
>
smoothing_filter
.
GetAverage
(
)
;
EXPECT_TRUE
(
output
)
;
EXPECT_NEAR
(
expected_ouput
*
output
kMaxAbsError
)
;
}
}
TEST
(
SmoothingFilterTest
NoOutputWhenNoSampleAdded
)
{
constexpr
int
kInitTimeMs
=
100
;
SmoothingFilterStates
states
(
kInitTimeMs
)
;
EXPECT_FALSE
(
states
.
smoothing_filter
.
GetAverage
(
)
)
;
}
TEST
(
SmoothingFilterTest
CheckBehaviorAroundInitTime
)
{
constexpr
int
kInitTimeMs
=
795
;
SmoothingFilterStates
states
(
kInitTimeMs
)
;
CheckOutput
(
&
states
1
.
0f
500
1
.
0f
)
;
CheckOutput
(
&
states
0
.
5f
100
0
.
680562264029f
)
;
CheckOutput
(
&
states
1
.
0f
100
0
.
794207139813f
)
;
CheckOutput
(
&
states
1
.
0f
100
0
.
829803409752f
)
;
CheckOutput
(
&
states
0
.
5f
100
0
.
790821764210f
)
;
CheckOutput
(
&
states
1
.
0f
100
0
.
815545922911f
)
;
}
TEST
(
SmoothingFilterTest
InitTimeEqualsZero
)
{
constexpr
int
kInitTimeMs
=
0
;
SmoothingFilterStates
states
(
kInitTimeMs
)
;
CheckOutput
(
&
states
1
.
0f
1
1
.
0f
)
;
CheckOutput
(
&
states
0
.
5f
1
0
.
5f
)
;
}
TEST
(
SmoothingFilterTest
InitTimeEqualsOne
)
{
constexpr
int
kInitTimeMs
=
1
;
SmoothingFilterStates
states
(
kInitTimeMs
)
;
CheckOutput
(
&
states
1
.
0f
1
1
.
0f
)
;
CheckOutput
(
&
states
0
.
5f
1
1
.
0f
*
exp
(
-
1
.
0f
)
+
(
1
.
0f
-
exp
(
-
1
.
0f
)
)
*
0
.
5f
)
;
}
TEST
(
SmoothingFilterTest
GetAverageOutputsEmptyBeforeFirstSample
)
{
constexpr
int
kInitTimeMs
=
100
;
SmoothingFilterStates
states
(
kInitTimeMs
)
;
EXPECT_FALSE
(
states
.
smoothing_filter
.
GetAverage
(
)
)
;
constexpr
float
kFirstSample
=
1
.
2345f
;
states
.
smoothing_filter
.
AddSample
(
kFirstSample
)
;
EXPECT_EQ
(
kFirstSample
states
.
smoothing_filter
.
GetAverage
(
)
)
;
}
TEST
(
SmoothingFilterTest
CannotChangeTimeConstantDuringInitialization
)
{
constexpr
int
kInitTimeMs
=
100
;
SmoothingFilterStates
states
(
kInitTimeMs
)
;
states
.
smoothing_filter
.
AddSample
(
0
.
0
)
;
states
.
fake_clock
.
AdvanceTime
(
rtc
:
:
TimeDelta
:
:
FromMilliseconds
(
kInitTimeMs
-
1
)
)
;
states
.
smoothing_filter
.
AddSample
(
0
.
0
)
;
EXPECT_FALSE
(
states
.
smoothing_filter
.
SetTimeConstantMs
(
kInitTimeMs
*
2
)
)
;
EXPECT_NE
(
exp
(
-
1
.
0f
/
(
kInitTimeMs
*
2
)
)
states
.
smoothing_filter
.
alpha
(
)
)
;
states
.
fake_clock
.
AdvanceTime
(
rtc
:
:
TimeDelta
:
:
FromMilliseconds
(
1
)
)
;
states
.
smoothing_filter
.
AddSample
(
0
.
0
)
;
EXPECT_FLOAT_EQ
(
exp
(
-
1
.
0f
/
kInitTimeMs
)
states
.
smoothing_filter
.
alpha
(
)
)
;
EXPECT_TRUE
(
states
.
smoothing_filter
.
SetTimeConstantMs
(
kInitTimeMs
*
2
)
)
;
EXPECT_FLOAT_EQ
(
exp
(
-
1
.
0f
/
(
kInitTimeMs
*
2
)
)
states
.
smoothing_filter
.
alpha
(
)
)
;
}
}
