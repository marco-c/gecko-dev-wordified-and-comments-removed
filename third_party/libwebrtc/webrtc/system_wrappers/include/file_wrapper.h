#
ifndef
SYSTEM_WRAPPERS_INCLUDE_FILE_WRAPPER_H_
#
define
SYSTEM_WRAPPERS_INCLUDE_FILE_WRAPPER_H_
#
include
<
stddef
.
h
>
#
include
<
stdio
.
h
>
#
include
"
common_types
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
FileWrapper
:
public
InStream
public
OutStream
{
public
:
static
const
size_t
kMaxFileNameSize
=
1024
;
static
FileWrapper
*
Create
(
)
;
static
FileWrapper
Open
(
const
char
*
file_name_utf8
bool
read_only
)
;
FileWrapper
(
FILE
*
file
size_t
max_size
)
;
~
FileWrapper
(
)
override
;
FileWrapper
(
FileWrapper
&
&
other
)
;
FileWrapper
&
operator
=
(
FileWrapper
&
&
other
)
;
bool
is_open
(
)
const
{
return
file_
!
=
nullptr
;
}
bool
OpenFile
(
const
char
*
file_name_utf8
bool
read_only
)
;
bool
OpenFromFileHandle
(
FILE
*
handle
)
;
void
CloseFile
(
)
;
void
SetMaxFileSize
(
size_t
bytes
)
;
int
Flush
(
)
;
int
Rewind
(
)
override
;
int
Read
(
void
*
buf
size_t
length
)
override
;
bool
Write
(
const
void
*
buf
size_t
length
)
override
;
private
:
FileWrapper
(
)
;
void
CloseFileImpl
(
)
;
int
FlushImpl
(
)
;
rtc
:
:
CriticalSection
lock_
;
FILE
*
file_
=
nullptr
;
size_t
position_
=
0
;
size_t
max_size_in_bytes_
=
0
;
FileWrapper
(
const
FileWrapper
&
)
=
delete
;
FileWrapper
&
operator
=
(
const
FileWrapper
&
)
=
delete
;
}
;
}
#
endif
