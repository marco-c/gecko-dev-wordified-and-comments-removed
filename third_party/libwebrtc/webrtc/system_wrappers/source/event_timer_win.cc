#
include
"
system_wrappers
/
source
/
event_timer_win
.
h
"
#
include
"
Mmsystem
.
h
"
namespace
webrtc
{
EventTimerWrapper
*
EventTimerWrapper
:
:
Create
(
)
{
return
new
EventTimerWin
(
)
;
}
EventTimerWin
:
:
EventTimerWin
(
)
:
event_
(
:
:
CreateEvent
(
NULL
FALSE
FALSE
NULL
)
)
timerID_
(
NULL
)
{
}
EventTimerWin
:
:
~
EventTimerWin
(
)
{
StopTimer
(
)
;
CloseHandle
(
event_
)
;
}
bool
EventTimerWin
:
:
Set
(
)
{
return
SetEvent
(
event_
)
=
=
1
;
}
EventTypeWrapper
EventTimerWin
:
:
Wait
(
unsigned
long
max_time
)
{
unsigned
long
res
=
WaitForSingleObject
(
event_
max_time
)
;
switch
(
res
)
{
case
WAIT_OBJECT_0
:
return
kEventSignaled
;
case
WAIT_TIMEOUT
:
return
kEventTimeout
;
default
:
return
kEventError
;
}
}
bool
EventTimerWin
:
:
StartTimer
(
bool
periodic
unsigned
long
time
)
{
if
(
timerID_
!
=
NULL
)
{
timeKillEvent
(
timerID_
)
;
timerID_
=
NULL
;
}
if
(
periodic
)
{
timerID_
=
timeSetEvent
(
time
0
(
LPTIMECALLBACK
)
HANDLE
(
event_
)
0
TIME_PERIODIC
|
TIME_CALLBACK_EVENT_PULSE
)
;
}
else
{
timerID_
=
timeSetEvent
(
time
0
(
LPTIMECALLBACK
)
HANDLE
(
event_
)
0
TIME_ONESHOT
|
TIME_CALLBACK_EVENT_SET
)
;
}
return
timerID_
!
=
NULL
;
}
bool
EventTimerWin
:
:
StopTimer
(
)
{
if
(
timerID_
!
=
NULL
)
{
timeKillEvent
(
timerID_
)
;
timerID_
=
NULL
;
}
return
true
;
}
}
