#
ifndef
TEST_FRAME_GENERATOR_H_
#
define
TEST_FRAME_GENERATOR_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
media
/
base
/
videosourceinterface
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
Clock
;
namespace
test
{
class
FrameForwarder
:
public
rtc
:
:
VideoSourceInterface
<
VideoFrame
>
{
public
:
FrameForwarder
(
)
;
virtual
~
FrameForwarder
(
)
;
virtual
void
IncomingCapturedFrame
(
const
VideoFrame
&
video_frame
)
;
rtc
:
:
VideoSinkWants
sink_wants
(
)
const
;
bool
has_sinks
(
)
const
;
protected
:
void
AddOrUpdateSink
(
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
sink
const
rtc
:
:
VideoSinkWants
&
wants
)
override
;
void
RemoveSink
(
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
sink
)
override
;
rtc
:
:
CriticalSection
crit_
;
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
sink_
RTC_GUARDED_BY
(
crit_
)
;
rtc
:
:
VideoSinkWants
sink_wants_
RTC_GUARDED_BY
(
crit_
)
;
}
;
class
FrameGenerator
{
public
:
virtual
~
FrameGenerator
(
)
=
default
;
virtual
VideoFrame
*
NextFrame
(
)
=
0
;
virtual
void
ChangeResolution
(
size_t
width
size_t
height
)
{
RTC_NOTREACHED
(
)
;
}
static
std
:
:
unique_ptr
<
FrameGenerator
>
CreateSquareGenerator
(
int
width
int
height
)
;
static
std
:
:
unique_ptr
<
FrameGenerator
>
CreateSquareGenerator
(
int
width
int
height
int
num_squares
)
;
static
std
:
:
unique_ptr
<
FrameGenerator
>
CreateFromYuvFile
(
std
:
:
vector
<
std
:
:
string
>
files
size_t
width
size_t
height
int
frame_repeat_count
)
;
static
std
:
:
unique_ptr
<
FrameGenerator
>
CreateScrollingInputFromYuvFiles
(
Clock
*
clock
std
:
:
vector
<
std
:
:
string
>
filenames
size_t
source_width
size_t
source_height
size_t
target_width
size_t
target_height
int64_t
scroll_time_ms
int64_t
pause_time_ms
)
;
static
std
:
:
unique_ptr
<
FrameGenerator
>
CreateSlideGenerator
(
int
width
int
height
int
frame_repeat_count
)
;
}
;
}
}
#
endif
