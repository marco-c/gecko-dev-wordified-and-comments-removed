#
include
"
test
/
video_capturer
.
h
"
#
include
"
rtc_base
/
basictypes
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
webrtc
{
namespace
test
{
VideoCapturer
:
:
VideoCapturer
(
)
:
video_adapter_
(
new
cricket
:
:
VideoAdapter
(
)
)
{
}
VideoCapturer
:
:
~
VideoCapturer
(
)
{
}
rtc
:
:
Optional
<
VideoFrame
>
VideoCapturer
:
:
AdaptFrame
(
const
VideoFrame
&
frame
)
{
int
cropped_width
=
0
;
int
cropped_height
=
0
;
int
out_width
=
0
;
int
out_height
=
0
;
if
(
!
video_adapter_
-
>
AdaptFrameResolution
(
frame
.
width
(
)
frame
.
height
(
)
frame
.
timestamp_us
(
)
*
1000
&
cropped_width
&
cropped_height
&
out_width
&
out_height
)
)
{
return
rtc
:
:
Optional
<
VideoFrame
>
(
)
;
}
rtc
:
:
Optional
<
VideoFrame
>
out_frame
;
if
(
out_height
!
=
frame
.
height
(
)
|
|
out_width
!
=
frame
.
width
(
)
)
{
rtc
:
:
scoped_refptr
<
I420Buffer
>
scaled_buffer
=
I420Buffer
:
:
Create
(
out_width
out_height
)
;
scaled_buffer
-
>
ScaleFrom
(
*
frame
.
video_frame_buffer
(
)
-
>
ToI420
(
)
)
;
out_frame
.
emplace
(
VideoFrame
(
scaled_buffer
kVideoRotation_0
frame
.
timestamp_us
(
)
)
)
;
}
else
{
out_frame
.
emplace
(
frame
)
;
}
return
out_frame
;
}
void
VideoCapturer
:
:
AddOrUpdateSink
(
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
sink
const
rtc
:
:
VideoSinkWants
&
wants
)
{
video_adapter_
-
>
OnResolutionFramerateRequest
(
wants
.
target_pixel_count
wants
.
max_pixel_count
wants
.
max_framerate_fps
)
;
}
}
}
