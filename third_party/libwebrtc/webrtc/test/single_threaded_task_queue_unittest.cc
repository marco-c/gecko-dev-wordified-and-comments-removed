#
include
"
test
/
single_threaded_task_queue
.
h
"
#
include
<
atomic
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
ptr_util
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
{
using
TaskId
=
SingleThreadedTaskQueueForTesting
:
:
TaskId
;
constexpr
int
kMaxWaitTimeMs
=
10000
;
TEST
(
SingleThreadedTaskQueueForTestingTest
SanityConstructionDestruction
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
ExecutesPostedTasks
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
std
:
:
atomic
<
bool
>
executed
(
false
)
;
rtc
:
:
Event
done
(
true
false
)
;
task_queue
.
PostTask
(
[
&
executed
&
done
]
(
)
{
executed
.
store
(
true
)
;
done
.
Set
(
)
;
}
)
;
ASSERT_TRUE
(
done
.
Wait
(
kMaxWaitTimeMs
)
)
;
EXPECT_TRUE
(
executed
.
load
(
)
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
PostMultipleTasksFromSameExternalThread
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
constexpr
size_t
kCount
=
3
;
std
:
:
atomic
<
bool
>
executed
[
kCount
]
;
for
(
std
:
:
atomic
<
bool
>
&
exec
:
executed
)
{
exec
.
store
(
false
)
;
}
std
:
:
vector
<
std
:
:
unique_ptr
<
rtc
:
:
Event
>
>
done_events
;
for
(
size_t
i
=
0
;
i
<
kCount
;
i
+
+
)
{
done_events
.
emplace_back
(
rtc
:
:
MakeUnique
<
rtc
:
:
Event
>
(
false
false
)
)
;
}
rtc
:
:
Event
rendezvous
(
true
false
)
;
task_queue
.
PostTask
(
[
&
rendezvous
]
(
)
{
ASSERT_TRUE
(
rendezvous
.
Wait
(
kMaxWaitTimeMs
)
)
;
}
)
;
for
(
size_t
i
=
0
;
i
<
kCount
;
i
+
+
)
{
task_queue
.
PostTask
(
[
&
executed
&
done_events
i
]
(
)
{
executed
[
i
]
.
store
(
true
)
;
done_events
[
i
]
-
>
Set
(
)
;
}
)
;
}
rendezvous
.
Set
(
)
;
for
(
size_t
i
=
0
;
i
<
kCount
;
i
+
+
)
{
ASSERT_TRUE
(
done_events
[
i
]
-
>
Wait
(
kMaxWaitTimeMs
)
)
;
}
for
(
size_t
i
=
0
;
i
<
kCount
;
i
+
+
)
{
EXPECT_TRUE
(
executed
[
i
]
.
load
(
)
)
;
}
}
TEST
(
SingleThreadedTaskQueueForTestingTest
PostToTaskQueueFromOwnThread
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
std
:
:
atomic
<
bool
>
executed
(
false
)
;
rtc
:
:
Event
done
(
true
false
)
;
auto
internally_posted_task
=
[
&
executed
&
done
]
(
)
{
executed
.
store
(
true
)
;
done
.
Set
(
)
;
}
;
auto
externally_posted_task
=
[
&
task_queue
&
internally_posted_task
]
(
)
{
task_queue
.
PostTask
(
internally_posted_task
)
;
}
;
task_queue
.
PostTask
(
externally_posted_task
)
;
ASSERT_TRUE
(
done
.
Wait
(
kMaxWaitTimeMs
)
)
;
EXPECT_TRUE
(
executed
.
load
(
)
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
TasksExecutedInSequence
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
size_t
accumulator
=
0
;
size_t
expected_value
=
0
;
rtc
:
:
Event
rendezvous
(
true
false
)
;
task_queue
.
PostTask
(
[
&
rendezvous
]
(
)
{
ASSERT_TRUE
(
rendezvous
.
Wait
(
kMaxWaitTimeMs
)
)
;
}
)
;
for
(
size_t
i
=
0
;
i
<
3
;
i
+
+
)
{
task_queue
.
PostTask
(
[
&
accumulator
i
]
(
)
{
accumulator
=
10
*
accumulator
+
i
;
}
)
;
expected_value
=
10
*
expected_value
+
i
;
}
rtc
:
:
Event
done
(
true
false
)
;
task_queue
.
PostTask
(
[
&
done
]
(
)
{
done
.
Set
(
)
;
}
)
;
rendezvous
.
Set
(
)
;
ASSERT_TRUE
(
done
.
Wait
(
kMaxWaitTimeMs
)
)
;
EXPECT_EQ
(
accumulator
expected_value
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
ExecutesPostedDelayedTask
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
std
:
:
atomic
<
bool
>
executed
(
false
)
;
rtc
:
:
Event
done
(
true
false
)
;
constexpr
int64_t
delay_ms
=
20
;
static_assert
(
delay_ms
<
kMaxWaitTimeMs
/
2
"
Delay
too
long
for
tests
.
"
)
;
task_queue
.
PostDelayedTask
(
[
&
executed
&
done
]
(
)
{
executed
.
store
(
true
)
;
done
.
Set
(
)
;
}
delay_ms
)
;
ASSERT_TRUE
(
done
.
Wait
(
kMaxWaitTimeMs
)
)
;
EXPECT_TRUE
(
executed
.
load
(
)
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
DoesNotExecuteDelayedTaskTooSoon
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
std
:
:
atomic
<
bool
>
executed
(
false
)
;
constexpr
int64_t
delay_ms
=
2000
;
static_assert
(
delay_ms
<
kMaxWaitTimeMs
/
2
"
Delay
too
long
for
tests
.
"
)
;
task_queue
.
PostDelayedTask
(
[
&
executed
]
(
)
{
executed
.
store
(
true
)
;
}
delay_ms
)
;
rtc
:
:
Event
not_done
(
true
false
)
;
ASSERT_FALSE
(
not_done
.
Wait
(
delay_ms
/
2
)
)
;
EXPECT_FALSE
(
executed
.
load
(
)
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
TaskWithLesserDelayPostedAfterFirstDelayedTaskExectuedBeforeFirst
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
std
:
:
atomic
<
bool
>
earlier_executed
(
false
)
;
constexpr
int64_t
earlier_delay_ms
=
500
;
std
:
:
atomic
<
bool
>
later_executed
(
false
)
;
constexpr
int64_t
later_delay_ms
=
1000
;
static_assert
(
earlier_delay_ms
+
later_delay_ms
<
kMaxWaitTimeMs
/
2
"
Delay
too
long
for
tests
.
"
)
;
rtc
:
:
Event
done
(
true
false
)
;
auto
earlier_task
=
[
&
earlier_executed
&
later_executed
]
(
)
{
EXPECT_FALSE
(
later_executed
.
load
(
)
)
;
earlier_executed
.
store
(
true
)
;
}
;
auto
later_task
=
[
&
earlier_executed
&
later_executed
&
done
]
(
)
{
EXPECT_TRUE
(
earlier_executed
.
load
(
)
)
;
later_executed
.
store
(
true
)
;
done
.
Set
(
)
;
}
;
task_queue
.
PostDelayedTask
(
later_task
later_delay_ms
)
;
task_queue
.
PostDelayedTask
(
earlier_task
earlier_delay_ms
)
;
ASSERT_TRUE
(
done
.
Wait
(
kMaxWaitTimeMs
)
)
;
ASSERT_TRUE
(
earlier_executed
)
;
ASSERT_TRUE
(
later_executed
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
TaskWithGreaterDelayPostedAfterFirstDelayedTaskExectuedAfterFirst
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
std
:
:
atomic
<
bool
>
earlier_executed
(
false
)
;
constexpr
int64_t
earlier_delay_ms
=
500
;
std
:
:
atomic
<
bool
>
later_executed
(
false
)
;
constexpr
int64_t
later_delay_ms
=
1000
;
static_assert
(
earlier_delay_ms
+
later_delay_ms
<
kMaxWaitTimeMs
/
2
"
Delay
too
long
for
tests
.
"
)
;
rtc
:
:
Event
done
(
true
false
)
;
auto
earlier_task
=
[
&
earlier_executed
&
later_executed
]
(
)
{
EXPECT_FALSE
(
later_executed
.
load
(
)
)
;
earlier_executed
.
store
(
true
)
;
}
;
auto
later_task
=
[
&
earlier_executed
&
later_executed
&
done
]
(
)
{
EXPECT_TRUE
(
earlier_executed
.
load
(
)
)
;
later_executed
.
store
(
true
)
;
done
.
Set
(
)
;
}
;
task_queue
.
PostDelayedTask
(
earlier_task
earlier_delay_ms
)
;
task_queue
.
PostDelayedTask
(
later_task
later_delay_ms
)
;
ASSERT_TRUE
(
done
.
Wait
(
kMaxWaitTimeMs
)
)
;
ASSERT_TRUE
(
earlier_executed
)
;
ASSERT_TRUE
(
later_executed
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
ExternalThreadCancelsTask
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
rtc
:
:
Event
done
(
true
false
)
;
rtc
:
:
Event
rendezvous
(
true
false
)
;
task_queue
.
PostTask
(
[
&
rendezvous
]
(
)
{
ASSERT_TRUE
(
rendezvous
.
Wait
(
kMaxWaitTimeMs
)
)
;
}
)
;
TaskId
cancelled_task_id
=
task_queue
.
PostTask
(
[
]
(
)
{
EXPECT_TRUE
(
false
)
;
}
)
;
task_queue
.
PostTask
(
[
&
done
]
(
)
{
done
.
Set
(
)
;
}
)
;
task_queue
.
CancelTask
(
cancelled_task_id
)
;
rendezvous
.
Set
(
)
;
ASSERT_TRUE
(
done
.
Wait
(
kMaxWaitTimeMs
)
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
InternalThreadCancelsTask
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
rtc
:
:
Event
done
(
true
false
)
;
rtc
:
:
Event
rendezvous
(
true
false
)
;
task_queue
.
PostTask
(
[
&
rendezvous
]
(
)
{
ASSERT_TRUE
(
rendezvous
.
Wait
(
kMaxWaitTimeMs
)
)
;
}
)
;
TaskId
cancelled_task_id
;
auto
canceller_task
=
[
&
task_queue
&
cancelled_task_id
]
(
)
{
task_queue
.
CancelTask
(
cancelled_task_id
)
;
}
;
task_queue
.
PostTask
(
canceller_task
)
;
auto
cancelled_task
=
[
]
(
)
{
EXPECT_TRUE
(
false
)
;
}
;
cancelled_task_id
=
task_queue
.
PostTask
(
cancelled_task
)
;
auto
completion_marker_task
=
[
&
done
]
(
)
{
done
.
Set
(
)
;
}
;
task_queue
.
PostTask
(
completion_marker_task
)
;
rendezvous
.
Set
(
)
;
ASSERT_TRUE
(
done
.
Wait
(
kMaxWaitTimeMs
)
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
SendTask
)
{
SingleThreadedTaskQueueForTesting
task_queue
(
"
task_queue
"
)
;
std
:
:
atomic
<
bool
>
executed
(
false
)
;
task_queue
.
SendTask
(
[
&
executed
]
(
)
{
rtc
:
:
Event
delay
(
true
false
)
;
ASSERT_FALSE
(
delay
.
Wait
(
1000
)
)
;
executed
.
store
(
true
)
;
}
)
;
EXPECT_TRUE
(
executed
)
;
}
TEST
(
SingleThreadedTaskQueueForTestingTest
DestructTaskQueueWhileTasksPending
)
{
auto
task_queue
=
rtc
:
:
MakeUnique
<
SingleThreadedTaskQueueForTesting
>
(
"
task_queue
"
)
;
std
:
:
atomic
<
size_t
>
counter
(
0
)
;
constexpr
size_t
tasks
=
10
;
for
(
size_t
i
=
0
;
i
<
tasks
;
i
+
+
)
{
task_queue
-
>
PostTask
(
[
&
counter
]
(
)
{
std
:
:
atomic_fetch_add
(
&
counter
static_cast
<
size_t
>
(
1
)
)
;
rtc
:
:
Event
delay
(
true
false
)
;
ASSERT_FALSE
(
delay
.
Wait
(
500
)
)
;
}
)
;
}
task_queue
.
reset
(
)
;
EXPECT_LT
(
counter
tasks
)
;
}
}
}
}
