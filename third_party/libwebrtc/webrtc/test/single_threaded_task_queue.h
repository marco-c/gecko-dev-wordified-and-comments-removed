#
ifndef
TEST_SINGLE_THREADED_TASK_QUEUE_H_
#
define
TEST_SINGLE_THREADED_TASK_QUEUE_H_
#
include
<
functional
>
#
include
<
list
>
#
include
<
memory
>
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
platform_thread
.
h
"
#
include
"
rtc_base
/
thread_checker
.
h
"
namespace
webrtc
{
namespace
test
{
class
SingleThreadedTaskQueueForTesting
{
public
:
using
Task
=
std
:
:
function
<
void
(
)
>
;
using
TaskId
=
size_t
;
explicit
SingleThreadedTaskQueueForTesting
(
const
char
*
name
)
;
~
SingleThreadedTaskQueueForTesting
(
)
;
TaskId
PostTask
(
Task
task
)
;
TaskId
PostDelayedTask
(
Task
task
int64_t
delay_ms
)
;
void
SendTask
(
Task
task
)
;
bool
CancelTask
(
TaskId
task_id
)
;
private
:
struct
QueuedTask
{
QueuedTask
(
TaskId
task_id
int64_t
earliest_execution_time
Task
task
)
;
~
QueuedTask
(
)
;
TaskId
task_id
;
int64_t
earliest_execution_time
;
Task
task
;
}
;
static
void
Run
(
void
*
obj
)
;
void
RunLoop
(
)
;
rtc
:
:
CriticalSection
cs_
;
std
:
:
list
<
std
:
:
unique_ptr
<
QueuedTask
>
>
tasks_
RTC_GUARDED_BY
(
cs_
)
;
rtc
:
:
ThreadChecker
owner_thread_checker_
;
rtc
:
:
PlatformThread
thread_
;
bool
running_
RTC_GUARDED_BY
(
cs_
)
;
TaskId
next_task_id_
;
rtc
:
:
Event
wake_up_
;
}
;
}
}
#
endif
