#
include
"
test
/
testsupport
/
perf_test
.
h
"
#
include
<
sstream
>
#
include
<
stdio
.
h
>
#
include
<
vector
>
namespace
{
void
PrintResultsImpl
(
const
std
:
:
string
&
graph_name
const
std
:
:
string
&
trace
const
std
:
:
string
&
values
const
std
:
:
string
&
units
bool
important
)
{
if
(
important
)
{
printf
(
"
*
"
)
;
}
printf
(
"
RESULT
%
s
:
%
s
=
%
s
%
s
\
n
"
graph_name
.
c_str
(
)
trace
.
c_str
(
)
values
.
c_str
(
)
units
.
c_str
(
)
)
;
}
}
namespace
webrtc
{
namespace
test
{
void
PrintResult
(
const
std
:
:
string
&
measurement
const
std
:
:
string
&
modifier
const
std
:
:
string
&
trace
const
double
value
const
std
:
:
string
&
units
bool
important
)
{
std
:
:
ostringstream
value_stream
;
value_stream
<
<
value
;
PrintResultsImpl
(
measurement
+
modifier
trace
value_stream
.
str
(
)
units
important
)
;
}
void
PrintResultMeanAndError
(
const
std
:
:
string
&
measurement
const
std
:
:
string
&
modifier
const
std
:
:
string
&
trace
const
double
mean
const
double
error
const
std
:
:
string
&
units
bool
important
)
{
std
:
:
ostringstream
value_stream
;
value_stream
<
<
'
{
'
<
<
mean
<
<
'
'
<
<
error
<
<
'
}
'
;
PrintResultsImpl
(
measurement
+
modifier
trace
value_stream
.
str
(
)
units
important
)
;
}
void
PrintResultList
(
const
std
:
:
string
&
measurement
const
std
:
:
string
&
modifier
const
std
:
:
string
&
trace
const
std
:
:
vector
<
double
>
&
values
const
std
:
:
string
&
units
bool
important
)
{
std
:
:
ostringstream
value_stream
;
value_stream
<
<
'
[
'
;
if
(
!
values
.
empty
(
)
)
{
auto
it
=
values
.
begin
(
)
;
while
(
true
)
{
value_stream
<
<
*
it
;
if
(
+
+
it
=
=
values
.
end
(
)
)
break
;
value_stream
<
<
'
'
;
}
}
value_stream
<
<
'
]
'
;
PrintResultsImpl
(
measurement
+
modifier
trace
value_stream
.
str
(
)
units
important
)
;
}
}
}
