#
include
"
test
/
testsupport
/
fileutils
.
h
"
#
include
<
stdio
.
h
>
#
include
<
fstream
>
#
include
<
iostream
>
#
include
<
list
>
#
include
<
string
>
#
include
"
api
/
optional
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
pathutils
.
h
"
#
include
"
test
/
gtest
.
h
"
#
ifdef
WIN32
#
define
chdir
_chdir
static
const
char
*
kPathDelimiter
=
"
\
\
"
;
#
else
static
const
char
*
kPathDelimiter
=
"
/
"
;
#
endif
static
const
char
kTestName
[
]
=
"
fileutils_unittest
"
;
static
const
char
kExtension
[
]
=
"
tmp
"
;
namespace
webrtc
{
namespace
test
{
namespace
{
void
CleanDir
(
const
std
:
:
string
&
dir
size_t
*
num_deleted_entries
)
{
RTC_DCHECK
(
num_deleted_entries
)
;
*
num_deleted_entries
=
0
;
rtc
:
:
Optional
<
std
:
:
vector
<
std
:
:
string
>
>
dir_content
=
ReadDirectory
(
dir
)
;
EXPECT_TRUE
(
dir_content
)
;
for
(
const
auto
&
entry
:
*
dir_content
)
{
if
(
DirExists
(
entry
)
)
{
EXPECT_TRUE
(
RemoveDir
(
entry
)
)
;
(
*
num_deleted_entries
)
+
+
;
}
else
if
(
FileExists
(
entry
)
)
{
EXPECT_TRUE
(
RemoveFile
(
entry
)
)
;
(
*
num_deleted_entries
)
+
+
;
}
else
{
FAIL
(
)
;
}
}
}
void
WriteStringInFile
(
const
std
:
:
string
&
what
const
std
:
:
string
&
file_path
)
{
std
:
:
ofstream
out
(
file_path
)
;
out
<
<
what
;
out
.
close
(
)
;
}
}
class
FileUtilsTest
:
public
testing
:
:
Test
{
protected
:
FileUtilsTest
(
)
{
}
~
FileUtilsTest
(
)
override
{
}
static
void
SetUpTestCase
(
)
{
original_working_dir_
=
webrtc
:
:
test
:
:
WorkingDir
(
)
;
}
void
SetUp
(
)
override
{
ASSERT_EQ
(
chdir
(
original_working_dir_
.
c_str
(
)
)
0
)
;
}
void
TearDown
(
)
override
{
ASSERT_EQ
(
chdir
(
original_working_dir_
.
c_str
(
)
)
0
)
;
}
private
:
static
std
:
:
string
original_working_dir_
;
}
;
std
:
:
string
FileUtilsTest
:
:
original_working_dir_
=
"
"
;
#
if
defined
(
WEBRTC_ANDROID
)
|
|
defined
(
WEBRTC_IOS
)
#
define
MAYBE_OutputPathFromUnchangedWorkingDir
\
DISABLED_OutputPathFromUnchangedWorkingDir
#
else
#
define
MAYBE_OutputPathFromUnchangedWorkingDir
\
OutputPathFromUnchangedWorkingDir
#
endif
TEST_F
(
FileUtilsTest
MAYBE_OutputPathFromUnchangedWorkingDir
)
{
std
:
:
string
path
=
webrtc
:
:
test
:
:
OutputPath
(
)
;
std
:
:
string
expected_end
=
"
out
"
;
expected_end
=
kPathDelimiter
+
expected_end
+
kPathDelimiter
;
ASSERT_EQ
(
path
.
length
(
)
-
expected_end
.
length
(
)
path
.
find
(
expected_end
)
)
;
}
#
if
defined
(
WEBRTC_ANDROID
)
|
|
defined
(
WIN32
)
|
|
defined
(
WEBRTC_IOS
)
#
define
MAYBE_OutputPathFromRootWorkingDir
DISABLED_OutputPathFromRootWorkingDir
#
else
#
define
MAYBE_OutputPathFromRootWorkingDir
OutputPathFromRootWorkingDir
#
endif
TEST_F
(
FileUtilsTest
MAYBE_OutputPathFromRootWorkingDir
)
{
ASSERT_EQ
(
0
chdir
(
kPathDelimiter
)
)
;
ASSERT_EQ
(
"
.
/
"
webrtc
:
:
test
:
:
OutputPath
(
)
)
;
}
TEST_F
(
FileUtilsTest
TempFilename
)
{
std
:
:
string
temp_filename
=
webrtc
:
:
test
:
:
TempFilename
(
webrtc
:
:
test
:
:
OutputPath
(
)
"
TempFilenameTest
"
)
;
ASSERT_TRUE
(
webrtc
:
:
test
:
:
FileExists
(
temp_filename
)
)
<
<
"
Couldn
'
t
find
file
:
"
<
<
temp_filename
;
remove
(
temp_filename
.
c_str
(
)
)
;
}
#
if
defined
(
WEBRTC_IOS
)
#
define
MAYBE_CreateDir
DISABLED_CreateDir
#
else
#
define
MAYBE_CreateDir
CreateDir
#
endif
TEST_F
(
FileUtilsTest
MAYBE_CreateDir
)
{
std
:
:
string
directory
=
"
fileutils
-
unittest
-
empty
-
dir
"
;
remove
(
directory
.
c_str
(
)
)
;
ASSERT_TRUE
(
webrtc
:
:
test
:
:
CreateDir
(
directory
)
)
;
remove
(
directory
.
c_str
(
)
)
;
}
TEST_F
(
FileUtilsTest
WorkingDirReturnsValue
)
{
std
:
:
string
working_dir
=
webrtc
:
:
test
:
:
WorkingDir
(
)
;
ASSERT_GT
(
working_dir
.
length
(
)
0u
)
;
}
TEST_F
(
FileUtilsTest
ResourcePathReturnsValue
)
{
std
:
:
string
resource
=
webrtc
:
:
test
:
:
ResourcePath
(
kTestName
kExtension
)
;
ASSERT_GT
(
resource
.
find
(
kTestName
)
0u
)
;
ASSERT_GT
(
resource
.
find
(
kExtension
)
0u
)
;
}
TEST_F
(
FileUtilsTest
ResourcePathFromRootWorkingDir
)
{
ASSERT_EQ
(
0
chdir
(
kPathDelimiter
)
)
;
std
:
:
string
resource
=
webrtc
:
:
test
:
:
ResourcePath
(
kTestName
kExtension
)
;
#
if
!
defined
(
WEBRTC_IOS
)
ASSERT_NE
(
resource
.
find
(
"
resources
"
)
std
:
:
string
:
:
npos
)
;
#
endif
ASSERT_GT
(
resource
.
find
(
kTestName
)
0u
)
;
ASSERT_GT
(
resource
.
find
(
kExtension
)
0u
)
;
}
TEST_F
(
FileUtilsTest
GetFileSizeExistingFile
)
{
std
:
:
string
temp_filename
=
webrtc
:
:
test
:
:
TempFilename
(
webrtc
:
:
test
:
:
OutputPath
(
)
"
fileutils_unittest
"
)
;
FILE
*
file
=
fopen
(
temp_filename
.
c_str
(
)
"
wb
"
)
;
ASSERT_TRUE
(
file
!
=
NULL
)
<
<
"
Failed
to
open
file
:
"
<
<
temp_filename
;
ASSERT_GT
(
fprintf
(
file
"
%
s
"
"
Dummy
data
"
)
0
)
<
<
"
Failed
to
write
to
file
:
"
<
<
temp_filename
;
fclose
(
file
)
;
ASSERT_GT
(
webrtc
:
:
test
:
:
GetFileSize
(
std
:
:
string
(
temp_filename
.
c_str
(
)
)
)
0u
)
;
remove
(
temp_filename
.
c_str
(
)
)
;
}
TEST_F
(
FileUtilsTest
GetFileSizeNonExistingFile
)
{
ASSERT_EQ
(
0u
webrtc
:
:
test
:
:
GetFileSize
(
"
non
-
existing
-
file
.
tmp
"
)
)
;
}
TEST_F
(
FileUtilsTest
DirExists
)
{
ASSERT_TRUE
(
webrtc
:
:
test
:
:
DirExists
(
webrtc
:
:
test
:
:
OutputPath
(
)
)
)
<
<
"
Existing
directory
not
found
"
;
std
:
:
string
directory
=
"
direxists
-
unittest
-
non_existing
-
dir
"
;
ASSERT_FALSE
(
webrtc
:
:
test
:
:
DirExists
(
directory
)
)
<
<
"
Non
-
existing
directory
found
"
;
std
:
:
string
temp_filename
=
webrtc
:
:
test
:
:
TempFilename
(
webrtc
:
:
test
:
:
OutputPath
(
)
"
TempFilenameTest
"
)
;
ASSERT_TRUE
(
webrtc
:
:
test
:
:
FileExists
(
temp_filename
)
)
<
<
"
Couldn
'
t
find
file
:
"
<
<
temp_filename
;
ASSERT_FALSE
(
webrtc
:
:
test
:
:
DirExists
(
temp_filename
)
)
<
<
"
Existing
file
recognized
as
existing
directory
"
;
remove
(
temp_filename
.
c_str
(
)
)
;
}
TEST_F
(
FileUtilsTest
WriteReadDeleteFilesAndDirs
)
{
size_t
num_deleted_entries
;
const
std
:
:
string
temp_directory
=
OutputPath
(
)
+
"
TempFileUtilsTestReadDirectory
"
+
kPathDelimiter
;
CreateDir
(
temp_directory
)
;
EXPECT_NO_FATAL_FAILURE
(
CleanDir
(
temp_directory
&
num_deleted_entries
)
)
;
EXPECT_TRUE
(
DirExists
(
temp_directory
)
)
;
const
std
:
:
string
temp_filename
=
temp_directory
+
"
TempFilenameTest
"
;
WriteStringInFile
(
"
test
\
n
"
temp_filename
)
;
EXPECT_TRUE
(
FileExists
(
temp_filename
)
)
;
const
std
:
:
string
temp_subdir
=
temp_directory
+
"
subdir
"
+
kPathDelimiter
;
EXPECT_TRUE
(
CreateDir
(
temp_subdir
)
)
;
EXPECT_TRUE
(
DirExists
(
temp_subdir
)
)
;
rtc
:
:
Optional
<
std
:
:
vector
<
std
:
:
string
>
>
dir_content
=
ReadDirectory
(
temp_directory
)
;
EXPECT_TRUE
(
dir_content
)
;
EXPECT_EQ
(
2u
dir_content
-
>
size
(
)
)
;
EXPECT_NO_FATAL_FAILURE
(
CleanDir
(
temp_directory
&
num_deleted_entries
)
)
;
EXPECT_EQ
(
2u
num_deleted_entries
)
;
EXPECT_TRUE
(
RemoveDir
(
temp_directory
)
)
;
EXPECT_FALSE
(
DirExists
(
temp_directory
)
)
;
}
}
}
