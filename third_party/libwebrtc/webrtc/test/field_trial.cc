#
include
"
test
/
field_trial
.
h
"
#
include
<
algorithm
>
#
include
<
cassert
>
#
include
<
cstdio
>
#
include
<
cstdlib
>
#
include
<
map
>
#
include
<
string
>
#
include
"
system_wrappers
/
include
/
field_trial
.
h
"
#
include
"
system_wrappers
/
include
/
field_trial_default
.
h
"
namespace
webrtc
{
namespace
{
bool
field_trials_initiated_
=
false
;
}
namespace
test
{
void
InitFieldTrialsFromString
(
const
std
:
:
string
&
trials_string
)
{
static
const
char
kPersistentStringSeparator
=
'
/
'
;
assert
(
!
field_trials_initiated_
)
;
field_trials_initiated_
=
true
;
if
(
trials_string
.
empty
(
)
)
return
;
size_t
next_item
=
0
;
std
:
:
map
<
std
:
:
string
std
:
:
string
>
field_trials
;
while
(
next_item
<
trials_string
.
length
(
)
)
{
size_t
name_end
=
trials_string
.
find
(
kPersistentStringSeparator
next_item
)
;
if
(
name_end
=
=
trials_string
.
npos
|
|
next_item
=
=
name_end
)
break
;
size_t
group_name_end
=
trials_string
.
find
(
kPersistentStringSeparator
name_end
+
1
)
;
if
(
group_name_end
=
=
trials_string
.
npos
|
|
name_end
+
1
=
=
group_name_end
)
break
;
std
:
:
string
name
(
trials_string
next_item
name_end
-
next_item
)
;
std
:
:
string
group_name
(
trials_string
name_end
+
1
group_name_end
-
name_end
-
1
)
;
next_item
=
group_name_end
+
1
;
if
(
field_trials
.
find
(
name
)
!
=
field_trials
.
end
(
)
&
&
field_trials
.
find
(
name
)
-
>
second
!
=
group_name
)
{
break
;
}
field_trials
[
name
]
=
group_name
;
if
(
next_item
=
=
trials_string
.
length
(
)
)
{
webrtc
:
:
field_trial
:
:
InitFieldTrialsFromString
(
trials_string
.
c_str
(
)
)
;
return
;
}
}
fprintf
(
stderr
"
Invalid
field
trials
string
.
\
n
"
)
;
abort
(
)
;
}
ScopedFieldTrials
:
:
ScopedFieldTrials
(
const
std
:
:
string
&
config
)
:
previous_field_trials_
(
webrtc
:
:
field_trial
:
:
GetFieldTrialString
(
)
)
{
assert
(
field_trials_initiated_
)
;
field_trials_initiated_
=
false
;
current_field_trials_
=
config
;
InitFieldTrialsFromString
(
current_field_trials_
)
;
}
ScopedFieldTrials
:
:
~
ScopedFieldTrials
(
)
{
assert
(
field_trials_initiated_
)
;
webrtc
:
:
field_trial
:
:
InitFieldTrialsFromString
(
previous_field_trials_
)
;
}
}
}
