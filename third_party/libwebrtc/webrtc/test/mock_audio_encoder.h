#
ifndef
TEST_MOCK_AUDIO_ENCODER_H_
#
define
TEST_MOCK_AUDIO_ENCODER_H_
#
include
<
string
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
class
MockAudioEncoder
:
public
AudioEncoder
{
public
:
MockAudioEncoder
(
)
;
~
MockAudioEncoder
(
)
;
MOCK_METHOD0
(
Die
void
(
)
)
;
MOCK_METHOD1
(
Mark
void
(
std
:
:
string
desc
)
)
;
MOCK_CONST_METHOD0
(
SampleRateHz
int
(
)
)
;
MOCK_CONST_METHOD0
(
NumChannels
size_t
(
)
)
;
MOCK_CONST_METHOD0
(
RtpTimestampRateHz
int
(
)
)
;
MOCK_CONST_METHOD0
(
Num10MsFramesInNextPacket
size_t
(
)
)
;
MOCK_CONST_METHOD0
(
Max10MsFramesInAPacket
size_t
(
)
)
;
MOCK_CONST_METHOD0
(
GetTargetBitrate
int
(
)
)
;
MOCK_METHOD0
(
Reset
void
(
)
)
;
MOCK_METHOD1
(
SetFec
bool
(
bool
enable
)
)
;
MOCK_METHOD1
(
SetDtx
bool
(
bool
enable
)
)
;
MOCK_METHOD1
(
SetApplication
bool
(
Application
application
)
)
;
MOCK_METHOD1
(
SetMaxPlaybackRate
void
(
int
frequency_hz
)
)
;
MOCK_METHOD1
(
SetMaxBitrate
void
(
int
max_bps
)
)
;
MOCK_METHOD1
(
SetMaxPayloadSize
void
(
int
max_payload_size_bytes
)
)
;
MOCK_METHOD2
(
OnReceivedUplinkBandwidth
void
(
int
target_audio_bitrate_bps
rtc
:
:
Optional
<
int64_t
>
probing_interval_ms
)
)
;
MOCK_METHOD1
(
OnReceivedUplinkPacketLossFraction
void
(
float
uplink_packet_loss_fraction
)
)
;
MOCK_METHOD2
(
EnableAudioNetworkAdaptor
bool
(
const
std
:
:
string
&
config_string
RtcEventLog
*
event_log
)
)
;
MOCK_METHOD3
(
EncodeImpl
EncodedInfo
(
uint32_t
timestamp
rtc
:
:
ArrayView
<
const
int16_t
>
audio
rtc
:
:
Buffer
*
encoded
)
)
;
class
FakeEncoding
{
public
:
explicit
FakeEncoding
(
const
AudioEncoder
:
:
EncodedInfo
&
info
)
;
explicit
FakeEncoding
(
size_t
encoded_bytes
)
;
AudioEncoder
:
:
EncodedInfo
operator
(
)
(
uint32_t
timestamp
rtc
:
:
ArrayView
<
const
int16_t
>
audio
rtc
:
:
Buffer
*
encoded
)
;
private
:
AudioEncoder
:
:
EncodedInfo
info_
;
}
;
class
CopyEncoding
{
public
:
~
CopyEncoding
(
)
;
CopyEncoding
(
AudioEncoder
:
:
EncodedInfo
info
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
)
;
explicit
CopyEncoding
(
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
)
;
AudioEncoder
:
:
EncodedInfo
operator
(
)
(
uint32_t
timestamp
rtc
:
:
ArrayView
<
const
int16_t
>
audio
rtc
:
:
Buffer
*
encoded
)
;
private
:
AudioEncoder
:
:
EncodedInfo
info_
;
rtc
:
:
ArrayView
<
const
uint8_t
>
payload_
;
}
;
}
;
}
#
endif
