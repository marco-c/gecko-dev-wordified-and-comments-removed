#
import
<
UIKit
/
UIKit
.
h
>
#
include
"
test
/
ios
/
test_support
.
h
"
#
import
"
sdk
/
objc
/
Framework
/
Classes
/
Common
/
RTCUIApplicationStatusObserver
.
h
"
static
int
(
*
g_test_suite
)
(
void
)
=
NULL
;
static
int
g_argc
;
static
char
*
*
g_argv
;
interface
UIApplication
(
Testing
)
-
(
void
)
_terminateWithStatus
:
(
int
)
status
;
end
interface
WebRtcUnitTestDelegate
:
NSObject
{
UIWindow
*
_window
;
}
-
(
void
)
runTests
;
end
implementation
WebRtcUnitTestDelegate
-
(
BOOL
)
application
:
(
UIApplication
*
)
application
didFinishLaunchingWithOptions
:
(
NSDictionary
*
)
launchOptions
{
CGRect
bounds
=
[
[
UIScreen
mainScreen
]
bounds
]
;
_window
=
[
[
UIWindow
alloc
]
initWithFrame
:
bounds
]
;
[
_window
setBackgroundColor
:
[
UIColor
whiteColor
]
]
;
[
_window
makeKeyAndVisible
]
;
UILabel
*
label
=
[
[
UILabel
alloc
]
initWithFrame
:
bounds
]
;
label
.
text
=
[
[
NSProcessInfo
processInfo
]
processName
]
;
label
.
textAlignment
=
NSTextAlignmentCenter
;
[
_window
addSubview
:
label
]
;
[
_window
setRootViewController
:
[
[
UIViewController
alloc
]
init
]
]
;
__unused
RTCUIApplicationStatusObserver
*
observer
=
[
RTCUIApplicationStatusObserver
sharedInstance
]
;
[
self
performSelector
:
selector
(
runTests
)
withObject
:
nil
afterDelay
:
0
.
1
]
;
return
YES
;
}
-
(
void
)
runTests
{
int
exitStatus
=
g_test_suite
(
)
;
[
NSThread
sleepUntilDate
:
[
NSDate
dateWithTimeIntervalSinceNow
:
2
.
0
]
]
;
UIApplication
*
application
=
[
UIApplication
sharedApplication
]
;
[
application
_terminateWithStatus
:
exitStatus
]
;
exit
(
exitStatus
)
;
}
end
namespace
rtc
{
namespace
test
{
void
InitTestSuite
(
int
(
*
test_suite
)
(
void
)
int
argc
char
*
argv
[
]
)
{
g_test_suite
=
test_suite
;
g_argc
=
argc
;
g_argv
=
argv
;
}
void
RunTestsFromIOSApp
(
)
{
autoreleasepool
{
exit
(
UIApplicationMain
(
g_argc
g_argv
nil
"
WebRtcUnitTestDelegate
"
)
)
;
}
}
}
}
