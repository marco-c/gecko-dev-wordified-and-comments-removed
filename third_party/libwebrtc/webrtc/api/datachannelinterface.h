#
ifndef
API_DATACHANNELINTERFACE_H_
#
define
API_DATACHANNELINTERFACE_H_
#
include
<
string
>
#
include
"
rtc_base
/
basictypes
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
copyonwritebuffer
.
h
"
#
include
"
rtc_base
/
refcount
.
h
"
namespace
webrtc
{
struct
DataChannelInit
{
bool
reliable
=
false
;
bool
ordered
=
true
;
int
maxRetransmitTime
=
-
1
;
int
maxRetransmits
=
-
1
;
std
:
:
string
protocol
;
bool
negotiated
=
false
;
int
id
=
-
1
;
}
;
struct
DataBuffer
{
DataBuffer
(
const
rtc
:
:
CopyOnWriteBuffer
&
data
bool
binary
)
:
data
(
data
)
binary
(
binary
)
{
}
explicit
DataBuffer
(
const
std
:
:
string
&
text
)
:
data
(
text
.
data
(
)
text
.
length
(
)
)
binary
(
false
)
{
}
size_t
size
(
)
const
{
return
data
.
size
(
)
;
}
rtc
:
:
CopyOnWriteBuffer
data
;
bool
binary
;
}
;
class
DataChannelObserver
{
public
:
virtual
void
OnStateChange
(
)
=
0
;
virtual
void
OnMessage
(
const
DataBuffer
&
buffer
)
=
0
;
virtual
void
OnBufferedAmountChange
(
uint64_t
previous_amount
)
{
}
protected
:
virtual
~
DataChannelObserver
(
)
{
}
}
;
class
DataChannelInterface
:
public
rtc
:
:
RefCountInterface
{
public
:
enum
DataState
{
kConnecting
kOpen
kClosing
kClosed
}
;
static
const
char
*
DataStateString
(
DataState
state
)
{
switch
(
state
)
{
case
kConnecting
:
return
"
connecting
"
;
case
kOpen
:
return
"
open
"
;
case
kClosing
:
return
"
closing
"
;
case
kClosed
:
return
"
closed
"
;
}
RTC_CHECK
(
false
)
<
<
"
Unknown
DataChannel
state
:
"
<
<
state
;
return
"
"
;
}
virtual
void
RegisterObserver
(
DataChannelObserver
*
observer
)
=
0
;
virtual
void
UnregisterObserver
(
)
=
0
;
virtual
std
:
:
string
label
(
)
const
=
0
;
virtual
bool
reliable
(
)
const
=
0
;
virtual
bool
ordered
(
)
const
{
return
false
;
}
virtual
uint16_t
maxRetransmitTime
(
)
const
{
return
0
;
}
virtual
uint16_t
maxRetransmits
(
)
const
{
return
0
;
}
virtual
std
:
:
string
protocol
(
)
const
{
return
std
:
:
string
(
)
;
}
virtual
bool
negotiated
(
)
const
{
return
false
;
}
virtual
int
id
(
)
const
=
0
;
virtual
DataState
state
(
)
const
=
0
;
virtual
uint32_t
messages_sent
(
)
const
=
0
;
virtual
uint64_t
bytes_sent
(
)
const
=
0
;
virtual
uint32_t
messages_received
(
)
const
=
0
;
virtual
uint64_t
bytes_received
(
)
const
=
0
;
virtual
uint64_t
buffered_amount
(
)
const
=
0
;
virtual
void
Close
(
)
=
0
;
virtual
bool
Send
(
const
DataBuffer
&
buffer
)
=
0
;
protected
:
virtual
~
DataChannelInterface
(
)
{
}
}
;
}
#
endif
