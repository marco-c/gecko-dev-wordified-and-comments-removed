#
include
"
api
/
mediatypes
.
h
"
#
include
"
api
/
mediastreaminterface
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
{
static
const
char
*
kMediaTypeData
=
"
data
"
;
}
namespace
cricket
{
std
:
:
string
MediaTypeToString
(
MediaType
type
)
{
switch
(
type
)
{
case
MEDIA_TYPE_AUDIO
:
return
webrtc
:
:
MediaStreamTrackInterface
:
:
kAudioKind
;
case
MEDIA_TYPE_VIDEO
:
return
webrtc
:
:
MediaStreamTrackInterface
:
:
kVideoKind
;
case
MEDIA_TYPE_DATA
:
return
kMediaTypeData
;
}
FATAL
(
)
;
return
"
"
;
}
MediaType
MediaTypeFromString
(
const
std
:
:
string
&
type_str
)
{
if
(
type_str
=
=
webrtc
:
:
MediaStreamTrackInterface
:
:
kAudioKind
)
{
return
MEDIA_TYPE_AUDIO
;
}
else
if
(
type_str
=
=
webrtc
:
:
MediaStreamTrackInterface
:
:
kVideoKind
)
{
return
MEDIA_TYPE_VIDEO
;
}
else
if
(
type_str
=
=
kMediaTypeData
)
{
return
MEDIA_TYPE_DATA
;
}
FATAL
(
)
;
return
static_cast
<
MediaType
>
(
-
1
)
;
}
}
