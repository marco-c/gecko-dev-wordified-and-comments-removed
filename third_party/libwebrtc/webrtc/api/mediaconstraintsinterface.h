#
ifndef
API_MEDIACONSTRAINTSINTERFACE_H_
#
define
API_MEDIACONSTRAINTSINTERFACE_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
optional
.
h
"
#
include
"
api
/
peerconnectioninterface
.
h
"
namespace
webrtc
{
class
MediaConstraintsInterface
{
public
:
struct
Constraint
{
Constraint
(
)
{
}
Constraint
(
const
std
:
:
string
&
key
const
std
:
:
string
value
)
:
key
(
key
)
value
(
value
)
{
}
std
:
:
string
key
;
std
:
:
string
value
;
}
;
class
Constraints
:
public
std
:
:
vector
<
Constraint
>
{
public
:
bool
FindFirst
(
const
std
:
:
string
&
key
std
:
:
string
*
value
)
const
;
}
;
static
const
char
kMinAspectRatio
[
]
;
static
const
char
kMaxAspectRatio
[
]
;
static
const
char
kMaxWidth
[
]
;
static
const
char
kMinWidth
[
]
;
static
const
char
kMaxHeight
[
]
;
static
const
char
kMinHeight
[
]
;
static
const
char
kMaxFrameRate
[
]
;
static
const
char
kMinFrameRate
[
]
;
static
const
char
kEchoCancellation
[
]
;
static
const
char
kGoogEchoCancellation
[
]
;
static
const
char
kExtendedFilterEchoCancellation
[
]
;
static
const
char
kDAEchoCancellation
[
]
;
static
const
char
kAutoGainControl
[
]
;
static
const
char
kExperimentalAutoGainControl
[
]
;
static
const
char
kNoiseSuppression
[
]
;
static
const
char
kExperimentalNoiseSuppression
[
]
;
static
const
char
kIntelligibilityEnhancer
[
]
;
static
const
char
kLevelControl
[
]
;
static
const
char
kLevelControlInitialPeakLevelDBFS
[
]
;
static
const
char
kHighpassFilter
[
]
;
static
const
char
kTypingNoiseDetection
[
]
;
static
const
char
kAudioMirroring
[
]
;
static
const
char
kAudioNetworkAdaptorConfig
[
]
;
static
const
char
kNoiseReduction
[
]
;
static
const
char
kOfferToReceiveVideo
[
]
;
static
const
char
kOfferToReceiveAudio
[
]
;
static
const
char
kVoiceActivityDetection
[
]
;
static
const
char
kIceRestart
[
]
;
static
const
char
kUseRtpMux
[
]
;
static
const
char
kValueTrue
[
]
;
static
const
char
kValueFalse
[
]
;
static
const
char
kEnableDtlsSrtp
[
]
;
static
const
char
kEnableRtpDataChannels
[
]
;
static
const
char
kEnableDscp
[
]
;
static
const
char
kEnableIPv6
[
]
;
static
const
char
kEnableVideoSuspendBelowMinBitrate
[
]
;
static
const
char
kCombinedAudioVideoBwe
[
]
;
static
const
char
kScreencastMinBitrate
[
]
;
static
const
char
kCpuOveruseDetection
[
]
;
static
const
char
kPayloadPadding
[
]
;
static
const
char
kInternalConstraintPrefix
[
]
;
virtual
~
MediaConstraintsInterface
(
)
=
default
;
virtual
const
Constraints
&
GetMandatory
(
)
const
=
0
;
virtual
const
Constraints
&
GetOptional
(
)
const
=
0
;
}
;
bool
FindConstraint
(
const
MediaConstraintsInterface
*
constraints
const
std
:
:
string
&
key
bool
*
value
size_t
*
mandatory_constraints
)
;
bool
FindConstraint
(
const
MediaConstraintsInterface
*
constraints
const
std
:
:
string
&
key
int
*
value
size_t
*
mandatory_constraints
)
;
void
CopyConstraintsIntoRtcConfiguration
(
const
MediaConstraintsInterface
*
constraints
PeerConnectionInterface
:
:
RTCConfiguration
*
configuration
)
;
void
CopyConstraintsIntoAudioOptions
(
const
MediaConstraintsInterface
*
constraints
cricket
:
:
AudioOptions
*
options
)
;
}
#
endif
