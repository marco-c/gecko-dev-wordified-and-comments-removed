#
ifndef
API_VIDEO_CODECS_VIDEO_DECODER_H_
#
define
API_VIDEO_CODECS_VIDEO_DECODER_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
common_types
.
h
"
#
include
"
common_video
/
include
/
video_frame
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
RTPFragmentationHeader
;
struct
CodecSpecificInfo
;
class
VideoCodec
;
class
DecodedImageCallback
{
public
:
virtual
~
DecodedImageCallback
(
)
{
}
virtual
int32_t
Decoded
(
VideoFrame
&
decodedImage
)
=
0
;
virtual
int32_t
Decoded
(
VideoFrame
&
decodedImage
int64_t
decode_time_ms
)
{
return
Decoded
(
decodedImage
)
;
}
virtual
void
Decoded
(
VideoFrame
&
decodedImage
rtc
:
:
Optional
<
int32_t
>
decode_time_ms
rtc
:
:
Optional
<
uint8_t
>
qp
)
{
Decoded
(
decodedImage
decode_time_ms
?
static_cast
<
int32_t
>
(
*
decode_time_ms
)
:
-
1
)
;
}
virtual
int32_t
ReceivedDecodedReferenceFrame
(
const
uint64_t
pictureId
)
{
return
-
1
;
}
virtual
int32_t
ReceivedDecodedFrame
(
const
uint64_t
pictureId
)
{
return
-
1
;
}
}
;
class
VideoDecoder
{
public
:
virtual
~
VideoDecoder
(
)
{
}
virtual
int32_t
InitDecode
(
const
VideoCodec
*
codec_settings
int32_t
number_of_cores
)
=
0
;
virtual
int32_t
Decode
(
const
EncodedImage
&
input_image
bool
missing_frames
const
RTPFragmentationHeader
*
fragmentation
const
CodecSpecificInfo
*
codec_specific_info
=
NULL
int64_t
render_time_ms
=
-
1
)
=
0
;
virtual
int32_t
RegisterDecodeCompleteCallback
(
DecodedImageCallback
*
callback
)
=
0
;
virtual
int32_t
Release
(
)
=
0
;
virtual
bool
PrefersLateDecoding
(
)
const
{
return
true
;
}
virtual
const
char
*
ImplementationName
(
)
const
{
return
"
unknown
"
;
}
}
;
}
#
endif
