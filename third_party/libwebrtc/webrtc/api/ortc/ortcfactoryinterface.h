#
ifndef
API_ORTC_ORTCFACTORYINTERFACE_H_
#
define
API_ORTC_ORTCFACTORYINTERFACE_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
"
api
/
mediaconstraintsinterface
.
h
"
#
include
"
api
/
mediastreaminterface
.
h
"
#
include
"
api
/
mediatypes
.
h
"
#
include
"
api
/
ortc
/
ortcrtpreceiverinterface
.
h
"
#
include
"
api
/
ortc
/
ortcrtpsenderinterface
.
h
"
#
include
"
api
/
ortc
/
packettransportinterface
.
h
"
#
include
"
api
/
ortc
/
rtptransportcontrollerinterface
.
h
"
#
include
"
api
/
ortc
/
rtptransportinterface
.
h
"
#
include
"
api
/
ortc
/
srtptransportinterface
.
h
"
#
include
"
api
/
ortc
/
udptransportinterface
.
h
"
#
include
"
api
/
rtcerror
.
h
"
#
include
"
api
/
rtpparameters
.
h
"
#
include
"
rtc_base
/
network
.
h
"
#
include
"
rtc_base
/
scoped_ref_ptr
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
class
AudioDeviceModule
;
class
OrtcFactoryInterface
{
public
:
static
RTCErrorOr
<
std
:
:
unique_ptr
<
OrtcFactoryInterface
>
>
Create
(
rtc
:
:
Thread
*
network_thread
rtc
:
:
Thread
*
signaling_thread
rtc
:
:
NetworkManager
*
network_manager
rtc
:
:
PacketSocketFactory
*
socket_factory
AudioDeviceModule
*
adm
rtc
:
:
scoped_refptr
<
AudioEncoderFactory
>
audio_encoder_factory
rtc
:
:
scoped_refptr
<
AudioDecoderFactory
>
audio_decoder_factory
)
;
static
RTCErrorOr
<
std
:
:
unique_ptr
<
OrtcFactoryInterface
>
>
Create
(
rtc
:
:
scoped_refptr
<
AudioEncoderFactory
>
audio_encoder_factory
rtc
:
:
scoped_refptr
<
AudioDecoderFactory
>
audio_decoder_factory
)
{
return
Create
(
nullptr
nullptr
nullptr
nullptr
nullptr
audio_encoder_factory
audio_decoder_factory
)
;
}
virtual
~
OrtcFactoryInterface
(
)
{
}
virtual
RTCErrorOr
<
std
:
:
unique_ptr
<
RtpTransportControllerInterface
>
>
CreateRtpTransportController
(
)
=
0
;
virtual
RTCErrorOr
<
std
:
:
unique_ptr
<
RtpTransportInterface
>
>
CreateRtpTransport
(
const
RtpTransportParameters
&
rtp_parameters
PacketTransportInterface
*
rtp
PacketTransportInterface
*
rtcp
RtpTransportControllerInterface
*
transport_controller
)
=
0
;
virtual
RTCErrorOr
<
std
:
:
unique_ptr
<
SrtpTransportInterface
>
>
CreateSrtpTransport
(
const
RtpTransportParameters
&
rtp_parameters
PacketTransportInterface
*
rtp
PacketTransportInterface
*
rtcp
RtpTransportControllerInterface
*
transport_controller
)
=
0
;
virtual
RtpCapabilities
GetRtpSenderCapabilities
(
cricket
:
:
MediaType
kind
)
const
=
0
;
virtual
RTCErrorOr
<
std
:
:
unique_ptr
<
OrtcRtpSenderInterface
>
>
CreateRtpSender
(
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
RtpTransportInterface
*
transport
)
=
0
;
virtual
RTCErrorOr
<
std
:
:
unique_ptr
<
OrtcRtpSenderInterface
>
>
CreateRtpSender
(
cricket
:
:
MediaType
kind
RtpTransportInterface
*
transport
)
=
0
;
virtual
RtpCapabilities
GetRtpReceiverCapabilities
(
cricket
:
:
MediaType
kind
)
const
=
0
;
virtual
RTCErrorOr
<
std
:
:
unique_ptr
<
OrtcRtpReceiverInterface
>
>
CreateRtpReceiver
(
cricket
:
:
MediaType
kind
RtpTransportInterface
*
transport
)
=
0
;
virtual
RTCErrorOr
<
std
:
:
unique_ptr
<
UdpTransportInterface
>
>
CreateUdpTransport
(
int
family
uint16_t
min_port
uint16_t
max_port
)
=
0
;
RTCErrorOr
<
std
:
:
unique_ptr
<
UdpTransportInterface
>
>
CreateUdpTransport
(
int
family
)
{
return
CreateUdpTransport
(
family
0
0
)
;
}
virtual
rtc
:
:
scoped_refptr
<
AudioSourceInterface
>
CreateAudioSource
(
const
cricket
:
:
AudioOptions
&
options
)
=
0
;
rtc
:
:
scoped_refptr
<
AudioSourceInterface
>
CreateAudioSource
(
)
{
return
CreateAudioSource
(
cricket
:
:
AudioOptions
(
)
)
;
}
virtual
rtc
:
:
scoped_refptr
<
VideoTrackSourceInterface
>
CreateVideoSource
(
std
:
:
unique_ptr
<
cricket
:
:
VideoCapturer
>
capturer
const
MediaConstraintsInterface
*
constraints
)
=
0
;
rtc
:
:
scoped_refptr
<
VideoTrackSourceInterface
>
CreateVideoSource
(
std
:
:
unique_ptr
<
cricket
:
:
VideoCapturer
>
capturer
)
{
return
CreateVideoSource
(
std
:
:
move
(
capturer
)
nullptr
)
;
}
virtual
rtc
:
:
scoped_refptr
<
VideoTrackInterface
>
CreateVideoTrack
(
const
std
:
:
string
&
id
VideoTrackSourceInterface
*
source
)
=
0
;
virtual
rtc
:
:
scoped_refptr
<
AudioTrackInterface
>
CreateAudioTrack
(
const
std
:
:
string
&
id
AudioSourceInterface
*
source
)
=
0
;
}
;
}
#
endif
