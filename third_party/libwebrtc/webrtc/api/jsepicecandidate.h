#
ifndef
API_JSEPICECANDIDATE_H_
#
define
API_JSEPICECANDIDATE_H_
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
jsep
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
webrtc
{
class
JsepIceCandidate
:
public
IceCandidateInterface
{
public
:
JsepIceCandidate
(
const
std
:
:
string
&
sdp_mid
int
sdp_mline_index
)
;
JsepIceCandidate
(
const
std
:
:
string
&
sdp_mid
int
sdp_mline_index
const
cricket
:
:
Candidate
&
candidate
)
;
~
JsepIceCandidate
(
)
;
bool
Initialize
(
const
std
:
:
string
&
sdp
SdpParseError
*
err
)
;
void
SetCandidate
(
const
cricket
:
:
Candidate
&
candidate
)
{
candidate_
=
candidate
;
}
virtual
std
:
:
string
sdp_mid
(
)
const
{
return
sdp_mid_
;
}
virtual
int
sdp_mline_index
(
)
const
{
return
sdp_mline_index_
;
}
virtual
const
cricket
:
:
Candidate
&
candidate
(
)
const
{
return
candidate_
;
}
virtual
std
:
:
string
server_url
(
)
const
{
return
candidate_
.
url
(
)
;
}
virtual
bool
ToString
(
std
:
:
string
*
out
)
const
;
private
:
std
:
:
string
sdp_mid_
;
int
sdp_mline_index_
;
cricket
:
:
Candidate
candidate_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
JsepIceCandidate
)
;
}
;
class
JsepCandidateCollection
:
public
IceCandidateCollection
{
public
:
JsepCandidateCollection
(
)
{
}
JsepCandidateCollection
(
JsepCandidateCollection
&
&
o
)
:
candidates_
(
std
:
:
move
(
o
.
candidates_
)
)
{
}
~
JsepCandidateCollection
(
)
;
virtual
size_t
count
(
)
const
{
return
candidates_
.
size
(
)
;
}
virtual
bool
HasCandidate
(
const
IceCandidateInterface
*
candidate
)
const
;
virtual
void
add
(
JsepIceCandidate
*
candidate
)
{
candidates_
.
push_back
(
candidate
)
;
}
virtual
const
IceCandidateInterface
*
at
(
size_t
index
)
const
{
return
candidates_
[
index
]
;
}
size_t
remove
(
const
cricket
:
:
Candidate
&
candidate
)
;
private
:
std
:
:
vector
<
JsepIceCandidate
*
>
candidates_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
JsepCandidateCollection
)
;
}
;
}
#
endif
