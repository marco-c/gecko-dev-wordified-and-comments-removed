#
include
"
common_video
/
h264
/
pps_parser
.
h
"
#
include
<
memory
>
#
include
<
vector
>
#
include
"
common_video
/
h264
/
h264_common
.
h
"
#
include
"
rtc_base
/
bitbuffer
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
define
RETURN_EMPTY_ON_FAIL
(
x
)
\
if
(
!
(
x
)
)
{
\
return
rtc
:
:
nullopt
;
\
}
namespace
{
const
int
kMaxPicInitQpDeltaValue
=
25
;
const
int
kMinPicInitQpDeltaValue
=
-
26
;
}
namespace
webrtc
{
rtc
:
:
Optional
<
PpsParser
:
:
PpsState
>
PpsParser
:
:
ParsePps
(
const
uint8_t
*
data
size_t
length
)
{
std
:
:
vector
<
uint8_t
>
unpacked_buffer
=
H264
:
:
ParseRbsp
(
data
length
)
;
rtc
:
:
BitBuffer
bit_buffer
(
unpacked_buffer
.
data
(
)
unpacked_buffer
.
size
(
)
)
;
return
ParseInternal
(
&
bit_buffer
)
;
}
bool
PpsParser
:
:
ParsePpsIds
(
const
uint8_t
*
data
size_t
length
uint32_t
*
pps_id
uint32_t
*
sps_id
)
{
RTC_DCHECK
(
pps_id
)
;
RTC_DCHECK
(
sps_id
)
;
std
:
:
vector
<
uint8_t
>
unpacked_buffer
=
H264
:
:
ParseRbsp
(
data
length
)
;
rtc
:
:
BitBuffer
bit_buffer
(
unpacked_buffer
.
data
(
)
unpacked_buffer
.
size
(
)
)
;
return
ParsePpsIdsInternal
(
&
bit_buffer
pps_id
sps_id
)
;
}
rtc
:
:
Optional
<
uint32_t
>
PpsParser
:
:
ParsePpsIdFromSlice
(
const
uint8_t
*
data
size_t
length
)
{
std
:
:
vector
<
uint8_t
>
unpacked_buffer
=
H264
:
:
ParseRbsp
(
data
length
)
;
rtc
:
:
BitBuffer
slice_reader
(
unpacked_buffer
.
data
(
)
unpacked_buffer
.
size
(
)
)
;
uint32_t
golomb_tmp
;
if
(
!
slice_reader
.
ReadExponentialGolomb
(
&
golomb_tmp
)
)
return
rtc
:
:
nullopt
;
if
(
!
slice_reader
.
ReadExponentialGolomb
(
&
golomb_tmp
)
)
return
rtc
:
:
nullopt
;
uint32_t
slice_pps_id
;
if
(
!
slice_reader
.
ReadExponentialGolomb
(
&
slice_pps_id
)
)
return
rtc
:
:
nullopt
;
return
slice_pps_id
;
}
rtc
:
:
Optional
<
PpsParser
:
:
PpsState
>
PpsParser
:
:
ParseInternal
(
rtc
:
:
BitBuffer
*
bit_buffer
)
{
PpsState
pps
;
RETURN_EMPTY_ON_FAIL
(
ParsePpsIdsInternal
(
bit_buffer
&
pps
.
id
&
pps
.
sps_id
)
)
;
uint32_t
bits_tmp
;
uint32_t
golomb_ignored
;
uint32_t
entropy_coding_mode_flag
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadBits
(
&
entropy_coding_mode_flag
1
)
)
;
pps
.
entropy_coding_mode_flag
=
entropy_coding_mode_flag
!
=
0
;
uint32_t
bottom_field_pic_order_in_frame_present_flag
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadBits
(
&
bottom_field_pic_order_in_frame_present_flag
1
)
)
;
pps
.
bottom_field_pic_order_in_frame_present_flag
=
bottom_field_pic_order_in_frame_present_flag
!
=
0
;
uint32_t
num_slice_groups_minus1
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
num_slice_groups_minus1
)
)
;
if
(
num_slice_groups_minus1
>
0
)
{
uint32_t
slice_group_map_type
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
slice_group_map_type
)
)
;
if
(
slice_group_map_type
=
=
0
)
{
for
(
uint32_t
i_group
=
0
;
i_group
<
=
num_slice_groups_minus1
;
+
+
i_group
)
{
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
golomb_ignored
)
)
;
}
}
else
if
(
slice_group_map_type
=
=
1
)
{
}
else
if
(
slice_group_map_type
=
=
2
)
{
for
(
uint32_t
i_group
=
0
;
i_group
<
=
num_slice_groups_minus1
;
+
+
i_group
)
{
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
golomb_ignored
)
)
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
golomb_ignored
)
)
;
}
}
else
if
(
slice_group_map_type
=
=
3
|
|
slice_group_map_type
=
=
4
|
|
slice_group_map_type
=
=
5
)
{
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadBits
(
&
bits_tmp
1
)
)
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
golomb_ignored
)
)
;
}
else
if
(
slice_group_map_type
=
=
6
)
{
uint32_t
pic_size_in_map_units_minus1
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
pic_size_in_map_units_minus1
)
)
;
uint32_t
slice_group_id_bits
=
0
;
uint32_t
num_slice_groups
=
num_slice_groups_minus1
+
1
;
if
(
(
num_slice_groups
&
(
num_slice_groups
-
1
)
)
!
=
0
)
+
+
slice_group_id_bits
;
while
(
num_slice_groups
>
0
)
{
num_slice_groups
>
>
=
1
;
+
+
slice_group_id_bits
;
}
for
(
uint32_t
i
=
0
;
i
<
=
pic_size_in_map_units_minus1
;
i
+
+
)
{
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadBits
(
&
bits_tmp
slice_group_id_bits
)
)
;
}
}
}
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
golomb_ignored
)
)
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
golomb_ignored
)
)
;
uint32_t
weighted_pred_flag
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadBits
(
&
weighted_pred_flag
1
)
)
;
pps
.
weighted_pred_flag
=
weighted_pred_flag
!
=
0
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadBits
(
&
pps
.
weighted_bipred_idc
2
)
)
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadSignedExponentialGolomb
(
&
pps
.
pic_init_qp_minus26
)
)
;
if
(
pps
.
pic_init_qp_minus26
>
kMaxPicInitQpDeltaValue
|
|
pps
.
pic_init_qp_minus26
<
kMinPicInitQpDeltaValue
)
{
RETURN_EMPTY_ON_FAIL
(
false
)
;
}
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
golomb_ignored
)
)
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadExponentialGolomb
(
&
golomb_ignored
)
)
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadBits
(
&
bits_tmp
2
)
)
;
RETURN_EMPTY_ON_FAIL
(
bit_buffer
-
>
ReadBits
(
&
pps
.
redundant_pic_cnt_present_flag
1
)
)
;
return
pps
;
}
bool
PpsParser
:
:
ParsePpsIdsInternal
(
rtc
:
:
BitBuffer
*
bit_buffer
uint32_t
*
pps_id
uint32_t
*
sps_id
)
{
if
(
!
bit_buffer
-
>
ReadExponentialGolomb
(
pps_id
)
)
return
false
;
if
(
!
bit_buffer
-
>
ReadExponentialGolomb
(
sps_id
)
)
return
false
;
return
true
;
}
}
