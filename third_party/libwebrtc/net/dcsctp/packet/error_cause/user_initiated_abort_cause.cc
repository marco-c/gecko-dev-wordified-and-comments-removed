#
include
"
net
/
dcsctp
/
packet
/
error_cause
/
user_initiated_abort_cause
.
h
"
#
include
<
stdint
.
h
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
type_traits
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
bounded_byte_reader
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
bounded_byte_writer
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
tlv_trait
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
namespace
dcsctp
{
constexpr
int
UserInitiatedAbortCause
:
:
kType
;
std
:
:
optional
<
UserInitiatedAbortCause
>
UserInitiatedAbortCause
:
:
Parse
(
webrtc
:
:
ArrayView
<
const
uint8_t
>
data
)
{
std
:
:
optional
<
BoundedByteReader
<
kHeaderSize
>
>
reader
=
ParseTLV
(
data
)
;
if
(
!
reader
.
has_value
(
)
)
{
return
std
:
:
nullopt
;
}
if
(
reader
-
>
variable_data
(
)
.
empty
(
)
)
{
return
UserInitiatedAbortCause
(
"
"
)
;
}
return
UserInitiatedAbortCause
(
std
:
:
string
(
reinterpret_cast
<
const
char
*
>
(
reader
-
>
variable_data
(
)
.
data
(
)
)
reader
-
>
variable_data
(
)
.
size
(
)
)
)
;
}
void
UserInitiatedAbortCause
:
:
SerializeTo
(
std
:
:
vector
<
uint8_t
>
&
out
)
const
{
BoundedByteWriter
<
kHeaderSize
>
writer
=
AllocateTLV
(
out
upper_layer_abort_reason_
.
size
(
)
)
;
writer
.
CopyToVariableData
(
webrtc
:
:
MakeArrayView
(
reinterpret_cast
<
const
uint8_t
*
>
(
upper_layer_abort_reason_
.
data
(
)
)
upper_layer_abort_reason_
.
size
(
)
)
)
;
}
std
:
:
string
UserInitiatedAbortCause
:
:
ToString
(
)
const
{
webrtc
:
:
StringBuilder
sb
;
sb
<
<
"
User
-
Initiated
Abort
reason
=
"
<
<
upper_layer_abort_reason_
;
return
sb
.
Release
(
)
;
}
}
