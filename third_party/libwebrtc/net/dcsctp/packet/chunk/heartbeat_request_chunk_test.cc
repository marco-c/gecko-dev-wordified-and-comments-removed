#
include
"
net
/
dcsctp
/
packet
/
chunk
/
heartbeat_request_chunk
.
h
"
#
include
<
cstdint
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
parameter
/
heartbeat_info_parameter
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
parameter
/
parameter
.
h
"
#
include
"
net
/
dcsctp
/
testing
/
testing_macros
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
dcsctp
{
namespace
{
using
:
:
testing
:
:
ElementsAre
;
TEST
(
HeartbeatRequestChunkTest
FromCapture
)
{
uint8_t
data
[
]
=
{
0x04
0x00
0x00
0x2c
0x00
0x01
0x00
0x28
0xad
0x24
0x36
0x60
0x37
0x26
0x07
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x7b
0x10
0x00
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
}
;
ASSERT_HAS_VALUE_AND_ASSIGN
(
HeartbeatRequestChunk
chunk
HeartbeatRequestChunk
:
:
Parse
(
data
)
)
;
ASSERT_HAS_VALUE_AND_ASSIGN
(
HeartbeatInfoParameter
info
chunk
.
info
(
)
)
;
EXPECT_THAT
(
info
.
info
(
)
ElementsAre
(
0xad
0x24
0x36
0x60
0x37
0x26
0x07
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x7b
0x10
0x00
0x00
0x01
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
)
)
;
}
TEST
(
HeartbeatRequestChunkTest
SerializeAndDeserialize
)
{
uint8_t
info_data
[
]
=
{
1
2
3
4
}
;
Parameters
parameters
=
Parameters
:
:
Builder
(
)
.
Add
(
HeartbeatInfoParameter
(
info_data
)
)
.
Build
(
)
;
HeartbeatRequestChunk
chunk
(
std
:
:
move
(
parameters
)
)
;
std
:
:
vector
<
uint8_t
>
serialized
;
chunk
.
SerializeTo
(
serialized
)
;
ASSERT_HAS_VALUE_AND_ASSIGN
(
HeartbeatRequestChunk
deserialized
HeartbeatRequestChunk
:
:
Parse
(
serialized
)
)
;
ASSERT_HAS_VALUE_AND_ASSIGN
(
HeartbeatInfoParameter
info
deserialized
.
info
(
)
)
;
EXPECT_THAT
(
info
.
info
(
)
ElementsAre
(
1
2
3
4
)
)
;
EXPECT_EQ
(
deserialized
.
ToString
(
)
"
HEARTBEAT
"
)
;
}
}
}
