#
include
"
net
/
dcsctp
/
packet
/
chunk
/
shutdown_complete_chunk
.
h
"
#
include
<
stdint
.
h
>
#
include
<
optional
>
#
include
<
type_traits
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
bounded_byte_reader
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
bounded_byte_writer
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
tlv_trait
.
h
"
namespace
dcsctp
{
constexpr
int
ShutdownCompleteChunk
:
:
kType
;
std
:
:
optional
<
ShutdownCompleteChunk
>
ShutdownCompleteChunk
:
:
Parse
(
rtc
:
:
ArrayView
<
const
uint8_t
>
data
)
{
std
:
:
optional
<
BoundedByteReader
<
kHeaderSize
>
>
reader
=
ParseTLV
(
data
)
;
if
(
!
reader
.
has_value
(
)
)
{
return
std
:
:
nullopt
;
}
uint8_t
flags
=
reader
-
>
Load8
<
1
>
(
)
;
bool
tag_reflected
=
(
flags
&
(
1
<
<
kFlagsBitT
)
)
!
=
0
;
return
ShutdownCompleteChunk
(
tag_reflected
)
;
}
void
ShutdownCompleteChunk
:
:
SerializeTo
(
std
:
:
vector
<
uint8_t
>
&
out
)
const
{
BoundedByteWriter
<
kHeaderSize
>
writer
=
AllocateTLV
(
out
)
;
writer
.
Store8
<
1
>
(
tag_reflected_
?
(
1
<
<
kFlagsBitT
)
:
0
)
;
}
std
:
:
string
ShutdownCompleteChunk
:
:
ToString
(
)
const
{
return
"
SHUTDOWN
-
COMPLETE
"
;
}
}
