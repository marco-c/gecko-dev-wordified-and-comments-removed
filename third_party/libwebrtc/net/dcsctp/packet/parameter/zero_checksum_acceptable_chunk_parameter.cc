#
include
"
net
/
dcsctp
/
packet
/
parameter
/
zero_checksum_acceptable_chunk_parameter
.
h
"
#
include
<
stdint
.
h
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
namespace
dcsctp
{
constexpr
int
ZeroChecksumAcceptableChunkParameter
:
:
kType
;
std
:
:
optional
<
ZeroChecksumAcceptableChunkParameter
>
ZeroChecksumAcceptableChunkParameter
:
:
Parse
(
rtc
:
:
ArrayView
<
const
uint8_t
>
data
)
{
std
:
:
optional
<
BoundedByteReader
<
kHeaderSize
>
>
reader
=
ParseTLV
(
data
)
;
if
(
!
reader
.
has_value
(
)
)
{
return
std
:
:
nullopt
;
}
ZeroChecksumAlternateErrorDetectionMethod
method
(
reader
-
>
Load32
<
4
>
(
)
)
;
if
(
method
=
=
ZeroChecksumAlternateErrorDetectionMethod
:
:
None
(
)
)
{
return
std
:
:
nullopt
;
}
return
ZeroChecksumAcceptableChunkParameter
(
method
)
;
}
void
ZeroChecksumAcceptableChunkParameter
:
:
SerializeTo
(
std
:
:
vector
<
uint8_t
>
&
out
)
const
{
BoundedByteWriter
<
kHeaderSize
>
writer
=
AllocateTLV
(
out
)
;
writer
.
Store32
<
4
>
(
*
error_detection_method_
)
;
}
std
:
:
string
ZeroChecksumAcceptableChunkParameter
:
:
ToString
(
)
const
{
rtc
:
:
StringBuilder
sb
;
sb
<
<
"
Zero
Checksum
Acceptable
(
"
<
<
*
error_detection_method_
<
<
"
)
"
;
return
sb
.
Release
(
)
;
}
}
