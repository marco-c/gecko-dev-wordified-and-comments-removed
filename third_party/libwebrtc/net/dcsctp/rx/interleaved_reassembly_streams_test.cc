#
include
"
net
/
dcsctp
/
rx
/
interleaved_reassembly_streams
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
net
/
dcsctp
/
common
/
sequence_numbers
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
chunk
/
forward_tsn_common
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
chunk
/
iforward_tsn_chunk
.
h
"
#
include
"
net
/
dcsctp
/
packet
/
data
.
h
"
#
include
"
net
/
dcsctp
/
rx
/
reassembly_streams
.
h
"
#
include
"
net
/
dcsctp
/
testing
/
data_generator
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
dcsctp
{
namespace
{
using
:
:
testing
:
:
MockFunction
;
using
:
:
testing
:
:
NiceMock
;
class
InterleavedReassemblyStreamsTest
:
public
testing
:
:
Test
{
protected
:
UnwrappedTSN
tsn
(
uint32_t
value
)
{
return
tsn_
.
Unwrap
(
TSN
(
value
)
)
;
}
InterleavedReassemblyStreamsTest
(
)
{
}
DataGenerator
gen_
;
UnwrappedTSN
:
:
Unwrapper
tsn_
;
}
;
TEST_F
(
InterleavedReassemblyStreamsTest
AddUnorderedMessageReturnsCorrectSize
)
{
NiceMock
<
MockFunction
<
ReassemblyStreams
:
:
OnAssembledMessage
>
>
on_assembled
;
InterleavedReassemblyStreams
streams
(
"
"
on_assembled
.
AsStdFunction
(
)
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
1
)
gen_
.
Unordered
(
{
1
}
"
B
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
2
)
gen_
.
Unordered
(
{
2
3
4
}
)
)
3
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
3
)
gen_
.
Unordered
(
{
5
6
}
)
)
2
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
4
)
gen_
.
Unordered
(
{
7
}
"
E
"
)
)
-
6
)
;
}
TEST_F
(
InterleavedReassemblyStreamsTest
AddSimpleOrderedMessageReturnsCorrectSize
)
{
NiceMock
<
MockFunction
<
ReassemblyStreams
:
:
OnAssembledMessage
>
>
on_assembled
;
InterleavedReassemblyStreams
streams
(
"
"
on_assembled
.
AsStdFunction
(
)
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
1
)
gen_
.
Ordered
(
{
1
}
"
B
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
2
)
gen_
.
Ordered
(
{
2
3
4
}
)
)
3
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
3
)
gen_
.
Ordered
(
{
5
6
}
)
)
2
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
4
)
gen_
.
Ordered
(
{
7
}
"
E
"
)
)
-
6
)
;
}
TEST_F
(
InterleavedReassemblyStreamsTest
AddMoreComplexOrderedMessageReturnsCorrectSize
)
{
NiceMock
<
MockFunction
<
ReassemblyStreams
:
:
OnAssembledMessage
>
>
on_assembled
;
InterleavedReassemblyStreams
streams
(
"
"
on_assembled
.
AsStdFunction
(
)
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
1
)
gen_
.
Ordered
(
{
1
}
"
B
"
)
)
1
)
;
Data
late
=
gen_
.
Ordered
(
{
2
3
4
}
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
3
)
gen_
.
Ordered
(
{
5
6
}
)
)
2
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
4
)
gen_
.
Ordered
(
{
7
}
"
E
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
5
)
gen_
.
Ordered
(
{
1
}
"
BE
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
6
)
gen_
.
Ordered
(
{
5
6
}
"
B
"
)
)
2
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
7
)
gen_
.
Ordered
(
{
7
}
"
E
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
2
)
std
:
:
move
(
late
)
)
-
8
)
;
}
TEST_F
(
InterleavedReassemblyStreamsTest
DeleteUnorderedMessageReturnsCorrectSize
)
{
NiceMock
<
MockFunction
<
ReassemblyStreams
:
:
OnAssembledMessage
>
>
on_assembled
;
InterleavedReassemblyStreams
streams
(
"
"
on_assembled
.
AsStdFunction
(
)
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
1
)
gen_
.
Unordered
(
{
1
}
"
B
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
2
)
gen_
.
Unordered
(
{
2
3
4
}
)
)
3
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
3
)
gen_
.
Unordered
(
{
5
6
}
)
)
2
)
;
IForwardTsnChunk
:
:
SkippedStream
skipped
[
]
=
{
IForwardTsnChunk
:
:
SkippedStream
(
IsUnordered
(
true
)
StreamID
(
1
)
MID
(
0
)
)
}
;
EXPECT_EQ
(
streams
.
HandleForwardTsn
(
tsn
(
3
)
skipped
)
6u
)
;
}
TEST_F
(
InterleavedReassemblyStreamsTest
DeleteSimpleOrderedMessageReturnsCorrectSize
)
{
NiceMock
<
MockFunction
<
ReassemblyStreams
:
:
OnAssembledMessage
>
>
on_assembled
;
InterleavedReassemblyStreams
streams
(
"
"
on_assembled
.
AsStdFunction
(
)
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
1
)
gen_
.
Ordered
(
{
1
}
"
B
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
2
)
gen_
.
Ordered
(
{
2
3
4
}
)
)
3
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
3
)
gen_
.
Ordered
(
{
5
6
}
)
)
2
)
;
IForwardTsnChunk
:
:
SkippedStream
skipped
[
]
=
{
IForwardTsnChunk
:
:
SkippedStream
(
IsUnordered
(
false
)
StreamID
(
1
)
MID
(
0
)
)
}
;
EXPECT_EQ
(
streams
.
HandleForwardTsn
(
tsn
(
3
)
skipped
)
6u
)
;
}
TEST_F
(
InterleavedReassemblyStreamsTest
DeleteManyOrderedMessagesReturnsCorrectSize
)
{
NiceMock
<
MockFunction
<
ReassemblyStreams
:
:
OnAssembledMessage
>
>
on_assembled
;
InterleavedReassemblyStreams
streams
(
"
"
on_assembled
.
AsStdFunction
(
)
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
1
)
gen_
.
Ordered
(
{
1
}
"
B
"
)
)
1
)
;
gen_
.
Ordered
(
{
2
3
4
}
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
3
)
gen_
.
Ordered
(
{
5
6
}
)
)
2
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
4
)
gen_
.
Ordered
(
{
7
}
"
E
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
5
)
gen_
.
Ordered
(
{
1
}
"
BE
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
6
)
gen_
.
Ordered
(
{
5
6
}
"
B
"
)
)
2
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
7
)
gen_
.
Ordered
(
{
7
}
"
E
"
)
)
1
)
;
IForwardTsnChunk
:
:
SkippedStream
skipped
[
]
=
{
IForwardTsnChunk
:
:
SkippedStream
(
IsUnordered
(
false
)
StreamID
(
1
)
MID
(
2
)
)
}
;
EXPECT_EQ
(
streams
.
HandleForwardTsn
(
tsn
(
8
)
skipped
)
8u
)
;
}
TEST_F
(
InterleavedReassemblyStreamsTest
DeleteOrderedMessageDelivesTwoReturnsCorrectSize
)
{
NiceMock
<
MockFunction
<
ReassemblyStreams
:
:
OnAssembledMessage
>
>
on_assembled
;
InterleavedReassemblyStreams
streams
(
"
"
on_assembled
.
AsStdFunction
(
)
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
1
)
gen_
.
Ordered
(
{
1
}
"
B
"
)
)
1
)
;
gen_
.
Ordered
(
{
2
3
4
}
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
3
)
gen_
.
Ordered
(
{
5
6
}
)
)
2
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
4
)
gen_
.
Ordered
(
{
7
}
"
E
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
5
)
gen_
.
Ordered
(
{
1
}
"
BE
"
)
)
1
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
6
)
gen_
.
Ordered
(
{
5
6
}
"
B
"
)
)
2
)
;
EXPECT_EQ
(
streams
.
Add
(
tsn
(
7
)
gen_
.
Ordered
(
{
7
}
"
E
"
)
)
1
)
;
IForwardTsnChunk
:
:
SkippedStream
skipped
[
]
=
{
IForwardTsnChunk
:
:
SkippedStream
(
IsUnordered
(
false
)
StreamID
(
1
)
MID
(
0
)
)
}
;
EXPECT_EQ
(
streams
.
HandleForwardTsn
(
tsn
(
4
)
skipped
)
8u
)
;
}
}
}
