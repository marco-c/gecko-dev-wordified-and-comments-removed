#
ifndef
NET_DCSCTP_SOCKET_CALLBACK_DEFERRER_H_
#
define
NET_DCSCTP_SOCKET_CALLBACK_DEFERRER_H_
#
include
<
cstdint
>
#
include
<
functional
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
ref_counted_base
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
net
/
dcsctp
/
public
/
dcsctp_message
.
h
"
#
include
"
net
/
dcsctp
/
public
/
dcsctp_socket
.
h
"
#
include
"
rtc_base
/
ref_counted_object
.
h
"
namespace
dcsctp
{
class
CallbackDeferrer
:
public
DcSctpSocketCallbacks
{
public
:
explicit
CallbackDeferrer
(
DcSctpSocketCallbacks
&
underlying
)
:
underlying_
(
underlying
)
{
}
void
TriggerDeferred
(
)
;
SendPacketStatus
SendPacketWithStatus
(
rtc
:
:
ArrayView
<
const
uint8_t
>
data
)
override
;
std
:
:
unique_ptr
<
Timeout
>
CreateTimeout
(
)
override
;
TimeMs
TimeMillis
(
)
override
;
uint32_t
GetRandomInt
(
uint32_t
low
uint32_t
high
)
override
;
void
OnMessageReceived
(
DcSctpMessage
message
)
override
;
void
OnError
(
ErrorKind
error
absl
:
:
string_view
message
)
override
;
void
OnAborted
(
ErrorKind
error
absl
:
:
string_view
message
)
override
;
void
OnConnected
(
)
override
;
void
OnClosed
(
)
override
;
void
OnConnectionRestarted
(
)
override
;
void
OnStreamsResetFailed
(
rtc
:
:
ArrayView
<
const
StreamID
>
outgoing_streams
absl
:
:
string_view
reason
)
override
;
void
OnStreamsResetPerformed
(
rtc
:
:
ArrayView
<
const
StreamID
>
outgoing_streams
)
override
;
void
OnIncomingStreamsReset
(
rtc
:
:
ArrayView
<
const
StreamID
>
incoming_streams
)
override
;
void
OnBufferedAmountLow
(
StreamID
stream_id
)
override
;
void
OnTotalBufferedAmountLow
(
)
override
;
private
:
DcSctpSocketCallbacks
&
underlying_
;
std
:
:
vector
<
std
:
:
function
<
void
(
DcSctpSocketCallbacks
&
cb
)
>
>
deferred_
;
}
;
}
#
endif
