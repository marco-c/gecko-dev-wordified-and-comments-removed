#
include
"
net
/
dcsctp
/
socket
/
callback_deferrer
.
h
"
#
include
"
api
/
make_ref_counted
.
h
"
namespace
dcsctp
{
void
CallbackDeferrer
:
:
Prepare
(
)
{
RTC_DCHECK
(
!
prepared_
)
;
prepared_
=
true
;
}
void
CallbackDeferrer
:
:
TriggerDeferred
(
)
{
RTC_DCHECK
(
prepared_
)
;
prepared_
=
false
;
if
(
deferred_
.
empty
(
)
)
{
return
;
}
std
:
:
vector
<
std
:
:
pair
<
Callback
CallbackData
>
>
deferred
;
deferred
.
reserve
(
8
)
;
deferred
.
swap
(
deferred_
)
;
for
(
auto
&
[
cb
data
]
:
deferred
)
{
cb
(
std
:
:
move
(
data
)
underlying_
)
;
}
}
SendPacketStatus
CallbackDeferrer
:
:
SendPacketWithStatus
(
rtc
:
:
ArrayView
<
const
uint8_t
>
data
)
{
return
underlying_
.
SendPacketWithStatus
(
data
)
;
}
std
:
:
unique_ptr
<
Timeout
>
CallbackDeferrer
:
:
CreateTimeout
(
webrtc
:
:
TaskQueueBase
:
:
DelayPrecision
precision
)
{
return
underlying_
.
CreateTimeout
(
precision
)
;
}
TimeMs
CallbackDeferrer
:
:
TimeMillis
(
)
{
RTC_DCHECK
(
false
)
;
return
underlying_
.
TimeMillis
(
)
;
}
uint32_t
CallbackDeferrer
:
:
GetRandomInt
(
uint32_t
low
uint32_t
high
)
{
return
underlying_
.
GetRandomInt
(
low
high
)
;
}
void
CallbackDeferrer
:
:
OnMessageReceived
(
DcSctpMessage
message
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
data
DcSctpSocketCallbacks
&
cb
)
{
return
cb
.
OnMessageReceived
(
absl
:
:
get
<
DcSctpMessage
>
(
std
:
:
move
(
data
)
)
)
;
}
std
:
:
move
(
message
)
)
;
}
void
CallbackDeferrer
:
:
OnError
(
ErrorKind
error
absl
:
:
string_view
message
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
data
DcSctpSocketCallbacks
&
cb
)
{
Error
error
=
absl
:
:
get
<
Error
>
(
std
:
:
move
(
data
)
)
;
return
cb
.
OnError
(
error
.
error
error
.
message
)
;
}
Error
{
error
std
:
:
string
(
message
)
}
)
;
}
void
CallbackDeferrer
:
:
OnAborted
(
ErrorKind
error
absl
:
:
string_view
message
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
data
DcSctpSocketCallbacks
&
cb
)
{
Error
error
=
absl
:
:
get
<
Error
>
(
std
:
:
move
(
data
)
)
;
return
cb
.
OnAborted
(
error
.
error
error
.
message
)
;
}
Error
{
error
std
:
:
string
(
message
)
}
)
;
}
void
CallbackDeferrer
:
:
OnConnected
(
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
DcSctpSocketCallbacks
&
cb
)
{
return
cb
.
OnConnected
(
)
;
}
absl
:
:
monostate
{
}
)
;
}
void
CallbackDeferrer
:
:
OnClosed
(
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
DcSctpSocketCallbacks
&
cb
)
{
return
cb
.
OnClosed
(
)
;
}
absl
:
:
monostate
{
}
)
;
}
void
CallbackDeferrer
:
:
OnConnectionRestarted
(
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
DcSctpSocketCallbacks
&
cb
)
{
return
cb
.
OnConnectionRestarted
(
)
;
}
absl
:
:
monostate
{
}
)
;
}
void
CallbackDeferrer
:
:
OnStreamsResetFailed
(
rtc
:
:
ArrayView
<
const
StreamID
>
outgoing_streams
absl
:
:
string_view
reason
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
data
DcSctpSocketCallbacks
&
cb
)
{
StreamReset
stream_reset
=
absl
:
:
get
<
StreamReset
>
(
std
:
:
move
(
data
)
)
;
return
cb
.
OnStreamsResetFailed
(
stream_reset
.
streams
stream_reset
.
message
)
;
}
StreamReset
{
{
outgoing_streams
.
begin
(
)
outgoing_streams
.
end
(
)
}
std
:
:
string
(
reason
)
}
)
;
}
void
CallbackDeferrer
:
:
OnStreamsResetPerformed
(
rtc
:
:
ArrayView
<
const
StreamID
>
outgoing_streams
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
data
DcSctpSocketCallbacks
&
cb
)
{
StreamReset
stream_reset
=
absl
:
:
get
<
StreamReset
>
(
std
:
:
move
(
data
)
)
;
return
cb
.
OnStreamsResetPerformed
(
stream_reset
.
streams
)
;
}
StreamReset
{
{
outgoing_streams
.
begin
(
)
outgoing_streams
.
end
(
)
}
}
)
;
}
void
CallbackDeferrer
:
:
OnIncomingStreamsReset
(
rtc
:
:
ArrayView
<
const
StreamID
>
incoming_streams
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
data
DcSctpSocketCallbacks
&
cb
)
{
StreamReset
stream_reset
=
absl
:
:
get
<
StreamReset
>
(
std
:
:
move
(
data
)
)
;
return
cb
.
OnIncomingStreamsReset
(
stream_reset
.
streams
)
;
}
StreamReset
{
{
incoming_streams
.
begin
(
)
incoming_streams
.
end
(
)
}
}
)
;
}
void
CallbackDeferrer
:
:
OnBufferedAmountLow
(
StreamID
stream_id
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
data
DcSctpSocketCallbacks
&
cb
)
{
return
cb
.
OnBufferedAmountLow
(
absl
:
:
get
<
StreamID
>
(
std
:
:
move
(
data
)
)
)
;
}
stream_id
)
;
}
void
CallbackDeferrer
:
:
OnTotalBufferedAmountLow
(
)
{
RTC_DCHECK
(
prepared_
)
;
deferred_
.
emplace_back
(
+
[
]
(
CallbackData
DcSctpSocketCallbacks
&
cb
)
{
return
cb
.
OnTotalBufferedAmountLow
(
)
;
}
absl
:
:
monostate
{
}
)
;
}
void
CallbackDeferrer
:
:
OnLifecycleMessageExpired
(
LifecycleId
lifecycle_id
bool
maybe_delivered
)
{
underlying_
.
OnLifecycleMessageExpired
(
lifecycle_id
maybe_delivered
)
;
}
void
CallbackDeferrer
:
:
OnLifecycleMessageFullySent
(
LifecycleId
lifecycle_id
)
{
underlying_
.
OnLifecycleMessageFullySent
(
lifecycle_id
)
;
}
void
CallbackDeferrer
:
:
OnLifecycleMessageDelivered
(
LifecycleId
lifecycle_id
)
{
underlying_
.
OnLifecycleMessageDelivered
(
lifecycle_id
)
;
}
void
CallbackDeferrer
:
:
OnLifecycleEnd
(
LifecycleId
lifecycle_id
)
{
underlying_
.
OnLifecycleEnd
(
lifecycle_id
)
;
}
}
