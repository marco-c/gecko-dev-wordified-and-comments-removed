#
include
"
net
/
dcsctp
/
timer
/
task_queue_timeout
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
namespace
dcsctp
{
TaskQueueTimeoutFactory
:
:
TaskQueueTimeout
:
:
TaskQueueTimeout
(
TaskQueueTimeoutFactory
&
parent
webrtc
:
:
TaskQueueBase
:
:
DelayPrecision
precision
)
:
parent_
(
parent
)
precision_
(
precision
)
pending_task_safety_flag_
(
webrtc
:
:
PendingTaskSafetyFlag
:
:
Create
(
)
)
{
}
TaskQueueTimeoutFactory
:
:
TaskQueueTimeout
:
:
~
TaskQueueTimeout
(
)
{
RTC_DCHECK_RUN_ON
(
&
parent_
.
thread_checker_
)
;
pending_task_safety_flag_
-
>
SetNotAlive
(
)
;
}
void
TaskQueueTimeoutFactory
:
:
TaskQueueTimeout
:
:
Start
(
DurationMs
duration_ms
TimeoutID
timeout_id
)
{
RTC_DCHECK_RUN_ON
(
&
parent_
.
thread_checker_
)
;
RTC_DCHECK
(
timeout_expiration_
=
=
TimeMs
:
:
InfiniteFuture
(
)
)
;
timeout_expiration_
=
parent_
.
get_time_
(
)
+
duration_ms
;
timeout_id_
=
timeout_id
;
if
(
timeout_expiration_
>
=
posted_task_expiration_
)
{
return
;
}
if
(
posted_task_expiration_
!
=
TimeMs
:
:
InfiniteFuture
(
)
)
{
RTC_DLOG
(
LS_VERBOSE
)
<
<
"
New
timeout
duration
is
less
than
scheduled
-
"
"
ghosting
old
delayed
task
.
"
;
pending_task_safety_flag_
-
>
SetNotAlive
(
)
;
pending_task_safety_flag_
=
webrtc
:
:
PendingTaskSafetyFlag
:
:
Create
(
)
;
}
posted_task_expiration_
=
timeout_expiration_
;
parent_
.
task_queue_
.
PostDelayedTaskWithPrecision
(
precision_
webrtc
:
:
SafeTask
(
pending_task_safety_flag_
[
timeout_id
this
]
(
)
{
RTC_DLOG
(
LS_VERBOSE
)
<
<
"
Timout
expired
:
"
<
<
timeout_id
.
value
(
)
;
RTC_DCHECK_RUN_ON
(
&
parent_
.
thread_checker_
)
;
RTC_DCHECK
(
posted_task_expiration_
!
=
TimeMs
:
:
InfiniteFuture
(
)
)
;
posted_task_expiration_
=
TimeMs
:
:
InfiniteFuture
(
)
;
if
(
timeout_expiration_
=
=
TimeMs
:
:
InfiniteFuture
(
)
)
{
}
else
{
DurationMs
remaining
=
timeout_expiration_
-
parent_
.
get_time_
(
)
;
timeout_expiration_
=
TimeMs
:
:
InfiniteFuture
(
)
;
if
(
*
remaining
>
0
)
{
Start
(
remaining
timeout_id_
)
;
}
else
{
RTC_DLOG
(
LS_VERBOSE
)
<
<
"
Timout
triggered
:
"
<
<
timeout_id
.
value
(
)
;
parent_
.
on_expired_
(
timeout_id_
)
;
}
}
}
)
webrtc
:
:
TimeDelta
:
:
Millis
(
duration_ms
.
value
(
)
)
)
;
}
void
TaskQueueTimeoutFactory
:
:
TaskQueueTimeout
:
:
Stop
(
)
{
RTC_DCHECK_RUN_ON
(
&
parent_
.
thread_checker_
)
;
timeout_expiration_
=
TimeMs
:
:
InfiniteFuture
(
)
;
}
}
