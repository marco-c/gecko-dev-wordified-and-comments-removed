#
ifndef
NET_DCSCTP_TIMER_FAKE_TIMEOUT_H_
#
define
NET_DCSCTP_TIMER_FAKE_TIMEOUT_H_
#
include
<
cstdint
>
#
include
<
functional
>
#
include
<
limits
>
#
include
<
memory
>
#
include
<
unordered_set
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
net
/
dcsctp
/
public
/
timeout
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
dcsctp
{
class
FakeTimeout
:
public
Timeout
{
public
:
explicit
FakeTimeout
(
std
:
:
function
<
TimeMs
(
)
>
get_time
std
:
:
function
<
void
(
FakeTimeout
*
)
>
on_delete
)
:
get_time_
(
std
:
:
move
(
get_time
)
)
on_delete_
(
std
:
:
move
(
on_delete
)
)
{
}
~
FakeTimeout
(
)
override
{
on_delete_
(
this
)
;
}
void
Start
(
DurationMs
duration_ms
TimeoutID
timeout_id
)
override
{
RTC_DCHECK
(
expiry_
=
=
TimeMs
:
:
InfiniteFuture
(
)
)
;
timeout_id_
=
timeout_id
;
expiry_
=
get_time_
(
)
+
duration_ms
;
}
void
Stop
(
)
override
{
RTC_DCHECK
(
expiry_
!
=
TimeMs
:
:
InfiniteFuture
(
)
)
;
expiry_
=
TimeMs
:
:
InfiniteFuture
(
)
;
}
bool
EvaluateHasExpired
(
TimeMs
now
)
{
if
(
now
>
=
expiry_
)
{
expiry_
=
TimeMs
:
:
InfiniteFuture
(
)
;
return
true
;
}
return
false
;
}
TimeoutID
timeout_id
(
)
const
{
return
timeout_id_
;
}
private
:
const
std
:
:
function
<
TimeMs
(
)
>
get_time_
;
const
std
:
:
function
<
void
(
FakeTimeout
*
)
>
on_delete_
;
TimeoutID
timeout_id_
=
TimeoutID
(
0
)
;
TimeMs
expiry_
=
TimeMs
:
:
InfiniteFuture
(
)
;
}
;
class
FakeTimeoutManager
{
public
:
explicit
FakeTimeoutManager
(
std
:
:
function
<
TimeMs
(
)
>
get_time
)
:
get_time_
(
std
:
:
move
(
get_time
)
)
{
}
std
:
:
unique_ptr
<
Timeout
>
CreateTimeout
(
)
{
auto
timer
=
std
:
:
make_unique
<
FakeTimeout
>
(
get_time_
[
this
]
(
FakeTimeout
*
timer
)
{
timers_
.
erase
(
timer
)
;
}
)
;
timers_
.
insert
(
timer
.
get
(
)
)
;
return
timer
;
}
absl
:
:
optional
<
TimeoutID
>
GetNextExpiredTimeout
(
)
{
TimeMs
now
=
get_time_
(
)
;
std
:
:
vector
<
TimeoutID
>
expired_timers
;
for
(
auto
&
timer
:
timers_
)
{
if
(
timer
-
>
EvaluateHasExpired
(
now
)
)
{
return
timer
-
>
timeout_id
(
)
;
}
}
return
absl
:
:
nullopt
;
}
private
:
const
std
:
:
function
<
TimeMs
(
)
>
get_time_
;
std
:
:
unordered_set
<
FakeTimeout
*
>
timers_
;
}
;
}
#
endif
