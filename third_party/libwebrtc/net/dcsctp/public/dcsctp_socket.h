#
ifndef
NET_DCSCTP_PUBLIC_DCSCTP_SOCKET_H_
#
define
NET_DCSCTP_PUBLIC_DCSCTP_SOCKET_H_
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
net
/
dcsctp
/
public
/
dcsctp_message
.
h
"
#
include
"
net
/
dcsctp
/
public
/
packet_observer
.
h
"
#
include
"
net
/
dcsctp
/
public
/
timeout
.
h
"
#
include
"
net
/
dcsctp
/
public
/
types
.
h
"
namespace
dcsctp
{
struct
SendOptions
{
IsUnordered
unordered
=
IsUnordered
(
false
)
;
absl
:
:
optional
<
DurationMs
>
lifetime
=
absl
:
:
nullopt
;
absl
:
:
optional
<
size_t
>
max_retransmissions
=
absl
:
:
nullopt
;
}
;
enum
class
ErrorKind
{
kNoError
kTooManyRetries
kNotConnected
kParseFailed
kWrongSequence
kPeerReported
kProtocolViolation
kResourceExhaustion
}
;
inline
constexpr
absl
:
:
string_view
ToString
(
ErrorKind
error
)
{
switch
(
error
)
{
case
ErrorKind
:
:
kNoError
:
return
"
NO_ERROR
"
;
case
ErrorKind
:
:
kTooManyRetries
:
return
"
TOO_MANY_RETRIES
"
;
case
ErrorKind
:
:
kNotConnected
:
return
"
NOT_CONNECTED
"
;
case
ErrorKind
:
:
kParseFailed
:
return
"
PARSE_FAILED
"
;
case
ErrorKind
:
:
kWrongSequence
:
return
"
WRONG_SEQUENCE
"
;
case
ErrorKind
:
:
kPeerReported
:
return
"
PEER_REPORTED
"
;
case
ErrorKind
:
:
kProtocolViolation
:
return
"
PROTOCOL_VIOLATION
"
;
case
ErrorKind
:
:
kResourceExhaustion
:
return
"
RESOURCE_EXHAUSTION
"
;
}
}
enum
class
StreamResetSupport
{
kUnknown
kSupported
kNotSupported
}
;
class
DcSctpSocketCallbacks
{
public
:
virtual
~
DcSctpSocketCallbacks
(
)
=
default
;
virtual
void
SendPacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
data
)
=
0
;
virtual
std
:
:
unique_ptr
<
Timeout
>
CreateTimeout
(
)
=
0
;
virtual
TimeMs
TimeMillis
(
)
=
0
;
virtual
uint32_t
GetRandomInt
(
uint32_t
low
uint32_t
high
)
=
0
;
virtual
void
NotifyOutgoingMessageBufferEmpty
(
)
=
0
;
virtual
void
OnMessageReceived
(
DcSctpMessage
message
)
=
0
;
virtual
void
OnError
(
ErrorKind
error
absl
:
:
string_view
message
)
=
0
;
virtual
void
OnAborted
(
ErrorKind
error
absl
:
:
string_view
message
)
=
0
;
virtual
void
OnConnected
(
)
=
0
;
virtual
void
OnClosed
(
)
=
0
;
virtual
void
OnConnectionRestarted
(
)
=
0
;
virtual
void
OnStreamsResetFailed
(
rtc
:
:
ArrayView
<
const
StreamID
>
outgoing_streams
absl
:
:
string_view
reason
)
=
0
;
virtual
void
OnStreamsResetPerformed
(
rtc
:
:
ArrayView
<
const
StreamID
>
outgoing_streams
)
=
0
;
virtual
void
OnIncomingStreamsReset
(
rtc
:
:
ArrayView
<
const
StreamID
>
incoming_streams
)
=
0
;
virtual
void
OnSentMessageExpired
(
StreamID
stream_id
PPID
ppid
bool
unsent
)
=
0
;
}
;
class
DcSctpSocketInterface
{
public
:
virtual
~
DcSctpSocketInterface
(
)
=
default
;
virtual
void
ReceivePacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
data
)
=
0
;
virtual
void
HandleTimeout
(
TimeoutID
timeout_id
)
=
0
;
virtual
void
Connect
(
)
=
0
;
virtual
void
Shutdown
(
)
=
0
;
virtual
void
Close
(
)
=
0
;
virtual
void
ResetStreams
(
rtc
:
:
ArrayView
<
const
StreamID
>
outgoing_streams
)
=
0
;
virtual
StreamResetSupport
SupportsStreamReset
(
)
const
=
0
;
void
Send
(
DcSctpMessage
message
const
SendOptions
&
send_options
=
{
}
)
{
SendMessage
(
std
:
:
move
(
message
)
send_options
)
;
}
private
:
virtual
void
SendMessage
(
DcSctpMessage
message
const
SendOptions
&
send_options
)
=
0
;
}
;
}
#
endif
