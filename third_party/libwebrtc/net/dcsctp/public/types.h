#
ifndef
NET_DCSCTP_PUBLIC_TYPES_H_
#
define
NET_DCSCTP_PUBLIC_TYPES_H_
#
include
<
cstdint
>
#
include
<
limits
>
#
include
"
rtc_base
/
strong_alias
.
h
"
namespace
dcsctp
{
using
StreamID
=
webrtc
:
:
StrongAlias
<
class
StreamIDTag
uint16_t
>
;
using
PPID
=
webrtc
:
:
StrongAlias
<
class
PPIDTag
uint32_t
>
;
using
TimeoutID
=
webrtc
:
:
StrongAlias
<
class
TimeoutTag
uint64_t
>
;
using
IsUnordered
=
webrtc
:
:
StrongAlias
<
class
IsUnorderedTag
bool
>
;
class
DurationMs
:
public
webrtc
:
:
StrongAlias
<
class
DurationMsTag
int32_t
>
{
public
:
constexpr
explicit
DurationMs
(
const
UnderlyingType
&
v
)
:
webrtc
:
:
StrongAlias
<
class
DurationMsTag
int32_t
>
(
v
)
{
}
constexpr
DurationMs
&
operator
+
=
(
DurationMs
d
)
{
value_
+
=
d
.
value_
;
return
*
this
;
}
constexpr
DurationMs
&
operator
-
=
(
DurationMs
d
)
{
value_
-
=
d
.
value_
;
return
*
this
;
}
template
<
typename
T
>
constexpr
DurationMs
&
operator
*
=
(
T
factor
)
{
value_
*
=
factor
;
return
*
this
;
}
}
;
constexpr
inline
DurationMs
operator
+
(
DurationMs
lhs
DurationMs
rhs
)
{
return
lhs
+
=
rhs
;
}
constexpr
inline
DurationMs
operator
-
(
DurationMs
lhs
DurationMs
rhs
)
{
return
lhs
-
=
rhs
;
}
template
<
typename
T
>
constexpr
inline
DurationMs
operator
*
(
DurationMs
lhs
T
rhs
)
{
return
lhs
*
=
rhs
;
}
template
<
typename
T
>
constexpr
inline
DurationMs
operator
*
(
T
lhs
DurationMs
rhs
)
{
return
rhs
*
=
lhs
;
}
constexpr
inline
int32_t
operator
/
(
DurationMs
lhs
DurationMs
rhs
)
{
return
lhs
.
value
(
)
/
rhs
.
value
(
)
;
}
class
TimeMs
:
public
webrtc
:
:
StrongAlias
<
class
TimeMsTag
int64_t
>
{
public
:
constexpr
explicit
TimeMs
(
const
UnderlyingType
&
v
)
:
webrtc
:
:
StrongAlias
<
class
TimeMsTag
int64_t
>
(
v
)
{
}
constexpr
TimeMs
&
operator
+
=
(
DurationMs
d
)
{
value_
+
=
*
d
;
return
*
this
;
}
constexpr
TimeMs
&
operator
-
=
(
DurationMs
d
)
{
value_
-
=
*
d
;
return
*
this
;
}
static
constexpr
TimeMs
InfiniteFuture
(
)
{
return
TimeMs
(
std
:
:
numeric_limits
<
int64_t
>
:
:
max
(
)
)
;
}
}
;
constexpr
inline
TimeMs
operator
+
(
TimeMs
lhs
DurationMs
rhs
)
{
return
lhs
+
=
rhs
;
}
constexpr
inline
TimeMs
operator
+
(
DurationMs
lhs
TimeMs
rhs
)
{
return
rhs
+
=
lhs
;
}
constexpr
inline
TimeMs
operator
-
(
TimeMs
lhs
DurationMs
rhs
)
{
return
lhs
-
=
rhs
;
}
constexpr
inline
DurationMs
operator
-
(
TimeMs
lhs
TimeMs
rhs
)
{
return
DurationMs
(
*
lhs
-
*
rhs
)
;
}
class
MaxRetransmits
:
public
webrtc
:
:
StrongAlias
<
class
MaxRetransmitsTag
uint16_t
>
{
public
:
constexpr
explicit
MaxRetransmits
(
const
UnderlyingType
&
v
)
:
webrtc
:
:
StrongAlias
<
class
MaxRetransmitsTag
uint16_t
>
(
v
)
{
}
static
constexpr
MaxRetransmits
NoLimit
(
)
{
return
MaxRetransmits
(
std
:
:
numeric_limits
<
uint16_t
>
:
:
max
(
)
)
;
}
}
;
}
#
endif
