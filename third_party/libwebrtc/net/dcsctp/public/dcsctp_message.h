#
ifndef
NET_DCSCTP_PUBLIC_DCSCTP_MESSAGE_H_
#
define
NET_DCSCTP_PUBLIC_DCSCTP_MESSAGE_H_
#
include
<
cstdint
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
net
/
dcsctp
/
public
/
types
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
namespace
dcsctp
{
class
DcSctpMessage
{
public
:
DcSctpMessage
(
StreamID
stream_id
PPID
ppid
std
:
:
vector
<
uint8_t
>
payload
)
:
stream_id_
(
stream_id
)
ppid_
(
ppid
)
payload_
(
payload
)
{
}
explicit
DcSctpMessage
(
StreamID
stream_id
PPID
ppid
rtc
:
:
CopyOnWriteBuffer
payload
bool
)
:
stream_id_
(
stream_id
)
ppid_
(
ppid
)
payload_
(
std
:
:
move
(
payload
)
)
{
}
DcSctpMessage
(
DcSctpMessage
&
&
other
)
=
default
;
DcSctpMessage
&
operator
=
(
DcSctpMessage
&
&
other
)
=
default
;
DcSctpMessage
(
const
DcSctpMessage
&
)
=
delete
;
DcSctpMessage
&
operator
=
(
const
DcSctpMessage
&
)
=
delete
;
StreamID
stream_id
(
)
const
{
return
stream_id_
;
}
PPID
ppid
(
)
const
{
return
ppid_
;
}
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
(
)
const
{
return
payload_
;
}
const
rtc
:
:
CopyOnWriteBuffer
&
buffer_payload
(
)
const
{
return
payload_
;
}
ABSL_DEPRECATED
(
"
Use
ReleaseBufferPayload
instead
"
)
std
:
:
vector
<
uint8_t
>
ReleasePayload
(
)
&
&
{
return
std
:
:
vector
<
uint8_t
>
(
payload_
.
cdata
(
)
payload_
.
cdata
(
)
+
payload_
.
size
(
)
)
;
}
rtc
:
:
CopyOnWriteBuffer
ReleaseBufferPayload
(
)
&
&
{
return
std
:
:
move
(
payload_
)
;
}
private
:
StreamID
stream_id_
;
PPID
ppid_
;
rtc
:
:
CopyOnWriteBuffer
payload_
;
}
;
}
#
endif
