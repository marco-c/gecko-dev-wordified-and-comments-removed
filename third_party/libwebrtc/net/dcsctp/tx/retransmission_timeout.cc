#
include
"
net
/
dcsctp
/
tx
/
retransmission_timeout
.
h
"
#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
net
/
dcsctp
/
public
/
dcsctp_options
.
h
"
namespace
dcsctp
{
RetransmissionTimeout
:
:
RetransmissionTimeout
(
const
DcSctpOptions
&
options
)
:
min_rto_
(
options
.
rto_min
.
ToTimeDelta
(
)
)
max_rto_
(
options
.
rto_max
.
ToTimeDelta
(
)
)
max_rtt_
(
options
.
rtt_max
.
ToTimeDelta
(
)
)
min_rtt_variance_
(
*
options
.
min_rtt_variance
)
scaled_srtt_
(
*
options
.
rto_initial
<
<
kRttShift
)
rto_
(
*
options
.
rto_initial
)
{
}
void
RetransmissionTimeout
:
:
ObserveRTT
(
webrtc
:
:
TimeDelta
measured_rtt
)
{
if
(
measured_rtt
<
webrtc
:
:
TimeDelta
:
:
Zero
(
)
|
|
measured_rtt
>
max_rtt_
)
{
return
;
}
const
int64_t
rtt
=
measured_rtt
.
ms
(
)
;
if
(
first_measurement_
)
{
scaled_srtt_
=
rtt
<
<
kRttShift
;
scaled_rtt_var_
=
(
rtt
/
2
)
<
<
kRttVarShift
;
first_measurement_
=
false
;
}
else
{
int64_t
rtt_diff
=
rtt
-
(
scaled_srtt_
>
>
kRttShift
)
;
scaled_srtt_
+
=
rtt_diff
;
if
(
rtt_diff
<
0
)
{
rtt_diff
=
-
rtt_diff
;
}
rtt_diff
-
=
(
scaled_rtt_var_
>
>
kRttVarShift
)
;
scaled_rtt_var_
+
=
rtt_diff
;
}
if
(
scaled_rtt_var_
<
min_rtt_variance_
)
{
scaled_rtt_var_
=
min_rtt_variance_
;
}
rto_
=
(
scaled_srtt_
>
>
kRttShift
)
+
scaled_rtt_var_
;
rto_
=
std
:
:
min
(
std
:
:
max
(
rto_
min_rto_
.
ms
(
)
)
max_rto_
.
ms
(
)
)
;
}
}
