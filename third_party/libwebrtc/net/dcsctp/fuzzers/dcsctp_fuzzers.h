#
ifndef
NET_DCSCTP_FUZZERS_DCSCTP_FUZZERS_H_
#
define
NET_DCSCTP_FUZZERS_DCSCTP_FUZZERS_H_
#
include
<
deque
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
net
/
dcsctp
/
public
/
dcsctp_socket
.
h
"
namespace
dcsctp
{
namespace
dcsctp_fuzzers
{
class
FuzzerTimeout
:
public
Timeout
{
public
:
explicit
FuzzerTimeout
(
std
:
:
set
<
TimeoutID
>
&
active_timeouts
)
:
active_timeouts_
(
active_timeouts
)
{
}
void
Start
(
DurationMs
TimeoutID
timeout_id
)
override
{
if
(
timeout_id_
.
has_value
(
)
)
{
RTC_DCHECK
(
active_timeouts_
.
find
(
*
timeout_id_
)
=
=
active_timeouts_
.
end
(
)
)
;
}
timeout_id_
=
timeout_id
;
RTC_DCHECK
(
active_timeouts_
.
insert
(
timeout_id
)
.
second
)
;
}
void
Stop
(
)
override
{
RTC_DCHECK
(
timeout_id_
.
has_value
(
)
)
;
RTC_DCHECK
(
active_timeouts_
.
erase
(
*
timeout_id_
)
=
=
1
)
;
timeout_id_
=
std
:
:
nullopt
;
}
std
:
:
set
<
TimeoutID
>
&
active_timeouts_
;
std
:
:
optional
<
TimeoutID
>
timeout_id_
;
}
;
class
FuzzerCallbacks
:
public
DcSctpSocketCallbacks
{
public
:
static
constexpr
int
kRandomValue
=
42
;
void
SendPacket
(
webrtc
:
:
ArrayView
<
const
uint8_t
>
data
)
override
{
sent_packets_
.
emplace_back
(
std
:
:
vector
<
uint8_t
>
(
data
.
begin
(
)
data
.
end
(
)
)
)
;
}
std
:
:
unique_ptr
<
Timeout
>
CreateTimeout
(
webrtc
:
:
TaskQueueBase
:
:
DelayPrecision
)
override
{
return
std
:
:
make_unique
<
FuzzerTimeout
>
(
active_timeouts_
)
;
}
webrtc
:
:
Timestamp
Now
(
)
override
{
return
webrtc
:
:
Timestamp
:
:
Millis
(
42
)
;
}
uint32_t
GetRandomInt
(
uint32_t
uint32_t
)
override
{
return
kRandomValue
;
}
void
OnMessageReceived
(
DcSctpMessage
)
override
{
}
void
OnError
(
ErrorKind
absl
:
:
string_view
)
override
{
}
void
OnAborted
(
ErrorKind
absl
:
:
string_view
)
override
{
}
void
OnConnected
(
)
override
{
}
void
OnClosed
(
)
override
{
}
void
OnConnectionRestarted
(
)
override
{
}
void
OnStreamsResetFailed
(
webrtc
:
:
ArrayView
<
const
StreamID
>
absl
:
:
string_view
)
override
{
}
void
OnStreamsResetPerformed
(
webrtc
:
:
ArrayView
<
const
StreamID
>
outgoing_streams
)
override
{
}
void
OnIncomingStreamsReset
(
webrtc
:
:
ArrayView
<
const
StreamID
>
incoming_streams
)
override
{
}
std
:
:
vector
<
uint8_t
>
ConsumeSentPacket
(
)
{
if
(
sent_packets_
.
empty
(
)
)
{
return
{
}
;
}
std
:
:
vector
<
uint8_t
>
ret
=
sent_packets_
.
front
(
)
;
sent_packets_
.
pop_front
(
)
;
return
ret
;
}
std
:
:
optional
<
TimeoutID
>
ExpireTimeout
(
size_t
index
)
{
if
(
index
<
active_timeouts_
.
size
(
)
)
{
auto
it
=
active_timeouts_
.
begin
(
)
;
std
:
:
advance
(
it
index
)
;
TimeoutID
timeout_id
=
*
it
;
active_timeouts_
.
erase
(
it
)
;
return
timeout_id
;
}
return
std
:
:
nullopt
;
}
private
:
std
:
:
set
<
TimeoutID
>
active_timeouts_
;
std
:
:
deque
<
std
:
:
vector
<
uint8_t
>
>
sent_packets_
;
}
;
void
FuzzSocket
(
DcSctpSocketInterface
&
socket
FuzzerCallbacks
&
cb
webrtc
:
:
ArrayView
<
const
uint8_t
>
data
)
;
}
}
#
endif
