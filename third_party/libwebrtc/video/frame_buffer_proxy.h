#
ifndef
VIDEO_FRAME_BUFFER_PROXY_H_
#
define
VIDEO_FRAME_BUFFER_PROXY_H_
#
include
<
memory
>
#
include
"
api
/
metronome
/
metronome
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
video
/
encoded_frame
.
h
"
#
include
"
api
/
webrtc_key_value_config
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_coding_defines
.
h
"
#
include
"
modules
/
video_coding
/
timing
.
h
"
#
include
"
rtc_base
/
task_queue
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
video
/
decode_synchronizer
.
h
"
namespace
webrtc
{
class
FrameSchedulingReceiver
{
public
:
virtual
~
FrameSchedulingReceiver
(
)
=
default
;
virtual
void
OnEncodedFrame
(
std
:
:
unique_ptr
<
EncodedFrame
>
frame
)
=
0
;
virtual
void
OnDecodableFrameTimeout
(
TimeDelta
wait_time
)
=
0
;
}
;
class
FrameBufferProxy
{
public
:
static
std
:
:
unique_ptr
<
FrameBufferProxy
>
CreateFromFieldTrial
(
Clock
*
clock
TaskQueueBase
*
worker_queue
VCMTiming
*
timing
VCMReceiveStatisticsCallback
*
stats_proxy
rtc
:
:
TaskQueue
*
decode_queue
FrameSchedulingReceiver
*
receiver
TimeDelta
max_wait_for_keyframe
TimeDelta
max_wait_for_frame
DecodeSynchronizer
*
decode_sync
const
WebRtcKeyValueConfig
&
field_trials
)
;
virtual
~
FrameBufferProxy
(
)
=
default
;
virtual
void
StopOnWorker
(
)
=
0
;
virtual
void
SetProtectionMode
(
VCMVideoProtection
protection_mode
)
=
0
;
virtual
void
Clear
(
)
=
0
;
virtual
absl
:
:
optional
<
int64_t
>
InsertFrame
(
std
:
:
unique_ptr
<
EncodedFrame
>
frame
)
=
0
;
virtual
void
UpdateRtt
(
int64_t
max_rtt_ms
)
=
0
;
virtual
int
Size
(
)
=
0
;
virtual
void
StartNextDecode
(
bool
keyframe_required
)
=
0
;
#
if
defined
(
WEBRTC_MOZILLA_BUILD
)
virtual
void
Start
(
)
=
0
;
#
endif
}
;
}
#
endif
