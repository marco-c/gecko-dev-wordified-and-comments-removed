#
include
"
video
/
frame_cadence_adapter
.
h
"
#
include
<
memory
>
#
include
<
utility
>
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
race_checker
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
task_utils
/
pending_task_safety_flag
.
h
"
#
include
"
rtc_base
/
task_utils
/
to_queued_task
.
h
"
#
include
"
system_wrappers
/
include
/
field_trial
.
h
"
#
include
"
system_wrappers
/
include
/
metrics
.
h
"
namespace
webrtc
{
namespace
{
class
FrameCadenceAdapterImpl
:
public
FrameCadenceAdapterInterface
{
public
:
explicit
FrameCadenceAdapterImpl
(
TaskQueueBase
*
worker_queue
)
;
void
Initialize
(
Callback
*
callback
)
override
;
void
SetZeroHertzModeEnabled
(
bool
enabled
)
override
;
void
OnFrame
(
const
VideoFrame
&
frame
)
override
;
void
OnDiscardedFrame
(
)
override
{
callback_
-
>
OnDiscardedFrame
(
)
;
}
void
OnConstraintsChanged
(
const
VideoTrackSourceConstraints
&
constraints
)
override
;
private
:
void
OnFrameOnMainQueue
(
const
VideoFrame
&
frame
)
RTC_RUN_ON
(
worker_queue_
)
;
void
MaybeReportFrameRateConstraintUmas
(
)
RTC_RUN_ON
(
&
worker_queue_
)
;
TaskQueueBase
*
const
worker_queue_
;
const
bool
zero_hertz_screenshare_enabled_
;
Callback
*
callback_
=
nullptr
;
absl
:
:
optional
<
VideoTrackSourceConstraints
>
source_constraints_
RTC_GUARDED_BY
(
worker_queue_
)
;
bool
zero_hertz_and_uma_reporting_enabled_
RTC_GUARDED_BY
(
worker_queue_
)
=
false
;
rtc
:
:
RaceChecker
incoming_frame_race_checker_
;
bool
has_reported_screenshare_frame_rate_umas_
RTC_GUARDED_BY
(
worker_queue_
)
=
false
;
ScopedTaskSafety
safety_
;
}
;
FrameCadenceAdapterImpl
:
:
FrameCadenceAdapterImpl
(
TaskQueueBase
*
worker_queue
)
:
worker_queue_
(
worker_queue
)
zero_hertz_screenshare_enabled_
(
field_trial
:
:
IsEnabled
(
"
WebRTC
-
ZeroHertzScreenshare
"
)
)
{
RTC_DCHECK_RUN_ON
(
worker_queue_
)
;
}
void
FrameCadenceAdapterImpl
:
:
Initialize
(
Callback
*
callback
)
{
callback_
=
callback
;
}
void
FrameCadenceAdapterImpl
:
:
SetZeroHertzModeEnabled
(
bool
enabled
)
{
RTC_DCHECK_RUN_ON
(
worker_queue_
)
;
if
(
enabled
&
&
!
zero_hertz_and_uma_reporting_enabled_
)
has_reported_screenshare_frame_rate_umas_
=
false
;
zero_hertz_and_uma_reporting_enabled_
=
enabled
;
}
void
FrameCadenceAdapterImpl
:
:
OnFrame
(
const
VideoFrame
&
frame
)
{
RTC_DCHECK_RUNS_SERIALIZED
(
&
incoming_frame_race_checker_
)
;
worker_queue_
-
>
PostTask
(
ToQueuedTask
(
safety_
[
this
frame
]
{
RTC_DCHECK_RUN_ON
(
worker_queue_
)
;
OnFrameOnMainQueue
(
std
:
:
move
(
frame
)
)
;
MaybeReportFrameRateConstraintUmas
(
)
;
}
)
)
;
}
void
FrameCadenceAdapterImpl
:
:
OnConstraintsChanged
(
const
VideoTrackSourceConstraints
&
constraints
)
{
RTC_LOG
(
LS_INFO
)
<
<
__func__
<
<
"
min_fps
"
<
<
constraints
.
min_fps
.
value_or
(
-
1
)
<
<
"
max_fps
"
<
<
constraints
.
max_fps
.
value_or
(
-
1
)
;
worker_queue_
-
>
PostTask
(
ToQueuedTask
(
safety_
[
this
constraints
]
{
RTC_DCHECK_RUN_ON
(
worker_queue_
)
;
source_constraints_
=
constraints
;
}
)
)
;
}
void
FrameCadenceAdapterImpl
:
:
OnFrameOnMainQueue
(
const
VideoFrame
&
frame
)
{
callback_
-
>
OnFrame
(
frame
)
;
}
void
FrameCadenceAdapterImpl
:
:
MaybeReportFrameRateConstraintUmas
(
)
{
if
(
has_reported_screenshare_frame_rate_umas_
)
return
;
has_reported_screenshare_frame_rate_umas_
=
true
;
if
(
!
zero_hertz_and_uma_reporting_enabled_
)
return
;
RTC_HISTOGRAM_BOOLEAN
(
"
WebRTC
.
Screenshare
.
FrameRateConstraints
.
Exists
"
source_constraints_
.
has_value
(
)
)
;
if
(
!
source_constraints_
.
has_value
(
)
)
return
;
RTC_HISTOGRAM_BOOLEAN
(
"
WebRTC
.
Screenshare
.
FrameRateConstraints
.
Min
.
Exists
"
source_constraints_
-
>
min_fps
.
has_value
(
)
)
;
if
(
source_constraints_
-
>
min_fps
.
has_value
(
)
)
{
RTC_HISTOGRAM_COUNTS_100
(
"
WebRTC
.
Screenshare
.
FrameRateConstraints
.
Min
.
Value
"
source_constraints_
-
>
min_fps
.
value
(
)
)
;
}
RTC_HISTOGRAM_BOOLEAN
(
"
WebRTC
.
Screenshare
.
FrameRateConstraints
.
Max
.
Exists
"
source_constraints_
-
>
max_fps
.
has_value
(
)
)
;
if
(
source_constraints_
-
>
max_fps
.
has_value
(
)
)
{
RTC_HISTOGRAM_COUNTS_100
(
"
WebRTC
.
Screenshare
.
FrameRateConstraints
.
Max
.
Value
"
source_constraints_
-
>
max_fps
.
value
(
)
)
;
}
if
(
!
source_constraints_
-
>
min_fps
.
has_value
(
)
)
{
if
(
source_constraints_
-
>
max_fps
.
has_value
(
)
)
{
RTC_HISTOGRAM_COUNTS_100
(
"
WebRTC
.
Screenshare
.
FrameRateConstraints
.
MinUnset
.
Max
"
source_constraints_
-
>
max_fps
.
value
(
)
)
;
}
}
else
if
(
source_constraints_
-
>
max_fps
.
has_value
(
)
)
{
if
(
source_constraints_
-
>
min_fps
.
value
(
)
<
source_constraints_
-
>
max_fps
.
value
(
)
)
{
RTC_HISTOGRAM_COUNTS_100
(
"
WebRTC
.
Screenshare
.
FrameRateConstraints
.
MinLessThanMax
.
Min
"
source_constraints_
-
>
min_fps
.
value
(
)
)
;
RTC_HISTOGRAM_COUNTS_100
(
"
WebRTC
.
Screenshare
.
FrameRateConstraints
.
MinLessThanMax
.
Max
"
source_constraints_
-
>
max_fps
.
value
(
)
)
;
}
constexpr
int
kMaxBucketCount
=
60
*
60
+
60
-
1
;
RTC_HISTOGRAM_ENUMERATION_SPARSE
(
"
WebRTC
.
Screenshare
.
FrameRateConstraints
.
60MinPlusMaxMinusOne
"
source_constraints_
-
>
min_fps
.
value
(
)
*
60
+
source_constraints_
-
>
max_fps
.
value
(
)
-
1
kMaxBucketCount
)
;
}
}
}
std
:
:
unique_ptr
<
FrameCadenceAdapterInterface
>
FrameCadenceAdapterInterface
:
:
Create
(
TaskQueueBase
*
worker_queue
)
{
return
std
:
:
make_unique
<
FrameCadenceAdapterImpl
>
(
worker_queue
)
;
}
}
