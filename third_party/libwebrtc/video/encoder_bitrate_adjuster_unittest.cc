#
include
"
video
/
encoder_bitrate_adjuster
.
h
"
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_conversions
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
scoped_key_value_config
.
h
"
#
include
"
test
/
time_controller
/
simulated_time_controller
.
h
"
namespace
webrtc
{
namespace
test
{
using
:
:
testing
:
:
Test
;
using
:
:
testing
:
:
Values
;
using
:
:
testing
:
:
WithParamInterface
;
class
EncoderBitrateAdjusterTest
:
public
Test
public
WithParamInterface
<
std
:
:
string
>
{
public
:
static
constexpr
int64_t
kWindowSizeMs
=
3000
;
static
constexpr
int
kDefaultBitrateBps
=
300000
;
static
constexpr
int
kDefaultFrameRateFps
=
30
;
static
constexpr
int
kSequenceLength
=
4
;
static_assert
(
kSequenceLength
%
2
=
=
0
"
Sequence
length
must
be
even
.
"
)
;
EncoderBitrateAdjusterTest
(
)
:
time_controller_
(
Timestamp
:
:
Millis
(
123
)
)
target_bitrate_
(
DataRate
:
:
BitsPerSec
(
kDefaultBitrateBps
)
)
target_framerate_fps_
(
kDefaultFrameRateFps
)
tl_pattern_idx_
{
}
sequence_idx_
{
}
scoped_field_trial_
(
GetParam
(
)
)
{
}
protected
:
void
SetUpAdjusterWithCodec
(
size_t
num_spatial_layers
size_t
num_temporal_layers
const
VideoCodec
&
codec
)
{
codec_
=
codec
;
for
(
size_t
si
=
0
;
si
<
num_spatial_layers
;
+
+
si
)
{
encoder_info_
.
fps_allocation
[
si
]
.
resize
(
num_temporal_layers
)
;
double
fraction
=
1
.
0
;
for
(
int
ti
=
num_temporal_layers
-
1
;
ti
>
=
0
;
-
-
ti
)
{
encoder_info_
.
fps_allocation
[
si
]
[
ti
]
=
static_cast
<
uint8_t
>
(
VideoEncoder
:
:
EncoderInfo
:
:
kMaxFramerateFraction
*
fraction
+
0
.
5
)
;
fraction
/
=
2
.
0
;
}
}
adjuster_
=
std
:
:
make_unique
<
EncoderBitrateAdjuster
>
(
codec_
scoped_field_trial_
*
time_controller_
.
GetClock
(
)
)
;
adjuster_
-
>
OnEncoderInfo
(
encoder_info_
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
}
void
SetUpAdjuster
(
size_t
num_spatial_layers
size_t
num_temporal_layers
bool
vp9_svc
)
{
VideoCodec
codec
;
if
(
vp9_svc
)
{
codec
.
codecType
=
VideoCodecType
:
:
kVideoCodecVP9
;
codec
.
numberOfSimulcastStreams
=
1
;
codec
.
VP9
(
)
-
>
numberOfSpatialLayers
=
num_spatial_layers
;
codec
.
VP9
(
)
-
>
numberOfTemporalLayers
=
num_temporal_layers
;
for
(
size_t
si
=
0
;
si
<
num_spatial_layers
;
+
+
si
)
{
codec
.
spatialLayers
[
si
]
.
minBitrate
=
100
*
(
1
<
<
si
)
;
codec
.
spatialLayers
[
si
]
.
targetBitrate
=
200
*
(
1
<
<
si
)
;
codec
.
spatialLayers
[
si
]
.
maxBitrate
=
300
*
(
1
<
<
si
)
;
codec
.
spatialLayers
[
si
]
.
active
=
true
;
codec
.
spatialLayers
[
si
]
.
numberOfTemporalLayers
=
num_temporal_layers
;
}
}
else
{
codec
.
codecType
=
VideoCodecType
:
:
kVideoCodecVP8
;
codec
.
numberOfSimulcastStreams
=
num_spatial_layers
;
codec
.
VP8
(
)
-
>
numberOfTemporalLayers
=
num_temporal_layers
;
for
(
size_t
si
=
0
;
si
<
num_spatial_layers
;
+
+
si
)
{
codec
.
simulcastStream
[
si
]
.
minBitrate
=
100
*
(
1
<
<
si
)
;
codec
.
simulcastStream
[
si
]
.
targetBitrate
=
200
*
(
1
<
<
si
)
;
codec
.
simulcastStream
[
si
]
.
maxBitrate
=
300
*
(
1
<
<
si
)
;
codec
.
simulcastStream
[
si
]
.
active
=
true
;
codec
.
simulcastStream
[
si
]
.
numberOfTemporalLayers
=
num_temporal_layers
;
}
}
SetUpAdjusterWithCodec
(
num_spatial_layers
num_temporal_layers
codec
)
;
}
void
InsertFrames
(
std
:
:
vector
<
std
:
:
vector
<
double
>
>
media_utilization_factors
int64_t
duration_ms
)
{
InsertFrames
(
media_utilization_factors
media_utilization_factors
duration_ms
)
;
}
void
InsertFrames
(
std
:
:
vector
<
std
:
:
vector
<
double
>
>
media_utilization_factors
std
:
:
vector
<
std
:
:
vector
<
double
>
>
network_utilization_factors
int64_t
duration_ms
)
{
RTC_DCHECK_EQ
(
media_utilization_factors
.
size
(
)
network_utilization_factors
.
size
(
)
)
;
const
int64_t
start_us
=
rtc
:
:
TimeMicros
(
)
;
while
(
rtc
:
:
TimeMicros
(
)
<
start_us
+
(
duration_ms
*
rtc
:
:
kNumMicrosecsPerMillisec
)
)
{
time_controller_
.
AdvanceTime
(
TimeDelta
:
:
Seconds
(
1
)
/
target_framerate_fps_
)
;
for
(
size_t
si
=
0
;
si
<
NumSpatialLayers
(
)
;
+
+
si
)
{
const
std
:
:
vector
<
int
>
&
tl_pattern
=
kTlPatterns
[
NumTemporalLayers
(
si
)
-
1
]
;
const
size_t
ti
=
tl_pattern
[
(
tl_pattern_idx_
[
si
]
+
+
)
%
tl_pattern
.
size
(
)
]
;
uint32_t
layer_bitrate_bps
=
current_adjusted_allocation_
.
GetBitrate
(
si
ti
)
;
double
layer_framerate_fps
=
target_framerate_fps_
;
if
(
encoder_info_
.
fps_allocation
[
si
]
.
size
(
)
>
ti
)
{
uint8_t
layer_fps_fraction
=
encoder_info_
.
fps_allocation
[
si
]
[
ti
]
;
if
(
ti
>
0
)
{
layer_fps_fraction
-
=
encoder_info_
.
fps_allocation
[
si
]
[
ti
-
1
]
;
}
layer_framerate_fps
=
(
target_framerate_fps_
*
layer_fps_fraction
)
/
VideoEncoder
:
:
EncoderInfo
:
:
kMaxFramerateFraction
;
}
double
media_utilization_factor
=
1
.
0
;
double
network_utilization_factor
=
1
.
0
;
if
(
media_utilization_factors
.
size
(
)
>
si
)
{
RTC_DCHECK_EQ
(
media_utilization_factors
[
si
]
.
size
(
)
network_utilization_factors
[
si
]
.
size
(
)
)
;
if
(
media_utilization_factors
[
si
]
.
size
(
)
>
ti
)
{
media_utilization_factor
=
media_utilization_factors
[
si
]
[
ti
]
;
network_utilization_factor
=
network_utilization_factors
[
si
]
[
ti
]
;
}
}
RTC_DCHECK_GE
(
network_utilization_factor
media_utilization_factor
)
;
const
size_t
media_frame_size
=
media_utilization_factor
*
(
layer_bitrate_bps
/
8
.
0
)
/
layer_framerate_fps
;
constexpr
int
kFramesWithPenalty
=
(
kSequenceLength
/
2
)
-
1
;
RTC_DCHECK_GT
(
kFramesWithPenalty
0
)
;
const
size_t
network_frame_size_diff_bytes
=
std
:
:
min
(
media_frame_size
static_cast
<
size_t
>
(
(
(
(
network_utilization_factor
-
media_utilization_factor
)
*
media_frame_size
)
*
kSequenceLength
)
/
kFramesWithPenalty
+
0
.
5
)
)
;
int
sequence_idx
=
sequence_idx_
[
si
]
[
ti
]
;
sequence_idx_
[
si
]
[
ti
]
=
(
sequence_idx_
[
si
]
[
ti
]
+
1
)
%
kSequenceLength
;
const
DataSize
frame_size
=
DataSize
:
:
Bytes
(
(
sequence_idx
<
kSequenceLength
/
2
)
?
media_frame_size
-
network_frame_size_diff_bytes
:
media_frame_size
+
network_frame_size_diff_bytes
)
;
adjuster_
-
>
OnEncodedFrame
(
frame_size
si
ti
)
;
sequence_idx
=
+
+
sequence_idx
%
kSequenceLength
;
}
}
}
size_t
NumSpatialLayers
(
)
const
{
if
(
codec_
.
codecType
=
=
VideoCodecType
:
:
kVideoCodecVP9
)
{
return
codec_
.
VP9
(
)
.
numberOfSpatialLayers
;
}
return
codec_
.
numberOfSimulcastStreams
;
}
size_t
NumTemporalLayers
(
int
spatial_index
)
{
if
(
codec_
.
codecType
=
=
VideoCodecType
:
:
kVideoCodecVP9
)
{
return
codec_
.
spatialLayers
[
spatial_index
]
.
numberOfTemporalLayers
;
}
return
codec_
.
simulcastStream
[
spatial_index
]
.
numberOfTemporalLayers
;
}
void
ExpectNear
(
const
VideoBitrateAllocation
&
expected_allocation
const
VideoBitrateAllocation
&
actual_allocation
double
allowed_error_fraction
)
{
for
(
size_t
si
=
0
;
si
<
kMaxSpatialLayers
;
+
+
si
)
{
for
(
size_t
ti
=
0
;
ti
<
kMaxTemporalStreams
;
+
+
ti
)
{
if
(
expected_allocation
.
HasBitrate
(
si
ti
)
)
{
EXPECT_TRUE
(
actual_allocation
.
HasBitrate
(
si
ti
)
)
;
uint32_t
expected_layer_bitrate_bps
=
expected_allocation
.
GetBitrate
(
si
ti
)
;
EXPECT_NEAR
(
expected_layer_bitrate_bps
actual_allocation
.
GetBitrate
(
si
ti
)
static_cast
<
uint32_t
>
(
expected_layer_bitrate_bps
*
allowed_error_fraction
)
)
;
}
else
{
EXPECT_FALSE
(
actual_allocation
.
HasBitrate
(
si
ti
)
)
;
}
}
}
}
VideoBitrateAllocation
MultiplyAllocation
(
const
VideoBitrateAllocation
&
allocation
double
factor
)
{
VideoBitrateAllocation
multiplied_allocation
;
for
(
size_t
si
=
0
;
si
<
kMaxSpatialLayers
;
+
+
si
)
{
for
(
size_t
ti
=
0
;
ti
<
kMaxTemporalStreams
;
+
+
ti
)
{
if
(
allocation
.
HasBitrate
(
si
ti
)
)
{
multiplied_allocation
.
SetBitrate
(
si
ti
static_cast
<
uint32_t
>
(
factor
*
allocation
.
GetBitrate
(
si
ti
)
+
0
.
5
)
)
;
}
}
}
return
multiplied_allocation
;
}
GlobalSimulatedTimeController
time_controller_
;
VideoCodec
codec_
;
VideoEncoder
:
:
EncoderInfo
encoder_info_
;
std
:
:
unique_ptr
<
EncoderBitrateAdjuster
>
adjuster_
;
VideoBitrateAllocation
current_input_allocation_
;
VideoBitrateAllocation
current_adjusted_allocation_
;
DataRate
target_bitrate_
;
double
target_framerate_fps_
;
int
tl_pattern_idx_
[
kMaxSpatialLayers
]
;
int
sequence_idx_
[
kMaxSpatialLayers
]
[
kMaxTemporalStreams
]
;
test
:
:
ScopedKeyValueConfig
scoped_field_trial_
;
const
std
:
:
vector
<
int
>
kTlPatterns
[
kMaxTemporalStreams
]
=
{
{
0
}
{
0
1
}
{
0
2
1
2
}
{
0
3
2
3
1
3
2
3
}
}
;
}
;
TEST_P
(
EncoderBitrateAdjusterTest
SingleLayerOptimal
)
{
current_input_allocation_
.
SetBitrate
(
0
0
300000
)
;
target_framerate_fps_
=
30
;
SetUpAdjuster
(
1
1
false
)
;
InsertFrames
(
{
{
1
.
0
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
current_input_allocation_
current_adjusted_allocation_
0
.
01
)
;
}
TEST_P
(
EncoderBitrateAdjusterTest
SingleLayerOveruse
)
{
current_input_allocation_
.
SetBitrate
(
0
0
300000
)
;
target_framerate_fps_
=
30
;
SetUpAdjuster
(
1
1
false
)
;
InsertFrames
(
{
{
1
.
2
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
MultiplyAllocation
(
current_input_allocation_
1
/
1
.
2
)
current_adjusted_allocation_
0
.
01
)
;
}
TEST_P
(
EncoderBitrateAdjusterTest
SingleLayerUnderuse
)
{
current_input_allocation_
.
SetBitrate
(
0
0
300000
)
;
target_framerate_fps_
=
30
;
SetUpAdjuster
(
1
1
false
)
;
InsertFrames
(
{
{
0
.
5
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
current_input_allocation_
current_adjusted_allocation_
0
.
00
)
;
}
TEST_P
(
EncoderBitrateAdjusterTest
ThreeTemporalLayersOptimalSize
)
{
current_input_allocation_
.
SetBitrate
(
0
0
180000
)
;
current_input_allocation_
.
SetBitrate
(
0
1
60000
)
;
current_input_allocation_
.
SetBitrate
(
0
2
60000
)
;
target_framerate_fps_
=
30
;
SetUpAdjuster
(
1
3
false
)
;
InsertFrames
(
{
{
1
.
0
1
.
0
1
.
0
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
current_input_allocation_
current_adjusted_allocation_
0
.
01
)
;
}
TEST_P
(
EncoderBitrateAdjusterTest
ThreeTemporalLayersOvershoot
)
{
current_input_allocation_
.
SetBitrate
(
0
0
180000
)
;
current_input_allocation_
.
SetBitrate
(
0
1
60000
)
;
current_input_allocation_
.
SetBitrate
(
0
2
60000
)
;
target_framerate_fps_
=
30
;
SetUpAdjuster
(
1
3
false
)
;
InsertFrames
(
{
{
1
.
1
1
.
1
1
.
1
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
MultiplyAllocation
(
current_input_allocation_
1
/
1
.
1
)
current_adjusted_allocation_
0
.
01
)
;
}
TEST_P
(
EncoderBitrateAdjusterTest
ThreeTemporalLayersUndershoot
)
{
current_input_allocation_
.
SetBitrate
(
0
0
180000
)
;
current_input_allocation_
.
SetBitrate
(
0
1
60000
)
;
current_input_allocation_
.
SetBitrate
(
0
2
60000
)
;
target_framerate_fps_
=
30
;
SetUpAdjuster
(
1
3
false
)
;
InsertFrames
(
{
{
0
.
8
0
.
8
0
.
8
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
current_input_allocation_
current_adjusted_allocation_
0
.
0
)
;
}
TEST_P
(
EncoderBitrateAdjusterTest
ThreeTemporalLayersSkewedOvershoot
)
{
current_input_allocation_
.
SetBitrate
(
0
0
180000
)
;
current_input_allocation_
.
SetBitrate
(
0
1
60000
)
;
current_input_allocation_
.
SetBitrate
(
0
2
60000
)
;
target_framerate_fps_
=
30
;
SetUpAdjuster
(
1
3
false
)
;
InsertFrames
(
{
{
1
.
1
1
.
2
1
.
2
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
MultiplyAllocation
(
current_input_allocation_
1
/
1
.
14
)
current_adjusted_allocation_
0
.
01
)
;
}
TEST_P
(
EncoderBitrateAdjusterTest
ThreeTemporalLayersNonLayeredEncoder
)
{
current_input_allocation_
.
SetBitrate
(
0
0
180000
)
;
current_input_allocation_
.
SetBitrate
(
0
1
60000
)
;
current_input_allocation_
.
SetBitrate
(
0
2
60000
)
;
target_framerate_fps_
=
30
;
SetUpAdjuster
(
1
1
false
)
;
InsertFrames
(
{
{
1
.
1
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
VideoBitrateAllocation
expected_allocation
;
expected_allocation
.
SetBitrate
(
0
0
static_cast
<
uint32_t
>
(
current_input_allocation_
.
get_sum_bps
(
)
/
1
.
10
)
)
;
ExpectNear
(
expected_allocation
current_adjusted_allocation_
0
.
01
)
;
}
TEST_P
(
EncoderBitrateAdjusterTest
IgnoredStream
)
{
current_input_allocation_
.
SetBitrate
(
0
0
180000
)
;
current_input_allocation_
.
SetBitrate
(
0
1
60000
)
;
target_framerate_fps_
=
30
;
SetUpAdjuster
(
1
1
false
)
;
encoder_info_
.
fps_allocation
[
0
]
.
clear
(
)
;
adjuster_
-
>
OnEncoderInfo
(
encoder_info_
)
;
InsertFrames
(
{
{
1
.
1
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
current_input_allocation_
current_adjusted_allocation_
0
.
00
)
;
}
TEST_P
(
EncoderBitrateAdjusterTest
DifferentSpatialOvershoots
)
{
current_input_allocation_
.
SetBitrate
(
0
0
180000
)
;
current_input_allocation_
.
SetBitrate
(
0
1
60000
)
;
current_input_allocation_
.
SetBitrate
(
0
2
60000
)
;
current_input_allocation_
.
SetBitrate
(
1
0
400000
)
;
current_input_allocation_
.
SetBitrate
(
1
1
150000
)
;
current_input_allocation_
.
SetBitrate
(
1
2
150000
)
;
target_framerate_fps_
=
30
;
for
(
int
i
=
0
;
i
<
2
;
+
+
i
)
{
SetUpAdjuster
(
2
3
i
=
=
0
)
;
InsertFrames
(
{
{
1
.
05
1
.
05
1
.
05
}
{
1
.
25
1
.
25
1
.
25
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
VideoBitrateAllocation
expected_allocation
;
for
(
size_t
ti
=
0
;
ti
<
3
;
+
+
ti
)
{
expected_allocation
.
SetBitrate
(
0
ti
static_cast
<
uint32_t
>
(
current_input_allocation_
.
GetBitrate
(
0
ti
)
/
1
.
05
)
)
;
expected_allocation
.
SetBitrate
(
1
ti
static_cast
<
uint32_t
>
(
current_input_allocation_
.
GetBitrate
(
1
ti
)
/
1
.
25
)
)
;
}
ExpectNear
(
expected_allocation
current_adjusted_allocation_
0
.
01
)
;
}
}
TEST_P
(
EncoderBitrateAdjusterTest
HeadroomAllowsOvershootToMediaRate
)
{
if
(
GetParam
(
)
=
=
"
WebRTC
-
VideoRateControl
/
adjuster_use_headroom
:
false
/
"
)
{
GTEST_SKIP
(
)
;
}
const
uint32_t
kS0Bitrate
=
300000
;
const
uint32_t
kS1Bitrate
=
900000
;
current_input_allocation_
.
SetBitrate
(
0
0
kS0Bitrate
/
3
)
;
current_input_allocation_
.
SetBitrate
(
0
1
kS0Bitrate
/
3
)
;
current_input_allocation_
.
SetBitrate
(
0
2
kS0Bitrate
/
3
)
;
current_input_allocation_
.
SetBitrate
(
1
0
kS1Bitrate
/
3
)
;
current_input_allocation_
.
SetBitrate
(
1
1
kS1Bitrate
/
3
)
;
current_input_allocation_
.
SetBitrate
(
1
2
kS1Bitrate
/
3
)
;
target_framerate_fps_
=
30
;
for
(
int
i
=
0
;
i
<
2
;
+
+
i
)
{
SetUpAdjuster
(
2
3
i
=
=
0
)
;
InsertFrames
(
{
{
1
.
0
1
.
0
1
.
0
}
{
1
.
0
1
.
0
1
.
0
}
}
{
{
1
.
1
1
.
1
1
.
1
}
{
1
.
1
1
.
1
1
.
1
}
}
kWindowSizeMs
*
kSequenceLength
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
MultiplyAllocation
(
current_input_allocation_
1
/
1
.
1
)
current_adjusted_allocation_
0
.
01
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
DataRate
:
:
BitsPerSec
(
current_input_allocation_
.
get_sum_bps
(
)
*
1
.
1
)
)
)
;
ExpectNear
(
current_input_allocation_
current_adjusted_allocation_
0
.
01
)
;
}
}
TEST_P
(
EncoderBitrateAdjusterTest
DontExceedMediaRateEvenWithHeadroom
)
{
if
(
GetParam
(
)
=
=
"
WebRTC
-
VideoRateControl
/
adjuster_use_headroom
:
false
/
"
)
{
GTEST_SKIP
(
)
;
}
const
uint32_t
kS0Bitrate
=
300000
;
const
uint32_t
kS1Bitrate
=
900000
;
current_input_allocation_
.
SetBitrate
(
0
0
kS0Bitrate
/
3
)
;
current_input_allocation_
.
SetBitrate
(
0
1
kS0Bitrate
/
3
)
;
current_input_allocation_
.
SetBitrate
(
0
2
kS0Bitrate
/
3
)
;
current_input_allocation_
.
SetBitrate
(
1
0
kS1Bitrate
/
3
)
;
current_input_allocation_
.
SetBitrate
(
1
1
kS1Bitrate
/
3
)
;
current_input_allocation_
.
SetBitrate
(
1
2
kS1Bitrate
/
3
)
;
target_framerate_fps_
=
30
;
for
(
const
bool
is_svc
:
{
false
true
}
)
{
SetUpAdjuster
(
2
3
is_svc
)
;
InsertFrames
(
{
{
1
.
0
1
.
0
1
.
0
}
}
kWindowSizeMs
*
kSequenceLength
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
MultiplyAllocation
(
current_input_allocation_
1
.
0
)
current_adjusted_allocation_
0
.
015
)
;
InsertFrames
(
{
{
1
.
1
1
.
1
1
.
1
}
{
1
.
1
1
.
1
1
.
1
}
}
{
{
1
.
3
1
.
3
1
.
3
}
{
1
.
3
1
.
3
1
.
3
}
}
kWindowSizeMs
*
kSequenceLength
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
DataRate
:
:
BitsPerSec
(
current_input_allocation_
.
get_sum_bps
(
)
*
2
)
)
)
;
ExpectNear
(
MultiplyAllocation
(
current_input_allocation_
1
/
1
.
1
)
current_adjusted_allocation_
0
.
02
)
;
}
}
TEST_P
(
EncoderBitrateAdjusterTest
HonorsMinBitrateWithAv1
)
{
const
DataRate
kHighBitrate
=
DataRate
:
:
KilobitsPerSec
(
20
)
;
const
DataRate
kALowerMinBitrate
=
DataRate
:
:
KilobitsPerSec
(
15
)
;
current_input_allocation_
.
SetBitrate
(
0
0
kHighBitrate
.
bps
(
)
)
;
VideoBitrateAllocation
expected_input_allocation
;
expected_input_allocation
.
SetBitrate
(
0
0
kALowerMinBitrate
.
bps
(
)
)
;
target_framerate_fps_
=
30
;
VideoCodec
codec
;
codec
.
codecType
=
VideoCodecType
:
:
kVideoCodecAV1
;
codec
.
numberOfSimulcastStreams
=
1
;
codec
.
SetScalabilityMode
(
ScalabilityMode
:
:
kL1T1
)
;
codec
.
spatialLayers
[
0
]
.
minBitrate
=
kALowerMinBitrate
.
kbps
(
)
;
codec
.
spatialLayers
[
0
]
.
targetBitrate
=
500
;
codec
.
spatialLayers
[
0
]
.
maxBitrate
=
1000
;
codec
.
spatialLayers
[
0
]
.
active
=
true
;
codec
.
spatialLayers
[
0
]
.
numberOfTemporalLayers
=
1
;
SetUpAdjusterWithCodec
(
1
1
codec
)
;
InsertFrames
(
{
{
2
.
0
}
}
kWindowSizeMs
)
;
current_adjusted_allocation_
=
adjuster_
-
>
AdjustRateAllocation
(
VideoEncoder
:
:
RateControlParameters
(
current_input_allocation_
target_framerate_fps_
)
)
;
ExpectNear
(
expected_input_allocation
current_adjusted_allocation_
0
.
01
)
;
}
INSTANTIATE_TEST_SUITE_P
(
AdjustWithHeadroomVariations
EncoderBitrateAdjusterTest
Values
(
"
WebRTC
-
VideoRateControl
/
adjuster_use_headroom
:
false
/
"
"
WebRTC
-
VideoRateControl
/
adjuster_use_headroom
:
true
/
"
"
WebRTC
-
VideoRateControl
/
adjuster_use_headroom
:
true
/
"
"
WebRTC
-
BitrateAdjusterUseNewfangledHeadroomAdjustment
/
Enabled
/
"
)
)
;
}
}
