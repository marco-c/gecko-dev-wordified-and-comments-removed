#
ifndef
VIDEO_SEND_DELAY_STATS_H_
#
define
VIDEO_SEND_DELAY_STATS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
call
/
video_send_stream
.
h
"
#
include
"
modules
/
include
/
module_common_types_public
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
video
/
stats_counter
.
h
"
namespace
webrtc
{
class
SendDelayStats
{
public
:
explicit
SendDelayStats
(
Clock
*
clock
)
;
~
SendDelayStats
(
)
;
void
AddSsrcs
(
const
VideoSendStream
:
:
Config
&
config
)
;
bool
OnSentPacket
(
int
packet_id
Timestamp
time
)
;
void
OnSendPacket
(
uint16_t
packet_id
Timestamp
capture_time
uint32_t
ssrc
)
;
private
:
struct
SequenceNumberOlderThan
{
bool
operator
(
)
(
uint16_t
seq1
uint16_t
seq2
)
const
{
return
IsNewerSequenceNumber
(
seq2
seq1
)
;
}
}
;
struct
Packet
{
AvgCounter
*
send_delay
;
Timestamp
capture_time
;
Timestamp
send_time
;
}
;
void
UpdateHistograms
(
)
;
void
RemoveOld
(
Timestamp
now
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
Clock
*
const
clock_
;
Mutex
mutex_
;
std
:
:
map
<
uint16_t
Packet
SequenceNumberOlderThan
>
packets_
RTC_GUARDED_BY
(
mutex_
)
;
size_t
num_old_packets_
RTC_GUARDED_BY
(
mutex_
)
;
size_t
num_skipped_packets_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
map
<
uint32_t
AvgCounter
>
send_delay_counters_
RTC_GUARDED_BY
(
mutex_
)
;
}
;
}
#
endif
