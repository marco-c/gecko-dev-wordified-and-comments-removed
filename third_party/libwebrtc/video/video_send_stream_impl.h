#
ifndef
VIDEO_VIDEO_SEND_STREAM_IMPL_H_
#
define
VIDEO_VIDEO_SEND_STREAM_IMPL_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
atomic
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
video
/
encoded_image
.
h
"
#
include
"
api
/
video
/
video_bitrate_allocation
.
h
"
#
include
"
api
/
video
/
video_bitrate_allocator
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
call
/
bitrate_allocator
.
h
"
#
include
"
call
/
rtp_config
.
h
"
#
include
"
call
/
rtp_transport_controller_send_interface
.
h
"
#
include
"
call
/
rtp_video_sender_interface
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
#
include
"
rtc_base
/
experiments
/
field_trial_parser
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
rtc_base
/
task_utils
/
repeating_task
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
video
/
config
/
video_encoder_config
.
h
"
#
include
"
video
/
send_statistics_proxy
.
h
"
#
include
"
video
/
video_stream_encoder_interface
.
h
"
namespace
webrtc
{
namespace
internal
{
struct
PacingConfig
{
explicit
PacingConfig
(
const
FieldTrialsView
&
field_trials
)
;
PacingConfig
(
const
PacingConfig
&
)
;
PacingConfig
&
operator
=
(
const
PacingConfig
&
)
=
default
;
~
PacingConfig
(
)
;
FieldTrialParameter
<
double
>
pacing_factor
;
FieldTrialParameter
<
TimeDelta
>
max_pacing_delay
;
}
;
class
VideoSendStreamImpl
:
public
webrtc
:
:
BitrateAllocatorObserver
public
VideoStreamEncoderInterface
:
:
EncoderSink
{
public
:
VideoSendStreamImpl
(
Clock
*
clock
SendStatisticsProxy
*
stats_proxy
TaskQueueBase
*
rtp_transport_queue
RtpTransportControllerSendInterface
*
transport
BitrateAllocatorInterface
*
bitrate_allocator
VideoStreamEncoderInterface
*
video_stream_encoder
const
VideoSendStream
:
:
Config
*
config
int
initial_encoder_max_bitrate
double
initial_encoder_bitrate_priority
VideoEncoderConfig
:
:
ContentType
content_type
RtpVideoSenderInterface
*
rtp_video_sender
const
FieldTrialsView
&
field_trials
)
;
~
VideoSendStreamImpl
(
)
override
;
void
DeliverRtcp
(
const
uint8_t
*
packet
size_t
length
)
;
void
UpdateActiveSimulcastLayers
(
std
:
:
vector
<
bool
>
active_layers
)
;
void
Start
(
)
;
void
Stop
(
)
;
std
:
:
map
<
uint32_t
RtpState
>
GetRtpStates
(
)
const
;
std
:
:
map
<
uint32_t
RtpPayloadState
>
GetRtpPayloadStates
(
)
const
;
const
absl
:
:
optional
<
float
>
&
configured_pacing_factor
(
)
const
{
return
configured_pacing_factor_
;
}
private
:
uint32_t
OnBitrateUpdated
(
BitrateAllocationUpdate
update
)
override
;
void
OnEncoderConfigurationChanged
(
std
:
:
vector
<
VideoStream
>
streams
bool
is_svc
VideoEncoderConfig
:
:
ContentType
content_type
int
min_transmit_bitrate_bps
)
override
;
void
OnBitrateAllocationUpdated
(
const
VideoBitrateAllocation
&
allocation
)
override
;
void
OnVideoLayersAllocationUpdated
(
VideoLayersAllocation
allocation
)
override
;
EncodedImageCallback
:
:
Result
OnEncodedImage
(
const
EncodedImage
&
encoded_image
const
CodecSpecificInfo
*
codec_specific_info
)
override
;
void
OnDroppedFrame
(
EncodedImageCallback
:
:
DropReason
reason
)
override
;
void
StartupVideoSendStream
(
)
;
void
StopVideoSendStream
(
)
RTC_RUN_ON
(
rtp_transport_queue_
)
;
void
ConfigureProtection
(
)
;
void
ConfigureSsrcs
(
)
;
void
SignalEncoderTimedOut
(
)
;
void
SignalEncoderActive
(
)
;
MediaStreamAllocationConfig
GetAllocationConfig
(
)
const
RTC_RUN_ON
(
rtp_transport_queue_
)
;
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
thread_checker_
;
Clock
*
const
clock_
;
const
bool
has_alr_probing_
;
const
PacingConfig
pacing_config_
;
SendStatisticsProxy
*
const
stats_proxy_
;
const
VideoSendStream
:
:
Config
*
const
config_
;
TaskQueueBase
*
const
rtp_transport_queue_
;
RepeatingTaskHandle
check_encoder_activity_task_
RTC_GUARDED_BY
(
rtp_transport_queue_
)
;
std
:
:
atomic_bool
activity_
;
bool
timed_out_
RTC_GUARDED_BY
(
rtp_transport_queue_
)
;
RtpTransportControllerSendInterface
*
const
transport_
;
BitrateAllocatorInterface
*
const
bitrate_allocator_
;
bool
disable_padding_
;
int
max_padding_bitrate_
;
int
encoder_min_bitrate_bps_
;
uint32_t
encoder_max_bitrate_bps_
;
uint32_t
encoder_target_rate_bps_
;
double
encoder_bitrate_priority_
;
VideoStreamEncoderInterface
*
const
video_stream_encoder_
;
RtcpBandwidthObserver
*
const
bandwidth_observer_
;
RtpVideoSenderInterface
*
const
rtp_video_sender_
;
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
transport_queue_safety_
=
PendingTaskSafetyFlag
:
:
CreateDetached
(
)
;
struct
VbaSendContext
{
VideoBitrateAllocation
last_sent_allocation
;
absl
:
:
optional
<
VideoBitrateAllocation
>
throttled_allocation
;
int64_t
last_send_time_ms
;
}
;
absl
:
:
optional
<
VbaSendContext
>
video_bitrate_allocation_context_
RTC_GUARDED_BY
(
rtp_transport_queue_
)
;
const
absl
:
:
optional
<
float
>
configured_pacing_factor_
;
}
;
}
}
#
endif
