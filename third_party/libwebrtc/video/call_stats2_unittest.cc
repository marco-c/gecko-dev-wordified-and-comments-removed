#
include
"
video
/
call_stats2
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
"
api
/
task_queue
/
default_task_queue_factory
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
system_wrappers
/
include
/
metrics
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
run_loop
.
h
"
using
:
:
testing
:
:
AnyNumber
;
using
:
:
testing
:
:
InvokeWithoutArgs
;
using
:
:
testing
:
:
Return
;
namespace
webrtc
{
namespace
internal
{
class
MockStatsObserver
:
public
CallStatsObserver
{
public
:
MockStatsObserver
(
)
{
}
virtual
~
MockStatsObserver
(
)
{
}
MOCK_METHOD
(
void
OnRttUpdate
(
int64_t
int64_t
)
(
override
)
)
;
}
;
class
CallStats2Test
:
public
:
:
testing
:
:
Test
{
public
:
CallStats2Test
(
)
{
call_stats_
.
EnsureStarted
(
)
;
}
void
AsyncSimulateRttUpdate
(
int64_t
rtt
)
{
RtcpRttStats
*
rtcp_rtt_stats
=
call_stats_
.
AsRtcpRttStats
(
)
;
task_queue_
-
>
PostTask
(
[
rtcp_rtt_stats
rtt
]
{
rtcp_rtt_stats
-
>
OnRttUpdate
(
rtt
)
;
}
)
;
}
protected
:
void
FlushProcessAndWorker
(
)
{
task_queue_
-
>
PostTask
(
[
this
]
{
loop_
.
PostTask
(
[
this
]
{
loop_
.
Quit
(
)
;
}
)
;
}
)
;
loop_
.
Run
(
)
;
}
test
:
:
RunLoop
loop_
;
std
:
:
unique_ptr
<
TaskQueueBase
TaskQueueDeleter
>
task_queue_
=
CreateDefaultTaskQueueFactory
(
)
-
>
CreateTaskQueue
(
"
CallStats
"
TaskQueueFactory
:
:
Priority
:
:
NORMAL
)
;
SimulatedClock
fake_clock_
{
12345
}
;
CallStats
call_stats_
{
&
fake_clock_
loop_
.
task_queue
(
)
}
;
}
;
TEST_F
(
CallStats2Test
AddAndTriggerCallback
)
{
static
constexpr
const
int64_t
kRtt
=
25
;
MockStatsObserver
stats_observer
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kRtt
kRtt
)
)
.
Times
(
1
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
loop_
.
Quit
(
)
;
}
)
)
;
call_stats_
.
RegisterStatsObserver
(
&
stats_observer
)
;
EXPECT_EQ
(
-
1
call_stats_
.
LastProcessedRtt
(
)
)
;
AsyncSimulateRttUpdate
(
kRtt
)
;
loop_
.
Run
(
)
;
EXPECT_EQ
(
kRtt
call_stats_
.
LastProcessedRtt
(
)
)
;
call_stats_
.
DeregisterStatsObserver
(
&
stats_observer
)
;
}
TEST_F
(
CallStats2Test
ProcessTime
)
{
static
constexpr
const
int64_t
kRtt
=
100
;
static
constexpr
const
int64_t
kRtt2
=
80
;
MockStatsObserver
stats_observer
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kRtt
kRtt
)
)
.
Times
(
2
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
fake_clock_
.
AdvanceTimeMilliseconds
(
CallStats
:
:
kUpdateInterval
.
ms
(
)
)
;
}
)
)
.
WillRepeatedly
(
InvokeWithoutArgs
(
[
this
]
{
AsyncSimulateRttUpdate
(
kRtt2
)
;
fake_clock_
.
AdvanceTimeMilliseconds
(
CallStats
:
:
kUpdateInterval
.
ms
(
)
-
1
)
;
}
)
)
;
static
constexpr
const
int64_t
kLastAvg
=
94
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kLastAvg
kRtt2
)
)
.
Times
(
1
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
loop_
.
Quit
(
)
;
}
)
)
;
call_stats_
.
RegisterStatsObserver
(
&
stats_observer
)
;
AsyncSimulateRttUpdate
(
kRtt
)
;
loop_
.
Run
(
)
;
call_stats_
.
DeregisterStatsObserver
(
&
stats_observer
)
;
}
TEST_F
(
CallStats2Test
MultipleObservers
)
{
MockStatsObserver
stats_observer_1
;
call_stats_
.
RegisterStatsObserver
(
&
stats_observer_1
)
;
MockStatsObserver
stats_observer_2
;
call_stats_
.
RegisterStatsObserver
(
&
stats_observer_2
)
;
call_stats_
.
RegisterStatsObserver
(
&
stats_observer_2
)
;
static
constexpr
const
int64_t
kRtt
=
100
;
EXPECT_CALL
(
stats_observer_1
OnRttUpdate
(
kRtt
kRtt
)
)
.
Times
(
AnyNumber
(
)
)
.
WillRepeatedly
(
Return
(
)
)
;
EXPECT_CALL
(
stats_observer_2
OnRttUpdate
(
kRtt
kRtt
)
)
.
Times
(
AnyNumber
(
)
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
loop_
.
Quit
(
)
;
}
)
)
.
WillRepeatedly
(
Return
(
)
)
;
AsyncSimulateRttUpdate
(
kRtt
)
;
loop_
.
Run
(
)
;
call_stats_
.
DeregisterStatsObserver
(
&
stats_observer_2
)
;
EXPECT_CALL
(
stats_observer_1
OnRttUpdate
(
kRtt
kRtt
)
)
.
Times
(
AnyNumber
(
)
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
loop_
.
Quit
(
)
;
}
)
)
.
WillRepeatedly
(
Return
(
)
)
;
EXPECT_CALL
(
stats_observer_2
OnRttUpdate
(
kRtt
kRtt
)
)
.
Times
(
0
)
;
AsyncSimulateRttUpdate
(
kRtt
)
;
loop_
.
Run
(
)
;
call_stats_
.
DeregisterStatsObserver
(
&
stats_observer_1
)
;
EXPECT_CALL
(
stats_observer_1
OnRttUpdate
(
kRtt
kRtt
)
)
.
Times
(
0
)
;
EXPECT_CALL
(
stats_observer_2
OnRttUpdate
(
kRtt
kRtt
)
)
.
Times
(
0
)
;
AsyncSimulateRttUpdate
(
kRtt
)
;
FlushProcessAndWorker
(
)
;
}
TEST_F
(
CallStats2Test
ChangeRtt
)
{
MockStatsObserver
stats_observer
;
call_stats_
.
RegisterStatsObserver
(
&
stats_observer
)
;
static
constexpr
const
int64_t
kFirstRtt
=
100
;
static
constexpr
const
int64_t
kLowRtt
=
kFirstRtt
-
20
;
static
constexpr
const
int64_t
kHighRtt
=
kFirstRtt
+
20
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kFirstRtt
kFirstRtt
)
)
.
Times
(
1
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
fake_clock_
.
AdvanceTimeMilliseconds
(
1000
)
;
AsyncSimulateRttUpdate
(
kHighRtt
)
;
}
)
)
;
static
constexpr
const
int64_t
kAvgRtt1
=
103
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kAvgRtt1
kHighRtt
)
)
.
Times
(
1
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
fake_clock_
.
AdvanceTimeMilliseconds
(
1000
)
;
AsyncSimulateRttUpdate
(
kLowRtt
)
;
}
)
)
;
static
constexpr
const
int64_t
kAvgRtt2
=
102
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kAvgRtt2
kHighRtt
)
)
.
Times
(
1
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
fake_clock_
.
AdvanceTimeMilliseconds
(
1000
)
;
}
)
)
;
static
constexpr
const
int64_t
kAvgRtt3
=
95
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kAvgRtt3
kLowRtt
)
)
.
Times
(
1
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
loop_
.
Quit
(
)
;
}
)
)
;
AsyncSimulateRttUpdate
(
kFirstRtt
)
;
loop_
.
Run
(
)
;
call_stats_
.
DeregisterStatsObserver
(
&
stats_observer
)
;
}
TEST_F
(
CallStats2Test
LastProcessedRtt
)
{
MockStatsObserver
stats_observer
;
call_stats_
.
RegisterStatsObserver
(
&
stats_observer
)
;
static
constexpr
const
int64_t
kRttLow
=
10
;
static
constexpr
const
int64_t
kRttHigh
=
30
;
static
constexpr
const
int64_t
kAvgRtt1
=
13
;
static
constexpr
const
int64_t
kAvgRtt2
=
15
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kRttLow
kRttLow
)
)
.
Times
(
1
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
EXPECT_EQ
(
kRttLow
call_stats_
.
LastProcessedRtt
(
)
)
;
AsyncSimulateRttUpdate
(
kRttHigh
)
;
}
)
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kAvgRtt1
kRttHigh
)
)
.
Times
(
AnyNumber
(
)
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
EXPECT_EQ
(
kAvgRtt1
call_stats_
.
LastProcessedRtt
(
)
)
;
fake_clock_
.
AdvanceTimeMilliseconds
(
CallStats
:
:
kUpdateInterval
.
ms
(
)
)
;
AsyncSimulateRttUpdate
(
kRttLow
)
;
AsyncSimulateRttUpdate
(
kRttHigh
)
;
}
)
)
.
WillRepeatedly
(
Return
(
)
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kAvgRtt2
kRttHigh
)
)
.
Times
(
AnyNumber
(
)
)
.
WillOnce
(
InvokeWithoutArgs
(
[
this
]
{
EXPECT_EQ
(
kAvgRtt2
call_stats_
.
LastProcessedRtt
(
)
)
;
loop_
.
Quit
(
)
;
}
)
)
.
WillRepeatedly
(
Return
(
)
)
;
fake_clock_
.
AdvanceTimeMilliseconds
(
CallStats
:
:
kUpdateInterval
.
ms
(
)
)
;
AsyncSimulateRttUpdate
(
kRttLow
)
;
loop_
.
Run
(
)
;
EXPECT_EQ
(
kAvgRtt2
call_stats_
.
LastProcessedRtt
(
)
)
;
call_stats_
.
DeregisterStatsObserver
(
&
stats_observer
)
;
}
TEST_F
(
CallStats2Test
ProducesHistogramMetrics
)
{
metrics
:
:
Reset
(
)
;
static
constexpr
const
int64_t
kRtt
=
123
;
MockStatsObserver
stats_observer
;
call_stats_
.
RegisterStatsObserver
(
&
stats_observer
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kRtt
kRtt
)
)
.
Times
(
AnyNumber
(
)
)
.
WillRepeatedly
(
InvokeWithoutArgs
(
[
this
]
{
loop_
.
Quit
(
)
;
}
)
)
;
AsyncSimulateRttUpdate
(
kRtt
)
;
loop_
.
Run
(
)
;
fake_clock_
.
AdvanceTimeMilliseconds
(
metrics
:
:
kMinRunTimeInSeconds
*
CallStats
:
:
kUpdateInterval
.
ms
(
)
)
;
AsyncSimulateRttUpdate
(
kRtt
)
;
loop_
.
Run
(
)
;
call_stats_
.
DeregisterStatsObserver
(
&
stats_observer
)
;
call_stats_
.
UpdateHistogramsForTest
(
)
;
EXPECT_METRIC_EQ
(
1
metrics
:
:
NumSamples
(
"
WebRTC
.
Video
.
AverageRoundTripTimeInMilliseconds
"
)
)
;
EXPECT_METRIC_EQ
(
1
metrics
:
:
NumEvents
(
"
WebRTC
.
Video
.
AverageRoundTripTimeInMilliseconds
"
kRtt
)
)
;
}
}
}
