#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
media_stream_interface
.
h
"
#
include
"
api
/
test
/
create_network_emulation_manager
.
h
"
#
include
"
api
/
test
/
create_peer_connection_quality_test_frame_generator
.
h
"
#
include
"
api
/
test
/
create_peerconnection_quality_test_fixture
.
h
"
#
include
"
api
/
test
/
frame_generator_interface
.
h
"
#
include
"
api
/
test
/
metrics
/
global_metrics_logger_and_exporter
.
h
"
#
include
"
api
/
test
/
network_emulation_manager
.
h
"
#
include
"
api
/
test
/
peerconnection_quality_test_fixture
.
h
"
#
include
"
api
/
test
/
simulated_network
.
h
"
#
include
"
api
/
test
/
time_controller
.
h
"
#
include
"
api
/
video_codecs
/
vp9_profile
.
h
"
#
include
"
call
/
simulated_network
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
vp9
/
include
/
vp9
.
h
"
#
include
"
system_wrappers
/
include
/
field_trial
.
h
"
#
include
"
test
/
field_trial
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
pc
/
e2e
/
network_quality_metrics_reporter
.
h
"
#
include
"
test
/
testsupport
/
file_utils
.
h
"
namespace
webrtc
{
using
EmulatedSFUConfig
=
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
EmulatedSFUConfig
;
using
PeerConfigurer
=
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
PeerConfigurer
;
using
RunParams
=
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
RunParams
;
using
VideoConfig
=
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
VideoConfig
;
using
AudioConfig
=
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
AudioConfig
;
using
ScreenShareConfig
=
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
ScreenShareConfig
;
using
VideoSimulcastConfig
=
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
VideoSimulcastConfig
;
using
VideoCodecConfig
=
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
:
:
VideoCodecConfig
;
namespace
{
constexpr
int
kTestDurationSec
=
45
;
EmulatedNetworkNode
*
CreateEmulatedNodeWithConfig
(
NetworkEmulationManager
*
emulation
const
BuiltInNetworkBehaviorConfig
&
config
)
{
return
emulation
-
>
CreateEmulatedNode
(
std
:
:
make_unique
<
SimulatedNetwork
>
(
config
)
)
;
}
std
:
:
pair
<
EmulatedNetworkManagerInterface
*
EmulatedNetworkManagerInterface
*
>
CreateTwoNetworkLinks
(
NetworkEmulationManager
*
emulation
const
BuiltInNetworkBehaviorConfig
&
config
)
{
auto
*
alice_node
=
CreateEmulatedNodeWithConfig
(
emulation
config
)
;
auto
*
bob_node
=
CreateEmulatedNodeWithConfig
(
emulation
config
)
;
auto
*
alice_endpoint
=
emulation
-
>
CreateEndpoint
(
EmulatedEndpointConfig
(
)
)
;
auto
*
bob_endpoint
=
emulation
-
>
CreateEndpoint
(
EmulatedEndpointConfig
(
)
)
;
emulation
-
>
CreateRoute
(
alice_endpoint
{
alice_node
}
bob_endpoint
)
;
emulation
-
>
CreateRoute
(
bob_endpoint
{
bob_node
}
alice_endpoint
)
;
return
{
emulation
-
>
CreateEmulatedNetworkManagerInterface
(
{
alice_endpoint
}
)
emulation
-
>
CreateEmulatedNetworkManagerInterface
(
{
bob_endpoint
}
)
}
;
}
std
:
:
unique_ptr
<
webrtc_pc_e2e
:
:
PeerConnectionE2EQualityTestFixture
>
CreateTestFixture
(
const
std
:
:
string
&
test_case_name
TimeController
&
time_controller
std
:
:
pair
<
EmulatedNetworkManagerInterface
*
EmulatedNetworkManagerInterface
*
>
network_links
rtc
:
:
FunctionView
<
void
(
PeerConfigurer
*
)
>
alice_configurer
rtc
:
:
FunctionView
<
void
(
PeerConfigurer
*
)
>
bob_configurer
)
{
auto
fixture
=
webrtc_pc_e2e
:
:
CreatePeerConnectionE2EQualityTestFixture
(
test_case_name
time_controller
nullptr
nullptr
)
;
fixture
-
>
AddPeer
(
network_links
.
first
-
>
network_dependencies
(
)
alice_configurer
)
;
fixture
-
>
AddPeer
(
network_links
.
second
-
>
network_dependencies
(
)
bob_configurer
)
;
fixture
-
>
AddQualityMetricsReporter
(
std
:
:
make_unique
<
webrtc_pc_e2e
:
:
NetworkQualityMetricsReporter
>
(
network_links
.
first
network_links
.
second
test
:
:
GetGlobalMetricsLogger
(
)
)
)
;
return
fixture
;
}
std
:
:
string
AppendFieldTrials
(
std
:
:
string
new_trial_string
)
{
return
std
:
:
string
(
field_trial
:
:
GetFieldTrialString
(
)
)
+
new_trial_string
;
}
std
:
:
string
ClipNameToClipPath
(
const
char
*
clip_name
)
{
return
test
:
:
ResourcePath
(
clip_name
"
yuv
"
)
;
}
}
#
if
defined
(
RTC_ENABLE_VP9
)
TEST
(
PCFullStackTest
Pc_Foreman_Cif_Net_Delay_0_0_Plr_0_VP9
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_net_delay_0_0_plr_0_VP9
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCGenericDescriptorTest
Pc_Foreman_Cif_Delay_50_0_Plr_5_VP9_Generic_Descriptor
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
5
;
config
.
queue_delay_ms
=
50
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_delay_50_0_plr_5_VP9_generic_descriptor
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
#
if
(
defined
(
WEBRTC_ANDROID
)
&
&
\
(
defined
(
WEBRTC_ARCH_ARM64
)
|
|
defined
(
WEBRTC_ARCH_ARM
)
)
)
|
|
\
(
defined
(
WEBRTC_IOS
)
&
&
defined
(
WEBRTC_ARCH_ARM64
)
)
#
define
MAYBE_Pc_Generator_Net_Delay_0_0_Plr_0_VP9Profile2
\
DISABLED_Pc_Generator_Net_Delay_0_0_Plr_0_VP9Profile2
#
else
#
define
MAYBE_Pc_Generator_Net_Delay_0_0_Plr_0_VP9Profile2
\
Pc_Generator_Net_Delay_0_0_Plr_0_VP9Profile2
#
endif
TEST
(
PCFullStackTest
MAYBE_Pc_Generator_Net_Delay_0_0_Plr_0_VP9Profile2
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_generator_net_delay_0_0_plr_0_VP9Profile2
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateSquareFrameGenerator
(
video
test
:
:
FrameGeneratorInterface
:
:
OutputType
:
:
kI010
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile2
)
}
}
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile2
)
}
}
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
#
endif
TEST
(
PCFullStackTest
Pc_Net_Delay_0_0_Plr_0
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_net_delay_0_0_plr_0
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
176
144
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
paris_qcif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCGenericDescriptorTest
Pc_Foreman_Cif_Net_Delay_0_0_Plr_0_Generic_Descriptor
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_net_delay_0_0_plr_0_generic_descriptor
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCGenericDescriptorTest
Pc_Foreman_Cif_30kbps_Net_Delay_0_0_Plr_0_Generic_Descriptor
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_30kbps_net_delay_0_0_plr_0_generic_descriptor
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
10
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
BitrateSettings
bitrate_settings
;
bitrate_settings
.
min_bitrate_bps
=
30000
;
bitrate_settings
.
start_bitrate_bps
=
30000
;
bitrate_settings
.
max_bitrate_bps
=
30000
;
alice
-
>
SetBitrateSettings
(
bitrate_settings
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
RunParams
run_params
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
;
fixture
-
>
Run
(
std
:
:
move
(
run_params
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_Link_150kbps_Net_Delay_0_0_Plr_0
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
link_capacity_kbps
=
150
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_link_150kbps_net_delay_0_0_plr_0
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_Link_130kbps_Delay100ms_Loss1_Ulpfec
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
link_capacity_kbps
=
130
;
config
.
queue_delay_ms
=
100
;
config
.
loss_percent
=
1
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_link_130kbps_delay100ms_loss1_ulpfec
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetUseUlpFEC
(
true
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetUseUlpFEC
(
true
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_Link_50kbps_Delay100ms_Loss1_Ulpfec
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
link_capacity_kbps
=
50
;
config
.
queue_delay_ms
=
100
;
config
.
loss_percent
=
1
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_link_50kbps_delay100ms_loss1_ulpfec
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetUseUlpFEC
(
true
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetUseUlpFEC
(
true
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_Link_150kbps_Delay100ms_30pkts_Queue_Overshoot30
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
link_capacity_kbps
=
150
;
config
.
queue_length_packets
=
30
;
config
.
queue_delay_ms
=
100
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_link_150kbps_delay100ms_30pkts_queue_overshoot30
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoEncoderBitrateMultiplier
(
1
.
30
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoEncoderBitrateMultiplier
(
1
.
30
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_Link_250kbps_Delay100ms_10pkts_Loss1
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
link_capacity_kbps
=
250
;
config
.
queue_length_packets
=
10
;
config
.
queue_delay_ms
=
100
;
config
.
loss_percent
=
1
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_link_250kbps_delay100ms_10pkts_loss1
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoEncoderBitrateMultiplier
(
1
.
30
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoEncoderBitrateMultiplier
(
1
.
30
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCGenericDescriptorTest
Pc_Foreman_Cif_Delay_50_0_Plr_5_Generic_Descriptor
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
5
;
config
.
queue_delay_ms
=
50
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_delay_50_0_plr_5_generic_descriptor
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCGenericDescriptorTest
Pc_Foreman_Cif_Delay_50_0_Plr_5_Ulpfec_Generic_Descriptor
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
5
;
config
.
queue_delay_ms
=
50
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_delay_50_0_plr_5_ulpfec_generic_descriptor
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetUseUlpFEC
(
true
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetUseUlpFEC
(
true
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_Delay_50_0_Plr_5_Flexfec
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
5
;
config
.
queue_delay_ms
=
50
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_delay_50_0_plr_5_flexfec
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetUseFlexFEC
(
true
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetUseFlexFEC
(
true
)
;
}
)
;
RunParams
run_params
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
;
run_params
.
enable_flex_fec_support
=
true
;
fixture
-
>
Run
(
std
:
:
move
(
run_params
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_500kbps_Delay_50_0_Plr_3_Flexfec
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
3
;
config
.
link_capacity_kbps
=
500
;
config
.
queue_delay_ms
=
50
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_500kbps_delay_50_0_plr_3_flexfec
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetUseFlexFEC
(
true
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetUseFlexFEC
(
true
)
;
}
)
;
RunParams
run_params
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
;
run_params
.
enable_flex_fec_support
=
true
;
fixture
-
>
Run
(
std
:
:
move
(
run_params
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_500kbps_Delay_50_0_Plr_3_Ulpfec
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
3
;
config
.
link_capacity_kbps
=
500
;
config
.
queue_delay_ms
=
50
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_500kbps_delay_50_0_plr_3_ulpfec
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetUseUlpFEC
(
true
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetUseUlpFEC
(
true
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
#
if
defined
(
WEBRTC_USE_H264
)
TEST
(
PCFullStackTest
Pc_Foreman_Cif_Net_Delay_0_0_Plr_0_H264
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_net_delay_0_0_plr_0_H264
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_30kbps_Net_Delay_0_0_Plr_0_H264
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_30kbps_net_delay_0_0_plr_0_H264
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
10
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
BitrateSettings
bitrate_settings
;
bitrate_settings
.
min_bitrate_bps
=
30000
;
bitrate_settings
.
start_bitrate_bps
=
30000
;
bitrate_settings
.
max_bitrate_bps
=
30000
;
alice
-
>
SetBitrateSettings
(
bitrate_settings
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCGenericDescriptorTest
Pc_Foreman_Cif_Delay_50_0_Plr_5_H264_Generic_Descriptor
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
5
;
config
.
queue_delay_ms
=
50
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_delay_50_0_plr_5_H264_generic_descriptor
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_Delay_50_0_Plr_5_H264_Sps_Pps_Idr
)
{
test
:
:
ScopedFieldTrials
override_field_trials
(
AppendFieldTrials
(
"
WebRTC
-
SpsPpsIdrIsH264Keyframe
/
Enabled
/
"
)
)
;
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
5
;
config
.
queue_delay_ms
=
50
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_delay_50_0_plr_5_H264_sps_pps_idr
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_Delay_50_0_Plr_5_H264_Flexfec
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
5
;
config
.
queue_delay_ms
=
50
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_delay_50_0_plr_5_H264_flexfec
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
alice
-
>
SetUseFlexFEC
(
true
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
bob
-
>
SetUseFlexFEC
(
true
)
;
}
)
;
RunParams
run_params
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
;
run_params
.
enable_flex_fec_support
=
true
;
fixture
-
>
Run
(
std
:
:
move
(
run_params
)
)
;
}
TEST
(
PCFullStackTest
DISABLED_Pc_Foreman_Cif_Delay_50_0_Plr_5_H264_Ulpfec
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
5
;
config
.
queue_delay_ms
=
50
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_delay_50_0_plr_5_H264_ulpfec
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
alice
-
>
SetUseUlpFEC
(
true
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kH264CodecName
)
}
)
;
bob
-
>
SetUseUlpFEC
(
true
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
#
endif
TEST
(
PCFullStackTest
Pc_Foreman_Cif_500kbps
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
queue_length_packets
=
0
;
config
.
queue_delay_ms
=
0
;
config
.
link_capacity_kbps
=
500
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_500kbps
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_500kbps_32pkts_Queue
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
queue_length_packets
=
32
;
config
.
queue_delay_ms
=
0
;
config
.
link_capacity_kbps
=
500
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_500kbps_32pkts_queue
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_500kbps_100ms
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
queue_length_packets
=
0
;
config
.
queue_delay_ms
=
100
;
config
.
link_capacity_kbps
=
500
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_500kbps_100ms
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCGenericDescriptorTest
Pc_Foreman_Cif_500kbps_100ms_32pkts_Queue_Generic_Descriptor
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
queue_length_packets
=
32
;
config
.
queue_delay_ms
=
100
;
config
.
link_capacity_kbps
=
500
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_500kbps_100ms_32pkts_queue_generic_descriptor
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Foreman_Cif_1000kbps_100ms_32pkts_Queue
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
queue_length_packets
=
32
;
config
.
queue_delay_ms
=
100
;
config
.
link_capacity_kbps
=
1000
;
auto
fixture
=
CreateTestFixture
(
"
pc_foreman_cif_1000kbps_100ms_32pkts_queue
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
352
288
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
foreman_cif
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Conference_Motion_Hd_2000kbps_100ms_32pkts_Queue
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
queue_length_packets
=
32
;
config
.
queue_delay_ms
=
100
;
config
.
link_capacity_kbps
=
2000
;
auto
fixture
=
CreateTestFixture
(
"
pc_conference_motion_hd_2000kbps_100ms_32pkts_queue
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1280
720
50
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
ConferenceMotion_1280_720_50
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
#
if
defined
(
RTC_ENABLE_VP9
)
TEST
(
PCFullStackTest
Pc_Conference_Motion_Hd_2000kbps_100ms_32pkts_Queue_Vp9
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
queue_length_packets
=
32
;
config
.
queue_delay_ms
=
100
;
config
.
link_capacity_kbps
=
2000
;
auto
fixture
=
CreateTestFixture
(
"
pc_conference_motion_hd_2000kbps_100ms_32pkts_queue_vp9
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1280
720
50
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
ConferenceMotion_1280_720_50
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
#
endif
TEST
(
PCFullStackTest
Pc_Screenshare_Slides_No_Conference_Mode
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_screenshare_slides_no_conference_mode
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1850
1110
5
)
;
video
.
stream_label
=
"
alice
-
video
"
;
video
.
content_hint
=
VideoTrackInterface
:
:
ContentHint
:
:
kText
;
auto
frame_generator
=
CreateScreenShareFrameGenerator
(
video
ScreenShareConfig
(
TimeDelta
:
:
Seconds
(
10
)
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Screenshare_Slides
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_screenshare_slides
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1850
1110
5
)
;
video
.
stream_label
=
"
alice
-
video
"
;
video
.
content_hint
=
VideoTrackInterface
:
:
ContentHint
:
:
kText
;
auto
frame_generator
=
CreateScreenShareFrameGenerator
(
video
ScreenShareConfig
(
TimeDelta
:
:
Seconds
(
10
)
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
RunParams
run_params
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
;
run_params
.
use_conference_mode
=
true
;
fixture
-
>
Run
(
std
:
:
move
(
run_params
)
)
;
}
#
if
!
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_WIN
)
TEST
(
PCFullStackTest
Pc_Screenshare_Slides_Simulcast_No_Conference_Mode
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_screenshare_slides_simulcast_no_conference_mode
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1850
1110
30
)
;
video
.
simulcast_config
=
VideoSimulcastConfig
(
2
)
;
video
.
emulated_sfu_config
=
EmulatedSFUConfig
(
1
)
;
video
.
temporal_layers_count
=
2
;
video
.
stream_label
=
"
alice
-
video
"
;
video
.
content_hint
=
VideoTrackInterface
:
:
ContentHint
:
:
kText
;
auto
frame_generator
=
CreateScreenShareFrameGenerator
(
video
ScreenShareConfig
(
TimeDelta
:
:
Seconds
(
10
)
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Screenshare_Slides_Simulcast
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_screenshare_slides_simulcast
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1850
1110
30
)
;
video
.
simulcast_config
=
VideoSimulcastConfig
(
2
)
;
video
.
emulated_sfu_config
=
EmulatedSFUConfig
(
1
)
;
video
.
temporal_layers_count
=
2
;
video
.
stream_label
=
"
alice
-
video
"
;
video
.
content_hint
=
VideoTrackInterface
:
:
ContentHint
:
:
kText
;
auto
frame_generator
=
CreateScreenShareFrameGenerator
(
video
ScreenShareConfig
(
TimeDelta
:
:
Seconds
(
10
)
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
RunParams
run_params
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
;
run_params
.
use_conference_mode
=
true
;
fixture
-
>
Run
(
std
:
:
move
(
run_params
)
)
;
}
#
endif
#
if
defined
(
RTC_ENABLE_VP9
)
TEST
(
PCFullStackTest
Pc_Screenshare_Slides_Vp9_3sl_High_Fps
)
{
webrtc
:
:
test
:
:
ScopedFieldTrials
override_trials
(
AppendFieldTrials
(
"
WebRTC
-
Vp9InterLayerPred
/
"
"
Enabled
inter_layer_pred_mode
:
on
/
"
)
)
;
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_screenshare_slides_vp9_3sl_high_fps
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1850
1110
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
video
.
simulcast_config
=
VideoSimulcastConfig
(
3
)
;
video
.
emulated_sfu_config
=
EmulatedSFUConfig
(
2
)
;
video
.
content_hint
=
VideoTrackInterface
:
:
ContentHint
:
:
kText
;
auto
frame_generator
=
CreateScreenShareFrameGenerator
(
video
ScreenShareConfig
(
TimeDelta
:
:
Seconds
(
10
)
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Vp9svc_3sl_High
)
{
webrtc
:
:
test
:
:
ScopedFieldTrials
override_trials
(
AppendFieldTrials
(
"
WebRTC
-
Vp9InterLayerPred
/
"
"
Enabled
inter_layer_pred_mode
:
on
/
"
)
)
;
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_vp9svc_3sl_high
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1280
720
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
video
.
simulcast_config
=
VideoSimulcastConfig
(
3
)
;
video
.
emulated_sfu_config
=
EmulatedSFUConfig
(
2
)
;
video
.
temporal_layers_count
=
3
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
ConferenceMotion_1280_720_50
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Vp9svc_3sl_Low
)
{
webrtc
:
:
test
:
:
ScopedFieldTrials
override_trials
(
AppendFieldTrials
(
"
WebRTC
-
Vp9InterLayerPred
/
"
"
Enabled
inter_layer_pred_mode
:
on
/
"
)
)
;
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
auto
fixture
=
CreateTestFixture
(
"
pc_vp9svc_3sl_low
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
BuiltInNetworkBehaviorConfig
(
)
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1280
720
30
)
;
video
.
stream_label
=
"
alice
-
video
"
;
video
.
simulcast_config
=
VideoSimulcastConfig
(
3
)
;
video
.
emulated_sfu_config
=
EmulatedSFUConfig
(
0
)
;
video
.
temporal_layers_count
=
3
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
ConferenceMotion_1280_720_50
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
alice
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
bob
-
>
SetVideoCodecs
(
{
VideoCodecConfig
(
cricket
:
:
kVp9CodecName
{
{
kVP9FmtpProfileId
VP9ProfileToString
(
VP9Profile
:
:
kProfile0
)
}
}
)
}
)
;
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
#
endif
#
if
defined
(
WEBRTC_ANDROID
)
|
|
defined
(
WEBRTC_MAC
)
#
define
MAYBE_Pc_Simulcast_HD_High
DISABLED_Pc_Simulcast_HD_High
#
else
#
define
MAYBE_Pc_Simulcast_HD_High
Pc_Simulcast_HD_High
#
endif
TEST
(
PCFullStackTest
MAYBE_Pc_Simulcast_HD_High
)
{
webrtc
:
:
test
:
:
ScopedFieldTrials
override_trials
(
AppendFieldTrials
(
"
WebRTC
-
ForceSimulatedOveruseIntervalMs
/
1000
-
50000
-
300
/
"
)
)
;
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
0
;
config
.
queue_delay_ms
=
100
;
auto
fixture
=
CreateTestFixture
(
"
pc_simulcast_HD_high
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1920
1080
30
)
;
video
.
simulcast_config
=
VideoSimulcastConfig
(
3
)
;
video
.
emulated_sfu_config
=
EmulatedSFUConfig
(
2
)
;
video
.
temporal_layers_count
=
3
;
video
.
stream_label
=
"
alice
-
video
"
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Simulcast_Vp8_3sl_High
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
0
;
config
.
queue_delay_ms
=
100
;
auto
fixture
=
CreateTestFixture
(
"
pc_simulcast_vp8_3sl_high
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1280
720
30
)
;
video
.
simulcast_config
=
VideoSimulcastConfig
(
3
)
;
video
.
emulated_sfu_config
=
EmulatedSFUConfig
(
2
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
ConferenceMotion_1280_720_50
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
TEST
(
PCFullStackTest
Pc_Simulcast_Vp8_3sl_Low
)
{
std
:
:
unique_ptr
<
NetworkEmulationManager
>
network_emulation_manager
=
CreateNetworkEmulationManager
(
)
;
BuiltInNetworkBehaviorConfig
config
;
config
.
loss_percent
=
0
;
config
.
queue_delay_ms
=
100
;
auto
fixture
=
CreateTestFixture
(
"
pc_simulcast_vp8_3sl_low
"
*
network_emulation_manager
-
>
time_controller
(
)
CreateTwoNetworkLinks
(
network_emulation_manager
.
get
(
)
config
)
[
]
(
PeerConfigurer
*
alice
)
{
VideoConfig
video
(
1280
720
30
)
;
video
.
simulcast_config
=
VideoSimulcastConfig
(
3
)
;
video
.
emulated_sfu_config
=
EmulatedSFUConfig
(
0
)
;
video
.
stream_label
=
"
alice
-
video
"
;
auto
frame_generator
=
CreateFromYuvFileFrameGenerator
(
video
ClipNameToClipPath
(
"
ConferenceMotion_1280_720_50
"
)
)
;
alice
-
>
AddVideoConfig
(
std
:
:
move
(
video
)
std
:
:
move
(
frame_generator
)
)
;
}
[
]
(
PeerConfigurer
*
bob
)
{
}
)
;
fixture
-
>
Run
(
RunParams
(
TimeDelta
:
:
Seconds
(
kTestDurationSec
)
)
)
;
}
}
