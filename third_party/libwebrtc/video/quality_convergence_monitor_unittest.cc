#
include
"
video
/
quality_convergence_monitor
.
h
"
#
include
<
vector
>
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
QualityConvergenceMonitor
:
:
Parameters
kParametersOnlyStaticThreshold
=
{
.
static_qp_threshold
=
13
.
dynamic_detection_enabled
=
false
}
;
constexpr
QualityConvergenceMonitor
:
:
Parameters
kParametersWithDynamicDetection
=
{
.
static_qp_threshold
=
13
.
dynamic_detection_enabled
=
true
.
recent_window_length
=
3
.
past_window_length
=
9
.
dynamic_qp_threshold
=
24
}
;
TEST
(
QualityConvergenceMonitorAlgorithm
StaticThreshold
)
{
QualityConvergenceMonitor
:
:
Parameters
p
=
kParametersOnlyStaticThreshold
;
auto
monitor
=
std
:
:
make_unique
<
QualityConvergenceMonitor
>
(
p
)
;
ASSERT_TRUE
(
monitor
)
;
for
(
bool
is_refresh_frame
:
{
false
true
}
)
{
for
(
int
qp
=
100
;
qp
>
p
.
static_qp_threshold
;
-
-
qp
)
{
monitor
-
>
AddSample
(
qp
is_refresh_frame
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
monitor
-
>
AddSample
(
p
.
static_qp_threshold
is_refresh_frame
)
;
EXPECT_TRUE
(
monitor
-
>
AtTargetQuality
(
)
)
;
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
monitor
-
>
AddSample
(
p
.
static_qp_threshold
+
1
is_refresh_frame
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
}
}
TEST
(
QualityConvergenceMonitorAlgorithm
StaticThresholdWithDynamicDetectionEnabled
)
{
QualityConvergenceMonitor
:
:
Parameters
p
=
kParametersWithDynamicDetection
;
auto
monitor
=
std
:
:
make_unique
<
QualityConvergenceMonitor
>
(
p
)
;
ASSERT_TRUE
(
monitor
)
;
for
(
bool
is_refresh_frame
:
{
false
true
}
)
{
monitor
-
>
AddSample
(
-
1
false
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
for
(
int
qp
=
100
;
qp
>
p
.
static_qp_threshold
;
-
-
qp
)
{
monitor
-
>
AddSample
(
qp
is_refresh_frame
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
monitor
-
>
AddSample
(
p
.
static_qp_threshold
is_refresh_frame
)
;
EXPECT_TRUE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
monitor
-
>
AddSample
(
p
.
static_qp_threshold
+
1
false
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
}
TEST
(
QualityConvergenceMonitorAlgorithm
ConvergenceAtDynamicThreshold
)
{
QualityConvergenceMonitor
:
:
Parameters
p
=
kParametersWithDynamicDetection
;
auto
monitor
=
std
:
:
make_unique
<
QualityConvergenceMonitor
>
(
p
)
;
ASSERT_TRUE
(
monitor
)
;
for
(
size_t
i
=
0
;
i
<
p
.
recent_window_length
+
p
.
past_window_length
;
+
+
i
)
{
monitor
-
>
AddSample
(
p
.
dynamic_qp_threshold
true
)
;
}
EXPECT_TRUE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
TEST
(
QualityConvergenceMonitorAlgorithm
NoConvergenceAboveDynamicThreshold
)
{
QualityConvergenceMonitor
:
:
Parameters
p
=
kParametersWithDynamicDetection
;
auto
monitor
=
std
:
:
make_unique
<
QualityConvergenceMonitor
>
(
p
)
;
ASSERT_TRUE
(
monitor
)
;
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
monitor
-
>
AddSample
(
p
.
dynamic_qp_threshold
+
1
true
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
}
TEST
(
QualityConvergenceMonitorAlgorithm
MaintainAtTargetQualityForRefreshFrames
)
{
QualityConvergenceMonitor
:
:
Parameters
p
=
kParametersWithDynamicDetection
;
auto
monitor
=
std
:
:
make_unique
<
QualityConvergenceMonitor
>
(
p
)
;
ASSERT_TRUE
(
monitor
)
;
for
(
size_t
i
=
0
;
i
<
p
.
recent_window_length
+
p
.
past_window_length
;
+
+
i
)
{
monitor
-
>
AddSample
(
p
.
dynamic_qp_threshold
true
)
;
}
EXPECT_TRUE
(
monitor
-
>
AtTargetQuality
(
)
)
;
int
qp
=
p
.
dynamic_qp_threshold
;
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
monitor
-
>
AddSample
(
qp
+
+
true
)
;
EXPECT_TRUE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
monitor
-
>
AddSample
(
qp
false
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
TEST
(
QualityConvergenceMonitorAlgorithm
SufficientData
)
{
QualityConvergenceMonitor
:
:
Parameters
p
=
kParametersWithDynamicDetection
;
auto
monitor
=
std
:
:
make_unique
<
QualityConvergenceMonitor
>
(
p
)
;
ASSERT_TRUE
(
monitor
)
;
for
(
size_t
i
=
0
;
i
<
p
.
recent_window_length
;
+
+
i
)
{
monitor
-
>
AddSample
(
p
.
dynamic_qp_threshold
true
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
monitor
-
>
AddSample
(
p
.
dynamic_qp_threshold
true
)
;
EXPECT_TRUE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
TEST
(
QualityConvergenceMonitorAlgorithm
AtTargetIfQpPastLessThanOrEqualToQpRecent
)
{
QualityConvergenceMonitor
:
:
Parameters
p
=
kParametersWithDynamicDetection
;
p
.
past_window_length
=
3
;
p
.
recent_window_length
=
3
;
auto
monitor
=
std
:
:
make_unique
<
QualityConvergenceMonitor
>
(
p
)
;
for
(
int
qp
:
{
23
21
21
21
21
22
}
)
{
monitor
-
>
AddSample
(
qp
true
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
monitor
-
>
AddSample
(
-
1
false
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
for
(
int
qp
:
{
22
21
21
21
21
}
)
{
monitor
-
>
AddSample
(
qp
true
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
monitor
-
>
AddSample
(
22
true
)
;
EXPECT_TRUE
(
monitor
-
>
AtTargetQuality
(
)
)
;
monitor
-
>
AddSample
(
-
1
false
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
for
(
int
qp
:
{
22
21
21
21
21
}
)
{
monitor
-
>
AddSample
(
qp
true
)
;
EXPECT_FALSE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
monitor
-
>
AddSample
(
23
true
)
;
EXPECT_TRUE
(
monitor
-
>
AtTargetQuality
(
)
)
;
}
}
}
