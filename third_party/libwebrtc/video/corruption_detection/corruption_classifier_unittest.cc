#
include
"
video
/
corruption_detection
/
corruption_classifier
.
h
"
#
include
<
vector
>
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
video
/
corruption_detection
/
halton_frame_sampler
.
h
"
namespace
webrtc
{
namespace
{
using
:
:
testing
:
:
DoubleNear
;
constexpr
int
kLumaThreshold
=
3
;
constexpr
int
kChromaThreshold
=
2
;
constexpr
double
kMaxAbsoluteError
=
1e
-
4
;
constexpr
double
kBaseOriginalLumaSampleValue1
=
1
.
0
;
constexpr
double
kBaseOriginalLumaSampleValue2
=
2
.
5
;
constexpr
double
kBaseOriginalChromaSampleValue1
=
0
.
5
;
constexpr
FilteredSample
kFilteredOriginalSampleValues
[
]
=
{
{
.
value
=
kBaseOriginalLumaSampleValue1
.
plane
=
ImagePlane
:
:
kLuma
}
{
.
value
=
kBaseOriginalLumaSampleValue2
.
plane
=
ImagePlane
:
:
kLuma
}
{
.
value
=
kBaseOriginalChromaSampleValue1
.
plane
=
ImagePlane
:
:
kChroma
}
}
;
constexpr
float
kScaleFactor
=
14
.
0
;
constexpr
float
kGrowthRate
=
1
.
0
;
constexpr
float
kMidpoint
=
7
.
0
;
std
:
:
vector
<
FilteredSample
>
GetCompressedSampleValues
(
double
increase_value_luma
double
increase_value_chroma
)
{
return
std
:
:
vector
<
FilteredSample
>
{
{
.
value
=
kBaseOriginalLumaSampleValue1
+
increase_value_luma
.
plane
=
ImagePlane
:
:
kLuma
}
{
.
value
=
kBaseOriginalLumaSampleValue2
+
increase_value_luma
.
plane
=
ImagePlane
:
:
kLuma
}
{
.
value
=
kBaseOriginalChromaSampleValue1
+
increase_value_chroma
.
plane
=
ImagePlane
:
:
kChroma
}
}
;
}
TEST
(
CorruptionClassifierTest
SameSampleValuesShouldResultInNoCorruptionScalarConfig
)
{
float
kIncreaseValue
=
0
.
0
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValue
kIncreaseValue
)
;
CorruptionClassifier
corruption_classifier
(
kScaleFactor
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
0
.
0
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
SameSampleValuesShouldResultInNoCorruptionLogisticFunctionConfig
)
{
float
kIncreaseValue
=
0
.
0
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValue
kIncreaseValue
)
;
CorruptionClassifier
corruption_classifier
(
kGrowthRate
kMidpoint
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
0
.
0009
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
NoCorruptionWhenAllSampleDifferencesBelowThresholdScalarConfig
)
{
const
double
kIncreaseValue
=
1
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValue
kIncreaseValue
)
;
CorruptionClassifier
corruption_classifier
(
kScaleFactor
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
0
.
0
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
NoCorruptionWhenAllSampleDifferencesBelowThresholdLogisticFunctionConfig
)
{
const
double
kIncreaseValue
=
1
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValue
kIncreaseValue
)
;
CorruptionClassifier
corruption_classifier
(
kGrowthRate
kMidpoint
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
0
.
0009
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
NoCorruptionWhenSmallPartOfSamplesAboveThresholdScalarConfig
)
{
const
double
kIncreaseValueLuma
=
1
;
const
double
kIncreaseValueChroma
=
2
.
5
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValueLuma
kIncreaseValueChroma
)
;
CorruptionClassifier
corruption_classifier
(
kScaleFactor
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
0
.
0060
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
NoCorruptionWhenSmallPartOfSamplesAboveThresholdLogisticFunctionConfig
)
{
const
double
kIncreaseValueLuma
=
1
;
const
double
kIncreaseValueChroma
=
2
.
5
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValueLuma
kIncreaseValueChroma
)
;
CorruptionClassifier
corruption_classifier
(
kGrowthRate
kMidpoint
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
0
.
001
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
NoCorruptionWhenAllSamplesSlightlyAboveThresholdScalarConfig
)
{
const
double
kIncreaseValueLuma
=
4
.
2
;
const
double
kIncreaseValueChroma
=
2
.
5
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValueLuma
kIncreaseValueChroma
)
;
CorruptionClassifier
corruption_classifier
(
kScaleFactor
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
0
.
07452
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
NoCorruptionWhenAllSamplesSlightlyAboveThresholdLogisticFunctionConfig
)
{
const
double
kIncreaseValueLuma
=
4
.
2
;
const
double
kIncreaseValueChroma
=
2
.
5
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValueLuma
kIncreaseValueChroma
)
;
CorruptionClassifier
corruption_classifier
(
kGrowthRate
kMidpoint
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
0
.
0026
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
NoCorruptionWhenAllSamplesSomewhatAboveThresholdScalarConfig
)
{
const
double
kIncreaseValue
=
5
.
0
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValue
kIncreaseValue
)
;
CorruptionClassifier
corruption_classifier
(
kScaleFactor
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
0
.
4048
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
NoCorruptionWhenAllSamplesSomewhatAboveThresholdLogisticFunctionConfig
)
{
const
double
kIncreaseValue
=
5
.
0
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValue
kIncreaseValue
)
;
CorruptionClassifier
corruption_classifier
(
kGrowthRate
kMidpoint
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
0
.
2086
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
CorruptionWhenAllSamplesWellAboveThresholdScalarConfig
)
{
const
double
kIncreaseValue
=
7
.
0
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValue
kIncreaseValue
)
;
CorruptionClassifier
corruption_classifier
(
kScaleFactor
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
1
kMaxAbsoluteError
)
)
;
}
TEST
(
CorruptionClassifierTest
CorruptionWhenAllSamplesWellAboveThresholdLogisticFunctionConfig
)
{
const
double
kIncreaseValue
=
7
.
0
;
const
std
:
:
vector
<
FilteredSample
>
kFilteredCompressedSampleValues
=
GetCompressedSampleValues
(
kIncreaseValue
kIncreaseValue
)
;
CorruptionClassifier
corruption_classifier
(
kGrowthRate
kMidpoint
)
;
EXPECT_THAT
(
corruption_classifier
.
CalculateCorruptionProbablility
(
kFilteredOriginalSampleValues
kFilteredCompressedSampleValues
kLumaThreshold
kChromaThreshold
)
DoubleNear
(
1
kMaxAbsoluteError
)
)
;
}
}
}
