#
ifndef
VIDEO_RTP_VIDEO_STREAM_RECEIVER_H_
#
define
VIDEO_RTP_VIDEO_STREAM_RECEIVER_H_
#
include
<
atomic
>
#
include
<
list
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
crypto
/
frame_decryptor_interface
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
transport
/
field_trial_based_config
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
api
/
video
/
color_space
.
h
"
#
include
"
api
/
video
/
video_codec_type
.
h
"
#
include
"
call
/
rtp_packet_sink_interface
.
h
"
#
include
"
call
/
syncable
.
h
"
#
include
"
call
/
video_receive_stream
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
receive_statistics
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
remote_ntp_time_estimator
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_header_extension_map
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
absolute_capture_time_interpolator
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
capture_clock_offset_updater
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_dependency_descriptor_extension
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_video_header
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
video_rtp_depacketizer
.
h
"
#
include
"
modules
/
video_coding
/
h264_sps_pps_tracker
.
h
"
#
include
"
modules
/
video_coding
/
loss_notification_controller
.
h
"
#
include
"
modules
/
video_coding
/
packet_buffer
.
h
"
#
include
"
modules
/
video_coding
/
rtp_frame_reference_finder
.
h
"
#
include
"
rtc_base
/
experiments
/
field_trial_parser
.
h
"
#
include
"
rtc_base
/
numerics
/
sequence_number_util
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
video
/
buffered_frame_decryptor
.
h
"
#
include
"
video
/
rtp_video_stream_receiver_frame_transformer_delegate
.
h
"
#
include
"
video
/
unique_timestamp_counter
.
h
"
namespace
webrtc
{
class
DEPRECATED_NackModule
;
class
PacketRouter
;
class
ProcessThread
;
class
ReceiveStatistics
;
class
ReceiveStatisticsProxy
;
class
RtcpRttStats
;
class
RtpPacketReceived
;
class
Transport
;
class
UlpfecReceiver
;
class
RtpVideoStreamReceiver
:
public
LossNotificationSender
public
RecoveredPacketReceiver
public
RtpPacketSinkInterface
public
KeyFrameRequestSender
public
OnDecryptedFrameCallback
public
OnDecryptionStatusChangeCallback
public
RtpVideoFrameReceiver
{
public
:
class
OnCompleteFrameCallback
{
public
:
virtual
~
OnCompleteFrameCallback
(
)
{
}
virtual
void
OnCompleteFrame
(
std
:
:
unique_ptr
<
EncodedFrame
>
frame
)
=
0
;
}
;
RtpVideoStreamReceiver
(
Clock
*
clock
Transport
*
transport
RtcpRttStats
*
rtt_stats
PacketRouter
*
packet_router
const
VideoReceiveStreamInterface
:
:
Config
*
config
ReceiveStatistics
*
rtp_receive_statistics
ReceiveStatisticsProxy
*
receive_stats_proxy
ProcessThread
*
process_thread
NackSender
*
nack_sender
KeyFrameRequestSender
*
keyframe_request_sender
OnCompleteFrameCallback
*
complete_frame_callback
rtc
:
:
scoped_refptr
<
FrameDecryptorInterface
>
frame_decryptor
rtc
:
:
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
const
FieldTrialsView
*
field_trials
=
nullptr
)
;
RtpVideoStreamReceiver
(
Clock
*
clock
Transport
*
transport
RtcpRttStats
*
rtt_stats
PacketRouter
*
packet_router
const
VideoReceiveStreamInterface
:
:
Config
*
config
ReceiveStatistics
*
rtp_receive_statistics
RtcpPacketTypeCounterObserver
*
rtcp_packet_type_counter_observer
RtcpCnameCallback
*
rtcp_cname_callback
ProcessThread
*
process_thread
NackSender
*
nack_sender
KeyFrameRequestSender
*
keyframe_request_sender
OnCompleteFrameCallback
*
complete_frame_callback
rtc
:
:
scoped_refptr
<
FrameDecryptorInterface
>
frame_decryptor
rtc
:
:
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
const
FieldTrialsView
*
field_trials
=
nullptr
)
;
~
RtpVideoStreamReceiver
(
)
override
;
void
AddReceiveCodec
(
uint8_t
payload_type
VideoCodecType
codec_type
const
std
:
:
map
<
std
:
:
string
std
:
:
string
>
&
codec_params
bool
raw_payload
)
;
RtpRtcp
*
rtp_rtcp
(
)
const
{
return
rtp_rtcp_
.
get
(
)
;
}
void
StartReceive
(
)
;
void
StopReceive
(
)
;
absl
:
:
optional
<
Syncable
:
:
Info
>
GetSyncInfo
(
)
const
;
bool
DeliverRtcp
(
const
uint8_t
*
rtcp_packet
size_t
rtcp_packet_length
)
;
void
FrameContinuous
(
int64_t
seq_num
)
;
void
FrameDecoded
(
int64_t
seq_num
)
;
void
SignalNetworkState
(
NetworkState
state
)
;
int
GetUniqueFramesSeen
(
)
const
{
RTC_DCHECK_RUN_ON
(
&
worker_task_checker_
)
;
return
frame_counter_
.
GetUniqueSeen
(
)
;
}
void
OnRtpPacket
(
const
RtpPacketReceived
&
packet
)
override
;
void
OnReceivedPayloadData
(
rtc
:
:
CopyOnWriteBuffer
codec_payload
const
RtpPacketReceived
&
rtp_packet
const
RTPVideoHeader
&
video
)
;
void
OnRecoveredPacket
(
const
uint8_t
*
packet
size_t
packet_length
)
override
;
void
RequestKeyFrame
(
)
override
;
void
SendLossNotification
(
uint16_t
last_decoded_seq_num
uint16_t
last_received_seq_num
bool
decodability_flag
bool
buffering_allowed
)
override
;
bool
IsUlpfecEnabled
(
)
const
;
bool
IsRetransmissionsEnabled
(
)
const
;
bool
IsDecryptable
(
)
const
;
void
RequestPacketRetransmit
(
const
std
:
:
vector
<
uint16_t
>
&
sequence_numbers
)
;
void
OnCompleteFrames
(
RtpFrameReferenceFinder
:
:
ReturnVector
frames
)
;
void
OnDecryptedFrame
(
std
:
:
unique_ptr
<
RtpFrameObject
>
frame
)
override
;
void
OnDecryptionStatusChange
(
FrameDecryptorInterface
:
:
Status
status
)
override
;
void
SetFrameDecryptor
(
rtc
:
:
scoped_refptr
<
FrameDecryptorInterface
>
frame_decryptor
)
;
void
SetDepacketizerToDecoderFrameTransformer
(
rtc
:
:
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
)
;
void
UpdateRtt
(
int64_t
max_rtt_ms
)
;
absl
:
:
optional
<
int64_t
>
LastReceivedPacketMs
(
)
const
;
absl
:
:
optional
<
int64_t
>
LastReceivedKeyframePacketMs
(
)
const
;
void
AddSecondarySink
(
RtpPacketSinkInterface
*
sink
)
;
void
RemoveSecondarySink
(
const
RtpPacketSinkInterface
*
sink
)
;
private
:
void
ManageFrame
(
std
:
:
unique_ptr
<
RtpFrameObject
>
frame
)
override
;
class
RtcpFeedbackBuffer
:
public
KeyFrameRequestSender
public
NackSender
public
LossNotificationSender
{
public
:
RtcpFeedbackBuffer
(
KeyFrameRequestSender
*
key_frame_request_sender
NackSender
*
nack_sender
LossNotificationSender
*
loss_notification_sender
)
;
~
RtcpFeedbackBuffer
(
)
override
=
default
;
void
RequestKeyFrame
(
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
override
;
void
SendNack
(
const
std
:
:
vector
<
uint16_t
>
&
sequence_numbers
bool
buffering_allowed
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
override
;
void
SendLossNotification
(
uint16_t
last_decoded_seq_num
uint16_t
last_received_seq_num
bool
decodability_flag
bool
buffering_allowed
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
override
;
void
SendBufferedRtcpFeedback
(
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
;
private
:
struct
LossNotificationState
{
LossNotificationState
(
uint16_t
last_decoded_seq_num
uint16_t
last_received_seq_num
bool
decodability_flag
)
:
last_decoded_seq_num
(
last_decoded_seq_num
)
last_received_seq_num
(
last_received_seq_num
)
decodability_flag
(
decodability_flag
)
{
}
uint16_t
last_decoded_seq_num
;
uint16_t
last_received_seq_num
;
bool
decodability_flag
;
}
;
struct
ConsumedRtcpFeedback
{
bool
request_key_frame
=
false
;
std
:
:
vector
<
uint16_t
>
nack_sequence_numbers
;
absl
:
:
optional
<
LossNotificationState
>
lntf_state
;
}
;
ConsumedRtcpFeedback
ConsumeRtcpFeedback
(
)
RTC_LOCKS_EXCLUDED
(
mutex_
)
;
ConsumedRtcpFeedback
ConsumeRtcpFeedbackLocked
(
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
void
SendRtcpFeedback
(
ConsumedRtcpFeedback
feedback
)
;
KeyFrameRequestSender
*
const
key_frame_request_sender_
;
NackSender
*
const
nack_sender_
;
LossNotificationSender
*
const
loss_notification_sender_
;
Mutex
mutex_
;
bool
request_key_frame_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
vector
<
uint16_t
>
nack_sequence_numbers_
RTC_GUARDED_BY
(
mutex_
)
;
absl
:
:
optional
<
LossNotificationState
>
lntf_state_
RTC_GUARDED_BY
(
mutex_
)
;
}
;
enum
ParseGenericDependenciesResult
{
kDropPacket
kHasGenericDescriptor
kNoGenericDescriptor
}
;
void
ReceivePacket
(
const
RtpPacketReceived
&
packet
)
;
void
ParseAndHandleEncapsulatingHeader
(
const
RtpPacketReceived
&
packet
)
;
void
NotifyReceiverOfEmptyPacket
(
uint16_t
seq_num
)
;
void
UpdateHistograms
(
)
;
bool
IsRedEnabled
(
)
const
;
void
InsertSpsPpsIntoTracker
(
uint8_t
payload_type
)
;
void
OnInsertedPacket
(
video_coding
:
:
PacketBuffer
:
:
InsertResult
result
)
;
ParseGenericDependenciesResult
ParseGenericDependenciesExtension
(
const
RtpPacketReceived
&
rtp_packet
RTPVideoHeader
*
video_header
)
RTC_RUN_ON
(
worker_task_checker_
)
;
void
OnAssembledFrame
(
std
:
:
unique_ptr
<
RtpFrameObject
>
frame
)
RTC_LOCKS_EXCLUDED
(
packet_buffer_lock_
)
;
void
UpdatePacketReceiveTimestamps
(
const
RtpPacketReceived
&
packet
bool
is_keyframe
)
RTC_RUN_ON
(
worker_task_checker_
)
;
const
FieldTrialsView
&
field_trials_
;
FieldTrialBasedConfig
owned_field_trials_
;
Clock
*
const
clock_
;
const
VideoReceiveStreamInterface
:
:
Config
&
config_
;
PacketRouter
*
const
packet_router_
;
ProcessThread
*
const
process_thread_
;
RemoteNtpTimeEstimator
ntp_estimator_
;
RtpHeaderExtensionMap
rtp_header_extensions_
;
FieldTrialOptional
<
int
>
forced_playout_delay_max_ms_
;
FieldTrialOptional
<
int
>
forced_playout_delay_min_ms_
;
ReceiveStatistics
*
const
rtp_receive_statistics_
;
std
:
:
unique_ptr
<
UlpfecReceiver
>
ulpfec_receiver_
;
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
worker_task_checker_
;
bool
receiving_
RTC_GUARDED_BY
(
worker_task_checker_
)
;
int64_t
last_packet_log_ms_
RTC_GUARDED_BY
(
worker_task_checker_
)
;
const
std
:
:
unique_ptr
<
RtpRtcp
>
rtp_rtcp_
;
OnCompleteFrameCallback
*
complete_frame_callback_
;
KeyFrameRequestSender
*
const
keyframe_request_sender_
;
RtcpFeedbackBuffer
rtcp_feedback_buffer_
;
std
:
:
unique_ptr
<
DEPRECATED_NackModule
>
nack_module_
;
std
:
:
unique_ptr
<
LossNotificationController
>
loss_notification_controller_
;
mutable
Mutex
packet_buffer_lock_
;
video_coding
:
:
PacketBuffer
packet_buffer_
RTC_GUARDED_BY
(
packet_buffer_lock_
)
;
UniqueTimestampCounter
frame_counter_
RTC_GUARDED_BY
(
worker_task_checker_
)
;
SeqNumUnwrapper
<
uint16_t
>
frame_id_unwrapper_
RTC_GUARDED_BY
(
worker_task_checker_
)
;
std
:
:
unique_ptr
<
FrameDependencyStructure
>
video_structure_
RTC_GUARDED_BY
(
worker_task_checker_
)
;
absl
:
:
optional
<
int64_t
>
video_structure_frame_id_
RTC_GUARDED_BY
(
worker_task_checker_
)
;
Mutex
reference_finder_lock_
;
std
:
:
unique_ptr
<
RtpFrameReferenceFinder
>
reference_finder_
RTC_GUARDED_BY
(
reference_finder_lock_
)
;
absl
:
:
optional
<
VideoCodecType
>
current_codec_
;
uint32_t
last_assembled_frame_rtp_timestamp_
;
Mutex
last_seq_num_mutex_
;
std
:
:
map
<
int64_t
uint16_t
>
last_seq_num_for_pic_id_
RTC_GUARDED_BY
(
last_seq_num_mutex_
)
;
video_coding
:
:
H264SpsPpsTracker
tracker_
;
std
:
:
map
<
uint8_t
std
:
:
unique_ptr
<
VideoRtpDepacketizer
>
>
payload_type_map_
;
std
:
:
map
<
uint8_t
std
:
:
map
<
std
:
:
string
std
:
:
string
>
>
pt_codec_params_
;
int16_t
last_payload_type_
=
-
1
;
bool
has_received_frame_
;
std
:
:
vector
<
RtpPacketSinkInterface
*
>
secondary_sinks_
RTC_GUARDED_BY
(
worker_task_checker_
)
;
mutable
Mutex
sync_info_lock_
;
absl
:
:
optional
<
uint32_t
>
last_received_rtp_timestamp_
RTC_GUARDED_BY
(
sync_info_lock_
)
;
absl
:
:
optional
<
uint32_t
>
last_received_keyframe_rtp_timestamp_
RTC_GUARDED_BY
(
sync_info_lock_
)
;
absl
:
:
optional
<
Timestamp
>
last_received_rtp_system_time_
RTC_GUARDED_BY
(
sync_info_lock_
)
;
absl
:
:
optional
<
Timestamp
>
last_received_keyframe_rtp_system_time_
RTC_GUARDED_BY
(
sync_info_lock_
)
;
SequenceChecker
network_tc_
;
std
:
:
unique_ptr
<
BufferedFrameDecryptor
>
buffered_frame_decryptor_
RTC_PT_GUARDED_BY
(
network_tc_
)
;
std
:
:
atomic
<
bool
>
frames_decryptable_
;
absl
:
:
optional
<
ColorSpace
>
last_color_space_
;
AbsoluteCaptureTimeInterpolator
absolute_capture_time_interpolator_
RTC_GUARDED_BY
(
worker_task_checker_
)
;
CaptureClockOffsetUpdater
capture_clock_offset_updater_
RTC_GUARDED_BY
(
worker_task_checker_
)
;
int64_t
last_completed_picture_id_
=
0
;
rtc
:
:
scoped_refptr
<
RtpVideoStreamReceiverFrameTransformerDelegate
>
frame_transformer_delegate_
;
SeqNumUnwrapper
<
uint16_t
>
rtp_seq_num_unwrapper_
RTC_GUARDED_BY
(
packet_buffer_lock_
)
;
std
:
:
map
<
int64_t
RtpPacketInfo
>
packet_infos_
RTC_GUARDED_BY
(
packet_buffer_lock_
)
;
}
;
}
#
endif
