#
ifndef
VIDEO_CONFIG_ENCODER_STREAM_FACTORY_H_
#
define
VIDEO_CONFIG_ENCODER_STREAM_FACTORY_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
call
/
adaptation
/
video_source_restrictions
.
h
"
#
include
"
video
/
config
/
video_encoder_config
.
h
"
namespace
cricket
{
class
EncoderStreamFactory
:
public
webrtc
:
:
VideoEncoderConfig
:
:
VideoStreamFactoryInterface
{
public
:
EncoderStreamFactory
(
const
webrtc
:
:
VideoEncoder
:
:
EncoderInfo
&
encoder_info
absl
:
:
optional
<
webrtc
:
:
VideoSourceRestrictions
>
restrictions
=
absl
:
:
nullopt
)
;
std
:
:
vector
<
webrtc
:
:
VideoStream
>
CreateEncoderStreams
(
const
webrtc
:
:
FieldTrialsView
&
trials
int
width
int
height
const
webrtc
:
:
VideoEncoderConfig
&
encoder_config
)
override
;
private
:
std
:
:
vector
<
webrtc
:
:
VideoStream
>
CreateDefaultVideoStreams
(
int
width
int
height
const
webrtc
:
:
VideoEncoderConfig
&
encoder_config
const
absl
:
:
optional
<
webrtc
:
:
DataRate
>
&
experimental_min_bitrate
)
const
;
std
:
:
vector
<
webrtc
:
:
VideoStream
>
CreateSimulcastOrConferenceModeScreenshareStreams
(
const
webrtc
:
:
FieldTrialsView
&
trials
int
width
int
height
const
webrtc
:
:
VideoEncoderConfig
&
encoder_config
const
absl
:
:
optional
<
webrtc
:
:
DataRate
>
&
experimental_min_bitrate
)
const
;
webrtc
:
:
Resolution
GetLayerResolutionFromRequestedResolution
(
int
in_frame_width
int
in_frame_height
webrtc
:
:
Resolution
requested_resolution
)
const
;
std
:
:
vector
<
webrtc
:
:
Resolution
>
GetStreamResolutions
(
const
webrtc
:
:
FieldTrialsView
&
trials
int
width
int
height
const
webrtc
:
:
VideoEncoderConfig
&
encoder_config
)
const
;
const
int
encoder_info_requested_resolution_alignment_
;
const
absl
:
:
optional
<
webrtc
:
:
VideoSourceRestrictions
>
restrictions_
;
}
;
}
#
endif
