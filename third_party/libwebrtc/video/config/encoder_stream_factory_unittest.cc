#
include
"
video
/
config
/
encoder_stream_factory
.
h
"
#
include
"
call
/
adaptation
/
video_source_restrictions
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
using
cricket
:
:
EncoderStreamFactory
;
constexpr
int
kMaxQp
=
48
;
namespace
{
std
:
:
vector
<
Resolution
>
GetStreamResolutions
(
const
std
:
:
vector
<
VideoStream
>
&
streams
)
{
std
:
:
vector
<
Resolution
>
res
;
for
(
const
auto
&
s
:
streams
)
{
if
(
s
.
active
)
{
res
.
push_back
(
{
rtc
:
:
checked_cast
<
int
>
(
s
.
width
)
rtc
:
:
checked_cast
<
int
>
(
s
.
height
)
}
)
;
}
}
return
res
;
}
VideoStream
LayerWithRequestedResolution
(
Resolution
res
)
{
VideoStream
s
;
s
.
requested_resolution
=
res
;
return
s
;
}
}
TEST
(
EncoderStreamFactory
SinglecastRequestedResolution
)
{
VideoEncoder
:
:
EncoderInfo
encoder_info
;
auto
factory
=
rtc
:
:
make_ref_counted
<
EncoderStreamFactory
>
(
"
VP8
"
kMaxQp
false
false
encoder_info
)
;
VideoEncoderConfig
encoder_config
;
encoder_config
.
number_of_streams
=
1
;
encoder_config
.
simulcast_layers
.
push_back
(
LayerWithRequestedResolution
(
{
.
width
=
640
.
height
=
360
}
)
)
;
auto
streams
=
factory
-
>
CreateEncoderStreams
(
1280
720
encoder_config
)
;
EXPECT_EQ
(
streams
[
0
]
.
requested_resolution
(
Resolution
{
.
width
=
640
.
height
=
360
}
)
)
;
EXPECT_EQ
(
GetStreamResolutions
(
streams
)
(
std
:
:
vector
<
Resolution
>
{
{
.
width
=
640
.
height
=
360
}
}
)
)
;
}
TEST
(
EncoderStreamFactory
SinglecastRequestedResolutionWithAdaptation
)
{
VideoSourceRestrictions
restrictions
(
(
320
*
320
)
absl
:
:
nullopt
absl
:
:
nullopt
)
;
VideoEncoder
:
:
EncoderInfo
encoder_info
;
auto
factory
=
rtc
:
:
make_ref_counted
<
EncoderStreamFactory
>
(
"
VP8
"
kMaxQp
false
false
encoder_info
restrictions
)
;
VideoEncoderConfig
encoder_config
;
encoder_config
.
number_of_streams
=
1
;
encoder_config
.
simulcast_layers
.
push_back
(
LayerWithRequestedResolution
(
{
.
width
=
640
.
height
=
360
}
)
)
;
auto
streams
=
factory
-
>
CreateEncoderStreams
(
1280
720
encoder_config
)
;
EXPECT_EQ
(
streams
[
0
]
.
requested_resolution
(
Resolution
{
.
width
=
640
.
height
=
360
}
)
)
;
EXPECT_EQ
(
GetStreamResolutions
(
streams
)
(
std
:
:
vector
<
Resolution
>
{
{
.
width
=
320
.
height
=
180
}
}
)
)
;
}
}
