#
ifndef
VIDEO_ADAPTATION_PIXEL_LIMIT_RESOURCE_H_
#
define
VIDEO_ADAPTATION_PIXEL_LIMIT_RESOURCE_H_
#
include
<
optional
>
#
include
<
string
>
#
include
"
api
/
adaptation
/
resource
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
call
/
adaptation
/
video_stream_input_state_provider
.
h
"
#
include
"
rtc_base
/
task_utils
/
repeating_task
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
PixelLimitResource
:
public
Resource
{
public
:
static
scoped_refptr
<
PixelLimitResource
>
Create
(
TaskQueueBase
*
task_queue
VideoStreamInputStateProvider
*
input_state_provider
)
;
PixelLimitResource
(
TaskQueueBase
*
task_queue
VideoStreamInputStateProvider
*
input_state_provider
)
;
~
PixelLimitResource
(
)
override
;
void
SetMaxPixels
(
int
max_pixels
)
;
std
:
:
string
Name
(
)
const
override
{
return
"
PixelLimitResource
"
;
}
void
SetResourceListener
(
ResourceListener
*
listener
)
override
;
private
:
TaskQueueBase
*
const
task_queue_
;
VideoStreamInputStateProvider
*
const
input_state_provider_
;
std
:
:
optional
<
int
>
max_pixels_
RTC_GUARDED_BY
(
task_queue_
)
;
webrtc
:
:
ResourceListener
*
listener_
RTC_GUARDED_BY
(
task_queue_
)
;
RepeatingTaskHandle
repeating_task_
RTC_GUARDED_BY
(
task_queue_
)
;
}
;
}
#
endif
