#
ifndef
VIDEO_ADAPTATION_QUALITY_RAMPUP_EXPERIMENT_HELPER_H_
#
define
VIDEO_ADAPTATION_QUALITY_RAMPUP_EXPERIMENT_HELPER_H_
#
include
<
memory
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
rtc_base
/
experiments
/
quality_rampup_experiment
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
video
/
adaptation
/
quality_scaler_resource
.
h
"
namespace
webrtc
{
class
QualityRampUpExperimentListener
{
public
:
virtual
~
QualityRampUpExperimentListener
(
)
=
default
;
virtual
void
OnQualityRampUp
(
)
=
0
;
}
;
class
QualityRampUpExperimentHelper
{
public
:
static
std
:
:
unique_ptr
<
QualityRampUpExperimentHelper
>
CreateIfEnabled
(
QualityRampUpExperimentListener
*
experiment_listener
Clock
*
clock
)
;
QualityRampUpExperimentHelper
(
const
QualityRampUpExperimentHelper
&
)
=
delete
;
QualityRampUpExperimentHelper
&
operator
=
(
const
QualityRampUpExperimentHelper
&
)
=
delete
;
void
cpu_adapted
(
bool
cpu_adapted
)
;
void
qp_resolution_adaptations
(
int
qp_adaptations
)
;
void
PerformQualityRampupExperiment
(
rtc
:
:
scoped_refptr
<
QualityScalerResource
>
quality_scaler_resource
DataRate
bandwidth
DataRate
encoder_target_bitrate
DataRate
max_bitrate
int
pixels
)
;
private
:
QualityRampUpExperimentHelper
(
QualityRampUpExperimentListener
*
experiment_listener
Clock
*
clock
QualityRampupExperiment
experiment
)
;
QualityRampUpExperimentListener
*
const
experiment_listener_
;
Clock
*
clock_
;
QualityRampupExperiment
quality_rampup_experiment_
;
bool
cpu_adapted_
;
int
qp_resolution_adaptations_
;
}
;
}
#
endif
