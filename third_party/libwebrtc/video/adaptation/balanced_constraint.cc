#
include
<
string
>
#
include
<
utility
>
#
include
"
rtc_base
/
synchronization
/
sequence_checker
.
h
"
#
include
"
rtc_base
/
task_utils
/
to_queued_task
.
h
"
#
include
"
video
/
adaptation
/
balanced_constraint
.
h
"
namespace
webrtc
{
BalancedConstraint
:
:
BalancedConstraint
(
DegradationPreferenceProvider
*
degradation_preference_provider
)
:
encoder_target_bitrate_bps_
(
absl
:
:
nullopt
)
degradation_preference_provider_
(
degradation_preference_provider
)
{
RTC_DCHECK
(
degradation_preference_provider_
)
;
sequence_checker_
.
Detach
(
)
;
}
void
BalancedConstraint
:
:
OnEncoderTargetBitrateUpdated
(
absl
:
:
optional
<
uint32_t
>
encoder_target_bitrate_bps
)
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
encoder_target_bitrate_bps_
=
std
:
:
move
(
encoder_target_bitrate_bps
)
;
}
bool
BalancedConstraint
:
:
IsAdaptationUpAllowed
(
const
VideoStreamInputState
&
input_state
const
VideoSourceRestrictions
&
restrictions_before
const
VideoSourceRestrictions
&
restrictions_after
)
const
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
if
(
degradation_preference_provider_
-
>
degradation_preference
(
)
=
=
DegradationPreference
:
:
BALANCED
&
&
!
balanced_settings_
.
CanAdaptUp
(
input_state
.
video_codec_type
(
)
input_state
.
frame_size_pixels
(
)
.
value
(
)
encoder_target_bitrate_bps_
.
value_or
(
0
)
)
)
{
return
false
;
}
if
(
DidIncreaseResolution
(
restrictions_before
restrictions_after
)
&
&
!
balanced_settings_
.
CanAdaptUpResolution
(
input_state
.
video_codec_type
(
)
input_state
.
frame_size_pixels
(
)
.
value
(
)
encoder_target_bitrate_bps_
.
value_or
(
0
)
)
)
{
return
false
;
}
return
true
;
}
}
