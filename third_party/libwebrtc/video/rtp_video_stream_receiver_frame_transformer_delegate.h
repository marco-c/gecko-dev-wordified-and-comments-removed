#
ifndef
VIDEO_RTP_VIDEO_STREAM_RECEIVER_FRAME_TRANSFORMER_DELEGATE_H_
#
define
VIDEO_RTP_VIDEO_STREAM_RECEIVER_FRAME_TRANSFORMER_DELEGATE_H_
#
include
<
memory
>
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
modules
/
video_coding
/
frame_object
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
class
RtpVideoFrameReceiver
{
public
:
virtual
void
ManageFrame
(
std
:
:
unique_ptr
<
video_coding
:
:
RtpFrameObject
>
frame
)
=
0
;
protected
:
virtual
~
RtpVideoFrameReceiver
(
)
=
default
;
}
;
class
RtpVideoStreamReceiverFrameTransformerDelegate
:
public
TransformedFrameCallback
{
public
:
RtpVideoStreamReceiverFrameTransformerDelegate
(
RtpVideoFrameReceiver
*
receiver
rtc
:
:
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
rtc
:
:
Thread
*
network_thread
uint32_t
ssrc
)
;
void
Init
(
)
;
void
Reset
(
)
;
void
TransformFrame
(
std
:
:
unique_ptr
<
video_coding
:
:
RtpFrameObject
>
frame
)
;
void
OnTransformedFrame
(
std
:
:
unique_ptr
<
TransformableFrameInterface
>
frame
)
override
;
void
ManageFrame
(
std
:
:
unique_ptr
<
TransformableFrameInterface
>
frame
)
;
protected
:
~
RtpVideoStreamReceiverFrameTransformerDelegate
(
)
override
=
default
;
private
:
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
network_sequence_checker_
;
RtpVideoFrameReceiver
*
receiver_
RTC_GUARDED_BY
(
network_sequence_checker_
)
;
rtc
:
:
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer_
RTC_GUARDED_BY
(
network_sequence_checker_
)
;
rtc
:
:
Thread
*
const
network_thread_
;
const
uint32_t
ssrc_
;
}
;
}
#
endif
