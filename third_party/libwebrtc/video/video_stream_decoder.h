#
ifndef
VIDEO_VIDEO_STREAM_DECODER_H_
#
define
VIDEO_VIDEO_STREAM_DECODER_H_
#
include
<
list
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
include
/
remote_bitrate_estimator
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_coding_defines
.
h
"
#
include
"
rtc_base
/
platform_thread
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
namespace
webrtc
{
class
ReceiveStatisticsProxy
;
class
VideoReceiver2
;
class
VideoStreamDecoder
:
public
VCMReceiveCallback
{
public
:
VideoStreamDecoder
(
VideoReceiver2
*
video_receiver
ReceiveStatisticsProxy
*
receive_statistics_proxy
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
incoming_video_stream
)
;
~
VideoStreamDecoder
(
)
override
;
int32_t
FrameToRender
(
VideoFrame
&
video_frame
absl
:
:
optional
<
uint8_t
>
qp
int32_t
decode_time_ms
VideoContentType
content_type
)
override
;
void
OnDroppedFrames
(
uint32_t
frames_dropped
)
override
;
void
OnIncomingPayloadType
(
int
payload_type
)
override
;
void
OnDecoderImplementationName
(
const
char
*
implementation_name
)
override
;
void
RegisterReceiveStatisticsProxy
(
ReceiveStatisticsProxy
*
receive_statistics_proxy
)
;
private
:
Mutex
mutex_
;
VideoReceiver2
*
const
video_receiver_
;
ReceiveStatisticsProxy
*
const
receive_stats_callback_
;
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
const
incoming_video_stream_
;
}
;
}
#
endif
