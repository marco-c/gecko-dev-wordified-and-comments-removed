#
ifndef
VIDEO_ENCODER_BITRATE_ADJUSTER_H_
#
define
VIDEO_ENCODER_BITRATE_ADJUSTER_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
"
absl
/
container
/
inlined_vector
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
video
/
video_bitrate_allocation
.
h
"
#
include
"
api
/
video
/
video_codec_constants
.
h
"
#
include
"
api
/
video
/
video_codec_type
.
h
"
#
include
"
api
/
video_codecs
/
video_codec
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
video
/
encoder_overshoot_detector
.
h
"
#
include
"
video
/
rate_utilization_tracker
.
h
"
namespace
webrtc
{
class
EncoderBitrateAdjuster
{
public
:
static
constexpr
TimeDelta
kWindowSize
=
TimeDelta
:
:
Seconds
(
3
)
;
static
constexpr
size_t
kMinFramesSinceLayoutChange
=
30
;
static
constexpr
double
kDefaultUtilizationFactor
=
1
.
2
;
EncoderBitrateAdjuster
(
const
VideoCodec
&
codec_settings
const
FieldTrialsView
&
field_trials
Clock
&
clock
)
;
~
EncoderBitrateAdjuster
(
)
;
VideoBitrateAllocation
AdjustRateAllocation
(
const
VideoEncoder
:
:
RateControlParameters
&
rates
)
;
void
OnEncoderInfo
(
const
VideoEncoder
:
:
EncoderInfo
&
encoder_info
)
;
void
OnEncodedFrame
(
DataSize
size
int
stream_index
int
temporal_index
)
;
void
Reset
(
)
;
private
:
const
bool
utilize_bandwidth_headroom_
;
const
bool
use_newfangled_headroom_adjustment_
;
VideoEncoder
:
:
RateControlParameters
current_rate_control_parameters_
;
absl
:
:
InlinedVector
<
uint8_t
kMaxTemporalStreams
>
current_fps_allocation_
[
kMaxSpatialLayers
]
;
size_t
frames_since_layout_change_
;
std
:
:
unique_ptr
<
EncoderOvershootDetector
>
overshoot_detectors_
[
kMaxSpatialLayers
]
[
kMaxTemporalStreams
]
;
std
:
:
unique_ptr
<
RateUtilizationTracker
>
media_rate_trackers_
[
kMaxSpatialLayers
]
;
uint32_t
min_bitrates_bps_
[
kMaxSpatialLayers
]
;
VideoCodecType
codec_
;
VideoCodecMode
codec_mode_
;
Clock
&
clock_
;
}
;
}
#
endif
