#
ifndef
VIDEO_RTP_STREAMS_SYNCHRONIZER_H_
#
define
VIDEO_RTP_STREAMS_SYNCHRONIZER_H_
#
include
<
memory
>
#
include
"
modules
/
include
/
module
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
synchronization
/
sequence_checker
.
h
"
#
include
"
video
/
stream_synchronization
.
h
"
namespace
webrtc
{
class
Syncable
;
class
RtpStreamsSynchronizer
:
public
Module
{
public
:
explicit
RtpStreamsSynchronizer
(
Syncable
*
syncable_video
)
;
~
RtpStreamsSynchronizer
(
)
override
;
void
ConfigureSync
(
Syncable
*
syncable_audio
)
;
int64_t
TimeUntilNextProcess
(
)
override
;
void
Process
(
)
override
;
bool
GetStreamSyncOffsetInMs
(
uint32_t
rtp_timestamp
int64_t
render_time_ms
int64_t
*
video_playout_ntp_ms
int64_t
*
stream_offset_ms
double
*
estimated_freq_khz
)
const
;
private
:
Syncable
*
syncable_video_
;
mutable
Mutex
mutex_
;
Syncable
*
syncable_audio_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
unique_ptr
<
StreamSynchronization
>
sync_
RTC_GUARDED_BY
(
mutex_
)
;
StreamSynchronization
:
:
Measurements
audio_measurement_
RTC_GUARDED_BY
(
mutex_
)
;
StreamSynchronization
:
:
Measurements
video_measurement_
RTC_GUARDED_BY
(
mutex_
)
;
SequenceChecker
process_thread_checker_
;
int64_t
last_sync_time_
RTC_GUARDED_BY
(
&
process_thread_checker_
)
;
int64_t
last_stats_log_ms_
RTC_GUARDED_BY
(
&
process_thread_checker_
)
;
}
;
}
#
endif
