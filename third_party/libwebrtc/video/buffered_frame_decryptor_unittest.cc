#
include
"
video
/
buffered_frame_decryptor
.
h
"
#
include
<
map
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
test
/
mock_frame_decryptor
.
h
"
#
include
"
modules
/
video_coding
/
packet_buffer
.
h
"
#
include
"
rtc_base
/
ref_counted_object
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
scoped_key_value_config
.
h
"
using
:
:
testing
:
:
Return
;
namespace
webrtc
{
namespace
{
FrameDecryptorInterface
:
:
Result
DecryptSuccess
(
)
{
return
FrameDecryptorInterface
:
:
Result
(
FrameDecryptorInterface
:
:
Status
:
:
kOk
0
)
;
}
FrameDecryptorInterface
:
:
Result
DecryptFail
(
)
{
return
FrameDecryptorInterface
:
:
Result
(
FrameDecryptorInterface
:
:
Status
:
:
kFailedToDecrypt
0
)
;
}
}
class
BufferedFrameDecryptorTest
:
public
:
:
testing
:
:
Test
public
OnDecryptedFrameCallback
public
OnDecryptionStatusChangeCallback
{
public
:
void
OnDecryptedFrame
(
std
:
:
unique_ptr
<
RtpFrameObject
>
frame
)
override
{
decrypted_frame_call_count_
+
+
;
}
void
OnDecryptionStatusChange
(
FrameDecryptorInterface
:
:
Status
status
)
{
+
+
decryption_status_change_count_
;
}
std
:
:
unique_ptr
<
RtpFrameObject
>
CreateRtpFrameObject
(
bool
key_frame
)
{
seq_num_
+
+
;
RTPVideoHeader
rtp_video_header
;
rtp_video_header
.
generic
.
emplace
(
)
;
return
std
:
:
make_unique
<
RtpFrameObject
>
(
seq_num_
seq_num_
true
0
0
0
0
0
VideoSendTiming
(
)
0
kVideoCodecGeneric
kVideoRotation_0
VideoContentType
:
:
UNSPECIFIED
rtp_video_header
absl
:
:
nullopt
RtpPacketInfos
(
)
EncodedImageBuffer
:
:
Create
(
0
)
)
;
}
protected
:
BufferedFrameDecryptorTest
(
)
{
fake_packet_data_
=
std
:
:
vector
<
uint8_t
>
(
100
)
;
decrypted_frame_call_count_
=
0
;
decryption_status_change_count_
=
0
;
seq_num_
=
0
;
mock_frame_decryptor_
=
rtc
:
:
make_ref_counted
<
MockFrameDecryptor
>
(
)
;
buffered_frame_decryptor_
=
std
:
:
make_unique
<
BufferedFrameDecryptor
>
(
this
this
field_trials_
)
;
buffered_frame_decryptor_
-
>
SetFrameDecryptor
(
mock_frame_decryptor_
)
;
}
static
const
size_t
kMaxStashedFrames
;
test
:
:
ScopedKeyValueConfig
field_trials_
;
std
:
:
vector
<
uint8_t
>
fake_packet_data_
;
rtc
:
:
scoped_refptr
<
MockFrameDecryptor
>
mock_frame_decryptor_
;
std
:
:
unique_ptr
<
BufferedFrameDecryptor
>
buffered_frame_decryptor_
;
size_t
decrypted_frame_call_count_
;
size_t
decryption_status_change_count_
=
0
;
uint16_t
seq_num_
;
}
;
const
size_t
BufferedFrameDecryptorTest
:
:
kMaxStashedFrames
=
24
;
TEST_F
(
BufferedFrameDecryptorTest
CallbackCalledOnSuccessfulDecryption
)
{
EXPECT_CALL
(
*
mock_frame_decryptor_
Decrypt
)
.
Times
(
1
)
.
WillOnce
(
Return
(
DecryptSuccess
(
)
)
)
;
EXPECT_CALL
(
*
mock_frame_decryptor_
GetMaxPlaintextByteSize
)
.
Times
(
1
)
.
WillOnce
(
Return
(
0
)
)
;
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
true
)
)
;
EXPECT_EQ
(
decrypted_frame_call_count_
static_cast
<
size_t
>
(
1
)
)
;
EXPECT_EQ
(
decryption_status_change_count_
static_cast
<
size_t
>
(
1
)
)
;
}
TEST_F
(
BufferedFrameDecryptorTest
CallbackNotCalledOnFailedDecryption
)
{
EXPECT_CALL
(
*
mock_frame_decryptor_
Decrypt
)
.
Times
(
1
)
.
WillOnce
(
Return
(
DecryptFail
(
)
)
)
;
EXPECT_CALL
(
*
mock_frame_decryptor_
GetMaxPlaintextByteSize
)
.
Times
(
1
)
.
WillOnce
(
Return
(
0
)
)
;
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
true
)
)
;
EXPECT_EQ
(
decrypted_frame_call_count_
static_cast
<
size_t
>
(
0
)
)
;
EXPECT_EQ
(
decryption_status_change_count_
static_cast
<
size_t
>
(
1
)
)
;
}
TEST_F
(
BufferedFrameDecryptorTest
DelayedCallbackOnBufferedFrames
)
{
EXPECT_CALL
(
*
mock_frame_decryptor_
Decrypt
)
.
Times
(
3
)
.
WillOnce
(
Return
(
DecryptFail
(
)
)
)
.
WillOnce
(
Return
(
DecryptSuccess
(
)
)
)
.
WillOnce
(
Return
(
DecryptSuccess
(
)
)
)
;
EXPECT_CALL
(
*
mock_frame_decryptor_
GetMaxPlaintextByteSize
)
.
Times
(
3
)
.
WillRepeatedly
(
Return
(
0
)
)
;
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
true
)
)
;
EXPECT_EQ
(
decrypted_frame_call_count_
static_cast
<
size_t
>
(
0
)
)
;
EXPECT_EQ
(
decryption_status_change_count_
static_cast
<
size_t
>
(
1
)
)
;
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
false
)
)
;
EXPECT_EQ
(
decrypted_frame_call_count_
static_cast
<
size_t
>
(
2
)
)
;
EXPECT_EQ
(
decryption_status_change_count_
static_cast
<
size_t
>
(
2
)
)
;
}
TEST_F
(
BufferedFrameDecryptorTest
FTDDiscardedAfterFirstSuccess
)
{
EXPECT_CALL
(
*
mock_frame_decryptor_
Decrypt
)
.
Times
(
4
)
.
WillOnce
(
Return
(
DecryptFail
(
)
)
)
.
WillOnce
(
Return
(
DecryptSuccess
(
)
)
)
.
WillOnce
(
Return
(
DecryptSuccess
(
)
)
)
.
WillOnce
(
Return
(
DecryptFail
(
)
)
)
;
EXPECT_CALL
(
*
mock_frame_decryptor_
GetMaxPlaintextByteSize
)
.
Times
(
4
)
.
WillRepeatedly
(
Return
(
0
)
)
;
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
true
)
)
;
EXPECT_EQ
(
decrypted_frame_call_count_
static_cast
<
size_t
>
(
0
)
)
;
EXPECT_EQ
(
decryption_status_change_count_
static_cast
<
size_t
>
(
1
)
)
;
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
false
)
)
;
EXPECT_EQ
(
decrypted_frame_call_count_
static_cast
<
size_t
>
(
2
)
)
;
EXPECT_EQ
(
decryption_status_change_count_
static_cast
<
size_t
>
(
2
)
)
;
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
true
)
)
;
EXPECT_EQ
(
decrypted_frame_call_count_
static_cast
<
size_t
>
(
2
)
)
;
EXPECT_EQ
(
decryption_status_change_count_
static_cast
<
size_t
>
(
3
)
)
;
}
TEST_F
(
BufferedFrameDecryptorTest
MaximumNumberOfFramesStored
)
{
const
size_t
failed_to_decrypt_count
=
kMaxStashedFrames
*
2
;
EXPECT_CALL
(
*
mock_frame_decryptor_
Decrypt
)
.
Times
(
failed_to_decrypt_count
)
.
WillRepeatedly
(
Return
(
DecryptFail
(
)
)
)
;
EXPECT_CALL
(
*
mock_frame_decryptor_
GetMaxPlaintextByteSize
)
.
WillRepeatedly
(
Return
(
0
)
)
;
for
(
size_t
i
=
0
;
i
<
failed_to_decrypt_count
;
+
+
i
)
{
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
true
)
)
;
}
EXPECT_EQ
(
decrypted_frame_call_count_
static_cast
<
size_t
>
(
0
)
)
;
EXPECT_EQ
(
decryption_status_change_count_
static_cast
<
size_t
>
(
1
)
)
;
EXPECT_CALL
(
*
mock_frame_decryptor_
Decrypt
)
.
Times
(
kMaxStashedFrames
+
1
)
.
WillRepeatedly
(
Return
(
DecryptSuccess
(
)
)
)
;
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
true
)
)
;
EXPECT_EQ
(
decrypted_frame_call_count_
kMaxStashedFrames
+
1
)
;
EXPECT_EQ
(
decryption_status_change_count_
static_cast
<
size_t
>
(
2
)
)
;
}
TEST_F
(
BufferedFrameDecryptorTest
FramesStoredIfDecryptorNull
)
{
buffered_frame_decryptor_
-
>
SetFrameDecryptor
(
nullptr
)
;
for
(
size_t
i
=
0
;
i
<
(
2
*
kMaxStashedFrames
)
;
+
+
i
)
{
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
true
)
)
;
}
EXPECT_CALL
(
*
mock_frame_decryptor_
Decrypt
)
.
Times
(
kMaxStashedFrames
+
1
)
.
WillRepeatedly
(
Return
(
DecryptSuccess
(
)
)
)
;
EXPECT_CALL
(
*
mock_frame_decryptor_
GetMaxPlaintextByteSize
)
.
WillRepeatedly
(
Return
(
0
)
)
;
buffered_frame_decryptor_
-
>
SetFrameDecryptor
(
mock_frame_decryptor_
)
;
buffered_frame_decryptor_
-
>
ManageEncryptedFrame
(
CreateRtpFrameObject
(
true
)
)
;
EXPECT_EQ
(
decrypted_frame_call_count_
kMaxStashedFrames
+
1
)
;
}
}
