#
include
"
video
/
rate_utilization_tracker
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
using
:
:
testing
:
:
Not
;
constexpr
int
kDefaultMaxDataPoints
=
10
;
constexpr
TimeDelta
kDefaultTimeWindow
=
TimeDelta
:
:
Seconds
(
1
)
;
constexpr
Timestamp
kStartTime
=
Timestamp
:
:
Millis
(
9876654
)
;
constexpr
double
kAllowedError
=
0
.
002
;
MATCHER_P
(
PrettyCloseTo
expected
"
"
)
{
return
arg
&
&
std
:
:
abs
(
*
arg
-
expected
)
<
kAllowedError
;
}
TEST
(
RateUtilizationTrackerTest
NoDataInNoDataOut
)
{
RateUtilizationTracker
tracker
(
kDefaultMaxDataPoints
kDefaultTimeWindow
)
;
EXPECT_FALSE
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
)
.
has_value
(
)
)
;
}
TEST
(
RateUtilizationTrackerTest
NoUtilizationWithoutDataPoints
)
{
RateUtilizationTracker
tracker
(
kDefaultMaxDataPoints
kDefaultTimeWindow
)
;
tracker
.
OnDataRateChanged
(
DataRate
:
:
KilobitsPerSec
(
100
)
kStartTime
)
;
EXPECT_FALSE
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
)
.
has_value
(
)
)
;
}
TEST
(
RateUtilizationTrackerTest
NoUtilizationWithoutRateUpdates
)
{
RateUtilizationTracker
tracker
(
kDefaultMaxDataPoints
kDefaultTimeWindow
)
;
tracker
.
OnDataProduced
(
DataSize
:
:
Bytes
(
100
)
kStartTime
)
;
EXPECT_FALSE
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
)
.
has_value
(
)
)
;
}
TEST
(
RateUtilizationTrackerTest
SingleDataPoint
)
{
RateUtilizationTracker
tracker
(
kDefaultMaxDataPoints
kDefaultTimeWindow
)
;
constexpr
TimeDelta
kFrameInterval
=
TimeDelta
:
:
Seconds
(
1
)
/
33
;
constexpr
DataRate
kTargetRate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
constexpr
DataSize
kIdealFrameSize
=
kTargetRate
*
kFrameInterval
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
)
PrettyCloseTo
(
1
.
0
)
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
kFrameInterval
)
PrettyCloseTo
(
1
.
0
)
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
2
*
kFrameInterval
)
PrettyCloseTo
(
0
.
5
)
)
;
}
TEST
(
RateUtilizationTrackerTest
TwoDataPoints
)
{
RateUtilizationTracker
tracker
(
kDefaultMaxDataPoints
kDefaultTimeWindow
)
;
constexpr
TimeDelta
kFrameInterval
=
TimeDelta
:
:
Seconds
(
1
)
/
33
;
constexpr
DataRate
kTargetRate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
constexpr
DataSize
kIdealFrameSize
=
kTargetRate
*
kFrameInterval
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
+
kFrameInterval
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
2
*
kFrameInterval
)
PrettyCloseTo
(
1
.
0
)
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
3
*
kFrameInterval
)
PrettyCloseTo
(
2
.
0
/
3
.
0
)
)
;
}
TEST
(
RateUtilizationTrackerTest
TwoDataPointsConsistentOveruse
)
{
RateUtilizationTracker
tracker
(
kDefaultMaxDataPoints
kDefaultTimeWindow
)
;
constexpr
TimeDelta
kFrameInterval
=
TimeDelta
:
:
Seconds
(
1
)
/
33
;
constexpr
DataRate
kTargetRate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
constexpr
DataSize
kIdealFrameSize
=
kTargetRate
*
kFrameInterval
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
*
2
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
*
2
kStartTime
+
kFrameInterval
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
2
*
kFrameInterval
)
PrettyCloseTo
(
4
.
0
/
3
.
0
)
)
;
}
TEST
(
RateUtilizationTrackerTest
OveruseWithFrameDrop
)
{
RateUtilizationTracker
tracker
(
kDefaultMaxDataPoints
kDefaultTimeWindow
)
;
constexpr
TimeDelta
kFrameInterval
=
TimeDelta
:
:
Seconds
(
1
)
/
33
;
constexpr
DataRate
kTargetRate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
constexpr
DataSize
kIdealFrameSize
=
kTargetRate
*
kFrameInterval
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
*
2
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
+
2
*
kFrameInterval
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
3
*
kFrameInterval
)
PrettyCloseTo
(
1
.
0
)
)
;
}
TEST
(
RateUtilizationTrackerTest
VaryingRate
)
{
RateUtilizationTracker
tracker
(
kDefaultMaxDataPoints
kDefaultTimeWindow
)
;
constexpr
TimeDelta
kFrameInterval
=
TimeDelta
:
:
Seconds
(
1
)
/
33
;
constexpr
DataRate
kTargetRate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
constexpr
DataSize
kIdealFrameSize
=
kTargetRate
*
kFrameInterval
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
)
;
tracker
.
OnDataRateChanged
(
kTargetRate
*
2
kStartTime
+
kFrameInterval
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
*
2
kStartTime
+
kFrameInterval
)
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
+
2
*
kFrameInterval
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
+
2
*
kFrameInterval
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
3
*
kFrameInterval
)
PrettyCloseTo
(
1
.
0
)
)
;
}
TEST
(
RateUtilizationTrackerTest
VaryingRateMidFrameInterval
)
{
RateUtilizationTracker
tracker
(
kDefaultMaxDataPoints
kDefaultTimeWindow
)
;
constexpr
TimeDelta
kFrameInterval
=
TimeDelta
:
:
Seconds
(
1
)
/
33
;
constexpr
DataRate
kTargetRate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
constexpr
DataSize
kIdealFrameSize
=
kTargetRate
*
kFrameInterval
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
*
(
3
.
0
/
2
.
0
)
kStartTime
)
;
tracker
.
OnDataRateChanged
(
kTargetRate
*
2
kStartTime
+
kFrameInterval
/
2
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
kFrameInterval
)
PrettyCloseTo
(
1
.
0
)
)
;
}
TEST
(
RateUtilizationTrackerTest
VaryingRateAfterLastDataPoint
)
{
RateUtilizationTracker
tracker
(
kDefaultMaxDataPoints
kDefaultTimeWindow
)
;
constexpr
TimeDelta
kFrameInterval
=
TimeDelta
:
:
Seconds
(
1
)
/
33
;
constexpr
DataRate
kTargetRate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
constexpr
DataSize
kIdealFrameSize
=
kTargetRate
*
kFrameInterval
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
+
TimeDelta
:
:
Micros
(
1
)
)
;
tracker
.
OnDataRateChanged
(
kTargetRate
*
2
kStartTime
+
kFrameInterval
/
2
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
kFrameInterval
*
(
2
.
0
/
3
.
0
)
)
PrettyCloseTo
(
1
.
0
)
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
kFrameInterval
*
(
2
.
3
/
3
.
0
)
)
Not
(
PrettyCloseTo
(
1
.
0
)
)
)
;
}
TEST
(
RateUtilizationTrackerTest
DataPointLimit
)
{
RateUtilizationTracker
tracker
(
2
kDefaultTimeWindow
)
;
constexpr
TimeDelta
kFrameInterval
=
TimeDelta
:
:
Seconds
(
1
)
/
33
;
constexpr
DataRate
kTargetRate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
constexpr
DataSize
kIdealFrameSize
=
kTargetRate
*
kFrameInterval
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
*
2
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
*
2
kStartTime
+
1
*
kFrameInterval
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
1
*
kFrameInterval
)
Not
(
PrettyCloseTo
(
1
.
0
)
)
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
+
2
*
kFrameInterval
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
+
3
*
kFrameInterval
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
3
*
kFrameInterval
)
PrettyCloseTo
(
1
.
0
)
)
;
}
TEST
(
RateUtilizationTrackerTest
WindowSizeLimit
)
{
constexpr
TimeDelta
kFrameInterval
=
TimeDelta
:
:
Seconds
(
1
)
/
33
;
constexpr
DataRate
kTargetRate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
constexpr
DataSize
kIdealFrameSize
=
kTargetRate
*
kFrameInterval
;
RateUtilizationTracker
tracker
(
4
2
*
kFrameInterval
-
TimeDelta
:
:
Millis
(
1
)
)
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
*
2
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
*
2
kStartTime
+
1
*
kFrameInterval
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
1
*
kFrameInterval
)
Not
(
PrettyCloseTo
(
1
.
0
)
)
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
+
2
*
kFrameInterval
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
+
3
*
kFrameInterval
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
3
*
kFrameInterval
)
PrettyCloseTo
(
1
.
0
)
)
;
}
TEST
(
RateUtilizationTrackerTest
EqualTimestampsTreatedAtSameDataPoint
)
{
RateUtilizationTracker
tracker
(
2
kDefaultTimeWindow
)
;
constexpr
TimeDelta
kFrameInterval
=
TimeDelta
:
:
Seconds
(
1
)
/
33
;
constexpr
DataRate
kTargetRate
=
DataRate
:
:
KilobitsPerSec
(
100
)
;
constexpr
DataSize
kIdealFrameSize
=
kTargetRate
*
kFrameInterval
;
tracker
.
OnDataRateChanged
(
kTargetRate
kStartTime
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
)
PrettyCloseTo
(
1
.
0
)
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
+
(
kFrameInterval
*
2
)
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
(
kFrameInterval
*
2
)
)
PrettyCloseTo
(
2
.
0
/
3
.
0
)
)
;
tracker
.
OnDataProduced
(
kIdealFrameSize
kStartTime
+
(
kFrameInterval
*
2
)
)
;
EXPECT_THAT
(
tracker
.
GetRateUtilizationFactor
(
kStartTime
+
(
kFrameInterval
*
2
)
)
PrettyCloseTo
(
3
.
0
/
4
.
0
)
)
;
}
}
}
