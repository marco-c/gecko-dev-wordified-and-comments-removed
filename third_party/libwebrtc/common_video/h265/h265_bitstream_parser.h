#
ifndef
COMMON_VIDEO_H265_H265_BITSTREAM_PARSER_H_
#
define
COMMON_VIDEO_H265_H265_BITSTREAM_PARSER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
video_codecs
/
bitstream_parser
.
h
"
#
include
"
common_video
/
h265
/
h265_pps_parser
.
h
"
#
include
"
common_video
/
h265
/
h265_sps_parser
.
h
"
#
include
"
common_video
/
h265
/
h265_vps_parser
.
h
"
#
include
"
rtc_base
/
containers
/
flat_map
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
H265BitstreamParser
:
public
BitstreamParser
{
public
:
H265BitstreamParser
(
)
;
~
H265BitstreamParser
(
)
override
;
void
ParseBitstream
(
rtc
:
:
ArrayView
<
const
uint8_t
>
bitstream
)
override
;
std
:
:
optional
<
int
>
GetLastSliceQp
(
)
const
override
;
std
:
:
optional
<
uint32_t
>
GetLastSlicePpsId
(
)
const
;
static
std
:
:
optional
<
uint32_t
>
ParsePpsIdFromSliceSegmentLayerRbsp
(
rtc
:
:
ArrayView
<
const
uint8_t
>
data
uint8_t
nalu_type
)
;
protected
:
enum
Result
{
kOk
kInvalidStream
kUnsupportedStream
}
;
void
ParseSlice
(
rtc
:
:
ArrayView
<
const
uint8_t
>
slice
)
;
Result
ParseNonParameterSetNalu
(
rtc
:
:
ArrayView
<
const
uint8_t
>
source
uint8_t
nalu_type
)
;
const
H265PpsParser
:
:
PpsState
*
GetPPS
(
uint32_t
id
)
const
;
const
H265SpsParser
:
:
SpsState
*
GetSPS
(
uint32_t
id
)
const
;
flat_map
<
uint32_t
H265VpsParser
:
:
VpsState
>
vps_
;
flat_map
<
uint32_t
H265SpsParser
:
:
SpsState
>
sps_
;
flat_map
<
uint32_t
H265PpsParser
:
:
PpsState
>
pps_
;
std
:
:
optional
<
int32_t
>
last_slice_qp_delta_
;
std
:
:
optional
<
uint32_t
>
last_slice_pps_id_
;
}
;
}
#
endif
