#
include
"
common_video
/
h265
/
h265_sps_parser
.
h
"
#
include
"
common_video
/
h265
/
h265_common
.
h
"
#
include
"
rtc_base
/
arraysize
.
h
"
#
include
"
rtc_base
/
bit_buffer
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
static
constexpr
size_t
kSpsBufferMaxSize
=
256
;
void
WriteSps
(
uint16_t
width
uint16_t
height
int
id
uint32_t
max_num_sublayer_minus1
bool
sub_layer_ordering_info_present_flag
bool
long_term_ref_pics_present_flag
rtc
:
:
Buffer
*
out_buffer
)
{
uint8_t
rbsp
[
kSpsBufferMaxSize
]
=
{
0
}
;
rtc
:
:
BitBufferWriter
writer
(
rbsp
kSpsBufferMaxSize
)
;
writer
.
WriteBits
(
0
4
)
;
writer
.
WriteBits
(
max_num_sublayer_minus1
3
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
2
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
1
5
)
;
writer
.
WriteBits
(
0
32
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
7
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
35
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
93
8
)
;
std
:
:
vector
<
uint32_t
>
sub_layer_profile_present_flags
;
std
:
:
vector
<
uint32_t
>
sub_layer_level_present_flags
;
for
(
uint32_t
i
=
0
;
i
<
max_num_sublayer_minus1
;
i
+
+
)
{
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
1
1
)
;
sub_layer_profile_present_flags
.
push_back
(
1
)
;
sub_layer_level_present_flags
.
push_back
(
1
)
;
}
if
(
max_num_sublayer_minus1
>
0
)
{
for
(
uint32_t
j
=
max_num_sublayer_minus1
;
j
<
8
;
j
+
+
)
{
writer
.
WriteBits
(
0
2
)
;
}
}
for
(
uint32_t
k
=
0
;
k
<
max_num_sublayer_minus1
;
k
+
+
)
{
if
(
sub_layer_profile_present_flags
[
k
]
)
{
writer
.
WriteBits
(
0
8
)
;
writer
.
WriteBits
(
0
32
)
;
writer
.
WriteBits
(
0
4
)
;
writer
.
WriteBits
(
0
43
)
;
writer
.
WriteBits
(
0
1
)
;
}
if
(
sub_layer_level_present_flags
[
k
]
)
{
writer
.
WriteBits
(
0
8
)
;
}
}
writer
.
WriteExponentialGolomb
(
id
)
;
writer
.
WriteExponentialGolomb
(
2
)
;
if
(
width
%
8
!
=
0
|
|
height
%
8
!
=
0
)
{
int
width_delta
=
8
-
width
%
8
;
int
height_delta
=
8
-
height
%
8
;
if
(
width_delta
!
=
8
)
{
writer
.
WriteExponentialGolomb
(
width
+
width_delta
)
;
}
else
{
writer
.
WriteExponentialGolomb
(
width
)
;
}
if
(
height_delta
!
=
8
)
{
writer
.
WriteExponentialGolomb
(
height
+
height_delta
)
;
}
else
{
writer
.
WriteExponentialGolomb
(
height
)
;
}
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteExponentialGolomb
(
(
width
%
8
)
/
2
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
height_delta
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
}
else
{
writer
.
WriteExponentialGolomb
(
width
)
;
writer
.
WriteExponentialGolomb
(
height
)
;
writer
.
WriteBits
(
0
1
)
;
}
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
4
)
;
writer
.
WriteBits
(
sub_layer_ordering_info_present_flag
1
)
;
for
(
uint32_t
i
=
(
sub_layer_ordering_info_present_flag
!
=
0
)
?
0
:
max_num_sublayer_minus1
;
i
<
=
max_num_sublayer_minus1
;
i
+
+
)
{
writer
.
WriteExponentialGolomb
(
4
)
;
writer
.
WriteExponentialGolomb
(
3
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
}
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
3
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
3
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteExponentialGolomb
(
11
)
;
writer
.
WriteExponentialGolomb
(
4
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
7
)
;
writer
.
WriteBits
(
1
1
)
;
for
(
int
i
=
0
;
i
<
2
;
i
+
+
)
{
writer
.
WriteExponentialGolomb
(
1
)
;
writer
.
WriteBits
(
1
1
)
;
}
writer
.
WriteExponentialGolomb
(
3
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteExponentialGolomb
(
3
)
;
for
(
int
i
=
0
;
i
<
2
;
i
+
+
)
{
writer
.
WriteBits
(
1
1
)
;
}
for
(
int
i
=
0
;
i
<
2
;
i
+
+
)
{
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
}
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteExponentialGolomb
(
1
)
;
for
(
int
i
=
0
;
i
<
4
;
i
+
+
)
{
writer
.
WriteBits
(
1
1
)
;
}
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
for
(
int
i
=
0
;
i
<
3
;
i
+
+
)
{
writer
.
WriteBits
(
1
1
)
;
}
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteExponentialGolomb
(
1
)
;
for
(
int
i
=
0
;
i
<
4
;
i
+
+
)
{
writer
.
WriteBits
(
1
1
)
;
}
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteExponentialGolomb
(
2
)
;
for
(
int
i
=
0
;
i
<
4
;
i
+
+
)
{
writer
.
WriteBits
(
1
1
)
;
}
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
for
(
int
i
=
0
;
i
<
3
;
i
+
+
)
{
writer
.
WriteBits
(
1
1
)
;
}
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteExponentialGolomb
(
1
)
;
for
(
int
i
=
0
;
i
<
4
;
i
+
+
)
{
writer
.
WriteBits
(
1
1
)
;
}
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteExponentialGolomb
(
1
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
7
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteExponentialGolomb
(
3
)
;
for
(
int
i
=
0
;
i
<
2
;
i
+
+
)
{
writer
.
WriteBits
(
1
1
)
;
}
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteExponentialGolomb
(
1
)
;
for
(
int
i
=
0
;
i
<
3
;
i
+
+
)
{
writer
.
WriteBits
(
1
1
)
;
}
writer
.
WriteBits
(
long_term_ref_pics_present_flag
1
)
;
if
(
long_term_ref_pics_present_flag
)
{
writer
.
WriteExponentialGolomb
(
1
)
;
writer
.
WriteExponentialGolomb
(
1
)
;
writer
.
WriteBits
(
1
8
)
;
}
writer
.
WriteBits
(
1
1
)
;
size_t
byte_count
bit_offset
;
writer
.
GetCurrentOffset
(
&
byte_count
&
bit_offset
)
;
if
(
bit_offset
>
0
)
{
byte_count
+
+
;
}
out_buffer
-
>
Clear
(
)
;
H265
:
:
WriteRbsp
(
rtc
:
:
MakeArrayView
(
rbsp
byte_count
)
out_buffer
)
;
}
class
H265SpsParserTest
:
public
:
:
testing
:
:
Test
{
public
:
H265SpsParserTest
(
)
{
}
~
H265SpsParserTest
(
)
override
{
}
}
;
TEST_F
(
H265SpsParserTest
TestSampleSPSHdLandscape
)
{
const
uint8_t
buffer
[
]
=
{
0x01
0x04
0x08
0x00
0x00
0x03
0x00
0x9d
0x08
0x00
0x00
0x03
0x00
0x00
0x5d
0xb0
0x02
0x80
0x80
0x2d
0x16
0x59
0x59
0xa4
0x93
0x2b
0x80
0x40
0x00
0x00
0x03
0x00
0x40
0x00
0x00
0x07
0x82
}
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps
.
has_value
(
)
)
;
EXPECT_EQ
(
1280u
sps
-
>
width
)
;
EXPECT_EQ
(
720u
sps
-
>
height
)
;
}
TEST_F
(
H265SpsParserTest
TestSampleSPSVerticalCropLandscape
)
{
const
uint8_t
buffer
[
]
=
{
0x01
0x04
0x08
0x00
0x00
0x03
0x00
0x9d
0x08
0x00
0x00
0x03
0x00
0x00
0x3f
0xb0
0x05
0x02
0x01
0x09
0xf2
0xe5
0x95
0x9a
0x49
0x32
0xb8
0x04
0x00
0x00
0x03
0x00
0x04
0x00
0x00
0x03
0x00
0x78
0x20
}
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps
.
has_value
(
)
)
;
EXPECT_EQ
(
640u
sps
-
>
width
)
;
EXPECT_EQ
(
260u
sps
-
>
height
)
;
}
TEST_F
(
H265SpsParserTest
TestSampleSPSHorizontalAndVerticalCrop
)
{
const
uint8_t
buffer
[
]
=
{
0x01
0x04
0x08
0x00
0x00
0x03
0x00
0x9d
0x08
0x00
0x00
0x03
0x00
0x00
0x3c
0xb0
0x08
0x48
0x04
0x27
0x72
0xe5
0x95
0x9a
0x49
0x32
0xb8
0x04
0x00
0x00
0x03
0x00
0x04
0x00
0x00
0x03
0x00
0x78
0x20
}
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps
.
has_value
(
)
)
;
EXPECT_EQ
(
260u
sps
-
>
width
)
;
EXPECT_EQ
(
260u
sps
-
>
height
)
;
}
TEST_F
(
H265SpsParserTest
TestSyntheticSPSQvgaLandscape
)
{
rtc
:
:
Buffer
buffer
;
WriteSps
(
320u
180u
1
0
1
0
&
buffer
)
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps
.
has_value
(
)
)
;
EXPECT_EQ
(
320u
sps
-
>
width
)
;
EXPECT_EQ
(
180u
sps
-
>
height
)
;
EXPECT_EQ
(
1u
sps
-
>
sps_id
)
;
}
TEST_F
(
H265SpsParserTest
TestSyntheticSPSWeirdResolution
)
{
rtc
:
:
Buffer
buffer
;
WriteSps
(
156u
122u
2
0
1
0
&
buffer
)
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps
.
has_value
(
)
)
;
EXPECT_EQ
(
156u
sps
-
>
width
)
;
EXPECT_EQ
(
122u
sps
-
>
height
)
;
EXPECT_EQ
(
2u
sps
-
>
sps_id
)
;
}
TEST_F
(
H265SpsParserTest
TestLog2MaxSubLayersMinus1
)
{
rtc
:
:
Buffer
buffer
;
WriteSps
(
320u
180u
1
0
1
0
&
buffer
)
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps
.
has_value
(
)
)
;
EXPECT_EQ
(
320u
sps
-
>
width
)
;
EXPECT_EQ
(
180u
sps
-
>
height
)
;
EXPECT_EQ
(
1u
sps
-
>
sps_id
)
;
EXPECT_EQ
(
0u
sps
-
>
sps_max_sub_layers_minus1
)
;
WriteSps
(
320u
180u
1
6
1
0
&
buffer
)
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps1
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps1
.
has_value
(
)
)
;
EXPECT_EQ
(
320u
sps1
-
>
width
)
;
EXPECT_EQ
(
180u
sps1
-
>
height
)
;
EXPECT_EQ
(
1u
sps1
-
>
sps_id
)
;
EXPECT_EQ
(
6u
sps1
-
>
sps_max_sub_layers_minus1
)
;
WriteSps
(
320u
180u
1
7
1
0
&
buffer
)
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
result
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
EXPECT_FALSE
(
result
.
has_value
(
)
)
;
}
TEST_F
(
H265SpsParserTest
TestSubLayerOrderingInfoPresentFlag
)
{
rtc
:
:
Buffer
buffer
;
WriteSps
(
320u
180u
1
6
1
0
&
buffer
)
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps
.
has_value
(
)
)
;
EXPECT_EQ
(
320u
sps
-
>
width
)
;
EXPECT_EQ
(
180u
sps
-
>
height
)
;
EXPECT_EQ
(
1u
sps
-
>
sps_id
)
;
EXPECT_EQ
(
6u
sps
-
>
sps_max_sub_layers_minus1
)
;
WriteSps
(
320u
180u
1
6
1
0
&
buffer
)
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps1
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps1
.
has_value
(
)
)
;
EXPECT_EQ
(
320u
sps1
-
>
width
)
;
EXPECT_EQ
(
180u
sps1
-
>
height
)
;
EXPECT_EQ
(
1u
sps1
-
>
sps_id
)
;
EXPECT_EQ
(
6u
sps1
-
>
sps_max_sub_layers_minus1
)
;
}
TEST_F
(
H265SpsParserTest
TestLongTermRefPicsPresentFlag
)
{
rtc
:
:
Buffer
buffer
;
WriteSps
(
320u
180u
1
0
1
0
&
buffer
)
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps
.
has_value
(
)
)
;
EXPECT_EQ
(
320u
sps
-
>
width
)
;
EXPECT_EQ
(
180u
sps
-
>
height
)
;
EXPECT_EQ
(
1u
sps
-
>
sps_id
)
;
EXPECT_EQ
(
0u
sps
-
>
long_term_ref_pics_present_flag
)
;
WriteSps
(
320u
180u
1
6
1
1
&
buffer
)
;
absl
:
:
optional
<
H265SpsParser
:
:
SpsState
>
sps1
=
H265SpsParser
:
:
ParseSps
(
buffer
)
;
ASSERT_TRUE
(
sps1
.
has_value
(
)
)
;
EXPECT_EQ
(
320u
sps1
-
>
width
)
;
EXPECT_EQ
(
180u
sps1
-
>
height
)
;
EXPECT_EQ
(
1u
sps1
-
>
sps_id
)
;
EXPECT_EQ
(
1u
sps1
-
>
long_term_ref_pics_present_flag
)
;
}
}
