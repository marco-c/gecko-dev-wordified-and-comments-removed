#
ifndef
COMMON_VIDEO_H265_H265_COMMON_H_
#
define
COMMON_VIDEO_H265_H265_COMMON_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
namespace
H265
{
constexpr
size_t
kNaluLongStartSequenceSize
=
4
;
constexpr
size_t
kNaluShortStartSequenceSize
=
3
;
constexpr
size_t
kNaluHeaderSize
=
2
;
enum
NaluType
:
uint8_t
{
kTrailN
=
0
kTrailR
=
1
kTsaN
=
2
kTsaR
=
3
kStsaN
=
4
kStsaR
=
5
kRadlN
=
6
kRadlR
=
7
kBlaWLp
=
16
kBlaWRadl
=
17
kBlaNLp
=
18
kIdrWRadl
=
19
kIdrNLp
=
20
kCra
=
21
kRsvIrapVcl23
=
23
kRsvVcl31
=
31
kVps
=
32
kSps
=
33
kPps
=
34
kAud
=
35
kPrefixSei
=
39
kSuffixSei
=
40
kAp
=
48
kFu
=
49
kPaci
=
50
}
;
enum
SliceType
:
uint8_t
{
kB
=
0
kP
=
1
kI
=
2
}
;
struct
NaluIndex
{
size_t
start_offset
=
0
;
size_t
payload_start_offset
=
0
;
size_t
payload_size
=
0
;
}
;
RTC_EXPORT
std
:
:
vector
<
NaluIndex
>
FindNaluIndices
(
ArrayView
<
const
uint8_t
>
buffer
)
;
inline
std
:
:
vector
<
NaluIndex
>
FindNaluIndices
(
const
uint8_t
*
buffer
size_t
buffer_size
)
{
return
FindNaluIndices
(
MakeArrayView
(
buffer
buffer_size
)
)
;
}
RTC_EXPORT
NaluType
ParseNaluType
(
uint8_t
data
)
;
std
:
:
vector
<
uint8_t
>
ParseRbsp
(
ArrayView
<
const
uint8_t
>
data
)
;
inline
std
:
:
vector
<
uint8_t
>
ParseRbsp
(
const
uint8_t
*
data
size_t
length
)
{
return
ParseRbsp
(
MakeArrayView
(
data
length
)
)
;
}
void
WriteRbsp
(
ArrayView
<
const
uint8_t
>
bytes
Buffer
*
destination
)
;
inline
void
WriteRbsp
(
const
uint8_t
*
bytes
size_t
length
Buffer
*
destination
)
{
WriteRbsp
(
MakeArrayView
(
bytes
length
)
destination
)
;
}
uint32_t
Log2Ceiling
(
uint32_t
value
)
;
}
}
#
endif
