#
ifndef
COMMON_VIDEO_H265_H265_PPS_PARSER_H_
#
define
COMMON_VIDEO_H265_H265_PPS_PARSER_H_
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
common_video
/
h265
/
h265_sps_parser
.
h
"
#
include
"
rtc_base
/
bitstream_reader
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
H265PpsParser
{
public
:
struct
PpsState
{
PpsState
(
)
=
default
;
bool
dependent_slice_segments_enabled_flag
=
false
;
bool
cabac_init_present_flag
=
false
;
bool
output_flag_present_flag
=
false
;
uint32_t
num_extra_slice_header_bits
=
0
;
uint32_t
num_ref_idx_l0_default_active_minus1
=
0
;
uint32_t
num_ref_idx_l1_default_active_minus1
=
0
;
int
init_qp_minus26
=
0
;
bool
weighted_pred_flag
=
false
;
bool
weighted_bipred_flag
=
false
;
bool
lists_modification_present_flag
=
false
;
uint32_t
pps_id
=
0
;
uint32_t
sps_id
=
0
;
int
qp_bd_offset_y
=
0
;
}
;
static
absl
:
:
optional
<
PpsState
>
ParsePps
(
const
uint8_t
*
data
size_t
length
const
H265SpsParser
:
:
SpsState
*
sps
)
;
static
bool
ParsePpsIds
(
const
uint8_t
*
data
size_t
length
uint32_t
*
pps_id
uint32_t
*
sps_id
)
;
protected
:
static
absl
:
:
optional
<
PpsState
>
ParseInternal
(
rtc
:
:
ArrayView
<
const
uint8_t
>
buffer
const
H265SpsParser
:
:
SpsState
*
sps
)
;
static
bool
ParsePpsIdsInternal
(
BitstreamReader
&
reader
uint32_t
&
pps_id
uint32_t
&
sps_id
)
;
}
;
}
#
endif
