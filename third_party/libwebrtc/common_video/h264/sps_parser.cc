#
include
"
common_video
/
h264
/
sps_parser
.
h
"
#
include
<
cstdint
>
#
include
<
vector
>
#
include
"
common_video
/
h264
/
h264_common
.
h
"
#
include
"
rtc_base
/
bit_buffer
.
h
"
namespace
{
typedef
absl
:
:
optional
<
webrtc
:
:
SpsParser
:
:
SpsState
>
OptionalSps
;
#
define
RETURN_EMPTY_ON_FAIL
(
x
)
\
if
(
!
(
x
)
)
{
\
return
OptionalSps
(
)
;
\
}
constexpr
int
kScalingDeltaMin
=
-
128
;
constexpr
int
kScaldingDeltaMax
=
127
;
}
namespace
webrtc
{
SpsParser
:
:
SpsState
:
:
SpsState
(
)
=
default
;
SpsParser
:
:
SpsState
:
:
SpsState
(
const
SpsState
&
)
=
default
;
SpsParser
:
:
SpsState
:
:
~
SpsState
(
)
=
default
;
absl
:
:
optional
<
SpsParser
:
:
SpsState
>
SpsParser
:
:
ParseSps
(
const
uint8_t
*
data
size_t
length
)
{
std
:
:
vector
<
uint8_t
>
unpacked_buffer
=
H264
:
:
ParseRbsp
(
data
length
)
;
rtc
:
:
BitBuffer
bit_buffer
(
unpacked_buffer
.
data
(
)
unpacked_buffer
.
size
(
)
)
;
return
ParseSpsUpToVui
(
&
bit_buffer
)
;
}
absl
:
:
optional
<
SpsParser
:
:
SpsState
>
SpsParser
:
:
ParseSpsUpToVui
(
rtc
:
:
BitBuffer
*
buffer
)
{
SpsState
sps
;
uint32_t
golomb_ignored
;
uint32_t
chroma_format_idc
=
1
;
uint8_t
profile_idc
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadUInt8
(
profile_idc
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ConsumeBytes
(
1
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ConsumeBytes
(
1
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
sps
.
id
)
)
;
sps
.
separate_colour_plane_flag
=
0
;
if
(
profile_idc
=
=
100
|
|
profile_idc
=
=
110
|
|
profile_idc
=
=
122
|
|
profile_idc
=
=
244
|
|
profile_idc
=
=
44
|
|
profile_idc
=
=
83
|
|
profile_idc
=
=
86
|
|
profile_idc
=
=
118
|
|
profile_idc
=
=
128
|
|
profile_idc
=
=
138
|
|
profile_idc
=
=
139
|
|
profile_idc
=
=
134
)
{
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
chroma_format_idc
)
)
;
if
(
chroma_format_idc
=
=
3
)
{
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadBits
(
1
sps
.
separate_colour_plane_flag
)
)
;
}
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
golomb_ignored
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
golomb_ignored
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ConsumeBits
(
1
)
)
;
uint32_t
seq_scaling_matrix_present_flag
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadBits
(
1
seq_scaling_matrix_present_flag
)
)
;
if
(
seq_scaling_matrix_present_flag
)
{
int
scaling_list_count
=
(
chroma_format_idc
=
=
3
?
12
:
8
)
;
for
(
int
i
=
0
;
i
<
scaling_list_count
;
+
+
i
)
{
uint32_t
seq_scaling_list_present_flags
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadBits
(
1
seq_scaling_list_present_flags
)
)
;
if
(
seq_scaling_list_present_flags
!
=
0
)
{
int
last_scale
=
8
;
int
next_scale
=
8
;
int
size_of_scaling_list
=
i
<
6
?
16
:
64
;
for
(
int
j
=
0
;
j
<
size_of_scaling_list
;
j
+
+
)
{
if
(
next_scale
!
=
0
)
{
int32_t
delta_scale
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadSignedExponentialGolomb
(
delta_scale
)
)
;
RETURN_EMPTY_ON_FAIL
(
delta_scale
>
=
kScalingDeltaMin
&
&
delta_scale
<
=
kScaldingDeltaMax
)
;
next_scale
=
(
last_scale
+
delta_scale
+
256
)
%
256
;
}
if
(
next_scale
!
=
0
)
last_scale
=
next_scale
;
}
}
}
}
}
const
uint32_t
kMaxLog2Minus4
=
32
-
4
;
uint32_t
log2_max_frame_num_minus4
;
if
(
!
buffer
-
>
ReadExponentialGolomb
(
log2_max_frame_num_minus4
)
|
|
log2_max_frame_num_minus4
>
kMaxLog2Minus4
)
{
return
OptionalSps
(
)
;
}
sps
.
log2_max_frame_num
=
log2_max_frame_num_minus4
+
4
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
sps
.
pic_order_cnt_type
)
)
;
if
(
sps
.
pic_order_cnt_type
=
=
0
)
{
uint32_t
log2_max_pic_order_cnt_lsb_minus4
;
if
(
!
buffer
-
>
ReadExponentialGolomb
(
log2_max_pic_order_cnt_lsb_minus4
)
|
|
log2_max_pic_order_cnt_lsb_minus4
>
kMaxLog2Minus4
)
{
return
OptionalSps
(
)
;
}
sps
.
log2_max_pic_order_cnt_lsb
=
log2_max_pic_order_cnt_lsb_minus4
+
4
;
}
else
if
(
sps
.
pic_order_cnt_type
=
=
1
)
{
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadBits
(
1
sps
.
delta_pic_order_always_zero_flag
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
golomb_ignored
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
golomb_ignored
)
)
;
uint32_t
num_ref_frames_in_pic_order_cnt_cycle
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
num_ref_frames_in_pic_order_cnt_cycle
)
)
;
for
(
size_t
i
=
0
;
i
<
num_ref_frames_in_pic_order_cnt_cycle
;
+
+
i
)
{
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
golomb_ignored
)
)
;
}
}
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
sps
.
max_num_ref_frames
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ConsumeBits
(
1
)
)
;
uint32_t
pic_width_in_mbs_minus1
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
pic_width_in_mbs_minus1
)
)
;
uint32_t
pic_height_in_map_units_minus1
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
pic_height_in_map_units_minus1
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadBits
(
1
sps
.
frame_mbs_only_flag
)
)
;
if
(
!
sps
.
frame_mbs_only_flag
)
{
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ConsumeBits
(
1
)
)
;
}
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ConsumeBits
(
1
)
)
;
uint32_t
frame_cropping_flag
;
uint32_t
frame_crop_left_offset
=
0
;
uint32_t
frame_crop_right_offset
=
0
;
uint32_t
frame_crop_top_offset
=
0
;
uint32_t
frame_crop_bottom_offset
=
0
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadBits
(
1
frame_cropping_flag
)
)
;
if
(
frame_cropping_flag
)
{
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
frame_crop_left_offset
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
frame_crop_right_offset
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
frame_crop_top_offset
)
)
;
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadExponentialGolomb
(
frame_crop_bottom_offset
)
)
;
}
RETURN_EMPTY_ON_FAIL
(
buffer
-
>
ReadBits
(
1
sps
.
vui_params_present
)
)
;
sps
.
width
=
16
*
(
pic_width_in_mbs_minus1
+
1
)
;
sps
.
height
=
16
*
(
2
-
sps
.
frame_mbs_only_flag
)
*
(
pic_height_in_map_units_minus1
+
1
)
;
if
(
sps
.
separate_colour_plane_flag
|
|
chroma_format_idc
=
=
0
)
{
frame_crop_bottom_offset
*
=
(
2
-
sps
.
frame_mbs_only_flag
)
;
frame_crop_top_offset
*
=
(
2
-
sps
.
frame_mbs_only_flag
)
;
}
else
if
(
!
sps
.
separate_colour_plane_flag
&
&
chroma_format_idc
>
0
)
{
if
(
chroma_format_idc
=
=
1
|
|
chroma_format_idc
=
=
2
)
{
frame_crop_left_offset
*
=
2
;
frame_crop_right_offset
*
=
2
;
}
if
(
chroma_format_idc
=
=
1
)
{
frame_crop_top_offset
*
=
2
;
frame_crop_bottom_offset
*
=
2
;
}
}
sps
.
width
-
=
(
frame_crop_left_offset
+
frame_crop_right_offset
)
;
sps
.
height
-
=
(
frame_crop_top_offset
+
frame_crop_bottom_offset
)
;
return
OptionalSps
(
sps
)
;
}
}
