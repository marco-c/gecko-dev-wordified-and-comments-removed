#
include
"
common_video
/
h264
/
sps_vui_rewriter
.
h
"
#
include
<
cstdint
>
#
include
<
vector
>
#
include
"
api
/
video
/
color_space
.
h
"
#
include
"
common_video
/
h264
/
h264_common
.
h
"
#
include
"
rtc_base
/
bit_buffer
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
enum
SpsMode
{
kNoRewriteRequired_VuiOptimal
kRewriteRequired_NoVui
kRewriteRequired_NoBitstreamRestriction
kRewriteRequired_VuiSuboptimal
}
;
static
const
size_t
kSpsBufferMaxSize
=
256
;
static
const
size_t
kWidth
=
640
;
static
const
size_t
kHeight
=
480
;
static
const
uint8_t
kStartSequence
[
]
=
{
0x00
0x00
0x00
0x01
}
;
static
const
uint8_t
kAud
[
]
=
{
H264
:
:
NaluType
:
:
kAud
0x09
0x10
}
;
static
const
uint8_t
kSpsNaluType
[
]
=
{
H264
:
:
NaluType
:
:
kSps
}
;
static
const
uint8_t
kIdr1
[
]
=
{
H264
:
:
NaluType
:
:
kIdr
0xFF
0x00
0x00
0x04
}
;
static
const
uint8_t
kIdr2
[
]
=
{
H264
:
:
NaluType
:
:
kIdr
0xFF
0x00
0x11
}
;
struct
VuiHeader
{
uint32_t
vui_parameters_present_flag
;
uint32_t
bitstream_restriction_flag
;
uint32_t
max_num_reorder_frames
;
uint32_t
max_dec_frame_buffering
;
uint32_t
video_signal_type_present_flag
;
uint32_t
video_full_range_flag
;
uint32_t
colour_description_present_flag
;
uint8_t
colour_primaries
;
uint8_t
transfer_characteristics
;
uint8_t
matrix_coefficients
;
}
;
static
const
VuiHeader
kVuiNotPresent
=
{
0
0
0
0
0
0
0
0
0
0
}
;
static
const
VuiHeader
kVuiNoBitstreamRestriction
=
{
1
0
0
0
0
0
0
0
0
0
}
;
static
const
VuiHeader
kVuiNoFrameBuffering
=
{
1
1
0
1
0
0
0
0
0
0
}
;
static
const
VuiHeader
kVuiFrameBuffering
=
{
1
1
3
3
0
0
0
0
0
0
}
;
static
const
VuiHeader
kVuiNoVideoSignalType
=
{
1
1
0
1
0
0
0
0
0
0
}
;
static
const
VuiHeader
kVuiLimitedRangeNoColourDescription
=
{
1
1
0
1
1
0
0
0
0
0
}
;
static
const
VuiHeader
kVuiFullRangeNoColourDescription
=
{
1
1
0
1
1
1
0
0
0
0
}
;
static
const
VuiHeader
kVuiLimitedRangeBt709Color
=
{
1
1
0
1
1
0
1
1
1
1
}
;
static
const
webrtc
:
:
ColorSpace
kColorSpaceH264Default
(
ColorSpace
:
:
PrimaryID
:
:
kUnspecified
ColorSpace
:
:
TransferID
:
:
kUnspecified
ColorSpace
:
:
MatrixID
:
:
kUnspecified
ColorSpace
:
:
RangeID
:
:
kLimited
)
;
static
const
webrtc
:
:
ColorSpace
kColorSpacePrimariesBt709
(
ColorSpace
:
:
PrimaryID
:
:
kBT709
ColorSpace
:
:
TransferID
:
:
kUnspecified
ColorSpace
:
:
MatrixID
:
:
kUnspecified
ColorSpace
:
:
RangeID
:
:
kLimited
)
;
static
const
webrtc
:
:
ColorSpace
kColorSpaceTransferBt709
(
ColorSpace
:
:
PrimaryID
:
:
kUnspecified
ColorSpace
:
:
TransferID
:
:
kBT709
ColorSpace
:
:
MatrixID
:
:
kUnspecified
ColorSpace
:
:
RangeID
:
:
kLimited
)
;
static
const
webrtc
:
:
ColorSpace
kColorSpaceMatrixBt709
(
ColorSpace
:
:
PrimaryID
:
:
kUnspecified
ColorSpace
:
:
TransferID
:
:
kUnspecified
ColorSpace
:
:
MatrixID
:
:
kBT709
ColorSpace
:
:
RangeID
:
:
kLimited
)
;
static
const
webrtc
:
:
ColorSpace
kColorSpaceFullRange
(
ColorSpace
:
:
PrimaryID
:
:
kBT709
ColorSpace
:
:
TransferID
:
:
kUnspecified
ColorSpace
:
:
MatrixID
:
:
kUnspecified
ColorSpace
:
:
RangeID
:
:
kFull
)
;
static
const
webrtc
:
:
ColorSpace
kColorSpaceBt709LimitedRange
(
ColorSpace
:
:
PrimaryID
:
:
kBT709
ColorSpace
:
:
TransferID
:
:
kBT709
ColorSpace
:
:
MatrixID
:
:
kBT709
ColorSpace
:
:
RangeID
:
:
kLimited
)
;
}
void
GenerateFakeSps
(
const
VuiHeader
&
vui
Buffer
*
out_buffer
)
{
uint8_t
rbsp
[
kSpsBufferMaxSize
]
=
{
0
}
;
BitBufferWriter
writer
(
rbsp
kSpsBufferMaxSize
)
;
writer
.
WriteUInt8
(
0
)
;
writer
.
WriteUInt8
(
0
)
;
writer
.
WriteUInt8
(
3
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
1
)
;
writer
.
WriteBits
(
0
1
)
;
uint16_t
width_in_mbs_minus1
=
(
kWidth
+
15
)
/
16
-
1
;
uint16_t
height_in_map_units_minus1
=
(
(
kHeight
+
15
)
/
16
-
1
)
/
2
;
writer
.
WriteExponentialGolomb
(
width_in_mbs_minus1
)
;
writer
.
WriteExponentialGolomb
(
height_in_map_units_minus1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteExponentialGolomb
(
(
(
16
-
(
kWidth
%
16
)
)
%
16
)
/
2
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
(
(
16
-
(
kHeight
%
16
)
)
%
16
)
/
2
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteBits
(
vui
.
vui_parameters_present_flag
1
)
;
if
(
vui
.
vui_parameters_present_flag
)
{
writer
.
WriteBits
(
0
2
)
;
writer
.
WriteBits
(
vui
.
video_signal_type_present_flag
1
)
;
if
(
vui
.
video_signal_type_present_flag
)
{
writer
.
WriteBits
(
5
3
)
;
writer
.
WriteBits
(
vui
.
video_full_range_flag
1
)
;
writer
.
WriteBits
(
vui
.
colour_description_present_flag
1
)
;
if
(
vui
.
colour_description_present_flag
)
{
writer
.
WriteUInt8
(
vui
.
colour_primaries
)
;
writer
.
WriteUInt8
(
vui
.
transfer_characteristics
)
;
writer
.
WriteUInt8
(
vui
.
matrix_coefficients
)
;
}
}
writer
.
WriteBits
(
0
5
)
;
writer
.
WriteBits
(
vui
.
bitstream_restriction_flag
1
)
;
if
(
vui
.
bitstream_restriction_flag
)
{
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteExponentialGolomb
(
2
)
;
writer
.
WriteExponentialGolomb
(
1
)
;
writer
.
WriteExponentialGolomb
(
16
)
;
writer
.
WriteExponentialGolomb
(
16
)
;
writer
.
WriteExponentialGolomb
(
vui
.
max_num_reorder_frames
)
;
writer
.
WriteExponentialGolomb
(
vui
.
max_dec_frame_buffering
)
;
}
}
size_t
byte_count
bit_offset
;
writer
.
GetCurrentOffset
(
&
byte_count
&
bit_offset
)
;
if
(
bit_offset
>
0
)
{
byte_count
+
+
;
}
H264
:
:
WriteRbsp
(
MakeArrayView
(
rbsp
byte_count
)
out_buffer
)
;
}
void
TestSps
(
const
VuiHeader
&
vui
const
ColorSpace
*
color_space
SpsVuiRewriter
:
:
ParseResult
expected_parse_result
)
{
LogMessage
:
:
LogToDebug
(
LS_VERBOSE
)
;
Buffer
original_sps
;
GenerateFakeSps
(
vui
&
original_sps
)
;
std
:
:
optional
<
SpsParser
:
:
SpsState
>
sps
;
Buffer
rewritten_sps
;
SpsVuiRewriter
:
:
ParseResult
result
=
SpsVuiRewriter
:
:
ParseAndRewriteSps
(
original_sps
&
sps
color_space
&
rewritten_sps
SpsVuiRewriter
:
:
Direction
:
:
kIncoming
)
;
EXPECT_EQ
(
expected_parse_result
result
)
;
ASSERT_TRUE
(
sps
)
;
EXPECT_EQ
(
sps
-
>
width
kWidth
)
;
EXPECT_EQ
(
sps
-
>
height
kHeight
)
;
if
(
vui
.
vui_parameters_present_flag
)
{
EXPECT_EQ
(
sps
-
>
vui_params_present
1u
)
;
}
if
(
result
=
=
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiRewritten
)
{
Buffer
tmp
;
result
=
SpsVuiRewriter
:
:
ParseAndRewriteSps
(
rewritten_sps
&
sps
nullptr
&
tmp
SpsVuiRewriter
:
:
Direction
:
:
kIncoming
)
;
EXPECT_EQ
(
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiOk
result
)
;
ASSERT_TRUE
(
sps
)
;
EXPECT_EQ
(
sps
-
>
width
kWidth
)
;
EXPECT_EQ
(
sps
-
>
height
kHeight
)
;
EXPECT_EQ
(
sps
-
>
vui_params_present
1u
)
;
}
}
class
SpsVuiRewriterTest
:
public
:
:
testing
:
:
Test
public
:
:
testing
:
:
WithParamInterface
<
:
:
testing
:
:
tuple
<
VuiHeader
const
ColorSpace
*
SpsVuiRewriter
:
:
ParseResult
>
>
{
}
;
TEST_P
(
SpsVuiRewriterTest
RewriteVui
)
{
VuiHeader
vui
=
:
:
testing
:
:
get
<
0
>
(
GetParam
(
)
)
;
const
ColorSpace
*
color_space
=
:
:
testing
:
:
get
<
1
>
(
GetParam
(
)
)
;
SpsVuiRewriter
:
:
ParseResult
expected_parse_result
=
:
:
testing
:
:
get
<
2
>
(
GetParam
(
)
)
;
TestSps
(
vui
color_space
expected_parse_result
)
;
}
INSTANTIATE_TEST_SUITE_P
(
All
SpsVuiRewriterTest
:
:
testing
:
:
Values
(
std
:
:
make_tuple
(
kVuiNoFrameBuffering
nullptr
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiOk
)
std
:
:
make_tuple
(
kVuiNoVideoSignalType
&
kColorSpaceH264Default
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiOk
)
std
:
:
make_tuple
(
kVuiLimitedRangeBt709Color
&
kColorSpaceBt709LimitedRange
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiOk
)
std
:
:
make_tuple
(
kVuiNotPresent
nullptr
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiRewritten
)
std
:
:
make_tuple
(
kVuiNoBitstreamRestriction
nullptr
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiRewritten
)
std
:
:
make_tuple
(
kVuiFrameBuffering
nullptr
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiRewritten
)
std
:
:
make_tuple
(
kVuiLimitedRangeNoColourDescription
&
kColorSpaceFullRange
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiRewritten
)
std
:
:
make_tuple
(
kVuiNoVideoSignalType
&
kColorSpacePrimariesBt709
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiRewritten
)
std
:
:
make_tuple
(
kVuiNoVideoSignalType
&
kColorSpaceTransferBt709
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiRewritten
)
std
:
:
make_tuple
(
kVuiNoVideoSignalType
&
kColorSpaceMatrixBt709
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiRewritten
)
std
:
:
make_tuple
(
kVuiFullRangeNoColourDescription
&
kColorSpaceH264Default
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiRewritten
)
std
:
:
make_tuple
(
kVuiLimitedRangeBt709Color
&
kColorSpaceH264Default
SpsVuiRewriter
:
:
ParseResult
:
:
kVuiRewritten
)
)
)
;
TEST
(
SpsVuiRewriterOutgoingVuiTest
ParseOutgoingBitstreamOptimalVui
)
{
LogMessage
:
:
LogToDebug
(
LS_VERBOSE
)
;
Buffer
optimal_sps
;
GenerateFakeSps
(
kVuiNoFrameBuffering
&
optimal_sps
)
;
Buffer
buffer
;
buffer
.
AppendData
(
kStartSequence
)
;
buffer
.
AppendData
(
optimal_sps
)
;
buffer
.
AppendData
(
kStartSequence
)
;
buffer
.
AppendData
(
kIdr1
)
;
EXPECT_THAT
(
SpsVuiRewriter
:
:
ParseOutgoingBitstreamAndRewrite
(
buffer
nullptr
)
:
:
testing
:
:
ElementsAreArray
(
buffer
)
)
;
}
TEST
(
SpsVuiRewriterOutgoingVuiTest
ParseOutgoingBitstreamNoVui
)
{
LogMessage
:
:
LogToDebug
(
LS_VERBOSE
)
;
Buffer
sps
;
GenerateFakeSps
(
kVuiNotPresent
&
sps
)
;
Buffer
buffer
;
buffer
.
AppendData
(
kStartSequence
)
;
buffer
.
AppendData
(
kIdr1
)
;
buffer
.
AppendData
(
kStartSequence
)
;
buffer
.
AppendData
(
kSpsNaluType
)
;
buffer
.
AppendData
(
sps
)
;
buffer
.
AppendData
(
kStartSequence
)
;
buffer
.
AppendData
(
kIdr2
)
;
Buffer
optimal_sps
;
GenerateFakeSps
(
kVuiNoFrameBuffering
&
optimal_sps
)
;
Buffer
expected_buffer
;
expected_buffer
.
AppendData
(
kStartSequence
)
;
expected_buffer
.
AppendData
(
kIdr1
)
;
expected_buffer
.
AppendData
(
kStartSequence
)
;
expected_buffer
.
AppendData
(
kSpsNaluType
)
;
expected_buffer
.
AppendData
(
optimal_sps
)
;
expected_buffer
.
AppendData
(
kStartSequence
)
;
expected_buffer
.
AppendData
(
kIdr2
)
;
EXPECT_THAT
(
SpsVuiRewriter
:
:
ParseOutgoingBitstreamAndRewrite
(
buffer
nullptr
)
:
:
testing
:
:
ElementsAreArray
(
expected_buffer
)
)
;
}
TEST
(
SpsVuiRewriterOutgoingAudTest
ParseOutgoingBitstreamWithAud
)
{
LogMessage
:
:
LogToDebug
(
LS_VERBOSE
)
;
Buffer
optimal_sps
;
GenerateFakeSps
(
kVuiNoFrameBuffering
&
optimal_sps
)
;
Buffer
buffer
;
buffer
.
AppendData
(
kStartSequence
)
;
buffer
.
AppendData
(
kAud
)
;
buffer
.
AppendData
(
kStartSequence
)
;
buffer
.
AppendData
(
optimal_sps
)
;
buffer
.
AppendData
(
kStartSequence
)
;
buffer
.
AppendData
(
kIdr1
)
;
Buffer
expected_buffer
;
expected_buffer
.
AppendData
(
kStartSequence
)
;
expected_buffer
.
AppendData
(
optimal_sps
)
;
expected_buffer
.
AppendData
(
kStartSequence
)
;
expected_buffer
.
AppendData
(
kIdr1
)
;
EXPECT_THAT
(
SpsVuiRewriter
:
:
ParseOutgoingBitstreamAndRewrite
(
buffer
nullptr
)
:
:
testing
:
:
ElementsAreArray
(
expected_buffer
)
)
;
}
}
