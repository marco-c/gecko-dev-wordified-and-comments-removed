#
include
"
common_video
/
h264
/
sps_parser
.
h
"
#
include
"
common_video
/
h264
/
h264_common
.
h
"
#
include
"
rtc_base
/
arraysize
.
h
"
#
include
"
rtc_base
/
bit_buffer
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
static
const
size_t
kSpsBufferMaxSize
=
256
;
void
GenerateFakeSps
(
uint16_t
width
uint16_t
height
int
id
uint32_t
log2_max_frame_num_minus4
uint32_t
log2_max_pic_order_cnt_lsb_minus4
rtc
:
:
Buffer
*
out_buffer
)
{
uint8_t
rbsp
[
kSpsBufferMaxSize
]
=
{
0
}
;
rtc
:
:
BitBufferWriter
writer
(
rbsp
kSpsBufferMaxSize
)
;
writer
.
WriteUInt8
(
0
)
;
writer
.
WriteUInt8
(
0
)
;
writer
.
WriteUInt8
(
0x3u
)
;
writer
.
WriteExponentialGolomb
(
id
)
;
writer
.
WriteExponentialGolomb
(
log2_max_frame_num_minus4
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
log2_max_pic_order_cnt_lsb_minus4
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteBits
(
0
1
)
;
uint16_t
width_in_mbs_minus1
=
(
width
+
15
)
/
16
-
1
;
uint16_t
height_in_map_units_minus1
=
(
(
height
+
15
)
/
16
-
1
)
/
2
;
writer
.
WriteExponentialGolomb
(
width_in_mbs_minus1
)
;
writer
.
WriteExponentialGolomb
(
height_in_map_units_minus1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteExponentialGolomb
(
(
(
16
-
(
width
%
16
)
)
%
16
)
/
2
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
(
(
16
-
(
height
%
16
)
)
%
16
)
/
2
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteBits
(
0
1
)
;
size_t
byte_count
bit_offset
;
writer
.
GetCurrentOffset
(
&
byte_count
&
bit_offset
)
;
if
(
bit_offset
>
0
)
{
byte_count
+
+
;
}
out_buffer
-
>
Clear
(
)
;
H264
:
:
WriteRbsp
(
rbsp
byte_count
out_buffer
)
;
}
class
H264SpsParserTest
:
public
:
:
testing
:
:
Test
{
public
:
H264SpsParserTest
(
)
{
}
~
H264SpsParserTest
(
)
override
{
}
absl
:
:
optional
<
SpsParser
:
:
SpsState
>
sps_
;
}
;
TEST_F
(
H264SpsParserTest
TestSampleSPSHdLandscape
)
{
const
uint8_t
buffer
[
]
=
{
0x7A
0x00
0x1F
0xBC
0xD9
0x40
0x50
0x05
0xBA
0x10
0x00
0x00
0x03
0x00
0xC0
0x00
0x00
0x2A
0xE0
0xF1
0x83
0x19
0x60
}
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
sps_
=
SpsParser
:
:
ParseSps
(
buffer
arraysize
(
buffer
)
)
)
)
;
EXPECT_EQ
(
1280u
sps_
-
>
width
)
;
EXPECT_EQ
(
720u
sps_
-
>
height
)
;
}
TEST_F
(
H264SpsParserTest
TestSampleSPSVgaLandscape
)
{
const
uint8_t
buffer
[
]
=
{
0x7A
0x00
0x1E
0xBC
0xD9
0x40
0xA0
0x2F
0xF8
0x98
0x40
0x00
0x00
0x03
0x01
0x80
0x00
0x00
0x56
0x83
0xC5
0x8B
0x65
0x80
}
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
sps_
=
SpsParser
:
:
ParseSps
(
buffer
arraysize
(
buffer
)
)
)
)
;
EXPECT_EQ
(
640u
sps_
-
>
width
)
;
EXPECT_EQ
(
360u
sps_
-
>
height
)
;
}
TEST_F
(
H264SpsParserTest
TestSampleSPSWeirdResolution
)
{
const
uint8_t
buffer
[
]
=
{
0x7A
0x00
0x0D
0xBC
0xD9
0x43
0x43
0x3E
0x5E
0x10
0x00
0x00
0x03
0x00
0x60
0x00
0x00
0x15
0xA0
0xF1
0x42
0x99
0x60
}
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
sps_
=
SpsParser
:
:
ParseSps
(
buffer
arraysize
(
buffer
)
)
)
)
;
EXPECT_EQ
(
200u
sps_
-
>
width
)
;
EXPECT_EQ
(
400u
sps_
-
>
height
)
;
}
TEST_F
(
H264SpsParserTest
TestSyntheticSPSQvgaLandscape
)
{
rtc
:
:
Buffer
buffer
;
GenerateFakeSps
(
320u
180u
1
0
0
&
buffer
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
sps_
=
SpsParser
:
:
ParseSps
(
buffer
.
data
(
)
buffer
.
size
(
)
)
)
)
;
EXPECT_EQ
(
320u
sps_
-
>
width
)
;
EXPECT_EQ
(
180u
sps_
-
>
height
)
;
EXPECT_EQ
(
1u
sps_
-
>
id
)
;
}
TEST_F
(
H264SpsParserTest
TestSyntheticSPSWeirdResolution
)
{
rtc
:
:
Buffer
buffer
;
GenerateFakeSps
(
156u
122u
2
0
0
&
buffer
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
sps_
=
SpsParser
:
:
ParseSps
(
buffer
.
data
(
)
buffer
.
size
(
)
)
)
)
;
EXPECT_EQ
(
156u
sps_
-
>
width
)
;
EXPECT_EQ
(
122u
sps_
-
>
height
)
;
EXPECT_EQ
(
2u
sps_
-
>
id
)
;
}
TEST_F
(
H264SpsParserTest
TestSampleSPSWithScalingLists
)
{
const
uint8_t
buffer
[
]
=
{
0x64
0x00
0x2a
0xad
0x84
0x01
0x0c
0x20
0x08
0x61
0x00
0x43
0x08
0x02
0x18
0x40
0x10
0xc2
0x00
0x84
0x3b
0x50
0x3c
0x01
0x13
0xf2
0xcd
0xc0
0x40
0x40
0x50
0x00
0x00
0x00
0x10
0x00
0x00
0x01
0xe8
0x40
}
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
sps_
=
SpsParser
:
:
ParseSps
(
buffer
arraysize
(
buffer
)
)
)
)
;
EXPECT_EQ
(
1920u
sps_
-
>
width
)
;
EXPECT_EQ
(
1080u
sps_
-
>
height
)
;
}
TEST_F
(
H264SpsParserTest
TestLog2MaxFrameNumMinus4
)
{
rtc
:
:
Buffer
buffer
;
GenerateFakeSps
(
320u
180u
1
0
0
&
buffer
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
sps_
=
SpsParser
:
:
ParseSps
(
buffer
.
data
(
)
buffer
.
size
(
)
)
)
)
;
EXPECT_EQ
(
320u
sps_
-
>
width
)
;
EXPECT_EQ
(
180u
sps_
-
>
height
)
;
EXPECT_EQ
(
1u
sps_
-
>
id
)
;
EXPECT_EQ
(
4u
sps_
-
>
log2_max_frame_num
)
;
GenerateFakeSps
(
320u
180u
1
28
0
&
buffer
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
sps_
=
SpsParser
:
:
ParseSps
(
buffer
.
data
(
)
buffer
.
size
(
)
)
)
)
;
EXPECT_EQ
(
320u
sps_
-
>
width
)
;
EXPECT_EQ
(
180u
sps_
-
>
height
)
;
EXPECT_EQ
(
1u
sps_
-
>
id
)
;
EXPECT_EQ
(
32u
sps_
-
>
log2_max_frame_num
)
;
GenerateFakeSps
(
320u
180u
1
29
0
&
buffer
)
;
EXPECT_FALSE
(
SpsParser
:
:
ParseSps
(
buffer
.
data
(
)
buffer
.
size
(
)
)
)
;
}
TEST_F
(
H264SpsParserTest
TestLog2MaxPicOrderCntMinus4
)
{
rtc
:
:
Buffer
buffer
;
GenerateFakeSps
(
320u
180u
1
0
0
&
buffer
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
sps_
=
SpsParser
:
:
ParseSps
(
buffer
.
data
(
)
buffer
.
size
(
)
)
)
)
;
EXPECT_EQ
(
320u
sps_
-
>
width
)
;
EXPECT_EQ
(
180u
sps_
-
>
height
)
;
EXPECT_EQ
(
1u
sps_
-
>
id
)
;
EXPECT_EQ
(
4u
sps_
-
>
log2_max_pic_order_cnt_lsb
)
;
GenerateFakeSps
(
320u
180u
1
0
28
&
buffer
)
;
EXPECT_TRUE
(
static_cast
<
bool
>
(
sps_
=
SpsParser
:
:
ParseSps
(
buffer
.
data
(
)
buffer
.
size
(
)
)
)
)
;
EXPECT_EQ
(
320u
sps_
-
>
width
)
;
EXPECT_EQ
(
180u
sps_
-
>
height
)
;
EXPECT_EQ
(
1u
sps_
-
>
id
)
;
EXPECT_EQ
(
32u
sps_
-
>
log2_max_pic_order_cnt_lsb
)
;
GenerateFakeSps
(
320u
180u
1
0
29
&
buffer
)
;
EXPECT_FALSE
(
SpsParser
:
:
ParseSps
(
buffer
.
data
(
)
buffer
.
size
(
)
)
)
;
}
}
