#
include
"
common_video
/
corruption_detection_converters
.
h
"
#
include
<
optional
>
#
include
"
common_video
/
corruption_detection_message
.
h
"
#
include
"
common_video
/
frame_instrumentation_data
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
int
GetSequenceIndexForMessage
(
int
sequence_index
bool
communicate_upper_bits
)
{
return
communicate_upper_bits
?
(
sequence_index
>
>
7
)
:
(
sequence_index
&
0b0111
'
1111
)
;
}
}
std
:
:
optional
<
CorruptionDetectionMessage
>
ConvertFrameInstrumentationDataToCorruptionDetectionMessage
(
const
FrameInstrumentationData
&
data
)
{
if
(
data
.
sequence_index
<
0
|
|
data
.
sequence_index
>
0b0011
'
1111
'
1111
'
1111
)
{
return
std
:
:
nullopt
;
}
if
(
data
.
sample_values
.
empty
(
)
)
{
return
std
:
:
nullopt
;
}
return
CorruptionDetectionMessage
:
:
Builder
(
)
.
WithSequenceIndex
(
GetSequenceIndexForMessage
(
data
.
sequence_index
data
.
communicate_upper_bits
)
)
.
WithInterpretSequenceIndexAsMostSignificantBits
(
data
.
communicate_upper_bits
)
.
WithStdDev
(
data
.
std_dev
)
.
WithLumaErrorThreshold
(
data
.
luma_error_threshold
)
.
WithChromaErrorThreshold
(
data
.
chroma_error_threshold
)
.
WithSampleValues
(
data
.
sample_values
)
.
Build
(
)
;
}
std
:
:
optional
<
CorruptionDetectionMessage
>
ConvertFrameInstrumentationSyncDataToCorruptionDetectionMessage
(
const
FrameInstrumentationSyncData
&
data
)
{
RTC_DCHECK
(
data
.
communicate_upper_bits
)
<
<
"
FrameInstrumentationSyncData
data
must
always
send
the
upper
bits
.
"
;
if
(
data
.
sequence_index
<
0
|
|
data
.
sequence_index
>
0b0011
'
1111
'
1111
'
1111
)
{
return
std
:
:
nullopt
;
}
return
CorruptionDetectionMessage
:
:
Builder
(
)
.
WithSequenceIndex
(
GetSequenceIndexForMessage
(
data
.
sequence_index
data
.
communicate_upper_bits
)
)
.
WithInterpretSequenceIndexAsMostSignificantBits
(
true
)
.
Build
(
)
;
}
}
