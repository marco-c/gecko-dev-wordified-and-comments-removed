#
include
"
common_video
/
frame_rate_estimator
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
TimeDelta
kDefaultWindow
=
TimeDelta
:
:
Millis
(
1000
)
;
}
class
FrameRateEstimatorTest
:
public
:
:
testing
:
:
Test
{
public
:
FrameRateEstimatorTest
(
)
:
clock_
(
123
)
estimator_
(
kDefaultWindow
)
{
}
protected
:
SimulatedClock
clock_
;
FrameRateEstimator
estimator_
;
}
;
TEST_F
(
FrameRateEstimatorTest
NoEstimateWithLessThanTwoFrames
)
{
EXPECT_FALSE
(
estimator_
.
GetAverageFps
(
)
)
;
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
EXPECT_FALSE
(
estimator_
.
GetAverageFps
(
)
)
;
clock_
.
AdvanceTime
(
TimeDelta
:
:
Millis
(
33
)
)
;
EXPECT_FALSE
(
estimator_
.
GetAverageFps
(
)
)
;
}
TEST_F
(
FrameRateEstimatorTest
NoEstimateWithZeroSpan
)
{
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
EXPECT_FALSE
(
estimator_
.
GetAverageFps
(
)
)
;
}
TEST_F
(
FrameRateEstimatorTest
SingleSpanFps
)
{
const
double
kExpectedFps
=
30
.
0
;
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
clock_
.
AdvanceTime
(
TimeDelta
:
:
Seconds
(
1
)
/
kExpectedFps
)
;
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
EXPECT_NEAR
(
*
estimator_
.
GetAverageFps
(
)
kExpectedFps
0
.
001
)
;
}
TEST_F
(
FrameRateEstimatorTest
AverageFps
)
{
const
double
kLowFps
=
10
.
0
;
const
double
kHighFps
=
30
.
0
;
const
double
kExpectedFps
=
20
.
0
;
const
Timestamp
start_time
=
clock_
.
CurrentTime
(
)
;
while
(
clock_
.
CurrentTime
(
)
-
start_time
<
kDefaultWindow
/
2
)
{
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
clock_
.
AdvanceTime
(
TimeDelta
:
:
Seconds
(
1
)
/
kLowFps
)
;
}
while
(
clock_
.
CurrentTime
(
)
-
start_time
<
kDefaultWindow
)
{
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
clock_
.
AdvanceTime
(
TimeDelta
:
:
Seconds
(
1
)
/
kHighFps
)
;
}
EXPECT_NEAR
(
*
estimator_
.
GetAverageFps
(
)
kExpectedFps
0
.
001
)
;
}
TEST_F
(
FrameRateEstimatorTest
CullsOldFramesFromAveragingWindow
)
{
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
clock_
.
AdvanceTime
(
kDefaultWindow
)
;
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
EXPECT_TRUE
(
estimator_
.
GetAverageFps
(
)
)
;
EXPECT_NEAR
(
*
estimator_
.
GetAverageFps
(
)
1
.
0
0
.
001
)
;
clock_
.
AdvanceTime
(
TimeDelta
:
:
Micros
(
1
)
)
;
EXPECT_FALSE
(
estimator_
.
GetAverageFps
(
clock_
.
CurrentTime
(
)
)
)
;
}
TEST_F
(
FrameRateEstimatorTest
Reset
)
{
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
clock_
.
AdvanceTime
(
TimeDelta
:
:
Seconds
(
1
)
/
30
)
;
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
EXPECT_TRUE
(
estimator_
.
GetAverageFps
(
)
)
;
estimator_
.
Reset
(
)
;
EXPECT_FALSE
(
estimator_
.
GetAverageFps
(
)
)
;
clock_
.
AdvanceTime
(
TimeDelta
:
:
Seconds
(
1
)
/
30
)
;
estimator_
.
OnFrame
(
clock_
.
CurrentTime
(
)
)
;
EXPECT_FALSE
(
estimator_
.
GetAverageFps
(
)
)
;
}
}
