#
ifndef
MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURE_TYPES_H_
#
define
MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURE_TYPES_H_
#
ifndef
XP_WIN
#
include
<
sys
/
types
.
h
>
#
endif
#
include
<
stdint
.
h
>
#
ifdef
XP_WIN
typedef
int
pid_t
;
#
endif
namespace
webrtc
{
enum
class
CaptureType
{
kWindow
kScreen
}
;
typedef
intptr_t
WindowId
;
const
WindowId
kNullWindowId
=
0
;
#
if
defined
(
CHROMEOS
)
typedef
int64_t
ScreenId
;
#
else
typedef
intptr_t
ScreenId
;
#
endif
const
ScreenId
kFullDesktopScreenId
=
-
1
;
const
ScreenId
kInvalidScreenId
=
-
2
;
typedef
intptr_t
ProcessId
;
const
ProcessId
DesktopProcessId
=
0
;
namespace
DesktopCapturerId
{
constexpr
uint32_t
CreateFourCC
(
char
a
char
b
char
c
char
d
)
{
return
(
(
static_cast
<
uint32_t
>
(
a
)
)
|
(
static_cast
<
uint32_t
>
(
b
)
<
<
8
)
|
(
static_cast
<
uint32_t
>
(
c
)
<
<
16
)
|
(
static_cast
<
uint32_t
>
(
d
)
<
<
24
)
)
;
}
constexpr
uint32_t
kUnknown
=
0
;
constexpr
uint32_t
kWgcCapturerWin
=
1
;
constexpr
uint32_t
kScreenCapturerWinMagnifier
=
2
;
constexpr
uint32_t
kWindowCapturerWinGdi
=
3
;
constexpr
uint32_t
kScreenCapturerWinGdi
=
CreateFourCC
(
'
G
'
'
D
'
'
I
'
'
'
)
;
constexpr
uint32_t
kScreenCapturerWinDirectx
=
CreateFourCC
(
'
D
'
'
X
'
'
G
'
'
I
'
)
;
constexpr
uint32_t
kX11CapturerLinux
=
CreateFourCC
(
'
X
'
'
1
'
'
1
'
'
'
)
;
constexpr
uint32_t
kWaylandCapturerLinux
=
CreateFourCC
(
'
W
'
'
L
'
'
'
'
'
)
;
}
}
#
endif
