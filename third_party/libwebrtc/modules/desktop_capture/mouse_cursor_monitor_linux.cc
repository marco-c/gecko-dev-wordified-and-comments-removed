#
include
<
memory
>
#
include
"
modules
/
desktop_capture
/
desktop_capture_types
.
h
"
#
include
"
modules
/
desktop_capture
/
mouse_cursor_monitor
.
h
"
#
if
defined
(
WEBRTC_USE_X11
)
#
include
"
modules
/
desktop_capture
/
linux
/
x11
/
mouse_cursor_monitor_x11
.
h
"
#
endif
#
if
defined
(
WEBRTC_USE_PIPEWIRE
)
#
include
"
modules
/
desktop_capture
/
linux
/
wayland
/
mouse_cursor_monitor_pipewire
.
h
"
#
endif
namespace
webrtc
{
MouseCursorMonitor
*
MouseCursorMonitor
:
:
CreateForWindow
(
const
DesktopCaptureOptions
&
options
WindowId
window
)
{
#
if
defined
(
WEBRTC_USE_X11
)
return
MouseCursorMonitorX11
:
:
CreateForWindow
(
options
window
)
;
#
else
return
nullptr
;
#
endif
}
MouseCursorMonitor
*
MouseCursorMonitor
:
:
CreateForScreen
(
const
DesktopCaptureOptions
&
options
ScreenId
screen
)
{
#
if
defined
(
WEBRTC_USE_X11
)
return
MouseCursorMonitorX11
:
:
CreateForScreen
(
options
screen
)
;
#
else
return
nullptr
;
#
endif
}
std
:
:
unique_ptr
<
MouseCursorMonitor
>
MouseCursorMonitor
:
:
Create
(
const
DesktopCaptureOptions
&
options
)
{
#
if
defined
(
WEBRTC_USE_PIPEWIRE
)
if
(
options
.
allow_pipewire
(
)
&
&
DesktopCapturer
:
:
IsRunningUnderWayland
(
)
&
&
options
.
screencast_stream
(
)
)
{
return
std
:
:
make_unique
<
MouseCursorMonitorPipeWire
>
(
options
)
;
}
#
endif
#
if
defined
(
WEBRTC_USE_X11
)
return
MouseCursorMonitorX11
:
:
Create
(
options
)
;
#
else
return
nullptr
;
#
endif
}
}
