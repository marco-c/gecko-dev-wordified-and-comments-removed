#
include
"
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
window_capturer_win_gdi
.
h
"
#
if
defined
(
RTC_ENABLE_WIN_WGC
)
#
include
"
modules
/
desktop_capture
/
blank_detector_desktop_capturer_wrapper
.
h
"
#
include
"
modules
/
desktop_capture
/
fallback_desktop_capturer_wrapper
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
wgc_capturer_win
.
h
"
#
include
"
rtc_base
/
win
/
windows_version
.
h
"
#
endif
namespace
webrtc
{
std
:
:
unique_ptr
<
DesktopCapturer
>
DesktopCapturer
:
:
CreateRawWindowCapturer
(
const
DesktopCaptureOptions
&
options
)
{
std
:
:
unique_ptr
<
DesktopCapturer
>
capturer
(
WindowCapturerWinGdi
:
:
CreateRawWindowCapturer
(
options
)
)
;
#
if
defined
(
RTC_ENABLE_WIN_WGC
)
if
(
options
.
allow_wgc_capturer_fallback
(
)
&
&
rtc
:
:
rtc_win
:
:
GetVersion
(
)
>
=
rtc
:
:
rtc_win
:
:
Version
:
:
VERSION_WIN11
)
{
capturer
=
std
:
:
make_unique
<
BlankDetectorDesktopCapturerWrapper
>
(
std
:
:
move
(
capturer
)
RgbaColor
(
0
0
0
0
)
true
)
;
capturer
=
std
:
:
make_unique
<
FallbackDesktopCapturerWrapper
>
(
std
:
:
move
(
capturer
)
WgcCapturerWin
:
:
CreateRawWindowCapturer
(
options
true
)
)
;
}
#
endif
return
capturer
;
}
}
