#
include
"
modules
/
desktop_capture
/
desktop_capture_metrics_helper
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capture_types
.
h
"
#
include
"
system_wrappers
/
include
/
metrics
.
h
"
namespace
webrtc
{
namespace
{
enum
class
SequentialDesktopCapturerId
{
kUnknown
=
0
kWgcCapturerWin
=
1
kScreenCapturerWinMagnifier
=
2
kWindowCapturerWinGdi
=
3
kScreenCapturerWinGdi
=
4
kScreenCapturerWinDirectx
=
5
kMaxValue
=
kScreenCapturerWinDirectx
}
;
}
void
RecordCapturerImpl
(
uint32_t
capturer_id
)
{
SequentialDesktopCapturerId
sequential_id
;
switch
(
capturer_id
)
{
case
DesktopCapturerId
:
:
kWgcCapturerWin
:
sequential_id
=
SequentialDesktopCapturerId
:
:
kWgcCapturerWin
;
break
;
case
DesktopCapturerId
:
:
kScreenCapturerWinMagnifier
:
sequential_id
=
SequentialDesktopCapturerId
:
:
kScreenCapturerWinMagnifier
;
break
;
case
DesktopCapturerId
:
:
kWindowCapturerWinGdi
:
sequential_id
=
SequentialDesktopCapturerId
:
:
kWindowCapturerWinGdi
;
break
;
case
DesktopCapturerId
:
:
kScreenCapturerWinGdi
:
sequential_id
=
SequentialDesktopCapturerId
:
:
kScreenCapturerWinGdi
;
break
;
case
DesktopCapturerId
:
:
kScreenCapturerWinDirectx
:
sequential_id
=
SequentialDesktopCapturerId
:
:
kScreenCapturerWinDirectx
;
break
;
case
DesktopCapturerId
:
:
kUnknown
:
default
:
sequential_id
=
SequentialDesktopCapturerId
:
:
kUnknown
;
}
RTC_HISTOGRAM_ENUMERATION
(
"
WebRTC
.
DesktopCapture
.
Win
.
DesktopCapturerImpl
"
static_cast
<
int
>
(
sequential_id
)
static_cast
<
int
>
(
SequentialDesktopCapturerId
:
:
kMaxValue
)
)
;
}
}
