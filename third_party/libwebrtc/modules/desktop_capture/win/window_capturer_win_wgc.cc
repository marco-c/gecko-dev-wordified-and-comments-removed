#
include
"
modules
/
desktop_capture
/
win
/
window_capturer_win_wgc
.
h
"
#
include
<
memory
>
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
namespace
webrtc
{
WindowCapturerWinWgc
:
:
WindowCapturerWinWgc
(
bool
enumerate_current_process_windows
)
:
enumerate_current_process_windows_
(
enumerate_current_process_windows
)
{
}
WindowCapturerWinWgc
:
:
~
WindowCapturerWinWgc
(
)
=
default
;
bool
WindowCapturerWinWgc
:
:
GetSourceList
(
SourceList
*
sources
)
{
return
window_capture_helper_
.
EnumerateCapturableWindows
(
sources
enumerate_current_process_windows_
)
;
}
bool
WindowCapturerWinWgc
:
:
SelectSource
(
SourceId
id
)
{
HWND
window
=
reinterpret_cast
<
HWND
>
(
id
)
;
if
(
!
IsWindowValidAndVisible
(
window
)
)
return
false
;
window_
=
window
;
return
true
;
}
void
WindowCapturerWinWgc
:
:
Start
(
Callback
*
callback
)
{
RTC_DCHECK
(
!
callback_
)
;
RTC_DCHECK
(
callback
)
;
callback_
=
callback
;
}
void
WindowCapturerWinWgc
:
:
CaptureFrame
(
)
{
RTC_DCHECK
(
callback_
)
;
callback_
-
>
OnCaptureResult
(
Result
:
:
ERROR_TEMPORARY
nullptr
)
;
}
std
:
:
unique_ptr
<
DesktopCapturer
>
WindowCapturerWinWgc
:
:
CreateRawWindowCapturer
(
const
DesktopCaptureOptions
&
options
)
{
return
std
:
:
unique_ptr
<
DesktopCapturer
>
(
new
WindowCapturerWinWgc
(
options
.
enumerate_current_process_windows
(
)
)
)
;
}
}
