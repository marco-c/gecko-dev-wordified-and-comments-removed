#
ifndef
MODULES_DESKTOP_CAPTURE_WIN_WINDOW_CAPTURER_WIN_WGC_H_
#
define
MODULES_DESKTOP_CAPTURE_WIN_WINDOW_CAPTURER_WIN_WGC_H_
#
include
<
memory
>
#
include
"
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
window_capture_utils
.
h
"
namespace
webrtc
{
class
WindowCapturerWinWgc
:
public
DesktopCapturer
{
public
:
WindowCapturerWinWgc
(
bool
enumerate_current_process_windows
)
;
WindowCapturerWinWgc
(
const
WindowCapturerWinWgc
&
)
=
delete
;
WindowCapturerWinWgc
&
operator
=
(
const
WindowCapturerWinWgc
&
)
=
delete
;
~
WindowCapturerWinWgc
(
)
override
;
static
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateRawWindowCapturer
(
const
DesktopCaptureOptions
&
options
)
;
void
Start
(
Callback
*
callback
)
override
;
void
CaptureFrame
(
)
override
;
bool
GetSourceList
(
SourceList
*
sources
)
override
;
bool
SelectSource
(
SourceId
id
)
override
;
private
:
Callback
*
callback_
=
nullptr
;
HWND
window_
=
nullptr
;
WindowCaptureHelperWin
window_capture_helper_
;
bool
enumerate_current_process_windows_
;
}
;
}
#
endif
