#
ifndef
MODULES_DESKTOP_CAPTURE_WIN_SCREEN_CAPTURER_WIN_GDI_H_
#
define
MODULES_DESKTOP_CAPTURE_WIN_SCREEN_CAPTURER_WIN_GDI_H_
#
include
<
windows
.
h
>
#
include
<
memory
>
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
screen_capture_frame_queue
.
h
"
#
include
"
modules
/
desktop_capture
/
shared_desktop_frame
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
display_configuration_monitor
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
scoped_thread_desktop
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
namespace
webrtc
{
class
ScreenCapturerWinGdi
:
public
DesktopCapturer
{
public
:
explicit
ScreenCapturerWinGdi
(
const
DesktopCaptureOptions
&
options
)
;
~
ScreenCapturerWinGdi
(
)
override
;
void
Start
(
Callback
*
callback
)
override
;
void
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
override
;
void
CaptureFrame
(
)
override
;
bool
GetSourceList
(
SourceList
*
sources
)
override
;
bool
SelectSource
(
SourceId
id
)
override
;
private
:
typedef
HRESULT
(
WINAPI
*
DwmEnableCompositionFunc
)
(
UINT
)
;
typedef
HRESULT
(
WINAPI
*
DwmIsCompositionEnabledFunc
)
(
BOOL
*
)
;
void
PrepareCaptureResources
(
)
;
bool
CaptureImage
(
)
;
void
CaptureCursor
(
)
;
Callback
*
callback_
=
nullptr
;
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory_
;
SourceId
current_screen_id_
=
kFullDesktopScreenId
;
std
:
:
wstring
current_device_key_
;
ScopedThreadDesktop
desktop_
;
HDC
desktop_dc_
=
NULL
;
HDC
memory_dc_
=
NULL
;
ScreenCaptureFrameQueue
<
SharedDesktopFrame
>
queue_
;
DisplayConfigurationMonitor
display_configuration_monitor_
;
HMODULE
dwmapi_library_
=
NULL
;
DwmEnableCompositionFunc
composition_func_
=
nullptr
;
DwmIsCompositionEnabledFunc
composition_enabled_func_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
ScreenCapturerWinGdi
)
;
}
;
}
#
endif
