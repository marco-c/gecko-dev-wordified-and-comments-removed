#
ifndef
MODULES_DESKTOP_CAPTURE_WIN_DXGI_ADAPTER_DUPLICATOR_H_
#
define
MODULES_DESKTOP_CAPTURE_WIN_DXGI_ADAPTER_DUPLICATOR_H_
#
include
<
cstdint
>
#
include
<
optional
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
modules
/
desktop_capture
/
desktop_geometry
.
h
"
#
include
"
modules
/
desktop_capture
/
shared_desktop_frame
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
d3d_device
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
dxgi_context
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
dxgi_output_duplicator
.
h
"
namespace
webrtc
{
class
DxgiAdapterDuplicator
{
public
:
using
Context
=
DxgiAdapterContext
;
explicit
DxgiAdapterDuplicator
(
const
D3dDevice
&
device
)
;
DxgiAdapterDuplicator
(
DxgiAdapterDuplicator
&
&
other
)
;
~
DxgiAdapterDuplicator
(
)
;
bool
Initialize
(
)
;
bool
Duplicate
(
Context
*
context
SharedDesktopFrame
*
target
)
;
bool
DuplicateMonitor
(
Context
*
context
int
monitor_id
SharedDesktopFrame
*
target
)
;
DesktopRect
desktop_rect
(
)
const
{
return
desktop_rect_
;
}
std
:
:
optional
<
float
>
GetDeviceScaleFactor
(
int
screen_id
)
const
;
DesktopRect
ScreenRect
(
int
id
)
const
;
const
std
:
:
string
&
GetDeviceName
(
int
id
)
const
;
int
screen_count
(
)
const
;
void
Setup
(
Context
*
context
)
;
void
Unregister
(
const
Context
*
const
context
)
;
int64_t
GetNumFramesCaptured
(
int
monitor_id
)
const
;
void
TranslateRect
(
const
DesktopVector
&
position
)
;
private
:
bool
DoInitialize
(
)
;
const
D3dDevice
device_
;
std
:
:
vector
<
DxgiOutputDuplicator
>
duplicators_
;
DesktopRect
desktop_rect_
;
}
;
}
#
endif
