#
include
"
modules
/
desktop_capture
/
win
/
selected_window_context
.
h
"
namespace
webrtc
{
SelectedWindowContext
:
:
SelectedWindowContext
(
HWND
selected_window
DesktopRect
selected_window_rect
WindowCaptureHelperWin
*
window_capture_helper
)
:
selected_window_
(
selected_window
)
selected_window_rect_
(
selected_window_rect
)
window_capture_helper_
(
window_capture_helper
)
{
selected_window_thread_id_
=
GetWindowThreadProcessId
(
selected_window
&
selected_window_process_id_
)
;
}
bool
SelectedWindowContext
:
:
IsSelectedWindowValid
(
)
const
{
return
selected_window_thread_id_
!
=
0
;
}
bool
SelectedWindowContext
:
:
IsWindowOwnedBySelectedWindow
(
HWND
hwnd
)
const
{
if
(
GetAncestor
(
hwnd
GA_ROOTOWNER
)
=
=
selected_window_
)
{
return
true
;
}
DWORD
enumerated_window_process_id
=
0
;
DWORD
enumerated_window_thread_id
=
GetWindowThreadProcessId
(
hwnd
&
enumerated_window_process_id
)
;
return
enumerated_window_thread_id
!
=
0
&
&
enumerated_window_process_id
=
=
selected_window_process_id_
&
&
enumerated_window_thread_id
=
=
selected_window_thread_id_
;
}
bool
SelectedWindowContext
:
:
IsWindowOverlappingSelectedWindow
(
HWND
hwnd
)
const
{
return
window_capture_helper_
-
>
AreWindowsOverlapping
(
hwnd
selected_window_
selected_window_rect_
)
;
}
HWND
SelectedWindowContext
:
:
selected_window
(
)
const
{
return
selected_window_
;
}
WindowCaptureHelperWin
*
SelectedWindowContext
:
:
window_capture_helper
(
)
const
{
return
window_capture_helper_
;
}
}
