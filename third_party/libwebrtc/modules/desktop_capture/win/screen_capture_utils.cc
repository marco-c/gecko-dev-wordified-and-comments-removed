#
include
"
modules
/
desktop_capture
/
win
/
screen_capture_utils
.
h
"
#
include
<
libloaderapi
.
h
>
#
include
<
shellscalingapi
.
h
>
#
include
<
windows
.
h
>
#
include
<
winnt
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_geometry
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
string_utils
.
h
"
#
include
"
rtc_base
/
win32
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
namespace
webrtc
{
HRESULT
TryGetDpiForMonitor
(
HMONITOR
hmonitor
MONITOR_DPI_TYPE
dpiType
UINT
*
dpiX
UINT
*
dpiY
)
{
static
HRESULT
(
*
plat_fn
)
(
HMONITOR
MONITOR_DPI_TYPE
UINT
*
UINT
*
)
;
#
ifdef
_WIN64
if
(
!
plat_fn
)
{
if
(
auto
*
module
=
:
:
GetModuleHandle
(
L
"
Shcore
.
dll
"
)
;
module
)
{
plat_fn
=
reinterpret_cast
<
decltype
(
plat_fn
)
>
(
:
:
GetProcAddress
(
module
"
GetDpiForMonitor
"
)
)
;
}
}
#
endif
return
plat_fn
?
(
(
*
plat_fn
)
(
hmonitor
dpiType
dpiX
dpiY
)
)
:
-
1
;
}
bool
HasActiveDisplay
(
)
{
DesktopCapturer
:
:
SourceList
screens
;
return
GetScreenList
(
&
screens
)
&
&
!
screens
.
empty
(
)
;
}
bool
GetScreenList
(
DesktopCapturer
:
:
SourceList
*
screens
std
:
:
vector
<
std
:
:
string
>
*
device_names
)
{
RTC_DCHECK
(
screens
-
>
empty
(
)
)
;
RTC_DCHECK
(
!
device_names
|
|
device_names
-
>
empty
(
)
)
;
BOOL
enum_result
=
TRUE
;
for
(
int
device_index
=
0
;
;
+
+
device_index
)
{
DISPLAY_DEVICEW
device
;
device
.
cb
=
sizeof
(
device
)
;
enum_result
=
EnumDisplayDevicesW
(
NULL
device_index
&
device
0
)
;
if
(
!
enum_result
)
{
break
;
}
if
(
!
(
device
.
StateFlags
&
DISPLAY_DEVICE_ACTIVE
)
)
{
continue
;
}
screens
-
>
push_back
(
{
device_index
0
std
:
:
string
(
)
}
)
;
if
(
device_names
)
{
device_names
-
>
push_back
(
rtc
:
:
ToUtf8
(
device
.
DeviceName
)
)
;
}
}
return
true
;
}
bool
GetHmonitorFromDeviceIndex
(
const
DesktopCapturer
:
:
SourceId
device_index
HMONITOR
*
hmonitor
)
{
if
(
device_index
=
=
kFullDesktopScreenId
)
{
*
hmonitor
=
0
;
return
true
;
}
std
:
:
wstring
device_key
;
if
(
!
IsScreenValid
(
device_index
&
device_key
)
)
{
return
false
;
}
DesktopRect
screen_rect
=
GetScreenRect
(
device_index
device_key
)
;
if
(
screen_rect
.
is_empty
(
)
)
{
return
false
;
}
RECT
rect
=
{
screen_rect
.
left
(
)
screen_rect
.
top
(
)
screen_rect
.
right
(
)
screen_rect
.
bottom
(
)
}
;
HMONITOR
monitor
=
MonitorFromRect
(
&
rect
MONITOR_DEFAULTTONULL
)
;
if
(
monitor
=
=
NULL
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
No
HMONITOR
found
for
supplied
device
index
.
"
;
return
false
;
}
*
hmonitor
=
monitor
;
return
true
;
}
bool
IsMonitorValid
(
const
HMONITOR
monitor
)
{
if
(
monitor
=
=
0
)
{
if
(
!
HasActiveDisplay
(
)
)
return
false
;
return
true
;
}
MONITORINFO
monitor_info
;
monitor_info
.
cbSize
=
sizeof
(
MONITORINFO
)
;
return
GetMonitorInfoA
(
monitor
&
monitor_info
)
;
}
DesktopRect
GetMonitorRect
(
const
HMONITOR
monitor
)
{
MONITORINFO
monitor_info
;
monitor_info
.
cbSize
=
sizeof
(
MONITORINFO
)
;
if
(
!
GetMonitorInfoA
(
monitor
&
monitor_info
)
)
{
return
DesktopRect
(
)
;
}
return
DesktopRect
:
:
MakeLTRB
(
monitor_info
.
rcMonitor
.
left
monitor_info
.
rcMonitor
.
top
monitor_info
.
rcMonitor
.
right
monitor_info
.
rcMonitor
.
bottom
)
;
}
bool
IsScreenValid
(
const
DesktopCapturer
:
:
SourceId
screen
std
:
:
wstring
*
device_key
)
{
if
(
screen
=
=
kFullDesktopScreenId
)
{
*
device_key
=
L
"
"
;
return
true
;
}
DISPLAY_DEVICEW
device
;
device
.
cb
=
sizeof
(
device
)
;
BOOL
enum_result
=
EnumDisplayDevicesW
(
NULL
screen
&
device
0
)
;
if
(
enum_result
)
{
*
device_key
=
device
.
DeviceKey
;
}
return
!
!
enum_result
;
}
DesktopRect
GetFullscreenRect
(
)
{
return
DesktopRect
:
:
MakeXYWH
(
GetSystemMetrics
(
SM_XVIRTUALSCREEN
)
GetSystemMetrics
(
SM_YVIRTUALSCREEN
)
GetSystemMetrics
(
SM_CXVIRTUALSCREEN
)
GetSystemMetrics
(
SM_CYVIRTUALSCREEN
)
)
;
}
DesktopVector
GetDpiForMonitor
(
HMONITOR
monitor
)
{
UINT
dpi_x
dpi_y
;
HRESULT
hr
=
TryGetDpiForMonitor
(
monitor
MDT_EFFECTIVE_DPI
&
dpi_x
&
dpi_y
)
;
if
(
SUCCEEDED
(
hr
)
)
{
return
{
static_cast
<
INT
>
(
dpi_x
)
static_cast
<
INT
>
(
dpi_y
)
}
;
}
RTC_LOG_GLE_EX
(
LS_WARNING
hr
)
<
<
"
GetDpiForMonitor
(
)
failed
"
;
HDC
hdc
=
GetDC
(
nullptr
)
;
if
(
hdc
)
{
DesktopVector
dpi
{
GetDeviceCaps
(
hdc
LOGPIXELSX
)
GetDeviceCaps
(
hdc
LOGPIXELSY
)
}
;
ReleaseDC
(
nullptr
hdc
)
;
return
dpi
;
}
return
{
96
96
}
;
}
DesktopRect
GetScreenRect
(
const
DesktopCapturer
:
:
SourceId
screen
const
std
:
:
wstring
&
device_key
)
{
RTC_DCHECK
(
IsGUIThread
(
false
)
)
;
if
(
screen
=
=
kFullDesktopScreenId
)
{
return
GetFullscreenRect
(
)
;
}
DISPLAY_DEVICEW
device
;
device
.
cb
=
sizeof
(
device
)
;
BOOL
result
=
EnumDisplayDevicesW
(
NULL
screen
&
device
0
)
;
if
(
!
result
)
{
return
DesktopRect
(
)
;
}
if
(
device_key
!
=
device
.
DeviceKey
)
{
return
DesktopRect
(
)
;
}
DEVMODEW
device_mode
;
device_mode
.
dmSize
=
sizeof
(
device_mode
)
;
device_mode
.
dmDriverExtra
=
0
;
result
=
EnumDisplaySettingsExW
(
device
.
DeviceName
ENUM_CURRENT_SETTINGS
&
device_mode
0
)
;
if
(
!
result
)
{
return
DesktopRect
(
)
;
}
return
DesktopRect
:
:
MakeXYWH
(
device_mode
.
dmPosition
.
x
device_mode
.
dmPosition
.
y
device_mode
.
dmPelsWidth
device_mode
.
dmPelsHeight
)
;
}
}
