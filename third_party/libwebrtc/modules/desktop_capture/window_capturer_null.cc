#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_frame
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
class
WindowCapturerNull
:
public
DesktopCapturer
{
public
:
WindowCapturerNull
(
)
;
~
WindowCapturerNull
(
)
override
;
WindowCapturerNull
(
const
WindowCapturerNull
&
)
=
delete
;
WindowCapturerNull
&
operator
=
(
const
WindowCapturerNull
&
)
=
delete
;
void
Start
(
Callback
*
callback
)
override
;
void
CaptureFrame
(
)
override
;
bool
GetSourceList
(
SourceList
*
sources
)
override
;
bool
SelectSource
(
SourceId
id
)
override
;
private
:
Callback
*
callback_
=
nullptr
;
}
;
WindowCapturerNull
:
:
WindowCapturerNull
(
)
{
}
WindowCapturerNull
:
:
~
WindowCapturerNull
(
)
{
}
bool
WindowCapturerNull
:
:
GetSourceList
(
SourceList
*
sources
)
{
return
false
;
}
bool
WindowCapturerNull
:
:
SelectSource
(
SourceId
id
)
{
return
false
;
}
void
WindowCapturerNull
:
:
Start
(
Callback
*
callback
)
{
RTC_DCHECK
(
!
callback_
)
;
RTC_DCHECK
(
callback
)
;
callback_
=
callback
;
}
void
WindowCapturerNull
:
:
CaptureFrame
(
)
{
callback_
-
>
OnCaptureResult
(
Result
:
:
ERROR_TEMPORARY
nullptr
)
;
}
}
std
:
:
unique_ptr
<
DesktopCapturer
>
DesktopCapturer
:
:
CreateRawWindowCapturer
(
const
DesktopCaptureOptions
&
options
)
{
return
std
:
:
unique_ptr
<
DesktopCapturer
>
(
new
WindowCapturerNull
(
)
)
;
}
}
