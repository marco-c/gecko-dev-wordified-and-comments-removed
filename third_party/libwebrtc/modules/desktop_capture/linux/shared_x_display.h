#
ifndef
MODULES_DESKTOP_CAPTURE_LINUX_SHARED_X_DISPLAY_H_
#
define
MODULES_DESKTOP_CAPTURE_LINUX_SHARED_X_DISPLAY_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
ref_counted_base
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
typedef
struct
_XDisplay
Display
;
typedef
union
_XEvent
XEvent
;
namespace
webrtc
{
class
RTC_EXPORT
SharedXDisplay
:
public
rtc
:
:
RefCountedBase
{
public
:
class
XEventHandler
{
public
:
virtual
~
XEventHandler
(
)
{
}
virtual
bool
HandleXEvent
(
const
XEvent
&
event
)
=
0
;
}
;
explicit
SharedXDisplay
(
Display
*
display
)
;
static
rtc
:
:
scoped_refptr
<
SharedXDisplay
>
Create
(
const
std
:
:
string
&
display_name
)
;
static
rtc
:
:
scoped_refptr
<
SharedXDisplay
>
CreateDefault
(
)
;
Display
*
display
(
)
{
return
display_
;
}
void
AddEventHandler
(
int
type
XEventHandler
*
handler
)
;
void
RemoveEventHandler
(
int
type
XEventHandler
*
handler
)
;
void
ProcessPendingXEvents
(
)
;
void
IgnoreXServerGrabs
(
)
;
protected
:
~
SharedXDisplay
(
)
override
;
private
:
typedef
std
:
:
map
<
int
std
:
:
vector
<
XEventHandler
*
>
>
EventHandlersMap
;
Display
*
display_
;
EventHandlersMap
event_handlers_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
SharedXDisplay
)
;
}
;
}
#
endif
