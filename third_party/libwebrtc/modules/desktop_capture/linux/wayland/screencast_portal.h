#
ifndef
MODULES_DESKTOP_CAPTURE_LINUX_WAYLAND_SCREENCAST_PORTAL_H_
#
define
MODULES_DESKTOP_CAPTURE_LINUX_WAYLAND_SCREENCAST_PORTAL_H_
#
include
<
gio
/
gio
.
h
>
#
include
<
string
>
#
include
"
modules
/
desktop_capture
/
linux
/
wayland
/
screen_capture_portal_interface
.
h
"
#
include
"
modules
/
desktop_capture
/
linux
/
wayland
/
xdg_desktop_portal_utils
.
h
"
#
include
"
modules
/
desktop_capture
/
linux
/
wayland
/
xdg_session_details
.
h
"
namespace
webrtc
{
class
ScreenCastPortal
:
public
xdg_portal
:
:
ScreenCapturePortalInterface
{
public
:
using
ProxyRequestResponseHandler
=
void
(
*
)
(
GObject
*
object
GAsyncResult
*
result
gpointer
user_data
)
;
using
SourcesRequestResponseSignalHandler
=
void
(
*
)
(
GDBusConnection
*
connection
const
char
*
sender_name
const
char
*
object_path
const
char
*
interface_name
const
char
*
signal_name
GVariant
*
parameters
gpointer
user_data
)
;
enum
class
CaptureSourceType
:
uint32_t
{
kScreen
=
0b01
kWindow
=
0b10
kAnyScreenContent
=
kScreen
|
kWindow
}
;
enum
class
CursorMode
:
uint32_t
{
kHidden
=
0b01
kEmbedded
=
0b10
kMetadata
=
0b100
}
;
class
PortalNotifier
{
public
:
virtual
void
OnScreenCastRequestResult
(
xdg_portal
:
:
RequestResponse
result
uint32_t
stream_node_id
int
fd
)
=
0
;
virtual
void
OnScreenCastSessionClosed
(
)
=
0
;
protected
:
PortalNotifier
(
)
=
default
;
virtual
~
PortalNotifier
(
)
=
default
;
}
;
explicit
ScreenCastPortal
(
ScreenCastPortal
:
:
CaptureSourceType
source_type
PortalNotifier
*
notifier
)
;
explicit
ScreenCastPortal
(
CaptureSourceType
source_type
PortalNotifier
*
notifier
ProxyRequestResponseHandler
proxy_request_response_handler
SourcesRequestResponseSignalHandler
sources_request_response_signal_handler
gpointer
user_data
)
;
~
ScreenCastPortal
(
)
;
void
Start
(
)
override
;
xdg_portal
:
:
SessionDetails
GetSessionDetails
(
)
override
;
void
PortalFailed
(
xdg_portal
:
:
RequestResponse
result
)
;
void
SessionRequest
(
GDBusProxy
*
proxy
)
;
void
UnsubscribeSignalHandlers
(
)
;
void
SetSessionDetails
(
const
xdg_portal
:
:
SessionDetails
&
session_details
)
;
uint32_t
pipewire_stream_node_id
(
)
;
void
SourcesRequest
(
)
;
void
OpenPipeWireRemote
(
)
;
private
:
PortalNotifier
*
notifier_
;
uint32_t
pw_stream_node_id_
=
0
;
int
pw_fd_
=
-
1
;
CaptureSourceType
capture_source_type_
=
ScreenCastPortal
:
:
CaptureSourceType
:
:
kScreen
;
CursorMode
cursor_mode_
=
ScreenCastPortal
:
:
CursorMode
:
:
kMetadata
;
ProxyRequestResponseHandler
proxy_request_response_handler_
;
SourcesRequestResponseSignalHandler
sources_request_response_signal_handler_
;
gpointer
user_data_
;
GDBusConnection
*
connection_
=
nullptr
;
GDBusProxy
*
proxy_
=
nullptr
;
GCancellable
*
cancellable_
=
nullptr
;
std
:
:
string
portal_handle_
;
std
:
:
string
session_handle_
;
std
:
:
string
sources_handle_
;
std
:
:
string
start_handle_
;
guint
session_request_signal_id_
=
0
;
guint
sources_request_signal_id_
=
0
;
guint
start_request_signal_id_
=
0
;
guint
session_closed_signal_id_
=
0
;
static
void
OnProxyRequested
(
GObject
*
object
GAsyncResult
*
result
gpointer
user_data
)
;
static
void
OnSessionRequested
(
GDBusProxy
*
proxy
GAsyncResult
*
result
gpointer
user_data
)
;
static
void
OnSessionRequestResponseSignal
(
GDBusConnection
*
connection
const
char
*
sender_name
const
char
*
object_path
const
char
*
interface_name
const
char
*
signal_name
GVariant
*
parameters
gpointer
user_data
)
;
static
void
OnSessionClosedSignal
(
GDBusConnection
*
connection
const
char
*
sender_name
const
char
*
object_path
const
char
*
interface_name
const
char
*
signal_name
GVariant
*
parameters
gpointer
user_data
)
;
static
void
OnSourcesRequested
(
GDBusProxy
*
proxy
GAsyncResult
*
result
gpointer
user_data
)
;
static
void
OnSourcesRequestResponseSignal
(
GDBusConnection
*
connection
const
char
*
sender_name
const
char
*
object_path
const
char
*
interface_name
const
char
*
signal_name
GVariant
*
parameters
gpointer
user_data
)
;
void
StartRequest
(
)
;
static
void
OnStartRequested
(
GDBusProxy
*
proxy
GAsyncResult
*
result
gpointer
user_data
)
;
static
void
OnStartRequestResponseSignal
(
GDBusConnection
*
connection
const
char
*
sender_name
const
char
*
object_path
const
char
*
interface_name
const
char
*
signal_name
GVariant
*
parameters
gpointer
user_data
)
;
static
void
OnOpenPipeWireRemoteRequested
(
GDBusProxy
*
proxy
GAsyncResult
*
result
gpointer
user_data
)
;
}
;
}
#
endif
