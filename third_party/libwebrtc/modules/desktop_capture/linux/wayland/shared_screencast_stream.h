#
ifndef
MODULES_DESKTOP_CAPTURE_LINUX_WAYLAND_SHARED_SCREENCAST_STREAM_H_
#
define
MODULES_DESKTOP_CAPTURE_LINUX_WAYLAND_SHARED_SCREENCAST_STREAM_H_
#
include
<
memory
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
ref_counted_base
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_frame
.
h
"
#
include
"
modules
/
desktop_capture
/
mouse_cursor
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
SharedScreenCastStreamPrivate
;
class
RTC_EXPORT
SharedScreenCastStream
:
public
rtc
:
:
RefCountedNonVirtual
<
SharedScreenCastStream
>
{
public
:
static
rtc
:
:
scoped_refptr
<
SharedScreenCastStream
>
CreateDefault
(
)
;
bool
StartScreenCastStream
(
uint32_t
stream_node_id
int
fd
)
;
void
StopScreenCastStream
(
)
;
std
:
:
unique_ptr
<
DesktopFrame
>
CaptureFrame
(
)
;
std
:
:
unique_ptr
<
MouseCursor
>
CaptureCursor
(
)
;
absl
:
:
optional
<
DesktopVector
>
CaptureCursorPosition
(
)
;
~
SharedScreenCastStream
(
)
;
protected
:
SharedScreenCastStream
(
)
;
private
:
SharedScreenCastStream
(
const
SharedScreenCastStream
&
)
=
delete
;
SharedScreenCastStream
&
operator
=
(
const
SharedScreenCastStream
&
)
=
delete
;
std
:
:
unique_ptr
<
SharedScreenCastStreamPrivate
>
private_
;
}
;
}
#
endif
