#
ifndef
MODULES_DESKTOP_CAPTURE_LINUX_WAYLAND_SHARED_SCREENCAST_STREAM_H_
#
define
MODULES_DESKTOP_CAPTURE_LINUX_WAYLAND_SHARED_SCREENCAST_STREAM_H_
#
include
<
memory
>
#
include
<
optional
>
#
include
"
api
/
ref_counted_base
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
mouse_cursor
.
h
"
#
include
"
modules
/
desktop_capture
/
screen_capture_frame_queue
.
h
"
#
include
"
modules
/
desktop_capture
/
shared_desktop_frame
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
SharedScreenCastStreamPrivate
;
class
RTC_EXPORT
SharedScreenCastStream
:
public
rtc
:
:
RefCountedNonVirtual
<
SharedScreenCastStream
>
{
public
:
class
Observer
{
public
:
virtual
void
OnCursorPositionChanged
(
)
=
0
;
virtual
void
OnCursorShapeChanged
(
)
=
0
;
virtual
void
OnDesktopFrameChanged
(
)
=
0
;
virtual
void
OnFailedToProcessBuffer
(
)
=
0
;
virtual
void
OnBufferCorruptedMetadata
(
)
=
0
;
virtual
void
OnBufferCorruptedData
(
)
=
0
;
virtual
void
OnEmptyBuffer
(
)
=
0
;
virtual
void
OnStreamConfigured
(
)
=
0
;
virtual
void
OnFrameRateChanged
(
uint32_t
frame_rate
)
=
0
;
protected
:
Observer
(
)
=
default
;
virtual
~
Observer
(
)
=
default
;
}
;
static
rtc
:
:
scoped_refptr
<
SharedScreenCastStream
>
CreateDefault
(
)
;
bool
StartScreenCastStream
(
uint32_t
stream_node_id
)
;
bool
StartScreenCastStream
(
uint32_t
stream_node_id
int
fd
uint32_t
width
=
0
uint32_t
height
=
0
bool
is_cursor_embedded
=
false
DesktopCapturer
:
:
Callback
*
callback
=
nullptr
)
;
void
UpdateScreenCastStreamResolution
(
uint32_t
width
uint32_t
height
)
;
void
UpdateScreenCastStreamFrameRate
(
uint32_t
frame_rate
)
;
void
SetUseDamageRegion
(
bool
use_damage_region
)
;
void
SetObserver
(
SharedScreenCastStream
:
:
Observer
*
observer
)
;
void
StopScreenCastStream
(
)
;
std
:
:
unique_ptr
<
SharedDesktopFrame
>
CaptureFrame
(
)
;
std
:
:
unique_ptr
<
MouseCursor
>
CaptureCursor
(
)
;
std
:
:
optional
<
DesktopVector
>
CaptureCursorPosition
(
)
;
~
SharedScreenCastStream
(
)
;
protected
:
SharedScreenCastStream
(
)
;
private
:
friend
class
SharedScreenCastStreamPrivate
;
SharedScreenCastStream
(
const
SharedScreenCastStream
&
)
=
delete
;
SharedScreenCastStream
&
operator
=
(
const
SharedScreenCastStream
&
)
=
delete
;
std
:
:
unique_ptr
<
SharedScreenCastStreamPrivate
>
private_
;
}
;
}
#
endif
