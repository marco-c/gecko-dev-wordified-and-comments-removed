#
ifndef
MODULES_DESKTOP_CAPTURE_LINUX_WAYLAND_TEST_TEST_SCREENCAST_STREAM_PROVIDER_H_
#
define
MODULES_DESKTOP_CAPTURE_LINUX_WAYLAND_TEST_TEST_SCREENCAST_STREAM_PROVIDER_H_
#
include
<
pipewire
/
context
.
h
>
#
include
<
pipewire
/
core
.
h
>
#
include
<
pipewire
/
stream
.
h
>
#
include
<
pipewire
/
thread
-
loop
.
h
>
#
include
<
spa
/
param
/
video
/
raw
.
h
>
#
include
<
spa
/
utils
/
hook
.
h
>
#
include
<
cstdint
>
#
include
"
modules
/
desktop_capture
/
linux
/
wayland
/
screencast_stream_utils
.
h
"
#
include
"
modules
/
desktop_capture
/
rgba_color
.
h
"
namespace
webrtc
{
class
TestScreenCastStreamProvider
{
public
:
class
Observer
{
public
:
virtual
void
OnBufferAdded
(
)
=
0
;
virtual
void
OnFrameRecorded
(
)
=
0
;
virtual
void
OnStreamReady
(
uint32_t
stream_node_id
)
=
0
;
virtual
void
OnStartStreaming
(
)
=
0
;
virtual
void
OnStopStreaming
(
)
=
0
;
protected
:
Observer
(
)
=
default
;
virtual
~
Observer
(
)
=
default
;
}
;
enum
FrameDefect
{
None
EmptyData
CorruptedData
CorruptedMetadata
}
;
explicit
TestScreenCastStreamProvider
(
Observer
*
observer
uint32_t
width
uint32_t
height
)
;
~
TestScreenCastStreamProvider
(
)
;
uint32_t
PipeWireNodeId
(
)
;
void
RecordFrame
(
RgbaColor
rgba_color
FrameDefect
frame_defect
=
None
)
;
void
StartStreaming
(
)
;
void
StopStreaming
(
)
;
private
:
Observer
*
observer_
;
uint32_t
width_
=
0
;
uint32_t
height_
=
0
;
bool
is_streaming_
=
false
;
uint32_t
pw_node_id_
=
0
;
struct
pw_context
*
pw_context_
=
nullptr
;
struct
pw_core
*
pw_core_
=
nullptr
;
struct
pw_stream
*
pw_stream_
=
nullptr
;
struct
pw_thread_loop
*
pw_main_loop_
=
nullptr
;
spa_hook
spa_core_listener_
;
spa_hook
spa_stream_listener_
;
pw_core_events
pw_core_events_
=
{
}
;
pw_stream_events
pw_stream_events_
=
{
}
;
struct
spa_video_info_raw
spa_video_format_
;
static
void
OnCoreError
(
void
*
data
uint32_t
id
int
seq
int
res
const
char
*
message
)
;
static
void
OnStreamAddBuffer
(
void
*
data
pw_buffer
*
buffer
)
;
static
void
OnStreamRemoveBuffer
(
void
*
data
pw_buffer
*
buffer
)
;
static
void
OnStreamParamChanged
(
void
*
data
uint32_t
id
const
struct
spa_pod
*
format
)
;
static
void
OnStreamStateChanged
(
void
*
data
pw_stream_state
old_state
pw_stream_state
state
const
char
*
error_message
)
;
}
;
}
#
endif
