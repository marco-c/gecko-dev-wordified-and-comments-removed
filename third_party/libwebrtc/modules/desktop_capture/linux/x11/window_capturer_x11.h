#
ifndef
MODULES_DESKTOP_CAPTURE_LINUX_X11_WINDOW_CAPTURER_X11_H_
#
define
MODULES_DESKTOP_CAPTURE_LINUX_X11_WINDOW_CAPTURER_X11_H_
#
include
<
X11
/
X
.
h
>
#
include
<
X11
/
Xlib
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_geometry
.
h
"
#
include
"
modules
/
desktop_capture
/
linux
/
x11
/
shared_x_display
.
h
"
#
include
"
modules
/
desktop_capture
/
linux
/
x11
/
x_window_property
.
h
"
#
include
"
modules
/
desktop_capture
/
linux
/
x11
/
window_finder_x11
.
h
"
#
include
"
modules
/
desktop_capture
/
linux
/
x11
/
x_atom_cache
.
h
"
#
include
"
modules
/
desktop_capture
/
linux
/
x11
/
x_server_pixel_buffer
.
h
"
namespace
webrtc
{
class
WindowCapturerX11
:
public
DesktopCapturer
public
SharedXDisplay
:
:
XEventHandler
{
public
:
explicit
WindowCapturerX11
(
const
DesktopCaptureOptions
&
options
)
;
~
WindowCapturerX11
(
)
override
;
WindowCapturerX11
(
const
WindowCapturerX11
&
)
=
delete
;
WindowCapturerX11
&
operator
=
(
const
WindowCapturerX11
&
)
=
delete
;
static
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateRawWindowCapturer
(
const
DesktopCaptureOptions
&
options
)
;
void
Start
(
Callback
*
callback
)
override
;
void
CaptureFrame
(
)
override
;
bool
GetSourceList
(
SourceList
*
sources
)
override
;
bool
SelectSource
(
SourceId
id
)
override
;
bool
FocusOnSelectedSource
(
)
override
;
bool
IsOccluded
(
const
DesktopVector
&
pos
)
override
;
bool
HandleXEvent
(
const
XEvent
&
event
)
override
;
private
:
Display
*
display
(
)
{
return
x_display_
-
>
display
(
)
;
}
bool
GetWindowTitle
(
:
:
Window
window
std
:
:
string
*
title
)
;
int
GetWindowProcessID
(
:
:
Window
window
)
;
Callback
*
callback_
=
nullptr
;
rtc
:
:
scoped_refptr
<
SharedXDisplay
>
x_display_
;
bool
has_composite_extension_
=
false
;
:
:
Window
selected_window_
=
0
;
XServerPixelBuffer
x_server_pixel_buffer_
;
XAtomCache
atom_cache_
;
WindowFinderX11
window_finder_
;
}
;
}
#
endif
