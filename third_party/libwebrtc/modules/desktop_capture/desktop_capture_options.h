#
ifndef
MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURE_OPTIONS_H_
#
define
MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURE_OPTIONS_H_
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
#
if
defined
(
WEBRTC_USE_X11
)
#
include
"
modules
/
desktop_capture
/
linux
/
x11
/
shared_x_display
.
h
"
#
endif
#
if
defined
(
WEBRTC_USE_PIPEWIRE
)
&
&
!
defined
(
WEBRTC_MOZILLA_BUILD
)
#
include
"
modules
/
desktop_capture
/
linux
/
wayland
/
shared_screencast_stream
.
h
"
#
endif
#
if
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_IOS
)
#
include
"
modules
/
desktop_capture
/
mac
/
desktop_configuration_monitor
.
h
"
#
endif
#
include
"
modules
/
desktop_capture
/
full_screen_window_detector
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
DesktopCaptureOptions
{
public
:
static
DesktopCaptureOptions
CreateDefault
(
)
;
DesktopCaptureOptions
(
)
;
DesktopCaptureOptions
(
const
DesktopCaptureOptions
&
options
)
;
DesktopCaptureOptions
(
DesktopCaptureOptions
&
&
options
)
;
~
DesktopCaptureOptions
(
)
;
DesktopCaptureOptions
&
operator
=
(
const
DesktopCaptureOptions
&
options
)
;
DesktopCaptureOptions
&
operator
=
(
DesktopCaptureOptions
&
&
options
)
;
#
if
defined
(
WEBRTC_USE_X11
)
const
rtc
:
:
scoped_refptr
<
SharedXDisplay
>
&
x_display
(
)
const
{
return
x_display_
;
}
void
set_x_display
(
rtc
:
:
scoped_refptr
<
SharedXDisplay
>
x_display
)
{
x_display_
=
x_display
;
}
#
endif
#
if
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_IOS
)
const
rtc
:
:
scoped_refptr
<
DesktopConfigurationMonitor
>
&
configuration_monitor
(
)
const
{
return
configuration_monitor_
;
}
void
set_configuration_monitor
(
rtc
:
:
scoped_refptr
<
DesktopConfigurationMonitor
>
m
)
{
configuration_monitor_
=
m
;
}
bool
allow_iosurface
(
)
const
{
return
allow_iosurface_
;
}
void
set_allow_iosurface
(
bool
allow
)
{
allow_iosurface_
=
allow
;
}
#
endif
const
rtc
:
:
scoped_refptr
<
FullScreenWindowDetector
>
&
full_screen_window_detector
(
)
const
{
return
full_screen_window_detector_
;
}
void
set_full_screen_window_detector
(
rtc
:
:
scoped_refptr
<
FullScreenWindowDetector
>
detector
)
{
full_screen_window_detector_
=
detector
;
}
bool
use_update_notifications
(
)
const
{
return
use_update_notifications_
;
}
void
set_use_update_notifications
(
bool
use_update_notifications
)
{
use_update_notifications_
=
use_update_notifications
;
}
bool
disable_effects
(
)
const
{
return
disable_effects_
;
}
void
set_disable_effects
(
bool
disable_effects
)
{
disable_effects_
=
disable_effects
;
}
bool
detect_updated_region
(
)
const
{
return
detect_updated_region_
;
}
void
set_detect_updated_region
(
bool
detect_updated_region
)
{
detect_updated_region_
=
detect_updated_region
;
}
#
if
defined
(
WEBRTC_WIN
)
bool
enumerate_current_process_windows
(
)
const
{
return
enumerate_current_process_windows_
;
}
void
set_enumerate_current_process_windows
(
bool
enumerate_current_process_windows
)
{
enumerate_current_process_windows_
=
enumerate_current_process_windows
;
}
bool
allow_use_magnification_api
(
)
const
{
return
allow_use_magnification_api_
;
}
void
set_allow_use_magnification_api
(
bool
allow
)
{
allow_use_magnification_api_
=
allow
;
}
bool
allow_directx_capturer
(
)
const
{
return
allow_directx_capturer_
;
}
void
set_allow_directx_capturer
(
bool
enabled
)
{
allow_directx_capturer_
=
enabled
;
}
bool
allow_cropping_window_capturer
(
)
const
{
return
allow_cropping_window_capturer_
;
}
void
set_allow_cropping_window_capturer
(
bool
allow
)
{
allow_cropping_window_capturer_
=
allow
;
}
#
if
defined
(
RTC_ENABLE_WIN_WGC
)
bool
allow_wgc_capturer
(
)
const
{
return
allow_wgc_capturer_
;
}
void
set_allow_wgc_capturer
(
bool
allow
)
{
allow_wgc_capturer_
=
allow
;
}
#
endif
#
endif
#
if
defined
(
WEBRTC_USE_PIPEWIRE
)
bool
allow_pipewire
(
)
const
{
return
allow_pipewire_
;
}
void
set_allow_pipewire
(
bool
allow
)
{
allow_pipewire_
=
allow
;
}
#
if
!
defined
(
WEBRTC_MOZILLA_BUILD
)
const
rtc
:
:
scoped_refptr
<
SharedScreenCastStream
>
&
screencast_stream
(
)
const
{
return
screencast_stream_
;
}
void
set_screencast_stream
(
rtc
:
:
scoped_refptr
<
SharedScreenCastStream
>
stream
)
{
screencast_stream_
=
stream
;
}
#
endif
#
endif
private
:
#
if
defined
(
WEBRTC_USE_X11
)
rtc
:
:
scoped_refptr
<
SharedXDisplay
>
x_display_
;
#
endif
#
if
defined
(
WEBRTC_USE_PIPEWIRE
)
&
&
!
defined
(
WEBRTC_MOZILLA_BUILD
)
rtc
:
:
scoped_refptr
<
SharedScreenCastStream
>
screencast_stream_
;
#
endif
#
if
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_IOS
)
rtc
:
:
scoped_refptr
<
DesktopConfigurationMonitor
>
configuration_monitor_
;
bool
allow_iosurface_
=
false
;
#
endif
rtc
:
:
scoped_refptr
<
FullScreenWindowDetector
>
full_screen_window_detector_
;
#
if
defined
(
WEBRTC_WIN
)
bool
enumerate_current_process_windows_
=
true
;
bool
allow_use_magnification_api_
=
false
;
bool
allow_directx_capturer_
=
false
;
bool
allow_cropping_window_capturer_
=
false
;
#
if
defined
(
RTC_ENABLE_WIN_WGC
)
bool
allow_wgc_capturer_
=
false
;
#
endif
#
endif
#
if
defined
(
WEBRTC_USE_X11
)
bool
use_update_notifications_
=
false
;
#
else
bool
use_update_notifications_
=
true
;
#
endif
bool
disable_effects_
=
true
;
bool
detect_updated_region_
=
false
;
#
if
defined
(
WEBRTC_USE_PIPEWIRE
)
bool
allow_pipewire_
=
true
;
#
endif
}
;
}
#
endif
