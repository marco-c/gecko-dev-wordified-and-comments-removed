#
ifndef
MODULES_DESKTOP_CAPTURE_CROPPING_WINDOW_CAPTURER_H_
#
define
MODULES_DESKTOP_CAPTURE_CROPPING_WINDOW_CAPTURER_H_
#
include
<
memory
>
#
include
"
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capture_types
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_frame
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_geometry
.
h
"
#
include
"
modules
/
desktop_capture
/
shared_memory
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
RTC_EXPORT
CroppingWindowCapturer
:
public
DesktopCapturer
public
DesktopCapturer
:
:
Callback
{
public
:
static
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateCapturer
(
const
DesktopCaptureOptions
&
options
)
;
~
CroppingWindowCapturer
(
)
override
;
void
Start
(
DesktopCapturer
:
:
Callback
*
callback
)
override
;
void
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
override
;
void
CaptureFrame
(
)
override
;
void
SetExcludedWindow
(
WindowId
window
)
override
;
bool
GetSourceList
(
SourceList
*
sources
)
override
;
bool
SelectSource
(
SourceId
id
)
override
;
bool
FocusOnSelectedSource
(
)
override
;
bool
IsOccluded
(
const
DesktopVector
&
pos
)
override
;
void
OnCaptureResult
(
DesktopCapturer
:
:
Result
result
std
:
:
unique_ptr
<
DesktopFrame
>
frame
)
override
;
protected
:
explicit
CroppingWindowCapturer
(
const
DesktopCaptureOptions
&
options
)
;
virtual
bool
ShouldUseScreenCapturer
(
)
=
0
;
virtual
DesktopRect
GetWindowRectInVirtualScreen
(
)
=
0
;
WindowId
selected_window
(
)
const
{
return
selected_window_
;
}
WindowId
excluded_window
(
)
const
{
return
excluded_window_
;
}
DesktopCapturer
*
window_capturer
(
)
const
{
return
window_capturer_
.
get
(
)
;
}
private
:
DesktopCaptureOptions
options_
;
DesktopCapturer
:
:
Callback
*
callback_
;
std
:
:
unique_ptr
<
DesktopCapturer
>
window_capturer_
;
std
:
:
unique_ptr
<
DesktopCapturer
>
screen_capturer_
;
SourceId
selected_window_
;
WindowId
excluded_window_
;
}
;
}
#
endif
