#
ifndef
MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURER_H_
#
define
MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
type_traits
>
#
include
<
vector
>
#
include
"
modules
/
desktop_capture
/
desktop_capture_types
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_frame
.
h
"
#
include
"
modules
/
desktop_capture
/
shared_memory
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
class
DesktopCaptureOptions
;
class
DesktopFrame
;
class
RTC_EXPORT
DesktopCapturer
{
public
:
enum
class
Result
{
SUCCESS
ERROR_TEMPORARY
ERROR_PERMANENT
MAX_VALUE
=
ERROR_PERMANENT
}
;
class
Callback
{
public
:
virtual
void
OnCaptureResult
(
Result
result
std
:
:
unique_ptr
<
DesktopFrame
>
frame
)
=
0
;
protected
:
virtual
~
Callback
(
)
{
}
}
;
typedef
intptr_t
SourceId
;
static_assert
(
std
:
:
is_same
<
SourceId
ScreenId
>
:
:
value
"
SourceId
should
be
a
same
type
as
ScreenId
.
"
)
;
struct
Source
{
SourceId
id
;
pid_t
pid
;
std
:
:
string
title
;
}
;
typedef
std
:
:
vector
<
Source
>
SourceList
;
virtual
~
DesktopCapturer
(
)
;
virtual
void
Start
(
Callback
*
callback
)
=
0
;
virtual
void
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
;
virtual
void
CaptureFrame
(
)
=
0
;
virtual
void
SetExcludedWindow
(
WindowId
window
)
;
virtual
bool
GetSourceList
(
SourceList
*
sources
)
;
virtual
bool
SelectSource
(
SourceId
id
)
;
virtual
bool
FocusOnSelectedSource
(
)
;
virtual
bool
IsOccluded
(
const
DesktopVector
&
pos
)
;
static
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateWindowCapturer
(
const
DesktopCaptureOptions
&
options
)
;
static
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateScreenCapturer
(
const
DesktopCaptureOptions
&
options
)
;
static
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateTabCapturer
(
const
DesktopCaptureOptions
&
options
)
;
#
if
defined
(
WEBRTC_USE_PIPEWIRE
)
|
|
defined
(
WEBRTC_USE_X11
)
static
bool
IsRunningUnderWayland
(
)
;
#
endif
protected
:
static
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateRawWindowCapturer
(
const
DesktopCaptureOptions
&
options
)
;
static
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateRawScreenCapturer
(
const
DesktopCaptureOptions
&
options
)
;
static
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateRawAppCapturer
(
const
DesktopCaptureOptions
&
options
)
;
static
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateRawTabCapturer
(
const
DesktopCaptureOptions
&
options
)
;
}
;
}
#
endif
