#
ifndef
MODULES_DESKTOP_CAPTURE_SCREEN_CAPTURE_FRAME_QUEUE_H_
#
define
MODULES_DESKTOP_CAPTURE_SCREEN_CAPTURE_FRAME_QUEUE_H_
#
include
<
memory
>
#
include
"
modules
/
desktop_capture
/
desktop_frame
.
h
"
#
include
"
modules
/
desktop_capture
/
shared_desktop_frame
.
h
"
namespace
webrtc
{
template
<
typename
FrameType
>
class
ScreenCaptureFrameQueue
{
public
:
ScreenCaptureFrameQueue
(
)
:
current_
(
0
)
{
}
~
ScreenCaptureFrameQueue
(
)
=
default
;
ScreenCaptureFrameQueue
(
const
ScreenCaptureFrameQueue
&
)
=
delete
;
ScreenCaptureFrameQueue
&
operator
=
(
const
ScreenCaptureFrameQueue
&
)
=
delete
;
void
MoveToNextFrame
(
)
{
current_
=
(
current_
+
1
)
%
kQueueLength
;
}
void
ReplaceCurrentFrame
(
std
:
:
unique_ptr
<
FrameType
>
frame
)
{
frames_
[
current_
]
=
std
:
:
move
(
frame
)
;
}
void
Reset
(
)
{
for
(
int
i
=
0
;
i
<
kQueueLength
;
i
+
+
)
{
frames_
[
i
]
.
reset
(
)
;
}
current_
=
0
;
}
FrameType
*
current_frame
(
)
const
{
return
frames_
[
current_
]
.
get
(
)
;
}
FrameType
*
previous_frame
(
)
const
{
return
frames_
[
(
current_
+
kQueueLength
-
1
)
%
kQueueLength
]
.
get
(
)
;
}
private
:
int
current_
;
static
const
int
kQueueLength
=
2
;
std
:
:
unique_ptr
<
FrameType
>
frames_
[
kQueueLength
]
;
}
;
}
#
endif
