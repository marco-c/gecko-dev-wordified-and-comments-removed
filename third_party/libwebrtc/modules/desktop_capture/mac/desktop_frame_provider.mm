#
include
"
modules
/
desktop_capture
/
mac
/
desktop_frame_provider
.
h
"
#
include
<
utility
>
#
include
"
modules
/
desktop_capture
/
mac
/
desktop_frame_cgimage
.
h
"
#
include
"
modules
/
desktop_capture
/
mac
/
desktop_frame_iosurface
.
h
"
namespace
webrtc
{
DesktopFrameProvider
:
:
DesktopFrameProvider
(
bool
allow_iosurface
)
:
allow_iosurface_
(
allow_iosurface
)
{
thread_checker_
.
Detach
(
)
;
}
DesktopFrameProvider
:
:
~
DesktopFrameProvider
(
)
{
RTC_DCHECK
(
thread_checker_
.
IsCurrent
(
)
)
;
Release
(
)
;
}
std
:
:
unique_ptr
<
DesktopFrame
>
DesktopFrameProvider
:
:
TakeLatestFrameForDisplay
(
CGDirectDisplayID
display_id
)
{
RTC_DCHECK
(
thread_checker_
.
IsCurrent
(
)
)
;
if
(
!
allow_iosurface_
|
|
!
io_surfaces_
[
display_id
]
)
{
return
DesktopFrameCGImage
:
:
CreateForDisplay
(
display_id
)
;
}
return
io_surfaces_
[
display_id
]
-
>
Share
(
)
;
}
void
DesktopFrameProvider
:
:
InvalidateIOSurface
(
CGDirectDisplayID
display_id
rtc
:
:
ScopedCFTypeRef
<
IOSurfaceRef
>
io_surface
)
{
RTC_DCHECK
(
thread_checker_
.
IsCurrent
(
)
)
;
if
(
!
allow_iosurface_
)
{
return
;
}
std
:
:
unique_ptr
<
DesktopFrameIOSurface
>
desktop_frame_iosurface
=
DesktopFrameIOSurface
:
:
Wrap
(
io_surface
)
;
io_surfaces_
[
display_id
]
=
desktop_frame_iosurface
?
SharedDesktopFrame
:
:
Wrap
(
std
:
:
move
(
desktop_frame_iosurface
)
)
:
nullptr
;
}
void
DesktopFrameProvider
:
:
Release
(
)
{
RTC_DCHECK
(
thread_checker_
.
IsCurrent
(
)
)
;
if
(
!
allow_iosurface_
)
{
return
;
}
io_surfaces_
.
clear
(
)
;
}
}
