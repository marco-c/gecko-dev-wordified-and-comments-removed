#
ifndef
MODULES_VIDEO_CODING_H26X_PACKET_BUFFER_H_
#
define
MODULES_VIDEO_CODING_H26X_PACKET_BUFFER_H_
#
include
<
array
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
modules
/
video_coding
/
packet_buffer
.
h
"
#
include
"
rtc_base
/
numerics
/
sequence_number_unwrapper
.
h
"
namespace
webrtc
{
class
H26xPacketBuffer
{
public
:
using
Packet
=
video_coding
:
:
PacketBuffer
:
:
Packet
;
using
InsertResult
=
video_coding
:
:
PacketBuffer
:
:
InsertResult
;
explicit
H26xPacketBuffer
(
bool
h264_idr_only_keyframes_allowed
)
;
ABSL_MUST_USE_RESULT
InsertResult
InsertPacket
(
std
:
:
unique_ptr
<
Packet
>
packet
)
;
void
SetSpropParameterSets
(
const
std
:
:
string
&
sprop_parameter_sets
)
;
private
:
struct
PpsInfo
{
PpsInfo
(
)
=
default
;
PpsInfo
(
PpsInfo
&
&
rhs
)
=
default
;
PpsInfo
&
operator
=
(
PpsInfo
&
&
rhs
)
=
default
;
~
PpsInfo
(
)
=
default
;
uint32_t
sps_id
=
0
;
size_t
size
=
0
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
payload
;
}
;
struct
SpsInfo
{
SpsInfo
(
)
=
default
;
SpsInfo
(
SpsInfo
&
&
rhs
)
=
default
;
SpsInfo
&
operator
=
(
SpsInfo
&
&
rhs
)
=
default
;
~
SpsInfo
(
)
=
default
;
int
width
=
-
1
;
int
height
=
-
1
;
size_t
size
=
0
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
payload
;
}
;
static
constexpr
int
kBufferSize
=
2048
;
std
:
:
unique_ptr
<
Packet
>
&
GetPacket
(
int64_t
unwrapped_seq_num
)
;
bool
BeginningOfStream
(
const
Packet
&
packet
)
const
;
InsertResult
FindFrames
(
int64_t
unwrapped_seq_num
)
;
bool
MaybeAssembleFrame
(
int64_t
start_seq_num_unwrapped
int64_t
end_sequence_number_unwrapped
InsertResult
&
result
)
;
void
InsertSpsPpsNalus
(
const
std
:
:
vector
<
uint8_t
>
&
sps
const
std
:
:
vector
<
uint8_t
>
&
pps
)
;
bool
FixH264Packet
(
Packet
&
packet
)
;
const
bool
h264_idr_only_keyframes_allowed_
;
std
:
:
array
<
std
:
:
unique_ptr
<
Packet
>
kBufferSize
>
buffer_
;
absl
:
:
optional
<
int64_t
>
last_continuous_unwrapped_seq_num_
;
SeqNumUnwrapper
<
uint16_t
>
seq_num_unwrapper_
;
std
:
:
map
<
uint32_t
PpsInfo
>
pps_data_
;
std
:
:
map
<
uint32_t
SpsInfo
>
sps_data_
;
}
;
}
#
endif
