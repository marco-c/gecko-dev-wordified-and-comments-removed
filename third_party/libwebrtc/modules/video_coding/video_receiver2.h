#
ifndef
MODULES_VIDEO_CODING_VIDEO_RECEIVER2_H_
#
define
MODULES_VIDEO_CODING_VIDEO_RECEIVER2_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
modules
/
video_coding
/
decoder_database
.
h
"
#
include
"
modules
/
video_coding
/
encoded_frame
.
h
"
#
include
"
modules
/
video_coding
/
generic_decoder
.
h
"
#
include
"
modules
/
video_coding
/
timing
/
timing
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
VideoReceiver2
{
public
:
VideoReceiver2
(
Clock
*
clock
VCMTiming
*
timing
const
FieldTrialsView
&
field_trials
)
;
~
VideoReceiver2
(
)
;
void
RegisterReceiveCodec
(
uint8_t
payload_type
const
VideoDecoder
:
:
Settings
&
decoder_settings
)
;
void
DeregisterReceiveCodec
(
uint8_t
payload_type
)
;
void
DeregisterReceiveCodecs
(
)
;
void
RegisterExternalDecoder
(
std
:
:
unique_ptr
<
VideoDecoder
>
decoder
uint8_t
payload_type
)
;
bool
IsExternalDecoderRegistered
(
uint8_t
payload_type
)
const
;
int32_t
RegisterReceiveCallback
(
VCMReceiveCallback
*
receive_callback
)
;
int32_t
Decode
(
const
VCMEncodedFrame
*
frame
)
;
private
:
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
construction_sequence_checker_
;
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
decoder_sequence_checker_
;
Clock
*
const
clock_
;
VCMDecodedFrameCallback
decoded_frame_callback_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
VideoDecoder
>
>
video_decoders_
;
VCMDecoderDataBase
codec_database_
;
}
;
}
#
endif
