#
include
"
modules
/
video_coding
/
timing
/
timing
.
h
"
#
include
"
api
/
units
/
frequency
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
scoped_key_value_config
.
h
"
namespace
webrtc
{
namespace
{
constexpr
Frequency
k25Fps
=
Frequency
:
:
Hertz
(
25
)
;
constexpr
Frequency
k90kHz
=
Frequency
:
:
KiloHertz
(
90
)
;
}
TEST
(
ReceiverTimingTest
JitterDelay
)
{
test
:
:
ScopedKeyValueConfig
field_trials
;
SimulatedClock
clock
(
0
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
uint32_t
timestamp
=
0
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
timing
.
Reset
(
)
;
timing
.
IncomingTimestamp
(
timestamp
clock
.
CurrentTime
(
)
)
;
TimeDelta
jitter_delay
=
TimeDelta
:
:
Millis
(
20
)
;
timing
.
SetJitterDelay
(
jitter_delay
)
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
timing
.
set_render_delay
(
TimeDelta
:
:
Zero
(
)
)
;
auto
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
jitter_delay
wait_time
)
;
jitter_delay
+
=
TimeDelta
:
:
Millis
(
VCMTiming
:
:
kDelayMaxChangeMsPerS
+
10
)
;
timestamp
+
=
90000
;
clock
.
AdvanceTimeMilliseconds
(
1000
)
;
timing
.
SetJitterDelay
(
jitter_delay
)
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
jitter_delay
-
TimeDelta
:
:
Millis
(
10
)
wait_time
)
;
timestamp
+
=
90000
;
clock
.
AdvanceTimeMilliseconds
(
1000
)
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
jitter_delay
wait_time
)
;
const
int
kNumFrames
=
300
;
for
(
int
i
=
0
;
i
<
kNumFrames
;
i
+
+
)
{
clock
.
AdvanceTime
(
1
/
k25Fps
)
;
timestamp
+
=
k90kHz
/
k25Fps
;
timing
.
IncomingTimestamp
(
timestamp
clock
.
CurrentTime
(
)
)
;
}
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
jitter_delay
wait_time
)
;
const
TimeDelta
kDecodeTime
=
TimeDelta
:
:
Millis
(
10
)
;
for
(
int
i
=
0
;
i
<
k25Fps
.
hertz
(
)
;
i
+
+
)
{
clock
.
AdvanceTime
(
kDecodeTime
)
;
timing
.
StopDecodeTimer
(
kDecodeTime
clock
.
CurrentTime
(
)
)
;
timestamp
+
=
k90kHz
/
k25Fps
;
clock
.
AdvanceTime
(
1
/
k25Fps
-
kDecodeTime
)
;
timing
.
IncomingTimestamp
(
timestamp
clock
.
CurrentTime
(
)
)
;
}
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
jitter_delay
wait_time
)
;
const
TimeDelta
kMinTotalDelay
=
TimeDelta
:
:
Millis
(
200
)
;
timing
.
set_min_playout_delay
(
kMinTotalDelay
)
;
clock
.
AdvanceTimeMilliseconds
(
5000
)
;
timestamp
+
=
5
*
90000
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
const
TimeDelta
kRenderDelay
=
TimeDelta
:
:
Millis
(
10
)
;
timing
.
set_render_delay
(
kRenderDelay
)
;
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
kMinTotalDelay
-
kDecodeTime
-
kRenderDelay
wait_time
)
;
EXPECT_EQ
(
kMinTotalDelay
timing
.
TargetVideoDelay
(
)
)
;
timing
.
set_min_playout_delay
(
TimeDelta
:
:
Zero
(
)
)
;
clock
.
AdvanceTimeMilliseconds
(
5000
)
;
timestamp
+
=
5
*
90000
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
}
TEST
(
ReceiverTimingTest
TimestampWrapAround
)
{
constexpr
auto
kStartTime
=
Timestamp
:
:
Millis
(
1337
)
;
test
:
:
ScopedKeyValueConfig
field_trials
;
SimulatedClock
clock
(
kStartTime
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
constexpr
uint32_t
kRtpTicksPerFrame
=
k90kHz
/
k25Fps
;
uint32_t
timestamp
=
0xFFFFFFFFu
-
3
*
kRtpTicksPerFrame
;
for
(
int
i
=
0
;
i
<
5
;
+
+
i
)
{
timing
.
IncomingTimestamp
(
timestamp
clock
.
CurrentTime
(
)
)
;
clock
.
AdvanceTime
(
1
/
k25Fps
)
;
timestamp
+
=
kRtpTicksPerFrame
;
EXPECT_EQ
(
kStartTime
+
3
/
k25Fps
timing
.
RenderTime
(
0xFFFFFFFFu
clock
.
CurrentTime
(
)
)
)
;
EXPECT_EQ
(
kStartTime
+
3
/
k25Fps
+
TimeDelta
:
:
Millis
(
1
)
timing
.
RenderTime
(
89u
clock
.
CurrentTime
(
)
)
)
;
}
}
TEST
(
ReceiverTimingTest
UseLowLatencyRenderer
)
{
test
:
:
ScopedKeyValueConfig
field_trials
;
SimulatedClock
clock
(
0
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
EXPECT_FALSE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
timing
.
set_min_playout_delay
(
TimeDelta
:
:
Millis
(
10
)
)
;
timing
.
set_max_playout_delay
(
TimeDelta
:
:
Millis
(
20
)
)
;
EXPECT_FALSE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
timing
.
set_min_playout_delay
(
TimeDelta
:
:
Millis
(
0
)
)
;
EXPECT_TRUE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
timing
.
set_max_playout_delay
(
TimeDelta
:
:
Millis
(
0
)
)
;
EXPECT_TRUE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
timing
.
set_max_playout_delay
(
TimeDelta
:
:
Millis
(
500
)
)
;
EXPECT_TRUE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
timing
.
set_max_playout_delay
(
TimeDelta
:
:
Millis
(
501
)
)
;
EXPECT_FALSE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
}
TEST
(
ReceiverTimingTest
MaxWaitingTimeIsZeroForZeroRenderTime
)
{
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
constexpr
TimeDelta
kTimeDelta
=
1
/
Frequency
:
:
Hertz
(
60
)
;
constexpr
Timestamp
kZeroRenderTime
=
Timestamp
:
:
Zero
(
)
;
SimulatedClock
clock
(
kStartTimeUs
)
;
test
:
:
ScopedKeyValueConfig
field_trials
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
timing
.
set_max_playout_delay
(
TimeDelta
:
:
Zero
(
)
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
clock
.
AdvanceTime
(
kTimeDelta
)
;
Timestamp
now
=
clock
.
CurrentTime
(
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
}
Timestamp
now
=
clock
.
CurrentTime
(
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
}
TEST
(
ReceiverTimingTest
MaxWaitingTimeZeroDelayPacingExperiment
)
{
constexpr
TimeDelta
kMinPacing
=
TimeDelta
:
:
Millis
(
3
)
;
test
:
:
ScopedKeyValueConfig
field_trials
(
"
WebRTC
-
ZeroPlayoutDelay
/
min_pacing
:
3ms
/
"
)
;
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
constexpr
TimeDelta
kTimeDelta
=
1
/
Frequency
:
:
Hertz
(
60
)
;
constexpr
auto
kZeroRenderTime
=
Timestamp
:
:
Zero
(
)
;
SimulatedClock
clock
(
kStartTimeUs
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
clock
.
AdvanceTime
(
kTimeDelta
)
;
Timestamp
now
=
clock
.
CurrentTime
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
timing
.
SetLastDecodeScheduledTimestamp
(
now
)
;
}
auto
now
=
clock
.
CurrentTime
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
kMinPacing
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
kMinPacing
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
kMinPacing
)
;
constexpr
TimeDelta
kTwoMs
=
TimeDelta
:
:
Millis
(
2
)
;
clock
.
AdvanceTime
(
kTwoMs
)
;
now
=
clock
.
CurrentTime
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
kMinPacing
-
kTwoMs
)
;
timing
.
SetLastDecodeScheduledTimestamp
(
now
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
kMinPacing
)
;
}
TEST
(
ReceiverTimingTest
DefaultMaxWaitingTimeUnaffectedByPacingExperiment
)
{
test
:
:
ScopedKeyValueConfig
field_trials
(
"
WebRTC
-
ZeroPlayoutDelay
/
min_pacing
:
3ms
/
"
)
;
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
const
TimeDelta
kTimeDelta
=
TimeDelta
:
:
Millis
(
1000
.
0
/
60
.
0
)
;
SimulatedClock
clock
(
kStartTimeUs
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
clock
.
AdvanceTime
(
kTimeDelta
)
;
auto
now
=
clock
.
CurrentTime
(
)
;
Timestamp
render_time
=
now
+
TimeDelta
:
:
Millis
(
30
)
;
TimeDelta
estimated_processing_delay
=
(
render_time
-
now
)
-
timing
.
MaxWaitingTime
(
render_time
now
false
)
;
EXPECT_GT
(
estimated_processing_delay
TimeDelta
:
:
Zero
(
)
)
;
for
(
int
i
=
0
;
i
<
5
;
+
+
i
)
{
render_time
+
=
kTimeDelta
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
render_time
now
false
)
render_time
-
now
-
estimated_processing_delay
)
;
}
}
TEST
(
ReceiverTimingTest
MaxWaitingTimeReturnsZeroIfTooManyFramesQueuedIsTrue
)
{
constexpr
TimeDelta
kMinPacing
=
TimeDelta
:
:
Millis
(
3
)
;
test
:
:
ScopedKeyValueConfig
field_trials
(
"
WebRTC
-
ZeroPlayoutDelay
/
min_pacing
:
3ms
/
"
)
;
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
const
TimeDelta
kTimeDelta
=
TimeDelta
:
:
Millis
(
1000
.
0
/
60
.
0
)
;
constexpr
auto
kZeroRenderTime
=
Timestamp
:
:
Zero
(
)
;
SimulatedClock
clock
(
kStartTimeUs
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
clock
.
AdvanceTime
(
kTimeDelta
)
;
auto
now
=
clock
.
CurrentTime
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
timing
.
SetLastDecodeScheduledTimestamp
(
now
)
;
}
auto
now_ms
=
clock
.
CurrentTime
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now_ms
false
)
kMinPacing
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now_ms
true
)
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now_ms
true
)
TimeDelta
:
:
Zero
(
)
)
;
}
TEST
(
ReceiverTimingTest
UpdateCurrentDelayCapsWhenOffByMicroseconds
)
{
test
:
:
ScopedKeyValueConfig
field_trials
;
SimulatedClock
clock
(
0
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
timing
.
set_min_playout_delay
(
TimeDelta
:
:
Millis
(
200
)
)
;
timing
.
UpdateCurrentDelay
(
Timestamp
:
:
Millis
(
900
)
Timestamp
:
:
Millis
(
1000
)
)
;
timing
.
set_min_playout_delay
(
TimeDelta
:
:
Millis
(
50
)
)
;
Timestamp
decode_time
=
Timestamp
:
:
Millis
(
1337
)
;
Timestamp
render_time
=
decode_time
+
TimeDelta
:
:
Millis
(
10
)
+
TimeDelta
:
:
Micros
(
37
)
;
timing
.
UpdateCurrentDelay
(
render_time
decode_time
)
;
EXPECT_EQ
(
timing
.
GetTimings
(
)
.
current_delay
timing
.
TargetVideoDelay
(
)
)
;
}
}
