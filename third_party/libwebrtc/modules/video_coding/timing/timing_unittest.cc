#
include
"
modules
/
video_coding
/
timing
/
timing
.
h
"
#
include
<
cstdint
>
#
include
"
api
/
units
/
frequency
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
scoped_key_value_config
.
h
"
namespace
webrtc
{
namespace
{
constexpr
Frequency
k25Fps
=
Frequency
:
:
Hertz
(
25
)
;
constexpr
Frequency
k90kHz
=
Frequency
:
:
KiloHertz
(
90
)
;
MATCHER
(
HasConsistentVideoDelayTimings
"
"
)
{
bool
p1
=
arg
.
minimum_delay
>
=
TimeDelta
:
:
Zero
(
)
;
bool
p2
=
arg
.
estimated_max_decode_time
>
=
TimeDelta
:
:
Zero
(
)
;
bool
p3
=
arg
.
render_delay
>
=
TimeDelta
:
:
Zero
(
)
;
bool
p4
=
arg
.
min_playout_delay
>
=
TimeDelta
:
:
Zero
(
)
;
bool
p5
=
arg
.
max_playout_delay
>
=
TimeDelta
:
:
Zero
(
)
;
bool
p6
=
arg
.
target_delay
>
=
TimeDelta
:
:
Zero
(
)
;
bool
p7
=
arg
.
current_delay
>
=
TimeDelta
:
:
Zero
(
)
;
*
result_listener
<
<
"
\
np
:
"
<
<
p1
<
<
p2
<
<
p3
<
<
p4
<
<
p5
<
<
p6
<
<
p7
;
bool
p
=
p1
&
&
p2
&
&
p3
&
&
p4
&
&
p5
&
&
p6
&
&
p7
;
bool
m1
=
arg
.
minimum_delay
<
=
arg
.
target_delay
;
if
(
!
m1
)
{
*
result_listener
<
<
"
\
nminimum_delay
:
"
<
<
ToString
(
arg
.
minimum_delay
)
<
<
"
"
<
<
"
target_delay
:
"
<
<
ToString
(
arg
.
target_delay
)
<
<
"
\
n
"
;
}
bool
m2
=
arg
.
minimum_delay
<
=
arg
.
current_delay
;
if
(
!
m2
)
{
*
result_listener
<
<
"
\
nminimum_delay
:
"
<
<
ToString
(
arg
.
minimum_delay
)
<
<
"
"
<
<
"
current_delay
:
"
<
<
ToString
(
arg
.
current_delay
)
;
}
bool
m3
=
arg
.
target_delay
>
=
arg
.
min_playout_delay
;
if
(
!
m3
)
{
*
result_listener
<
<
"
\
ntarget_delay
:
"
<
<
ToString
(
arg
.
target_delay
)
<
<
"
"
<
<
"
min_playout_delay
:
"
<
<
ToString
(
arg
.
min_playout_delay
)
<
<
"
\
n
"
;
}
bool
m5
=
arg
.
current_delay
>
=
arg
.
min_playout_delay
;
if
(
!
m5
)
{
*
result_listener
<
<
"
\
ncurrent_delay
:
"
<
<
ToString
(
arg
.
current_delay
)
<
<
"
"
<
<
"
min_playout_delay
:
"
<
<
ToString
(
arg
.
min_playout_delay
)
<
<
"
\
n
"
;
}
bool
m6
=
arg
.
current_delay
<
=
arg
.
max_playout_delay
;
if
(
!
m6
)
{
*
result_listener
<
<
"
\
ncurrent_delay
:
"
<
<
ToString
(
arg
.
current_delay
)
<
<
"
"
<
<
"
max_playout_delay
:
"
<
<
ToString
(
arg
.
max_playout_delay
)
<
<
"
\
n
"
;
}
bool
m
=
m1
&
&
m2
&
&
m3
&
&
m5
&
&
m6
;
return
p
&
&
m
;
}
}
TEST
(
VCMTimingTest
JitterDelay
)
{
test
:
:
ScopedKeyValueConfig
field_trials
;
SimulatedClock
clock
(
0
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
uint32_t
timestamp
=
0
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
timing
.
Reset
(
)
;
timing
.
IncomingTimestamp
(
timestamp
clock
.
CurrentTime
(
)
)
;
TimeDelta
jitter_delay
=
TimeDelta
:
:
Millis
(
20
)
;
timing
.
SetJitterDelay
(
jitter_delay
)
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
timing
.
set_render_delay
(
TimeDelta
:
:
Zero
(
)
)
;
auto
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
jitter_delay
wait_time
)
;
jitter_delay
+
=
TimeDelta
:
:
Millis
(
VCMTiming
:
:
kDelayMaxChangeMsPerS
+
10
)
;
timestamp
+
=
90000
;
clock
.
AdvanceTimeMilliseconds
(
1000
)
;
timing
.
SetJitterDelay
(
jitter_delay
)
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
jitter_delay
-
TimeDelta
:
:
Millis
(
10
)
wait_time
)
;
timestamp
+
=
90000
;
clock
.
AdvanceTimeMilliseconds
(
1000
)
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
jitter_delay
wait_time
)
;
const
int
kNumFrames
=
300
;
for
(
int
i
=
0
;
i
<
kNumFrames
;
i
+
+
)
{
clock
.
AdvanceTime
(
1
/
k25Fps
)
;
timestamp
+
=
k90kHz
/
k25Fps
;
timing
.
IncomingTimestamp
(
timestamp
clock
.
CurrentTime
(
)
)
;
}
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
jitter_delay
wait_time
)
;
const
TimeDelta
kDecodeTime
=
TimeDelta
:
:
Millis
(
10
)
;
for
(
int
i
=
0
;
i
<
k25Fps
.
hertz
(
)
;
i
+
+
)
{
clock
.
AdvanceTime
(
kDecodeTime
)
;
timing
.
StopDecodeTimer
(
kDecodeTime
clock
.
CurrentTime
(
)
)
;
timestamp
+
=
k90kHz
/
k25Fps
;
clock
.
AdvanceTime
(
1
/
k25Fps
-
kDecodeTime
)
;
timing
.
IncomingTimestamp
(
timestamp
clock
.
CurrentTime
(
)
)
;
}
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
jitter_delay
wait_time
)
;
const
TimeDelta
kMinTotalDelay
=
TimeDelta
:
:
Millis
(
200
)
;
timing
.
set_min_playout_delay
(
kMinTotalDelay
)
;
clock
.
AdvanceTimeMilliseconds
(
5000
)
;
timestamp
+
=
5
*
90000
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
const
TimeDelta
kRenderDelay
=
TimeDelta
:
:
Millis
(
10
)
;
timing
.
set_render_delay
(
kRenderDelay
)
;
wait_time
=
timing
.
MaxWaitingTime
(
timing
.
RenderTime
(
timestamp
clock
.
CurrentTime
(
)
)
clock
.
CurrentTime
(
)
false
)
;
EXPECT_EQ
(
kMinTotalDelay
-
kDecodeTime
-
kRenderDelay
wait_time
)
;
EXPECT_EQ
(
kMinTotalDelay
timing
.
TargetVideoDelay
(
)
)
;
timing
.
set_min_playout_delay
(
TimeDelta
:
:
Zero
(
)
)
;
clock
.
AdvanceTimeMilliseconds
(
5000
)
;
timestamp
+
=
5
*
90000
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
EXPECT_THAT
(
timing
.
GetTimings
(
)
HasConsistentVideoDelayTimings
(
)
)
;
}
TEST
(
VCMTimingTest
TimestampWrapAround
)
{
constexpr
auto
kStartTime
=
Timestamp
:
:
Millis
(
1337
)
;
test
:
:
ScopedKeyValueConfig
field_trials
;
SimulatedClock
clock
(
kStartTime
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
constexpr
uint32_t
kRtpTicksPerFrame
=
k90kHz
/
k25Fps
;
uint32_t
timestamp
=
0xFFFFFFFFu
-
3
*
kRtpTicksPerFrame
;
for
(
int
i
=
0
;
i
<
5
;
+
+
i
)
{
timing
.
IncomingTimestamp
(
timestamp
clock
.
CurrentTime
(
)
)
;
clock
.
AdvanceTime
(
1
/
k25Fps
)
;
timestamp
+
=
kRtpTicksPerFrame
;
EXPECT_EQ
(
kStartTime
+
3
/
k25Fps
timing
.
RenderTime
(
0xFFFFFFFFu
clock
.
CurrentTime
(
)
)
)
;
EXPECT_EQ
(
kStartTime
+
3
/
k25Fps
+
TimeDelta
:
:
Millis
(
1
)
timing
.
RenderTime
(
89u
clock
.
CurrentTime
(
)
)
)
;
}
EXPECT_THAT
(
timing
.
GetTimings
(
)
HasConsistentVideoDelayTimings
(
)
)
;
}
TEST
(
VCMTimingTest
UseLowLatencyRenderer
)
{
test
:
:
ScopedKeyValueConfig
field_trials
;
SimulatedClock
clock
(
0
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
EXPECT_FALSE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
timing
.
set_playout_delay
(
{
TimeDelta
:
:
Millis
(
10
)
TimeDelta
:
:
Millis
(
20
)
}
)
;
EXPECT_FALSE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
timing
.
set_playout_delay
(
{
TimeDelta
:
:
Zero
(
)
TimeDelta
:
:
Millis
(
20
)
}
)
;
EXPECT_TRUE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
timing
.
set_playout_delay
(
{
TimeDelta
:
:
Zero
(
)
TimeDelta
:
:
Zero
(
)
}
)
;
EXPECT_TRUE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
timing
.
set_playout_delay
(
{
TimeDelta
:
:
Zero
(
)
TimeDelta
:
:
Millis
(
500
)
}
)
;
EXPECT_TRUE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
timing
.
set_playout_delay
(
{
TimeDelta
:
:
Zero
(
)
TimeDelta
:
:
Millis
(
501
)
}
)
;
EXPECT_FALSE
(
timing
.
RenderParameters
(
)
.
use_low_latency_rendering
)
;
EXPECT_THAT
(
timing
.
GetTimings
(
)
HasConsistentVideoDelayTimings
(
)
)
;
}
TEST
(
VCMTimingTest
MaxWaitingTimeIsZeroForZeroRenderTime
)
{
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
constexpr
TimeDelta
kTimeDelta
=
1
/
Frequency
:
:
Hertz
(
60
)
;
constexpr
Timestamp
kZeroRenderTime
=
Timestamp
:
:
Zero
(
)
;
SimulatedClock
clock
(
kStartTimeUs
)
;
test
:
:
ScopedKeyValueConfig
field_trials
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
timing
.
set_playout_delay
(
{
TimeDelta
:
:
Zero
(
)
TimeDelta
:
:
Zero
(
)
}
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
clock
.
AdvanceTime
(
kTimeDelta
)
;
Timestamp
now
=
clock
.
CurrentTime
(
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
}
Timestamp
now
=
clock
.
CurrentTime
(
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_THAT
(
timing
.
GetTimings
(
)
HasConsistentVideoDelayTimings
(
)
)
;
}
TEST
(
VCMTimingTest
MaxWaitingTimeZeroDelayPacingExperiment
)
{
constexpr
TimeDelta
kMinPacing
=
TimeDelta
:
:
Millis
(
3
)
;
test
:
:
ScopedKeyValueConfig
field_trials
(
"
WebRTC
-
ZeroPlayoutDelay
/
min_pacing
:
3ms
/
"
)
;
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
constexpr
TimeDelta
kTimeDelta
=
1
/
Frequency
:
:
Hertz
(
60
)
;
constexpr
auto
kZeroRenderTime
=
Timestamp
:
:
Zero
(
)
;
SimulatedClock
clock
(
kStartTimeUs
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
clock
.
AdvanceTime
(
kTimeDelta
)
;
Timestamp
now
=
clock
.
CurrentTime
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
timing
.
SetLastDecodeScheduledTimestamp
(
now
)
;
}
auto
now
=
clock
.
CurrentTime
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
kMinPacing
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
kMinPacing
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
kMinPacing
)
;
constexpr
TimeDelta
kTwoMs
=
TimeDelta
:
:
Millis
(
2
)
;
clock
.
AdvanceTime
(
kTwoMs
)
;
now
=
clock
.
CurrentTime
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
kMinPacing
-
kTwoMs
)
;
timing
.
SetLastDecodeScheduledTimestamp
(
now
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
kMinPacing
)
;
EXPECT_THAT
(
timing
.
GetTimings
(
)
HasConsistentVideoDelayTimings
(
)
)
;
}
TEST
(
VCMTimingTest
DefaultMaxWaitingTimeUnaffectedByPacingExperiment
)
{
test
:
:
ScopedKeyValueConfig
field_trials
(
"
WebRTC
-
ZeroPlayoutDelay
/
min_pacing
:
3ms
/
"
)
;
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
const
TimeDelta
kTimeDelta
=
TimeDelta
:
:
Millis
(
1000
.
0
/
60
.
0
)
;
SimulatedClock
clock
(
kStartTimeUs
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
clock
.
AdvanceTime
(
kTimeDelta
)
;
auto
now
=
clock
.
CurrentTime
(
)
;
Timestamp
render_time
=
now
+
TimeDelta
:
:
Millis
(
30
)
;
TimeDelta
estimated_processing_delay
=
(
render_time
-
now
)
-
timing
.
MaxWaitingTime
(
render_time
now
false
)
;
EXPECT_GT
(
estimated_processing_delay
TimeDelta
:
:
Zero
(
)
)
;
for
(
int
i
=
0
;
i
<
5
;
+
+
i
)
{
render_time
+
=
kTimeDelta
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
render_time
now
false
)
render_time
-
now
-
estimated_processing_delay
)
;
}
EXPECT_THAT
(
timing
.
GetTimings
(
)
HasConsistentVideoDelayTimings
(
)
)
;
}
TEST
(
VCMTimingTest
MaxWaitingTimeReturnsZeroIfTooManyFramesQueuedIsTrue
)
{
constexpr
TimeDelta
kMinPacing
=
TimeDelta
:
:
Millis
(
3
)
;
test
:
:
ScopedKeyValueConfig
field_trials
(
"
WebRTC
-
ZeroPlayoutDelay
/
min_pacing
:
3ms
/
"
)
;
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
const
TimeDelta
kTimeDelta
=
TimeDelta
:
:
Millis
(
1000
.
0
/
60
.
0
)
;
constexpr
auto
kZeroRenderTime
=
Timestamp
:
:
Zero
(
)
;
SimulatedClock
clock
(
kStartTimeUs
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
clock
.
AdvanceTime
(
kTimeDelta
)
;
auto
now
=
clock
.
CurrentTime
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now
false
)
TimeDelta
:
:
Zero
(
)
)
;
timing
.
SetLastDecodeScheduledTimestamp
(
now
)
;
}
auto
now_ms
=
clock
.
CurrentTime
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now_ms
false
)
kMinPacing
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now_ms
true
)
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTime
now_ms
true
)
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_THAT
(
timing
.
GetTimings
(
)
HasConsistentVideoDelayTimings
(
)
)
;
}
TEST
(
VCMTimingTest
UpdateCurrentDelayCapsWhenOffByMicroseconds
)
{
test
:
:
ScopedKeyValueConfig
field_trials
;
SimulatedClock
clock
(
0
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
timing
.
set_min_playout_delay
(
TimeDelta
:
:
Millis
(
200
)
)
;
timing
.
UpdateCurrentDelay
(
Timestamp
:
:
Millis
(
900
)
Timestamp
:
:
Millis
(
1000
)
)
;
timing
.
set_min_playout_delay
(
TimeDelta
:
:
Millis
(
50
)
)
;
Timestamp
decode_time
=
Timestamp
:
:
Millis
(
1337
)
;
Timestamp
render_time
=
decode_time
+
TimeDelta
:
:
Millis
(
10
)
+
TimeDelta
:
:
Micros
(
37
)
;
timing
.
UpdateCurrentDelay
(
render_time
decode_time
)
;
EXPECT_EQ
(
timing
.
GetTimings
(
)
.
current_delay
timing
.
TargetVideoDelay
(
)
)
;
}
TEST
(
VCMTimingTest
GetTimings
)
{
test
:
:
ScopedKeyValueConfig
field_trials
;
SimulatedClock
clock
(
33
)
;
VCMTiming
timing
(
&
clock
field_trials
)
;
timing
.
Reset
(
)
;
TimeDelta
render_delay
=
TimeDelta
:
:
Millis
(
11
)
;
timing
.
set_render_delay
(
render_delay
)
;
TimeDelta
min_playout_delay
=
TimeDelta
:
:
Millis
(
50
)
;
TimeDelta
max_playout_delay
=
TimeDelta
:
:
Millis
(
500
)
;
timing
.
set_playout_delay
(
{
min_playout_delay
max_playout_delay
}
)
;
timing
.
IncomingTimestamp
(
3000
clock
.
CurrentTime
(
)
)
;
clock
.
AdvanceTimeMilliseconds
(
1
)
;
Timestamp
render_time
=
timing
.
RenderTime
(
3000
clock
.
CurrentTime
(
)
)
;
TimeDelta
minimum_delay
=
TimeDelta
:
:
Millis
(
123
)
;
timing
.
SetJitterDelay
(
minimum_delay
)
;
timing
.
UpdateCurrentDelay
(
render_time
clock
.
CurrentTime
(
)
)
;
clock
.
AdvanceTimeMilliseconds
(
100
)
;
TimeDelta
decode_time
=
TimeDelta
:
:
Millis
(
4
)
;
timing
.
StopDecodeTimer
(
decode_time
clock
.
CurrentTime
(
)
)
;
VCMTiming
:
:
VideoDelayTimings
timings
=
timing
.
GetTimings
(
)
;
EXPECT_EQ
(
timings
.
num_decoded_frames
1u
)
;
EXPECT_EQ
(
timings
.
minimum_delay
minimum_delay
)
;
EXPECT_EQ
(
timings
.
estimated_max_decode_time
TimeDelta
:
:
Zero
(
)
)
;
EXPECT_EQ
(
timings
.
render_delay
render_delay
)
;
EXPECT_EQ
(
timings
.
min_playout_delay
min_playout_delay
)
;
EXPECT_EQ
(
timings
.
max_playout_delay
max_playout_delay
)
;
EXPECT_EQ
(
timings
.
target_delay
minimum_delay
)
;
EXPECT_EQ
(
timings
.
current_delay
minimum_delay
)
;
EXPECT_THAT
(
timings
HasConsistentVideoDelayTimings
(
)
)
;
}
TEST
(
VCMTimingTest
GetTimingsBeforeAndAfterValidRtpTimestamp
)
{
SimulatedClock
clock
(
33
)
;
test
:
:
ScopedKeyValueConfig
field_trials
;
VCMTiming
timing
(
&
clock
field_trials
)
;
TimeDelta
min_playout_delay
=
TimeDelta
:
:
Millis
(
50
)
;
timing
.
set_playout_delay
(
{
min_playout_delay
TimeDelta
:
:
Millis
(
500
)
}
)
;
constexpr
int
decodeable_frame_cnt
=
10
;
constexpr
uint32_t
any_time_elapsed
=
17
;
constexpr
uint32_t
rtp_ts_base
=
3000
;
constexpr
uint32_t
rtp_ts_delta_10fps
=
9000
;
constexpr
uint32_t
frame_ts_delta_10fps
=
100
;
uint32_t
rtp_ts
=
rtp_ts_base
;
for
(
int
i
=
0
;
i
<
decodeable_frame_cnt
;
i
+
+
)
{
clock
.
AdvanceTimeMilliseconds
(
any_time_elapsed
)
;
rtp_ts
+
=
rtp_ts_delta_10fps
;
Timestamp
render_time
=
timing
.
RenderTime
(
rtp_ts
clock
.
CurrentTime
(
)
)
;
EXPECT_EQ
(
render_time
clock
.
CurrentTime
(
)
)
;
}
Timestamp
valid_frame_ts
=
clock
.
CurrentTime
(
)
;
timing
.
IncomingTimestamp
(
rtp_ts
valid_frame_ts
)
;
clock
.
AdvanceTimeMilliseconds
(
any_time_elapsed
)
;
rtp_ts
+
=
rtp_ts_delta_10fps
;
Timestamp
render_time
=
timing
.
RenderTime
(
rtp_ts
clock
.
CurrentTime
(
)
)
;
EXPECT_EQ
(
render_time
valid_frame_ts
+
TimeDelta
:
:
Millis
(
frame_ts_delta_10fps
)
+
min_playout_delay
)
;
}
}
