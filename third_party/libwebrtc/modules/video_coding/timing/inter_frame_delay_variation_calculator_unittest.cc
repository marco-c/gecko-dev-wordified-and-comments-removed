#
include
"
modules
/
video_coding
/
timing
/
inter_frame_delay_variation_calculator
.
h
"
#
include
<
limits
>
#
include
<
optional
>
#
include
"
api
/
units
/
frequency
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
Frequency
k30Fps
=
Frequency
:
:
Hertz
(
30
)
;
constexpr
TimeDelta
kFrameDelay
=
1
/
k30Fps
;
constexpr
uint32_t
kRtpTicksPerFrame
=
Frequency
:
:
KiloHertz
(
90
)
/
k30Fps
;
constexpr
Timestamp
kStartTime
=
Timestamp
:
:
Millis
(
1337
)
;
}
using
:
:
testing
:
:
Eq
;
using
:
:
testing
:
:
Optional
;
TEST
(
InterFrameDelayVariationCalculatorTest
OldRtpTimestamp
)
{
InterFrameDelayVariationCalculator
ifdv_calculator
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
180000
kStartTime
)
Optional
(
TimeDelta
:
:
Zero
(
)
)
)
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
90000
kStartTime
)
Eq
(
std
:
:
nullopt
)
)
;
}
TEST
(
InterFrameDelayVariationCalculatorTest
NegativeWrapAroundIsSameAsOldRtpTimestamp
)
{
InterFrameDelayVariationCalculator
ifdv_calculator
;
uint32_t
rtp
=
1500
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
kStartTime
)
Optional
(
TimeDelta
:
:
Zero
(
)
)
)
;
rtp
-
=
3000
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
kStartTime
)
Eq
(
std
:
:
nullopt
)
)
;
}
TEST
(
InterFrameDelayVariationCalculatorTest
CorrectDelayForFrames
)
{
InterFrameDelayVariationCalculator
ifdv_calculator
;
SimulatedClock
clock
(
kStartTime
)
;
uint32_t
rtp
=
90000
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Zero
(
)
)
)
;
clock
.
AdvanceTime
(
kFrameDelay
)
;
rtp
+
=
kRtpTicksPerFrame
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Zero
(
)
)
)
;
clock
.
AdvanceTime
(
kFrameDelay
-
TimeDelta
:
:
Millis
(
3
)
)
;
rtp
+
=
kRtpTicksPerFrame
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
-
TimeDelta
:
:
Millis
(
3
)
)
)
;
clock
.
AdvanceTime
(
kFrameDelay
+
TimeDelta
:
:
Micros
(
5125
)
)
;
rtp
+
=
kRtpTicksPerFrame
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Micros
(
5125
)
)
)
;
clock
.
AdvanceTime
(
kFrameDelay
)
;
rtp
+
=
kRtpTicksPerFrame
/
2
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
kFrameDelay
/
2
.
0
)
)
;
clock
.
AdvanceTime
(
kFrameDelay
)
;
rtp
+
=
1
.
5
*
kRtpTicksPerFrame
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
-
kFrameDelay
/
2
.
0
)
)
;
}
TEST
(
InterFrameDelayVariationCalculatorTest
PositiveWrapAround
)
{
InterFrameDelayVariationCalculator
ifdv_calculator
;
SimulatedClock
clock
(
kStartTime
)
;
uint32_t
rtp
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
-
1500
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Zero
(
)
)
)
;
rtp
+
=
kRtpTicksPerFrame
;
clock
.
AdvanceTime
(
kFrameDelay
+
TimeDelta
:
:
Millis
(
1
)
)
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Millis
(
1
)
)
)
;
}
TEST
(
InterFrameDelayVariationCalculatorTest
MultipleWrapArounds
)
{
constexpr
Frequency
k90Khz
=
Frequency
:
:
KiloHertz
(
90
)
;
constexpr
uint32_t
kHalfRtp
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
/
2
;
constexpr
TimeDelta
kWrapAroundDelay
=
kHalfRtp
/
k90Khz
;
InterFrameDelayVariationCalculator
ifdv_calculator
;
SimulatedClock
clock
(
kStartTime
)
;
uint32_t
rtp
=
0
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Zero
(
)
)
)
;
rtp
+
=
kHalfRtp
;
clock
.
AdvanceTime
(
kWrapAroundDelay
)
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Zero
(
)
)
)
;
rtp
+
=
kHalfRtp
+
1
;
clock
.
AdvanceTime
(
kWrapAroundDelay
+
TimeDelta
:
:
Millis
(
1
)
)
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Millis
(
1
)
-
(
1
/
k90Khz
)
)
)
;
rtp
+
=
kHalfRtp
;
clock
.
AdvanceTime
(
kWrapAroundDelay
)
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Zero
(
)
)
)
;
rtp
+
=
kHalfRtp
+
1
;
clock
.
AdvanceTime
(
kWrapAroundDelay
-
TimeDelta
:
:
Millis
(
1
)
)
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
-
TimeDelta
:
:
Millis
(
1
)
-
(
1
/
k90Khz
)
)
)
;
rtp
+
=
kHalfRtp
;
clock
.
AdvanceTime
(
TimeDelta
:
:
Millis
(
10
)
)
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
-
(
kWrapAroundDelay
-
TimeDelta
:
:
Millis
(
10
)
)
)
)
;
rtp
+
=
kHalfRtp
+
1
;
clock
.
AdvanceTime
(
TimeDelta
:
:
Millis
(
10
)
)
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
-
(
kWrapAroundDelay
-
TimeDelta
:
:
Millis
(
10
)
+
(
1
/
k90Khz
)
)
)
)
;
}
TEST
(
InterFrameDelayVariationCalculatorTest
NegativeWrapAroundAfterPositiveWrapAround
)
{
InterFrameDelayVariationCalculator
ifdv_calculator
;
SimulatedClock
clock
(
kStartTime
)
;
uint32_t
rtp
=
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
-
1500
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Zero
(
)
)
)
;
rtp
+
=
kRtpTicksPerFrame
;
clock
.
AdvanceTime
(
kFrameDelay
)
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Optional
(
TimeDelta
:
:
Zero
(
)
)
)
;
rtp
-
=
kRtpTicksPerFrame
;
clock
.
AdvanceTime
(
kFrameDelay
)
;
EXPECT_THAT
(
ifdv_calculator
.
Calculate
(
rtp
clock
.
CurrentTime
(
)
)
Eq
(
std
:
:
nullopt
)
)
;
}
}
