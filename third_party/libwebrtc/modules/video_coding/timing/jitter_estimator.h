#
ifndef
MODULES_VIDEO_CODING_TIMING_JITTER_ESTIMATOR_H_
#
define
MODULES_VIDEO_CODING_TIMING_JITTER_ESTIMATOR_H_
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
frequency
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
modules
/
video_coding
/
timing
/
frame_delay_delta_kalman_filter
.
h
"
#
include
"
modules
/
video_coding
/
timing
/
rtt_filter
.
h
"
#
include
"
rtc_base
/
rolling_accumulator
.
h
"
namespace
webrtc
{
class
Clock
;
class
JitterEstimator
{
public
:
explicit
JitterEstimator
(
Clock
*
clock
const
FieldTrialsView
&
field_trials
)
;
~
JitterEstimator
(
)
;
JitterEstimator
(
const
JitterEstimator
&
)
=
delete
;
JitterEstimator
&
operator
=
(
const
JitterEstimator
&
)
=
delete
;
void
Reset
(
)
;
void
UpdateEstimate
(
TimeDelta
frame_delay
DataSize
frame_size
)
;
TimeDelta
GetJitterEstimate
(
double
rtt_multiplier
absl
:
:
optional
<
TimeDelta
>
rtt_mult_add_cap
)
;
void
FrameNacked
(
)
;
void
UpdateRtt
(
TimeDelta
rtt
)
;
static
constexpr
TimeDelta
OPERATING_SYSTEM_JITTER
=
TimeDelta
:
:
Millis
(
10
)
;
private
:
double
var_noise_
;
void
EstimateRandomJitter
(
double
d_dT
)
;
double
NoiseThreshold
(
)
const
;
TimeDelta
CalculateEstimate
(
)
;
void
PostProcessEstimate
(
)
;
Frequency
GetFrameRate
(
)
const
;
FrameDelayDeltaKalmanFilter
kalman_filter_
;
double
avg_frame_size_bytes_
;
double
var_frame_size_
;
double
max_frame_size_bytes_
;
double
frame_size_sum_bytes_
;
uint32_t
frame_size_count_
;
absl
:
:
optional
<
Timestamp
>
last_update_time_
;
absl
:
:
optional
<
TimeDelta
>
prev_estimate_
;
absl
:
:
optional
<
DataSize
>
prev_frame_size_
;
double
avg_noise_
;
uint32_t
alpha_count_
;
TimeDelta
filter_jitter_estimate_
=
TimeDelta
:
:
Zero
(
)
;
uint32_t
startup_count_
;
Timestamp
latest_nack_
=
Timestamp
:
:
Zero
(
)
;
uint32_t
nack_count_
;
RttFilter
rtt_filter_
;
rtc
:
:
RollingAccumulator
<
uint64_t
>
fps_counter_
;
Clock
*
clock_
;
}
;
}
#
endif
