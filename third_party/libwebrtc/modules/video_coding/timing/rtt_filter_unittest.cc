#
include
"
modules
/
video_coding
/
timing
/
rtt_filter
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
TEST
(
RttFilterTest
RttIsCapped
)
{
RttFilter
rtt_filter
;
rtt_filter
.
Update
(
TimeDelta
:
:
Seconds
(
500
)
)
;
EXPECT_EQ
(
rtt_filter
.
Rtt
(
)
TimeDelta
:
:
Seconds
(
3
)
)
;
}
TEST
(
RttFilterTest
PositiveJumpDetection
)
{
RttFilter
rtt_filter
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
1400
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
1500
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
1600
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
1600
)
)
;
EXPECT_EQ
(
rtt_filter
.
Rtt
(
)
TimeDelta
:
:
Millis
(
1600
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
1600
)
)
;
EXPECT_EQ
(
rtt_filter
.
Rtt
(
)
TimeDelta
:
:
Millis
(
1600
)
)
;
}
TEST
(
RttFilterTest
NegativeJumpDetection
)
{
RttFilter
rtt_filter
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
1500
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
EXPECT_EQ
(
rtt_filter
.
Rtt
(
)
TimeDelta
:
:
Millis
(
1500
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
300
)
)
;
EXPECT_EQ
(
rtt_filter
.
Rtt
(
)
TimeDelta
:
:
Millis
(
300
)
)
;
}
TEST
(
RttFilterTest
JumpsResetByDirectionShift
)
{
RttFilter
rtt_filter
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
1500
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
200
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
2000
)
)
;
EXPECT_EQ
(
rtt_filter
.
Rtt
(
)
TimeDelta
:
:
Millis
(
2000
)
)
;
rtt_filter
.
Update
(
TimeDelta
:
:
Millis
(
300
)
)
;
EXPECT_EQ
(
rtt_filter
.
Rtt
(
)
TimeDelta
:
:
Millis
(
2000
)
)
;
}
TEST
(
RttFilterTest
DriftDetection
)
{
RttFilter
rtt_filter
;
constexpr
TimeDelta
kStartRtt
=
TimeDelta
:
:
Millis
(
1000
)
;
constexpr
TimeDelta
kDriftTarget
=
TimeDelta
:
:
Millis
(
700
)
;
constexpr
TimeDelta
kDelta
=
TimeDelta
:
:
Millis
(
30
)
;
for
(
TimeDelta
rtt
=
kStartRtt
;
rtt
>
=
kDriftTarget
;
rtt
-
=
kDelta
)
rtt_filter
.
Update
(
rtt
)
;
EXPECT_EQ
(
rtt_filter
.
Rtt
(
)
kStartRtt
)
;
for
(
int
i
=
0
;
i
<
50
;
+
+
i
)
rtt_filter
.
Update
(
kDriftTarget
)
;
EXPECT_EQ
(
rtt_filter
.
Rtt
(
)
kDriftTarget
)
;
}
}
