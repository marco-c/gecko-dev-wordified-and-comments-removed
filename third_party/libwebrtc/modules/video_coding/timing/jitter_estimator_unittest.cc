#
include
"
modules
/
video_coding
/
timing
/
jitter_estimator
.
h
"
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
frequency
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
rtc_base
/
numerics
/
histogram_percentile_counter
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
scoped_key_value_config
.
h
"
namespace
webrtc
{
class
TestJitterEstimator
:
public
:
:
testing
:
:
Test
{
protected
:
TestJitterEstimator
(
)
:
fake_clock_
(
0
)
{
}
virtual
void
SetUp
(
)
{
estimator_
=
std
:
:
make_unique
<
JitterEstimator
>
(
&
fake_clock_
field_trials_
)
;
}
SimulatedClock
fake_clock_
;
test
:
:
ScopedKeyValueConfig
field_trials_
;
std
:
:
unique_ptr
<
JitterEstimator
>
estimator_
;
}
;
class
ValueGenerator
{
public
:
explicit
ValueGenerator
(
int32_t
amplitude
)
:
amplitude_
(
amplitude
)
counter_
(
0
)
{
}
virtual
~
ValueGenerator
(
)
=
default
;
TimeDelta
Delay
(
)
const
{
return
TimeDelta
:
:
Millis
(
(
counter_
%
11
)
-
5
)
*
amplitude_
;
}
DataSize
FrameSize
(
)
const
{
return
DataSize
:
:
Bytes
(
1000
+
Delay
(
)
.
ms
(
)
/
5
)
;
}
void
Advance
(
)
{
+
+
counter_
;
}
private
:
const
int32_t
amplitude_
;
int64_t
counter_
;
}
;
TEST_F
(
TestJitterEstimator
TestLowRate
)
{
ValueGenerator
gen
(
10
)
;
TimeDelta
time_delta
=
1
/
Frequency
:
:
Hertz
(
5
)
;
for
(
int
i
=
0
;
i
<
60
;
+
+
i
)
{
estimator_
-
>
UpdateEstimate
(
gen
.
Delay
(
)
gen
.
FrameSize
(
)
)
;
fake_clock_
.
AdvanceTime
(
time_delta
)
;
if
(
i
>
2
)
EXPECT_EQ
(
estimator_
-
>
GetJitterEstimate
(
0
absl
:
:
nullopt
)
TimeDelta
:
:
Zero
(
)
)
;
gen
.
Advance
(
)
;
}
}
TEST_F
(
TestJitterEstimator
TestLowRateDisabled
)
{
test
:
:
ScopedKeyValueConfig
field_trials
(
field_trials_
"
WebRTC
-
ReducedJitterDelayKillSwitch
/
Enabled
/
"
)
;
SetUp
(
)
;
ValueGenerator
gen
(
10
)
;
TimeDelta
time_delta
=
1
/
Frequency
:
:
Hertz
(
5
)
;
for
(
int
i
=
0
;
i
<
60
;
+
+
i
)
{
estimator_
-
>
UpdateEstimate
(
gen
.
Delay
(
)
gen
.
FrameSize
(
)
)
;
fake_clock_
.
AdvanceTime
(
time_delta
)
;
if
(
i
>
2
)
EXPECT_GT
(
estimator_
-
>
GetJitterEstimate
(
0
absl
:
:
nullopt
)
TimeDelta
:
:
Zero
(
)
)
;
gen
.
Advance
(
)
;
}
}
TEST_F
(
TestJitterEstimator
RttMultAddCap
)
{
std
:
:
vector
<
std
:
:
pair
<
TimeDelta
rtc
:
:
HistogramPercentileCounter
>
>
jitter_by_rtt_mult_cap
;
jitter_by_rtt_mult_cap
.
emplace_back
(
TimeDelta
:
:
Millis
(
10
)
1000
)
;
jitter_by_rtt_mult_cap
.
emplace_back
(
TimeDelta
:
:
Millis
(
200
)
1000
)
;
for
(
auto
&
[
rtt_mult_add_cap
jitter
]
:
jitter_by_rtt_mult_cap
)
{
SetUp
(
)
;
ValueGenerator
gen
(
50
)
;
TimeDelta
time_delta
=
1
/
Frequency
:
:
Hertz
(
30
)
;
constexpr
TimeDelta
kRtt
=
TimeDelta
:
:
Millis
(
250
)
;
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
estimator_
-
>
UpdateEstimate
(
gen
.
Delay
(
)
gen
.
FrameSize
(
)
)
;
fake_clock_
.
AdvanceTime
(
time_delta
)
;
estimator_
-
>
FrameNacked
(
)
;
estimator_
-
>
UpdateRtt
(
kRtt
)
;
jitter
.
Add
(
estimator_
-
>
GetJitterEstimate
(
1
.
0
rtt_mult_add_cap
)
.
ms
(
)
)
;
gen
.
Advance
(
)
;
}
}
EXPECT_GT
(
*
jitter_by_rtt_mult_cap
[
1
]
.
second
.
GetPercentile
(
1
.
0
)
*
jitter_by_rtt_mult_cap
[
0
]
.
second
.
GetPercentile
(
1
.
0
)
*
1
.
25
)
;
}
}
