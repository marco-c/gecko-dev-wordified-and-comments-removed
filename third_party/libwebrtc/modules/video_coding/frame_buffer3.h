#
ifndef
MODULES_VIDEO_CODING_FRAME_BUFFER3_H_
#
define
MODULES_VIDEO_CODING_FRAME_BUFFER3_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
absl
/
container
/
inlined_vector
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
api
/
video
/
encoded_frame
.
h
"
#
include
"
modules
/
video_coding
/
utility
/
decoded_frames_history
.
h
"
namespace
webrtc
{
class
FrameBuffer
{
public
:
struct
DecodabilityInfo
{
uint32_t
next_rtp_timestamp
;
uint32_t
last_rtp_timestamp
;
}
;
FrameBuffer
(
int
max_size
int
max_decode_history
const
FieldTrialsView
&
field_trials
)
;
FrameBuffer
(
const
FrameBuffer
&
)
=
delete
;
FrameBuffer
&
operator
=
(
const
FrameBuffer
&
)
=
delete
;
~
FrameBuffer
(
)
=
default
;
void
InsertFrame
(
std
:
:
unique_ptr
<
EncodedFrame
>
frame
)
;
absl
:
:
InlinedVector
<
std
:
:
unique_ptr
<
EncodedFrame
>
4
>
ExtractNextDecodableTemporalUnit
(
)
;
void
DropNextDecodableTemporalUnit
(
)
;
absl
:
:
optional
<
int64_t
>
LastContinuousFrameId
(
)
const
;
absl
:
:
optional
<
int64_t
>
LastContinuousTemporalUnitFrameId
(
)
const
;
absl
:
:
optional
<
DecodabilityInfo
>
DecodableTemporalUnitsInfo
(
)
const
;
int
GetTotalNumberOfContinuousTemporalUnits
(
)
const
;
int
GetTotalNumberOfDroppedFrames
(
)
const
;
size_t
CurrentSize
(
)
const
;
private
:
struct
FrameInfo
{
std
:
:
unique_ptr
<
EncodedFrame
>
encoded_frame
;
bool
continuous
=
false
;
}
;
using
FrameMap
=
std
:
:
map
<
int64_t
FrameInfo
>
;
using
FrameIterator
=
FrameMap
:
:
iterator
;
struct
TemporalUnit
{
FrameIterator
first_frame
;
FrameIterator
last_frame
;
}
;
bool
IsContinuous
(
const
FrameIterator
&
it
)
const
;
void
PropagateContinuity
(
const
FrameIterator
&
frame_it
)
;
void
FindNextAndLastDecodableTemporalUnit
(
)
;
void
Clear
(
)
;
const
bool
legacy_frame_id_jump_behavior_
;
const
size_t
max_size_
;
FrameMap
frames_
;
absl
:
:
optional
<
TemporalUnit
>
next_decodable_temporal_unit_
;
absl
:
:
optional
<
DecodabilityInfo
>
decodable_temporal_units_info_
;
absl
:
:
optional
<
int64_t
>
last_continuous_frame_id_
;
absl
:
:
optional
<
int64_t
>
last_continuous_temporal_unit_frame_id_
;
video_coding
:
:
DecodedFramesHistory
decoded_frame_history_
;
int
num_continuous_temporal_units_
=
0
;
int
num_dropped_frames_
=
0
;
}
;
}
#
endif
