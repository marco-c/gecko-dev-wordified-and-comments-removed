#
ifndef
MODULES_VIDEO_CODING_UTILITY_DECODED_FRAMES_HISTORY_H_
#
define
MODULES_VIDEO_CODING_UTILITY_DECODED_FRAMES_HISTORY_H_
#
include
<
stdint
.
h
>
#
include
<
bitset
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
video
/
encoded_frame
.
h
"
namespace
webrtc
{
namespace
video_coding
{
class
DecodedFramesHistory
{
public
:
explicit
DecodedFramesHistory
(
size_t
window_size
)
;
~
DecodedFramesHistory
(
)
;
void
InsertDecoded
(
const
VideoLayerFrameId
&
frameid
uint32_t
timestamp
)
;
bool
WasDecoded
(
const
VideoLayerFrameId
&
frameid
)
;
void
Clear
(
)
;
absl
:
:
optional
<
VideoLayerFrameId
>
GetLastDecodedFrameId
(
)
;
absl
:
:
optional
<
uint32_t
>
GetLastDecodedFrameTimestamp
(
)
;
private
:
struct
LayerHistory
{
LayerHistory
(
)
;
~
LayerHistory
(
)
;
std
:
:
vector
<
bool
>
buffer
;
absl
:
:
optional
<
int64_t
>
last_picture_id
;
}
;
int
PictureIdToIndex
(
int64_t
frame_id
)
const
;
const
int
window_size_
;
std
:
:
vector
<
LayerHistory
>
layers_
;
absl
:
:
optional
<
VideoLayerFrameId
>
last_decoded_frame_
;
absl
:
:
optional
<
uint32_t
>
last_decoded_frame_timestamp_
;
}
;
}
}
#
endif
