#
ifndef
MODULES_VIDEO_CODING_UTILITY_IVF_FILE_READER_H_
#
define
MODULES_VIDEO_CODING_UTILITY_IVF_FILE_READER_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
utility
>
#
include
"
api
/
video
/
encoded_image
.
h
"
#
include
"
api
/
video
/
video_codec_type
.
h
"
#
include
"
rtc_base
/
system
/
file_wrapper
.
h
"
namespace
webrtc
{
class
IvfFileReader
{
public
:
static
std
:
:
unique_ptr
<
IvfFileReader
>
Create
(
FileWrapper
file
)
;
~
IvfFileReader
(
)
;
IvfFileReader
(
const
IvfFileReader
&
)
=
delete
;
IvfFileReader
&
operator
=
(
const
IvfFileReader
&
)
=
delete
;
bool
Reset
(
)
;
VideoCodecType
GetVideoCodecType
(
)
const
{
return
codec_type_
;
}
size_t
GetFramesCount
(
)
const
{
return
num_frames_
;
}
std
:
:
optional
<
EncodedImage
>
NextFrame
(
)
;
bool
HasMoreFrames
(
)
const
{
return
num_read_frames_
<
num_frames_
;
}
bool
HasError
(
)
const
{
return
has_error_
;
}
uint16_t
GetFrameWidth
(
)
const
{
return
width_
;
}
uint16_t
GetFrameHeight
(
)
const
{
return
height_
;
}
bool
Close
(
)
;
private
:
struct
FrameHeader
{
size_t
frame_size
;
int64_t
timestamp
;
}
;
explicit
IvfFileReader
(
FileWrapper
file
)
:
file_
(
std
:
:
move
(
file
)
)
{
}
std
:
:
optional
<
VideoCodecType
>
ParseCodecType
(
uint8_t
*
buffer
size_t
start_pos
)
;
std
:
:
optional
<
FrameHeader
>
ReadNextFrameHeader
(
)
;
VideoCodecType
codec_type_
;
size_t
num_frames_
;
size_t
num_read_frames_
;
uint16_t
width_
;
uint16_t
height_
;
uint32_t
time_scale_
;
FileWrapper
file_
;
std
:
:
optional
<
FrameHeader
>
next_frame_header_
;
bool
has_error_
;
}
;
}
#
endif
