#
ifndef
MODULES_VIDEO_CODING_UTILITY_QUALITY_SCALER_H_
#
define
MODULES_VIDEO_CODING_UTILITY_QUALITY_SCALER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
optional
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
rtc_base
/
experiments
/
quality_scaling_experiment
.
h
"
#
include
"
rtc_base
/
numerics
/
moving_average
.
h
"
#
include
"
rtc_base
/
ref_count
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
namespace
webrtc
{
class
QualityScalerQpUsageHandlerCallbackInterface
;
class
QualityScalerQpUsageHandlerInterface
;
class
QualityScaler
{
public
:
QualityScaler
(
QualityScalerQpUsageHandlerInterface
*
handler
VideoEncoder
:
:
QpThresholds
thresholds
const
FieldTrialsView
&
field_trials
)
;
virtual
~
QualityScaler
(
)
;
void
ReportDroppedFrameByMediaOpt
(
)
;
void
ReportDroppedFrameByEncoder
(
)
;
void
ReportQp
(
int
qp
int64_t
time_sent_us
)
;
void
SetQpThresholds
(
VideoEncoder
:
:
QpThresholds
thresholds
)
;
protected
:
QualityScaler
(
QualityScalerQpUsageHandlerInterface
*
handler
VideoEncoder
:
:
QpThresholds
thresholds
const
FieldTrialsView
&
field_trials
int64_t
sampling_period_ms
)
;
private
:
class
QpSmoother
;
class
CheckQpTask
;
class
CheckQpTaskHandlerCallback
;
enum
class
CheckQpResult
{
kInsufficientSamples
kNormalQp
kHighQp
kLowQp
}
;
void
StartNextCheckQpTask
(
)
;
CheckQpResult
CheckQp
(
)
const
;
void
ClearSamples
(
)
;
std
:
:
unique_ptr
<
CheckQpTask
>
pending_qp_task_
RTC_GUARDED_BY
(
&
task_checker_
)
;
QualityScalerQpUsageHandlerInterface
*
const
handler_
RTC_GUARDED_BY
(
&
task_checker_
)
;
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
task_checker_
;
VideoEncoder
:
:
QpThresholds
thresholds_
RTC_GUARDED_BY
(
&
task_checker_
)
;
const
int64_t
sampling_period_ms_
;
bool
fast_rampup_
RTC_GUARDED_BY
(
&
task_checker_
)
;
rtc
:
:
MovingAverage
average_qp_
RTC_GUARDED_BY
(
&
task_checker_
)
;
rtc
:
:
MovingAverage
framedrop_percent_media_opt_
RTC_GUARDED_BY
(
&
task_checker_
)
;
rtc
:
:
MovingAverage
framedrop_percent_all_
RTC_GUARDED_BY
(
&
task_checker_
)
;
const
bool
experiment_enabled_
;
QualityScalingExperiment
:
:
Config
config_
RTC_GUARDED_BY
(
&
task_checker_
)
;
std
:
:
unique_ptr
<
QpSmoother
>
qp_smoother_high_
RTC_GUARDED_BY
(
&
task_checker_
)
;
std
:
:
unique_ptr
<
QpSmoother
>
qp_smoother_low_
RTC_GUARDED_BY
(
&
task_checker_
)
;
const
size_t
min_frames_needed_
;
const
double
initial_scale_factor_
;
const
std
:
:
optional
<
double
>
scale_factor_
;
}
;
class
QualityScalerQpUsageHandlerInterface
{
public
:
virtual
~
QualityScalerQpUsageHandlerInterface
(
)
;
virtual
void
OnReportQpUsageHigh
(
)
=
0
;
virtual
void
OnReportQpUsageLow
(
)
=
0
;
}
;
}
#
endif
