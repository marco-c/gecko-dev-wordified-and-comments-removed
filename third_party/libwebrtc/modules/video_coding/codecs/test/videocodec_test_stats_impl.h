#
ifndef
MODULES_VIDEO_CODING_CODECS_TEST_VIDEOCODEC_TEST_STATS_IMPL_H_
#
define
MODULES_VIDEO_CODING_CODECS_TEST_VIDEOCODEC_TEST_STATS_IMPL_H_
#
include
<
stddef
.
h
>
#
include
<
map
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
test
/
videocodec_test_stats
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
units
/
frequency
.
h
"
namespace
webrtc
{
namespace
test
{
class
VideoCodecTestStatsImpl
:
public
VideoCodecTestStats
{
public
:
VideoCodecTestStatsImpl
(
)
;
~
VideoCodecTestStatsImpl
(
)
override
;
void
AddFrame
(
const
FrameStatistics
&
frame_stat
)
;
FrameStatistics
*
GetFrame
(
size_t
frame_number
size_t
spatial_idx
)
;
FrameStatistics
*
GetFrameWithTimestamp
(
size_t
timestamp
size_t
spatial_idx
)
;
FrameStatistics
*
GetOrAddFrame
(
size_t
timestamp_rtp
size_t
spatial_idx
)
;
std
:
:
vector
<
FrameStatistics
>
GetFrameStatistics
(
)
const
override
;
std
:
:
vector
<
VideoStatistics
>
SliceAndCalcLayerVideoStatistic
(
size_t
first_frame_num
size_t
last_frame_num
)
override
;
VideoStatistics
SliceAndCalcAggregatedVideoStatistic
(
size_t
first_frame_num
size_t
last_frame_num
)
;
VideoStatistics
CalcVideoStatistic
(
size_t
first_frame
size_t
last_frame
DataRate
target_bitrate
Frequency
target_framerate
)
override
;
size_t
Size
(
size_t
spatial_idx
)
;
void
Clear
(
)
;
private
:
VideoCodecTestStats
:
:
FrameStatistics
AggregateFrameStatistic
(
size_t
frame_num
size_t
spatial_idx
bool
aggregate_independent_layers
)
;
size_t
CalcLayerTargetBitrateKbps
(
size_t
first_frame_num
size_t
last_frame_num
size_t
spatial_idx
size_t
temporal_idx
bool
aggregate_independent_layers
)
;
VideoCodecTestStats
:
:
VideoStatistics
SliceAndCalcVideoStatistic
(
size_t
first_frame_num
size_t
last_frame_num
size_t
spatial_idx
size_t
temporal_idx
bool
aggregate_independent_layers
std
:
:
optional
<
DataRate
>
target_bitrate
std
:
:
optional
<
Frequency
>
target_framerate
)
;
void
GetNumberOfEncodedLayers
(
size_t
first_frame_num
size_t
last_frame_num
size_t
*
num_encoded_spatial_layers
size_t
*
num_encoded_temporal_layers
)
;
std
:
:
map
<
size_t
std
:
:
vector
<
FrameStatistics
>
>
layer_stats_
;
std
:
:
map
<
size_t
std
:
:
map
<
size_t
size_t
>
>
rtp_timestamp_to_frame_num_
;
}
;
}
}
#
endif
