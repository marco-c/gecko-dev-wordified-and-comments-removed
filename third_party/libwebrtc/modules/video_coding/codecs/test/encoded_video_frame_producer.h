#
ifndef
MODULES_VIDEO_CODING_CODECS_TEST_ENCODED_VIDEO_FRAME_PRODUCER_H_
#
define
MODULES_VIDEO_CODING_CODECS_TEST_ENCODED_VIDEO_FRAME_PRODUCER_H_
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
api
/
transport
/
rtp
/
dependency_descriptor
.
h
"
#
include
"
api
/
video
/
encoded_image
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
namespace
webrtc
{
class
EncodedVideoFrameProducer
{
public
:
struct
EncodedFrame
{
EncodedImage
encoded_image
;
CodecSpecificInfo
codec_specific_info
;
}
;
explicit
EncodedVideoFrameProducer
(
VideoEncoder
&
encoder
)
:
encoder_
(
encoder
)
{
}
EncodedVideoFrameProducer
(
const
EncodedVideoFrameProducer
&
)
=
delete
;
EncodedVideoFrameProducer
&
operator
=
(
const
EncodedVideoFrameProducer
&
)
=
delete
;
EncodedVideoFrameProducer
&
SetNumInputFrames
(
int
value
)
;
EncodedVideoFrameProducer
&
ForceKeyFrame
(
)
;
EncodedVideoFrameProducer
&
SetResolution
(
RenderResolution
value
)
;
EncodedVideoFrameProducer
&
SetFramerateFps
(
int
value
)
;
EncodedVideoFrameProducer
&
SetRtpTimestamp
(
uint32_t
value
)
;
EncodedVideoFrameProducer
&
SetPresentationTimestamp
(
Timestamp
value
)
;
std
:
:
vector
<
EncodedFrame
>
Encode
(
)
;
private
:
VideoEncoder
&
encoder_
;
uint32_t
rtp_timestamp_
=
1000
;
Timestamp
presentation_timestamp_
=
Timestamp
:
:
Micros
(
1000
)
;
int
num_input_frames_
=
1
;
int
framerate_fps_
=
30
;
RenderResolution
resolution_
=
{
320
180
}
;
std
:
:
vector
<
VideoFrameType
>
next_frame_type_
=
{
VideoFrameType
:
:
kVideoFrameKey
}
;
}
;
inline
EncodedVideoFrameProducer
&
EncodedVideoFrameProducer
:
:
SetNumInputFrames
(
int
value
)
{
RTC_DCHECK_GT
(
value
0
)
;
num_input_frames_
=
value
;
return
*
this
;
}
inline
EncodedVideoFrameProducer
&
EncodedVideoFrameProducer
:
:
ForceKeyFrame
(
)
{
next_frame_type_
=
{
VideoFrameType
:
:
kVideoFrameKey
}
;
return
*
this
;
}
inline
EncodedVideoFrameProducer
&
EncodedVideoFrameProducer
:
:
SetResolution
(
RenderResolution
value
)
{
resolution_
=
value
;
return
*
this
;
}
inline
EncodedVideoFrameProducer
&
EncodedVideoFrameProducer
:
:
SetFramerateFps
(
int
value
)
{
RTC_DCHECK_GT
(
value
0
)
;
framerate_fps_
=
value
;
return
*
this
;
}
inline
EncodedVideoFrameProducer
&
EncodedVideoFrameProducer
:
:
SetRtpTimestamp
(
uint32_t
value
)
{
rtp_timestamp_
=
value
;
return
*
this
;
}
inline
EncodedVideoFrameProducer
&
EncodedVideoFrameProducer
:
:
SetPresentationTimestamp
(
Timestamp
value
)
{
presentation_timestamp_
=
value
;
return
*
this
;
}
}
#
endif
