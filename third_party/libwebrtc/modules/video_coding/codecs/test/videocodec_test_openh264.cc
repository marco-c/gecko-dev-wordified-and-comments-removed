#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
test
/
create_videocodec_test_fixture
.
h
"
#
include
"
api
/
test
/
videocodec_test_fixture
.
h
"
#
include
"
media
/
base
/
media_constants
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
h264
/
include
/
h264_globals
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
test
/
videocodec_test_fixture_impl
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
testsupport
/
file_utils
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
{
const
int
kCifWidth
=
352
;
const
int
kCifHeight
=
288
;
const
int
kNumFrames
=
100
;
VideoCodecTestFixture
:
:
Config
CreateConfig
(
)
{
VideoCodecTestFixture
:
:
Config
config
;
config
.
filename
=
"
foreman_cif
"
;
config
.
filepath
=
ResourcePath
(
config
.
filename
"
yuv
"
)
;
config
.
num_frames
=
kNumFrames
;
config
.
use_single_core
=
true
;
return
config
;
}
}
TEST
(
VideoCodecTestOpenH264
ConstantHighBitrate
)
{
auto
frame_checker
=
std
:
:
make_unique
<
VideoCodecTestFixtureImpl
:
:
H264KeyframeChecker
>
(
)
;
auto
config
=
CreateConfig
(
)
;
config
.
SetCodecSettings
(
cricket
:
:
kH264CodecName
1
1
1
false
true
false
kCifWidth
kCifHeight
)
;
config
.
encoded_frame_checker
=
frame_checker
.
get
(
)
;
auto
fixture
=
CreateVideoCodecTestFixture
(
config
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
500
30
0
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
5
1
0
0
.
1
0
.
2
0
.
1
0
1
}
}
;
std
:
:
vector
<
QualityThresholds
>
quality_thresholds
=
{
{
37
35
0
.
93
0
.
91
}
}
;
fixture
-
>
RunTest
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
)
;
}
TEST
(
VideoCodecTestOpenH264
SingleNalUnit
)
{
auto
frame_checker
=
std
:
:
make_unique
<
VideoCodecTestFixtureImpl
:
:
H264KeyframeChecker
>
(
)
;
auto
config
=
CreateConfig
(
)
;
config
.
h264_codec_settings
.
packetization_mode
=
H264PacketizationMode
:
:
SingleNalUnit
;
config
.
max_payload_size_bytes
=
500
;
config
.
SetCodecSettings
(
cricket
:
:
kH264CodecName
1
1
1
false
true
false
kCifWidth
kCifHeight
)
;
config
.
encoded_frame_checker
=
frame_checker
.
get
(
)
;
auto
fixture
=
CreateVideoCodecTestFixture
(
config
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
500
30
0
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
5
1
0
0
.
1
0
.
2
0
.
1
0
1
}
}
;
std
:
:
vector
<
QualityThresholds
>
quality_thresholds
=
{
{
37
35
0
.
93
0
.
91
}
}
;
BitstreamThresholds
bs_thresholds
=
{
config
.
max_payload_size_bytes
}
;
fixture
-
>
RunTest
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
&
bs_thresholds
)
;
}
}
}
