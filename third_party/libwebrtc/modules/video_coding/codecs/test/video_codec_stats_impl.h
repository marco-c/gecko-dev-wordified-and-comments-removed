#
ifndef
MODULES_VIDEO_CODING_CODECS_TEST_VIDEO_CODEC_STATS_IMPL_H_
#
define
MODULES_VIDEO_CODING_CODECS_TEST_VIDEO_CODEC_STATS_IMPL_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
test
/
video_codec_stats
.
h
"
namespace
webrtc
{
namespace
test
{
class
VideoCodecStatsImpl
:
public
VideoCodecStats
{
public
:
std
:
:
vector
<
Frame
>
Slice
(
absl
:
:
optional
<
Filter
>
filter
=
absl
:
:
nullopt
)
const
override
;
Stream
Aggregate
(
const
std
:
:
vector
<
Frame
>
&
frames
absl
:
:
optional
<
DataRate
>
bitrate
=
absl
:
:
nullopt
absl
:
:
optional
<
Frequency
>
framerate
=
absl
:
:
nullopt
)
const
override
;
void
LogMetrics
(
MetricsLogger
*
logger
const
Stream
&
stream
std
:
:
string
test_case_name
)
const
override
;
Frame
*
AddFrame
(
int
frame_num
uint32_t
timestamp_rtp
int
spatial_idx
)
;
Frame
*
GetFrame
(
uint32_t
timestamp_rtp
int
spatial_idx
)
;
private
:
struct
FrameId
{
int
frame_num
;
int
spatial_idx
;
bool
operator
=
=
(
const
FrameId
&
o
)
const
{
return
frame_num
=
=
o
.
frame_num
&
&
spatial_idx
=
=
o
.
spatial_idx
;
}
bool
operator
<
(
const
FrameId
&
o
)
const
{
if
(
frame_num
<
o
.
frame_num
)
return
true
;
if
(
spatial_idx
<
o
.
spatial_idx
)
return
true
;
return
false
;
}
}
;
std
:
:
vector
<
Frame
>
Merge
(
const
std
:
:
vector
<
Frame
>
&
frames
)
const
;
std
:
:
map
<
uint32_t
int
>
frame_num_
;
std
:
:
map
<
FrameId
Frame
>
frames_
;
}
;
}
}
#
endif
