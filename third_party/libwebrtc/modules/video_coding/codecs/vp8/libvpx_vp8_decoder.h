#
ifndef
MODULES_VIDEO_CODING_CODECS_VP8_LIBVPX_VP8_DECODER_H_
#
define
MODULES_VIDEO_CODING_CODECS_VP8_LIBVPX_VP8_DECODER_H_
#
include
<
memory
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
video
/
encoded_image
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
common_video
/
include
/
video_frame_buffer_pool
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
vp8
/
include
/
vp8
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
#
include
"
vpx
/
vp8dx
.
h
"
#
include
"
vpx
/
vpx_decoder
.
h
"
namespace
webrtc
{
class
LibvpxVp8Decoder
:
public
VideoDecoder
{
public
:
LibvpxVp8Decoder
(
)
;
~
LibvpxVp8Decoder
(
)
override
;
int
InitDecode
(
const
VideoCodec
*
inst
int
number_of_cores
)
override
;
int
Decode
(
const
EncodedImage
&
input_image
bool
missing_frames
int64_t
)
override
;
int
RegisterDecodeCompleteCallback
(
DecodedImageCallback
*
callback
)
override
;
int
Release
(
)
override
;
const
char
*
ImplementationName
(
)
const
override
;
struct
DeblockParams
{
int
max_level
=
6
;
int
degrade_qp
=
1
;
int
min_qp
=
0
;
}
;
private
:
class
QpSmoother
;
int
ReturnFrame
(
const
vpx_image_t
*
img
uint32_t
timeStamp
int
qp
const
webrtc
:
:
ColorSpace
*
explicit_color_space
)
;
const
bool
use_postproc_
;
VideoFrameBufferPool
buffer_pool_
;
DecodedImageCallback
*
decode_complete_callback_
;
bool
inited_
;
vpx_codec_ctx_t
*
decoder_
;
int
propagation_cnt_
;
int
last_frame_width_
;
int
last_frame_height_
;
bool
key_frame_required_
;
const
absl
:
:
optional
<
DeblockParams
>
deblock_params_
;
const
std
:
:
unique_ptr
<
QpSmoother
>
qp_smoother_
;
}
;
}
#
endif
