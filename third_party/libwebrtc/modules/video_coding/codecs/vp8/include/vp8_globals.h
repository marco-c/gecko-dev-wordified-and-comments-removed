#
ifndef
MODULES_VIDEO_CODING_CODECS_VP8_INCLUDE_VP8_GLOBALS_H_
#
define
MODULES_VIDEO_CODING_CODECS_VP8_INCLUDE_VP8_GLOBALS_H_
#
include
<
cstdint
>
#
include
"
modules
/
video_coding
/
codecs
/
interface
/
common_constants
.
h
"
namespace
webrtc
{
struct
RTPVideoHeaderVP8
{
void
InitRTPVideoHeaderVP8
(
)
{
nonReference
=
false
;
pictureId
=
kNoPictureId
;
tl0PicIdx
=
kNoTl0PicIdx
;
temporalIdx
=
kNoTemporalIdx
;
layerSync
=
false
;
keyIdx
=
kNoKeyIdx
;
partitionId
=
0
;
beginningOfPartition
=
false
;
}
friend
bool
operator
=
=
(
const
RTPVideoHeaderVP8
&
lhs
const
RTPVideoHeaderVP8
&
rhs
)
{
return
lhs
.
nonReference
=
=
rhs
.
nonReference
&
&
lhs
.
pictureId
=
=
rhs
.
pictureId
&
&
lhs
.
tl0PicIdx
=
=
rhs
.
tl0PicIdx
&
&
lhs
.
temporalIdx
=
=
rhs
.
temporalIdx
&
&
lhs
.
layerSync
=
=
rhs
.
layerSync
&
&
lhs
.
keyIdx
=
=
rhs
.
keyIdx
&
&
lhs
.
partitionId
=
=
rhs
.
partitionId
&
&
lhs
.
beginningOfPartition
=
=
rhs
.
beginningOfPartition
;
}
friend
bool
operator
!
=
(
const
RTPVideoHeaderVP8
&
lhs
const
RTPVideoHeaderVP8
&
rhs
)
{
return
!
(
lhs
=
=
rhs
)
;
}
bool
nonReference
;
int16_t
pictureId
;
int16_t
tl0PicIdx
;
uint8_t
temporalIdx
;
bool
layerSync
;
int
keyIdx
;
int
partitionId
;
bool
beginningOfPartition
;
}
;
}
#
endif
