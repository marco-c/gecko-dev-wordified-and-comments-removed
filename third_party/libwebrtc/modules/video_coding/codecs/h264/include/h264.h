#
ifndef
MODULES_VIDEO_CODING_CODECS_H264_INCLUDE_H264_H_
#
define
MODULES_VIDEO_CODING_CODECS_H264_INCLUDE_H264_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
base
/
nullability
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
video_codecs
/
h264_profile_level_id
.
h
"
#
include
"
api
/
video_codecs
/
scalability_mode
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
h264
/
include
/
h264_globals
.
h
"
#
include
"
rtc_base
/
system
/
rtc_export
.
h
"
namespace
webrtc
{
RTC_EXPORT
SdpVideoFormat
CreateH264Format
(
H264Profile
profile
H264Level
level
const
std
:
:
string
&
packetization_mode
bool
add_scalability_modes
=
false
)
;
RTC_EXPORT
void
DisableRtcUseH264
(
)
;
std
:
:
vector
<
SdpVideoFormat
>
SupportedH264Codecs
(
bool
add_scalability_modes
=
false
)
;
std
:
:
vector
<
SdpVideoFormat
>
SupportedH264DecoderCodecs
(
)
;
class
RTC_EXPORT
H264Encoder
{
public
:
static
bool
IsSupported
(
)
;
static
bool
SupportsScalabilityMode
(
ScalabilityMode
scalability_mode
)
;
}
;
struct
H264EncoderSettings
{
static
H264EncoderSettings
Parse
(
const
SdpVideoFormat
&
format
)
;
H264PacketizationMode
packetization_mode
=
H264PacketizationMode
:
:
NonInterleaved
;
}
;
absl_nonnull
std
:
:
unique_ptr
<
VideoEncoder
>
CreateH264Encoder
(
const
Environment
&
env
H264EncoderSettings
settings
=
{
}
)
;
class
RTC_EXPORT
H264Decoder
:
public
VideoDecoder
{
public
:
static
std
:
:
unique_ptr
<
H264Decoder
>
Create
(
)
;
static
bool
IsSupported
(
)
;
~
H264Decoder
(
)
override
{
}
}
;
}
#
endif
