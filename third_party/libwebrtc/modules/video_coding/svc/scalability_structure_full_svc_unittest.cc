#
include
"
modules
/
video_coding
/
svc
/
scalability_structure_full_svc
.
h
"
#
include
<
vector
>
#
include
"
common_video
/
generic_frame_descriptor
/
generic_frame_info
.
h
"
#
include
"
modules
/
video_coding
/
svc
/
scalability_structure_test_helpers
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
using
:
:
testing
:
:
IsEmpty
;
using
:
:
testing
:
:
SizeIs
;
TEST
(
ScalabilityStructureL3T3Test
SkipT0FrameByEncoderKeepsReferencesValid
)
{
std
:
:
vector
<
GenericFrameInfo
>
frames
;
ScalabilityStructureL3T3
structure
;
ScalabilityStructureWrapper
wrapper
(
structure
)
;
structure
.
OnRatesUpdated
(
EnableTemporalLayers
(
1
0
)
)
;
wrapper
.
GenerateFrames
(
1
frames
)
;
EXPECT_THAT
(
frames
SizeIs
(
1
)
)
;
structure
.
OnRatesUpdated
(
EnableTemporalLayers
(
1
1
)
)
;
structure
.
NextFrameConfig
(
false
)
;
wrapper
.
GenerateFrames
(
1
frames
)
;
EXPECT_THAT
(
frames
SizeIs
(
3
)
)
;
EXPECT_TRUE
(
wrapper
.
FrameReferencesAreValid
(
frames
)
)
;
}
TEST
(
ScalabilityStructureL3T3Test
SkipS1T1FrameKeepsStructureValid
)
{
ScalabilityStructureL3T3
structure
;
ScalabilityStructureWrapper
wrapper
(
structure
)
;
structure
.
OnRatesUpdated
(
EnableTemporalLayers
(
3
3
)
)
;
auto
frames
=
wrapper
.
GenerateFrames
(
1
)
;
EXPECT_THAT
(
frames
SizeIs
(
2
)
)
;
EXPECT_EQ
(
frames
[
0
]
.
temporal_id
0
)
;
frames
=
wrapper
.
GenerateFrames
(
1
)
;
EXPECT_THAT
(
frames
SizeIs
(
2
)
)
;
EXPECT_EQ
(
frames
[
0
]
.
temporal_id
2
)
;
structure
.
OnRatesUpdated
(
EnableTemporalLayers
(
3
0
)
)
;
frames
=
wrapper
.
GenerateFrames
(
1
)
;
EXPECT_THAT
(
frames
SizeIs
(
1
)
)
;
EXPECT_EQ
(
frames
[
0
]
.
temporal_id
1
)
;
structure
.
OnRatesUpdated
(
EnableTemporalLayers
(
3
3
)
)
;
frames
=
wrapper
.
GenerateFrames
(
1
)
;
EXPECT_THAT
(
frames
SizeIs
(
2
)
)
;
EXPECT_EQ
(
frames
[
0
]
.
temporal_id
2
)
;
}
TEST
(
ScalabilityStructureL3T3Test
SkipT1FrameByEncoderKeepsReferencesValid
)
{
std
:
:
vector
<
GenericFrameInfo
>
frames
;
ScalabilityStructureL3T3
structure
;
ScalabilityStructureWrapper
wrapper
(
structure
)
;
wrapper
.
GenerateFrames
(
2
frames
)
;
structure
.
NextFrameConfig
(
false
)
;
wrapper
.
GenerateFrames
(
1
frames
)
;
EXPECT_TRUE
(
wrapper
.
FrameReferencesAreValid
(
frames
)
)
;
}
TEST
(
ScalabilityStructureL3T3Test
SkippingFrameReusePreviousFrameConfiguration
)
{
std
:
:
vector
<
GenericFrameInfo
>
frames
;
ScalabilityStructureL3T3
structure
;
ScalabilityStructureWrapper
wrapper
(
structure
)
;
wrapper
.
GenerateFrames
(
2
frames
)
;
ASSERT_THAT
(
frames
SizeIs
(
6
)
)
;
ASSERT_EQ
(
frames
[
0
]
.
temporal_id
0
)
;
ASSERT_EQ
(
frames
[
3
]
.
temporal_id
2
)
;
structure
.
NextFrameConfig
(
false
)
;
wrapper
.
GenerateFrames
(
2
frames
)
;
ASSERT_THAT
(
frames
SizeIs
(
12
)
)
;
EXPECT_EQ
(
frames
[
6
]
.
temporal_id
1
)
;
EXPECT_EQ
(
frames
[
9
]
.
temporal_id
2
)
;
}
TEST
(
ScalabilityStructureL3T3Test
SwitchSpatialLayerBeforeT1Frame
)
{
ScalabilityStructureL3T3
structure
;
ScalabilityStructureWrapper
wrapper
(
structure
)
;
structure
.
OnRatesUpdated
(
EnableTemporalLayers
(
2
0
)
)
;
EXPECT_THAT
(
wrapper
.
GenerateFrames
(
1
)
SizeIs
(
1
)
)
;
structure
.
OnRatesUpdated
(
EnableTemporalLayers
(
0
2
)
)
;
auto
frames
=
wrapper
.
GenerateFrames
(
1
)
;
ASSERT_THAT
(
frames
SizeIs
(
1
)
)
;
EXPECT_THAT
(
frames
[
0
]
.
frame_diffs
IsEmpty
(
)
)
;
EXPECT_EQ
(
frames
[
0
]
.
temporal_id
0
)
;
}
}
}
