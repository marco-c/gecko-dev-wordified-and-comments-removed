#
ifndef
MODULES_VIDEO_CODING_JITTER_ESTIMATOR_H_
#
define
MODULES_VIDEO_CODING_JITTER_ESTIMATOR_H_
#
include
"
modules
/
video_coding
/
rtt_filter
.
h
"
#
include
"
rtc_base
/
rolling_accumulator
.
h
"
namespace
webrtc
{
class
Clock
;
class
VCMJitterEstimator
{
public
:
explicit
VCMJitterEstimator
(
Clock
*
clock
)
;
virtual
~
VCMJitterEstimator
(
)
;
VCMJitterEstimator
(
const
VCMJitterEstimator
&
)
=
delete
;
VCMJitterEstimator
&
operator
=
(
const
VCMJitterEstimator
&
)
=
delete
;
void
Reset
(
)
;
void
UpdateEstimate
(
int64_t
frameDelayMS
uint32_t
frameSizeBytes
bool
incompleteFrame
=
false
)
;
virtual
int
GetJitterEstimate
(
double
rttMultiplier
absl
:
:
optional
<
double
>
rttMultAddCapMs
)
;
void
FrameNacked
(
)
;
void
UpdateRtt
(
int64_t
rttMs
)
;
static
const
uint32_t
OPERATING_SYSTEM_JITTER
=
10
;
protected
:
double
_theta
[
2
]
;
double
_varNoise
;
private
:
void
KalmanEstimateChannel
(
int64_t
frameDelayMS
int32_t
deltaFSBytes
)
;
void
EstimateRandomJitter
(
double
d_dT
bool
incompleteFrame
)
;
double
NoiseThreshold
(
)
const
;
double
CalculateEstimate
(
)
;
void
PostProcessEstimate
(
)
;
double
DeviationFromExpectedDelay
(
int64_t
frameDelayMS
int32_t
deltaFSBytes
)
const
;
double
GetFrameRate
(
)
const
;
const
double
_phi
;
const
double
_psi
;
const
uint32_t
_alphaCountMax
;
const
double
_thetaLow
;
const
uint32_t
_nackLimit
;
const
int32_t
_numStdDevDelayOutlier
;
const
int32_t
_numStdDevFrameSizeOutlier
;
const
double
_noiseStdDevs
;
const
double
_noiseStdDevOffset
;
double
_thetaCov
[
2
]
[
2
]
;
double
_Qcov
[
2
]
[
2
]
;
double
_avgFrameSize
;
double
_varFrameSize
;
double
_maxFrameSize
;
uint32_t
_fsSum
;
uint32_t
_fsCount
;
int64_t
_lastUpdateT
;
double
_prevEstimate
;
uint32_t
_prevFrameSize
;
double
_avgNoise
;
uint32_t
_alphaCount
;
double
_filterJitterEstimate
;
uint32_t
_startupCount
;
int64_t
_latestNackTimestamp
;
uint32_t
_nackCount
;
VCMRttFilter
_rttFilter
;
rtc
:
:
RollingAccumulator
<
uint64_t
>
fps_counter_
;
const
double
time_deviation_upper_bound_
;
const
bool
enable_reduced_delay_
;
Clock
*
clock_
;
}
;
}
#
endif
