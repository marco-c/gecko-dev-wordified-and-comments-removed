#
include
"
modules
/
video_coding
/
chain_diff_calculator
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
using
:
:
testing
:
:
ElementsAre
;
using
:
:
testing
:
:
SizeIs
;
TEST
(
ChainDiffCalculatorTest
SingleChain
)
{
ChainDiffCalculator
calculator
;
calculator
.
Reset
(
{
true
}
)
;
EXPECT_THAT
(
calculator
.
From
(
1
{
true
}
)
ElementsAre
(
0
)
)
;
EXPECT_THAT
(
calculator
.
From
(
2
{
false
}
)
ElementsAre
(
1
)
)
;
EXPECT_THAT
(
calculator
.
From
(
3
{
true
}
)
ElementsAre
(
2
)
)
;
}
TEST
(
ChainDiffCalculatorTest
TwoChainsFullSvc
)
{
ChainDiffCalculator
calculator
;
calculator
.
Reset
(
{
true
true
}
)
;
EXPECT_THAT
(
calculator
.
From
(
1
{
true
true
}
)
ElementsAre
(
0
0
)
)
;
EXPECT_THAT
(
calculator
.
From
(
2
{
false
true
}
)
ElementsAre
(
1
1
)
)
;
EXPECT_THAT
(
calculator
.
From
(
3
{
false
false
}
)
ElementsAre
(
2
1
)
)
;
EXPECT_THAT
(
calculator
.
From
(
4
{
false
false
}
)
ElementsAre
(
3
2
)
)
;
EXPECT_THAT
(
calculator
.
From
(
5
{
true
true
}
)
ElementsAre
(
4
3
)
)
;
EXPECT_THAT
(
calculator
.
From
(
6
{
false
true
}
)
ElementsAre
(
1
1
)
)
;
}
TEST
(
ChainDiffCalculatorTest
TwoChainsKSvc
)
{
ChainDiffCalculator
calculator
;
calculator
.
Reset
(
{
true
true
}
)
;
EXPECT_THAT
(
calculator
.
From
(
1
{
true
true
}
)
ElementsAre
(
0
0
)
)
;
EXPECT_THAT
(
calculator
.
From
(
2
{
false
true
}
)
ElementsAre
(
1
1
)
)
;
EXPECT_THAT
(
calculator
.
From
(
3
{
false
false
}
)
ElementsAre
(
2
1
)
)
;
EXPECT_THAT
(
calculator
.
From
(
4
{
false
false
}
)
ElementsAre
(
3
2
)
)
;
EXPECT_THAT
(
calculator
.
From
(
5
{
true
false
}
)
ElementsAre
(
4
3
)
)
;
EXPECT_THAT
(
calculator
.
From
(
6
{
false
true
}
)
ElementsAre
(
1
4
)
)
;
}
TEST
(
ChainDiffCalculatorTest
TwoChainsSimulcast
)
{
ChainDiffCalculator
calculator
;
calculator
.
Reset
(
{
true
false
}
)
;
EXPECT_THAT
(
calculator
.
From
(
1
{
true
false
}
)
ElementsAre
(
0
0
)
)
;
calculator
.
Reset
(
{
false
true
}
)
;
EXPECT_THAT
(
calculator
.
From
(
2
{
false
true
}
)
ElementsAre
(
1
0
)
)
;
EXPECT_THAT
(
calculator
.
From
(
3
{
false
false
}
)
ElementsAre
(
2
1
)
)
;
EXPECT_THAT
(
calculator
.
From
(
4
{
false
false
}
)
ElementsAre
(
3
2
)
)
;
EXPECT_THAT
(
calculator
.
From
(
5
{
true
false
}
)
ElementsAre
(
4
3
)
)
;
EXPECT_THAT
(
calculator
.
From
(
6
{
false
true
}
)
ElementsAre
(
1
4
)
)
;
}
TEST
(
ChainDiffCalculatorTest
ResilentToAbsentChainConfig
)
{
ChainDiffCalculator
calculator
;
calculator
.
Reset
(
{
true
false
}
)
;
EXPECT_THAT
(
calculator
.
From
(
1
{
true
false
}
)
ElementsAre
(
0
0
)
)
;
EXPECT_THAT
(
calculator
.
From
(
2
{
}
)
ElementsAre
(
1
0
)
)
;
EXPECT_THAT
(
calculator
.
From
(
3
{
true
false
}
)
SizeIs
(
2
)
)
;
EXPECT_THAT
(
calculator
.
From
(
4
{
false
true
}
)
SizeIs
(
2
)
)
;
EXPECT_THAT
(
calculator
.
From
(
5
{
false
false
}
)
ElementsAre
(
2
1
)
)
;
}
TEST
(
ChainDiffCalculatorTest
ResilentToTooMainChains
)
{
ChainDiffCalculator
calculator
;
calculator
.
Reset
(
{
true
false
}
)
;
EXPECT_THAT
(
calculator
.
From
(
1
{
true
false
}
)
ElementsAre
(
0
0
)
)
;
EXPECT_THAT
(
calculator
.
From
(
2
{
true
true
true
}
)
ElementsAre
(
1
0
)
)
;
EXPECT_THAT
(
calculator
.
From
(
3
{
true
false
}
)
SizeIs
(
2
)
)
;
EXPECT_THAT
(
calculator
.
From
(
4
{
false
true
}
)
SizeIs
(
2
)
)
;
EXPECT_THAT
(
calculator
.
From
(
5
{
false
false
}
)
ElementsAre
(
2
1
)
)
;
}
}
}
