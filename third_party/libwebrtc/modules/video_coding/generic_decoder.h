#
ifndef
MODULES_VIDEO_CODING_GENERIC_DECODER_H_
#
define
MODULES_VIDEO_CODING_GENERIC_DECODER_H_
#
include
<
string
>
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
modules
/
video_coding
/
encoded_frame
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
#
include
"
modules
/
video_coding
/
timestamp_map
.
h
"
#
include
"
modules
/
video_coding
/
timing
.
h
"
#
include
"
rtc_base
/
experiments
/
field_trial_parser
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
namespace
webrtc
{
class
VCMReceiveCallback
;
enum
{
kDecoderFrameMemoryLength
=
30
}
;
class
VCMDecodedFrameCallback
:
public
DecodedImageCallback
{
public
:
VCMDecodedFrameCallback
(
VCMTiming
*
timing
Clock
*
clock
)
;
~
VCMDecodedFrameCallback
(
)
override
;
void
SetUserReceiveCallback
(
VCMReceiveCallback
*
receiveCallback
)
;
VCMReceiveCallback
*
UserReceiveCallback
(
)
;
int32_t
Decoded
(
VideoFrame
&
decodedImage
)
override
;
int32_t
Decoded
(
VideoFrame
&
decodedImage
int64_t
decode_time_ms
)
override
;
void
Decoded
(
VideoFrame
&
decodedImage
absl
:
:
optional
<
int32_t
>
decode_time_ms
absl
:
:
optional
<
uint8_t
>
qp
)
override
;
void
OnDecoderImplementationName
(
const
char
*
implementation_name
)
;
void
Map
(
uint32_t
timestamp
const
VCMFrameInformation
&
frameInfo
)
;
void
ClearTimestampMap
(
)
;
private
:
SequenceChecker
construction_thread_
;
Clock
*
const
_clock
;
VCMReceiveCallback
*
_receiveCallback
=
nullptr
;
VCMTiming
*
_timing
;
Mutex
lock_
;
VCMTimestampMap
_timestampMap
RTC_GUARDED_BY
(
lock_
)
;
int64_t
ntp_offset_
;
FieldTrialOptional
<
TimeDelta
>
_extra_decode_time
;
FieldTrialParameter
<
bool
>
low_latency_renderer_enabled_
;
FieldTrialParameter
<
bool
>
low_latency_renderer_include_predecode_buffer_
;
}
;
class
VCMGenericDecoder
{
public
:
explicit
VCMGenericDecoder
(
VideoDecoder
*
decoder
)
;
~
VCMGenericDecoder
(
)
;
bool
Configure
(
const
VideoDecoder
:
:
Settings
&
settings
)
;
int32_t
Decode
(
const
VCMEncodedFrame
&
inputFrame
Timestamp
now
)
;
int32_t
RegisterDecodeCompleteCallback
(
VCMDecodedFrameCallback
*
callback
)
;
bool
IsSameDecoder
(
VideoDecoder
*
decoder
)
const
{
return
decoder_
=
=
decoder
;
}
private
:
VCMDecodedFrameCallback
*
_callback
=
nullptr
;
VideoDecoder
*
const
decoder_
;
VideoContentType
_last_keyframe_content_type
;
VideoDecoder
:
:
DecoderInfo
decoder_info_
;
}
;
}
#
endif
