#
ifndef
MODULES_VIDEO_CODING_H264_SPS_PPS_TRACKER_H_
#
define
MODULES_VIDEO_CODING_H264_SPS_PPS_TRACKER_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_video_header
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
namespace
webrtc
{
namespace
video_coding
{
class
H264SpsPpsTracker
{
public
:
enum
PacketAction
{
kInsert
kDrop
kRequestKeyframe
}
;
struct
FixedBitstream
{
PacketAction
action
;
rtc
:
:
CopyOnWriteBuffer
bitstream
;
}
;
H264SpsPpsTracker
(
)
;
~
H264SpsPpsTracker
(
)
;
FixedBitstream
CopyAndFixBitstream
(
rtc
:
:
ArrayView
<
const
uint8_t
>
bitstream
RTPVideoHeader
*
video_header
)
;
void
InsertSpsPpsNalus
(
const
std
:
:
vector
<
uint8_t
>
&
sps
const
std
:
:
vector
<
uint8_t
>
&
pps
)
;
private
:
struct
PpsInfo
{
PpsInfo
(
)
;
PpsInfo
(
PpsInfo
&
&
rhs
)
;
PpsInfo
&
operator
=
(
PpsInfo
&
&
rhs
)
;
~
PpsInfo
(
)
;
int
sps_id
=
-
1
;
size_t
size
=
0
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
data
;
}
;
struct
SpsInfo
{
SpsInfo
(
)
;
SpsInfo
(
SpsInfo
&
&
rhs
)
;
SpsInfo
&
operator
=
(
SpsInfo
&
&
rhs
)
;
~
SpsInfo
(
)
;
size_t
size
=
0
;
int
width
=
-
1
;
int
height
=
-
1
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
data
;
}
;
std
:
:
map
<
int
PpsInfo
>
pps_data_
;
std
:
:
map
<
int
SpsInfo
>
sps_data_
;
}
;
}
}
#
endif
