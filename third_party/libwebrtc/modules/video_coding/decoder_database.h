#
ifndef
MODULES_VIDEO_CODING_DECODER_DATABASE_H_
#
define
MODULES_VIDEO_CODING_DECODER_DATABASE_H_
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
modules
/
video_coding
/
encoded_frame
.
h
"
#
include
"
modules
/
video_coding
/
generic_decoder
.
h
"
namespace
webrtc
{
class
VCMDecoderDataBase
{
public
:
VCMDecoderDataBase
(
)
=
default
;
VCMDecoderDataBase
(
const
VCMDecoderDataBase
&
)
=
delete
;
VCMDecoderDataBase
&
operator
=
(
const
VCMDecoderDataBase
&
)
=
delete
;
~
VCMDecoderDataBase
(
)
=
default
;
bool
DeregisterExternalDecoder
(
uint8_t
payload_type
)
;
void
RegisterExternalDecoder
(
uint8_t
payload_type
VideoDecoder
*
external_decoder
)
;
bool
IsExternalDecoderRegistered
(
uint8_t
payload_type
)
const
;
bool
RegisterReceiveCodec
(
uint8_t
payload_type
const
VideoCodec
&
receive_codec
int
number_of_cores
)
;
bool
DeregisterReceiveCodec
(
uint8_t
payload_type
)
;
VCMGenericDecoder
*
GetDecoder
(
const
VCMEncodedFrame
&
frame
VCMDecodedFrameCallback
*
decoded_frame_callback
)
;
private
:
struct
DecoderSettings
{
VideoCodec
settings
;
int
number_of_cores
;
}
;
void
CreateAndInitDecoder
(
const
VCMEncodedFrame
&
frame
)
;
absl
:
:
optional
<
uint8_t
>
current_payload_type_
;
absl
:
:
optional
<
VCMGenericDecoder
>
current_decoder_
;
std
:
:
map
<
uint8_t
DecoderSettings
>
decoder_settings_
;
std
:
:
map
<
uint8_t
VideoDecoder
*
>
decoders_
;
}
;
}
#
endif
