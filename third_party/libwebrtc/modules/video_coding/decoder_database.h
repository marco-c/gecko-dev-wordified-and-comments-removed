#
ifndef
MODULES_VIDEO_CODING_DECODER_DATABASE_H_
#
define
MODULES_VIDEO_CODING_DECODER_DATABASE_H_
#
include
<
map
>
#
include
<
memory
>
#
include
"
modules
/
video_coding
/
generic_decoder
.
h
"
namespace
webrtc
{
struct
VCMDecoderMapItem
{
public
:
VCMDecoderMapItem
(
VideoCodec
*
settings
int
number_of_cores
)
;
~
VCMDecoderMapItem
(
)
;
std
:
:
unique_ptr
<
VideoCodec
>
settings
;
int
number_of_cores
;
}
;
struct
VCMExtDecoderMapItem
{
public
:
VCMExtDecoderMapItem
(
VideoDecoder
*
external_decoder_instance
uint8_t
payload_type
)
;
uint8_t
payload_type
;
VideoDecoder
*
external_decoder_instance
;
}
;
class
VCMDecoderDataBase
{
public
:
VCMDecoderDataBase
(
)
;
~
VCMDecoderDataBase
(
)
;
bool
DeregisterExternalDecoder
(
uint8_t
payload_type
)
;
void
RegisterExternalDecoder
(
VideoDecoder
*
external_decoder
uint8_t
payload_type
)
;
bool
RegisterReceiveCodec
(
uint8_t
payload_type
const
VideoCodec
*
receive_codec
int
number_of_cores
)
;
bool
DeregisterReceiveCodec
(
uint8_t
payload_type
)
;
VCMGenericDecoder
*
GetDecoder
(
const
VCMEncodedFrame
&
frame
VCMDecodedFrameCallback
*
decoded_frame_callback
)
;
private
:
typedef
std
:
:
map
<
uint8_t
VCMDecoderMapItem
*
>
DecoderMap
;
typedef
std
:
:
map
<
uint8_t
VCMExtDecoderMapItem
*
>
ExternalDecoderMap
;
std
:
:
unique_ptr
<
VCMGenericDecoder
>
CreateAndInitDecoder
(
const
VCMEncodedFrame
&
frame
VideoCodec
*
new_codec
)
const
;
const
VCMDecoderMapItem
*
FindDecoderItem
(
uint8_t
payload_type
)
const
;
const
VCMExtDecoderMapItem
*
FindExternalDecoderItem
(
uint8_t
payload_type
)
const
;
uint8_t
current_payload_type_
;
VideoCodec
receive_codec_
;
std
:
:
unique_ptr
<
VCMGenericDecoder
>
ptr_decoder_
;
DecoderMap
dec_map_
;
ExternalDecoderMap
dec_external_map_
;
}
;
}
#
endif
