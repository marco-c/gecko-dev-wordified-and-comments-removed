#
include
"
modules
/
video_coding
/
decoder_database
.
h
"
#
include
"
api
/
test
/
mock_video_decoder
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
using
:
:
testing
:
:
NiceMock
;
TEST
(
VCMDecoderDataBaseTest
RegisterExternalDecoder
)
{
VCMDecoderDataBase
db
;
constexpr
int
kPayloadType
=
1
;
ASSERT_FALSE
(
db
.
IsExternalDecoderRegistered
(
kPayloadType
)
)
;
NiceMock
<
MockVideoDecoder
>
decoder
;
db
.
RegisterExternalDecoder
(
kPayloadType
&
decoder
)
;
EXPECT_TRUE
(
db
.
IsExternalDecoderRegistered
(
kPayloadType
)
)
;
EXPECT_EQ
(
db
.
DeregisterExternalDecoder
(
kPayloadType
)
&
decoder
)
;
EXPECT_FALSE
(
db
.
IsExternalDecoderRegistered
(
kPayloadType
)
)
;
}
TEST
(
VCMDecoderDataBaseTest
RegisterReceiveCodec
)
{
VCMDecoderDataBase
db
;
constexpr
int
kPayloadType
=
1
;
ASSERT_FALSE
(
db
.
DeregisterReceiveCodec
(
kPayloadType
)
)
;
VideoDecoder
:
:
Settings
settings
;
settings
.
set_codec_type
(
kVideoCodecVP8
)
;
settings
.
set_max_render_resolution
(
{
10
10
}
)
;
settings
.
set_number_of_cores
(
4
)
;
db
.
RegisterReceiveCodec
(
kPayloadType
settings
)
;
EXPECT_TRUE
(
db
.
DeregisterReceiveCodec
(
kPayloadType
)
)
;
}
TEST
(
VCMDecoderDataBaseTest
DeregisterReceiveCodecs
)
{
VCMDecoderDataBase
db
;
constexpr
int
kPayloadType1
=
1
;
constexpr
int
kPayloadType2
=
2
;
ASSERT_FALSE
(
db
.
DeregisterReceiveCodec
(
kPayloadType1
)
)
;
ASSERT_FALSE
(
db
.
DeregisterReceiveCodec
(
kPayloadType2
)
)
;
VideoDecoder
:
:
Settings
settings1
;
settings1
.
set_codec_type
(
kVideoCodecVP8
)
;
settings1
.
set_max_render_resolution
(
{
10
10
}
)
;
settings1
.
set_number_of_cores
(
4
)
;
VideoDecoder
:
:
Settings
settings2
=
settings1
;
settings2
.
set_codec_type
(
kVideoCodecVP9
)
;
db
.
RegisterReceiveCodec
(
kPayloadType1
settings1
)
;
db
.
RegisterReceiveCodec
(
kPayloadType2
settings2
)
;
db
.
DeregisterReceiveCodecs
(
)
;
EXPECT_FALSE
(
db
.
DeregisterReceiveCodec
(
kPayloadType1
)
)
;
EXPECT_FALSE
(
db
.
DeregisterReceiveCodec
(
kPayloadType2
)
)
;
}
}
}
