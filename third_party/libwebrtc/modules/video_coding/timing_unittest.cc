#
include
"
modules
/
video_coding
/
timing
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
field_trial
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
const
int
kFps
=
25
;
}
TEST
(
ReceiverTimingTest
JitterDelay
)
{
SimulatedClock
clock
(
0
)
;
VCMTiming
timing
(
&
clock
)
;
timing
.
Reset
(
)
;
uint32_t
timestamp
=
0
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
timing
.
Reset
(
)
;
timing
.
IncomingTimestamp
(
timestamp
clock
.
TimeInMilliseconds
(
)
)
;
uint32_t
jitter_delay_ms
=
20
;
timing
.
SetJitterDelay
(
jitter_delay_ms
)
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
timing
.
set_render_delay
(
0
)
;
uint32_t
wait_time_ms
=
timing
.
MaxWaitingTime
(
timing
.
RenderTimeMs
(
timestamp
clock
.
TimeInMilliseconds
(
)
)
clock
.
TimeInMilliseconds
(
)
false
)
;
EXPECT_EQ
(
jitter_delay_ms
wait_time_ms
)
;
jitter_delay_ms
+
=
VCMTiming
:
:
kDelayMaxChangeMsPerS
+
10
;
timestamp
+
=
90000
;
clock
.
AdvanceTimeMilliseconds
(
1000
)
;
timing
.
SetJitterDelay
(
jitter_delay_ms
)
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time_ms
=
timing
.
MaxWaitingTime
(
timing
.
RenderTimeMs
(
timestamp
clock
.
TimeInMilliseconds
(
)
)
clock
.
TimeInMilliseconds
(
)
false
)
;
EXPECT_EQ
(
jitter_delay_ms
-
10
wait_time_ms
)
;
timestamp
+
=
90000
;
clock
.
AdvanceTimeMilliseconds
(
1000
)
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time_ms
=
timing
.
MaxWaitingTime
(
timing
.
RenderTimeMs
(
timestamp
clock
.
TimeInMilliseconds
(
)
)
clock
.
TimeInMilliseconds
(
)
false
)
;
EXPECT_EQ
(
jitter_delay_ms
wait_time_ms
)
;
const
int
kNumFrames
=
300
;
for
(
int
i
=
0
;
i
<
kNumFrames
;
i
+
+
)
{
clock
.
AdvanceTimeMilliseconds
(
1000
/
kFps
)
;
timestamp
+
=
90000
/
kFps
;
timing
.
IncomingTimestamp
(
timestamp
clock
.
TimeInMilliseconds
(
)
)
;
}
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time_ms
=
timing
.
MaxWaitingTime
(
timing
.
RenderTimeMs
(
timestamp
clock
.
TimeInMilliseconds
(
)
)
clock
.
TimeInMilliseconds
(
)
false
)
;
EXPECT_EQ
(
jitter_delay_ms
wait_time_ms
)
;
const
uint32_t
kDecodeTimeMs
=
10
;
for
(
int
i
=
0
;
i
<
kFps
;
i
+
+
)
{
clock
.
AdvanceTimeMilliseconds
(
kDecodeTimeMs
)
;
timing
.
StopDecodeTimer
(
kDecodeTimeMs
clock
.
TimeInMilliseconds
(
)
)
;
timestamp
+
=
90000
/
kFps
;
clock
.
AdvanceTimeMilliseconds
(
1000
/
kFps
-
kDecodeTimeMs
)
;
timing
.
IncomingTimestamp
(
timestamp
clock
.
TimeInMilliseconds
(
)
)
;
}
timing
.
UpdateCurrentDelay
(
timestamp
)
;
wait_time_ms
=
timing
.
MaxWaitingTime
(
timing
.
RenderTimeMs
(
timestamp
clock
.
TimeInMilliseconds
(
)
)
clock
.
TimeInMilliseconds
(
)
false
)
;
EXPECT_EQ
(
jitter_delay_ms
wait_time_ms
)
;
const
int
kMinTotalDelayMs
=
200
;
timing
.
set_min_playout_delay
(
kMinTotalDelayMs
)
;
clock
.
AdvanceTimeMilliseconds
(
5000
)
;
timestamp
+
=
5
*
90000
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
const
int
kRenderDelayMs
=
10
;
timing
.
set_render_delay
(
kRenderDelayMs
)
;
wait_time_ms
=
timing
.
MaxWaitingTime
(
timing
.
RenderTimeMs
(
timestamp
clock
.
TimeInMilliseconds
(
)
)
clock
.
TimeInMilliseconds
(
)
false
)
;
EXPECT_EQ
(
kMinTotalDelayMs
-
kDecodeTimeMs
-
kRenderDelayMs
wait_time_ms
)
;
EXPECT_EQ
(
kMinTotalDelayMs
timing
.
TargetVideoDelay
(
)
)
;
timing
.
set_min_playout_delay
(
0
)
;
clock
.
AdvanceTimeMilliseconds
(
5000
)
;
timestamp
+
=
5
*
90000
;
timing
.
UpdateCurrentDelay
(
timestamp
)
;
}
TEST
(
ReceiverTimingTest
TimestampWrapAround
)
{
SimulatedClock
clock
(
0
)
;
VCMTiming
timing
(
&
clock
)
;
uint32_t
timestamp
=
0xFFFFFFFFu
-
3
*
90000
/
kFps
;
for
(
int
i
=
0
;
i
<
5
;
+
+
i
)
{
timing
.
IncomingTimestamp
(
timestamp
clock
.
TimeInMilliseconds
(
)
)
;
clock
.
AdvanceTimeMilliseconds
(
1000
/
kFps
)
;
timestamp
+
=
90000
/
kFps
;
EXPECT_EQ
(
3
*
1000
/
kFps
timing
.
RenderTimeMs
(
0xFFFFFFFFu
clock
.
TimeInMilliseconds
(
)
)
)
;
EXPECT_EQ
(
3
*
1000
/
kFps
+
1
timing
.
RenderTimeMs
(
89u
clock
.
TimeInMilliseconds
(
)
)
)
;
}
}
TEST
(
ReceiverTimingTest
MaxWaitingTimeIsZeroForZeroRenderTime
)
{
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
constexpr
int64_t
kTimeDeltaMs
=
1000
.
0
/
60
.
0
;
constexpr
int64_t
kZeroRenderTimeMs
=
0
;
SimulatedClock
clock
(
kStartTimeUs
)
;
VCMTiming
timing
(
&
clock
)
;
timing
.
Reset
(
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
clock
.
AdvanceTimeMilliseconds
(
kTimeDeltaMs
)
;
int64_t
now_ms
=
clock
.
TimeInMilliseconds
(
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
0
)
;
}
int64_t
now_ms
=
clock
.
TimeInMilliseconds
(
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
0
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
0
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
0
)
;
EXPECT_LT
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
0
)
;
}
TEST
(
ReceiverTimingTest
MaxWaitingTimeZeroDelayPacingExperiment
)
{
constexpr
int64_t
kMinPacingMs
=
3
;
test
:
:
ScopedFieldTrials
override_field_trials
(
"
WebRTC
-
ZeroPlayoutDelay
/
min_pacing
:
3ms
/
"
)
;
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
constexpr
int64_t
kTimeDeltaMs
=
1000
.
0
/
60
.
0
;
constexpr
int64_t
kZeroRenderTimeMs
=
0
;
SimulatedClock
clock
(
kStartTimeUs
)
;
VCMTiming
timing
(
&
clock
)
;
timing
.
Reset
(
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
clock
.
AdvanceTimeMilliseconds
(
kTimeDeltaMs
)
;
int64_t
now_ms
=
clock
.
TimeInMilliseconds
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
0
)
;
timing
.
SetLastDecodeScheduledTimestamp
(
now_ms
)
;
}
int64_t
now_ms
=
clock
.
TimeInMilliseconds
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
kMinPacingMs
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
kMinPacingMs
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
kMinPacingMs
)
;
constexpr
int64_t
kTwoMs
=
2
;
clock
.
AdvanceTimeMilliseconds
(
kTwoMs
)
;
now_ms
=
clock
.
TimeInMilliseconds
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
kMinPacingMs
-
kTwoMs
)
;
timing
.
SetLastDecodeScheduledTimestamp
(
now_ms
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
kMinPacingMs
)
;
}
TEST
(
ReceiverTimingTest
DefaultMaxWaitingTimeUnaffectedByPacingExperiment
)
{
test
:
:
ScopedFieldTrials
override_field_trials
(
"
WebRTC
-
ZeroPlayoutDelay
/
min_pacing
:
3ms
/
"
)
;
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
constexpr
int64_t
kTimeDeltaMs
=
1000
.
0
/
60
.
0
;
SimulatedClock
clock
(
kStartTimeUs
)
;
VCMTiming
timing
(
&
clock
)
;
timing
.
Reset
(
)
;
clock
.
AdvanceTimeMilliseconds
(
kTimeDeltaMs
)
;
int64_t
now_ms
=
clock
.
TimeInMilliseconds
(
)
;
int64_t
render_time_ms
=
now_ms
+
30
;
int64_t
estimated_processing_delay
=
(
render_time_ms
-
now_ms
)
-
timing
.
MaxWaitingTime
(
render_time_ms
now_ms
false
)
;
EXPECT_GT
(
estimated_processing_delay
0
)
;
for
(
int
i
=
0
;
i
<
5
;
+
+
i
)
{
render_time_ms
+
=
kTimeDeltaMs
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
render_time_ms
now_ms
false
)
render_time_ms
-
now_ms
-
estimated_processing_delay
)
;
}
}
TEST
(
ReceiverTiminTest
MaxWaitingTimeReturnsZeroIfTooManyFramesQueuedIsTrue
)
{
constexpr
int64_t
kMinPacingMs
=
3
;
test
:
:
ScopedFieldTrials
override_field_trials
(
"
WebRTC
-
ZeroPlayoutDelay
/
min_pacing
:
3ms
/
"
)
;
constexpr
int64_t
kStartTimeUs
=
3
.
15e13
;
constexpr
int64_t
kTimeDeltaMs
=
1000
.
0
/
60
.
0
;
constexpr
int64_t
kZeroRenderTimeMs
=
0
;
SimulatedClock
clock
(
kStartTimeUs
)
;
VCMTiming
timing
(
&
clock
)
;
timing
.
Reset
(
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
clock
.
AdvanceTimeMilliseconds
(
kTimeDeltaMs
)
;
int64_t
now_ms
=
clock
.
TimeInMilliseconds
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
0
)
;
timing
.
SetLastDecodeScheduledTimestamp
(
now_ms
)
;
}
int64_t
now_ms
=
clock
.
TimeInMilliseconds
(
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
false
)
kMinPacingMs
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
true
)
0
)
;
EXPECT_EQ
(
timing
.
MaxWaitingTime
(
kZeroRenderTimeMs
now_ms
true
)
0
)
;
}
}
