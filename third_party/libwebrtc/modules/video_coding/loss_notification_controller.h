#
ifndef
MODULES_VIDEO_CODING_LOSS_NOTIFICATION_CONTROLLER_H_
#
define
MODULES_VIDEO_CODING_LOSS_NOTIFICATION_CONTROLLER_H_
#
include
<
stdint
.
h
>
#
include
<
set
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
rtc_base
/
synchronization
/
sequence_checker
.
h
"
namespace
webrtc
{
class
LossNotificationController
{
public
:
struct
FrameDetails
{
bool
is_keyframe
;
int64_t
frame_id
;
rtc
:
:
ArrayView
<
const
int64_t
>
frame_dependencies
;
}
;
LossNotificationController
(
KeyFrameRequestSender
*
key_frame_request_sender
LossNotificationSender
*
loss_notification_sender
)
;
~
LossNotificationController
(
)
;
void
OnReceivedPacket
(
uint16_t
rtp_seq_num
const
FrameDetails
*
frame
)
;
void
OnAssembledFrame
(
uint16_t
first_seq_num
int64_t
frame_id
bool
discardable
rtc
:
:
ArrayView
<
const
int64_t
>
frame_dependencies
)
;
private
:
void
DiscardOldInformation
(
)
;
bool
AllDependenciesDecodable
(
rtc
:
:
ArrayView
<
const
int64_t
>
frame_dependencies
)
const
;
void
HandleLoss
(
uint16_t
last_received_seq_num
bool
decodability_flag
)
;
KeyFrameRequestSender
*
const
key_frame_request_sender_
RTC_GUARDED_BY
(
sequence_checker_
)
;
LossNotificationSender
*
const
loss_notification_sender_
RTC_GUARDED_BY
(
sequence_checker_
)
;
absl
:
:
optional
<
int64_t
>
last_received_frame_id_
RTC_GUARDED_BY
(
sequence_checker_
)
;
absl
:
:
optional
<
uint16_t
>
last_received_seq_num_
RTC_GUARDED_BY
(
sequence_checker_
)
;
bool
current_frame_potentially_decodable_
RTC_GUARDED_BY
(
sequence_checker_
)
;
struct
FrameInfo
{
explicit
FrameInfo
(
uint16_t
first_seq_num
)
:
first_seq_num
(
first_seq_num
)
{
}
uint16_t
first_seq_num
;
}
;
absl
:
:
optional
<
FrameInfo
>
last_decodable_non_discardable_
RTC_GUARDED_BY
(
sequence_checker_
)
;
std
:
:
set
<
int64_t
>
decodable_frame_ids_
RTC_GUARDED_BY
(
sequence_checker_
)
;
SequenceChecker
sequence_checker_
;
}
;
}
#
endif
