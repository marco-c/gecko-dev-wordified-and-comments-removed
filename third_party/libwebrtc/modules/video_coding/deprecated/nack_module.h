#
ifndef
MODULES_VIDEO_CODING_DEPRECATED_NACK_MODULE_H_
#
define
MODULES_VIDEO_CODING_DEPRECATED_NACK_MODULE_H_
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
set
>
#
include
<
vector
>
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
modules
/
include
/
module
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
video_coding
/
histogram
.
h
"
#
include
"
rtc_base
/
deprecation
.
h
"
#
include
"
rtc_base
/
numerics
/
sequence_number_util
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
DEPRECATED_NackModule
:
public
Module
{
public
:
DEPRECATED_NackModule
(
Clock
*
clock
NackSender
*
nack_sender
KeyFrameRequestSender
*
keyframe_request_sender
)
;
int
OnReceivedPacket
(
uint16_t
seq_num
bool
is_keyframe
)
;
int
OnReceivedPacket
(
uint16_t
seq_num
bool
is_keyframe
bool
is_recovered
)
;
void
ClearUpTo
(
uint16_t
seq_num
)
;
void
UpdateRtt
(
int64_t
rtt_ms
)
;
void
Clear
(
)
;
int64_t
TimeUntilNextProcess
(
)
override
;
void
Process
(
)
override
;
private
:
enum
NackFilterOptions
{
kSeqNumOnly
kTimeOnly
kSeqNumAndTime
}
;
struct
NackInfo
{
NackInfo
(
)
;
NackInfo
(
uint16_t
seq_num
uint16_t
send_at_seq_num
int64_t
created_at_time
)
;
uint16_t
seq_num
;
uint16_t
send_at_seq_num
;
int64_t
created_at_time
;
int64_t
sent_at_time
;
int
retries
;
}
;
struct
BackoffSettings
{
BackoffSettings
(
TimeDelta
min_retry
TimeDelta
max_rtt
double
base
)
;
static
absl
:
:
optional
<
BackoffSettings
>
ParseFromFieldTrials
(
)
;
const
TimeDelta
min_retry_interval
;
const
TimeDelta
max_rtt
;
const
double
base
;
}
;
void
AddPacketsToNack
(
uint16_t
seq_num_start
uint16_t
seq_num_end
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
bool
RemovePacketsUntilKeyFrame
(
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
std
:
:
vector
<
uint16_t
>
GetNackBatch
(
NackFilterOptions
options
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
void
UpdateReorderingStatistics
(
uint16_t
seq_num
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
int
WaitNumberOfPackets
(
float
probability
)
const
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
Mutex
mutex_
;
Clock
*
const
clock_
;
NackSender
*
const
nack_sender_
;
KeyFrameRequestSender
*
const
keyframe_request_sender_
;
std
:
:
map
<
uint16_t
NackInfo
DescendingSeqNumComp
<
uint16_t
>
>
nack_list_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
set
<
uint16_t
DescendingSeqNumComp
<
uint16_t
>
>
keyframe_list_
RTC_GUARDED_BY
(
mutex_
)
;
std
:
:
set
<
uint16_t
DescendingSeqNumComp
<
uint16_t
>
>
recovered_list_
RTC_GUARDED_BY
(
mutex_
)
;
video_coding
:
:
Histogram
reordering_histogram_
RTC_GUARDED_BY
(
mutex_
)
;
bool
initialized_
RTC_GUARDED_BY
(
mutex_
)
;
int64_t
rtt_ms_
RTC_GUARDED_BY
(
mutex_
)
;
uint16_t
newest_seq_num_
RTC_GUARDED_BY
(
mutex_
)
;
int64_t
next_process_time_ms_
;
const
int64_t
send_nack_delay_ms_
;
const
absl
:
:
optional
<
BackoffSettings
>
backoff_settings_
;
}
;
using
NackModule
=
RTC_DEPRECATED
DEPRECATED_NackModule
;
}
#
endif
