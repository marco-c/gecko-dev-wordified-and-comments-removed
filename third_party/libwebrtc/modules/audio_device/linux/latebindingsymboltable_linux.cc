#
include
"
modules
/
audio_device
/
linux
/
latebindingsymboltable_linux
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
ifdef
WEBRTC_LINUX
#
include
<
dlfcn
.
h
>
#
endif
namespace
webrtc
{
namespace
adm_linux
{
inline
static
const
char
*
GetDllError
(
)
{
#
ifdef
WEBRTC_LINUX
char
*
err
=
dlerror
(
)
;
if
(
err
)
{
return
err
;
}
else
{
return
"
No
error
"
;
}
#
else
#
error
Not
implemented
#
endif
}
DllHandle
InternalLoadDll
(
absl
:
:
string_view
dll_name
)
{
#
ifdef
WEBRTC_LINUX
DllHandle
handle
=
dlopen
(
std
:
:
string
(
dll_name
)
.
c_str
(
)
RTLD_NOW
)
;
#
else
#
error
Not
implemented
#
endif
if
(
handle
=
=
kInvalidDllHandle
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Can
'
t
load
"
<
<
dll_name
<
<
"
:
"
<
<
GetDllError
(
)
;
}
return
handle
;
}
void
InternalUnloadDll
(
DllHandle
handle
)
{
#
ifdef
WEBRTC_LINUX
#
if
!
defined
(
ADDRESS_SANITIZER
)
if
(
dlclose
(
handle
)
!
=
0
)
{
RTC_LOG
(
LS_ERROR
)
<
<
GetDllError
(
)
;
}
#
endif
#
else
#
error
Not
implemented
#
endif
}
static
bool
LoadSymbol
(
DllHandle
handle
absl
:
:
string_view
symbol_name
void
*
*
symbol
)
{
#
ifdef
WEBRTC_LINUX
*
symbol
=
dlsym
(
handle
std
:
:
string
(
symbol_name
)
.
c_str
(
)
)
;
char
*
err
=
dlerror
(
)
;
if
(
err
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Error
loading
symbol
"
<
<
symbol_name
<
<
"
:
"
<
<
err
;
return
false
;
}
else
if
(
!
*
symbol
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Symbol
"
<
<
symbol_name
<
<
"
is
NULL
"
;
return
false
;
}
return
true
;
#
else
#
error
Not
implemented
#
endif
}
bool
InternalLoadSymbols
(
DllHandle
handle
int
num_symbols
const
char
*
const
symbol_names
[
]
void
*
symbols
[
]
)
{
#
ifdef
WEBRTC_LINUX
dlerror
(
)
;
#
endif
for
(
int
i
=
0
;
i
<
num_symbols
;
+
+
i
)
{
if
(
!
LoadSymbol
(
handle
symbol_names
[
i
]
&
symbols
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
}
}
