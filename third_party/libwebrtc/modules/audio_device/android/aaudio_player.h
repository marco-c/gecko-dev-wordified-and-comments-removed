#
ifndef
MODULES_AUDIO_DEVICE_ANDROID_AAUDIO_PLAYER_H_
#
define
MODULES_AUDIO_DEVICE_ANDROID_AAUDIO_PLAYER_H_
#
include
<
aaudio
/
AAudio
.
h
>
#
include
<
memory
>
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
modules
/
audio_device
/
android
/
aaudio_wrapper
.
h
"
#
include
"
modules
/
audio_device
/
include
/
audio_device_defines
.
h
"
#
include
"
rtc_base
/
message_handler
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
AudioDeviceBuffer
;
class
FineAudioBuffer
;
class
AudioManager
;
class
AAudioPlayer
final
:
public
AAudioObserverInterface
public
rtc
:
:
MessageHandler
{
public
:
explicit
AAudioPlayer
(
AudioManager
*
audio_manager
)
;
~
AAudioPlayer
(
)
;
int
Init
(
)
;
int
Terminate
(
)
;
int
InitPlayout
(
)
;
bool
PlayoutIsInitialized
(
)
const
;
int
StartPlayout
(
)
;
int
StopPlayout
(
)
;
bool
Playing
(
)
const
;
void
AttachAudioBuffer
(
AudioDeviceBuffer
*
audioBuffer
)
;
int
SpeakerVolumeIsAvailable
(
bool
&
available
)
;
int
SetSpeakerVolume
(
uint32_t
volume
)
{
return
-
1
;
}
int
SpeakerVolume
(
uint32_t
&
volume
)
const
{
return
-
1
;
}
int
MaxSpeakerVolume
(
uint32_t
&
maxVolume
)
const
{
return
-
1
;
}
int
MinSpeakerVolume
(
uint32_t
&
minVolume
)
const
{
return
-
1
;
}
protected
:
aaudio_data_callback_result_t
OnDataCallback
(
void
*
audio_data
int32_t
num_frames
)
override
;
void
OnErrorCallback
(
aaudio_result_t
error
)
override
;
void
OnMessage
(
rtc
:
:
Message
*
msg
)
override
;
private
:
void
HandleStreamDisconnected
(
)
;
SequenceChecker
main_thread_checker_
;
SequenceChecker
thread_checker_aaudio_
;
rtc
:
:
Thread
*
main_thread_
;
AAudioWrapper
aaudio_
;
std
:
:
unique_ptr
<
FineAudioBuffer
>
fine_audio_buffer_
;
int32_t
underrun_count_
=
0
;
bool
first_data_callback_
=
true
;
AudioDeviceBuffer
*
audio_device_buffer_
RTC_GUARDED_BY
(
main_thread_checker_
)
=
nullptr
;
bool
initialized_
RTC_GUARDED_BY
(
main_thread_checker_
)
=
false
;
bool
playing_
RTC_GUARDED_BY
(
main_thread_checker_
)
=
false
;
double
latency_millis_
RTC_GUARDED_BY
(
thread_checker_aaudio_
)
=
0
;
}
;
}
#
endif
