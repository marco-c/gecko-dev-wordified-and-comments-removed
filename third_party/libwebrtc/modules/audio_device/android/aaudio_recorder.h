#
ifndef
MODULES_AUDIO_DEVICE_ANDROID_AAUDIO_RECORDER_H_
#
define
MODULES_AUDIO_DEVICE_ANDROID_AAUDIO_RECORDER_H_
#
include
<
aaudio
/
AAudio
.
h
>
#
include
<
memory
>
#
include
"
modules
/
audio_device
/
android
/
aaudio_wrapper
.
h
"
#
include
"
modules
/
audio_device
/
include
/
audio_device_defines
.
h
"
#
include
"
rtc_base
/
message_handler
.
h
"
#
include
"
rtc_base
/
synchronization
/
sequence_checker
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
namespace
webrtc
{
class
AudioDeviceBuffer
;
class
FineAudioBuffer
;
class
AudioManager
;
class
AAudioRecorder
:
public
AAudioObserverInterface
public
rtc
:
:
MessageHandler
{
public
:
explicit
AAudioRecorder
(
AudioManager
*
audio_manager
)
;
~
AAudioRecorder
(
)
;
int
Init
(
)
;
int
Terminate
(
)
;
int
InitRecording
(
)
;
bool
RecordingIsInitialized
(
)
const
{
return
initialized_
;
}
int
StartRecording
(
)
;
int
StopRecording
(
)
;
bool
Recording
(
)
const
{
return
recording_
;
}
void
AttachAudioBuffer
(
AudioDeviceBuffer
*
audioBuffer
)
;
double
latency_millis
(
)
const
{
return
latency_millis_
;
}
int
EnableBuiltInAEC
(
bool
enable
)
;
int
EnableBuiltInAGC
(
bool
enable
)
;
int
EnableBuiltInNS
(
bool
enable
)
;
protected
:
aaudio_data_callback_result_t
OnDataCallback
(
void
*
audio_data
int32_t
num_frames
)
override
;
void
OnErrorCallback
(
aaudio_result_t
error
)
override
;
void
OnMessage
(
rtc
:
:
Message
*
msg
)
override
;
private
:
void
HandleStreamDisconnected
(
)
;
SequenceChecker
thread_checker_
;
SequenceChecker
thread_checker_aaudio_
;
rtc
:
:
Thread
*
main_thread_
;
AAudioWrapper
aaudio_
;
AudioDeviceBuffer
*
audio_device_buffer_
=
nullptr
;
bool
initialized_
=
false
;
bool
recording_
=
false
;
std
:
:
unique_ptr
<
FineAudioBuffer
>
fine_audio_buffer_
;
int32_t
overflow_count_
=
0
;
double
latency_millis_
=
0
;
bool
first_data_callback_
=
true
;
}
;
}
#
endif
