#
include
"
modules
/
audio_device
/
dummy
/
file_audio_device_factory
.
h
"
#
include
<
stdio
.
h
>
#
include
<
cstdlib
>
#
include
"
modules
/
audio_device
/
dummy
/
file_audio_device
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
namespace
webrtc
{
bool
FileAudioDeviceFactory
:
:
_isConfigured
=
false
;
char
FileAudioDeviceFactory
:
:
_inputAudioFilename
[
MAX_FILENAME_LEN
]
=
"
"
;
char
FileAudioDeviceFactory
:
:
_outputAudioFilename
[
MAX_FILENAME_LEN
]
=
"
"
;
FileAudioDevice
*
FileAudioDeviceFactory
:
:
CreateFileAudioDevice
(
)
{
if
(
!
_isConfigured
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
WebRTC
configured
with
WEBRTC_DUMMY_FILE_DEVICES
but
"
"
no
device
files
supplied
.
Will
fall
back
to
dummy
"
"
audio
.
"
;
return
nullptr
;
}
return
new
FileAudioDevice
(
_inputAudioFilename
_outputAudioFilename
)
;
}
void
FileAudioDeviceFactory
:
:
SetFilenamesToUse
(
const
char
*
inputAudioFilename
const
char
*
outputAudioFilename
)
{
#
ifdef
WEBRTC_DUMMY_FILE_DEVICES
RTC_DCHECK_LT
(
strlen
(
inputAudioFilename
)
MAX_FILENAME_LEN
)
;
RTC_DCHECK_LT
(
strlen
(
outputAudioFilename
)
MAX_FILENAME_LEN
)
;
strncpy
(
_inputAudioFilename
inputAudioFilename
MAX_FILENAME_LEN
)
;
strncpy
(
_outputAudioFilename
outputAudioFilename
MAX_FILENAME_LEN
)
;
_isConfigured
=
true
;
#
else
printf
(
"
Trying
to
use
dummy
file
devices
but
is
not
compiled
"
"
with
WEBRTC_DUMMY_FILE_DEVICES
.
Bailing
out
.
\
n
"
)
;
std
:
:
exit
(
1
)
;
#
endif
}
}
