#
ifndef
MODULES_AUDIO_DEVICE_WIN_CORE_AUDIO_BASE_WIN_H_
#
define
MODULES_AUDIO_DEVICE_WIN_CORE_AUDIO_BASE_WIN_H_
#
include
<
atomic
>
#
include
<
functional
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
string
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
modules
/
audio_device
/
win
/
core_audio_utility_win
.
h
"
#
include
"
rtc_base
/
platform_thread
.
h
"
namespace
webrtc
{
class
AudioDeviceBuffer
;
class
FineAudioBuffer
;
namespace
webrtc_win
{
class
CoreAudioBase
:
public
IAudioSessionEvents
{
public
:
enum
class
Direction
{
kInput
kOutput
}
;
enum
class
ErrorType
{
kStreamDisconnected
}
;
template
<
typename
T
>
auto
as_integer
(
T
const
value
)
-
>
typename
std
:
:
underlying_type
<
T
>
:
:
type
{
return
static_cast
<
typename
std
:
:
underlying_type
<
T
>
:
:
type
>
(
value
)
;
}
typedef
std
:
:
function
<
bool
(
uint64_t
device_frequency
)
>
OnDataCallback
;
typedef
std
:
:
function
<
bool
(
ErrorType
error
)
>
OnErrorCallback
;
void
ThreadRun
(
)
;
CoreAudioBase
(
const
CoreAudioBase
&
)
=
delete
;
CoreAudioBase
&
operator
=
(
const
CoreAudioBase
&
)
=
delete
;
protected
:
explicit
CoreAudioBase
(
Direction
direction
bool
automatic_restart
OnDataCallback
data_callback
OnErrorCallback
error_callback
)
;
~
CoreAudioBase
(
)
;
std
:
:
string
GetDeviceID
(
int
index
)
const
;
int
SetDevice
(
int
index
)
;
int
DeviceName
(
int
index
std
:
:
string
*
name
std
:
:
string
*
guid
)
const
;
bool
SwitchDeviceIfNeeded
(
)
;
bool
Init
(
)
;
bool
Start
(
)
;
bool
Stop
(
)
;
bool
IsVolumeControlAvailable
(
bool
*
available
)
const
;
bool
Restart
(
)
;
Direction
direction
(
)
const
{
return
direction_
;
}
bool
automatic_restart
(
)
const
{
return
automatic_restart_
;
}
void
ReleaseCOMObjects
(
)
;
int
NumberOfActiveDevices
(
)
const
;
int
NumberOfEnumeratedDevices
(
)
const
;
bool
IsInput
(
)
const
;
bool
IsOutput
(
)
const
;
bool
IsDefaultDevice
(
int
index
)
const
;
bool
IsDefaultCommunicationsDevice
(
int
index
)
const
;
bool
IsDefaultDeviceId
(
absl
:
:
string_view
device_id
)
const
;
bool
IsDefaultCommunicationsDeviceId
(
absl
:
:
string_view
device_id
)
const
;
EDataFlow
GetDataFlow
(
)
const
;
bool
IsRestarting
(
)
const
;
int64_t
TimeSinceStart
(
)
const
;
SequenceChecker
thread_checker_
;
SequenceChecker
thread_checker_audio_
;
AudioDeviceBuffer
*
audio_device_buffer_
=
nullptr
;
bool
initialized_
=
false
;
WAVEFORMATEXTENSIBLE
format_
=
{
}
;
uint32_t
endpoint_buffer_size_frames_
=
0
;
Microsoft
:
:
WRL
:
:
ComPtr
<
IAudioClock
>
audio_clock_
;
Microsoft
:
:
WRL
:
:
ComPtr
<
IAudioClient
>
audio_client_
;
bool
is_active_
=
false
;
int64_t
num_data_callbacks_
=
0
;
int
latency_ms_
=
0
;
std
:
:
optional
<
uint32_t
>
sample_rate_
;
private
:
const
Direction
direction_
;
const
bool
automatic_restart_
;
const
OnDataCallback
on_data_callback_
;
const
OnErrorCallback
on_error_callback_
;
ScopedHandle
audio_samples_event_
;
ScopedHandle
stop_event_
;
ScopedHandle
restart_event_
;
int64_t
start_time_
=
0
;
std
:
:
string
device_id_
;
int
device_index_
=
-
1
;
LONG
ref_count_
=
1
;
std
:
:
atomic
<
bool
>
is_restarting_
;
webrtc
:
:
PlatformThread
audio_thread_
;
Microsoft
:
:
WRL
:
:
ComPtr
<
IAudioSessionControl
>
audio_session_control_
;
void
StopThread
(
)
;
AudioSessionState
GetAudioSessionState
(
)
const
;
bool
HandleRestartEvent
(
)
;
ULONG
__stdcall
AddRef
(
)
override
;
ULONG
__stdcall
Release
(
)
override
;
HRESULT
__stdcall
QueryInterface
(
REFIID
iid
void
*
*
object
)
override
;
HRESULT
__stdcall
OnStateChanged
(
AudioSessionState
new_state
)
override
;
HRESULT
__stdcall
OnSessionDisconnected
(
AudioSessionDisconnectReason
disconnect_reason
)
override
;
HRESULT
__stdcall
OnDisplayNameChanged
(
LPCWSTR
new_display_name
LPCGUID
event_context
)
override
;
HRESULT
__stdcall
OnIconPathChanged
(
LPCWSTR
new_icon_path
LPCGUID
event_context
)
override
;
HRESULT
__stdcall
OnSimpleVolumeChanged
(
float
new_simple_volume
BOOL
new_mute
LPCGUID
event_context
)
override
;
HRESULT
__stdcall
OnChannelVolumeChanged
(
DWORD
channel_count
float
new_channel_volumes
[
]
DWORD
changed_channel
LPCGUID
event_context
)
override
;
HRESULT
__stdcall
OnGroupingParamChanged
(
LPCGUID
new_grouping_param
LPCGUID
event_context
)
override
;
}
;
}
}
#
endif
