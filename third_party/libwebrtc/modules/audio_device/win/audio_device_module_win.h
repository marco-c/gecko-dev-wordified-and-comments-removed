#
ifndef
MODULES_AUDIO_DEVICE_WIN_AUDIO_DEVICE_MODULE_WIN_H_
#
define
MODULES_AUDIO_DEVICE_WIN_AUDIO_DEVICE_MODULE_WIN_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
modules
/
audio_device
/
include
/
audio_device
.
h
"
namespace
webrtc
{
class
AudioDeviceBuffer
;
namespace
webrtc_win
{
class
AudioInput
{
public
:
virtual
~
AudioInput
(
)
{
}
virtual
int
Init
(
)
=
0
;
virtual
int
Terminate
(
)
=
0
;
virtual
int
NumDevices
(
)
const
=
0
;
virtual
int
SetDevice
(
int
index
)
=
0
;
virtual
int
SetDevice
(
AudioDeviceModule
:
:
WindowsDeviceType
device
)
=
0
;
virtual
int
DeviceName
(
int
index
std
:
:
string
*
name
std
:
:
string
*
guid
)
=
0
;
virtual
void
AttachAudioBuffer
(
AudioDeviceBuffer
*
audio_buffer
)
=
0
;
virtual
bool
RecordingIsInitialized
(
)
const
=
0
;
virtual
int
InitRecording
(
)
=
0
;
virtual
int
StartRecording
(
)
=
0
;
virtual
int
StopRecording
(
)
=
0
;
virtual
bool
Recording
(
)
=
0
;
virtual
int
VolumeIsAvailable
(
bool
*
available
)
=
0
;
virtual
int
RestartRecording
(
)
=
0
;
virtual
bool
Restarting
(
)
const
=
0
;
virtual
int
SetSampleRate
(
uint32_t
sample_rate
)
=
0
;
}
;
class
AudioOutput
{
public
:
virtual
~
AudioOutput
(
)
{
}
virtual
int
Init
(
)
=
0
;
virtual
int
Terminate
(
)
=
0
;
virtual
int
NumDevices
(
)
const
=
0
;
virtual
int
SetDevice
(
int
index
)
=
0
;
virtual
int
SetDevice
(
AudioDeviceModule
:
:
WindowsDeviceType
device
)
=
0
;
virtual
int
DeviceName
(
int
index
std
:
:
string
*
name
std
:
:
string
*
guid
)
=
0
;
virtual
void
AttachAudioBuffer
(
AudioDeviceBuffer
*
audio_buffer
)
=
0
;
virtual
bool
PlayoutIsInitialized
(
)
const
=
0
;
virtual
int
InitPlayout
(
)
=
0
;
virtual
int
StartPlayout
(
)
=
0
;
virtual
int
StopPlayout
(
)
=
0
;
virtual
bool
Playing
(
)
=
0
;
virtual
int
VolumeIsAvailable
(
bool
*
available
)
=
0
;
virtual
int
RestartPlayout
(
)
=
0
;
virtual
bool
Restarting
(
)
const
=
0
;
virtual
int
SetSampleRate
(
uint32_t
sample_rate
)
=
0
;
}
;
rtc
:
:
scoped_refptr
<
AudioDeviceModuleForTest
>
CreateWindowsCoreAudioAudioDeviceModuleFromInputAndOutput
(
std
:
:
unique_ptr
<
AudioInput
>
audio_input
std
:
:
unique_ptr
<
AudioOutput
>
audio_output
TaskQueueFactory
*
task_queue_factory
)
;
}
}
#
endif
