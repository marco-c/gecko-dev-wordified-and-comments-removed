#
ifndef
MODULES_PACING_TASK_QUEUE_PACED_SENDER_H_
#
define
MODULES_PACING_TASK_QUEUE_PACED_SENDER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
functional
>
#
include
<
memory
>
#
include
<
queue
>
#
include
<
vector
>
#
include
"
absl
/
base
/
attributes
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
api
/
webrtc_key_value_config
.
h
"
#
include
"
modules
/
pacing
/
pacing_controller
.
h
"
#
include
"
modules
/
pacing
/
rtp_packet_pacer
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_to_send
.
h
"
#
include
"
rtc_base
/
numerics
/
exp_filter
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
task_queue
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
Clock
;
class
RtcEventLog
;
class
TaskQueuePacedSender
:
public
RtpPacketPacer
public
RtpPacketSender
{
public
:
ABSL_DEPRECATED
(
"
Use
the
version
with
field_trials
reference
instead
.
"
)
TaskQueuePacedSender
(
Clock
*
clock
PacingController
:
:
PacketSender
*
packet_sender
RtcEventLog
*
event_log
const
WebRtcKeyValueConfig
*
field_trials
TaskQueueFactory
*
task_queue_factory
TimeDelta
max_hold_back_window
=
PacingController
:
:
kMinSleepTime
int
max_hold_back_window_in_packets
=
-
1
)
;
TaskQueuePacedSender
(
Clock
*
clock
PacingController
:
:
PacketSender
*
packet_sender
RtcEventLog
*
event_log
const
WebRtcKeyValueConfig
&
field_trials
TaskQueueFactory
*
task_queue_factory
TimeDelta
max_hold_back_window
=
PacingController
:
:
kMinSleepTime
int
max_hold_back_window_in_packets
=
-
1
)
;
~
TaskQueuePacedSender
(
)
override
;
void
EnsureStarted
(
)
;
void
EnqueuePackets
(
std
:
:
vector
<
std
:
:
unique_ptr
<
RtpPacketToSend
>
>
packets
)
override
;
void
CreateProbeCluster
(
DataRate
bitrate
int
cluster_id
)
override
;
void
Pause
(
)
override
;
void
Resume
(
)
override
;
void
SetCongestionWindow
(
DataSize
congestion_window_size
)
override
;
void
UpdateOutstandingData
(
DataSize
outstanding_data
)
override
;
void
SetPacingRates
(
DataRate
pacing_rate
DataRate
padding_rate
)
override
;
void
SetAccountForAudioPackets
(
bool
account_for_audio
)
override
;
void
SetIncludeOverhead
(
)
override
;
void
SetTransportOverhead
(
DataSize
overhead_per_packet
)
override
;
TimeDelta
OldestPacketWaitTime
(
)
const
override
;
DataSize
QueueSizeData
(
)
const
override
;
absl
:
:
optional
<
Timestamp
>
FirstSentPacketTime
(
)
const
override
;
TimeDelta
ExpectedQueueTime
(
)
const
override
;
void
SetQueueTimeLimit
(
TimeDelta
limit
)
override
;
protected
:
struct
Stats
{
Stats
(
)
:
oldest_packet_enqueue_time
(
Timestamp
:
:
MinusInfinity
(
)
)
queue_size
(
DataSize
:
:
Zero
(
)
)
expected_queue_time
(
TimeDelta
:
:
Zero
(
)
)
{
}
Timestamp
oldest_packet_enqueue_time
;
DataSize
queue_size
;
TimeDelta
expected_queue_time
;
absl
:
:
optional
<
Timestamp
>
first_sent_packet_time
;
}
;
void
OnStatsUpdated
(
const
Stats
&
stats
)
;
private
:
void
MaybeProcessPackets
(
Timestamp
scheduled_process_time
)
;
void
UpdateStats
(
)
RTC_RUN_ON
(
task_queue_
)
;
Stats
GetStats
(
)
const
;
Clock
*
const
clock_
;
const
bool
allow_low_precision_
;
const
TimeDelta
max_hold_back_window_
;
const
int
max_hold_back_window_in_packets_
;
PacingController
pacing_controller_
RTC_GUARDED_BY
(
task_queue_
)
;
Timestamp
next_process_time_
RTC_GUARDED_BY
(
task_queue_
)
;
bool
is_started_
RTC_GUARDED_BY
(
task_queue_
)
;
bool
is_shutdown_
RTC_GUARDED_BY
(
task_queue_
)
;
rtc
:
:
ExpFilter
packet_size_
RTC_GUARDED_BY
(
task_queue_
)
;
mutable
Mutex
stats_mutex_
;
Stats
current_stats_
RTC_GUARDED_BY
(
stats_mutex_
)
;
rtc
:
:
TaskQueue
task_queue_
;
}
;
}
#
endif
