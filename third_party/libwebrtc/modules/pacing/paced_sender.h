#
ifndef
MODULES_PACING_PACED_SENDER_H_
#
define
MODULES_PACING_PACED_SENDER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
atomic
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
function_view
.
h
"
#
include
"
api
/
transport
/
field_trial_based_config
.
h
"
#
include
"
api
/
transport
/
network_types
.
h
"
#
include
"
api
/
transport
/
webrtc_key_value_config
.
h
"
#
include
"
modules
/
include
/
module
.
h
"
#
include
"
modules
/
pacing
/
bitrate_prober
.
h
"
#
include
"
modules
/
pacing
/
interval_budget
.
h
"
#
include
"
modules
/
pacing
/
pacing_controller
.
h
"
#
include
"
modules
/
pacing
/
packet_router
.
h
"
#
include
"
modules
/
pacing
/
rtp_packet_pacer
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_packet_sender
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_to_send
.
h
"
#
include
"
modules
/
utility
/
include
/
process_thread
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
Clock
;
class
RtcEventLog
;
class
PacedSender
:
public
RtpPacketPacer
public
RtpPacketSender
{
public
:
static
const
int64_t
kMaxQueueLengthMs
;
static
const
float
kDefaultPaceMultiplier
;
PacedSender
(
Clock
*
clock
PacketRouter
*
packet_router
RtcEventLog
*
event_log
const
WebRtcKeyValueConfig
&
field_trials
ProcessThread
*
process_thread
=
nullptr
)
;
~
PacedSender
(
)
override
;
void
EnqueuePackets
(
std
:
:
vector
<
std
:
:
unique_ptr
<
RtpPacketToSend
>
>
packet
)
override
;
void
CreateProbeCluster
(
DataRate
bitrate
int
cluster_id
)
override
;
void
Pause
(
)
override
;
void
Resume
(
)
override
;
void
SetCongested
(
bool
congested
)
override
;
void
SetPacingRates
(
DataRate
pacing_rate
DataRate
padding_rate
)
override
;
void
SetAccountForAudioPackets
(
bool
account_for_audio
)
override
;
void
SetIncludeOverhead
(
)
override
;
void
SetTransportOverhead
(
DataSize
overhead_per_packet
)
override
;
TimeDelta
OldestPacketWaitTime
(
)
const
override
;
DataSize
QueueSizeData
(
)
const
override
;
absl
:
:
optional
<
Timestamp
>
FirstSentPacketTime
(
)
const
override
;
TimeDelta
ExpectedQueueTime
(
)
const
override
;
void
SetQueueTimeLimit
(
TimeDelta
limit
)
override
;
private
:
int64_t
TimeUntilNextProcess
(
)
;
void
ProcessThreadAttached
(
ProcessThread
*
process_thread
)
;
void
Process
(
)
;
void
MaybeWakupProcessThread
(
)
;
class
ModuleProxy
:
public
Module
{
public
:
explicit
ModuleProxy
(
PacedSender
*
delegate
)
:
delegate_
(
delegate
)
{
}
private
:
int64_t
TimeUntilNextProcess
(
)
override
{
return
delegate_
-
>
TimeUntilNextProcess
(
)
;
}
void
Process
(
)
override
{
return
delegate_
-
>
Process
(
)
;
}
void
ProcessThreadAttached
(
ProcessThread
*
process_thread
)
override
{
return
delegate_
-
>
ProcessThreadAttached
(
process_thread
)
;
}
PacedSender
*
const
delegate_
;
}
module_proxy_
{
this
}
;
mutable
Mutex
mutex_
;
const
PacingController
:
:
ProcessMode
process_mode_
;
PacingController
pacing_controller_
RTC_GUARDED_BY
(
mutex_
)
;
Clock
*
const
clock_
;
ProcessThread
*
const
process_thread_
;
}
;
}
#
endif
