#
ifndef
MODULES_PACING_ROUND_ROBIN_PACKET_QUEUE_H_
#
define
MODULES_PACING_ROUND_ROBIN_PACKET_QUEUE_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
list
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
queue
>
#
include
<
set
>
#
include
<
unordered_map
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
modules
/
pacing
/
pacing_controller
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_to_send
.
h
"
namespace
webrtc
{
class
RoundRobinPacketQueue
:
public
PacingController
:
:
PacketQueue
{
public
:
explicit
RoundRobinPacketQueue
(
Timestamp
start_time
)
;
~
RoundRobinPacketQueue
(
)
;
void
Push
(
Timestamp
enqueue_time
std
:
:
unique_ptr
<
RtpPacketToSend
>
packet
)
override
;
std
:
:
unique_ptr
<
RtpPacketToSend
>
Pop
(
)
override
;
int
SizeInPackets
(
)
const
override
;
DataSize
SizeInPayloadBytes
(
)
const
override
;
const
std
:
:
array
<
int
kNumMediaTypes
>
&
SizeInPacketsPerRtpPacketMediaType
(
)
const
override
;
Timestamp
LeadingAudioPacketEnqueueTime
(
)
const
override
;
Timestamp
OldestEnqueueTime
(
)
const
override
;
TimeDelta
AverageQueueTime
(
)
const
override
;
void
UpdateAverageQueueTime
(
Timestamp
now
)
override
;
void
SetPauseState
(
bool
paused
Timestamp
now
)
override
;
private
:
struct
QueuedPacket
{
public
:
QueuedPacket
(
int
priority
Timestamp
enqueue_time
int64_t
enqueue_order
std
:
:
multiset
<
Timestamp
>
:
:
iterator
enqueue_time_it
std
:
:
unique_ptr
<
RtpPacketToSend
>
packet
)
;
QueuedPacket
(
const
QueuedPacket
&
rhs
)
;
~
QueuedPacket
(
)
;
bool
operator
<
(
const
QueuedPacket
&
other
)
const
;
int
Priority
(
)
const
;
RtpPacketMediaType
Type
(
)
const
;
uint32_t
Ssrc
(
)
const
;
Timestamp
EnqueueTime
(
)
const
;
bool
IsRetransmission
(
)
const
;
int64_t
EnqueueOrder
(
)
const
;
RtpPacketToSend
*
RtpPacket
(
)
const
;
std
:
:
multiset
<
Timestamp
>
:
:
iterator
EnqueueTimeIterator
(
)
const
;
void
UpdateEnqueueTimeIterator
(
std
:
:
multiset
<
Timestamp
>
:
:
iterator
it
)
;
void
SubtractPauseTime
(
TimeDelta
pause_time_sum
)
;
private
:
int
priority_
;
Timestamp
enqueue_time_
;
int64_t
enqueue_order_
;
bool
is_retransmission_
;
std
:
:
multiset
<
Timestamp
>
:
:
iterator
enqueue_time_it_
;
RtpPacketToSend
*
owned_packet_
;
}
;
class
PriorityPacketQueue
:
public
std
:
:
priority_queue
<
QueuedPacket
>
{
public
:
using
const_iterator
=
container_type
:
:
const_iterator
;
const_iterator
begin
(
)
const
;
const_iterator
end
(
)
const
;
}
;
struct
StreamPrioKey
{
StreamPrioKey
(
int
priority
DataSize
size
)
:
priority
(
priority
)
size
(
size
)
{
}
bool
operator
<
(
const
StreamPrioKey
&
other
)
const
{
if
(
priority
!
=
other
.
priority
)
return
priority
<
other
.
priority
;
return
size
<
other
.
size
;
}
const
int
priority
;
const
DataSize
size
;
}
;
struct
Stream
{
Stream
(
)
;
Stream
(
const
Stream
&
)
;
virtual
~
Stream
(
)
;
DataSize
size
;
uint32_t
ssrc
;
PriorityPacketQueue
packet_queue
;
std
:
:
multimap
<
StreamPrioKey
uint32_t
>
:
:
iterator
priority_it
;
}
;
void
Push
(
QueuedPacket
packet
)
;
DataSize
PacketSize
(
const
QueuedPacket
&
packet
)
const
;
void
MaybePromoteSinglePacketToNormalQueue
(
)
;
Stream
*
GetHighestPriorityStream
(
)
;
bool
IsSsrcScheduled
(
uint32_t
ssrc
)
const
;
DataSize
transport_overhead_per_packet_
;
Timestamp
time_last_updated_
;
int64_t
enqueue_count_
;
bool
paused_
;
int
size_packets_
;
std
:
:
array
<
int
kNumMediaTypes
>
size_packets_per_media_type_
;
DataSize
size_
;
DataSize
max_size_
;
TimeDelta
queue_time_sum_
;
TimeDelta
pause_time_sum_
;
std
:
:
multimap
<
StreamPrioKey
uint32_t
>
stream_priorities_
;
std
:
:
unordered_map
<
uint32_t
Stream
>
streams_
;
std
:
:
multiset
<
Timestamp
>
enqueue_times_
;
absl
:
:
optional
<
QueuedPacket
>
single_packet_queue_
;
bool
include_overhead_
;
}
;
}
#
endif
