#
include
"
modules
/
audio_mixer
/
default_output_rate_calculator
.
h
"
#
include
<
algorithm
>
#
include
<
iterator
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
audio
/
audio_processing
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
int
DefaultOutputRateCalculator
:
:
CalculateOutputRateFromRange
(
ArrayView
<
const
int
>
preferred_sample_rates
)
{
if
(
preferred_sample_rates
.
empty
(
)
)
{
return
DefaultOutputRateCalculator
:
:
kDefaultFrequency
;
}
using
NativeRate
=
AudioProcessing
:
:
NativeRate
;
const
int
maximal_frequency
=
*
std
:
:
max_element
(
preferred_sample_rates
.
cbegin
(
)
preferred_sample_rates
.
cend
(
)
)
;
RTC_DCHECK_LE
(
NativeRate
:
:
kSampleRate8kHz
maximal_frequency
)
;
RTC_DCHECK_GE
(
NativeRate
:
:
kSampleRate48kHz
maximal_frequency
)
;
static
constexpr
NativeRate
native_rates
[
]
=
{
NativeRate
:
:
kSampleRate8kHz
NativeRate
:
:
kSampleRate16kHz
NativeRate
:
:
kSampleRate32kHz
NativeRate
:
:
kSampleRate48kHz
}
;
const
auto
*
rounded_up_index
=
std
:
:
lower_bound
(
std
:
:
begin
(
native_rates
)
std
:
:
end
(
native_rates
)
maximal_frequency
)
;
RTC_DCHECK
(
rounded_up_index
!
=
std
:
:
end
(
native_rates
)
)
;
return
*
rounded_up_index
;
}
}
