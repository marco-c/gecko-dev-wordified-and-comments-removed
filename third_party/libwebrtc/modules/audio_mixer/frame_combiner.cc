#
include
"
modules
/
audio_mixer
/
frame_combiner
.
h
"
#
include
<
algorithm
>
#
include
<
array
>
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
audio
/
audio_frame
.
h
"
#
include
"
api
/
audio
/
audio_view
.
h
"
#
include
"
api
/
rtp_packet_info
.
h
"
#
include
"
api
/
rtp_packet_infos
.
h
"
#
include
"
common_audio
/
include
/
audio_util
.
h
"
#
include
"
modules
/
audio_mixer
/
audio_frame_manipulator
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
limiter
.
h
"
#
include
"
modules
/
audio_processing
/
logging
/
apm_data_dumper
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
void
SetAudioFrameFields
(
ArrayView
<
const
AudioFrame
*
const
>
mix_list
size_t
number_of_channels
int
sample_rate
size_t
AudioFrame
*
audio_frame_for_mixing
)
{
const
size_t
samples_per_channel
=
SampleRateToDefaultChannelSize
(
sample_rate
)
;
audio_frame_for_mixing
-
>
UpdateFrame
(
0
nullptr
samples_per_channel
sample_rate
AudioFrame
:
:
kUndefined
AudioFrame
:
:
kVadUnknown
number_of_channels
)
;
if
(
mix_list
.
empty
(
)
)
{
audio_frame_for_mixing
-
>
elapsed_time_ms_
=
-
1
;
}
else
{
audio_frame_for_mixing
-
>
timestamp_
=
mix_list
[
0
]
-
>
timestamp_
;
audio_frame_for_mixing
-
>
elapsed_time_ms_
=
mix_list
[
0
]
-
>
elapsed_time_ms_
;
audio_frame_for_mixing
-
>
ntp_time_ms_
=
mix_list
[
0
]
-
>
ntp_time_ms_
;
std
:
:
vector
<
RtpPacketInfo
>
packet_infos
;
for
(
const
auto
&
frame
:
mix_list
)
{
audio_frame_for_mixing
-
>
timestamp_
=
std
:
:
min
(
audio_frame_for_mixing
-
>
timestamp_
frame
-
>
timestamp_
)
;
audio_frame_for_mixing
-
>
ntp_time_ms_
=
std
:
:
min
(
audio_frame_for_mixing
-
>
ntp_time_ms_
frame
-
>
ntp_time_ms_
)
;
audio_frame_for_mixing
-
>
elapsed_time_ms_
=
std
:
:
max
(
audio_frame_for_mixing
-
>
elapsed_time_ms_
frame
-
>
elapsed_time_ms_
)
;
packet_infos
.
insert
(
packet_infos
.
end
(
)
frame
-
>
packet_infos_
.
begin
(
)
frame
-
>
packet_infos_
.
end
(
)
)
;
}
audio_frame_for_mixing
-
>
packet_infos_
=
RtpPacketInfos
(
std
:
:
move
(
packet_infos
)
)
;
}
}
void
MixFewFramesWithNoLimiter
(
ArrayView
<
const
AudioFrame
*
const
>
mix_list
AudioFrame
*
audio_frame_for_mixing
)
{
if
(
mix_list
.
empty
(
)
)
{
audio_frame_for_mixing
-
>
Mute
(
)
;
return
;
}
RTC_DCHECK_LE
(
mix_list
.
size
(
)
1
)
;
InterleavedView
<
int16_t
>
dst
=
audio_frame_for_mixing
-
>
mutable_data
(
mix_list
[
0
]
-
>
samples_per_channel_
mix_list
[
0
]
-
>
num_channels_
)
;
CopySamples
(
dst
mix_list
[
0
]
-
>
data_view
(
)
)
;
}
void
MixToFloatFrame
(
ArrayView
<
const
AudioFrame
*
const
>
mix_list
DeinterleavedView
<
float
>
&
mixing_buffer
)
{
const
size_t
number_of_channels
=
NumChannels
(
mixing_buffer
)
;
mixing_buffer
.
Clear
(
)
;
for
(
size_t
i
=
0
;
i
<
mix_list
.
size
(
)
;
+
+
i
)
{
InterleavedView
<
const
int16_t
>
frame_data
=
mix_list
[
i
]
-
>
data_view
(
)
;
RTC_CHECK
(
!
frame_data
.
empty
(
)
)
;
for
(
size_t
j
=
0
;
j
<
number_of_channels
;
+
+
j
)
{
MonoView
<
float
>
channel
=
mixing_buffer
[
j
]
;
for
(
size_t
k
=
0
;
k
<
SamplesPerChannel
(
channel
)
;
+
+
k
)
{
channel
[
k
]
+
=
frame_data
[
number_of_channels
*
k
+
j
]
;
}
}
}
}
void
RunLimiter
(
DeinterleavedView
<
float
>
deinterleaved
Limiter
*
limiter
)
{
limiter
-
>
SetSamplesPerChannel
(
deinterleaved
.
samples_per_channel
(
)
)
;
limiter
-
>
Process
(
deinterleaved
)
;
}
void
InterleaveToAudioFrame
(
DeinterleavedView
<
float
>
deinterleaved
AudioFrame
*
audio_frame_for_mixing
)
{
InterleavedView
<
int16_t
>
mixing_data
=
audio_frame_for_mixing
-
>
mutable_data
(
deinterleaved
.
samples_per_channel
(
)
deinterleaved
.
num_channels
(
)
)
;
for
(
size_t
i
=
0
;
i
<
mixing_data
.
num_channels
(
)
;
+
+
i
)
{
auto
channel
=
deinterleaved
[
i
]
;
for
(
size_t
j
=
0
;
j
<
mixing_data
.
samples_per_channel
(
)
;
+
+
j
)
{
mixing_data
[
mixing_data
.
num_channels
(
)
*
j
+
i
]
=
FloatS16ToS16
(
channel
[
j
]
)
;
}
}
}
}
constexpr
size_t
FrameCombiner
:
:
kMaximumNumberOfChannels
;
constexpr
size_t
FrameCombiner
:
:
kMaximumChannelSize
;
FrameCombiner
:
:
FrameCombiner
(
bool
use_limiter
)
:
data_dumper_
(
new
ApmDataDumper
(
0
)
)
limiter_
(
data_dumper_
.
get
(
)
kMaximumChannelSize
"
AudioMixer
"
)
use_limiter_
(
use_limiter
)
{
static_assert
(
kMaximumChannelSize
*
kMaximumNumberOfChannels
<
=
AudioFrame
:
:
kMaxDataSizeSamples
"
"
)
;
}
FrameCombiner
:
:
~
FrameCombiner
(
)
=
default
;
void
FrameCombiner
:
:
Combine
(
ArrayView
<
AudioFrame
*
const
>
mix_list
size_t
number_of_channels
int
sample_rate
size_t
number_of_streams
AudioFrame
*
audio_frame_for_mixing
)
{
RTC_DCHECK
(
audio_frame_for_mixing
)
;
RTC_DCHECK_GT
(
sample_rate
0
)
;
number_of_channels
=
std
:
:
min
(
number_of_channels
kMaximumNumberOfChannels
)
;
SetAudioFrameFields
(
mix_list
number_of_channels
sample_rate
number_of_streams
audio_frame_for_mixing
)
;
size_t
samples_per_channel
=
SampleRateToDefaultChannelSize
(
sample_rate
)
;
#
if
RTC_DCHECK_IS_ON
for
(
const
auto
*
frame
:
mix_list
)
{
RTC_DCHECK_EQ
(
samples_per_channel
frame
-
>
samples_per_channel_
)
;
RTC_DCHECK_EQ
(
sample_rate
frame
-
>
sample_rate_hz_
)
;
}
#
endif
for
(
auto
*
frame
:
mix_list
)
{
RemixFrame
(
number_of_channels
frame
)
;
}
if
(
number_of_streams
<
=
1
)
{
MixFewFramesWithNoLimiter
(
mix_list
audio_frame_for_mixing
)
;
return
;
}
RTC_DCHECK_LE
(
samples_per_channel
kMaximumChannelSize
)
;
samples_per_channel
=
std
:
:
min
(
samples_per_channel
kMaximumChannelSize
)
;
DeinterleavedView
<
float
>
deinterleaved
(
mixing_buffer_
.
data
(
)
samples_per_channel
number_of_channels
)
;
MixToFloatFrame
(
mix_list
deinterleaved
)
;
if
(
use_limiter_
)
{
RunLimiter
(
deinterleaved
&
limiter_
)
;
}
InterleaveToAudioFrame
(
deinterleaved
audio_frame_for_mixing
)
;
}
}
