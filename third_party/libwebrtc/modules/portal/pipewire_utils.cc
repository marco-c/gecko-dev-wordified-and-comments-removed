#
include
"
modules
/
portal
/
pipewire_utils
.
h
"
#
include
<
pipewire
/
pipewire
.
h
>
#
include
"
rtc_base
/
sanitizer
.
h
"
#
if
defined
(
WEBRTC_DLOPEN_PIPEWIRE
)
#
include
"
modules
/
portal
/
pipewire_stubs
.
h
"
#
endif
namespace
webrtc
{
RTC_NO_SANITIZE
(
"
cfi
-
icall
"
)
bool
InitializePipeWire
(
)
{
#
if
defined
(
WEBRTC_DLOPEN_PIPEWIRE
)
static
constexpr
char
kPipeWireLib
[
]
=
"
libpipewire
-
0
.
3
.
so
.
0
"
;
using
modules_portal
:
:
InitializeStubs
;
using
modules_portal
:
:
kModulePipewire
;
modules_portal
:
:
StubPathMap
paths
;
paths
[
kModulePipewire
]
.
push_back
(
kPipeWireLib
)
;
static
bool
result
=
InitializeStubs
(
paths
)
;
return
result
;
#
else
return
true
;
#
endif
}
PipeWireThreadLoopLock
:
:
PipeWireThreadLoopLock
(
pw_thread_loop
*
loop
)
:
loop_
(
loop
)
{
pw_thread_loop_lock
(
loop_
)
;
}
PipeWireThreadLoopLock
:
:
~
PipeWireThreadLoopLock
(
)
{
pw_thread_loop_unlock
(
loop_
)
;
}
}
