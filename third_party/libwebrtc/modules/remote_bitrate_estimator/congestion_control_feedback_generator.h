#
ifndef
MODULES_REMOTE_BITRATE_ESTIMATOR_CONGESTION_CONTROL_FEEDBACK_GENERATOR_H_
#
define
MODULES_REMOTE_BITRATE_ESTIMATOR_CONGESTION_CONTROL_FEEDBACK_GENERATOR_H_
#
include
<
cstdint
>
#
include
<
map
>
#
include
<
optional
>
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
congestion_control_feedback_tracker
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
rtp_transport_feedback_generator
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
rtc_base
/
experiments
/
field_trial_parser
.
h
"
namespace
webrtc
{
class
CongestionControlFeedbackGenerator
:
public
RtpTransportFeedbackGenerator
{
public
:
CongestionControlFeedbackGenerator
(
const
Environment
&
env
RtpTransportFeedbackGenerator
:
:
RtcpSender
feedback_sender
)
;
~
CongestionControlFeedbackGenerator
(
)
=
default
;
void
OnReceivedPacket
(
const
RtpPacketReceived
&
packet
)
override
;
void
OnSendBandwidthEstimateChanged
(
DataRate
estimate
)
override
;
TimeDelta
Process
(
Timestamp
now
)
override
;
private
:
Timestamp
NextFeedbackTime
(
)
const
RTC_RUN_ON
(
sequence_checker_
)
;
void
SendFeedback
(
Timestamp
now
)
RTC_RUN_ON
(
sequence_checker_
)
;
void
CalculateNextPossibleSendTime
(
DataSize
feedback_size
Timestamp
now
)
RTC_RUN_ON
(
sequence_checker_
)
;
const
Environment
env_
;
SequenceChecker
sequence_checker_
;
const
RtcpSender
rtcp_sender_
;
FieldTrialParameter
<
TimeDelta
>
min_time_between_feedback_
;
FieldTrialParameter
<
TimeDelta
>
max_time_to_wait_for_packet_with_marker_
;
FieldTrialParameter
<
TimeDelta
>
max_time_between_feedback_
;
DataRate
max_feedback_rate_
=
DataRate
:
:
KilobitsPerSec
(
1000
)
;
DataSize
packet_overhead_
=
DataSize
:
:
Zero
(
)
;
DataSize
send_rate_debt_
=
DataSize
:
:
Zero
(
)
;
std
:
:
map
<
uint32_t
CongestionControlFeedbackTracker
>
feedback_trackers_
;
Timestamp
last_feedback_sent_time_
=
Timestamp
:
:
Zero
(
)
;
std
:
:
optional
<
Timestamp
>
first_arrival_time_since_feedback_
;
bool
marker_bit_seen_
=
false
;
Timestamp
next_possible_feedback_send_time_
=
Timestamp
:
:
Zero
(
)
;
}
;
}
#
endif
