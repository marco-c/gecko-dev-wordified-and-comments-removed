#
ifndef
MODULES_REMOTE_BITRATE_ESTIMATOR_OVERUSE_ESTIMATOR_H_
#
define
MODULES_REMOTE_BITRATE_ESTIMATOR_OVERUSE_ESTIMATOR_H_
#
include
<
stdint
.
h
>
#
include
<
deque
>
#
include
"
api
/
transport
/
bandwidth_usage
.
h
"
namespace
webrtc
{
class
OveruseEstimator
{
public
:
OveruseEstimator
(
)
;
OveruseEstimator
(
const
OveruseEstimator
&
)
=
delete
;
OveruseEstimator
&
operator
=
(
const
OveruseEstimator
&
)
=
delete
;
~
OveruseEstimator
(
)
=
default
;
void
Update
(
int64_t
t_delta
double
ts_delta
int
size_delta
BandwidthUsage
current_hypothesis
int64_t
now_ms
)
;
double
var_noise
(
)
const
{
return
var_noise_
;
}
double
offset
(
)
const
{
return
offset_
;
}
int
num_of_deltas
(
)
const
{
return
num_of_deltas_
;
}
private
:
double
UpdateMinFramePeriod
(
double
ts_delta
)
;
void
UpdateNoiseEstimate
(
double
residual
double
ts_delta
bool
stable_state
)
;
int
num_of_deltas_
=
0
;
double
slope_
=
8
.
0
/
512
.
0
;
double
offset_
=
0
;
double
prev_offset_
=
0
;
double
E_
[
2
]
[
2
]
=
{
{
100
.
0
0
.
0
}
{
0
.
0
1e
-
1
}
}
;
double
process_noise_
[
2
]
=
{
1e
-
13
1e
-
3
}
;
double
avg_noise_
=
0
.
0
;
double
var_noise_
=
50
.
0
;
std
:
:
deque
<
double
>
ts_delta_hist_
;
}
;
}
#
endif
