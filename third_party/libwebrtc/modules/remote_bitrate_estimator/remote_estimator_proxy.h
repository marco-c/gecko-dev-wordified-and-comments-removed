#
ifndef
MODULES_REMOTE_BITRATE_ESTIMATOR_REMOTE_ESTIMATOR_PROXY_H_
#
define
MODULES_REMOTE_BITRATE_ESTIMATOR_REMOTE_ESTIMATOR_PROXY_H_
#
include
<
deque
>
#
include
<
functional
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
transport
/
network_control
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
include
/
remote_bitrate_estimator
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
packet_arrival_map
.
h
"
#
include
"
rtc_base
/
experiments
/
field_trial_parser
.
h
"
#
include
"
rtc_base
/
numerics
/
sequence_number_util
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
namespace
webrtc
{
class
Clock
;
namespace
rtcp
{
class
TransportFeedback
;
}
class
RemoteEstimatorProxy
:
public
RemoteBitrateEstimator
{
public
:
using
TransportFeedbackSender
=
std
:
:
function
<
void
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
packets
)
>
;
RemoteEstimatorProxy
(
Clock
*
clock
TransportFeedbackSender
feedback_sender
const
FieldTrialsView
*
key_value_config
NetworkStateEstimator
*
network_state_estimator
)
;
~
RemoteEstimatorProxy
(
)
override
;
void
IncomingPacket
(
int64_t
arrival_time_ms
size_t
payload_size
const
RTPHeader
&
header
)
override
;
void
RemoveStream
(
uint32_t
ssrc
)
override
{
}
bool
LatestEstimate
(
std
:
:
vector
<
unsigned
int
>
*
ssrcs
unsigned
int
*
bitrate_bps
)
const
override
;
void
OnRttUpdate
(
int64_t
avg_rtt_ms
int64_t
max_rtt_ms
)
override
{
}
void
SetMinBitrate
(
int
min_bitrate_bps
)
override
{
}
int64_t
TimeUntilNextProcess
(
)
override
;
void
Process
(
)
override
;
void
OnBitrateChanged
(
int
bitrate
)
;
void
SetSendPeriodicFeedback
(
bool
send_periodic_feedback
)
;
private
:
struct
TransportWideFeedbackConfig
{
FieldTrialParameter
<
TimeDelta
>
back_window
{
"
wind
"
TimeDelta
:
:
Millis
(
500
)
}
;
FieldTrialParameter
<
TimeDelta
>
min_interval
{
"
min
"
TimeDelta
:
:
Millis
(
50
)
}
;
FieldTrialParameter
<
TimeDelta
>
max_interval
{
"
max
"
TimeDelta
:
:
Millis
(
250
)
}
;
FieldTrialParameter
<
TimeDelta
>
default_interval
{
"
def
"
TimeDelta
:
:
Millis
(
100
)
}
;
FieldTrialParameter
<
double
>
bandwidth_fraction
{
"
frac
"
0
.
05
}
;
explicit
TransportWideFeedbackConfig
(
const
FieldTrialsView
*
key_value_config
)
{
ParseFieldTrial
(
{
&
back_window
&
min_interval
&
max_interval
&
default_interval
&
bandwidth_fraction
}
key_value_config
-
>
Lookup
(
"
WebRTC
-
Bwe
-
TransportWideFeedbackIntervals
"
)
)
;
}
}
;
void
MaybeCullOldPackets
(
int64_t
sequence_number
int64_t
arrival_time_ms
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
&
lock_
)
;
void
SendPeriodicFeedbacks
(
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
&
lock_
)
;
void
SendFeedbackOnRequest
(
int64_t
sequence_number
const
FeedbackRequest
&
feedback_request
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
&
lock_
)
;
std
:
:
unique_ptr
<
rtcp
:
:
TransportFeedback
>
MaybeBuildFeedbackPacket
(
bool
include_timestamps
int64_t
begin_sequence_number_inclusive
int64_t
end_sequence_number_exclusive
bool
is_periodic_update
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
&
lock_
)
;
Clock
*
const
clock_
;
const
TransportFeedbackSender
feedback_sender_
;
const
TransportWideFeedbackConfig
send_config_
;
int64_t
last_process_time_ms_
;
Mutex
lock_
;
NetworkStateEstimator
*
const
network_state_estimator_
RTC_PT_GUARDED_BY
(
&
lock_
)
;
uint32_t
media_ssrc_
RTC_GUARDED_BY
(
&
lock_
)
;
uint8_t
feedback_packet_count_
RTC_GUARDED_BY
(
&
lock_
)
;
SeqNumUnwrapper
<
uint16_t
>
unwrapper_
RTC_GUARDED_BY
(
&
lock_
)
;
absl
:
:
optional
<
int64_t
>
periodic_window_start_seq_
RTC_GUARDED_BY
(
&
lock_
)
;
PacketArrivalTimeMap
packet_arrival_times_
RTC_GUARDED_BY
(
&
lock_
)
;
int64_t
send_interval_ms_
RTC_GUARDED_BY
(
&
lock_
)
;
bool
send_periodic_feedback_
RTC_GUARDED_BY
(
&
lock_
)
;
uint32_t
previous_abs_send_time_
RTC_GUARDED_BY
(
&
lock_
)
;
Timestamp
abs_send_timestamp_
RTC_GUARDED_BY
(
&
lock_
)
;
}
;
}
#
endif
