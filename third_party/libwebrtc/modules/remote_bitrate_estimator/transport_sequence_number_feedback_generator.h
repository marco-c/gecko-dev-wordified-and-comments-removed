#
ifndef
MODULES_REMOTE_BITRATE_ESTIMATOR_TRANSPORT_SEQUENCE_NUMBER_FEEDBACK_GENERATOR_H_
#
define
MODULES_REMOTE_BITRATE_ESTIMATOR_TRANSPORT_SEQUENCE_NUMBER_FEEDBACK_GENERATOR_H_
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
"
api
/
rtp_headers
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
packet_arrival_map
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
rtp_transport_feedback_generator
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
transport_feedback
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
rtc_base
/
numerics
/
sequence_number_unwrapper
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
TransportSequenceNumberFeedbackGenenerator
:
public
RtpTransportFeedbackGenerator
{
public
:
TransportSequenceNumberFeedbackGenenerator
(
RtpTransportFeedbackGenerator
:
:
RtcpSender
feedback_sender
)
;
~
TransportSequenceNumberFeedbackGenenerator
(
)
;
void
OnReceivedPacket
(
const
RtpPacketReceived
&
packet
)
override
;
void
OnSendBandwidthEstimateChanged
(
DataRate
estimate
)
override
;
TimeDelta
Process
(
Timestamp
now
)
override
;
private
:
void
MaybeCullOldPackets
(
int64_t
sequence_number
Timestamp
arrival_time
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
&
lock_
)
;
void
SendPeriodicFeedbacks
(
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
&
lock_
)
;
void
SendFeedbackOnRequest
(
int64_t
sequence_number
const
FeedbackRequest
&
feedback_request
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
&
lock_
)
;
std
:
:
unique_ptr
<
rtcp
:
:
TransportFeedback
>
MaybeBuildFeedbackPacket
(
bool
include_timestamps
int64_t
begin_sequence_number_inclusive
int64_t
end_sequence_number_exclusive
bool
is_periodic_update
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
&
lock_
)
;
const
RtcpSender
feedback_sender_
;
Timestamp
last_process_time_
;
Mutex
lock_
;
uint32_t
media_ssrc_
RTC_GUARDED_BY
(
&
lock_
)
;
uint8_t
feedback_packet_count_
RTC_GUARDED_BY
(
&
lock_
)
;
SeqNumUnwrapper
<
uint16_t
>
unwrapper_
RTC_GUARDED_BY
(
&
lock_
)
;
std
:
:
optional
<
int64_t
>
periodic_window_start_seq_
RTC_GUARDED_BY
(
&
lock_
)
;
PacketArrivalTimeMap
packet_arrival_times_
RTC_GUARDED_BY
(
&
lock_
)
;
TimeDelta
send_interval_
RTC_GUARDED_BY
(
&
lock_
)
;
bool
send_periodic_feedback_
RTC_GUARDED_BY
(
&
lock_
)
;
}
;
}
#
endif
