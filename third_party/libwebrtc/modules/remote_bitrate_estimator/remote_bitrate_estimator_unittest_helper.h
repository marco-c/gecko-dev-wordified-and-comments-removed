#
ifndef
MODULES_REMOTE_BITRATE_ESTIMATOR_REMOTE_BITRATE_ESTIMATOR_UNITTEST_HELPER_H_
#
define
MODULES_REMOTE_BITRATE_ESTIMATOR_REMOTE_BITRATE_ESTIMATOR_UNITTEST_HELPER_H_
#
include
<
list
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
modules
/
remote_bitrate_estimator
/
include
/
remote_bitrate_estimator
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
testing
{
class
TestBitrateObserver
:
public
RemoteBitrateObserver
{
public
:
TestBitrateObserver
(
)
:
updated_
(
false
)
latest_bitrate_
(
0
)
{
}
virtual
~
TestBitrateObserver
(
)
{
}
void
OnReceiveBitrateChanged
(
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
uint32_t
bitrate
)
override
;
void
Reset
(
)
{
updated_
=
false
;
}
bool
updated
(
)
const
{
return
updated_
;
}
uint32_t
latest_bitrate
(
)
const
{
return
latest_bitrate_
;
}
private
:
bool
updated_
;
uint32_t
latest_bitrate_
;
}
;
class
RtpStream
{
public
:
struct
RtpPacket
{
int64_t
send_time
;
int64_t
arrival_time
;
uint32_t
rtp_timestamp
;
size_t
size
;
uint32_t
ssrc
;
}
;
struct
RtcpPacket
{
uint32_t
ntp_secs
;
uint32_t
ntp_frac
;
uint32_t
timestamp
;
uint32_t
ssrc
;
}
;
typedef
std
:
:
list
<
RtpPacket
*
>
PacketList
;
enum
{
kSendSideOffsetUs
=
1000000
}
;
RtpStream
(
int
fps
int
bitrate_bps
uint32_t
ssrc
uint32_t
frequency
uint32_t
timestamp_offset
int64_t
rtcp_receive_time
)
;
void
set_rtp_timestamp_offset
(
uint32_t
offset
)
;
int64_t
GenerateFrame
(
int64_t
time_now_us
PacketList
*
packets
)
;
int64_t
next_rtp_time
(
)
const
;
RtcpPacket
*
Rtcp
(
int64_t
time_now_us
)
;
void
set_bitrate_bps
(
int
bitrate_bps
)
;
int
bitrate_bps
(
)
const
;
uint32_t
ssrc
(
)
const
;
static
bool
Compare
(
const
std
:
:
pair
<
uint32_t
RtpStream
*
>
&
left
const
std
:
:
pair
<
uint32_t
RtpStream
*
>
&
right
)
;
private
:
enum
{
kRtcpIntervalUs
=
1000000
}
;
int
fps_
;
int
bitrate_bps_
;
uint32_t
ssrc_
;
uint32_t
frequency_
;
int64_t
next_rtp_time_
;
int64_t
next_rtcp_time_
;
uint32_t
rtp_timestamp_offset_
;
const
double
kNtpFracPerMs
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
RtpStream
)
;
}
;
class
StreamGenerator
{
public
:
typedef
std
:
:
list
<
RtpStream
:
:
RtcpPacket
*
>
RtcpList
;
StreamGenerator
(
int
capacity
int64_t
time_now
)
;
~
StreamGenerator
(
)
;
void
AddStream
(
RtpStream
*
stream
)
;
void
set_capacity_bps
(
int
capacity_bps
)
;
void
SetBitrateBps
(
int
bitrate_bps
)
;
void
set_rtp_timestamp_offset
(
uint32_t
ssrc
uint32_t
offset
)
;
int64_t
GenerateFrame
(
RtpStream
:
:
PacketList
*
packets
int64_t
time_now_us
)
;
private
:
typedef
std
:
:
map
<
uint32_t
RtpStream
*
>
StreamMap
;
int
capacity_
;
int64_t
prev_arrival_time_us_
;
StreamMap
streams_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
StreamGenerator
)
;
}
;
}
class
RemoteBitrateEstimatorTest
:
public
:
:
testing
:
:
Test
{
public
:
RemoteBitrateEstimatorTest
(
)
;
virtual
~
RemoteBitrateEstimatorTest
(
)
;
protected
:
virtual
void
SetUp
(
)
=
0
;
void
AddDefaultStream
(
)
;
static
uint32_t
AbsSendTime
(
int64_t
t
int64_t
denom
)
;
static
uint32_t
AddAbsSendTime
(
uint32_t
t1
uint32_t
t2
)
;
void
IncomingPacket
(
uint32_t
ssrc
size_t
payload_size
int64_t
arrival_time
uint32_t
rtp_timestamp
uint32_t
absolute_send_time
)
;
bool
GenerateAndProcessFrame
(
uint32_t
ssrc
uint32_t
bitrate_bps
)
;
uint32_t
SteadyStateRun
(
uint32_t
ssrc
int
number_of_frames
uint32_t
start_bitrate
uint32_t
min_bitrate
uint32_t
max_bitrate
uint32_t
target_bitrate
)
;
void
TestTimestampGroupingTestHelper
(
)
;
void
TestWrappingHelper
(
int
silence_time_s
)
;
void
InitialBehaviorTestHelper
(
uint32_t
expected_converge_bitrate
)
;
void
RateIncreaseReorderingTestHelper
(
uint32_t
expected_bitrate
)
;
void
RateIncreaseRtpTimestampsTestHelper
(
int
expected_iterations
)
;
void
CapacityDropTestHelper
(
int
number_of_streams
bool
wrap_time_stamp
uint32_t
expected_bitrate_drop_delta
int64_t
receiver_clock_offset_change_ms
)
;
static
const
uint32_t
kDefaultSsrc
;
SimulatedClock
clock_
;
std
:
:
unique_ptr
<
testing
:
:
TestBitrateObserver
>
bitrate_observer_
;
std
:
:
unique_ptr
<
RemoteBitrateEstimator
>
bitrate_estimator_
;
std
:
:
unique_ptr
<
testing
:
:
StreamGenerator
>
stream_generator_
;
int64_t
arrival_time_offset_ms_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
RemoteBitrateEstimatorTest
)
;
}
;
}
#
endif
