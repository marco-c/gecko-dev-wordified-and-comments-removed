#
ifndef
MODULES_REMOTE_BITRATE_ESTIMATOR_CONGESTION_CONTROL_FEEDBACK_TRACKER_H_
#
define
MODULES_REMOTE_BITRATE_ESTIMATOR_CONGESTION_CONTROL_FEEDBACK_TRACKER_H_
#
include
<
cstdint
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
congestion_control_feedback
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
rtc_base
/
network
/
ecn_marking
.
h
"
#
include
"
rtc_base
/
numerics
/
sequence_number_unwrapper
.
h
"
namespace
webrtc
{
class
CongestionControlFeedbackTracker
{
public
:
CongestionControlFeedbackTracker
(
)
=
default
;
void
ReceivedPacket
(
const
RtpPacketReceived
&
packet
)
;
void
AddPacketsToFeedback
(
Timestamp
feedback_time
std
:
:
vector
<
rtcp
:
:
CongestionControlFeedback
:
:
PacketInfo
>
&
packet_feedback
)
;
private
:
struct
PacketInfo
{
uint32_t
ssrc
;
int64_t
unwrapped_sequence_number
=
0
;
Timestamp
arrival_time
;
rtc
:
:
EcnMarking
ecn
=
rtc
:
:
EcnMarking
:
:
kNotEct
;
}
;
std
:
:
optional
<
int64_t
>
last_sequence_number_in_feedback_
;
SeqNumUnwrapper
<
uint16_t
>
unwrapper_
;
std
:
:
vector
<
PacketInfo
>
packets_
;
}
;
}
#
endif
