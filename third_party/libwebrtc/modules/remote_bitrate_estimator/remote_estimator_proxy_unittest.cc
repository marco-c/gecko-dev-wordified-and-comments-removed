#
include
"
modules
/
remote_bitrate_estimator
/
remote_estimator_proxy
.
h
"
#
include
<
memory
>
#
include
<
utility
>
#
include
"
api
/
transport
/
field_trial_based_config
.
h
"
#
include
"
api
/
transport
/
network_types
.
h
"
#
include
"
api
/
transport
/
test
/
mock_network_control
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
transport_feedback
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_header_extensions
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
using
:
:
testing
:
:
_
;
using
:
:
testing
:
:
ElementsAre
;
using
:
:
testing
:
:
Invoke
;
using
:
:
testing
:
:
MockFunction
;
using
:
:
testing
:
:
Return
;
using
:
:
testing
:
:
SizeIs
;
namespace
webrtc
{
namespace
{
constexpr
size_t
kDefaultPacketSize
=
100
;
constexpr
uint32_t
kMediaSsrc
=
456
;
constexpr
uint16_t
kBaseSeq
=
10
;
constexpr
int64_t
kBaseTimeMs
=
123
;
constexpr
int64_t
kMaxSmallDeltaMs
=
(
rtcp
:
:
TransportFeedback
:
:
kDeltaScaleFactor
*
0xFF
)
/
1000
;
constexpr
int
kBackWindowMs
=
500
;
constexpr
int
kMinSendIntervalMs
=
50
;
constexpr
int
kMaxSendIntervalMs
=
250
;
constexpr
int
kDefaultSendIntervalMs
=
100
;
std
:
:
vector
<
uint16_t
>
SequenceNumbers
(
const
rtcp
:
:
TransportFeedback
&
feedback_packet
)
{
std
:
:
vector
<
uint16_t
>
sequence_numbers
;
for
(
const
auto
&
rtp_packet_received
:
feedback_packet
.
GetReceivedPackets
(
)
)
{
sequence_numbers
.
push_back
(
rtp_packet_received
.
sequence_number
(
)
)
;
}
return
sequence_numbers
;
}
std
:
:
vector
<
int64_t
>
TimestampsMs
(
const
rtcp
:
:
TransportFeedback
&
feedback_packet
)
{
std
:
:
vector
<
int64_t
>
timestamps
;
int64_t
timestamp_us
=
feedback_packet
.
GetBaseTimeUs
(
)
;
for
(
const
auto
&
rtp_packet_received
:
feedback_packet
.
GetReceivedPackets
(
)
)
{
timestamp_us
+
=
rtp_packet_received
.
delta_us
(
)
;
timestamps
.
push_back
(
timestamp_us
/
1000
)
;
}
return
timestamps
;
}
class
RemoteEstimatorProxyTest
:
public
:
:
testing
:
:
Test
{
public
:
RemoteEstimatorProxyTest
(
)
:
clock_
(
0
)
proxy_
(
&
clock_
feedback_sender_
.
AsStdFunction
(
)
&
field_trial_config_
&
network_state_estimator_
)
{
}
protected
:
void
IncomingPacket
(
uint16_t
seq
int64_t
time_ms
absl
:
:
optional
<
FeedbackRequest
>
feedback_request
=
absl
:
:
nullopt
)
{
proxy_
.
IncomingPacket
(
time_ms
kDefaultPacketSize
CreateHeader
(
seq
feedback_request
absl
:
:
nullopt
)
)
;
}
RTPHeader
CreateHeader
(
absl
:
:
optional
<
uint16_t
>
transport_sequence
absl
:
:
optional
<
FeedbackRequest
>
feedback_request
absl
:
:
optional
<
uint32_t
>
absolute_send_time
)
{
RTPHeader
header
;
if
(
transport_sequence
)
{
header
.
extension
.
hasTransportSequenceNumber
=
true
;
header
.
extension
.
transportSequenceNumber
=
transport_sequence
.
value
(
)
;
}
header
.
extension
.
feedback_request
=
feedback_request
;
if
(
absolute_send_time
)
{
header
.
extension
.
hasAbsoluteSendTime
=
true
;
header
.
extension
.
absoluteSendTime
=
absolute_send_time
.
value
(
)
;
}
header
.
ssrc
=
kMediaSsrc
;
return
header
;
}
void
Process
(
)
{
clock_
.
AdvanceTimeMilliseconds
(
kDefaultSendIntervalMs
)
;
proxy_
.
Process
(
)
;
}
FieldTrialBasedConfig
field_trial_config_
;
SimulatedClock
clock_
;
MockFunction
<
void
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
)
>
feedback_sender_
;
:
:
testing
:
:
NiceMock
<
MockNetworkStateEstimator
>
network_state_estimator_
;
RemoteEstimatorProxy
proxy_
;
}
;
TEST_F
(
RemoteEstimatorProxyTest
SendsSinglePacketFeedback
)
{
IncomingPacket
(
kBaseSeq
kBaseTimeMs
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
)
)
;
}
)
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
DuplicatedPackets
)
{
IncomingPacket
(
kBaseSeq
kBaseTimeMs
)
;
IncomingPacket
(
kBaseSeq
kBaseTimeMs
+
1000
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
)
)
;
return
true
;
}
)
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
FeedbackWithMissingStart
)
{
IncomingPacket
(
kBaseSeq
kBaseTimeMs
)
;
IncomingPacket
(
kBaseSeq
+
1
kBaseTimeMs
+
1000
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
;
Process
(
)
;
IncomingPacket
(
kBaseSeq
+
3
kBaseTimeMs
+
3000
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
+
2
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
+
3
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
+
3000
)
)
;
}
)
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
SendsFeedbackWithVaryingDeltas
)
{
IncomingPacket
(
kBaseSeq
kBaseTimeMs
)
;
IncomingPacket
(
kBaseSeq
+
1
kBaseTimeMs
+
kMaxSmallDeltaMs
)
;
IncomingPacket
(
kBaseSeq
+
2
kBaseTimeMs
+
(
2
*
kMaxSmallDeltaMs
)
+
1
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
kBaseSeq
+
1
kBaseSeq
+
2
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
kBaseTimeMs
+
kMaxSmallDeltaMs
kBaseTimeMs
+
(
2
*
kMaxSmallDeltaMs
)
+
1
)
)
;
}
)
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
SendsFragmentedFeedback
)
{
static
constexpr
int64_t
kTooLargeDelta
=
rtcp
:
:
TransportFeedback
:
:
kDeltaScaleFactor
*
(
1
<
<
16
)
;
IncomingPacket
(
kBaseSeq
kBaseTimeMs
)
;
IncomingPacket
(
kBaseSeq
+
1
kBaseTimeMs
+
kTooLargeDelta
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
)
)
;
}
)
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
+
1
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
+
1
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
+
kTooLargeDelta
)
)
;
}
)
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
HandlesReorderingAndWrap
)
{
const
int64_t
kDeltaMs
=
1000
;
const
uint16_t
kLargeSeq
=
62762
;
IncomingPacket
(
kBaseSeq
kBaseTimeMs
)
;
IncomingPacket
(
kLargeSeq
kBaseTimeMs
+
kDeltaMs
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
&
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kLargeSeq
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
+
kDeltaMs
kBaseTimeMs
)
)
;
}
)
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
HandlesMalformedSequenceNumbers
)
{
const
int64_t
kDeltaMs
=
1000
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
IncomingPacket
(
kBaseSeq
+
i
kBaseTimeMs
+
3
*
i
*
kDeltaMs
)
;
IncomingPacket
(
kBaseSeq
+
20000
+
i
kBaseTimeMs
+
(
3
*
i
+
1
)
*
kDeltaMs
)
;
IncomingPacket
(
kBaseSeq
+
40000
+
i
kBaseTimeMs
+
(
3
*
i
+
2
)
*
kDeltaMs
)
;
}
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
&
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
+
20000
+
9
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
+
20009
kBaseSeq
+
40009
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
+
28
*
kDeltaMs
kBaseTimeMs
+
29
*
kDeltaMs
)
)
;
}
)
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
HandlesBackwardsWrappingSequenceNumbers
)
{
const
int64_t
kDeltaMs
=
1000
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
IncomingPacket
(
kBaseSeq
+
i
kBaseTimeMs
+
3
*
i
*
kDeltaMs
)
;
IncomingPacket
(
kBaseSeq
+
40000
+
i
kBaseTimeMs
+
(
3
*
i
+
1
)
*
kDeltaMs
)
;
IncomingPacket
(
kBaseSeq
+
20000
+
i
kBaseTimeMs
+
(
3
*
i
+
2
)
*
kDeltaMs
)
;
}
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
&
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
+
40000
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
+
40000
kBaseSeq
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
+
kDeltaMs
kBaseTimeMs
)
)
;
}
)
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
ResendsTimestampsOnReordering
)
{
IncomingPacket
(
kBaseSeq
kBaseTimeMs
)
;
IncomingPacket
(
kBaseSeq
+
2
kBaseTimeMs
+
2
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
kBaseSeq
+
2
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
kBaseTimeMs
+
2
)
)
;
}
)
)
;
Process
(
)
;
IncomingPacket
(
kBaseSeq
+
1
kBaseTimeMs
+
1
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
+
1
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
+
1
kBaseSeq
+
2
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
+
1
kBaseTimeMs
+
2
)
)
;
}
)
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
RemovesTimestampsOutOfScope
)
{
const
int64_t
kTimeoutTimeMs
=
kBaseTimeMs
+
kBackWindowMs
;
IncomingPacket
(
kBaseSeq
+
2
kBaseTimeMs
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
+
2
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
)
)
;
}
)
)
;
Process
(
)
;
IncomingPacket
(
kBaseSeq
+
3
kTimeoutTimeMs
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
&
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
+
3
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kTimeoutTimeMs
)
)
;
}
)
)
;
Process
(
)
;
IncomingPacket
(
kBaseSeq
kBaseTimeMs
-
1
)
;
IncomingPacket
(
kBaseSeq
+
1
kTimeoutTimeMs
-
1
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
&
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
kBaseSeq
+
1
kBaseSeq
+
3
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
-
1
kTimeoutTimeMs
-
1
kTimeoutTimeMs
)
)
;
}
)
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
TimeUntilNextProcessIsZeroBeforeFirstProcess
)
{
EXPECT_EQ
(
0
proxy_
.
TimeUntilNextProcess
(
)
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
TimeUntilNextProcessIsDefaultOnUnkownBitrate
)
{
Process
(
)
;
EXPECT_EQ
(
kDefaultSendIntervalMs
proxy_
.
TimeUntilNextProcess
(
)
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
TimeUntilNextProcessIsMinIntervalOn300kbps
)
{
Process
(
)
;
proxy_
.
OnBitrateChanged
(
300000
)
;
EXPECT_EQ
(
kMinSendIntervalMs
proxy_
.
TimeUntilNextProcess
(
)
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
TimeUntilNextProcessIsMaxIntervalOn0kbps
)
{
Process
(
)
;
proxy_
.
OnBitrateChanged
(
0
)
;
EXPECT_EQ
(
kMaxSendIntervalMs
proxy_
.
TimeUntilNextProcess
(
)
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
TimeUntilNextProcessIsMaxIntervalOn20kbps
)
{
Process
(
)
;
proxy_
.
OnBitrateChanged
(
20000
)
;
EXPECT_EQ
(
kMaxSendIntervalMs
proxy_
.
TimeUntilNextProcess
(
)
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
TwccReportsUse5PercentOfAvailableBandwidth
)
{
Process
(
)
;
proxy_
.
OnBitrateChanged
(
80000
)
;
EXPECT_EQ
(
136
proxy_
.
TimeUntilNextProcess
(
)
)
;
}
typedef
RemoteEstimatorProxyTest
RemoteEstimatorProxyOnRequestTest
;
TEST_F
(
RemoteEstimatorProxyOnRequestTest
TimeUntilNextProcessIsHigh
)
{
proxy_
.
SetSendPeriodicFeedback
(
false
)
;
EXPECT_GE
(
proxy_
.
TimeUntilNextProcess
(
)
60
*
60
*
1000
)
;
}
TEST_F
(
RemoteEstimatorProxyOnRequestTest
ProcessDoesNotSendFeedback
)
{
proxy_
.
SetSendPeriodicFeedback
(
false
)
;
IncomingPacket
(
kBaseSeq
kBaseTimeMs
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
Times
(
0
)
;
Process
(
)
;
}
TEST_F
(
RemoteEstimatorProxyOnRequestTest
RequestSinglePacketFeedback
)
{
proxy_
.
SetSendPeriodicFeedback
(
false
)
;
IncomingPacket
(
kBaseSeq
kBaseTimeMs
)
;
IncomingPacket
(
kBaseSeq
+
1
kBaseTimeMs
+
kMaxSmallDeltaMs
)
;
IncomingPacket
(
kBaseSeq
+
2
kBaseTimeMs
+
2
*
kMaxSmallDeltaMs
)
;
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
+
3
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
+
3
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
+
3
*
kMaxSmallDeltaMs
)
)
;
}
)
)
;
constexpr
FeedbackRequest
kSinglePacketFeedbackRequest
=
{
true
1
}
;
IncomingPacket
(
kBaseSeq
+
3
kBaseTimeMs
+
3
*
kMaxSmallDeltaMs
kSinglePacketFeedbackRequest
)
;
}
TEST_F
(
RemoteEstimatorProxyOnRequestTest
RequestLastFivePacketFeedback
)
{
proxy_
.
SetSendPeriodicFeedback
(
false
)
;
int
i
=
0
;
for
(
;
i
<
10
;
+
+
i
)
{
IncomingPacket
(
kBaseSeq
+
i
kBaseTimeMs
+
i
*
kMaxSmallDeltaMs
)
;
}
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
+
6
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
+
6
kBaseSeq
+
7
kBaseSeq
+
8
kBaseSeq
+
9
kBaseSeq
+
10
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
+
6
*
kMaxSmallDeltaMs
kBaseTimeMs
+
7
*
kMaxSmallDeltaMs
kBaseTimeMs
+
8
*
kMaxSmallDeltaMs
kBaseTimeMs
+
9
*
kMaxSmallDeltaMs
kBaseTimeMs
+
10
*
kMaxSmallDeltaMs
)
)
;
}
)
)
;
constexpr
FeedbackRequest
kFivePacketsFeedbackRequest
=
{
true
5
}
;
IncomingPacket
(
kBaseSeq
+
i
kBaseTimeMs
+
i
*
kMaxSmallDeltaMs
kFivePacketsFeedbackRequest
)
;
}
TEST_F
(
RemoteEstimatorProxyOnRequestTest
RequestLastFivePacketFeedbackMissingPackets
)
{
proxy_
.
SetSendPeriodicFeedback
(
false
)
;
int
i
=
0
;
for
(
;
i
<
10
;
+
+
i
)
{
if
(
i
!
=
7
&
&
i
!
=
9
)
IncomingPacket
(
kBaseSeq
+
i
kBaseTimeMs
+
i
*
kMaxSmallDeltaMs
)
;
}
EXPECT_CALL
(
feedback_sender_
Call
)
.
WillOnce
(
Invoke
(
[
]
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
feedback_packets
)
{
rtcp
:
:
TransportFeedback
*
feedback_packet
=
static_cast
<
rtcp
:
:
TransportFeedback
*
>
(
feedback_packets
[
0
]
.
get
(
)
)
;
EXPECT_EQ
(
kBaseSeq
+
6
feedback_packet
-
>
GetBaseSequence
(
)
)
;
EXPECT_EQ
(
kMediaSsrc
feedback_packet
-
>
media_ssrc
(
)
)
;
EXPECT_THAT
(
SequenceNumbers
(
*
feedback_packet
)
ElementsAre
(
kBaseSeq
+
6
kBaseSeq
+
8
kBaseSeq
+
10
)
)
;
EXPECT_THAT
(
TimestampsMs
(
*
feedback_packet
)
ElementsAre
(
kBaseTimeMs
+
6
*
kMaxSmallDeltaMs
kBaseTimeMs
+
8
*
kMaxSmallDeltaMs
kBaseTimeMs
+
10
*
kMaxSmallDeltaMs
)
)
;
}
)
)
;
constexpr
FeedbackRequest
kFivePacketsFeedbackRequest
=
{
true
5
}
;
IncomingPacket
(
kBaseSeq
+
i
kBaseTimeMs
+
i
*
kMaxSmallDeltaMs
kFivePacketsFeedbackRequest
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
ReportsIncomingPacketToNetworkStateEstimator
)
{
Timestamp
first_send_timestamp
=
Timestamp
:
:
Millis
(
0
)
;
EXPECT_CALL
(
network_state_estimator_
OnReceivedPacket
(
_
)
)
.
WillOnce
(
Invoke
(
[
&
first_send_timestamp
]
(
const
PacketResult
&
packet
)
{
EXPECT_EQ
(
packet
.
receive_time
Timestamp
:
:
Millis
(
kBaseTimeMs
)
)
;
first_send_timestamp
=
packet
.
sent_packet
.
send_time
;
}
)
)
;
proxy_
.
IncomingPacket
(
kBaseTimeMs
kDefaultPacketSize
CreateHeader
(
absl
:
:
nullopt
absl
:
:
nullopt
AbsoluteSendTime
:
:
MsTo24Bits
(
kBaseTimeMs
)
)
)
;
EXPECT_CALL
(
network_state_estimator_
OnReceivedPacket
(
_
)
)
.
WillOnce
(
Invoke
(
[
&
first_send_timestamp
]
(
const
PacketResult
&
packet
)
{
EXPECT_EQ
(
packet
.
receive_time
Timestamp
:
:
Millis
(
kBaseTimeMs
)
)
;
EXPECT_EQ
(
packet
.
sent_packet
.
send_time
first_send_timestamp
)
;
}
)
)
;
proxy_
.
IncomingPacket
(
kBaseTimeMs
kDefaultPacketSize
CreateHeader
(
absl
:
:
nullopt
absl
:
:
nullopt
AbsoluteSendTime
:
:
MsTo24Bits
(
kBaseTimeMs
-
12
)
)
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
IncomingPacketHandlesWrapInAbsSendTime
)
{
const
uint32_t
kFirstAbsSendTime
=
AbsoluteSendTime
:
:
MsTo24Bits
(
(
1
<
<
24
)
-
30
)
;
const
uint32_t
kSecondAbsSendTime
=
AbsoluteSendTime
:
:
MsTo24Bits
(
(
1
<
<
24
)
)
;
const
TimeDelta
kExpectedAbsSendTimeDelta
=
TimeDelta
:
:
Millis
(
30
)
;
Timestamp
first_send_timestamp
=
Timestamp
:
:
Millis
(
0
)
;
EXPECT_CALL
(
network_state_estimator_
OnReceivedPacket
(
_
)
)
.
WillOnce
(
Invoke
(
[
&
first_send_timestamp
]
(
const
PacketResult
&
packet
)
{
EXPECT_EQ
(
packet
.
receive_time
Timestamp
:
:
Millis
(
kBaseTimeMs
)
)
;
first_send_timestamp
=
packet
.
sent_packet
.
send_time
;
}
)
)
;
proxy_
.
IncomingPacket
(
kBaseTimeMs
kDefaultPacketSize
CreateHeader
(
kBaseSeq
absl
:
:
nullopt
kFirstAbsSendTime
)
)
;
EXPECT_CALL
(
network_state_estimator_
OnReceivedPacket
(
_
)
)
.
WillOnce
(
Invoke
(
[
first_send_timestamp
kExpectedAbsSendTimeDelta
]
(
const
PacketResult
&
packet
)
{
EXPECT_EQ
(
packet
.
receive_time
Timestamp
:
:
Millis
(
kBaseTimeMs
+
123
)
)
;
EXPECT_EQ
(
packet
.
sent_packet
.
send_time
.
ms
(
)
(
first_send_timestamp
+
kExpectedAbsSendTimeDelta
)
.
ms
(
)
)
;
}
)
)
;
proxy_
.
IncomingPacket
(
kBaseTimeMs
+
123
kDefaultPacketSize
CreateHeader
(
kBaseSeq
+
1
absl
:
:
nullopt
kSecondAbsSendTime
)
)
;
}
TEST_F
(
RemoteEstimatorProxyTest
SendTransportFeedbackAndNetworkStateUpdate
)
{
proxy_
.
IncomingPacket
(
kBaseTimeMs
kDefaultPacketSize
CreateHeader
(
kBaseSeq
absl
:
:
nullopt
AbsoluteSendTime
:
:
MsTo24Bits
(
kBaseTimeMs
-
1
)
)
)
;
EXPECT_CALL
(
network_state_estimator_
GetCurrentEstimate
(
)
)
.
WillOnce
(
Return
(
NetworkStateEstimate
(
)
)
)
;
EXPECT_CALL
(
feedback_sender_
Call
(
SizeIs
(
2
)
)
)
;
Process
(
)
;
}
}
}
