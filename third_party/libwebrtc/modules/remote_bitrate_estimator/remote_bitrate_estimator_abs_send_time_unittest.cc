#
include
"
modules
/
remote_bitrate_estimator
/
remote_bitrate_estimator_abs_send_time
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
"
api
/
environment
/
environment_factory
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
remote_bitrate_estimator_unittest_helper
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
class
RemoteBitrateEstimatorAbsSendTimeTest
:
public
RemoteBitrateEstimatorTest
{
public
:
RemoteBitrateEstimatorAbsSendTimeTest
(
)
{
}
RemoteBitrateEstimatorAbsSendTimeTest
(
const
RemoteBitrateEstimatorAbsSendTimeTest
&
)
=
delete
;
RemoteBitrateEstimatorAbsSendTimeTest
&
operator
=
(
const
RemoteBitrateEstimatorAbsSendTimeTest
&
)
=
delete
;
void
SetUp
(
)
override
{
bitrate_estimator_
=
std
:
:
make_unique
<
RemoteBitrateEstimatorAbsSendTime
>
(
CreateEnvironment
(
&
clock_
)
bitrate_observer_
.
get
(
)
)
;
}
}
;
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
InitialBehavior
)
{
InitialBehaviorTestHelper
(
674840
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
RateIncreaseReordering
)
{
RateIncreaseReorderingTestHelper
(
674840
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
RateIncreaseRtpTimestamps
)
{
RateIncreaseRtpTimestampsTestHelper
(
1237
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
CapacityDropOneStream
)
{
CapacityDropTestHelper
(
1
false
633
0
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
CapacityDropPosOffsetChange
)
{
CapacityDropTestHelper
(
1
false
267
30000
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
CapacityDropNegOffsetChange
)
{
CapacityDropTestHelper
(
1
false
267
-
30000
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
CapacityDropOneStreamWrap
)
{
CapacityDropTestHelper
(
1
true
633
0
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
CapacityDropTwoStreamsWrap
)
{
CapacityDropTestHelper
(
2
true
700
0
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
CapacityDropThreeStreamsWrap
)
{
CapacityDropTestHelper
(
3
true
633
0
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
CapacityDropThirteenStreamsWrap
)
{
CapacityDropTestHelper
(
13
true
667
0
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
CapacityDropNineteenStreamsWrap
)
{
CapacityDropTestHelper
(
19
true
667
0
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
CapacityDropThirtyStreamsWrap
)
{
CapacityDropTestHelper
(
30
true
667
0
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestTimestampGrouping
)
{
TestTimestampGroupingTestHelper
(
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestShortTimeoutAndWrap
)
{
TestWrappingHelper
(
35
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestLongTimeoutAndWrap
)
{
TestWrappingHelper
(
10
*
64
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestProcessAfterTimeout
)
{
const
int64_t
kStreamTimeOutMs
=
2000
;
const
int64_t
kProcessIntervalMs
=
1000
;
IncomingPacket
(
0
1000
clock_
.
TimeInMilliseconds
(
)
0
0
)
;
clock_
.
AdvanceTimeMilliseconds
(
kStreamTimeOutMs
+
1
)
;
bitrate_estimator_
-
>
Process
(
)
;
clock_
.
AdvanceTimeMilliseconds
(
kProcessIntervalMs
)
;
bitrate_estimator_
-
>
Process
(
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestProbeDetection
)
{
const
int
kProbeLength
=
5
;
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
10
)
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingPacket
(
0
1000
now_ms
90
*
now_ms
AbsSendTime
(
now_ms
1000
)
)
;
}
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
5
)
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingPacket
(
0
1000
now_ms
90
*
now_ms
AbsSendTime
(
now_ms
1000
)
)
;
}
bitrate_estimator_
-
>
Process
(
)
;
EXPECT_TRUE
(
bitrate_observer_
-
>
updated
(
)
)
;
EXPECT_GT
(
bitrate_observer_
-
>
latest_bitrate
(
)
1500000u
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestProbeDetectionNonPacedPackets
)
{
const
int
kProbeLength
=
5
;
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
5
)
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingPacket
(
0
1000
now_ms
90
*
now_ms
AbsSendTime
(
now_ms
1000
)
)
;
clock_
.
AdvanceTimeMilliseconds
(
5
)
;
IncomingPacket
(
0
100
now_ms
90
*
now_ms
AbsSendTime
(
now_ms
1000
)
)
;
}
bitrate_estimator_
-
>
Process
(
)
;
EXPECT_TRUE
(
bitrate_observer_
-
>
updated
(
)
)
;
EXPECT_GT
(
bitrate_observer_
-
>
latest_bitrate
(
)
800000u
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestProbeDetectionTooHighBitrate
)
{
const
int
kProbeLength
=
5
;
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
int64_t
send_time_ms
=
0
;
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
10
)
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
send_time_ms
+
=
10
;
IncomingPacket
(
0
1000
now_ms
90
*
send_time_ms
AbsSendTime
(
send_time_ms
1000
)
)
;
}
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
8
)
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
send_time_ms
+
=
5
;
IncomingPacket
(
0
1000
now_ms
send_time_ms
AbsSendTime
(
send_time_ms
1000
)
)
;
}
bitrate_estimator_
-
>
Process
(
)
;
EXPECT_TRUE
(
bitrate_observer_
-
>
updated
(
)
)
;
EXPECT_NEAR
(
bitrate_observer_
-
>
latest_bitrate
(
)
800000u
10000
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestProbeDetectionSlightlyFasterArrival
)
{
const
int
kProbeLength
=
5
;
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
int64_t
send_time_ms
=
0
;
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
5
)
;
send_time_ms
+
=
10
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingPacket
(
0
1000
now_ms
90
*
send_time_ms
AbsSendTime
(
send_time_ms
1000
)
)
;
}
bitrate_estimator_
-
>
Process
(
)
;
EXPECT_TRUE
(
bitrate_observer_
-
>
updated
(
)
)
;
EXPECT_GT
(
bitrate_observer_
-
>
latest_bitrate
(
)
800000u
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestProbeDetectionFasterArrival
)
{
const
int
kProbeLength
=
5
;
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
int64_t
send_time_ms
=
0
;
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
send_time_ms
+
=
10
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingPacket
(
0
1000
now_ms
90
*
send_time_ms
AbsSendTime
(
send_time_ms
1000
)
)
;
}
bitrate_estimator_
-
>
Process
(
)
;
EXPECT_FALSE
(
bitrate_observer_
-
>
updated
(
)
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestProbeDetectionSlowerArrival
)
{
const
int
kProbeLength
=
5
;
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
int64_t
send_time_ms
=
0
;
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
7
)
;
send_time_ms
+
=
5
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingPacket
(
0
1000
now_ms
90
*
send_time_ms
AbsSendTime
(
send_time_ms
1000
)
)
;
}
bitrate_estimator_
-
>
Process
(
)
;
EXPECT_TRUE
(
bitrate_observer_
-
>
updated
(
)
)
;
EXPECT_NEAR
(
bitrate_observer_
-
>
latest_bitrate
(
)
1140000
10000
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
TestProbeDetectionSlowerArrivalHighBitrate
)
{
const
int
kProbeLength
=
5
;
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
int64_t
send_time_ms
=
0
;
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
2
)
;
send_time_ms
+
=
1
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingPacket
(
0
1000
now_ms
90
*
send_time_ms
AbsSendTime
(
send_time_ms
1000
)
)
;
}
bitrate_estimator_
-
>
Process
(
)
;
EXPECT_TRUE
(
bitrate_observer_
-
>
updated
(
)
)
;
EXPECT_NEAR
(
bitrate_observer_
-
>
latest_bitrate
(
)
4000000u
10000
)
;
}
TEST_F
(
RemoteBitrateEstimatorAbsSendTimeTest
ProbingIgnoresSmallPackets
)
{
const
int
kProbeLength
=
5
;
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
10
)
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingPacket
(
0
200
now_ms
90
*
now_ms
AbsSendTime
(
now_ms
1000
)
)
;
}
bitrate_estimator_
-
>
Process
(
)
;
EXPECT_FALSE
(
bitrate_observer_
-
>
updated
(
)
)
;
for
(
int
i
=
0
;
i
<
kProbeLength
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
10
)
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingPacket
(
0
1000
now_ms
90
*
now_ms
AbsSendTime
(
now_ms
1000
)
)
;
}
clock_
.
AdvanceTimeMilliseconds
(
1000
)
;
bitrate_estimator_
-
>
Process
(
)
;
EXPECT_TRUE
(
bitrate_observer_
-
>
updated
(
)
)
;
EXPECT_NEAR
(
bitrate_observer_
-
>
latest_bitrate
(
)
800000u
10000
)
;
}
}
