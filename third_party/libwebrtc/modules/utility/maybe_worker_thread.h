#
ifndef
MODULES_UTILITY_MAYBE_WORKER_THREAD_H_
#
define
MODULES_UTILITY_MAYBE_WORKER_THREAD_H_
#
include
<
memory
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
task_queue
/
pending_task_safety_flag
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
task_queue
/
task_queue_factory
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
RTC_LOCKABLE
MaybeWorkerThread
{
public
:
MaybeWorkerThread
(
const
FieldTrialsView
&
field_trials
absl
:
:
string_view
task_queue_name
TaskQueueFactory
*
factory
)
;
~
MaybeWorkerThread
(
)
;
void
RunOrPost
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
)
;
void
RunSynchronous
(
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
)
;
TaskQueueBase
*
TaskQueueForDelayedTasks
(
)
const
;
TaskQueueBase
*
TaskQueueForPost
(
)
const
;
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
MaybeSafeTask
(
rtc
:
:
scoped_refptr
<
PendingTaskSafetyFlag
>
flag
absl
:
:
AnyInvocable
<
void
(
)
&
&
>
task
)
;
bool
IsCurrent
(
)
const
;
private
:
SequenceChecker
sequence_checker_
;
std
:
:
unique_ptr
<
TaskQueueBase
TaskQueueDeleter
>
owned_task_queue_
;
TaskQueueBase
*
const
worker_thread_
;
}
;
}
#
endif
