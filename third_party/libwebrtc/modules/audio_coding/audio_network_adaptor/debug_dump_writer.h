#
ifndef
MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_DEBUG_DUMP_WRITER_H_
#
define
MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_DEBUG_DUMP_WRITER_H_
#
include
<
memory
>
#
include
"
modules
/
audio_coding
/
audio_network_adaptor
/
controller
.
h
"
#
include
"
modules
/
audio_coding
/
audio_network_adaptor
/
include
/
audio_network_adaptor
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
ignore_wundef
.
h
"
#
include
"
rtc_base
/
system
/
file_wrapper
.
h
"
#
if
WEBRTC_ENABLE_PROTOBUF
RTC_PUSH_IGNORING_WUNDEF
(
)
#
ifdef
WEBRTC_ANDROID_PLATFORM_BUILD
#
include
"
external
/
webrtc
/
webrtc
/
modules
/
audio_coding
/
audio_network_adaptor
/
config
.
pb
.
h
"
#
else
#
include
"
modules
/
audio_coding
/
audio_network_adaptor
/
config
.
pb
.
h
"
#
endif
RTC_POP_IGNORING_WUNDEF
(
)
#
endif
namespace
webrtc
{
class
DebugDumpWriter
{
public
:
static
std
:
:
unique_ptr
<
DebugDumpWriter
>
Create
(
FILE
*
file_handle
)
;
virtual
~
DebugDumpWriter
(
)
=
default
;
virtual
void
DumpEncoderRuntimeConfig
(
const
AudioEncoderRuntimeConfig
&
config
int64_t
timestamp
)
=
0
;
virtual
void
DumpNetworkMetrics
(
const
Controller
:
:
NetworkMetrics
&
metrics
int64_t
timestamp
)
=
0
;
#
if
WEBRTC_ENABLE_PROTOBUF
virtual
void
DumpControllerManagerConfig
(
const
audio_network_adaptor
:
:
config
:
:
ControllerManager
&
controller_manager_config
int64_t
timestamp
)
=
0
;
#
endif
}
;
}
#
endif
