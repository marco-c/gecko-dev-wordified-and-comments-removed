#
ifndef
MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_FRAME_LENGTH_CONTROLLER_H_
#
define
MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_FRAME_LENGTH_CONTROLLER_H_
#
include
<
stddef
.
h
>
#
include
<
map
>
#
include
<
set
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
modules
/
audio_coding
/
audio_network_adaptor
/
controller
.
h
"
#
include
"
modules
/
audio_coding
/
audio_network_adaptor
/
include
/
audio_network_adaptor_config
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
namespace
webrtc
{
class
FrameLengthController
final
:
public
Controller
{
public
:
struct
Config
{
struct
FrameLengthChange
{
FrameLengthChange
(
int
from_frame_length_ms
int
to_frame_length_ms
)
;
bool
operator
<
(
const
FrameLengthChange
&
rhs
)
const
;
int
from_frame_length_ms
;
int
to_frame_length_ms
;
}
;
Config
(
const
std
:
:
set
<
int
>
&
encoder_frame_lengths_ms
int
initial_frame_length_ms
int
min_encoder_bitrate_bps
float
fl_increasing_packet_loss_fraction
float
fl_decreasing_packet_loss_fraction
int
fl_increase_overhead_offset
int
fl_decrease_overhead_offset
std
:
:
map
<
FrameLengthChange
int
>
fl_changing_bandwidths_bps
)
;
Config
(
const
Config
&
other
)
;
~
Config
(
)
;
std
:
:
set
<
int
>
encoder_frame_lengths_ms
;
int
initial_frame_length_ms
;
int
min_encoder_bitrate_bps
;
float
fl_increasing_packet_loss_fraction
;
float
fl_decreasing_packet_loss_fraction
;
int
fl_increase_overhead_offset
;
int
fl_decrease_overhead_offset
;
std
:
:
map
<
FrameLengthChange
int
>
fl_changing_bandwidths_bps
;
}
;
explicit
FrameLengthController
(
const
Config
&
config
)
;
~
FrameLengthController
(
)
override
;
void
UpdateNetworkMetrics
(
const
NetworkMetrics
&
network_metrics
)
override
;
void
MakeDecision
(
AudioEncoderRuntimeConfig
*
config
)
override
;
private
:
bool
FrameLengthIncreasingDecision
(
const
AudioEncoderRuntimeConfig
&
config
)
;
bool
FrameLengthDecreasingDecision
(
const
AudioEncoderRuntimeConfig
&
config
)
;
const
Config
config_
;
std
:
:
set
<
int
>
:
:
const_iterator
frame_length_ms_
;
absl
:
:
optional
<
int
>
uplink_bandwidth_bps_
;
absl
:
:
optional
<
float
>
uplink_packet_loss_fraction_
;
absl
:
:
optional
<
size_t
>
overhead_bytes_per_packet_
;
bool
prev_decision_increase_
=
false
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
FrameLengthController
)
;
}
;
}
#
endif
