#
include
"
TwoWayCommunication
.
h
"
#
include
<
ctype
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
include
<
memory
>
#
include
"
api
/
audio_codecs
/
builtin_audio_decoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
builtin_audio_encoder_factory
.
h
"
#
include
"
modules
/
audio_coding
/
test
/
PCMFile
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
testsupport
/
file_utils
.
h
"
namespace
webrtc
{
#
define
MAX_FILE_NAME_LENGTH_BYTE
500
TwoWayCommunication
:
:
TwoWayCommunication
(
)
:
_acmA
(
AudioCodingModule
:
:
Create
(
AudioCodingModule
:
:
Config
(
CreateBuiltinAudioDecoderFactory
(
)
)
)
)
_acmRefA
(
AudioCodingModule
:
:
Create
(
AudioCodingModule
:
:
Config
(
CreateBuiltinAudioDecoderFactory
(
)
)
)
)
{
AudioCodingModule
:
:
Config
config
;
config
.
neteq_config
.
for_test_no_time_stretching
=
true
;
config
.
decoder_factory
=
CreateBuiltinAudioDecoderFactory
(
)
;
_acmB
.
reset
(
AudioCodingModule
:
:
Create
(
config
)
)
;
_acmRefB
.
reset
(
AudioCodingModule
:
:
Create
(
config
)
)
;
}
TwoWayCommunication
:
:
~
TwoWayCommunication
(
)
{
delete
_channel_A2B
;
delete
_channel_B2A
;
delete
_channelRef_A2B
;
delete
_channelRef_B2A
;
_inFileA
.
Close
(
)
;
_inFileB
.
Close
(
)
;
_outFileA
.
Close
(
)
;
_outFileB
.
Close
(
)
;
_outFileRefA
.
Close
(
)
;
_outFileRefB
.
Close
(
)
;
}
void
TwoWayCommunication
:
:
SetUpAutotest
(
AudioEncoderFactory
*
const
encoder_factory
const
SdpAudioFormat
&
format1
const
int
payload_type1
const
SdpAudioFormat
&
format2
const
int
payload_type2
)
{
_acmA
-
>
SetEncoder
(
encoder_factory
-
>
MakeAudioEncoder
(
payload_type1
format1
absl
:
:
nullopt
)
)
;
_acmA
-
>
SetReceiveCodecs
(
{
{
payload_type2
format2
}
}
)
;
_acmRefA
-
>
SetEncoder
(
encoder_factory
-
>
MakeAudioEncoder
(
payload_type1
format1
absl
:
:
nullopt
)
)
;
_acmRefA
-
>
SetReceiveCodecs
(
{
{
payload_type2
format2
}
}
)
;
_acmB
-
>
SetEncoder
(
encoder_factory
-
>
MakeAudioEncoder
(
payload_type2
format2
absl
:
:
nullopt
)
)
;
_acmB
-
>
SetReceiveCodecs
(
{
{
payload_type1
format1
}
}
)
;
_acmRefB
-
>
SetEncoder
(
encoder_factory
-
>
MakeAudioEncoder
(
payload_type2
format2
absl
:
:
nullopt
)
)
;
_acmRefB
-
>
SetReceiveCodecs
(
{
{
payload_type1
format1
}
}
)
;
uint16_t
frequencyHz
;
std
:
:
string
in_file_name
=
webrtc
:
:
test
:
:
ResourcePath
(
"
audio_coding
/
testfile32kHz
"
"
pcm
"
)
;
frequencyHz
=
16000
;
_inFileA
.
Open
(
in_file_name
frequencyHz
"
rb
"
)
;
_inFileB
.
Open
(
in_file_name
frequencyHz
"
rb
"
)
;
std
:
:
string
output_file_a
=
webrtc
:
:
test
:
:
OutputPath
(
)
+
"
outAutotestA
.
pcm
"
;
frequencyHz
=
16000
;
_outFileA
.
Open
(
output_file_a
frequencyHz
"
wb
"
)
;
std
:
:
string
output_ref_file_a
=
webrtc
:
:
test
:
:
OutputPath
(
)
+
"
ref_outAutotestA
.
pcm
"
;
_outFileRefA
.
Open
(
output_ref_file_a
frequencyHz
"
wb
"
)
;
std
:
:
string
output_file_b
=
webrtc
:
:
test
:
:
OutputPath
(
)
+
"
outAutotestB
.
pcm
"
;
frequencyHz
=
16000
;
_outFileB
.
Open
(
output_file_b
frequencyHz
"
wb
"
)
;
std
:
:
string
output_ref_file_b
=
webrtc
:
:
test
:
:
OutputPath
(
)
+
"
ref_outAutotestB
.
pcm
"
;
_outFileRefB
.
Open
(
output_ref_file_b
frequencyHz
"
wb
"
)
;
_channel_A2B
=
new
Channel
;
_acmA
-
>
RegisterTransportCallback
(
_channel_A2B
)
;
_channel_A2B
-
>
RegisterReceiverACM
(
_acmB
.
get
(
)
)
;
_channelRef_A2B
=
new
Channel
;
_acmRefA
-
>
RegisterTransportCallback
(
_channelRef_A2B
)
;
_channelRef_A2B
-
>
RegisterReceiverACM
(
_acmRefB
.
get
(
)
)
;
_channel_B2A
=
new
Channel
;
_acmB
-
>
RegisterTransportCallback
(
_channel_B2A
)
;
_channel_B2A
-
>
RegisterReceiverACM
(
_acmA
.
get
(
)
)
;
_channelRef_B2A
=
new
Channel
;
_acmRefB
-
>
RegisterTransportCallback
(
_channelRef_B2A
)
;
_channelRef_B2A
-
>
RegisterReceiverACM
(
_acmRefA
.
get
(
)
)
;
}
void
TwoWayCommunication
:
:
Perform
(
)
{
const
SdpAudioFormat
format1
(
"
ISAC
"
16000
1
)
;
const
SdpAudioFormat
format2
(
"
L16
"
8000
1
)
;
constexpr
int
payload_type1
=
17
payload_type2
=
18
;
auto
encoder_factory
=
CreateBuiltinAudioEncoderFactory
(
)
;
SetUpAutotest
(
encoder_factory
.
get
(
)
format1
payload_type1
format2
payload_type2
)
;
unsigned
int
msecPassed
=
0
;
unsigned
int
secPassed
=
0
;
int32_t
outFreqHzA
=
_outFileA
.
SamplingFrequency
(
)
;
int32_t
outFreqHzB
=
_outFileB
.
SamplingFrequency
(
)
;
AudioFrame
audioFrame
;
while
(
!
_inFileA
.
EndOfFile
(
)
&
&
!
_inFileB
.
EndOfFile
(
)
)
{
msecPassed
+
=
10
;
EXPECT_GT
(
_inFileA
.
Read10MsData
(
audioFrame
)
0
)
;
EXPECT_GE
(
_acmA
-
>
Add10MsData
(
audioFrame
)
0
)
;
EXPECT_GE
(
_acmRefA
-
>
Add10MsData
(
audioFrame
)
0
)
;
EXPECT_GT
(
_inFileB
.
Read10MsData
(
audioFrame
)
0
)
;
EXPECT_GE
(
_acmB
-
>
Add10MsData
(
audioFrame
)
0
)
;
EXPECT_GE
(
_acmRefB
-
>
Add10MsData
(
audioFrame
)
0
)
;
bool
muted
;
EXPECT_EQ
(
0
_acmA
-
>
PlayoutData10Ms
(
outFreqHzA
&
audioFrame
&
muted
)
)
;
ASSERT_FALSE
(
muted
)
;
_outFileA
.
Write10MsData
(
audioFrame
)
;
EXPECT_EQ
(
0
_acmRefA
-
>
PlayoutData10Ms
(
outFreqHzA
&
audioFrame
&
muted
)
)
;
ASSERT_FALSE
(
muted
)
;
_outFileRefA
.
Write10MsData
(
audioFrame
)
;
EXPECT_EQ
(
0
_acmB
-
>
PlayoutData10Ms
(
outFreqHzB
&
audioFrame
&
muted
)
)
;
ASSERT_FALSE
(
muted
)
;
_outFileB
.
Write10MsData
(
audioFrame
)
;
EXPECT_EQ
(
0
_acmRefB
-
>
PlayoutData10Ms
(
outFreqHzB
&
audioFrame
&
muted
)
)
;
ASSERT_FALSE
(
muted
)
;
_outFileRefB
.
Write10MsData
(
audioFrame
)
;
if
(
msecPassed
>
=
1000
)
{
msecPassed
=
0
;
secPassed
+
+
;
}
if
(
(
(
secPassed
%
5
)
=
=
4
)
&
&
(
msecPassed
>
=
990
)
)
{
_acmB
-
>
SetEncoder
(
encoder_factory
-
>
MakeAudioEncoder
(
payload_type2
format2
absl
:
:
nullopt
)
)
;
}
if
(
(
(
secPassed
%
7
)
=
=
6
)
&
&
(
msecPassed
=
=
0
)
)
EXPECT_EQ
(
0
_acmA
-
>
InitializeReceiver
(
)
)
;
if
(
(
(
secPassed
%
7
)
=
=
6
)
&
&
(
msecPassed
>
=
990
)
)
{
_acmA
-
>
SetReceiveCodecs
(
{
{
payload_type2
format2
}
}
)
;
}
}
}
}
