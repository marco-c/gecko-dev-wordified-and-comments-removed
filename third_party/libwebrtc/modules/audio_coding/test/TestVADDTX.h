#
ifndef
MODULES_AUDIO_CODING_TEST_TESTVADDTX_H_
#
define
MODULES_AUDIO_CODING_TEST_TESTVADDTX_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
audio_codecs
/
audio_decoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
api
/
neteq
/
neteq
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
common_audio
/
vad
/
include
/
vad
.
h
"
#
include
"
modules
/
audio_coding
/
acm2
/
acm_resampler
.
h
"
#
include
"
modules
/
audio_coding
/
include
/
audio_coding_module
.
h
"
#
include
"
modules
/
audio_coding
/
include
/
audio_coding_module_typedefs
.
h
"
#
include
"
modules
/
audio_coding
/
test
/
Channel
.
h
"
namespace
webrtc
{
class
MonitoringAudioPacketizationCallback
:
public
AudioPacketizationCallback
{
public
:
explicit
MonitoringAudioPacketizationCallback
(
AudioPacketizationCallback
*
next
)
;
int32_t
SendData
(
AudioFrameType
frame_type
uint8_t
payload_type
uint32_t
timestamp
const
uint8_t
*
payload_data
size_t
payload_len_bytes
int64_t
absolute_capture_timestamp_ms
)
override
;
void
PrintStatistics
(
)
;
void
ResetStatistics
(
)
;
void
GetStatistics
(
uint32_t
*
stats
)
;
private
:
uint32_t
counter_
[
3
]
;
AudioPacketizationCallback
*
const
next_
;
}
;
class
TestVadDtx
{
public
:
static
const
int
kOutputFreqHz
=
16000
;
TestVadDtx
(
)
;
protected
:
bool
RegisterCodec
(
const
SdpAudioFormat
&
codec_format
std
:
:
optional
<
Vad
:
:
Aggressiveness
>
vad_mode
)
;
void
Run
(
absl
:
:
string_view
in_filename
int
frequency
int
channels
absl
:
:
string_view
out_filename
bool
append
const
int
*
expects
)
;
const
Environment
env_
;
const
scoped_refptr
<
AudioEncoderFactory
>
encoder_factory_
;
const
scoped_refptr
<
AudioDecoderFactory
>
decoder_factory_
;
std
:
:
unique_ptr
<
AudioCodingModule
>
acm_send_
;
std
:
:
unique_ptr
<
NetEq
>
neteq_
;
acm2
:
:
ResamplerHelper
resampler_helper_
;
std
:
:
unique_ptr
<
Channel
>
channel_
;
std
:
:
unique_ptr
<
MonitoringAudioPacketizationCallback
>
packetization_callback_
;
uint32_t
time_stamp_
=
0x12345678
;
}
;
class
TestWebRtcVadDtx
final
:
public
TestVadDtx
{
public
:
TestWebRtcVadDtx
(
)
;
void
Perform
(
)
;
private
:
void
RunTestCases
(
const
SdpAudioFormat
&
codec_format
)
;
void
Test
(
bool
new_outfile
bool
expect_dtx_enabled
)
;
int
output_file_num_
;
}
;
class
TestOpusDtx
final
:
public
TestVadDtx
{
public
:
void
Perform
(
)
;
}
;
}
#
endif
