#
include
"
modules
/
audio_coding
/
neteq
/
relative_arrival_delay_tracker
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
int
kMaxHistoryMs
=
2000
;
constexpr
int
kFs
=
8000
;
constexpr
int
kFrameSizeMs
=
20
;
constexpr
int
kTsIncrement
=
kFrameSizeMs
*
kFs
/
1000
;
constexpr
uint32_t
kTs
=
0x12345678
;
}
TEST
(
RelativeArrivalDelayTrackerTest
RelativeArrivalDelay
)
{
TickTimer
tick_timer
;
RelativeArrivalDelayTracker
tracker
(
&
tick_timer
kMaxHistoryMs
)
;
EXPECT_FALSE
(
tracker
.
Update
(
kTs
kFs
)
)
;
tick_timer
.
Increment
(
kFrameSizeMs
/
tick_timer
.
ms_per_tick
(
)
)
;
EXPECT_EQ
(
tracker
.
Update
(
kTs
+
kTsIncrement
kFs
)
0
)
;
tick_timer
.
Increment
(
2
*
kFrameSizeMs
/
tick_timer
.
ms_per_tick
(
)
)
;
EXPECT_EQ
(
tracker
.
Update
(
kTs
+
2
*
kTsIncrement
kFs
)
20
)
;
EXPECT_EQ
(
tracker
.
Update
(
kTs
kFs
)
60
)
;
tick_timer
.
Increment
(
2
*
kFrameSizeMs
/
tick_timer
.
ms_per_tick
(
)
)
;
EXPECT_EQ
(
tracker
.
Update
(
kTs
+
3
*
kTsIncrement
kFs
)
40
)
;
}
TEST
(
RelativeArrivalDelayTrackerTest
ReorderedPackets
)
{
TickTimer
tick_timer
;
RelativeArrivalDelayTracker
tracker
(
&
tick_timer
kMaxHistoryMs
)
;
EXPECT_FALSE
(
tracker
.
Update
(
kTs
kFs
)
)
;
EXPECT_EQ
(
tracker
.
Update
(
kTs
-
4
*
kTsIncrement
kFs
)
80
)
;
EXPECT_EQ
(
tracker
.
newest_timestamp
(
)
kTs
)
;
EXPECT_EQ
(
tracker
.
Update
(
kTs
-
kTsIncrement
kFs
)
20
)
;
EXPECT_EQ
(
tracker
.
newest_timestamp
(
)
kTs
)
;
tick_timer
.
Increment
(
4
*
kFrameSizeMs
/
tick_timer
.
ms_per_tick
(
)
)
;
EXPECT_EQ
(
tracker
.
Update
(
kTs
+
kTsIncrement
kFs
)
60
)
;
EXPECT_EQ
(
tracker
.
newest_timestamp
(
)
kTs
+
kTsIncrement
)
;
}
TEST
(
RelativeArrivalDelayTrackerTest
MaxDelayHistory
)
{
TickTimer
tick_timer
;
RelativeArrivalDelayTracker
tracker
(
&
tick_timer
kMaxHistoryMs
)
;
EXPECT_FALSE
(
tracker
.
Update
(
kTs
kFs
)
)
;
tick_timer
.
Increment
(
2
*
kFrameSizeMs
/
tick_timer
.
ms_per_tick
(
)
)
;
EXPECT_EQ
(
tracker
.
Update
(
kTs
+
kTsIncrement
kFs
)
20
)
;
tick_timer
.
Increment
(
(
kMaxHistoryMs
+
kFrameSizeMs
)
/
tick_timer
.
ms_per_tick
(
)
)
;
EXPECT_EQ
(
tracker
.
Update
(
kTs
+
2
*
kTsIncrement
+
kFs
*
kMaxHistoryMs
/
1000
kFs
)
0
)
;
}
}
