#
include
<
memory
>
#
include
"
absl
/
flags
/
flag
.
h
"
#
include
"
modules
/
audio_coding
/
codecs
/
pcm16b
/
audio_encoder_pcm16b
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
tools
/
neteq_quality_test
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_conversions
.
h
"
#
include
"
test
/
testsupport
/
file_utils
.
h
"
ABSL_FLAG
(
int
frame_size_ms
20
"
Codec
frame
size
(
milliseconds
)
.
"
)
;
using
:
:
testing
:
:
InitGoogleTest
;
namespace
webrtc
{
namespace
test
{
namespace
{
static
const
int
kInputSampleRateKhz
=
48
;
static
const
int
kOutputSampleRateKhz
=
48
;
}
class
NetEqPcm16bQualityTest
:
public
NetEqQualityTest
{
protected
:
NetEqPcm16bQualityTest
(
)
:
NetEqQualityTest
(
absl
:
:
GetFlag
(
FLAGS_frame_size_ms
)
kInputSampleRateKhz
kOutputSampleRateKhz
SdpAudioFormat
(
"
l16
"
48000
1
)
)
{
RTC_CHECK
(
absl
:
:
GetFlag
(
FLAGS_frame_size_ms
)
>
=
10
&
&
absl
:
:
GetFlag
(
FLAGS_frame_size_ms
)
<
=
60
&
&
(
absl
:
:
GetFlag
(
FLAGS_frame_size_ms
)
%
10
)
=
=
0
)
<
<
"
Invalid
frame
size
should
be
10
20
.
.
.
60
ms
.
"
;
}
void
SetUp
(
)
override
{
AudioEncoderPcm16B
:
:
Config
config
;
config
.
frame_size_ms
=
absl
:
:
GetFlag
(
FLAGS_frame_size_ms
)
;
config
.
sample_rate_hz
=
48000
;
config
.
num_channels
=
channels_
;
encoder_
.
reset
(
new
AudioEncoderPcm16B
(
config
)
)
;
NetEqQualityTest
:
:
SetUp
(
)
;
}
int
EncodeBlock
(
int16_t
*
in_data
size_t
Buffer
*
payload
size_t
)
override
{
const
size_t
kFrameSizeSamples
=
480
;
size_t
encoded_samples
=
0
;
uint32_t
dummy_timestamp
=
0
;
AudioEncoder
:
:
EncodedInfo
info
;
do
{
info
=
encoder_
-
>
Encode
(
dummy_timestamp
ArrayView
<
const
int16_t
>
(
in_data
+
encoded_samples
kFrameSizeSamples
)
payload
)
;
encoded_samples
+
=
kFrameSizeSamples
;
}
while
(
info
.
encoded_bytes
=
=
0
)
;
return
checked_cast
<
int
>
(
info
.
encoded_bytes
)
;
}
private
:
std
:
:
unique_ptr
<
AudioEncoderPcm16B
>
encoder_
;
}
;
TEST_F
(
NetEqPcm16bQualityTest
Test
)
{
Simulate
(
)
;
}
}
}
