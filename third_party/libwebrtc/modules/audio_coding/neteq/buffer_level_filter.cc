#
include
"
modules
/
audio_coding
/
neteq
/
buffer_level_filter
.
h
"
#
include
<
stdint
.
h
>
#
include
<
algorithm
>
#
include
"
rtc_base
/
numerics
/
safe_conversions
.
h
"
namespace
webrtc
{
BufferLevelFilter
:
:
BufferLevelFilter
(
)
{
Reset
(
)
;
}
void
BufferLevelFilter
:
:
Reset
(
)
{
filtered_current_level_
=
0
;
level_factor_
=
253
;
}
void
BufferLevelFilter
:
:
Update
(
size_t
buffer_size_samples
int
time_stretched_samples
)
{
const
int64_t
filtered_current_level
=
(
(
level_factor_
*
int64_t
{
filtered_current_level_
}
)
>
>
8
)
+
(
(
256
-
level_factor_
)
*
rtc
:
:
dchecked_cast
<
int
>
(
buffer_size_samples
)
)
;
filtered_current_level_
=
rtc
:
:
saturated_cast
<
int
>
(
std
:
:
max
<
int64_t
>
(
0
filtered_current_level
-
(
int64_t
{
time_stretched_samples
}
*
(
1
<
<
8
)
)
)
)
;
}
void
BufferLevelFilter
:
:
SetTargetBufferLevel
(
int
target_buffer_level_ms
)
{
if
(
target_buffer_level_ms
<
=
20
)
{
level_factor_
=
251
;
}
else
if
(
target_buffer_level_ms
<
=
60
)
{
level_factor_
=
252
;
}
else
if
(
target_buffer_level_ms
<
=
140
)
{
level_factor_
=
253
;
}
else
{
level_factor_
=
254
;
}
}
}
