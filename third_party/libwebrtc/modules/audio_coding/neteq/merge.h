#
ifndef
MODULES_AUDIO_CODING_NETEQ_MERGE_H_
#
define
MODULES_AUDIO_CODING_NETEQ_MERGE_H_
#
include
"
modules
/
audio_coding
/
neteq
/
audio_multi_vector
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
namespace
webrtc
{
class
Expand
;
class
SyncBuffer
;
class
Merge
{
public
:
Merge
(
int
fs_hz
size_t
num_channels
Expand
*
expand
SyncBuffer
*
sync_buffer
)
;
virtual
~
Merge
(
)
;
virtual
size_t
Process
(
int16_t
*
input
size_t
input_length
AudioMultiVector
*
output
)
;
virtual
size_t
RequiredFutureSamples
(
)
;
protected
:
const
int
fs_hz_
;
const
size_t
num_channels_
;
private
:
static
const
int
kMaxSampleRate
=
48000
;
static
const
size_t
kExpandDownsampLength
=
100
;
static
const
size_t
kInputDownsampLength
=
40
;
static
const
size_t
kMaxCorrelationLength
=
60
;
size_t
GetExpandedSignal
(
size_t
*
old_length
size_t
*
expand_period
)
;
int16_t
SignalScaling
(
const
int16_t
*
input
size_t
input_length
const
int16_t
*
expanded_signal
)
const
;
void
Downsample
(
const
int16_t
*
input
size_t
input_length
const
int16_t
*
expanded_signal
size_t
expanded_length
)
;
size_t
CorrelateAndPeakSearch
(
size_t
start_position
size_t
input_length
size_t
expand_period
)
const
;
const
int
fs_mult_
;
const
size_t
timestamps_per_call_
;
Expand
*
expand_
;
SyncBuffer
*
sync_buffer_
;
int16_t
expanded_downsampled_
[
kExpandDownsampLength
]
;
int16_t
input_downsampled_
[
kInputDownsampLength
]
;
AudioMultiVector
expanded_
;
std
:
:
vector
<
int16_t
>
temp_data_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
Merge
)
;
}
;
}
#
endif
