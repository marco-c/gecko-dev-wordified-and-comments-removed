#
ifndef
MODULES_AUDIO_CODING_NETEQ_DELAY_MANAGER_H_
#
define
MODULES_AUDIO_CODING_NETEQ_DELAY_MANAGER_H_
#
include
<
memory
>
#
include
<
optional
>
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
neteq
/
tick_timer
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
reorder_optimizer
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
underrun_optimizer
.
h
"
namespace
webrtc
{
class
DelayManager
{
public
:
struct
Config
{
explicit
Config
(
const
FieldTrialsView
&
field_trials
)
;
void
Log
(
)
;
double
quantile
=
0
.
95
;
double
forget_factor
=
0
.
983
;
std
:
:
optional
<
double
>
start_forget_weight
=
2
;
std
:
:
optional
<
int
>
resample_interval_ms
=
500
;
bool
use_reorder_optimizer
=
true
;
double
reorder_forget_factor
=
0
.
9993
;
int
ms_per_loss_percent
=
20
;
}
;
DelayManager
(
const
Config
&
config
const
TickTimer
*
tick_timer
)
;
virtual
~
DelayManager
(
)
;
DelayManager
(
const
DelayManager
&
)
=
delete
;
DelayManager
&
operator
=
(
const
DelayManager
&
)
=
delete
;
virtual
void
Update
(
int
arrival_delay_ms
bool
reordered
)
;
virtual
void
Reset
(
)
;
virtual
int
TargetDelayMs
(
)
const
;
private
:
UnderrunOptimizer
underrun_optimizer_
;
std
:
:
unique_ptr
<
ReorderOptimizer
>
reorder_optimizer_
;
int
target_level_ms_
=
0
;
}
;
}
#
endif
