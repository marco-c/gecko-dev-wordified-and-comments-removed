#
ifndef
MODULES_AUDIO_CODING_NETEQ_DELAY_MANAGER_H_
#
define
MODULES_AUDIO_CODING_NETEQ_DELAY_MANAGER_H_
#
include
<
string
.
h
>
#
include
<
deque
>
#
include
<
memory
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
neteq
/
tick_timer
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
histogram
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
namespace
webrtc
{
class
DelayManager
{
public
:
DelayManager
(
size_t
max_packets_in_buffer
int
base_minimum_delay_ms
int
histogram_quantile
bool
enable_rtx_handling
const
TickTimer
*
tick_timer
std
:
:
unique_ptr
<
Histogram
>
histogram
)
;
static
std
:
:
unique_ptr
<
DelayManager
>
Create
(
size_t
max_packets_in_buffer
int
base_minimum_delay_ms
bool
enable_rtx_handling
const
TickTimer
*
tick_timer
)
;
virtual
~
DelayManager
(
)
;
virtual
absl
:
:
optional
<
int
>
Update
(
uint16_t
sequence_number
uint32_t
timestamp
int
sample_rate_hz
)
;
virtual
int
CalculateTargetLevel
(
)
;
virtual
int
SetPacketAudioLength
(
int
length_ms
)
;
virtual
void
Reset
(
)
;
virtual
void
ResetPacketIatCount
(
)
;
virtual
void
BufferLimits
(
int
*
lower_limit
int
*
higher_limit
)
const
;
virtual
void
BufferLimits
(
int
target_level
int
*
lower_limit
int
*
higher_limit
)
const
;
virtual
int
TargetLevel
(
)
const
;
virtual
void
LastDecodedWasCngOrDtmf
(
bool
it_was
)
;
virtual
void
RegisterEmptyPacket
(
)
;
virtual
bool
SetMinimumDelay
(
int
delay_ms
)
;
virtual
bool
SetMaximumDelay
(
int
delay_ms
)
;
virtual
bool
SetBaseMinimumDelay
(
int
delay_ms
)
;
virtual
int
GetBaseMinimumDelay
(
)
const
;
virtual
int
base_target_level
(
)
const
;
virtual
int
last_pack_cng_or_dtmf
(
)
const
;
virtual
void
set_last_pack_cng_or_dtmf
(
int
value
)
;
int
effective_minimum_delay_ms_for_test
(
)
const
{
return
effective_minimum_delay_ms_
;
}
int
histogram_quantile
(
)
const
{
return
histogram_quantile_
;
}
Histogram
*
histogram
(
)
const
{
return
histogram_
.
get
(
)
;
}
private
:
int
MinimumDelayUpperBound
(
)
const
;
int
MaxBufferTimeQ75
(
)
const
;
void
UpdateDelayHistory
(
int
iat_delay_ms
uint32_t
timestamp
int
sample_rate_hz
)
;
int
CalculateRelativePacketArrivalDelay
(
)
const
;
void
UpdateEffectiveMinimumDelay
(
)
;
void
LimitTargetLevel
(
)
;
bool
IsValidMinimumDelay
(
int
delay_ms
)
const
;
bool
IsValidBaseMinimumDelay
(
int
delay_ms
)
const
;
bool
first_packet_received_
;
const
size_t
max_packets_in_buffer_
;
std
:
:
unique_ptr
<
Histogram
>
histogram_
;
const
int
histogram_quantile_
;
const
TickTimer
*
tick_timer_
;
int
base_minimum_delay_ms_
;
int
effective_minimum_delay_ms_
;
std
:
:
unique_ptr
<
TickTimer
:
:
Stopwatch
>
packet_iat_stopwatch_
;
int
base_target_level_
;
int
target_level_
;
int
packet_len_ms_
;
uint16_t
last_seq_no_
;
uint32_t
last_timestamp_
;
int
minimum_delay_ms_
;
int
maximum_delay_ms_
;
int
last_pack_cng_or_dtmf_
;
const
bool
enable_rtx_handling_
;
int
num_reordered_packets_
=
0
;
struct
PacketDelay
{
int
iat_delay_ms
;
uint32_t
timestamp
;
}
;
std
:
:
deque
<
PacketDelay
>
delay_history_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
DelayManager
)
;
}
;
}
#
endif
