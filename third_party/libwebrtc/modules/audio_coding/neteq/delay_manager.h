#
ifndef
MODULES_AUDIO_CODING_NETEQ_DELAY_MANAGER_H_
#
define
MODULES_AUDIO_CODING_NETEQ_DELAY_MANAGER_H_
#
include
<
string
.
h
>
#
include
<
deque
>
#
include
<
memory
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
neteq
/
tick_timer
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
histogram
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
relative_arrival_delay_tracker
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
underrun_optimizer
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
experiments
/
struct_parameters_parser
.
h
"
namespace
webrtc
{
class
DelayManager
{
public
:
struct
Config
{
Config
(
)
;
void
Log
(
)
;
double
quantile
=
0
.
97
;
double
forget_factor
=
0
.
9993
;
absl
:
:
optional
<
double
>
start_forget_weight
=
2
;
absl
:
:
optional
<
int
>
resample_interval_ms
;
int
max_history_ms
=
2000
;
int
max_packets_in_buffer
=
200
;
int
base_minimum_delay_ms
=
0
;
private
:
std
:
:
unique_ptr
<
StructParametersParser
>
Parser
(
)
;
void
MaybeUpdateFromLegacyFieldTrial
(
)
;
}
;
DelayManager
(
const
Config
&
config
const
TickTimer
*
tick_timer
)
;
virtual
~
DelayManager
(
)
;
virtual
absl
:
:
optional
<
int
>
Update
(
uint32_t
timestamp
int
sample_rate_hz
bool
reset
=
false
)
;
virtual
void
Reset
(
)
;
virtual
int
TargetDelayMs
(
)
const
;
virtual
int
SetPacketAudioLength
(
int
length_ms
)
;
virtual
bool
SetMinimumDelay
(
int
delay_ms
)
;
virtual
bool
SetMaximumDelay
(
int
delay_ms
)
;
virtual
bool
SetBaseMinimumDelay
(
int
delay_ms
)
;
virtual
int
GetBaseMinimumDelay
(
)
const
;
int
effective_minimum_delay_ms_for_test
(
)
const
{
return
effective_minimum_delay_ms_
;
}
private
:
int
MinimumDelayUpperBound
(
)
const
;
void
UpdateEffectiveMinimumDelay
(
)
;
bool
IsValidMinimumDelay
(
int
delay_ms
)
const
;
bool
IsValidBaseMinimumDelay
(
int
delay_ms
)
const
;
const
int
max_packets_in_buffer_
;
UnderrunOptimizer
underrun_optimizer_
;
RelativeArrivalDelayTracker
relative_arrival_delay_tracker_
;
int
base_minimum_delay_ms_
;
int
effective_minimum_delay_ms_
;
int
minimum_delay_ms_
;
int
maximum_delay_ms_
;
int
packet_len_ms_
=
0
;
int
target_level_ms_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
DelayManager
)
;
}
;
}
#
endif
