#
ifndef
MODULES_AUDIO_CODING_NETEQ_COMFORT_NOISE_H_
#
define
MODULES_AUDIO_CODING_NETEQ_COMFORT_NOISE_H_
#
include
<
stddef
.
h
>
namespace
webrtc
{
class
AudioMultiVector
;
class
DecoderDatabase
;
class
SyncBuffer
;
struct
Packet
;
class
ComfortNoise
{
public
:
enum
ReturnCodes
{
kOK
=
0
kUnknownPayloadType
kInternalError
kMultiChannelNotSupported
}
;
ComfortNoise
(
int
fs_hz
DecoderDatabase
*
decoder_database
SyncBuffer
*
sync_buffer
)
:
fs_hz_
(
fs_hz
)
first_call_
(
true
)
overlap_length_
(
5
*
fs_hz_
/
8000
)
decoder_database_
(
decoder_database
)
sync_buffer_
(
sync_buffer
)
{
}
ComfortNoise
(
const
ComfortNoise
&
)
=
delete
;
ComfortNoise
&
operator
=
(
const
ComfortNoise
&
)
=
delete
;
void
Reset
(
)
;
int
UpdateParameters
(
const
Packet
&
packet
)
;
int
Generate
(
size_t
requested_length
AudioMultiVector
*
output
)
;
int
internal_error_code
(
)
{
return
internal_error_code_
;
}
private
:
int
fs_hz_
;
bool
first_call_
;
size_t
overlap_length_
;
DecoderDatabase
*
decoder_database_
;
SyncBuffer
*
sync_buffer_
;
int
internal_error_code_
;
}
;
}
#
endif
