#
ifndef
MODULES_AUDIO_CODING_NETEQ_MOCK_MOCK_PACKET_BUFFER_H_
#
define
MODULES_AUDIO_CODING_NETEQ_MOCK_MOCK_PACKET_BUFFER_H_
#
include
"
modules
/
audio_coding
/
neteq
/
packet_buffer
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
class
MockPacketBuffer
:
public
PacketBuffer
{
public
:
MockPacketBuffer
(
size_t
max_number_of_packets
const
TickTimer
*
tick_timer
StatisticsCalculator
*
stats
)
:
PacketBuffer
(
max_number_of_packets
tick_timer
stats
)
{
}
~
MockPacketBuffer
(
)
override
{
Die
(
)
;
}
MOCK_METHOD
(
void
Die
(
)
)
;
MOCK_METHOD
(
void
Flush
(
)
(
override
)
)
;
MOCK_METHOD
(
bool
Empty
(
)
(
const
override
)
)
;
MOCK_METHOD
(
int
InsertPacket
(
Packet
&
&
packet
)
(
override
)
)
;
MOCK_METHOD
(
int
InsertPacketList
(
PacketList
*
packet_list
const
DecoderDatabase
&
decoder_database
absl
:
:
optional
<
uint8_t
>
*
current_rtp_payload_type
absl
:
:
optional
<
uint8_t
>
*
current_cng_rtp_payload_type
)
(
override
)
)
;
MOCK_METHOD
(
int
NextTimestamp
(
uint32_t
*
next_timestamp
)
(
const
override
)
)
;
MOCK_METHOD
(
int
NextHigherTimestamp
(
uint32_t
timestamp
uint32_t
*
next_timestamp
)
(
const
override
)
)
;
MOCK_METHOD
(
const
Packet
*
PeekNextPacket
(
)
(
const
override
)
)
;
MOCK_METHOD
(
absl
:
:
optional
<
Packet
>
GetNextPacket
(
)
(
override
)
)
;
MOCK_METHOD
(
int
DiscardNextPacket
(
)
(
override
)
)
;
MOCK_METHOD
(
void
DiscardOldPackets
(
uint32_t
timestamp_limit
uint32_t
horizon_samples
)
(
override
)
)
;
MOCK_METHOD
(
void
DiscardAllOldPackets
(
uint32_t
timestamp_limit
)
(
override
)
)
;
MOCK_METHOD
(
size_t
NumPacketsInBuffer
(
)
(
const
override
)
)
;
}
;
}
#
endif
