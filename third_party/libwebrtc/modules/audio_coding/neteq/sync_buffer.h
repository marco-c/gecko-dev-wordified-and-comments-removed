#
ifndef
MODULES_AUDIO_CODING_NETEQ_SYNC_BUFFER_H_
#
define
MODULES_AUDIO_CODING_NETEQ_SYNC_BUFFER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
api
/
audio
/
audio_view
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
audio_multi_vector
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
audio_vector
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
namespace
webrtc
{
class
SyncBuffer
final
:
public
AudioMultiVector
{
public
:
SyncBuffer
(
size_t
channels
size_t
length
)
:
AudioMultiVector
(
channels
length
)
next_index_
(
length
)
end_timestamp_
(
0
)
dtmf_index_
(
0
)
{
}
SyncBuffer
(
const
SyncBuffer
&
)
=
delete
;
SyncBuffer
&
operator
=
(
const
SyncBuffer
&
)
=
delete
;
~
SyncBuffer
(
)
override
=
default
;
size_t
FutureLength
(
)
const
;
void
PushBack
(
const
AudioMultiVector
&
append_this
)
override
;
void
PushBackInterleaved
(
const
BufferT
<
int16_t
>
&
append_this
)
;
void
PushFrontZeros
(
size_t
length
)
;
void
InsertZerosAtIndex
(
size_t
length
size_t
position
)
;
void
ReplaceAtIndex
(
const
AudioMultiVector
&
insert_this
size_t
length
size_t
position
)
;
void
ReplaceAtIndex
(
const
AudioMultiVector
&
insert_this
size_t
position
)
;
bool
GetNextAudioInterleaved
(
InterleavedView
<
int16_t
>
audio
)
;
void
IncreaseEndTimestamp
(
uint32_t
increment
)
;
void
Flush
(
)
;
const
AudioVector
&
Channel
(
size_t
n
)
const
{
return
*
channels_
[
n
]
;
}
AudioVector
&
Channel
(
size_t
n
)
{
return
*
channels_
[
n
]
;
}
size_t
next_index
(
)
const
{
return
next_index_
;
}
void
set_next_index
(
size_t
value
)
;
uint32_t
end_timestamp
(
)
const
{
return
end_timestamp_
;
}
void
set_end_timestamp
(
uint32_t
value
)
{
end_timestamp_
=
value
;
}
size_t
dtmf_index
(
)
const
{
return
dtmf_index_
;
}
void
set_dtmf_index
(
size_t
value
)
;
private
:
size_t
next_index_
;
uint32_t
end_timestamp_
;
size_t
dtmf_index_
;
}
;
}
#
endif
