#
include
"
modules
/
audio_coding
/
neteq
/
sync_buffer
.
h
"
#
include
<
algorithm
>
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
"
api
/
audio
/
audio_view
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
audio_multi_vector
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
size_t
SyncBuffer
:
:
FutureLength
(
)
const
{
return
Size
(
)
-
next_index_
;
}
void
SyncBuffer
:
:
PushBack
(
const
AudioMultiVector
&
append_this
)
{
size_t
samples_added
=
append_this
.
Size
(
)
;
AudioMultiVector
:
:
PushBack
(
append_this
)
;
AudioMultiVector
:
:
PopFront
(
samples_added
)
;
if
(
samples_added
<
=
next_index_
)
{
next_index_
-
=
samples_added
;
}
else
{
next_index_
=
0
;
}
dtmf_index_
-
=
std
:
:
min
(
dtmf_index_
samples_added
)
;
}
void
SyncBuffer
:
:
PushBackInterleaved
(
const
BufferT
<
int16_t
>
&
append_this
)
{
const
size_t
size_before_adding
=
Size
(
)
;
AudioMultiVector
:
:
PushBackInterleaved
(
append_this
)
;
const
size_t
samples_added_per_channel
=
Size
(
)
-
size_before_adding
;
RTC_DCHECK_EQ
(
samples_added_per_channel
*
Channels
(
)
append_this
.
size
(
)
)
;
AudioMultiVector
:
:
PopFront
(
samples_added_per_channel
)
;
next_index_
-
=
std
:
:
min
(
next_index_
samples_added_per_channel
)
;
dtmf_index_
-
=
std
:
:
min
(
dtmf_index_
samples_added_per_channel
)
;
}
void
SyncBuffer
:
:
PushFrontZeros
(
size_t
length
)
{
InsertZerosAtIndex
(
length
0
)
;
}
void
SyncBuffer
:
:
InsertZerosAtIndex
(
size_t
length
size_t
position
)
{
position
=
std
:
:
min
(
position
Size
(
)
)
;
length
=
std
:
:
min
(
length
Size
(
)
-
position
)
;
AudioMultiVector
:
:
PopBack
(
length
)
;
for
(
size_t
channel
=
0
;
channel
<
Channels
(
)
;
+
+
channel
)
{
channels_
[
channel
]
-
>
InsertZerosAt
(
length
position
)
;
}
if
(
next_index_
>
=
position
)
{
set_next_index
(
next_index_
+
length
)
;
}
if
(
dtmf_index_
>
0
&
&
dtmf_index_
>
=
position
)
{
set_dtmf_index
(
dtmf_index_
+
length
)
;
}
}
void
SyncBuffer
:
:
ReplaceAtIndex
(
const
AudioMultiVector
&
insert_this
size_t
length
size_t
position
)
{
position
=
std
:
:
min
(
position
Size
(
)
)
;
length
=
std
:
:
min
(
length
Size
(
)
-
position
)
;
OverwriteAt
(
insert_this
length
position
)
;
}
void
SyncBuffer
:
:
ReplaceAtIndex
(
const
AudioMultiVector
&
insert_this
size_t
position
)
{
ReplaceAtIndex
(
insert_this
insert_this
.
Size
(
)
position
)
;
}
bool
SyncBuffer
:
:
GetNextAudioInterleaved
(
InterleavedView
<
int16_t
>
audio
)
{
RTC_DCHECK_EQ
(
audio
.
num_channels
(
)
Channels
(
)
)
;
bool
read
=
ReadInterleavedFromIndex
(
next_index_
audio
)
;
if
(
read
)
{
next_index_
+
=
audio
.
samples_per_channel
(
)
;
}
return
read
;
}
void
SyncBuffer
:
:
IncreaseEndTimestamp
(
uint32_t
increment
)
{
end_timestamp_
+
=
increment
;
}
void
SyncBuffer
:
:
Flush
(
)
{
Zeros
(
Size
(
)
)
;
next_index_
=
Size
(
)
;
end_timestamp_
=
0
;
dtmf_index_
=
0
;
}
void
SyncBuffer
:
:
set_next_index
(
size_t
value
)
{
next_index_
=
std
:
:
min
(
value
Size
(
)
)
;
}
void
SyncBuffer
:
:
set_dtmf_index
(
size_t
value
)
{
dtmf_index_
=
std
:
:
min
(
value
Size
(
)
)
;
}
}
