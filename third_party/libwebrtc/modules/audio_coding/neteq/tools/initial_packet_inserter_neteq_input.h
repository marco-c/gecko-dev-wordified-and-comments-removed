#
ifndef
MODULES_AUDIO_CODING_NETEQ_TOOLS_INITIAL_PACKET_INSERTER_NETEQ_INPUT_H_
#
define
MODULES_AUDIO_CODING_NETEQ_TOOLS_INITIAL_PACKET_INSERTER_NETEQ_INPUT_H_
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
"
api
/
rtp_headers
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
tools
/
neteq_input
.
h
"
namespace
webrtc
{
namespace
test
{
class
InitialPacketInserterNetEqInput
final
:
public
NetEqInput
{
public
:
InitialPacketInserterNetEqInput
(
std
:
:
unique_ptr
<
NetEqInput
>
source
int
number_of_initial_packets
int
sample_rate_hz
)
;
std
:
:
optional
<
int64_t
>
NextPacketTime
(
)
const
override
;
std
:
:
optional
<
int64_t
>
NextOutputEventTime
(
)
const
override
;
std
:
:
optional
<
SetMinimumDelayInfo
>
NextSetMinimumDelayInfo
(
)
const
override
;
std
:
:
unique_ptr
<
PacketData
>
PopPacket
(
)
override
;
void
AdvanceOutputEvent
(
)
override
;
void
AdvanceSetMinimumDelay
(
)
override
;
bool
ended
(
)
const
override
;
std
:
:
optional
<
RTPHeader
>
NextHeader
(
)
const
override
;
private
:
const
std
:
:
unique_ptr
<
NetEqInput
>
source_
;
int
packets_to_insert_
;
const
int
sample_rate_hz_
;
std
:
:
unique_ptr
<
PacketData
>
first_packet_
;
}
;
}
}
#
endif
