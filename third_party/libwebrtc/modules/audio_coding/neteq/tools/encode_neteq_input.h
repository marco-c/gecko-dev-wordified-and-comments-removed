#
ifndef
MODULES_AUDIO_CODING_NETEQ_TOOLS_ENCODE_NETEQ_INPUT_H_
#
define
MODULES_AUDIO_CODING_NETEQ_TOOLS_ENCODE_NETEQ_INPUT_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder
.
h
"
#
include
"
api
/
rtp_headers
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
tools
/
neteq_input
.
h
"
namespace
webrtc
{
namespace
test
{
class
EncodeNetEqInput
:
public
NetEqInput
{
public
:
class
Generator
{
public
:
virtual
~
Generator
(
)
=
default
;
virtual
ArrayView
<
const
int16_t
>
Generate
(
size_t
num_samples
)
=
0
;
}
;
EncodeNetEqInput
(
std
:
:
unique_ptr
<
Generator
>
generator
std
:
:
unique_ptr
<
AudioEncoder
>
encoder
int64_t
input_duration_ms
)
;
~
EncodeNetEqInput
(
)
override
;
std
:
:
optional
<
int64_t
>
NextPacketTime
(
)
const
override
;
std
:
:
optional
<
int64_t
>
NextOutputEventTime
(
)
const
override
;
std
:
:
optional
<
SetMinimumDelayInfo
>
NextSetMinimumDelayInfo
(
)
const
override
{
return
std
:
:
nullopt
;
}
std
:
:
unique_ptr
<
PacketData
>
PopPacket
(
)
override
;
void
AdvanceOutputEvent
(
)
override
;
void
AdvanceSetMinimumDelay
(
)
override
{
}
bool
ended
(
)
const
override
;
std
:
:
optional
<
RTPHeader
>
NextHeader
(
)
const
override
;
private
:
static
constexpr
int64_t
kOutputPeriodMs
=
10
;
void
CreatePacket
(
)
;
std
:
:
unique_ptr
<
Generator
>
generator_
;
std
:
:
unique_ptr
<
AudioEncoder
>
encoder_
;
std
:
:
unique_ptr
<
PacketData
>
packet_data_
;
uint32_t
rtp_timestamp_
=
0
;
int16_t
sequence_number_
=
0
;
int64_t
next_packet_time_ms_
=
0
;
int64_t
next_output_event_ms_
=
0
;
const
int64_t
input_duration_ms_
;
}
;
}
}
#
endif
