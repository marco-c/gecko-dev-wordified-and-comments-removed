#
ifndef
MODULES_AUDIO_CODING_NETEQ_TOOLS_RTP_FILE_SOURCE_H_
#
define
MODULES_AUDIO_CODING_NETEQ_TOOLS_RTP_FILE_SOURCE_H_
#
include
<
stdio
.
h
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
optional
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
tools
/
packet
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
tools
/
packet_source
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_header_extension_map
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
namespace
webrtc
{
namespace
test
{
class
RtpFileReader
;
class
RtpFileSource
:
public
PacketSource
{
public
:
static
RtpFileSource
*
Create
(
absl
:
:
string_view
file_name
std
:
:
optional
<
uint32_t
>
ssrc_filter
=
std
:
:
nullopt
)
;
static
bool
ValidRtpDump
(
absl
:
:
string_view
file_name
)
;
static
bool
ValidPcap
(
absl
:
:
string_view
file_name
)
;
~
RtpFileSource
(
)
override
;
RtpFileSource
(
const
RtpFileSource
&
)
=
delete
;
RtpFileSource
&
operator
=
(
const
RtpFileSource
&
)
=
delete
;
virtual
bool
RegisterRtpHeaderExtension
(
RTPExtensionType
type
uint8_t
id
)
;
std
:
:
unique_ptr
<
Packet
>
NextPacket
(
)
override
;
private
:
static
const
int
kFirstLineLength
=
40
;
static
const
int
kRtpFileHeaderSize
=
4
+
4
+
4
+
2
+
2
;
static
const
size_t
kPacketHeaderSize
=
8
;
explicit
RtpFileSource
(
std
:
:
optional
<
uint32_t
>
ssrc_filter
)
;
bool
OpenFile
(
absl
:
:
string_view
file_name
)
;
std
:
:
unique_ptr
<
RtpFileReader
>
rtp_reader_
;
const
std
:
:
optional
<
uint32_t
>
ssrc_filter_
;
RtpHeaderExtensionMap
rtp_header_extension_map_
;
}
;
}
}
#
endif
