#
ifndef
MODULES_AUDIO_CODING_CODECS_OPUS_AUDIO_DECODER_OPUS_H_
#
define
MODULES_AUDIO_CODING_CODECS_OPUS_AUDIO_DECODER_OPUS_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
api
/
audio_codecs
/
audio_decoder
.
h
"
#
include
"
modules
/
audio_coding
/
codecs
/
opus
/
opus_interface
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
namespace
webrtc
{
class
AudioDecoderOpusImpl
final
:
public
AudioDecoder
{
public
:
explicit
AudioDecoderOpusImpl
(
size_t
num_channels
int
sample_rate_hz
=
48000
)
;
~
AudioDecoderOpusImpl
(
)
override
;
AudioDecoderOpusImpl
(
const
AudioDecoderOpusImpl
&
)
=
delete
;
AudioDecoderOpusImpl
&
operator
=
(
const
AudioDecoderOpusImpl
&
)
=
delete
;
std
:
:
vector
<
ParseResult
>
ParsePayload
(
rtc
:
:
Buffer
&
&
payload
uint32_t
timestamp
)
override
;
void
Reset
(
)
override
;
int
PacketDuration
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
override
;
int
PacketDurationRedundant
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
override
;
bool
PacketHasFec
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
override
;
int
SampleRateHz
(
)
const
override
;
size_t
Channels
(
)
const
override
;
protected
:
int
DecodeInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
override
;
int
DecodeRedundantInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
override
;
private
:
OpusDecInst
*
dec_state_
;
const
size_t
channels_
;
const
int
sample_rate_hz_
;
}
;
}
#
endif
