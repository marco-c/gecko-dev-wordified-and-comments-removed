#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
"
modules
/
audio_coding
/
codecs
/
g711
/
g711_interface
.
h
"
#
include
<
time
.
h
>
#
include
<
cstdint
>
#
define
CLOCKS_PER_SEC_G711
1000
bool
readframe
(
int16_t
*
data
FILE
*
inp
size_t
length
)
{
size_t
rlen
=
fread
(
data
sizeof
(
int16_t
)
length
inp
)
;
if
(
rlen
>
=
length
)
return
false
;
memset
(
data
+
rlen
0
(
length
-
rlen
)
*
sizeof
(
int16_t
)
)
;
return
true
;
}
int
main
(
int
argc
char
*
argv
[
]
)
{
char
inname
[
80
]
outname
[
40
]
bitname
[
40
]
;
FILE
*
inp
;
FILE
*
outp
;
FILE
*
bitp
=
NULL
;
int
framecnt
;
bool
endfile
;
size_t
framelength
=
80
;
double
starttime
;
double
runtime
;
double
length_file
;
size_t
stream_len
=
0
;
int16_t
shortdata
[
480
]
;
int16_t
decoded
[
480
]
;
uint8_t
streamdata
[
1000
]
;
int16_t
speechType
[
1
]
;
char
law
[
2
]
;
char
versionNumber
[
40
]
;
if
(
(
argc
!
=
5
)
&
&
(
argc
!
=
6
)
)
{
printf
(
"
\
n
\
nWrong
number
of
arguments
or
flag
values
.
\
n
\
n
"
)
;
printf
(
"
\
n
"
)
;
printf
(
"
\
nG
.
711
test
application
\
n
\
n
"
)
;
printf
(
"
Usage
:
\
n
\
n
"
)
;
printf
(
"
.
/
testG711
.
exe
framelength
law
infile
outfile
\
n
\
n
"
)
;
printf
(
"
framelength
:
Framelength
in
samples
.
\
n
"
)
;
printf
(
"
law
:
Coding
law
A
och
u
.
\
n
"
)
;
printf
(
"
infile
:
Normal
speech
input
file
\
n
"
)
;
printf
(
"
outfile
:
Speech
output
file
\
n
\
n
"
)
;
printf
(
"
outbits
:
Output
bitstream
file
[
optional
]
\
n
\
n
"
)
;
exit
(
0
)
;
}
WebRtcG711_Version
(
versionNumber
40
)
;
printf
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
printf
(
"
G
.
711
version
:
%
s
\
n
\
n
"
versionNumber
)
;
int
framelength_int
=
atoi
(
argv
[
1
]
)
;
if
(
framelength_int
<
0
)
{
printf
(
"
G
.
722
:
Invalid
framelength
%
d
.
\
n
"
framelength_int
)
;
exit
(
1
)
;
}
framelength
=
static_cast
<
size_t
>
(
framelength_int
)
;
strcpy
(
law
argv
[
2
]
)
;
sscanf
(
argv
[
3
]
"
%
s
"
inname
)
;
sscanf
(
argv
[
4
]
"
%
s
"
outname
)
;
if
(
argc
=
=
6
)
{
sscanf
(
argv
[
5
]
"
%
s
"
bitname
)
;
if
(
(
bitp
=
fopen
(
bitname
"
wb
"
)
)
=
=
NULL
)
{
printf
(
"
G
.
711
:
Cannot
read
file
%
s
.
\
n
"
bitname
)
;
exit
(
1
)
;
}
}
if
(
(
inp
=
fopen
(
inname
"
rb
"
)
)
=
=
NULL
)
{
printf
(
"
G
.
711
:
Cannot
read
file
%
s
.
\
n
"
inname
)
;
exit
(
1
)
;
}
if
(
(
outp
=
fopen
(
outname
"
wb
"
)
)
=
=
NULL
)
{
printf
(
"
G
.
711
:
Cannot
write
file
%
s
.
\
n
"
outname
)
;
exit
(
1
)
;
}
printf
(
"
\
nInput
:
%
s
\
nOutput
:
%
s
\
n
"
inname
outname
)
;
if
(
argc
=
=
6
)
{
printf
(
"
\
nBitfile
:
%
s
\
n
"
bitname
)
;
}
starttime
=
clock
(
)
/
(
double
)
CLOCKS_PER_SEC_G711
;
framecnt
=
0
;
endfile
=
false
;
while
(
!
endfile
)
{
framecnt
+
+
;
endfile
=
readframe
(
shortdata
inp
framelength
)
;
if
(
!
strcmp
(
law
"
A
"
)
)
{
stream_len
=
WebRtcG711_EncodeA
(
shortdata
framelength
streamdata
)
;
if
(
argc
=
=
6
)
{
if
(
fwrite
(
streamdata
sizeof
(
unsigned
char
)
stream_len
bitp
)
!
=
stream_len
)
{
return
-
1
;
}
}
WebRtcG711_DecodeA
(
streamdata
stream_len
decoded
speechType
)
;
}
else
if
(
!
strcmp
(
law
"
u
"
)
)
{
stream_len
=
WebRtcG711_EncodeU
(
shortdata
framelength
streamdata
)
;
if
(
argc
=
=
6
)
{
if
(
fwrite
(
streamdata
sizeof
(
unsigned
char
)
stream_len
bitp
)
!
=
stream_len
)
{
return
-
1
;
}
}
WebRtcG711_DecodeU
(
streamdata
stream_len
decoded
speechType
)
;
}
else
{
printf
(
"
Wrong
law
mode
\
n
"
)
;
exit
(
1
)
;
}
if
(
fwrite
(
decoded
sizeof
(
short
)
framelength
outp
)
!
=
framelength
)
{
return
-
1
;
}
}
runtime
=
(
double
)
(
clock
(
)
/
(
double
)
CLOCKS_PER_SEC_G711
-
starttime
)
;
length_file
=
(
(
double
)
framecnt
*
(
double
)
framelength
/
8000
)
;
printf
(
"
\
n
\
nLength
of
speech
file
:
%
.
1f
s
\
n
"
length_file
)
;
printf
(
"
Time
to
run
G
.
711
:
%
.
2f
s
(
%
.
2f
%
%
of
realtime
)
\
n
\
n
"
runtime
(
100
*
runtime
/
length_file
)
)
;
printf
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
END
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
fclose
(
inp
)
;
fclose
(
outp
)
;
return
0
;
}
