#
ifndef
MODULES_AUDIO_CODING_CODECS_G722_AUDIO_DECODER_G722_H_
#
define
MODULES_AUDIO_CODING_CODECS_G722_AUDIO_DECODER_G722_H_
#
include
"
api
/
audio_codecs
/
audio_decoder
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
typedef
struct
WebRtcG722DecInst
G722DecInst
;
namespace
webrtc
{
class
AudioDecoderG722Impl
final
:
public
AudioDecoder
{
public
:
AudioDecoderG722Impl
(
)
;
~
AudioDecoderG722Impl
(
)
override
;
bool
HasDecodePlc
(
)
const
override
;
void
Reset
(
)
override
;
std
:
:
vector
<
ParseResult
>
ParsePayload
(
rtc
:
:
Buffer
&
&
payload
uint32_t
timestamp
)
override
;
int
PacketDuration
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
override
;
int
SampleRateHz
(
)
const
override
;
size_t
Channels
(
)
const
override
;
protected
:
int
DecodeInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
override
;
private
:
G722DecInst
*
dec_state_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
AudioDecoderG722Impl
)
;
}
;
class
AudioDecoderG722StereoImpl
final
:
public
AudioDecoder
{
public
:
AudioDecoderG722StereoImpl
(
)
;
~
AudioDecoderG722StereoImpl
(
)
override
;
void
Reset
(
)
override
;
std
:
:
vector
<
ParseResult
>
ParsePayload
(
rtc
:
:
Buffer
&
&
payload
uint32_t
timestamp
)
override
;
int
SampleRateHz
(
)
const
override
;
size_t
Channels
(
)
const
override
;
protected
:
int
DecodeInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
override
;
private
:
void
SplitStereoPacket
(
const
uint8_t
*
encoded
size_t
encoded_len
uint8_t
*
encoded_deinterleaved
)
;
G722DecInst
*
dec_state_left_
;
G722DecInst
*
dec_state_right_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
AudioDecoderG722StereoImpl
)
;
}
;
}
#
endif
