#
ifndef
MODULES_VIDEO_CAPTURE_VIDEO_CAPTURE_H_
#
define
MODULES_VIDEO_CAPTURE_VIDEO_CAPTURE_H_
#
include
"
api
/
video
/
video_rotation
.
h
"
#
include
"
api
/
video
/
video_sink_interface
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capture_types
.
h
"
#
include
"
modules
/
video_capture
/
raw_video_sink_interface
.
h
"
#
include
"
modules
/
video_capture
/
video_capture_defines
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
<
set
>
#
if
defined
(
ANDROID
)
#
include
<
jni
.
h
>
#
endif
namespace
webrtc
{
class
VideoInputFeedBack
{
public
:
virtual
void
OnDeviceChange
(
)
=
0
;
protected
:
virtual
~
VideoInputFeedBack
(
)
{
}
}
;
class
VideoCaptureModule
:
public
RefCountInterface
{
public
:
class
DeviceInfo
{
public
:
virtual
uint32_t
NumberOfDevices
(
)
=
0
;
virtual
int32_t
Refresh
(
)
=
0
;
virtual
void
DeviceChange
(
)
{
MutexLock
lock
(
&
_inputCallbacksMutex
)
;
for
(
auto
inputCallBack
:
_inputCallBacks
)
{
inputCallBack
-
>
OnDeviceChange
(
)
;
}
}
virtual
void
RegisterVideoInputFeedBack
(
VideoInputFeedBack
*
callBack
)
{
MutexLock
lock
(
&
_inputCallbacksMutex
)
;
_inputCallBacks
.
insert
(
callBack
)
;
}
virtual
void
DeRegisterVideoInputFeedBack
(
VideoInputFeedBack
*
callBack
)
{
MutexLock
lock
(
&
_inputCallbacksMutex
)
;
auto
it
=
_inputCallBacks
.
find
(
callBack
)
;
if
(
it
!
=
_inputCallBacks
.
end
(
)
)
{
_inputCallBacks
.
erase
(
it
)
;
}
}
virtual
int32_t
GetDeviceName
(
uint32_t
deviceNumber
char
*
deviceNameUTF8
uint32_t
deviceNameLength
char
*
deviceUniqueIdUTF8
uint32_t
deviceUniqueIdUTF8Length
char
*
productUniqueIdUTF8
=
0
uint32_t
productUniqueIdUTF8Length
=
0
pid_t
*
pid
=
0
bool
*
deviceIsPlaceholder
=
0
)
=
0
;
virtual
int32_t
NumberOfCapabilities
(
const
char
*
deviceUniqueIdUTF8
)
=
0
;
virtual
int32_t
GetCapability
(
const
char
*
deviceUniqueIdUTF8
uint32_t
deviceCapabilityNumber
VideoCaptureCapability
&
capability
)
=
0
;
virtual
int32_t
GetOrientation
(
const
char
*
deviceUniqueIdUTF8
VideoRotation
&
orientation
)
=
0
;
virtual
int32_t
GetBestMatchedCapability
(
const
char
*
deviceUniqueIdUTF8
const
VideoCaptureCapability
&
requested
VideoCaptureCapability
&
resulting
)
=
0
;
virtual
int32_t
DisplayCaptureSettingsDialogBox
(
const
char
*
deviceUniqueIdUTF8
const
char
*
dialogTitleUTF8
void
*
parentWindow
uint32_t
positionX
uint32_t
positionY
)
=
0
;
virtual
~
DeviceInfo
(
)
{
}
private
:
Mutex
_inputCallbacksMutex
;
std
:
:
set
<
VideoInputFeedBack
*
>
_inputCallBacks
RTC_GUARDED_BY
(
_inputCallbacksMutex
)
;
}
;
virtual
void
RegisterCaptureDataCallback
(
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
dataCallback
)
=
0
;
virtual
void
RegisterCaptureDataCallback
(
RawVideoSinkInterface
*
dataCallback
)
=
0
;
virtual
void
DeRegisterCaptureDataCallback
(
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
dataCallback
)
=
0
;
virtual
int32_t
StartCapture
(
const
VideoCaptureCapability
&
capability
)
=
0
;
virtual
int32_t
StopCaptureIfAllClientsClose
(
)
=
0
;
virtual
bool
FocusOnSelectedSource
(
)
{
return
false
;
}
virtual
int32_t
StopCapture
(
)
=
0
;
virtual
const
char
*
CurrentDeviceName
(
)
const
=
0
;
virtual
bool
CaptureStarted
(
)
=
0
;
virtual
int32_t
CaptureSettings
(
VideoCaptureCapability
&
settings
)
=
0
;
virtual
int32_t
SetCaptureRotation
(
VideoRotation
rotation
)
=
0
;
virtual
bool
SetApplyRotation
(
bool
enable
)
=
0
;
virtual
bool
GetApplyRotation
(
)
=
0
;
virtual
void
SetTrackingId
(
uint32_t
aTrackingIdProcId
)
{
}
protected
:
~
VideoCaptureModule
(
)
override
{
}
}
;
}
#
endif
