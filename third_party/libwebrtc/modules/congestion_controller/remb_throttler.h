#
ifndef
MODULES_CONGESTION_CONTROLLER_REMB_THROTTLER_H_
#
define
MODULES_CONGESTION_CONTROLLER_REMB_THROTTLER_H_
#
include
<
functional
>
#
include
<
vector
>
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
remote_estimator_proxy
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
namespace
webrtc
{
class
RembThrottler
:
public
RemoteBitrateObserver
{
public
:
using
RembSender
=
std
:
:
function
<
void
(
int64_t
bitrate_bps
std
:
:
vector
<
uint32_t
>
ssrcs
)
>
;
RembThrottler
(
RembSender
remb_sender
Clock
*
clock
)
;
void
SetMaxDesiredReceiveBitrate
(
DataRate
bitrate
)
;
void
OnReceiveBitrateChanged
(
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
uint32_t
bitrate_bps
)
override
;
private
:
const
RembSender
remb_sender_
;
Clock
*
const
clock_
;
mutable
Mutex
mutex_
;
Timestamp
last_remb_time_
RTC_GUARDED_BY
(
mutex_
)
;
DataRate
last_send_remb_bitrate_
RTC_GUARDED_BY
(
mutex_
)
;
DataRate
max_remb_bitrate_
RTC_GUARDED_BY
(
mutex_
)
;
}
;
}
#
endif
