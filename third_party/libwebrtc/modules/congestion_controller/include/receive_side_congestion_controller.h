#
ifndef
MODULES_CONGESTION_CONTROLLER_INCLUDE_RECEIVE_SIDE_CONGESTION_CONTROLLER_H_
#
define
MODULES_CONGESTION_CONTROLLER_INCLUDE_RECEIVE_SIDE_CONGESTION_CONTROLLER_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
transport
/
field_trial_based_config
.
h
"
#
include
"
api
/
transport
/
network_control
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
modules
/
congestion_controller
/
remb_throttler
.
h
"
#
include
"
modules
/
include
/
module
.
h
"
#
include
"
modules
/
pacing
/
packet_router
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
remote_estimator_proxy
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
namespace
webrtc
{
class
RemoteBitrateEstimator
;
class
RemoteBitrateObserver
;
class
ReceiveSideCongestionController
:
public
CallStatsObserver
public
Module
{
public
:
ReceiveSideCongestionController
(
Clock
*
clock
RemoteEstimatorProxy
:
:
TransportFeedbackSender
feedback_sender
RembThrottler
:
:
RembSender
remb_sender
NetworkStateEstimator
*
network_state_estimator
)
;
~
ReceiveSideCongestionController
(
)
override
{
}
virtual
void
OnReceivedPacket
(
int64_t
arrival_time_ms
size_t
payload_size
const
RTPHeader
&
header
)
;
void
SetSendPeriodicFeedback
(
bool
send_periodic_feedback
)
;
virtual
RemoteBitrateEstimator
*
GetRemoteBitrateEstimator
(
bool
send_side_bwe
)
;
virtual
const
RemoteBitrateEstimator
*
GetRemoteBitrateEstimator
(
bool
send_side_bwe
)
const
;
void
OnRttUpdate
(
int64_t
avg_rtt_ms
int64_t
max_rtt_ms
)
override
;
void
OnBitrateChanged
(
int
bitrate_bps
)
;
void
SetMaxDesiredReceiveBitrate
(
DataRate
bitrate
)
;
int64_t
TimeUntilNextProcess
(
)
override
;
void
Process
(
)
override
;
private
:
class
WrappingBitrateEstimator
:
public
RemoteBitrateEstimator
{
public
:
WrappingBitrateEstimator
(
RemoteBitrateObserver
*
observer
Clock
*
clock
)
;
WrappingBitrateEstimator
(
)
=
delete
;
WrappingBitrateEstimator
(
const
WrappingBitrateEstimator
&
)
=
delete
;
WrappingBitrateEstimator
&
operator
=
(
const
WrappingBitrateEstimator
&
)
=
delete
;
~
WrappingBitrateEstimator
(
)
override
;
void
IncomingPacket
(
int64_t
arrival_time_ms
size_t
payload_size
const
RTPHeader
&
header
)
override
;
void
Process
(
)
override
;
int64_t
TimeUntilNextProcess
(
)
override
;
void
OnRttUpdate
(
int64_t
avg_rtt_ms
int64_t
max_rtt_ms
)
override
;
void
RemoveStream
(
unsigned
int
ssrc
)
override
;
bool
LatestEstimate
(
std
:
:
vector
<
unsigned
int
>
*
ssrcs
unsigned
int
*
bitrate_bps
)
const
override
;
void
SetMinBitrate
(
int
min_bitrate_bps
)
override
;
private
:
void
PickEstimatorFromHeader
(
const
RTPHeader
&
header
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
void
PickEstimator
(
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
RemoteBitrateObserver
*
observer_
;
Clock
*
const
clock_
;
mutable
Mutex
mutex_
;
std
:
:
unique_ptr
<
RemoteBitrateEstimator
>
rbe_
;
bool
using_absolute_send_time_
;
uint32_t
packets_since_absolute_send_time_
;
int
min_bitrate_bps_
;
}
;
const
FieldTrialBasedConfig
field_trial_config_
;
RembThrottler
remb_throttler_
;
WrappingBitrateEstimator
remote_bitrate_estimator_
;
RemoteEstimatorProxy
remote_estimator_proxy_
;
}
;
}
#
endif
