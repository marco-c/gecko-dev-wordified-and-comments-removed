#
ifndef
MODULES_CONGESTION_CONTROLLER_RTP_TRANSPORT_FEEDBACK_DEMUXER_H_
#
define
MODULES_CONGESTION_CONTROLLER_RTP_TRANSPORT_FEEDBACK_DEMUXER_H_
#
include
<
cstdint
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
sequence_checker
.
h
"
#
include
"
api
/
transport
/
network_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
TransportFeedbackDemuxer
final
:
public
StreamFeedbackProvider
{
public
:
TransportFeedbackDemuxer
(
)
;
void
RegisterStreamFeedbackObserver
(
std
:
:
vector
<
uint32_t
>
ssrcs
StreamFeedbackObserver
*
observer
)
override
;
void
DeRegisterStreamFeedbackObserver
(
StreamFeedbackObserver
*
observer
)
override
;
void
OnTransportFeedback
(
const
TransportPacketsFeedback
&
feedback
)
;
private
:
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
observer_checker_
;
std
:
:
vector
<
std
:
:
pair
<
std
:
:
vector
<
uint32_t
>
StreamFeedbackObserver
*
>
>
observers_
RTC_GUARDED_BY
(
&
observer_checker_
)
;
}
;
}
#
endif
