#
ifndef
MODULES_CONGESTION_CONTROLLER_RTP_TRANSPORT_FEEDBACK_ADAPTER_H_
#
define
MODULES_CONGESTION_CONTROLLER_RTP_TRANSPORT_FEEDBACK_ADAPTER_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
map
>
#
include
<
optional
>
#
include
<
tuple
>
#
include
<
vector
>
#
include
"
api
/
transport
/
network_types
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
congestion_control_feedback
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_to_send
.
h
"
#
include
"
rtc_base
/
network
/
sent_packet
.
h
"
#
include
"
rtc_base
/
network_route
.
h
"
#
include
"
rtc_base
/
numerics
/
sequence_number_unwrapper
.
h
"
namespace
webrtc
{
struct
PacketFeedback
{
PacketFeedback
(
)
=
default
;
Timestamp
creation_time
=
Timestamp
:
:
MinusInfinity
(
)
;
SentPacket
sent
;
NetworkRoute
network_route
;
uint32_t
ssrc
=
0
;
uint16_t
rtp_sequence_number
=
0
;
bool
is_retransmission
=
false
;
}
;
class
InFlightBytesTracker
{
public
:
void
AddInFlightPacketBytes
(
const
PacketFeedback
&
packet
)
;
void
RemoveInFlightPacketBytes
(
const
PacketFeedback
&
packet
)
;
DataSize
GetOutstandingData
(
const
NetworkRoute
&
network_route
)
const
;
private
:
struct
NetworkRouteComparator
{
bool
operator
(
)
(
const
NetworkRoute
&
a
const
NetworkRoute
&
b
)
const
;
}
;
std
:
:
map
<
NetworkRoute
DataSize
NetworkRouteComparator
>
in_flight_data_
;
}
;
class
TransportFeedbackAdapter
{
public
:
TransportFeedbackAdapter
(
)
;
void
AddPacket
(
const
RtpPacketToSend
&
packet
const
PacedPacketInfo
&
pacing_info
size_t
overhead_bytes
Timestamp
creation_time
)
;
std
:
:
optional
<
SentPacket
>
ProcessSentPacket
(
const
SentPacketInfo
&
sent_packet
)
;
std
:
:
optional
<
TransportPacketsFeedback
>
ProcessTransportFeedback
(
const
rtcp
:
:
TransportFeedback
&
feedback
Timestamp
feedback_receive_time
)
;
std
:
:
optional
<
TransportPacketsFeedback
>
ProcessCongestionControlFeedback
(
const
rtcp
:
:
CongestionControlFeedback
&
feedback
Timestamp
feedback_receive_time
)
;
void
SetNetworkRoute
(
const
NetworkRoute
&
network_route
)
;
DataSize
GetOutstandingData
(
)
const
;
private
:
enum
class
SendTimeHistoryStatus
{
kNotAdded
kOk
kDuplicate
}
;
struct
SsrcAndRtpSequencenumber
{
uint32_t
ssrc
;
uint16_t
rtp_sequence_number
;
bool
operator
<
(
const
SsrcAndRtpSequencenumber
&
other
)
const
{
return
std
:
:
tie
(
ssrc
rtp_sequence_number
)
<
std
:
:
tie
(
other
.
ssrc
other
.
rtp_sequence_number
)
;
}
}
;
std
:
:
optional
<
PacketFeedback
>
RetrievePacketFeedback
(
int64_t
transport_seq_num
bool
received
)
;
std
:
:
optional
<
PacketFeedback
>
RetrievePacketFeedback
(
const
SsrcAndRtpSequencenumber
&
key
bool
received
)
;
std
:
:
optional
<
TransportPacketsFeedback
>
ToTransportFeedback
(
std
:
:
vector
<
PacketResult
>
packet_results
Timestamp
feedback_receive_time
bool
supports_ecn
)
;
DataSize
pending_untracked_size_
=
DataSize
:
:
Zero
(
)
;
Timestamp
last_send_time_
=
Timestamp
:
:
MinusInfinity
(
)
;
Timestamp
last_untracked_send_time_
=
Timestamp
:
:
MinusInfinity
(
)
;
RtpSequenceNumberUnwrapper
seq_num_unwrapper_
;
int64_t
last_ack_seq_num_
=
-
1
;
InFlightBytesTracker
in_flight_
;
NetworkRoute
network_route_
;
Timestamp
current_offset_
=
Timestamp
:
:
MinusInfinity
(
)
;
Timestamp
last_transport_feedback_base_time_
=
Timestamp
:
:
MinusInfinity
(
)
;
std
:
:
optional
<
uint32_t
>
last_feedback_compact_ntp_time_
;
std
:
:
map
<
SsrcAndRtpSequencenumber
int64_t
>
rtp_to_transport_sequence_number_
;
std
:
:
map
<
int64_t
PacketFeedback
>
history_
;
}
;
}
#
endif
