#
ifndef
MODULES_CONGESTION_CONTROLLER_RTP_CONTROL_HANDLER_H_
#
define
MODULES_CONGESTION_CONTROLLER_RTP_CONTROL_HANDLER_H_
#
include
<
stdint
.
h
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
transport
/
network_types
.
h
"
#
include
"
api
/
units
/
data_size
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
modules
/
pacing
/
paced_sender
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
#
include
"
rtc_base
/
synchronization
/
sequence_checker
.
h
"
namespace
webrtc
{
class
CongestionControlHandler
{
public
:
CongestionControlHandler
(
)
;
~
CongestionControlHandler
(
)
;
void
SetTargetRate
(
TargetTransferRate
new_target_rate
)
;
void
SetNetworkAvailability
(
bool
network_available
)
;
void
SetPacerQueue
(
TimeDelta
expected_queue_time
)
;
absl
:
:
optional
<
TargetTransferRate
>
GetUpdate
(
)
;
private
:
absl
:
:
optional
<
TargetTransferRate
>
last_incoming_
;
absl
:
:
optional
<
TargetTransferRate
>
last_reported_
;
bool
network_available_
=
true
;
bool
encoder_paused_in_last_report_
=
false
;
const
bool
disable_pacer_emergency_stop_
;
int64_t
pacer_expected_queue_ms_
=
0
;
SequenceChecker
sequenced_checker_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
CongestionControlHandler
)
;
}
;
}
#
endif
