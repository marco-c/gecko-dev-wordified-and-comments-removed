#
include
"
modules
/
congestion_controller
/
goog_cc
/
delay_based_bwe
.
h
"
#
include
<
cstdint
>
#
include
"
api
/
transport
/
bandwidth_usage
.
h
"
#
include
"
api
/
transport
/
network_types
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
modules
/
congestion_controller
/
goog_cc
/
delay_based_bwe_unittest_helper
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
int
kNumProbesCluster0
=
5
;
constexpr
int
kNumProbesCluster1
=
8
;
const
PacedPacketInfo
kPacingInfo0
(
0
kNumProbesCluster0
2000
)
;
const
PacedPacketInfo
kPacingInfo1
(
1
kNumProbesCluster1
4000
)
;
constexpr
float
kTargetUtilizationFraction
=
0
.
95f
;
}
TEST_F
(
DelayBasedBweTest
ProbeDetection
)
{
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
for
(
int
i
=
0
;
i
<
kNumProbesCluster0
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
10
)
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingFeedback
(
now_ms
now_ms
1000
kPacingInfo0
)
;
}
EXPECT_TRUE
(
bitrate_observer_
.
updated
(
)
)
;
for
(
int
i
=
0
;
i
<
kNumProbesCluster1
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
5
)
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingFeedback
(
now_ms
now_ms
1000
kPacingInfo1
)
;
}
EXPECT_TRUE
(
bitrate_observer_
.
updated
(
)
)
;
EXPECT_GT
(
bitrate_observer_
.
latest_bitrate
(
)
1500000u
)
;
}
TEST_F
(
DelayBasedBweTest
ProbeDetectionNonPacedPackets
)
{
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
for
(
int
i
=
0
;
i
<
kNumProbesCluster0
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
5
)
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingFeedback
(
now_ms
now_ms
1000
kPacingInfo0
)
;
clock_
.
AdvanceTimeMilliseconds
(
5
)
;
IncomingFeedback
(
now_ms
now_ms
100
PacedPacketInfo
(
)
)
;
}
EXPECT_TRUE
(
bitrate_observer_
.
updated
(
)
)
;
EXPECT_GT
(
bitrate_observer_
.
latest_bitrate
(
)
800000u
)
;
}
TEST_F
(
DelayBasedBweTest
ProbeDetectionFasterArrival
)
{
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
int64_t
send_time_ms
=
0
;
for
(
int
i
=
0
;
i
<
kNumProbesCluster0
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
send_time_ms
+
=
10
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingFeedback
(
now_ms
send_time_ms
1000
kPacingInfo0
)
;
}
EXPECT_FALSE
(
bitrate_observer_
.
updated
(
)
)
;
}
TEST_F
(
DelayBasedBweTest
ProbeDetectionSlowerArrival
)
{
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
int64_t
send_time_ms
=
0
;
for
(
int
i
=
0
;
i
<
kNumProbesCluster1
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
7
)
;
send_time_ms
+
=
5
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingFeedback
(
now_ms
send_time_ms
1000
kPacingInfo1
)
;
}
EXPECT_TRUE
(
bitrate_observer_
.
updated
(
)
)
;
EXPECT_NEAR
(
bitrate_observer_
.
latest_bitrate
(
)
kTargetUtilizationFraction
*
1140000u
10000u
)
;
}
TEST_F
(
DelayBasedBweTest
ProbeDetectionSlowerArrivalHighBitrate
)
{
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
int64_t
send_time_ms
=
0
;
for
(
int
i
=
0
;
i
<
kNumProbesCluster1
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
2
)
;
send_time_ms
+
=
1
;
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
IncomingFeedback
(
now_ms
send_time_ms
1000
kPacingInfo1
)
;
}
EXPECT_TRUE
(
bitrate_observer_
.
updated
(
)
)
;
EXPECT_NEAR
(
bitrate_observer_
.
latest_bitrate
(
)
kTargetUtilizationFraction
*
4000000u
10000u
)
;
}
TEST_F
(
DelayBasedBweTest
GetExpectedBwePeriodMs
)
{
auto
default_interval
=
bitrate_estimator_
-
>
GetExpectedBwePeriod
(
)
;
EXPECT_GT
(
default_interval
.
ms
(
)
0
)
;
CapacityDropTestHelper
(
1
true
533
0
)
;
auto
interval
=
bitrate_estimator_
-
>
GetExpectedBwePeriod
(
)
;
EXPECT_GT
(
interval
.
ms
(
)
0
)
;
EXPECT_NE
(
interval
.
ms
(
)
default_interval
.
ms
(
)
)
;
}
TEST_F
(
DelayBasedBweTest
InitialBehavior
)
{
InitialBehaviorTestHelper
(
730000
)
;
}
TEST_F
(
DelayBasedBweTest
InitializeResult
)
{
DelayBasedBwe
:
:
Result
result
;
EXPECT_EQ
(
result
.
delay_detector_state
BandwidthUsage
:
:
kBwNormal
)
;
}
TEST_F
(
DelayBasedBweTest
RateIncreaseReordering
)
{
RateIncreaseReorderingTestHelper
(
730000
)
;
}
TEST_F
(
DelayBasedBweTest
RateIncreaseRtpTimestamps
)
{
RateIncreaseRtpTimestampsTestHelper
(
617
)
;
}
TEST_F
(
DelayBasedBweTest
CapacityDropOneStream
)
{
CapacityDropTestHelper
(
1
false
500
0
)
;
}
TEST_F
(
DelayBasedBweTest
CapacityDropPosOffsetChange
)
{
CapacityDropTestHelper
(
1
false
867
30000
)
;
}
TEST_F
(
DelayBasedBweTest
CapacityDropNegOffsetChange
)
{
CapacityDropTestHelper
(
1
false
933
-
30000
)
;
}
TEST_F
(
DelayBasedBweTest
CapacityDropOneStreamWrap
)
{
CapacityDropTestHelper
(
1
true
533
0
)
;
}
TEST_F
(
DelayBasedBweTest
TestTimestampGrouping
)
{
TestTimestampGroupingTestHelper
(
)
;
}
TEST_F
(
DelayBasedBweTest
TestShortTimeoutAndWrap
)
{
TestWrappingHelper
(
35
)
;
}
TEST_F
(
DelayBasedBweTest
TestLongTimeoutAndWrap
)
{
TestWrappingHelper
(
10
*
64
)
;
}
TEST_F
(
DelayBasedBweTest
TestInitialOveruse
)
{
const
DataRate
kStartBitrate
=
DataRate
:
:
KilobitsPerSec
(
300
)
;
const
DataRate
kInitialCapacity
=
DataRate
:
:
KilobitsPerSec
(
200
)
;
const
uint32_t
kDummySsrc
=
0
;
const
int
kFps
=
90
;
stream_generator_
-
>
AddStream
(
new
test
:
:
RtpStream
(
kFps
kStartBitrate
.
bps
(
)
)
)
;
stream_generator_
-
>
set_capacity_bps
(
kInitialCapacity
.
bps
(
)
)
;
bitrate_estimator_
-
>
SetStartBitrate
(
kStartBitrate
)
;
int64_t
bitrate_bps
=
kStartBitrate
.
bps
(
)
;
bool
seen_overuse
=
false
;
for
(
int
i
=
0
;
i
<
40
;
+
+
i
)
{
bool
overuse
=
GenerateAndProcessFrame
(
kDummySsrc
bitrate_bps
)
;
if
(
overuse
)
{
EXPECT_TRUE
(
bitrate_observer_
.
updated
(
)
)
;
EXPECT_LE
(
bitrate_observer_
.
latest_bitrate
(
)
kInitialCapacity
.
bps
(
)
)
;
EXPECT_GT
(
bitrate_observer_
.
latest_bitrate
(
)
0
.
8
*
kInitialCapacity
.
bps
(
)
)
;
bitrate_bps
=
bitrate_observer_
.
latest_bitrate
(
)
;
seen_overuse
=
true
;
break
;
}
else
if
(
bitrate_observer_
.
updated
(
)
)
{
bitrate_bps
=
bitrate_observer_
.
latest_bitrate
(
)
;
bitrate_observer_
.
Reset
(
)
;
}
}
EXPECT_TRUE
(
seen_overuse
)
;
EXPECT_LE
(
bitrate_observer_
.
latest_bitrate
(
)
kInitialCapacity
.
bps
(
)
)
;
EXPECT_GT
(
bitrate_observer_
.
latest_bitrate
(
)
0
.
8
*
kInitialCapacity
.
bps
(
)
)
;
}
TEST_F
(
DelayBasedBweTest
TestTimestampPrecisionHandling
)
{
uint32_t
last_bitrate
=
bitrate_observer_
.
latest_bitrate
(
)
;
for
(
int
i
=
0
;
i
<
1000
;
+
+
i
)
{
clock_
.
AdvanceTimeMicroseconds
(
500
)
;
IncomingFeedback
(
clock_
.
CurrentTime
(
)
clock_
.
CurrentTime
(
)
-
TimeDelta
:
:
Micros
(
500
)
1000
PacedPacketInfo
(
)
)
;
clock_
.
AdvanceTimeMicroseconds
(
9500
)
;
IncomingFeedback
(
clock_
.
CurrentTime
(
)
clock_
.
CurrentTime
(
)
-
TimeDelta
:
:
Micros
(
250
)
1000
PacedPacketInfo
(
)
)
;
clock_
.
AdvanceTimeMicroseconds
(
10000
)
;
EXPECT_LE
(
last_bitrate
bitrate_observer_
.
latest_bitrate
(
)
)
;
last_bitrate
=
bitrate_observer_
.
latest_bitrate
(
)
;
}
}
}
