#
ifndef
MODULES_CONGESTION_CONTROLLER_GOOG_CC_PROBE_BITRATE_ESTIMATOR_H_
#
define
MODULES_CONGESTION_CONTROLLER_GOOG_CC_PROBE_BITRATE_ESTIMATOR_H_
#
include
<
limits
>
#
include
<
map
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
transport
/
network_types
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
namespace
webrtc
{
class
RtcEventLog
;
class
ProbeBitrateEstimator
{
public
:
explicit
ProbeBitrateEstimator
(
RtcEventLog
*
event_log
)
;
~
ProbeBitrateEstimator
(
)
;
absl
:
:
optional
<
DataRate
>
HandleProbeAndEstimateBitrate
(
const
PacketResult
&
packet_feedback
)
;
absl
:
:
optional
<
DataRate
>
FetchAndResetLastEstimatedBitrate
(
)
;
private
:
struct
AggregatedCluster
{
int
num_probes
=
0
;
Timestamp
first_send
=
Timestamp
:
:
PlusInfinity
(
)
;
Timestamp
last_send
=
Timestamp
:
:
MinusInfinity
(
)
;
Timestamp
first_receive
=
Timestamp
:
:
PlusInfinity
(
)
;
Timestamp
last_receive
=
Timestamp
:
:
MinusInfinity
(
)
;
DataSize
size_last_send
=
DataSize
:
:
Zero
(
)
;
DataSize
size_first_receive
=
DataSize
:
:
Zero
(
)
;
DataSize
size_total
=
DataSize
:
:
Zero
(
)
;
}
;
void
EraseOldClusters
(
Timestamp
timestamp
)
;
std
:
:
map
<
int
AggregatedCluster
>
clusters_
;
RtcEventLog
*
const
event_log_
;
absl
:
:
optional
<
DataRate
>
estimated_data_rate_
;
}
;
}
#
endif
