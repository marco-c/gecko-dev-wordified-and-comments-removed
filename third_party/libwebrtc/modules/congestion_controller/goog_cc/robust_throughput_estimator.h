#
ifndef
MODULES_CONGESTION_CONTROLLER_GOOG_CC_ROBUST_THROUGHPUT_ESTIMATOR_H_
#
define
MODULES_CONGESTION_CONTROLLER_GOOG_CC_ROBUST_THROUGHPUT_ESTIMATOR_H_
#
include
<
deque
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
transport
/
network_types
.
h
"
#
include
"
api
/
units
/
data_rate
.
h
"
#
include
"
modules
/
congestion_controller
/
goog_cc
/
acknowledged_bitrate_estimator_interface
.
h
"
namespace
webrtc
{
class
RobustThroughputEstimator
:
public
AcknowledgedBitrateEstimatorInterface
{
public
:
explicit
RobustThroughputEstimator
(
const
RobustThroughputEstimatorSettings
&
settings
)
;
~
RobustThroughputEstimator
(
)
override
;
void
IncomingPacketFeedbackVector
(
const
std
:
:
vector
<
PacketResult
>
&
packet_feedback_vector
)
override
;
absl
:
:
optional
<
DataRate
>
bitrate
(
)
const
override
;
absl
:
:
optional
<
DataRate
>
PeekRate
(
)
const
override
{
return
bitrate
(
)
;
}
void
SetAlr
(
bool
)
override
{
}
void
SetAlrEndedTime
(
Timestamp
)
override
{
}
private
:
const
RobustThroughputEstimatorSettings
settings_
;
std
:
:
deque
<
PacketResult
>
window_
;
}
;
}
#
endif
