#
ifndef
MODULES_RTP_RTCP_INCLUDE_RTP_HEADER_EXTENSION_MAP_H_
#
define
MODULES_RTP_RTCP_INCLUDE_RTP_HEADER_EXTENSION_MAP_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
class
RtpHeaderExtensionMap
{
public
:
static
constexpr
RTPExtensionType
kInvalidType
=
kRtpExtensionNone
;
static
constexpr
int
kInvalidId
=
0
;
RtpHeaderExtensionMap
(
)
;
explicit
RtpHeaderExtensionMap
(
bool
extmap_allow_mixed
)
;
explicit
RtpHeaderExtensionMap
(
rtc
:
:
ArrayView
<
const
RtpExtension
>
extensions
)
;
void
Reset
(
rtc
:
:
ArrayView
<
const
RtpExtension
>
extensions
)
;
template
<
typename
Extension
>
bool
Register
(
int
id
)
{
return
Register
(
id
Extension
:
:
kId
Extension
:
:
Uri
(
)
)
;
}
bool
RegisterByType
(
int
id
RTPExtensionType
type
)
;
bool
RegisterByUri
(
int
id
absl
:
:
string_view
uri
)
;
bool
IsRegistered
(
RTPExtensionType
type
)
const
{
return
GetId
(
type
)
!
=
kInvalidId
;
}
RTPExtensionType
GetType
(
int
id
)
const
;
uint8_t
GetId
(
RTPExtensionType
type
)
const
{
RTC_DCHECK_GT
(
type
kRtpExtensionNone
)
;
RTC_DCHECK_LT
(
type
kRtpExtensionNumberOfExtensions
)
;
return
ids_
[
type
]
;
}
int32_t
Deregister
(
RTPExtensionType
type
)
;
void
Deregister
(
absl
:
:
string_view
uri
)
;
bool
ExtmapAllowMixed
(
)
const
{
return
extmap_allow_mixed_
;
}
void
SetExtmapAllowMixed
(
bool
extmap_allow_mixed
)
{
extmap_allow_mixed_
=
extmap_allow_mixed
;
}
private
:
bool
Register
(
int
id
RTPExtensionType
type
absl
:
:
string_view
uri
)
;
uint8_t
ids_
[
kRtpExtensionNumberOfExtensions
]
;
bool
extmap_allow_mixed_
;
}
;
}
#
endif
