#
ifndef
MODULES_RTP_RTCP_INCLUDE_RTCP_STATISTICS_H_
#
define
MODULES_RTP_RTCP_INCLUDE_RTCP_STATISTICS_H_
#
include
<
stdint
.
h
>
#
include
"
absl
/
strings
/
string_view
.
h
"
namespace
webrtc
{
struct
RtcpPacketTypeCounter
{
RtcpPacketTypeCounter
(
)
:
nack_packets
(
0
)
fir_packets
(
0
)
pli_packets
(
0
)
nack_requests
(
0
)
unique_nack_requests
(
0
)
{
}
void
Add
(
const
RtcpPacketTypeCounter
&
other
)
{
nack_packets
+
=
other
.
nack_packets
;
fir_packets
+
=
other
.
fir_packets
;
pli_packets
+
=
other
.
pli_packets
;
nack_requests
+
=
other
.
nack_requests
;
unique_nack_requests
+
=
other
.
unique_nack_requests
;
}
void
Subtract
(
const
RtcpPacketTypeCounter
&
other
)
{
nack_packets
-
=
other
.
nack_packets
;
fir_packets
-
=
other
.
fir_packets
;
pli_packets
-
=
other
.
pli_packets
;
nack_requests
-
=
other
.
nack_requests
;
unique_nack_requests
-
=
other
.
unique_nack_requests
;
}
int
UniqueNackRequestsInPercent
(
)
const
{
if
(
nack_requests
=
=
0
)
{
return
0
;
}
return
static_cast
<
int
>
(
(
unique_nack_requests
*
100
.
0f
/
nack_requests
)
+
0
.
5f
)
;
}
uint32_t
nack_packets
;
uint32_t
fir_packets
;
uint32_t
pli_packets
;
uint32_t
nack_requests
;
uint32_t
unique_nack_requests
;
}
;
class
RtcpPacketTypeCounterObserver
{
public
:
virtual
~
RtcpPacketTypeCounterObserver
(
)
{
}
virtual
void
RtcpPacketTypesCounterUpdated
(
uint32_t
ssrc
const
RtcpPacketTypeCounter
&
packet_counter
)
=
0
;
}
;
class
RtcpCnameCallback
{
public
:
virtual
~
RtcpCnameCallback
(
)
=
default
;
virtual
void
OnCname
(
uint32_t
ssrc
absl
:
:
string_view
cname
)
=
0
;
}
;
}
#
endif
