#
ifndef
MODULES_RTP_RTCP_INCLUDE_RTP_RTCP_H_
#
define
MODULES_RTP_RTCP_INCLUDE_RTP_RTCP_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
modules
/
include
/
module
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_rtcp_interface
.
h
"
#
include
"
rtc_base
/
deprecation
.
h
"
namespace
webrtc
{
class
RtpRtcp
:
public
Module
public
RtpRtcpInterface
{
public
:
static
std
:
:
unique_ptr
<
RtpRtcp
>
RTC_DEPRECATED
Create
(
const
Configuration
&
configuration
)
{
return
DEPRECATED_Create
(
configuration
)
;
}
static
std
:
:
unique_ptr
<
RtpRtcp
>
DEPRECATED_Create
(
const
Configuration
&
configuration
)
;
RTC_DEPRECATED
virtual
bool
TMMBR
(
)
const
=
0
;
RTC_DEPRECATED
virtual
void
SetTMMBRStatus
(
bool
enable
)
=
0
;
RTC_DEPRECATED
virtual
int32_t
AddMixedCNAME
(
uint32_t
ssrc
const
char
*
cname
)
=
0
;
RTC_DEPRECATED
virtual
int32_t
RemoveMixedCNAME
(
uint32_t
ssrc
)
=
0
;
RTC_DEPRECATED
virtual
int32_t
RemoteCNAME
(
uint32_t
remote_ssrc
char
cname
[
RTCP_CNAME_SIZE
]
)
const
=
0
;
RTC_DEPRECATED
virtual
int32_t
RegisterSendRtpHeaderExtension
(
RTPExtensionType
type
uint8_t
id
)
=
0
;
RTC_DEPRECATED
virtual
int32_t
SetRTCPApplicationSpecificData
(
uint8_t
sub_type
uint32_t
name
const
uint8_t
*
data
uint16_t
length
)
=
0
;
RTC_DEPRECATED
virtual
int32_t
DataCountersRTP
(
size_t
*
bytes_sent
uint32_t
*
packets_sent
)
const
=
0
;
virtual
void
RemoteRTCPSenderInfo
(
uint32_t
*
packet_count
uint32_t
*
octet_count
NtpTime
*
ntp_timestamp
)
const
=
0
;
void
SendPictureLossIndication
(
)
{
SendRTCP
(
kRtcpPli
)
;
}
void
SendFullIntraRequest
(
)
{
SendRTCP
(
kRtcpFir
)
;
}
}
;
}
#
endif
