#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_header_extension_size
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_header_extension_map
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_header_extensions
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
{
using
:
:
webrtc
:
:
RtpExtensionSize
;
using
:
:
webrtc
:
:
RtpHeaderExtensionMap
;
using
:
:
webrtc
:
:
RtpHeaderExtensionSize
;
using
:
:
webrtc
:
:
RtpMid
;
using
:
:
webrtc
:
:
RtpStreamId
;
constexpr
int
kId
=
1
;
constexpr
int
kIdForceTwoByteHeader
=
15
;
TEST
(
RtpHeaderExtensionSizeTest
ReturnsZeroIfNoExtensionsAreRegistered
)
{
constexpr
RtpExtensionSize
kExtensionSizes
[
]
=
{
{
RtpMid
:
:
kId
3
}
}
;
RtpHeaderExtensionMap
registered
;
registered
.
Register
<
RtpStreamId
>
(
kId
)
;
EXPECT_EQ
(
RtpHeaderExtensionSize
(
kExtensionSizes
registered
)
0
)
;
}
TEST
(
RtpHeaderExtensionSizeTest
IncludesSizeOfExtensionHeaders
)
{
constexpr
RtpExtensionSize
kExtensionSizes
[
]
=
{
{
RtpMid
:
:
kId
3
}
}
;
RtpHeaderExtensionMap
registered
;
registered
.
Register
<
RtpMid
>
(
kId
)
;
EXPECT_EQ
(
RtpHeaderExtensionSize
(
kExtensionSizes
registered
)
8
)
;
}
TEST
(
RtpHeaderExtensionSizeTest
RoundsUpTo32bitAlignmant
)
{
constexpr
RtpExtensionSize
kExtensionSizes
[
]
=
{
{
RtpMid
:
:
kId
5
}
}
;
RtpHeaderExtensionMap
registered
;
registered
.
Register
<
RtpMid
>
(
kId
)
;
EXPECT_EQ
(
RtpHeaderExtensionSize
(
kExtensionSizes
registered
)
12
)
;
}
TEST
(
RtpHeaderExtensionSizeTest
SumsSeveralExtensions
)
{
constexpr
RtpExtensionSize
kExtensionSizes
[
]
=
{
{
RtpMid
:
:
kId
16
}
{
RtpStreamId
:
:
kId
2
}
}
;
RtpHeaderExtensionMap
registered
;
registered
.
Register
<
RtpMid
>
(
kId
)
;
registered
.
Register
<
RtpStreamId
>
(
14
)
;
EXPECT_EQ
(
RtpHeaderExtensionSize
(
kExtensionSizes
registered
)
24
)
;
}
TEST
(
RtpHeaderExtensionSizeTest
LargeIdForce2BytesHeader
)
{
constexpr
RtpExtensionSize
kExtensionSizes
[
]
=
{
{
RtpMid
:
:
kId
3
}
{
RtpStreamId
:
:
kId
2
}
}
;
RtpHeaderExtensionMap
registered
;
registered
.
Register
<
RtpMid
>
(
kId
)
;
registered
.
Register
<
RtpStreamId
>
(
kIdForceTwoByteHeader
)
;
EXPECT_EQ
(
RtpHeaderExtensionSize
(
kExtensionSizes
registered
)
16
)
;
}
TEST
(
RtpHeaderExtensionSizeTest
LargeValueForce2BytesHeader
)
{
constexpr
RtpExtensionSize
kExtensionSizes
[
]
=
{
{
RtpMid
:
:
kId
17
}
{
RtpStreamId
:
:
kId
4
}
}
;
RtpHeaderExtensionMap
registered
;
registered
.
Register
<
RtpMid
>
(
1
)
;
registered
.
Register
<
RtpStreamId
>
(
2
)
;
EXPECT_EQ
(
RtpHeaderExtensionSize
(
kExtensionSizes
registered
)
32
)
;
}
}
