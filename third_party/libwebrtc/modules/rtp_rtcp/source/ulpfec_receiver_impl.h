#
ifndef
MODULES_RTP_RTCP_SOURCE_ULPFEC_RECEIVER_IMPL_H_
#
define
MODULES_RTP_RTCP_SOURCE_ULPFEC_RECEIVER_IMPL_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_header_extension_map
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
ulpfec_receiver
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
forward_error_correction
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
namespace
webrtc
{
class
UlpfecReceiverImpl
:
public
UlpfecReceiver
{
public
:
explicit
UlpfecReceiverImpl
(
uint32_t
ssrc
RecoveredPacketReceiver
*
callback
rtc
:
:
ArrayView
<
const
RtpExtension
>
extensions
)
;
~
UlpfecReceiverImpl
(
)
override
;
bool
AddReceivedRedPacket
(
const
RtpPacketReceived
&
rtp_packet
uint8_t
ulpfec_payload_type
)
override
;
int32_t
ProcessReceivedFec
(
)
override
;
FecPacketCounter
GetPacketCounter
(
)
const
override
;
private
:
const
uint32_t
ssrc_
;
const
RtpHeaderExtensionMap
extensions_
;
mutable
Mutex
mutex_
;
RecoveredPacketReceiver
*
recovered_packet_callback_
;
std
:
:
unique_ptr
<
ForwardErrorCorrection
>
fec_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
ForwardErrorCorrection
:
:
ReceivedPacket
>
>
received_packets_
;
ForwardErrorCorrection
:
:
RecoveredPacketList
recovered_packets_
;
FecPacketCounter
packet_counter_
;
}
;
}
#
endif
