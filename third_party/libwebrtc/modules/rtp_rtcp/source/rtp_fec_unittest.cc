#
include
<
list
>
#
include
<
memory
>
#
include
"
absl
/
algorithm
/
container
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
byte_io
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
fec_test_helper
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
flexfec_03_header_reader_writer
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
forward_error_correction
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
ulpfec_header_reader_writer
.
h
"
#
include
"
rtc_base
/
random
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
size_t
kTransportOverhead
=
28
;
constexpr
uint32_t
kMediaSsrc
=
83542
;
constexpr
uint32_t
kFlexfecSsrc
=
43245
;
constexpr
size_t
kMaxMediaPackets
=
48
;
void
DeepCopyEveryNthPacket
(
const
ForwardErrorCorrection
:
:
PacketList
&
src
int
n
ForwardErrorCorrection
:
:
PacketList
*
dst
)
{
RTC_DCHECK_GT
(
n
0
)
;
int
i
=
0
;
for
(
const
auto
&
packet
:
src
)
{
if
(
i
%
n
=
=
0
)
{
dst
-
>
emplace_back
(
new
ForwardErrorCorrection
:
:
Packet
(
*
packet
)
)
;
}
+
+
i
;
}
}
}
using
:
:
testing
:
:
Types
;
template
<
typename
ForwardErrorCorrectionType
>
class
RtpFecTest
:
public
:
:
testing
:
:
Test
{
protected
:
RtpFecTest
(
)
:
random_
(
0xabcdef123456
)
media_packet_generator_
(
kRtpHeaderSize
IP_PACKET_SIZE
-
kRtpHeaderSize
-
kTransportOverhead
-
fec_
.
MaxPacketOverhead
(
)
kMediaSsrc
&
random_
)
{
}
void
NetworkReceivedPackets
(
int
*
media_loss_mask
int
*
fec_loss_mask
)
;
template
<
typename
T
>
void
ReceivedPackets
(
const
T
&
packet_list
int
*
loss_mask
bool
is_fec
)
;
bool
IsRecoveryComplete
(
)
;
ForwardErrorCorrectionType
fec_
;
Random
random_
;
test
:
:
fec
:
:
MediaPacketGenerator
media_packet_generator_
;
ForwardErrorCorrection
:
:
PacketList
media_packets_
;
std
:
:
list
<
ForwardErrorCorrection
:
:
Packet
*
>
generated_fec_packets_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
ForwardErrorCorrection
:
:
ReceivedPacket
>
>
received_packets_
;
ForwardErrorCorrection
:
:
RecoveredPacketList
recovered_packets_
;
int
media_loss_mask_
[
kUlpfecMaxMediaPackets
]
;
int
fec_loss_mask_
[
kUlpfecMaxMediaPackets
]
;
}
;
template
<
typename
ForwardErrorCorrectionType
>
void
RtpFecTest
<
ForwardErrorCorrectionType
>
:
:
NetworkReceivedPackets
(
int
*
media_loss_mask
int
*
fec_loss_mask
)
{
constexpr
bool
kFecPacket
=
true
;
this
-
>
received_packets_
.
clear
(
)
;
ReceivedPackets
(
media_packets_
media_loss_mask
!
kFecPacket
)
;
ReceivedPackets
(
generated_fec_packets_
fec_loss_mask
kFecPacket
)
;
}
template
<
typename
ForwardErrorCorrectionType
>
template
<
typename
PacketListType
>
void
RtpFecTest
<
ForwardErrorCorrectionType
>
:
:
ReceivedPackets
(
const
PacketListType
&
packet_list
int
*
loss_mask
bool
is_fec
)
{
uint16_t
fec_seq_num
=
ForwardErrorCorrectionType
:
:
GetFirstFecSeqNum
(
media_packet_generator_
.
GetNextSeqNum
(
)
)
;
int
packet_idx
=
0
;
for
(
const
auto
&
packet
:
packet_list
)
{
if
(
loss_mask
[
packet_idx
]
=
=
0
)
{
std
:
:
unique_ptr
<
ForwardErrorCorrection
:
:
ReceivedPacket
>
received_packet
(
new
ForwardErrorCorrection
:
:
ReceivedPacket
(
)
)
;
received_packet
-
>
pkt
=
new
ForwardErrorCorrection
:
:
Packet
(
)
;
received_packet
-
>
pkt
-
>
data
=
packet
-
>
data
;
received_packet
-
>
is_fec
=
is_fec
;
if
(
!
is_fec
)
{
received_packet
-
>
ssrc
=
kMediaSsrc
;
received_packet
-
>
seq_num
=
ByteReader
<
uint16_t
>
:
:
ReadBigEndian
(
packet
-
>
data
.
data
(
)
+
2
)
;
}
else
{
received_packet
-
>
ssrc
=
ForwardErrorCorrectionType
:
:
kFecSsrc
;
received_packet
-
>
seq_num
=
fec_seq_num
;
}
received_packets_
.
push_back
(
std
:
:
move
(
received_packet
)
)
;
}
packet_idx
+
+
;
if
(
is_fec
)
fec_seq_num
+
+
;
}
}
template
<
typename
ForwardErrorCorrectionType
>
bool
RtpFecTest
<
ForwardErrorCorrectionType
>
:
:
IsRecoveryComplete
(
)
{
return
absl
:
:
c_equal
(
media_packets_
recovered_packets_
[
]
(
const
std
:
:
unique_ptr
<
ForwardErrorCorrection
:
:
Packet
>
&
media_packet
const
std
:
:
unique_ptr
<
ForwardErrorCorrection
:
:
RecoveredPacket
>
&
recovered_packet
)
{
if
(
media_packet
-
>
data
.
size
(
)
!
=
recovered_packet
-
>
pkt
-
>
data
.
size
(
)
)
{
return
false
;
}
if
(
memcmp
(
media_packet
-
>
data
.
cdata
(
)
recovered_packet
-
>
pkt
-
>
data
.
cdata
(
)
media_packet
-
>
data
.
size
(
)
)
!
=
0
)
{
return
false
;
}
return
true
;
}
)
;
}
class
FlexfecForwardErrorCorrection
:
public
ForwardErrorCorrection
{
public
:
static
const
uint32_t
kFecSsrc
=
kFlexfecSsrc
;
FlexfecForwardErrorCorrection
(
)
:
ForwardErrorCorrection
(
std
:
:
unique_ptr
<
FecHeaderReader
>
(
new
Flexfec03HeaderReader
(
)
)
std
:
:
unique_ptr
<
FecHeaderWriter
>
(
new
Flexfec03HeaderWriter
(
)
)
kFecSsrc
kMediaSsrc
)
{
}
static
uint16_t
GetFirstFecSeqNum
(
uint16_t
next_media_seq_num
)
{
Random
random
(
0xbe110
)
;
return
random
.
Rand
<
uint16_t
>
(
)
;
}
}
;
class
UlpfecForwardErrorCorrection
:
public
ForwardErrorCorrection
{
public
:
static
const
uint32_t
kFecSsrc
=
kMediaSsrc
;
UlpfecForwardErrorCorrection
(
)
:
ForwardErrorCorrection
(
std
:
:
unique_ptr
<
FecHeaderReader
>
(
new
UlpfecHeaderReader
(
)
)
std
:
:
unique_ptr
<
FecHeaderWriter
>
(
new
UlpfecHeaderWriter
(
)
)
kFecSsrc
kMediaSsrc
)
{
}
static
uint16_t
GetFirstFecSeqNum
(
uint16_t
next_media_seq_num
)
{
return
next_media_seq_num
;
}
}
;
using
FecTypes
=
Types
<
FlexfecForwardErrorCorrection
UlpfecForwardErrorCorrection
>
;
TYPED_TEST_SUITE
(
RtpFecTest
FecTypes
)
;
TYPED_TEST
(
RtpFecTest
WillProtectMediaPacketsWithLargeSequenceNumberGap
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
int
kNumMediaPackets
=
2
;
constexpr
uint8_t
kProtectionFactor
=
127
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
ByteWriter
<
uint16_t
>
:
:
WriteBigEndian
(
this
-
>
media_packets_
.
front
(
)
-
>
data
.
MutableData
(
)
+
2
1
)
;
ByteWriter
<
uint16_t
>
:
:
WriteBigEndian
(
this
-
>
media_packets_
.
back
(
)
-
>
data
.
MutableData
(
)
+
2
kMaxMediaPackets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
1u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
WillNotProtectMediaPacketsWithTooLargeSequenceNumberGap
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
int
kNumMediaPackets
=
2
;
constexpr
uint8_t
kProtectionFactor
=
127
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
ByteWriter
<
uint16_t
>
:
:
WriteBigEndian
(
this
-
>
media_packets_
.
front
(
)
-
>
data
.
MutableData
(
)
+
2
1
)
;
ByteWriter
<
uint16_t
>
:
:
WriteBigEndian
(
this
-
>
media_packets_
.
back
(
)
-
>
data
.
MutableData
(
)
+
2
kMaxMediaPackets
+
1
)
;
EXPECT_EQ
(
-
1
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_TRUE
(
this
-
>
generated_fec_packets_
.
empty
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryNoLoss
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
int
kNumMediaPackets
=
4
;
constexpr
uint8_t
kProtectionFactor
=
60
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
1u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryWithLoss
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
int
kNumMediaPackets
=
4
;
constexpr
uint8_t
kProtectionFactor
=
60
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
1u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
NoFecRecoveryWithOldFecPacket
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
uint8_t
kProtectionFactor
=
20
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
2
0
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
1u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
ReceivedPackets
(
this
-
>
generated_fec_packets_
this
-
>
fec_loss_mask_
true
)
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
3
32767
)
;
EXPECT_EQ
(
3u
this
-
>
media_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
this
-
>
ReceivedPackets
(
this
-
>
media_packets_
this
-
>
media_loss_mask_
false
)
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
3
65535
)
;
EXPECT_EQ
(
3u
this
-
>
media_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
ReceivedPackets
(
this
-
>
media_packets_
this
-
>
media_loss_mask_
false
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_EQ
(
5u
this
-
>
recovered_packets_
.
size
(
)
)
;
EXPECT_TRUE
(
this
-
>
recovered_packets_
.
size
(
)
!
=
this
-
>
media_packets_
.
size
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryWithSeqNumGapOneFrameRecovery
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
uint8_t
kProtectionFactor
=
20
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
3
65534
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
1u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
ReceivedPackets
(
this
-
>
media_packets_
this
-
>
media_loss_mask_
false
)
;
this
-
>
ReceivedPackets
(
this
-
>
generated_fec_packets_
this
-
>
fec_loss_mask_
true
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_EQ
(
3u
this
-
>
recovered_packets_
.
size
(
)
)
;
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
using
RtpFecTestUlpfecOnly
=
RtpFecTest
<
UlpfecForwardErrorCorrection
>
;
TEST_F
(
RtpFecTestUlpfecOnly
FecRecoveryWithSeqNumGapOneFrameRecovery
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
uint8_t
kProtectionFactor
=
200
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
3
65532
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
2u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
media_loss_mask_
[
2
]
=
1
;
this
-
>
ReceivedPackets
(
this
-
>
media_packets_
this
-
>
media_loss_mask_
false
)
;
this
-
>
ReceivedPackets
(
this
-
>
generated_fec_packets_
this
-
>
fec_loss_mask_
true
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_EQ
(
3u
this
-
>
recovered_packets_
.
size
(
)
)
;
EXPECT_EQ
(
this
-
>
recovered_packets_
.
size
(
)
this
-
>
media_packets_
.
size
(
)
)
;
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
using
RtpFecTestFlexfecOnly
=
RtpFecTest
<
FlexfecForwardErrorCorrection
>
;
TEST_F
(
RtpFecTestFlexfecOnly
FecRecoveryWithSeqNumGapOneFrameNoRecovery
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
uint8_t
kProtectionFactor
=
200
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
3
65532
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
2u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
auto
it
=
this
-
>
generated_fec_packets_
.
begin
(
)
;
ByteWriter
<
uint16_t
>
:
:
WriteBigEndian
(
&
(
*
it
)
-
>
data
.
MutableData
(
)
[
2
]
65535
)
;
+
+
it
;
ByteWriter
<
uint16_t
>
:
:
WriteBigEndian
(
&
(
*
it
)
-
>
data
.
MutableData
(
)
[
2
]
0
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
media_loss_mask_
[
2
]
=
1
;
this
-
>
ReceivedPackets
(
this
-
>
media_packets_
this
-
>
media_loss_mask_
false
)
;
this
-
>
ReceivedPackets
(
this
-
>
generated_fec_packets_
this
-
>
fec_loss_mask_
true
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_EQ
(
2u
this
-
>
recovered_packets_
.
size
(
)
)
;
EXPECT_TRUE
(
this
-
>
recovered_packets_
.
size
(
)
!
=
this
-
>
media_packets_
.
size
(
)
)
;
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryWithMediaOutOfOrder
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
uint8_t
kProtectionFactor
=
20
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
3
0
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
1u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
auto
it0
=
this
-
>
received_packets_
.
begin
(
)
;
auto
it1
=
this
-
>
received_packets_
.
begin
(
)
;
it1
+
+
;
std
:
:
swap
(
*
it0
*
it1
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_EQ
(
3u
this
-
>
recovered_packets_
.
size
(
)
)
;
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryWithFecOutOfOrder
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
uint8_t
kProtectionFactor
=
20
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
3
0
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
1u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
ReceivedPackets
(
this
-
>
generated_fec_packets_
this
-
>
fec_loss_mask_
true
)
;
this
-
>
ReceivedPackets
(
this
-
>
media_packets_
this
-
>
media_loss_mask_
false
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_EQ
(
3u
this
-
>
recovered_packets_
.
size
(
)
)
;
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryWithLoss50percRandomMask
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
int
kNumMediaPackets
=
4
;
constexpr
uint8_t
kProtectionFactor
=
255
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskRandom
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
4u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
fec_loss_mask_
[
0
]
=
1
;
this
-
>
media_loss_mask_
[
0
]
=
1
;
this
-
>
media_loss_mask_
[
2
]
=
1
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
0
]
=
1
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
media_loss_mask_
[
2
]
=
1
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryWithLoss50percBurstyMask
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
int
kNumMediaPackets
=
4
;
constexpr
uint8_t
kProtectionFactor
=
255
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
4u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
0
]
=
1
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
media_loss_mask_
[
2
]
=
1
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
fec_loss_mask_
[
0
]
=
1
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
media_loss_mask_
[
2
]
=
1
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
fec_loss_mask_
[
0
]
=
1
;
this
-
>
fec_loss_mask_
[
3
]
=
1
;
this
-
>
media_loss_mask_
[
0
]
=
1
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryNoLossUep
)
{
constexpr
int
kNumImportantPackets
=
2
;
constexpr
bool
kUseUnequalProtection
=
true
;
constexpr
int
kNumMediaPackets
=
4
;
constexpr
uint8_t
kProtectionFactor
=
60
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
1u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryWithLossUep
)
{
constexpr
int
kNumImportantPackets
=
2
;
constexpr
bool
kUseUnequalProtection
=
true
;
constexpr
int
kNumMediaPackets
=
4
;
constexpr
uint8_t
kProtectionFactor
=
60
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
1u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryWithLoss50percUepRandomMask
)
{
constexpr
int
kNumImportantPackets
=
1
;
constexpr
bool
kUseUnequalProtection
=
true
;
constexpr
int
kNumMediaPackets
=
4
;
constexpr
uint8_t
kProtectionFactor
=
255
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
this
-
>
media_packets_
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskRandom
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
4u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
fec_loss_mask_
[
1
]
=
1
;
this
-
>
media_loss_mask_
[
0
]
=
1
;
this
-
>
media_loss_mask_
[
2
]
=
1
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
fec_loss_mask_
[
2
]
=
1
;
this
-
>
media_loss_mask_
[
0
]
=
1
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
media_loss_mask_
[
2
]
=
1
;
this
-
>
media_loss_mask_
[
3
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryNonConsecutivePackets
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
int
kNumMediaPackets
=
5
;
constexpr
uint8_t
kProtectionFactor
=
60
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
ForwardErrorCorrection
:
:
PacketList
protected_media_packets
;
DeepCopyEveryNthPacket
(
this
-
>
media_packets_
2
&
protected_media_packets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
protected_media_packets
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
1u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
2
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
1
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
0
]
=
1
;
this
-
>
media_loss_mask_
[
2
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryNonConsecutivePacketsExtension
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
int
kNumMediaPackets
=
21
;
uint8_t
kProtectionFactor
=
127
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
)
;
ForwardErrorCorrection
:
:
PacketList
protected_media_packets
;
DeepCopyEveryNthPacket
(
this
-
>
media_packets_
2
&
protected_media_packets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
protected_media_packets
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
5u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
1
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
2
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
11
]
=
1
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
9
]
=
1
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
7
]
=
1
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
5
]
=
1
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
3
]
=
1
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
1
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
TYPED_TEST
(
RtpFecTest
FecRecoveryNonConsecutivePacketsWrap
)
{
constexpr
int
kNumImportantPackets
=
0
;
constexpr
bool
kUseUnequalProtection
=
false
;
constexpr
int
kNumMediaPackets
=
21
;
uint8_t
kProtectionFactor
=
127
;
this
-
>
media_packets_
=
this
-
>
media_packet_generator_
.
ConstructMediaPackets
(
kNumMediaPackets
0xFFFF
-
5
)
;
ForwardErrorCorrection
:
:
PacketList
protected_media_packets
;
DeepCopyEveryNthPacket
(
this
-
>
media_packets_
2
&
protected_media_packets
)
;
EXPECT_EQ
(
0
this
-
>
fec_
.
EncodeFec
(
protected_media_packets
kProtectionFactor
kNumImportantPackets
kUseUnequalProtection
kFecMaskBursty
&
this
-
>
generated_fec_packets_
)
)
;
EXPECT_EQ
(
5u
this
-
>
generated_fec_packets_
.
size
(
)
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
1
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_TRUE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
2
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
this
-
>
recovered_packets_
.
clear
(
)
;
memset
(
this
-
>
media_loss_mask_
0
sizeof
(
this
-
>
media_loss_mask_
)
)
;
memset
(
this
-
>
fec_loss_mask_
0
sizeof
(
this
-
>
fec_loss_mask_
)
)
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
11
]
=
1
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
9
]
=
1
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
7
]
=
1
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
5
]
=
1
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
3
]
=
1
;
this
-
>
media_loss_mask_
[
kNumMediaPackets
-
1
]
=
1
;
this
-
>
NetworkReceivedPackets
(
this
-
>
media_loss_mask_
this
-
>
fec_loss_mask_
)
;
for
(
const
auto
&
received_packet
:
this
-
>
received_packets_
)
{
this
-
>
fec_
.
DecodeFec
(
*
received_packet
&
this
-
>
recovered_packets_
)
;
}
EXPECT_FALSE
(
this
-
>
IsRecoveryComplete
(
)
)
;
}
}
