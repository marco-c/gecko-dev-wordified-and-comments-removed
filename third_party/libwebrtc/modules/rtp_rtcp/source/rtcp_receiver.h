#
ifndef
MODULES_RTP_RTCP_SOURCE_RTCP_RECEIVER_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTCP_RECEIVER_H_
#
include
<
list
>
#
include
<
map
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
report_block_data
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtcp_statistics
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_nack_stats
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
dlrr
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_rtcp_interface
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
system_wrappers
/
include
/
ntp_time
.
h
"
namespace
webrtc
{
class
VideoBitrateAllocationObserver
;
namespace
rtcp
{
class
CommonHeader
;
class
ReportBlock
;
class
Rrtr
;
class
TargetBitrate
;
class
TmmbItem
;
}
class
RTCPReceiver
final
{
public
:
class
ModuleRtpRtcp
{
public
:
virtual
void
SetTmmbn
(
std
:
:
vector
<
rtcp
:
:
TmmbItem
>
bounding_set
)
=
0
;
virtual
void
OnRequestSendReport
(
)
=
0
;
virtual
void
OnReceivedNack
(
const
std
:
:
vector
<
uint16_t
>
&
nack_sequence_numbers
)
=
0
;
virtual
void
OnReceivedRtcpReportBlocks
(
const
ReportBlockList
&
report_blocks
)
=
0
;
protected
:
virtual
~
ModuleRtpRtcp
(
)
=
default
;
}
;
RTCPReceiver
(
const
RtpRtcpInterface
:
:
Configuration
&
config
ModuleRtpRtcp
*
owner
)
;
~
RTCPReceiver
(
)
;
void
IncomingPacket
(
const
uint8_t
*
packet
size_t
packet_size
)
{
IncomingPacket
(
rtc
:
:
MakeArrayView
(
packet
packet_size
)
)
;
}
void
IncomingPacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
packet
)
;
int64_t
LastReceivedReportBlockMs
(
)
const
;
void
SetRemoteSSRC
(
uint32_t
ssrc
)
;
uint32_t
RemoteSSRC
(
)
const
;
bool
NTP
(
uint32_t
*
received_ntp_secs
uint32_t
*
received_ntp_frac
uint32_t
*
rtcp_arrival_time_secs
uint32_t
*
rtcp_arrival_time_frac
uint32_t
*
rtcp_timestamp
uint32_t
*
remote_sender_packet_count
uint64_t
*
remote_sender_octet_count
uint64_t
*
remote_sender_reports_count
)
const
;
std
:
:
vector
<
rtcp
:
:
ReceiveTimeInfo
>
ConsumeReceivedXrReferenceTimeInfo
(
)
;
void
RemoteRTCPSenderInfo
(
uint32_t
*
packet_count
uint32_t
*
octet_count
int64_t
*
ntp_timestamp_ms
int64_t
*
remote_ntp_timestamp_ms
)
const
;
int32_t
RTT
(
uint32_t
remote_ssrc
int64_t
*
last_rtt_ms
int64_t
*
avg_rtt_ms
int64_t
*
min_rtt_ms
int64_t
*
max_rtt_ms
)
const
;
bool
GetAndResetXrRrRtt
(
int64_t
*
rtt_ms
)
;
absl
:
:
optional
<
TimeDelta
>
OnPeriodicRttUpdate
(
Timestamp
newer_than
bool
sending
)
;
std
:
:
vector
<
ReportBlockData
>
GetLatestReportBlockData
(
)
const
;
bool
RtcpRrTimeout
(
)
;
bool
RtcpRrSequenceNumberTimeout
(
)
;
std
:
:
vector
<
rtcp
:
:
TmmbItem
>
TmmbrReceived
(
)
;
bool
UpdateTmmbrTimers
(
)
;
std
:
:
vector
<
rtcp
:
:
TmmbItem
>
BoundingSet
(
bool
*
tmmbr_owner
)
;
void
NotifyTmmbrUpdated
(
)
;
private
:
struct
PacketInformation
;
struct
TmmbrInformation
;
struct
RrtrInformation
;
struct
LastFirStatus
;
using
ReportBlockDataMap
=
std
:
:
map
<
uint32_t
ReportBlockData
>
;
using
ReportBlockMap
=
std
:
:
map
<
uint32_t
ReportBlockDataMap
>
;
bool
ParseCompoundPacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
packet
PacketInformation
*
packet_information
)
;
void
TriggerCallbacksFromRtcpPacket
(
const
PacketInformation
&
packet_information
)
;
TmmbrInformation
*
FindOrCreateTmmbrInfo
(
uint32_t
remote_ssrc
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
UpdateTmmbrRemoteIsAlive
(
uint32_t
remote_ssrc
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
TmmbrInformation
*
GetTmmbrInformation
(
uint32_t
remote_ssrc
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleSenderReport
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleReceiverReport
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleReportBlock
(
const
rtcp
:
:
ReportBlock
&
report_block
PacketInformation
*
packet_information
uint32_t
remote_ssrc
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleSdes
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleXr
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleXrReceiveReferenceTime
(
uint32_t
sender_ssrc
const
rtcp
:
:
Rrtr
&
rrtr
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleXrDlrrReportBlock
(
const
rtcp
:
:
ReceiveTimeInfo
&
rti
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleXrTargetBitrate
(
uint32_t
ssrc
const
rtcp
:
:
TargetBitrate
&
target_bitrate
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleNack
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleApp
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleBye
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandlePli
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandlePsfbApp
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleTmmbr
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleTmmbn
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleSrReq
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleFir
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
void
HandleTransportFeedback
(
const
rtcp
:
:
CommonHeader
&
rtcp_block
PacketInformation
*
packet_information
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
bool
RtcpRrTimeoutLocked
(
Timestamp
now
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
bool
RtcpRrSequenceNumberTimeoutLocked
(
Timestamp
now
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
rtcp_receiver_lock_
)
;
Clock
*
const
clock_
;
const
bool
receiver_only_
;
ModuleRtpRtcp
*
const
rtp_rtcp_
;
const
uint32_t
main_ssrc_
;
const
std
:
:
set
<
uint32_t
>
registered_ssrcs_
;
RtcpBandwidthObserver
*
const
rtcp_bandwidth_observer_
;
RtcpEventObserver
*
const
rtcp_event_observer_
;
RtcpIntraFrameObserver
*
const
rtcp_intra_frame_observer_
;
RtcpLossNotificationObserver
*
const
rtcp_loss_notification_observer_
;
NetworkStateEstimateObserver
*
const
network_state_estimate_observer_
;
TransportFeedbackObserver
*
const
transport_feedback_observer_
;
VideoBitrateAllocationObserver
*
const
bitrate_allocation_observer_
;
const
TimeDelta
report_interval_
;
mutable
Mutex
rtcp_receiver_lock_
;
uint32_t
remote_ssrc_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
NtpTime
remote_sender_ntp_time_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
uint32_t
remote_sender_rtp_time_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
NtpTime
last_received_sr_ntp_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
uint32_t
remote_sender_packet_count_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
uint64_t
remote_sender_octet_count_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
uint64_t
remote_sender_reports_count_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
std
:
:
list
<
RrtrInformation
>
received_rrtrs_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
std
:
:
map
<
uint32_t
std
:
:
list
<
RrtrInformation
>
:
:
iterator
>
received_rrtrs_ssrc_it_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
const
bool
xr_rrtr_status_
;
int64_t
xr_rr_rtt_ms_
;
int64_t
oldest_tmmbr_info_ms_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
std
:
:
map
<
uint32_t
TmmbrInformation
>
tmmbr_infos_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
ReportBlockMap
received_report_blocks_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
std
:
:
map
<
uint32_t
LastFirStatus
>
last_fir_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
;
Timestamp
last_received_rb_
RTC_GUARDED_BY
(
rtcp_receiver_lock_
)
=
Timestamp
:
:
PlusInfinity
(
)
;
Timestamp
last_increased_sequence_number_
=
Timestamp
:
:
PlusInfinity
(
)
;
RtcpStatisticsCallback
*
const
stats_callback_
;
RtcpCnameCallback
*
const
cname_callback_
;
ReportBlockDataObserver
*
const
report_block_data_observer_
;
RtcpPacketTypeCounterObserver
*
const
packet_type_counter_observer_
;
RtcpPacketTypeCounter
packet_type_counter_
;
RtcpNackStats
nack_stats_
;
size_t
num_skipped_packets_
;
int64_t
last_skipped_packets_warning_ms_
;
}
;
}
#
endif
