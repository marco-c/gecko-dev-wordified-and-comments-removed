#
include
"
modules
/
rtp_rtcp
/
source
/
ntp_time_util
.
h
"
#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
rtc_base
/
numerics
/
divide_round
.
h
"
#
include
"
rtc_base
/
time_utils
.
h
"
namespace
webrtc
{
uint32_t
SaturatedToCompactNtp
(
TimeDelta
delta
)
{
constexpr
uint32_t
kMaxCompactNtp
=
0xFFFFFFFF
;
constexpr
int
kCompactNtpInSecond
=
0x10000
;
if
(
delta
<
=
TimeDelta
:
:
Zero
(
)
)
return
0
;
if
(
delta
.
us
(
)
>
=
kMaxCompactNtp
*
rtc
:
:
kNumMicrosecsPerSec
/
kCompactNtpInSecond
)
return
kMaxCompactNtp
;
return
DivideRoundToNearest
(
delta
.
us
(
)
*
kCompactNtpInSecond
rtc
:
:
kNumMicrosecsPerSec
)
;
}
TimeDelta
CompactNtpIntervalToTimeDelta
(
uint32_t
compact_ntp_interval
)
{
int64_t
value
=
int64_t
{
compact_ntp_interval
}
;
if
(
compact_ntp_interval
>
0x8000
'
0000
)
{
value
-
=
(
int64_t
{
1
}
<
<
32
)
;
}
int64_t
us
=
DivideRoundToNearest
(
value
*
rtc
:
:
kNumMicrosecsPerSec
1
<
<
16
)
;
return
TimeDelta
:
:
Micros
(
us
)
;
}
TimeDelta
CompactNtpRttToTimeDelta
(
uint32_t
compact_ntp_interval
)
{
static
constexpr
TimeDelta
kMinRtt
=
TimeDelta
:
:
Millis
(
1
)
;
return
std
:
:
max
(
CompactNtpIntervalToTimeDelta
(
compact_ntp_interval
)
kMinRtt
)
;
}
}
