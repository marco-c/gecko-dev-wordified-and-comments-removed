#
include
"
modules
/
rtp_rtcp
/
include
/
remote_ntp_time_estimator
.
h
"
#
include
<
optional
>
#
include
"
modules
/
rtp_rtcp
/
source
/
ntp_time_util
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
system_wrappers
/
include
/
ntp_time
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
TimeDelta
kTestRtt
=
TimeDelta
:
:
Millis
(
10
)
;
constexpr
Timestamp
kLocalClockInitialTime
=
Timestamp
:
:
Millis
(
123
)
;
constexpr
Timestamp
kRemoteClockInitialTime
=
Timestamp
:
:
Millis
(
373
)
;
constexpr
uint32_t
kTimestampOffset
=
567
;
constexpr
int64_t
kRemoteToLocalClockOffsetNtp
=
ToNtpUnits
(
kLocalClockInitialTime
-
kRemoteClockInitialTime
)
;
constexpr
int64_t
kEpsilon
=
1
;
class
RemoteNtpTimeEstimatorTest
:
public
:
:
testing
:
:
Test
{
protected
:
void
AdvanceTime
(
TimeDelta
delta
)
{
local_clock_
.
AdvanceTime
(
delta
)
;
remote_clock_
.
AdvanceTime
(
delta
)
;
}
uint32_t
GetRemoteTimestamp
(
)
{
return
static_cast
<
uint32_t
>
(
remote_clock_
.
TimeInMilliseconds
(
)
)
*
90
+
kTimestampOffset
;
}
void
SendRtcpSr
(
)
{
uint32_t
rtcp_timestamp
=
GetRemoteTimestamp
(
)
;
NtpTime
ntp
=
remote_clock_
.
CurrentNtpTime
(
)
;
AdvanceTime
(
kTestRtt
/
2
)
;
EXPECT_TRUE
(
estimator_
.
UpdateRtcpTimestamp
(
kTestRtt
ntp
rtcp_timestamp
)
)
;
}
void
SendRtcpSrInaccurately
(
TimeDelta
ntp_error
TimeDelta
networking_delay
)
{
uint32_t
rtcp_timestamp
=
GetRemoteTimestamp
(
)
;
int64_t
ntp_error_fractions
=
ToNtpUnits
(
ntp_error
)
;
NtpTime
ntp
(
static_cast
<
uint64_t
>
(
remote_clock_
.
CurrentNtpTime
(
)
)
+
ntp_error_fractions
)
;
AdvanceTime
(
kTestRtt
/
2
+
networking_delay
)
;
EXPECT_TRUE
(
estimator_
.
UpdateRtcpTimestamp
(
kTestRtt
ntp
rtcp_timestamp
)
)
;
}
SimulatedClock
local_clock_
{
kLocalClockInitialTime
}
;
SimulatedClock
remote_clock_
{
kRemoteClockInitialTime
}
;
RemoteNtpTimeEstimator
estimator_
{
&
local_clock_
}
;
}
;
TEST_F
(
RemoteNtpTimeEstimatorTest
FailsWithoutValidNtpTime
)
{
EXPECT_FALSE
(
estimator_
.
UpdateRtcpTimestamp
(
kTestRtt
NtpTime
(
)
0
)
)
;
}
TEST_F
(
RemoteNtpTimeEstimatorTest
Estimate
)
{
SendRtcpSr
(
)
;
AdvanceTime
(
TimeDelta
:
:
Millis
(
15
)
)
;
uint32_t
rtp_timestamp
=
GetRemoteTimestamp
(
)
;
int64_t
capture_ntp_time_ms
=
local_clock_
.
CurrentNtpInMilliseconds
(
)
;
const
int64_t
kNotEnoughRtcpSr
=
-
1
;
EXPECT_EQ
(
kNotEnoughRtcpSr
estimator_
.
Estimate
(
rtp_timestamp
)
)
;
EXPECT_EQ
(
estimator_
.
EstimateRemoteToLocalClockOffset
(
)
std
:
:
nullopt
)
;
AdvanceTime
(
TimeDelta
:
:
Millis
(
800
)
)
;
SendRtcpSr
(
)
;
AdvanceTime
(
TimeDelta
:
:
Millis
(
800
)
)
;
SendRtcpSr
(
)
;
EXPECT_EQ
(
capture_ntp_time_ms
estimator_
.
Estimate
(
rtp_timestamp
)
)
;
EXPECT_NEAR
(
*
estimator_
.
EstimateRemoteToLocalClockOffset
(
)
kRemoteToLocalClockOffsetNtp
kEpsilon
)
;
}
TEST_F
(
RemoteNtpTimeEstimatorTest
AveragesErrorsOut
)
{
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
AdvanceTime
(
TimeDelta
:
:
Seconds
(
1
)
)
;
SendRtcpSr
(
)
;
}
AdvanceTime
(
TimeDelta
:
:
Millis
(
150
)
)
;
uint32_t
rtp_timestamp
=
GetRemoteTimestamp
(
)
;
int64_t
capture_ntp_time_ms
=
local_clock_
.
CurrentNtpInMilliseconds
(
)
;
EXPECT_EQ
(
capture_ntp_time_ms
estimator_
.
Estimate
(
rtp_timestamp
)
)
;
EXPECT_NEAR
(
kRemoteToLocalClockOffsetNtp
*
estimator_
.
EstimateRemoteToLocalClockOffset
(
)
kEpsilon
)
;
AdvanceTime
(
TimeDelta
:
:
Seconds
(
1
)
)
;
SendRtcpSrInaccurately
(
TimeDelta
:
:
Millis
(
2
)
TimeDelta
:
:
Millis
(
-
1
)
)
;
AdvanceTime
(
TimeDelta
:
:
Seconds
(
1
)
)
;
SendRtcpSrInaccurately
(
TimeDelta
:
:
Millis
(
-
2
)
TimeDelta
:
:
Millis
(
1
)
)
;
AdvanceTime
(
TimeDelta
:
:
Millis
(
150
)
)
;
rtp_timestamp
=
GetRemoteTimestamp
(
)
;
capture_ntp_time_ms
=
local_clock_
.
CurrentNtpInMilliseconds
(
)
;
EXPECT_EQ
(
capture_ntp_time_ms
estimator_
.
Estimate
(
rtp_timestamp
)
)
;
EXPECT_NEAR
(
kRemoteToLocalClockOffsetNtp
*
estimator_
.
EstimateRemoteToLocalClockOffset
(
)
kEpsilon
)
;
}
}
}
