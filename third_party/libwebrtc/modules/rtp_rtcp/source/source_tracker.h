#
ifndef
MODULES_RTP_RTCP_SOURCE_SOURCE_TRACKER_H_
#
define
MODULES_RTP_RTCP_SOURCE_SOURCE_TRACKER_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
list
>
#
include
<
optional
>
#
include
<
unordered_map
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
rtp_headers
.
h
"
#
include
"
api
/
rtp_packet_infos
.
h
"
#
include
"
api
/
transport
/
rtp
/
rtp_source
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
SourceTracker
{
public
:
static
constexpr
TimeDelta
kTimeout
=
TimeDelta
:
:
Seconds
(
10
)
;
explicit
SourceTracker
(
Clock
*
clock
)
;
SourceTracker
(
const
SourceTracker
&
other
)
=
delete
;
SourceTracker
(
SourceTracker
&
&
other
)
=
delete
;
SourceTracker
&
operator
=
(
const
SourceTracker
&
other
)
=
delete
;
SourceTracker
&
operator
=
(
SourceTracker
&
&
other
)
=
delete
;
void
OnFrameDelivered
(
const
RtpPacketInfos
&
packet_infos
Timestamp
delivery_time
=
Timestamp
:
:
MinusInfinity
(
)
)
;
std
:
:
vector
<
RtpSource
>
GetSources
(
)
const
;
private
:
struct
SourceKey
{
SourceKey
(
RtpSourceType
source_type
uint32_t
source
)
:
source_type
(
source_type
)
source
(
source
)
{
}
RtpSourceType
source_type
;
uint32_t
source
;
}
;
struct
SourceKeyComparator
{
bool
operator
(
)
(
const
SourceKey
&
lhs
const
SourceKey
&
rhs
)
const
{
return
(
lhs
.
source_type
=
=
rhs
.
source_type
)
&
&
(
lhs
.
source
=
=
rhs
.
source
)
;
}
}
;
struct
SourceKeyHasher
{
size_t
operator
(
)
(
const
SourceKey
&
value
)
const
{
return
static_cast
<
size_t
>
(
value
.
source_type
)
+
static_cast
<
size_t
>
(
value
.
source
)
*
11076425802534262905ULL
;
}
}
;
struct
SourceEntry
{
Timestamp
timestamp
=
Timestamp
:
:
MinusInfinity
(
)
;
std
:
:
optional
<
uint8_t
>
audio_level
;
std
:
:
optional
<
AbsoluteCaptureTime
>
absolute_capture_time
;
std
:
:
optional
<
TimeDelta
>
local_capture_clock_offset
;
uint32_t
rtp_timestamp
=
0
;
}
;
using
SourceList
=
std
:
:
list
<
std
:
:
pair
<
const
SourceKey
SourceEntry
>
>
;
using
SourceMap
=
std
:
:
unordered_map
<
SourceKey
SourceList
:
:
iterator
SourceKeyHasher
SourceKeyComparator
>
;
SourceEntry
&
UpdateEntry
(
const
SourceKey
&
key
)
;
void
PruneEntries
(
Timestamp
now
)
const
;
Clock
*
const
clock_
;
mutable
SourceList
list_
;
mutable
SourceMap
map_
;
}
;
}
#
endif
