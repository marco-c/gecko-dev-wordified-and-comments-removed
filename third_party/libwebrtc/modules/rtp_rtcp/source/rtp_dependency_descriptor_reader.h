#
ifndef
MODULES_RTP_RTCP_SOURCE_RTP_DEPENDENCY_DESCRIPTOR_READER_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTP_DEPENDENCY_DESCRIPTOR_READER_H_
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
transport
/
rtp
/
dependency_descriptor
.
h
"
#
include
"
rtc_base
/
bit_buffer
.
h
"
namespace
webrtc
{
class
RtpDependencyDescriptorReader
{
public
:
RtpDependencyDescriptorReader
(
rtc
:
:
ArrayView
<
const
uint8_t
>
raw_data
const
FrameDependencyStructure
*
structure
DependencyDescriptor
*
descriptor
)
;
RtpDependencyDescriptorReader
(
const
RtpDependencyDescriptorReader
&
)
=
delete
;
RtpDependencyDescriptorReader
&
operator
=
(
const
RtpDependencyDescriptorReader
&
)
=
delete
;
bool
ParseSuccessful
(
)
{
return
!
parsing_failed_
;
}
private
:
uint32_t
ReadBits
(
size_t
bit_count
)
;
uint32_t
ReadNonSymmetric
(
size_t
num_values
)
;
void
ReadTemplateDependencyStructure
(
)
;
void
ReadTemplateLayers
(
)
;
void
ReadTemplateDtis
(
)
;
void
ReadTemplateFdiffs
(
)
;
void
ReadTemplateChains
(
)
;
void
ReadResolutions
(
)
;
void
ReadMandatoryFields
(
)
;
void
ReadExtendedFields
(
)
;
void
ReadFrameDependencyDefinition
(
)
;
void
ReadFrameDtis
(
)
;
void
ReadFrameFdiffs
(
)
;
void
ReadFrameChains
(
)
;
bool
parsing_failed_
=
false
;
DependencyDescriptor
*
const
descriptor_
;
rtc
:
:
BitBuffer
buffer_
;
int
frame_dependency_template_id_
=
0
;
bool
active_decode_targets_present_flag_
=
false
;
bool
custom_dtis_flag_
=
false
;
bool
custom_fdiffs_flag_
=
false
;
bool
custom_chains_flag_
=
false
;
const
FrameDependencyStructure
*
structure_
=
nullptr
;
}
;
}
#
endif
