#
ifndef
MODULES_RTP_RTCP_SOURCE_RTP_VIDEO_HEADER_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTP_VIDEO_HEADER_H_
#
include
<
bitset
>
#
include
<
cstdint
>
#
include
"
absl
/
container
/
inlined_vector
.
h
"
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
absl
/
types
/
variant
.
h
"
#
include
"
api
/
transport
/
rtp
/
dependency_descriptor
.
h
"
#
include
"
api
/
video
/
color_space
.
h
"
#
include
"
api
/
video
/
video_codec_type
.
h
"
#
include
"
api
/
video
/
video_content_type
.
h
"
#
include
"
api
/
video
/
video_frame_type
.
h
"
#
include
"
api
/
video
/
video_rotation
.
h
"
#
include
"
api
/
video
/
video_timing
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
h264
/
include
/
h264_globals
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
vp8
/
include
/
vp8_globals
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
vp9
/
include
/
vp9_globals
.
h
"
namespace
webrtc
{
struct
RTPVideoHeaderLegacyGeneric
{
uint16_t
picture_id
;
}
;
using
RTPVideoTypeHeader
=
absl
:
:
variant
<
absl
:
:
monostate
RTPVideoHeaderVP8
RTPVideoHeaderVP9
RTPVideoHeaderH264
RTPVideoHeaderLegacyGeneric
>
;
struct
RTPVideoHeader
{
struct
GenericDescriptorInfo
{
GenericDescriptorInfo
(
)
;
GenericDescriptorInfo
(
const
GenericDescriptorInfo
&
other
)
;
~
GenericDescriptorInfo
(
)
;
int64_t
frame_id
=
0
;
int
spatial_index
=
0
;
int
temporal_index
=
0
;
absl
:
:
InlinedVector
<
DecodeTargetIndication
10
>
decode_target_indications
;
absl
:
:
InlinedVector
<
int64_t
5
>
dependencies
;
absl
:
:
InlinedVector
<
int
4
>
chain_diffs
;
std
:
:
bitset
<
32
>
active_decode_targets
=
~
uint32_t
{
0
}
;
}
;
RTPVideoHeader
(
)
;
RTPVideoHeader
(
const
RTPVideoHeader
&
other
)
;
~
RTPVideoHeader
(
)
;
absl
:
:
optional
<
GenericDescriptorInfo
>
generic
;
VideoFrameType
frame_type
=
VideoFrameType
:
:
kEmptyFrame
;
uint16_t
width
=
0
;
uint16_t
height
=
0
;
VideoRotation
rotation
=
VideoRotation
:
:
kVideoRotation_0
;
VideoContentType
content_type
=
VideoContentType
:
:
UNSPECIFIED
;
bool
is_first_packet_in_frame
=
false
;
bool
is_last_packet_in_frame
=
false
;
uint8_t
simulcastIdx
=
0
;
VideoCodecType
codec
=
VideoCodecType
:
:
kVideoCodecGeneric
;
VideoPlayoutDelay
playout_delay
;
VideoSendTiming
video_timing
;
absl
:
:
optional
<
ColorSpace
>
color_space
;
RTPVideoTypeHeader
video_type_header
;
}
;
}
#
endif
