#
ifndef
MODULES_RTP_RTCP_SOURCE_RTP_SEQUENCE_NUMBER_MAP_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTP_SEQUENCE_NUMBER_MAP_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
deque
>
#
include
<
optional
>
namespace
webrtc
{
class
RtpSequenceNumberMap
final
{
public
:
struct
Info
final
{
Info
(
uint32_t
timestamp
bool
is_first
bool
is_last
)
:
timestamp
(
timestamp
)
is_first
(
is_first
)
is_last
(
is_last
)
{
}
friend
bool
operator
=
=
(
const
Info
&
lhs
const
Info
&
rhs
)
{
return
lhs
.
timestamp
=
=
rhs
.
timestamp
&
&
lhs
.
is_first
=
=
rhs
.
is_first
&
&
lhs
.
is_last
=
=
rhs
.
is_last
;
}
uint32_t
timestamp
;
bool
is_first
;
bool
is_last
;
}
;
explicit
RtpSequenceNumberMap
(
size_t
max_entries
)
;
RtpSequenceNumberMap
(
const
RtpSequenceNumberMap
&
other
)
=
delete
;
RtpSequenceNumberMap
&
operator
=
(
const
RtpSequenceNumberMap
&
other
)
=
delete
;
~
RtpSequenceNumberMap
(
)
;
void
InsertPacket
(
uint16_t
sequence_number
Info
info
)
;
void
InsertFrame
(
uint16_t
first_sequence_number
size_t
packet_count
uint32_t
timestamp
)
;
std
:
:
optional
<
Info
>
Get
(
uint16_t
sequence_number
)
const
;
size_t
AssociationCountForTesting
(
)
const
;
private
:
struct
Association
{
explicit
Association
(
uint16_t
sequence_number
)
:
Association
(
sequence_number
Info
(
0
false
false
)
)
{
}
Association
(
uint16_t
sequence_number
Info
info
)
:
sequence_number
(
sequence_number
)
info
(
info
)
{
}
uint16_t
sequence_number
;
Info
info
;
}
;
const
size_t
max_entries_
;
std
:
:
deque
<
Association
>
associations_
;
}
;
}
#
endif
