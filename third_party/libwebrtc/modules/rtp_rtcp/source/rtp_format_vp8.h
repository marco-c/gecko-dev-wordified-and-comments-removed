#
ifndef
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VP8_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_VP8_H_
#
include
<
stddef
.
h
>
#
include
<
cstdint
>
#
include
<
vector
>
#
include
"
absl
/
container
/
inlined_vector
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_format
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_to_send
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
vp8
/
include
/
vp8_globals
.
h
"
namespace
webrtc
{
class
RtpPacketizerVp8
:
public
RtpPacketizer
{
public
:
RtpPacketizerVp8
(
ArrayView
<
const
uint8_t
>
payload
PayloadSizeLimits
limits
const
RTPVideoHeaderVP8
&
hdr_info
)
;
~
RtpPacketizerVp8
(
)
override
;
RtpPacketizerVp8
(
const
RtpPacketizerVp8
&
)
=
delete
;
RtpPacketizerVp8
&
operator
=
(
const
RtpPacketizerVp8
&
)
=
delete
;
size_t
NumPackets
(
)
const
override
;
bool
NextPacket
(
RtpPacketToSend
*
packet
)
override
;
private
:
using
RawHeader
=
absl
:
:
InlinedVector
<
uint8_t
6
>
;
static
RawHeader
BuildHeader
(
const
RTPVideoHeaderVP8
&
header
)
;
RawHeader
hdr_
;
ArrayView
<
const
uint8_t
>
remaining_payload_
;
std
:
:
vector
<
int
>
payload_sizes_
;
std
:
:
vector
<
int
>
:
:
const_iterator
current_packet_
;
}
;
}
#
endif
