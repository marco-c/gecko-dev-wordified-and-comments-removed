#
include
"
modules
/
rtp_rtcp
/
source
/
video_rtp_depacketizer_raw
.
h
"
#
include
<
cstdint
>
#
include
<
optional
>
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
TEST
(
VideoRtpDepacketizerRaw
PassRtpPayloadAsVideoPayload
)
{
const
uint8_t
kPayload
[
]
=
{
0x05
0x25
0x52
}
;
rtc
:
:
CopyOnWriteBuffer
rtp_payload
(
kPayload
)
;
VideoRtpDepacketizerRaw
depacketizer
;
std
:
:
optional
<
VideoRtpDepacketizer
:
:
ParsedRtpPayload
>
parsed
=
depacketizer
.
Parse
(
rtp_payload
)
;
ASSERT_TRUE
(
parsed
)
;
EXPECT_EQ
(
parsed
-
>
video_payload
.
size
(
)
rtp_payload
.
size
(
)
)
;
EXPECT_EQ
(
parsed
-
>
video_payload
.
cdata
(
)
rtp_payload
.
cdata
(
)
)
;
}
TEST
(
VideoRtpDepacketizerRaw
UsesDefaultValuesForVideoHeader
)
{
const
uint8_t
kPayload
[
]
=
{
0x05
0x25
0x52
}
;
rtc
:
:
CopyOnWriteBuffer
rtp_payload
(
kPayload
)
;
VideoRtpDepacketizerRaw
depacketizer
;
std
:
:
optional
<
VideoRtpDepacketizer
:
:
ParsedRtpPayload
>
parsed
=
depacketizer
.
Parse
(
rtp_payload
)
;
ASSERT_TRUE
(
parsed
)
;
EXPECT_FALSE
(
parsed
-
>
video_header
.
generic
)
;
EXPECT_EQ
(
parsed
-
>
video_header
.
codec
kVideoCodecGeneric
)
;
}
}
}
