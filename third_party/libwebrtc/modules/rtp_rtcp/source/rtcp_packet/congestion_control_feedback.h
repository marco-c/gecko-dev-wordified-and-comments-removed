#
ifndef
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_CONGESTION_CONTROL_FEEDBACK_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_CONGESTION_CONTROL_FEEDBACK_H_
#
include
<
cstdint
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
common_header
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
rtpfb
.
h
"
#
include
"
rtc_base
/
network
/
ecn_marking
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
CongestionControlFeedback
:
public
Rtpfb
{
public
:
struct
PacketInfo
{
uint32_t
ssrc
=
0
;
uint16_t
sequence_number
=
0
;
TimeDelta
arrival_time_offset
=
TimeDelta
:
:
Zero
(
)
;
rtc
:
:
EcnMarking
ecn
=
rtc
:
:
EcnMarking
:
:
kNotEct
;
}
;
static
constexpr
uint8_t
kFeedbackMessageType
=
11
;
CongestionControlFeedback
(
std
:
:
vector
<
PacketInfo
>
packets
uint32_t
report_timestamp_compact_ntp
)
;
CongestionControlFeedback
(
)
=
default
;
bool
Parse
(
const
CommonHeader
&
packet
)
;
rtc
:
:
ArrayView
<
const
PacketInfo
>
packets
(
)
const
{
return
packets_
;
}
uint32_t
report_timestamp_compact_ntp
(
)
const
{
return
report_timestamp_compact_ntp_
;
}
bool
Create
(
uint8_t
*
packet
size_t
*
position
size_t
max_length
PacketReadyCallback
callback
)
const
override
;
size_t
BlockLength
(
)
const
override
;
private
:
std
:
:
vector
<
PacketInfo
>
packets_
;
uint32_t
report_timestamp_compact_ntp_
=
0
;
}
;
}
}
#
endif
