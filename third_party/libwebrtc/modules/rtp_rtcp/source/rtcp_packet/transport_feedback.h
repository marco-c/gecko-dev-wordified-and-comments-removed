#
ifndef
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_TRANSPORT_FEEDBACK_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_TRANSPORT_FEEDBACK_H_
#
include
<
array
>
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
function_view
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
rtpfb
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
CommonHeader
;
class
TransportFeedback
:
public
Rtpfb
{
public
:
class
ReceivedPacket
{
public
:
ReceivedPacket
(
uint16_t
sequence_number
int16_t
delta_ticks
)
:
sequence_number_
(
sequence_number
)
delta_ticks_
(
delta_ticks
)
{
}
ReceivedPacket
(
const
ReceivedPacket
&
)
=
default
;
ReceivedPacket
&
operator
=
(
const
ReceivedPacket
&
)
=
default
;
uint16_t
sequence_number
(
)
const
{
return
sequence_number_
;
}
int16_t
delta_ticks
(
)
const
{
return
delta_ticks_
;
}
TimeDelta
delta
(
)
const
{
return
delta_ticks_
*
kDeltaTick
;
}
private
:
uint16_t
sequence_number_
;
int16_t
delta_ticks_
;
}
;
static
constexpr
uint8_t
kFeedbackMessageType
=
15
;
static
constexpr
TimeDelta
kDeltaTick
=
TimeDelta
:
:
Micros
(
250
)
;
static
constexpr
size_t
kMaxReportedPackets
=
0xffff
;
TransportFeedback
(
)
;
explicit
TransportFeedback
(
bool
include_timestamps
)
;
TransportFeedback
(
const
TransportFeedback
&
)
;
TransportFeedback
(
TransportFeedback
&
&
)
;
~
TransportFeedback
(
)
override
;
void
SetBase
(
uint16_t
base_sequence
Timestamp
ref_timestamp
)
;
void
SetFeedbackSequenceNumber
(
uint8_t
feedback_sequence
)
;
bool
AddReceivedPacket
(
uint16_t
sequence_number
Timestamp
timestamp
)
;
const
std
:
:
vector
<
ReceivedPacket
>
&
GetReceivedPackets
(
)
const
;
void
ForAllPackets
(
FunctionView
<
void
(
uint16_t
sequence_number
TimeDelta
delta_since_base
)
>
handler
)
const
;
uint16_t
GetBaseSequence
(
)
const
;
size_t
GetPacketStatusCount
(
)
const
{
return
num_seq_no_
;
}
Timestamp
BaseTime
(
)
const
;
TimeDelta
GetBaseDelta
(
Timestamp
prev_timestamp
)
const
;
bool
IncludeTimestamps
(
)
const
{
return
include_timestamps_
;
}
bool
Parse
(
const
CommonHeader
&
packet
)
;
static
std
:
:
unique_ptr
<
TransportFeedback
>
ParseFrom
(
const
uint8_t
*
buffer
size_t
length
)
;
bool
IsConsistent
(
)
const
;
size_t
BlockLength
(
)
const
override
;
size_t
PaddingLength
(
)
const
;
bool
Create
(
uint8_t
*
packet
size_t
*
position
size_t
max_length
PacketReadyCallback
callback
)
const
override
;
private
:
using
DeltaSize
=
uint8_t
;
class
LastChunk
{
public
:
using
DeltaSize
=
TransportFeedback
:
:
DeltaSize
;
static
constexpr
size_t
kMaxRunLengthCapacity
=
0x1fff
;
LastChunk
(
)
;
bool
Empty
(
)
const
;
void
Clear
(
)
;
bool
CanAdd
(
DeltaSize
delta_size
)
const
;
void
Add
(
DeltaSize
delta_size
)
;
void
AddMissingPackets
(
size_t
num_missing
)
;
uint16_t
Emit
(
)
;
uint16_t
EncodeLast
(
)
const
;
void
Decode
(
uint16_t
chunk
size_t
max_size
)
;
void
AppendTo
(
std
:
:
vector
<
DeltaSize
>
*
deltas
)
const
;
private
:
static
constexpr
size_t
kMaxOneBitCapacity
=
14
;
static
constexpr
size_t
kMaxTwoBitCapacity
=
7
;
static
constexpr
size_t
kMaxVectorCapacity
=
kMaxOneBitCapacity
;
static
constexpr
DeltaSize
kLarge
=
2
;
uint16_t
EncodeOneBit
(
)
const
;
void
DecodeOneBit
(
uint16_t
chunk
size_t
max_size
)
;
uint16_t
EncodeTwoBit
(
size_t
size
)
const
;
void
DecodeTwoBit
(
uint16_t
chunk
size_t
max_size
)
;
uint16_t
EncodeRunLength
(
)
const
;
void
DecodeRunLength
(
uint16_t
chunk
size_t
max_size
)
;
std
:
:
array
<
DeltaSize
kMaxVectorCapacity
>
delta_sizes_
;
size_t
size_
;
bool
all_same_
;
bool
has_large_delta_
;
}
;
void
Clear
(
)
;
bool
AddDeltaSize
(
DeltaSize
delta_size
)
;
bool
AddMissingPackets
(
size_t
num_missing_packets
)
;
uint16_t
base_seq_no_
;
uint16_t
num_seq_no_
;
uint32_t
base_time_ticks_
;
uint8_t
feedback_seq_
;
bool
include_timestamps_
;
Timestamp
last_timestamp_
;
std
:
:
vector
<
ReceivedPacket
>
received_packets_
;
std
:
:
vector
<
ReceivedPacket
>
all_packets_
;
std
:
:
vector
<
uint16_t
>
encoded_chunks_
;
LastChunk
last_chunk_
;
size_t
size_bytes_
;
}
;
}
}
#
endif
