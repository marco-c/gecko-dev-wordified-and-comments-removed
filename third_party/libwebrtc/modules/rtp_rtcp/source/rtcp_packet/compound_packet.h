#
ifndef
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_COMPOUND_PACKET_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_COMPOUND_PACKET_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
CompoundPacket
:
public
RtcpPacket
{
public
:
CompoundPacket
(
)
;
~
CompoundPacket
(
)
override
;
void
Append
(
std
:
:
unique_ptr
<
RtcpPacket
>
packet
)
;
template
<
typename
T
>
void
Append
(
T
*
packet
)
{
Append
(
std
:
:
make_unique
<
T
>
(
*
packet
)
)
;
}
size_t
BlockLength
(
)
const
override
;
bool
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
PacketReadyCallback
callback
)
const
override
;
protected
:
std
:
:
vector
<
std
:
:
unique_ptr
<
RtcpPacket
>
>
appended_packets_
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
CompoundPacket
)
;
}
;
}
}
#
endif
