#
ifndef
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_REMOTE_ESTIMATE_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_REMOTE_ESTIMATE_H_
#
include
<
cstdint
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
transport
/
network_types
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
app
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
CommonHeader
;
class
RemoteEstimateSerializer
{
public
:
virtual
bool
Parse
(
ArrayView
<
const
uint8_t
>
src
NetworkStateEstimate
*
target
)
const
=
0
;
virtual
Buffer
Serialize
(
const
NetworkStateEstimate
&
src
)
const
=
0
;
virtual
~
RemoteEstimateSerializer
(
)
=
default
;
}
;
const
RemoteEstimateSerializer
*
GetRemoteEstimateSerializer
(
)
;
class
RemoteEstimate
:
public
App
{
public
:
RemoteEstimate
(
)
;
explicit
RemoteEstimate
(
App
&
&
app
)
;
static
constexpr
uint8_t
kSubType
=
13
;
static
constexpr
uint32_t
kName
=
NameToInt
(
"
goog
"
)
;
static
TimeDelta
GetTimestampPeriod
(
)
;
bool
ParseData
(
)
;
void
SetEstimate
(
NetworkStateEstimate
estimate
)
;
NetworkStateEstimate
estimate
(
)
const
{
return
estimate_
;
}
private
:
NetworkStateEstimate
estimate_
;
const
RemoteEstimateSerializer
*
const
serializer_
;
}
;
}
}
#
endif
