#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
transport_feedback
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
cstring
>
#
include
<
limits
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
byte_io
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
common_header
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
using
rtcp
:
:
TransportFeedback
;
using
:
:
testing
:
:
AllOf
;
using
:
:
testing
:
:
Each
;
using
:
:
testing
:
:
ElementsAreArray
;
using
:
:
testing
:
:
Eq
;
using
:
:
testing
:
:
InSequence
;
using
:
:
testing
:
:
MockFunction
;
using
:
:
testing
:
:
Ne
;
using
:
:
testing
:
:
Property
;
using
:
:
testing
:
:
SizeIs
;
constexpr
int
kHeaderSize
=
20
;
constexpr
int
kStatusChunkSize
=
2
;
constexpr
int
kSmallDeltaSize
=
1
;
constexpr
int
kLargeDeltaSize
=
2
;
constexpr
TimeDelta
kDeltaLimit
=
0xFF
*
TransportFeedback
:
:
kDeltaTick
;
constexpr
TimeDelta
kBaseTimeTick
=
TransportFeedback
:
:
kDeltaTick
*
(
1
<
<
8
)
;
constexpr
TimeDelta
kBaseTimeWrapPeriod
=
kBaseTimeTick
*
(
1
<
<
24
)
;
MATCHER_P2
(
Near
value
max_abs_error
"
"
)
{
return
value
-
max_abs_error
<
=
arg
&
&
arg
<
=
value
+
max_abs_error
;
}
MATCHER
(
IsValidFeedback
"
"
)
{
rtcp
:
:
CommonHeader
rtcp_header
;
TransportFeedback
feedback
;
return
rtcp_header
.
Parse
(
std
:
:
data
(
arg
)
std
:
:
size
(
arg
)
)
&
&
rtcp_header
.
type
(
)
=
=
TransportFeedback
:
:
kPacketType
&
&
rtcp_header
.
fmt
(
)
=
=
TransportFeedback
:
:
kFeedbackMessageType
&
&
feedback
.
Parse
(
rtcp_header
)
;
}
TransportFeedback
Parse
(
ArrayView
<
const
uint8_t
>
buffer
)
{
rtcp
:
:
CommonHeader
header
;
EXPECT_TRUE
(
header
.
Parse
(
buffer
.
data
(
)
buffer
.
size
(
)
)
)
;
EXPECT_EQ
(
header
.
type
(
)
TransportFeedback
:
:
kPacketType
)
;
EXPECT_EQ
(
header
.
fmt
(
)
TransportFeedback
:
:
kFeedbackMessageType
)
;
TransportFeedback
feedback
;
EXPECT_TRUE
(
feedback
.
Parse
(
header
)
)
;
return
feedback
;
}
class
FeedbackTester
{
public
:
FeedbackTester
(
)
:
FeedbackTester
(
true
)
{
}
explicit
FeedbackTester
(
bool
include_timestamps
)
:
expected_size_
(
kAnySize
)
default_delta_
(
TransportFeedback
:
:
kDeltaTick
*
4
)
include_timestamps_
(
include_timestamps
)
{
}
void
WithExpectedSize
(
size_t
expected_size
)
{
expected_size_
=
expected_size
;
}
void
WithDefaultDelta
(
TimeDelta
delta
)
{
default_delta_
=
delta
;
}
void
WithInput
(
ArrayView
<
const
uint16_t
>
received_seq
ArrayView
<
const
Timestamp
>
received_ts
=
{
}
)
{
std
:
:
vector
<
Timestamp
>
temp_timestamps
;
if
(
received_ts
.
empty
(
)
)
{
temp_timestamps
=
GenerateReceiveTimestamps
(
received_seq
)
;
received_ts
=
temp_timestamps
;
}
ASSERT_EQ
(
received_seq
.
size
(
)
received_ts
.
size
(
)
)
;
expected_deltas_
.
clear
(
)
;
feedback_
.
emplace
(
include_timestamps_
)
;
feedback_
-
>
SetBase
(
received_seq
[
0
]
received_ts
[
0
]
)
;
ASSERT_TRUE
(
feedback_
-
>
IsConsistent
(
)
)
;
EXPECT_TRUE
(
feedback_
-
>
AddReceivedPacket
(
received_seq
[
0
]
received_ts
[
0
]
)
)
;
expected_deltas_
.
push_back
(
-
feedback_
-
>
GetBaseDelta
(
received_ts
[
0
]
)
)
;
for
(
size_t
i
=
1
;
i
<
received_ts
.
size
(
)
;
+
+
i
)
{
EXPECT_TRUE
(
feedback_
-
>
AddReceivedPacket
(
received_seq
[
i
]
received_ts
[
i
]
)
)
;
expected_deltas_
.
push_back
(
received_ts
[
i
]
-
received_ts
[
i
-
1
]
)
;
}
ASSERT_TRUE
(
feedback_
-
>
IsConsistent
(
)
)
;
expected_seq_
.
assign
(
received_seq
.
begin
(
)
received_seq
.
end
(
)
)
;
}
void
VerifyPacket
(
)
{
ASSERT_TRUE
(
feedback_
-
>
IsConsistent
(
)
)
;
serialized_
=
feedback_
-
>
Build
(
)
;
VerifyInternal
(
)
;
feedback_
.
emplace
(
Parse
(
serialized_
)
)
;
ASSERT_TRUE
(
feedback_
-
>
IsConsistent
(
)
)
;
EXPECT_EQ
(
include_timestamps_
feedback_
-
>
IncludeTimestamps
(
)
)
;
VerifyInternal
(
)
;
}
static
constexpr
size_t
kAnySize
=
static_cast
<
size_t
>
(
0
)
-
1
;
private
:
void
VerifyInternal
(
)
{
if
(
expected_size_
!
=
kAnySize
)
{
size_t
expected_size_words
=
(
expected_size_
+
3
)
/
4
;
size_t
expected_size_bytes
=
expected_size_words
*
4
;
EXPECT_EQ
(
expected_size_bytes
serialized_
.
size
(
)
)
;
}
std
:
:
vector
<
uint16_t
>
actual_seq_nos
;
std
:
:
vector
<
TimeDelta
>
actual_deltas
;
for
(
const
auto
&
packet
:
feedback_
-
>
GetReceivedPackets
(
)
)
{
actual_seq_nos
.
push_back
(
packet
.
sequence_number
(
)
)
;
actual_deltas
.
push_back
(
packet
.
delta
(
)
)
;
}
EXPECT_THAT
(
actual_seq_nos
ElementsAreArray
(
expected_seq_
)
)
;
if
(
include_timestamps_
)
{
EXPECT_THAT
(
actual_deltas
ElementsAreArray
(
expected_deltas_
)
)
;
}
}
std
:
:
vector
<
Timestamp
>
GenerateReceiveTimestamps
(
ArrayView
<
const
uint16_t
>
seq_nums
)
{
RTC_CHECK
(
!
seq_nums
.
empty
(
)
)
;
uint16_t
last_seq
=
seq_nums
[
0
]
;
Timestamp
time
=
Timestamp
:
:
Zero
(
)
;
std
:
:
vector
<
Timestamp
>
result
;
for
(
uint16_t
seq
:
seq_nums
)
{
if
(
seq
<
last_seq
)
time
+
=
0x10000
*
default_delta_
;
last_seq
=
seq
;
result
.
push_back
(
time
+
last_seq
*
default_delta_
)
;
}
return
result
;
}
std
:
:
vector
<
uint16_t
>
expected_seq_
;
std
:
:
vector
<
TimeDelta
>
expected_deltas_
;
size_t
expected_size_
;
TimeDelta
default_delta_
;
std
:
:
optional
<
TransportFeedback
>
feedback_
;
Buffer
serialized_
;
bool
include_timestamps_
;
}
;
TEST
(
RtcpPacketTest
TransportFeedbackOneBitVector
)
{
const
uint16_t
kReceived
[
]
=
{
1
2
7
8
9
10
13
}
;
const
size_t
kLength
=
sizeof
(
kReceived
)
/
sizeof
(
uint16_t
)
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
kStatusChunkSize
+
(
kLength
*
kSmallDeltaSize
)
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackOneBitVectorNoRecvDelta
)
{
const
uint16_t
kReceived
[
]
=
{
1
2
7
8
9
10
13
}
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
kStatusChunkSize
;
FeedbackTester
test
(
false
)
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackFullOneBitVector
)
{
const
uint16_t
kReceived
[
]
=
{
1
2
7
8
9
10
13
14
}
;
const
size_t
kLength
=
sizeof
(
kReceived
)
/
sizeof
(
uint16_t
)
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
kStatusChunkSize
+
(
kLength
*
kSmallDeltaSize
)
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackOneBitVectorWrapReceived
)
{
const
uint16_t
kMax
=
0xFFFF
;
const
uint16_t
kReceived
[
]
=
{
kMax
-
2
kMax
-
1
kMax
0
1
2
}
;
const
size_t
kLength
=
sizeof
(
kReceived
)
/
sizeof
(
uint16_t
)
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
kStatusChunkSize
+
(
kLength
*
kSmallDeltaSize
)
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackOneBitVectorWrapMissing
)
{
const
uint16_t
kMax
=
0xFFFF
;
const
uint16_t
kReceived
[
]
=
{
kMax
-
2
kMax
-
1
1
2
}
;
const
size_t
kLength
=
sizeof
(
kReceived
)
/
sizeof
(
uint16_t
)
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
kStatusChunkSize
+
(
kLength
*
kSmallDeltaSize
)
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackTwoBitVector
)
{
const
uint16_t
kReceived
[
]
=
{
1
2
6
7
}
;
const
size_t
kLength
=
sizeof
(
kReceived
)
/
sizeof
(
uint16_t
)
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
kStatusChunkSize
+
(
kLength
*
kLargeDeltaSize
)
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithDefaultDelta
(
kDeltaLimit
+
TransportFeedback
:
:
kDeltaTick
)
;
test
.
WithInput
(
kReceived
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackTwoBitVectorFull
)
{
const
uint16_t
kReceived
[
]
=
{
1
2
6
7
8
}
;
const
size_t
kLength
=
sizeof
(
kReceived
)
/
sizeof
(
uint16_t
)
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
(
2
*
kStatusChunkSize
)
+
(
kLength
*
kLargeDeltaSize
)
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithDefaultDelta
(
kDeltaLimit
+
TransportFeedback
:
:
kDeltaTick
)
;
test
.
WithInput
(
kReceived
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackWithLargeBaseTimeIsConsistent
)
{
TransportFeedback
tb
;
constexpr
Timestamp
kTimestamp
=
Timestamp
:
:
Zero
(
)
+
int64_t
{
0x7fff
'
ffff
}
*
TransportFeedback
:
:
kDeltaTick
;
tb
.
SetBase
(
0
kTimestamp
)
;
tb
.
AddReceivedPacket
(
0
kTimestamp
)
;
EXPECT_TRUE
(
tb
.
IsConsistent
(
)
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackLargeAndNegativeDeltas
)
{
const
uint16_t
kReceived
[
]
=
{
1
2
6
7
8
}
;
const
Timestamp
kReceiveTimes
[
]
=
{
Timestamp
:
:
Millis
(
2
)
Timestamp
:
:
Millis
(
1
)
Timestamp
:
:
Millis
(
4
)
Timestamp
:
:
Millis
(
3
)
Timestamp
:
:
Millis
(
3
)
+
TransportFeedback
:
:
kDeltaTick
*
(
1
<
<
8
)
}
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
kStatusChunkSize
+
(
3
*
kLargeDeltaSize
)
+
kSmallDeltaSize
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
kReceiveTimes
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackMaxRle
)
{
const
size_t
kPacketCount
=
(
1
<
<
13
)
-
1
+
14
;
const
uint16_t
kReceived
[
]
=
{
0
kPacketCount
}
;
const
Timestamp
kReceiveTimes
[
]
=
{
Timestamp
:
:
Millis
(
1
)
Timestamp
:
:
Millis
(
2
)
}
;
const
size_t
kLength
=
sizeof
(
kReceived
)
/
sizeof
(
uint16_t
)
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
(
3
*
kStatusChunkSize
)
+
(
kLength
*
kSmallDeltaSize
)
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
kReceiveTimes
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackMinRle
)
{
const
uint16_t
kReceived
[
]
=
{
0
(
14
*
2
)
+
1
}
;
const
Timestamp
kReceiveTimes
[
]
=
{
Timestamp
:
:
Millis
(
1
)
Timestamp
:
:
Millis
(
2
)
}
;
const
size_t
kLength
=
sizeof
(
kReceived
)
/
sizeof
(
uint16_t
)
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
(
3
*
kStatusChunkSize
)
+
(
kLength
*
kSmallDeltaSize
)
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
kReceiveTimes
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackOneToTwoBitVector
)
{
const
size_t
kTwoBitVectorCapacity
=
7
;
const
uint16_t
kReceived
[
]
=
{
0
kTwoBitVectorCapacity
-
1
}
;
const
Timestamp
kReceiveTimes
[
]
=
{
Timestamp
:
:
Zero
(
)
Timestamp
:
:
Zero
(
)
+
kDeltaLimit
+
TransportFeedback
:
:
kDeltaTick
}
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
kStatusChunkSize
+
kSmallDeltaSize
+
kLargeDeltaSize
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
kReceiveTimes
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackOneToTwoBitVectorSimpleSplit
)
{
const
size_t
kTwoBitVectorCapacity
=
7
;
const
uint16_t
kReceived
[
]
=
{
0
kTwoBitVectorCapacity
}
;
const
Timestamp
kReceiveTimes
[
]
=
{
Timestamp
:
:
Zero
(
)
Timestamp
:
:
Zero
(
)
+
kDeltaLimit
+
TransportFeedback
:
:
kDeltaTick
}
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
(
kStatusChunkSize
*
2
)
+
kSmallDeltaSize
+
kLargeDeltaSize
;
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
kReceiveTimes
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackOneToTwoBitVectorSplit
)
{
const
TimeDelta
kLargeDelta
=
TransportFeedback
:
:
kDeltaTick
*
(
1
<
<
8
)
;
const
size_t
kNumPackets
=
(
3
*
7
)
+
1
;
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
(
kStatusChunkSize
*
3
)
+
(
kSmallDeltaSize
*
(
kNumPackets
-
1
)
)
+
(
kLargeDeltaSize
*
1
)
;
uint16_t
kReceived
[
kNumPackets
]
;
for
(
size_t
i
=
0
;
i
<
kNumPackets
;
+
+
i
)
kReceived
[
i
]
=
i
;
std
:
:
vector
<
Timestamp
>
receive_times
;
receive_times
.
reserve
(
kNumPackets
)
;
receive_times
.
push_back
(
Timestamp
:
:
Millis
(
1
)
)
;
for
(
size_t
i
=
1
;
i
<
kNumPackets
;
+
+
i
)
{
TimeDelta
delta
=
(
i
=
=
8
)
?
kLargeDelta
:
TimeDelta
:
:
Millis
(
1
)
;
receive_times
.
push_back
(
receive_times
.
back
(
)
+
delta
)
;
}
FeedbackTester
test
;
test
.
WithExpectedSize
(
kExpectedSizeBytes
)
;
test
.
WithInput
(
kReceived
receive_times
)
;
test
.
VerifyPacket
(
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackAliasing
)
{
TransportFeedback
feedback
;
feedback
.
SetBase
(
0
Timestamp
:
:
Zero
(
)
)
;
const
int
kSamples
=
100
;
const
TimeDelta
kTooSmallDelta
=
TransportFeedback
:
:
kDeltaTick
/
3
;
for
(
int
i
=
0
;
i
<
kSamples
;
+
+
i
)
feedback
.
AddReceivedPacket
(
i
Timestamp
:
:
Zero
(
)
+
i
*
kTooSmallDelta
)
;
feedback
.
Build
(
)
;
TimeDelta
accumulated_delta
=
TimeDelta
:
:
Zero
(
)
;
int
num_samples
=
0
;
for
(
const
auto
&
packet
:
feedback
.
GetReceivedPackets
(
)
)
{
accumulated_delta
+
=
packet
.
delta
(
)
;
TimeDelta
expected_time
=
num_samples
*
kTooSmallDelta
;
+
+
num_samples
;
EXPECT_THAT
(
accumulated_delta
Near
(
expected_time
TransportFeedback
:
:
kDeltaTick
/
2
)
)
;
}
}
TEST
(
RtcpPacketTest
TransportFeedbackLimits
)
{
std
:
:
unique_ptr
<
TransportFeedback
>
packet
(
new
TransportFeedback
(
)
)
;
packet
-
>
SetBase
(
0
Timestamp
:
:
Zero
(
)
)
;
EXPECT_TRUE
(
packet
-
>
AddReceivedPacket
(
0x0
Timestamp
:
:
Zero
(
)
)
)
;
EXPECT_TRUE
(
packet
-
>
AddReceivedPacket
(
0x8000
Timestamp
:
:
Millis
(
1
)
)
)
;
packet
.
reset
(
new
TransportFeedback
(
)
)
;
packet
-
>
SetBase
(
0
Timestamp
:
:
Zero
(
)
)
;
EXPECT_TRUE
(
packet
-
>
AddReceivedPacket
(
0x0
Timestamp
:
:
Zero
(
)
)
)
;
EXPECT_FALSE
(
packet
-
>
AddReceivedPacket
(
0x8000
+
1
Timestamp
:
:
Millis
(
1
)
)
)
;
packet
.
reset
(
new
TransportFeedback
(
)
)
;
packet
-
>
SetBase
(
0
Timestamp
:
:
Zero
(
)
)
;
EXPECT_TRUE
(
packet
-
>
AddReceivedPacket
(
0x0
Timestamp
:
:
Zero
(
)
)
)
;
EXPECT_TRUE
(
packet
-
>
AddReceivedPacket
(
0x8000
Timestamp
:
:
Millis
(
1
)
)
)
;
EXPECT_TRUE
(
packet
-
>
AddReceivedPacket
(
0xFFFE
Timestamp
:
:
Millis
(
2
)
)
)
;
EXPECT_FALSE
(
packet
-
>
AddReceivedPacket
(
0xFFFF
Timestamp
:
:
Millis
(
3
)
)
)
;
packet
.
reset
(
new
TransportFeedback
(
)
)
;
packet
-
>
SetBase
(
0
Timestamp
:
:
Zero
(
)
)
;
TimeDelta
kMaxPositiveTimeDelta
=
std
:
:
numeric_limits
<
int16_t
>
:
:
max
(
)
*
TransportFeedback
:
:
kDeltaTick
;
EXPECT_FALSE
(
packet
-
>
AddReceivedPacket
(
1
Timestamp
:
:
Zero
(
)
+
kMaxPositiveTimeDelta
+
TransportFeedback
:
:
kDeltaTick
)
)
;
EXPECT_TRUE
(
packet
-
>
AddReceivedPacket
(
1
Timestamp
:
:
Zero
(
)
+
kMaxPositiveTimeDelta
)
)
;
packet
.
reset
(
new
TransportFeedback
(
)
)
;
TimeDelta
kMaxNegativeTimeDelta
=
std
:
:
numeric_limits
<
int16_t
>
:
:
min
(
)
*
TransportFeedback
:
:
kDeltaTick
;
Timestamp
kBaseTime
=
Timestamp
:
:
Seconds
(
1
'
000
'
000
)
;
packet
-
>
SetBase
(
0
kBaseTime
)
;
EXPECT_FALSE
(
packet
-
>
AddReceivedPacket
(
1
kBaseTime
+
kMaxNegativeTimeDelta
-
TransportFeedback
:
:
kDeltaTick
)
)
;
EXPECT_TRUE
(
packet
-
>
AddReceivedPacket
(
1
kBaseTime
+
kMaxNegativeTimeDelta
)
)
;
}
TEST
(
RtcpPacketTest
BaseTimeIsConsistentAcrossMultiplePackets
)
{
constexpr
Timestamp
kMaxBaseTime
=
Timestamp
:
:
Zero
(
)
+
kBaseTimeWrapPeriod
-
kBaseTimeTick
;
TransportFeedback
packet1
;
packet1
.
SetBase
(
0
kMaxBaseTime
)
;
packet1
.
AddReceivedPacket
(
0
kMaxBaseTime
)
;
TransportFeedback
parsed_packet1
=
Parse
(
packet1
.
Build
(
)
)
;
TransportFeedback
packet2
;
packet2
.
SetBase
(
1
kMaxBaseTime
+
kBaseTimeTick
)
;
packet2
.
AddReceivedPacket
(
1
kMaxBaseTime
+
kBaseTimeTick
)
;
TransportFeedback
parsed_packet2
=
Parse
(
packet2
.
Build
(
)
)
;
EXPECT_EQ
(
parsed_packet2
.
GetBaseDelta
(
parsed_packet1
.
BaseTime
(
)
)
kBaseTimeTick
)
;
}
TEST
(
RtcpPacketTest
SupportsMaximumNumberOfNegativeDeltas
)
{
TransportFeedback
feedback
;
Timestamp
time
=
Timestamp
:
:
Zero
(
)
+
1
'
000
*
kBaseTimeWrapPeriod
;
feedback
.
SetBase
(
0
time
)
;
static
constexpr
TimeDelta
kMinDelta
=
TransportFeedback
:
:
kDeltaTick
*
std
:
:
numeric_limits
<
int16_t
>
:
:
min
(
)
;
uint16_t
num_received_rtp_packets
=
0
;
time
+
=
kMinDelta
;
while
(
feedback
.
AddReceivedPacket
(
+
+
num_received_rtp_packets
time
)
)
{
ASSERT_GE
(
time
Timestamp
:
:
Zero
(
)
-
kMinDelta
)
;
time
+
=
kMinDelta
;
}
-
-
num_received_rtp_packets
;
EXPECT_TRUE
(
feedback
.
IsConsistent
(
)
)
;
TransportFeedback
parsed
=
Parse
(
feedback
.
Build
(
)
)
;
EXPECT_EQ
(
parsed
.
GetReceivedPackets
(
)
.
size
(
)
num_received_rtp_packets
)
;
EXPECT_THAT
(
parsed
.
GetReceivedPackets
(
)
AllOf
(
SizeIs
(
num_received_rtp_packets
)
Each
(
Property
(
&
TransportFeedback
:
:
ReceivedPacket
:
:
delta
Eq
(
kMinDelta
)
)
)
)
)
;
EXPECT_GE
(
parsed
.
BaseTime
(
)
Timestamp
:
:
Zero
(
)
-
kMinDelta
*
num_received_rtp_packets
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackPadding
)
{
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
kStatusChunkSize
+
kSmallDeltaSize
;
const
size_t
kExpectedSizeWords
=
(
kExpectedSizeBytes
+
3
)
/
4
;
const
size_t
kExpectedPaddingSizeBytes
=
4
*
kExpectedSizeWords
-
kExpectedSizeBytes
;
TransportFeedback
feedback
;
feedback
.
SetBase
(
0
Timestamp
:
:
Zero
(
)
)
;
EXPECT_TRUE
(
feedback
.
AddReceivedPacket
(
0
Timestamp
:
:
Zero
(
)
)
)
;
Buffer
packet
=
feedback
.
Build
(
)
;
EXPECT_EQ
(
kExpectedSizeWords
*
4
packet
.
size
(
)
)
;
ASSERT_GT
(
kExpectedSizeWords
*
4
kExpectedSizeBytes
)
;
for
(
size_t
i
=
kExpectedSizeBytes
;
i
<
(
kExpectedSizeWords
*
4
-
1
)
;
+
+
i
)
EXPECT_EQ
(
0u
packet
[
i
]
)
;
EXPECT_EQ
(
kExpectedPaddingSizeBytes
packet
[
kExpectedSizeWords
*
4
-
1
]
)
;
const
int
kPaddingBytes
=
4
;
const
size_t
kExpectedSizeWithPadding
=
(
kExpectedSizeWords
*
4
)
+
kPaddingBytes
;
uint8_t
mod_buffer
[
kExpectedSizeWithPadding
]
;
memcpy
(
mod_buffer
packet
.
data
(
)
kExpectedSizeWords
*
4
)
;
memset
(
&
mod_buffer
[
kExpectedSizeWords
*
4
]
0
kPaddingBytes
-
1
)
;
mod_buffer
[
kExpectedSizeWithPadding
-
1
]
=
kPaddingBytes
+
kExpectedPaddingSizeBytes
;
const
uint8_t
padding_flag
=
1
<
<
5
;
mod_buffer
[
0
]
|
=
padding_flag
;
ByteWriter
<
uint16_t
>
:
:
WriteBigEndian
(
&
mod_buffer
[
2
]
ByteReader
<
uint16_t
>
:
:
ReadBigEndian
(
&
mod_buffer
[
2
]
)
+
(
(
kPaddingBytes
+
3
)
/
4
)
)
;
EXPECT_THAT
(
mod_buffer
IsValidFeedback
(
)
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackPaddingBackwardsCompatibility
)
{
const
size_t
kExpectedSizeBytes
=
kHeaderSize
+
kStatusChunkSize
+
kSmallDeltaSize
;
const
size_t
kExpectedSizeWords
=
(
kExpectedSizeBytes
+
3
)
/
4
;
const
size_t
kExpectedPaddingSizeBytes
=
4
*
kExpectedSizeWords
-
kExpectedSizeBytes
;
TransportFeedback
feedback
;
feedback
.
SetBase
(
0
Timestamp
:
:
Zero
(
)
)
;
EXPECT_TRUE
(
feedback
.
AddReceivedPacket
(
0
Timestamp
:
:
Zero
(
)
)
)
;
Buffer
packet
=
feedback
.
Build
(
)
;
EXPECT_EQ
(
kExpectedSizeWords
*
4
packet
.
size
(
)
)
;
ASSERT_GT
(
kExpectedSizeWords
*
4
kExpectedSizeBytes
)
;
for
(
size_t
i
=
kExpectedSizeBytes
;
i
<
(
kExpectedSizeWords
*
4
-
1
)
;
+
+
i
)
EXPECT_EQ
(
0u
packet
[
i
]
)
;
EXPECT_GT
(
kExpectedPaddingSizeBytes
0u
)
;
EXPECT_EQ
(
kExpectedPaddingSizeBytes
packet
[
kExpectedSizeWords
*
4
-
1
]
)
;
uint8_t
mod_buffer
[
kExpectedSizeWords
*
4
]
;
memcpy
(
mod_buffer
packet
.
data
(
)
kExpectedSizeWords
*
4
)
;
mod_buffer
[
kExpectedSizeWords
*
4
-
1
]
=
0
;
const
uint8_t
padding_flag
=
1
<
<
5
;
mod_buffer
[
0
]
&
=
~
padding_flag
;
EXPECT_THAT
(
mod_buffer
IsValidFeedback
(
)
)
;
}
TEST
(
RtcpPacketTest
TransportFeedbackCorrectlySplitsVectorChunks
)
{
const
int
kOneBitVectorCapacity
=
14
;
const
TimeDelta
kLargeTimeDelta
=
TransportFeedback
:
:
kDeltaTick
*
(
1
<
<
8
)
;
for
(
int
deltas
=
0
;
deltas
<
=
kOneBitVectorCapacity
+
1
;
+
+
deltas
)
{
TransportFeedback
feedback
;
feedback
.
SetBase
(
0
Timestamp
:
:
Zero
(
)
)
;
for
(
int
i
=
0
;
i
<
deltas
;
+
+
i
)
feedback
.
AddReceivedPacket
(
i
Timestamp
:
:
Millis
(
i
)
)
;
feedback
.
AddReceivedPacket
(
deltas
Timestamp
:
:
Millis
(
deltas
)
+
kLargeTimeDelta
)
;
EXPECT_THAT
(
feedback
.
Build
(
)
IsValidFeedback
(
)
)
;
}
}
TEST
(
RtcpPacketTest
TransportFeedbackMoveConstructor
)
{
const
int
kSamples
=
100
;
const
uint16_t
kBaseSeqNo
=
7531
;
const
Timestamp
kBaseTimestamp
=
Timestamp
:
:
Micros
(
123
'
456
'
789
)
;
const
uint8_t
kFeedbackSeqNo
=
90
;
TransportFeedback
feedback
;
feedback
.
SetBase
(
kBaseSeqNo
kBaseTimestamp
)
;
feedback
.
SetFeedbackSequenceNumber
(
kFeedbackSeqNo
)
;
for
(
int
i
=
0
;
i
<
kSamples
;
+
+
i
)
{
feedback
.
AddReceivedPacket
(
kBaseSeqNo
+
i
kBaseTimestamp
+
i
*
TransportFeedback
:
:
kDeltaTick
)
;
}
EXPECT_TRUE
(
feedback
.
IsConsistent
(
)
)
;
TransportFeedback
feedback_copy
(
feedback
)
;
EXPECT_TRUE
(
feedback_copy
.
IsConsistent
(
)
)
;
EXPECT_TRUE
(
feedback
.
IsConsistent
(
)
)
;
EXPECT_EQ
(
feedback_copy
.
Build
(
)
feedback
.
Build
(
)
)
;
TransportFeedback
moved
(
std
:
:
move
(
feedback
)
)
;
EXPECT_TRUE
(
moved
.
IsConsistent
(
)
)
;
EXPECT_TRUE
(
feedback
.
IsConsistent
(
)
)
;
EXPECT_EQ
(
moved
.
Build
(
)
feedback_copy
.
Build
(
)
)
;
}
TEST
(
TransportFeedbackTest
ReportsMissingPackets
)
{
const
uint16_t
kBaseSeqNo
=
1000
;
const
Timestamp
kBaseTimestamp
=
Timestamp
:
:
Millis
(
10
)
;
const
uint8_t
kFeedbackSeqNo
=
90
;
TransportFeedback
feedback_builder
(
true
)
;
feedback_builder
.
SetBase
(
kBaseSeqNo
kBaseTimestamp
)
;
feedback_builder
.
SetFeedbackSequenceNumber
(
kFeedbackSeqNo
)
;
feedback_builder
.
AddReceivedPacket
(
kBaseSeqNo
+
0
kBaseTimestamp
)
;
feedback_builder
.
AddReceivedPacket
(
kBaseSeqNo
+
3
kBaseTimestamp
+
TimeDelta
:
:
Millis
(
2
)
)
;
MockFunction
<
void
(
uint16_t
TimeDelta
)
>
handler
;
InSequence
s
;
EXPECT_CALL
(
handler
Call
(
kBaseSeqNo
+
0
Ne
(
TimeDelta
:
:
PlusInfinity
(
)
)
)
)
;
EXPECT_CALL
(
handler
Call
(
kBaseSeqNo
+
1
TimeDelta
:
:
PlusInfinity
(
)
)
)
;
EXPECT_CALL
(
handler
Call
(
kBaseSeqNo
+
2
TimeDelta
:
:
PlusInfinity
(
)
)
)
;
EXPECT_CALL
(
handler
Call
(
kBaseSeqNo
+
3
Ne
(
TimeDelta
:
:
PlusInfinity
(
)
)
)
)
;
Parse
(
feedback_builder
.
Build
(
)
)
.
ForAllPackets
(
handler
.
AsStdFunction
(
)
)
;
}
TEST
(
TransportFeedbackTest
ReportsMissingPacketsWithoutTimestamps
)
{
const
uint16_t
kBaseSeqNo
=
1000
;
const
uint8_t
kFeedbackSeqNo
=
90
;
TransportFeedback
feedback_builder
(
false
)
;
feedback_builder
.
SetBase
(
kBaseSeqNo
Timestamp
:
:
Millis
(
10
)
)
;
feedback_builder
.
SetFeedbackSequenceNumber
(
kFeedbackSeqNo
)
;
feedback_builder
.
AddReceivedPacket
(
kBaseSeqNo
+
0
Timestamp
:
:
Zero
(
)
)
;
feedback_builder
.
AddReceivedPacket
(
kBaseSeqNo
+
3
Timestamp
:
:
Zero
(
)
)
;
MockFunction
<
void
(
uint16_t
TimeDelta
)
>
handler
;
InSequence
s
;
EXPECT_CALL
(
handler
Call
(
kBaseSeqNo
+
0
Ne
(
TimeDelta
:
:
PlusInfinity
(
)
)
)
)
;
EXPECT_CALL
(
handler
Call
(
kBaseSeqNo
+
1
TimeDelta
:
:
PlusInfinity
(
)
)
)
;
EXPECT_CALL
(
handler
Call
(
kBaseSeqNo
+
2
TimeDelta
:
:
PlusInfinity
(
)
)
)
;
EXPECT_CALL
(
handler
Call
(
kBaseSeqNo
+
3
Ne
(
TimeDelta
:
:
PlusInfinity
(
)
)
)
)
;
Parse
(
feedback_builder
.
Build
(
)
)
.
ForAllPackets
(
handler
.
AsStdFunction
(
)
)
;
}
}
}
