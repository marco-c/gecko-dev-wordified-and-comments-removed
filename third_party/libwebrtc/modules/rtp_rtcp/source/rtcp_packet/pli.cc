#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
pli
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
common_header
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
namespace
webrtc
{
namespace
rtcp
{
constexpr
uint8_t
Pli
:
:
kFeedbackMessageType
;
Pli
:
:
Pli
(
)
=
default
;
Pli
:
:
Pli
(
const
Pli
&
pli
)
=
default
;
Pli
:
:
~
Pli
(
)
=
default
;
bool
Pli
:
:
Parse
(
const
CommonHeader
&
packet
)
{
RTC_DCHECK_EQ
(
packet
.
type
(
)
kPacketType
)
;
RTC_DCHECK_EQ
(
packet
.
fmt
(
)
kFeedbackMessageType
)
;
if
(
packet
.
payload_size_bytes
(
)
<
kCommonFeedbackLength
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Packet
is
too
small
to
be
a
valid
PLI
packet
"
;
return
false
;
}
ParseCommonFeedback
(
packet
.
payload
(
)
)
;
return
true
;
}
size_t
Pli
:
:
BlockLength
(
)
const
{
return
kHeaderLength
+
kCommonFeedbackLength
;
}
bool
Pli
:
:
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
PacketReadyCallback
callback
)
const
{
while
(
*
index
+
BlockLength
(
)
>
max_length
)
{
if
(
!
OnBufferFull
(
packet
index
callback
)
)
return
false
;
}
CreateHeader
(
kFeedbackMessageType
kPacketType
HeaderLength
(
)
packet
index
)
;
CreateCommonFeedback
(
packet
+
*
index
)
;
*
index
+
=
kCommonFeedbackLength
;
return
true
;
}
}
}
