#
ifndef
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_LOSS_NOTIFICATION_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_LOSS_NOTIFICATION_H_
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
common_header
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
psfb
.
h
"
#
include
"
rtc_base
/
system
/
unused
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
LossNotification
:
public
Psfb
{
public
:
LossNotification
(
)
;
LossNotification
(
uint16_t
last_decoded
uint16_t
last_received
bool
decodability_flag
)
;
LossNotification
(
const
LossNotification
&
other
)
;
~
LossNotification
(
)
override
;
size_t
BlockLength
(
)
const
override
;
bool
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
PacketReadyCallback
callback
)
const
override
RTC_WARN_UNUSED_RESULT
;
bool
Parse
(
const
CommonHeader
&
packet
)
RTC_WARN_UNUSED_RESULT
;
bool
Set
(
uint16_t
last_decoded
uint16_t
last_received
bool
decodability_flag
)
RTC_WARN_UNUSED_RESULT
;
uint16_t
last_decoded
(
)
const
{
return
last_decoded_
;
}
uint16_t
last_received
(
)
const
{
return
last_received_
;
}
bool
decodability_flag
(
)
const
{
return
decodability_flag_
;
}
private
:
static
constexpr
uint32_t
kUniqueIdentifier
=
0x4C4E5446
;
static
constexpr
size_t
kLossNotificationPayloadLength
=
8
;
uint16_t
last_decoded_
;
uint16_t
last_received_
;
bool
decodability_flag_
;
}
;
}
}
#
endif
