#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
compound_packet
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
rtcp
{
CompoundPacket
:
:
CompoundPacket
(
)
=
default
;
CompoundPacket
:
:
~
CompoundPacket
(
)
=
default
;
void
CompoundPacket
:
:
Append
(
std
:
:
unique_ptr
<
RtcpPacket
>
packet
)
{
RTC_CHECK
(
packet
)
;
appended_packets_
.
push_back
(
std
:
:
move
(
packet
)
)
;
}
bool
CompoundPacket
:
:
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
PacketReadyCallback
callback
)
const
{
for
(
const
auto
&
appended
:
appended_packets_
)
{
if
(
!
appended
-
>
Create
(
packet
index
max_length
callback
)
)
return
false
;
}
return
true
;
}
size_t
CompoundPacket
:
:
BlockLength
(
)
const
{
size_t
block_length
=
0
;
for
(
const
auto
&
appended
:
appended_packets_
)
{
block_length
+
=
appended
-
>
BlockLength
(
)
;
}
return
block_length
;
}
}
}
