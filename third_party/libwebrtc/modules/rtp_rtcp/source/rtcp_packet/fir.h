#
ifndef
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_FIR_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_FIR_H_
#
include
<
vector
>
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
psfb
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
CommonHeader
;
class
Fir
:
public
Psfb
{
public
:
static
constexpr
uint8_t
kFeedbackMessageType
=
4
;
struct
Request
{
Request
(
)
:
ssrc
(
0
)
seq_nr
(
0
)
{
}
Request
(
uint32_t
ssrc
uint8_t
seq_nr
)
:
ssrc
(
ssrc
)
seq_nr
(
seq_nr
)
{
}
uint32_t
ssrc
;
uint8_t
seq_nr
;
}
;
Fir
(
)
;
Fir
(
const
Fir
&
fir
)
;
~
Fir
(
)
override
;
bool
Parse
(
const
CommonHeader
&
packet
)
;
void
AddRequestTo
(
uint32_t
ssrc
uint8_t
seq_num
)
{
items_
.
emplace_back
(
ssrc
seq_num
)
;
}
const
std
:
:
vector
<
Request
>
&
requests
(
)
const
{
return
items_
;
}
size_t
BlockLength
(
)
const
override
;
bool
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
PacketReadyCallback
callback
)
const
override
;
private
:
static
constexpr
size_t
kFciLength
=
8
;
void
SetMediaSsrc
(
uint32_t
ssrc
)
;
uint32_t
media_ssrc
(
)
const
;
std
:
:
vector
<
Request
>
items_
;
}
;
}
}
#
endif
