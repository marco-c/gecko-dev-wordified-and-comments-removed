#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
tmmbn
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
common_header
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
rtpfb
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
tmmb_item
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
namespace
webrtc
{
namespace
rtcp
{
Tmmbn
:
:
Tmmbn
(
)
=
default
;
Tmmbn
:
:
~
Tmmbn
(
)
=
default
;
bool
Tmmbn
:
:
Parse
(
const
CommonHeader
&
packet
)
{
RTC_DCHECK_EQ
(
packet
.
type
(
)
kPacketType
)
;
RTC_DCHECK_EQ
(
packet
.
fmt
(
)
kFeedbackMessageType
)
;
if
(
packet
.
payload_size_bytes
(
)
<
kCommonFeedbackLength
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Payload
length
"
<
<
packet
.
payload_size_bytes
(
)
<
<
"
is
too
small
for
TMMBN
.
"
;
return
false
;
}
size_t
items_size_bytes
=
packet
.
payload_size_bytes
(
)
-
kCommonFeedbackLength
;
if
(
items_size_bytes
%
TmmbItem
:
:
kLength
!
=
0
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Payload
length
"
<
<
packet
.
payload_size_bytes
(
)
<
<
"
is
not
valid
for
TMMBN
.
"
;
return
false
;
}
ParseCommonFeedback
(
packet
.
payload
(
)
)
;
const
uint8_t
*
next_item
=
packet
.
payload
(
)
+
kCommonFeedbackLength
;
size_t
number_of_items
=
items_size_bytes
/
TmmbItem
:
:
kLength
;
items_
.
resize
(
number_of_items
)
;
for
(
TmmbItem
&
item
:
items_
)
{
if
(
!
item
.
Parse
(
next_item
)
)
return
false
;
next_item
+
=
TmmbItem
:
:
kLength
;
}
return
true
;
}
void
Tmmbn
:
:
AddTmmbr
(
const
TmmbItem
&
item
)
{
items_
.
push_back
(
item
)
;
}
size_t
Tmmbn
:
:
BlockLength
(
)
const
{
return
kHeaderLength
+
kCommonFeedbackLength
+
TmmbItem
:
:
kLength
*
items_
.
size
(
)
;
}
bool
Tmmbn
:
:
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
PacketReadyCallback
callback
)
const
{
while
(
*
index
+
BlockLength
(
)
>
max_length
)
{
if
(
!
OnBufferFull
(
packet
index
callback
)
)
return
false
;
}
const
size_t
index_end
=
*
index
+
BlockLength
(
)
;
CreateHeader
(
kFeedbackMessageType
kPacketType
HeaderLength
(
)
packet
index
)
;
RTC_DCHECK_EQ
(
0
Rtpfb
:
:
media_ssrc
(
)
)
;
CreateCommonFeedback
(
packet
+
*
index
)
;
*
index
+
=
kCommonFeedbackLength
;
for
(
const
TmmbItem
&
item
:
items_
)
{
item
.
Create
(
packet
+
*
index
)
;
*
index
+
=
TmmbItem
:
:
kLength
;
}
RTC_CHECK_EQ
(
index_end
*
index
)
;
return
true
;
}
}
}
