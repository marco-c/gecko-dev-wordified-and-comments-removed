#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
loss_notification
.
h
"
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
rtcp_packet_parser
.
h
"
namespace
webrtc
{
using
:
:
testing
:
:
ElementsAreArray
;
using
:
:
testing
:
:
make_tuple
;
using
:
:
webrtc
:
:
rtcp
:
:
LossNotification
;
TEST
(
RtcpPacketLossNotificationTest
SetWithIllegalValuesFails
)
{
constexpr
uint16_t
kLastDecoded
=
0x3c7b
;
constexpr
uint16_t
kLastReceived
=
kLastDecoded
+
0x7fff
+
1
;
constexpr
bool
kDecodabilityFlag
=
true
;
LossNotification
loss_notification
;
EXPECT_FALSE
(
loss_notification
.
Set
(
kLastDecoded
kLastReceived
kDecodabilityFlag
)
)
;
}
TEST
(
RtcpPacketLossNotificationTest
SetWithLegalValuesSucceeds
)
{
constexpr
uint16_t
kLastDecoded
=
0x3c7b
;
constexpr
uint16_t
kLastReceived
=
kLastDecoded
+
0x7fff
;
constexpr
bool
kDecodabilityFlag
=
true
;
LossNotification
loss_notification
;
EXPECT_TRUE
(
loss_notification
.
Set
(
kLastDecoded
kLastReceived
kDecodabilityFlag
)
)
;
}
TEST
(
RtcpPacketLossNotificationTest
CreateProducesExpectedWireFormat
)
{
constexpr
uint16_t
kLastDecoded
=
0x3c7b
;
constexpr
uint16_t
kLastReceived
=
kLastDecoded
+
(
0x6542
>
>
1
)
;
constexpr
bool
kDecodabilityFlag
=
true
;
const
uint8_t
kPacket
[
]
=
{
0x8f
206
0x00
0x04
0x12
0x34
0x56
0x78
0xab
0xcd
0xef
0x01
'
L
'
'
N
'
'
T
'
'
F
'
0x3c
0x7b
0x65
0x43
}
;
LossNotification
loss_notification
;
loss_notification
.
SetSenderSsrc
(
0x12345678
)
;
loss_notification
.
SetMediaSsrc
(
0xabcdef01
)
;
ASSERT_TRUE
(
loss_notification
.
Set
(
kLastDecoded
kLastReceived
kDecodabilityFlag
)
)
;
rtc
:
:
Buffer
packet
=
loss_notification
.
Build
(
)
;
EXPECT_THAT
(
make_tuple
(
packet
.
data
(
)
packet
.
size
(
)
)
ElementsAreArray
(
kPacket
)
)
;
}
TEST
(
RtcpPacketLossNotificationTest
ParseFailsOnTooSmallPacketToBeLossNotification
)
{
uint8_t
packet
[
]
=
{
0x8f
206
0x00
0x04
0x12
0x34
0x56
0x78
0xab
0xcd
0xef
0x01
'
L
'
'
N
'
'
T
'
'
F
'
0x3c
0x7b
0x65
0x43
}
;
size_t
packet_length_bytes
=
sizeof
(
packet
)
;
LossNotification
loss_notification
;
ASSERT_TRUE
(
test
:
:
ParseSinglePacket
(
packet
packet_length_bytes
&
loss_notification
)
)
;
packet
[
3
]
-
=
1
;
packet_length_bytes
-
=
4
;
EXPECT_FALSE
(
test
:
:
ParseSinglePacket
(
packet
packet_length_bytes
&
loss_notification
)
)
;
}
TEST
(
RtcpPacketLossNotificationTest
ParseFailsWhenUniqueIdentifierIsNotLossNotification
)
{
uint8_t
packet
[
]
=
{
0x8f
206
0x00
0x04
0x12
0x34
0x56
0x78
0xab
0xcd
0xef
0x01
'
L
'
'
N
'
'
T
'
'
F
'
0x3c
0x7b
0x65
0x43
}
;
LossNotification
loss_notification
;
ASSERT_TRUE
(
test
:
:
ParseSinglePacket
(
packet
&
loss_notification
)
)
;
RTC_DCHECK_EQ
(
packet
[
12
]
'
L
'
)
;
RTC_DCHECK_EQ
(
packet
[
13
]
'
N
'
)
;
RTC_DCHECK_EQ
(
packet
[
14
]
'
T
'
)
;
RTC_DCHECK_EQ
(
packet
[
15
]
'
F
'
)
;
packet
[
14
]
=
'
x
'
;
EXPECT_FALSE
(
test
:
:
ParseSinglePacket
(
packet
&
loss_notification
)
)
;
}
TEST
(
RtcpPacketLossNotificationTest
ParseLegalLossNotificationMessagesCorrectly
)
{
constexpr
uint16_t
kLastDecoded
=
0x3c7b
;
constexpr
uint16_t
kLastReceived
=
kLastDecoded
+
(
0x6542
>
>
1
)
;
constexpr
bool
kDecodabilityFlag
=
true
;
const
uint8_t
kPacket
[
]
=
{
0x8f
206
0x00
0x04
0x12
0x34
0x56
0x78
0xab
0xcd
0xef
0x01
'
L
'
'
N
'
'
T
'
'
F
'
0x3c
0x7b
0x65
0x43
}
;
LossNotification
loss_notification
;
EXPECT_TRUE
(
test
:
:
ParseSinglePacket
(
kPacket
&
loss_notification
)
)
;
EXPECT_EQ
(
loss_notification
.
sender_ssrc
(
)
0x12345678u
)
;
EXPECT_EQ
(
loss_notification
.
media_ssrc
(
)
0xabcdef01u
)
;
EXPECT_EQ
(
loss_notification
.
last_decoded
(
)
kLastDecoded
)
;
EXPECT_EQ
(
loss_notification
.
last_received
(
)
kLastReceived
)
;
EXPECT_EQ
(
loss_notification
.
decodability_flag
(
)
kDecodabilityFlag
)
;
}
}
