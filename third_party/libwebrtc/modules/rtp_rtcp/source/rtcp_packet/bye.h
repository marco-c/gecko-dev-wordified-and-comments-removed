#
ifndef
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_BYE_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_BYE_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
CommonHeader
;
class
Bye
:
public
RtcpPacket
{
public
:
static
constexpr
uint8_t
kPacketType
=
203
;
Bye
(
)
;
~
Bye
(
)
override
;
bool
Parse
(
const
CommonHeader
&
packet
)
;
bool
SetCsrcs
(
std
:
:
vector
<
uint32_t
>
csrcs
)
;
void
SetReason
(
absl
:
:
string_view
reason
)
;
const
std
:
:
vector
<
uint32_t
>
&
csrcs
(
)
const
{
return
csrcs_
;
}
const
std
:
:
string
&
reason
(
)
const
{
return
reason_
;
}
size_t
BlockLength
(
)
const
override
;
bool
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
PacketReadyCallback
callback
)
const
override
;
private
:
static
const
int
kMaxNumberOfCsrcs
=
0x1f
-
1
;
std
:
:
vector
<
uint32_t
>
csrcs_
;
std
:
:
string
reason_
;
}
;
}
}
#
endif
