#
ifndef
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_H_
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_video_header
.
h
"
namespace
webrtc
{
class
RtpPacketToSend
;
class
RtpPacketizer
{
public
:
struct
PayloadSizeLimits
{
int
max_payload_len
=
1200
;
int
first_packet_reduction_len
=
0
;
int
last_packet_reduction_len
=
0
;
int
single_packet_reduction_len
=
0
;
}
;
static
std
:
:
unique_ptr
<
RtpPacketizer
>
Create
(
std
:
:
optional
<
VideoCodecType
>
type
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
PayloadSizeLimits
limits
const
RTPVideoHeader
&
rtp_video_header
bool
enable_av1_even_split
=
false
)
;
virtual
~
RtpPacketizer
(
)
=
default
;
virtual
size_t
NumPackets
(
)
const
=
0
;
virtual
bool
NextPacket
(
RtpPacketToSend
*
packet
)
=
0
;
static
std
:
:
vector
<
int
>
SplitAboutEqually
(
int
payload_len
const
PayloadSizeLimits
&
limits
)
;
}
;
}
#
endif
