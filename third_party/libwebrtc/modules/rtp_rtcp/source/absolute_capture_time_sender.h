#
ifndef
MODULES_RTP_RTCP_SOURCE_ABSOLUTE_CAPTURE_TIME_SENDER_H_
#
define
MODULES_RTP_RTCP_SOURCE_ABSOLUTE_CAPTURE_TIME_SENDER_H_
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
rtp_headers
.
h
"
#
include
"
api
/
units
/
time_delta
.
h
"
#
include
"
api
/
units
/
timestamp
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
AbsoluteCaptureTimeSender
{
public
:
static
constexpr
TimeDelta
kInterpolationMaxInterval
=
TimeDelta
:
:
Millis
(
1000
)
;
static
constexpr
TimeDelta
kInterpolationMaxError
=
TimeDelta
:
:
Millis
(
1
)
;
explicit
AbsoluteCaptureTimeSender
(
Clock
*
clock
)
;
static
uint32_t
GetSource
(
uint32_t
ssrc
rtc
:
:
ArrayView
<
const
uint32_t
>
csrcs
)
;
absl
:
:
optional
<
AbsoluteCaptureTime
>
OnSendPacket
(
uint32_t
source
uint32_t
rtp_timestamp
uint32_t
rtp_clock_frequency
uint64_t
absolute_capture_timestamp
absl
:
:
optional
<
int64_t
>
estimated_capture_clock_offset
)
;
private
:
bool
ShouldSendExtension
(
Timestamp
send_time
uint32_t
source
uint32_t
rtp_timestamp
uint32_t
rtp_clock_frequency
uint64_t
absolute_capture_timestamp
absl
:
:
optional
<
int64_t
>
estimated_capture_clock_offset
)
const
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
mutex_
)
;
Clock
*
const
clock_
;
Mutex
mutex_
;
Timestamp
last_send_time_
RTC_GUARDED_BY
(
mutex_
)
;
uint32_t
last_source_
RTC_GUARDED_BY
(
mutex_
)
;
uint32_t
last_rtp_timestamp_
RTC_GUARDED_BY
(
mutex_
)
;
uint32_t
last_rtp_clock_frequency_
RTC_GUARDED_BY
(
mutex_
)
;
uint64_t
last_absolute_capture_timestamp_
RTC_GUARDED_BY
(
mutex_
)
;
absl
:
:
optional
<
int64_t
>
last_estimated_capture_clock_offset_
RTC_GUARDED_BY
(
mutex_
)
;
}
;
}
#
endif
