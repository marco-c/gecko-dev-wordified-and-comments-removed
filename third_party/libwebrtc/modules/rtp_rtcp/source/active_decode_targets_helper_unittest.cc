#
include
"
modules
/
rtp_rtcp
/
source
/
active_decode_targets_helper
.
h
"
#
include
<
bitset
>
#
include
<
cstdint
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
std
:
:
bitset
<
32
>
kAll
=
~
uint32_t
{
0
}
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsNulloptOnKeyFrameWhenAllDecodeTargetsAreActive
)
{
constexpr
int
kDecodeTargetProtectedByChain
[
]
=
{
0
0
}
;
ActiveDecodeTargetsHelper
helper
;
int
chain_diffs
[
]
=
{
0
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b11
true
1
chain_diffs
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsNulloptOnKeyFrameWhenAllDecodeTargetsAreActiveAfterDeltaFrame
)
{
constexpr
int
kDecodeTargetProtectedByChain
[
]
=
{
0
0
}
;
ActiveDecodeTargetsHelper
helper
;
int
chain_diffs_key
[
]
=
{
0
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b11
true
1
chain_diffs_key
)
;
int
chain_diffs_delta
[
]
=
{
1
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b01
false
2
chain_diffs_delta
)
;
ASSERT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
0b01u
)
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b11
true
3
chain_diffs_key
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsBitmaskOnKeyFrameWhenSomeDecodeTargetsAreInactive
)
{
constexpr
int
kDecodeTargetProtectedByChain
[
]
=
{
0
0
}
;
ActiveDecodeTargetsHelper
helper
;
int
chain_diffs
[
]
=
{
0
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b01
true
1
chain_diffs
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
0b01u
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsBitmaskOnKeyFrameWhenSomeDecodeTargetsAreInactiveAfterDeltaFrame
)
{
constexpr
int
kDecodeTargetProtectedByChain
[
]
=
{
0
0
}
;
ActiveDecodeTargetsHelper
helper
;
int
chain_diffs_key
[
]
=
{
0
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b01
true
1
chain_diffs_key
)
;
int
chain_diffs_delta
[
]
=
{
1
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b01
false
2
chain_diffs_delta
)
;
ASSERT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b01
true
3
chain_diffs_key
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
0b01u
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsNulloptWhenActiveDecodeTargetsAreUnused
)
{
constexpr
int
kDecodeTargetProtectedByChain
[
]
=
{
0
0
}
;
ActiveDecodeTargetsHelper
helper
;
int
chain_diffs
[
]
=
{
0
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
kAll
true
1
chain_diffs
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
kAll
false
2
chain_diffs
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsNulloptOnDeltaFrameAfterSentOnKeyFrame
)
{
constexpr
int
kDecodeTargetProtectedByChain
[
]
=
{
0
0
}
;
ActiveDecodeTargetsHelper
helper
;
int
chain_diffs_key
[
]
=
{
0
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b01
true
1
chain_diffs_key
)
;
int
chain_diffs_delta
[
]
=
{
1
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b01
false
2
chain_diffs_delta
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsNewBitmaskOnDeltaFrame
)
{
constexpr
int
kDecodeTargetProtectedByChain
[
]
=
{
0
0
}
;
ActiveDecodeTargetsHelper
helper
;
int
chain_diffs_key
[
]
=
{
0
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b11
true
1
chain_diffs_key
)
;
ASSERT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
int
chain_diffs_delta
[
]
=
{
1
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b01
false
2
chain_diffs_delta
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
0b01u
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsBitmaskWhenAllDecodeTargetsReactivatedOnDeltaFrame
)
{
constexpr
int
kDecodeTargetProtectedByChain
[
]
=
{
0
0
}
;
ActiveDecodeTargetsHelper
helper
;
int
chain_diffs_key
[
]
=
{
0
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b01
true
1
chain_diffs_key
)
;
ASSERT_NE
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
int
chain_diffs_delta
[
]
=
{
1
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b01
false
2
chain_diffs_delta
)
;
ASSERT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
kAll
false
3
chain_diffs_delta
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
0b11u
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsNulloptAfterSentOnAllActiveChains
)
{
const
std
:
:
bitset
<
32
>
kSome
=
0b011
;
constexpr
int
kDecodeTargetProtectedByChain
[
]
=
{
2
1
0
}
;
ActiveDecodeTargetsHelper
helper
;
int
chain_diffs_key
[
]
=
{
0
0
0
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b111
true
0
chain_diffs_key
)
;
ASSERT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
int
chain_diffs_delta1
[
]
=
{
1
1
1
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
kSome
false
1
chain_diffs_delta1
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
0b011u
)
;
int
chain_diffs_delta2
[
]
=
{
2
2
1
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
kSome
false
2
chain_diffs_delta2
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
0b011u
)
;
int
chain_diffs_delta3
[
]
=
{
3
1
2
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
kSome
false
3
chain_diffs_delta3
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsBitmaskWhenChanged
)
{
constexpr
int
kDecodeTargetProtectedByChain
[
]
=
{
0
1
1
}
;
ActiveDecodeTargetsHelper
helper
;
int
chain_diffs_key
[
]
=
{
0
0
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b111
true
0
chain_diffs_key
)
;
int
chain_diffs_delta1
[
]
=
{
1
1
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b011
false
1
chain_diffs_delta1
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
0b011u
)
;
int
chain_diffs_delta2
[
]
=
{
1
2
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b101
false
2
chain_diffs_delta2
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
0b101u
)
;
int
chain_diffs_delta3
[
]
=
{
2
1
}
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b101
false
3
chain_diffs_delta3
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
0b101u
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
ReturnsNulloptWhenChainsAreNotUsed
)
{
const
rtc
:
:
ArrayView
<
const
int
>
kDecodeTargetProtectedByChain
;
const
rtc
:
:
ArrayView
<
const
int
>
kNoChainDiffs
;
ActiveDecodeTargetsHelper
helper
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
kAll
true
0
kNoChainDiffs
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
helper
.
OnFrame
(
kDecodeTargetProtectedByChain
0b101
false
1
kNoChainDiffs
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
}
TEST
(
ActiveDecodeTargetsHelperTest
Supports32DecodeTargets
)
{
std
:
:
bitset
<
32
>
some
;
std
:
:
vector
<
int
>
decode_target_protected_by_chain
(
32
)
;
for
(
int
i
=
0
;
i
<
32
;
+
+
i
)
{
decode_target_protected_by_chain
[
i
]
=
i
;
some
[
i
]
=
i
%
2
=
=
0
;
}
ActiveDecodeTargetsHelper
helper
;
std
:
:
vector
<
int
>
chain_diffs_key
(
32
0
)
;
helper
.
OnFrame
(
decode_target_protected_by_chain
some
true
1
chain_diffs_key
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
some
.
to_ulong
(
)
)
;
std
:
:
vector
<
int
>
chain_diffs_delta
(
32
1
)
;
helper
.
OnFrame
(
decode_target_protected_by_chain
some
false
2
chain_diffs_delta
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
std
:
:
nullopt
)
;
helper
.
OnFrame
(
decode_target_protected_by_chain
kAll
false
2
chain_diffs_delta
)
;
EXPECT_EQ
(
helper
.
ActiveDecodeTargetsBitmask
(
)
kAll
.
to_ulong
(
)
)
;
}
}
