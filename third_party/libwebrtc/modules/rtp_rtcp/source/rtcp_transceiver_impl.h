#
ifndef
MODULES_RTP_RTCP_SOURCE_RTCP_TRANSCEIVER_IMPL_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTCP_TRANSCEIVER_IMPL_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
common_header
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
dlrr
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
remb
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
report_block
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
target_bitrate
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_transceiver_config
.
h
"
#
include
"
rtc_base
/
task_utils
/
repeating_task
.
h
"
#
include
"
system_wrappers
/
include
/
ntp_time
.
h
"
namespace
webrtc
{
class
RtcpTransceiverImpl
{
public
:
explicit
RtcpTransceiverImpl
(
const
RtcpTransceiverConfig
&
config
)
;
RtcpTransceiverImpl
(
const
RtcpTransceiverImpl
&
)
=
delete
;
RtcpTransceiverImpl
&
operator
=
(
const
RtcpTransceiverImpl
&
)
=
delete
;
~
RtcpTransceiverImpl
(
)
;
void
StopPeriodicTask
(
)
{
periodic_task_handle_
.
Stop
(
)
;
}
void
AddMediaReceiverRtcpObserver
(
uint32_t
remote_ssrc
MediaReceiverRtcpObserver
*
observer
)
;
void
RemoveMediaReceiverRtcpObserver
(
uint32_t
remote_ssrc
MediaReceiverRtcpObserver
*
observer
)
;
void
SetReadyToSend
(
bool
ready
)
;
void
ReceivePacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
packet
int64_t
now_us
)
;
void
SendCompoundPacket
(
)
;
void
SetRemb
(
int64_t
bitrate_bps
std
:
:
vector
<
uint32_t
>
ssrcs
)
;
void
UnsetRemb
(
)
;
uint32_t
sender_ssrc
(
)
const
{
return
config_
.
feedback_ssrc
;
}
void
SendRawPacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
packet
)
;
void
SendNack
(
uint32_t
ssrc
std
:
:
vector
<
uint16_t
>
sequence_numbers
)
;
void
SendPictureLossIndication
(
uint32_t
ssrc
)
;
void
SendFullIntraRequest
(
rtc
:
:
ArrayView
<
const
uint32_t
>
ssrcs
bool
new_request
)
;
void
SendCombinedRtcpPacket
(
std
:
:
vector
<
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
>
rtcp_packets
)
;
private
:
class
PacketSender
;
struct
RemoteSenderState
;
void
HandleReceivedPacket
(
const
rtcp
:
:
CommonHeader
&
rtcp_packet_header
int64_t
now_us
)
;
void
HandleBye
(
const
rtcp
:
:
CommonHeader
&
rtcp_packet_header
)
;
void
HandleSenderReport
(
const
rtcp
:
:
CommonHeader
&
rtcp_packet_header
int64_t
now_us
)
;
void
HandleExtendedReports
(
const
rtcp
:
:
CommonHeader
&
rtcp_packet_header
int64_t
now_us
)
;
void
HandleDlrr
(
const
rtcp
:
:
Dlrr
&
dlrr
int64_t
now_us
)
;
void
HandleTargetBitrate
(
const
rtcp
:
:
TargetBitrate
&
target_bitrate
uint32_t
remote_ssrc
)
;
void
ReschedulePeriodicCompoundPackets
(
)
;
void
SchedulePeriodicCompoundPackets
(
int64_t
delay_ms
)
;
void
CreateCompoundPacket
(
PacketSender
*
sender
)
;
void
SendPeriodicCompoundPacket
(
)
;
void
SendImmediateFeedback
(
const
rtcp
:
:
RtcpPacket
&
rtcp_packet
)
;
std
:
:
vector
<
rtcp
:
:
ReportBlock
>
CreateReportBlocks
(
int64_t
now_us
)
;
const
RtcpTransceiverConfig
config_
;
bool
ready_to_send_
;
absl
:
:
optional
<
rtcp
:
:
Remb
>
remb_
;
std
:
:
map
<
uint32_t
RemoteSenderState
>
remote_senders_
;
RepeatingTaskHandle
periodic_task_handle_
;
}
;
}
#
endif
