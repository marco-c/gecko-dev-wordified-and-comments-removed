#
ifndef
MODULES_RTP_RTCP_SOURCE_PACKET_SEQUENCER_H_
#
define
MODULES_RTP_RTCP_SOURCE_PACKET_SEQUENCER_H_
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_to_send
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
PacketSequencer
{
public
:
PacketSequencer
(
uint32_t
media_ssrc
absl
:
:
optional
<
uint32_t
>
rtx_ssrc
bool
require_marker_before_media_padding
Clock
*
clock
)
;
void
Sequence
(
RtpPacketToSend
&
packet
)
;
void
set_media_sequence_number
(
uint16_t
sequence_number
)
{
media_sequence_number_
=
sequence_number
;
}
void
set_rtx_sequence_number
(
uint16_t
sequence_number
)
{
rtx_sequence_number_
=
sequence_number
;
}
void
SetRtpState
(
const
RtpState
&
state
)
;
void
PupulateRtpState
(
RtpState
&
state
)
const
;
uint16_t
media_sequence_number
(
)
const
{
return
media_sequence_number_
;
}
uint16_t
rtx_sequence_number
(
)
const
{
return
rtx_sequence_number_
;
}
bool
CanSendPaddingOnMediaSsrc
(
)
const
;
private
:
void
UpdateLastPacketState
(
const
RtpPacketToSend
&
packet
)
;
void
PopulatePaddingFields
(
RtpPacketToSend
&
packet
)
;
const
uint32_t
media_ssrc_
;
const
absl
:
:
optional
<
uint32_t
>
rtx_ssrc_
;
const
bool
require_marker_before_media_padding_
;
Clock
*
const
clock_
;
uint16_t
media_sequence_number_
;
uint16_t
rtx_sequence_number_
;
int8_t
last_payload_type_
;
uint32_t
last_rtp_timestamp_
;
int64_t
last_capture_time_ms_
;
int64_t
last_timestamp_time_ms_
;
bool
last_packet_marker_bit_
;
}
;
}
#
endif
