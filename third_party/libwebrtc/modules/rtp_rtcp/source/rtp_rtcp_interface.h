#
ifndef
MODULES_RTP_RTCP_SOURCE_RTP_RTCP_INTERFACE_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTP_RTCP_INTERFACE_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
transport
/
webrtc_key_value_config
.
h
"
#
include
"
api
/
video
/
video_bitrate_allocation
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
receive_statistics
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
report_block_data
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_packet_sender
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_to_send
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_sequence_number_map
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
video_fec_generator
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
namespace
webrtc
{
class
FrameEncryptorInterface
;
class
RateLimiter
;
class
RemoteBitrateEstimator
;
class
RtcEventLog
;
class
RTPSender
;
class
Transport
;
class
VideoBitrateAllocationObserver
;
class
RtpRtcpInterface
:
public
RtcpFeedbackSenderInterface
{
public
:
struct
Configuration
{
Configuration
(
)
=
default
;
Configuration
(
Configuration
&
&
rhs
)
=
default
;
bool
audio
=
false
;
bool
receiver_only
=
false
;
Clock
*
clock
=
nullptr
;
ReceiveStatisticsProvider
*
receive_statistics
=
nullptr
;
Transport
*
outgoing_transport
=
nullptr
;
RtcpIntraFrameObserver
*
intra_frame_callback
=
nullptr
;
RtcpLossNotificationObserver
*
rtcp_loss_notification_observer
=
nullptr
;
RtcpBandwidthObserver
*
bandwidth_callback
=
nullptr
;
RtcpEventObserver
*
rtcp_event_observer
=
nullptr
;
NetworkStateEstimateObserver
*
network_state_estimate_observer
=
nullptr
;
TransportFeedbackObserver
*
transport_feedback_callback
=
nullptr
;
VideoBitrateAllocationObserver
*
bitrate_allocation_observer
=
nullptr
;
RtcpRttStats
*
rtt_stats
=
nullptr
;
RtcpPacketTypeCounterObserver
*
rtcp_packet_type_counter_observer
=
nullptr
;
RtcpStatisticsCallback
*
rtcp_statistics_callback
=
nullptr
;
RtcpCnameCallback
*
rtcp_cname_callback
=
nullptr
;
ReportBlockDataObserver
*
report_block_data_observer
=
nullptr
;
RemoteBitrateEstimator
*
remote_bitrate_estimator
=
nullptr
;
RtpPacketSender
*
paced_sender
=
nullptr
;
VideoFecGenerator
*
fec_generator
=
nullptr
;
BitrateStatisticsObserver
*
send_bitrate_observer
=
nullptr
;
SendSideDelayObserver
*
send_side_delay_observer
=
nullptr
;
RtcEventLog
*
event_log
=
nullptr
;
SendPacketObserver
*
send_packet_observer
=
nullptr
;
RateLimiter
*
retransmission_rate_limiter
=
nullptr
;
StreamDataCountersCallback
*
rtp_stats_callback
=
nullptr
;
int
rtcp_report_interval_ms
=
0
;
bool
populate_network2_timestamp
=
false
;
rtc
:
:
scoped_refptr
<
FrameTransformerInterface
>
frame_transformer
;
FrameEncryptorInterface
*
frame_encryptor
=
nullptr
;
bool
require_frame_encryption
=
false
;
bool
extmap_allow_mixed
=
false
;
bool
always_send_mid_and_rid
=
false
;
const
WebRtcKeyValueConfig
*
field_trials
=
nullptr
;
uint32_t
local_media_ssrc
=
0
;
absl
:
:
optional
<
uint32_t
>
rtx_send_ssrc
;
bool
need_rtp_packet_infos
=
false
;
bool
enable_rtx_padding_prioritization
=
true
;
bool
non_sender_rtt_measurement
=
false
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
Configuration
)
;
}
;
struct
SenderReportStats
{
NtpTime
last_arrival_timestamp
;
NtpTime
last_remote_timestamp
;
uint32_t
packets_sent
;
uint64_t
bytes_sent
;
uint64_t
reports_count
;
}
;
virtual
void
IncomingRtcpPacket
(
const
uint8_t
*
incoming_packet
size_t
incoming_packet_length
)
=
0
;
virtual
void
SetRemoteSSRC
(
uint32_t
ssrc
)
=
0
;
virtual
void
SetMaxRtpPacketSize
(
size_t
size
)
=
0
;
virtual
size_t
MaxRtpPacketSize
(
)
const
=
0
;
virtual
void
RegisterSendPayloadFrequency
(
int
payload_type
int
payload_frequency
)
=
0
;
virtual
int32_t
DeRegisterSendPayload
(
int8_t
payload_type
)
=
0
;
virtual
void
SetExtmapAllowMixed
(
bool
extmap_allow_mixed
)
=
0
;
virtual
void
RegisterRtpHeaderExtension
(
absl
:
:
string_view
uri
int
id
)
=
0
;
virtual
int32_t
DeregisterSendRtpHeaderExtension
(
RTPExtensionType
type
)
=
0
;
virtual
void
DeregisterSendRtpHeaderExtension
(
absl
:
:
string_view
uri
)
=
0
;
virtual
bool
SupportsPadding
(
)
const
=
0
;
virtual
bool
SupportsRtxPayloadPadding
(
)
const
=
0
;
virtual
uint32_t
StartTimestamp
(
)
const
=
0
;
virtual
void
SetStartTimestamp
(
uint32_t
timestamp
)
=
0
;
virtual
uint16_t
SequenceNumber
(
)
const
=
0
;
virtual
void
SetSequenceNumber
(
uint16_t
seq
)
=
0
;
virtual
void
SetRtpState
(
const
RtpState
&
rtp_state
)
=
0
;
virtual
void
SetRtxState
(
const
RtpState
&
rtp_state
)
=
0
;
virtual
RtpState
GetRtpState
(
)
const
=
0
;
virtual
RtpState
GetRtxState
(
)
const
=
0
;
virtual
uint32_t
SSRC
(
)
const
=
0
;
virtual
void
SetRid
(
const
std
:
:
string
&
rid
)
=
0
;
virtual
void
SetMid
(
const
std
:
:
string
&
mid
)
=
0
;
virtual
void
SetCsrcs
(
const
std
:
:
vector
<
uint32_t
>
&
csrcs
)
=
0
;
virtual
void
SetRtxSendStatus
(
int
modes
)
=
0
;
virtual
int
RtxSendStatus
(
)
const
=
0
;
virtual
absl
:
:
optional
<
uint32_t
>
RtxSsrc
(
)
const
=
0
;
virtual
void
SetRtxSendPayloadType
(
int
payload_type
int
associated_payload_type
)
=
0
;
virtual
absl
:
:
optional
<
uint32_t
>
FlexfecSsrc
(
)
const
=
0
;
virtual
int32_t
SetSendingStatus
(
bool
sending
)
=
0
;
virtual
bool
Sending
(
)
const
=
0
;
virtual
void
SetSendingMediaStatus
(
bool
sending
)
=
0
;
virtual
bool
SendingMedia
(
)
const
=
0
;
virtual
bool
IsAudioConfigured
(
)
const
=
0
;
virtual
void
SetAsPartOfAllocation
(
bool
part_of_allocation
)
=
0
;
virtual
RtpSendRates
GetSendRates
(
)
const
=
0
;
virtual
RTPSender
*
RtpSender
(
)
=
0
;
virtual
const
RTPSender
*
RtpSender
(
)
const
=
0
;
virtual
bool
OnSendingRtpFrame
(
uint32_t
timestamp
int64_t
capture_time_ms
int
payload_type
bool
force_sender_report
)
=
0
;
virtual
bool
TrySendPacket
(
RtpPacketToSend
*
packet
const
PacedPacketInfo
&
pacing_info
)
=
0
;
virtual
void
SetFecProtectionParams
(
const
FecProtectionParams
&
delta_params
const
FecProtectionParams
&
key_params
)
=
0
;
virtual
std
:
:
vector
<
std
:
:
unique_ptr
<
RtpPacketToSend
>
>
FetchFecPackets
(
)
=
0
;
virtual
void
OnPacketsAcknowledged
(
rtc
:
:
ArrayView
<
const
uint16_t
>
sequence_numbers
)
=
0
;
virtual
std
:
:
vector
<
std
:
:
unique_ptr
<
RtpPacketToSend
>
>
GeneratePadding
(
size_t
target_size_bytes
)
=
0
;
virtual
std
:
:
vector
<
RtpSequenceNumberMap
:
:
Info
>
GetSentRtpPacketInfos
(
rtc
:
:
ArrayView
<
const
uint16_t
>
sequence_numbers
)
const
=
0
;
virtual
size_t
ExpectedPerPacketOverhead
(
)
const
=
0
;
virtual
RtcpMode
RTCP
(
)
const
=
0
;
virtual
void
SetRTCPStatus
(
RtcpMode
method
)
=
0
;
virtual
int32_t
SetCNAME
(
const
char
*
cname
)
=
0
;
virtual
int32_t
RemoteNTP
(
uint32_t
*
received_ntp_secs
uint32_t
*
received_ntp_frac
uint32_t
*
rtcp_arrival_time_secs
uint32_t
*
rtcp_arrival_time_frac
uint32_t
*
rtcp_timestamp
)
const
=
0
;
virtual
int32_t
RTT
(
uint32_t
remote_ssrc
int64_t
*
rtt
int64_t
*
avg_rtt
int64_t
*
min_rtt
int64_t
*
max_rtt
)
const
=
0
;
virtual
int64_t
ExpectedRetransmissionTimeMs
(
)
const
=
0
;
virtual
int32_t
SendRTCP
(
RTCPPacketType
rtcp_packet_type
)
=
0
;
virtual
void
GetSendStreamDataCounters
(
StreamDataCounters
*
rtp_counters
StreamDataCounters
*
rtx_counters
)
const
=
0
;
virtual
void
RemoteRTCPSenderInfo
(
uint32_t
*
packet_count
uint32_t
*
octet_count
int64_t
*
ntp_timestamp_ms
int64_t
*
remote_ntp_timestamp_ms
)
const
=
0
;
virtual
int32_t
RemoteRTCPStat
(
std
:
:
vector
<
RTCPReportBlock
>
*
receive_blocks
)
const
=
0
;
virtual
std
:
:
vector
<
ReportBlockData
>
GetLatestReportBlockData
(
)
const
=
0
;
virtual
absl
:
:
optional
<
SenderReportStats
>
GetSenderReportStats
(
)
const
=
0
;
void
SetRemb
(
int64_t
bitrate_bps
std
:
:
vector
<
uint32_t
>
ssrcs
)
override
=
0
;
void
UnsetRemb
(
)
override
=
0
;
virtual
int32_t
SendNACK
(
const
uint16_t
*
nack_list
uint16_t
size
)
=
0
;
virtual
void
SendNack
(
const
std
:
:
vector
<
uint16_t
>
&
sequence_numbers
)
=
0
;
virtual
void
SetStorePacketsStatus
(
bool
enable
uint16_t
numberToStore
)
=
0
;
virtual
void
SetVideoBitrateAllocation
(
const
VideoBitrateAllocation
&
bitrate
)
=
0
;
void
SendPictureLossIndication
(
)
{
SendRTCP
(
kRtcpPli
)
;
}
void
SendFullIntraRequest
(
)
{
SendRTCP
(
kRtcpFir
)
;
}
virtual
int32_t
SendLossNotification
(
uint16_t
last_decoded_seq_num
uint16_t
last_received_seq_num
bool
decodability_flag
bool
buffering_allowed
)
=
0
;
}
;
}
#
endif
