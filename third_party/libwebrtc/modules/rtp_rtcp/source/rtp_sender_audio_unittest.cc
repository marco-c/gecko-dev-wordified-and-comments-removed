#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_sender_audio
.
h
"
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
transport
/
field_trial_based_config
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_header_extension_map
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_header_extensions
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_rtcp_impl2
.
h
"
#
include
"
test
/
field_trial
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
enum
:
int
{
kAudioLevelExtensionId
=
1
kAbsoluteCaptureTimeExtensionId
=
2
}
;
const
uint16_t
kSeqNum
=
33
;
const
uint32_t
kSsrc
=
725242
;
const
uint8_t
kAudioLevel
=
0x5a
;
const
uint64_t
kStartTime
=
123456789
;
using
:
:
testing
:
:
ElementsAreArray
;
class
LoopbackTransportTest
:
public
webrtc
:
:
Transport
{
public
:
LoopbackTransportTest
(
)
{
receivers_extensions_
.
Register
<
AudioLevel
>
(
kAudioLevelExtensionId
)
;
receivers_extensions_
.
Register
<
AbsoluteCaptureTimeExtension
>
(
kAbsoluteCaptureTimeExtensionId
)
;
}
bool
SendRtp
(
const
uint8_t
*
data
size_t
len
const
PacketOptions
&
)
override
{
sent_packets_
.
push_back
(
RtpPacketReceived
(
&
receivers_extensions_
)
)
;
EXPECT_TRUE
(
sent_packets_
.
back
(
)
.
Parse
(
data
len
)
)
;
return
true
;
}
bool
SendRtcp
(
const
uint8_t
*
data
size_t
len
)
override
{
return
false
;
}
const
RtpPacketReceived
&
last_sent_packet
(
)
{
return
sent_packets_
.
back
(
)
;
}
int
packets_sent
(
)
{
return
sent_packets_
.
size
(
)
;
}
private
:
RtpHeaderExtensionMap
receivers_extensions_
;
std
:
:
vector
<
RtpPacketReceived
>
sent_packets_
;
}
;
}
class
RtpSenderAudioTest
:
public
:
:
testing
:
:
Test
{
public
:
RtpSenderAudioTest
(
)
:
fake_clock_
(
kStartTime
)
rtp_module_
(
ModuleRtpRtcpImpl2
:
:
Create
(
[
&
]
{
RtpRtcpInterface
:
:
Configuration
config
;
config
.
audio
=
true
;
config
.
clock
=
&
fake_clock_
;
config
.
outgoing_transport
=
&
transport_
;
config
.
local_media_ssrc
=
kSsrc
;
return
config
;
}
(
)
)
)
rtp_sender_audio_
(
std
:
:
make_unique
<
RTPSenderAudio
>
(
&
fake_clock_
rtp_module_
-
>
RtpSender
(
)
)
)
{
rtp_module_
-
>
SetSequenceNumber
(
kSeqNum
)
;
}
SimulatedClock
fake_clock_
;
LoopbackTransportTest
transport_
;
std
:
:
unique_ptr
<
ModuleRtpRtcpImpl2
>
rtp_module_
;
std
:
:
unique_ptr
<
RTPSenderAudio
>
rtp_sender_audio_
;
}
;
TEST_F
(
RtpSenderAudioTest
SendAudio
)
{
const
char
payload_name
[
]
=
"
PAYLOAD_NAME
"
;
const
uint8_t
payload_type
=
127
;
ASSERT_EQ
(
0
rtp_sender_audio_
-
>
RegisterAudioPayload
(
payload_name
payload_type
48000
0
1500
)
)
;
uint8_t
payload
[
]
=
{
47
11
32
93
89
}
;
ASSERT_TRUE
(
rtp_sender_audio_
-
>
SendAudio
(
AudioFrameType
:
:
kAudioFrameCN
payload_type
4321
payload
sizeof
(
payload
)
0
)
)
;
auto
sent_payload
=
transport_
.
last_sent_packet
(
)
.
payload
(
)
;
EXPECT_THAT
(
sent_payload
ElementsAreArray
(
payload
)
)
;
}
TEST_F
(
RtpSenderAudioTest
SendAudioWithAudioLevelExtension
)
{
EXPECT_EQ
(
0
rtp_sender_audio_
-
>
SetAudioLevel
(
kAudioLevel
)
)
;
rtp_module_
-
>
RegisterRtpHeaderExtension
(
AudioLevel
:
:
Uri
(
)
kAudioLevelExtensionId
)
;
const
char
payload_name
[
]
=
"
PAYLOAD_NAME
"
;
const
uint8_t
payload_type
=
127
;
ASSERT_EQ
(
0
rtp_sender_audio_
-
>
RegisterAudioPayload
(
payload_name
payload_type
48000
0
1500
)
)
;
uint8_t
payload
[
]
=
{
47
11
32
93
89
}
;
ASSERT_TRUE
(
rtp_sender_audio_
-
>
SendAudio
(
AudioFrameType
:
:
kAudioFrameCN
payload_type
4321
payload
sizeof
(
payload
)
0
)
)
;
auto
sent_payload
=
transport_
.
last_sent_packet
(
)
.
payload
(
)
;
EXPECT_THAT
(
sent_payload
ElementsAreArray
(
payload
)
)
;
bool
voice_activity
;
uint8_t
audio_level
;
EXPECT_TRUE
(
transport_
.
last_sent_packet
(
)
.
GetExtension
<
AudioLevel
>
(
&
voice_activity
&
audio_level
)
)
;
EXPECT_EQ
(
kAudioLevel
audio_level
)
;
EXPECT_FALSE
(
voice_activity
)
;
}
TEST_F
(
RtpSenderAudioTest
SendAudioWithoutAbsoluteCaptureTime
)
{
constexpr
uint32_t
kAbsoluteCaptureTimestampMs
=
521
;
const
char
payload_name
[
]
=
"
audio
"
;
const
uint8_t
payload_type
=
127
;
ASSERT_EQ
(
0
rtp_sender_audio_
-
>
RegisterAudioPayload
(
payload_name
payload_type
48000
0
1500
)
)
;
uint8_t
payload
[
]
=
{
47
11
32
93
89
}
;
ASSERT_TRUE
(
rtp_sender_audio_
-
>
SendAudio
(
AudioFrameType
:
:
kAudioFrameCN
payload_type
4321
payload
sizeof
(
payload
)
kAbsoluteCaptureTimestampMs
)
)
;
EXPECT_FALSE
(
transport_
.
last_sent_packet
(
)
.
HasExtension
<
AbsoluteCaptureTimeExtension
>
(
)
)
;
}
TEST_F
(
RtpSenderAudioTest
SendAudioWithAbsoluteCaptureTime
)
{
rtp_module_
-
>
RegisterRtpHeaderExtension
(
AbsoluteCaptureTimeExtension
:
:
Uri
(
)
kAbsoluteCaptureTimeExtensionId
)
;
constexpr
uint32_t
kAbsoluteCaptureTimestampMs
=
521
;
const
char
payload_name
[
]
=
"
audio
"
;
const
uint8_t
payload_type
=
127
;
ASSERT_EQ
(
0
rtp_sender_audio_
-
>
RegisterAudioPayload
(
payload_name
payload_type
48000
0
1500
)
)
;
uint8_t
payload
[
]
=
{
47
11
32
93
89
}
;
ASSERT_TRUE
(
rtp_sender_audio_
-
>
SendAudio
(
AudioFrameType
:
:
kAudioFrameCN
payload_type
4321
payload
sizeof
(
payload
)
kAbsoluteCaptureTimestampMs
)
)
;
auto
absolute_capture_time
=
transport_
.
last_sent_packet
(
)
.
GetExtension
<
AbsoluteCaptureTimeExtension
>
(
)
;
EXPECT_TRUE
(
absolute_capture_time
)
;
EXPECT_EQ
(
absolute_capture_time
-
>
absolute_capture_timestamp
Int64MsToUQ32x32
(
fake_clock_
.
ConvertTimestampToNtpTimeInMilliseconds
(
kAbsoluteCaptureTimestampMs
)
)
)
;
EXPECT_FALSE
(
absolute_capture_time
-
>
estimated_capture_clock_offset
.
has_value
(
)
)
;
}
TEST_F
(
RtpSenderAudioTest
SendAudioWithAbsoluteCaptureTimeWithCaptureClockOffset
)
{
test
:
:
ScopedFieldTrials
field_trial
(
"
WebRTC
-
IncludeCaptureClockOffset
/
Enabled
/
"
)
;
rtp_sender_audio_
=
std
:
:
make_unique
<
RTPSenderAudio
>
(
&
fake_clock_
rtp_module_
-
>
RtpSender
(
)
)
;
rtp_module_
-
>
RegisterRtpHeaderExtension
(
AbsoluteCaptureTimeExtension
:
:
Uri
(
)
kAbsoluteCaptureTimeExtensionId
)
;
constexpr
uint32_t
kAbsoluteCaptureTimestampMs
=
521
;
const
char
payload_name
[
]
=
"
audio
"
;
const
uint8_t
payload_type
=
127
;
ASSERT_EQ
(
0
rtp_sender_audio_
-
>
RegisterAudioPayload
(
payload_name
payload_type
48000
0
1500
)
)
;
uint8_t
payload
[
]
=
{
47
11
32
93
89
}
;
ASSERT_TRUE
(
rtp_sender_audio_
-
>
SendAudio
(
AudioFrameType
:
:
kAudioFrameCN
payload_type
4321
payload
sizeof
(
payload
)
kAbsoluteCaptureTimestampMs
)
)
;
auto
absolute_capture_time
=
transport_
.
last_sent_packet
(
)
.
GetExtension
<
AbsoluteCaptureTimeExtension
>
(
)
;
EXPECT_TRUE
(
absolute_capture_time
)
;
EXPECT_EQ
(
absolute_capture_time
-
>
absolute_capture_timestamp
Int64MsToUQ32x32
(
fake_clock_
.
ConvertTimestampToNtpTimeInMilliseconds
(
kAbsoluteCaptureTimestampMs
)
)
)
;
EXPECT_TRUE
(
absolute_capture_time
-
>
estimated_capture_clock_offset
.
has_value
(
)
)
;
EXPECT_EQ
(
0
*
absolute_capture_time
-
>
estimated_capture_clock_offset
)
;
}
TEST_F
(
RtpSenderAudioTest
CheckMarkerBitForTelephoneEvents
)
{
const
char
*
kDtmfPayloadName
=
"
telephone
-
event
"
;
const
uint32_t
kPayloadFrequency
=
8000
;
const
uint8_t
kPayloadType
=
126
;
ASSERT_EQ
(
0
rtp_sender_audio_
-
>
RegisterAudioPayload
(
kDtmfPayloadName
kPayloadType
kPayloadFrequency
0
0
)
)
;
const
char
*
kPayloadName
=
"
payload_name
"
;
ASSERT_EQ
(
0
rtp_sender_audio_
-
>
RegisterAudioPayload
(
kPayloadName
kPayloadType
kPayloadFrequency
1
0
)
)
;
uint32_t
capture_timestamp
=
fake_clock_
.
TimeInMilliseconds
(
)
;
rtp_sender_audio_
-
>
SendTelephoneEvent
(
9
500
10
)
;
ASSERT_TRUE
(
rtp_sender_audio_
-
>
SendAudio
(
AudioFrameType
:
:
kEmptyFrame
kPayloadType
capture_timestamp
nullptr
0
0
)
)
;
ASSERT_TRUE
(
rtp_sender_audio_
-
>
SendAudio
(
AudioFrameType
:
:
kEmptyFrame
kPayloadType
capture_timestamp
+
2000
nullptr
0
0
)
)
;
EXPECT_TRUE
(
transport_
.
last_sent_packet
(
)
.
Marker
(
)
)
;
ASSERT_TRUE
(
rtp_sender_audio_
-
>
SendAudio
(
AudioFrameType
:
:
kEmptyFrame
kPayloadType
capture_timestamp
+
4000
nullptr
0
0
)
)
;
EXPECT_FALSE
(
transport_
.
last_sent_packet
(
)
.
Marker
(
)
)
;
}
}
