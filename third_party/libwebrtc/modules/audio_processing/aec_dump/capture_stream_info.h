#
ifndef
MODULES_AUDIO_PROCESSING_AEC_DUMP_CAPTURE_STREAM_INFO_H_
#
define
MODULES_AUDIO_PROCESSING_AEC_DUMP_CAPTURE_STREAM_INFO_H_
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
utility
>
#
include
"
api
/
audio
/
audio_view
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
aec_dump
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_frame_view
.
h
"
#
ifdef
WEBRTC_ANDROID_PLATFORM_BUILD
#
include
"
external
/
webrtc
/
webrtc
/
modules
/
audio_processing
/
debug
.
pb
.
h
"
#
else
#
include
"
modules
/
audio_processing
/
debug
.
pb
.
h
"
#
endif
namespace
webrtc
{
class
CaptureStreamInfo
{
public
:
CaptureStreamInfo
(
)
{
CreateNewEvent
(
)
;
}
CaptureStreamInfo
(
const
CaptureStreamInfo
&
)
=
delete
;
CaptureStreamInfo
&
operator
=
(
const
CaptureStreamInfo
&
)
=
delete
;
~
CaptureStreamInfo
(
)
=
default
;
void
AddInput
(
const
AudioFrameView
<
const
float
>
&
src
)
;
void
AddInputChannel
(
MonoView
<
const
float
>
channel
)
;
void
AddOutput
(
const
AudioFrameView
<
const
float
>
&
src
)
;
void
AddOutputChannel
(
MonoView
<
const
float
>
channel
)
;
void
AddInput
(
const
int16_t
*
const
data
int
num_channels
int
samples_per_channel
)
;
void
AddOutput
(
const
int16_t
*
const
data
int
num_channels
int
samples_per_channel
)
;
void
AddAudioProcessingState
(
const
AecDump
:
:
AudioProcessingState
&
state
)
;
std
:
:
unique_ptr
<
audioproc
:
:
Event
>
FetchEvent
(
)
{
std
:
:
unique_ptr
<
audioproc
:
:
Event
>
result
=
std
:
:
move
(
event_
)
;
CreateNewEvent
(
)
;
return
result
;
}
private
:
void
CreateNewEvent
(
)
{
event_
=
std
:
:
make_unique
<
audioproc
:
:
Event
>
(
)
;
event_
-
>
set_type
(
audioproc
:
:
Event
:
:
STREAM
)
;
}
std
:
:
unique_ptr
<
audioproc
:
:
Event
>
event_
;
}
;
}
#
endif
