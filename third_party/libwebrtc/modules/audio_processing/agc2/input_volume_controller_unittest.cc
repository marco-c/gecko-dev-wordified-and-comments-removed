#
include
"
modules
/
audio_processing
/
agc2
/
input_volume_controller
.
h
"
#
include
<
algorithm
>
#
include
<
fstream
>
#
include
<
limits
>
#
include
<
string
>
#
include
<
tuple
>
#
include
<
vector
>
#
include
"
rtc_base
/
numerics
/
safe_minmax
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
#
include
"
test
/
field_trial
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
testsupport
/
file_utils
.
h
"
using
:
:
testing
:
:
_
;
using
:
:
testing
:
:
AtLeast
;
using
:
:
testing
:
:
DoAll
;
using
:
:
testing
:
:
Return
;
using
:
:
testing
:
:
SetArgPointee
;
namespace
webrtc
{
namespace
{
constexpr
int
kSampleRateHz
=
32000
;
constexpr
int
kNumChannels
=
1
;
constexpr
int
kInitialInputVolume
=
128
;
constexpr
int
kClippedMin
=
165
;
constexpr
float
kAboveClippedThreshold
=
0
.
2f
;
constexpr
int
kMinMicLevel
=
12
;
constexpr
int
kClippedLevelStep
=
15
;
constexpr
float
kClippedRatioThreshold
=
0
.
1f
;
constexpr
int
kClippedWaitFrames
=
300
;
constexpr
float
kHighSpeechProbability
=
0
.
7f
;
constexpr
float
kLowSpeechProbability
=
0
.
1f
;
constexpr
float
kSpeechLevel
=
-
25
.
0f
;
constexpr
float
kSpeechProbabilityThreshold
=
0
.
5f
;
constexpr
float
kSpeechRatioThreshold
=
0
.
8f
;
constexpr
float
kMinSample
=
std
:
:
numeric_limits
<
int16_t
>
:
:
min
(
)
;
constexpr
float
kMaxSample
=
std
:
:
numeric_limits
<
int16_t
>
:
:
max
(
)
;
using
ClippingPredictorConfig
=
AudioProcessing
:
:
Config
:
:
GainController1
:
:
AnalogGainController
:
:
ClippingPredictor
;
using
InputVolumeControllerConfig
=
InputVolumeController
:
:
Config
;
constexpr
InputVolumeControllerConfig
kDefaultInputVolumeControllerConfig
{
}
;
constexpr
ClippingPredictorConfig
kDefaultClippingPredictorConfig
{
}
;
std
:
:
unique_ptr
<
InputVolumeController
>
CreateInputVolumeController
(
int
clipped_level_step
float
clipped_ratio_threshold
int
clipped_wait_frames
bool
enable_clipping_predictor
=
false
int
update_input_volume_wait_frames
=
0
)
{
InputVolumeControllerConfig
config
{
.
clipped_level_min
=
kClippedMin
.
clipped_level_step
=
clipped_level_step
.
clipped_ratio_threshold
=
clipped_ratio_threshold
.
clipped_wait_frames
=
clipped_wait_frames
.
enable_clipping_predictor
=
enable_clipping_predictor
.
target_range_max_dbfs
=
-
18
.
target_range_min_dbfs
=
-
30
.
update_input_volume_wait_frames
=
update_input_volume_wait_frames
.
speech_probability_threshold
=
kSpeechProbabilityThreshold
.
speech_ratio_threshold
=
kSpeechRatioThreshold
}
;
return
std
:
:
make_unique
<
InputVolumeController
>
(
1
config
)
;
}
void
CallPreProcessAudioBuffer
(
int
num_calls
float
peak_ratio
InputVolumeController
&
manager
)
{
RTC_DCHECK_LE
(
peak_ratio
1
.
0f
)
;
AudioBuffer
audio_buffer
(
kSampleRateHz
kNumChannels
kSampleRateHz
kNumChannels
kSampleRateHz
kNumChannels
)
;
const
int
num_channels
=
audio_buffer
.
num_channels
(
)
;
const
int
num_frames
=
audio_buffer
.
num_frames
(
)
;
for
(
int
ch
=
0
;
ch
<
num_channels
;
+
+
ch
)
{
for
(
int
i
=
0
;
i
<
num_frames
;
i
+
=
2
)
{
audio_buffer
.
channels
(
)
[
ch
]
[
i
]
=
peak_ratio
*
32767
.
0f
;
audio_buffer
.
channels
(
)
[
ch
]
[
i
+
1
]
=
0
.
0f
;
}
}
for
(
int
n
=
0
;
n
<
num_calls
/
2
;
+
+
n
)
{
manager
.
AnalyzePreProcess
(
audio_buffer
)
;
}
for
(
int
ch
=
0
;
ch
<
num_channels
;
+
+
ch
)
{
for
(
int
i
=
0
;
i
<
num_frames
;
+
+
i
)
{
audio_buffer
.
channels
(
)
[
ch
]
[
i
]
=
peak_ratio
*
32767
.
0f
;
}
}
for
(
int
n
=
0
;
n
<
num_calls
-
num_calls
/
2
;
+
+
n
)
{
manager
.
AnalyzePreProcess
(
audio_buffer
)
;
}
}
constexpr
char
kMinMicLevelFieldTrial
[
]
=
"
WebRTC
-
Audio
-
2ndAgcMinMicLevelExperiment
"
;
std
:
:
string
GetAgcMinMicLevelExperimentFieldTrial
(
const
std
:
:
string
&
value
)
{
char
field_trial_buffer
[
64
]
;
rtc
:
:
SimpleStringBuilder
builder
(
field_trial_buffer
)
;
builder
<
<
kMinMicLevelFieldTrial
<
<
"
/
"
<
<
value
<
<
"
/
"
;
return
builder
.
str
(
)
;
}
std
:
:
string
GetAgcMinMicLevelExperimentFieldTrialEnabled
(
int
enabled_value
const
std
:
:
string
&
suffix
=
"
"
)
{
RTC_DCHECK_GE
(
enabled_value
0
)
;
RTC_DCHECK_LE
(
enabled_value
255
)
;
char
field_trial_buffer
[
64
]
;
rtc
:
:
SimpleStringBuilder
builder
(
field_trial_buffer
)
;
builder
<
<
kMinMicLevelFieldTrial
<
<
"
/
Enabled
-
"
<
<
enabled_value
<
<
suffix
<
<
"
/
"
;
return
builder
.
str
(
)
;
}
std
:
:
string
GetAgcMinMicLevelExperimentFieldTrial
(
absl
:
:
optional
<
int
>
min_mic_level
)
{
if
(
min_mic_level
.
has_value
(
)
)
{
return
GetAgcMinMicLevelExperimentFieldTrialEnabled
(
*
min_mic_level
)
;
}
return
GetAgcMinMicLevelExperimentFieldTrial
(
"
Disabled
"
)
;
}
void
WriteAudioBufferSamples
(
float
samples_value
float
clipped_ratio
AudioBuffer
&
audio_buffer
)
{
RTC_DCHECK_GE
(
samples_value
kMinSample
)
;
RTC_DCHECK_LE
(
samples_value
kMaxSample
)
;
RTC_DCHECK_GE
(
clipped_ratio
0
.
0f
)
;
RTC_DCHECK_LE
(
clipped_ratio
1
.
0f
)
;
int
num_channels
=
audio_buffer
.
num_channels
(
)
;
int
num_samples
=
audio_buffer
.
num_frames
(
)
;
int
num_clipping_samples
=
clipped_ratio
*
num_samples
;
for
(
int
ch
=
0
;
ch
<
num_channels
;
+
+
ch
)
{
int
i
=
0
;
for
(
;
i
<
num_clipping_samples
;
+
+
i
)
{
audio_buffer
.
channels
(
)
[
ch
]
[
i
]
=
32767
.
0f
;
}
for
(
;
i
<
num_samples
;
+
+
i
)
{
audio_buffer
.
channels
(
)
[
ch
]
[
i
]
=
samples_value
;
}
}
}
void
CallPreProcessAndProcess
(
int
num_calls
const
AudioBuffer
&
audio_buffer
float
speech_probability
absl
:
:
optional
<
float
>
speech_level
InputVolumeController
&
manager
)
{
for
(
int
n
=
0
;
n
<
num_calls
;
+
+
n
)
{
manager
.
AnalyzePreProcess
(
audio_buffer
)
;
manager
.
Process
(
speech_probability
speech_level
)
;
}
}
class
SpeechSamplesReader
{
private
:
static
constexpr
int
kPcmSampleRateHz
=
16000
;
static
constexpr
int
kPcmNumChannels
=
1
;
static
constexpr
int
kPcmBytesPerSamples
=
sizeof
(
int16_t
)
;
public
:
SpeechSamplesReader
(
)
:
is_
(
test
:
:
ResourcePath
(
"
audio_processing
/
agc
/
agc_audio
"
"
pcm
"
)
std
:
:
ios
:
:
binary
|
std
:
:
ios
:
:
ate
)
audio_buffer_
(
kPcmSampleRateHz
kPcmNumChannels
kPcmSampleRateHz
kPcmNumChannels
kPcmSampleRateHz
kPcmNumChannels
)
buffer_
(
audio_buffer_
.
num_frames
(
)
)
buffer_num_bytes_
(
buffer_
.
size
(
)
*
kPcmBytesPerSamples
)
{
RTC_CHECK
(
is_
)
;
}
void
Feed
(
int
num_frames
int
gain_db
float
speech_probability
absl
:
:
optional
<
float
>
speech_level
InputVolumeController
&
agc
)
{
float
gain
=
std
:
:
pow
(
10
.
0f
gain_db
/
20
.
0f
)
;
is_
.
seekg
(
0
is_
.
beg
)
;
for
(
int
i
=
0
;
i
<
num_frames
;
+
+
i
)
{
is_
.
read
(
reinterpret_cast
<
char
*
>
(
buffer_
.
data
(
)
)
buffer_num_bytes_
)
;
if
(
is_
.
gcount
(
)
<
buffer_num_bytes_
)
{
break
;
}
std
:
:
transform
(
buffer_
.
begin
(
)
buffer_
.
end
(
)
audio_buffer_
.
channels
(
)
[
0
]
[
gain
]
(
int16_t
v
)
-
>
float
{
return
rtc
:
:
SafeClamp
(
static_cast
<
float
>
(
v
)
*
gain
kMinSample
kMaxSample
)
;
}
)
;
agc
.
AnalyzePreProcess
(
audio_buffer_
)
;
agc
.
Process
(
speech_probability
speech_level
)
;
}
}
private
:
std
:
:
ifstream
is_
;
AudioBuffer
audio_buffer_
;
std
:
:
vector
<
int16_t
>
buffer_
;
const
std
:
:
streamsize
buffer_num_bytes_
;
}
;
float
UpdateRecommendedInputVolume
(
MonoInputVolumeController
&
controller
int
applied_input_volume
float
speech_probability
const
absl
:
:
optional
<
float
>
rms_error_dbfs
)
{
controller
.
set_stream_analog_level
(
applied_input_volume
)
;
EXPECT_EQ
(
controller
.
recommended_analog_level
(
)
applied_input_volume
)
;
controller
.
Process
(
rms_error_dbfs
speech_probability
)
;
return
controller
.
recommended_analog_level
(
)
;
}
}
constexpr
InputVolumeControllerConfig
GetInputVolumeControllerTestConfig
(
)
{
InputVolumeControllerConfig
config
{
.
clipped_level_min
=
kClippedMin
.
clipped_level_step
=
kClippedLevelStep
.
clipped_ratio_threshold
=
kClippedRatioThreshold
.
clipped_wait_frames
=
kClippedWaitFrames
.
enable_clipping_predictor
=
kDefaultClippingPredictorConfig
.
enabled
.
target_range_max_dbfs
=
-
18
.
target_range_min_dbfs
=
-
30
.
update_input_volume_wait_frames
=
0
.
speech_probability_threshold
=
0
.
5f
.
speech_ratio_threshold
=
1
.
0f
}
;
return
config
;
}
class
InputVolumeControllerTestHelper
{
public
:
InputVolumeControllerTestHelper
(
)
:
audio_buffer
(
kSampleRateHz
kNumChannels
kSampleRateHz
kNumChannels
kSampleRateHz
kNumChannels
)
manager
(
1
GetInputVolumeControllerTestConfig
(
)
)
{
manager
.
Initialize
(
)
;
WriteAudioBufferSamples
(
0
.
0f
0
.
0f
audio_buffer
)
;
}
int
CallAgcSequence
(
int
applied_input_volume
float
speech_probability
absl
:
:
optional
<
float
>
speech_level
)
{
manager
.
set_stream_analog_level
(
applied_input_volume
)
;
manager
.
AnalyzePreProcess
(
audio_buffer
)
;
manager
.
Process
(
speech_probability
speech_level
)
;
return
manager
.
recommended_analog_level
(
)
;
}
void
CallProcess
(
int
num_calls
float
speech_probability
absl
:
:
optional
<
float
>
speech_level
)
{
for
(
int
i
=
0
;
i
<
num_calls
;
+
+
i
)
{
manager
.
Process
(
speech_probability
speech_level
)
;
}
}
void
CallPreProc
(
int
num_calls
float
clipped_ratio
)
{
RTC_DCHECK_GE
(
clipped_ratio
0
.
0f
)
;
RTC_DCHECK_LE
(
clipped_ratio
1
.
0f
)
;
WriteAudioBufferSamples
(
0
.
0f
clipped_ratio
audio_buffer
)
;
for
(
int
i
=
0
;
i
<
num_calls
;
+
+
i
)
{
manager
.
AnalyzePreProcess
(
audio_buffer
)
;
}
}
void
CallPreProcForChangingAudio
(
int
num_calls
float
peak_ratio
)
{
RTC_DCHECK_GE
(
peak_ratio
0
.
0f
)
;
RTC_DCHECK_LE
(
peak_ratio
1
.
0f
)
;
const
float
samples_value
=
peak_ratio
*
32767
.
0f
;
WriteAudioBufferSamples
(
samples_value
0
.
0f
audio_buffer
)
;
for
(
size_t
ch
=
0
;
ch
<
audio_buffer
.
num_channels
(
)
;
+
+
ch
)
{
for
(
size_t
k
=
1
;
k
<
audio_buffer
.
num_frames
(
)
;
k
+
=
2
)
{
audio_buffer
.
channels
(
)
[
ch
]
[
k
]
=
0
.
0f
;
}
}
for
(
int
i
=
0
;
i
<
num_calls
/
2
;
+
+
i
)
{
manager
.
AnalyzePreProcess
(
audio_buffer
)
;
}
WriteAudioBufferSamples
(
samples_value
0
.
0f
audio_buffer
)
;
for
(
int
i
=
0
;
i
<
num_calls
-
num_calls
/
2
;
+
+
i
)
{
manager
.
AnalyzePreProcess
(
audio_buffer
)
;
}
}
AudioBuffer
audio_buffer
;
InputVolumeController
manager
;
}
;
class
InputVolumeControllerParametrizedTest
:
public
:
:
testing
:
:
TestWithParam
<
std
:
:
tuple
<
absl
:
:
optional
<
int
>
bool
>
>
{
protected
:
InputVolumeControllerParametrizedTest
(
)
:
field_trials_
(
GetAgcMinMicLevelExperimentFieldTrial
(
std
:
:
get
<
0
>
(
GetParam
(
)
)
)
)
{
}
bool
IsMinMicLevelOverridden
(
)
const
{
return
std
:
:
get
<
0
>
(
GetParam
(
)
)
.
has_value
(
)
;
}
int
GetMinMicLevel
(
)
const
{
return
std
:
:
get
<
0
>
(
GetParam
(
)
)
.
value_or
(
kMinMicLevel
)
;
}
bool
RmsErrorHasValue
(
)
const
{
return
std
:
:
get
<
1
>
(
GetParam
(
)
)
;
}
absl
:
:
optional
<
float
>
GetValueOrEmpty
(
float
value
)
const
{
return
RmsErrorHasValue
(
)
?
absl
:
:
optional
<
float
>
(
value
)
:
absl
:
:
nullopt
;
}
private
:
test
:
:
ScopedFieldTrials
field_trials_
;
}
;
INSTANTIATE_TEST_SUITE_P
(
InputVolumeControllerParametrizedTest
:
:
testing
:
:
Combine
(
testing
:
:
Values
(
absl
:
:
nullopt
12
20
)
testing
:
:
Values
(
true
)
)
)
;
TEST_P
(
InputVolumeControllerParametrizedTest
StartupMinVolumeConfigurationIsRespected
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
EXPECT_EQ
(
kInitialInputVolume
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
MicVolumeResponseToRmsError
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
23
.
0f
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
28
.
0f
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
29
.
0f
)
)
;
EXPECT_EQ
(
128
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
38
.
0f
)
)
;
EXPECT_EQ
(
156
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
23
.
0f
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
18
.
0f
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
17
.
0f
)
)
;
EXPECT_EQ
(
155
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
17
.
0f
)
)
;
EXPECT_EQ
(
151
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
9
.
0f
)
)
;
EXPECT_EQ
(
119
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
MicVolumeIsLimited
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
48
.
0f
)
)
;
EXPECT_EQ
(
183
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
48
.
0f
)
)
;
EXPECT_EQ
(
243
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
48
.
0f
)
)
;
EXPECT_EQ
(
255
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
17
.
0f
)
)
;
EXPECT_EQ
(
254
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
22
.
0f
)
)
;
EXPECT_EQ
(
194
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
22
.
0f
)
)
;
EXPECT_EQ
(
137
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
22
.
0f
)
)
;
EXPECT_EQ
(
88
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
22
.
0f
)
)
;
EXPECT_EQ
(
54
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
22
.
0f
)
)
;
EXPECT_EQ
(
33
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
22
.
0f
)
)
;
EXPECT_EQ
(
std
:
:
max
(
18
GetMinMicLevel
(
)
)
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
22
.
0f
)
)
;
EXPECT_EQ
(
std
:
:
max
(
12
GetMinMicLevel
(
)
)
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
NoActionWhileMuted
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
manager
.
HandleCaptureOutputUsedChange
(
false
)
;
helper
.
manager
.
Process
(
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
UnmutingChecksVolumeWithoutRaising
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
manager
.
HandleCaptureOutputUsedChange
(
false
)
;
helper
.
manager
.
HandleCaptureOutputUsedChange
(
true
)
;
constexpr
int
kInputVolume
=
127
;
helper
.
manager
.
set_stream_analog_level
(
kInputVolume
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
EXPECT_EQ
(
127
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
UnmutingRaisesTooLowVolume
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
manager
.
HandleCaptureOutputUsedChange
(
false
)
;
helper
.
manager
.
HandleCaptureOutputUsedChange
(
true
)
;
constexpr
int
kInputVolume
=
11
;
helper
.
manager
.
set_stream_analog_level
(
kInputVolume
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
EXPECT_EQ
(
GetMinMicLevel
(
)
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
ManualLevelChangeResultsInNoSetMicCall
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
ASSERT_NE
(
helper
.
manager
.
recommended_analog_level
(
)
154
)
;
helper
.
manager
.
set_stream_analog_level
(
154
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
29
.
0f
)
)
;
EXPECT_EQ
(
154
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
manager
.
set_stream_analog_level
(
100
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
17
.
0f
)
)
;
EXPECT_EQ
(
100
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
17
.
0f
)
)
;
EXPECT_EQ
(
99
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
RecoveryAfterManualLevelChangeFromMax
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
48
.
0f
)
)
;
EXPECT_EQ
(
183
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
48
.
0f
)
)
;
EXPECT_EQ
(
243
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
48
.
0f
)
)
;
EXPECT_EQ
(
255
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
manager
.
set_stream_analog_level
(
50
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
17
.
0f
)
)
;
EXPECT_EQ
(
50
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
38
.
0f
)
)
;
EXPECT_EQ
(
65
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
RecoveryAfterManualLevelChangeBelowMinWithoutMinMicLevelOverride
)
{
if
(
IsMinMicLevelOverridden
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Skipped
.
Min
mic
level
overridden
.
"
;
}
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
manager
.
set_stream_analog_level
(
1
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
17
.
0f
)
)
;
EXPECT_EQ
(
1
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
29
.
0f
)
)
;
EXPECT_EQ
(
1
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
48
.
0f
)
)
;
EXPECT_EQ
(
10
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
38
.
0f
)
)
;
EXPECT_EQ
(
16
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
RecoveryAfterManualLevelChangeBelowMin
)
{
if
(
!
IsMinMicLevelOverridden
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Skipped
.
Min
mic
level
not
overridden
.
"
;
}
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
manager
.
set_stream_analog_level
(
1
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
17
.
0f
)
)
;
EXPECT_EQ
(
GetMinMicLevel
(
)
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
NoClippingHasNoImpact
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallPreProc
(
100
0
)
;
EXPECT_EQ
(
128
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
ClippingUnderThresholdHasNoImpact
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallPreProc
(
1
0
.
099
)
;
EXPECT_EQ
(
128
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
ClippingLowersVolume
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
255
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallPreProc
(
1
0
.
2
)
;
EXPECT_EQ
(
240
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
WaitingPeriodBetweenClippingChecks
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
255
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallPreProc
(
1
kAboveClippedThreshold
)
;
EXPECT_EQ
(
240
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallPreProc
(
300
kAboveClippedThreshold
)
;
EXPECT_EQ
(
240
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallPreProc
(
1
kAboveClippedThreshold
)
;
EXPECT_EQ
(
225
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
ClippingLoweringIsLimited
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
180
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallPreProc
(
1
kAboveClippedThreshold
)
;
EXPECT_EQ
(
kClippedMin
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallPreProc
(
1000
kAboveClippedThreshold
)
;
EXPECT_EQ
(
kClippedMin
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
ClippingMaxIsRespectedWhenEqualToLevel
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
255
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallPreProc
(
1
kAboveClippedThreshold
)
;
EXPECT_EQ
(
240
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
10
kHighSpeechProbability
GetValueOrEmpty
(
-
48
.
0f
)
)
;
EXPECT_EQ
(
240
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
ClippingMaxIsRespectedWhenHigherThanLevel
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
200
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallPreProc
(
1
kAboveClippedThreshold
)
;
EXPECT_EQ
(
185
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
58
.
0f
)
)
;
EXPECT_EQ
(
240
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
10
kHighSpeechProbability
GetValueOrEmpty
(
-
58
.
0f
)
)
;
EXPECT_EQ
(
240
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
UserCanRaiseVolumeAfterClipping
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
225
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
CallPreProc
(
1
kAboveClippedThreshold
)
;
EXPECT_EQ
(
210
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
manager
.
set_stream_analog_level
(
250
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
32
.
0f
)
)
;
EXPECT_EQ
(
250
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
8
.
0f
)
)
;
EXPECT_EQ
(
210
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
58
.
0f
)
)
;
EXPECT_EQ
(
250
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallProcess
(
1
kHighSpeechProbability
GetValueOrEmpty
(
-
48
.
0f
)
)
;
EXPECT_EQ
(
250
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
ClippingDoesNotPullLowVolumeBackUp
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
80
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
int
initial_volume
=
helper
.
manager
.
recommended_analog_level
(
)
;
helper
.
CallPreProc
(
1
kAboveClippedThreshold
)
;
EXPECT_EQ
(
initial_volume
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
TakesNoActionOnZeroMicVolume
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
kInitialInputVolume
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
helper
.
manager
.
set_stream_analog_level
(
0
)
;
helper
.
CallProcess
(
10
kHighSpeechProbability
GetValueOrEmpty
(
-
48
.
0f
)
)
;
EXPECT_EQ
(
0
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
ClippingDetectionLowersVolume
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
255
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
EXPECT_EQ
(
255
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallPreProcForChangingAudio
(
100
0
.
99f
)
;
EXPECT_EQ
(
255
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallPreProcForChangingAudio
(
100
1
.
0f
)
;
EXPECT_EQ
(
240
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
DisabledClippingPredictorDoesNotLowerVolume
)
{
InputVolumeControllerTestHelper
helper
;
helper
.
CallAgcSequence
(
255
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
EXPECT_FALSE
(
helper
.
manager
.
clipping_predictor_enabled
(
)
)
;
EXPECT_EQ
(
255
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallPreProcForChangingAudio
(
100
0
.
99f
)
;
EXPECT_EQ
(
255
helper
.
manager
.
recommended_analog_level
(
)
)
;
helper
.
CallPreProcForChangingAudio
(
100
0
.
99f
)
;
EXPECT_EQ
(
255
helper
.
manager
.
recommended_analog_level
(
)
)
;
}
TEST
(
InputVolumeControllerTest
AgcMinMicLevelExperimentDefault
)
{
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
)
;
EXPECT_EQ
(
manager
-
>
channel_controllers_
[
0
]
-
>
min_mic_level
(
)
kMinMicLevel
)
;
}
TEST
(
InputVolumeControllerTest
AgcMinMicLevelExperimentDisabled
)
{
for
(
const
std
:
:
string
&
field_trial_suffix
:
{
"
"
"
_20220210
"
}
)
{
test
:
:
ScopedFieldTrials
field_trial
(
GetAgcMinMicLevelExperimentFieldTrial
(
"
Disabled
"
+
field_trial_suffix
)
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
)
;
EXPECT_EQ
(
manager
-
>
channel_controllers_
[
0
]
-
>
min_mic_level
(
)
kMinMicLevel
)
;
}
}
TEST
(
InputVolumeControllerTest
AgcMinMicLevelExperimentOutOfRangeAbove
)
{
test
:
:
ScopedFieldTrials
field_trial
(
GetAgcMinMicLevelExperimentFieldTrial
(
"
Enabled
-
256
"
)
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
)
;
EXPECT_EQ
(
manager
-
>
channel_controllers_
[
0
]
-
>
min_mic_level
(
)
kMinMicLevel
)
;
}
TEST
(
InputVolumeControllerTest
AgcMinMicLevelExperimentOutOfRangeBelow
)
{
test
:
:
ScopedFieldTrials
field_trial
(
GetAgcMinMicLevelExperimentFieldTrial
(
"
Enabled
-
-
1
"
)
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
)
;
EXPECT_EQ
(
manager
-
>
channel_controllers_
[
0
]
-
>
min_mic_level
(
)
kMinMicLevel
)
;
}
TEST
(
InputVolumeControllerTest
AgcMinMicLevelExperimentEnabled50
)
{
constexpr
int
kMinMicLevelOverride
=
50
;
for
(
const
std
:
:
string
&
field_trial_suffix
:
{
"
"
"
_20220210
"
}
)
{
SCOPED_TRACE
(
field_trial_suffix
)
;
test
:
:
ScopedFieldTrials
field_trial
(
GetAgcMinMicLevelExperimentFieldTrialEnabled
(
kMinMicLevelOverride
field_trial_suffix
)
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
)
;
EXPECT_EQ
(
manager
-
>
channel_controllers_
[
0
]
-
>
min_mic_level
(
)
kMinMicLevelOverride
)
;
}
}
TEST
(
InputVolumeControllerTest
AgcMinMicLevelExperimentCheckMinLevelWithClipping
)
{
constexpr
int
kMinMicLevelOverride
=
250
;
const
auto
factory
=
[
]
(
)
{
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
)
;
manager
-
>
Initialize
(
)
;
manager
-
>
set_stream_analog_level
(
kInitialInputVolume
)
;
return
manager
;
}
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
factory
(
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager_with_override
;
{
test
:
:
ScopedFieldTrials
field_trial
(
GetAgcMinMicLevelExperimentFieldTrialEnabled
(
kMinMicLevelOverride
)
)
;
manager_with_override
=
factory
(
)
;
}
AudioBuffer
audio_buffer
(
kSampleRateHz
1
kSampleRateHz
1
kSampleRateHz
1
)
;
WriteAudioBufferSamples
(
4000
.
0f
0
.
8f
audio_buffer
)
;
CallPreProcessAndProcess
(
400
audio_buffer
kLowSpeechProbability
-
42
.
0f
*
manager
)
;
CallPreProcessAndProcess
(
400
audio_buffer
kLowSpeechProbability
-
42
.
0f
*
manager_with_override
)
;
ASSERT_GT
(
manager
-
>
recommended_analog_level
(
)
0
)
;
EXPECT_GT
(
manager_with_override
-
>
recommended_analog_level
(
)
manager
-
>
recommended_analog_level
(
)
)
;
EXPECT_EQ
(
manager_with_override
-
>
recommended_analog_level
(
)
kMinMicLevelOverride
)
;
}
TEST
(
InputVolumeControllerTest
AgcMinMicLevelExperimentCheckMinLevelWithClippingWithRmsError
)
{
constexpr
int
kMinMicLevelOverride
=
250
;
const
auto
factory
=
[
]
(
)
{
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
)
;
manager
-
>
Initialize
(
)
;
manager
-
>
set_stream_analog_level
(
kInitialInputVolume
)
;
return
manager
;
}
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
factory
(
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager_with_override
;
{
test
:
:
ScopedFieldTrials
field_trial
(
GetAgcMinMicLevelExperimentFieldTrialEnabled
(
kMinMicLevelOverride
)
)
;
manager_with_override
=
factory
(
)
;
}
AudioBuffer
audio_buffer
(
kSampleRateHz
1
kSampleRateHz
1
kSampleRateHz
1
)
;
WriteAudioBufferSamples
(
4000
.
0f
0
.
8f
audio_buffer
)
;
CallPreProcessAndProcess
(
400
audio_buffer
kHighSpeechProbability
-
18
.
0f
*
manager
)
;
CallPreProcessAndProcess
(
400
audio_buffer
kHighSpeechProbability
-
18
.
0f
*
manager_with_override
)
;
ASSERT_GT
(
manager
-
>
recommended_analog_level
(
)
0
)
;
EXPECT_GT
(
manager_with_override
-
>
recommended_analog_level
(
)
manager
-
>
recommended_analog_level
(
)
)
;
EXPECT_EQ
(
manager_with_override
-
>
recommended_analog_level
(
)
kMinMicLevelOverride
)
;
}
TEST
(
InputVolumeControllerTest
AgcMinMicLevelExperimentCompareMicLevelWithClipping
)
{
const
auto
factory
=
[
]
(
)
{
InputVolumeControllerConfig
config
=
kDefaultInputVolumeControllerConfig
;
config
.
clipped_level_step
=
64
;
config
.
clipped_ratio_threshold
=
kClippedRatioThreshold
;
config
.
clipped_wait_frames
=
kClippedWaitFrames
;
auto
controller
=
std
:
:
make_unique
<
InputVolumeController
>
(
1
config
)
;
controller
-
>
Initialize
(
)
;
controller
-
>
set_stream_analog_level
(
kInitialInputVolume
)
;
return
controller
;
}
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
factory
(
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager_with_override
;
{
constexpr
int
kMinMicLevelOverride
=
20
;
static_assert
(
kDefaultInputVolumeControllerConfig
.
clipped_level_min
>
=
kMinMicLevelOverride
"
Use
a
lower
override
value
.
"
)
;
test
:
:
ScopedFieldTrials
field_trial
(
GetAgcMinMicLevelExperimentFieldTrialEnabled
(
kMinMicLevelOverride
)
)
;
manager_with_override
=
factory
(
)
;
}
AudioBuffer
audio_buffer
(
kSampleRateHz
1
kSampleRateHz
1
kSampleRateHz
1
)
;
WriteAudioBufferSamples
(
4000
.
0f
0
.
8f
audio_buffer
)
;
CallPreProcessAndProcess
(
400
audio_buffer
kLowSpeechProbability
-
18
*
manager
)
;
CallPreProcessAndProcess
(
400
audio_buffer
kLowSpeechProbability
-
18
*
manager_with_override
)
;
ASSERT_GT
(
manager
-
>
recommended_analog_level
(
)
0
)
;
EXPECT_EQ
(
manager
-
>
recommended_analog_level
(
)
manager_with_override
-
>
recommended_analog_level
(
)
)
;
EXPECT_EQ
(
manager_with_override
-
>
recommended_analog_level
(
)
kDefaultInputVolumeControllerConfig
.
clipped_level_min
)
;
}
TEST
(
InputVolumeControllerTest
AgcMinMicLevelExperimentCompareMicLevelWithClippingWithRmsError
)
{
const
auto
factory
=
[
]
(
)
{
InputVolumeControllerConfig
config
=
kDefaultInputVolumeControllerConfig
;
config
.
clipped_level_step
=
64
;
config
.
clipped_ratio_threshold
=
kClippedRatioThreshold
;
config
.
clipped_wait_frames
=
kClippedWaitFrames
;
auto
controller
=
std
:
:
make_unique
<
InputVolumeController
>
(
1
config
)
;
controller
-
>
Initialize
(
)
;
controller
-
>
set_stream_analog_level
(
kInitialInputVolume
)
;
return
controller
;
}
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
factory
(
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager_with_override
;
{
constexpr
int
kMinMicLevelOverride
=
20
;
static_assert
(
kDefaultInputVolumeControllerConfig
.
clipped_level_min
>
=
kMinMicLevelOverride
"
Use
a
lower
override
value
.
"
)
;
test
:
:
ScopedFieldTrials
field_trial
(
GetAgcMinMicLevelExperimentFieldTrialEnabled
(
kMinMicLevelOverride
)
)
;
manager_with_override
=
factory
(
)
;
}
AudioBuffer
audio_buffer
(
kSampleRateHz
1
kSampleRateHz
1
kSampleRateHz
1
)
;
WriteAudioBufferSamples
(
4000
.
0f
0
.
8f
audio_buffer
)
;
CallPreProcessAndProcess
(
400
audio_buffer
0
.
7f
-
18
.
0f
*
manager
)
;
CallPreProcessAndProcess
(
400
audio_buffer
0
.
7f
-
18
.
0f
*
manager_with_override
)
;
ASSERT_GT
(
manager
-
>
recommended_analog_level
(
)
0
)
;
EXPECT_EQ
(
manager
-
>
recommended_analog_level
(
)
manager_with_override
-
>
recommended_analog_level
(
)
)
;
EXPECT_EQ
(
manager_with_override
-
>
recommended_analog_level
(
)
kDefaultInputVolumeControllerConfig
.
clipped_level_min
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
ClippingParametersVerified
)
{
if
(
RmsErrorHasValue
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Skipped
.
RMS
error
does
not
affect
the
test
.
"
;
}
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
)
;
manager
-
>
Initialize
(
)
;
EXPECT_EQ
(
manager
-
>
clipped_level_step_
kClippedLevelStep
)
;
EXPECT_EQ
(
manager
-
>
clipped_ratio_threshold_
kClippedRatioThreshold
)
;
EXPECT_EQ
(
manager
-
>
clipped_wait_frames_
kClippedWaitFrames
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
manager_custom
=
CreateInputVolumeController
(
10
0
.
2f
50
)
;
manager_custom
-
>
Initialize
(
)
;
EXPECT_EQ
(
manager_custom
-
>
clipped_level_step_
10
)
;
EXPECT_EQ
(
manager_custom
-
>
clipped_ratio_threshold_
0
.
2f
)
;
EXPECT_EQ
(
manager_custom
-
>
clipped_wait_frames_
50
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
DisableClippingPredictorDisablesClippingPredictor
)
{
if
(
RmsErrorHasValue
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Skipped
.
RMS
error
does
not
affect
the
test
.
"
;
}
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
false
)
;
manager
-
>
Initialize
(
)
;
EXPECT_FALSE
(
manager
-
>
clipping_predictor_enabled
(
)
)
;
EXPECT_FALSE
(
manager
-
>
use_clipping_predictor_step
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
ClippingPredictorDisabledByDefault
)
{
if
(
RmsErrorHasValue
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Skipped
.
RMS
error
does
not
affect
the
test
.
"
;
}
constexpr
ClippingPredictorConfig
kDefaultConfig
;
EXPECT_FALSE
(
kDefaultConfig
.
enabled
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
EnableClippingPredictorEnablesClippingPredictor
)
{
if
(
RmsErrorHasValue
(
)
)
{
GTEST_SKIP
(
)
<
<
"
Skipped
.
RMS
error
does
not
affect
the
test
.
"
;
}
std
:
:
unique_ptr
<
InputVolumeController
>
manager
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
true
)
;
manager
-
>
Initialize
(
)
;
EXPECT_TRUE
(
manager
-
>
clipping_predictor_enabled
(
)
)
;
EXPECT_TRUE
(
manager
-
>
use_clipping_predictor_step
(
)
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
DisableClippingPredictorDoesNotLowerVolume
)
{
AudioBuffer
audio_buffer
(
kSampleRateHz
kNumChannels
kSampleRateHz
kNumChannels
kSampleRateHz
kNumChannels
)
;
InputVolumeControllerConfig
config
=
GetInputVolumeControllerTestConfig
(
)
;
config
.
enable_clipping_predictor
=
false
;
InputVolumeController
manager
(
1
config
)
;
manager
.
Initialize
(
)
;
manager
.
set_stream_analog_level
(
255
)
;
EXPECT_FALSE
(
manager
.
clipping_predictor_enabled
(
)
)
;
EXPECT_FALSE
(
manager
.
use_clipping_predictor_step
(
)
)
;
EXPECT_EQ
(
manager
.
recommended_analog_level
(
)
255
)
;
manager
.
Process
(
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
CallPreProcessAudioBuffer
(
10
0
.
99f
manager
)
;
EXPECT_EQ
(
manager
.
recommended_analog_level
(
)
255
)
;
CallPreProcessAudioBuffer
(
300
0
.
99f
manager
)
;
EXPECT_EQ
(
manager
.
recommended_analog_level
(
)
255
)
;
CallPreProcessAudioBuffer
(
10
0
.
99f
manager
)
;
EXPECT_EQ
(
manager
.
recommended_analog_level
(
)
255
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
UsedClippingPredictionsProduceLowerAnalogLevels
)
{
AudioBuffer
audio_buffer
(
kSampleRateHz
kNumChannels
kSampleRateHz
kNumChannels
kSampleRateHz
kNumChannels
)
;
InputVolumeControllerConfig
config_with_prediction
=
GetInputVolumeControllerTestConfig
(
)
;
config_with_prediction
.
enable_clipping_predictor
=
true
;
InputVolumeControllerConfig
config_without_prediction
=
GetInputVolumeControllerTestConfig
(
)
;
config_without_prediction
.
enable_clipping_predictor
=
false
;
InputVolumeController
manager_without_prediction
(
1
config_without_prediction
)
;
InputVolumeController
manager_with_prediction
(
1
config_with_prediction
)
;
manager_with_prediction
.
Initialize
(
)
;
manager_without_prediction
.
Initialize
(
)
;
constexpr
int
kInitialLevel
=
255
;
constexpr
float
kClippingPeakRatio
=
1
.
0f
;
constexpr
float
kCloseToClippingPeakRatio
=
0
.
99f
;
constexpr
float
kZeroPeakRatio
=
0
.
0f
;
manager_with_prediction
.
set_stream_analog_level
(
kInitialLevel
)
;
manager_without_prediction
.
set_stream_analog_level
(
kInitialLevel
)
;
manager_with_prediction
.
Process
(
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
manager_without_prediction
.
Process
(
kHighSpeechProbability
GetValueOrEmpty
(
kSpeechLevel
)
)
;
EXPECT_TRUE
(
manager_with_prediction
.
clipping_predictor_enabled
(
)
)
;
EXPECT_FALSE
(
manager_without_prediction
.
clipping_predictor_enabled
(
)
)
;
EXPECT_TRUE
(
manager_with_prediction
.
use_clipping_predictor_step
(
)
)
;
EXPECT_EQ
(
manager_with_prediction
.
recommended_analog_level
(
)
kInitialLevel
)
;
EXPECT_EQ
(
manager_without_prediction
.
recommended_analog_level
(
)
kInitialLevel
)
;
CallPreProcessAudioBuffer
(
10
kCloseToClippingPeakRatio
manager_with_prediction
)
;
CallPreProcessAudioBuffer
(
10
kCloseToClippingPeakRatio
manager_without_prediction
)
;
EXPECT_EQ
(
manager_with_prediction
.
recommended_analog_level
(
)
kInitialLevel
-
kClippedLevelStep
)
;
EXPECT_EQ
(
manager_without_prediction
.
recommended_analog_level
(
)
kInitialLevel
)
;
CallPreProcessAudioBuffer
(
kClippedWaitFrames
kCloseToClippingPeakRatio
manager_with_prediction
)
;
CallPreProcessAudioBuffer
(
kClippedWaitFrames
kCloseToClippingPeakRatio
manager_without_prediction
)
;
EXPECT_EQ
(
manager_with_prediction
.
recommended_analog_level
(
)
kInitialLevel
-
kClippedLevelStep
)
;
EXPECT_EQ
(
manager_without_prediction
.
recommended_analog_level
(
)
kInitialLevel
)
;
CallPreProcessAudioBuffer
(
10
kCloseToClippingPeakRatio
manager_with_prediction
)
;
CallPreProcessAudioBuffer
(
10
kCloseToClippingPeakRatio
manager_without_prediction
)
;
EXPECT_EQ
(
manager_with_prediction
.
recommended_analog_level
(
)
kInitialLevel
-
2
*
kClippedLevelStep
)
;
EXPECT_EQ
(
manager_without_prediction
.
recommended_analog_level
(
)
kInitialLevel
)
;
CallPreProcessAudioBuffer
(
2
*
kClippedWaitFrames
kZeroPeakRatio
manager_with_prediction
)
;
CallPreProcessAudioBuffer
(
2
*
kClippedWaitFrames
kZeroPeakRatio
manager_without_prediction
)
;
EXPECT_EQ
(
manager_with_prediction
.
recommended_analog_level
(
)
kInitialLevel
-
2
*
kClippedLevelStep
)
;
EXPECT_EQ
(
manager_without_prediction
.
recommended_analog_level
(
)
kInitialLevel
)
;
CallPreProcessAudioBuffer
(
1
kClippingPeakRatio
manager_with_prediction
)
;
CallPreProcessAudioBuffer
(
1
kClippingPeakRatio
manager_without_prediction
)
;
EXPECT_EQ
(
manager_with_prediction
.
recommended_analog_level
(
)
kInitialLevel
-
3
*
kClippedLevelStep
)
;
EXPECT_EQ
(
manager_without_prediction
.
recommended_analog_level
(
)
kInitialLevel
-
kClippedLevelStep
)
;
CallPreProcessAudioBuffer
(
kClippedWaitFrames
kClippingPeakRatio
manager_with_prediction
)
;
CallPreProcessAudioBuffer
(
kClippedWaitFrames
kClippingPeakRatio
manager_without_prediction
)
;
EXPECT_EQ
(
manager_with_prediction
.
recommended_analog_level
(
)
kInitialLevel
-
3
*
kClippedLevelStep
)
;
EXPECT_EQ
(
manager_without_prediction
.
recommended_analog_level
(
)
kInitialLevel
-
kClippedLevelStep
)
;
CallPreProcessAudioBuffer
(
1
kClippingPeakRatio
manager_with_prediction
)
;
CallPreProcessAudioBuffer
(
1
kClippingPeakRatio
manager_without_prediction
)
;
EXPECT_EQ
(
manager_with_prediction
.
recommended_analog_level
(
)
kInitialLevel
-
4
*
kClippedLevelStep
)
;
EXPECT_EQ
(
manager_without_prediction
.
recommended_analog_level
(
)
kInitialLevel
-
2
*
kClippedLevelStep
)
;
}
TEST_P
(
InputVolumeControllerParametrizedTest
EmptyRmsErrorHasNoEffect
)
{
InputVolumeController
manager
(
kNumChannels
GetInputVolumeControllerTestConfig
(
)
)
;
manager
.
Initialize
(
)
;
constexpr
int
kInputVolume
=
kInitialInputVolume
;
manager
.
set_stream_analog_level
(
kInputVolume
)
;
constexpr
int
kNumFrames
=
125
;
constexpr
int
kGainDb
=
-
20
;
SpeechSamplesReader
reader
;
reader
.
Feed
(
kNumFrames
kGainDb
kLowSpeechProbability
absl
:
:
nullopt
manager
)
;
ASSERT_EQ
(
manager
.
recommended_analog_level
(
)
kInputVolume
)
;
}
TEST
(
InputVolumeControllerTest
UpdateInputVolumeWaitFramesIsEffective
)
{
constexpr
int
kInputVolume
=
kInitialInputVolume
;
std
:
:
unique_ptr
<
InputVolumeController
>
controller_wait_0
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
false
0
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
controller_wait_100
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
false
100
)
;
controller_wait_0
-
>
Initialize
(
)
;
controller_wait_100
-
>
Initialize
(
)
;
controller_wait_0
-
>
set_stream_analog_level
(
kInputVolume
)
;
controller_wait_100
-
>
set_stream_analog_level
(
kInputVolume
)
;
SpeechSamplesReader
reader_1
;
SpeechSamplesReader
reader_2
;
reader_1
.
Feed
(
99
0
kHighSpeechProbability
-
42
.
0f
*
controller_wait_0
)
;
reader_2
.
Feed
(
99
0
kHighSpeechProbability
-
42
.
0f
*
controller_wait_100
)
;
ASSERT_GT
(
controller_wait_0
-
>
recommended_analog_level
(
)
kInputVolume
)
;
ASSERT_EQ
(
controller_wait_100
-
>
recommended_analog_level
(
)
kInputVolume
)
;
reader_1
.
Feed
(
1
0
kHighSpeechProbability
-
42
.
0f
*
controller_wait_0
)
;
reader_2
.
Feed
(
1
0
kHighSpeechProbability
-
42
.
0f
*
controller_wait_100
)
;
ASSERT_GT
(
controller_wait_0
-
>
recommended_analog_level
(
)
kInputVolume
)
;
ASSERT_GT
(
controller_wait_100
-
>
recommended_analog_level
(
)
kInputVolume
)
;
}
TEST
(
InputVolumeControllerTest
SpeechRatioThresholdIsEffective
)
{
constexpr
int
kInputVolume
=
kInitialInputVolume
;
std
:
:
unique_ptr
<
InputVolumeController
>
controller_1
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
false
10
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
controller_2
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
false
10
)
;
controller_1
-
>
Initialize
(
)
;
controller_2
-
>
Initialize
(
)
;
controller_1
-
>
set_stream_analog_level
(
kInputVolume
)
;
controller_2
-
>
set_stream_analog_level
(
kInputVolume
)
;
SpeechSamplesReader
reader_1
;
SpeechSamplesReader
reader_2
;
reader_1
.
Feed
(
1
0
0
.
7f
-
42
.
0f
*
controller_1
)
;
reader_2
.
Feed
(
1
0
0
.
4f
-
42
.
0f
*
controller_2
)
;
ASSERT_EQ
(
controller_1
-
>
recommended_analog_level
(
)
kInputVolume
)
;
ASSERT_EQ
(
controller_2
-
>
recommended_analog_level
(
)
kInputVolume
)
;
reader_1
.
Feed
(
2
0
0
.
4f
-
42
.
0f
*
controller_1
)
;
reader_2
.
Feed
(
2
0
0
.
4f
-
42
.
0f
*
controller_2
)
;
ASSERT_EQ
(
controller_1
-
>
recommended_analog_level
(
)
kInputVolume
)
;
ASSERT_EQ
(
controller_2
-
>
recommended_analog_level
(
)
kInputVolume
)
;
reader_1
.
Feed
(
7
0
0
.
7f
-
42
.
0f
*
controller_1
)
;
reader_2
.
Feed
(
7
0
0
.
7f
-
42
.
0f
*
controller_2
)
;
ASSERT_GT
(
controller_1
-
>
recommended_analog_level
(
)
kInputVolume
)
;
ASSERT_EQ
(
controller_2
-
>
recommended_analog_level
(
)
kInputVolume
)
;
}
TEST
(
InputVolumeControllerTest
SpeechProbabilityThresholdIsEffective
)
{
constexpr
int
kInputVolume
=
kInitialInputVolume
;
std
:
:
unique_ptr
<
InputVolumeController
>
controller_1
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
false
10
)
;
std
:
:
unique_ptr
<
InputVolumeController
>
controller_2
=
CreateInputVolumeController
(
kClippedLevelStep
kClippedRatioThreshold
kClippedWaitFrames
false
10
)
;
controller_1
-
>
Initialize
(
)
;
controller_2
-
>
Initialize
(
)
;
controller_1
-
>
set_stream_analog_level
(
kInputVolume
)
;
controller_2
-
>
set_stream_analog_level
(
kInputVolume
)
;
SpeechSamplesReader
reader_1
;
SpeechSamplesReader
reader_2
;
reader_1
.
Feed
(
1
0
0
.
5f
-
42
.
0f
*
controller_1
)
;
reader_2
.
Feed
(
1
0
0
.
49f
-
42
.
0f
*
controller_2
)
;
ASSERT_EQ
(
controller_1
-
>
recommended_analog_level
(
)
kInputVolume
)
;
ASSERT_EQ
(
controller_2
-
>
recommended_analog_level
(
)
kInputVolume
)
;
reader_1
.
Feed
(
2
0
0
.
49f
-
42
.
0f
*
controller_1
)
;
reader_2
.
Feed
(
2
0
0
.
49f
-
42
.
0f
*
controller_2
)
;
ASSERT_EQ
(
controller_1
-
>
recommended_analog_level
(
)
kInputVolume
)
;
ASSERT_EQ
(
controller_2
-
>
recommended_analog_level
(
)
kInputVolume
)
;
reader_1
.
Feed
(
7
0
0
.
5f
-
42
.
0f
*
controller_1
)
;
reader_2
.
Feed
(
7
0
0
.
5f
-
42
.
0f
*
controller_2
)
;
ASSERT_GT
(
controller_1
-
>
recommended_analog_level
(
)
kInputVolume
)
;
ASSERT_EQ
(
controller_2
-
>
recommended_analog_level
(
)
kInputVolume
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckHandleClippingLowersVolume
)
{
constexpr
int
kInitialInputVolume
=
100
;
constexpr
int
kInputVolumeStep
=
29
;
MonoInputVolumeController
mono_controller
(
70
32
3
kHighSpeechProbability
kSpeechRatioThreshold
)
;
mono_controller
.
Initialize
(
)
;
UpdateRecommendedInputVolume
(
mono_controller
kInitialInputVolume
kLowSpeechProbability
-
10
.
0f
)
;
mono_controller
.
HandleClipping
(
kInputVolumeStep
)
;
EXPECT_EQ
(
mono_controller
.
recommended_analog_level
(
)
kInitialInputVolume
-
kInputVolumeStep
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckProcessNegativeRmsErrorDecreasesInputVolume
)
{
constexpr
int
kInitialInputVolume
=
100
;
MonoInputVolumeController
mono_controller
(
64
32
3
kHighSpeechProbability
kSpeechRatioThreshold
)
;
mono_controller
.
Initialize
(
)
;
int
volume
=
UpdateRecommendedInputVolume
(
mono_controller
kInitialInputVolume
kHighSpeechProbability
-
10
.
0f
)
;
volume
=
UpdateRecommendedInputVolume
(
mono_controller
volume
kHighSpeechProbability
-
10
.
0f
)
;
volume
=
UpdateRecommendedInputVolume
(
mono_controller
volume
kHighSpeechProbability
-
10
.
0f
)
;
EXPECT_LT
(
volume
kInitialInputVolume
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckProcessPositiveRmsErrorIncreasesInputVolume
)
{
constexpr
int
kInitialInputVolume
=
100
;
MonoInputVolumeController
mono_controller
(
64
32
3
kHighSpeechProbability
kSpeechRatioThreshold
)
;
mono_controller
.
Initialize
(
)
;
int
volume
=
UpdateRecommendedInputVolume
(
mono_controller
kInitialInputVolume
kHighSpeechProbability
10
.
0f
)
;
volume
=
UpdateRecommendedInputVolume
(
mono_controller
volume
kHighSpeechProbability
10
.
0f
)
;
volume
=
UpdateRecommendedInputVolume
(
mono_controller
volume
kHighSpeechProbability
10
.
0f
)
;
EXPECT_GT
(
volume
kInitialInputVolume
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckProcessNegativeRmsErrorDecreasesInputVolumeWithLimit
)
{
constexpr
int
kInitialInputVolume
=
100
;
MonoInputVolumeController
mono_controller_1
(
64
32
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
MonoInputVolumeController
mono_controller_2
(
64
32
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
MonoInputVolumeController
mono_controller_3
(
64
32
2
0
.
7
0
.
8
)
;
mono_controller_1
.
Initialize
(
)
;
mono_controller_2
.
Initialize
(
)
;
mono_controller_3
.
Initialize
(
)
;
int
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
kInitialInputVolume
kHighSpeechProbability
-
14
.
0f
)
;
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
volume_1
kHighSpeechProbability
-
14
.
0f
)
;
int
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
kInitialInputVolume
kHighSpeechProbability
-
15
.
0f
)
;
int
volume_3
=
UpdateRecommendedInputVolume
(
mono_controller_3
kInitialInputVolume
kHighSpeechProbability
-
30
.
0f
)
;
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
volume_2
kHighSpeechProbability
-
15
.
0f
)
;
volume_3
=
UpdateRecommendedInputVolume
(
mono_controller_3
volume_3
kHighSpeechProbability
-
30
.
0f
)
;
EXPECT_LT
(
volume_1
kInitialInputVolume
)
;
EXPECT_LT
(
volume_2
volume_1
)
;
EXPECT_EQ
(
volume_2
volume_3
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckProcessPositiveRmsErrorIncreasesInputVolumeWithLimit
)
{
constexpr
int
kInitialInputVolume
=
100
;
MonoInputVolumeController
mono_controller_1
(
64
32
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
MonoInputVolumeController
mono_controller_2
(
64
32
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
MonoInputVolumeController
mono_controller_3
(
64
32
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
mono_controller_1
.
Initialize
(
)
;
mono_controller_2
.
Initialize
(
)
;
mono_controller_3
.
Initialize
(
)
;
int
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
kInitialInputVolume
kHighSpeechProbability
14
.
0f
)
;
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
volume_1
kHighSpeechProbability
14
.
0f
)
;
int
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
kInitialInputVolume
kHighSpeechProbability
15
.
0f
)
;
int
volume_3
=
UpdateRecommendedInputVolume
(
mono_controller_3
kInitialInputVolume
kHighSpeechProbability
30
.
0f
)
;
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
volume_2
kHighSpeechProbability
15
.
0f
)
;
volume_3
=
UpdateRecommendedInputVolume
(
mono_controller_3
volume_3
kHighSpeechProbability
30
.
0f
)
;
EXPECT_GT
(
volume_1
kInitialInputVolume
)
;
EXPECT_GT
(
volume_2
volume_1
)
;
EXPECT_EQ
(
volume_2
volume_3
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckProcessRmsErrorDecreasesInputVolumeRepeatedly
)
{
constexpr
int
kInitialInputVolume
=
100
;
MonoInputVolumeController
mono_controller
(
64
32
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
mono_controller
.
Initialize
(
)
;
int
volume_before
=
UpdateRecommendedInputVolume
(
mono_controller
kInitialInputVolume
kHighSpeechProbability
-
10
.
0f
)
;
volume_before
=
UpdateRecommendedInputVolume
(
mono_controller
volume_before
kHighSpeechProbability
-
10
.
0f
)
;
EXPECT_LT
(
volume_before
kInitialInputVolume
)
;
int
volume_after
=
UpdateRecommendedInputVolume
(
mono_controller
volume_before
kHighSpeechProbability
-
10
.
0f
)
;
volume_after
=
UpdateRecommendedInputVolume
(
mono_controller
volume_after
kHighSpeechProbability
-
10
.
0f
)
;
EXPECT_LT
(
volume_after
volume_before
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckProcessPositiveRmsErrorIncreasesInputVolumeRepeatedly
)
{
constexpr
int
kInitialInputVolume
=
100
;
MonoInputVolumeController
mono_controller
(
64
32
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
mono_controller
.
Initialize
(
)
;
int
volume_before
=
UpdateRecommendedInputVolume
(
mono_controller
kInitialInputVolume
kHighSpeechProbability
10
.
0f
)
;
volume_before
=
UpdateRecommendedInputVolume
(
mono_controller
volume_before
kHighSpeechProbability
10
.
0f
)
;
EXPECT_GT
(
volume_before
kInitialInputVolume
)
;
int
volume_after
=
UpdateRecommendedInputVolume
(
mono_controller
volume_before
kHighSpeechProbability
10
.
0f
)
;
volume_after
=
UpdateRecommendedInputVolume
(
mono_controller
volume_after
kHighSpeechProbability
10
.
0f
)
;
EXPECT_GT
(
volume_after
volume_before
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckClippedLevelMinIsEffective
)
{
constexpr
int
kInitialInputVolume
=
100
;
constexpr
int
kClippedLevelMin
=
70
;
MonoInputVolumeController
mono_controller_1
(
kClippedLevelMin
84
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
MonoInputVolumeController
mono_controller_2
(
kClippedLevelMin
84
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
mono_controller_1
.
Initialize
(
)
;
mono_controller_2
.
Initialize
(
)
;
EXPECT_EQ
(
UpdateRecommendedInputVolume
(
mono_controller_1
kInitialInputVolume
kLowSpeechProbability
-
10
.
0f
)
kInitialInputVolume
)
;
EXPECT_EQ
(
UpdateRecommendedInputVolume
(
mono_controller_2
kInitialInputVolume
kLowSpeechProbability
-
10
.
0f
)
kInitialInputVolume
)
;
mono_controller_1
.
HandleClipping
(
29
)
;
mono_controller_2
.
HandleClipping
(
31
)
;
EXPECT_EQ
(
mono_controller_2
.
recommended_analog_level
(
)
kClippedLevelMin
)
;
EXPECT_LT
(
mono_controller_2
.
recommended_analog_level
(
)
mono_controller_1
.
recommended_analog_level
(
)
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckMinMicLevelIsEffective
)
{
constexpr
int
kInitialInputVolume
=
100
;
constexpr
int
kMinMicLevel
=
64
;
MonoInputVolumeController
mono_controller_1
(
64
kMinMicLevel
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
MonoInputVolumeController
mono_controller_2
(
64
kMinMicLevel
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
mono_controller_1
.
Initialize
(
)
;
mono_controller_2
.
Initialize
(
)
;
int
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
kInitialInputVolume
kHighSpeechProbability
-
10
.
0f
)
;
int
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
kInitialInputVolume
kHighSpeechProbability
-
10
.
0f
)
;
EXPECT_EQ
(
volume_1
kInitialInputVolume
)
;
EXPECT_EQ
(
volume_2
kInitialInputVolume
)
;
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
volume_1
kHighSpeechProbability
-
10
.
0f
)
;
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
volume_2
kHighSpeechProbability
-
30
.
0f
)
;
EXPECT_LT
(
volume_1
kInitialInputVolume
)
;
EXPECT_LT
(
volume_2
volume_1
)
;
EXPECT_EQ
(
volume_2
kMinMicLevel
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckUpdateInputVolumeWaitFramesIsEffective
)
{
constexpr
int
kInitialInputVolume
=
100
;
MonoInputVolumeController
mono_controller_1
(
64
84
1
kHighSpeechProbability
kSpeechRatioThreshold
)
;
MonoInputVolumeController
mono_controller_2
(
64
84
3
kHighSpeechProbability
kSpeechRatioThreshold
)
;
mono_controller_1
.
Initialize
(
)
;
mono_controller_2
.
Initialize
(
)
;
int
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
kInitialInputVolume
kHighSpeechProbability
-
10
.
0f
)
;
int
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
kInitialInputVolume
kHighSpeechProbability
-
10
.
0f
)
;
EXPECT_EQ
(
volume_1
kInitialInputVolume
)
;
EXPECT_EQ
(
volume_2
kInitialInputVolume
)
;
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
volume_1
kHighSpeechProbability
-
10
.
0f
)
;
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
volume_2
kHighSpeechProbability
-
10
.
0f
)
;
EXPECT_LT
(
volume_1
kInitialInputVolume
)
;
EXPECT_EQ
(
volume_2
kInitialInputVolume
)
;
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
volume_2
kHighSpeechProbability
-
10
.
0f
)
;
EXPECT_LT
(
volume_2
kInitialInputVolume
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckSpeechProbabilityThresholdIsEffective
)
{
constexpr
int
kInitialInputVolume
=
100
;
constexpr
float
kSpeechProbabilityThreshold
=
0
.
8f
;
MonoInputVolumeController
mono_controller_1
(
64
84
2
kSpeechProbabilityThreshold
kSpeechRatioThreshold
)
;
MonoInputVolumeController
mono_controller_2
(
64
84
2
kSpeechProbabilityThreshold
kSpeechRatioThreshold
)
;
mono_controller_1
.
Initialize
(
)
;
mono_controller_2
.
Initialize
(
)
;
int
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
kInitialInputVolume
kSpeechProbabilityThreshold
-
10
.
0f
)
;
int
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
kInitialInputVolume
kSpeechProbabilityThreshold
-
10
.
0f
)
;
EXPECT_EQ
(
volume_1
kInitialInputVolume
)
;
EXPECT_EQ
(
volume_2
kInitialInputVolume
)
;
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
volume_1
kSpeechProbabilityThreshold
-
0
.
1f
-
10
.
0f
)
;
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
volume_2
kSpeechProbabilityThreshold
-
10
.
0f
)
;
EXPECT_EQ
(
volume_1
kInitialInputVolume
)
;
EXPECT_LT
(
volume_2
volume_1
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckSpeechRatioThresholdIsEffective
)
{
constexpr
int
kInitialInputVolume
=
100
;
MonoInputVolumeController
mono_controller_1
(
64
84
4
kHighSpeechProbability
0
.
75f
)
;
MonoInputVolumeController
mono_controller_2
(
64
84
4
kHighSpeechProbability
0
.
75f
)
;
mono_controller_1
.
Initialize
(
)
;
mono_controller_2
.
Initialize
(
)
;
int
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
kInitialInputVolume
kHighSpeechProbability
-
10
.
0f
)
;
int
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
kInitialInputVolume
kHighSpeechProbability
-
10
.
0f
)
;
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
volume_1
kHighSpeechProbability
-
10
.
0f
)
;
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
volume_2
kHighSpeechProbability
-
10
.
0f
)
;
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
volume_1
kLowSpeechProbability
-
10
.
0f
)
;
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
volume_2
kLowSpeechProbability
-
10
.
0f
)
;
EXPECT_EQ
(
volume_1
kInitialInputVolume
)
;
EXPECT_EQ
(
volume_2
kInitialInputVolume
)
;
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
volume_1
kLowSpeechProbability
-
10
.
0f
)
;
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
volume_2
kHighSpeechProbability
-
10
.
0f
)
;
EXPECT_EQ
(
volume_1
kInitialInputVolume
)
;
EXPECT_LT
(
volume_2
volume_1
)
;
}
TEST
(
MonoInputVolumeControllerTest
CheckProcessEmptyRmsErrorDoesNotLowerVolume
)
{
constexpr
int
kInitialInputVolume
=
100
;
MonoInputVolumeController
mono_controller_1
(
64
84
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
MonoInputVolumeController
mono_controller_2
(
64
84
2
kHighSpeechProbability
kSpeechRatioThreshold
)
;
mono_controller_1
.
Initialize
(
)
;
mono_controller_2
.
Initialize
(
)
;
int
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
kInitialInputVolume
kHighSpeechProbability
-
10
.
0f
)
;
int
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
kInitialInputVolume
kHighSpeechProbability
-
10
.
0f
)
;
EXPECT_EQ
(
volume_1
kInitialInputVolume
)
;
EXPECT_EQ
(
volume_2
kInitialInputVolume
)
;
volume_1
=
UpdateRecommendedInputVolume
(
mono_controller_1
volume_1
kHighSpeechProbability
absl
:
:
nullopt
)
;
volume_2
=
UpdateRecommendedInputVolume
(
mono_controller_2
volume_2
kHighSpeechProbability
-
10
.
0f
)
;
EXPECT_EQ
(
volume_1
kInitialInputVolume
)
;
EXPECT_LT
(
volume_2
volume_1
)
;
}
}
