#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_LIMITER_DB_GAIN_CURVE_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_LIMITER_DB_GAIN_CURVE_H_
#
include
<
array
>
#
include
"
modules
/
audio_processing
/
agc2
/
agc2_testing_common
.
h
"
namespace
webrtc
{
class
LimiterDbGainCurve
{
public
:
LimiterDbGainCurve
(
)
;
double
max_input_level_db
(
)
const
{
return
max_input_level_db_
;
}
double
max_input_level_linear
(
)
const
{
return
max_input_level_linear_
;
}
double
knee_start_linear
(
)
const
{
return
knee_start_linear_
;
}
double
limiter_start_linear
(
)
const
{
return
limiter_start_linear_
;
}
double
GetOutputLevelDbfs
(
double
input_level_dbfs
)
const
;
double
GetGainLinear
(
double
input_level_linear
)
const
;
double
GetGainFirstDerivativeLinear
(
double
x
)
const
;
double
GetGainIntegralLinear
(
double
x0
double
x1
)
const
;
private
:
double
GetKneeRegionOutputLevelDbfs
(
double
input_level_dbfs
)
const
;
double
GetCompressorRegionOutputLevelDbfs
(
double
input_level_dbfs
)
const
;
static
constexpr
double
max_input_level_db_
=
test
:
:
kLimiterMaxInputLevelDbFs
;
static
constexpr
double
knee_smoothness_db_
=
test
:
:
kLimiterKneeSmoothnessDb
;
static
constexpr
double
compression_ratio_
=
test
:
:
kLimiterCompressionRatio
;
const
double
max_input_level_linear_
;
const
double
knee_start_dbfs_
;
const
double
knee_start_linear_
;
const
double
limiter_start_dbfs_
;
const
double
limiter_start_linear_
;
const
std
:
:
array
<
double
3
>
knee_region_polynomial_
;
const
double
gain_curve_limiter_d1_
;
const
double
gain_curve_limiter_d2_
;
const
double
gain_curve_limiter_i1_
;
const
double
gain_curve_limiter_i2_
;
}
;
}
#
endif
