#
include
"
modules
/
audio_processing
/
agc2
/
limiter_db_gain_curve
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
TEST
(
FixedDigitalGainController2Limiter
ConstructDestruct
)
{
LimiterDbGainCurve
l
;
}
TEST
(
FixedDigitalGainController2Limiter
GainCurveShouldBeMonotone
)
{
LimiterDbGainCurve
l
;
float
last_output_level
=
0
.
f
;
bool
has_last_output_level
=
false
;
for
(
float
level
=
-
90
.
f
;
level
<
=
l
.
max_input_level_db
(
)
;
level
+
=
0
.
5f
)
{
const
float
current_output_level
=
l
.
GetOutputLevelDbfs
(
level
)
;
if
(
!
has_last_output_level
)
{
last_output_level
=
current_output_level
;
has_last_output_level
=
true
;
}
EXPECT_LE
(
last_output_level
current_output_level
)
;
last_output_level
=
current_output_level
;
}
}
TEST
(
FixedDigitalGainController2Limiter
GainCurveShouldBeContinuous
)
{
LimiterDbGainCurve
l
;
float
last_output_level
=
0
.
f
;
bool
has_last_output_level
=
false
;
constexpr
float
kMaxDelta
=
0
.
5f
;
for
(
float
level
=
-
90
.
f
;
level
<
=
l
.
max_input_level_db
(
)
;
level
+
=
0
.
5f
)
{
const
float
current_output_level
=
l
.
GetOutputLevelDbfs
(
level
)
;
if
(
!
has_last_output_level
)
{
last_output_level
=
current_output_level
;
has_last_output_level
=
true
;
}
EXPECT_LE
(
current_output_level
last_output_level
+
kMaxDelta
)
;
last_output_level
=
current_output_level
;
}
}
TEST
(
FixedDigitalGainController2Limiter
OutputGainShouldBeLessThanFullScale
)
{
LimiterDbGainCurve
l
;
for
(
float
level
=
-
90
.
f
;
level
<
=
l
.
max_input_level_db
(
)
;
level
+
=
0
.
5f
)
{
const
float
current_output_level
=
l
.
GetOutputLevelDbfs
(
level
)
;
EXPECT_LE
(
current_output_level
0
.
f
)
;
}
}
}
