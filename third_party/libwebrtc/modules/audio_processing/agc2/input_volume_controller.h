#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_INPUT_VOLUME_CONTROLLER_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_INPUT_VOLUME_CONTROLLER_H_
#
include
<
atomic
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
clipping_predictor
.
h
"
#
include
"
modules
/
audio_processing
/
audio_buffer
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
rtc_base
/
gtest_prod_util
.
h
"
namespace
webrtc
{
class
MonoInputVolumeController
;
class
InputVolumeController
final
{
public
:
struct
Config
{
bool
enabled
=
false
;
int
startup_min_volume
=
0
;
int
clipped_level_min
=
70
;
int
clipped_level_step
=
15
;
float
clipped_ratio_threshold
=
0
.
1f
;
int
clipped_wait_frames
=
300
;
bool
enable_clipping_predictor
=
false
;
int
max_digital_gain_db
=
30
;
}
;
InputVolumeController
(
int
num_capture_channels
const
Config
&
config
)
;
~
InputVolumeController
(
)
;
InputVolumeController
(
const
InputVolumeController
&
)
=
delete
;
InputVolumeController
&
operator
=
(
const
InputVolumeController
&
)
=
delete
;
void
Initialize
(
)
;
void
set_stream_analog_level
(
int
level
)
;
void
AnalyzePreProcess
(
const
AudioBuffer
&
audio_buffer
)
;
void
Process
(
absl
:
:
optional
<
float
>
speech_probability
absl
:
:
optional
<
float
>
speech_level_dbfs
)
;
int
recommended_analog_level
(
)
const
{
return
recommended_input_volume_
;
}
void
HandleCaptureOutputUsedChange
(
bool
capture_output_used
)
;
float
voice_probability
(
)
const
;
int
num_channels
(
)
const
{
return
num_capture_channels_
;
}
absl
:
:
optional
<
int
>
GetDigitalComressionGain
(
)
;
bool
clipping_predictor_enabled
(
)
const
{
return
!
!
clipping_predictor_
;
}
bool
use_clipping_predictor_step
(
)
const
{
return
use_clipping_predictor_step_
;
}
private
:
friend
class
InputVolumeControllerTestHelper
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerTest
DisableDigitalDisablesDigital
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerTest
AgcMinMicLevelExperimentDefault
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerTest
AgcMinMicLevelExperimentDisabled
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerTest
AgcMinMicLevelExperimentOutOfRangeAbove
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerTest
AgcMinMicLevelExperimentOutOfRangeBelow
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerTest
AgcMinMicLevelExperimentEnabled50
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerTest
AgcMinMicLevelExperimentEnabledAboveStartupLevel
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerParametrizedTest
ClippingParametersVerified
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerParametrizedTest
DisableClippingPredictorDoesNotLowerVolume
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerParametrizedTest
UsedClippingPredictionsProduceLowerAnalogLevels
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerParametrizedTest
UnusedClippingPredictionsProduceEqualAnalogLevels
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeControllerParametrizedTest
EmptyRmsErrorHasNoEffect
)
;
void
AggregateChannelLevels
(
)
;
const
bool
analog_controller_enabled_
;
const
absl
:
:
optional
<
int
>
min_mic_level_override_
;
static
std
:
:
atomic
<
int
>
instance_counter_
;
const
bool
use_min_channel_level_
;
const
int
num_capture_channels_
;
int
frames_since_clipped_
;
int
recommended_input_volume_
=
0
;
bool
capture_output_used_
;
int
channel_controlling_gain_
=
0
;
const
int
clipped_level_step_
;
const
float
clipped_ratio_threshold_
;
const
int
clipped_wait_frames_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
MonoInputVolumeController
>
>
channel_controllers_
;
const
std
:
:
unique_ptr
<
ClippingPredictor
>
clipping_predictor_
;
const
bool
use_clipping_predictor_step_
;
float
clipping_rate_log_
;
int
clipping_rate_log_counter_
;
}
;
class
MonoInputVolumeController
{
public
:
MonoInputVolumeController
(
int
startup_min_level
int
clipped_level_min
int
min_mic_level
int
max_digital_gain_db
)
;
~
MonoInputVolumeController
(
)
;
MonoInputVolumeController
(
const
MonoInputVolumeController
&
)
=
delete
;
MonoInputVolumeController
&
operator
=
(
const
MonoInputVolumeController
&
)
=
delete
;
void
Initialize
(
)
;
void
HandleCaptureOutputUsedChange
(
bool
capture_output_used
)
;
void
set_stream_analog_level
(
int
level
)
{
recommended_input_volume_
=
level
;
}
void
HandleClipping
(
int
clipped_level_step
)
;
void
Process
(
absl
:
:
optional
<
int
>
rms_error
)
;
int
recommended_analog_level
(
)
const
{
return
recommended_input_volume_
;
}
void
ActivateLogging
(
)
{
log_to_histograms_
=
true
;
}
int
min_mic_level
(
)
const
{
return
min_mic_level_
;
}
int
startup_min_level
(
)
const
{
return
startup_min_level_
;
}
private
:
void
SetLevel
(
int
new_level
)
;
void
SetMaxLevel
(
int
level
)
;
int
CheckVolumeAndReset
(
)
;
void
UpdateGain
(
int
rms_error_db
)
;
const
int
min_mic_level_
;
const
int
max_digital_gain_db_
;
int
level_
=
0
;
int
max_level_
;
bool
capture_output_used_
=
true
;
bool
check_volume_on_next_process_
=
true
;
bool
startup_
=
true
;
int
startup_min_level_
;
int
recommended_input_volume_
=
0
;
bool
log_to_histograms_
=
false
;
const
int
clipped_level_min_
;
int
frames_since_update_gain_
=
0
;
bool
is_first_frame_
=
true
;
}
;
}
#
endif
