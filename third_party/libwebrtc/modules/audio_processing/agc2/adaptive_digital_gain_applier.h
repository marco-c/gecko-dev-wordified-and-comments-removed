#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_ADAPTIVE_DIGITAL_GAIN_APPLIER_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_ADAPTIVE_DIGITAL_GAIN_APPLIER_H_
#
include
"
modules
/
audio_processing
/
agc2
/
gain_applier
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
vad_with_level
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_frame_view
.
h
"
namespace
webrtc
{
class
ApmDataDumper
;
class
AdaptiveDigitalGainApplier
{
public
:
struct
FrameInfo
{
float
input_level_dbfs
;
float
input_noise_level_dbfs
;
VadLevelAnalyzer
:
:
Result
vad_result
;
float
limiter_envelope_dbfs
;
bool
estimate_is_confident
;
}
;
explicit
AdaptiveDigitalGainApplier
(
ApmDataDumper
*
apm_data_dumper
)
;
AdaptiveDigitalGainApplier
(
ApmDataDumper
*
apm_data_dumper
int
adjacent_speech_frames_threshold
)
;
AdaptiveDigitalGainApplier
(
const
AdaptiveDigitalGainApplier
&
)
=
delete
;
AdaptiveDigitalGainApplier
&
operator
=
(
const
AdaptiveDigitalGainApplier
&
)
=
delete
;
void
Process
(
const
FrameInfo
&
info
AudioFrameView
<
float
>
frame
)
;
private
:
ApmDataDumper
*
const
apm_data_dumper_
;
GainApplier
gain_applier_
;
const
int
adjacent_speech_frames_threshold_
;
int
calls_since_last_gain_log_
;
int
frames_to_gain_increase_allowed_
;
float
last_gain_db_
;
}
;
}
#
endif
