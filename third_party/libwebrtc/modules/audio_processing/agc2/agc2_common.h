#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_AGC2_COMMON_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_AGC2_COMMON_H_
#
include
<
stddef
.
h
>
namespace
webrtc
{
constexpr
float
kMinFloatS16Value
=
-
32768
.
0f
;
constexpr
float
kMaxFloatS16Value
=
32767
.
0f
;
constexpr
float
kMaxAbsFloatS16Value
=
32768
.
0f
;
constexpr
int
kFrameDurationMs
=
10
;
constexpr
int
kSubFramesInFrame
=
20
;
constexpr
int
kMaximalNumberOfSamplesPerChannel
=
480
;
constexpr
float
kAttackFilterConstant
=
0
.
0f
;
constexpr
float
kHeadroomDbfs
=
1
.
0f
;
constexpr
float
kMaxGainDb
=
30
.
0f
;
constexpr
float
kInitialAdaptiveDigitalGainDb
=
8
.
0f
;
constexpr
float
kLimiterThresholdForAgcGainDbfs
=
-
kHeadroomDbfs
;
constexpr
float
kVadConfidenceThreshold
=
0
.
9f
;
constexpr
int
kFullBufferSizeMs
=
1200
;
constexpr
float
kFullBufferLeakFactor
=
1
.
0f
-
1
.
0f
/
kFullBufferSizeMs
;
constexpr
float
kInitialSpeechLevelEstimateDbfs
=
-
30
.
0f
;
constexpr
int
kDefaultVadRnnResetPeriodMs
=
1500
;
static_assert
(
kDefaultVadRnnResetPeriodMs
%
kFrameDurationMs
=
=
0
"
"
)
;
constexpr
float
kDefaultSmoothedVadProbabilityAttack
=
1
.
0f
;
constexpr
int
kDefaultLevelEstimatorAdjacentSpeechFramesThreshold
=
1
;
constexpr
float
kDefaultInitialSaturationMarginDb
=
20
.
0f
;
constexpr
float
kDefaultExtraSaturationMarginDb
=
2
.
0f
;
constexpr
int
kPeakEnveloperSuperFrameLengthMs
=
400
;
static_assert
(
kFullBufferSizeMs
%
kPeakEnveloperSuperFrameLengthMs
=
=
0
"
Full
buffer
size
should
be
a
multiple
of
super
frame
length
for
"
"
optimal
Saturation
Protector
performance
.
"
)
;
constexpr
int
kPeakEnveloperBufferSize
=
kFullBufferSizeMs
/
kPeakEnveloperSuperFrameLengthMs
+
1
;
constexpr
float
kSaturationProtectorAttackConstant
=
0
.
9988493699365052f
;
constexpr
float
kSaturationProtectorDecayConstant
=
0
.
9997697679981565f
;
constexpr
float
kDecayFilterConstant
=
0
.
9998848773724686f
;
constexpr
int
kInterpolatedGainCurveKneePoints
=
22
;
constexpr
int
kInterpolatedGainCurveBeyondKneePoints
=
10
;
constexpr
int
kInterpolatedGainCurveTotalPoints
=
kInterpolatedGainCurveKneePoints
+
kInterpolatedGainCurveBeyondKneePoints
;
}
#
endif
