#
include
"
modules
/
audio_processing
/
agc2
/
noise_spectrum_estimator
.
h
"
#
include
<
string
.
h
>
#
include
<
algorithm
>
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
audio_processing
/
logging
/
apm_data_dumper
.
h
"
#
include
"
rtc_base
/
arraysize
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
constexpr
float
kMinNoisePower
=
100
.
f
;
}
NoiseSpectrumEstimator
:
:
NoiseSpectrumEstimator
(
ApmDataDumper
*
data_dumper
)
:
data_dumper_
(
data_dumper
)
{
Initialize
(
)
;
}
void
NoiseSpectrumEstimator
:
:
Initialize
(
)
{
std
:
:
fill
(
noise_spectrum_
noise_spectrum_
+
arraysize
(
noise_spectrum_
)
kMinNoisePower
)
;
}
void
NoiseSpectrumEstimator
:
:
Update
(
rtc
:
:
ArrayView
<
const
float
>
spectrum
bool
first_update
)
{
RTC_DCHECK_EQ
(
65
spectrum
.
size
(
)
)
;
if
(
first_update
)
{
std
:
:
copy
(
spectrum
.
data
(
)
spectrum
.
data
(
)
+
spectrum
.
size
(
)
noise_spectrum_
)
;
}
else
{
for
(
size_t
k
=
0
;
k
<
spectrum
.
size
(
)
;
+
+
k
)
{
if
(
noise_spectrum_
[
k
]
<
spectrum
[
k
]
)
{
noise_spectrum_
[
k
]
=
std
:
:
min
(
1
.
01f
*
noise_spectrum_
[
k
]
noise_spectrum_
[
k
]
+
0
.
05f
*
(
spectrum
[
k
]
-
noise_spectrum_
[
k
]
)
)
;
}
else
{
noise_spectrum_
[
k
]
=
std
:
:
max
(
0
.
99f
*
noise_spectrum_
[
k
]
noise_spectrum_
[
k
]
+
0
.
05f
*
(
spectrum
[
k
]
-
noise_spectrum_
[
k
]
)
)
;
}
}
}
for
(
auto
&
v
:
noise_spectrum_
)
{
v
=
std
:
:
max
(
v
kMinNoisePower
)
;
}
data_dumper_
-
>
DumpRaw
(
"
lc_noise_spectrum
"
65
noise_spectrum_
)
;
data_dumper_
-
>
DumpRaw
(
"
lc_signal_spectrum
"
spectrum
)
;
}
}
