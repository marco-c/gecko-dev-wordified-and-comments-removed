#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_FIXED_DIGITAL_LEVEL_ESTIMATOR_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_FIXED_DIGITAL_LEVEL_ESTIMATOR_H_
#
include
<
array
>
#
include
<
vector
>
#
include
"
modules
/
audio_processing
/
agc2
/
agc2_common
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_frame_view
.
h
"
namespace
webrtc
{
class
ApmDataDumper
;
class
FixedDigitalLevelEstimator
{
public
:
FixedDigitalLevelEstimator
(
size_t
samples_per_channel
ApmDataDumper
*
apm_data_dumper
)
;
FixedDigitalLevelEstimator
(
const
FixedDigitalLevelEstimator
&
)
=
delete
;
FixedDigitalLevelEstimator
&
operator
=
(
const
FixedDigitalLevelEstimator
&
)
=
delete
;
std
:
:
array
<
float
kSubFramesInFrame
>
ComputeLevel
(
DeinterleavedView
<
const
float
>
float_frame
)
;
[
[
deprecated
(
"
Use
DeinterleavedView
variant
"
)
]
]
std
:
:
array
<
float
kSubFramesInFrame
>
ComputeLevel
(
const
AudioFrameView
<
const
float
>
&
float_frame
)
{
return
ComputeLevel
(
float_frame
.
view
(
)
)
;
}
void
SetSamplesPerChannel
(
size_t
samples_per_channel
)
;
void
Reset
(
)
;
float
LastAudioLevel
(
)
const
{
return
filter_state_level_
;
}
private
:
void
CheckParameterCombination
(
)
;
ApmDataDumper
*
const
apm_data_dumper_
=
nullptr
;
float
filter_state_level_
;
int
samples_in_frame_
;
int
samples_in_sub_frame_
;
}
;
}
#
endif
