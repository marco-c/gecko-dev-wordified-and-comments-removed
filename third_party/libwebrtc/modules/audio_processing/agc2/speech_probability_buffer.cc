#
include
"
modules
/
audio_processing
/
agc2
/
speech_probability_buffer
.
h
"
#
include
<
algorithm
>
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
constexpr
float
kActivityThreshold
=
0
.
9f
;
constexpr
int
kNumAnalysisFrames
=
100
;
constexpr
int
kTransientWidthThreshold
=
7
;
}
SpeechProbabilityBuffer
:
:
SpeechProbabilityBuffer
(
float
low_probability_threshold
)
:
low_probability_threshold_
(
low_probability_threshold
)
probabilities_
(
kNumAnalysisFrames
)
{
RTC_DCHECK_GE
(
low_probability_threshold
0
.
0f
)
;
RTC_DCHECK_LE
(
low_probability_threshold
1
.
0f
)
;
RTC_DCHECK
(
!
probabilities_
.
empty
(
)
)
;
}
void
SpeechProbabilityBuffer
:
:
Update
(
float
probability
)
{
if
(
buffer_is_full_
)
{
const
float
oldest_probability
=
probabilities_
[
buffer_index_
]
;
sum_probabilities_
-
=
oldest_probability
;
}
if
(
probability
<
=
low_probability_threshold_
)
{
probability
=
0
.
0f
;
if
(
num_high_probability_observations_
<
=
kTransientWidthThreshold
)
{
RemoveTransient
(
)
;
}
num_high_probability_observations_
=
0
;
}
else
if
(
num_high_probability_observations_
<
=
kTransientWidthThreshold
)
{
+
+
num_high_probability_observations_
;
}
probabilities_
[
buffer_index_
]
=
probability
;
sum_probabilities_
+
=
probability
;
if
(
+
+
buffer_index_
>
=
kNumAnalysisFrames
)
{
buffer_index_
=
0
;
buffer_is_full_
=
true
;
}
}
void
SpeechProbabilityBuffer
:
:
RemoveTransient
(
)
{
RTC_DCHECK_LE
(
num_high_probability_observations_
kTransientWidthThreshold
)
;
int
index
=
(
buffer_index_
>
0
)
?
(
buffer_index_
-
1
)
:
(
kNumAnalysisFrames
-
1
)
;
while
(
num_high_probability_observations_
-
-
>
0
)
{
sum_probabilities_
-
=
probabilities_
[
index
]
;
probabilities_
[
index
]
=
0
.
0f
;
index
=
(
index
>
0
)
?
(
index
-
1
)
:
(
kNumAnalysisFrames
-
1
)
;
}
}
bool
SpeechProbabilityBuffer
:
:
IsActiveSegment
(
)
const
{
if
(
!
buffer_is_full_
)
{
return
false
;
}
if
(
sum_probabilities_
<
kActivityThreshold
*
kNumAnalysisFrames
)
{
return
false
;
}
return
true
;
}
void
SpeechProbabilityBuffer
:
:
Reset
(
)
{
sum_probabilities_
=
0
.
0f
;
buffer_index_
=
0
;
buffer_is_full_
=
false
;
num_high_probability_observations_
=
0
;
}
}
