#
include
"
modules
/
audio_processing
/
agc2
/
adaptive_mode_level_estimator
.
h
"
#
include
<
memory
>
#
include
"
modules
/
audio_processing
/
agc2
/
agc2_common
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
modules
/
audio_processing
/
logging
/
apm_data_dumper
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
namespace
webrtc
{
namespace
{
using
AdaptiveDigitalConfig
=
AudioProcessing
:
:
Config
:
:
GainController2
:
:
AdaptiveDigital
;
constexpr
int
kNumFramesToConfidence
=
kLevelEstimatorTimeToConfidenceMs
/
kFrameDurationMs
;
static_assert
(
kNumFramesToConfidence
>
0
"
"
)
;
constexpr
float
kConvergenceSpeedTestsLevelTolerance
=
0
.
5f
;
void
RunOnConstantLevel
(
int
num_iterations
const
VadLevelAnalyzer
:
:
Result
&
vad_level
AdaptiveModeLevelEstimator
&
level_estimator
)
{
for
(
int
i
=
0
;
i
<
num_iterations
;
+
+
i
)
{
level_estimator
.
Update
(
vad_level
)
;
}
}
constexpr
AdaptiveDigitalConfig
GetAdaptiveDigitalConfig
(
int
adjacent_speech_frames_threshold
)
{
AdaptiveDigitalConfig
config
;
config
.
adjacent_speech_frames_threshold
=
adjacent_speech_frames_threshold
;
return
config
;
}
struct
TestLevelEstimator
{
explicit
TestLevelEstimator
(
int
adjacent_speech_frames_threshold
)
:
data_dumper
(
0
)
estimator
(
std
:
:
make_unique
<
AdaptiveModeLevelEstimator
>
(
&
data_dumper
GetAdaptiveDigitalConfig
(
adjacent_speech_frames_threshold
)
)
)
initial_speech_level_dbfs
(
estimator
-
>
level_dbfs
(
)
)
vad_level_rms
(
initial_speech_level_dbfs
/
2
.
0f
)
vad_level_peak
(
initial_speech_level_dbfs
/
3
.
0f
)
vad_data_speech
(
{
1
.
0f
vad_level_rms
vad_level_peak
}
)
vad_data_non_speech
(
{
kVadConfidenceThreshold
/
2
.
0f
vad_level_rms
vad_level_peak
}
)
{
RTC_DCHECK_LT
(
vad_level_rms
vad_level_peak
)
;
RTC_DCHECK_LT
(
initial_speech_level_dbfs
vad_level_rms
)
;
RTC_DCHECK_GT
(
vad_level_rms
-
initial_speech_level_dbfs
5
.
0f
)
<
<
"
Adjust
vad_level_rms
so
that
the
difference
from
the
initial
"
"
level
is
wide
enough
for
the
tests
"
;
}
ApmDataDumper
data_dumper
;
std
:
:
unique_ptr
<
AdaptiveModeLevelEstimator
>
estimator
;
const
float
initial_speech_level_dbfs
;
const
float
vad_level_rms
;
const
float
vad_level_peak
;
const
VadLevelAnalyzer
:
:
Result
vad_data_speech
;
const
VadLevelAnalyzer
:
:
Result
vad_data_non_speech
;
}
;
TEST
(
GainController2AdaptiveModeLevelEstimator
LevelStabilizes
)
{
TestLevelEstimator
level_estimator
(
1
)
;
RunOnConstantLevel
(
kNumFramesToConfidence
level_estimator
.
vad_data_speech
*
level_estimator
.
estimator
)
;
const
float
estimated_level_dbfs
=
level_estimator
.
estimator
-
>
level_dbfs
(
)
;
RunOnConstantLevel
(
1
level_estimator
.
vad_data_speech
*
level_estimator
.
estimator
)
;
EXPECT_NEAR
(
level_estimator
.
estimator
-
>
level_dbfs
(
)
estimated_level_dbfs
0
.
1f
)
;
}
TEST
(
GainController2AdaptiveModeLevelEstimator
IsNotConfident
)
{
TestLevelEstimator
level_estimator
(
1
)
;
RunOnConstantLevel
(
kNumFramesToConfidence
/
2
level_estimator
.
vad_data_speech
*
level_estimator
.
estimator
)
;
EXPECT_FALSE
(
level_estimator
.
estimator
-
>
IsConfident
(
)
)
;
}
TEST
(
GainController2AdaptiveModeLevelEstimator
IsConfident
)
{
TestLevelEstimator
level_estimator
(
1
)
;
RunOnConstantLevel
(
kNumFramesToConfidence
level_estimator
.
vad_data_speech
*
level_estimator
.
estimator
)
;
EXPECT_TRUE
(
level_estimator
.
estimator
-
>
IsConfident
(
)
)
;
}
TEST
(
GainController2AdaptiveModeLevelEstimator
EstimatorIgnoresNonSpeechFrames
)
{
TestLevelEstimator
level_estimator
(
1
)
;
RunOnConstantLevel
(
kNumFramesToConfidence
level_estimator
.
vad_data_speech
*
level_estimator
.
estimator
)
;
const
float
estimated_level_dbfs
=
level_estimator
.
estimator
-
>
level_dbfs
(
)
;
RunOnConstantLevel
(
kNumFramesToConfidence
VadLevelAnalyzer
:
:
Result
{
0
.
0f
0
.
0f
0
.
0f
}
*
level_estimator
.
estimator
)
;
EXPECT_FLOAT_EQ
(
level_estimator
.
estimator
-
>
level_dbfs
(
)
estimated_level_dbfs
)
;
}
TEST
(
GainController2AdaptiveModeLevelEstimator
ConvergenceSpeedBeforeConfidence
)
{
TestLevelEstimator
level_estimator
(
1
)
;
RunOnConstantLevel
(
kNumFramesToConfidence
level_estimator
.
vad_data_speech
*
level_estimator
.
estimator
)
;
EXPECT_NEAR
(
level_estimator
.
estimator
-
>
level_dbfs
(
)
level_estimator
.
vad_data_speech
.
rms_dbfs
kConvergenceSpeedTestsLevelTolerance
)
;
}
TEST
(
GainController2AdaptiveModeLevelEstimator
ConvergenceSpeedAfterConfidence
)
{
TestLevelEstimator
level_estimator
(
1
)
;
RunOnConstantLevel
(
kNumFramesToConfidence
VadLevelAnalyzer
:
:
Result
{
1
.
0f
level_estimator
.
initial_speech_level_dbfs
level_estimator
.
initial_speech_level_dbfs
+
6
.
0f
}
*
level_estimator
.
estimator
)
;
ASSERT_FLOAT_EQ
(
level_estimator
.
estimator
-
>
level_dbfs
(
)
level_estimator
.
initial_speech_level_dbfs
)
;
ASSERT_TRUE
(
level_estimator
.
estimator
-
>
IsConfident
(
)
)
;
constexpr
float
kConvergenceTimeAfterConfidenceNumFrames
=
600
;
static_assert
(
kConvergenceTimeAfterConfidenceNumFrames
>
kNumFramesToConfidence
"
"
)
;
RunOnConstantLevel
(
kConvergenceTimeAfterConfidenceNumFrames
level_estimator
.
vad_data_speech
*
level_estimator
.
estimator
)
;
EXPECT_NEAR
(
level_estimator
.
estimator
-
>
level_dbfs
(
)
level_estimator
.
vad_data_speech
.
rms_dbfs
kConvergenceSpeedTestsLevelTolerance
)
;
}
class
AdaptiveModeLevelEstimatorParametrization
:
public
:
:
testing
:
:
TestWithParam
<
int
>
{
protected
:
int
adjacent_speech_frames_threshold
(
)
const
{
return
GetParam
(
)
;
}
}
;
TEST_P
(
AdaptiveModeLevelEstimatorParametrization
DoNotAdaptToShortSpeechSegments
)
{
TestLevelEstimator
level_estimator
(
adjacent_speech_frames_threshold
(
)
)
;
const
float
initial_level
=
level_estimator
.
estimator
-
>
level_dbfs
(
)
;
ASSERT_LT
(
initial_level
level_estimator
.
vad_data_speech
.
peak_dbfs
)
;
for
(
int
i
=
0
;
i
<
adjacent_speech_frames_threshold
(
)
-
1
;
+
+
i
)
{
SCOPED_TRACE
(
i
)
;
level_estimator
.
estimator
-
>
Update
(
level_estimator
.
vad_data_speech
)
;
EXPECT_EQ
(
initial_level
level_estimator
.
estimator
-
>
level_dbfs
(
)
)
;
}
level_estimator
.
estimator
-
>
Update
(
level_estimator
.
vad_data_non_speech
)
;
EXPECT_EQ
(
initial_level
level_estimator
.
estimator
-
>
level_dbfs
(
)
)
;
}
TEST_P
(
AdaptiveModeLevelEstimatorParametrization
AdaptToEnoughSpeechSegments
)
{
TestLevelEstimator
level_estimator
(
adjacent_speech_frames_threshold
(
)
)
;
const
float
initial_level
=
level_estimator
.
estimator
-
>
level_dbfs
(
)
;
ASSERT_LT
(
initial_level
level_estimator
.
vad_data_speech
.
peak_dbfs
)
;
for
(
int
i
=
0
;
i
<
adjacent_speech_frames_threshold
(
)
;
+
+
i
)
{
level_estimator
.
estimator
-
>
Update
(
level_estimator
.
vad_data_speech
)
;
}
EXPECT_LT
(
initial_level
level_estimator
.
estimator
-
>
level_dbfs
(
)
)
;
}
INSTANTIATE_TEST_SUITE_P
(
GainController2
AdaptiveModeLevelEstimatorParametrization
:
:
testing
:
:
Values
(
1
9
17
)
)
;
}
}
