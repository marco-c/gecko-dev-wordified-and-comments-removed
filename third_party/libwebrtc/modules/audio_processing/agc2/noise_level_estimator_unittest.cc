#
include
"
modules
/
audio_processing
/
agc2
/
noise_level_estimator
.
h
"
#
include
<
array
>
#
include
<
functional
>
#
include
<
limits
>
#
include
"
api
/
function_view
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
agc2_testing_common
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
vector_float_frame
.
h
"
#
include
"
modules
/
audio_processing
/
logging
/
apm_data_dumper
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
namespace
webrtc
{
namespace
{
constexpr
int
kNumIterations
=
200
;
constexpr
int
kFramesPerSecond
=
100
;
float
RunEstimator
(
rtc
:
:
FunctionView
<
float
(
)
>
sample_generator
int
sample_rate_hz
)
{
ApmDataDumper
data_dumper
(
0
)
;
NoiseLevelEstimator
estimator
(
&
data_dumper
)
;
const
int
samples_per_channel
=
rtc
:
:
CheckedDivExact
(
sample_rate_hz
kFramesPerSecond
)
;
VectorFloatFrame
signal
(
1
samples_per_channel
0
.
0f
)
;
for
(
int
i
=
0
;
i
<
kNumIterations
;
+
+
i
)
{
AudioFrameView
<
float
>
frame_view
=
signal
.
float_frame_view
(
)
;
for
(
int
j
=
0
;
j
<
samples_per_channel
;
+
+
j
)
{
frame_view
.
channel
(
0
)
[
j
]
=
sample_generator
(
)
;
}
estimator
.
Analyze
(
frame_view
)
;
}
return
estimator
.
Analyze
(
signal
.
float_frame_view
(
)
)
;
}
class
NoiseEstimatorParametrization
:
public
:
:
testing
:
:
TestWithParam
<
int
>
{
protected
:
int
sample_rate_hz
(
)
const
{
return
GetParam
(
)
;
}
}
;
TEST_P
(
NoiseEstimatorParametrization
RandomNoise
)
{
test
:
:
WhiteNoiseGenerator
gen
(
test
:
:
kMinS16
test
:
:
kMaxS16
)
;
const
float
noise_level_dbfs
=
RunEstimator
(
gen
sample_rate_hz
(
)
)
;
EXPECT_NEAR
(
noise_level_dbfs
-
5
.
5f
1
.
0f
)
;
}
TEST_P
(
NoiseEstimatorParametrization
SineTone
)
{
test
:
:
SineGenerator
gen
(
test
:
:
kMaxS16
600
.
0f
sample_rate_hz
(
)
)
;
const
float
noise_level_dbfs
=
RunEstimator
(
gen
sample_rate_hz
(
)
)
;
EXPECT_NEAR
(
noise_level_dbfs
-
3
.
0f
1
.
0f
)
;
}
TEST_P
(
NoiseEstimatorParametrization
PulseTone
)
{
test
:
:
PulseGenerator
gen
(
test
:
:
kMaxS16
10
.
0f
20
.
0f
sample_rate_hz
(
)
)
;
const
int
noise_level_dbfs
=
RunEstimator
(
gen
sample_rate_hz
(
)
)
;
EXPECT_NEAR
(
noise_level_dbfs
-
79
.
0f
1
.
0f
)
;
}
INSTANTIATE_TEST_SUITE_P
(
GainController2NoiseEstimator
NoiseEstimatorParametrization
:
:
testing
:
:
Values
(
8000
16000
32000
48000
)
)
;
}
}
