#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_VAD_WITH_LEVEL_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_VAD_WITH_LEVEL_H_
#
include
<
memory
>
#
include
"
modules
/
audio_processing
/
agc2
/
cpu_features
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_frame_view
.
h
"
namespace
webrtc
{
class
VadLevelAnalyzer
{
public
:
struct
Result
{
float
speech_probability
;
float
rms_dbfs
;
float
peak_dbfs
;
}
;
class
VoiceActivityDetector
{
public
:
virtual
~
VoiceActivityDetector
(
)
=
default
;
virtual
void
Reset
(
)
=
0
;
virtual
float
ComputeProbability
(
AudioFrameView
<
const
float
>
frame
)
=
0
;
}
;
VadLevelAnalyzer
(
)
;
VadLevelAnalyzer
(
int
vad_reset_period_ms
float
vad_probability_attack
const
AvailableCpuFeatures
&
cpu_features
)
;
VadLevelAnalyzer
(
int
vad_reset_period_ms
float
vad_probability_attack
std
:
:
unique_ptr
<
VoiceActivityDetector
>
vad
)
;
VadLevelAnalyzer
(
const
VadLevelAnalyzer
&
)
=
delete
;
VadLevelAnalyzer
&
operator
=
(
const
VadLevelAnalyzer
&
)
=
delete
;
~
VadLevelAnalyzer
(
)
;
Result
AnalyzeFrame
(
AudioFrameView
<
const
float
>
frame
)
;
private
:
std
:
:
unique_ptr
<
VoiceActivityDetector
>
vad_
;
const
int
vad_reset_period_frames_
;
const
float
vad_probability_attack_
;
int
time_to_vad_reset_
;
float
vad_probability_
;
}
;
}
#
endif
