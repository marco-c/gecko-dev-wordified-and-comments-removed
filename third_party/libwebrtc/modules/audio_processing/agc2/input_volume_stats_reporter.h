#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_INPUT_VOLUME_STATS_REPORTER_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_INPUT_VOLUME_STATS_REPORTER_H_
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
rtc_base
/
gtest_prod_util
.
h
"
namespace
webrtc
{
class
InputVolumeStatsReporter
{
public
:
InputVolumeStatsReporter
(
)
;
InputVolumeStatsReporter
(
const
InputVolumeStatsReporter
&
)
=
delete
;
InputVolumeStatsReporter
operator
=
(
const
InputVolumeStatsReporter
&
)
=
delete
;
~
InputVolumeStatsReporter
(
)
;
void
UpdateStatistics
(
int
input_volume
)
;
private
:
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeStatsReporterTest
CheckVolumeUpdateStatsForEmptyStats
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeStatsReporterTest
CheckVolumeUpdateStatsAfterNoVolumeChange
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeStatsReporterTest
CheckVolumeUpdateStatsAfterVolumeIncrease
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeStatsReporterTest
CheckVolumeUpdateStatsAfterVolumeDecrease
)
;
FRIEND_TEST_ALL_PREFIXES
(
InputVolumeStatsReporterTest
CheckVolumeUpdateStatsAfterReset
)
;
struct
VolumeUpdateStats
{
int
num_decreases
=
0
;
int
num_increases
=
0
;
int
sum_decreases
=
0
;
int
sum_increases
=
0
;
}
volume_update_stats_
;
VolumeUpdateStats
volume_update_stats
(
)
const
{
return
volume_update_stats_
;
}
void
LogVolumeUpdateStats
(
)
const
;
int
log_volume_update_stats_counter_
=
0
;
absl
:
:
optional
<
int
>
previous_input_volume_
=
absl
:
:
nullopt
;
}
;
}
#
endif
