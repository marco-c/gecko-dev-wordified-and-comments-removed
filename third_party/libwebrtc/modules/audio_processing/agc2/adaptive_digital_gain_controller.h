#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_ADAPTIVE_DIGITAL_GAIN_CONTROLLER_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_ADAPTIVE_DIGITAL_GAIN_CONTROLLER_H_
#
include
<
vector
>
#
include
"
api
/
audio
/
audio_processing
.
h
"
#
include
"
api
/
audio
/
audio_view
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
gain_applier
.
h
"
namespace
webrtc
{
class
ApmDataDumper
;
class
AdaptiveDigitalGainController
{
public
:
struct
FrameInfo
{
float
speech_probability
;
float
speech_level_dbfs
;
bool
speech_level_reliable
;
float
noise_rms_dbfs
;
float
headroom_db
;
float
limiter_envelope_dbfs
;
}
;
AdaptiveDigitalGainController
(
ApmDataDumper
*
apm_data_dumper
const
AudioProcessing
:
:
Config
:
:
GainController2
:
:
AdaptiveDigital
&
config
int
adjacent_speech_frames_threshold
)
;
AdaptiveDigitalGainController
(
const
AdaptiveDigitalGainController
&
)
=
delete
;
AdaptiveDigitalGainController
&
operator
=
(
const
AdaptiveDigitalGainController
&
)
=
delete
;
void
Process
(
const
FrameInfo
&
info
DeinterleavedView
<
float
>
frame
)
;
private
:
ApmDataDumper
*
const
apm_data_dumper_
;
GainApplier
gain_applier_
;
const
AudioProcessing
:
:
Config
:
:
GainController2
:
:
AdaptiveDigital
config_
;
const
int
adjacent_speech_frames_threshold_
;
const
float
max_gain_change_db_per_10ms_
;
int
calls_since_last_gain_log_
;
int
frames_to_gain_increase_allowed_
;
float
last_gain_db_
;
}
;
}
#
endif
