#
include
"
modules
/
audio_processing
/
agc2
/
saturation_protector
.
h
"
#
include
<
algorithm
>
#
include
"
modules
/
audio_processing
/
agc2
/
agc2_common
.
h
"
#
include
"
modules
/
audio_processing
/
logging
/
apm_data_dumper
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
namespace
webrtc
{
namespace
{
constexpr
float
kInitialMarginDb
=
20
.
f
;
using
saturation_protector_impl
:
:
RingBuffer
;
SaturationProtectorState
CreateSaturationProtectorState
(
)
{
SaturationProtectorState
state
;
ResetSaturationProtectorState
(
kInitialMarginDb
state
)
;
return
state
;
}
float
RunOnConstantLevel
(
int
num_iterations
float
speech_peak_dbfs
float
speech_level_dbfs
SaturationProtectorState
&
state
)
{
float
last_margin
=
state
.
margin_db
;
float
max_difference
=
0
.
f
;
for
(
int
i
=
0
;
i
<
num_iterations
;
+
+
i
)
{
UpdateSaturationProtectorState
(
speech_peak_dbfs
speech_level_dbfs
state
)
;
const
float
new_margin
=
state
.
margin_db
;
max_difference
=
std
:
:
max
(
max_difference
std
:
:
abs
(
new_margin
-
last_margin
)
)
;
last_margin
=
new_margin
;
}
return
max_difference
;
}
}
TEST
(
AutomaticGainController2SaturationProtector
RingBufferInit
)
{
RingBuffer
b
;
EXPECT_EQ
(
b
.
Size
(
)
0
)
;
EXPECT_FALSE
(
b
.
Front
(
)
.
has_value
(
)
)
;
}
TEST
(
AutomaticGainController2SaturationProtector
RingBufferPushBack
)
{
RingBuffer
b
;
constexpr
float
kValue
=
123
.
f
;
b
.
PushBack
(
kValue
)
;
EXPECT_EQ
(
b
.
Size
(
)
1
)
;
ASSERT_TRUE
(
b
.
Front
(
)
.
has_value
(
)
)
;
EXPECT_EQ
(
b
.
Front
(
)
.
value
(
)
kValue
)
;
}
TEST
(
AutomaticGainController2SaturationProtector
RingBufferReset
)
{
RingBuffer
b
;
b
.
PushBack
(
123
.
f
)
;
b
.
Reset
(
)
;
EXPECT_EQ
(
b
.
Size
(
)
0
)
;
EXPECT_FALSE
(
b
.
Front
(
)
.
has_value
(
)
)
;
}
TEST
(
AutomaticGainController2SaturationProtector
RingBufferFrontUntilBufferIsFull
)
{
RingBuffer
b
;
constexpr
float
kValue
=
123
.
f
;
b
.
PushBack
(
kValue
)
;
for
(
int
i
=
1
;
i
<
b
.
Capacity
(
)
;
+
+
i
)
{
EXPECT_EQ
(
b
.
Front
(
)
.
value
(
)
kValue
)
;
b
.
PushBack
(
kValue
+
i
)
;
}
}
TEST
(
AutomaticGainController2SaturationProtector
FullRingBufferFrontIsDelayed
)
{
RingBuffer
b
;
for
(
int
i
=
0
;
i
<
b
.
Capacity
(
)
;
+
+
i
)
{
b
.
PushBack
(
i
)
;
}
for
(
int
i
=
b
.
Capacity
(
)
;
i
<
2
*
b
.
Capacity
(
)
+
1
;
+
+
i
)
{
EXPECT_EQ
(
b
.
Front
(
)
.
value
(
)
i
-
b
.
Capacity
(
)
)
;
b
.
PushBack
(
i
)
;
}
}
TEST
(
AutomaticGainController2SaturationProtector
ResetState
)
{
SaturationProtectorState
init_state
;
ResetSaturationProtectorState
(
kInitialMarginDb
init_state
)
;
SaturationProtectorState
state
;
ResetSaturationProtectorState
(
kInitialMarginDb
state
)
;
RunOnConstantLevel
(
10
-
20
.
f
-
10
.
f
state
)
;
ASSERT_NE
(
init_state
state
)
;
ResetSaturationProtectorState
(
kInitialMarginDb
state
)
;
EXPECT_EQ
(
init_state
state
)
;
}
TEST
(
AutomaticGainController2SaturationProtector
ProtectorEstimatesCrestRatio
)
{
constexpr
int
kNumIterations
=
2000
;
constexpr
float
kPeakLevel
=
-
20
.
f
;
constexpr
float
kCrestFactor
=
kInitialMarginDb
+
1
.
f
;
constexpr
float
kSpeechLevel
=
kPeakLevel
-
kCrestFactor
;
const
float
kMaxDifference
=
0
.
5f
*
std
:
:
abs
(
kInitialMarginDb
-
kCrestFactor
)
;
auto
state
=
CreateSaturationProtectorState
(
)
;
RunOnConstantLevel
(
kNumIterations
kPeakLevel
kSpeechLevel
state
)
;
EXPECT_NEAR
(
state
.
margin_db
kCrestFactor
kMaxDifference
)
;
}
TEST
(
AutomaticGainController2SaturationProtector
ChangeSlowly
)
{
constexpr
int
kNumIterations
=
1000
;
constexpr
float
kPeakLevel
=
-
20
.
f
;
constexpr
float
kCrestFactor
=
kInitialMarginDb
-
5
.
f
;
constexpr
float
kOtherCrestFactor
=
kInitialMarginDb
;
constexpr
float
kSpeechLevel
=
kPeakLevel
-
kCrestFactor
;
constexpr
float
kOtherSpeechLevel
=
kPeakLevel
-
kOtherCrestFactor
;
auto
state
=
CreateSaturationProtectorState
(
)
;
float
max_difference
=
RunOnConstantLevel
(
kNumIterations
kPeakLevel
kSpeechLevel
state
)
;
max_difference
=
std
:
:
max
(
RunOnConstantLevel
(
kNumIterations
kPeakLevel
kOtherSpeechLevel
state
)
max_difference
)
;
constexpr
float
kMaxChangeSpeedDbPerSecond
=
0
.
5f
;
EXPECT_LE
(
max_difference
kMaxChangeSpeedDbPerSecond
/
1000
*
kFrameDurationMs
)
;
}
TEST
(
AutomaticGainController2SaturationProtector
AdaptToDelayedChanges
)
{
constexpr
int
kDelayIterations
=
kFullBufferSizeMs
/
kFrameDurationMs
;
constexpr
float
kInitialSpeechLevelDbfs
=
-
30
.
f
;
constexpr
float
kLaterSpeechLevelDbfs
=
-
15
.
f
;
auto
state
=
CreateSaturationProtectorState
(
)
;
float
max_difference
=
RunOnConstantLevel
(
kDelayIterations
kInitialSpeechLevelDbfs
+
kInitialMarginDb
kInitialSpeechLevelDbfs
state
)
;
max_difference
=
std
:
:
max
(
RunOnConstantLevel
(
kDelayIterations
kLaterSpeechLevelDbfs
+
kInitialMarginDb
kInitialSpeechLevelDbfs
state
)
max_difference
)
;
max_difference
=
std
:
:
max
(
RunOnConstantLevel
(
kDelayIterations
kLaterSpeechLevelDbfs
+
kInitialMarginDb
kLaterSpeechLevelDbfs
state
)
max_difference
)
;
const
float
total_difference
=
std
:
:
abs
(
state
.
margin_db
-
kInitialMarginDb
)
;
EXPECT_LE
(
total_difference
0
.
05f
)
;
EXPECT_LE
(
max_difference
0
.
01f
)
;
}
}
