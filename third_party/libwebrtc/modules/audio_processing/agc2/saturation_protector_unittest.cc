#
include
"
modules
/
audio_processing
/
agc2
/
saturation_protector
.
h
"
#
include
<
algorithm
>
#
include
<
cmath
>
#
include
"
modules
/
audio_processing
/
agc2
/
agc2_common
.
h
"
#
include
"
modules
/
audio_processing
/
logging
/
apm_data_dumper
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
float
kInitialHeadroomDb
=
20
.
0f
;
constexpr
int
kNoAdjacentSpeechFramesRequired
=
1
;
constexpr
float
kMaxSpeechProbability
=
1
.
0f
;
float
RunOnConstantLevel
(
int
num_iterations
float
speech_probability
float
peak_dbfs
float
speech_level_dbfs
SaturationProtector
&
saturation_protector
)
{
float
last_headroom
=
saturation_protector
.
HeadroomDb
(
)
;
float
max_difference
=
0
.
0f
;
for
(
int
i
=
0
;
i
<
num_iterations
;
+
+
i
)
{
saturation_protector
.
Analyze
(
speech_probability
peak_dbfs
speech_level_dbfs
)
;
const
float
new_headroom
=
saturation_protector
.
HeadroomDb
(
)
;
max_difference
=
std
:
:
max
(
max_difference
std
:
:
fabs
(
new_headroom
-
last_headroom
)
)
;
last_headroom
=
new_headroom
;
}
return
max_difference
;
}
TEST
(
GainController2SaturationProtector
Reset
)
{
ApmDataDumper
apm_data_dumper
(
0
)
;
auto
saturation_protector
=
CreateSaturationProtector
(
kInitialHeadroomDb
kNoAdjacentSpeechFramesRequired
&
apm_data_dumper
)
;
const
float
initial_headroom_db
=
saturation_protector
-
>
HeadroomDb
(
)
;
RunOnConstantLevel
(
10
kMaxSpeechProbability
0
.
0f
-
10
.
0f
*
saturation_protector
)
;
ASSERT_NE
(
initial_headroom_db
saturation_protector
-
>
HeadroomDb
(
)
)
;
saturation_protector
-
>
Reset
(
)
;
EXPECT_EQ
(
initial_headroom_db
saturation_protector
-
>
HeadroomDb
(
)
)
;
}
TEST
(
GainController2SaturationProtector
EstimatesCrestRatio
)
{
constexpr
int
kNumIterations
=
2000
;
constexpr
float
kPeakLevelDbfs
=
-
20
.
0f
;
constexpr
float
kCrestFactorDb
=
kInitialHeadroomDb
+
1
.
0f
;
constexpr
float
kSpeechLevelDbfs
=
kPeakLevelDbfs
-
kCrestFactorDb
;
const
float
kMaxDifferenceDb
=
0
.
5f
*
std
:
:
fabs
(
kInitialHeadroomDb
-
kCrestFactorDb
)
;
ApmDataDumper
apm_data_dumper
(
0
)
;
auto
saturation_protector
=
CreateSaturationProtector
(
kInitialHeadroomDb
kNoAdjacentSpeechFramesRequired
&
apm_data_dumper
)
;
RunOnConstantLevel
(
kNumIterations
kMaxSpeechProbability
kPeakLevelDbfs
kSpeechLevelDbfs
*
saturation_protector
)
;
EXPECT_NEAR
(
saturation_protector
-
>
HeadroomDb
(
)
kCrestFactorDb
kMaxDifferenceDb
)
;
}
TEST
(
GainController2SaturationProtector
ChangeSlowly
)
{
constexpr
int
kNumIterations
=
1000
;
constexpr
float
kPeakLevelDbfs
=
-
20
.
f
;
constexpr
float
kCrestFactorDb
=
kInitialHeadroomDb
-
5
.
f
;
constexpr
float
kOtherCrestFactorDb
=
kInitialHeadroomDb
;
constexpr
float
kSpeechLevelDbfs
=
kPeakLevelDbfs
-
kCrestFactorDb
;
constexpr
float
kOtherSpeechLevelDbfs
=
kPeakLevelDbfs
-
kOtherCrestFactorDb
;
ApmDataDumper
apm_data_dumper
(
0
)
;
auto
saturation_protector
=
CreateSaturationProtector
(
kInitialHeadroomDb
kNoAdjacentSpeechFramesRequired
&
apm_data_dumper
)
;
float
max_difference_db
=
RunOnConstantLevel
(
kNumIterations
kMaxSpeechProbability
kPeakLevelDbfs
kSpeechLevelDbfs
*
saturation_protector
)
;
max_difference_db
=
std
:
:
max
(
RunOnConstantLevel
(
kNumIterations
kMaxSpeechProbability
kPeakLevelDbfs
kOtherSpeechLevelDbfs
*
saturation_protector
)
max_difference_db
)
;
constexpr
float
kMaxChangeSpeedDbPerSecond
=
0
.
5f
;
EXPECT_LE
(
max_difference_db
kMaxChangeSpeedDbPerSecond
/
1000
*
kFrameDurationMs
)
;
}
class
SaturationProtectorParametrization
:
public
:
:
testing
:
:
TestWithParam
<
int
>
{
protected
:
int
adjacent_speech_frames_threshold
(
)
const
{
return
GetParam
(
)
;
}
}
;
TEST_P
(
SaturationProtectorParametrization
DoNotAdaptToShortSpeechSegments
)
{
ApmDataDumper
apm_data_dumper
(
0
)
;
auto
saturation_protector
=
CreateSaturationProtector
(
kInitialHeadroomDb
adjacent_speech_frames_threshold
(
)
&
apm_data_dumper
)
;
const
float
initial_headroom_db
=
saturation_protector
-
>
HeadroomDb
(
)
;
RunOnConstantLevel
(
adjacent_speech_frames_threshold
(
)
-
1
kMaxSpeechProbability
0
.
0f
-
10
.
0f
*
saturation_protector
)
;
EXPECT_EQ
(
initial_headroom_db
saturation_protector
-
>
HeadroomDb
(
)
)
;
}
TEST_P
(
SaturationProtectorParametrization
AdaptToEnoughSpeechSegments
)
{
ApmDataDumper
apm_data_dumper
(
0
)
;
auto
saturation_protector
=
CreateSaturationProtector
(
kInitialHeadroomDb
adjacent_speech_frames_threshold
(
)
&
apm_data_dumper
)
;
const
float
initial_headroom_db
=
saturation_protector
-
>
HeadroomDb
(
)
;
RunOnConstantLevel
(
adjacent_speech_frames_threshold
(
)
+
1
kMaxSpeechProbability
0
.
0f
-
10
.
0f
*
saturation_protector
)
;
EXPECT_NE
(
initial_headroom_db
saturation_protector
-
>
HeadroomDb
(
)
)
;
}
INSTANTIATE_TEST_SUITE_P
(
GainController2
SaturationProtectorParametrization
:
:
testing
:
:
Values
(
2
9
17
)
)
;
}
}
