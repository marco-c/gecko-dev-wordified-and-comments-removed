#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_LIMITER_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_LIMITER_H_
#
include
<
vector
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
audio
/
audio_frame
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
fixed_digital_level_estimator
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
interpolated_gain_curve
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_frame_view
.
h
"
namespace
webrtc
{
class
ApmDataDumper
;
class
Limiter
{
public
:
Limiter
(
ApmDataDumper
*
apm_data_dumper
size_t
samples_per_channel
absl
:
:
string_view
histogram_name_prefix
)
;
Limiter
(
const
Limiter
&
limiter
)
=
delete
;
Limiter
&
operator
=
(
const
Limiter
&
limiter
)
=
delete
;
~
Limiter
(
)
;
void
Process
(
DeinterleavedView
<
float
>
signal
)
;
InterpolatedGainCurve
:
:
Stats
GetGainCurveStats
(
)
const
;
void
SetSamplesPerChannel
(
size_t
samples_per_channel
)
;
void
Reset
(
)
;
float
LastAudioLevel
(
)
const
;
private
:
const
InterpolatedGainCurve
interp_gain_curve_
;
FixedDigitalLevelEstimator
level_estimator_
;
ApmDataDumper
*
const
apm_data_dumper_
=
nullptr
;
std
:
:
array
<
float
kSubFramesInFrame
+
1
>
scaling_factors_
=
{
}
;
std
:
:
array
<
float
kMaximalNumberOfSamplesPerChannel
>
per_sample_scaling_factors_
=
{
}
;
float
last_scaling_factor_
=
1
.
f
;
}
;
}
#
endif
