#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_VAD_WRAPPER_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_VAD_WRAPPER_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
common_audio
/
resampler
/
include
/
push_resampler
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
cpu_features
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_frame_view
.
h
"
namespace
webrtc
{
class
VoiceActivityDetectorWrapper
{
public
:
class
MonoVad
{
public
:
virtual
~
MonoVad
(
)
=
default
;
virtual
int
SampleRateHz
(
)
const
=
0
;
virtual
void
Reset
(
)
=
0
;
virtual
float
Analyze
(
rtc
:
:
ArrayView
<
const
float
>
frame
)
=
0
;
}
;
VoiceActivityDetectorWrapper
(
const
AvailableCpuFeatures
&
cpu_features
int
sample_rate_hz
)
;
VoiceActivityDetectorWrapper
(
int
vad_reset_period_ms
const
AvailableCpuFeatures
&
cpu_features
int
sample_rate_hz
)
;
VoiceActivityDetectorWrapper
(
int
vad_reset_period_ms
std
:
:
unique_ptr
<
MonoVad
>
vad
int
sample_rate_hz
)
;
VoiceActivityDetectorWrapper
(
const
VoiceActivityDetectorWrapper
&
)
=
delete
;
VoiceActivityDetectorWrapper
&
operator
=
(
const
VoiceActivityDetectorWrapper
&
)
=
delete
;
~
VoiceActivityDetectorWrapper
(
)
;
float
Analyze
(
AudioFrameView
<
const
float
>
frame
)
;
private
:
const
int
vad_reset_period_frames_
;
const
int
frame_size_
;
int
time_to_vad_reset_
;
std
:
:
unique_ptr
<
MonoVad
>
vad_
;
std
:
:
vector
<
float
>
resampled_buffer_
;
PushResampler
<
float
>
resampler_
;
}
;
}
#
endif
