#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_ADAPTIVE_MODE_LEVEL_ESTIMATOR_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_ADAPTIVE_MODE_LEVEL_ESTIMATOR_H_
#
include
<
stddef
.
h
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
agc2_common
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
saturation_protector
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
vad_with_level
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
namespace
webrtc
{
class
ApmDataDumper
;
class
AdaptiveModeLevelEstimator
{
public
:
explicit
AdaptiveModeLevelEstimator
(
ApmDataDumper
*
apm_data_dumper
)
;
AdaptiveModeLevelEstimator
(
const
AdaptiveModeLevelEstimator
&
)
=
delete
;
AdaptiveModeLevelEstimator
&
operator
=
(
const
AdaptiveModeLevelEstimator
&
)
=
delete
;
AdaptiveModeLevelEstimator
(
ApmDataDumper
*
apm_data_dumper
AudioProcessing
:
:
Config
:
:
GainController2
:
:
LevelEstimator
level_estimator
bool
use_saturation_protector
float
extra_saturation_margin_db
)
;
AdaptiveModeLevelEstimator
(
ApmDataDumper
*
apm_data_dumper
AudioProcessing
:
:
Config
:
:
GainController2
:
:
LevelEstimator
level_estimator
bool
use_saturation_protector
float
initial_saturation_margin_db
float
extra_saturation_margin_db
)
;
void
Update
(
const
VadLevelAnalyzer
:
:
Result
&
vad_data
)
;
float
GetLevelDbfs
(
)
const
;
bool
IsConfident
(
)
const
;
void
Reset
(
)
;
private
:
struct
State
{
struct
Ratio
{
float
numerator
;
float
denominator
;
float
GetRatio
(
)
const
;
}
;
int
time_to_full_buffer_ms
;
Ratio
level_dbfs
;
}
;
void
ResetState
(
State
&
state
)
;
void
DebugDumpEstimate
(
)
;
ApmDataDumper
*
const
apm_data_dumper_
;
SaturationProtector
saturation_protector_
;
const
AudioProcessing
:
:
Config
:
:
GainController2
:
:
LevelEstimator
level_estimator_type_
;
const
bool
use_saturation_protector_
;
const
float
extra_saturation_margin_db_
;
State
state_
;
absl
:
:
optional
<
float
>
last_level_dbfs_
;
}
;
}
#
endif
