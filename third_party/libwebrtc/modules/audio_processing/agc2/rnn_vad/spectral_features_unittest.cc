#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
spectral_features
.
h
"
#
include
<
algorithm
>
#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
test_utils
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_compare
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
namespace
{
constexpr
int
kTestFeatureVectorSize
=
kNumBands
+
3
*
kNumLowerBands
+
1
;
void
WriteTestData
(
ArrayView
<
float
>
samples
)
{
for
(
int
i
=
0
;
SafeLt
(
i
samples
.
size
(
)
)
;
+
+
i
)
{
samples
[
i
]
=
i
%
100
;
}
}
ArrayView
<
float
kNumBands
-
kNumLowerBands
>
GetHigherBandsSpectrum
(
std
:
:
array
<
float
kTestFeatureVectorSize
>
*
feature_vector
)
{
return
{
feature_vector
-
>
data
(
)
+
kNumLowerBands
kNumBands
-
kNumLowerBands
}
;
}
ArrayView
<
float
kNumLowerBands
>
GetAverage
(
std
:
:
array
<
float
kTestFeatureVectorSize
>
*
feature_vector
)
{
return
{
feature_vector
-
>
data
(
)
kNumLowerBands
}
;
}
ArrayView
<
float
kNumLowerBands
>
GetFirstDerivative
(
std
:
:
array
<
float
kTestFeatureVectorSize
>
*
feature_vector
)
{
return
{
feature_vector
-
>
data
(
)
+
kNumBands
kNumLowerBands
}
;
}
ArrayView
<
float
kNumLowerBands
>
GetSecondDerivative
(
std
:
:
array
<
float
kTestFeatureVectorSize
>
*
feature_vector
)
{
return
{
feature_vector
-
>
data
(
)
+
kNumBands
+
kNumLowerBands
kNumLowerBands
}
;
}
ArrayView
<
float
kNumLowerBands
>
GetCepstralCrossCorrelation
(
std
:
:
array
<
float
kTestFeatureVectorSize
>
*
feature_vector
)
{
return
{
feature_vector
-
>
data
(
)
+
kNumBands
+
2
*
kNumLowerBands
kNumLowerBands
}
;
}
float
*
GetCepstralVariability
(
std
:
:
array
<
float
kTestFeatureVectorSize
>
*
feature_vector
)
{
return
feature_vector
-
>
data
(
)
+
kNumBands
+
3
*
kNumLowerBands
;
}
constexpr
float
kInitialFeatureVal
=
-
9999
.
f
;
TEST
(
RnnVadTest
SpectralFeaturesWithAndWithoutSilence
)
{
SpectralFeaturesExtractor
sfe
;
std
:
:
array
<
float
kFrameSize20ms24kHz
>
samples
;
ArrayView
<
float
kFrameSize20ms24kHz
>
samples_view
(
samples
)
;
bool
is_silence
;
std
:
:
array
<
float
kTestFeatureVectorSize
>
feature_vector
;
std
:
:
fill
(
feature_vector
.
begin
(
)
feature_vector
.
end
(
)
kInitialFeatureVal
)
;
std
:
:
fill
(
samples
.
begin
(
)
samples
.
end
(
)
0
.
f
)
;
is_silence
=
sfe
.
CheckSilenceComputeFeatures
(
samples_view
samples_view
GetHigherBandsSpectrum
(
&
feature_vector
)
GetAverage
(
&
feature_vector
)
GetFirstDerivative
(
&
feature_vector
)
GetSecondDerivative
(
&
feature_vector
)
GetCepstralCrossCorrelation
(
&
feature_vector
)
GetCepstralVariability
(
&
feature_vector
)
)
;
EXPECT_TRUE
(
is_silence
)
;
EXPECT_TRUE
(
std
:
:
all_of
(
feature_vector
.
begin
(
)
feature_vector
.
end
(
)
[
]
(
float
x
)
{
return
x
=
=
kInitialFeatureVal
;
}
)
)
;
WriteTestData
(
samples
)
;
is_silence
=
sfe
.
CheckSilenceComputeFeatures
(
samples_view
samples_view
GetHigherBandsSpectrum
(
&
feature_vector
)
GetAverage
(
&
feature_vector
)
GetFirstDerivative
(
&
feature_vector
)
GetSecondDerivative
(
&
feature_vector
)
GetCepstralCrossCorrelation
(
&
feature_vector
)
GetCepstralVariability
(
&
feature_vector
)
)
;
EXPECT_FALSE
(
is_silence
)
;
EXPECT_FALSE
(
std
:
:
all_of
(
feature_vector
.
begin
(
)
feature_vector
.
end
(
)
[
]
(
float
x
)
{
return
x
=
=
kInitialFeatureVal
;
}
)
)
;
}
TEST
(
RnnVadTest
CepstralFeaturesConstantAverageZeroDerivative
)
{
SpectralFeaturesExtractor
sfe
;
std
:
:
array
<
float
kFrameSize20ms24kHz
>
samples
;
ArrayView
<
float
kFrameSize20ms24kHz
>
samples_view
(
samples
)
;
WriteTestData
(
samples
)
;
std
:
:
array
<
float
kTestFeatureVectorSize
>
feature_vector
;
for
(
int
i
=
0
;
i
<
kCepstralCoeffsHistorySize
;
+
+
i
)
{
sfe
.
CheckSilenceComputeFeatures
(
samples_view
samples_view
GetHigherBandsSpectrum
(
&
feature_vector
)
GetAverage
(
&
feature_vector
)
GetFirstDerivative
(
&
feature_vector
)
GetSecondDerivative
(
&
feature_vector
)
GetCepstralCrossCorrelation
(
&
feature_vector
)
GetCepstralVariability
(
&
feature_vector
)
)
;
}
std
:
:
array
<
float
kTestFeatureVectorSize
>
feature_vector_last
;
sfe
.
CheckSilenceComputeFeatures
(
samples_view
samples_view
GetHigherBandsSpectrum
(
&
feature_vector_last
)
GetAverage
(
&
feature_vector_last
)
GetFirstDerivative
(
&
feature_vector_last
)
GetSecondDerivative
(
&
feature_vector_last
)
GetCepstralCrossCorrelation
(
&
feature_vector_last
)
GetCepstralVariability
(
&
feature_vector_last
)
)
;
ExpectEqualFloatArray
(
{
feature_vector
.
data
(
)
kNumLowerBands
}
{
feature_vector_last
.
data
(
)
kNumLowerBands
}
)
;
constexpr
std
:
:
array
<
float
kNumLowerBands
>
zeros
{
}
;
ExpectEqualFloatArray
(
{
feature_vector_last
.
data
(
)
+
kNumBands
kNumLowerBands
}
zeros
)
;
ExpectEqualFloatArray
(
{
feature_vector_last
.
data
(
)
+
kNumBands
+
kNumLowerBands
kNumLowerBands
}
zeros
)
;
EXPECT_FLOAT_EQ
(
feature_vector
[
kNumBands
+
3
*
kNumLowerBands
]
feature_vector_last
[
kNumBands
+
3
*
kNumLowerBands
]
)
;
}
}
}
}
