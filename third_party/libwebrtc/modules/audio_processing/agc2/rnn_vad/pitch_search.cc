#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
pitch_search
.
h
"
#
include
<
array
>
#
include
<
cstddef
>
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
PitchEstimator
:
:
PitchEstimator
(
)
:
y_energy_24kHz_
(
kRefineNumLags24kHz
0
.
f
)
pitch_buffer_12kHz_
(
kBufSize12kHz
)
auto_correlation_12kHz_
(
kNumLags12kHz
)
{
}
PitchEstimator
:
:
~
PitchEstimator
(
)
=
default
;
int
PitchEstimator
:
:
Estimate
(
rtc
:
:
ArrayView
<
const
float
kBufSize24kHz
>
pitch_buffer
)
{
rtc
:
:
ArrayView
<
float
kBufSize12kHz
>
pitch_buffer_12kHz_view
(
pitch_buffer_12kHz_
.
data
(
)
kBufSize12kHz
)
;
RTC_DCHECK_EQ
(
pitch_buffer_12kHz_
.
size
(
)
pitch_buffer_12kHz_view
.
size
(
)
)
;
rtc
:
:
ArrayView
<
float
kNumLags12kHz
>
auto_correlation_12kHz_view
(
auto_correlation_12kHz_
.
data
(
)
kNumLags12kHz
)
;
RTC_DCHECK_EQ
(
auto_correlation_12kHz_
.
size
(
)
auto_correlation_12kHz_view
.
size
(
)
)
;
Decimate2x
(
pitch_buffer
pitch_buffer_12kHz_view
)
;
auto_corr_calculator_
.
ComputeOnPitchBuffer
(
pitch_buffer_12kHz_view
auto_correlation_12kHz_view
)
;
CandidatePitchPeriods
pitch_periods
=
ComputePitchPeriod12kHz
(
pitch_buffer_12kHz_view
auto_correlation_12kHz_view
)
;
pitch_periods
.
best
*
=
2
;
pitch_periods
.
second_best
*
=
2
;
rtc
:
:
ArrayView
<
float
kRefineNumLags24kHz
>
y_energy_24kHz_view
(
y_energy_24kHz_
.
data
(
)
kRefineNumLags24kHz
)
;
RTC_DCHECK_EQ
(
y_energy_24kHz_
.
size
(
)
y_energy_24kHz_view
.
size
(
)
)
;
ComputeSlidingFrameSquareEnergies24kHz
(
pitch_buffer
y_energy_24kHz_view
)
;
const
int
pitch_lag_48kHz
=
ComputePitchPeriod48kHz
(
pitch_buffer
y_energy_24kHz_view
pitch_periods
)
;
last_pitch_48kHz_
=
ComputeExtendedPitchPeriod48kHz
(
pitch_buffer
y_energy_24kHz_view
kMaxPitch48kHz
-
pitch_lag_48kHz
last_pitch_48kHz_
)
;
return
last_pitch_48kHz_
.
period
;
}
}
}
