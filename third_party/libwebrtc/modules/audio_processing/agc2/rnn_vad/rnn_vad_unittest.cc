#
include
<
array
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
common_audio
/
resampler
/
push_sinc_resampler
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
cpu_features
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
features_extraction
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
rnn
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
test_utils
.
h
"
#
include
"
modules
/
audio_processing
/
test
/
performance_timer
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
third_party
/
rnnoise
/
src
/
rnn_activations
.
h
"
#
include
"
third_party
/
rnnoise
/
src
/
rnn_vad_weights
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
namespace
{
constexpr
int
kFrameSize10ms48kHz
=
480
;
void
DumpPerfStats
(
int
num_samples
int
sample_rate
double
average_us
double
standard_deviation
)
{
float
audio_track_length_ms
=
1e3f
*
static_cast
<
float
>
(
num_samples
)
/
static_cast
<
float
>
(
sample_rate
)
;
float
average_ms
=
static_cast
<
float
>
(
average_us
)
/
1e3f
;
float
speed
=
audio_track_length_ms
/
average_ms
;
RTC_LOG
(
LS_INFO
)
<
<
"
track
duration
(
ms
)
:
"
<
<
audio_track_length_ms
;
RTC_LOG
(
LS_INFO
)
<
<
"
average
processing
time
(
ms
)
:
"
<
<
average_ms
<
<
"
+
/
-
"
<
<
(
standard_deviation
/
1e3
)
;
RTC_LOG
(
LS_INFO
)
<
<
"
speed
:
"
<
<
speed
<
<
"
x
"
;
}
constexpr
bool
kWriteComputedOutputToFile
=
false
;
TEST
(
RnnVadTest
CheckWriteComputedOutputIsFalse
)
{
ASSERT_FALSE
(
kWriteComputedOutputToFile
)
<
<
"
Cannot
land
if
kWriteComputedOutput
is
true
.
"
;
}
class
RnnVadProbabilityParametrization
:
public
:
:
testing
:
:
TestWithParam
<
AvailableCpuFeatures
>
{
}
;
TEST_P
(
RnnVadProbabilityParametrization
RnnVadProbabilityWithinTolerance
)
{
PushSincResampler
decimator
(
kFrameSize10ms48kHz
kFrameSize10ms24kHz
)
;
const
AvailableCpuFeatures
cpu_features
=
GetParam
(
)
;
FeaturesExtractor
features_extractor
(
cpu_features
)
;
RnnVad
rnn_vad
(
cpu_features
)
;
std
:
:
unique_ptr
<
FileReader
>
samples_reader
=
CreatePcmSamplesReader
(
)
;
std
:
:
unique_ptr
<
FileReader
>
expected_vad_prob_reader
=
CreateVadProbsReader
(
)
;
const
int
num_frames
=
samples_reader
-
>
size
(
)
/
kFrameSize10ms48kHz
;
std
:
:
vector
<
float
>
samples_48k
(
kFrameSize10ms48kHz
)
;
std
:
:
vector
<
float
>
samples_24k
(
kFrameSize10ms24kHz
)
;
std
:
:
vector
<
float
>
feature_vector
(
kFeatureVectorSize
)
;
std
:
:
vector
<
float
>
computed_vad_prob
(
num_frames
)
;
std
:
:
vector
<
float
>
expected_vad_prob
(
num_frames
)
;
ASSERT_TRUE
(
expected_vad_prob_reader
-
>
ReadChunk
(
expected_vad_prob
)
)
;
float
cumulative_error
=
0
.
f
;
for
(
int
i
=
0
;
i
<
num_frames
;
+
+
i
)
{
ASSERT_TRUE
(
samples_reader
-
>
ReadChunk
(
samples_48k
)
)
;
decimator
.
Resample
(
samples_48k
.
data
(
)
samples_48k
.
size
(
)
samples_24k
.
data
(
)
samples_24k
.
size
(
)
)
;
bool
is_silence
=
features_extractor
.
CheckSilenceComputeFeatures
(
{
samples_24k
.
data
(
)
kFrameSize10ms24kHz
}
{
feature_vector
.
data
(
)
kFeatureVectorSize
}
)
;
computed_vad_prob
[
i
]
=
rnn_vad
.
ComputeVadProbability
(
{
feature_vector
.
data
(
)
kFeatureVectorSize
}
is_silence
)
;
EXPECT_NEAR
(
computed_vad_prob
[
i
]
expected_vad_prob
[
i
]
1e
-
3f
)
;
cumulative_error
+
=
std
:
:
abs
(
computed_vad_prob
[
i
]
-
expected_vad_prob
[
i
]
)
;
}
EXPECT_LT
(
cumulative_error
/
num_frames
1e
-
4f
)
;
if
(
kWriteComputedOutputToFile
)
{
FileWriter
vad_prob_writer
(
"
new_vad_prob
.
dat
"
)
;
vad_prob_writer
.
WriteChunk
(
computed_vad_prob
)
;
}
}
TEST_P
(
RnnVadProbabilityParametrization
DISABLED_RnnVadPerformance
)
{
std
:
:
unique_ptr
<
FileReader
>
samples_reader
=
CreatePcmSamplesReader
(
)
;
const
int
num_frames
=
samples_reader
-
>
size
(
)
/
kFrameSize10ms48kHz
;
std
:
:
array
<
float
kFrameSize10ms48kHz
>
samples
;
PushSincResampler
decimator
(
kFrameSize10ms48kHz
kFrameSize10ms24kHz
)
;
std
:
:
vector
<
float
>
prefetched_decimated_samples
;
prefetched_decimated_samples
.
resize
(
num_frames
*
kFrameSize10ms24kHz
)
;
for
(
int
i
=
0
;
i
<
num_frames
;
+
+
i
)
{
ASSERT_TRUE
(
samples_reader
-
>
ReadChunk
(
samples
)
)
;
decimator
.
Resample
(
samples
.
data
(
)
samples
.
size
(
)
&
prefetched_decimated_samples
[
i
*
kFrameSize10ms24kHz
]
kFrameSize10ms24kHz
)
;
}
const
AvailableCpuFeatures
cpu_features
=
GetParam
(
)
;
FeaturesExtractor
features_extractor
(
cpu_features
)
;
std
:
:
array
<
float
kFeatureVectorSize
>
feature_vector
;
RnnVad
rnn_vad
(
cpu_features
)
;
constexpr
int
number_of_tests
=
100
;
:
:
webrtc
:
:
test
:
:
PerformanceTimer
perf_timer
(
number_of_tests
)
;
for
(
int
k
=
0
;
k
<
number_of_tests
;
+
+
k
)
{
features_extractor
.
Reset
(
)
;
rnn_vad
.
Reset
(
)
;
perf_timer
.
StartTimer
(
)
;
for
(
int
i
=
0
;
i
<
num_frames
;
+
+
i
)
{
bool
is_silence
=
features_extractor
.
CheckSilenceComputeFeatures
(
{
&
prefetched_decimated_samples
[
i
*
kFrameSize10ms24kHz
]
kFrameSize10ms24kHz
}
feature_vector
)
;
rnn_vad
.
ComputeVadProbability
(
feature_vector
is_silence
)
;
}
perf_timer
.
StopTimer
(
)
;
}
DumpPerfStats
(
num_frames
*
kFrameSize10ms24kHz
kSampleRate24kHz
perf_timer
.
GetDurationAverage
(
)
perf_timer
.
GetDurationStandardDeviation
(
)
)
;
}
std
:
:
vector
<
AvailableCpuFeatures
>
GetCpuFeaturesToTest
(
)
{
std
:
:
vector
<
AvailableCpuFeatures
>
v
;
v
.
push_back
(
NoAvailableCpuFeatures
(
)
)
;
AvailableCpuFeatures
available
=
GetAvailableCpuFeatures
(
)
;
if
(
available
.
avx2
&
&
available
.
sse2
)
{
v
.
push_back
(
{
true
true
false
}
)
;
}
if
(
available
.
sse2
)
{
v
.
push_back
(
{
true
false
false
}
)
;
}
if
(
available
.
neon
)
{
v
.
push_back
(
{
false
false
true
}
)
;
}
return
v
;
}
INSTANTIATE_TEST_SUITE_P
(
RnnVadTest
RnnVadProbabilityParametrization
:
:
testing
:
:
ValuesIn
(
GetCpuFeaturesToTest
(
)
)
[
]
(
const
:
:
testing
:
:
TestParamInfo
<
AvailableCpuFeatures
>
&
info
)
{
return
info
.
param
.
ToString
(
)
;
}
)
;
}
}
}
