#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
features_extraction
.
h
"
#
include
<
array
>
#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
lp_residual
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
namespace
{
const
BiQuadFilter
:
:
BiQuadCoefficients
kHpfConfig24k
=
{
{
0
.
99446179f
-
1
.
98892358f
0
.
99446179f
}
{
-
1
.
98889291f
0
.
98895425f
}
}
;
}
FeaturesExtractor
:
:
FeaturesExtractor
(
)
:
use_high_pass_filter_
(
false
)
pitch_buf_24kHz_
(
)
pitch_buf_24kHz_view_
(
pitch_buf_24kHz_
.
GetBufferView
(
)
)
lp_residual_
(
kBufSize24kHz
)
lp_residual_view_
(
lp_residual_
.
data
(
)
kBufSize24kHz
)
pitch_estimator_
(
)
reference_frame_view_
(
pitch_buf_24kHz_
.
GetMostRecentValuesView
(
)
)
{
RTC_DCHECK_EQ
(
kBufSize24kHz
lp_residual_
.
size
(
)
)
;
hpf_
.
Initialize
(
kHpfConfig24k
)
;
Reset
(
)
;
}
FeaturesExtractor
:
:
~
FeaturesExtractor
(
)
=
default
;
void
FeaturesExtractor
:
:
Reset
(
)
{
pitch_buf_24kHz_
.
Reset
(
)
;
spectral_features_extractor_
.
Reset
(
)
;
if
(
use_high_pass_filter_
)
hpf_
.
Reset
(
)
;
}
bool
FeaturesExtractor
:
:
CheckSilenceComputeFeatures
(
rtc
:
:
ArrayView
<
const
float
kFrameSize10ms24kHz
>
samples
rtc
:
:
ArrayView
<
float
kFeatureVectorSize
>
feature_vector
)
{
if
(
use_high_pass_filter_
)
{
std
:
:
array
<
float
kFrameSize10ms24kHz
>
samples_filtered
;
hpf_
.
Process
(
samples
samples_filtered
)
;
pitch_buf_24kHz_
.
Push
(
samples_filtered
)
;
}
else
{
pitch_buf_24kHz_
.
Push
(
samples
)
;
}
float
lpc_coeffs
[
kNumLpcCoefficients
]
;
ComputeAndPostProcessLpcCoefficients
(
pitch_buf_24kHz_view_
lpc_coeffs
)
;
ComputeLpResidual
(
lpc_coeffs
pitch_buf_24kHz_view_
lp_residual_view_
)
;
pitch_info_48kHz_
=
pitch_estimator_
.
Estimate
(
lp_residual_view_
)
;
feature_vector
[
kFeatureVectorSize
-
2
]
=
0
.
01f
*
(
pitch_info_48kHz_
.
period
-
300
)
;
RTC_DCHECK_LE
(
pitch_info_48kHz_
.
period
/
2
kMaxPitch24kHz
)
;
auto
lagged_frame
=
pitch_buf_24kHz_view_
.
subview
(
kMaxPitch24kHz
-
pitch_info_48kHz_
.
period
/
2
kFrameSize20ms24kHz
)
;
return
spectral_features_extractor_
.
CheckSilenceComputeFeatures
(
reference_frame_view_
{
lagged_frame
.
data
(
)
kFrameSize20ms24kHz
}
{
feature_vector
.
data
(
)
+
kNumLowerBands
kNumBands
-
kNumLowerBands
}
{
feature_vector
.
data
(
)
kNumLowerBands
}
{
feature_vector
.
data
(
)
+
kNumBands
kNumLowerBands
}
{
feature_vector
.
data
(
)
+
kNumBands
+
kNumLowerBands
kNumLowerBands
}
{
feature_vector
.
data
(
)
+
kNumBands
+
2
*
kNumLowerBands
kNumLowerBands
}
&
feature_vector
[
kFeatureVectorSize
-
1
]
)
;
}
}
}
