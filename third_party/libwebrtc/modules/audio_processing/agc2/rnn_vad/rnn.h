#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RNN_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RNN_H_
#
include
<
stddef
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
array
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
function_view
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
common
.
h
"
#
include
"
rtc_base
/
system
/
arch
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
constexpr
size_t
kFullyConnectedLayersMaxUnits
=
24
;
constexpr
size_t
kRecurrentLayersMaxUnits
=
24
;
class
FullyConnectedLayer
{
public
:
FullyConnectedLayer
(
size_t
input_size
size_t
output_size
rtc
:
:
ArrayView
<
const
int8_t
>
bias
rtc
:
:
ArrayView
<
const
int8_t
>
weights
rtc
:
:
FunctionView
<
float
(
float
)
>
activation_function
Optimization
optimization
)
;
FullyConnectedLayer
(
const
FullyConnectedLayer
&
)
=
delete
;
FullyConnectedLayer
&
operator
=
(
const
FullyConnectedLayer
&
)
=
delete
;
~
FullyConnectedLayer
(
)
;
size_t
input_size
(
)
const
{
return
input_size_
;
}
size_t
output_size
(
)
const
{
return
output_size_
;
}
Optimization
optimization
(
)
const
{
return
optimization_
;
}
rtc
:
:
ArrayView
<
const
float
>
GetOutput
(
)
const
;
void
ComputeOutput
(
rtc
:
:
ArrayView
<
const
float
>
input
)
;
private
:
const
size_t
input_size_
;
const
size_t
output_size_
;
const
std
:
:
vector
<
float
>
bias_
;
const
std
:
:
vector
<
float
>
weights_
;
rtc
:
:
FunctionView
<
float
(
float
)
>
activation_function_
;
std
:
:
array
<
float
kFullyConnectedLayersMaxUnits
>
output_
;
const
Optimization
optimization_
;
}
;
class
GatedRecurrentLayer
{
public
:
GatedRecurrentLayer
(
size_t
input_size
size_t
output_size
rtc
:
:
ArrayView
<
const
int8_t
>
bias
rtc
:
:
ArrayView
<
const
int8_t
>
weights
rtc
:
:
ArrayView
<
const
int8_t
>
recurrent_weights
Optimization
optimization
)
;
GatedRecurrentLayer
(
const
GatedRecurrentLayer
&
)
=
delete
;
GatedRecurrentLayer
&
operator
=
(
const
GatedRecurrentLayer
&
)
=
delete
;
~
GatedRecurrentLayer
(
)
;
size_t
input_size
(
)
const
{
return
input_size_
;
}
size_t
output_size
(
)
const
{
return
output_size_
;
}
Optimization
optimization
(
)
const
{
return
optimization_
;
}
rtc
:
:
ArrayView
<
const
float
>
GetOutput
(
)
const
;
void
Reset
(
)
;
void
ComputeOutput
(
rtc
:
:
ArrayView
<
const
float
>
input
)
;
private
:
const
size_t
input_size_
;
const
size_t
output_size_
;
const
std
:
:
vector
<
float
>
bias_
;
const
std
:
:
vector
<
float
>
weights_
;
const
std
:
:
vector
<
float
>
recurrent_weights_
;
std
:
:
array
<
float
kRecurrentLayersMaxUnits
>
state_
;
const
Optimization
optimization_
;
}
;
class
RnnBasedVad
{
public
:
RnnBasedVad
(
)
;
RnnBasedVad
(
const
RnnBasedVad
&
)
=
delete
;
RnnBasedVad
&
operator
=
(
const
RnnBasedVad
&
)
=
delete
;
~
RnnBasedVad
(
)
;
void
Reset
(
)
;
float
ComputeVadProbability
(
rtc
:
:
ArrayView
<
const
float
kFeatureVectorSize
>
feature_vector
bool
is_silence
)
;
private
:
FullyConnectedLayer
input_layer_
;
GatedRecurrentLayer
hidden_layer_
;
FullyConnectedLayer
output_layer_
;
}
;
}
}
#
endif
