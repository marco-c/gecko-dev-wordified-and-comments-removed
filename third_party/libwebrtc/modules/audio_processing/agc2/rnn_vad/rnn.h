#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RNN_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RNN_H_
#
include
<
stddef
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
<
array
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
function_view
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
cpu_features
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
common
.
h
"
#
include
"
rtc_base
/
system
/
arch
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
constexpr
int
kFullyConnectedLayerMaxUnits
=
24
;
constexpr
int
kGruLayerMaxUnits
=
24
;
class
FullyConnectedLayer
{
public
:
FullyConnectedLayer
(
int
input_size
int
output_size
rtc
:
:
ArrayView
<
const
int8_t
>
bias
rtc
:
:
ArrayView
<
const
int8_t
>
weights
rtc
:
:
FunctionView
<
float
(
float
)
>
activation_function
const
AvailableCpuFeatures
&
cpu_features
)
;
FullyConnectedLayer
(
const
FullyConnectedLayer
&
)
=
delete
;
FullyConnectedLayer
&
operator
=
(
const
FullyConnectedLayer
&
)
=
delete
;
~
FullyConnectedLayer
(
)
;
int
input_size
(
)
const
{
return
input_size_
;
}
const
float
*
data
(
)
const
{
return
output_
.
data
(
)
;
}
int
size
(
)
const
{
return
output_size_
;
}
void
ComputeOutput
(
rtc
:
:
ArrayView
<
const
float
>
input
)
;
private
:
const
int
input_size_
;
const
int
output_size_
;
const
std
:
:
vector
<
float
>
bias_
;
const
std
:
:
vector
<
float
>
weights_
;
rtc
:
:
FunctionView
<
float
(
float
)
>
activation_function_
;
std
:
:
array
<
float
kFullyConnectedLayerMaxUnits
>
output_
;
const
AvailableCpuFeatures
cpu_features_
;
}
;
class
GatedRecurrentLayer
{
public
:
GatedRecurrentLayer
(
int
input_size
int
output_size
rtc
:
:
ArrayView
<
const
int8_t
>
bias
rtc
:
:
ArrayView
<
const
int8_t
>
weights
rtc
:
:
ArrayView
<
const
int8_t
>
recurrent_weights
)
;
GatedRecurrentLayer
(
const
GatedRecurrentLayer
&
)
=
delete
;
GatedRecurrentLayer
&
operator
=
(
const
GatedRecurrentLayer
&
)
=
delete
;
~
GatedRecurrentLayer
(
)
;
int
input_size
(
)
const
{
return
input_size_
;
}
const
float
*
data
(
)
const
{
return
state_
.
data
(
)
;
}
int
size
(
)
const
{
return
output_size_
;
}
void
Reset
(
)
;
void
ComputeOutput
(
rtc
:
:
ArrayView
<
const
float
>
input
)
;
private
:
const
int
input_size_
;
const
int
output_size_
;
const
std
:
:
vector
<
float
>
bias_
;
const
std
:
:
vector
<
float
>
weights_
;
const
std
:
:
vector
<
float
>
recurrent_weights_
;
std
:
:
array
<
float
kGruLayerMaxUnits
>
state_
;
}
;
class
RnnVad
{
public
:
explicit
RnnVad
(
const
AvailableCpuFeatures
&
cpu_features
)
;
RnnVad
(
const
RnnVad
&
)
=
delete
;
RnnVad
&
operator
=
(
const
RnnVad
&
)
=
delete
;
~
RnnVad
(
)
;
void
Reset
(
)
;
float
ComputeVadProbability
(
rtc
:
:
ArrayView
<
const
float
kFeatureVectorSize
>
feature_vector
bool
is_silence
)
;
private
:
FullyConnectedLayer
input_
;
GatedRecurrentLayer
hidden_
;
FullyConnectedLayer
output_
;
}
;
}
}
#
endif
