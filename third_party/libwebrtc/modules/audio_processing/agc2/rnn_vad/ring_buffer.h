#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RING_BUFFER_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RING_BUFFER_H_
#
include
<
array
>
#
include
<
cstring
>
#
include
<
type_traits
>
#
include
"
api
/
array_view
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
template
<
typename
T
size_t
S
size_t
N
>
class
RingBuffer
{
static_assert
(
S
>
0
"
"
)
;
static_assert
(
N
>
0
"
"
)
;
static_assert
(
std
:
:
is_arithmetic
<
T
>
:
:
value
"
Integral
or
floating
point
required
.
"
)
;
public
:
RingBuffer
(
)
:
tail_
(
0
)
{
}
RingBuffer
(
const
RingBuffer
&
)
=
delete
;
RingBuffer
&
operator
=
(
const
RingBuffer
&
)
=
delete
;
~
RingBuffer
(
)
=
default
;
void
Reset
(
)
{
buffer_
.
fill
(
0
)
;
}
void
Push
(
rtc
:
:
ArrayView
<
const
T
S
>
new_values
)
{
std
:
:
memcpy
(
buffer_
.
data
(
)
+
S
*
tail_
new_values
.
data
(
)
S
*
sizeof
(
T
)
)
;
tail_
+
=
1
;
if
(
tail_
=
=
N
)
tail_
=
0
;
}
rtc
:
:
ArrayView
<
const
T
S
>
GetArrayView
(
size_t
delay
)
const
{
const
int
delay_int
=
static_cast
<
int
>
(
delay
)
;
RTC_DCHECK_LE
(
0
delay_int
)
;
RTC_DCHECK_LT
(
delay_int
N
)
;
int
offset
=
tail_
-
1
-
delay_int
;
if
(
offset
<
0
)
offset
+
=
N
;
return
{
buffer_
.
data
(
)
+
S
*
offset
S
}
;
}
private
:
int
tail_
;
std
:
:
array
<
T
S
*
N
>
buffer_
{
}
;
}
;
}
}
#
endif
