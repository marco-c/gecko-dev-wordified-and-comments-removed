#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
sequence_buffer
.
h
"
#
include
<
algorithm
>
#
include
<
array
>
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
namespace
{
template
<
typename
T
int
S
int
N
>
void
TestSequenceBufferPushOp
(
)
{
SCOPED_TRACE
(
S
)
;
SCOPED_TRACE
(
N
)
;
SequenceBuffer
<
T
S
N
>
seq_buf
;
auto
seq_buf_view
=
seq_buf
.
GetBufferView
(
)
;
std
:
:
array
<
T
N
>
chunk
;
chunk
.
fill
(
1
)
;
seq_buf
.
Push
(
chunk
)
;
chunk
.
fill
(
0
)
;
constexpr
int
required_push_ops
=
(
S
%
N
)
?
S
/
N
+
1
:
S
/
N
;
for
(
int
i
=
0
;
i
<
required_push_ops
-
1
;
+
+
i
)
{
SCOPED_TRACE
(
i
)
;
seq_buf
.
Push
(
chunk
)
;
const
auto
*
m
=
std
:
:
max_element
(
seq_buf_view
.
begin
(
)
seq_buf_view
.
end
(
)
)
;
EXPECT_EQ
(
1
*
m
)
;
}
seq_buf
.
Push
(
chunk
)
;
const
auto
*
m
=
std
:
:
max_element
(
seq_buf_view
.
begin
(
)
seq_buf_view
.
end
(
)
)
;
EXPECT_EQ
(
0
*
m
)
;
if
(
S
>
N
)
{
for
(
int
i
=
0
;
i
<
N
;
+
+
i
)
chunk
[
i
]
=
static_cast
<
T
>
(
i
+
1
)
;
seq_buf
.
Push
(
chunk
)
;
const
T
last
=
chunk
[
N
-
1
]
;
for
(
int
i
=
0
;
i
<
N
;
+
+
i
)
chunk
[
i
]
=
static_cast
<
T
>
(
last
+
i
+
1
)
;
seq_buf
.
Push
(
chunk
)
;
EXPECT_EQ
(
last
seq_buf_view
[
S
-
N
-
1
]
)
;
}
}
TEST
(
RnnVadTest
SequenceBufferGetters
)
{
constexpr
int
buffer_size
=
8
;
constexpr
int
chunk_size
=
8
;
SequenceBuffer
<
int
buffer_size
chunk_size
>
seq_buf
;
EXPECT_EQ
(
buffer_size
seq_buf
.
size
(
)
)
;
EXPECT_EQ
(
chunk_size
seq_buf
.
chunks_size
(
)
)
;
auto
seq_buf_view
=
seq_buf
.
GetBufferView
(
)
;
EXPECT_EQ
(
0
seq_buf_view
[
0
]
)
;
EXPECT_EQ
(
0
seq_buf_view
[
seq_buf_view
.
size
(
)
-
1
]
)
;
constexpr
std
:
:
array
<
int
chunk_size
>
chunk
=
{
10
20
30
40
50
60
70
80
}
;
seq_buf
.
Push
(
chunk
)
;
EXPECT_EQ
(
10
*
seq_buf_view
.
begin
(
)
)
;
EXPECT_EQ
(
80
*
(
seq_buf_view
.
end
(
)
-
1
)
)
;
}
TEST
(
RnnVadTest
SequenceBufferPushOpsUnsigned
)
{
TestSequenceBufferPushOp
<
uint8_t
32
8
>
(
)
;
TestSequenceBufferPushOp
<
uint8_t
32
16
>
(
)
;
TestSequenceBufferPushOp
<
uint8_t
32
32
>
(
)
;
TestSequenceBufferPushOp
<
uint8_t
23
7
>
(
)
;
}
TEST
(
RnnVadTest
SequenceBufferPushOpsSigned
)
{
TestSequenceBufferPushOp
<
int
32
8
>
(
)
;
TestSequenceBufferPushOp
<
int
32
16
>
(
)
;
TestSequenceBufferPushOp
<
int
32
32
>
(
)
;
TestSequenceBufferPushOp
<
int
23
7
>
(
)
;
}
TEST
(
RnnVadTest
SequenceBufferPushOpsFloating
)
{
TestSequenceBufferPushOp
<
float
32
8
>
(
)
;
TestSequenceBufferPushOp
<
float
32
16
>
(
)
;
TestSequenceBufferPushOp
<
float
32
32
>
(
)
;
TestSequenceBufferPushOp
<
float
23
7
>
(
)
;
}
}
}
}
