#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
auto_correlation
.
h
"
#
include
<
algorithm
>
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
namespace
{
constexpr
int
kAutoCorrelationFftOrder
=
9
;
static_assert
(
1
<
<
kAutoCorrelationFftOrder
>
kNumInvertedLags12kHz
+
kBufSize12kHz
-
kMaxPitch12kHz
"
"
)
;
}
AutoCorrelationCalculator
:
:
AutoCorrelationCalculator
(
)
:
fft_
(
1
<
<
kAutoCorrelationFftOrder
Pffft
:
:
FftType
:
:
kReal
)
tmp_
(
fft_
.
CreateBuffer
(
)
)
X_
(
fft_
.
CreateBuffer
(
)
)
H_
(
fft_
.
CreateBuffer
(
)
)
{
}
AutoCorrelationCalculator
:
:
~
AutoCorrelationCalculator
(
)
=
default
;
void
AutoCorrelationCalculator
:
:
ComputeOnPitchBuffer
(
rtc
:
:
ArrayView
<
const
float
kBufSize12kHz
>
pitch_buf
rtc
:
:
ArrayView
<
float
kNumInvertedLags12kHz
>
auto_corr
)
{
RTC_DCHECK_LT
(
auto_corr
.
size
(
)
kMaxPitch12kHz
)
;
RTC_DCHECK_GT
(
pitch_buf
.
size
(
)
kMaxPitch12kHz
)
;
constexpr
size_t
kFftFrameSize
=
1
<
<
kAutoCorrelationFftOrder
;
constexpr
size_t
kConvolutionLength
=
kBufSize12kHz
-
kMaxPitch12kHz
;
static_assert
(
kConvolutionLength
=
=
kFrameSize20ms12kHz
"
Mismatch
between
pitch
buffer
size
frame
size
and
maximum
"
"
pitch
period
.
"
)
;
static_assert
(
kFftFrameSize
>
kNumInvertedLags12kHz
+
kConvolutionLength
"
The
FFT
length
is
not
sufficiently
big
to
avoid
cyclic
"
"
convolution
errors
.
"
)
;
auto
tmp
=
tmp_
-
>
GetView
(
)
;
std
:
:
reverse_copy
(
pitch_buf
.
end
(
)
-
kConvolutionLength
pitch_buf
.
end
(
)
tmp
.
begin
(
)
)
;
std
:
:
fill
(
tmp
.
begin
(
)
+
kConvolutionLength
tmp
.
end
(
)
0
.
f
)
;
fft_
.
ForwardTransform
(
*
tmp_
H_
.
get
(
)
false
)
;
std
:
:
copy
(
pitch_buf
.
begin
(
)
pitch_buf
.
begin
(
)
+
kConvolutionLength
+
kNumInvertedLags12kHz
tmp
.
begin
(
)
)
;
std
:
:
fill
(
tmp
.
begin
(
)
+
kNumInvertedLags12kHz
+
kConvolutionLength
tmp
.
end
(
)
0
.
f
)
;
fft_
.
ForwardTransform
(
*
tmp_
X_
.
get
(
)
false
)
;
constexpr
float
kScalingFactor
=
1
.
f
/
static_cast
<
float
>
(
kFftFrameSize
)
;
std
:
:
fill
(
tmp
.
begin
(
)
tmp
.
end
(
)
0
.
f
)
;
fft_
.
FrequencyDomainConvolve
(
*
X_
*
H_
tmp_
.
get
(
)
kScalingFactor
)
;
fft_
.
BackwardTransform
(
*
tmp_
tmp_
.
get
(
)
false
)
;
std
:
:
copy
(
tmp
.
begin
(
)
+
kConvolutionLength
-
1
tmp
.
begin
(
)
+
kConvolutionLength
+
kNumInvertedLags12kHz
-
1
auto_corr
.
begin
(
)
)
;
}
}
}
