#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_TEST_UTILS_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_TEST_UTILS_H_
#
include
<
array
>
#
include
<
fstream
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
common
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_compare
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
constexpr
float
kFloatMin
=
std
:
:
numeric_limits
<
float
>
:
:
min
(
)
;
void
ExpectEqualFloatArray
(
ArrayView
<
const
float
>
expected
ArrayView
<
const
float
>
computed
)
;
void
ExpectNearAbsolute
(
ArrayView
<
const
float
>
expected
ArrayView
<
const
float
>
computed
float
tolerance
)
;
class
FileReader
{
public
:
virtual
~
FileReader
(
)
=
default
;
virtual
int
size
(
)
const
=
0
;
virtual
bool
ReadChunk
(
ArrayView
<
float
>
dst
)
=
0
;
virtual
bool
ReadValue
(
float
&
dst
)
=
0
;
virtual
void
SeekForward
(
int
hop
)
=
0
;
virtual
void
SeekBeginning
(
)
=
0
;
}
;
struct
ChunksFileReader
{
const
int
chunk_size
;
const
int
num_chunks
;
std
:
:
unique_ptr
<
FileReader
>
reader
;
}
;
std
:
:
unique_ptr
<
FileReader
>
CreatePcmSamplesReader
(
)
;
ChunksFileReader
CreatePitchBuffer24kHzReader
(
)
;
ChunksFileReader
CreateLpResidualAndPitchInfoReader
(
)
;
std
:
:
unique_ptr
<
FileReader
>
CreateGruInputReader
(
)
;
std
:
:
unique_ptr
<
FileReader
>
CreateVadProbsReader
(
)
;
class
PitchTestData
{
public
:
PitchTestData
(
)
;
~
PitchTestData
(
)
;
ArrayView
<
const
float
kBufSize24kHz
>
PitchBuffer24kHzView
(
)
const
{
return
pitch_buffer_24k_
;
}
ArrayView
<
const
float
kRefineNumLags24kHz
>
SquareEnergies24kHzView
(
)
const
{
return
square_energies_24k_
;
}
ArrayView
<
const
float
kNumLags12kHz
>
AutoCorrelation12kHzView
(
)
const
{
return
auto_correlation_12k_
;
}
private
:
std
:
:
array
<
float
kBufSize24kHz
>
pitch_buffer_24k_
;
std
:
:
array
<
float
kRefineNumLags24kHz
>
square_energies_24k_
;
std
:
:
array
<
float
kNumLags12kHz
>
auto_correlation_12k_
;
}
;
class
FileWriter
{
public
:
explicit
FileWriter
(
absl
:
:
string_view
file_path
)
:
os_
(
std
:
:
string
(
file_path
)
std
:
:
ios
:
:
binary
)
{
}
FileWriter
(
const
FileWriter
&
)
=
delete
;
FileWriter
&
operator
=
(
const
FileWriter
&
)
=
delete
;
~
FileWriter
(
)
=
default
;
void
WriteChunk
(
ArrayView
<
const
float
>
value
)
{
const
std
:
:
streamsize
bytes_to_write
=
value
.
size
(
)
*
sizeof
(
float
)
;
os_
.
write
(
reinterpret_cast
<
const
char
*
>
(
value
.
data
(
)
)
bytes_to_write
)
;
}
private
:
std
:
:
ofstream
os_
;
}
;
}
}
#
endif
