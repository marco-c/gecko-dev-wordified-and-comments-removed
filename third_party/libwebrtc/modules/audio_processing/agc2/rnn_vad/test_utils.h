#
ifndef
MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_TEST_UTILS_H_
#
define
MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_TEST_UTILS_H_
#
include
<
algorithm
>
#
include
<
array
>
#
include
<
fstream
>
#
include
<
limits
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
type_traits
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
rnn_vad
/
common
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
rnn_vad
{
namespace
test
{
constexpr
float
kFloatMin
=
std
:
:
numeric_limits
<
float
>
:
:
min
(
)
;
void
ExpectEqualFloatArray
(
rtc
:
:
ArrayView
<
const
float
>
expected
rtc
:
:
ArrayView
<
const
float
>
computed
)
;
void
ExpectNearAbsolute
(
rtc
:
:
ArrayView
<
const
float
>
expected
rtc
:
:
ArrayView
<
const
float
>
computed
float
tolerance
)
;
template
<
typename
T
typename
D
=
T
>
class
BinaryFileReader
{
public
:
explicit
BinaryFileReader
(
const
std
:
:
string
&
file_path
size_t
chunk_size
=
0
)
:
is_
(
file_path
std
:
:
ios
:
:
binary
|
std
:
:
ios
:
:
ate
)
data_length_
(
is_
.
tellg
(
)
/
sizeof
(
T
)
)
chunk_size_
(
chunk_size
)
{
RTC_CHECK
(
is_
)
;
SeekBeginning
(
)
;
buf_
.
resize
(
chunk_size_
)
;
}
BinaryFileReader
(
const
BinaryFileReader
&
)
=
delete
;
BinaryFileReader
&
operator
=
(
const
BinaryFileReader
&
)
=
delete
;
~
BinaryFileReader
(
)
=
default
;
size_t
data_length
(
)
const
{
return
data_length_
;
}
bool
ReadValue
(
D
*
dst
)
{
if
(
std
:
:
is_same
<
T
D
>
:
:
value
)
{
is_
.
read
(
reinterpret_cast
<
char
*
>
(
dst
)
sizeof
(
T
)
)
;
}
else
{
T
v
;
is_
.
read
(
reinterpret_cast
<
char
*
>
(
&
v
)
sizeof
(
T
)
)
;
*
dst
=
static_cast
<
D
>
(
v
)
;
}
return
is_
.
gcount
(
)
=
=
sizeof
(
T
)
;
}
bool
ReadChunk
(
rtc
:
:
ArrayView
<
D
>
dst
)
{
RTC_DCHECK
(
(
chunk_size_
=
=
0
)
|
|
(
chunk_size_
=
=
dst
.
size
(
)
)
)
;
const
std
:
:
streamsize
bytes_to_read
=
dst
.
size
(
)
*
sizeof
(
T
)
;
if
(
std
:
:
is_same
<
T
D
>
:
:
value
)
{
is_
.
read
(
reinterpret_cast
<
char
*
>
(
dst
.
data
(
)
)
bytes_to_read
)
;
}
else
{
is_
.
read
(
reinterpret_cast
<
char
*
>
(
buf_
.
data
(
)
)
bytes_to_read
)
;
std
:
:
transform
(
buf_
.
begin
(
)
buf_
.
end
(
)
dst
.
begin
(
)
[
]
(
const
T
&
v
)
-
>
D
{
return
static_cast
<
D
>
(
v
)
;
}
)
;
}
return
is_
.
gcount
(
)
=
=
bytes_to_read
;
}
void
SeekForward
(
size_t
items
)
{
is_
.
seekg
(
items
*
sizeof
(
T
)
is_
.
cur
)
;
}
void
SeekBeginning
(
)
{
is_
.
seekg
(
0
is_
.
beg
)
;
}
private
:
std
:
:
ifstream
is_
;
const
size_t
data_length_
;
const
size_t
chunk_size_
;
std
:
:
vector
<
T
>
buf_
;
}
;
template
<
typename
T
>
class
BinaryFileWriter
{
public
:
explicit
BinaryFileWriter
(
const
std
:
:
string
&
file_path
)
:
os_
(
file_path
std
:
:
ios
:
:
binary
)
{
}
BinaryFileWriter
(
const
BinaryFileWriter
&
)
=
delete
;
BinaryFileWriter
&
operator
=
(
const
BinaryFileWriter
&
)
=
delete
;
~
BinaryFileWriter
(
)
=
default
;
static_assert
(
std
:
:
is_arithmetic
<
T
>
:
:
value
"
"
)
;
void
WriteChunk
(
rtc
:
:
ArrayView
<
const
T
>
value
)
{
const
std
:
:
streamsize
bytes_to_write
=
value
.
size
(
)
*
sizeof
(
T
)
;
os_
.
write
(
reinterpret_cast
<
const
char
*
>
(
value
.
data
(
)
)
bytes_to_write
)
;
}
private
:
std
:
:
ofstream
os_
;
}
;
std
:
:
pair
<
std
:
:
unique_ptr
<
BinaryFileReader
<
int16_t
float
>
>
const
size_t
>
CreatePcmSamplesReader
(
const
size_t
frame_length
)
;
std
:
:
pair
<
std
:
:
unique_ptr
<
BinaryFileReader
<
float
>
>
const
size_t
>
CreatePitchBuffer24kHzReader
(
)
;
std
:
:
pair
<
std
:
:
unique_ptr
<
BinaryFileReader
<
float
>
>
const
size_t
>
CreateLpResidualAndPitchPeriodGainReader
(
)
;
std
:
:
pair
<
std
:
:
unique_ptr
<
BinaryFileReader
<
float
>
>
const
size_t
>
CreateVadProbsReader
(
)
;
constexpr
size_t
kNumPitchBufAutoCorrCoeffs
=
147
;
constexpr
size_t
kNumPitchBufSquareEnergies
=
385
;
constexpr
size_t
kPitchTestDataSize
=
kBufSize24kHz
+
kNumPitchBufSquareEnergies
+
kNumPitchBufAutoCorrCoeffs
;
class
PitchTestData
{
public
:
PitchTestData
(
)
;
~
PitchTestData
(
)
;
rtc
:
:
ArrayView
<
const
float
kBufSize24kHz
>
GetPitchBufView
(
)
const
;
rtc
:
:
ArrayView
<
const
float
kNumPitchBufSquareEnergies
>
GetPitchBufSquareEnergiesView
(
)
const
;
rtc
:
:
ArrayView
<
const
float
kNumPitchBufAutoCorrCoeffs
>
GetPitchBufAutoCorrCoeffsView
(
)
const
;
private
:
std
:
:
array
<
float
kPitchTestDataSize
>
test_data_
;
}
;
bool
IsOptimizationAvailable
(
Optimization
optimization
)
;
}
}
}
#
endif
