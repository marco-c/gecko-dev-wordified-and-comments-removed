#
ifndef
MODULES_AUDIO_PROCESSING_SPLITTING_FILTER_H_
#
define
MODULES_AUDIO_PROCESSING_SPLITTING_FILTER_H_
#
include
<
cstring
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
common_audio
/
channel_buffer
.
h
"
#
include
"
modules
/
audio_processing
/
three_band_filter_bank
.
h
"
namespace
webrtc
{
struct
TwoBandsStates
{
TwoBandsStates
(
)
{
memset
(
analysis_state1
0
sizeof
(
analysis_state1
)
)
;
memset
(
analysis_state2
0
sizeof
(
analysis_state2
)
)
;
memset
(
synthesis_state1
0
sizeof
(
synthesis_state1
)
)
;
memset
(
synthesis_state2
0
sizeof
(
synthesis_state2
)
)
;
}
static
const
int
kStateSize
=
6
;
int
analysis_state1
[
kStateSize
]
;
int
analysis_state2
[
kStateSize
]
;
int
synthesis_state1
[
kStateSize
]
;
int
synthesis_state2
[
kStateSize
]
;
}
;
class
SplittingFilter
{
public
:
SplittingFilter
(
size_t
num_channels
size_t
num_bands
size_t
num_frames
)
;
~
SplittingFilter
(
)
;
void
Analysis
(
const
ChannelBuffer
<
float
>
*
data
ChannelBuffer
<
float
>
*
bands
)
;
void
Synthesis
(
const
ChannelBuffer
<
float
>
*
bands
ChannelBuffer
<
float
>
*
data
)
;
private
:
void
TwoBandsAnalysis
(
const
ChannelBuffer
<
float
>
*
data
ChannelBuffer
<
float
>
*
bands
)
;
void
TwoBandsSynthesis
(
const
ChannelBuffer
<
float
>
*
bands
ChannelBuffer
<
float
>
*
data
)
;
void
ThreeBandsAnalysis
(
const
ChannelBuffer
<
float
>
*
data
ChannelBuffer
<
float
>
*
bands
)
;
void
ThreeBandsSynthesis
(
const
ChannelBuffer
<
float
>
*
bands
ChannelBuffer
<
float
>
*
data
)
;
void
InitBuffers
(
)
;
const
size_t
num_bands_
;
std
:
:
vector
<
TwoBandsStates
>
two_bands_states_
;
std
:
:
vector
<
ThreeBandFilterBank
>
three_band_filter_banks_
;
}
;
}
#
endif
