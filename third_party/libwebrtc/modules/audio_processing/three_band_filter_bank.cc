#
include
"
modules
/
audio_processing
/
three_band_filter_bank
.
h
"
#
include
<
array
>
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
constexpr
int
kSubSampling
=
ThreeBandFilterBank
:
:
kNumBands
;
constexpr
int
kDctSize
=
ThreeBandFilterBank
:
:
kNumBands
;
static_assert
(
ThreeBandFilterBank
:
:
kNumBands
*
ThreeBandFilterBank
:
:
kSplitBandSize
=
=
ThreeBandFilterBank
:
:
kFullBandSize
"
The
full
band
must
be
split
in
equally
sized
subbands
"
)
;
const
float
kFilterCoeffs
[
ThreeBandFilterBank
:
:
kNumNonZeroFilters
]
[
kFilterSize
]
=
{
{
-
0
.
00047749f
-
0
.
00496888f
+
0
.
16547118f
+
0
.
00425496f
}
{
-
0
.
00173287f
-
0
.
01585778f
+
0
.
14989004f
+
0
.
00994113f
}
{
-
0
.
00304815f
-
0
.
02536082f
+
0
.
12154542f
+
0
.
01157993f
}
{
-
0
.
00346946f
-
0
.
02587886f
+
0
.
04760441f
+
0
.
00607594f
}
{
-
0
.
00154717f
-
0
.
01136076f
+
0
.
01387458f
+
0
.
00186353f
}
{
+
0
.
00186353f
+
0
.
01387458f
-
0
.
01136076f
-
0
.
00154717f
}
{
+
0
.
00607594f
+
0
.
04760441f
-
0
.
02587886f
-
0
.
00346946f
}
{
+
0
.
00983212f
+
0
.
08543175f
-
0
.
02982767f
-
0
.
00383509f
}
{
+
0
.
00994113f
+
0
.
14989004f
-
0
.
01585778f
-
0
.
00173287f
}
{
+
0
.
00425496f
+
0
.
16547118f
-
0
.
00496888f
-
0
.
00047749f
}
}
;
constexpr
int
kZeroFilterIndex1
=
3
;
constexpr
int
kZeroFilterIndex2
=
9
;
const
float
kDctModulation
[
ThreeBandFilterBank
:
:
kNumNonZeroFilters
]
[
kDctSize
]
=
{
{
2
.
f
2
.
f
2
.
f
}
{
1
.
73205077f
0
.
f
-
1
.
73205077f
}
{
1
.
f
-
2
.
f
1
.
f
}
{
-
1
.
f
2
.
f
-
1
.
f
}
{
-
1
.
73205077f
0
.
f
1
.
73205077f
}
{
-
2
.
f
-
2
.
f
-
2
.
f
}
{
-
1
.
73205077f
0
.
f
1
.
73205077f
}
{
-
1
.
f
2
.
f
-
1
.
f
}
{
1
.
f
-
2
.
f
1
.
f
}
{
1
.
73205077f
0
.
f
-
1
.
73205077f
}
}
;
void
FilterCore
(
rtc
:
:
ArrayView
<
const
float
kFilterSize
>
filter
rtc
:
:
ArrayView
<
const
float
ThreeBandFilterBank
:
:
kSplitBandSize
>
in
const
int
in_shift
rtc
:
:
ArrayView
<
float
ThreeBandFilterBank
:
:
kSplitBandSize
>
out
rtc
:
:
ArrayView
<
float
kMemorySize
>
state
)
{
constexpr
int
kMaxInShift
=
(
kStride
-
1
)
;
RTC_DCHECK_GE
(
in_shift
0
)
;
RTC_DCHECK_LE
(
in_shift
kMaxInShift
)
;
std
:
:
fill
(
out
.
begin
(
)
out
.
end
(
)
0
.
f
)
;
for
(
int
k
=
0
;
k
<
in_shift
;
+
+
k
)
{
for
(
int
i
=
0
j
=
kMemorySize
+
k
-
in_shift
;
i
<
kFilterSize
;
+
+
i
j
-
=
kStride
)
{
out
[
k
]
+
=
state
[
j
]
*
filter
[
i
]
;
}
}
for
(
int
k
=
in_shift
shift
=
0
;
k
<
kFilterSize
*
kStride
;
+
+
k
+
+
shift
)
{
RTC_DCHECK_GE
(
shift
0
)
;
const
int
loop_limit
=
std
:
:
min
(
kFilterSize
1
+
(
shift
>
>
kStrideLog2
)
)
;
for
(
int
i
=
0
j
=
shift
;
i
<
loop_limit
;
+
+
i
j
-
=
kStride
)
{
out
[
k
]
+
=
in
[
j
]
*
filter
[
i
]
;
}
for
(
int
i
=
loop_limit
j
=
kMemorySize
+
shift
-
loop_limit
*
kStride
;
i
<
kFilterSize
;
+
+
i
j
-
=
kStride
)
{
out
[
k
]
+
=
state
[
j
]
*
filter
[
i
]
;
}
}
for
(
int
k
=
kFilterSize
*
kStride
shift
=
kFilterSize
*
kStride
-
in_shift
;
k
<
ThreeBandFilterBank
:
:
kSplitBandSize
;
+
+
k
+
+
shift
)
{
for
(
int
i
=
0
j
=
shift
;
i
<
kFilterSize
;
+
+
i
j
-
=
kStride
)
{
out
[
k
]
+
=
in
[
j
]
*
filter
[
i
]
;
}
}
std
:
:
copy
(
in
.
begin
(
)
+
ThreeBandFilterBank
:
:
kSplitBandSize
-
kMemorySize
in
.
end
(
)
state
.
begin
(
)
)
;
}
}
ThreeBandFilterBank
:
:
ThreeBandFilterBank
(
)
{
RTC_DCHECK_EQ
(
state_analysis_
.
size
(
)
kNumNonZeroFilters
)
;
RTC_DCHECK_EQ
(
state_synthesis_
.
size
(
)
kNumNonZeroFilters
)
;
for
(
int
k
=
0
;
k
<
kNumNonZeroFilters
;
+
+
k
)
{
RTC_DCHECK_EQ
(
state_analysis_
[
k
]
.
size
(
)
kMemorySize
)
;
RTC_DCHECK_EQ
(
state_synthesis_
[
k
]
.
size
(
)
kMemorySize
)
;
state_analysis_
[
k
]
.
fill
(
0
.
f
)
;
state_synthesis_
[
k
]
.
fill
(
0
.
f
)
;
}
}
ThreeBandFilterBank
:
:
~
ThreeBandFilterBank
(
)
=
default
;
void
ThreeBandFilterBank
:
:
Analysis
(
rtc
:
:
ArrayView
<
const
float
kFullBandSize
>
in
rtc
:
:
ArrayView
<
const
rtc
:
:
ArrayView
<
float
>
ThreeBandFilterBank
:
:
kNumBands
>
out
)
{
for
(
int
band
=
0
;
band
<
ThreeBandFilterBank
:
:
kNumBands
;
+
+
band
)
{
RTC_DCHECK_EQ
(
out
[
band
]
.
size
(
)
kSplitBandSize
)
;
std
:
:
fill
(
out
[
band
]
.
begin
(
)
out
[
band
]
.
end
(
)
0
)
;
}
for
(
int
downsampling_index
=
0
;
downsampling_index
<
kSubSampling
;
+
+
downsampling_index
)
{
std
:
:
array
<
float
kSplitBandSize
>
in_subsampled
;
for
(
int
k
=
0
;
k
<
kSplitBandSize
;
+
+
k
)
{
in_subsampled
[
k
]
=
in
[
(
kSubSampling
-
1
)
-
downsampling_index
+
kSubSampling
*
k
]
;
}
for
(
int
in_shift
=
0
;
in_shift
<
kStride
;
+
+
in_shift
)
{
const
int
index
=
downsampling_index
+
in_shift
*
kSubSampling
;
if
(
index
=
=
kZeroFilterIndex1
|
|
index
=
=
kZeroFilterIndex2
)
{
continue
;
}
const
int
filter_index
=
index
<
kZeroFilterIndex1
?
index
:
(
index
<
kZeroFilterIndex2
?
index
-
1
:
index
-
2
)
;
rtc
:
:
ArrayView
<
const
float
kFilterSize
>
filter
(
kFilterCoeffs
[
filter_index
]
)
;
rtc
:
:
ArrayView
<
const
float
kDctSize
>
dct_modulation
(
kDctModulation
[
filter_index
]
)
;
rtc
:
:
ArrayView
<
float
kMemorySize
>
state
(
state_analysis_
[
filter_index
]
)
;
std
:
:
array
<
float
kSplitBandSize
>
out_subsampled
;
FilterCore
(
filter
in_subsampled
in_shift
out_subsampled
state
)
;
for
(
int
band
=
0
;
band
<
ThreeBandFilterBank
:
:
kNumBands
;
+
+
band
)
{
for
(
int
n
=
0
;
n
<
kSplitBandSize
;
+
+
n
)
{
out
[
band
]
[
n
]
+
=
dct_modulation
[
band
]
*
out_subsampled
[
n
]
;
}
}
}
}
}
void
ThreeBandFilterBank
:
:
Synthesis
(
rtc
:
:
ArrayView
<
const
rtc
:
:
ArrayView
<
float
>
ThreeBandFilterBank
:
:
kNumBands
>
in
rtc
:
:
ArrayView
<
float
kFullBandSize
>
out
)
{
std
:
:
fill
(
out
.
begin
(
)
out
.
end
(
)
0
)
;
for
(
int
upsampling_index
=
0
;
upsampling_index
<
kSubSampling
;
+
+
upsampling_index
)
{
for
(
int
in_shift
=
0
;
in_shift
<
kStride
;
+
+
in_shift
)
{
const
int
index
=
upsampling_index
+
in_shift
*
kSubSampling
;
if
(
index
=
=
kZeroFilterIndex1
|
|
index
=
=
kZeroFilterIndex2
)
{
continue
;
}
const
int
filter_index
=
index
<
kZeroFilterIndex1
?
index
:
(
index
<
kZeroFilterIndex2
?
index
-
1
:
index
-
2
)
;
rtc
:
:
ArrayView
<
const
float
kFilterSize
>
filter
(
kFilterCoeffs
[
filter_index
]
)
;
rtc
:
:
ArrayView
<
const
float
kDctSize
>
dct_modulation
(
kDctModulation
[
filter_index
]
)
;
rtc
:
:
ArrayView
<
float
kMemorySize
>
state
(
state_synthesis_
[
filter_index
]
)
;
std
:
:
array
<
float
kSplitBandSize
>
in_subsampled
;
std
:
:
fill
(
in_subsampled
.
begin
(
)
in_subsampled
.
end
(
)
0
.
f
)
;
for
(
int
band
=
0
;
band
<
ThreeBandFilterBank
:
:
kNumBands
;
+
+
band
)
{
RTC_DCHECK_EQ
(
in
[
band
]
.
size
(
)
kSplitBandSize
)
;
for
(
int
n
=
0
;
n
<
kSplitBandSize
;
+
+
n
)
{
in_subsampled
[
n
]
+
=
dct_modulation
[
band
]
*
in
[
band
]
[
n
]
;
}
}
std
:
:
array
<
float
kSplitBandSize
>
out_subsampled
;
FilterCore
(
filter
in_subsampled
in_shift
out_subsampled
state
)
;
constexpr
float
kUpsamplingScaling
=
kSubSampling
;
for
(
int
k
=
0
;
k
<
kSplitBandSize
;
+
+
k
)
{
out
[
upsampling_index
+
kSubSampling
*
k
]
+
=
kUpsamplingScaling
*
out_subsampled
[
k
]
;
}
}
}
}
}
