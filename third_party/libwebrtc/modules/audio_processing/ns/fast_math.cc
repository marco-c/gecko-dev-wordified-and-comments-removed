#
include
"
modules
/
audio_processing
/
ns
/
fast_math
.
h
"
#
include
<
math
.
h
>
#
include
<
stdint
.
h
>
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
float
FastLog2f
(
float
in
)
{
RTC_DCHECK_GT
(
in
.
0f
)
;
union
{
float
dummy
;
uint32_t
a
;
}
x
=
{
in
}
;
float
out
=
x
.
a
;
out
*
=
1
.
1920929e
-
7f
;
out
-
=
126
.
942695f
;
return
out
;
}
}
float
SqrtFastApproximation
(
float
f
)
{
return
sqrtf
(
f
)
;
}
float
Pow2Approximation
(
float
p
)
{
return
powf
(
2
.
f
p
)
;
}
float
PowApproximation
(
float
x
float
p
)
{
return
Pow2Approximation
(
p
*
FastLog2f
(
x
)
)
;
}
float
LogApproximation
(
float
x
)
{
constexpr
float
kLogOf2
=
0
.
69314718056f
;
return
FastLog2f
(
x
)
*
kLogOf2
;
}
void
LogApproximation
(
rtc
:
:
ArrayView
<
const
float
>
x
rtc
:
:
ArrayView
<
float
>
y
)
{
for
(
size_t
k
=
0
;
k
<
x
.
size
(
)
;
+
+
k
)
{
y
[
k
]
=
LogApproximation
(
x
[
k
]
)
;
}
}
float
ExpApproximation
(
float
x
)
{
constexpr
float
kLog10Ofe
=
0
.
4342944819f
;
return
PowApproximation
(
10
.
f
x
*
kLog10Ofe
)
;
}
void
ExpApproximation
(
rtc
:
:
ArrayView
<
const
float
>
x
rtc
:
:
ArrayView
<
float
>
y
)
{
for
(
size_t
k
=
0
;
k
<
x
.
size
(
)
;
+
+
k
)
{
y
[
k
]
=
ExpApproximation
(
x
[
k
]
)
;
}
}
void
ExpApproximationSignFlip
(
rtc
:
:
ArrayView
<
const
float
>
x
rtc
:
:
ArrayView
<
float
>
y
)
{
for
(
size_t
k
=
0
;
k
<
x
.
size
(
)
;
+
+
k
)
{
y
[
k
]
=
ExpApproximation
(
-
x
[
k
]
)
;
}
}
}
