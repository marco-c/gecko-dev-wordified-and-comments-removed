#
ifndef
MODULES_AUDIO_PROCESSING_TEST_DEBUG_DUMP_REPLAYER_H_
#
define
MODULES_AUDIO_PROCESSING_TEST_DEBUG_DUMP_REPLAYER_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
common_audio
/
channel_buffer
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
rtc_base
/
ignore_wundef
.
h
"
RTC_PUSH_IGNORING_WUNDEF
(
)
#
include
"
modules
/
audio_processing
/
debug
.
pb
.
h
"
RTC_POP_IGNORING_WUNDEF
(
)
namespace
webrtc
{
namespace
test
{
class
DebugDumpReplayer
{
public
:
DebugDumpReplayer
(
)
;
~
DebugDumpReplayer
(
)
;
bool
SetDumpFile
(
const
std
:
:
string
&
filename
)
;
absl
:
:
optional
<
audioproc
:
:
Event
>
GetNextEvent
(
)
const
;
bool
RunNextEvent
(
)
;
const
ChannelBuffer
<
float
>
*
GetOutput
(
)
const
;
StreamConfig
GetOutputConfig
(
)
const
;
private
:
void
OnInitEvent
(
const
audioproc
:
:
Init
&
msg
)
;
void
OnStreamEvent
(
const
audioproc
:
:
Stream
&
msg
)
;
void
OnReverseStreamEvent
(
const
audioproc
:
:
ReverseStream
&
msg
)
;
void
OnConfigEvent
(
const
audioproc
:
:
Config
&
msg
)
;
void
OnRuntimeSettingEvent
(
const
audioproc
:
:
RuntimeSetting
&
msg
)
;
void
MaybeRecreateApm
(
const
audioproc
:
:
Config
&
msg
)
;
void
ConfigureApm
(
const
audioproc
:
:
Config
&
msg
)
;
void
LoadNextMessage
(
)
;
std
:
:
unique_ptr
<
ChannelBuffer
<
float
>
>
input_
;
std
:
:
unique_ptr
<
ChannelBuffer
<
float
>
>
reverse_
;
std
:
:
unique_ptr
<
ChannelBuffer
<
float
>
>
output_
;
std
:
:
unique_ptr
<
AudioProcessing
>
apm_
;
FILE
*
debug_file_
;
StreamConfig
input_config_
;
StreamConfig
reverse_config_
;
StreamConfig
output_config_
;
bool
has_next_event_
;
audioproc
:
:
Event
next_event_
;
}
;
}
}
#
endif
