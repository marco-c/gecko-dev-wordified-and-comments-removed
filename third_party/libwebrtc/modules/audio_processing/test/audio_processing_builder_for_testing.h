#
ifndef
MODULES_AUDIO_PROCESSING_TEST_AUDIO_PROCESSING_BUILDER_FOR_TESTING_H_
#
define
MODULES_AUDIO_PROCESSING_TEST_AUDIO_PROCESSING_BUILDER_FOR_TESTING_H_
#
include
<
list
>
#
include
<
memory
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
namespace
webrtc
{
class
AudioProcessingBuilderForTesting
{
public
:
AudioProcessingBuilderForTesting
(
)
;
~
AudioProcessingBuilderForTesting
(
)
;
AudioProcessingBuilderForTesting
&
SetEchoControlFactory
(
std
:
:
unique_ptr
<
EchoControlFactory
>
echo_control_factory
)
{
echo_control_factory_
=
std
:
:
move
(
echo_control_factory
)
;
return
*
this
;
}
AudioProcessingBuilderForTesting
&
SetCapturePostProcessing
(
std
:
:
unique_ptr
<
CustomProcessing
>
capture_post_processing
)
{
capture_post_processing_
=
std
:
:
move
(
capture_post_processing
)
;
return
*
this
;
}
AudioProcessingBuilderForTesting
&
SetRenderPreProcessing
(
std
:
:
unique_ptr
<
CustomProcessing
>
render_pre_processing
)
{
render_pre_processing_
=
std
:
:
move
(
render_pre_processing
)
;
return
*
this
;
}
AudioProcessingBuilderForTesting
&
SetEchoDetector
(
rtc
:
:
scoped_refptr
<
EchoDetector
>
echo_detector
)
{
echo_detector_
=
std
:
:
move
(
echo_detector
)
;
return
*
this
;
}
AudioProcessingBuilderForTesting
&
SetCaptureAnalyzer
(
std
:
:
unique_ptr
<
CustomAudioAnalyzer
>
capture_analyzer
)
{
capture_analyzer_
=
std
:
:
move
(
capture_analyzer
)
;
return
*
this
;
}
rtc
:
:
scoped_refptr
<
AudioProcessing
>
Create
(
)
;
private
:
void
TransferOwnershipsToBuilder
(
AudioProcessingBuilder
*
builder
)
;
std
:
:
unique_ptr
<
EchoControlFactory
>
echo_control_factory_
;
std
:
:
unique_ptr
<
CustomProcessing
>
capture_post_processing_
;
std
:
:
unique_ptr
<
CustomProcessing
>
render_pre_processing_
;
rtc
:
:
scoped_refptr
<
EchoDetector
>
echo_detector_
;
std
:
:
unique_ptr
<
CustomAudioAnalyzer
>
capture_analyzer_
;
}
;
}
#
endif
