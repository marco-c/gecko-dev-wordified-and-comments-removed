#
include
"
common_audio
/
vad
/
include
/
vad
.
h
"
#
include
<
array
>
#
include
<
fstream
>
#
include
<
memory
>
#
include
"
absl
/
flags
/
flag
.
h
"
#
include
"
absl
/
flags
/
parse
.
h
"
#
include
"
common_audio
/
wav_file
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
ABSL_FLAG
(
std
:
:
string
i
"
"
"
Input
wav
file
"
)
;
ABSL_FLAG
(
std
:
:
string
o
"
"
"
VAD
output
file
"
)
;
namespace
webrtc
{
namespace
test
{
namespace
{
constexpr
uint8_t
kAudioFrameLengthMilliseconds
=
30
;
constexpr
int
kMaxSampleRate
=
48000
;
constexpr
size_t
kMaxFrameLen
=
kAudioFrameLengthMilliseconds
*
kMaxSampleRate
/
1000
;
constexpr
uint8_t
kBitmaskBuffSize
=
8
;
int
main
(
int
argc
char
*
argv
[
]
)
{
absl
:
:
ParseCommandLine
(
argc
argv
)
;
const
std
:
:
string
input_file
=
absl
:
:
GetFlag
(
FLAGS_i
)
;
const
std
:
:
string
output_file
=
absl
:
:
GetFlag
(
FLAGS_o
)
;
WavReader
wav_reader
(
input_file
)
;
if
(
wav_reader
.
num_channels
(
)
!
=
1
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Only
mono
wav
files
supported
"
;
return
1
;
}
if
(
wav_reader
.
sample_rate
(
)
>
kMaxSampleRate
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
Beyond
maximum
sample
rate
(
"
<
<
kMaxSampleRate
<
<
"
)
"
;
return
1
;
}
const
size_t
audio_frame_length
=
rtc
:
:
CheckedDivExact
(
kAudioFrameLengthMilliseconds
*
wav_reader
.
sample_rate
(
)
1000
)
;
if
(
audio_frame_length
>
kMaxFrameLen
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
The
frame
size
and
/
or
the
sample
rate
are
too
large
.
"
;
return
1
;
}
std
:
:
ofstream
out_file
(
output_file
std
:
:
ofstream
:
:
binary
)
;
const
char
audio_frame_length_ms
=
kAudioFrameLengthMilliseconds
;
out_file
.
write
(
&
audio_frame_length_ms
1
)
;
std
:
:
unique_ptr
<
Vad
>
vad
=
CreateVad
(
Vad
:
:
Aggressiveness
:
:
kVadNormal
)
;
std
:
:
array
<
int16_t
kMaxFrameLen
>
samples
;
char
buff
=
0
;
uint8_t
next
=
0
;
while
(
true
)
{
const
auto
read_samples
=
wav_reader
.
ReadSamples
(
audio_frame_length
samples
.
data
(
)
)
;
if
(
read_samples
<
audio_frame_length
)
break
;
const
auto
is_speech
=
vad
-
>
VoiceActivity
(
samples
.
data
(
)
audio_frame_length
wav_reader
.
sample_rate
(
)
)
;
buff
=
is_speech
?
buff
|
(
1
<
<
next
)
:
buff
&
~
(
1
<
<
next
)
;
if
(
+
+
next
=
=
kBitmaskBuffSize
)
{
out_file
.
write
(
&
buff
1
)
;
buff
=
0
;
next
=
0
;
}
}
char
extra_bits
=
0
;
if
(
next
>
0
)
{
extra_bits
=
kBitmaskBuffSize
-
next
;
out_file
.
write
(
&
buff
1
)
;
}
out_file
.
write
(
&
extra_bits
1
)
;
out_file
.
close
(
)
;
return
0
;
}
}
}
}
int
main
(
int
argc
char
*
argv
[
]
)
{
return
webrtc
:
:
test
:
:
main
(
argc
argv
)
;
}
