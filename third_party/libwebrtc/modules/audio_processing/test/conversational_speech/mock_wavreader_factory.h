#
ifndef
MODULES_AUDIO_PROCESSING_TEST_CONVERSATIONAL_SPEECH_MOCK_WAVREADER_FACTORY_H_
#
define
MODULES_AUDIO_PROCESSING_TEST_CONVERSATIONAL_SPEECH_MOCK_WAVREADER_FACTORY_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
modules
/
audio_processing
/
test
/
conversational_speech
/
wavreader_abstract_factory
.
h
"
#
include
"
modules
/
audio_processing
/
test
/
conversational_speech
/
wavreader_interface
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
conversational_speech
{
class
MockWavReaderFactory
:
public
WavReaderAbstractFactory
{
public
:
struct
Params
{
int
sample_rate
;
size_t
num_channels
;
size_t
num_samples
;
}
;
MockWavReaderFactory
(
const
Params
&
default_params
const
std
:
:
map
<
std
:
:
string
const
Params
>
&
params
)
;
explicit
MockWavReaderFactory
(
const
Params
&
default_params
)
;
~
MockWavReaderFactory
(
)
;
MOCK_METHOD
(
std
:
:
unique_ptr
<
WavReaderInterface
>
Create
(
const
std
:
:
string
&
)
(
const
override
)
)
;
private
:
std
:
:
unique_ptr
<
WavReaderInterface
>
CreateMock
(
const
std
:
:
string
&
filepath
)
;
const
Params
&
default_params_
;
std
:
:
map
<
std
:
:
string
const
Params
>
audiotrack_names_params_
;
}
;
}
}
}
#
endif
