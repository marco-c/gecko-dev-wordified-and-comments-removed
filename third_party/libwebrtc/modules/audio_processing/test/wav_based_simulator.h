#
ifndef
MODULES_AUDIO_PROCESSING_TEST_WAV_BASED_SIMULATOR_H_
#
define
MODULES_AUDIO_PROCESSING_TEST_WAV_BASED_SIMULATOR_H_
#
include
<
vector
>
#
include
"
absl
/
base
/
nullability
.
h
"
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
audio
/
audio_processing
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
modules
/
audio_processing
/
test
/
audio_processing_simulator
.
h
"
namespace
webrtc
{
namespace
test
{
class
WavBasedSimulator
final
:
public
AudioProcessingSimulator
{
public
:
WavBasedSimulator
(
const
SimulationSettings
&
settings
absl
:
:
Nonnull
<
scoped_refptr
<
AudioProcessing
>
>
audio_processing
)
;
WavBasedSimulator
(
)
=
delete
;
WavBasedSimulator
(
const
WavBasedSimulator
&
)
=
delete
;
WavBasedSimulator
&
operator
=
(
const
WavBasedSimulator
&
)
=
delete
;
~
WavBasedSimulator
(
)
override
;
void
Process
(
)
override
;
void
Analyze
(
)
override
;
private
:
enum
SimulationEventType
{
kProcessStream
kProcessReverseStream
}
;
void
Initialize
(
)
;
bool
HandleProcessStreamCall
(
)
;
bool
HandleProcessReverseStreamCall
(
)
;
void
PrepareProcessStreamCall
(
)
;
void
PrepareReverseProcessStreamCall
(
)
;
static
std
:
:
vector
<
SimulationEventType
>
GetDefaultEventChain
(
)
;
static
std
:
:
vector
<
SimulationEventType
>
GetCustomEventChain
(
absl
:
:
string_view
filename
)
;
std
:
:
vector
<
SimulationEventType
>
call_chain_
;
}
;
}
}
#
endif
