#
include
"
modules
/
audio_processing
/
agc
/
clipping_predictor_evaluator
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
tuple
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_conversions
.
h
"
#
include
"
rtc_base
/
random
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
using
testing
:
:
Eq
;
using
testing
:
:
Field
;
using
testing
:
:
Optional
;
constexpr
bool
kDetected
=
true
;
constexpr
bool
kNotDetected
=
false
;
constexpr
bool
kPredicted
=
true
;
constexpr
bool
kNotPredicted
=
false
;
ClippingPredictionCounters
operator
-
(
const
ClippingPredictionCounters
&
lhs
const
ClippingPredictionCounters
&
rhs
)
{
return
{
lhs
.
true_positives
-
rhs
.
true_positives
lhs
.
true_negatives
-
rhs
.
true_negatives
lhs
.
false_positives
-
rhs
.
false_positives
lhs
.
false_negatives
-
rhs
.
false_negatives
}
;
}
TEST
(
ClippingPredictionEvalTest
Init
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_negatives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
0
)
;
}
class
ClippingPredictorEvaluatorParameterization
:
public
:
:
testing
:
:
TestWithParam
<
std
:
:
tuple
<
int
int
>
>
{
protected
:
uint64_t
seed
(
)
const
{
return
rtc
:
:
checked_cast
<
uint64_t
>
(
std
:
:
get
<
0
>
(
GetParam
(
)
)
)
;
}
int
history_size
(
)
const
{
return
std
:
:
get
<
1
>
(
GetParam
(
)
)
;
}
}
;
TEST_P
(
ClippingPredictorEvaluatorParameterization
AtMostOneMetricChanges
)
{
constexpr
int
kNumCalls
=
123
;
Random
random_generator
(
seed
(
)
)
;
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
kNumCalls
;
+
+
i
)
{
SCOPED_TRACE
(
i
)
;
const
auto
pre
=
evaluator
.
counters
(
)
;
bool
clipping_detected
=
random_generator
.
Rand
<
bool
>
(
)
;
bool
clipping_predicted
=
random_generator
.
Rand
<
bool
>
(
)
;
evaluator
.
Observe
(
clipping_detected
clipping_predicted
)
;
const
auto
post
=
evaluator
.
counters
(
)
;
int
num_changes
=
0
;
num_changes
+
=
pre
.
true_positives
=
=
post
.
true_positives
?
0
:
1
;
num_changes
+
=
pre
.
true_negatives
=
=
post
.
true_negatives
?
0
:
1
;
num_changes
+
=
pre
.
false_positives
=
=
post
.
false_positives
?
0
:
1
;
num_changes
+
=
pre
.
false_negatives
=
=
post
.
false_negatives
?
0
:
1
;
EXPECT_GE
(
num_changes
0
)
;
EXPECT_LE
(
num_changes
1
)
;
}
}
TEST_P
(
ClippingPredictorEvaluatorParameterization
MetricsAreWeaklyMonotonic
)
{
constexpr
int
kNumCalls
=
123
;
Random
random_generator
(
seed
(
)
)
;
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
kNumCalls
;
+
+
i
)
{
SCOPED_TRACE
(
i
)
;
const
auto
pre
=
evaluator
.
counters
(
)
;
bool
clipping_detected
=
random_generator
.
Rand
<
bool
>
(
)
;
bool
clipping_predicted
=
random_generator
.
Rand
<
bool
>
(
)
;
evaluator
.
Observe
(
clipping_detected
clipping_predicted
)
;
const
auto
post
=
evaluator
.
counters
(
)
;
EXPECT_GE
(
post
.
true_positives
pre
.
true_positives
)
;
EXPECT_GE
(
post
.
true_negatives
pre
.
true_negatives
)
;
EXPECT_GE
(
post
.
false_positives
pre
.
false_positives
)
;
EXPECT_GE
(
post
.
false_negatives
pre
.
false_negatives
)
;
}
}
TEST_P
(
ClippingPredictorEvaluatorParameterization
BoundedMetricsGrowth
)
{
constexpr
int
kNumCalls
=
123
;
Random
random_generator
(
seed
(
)
)
;
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
kNumCalls
;
+
+
i
)
{
SCOPED_TRACE
(
i
)
;
const
auto
pre
=
evaluator
.
counters
(
)
;
bool
clipping_detected
=
random_generator
.
Rand
<
bool
>
(
)
;
bool
clipping_predicted
=
random_generator
.
Rand
<
bool
>
(
)
;
evaluator
.
Observe
(
clipping_detected
clipping_predicted
)
;
const
auto
diff
=
evaluator
.
counters
(
)
-
pre
;
EXPECT_LE
(
diff
.
true_positives
history_size
(
)
+
1
)
;
EXPECT_LE
(
diff
.
true_negatives
1
)
;
EXPECT_LE
(
diff
.
false_positives
1
)
;
EXPECT_LE
(
diff
.
false_negatives
1
)
;
}
}
TEST_P
(
ClippingPredictorEvaluatorParameterization
PredictionIntervalIfAndOnlyIfTruePositives
)
{
constexpr
int
kNumCalls
=
123
;
Random
random_generator
(
seed
(
)
)
;
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
kNumCalls
;
+
+
i
)
{
SCOPED_TRACE
(
i
)
;
const
int
last_tp
=
evaluator
.
counters
(
)
.
true_positives
;
bool
clipping_detected
=
random_generator
.
Rand
<
bool
>
(
)
;
bool
clipping_predicted
=
random_generator
.
Rand
<
bool
>
(
)
;
absl
:
:
optional
<
int
>
prediction_interval
=
evaluator
.
Observe
(
clipping_detected
clipping_predicted
)
;
if
(
evaluator
.
counters
(
)
.
true_positives
=
=
last_tp
)
{
EXPECT_FALSE
(
prediction_interval
.
has_value
(
)
)
;
}
else
{
EXPECT_TRUE
(
prediction_interval
.
has_value
(
)
)
;
}
}
}
INSTANTIATE_TEST_SUITE_P
(
ClippingPredictionEvalTest
ClippingPredictorEvaluatorParameterization
:
:
testing
:
:
Combine
(
:
:
testing
:
:
Values
(
4
8
15
16
23
42
)
:
:
testing
:
:
Values
(
1
10
21
)
)
)
;
TEST
(
ClippingPredictionEvalTest
TrueNegativeWithNoDetectNoPredictAfterInit
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_negatives
1
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
TrueNegativeWithNoDetectPredictAfterInit
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_negatives
1
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
FalseNegativeWithDetectNoPredictAfterInit
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_negatives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
1
)
;
}
TEST
(
ClippingPredictionEvalTest
FalseNegativeWithDetectPredictAfterInit
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kDetected
kPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_negatives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
1
)
;
}
TEST
(
ClippingPredictionEvalTest
TrueNegativeWithNoDetectNoPredictAfterRemoveExpectations
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
RemoveExpectations
(
)
;
const
auto
pre
=
evaluator
.
counters
(
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
const
auto
diff
=
evaluator
.
counters
(
)
-
pre
;
EXPECT_EQ
(
diff
.
true_positives
0
)
;
EXPECT_EQ
(
diff
.
true_negatives
1
)
;
EXPECT_EQ
(
diff
.
false_positives
0
)
;
EXPECT_EQ
(
diff
.
false_negatives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
TrueNegativeWithNoDetectPredictAfterRemoveExpectations
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
RemoveExpectations
(
)
;
const
auto
pre
=
evaluator
.
counters
(
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
const
auto
diff
=
evaluator
.
counters
(
)
-
pre
;
EXPECT_EQ
(
diff
.
true_positives
0
)
;
EXPECT_EQ
(
diff
.
true_negatives
1
)
;
EXPECT_EQ
(
diff
.
false_positives
0
)
;
EXPECT_EQ
(
diff
.
false_negatives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
FalseNegativeWithDetectNoPredictAfterRemoveExpectations
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
RemoveExpectations
(
)
;
const
auto
pre
=
evaluator
.
counters
(
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
const
auto
diff
=
evaluator
.
counters
(
)
-
pre
;
EXPECT_EQ
(
diff
.
true_positives
0
)
;
EXPECT_EQ
(
diff
.
true_negatives
0
)
;
EXPECT_EQ
(
diff
.
false_positives
0
)
;
EXPECT_EQ
(
diff
.
false_negatives
1
)
;
}
TEST
(
ClippingPredictionEvalTest
FalseNegativeWithDetectPredictAfterRemoveExpectations
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
RemoveExpectations
(
)
;
const
auto
pre
=
evaluator
.
counters
(
)
;
evaluator
.
Observe
(
kDetected
kPredicted
)
;
const
auto
diff
=
evaluator
.
counters
(
)
-
pre
;
EXPECT_EQ
(
diff
.
false_negatives
1
)
;
EXPECT_EQ
(
diff
.
true_positives
0
)
;
EXPECT_EQ
(
diff
.
true_negatives
0
)
;
EXPECT_EQ
(
diff
.
false_positives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
TrueNegativesWhenNeverDetectedOrPredicted
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_negatives
4
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedOnceAndNeverDetectedBeforeDeadline
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
1
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedOnceButDetectedAfterDeadline
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
1
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedOnceAndThenImmediatelyDetected
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
1
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedOnceAndDetectedBeforeDeadline
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
1
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedOnceAndDetectedAtDeadline
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
1
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedOnceAndDetectedMultipleTimes
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
1
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
1
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
1
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
1
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedMultipleTimesAndDetectedOnceAfterDeadline
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
1
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
1
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
3
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedMultipleTimesAndDetectedOnce
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
3
)
;
const
int
true_negatives
=
evaluator
.
counters
(
)
.
true_negatives
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_negatives
true_negatives
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedMultipleTimesAndDetectedMultipleTimes
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
3
)
;
const
int
true_negatives
=
evaluator
.
counters
(
)
.
true_negatives
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_negatives
true_negatives
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedMultipleTimesAndAllDetected
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
3
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
0
)
;
}
TEST
(
ClippingPredictionEvalTest
PredictedMultipleTimesWithGapAndAllDetected
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
true_positives
2
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_positives
0
)
;
EXPECT_EQ
(
evaluator
.
counters
(
)
.
false_negatives
0
)
;
}
class
ClippingPredictorEvaluatorPredictionIntervalParameterization
:
public
:
:
testing
:
:
TestWithParam
<
std
:
:
tuple
<
int
int
>
>
{
protected
:
int
num_extra_observe_calls
(
)
const
{
return
std
:
:
get
<
0
>
(
GetParam
(
)
)
;
}
int
history_size
(
)
const
{
return
std
:
:
get
<
1
>
(
GetParam
(
)
)
;
}
}
;
TEST_P
(
ClippingPredictorEvaluatorPredictionIntervalParameterization
MinimumPredictionInterval
)
{
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
num_extra_observe_calls
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
absl
:
:
nullopt
)
;
}
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
EXPECT_THAT
(
evaluator
.
Observe
(
kDetected
kNotPredicted
)
Optional
(
Eq
(
1
)
)
)
;
}
TEST_P
(
ClippingPredictorEvaluatorPredictionIntervalParameterization
IntermediatePredictionInterval
)
{
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
num_extra_observe_calls
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
absl
:
:
nullopt
)
;
}
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
EXPECT_THAT
(
evaluator
.
Observe
(
kDetected
kNotPredicted
)
Optional
(
Eq
(
3
)
)
)
;
}
TEST_P
(
ClippingPredictorEvaluatorPredictionIntervalParameterization
MaximumPredictionInterval
)
{
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
num_extra_observe_calls
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
absl
:
:
nullopt
)
;
}
for
(
int
i
=
0
;
i
<
history_size
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
}
EXPECT_THAT
(
evaluator
.
Observe
(
kDetected
kNotPredicted
)
Optional
(
Eq
(
history_size
(
)
)
)
)
;
}
TEST_P
(
ClippingPredictorEvaluatorPredictionIntervalParameterization
PredictionIntervalReturnedOnce
)
{
ASSERT_LT
(
num_extra_observe_calls
(
)
history_size
(
)
)
;
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
num_extra_observe_calls
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
}
absl
:
:
optional
<
int
>
prediction_interval
=
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_TRUE
(
prediction_interval
.
has_value
(
)
)
;
for
(
int
i
=
0
;
i
<
history_size
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kDetected
kNotPredicted
)
absl
:
:
nullopt
)
;
}
}
INSTANTIATE_TEST_SUITE_P
(
ClippingPredictionEvalTest
ClippingPredictorEvaluatorPredictionIntervalParameterization
:
:
testing
:
:
Combine
(
:
:
testing
:
:
Values
(
1
3
5
)
:
:
testing
:
:
Values
(
7
11
)
)
)
;
TEST
(
ClippingPredictionEvalTest
NoFalsePositivesAfterRemoveExpectations
)
{
constexpr
int
kHistorySize
=
2
;
ClippingPredictorEvaluator
e1
(
kHistorySize
)
;
e1
.
Observe
(
kNotDetected
kPredicted
)
;
ASSERT_EQ
(
e1
.
counters
(
)
.
true_negatives
1
)
;
e1
.
Observe
(
kNotDetected
kNotPredicted
)
;
e1
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
e1
.
counters
(
)
.
true_positives
0
)
;
EXPECT_EQ
(
e1
.
counters
(
)
.
true_negatives
1
)
;
EXPECT_EQ
(
e1
.
counters
(
)
.
false_positives
1
)
;
EXPECT_EQ
(
e1
.
counters
(
)
.
false_negatives
0
)
;
ClippingPredictorEvaluator
e2
(
kHistorySize
)
;
e2
.
Observe
(
kNotDetected
kPredicted
)
;
ASSERT_EQ
(
e2
.
counters
(
)
.
true_negatives
1
)
;
e2
.
RemoveExpectations
(
)
;
e2
.
Observe
(
kNotDetected
kNotPredicted
)
;
e2
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
e2
.
counters
(
)
.
true_positives
0
)
;
EXPECT_EQ
(
e2
.
counters
(
)
.
true_negatives
3
)
;
EXPECT_EQ
(
e2
.
counters
(
)
.
false_positives
0
)
;
EXPECT_EQ
(
e2
.
counters
(
)
.
false_negatives
0
)
;
}
class
ComputeClippingPredictionMetricsParameterization
:
public
:
:
testing
:
:
TestWithParam
<
int
>
{
protected
:
int
true_negatives
(
)
const
{
return
GetParam
(
)
;
}
}
;
TEST_P
(
ComputeClippingPredictionMetricsParameterization
NoMetricsWithUndefinedPrecision
)
{
EXPECT_EQ
(
ComputeClippingPredictionMetrics
(
{
0
true_negatives
(
)
0
0
}
)
absl
:
:
nullopt
)
;
EXPECT_EQ
(
ComputeClippingPredictionMetrics
(
{
0
true_negatives
(
)
0
1
}
)
absl
:
:
nullopt
)
;
}
TEST_P
(
ComputeClippingPredictionMetricsParameterization
NoMetricsWithUndefinedRecall
)
{
EXPECT_EQ
(
ComputeClippingPredictionMetrics
(
{
0
true_negatives
(
)
0
0
}
)
absl
:
:
nullopt
)
;
EXPECT_EQ
(
ComputeClippingPredictionMetrics
(
{
0
true_negatives
(
)
1
0
}
)
absl
:
:
nullopt
)
;
}
TEST_P
(
ComputeClippingPredictionMetricsParameterization
NoMetricsWithUndefinedF1Score
)
{
EXPECT_EQ
(
ComputeClippingPredictionMetrics
(
{
0
true_negatives
(
)
1
1
}
)
absl
:
:
nullopt
)
;
}
TEST_P
(
ComputeClippingPredictionMetricsParameterization
HighestPrecision
)
{
EXPECT_THAT
(
ComputeClippingPredictionMetrics
(
{
1
true_negatives
(
)
0
1
}
)
Optional
(
Field
(
&
ClippingPredictionMetrics
:
:
precision
Eq
(
1
.
0f
)
)
)
)
;
}
TEST_P
(
ComputeClippingPredictionMetricsParameterization
HighestRecall
)
{
EXPECT_THAT
(
ComputeClippingPredictionMetrics
(
{
1
true_negatives
(
)
1
0
}
)
Optional
(
Field
(
&
ClippingPredictionMetrics
:
:
recall
Eq
(
1
.
0f
)
)
)
)
;
}
TEST_P
(
ComputeClippingPredictionMetricsParameterization
PrecisionAndRecall50Percent
)
{
absl
:
:
optional
<
ClippingPredictionMetrics
>
metrics
=
ComputeClippingPredictionMetrics
(
{
42
true_negatives
(
)
42
42
}
)
;
ASSERT_TRUE
(
metrics
.
has_value
(
)
)
;
EXPECT_EQ
(
metrics
-
>
precision
0
.
5f
)
;
EXPECT_EQ
(
metrics
-
>
recall
0
.
5f
)
;
EXPECT_EQ
(
metrics
-
>
f1_score
0
.
5f
)
;
}
TEST_P
(
ComputeClippingPredictionMetricsParameterization
HighestPrecisionRecallF1Score
)
{
absl
:
:
optional
<
ClippingPredictionMetrics
>
metrics
=
ComputeClippingPredictionMetrics
(
{
123
true_negatives
(
)
0
0
}
)
;
ASSERT_TRUE
(
metrics
.
has_value
(
)
)
;
EXPECT_EQ
(
metrics
-
>
precision
1
.
0f
)
;
EXPECT_EQ
(
metrics
-
>
recall
1
.
0f
)
;
EXPECT_EQ
(
metrics
-
>
f1_score
1
.
0f
)
;
}
TEST_P
(
ComputeClippingPredictionMetricsParameterization
PrecisionLowerThanRecall
)
{
absl
:
:
optional
<
ClippingPredictionMetrics
>
metrics
=
ComputeClippingPredictionMetrics
(
{
1
true_negatives
(
)
8
1
}
)
;
ASSERT_TRUE
(
metrics
.
has_value
(
)
)
;
EXPECT_LT
(
metrics
-
>
precision
metrics
-
>
recall
)
;
}
TEST_P
(
ComputeClippingPredictionMetricsParameterization
PrecisionGreaterThanRecall
)
{
absl
:
:
optional
<
ClippingPredictionMetrics
>
metrics
=
ComputeClippingPredictionMetrics
(
{
1
true_negatives
(
)
1
8
}
)
;
ASSERT_TRUE
(
metrics
.
has_value
(
)
)
;
EXPECT_GT
(
metrics
-
>
precision
metrics
-
>
recall
)
;
}
TEST_P
(
ComputeClippingPredictionMetricsParameterization
SameF1Score
)
{
absl
:
:
optional
<
ClippingPredictionMetrics
>
m1
=
ComputeClippingPredictionMetrics
(
{
1
true_negatives
(
)
8
1
}
)
;
absl
:
:
optional
<
ClippingPredictionMetrics
>
m2
=
ComputeClippingPredictionMetrics
(
{
1
true_negatives
(
)
1
8
}
)
;
ASSERT_TRUE
(
m1
.
has_value
(
)
)
;
ASSERT_TRUE
(
m2
.
has_value
(
)
)
;
ASSERT_EQ
(
m1
-
>
precision
m2
-
>
recall
)
;
ASSERT_EQ
(
m1
-
>
recall
m2
-
>
precision
)
;
EXPECT_EQ
(
m1
-
>
f1_score
m2
-
>
f1_score
)
;
}
INSTANTIATE_TEST_SUITE_P
(
ClippingPredictionEvalTest
ComputeClippingPredictionMetricsParameterization
:
:
testing
:
:
Values
(
0
1
11
)
)
;
}
}
