#
include
"
modules
/
audio_processing
/
agc
/
clipping_predictor_evaluator
.
h
"
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
tuple
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_conversions
.
h
"
#
include
"
rtc_base
/
random
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
using
testing
:
:
Eq
;
using
testing
:
:
Optional
;
constexpr
bool
kDetected
=
true
;
constexpr
bool
kNotDetected
=
false
;
constexpr
bool
kPredicted
=
true
;
constexpr
bool
kNotPredicted
=
false
;
int
SumTrueFalsePositivesNegatives
(
const
ClippingPredictorEvaluator
&
evaluator
)
{
return
evaluator
.
true_positives
(
)
+
evaluator
.
true_negatives
(
)
+
evaluator
.
false_positives
(
)
+
evaluator
.
false_negatives
(
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
Init
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
class
ClippingPredictorEvaluatorParameterization
:
public
:
:
testing
:
:
TestWithParam
<
std
:
:
tuple
<
int
int
>
>
{
protected
:
uint64_t
seed
(
)
const
{
return
rtc
:
:
checked_cast
<
uint64_t
>
(
std
:
:
get
<
0
>
(
GetParam
(
)
)
)
;
}
int
history_size
(
)
const
{
return
std
:
:
get
<
1
>
(
GetParam
(
)
)
;
}
}
;
TEST_P
(
ClippingPredictorEvaluatorParameterization
AtMostOneMetricChanges
)
{
constexpr
int
kNumCalls
=
123
;
Random
random_generator
(
seed
(
)
)
;
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
kNumCalls
;
+
+
i
)
{
SCOPED_TRACE
(
i
)
;
const
int
last_tp
=
evaluator
.
true_positives
(
)
;
const
int
last_tn
=
evaluator
.
true_negatives
(
)
;
const
int
last_fp
=
evaluator
.
false_positives
(
)
;
const
int
last_fn
=
evaluator
.
false_negatives
(
)
;
bool
clipping_detected
=
random_generator
.
Rand
<
bool
>
(
)
;
bool
clipping_predicted
=
random_generator
.
Rand
<
bool
>
(
)
;
evaluator
.
Observe
(
clipping_detected
clipping_predicted
)
;
int
num_changes
=
0
;
num_changes
+
=
last_tp
=
=
evaluator
.
true_positives
(
)
?
0
:
1
;
num_changes
+
=
last_tn
=
=
evaluator
.
true_negatives
(
)
?
0
:
1
;
num_changes
+
=
last_fp
=
=
evaluator
.
false_positives
(
)
?
0
:
1
;
num_changes
+
=
last_fn
=
=
evaluator
.
false_negatives
(
)
?
0
:
1
;
EXPECT_GE
(
num_changes
0
)
;
EXPECT_LE
(
num_changes
1
)
;
}
}
TEST_P
(
ClippingPredictorEvaluatorParameterization
MetricsAreWeaklyMonotonic
)
{
constexpr
int
kNumCalls
=
123
;
Random
random_generator
(
seed
(
)
)
;
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
kNumCalls
;
+
+
i
)
{
SCOPED_TRACE
(
i
)
;
const
int
last_tp
=
evaluator
.
true_positives
(
)
;
const
int
last_tn
=
evaluator
.
true_negatives
(
)
;
const
int
last_fp
=
evaluator
.
false_positives
(
)
;
const
int
last_fn
=
evaluator
.
false_negatives
(
)
;
bool
clipping_detected
=
random_generator
.
Rand
<
bool
>
(
)
;
bool
clipping_predicted
=
random_generator
.
Rand
<
bool
>
(
)
;
evaluator
.
Observe
(
clipping_detected
clipping_predicted
)
;
EXPECT_GE
(
evaluator
.
true_positives
(
)
last_tp
)
;
EXPECT_GE
(
evaluator
.
true_negatives
(
)
last_tn
)
;
EXPECT_GE
(
evaluator
.
false_positives
(
)
last_fp
)
;
EXPECT_GE
(
evaluator
.
false_negatives
(
)
last_fn
)
;
}
}
TEST_P
(
ClippingPredictorEvaluatorParameterization
BoundedMetricsGrowth
)
{
constexpr
int
kNumCalls
=
123
;
Random
random_generator
(
seed
(
)
)
;
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
kNumCalls
;
+
+
i
)
{
SCOPED_TRACE
(
i
)
;
const
int
last_tp
=
evaluator
.
true_positives
(
)
;
const
int
last_tn
=
evaluator
.
true_negatives
(
)
;
const
int
last_fp
=
evaluator
.
false_positives
(
)
;
const
int
last_fn
=
evaluator
.
false_negatives
(
)
;
bool
clipping_detected
=
random_generator
.
Rand
<
bool
>
(
)
;
bool
clipping_predicted
=
random_generator
.
Rand
<
bool
>
(
)
;
evaluator
.
Observe
(
clipping_detected
clipping_predicted
)
;
EXPECT_LE
(
evaluator
.
true_positives
(
)
-
last_tp
history_size
(
)
+
1
)
;
EXPECT_LE
(
evaluator
.
true_negatives
(
)
-
last_tn
1
)
;
EXPECT_LE
(
evaluator
.
false_positives
(
)
-
last_fp
1
)
;
EXPECT_LE
(
evaluator
.
false_negatives
(
)
-
last_fn
1
)
;
}
}
TEST_P
(
ClippingPredictorEvaluatorParameterization
PredictionIntervalIfAndOnlyIfTruePositives
)
{
constexpr
int
kNumCalls
=
123
;
Random
random_generator
(
seed
(
)
)
;
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
kNumCalls
;
+
+
i
)
{
SCOPED_TRACE
(
i
)
;
const
int
last_tp
=
evaluator
.
true_positives
(
)
;
bool
clipping_detected
=
random_generator
.
Rand
<
bool
>
(
)
;
bool
clipping_predicted
=
random_generator
.
Rand
<
bool
>
(
)
;
absl
:
:
optional
<
int
>
prediction_interval
=
evaluator
.
Observe
(
clipping_detected
clipping_predicted
)
;
if
(
evaluator
.
true_positives
(
)
=
=
last_tp
)
{
EXPECT_FALSE
(
prediction_interval
.
has_value
(
)
)
;
}
else
{
EXPECT_TRUE
(
prediction_interval
.
has_value
(
)
)
;
}
}
}
INSTANTIATE_TEST_SUITE_P
(
ClippingPredictorEvaluatorTest
ClippingPredictorEvaluatorParameterization
:
:
testing
:
:
Combine
(
:
:
testing
:
:
Values
(
4
8
15
16
23
42
)
:
:
testing
:
:
Values
(
1
10
21
)
)
)
;
TEST
(
ClippingPredictorEvaluatorTest
OneTruePositiveAfterInit
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kDetected
kPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
OneFalseNegativeAfterInit
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
OneFalsePositiveAfterInit
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
OneTrueNegativeAfterInit
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
NeverDetectedAndNotPredicted
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
4
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
DetectedButNotPredicted
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
3
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedOnceAndNeverDetectedBeforeDeadline
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedOnceButDetectedAfterDeadline
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
1
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedOnceAndThenImmediatelyDetected
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedOnceAndDetectedBeforeDeadline
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedOnceAndDetectedAtDeadline
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedOnceAndDetectedMultipleTimes
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
1
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
1
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
1
)
;
EXPECT_EQ
(
SumTrueFalsePositivesNegatives
(
evaluator
)
2
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedMultipleTimesAndDetectedOnceAfterDeadline
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
1
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
1
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
3
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedMultipleTimesAndDetectedOnce
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
3
)
;
const
int
true_negatives
=
evaluator
.
true_negatives
(
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
true_negatives
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedMultipleTimesAndDetectedMultipleTimes
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
3
)
;
const
int
true_negatives
=
evaluator
.
true_negatives
(
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
true_negatives
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedMultipleTimesAndAllDetected
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
3
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
TEST
(
ClippingPredictorEvaluatorTest
PredictedMultipleTimesWithGapAndAllDetected
)
{
ClippingPredictorEvaluator
evaluator
(
3
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kNotDetected
kPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
evaluator
.
Observe
(
kDetected
kNotPredicted
)
;
EXPECT_EQ
(
evaluator
.
true_positives
(
)
2
)
;
EXPECT_EQ
(
evaluator
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
evaluator
.
false_negatives
(
)
0
)
;
}
class
ClippingPredictorEvaluatorPredictionIntervalParameterization
:
public
:
:
testing
:
:
TestWithParam
<
std
:
:
tuple
<
int
int
>
>
{
protected
:
int
num_extra_observe_calls
(
)
const
{
return
std
:
:
get
<
0
>
(
GetParam
(
)
)
;
}
int
history_size
(
)
const
{
return
std
:
:
get
<
1
>
(
GetParam
(
)
)
;
}
}
;
TEST_P
(
ClippingPredictorEvaluatorPredictionIntervalParameterization
MinimumPredictionInterval
)
{
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
num_extra_observe_calls
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
absl
:
:
nullopt
)
;
}
absl
:
:
optional
<
int
>
prediction_interval
=
evaluator
.
Observe
(
kDetected
kPredicted
)
;
EXPECT_THAT
(
prediction_interval
Optional
(
Eq
(
0
)
)
)
;
}
TEST_P
(
ClippingPredictorEvaluatorPredictionIntervalParameterization
IntermediatePredictionInterval
)
{
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
num_extra_observe_calls
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
absl
:
:
nullopt
)
;
}
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
absl
:
:
optional
<
int
>
prediction_interval
=
evaluator
.
Observe
(
kDetected
kPredicted
)
;
EXPECT_THAT
(
prediction_interval
Optional
(
Eq
(
3
)
)
)
;
}
TEST_P
(
ClippingPredictorEvaluatorPredictionIntervalParameterization
MaximumPredictionInterval
)
{
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
num_extra_observe_calls
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kNotPredicted
)
absl
:
:
nullopt
)
;
}
for
(
int
i
=
0
;
i
<
history_size
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
}
absl
:
:
optional
<
int
>
prediction_interval
=
evaluator
.
Observe
(
kDetected
kPredicted
)
;
EXPECT_THAT
(
prediction_interval
Optional
(
Eq
(
history_size
(
)
)
)
)
;
}
TEST_P
(
ClippingPredictorEvaluatorPredictionIntervalParameterization
PredictionIntervalReturnedOnce
)
{
ASSERT_LT
(
num_extra_observe_calls
(
)
history_size
(
)
)
;
ClippingPredictorEvaluator
evaluator
(
history_size
(
)
)
;
for
(
int
i
=
0
;
i
<
num_extra_observe_calls
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kNotDetected
kPredicted
)
absl
:
:
nullopt
)
;
}
absl
:
:
optional
<
int
>
prediction_interval
=
evaluator
.
Observe
(
kDetected
kPredicted
)
;
EXPECT_TRUE
(
prediction_interval
.
has_value
(
)
)
;
for
(
int
i
=
0
;
i
<
history_size
(
)
;
+
+
i
)
{
EXPECT_EQ
(
evaluator
.
Observe
(
kDetected
kNotPredicted
)
absl
:
:
nullopt
)
;
}
}
INSTANTIATE_TEST_SUITE_P
(
ClippingPredictorEvaluatorTest
ClippingPredictorEvaluatorPredictionIntervalParameterization
:
:
testing
:
:
Combine
(
:
:
testing
:
:
Values
(
0
3
5
)
:
:
testing
:
:
Values
(
7
11
)
)
)
;
TEST
(
ClippingPredictorEvaluatorTest
NoFalsePositivesAfterReset
)
{
constexpr
int
kHistorySize
=
2
;
ClippingPredictorEvaluator
with_reset
(
kHistorySize
)
;
with_reset
.
Observe
(
kNotDetected
kPredicted
)
;
with_reset
.
Reset
(
)
;
with_reset
.
Observe
(
kNotDetected
kNotPredicted
)
;
with_reset
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
with_reset
.
true_positives
(
)
0
)
;
EXPECT_EQ
(
with_reset
.
true_negatives
(
)
2
)
;
EXPECT_EQ
(
with_reset
.
false_positives
(
)
0
)
;
EXPECT_EQ
(
with_reset
.
false_negatives
(
)
0
)
;
ClippingPredictorEvaluator
no_reset
(
kHistorySize
)
;
no_reset
.
Observe
(
kNotDetected
kPredicted
)
;
no_reset
.
Observe
(
kNotDetected
kNotPredicted
)
;
no_reset
.
Observe
(
kNotDetected
kNotPredicted
)
;
EXPECT_EQ
(
no_reset
.
true_positives
(
)
0
)
;
EXPECT_EQ
(
no_reset
.
true_negatives
(
)
0
)
;
EXPECT_EQ
(
no_reset
.
false_positives
(
)
1
)
;
EXPECT_EQ
(
no_reset
.
false_negatives
(
)
0
)
;
}
}
}
