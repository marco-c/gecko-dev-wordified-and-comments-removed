#
ifndef
MODULES_AUDIO_PROCESSING_AGC_CLIPPING_PREDICTOR_H_
#
define
MODULES_AUDIO_PROCESSING_AGC_CLIPPING_PREDICTOR_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_frame_view
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
namespace
webrtc
{
class
ClippingPredictor
{
public
:
virtual
~
ClippingPredictor
(
)
=
default
;
virtual
void
Reset
(
)
=
0
;
virtual
absl
:
:
optional
<
int
>
EstimateClippedLevelStep
(
int
channel
int
level
int
default_step
int
min_mic_level
int
max_mic_level
)
const
=
0
;
virtual
void
Process
(
const
AudioFrameView
<
const
float
>
&
frame
)
=
0
;
}
;
std
:
:
unique_ptr
<
ClippingPredictor
>
CreateClippingEventPredictor
(
int
num_channels
const
AudioProcessing
:
:
Config
:
:
GainController1
:
:
AnalogGainController
:
:
ClippingPredictor
&
config
)
;
std
:
:
unique_ptr
<
ClippingPredictor
>
CreateFixedStepClippingPeakPredictor
(
int
num_channels
const
AudioProcessing
:
:
Config
:
:
GainController1
:
:
AnalogGainController
:
:
ClippingPredictor
&
config
)
;
std
:
:
unique_ptr
<
ClippingPredictor
>
CreateAdaptiveStepClippingPeakPredictor
(
int
num_channels
const
AudioProcessing
:
:
Config
:
:
GainController1
:
:
AnalogGainController
:
:
ClippingPredictor
&
config
)
;
}
#
endif
