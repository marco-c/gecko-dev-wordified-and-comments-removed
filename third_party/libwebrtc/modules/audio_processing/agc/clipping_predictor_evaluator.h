#
ifndef
MODULES_AUDIO_PROCESSING_AGC_CLIPPING_PREDICTOR_EVALUATOR_H_
#
define
MODULES_AUDIO_PROCESSING_AGC_CLIPPING_PREDICTOR_EVALUATOR_H_
#
include
<
vector
>
#
include
"
absl
/
types
/
optional
.
h
"
namespace
webrtc
{
class
ClippingPredictorEvaluator
{
public
:
explicit
ClippingPredictorEvaluator
(
int
history_size
)
;
ClippingPredictorEvaluator
(
const
ClippingPredictorEvaluator
&
)
=
delete
;
ClippingPredictorEvaluator
&
operator
=
(
const
ClippingPredictorEvaluator
&
)
=
delete
;
~
ClippingPredictorEvaluator
(
)
;
absl
:
:
optional
<
int
>
Observe
(
bool
clipping_detected
bool
clipping_predicted
)
;
void
Reset
(
)
;
int
true_positives
(
)
const
{
return
true_positives_
;
}
int
true_negatives
(
)
const
{
return
true_negatives_
;
}
int
false_positives
(
)
const
{
return
false_positives_
;
}
int
false_negatives
(
)
const
{
return
false_negatives_
;
}
private
:
const
int
history_size_
;
struct
ExpectedDetection
{
int
ttl
;
bool
detected
;
}
;
const
int
ring_buffer_capacity_
;
std
:
:
vector
<
ExpectedDetection
>
ring_buffer_
;
int
ring_buffer_tail_
;
int
ring_buffer_size_
;
void
Push
(
ExpectedDetection
expected_detection
)
;
void
DecreaseTimesToLive
(
)
;
absl
:
:
optional
<
int
>
FindEarliestPredictionInterval
(
)
const
;
int
MarkExpectedDetectionAsDetected
(
)
;
bool
HasExpiredUnmatchedExpectedDetection
(
)
const
;
int
true_positives_
;
int
true_negatives_
;
int
false_positives_
;
int
false_negatives_
;
}
;
}
#
endif
