#
ifndef
MODULES_AUDIO_PROCESSING_AGC_ANALOG_GAIN_STATS_REPORTER_H_
#
define
MODULES_AUDIO_PROCESSING_AGC_ANALOG_GAIN_STATS_REPORTER_H_
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
rtc_base
/
gtest_prod_util
.
h
"
namespace
webrtc
{
class
AnalogGainStatsReporter
{
public
:
AnalogGainStatsReporter
(
)
;
AnalogGainStatsReporter
(
const
AnalogGainStatsReporter
&
)
=
delete
;
AnalogGainStatsReporter
operator
=
(
const
AnalogGainStatsReporter
&
)
=
delete
;
~
AnalogGainStatsReporter
(
)
;
void
UpdateStatistics
(
int
analog_mic_level
)
;
private
:
FRIEND_TEST_ALL_PREFIXES
(
AnalogGainStatsReporterTest
CheckLevelUpdateStatsForEmptyStats
)
;
FRIEND_TEST_ALL_PREFIXES
(
AnalogGainStatsReporterTest
CheckLevelUpdateStatsAfterNoGainChange
)
;
FRIEND_TEST_ALL_PREFIXES
(
AnalogGainStatsReporterTest
CheckLevelUpdateStatsAfterGainIncrease
)
;
FRIEND_TEST_ALL_PREFIXES
(
AnalogGainStatsReporterTest
CheckLevelUpdateStatsAfterGainDecrease
)
;
FRIEND_TEST_ALL_PREFIXES
(
AnalogGainStatsReporterTest
CheckLevelUpdateStatsAfterReset
)
;
struct
LevelUpdateStats
{
int
num_decreases
=
0
;
int
num_increases
=
0
;
int
sum_decreases
=
0
;
int
sum_increases
=
0
;
}
level_update_stats_
;
const
LevelUpdateStats
level_update_stats
(
)
const
{
return
level_update_stats_
;
}
void
LogLevelUpdateStats
(
)
const
;
int
log_level_update_stats_counter_
=
0
;
absl
:
:
optional
<
int
>
previous_analog_mic_level_
=
absl
:
:
nullopt
;
}
;
}
#
endif
