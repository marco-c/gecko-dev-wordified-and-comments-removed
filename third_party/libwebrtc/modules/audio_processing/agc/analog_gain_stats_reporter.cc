#
include
"
modules
/
audio_processing
/
agc
/
analog_gain_stats_reporter
.
h
"
#
include
<
cmath
>
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_minmax
.
h
"
#
include
"
system_wrappers
/
include
/
metrics
.
h
"
namespace
webrtc
{
namespace
{
constexpr
int
kFramesIn60Seconds
=
6000
;
constexpr
int
kMinGain
=
0
;
constexpr
int
kMaxGain
=
255
;
constexpr
int
kMaxUpdate
=
kMaxGain
-
kMinGain
;
float
ComputeAverageUpdate
(
int
sum_updates
int
num_updates
)
{
RTC_DCHECK_GE
(
sum_updates
0
)
;
RTC_DCHECK_LE
(
sum_updates
kMaxUpdate
*
kFramesIn60Seconds
)
;
RTC_DCHECK_GE
(
num_updates
0
)
;
RTC_DCHECK_LE
(
num_updates
kFramesIn60Seconds
)
;
if
(
num_updates
=
=
0
)
{
return
0
.
0f
;
}
return
std
:
:
round
(
static_cast
<
float
>
(
sum_updates
)
/
static_cast
<
float
>
(
num_updates
)
)
;
}
}
AnalogGainStatsReporter
:
:
AnalogGainStatsReporter
(
)
=
default
;
AnalogGainStatsReporter
:
:
~
AnalogGainStatsReporter
(
)
=
default
;
void
AnalogGainStatsReporter
:
:
UpdateStatistics
(
int
analog_mic_level
)
{
RTC_DCHECK_GE
(
analog_mic_level
kMinGain
)
;
RTC_DCHECK_LE
(
analog_mic_level
kMaxGain
)
;
if
(
previous_analog_mic_level_
.
has_value
(
)
&
&
analog_mic_level
!
=
previous_analog_mic_level_
.
value
(
)
)
{
const
int
level_change
=
analog_mic_level
-
previous_analog_mic_level_
.
value
(
)
;
if
(
level_change
<
0
)
{
+
+
level_update_stats_
.
num_decreases
;
level_update_stats_
.
sum_decreases
-
=
level_change
;
}
else
{
+
+
level_update_stats_
.
num_increases
;
level_update_stats_
.
sum_increases
+
=
level_change
;
}
}
if
(
+
+
log_level_update_stats_counter_
>
=
kFramesIn60Seconds
)
{
LogLevelUpdateStats
(
)
;
level_update_stats_
=
{
}
;
log_level_update_stats_counter_
=
0
;
}
previous_analog_mic_level_
=
analog_mic_level
;
}
void
AnalogGainStatsReporter
:
:
LogLevelUpdateStats
(
)
const
{
const
float
average_decrease
=
ComputeAverageUpdate
(
level_update_stats_
.
sum_decreases
level_update_stats_
.
num_decreases
)
;
const
float
average_increase
=
ComputeAverageUpdate
(
level_update_stats_
.
sum_increases
level_update_stats_
.
num_increases
)
;
const
int
num_updates
=
level_update_stats_
.
num_decreases
+
level_update_stats_
.
num_increases
;
const
float
average_update
=
ComputeAverageUpdate
(
level_update_stats_
.
sum_decreases
+
level_update_stats_
.
sum_increases
num_updates
)
;
RTC_DLOG
(
LS_INFO
)
<
<
"
Analog
gain
update
rate
:
"
<
<
"
num_updates
=
"
<
<
num_updates
<
<
"
num_decreases
=
"
<
<
level_update_stats_
.
num_decreases
<
<
"
num_increases
=
"
<
<
level_update_stats_
.
num_increases
;
RTC_DLOG
(
LS_INFO
)
<
<
"
Analog
gain
update
average
:
"
<
<
"
average_update
=
"
<
<
average_update
<
<
"
average_decrease
=
"
<
<
average_decrease
<
<
"
average_increase
=
"
<
<
average_increase
;
RTC_HISTOGRAM_COUNTS_LINEAR
(
"
WebRTC
.
Audio
.
ApmAnalogGainDecreaseRate
"
level_update_stats_
.
num_decreases
1
kFramesIn60Seconds
50
)
;
if
(
level_update_stats_
.
num_decreases
>
0
)
{
RTC_HISTOGRAM_COUNTS_LINEAR
(
"
WebRTC
.
Audio
.
ApmAnalogGainDecreaseAverage
"
average_decrease
1
kMaxUpdate
50
)
;
}
RTC_HISTOGRAM_COUNTS_LINEAR
(
"
WebRTC
.
Audio
.
ApmAnalogGainIncreaseRate
"
level_update_stats_
.
num_increases
1
kFramesIn60Seconds
50
)
;
if
(
level_update_stats_
.
num_increases
>
0
)
{
RTC_HISTOGRAM_COUNTS_LINEAR
(
"
WebRTC
.
Audio
.
ApmAnalogGainIncreaseAverage
"
average_increase
1
kMaxUpdate
50
)
;
}
RTC_HISTOGRAM_COUNTS_LINEAR
(
"
WebRTC
.
Audio
.
ApmAnalogGainUpdateRate
"
num_updates
1
kFramesIn60Seconds
50
)
;
if
(
num_updates
>
0
)
{
RTC_HISTOGRAM_COUNTS_LINEAR
(
"
WebRTC
.
Audio
.
ApmAnalogGainUpdateAverage
"
average_update
1
kMaxUpdate
50
)
;
}
}
}
