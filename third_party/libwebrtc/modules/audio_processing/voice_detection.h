#
ifndef
MODULES_AUDIO_PROCESSING_VOICE_DETECTION_H_
#
define
MODULES_AUDIO_PROCESSING_VOICE_DETECTION_H_
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
namespace
webrtc
{
class
AudioBuffer
;
class
VoiceDetection
{
public
:
enum
Likelihood
{
kVeryLowLikelihood
kLowLikelihood
kModerateLikelihood
kHighLikelihood
}
;
VoiceDetection
(
int
sample_rate_hz
Likelihood
likelihood
)
;
~
VoiceDetection
(
)
;
VoiceDetection
(
VoiceDetection
&
)
=
delete
;
VoiceDetection
&
operator
=
(
VoiceDetection
&
)
=
delete
;
bool
ProcessCaptureAudio
(
AudioBuffer
*
audio
)
;
Likelihood
likelihood
(
)
const
{
return
likelihood_
;
}
private
:
class
Vad
;
int
sample_rate_hz_
;
size_t
frame_size_samples_
;
Likelihood
likelihood_
;
std
:
:
unique_ptr
<
Vad
>
vad_
;
}
;
}
#
endif
