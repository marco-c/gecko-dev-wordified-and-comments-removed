#
ifndef
MODULES_AUDIO_PROCESSING_GAIN_CONTROLLER2_H_
#
define
MODULES_AUDIO_PROCESSING_GAIN_CONTROLLER2_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
modules
/
audio_processing
/
agc2
/
adaptive_agc
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
gain_applier
.
h
"
#
include
"
modules
/
audio_processing
/
agc2
/
limiter
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
namespace
webrtc
{
class
ApmDataDumper
;
class
AudioBuffer
;
class
GainController2
{
public
:
GainController2
(
)
;
~
GainController2
(
)
;
void
Initialize
(
int
sample_rate_hz
)
;
void
Process
(
AudioBuffer
*
audio
)
;
void
NotifyAnalogLevel
(
int
level
)
;
void
ApplyConfig
(
const
AudioProcessing
:
:
Config
:
:
GainController2
&
config
)
;
static
bool
Validate
(
const
AudioProcessing
:
:
Config
:
:
GainController2
&
config
)
;
private
:
static
int
instance_count_
;
std
:
:
unique_ptr
<
ApmDataDumper
>
data_dumper_
;
AudioProcessing
:
:
Config
:
:
GainController2
config_
;
GainApplier
gain_applier_
;
std
:
:
unique_ptr
<
AdaptiveAgc
>
adaptive_agc_
;
Limiter
limiter_
;
int
analog_level_
=
-
1
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
GainController2
)
;
}
;
}
#
endif
