#
ifndef
MODULES_AUDIO_PROCESSING_AEC3_SPECTRUM_BUFFER_H_
#
define
MODULES_AUDIO_PROCESSING_AEC3_SPECTRUM_BUFFER_H_
#
include
<
stddef
.
h
>
#
include
<
array
>
#
include
<
vector
>
#
include
"
modules
/
audio_processing
/
aec3
/
aec3_common
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
struct
SpectrumBuffer
{
SpectrumBuffer
(
size_t
size
size_t
num_channels
)
;
~
SpectrumBuffer
(
)
;
int
IncIndex
(
int
index
)
const
{
RTC_DCHECK_EQ
(
buffer
.
size
(
)
static_cast
<
size_t
>
(
size
)
)
;
return
index
<
size
-
1
?
index
+
1
:
0
;
}
int
DecIndex
(
int
index
)
const
{
RTC_DCHECK_EQ
(
buffer
.
size
(
)
static_cast
<
size_t
>
(
size
)
)
;
return
index
>
0
?
index
-
1
:
size
-
1
;
}
int
OffsetIndex
(
int
index
int
offset
)
const
{
RTC_DCHECK_GE
(
size
offset
)
;
RTC_DCHECK_EQ
(
buffer
.
size
(
)
static_cast
<
size_t
>
(
size
)
)
;
RTC_DCHECK_GE
(
size
+
index
+
offset
0
)
;
return
(
size
+
index
+
offset
)
%
size
;
}
void
UpdateWriteIndex
(
int
offset
)
{
write
=
OffsetIndex
(
write
offset
)
;
}
void
IncWriteIndex
(
)
{
write
=
IncIndex
(
write
)
;
}
void
DecWriteIndex
(
)
{
write
=
DecIndex
(
write
)
;
}
void
UpdateReadIndex
(
int
offset
)
{
read
=
OffsetIndex
(
read
offset
)
;
}
void
IncReadIndex
(
)
{
read
=
IncIndex
(
read
)
;
}
void
DecReadIndex
(
)
{
read
=
DecIndex
(
read
)
;
}
const
int
size
;
std
:
:
vector
<
std
:
:
vector
<
std
:
:
array
<
float
kFftLengthBy2Plus1
>
>
>
buffer
;
int
write
=
0
;
int
read
=
0
;
}
;
}
#
endif
