#
ifndef
MODULES_AUDIO_PROCESSING_AEC3_BLOCK_PROCESSOR_H_
#
define
MODULES_AUDIO_PROCESSING_AEC3_BLOCK_PROCESSOR_H_
#
include
<
stddef
.
h
>
#
include
<
memory
>
#
include
"
api
/
audio
/
echo_canceller3_config
.
h
"
#
include
"
api
/
audio
/
echo_control
.
h
"
#
include
"
api
/
environment
/
environment
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
block
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
echo_remover
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
render_delay_buffer
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
render_delay_controller
.
h
"
namespace
webrtc
{
class
BlockProcessor
{
public
:
static
std
:
:
unique_ptr
<
BlockProcessor
>
Create
(
const
Environment
&
env
const
EchoCanceller3Config
&
config
int
sample_rate_hz
size_t
num_render_channels
size_t
num_capture_channels
)
;
static
std
:
:
unique_ptr
<
BlockProcessor
>
Create
(
const
Environment
&
env
const
EchoCanceller3Config
&
config
int
sample_rate_hz
size_t
num_render_channels
size_t
num_capture_channels
std
:
:
unique_ptr
<
RenderDelayBuffer
>
render_buffer
)
;
static
std
:
:
unique_ptr
<
BlockProcessor
>
Create
(
const
EchoCanceller3Config
&
config
int
sample_rate_hz
size_t
num_render_channels
size_t
num_capture_channels
std
:
:
unique_ptr
<
RenderDelayBuffer
>
render_buffer
std
:
:
unique_ptr
<
RenderDelayController
>
delay_controller
std
:
:
unique_ptr
<
EchoRemover
>
echo_remover
)
;
virtual
~
BlockProcessor
(
)
=
default
;
virtual
void
GetMetrics
(
EchoControl
:
:
Metrics
*
metrics
)
const
=
0
;
virtual
void
SetAudioBufferDelay
(
int
delay_ms
)
=
0
;
virtual
void
ProcessCapture
(
bool
echo_path_gain_change
bool
capture_signal_saturation
Block
*
linear_output
Block
*
capture_block
)
=
0
;
virtual
void
BufferRender
(
const
Block
&
render_block
)
=
0
;
virtual
void
UpdateEchoLeakageStatus
(
bool
leakage_detected
)
=
0
;
virtual
void
SetCaptureOutputUsage
(
bool
capture_output_used
)
=
0
;
}
;
}
#
endif
