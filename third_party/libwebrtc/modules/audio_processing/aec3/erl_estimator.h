#
ifndef
MODULES_AUDIO_PROCESSING_AEC3_ERL_ESTIMATOR_H_
#
define
MODULES_AUDIO_PROCESSING_AEC3_ERL_ESTIMATOR_H_
#
include
<
stddef
.
h
>
#
include
<
array
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
aec3_common
.
h
"
namespace
webrtc
{
class
ErlEstimator
{
public
:
explicit
ErlEstimator
(
size_t
startup_phase_length_blocks_
)
;
~
ErlEstimator
(
)
;
ErlEstimator
(
const
ErlEstimator
&
)
=
delete
;
ErlEstimator
&
operator
=
(
const
ErlEstimator
&
)
=
delete
;
void
Reset
(
)
;
void
Update
(
const
std
:
:
vector
<
bool
>
&
converged_filters
rtc
:
:
ArrayView
<
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
>
render_spectra
rtc
:
:
ArrayView
<
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
>
capture_spectra
)
;
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
&
Erl
(
)
const
{
return
erl_
;
}
float
ErlTimeDomain
(
)
const
{
return
erl_time_domain_
;
}
private
:
const
size_t
startup_phase_length_blocks__
;
std
:
:
array
<
float
kFftLengthBy2Plus1
>
erl_
;
std
:
:
array
<
int
kFftLengthBy2Minus1
>
hold_counters_
;
float
erl_time_domain_
;
int
hold_counter_time_domain_
;
size_t
blocks_since_reset_
=
0
;
}
;
}
#
endif
