#
include
"
modules
/
audio_processing
/
aec3
/
matched_filter_lag_aggregator
.
h
"
#
include
<
algorithm
>
#
include
<
cstddef
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
audio
/
echo_canceller3_config
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
delay_estimate
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
matched_filter
.
h
"
#
include
"
modules
/
audio_processing
/
logging
/
apm_data_dumper
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
size_t
kNumLagsBeforeDetection
=
26
;
}
TEST
(
MatchedFilterLagAggregator
LagEstimateInvarianceRequiredForAggregatedLag
)
{
ApmDataDumper
data_dumper
(
0
)
;
EchoCanceller3Config
config
;
MatchedFilterLagAggregator
aggregator
(
&
data_dumper
100
config
.
delay
)
;
std
:
:
optional
<
DelayEstimate
>
aggregated_lag
;
for
(
size_t
k
=
0
;
k
<
kNumLagsBeforeDetection
;
+
+
k
)
{
aggregated_lag
=
aggregator
.
Aggregate
(
MatchedFilter
:
:
LagEstimate
(
10
10
)
)
;
}
EXPECT_TRUE
(
aggregated_lag
)
;
for
(
size_t
k
=
0
;
k
<
kNumLagsBeforeDetection
*
100
;
+
+
k
)
{
aggregated_lag
=
aggregator
.
Aggregate
(
MatchedFilter
:
:
LagEstimate
(
k
%
100
k
%
100
)
)
;
}
EXPECT_FALSE
(
aggregated_lag
)
;
for
(
size_t
k
=
0
;
k
<
kNumLagsBeforeDetection
*
100
;
+
+
k
)
{
aggregated_lag
=
aggregator
.
Aggregate
(
MatchedFilter
:
:
LagEstimate
(
k
%
100
k
%
100
)
)
;
EXPECT_FALSE
(
aggregated_lag
)
;
}
}
TEST
(
MatchedFilterLagAggregator
DISABLED_LagEstimateUpdatesRequiredForAggregatedLag
)
{
constexpr
size_t
kLag
=
5
;
ApmDataDumper
data_dumper
(
0
)
;
EchoCanceller3Config
config
;
MatchedFilterLagAggregator
aggregator
(
&
data_dumper
kLag
config
.
delay
)
;
for
(
size_t
k
=
0
;
k
<
kNumLagsBeforeDetection
*
10
;
+
+
k
)
{
std
:
:
optional
<
DelayEstimate
>
aggregated_lag
=
aggregator
.
Aggregate
(
MatchedFilter
:
:
LagEstimate
(
kLag
kLag
)
)
;
EXPECT_FALSE
(
aggregated_lag
)
;
EXPECT_EQ
(
kLag
aggregated_lag
-
>
delay
)
;
}
}
TEST
(
MatchedFilterLagAggregator
DISABLED_PersistentAggregatedLag
)
{
constexpr
size_t
kLag1
=
5
;
constexpr
size_t
kLag2
=
10
;
ApmDataDumper
data_dumper
(
0
)
;
EchoCanceller3Config
config
;
std
:
:
vector
<
MatchedFilter
:
:
LagEstimate
>
lag_estimates
(
1
)
;
MatchedFilterLagAggregator
aggregator
(
&
data_dumper
std
:
:
max
(
kLag1
kLag2
)
config
.
delay
)
;
std
:
:
optional
<
DelayEstimate
>
aggregated_lag
;
for
(
size_t
k
=
0
;
k
<
kNumLagsBeforeDetection
;
+
+
k
)
{
aggregated_lag
=
aggregator
.
Aggregate
(
MatchedFilter
:
:
LagEstimate
(
kLag1
kLag1
)
)
;
}
EXPECT_TRUE
(
aggregated_lag
)
;
EXPECT_EQ
(
kLag1
aggregated_lag
-
>
delay
)
;
for
(
size_t
k
=
0
;
k
<
kNumLagsBeforeDetection
*
40
;
+
+
k
)
{
aggregated_lag
=
aggregator
.
Aggregate
(
MatchedFilter
:
:
LagEstimate
(
kLag2
kLag2
)
)
;
EXPECT_TRUE
(
aggregated_lag
)
;
EXPECT_EQ
(
kLag1
aggregated_lag
-
>
delay
)
;
}
}
#
if
RTC_DCHECK_IS_ON
&
&
GTEST_HAS_DEATH_TEST
&
&
!
defined
(
WEBRTC_ANDROID
)
TEST
(
MatchedFilterLagAggregatorDeathTest
NullDataDumper
)
{
EchoCanceller3Config
config
;
EXPECT_DEATH
(
MatchedFilterLagAggregator
(
nullptr
10
config
.
delay
)
"
"
)
;
}
#
endif
}
