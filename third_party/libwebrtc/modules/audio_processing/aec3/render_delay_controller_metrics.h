#
ifndef
MODULES_AUDIO_PROCESSING_AEC3_RENDER_DELAY_CONTROLLER_METRICS_H_
#
define
MODULES_AUDIO_PROCESSING_AEC3_RENDER_DELAY_CONTROLLER_METRICS_H_
#
include
<
stddef
.
h
>
#
include
"
absl
/
types
/
optional
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
clockdrift_detector
.
h
"
namespace
webrtc
{
class
RenderDelayControllerMetrics
{
public
:
RenderDelayControllerMetrics
(
)
;
RenderDelayControllerMetrics
(
const
RenderDelayControllerMetrics
&
)
=
delete
;
RenderDelayControllerMetrics
&
operator
=
(
const
RenderDelayControllerMetrics
&
)
=
delete
;
void
Update
(
absl
:
:
optional
<
size_t
>
delay_samples
size_t
buffer_delay_blocks
absl
:
:
optional
<
int
>
skew_shift_blocks
ClockdriftDetector
:
:
Level
clockdrift
)
;
bool
MetricsReported
(
)
{
return
metrics_reported_
;
}
private
:
void
ResetMetrics
(
)
;
size_t
delay_blocks_
=
0
;
int
reliable_delay_estimate_counter_
=
0
;
int
delay_change_counter_
=
0
;
int
call_counter_
=
0
;
int
skew_report_timer_
=
0
;
int
initial_call_counter_
=
0
;
bool
metrics_reported_
=
false
;
bool
initial_update
=
true
;
int
skew_shift_count_
=
0
;
}
;
}
#
endif
