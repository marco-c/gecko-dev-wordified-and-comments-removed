#
ifndef
MODULES_AUDIO_PROCESSING_AEC3_MATCHED_FILTER_H_
#
define
MODULES_AUDIO_PROCESSING_AEC3_MATCHED_FILTER_H_
#
include
<
stddef
.
h
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
aec3_common
.
h
"
#
include
"
rtc_base
/
system
/
arch
.
h
"
namespace
webrtc
{
class
ApmDataDumper
;
struct
DownsampledRenderBuffer
;
namespace
aec3
{
#
if
defined
(
WEBRTC_HAS_NEON
)
void
MatchedFilterCore_NEON
(
size_t
x_start_index
float
x2_sum_threshold
float
smoothing
rtc
:
:
ArrayView
<
const
float
>
x
rtc
:
:
ArrayView
<
const
float
>
y
rtc
:
:
ArrayView
<
float
>
h
bool
*
filters_updated
float
*
error_sum
)
;
#
endif
#
if
defined
(
WEBRTC_ARCH_X86_FAMILY
)
void
MatchedFilterCore_SSE2
(
size_t
x_start_index
float
x2_sum_threshold
float
smoothing
rtc
:
:
ArrayView
<
const
float
>
x
rtc
:
:
ArrayView
<
const
float
>
y
rtc
:
:
ArrayView
<
float
>
h
bool
*
filters_updated
float
*
error_sum
)
;
void
MatchedFilterCore_AVX2
(
size_t
x_start_index
float
x2_sum_threshold
float
smoothing
rtc
:
:
ArrayView
<
const
float
>
x
rtc
:
:
ArrayView
<
const
float
>
y
rtc
:
:
ArrayView
<
float
>
h
bool
*
filters_updated
float
*
error_sum
)
;
#
endif
void
MatchedFilterCore
(
size_t
x_start_index
float
x2_sum_threshold
float
smoothing
rtc
:
:
ArrayView
<
const
float
>
x
rtc
:
:
ArrayView
<
const
float
>
y
rtc
:
:
ArrayView
<
float
>
h
bool
*
filters_updated
float
*
error_sum
)
;
}
class
MatchedFilter
{
public
:
struct
LagEstimate
{
LagEstimate
(
)
=
default
;
LagEstimate
(
float
accuracy
bool
reliable
size_t
lag
bool
updated
)
:
accuracy
(
accuracy
)
reliable
(
reliable
)
lag
(
lag
)
updated
(
updated
)
{
}
float
accuracy
=
0
.
f
;
bool
reliable
=
false
;
size_t
lag
=
0
;
bool
updated
=
false
;
}
;
MatchedFilter
(
ApmDataDumper
*
data_dumper
Aec3Optimization
optimization
size_t
sub_block_size
size_t
window_size_sub_blocks
int
num_matched_filters
size_t
alignment_shift_sub_blocks
float
excitation_limit
float
smoothing_fast
float
smoothing_slow
float
matching_filter_threshold
)
;
MatchedFilter
(
)
=
delete
;
MatchedFilter
(
const
MatchedFilter
&
)
=
delete
;
MatchedFilter
&
operator
=
(
const
MatchedFilter
&
)
=
delete
;
~
MatchedFilter
(
)
;
void
Update
(
const
DownsampledRenderBuffer
&
render_buffer
rtc
:
:
ArrayView
<
const
float
>
capture
bool
use_slow_smoothing
)
;
void
Reset
(
)
;
rtc
:
:
ArrayView
<
const
MatchedFilter
:
:
LagEstimate
>
GetLagEstimates
(
)
const
{
return
lag_estimates_
;
}
size_t
GetMaxFilterLag
(
)
const
{
return
filters_
.
size
(
)
*
filter_intra_lag_shift_
+
filters_
[
0
]
.
size
(
)
;
}
void
LogFilterProperties
(
int
sample_rate_hz
size_t
shift
size_t
downsampling_factor
)
const
;
private
:
ApmDataDumper
*
const
data_dumper_
;
const
Aec3Optimization
optimization_
;
const
size_t
sub_block_size_
;
const
size_t
filter_intra_lag_shift_
;
std
:
:
vector
<
std
:
:
vector
<
float
>
>
filters_
;
std
:
:
vector
<
LagEstimate
>
lag_estimates_
;
std
:
:
vector
<
size_t
>
filters_offsets_
;
const
float
excitation_limit_
;
const
float
smoothing_fast_
;
const
float
smoothing_slow_
;
const
float
matching_filter_threshold_
;
}
;
}
#
endif
