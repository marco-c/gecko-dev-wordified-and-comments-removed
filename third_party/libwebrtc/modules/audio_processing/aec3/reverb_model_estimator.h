#
ifndef
MODULES_AUDIO_PROCESSING_AEC3_REVERB_MODEL_ESTIMATOR_H_
#
define
MODULES_AUDIO_PROCESSING_AEC3_REVERB_MODEL_ESTIMATOR_H_
#
include
<
array
>
#
include
<
memory
>
#
include
<
optional
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
audio
/
echo_canceller3_config
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
aec3_common
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
reverb_decay_estimator
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
reverb_frequency_response
.
h
"
namespace
webrtc
{
class
ApmDataDumper
;
class
ReverbModelEstimator
{
public
:
ReverbModelEstimator
(
const
EchoCanceller3Config
&
config
size_t
num_capture_channels
)
;
~
ReverbModelEstimator
(
)
;
void
Update
(
rtc
:
:
ArrayView
<
const
std
:
:
vector
<
float
>
>
impulse_responses
rtc
:
:
ArrayView
<
const
std
:
:
vector
<
std
:
:
array
<
float
kFftLengthBy2Plus1
>
>
>
frequency_responses
rtc
:
:
ArrayView
<
const
std
:
:
optional
<
float
>
>
linear_filter_qualities
rtc
:
:
ArrayView
<
const
int
>
filter_delays_blocks
const
std
:
:
vector
<
bool
>
&
usable_linear_estimates
bool
stationary_block
)
;
float
ReverbDecay
(
bool
mild
)
const
{
return
reverb_decay_estimators_
[
0
]
-
>
Decay
(
mild
)
;
}
rtc
:
:
ArrayView
<
const
float
>
GetReverbFrequencyResponse
(
)
const
{
return
reverb_frequency_responses_
[
0
]
.
FrequencyResponse
(
)
;
}
void
Dump
(
ApmDataDumper
*
data_dumper
)
const
{
reverb_decay_estimators_
[
0
]
-
>
Dump
(
data_dumper
)
;
}
private
:
std
:
:
vector
<
std
:
:
unique_ptr
<
ReverbDecayEstimator
>
>
reverb_decay_estimators_
;
std
:
:
vector
<
ReverbFrequencyResponse
>
reverb_frequency_responses_
;
}
;
}
#
endif
