#
ifndef
MODULES_AUDIO_PROCESSING_AEC3_SUPPRESSION_FILTER_H_
#
define
MODULES_AUDIO_PROCESSING_AEC3_SUPPRESSION_FILTER_H_
#
include
<
array
>
#
include
<
vector
>
#
include
"
modules
/
audio_processing
/
aec3
/
aec3_common
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
aec3_fft
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
fft_data
.
h
"
#
include
"
rtc_base
/
constructor_magic
.
h
"
namespace
webrtc
{
class
SuppressionFilter
{
public
:
SuppressionFilter
(
Aec3Optimization
optimization
int
sample_rate_hz
size_t
num_capture_channels_
)
;
~
SuppressionFilter
(
)
;
void
ApplyGain
(
rtc
:
:
ArrayView
<
const
FftData
>
comfort_noise
rtc
:
:
ArrayView
<
const
FftData
>
comfort_noise_high_bands
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
&
suppression_gain
float
high_bands_gain
rtc
:
:
ArrayView
<
const
FftData
>
E_lowest_band
std
:
:
vector
<
std
:
:
vector
<
std
:
:
vector
<
float
>
>
>
*
e
)
;
private
:
const
Aec3Optimization
optimization_
;
const
int
sample_rate_hz_
;
const
size_t
num_capture_channels_
;
const
Aec3Fft
fft_
;
std
:
:
vector
<
std
:
:
vector
<
std
:
:
array
<
float
kFftLengthBy2
>
>
>
e_output_old_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
SuppressionFilter
)
;
}
;
}
#
endif
