#
include
"
modules
/
audio_processing
/
aec3
/
config_selector
.
h
"
#
include
<
optional
>
#
include
<
tuple
>
#
include
"
api
/
audio
/
echo_canceller3_config
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
class
ConfigSelectorChannelsAndContentDetection
:
public
:
:
testing
:
:
Test
public
:
:
testing
:
:
WithParamInterface
<
std
:
:
tuple
<
int
bool
>
>
{
}
;
INSTANTIATE_TEST_SUITE_P
(
ConfigSelectorMultiParameters
ConfigSelectorChannelsAndContentDetection
:
:
testing
:
:
Combine
(
:
:
testing
:
:
Values
(
1
2
8
)
:
:
testing
:
:
Values
(
false
true
)
)
)
;
class
ConfigSelectorChannels
:
public
:
:
testing
:
:
Test
public
:
:
testing
:
:
WithParamInterface
<
int
>
{
}
;
INSTANTIATE_TEST_SUITE_P
(
ConfigSelectorMultiParameters
ConfigSelectorChannels
:
:
testing
:
:
Values
(
1
2
8
)
)
;
TEST_P
(
ConfigSelectorChannelsAndContentDetection
MonoConfigIsSelectedWhenNoMultiChannelConfigPresent
)
{
const
auto
[
num_channels
detect_stereo_content
]
=
GetParam
(
)
;
EchoCanceller3Config
config
;
config
.
multi_channel
.
detect_stereo_content
=
detect_stereo_content
;
std
:
:
optional
<
EchoCanceller3Config
>
multichannel_config
;
config
.
delay
.
default_delay
=
config
.
delay
.
default_delay
+
1
;
const
size_t
custom_delay_value_in_config
=
config
.
delay
.
default_delay
;
ConfigSelector
cs
(
config
multichannel_config
num_channels
)
;
EXPECT_EQ
(
cs
.
active_config
(
)
.
delay
.
default_delay
custom_delay_value_in_config
)
;
cs
.
Update
(
false
)
;
EXPECT_EQ
(
cs
.
active_config
(
)
.
delay
.
default_delay
custom_delay_value_in_config
)
;
cs
.
Update
(
true
)
;
EXPECT_EQ
(
cs
.
active_config
(
)
.
delay
.
default_delay
custom_delay_value_in_config
)
;
}
TEST_P
(
ConfigSelectorChannelsAndContentDetection
CorrectInitialConfigIsSelected
)
{
const
auto
[
num_channels
detect_stereo_content
]
=
GetParam
(
)
;
EchoCanceller3Config
config
;
config
.
multi_channel
.
detect_stereo_content
=
detect_stereo_content
;
std
:
:
optional
<
EchoCanceller3Config
>
multichannel_config
=
config
;
config
.
delay
.
default_delay
+
=
1
;
const
size_t
custom_delay_value_in_config
=
config
.
delay
.
default_delay
;
multichannel_config
-
>
delay
.
default_delay
+
=
2
;
const
size_t
custom_delay_value_in_multichannel_config
=
multichannel_config
-
>
delay
.
default_delay
;
ConfigSelector
cs
(
config
multichannel_config
num_channels
)
;
if
(
num_channels
=
=
1
|
|
detect_stereo_content
)
{
EXPECT_EQ
(
cs
.
active_config
(
)
.
delay
.
default_delay
custom_delay_value_in_config
)
;
}
else
{
EXPECT_EQ
(
cs
.
active_config
(
)
.
delay
.
default_delay
custom_delay_value_in_multichannel_config
)
;
}
}
TEST_P
(
ConfigSelectorChannels
CorrectConfigUpdateBehavior
)
{
const
int
num_channels
=
GetParam
(
)
;
EchoCanceller3Config
config
;
config
.
multi_channel
.
detect_stereo_content
=
true
;
std
:
:
optional
<
EchoCanceller3Config
>
multichannel_config
=
config
;
config
.
delay
.
default_delay
+
=
1
;
const
size_t
custom_delay_value_in_config
=
config
.
delay
.
default_delay
;
multichannel_config
-
>
delay
.
default_delay
+
=
2
;
const
size_t
custom_delay_value_in_multichannel_config
=
multichannel_config
-
>
delay
.
default_delay
;
ConfigSelector
cs
(
config
multichannel_config
num_channels
)
;
cs
.
Update
(
false
)
;
EXPECT_EQ
(
cs
.
active_config
(
)
.
delay
.
default_delay
custom_delay_value_in_config
)
;
if
(
num_channels
=
=
1
)
{
cs
.
Update
(
false
)
;
EXPECT_EQ
(
cs
.
active_config
(
)
.
delay
.
default_delay
custom_delay_value_in_config
)
;
}
else
{
cs
.
Update
(
true
)
;
EXPECT_EQ
(
cs
.
active_config
(
)
.
delay
.
default_delay
custom_delay_value_in_multichannel_config
)
;
}
}
}
