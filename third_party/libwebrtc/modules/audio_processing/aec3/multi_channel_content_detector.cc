#
include
"
modules
/
audio_processing
/
aec3
/
multi_channel_content_detector
.
h
"
#
include
<
cmath
>
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
constexpr
int
kNumFramesPerSecond
=
100
;
bool
HasStereoContent
(
const
std
:
:
vector
<
std
:
:
vector
<
std
:
:
vector
<
float
>
>
>
&
frame
float
detection_threshold
)
{
if
(
frame
[
0
]
.
size
(
)
<
2
)
{
return
false
;
}
for
(
size_t
band
=
0
;
band
<
frame
.
size
(
)
;
+
+
band
)
{
for
(
size_t
k
=
0
;
k
<
frame
[
band
]
[
0
]
.
size
(
)
;
+
+
k
)
{
if
(
std
:
:
fabs
(
frame
[
band
]
[
0
]
[
k
]
-
frame
[
band
]
[
1
]
[
k
]
)
>
detection_threshold
)
{
return
true
;
}
}
}
return
false
;
}
}
MultiChannelContentDetector
:
:
MultiChannelContentDetector
(
bool
detect_stereo_content
int
num_render_input_channels
float
detection_threshold
int
stereo_detection_timeout_threshold_seconds
float
stereo_detection_hysteresis_seconds
)
:
detect_stereo_content_
(
detect_stereo_content
)
detection_threshold_
(
detection_threshold
)
detection_timeout_threshold_frames_
(
stereo_detection_timeout_threshold_seconds
>
0
?
absl
:
:
make_optional
(
stereo_detection_timeout_threshold_seconds
*
kNumFramesPerSecond
)
:
absl
:
:
nullopt
)
stereo_detection_hysteresis_frames_
(
static_cast
<
int
>
(
stereo_detection_hysteresis_seconds
*
kNumFramesPerSecond
)
)
persistent_multichannel_content_detected_
(
!
detect_stereo_content
&
&
num_render_input_channels
>
1
)
{
}
bool
MultiChannelContentDetector
:
:
UpdateDetection
(
const
std
:
:
vector
<
std
:
:
vector
<
std
:
:
vector
<
float
>
>
>
&
frame
)
{
if
(
!
detect_stereo_content_
)
{
RTC_DCHECK_EQ
(
frame
[
0
]
.
size
(
)
>
1
persistent_multichannel_content_detected_
)
;
return
false
;
}
const
bool
previous_persistent_multichannel_content_detected
=
persistent_multichannel_content_detected_
;
const
bool
stereo_detected_in_frame
=
HasStereoContent
(
frame
detection_threshold_
)
;
consecutive_frames_with_stereo_
=
stereo_detected_in_frame
?
consecutive_frames_with_stereo_
+
1
:
0
;
frames_since_stereo_detected_last_
=
stereo_detected_in_frame
?
0
:
frames_since_stereo_detected_last_
+
1
;
if
(
consecutive_frames_with_stereo_
>
stereo_detection_hysteresis_frames_
)
{
persistent_multichannel_content_detected_
=
true
;
}
if
(
detection_timeout_threshold_frames_
.
has_value
(
)
&
&
frames_since_stereo_detected_last_
>
=
*
detection_timeout_threshold_frames_
)
{
persistent_multichannel_content_detected_
=
false
;
}
temporary_multichannel_content_detected_
=
persistent_multichannel_content_detected_
?
false
:
stereo_detected_in_frame
;
return
previous_persistent_multichannel_content_detected
!
=
persistent_multichannel_content_detected_
;
}
}
