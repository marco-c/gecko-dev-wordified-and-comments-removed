#
ifndef
MODULES_AUDIO_PROCESSING_INCLUDE_AUDIO_FRAME_VIEW_H_
#
define
MODULES_AUDIO_PROCESSING_INCLUDE_AUDIO_FRAME_VIEW_H_
#
include
"
api
/
audio
/
audio_view
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
template
<
class
T
>
class
AudioFrameView
{
public
:
AudioFrameView
(
T
*
const
*
audio_samples
int
num_channels
int
channel_size
)
:
view_
(
num_channels
&
&
channel_size
?
audio_samples
:
nullptr
channel_size
num_channels
)
{
RTC_DCHECK_GE
(
view_
.
num_channels
(
)
0
)
;
RTC_DCHECK_GE
(
view_
.
samples_per_channel
(
)
0
)
;
}
template
<
class
U
>
AudioFrameView
(
AudioFrameView
<
U
>
other
)
:
view_
(
other
.
view
(
)
)
{
}
template
<
class
U
>
explicit
AudioFrameView
(
DeinterleavedView
<
U
>
view
)
:
view_
(
view
)
{
}
AudioFrameView
(
)
=
delete
;
int
num_channels
(
)
const
{
return
view_
.
num_channels
(
)
;
}
int
samples_per_channel
(
)
const
{
return
view_
.
samples_per_channel
(
)
;
}
MonoView
<
T
>
channel
(
int
idx
)
{
return
view_
[
idx
]
;
}
MonoView
<
const
T
>
channel
(
int
idx
)
const
{
return
view_
[
idx
]
;
}
MonoView
<
T
>
operator
[
]
(
int
idx
)
{
return
view_
[
idx
]
;
}
MonoView
<
const
T
>
operator
[
]
(
int
idx
)
const
{
return
view_
[
idx
]
;
}
DeinterleavedView
<
T
>
view
(
)
{
return
view_
;
}
DeinterleavedView
<
const
T
>
view
(
)
const
{
return
view_
;
}
private
:
DeinterleavedView
<
T
>
view_
;
}
;
}
#
endif
