#
ifndef
MODULES_AUDIO_PROCESSING_INCLUDE_AUDIO_FRAME_VIEW_H_
#
define
MODULES_AUDIO_PROCESSING_INCLUDE_AUDIO_FRAME_VIEW_H_
#
include
"
api
/
array_view
.
h
"
namespace
webrtc
{
template
<
class
T
>
class
AudioFrameView
{
public
:
AudioFrameView
(
T
*
const
*
audio_samples
size_t
num_channels
size_t
channel_size
)
:
audio_samples_
(
audio_samples
)
num_channels_
(
num_channels
)
channel_size_
(
channel_size
)
{
}
template
<
class
U
>
AudioFrameView
(
AudioFrameView
<
U
>
other
)
:
audio_samples_
(
other
.
data
(
)
)
num_channels_
(
other
.
num_channels
(
)
)
channel_size_
(
other
.
samples_per_channel
(
)
)
{
}
AudioFrameView
(
)
=
delete
;
size_t
num_channels
(
)
const
{
return
num_channels_
;
}
size_t
samples_per_channel
(
)
const
{
return
channel_size_
;
}
rtc
:
:
ArrayView
<
T
>
channel
(
size_t
idx
)
{
RTC_DCHECK_LE
(
0
idx
)
;
RTC_DCHECK_LE
(
idx
num_channels_
)
;
return
rtc
:
:
ArrayView
<
T
>
(
audio_samples_
[
idx
]
channel_size_
)
;
}
rtc
:
:
ArrayView
<
const
T
>
channel
(
size_t
idx
)
const
{
RTC_DCHECK_LE
(
0
idx
)
;
RTC_DCHECK_LE
(
idx
num_channels_
)
;
return
rtc
:
:
ArrayView
<
const
T
>
(
audio_samples_
[
idx
]
channel_size_
)
;
}
T
*
const
*
data
(
)
{
return
audio_samples_
;
}
private
:
T
*
const
*
audio_samples_
;
size_t
num_channels_
;
size_t
channel_size_
;
}
;
}
#
endif
