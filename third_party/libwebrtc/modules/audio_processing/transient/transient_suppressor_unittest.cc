#
include
"
modules
/
audio_processing
/
transient
/
transient_suppressor
.
h
"
#
include
"
modules
/
audio_processing
/
transient
/
common
.
h
"
#
include
"
modules
/
audio_processing
/
transient
/
transient_suppressor_impl
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
class
TransientSuppressorImplTest
:
public
:
:
testing
:
:
TestWithParam
<
TransientSuppressor
:
:
VadMode
>
{
}
;
TEST_P
(
TransientSuppressorImplTest
TypingDetectionLogicWorksAsExpectedForMono
)
{
static
const
int
kNumChannels
=
1
;
TransientSuppressorImpl
ts
(
GetParam
(
)
ts
:
:
kSampleRate16kHz
ts
:
:
kSampleRate16kHz
kNumChannels
)
;
EXPECT_FALSE
(
ts
.
detection_enabled_
)
;
ts
.
UpdateKeypress
(
true
)
;
EXPECT_TRUE
(
ts
.
detection_enabled_
)
;
for
(
int
time_ms
=
0
;
time_ms
<
3990
;
time_ms
+
=
ts
:
:
kChunkSizeMs
)
{
ts
.
UpdateKeypress
(
false
)
;
EXPECT_TRUE
(
ts
.
detection_enabled_
)
;
}
ts
.
UpdateKeypress
(
false
)
;
EXPECT_FALSE
(
ts
.
detection_enabled_
)
;
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
EXPECT_FALSE
(
ts
.
suppression_enabled_
)
;
ts
.
UpdateKeypress
(
true
)
;
EXPECT_TRUE
(
ts
.
detection_enabled_
)
;
EXPECT_FALSE
(
ts
.
suppression_enabled_
)
;
for
(
int
time_ms
=
0
;
time_ms
<
990
;
time_ms
+
=
ts
:
:
kChunkSizeMs
)
{
ts
.
UpdateKeypress
(
false
)
;
EXPECT_TRUE
(
ts
.
detection_enabled_
)
;
EXPECT_FALSE
(
ts
.
suppression_enabled_
)
;
}
ts
.
UpdateKeypress
(
false
)
;
}
ts
.
UpdateKeypress
(
true
)
;
EXPECT_FALSE
(
ts
.
suppression_enabled_
)
;
ts
.
UpdateKeypress
(
true
)
;
EXPECT_TRUE
(
ts
.
suppression_enabled_
)
;
for
(
int
i
=
0
;
i
<
100
;
+
+
i
)
{
for
(
int
time_ms
=
0
;
time_ms
<
1000
;
time_ms
+
=
ts
:
:
kChunkSizeMs
)
{
ts
.
UpdateKeypress
(
false
)
;
EXPECT_TRUE
(
ts
.
detection_enabled_
)
;
EXPECT_TRUE
(
ts
.
suppression_enabled_
)
;
}
ts
.
UpdateKeypress
(
true
)
;
EXPECT_TRUE
(
ts
.
detection_enabled_
)
;
EXPECT_TRUE
(
ts
.
suppression_enabled_
)
;
}
for
(
int
time_ms
=
0
;
time_ms
<
3990
;
time_ms
+
=
ts
:
:
kChunkSizeMs
)
{
ts
.
UpdateKeypress
(
false
)
;
EXPECT_TRUE
(
ts
.
detection_enabled_
)
;
EXPECT_TRUE
(
ts
.
suppression_enabled_
)
;
}
for
(
int
time_ms
=
0
;
time_ms
<
1000
;
time_ms
+
=
ts
:
:
kChunkSizeMs
)
{
ts
.
UpdateKeypress
(
false
)
;
EXPECT_FALSE
(
ts
.
detection_enabled_
)
;
EXPECT_FALSE
(
ts
.
suppression_enabled_
)
;
}
}
INSTANTIATE_TEST_SUITE_P
(
TransientSuppressorImplTest
:
:
testing
:
:
Values
(
TransientSuppressor
:
:
VadMode
:
:
kDefault
TransientSuppressor
:
:
VadMode
:
:
kRnnVad
TransientSuppressor
:
:
VadMode
:
:
kNoVad
)
)
;
}
