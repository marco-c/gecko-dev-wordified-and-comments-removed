#
include
"
modules
/
audio_processing
/
transient
/
transient_detector
.
h
"
#
include
<
memory
>
#
include
<
string
>
#
include
"
modules
/
audio_processing
/
transient
/
common
.
h
"
#
include
"
modules
/
audio_processing
/
transient
/
file_utils
.
h
"
#
include
"
rtc_base
/
strings
/
string_builder
.
h
"
#
include
"
rtc_base
/
system
/
file_wrapper
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
testsupport
/
file_utils
.
h
"
namespace
webrtc
{
static
const
int
kSampleRatesHz
[
]
=
{
ts
:
:
kSampleRate8kHz
ts
:
:
kSampleRate16kHz
ts
:
:
kSampleRate32kHz
ts
:
:
kSampleRate48kHz
}
;
static
const
size_t
kNumberOfSampleRates
=
sizeof
(
kSampleRatesHz
)
/
sizeof
(
*
kSampleRatesHz
)
;
#
if
defined
(
WEBRTC_IOS
)
TEST
(
TransientDetectorTest
DISABLED_CorrectnessBasedOnFiles
)
{
#
else
TEST
(
TransientDetectorTest
CorrectnessBasedOnFiles
)
{
#
endif
for
(
size_t
i
=
0
;
i
<
kNumberOfSampleRates
;
+
+
i
)
{
int
sample_rate_hz
=
kSampleRatesHz
[
i
]
;
rtc
:
:
StringBuilder
detect_file_name
;
detect_file_name
<
<
"
audio_processing
/
transient
/
detect
"
<
<
(
sample_rate_hz
/
1000
)
<
<
"
kHz
"
;
FileWrapper
detect_file
=
FileWrapper
:
:
OpenReadOnly
(
test
:
:
ResourcePath
(
detect_file_name
.
str
(
)
"
dat
"
)
)
;
bool
file_opened
=
detect_file
.
is_open
(
)
;
ASSERT_TRUE
(
file_opened
)
<
<
"
File
could
not
be
opened
.
\
n
"
<
<
detect_file_name
.
str
(
)
.
c_str
(
)
;
rtc
:
:
StringBuilder
audio_file_name
;
audio_file_name
<
<
"
audio_processing
/
transient
/
audio
"
<
<
(
sample_rate_hz
/
1000
)
<
<
"
kHz
"
;
FileWrapper
audio_file
=
FileWrapper
:
:
OpenReadOnly
(
test
:
:
ResourcePath
(
audio_file_name
.
str
(
)
"
pcm
"
)
)
;
TransientDetector
detector
(
sample_rate_hz
)
;
const
size_t
buffer_length
=
sample_rate_hz
*
ts
:
:
kChunkSizeMs
/
1000
;
std
:
:
unique_ptr
<
float
[
]
>
buffer
(
new
float
[
buffer_length
]
)
;
const
float
kTolerance
=
0
.
02f
;
size_t
frames_read
=
0
;
while
(
ReadInt16FromFileToFloatBuffer
(
&
audio_file
buffer_length
buffer
.
get
(
)
)
=
=
buffer_length
)
{
+
+
frames_read
;
float
detector_value
=
detector
.
Detect
(
buffer
.
get
(
)
buffer_length
NULL
0
)
;
double
file_value
;
ASSERT_EQ
(
1u
ReadDoubleBufferFromFile
(
&
detect_file
1
&
file_value
)
)
<
<
"
Detect
test
file
is
malformed
.
\
n
"
;
EXPECT_NEAR
(
file_value
detector_value
kTolerance
)
<
<
"
Frame
:
"
<
<
frames_read
;
}
detect_file
.
Close
(
)
;
audio_file
.
Close
(
)
;
}
}
}
