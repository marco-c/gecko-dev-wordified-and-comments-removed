#
ifndef
MODULES_AUDIO_PROCESSING_VAD_VAD_AUDIO_PROC_H_
#
define
MODULES_AUDIO_PROCESSING_VAD_VAD_AUDIO_PROC_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
"
modules
/
audio_processing
/
vad
/
common
.
h
"
namespace
webrtc
{
class
PoleZeroFilter
;
class
VadAudioProc
{
public
:
struct
PitchAnalysisStruct
;
struct
PreFiltBankstr
;
VadAudioProc
(
)
;
~
VadAudioProc
(
)
;
int
ExtractFeatures
(
const
int16_t
*
audio_frame
size_t
length
AudioFeatures
*
audio_features
)
;
static
constexpr
size_t
kDftSize
=
512
;
private
:
void
PitchAnalysis
(
double
*
pitch_gains
double
*
pitch_lags_hz
size_t
length
)
;
void
SubframeCorrelation
(
double
*
corr
size_t
length_corr
size_t
subframe_index
)
;
void
GetLpcPolynomials
(
double
*
lpc
size_t
length_lpc
)
;
void
FindFirstSpectralPeaks
(
double
*
f_peak
size_t
length_f_peak
)
;
void
Rms
(
double
*
rms
size_t
length_rms
)
;
void
ResetBuffer
(
)
;
static
constexpr
size_t
kNumPastSignalSamples
=
static_cast
<
size_t
>
(
kSampleRateHz
/
200
)
;
static
constexpr
int
kNoError
=
0
;
static
constexpr
size_t
kNum10msSubframes
=
3
;
static
constexpr
size_t
kNumSubframeSamples
=
static_cast
<
size_t
>
(
kSampleRateHz
/
100
)
;
static
constexpr
size_t
kNumSamplesToProcess
=
size_t
{
kNum10msSubframes
}
*
kNumSubframeSamples
;
static
constexpr
size_t
kBufferLength
=
size_t
{
kNumPastSignalSamples
}
+
kNumSamplesToProcess
;
static
constexpr
size_t
kIpLength
=
kDftSize
>
>
1
;
static
constexpr
size_t
kWLength
=
kDftSize
>
>
1
;
static
constexpr
size_t
kLpcOrder
=
16
;
size_t
ip_
[
kIpLength
]
;
float
w_fft_
[
kWLength
]
;
float
audio_buffer_
[
kBufferLength
]
;
size_t
num_buffer_samples_
;
double
log_old_gain_
;
double
old_lag_
;
std
:
:
unique_ptr
<
PitchAnalysisStruct
>
pitch_analysis_handle_
;
std
:
:
unique_ptr
<
PreFiltBankstr
>
pre_filter_handle_
;
std
:
:
unique_ptr
<
PoleZeroFilter
>
high_pass_filter_
;
}
;
}
#
endif
