#
include
"
modules
/
audio_processing
/
vad
/
standalone_vad
.
h
"
#
include
<
string
.
h
>
#
include
<
memory
>
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
testsupport
/
file_utils
.
h
"
namespace
webrtc
{
TEST
(
StandaloneVadTest
Api
)
{
std
:
:
unique_ptr
<
StandaloneVad
>
vad
(
StandaloneVad
:
:
Create
(
)
)
;
int16_t
data
[
kLength10Ms
]
=
{
0
}
;
EXPECT_EQ
(
-
1
vad
-
>
AddAudio
(
data
320
)
)
;
const
size_t
kMaxNumFrames
=
3
;
double
p
[
kMaxNumFrames
]
;
for
(
size_t
n
=
0
;
n
<
kMaxNumFrames
;
n
+
+
)
EXPECT_EQ
(
0
vad
-
>
AddAudio
(
data
kLength10Ms
)
)
;
EXPECT_EQ
(
-
1
vad
-
>
GetActivity
(
p
kMaxNumFrames
-
1
)
)
;
EXPECT_EQ
(
0
vad
-
>
GetActivity
(
p
kMaxNumFrames
)
)
;
EXPECT_EQ
(
-
1
vad
-
>
GetActivity
(
p
kMaxNumFrames
)
)
;
for
(
size_t
n
=
0
;
n
<
kMaxNumFrames
+
1
;
n
+
+
)
EXPECT_EQ
(
0
vad
-
>
AddAudio
(
data
kLength10Ms
)
)
;
EXPECT_EQ
(
0
vad
-
>
GetActivity
(
p
1
)
)
;
EXPECT_EQ
(
-
1
vad
-
>
set_mode
(
-
1
)
)
;
EXPECT_EQ
(
-
1
vad
-
>
set_mode
(
4
)
)
;
const
int
kMode
=
2
;
EXPECT_EQ
(
0
vad
-
>
set_mode
(
kMode
)
)
;
EXPECT_EQ
(
kMode
vad
-
>
mode
(
)
)
;
}
#
if
defined
(
WEBRTC_IOS
)
TEST
(
StandaloneVadTest
DISABLED_ActivityDetection
)
{
#
else
TEST
(
StandaloneVadTest
ActivityDetection
)
{
#
endif
std
:
:
unique_ptr
<
StandaloneVad
>
vad
(
StandaloneVad
:
:
Create
(
)
)
;
const
size_t
kDataLength
=
kLength10Ms
;
int16_t
data
[
kDataLength
]
=
{
0
}
;
FILE
*
pcm_file
=
fopen
(
test
:
:
ResourcePath
(
"
audio_processing
/
agc
/
agc_audio
"
"
pcm
"
)
.
c_str
(
)
"
rb
"
)
;
ASSERT_TRUE
(
pcm_file
!
=
nullptr
)
;
FILE
*
reference_file
=
fopen
(
test
:
:
ResourcePath
(
"
audio_processing
/
agc
/
agc_vad
"
"
dat
"
)
.
c_str
(
)
"
rb
"
)
;
ASSERT_TRUE
(
reference_file
!
=
nullptr
)
;
ASSERT_EQ
(
0
vad
-
>
set_mode
(
0
)
)
;
const
int
kNumVadFramesToProcess
=
3
;
int
num_frames
=
0
;
while
(
fread
(
data
sizeof
(
int16_t
)
kDataLength
pcm_file
)
=
=
kDataLength
)
{
vad
-
>
AddAudio
(
data
kDataLength
)
;
num_frames
+
+
;
if
(
num_frames
=
=
kNumVadFramesToProcess
)
{
num_frames
=
0
;
int
referece_activity
;
double
p
[
kNumVadFramesToProcess
]
;
EXPECT_EQ
(
1u
fread
(
&
referece_activity
sizeof
(
referece_activity
)
1
reference_file
)
)
;
int
activity
=
vad
-
>
GetActivity
(
p
kNumVadFramesToProcess
)
;
EXPECT_EQ
(
referece_activity
activity
)
;
if
(
activity
!
=
0
)
{
for
(
int
n
=
0
;
n
<
kNumVadFramesToProcess
;
n
+
+
)
EXPECT_EQ
(
0
.
5
p
[
n
]
)
;
}
else
{
for
(
int
n
=
0
;
n
<
kNumVadFramesToProcess
;
n
+
+
)
EXPECT_EQ
(
0
.
01
p
[
n
]
)
;
}
}
}
fclose
(
reference_file
)
;
fclose
(
pcm_file
)
;
}
}
