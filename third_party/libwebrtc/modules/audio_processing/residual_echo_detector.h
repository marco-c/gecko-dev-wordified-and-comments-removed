#
ifndef
MODULES_AUDIO_PROCESSING_RESIDUAL_ECHO_DETECTOR_H_
#
define
MODULES_AUDIO_PROCESSING_RESIDUAL_ECHO_DETECTOR_H_
#
include
<
atomic
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
api
/
audio
/
audio_processing
.
h
"
#
include
"
modules
/
audio_processing
/
echo_detector
/
circular_buffer
.
h
"
#
include
"
modules
/
audio_processing
/
echo_detector
/
mean_variance_estimator
.
h
"
#
include
"
modules
/
audio_processing
/
echo_detector
/
moving_max
.
h
"
#
include
"
modules
/
audio_processing
/
echo_detector
/
normalized_covariance_estimator
.
h
"
namespace
webrtc
{
class
ApmDataDumper
;
class
AudioBuffer
;
class
ResidualEchoDetector
:
public
EchoDetector
{
public
:
ResidualEchoDetector
(
)
;
~
ResidualEchoDetector
(
)
override
;
void
AnalyzeRenderAudio
(
ArrayView
<
const
float
>
render_audio
)
override
;
void
AnalyzeCaptureAudio
(
ArrayView
<
const
float
>
capture_audio
)
override
;
void
Initialize
(
int
capture_sample_rate_hz
int
num_capture_channels
int
render_sample_rate_hz
int
num_render_channels
)
override
;
void
SetReliabilityForTest
(
float
value
)
{
reliability_
=
value
;
}
EchoDetector
:
:
Metrics
GetMetrics
(
)
const
override
;
private
:
static
std
:
:
atomic
<
int
>
instance_count_
;
std
:
:
unique_ptr
<
ApmDataDumper
>
data_dumper_
;
bool
first_process_call_
=
true
;
CircularBuffer
render_buffer_
;
size_t
frames_since_zero_buffer_size_
=
0
;
std
:
:
vector
<
float
>
render_power_
;
std
:
:
vector
<
float
>
render_power_mean_
;
std
:
:
vector
<
float
>
render_power_std_dev_
;
std
:
:
vector
<
NormalizedCovarianceEstimator
>
covariances_
;
size_t
next_insertion_index_
=
0
;
MeanVarianceEstimator
render_statistics_
;
MeanVarianceEstimator
capture_statistics_
;
float
echo_likelihood_
=
0
.
f
;
float
reliability_
=
0
.
f
;
MovingMax
recent_likelihood_max_
;
int
log_counter_
=
0
;
}
;
}
#
endif
