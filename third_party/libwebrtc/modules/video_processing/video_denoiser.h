#
ifndef
MODULES_VIDEO_PROCESSING_VIDEO_DENOISER_H_
#
define
MODULES_VIDEO_PROCESSING_VIDEO_DENOISER_H_
#
include
<
memory
>
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video
/
video_frame_buffer
.
h
"
#
include
"
common_video
/
include
/
video_frame_buffer_pool
.
h
"
#
include
"
modules
/
video_processing
/
util
/
denoiser_filter
.
h
"
#
include
"
modules
/
video_processing
/
util
/
noise_estimation
.
h
"
#
include
"
modules
/
video_processing
/
util
/
skin_detection
.
h
"
namespace
webrtc
{
class
VideoDenoiser
{
public
:
explicit
VideoDenoiser
(
bool
runtime_cpu_detection
)
;
rtc
:
:
scoped_refptr
<
I420BufferInterface
>
DenoiseFrame
(
rtc
:
:
scoped_refptr
<
I420BufferInterface
>
frame
bool
noise_estimation_enabled
)
;
private
:
void
DenoiserReset
(
rtc
:
:
scoped_refptr
<
I420BufferInterface
>
frame
)
;
int
PositionCheck
(
int
mb_row
int
mb_col
int
noise_level
)
;
void
ReduceFalseDetection
(
const
std
:
:
unique_ptr
<
uint8_t
[
]
>
&
d_status
std
:
:
unique_ptr
<
uint8_t
[
]
>
*
d_status_red
int
noise_level
)
;
bool
IsTrailingBlock
(
const
std
:
:
unique_ptr
<
uint8_t
[
]
>
&
d_status
int
mb_row
int
mb_col
)
;
void
CopySrcOnMOB
(
const
uint8_t
*
y_src
int
stride_src
uint8_t
*
y_dst
int
stride_dst
)
;
void
CopyLumaOnMargin
(
const
uint8_t
*
y_src
int
stride_src
uint8_t
*
y_dst
int
stride_dst
)
;
int
width_
;
int
height_
;
int
mb_rows_
;
int
mb_cols_
;
CpuType
cpu_type_
;
std
:
:
unique_ptr
<
DenoiserFilter
>
filter_
;
std
:
:
unique_ptr
<
NoiseEstimation
>
ne_
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
moving_edge_
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
moving_object_
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
x_density_
;
std
:
:
unique_ptr
<
uint8_t
[
]
>
y_density_
;
std
:
:
unique_ptr
<
DenoiserDecision
[
]
>
mb_filter_decision_
;
VideoFrameBufferPool
buffer_pool_
;
rtc
:
:
scoped_refptr
<
I420BufferInterface
>
prev_buffer_
;
}
;
}
#
endif
