#
ifndef
MODULES_INCLUDE_MODULE_COMMON_TYPES_PUBLIC_H_
#
define
MODULES_INCLUDE_MODULE_COMMON_TYPES_PUBLIC_H_
#
include
<
limits
>
#
include
<
optional
>
namespace
webrtc
{
template
<
typename
U
>
inline
bool
IsNewer
(
U
value
U
prev_value
)
{
static_assert
(
!
std
:
:
numeric_limits
<
U
>
:
:
is_signed
"
U
must
be
unsigned
"
)
;
constexpr
U
kBreakpoint
=
(
std
:
:
numeric_limits
<
U
>
:
:
max
(
)
>
>
1
)
+
1
;
if
(
value
-
prev_value
=
=
kBreakpoint
)
{
return
value
>
prev_value
;
}
return
value
!
=
prev_value
&
&
static_cast
<
U
>
(
value
-
prev_value
)
<
kBreakpoint
;
}
inline
bool
IsNewerSequenceNumber
(
uint16_t
sequence_number
uint16_t
prev_sequence_number
)
{
return
IsNewer
(
sequence_number
prev_sequence_number
)
;
}
inline
bool
IsNewerTimestamp
(
uint32_t
timestamp
uint32_t
prev_timestamp
)
{
return
IsNewer
(
timestamp
prev_timestamp
)
;
}
inline
uint16_t
LatestSequenceNumber
(
uint16_t
sequence_number1
uint16_t
sequence_number2
)
{
return
IsNewerSequenceNumber
(
sequence_number1
sequence_number2
)
?
sequence_number1
:
sequence_number2
;
}
inline
uint32_t
LatestTimestamp
(
uint32_t
timestamp1
uint32_t
timestamp2
)
{
return
IsNewerTimestamp
(
timestamp1
timestamp2
)
?
timestamp1
:
timestamp2
;
}
}
#
endif
