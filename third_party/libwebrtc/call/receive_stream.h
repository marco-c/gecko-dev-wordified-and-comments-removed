#
ifndef
CALL_RECEIVE_STREAM_H_
#
define
CALL_RECEIVE_STREAM_H_
#
include
<
vector
>
#
include
"
api
/
crypto
/
frame_decryptor_interface
.
h
"
#
include
"
api
/
frame_transformer_interface
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
transport
/
rtp
/
rtp_source
.
h
"
namespace
webrtc
{
class
ReceiveStream
{
public
:
struct
RtpConfig
{
uint32_t
remote_ssrc
=
0
;
uint32_t
local_ssrc
=
0
;
bool
transport_cc
=
false
;
std
:
:
vector
<
RtpExtension
>
extensions
;
}
;
virtual
const
RtpConfig
&
rtp_config
(
)
const
=
0
;
protected
:
virtual
~
ReceiveStream
(
)
{
}
}
;
class
MediaReceiveStream
:
public
ReceiveStream
{
public
:
virtual
void
Start
(
)
=
0
;
virtual
void
Stop
(
)
=
0
;
virtual
void
SetDepacketizerToDecoderFrameTransformer
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
FrameTransformerInterface
>
frame_transformer
)
=
0
;
virtual
void
SetFrameDecryptor
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
FrameDecryptorInterface
>
frame_decryptor
)
=
0
;
virtual
std
:
:
vector
<
RtpSource
>
GetSources
(
)
const
=
0
;
}
;
}
#
endif
