#
ifndef
CALL_FLEXFEC_RECEIVE_STREAM_IMPL_H_
#
define
CALL_FLEXFEC_RECEIVE_STREAM_IMPL_H_
#
include
<
memory
>
#
include
"
call
/
flexfec_receive_stream
.
h
"
#
include
"
call
/
rtp_packet_sink_interface
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_rtcp_impl2
.
h
"
#
include
"
rtc_base
/
system
/
no_unique_address
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
FlexfecReceiver
;
class
ReceiveStatistics
;
class
RecoveredPacketReceiver
;
class
RtcpRttStats
;
class
RtpPacketReceived
;
class
RtpRtcp
;
class
RtpStreamReceiverControllerInterface
;
class
RtpStreamReceiverInterface
;
class
FlexfecReceiveStreamImpl
:
public
FlexfecReceiveStream
{
public
:
FlexfecReceiveStreamImpl
(
Clock
*
clock
const
Config
&
config
RecoveredPacketReceiver
*
recovered_packet_receiver
RtcpRttStats
*
rtt_stats
)
;
~
FlexfecReceiveStreamImpl
(
)
override
;
void
RegisterWithTransport
(
RtpStreamReceiverControllerInterface
*
receiver_controller
)
;
void
UnregisterFromTransport
(
)
;
void
OnRtpPacket
(
const
RtpPacketReceived
&
packet
)
override
;
Stats
GetStats
(
)
const
override
;
const
RtpConfig
&
rtp_config
(
)
const
override
{
return
config_
.
rtp
;
}
private
:
RTC_NO_UNIQUE_ADDRESS
SequenceChecker
packet_sequence_checker_
;
const
Config
config_
;
const
std
:
:
unique_ptr
<
FlexfecReceiver
>
receiver_
;
const
std
:
:
unique_ptr
<
ReceiveStatistics
>
rtp_receive_statistics_
;
const
std
:
:
unique_ptr
<
ModuleRtpRtcpImpl2
>
rtp_rtcp_
;
std
:
:
unique_ptr
<
RtpStreamReceiverInterface
>
rtp_stream_receiver_
RTC_GUARDED_BY
(
packet_sequence_checker_
)
;
}
;
}
#
endif
