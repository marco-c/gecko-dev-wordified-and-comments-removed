#
ifndef
CALL_CALL_H_
#
define
CALL_CALL_H_
#
include
<
cstdint
>
#
include
<
memory
>
#
include
<
string
>
#
include
"
absl
/
strings
/
string_view
.
h
"
#
include
"
api
/
adaptation
/
resource
.
h
"
#
include
"
api
/
fec_controller
.
h
"
#
include
"
api
/
field_trials_view
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
api
/
rtp_headers
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
task_queue
/
task_queue_base
.
h
"
#
include
"
api
/
transport
/
bitrate_settings
.
h
"
#
include
"
call
/
audio_receive_stream
.
h
"
#
include
"
call
/
audio_send_stream
.
h
"
#
include
"
call
/
call_basic_stats
.
h
"
#
include
"
call
/
call_config
.
h
"
#
include
"
call
/
flexfec_receive_stream
.
h
"
#
include
"
call
/
packet_receiver
.
h
"
#
include
"
call
/
payload_type
.
h
"
#
include
"
call
/
rtp_transport_controller_send_interface
.
h
"
#
include
"
call
/
video_receive_stream
.
h
"
#
include
"
call
/
video_send_stream
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
network
/
sent_packet
.
h
"
#
include
"
video
/
config
/
video_encoder_config
.
h
"
namespace
webrtc
{
class
Call
{
public
:
using
Stats
=
CallBasicStats
;
static
std
:
:
unique_ptr
<
Call
>
Create
(
CallConfig
config
)
;
virtual
AudioSendStream
*
CreateAudioSendStream
(
const
AudioSendStream
:
:
Config
&
config
)
=
0
;
virtual
void
DestroyAudioSendStream
(
AudioSendStream
*
send_stream
)
=
0
;
virtual
AudioReceiveStreamInterface
*
CreateAudioReceiveStream
(
const
AudioReceiveStreamInterface
:
:
Config
&
config
)
=
0
;
virtual
void
DestroyAudioReceiveStream
(
AudioReceiveStreamInterface
*
receive_stream
)
=
0
;
virtual
VideoSendStream
*
CreateVideoSendStream
(
VideoSendStream
:
:
Config
config
VideoEncoderConfig
encoder_config
)
=
0
;
virtual
VideoSendStream
*
CreateVideoSendStream
(
VideoSendStream
:
:
Config
config
VideoEncoderConfig
encoder_config
std
:
:
unique_ptr
<
FecController
>
fec_controller
)
;
virtual
void
DestroyVideoSendStream
(
VideoSendStream
*
send_stream
)
=
0
;
virtual
VideoReceiveStreamInterface
*
CreateVideoReceiveStream
(
VideoReceiveStreamInterface
:
:
Config
configuration
)
=
0
;
virtual
void
DestroyVideoReceiveStream
(
VideoReceiveStreamInterface
*
receive_stream
)
=
0
;
virtual
FlexfecReceiveStream
*
CreateFlexfecReceiveStream
(
const
FlexfecReceiveStream
:
:
Config
config
)
=
0
;
virtual
void
DestroyFlexfecReceiveStream
(
FlexfecReceiveStream
*
receive_stream
)
=
0
;
virtual
void
AddAdaptationResource
(
rtc
:
:
scoped_refptr
<
Resource
>
resource
)
=
0
;
virtual
PacketReceiver
*
Receiver
(
)
=
0
;
virtual
RtpTransportControllerSendInterface
*
GetTransportControllerSend
(
)
=
0
;
virtual
PayloadTypeSuggester
*
GetPayloadTypeSuggester
(
)
{
RTC_CHECK_NOTREACHED
(
)
;
return
nullptr
;
}
virtual
void
SetPayloadTypeSuggester
(
PayloadTypeSuggester
*
)
{
RTC_CHECK_NOTREACHED
(
)
;
}
virtual
Stats
GetStats
(
)
const
=
0
;
virtual
void
SignalChannelNetworkState
(
MediaType
media
NetworkState
state
)
=
0
;
virtual
void
OnAudioTransportOverheadChanged
(
int
transport_overhead_per_packet
)
=
0
;
virtual
void
OnLocalSsrcUpdated
(
AudioReceiveStreamInterface
&
stream
uint32_t
local_ssrc
)
=
0
;
virtual
void
OnLocalSsrcUpdated
(
VideoReceiveStreamInterface
&
stream
uint32_t
local_ssrc
)
=
0
;
virtual
void
OnLocalSsrcUpdated
(
FlexfecReceiveStream
&
stream
uint32_t
local_ssrc
)
=
0
;
virtual
void
OnUpdateSyncGroup
(
AudioReceiveStreamInterface
&
stream
absl
:
:
string_view
sync_group
)
=
0
;
virtual
void
OnSentPacket
(
const
rtc
:
:
SentPacket
&
sent_packet
)
=
0
;
virtual
void
SetClientBitratePreferences
(
const
BitrateSettings
&
preferences
)
=
0
;
virtual
void
EnableSendCongestionControlFeedbackAccordingToRfc8888
(
)
=
0
;
virtual
int
FeedbackAccordingToRfc8888Count
(
)
=
0
;
virtual
const
FieldTrialsView
&
trials
(
)
const
=
0
;
virtual
TaskQueueBase
*
network_thread
(
)
const
=
0
;
virtual
TaskQueueBase
*
worker_thread
(
)
const
=
0
;
virtual
~
Call
(
)
{
}
}
;
}
#
endif
