#
ifndef
CALL_CALL_H_
#
define
CALL_CALL_H_
#
include
<
algorithm
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
adaptation
/
resource
.
h
"
#
include
"
api
/
media_types
.
h
"
#
include
"
call
/
audio_receive_stream
.
h
"
#
include
"
call
/
audio_send_stream
.
h
"
#
include
"
call
/
call_config
.
h
"
#
include
"
call
/
flexfec_receive_stream
.
h
"
#
include
"
call
/
packet_receiver
.
h
"
#
include
"
call
/
rtp_transport_controller_send_interface
.
h
"
#
include
"
call
/
video_receive_stream
.
h
"
#
include
"
call
/
video_send_stream
.
h
"
#
include
"
modules
/
utility
/
include
/
process_thread
.
h
"
#
include
"
rtc_base
/
copy_on_write_buffer
.
h
"
#
include
"
rtc_base
/
network
/
sent_packet
.
h
"
#
include
"
rtc_base
/
network_route
.
h
"
#
include
"
rtc_base
/
ref_count
.
h
"
namespace
webrtc
{
class
SharedModuleThread
:
public
rtc
:
:
RefCountInterface
{
protected
:
SharedModuleThread
(
std
:
:
unique_ptr
<
ProcessThread
>
process_thread
std
:
:
function
<
void
(
)
>
on_one_ref_remaining
)
;
friend
class
rtc
:
:
scoped_refptr
<
SharedModuleThread
>
;
~
SharedModuleThread
(
)
override
;
public
:
static
rtc
:
:
scoped_refptr
<
SharedModuleThread
>
Create
(
std
:
:
unique_ptr
<
ProcessThread
>
process_thread
std
:
:
function
<
void
(
)
>
on_one_ref_remaining
)
;
void
EnsureStarted
(
)
;
ProcessThread
*
process_thread
(
)
;
private
:
void
AddRef
(
)
const
override
;
rtc
:
:
RefCountReleaseStatus
Release
(
)
const
override
;
class
Impl
;
mutable
std
:
:
unique_ptr
<
Impl
>
impl_
;
}
;
class
Call
{
public
:
using
Config
=
CallConfig
;
struct
Stats
{
std
:
:
string
ToString
(
int64_t
time_ms
)
const
;
int
send_bandwidth_bps
=
0
;
int
max_padding_bitrate_bps
=
0
;
int
recv_bandwidth_bps
=
0
;
int64_t
pacer_delay_ms
=
0
;
int64_t
rtt_ms
=
-
1
;
}
;
static
Call
*
Create
(
const
Call
:
:
Config
&
config
)
;
static
Call
*
Create
(
const
Call
:
:
Config
&
config
rtc
:
:
scoped_refptr
<
SharedModuleThread
>
call_thread
)
;
static
Call
*
Create
(
const
Call
:
:
Config
&
config
Clock
*
clock
rtc
:
:
scoped_refptr
<
SharedModuleThread
>
call_thread
std
:
:
unique_ptr
<
ProcessThread
>
pacer_thread
)
;
virtual
AudioSendStream
*
CreateAudioSendStream
(
const
AudioSendStream
:
:
Config
&
config
)
=
0
;
virtual
void
DestroyAudioSendStream
(
AudioSendStream
*
send_stream
)
=
0
;
virtual
AudioReceiveStream
*
CreateAudioReceiveStream
(
const
AudioReceiveStream
:
:
Config
&
config
)
=
0
;
virtual
void
DestroyAudioReceiveStream
(
AudioReceiveStream
*
receive_stream
)
=
0
;
virtual
VideoSendStream
*
CreateVideoSendStream
(
VideoSendStream
:
:
Config
config
VideoEncoderConfig
encoder_config
)
=
0
;
virtual
VideoSendStream
*
CreateVideoSendStream
(
VideoSendStream
:
:
Config
config
VideoEncoderConfig
encoder_config
std
:
:
unique_ptr
<
FecController
>
fec_controller
)
;
virtual
void
DestroyVideoSendStream
(
VideoSendStream
*
send_stream
)
=
0
;
virtual
VideoReceiveStream
*
CreateVideoReceiveStream
(
VideoReceiveStream
:
:
Config
configuration
)
=
0
;
virtual
void
DestroyVideoReceiveStream
(
VideoReceiveStream
*
receive_stream
)
=
0
;
virtual
FlexfecReceiveStream
*
CreateFlexfecReceiveStream
(
const
FlexfecReceiveStream
:
:
Config
&
config
)
=
0
;
virtual
void
DestroyFlexfecReceiveStream
(
FlexfecReceiveStream
*
receive_stream
)
=
0
;
virtual
void
AddAdaptationResource
(
rtc
:
:
scoped_refptr
<
Resource
>
resource
)
=
0
;
virtual
PacketReceiver
*
Receiver
(
)
=
0
;
virtual
RtpTransportControllerSendInterface
*
GetTransportControllerSend
(
)
=
0
;
virtual
Stats
GetStats
(
)
const
=
0
;
virtual
void
SignalChannelNetworkState
(
MediaType
media
NetworkState
state
)
=
0
;
virtual
void
OnAudioTransportOverheadChanged
(
int
transport_overhead_per_packet
)
=
0
;
virtual
void
OnSentPacket
(
const
rtc
:
:
SentPacket
&
sent_packet
)
=
0
;
virtual
void
SetClientBitratePreferences
(
const
BitrateSettings
&
preferences
)
=
0
;
virtual
~
Call
(
)
{
}
}
;
}
#
endif
