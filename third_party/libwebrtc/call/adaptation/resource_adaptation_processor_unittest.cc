#
include
"
call
/
adaptation
/
resource_adaptation_processor
.
h
"
#
include
"
api
/
adaptation
/
resource
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
api
/
video
/
video_adaptation_counters
.
h
"
#
include
"
call
/
adaptation
/
resource_adaptation_processor_interface
.
h
"
#
include
"
call
/
adaptation
/
test
/
fake_frame_rate_provider
.
h
"
#
include
"
call
/
adaptation
/
test
/
fake_resource
.
h
"
#
include
"
call
/
adaptation
/
video_source_restrictions
.
h
"
#
include
"
call
/
adaptation
/
video_stream_input_state_provider
.
h
"
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
task_queue_for_test
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
scoped_key_value_config
.
h
"
namespace
webrtc
{
namespace
{
const
int
kDefaultFrameRate
=
30
;
const
int
kDefaultFrameSize
=
1280
*
720
;
constexpr
TimeDelta
kDefaultTimeout
=
TimeDelta
:
:
Seconds
(
5
)
;
class
VideoSourceRestrictionsListenerForTesting
:
public
VideoSourceRestrictionsListener
{
public
:
VideoSourceRestrictionsListenerForTesting
(
)
:
restrictions_updated_count_
(
0
)
restrictions_
(
)
adaptation_counters_
(
)
reason_
(
nullptr
)
{
}
~
VideoSourceRestrictionsListenerForTesting
(
)
override
{
}
size_t
restrictions_updated_count
(
)
const
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
return
restrictions_updated_count_
;
}
VideoSourceRestrictions
restrictions
(
)
const
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
return
restrictions_
;
}
VideoAdaptationCounters
adaptation_counters
(
)
const
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
return
adaptation_counters_
;
}
rtc
:
:
scoped_refptr
<
Resource
>
reason
(
)
const
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
return
reason_
;
}
void
OnVideoSourceRestrictionsUpdated
(
VideoSourceRestrictions
restrictions
const
VideoAdaptationCounters
&
adaptation_counters
rtc
:
:
scoped_refptr
<
Resource
>
reason
const
VideoSourceRestrictions
&
unfiltered_restrictions
)
override
{
RTC_DCHECK_RUN_ON
(
&
sequence_checker_
)
;
+
+
restrictions_updated_count_
;
restrictions_
=
restrictions
;
adaptation_counters_
=
adaptation_counters
;
reason_
=
reason
;
}
private
:
SequenceChecker
sequence_checker_
;
size_t
restrictions_updated_count_
RTC_GUARDED_BY
(
&
sequence_checker_
)
;
VideoSourceRestrictions
restrictions_
RTC_GUARDED_BY
(
&
sequence_checker_
)
;
VideoAdaptationCounters
adaptation_counters_
RTC_GUARDED_BY
(
&
sequence_checker_
)
;
rtc
:
:
scoped_refptr
<
Resource
>
reason_
RTC_GUARDED_BY
(
&
sequence_checker_
)
;
}
;
class
ResourceAdaptationProcessorTest
:
public
:
:
testing
:
:
Test
{
public
:
ResourceAdaptationProcessorTest
(
)
:
frame_rate_provider_
(
)
input_state_provider_
(
&
frame_rate_provider_
)
resource_
(
FakeResource
:
:
Create
(
"
FakeResource
"
)
)
other_resource_
(
FakeResource
:
:
Create
(
"
OtherFakeResource
"
)
)
video_stream_adapter_
(
std
:
:
make_unique
<
VideoStreamAdapter
>
(
&
input_state_provider_
&
frame_rate_provider_
field_trials_
)
)
processor_
(
std
:
:
make_unique
<
ResourceAdaptationProcessor
>
(
video_stream_adapter_
.
get
(
)
)
)
{
video_stream_adapter_
-
>
AddRestrictionsListener
(
&
restrictions_listener_
)
;
processor_
-
>
AddResource
(
resource_
)
;
processor_
-
>
AddResource
(
other_resource_
)
;
}
~
ResourceAdaptationProcessorTest
(
)
override
{
if
(
processor_
)
{
DestroyProcessor
(
)
;
}
}
void
SetInputStates
(
bool
has_input
int
fps
int
frame_size
)
{
input_state_provider_
.
OnHasInputChanged
(
has_input
)
;
frame_rate_provider_
.
set_fps
(
fps
)
;
input_state_provider_
.
OnFrameSizeObserved
(
frame_size
)
;
}
void
RestrictSource
(
VideoSourceRestrictions
restrictions
)
{
SetInputStates
(
true
restrictions
.
max_frame_rate
(
)
.
value_or
(
kDefaultFrameRate
)
restrictions
.
target_pixels_per_frame
(
)
.
has_value
(
)
?
restrictions
.
target_pixels_per_frame
(
)
.
value
(
)
:
restrictions
.
max_pixels_per_frame
(
)
.
value_or
(
kDefaultFrameSize
)
)
;
}
void
DestroyProcessor
(
)
{
if
(
resource_
)
{
processor_
-
>
RemoveResource
(
resource_
)
;
}
if
(
other_resource_
)
{
processor_
-
>
RemoveResource
(
other_resource_
)
;
}
video_stream_adapter_
-
>
RemoveRestrictionsListener
(
&
restrictions_listener_
)
;
processor_
.
reset
(
)
;
}
static
void
WaitUntilTaskQueueIdle
(
)
{
ASSERT_TRUE
(
rtc
:
:
Thread
:
:
Current
(
)
-
>
ProcessMessages
(
0
)
)
;
}
protected
:
rtc
:
:
AutoThread
main_thread_
;
webrtc
:
:
test
:
:
ScopedKeyValueConfig
field_trials_
;
FakeFrameRateProvider
frame_rate_provider_
;
VideoStreamInputStateProvider
input_state_provider_
;
rtc
:
:
scoped_refptr
<
FakeResource
>
resource_
;
rtc
:
:
scoped_refptr
<
FakeResource
>
other_resource_
;
std
:
:
unique_ptr
<
VideoStreamAdapter
>
video_stream_adapter_
;
std
:
:
unique_ptr
<
ResourceAdaptationProcessor
>
processor_
;
VideoSourceRestrictionsListenerForTesting
restrictions_listener_
;
}
;
}
TEST_F
(
ResourceAdaptationProcessorTest
DisabledByDefault
)
{
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
0u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
InsufficientInput
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
input_state_provider_
.
OnHasInputChanged
(
true
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
0u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
SetInputStates
(
false
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
0u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
OveruseTriggersRestrictingResolutionInMaintainFrameRate
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
EXPECT_TRUE
(
restrictions_listener_
.
restrictions
(
)
.
max_pixels_per_frame
(
)
.
has_value
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
OveruseTriggersRestrictingFrameRateInMaintainResolution
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_RESOLUTION
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
EXPECT_TRUE
(
restrictions_listener_
.
restrictions
(
)
.
max_frame_rate
(
)
.
has_value
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
OveruseTriggersRestrictingFrameRateAndResolutionInBalanced
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
BALANCED
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
for
(
size_t
i
=
0
;
i
<
4
;
+
+
i
)
{
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
i
+
1
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
}
EXPECT_TRUE
(
restrictions_listener_
.
restrictions
(
)
.
max_pixels_per_frame
(
)
.
has_value
(
)
)
;
EXPECT_TRUE
(
restrictions_listener_
.
restrictions
(
)
.
max_frame_rate
(
)
.
has_value
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
AwaitingPreviousAdaptation
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
CannotAdaptUpWhenUnrestricted
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
0u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
UnderuseTakesUsBackToUnrestricted
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
2u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
EXPECT_EQ
(
VideoSourceRestrictions
(
)
restrictions_listener_
.
restrictions
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
ResourcesCanNotAdaptUpIfNeverAdaptedDown
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
1u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
ResourcesCanNotAdaptUpIfNotAdaptedDownAfterReset
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
video_stream_adapter_
-
>
ClearRestrictions
(
)
;
EXPECT_EQ
(
0
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
OnlyMostLimitedResourceMayAdaptUp
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
0
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
MultipleResourcesCanTriggerMultipleAdaptations
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
3
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
3
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
3
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
3
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
0
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
MostLimitedResourceAdaptationWorksAfterChangingDegradataionPreference
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
int
last_total
=
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
;
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_RESOLUTION
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
last_total
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
last_total
+
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
last_total
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
AdaptsDownWhenOtherResourceIsAlwaysUnderused
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
0
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
TriggerOveruseNotOnAdaptationTaskQueue
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
TaskQueueForTest
resource_task_queue
(
"
ResourceTaskQueue
"
)
;
resource_task_queue
.
PostTask
(
[
&
]
(
)
{
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
}
)
;
EXPECT_EQ_WAIT
(
1u
restrictions_listener_
.
restrictions_updated_count
(
)
kDefaultTimeout
.
ms
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
DestroyProcessorWhileResourceListenerDelegateHasTaskInFlight
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
rtc
:
:
Event
resource_event
;
TaskQueueForTest
resource_task_queue
(
"
ResourceTaskQueue
"
)
;
resource_task_queue
.
PostTask
(
[
&
]
(
)
{
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
resource_event
.
Set
(
)
;
}
)
;
EXPECT_TRUE
(
resource_event
.
Wait
(
kDefaultTimeout
)
)
;
DestroyProcessor
(
)
;
EXPECT_EQ
(
0u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
}
TEST_F
(
ResourceAdaptationProcessorTest
ResourceOveruseIgnoredWhenSignalledDuringRemoval
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
rtc
:
:
Event
overuse_event
;
TaskQueueForTest
resource_task_queue
(
"
ResourceTaskQueue
"
)
;
resource_task_queue
.
PostTask
(
[
&
]
(
)
{
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
overuse_event
.
Set
(
)
;
}
)
;
EXPECT_TRUE
(
overuse_event
.
Wait
(
kDefaultTimeout
)
)
;
processor_
-
>
RemoveResource
(
resource_
)
;
WaitUntilTaskQueueIdle
(
)
;
EXPECT_EQ
(
0u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
resource_
=
nullptr
;
}
TEST_F
(
ResourceAdaptationProcessorTest
RemovingOnlyAdaptedResourceResetsAdaptation
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
processor_
-
>
RemoveResource
(
resource_
)
;
EXPECT_EQ
(
0
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
resource_
=
nullptr
;
}
TEST_F
(
ResourceAdaptationProcessorTest
RemovingMostLimitedResourceSetsAdaptationToNextLimitedLevel
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
BALANCED
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
VideoSourceRestrictions
next_limited_restrictions
=
restrictions_listener_
.
restrictions
(
)
;
VideoAdaptationCounters
next_limited_counters
=
restrictions_listener_
.
adaptation_counters
(
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
processor_
-
>
RemoveResource
(
resource_
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
EXPECT_EQ
(
next_limited_restrictions
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
next_limited_counters
restrictions_listener_
.
adaptation_counters
(
)
)
;
resource_
=
nullptr
;
}
TEST_F
(
ResourceAdaptationProcessorTest
RemovingMostLimitedResourceSetsAdaptationIfInputStateUnchanged
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
VideoSourceRestrictions
next_limited_restrictions
=
restrictions_listener_
.
restrictions
(
)
;
VideoAdaptationCounters
next_limited_counters
=
restrictions_listener_
.
adaptation_counters
(
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
processor_
-
>
RemoveResource
(
resource_
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
EXPECT_EQ
(
next_limited_restrictions
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
next_limited_counters
restrictions_listener_
.
adaptation_counters
(
)
)
;
resource_
=
nullptr
;
}
TEST_F
(
ResourceAdaptationProcessorTest
RemovingResourceNotMostLimitedHasNoEffectOnLimitations
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
BALANCED
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
VideoSourceRestrictions
current_restrictions
=
restrictions_listener_
.
restrictions
(
)
;
VideoAdaptationCounters
current_counters
=
restrictions_listener_
.
adaptation_counters
(
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
processor_
-
>
RemoveResource
(
other_resource_
)
;
EXPECT_EQ
(
current_restrictions
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
current_counters
restrictions_listener_
.
adaptation_counters
(
)
)
;
other_resource_
=
nullptr
;
}
TEST_F
(
ResourceAdaptationProcessorTest
RemovingMostLimitedResourceAfterSwitchingDegradationPreferences
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
VideoSourceRestrictions
next_limited_restrictions
=
restrictions_listener_
.
restrictions
(
)
;
VideoAdaptationCounters
next_limited_counters
=
restrictions_listener_
.
adaptation_counters
(
)
;
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_RESOLUTION
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
processor_
-
>
RemoveResource
(
resource_
)
;
EXPECT_EQ
(
next_limited_counters
restrictions_listener_
.
adaptation_counters
(
)
)
;
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
EXPECT_EQ
(
next_limited_restrictions
restrictions_listener_
.
restrictions
(
)
)
;
resource_
=
nullptr
;
}
TEST_F
(
ResourceAdaptationProcessorTest
RemovingMostLimitedResourceSetsNextLimitationsInDisabled
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
VideoSourceRestrictions
next_limited_restrictions
=
restrictions_listener_
.
restrictions
(
)
;
VideoAdaptationCounters
next_limited_counters
=
restrictions_listener_
.
adaptation_counters
(
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
2
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
DISABLED
)
;
processor_
-
>
RemoveResource
(
resource_
)
;
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
EXPECT_EQ
(
next_limited_restrictions
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
next_limited_counters
restrictions_listener_
.
adaptation_counters
(
)
)
;
resource_
=
nullptr
;
}
TEST_F
(
ResourceAdaptationProcessorTest
RemovedResourceSignalsIgnoredByProcessor
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
processor_
-
>
RemoveResource
(
resource_
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
EXPECT_EQ
(
0u
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
resource_
=
nullptr
;
}
TEST_F
(
ResourceAdaptationProcessorTest
RemovingResourceWhenMultipleMostLimtedHasNoEffect
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
processor_
-
>
RemoveResource
(
resource_
)
;
EXPECT_EQ
(
1
restrictions_listener_
.
adaptation_counters
(
)
.
Total
(
)
)
;
resource_
=
nullptr
;
}
TEST_F
(
ResourceAdaptationProcessorTest
ResourceOverusedAtLimitReachedWillShareMostLimited
)
{
video_stream_adapter_
-
>
SetDegradationPreference
(
DegradationPreference
:
:
MAINTAIN_FRAMERATE
)
;
SetInputStates
(
true
kDefaultFrameRate
kDefaultFrameSize
)
;
bool
has_reached_min_pixels
=
false
;
ON_CALL
(
frame_rate_provider_
OnMinPixelLimitReached
(
)
)
.
WillByDefault
(
testing
:
:
Assign
(
&
has_reached_min_pixels
true
)
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
RestrictSource
(
restrictions_listener_
.
restrictions
(
)
)
;
}
EXPECT_TRUE
(
has_reached_min_pixels
)
;
auto
last_update_count
=
restrictions_listener_
.
restrictions_updated_count
(
)
;
other_resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kOveruse
)
;
resource_
-
>
SetUsageState
(
ResourceUsageState
:
:
kUnderuse
)
;
EXPECT_EQ
(
last_update_count
restrictions_listener_
.
restrictions_updated_count
(
)
)
;
}
}
