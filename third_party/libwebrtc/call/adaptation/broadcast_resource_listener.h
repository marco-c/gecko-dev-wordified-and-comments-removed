#
ifndef
CALL_ADAPTATION_BROADCAST_RESOURCE_LISTENER_H_
#
define
CALL_ADAPTATION_BROADCAST_RESOURCE_LISTENER_H_
#
include
<
vector
>
#
include
"
api
/
adaptation
/
resource
.
h
"
#
include
"
api
/
scoped_refptr
.
h
"
#
include
"
rtc_base
/
synchronization
/
mutex
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
BroadcastResourceListener
:
public
ResourceListener
{
public
:
explicit
BroadcastResourceListener
(
scoped_refptr
<
Resource
>
source_resource
)
;
~
BroadcastResourceListener
(
)
override
;
scoped_refptr
<
Resource
>
SourceResource
(
)
const
;
void
StartListening
(
)
;
void
StopListening
(
)
;
scoped_refptr
<
Resource
>
CreateAdapterResource
(
)
;
void
RemoveAdapterResource
(
scoped_refptr
<
Resource
>
resource
)
;
std
:
:
vector
<
scoped_refptr
<
Resource
>
>
GetAdapterResources
(
)
;
void
OnResourceUsageStateMeasured
(
scoped_refptr
<
Resource
>
resource
ResourceUsageState
usage_state
)
override
;
private
:
class
AdapterResource
;
friend
class
AdapterResource
;
const
scoped_refptr
<
Resource
>
source_resource_
;
Mutex
lock_
;
bool
is_listening_
RTC_GUARDED_BY
(
lock_
)
;
std
:
:
vector
<
scoped_refptr
<
AdapterResource
>
>
adapters_
RTC_GUARDED_BY
(
lock_
)
;
}
;
}
#
endif
