#
include
"
call
/
rtp_bitrate_configurator
.
h
"
#
include
<
memory
>
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
using
absl
:
:
nullopt
;
class
RtpBitrateConfiguratorTest
:
public
:
:
testing
:
:
Test
{
public
:
RtpBitrateConfiguratorTest
(
)
:
configurator_
(
new
RtpBitrateConfigurator
(
BitrateConstraints
(
)
)
)
{
}
std
:
:
unique_ptr
<
RtpBitrateConfigurator
>
configurator_
;
void
UpdateConfigMatches
(
BitrateConstraints
bitrate_config
absl
:
:
optional
<
int
>
min_bitrate_bps
absl
:
:
optional
<
int
>
start_bitrate_bps
absl
:
:
optional
<
int
>
max_bitrate_bps
)
{
absl
:
:
optional
<
BitrateConstraints
>
result
=
configurator_
-
>
UpdateWithSdpParameters
(
bitrate_config
)
;
EXPECT_TRUE
(
result
.
has_value
(
)
)
;
if
(
start_bitrate_bps
.
has_value
(
)
)
EXPECT_EQ
(
result
-
>
start_bitrate_bps
start_bitrate_bps
)
;
if
(
min_bitrate_bps
.
has_value
(
)
)
EXPECT_EQ
(
result
-
>
min_bitrate_bps
min_bitrate_bps
)
;
if
(
max_bitrate_bps
.
has_value
(
)
)
EXPECT_EQ
(
result
-
>
max_bitrate_bps
max_bitrate_bps
)
;
}
void
UpdateMaskMatches
(
BitrateSettings
bitrate_mask
absl
:
:
optional
<
int
>
min_bitrate_bps
absl
:
:
optional
<
int
>
start_bitrate_bps
absl
:
:
optional
<
int
>
max_bitrate_bps
)
{
absl
:
:
optional
<
BitrateConstraints
>
result
=
configurator_
-
>
UpdateWithClientPreferences
(
bitrate_mask
)
;
EXPECT_TRUE
(
result
.
has_value
(
)
)
;
if
(
start_bitrate_bps
.
has_value
(
)
)
EXPECT_EQ
(
result
-
>
start_bitrate_bps
start_bitrate_bps
)
;
if
(
min_bitrate_bps
.
has_value
(
)
)
EXPECT_EQ
(
result
-
>
min_bitrate_bps
min_bitrate_bps
)
;
if
(
max_bitrate_bps
.
has_value
(
)
)
EXPECT_EQ
(
result
-
>
max_bitrate_bps
max_bitrate_bps
)
;
}
}
;
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigWithValidConfigReturnsNewConfig
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
min_bitrate_bps
=
1
;
bitrate_config
.
start_bitrate_bps
=
2
;
bitrate_config
.
max_bitrate_bps
=
3
;
UpdateConfigMatches
(
bitrate_config
1
2
3
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigWithDifferentMinReturnsNewConfig
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
min_bitrate_bps
=
10
;
bitrate_config
.
start_bitrate_bps
=
20
;
bitrate_config
.
max_bitrate_bps
=
30
;
configurator_
.
reset
(
new
RtpBitrateConfigurator
(
bitrate_config
)
)
;
bitrate_config
.
min_bitrate_bps
=
11
;
UpdateConfigMatches
(
bitrate_config
11
-
1
30
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigWithDifferentStartReturnsNewConfig
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
min_bitrate_bps
=
10
;
bitrate_config
.
start_bitrate_bps
=
20
;
bitrate_config
.
max_bitrate_bps
=
30
;
configurator_
.
reset
(
new
RtpBitrateConfigurator
(
bitrate_config
)
)
;
bitrate_config
.
start_bitrate_bps
=
21
;
UpdateConfigMatches
(
bitrate_config
10
21
30
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigWithDifferentMaxReturnsNewConfig
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
min_bitrate_bps
=
10
;
bitrate_config
.
start_bitrate_bps
=
20
;
bitrate_config
.
max_bitrate_bps
=
30
;
configurator_
.
reset
(
new
RtpBitrateConfigurator
(
bitrate_config
)
)
;
bitrate_config
.
max_bitrate_bps
=
31
;
UpdateConfigMatches
(
bitrate_config
10
-
1
31
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigWithSameConfigElidesSecondCall
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
min_bitrate_bps
=
1
;
bitrate_config
.
start_bitrate_bps
=
2
;
bitrate_config
.
max_bitrate_bps
=
3
;
UpdateConfigMatches
(
bitrate_config
1
2
3
)
;
EXPECT_FALSE
(
configurator_
-
>
UpdateWithSdpParameters
(
bitrate_config
)
.
has_value
(
)
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigWithSameMinMaxAndNegativeStartElidesSecondCall
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
min_bitrate_bps
=
1
;
bitrate_config
.
start_bitrate_bps
=
2
;
bitrate_config
.
max_bitrate_bps
=
3
;
UpdateConfigMatches
(
bitrate_config
1
2
3
)
;
bitrate_config
.
start_bitrate_bps
=
-
1
;
EXPECT_FALSE
(
configurator_
-
>
UpdateWithSdpParameters
(
bitrate_config
)
.
has_value
(
)
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
BiggerMaskMinUsed
)
{
BitrateSettings
mask
;
mask
.
min_bitrate_bps
=
1234
;
UpdateMaskMatches
(
mask
*
mask
.
min_bitrate_bps
nullopt
nullopt
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
BiggerConfigMinUsed
)
{
BitrateSettings
mask
;
mask
.
min_bitrate_bps
=
1000
;
UpdateMaskMatches
(
mask
1000
nullopt
nullopt
)
;
BitrateConstraints
config
;
config
.
min_bitrate_bps
=
1234
;
UpdateConfigMatches
(
config
1234
nullopt
nullopt
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
LatestStartMaskPreferred
)
{
BitrateSettings
mask
;
mask
.
start_bitrate_bps
=
1300
;
UpdateMaskMatches
(
mask
nullopt
*
mask
.
start_bitrate_bps
nullopt
)
;
BitrateConstraints
bitrate_config
;
bitrate_config
.
start_bitrate_bps
=
1200
;
UpdateConfigMatches
(
bitrate_config
nullopt
bitrate_config
.
start_bitrate_bps
nullopt
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
SmallerMaskMaxUsed
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
max_bitrate_bps
=
bitrate_config
.
start_bitrate_bps
+
2000
;
configurator_
.
reset
(
new
RtpBitrateConfigurator
(
bitrate_config
)
)
;
BitrateSettings
mask
;
mask
.
max_bitrate_bps
=
bitrate_config
.
start_bitrate_bps
+
1000
;
UpdateMaskMatches
(
mask
nullopt
nullopt
*
mask
.
max_bitrate_bps
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
SmallerConfigMaxUsed
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
max_bitrate_bps
=
bitrate_config
.
start_bitrate_bps
+
1000
;
configurator_
.
reset
(
new
RtpBitrateConfigurator
(
bitrate_config
)
)
;
BitrateSettings
mask
;
mask
.
max_bitrate_bps
=
bitrate_config
.
start_bitrate_bps
+
2000
;
EXPECT_FALSE
(
configurator_
-
>
UpdateWithClientPreferences
(
mask
)
.
has_value
(
)
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
MaskStartLessThanConfigMinClamped
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
min_bitrate_bps
=
2000
;
configurator_
.
reset
(
new
RtpBitrateConfigurator
(
bitrate_config
)
)
;
BitrateSettings
mask
;
mask
.
start_bitrate_bps
=
1000
;
UpdateMaskMatches
(
mask
2000
2000
nullopt
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
MaskStartGreaterThanConfigMaxClamped
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
start_bitrate_bps
=
2000
;
configurator_
.
reset
(
new
RtpBitrateConfigurator
(
bitrate_config
)
)
;
BitrateSettings
mask
;
mask
.
max_bitrate_bps
=
1000
;
UpdateMaskMatches
(
mask
nullopt
-
1
1000
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
MaskMinGreaterThanConfigMaxClamped
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
min_bitrate_bps
=
2000
;
configurator_
.
reset
(
new
RtpBitrateConfigurator
(
bitrate_config
)
)
;
BitrateSettings
mask
;
mask
.
max_bitrate_bps
=
1000
;
UpdateMaskMatches
(
mask
1000
nullopt
1000
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
SettingMaskStartForcesUpdate
)
{
BitrateSettings
mask
;
mask
.
start_bitrate_bps
=
1000
;
UpdateMaskMatches
(
mask
nullopt
1000
nullopt
)
;
UpdateMaskMatches
(
mask
nullopt
1000
nullopt
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigWithNoChangesDoesNotCallNewConfig
)
{
BitrateConstraints
config1
;
config1
.
min_bitrate_bps
=
0
;
config1
.
start_bitrate_bps
=
1000
;
config1
.
max_bitrate_bps
=
-
1
;
BitrateConstraints
config2
;
config2
.
min_bitrate_bps
=
0
;
config2
.
start_bitrate_bps
=
-
1
;
config2
.
max_bitrate_bps
=
-
1
;
UpdateConfigMatches
(
config1
0
1000
-
1
)
;
EXPECT_FALSE
(
configurator_
-
>
UpdateWithSdpParameters
(
config2
)
.
has_value
(
)
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigNotReturnedWhenEffectiveMaxUnchanged
)
{
BitrateConstraints
config
;
config
.
min_bitrate_bps
=
0
;
config
.
start_bitrate_bps
=
-
1
;
config
.
max_bitrate_bps
=
2000
;
UpdateConfigMatches
(
config
nullopt
nullopt
2000
)
;
BitrateSettings
mask
;
mask
.
max_bitrate_bps
=
1000
;
UpdateMaskMatches
(
mask
nullopt
nullopt
1000
)
;
config
.
max_bitrate_bps
=
1000
;
EXPECT_FALSE
(
configurator_
-
>
UpdateWithSdpParameters
(
config
)
.
has_value
(
)
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigNotReturnedWhenStartMaskRemoved
)
{
BitrateSettings
mask
;
mask
.
start_bitrate_bps
=
1000
;
UpdateMaskMatches
(
mask
0
1000
-
1
)
;
mask
.
start_bitrate_bps
.
reset
(
)
;
EXPECT_FALSE
(
configurator_
-
>
UpdateWithClientPreferences
(
mask
)
.
has_value
(
)
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigAfterBitrateConfigMaskWithStart
)
{
BitrateSettings
mask
;
mask
.
start_bitrate_bps
=
1000
;
UpdateMaskMatches
(
mask
0
1000
-
1
)
;
BitrateConstraints
config
;
config
.
min_bitrate_bps
=
0
;
config
.
start_bitrate_bps
=
-
1
;
config
.
max_bitrate_bps
=
5000
;
UpdateConfigMatches
(
config
0
-
1
5000
)
;
}
TEST_F
(
RtpBitrateConfiguratorTest
NewConfigNotReturnedWhenClampedMinUnchanged
)
{
BitrateConstraints
bitrate_config
;
bitrate_config
.
start_bitrate_bps
=
500
;
bitrate_config
.
max_bitrate_bps
=
1000
;
configurator_
.
reset
(
new
RtpBitrateConfigurator
(
bitrate_config
)
)
;
BitrateSettings
mask
;
mask
.
min_bitrate_bps
=
2000
;
UpdateMaskMatches
(
mask
1000
-
1
1000
)
;
mask
.
min_bitrate_bps
=
3000
;
EXPECT_FALSE
(
configurator_
-
>
UpdateWithClientPreferences
(
mask
)
.
has_value
(
)
)
;
}
}
