#
ifndef
CALL_FLEXFEC_RECEIVE_STREAM_H_
#
define
CALL_FLEXFEC_RECEIVE_STREAM_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
call
/
transport
.
h
"
#
include
"
api
/
rtp_headers
.
h
"
#
include
"
api
/
rtp_parameters
.
h
"
#
include
"
call
/
rtp_packet_sink_interface
.
h
"
namespace
webrtc
{
class
FlexfecReceiveStream
:
public
RtpPacketSinkInterface
{
public
:
~
FlexfecReceiveStream
(
)
override
=
default
;
struct
Stats
{
std
:
:
string
ToString
(
int64_t
time_ms
)
const
;
int
flexfec_bitrate_bps
;
}
;
struct
Config
{
explicit
Config
(
Transport
*
rtcp_send_transport
)
;
Config
(
const
Config
&
)
;
~
Config
(
)
;
std
:
:
string
ToString
(
)
const
;
bool
IsCompleteAndEnabled
(
)
const
;
int
payload_type
=
-
1
;
uint32_t
remote_ssrc
=
0
;
std
:
:
vector
<
uint32_t
>
protected_media_ssrcs
;
uint32_t
local_ssrc
=
0
;
RtcpMode
rtcp_mode
=
RtcpMode
:
:
kCompound
;
Transport
*
rtcp_send_transport
=
nullptr
;
bool
transport_cc
=
false
;
std
:
:
vector
<
RtpExtension
>
rtp_header_extensions
;
}
;
virtual
Stats
GetStats
(
)
const
=
0
;
virtual
const
Config
&
GetConfig
(
)
const
=
0
;
}
;
}
#
endif
