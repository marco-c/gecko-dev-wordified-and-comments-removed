#
include
"
call
/
rtp_stream_receiver_controller
.
h
"
#
include
<
memory
>
#
include
"
rtc_base
/
logging
.
h
"
namespace
webrtc
{
RtpStreamReceiverController
:
:
Receiver
:
:
Receiver
(
RtpStreamReceiverController
*
controller
uint32_t
ssrc
RtpPacketSinkInterface
*
sink
)
:
controller_
(
controller
)
sink_
(
sink
)
{
const
bool
sink_added
=
controller_
-
>
AddSink
(
ssrc
sink_
)
;
if
(
!
sink_added
)
{
RTC_LOG
(
LS_ERROR
)
<
<
"
RtpStreamReceiverController
:
:
Receiver
:
:
Receiver
:
Sink
"
"
could
not
be
added
for
SSRC
=
"
<
<
ssrc
<
<
"
.
"
;
}
}
RtpStreamReceiverController
:
:
Receiver
:
:
~
Receiver
(
)
{
controller_
-
>
RemoveSink
(
sink_
)
;
}
RtpStreamReceiverController
:
:
RtpStreamReceiverController
(
)
{
demuxer_
.
set_use_mid
(
false
)
;
}
RtpStreamReceiverController
:
:
~
RtpStreamReceiverController
(
)
=
default
;
std
:
:
unique_ptr
<
RtpStreamReceiverInterface
>
RtpStreamReceiverController
:
:
CreateReceiver
(
uint32_t
ssrc
RtpPacketSinkInterface
*
sink
)
{
return
std
:
:
make_unique
<
Receiver
>
(
this
ssrc
sink
)
;
}
bool
RtpStreamReceiverController
:
:
OnRtpPacket
(
const
RtpPacketReceived
&
packet
)
{
rtc
:
:
CritScope
cs
(
&
lock_
)
;
return
demuxer_
.
OnRtpPacket
(
packet
)
;
}
bool
RtpStreamReceiverController
:
:
AddSink
(
uint32_t
ssrc
RtpPacketSinkInterface
*
sink
)
{
rtc
:
:
CritScope
cs
(
&
lock_
)
;
return
demuxer_
.
AddSink
(
ssrc
sink
)
;
}
size_t
RtpStreamReceiverController
:
:
RemoveSink
(
const
RtpPacketSinkInterface
*
sink
)
{
rtc
:
:
CritScope
cs
(
&
lock_
)
;
return
demuxer_
.
RemoveSink
(
sink
)
;
}
}
