'
'
'
Pseudotranslation
support
.
Our
pseudotranslations
are
based
on
the
P
-
language
which
is
a
simple
vowel
-
extending
language
.
Examples
of
P
:
  
-
"
hello
"
becomes
"
hepellopo
"
  
-
"
howdie
"
becomes
"
hopowdiepie
"
  
-
"
because
"
becomes
"
bepecaupause
"
(
but
in
our
implementation
we
don
'
t
    
handle
the
silent
e
at
the
end
so
it
actually
would
return
"
bepecaupausepe
"
The
P
-
language
has
the
excellent
quality
of
increasing
the
length
of
text
by
around
30
-
50
%
which
is
great
for
pseudotranslations
to
stress
test
any
GUI
layouts
etc
.
To
make
the
pseudotranslations
more
obviously
"
not
a
translation
"
and
to
make
them
exercise
any
code
that
deals
with
encodings
we
also
transform
all
English
vowels
into
equivalent
vowels
with
diacriticals
on
them
(
rings
acutes
diaresis
and
circumflex
)
and
we
write
the
"
p
"
in
the
P
-
language
as
a
Hebrew
character
Qof
.
It
looks
sort
of
like
a
latin
character
"
p
"
but
it
is
outside
the
latin
-
1
character
set
which
will
stress
character
encoding
bugs
.
'
'
'
from
__future__
import
print_function
from
grit
import
lazy_re
from
grit
import
tclib
PSEUDO_LANG
=
'
x
-
P
-
pseudo
'
_QOF
=
u
'
P
'
_VOWELS
=
{
  
u
'
a
'
:
u
'
\
u00e5
'
  
u
'
e
'
:
u
'
\
u00e9
'
  
u
'
i
'
:
u
'
\
u00ef
'
  
u
'
o
'
:
u
'
\
u00f4
'
  
u
'
u
'
:
u
'
\
u00fc
'
  
u
'
y
'
:
u
'
\
u00fd
'
  
u
'
A
'
:
u
'
\
u00c5
'
  
u
'
E
'
:
u
'
\
u00c9
'
  
u
'
I
'
:
u
'
\
u00cf
'
  
u
'
O
'
:
u
'
\
u00d4
'
  
u
'
U
'
:
u
'
\
u00dc
'
  
u
'
Y
'
:
u
'
\
u00dd
'
}
_VOWELS_KEYS
=
set
(
_VOWELS
.
keys
(
)
)
_PSUB_RE
=
lazy_re
.
compile
(
"
(
%
s
)
"
%
'
|
'
.
join
(
_VOWELS_KEYS
|
{
'
P
'
}
)
)
_existing_translations
=
{
}
def
MapVowels
(
str
also_p
=
False
)
:
  
'
'
'
Returns
a
copy
of
'
str
'
where
characters
that
exist
as
keys
in
_VOWELS
  
have
been
replaced
with
the
corresponding
value
.
If
also_p
is
true
this
  
function
will
also
change
capital
P
characters
into
a
Hebrew
character
Qof
.
  
'
'
'
  
def
Repl
(
match
)
:
    
if
match
.
group
(
)
=
=
'
p
'
:
      
if
also_p
:
        
return
_QOF
      
else
:
        
return
'
p
'
    
else
:
      
return
_VOWELS
[
match
.
group
(
)
]
  
return
_PSUB_RE
.
sub
(
Repl
str
)
def
PseudoString
(
str
)
:
  
'
'
'
Returns
a
pseudotranslation
of
the
provided
string
in
our
enhanced
  
P
-
language
.
'
'
'
  
if
str
in
_existing_translations
:
    
return
_existing_translations
[
str
]
  
outstr
=
u
'
'
  
ix
=
0
  
while
ix
<
len
(
str
)
:
    
if
str
[
ix
]
not
in
_VOWELS_KEYS
:
      
outstr
+
=
str
[
ix
]
      
ix
+
=
1
    
else
:
      
consecutive_vowels
=
u
'
'
      
while
ix
<
len
(
str
)
and
str
[
ix
]
in
_VOWELS_KEYS
:
        
consecutive_vowels
+
=
str
[
ix
]
        
ix
+
=
1
      
changed_vowels
=
MapVowels
(
consecutive_vowels
)
      
outstr
+
=
changed_vowels
      
outstr
+
=
_QOF
      
outstr
+
=
changed_vowels
  
_existing_translations
[
str
]
=
outstr
  
return
outstr
def
PseudoMessage
(
message
)
:
  
'
'
'
Returns
a
pseudotranslation
of
the
provided
message
.
  
Args
:
    
message
:
tclib
.
Message
(
)
  
Return
:
    
tclib
.
Translation
(
)
  
'
'
'
  
transl
=
tclib
.
Translation
(
)
  
for
part
in
message
.
GetContent
(
)
:
    
if
isinstance
(
part
tclib
.
Placeholder
)
:
      
transl
.
AppendPlaceholder
(
part
)
    
else
:
      
transl
.
AppendText
(
PseudoString
(
part
)
)
  
return
transl
