'
'
'
Gatherer
for
administrative
template
files
.
'
'
'
from
__future__
import
print_function
import
re
from
grit
.
gather
import
regexp
from
grit
import
exception
from
grit
import
lazy_re
class
MalformedAdminTemplateException
(
exception
.
Base
)
:
  
'
'
'
This
file
doesn
'
t
look
like
a
.
adm
file
to
me
.
'
'
'
  
pass
class
AdmGatherer
(
regexp
.
RegexpGatherer
)
:
  
'
'
'
Gatherer
for
the
translateable
portions
of
an
admin
template
.
  
This
gatherer
currently
makes
the
following
assumptions
:
  
-
there
is
only
one
[
strings
]
section
and
it
is
always
the
last
section
    
of
the
file
  
-
translateable
strings
do
not
need
to
be
escaped
.
  
'
'
'
  
_STRINGS_SECTION
=
lazy_re
.
compile
(
      
r
'
(
?
P
<
first_part
>
.
+
^
\
[
strings
\
]
)
(
?
P
<
strings
>
.
+
)
\
Z
'
      
re
.
MULTILINE
|
re
.
DOTALL
)
  
_TRANSLATEABLES
=
lazy_re
.
compile
(
      
r
'
^
\
s
*
[
A
-
Za
-
z0
-
9_
]
+
\
s
*
=
\
s
*
"
(
?
P
<
text
>
.
+
)
"
\
s
*
'
      
re
.
MULTILINE
)
  
def
Escape
(
self
text
)
:
    
return
text
.
replace
(
'
\
n
'
'
\
\
n
'
)
  
def
UnEscape
(
self
text
)
:
    
return
text
.
replace
(
'
\
\
n
'
'
\
n
'
)
  
def
Parse
(
self
)
:
    
if
self
.
have_parsed_
:
      
return
    
self
.
have_parsed_
=
True
    
self
.
text_
=
self
.
_LoadInputFile
(
)
.
strip
(
)
    
m
=
self
.
_STRINGS_SECTION
.
match
(
self
.
text_
)
    
if
not
m
:
      
raise
MalformedAdminTemplateException
(
)
    
self
.
_AddNontranslateableChunk
(
m
.
group
(
'
first_part
'
)
)
    
self
.
_RegExpParse
(
self
.
_TRANSLATEABLES
m
.
group
(
'
strings
'
)
)
  
def
GetTextualIds
(
self
)
:
    
return
[
self
.
extkey
]
