def
AlignUp
(
v
align
)
:
  
return
(
v
+
align
-
1
)
/
/
align
*
align
def
StripPlural
(
s
)
:
  
assert
s
.
endswith
(
'
s
'
)
'
Expect
%
s
to
be
plural
'
%
s
  
return
s
[
:
-
1
]
class
Color
:
  
def
_MakeColor
(
code
)
:
    
t
=
'
\
033
[
'
+
code
+
'
m
%
s
\
033
[
0m
'
    
return
lambda
s
:
t
%
s
  
NONE
=
staticmethod
(
lambda
s
:
s
)
  
RED
=
staticmethod
(
_MakeColor
(
'
31
'
)
)
  
GREEN
=
staticmethod
(
_MakeColor
(
'
32
'
)
)
  
YELLOW
=
staticmethod
(
_MakeColor
(
'
33
'
)
)
  
BLUE
=
staticmethod
(
_MakeColor
(
'
34
'
)
)
  
MAGENTA
=
staticmethod
(
_MakeColor
(
'
35
'
)
)
  
CYAN
=
staticmethod
(
_MakeColor
(
'
36
'
)
)
  
WHITE
=
staticmethod
(
_MakeColor
(
'
37
'
)
)
  
GRAY
=
staticmethod
(
_MakeColor
(
'
30
;
1
'
)
)
class
TagInfo
:
  
"
"
"
Stores
resource_ids
tag
entry
(
e
.
g
.
{
"
includes
"
:
100
}
pair
)
.
"
"
"
  
def
__init__
(
self
raw_key
raw_value
)
:
    
"
"
"
TagInfo
Constructor
.
    
Args
:
      
raw_key
:
parser
.
AnnotatedValue
for
the
parsed
key
e
.
g
.
"
includes
"
.
      
raw_value
:
parser
.
AnnotatedValue
for
the
parsed
value
e
.
g
.
100
.
    
"
"
"
    
self
.
name
=
StripPlural
(
raw_key
.
val
)
    
assert
len
(
raw_value
)
=
=
1
    
self
.
lo
=
raw_value
[
0
]
.
lo
    
self
.
hi
=
raw_value
[
0
]
.
hi
    
self
.
id
=
raw_value
[
0
]
.
val
    
self
.
usage
=
None
class
ItemInfo
:
  
"
"
"
resource_ids
item
containing
multiple
TagInfo
.
"
"
"
  
def
__init__
(
self
lo
grd
raw_item
)
:
    
self
.
lo
=
lo
    
self
.
grd
=
grd
    
self
.
meta
=
None
    
self
.
tags
=
[
]
    
for
k
v
in
raw_item
.
items
(
)
:
      
if
k
.
val
=
=
'
META
'
:
        
assert
self
.
meta
is
None
        
self
.
meta
=
v
      
else
:
        
self
.
tags
.
append
(
TagInfo
(
k
v
)
)
    
self
.
tags
.
sort
(
key
=
lambda
tag
:
tag
.
lo
)
  
def
SetUsages
(
self
tag_name_to_usage
)
:
    
for
tag
in
self
.
tags
:
      
tag
.
usage
=
tag_name_to_usage
.
get
(
tag
.
name
0
)
def
BuildItemList
(
root_obj
)
:
  
"
"
"
Extracts
ID
assignments
and
structure
from
parsed
resource_ids
.
  
Returns
:
A
list
of
ItemInfo
ordered
by
|
lo
|
.
  
"
"
"
  
item_list
=
[
]
  
grd_seen
=
set
(
)
  
for
raw_key
raw_item
in
root_obj
.
items
(
)
:
    
grd
=
raw_key
.
val
    
if
grd
=
=
'
SRCDIR
'
:
      
continue
    
if
not
grd
.
endswith
(
'
.
grd
'
)
:
      
raise
ValueError
(
'
Invalid
GRD
file
:
%
s
'
%
grd
)
    
if
grd
in
grd_seen
:
      
raise
ValueError
(
'
Duplicate
GRD
:
%
s
'
%
grd
)
    
grd_seen
.
add
(
grd
)
    
item_list
.
append
(
ItemInfo
(
raw_key
.
lo
grd
raw_item
)
)
  
item_list
.
sort
(
key
=
lambda
item
:
item
.
lo
)
  
return
item_list
