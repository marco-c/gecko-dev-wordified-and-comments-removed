"
"
"
Formats
as
a
.
C
file
for
compilation
.
"
"
"
from
__future__
import
print_function
import
codecs
import
os
import
re
import
six
from
grit
import
util
def
_FormatHeader
(
root
output_dir
)
:
  
"
"
"
Returns
the
required
preamble
for
C
files
.
"
"
"
  
resource_header
=
'
resource
.
h
'
  
for
output
in
root
.
GetOutputFiles
(
)
:
    
if
output
.
attrs
[
'
type
'
]
=
=
'
rc_header
'
:
      
resource_header
=
os
.
path
.
abspath
(
output
.
GetOutputFilename
(
)
)
      
resource_header
=
util
.
MakeRelativePath
(
output_dir
resource_header
)
  
return
"
"
"
/
/
This
file
is
automatically
generated
by
GRIT
.
Do
not
edit
.
#
include
"
%
s
"
/
/
All
strings
are
UTF
-
8
"
"
"
%
(
resource_header
)
def
Format
(
root
lang
=
'
en
'
output_dir
=
'
.
'
)
:
  
"
"
"
Outputs
a
C
switch
statement
representing
the
string
table
.
"
"
"
  
from
grit
.
node
import
message
  
assert
isinstance
(
lang
six
.
string_types
)
  
yield
_FormatHeader
(
root
output_dir
)
  
yield
'
const
char
*
GetString
(
int
id
)
{
\
n
switch
(
id
)
{
'
  
for
item
in
root
.
ActiveDescendants
(
)
:
    
with
item
:
      
if
isinstance
(
item
message
.
MessageNode
)
:
        
yield
_FormatMessage
(
item
lang
)
  
yield
'
\
n
default
:
\
n
return
0
;
\
n
}
\
n
}
\
n
'
def
_HexToOct
(
match
)
:
  
"
Return
the
octal
form
of
the
hex
numbers
"
  
hex
=
match
.
group
(
"
hex
"
)
  
result
=
"
"
  
while
len
(
hex
)
:
    
next_num
=
int
(
hex
[
2
:
4
]
16
)
    
result
+
=
"
\
\
"
+
'
%
03o
'
%
next_num
    
hex
=
hex
[
4
:
]
  
return
match
.
group
(
"
escaped_backslashes
"
)
+
result
def
_FormatMessage
(
item
lang
)
:
  
"
"
"
Format
a
single
<
message
>
element
.
"
"
"
  
message
=
item
.
ws_at_start
+
item
.
Translate
(
lang
)
+
item
.
ws_at_end
  
message
=
codecs
.
escape_encode
(
message
.
encode
(
'
utf
-
8
'
)
)
[
0
]
.
decode
(
'
utf
-
8
'
)
  
not_a_backslash
=
r
"
(
^
|
[
^
\
\
]
)
"
  
escaped_backslashes
=
not_a_backslash
+
r
"
(
\
\
\
\
)
*
"
  
hex_digits
=
r
"
(
(
\
\
x
)
[
0
-
9a
-
f
]
{
2
}
)
+
"
  
two_digit_hex_num
=
re
.
compile
(
    
r
"
(
?
P
<
escaped_backslashes
>
%
s
)
(
?
P
<
hex
>
%
s
)
"
    
%
(
escaped_backslashes
hex_digits
)
)
  
message
=
two_digit_hex_num
.
sub
(
_HexToOct
message
)
  
message
=
message
.
replace
(
'
\
\
\
\
'
'
\
\
'
)
  
message
=
message
.
replace
(
'
"
'
'
\
\
"
'
)
  
message
=
util
.
LINEBREAKS
.
sub
(
r
'
\
\
n
'
message
)
  
name_attr
=
item
.
GetTextualIds
(
)
[
0
]
  
return
'
\
n
case
%
s
:
\
n
return
"
%
s
"
;
'
%
(
name_attr
message
)
