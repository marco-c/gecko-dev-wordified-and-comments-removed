#
ifndef
WABT_TYPE_H_
#
define
WABT_TYPE_H_
#
include
<
cassert
>
#
include
<
cstdint
>
#
include
<
vector
>
#
include
"
wabt
/
config
.
h
"
#
include
"
wabt
/
base
-
types
.
h
"
#
include
"
wabt
/
string
-
format
.
h
"
namespace
wabt
{
class
Type
;
using
TypeVector
=
std
:
:
vector
<
Type
>
;
class
Type
{
public
:
enum
Enum
:
int32_t
{
I32
=
-
0x01
I64
=
-
0x02
F32
=
-
0x03
F64
=
-
0x04
V128
=
-
0x05
I8
=
-
0x06
I16
=
-
0x07
FuncRef
=
-
0x10
ExternRef
=
-
0x11
Reference
=
-
0x15
Func
=
-
0x20
Struct
=
-
0x21
Array
=
-
0x22
Void
=
-
0x40
___
=
Void
Any
=
0
I8U
=
4
I16U
=
6
I32U
=
7
}
;
Type
(
)
=
default
;
Type
(
int32_t
code
)
:
enum_
(
static_cast
<
Enum
>
(
code
)
)
type_index_
(
kInvalidIndex
)
{
}
Type
(
Enum
e
)
:
enum_
(
e
)
type_index_
(
kInvalidIndex
)
{
}
Type
(
Enum
e
Index
type_index
)
:
enum_
(
e
)
type_index_
(
type_index
)
{
assert
(
e
=
=
Enum
:
:
Reference
)
;
}
constexpr
operator
Enum
(
)
const
{
return
enum_
;
}
bool
IsRef
(
)
const
{
return
enum_
=
=
Type
:
:
ExternRef
|
|
enum_
=
=
Type
:
:
FuncRef
|
|
enum_
=
=
Type
:
:
Reference
;
}
bool
IsReferenceWithIndex
(
)
const
{
return
enum_
=
=
Type
:
:
Reference
;
}
bool
IsNullableRef
(
)
const
{
return
IsRef
(
)
;
}
std
:
:
string
GetName
(
)
const
{
switch
(
enum_
)
{
case
Type
:
:
I32
:
return
"
i32
"
;
case
Type
:
:
I64
:
return
"
i64
"
;
case
Type
:
:
F32
:
return
"
f32
"
;
case
Type
:
:
F64
:
return
"
f64
"
;
case
Type
:
:
V128
:
return
"
v128
"
;
case
Type
:
:
I8
:
return
"
i8
"
;
case
Type
:
:
I16
:
return
"
i16
"
;
case
Type
:
:
FuncRef
:
return
"
funcref
"
;
case
Type
:
:
Func
:
return
"
func
"
;
case
Type
:
:
Void
:
return
"
void
"
;
case
Type
:
:
Any
:
return
"
any
"
;
case
Type
:
:
ExternRef
:
return
"
externref
"
;
case
Type
:
:
Reference
:
return
StringPrintf
(
"
(
ref
%
d
)
"
type_index_
)
;
default
:
return
StringPrintf
(
"
<
type_index
[
%
d
]
>
"
enum_
)
;
}
}
const
char
*
GetRefKindName
(
)
const
{
switch
(
enum_
)
{
case
Type
:
:
FuncRef
:
return
"
func
"
;
case
Type
:
:
ExternRef
:
return
"
extern
"
;
case
Type
:
:
Struct
:
return
"
struct
"
;
case
Type
:
:
Array
:
return
"
array
"
;
default
:
return
"
<
invalid
>
"
;
}
}
bool
IsIndex
(
)
const
{
return
static_cast
<
int32_t
>
(
enum_
)
>
=
0
;
}
Index
GetIndex
(
)
const
{
assert
(
IsIndex
(
)
)
;
return
static_cast
<
Index
>
(
enum_
)
;
}
Index
GetReferenceIndex
(
)
const
{
assert
(
enum_
=
=
Enum
:
:
Reference
)
;
return
type_index_
;
}
TypeVector
GetInlineVector
(
)
const
{
assert
(
!
IsIndex
(
)
)
;
switch
(
enum_
)
{
case
Type
:
:
Void
:
return
TypeVector
(
)
;
case
Type
:
:
I32
:
case
Type
:
:
I64
:
case
Type
:
:
F32
:
case
Type
:
:
F64
:
case
Type
:
:
V128
:
case
Type
:
:
FuncRef
:
case
Type
:
:
ExternRef
:
case
Type
:
:
Reference
:
return
TypeVector
(
this
this
+
1
)
;
default
:
WABT_UNREACHABLE
;
}
}
private
:
Enum
enum_
;
Index
type_index_
;
}
;
}
#
endif
