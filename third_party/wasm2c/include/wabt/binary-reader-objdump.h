#
ifndef
WABT_BINARY_READER_OBJDUMP_H_
#
define
WABT_BINARY_READER_OBJDUMP_H_
#
include
<
map
>
#
include
<
string
>
#
include
"
wabt
/
common
.
h
"
#
include
"
wabt
/
feature
.
h
"
#
include
"
wabt
/
stream
.
h
"
namespace
wabt
{
struct
Module
;
struct
ReadBinaryOptions
;
enum
class
ObjdumpMode
{
Prepass
Headers
Details
Disassemble
RawData
}
;
struct
ObjdumpOptions
{
Stream
*
log_stream
;
bool
headers
;
bool
details
;
bool
raw
;
bool
disassemble
;
bool
debug
;
bool
relocs
;
bool
section_offsets
;
ObjdumpMode
mode
;
const
char
*
filename
;
const
char
*
section_name
;
}
;
struct
ObjdumpSymbol
{
wabt
:
:
SymbolType
kind
;
std
:
:
string
name
;
Index
index
;
}
;
struct
ObjdumpNames
{
std
:
:
string_view
Get
(
Index
index
)
const
;
void
Set
(
Index
index
std
:
:
string_view
name
)
;
std
:
:
map
<
Index
std
:
:
string
>
names
;
}
;
struct
ObjdumpLocalNames
{
std
:
:
string_view
Get
(
Index
function_index
Index
local_index
)
const
;
void
Set
(
Index
function_index
Index
local_index
std
:
:
string_view
name
)
;
std
:
:
map
<
std
:
:
pair
<
Index
Index
>
std
:
:
string
>
names
;
}
;
struct
ObjdumpState
{
std
:
:
vector
<
Reloc
>
code_relocations
;
std
:
:
vector
<
Reloc
>
data_relocations
;
ObjdumpNames
type_names
;
ObjdumpNames
function_names
;
ObjdumpNames
global_names
;
ObjdumpNames
section_names
;
ObjdumpNames
tag_names
;
ObjdumpNames
segment_names
;
ObjdumpNames
table_names
;
ObjdumpLocalNames
local_names
;
std
:
:
vector
<
ObjdumpSymbol
>
symtab
;
std
:
:
map
<
Index
Index
>
function_param_counts
;
std
:
:
map
<
Index
Index
>
function_types
;
}
;
Result
ReadBinaryObjdump
(
const
uint8_t
*
data
size_t
size
ObjdumpOptions
*
options
ObjdumpState
*
state
)
;
}
#
endif
