#
ifndef
WABT_BINARY_READER_OPCNT_H_
#
define
WABT_BINARY_READER_OPCNT_H_
#
include
<
map
>
#
include
<
vector
>
#
include
"
wabt
/
common
.
h
"
#
include
"
wabt
/
opcode
.
h
"
namespace
wabt
{
struct
Module
;
struct
ReadBinaryOptions
;
class
Stream
;
class
OpcodeInfo
{
public
:
enum
class
Kind
{
Bare
Uint32
Uint64
Index
Float32
Float64
Uint32Uint32
Uint32Uint32Uint32
Uint32Uint32Uint32Uint32
BlockSig
BrTable
V128
}
;
explicit
OpcodeInfo
(
Opcode
Kind
)
;
template
<
typename
T
>
OpcodeInfo
(
Opcode
Kind
T
*
data
size_t
count
=
1
)
;
template
<
typename
T
>
OpcodeInfo
(
Opcode
Kind
T
*
data
size_t
count
T
extra
)
;
Opcode
opcode
(
)
const
{
return
opcode_
;
}
void
Write
(
Stream
&
)
;
private
:
template
<
typename
T
>
std
:
:
pair
<
const
T
*
size_t
>
GetDataArray
(
)
const
;
template
<
typename
T
>
const
T
*
GetData
(
size_t
expected_size
=
1
)
const
;
template
<
typename
T
typename
F
>
void
WriteArray
(
Stream
&
stream
F
&
&
write_func
)
;
Opcode
opcode_
;
Kind
kind_
;
std
:
:
vector
<
uint8_t
>
data_
;
friend
bool
operator
=
=
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
friend
bool
operator
!
=
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
friend
bool
operator
<
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
friend
bool
operator
<
=
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
friend
bool
operator
>
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
friend
bool
operator
>
=
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
}
;
bool
operator
=
=
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
bool
operator
!
=
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
bool
operator
<
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
bool
operator
<
=
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
bool
operator
>
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
bool
operator
>
=
(
const
OpcodeInfo
&
const
OpcodeInfo
&
)
;
using
OpcodeInfoCounts
=
std
:
:
map
<
OpcodeInfo
size_t
>
;
Result
ReadBinaryOpcnt
(
const
void
*
data
size_t
size
const
ReadBinaryOptions
&
options
OpcodeInfoCounts
*
opcode_counts
)
;
}
#
endif
