#
include
"
gtest
/
gtest
.
h
"
#
include
"
src
/
binary
-
reader
.
h
"
#
include
"
src
/
binary
-
reader
-
nop
.
h
"
#
include
"
src
/
leb128
.
h
"
#
include
"
src
/
opcode
.
h
"
using
namespace
wabt
;
namespace
{
struct
BinaryReaderError
:
BinaryReaderNop
{
bool
OnError
(
const
Error
&
error
)
override
{
first_error
=
error
;
return
true
;
}
Error
first_error
;
}
;
}
TEST
(
BinaryReader
DisabledOpcodes
)
{
ReadBinaryOptions
options
;
for
(
uint32_t
i
=
0
;
i
<
static_cast
<
uint32_t
>
(
Opcode
:
:
Invalid
)
;
+
+
i
)
{
Opcode
opcode
(
static_cast
<
Opcode
:
:
Enum
>
(
i
)
)
;
if
(
opcode
.
IsEnabled
(
options
.
features
)
)
{
continue
;
}
std
:
:
vector
<
uint8_t
>
b
=
opcode
.
GetBytes
(
)
;
assert
(
b
.
size
(
)
<
=
3
)
;
b
.
resize
(
3
)
;
uint8_t
data
[
]
=
{
0x00
0x61
0x73
0x6d
0x01
0x00
0x00
0x00
0x01
0x04
0x01
0x60
0x00
0x00
0x03
0x02
0x01
0x00
0x0a
0x07
0x01
0x05
0x00
b
[
0
]
b
[
1
]
b
[
2
]
0x0b
}
;
const
size_t
size
=
sizeof
(
data
)
;
BinaryReaderError
reader
;
Result
result
=
ReadBinary
(
data
size
&
reader
options
)
;
EXPECT_EQ
(
Result
:
:
Error
result
)
;
const
std
:
:
string
&
message
=
reader
.
first_error
.
message
;
EXPECT_EQ
(
0u
message
.
find
(
"
unexpected
opcode
"
)
)
<
<
"
Got
error
message
:
"
<
<
message
;
}
}
