#
ifndef
WABT_BINDING_HASH_H_
#
define
WABT_BINDING_HASH_H_
#
include
<
functional
>
#
include
<
string
>
#
include
<
unordered_map
>
#
include
<
vector
>
#
include
"
src
/
common
.
h
"
#
include
"
src
/
string
-
view
.
h
"
namespace
wabt
{
struct
Var
;
struct
Binding
{
explicit
Binding
(
Index
index
)
:
index
(
index
)
{
}
Binding
(
const
Location
&
loc
Index
index
)
:
loc
(
loc
)
index
(
index
)
{
}
Location
loc
;
Index
index
;
}
;
class
BindingHash
:
public
std
:
:
unordered_multimap
<
std
:
:
string
Binding
>
{
public
:
typedef
std
:
:
function
<
void
(
const
value_type
&
const
value_type
&
)
>
DuplicateCallback
;
void
FindDuplicates
(
DuplicateCallback
callback
)
const
;
Index
FindIndex
(
const
Var
&
)
const
;
Index
FindIndex
(
const
std
:
:
string
&
name
)
const
{
auto
iter
=
find
(
name
)
;
return
iter
!
=
end
(
)
?
iter
-
>
second
.
index
:
kInvalidIndex
;
}
Index
FindIndex
(
string_view
name
)
const
{
return
FindIndex
(
name
.
to_string
(
)
)
;
}
private
:
typedef
std
:
:
vector
<
const
value_type
*
>
ValueTypeVector
;
void
CreateDuplicatesVector
(
ValueTypeVector
*
out_duplicates
)
const
;
void
SortDuplicatesVectorByLocation
(
ValueTypeVector
*
duplicates
)
const
;
void
CallCallbacks
(
const
ValueTypeVector
&
duplicates
DuplicateCallback
callback
)
const
;
}
;
}
#
endif
