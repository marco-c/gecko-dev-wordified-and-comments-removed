#
ifndef
WABT_HASH_UTIL_H_
#
define
WABT_HASH_UTIL_H_
#
include
<
cstdlib
>
#
include
<
functional
>
namespace
wabt
{
typedef
std
:
:
size_t
hash_code
;
inline
hash_code
HashCombine
(
)
{
return
0
;
}
inline
hash_code
HashCombine
(
hash_code
seed
)
{
return
seed
;
}
hash_code
HashCombine
(
hash_code
x
hash_code
y
)
;
template
<
typename
T
typename
.
.
.
U
>
inline
hash_code
HashCombine
(
const
T
&
first
const
U
&
.
.
.
rest
)
{
return
HashCombine
(
HashCombine
(
rest
.
.
.
)
std
:
:
hash
<
T
>
(
)
(
first
)
)
;
}
template
<
typename
It
>
inline
hash_code
HashRange
(
It
first
It
last
)
{
hash_code
result
=
0
;
for
(
auto
iter
=
first
;
iter
!
=
last
;
+
+
iter
)
{
result
=
HashCombine
(
result
*
iter
)
;
}
return
result
;
}
}
#
endif
