#
include
"
src
/
color
.
h
"
#
include
<
cstdlib
>
#
include
"
src
/
common
.
h
"
#
if
_WIN32
#
include
<
io
.
h
>
#
include
<
windows
.
h
>
#
elif
HAVE_UNISTD_H
#
include
<
unistd
.
h
>
#
endif
namespace
wabt
{
Color
:
:
Color
(
FILE
*
file
bool
enabled
)
:
file_
(
file
)
{
enabled_
=
enabled
&
&
SupportsColor
(
file_
)
;
}
bool
Color
:
:
SupportsColor
(
FILE
*
file
)
{
char
*
force
=
getenv
(
"
FORCE_COLOR
"
)
;
if
(
force
)
{
return
atoi
(
force
)
!
=
0
;
}
#
if
_WIN32
{
#
if
HAVE_WIN32_VT100
HANDLE
handle
;
if
(
file
=
=
stdout
)
{
handle
=
GetStdHandle
(
STD_OUTPUT_HANDLE
)
;
}
else
if
(
file
=
=
stderr
)
{
handle
=
GetStdHandle
(
STD_ERROR_HANDLE
)
;
}
else
{
return
false
;
}
DWORD
mode
;
if
(
!
_isatty
(
_fileno
(
file
)
)
|
|
!
GetConsoleMode
(
handle
&
mode
)
|
|
!
SetConsoleMode
(
handle
mode
|
ENABLE_VIRTUAL_TERMINAL_PROCESSING
)
)
{
return
false
;
}
return
true
;
#
else
return
false
;
#
endif
}
#
elif
HAVE_UNISTD_H
return
isatty
(
fileno
(
file
)
)
;
#
else
return
false
;
#
endif
}
void
Color
:
:
WriteCode
(
const
char
*
code
)
const
{
if
(
enabled_
)
{
fputs
(
code
file_
)
;
}
}
}
