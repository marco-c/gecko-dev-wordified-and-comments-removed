#
ifndef
WABT_LEB128_H_
#
define
WABT_LEB128_H_
#
include
<
cstdint
>
#
include
"
src
/
common
.
h
"
namespace
wabt
{
class
Stream
;
Offset
U32Leb128Length
(
uint32_t
value
)
;
void
WriteU32Leb128
(
Stream
*
stream
uint32_t
value
const
char
*
desc
)
;
void
WriteS32Leb128
(
Stream
*
stream
uint32_t
value
const
char
*
desc
)
;
void
WriteS64Leb128
(
Stream
*
stream
uint64_t
value
const
char
*
desc
)
;
void
WriteFixedS32Leb128
(
Stream
*
stream
uint32_t
value
const
char
*
desc
)
;
void
WriteFixedU32Leb128
(
Stream
*
stream
uint32_t
value
const
char
*
desc
)
;
Offset
WriteU32Leb128At
(
Stream
*
stream
Offset
offset
uint32_t
value
const
char
*
desc
)
;
Offset
WriteFixedU32Leb128At
(
Stream
*
stream
Offset
offset
uint32_t
value
const
char
*
desc
)
;
Offset
WriteU32Leb128Raw
(
uint8_t
*
data
uint8_t
*
end
uint32_t
value
)
;
Offset
WriteFixedU32Leb128Raw
(
uint8_t
*
data
uint8_t
*
end
uint32_t
value
)
;
template
<
typename
T
>
void
WriteU32Leb128
(
Stream
*
stream
T
value
const
char
*
desc
)
{
WriteU32Leb128
(
stream
static_cast
<
uint32_t
>
(
value
)
desc
)
;
}
template
<
typename
T
>
void
WriteS32Leb128
(
Stream
*
stream
T
value
const
char
*
desc
)
{
WriteS32Leb128
(
stream
static_cast
<
uint32_t
>
(
value
)
desc
)
;
}
size_t
ReadU32Leb128
(
const
uint8_t
*
p
const
uint8_t
*
end
uint32_t
*
out_value
)
;
size_t
ReadU64Leb128
(
const
uint8_t
*
p
const
uint8_t
*
end
uint64_t
*
out_value
)
;
size_t
ReadS32Leb128
(
const
uint8_t
*
p
const
uint8_t
*
end
uint32_t
*
out_value
)
;
size_t
ReadS64Leb128
(
const
uint8_t
*
p
const
uint8_t
*
end
uint64_t
*
out_value
)
;
}
#
endif
