#
ifndef
WABT_BINARY_H_
#
define
WABT_BINARY_H_
#
include
"
src
/
common
.
h
"
#
define
WABT_BINARY_MAGIC
0x6d736100
#
define
WABT_BINARY_VERSION
1
#
define
WABT_BINARY_LIMITS_HAS_MAX_FLAG
0x1
#
define
WABT_BINARY_LIMITS_IS_SHARED_FLAG
0x2
#
define
WABT_BINARY_LIMITS_IS_64_FLAG
0x4
#
define
WABT_BINARY_LIMITS_ALL_FLAGS
\
(
WABT_BINARY_LIMITS_HAS_MAX_FLAG
|
WABT_BINARY_LIMITS_IS_SHARED_FLAG
|
\
WABT_BINARY_LIMITS_IS_64_FLAG
)
#
define
WABT_BINARY_SECTION_NAME
"
name
"
#
define
WABT_BINARY_SECTION_RELOC
"
reloc
"
#
define
WABT_BINARY_SECTION_LINKING
"
linking
"
#
define
WABT_BINARY_SECTION_DYLINK
"
dylink
"
#
define
WABT_FOREACH_BINARY_SECTION
(
V
)
\
V
(
Custom
custom
0
)
\
V
(
Type
type
1
)
\
V
(
Import
import
2
)
\
V
(
Function
function
3
)
\
V
(
Table
table
4
)
\
V
(
Memory
memory
5
)
\
V
(
Event
event
13
)
\
V
(
Global
global
6
)
\
V
(
Export
export
7
)
\
V
(
Start
start
8
)
\
V
(
Elem
elem
9
)
\
V
(
DataCount
data_count
12
)
\
V
(
Code
code
10
)
\
V
(
Data
data
11
)
namespace
wabt
{
enum
class
BinarySection
{
#
define
V
(
Name
name
code
)
Name
=
code
WABT_FOREACH_BINARY_SECTION
(
V
)
#
undef
V
Invalid
=
~
0
First
=
Custom
Last
=
Event
}
;
static
const
int
kBinarySectionCount
=
WABT_ENUM_COUNT
(
BinarySection
)
;
enum
class
BinarySectionOrder
{
#
define
V
(
Name
name
code
)
Name
WABT_FOREACH_BINARY_SECTION
(
V
)
#
undef
V
}
;
BinarySectionOrder
GetSectionOrder
(
BinarySection
)
;
const
char
*
GetSectionName
(
BinarySection
)
;
enum
class
NameSectionSubsection
{
Module
=
0
Function
=
1
Local
=
2
Label
=
3
Type
=
4
Table
=
5
Memory
=
6
Global
=
7
ElemSegment
=
8
DataSegment
=
9
Last
=
DataSegment
}
;
const
char
*
GetNameSectionSubsectionName
(
NameSectionSubsection
subsec
)
;
}
#
endif
