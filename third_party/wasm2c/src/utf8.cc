#
include
"
src
/
utf8
.
h
"
#
include
<
cstdint
>
namespace
wabt
{
namespace
{
const
int
s_utf8_length
[
256
]
=
{
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
4
4
4
4
4
0
0
0
0
0
0
0
0
0
0
0
}
;
bool
IsCont
(
uint8_t
c
)
{
return
(
c
&
0xc0
)
=
=
0x80
;
}
}
bool
IsValidUtf8
(
const
char
*
s
size_t
s_length
)
{
const
uint8_t
*
p
=
reinterpret_cast
<
const
uint8_t
*
>
(
s
)
;
const
uint8_t
*
end
=
p
+
s_length
;
while
(
p
<
end
)
{
uint8_t
cu0
=
*
p
;
int
length
=
s_utf8_length
[
cu0
]
;
if
(
p
+
length
>
end
)
{
return
false
;
}
switch
(
length
)
{
case
0
:
return
false
;
case
1
:
p
+
+
;
break
;
case
2
:
p
+
+
;
if
(
!
IsCont
(
*
p
+
+
)
)
{
return
false
;
}
break
;
case
3
:
{
p
+
+
;
uint8_t
cu1
=
*
p
+
+
;
uint8_t
cu2
=
*
p
+
+
;
if
(
!
(
IsCont
(
cu1
)
&
&
IsCont
(
cu2
)
)
|
|
(
cu0
=
=
0xe0
&
&
cu1
<
0xa0
)
|
|
(
cu0
=
=
0xed
&
&
cu1
>
=
0xa0
)
)
return
false
;
break
;
}
case
4
:
{
p
+
+
;
uint8_t
cu1
=
*
p
+
+
;
uint8_t
cu2
=
*
p
+
+
;
uint8_t
cu3
=
*
p
+
+
;
if
(
!
(
IsCont
(
cu1
)
&
&
IsCont
(
cu2
)
&
&
IsCont
(
cu3
)
)
|
|
(
cu0
=
=
0xf0
&
&
cu1
<
0x90
)
|
|
(
cu0
=
=
0xf4
&
&
cu1
>
=
0x90
)
)
return
false
;
break
;
}
}
}
return
true
;
}
}
