#
ifndef
SoundTouch_H
#
define
SoundTouch_H
#
include
"
FIFOSamplePipe
.
h
"
#
include
"
STTypes
.
h
"
namespace
soundtouch
{
#
define
SOUNDTOUCH_VERSION
"
2
.
2
"
#
define
SOUNDTOUCH_VERSION_ID
(
20200
)
#
define
SETTING_USE_AA_FILTER
0
#
define
SETTING_AA_FILTER_LENGTH
1
#
define
SETTING_USE_QUICKSEEK
2
#
define
SETTING_SEQUENCE_MS
3
#
define
SETTING_SEEKWINDOW_MS
4
#
define
SETTING_OVERLAP_MS
5
#
define
SETTING_NOMINAL_INPUT_SEQUENCE
6
#
define
SETTING_NOMINAL_OUTPUT_SEQUENCE
7
#
define
SETTING_INITIAL_LATENCY
8
class
SOUNDTOUCH_API
SoundTouch
:
public
FIFOProcessor
{
private
:
class
RateTransposer
*
pRateTransposer
;
class
TDStretch
*
pTDStretch
;
double
virtualRate
;
double
virtualTempo
;
double
virtualPitch
;
bool
bSrateSet
;
double
samplesExpectedOut
;
long
samplesOutput
;
void
calcEffectiveRateAndTempo
(
)
;
protected
:
uint
channels
;
double
rate
;
double
tempo
;
public
:
SoundTouch
(
)
;
virtual
~
SoundTouch
(
)
;
static
const
char
*
getVersionString
(
)
;
static
uint
getVersionId
(
)
;
void
setRate
(
double
newRate
)
;
void
setTempo
(
double
newTempo
)
;
void
setRateChange
(
double
newRate
)
;
void
setTempoChange
(
double
newTempo
)
;
void
setPitch
(
double
newPitch
)
;
void
setPitchOctaves
(
double
newPitch
)
;
void
setPitchSemiTones
(
int
newPitch
)
;
void
setPitchSemiTones
(
double
newPitch
)
;
void
setChannels
(
uint
numChannels
)
;
void
setSampleRate
(
uint
srate
)
;
double
getInputOutputSampleRatio
(
)
;
void
flush
(
)
;
virtual
void
putSamples
(
const
SAMPLETYPE
*
samples
uint
numSamples
)
;
virtual
uint
receiveSamples
(
SAMPLETYPE
*
output
uint
maxSamples
)
;
virtual
uint
receiveSamples
(
uint
maxSamples
)
;
virtual
void
clear
(
)
;
bool
setSetting
(
int
settingId
int
value
)
;
int
getSetting
(
int
settingId
)
const
;
virtual
uint
numUnprocessedSamples
(
)
const
;
uint
numChannels
(
)
const
{
return
channels
;
}
}
;
}
#
endif
