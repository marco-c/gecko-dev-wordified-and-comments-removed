#
ifndef
RLBOXSOUNDTOUCH_H_
#
define
RLBOXSOUNDTOUCH_H_
#
include
"
RLBoxSoundTouchTypes
.
h
"
#
include
"
mozilla
/
rlbox
/
rlbox_config
.
h
"
#
undef
RLBOX_WASM2C_MODULE_NAME
#
define
RLBOX_WASM2C_MODULE_NAME
soundtouch
#
ifdef
MOZ_WASM_SANDBOXING_SOUNDTOUCH
#
include
"
soundtouch
.
wasm
.
h
"
#
define
RLBOX_USE_STATIC_CALLS
(
)
rlbox_wasm2c_sandbox_lookup_symbol
#
include
"
mozilla
/
rlbox
/
rlbox_wasm2c_sandbox
.
hpp
"
#
else
#
define
RLBOX_USE_STATIC_CALLS
(
)
rlbox_noop_sandbox_lookup_symbol
#
include
"
mozilla
/
rlbox
/
rlbox_noop_sandbox
.
hpp
"
#
endif
#
include
"
mozilla
/
rlbox
/
rlbox
.
hpp
"
#
include
"
AudioStream
.
h
"
#
define
ST_NO_EXCEPTION_HANDLING
1
#
include
"
soundtouch
/
SoundTouchFactory
.
h
"
#
if
defined
(
WIN32
)
#
if
defined
(
BUILDING_SOUNDTOUCH
)
#
define
RLBOX_SOUNDTOUCH_API
__declspec
(
dllexport
)
#
else
#
define
RLBOX_SOUNDTOUCH_API
__declspec
(
dllimport
)
#
endif
#
else
#
define
RLBOX_SOUNDTOUCH_API
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
endif
namespace
mozilla
{
class
RLBoxSoundTouch
{
public
:
RLBOX_SOUNDTOUCH_API
RLBoxSoundTouch
(
)
;
RLBOX_SOUNDTOUCH_API
~
RLBoxSoundTouch
(
)
;
RLBOX_SOUNDTOUCH_API
void
setSampleRate
(
uint
aRate
)
;
RLBOX_SOUNDTOUCH_API
void
setChannels
(
uint
aChannels
)
;
RLBOX_SOUNDTOUCH_API
void
setPitch
(
double
aPitch
)
;
RLBOX_SOUNDTOUCH_API
void
setSetting
(
int
aSettingId
int
aValue
)
;
RLBOX_SOUNDTOUCH_API
void
setTempo
(
double
aTempo
)
;
RLBOX_SOUNDTOUCH_API
uint
numChannels
(
)
;
RLBOX_SOUNDTOUCH_API
tainted_soundtouch
<
uint
>
numSamples
(
)
;
RLBOX_SOUNDTOUCH_API
tainted_soundtouch
<
uint
>
numUnprocessedSamples
(
)
;
RLBOX_SOUNDTOUCH_API
void
setRate
(
double
aRate
)
;
RLBOX_SOUNDTOUCH_API
void
putSamples
(
const
mozilla
:
:
AudioDataValue
*
aSamples
uint
aNumSamples
)
;
RLBOX_SOUNDTOUCH_API
uint
receiveSamples
(
mozilla
:
:
AudioDataValue
*
aOutput
uint
aMaxSamples
)
;
RLBOX_SOUNDTOUCH_API
void
flush
(
)
;
private
:
uint
mChannels
{
0
}
;
rlbox_sandbox_soundtouch
mSandbox
;
tainted_soundtouch
<
mozilla
:
:
AudioDataValue
*
>
mSampleBuffer
{
nullptr
}
;
uint
mSampleBufferSize
{
1
}
;
tainted_soundtouch
<
soundtouch
:
:
SoundTouch
*
>
mTimeStretcher
{
nullptr
}
;
RLBOX_SOUNDTOUCH_API
void
resizeSampleBuffer
(
uint
aNewSize
)
;
}
;
}
#
endif
