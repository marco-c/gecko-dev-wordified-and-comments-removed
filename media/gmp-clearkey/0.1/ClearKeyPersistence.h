#
ifndef
__ClearKeyPersistence_h__
#
define
__ClearKeyPersistence_h__
#
include
"
stddef
.
h
"
#
include
"
content_decryption_module
.
h
"
#
include
"
RefCounted
.
h
"
#
include
<
functional
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
class
ClearKeySessionManager
;
enum
PersistentKeyState
{
UNINITIALIZED
LOADING
LOADED
}
;
class
ClearKeyPersistence
:
public
RefCounted
{
public
:
explicit
ClearKeyPersistence
(
cdm
:
:
Host_8
*
aHost
)
;
void
EnsureInitialized
(
bool
aPersistentStateAllowed
std
:
:
function
<
void
(
)
>
&
&
aOnInitialized
)
;
bool
IsLoaded
(
)
const
;
std
:
:
string
GetNewSessionId
(
cdm
:
:
SessionType
aSessionType
)
;
bool
IsPersistentSessionId
(
const
std
:
:
string
&
aSid
)
;
void
PersistentSessionRemoved
(
std
:
:
string
&
aSid
)
;
private
:
cdm
:
:
Host_8
*
mHost
=
nullptr
;
PersistentKeyState
mPersistentKeyState
=
PersistentKeyState
:
:
UNINITIALIZED
;
std
:
:
set
<
uint32_t
>
mPersistentSessionIds
;
void
ReadAllRecordsFromIndex
(
std
:
:
function
<
void
(
)
>
&
&
aOnComplete
)
;
void
WriteIndex
(
)
;
}
;
#
endif
