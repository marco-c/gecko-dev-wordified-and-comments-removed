#
ifndef
__VideoDecoder_h__
#
define
__VideoDecoder_h__
#
include
<
atomic
>
#
include
<
queue
>
#
include
<
thread
>
#
include
"
stddef
.
h
"
#
include
"
content_decryption_module
.
h
"
#
include
"
WMFH264Decoder
.
h
"
class
VideoDecoder
:
public
RefCounted
{
public
:
explicit
VideoDecoder
(
cdm
:
:
Host_10
*
aHost
)
;
cdm
:
:
Status
InitDecode
(
const
cdm
:
:
VideoDecoderConfig_2
&
aConfig
)
;
cdm
:
:
Status
Decode
(
const
cdm
:
:
InputBuffer_2
&
aEncryptedBuffer
cdm
:
:
VideoFrame
*
aVideoFrame
)
;
void
Reset
(
)
;
void
DecodingComplete
(
)
;
bool
HasShutdown
(
)
{
return
mHasShutdown
;
}
private
:
virtual
~
VideoDecoder
(
)
;
cdm
:
:
Status
Drain
(
cdm
:
:
VideoFrame
*
aVideoFrame
)
;
struct
DecodeData
{
std
:
:
vector
<
uint8_t
>
mBuffer
;
uint64_t
mTimestamp
=
0
;
CryptoMetaData
mCrypto
;
}
;
cdm
:
:
Status
OutputFrame
(
cdm
:
:
VideoFrame
*
aVideoFrame
)
;
HRESULT
SampleToVideoFrame
(
IMFSample
*
aSample
int32_t
aPictureWidth
int32_t
aPictureHeight
int32_t
aStride
int32_t
aFrameHeight
cdm
:
:
VideoFrame
*
aVideoFrame
)
;
cdm
:
:
Host_10
*
mHost
;
wmf
:
:
AutoPtr
<
wmf
:
:
WMFH264Decoder
>
mDecoder
;
std
:
:
queue
<
wmf
:
:
CComPtr
<
IMFSample
>
>
mOutputQueue
;
bool
mHasShutdown
;
}
;
#
endif
