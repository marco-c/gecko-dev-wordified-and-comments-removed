#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
<
limits
>
#
include
"
BigEndian
.
h
"
#
include
"
ClearKeyDecryptionManager
.
h
"
#
include
"
ClearKeyUtils
.
h
"
#
include
"
VideoDecoder
.
h
"
using
namespace
wmf
;
using
namespace
cdm
;
VideoDecoder
:
:
VideoDecoder
(
Host_8
*
aHost
)
:
mHost
(
aHost
)
mHasShutdown
(
false
)
{
CK_LOGD
(
"
VideoDecoder
created
"
)
;
AddRef
(
)
;
mDecoder
=
new
WMFH264Decoder
(
)
;
#
ifdef
__MINGW32__
uint32_t
cores
=
1u
;
#
else
uint32_t
cores
=
std
:
:
max
(
1u
std
:
:
thread
:
:
hardware_concurrency
(
)
)
;
#
endif
HRESULT
hr
=
mDecoder
-
>
Init
(
cores
)
;
}
VideoDecoder
:
:
~
VideoDecoder
(
)
{
CK_LOGD
(
"
VideoDecoder
destroyed
"
)
;
}
Status
VideoDecoder
:
:
InitDecode
(
const
VideoDecoderConfig
&
aConfig
)
{
CK_LOGD
(
"
VideoDecoder
:
:
InitDecode
"
)
;
if
(
!
mDecoder
)
{
CK_LOGD
(
"
VideoDecoder
:
:
InitDecode
failed
to
init
WMFH264Decoder
"
)
;
return
Status
:
:
kDecodeError
;
}
return
Status
:
:
kSuccess
;
}
Status
VideoDecoder
:
:
Decode
(
const
InputBuffer
&
aInputBuffer
VideoFrame
*
aVideoFrame
)
{
CK_LOGD
(
"
VideoDecoder
:
:
Decode
"
)
;
if
(
!
aInputBuffer
.
data
)
{
CK_LOGD
(
"
VideoDecoder
:
:
Decode
Input
buffer
null
:
Draining
"
)
;
return
Drain
(
aVideoFrame
)
;
}
DecodeData
*
data
=
new
DecodeData
(
)
;
Assign
(
data
-
>
mBuffer
aInputBuffer
.
data
aInputBuffer
.
data_size
)
;
data
-
>
mTimestamp
=
aInputBuffer
.
timestamp
;
data
-
>
mCrypto
=
CryptoMetaData
(
&
aInputBuffer
)
;
AutoPtr
<
DecodeData
>
d
(
data
)
;
HRESULT
hr
;
if
(
!
data
|
|
!
mDecoder
)
{
CK_LOGE
(
"
Decode
job
not
set
up
correctly
!
"
)
;
return
Status
:
:
kDecodeError
;
}
std
:
:
vector
<
uint8_t
>
&
buffer
=
data
-
>
mBuffer
;
if
(
data
-
>
mCrypto
.
IsValid
(
)
)
{
Status
rv
=
ClearKeyDecryptionManager
:
:
Get
(
)
-
>
Decrypt
(
buffer
data
-
>
mCrypto
)
;
if
(
STATUS_FAILED
(
rv
)
)
{
CK_LOGARRAY
(
"
Failed
to
decrypt
video
using
key
"
aInputBuffer
.
key_id
aInputBuffer
.
key_id_size
)
;
return
rv
;
}
}
hr
=
mDecoder
-
>
Input
(
buffer
.
data
(
)
buffer
.
size
(
)
data
-
>
mTimestamp
)
;
CK_LOGD
(
"
VideoDecoder
:
:
Decode
(
)
Input
ret
hr
=
0x
%
x
"
hr
)
;
if
(
FAILED
(
hr
)
)
{
assert
(
hr
!
=
MF_E_TRANSFORM_NEED_MORE_INPUT
)
;
CK_LOGE
(
"
VideoDecoder
:
:
Decode
(
)
decode
failed
ret
=
0x
%
x
%
s
"
hr
(
(
hr
=
=
MF_E_NOTACCEPTING
)
?
"
(
MF_E_NOTACCEPTING
)
"
:
"
"
)
)
;
CK_LOGD
(
"
Decode
failed
.
The
decoder
is
not
accepting
input
"
)
;
return
Status
:
:
kDecodeError
;
}
return
OutputFrame
(
aVideoFrame
)
;
}
Status
VideoDecoder
:
:
OutputFrame
(
VideoFrame
*
aVideoFrame
)
{
CK_LOGD
(
"
VideoDecoder
:
:
OutputFrame
"
)
;
HRESULT
hr
=
S_OK
;
while
(
true
)
{
CComPtr
<
IMFSample
>
output
;
hr
=
mDecoder
-
>
Output
(
&
output
)
;
if
(
hr
!
=
S_OK
)
{
break
;
}
CK_LOGD
(
"
VideoDecoder
:
:
OutputFrame
Decoder
output
ret
=
0x
%
x
"
hr
)
;
mOutputQueue
.
push
(
output
)
;
CK_LOGD
(
"
VideoDecoder
:
:
OutputFrame
:
Queue
size
:
%
u
"
mOutputQueue
.
size
(
)
)
;
}
if
(
mOutputQueue
.
empty
(
)
)
{
CK_LOGD
(
"
Decode
failed
.
Not
enought
data
;
Requesting
more
input
"
)
;
return
Status
:
:
kNeedMoreData
;
}
if
(
hr
!
=
MF_E_TRANSFORM_NEED_MORE_INPUT
&
&
FAILED
(
hr
)
)
{
CK_LOGD
(
"
Decode
failed
output
ret
=
0x
%
x
"
hr
)
;
return
Status
:
:
kDecodeError
;
}
CComPtr
<
IMFSample
>
result
=
mOutputQueue
.
front
(
)
;
mOutputQueue
.
pop
(
)
;
if
(
mDecoder
-
>
GetStride
(
)
<
=
0
)
{
CK_LOGD
(
"
VideoDecoder
:
:
OutputFrame
Failed
!
(
negative
stride
)
"
)
;
return
Status
:
:
kDecodeError
;
}
hr
=
SampleToVideoFrame
(
result
mDecoder
-
>
GetFrameWidth
(
)
mDecoder
-
>
GetFrameHeight
(
)
mDecoder
-
>
GetStride
(
)
aVideoFrame
)
;
if
(
FAILED
(
hr
)
)
{
CK_LOGD
(
"
VideoDecoder
:
:
OutputFrame
Failed
!
"
)
;
return
Status
:
:
kDecodeError
;
}
CK_LOGD
(
"
VideoDecoder
:
:
OutputFrame
Succeeded
.
"
)
;
return
Status
:
:
kSuccess
;
}
HRESULT
VideoDecoder
:
:
SampleToVideoFrame
(
IMFSample
*
aSample
int32_t
aWidth
int32_t
aHeight
int32_t
aStride
VideoFrame
*
aVideoFrame
)
{
CK_LOGD
(
"
[
%
p
]
VideoDecoder
:
:
SampleToVideoFrame
(
)
"
this
)
;
ENSURE
(
aSample
!
=
nullptr
E_POINTER
)
;
ENSURE
(
aVideoFrame
!
=
nullptr
E_POINTER
)
;
HRESULT
hr
;
CComPtr
<
IMFMediaBuffer
>
mediaBuffer
;
aVideoFrame
-
>
SetFormat
(
kI420
)
;
hr
=
aSample
-
>
ConvertToContiguousBuffer
(
&
mediaBuffer
)
;
ENSURE
(
SUCCEEDED
(
hr
)
hr
)
;
BYTE
*
data
=
nullptr
;
LONG
stride
=
0
;
CComPtr
<
IMF2DBuffer
>
twoDBuffer
;
hr
=
mediaBuffer
-
>
QueryInterface
(
static_cast
<
IMF2DBuffer
*
*
>
(
&
twoDBuffer
)
)
;
if
(
SUCCEEDED
(
hr
)
)
{
hr
=
twoDBuffer
-
>
Lock2D
(
&
data
&
stride
)
;
ENSURE
(
SUCCEEDED
(
hr
)
hr
)
;
}
else
{
hr
=
mediaBuffer
-
>
Lock
(
&
data
nullptr
nullptr
)
;
ENSURE
(
SUCCEEDED
(
hr
)
hr
)
;
stride
=
aStride
;
}
uint32_t
padding
=
0
;
if
(
aHeight
%
16
!
=
0
)
{
padding
=
16
-
(
aHeight
%
16
)
;
}
uint32_t
ySize
=
stride
*
(
aHeight
+
padding
)
;
uint32_t
uSize
=
stride
*
(
aHeight
+
padding
)
/
4
;
uint32_t
halfStride
=
(
stride
+
1
)
/
2
;
uint32_t
halfHeight
=
(
aHeight
+
1
)
/
2
;
aVideoFrame
-
>
SetStride
(
VideoFrame
:
:
kYPlane
stride
)
;
aVideoFrame
-
>
SetStride
(
VideoFrame
:
:
kUPlane
halfStride
)
;
aVideoFrame
-
>
SetStride
(
VideoFrame
:
:
kVPlane
halfStride
)
;
aVideoFrame
-
>
SetSize
(
Size
(
aWidth
aHeight
)
)
;
uint64_t
bufferSize
=
ySize
+
2
*
uSize
;
if
(
bufferSize
>
UINT32_MAX
)
{
CK_LOGD
(
"
VideoDecoder
:
:
SampleToFrame
Buffersize
bigger
than
UINT32_MAX
"
)
;
return
E_FAIL
;
}
Buffer
*
buffer
=
mHost
-
>
Allocate
(
bufferSize
)
;
aVideoFrame
-
>
SetFrameBuffer
(
buffer
)
;
if
(
!
buffer
)
{
CK_LOGD
(
"
VideoDecoder
:
:
SampleToFrame
Out
of
memory
"
)
;
return
E_OUTOFMEMORY
;
}
uint8_t
*
outBuffer
=
buffer
-
>
Data
(
)
;
aVideoFrame
-
>
SetPlaneOffset
(
VideoFrame
:
:
kYPlane
0
)
;
aVideoFrame
-
>
SetPlaneOffset
(
VideoFrame
:
:
kUPlane
ySize
)
;
aVideoFrame
-
>
SetPlaneOffset
(
VideoFrame
:
:
kVPlane
ySize
+
uSize
)
;
memcpy
(
outBuffer
data
ySize
+
uSize
*
2
)
;
if
(
twoDBuffer
)
{
twoDBuffer
-
>
Unlock2D
(
)
;
}
else
{
mediaBuffer
-
>
Unlock
(
)
;
}
LONGLONG
hns
=
0
;
hr
=
aSample
-
>
GetSampleTime
(
&
hns
)
;
ENSURE
(
SUCCEEDED
(
hr
)
hr
)
;
aVideoFrame
-
>
SetTimestamp
(
HNsToUsecs
(
hns
)
)
;
return
S_OK
;
}
void
VideoDecoder
:
:
Reset
(
)
{
CK_LOGD
(
"
VideoDecoder
:
:
Reset
"
)
;
if
(
mDecoder
)
{
mDecoder
-
>
Reset
(
)
;
}
while
(
!
mOutputQueue
.
empty
(
)
)
{
mOutputQueue
.
pop
(
)
;
}
}
Status
VideoDecoder
:
:
Drain
(
VideoFrame
*
aVideoFrame
)
{
CK_LOGD
(
"
VideoDecoder
:
:
Drain
(
)
"
)
;
if
(
!
mDecoder
)
{
CK_LOGD
(
"
Drain
failed
!
Decoder
was
not
initialized
"
)
;
return
Status
:
:
kDecodeError
;
}
mDecoder
-
>
Drain
(
)
;
return
OutputFrame
(
aVideoFrame
)
;
}
void
VideoDecoder
:
:
DecodingComplete
(
)
{
CK_LOGD
(
"
VideoDecoder
:
:
DecodingComplete
(
)
"
)
;
mHasShutdown
=
true
;
Release
(
)
;
}
