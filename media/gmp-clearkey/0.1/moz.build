with
Files
(
"
*
*
"
)
:
BUG_COMPONENT
=
(
"
Core
"
"
Audio
/
Video
:
GMP
"
)
GeckoSharedLibrary
(
"
clearkey
"
linkage
=
None
)
FINAL_TARGET
=
"
dist
/
bin
/
gmp
-
clearkey
/
0
.
1
"
FINAL_TARGET_PP_FILES
+
=
[
"
manifest
.
json
.
in
"
]
UNIFIED_SOURCES
+
=
[
"
ClearKeyBase64
.
cpp
"
"
ClearKeyCDM
.
cpp
"
"
ClearKeyDecryptionManager
.
cpp
"
"
ClearKeyPersistence
.
cpp
"
"
ClearKeySession
.
cpp
"
"
ClearKeySessionManager
.
cpp
"
"
ClearKeyStorage
.
cpp
"
"
ClearKeyUtils
.
cpp
"
"
gmp
-
clearkey
.
cpp
"
]
if
CONFIG
[
"
OS_ARCH
"
]
=
=
"
WINNT
"
:
UNIFIED_SOURCES
+
=
[
"
VideoDecoder
.
cpp
"
"
WMFH264Decoder
.
cpp
"
]
SOURCES
+
=
[
"
WMFUtils
.
cpp
"
]
OS_LIBS
+
=
[
"
mfuuid
"
]
DEFINES
[
"
ENABLE_WMF
"
]
=
True
DEFINES
[
"
CDM_IMPLEMENTATION
"
]
=
True
TEST_DIRS
+
=
[
"
gtest
"
]
DisableStlWrapping
(
)
DEFINES
[
"
MOZ_NO_MOZALLOC
"
]
=
True
USE_LIBS
+
=
[
"
nss
"
"
psshparser
"
]
CFLAGS
+
=
[
"
-
Wno
-
pointer
-
to
-
int
-
cast
"
"
-
Wno
-
sign
-
compare
"
]
if
CONFIG
[
"
CC_TYPE
"
]
in
(
"
clang
"
"
gcc
"
)
:
CFLAGS
+
=
[
"
-
include
"
"
stdio
.
h
"
"
-
include
"
"
unistd
.
h
"
]
elif
CONFIG
[
"
CC_TYPE
"
]
=
=
"
clang
-
cl
"
:
CFLAGS
+
=
[
"
-
FI
"
"
stdio
.
h
"
]
