#
ifndef
__ClearKeyDecryptor_h__
#
define
__ClearKeyDecryptor_h__
#
include
<
stddef
.
h
>
#
include
<
functional
>
#
include
<
map
>
#
include
<
queue
>
#
include
<
set
>
#
include
<
string
>
#
include
"
ClearKeyDecryptionManager
.
h
"
#
include
"
ClearKeyPersistence
.
h
"
#
include
"
ClearKeySession
.
h
"
#
include
"
ClearKeyUtils
.
h
"
#
include
"
RefCounted
.
h
"
#
include
"
content_decryption_module
.
h
"
class
ClearKeySessionManager
final
:
public
RefCounted
{
public
:
explicit
ClearKeySessionManager
(
cdm
:
:
Host_10
*
aHost
)
;
void
Init
(
bool
aDistinctiveIdentifierAllowed
bool
aPersistentStateAllowed
)
;
void
CreateSession
(
uint32_t
aPromiseId
cdm
:
:
InitDataType
aInitDataType
const
uint8_t
*
aInitData
uint32_t
aInitDataSize
cdm
:
:
SessionType
aSessionType
)
;
void
LoadSession
(
uint32_t
aPromiseId
const
char
*
aSessionId
uint32_t
aSessionIdLength
)
;
void
UpdateSession
(
uint32_t
aPromiseId
const
char
*
aSessionId
uint32_t
aSessionIdLength
const
uint8_t
*
aResponse
uint32_t
aResponseSize
)
;
void
CloseSession
(
uint32_t
aPromiseId
const
char
*
aSessionId
uint32_t
aSessionIdLength
)
;
void
RemoveSession
(
uint32_t
aPromiseId
const
char
*
aSessionId
uint32_t
aSessionIdLength
)
;
void
SetServerCertificate
(
uint32_t
aPromiseId
const
uint8_t
*
aServerCert
uint32_t
aServerCertSize
)
;
cdm
:
:
Status
Decrypt
(
const
cdm
:
:
InputBuffer_2
&
aBuffer
cdm
:
:
DecryptedBlock
*
aDecryptedBlock
)
;
void
DecryptingComplete
(
)
;
void
PersistentSessionDataLoaded
(
uint32_t
aPromiseId
const
std
:
:
string
&
aSessionId
const
uint8_t
*
aKeyData
uint32_t
aKeyDataSize
)
;
private
:
~
ClearKeySessionManager
(
)
;
void
ClearInMemorySessionData
(
ClearKeySession
*
aSession
)
;
bool
MaybeDeferTillInitialized
(
std
:
:
function
<
void
(
)
>
&
&
aMaybeDefer
)
;
void
Serialize
(
const
ClearKeySession
*
aSession
std
:
:
vector
<
uint8_t
>
&
aOutKeyData
)
;
RefPtr
<
ClearKeyDecryptionManager
>
mDecryptionManager
;
RefPtr
<
ClearKeyPersistence
>
mPersistence
;
cdm
:
:
Host_10
*
mHost
=
nullptr
;
std
:
:
set
<
KeyId
>
mKeyIds
;
std
:
:
map
<
std
:
:
string
ClearKeySession
*
>
mSessions
;
std
:
:
queue
<
std
:
:
function
<
void
(
)
>
>
mDeferredInitialize
;
}
;
#
endif
