#
ifndef
__RefCount_h__
#
define
__RefCount_h__
#
include
<
stdint
.
h
>
#
include
<
assert
.
h
>
#
include
"
ClearKeyUtils
.
h
"
#
include
<
atomic
>
class
RefCounted
{
public
:
void
AddRef
(
)
{
+
+
mRefCount
;
}
uint32_t
Release
(
)
{
uint32_t
newCount
=
-
-
mRefCount
;
if
(
!
newCount
)
{
delete
this
;
}
return
newCount
;
}
protected
:
RefCounted
(
)
:
mRefCount
(
0
)
{
}
virtual
~
RefCounted
(
)
{
assert
(
!
mRefCount
)
;
}
std
:
:
atomic
<
uint32_t
>
mRefCount
;
}
;
template
<
class
T
>
class
RefPtr
{
public
:
RefPtr
(
const
RefPtr
&
src
)
{
Set
(
src
.
mPtr
)
;
}
explicit
RefPtr
(
T
*
aPtr
)
{
Set
(
aPtr
)
;
}
RefPtr
(
)
{
Set
(
nullptr
)
;
}
~
RefPtr
(
)
{
Set
(
nullptr
)
;
}
T
*
operator
-
>
(
)
const
{
return
mPtr
;
}
T
*
*
operator
&
(
)
{
return
&
mPtr
;
}
T
*
operator
-
>
(
)
{
return
mPtr
;
}
operator
T
*
(
)
{
return
mPtr
;
}
T
*
Get
(
)
const
{
return
mPtr
;
}
RefPtr
&
operator
=
(
T
*
aVal
)
{
Set
(
aVal
)
;
return
*
this
;
}
private
:
T
*
Set
(
T
*
aPtr
)
{
if
(
mPtr
=
=
aPtr
)
{
return
aPtr
;
}
if
(
mPtr
)
{
mPtr
-
>
Release
(
)
;
}
mPtr
=
aPtr
;
if
(
mPtr
)
{
aPtr
-
>
AddRef
(
)
;
}
return
mPtr
;
}
T
*
mPtr
=
nullptr
;
}
;
#
endif
