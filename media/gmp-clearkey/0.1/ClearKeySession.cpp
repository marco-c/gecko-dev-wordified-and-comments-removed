#
include
"
BigEndian
.
h
"
#
include
"
ClearKeyDecryptionManager
.
h
"
#
include
"
ClearKeySession
.
h
"
#
include
"
ClearKeyUtils
.
h
"
#
include
"
ClearKeyStorage
.
h
"
#
include
"
ClearKeyCencParser
.
h
"
#
include
"
gmp
-
task
-
utils
.
h
"
#
include
"
gmp
-
api
/
gmp
-
decryption
.
h
"
#
include
<
assert
.
h
>
#
include
<
string
.
h
>
using
namespace
mozilla
;
ClearKeySession
:
:
ClearKeySession
(
const
std
:
:
string
&
aSessionId
GMPDecryptorCallback
*
aCallback
GMPSessionType
aSessionType
)
:
mSessionId
(
aSessionId
)
mCallback
(
aCallback
)
mSessionType
(
aSessionType
)
{
CK_LOGD
(
"
ClearKeySession
ctor
%
p
"
this
)
;
}
ClearKeySession
:
:
~
ClearKeySession
(
)
{
CK_LOGD
(
"
ClearKeySession
dtor
%
p
"
this
)
;
auto
&
keyIds
=
GetKeyIds
(
)
;
for
(
auto
it
=
keyIds
.
begin
(
)
;
it
!
=
keyIds
.
end
(
)
;
it
+
+
)
{
assert
(
ClearKeyDecryptionManager
:
:
Get
(
)
-
>
HasSeenKeyId
(
*
it
)
)
;
ClearKeyDecryptionManager
:
:
Get
(
)
-
>
ReleaseKeyId
(
*
it
)
;
mCallback
-
>
KeyStatusChanged
(
&
mSessionId
[
0
]
mSessionId
.
size
(
)
&
(
*
it
)
[
0
]
it
-
>
size
(
)
kGMPUnknown
)
;
}
}
void
ClearKeySession
:
:
Init
(
uint32_t
aCreateSessionToken
uint32_t
aPromiseId
const
std
:
:
string
&
aInitDataType
const
uint8_t
*
aInitData
uint32_t
aInitDataSize
)
{
CK_LOGD
(
"
ClearKeySession
:
:
Init
"
)
;
if
(
aInitDataType
=
=
"
cenc
"
)
{
ParseCENCInitData
(
aInitData
aInitDataSize
mKeyIds
)
;
}
else
if
(
aInitDataType
=
=
"
keyids
"
)
{
std
:
:
string
sessionType
;
ClearKeyUtils
:
:
ParseKeyIdsInitData
(
aInitData
aInitDataSize
mKeyIds
sessionType
)
;
if
(
sessionType
!
=
ClearKeyUtils
:
:
SessionTypeToString
(
mSessionType
)
)
{
const
char
message
[
]
=
"
Session
type
specified
in
keyids
init
data
doesn
'
t
match
session
type
.
"
;
mCallback
-
>
RejectPromise
(
aPromiseId
kGMPInvalidAccessError
message
strlen
(
message
)
)
;
return
;
}
}
else
if
(
aInitDataType
=
=
"
webm
"
&
&
aInitDataSize
=
=
16
)
{
vector
<
uint8_t
>
keyId
;
keyId
.
assign
(
aInitData
aInitData
+
aInitDataSize
)
;
mKeyIds
.
push_back
(
keyId
)
;
}
if
(
!
mKeyIds
.
size
(
)
)
{
const
char
message
[
]
=
"
Couldn
'
t
parse
init
data
"
;
mCallback
-
>
RejectPromise
(
aPromiseId
kGMPInvalidAccessError
message
strlen
(
message
)
)
;
return
;
}
mCallback
-
>
SetSessionId
(
aCreateSessionToken
&
mSessionId
[
0
]
mSessionId
.
length
(
)
)
;
mCallback
-
>
ResolvePromise
(
aPromiseId
)
;
}
GMPSessionType
ClearKeySession
:
:
Type
(
)
const
{
return
mSessionType
;
}
void
ClearKeySession
:
:
AddKeyId
(
const
KeyId
&
aKeyId
)
{
mKeyIds
.
push_back
(
aKeyId
)
;
}
