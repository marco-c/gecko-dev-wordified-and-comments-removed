mod
byteorder
;
use
byteorder
:
:
ReadBytesExt
;
use
std
:
:
error
:
:
Error
as
ErrorTrait
;
use
std
:
:
io
:
:
{
Read
BufRead
Take
}
;
use
std
:
:
io
:
:
Cursor
;
use
std
:
:
cmp
;
use
std
:
:
fmt
;
pub
mod
capi
;
pub
use
capi
:
:
{
mp4parse_new
mp4parse_free
mp4parse_read
}
;
#
[
derive
(
Debug
)
]
pub
enum
Error
{
InvalidData
Unsupported
UnexpectedEOF
Io
(
std
:
:
io
:
:
Error
)
}
impl
From
<
std
:
:
io
:
:
Error
>
for
Error
{
fn
from
(
err
:
std
:
:
io
:
:
Error
)
-
>
Error
{
Error
:
:
Io
(
err
)
}
}
impl
From
<
byteorder
:
:
Error
>
for
Error
{
fn
from
(
err
:
byteorder
:
:
Error
)
-
>
Error
{
match
err
{
byteorder
:
:
Error
:
:
UnexpectedEOF
=
>
Error
:
:
UnexpectedEOF
byteorder
:
:
Error
:
:
Io
(
e
)
=
>
Error
:
:
Io
(
e
)
}
}
}
pub
type
Result
<
T
>
=
std
:
:
result
:
:
Result
<
T
Error
>
;
#
[
derive
(
Clone
Copy
Eq
PartialEq
)
]
pub
struct
FourCC
(
[
u8
;
4
]
)
;
impl
fmt
:
:
Debug
for
FourCC
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
write
!
(
f
"
'
{
}
'
"
String
:
:
from_utf8_lossy
(
&
self
.
0
)
)
}
}
#
[
derive
(
Debug
)
]
pub
struct
BoxHeader
{
pub
name
:
FourCC
pub
size
:
u64
pub
offset
:
u64
}
#
[
derive
(
Debug
)
]
struct
FileTypeBox
{
name
:
FourCC
size
:
u64
major_brand
:
FourCC
minor_version
:
u32
compatible_brands
:
Vec
<
FourCC
>
}
#
[
derive
(
Debug
)
]
struct
MovieHeaderBox
{
name
:
FourCC
size
:
u64
timescale
:
u32
duration
:
u64
}
#
[
derive
(
Debug
)
]
struct
TrackHeaderBox
{
name
:
FourCC
size
:
u64
track_id
:
u32
enabled
:
bool
duration
:
u64
width
:
u32
height
:
u32
}
#
[
derive
(
Debug
)
]
struct
EditListBox
{
name
:
FourCC
size
:
u64
edits
:
Vec
<
Edit
>
}
#
[
derive
(
Debug
)
]
struct
Edit
{
segment_duration
:
u64
media_time
:
i64
media_rate_integer
:
i16
media_rate_fraction
:
i16
}
#
[
derive
(
Debug
)
]
struct
MediaHeaderBox
{
name
:
FourCC
size
:
u64
timescale
:
u32
duration
:
u64
}
#
[
derive
(
Debug
)
]
struct
ChunkOffsetBox
{
name
:
FourCC
size
:
u64
offsets
:
Vec
<
u64
>
}
#
[
derive
(
Debug
)
]
struct
SyncSampleBox
{
name
:
FourCC
size
:
u64
samples
:
Vec
<
u32
>
}
#
[
derive
(
Debug
)
]
struct
SampleToChunkBox
{
name
:
FourCC
size
:
u64
samples
:
Vec
<
SampleToChunk
>
}
#
[
derive
(
Debug
)
]
struct
SampleToChunk
{
first_chunk
:
u32
samples_per_chunk
:
u32
sample_description_index
:
u32
}
#
[
derive
(
Debug
)
]
struct
SampleSizeBox
{
name
:
FourCC
size
:
u64
sample_size
:
u32
sample_sizes
:
Vec
<
u32
>
}
#
[
derive
(
Debug
)
]
struct
TimeToSampleBox
{
name
:
FourCC
size
:
u64
samples
:
Vec
<
Sample
>
}
#
[
derive
(
Debug
)
]
struct
Sample
{
sample_count
:
u32
sample_delta
:
u32
}
#
[
derive
(
Debug
)
]
struct
HandlerBox
{
name
:
FourCC
size
:
u64
handler_type
:
FourCC
}
#
[
derive
(
Debug
)
]
struct
SampleDescriptionBox
{
name
:
FourCC
size
:
u64
descriptions
:
Vec
<
SampleEntry
>
}
#
[
allow
(
dead_code
)
]
#
[
derive
(
Debug
)
]
enum
SampleEntry
{
Audio
{
data_reference_index
:
u16
channelcount
:
u16
samplesize
:
u16
samplerate
:
u32
esds
:
ES_Descriptor
}
Video
{
data_reference_index
:
u16
width
:
u16
height
:
u16
avcc
:
AVCDecoderConfigurationRecord
}
}
#
[
allow
(
dead_code
)
]
#
[
derive
(
Debug
)
]
struct
AVCDecoderConfigurationRecord
{
data
:
Vec
<
u8
>
}
#
[
allow
(
non_camel_case_types
)
]
#
[
allow
(
dead_code
)
]
#
[
derive
(
Debug
)
]
struct
ES_Descriptor
{
data
:
Vec
<
u8
>
}
#
[
derive
(
Debug
)
]
pub
struct
MediaContext
{
tracks
:
Vec
<
Track
>
}
impl
MediaContext
{
pub
fn
new
(
)
-
>
MediaContext
{
MediaContext
{
tracks
:
Vec
:
:
new
(
)
}
}
}
#
[
derive
(
Debug
)
]
enum
TrackType
{
Video
Audio
}
#
[
derive
(
Debug
)
]
struct
Track
{
track_type
:
TrackType
}
pub
fn
read_box_header
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
BoxHeader
>
{
let
size32
=
try
!
(
be_u32
(
src
)
)
;
let
name
=
try
!
(
be_fourcc
(
src
)
)
;
let
size
=
match
size32
{
0
=
>
return
Err
(
Error
:
:
Unsupported
)
1
=
>
{
let
size64
=
try
!
(
be_u64
(
src
)
)
;
if
size64
<
16
{
return
Err
(
Error
:
:
InvalidData
)
;
}
size64
}
2
.
.
.
7
=
>
return
Err
(
Error
:
:
InvalidData
)
_
=
>
size32
as
u64
}
;
let
offset
=
match
size32
{
1
=
>
4
+
4
+
8
_
=
>
4
+
4
}
;
assert
!
(
offset
<
=
size
)
;
Ok
(
BoxHeader
{
name
:
name
size
:
size
offset
:
offset
}
)
}
fn
read_fullbox_extra
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
(
u8
u32
)
>
{
let
version
=
try
!
(
src
.
read_u8
(
)
)
;
let
flags_a
=
try
!
(
src
.
read_u8
(
)
)
;
let
flags_b
=
try
!
(
src
.
read_u8
(
)
)
;
let
flags_c
=
try
!
(
src
.
read_u8
(
)
)
;
Ok
(
(
version
(
flags_a
as
u32
)
<
<
16
|
(
flags_b
as
u32
)
<
<
8
|
(
flags_c
as
u32
)
)
)
}
fn
skip_box_content
<
T
:
BufRead
>
(
src
:
&
mut
T
header
:
&
BoxHeader
)
-
>
Result
<
usize
>
{
skip
(
src
(
header
.
size
-
header
.
offset
)
as
usize
)
}
fn
skip_remaining_box_content
<
T
:
BufRead
>
(
src
:
&
mut
T
header
:
&
BoxHeader
)
-
>
Result
<
(
)
>
{
match
skip
(
src
(
header
.
size
-
header
.
offset
)
as
usize
)
{
Ok
(
_
)
|
Err
(
Error
:
:
UnexpectedEOF
)
=
>
Ok
(
(
)
)
e
_
=
>
Err
(
e
.
err
(
)
.
unwrap
(
)
)
}
}
fn
limit
<
'
a
T
:
Read
>
(
f
:
&
'
a
mut
T
h
:
&
BoxHeader
)
-
>
Take
<
&
'
a
mut
T
>
{
f
.
take
(
h
.
size
-
h
.
offset
)
}
fn
recurse
<
T
:
Read
>
(
f
:
&
mut
T
h
:
&
BoxHeader
context
:
&
mut
MediaContext
)
-
>
Result
<
(
)
>
{
println
!
(
"
{
:
?
}
-
-
recursing
"
h
)
;
let
buf
:
Vec
<
u8
>
=
f
.
bytes
(
)
.
map
(
|
u
|
u
.
unwrap
(
)
)
.
collect
(
)
;
let
mut
content
=
Cursor
:
:
new
(
buf
)
;
loop
{
match
read_box
(
&
mut
content
context
)
{
Ok
(
_
)
=
>
{
}
Err
(
Error
:
:
UnexpectedEOF
)
=
>
{
println
!
(
"
Caught
Error
:
:
UnexpectedEOF
"
)
;
break
;
}
Err
(
Error
:
:
InvalidData
)
=
>
{
println
!
(
"
Invalid
data
"
)
;
return
Err
(
Error
:
:
InvalidData
)
;
}
Err
(
Error
:
:
Unsupported
)
=
>
{
println
!
(
"
Unsupported
BMFF
construct
"
)
;
return
Err
(
Error
:
:
Unsupported
)
;
}
Err
(
Error
:
:
Io
(
e
)
)
=
>
{
println
!
(
"
I
/
O
Error
'
{
:
?
}
'
reading
box
:
{
:
?
}
"
e
.
kind
(
)
e
.
description
(
)
)
;
return
Err
(
Error
:
:
Io
(
e
)
)
;
}
}
}
assert
!
(
content
.
position
(
)
=
=
h
.
size
-
h
.
offset
)
;
println
!
(
"
{
:
?
}
-
-
end
"
h
)
;
Ok
(
(
)
)
}
pub
fn
read_box
<
T
:
BufRead
>
(
f
:
&
mut
T
context
:
&
mut
MediaContext
)
-
>
Result
<
(
)
>
{
read_box_header
(
f
)
.
and_then
(
|
h
|
{
let
mut
content
=
limit
(
f
&
h
)
;
match
&
h
.
name
.
0
{
b
"
ftyp
"
=
>
{
let
ftyp
=
try
!
(
read_ftyp
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
ftyp
)
;
}
b
"
moov
"
=
>
try
!
(
recurse
(
&
mut
content
&
h
context
)
)
b
"
mvhd
"
=
>
{
let
mvhd
=
try
!
(
read_mvhd
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
mvhd
)
;
}
b
"
trak
"
=
>
try
!
(
recurse
(
&
mut
content
&
h
context
)
)
b
"
tkhd
"
=
>
{
let
tkhd
=
try
!
(
read_tkhd
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
tkhd
)
;
}
b
"
edts
"
=
>
try
!
(
recurse
(
&
mut
content
&
h
context
)
)
b
"
elst
"
=
>
{
let
elst
=
try
!
(
read_elst
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
elst
)
;
}
b
"
mdia
"
=
>
try
!
(
recurse
(
&
mut
content
&
h
context
)
)
b
"
mdhd
"
=
>
{
let
mdhd
=
try
!
(
read_mdhd
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
mdhd
)
;
}
b
"
minf
"
=
>
try
!
(
recurse
(
&
mut
content
&
h
context
)
)
b
"
stbl
"
=
>
try
!
(
recurse
(
&
mut
content
&
h
context
)
)
b
"
stco
"
=
>
{
let
stco
=
try
!
(
read_stco
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
stco
)
;
}
b
"
co64
"
=
>
{
let
co64
=
try
!
(
read_co64
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
co64
)
;
}
b
"
stss
"
=
>
{
let
stss
=
try
!
(
read_stss
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
stss
)
;
}
b
"
stsc
"
=
>
{
let
stsc
=
try
!
(
read_stsc
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
stsc
)
;
}
b
"
stsz
"
=
>
{
let
stsz
=
try
!
(
read_stsz
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
stsz
)
;
}
b
"
stts
"
=
>
{
let
stts
=
try
!
(
read_stts
(
&
mut
content
&
h
)
)
;
println
!
(
"
{
:
?
}
"
stts
)
;
}
b
"
hdlr
"
=
>
{
let
hdlr
=
try
!
(
read_hdlr
(
&
mut
content
&
h
)
)
;
let
track_type
=
match
&
hdlr
.
handler_type
.
0
{
b
"
vide
"
=
>
Some
(
TrackType
:
:
Video
)
b
"
soun
"
=
>
Some
(
TrackType
:
:
Audio
)
_
=
>
None
}
;
match
track_type
{
Some
(
track_type
)
=
>
context
.
tracks
.
push
(
Track
{
track_type
:
track_type
}
)
None
=
>
println
!
(
"
unknown
track
type
!
"
)
}
;
println
!
(
"
{
:
?
}
"
hdlr
)
;
}
b
"
stsd
"
=
>
{
let
track
=
&
context
.
tracks
[
context
.
tracks
.
len
(
)
-
1
]
;
let
stsd
=
try
!
(
read_stsd
(
&
mut
content
&
h
&
track
)
)
;
println
!
(
"
{
:
?
}
"
stsd
)
;
}
_
=
>
{
println
!
(
"
{
:
?
}
(
skipped
)
"
h
)
;
try
!
(
skip_box_content
(
&
mut
content
&
h
)
)
;
}
}
;
assert
!
(
content
.
limit
(
)
=
=
0
)
;
println
!
(
"
read_box
context
:
{
:
?
}
"
context
)
;
Ok
(
(
)
)
}
)
}
fn
read_ftyp
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
FileTypeBox
>
{
let
major
=
try
!
(
be_fourcc
(
src
)
)
;
let
minor
=
try
!
(
be_u32
(
src
)
)
;
let
brand_count
=
(
head
.
size
-
8
-
8
)
/
4
;
let
mut
brands
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
brand_count
{
brands
.
push
(
try
!
(
be_fourcc
(
src
)
)
)
;
}
Ok
(
FileTypeBox
{
name
:
head
.
name
size
:
head
.
size
major_brand
:
major
minor_version
:
minor
compatible_brands
:
brands
}
)
}
fn
read_mvhd
<
T
:
ReadBytesExt
+
BufRead
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
MovieHeaderBox
>
{
let
(
version
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
match
version
{
1
=
>
{
try
!
(
skip
(
src
16
)
)
;
}
0
=
>
{
try
!
(
skip
(
src
8
)
)
;
}
_
=
>
return
Err
(
Error
:
:
InvalidData
)
}
let
timescale
=
try
!
(
be_u32
(
src
)
)
;
let
duration
=
match
version
{
1
=
>
try
!
(
be_u64
(
src
)
)
0
=
>
try
!
(
be_u32
(
src
)
)
as
u64
_
=
>
return
Err
(
Error
:
:
InvalidData
)
}
;
try
!
(
skip
(
src
80
)
)
;
Ok
(
MovieHeaderBox
{
name
:
head
.
name
size
:
head
.
size
timescale
:
timescale
duration
:
duration
}
)
}
fn
read_tkhd
<
T
:
ReadBytesExt
+
BufRead
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
TrackHeaderBox
>
{
let
(
version
flags
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
disabled
=
flags
&
0x1u32
=
=
0
|
|
flags
&
0x2u32
=
=
0
;
match
version
{
1
=
>
{
try
!
(
skip
(
src
16
)
)
;
}
0
=
>
{
try
!
(
skip
(
src
8
)
)
;
}
_
=
>
return
Err
(
Error
:
:
InvalidData
)
}
let
track_id
=
try
!
(
be_u32
(
src
)
)
;
try
!
(
skip
(
src
4
)
)
;
let
duration
=
match
version
{
1
=
>
try
!
(
be_u64
(
src
)
)
0
=
>
try
!
(
be_u32
(
src
)
)
as
u64
_
=
>
return
Err
(
Error
:
:
InvalidData
)
}
;
try
!
(
skip
(
src
52
)
)
;
let
width
=
try
!
(
be_u32
(
src
)
)
;
let
height
=
try
!
(
be_u32
(
src
)
)
;
Ok
(
TrackHeaderBox
{
name
:
head
.
name
size
:
head
.
size
track_id
:
track_id
enabled
:
!
disabled
duration
:
duration
width
:
width
height
:
height
}
)
}
fn
read_elst
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
EditListBox
>
{
let
(
version
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
edit_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
edits
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
edit_count
{
let
(
segment_duration
media_time
)
=
match
version
{
1
=
>
{
(
try
!
(
be_u64
(
src
)
)
try
!
(
be_i64
(
src
)
)
)
}
0
=
>
{
(
try
!
(
be_u32
(
src
)
)
as
u64
try
!
(
be_i32
(
src
)
)
as
i64
)
}
_
=
>
return
Err
(
Error
:
:
InvalidData
)
}
;
let
media_rate_integer
=
try
!
(
be_i16
(
src
)
)
;
let
media_rate_fraction
=
try
!
(
be_i16
(
src
)
)
;
edits
.
push
(
Edit
{
segment_duration
:
segment_duration
media_time
:
media_time
media_rate_integer
:
media_rate_integer
media_rate_fraction
:
media_rate_fraction
}
)
}
Ok
(
EditListBox
{
name
:
head
.
name
size
:
head
.
size
edits
:
edits
}
)
}
fn
read_mdhd
<
T
:
ReadBytesExt
+
BufRead
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
MediaHeaderBox
>
{
let
(
version
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
(
timescale
duration
)
=
match
version
{
1
=
>
{
try
!
(
skip
(
src
16
)
)
;
(
try
!
(
be_u32
(
src
)
)
try
!
(
be_u64
(
src
)
)
)
}
0
=
>
{
try
!
(
skip
(
src
8
)
)
;
(
try
!
(
be_u32
(
src
)
)
try
!
(
be_u32
(
src
)
)
as
u64
)
}
_
=
>
return
Err
(
Error
:
:
InvalidData
)
}
;
try
!
(
skip
(
src
4
)
)
;
Ok
(
MediaHeaderBox
{
name
:
head
.
name
size
:
head
.
size
timescale
:
timescale
duration
:
duration
}
)
}
fn
read_stco
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
ChunkOffsetBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
offset_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
offsets
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
offset_count
{
offsets
.
push
(
try
!
(
be_u32
(
src
)
)
as
u64
)
;
}
Ok
(
ChunkOffsetBox
{
name
:
head
.
name
size
:
head
.
size
offsets
:
offsets
}
)
}
fn
read_co64
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
ChunkOffsetBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
offset_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
offsets
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
offset_count
{
offsets
.
push
(
try
!
(
be_u64
(
src
)
)
)
;
}
Ok
(
ChunkOffsetBox
{
name
:
head
.
name
size
:
head
.
size
offsets
:
offsets
}
)
}
fn
read_stss
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
SyncSampleBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
sample_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
samples
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
sample_count
{
samples
.
push
(
try
!
(
be_u32
(
src
)
)
)
;
}
Ok
(
SyncSampleBox
{
name
:
head
.
name
size
:
head
.
size
samples
:
samples
}
)
}
fn
read_stsc
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
SampleToChunkBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
sample_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
samples
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
sample_count
{
let
first_chunk
=
try
!
(
be_u32
(
src
)
)
;
let
samples_per_chunk
=
try
!
(
be_u32
(
src
)
)
;
let
sample_description_index
=
try
!
(
be_u32
(
src
)
)
;
samples
.
push
(
SampleToChunk
{
first_chunk
:
first_chunk
samples_per_chunk
:
samples_per_chunk
sample_description_index
:
sample_description_index
}
)
;
}
Ok
(
SampleToChunkBox
{
name
:
head
.
name
size
:
head
.
size
samples
:
samples
}
)
}
fn
read_stsz
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
SampleSizeBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
sample_size
=
try
!
(
be_u32
(
src
)
)
;
let
sample_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
sample_sizes
=
Vec
:
:
new
(
)
;
if
sample_size
=
=
0
{
for
_
in
0
.
.
sample_count
{
sample_sizes
.
push
(
try
!
(
be_u32
(
src
)
)
)
;
}
}
Ok
(
SampleSizeBox
{
name
:
head
.
name
size
:
head
.
size
sample_size
:
sample_size
sample_sizes
:
sample_sizes
}
)
}
fn
read_stts
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
TimeToSampleBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
sample_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
samples
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
sample_count
{
let
sample_count
=
try
!
(
be_u32
(
src
)
)
;
let
sample_delta
=
try
!
(
be_u32
(
src
)
)
;
samples
.
push
(
Sample
{
sample_count
:
sample_count
sample_delta
:
sample_delta
}
)
;
}
Ok
(
TimeToSampleBox
{
name
:
head
.
name
size
:
head
.
size
samples
:
samples
}
)
}
fn
read_hdlr
<
T
:
ReadBytesExt
+
BufRead
>
(
src
:
&
mut
T
head
:
&
BoxHeader
)
-
>
Result
<
HandlerBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
try
!
(
skip
(
src
4
)
)
;
let
handler_type
=
try
!
(
be_fourcc
(
src
)
)
;
try
!
(
skip
(
src
12
)
)
;
try
!
(
skip_remaining_box_content
(
src
head
)
)
;
Ok
(
HandlerBox
{
name
:
head
.
name
size
:
head
.
size
handler_type
:
handler_type
}
)
}
fn
read_stsd
<
T
:
ReadBytesExt
+
BufRead
>
(
src
:
&
mut
T
head
:
&
BoxHeader
track
:
&
Track
)
-
>
Result
<
SampleDescriptionBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
description_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
descriptions
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
description_count
{
let
description
=
match
track
.
track_type
{
TrackType
:
:
Video
=
>
{
let
h
=
try
!
(
read_box_header
(
src
)
)
;
if
&
h
.
name
.
0
!
=
b
"
avc1
"
{
return
Err
(
Error
:
:
Unsupported
)
;
}
try
!
(
skip
(
src
6
)
)
;
let
data_reference_index
=
try
!
(
be_u16
(
src
)
)
;
try
!
(
skip
(
src
16
)
)
;
let
width
=
try
!
(
be_u16
(
src
)
)
;
let
height
=
try
!
(
be_u16
(
src
)
)
;
try
!
(
skip
(
src
50
)
)
;
let
h
=
try
!
(
read_box_header
(
src
)
)
;
if
&
h
.
name
.
0
!
=
b
"
avcC
"
{
return
Err
(
Error
:
:
InvalidData
)
;
}
let
mut
data
:
Vec
<
u8
>
=
vec
!
[
0
;
(
h
.
size
-
h
.
offset
)
as
usize
]
;
let
r
=
try
!
(
src
.
read
(
&
mut
data
)
)
;
assert
!
(
r
=
=
data
.
len
(
)
)
;
let
avcc
=
AVCDecoderConfigurationRecord
{
data
:
data
}
;
try
!
(
skip_remaining_box_content
(
src
head
)
)
;
SampleEntry
:
:
Video
{
data_reference_index
:
data_reference_index
width
:
width
height
:
height
avcc
:
avcc
}
}
TrackType
:
:
Audio
=
>
{
let
h
=
try
!
(
read_box_header
(
src
)
)
;
if
&
h
.
name
.
0
!
=
b
"
mp4a
"
{
return
Err
(
Error
:
:
Unsupported
)
;
}
try
!
(
skip
(
src
6
)
)
;
let
data_reference_index
=
try
!
(
be_u16
(
src
)
)
;
try
!
(
skip
(
src
8
)
)
;
let
channelcount
=
try
!
(
be_u16
(
src
)
)
;
let
samplesize
=
try
!
(
be_u16
(
src
)
)
;
try
!
(
skip
(
src
4
)
)
;
let
samplerate
=
try
!
(
be_u32
(
src
)
)
;
let
h
=
try
!
(
read_box_header
(
src
)
)
;
if
&
h
.
name
.
0
!
=
b
"
esds
"
{
return
Err
(
Error
:
:
InvalidData
)
;
}
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
mut
data
:
Vec
<
u8
>
=
vec
!
[
0
;
(
h
.
size
-
h
.
offset
-
4
)
as
usize
]
;
let
r
=
try
!
(
src
.
read
(
&
mut
data
)
)
;
assert
!
(
r
=
=
data
.
len
(
)
)
;
let
esds
=
ES_Descriptor
{
data
:
data
}
;
SampleEntry
:
:
Audio
{
data_reference_index
:
data_reference_index
channelcount
:
channelcount
samplesize
:
samplesize
samplerate
:
samplerate
esds
:
esds
}
}
}
;
descriptions
.
push
(
description
)
;
}
Ok
(
SampleDescriptionBox
{
name
:
head
.
name
size
:
head
.
size
descriptions
:
descriptions
}
)
}
fn
skip
<
T
:
BufRead
>
(
src
:
&
mut
T
bytes
:
usize
)
-
>
Result
<
usize
>
{
let
mut
bytes_to_skip
=
bytes
;
while
bytes_to_skip
>
0
{
let
len
=
try
!
(
src
.
fill_buf
(
)
)
.
len
(
)
;
if
len
=
=
0
{
return
Err
(
Error
:
:
UnexpectedEOF
)
}
let
discard
=
cmp
:
:
min
(
len
bytes_to_skip
)
;
src
.
consume
(
discard
)
;
bytes_to_skip
-
=
discard
;
}
assert
!
(
bytes_to_skip
=
=
0
)
;
Ok
(
bytes
)
}
fn
be_i16
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
byteorder
:
:
Result
<
i16
>
{
src
.
read_i16
:
:
<
byteorder
:
:
BigEndian
>
(
)
}
fn
be_i32
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
byteorder
:
:
Result
<
i32
>
{
src
.
read_i32
:
:
<
byteorder
:
:
BigEndian
>
(
)
}
fn
be_i64
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
byteorder
:
:
Result
<
i64
>
{
src
.
read_i64
:
:
<
byteorder
:
:
BigEndian
>
(
)
}
fn
be_u16
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
byteorder
:
:
Result
<
u16
>
{
src
.
read_u16
:
:
<
byteorder
:
:
BigEndian
>
(
)
}
fn
be_u32
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
byteorder
:
:
Result
<
u32
>
{
src
.
read_u32
:
:
<
byteorder
:
:
BigEndian
>
(
)
}
fn
be_u64
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
byteorder
:
:
Result
<
u64
>
{
src
.
read_u64
:
:
<
byteorder
:
:
BigEndian
>
(
)
}
fn
be_fourcc
<
T
:
Read
>
(
src
:
&
mut
T
)
-
>
Result
<
FourCC
>
{
let
mut
fourcc
=
[
0
;
4
]
;
match
src
.
read
(
&
mut
fourcc
)
{
Ok
(
4
)
=
>
Ok
(
FourCC
(
fourcc
)
)
Ok
(
_
)
=
>
Err
(
Error
:
:
UnexpectedEOF
)
Err
(
e
)
=
>
Err
(
Error
:
:
Io
(
e
)
)
}
}
#
[
test
]
fn
test_read_box_header
(
)
{
use
std
:
:
io
:
:
Write
;
let
mut
test
:
Vec
<
u8
>
=
vec
!
[
0
0
0
8
]
;
write
!
(
&
mut
test
"
test
"
)
.
unwrap
(
)
;
let
mut
stream
=
Cursor
:
:
new
(
test
)
;
let
parsed
=
read_box_header
(
&
mut
stream
)
.
unwrap
(
)
;
assert_eq
!
(
parsed
.
name
FourCC
(
*
b
"
test
"
)
)
;
assert_eq
!
(
parsed
.
size
8
)
;
println
!
(
"
box
{
:
?
}
"
parsed
)
;
}
#
[
test
]
fn
test_read_box_header_long
(
)
{
use
std
:
:
io
:
:
Cursor
;
let
mut
test
:
Vec
<
u8
>
=
vec
!
[
0
0
0
1
]
;
test
.
extend
(
"
long
"
.
to_string
(
)
.
into_bytes
(
)
)
;
test
.
extend
(
vec
!
[
0
0
0
0
0
0
16
0
]
)
;
let
mut
stream
=
Cursor
:
:
new
(
test
)
;
let
parsed
=
read_box_header
(
&
mut
stream
)
.
unwrap
(
)
;
assert_eq
!
(
parsed
.
name
FourCC
(
*
b
"
long
"
)
)
;
assert_eq
!
(
parsed
.
size
4096
)
;
println
!
(
"
box
{
:
?
}
"
parsed
)
;
}
#
[
test
]
fn
test_read_ftyp
(
)
{
use
std
:
:
io
:
:
Cursor
;
use
std
:
:
io
:
:
Write
;
let
mut
test
:
Vec
<
u8
>
=
vec
!
[
0
0
0
24
]
;
write
!
(
&
mut
test
"
ftyp
"
)
.
unwrap
(
)
;
write
!
(
&
mut
test
"
mp42
"
)
.
unwrap
(
)
;
test
.
extend
(
vec
!
[
0
0
0
0
]
)
;
write
!
(
&
mut
test
"
isom
"
)
.
unwrap
(
)
;
write
!
(
&
mut
test
"
mp42
"
)
.
unwrap
(
)
;
assert_eq
!
(
test
.
len
(
)
24
)
;
let
mut
stream
=
Cursor
:
:
new
(
test
)
;
let
header
=
read_box_header
(
&
mut
stream
)
.
unwrap
(
)
;
let
parsed
=
read_ftyp
(
&
mut
stream
&
header
)
.
unwrap
(
)
;
assert_eq
!
(
parsed
.
name
FourCC
(
*
b
"
ftyp
"
)
)
;
assert_eq
!
(
parsed
.
size
24
)
;
assert_eq
!
(
parsed
.
major_brand
FourCC
(
*
b
"
mp42
"
)
)
;
assert_eq
!
(
parsed
.
minor_version
0
)
;
assert_eq
!
(
parsed
.
compatible_brands
.
len
(
)
2
)
;
assert_eq
!
(
parsed
.
compatible_brands
[
0
]
FourCC
(
*
b
"
isom
"
)
)
;
assert_eq
!
(
parsed
.
compatible_brands
[
1
]
FourCC
(
*
b
"
mp42
"
)
)
;
println
!
(
"
box
{
:
?
}
"
parsed
)
;
}
#
[
test
]
fn
test_read_elst_v0
(
)
{
use
std
:
:
io
:
:
Write
;
let
mut
test
:
Vec
<
u8
>
=
vec
!
[
0
0
0
28
]
;
write
!
(
&
mut
test
"
elst
"
)
.
unwrap
(
)
;
test
.
extend
(
vec
!
[
0
0
0
0
]
)
;
test
.
extend
(
vec
!
[
0
0
0
1
]
)
;
test
.
extend
(
vec
!
[
1
2
3
4
5
6
7
8
9
10
11
12
]
)
;
assert_eq
!
(
test
.
len
(
)
28
)
;
let
mut
stream
=
Cursor
:
:
new
(
test
)
;
let
header
=
read_box_header
(
&
mut
stream
)
.
unwrap
(
)
;
let
parsed
=
read_elst
(
&
mut
stream
&
header
)
.
unwrap
(
)
;
assert_eq
!
(
parsed
.
name
FourCC
(
*
b
"
elst
"
)
)
;
assert_eq
!
(
parsed
.
size
28
)
;
assert_eq
!
(
parsed
.
edits
.
len
(
)
1
)
;
assert_eq
!
(
parsed
.
edits
[
0
]
.
segment_duration
16909060
)
;
assert_eq
!
(
parsed
.
edits
[
0
]
.
media_time
84281096
)
;
assert_eq
!
(
parsed
.
edits
[
0
]
.
media_rate_integer
2314
)
;
assert_eq
!
(
parsed
.
edits
[
0
]
.
media_rate_fraction
2828
)
;
println
!
(
"
box
{
:
?
}
"
parsed
)
;
}
#
[
test
]
fn
test_read_elst_v1
(
)
{
use
std
:
:
io
:
:
Write
;
let
mut
test
:
Vec
<
u8
>
=
vec
!
[
0
0
0
56
]
;
write
!
(
&
mut
test
"
elst
"
)
.
unwrap
(
)
;
test
.
extend
(
vec
!
[
1
0
0
0
]
)
;
test
.
extend
(
vec
!
[
0
0
0
2
]
)
;
test
.
extend
(
vec
!
[
1
2
3
4
1
2
3
4
5
6
7
8
5
6
7
8
9
10
11
12
]
)
;
test
.
extend
(
vec
!
[
1
2
3
4
1
2
3
4
5
6
7
8
5
6
7
8
9
10
11
12
]
)
;
assert_eq
!
(
test
.
len
(
)
56
)
;
let
mut
stream
=
Cursor
:
:
new
(
test
)
;
let
header
=
read_box_header
(
&
mut
stream
)
.
unwrap
(
)
;
let
parsed
=
read_elst
(
&
mut
stream
&
header
)
.
unwrap
(
)
;
assert_eq
!
(
parsed
.
name
FourCC
(
*
b
"
elst
"
)
)
;
assert_eq
!
(
parsed
.
size
56
)
;
assert_eq
!
(
parsed
.
edits
.
len
(
)
2
)
;
assert_eq
!
(
parsed
.
edits
[
1
]
.
segment_duration
72623859723010820
)
;
assert_eq
!
(
parsed
.
edits
[
1
]
.
media_time
361984551075317512
)
;
assert_eq
!
(
parsed
.
edits
[
1
]
.
media_rate_integer
2314
)
;
assert_eq
!
(
parsed
.
edits
[
1
]
.
media_rate_fraction
2828
)
;
println
!
(
"
box
{
:
?
}
"
parsed
)
;
}
#
[
test
]
fn
test_read_mdhd_v0
(
)
{
use
std
:
:
io
:
:
Write
;
let
mut
test
:
Vec
<
u8
>
=
vec
!
[
0
0
0
32
]
;
write
!
(
&
mut
test
"
mdhd
"
)
.
unwrap
(
)
;
test
.
extend
(
vec
!
[
0
0
0
0
]
)
;
test
.
extend
(
vec
!
[
0
0
0
0
0
0
0
0
1
2
3
4
5
6
7
8
0
0
0
0
]
)
;
assert_eq
!
(
test
.
len
(
)
32
)
;
let
mut
stream
=
Cursor
:
:
new
(
test
)
;
let
header
=
read_box_header
(
&
mut
stream
)
.
unwrap
(
)
;
let
parsed
=
read_mdhd
(
&
mut
stream
&
header
)
.
unwrap
(
)
;
assert_eq
!
(
parsed
.
name
FourCC
(
*
b
"
mdhd
"
)
)
;
assert_eq
!
(
parsed
.
size
32
)
;
assert_eq
!
(
parsed
.
timescale
16909060
)
;
assert_eq
!
(
parsed
.
duration
84281096
)
;
println
!
(
"
box
{
:
?
}
"
parsed
)
;
}
#
[
test
]
fn
test_read_mdhd_v1
(
)
{
use
std
:
:
io
:
:
Write
;
let
mut
test
:
Vec
<
u8
>
=
vec
!
[
0
0
0
44
]
;
write
!
(
&
mut
test
"
mdhd
"
)
.
unwrap
(
)
;
test
.
extend
(
vec
!
[
1
0
0
0
]
)
;
test
.
extend
(
vec
!
[
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
2
3
4
5
6
7
8
5
6
7
8
0
0
0
0
]
)
;
assert_eq
!
(
test
.
len
(
)
44
)
;
let
mut
stream
=
Cursor
:
:
new
(
test
)
;
let
header
=
read_box_header
(
&
mut
stream
)
.
unwrap
(
)
;
let
parsed
=
read_mdhd
(
&
mut
stream
&
header
)
.
unwrap
(
)
;
assert_eq
!
(
parsed
.
name
FourCC
(
*
b
"
mdhd
"
)
)
;
assert_eq
!
(
parsed
.
size
44
)
;
assert_eq
!
(
parsed
.
timescale
16909060
)
;
assert_eq
!
(
parsed
.
duration
361984551075317512
)
;
println
!
(
"
box
{
:
?
}
"
parsed
)
;
}
