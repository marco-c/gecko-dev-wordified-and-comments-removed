#
!
[
cfg_attr
(
feature
=
"
fuzz
"
feature
(
plugin
)
)
]
#
!
[
cfg_attr
(
feature
=
"
fuzz
"
plugin
(
afl_plugin
)
)
]
#
[
cfg
(
feature
=
"
fuzz
"
)
]
extern
crate
afl
;
extern
crate
byteorder
;
use
byteorder
:
:
ReadBytesExt
;
use
std
:
:
io
:
:
{
Read
Take
}
;
use
std
:
:
io
:
:
Cursor
;
use
std
:
:
cmp
;
mod
boxes
;
use
boxes
:
:
BoxType
;
#
[
cfg
(
test
)
]
mod
tests
;
const
BUF_SIZE_LIMIT
:
u64
=
1024
*
1024
;
static
DEBUG_MODE
:
std
:
:
sync
:
:
atomic
:
:
AtomicBool
=
std
:
:
sync
:
:
atomic
:
:
ATOMIC_BOOL_INIT
;
pub
fn
set_debug_mode
(
mode
:
bool
)
{
DEBUG_MODE
.
store
(
mode
std
:
:
sync
:
:
atomic
:
:
Ordering
:
:
SeqCst
)
;
}
#
[
inline
(
always
)
]
fn
get_debug_mode
(
)
-
>
bool
{
DEBUG_MODE
.
load
(
std
:
:
sync
:
:
atomic
:
:
Ordering
:
:
Relaxed
)
}
macro_rules
!
log
{
(
(
args
:
tt
)
*
)
=
>
(
if
get_debug_mode
(
)
{
println
!
(
(
args
)
*
)
;
}
)
}
#
[
derive
(
Debug
)
]
pub
enum
Error
{
InvalidData
(
&
'
static
str
)
Unsupported
(
&
'
static
str
)
UnexpectedEOF
Io
(
std
:
:
io
:
:
Error
)
NoMoov
}
impl
From
<
std
:
:
io
:
:
Error
>
for
Error
{
fn
from
(
err
:
std
:
:
io
:
:
Error
)
-
>
Error
{
match
err
.
kind
(
)
{
std
:
:
io
:
:
ErrorKind
:
:
UnexpectedEof
=
>
Error
:
:
UnexpectedEOF
_
=
>
Error
:
:
Io
(
err
)
}
}
}
impl
From
<
std
:
:
string
:
:
FromUtf8Error
>
for
Error
{
fn
from
(
_
:
std
:
:
string
:
:
FromUtf8Error
)
-
>
Error
{
Error
:
:
InvalidData
(
"
invalid
utf8
"
)
}
}
pub
type
Result
<
T
>
=
std
:
:
result
:
:
Result
<
T
Error
>
;
#
[
derive
(
Debug
Clone
Copy
)
]
struct
BoxHeader
{
name
:
BoxType
size
:
u64
offset
:
u64
}
#
[
derive
(
Debug
)
]
struct
FileTypeBox
{
major_brand
:
u32
minor_version
:
u32
compatible_brands
:
Vec
<
u32
>
}
#
[
derive
(
Debug
)
]
struct
MovieHeaderBox
{
pub
timescale
:
u32
duration
:
u64
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
TrackHeaderBox
{
track_id
:
u32
pub
disabled
:
bool
pub
duration
:
u64
pub
width
:
u32
pub
height
:
u32
}
#
[
derive
(
Debug
)
]
struct
EditListBox
{
edits
:
Vec
<
Edit
>
}
#
[
derive
(
Debug
)
]
struct
Edit
{
segment_duration
:
u64
media_time
:
i64
media_rate_integer
:
i16
media_rate_fraction
:
i16
}
#
[
derive
(
Debug
)
]
struct
MediaHeaderBox
{
timescale
:
u32
duration
:
u64
}
#
[
derive
(
Debug
)
]
struct
ChunkOffsetBox
{
offsets
:
Vec
<
u64
>
}
#
[
derive
(
Debug
)
]
struct
SyncSampleBox
{
samples
:
Vec
<
u32
>
}
#
[
derive
(
Debug
)
]
struct
SampleToChunkBox
{
samples
:
Vec
<
SampleToChunk
>
}
#
[
derive
(
Debug
)
]
struct
SampleToChunk
{
first_chunk
:
u32
samples_per_chunk
:
u32
sample_description_index
:
u32
}
#
[
derive
(
Debug
)
]
struct
SampleSizeBox
{
sample_size
:
u32
sample_sizes
:
Vec
<
u32
>
}
#
[
derive
(
Debug
)
]
struct
TimeToSampleBox
{
samples
:
Vec
<
Sample
>
}
#
[
derive
(
Debug
)
]
struct
Sample
{
sample_count
:
u32
sample_delta
:
u32
}
#
[
derive
(
Debug
)
]
struct
HandlerBox
{
handler_type
:
u32
}
#
[
derive
(
Debug
)
]
struct
SampleDescriptionBox
{
descriptions
:
Vec
<
SampleEntry
>
}
#
[
derive
(
Debug
Clone
)
]
pub
enum
SampleEntry
{
Audio
(
AudioSampleEntry
)
Video
(
VideoSampleEntry
)
Unknown
}
#
[
allow
(
non_camel_case_types
)
]
#
[
derive
(
Debug
Clone
)
]
pub
struct
ES_Descriptor
{
pub
audio_codec
:
CodecType
pub
audio_sample_rate
:
Option
<
u32
>
pub
codec_specific_config
:
Vec
<
u8
>
}
#
[
allow
(
non_camel_case_types
)
]
#
[
derive
(
Debug
Clone
)
]
pub
enum
AudioCodecSpecific
{
ES_Descriptor
(
ES_Descriptor
)
FLACSpecificBox
(
FLACSpecificBox
)
OpusSpecificBox
(
OpusSpecificBox
)
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
AudioSampleEntry
{
data_reference_index
:
u16
pub
channelcount
:
u16
pub
samplesize
:
u16
pub
samplerate
:
u32
pub
codec_specific
:
AudioCodecSpecific
}
#
[
derive
(
Debug
Clone
)
]
pub
enum
VideoCodecSpecific
{
AVCConfig
(
Vec
<
u8
>
)
VPxConfig
(
VPxConfigBox
)
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
VideoSampleEntry
{
data_reference_index
:
u16
pub
width
:
u16
pub
height
:
u16
pub
codec_specific
:
VideoCodecSpecific
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
VPxConfigBox
{
profile
:
u8
level
:
u8
pub
bit_depth
:
u8
pub
color_space
:
u8
pub
chroma_subsampling
:
u8
transfer_function
:
u8
video_full_range
:
bool
pub
codec_init
:
Vec
<
u8
>
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
FLACMetadataBlock
{
pub
block_type
:
u8
pub
data
:
Vec
<
u8
>
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
FLACSpecificBox
{
version
:
u8
pub
blocks
:
Vec
<
FLACMetadataBlock
>
}
#
[
derive
(
Debug
Clone
)
]
struct
ChannelMappingTable
{
stream_count
:
u8
coupled_count
:
u8
channel_mapping
:
Vec
<
u8
>
}
#
[
derive
(
Debug
Clone
)
]
pub
struct
OpusSpecificBox
{
pub
version
:
u8
output_channel_count
:
u8
pre_skip
:
u16
input_sample_rate
:
u32
output_gain
:
i16
channel_mapping_family
:
u8
channel_mapping_table
:
Option
<
ChannelMappingTable
>
}
#
[
derive
(
Debug
)
]
pub
struct
MovieExtendsBox
{
pub
fragment_duration
:
Option
<
MediaScaledTime
>
}
#
[
derive
(
Debug
Default
)
]
pub
struct
MediaContext
{
pub
timescale
:
Option
<
MediaTimeScale
>
pub
tracks
:
Vec
<
Track
>
pub
mvex
:
Option
<
MovieExtendsBox
>
}
impl
MediaContext
{
pub
fn
new
(
)
-
>
MediaContext
{
Default
:
:
default
(
)
}
}
#
[
derive
(
Debug
PartialEq
)
]
pub
enum
TrackType
{
Audio
Video
Unknown
}
impl
Default
for
TrackType
{
fn
default
(
)
-
>
Self
{
TrackType
:
:
Unknown
}
}
#
[
derive
(
Debug
Clone
Copy
PartialEq
)
]
pub
enum
CodecType
{
Unknown
MP3
AAC
FLAC
Opus
H264
VP9
VP8
EncryptedVideo
EncryptedAudio
}
impl
Default
for
CodecType
{
fn
default
(
)
-
>
Self
{
CodecType
:
:
Unknown
}
}
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
struct
MediaTimeScale
(
pub
u64
)
;
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
struct
MediaScaledTime
(
pub
u64
)
;
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
struct
TrackTimeScale
(
pub
u64
pub
usize
)
;
#
[
derive
(
Debug
Copy
Clone
PartialEq
)
]
pub
struct
TrackScaledTime
(
pub
u64
pub
usize
)
;
#
[
derive
(
Debug
Default
)
]
pub
struct
EmptySampleTableBoxes
{
pub
empty_stts
:
bool
pub
empty_stsc
:
bool
pub
empty_stco
:
bool
}
impl
EmptySampleTableBoxes
{
pub
fn
all_empty
(
&
self
)
-
>
bool
{
self
.
empty_stts
&
self
.
empty_stsc
&
self
.
empty_stco
}
}
#
[
derive
(
Debug
Default
)
]
pub
struct
Track
{
id
:
usize
pub
track_type
:
TrackType
pub
empty_duration
:
Option
<
MediaScaledTime
>
pub
media_time
:
Option
<
TrackScaledTime
>
pub
timescale
:
Option
<
TrackTimeScale
>
pub
duration
:
Option
<
TrackScaledTime
>
pub
track_id
:
Option
<
u32
>
pub
codec_type
:
CodecType
pub
empty_sample_boxes
:
EmptySampleTableBoxes
pub
data
:
Option
<
SampleEntry
>
pub
tkhd
:
Option
<
TrackHeaderBox
>
}
impl
Track
{
fn
new
(
id
:
usize
)
-
>
Track
{
Track
{
id
:
id
.
.
Default
:
:
default
(
)
}
}
}
struct
BMFFBox
<
'
a
T
:
'
a
+
Read
>
{
head
:
BoxHeader
content
:
Take
<
&
'
a
mut
T
>
}
struct
BoxIter
<
'
a
T
:
'
a
+
Read
>
{
src
:
&
'
a
mut
T
}
impl
<
'
a
T
:
Read
>
BoxIter
<
'
a
T
>
{
fn
new
(
src
:
&
mut
T
)
-
>
BoxIter
<
T
>
{
BoxIter
{
src
:
src
}
}
fn
next_box
(
&
mut
self
)
-
>
Result
<
Option
<
BMFFBox
<
T
>
>
>
{
let
r
=
read_box_header
(
self
.
src
)
;
match
r
{
Ok
(
h
)
=
>
Ok
(
Some
(
BMFFBox
{
head
:
h
content
:
self
.
src
.
take
(
h
.
size
-
h
.
offset
)
}
)
)
Err
(
Error
:
:
UnexpectedEOF
)
=
>
Ok
(
None
)
Err
(
e
)
=
>
Err
(
e
)
}
}
}
impl
<
'
a
T
:
Read
>
Read
for
BMFFBox
<
'
a
T
>
{
fn
read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
std
:
:
io
:
:
Result
<
usize
>
{
self
.
content
.
read
(
buf
)
}
}
impl
<
'
a
T
:
Read
>
BMFFBox
<
'
a
T
>
{
fn
bytes_left
(
&
self
)
-
>
usize
{
self
.
content
.
limit
(
)
as
usize
}
fn
get_header
(
&
self
)
-
>
&
BoxHeader
{
&
self
.
head
}
fn
box_iter
<
'
b
>
(
&
'
b
mut
self
)
-
>
BoxIter
<
BMFFBox
<
'
a
T
>
>
{
BoxIter
:
:
new
(
self
)
}
}
fn
read_box_header
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
BoxHeader
>
{
let
size32
=
try
!
(
be_u32
(
src
)
)
;
let
name
=
BoxType
:
:
from
(
try
!
(
be_u32
(
src
)
)
)
;
let
size
=
match
size32
{
0
=
>
return
Err
(
Error
:
:
Unsupported
(
"
unknown
sized
box
"
)
)
1
=
>
{
let
size64
=
try
!
(
be_u64
(
src
)
)
;
if
size64
<
16
{
return
Err
(
Error
:
:
InvalidData
(
"
malformed
wide
size
"
)
)
;
}
size64
}
2
.
.
.
7
=
>
return
Err
(
Error
:
:
InvalidData
(
"
malformed
size
"
)
)
_
=
>
size32
as
u64
}
;
let
offset
=
match
size32
{
1
=
>
4
+
4
+
8
_
=
>
4
+
4
}
;
assert
!
(
offset
<
=
size
)
;
Ok
(
BoxHeader
{
name
:
name
size
:
size
offset
:
offset
}
)
}
fn
read_fullbox_extra
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
(
u8
u32
)
>
{
let
version
=
try
!
(
src
.
read_u8
(
)
)
;
let
flags_a
=
try
!
(
src
.
read_u8
(
)
)
;
let
flags_b
=
try
!
(
src
.
read_u8
(
)
)
;
let
flags_c
=
try
!
(
src
.
read_u8
(
)
)
;
Ok
(
(
version
(
flags_a
as
u32
)
<
<
16
|
(
flags_b
as
u32
)
<
<
8
|
(
flags_c
as
u32
)
)
)
}
fn
skip_box_content
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
(
)
>
{
let
to_skip
=
{
let
header
=
src
.
get_header
(
)
;
log
!
(
"
{
:
?
}
(
skipped
)
"
header
)
;
(
header
.
size
-
header
.
offset
)
as
usize
}
;
assert
!
(
to_skip
=
=
src
.
bytes_left
(
)
)
;
skip
(
src
to_skip
)
}
fn
skip_box_remain
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
(
)
>
{
let
remain
=
{
let
header
=
src
.
get_header
(
)
;
let
len
=
src
.
bytes_left
(
)
;
log
!
(
"
remain
{
}
(
skipped
)
in
{
:
?
}
"
len
header
)
;
len
}
;
skip
(
src
remain
)
}
macro_rules
!
check_parser_state
{
(
src
:
expr
)
=
>
{
if
src
.
limit
(
)
>
0
{
log
!
(
"
bad
parser
state
:
{
}
content
bytes
left
"
src
.
limit
(
)
)
;
return
Err
(
Error
:
:
InvalidData
(
"
unread
box
content
or
bad
parser
sync
"
)
)
;
}
}
}
pub
fn
read_mp4
<
T
:
Read
>
(
f
:
&
mut
T
context
:
&
mut
MediaContext
)
-
>
Result
<
(
)
>
{
let
mut
found_ftyp
=
false
;
let
mut
found_moov
=
false
;
let
mut
iter
=
BoxIter
:
:
new
(
f
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
FileTypeBox
=
>
{
let
ftyp
=
try
!
(
read_ftyp
(
&
mut
b
)
)
;
found_ftyp
=
true
;
log
!
(
"
{
:
?
}
"
ftyp
)
;
}
BoxType
:
:
MovieBox
=
>
{
try
!
(
read_moov
(
&
mut
b
context
)
)
;
found_moov
=
true
;
}
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
;
check_parser_state
!
(
b
.
content
)
;
if
found_moov
{
log
!
(
"
found
moov
{
}
could
stop
pure
'
moov
'
parser
now
"
if
found_ftyp
{
"
and
ftyp
"
}
else
{
"
but
no
ftyp
"
}
)
;
}
}
if
found_moov
{
Ok
(
(
)
)
}
else
{
Err
(
Error
:
:
NoMoov
)
}
}
fn
parse_mvhd
<
T
:
Read
>
(
f
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
(
MovieHeaderBox
Option
<
MediaTimeScale
>
)
>
{
let
mvhd
=
try
!
(
read_mvhd
(
f
)
)
;
if
mvhd
.
timescale
=
=
0
{
return
Err
(
Error
:
:
InvalidData
(
"
zero
timescale
in
mdhd
"
)
)
;
}
let
timescale
=
Some
(
MediaTimeScale
(
mvhd
.
timescale
as
u64
)
)
;
Ok
(
(
mvhd
timescale
)
)
}
fn
read_moov
<
T
:
Read
>
(
f
:
&
mut
BMFFBox
<
T
>
context
:
&
mut
MediaContext
)
-
>
Result
<
(
)
>
{
let
mut
iter
=
f
.
box_iter
(
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
MovieHeaderBox
=
>
{
let
(
mvhd
timescale
)
=
try
!
(
parse_mvhd
(
&
mut
b
)
)
;
context
.
timescale
=
timescale
;
log
!
(
"
{
:
?
}
"
mvhd
)
;
}
BoxType
:
:
TrackBox
=
>
{
let
mut
track
=
Track
:
:
new
(
context
.
tracks
.
len
(
)
)
;
try
!
(
read_trak
(
&
mut
b
&
mut
track
)
)
;
context
.
tracks
.
push
(
track
)
;
}
BoxType
:
:
MovieExtendsBox
=
>
{
let
mvex
=
try
!
(
read_mvex
(
&
mut
b
)
)
;
log
!
(
"
{
:
?
}
"
mvex
)
;
context
.
mvex
=
Some
(
mvex
)
;
}
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
;
check_parser_state
!
(
b
.
content
)
;
}
Ok
(
(
)
)
}
fn
read_mvex
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
MovieExtendsBox
>
{
let
mut
iter
=
src
.
box_iter
(
)
;
let
mut
fragment_duration
=
None
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
MovieExtendsHeaderBox
=
>
{
let
duration
=
try
!
(
read_mehd
(
&
mut
b
)
)
;
fragment_duration
=
Some
(
duration
)
;
}
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
}
Ok
(
MovieExtendsBox
{
fragment_duration
:
fragment_duration
}
)
}
fn
read_mehd
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
MediaScaledTime
>
{
let
(
version
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
fragment_duration
=
match
version
{
1
=
>
try
!
(
be_u64
(
src
)
)
0
=
>
try
!
(
be_u32
(
src
)
)
as
u64
_
=
>
return
Err
(
Error
:
:
InvalidData
(
"
unhandled
mehd
version
"
)
)
}
;
Ok
(
MediaScaledTime
(
fragment_duration
)
)
}
fn
read_trak
<
T
:
Read
>
(
f
:
&
mut
BMFFBox
<
T
>
track
:
&
mut
Track
)
-
>
Result
<
(
)
>
{
let
mut
iter
=
f
.
box_iter
(
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
TrackHeaderBox
=
>
{
let
tkhd
=
try
!
(
read_tkhd
(
&
mut
b
)
)
;
track
.
track_id
=
Some
(
tkhd
.
track_id
)
;
track
.
tkhd
=
Some
(
tkhd
.
clone
(
)
)
;
log
!
(
"
{
:
?
}
"
tkhd
)
;
}
BoxType
:
:
EditBox
=
>
try
!
(
read_edts
(
&
mut
b
track
)
)
BoxType
:
:
MediaBox
=
>
try
!
(
read_mdia
(
&
mut
b
track
)
)
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
;
check_parser_state
!
(
b
.
content
)
;
}
Ok
(
(
)
)
}
fn
read_edts
<
T
:
Read
>
(
f
:
&
mut
BMFFBox
<
T
>
track
:
&
mut
Track
)
-
>
Result
<
(
)
>
{
let
mut
iter
=
f
.
box_iter
(
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
EditListBox
=
>
{
let
elst
=
try
!
(
read_elst
(
&
mut
b
)
)
;
let
mut
empty_duration
=
0
;
let
mut
idx
=
0
;
if
elst
.
edits
.
len
(
)
>
2
{
return
Err
(
Error
:
:
Unsupported
(
"
more
than
two
edits
"
)
)
;
}
if
elst
.
edits
[
idx
]
.
media_time
=
=
-
1
{
empty_duration
=
elst
.
edits
[
idx
]
.
segment_duration
;
if
elst
.
edits
.
len
(
)
<
2
{
return
Err
(
Error
:
:
InvalidData
(
"
expected
additional
edit
"
)
)
;
}
idx
+
=
1
;
}
track
.
empty_duration
=
Some
(
MediaScaledTime
(
empty_duration
)
)
;
if
elst
.
edits
[
idx
]
.
media_time
<
0
{
return
Err
(
Error
:
:
InvalidData
(
"
unexpected
negative
media
time
in
edit
"
)
)
;
}
track
.
media_time
=
Some
(
TrackScaledTime
(
elst
.
edits
[
idx
]
.
media_time
as
u64
track
.
id
)
)
;
log
!
(
"
{
:
?
}
"
elst
)
;
}
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
;
check_parser_state
!
(
b
.
content
)
;
}
Ok
(
(
)
)
}
fn
parse_mdhd
<
T
:
Read
>
(
f
:
&
mut
BMFFBox
<
T
>
track
:
&
mut
Track
)
-
>
Result
<
(
MediaHeaderBox
Option
<
TrackScaledTime
>
Option
<
TrackTimeScale
>
)
>
{
let
mdhd
=
try
!
(
read_mdhd
(
f
)
)
;
let
duration
=
match
mdhd
.
duration
{
std
:
:
u64
:
:
MAX
=
>
None
duration
=
>
Some
(
TrackScaledTime
(
duration
track
.
id
)
)
}
;
if
mdhd
.
timescale
=
=
0
{
return
Err
(
Error
:
:
InvalidData
(
"
zero
timescale
in
mdhd
"
)
)
;
}
let
timescale
=
Some
(
TrackTimeScale
(
mdhd
.
timescale
as
u64
track
.
id
)
)
;
Ok
(
(
mdhd
duration
timescale
)
)
}
fn
read_mdia
<
T
:
Read
>
(
f
:
&
mut
BMFFBox
<
T
>
track
:
&
mut
Track
)
-
>
Result
<
(
)
>
{
let
mut
iter
=
f
.
box_iter
(
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
MediaHeaderBox
=
>
{
let
(
mdhd
duration
timescale
)
=
try
!
(
parse_mdhd
(
&
mut
b
track
)
)
;
track
.
duration
=
duration
;
track
.
timescale
=
timescale
;
log
!
(
"
{
:
?
}
"
mdhd
)
;
}
BoxType
:
:
HandlerBox
=
>
{
let
hdlr
=
try
!
(
read_hdlr
(
&
mut
b
)
)
;
match
hdlr
.
handler_type
{
0x76696465
=
>
track
.
track_type
=
TrackType
:
:
Video
0x736f756e
=
>
track
.
track_type
=
TrackType
:
:
Audio
_
=
>
(
)
}
log
!
(
"
{
:
?
}
"
hdlr
)
;
}
BoxType
:
:
MediaInformationBox
=
>
try
!
(
read_minf
(
&
mut
b
track
)
)
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
;
check_parser_state
!
(
b
.
content
)
;
}
Ok
(
(
)
)
}
fn
read_minf
<
T
:
Read
>
(
f
:
&
mut
BMFFBox
<
T
>
track
:
&
mut
Track
)
-
>
Result
<
(
)
>
{
let
mut
iter
=
f
.
box_iter
(
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
SampleTableBox
=
>
try
!
(
read_stbl
(
&
mut
b
track
)
)
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
;
check_parser_state
!
(
b
.
content
)
;
}
Ok
(
(
)
)
}
fn
read_stbl
<
T
:
Read
>
(
f
:
&
mut
BMFFBox
<
T
>
track
:
&
mut
Track
)
-
>
Result
<
(
)
>
{
let
mut
iter
=
f
.
box_iter
(
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
SampleDescriptionBox
=
>
{
let
stsd
=
try
!
(
read_stsd
(
&
mut
b
track
)
)
;
log
!
(
"
{
:
?
}
"
stsd
)
;
}
BoxType
:
:
TimeToSampleBox
=
>
{
let
stts
=
try
!
(
read_stts
(
&
mut
b
)
)
;
track
.
empty_sample_boxes
.
empty_stts
=
stts
.
samples
.
is_empty
(
)
;
log
!
(
"
{
:
?
}
"
stts
)
;
}
BoxType
:
:
SampleToChunkBox
=
>
{
let
stsc
=
try
!
(
read_stsc
(
&
mut
b
)
)
;
track
.
empty_sample_boxes
.
empty_stsc
=
stsc
.
samples
.
is_empty
(
)
;
log
!
(
"
{
:
?
}
"
stsc
)
;
}
BoxType
:
:
SampleSizeBox
=
>
{
let
stsz
=
try
!
(
read_stsz
(
&
mut
b
)
)
;
log
!
(
"
{
:
?
}
"
stsz
)
;
}
BoxType
:
:
ChunkOffsetBox
=
>
{
let
stco
=
try
!
(
read_stco
(
&
mut
b
)
)
;
track
.
empty_sample_boxes
.
empty_stco
=
stco
.
offsets
.
is_empty
(
)
;
log
!
(
"
{
:
?
}
"
stco
)
;
}
BoxType
:
:
ChunkLargeOffsetBox
=
>
{
let
co64
=
try
!
(
read_co64
(
&
mut
b
)
)
;
log
!
(
"
{
:
?
}
"
co64
)
;
}
BoxType
:
:
SyncSampleBox
=
>
{
let
stss
=
try
!
(
read_stss
(
&
mut
b
)
)
;
log
!
(
"
{
:
?
}
"
stss
)
;
}
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
;
check_parser_state
!
(
b
.
content
)
;
}
Ok
(
(
)
)
}
fn
read_ftyp
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
FileTypeBox
>
{
let
major
=
try
!
(
be_u32
(
src
)
)
;
let
minor
=
try
!
(
be_u32
(
src
)
)
;
let
bytes_left
=
src
.
bytes_left
(
)
;
if
bytes_left
%
4
!
=
0
{
return
Err
(
Error
:
:
InvalidData
(
"
invalid
ftyp
size
"
)
)
;
}
let
brand_count
=
bytes_left
/
4
;
let
mut
brands
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
brand_count
{
brands
.
push
(
try
!
(
be_u32
(
src
)
)
)
;
}
Ok
(
FileTypeBox
{
major_brand
:
major
minor_version
:
minor
compatible_brands
:
brands
}
)
}
fn
read_mvhd
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
MovieHeaderBox
>
{
let
(
version
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
match
version
{
1
=
>
{
try
!
(
skip
(
src
16
)
)
;
}
0
=
>
{
try
!
(
skip
(
src
8
)
)
;
}
_
=
>
return
Err
(
Error
:
:
InvalidData
(
"
unhandled
mvhd
version
"
)
)
}
let
timescale
=
try
!
(
be_u32
(
src
)
)
;
let
duration
=
match
version
{
1
=
>
try
!
(
be_u64
(
src
)
)
0
=
>
{
let
d
=
try
!
(
be_u32
(
src
)
)
;
if
d
=
=
std
:
:
u32
:
:
MAX
{
std
:
:
u64
:
:
MAX
}
else
{
d
as
u64
}
}
_
=
>
return
Err
(
Error
:
:
InvalidData
(
"
unhandled
mvhd
version
"
)
)
}
;
try
!
(
skip
(
src
80
)
)
;
Ok
(
MovieHeaderBox
{
timescale
:
timescale
duration
:
duration
}
)
}
fn
read_tkhd
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
TrackHeaderBox
>
{
let
(
version
flags
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
disabled
=
flags
&
0x1u32
=
=
0
|
|
flags
&
0x2u32
=
=
0
;
match
version
{
1
=
>
{
try
!
(
skip
(
src
16
)
)
;
}
0
=
>
{
try
!
(
skip
(
src
8
)
)
;
}
_
=
>
return
Err
(
Error
:
:
InvalidData
(
"
unhandled
tkhd
version
"
)
)
}
let
track_id
=
try
!
(
be_u32
(
src
)
)
;
try
!
(
skip
(
src
4
)
)
;
let
duration
=
match
version
{
1
=
>
try
!
(
be_u64
(
src
)
)
0
=
>
try
!
(
be_u32
(
src
)
)
as
u64
_
=
>
return
Err
(
Error
:
:
InvalidData
(
"
unhandled
tkhd
version
"
)
)
}
;
try
!
(
skip
(
src
52
)
)
;
let
width
=
try
!
(
be_u32
(
src
)
)
;
let
height
=
try
!
(
be_u32
(
src
)
)
;
Ok
(
TrackHeaderBox
{
track_id
:
track_id
disabled
:
disabled
duration
:
duration
width
:
width
height
:
height
}
)
}
fn
read_elst
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
EditListBox
>
{
let
(
version
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
edit_count
=
try
!
(
be_u32
(
src
)
)
;
if
edit_count
=
=
0
{
return
Err
(
Error
:
:
InvalidData
(
"
invalid
edit
count
"
)
)
;
}
let
mut
edits
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
edit_count
{
let
(
segment_duration
media_time
)
=
match
version
{
1
=
>
{
(
try
!
(
be_u64
(
src
)
)
try
!
(
be_i64
(
src
)
)
)
}
0
=
>
{
(
try
!
(
be_u32
(
src
)
)
as
u64
try
!
(
be_i32
(
src
)
)
as
i64
)
}
_
=
>
return
Err
(
Error
:
:
InvalidData
(
"
unhandled
elst
version
"
)
)
}
;
let
media_rate_integer
=
try
!
(
be_i16
(
src
)
)
;
let
media_rate_fraction
=
try
!
(
be_i16
(
src
)
)
;
edits
.
push
(
Edit
{
segment_duration
:
segment_duration
media_time
:
media_time
media_rate_integer
:
media_rate_integer
media_rate_fraction
:
media_rate_fraction
}
)
}
Ok
(
EditListBox
{
edits
:
edits
}
)
}
fn
read_mdhd
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
MediaHeaderBox
>
{
let
(
version
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
(
timescale
duration
)
=
match
version
{
1
=
>
{
try
!
(
skip
(
src
16
)
)
;
(
try
!
(
be_u32
(
src
)
)
try
!
(
be_u64
(
src
)
)
)
}
0
=
>
{
try
!
(
skip
(
src
8
)
)
;
let
timescale
=
try
!
(
be_u32
(
src
)
)
;
let
duration
=
{
let
d
=
try
!
(
be_u32
(
src
)
)
;
if
d
=
=
std
:
:
u32
:
:
MAX
{
std
:
:
u64
:
:
MAX
}
else
{
d
as
u64
}
}
;
(
timescale
duration
)
}
_
=
>
return
Err
(
Error
:
:
InvalidData
(
"
unhandled
mdhd
version
"
)
)
}
;
try
!
(
skip
(
src
4
)
)
;
Ok
(
MediaHeaderBox
{
timescale
:
timescale
duration
:
duration
}
)
}
fn
read_stco
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
ChunkOffsetBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
offset_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
offsets
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
offset_count
{
offsets
.
push
(
try
!
(
be_u32
(
src
)
)
as
u64
)
;
}
try
!
(
skip_box_remain
(
src
)
)
;
Ok
(
ChunkOffsetBox
{
offsets
:
offsets
}
)
}
fn
read_co64
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
ChunkOffsetBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
offset_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
offsets
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
offset_count
{
offsets
.
push
(
try
!
(
be_u64
(
src
)
)
)
;
}
try
!
(
skip_box_remain
(
src
)
)
;
Ok
(
ChunkOffsetBox
{
offsets
:
offsets
}
)
}
fn
read_stss
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
SyncSampleBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
sample_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
samples
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
sample_count
{
samples
.
push
(
try
!
(
be_u32
(
src
)
)
)
;
}
try
!
(
skip_box_remain
(
src
)
)
;
Ok
(
SyncSampleBox
{
samples
:
samples
}
)
}
fn
read_stsc
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
SampleToChunkBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
sample_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
samples
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
sample_count
{
let
first_chunk
=
try
!
(
be_u32
(
src
)
)
;
let
samples_per_chunk
=
try
!
(
be_u32
(
src
)
)
;
let
sample_description_index
=
try
!
(
be_u32
(
src
)
)
;
samples
.
push
(
SampleToChunk
{
first_chunk
:
first_chunk
samples_per_chunk
:
samples_per_chunk
sample_description_index
:
sample_description_index
}
)
;
}
try
!
(
skip_box_remain
(
src
)
)
;
Ok
(
SampleToChunkBox
{
samples
:
samples
}
)
}
fn
read_stsz
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
SampleSizeBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
sample_size
=
try
!
(
be_u32
(
src
)
)
;
let
sample_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
sample_sizes
=
Vec
:
:
new
(
)
;
if
sample_size
=
=
0
{
for
_
in
0
.
.
sample_count
{
sample_sizes
.
push
(
try
!
(
be_u32
(
src
)
)
)
;
}
}
try
!
(
skip_box_remain
(
src
)
)
;
Ok
(
SampleSizeBox
{
sample_size
:
sample_size
sample_sizes
:
sample_sizes
}
)
}
fn
read_stts
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
TimeToSampleBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
sample_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
samples
=
Vec
:
:
new
(
)
;
for
_
in
0
.
.
sample_count
{
let
sample_count
=
try
!
(
be_u32
(
src
)
)
;
let
sample_delta
=
try
!
(
be_u32
(
src
)
)
;
samples
.
push
(
Sample
{
sample_count
:
sample_count
sample_delta
:
sample_delta
}
)
;
}
try
!
(
skip_box_remain
(
src
)
)
;
Ok
(
TimeToSampleBox
{
samples
:
samples
}
)
}
fn
read_vpcc
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
VPxConfigBox
>
{
let
(
version
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
if
version
!
=
0
{
return
Err
(
Error
:
:
Unsupported
(
"
unknown
vpcC
version
"
)
)
;
}
let
profile
=
try
!
(
src
.
read_u8
(
)
)
;
let
level
=
try
!
(
src
.
read_u8
(
)
)
;
let
(
bit_depth
color_space
)
=
{
let
byte
=
try
!
(
src
.
read_u8
(
)
)
;
(
(
byte
>
>
4
)
&
0x0f
byte
&
0x0f
)
}
;
let
(
chroma_subsampling
transfer_function
video_full_range
)
=
{
let
byte
=
try
!
(
src
.
read_u8
(
)
)
;
(
(
byte
>
>
4
)
&
0x0f
(
byte
>
>
1
)
&
0x07
(
byte
&
1
)
=
=
1
)
}
;
let
codec_init_size
=
try
!
(
be_u16
(
src
)
)
;
let
codec_init
=
try
!
(
read_buf
(
src
codec_init_size
as
usize
)
)
;
Ok
(
VPxConfigBox
{
profile
:
profile
level
:
level
bit_depth
:
bit_depth
color_space
:
color_space
chroma_subsampling
:
chroma_subsampling
transfer_function
:
transfer_function
video_full_range
:
video_full_range
codec_init
:
codec_init
}
)
}
fn
read_flac_metadata
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
FLACMetadataBlock
>
{
let
temp
=
try
!
(
src
.
read_u8
(
)
)
;
let
block_type
=
temp
&
0x7f
;
let
length
=
try
!
(
be_u24
(
src
)
)
;
if
length
as
usize
>
src
.
bytes_left
(
)
{
return
Err
(
Error
:
:
InvalidData
(
"
FLACMetadataBlock
larger
than
parent
box
"
)
)
;
}
let
data
=
try
!
(
read_buf
(
src
length
as
usize
)
)
;
Ok
(
FLACMetadataBlock
{
block_type
:
block_type
data
:
data
}
)
}
fn
read_esds
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
ES_Descriptor
>
{
const
ESDESCR_TAG
:
u8
=
0x03
;
const
DECODER_CONFIG_TAG
:
u8
=
0x04
;
const
DECODER_SPECIFIC_TAG
:
u8
=
0x05
;
let
frequency_table
=
vec
!
[
(
0x1
96000
)
(
0x1
88200
)
(
0x2
64000
)
(
0x3
48000
)
(
0x4
44100
)
(
0x5
32000
)
(
0x6
24000
)
(
0x7
22050
)
(
0x8
16000
)
(
0x9
12000
)
(
0xa
11025
)
(
0xb
8000
)
(
0xc
7350
)
]
;
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
esds_size
=
src
.
head
.
size
-
src
.
head
.
offset
-
4
;
if
esds_size
>
BUF_SIZE_LIMIT
{
return
Err
(
Error
:
:
InvalidData
(
"
esds
box
exceeds
BUF_SIZE_LIMIT
"
)
)
;
}
let
esds_array
=
try
!
(
read_buf
(
src
esds_size
as
usize
)
)
;
let
(
object_profile_indicator
sample_frequency
)
=
{
let
mut
object_profile
:
u8
=
0
;
let
mut
sample_frequency
=
None
;
let
esds
=
&
mut
Cursor
:
:
new
(
&
esds_array
)
;
let
next_tag
=
try
!
(
esds
.
read_u8
(
)
)
;
if
next_tag
!
=
ESDESCR_TAG
{
return
Err
(
Error
:
:
Unsupported
(
"
fail
to
parse
ES
descriptor
"
)
)
;
}
let
esds_extend
=
try
!
(
esds
.
read_u8
(
)
)
;
let
esds_end
=
if
esds_extend
>
=
0x80
{
try
!
(
skip
(
esds
2
)
)
;
esds
.
position
(
)
+
try
!
(
esds
.
read_u8
(
)
)
as
u64
}
else
{
esds
.
position
(
)
+
esds_extend
as
u64
}
;
try
!
(
skip
(
esds
2
)
)
;
let
esds_flags
=
try
!
(
esds
.
read_u8
(
)
)
;
if
esds_flags
&
0x80
>
0
{
try
!
(
skip
(
esds
2
)
)
;
}
if
esds_flags
&
0x40
>
0
{
let
skip_es_len
:
usize
=
try
!
(
esds
.
read_u8
(
)
)
as
usize
+
2
;
try
!
(
skip
(
esds
skip_es_len
)
)
;
}
if
esds_end
>
esds
.
position
(
)
{
let
next_tag
=
try
!
(
esds
.
read_u8
(
)
)
;
if
next_tag
=
=
DECODER_CONFIG_TAG
{
let
dcds_extend
=
try
!
(
esds
.
read_u8
(
)
)
;
if
dcds_extend
>
=
0x80
{
try
!
(
skip
(
esds
3
)
)
;
}
object_profile
=
try
!
(
esds
.
read_u8
(
)
)
;
try
!
(
skip
(
esds
12
)
)
;
}
}
if
esds_end
>
esds
.
position
(
)
{
let
next_tag
=
try
!
(
esds
.
read_u8
(
)
)
;
if
next_tag
=
=
DECODER_SPECIFIC_TAG
{
let
dsds_extend
=
try
!
(
esds
.
read_u8
(
)
)
;
if
dsds_extend
>
=
0x80
{
try
!
(
skip
(
esds
3
)
)
;
}
let
audio_specific_config
=
try
!
(
be_u16
(
esds
)
)
;
let
sample_index
=
(
audio_specific_config
&
0x07FF
)
>
>
7
;
sample_frequency
=
frequency_table
.
iter
(
)
.
find
(
|
item
|
item
.
0
=
=
sample_index
)
.
map
(
|
x
|
x
.
1
)
;
}
}
(
object_profile
sample_frequency
)
}
;
let
codec
=
match
object_profile_indicator
{
0x40
|
0x41
=
>
CodecType
:
:
AAC
0x6B
=
>
CodecType
:
:
MP3
_
=
>
CodecType
:
:
Unknown
}
;
if
codec
=
=
CodecType
:
:
Unknown
{
return
Err
(
Error
:
:
Unsupported
(
"
unknown
audio
codec
"
)
)
;
}
Ok
(
ES_Descriptor
{
audio_codec
:
codec
audio_sample_rate
:
sample_frequency
codec_specific_config
:
esds_array
}
)
}
fn
read_dfla
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
FLACSpecificBox
>
{
let
(
version
flags
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
if
version
!
=
0
{
return
Err
(
Error
:
:
Unsupported
(
"
unknown
dfLa
(
FLAC
)
version
"
)
)
;
}
if
flags
!
=
0
{
return
Err
(
Error
:
:
InvalidData
(
"
no
-
zero
dfLa
(
FLAC
)
flags
"
)
)
;
}
let
mut
blocks
=
Vec
:
:
new
(
)
;
while
src
.
bytes_left
(
)
>
0
{
let
block
=
try
!
(
read_flac_metadata
(
src
)
)
;
blocks
.
push
(
block
)
;
}
if
blocks
.
is_empty
(
)
{
return
Err
(
Error
:
:
InvalidData
(
"
FLACSpecificBox
missing
metadata
"
)
)
;
}
else
if
blocks
[
0
]
.
block_type
!
=
0
{
println
!
(
"
flac
metadata
block
:
\
n
{
:
?
}
"
blocks
[
0
]
)
;
return
Err
(
Error
:
:
InvalidData
(
"
FLACSpecificBox
must
have
STREAMINFO
metadata
first
"
)
)
;
}
else
if
blocks
[
0
]
.
data
.
len
(
)
!
=
34
{
return
Err
(
Error
:
:
InvalidData
(
"
FLACSpecificBox
STREAMINFO
block
is
the
wrong
size
"
)
)
;
}
Ok
(
FLACSpecificBox
{
version
:
version
blocks
:
blocks
}
)
}
fn
read_dops
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
OpusSpecificBox
>
{
let
version
=
try
!
(
src
.
read_u8
(
)
)
;
if
version
!
=
0
{
return
Err
(
Error
:
:
Unsupported
(
"
unknown
dOps
(
Opus
)
version
"
)
)
;
}
let
output_channel_count
=
try
!
(
src
.
read_u8
(
)
)
;
let
pre_skip
=
try
!
(
be_u16
(
src
)
)
;
let
input_sample_rate
=
try
!
(
be_u32
(
src
)
)
;
let
output_gain
=
try
!
(
be_i16
(
src
)
)
;
let
channel_mapping_family
=
try
!
(
src
.
read_u8
(
)
)
;
let
channel_mapping_table
=
if
channel_mapping_family
=
=
0
{
None
}
else
{
let
stream_count
=
try
!
(
src
.
read_u8
(
)
)
;
let
coupled_count
=
try
!
(
src
.
read_u8
(
)
)
;
let
channel_mapping
=
try
!
(
read_buf
(
src
output_channel_count
as
usize
)
)
;
Some
(
ChannelMappingTable
{
stream_count
:
stream_count
coupled_count
:
coupled_count
channel_mapping
:
channel_mapping
}
)
}
;
Ok
(
OpusSpecificBox
{
version
:
version
output_channel_count
:
output_channel_count
pre_skip
:
pre_skip
input_sample_rate
:
input_sample_rate
output_gain
:
output_gain
channel_mapping_family
:
channel_mapping_family
channel_mapping_table
:
channel_mapping_table
}
)
}
pub
fn
serialize_opus_header
<
W
:
byteorder
:
:
WriteBytesExt
+
std
:
:
io
:
:
Write
>
(
opus
:
&
OpusSpecificBox
dst
:
&
mut
W
)
-
>
Result
<
(
)
>
{
match
dst
.
write
(
b
"
OpusHead
"
)
{
Err
(
e
)
=
>
return
Err
(
Error
:
:
from
(
e
)
)
Ok
(
bytes
)
=
>
{
if
bytes
!
=
8
{
return
Err
(
Error
:
:
InvalidData
(
"
Couldn
'
t
write
OpusHead
tag
.
"
)
)
;
}
}
}
try
!
(
dst
.
write_u8
(
1
)
)
;
try
!
(
dst
.
write_u8
(
opus
.
output_channel_count
)
)
;
try
!
(
dst
.
write_u16
:
:
<
byteorder
:
:
LittleEndian
>
(
opus
.
pre_skip
)
)
;
try
!
(
dst
.
write_u32
:
:
<
byteorder
:
:
LittleEndian
>
(
opus
.
input_sample_rate
)
)
;
try
!
(
dst
.
write_i16
:
:
<
byteorder
:
:
LittleEndian
>
(
opus
.
output_gain
)
)
;
try
!
(
dst
.
write_u8
(
opus
.
channel_mapping_family
)
)
;
match
opus
.
channel_mapping_table
{
None
=
>
{
}
Some
(
ref
table
)
=
>
{
try
!
(
dst
.
write_u8
(
table
.
stream_count
)
)
;
try
!
(
dst
.
write_u8
(
table
.
coupled_count
)
)
;
match
dst
.
write
(
&
table
.
channel_mapping
)
{
Err
(
e
)
=
>
return
Err
(
Error
:
:
from
(
e
)
)
Ok
(
bytes
)
=
>
{
if
bytes
!
=
table
.
channel_mapping
.
len
(
)
{
return
Err
(
Error
:
:
InvalidData
(
"
Couldn
'
t
write
channel
mapping
table
data
.
"
)
)
;
}
}
}
}
}
;
Ok
(
(
)
)
}
fn
read_hdlr
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
HandlerBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
try
!
(
skip
(
src
4
)
)
;
let
handler_type
=
try
!
(
be_u32
(
src
)
)
;
try
!
(
skip
(
src
12
)
)
;
let
bytes_left
=
src
.
bytes_left
(
)
;
let
_name
=
try
!
(
read_null_terminated_string
(
src
bytes_left
)
)
;
Ok
(
HandlerBox
{
handler_type
:
handler_type
}
)
}
fn
read_video_sample_entry
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
track
:
&
mut
Track
)
-
>
Result
<
SampleEntry
>
{
let
name
=
src
.
get_header
(
)
.
name
;
track
.
codec_type
=
match
name
{
BoxType
:
:
AVCSampleEntry
|
BoxType
:
:
AVC3SampleEntry
=
>
CodecType
:
:
H264
BoxType
:
:
VP8SampleEntry
=
>
CodecType
:
:
VP8
BoxType
:
:
VP9SampleEntry
=
>
CodecType
:
:
VP9
BoxType
:
:
ProtectedVisualSampleEntry
=
>
CodecType
:
:
EncryptedVideo
_
=
>
CodecType
:
:
Unknown
}
;
try
!
(
skip
(
src
6
)
)
;
let
data_reference_index
=
try
!
(
be_u16
(
src
)
)
;
try
!
(
skip
(
src
16
)
)
;
let
width
=
try
!
(
be_u16
(
src
)
)
;
let
height
=
try
!
(
be_u16
(
src
)
)
;
try
!
(
skip
(
src
14
)
)
;
let
_compressorname
=
try
!
(
read_fixed_length_pascal_string
(
src
32
)
)
;
try
!
(
skip
(
src
4
)
)
;
let
mut
codec_specific
=
None
;
let
mut
iter
=
src
.
box_iter
(
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
AVCConfigurationBox
=
>
{
if
(
name
!
=
BoxType
:
:
AVCSampleEntry
&
&
name
!
=
BoxType
:
:
AVC3SampleEntry
&
&
name
!
=
BoxType
:
:
ProtectedVisualSampleEntry
)
|
|
codec_specific
.
is_some
(
)
{
return
Err
(
Error
:
:
InvalidData
(
"
malformed
video
sample
entry
"
)
)
;
}
let
avcc_size
=
b
.
head
.
size
-
b
.
head
.
offset
;
if
avcc_size
>
BUF_SIZE_LIMIT
{
return
Err
(
Error
:
:
InvalidData
(
"
avcC
box
exceeds
BUF_SIZE_LIMIT
"
)
)
;
}
let
avcc
=
try
!
(
read_buf
(
&
mut
b
.
content
avcc_size
as
usize
)
)
;
codec_specific
=
Some
(
VideoCodecSpecific
:
:
AVCConfig
(
avcc
)
)
;
}
BoxType
:
:
VPCodecConfigurationBox
=
>
{
if
(
name
!
=
BoxType
:
:
VP8SampleEntry
&
&
name
!
=
BoxType
:
:
VP9SampleEntry
)
|
|
codec_specific
.
is_some
(
)
{
return
Err
(
Error
:
:
InvalidData
(
"
malformed
video
sample
entry
"
)
)
;
}
let
vpcc
=
try
!
(
read_vpcc
(
&
mut
b
)
)
;
codec_specific
=
Some
(
VideoCodecSpecific
:
:
VPxConfig
(
vpcc
)
)
;
}
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
check_parser_state
!
(
b
.
content
)
;
}
codec_specific
.
map
(
|
codec_specific
|
SampleEntry
:
:
Video
(
VideoSampleEntry
{
data_reference_index
:
data_reference_index
width
:
width
height
:
height
codec_specific
:
codec_specific
}
)
)
.
ok_or_else
(
|
|
Error
:
:
InvalidData
(
"
malformed
video
sample
entry
"
)
)
}
fn
read_qt_wave_atom
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
)
-
>
Result
<
ES_Descriptor
>
{
let
mut
codec_specific
=
None
;
let
mut
iter
=
src
.
box_iter
(
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
ESDBox
=
>
{
let
esds
=
try
!
(
read_esds
(
&
mut
b
)
)
;
codec_specific
=
Some
(
esds
)
;
}
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
}
codec_specific
.
ok_or_else
(
|
|
Error
:
:
InvalidData
(
"
malformed
audio
sample
entry
"
)
)
}
fn
read_audio_sample_entry
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
track
:
&
mut
Track
)
-
>
Result
<
SampleEntry
>
{
let
name
=
src
.
get_header
(
)
.
name
;
track
.
codec_type
=
match
name
{
BoxType
:
:
MP4AudioSampleEntry
=
>
CodecType
:
:
AAC
BoxType
:
:
FLACSampleEntry
=
>
CodecType
:
:
FLAC
BoxType
:
:
OpusSampleEntry
=
>
CodecType
:
:
Opus
BoxType
:
:
ProtectedAudioSampleEntry
=
>
CodecType
:
:
EncryptedAudio
_
=
>
CodecType
:
:
Unknown
}
;
try
!
(
skip
(
src
6
)
)
;
let
data_reference_index
=
try
!
(
be_u16
(
src
)
)
;
let
version
=
try
!
(
be_u16
(
src
)
)
;
try
!
(
skip
(
src
6
)
)
;
let
channelcount
=
try
!
(
be_u16
(
src
)
)
;
let
samplesize
=
try
!
(
be_u16
(
src
)
)
;
try
!
(
skip
(
src
4
)
)
;
let
samplerate
=
try
!
(
be_u32
(
src
)
)
;
match
version
{
0
=
>
(
)
1
=
>
{
try
!
(
skip
(
src
16
)
)
;
}
_
=
>
return
Err
(
Error
:
:
Unsupported
(
"
unsupported
non
-
isom
audio
sample
entry
"
)
)
}
let
mut
codec_specific
=
None
;
let
mut
iter
=
src
.
box_iter
(
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
match
b
.
head
.
name
{
BoxType
:
:
ESDBox
=
>
{
if
(
name
!
=
BoxType
:
:
MP4AudioSampleEntry
&
&
name
!
=
BoxType
:
:
ProtectedAudioSampleEntry
)
|
|
codec_specific
.
is_some
(
)
{
return
Err
(
Error
:
:
InvalidData
(
"
malformed
audio
sample
entry
"
)
)
;
}
let
esds
=
try
!
(
read_esds
(
&
mut
b
)
)
;
track
.
codec_type
=
esds
.
audio_codec
;
codec_specific
=
Some
(
AudioCodecSpecific
:
:
ES_Descriptor
(
esds
)
)
;
}
BoxType
:
:
FLACSpecificBox
=
>
{
if
name
!
=
BoxType
:
:
FLACSampleEntry
|
|
codec_specific
.
is_some
(
)
{
return
Err
(
Error
:
:
InvalidData
(
"
malformed
audio
sample
entry
"
)
)
;
}
let
dfla
=
try
!
(
read_dfla
(
&
mut
b
)
)
;
track
.
codec_type
=
CodecType
:
:
FLAC
;
codec_specific
=
Some
(
AudioCodecSpecific
:
:
FLACSpecificBox
(
dfla
)
)
;
}
BoxType
:
:
OpusSpecificBox
=
>
{
if
name
!
=
BoxType
:
:
OpusSampleEntry
|
|
codec_specific
.
is_some
(
)
{
return
Err
(
Error
:
:
InvalidData
(
"
malformed
audio
sample
entry
"
)
)
;
}
let
dops
=
try
!
(
read_dops
(
&
mut
b
)
)
;
track
.
codec_type
=
CodecType
:
:
Opus
;
codec_specific
=
Some
(
AudioCodecSpecific
:
:
OpusSpecificBox
(
dops
)
)
;
}
BoxType
:
:
QTWaveAtom
=
>
{
let
qt_esds
=
try
!
(
read_qt_wave_atom
(
&
mut
b
)
)
;
track
.
codec_type
=
qt_esds
.
audio_codec
;
codec_specific
=
Some
(
AudioCodecSpecific
:
:
ES_Descriptor
(
qt_esds
)
)
;
}
_
=
>
try
!
(
skip_box_content
(
&
mut
b
)
)
}
check_parser_state
!
(
b
.
content
)
;
}
codec_specific
.
map
(
|
codec_specific
|
SampleEntry
:
:
Audio
(
AudioSampleEntry
{
data_reference_index
:
data_reference_index
channelcount
:
channelcount
samplesize
:
samplesize
samplerate
:
samplerate
codec_specific
:
codec_specific
}
)
)
.
ok_or_else
(
|
|
Error
:
:
InvalidData
(
"
malformed
audio
sample
entry
"
)
)
}
fn
read_stsd
<
T
:
Read
>
(
src
:
&
mut
BMFFBox
<
T
>
track
:
&
mut
Track
)
-
>
Result
<
SampleDescriptionBox
>
{
let
(
_
_
)
=
try
!
(
read_fullbox_extra
(
src
)
)
;
let
description_count
=
try
!
(
be_u32
(
src
)
)
;
let
mut
descriptions
=
Vec
:
:
new
(
)
;
{
let
mut
iter
=
src
.
box_iter
(
)
;
while
let
Some
(
mut
b
)
=
try
!
(
iter
.
next_box
(
)
)
{
let
description
=
match
track
.
track_type
{
TrackType
:
:
Video
=
>
read_video_sample_entry
(
&
mut
b
track
)
TrackType
:
:
Audio
=
>
read_audio_sample_entry
(
&
mut
b
track
)
TrackType
:
:
Unknown
=
>
Err
(
Error
:
:
Unsupported
(
"
unknown
track
type
"
)
)
}
;
let
description
=
match
description
{
Ok
(
desc
)
=
>
desc
Err
(
Error
:
:
Unsupported
(
_
)
)
=
>
{
let
to_skip
=
b
.
bytes_left
(
)
;
try
!
(
skip
(
&
mut
b
to_skip
)
)
;
SampleEntry
:
:
Unknown
}
Err
(
e
)
=
>
return
Err
(
e
)
}
;
if
track
.
data
.
is_none
(
)
{
track
.
data
=
Some
(
description
.
clone
(
)
)
;
}
else
{
log
!
(
"
*
*
don
'
t
know
how
to
handle
multiple
descriptions
*
*
"
)
;
}
descriptions
.
push
(
description
)
;
check_parser_state
!
(
b
.
content
)
;
if
descriptions
.
len
(
)
=
=
description_count
as
usize
{
break
;
}
}
}
try
!
(
skip_box_remain
(
src
)
)
;
Ok
(
SampleDescriptionBox
{
descriptions
:
descriptions
}
)
}
fn
skip
<
T
:
Read
>
(
src
:
&
mut
T
mut
bytes
:
usize
)
-
>
Result
<
(
)
>
{
const
BUF_SIZE
:
usize
=
64
*
1024
;
let
mut
buf
=
vec
!
[
0
;
BUF_SIZE
]
;
while
bytes
>
0
{
let
buf_size
=
cmp
:
:
min
(
bytes
BUF_SIZE
)
;
let
len
=
try
!
(
src
.
take
(
buf_size
as
u64
)
.
read
(
&
mut
buf
)
)
;
if
len
=
=
0
{
return
Err
(
Error
:
:
UnexpectedEOF
)
;
}
bytes
-
=
len
;
}
Ok
(
(
)
)
}
fn
read_buf
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
size
:
usize
)
-
>
Result
<
Vec
<
u8
>
>
{
let
mut
buf
=
vec
!
[
0
;
size
]
;
let
r
=
try
!
(
src
.
read
(
&
mut
buf
)
)
;
if
r
!
=
size
{
return
Err
(
Error
:
:
InvalidData
(
"
failed
buffer
read
"
)
)
;
}
Ok
(
buf
)
}
fn
read_null_terminated_string
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
mut
size
:
usize
)
-
>
Result
<
String
>
{
let
mut
buf
=
Vec
:
:
new
(
)
;
while
size
>
0
{
let
c
=
try
!
(
src
.
read_u8
(
)
)
;
if
c
=
=
0
{
break
;
}
buf
.
push
(
c
)
;
size
-
=
1
;
}
String
:
:
from_utf8
(
buf
)
.
map_err
(
From
:
:
from
)
}
#
[
allow
(
dead_code
)
]
fn
read_pascal_string
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
String
>
{
let
len
=
try
!
(
src
.
read_u8
(
)
)
;
let
buf
=
try
!
(
read_buf
(
src
len
as
usize
)
)
;
String
:
:
from_utf8
(
buf
)
.
map_err
(
From
:
:
from
)
}
fn
read_fixed_length_pascal_string
<
T
:
Read
>
(
src
:
&
mut
T
size
:
usize
)
-
>
Result
<
String
>
{
assert
!
(
size
>
0
)
;
let
len
=
cmp
:
:
min
(
try
!
(
src
.
read_u8
(
)
)
as
usize
size
-
1
)
;
let
buf
=
try
!
(
read_buf
(
src
len
)
)
;
try
!
(
skip
(
src
size
-
1
-
buf
.
len
(
)
)
)
;
String
:
:
from_utf8
(
buf
)
.
map_err
(
From
:
:
from
)
}
fn
be_i16
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
i16
>
{
src
.
read_i16
:
:
<
byteorder
:
:
BigEndian
>
(
)
.
map_err
(
From
:
:
from
)
}
fn
be_i32
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
i32
>
{
src
.
read_i32
:
:
<
byteorder
:
:
BigEndian
>
(
)
.
map_err
(
From
:
:
from
)
}
fn
be_i64
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
i64
>
{
src
.
read_i64
:
:
<
byteorder
:
:
BigEndian
>
(
)
.
map_err
(
From
:
:
from
)
}
fn
be_u16
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
u16
>
{
src
.
read_u16
:
:
<
byteorder
:
:
BigEndian
>
(
)
.
map_err
(
From
:
:
from
)
}
fn
be_u24
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
u32
>
{
src
.
read_uint
:
:
<
byteorder
:
:
BigEndian
>
(
3
)
.
map
(
|
v
|
v
as
u32
)
.
map_err
(
From
:
:
from
)
}
fn
be_u32
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
u32
>
{
src
.
read_u32
:
:
<
byteorder
:
:
BigEndian
>
(
)
.
map_err
(
From
:
:
from
)
}
fn
be_u64
<
T
:
ReadBytesExt
>
(
src
:
&
mut
T
)
-
>
Result
<
u64
>
{
src
.
read_u64
:
:
<
byteorder
:
:
BigEndian
>
(
)
.
map_err
(
From
:
:
from
)
}
