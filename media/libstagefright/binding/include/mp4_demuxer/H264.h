#
ifndef
MP4_DEMUXER_H264_H_
#
define
MP4_DEMUXER_H264_H_
#
include
"
mp4_demuxer
/
DecoderData
.
h
"
namespace
mp4_demuxer
{
class
BitReader
;
struct
SPSData
{
uint32_t
pic_width
;
uint32_t
pic_height
;
bool
interlaced
;
uint32_t
display_width
;
uint32_t
display_height
;
float
sample_ratio
;
uint32_t
crop_left
;
uint32_t
crop_right
;
uint32_t
crop_top
;
uint32_t
crop_bottom
;
bool
constraint_set0_flag
;
bool
constraint_set1_flag
;
bool
constraint_set2_flag
;
bool
constraint_set3_flag
;
bool
constraint_set4_flag
;
bool
constraint_set5_flag
;
uint8_t
profile_idc
;
uint8_t
level_idc
;
uint8_t
seq_parameter_set_id
;
uint8_t
chroma_format_idc
;
bool
separate_colour_plane_flag
;
bool
seq_scaling_matrix_present_flag
;
uint8_t
log2_max_frame_num
;
uint8_t
pic_order_cnt_type
;
uint8_t
log2_max_pic_order_cnt_lsb
;
bool
delta_pic_order_always_zero_flag
;
int8_t
offset_for_non_ref_pic
;
int8_t
offset_for_top_to_bottom_field
;
uint32_t
max_num_ref_frames
;
bool
gaps_in_frame_num_allowed_flag
;
uint32_t
pic_width_in_mbs
;
uint32_t
pic_height_in_map_units
;
bool
frame_mbs_only_flag
;
bool
mb_adaptive_frame_field_flag
;
bool
frame_cropping_flag
;
uint32_t
frame_crop_left_offset
;
uint32_t
frame_crop_right_offset
;
uint32_t
frame_crop_top_offset
;
uint32_t
frame_crop_bottom_offset
;
bool
vui_parameters_present_flag
;
bool
aspect_ratio_info_present_flag
;
uint8_t
aspect_ratio_idc
;
uint32_t
sar_width
;
uint32_t
sar_height
;
bool
video_signal_type_present_flag
;
bool
overscan_info_present_flag
;
bool
overscan_appropriate_flag
;
uint8_t
video_format
;
bool
video_full_range_flag
;
bool
colour_description_present_flag
;
uint8_t
colour_primaries
;
uint8_t
transfer_characteristics
;
uint8_t
matrix_coefficients
;
bool
chroma_loc_info_present_flag
;
uint32_t
chroma_sample_loc_type_top_field
;
uint32_t
chroma_sample_loc_type_bottom_field
;
bool
timing_info_present_flag
;
uint32_t
num_units_in_tick
;
uint32_t
time_scale
;
bool
fixed_frame_rate_flag
;
bool
scaling_matrix_present
;
uint8_t
scaling_matrix4x4
[
6
]
[
16
]
;
uint8_t
scaling_matrix8x8
[
6
]
[
64
]
;
SPSData
(
)
;
}
;
struct
PPSData
{
uint8_t
pic_parameter_set_id
;
uint8_t
seq_parameter_set_id
;
bool
entropy_coding_mode_flag
;
bool
bottom_field_pic_order_in_frame_present_flag
;
uint8_t
num_slice_groups_minus1
;
uint8_t
slice_group_map_type
;
uint32_t
run_length_minus1
[
8
]
;
uint32_t
top_left
[
8
]
;
uint32_t
bottom_right
[
8
]
;
bool
slice_group_change_direction_flag
;
uint32_t
slice_group_change_rate_minus1
;
uint32_t
pic_size_in_map_units_minus1
;
uint8_t
num_ref_idx_l0_default_active_minus1
;
uint8_t
num_ref_idx_l1_default_active_minus1
;
bool
weighted_pred_flag
;
uint8_t
weighted_bipred_idc
;
int8_t
pic_init_qp_minus26
;
int8_t
pic_init_qs_minus26
;
int8_t
chroma_qp_index_offset
;
bool
deblocking_filter_control_present_flag
;
bool
constrained_intra_pred_flag
;
bool
redundant_pic_cnt_present_flag
;
bool
transform_8x8_mode_flag
;
int8_t
second_chroma_qp_index_offset
;
uint8_t
scaling_matrix4x4
[
6
]
[
16
]
;
uint8_t
scaling_matrix8x8
[
6
]
[
64
]
;
PPSData
(
)
;
}
;
class
H264
{
public
:
static
bool
DecodeSPSFromExtraData
(
const
mozilla
:
:
MediaByteBuffer
*
aExtraData
SPSData
&
aDest
)
;
static
already_AddRefed
<
mozilla
:
:
MediaByteBuffer
>
DecodeNALUnit
(
const
mozilla
:
:
MediaByteBuffer
*
aNAL
)
;
static
bool
EnsureSPSIsSane
(
SPSData
&
aSPS
)
;
static
bool
DecodePPSFromExtraData
(
const
mozilla
:
:
MediaByteBuffer
*
aExtraData
const
SPSData
&
aSPS
PPSData
&
aDest
)
;
static
uint32_t
ComputeMaxRefFrames
(
const
mozilla
:
:
MediaByteBuffer
*
aExtraData
)
;
enum
class
FrameType
{
I_FRAME
OTHER
INVALID
}
;
static
FrameType
GetFrameType
(
const
mozilla
:
:
MediaRawData
*
aSample
)
;
static
const
uint8_t
ZZ_SCAN
[
16
]
;
static
const
uint8_t
ZZ_SCAN8
[
64
]
;
private
:
static
bool
DecodeSPS
(
const
mozilla
:
:
MediaByteBuffer
*
aSPS
SPSData
&
aDest
)
;
static
bool
DecodePPS
(
const
mozilla
:
:
MediaByteBuffer
*
aPPS
const
SPSData
&
aSPS
PPSData
&
aDest
)
;
static
void
vui_parameters
(
BitReader
&
aBr
SPSData
&
aDest
)
;
static
void
hrd_parameters
(
BitReader
&
aBr
)
;
}
;
}
#
endif
