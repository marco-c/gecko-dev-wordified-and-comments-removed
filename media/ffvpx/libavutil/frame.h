#
ifndef
AVUTIL_FRAME_H
#
define
AVUTIL_FRAME_H
#
include
<
stdint
.
h
>
#
include
"
avutil
.
h
"
#
include
"
buffer
.
h
"
#
include
"
dict
.
h
"
#
include
"
rational
.
h
"
#
include
"
samplefmt
.
h
"
#
include
"
pixfmt
.
h
"
#
include
"
version
.
h
"
enum
AVFrameSideDataType
{
AV_FRAME_DATA_PANSCAN
AV_FRAME_DATA_A53_CC
AV_FRAME_DATA_STEREO3D
AV_FRAME_DATA_MATRIXENCODING
AV_FRAME_DATA_DOWNMIX_INFO
AV_FRAME_DATA_REPLAYGAIN
AV_FRAME_DATA_DISPLAYMATRIX
AV_FRAME_DATA_AFD
AV_FRAME_DATA_MOTION_VECTORS
AV_FRAME_DATA_SKIP_SAMPLES
AV_FRAME_DATA_AUDIO_SERVICE_TYPE
AV_FRAME_DATA_MASTERING_DISPLAY_METADATA
AV_FRAME_DATA_GOP_TIMECODE
}
;
enum
AVActiveFormatDescription
{
AV_AFD_SAME
=
8
AV_AFD_4_3
=
9
AV_AFD_16_9
=
10
AV_AFD_14_9
=
11
AV_AFD_4_3_SP_14_9
=
13
AV_AFD_16_9_SP_14_9
=
14
AV_AFD_SP_4_3
=
15
}
;
typedef
struct
AVFrameSideData
{
enum
AVFrameSideDataType
type
;
uint8_t
*
data
;
int
size
;
AVDictionary
*
metadata
;
AVBufferRef
*
buf
;
}
AVFrameSideData
;
typedef
struct
AVFrame
{
#
define
AV_NUM_DATA_POINTERS
8
uint8_t
*
data
[
AV_NUM_DATA_POINTERS
]
;
int
linesize
[
AV_NUM_DATA_POINTERS
]
;
uint8_t
*
*
extended_data
;
int
width
height
;
int
nb_samples
;
int
format
;
int
key_frame
;
enum
AVPictureType
pict_type
;
AVRational
sample_aspect_ratio
;
int64_t
pts
;
int64_t
pkt_pts
;
int64_t
pkt_dts
;
int
coded_picture_number
;
int
display_picture_number
;
int
quality
;
void
*
opaque
;
#
if
FF_API_ERROR_FRAME
attribute_deprecated
uint64_t
error
[
AV_NUM_DATA_POINTERS
]
;
#
endif
int
repeat_pict
;
int
interlaced_frame
;
int
top_field_first
;
int
palette_has_changed
;
int64_t
reordered_opaque
;
int
sample_rate
;
uint64_t
channel_layout
;
AVBufferRef
*
buf
[
AV_NUM_DATA_POINTERS
]
;
AVBufferRef
*
*
extended_buf
;
int
nb_extended_buf
;
AVFrameSideData
*
*
side_data
;
int
nb_side_data
;
#
define
AV_FRAME_FLAG_CORRUPT
(
1
<
<
0
)
int
flags
;
enum
AVColorRange
color_range
;
enum
AVColorPrimaries
color_primaries
;
enum
AVColorTransferCharacteristic
color_trc
;
enum
AVColorSpace
colorspace
;
enum
AVChromaLocation
chroma_location
;
int64_t
best_effort_timestamp
;
int64_t
pkt_pos
;
int64_t
pkt_duration
;
AVDictionary
*
metadata
;
int
decode_error_flags
;
#
define
FF_DECODE_ERROR_INVALID_BITSTREAM
1
#
define
FF_DECODE_ERROR_MISSING_REFERENCE
2
int
channels
;
int
pkt_size
;
#
if
FF_API_FRAME_QP
attribute_deprecated
int8_t
*
qscale_table
;
attribute_deprecated
int
qstride
;
attribute_deprecated
int
qscale_type
;
AVBufferRef
*
qp_table_buf
;
#
endif
}
AVFrame
;
int64_t
av_frame_get_best_effort_timestamp
(
const
AVFrame
*
frame
)
;
void
av_frame_set_best_effort_timestamp
(
AVFrame
*
frame
int64_t
val
)
;
int64_t
av_frame_get_pkt_duration
(
const
AVFrame
*
frame
)
;
void
av_frame_set_pkt_duration
(
AVFrame
*
frame
int64_t
val
)
;
int64_t
av_frame_get_pkt_pos
(
const
AVFrame
*
frame
)
;
void
av_frame_set_pkt_pos
(
AVFrame
*
frame
int64_t
val
)
;
int64_t
av_frame_get_channel_layout
(
const
AVFrame
*
frame
)
;
void
av_frame_set_channel_layout
(
AVFrame
*
frame
int64_t
val
)
;
int
av_frame_get_channels
(
const
AVFrame
*
frame
)
;
void
av_frame_set_channels
(
AVFrame
*
frame
int
val
)
;
int
av_frame_get_sample_rate
(
const
AVFrame
*
frame
)
;
void
av_frame_set_sample_rate
(
AVFrame
*
frame
int
val
)
;
AVDictionary
*
av_frame_get_metadata
(
const
AVFrame
*
frame
)
;
void
av_frame_set_metadata
(
AVFrame
*
frame
AVDictionary
*
val
)
;
int
av_frame_get_decode_error_flags
(
const
AVFrame
*
frame
)
;
void
av_frame_set_decode_error_flags
(
AVFrame
*
frame
int
val
)
;
int
av_frame_get_pkt_size
(
const
AVFrame
*
frame
)
;
void
av_frame_set_pkt_size
(
AVFrame
*
frame
int
val
)
;
AVDictionary
*
*
avpriv_frame_get_metadatap
(
AVFrame
*
frame
)
;
#
if
FF_API_FRAME_QP
int8_t
*
av_frame_get_qp_table
(
AVFrame
*
f
int
*
stride
int
*
type
)
;
int
av_frame_set_qp_table
(
AVFrame
*
f
AVBufferRef
*
buf
int
stride
int
type
)
;
#
endif
enum
AVColorSpace
av_frame_get_colorspace
(
const
AVFrame
*
frame
)
;
void
av_frame_set_colorspace
(
AVFrame
*
frame
enum
AVColorSpace
val
)
;
enum
AVColorRange
av_frame_get_color_range
(
const
AVFrame
*
frame
)
;
void
av_frame_set_color_range
(
AVFrame
*
frame
enum
AVColorRange
val
)
;
const
char
*
av_get_colorspace_name
(
enum
AVColorSpace
val
)
;
AVFrame
*
av_frame_alloc
(
void
)
;
void
av_frame_free
(
AVFrame
*
*
frame
)
;
int
av_frame_ref
(
AVFrame
*
dst
const
AVFrame
*
src
)
;
AVFrame
*
av_frame_clone
(
const
AVFrame
*
src
)
;
void
av_frame_unref
(
AVFrame
*
frame
)
;
void
av_frame_move_ref
(
AVFrame
*
dst
AVFrame
*
src
)
;
int
av_frame_get_buffer
(
AVFrame
*
frame
int
align
)
;
int
av_frame_is_writable
(
AVFrame
*
frame
)
;
int
av_frame_make_writable
(
AVFrame
*
frame
)
;
int
av_frame_copy
(
AVFrame
*
dst
const
AVFrame
*
src
)
;
int
av_frame_copy_props
(
AVFrame
*
dst
const
AVFrame
*
src
)
;
AVBufferRef
*
av_frame_get_plane_buffer
(
AVFrame
*
frame
int
plane
)
;
AVFrameSideData
*
av_frame_new_side_data
(
AVFrame
*
frame
enum
AVFrameSideDataType
type
int
size
)
;
AVFrameSideData
*
av_frame_get_side_data
(
const
AVFrame
*
frame
enum
AVFrameSideDataType
type
)
;
void
av_frame_remove_side_data
(
AVFrame
*
frame
enum
AVFrameSideDataType
type
)
;
const
char
*
av_frame_side_data_name
(
enum
AVFrameSideDataType
type
)
;
#
endif
