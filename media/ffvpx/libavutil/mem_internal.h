#
ifndef
AVUTIL_MEM_INTERNAL_H
#
define
AVUTIL_MEM_INTERNAL_H
#
include
"
config
.
h
"
#
include
<
stdint
.
h
>
#
ifndef
_MSC_VER
#
include
<
stdalign
.
h
>
#
endif
#
include
"
attributes
.
h
"
#
include
"
macros
.
h
"
#
if
defined
(
__DJGPP__
)
#
define
DECLARE_ALIGNED_T
(
n
t
v
)
alignas
(
FFMIN
(
n
16
)
)
t
v
#
define
DECLARE_ASM_ALIGNED
(
n
t
v
)
alignas
(
FFMIN
(
n
16
)
)
t
av_used
v
#
define
DECLARE_ASM_CONST
(
n
t
v
)
alignas
(
FFMIN
(
n
16
)
)
static
const
t
av_used
v
#
elif
defined
(
_MSC_VER
)
#
define
DECLARE_ALIGNED_T
(
n
t
v
)
__declspec
(
align
(
n
)
)
t
v
#
define
DECLARE_ASM_ALIGNED
(
n
t
v
)
__declspec
(
align
(
n
)
)
t
v
#
define
DECLARE_ASM_CONST
(
n
t
v
)
__declspec
(
align
(
n
)
)
static
const
t
v
#
else
#
define
DECLARE_ALIGNED_T
(
n
t
v
)
alignas
(
n
)
t
v
#
define
DECLARE_ASM_ALIGNED
(
n
t
v
)
alignas
(
n
)
t
av_used
v
#
define
DECLARE_ASM_CONST
(
n
t
v
)
alignas
(
n
)
static
const
t
av_used
v
#
endif
#
if
HAVE_SIMD_ALIGN_64
#
define
ALIGN_64
64
#
define
ALIGN_32
32
#
elif
HAVE_SIMD_ALIGN_32
#
define
ALIGN_64
32
#
define
ALIGN_32
32
#
else
#
define
ALIGN_64
16
#
define
ALIGN_32
16
#
endif
#
define
DECLARE_ALIGNED
(
n
t
v
)
DECLARE_ALIGNED_V
(
n
t
v
)
#
define
DECLARE_ALIGNED_V
(
n
t
v
)
DECLARE_ALIGNED_
#
#
n
(
t
v
)
#
define
DECLARE_ALIGNED_4
(
t
v
)
DECLARE_ALIGNED_T
(
4
t
v
)
#
define
DECLARE_ALIGNED_8
(
t
v
)
DECLARE_ALIGNED_T
(
8
t
v
)
#
define
DECLARE_ALIGNED_16
(
t
v
)
DECLARE_ALIGNED_T
(
16
t
v
)
#
define
DECLARE_ALIGNED_32
(
t
v
)
DECLARE_ALIGNED_T
(
ALIGN_32
t
v
)
#
define
DECLARE_ALIGNED_64
(
t
v
)
DECLARE_ALIGNED_T
(
ALIGN_64
t
v
)
#
define
E1
(
x
)
x
#
define
LOCAL_ALIGNED_D
(
a
t
v
s
o
.
.
.
)
\
DECLARE_ALIGNED
(
a
t
la_
#
#
v
)
s
o
;
\
t
(
*
v
)
o
=
la_
#
#
v
#
define
LOCAL_ALIGNED
(
a
t
v
.
.
.
)
LOCAL_ALIGNED_
#
#
a
(
t
v
__VA_ARGS__
)
#
define
LOCAL_ALIGNED_4
(
t
v
.
.
.
)
E1
(
LOCAL_ALIGNED_D
(
4
t
v
__VA_ARGS__
)
)
#
define
LOCAL_ALIGNED_8
(
t
v
.
.
.
)
E1
(
LOCAL_ALIGNED_D
(
8
t
v
__VA_ARGS__
)
)
#
define
LOCAL_ALIGNED_16
(
t
v
.
.
.
)
E1
(
LOCAL_ALIGNED_D
(
16
t
v
__VA_ARGS__
)
)
#
define
LOCAL_ALIGNED_32
(
t
v
.
.
.
)
E1
(
LOCAL_ALIGNED_D
(
32
t
v
__VA_ARGS__
)
)
#
endif
