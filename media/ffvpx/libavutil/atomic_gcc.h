#
ifndef
AVUTIL_ATOMIC_GCC_H
#
define
AVUTIL_ATOMIC_GCC_H
#
include
<
stdint
.
h
>
#
include
"
atomic
.
h
"
#
define
avpriv_atomic_int_get
atomic_int_get_gcc
static
inline
int
atomic_int_get_gcc
(
volatile
int
*
ptr
)
{
__sync_synchronize
(
)
;
return
*
ptr
;
}
#
define
avpriv_atomic_int_set
atomic_int_set_gcc
static
inline
void
atomic_int_set_gcc
(
volatile
int
*
ptr
int
val
)
{
*
ptr
=
val
;
__sync_synchronize
(
)
;
}
#
define
avpriv_atomic_int_add_and_fetch
atomic_int_add_and_fetch_gcc
static
inline
int
atomic_int_add_and_fetch_gcc
(
volatile
int
*
ptr
int
inc
)
{
return
__sync_add_and_fetch
(
ptr
inc
)
;
}
#
define
avpriv_atomic_ptr_cas
atomic_ptr_cas_gcc
static
inline
void
*
atomic_ptr_cas_gcc
(
void
*
volatile
*
ptr
void
*
oldval
void
*
newval
)
{
#
ifdef
__ARMCC_VERSION
volatile
uintptr_t
*
tmp
=
(
volatile
uintptr_t
*
)
ptr
;
return
(
void
*
)
__sync_val_compare_and_swap
(
tmp
oldval
newval
)
;
#
else
return
__sync_val_compare_and_swap
(
ptr
oldval
newval
)
;
#
endif
}
#
endif
