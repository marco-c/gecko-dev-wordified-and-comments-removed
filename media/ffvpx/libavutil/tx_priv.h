#
ifndef
AVUTIL_TX_PRIV_H
#
define
AVUTIL_TX_PRIV_H
#
include
"
tx
.
h
"
#
include
"
thread
.
h
"
#
include
"
mem_internal
.
h
"
#
include
"
common
.
h
"
#
include
"
attributes
.
h
"
#
ifdef
TX_FLOAT
#
define
TX_TAB
(
x
)
x
#
#
_float
#
define
TX_NAME
(
x
)
x
#
#
_float_c
#
define
TX_NAME_STR
(
x
)
NULL_IF_CONFIG_SMALL
(
x
"
_float_c
"
)
#
define
TX_TYPE
(
x
)
AV_TX_FLOAT_
#
#
x
#
define
TX_FN_NAME
(
fn
suffix
)
ff_tx_
#
#
fn
#
#
_float_
#
#
suffix
#
define
TX_FN_NAME_STR
(
fn
suffix
)
NULL_IF_CONFIG_SMALL
(
#
fn
"
_float_
"
#
suffix
)
#
define
MULT
(
x
m
)
(
(
x
)
*
(
m
)
)
#
define
SCALE_TYPE
float
typedef
float
TXSample
;
typedef
float
TXUSample
;
typedef
AVComplexFloat
TXComplex
;
#
elif
defined
(
TX_DOUBLE
)
#
define
TX_TAB
(
x
)
x
#
#
_double
#
define
TX_NAME
(
x
)
x
#
#
_double_c
#
define
TX_NAME_STR
(
x
)
NULL_IF_CONFIG_SMALL
(
x
"
_double_c
"
)
#
define
TX_TYPE
(
x
)
AV_TX_DOUBLE_
#
#
x
#
define
TX_FN_NAME
(
fn
suffix
)
ff_tx_
#
#
fn
#
#
_double_
#
#
suffix
#
define
TX_FN_NAME_STR
(
fn
suffix
)
NULL_IF_CONFIG_SMALL
(
#
fn
"
_double_
"
#
suffix
)
#
define
MULT
(
x
m
)
(
(
x
)
*
(
m
)
)
#
define
SCALE_TYPE
double
typedef
double
TXSample
;
typedef
double
TXUSample
;
typedef
AVComplexDouble
TXComplex
;
#
elif
defined
(
TX_INT32
)
#
define
TX_TAB
(
x
)
x
#
#
_int32
#
define
TX_NAME
(
x
)
x
#
#
_int32_c
#
define
TX_NAME_STR
(
x
)
NULL_IF_CONFIG_SMALL
(
x
"
_int32_c
"
)
#
define
TX_TYPE
(
x
)
AV_TX_INT32_
#
#
x
#
define
TX_FN_NAME
(
fn
suffix
)
ff_tx_
#
#
fn
#
#
_int32_
#
#
suffix
#
define
TX_FN_NAME_STR
(
fn
suffix
)
NULL_IF_CONFIG_SMALL
(
#
fn
"
_int32_
"
#
suffix
)
#
define
MULT
(
x
m
)
(
(
(
(
(
int64_t
)
(
x
)
)
*
(
int64_t
)
(
m
)
)
+
0x40000000
)
>
>
31
)
#
define
SCALE_TYPE
float
typedef
int32_t
TXSample
;
typedef
uint32_t
TXUSample
;
typedef
AVComplexInt32
TXComplex
;
#
else
typedef
void
TXComplex
;
#
endif
#
define
TX_DECL_FN
(
fn
suffix
)
\
void
TX_FN_NAME
(
fn
suffix
)
(
AVTXContext
*
s
void
*
o
void
*
i
ptrdiff_t
st
)
;
#
define
TX_DEF
(
fn
tx_type
len_min
len_max
f1
f2
\
p
init_fn
suffix
cf
cd_flags
cf2
)
\
&
(
const
FFTXCodelet
)
{
\
.
name
=
TX_FN_NAME_STR
(
fn
suffix
)
\
.
function
=
TX_FN_NAME
(
fn
suffix
)
\
.
type
=
TX_TYPE
(
tx_type
)
\
.
flags
=
FF_TX_ALIGNED
|
FF_TX_OUT_OF_PLACE
|
cd_flags
\
.
factors
=
{
(
f1
)
(
f2
)
}
\
.
nb_factors
=
!
!
(
f1
)
+
!
!
(
f2
)
\
.
min_len
=
len_min
\
.
max_len
=
len_max
\
.
init
=
init_fn
\
.
cpu_flags
=
cf2
|
AV_CPU_FLAG_
#
#
cf
\
.
prio
=
p
\
}
#
if
defined
(
TX_FLOAT
)
|
|
defined
(
TX_DOUBLE
)
#
define
CMUL
(
dre
dim
are
aim
bre
bim
)
\
do
{
\
(
dre
)
=
(
are
)
*
(
bre
)
-
(
aim
)
*
(
bim
)
;
\
(
dim
)
=
(
are
)
*
(
bim
)
+
(
aim
)
*
(
bre
)
;
\
}
while
(
0
)
#
define
SMUL
(
dre
dim
are
aim
bre
bim
)
\
do
{
\
(
dre
)
=
(
are
)
*
(
bre
)
-
(
aim
)
*
(
bim
)
;
\
(
dim
)
=
(
are
)
*
(
bim
)
-
(
aim
)
*
(
bre
)
;
\
}
while
(
0
)
#
define
UNSCALE
(
x
)
(
x
)
#
define
RESCALE
(
x
)
(
x
)
#
define
FOLD
(
a
b
)
(
(
a
)
+
(
b
)
)
#
define
BF
(
x
y
a
b
)
\
do
{
\
x
=
(
a
)
-
(
b
)
;
\
y
=
(
a
)
+
(
b
)
;
\
}
while
(
0
)
#
elif
defined
(
TX_INT32
)
#
define
CMUL
(
dre
dim
are
aim
bre
bim
)
\
do
{
\
int64_t
accu
;
\
(
accu
)
=
(
int64_t
)
(
bre
)
*
(
are
)
;
\
(
accu
)
-
=
(
int64_t
)
(
bim
)
*
(
aim
)
;
\
(
dre
)
=
(
int
)
(
(
(
accu
)
+
0x40000000
)
>
>
31
)
;
\
(
accu
)
=
(
int64_t
)
(
bim
)
*
(
are
)
;
\
(
accu
)
+
=
(
int64_t
)
(
bre
)
*
(
aim
)
;
\
(
dim
)
=
(
int
)
(
(
(
accu
)
+
0x40000000
)
>
>
31
)
;
\
}
while
(
0
)
#
define
SMUL
(
dre
dim
are
aim
bre
bim
)
\
do
{
\
int64_t
accu
;
\
(
accu
)
=
(
int64_t
)
(
bre
)
*
(
are
)
;
\
(
accu
)
-
=
(
int64_t
)
(
bim
)
*
(
aim
)
;
\
(
dre
)
=
(
int
)
(
(
(
accu
)
+
0x40000000
)
>
>
31
)
;
\
(
accu
)
=
(
int64_t
)
(
bim
)
*
(
are
)
;
\
(
accu
)
-
=
(
int64_t
)
(
bre
)
*
(
aim
)
;
\
(
dim
)
=
(
int
)
(
(
(
accu
)
+
0x40000000
)
>
>
31
)
;
\
}
while
(
0
)
#
define
UNSCALE
(
x
)
(
(
double
)
(
x
)
/
2147483648
.
0
)
#
define
RESCALE
(
x
)
(
av_clip64
(
llrintf
(
(
x
)
*
2147483648
.
0
)
INT32_MIN
INT32_MAX
)
)
#
define
FOLD
(
x
y
)
(
(
int32_t
)
(
(
x
)
+
(
unsigned
)
(
y
)
+
32
)
>
>
6
)
#
define
BF
(
x
y
a
b
)
\
do
{
\
x
=
(
a
)
-
(
unsigned
)
(
b
)
;
\
y
=
(
a
)
+
(
unsigned
)
(
b
)
;
\
}
while
(
0
)
#
endif
#
define
CMUL3
(
c
a
b
)
CMUL
(
(
c
)
.
re
(
c
)
.
im
(
a
)
.
re
(
a
)
.
im
(
b
)
.
re
(
b
)
.
im
)
#
define
FF_TX_OUT_OF_PLACE
(
1ULL
<
<
63
)
/
*
Can
be
OR
'
d
with
AV_TX_INPLACE
*
/
#
define
FF_TX_ALIGNED
(
1ULL
<
<
62
)
/
*
Cannot
be
OR
'
d
with
AV_TX_UNALIGNED
*
/
#
define
FF_TX_PRESHUFFLE
(
1ULL
<
<
61
)
/
*
Codelet
expects
permuted
coeffs
*
/
#
define
FF_TX_INVERSE_ONLY
(
1ULL
<
<
60
)
/
*
For
non
-
orthogonal
inverse
-
only
transforms
*
/
#
define
FF_TX_FORWARD_ONLY
(
1ULL
<
<
59
)
/
*
For
non
-
orthogonal
forward
-
only
transforms
*
/
#
define
FF_TX_ASM_CALL
(
1ULL
<
<
58
)
/
*
For
asm
-
>
asm
functions
only
*
/
typedef
enum
FFTXCodeletPriority
{
FF_TX_PRIO_BASE
=
0
FF_TX_PRIO_MIN
=
-
131072
FF_TX_PRIO_MAX
=
32768
}
FFTXCodeletPriority
;
typedef
enum
FFTXMapDirection
{
FF_TX_MAP_NONE
=
0
FF_TX_MAP_GATHER
FF_TX_MAP_SCATTER
}
FFTXMapDirection
;
typedef
struct
FFTXCodeletOptions
{
FFTXMapDirection
map_dir
;
}
FFTXCodeletOptions
;
#
define
TX_MAX_FACTORS
16
#
define
TX_MAX_SUB
4
#
define
TX_MAX_DECOMPOSITIONS
512
typedef
struct
FFTXCodelet
{
const
char
*
name
;
av_tx_fn
function
;
enum
AVTXType
type
;
#
define
TX_TYPE_ANY
INT32_MAX
/
*
Special
type
to
allow
all
types
*
/
uint64_t
flags
;
int
factors
[
TX_MAX_FACTORS
]
;
#
define
TX_FACTOR_ANY
-
1
/
*
When
used
alone
signals
that
the
codelet
*
supports
all
factors
.
Otherwise
if
other
*
factors
are
present
it
signals
that
whatever
*
remains
will
be
supported
as
long
as
the
*
other
factors
are
a
component
of
the
length
*
/
int
nb_factors
;
int
min_len
;
int
max_len
;
#
define
TX_LEN_UNLIMITED
-
1
/
*
Special
length
value
to
permit
all
lengths
*
/
int
(
*
init
)
(
AVTXContext
*
s
const
struct
FFTXCodelet
*
cd
uint64_t
flags
FFTXCodeletOptions
*
opts
int
len
int
inv
const
void
*
scale
)
;
int
(
*
uninit
)
(
AVTXContext
*
s
)
;
int
cpu_flags
;
#
define
FF_TX_CPU_FLAGS_ALL
0x0
/
*
Special
CPU
flag
for
C
*
/
int
prio
;
}
FFTXCodelet
;
struct
AVTXContext
{
int
len
;
int
inv
;
int
*
map
;
TXComplex
*
exp
;
TXComplex
*
tmp
;
AVTXContext
*
sub
;
av_tx_fn
fn
[
TX_MAX_SUB
]
;
int
nb_sub
;
const
FFTXCodelet
*
cd
[
TX_MAX_SUB
]
;
const
FFTXCodelet
*
cd_self
;
enum
AVTXType
type
;
uint64_t
flags
;
FFTXMapDirection
map_dir
;
float
scale_f
;
double
scale_d
;
void
*
opaque
;
}
;
#
define
TX_EMBED_INPUT_PFA_MAP
(
map
tot_len
d1
d2
)
\
do
{
\
int
mtmp
[
(
d1
)
*
(
d2
)
]
;
\
for
(
int
k
=
0
;
k
<
tot_len
;
k
+
=
(
d1
)
*
(
d2
)
)
{
\
memcpy
(
mtmp
&
map
[
k
]
(
d1
)
*
(
d2
)
*
sizeof
(
*
mtmp
)
)
;
\
for
(
int
m
=
0
;
m
<
(
d2
)
;
m
+
+
)
\
for
(
int
n
=
0
;
n
<
(
d1
)
;
n
+
+
)
\
map
[
k
+
m
*
(
d1
)
+
n
]
=
mtmp
[
(
m
*
(
d1
)
+
n
*
(
d2
)
)
%
(
(
d1
)
*
(
d2
)
)
]
;
\
}
\
}
while
(
0
)
int
ff_tx_gen_pfa_input_map
(
AVTXContext
*
s
FFTXCodeletOptions
*
opts
int
d1
int
d2
)
;
int
ff_tx_init_subtx
(
AVTXContext
*
s
enum
AVTXType
type
uint64_t
flags
FFTXCodeletOptions
*
opts
int
len
int
inv
const
void
*
scale
)
;
void
ff_tx_clear_ctx
(
AVTXContext
*
s
)
;
int
ff_tx_decompose_length
(
int
dst
[
TX_MAX_DECOMPOSITIONS
]
enum
AVTXType
type
int
len
int
inv
)
;
int
ff_tx_gen_default_map
(
AVTXContext
*
s
FFTXCodeletOptions
*
opts
)
;
int
ff_tx_gen_compound_mapping
(
AVTXContext
*
s
FFTXCodeletOptions
*
opts
int
inv
int
n
int
m
)
;
int
ff_tx_gen_ptwo_revtab
(
AVTXContext
*
s
FFTXCodeletOptions
*
opts
)
;
int
ff_tx_gen_inplace_map
(
AVTXContext
*
s
int
len
)
;
int
ff_tx_gen_split_radix_parity_revtab
(
AVTXContext
*
s
int
len
int
inv
FFTXCodeletOptions
*
opts
int
basis
int
dual_stride
)
;
void
ff_tx_init_tabs_float
(
int
len
)
;
void
ff_tx_init_tabs_double
(
int
len
)
;
void
ff_tx_init_tabs_int32
(
int
len
)
;
int
ff_tx_mdct_gen_exp_float
(
AVTXContext
*
s
int
*
pre_tab
)
;
int
ff_tx_mdct_gen_exp_double
(
AVTXContext
*
s
int
*
pre_tab
)
;
int
ff_tx_mdct_gen_exp_int32
(
AVTXContext
*
s
int
*
pre_tab
)
;
extern
const
FFTXCodelet
*
const
ff_tx_codelet_list_float_c
[
]
;
extern
const
FFTXCodelet
*
const
ff_tx_codelet_list_float_x86
[
]
;
extern
const
FFTXCodelet
*
const
ff_tx_codelet_list_float_aarch64
[
]
;
extern
const
FFTXCodelet
*
const
ff_tx_codelet_list_double_c
[
]
;
extern
const
FFTXCodelet
*
const
ff_tx_codelet_list_int32_c
[
]
;
#
endif
