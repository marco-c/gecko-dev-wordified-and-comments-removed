#
ifndef
AVUTIL_ARM_BSWAP_H
#
define
AVUTIL_ARM_BSWAP_H
#
include
<
stdint
.
h
>
#
include
"
config
.
h
"
#
include
"
libavutil
/
attributes
.
h
"
#
ifdef
__ARMCC_VERSION
#
if
HAVE_ARMV6
#
define
av_bswap32
av_bswap32
static
av_always_inline
av_const
uint32_t
av_bswap32
(
uint32_t
x
)
{
return
__rev
(
x
)
;
}
#
endif
#
elif
HAVE_INLINE_ASM
#
if
HAVE_ARMV6_INLINE
#
define
av_bswap16
av_bswap16
static
av_always_inline
av_const
unsigned
av_bswap16
(
unsigned
x
)
{
unsigned
y
;
__asm__
(
"
rev16
%
0
%
1
"
:
"
=
r
"
(
y
)
:
"
r
"
(
x
)
)
;
return
y
;
}
#
endif
#
if
AV_GCC_VERSION_AT_MOST
(
4
4
)
#
define
av_bswap32
av_bswap32
static
av_always_inline
av_const
uint32_t
av_bswap32
(
uint32_t
x
)
{
uint32_t
y
;
#
if
HAVE_ARMV6_INLINE
__asm__
(
"
rev
%
0
%
1
"
:
"
=
r
"
(
y
)
:
"
r
"
(
x
)
)
;
#
else
uint32_t
t
;
__asm__
(
"
eor
%
1
%
2
%
2
ror
#
16
\
n
\
t
"
"
bic
%
1
%
1
#
0xFF0000
\
n
\
t
"
"
mov
%
0
%
2
ror
#
8
\
n
\
t
"
"
eor
%
0
%
0
%
1
lsr
#
8
\
n
\
t
"
:
"
=
r
"
(
y
)
"
=
&
r
"
(
t
)
:
"
r
"
(
x
)
)
;
#
endif
return
y
;
}
#
endif
#
endif
#
endif
