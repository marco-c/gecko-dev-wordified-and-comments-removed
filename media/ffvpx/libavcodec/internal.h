#
ifndef
AVCODEC_INTERNAL_H
#
define
AVCODEC_INTERNAL_H
#
include
<
stdint
.
h
>
#
include
"
libavutil
/
buffer
.
h
"
#
include
"
libavutil
/
channel_layout
.
h
"
#
include
"
libavutil
/
mathematics
.
h
"
#
include
"
libavutil
/
pixfmt
.
h
"
#
include
"
avcodec
.
h
"
#
include
"
config
.
h
"
#
if
CONFIG_LCMS2
#
include
"
fflcms2
.
h
"
#
endif
#
define
FF_SANE_NB_CHANNELS
512U
#
if
HAVE_SIMD_ALIGN_64
#
define
STRIDE_ALIGN
64
/
*
AVX
-
512
*
/
#
elif
HAVE_SIMD_ALIGN_32
#
define
STRIDE_ALIGN
32
#
elif
HAVE_SIMD_ALIGN_16
#
define
STRIDE_ALIGN
16
#
else
#
define
STRIDE_ALIGN
8
#
endif
typedef
struct
AVCodecInternal
{
int
is_copy
;
int
pad_samples
;
AVBufferRef
*
pool
;
void
*
thread_ctx
;
AVPacket
*
in_pkt
;
struct
AVBSFContext
*
bsf
;
AVPacket
*
last_pkt_props
;
uint8_t
*
byte_buffer
;
unsigned
int
byte_buffer_size
;
void
*
frame_thread_encoder
;
AVFrame
*
in_frame
;
AVFrame
*
recon_frame
;
int
needs_close
;
int
skip_samples
;
void
*
hwaccel_priv_data
;
int
draining
;
AVPacket
*
buffer_pkt
;
AVFrame
*
buffer_frame
;
int
draining_done
;
#
if
FF_API_DROPCHANGED
int
changed_frames_dropped
;
int
initial_format
;
int
initial_width
initial_height
;
int
initial_sample_rate
;
AVChannelLayout
initial_ch_layout
;
#
endif
#
if
CONFIG_LCMS2
FFIccContext
icc
;
#
endif
}
AVCodecInternal
;
int
ff_match_2uint16
(
const
uint16_t
(
*
tab
)
[
2
]
int
size
int
a
int
b
)
;
unsigned
int
ff_toupper4
(
unsigned
int
x
)
;
static
av_always_inline
float
ff_exp2fi
(
int
x
)
{
if
(
-
126
<
=
x
&
&
x
<
=
128
)
return
av_int2float
(
(
x
+
127
)
<
<
23
)
;
else
if
(
x
>
128
)
return
INFINITY
;
else
if
(
x
>
-
150
)
return
av_int2float
(
1
<
<
(
x
+
149
)
)
;
else
return
0
;
}
int
avpriv_h264_has_num_reorder_frames
(
AVCodecContext
*
avctx
)
;
int
avpriv_codec_get_cap_skip_frame_fill_param
(
const
AVCodec
*
codec
)
;
AVCPBProperties
*
ff_add_cpb_side_data
(
AVCodecContext
*
avctx
)
;
int
ff_alloc_timecode_sei
(
const
AVFrame
*
frame
AVRational
rate
size_t
prefix_len
void
*
*
data
size_t
*
sei_size
)
;
int64_t
ff_guess_coded_bitrate
(
AVCodecContext
*
avctx
)
;
#
endif
