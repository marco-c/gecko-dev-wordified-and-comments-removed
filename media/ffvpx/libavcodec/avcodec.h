#
ifndef
AVCODEC_AVCODEC_H
#
define
AVCODEC_AVCODEC_H
#
include
<
errno
.
h
>
#
include
"
libavutil
/
samplefmt
.
h
"
#
include
"
libavutil
/
attributes
.
h
"
#
include
"
libavutil
/
avutil
.
h
"
#
include
"
libavutil
/
buffer
.
h
"
#
include
"
libavutil
/
cpu
.
h
"
#
include
"
libavutil
/
channel_layout
.
h
"
#
include
"
libavutil
/
dict
.
h
"
#
include
"
libavutil
/
frame
.
h
"
#
include
"
libavutil
/
hwcontext
.
h
"
#
include
"
libavutil
/
log
.
h
"
#
include
"
libavutil
/
pixfmt
.
h
"
#
include
"
libavutil
/
rational
.
h
"
#
include
"
bsf
.
h
"
#
include
"
codec
.
h
"
#
include
"
codec_desc
.
h
"
#
include
"
codec_par
.
h
"
#
include
"
codec_id
.
h
"
#
include
"
packet
.
h
"
#
include
"
version
.
h
"
#
define
AV_INPUT_BUFFER_PADDING_SIZE
64
#
define
AV_INPUT_BUFFER_MIN_SIZE
16384
enum
AVDiscard
{
AVDISCARD_NONE
=
-
16
AVDISCARD_DEFAULT
=
0
AVDISCARD_NONREF
=
8
AVDISCARD_BIDIR
=
16
AVDISCARD_NONINTRA
=
24
AVDISCARD_NONKEY
=
32
AVDISCARD_ALL
=
48
}
;
enum
AVAudioServiceType
{
AV_AUDIO_SERVICE_TYPE_MAIN
=
0
AV_AUDIO_SERVICE_TYPE_EFFECTS
=
1
AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED
=
2
AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED
=
3
AV_AUDIO_SERVICE_TYPE_DIALOGUE
=
4
AV_AUDIO_SERVICE_TYPE_COMMENTARY
=
5
AV_AUDIO_SERVICE_TYPE_EMERGENCY
=
6
AV_AUDIO_SERVICE_TYPE_VOICE_OVER
=
7
AV_AUDIO_SERVICE_TYPE_KARAOKE
=
8
AV_AUDIO_SERVICE_TYPE_NB
}
;
typedef
struct
RcOverride
{
int
start_frame
;
int
end_frame
;
int
qscale
;
float
quality_factor
;
}
RcOverride
;
#
define
AV_CODEC_FLAG_UNALIGNED
(
1
<
<
0
)
#
define
AV_CODEC_FLAG_QSCALE
(
1
<
<
1
)
#
define
AV_CODEC_FLAG_4MV
(
1
<
<
2
)
#
define
AV_CODEC_FLAG_OUTPUT_CORRUPT
(
1
<
<
3
)
#
define
AV_CODEC_FLAG_QPEL
(
1
<
<
4
)
#
define
AV_CODEC_FLAG_DROPCHANGED
(
1
<
<
5
)
#
define
AV_CODEC_FLAG_PASS1
(
1
<
<
9
)
#
define
AV_CODEC_FLAG_PASS2
(
1
<
<
10
)
#
define
AV_CODEC_FLAG_LOOP_FILTER
(
1
<
<
11
)
#
define
AV_CODEC_FLAG_GRAY
(
1
<
<
13
)
#
define
AV_CODEC_FLAG_PSNR
(
1
<
<
15
)
#
define
AV_CODEC_FLAG_TRUNCATED
(
1
<
<
16
)
#
define
AV_CODEC_FLAG_INTERLACED_DCT
(
1
<
<
18
)
#
define
AV_CODEC_FLAG_LOW_DELAY
(
1
<
<
19
)
#
define
AV_CODEC_FLAG_GLOBAL_HEADER
(
1
<
<
22
)
#
define
AV_CODEC_FLAG_BITEXACT
(
1
<
<
23
)
#
define
AV_CODEC_FLAG_AC_PRED
(
1
<
<
24
)
#
define
AV_CODEC_FLAG_INTERLACED_ME
(
1
<
<
29
)
#
define
AV_CODEC_FLAG_CLOSED_GOP
(
1U
<
<
31
)
#
define
AV_CODEC_FLAG2_FAST
(
1
<
<
0
)
#
define
AV_CODEC_FLAG2_NO_OUTPUT
(
1
<
<
2
)
#
define
AV_CODEC_FLAG2_LOCAL_HEADER
(
1
<
<
3
)
#
define
AV_CODEC_FLAG2_DROP_FRAME_TIMECODE
(
1
<
<
13
)
#
define
AV_CODEC_FLAG2_CHUNKS
(
1
<
<
15
)
#
define
AV_CODEC_FLAG2_IGNORE_CROP
(
1
<
<
16
)
#
define
AV_CODEC_FLAG2_SHOW_ALL
(
1
<
<
22
)
#
define
AV_CODEC_FLAG2_EXPORT_MVS
(
1
<
<
28
)
#
define
AV_CODEC_FLAG2_SKIP_MANUAL
(
1
<
<
29
)
#
define
AV_CODEC_FLAG2_RO_FLUSH_NOOP
(
1
<
<
30
)
#
define
AV_CODEC_EXPORT_DATA_MVS
(
1
<
<
0
)
#
define
AV_CODEC_EXPORT_DATA_PRFT
(
1
<
<
1
)
#
define
AV_CODEC_EXPORT_DATA_VIDEO_ENC_PARAMS
(
1
<
<
2
)
#
define
AV_CODEC_EXPORT_DATA_FILM_GRAIN
(
1
<
<
3
)
typedef
struct
AVPanScan
{
int
id
;
int
width
;
int
height
;
int16_t
position
[
3
]
[
2
]
;
}
AVPanScan
;
typedef
struct
AVCPBProperties
{
#
if
FF_API_UNSANITIZED_BITRATES
int
max_bitrate
;
#
else
int64_t
max_bitrate
;
#
endif
#
if
FF_API_UNSANITIZED_BITRATES
int
min_bitrate
;
#
else
int64_t
min_bitrate
;
#
endif
#
if
FF_API_UNSANITIZED_BITRATES
int
avg_bitrate
;
#
else
int64_t
avg_bitrate
;
#
endif
int
buffer_size
;
uint64_t
vbv_delay
;
}
AVCPBProperties
;
typedef
struct
AVProducerReferenceTime
{
int64_t
wallclock
;
int
flags
;
}
AVProducerReferenceTime
;
#
define
AV_GET_BUFFER_FLAG_REF
(
1
<
<
0
)
#
define
AV_GET_ENCODE_BUFFER_FLAG_REF
(
1
<
<
0
)
struct
AVCodecInternal
;
typedef
struct
AVCodecContext
{
const
AVClass
*
av_class
;
int
log_level_offset
;
enum
AVMediaType
codec_type
;
const
struct
AVCodec
*
codec
;
enum
AVCodecID
codec_id
;
unsigned
int
codec_tag
;
void
*
priv_data
;
struct
AVCodecInternal
*
internal
;
void
*
opaque
;
int64_t
bit_rate
;
int
bit_rate_tolerance
;
int
global_quality
;
int
compression_level
;
#
define
FF_COMPRESSION_DEFAULT
-
1
int
flags
;
int
flags2
;
uint8_t
*
extradata
;
int
extradata_size
;
AVRational
time_base
;
int
ticks_per_frame
;
int
delay
;
int
width
height
;
int
coded_width
coded_height
;
int
gop_size
;
enum
AVPixelFormat
pix_fmt
;
void
(
*
draw_horiz_band
)
(
struct
AVCodecContext
*
s
const
AVFrame
*
src
int
offset
[
AV_NUM_DATA_POINTERS
]
int
y
int
type
int
height
)
;
enum
AVPixelFormat
(
*
get_format
)
(
struct
AVCodecContext
*
s
const
enum
AVPixelFormat
*
fmt
)
;
int
max_b_frames
;
float
b_quant_factor
;
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
b_frame_strategy
;
#
endif
float
b_quant_offset
;
int
has_b_frames
;
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
mpeg_quant
;
#
endif
float
i_quant_factor
;
float
i_quant_offset
;
float
lumi_masking
;
float
temporal_cplx_masking
;
float
spatial_cplx_masking
;
float
p_masking
;
float
dark_masking
;
int
slice_count
;
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
prediction_method
;
#
define
FF_PRED_LEFT
0
#
define
FF_PRED_PLANE
1
#
define
FF_PRED_MEDIAN
2
#
endif
int
*
slice_offset
;
AVRational
sample_aspect_ratio
;
int
me_cmp
;
int
me_sub_cmp
;
int
mb_cmp
;
int
ildct_cmp
;
#
define
FF_CMP_SAD
0
#
define
FF_CMP_SSE
1
#
define
FF_CMP_SATD
2
#
define
FF_CMP_DCT
3
#
define
FF_CMP_PSNR
4
#
define
FF_CMP_BIT
5
#
define
FF_CMP_RD
6
#
define
FF_CMP_ZERO
7
#
define
FF_CMP_VSAD
8
#
define
FF_CMP_VSSE
9
#
define
FF_CMP_NSSE
10
#
define
FF_CMP_W53
11
#
define
FF_CMP_W97
12
#
define
FF_CMP_DCTMAX
13
#
define
FF_CMP_DCT264
14
#
define
FF_CMP_MEDIAN_SAD
15
#
define
FF_CMP_CHROMA
256
int
dia_size
;
int
last_predictor_count
;
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
pre_me
;
#
endif
int
me_pre_cmp
;
int
pre_dia_size
;
int
me_subpel_quality
;
int
me_range
;
int
slice_flags
;
#
define
SLICE_FLAG_CODED_ORDER
0x0001
/
/
/
<
draw_horiz_band
(
)
is
called
in
coded
order
instead
of
display
#
define
SLICE_FLAG_ALLOW_FIELD
0x0002
/
/
/
<
allow
draw_horiz_band
(
)
with
field
slices
(
MPEG
-
2
field
pics
)
#
define
SLICE_FLAG_ALLOW_PLANE
0x0004
/
/
/
<
allow
draw_horiz_band
(
)
with
1
component
at
a
time
(
SVQ1
)
int
mb_decision
;
#
define
FF_MB_DECISION_SIMPLE
0
/
/
/
<
uses
mb_cmp
#
define
FF_MB_DECISION_BITS
1
/
/
/
<
chooses
the
one
which
needs
the
fewest
bits
#
define
FF_MB_DECISION_RD
2
/
/
/
<
rate
distortion
uint16_t
*
intra_matrix
;
uint16_t
*
inter_matrix
;
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
scenechange_threshold
;
attribute_deprecated
int
noise_reduction
;
#
endif
int
intra_dc_precision
;
int
skip_top
;
int
skip_bottom
;
int
mb_lmin
;
int
mb_lmax
;
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
me_penalty_compensation
;
#
endif
int
bidir_refine
;
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
brd_scale
;
#
endif
int
keyint_min
;
int
refs
;
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
chromaoffset
;
#
endif
int
mv0_threshold
;
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
b_sensitivity
;
#
endif
enum
AVColorPrimaries
color_primaries
;
enum
AVColorTransferCharacteristic
color_trc
;
enum
AVColorSpace
colorspace
;
enum
AVColorRange
color_range
;
enum
AVChromaLocation
chroma_sample_location
;
int
slices
;
enum
AVFieldOrder
field_order
;
int
sample_rate
;
int
channels
;
enum
AVSampleFormat
sample_fmt
;
int
frame_size
;
int
frame_number
;
int
block_align
;
int
cutoff
;
uint64_t
channel_layout
;
uint64_t
request_channel_layout
;
enum
AVAudioServiceType
audio_service_type
;
enum
AVSampleFormat
request_sample_fmt
;
int
(
*
get_buffer2
)
(
struct
AVCodecContext
*
s
AVFrame
*
frame
int
flags
)
;
#
if
FF_API_OLD_ENCDEC
attribute_deprecated
int
refcounted_frames
;
#
endif
float
qcompress
;
float
qblur
;
int
qmin
;
int
qmax
;
int
max_qdiff
;
int
rc_buffer_size
;
int
rc_override_count
;
RcOverride
*
rc_override
;
int64_t
rc_max_rate
;
int64_t
rc_min_rate
;
float
rc_max_available_vbv_use
;
float
rc_min_vbv_overflow_use
;
int
rc_initial_buffer_occupancy
;
#
if
FF_API_CODER_TYPE
#
define
FF_CODER_TYPE_VLC
0
#
define
FF_CODER_TYPE_AC
1
#
define
FF_CODER_TYPE_RAW
2
#
define
FF_CODER_TYPE_RLE
3
attribute_deprecated
int
coder_type
;
#
endif
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
context_model
;
#
endif
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
frame_skip_threshold
;
attribute_deprecated
int
frame_skip_factor
;
attribute_deprecated
int
frame_skip_exp
;
attribute_deprecated
int
frame_skip_cmp
;
#
endif
int
trellis
;
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
min_prediction_order
;
attribute_deprecated
int
max_prediction_order
;
attribute_deprecated
int64_t
timecode_frame_start
;
#
endif
#
if
FF_API_RTP_CALLBACK
attribute_deprecated
void
(
*
rtp_callback
)
(
struct
AVCodecContext
*
avctx
void
*
data
int
size
int
mb_nb
)
;
#
endif
#
if
FF_API_PRIVATE_OPT
attribute_deprecated
int
rtp_payload_size
;
#
endif
#
if
FF_API_STAT_BITS
attribute_deprecated
int
mv_bits
;
attribute_deprecated
int
header_bits
;
attribute_deprecated
int
i_tex_bits
;
attribute_deprecated
int
p_tex_bits
;
attribute_deprecated
int
i_count
;
attribute_deprecated
int
p_count
;
attribute_deprecated
int
skip_count
;
attribute_deprecated
int
misc_bits
;
attribute_deprecated
int
frame_bits
;
#
endif
char
*
stats_out
;
char
*
stats_in
;
int
workaround_bugs
;
#
define
FF_BUG_AUTODETECT
1
/
/
/
<
autodetection
#
define
FF_BUG_XVID_ILACE
4
#
define
FF_BUG_UMP4
8
#
define
FF_BUG_NO_PADDING
16
#
define
FF_BUG_AMV
32
#
define
FF_BUG_QPEL_CHROMA
64
#
define
FF_BUG_STD_QPEL
128
#
define
FF_BUG_QPEL_CHROMA2
256
#
define
FF_BUG_DIRECT_BLOCKSIZE
512
#
define
FF_BUG_EDGE
1024
#
define
FF_BUG_HPEL_CHROMA
2048
#
define
FF_BUG_DC_CLIP
4096
#
define
FF_BUG_MS
8192
/
/
/
<
Work
around
various
bugs
in
Microsoft
'
s
broken
decoders
.
#
define
FF_BUG_TRUNCATED
16384
#
define
FF_BUG_IEDGE
32768
int
strict_std_compliance
;
#
define
FF_COMPLIANCE_VERY_STRICT
2
/
/
/
<
Strictly
conform
to
an
older
more
strict
version
of
the
spec
or
reference
software
.
#
define
FF_COMPLIANCE_STRICT
1
/
/
/
<
Strictly
conform
to
all
the
things
in
the
spec
no
matter
what
consequences
.
#
define
FF_COMPLIANCE_NORMAL
0
#
define
FF_COMPLIANCE_UNOFFICIAL
-
1
/
/
/
<
Allow
unofficial
extensions
#
define
FF_COMPLIANCE_EXPERIMENTAL
-
2
/
/
/
<
Allow
nonstandardized
experimental
things
.
int
error_concealment
;
#
define
FF_EC_GUESS_MVS
1
#
define
FF_EC_DEBLOCK
2
#
define
FF_EC_FAVOR_INTER
256
int
debug
;
#
define
FF_DEBUG_PICT_INFO
1
#
define
FF_DEBUG_RC
2
#
define
FF_DEBUG_BITSTREAM
4
#
define
FF_DEBUG_MB_TYPE
8
#
define
FF_DEBUG_QP
16
#
define
FF_DEBUG_DCT_COEFF
0x00000040
#
define
FF_DEBUG_SKIP
0x00000080
#
define
FF_DEBUG_STARTCODE
0x00000100
#
define
FF_DEBUG_ER
0x00000400
#
define
FF_DEBUG_MMCO
0x00000800
#
define
FF_DEBUG_BUGS
0x00001000
#
define
FF_DEBUG_BUFFERS
0x00008000
#
define
FF_DEBUG_THREADS
0x00010000
#
define
FF_DEBUG_GREEN_MD
0x00800000
#
define
FF_DEBUG_NOMC
0x01000000
int
err_recognition
;
#
define
AV_EF_CRCCHECK
(
1
<
<
0
)
#
define
AV_EF_BITSTREAM
(
1
<
<
1
)
/
/
/
<
detect
bitstream
specification
deviations
#
define
AV_EF_BUFFER
(
1
<
<
2
)
/
/
/
<
detect
improper
bitstream
length
#
define
AV_EF_EXPLODE
(
1
<
<
3
)
/
/
/
<
abort
decoding
on
minor
error
detection
#
define
AV_EF_IGNORE_ERR
(
1
<
<
15
)
/
/
/
<
ignore
errors
and
continue
#
define
AV_EF_CAREFUL
(
1
<
<
16
)
/
/
/
<
consider
things
that
violate
the
spec
are
fast
to
calculate
and
have
not
been
seen
in
the
wild
as
errors
#
define
AV_EF_COMPLIANT
(
1
<
<
17
)
/
/
/
<
consider
all
spec
non
compliances
as
errors
#
define
AV_EF_AGGRESSIVE
(
1
<
<
18
)
/
/
/
<
consider
things
that
a
sane
encoder
should
not
do
as
an
error
int64_t
reordered_opaque
;
const
struct
AVHWAccel
*
hwaccel
;
void
*
hwaccel_context
;
uint64_t
error
[
AV_NUM_DATA_POINTERS
]
;
int
dct_algo
;
#
define
FF_DCT_AUTO
0
#
define
FF_DCT_FASTINT
1
#
define
FF_DCT_INT
2
#
define
FF_DCT_MMX
3
#
define
FF_DCT_ALTIVEC
5
#
define
FF_DCT_FAAN
6
int
idct_algo
;
#
define
FF_IDCT_AUTO
0
#
define
FF_IDCT_INT
1
#
define
FF_IDCT_SIMPLE
2
#
define
FF_IDCT_SIMPLEMMX
3
#
define
FF_IDCT_ARM
7
#
define
FF_IDCT_ALTIVEC
8
#
define
FF_IDCT_SIMPLEARM
10
#
define
FF_IDCT_XVID
14
#
define
FF_IDCT_SIMPLEARMV5TE
16
#
define
FF_IDCT_SIMPLEARMV6
17
#
define
FF_IDCT_FAAN
20
#
define
FF_IDCT_SIMPLENEON
22
#
define
FF_IDCT_NONE
24
/
*
Used
by
XvMC
to
extract
IDCT
coefficients
with
FF_IDCT_PERM_NONE
*
/
#
define
FF_IDCT_SIMPLEAUTO
128
int
bits_per_coded_sample
;
int
bits_per_raw_sample
;
int
lowres
;
#
if
FF_API_CODED_FRAME
attribute_deprecated
AVFrame
*
coded_frame
;
#
endif
int
thread_count
;
int
thread_type
;
#
define
FF_THREAD_FRAME
1
/
/
/
<
Decode
more
than
one
frame
at
once
#
define
FF_THREAD_SLICE
2
/
/
/
<
Decode
more
than
one
part
of
a
single
frame
at
once
int
active_thread_type
;
#
if
FF_API_THREAD_SAFE_CALLBACKS
attribute_deprecated
int
thread_safe_callbacks
;
#
endif
int
(
*
execute
)
(
struct
AVCodecContext
*
c
int
(
*
func
)
(
struct
AVCodecContext
*
c2
void
*
arg
)
void
*
arg2
int
*
ret
int
count
int
size
)
;
int
(
*
execute2
)
(
struct
AVCodecContext
*
c
int
(
*
func
)
(
struct
AVCodecContext
*
c2
void
*
arg
int
jobnr
int
threadnr
)
void
*
arg2
int
*
ret
int
count
)
;
int
nsse_weight
;
int
profile
;
#
define
FF_PROFILE_UNKNOWN
-
99
#
define
FF_PROFILE_RESERVED
-
100
#
define
FF_PROFILE_AAC_MAIN
0
#
define
FF_PROFILE_AAC_LOW
1
#
define
FF_PROFILE_AAC_SSR
2
#
define
FF_PROFILE_AAC_LTP
3
#
define
FF_PROFILE_AAC_HE
4
#
define
FF_PROFILE_AAC_HE_V2
28
#
define
FF_PROFILE_AAC_LD
22
#
define
FF_PROFILE_AAC_ELD
38
#
define
FF_PROFILE_MPEG2_AAC_LOW
128
#
define
FF_PROFILE_MPEG2_AAC_HE
131
#
define
FF_PROFILE_DNXHD
0
#
define
FF_PROFILE_DNXHR_LB
1
#
define
FF_PROFILE_DNXHR_SQ
2
#
define
FF_PROFILE_DNXHR_HQ
3
#
define
FF_PROFILE_DNXHR_HQX
4
#
define
FF_PROFILE_DNXHR_444
5
#
define
FF_PROFILE_DTS
20
#
define
FF_PROFILE_DTS_ES
30
#
define
FF_PROFILE_DTS_96_24
40
#
define
FF_PROFILE_DTS_HD_HRA
50
#
define
FF_PROFILE_DTS_HD_MA
60
#
define
FF_PROFILE_DTS_EXPRESS
70
#
define
FF_PROFILE_MPEG2_422
0
#
define
FF_PROFILE_MPEG2_HIGH
1
#
define
FF_PROFILE_MPEG2_SS
2
#
define
FF_PROFILE_MPEG2_SNR_SCALABLE
3
#
define
FF_PROFILE_MPEG2_MAIN
4
#
define
FF_PROFILE_MPEG2_SIMPLE
5
#
define
FF_PROFILE_H264_CONSTRAINED
(
1
<
<
9
)
/
/
8
+
1
;
constraint_set1_flag
#
define
FF_PROFILE_H264_INTRA
(
1
<
<
11
)
/
/
8
+
3
;
constraint_set3_flag
#
define
FF_PROFILE_H264_BASELINE
66
#
define
FF_PROFILE_H264_CONSTRAINED_BASELINE
(
66
|
FF_PROFILE_H264_CONSTRAINED
)
#
define
FF_PROFILE_H264_MAIN
77
#
define
FF_PROFILE_H264_EXTENDED
88
#
define
FF_PROFILE_H264_HIGH
100
#
define
FF_PROFILE_H264_HIGH_10
110
#
define
FF_PROFILE_H264_HIGH_10_INTRA
(
110
|
FF_PROFILE_H264_INTRA
)
#
define
FF_PROFILE_H264_MULTIVIEW_HIGH
118
#
define
FF_PROFILE_H264_HIGH_422
122
#
define
FF_PROFILE_H264_HIGH_422_INTRA
(
122
|
FF_PROFILE_H264_INTRA
)
#
define
FF_PROFILE_H264_STEREO_HIGH
128
#
define
FF_PROFILE_H264_HIGH_444
144
#
define
FF_PROFILE_H264_HIGH_444_PREDICTIVE
244
#
define
FF_PROFILE_H264_HIGH_444_INTRA
(
244
|
FF_PROFILE_H264_INTRA
)
#
define
FF_PROFILE_H264_CAVLC_444
44
#
define
FF_PROFILE_VC1_SIMPLE
0
#
define
FF_PROFILE_VC1_MAIN
1
#
define
FF_PROFILE_VC1_COMPLEX
2
#
define
FF_PROFILE_VC1_ADVANCED
3
#
define
FF_PROFILE_MPEG4_SIMPLE
0
#
define
FF_PROFILE_MPEG4_SIMPLE_SCALABLE
1
#
define
FF_PROFILE_MPEG4_CORE
2
#
define
FF_PROFILE_MPEG4_MAIN
3
#
define
FF_PROFILE_MPEG4_N_BIT
4
#
define
FF_PROFILE_MPEG4_SCALABLE_TEXTURE
5
#
define
FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION
6
#
define
FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE
7
#
define
FF_PROFILE_MPEG4_HYBRID
8
#
define
FF_PROFILE_MPEG4_ADVANCED_REAL_TIME
9
#
define
FF_PROFILE_MPEG4_CORE_SCALABLE
10
#
define
FF_PROFILE_MPEG4_ADVANCED_CODING
11
#
define
FF_PROFILE_MPEG4_ADVANCED_CORE
12
#
define
FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE
13
#
define
FF_PROFILE_MPEG4_SIMPLE_STUDIO
14
#
define
FF_PROFILE_MPEG4_ADVANCED_SIMPLE
15
#
define
FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0
1
#
define
FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1
2
#
define
FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION
32768
#
define
FF_PROFILE_JPEG2000_DCINEMA_2K
3
#
define
FF_PROFILE_JPEG2000_DCINEMA_4K
4
#
define
FF_PROFILE_VP9_0
0
#
define
FF_PROFILE_VP9_1
1
#
define
FF_PROFILE_VP9_2
2
#
define
FF_PROFILE_VP9_3
3
#
define
FF_PROFILE_HEVC_MAIN
1
#
define
FF_PROFILE_HEVC_MAIN_10
2
#
define
FF_PROFILE_HEVC_MAIN_STILL_PICTURE
3
#
define
FF_PROFILE_HEVC_REXT
4
#
define
FF_PROFILE_VVC_MAIN_10
1
#
define
FF_PROFILE_VVC_MAIN_10_444
33
#
define
FF_PROFILE_AV1_MAIN
0
#
define
FF_PROFILE_AV1_HIGH
1
#
define
FF_PROFILE_AV1_PROFESSIONAL
2
#
define
FF_PROFILE_MJPEG_HUFFMAN_BASELINE_DCT
0xc0
#
define
FF_PROFILE_MJPEG_HUFFMAN_EXTENDED_SEQUENTIAL_DCT
0xc1
#
define
FF_PROFILE_MJPEG_HUFFMAN_PROGRESSIVE_DCT
0xc2
#
define
FF_PROFILE_MJPEG_HUFFMAN_LOSSLESS
0xc3
#
define
FF_PROFILE_MJPEG_JPEG_LS
0xf7
#
define
FF_PROFILE_SBC_MSBC
1
#
define
FF_PROFILE_PRORES_PROXY
0
#
define
FF_PROFILE_PRORES_LT
1
#
define
FF_PROFILE_PRORES_STANDARD
2
#
define
FF_PROFILE_PRORES_HQ
3
#
define
FF_PROFILE_PRORES_4444
4
#
define
FF_PROFILE_PRORES_XQ
5
#
define
FF_PROFILE_ARIB_PROFILE_A
0
#
define
FF_PROFILE_ARIB_PROFILE_C
1
#
define
FF_PROFILE_KLVA_SYNC
0
#
define
FF_PROFILE_KLVA_ASYNC
1
int
level
;
#
define
FF_LEVEL_UNKNOWN
-
99
enum
AVDiscard
skip_loop_filter
;
enum
AVDiscard
skip_idct
;
enum
AVDiscard
skip_frame
;
uint8_t
*
subtitle_header
;
int
subtitle_header_size
;
#
if
FF_API_VBV_DELAY
attribute_deprecated
uint64_t
vbv_delay
;
#
endif
#
if
FF_API_SIDEDATA_ONLY_PKT
attribute_deprecated
int
side_data_only_packets
;
#
endif
int
initial_padding
;
AVRational
framerate
;
enum
AVPixelFormat
sw_pix_fmt
;
AVRational
pkt_timebase
;
const
AVCodecDescriptor
*
codec_descriptor
;
int64_t
pts_correction_num_faulty_pts
;
int64_t
pts_correction_num_faulty_dts
;
int64_t
pts_correction_last_pts
;
int64_t
pts_correction_last_dts
;
char
*
sub_charenc
;
int
sub_charenc_mode
;
#
define
FF_SUB_CHARENC_MODE_DO_NOTHING
-
1
/
/
/
<
do
nothing
(
demuxer
outputs
a
stream
supposed
to
be
already
in
UTF
-
8
or
the
codec
is
bitmap
for
instance
)
#
define
FF_SUB_CHARENC_MODE_AUTOMATIC
0
/
/
/
<
libavcodec
will
select
the
mode
itself
#
define
FF_SUB_CHARENC_MODE_PRE_DECODER
1
/
/
/
<
the
AVPacket
data
needs
to
be
recoded
to
UTF
-
8
before
being
fed
to
the
decoder
requires
iconv
#
define
FF_SUB_CHARENC_MODE_IGNORE
2
/
/
/
<
neither
convert
the
subtitles
nor
check
them
for
valid
UTF
-
8
int
skip_alpha
;
int
seek_preroll
;
#
if
FF_API_DEBUG_MV
attribute_deprecated
int
debug_mv
;
#
define
FF_DEBUG_VIS_MV_P_FOR
0x00000001
/
/
visualize
forward
predicted
MVs
of
P
frames
#
define
FF_DEBUG_VIS_MV_B_FOR
0x00000002
/
/
visualize
forward
predicted
MVs
of
B
frames
#
define
FF_DEBUG_VIS_MV_B_BACK
0x00000004
/
/
visualize
backward
predicted
MVs
of
B
frames
#
endif
uint16_t
*
chroma_intra_matrix
;
uint8_t
*
dump_separator
;
char
*
codec_whitelist
;
unsigned
properties
;
#
define
FF_CODEC_PROPERTY_LOSSLESS
0x00000001
#
define
FF_CODEC_PROPERTY_CLOSED_CAPTIONS
0x00000002
AVPacketSideData
*
coded_side_data
;
int
nb_coded_side_data
;
AVBufferRef
*
hw_frames_ctx
;
int
sub_text_format
;
#
define
FF_SUB_TEXT_FMT_ASS
0
#
if
FF_API_ASS_TIMING
#
define
FF_SUB_TEXT_FMT_ASS_WITH_TIMINGS
1
#
endif
int
trailing_padding
;
int64_t
max_pixels
;
AVBufferRef
*
hw_device_ctx
;
int
hwaccel_flags
;
int
apply_cropping
;
int
extra_hw_frames
;
int
discard_damaged_percentage
;
int64_t
max_samples
;
int
export_side_data
;
int
(
*
get_encode_buffer
)
(
struct
AVCodecContext
*
s
AVPacket
*
pkt
int
flags
)
;
}
AVCodecContext
;
#
if
FF_API_CODEC_GET_SET
attribute_deprecated
AVRational
av_codec_get_pkt_timebase
(
const
AVCodecContext
*
avctx
)
;
attribute_deprecated
void
av_codec_set_pkt_timebase
(
AVCodecContext
*
avctx
AVRational
val
)
;
attribute_deprecated
const
AVCodecDescriptor
*
av_codec_get_codec_descriptor
(
const
AVCodecContext
*
avctx
)
;
attribute_deprecated
void
av_codec_set_codec_descriptor
(
AVCodecContext
*
avctx
const
AVCodecDescriptor
*
desc
)
;
attribute_deprecated
unsigned
av_codec_get_codec_properties
(
const
AVCodecContext
*
avctx
)
;
attribute_deprecated
int
av_codec_get_lowres
(
const
AVCodecContext
*
avctx
)
;
attribute_deprecated
void
av_codec_set_lowres
(
AVCodecContext
*
avctx
int
val
)
;
attribute_deprecated
int
av_codec_get_seek_preroll
(
const
AVCodecContext
*
avctx
)
;
attribute_deprecated
void
av_codec_set_seek_preroll
(
AVCodecContext
*
avctx
int
val
)
;
attribute_deprecated
uint16_t
*
av_codec_get_chroma_intra_matrix
(
const
AVCodecContext
*
avctx
)
;
attribute_deprecated
void
av_codec_set_chroma_intra_matrix
(
AVCodecContext
*
avctx
uint16_t
*
val
)
;
#
endif
struct
AVSubtitle
;
#
if
FF_API_CODEC_GET_SET
attribute_deprecated
int
av_codec_get_max_lowres
(
const
AVCodec
*
codec
)
;
#
endif
struct
MpegEncContext
;
typedef
struct
AVHWAccel
{
const
char
*
name
;
enum
AVMediaType
type
;
enum
AVCodecID
id
;
enum
AVPixelFormat
pix_fmt
;
int
capabilities
;
int
(
*
alloc_frame
)
(
AVCodecContext
*
avctx
AVFrame
*
frame
)
;
int
(
*
start_frame
)
(
AVCodecContext
*
avctx
const
uint8_t
*
buf
uint32_t
buf_size
)
;
int
(
*
decode_params
)
(
AVCodecContext
*
avctx
int
type
const
uint8_t
*
buf
uint32_t
buf_size
)
;
int
(
*
decode_slice
)
(
AVCodecContext
*
avctx
const
uint8_t
*
buf
uint32_t
buf_size
)
;
int
(
*
end_frame
)
(
AVCodecContext
*
avctx
)
;
int
frame_priv_data_size
;
void
(
*
decode_mb
)
(
struct
MpegEncContext
*
s
)
;
int
(
*
init
)
(
AVCodecContext
*
avctx
)
;
int
(
*
uninit
)
(
AVCodecContext
*
avctx
)
;
int
priv_data_size
;
int
caps_internal
;
int
(
*
frame_params
)
(
AVCodecContext
*
avctx
AVBufferRef
*
hw_frames_ctx
)
;
}
AVHWAccel
;
#
define
AV_HWACCEL_CODEC_CAP_EXPERIMENTAL
0x0200
#
define
AV_HWACCEL_FLAG_IGNORE_LEVEL
(
1
<
<
0
)
#
define
AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH
(
1
<
<
1
)
#
define
AV_HWACCEL_FLAG_ALLOW_PROFILE_MISMATCH
(
1
<
<
2
)
#
if
FF_API_AVPICTURE
typedef
struct
AVPicture
{
attribute_deprecated
uint8_t
*
data
[
AV_NUM_DATA_POINTERS
]
;
attribute_deprecated
int
linesize
[
AV_NUM_DATA_POINTERS
]
;
}
AVPicture
;
#
endif
enum
AVSubtitleType
{
SUBTITLE_NONE
SUBTITLE_BITMAP
SUBTITLE_TEXT
SUBTITLE_ASS
}
;
#
define
AV_SUBTITLE_FLAG_FORCED
0x00000001
typedef
struct
AVSubtitleRect
{
int
x
;
int
y
;
int
w
;
int
h
;
int
nb_colors
;
#
if
FF_API_AVPICTURE
attribute_deprecated
AVPicture
pict
;
#
endif
uint8_t
*
data
[
4
]
;
int
linesize
[
4
]
;
enum
AVSubtitleType
type
;
char
*
text
;
char
*
ass
;
int
flags
;
}
AVSubtitleRect
;
typedef
struct
AVSubtitle
{
uint16_t
format
;
uint32_t
start_display_time
;
uint32_t
end_display_time
;
unsigned
num_rects
;
AVSubtitleRect
*
*
rects
;
int64_t
pts
;
}
AVSubtitle
;
#
if
FF_API_NEXT
attribute_deprecated
AVCodec
*
av_codec_next
(
const
AVCodec
*
c
)
;
#
endif
unsigned
avcodec_version
(
void
)
;
const
char
*
avcodec_configuration
(
void
)
;
const
char
*
avcodec_license
(
void
)
;
#
if
FF_API_NEXT
attribute_deprecated
void
avcodec_register
(
AVCodec
*
codec
)
;
attribute_deprecated
void
avcodec_register_all
(
void
)
;
#
endif
AVCodecContext
*
avcodec_alloc_context3
(
const
AVCodec
*
codec
)
;
void
avcodec_free_context
(
AVCodecContext
*
*
avctx
)
;
#
if
FF_API_GET_CONTEXT_DEFAULTS
int
avcodec_get_context_defaults3
(
AVCodecContext
*
s
const
AVCodec
*
codec
)
;
#
endif
const
AVClass
*
avcodec_get_class
(
void
)
;
#
if
FF_API_GET_FRAME_CLASS
attribute_deprecated
const
AVClass
*
avcodec_get_frame_class
(
void
)
;
#
endif
const
AVClass
*
avcodec_get_subtitle_rect_class
(
void
)
;
#
if
FF_API_COPY_CONTEXT
attribute_deprecated
int
avcodec_copy_context
(
AVCodecContext
*
dest
const
AVCodecContext
*
src
)
;
#
endif
int
avcodec_parameters_from_context
(
AVCodecParameters
*
par
const
AVCodecContext
*
codec
)
;
int
avcodec_parameters_to_context
(
AVCodecContext
*
codec
const
AVCodecParameters
*
par
)
;
int
avcodec_open2
(
AVCodecContext
*
avctx
const
AVCodec
*
codec
AVDictionary
*
*
options
)
;
int
avcodec_close
(
AVCodecContext
*
avctx
)
;
void
avsubtitle_free
(
AVSubtitle
*
sub
)
;
int
avcodec_default_get_buffer2
(
AVCodecContext
*
s
AVFrame
*
frame
int
flags
)
;
int
avcodec_default_get_encode_buffer
(
AVCodecContext
*
s
AVPacket
*
pkt
int
flags
)
;
void
avcodec_align_dimensions
(
AVCodecContext
*
s
int
*
width
int
*
height
)
;
void
avcodec_align_dimensions2
(
AVCodecContext
*
s
int
*
width
int
*
height
int
linesize_align
[
AV_NUM_DATA_POINTERS
]
)
;
int
avcodec_enum_to_chroma_pos
(
int
*
xpos
int
*
ypos
enum
AVChromaLocation
pos
)
;
enum
AVChromaLocation
avcodec_chroma_pos_to_enum
(
int
xpos
int
ypos
)
;
#
if
FF_API_OLD_ENCDEC
attribute_deprecated
int
avcodec_decode_audio4
(
AVCodecContext
*
avctx
AVFrame
*
frame
int
*
got_frame_ptr
const
AVPacket
*
avpkt
)
;
attribute_deprecated
int
avcodec_decode_video2
(
AVCodecContext
*
avctx
AVFrame
*
picture
int
*
got_picture_ptr
const
AVPacket
*
avpkt
)
;
#
endif
int
avcodec_decode_subtitle2
(
AVCodecContext
*
avctx
AVSubtitle
*
sub
int
*
got_sub_ptr
AVPacket
*
avpkt
)
;
int
avcodec_send_packet
(
AVCodecContext
*
avctx
const
AVPacket
*
avpkt
)
;
int
avcodec_receive_frame
(
AVCodecContext
*
avctx
AVFrame
*
frame
)
;
int
avcodec_send_frame
(
AVCodecContext
*
avctx
const
AVFrame
*
frame
)
;
int
avcodec_receive_packet
(
AVCodecContext
*
avctx
AVPacket
*
avpkt
)
;
int
avcodec_get_hw_frames_parameters
(
AVCodecContext
*
avctx
AVBufferRef
*
device_ref
enum
AVPixelFormat
hw_pix_fmt
AVBufferRef
*
*
out_frames_ref
)
;
enum
AVPictureStructure
{
AV_PICTURE_STRUCTURE_UNKNOWN
AV_PICTURE_STRUCTURE_TOP_FIELD
AV_PICTURE_STRUCTURE_BOTTOM_FIELD
AV_PICTURE_STRUCTURE_FRAME
}
;
typedef
struct
AVCodecParserContext
{
void
*
priv_data
;
struct
AVCodecParser
*
parser
;
int64_t
frame_offset
;
int64_t
cur_offset
;
int64_t
next_frame_offset
;
int
pict_type
;
int
repeat_pict
;
int64_t
pts
;
int64_t
dts
;
int64_t
last_pts
;
int64_t
last_dts
;
int
fetch_timestamp
;
#
define
AV_PARSER_PTS_NB
4
int
cur_frame_start_index
;
int64_t
cur_frame_offset
[
AV_PARSER_PTS_NB
]
;
int64_t
cur_frame_pts
[
AV_PARSER_PTS_NB
]
;
int64_t
cur_frame_dts
[
AV_PARSER_PTS_NB
]
;
int
flags
;
#
define
PARSER_FLAG_COMPLETE_FRAMES
0x0001
#
define
PARSER_FLAG_ONCE
0x0002
#
define
PARSER_FLAG_FETCHED_OFFSET
0x0004
#
define
PARSER_FLAG_USE_CODEC_TS
0x1000
int64_t
offset
;
int64_t
cur_frame_end
[
AV_PARSER_PTS_NB
]
;
int
key_frame
;
#
if
FF_API_CONVERGENCE_DURATION
attribute_deprecated
int64_t
convergence_duration
;
#
endif
int
dts_sync_point
;
int
dts_ref_dts_delta
;
int
pts_dts_delta
;
int64_t
cur_frame_pos
[
AV_PARSER_PTS_NB
]
;
int64_t
pos
;
int64_t
last_pos
;
int
duration
;
enum
AVFieldOrder
field_order
;
enum
AVPictureStructure
picture_structure
;
int
output_picture_number
;
int
width
;
int
height
;
int
coded_width
;
int
coded_height
;
int
format
;
}
AVCodecParserContext
;
typedef
struct
AVCodecParser
{
int
codec_ids
[
5
]
;
int
priv_data_size
;
int
(
*
parser_init
)
(
AVCodecParserContext
*
s
)
;
int
(
*
parser_parse
)
(
AVCodecParserContext
*
s
AVCodecContext
*
avctx
const
uint8_t
*
*
poutbuf
int
*
poutbuf_size
const
uint8_t
*
buf
int
buf_size
)
;
void
(
*
parser_close
)
(
AVCodecParserContext
*
s
)
;
int
(
*
split
)
(
AVCodecContext
*
avctx
const
uint8_t
*
buf
int
buf_size
)
;
#
if
FF_API_NEXT
attribute_deprecated
struct
AVCodecParser
*
next
;
#
endif
}
AVCodecParser
;
const
AVCodecParser
*
av_parser_iterate
(
void
*
*
opaque
)
;
#
if
FF_API_NEXT
attribute_deprecated
AVCodecParser
*
av_parser_next
(
const
AVCodecParser
*
c
)
;
attribute_deprecated
void
av_register_codec_parser
(
AVCodecParser
*
parser
)
;
#
endif
AVCodecParserContext
*
av_parser_init
(
int
codec_id
)
;
int
av_parser_parse2
(
AVCodecParserContext
*
s
AVCodecContext
*
avctx
uint8_t
*
*
poutbuf
int
*
poutbuf_size
const
uint8_t
*
buf
int
buf_size
int64_t
pts
int64_t
dts
int64_t
pos
)
;
#
if
FF_API_PARSER_CHANGE
attribute_deprecated
int
av_parser_change
(
AVCodecParserContext
*
s
AVCodecContext
*
avctx
uint8_t
*
*
poutbuf
int
*
poutbuf_size
const
uint8_t
*
buf
int
buf_size
int
keyframe
)
;
#
endif
void
av_parser_close
(
AVCodecParserContext
*
s
)
;
#
if
FF_API_OLD_ENCDEC
attribute_deprecated
int
avcodec_encode_audio2
(
AVCodecContext
*
avctx
AVPacket
*
avpkt
const
AVFrame
*
frame
int
*
got_packet_ptr
)
;
attribute_deprecated
int
avcodec_encode_video2
(
AVCodecContext
*
avctx
AVPacket
*
avpkt
const
AVFrame
*
frame
int
*
got_packet_ptr
)
;
#
endif
int
avcodec_encode_subtitle
(
AVCodecContext
*
avctx
uint8_t
*
buf
int
buf_size
const
AVSubtitle
*
sub
)
;
#
if
FF_API_AVPICTURE
attribute_deprecated
int
avpicture_alloc
(
AVPicture
*
picture
enum
AVPixelFormat
pix_fmt
int
width
int
height
)
;
attribute_deprecated
void
avpicture_free
(
AVPicture
*
picture
)
;
attribute_deprecated
int
avpicture_fill
(
AVPicture
*
picture
const
uint8_t
*
ptr
enum
AVPixelFormat
pix_fmt
int
width
int
height
)
;
attribute_deprecated
int
avpicture_layout
(
const
AVPicture
*
src
enum
AVPixelFormat
pix_fmt
int
width
int
height
unsigned
char
*
dest
int
dest_size
)
;
attribute_deprecated
int
avpicture_get_size
(
enum
AVPixelFormat
pix_fmt
int
width
int
height
)
;
attribute_deprecated
void
av_picture_copy
(
AVPicture
*
dst
const
AVPicture
*
src
enum
AVPixelFormat
pix_fmt
int
width
int
height
)
;
attribute_deprecated
int
av_picture_crop
(
AVPicture
*
dst
const
AVPicture
*
src
enum
AVPixelFormat
pix_fmt
int
top_band
int
left_band
)
;
attribute_deprecated
int
av_picture_pad
(
AVPicture
*
dst
const
AVPicture
*
src
int
height
int
width
enum
AVPixelFormat
pix_fmt
int
padtop
int
padbottom
int
padleft
int
padright
int
*
color
)
;
#
endif
#
if
FF_API_GETCHROMA
attribute_deprecated
void
avcodec_get_chroma_sub_sample
(
enum
AVPixelFormat
pix_fmt
int
*
h_shift
int
*
v_shift
)
;
#
endif
unsigned
int
avcodec_pix_fmt_to_codec_tag
(
enum
AVPixelFormat
pix_fmt
)
;
enum
AVPixelFormat
avcodec_find_best_pix_fmt_of_list
(
const
enum
AVPixelFormat
*
pix_fmt_list
enum
AVPixelFormat
src_pix_fmt
int
has_alpha
int
*
loss_ptr
)
;
#
if
FF_API_AVCODEC_PIX_FMT
attribute_deprecated
int
avcodec_get_pix_fmt_loss
(
enum
AVPixelFormat
dst_pix_fmt
enum
AVPixelFormat
src_pix_fmt
int
has_alpha
)
;
attribute_deprecated
enum
AVPixelFormat
avcodec_find_best_pix_fmt_of_2
(
enum
AVPixelFormat
dst_pix_fmt1
enum
AVPixelFormat
dst_pix_fmt2
enum
AVPixelFormat
src_pix_fmt
int
has_alpha
int
*
loss_ptr
)
;
attribute_deprecated
enum
AVPixelFormat
avcodec_find_best_pix_fmt2
(
enum
AVPixelFormat
dst_pix_fmt1
enum
AVPixelFormat
dst_pix_fmt2
enum
AVPixelFormat
src_pix_fmt
int
has_alpha
int
*
loss_ptr
)
;
#
endif
enum
AVPixelFormat
avcodec_default_get_format
(
struct
AVCodecContext
*
s
const
enum
AVPixelFormat
*
fmt
)
;
#
if
FF_API_TAG_STRING
attribute_deprecated
size_t
av_get_codec_tag_string
(
char
*
buf
size_t
buf_size
unsigned
int
codec_tag
)
;
#
endif
void
avcodec_string
(
char
*
buf
int
buf_size
AVCodecContext
*
enc
int
encode
)
;
const
char
*
av_get_profile_name
(
const
AVCodec
*
codec
int
profile
)
;
const
char
*
avcodec_profile_name
(
enum
AVCodecID
codec_id
int
profile
)
;
int
avcodec_default_execute
(
AVCodecContext
*
c
int
(
*
func
)
(
AVCodecContext
*
c2
void
*
arg2
)
void
*
arg
int
*
ret
int
count
int
size
)
;
int
avcodec_default_execute2
(
AVCodecContext
*
c
int
(
*
func
)
(
AVCodecContext
*
c2
void
*
arg2
int
int
)
void
*
arg
int
*
ret
int
count
)
;
int
avcodec_fill_audio_frame
(
AVFrame
*
frame
int
nb_channels
enum
AVSampleFormat
sample_fmt
const
uint8_t
*
buf
int
buf_size
int
align
)
;
void
avcodec_flush_buffers
(
AVCodecContext
*
avctx
)
;
int
av_get_bits_per_sample
(
enum
AVCodecID
codec_id
)
;
enum
AVCodecID
av_get_pcm_codec
(
enum
AVSampleFormat
fmt
int
be
)
;
int
av_get_exact_bits_per_sample
(
enum
AVCodecID
codec_id
)
;
int
av_get_audio_frame_duration
(
AVCodecContext
*
avctx
int
frame_bytes
)
;
int
av_get_audio_frame_duration2
(
AVCodecParameters
*
par
int
frame_bytes
)
;
#
if
FF_API_OLD_BSF
typedef
struct
AVBitStreamFilterContext
{
void
*
priv_data
;
const
struct
AVBitStreamFilter
*
filter
;
AVCodecParserContext
*
parser
;
struct
AVBitStreamFilterContext
*
next
;
char
*
args
;
}
AVBitStreamFilterContext
;
attribute_deprecated
void
av_register_bitstream_filter
(
AVBitStreamFilter
*
bsf
)
;
attribute_deprecated
AVBitStreamFilterContext
*
av_bitstream_filter_init
(
const
char
*
name
)
;
attribute_deprecated
int
av_bitstream_filter_filter
(
AVBitStreamFilterContext
*
bsfc
AVCodecContext
*
avctx
const
char
*
args
uint8_t
*
*
poutbuf
int
*
poutbuf_size
const
uint8_t
*
buf
int
buf_size
int
keyframe
)
;
attribute_deprecated
void
av_bitstream_filter_close
(
AVBitStreamFilterContext
*
bsf
)
;
attribute_deprecated
const
AVBitStreamFilter
*
av_bitstream_filter_next
(
const
AVBitStreamFilter
*
f
)
;
#
endif
#
if
FF_API_NEXT
attribute_deprecated
const
AVBitStreamFilter
*
av_bsf_next
(
void
*
*
opaque
)
;
#
endif
void
av_fast_padded_malloc
(
void
*
ptr
unsigned
int
*
size
size_t
min_size
)
;
void
av_fast_padded_mallocz
(
void
*
ptr
unsigned
int
*
size
size_t
min_size
)
;
unsigned
int
av_xiphlacing
(
unsigned
char
*
s
unsigned
int
v
)
;
#
if
FF_API_USER_VISIBLE_AVHWACCEL
attribute_deprecated
void
av_register_hwaccel
(
AVHWAccel
*
hwaccel
)
;
attribute_deprecated
AVHWAccel
*
av_hwaccel_next
(
const
AVHWAccel
*
hwaccel
)
;
#
endif
#
if
FF_API_LOCKMGR
enum
AVLockOp
{
AV_LOCK_CREATE
AV_LOCK_OBTAIN
AV_LOCK_RELEASE
AV_LOCK_DESTROY
}
;
attribute_deprecated
int
av_lockmgr_register
(
int
(
*
cb
)
(
void
*
*
mutex
enum
AVLockOp
op
)
)
;
#
endif
int
avcodec_is_open
(
AVCodecContext
*
s
)
;
AVCPBProperties
*
av_cpb_properties_alloc
(
size_t
*
size
)
;
#
endif
