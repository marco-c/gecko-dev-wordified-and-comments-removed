#
ifndef
AVCODEC_CODEC_INTERNAL_H
#
define
AVCODEC_CODEC_INTERNAL_H
#
include
<
stdint
.
h
>
#
include
"
libavutil
/
attributes
.
h
"
#
include
"
codec
.
h
"
#
include
"
config
.
h
"
#
define
FF_CODEC_CAP_NOT_INIT_THREADSAFE
(
1
<
<
0
)
#
define
FF_CODEC_CAP_INIT_CLEANUP
(
1
<
<
1
)
#
define
FF_CODEC_CAP_SETS_PKT_DTS
(
1
<
<
2
)
#
define
FF_CODEC_CAP_SKIP_FRAME_FILL_PARAM
(
1
<
<
3
)
#
define
FF_CODEC_CAP_EXPORTS_CROPPING
(
1
<
<
4
)
#
define
FF_CODEC_CAP_SLICE_THREAD_HAS_MF
(
1
<
<
5
)
#
define
FF_CODEC_CAP_ALLOCATE_PROGRESS
(
1
<
<
6
)
#
define
FF_CODEC_CAP_AUTO_THREADS
(
1
<
<
7
)
#
define
FF_CODEC_CAP_SETS_FRAME_PROPS
(
1
<
<
8
)
#
define
FF_CODEC_CAP_ICC_PROFILES
(
1
<
<
9
)
#
define
FF_CODEC_CAP_EOF_FLUSH
(
1
<
<
10
)
#
define
FF_CODEC_TAGS_END
-
1
typedef
struct
FFCodecDefault
{
const
char
*
key
;
const
char
*
value
;
}
FFCodecDefault
;
struct
AVCodecContext
;
struct
AVSubtitle
;
struct
AVPacket
;
enum
FFCodecType
{
FF_CODEC_CB_TYPE_DECODE
FF_CODEC_CB_TYPE_DECODE_SUB
FF_CODEC_CB_TYPE_RECEIVE_FRAME
FF_CODEC_CB_TYPE_ENCODE
FF_CODEC_CB_TYPE_ENCODE_SUB
FF_CODEC_CB_TYPE_RECEIVE_PACKET
}
;
typedef
struct
FFCodec
{
AVCodec
p
;
unsigned
caps_internal
:
29
;
unsigned
cb_type
:
3
;
int
priv_data_size
;
int
(
*
update_thread_context
)
(
struct
AVCodecContext
*
dst
const
struct
AVCodecContext
*
src
)
;
int
(
*
update_thread_context_for_user
)
(
struct
AVCodecContext
*
dst
const
struct
AVCodecContext
*
src
)
;
const
FFCodecDefault
*
defaults
;
void
(
*
init_static_data
)
(
struct
FFCodec
*
codec
)
;
int
(
*
init
)
(
struct
AVCodecContext
*
)
;
union
{
int
(
*
decode
)
(
struct
AVCodecContext
*
avctx
struct
AVFrame
*
frame
int
*
got_frame_ptr
struct
AVPacket
*
avpkt
)
;
int
(
*
decode_sub
)
(
struct
AVCodecContext
*
avctx
struct
AVSubtitle
*
sub
int
*
got_frame_ptr
const
struct
AVPacket
*
avpkt
)
;
int
(
*
receive_frame
)
(
struct
AVCodecContext
*
avctx
struct
AVFrame
*
frame
)
;
int
(
*
encode
)
(
struct
AVCodecContext
*
avctx
struct
AVPacket
*
avpkt
const
struct
AVFrame
*
frame
int
*
got_packet_ptr
)
;
int
(
*
encode_sub
)
(
struct
AVCodecContext
*
avctx
uint8_t
*
buf
int
buf_size
const
struct
AVSubtitle
*
sub
)
;
int
(
*
receive_packet
)
(
struct
AVCodecContext
*
avctx
struct
AVPacket
*
avpkt
)
;
}
cb
;
int
(
*
close
)
(
struct
AVCodecContext
*
)
;
void
(
*
flush
)
(
struct
AVCodecContext
*
)
;
const
char
*
bsfs
;
const
struct
AVCodecHWConfigInternal
*
const
*
hw_configs
;
const
uint32_t
*
codec_tags
;
}
FFCodec
;
#
if
CONFIG_SMALL
#
define
CODEC_LONG_NAME
(
str
)
.
p
.
long_name
=
NULL
#
else
#
define
CODEC_LONG_NAME
(
str
)
.
p
.
long_name
=
str
#
endif
#
if
HAVE_THREADS
#
define
UPDATE_THREAD_CONTEXT
(
func
)
\
.
update_thread_context
=
(
func
)
#
define
UPDATE_THREAD_CONTEXT_FOR_USER
(
func
)
\
.
update_thread_context_for_user
=
(
func
)
#
else
#
define
UPDATE_THREAD_CONTEXT
(
func
)
\
.
update_thread_context
=
NULL
#
define
UPDATE_THREAD_CONTEXT_FOR_USER
(
func
)
\
.
update_thread_context_for_user
=
NULL
#
endif
#
define
FF_CODEC_DECODE_CB
(
func
)
\
.
cb_type
=
FF_CODEC_CB_TYPE_DECODE
\
.
cb
.
decode
=
(
func
)
#
define
FF_CODEC_DECODE_SUB_CB
(
func
)
\
.
cb_type
=
FF_CODEC_CB_TYPE_DECODE_SUB
\
.
cb
.
decode_sub
=
(
func
)
#
define
FF_CODEC_RECEIVE_FRAME_CB
(
func
)
\
.
cb_type
=
FF_CODEC_CB_TYPE_RECEIVE_FRAME
\
.
cb
.
receive_frame
=
(
func
)
#
define
FF_CODEC_ENCODE_CB
(
func
)
\
.
cb_type
=
FF_CODEC_CB_TYPE_ENCODE
\
.
cb
.
encode
=
(
func
)
#
define
FF_CODEC_ENCODE_SUB_CB
(
func
)
\
.
cb_type
=
FF_CODEC_CB_TYPE_ENCODE_SUB
\
.
cb
.
encode_sub
=
(
func
)
#
define
FF_CODEC_RECEIVE_PACKET_CB
(
func
)
\
.
cb_type
=
FF_CODEC_CB_TYPE_RECEIVE_PACKET
\
.
cb
.
receive_packet
=
(
func
)
static
av_always_inline
const
FFCodec
*
ffcodec
(
const
AVCodec
*
codec
)
{
return
(
const
FFCodec
*
)
codec
;
}
#
endif
