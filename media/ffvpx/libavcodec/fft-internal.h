#
ifndef
AVCODEC_FFT_INTERNAL_H
#
define
AVCODEC_FFT_INTERNAL_H
#
if
FFT_FLOAT
#
define
FIX15
(
v
)
(
v
)
#
define
sqrthalf
(
float
)
M_SQRT1_2
#
define
BF
(
x
y
a
b
)
do
{
\
x
=
a
-
b
;
\
y
=
a
+
b
;
\
}
while
(
0
)
#
define
CMUL
(
dre
dim
are
aim
bre
bim
)
do
{
\
(
dre
)
=
(
are
)
*
(
bre
)
-
(
aim
)
*
(
bim
)
;
\
(
dim
)
=
(
are
)
*
(
bim
)
+
(
aim
)
*
(
bre
)
;
\
}
while
(
0
)
#
else
#
define
SCALE_FLOAT
(
a
bits
)
lrint
(
(
a
)
*
(
double
)
(
1
<
<
(
bits
)
)
)
#
if
FFT_FIXED_32
#
define
CMUL
(
dre
dim
are
aim
bre
bim
)
do
{
\
int64_t
accu
;
\
(
accu
)
=
(
int64_t
)
(
bre
)
*
(
are
)
;
\
(
accu
)
-
=
(
int64_t
)
(
bim
)
*
(
aim
)
;
\
(
dre
)
=
(
int
)
(
(
(
accu
)
+
0x40000000
)
>
>
31
)
;
\
(
accu
)
=
(
int64_t
)
(
bre
)
*
(
aim
)
;
\
(
accu
)
+
=
(
int64_t
)
(
bim
)
*
(
are
)
;
\
(
dim
)
=
(
int
)
(
(
(
accu
)
+
0x40000000
)
>
>
31
)
;
\
}
while
(
0
)
#
define
FIX15
(
a
)
av_clip
(
SCALE_FLOAT
(
a
31
)
-
2147483647
2147483647
)
#
endif
#
endif
#
define
ff_imdct_calc_c
FFT_NAME
(
ff_imdct_calc_c
)
#
define
ff_imdct_half_c
FFT_NAME
(
ff_imdct_half_c
)
#
define
ff_mdct_calc_c
FFT_NAME
(
ff_mdct_calc_c
)
void
ff_imdct_calc_c
(
FFTContext
*
s
FFTSample
*
output
const
FFTSample
*
input
)
;
void
ff_imdct_half_c
(
FFTContext
*
s
FFTSample
*
output
const
FFTSample
*
input
)
;
void
ff_mdct_calc_c
(
FFTContext
*
s
FFTSample
*
output
const
FFTSample
*
input
)
;
#
endif
