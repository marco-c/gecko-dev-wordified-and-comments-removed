#
ifndef
AVCODEC_THREAD_H
#
define
AVCODEC_THREAD_H
#
include
"
libavutil
/
buffer
.
h
"
#
include
"
avcodec
.
h
"
void
ff_thread_flush
(
AVCodecContext
*
avctx
)
;
int
ff_thread_decode_frame
(
AVCodecContext
*
avctx
AVFrame
*
picture
int
*
got_picture_ptr
AVPacket
*
avpkt
)
;
void
ff_thread_finish_setup
(
AVCodecContext
*
avctx
)
;
#
if
FF_API_THREAD_SAFE_CALLBACKS
enum
AVPixelFormat
ff_thread_get_format
(
AVCodecContext
*
avctx
const
enum
AVPixelFormat
*
fmt
)
;
#
else
#
define
ff_thread_get_format
ff_get_format
#
endif
int
ff_thread_get_buffer
(
AVCodecContext
*
avctx
AVFrame
*
f
int
flags
)
;
void
ff_thread_release_buffer
(
AVCodecContext
*
avctx
AVFrame
*
f
)
;
int
ff_thread_init
(
AVCodecContext
*
s
)
;
int
ff_slice_thread_execute_with_mainfunc
(
AVCodecContext
*
avctx
int
(
*
action_func2
)
(
AVCodecContext
*
c
void
*
arg
int
jobnr
int
threadnr
)
int
(
*
main_func
)
(
AVCodecContext
*
c
)
void
*
arg
int
*
ret
int
job_count
)
;
void
ff_thread_free
(
AVCodecContext
*
s
)
;
int
ff_slice_thread_allocz_entries
(
AVCodecContext
*
avctx
int
count
)
;
int
ff_slice_thread_init_progress
(
AVCodecContext
*
avctx
)
;
void
ff_thread_report_progress2
(
AVCodecContext
*
avctx
int
field
int
thread
int
n
)
;
void
ff_thread_await_progress2
(
AVCodecContext
*
avctx
int
field
int
thread
int
shift
)
;
#
endif
