if
CONFIG
[
'
CPU_ARCH
'
]
!
=
'
aarch64
'
:
ASFLAGS
+
=
CONFIG
[
'
FFVPX_ASFLAGS
'
]
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
ffvpx
/
'
%
TOPSRCDIR
]
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
ffvpx
/
libavcodec
/
x86
/
'
%
TOPSRCDIR
]
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
ffvpx
/
libavutil
/
x86
/
'
%
TOPSRCDIR
]
if
CONFIG
[
'
FFVPX_ASFLAGS
'
]
:
if
CONFIG
[
'
FFVPX_USE_NASM
'
]
:
USE_NASM
=
True
if
CONFIG
[
'
OS_ARCH
'
]
=
=
'
WINNT
'
:
DEFINES
[
'
_USE_MATH_DEFINES
'
]
=
True
DEFINES
[
'
inline
'
]
=
"
__inline
"
LOCAL_INCLUDES
+
=
[
'
/
media
/
ffvpx
'
]
USE_LIBS
+
=
[
'
gkcodecs
'
]
AllowCompilerWarnings
(
)
CFLAGS
+
=
[
'
-
Wno
-
parentheses
'
'
-
Wno
-
pointer
-
sign
'
'
-
Wno
-
sign
-
compare
'
'
-
Wno
-
switch
'
'
-
Wno
-
type
-
limits
'
'
-
Wno
-
unused
-
function
'
'
-
Wno
-
deprecated
-
declarations
'
]
if
CONFIG
[
'
CC_TYPE
'
]
in
(
'
clang
'
'
clang
-
cl
'
)
:
CFLAGS
+
=
[
'
-
Wno
-
absolute
-
value
'
'
-
Wno
-
incompatible
-
pointer
-
types
'
'
-
Wno
-
string
-
conversion
'
'
-
Wno
-
visibility
'
]
if
CONFIG
[
'
CC_TYPE
'
]
=
=
'
clang
-
cl
'
:
CFLAGS
+
=
[
'
-
Wno
-
inconsistent
-
dllimport
'
'
-
Wno
-
macro
-
redefined
'
]
else
:
CFLAGS
+
=
[
'
-
Wno
-
discarded
-
qualifiers
'
'
-
Wno
-
maybe
-
uninitialized
'
]
if
CONFIG
[
'
CC_TYPE
'
]
in
(
'
clang
'
'
gcc
'
)
:
CFLAGS
+
=
[
'
-
include
'
'
libavutil_visibility
.
h
'
]
if
CONFIG
[
'
CC_TYPE
'
]
=
=
'
clang
-
cl
'
:
LOCAL_INCLUDES
+
=
[
'
/
media
/
ffvpx
/
compat
/
atomics
/
win32
'
]
DEFINES
[
'
HAVE_AV_CONFIG_H
'
]
=
True
if
CONFIG
[
'
MOZ_DEBUG
'
]
:
DEFINES
[
'
ASSERT_LEVEL
'
]
=
2
elif
not
CONFIG
[
'
RELEASE_OR_BETA
'
]
:
DEFINES
[
'
ASSERT_LEVEL
'
]
=
1
include
(
'
/
tools
/
fuzzing
/
libfuzzer
-
config
.
mozbuild
'
)
