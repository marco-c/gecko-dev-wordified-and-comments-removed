#
ifndef
OMX_CONTENTPIPE_H
#
define
OMX_CONTENTPIPE_H
#
ifndef
KD_EACCES
#
define
KD_EACCES
(
1
)
#
define
KD_EADDRINUSE
(
2
)
#
define
KD_EAGAIN
(
5
)
#
define
KD_EBADF
(
7
)
#
define
KD_EBUSY
(
8
)
#
define
KD_ECONNREFUSED
(
9
)
#
define
KD_ECONNRESET
(
10
)
#
define
KD_EDEADLK
(
11
)
#
define
KD_EDESTADDRREQ
(
12
)
#
define
KD_ERANGE
(
35
)
#
define
KD_EEXIST
(
13
)
#
define
KD_EFBIG
(
14
)
#
define
KD_EHOSTUNREACH
(
15
)
#
define
KD_EINVAL
(
17
)
#
define
KD_EIO
(
18
)
#
define
KD_EISCONN
(
20
)
#
define
KD_EISDIR
(
21
)
#
define
KD_EMFILE
(
22
)
#
define
KD_ENAMETOOLONG
(
23
)
#
define
KD_ENOENT
(
24
)
#
define
KD_ENOMEM
(
25
)
#
define
KD_ENOSPC
(
26
)
#
define
KD_ENOSYS
(
27
)
#
define
KD_ENOTCONN
(
28
)
#
define
KD_EPERM
(
33
)
#
define
KD_ETIMEDOUT
(
36
)
#
define
KD_EILSEQ
(
19
)
#
endif
typedef
OMX_U32
CPresult
;
typedef
char
*
CPstring
;
typedef
void
*
CPhandle
;
typedef
OMX_U32
CPuint
;
typedef
OMX_S32
CPint
;
typedef
char
CPbyte
;
typedef
OMX_BOOL
CPbool
;
typedef
enum
CP_ORIGINTYPE
{
CP_OriginBegin
CP_OriginCur
CP_OriginEnd
CP_OriginKhronosExtensions
=
0x6F000000
CP_OriginVendorStartUnused
=
0x7F000000
CP_OriginMax
=
0X7FFFFFFF
}
CP_ORIGINTYPE
;
typedef
enum
CP_ACCESSTYPE
{
CP_AccessRead
CP_AccessWrite
CP_AccessReadWrite
CP_AccessKhronosExtensions
=
0x6F000000
CP_AccessVendorStartUnused
=
0x7F000000
CP_AccessMax
=
0X7FFFFFFF
}
CP_ACCESSTYPE
;
typedef
enum
CP_CHECKBYTESRESULTTYPE
{
CP_CheckBytesOk
CP_CheckBytesNotReady
CP_CheckBytesInsufficientBytes
CP_CheckBytesAtEndOfStream
CP_CheckBytesOutOfBuffers
CP_CheckBytesKhronosExtensions
=
0x6F000000
CP_CheckBytesVendorStartUnused
=
0x7F000000
CP_CheckBytesMax
=
0X7FFFFFFF
}
CP_CHECKBYTESRESULTTYPE
;
typedef
enum
CP_EVENTTYPE
{
CP_BytesAvailable
CP_Overflow
CP_PipeDisconnected
CP_EventKhronosExtensions
=
0x6F000000
CP_EventVendorStartUnused
=
0x7F000000
CP_EventMax
=
0X7FFFFFFF
}
CP_EVENTTYPE
;
typedef
struct
CP_PIPETYPE
{
CPresult
(
*
Open
)
(
CPhandle
*
hContent
CPstring
szURI
CP_ACCESSTYPE
eAccess
)
;
CPresult
(
*
Close
)
(
CPhandle
hContent
)
;
CPresult
(
*
Create
)
(
CPhandle
*
hContent
CPstring
szURI
)
;
CPresult
(
*
CheckAvailableBytes
)
(
CPhandle
hContent
CPuint
nBytesRequested
CP_CHECKBYTESRESULTTYPE
*
eResult
)
;
CPresult
(
*
SetPosition
)
(
CPhandle
hContent
CPint
nOffset
CP_ORIGINTYPE
eOrigin
)
;
CPresult
(
*
GetPosition
)
(
CPhandle
hContent
CPuint
*
pPosition
)
;
CPresult
(
*
Read
)
(
CPhandle
hContent
CPbyte
*
pData
CPuint
nSize
)
;
CPresult
(
*
ReadBuffer
)
(
CPhandle
hContent
CPbyte
*
*
ppBuffer
CPuint
*
nSize
CPbool
bForbidCopy
)
;
CPresult
(
*
ReleaseReadBuffer
)
(
CPhandle
hContent
CPbyte
*
pBuffer
)
;
CPresult
(
*
Write
)
(
CPhandle
hContent
CPbyte
*
data
CPuint
nSize
)
;
CPresult
(
*
GetWriteBuffer
)
(
CPhandle
hContent
CPbyte
*
*
ppBuffer
CPuint
nSize
)
;
CPresult
(
*
WriteBuffer
)
(
CPhandle
hContent
CPbyte
*
pBuffer
CPuint
nFilledSize
)
;
CPresult
(
*
RegisterCallback
)
(
CPhandle
hContent
CPresult
(
*
ClientCallback
)
(
CP_EVENTTYPE
eEvent
CPuint
iParam
)
)
;
}
CP_PIPETYPE
;
#
endif
