#
ifndef
DOM_MEDIA_PLATFORM_WMF_CLEARKEY_WMFCLEARKEYCDM_H
#
define
DOM_MEDIA_PLATFORM_WMF_CLEARKEY_WMFCLEARKEYCDM_H
#
include
<
mfidl
.
h
>
#
include
<
unordered_map
>
#
include
<
variant
>
#
include
<
windows
.
h
>
#
include
<
windows
.
media
.
protection
.
h
>
#
include
<
wrl
.
h
>
#
include
<
wrl
/
client
.
h
>
#
include
"
ClearKeySessionManager
.
h
"
#
include
"
MFCDMExtra
.
h
"
#
include
"
WMFClearKeyUtils
.
h
"
#
include
"
content_decryption_module
.
h
"
namespace
mozilla
{
class
SessionManagerWrapper
;
class
WMFClearKeySession
;
class
WMFClearKeyCDM
final
:
public
Microsoft
:
:
WRL
:
:
RuntimeClass
<
Microsoft
:
:
WRL
:
:
RuntimeClassFlags
<
Microsoft
:
:
WRL
:
:
ClassicCom
>
IMFContentDecryptionModule
IMFGetService
IMFShutdown
Microsoft
:
:
WRL
:
:
FtmBase
>
{
public
:
WMFClearKeyCDM
(
)
=
default
;
~
WMFClearKeyCDM
(
)
;
WMFClearKeyCDM
(
const
WMFClearKeyCDM
&
)
=
delete
;
WMFClearKeyCDM
&
operator
=
(
const
WMFClearKeyCDM
&
)
=
delete
;
HRESULT
RuntimeClassInitialize
(
IPropertyStore
*
aProperties
)
;
STDMETHODIMP
SetContentEnabler
(
IMFContentEnabler
*
aContentEnabler
IMFAsyncResult
*
aResult
)
override
;
STDMETHODIMP
GetSuspendNotify
(
IMFCdmSuspendNotify
*
*
aNotify
)
override
;
STDMETHODIMP
SetPMPHostApp
(
IMFPMPHostApp
*
aPmpHostApp
)
override
;
STDMETHODIMP
CreateSession
(
MF_MEDIAKEYSESSION_TYPE
aSessionType
IMFContentDecryptionModuleSessionCallbacks
*
aCallbacks
IMFContentDecryptionModuleSession
*
*
aSession
)
override
;
STDMETHODIMP
SetServerCertificate
(
const
BYTE
*
aCertificate
DWORD
aCertificateSize
)
override
;
STDMETHODIMP
CreateTrustedInput
(
const
BYTE
*
aContentInitData
DWORD
aContentInitDataSize
IMFTrustedInput
*
*
aTrustedInput
)
override
;
STDMETHODIMP
GetProtectionSystemIds
(
GUID
*
*
aSystemIds
DWORD
*
aCount
)
override
;
STDMETHODIMP
GetService
(
REFGUID
aGuidService
REFIID
aRiid
LPVOID
*
aPpvObject
)
override
;
STDMETHODIMP
Shutdown
(
)
override
;
STDMETHODIMP
GetShutdownStatus
(
MFSHUTDOWN_STATUS
*
aStatus
)
override
;
private
:
RefPtr
<
SessionManagerWrapper
>
mSessionManager
;
Microsoft
:
:
WRL
:
:
ComPtr
<
ABI
:
:
Windows
:
:
Media
:
:
Protection
:
:
IMediaProtectionPMPServer
>
mPMPServer
;
}
;
class
SessionManagerWrapper
final
:
public
RefCounted
private
cdm
:
:
Host_10
{
public
:
explicit
SessionManagerWrapper
(
WMFClearKeyCDM
*
aCDM
)
;
HRESULT
GenerateRequest
(
cdm
:
:
InitDataType
aInitDataType
const
BYTE
*
aInitData
DWORD
aInitDataSize
cdm
:
:
SessionType
aSessionType
WMFClearKeySession
*
aSession
std
:
:
string
&
aSessionIdOut
)
;
HRESULT
UpdateSession
(
const
std
:
:
string
&
aSessionId
const
BYTE
*
aResponse
DWORD
aResponseSize
)
;
HRESULT
CloseSession
(
const
std
:
:
string
&
aSessionId
)
;
HRESULT
RemoveSession
(
const
std
:
:
string
&
aSessionId
)
;
HRESULT
Decrypt
(
const
cdm
:
:
InputBuffer_2
&
aBuffer
cdm
:
:
DecryptedBlock
*
aDecryptedBlock
)
;
void
Shutdown
(
)
;
bool
IsShutdown
(
)
;
private
:
~
SessionManagerWrapper
(
)
;
void
OnInitialized
(
bool
aSuccess
)
override
{
}
void
OnResolveKeyStatusPromise
(
uint32_t
aPromiseId
cdm
:
:
KeyStatus
aKeyStatus
)
override
{
}
void
OnResolveNewSessionPromise
(
uint32_t
aPromiseId
const
char
*
aSessionId
uint32_t
aSessionIdSize
)
override
;
void
OnResolvePromise
(
uint32_t
aPromiseId
)
override
;
void
OnRejectPromise
(
uint32_t
aPromiseId
cdm
:
:
Exception
aException
uint32_t
aSystemCode
const
char
*
aErrorMessage
uint32_t
aErrorMessageSize
)
override
;
void
OnSessionMessage
(
const
char
*
aSessionId
uint32_t
aSessionIdSize
cdm
:
:
MessageType
aMessageType
const
char
*
aMessage
uint32_t
aMessageSize
)
override
;
void
OnSessionKeysChange
(
const
char
*
aSessionId
uint32_t
aSessionIdSize
bool
aHasAdditionalUsableKey
const
cdm
:
:
KeyInformation
*
aKeysInfo
uint32_t
aKeysInfoCount
)
override
;
void
OnExpirationChange
(
const
char
*
aSessionId
uint32_t
aSessionIdSize
cdm
:
:
Time
aNewExpiryTime
)
override
{
}
;
void
OnSessionClosed
(
const
char
*
aSessionId
uint32_t
aSessionIdSize
)
override
{
}
;
cdm
:
:
FileIO
*
CreateFileIO
(
cdm
:
:
FileIOClient
*
aClient
)
override
{
return
nullptr
;
}
void
SendPlatformChallenge
(
const
char
*
aServiceId
uint32_t
aServiceIdSize
const
char
*
aChallenge
uint32_t
aChallengeSize
)
override
{
}
void
EnableOutputProtection
(
uint32_t
aDesiredProtectionMask
)
override
{
}
void
QueryOutputProtectionStatus
(
)
override
{
}
;
void
OnDeferredInitializationDone
(
cdm
:
:
StreamType
aStreamType
cdm
:
:
Status
aDecoderStatus
)
override
{
}
void
RequestStorageId
(
uint32_t
aVersion
)
override
{
}
cdm
:
:
Buffer
*
Allocate
(
uint32_t
aCapacity
)
override
;
void
SetTimer
(
int64_t
aDelayMs
void
*
aContext
)
override
{
}
cdm
:
:
Time
GetCurrentWallTime
(
)
override
{
return
0
.
0
;
}
friend
class
SessionManager
;
Microsoft
:
:
WRL
:
:
ComPtr
<
WMFClearKeyCDM
>
mOwnerCDM
;
RefPtr
<
ClearKeySessionManager
>
mSessionManager
;
std
:
:
unordered_map
<
std
:
:
string
Microsoft
:
:
WRL
:
:
ComPtr
<
WMFClearKeySession
>
>
mSessions
;
class
SyncResultChecker
final
{
public
:
using
ResultType
=
std
:
:
variant
<
const
char
*
bool
>
;
explicit
SyncResultChecker
(
SessionManagerWrapper
&
aOwner
)
:
mOwner
(
aOwner
)
mIdx
(
sIdx
+
+
)
mKeySession
(
nullptr
)
{
mOwner
.
mActiveSyncResultChecker
.
insert
(
{
mIdx
this
}
)
;
}
SyncResultChecker
(
SessionManagerWrapper
&
aOwner
WMFClearKeySession
*
aKeySession
)
:
mOwner
(
aOwner
)
mIdx
(
sIdx
+
+
)
mKeySession
(
aKeySession
)
{
mOwner
.
mActiveSyncResultChecker
.
insert
(
{
mIdx
this
}
)
;
}
~
SyncResultChecker
(
)
{
mOwner
.
mActiveSyncResultChecker
.
erase
(
mIdx
)
;
}
uint32_t
GetPromiseId
(
)
const
{
return
mIdx
;
}
const
ResultType
&
GetResult
(
)
const
{
return
mResult
;
}
WMFClearKeySession
*
GetKeySession
(
)
const
{
return
mKeySession
;
}
private
:
friend
void
SessionManagerWrapper
:
:
OnResolveNewSessionPromise
(
uint32_t
const
char
*
uint32_t
)
;
friend
void
SessionManagerWrapper
:
:
OnResolvePromise
(
uint32_t
)
;
friend
void
SessionManagerWrapper
:
:
OnRejectPromise
(
uint32_t
cdm
:
:
Exception
uint32_t
const
char
*
uint32_t
)
;
void
SetResultConstChar
(
const
char
*
aResult
)
{
mResult
.
emplace
<
const
char
*
>
(
aResult
)
;
}
void
SetResultBool
(
bool
aResult
)
{
mResult
.
emplace
<
bool
>
(
aResult
)
;
}
static
inline
uint32_t
sIdx
=
0
;
SessionManagerWrapper
&
mOwner
;
const
uint32_t
mIdx
;
ResultType
mResult
;
WMFClearKeySession
*
const
mKeySession
;
}
;
std
:
:
unordered_map
<
uint32_t
SyncResultChecker
*
>
mActiveSyncResultChecker
;
std
:
:
mutex
mMutex
;
bool
mIsShutdown
=
false
;
}
;
}
#
endif
