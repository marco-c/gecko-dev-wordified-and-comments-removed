#
if
!
defined
(
CUBEB_UTILS_WIN
)
#
define
CUBEB_UTILS_WIN
#
include
"
cubeb
-
internal
.
h
"
#
include
<
windows
.
h
>
class
owned_critical_section
{
public
:
owned_critical_section
(
)
:
srwlock
(
SRWLOCK_INIT
)
#
ifndef
NDEBUG
owner
(
0
)
#
endif
{
}
void
lock
(
)
{
AcquireSRWLockExclusive
(
&
srwlock
)
;
#
ifndef
NDEBUG
XASSERT
(
owner
!
=
GetCurrentThreadId
(
)
&
&
"
recursive
locking
"
)
;
owner
=
GetCurrentThreadId
(
)
;
#
endif
}
void
unlock
(
)
{
#
ifndef
NDEBUG
owner
=
0
;
#
endif
ReleaseSRWLockExclusive
(
&
srwlock
)
;
}
void
assert_current_thread_owns
(
)
{
#
ifndef
NDEBUG
XASSERT
(
owner
=
=
GetCurrentThreadId
(
)
)
;
#
endif
}
private
:
SRWLOCK
srwlock
;
#
ifndef
NDEBUG
DWORD
owner
;
#
endif
owned_critical_section
(
const
owned_critical_section
&
)
;
owned_critical_section
&
operator
=
(
const
owned_critical_section
&
)
;
}
;
#
endif
