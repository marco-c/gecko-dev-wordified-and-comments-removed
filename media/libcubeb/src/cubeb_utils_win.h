#
if
!
defined
(
CUBEB_UTILS_WIN
)
#
define
CUBEB_UTILS_WIN
#
include
<
windows
.
h
>
#
include
"
cubeb
-
internal
.
h
"
class
owned_critical_section
{
public
:
owned_critical_section
(
)
#
ifndef
NDEBUG
:
owner
(
0
)
#
endif
{
InitializeCriticalSection
(
&
critical_section
)
;
}
~
owned_critical_section
(
)
{
DeleteCriticalSection
(
&
critical_section
)
;
}
void
enter
(
)
{
EnterCriticalSection
(
&
critical_section
)
;
#
ifndef
NDEBUG
XASSERT
(
owner
!
=
GetCurrentThreadId
(
)
&
&
"
recursive
locking
"
)
;
owner
=
GetCurrentThreadId
(
)
;
#
endif
}
void
leave
(
)
{
#
ifndef
NDEBUG
owner
=
0
;
#
endif
LeaveCriticalSection
(
&
critical_section
)
;
}
void
assert_current_thread_owns
(
)
{
#
ifndef
NDEBUG
XASSERT
(
owner
=
=
GetCurrentThreadId
(
)
)
;
#
endif
}
private
:
CRITICAL_SECTION
critical_section
;
#
ifndef
NDEBUG
DWORD
owner
;
#
endif
owned_critical_section
(
const
owned_critical_section
&
)
;
owned_critical_section
&
operator
=
(
const
owned_critical_section
&
)
;
}
;
#
endif
