#
if
!
defined
(
CUBEB_RESAMPLER_INTERNAL
)
#
define
CUBEB_RESAMPLER_INTERNAL
#
include
<
cmath
>
#
include
<
cassert
>
#
include
<
algorithm
>
#
include
<
memory
>
#
ifdef
CUBEB_GECKO_BUILD
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
std
{
using
mozilla
:
:
DefaultDelete
;
using
mozilla
:
:
UniquePtr
;
#
define
default_delete
DefaultDelete
#
define
unique_ptr
UniquePtr
}
#
endif
#
include
"
cubeb
/
cubeb
.
h
"
#
include
"
cubeb_utils
.
h
"
#
include
"
cubeb
-
speex
-
resampler
.
h
"
#
include
"
cubeb_resampler
.
h
"
#
include
<
stdio
.
h
>
int
to_speex_quality
(
cubeb_resampler_quality
q
)
;
struct
cubeb_resampler
{
virtual
long
fill
(
void
*
input_buffer
long
*
input_frames_count
void
*
output_buffer
long
frames_needed
)
=
0
;
virtual
long
latency
(
)
=
0
;
virtual
~
cubeb_resampler
(
)
{
}
}
;
class
noop_resampler
:
public
cubeb_resampler
{
public
:
noop_resampler
(
cubeb_stream
*
s
cubeb_data_callback
cb
void
*
ptr
)
:
stream
(
s
)
data_callback
(
cb
)
user_ptr
(
ptr
)
{
}
virtual
long
fill
(
void
*
input_buffer
long
*
input_frames_count
void
*
output_buffer
long
output_frames
)
;
virtual
long
latency
(
)
{
return
0
;
}
private
:
cubeb_stream
*
const
stream
;
const
cubeb_data_callback
data_callback
;
void
*
const
user_ptr
;
}
;
class
processor
{
public
:
explicit
processor
(
uint32_t
channels
)
:
channels
(
channels
)
{
}
protected
:
size_t
frames_to_samples
(
size_t
frames
)
{
return
frames
*
channels
;
}
size_t
samples_to_frames
(
size_t
samples
)
{
assert
(
!
(
samples
%
channels
)
)
;
return
samples
/
channels
;
}
const
uint32_t
channels
;
}
;
template
<
typename
T
typename
InputProcessing
typename
OutputProcessing
>
class
cubeb_resampler_speex
:
public
cubeb_resampler
{
public
:
cubeb_resampler_speex
(
InputProcessing
*
input_processor
OutputProcessing
*
output_processor
cubeb_stream
*
s
cubeb_data_callback
cb
void
*
ptr
)
;
virtual
~
cubeb_resampler_speex
(
)
;
virtual
long
fill
(
void
*
input_buffer
long
*
input_frames_count
void
*
output_buffer
long
output_frames_needed
)
;
virtual
long
latency
(
)
{
if
(
input_processor
&
&
output_processor
)
{
assert
(
input_processor
-
>
latency
(
)
=
=
output_processor
-
>
latency
(
)
)
;
return
input_processor
-
>
latency
(
)
;
}
else
if
(
input_processor
)
{
return
input_processor
-
>
latency
(
)
;
}
else
{
return
output_processor
-
>
latency
(
)
;
}
}
private
:
typedef
long
(
cubeb_resampler_speex
:
:
*
processing_callback
)
(
T
*
input_buffer
long
*
input_frames_count
T
*
output_buffer
long
output_frames_needed
)
;
long
fill_internal_duplex
(
T
*
input_buffer
long
*
input_frames_count
T
*
output_buffer
long
output_frames_needed
)
;
long
fill_internal_input
(
T
*
input_buffer
long
*
input_frames_count
T
*
output_buffer
long
output_frames_needed
)
;
long
fill_internal_output
(
T
*
input_buffer
long
*
input_frames_count
T
*
output_buffer
long
output_frames_needed
)
;
std
:
:
unique_ptr
<
InputProcessing
>
input_processor
;
std
:
:
unique_ptr
<
OutputProcessing
>
output_processor
;
processing_callback
fill_internal
;
cubeb_stream
*
const
stream
;
const
cubeb_data_callback
data_callback
;
void
*
const
user_ptr
;
}
;
template
<
typename
T
>
class
cubeb_resampler_speex_one_way
:
public
processor
{
public
:
typedef
T
sample_type
;
cubeb_resampler_speex_one_way
(
uint32_t
channels
uint32_t
source_rate
uint32_t
target_rate
int
quality
)
:
processor
(
channels
)
resampling_ratio
(
static_cast
<
float
>
(
source_rate
)
/
target_rate
)
additional_latency
(
0
)
leftover_samples
(
0
)
{
int
r
;
speex_resampler
=
speex_resampler_init
(
channels
source_rate
target_rate
quality
&
r
)
;
assert
(
r
=
=
RESAMPLER_ERR_SUCCESS
&
&
"
resampler
allocation
failure
"
)
;
}
virtual
~
cubeb_resampler_speex_one_way
(
)
{
speex_resampler_destroy
(
speex_resampler
)
;
}
void
add_latency
(
size_t
frames
)
{
additional_latency
+
=
frames
;
resampling_in_buffer
.
push_silence
(
frames_to_samples
(
frames
)
)
;
}
void
input
(
T
*
input_buffer
size_t
input_frame_count
)
{
resampling_in_buffer
.
push
(
input_buffer
frames_to_samples
(
input_frame_count
)
)
;
}
size_t
output
(
T
*
output_buffer
size_t
output_frame_count
)
{
uint32_t
in_len
=
samples_to_frames
(
resampling_in_buffer
.
length
(
)
)
;
uint32_t
out_len
=
output_frame_count
;
speex_resample
(
resampling_in_buffer
.
data
(
)
&
in_len
output_buffer
&
out_len
)
;
resampling_in_buffer
.
pop
(
nullptr
frames_to_samples
(
in_len
)
)
;
return
out_len
;
}
size_t
output_for_input
(
uint32_t
input_frames
)
{
return
ceilf
(
input_frames
*
resampling_ratio
)
+
1
-
resampling_in_buffer
.
length
(
)
/
channels
;
}
T
*
output
(
size_t
output_frame_count
)
{
if
(
resampling_out_buffer
.
capacity
(
)
<
frames_to_samples
(
output_frame_count
)
)
{
resampling_out_buffer
.
reserve
(
frames_to_samples
(
output_frame_count
)
)
;
}
uint32_t
in_len
=
samples_to_frames
(
resampling_in_buffer
.
length
(
)
)
;
uint32_t
out_len
=
output_frame_count
;
speex_resample
(
resampling_in_buffer
.
data
(
)
&
in_len
resampling_out_buffer
.
data
(
)
&
out_len
)
;
assert
(
out_len
=
=
output_frame_count
)
;
resampling_in_buffer
.
pop
(
nullptr
frames_to_samples
(
in_len
)
)
;
return
resampling_out_buffer
.
data
(
)
;
}
uint32_t
latency
(
)
const
{
int
latency
=
0
;
latency
=
speex_resampler_get_output_latency
(
speex_resampler
)
+
additional_latency
;
assert
(
latency
>
=
0
)
;
return
latency
;
}
uint32_t
input_needed_for_output
(
uint32_t
output_frame_count
)
{
return
ceilf
(
output_frame_count
*
resampling_ratio
)
+
1
-
samples_to_frames
(
resampling_in_buffer
.
length
(
)
)
;
}
T
*
input_buffer
(
size_t
frame_count
)
{
leftover_samples
=
resampling_in_buffer
.
length
(
)
;
resampling_in_buffer
.
reserve
(
leftover_samples
+
frames_to_samples
(
frame_count
)
)
;
return
resampling_in_buffer
.
data
(
)
+
leftover_samples
;
}
void
written
(
size_t
written_frames
)
{
resampling_in_buffer
.
set_length
(
leftover_samples
+
frames_to_samples
(
written_frames
)
)
;
}
private
:
void
speex_resample
(
float
*
input_buffer
uint32_t
*
input_frame_count
float
*
output_buffer
uint32_t
*
output_frame_count
)
{
#
ifndef
NDEBUG
int
rv
;
rv
=
#
endif
speex_resampler_process_interleaved_float
(
speex_resampler
input_buffer
input_frame_count
output_buffer
output_frame_count
)
;
assert
(
rv
=
=
RESAMPLER_ERR_SUCCESS
)
;
}
void
speex_resample
(
short
*
input_buffer
uint32_t
*
input_frame_count
short
*
output_buffer
uint32_t
*
output_frame_count
)
{
#
ifndef
NDEBUG
int
rv
;
rv
=
#
endif
speex_resampler_process_interleaved_int
(
speex_resampler
input_buffer
input_frame_count
output_buffer
output_frame_count
)
;
assert
(
rv
=
=
RESAMPLER_ERR_SUCCESS
)
;
}
SpeexResamplerState
*
speex_resampler
;
const
float
resampling_ratio
;
auto_array
<
T
>
resampling_in_buffer
;
auto_array
<
T
>
resampling_out_buffer
;
uint32_t
additional_latency
;
uint32_t
leftover_samples
;
}
;
template
<
typename
T
>
class
delay_line
:
public
processor
{
public
:
delay_line
(
uint32_t
frames
uint32_t
channels
)
:
processor
(
channels
)
length
(
frames
)
leftover_samples
(
0
)
{
delay_input_buffer
.
push_silence
(
frames
*
channels
)
;
}
void
add_latency
(
size_t
frames
)
{
length
+
=
frames
;
delay_input_buffer
.
push_silence
(
frames_to_samples
(
frames
)
)
;
}
void
input
(
T
*
buffer
uint32_t
frame_count
)
{
delay_input_buffer
.
push
(
buffer
frames_to_samples
(
frame_count
)
)
;
}
T
*
output
(
uint32_t
frames_needed
)
{
if
(
delay_output_buffer
.
capacity
(
)
<
frames_to_samples
(
frames_needed
)
)
{
delay_output_buffer
.
reserve
(
frames_to_samples
(
frames_needed
)
)
;
}
delay_output_buffer
.
clear
(
)
;
delay_output_buffer
.
push
(
delay_input_buffer
.
data
(
)
frames_to_samples
(
frames_needed
)
)
;
delay_input_buffer
.
pop
(
nullptr
frames_to_samples
(
frames_needed
)
)
;
return
delay_output_buffer
.
data
(
)
;
}
T
*
input_buffer
(
uint32_t
frames_needed
)
{
leftover_samples
=
delay_input_buffer
.
length
(
)
;
delay_input_buffer
.
reserve
(
leftover_samples
+
frames_to_samples
(
frames_needed
)
)
;
return
delay_input_buffer
.
data
(
)
+
leftover_samples
;
}
void
written
(
size_t
frames_written
)
{
delay_input_buffer
.
set_length
(
leftover_samples
+
frames_to_samples
(
frames_written
)
)
;
}
size_t
output
(
T
*
output_buffer
uint32_t
frames_needed
)
{
uint32_t
in_len
=
samples_to_frames
(
delay_input_buffer
.
length
(
)
)
;
uint32_t
out_len
=
frames_needed
;
uint32_t
to_pop
=
std
:
:
min
(
in_len
out_len
)
;
delay_input_buffer
.
pop
(
output_buffer
frames_to_samples
(
to_pop
)
)
;
return
to_pop
;
}
size_t
input_needed_for_output
(
uint32_t
frames_needed
)
{
return
frames_needed
;
}
size_t
output_for_input
(
uint32_t
input_frames
)
{
return
input_frames
;
}
size_t
latency
(
)
{
return
length
;
}
private
:
uint32_t
length
;
uint32_t
leftover_samples
;
auto_array
<
T
>
delay_input_buffer
;
auto_array
<
T
>
delay_output_buffer
;
}
;
template
<
typename
T
>
cubeb_resampler
*
cubeb_resampler_create_internal
(
cubeb_stream
*
stream
cubeb_stream_params
*
input_params
cubeb_stream_params
*
output_params
unsigned
int
target_rate
cubeb_data_callback
callback
void
*
user_ptr
cubeb_resampler_quality
quality
)
{
std
:
:
unique_ptr
<
cubeb_resampler_speex_one_way
<
T
>
>
input_resampler
=
nullptr
;
std
:
:
unique_ptr
<
cubeb_resampler_speex_one_way
<
T
>
>
output_resampler
=
nullptr
;
std
:
:
unique_ptr
<
delay_line
<
T
>
>
input_delay
=
nullptr
;
std
:
:
unique_ptr
<
delay_line
<
T
>
>
output_delay
=
nullptr
;
assert
(
(
input_params
|
|
output_params
)
&
&
"
need
at
least
one
valid
parameter
pointer
.
"
)
;
if
(
(
(
input_params
&
&
input_params
-
>
rate
=
=
target_rate
)
&
&
(
output_params
&
&
output_params
-
>
rate
=
=
target_rate
)
)
|
|
(
input_params
&
&
!
output_params
&
&
(
input_params
-
>
rate
=
=
target_rate
)
)
|
|
(
output_params
&
&
!
input_params
&
&
(
output_params
-
>
rate
=
=
target_rate
)
)
)
{
return
new
noop_resampler
(
stream
callback
user_ptr
)
;
}
if
(
output_params
&
&
(
output_params
-
>
rate
!
=
target_rate
)
)
{
output_resampler
.
reset
(
new
cubeb_resampler_speex_one_way
<
T
>
(
output_params
-
>
channels
target_rate
output_params
-
>
rate
to_speex_quality
(
quality
)
)
)
;
if
(
!
output_resampler
)
{
return
NULL
;
}
}
if
(
input_params
&
&
(
input_params
-
>
rate
!
=
target_rate
)
)
{
input_resampler
.
reset
(
new
cubeb_resampler_speex_one_way
<
T
>
(
input_params
-
>
channels
input_params
-
>
rate
target_rate
to_speex_quality
(
quality
)
)
)
;
if
(
!
input_resampler
)
{
return
NULL
;
}
}
if
(
input_resampler
&
&
!
output_resampler
&
&
input_params
&
&
output_params
)
{
output_delay
.
reset
(
new
delay_line
<
T
>
(
input_resampler
-
>
latency
(
)
output_params
-
>
channels
)
)
;
if
(
!
output_delay
)
{
return
NULL
;
}
}
else
if
(
output_resampler
&
&
!
input_resampler
&
&
input_params
&
&
output_params
)
{
input_delay
.
reset
(
new
delay_line
<
T
>
(
output_resampler
-
>
latency
(
)
input_params
-
>
channels
)
)
;
if
(
!
input_delay
)
{
return
NULL
;
}
}
if
(
input_resampler
&
&
output_resampler
)
{
return
new
cubeb_resampler_speex
<
T
cubeb_resampler_speex_one_way
<
T
>
cubeb_resampler_speex_one_way
<
T
>
>
(
input_resampler
.
release
(
)
output_resampler
.
release
(
)
stream
callback
user_ptr
)
;
}
else
if
(
input_resampler
)
{
return
new
cubeb_resampler_speex
<
T
cubeb_resampler_speex_one_way
<
T
>
delay_line
<
T
>
>
(
input_resampler
.
release
(
)
output_delay
.
release
(
)
stream
callback
user_ptr
)
;
}
else
{
return
new
cubeb_resampler_speex
<
T
delay_line
<
T
>
cubeb_resampler_speex_one_way
<
T
>
>
(
input_delay
.
release
(
)
output_resampler
.
release
(
)
stream
callback
user_ptr
)
;
}
}
#
endif
