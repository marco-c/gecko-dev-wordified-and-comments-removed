#
ifndef
__JINCLUDE_H__
#
define
__JINCLUDE_H__
#
include
"
jconfig
.
h
"
#
include
"
jconfigint
.
h
"
#
define
JCONFIG_INCLUDED
#
include
<
stddef
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
.
h
>
#
ifdef
_MSC_VER
#
define
SNPRINTF
(
str
n
format
.
.
.
)
\
_snprintf_s
(
str
n
_TRUNCATE
format
#
#
__VA_ARGS__
)
#
else
#
define
SNPRINTF
snprintf
#
endif
#
ifndef
NO_GETENV
#
ifdef
_MSC_VER
static
INLINE
int
GETENV_S
(
char
*
buffer
size_t
buffer_size
const
char
*
name
)
{
size_t
required_size
;
return
(
int
)
getenv_s
(
&
required_size
buffer
buffer_size
name
)
;
}
#
else
#
include
<
errno
.
h
>
static
INLINE
int
GETENV_S
(
char
*
buffer
size_t
buffer_size
const
char
*
name
)
{
char
*
env
;
if
(
!
buffer
)
{
if
(
buffer_size
=
=
0
)
return
0
;
else
return
(
errno
=
EINVAL
)
;
}
if
(
buffer_size
=
=
0
)
return
(
errno
=
EINVAL
)
;
if
(
!
name
)
{
*
buffer
=
0
;
return
0
;
}
env
=
getenv
(
name
)
;
if
(
!
env
)
{
*
buffer
=
0
;
return
0
;
}
if
(
strlen
(
env
)
+
1
>
buffer_size
)
{
*
buffer
=
0
;
return
ERANGE
;
}
strncpy
(
buffer
env
buffer_size
)
;
return
0
;
}
#
endif
#
endif
#
ifndef
NO_PUTENV
#
ifdef
_WIN32
#
define
PUTENV_S
(
name
value
)
_putenv_s
(
name
value
)
#
else
static
INLINE
int
PUTENV_S
(
const
char
*
name
const
char
*
value
)
{
if
(
!
name
|
|
!
value
)
return
(
errno
=
EINVAL
)
;
setenv
(
name
value
1
)
;
return
errno
;
}
#
endif
#
endif
#
endif
