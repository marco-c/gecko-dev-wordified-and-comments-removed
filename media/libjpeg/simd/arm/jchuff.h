#
if
defined
(
__aarch64__
)
|
|
defined
(
_M_ARM64
)
#
define
BIT_BUF_SIZE
64
#
else
#
define
BIT_BUF_SIZE
32
#
endif
typedef
struct
{
size_t
put_buffer
;
int
free_bits
;
int
last_dc_val
[
MAX_COMPS_IN_SCAN
]
;
}
savable_state
;
typedef
struct
{
JOCTET
*
next_output_byte
;
size_t
free_in_buffer
;
savable_state
cur
;
j_compress_ptr
cinfo
;
int
simd
;
}
working_state
;
#
define
EMIT_BYTE
(
b
)
{
\
buffer
[
0
]
=
(
JOCTET
)
(
b
)
;
\
buffer
[
1
]
=
0
;
\
buffer
-
=
-
2
+
(
(
JOCTET
)
(
b
)
<
0xFF
)
;
\
}
#
if
defined
(
__aarch64__
)
|
|
defined
(
_M_ARM64
)
#
define
FLUSH
(
)
{
\
if
(
put_buffer
&
0x8080808080808080
&
~
(
put_buffer
+
0x0101010101010101
)
)
{
\
EMIT_BYTE
(
put_buffer
>
>
56
)
\
EMIT_BYTE
(
put_buffer
>
>
48
)
\
EMIT_BYTE
(
put_buffer
>
>
40
)
\
EMIT_BYTE
(
put_buffer
>
>
32
)
\
EMIT_BYTE
(
put_buffer
>
>
24
)
\
EMIT_BYTE
(
put_buffer
>
>
16
)
\
EMIT_BYTE
(
put_buffer
>
>
8
)
\
EMIT_BYTE
(
put_buffer
)
\
}
else
{
\
*
(
(
uint64_t
*
)
buffer
)
=
BUILTIN_BSWAP64
(
put_buffer
)
;
\
buffer
+
=
8
;
\
}
\
}
#
else
#
if
defined
(
_MSC_VER
)
&
&
!
defined
(
__clang__
)
#
define
SPLAT
(
)
{
\
buffer
[
0
]
=
(
JOCTET
)
(
put_buffer
>
>
24
)
;
\
buffer
[
1
]
=
(
JOCTET
)
(
put_buffer
>
>
16
)
;
\
buffer
[
2
]
=
(
JOCTET
)
(
put_buffer
>
>
8
)
;
\
buffer
[
3
]
=
(
JOCTET
)
(
put_buffer
)
;
\
buffer
+
=
4
;
\
}
#
else
#
define
SPLAT
(
)
{
\
put_buffer
=
__builtin_bswap32
(
put_buffer
)
;
\
__asm__
(
"
str
%
1
[
%
0
]
#
4
"
:
"
+
r
"
(
buffer
)
:
"
r
"
(
put_buffer
)
)
;
\
}
#
endif
#
define
FLUSH
(
)
{
\
if
(
put_buffer
&
0x80808080
&
~
(
put_buffer
+
0x01010101
)
)
{
\
EMIT_BYTE
(
put_buffer
>
>
24
)
\
EMIT_BYTE
(
put_buffer
>
>
16
)
\
EMIT_BYTE
(
put_buffer
>
>
8
)
\
EMIT_BYTE
(
put_buffer
)
\
}
else
{
\
SPLAT
(
)
;
\
}
\
}
#
endif
#
define
PUT_AND_FLUSH
(
code
size
)
{
\
put_buffer
=
(
put_buffer
<
<
(
size
+
free_bits
)
)
|
(
code
>
>
-
free_bits
)
;
\
FLUSH
(
)
\
free_bits
+
=
BIT_BUF_SIZE
;
\
put_buffer
=
code
;
\
}
#
define
PUT_BITS
(
code
size
)
{
\
free_bits
-
=
size
;
\
if
(
free_bits
<
0
)
\
PUT_AND_FLUSH
(
code
size
)
\
else
\
put_buffer
=
(
put_buffer
<
<
size
)
|
code
;
\
}
#
define
PUT_CODE
(
code
size
diff
)
{
\
diff
|
=
code
<
<
nbits
;
\
nbits
+
=
size
;
\
PUT_BITS
(
diff
nbits
)
\
}
