#
ifndef
WEBP_UTILS_RESCALER_UTILS_H_
#
define
WEBP_UTILS_RESCALER_UTILS_H_
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
"
src
/
webp
/
types
.
h
"
#
define
WEBP_RESCALER_RFIX
32
/
/
fixed
-
point
precision
for
multiplies
#
define
WEBP_RESCALER_ONE
(
1ull
<
<
WEBP_RESCALER_RFIX
)
#
define
WEBP_RESCALER_FRAC
(
x
y
)
\
(
(
uint32_t
)
(
(
(
uint64_t
)
(
x
)
<
<
WEBP_RESCALER_RFIX
)
/
(
y
)
)
)
typedef
uint32_t
rescaler_t
;
typedef
struct
WebPRescaler
WebPRescaler
;
struct
WebPRescaler
{
int
x_expand
;
int
y_expand
;
int
num_channels
;
uint32_t
fx_scale
;
uint32_t
fy_scale
;
uint32_t
fxy_scale
;
int
y_accum
;
int
y_add
y_sub
;
int
x_add
x_sub
;
int
src_width
src_height
;
int
dst_width
dst_height
;
int
src_y
dst_y
;
uint8_t
*
dst
;
int
dst_stride
;
rescaler_t
*
irow
*
frow
;
}
;
int
WebPRescalerInit
(
WebPRescaler
*
const
rescaler
int
src_width
int
src_height
uint8_t
*
const
dst
int
dst_width
int
dst_height
int
dst_stride
int
num_channels
rescaler_t
*
const
work
)
;
int
WebPRescalerGetScaledDimensions
(
int
src_width
int
src_height
int
*
const
scaled_width
int
*
const
scaled_height
)
;
int
WebPRescaleNeededLines
(
const
WebPRescaler
*
const
rescaler
int
max_num_lines
)
;
int
WebPRescalerImport
(
WebPRescaler
*
const
rescaler
int
num_rows
const
uint8_t
*
src
int
src_stride
)
;
int
WebPRescalerExport
(
WebPRescaler
*
const
rescaler
)
;
static
WEBP_INLINE
int
WebPRescalerInputDone
(
const
WebPRescaler
*
const
rescaler
)
{
return
(
rescaler
-
>
src_y
>
=
rescaler
-
>
src_height
)
;
}
static
WEBP_INLINE
int
WebPRescalerOutputDone
(
const
WebPRescaler
*
const
rescaler
)
{
return
(
rescaler
-
>
dst_y
>
=
rescaler
-
>
dst_height
)
;
}
static
WEBP_INLINE
int
WebPRescalerHasPendingOutput
(
const
WebPRescaler
*
const
rescaler
)
{
return
!
WebPRescalerOutputDone
(
rescaler
)
&
&
(
rescaler
-
>
y_accum
<
=
0
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
