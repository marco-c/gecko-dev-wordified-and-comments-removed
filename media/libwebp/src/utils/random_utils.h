#
ifndef
WEBP_UTILS_RANDOM_UTILS_H_
#
define
WEBP_UTILS_RANDOM_UTILS_H_
#
include
<
assert
.
h
>
#
include
"
src
/
webp
/
types
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
VP8_RANDOM_DITHER_FIX
8
/
/
fixed
-
point
precision
for
dithering
#
define
VP8_RANDOM_TABLE_SIZE
55
typedef
struct
{
int
index1
index2
;
uint32_t
tab
[
VP8_RANDOM_TABLE_SIZE
]
;
int
amp
;
}
VP8Random
;
void
VP8InitRandom
(
VP8Random
*
const
rg
float
dithering
)
;
static
WEBP_INLINE
int
VP8RandomBits2
(
VP8Random
*
const
rg
int
num_bits
int
amp
)
{
int
diff
;
assert
(
num_bits
+
VP8_RANDOM_DITHER_FIX
<
=
31
)
;
diff
=
rg
-
>
tab
[
rg
-
>
index1
]
-
rg
-
>
tab
[
rg
-
>
index2
]
;
if
(
diff
<
0
)
diff
+
=
(
1u
<
<
31
)
;
rg
-
>
tab
[
rg
-
>
index1
]
=
diff
;
if
(
+
+
rg
-
>
index1
=
=
VP8_RANDOM_TABLE_SIZE
)
rg
-
>
index1
=
0
;
if
(
+
+
rg
-
>
index2
=
=
VP8_RANDOM_TABLE_SIZE
)
rg
-
>
index2
=
0
;
diff
=
(
int
)
(
(
uint32_t
)
diff
<
<
1
)
>
>
(
32
-
num_bits
)
;
diff
=
(
diff
*
amp
)
>
>
VP8_RANDOM_DITHER_FIX
;
diff
+
=
1
<
<
(
num_bits
-
1
)
;
return
diff
;
}
static
WEBP_INLINE
int
VP8RandomBits
(
VP8Random
*
const
rg
int
num_bits
)
{
return
VP8RandomBits2
(
rg
num_bits
rg
-
>
amp
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
