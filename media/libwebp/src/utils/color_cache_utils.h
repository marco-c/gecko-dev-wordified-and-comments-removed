#
ifndef
WEBP_UTILS_COLOR_CACHE_UTILS_H_
#
define
WEBP_UTILS_COLOR_CACHE_UTILS_H_
#
include
<
assert
.
h
>
#
include
"
src
/
webp
/
types
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
struct
{
uint32_t
*
colors_
;
int
hash_shift_
;
int
hash_bits_
;
}
VP8LColorCache
;
static
const
uint64_t
kHashMul
=
0x1e35a7bdull
;
static
WEBP_INLINE
int
VP8LHashPix
(
uint32_t
argb
int
shift
)
{
return
(
int
)
(
(
(
argb
*
kHashMul
)
&
0xffffffffu
)
>
>
shift
)
;
}
static
WEBP_INLINE
uint32_t
VP8LColorCacheLookup
(
const
VP8LColorCache
*
const
cc
uint32_t
key
)
{
assert
(
(
key
>
>
cc
-
>
hash_bits_
)
=
=
0u
)
;
return
cc
-
>
colors_
[
key
]
;
}
static
WEBP_INLINE
void
VP8LColorCacheSet
(
const
VP8LColorCache
*
const
cc
uint32_t
key
uint32_t
argb
)
{
assert
(
(
key
>
>
cc
-
>
hash_bits_
)
=
=
0u
)
;
cc
-
>
colors_
[
key
]
=
argb
;
}
static
WEBP_INLINE
void
VP8LColorCacheInsert
(
const
VP8LColorCache
*
const
cc
uint32_t
argb
)
{
const
int
key
=
VP8LHashPix
(
argb
cc
-
>
hash_shift_
)
;
cc
-
>
colors_
[
key
]
=
argb
;
}
static
WEBP_INLINE
int
VP8LColorCacheGetIndex
(
const
VP8LColorCache
*
const
cc
uint32_t
argb
)
{
return
VP8LHashPix
(
argb
cc
-
>
hash_shift_
)
;
}
static
WEBP_INLINE
int
VP8LColorCacheContains
(
const
VP8LColorCache
*
const
cc
uint32_t
argb
)
{
const
int
key
=
VP8LHashPix
(
argb
cc
-
>
hash_shift_
)
;
return
(
cc
-
>
colors_
[
key
]
=
=
argb
)
?
key
:
-
1
;
}
int
VP8LColorCacheInit
(
VP8LColorCache
*
const
color_cache
int
hash_bits
)
;
void
VP8LColorCacheCopy
(
const
VP8LColorCache
*
const
src
VP8LColorCache
*
const
dst
)
;
void
VP8LColorCacheClear
(
VP8LColorCache
*
const
color_cache
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
