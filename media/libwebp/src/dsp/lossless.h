#
ifndef
WEBP_DSP_LOSSLESS_H_
#
define
WEBP_DSP_LOSSLESS_H_
#
include
"
src
/
webp
/
types
.
h
"
#
include
"
src
/
webp
/
decode
.
h
"
#
include
"
src
/
enc
/
histogram_enc
.
h
"
#
include
"
src
/
utils
/
utils
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
uint32_t
(
*
VP8LPredictorFunc
)
(
uint32_t
left
const
uint32_t
*
const
top
)
;
extern
VP8LPredictorFunc
VP8LPredictors
[
16
]
;
extern
VP8LPredictorFunc
VP8LPredictors_C
[
16
]
;
typedef
void
(
*
VP8LPredictorAddSubFunc
)
(
const
uint32_t
*
in
const
uint32_t
*
upper
int
num_pixels
uint32_t
*
out
)
;
extern
VP8LPredictorAddSubFunc
VP8LPredictorsAdd
[
16
]
;
extern
VP8LPredictorAddSubFunc
VP8LPredictorsAdd_C
[
16
]
;
typedef
void
(
*
VP8LProcessDecBlueAndRedFunc
)
(
const
uint32_t
*
src
int
num_pixels
uint32_t
*
dst
)
;
extern
VP8LProcessDecBlueAndRedFunc
VP8LAddGreenToBlueAndRed
;
typedef
struct
{
uint8_t
green_to_red_
;
uint8_t
green_to_blue_
;
uint8_t
red_to_blue_
;
}
VP8LMultipliers
;
typedef
void
(
*
VP8LTransformColorInverseFunc
)
(
const
VP8LMultipliers
*
const
m
const
uint32_t
*
src
int
num_pixels
uint32_t
*
dst
)
;
extern
VP8LTransformColorInverseFunc
VP8LTransformColorInverse
;
struct
VP8LTransform
;
void
VP8LInverseTransform
(
const
struct
VP8LTransform
*
const
transform
int
row_start
int
row_end
const
uint32_t
*
const
in
uint32_t
*
const
out
)
;
typedef
void
(
*
VP8LConvertFunc
)
(
const
uint32_t
*
src
int
num_pixels
uint8_t
*
dst
)
;
extern
VP8LConvertFunc
VP8LConvertBGRAToRGB
;
extern
VP8LConvertFunc
VP8LConvertBGRAToRGBA
;
extern
VP8LConvertFunc
VP8LConvertBGRAToRGBA4444
;
extern
VP8LConvertFunc
VP8LConvertBGRAToRGB565
;
extern
VP8LConvertFunc
VP8LConvertBGRAToBGR
;
void
VP8LConvertFromBGRA
(
const
uint32_t
*
const
in_data
int
num_pixels
WEBP_CSP_MODE
out_colorspace
uint8_t
*
const
rgba
)
;
typedef
void
(
*
VP8LMapARGBFunc
)
(
const
uint32_t
*
src
const
uint32_t
*
const
color_map
uint32_t
*
dst
int
y_start
int
y_end
int
width
)
;
typedef
void
(
*
VP8LMapAlphaFunc
)
(
const
uint8_t
*
src
const
uint32_t
*
const
color_map
uint8_t
*
dst
int
y_start
int
y_end
int
width
)
;
extern
VP8LMapARGBFunc
VP8LMapColor32b
;
extern
VP8LMapAlphaFunc
VP8LMapColor8b
;
void
VP8LColorIndexInverseTransformAlpha
(
const
struct
VP8LTransform
*
const
transform
int
y_start
int
y_end
const
uint8_t
*
src
uint8_t
*
dst
)
;
void
VP8LTransformColorInverse_C
(
const
VP8LMultipliers
*
const
m
const
uint32_t
*
src
int
num_pixels
uint32_t
*
dst
)
;
void
VP8LConvertBGRAToRGB_C
(
const
uint32_t
*
src
int
num_pixels
uint8_t
*
dst
)
;
void
VP8LConvertBGRAToRGBA_C
(
const
uint32_t
*
src
int
num_pixels
uint8_t
*
dst
)
;
void
VP8LConvertBGRAToRGBA4444_C
(
const
uint32_t
*
src
int
num_pixels
uint8_t
*
dst
)
;
void
VP8LConvertBGRAToRGB565_C
(
const
uint32_t
*
src
int
num_pixels
uint8_t
*
dst
)
;
void
VP8LConvertBGRAToBGR_C
(
const
uint32_t
*
src
int
num_pixels
uint8_t
*
dst
)
;
void
VP8LAddGreenToBlueAndRed_C
(
const
uint32_t
*
src
int
num_pixels
uint32_t
*
dst
)
;
void
VP8LDspInit
(
void
)
;
typedef
void
(
*
VP8LProcessEncBlueAndRedFunc
)
(
uint32_t
*
dst
int
num_pixels
)
;
extern
VP8LProcessEncBlueAndRedFunc
VP8LSubtractGreenFromBlueAndRed
;
typedef
void
(
*
VP8LTransformColorFunc
)
(
const
VP8LMultipliers
*
const
m
uint32_t
*
dst
int
num_pixels
)
;
extern
VP8LTransformColorFunc
VP8LTransformColor
;
typedef
void
(
*
VP8LCollectColorBlueTransformsFunc
)
(
const
uint32_t
*
argb
int
stride
int
tile_width
int
tile_height
int
green_to_blue
int
red_to_blue
int
histo
[
]
)
;
extern
VP8LCollectColorBlueTransformsFunc
VP8LCollectColorBlueTransforms
;
typedef
void
(
*
VP8LCollectColorRedTransformsFunc
)
(
const
uint32_t
*
argb
int
stride
int
tile_width
int
tile_height
int
green_to_red
int
histo
[
]
)
;
extern
VP8LCollectColorRedTransformsFunc
VP8LCollectColorRedTransforms
;
void
VP8LTransformColor_C
(
const
VP8LMultipliers
*
const
m
uint32_t
*
data
int
num_pixels
)
;
void
VP8LSubtractGreenFromBlueAndRed_C
(
uint32_t
*
argb_data
int
num_pixels
)
;
void
VP8LCollectColorRedTransforms_C
(
const
uint32_t
*
argb
int
stride
int
tile_width
int
tile_height
int
green_to_red
int
histo
[
]
)
;
void
VP8LCollectColorBlueTransforms_C
(
const
uint32_t
*
argb
int
stride
int
tile_width
int
tile_height
int
green_to_blue
int
red_to_blue
int
histo
[
]
)
;
extern
VP8LPredictorAddSubFunc
VP8LPredictorsSub
[
16
]
;
extern
VP8LPredictorAddSubFunc
VP8LPredictorsSub_C
[
16
]
;
typedef
double
(
*
VP8LCostFunc
)
(
const
uint32_t
*
population
int
length
)
;
typedef
double
(
*
VP8LCostCombinedFunc
)
(
const
uint32_t
*
X
const
uint32_t
*
Y
int
length
)
;
typedef
float
(
*
VP8LCombinedShannonEntropyFunc
)
(
const
int
X
[
256
]
const
int
Y
[
256
]
)
;
extern
VP8LCostFunc
VP8LExtraCost
;
extern
VP8LCostCombinedFunc
VP8LExtraCostCombined
;
extern
VP8LCombinedShannonEntropyFunc
VP8LCombinedShannonEntropy
;
typedef
struct
{
int
counts
[
2
]
;
int
streaks
[
2
]
[
2
]
;
}
VP8LStreaks
;
typedef
struct
{
double
entropy
;
uint32_t
sum
;
int
nonzeros
;
uint32_t
max_val
;
uint32_t
nonzero_code
;
}
VP8LBitEntropy
;
void
VP8LBitEntropyInit
(
VP8LBitEntropy
*
const
entropy
)
;
typedef
void
(
*
VP8LGetCombinedEntropyUnrefinedFunc
)
(
const
uint32_t
X
[
]
const
uint32_t
Y
[
]
int
length
VP8LBitEntropy
*
const
bit_entropy
VP8LStreaks
*
const
stats
)
;
extern
VP8LGetCombinedEntropyUnrefinedFunc
VP8LGetCombinedEntropyUnrefined
;
typedef
void
(
*
VP8LGetEntropyUnrefinedFunc
)
(
const
uint32_t
X
[
]
int
length
VP8LBitEntropy
*
const
bit_entropy
VP8LStreaks
*
const
stats
)
;
extern
VP8LGetEntropyUnrefinedFunc
VP8LGetEntropyUnrefined
;
void
VP8LBitsEntropyUnrefined
(
const
uint32_t
*
const
array
int
n
VP8LBitEntropy
*
const
entropy
)
;
typedef
void
(
*
VP8LHistogramAddFunc
)
(
const
VP8LHistogram
*
const
a
const
VP8LHistogram
*
const
b
VP8LHistogram
*
const
out
)
;
extern
VP8LHistogramAddFunc
VP8LHistogramAdd
;
typedef
int
(
*
VP8LVectorMismatchFunc
)
(
const
uint32_t
*
const
array1
const
uint32_t
*
const
array2
int
length
)
;
extern
VP8LVectorMismatchFunc
VP8LVectorMismatch
;
typedef
void
(
*
VP8LBundleColorMapFunc
)
(
const
uint8_t
*
const
row
int
width
int
xbits
uint32_t
*
dst
)
;
extern
VP8LBundleColorMapFunc
VP8LBundleColorMap
;
void
VP8LBundleColorMap_C
(
const
uint8_t
*
const
row
int
width
int
xbits
uint32_t
*
dst
)
;
void
VP8LEncDspInit
(
void
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
