#
ifndef
WEBP_DSP_COMMON_SSE41_H_
#
define
WEBP_DSP_COMMON_SSE41_H_
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
if
defined
(
WEBP_USE_SSE41
)
#
include
<
smmintrin
.
h
>
#
define
WEBP_SSE41_SHUFF
(
OUT
IN0
IN1
)
\
OUT
#
#
0
=
_mm_shuffle_epi8
(
*
IN0
shuff0
)
;
\
OUT
#
#
1
=
_mm_shuffle_epi8
(
*
IN0
shuff1
)
;
\
OUT
#
#
2
=
_mm_shuffle_epi8
(
*
IN0
shuff2
)
;
\
OUT
#
#
3
=
_mm_shuffle_epi8
(
*
IN1
shuff0
)
;
\
OUT
#
#
4
=
_mm_shuffle_epi8
(
*
IN1
shuff1
)
;
\
OUT
#
#
5
=
_mm_shuffle_epi8
(
*
IN1
shuff2
)
;
static
WEBP_INLINE
void
VP8PlanarTo24b_SSE41
(
__m128i
*
const
in0
__m128i
*
const
in1
__m128i
*
const
in2
__m128i
*
const
in3
__m128i
*
const
in4
__m128i
*
const
in5
)
{
__m128i
R0
R1
R2
R3
R4
R5
;
__m128i
G0
G1
G2
G3
G4
G5
;
__m128i
B0
B1
B2
B3
B4
B5
;
{
const
__m128i
shuff0
=
_mm_set_epi8
(
5
-
1
-
1
4
-
1
-
1
3
-
1
-
1
2
-
1
-
1
1
-
1
-
1
0
)
;
const
__m128i
shuff1
=
_mm_set_epi8
(
-
1
10
-
1
-
1
9
-
1
-
1
8
-
1
-
1
7
-
1
-
1
6
-
1
-
1
)
;
const
__m128i
shuff2
=
_mm_set_epi8
(
-
1
-
1
15
-
1
-
1
14
-
1
-
1
13
-
1
-
1
12
-
1
-
1
11
-
1
)
;
WEBP_SSE41_SHUFF
(
R
in0
in1
)
}
{
const
__m128i
shuff0
=
_mm_set_epi8
(
-
1
-
1
4
-
1
-
1
3
-
1
-
1
2
-
1
-
1
1
-
1
-
1
0
-
1
)
;
const
__m128i
shuff1
=
_mm_set_epi8
(
10
-
1
-
1
9
-
1
-
1
8
-
1
-
1
7
-
1
-
1
6
-
1
-
1
5
)
;
const
__m128i
shuff2
=
_mm_set_epi8
(
-
1
15
-
1
-
1
14
-
1
-
1
13
-
1
-
1
12
-
1
-
1
11
-
1
-
1
)
;
WEBP_SSE41_SHUFF
(
G
in2
in3
)
}
{
const
__m128i
shuff0
=
_mm_set_epi8
(
-
1
4
-
1
-
1
3
-
1
-
1
2
-
1
-
1
1
-
1
-
1
0
-
1
-
1
)
;
const
__m128i
shuff1
=
_mm_set_epi8
(
-
1
-
1
9
-
1
-
1
8
-
1
-
1
7
-
1
-
1
6
-
1
-
1
5
-
1
)
;
const
__m128i
shuff2
=
_mm_set_epi8
(
15
-
1
-
1
14
-
1
-
1
13
-
1
-
1
12
-
1
-
1
11
-
1
-
1
10
)
;
WEBP_SSE41_SHUFF
(
B
in4
in5
)
}
{
const
__m128i
RG0
=
_mm_or_si128
(
R0
G0
)
;
const
__m128i
RG1
=
_mm_or_si128
(
R1
G1
)
;
const
__m128i
RG2
=
_mm_or_si128
(
R2
G2
)
;
const
__m128i
RG3
=
_mm_or_si128
(
R3
G3
)
;
const
__m128i
RG4
=
_mm_or_si128
(
R4
G4
)
;
const
__m128i
RG5
=
_mm_or_si128
(
R5
G5
)
;
*
in0
=
_mm_or_si128
(
RG0
B0
)
;
*
in1
=
_mm_or_si128
(
RG1
B1
)
;
*
in2
=
_mm_or_si128
(
RG2
B2
)
;
*
in3
=
_mm_or_si128
(
RG3
B3
)
;
*
in4
=
_mm_or_si128
(
RG4
B4
)
;
*
in5
=
_mm_or_si128
(
RG5
B5
)
;
}
}
#
undef
WEBP_SSE41_SHUFF
static
WEBP_INLINE
void
VP8L32bToPlanar_SSE41
(
__m128i
*
const
in0
__m128i
*
const
in1
__m128i
*
const
in2
__m128i
*
const
in3
)
{
const
__m128i
shuff0
=
_mm_set_epi8
(
15
11
7
3
14
10
6
2
13
9
5
1
12
8
4
0
)
;
const
__m128i
A0
=
_mm_shuffle_epi8
(
*
in0
shuff0
)
;
const
__m128i
A1
=
_mm_shuffle_epi8
(
*
in1
shuff0
)
;
const
__m128i
A2
=
_mm_shuffle_epi8
(
*
in2
shuff0
)
;
const
__m128i
A3
=
_mm_shuffle_epi8
(
*
in3
shuff0
)
;
const
__m128i
B0
=
_mm_unpacklo_epi32
(
A0
A1
)
;
const
__m128i
B1
=
_mm_unpackhi_epi32
(
A0
A1
)
;
const
__m128i
B2
=
_mm_unpacklo_epi32
(
A2
A3
)
;
const
__m128i
B3
=
_mm_unpackhi_epi32
(
A2
A3
)
;
*
in3
=
_mm_unpacklo_epi64
(
B0
B2
)
;
*
in2
=
_mm_unpackhi_epi64
(
B0
B2
)
;
*
in1
=
_mm_unpacklo_epi64
(
B1
B3
)
;
*
in0
=
_mm_unpackhi_epi64
(
B1
B3
)
;
}
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
