#
ifndef
WEBP_DSP_DSP_H_
#
define
WEBP_DSP_DSP_H_
#
ifdef
HAVE_CONFIG_H
#
include
"
src
/
webp
/
config
.
h
"
#
endif
#
include
"
src
/
dsp
/
cpu
.
h
"
#
include
"
src
/
webp
/
types
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
BPS
32
/
/
this
is
the
common
stride
for
enc
/
dec
#
if
defined
(
__GNUC__
)
#
define
WEBP_RESTRICT
__restrict__
#
elif
defined
(
_MSC_VER
)
#
define
WEBP_RESTRICT
__restrict
#
else
#
define
WEBP_RESTRICT
#
endif
#
define
WEBP_DSP_INIT_STUB
(
func
)
\
extern
void
func
(
void
)
;
\
void
func
(
void
)
{
}
typedef
void
(
*
VP8Idct
)
(
const
uint8_t
*
WEBP_RESTRICT
ref
const
int16_t
*
WEBP_RESTRICT
in
uint8_t
*
WEBP_RESTRICT
dst
int
do_two
)
;
typedef
void
(
*
VP8Fdct
)
(
const
uint8_t
*
WEBP_RESTRICT
src
const
uint8_t
*
WEBP_RESTRICT
ref
int16_t
*
WEBP_RESTRICT
out
)
;
typedef
void
(
*
VP8WHT
)
(
const
int16_t
*
WEBP_RESTRICT
in
int16_t
*
WEBP_RESTRICT
out
)
;
extern
VP8Idct
VP8ITransform
;
extern
VP8Fdct
VP8FTransform
;
extern
VP8Fdct
VP8FTransform2
;
extern
VP8WHT
VP8FTransformWHT
;
typedef
void
(
*
VP8IntraPreds
)
(
uint8_t
*
WEBP_RESTRICT
dst
const
uint8_t
*
WEBP_RESTRICT
left
const
uint8_t
*
WEBP_RESTRICT
top
)
;
typedef
void
(
*
VP8Intra4Preds
)
(
uint8_t
*
WEBP_RESTRICT
dst
const
uint8_t
*
WEBP_RESTRICT
top
)
;
extern
VP8Intra4Preds
VP8EncPredLuma4
;
extern
VP8IntraPreds
VP8EncPredLuma16
;
extern
VP8IntraPreds
VP8EncPredChroma8
;
typedef
int
(
*
VP8Metric
)
(
const
uint8_t
*
WEBP_RESTRICT
pix
const
uint8_t
*
WEBP_RESTRICT
ref
)
;
extern
VP8Metric
VP8SSE16x16
VP8SSE16x8
VP8SSE8x8
VP8SSE4x4
;
typedef
int
(
*
VP8WMetric
)
(
const
uint8_t
*
WEBP_RESTRICT
pix
const
uint8_t
*
WEBP_RESTRICT
ref
const
uint16_t
*
WEBP_RESTRICT
const
weights
)
;
extern
VP8WMetric
VP8TDisto4x4
VP8TDisto16x16
;
typedef
void
(
*
VP8MeanMetric
)
(
const
uint8_t
*
WEBP_RESTRICT
ref
uint32_t
dc
[
4
]
)
;
extern
VP8MeanMetric
VP8Mean16x4
;
typedef
void
(
*
VP8BlockCopy
)
(
const
uint8_t
*
WEBP_RESTRICT
src
uint8_t
*
WEBP_RESTRICT
dst
)
;
extern
VP8BlockCopy
VP8Copy4x4
;
extern
VP8BlockCopy
VP8Copy16x8
;
struct
VP8Matrix
;
typedef
int
(
*
VP8QuantizeBlock
)
(
int16_t
in
[
16
]
int16_t
out
[
16
]
const
struct
VP8Matrix
*
WEBP_RESTRICT
const
mtx
)
;
typedef
int
(
*
VP8Quantize2Blocks
)
(
int16_t
in
[
32
]
int16_t
out
[
32
]
const
struct
VP8Matrix
*
WEBP_RESTRICT
const
mtx
)
;
extern
VP8QuantizeBlock
VP8EncQuantizeBlock
;
extern
VP8Quantize2Blocks
VP8EncQuantize2Blocks
;
typedef
int
(
*
VP8QuantizeBlockWHT
)
(
int16_t
in
[
16
]
int16_t
out
[
16
]
const
struct
VP8Matrix
*
WEBP_RESTRICT
const
mtx
)
;
extern
VP8QuantizeBlockWHT
VP8EncQuantizeBlockWHT
;
extern
const
int
VP8DspScan
[
16
+
4
+
4
]
;
#
define
MAX_COEFF_THRESH
31
/
/
size
of
histogram
used
by
CollectHistogram
.
typedef
struct
{
int
max_value
;
int
last_non_zero
;
}
VP8Histogram
;
typedef
void
(
*
VP8CHisto
)
(
const
uint8_t
*
WEBP_RESTRICT
ref
const
uint8_t
*
WEBP_RESTRICT
pred
int
start_block
int
end_block
VP8Histogram
*
WEBP_RESTRICT
const
histo
)
;
extern
VP8CHisto
VP8CollectHistogram
;
void
VP8SetHistogramData
(
const
int
distribution
[
MAX_COEFF_THRESH
+
1
]
VP8Histogram
*
const
histo
)
;
void
VP8EncDspInit
(
void
)
;
extern
const
uint16_t
VP8EntropyCost
[
256
]
;
extern
const
uint16_t
VP8LevelFixedCosts
[
2047
+
1
]
;
extern
const
uint8_t
VP8EncBands
[
16
+
1
]
;
struct
VP8Residual
;
typedef
void
(
*
VP8SetResidualCoeffsFunc
)
(
const
int16_t
*
WEBP_RESTRICT
const
coeffs
struct
VP8Residual
*
WEBP_RESTRICT
const
res
)
;
extern
VP8SetResidualCoeffsFunc
VP8SetResidualCoeffs
;
typedef
int
(
*
VP8GetResidualCostFunc
)
(
int
ctx0
const
struct
VP8Residual
*
const
res
)
;
extern
VP8GetResidualCostFunc
VP8GetResidualCost
;
void
VP8EncDspCostInit
(
void
)
;
typedef
struct
{
uint32_t
w
;
uint32_t
xm
ym
;
uint32_t
xxm
xym
yym
;
}
VP8DistoStats
;
double
VP8SSIMFromStats
(
const
VP8DistoStats
*
const
stats
)
;
double
VP8SSIMFromStatsClipped
(
const
VP8DistoStats
*
const
stats
)
;
#
define
VP8_SSIM_KERNEL
3
/
/
total
size
of
the
kernel
:
2
*
VP8_SSIM_KERNEL
+
1
typedef
double
(
*
VP8SSIMGetClippedFunc
)
(
const
uint8_t
*
src1
int
stride1
const
uint8_t
*
src2
int
stride2
int
xo
int
yo
int
W
int
H
)
;
#
if
!
defined
(
WEBP_REDUCE_SIZE
)
typedef
double
(
*
VP8SSIMGetFunc
)
(
const
uint8_t
*
src1
int
stride1
const
uint8_t
*
src2
int
stride2
)
;
extern
VP8SSIMGetFunc
VP8SSIMGet
;
extern
VP8SSIMGetClippedFunc
VP8SSIMGetClipped
;
#
endif
#
if
!
defined
(
WEBP_DISABLE_STATS
)
typedef
uint32_t
(
*
VP8AccumulateSSEFunc
)
(
const
uint8_t
*
src1
const
uint8_t
*
src2
int
len
)
;
extern
VP8AccumulateSSEFunc
VP8AccumulateSSE
;
#
endif
void
VP8SSIMDspInit
(
void
)
;
typedef
void
(
*
VP8DecIdct
)
(
const
int16_t
*
WEBP_RESTRICT
coeffs
uint8_t
*
WEBP_RESTRICT
dst
)
;
typedef
void
(
*
VP8DecIdct2
)
(
const
int16_t
*
WEBP_RESTRICT
coeffs
uint8_t
*
WEBP_RESTRICT
dst
int
do_two
)
;
extern
VP8DecIdct2
VP8Transform
;
extern
VP8DecIdct
VP8TransformAC3
;
extern
VP8DecIdct
VP8TransformUV
;
extern
VP8DecIdct
VP8TransformDC
;
extern
VP8DecIdct
VP8TransformDCUV
;
extern
VP8WHT
VP8TransformWHT
;
#
define
WEBP_TRANSFORM_AC3_C1
20091
#
define
WEBP_TRANSFORM_AC3_C2
35468
#
define
WEBP_TRANSFORM_AC3_MUL1
(
a
)
(
(
(
(
a
)
*
WEBP_TRANSFORM_AC3_C1
)
>
>
16
)
+
(
a
)
)
#
define
WEBP_TRANSFORM_AC3_MUL2
(
a
)
(
(
(
a
)
*
WEBP_TRANSFORM_AC3_C2
)
>
>
16
)
typedef
void
(
*
VP8PredFunc
)
(
uint8_t
*
dst
)
;
extern
VP8PredFunc
VP8PredLuma16
[
]
;
extern
VP8PredFunc
VP8PredChroma8
[
]
;
extern
VP8PredFunc
VP8PredLuma4
[
]
;
extern
const
int8_t
*
const
VP8ksclip1
;
extern
const
int8_t
*
const
VP8ksclip2
;
extern
const
uint8_t
*
const
VP8kclip1
;
extern
const
uint8_t
*
const
VP8kabs0
;
void
VP8InitClipTables
(
void
)
;
typedef
void
(
*
VP8SimpleFilterFunc
)
(
uint8_t
*
p
int
stride
int
thresh
)
;
extern
VP8SimpleFilterFunc
VP8SimpleVFilter16
;
extern
VP8SimpleFilterFunc
VP8SimpleHFilter16
;
extern
VP8SimpleFilterFunc
VP8SimpleVFilter16i
;
extern
VP8SimpleFilterFunc
VP8SimpleHFilter16i
;
typedef
void
(
*
VP8LumaFilterFunc
)
(
uint8_t
*
luma
int
stride
int
thresh
int
ithresh
int
hev_t
)
;
typedef
void
(
*
VP8ChromaFilterFunc
)
(
uint8_t
*
WEBP_RESTRICT
u
uint8_t
*
WEBP_RESTRICT
v
int
stride
int
thresh
int
ithresh
int
hev_t
)
;
extern
VP8LumaFilterFunc
VP8VFilter16
;
extern
VP8LumaFilterFunc
VP8HFilter16
;
extern
VP8ChromaFilterFunc
VP8VFilter8
;
extern
VP8ChromaFilterFunc
VP8HFilter8
;
extern
VP8LumaFilterFunc
VP8VFilter16i
;
extern
VP8LumaFilterFunc
VP8HFilter16i
;
extern
VP8ChromaFilterFunc
VP8VFilter8i
;
extern
VP8ChromaFilterFunc
VP8HFilter8i
;
#
define
VP8_DITHER_DESCALE
4
#
define
VP8_DITHER_DESCALE_ROUNDER
(
1
<
<
(
VP8_DITHER_DESCALE
-
1
)
)
#
define
VP8_DITHER_AMP_BITS
7
#
define
VP8_DITHER_AMP_CENTER
(
1
<
<
VP8_DITHER_AMP_BITS
)
extern
void
(
*
VP8DitherCombine8x8
)
(
const
uint8_t
*
WEBP_RESTRICT
dither
uint8_t
*
WEBP_RESTRICT
dst
int
dst_stride
)
;
void
VP8DspInit
(
void
)
;
#
define
FANCY_UPSAMPLING
typedef
void
(
*
WebPUpsampleLinePairFunc
)
(
const
uint8_t
*
WEBP_RESTRICT
top_y
const
uint8_t
*
WEBP_RESTRICT
bottom_y
const
uint8_t
*
WEBP_RESTRICT
top_u
const
uint8_t
*
WEBP_RESTRICT
top_v
const
uint8_t
*
WEBP_RESTRICT
cur_u
const
uint8_t
*
WEBP_RESTRICT
cur_v
uint8_t
*
WEBP_RESTRICT
top_dst
uint8_t
*
WEBP_RESTRICT
bottom_dst
int
len
)
;
#
ifdef
FANCY_UPSAMPLING
extern
WebPUpsampleLinePairFunc
WebPUpsamplers
[
]
;
#
endif
typedef
void
(
*
WebPSamplerRowFunc
)
(
const
uint8_t
*
WEBP_RESTRICT
y
const
uint8_t
*
WEBP_RESTRICT
u
const
uint8_t
*
WEBP_RESTRICT
v
uint8_t
*
WEBP_RESTRICT
dst
int
len
)
;
void
WebPSamplerProcessPlane
(
const
uint8_t
*
WEBP_RESTRICT
y
int
y_stride
const
uint8_t
*
WEBP_RESTRICT
u
const
uint8_t
*
WEBP_RESTRICT
v
int
uv_stride
uint8_t
*
WEBP_RESTRICT
dst
int
dst_stride
int
width
int
height
WebPSamplerRowFunc
func
)
;
extern
WebPSamplerRowFunc
WebPSamplers
[
]
;
WebPUpsampleLinePairFunc
WebPGetLinePairConverter
(
int
alpha_is_last
)
;
typedef
void
(
*
WebPYUV444Converter
)
(
const
uint8_t
*
WEBP_RESTRICT
y
const
uint8_t
*
WEBP_RESTRICT
u
const
uint8_t
*
WEBP_RESTRICT
v
uint8_t
*
WEBP_RESTRICT
dst
int
len
)
;
extern
WebPYUV444Converter
WebPYUV444Converters
[
]
;
void
WebPInitUpsamplers
(
void
)
;
void
WebPInitSamplers
(
void
)
;
void
WebPInitYUV444Converters
(
void
)
;
extern
void
(
*
WebPConvertARGBToY
)
(
const
uint32_t
*
WEBP_RESTRICT
argb
uint8_t
*
WEBP_RESTRICT
y
int
width
)
;
extern
void
(
*
WebPConvertARGBToUV
)
(
const
uint32_t
*
WEBP_RESTRICT
argb
uint8_t
*
WEBP_RESTRICT
u
uint8_t
*
WEBP_RESTRICT
v
int
src_width
int
do_store
)
;
extern
void
(
*
WebPConvertRGBA32ToUV
)
(
const
uint16_t
*
WEBP_RESTRICT
rgb
uint8_t
*
WEBP_RESTRICT
u
uint8_t
*
WEBP_RESTRICT
v
int
width
)
;
extern
void
(
*
WebPConvertRGB24ToY
)
(
const
uint8_t
*
WEBP_RESTRICT
rgb
uint8_t
*
WEBP_RESTRICT
y
int
width
)
;
extern
void
(
*
WebPConvertBGR24ToY
)
(
const
uint8_t
*
WEBP_RESTRICT
bgr
uint8_t
*
WEBP_RESTRICT
y
int
width
)
;
extern
void
WebPConvertARGBToUV_C
(
const
uint32_t
*
WEBP_RESTRICT
argb
uint8_t
*
WEBP_RESTRICT
u
uint8_t
*
WEBP_RESTRICT
v
int
src_width
int
do_store
)
;
extern
void
WebPConvertRGBA32ToUV_C
(
const
uint16_t
*
WEBP_RESTRICT
rgb
uint8_t
*
WEBP_RESTRICT
u
uint8_t
*
WEBP_RESTRICT
v
int
width
)
;
void
WebPInitConvertARGBToYUV
(
void
)
;
struct
WebPRescaler
;
typedef
void
(
*
WebPRescalerImportRowFunc
)
(
struct
WebPRescaler
*
WEBP_RESTRICT
const
wrk
const
uint8_t
*
WEBP_RESTRICT
src
)
;
extern
WebPRescalerImportRowFunc
WebPRescalerImportRowExpand
;
extern
WebPRescalerImportRowFunc
WebPRescalerImportRowShrink
;
typedef
void
(
*
WebPRescalerExportRowFunc
)
(
struct
WebPRescaler
*
const
wrk
)
;
extern
WebPRescalerExportRowFunc
WebPRescalerExportRowExpand
;
extern
WebPRescalerExportRowFunc
WebPRescalerExportRowShrink
;
extern
void
WebPRescalerImportRowExpand_C
(
struct
WebPRescaler
*
WEBP_RESTRICT
const
wrk
const
uint8_t
*
WEBP_RESTRICT
src
)
;
extern
void
WebPRescalerImportRowShrink_C
(
struct
WebPRescaler
*
WEBP_RESTRICT
const
wrk
const
uint8_t
*
WEBP_RESTRICT
src
)
;
extern
void
WebPRescalerExportRowExpand_C
(
struct
WebPRescaler
*
const
wrk
)
;
extern
void
WebPRescalerExportRowShrink_C
(
struct
WebPRescaler
*
const
wrk
)
;
extern
void
WebPRescalerImportRow
(
struct
WebPRescaler
*
WEBP_RESTRICT
const
wrk
const
uint8_t
*
WEBP_RESTRICT
src
)
;
extern
void
WebPRescalerExportRow
(
struct
WebPRescaler
*
const
wrk
)
;
void
WebPRescalerDspInit
(
void
)
;
extern
void
(
*
WebPApplyAlphaMultiply
)
(
uint8_t
*
rgba
int
alpha_first
int
w
int
h
int
stride
)
;
extern
void
(
*
WebPApplyAlphaMultiply4444
)
(
uint8_t
*
rgba4444
int
w
int
h
int
stride
)
;
extern
int
(
*
WebPDispatchAlpha
)
(
const
uint8_t
*
WEBP_RESTRICT
alpha
int
alpha_stride
int
width
int
height
uint8_t
*
WEBP_RESTRICT
dst
int
dst_stride
)
;
extern
void
(
*
WebPDispatchAlphaToGreen
)
(
const
uint8_t
*
WEBP_RESTRICT
alpha
int
alpha_stride
int
width
int
height
uint32_t
*
WEBP_RESTRICT
dst
int
dst_stride
)
;
extern
int
(
*
WebPExtractAlpha
)
(
const
uint8_t
*
WEBP_RESTRICT
argb
int
argb_stride
int
width
int
height
uint8_t
*
WEBP_RESTRICT
alpha
int
alpha_stride
)
;
extern
void
(
*
WebPExtractGreen
)
(
const
uint32_t
*
WEBP_RESTRICT
argb
uint8_t
*
WEBP_RESTRICT
alpha
int
size
)
;
extern
void
(
*
WebPMultARGBRow
)
(
uint32_t
*
const
ptr
int
width
int
inverse
)
;
void
WebPMultARGBRows
(
uint8_t
*
ptr
int
stride
int
width
int
num_rows
int
inverse
)
;
extern
void
(
*
WebPMultRow
)
(
uint8_t
*
WEBP_RESTRICT
const
ptr
const
uint8_t
*
WEBP_RESTRICT
const
alpha
int
width
int
inverse
)
;
void
WebPMultRows
(
uint8_t
*
WEBP_RESTRICT
ptr
int
stride
const
uint8_t
*
WEBP_RESTRICT
alpha
int
alpha_stride
int
width
int
num_rows
int
inverse
)
;
void
WebPMultRow_C
(
uint8_t
*
WEBP_RESTRICT
const
ptr
const
uint8_t
*
WEBP_RESTRICT
const
alpha
int
width
int
inverse
)
;
void
WebPMultARGBRow_C
(
uint32_t
*
const
ptr
int
width
int
inverse
)
;
#
ifdef
WORDS_BIGENDIAN
extern
void
(
*
WebPPackARGB
)
(
const
uint8_t
*
WEBP_RESTRICT
a
const
uint8_t
*
WEBP_RESTRICT
r
const
uint8_t
*
WEBP_RESTRICT
g
const
uint8_t
*
WEBP_RESTRICT
b
int
len
uint32_t
*
WEBP_RESTRICT
out
)
;
#
endif
extern
void
(
*
WebPPackRGB
)
(
const
uint8_t
*
WEBP_RESTRICT
r
const
uint8_t
*
WEBP_RESTRICT
g
const
uint8_t
*
WEBP_RESTRICT
b
int
len
int
step
uint32_t
*
WEBP_RESTRICT
out
)
;
extern
int
(
*
WebPHasAlpha8b
)
(
const
uint8_t
*
src
int
length
)
;
extern
int
(
*
WebPHasAlpha32b
)
(
const
uint8_t
*
src
int
length
)
;
extern
void
(
*
WebPAlphaReplace
)
(
uint32_t
*
src
int
length
uint32_t
color
)
;
void
WebPInitAlphaProcessing
(
void
)
;
typedef
enum
{
WEBP_FILTER_NONE
=
0
WEBP_FILTER_HORIZONTAL
WEBP_FILTER_VERTICAL
WEBP_FILTER_GRADIENT
WEBP_FILTER_LAST
=
WEBP_FILTER_GRADIENT
+
1
WEBP_FILTER_BEST
WEBP_FILTER_FAST
}
WEBP_FILTER_TYPE
;
typedef
void
(
*
WebPFilterFunc
)
(
const
uint8_t
*
WEBP_RESTRICT
in
int
width
int
height
int
stride
uint8_t
*
WEBP_RESTRICT
out
)
;
typedef
void
(
*
WebPUnfilterFunc
)
(
const
uint8_t
*
prev_line
const
uint8_t
*
preds
uint8_t
*
cur_line
int
width
)
;
extern
WebPFilterFunc
WebPFilters
[
WEBP_FILTER_LAST
]
;
extern
WebPUnfilterFunc
WebPUnfilters
[
WEBP_FILTER_LAST
]
;
void
VP8FiltersInit
(
void
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
