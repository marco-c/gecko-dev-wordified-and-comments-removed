#
ifndef
WEBP_DSP_LOSSLESS_COMMON_H_
#
define
WEBP_DSP_LOSSLESS_COMMON_H_
#
include
"
src
/
webp
/
types
.
h
"
#
include
"
src
/
utils
/
utils
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
static
WEBP_INLINE
uint32_t
VP8GetARGBIndex
(
uint32_t
idx
)
{
return
(
idx
>
>
8
)
&
0xff
;
}
static
WEBP_INLINE
uint8_t
VP8GetAlphaIndex
(
uint8_t
idx
)
{
return
idx
;
}
static
WEBP_INLINE
uint32_t
VP8GetARGBValue
(
uint32_t
val
)
{
return
val
;
}
static
WEBP_INLINE
uint8_t
VP8GetAlphaValue
(
uint32_t
val
)
{
return
(
val
>
>
8
)
&
0xff
;
}
static
WEBP_INLINE
uint32_t
VP8LSubSampleSize
(
uint32_t
size
uint32_t
sampling_bits
)
{
return
(
size
+
(
1
<
<
sampling_bits
)
-
1
)
>
>
sampling_bits
;
}
static
WEBP_INLINE
int
VP8LNearLosslessBits
(
int
near_lossless_quality
)
{
return
5
-
near_lossless_quality
/
20
;
}
#
define
APPROX_LOG_WITH_CORRECTION_MAX
65536
#
define
APPROX_LOG_MAX
4096
#
define
LOG_2_RECIPROCAL
1
.
44269504088896338700465094007086
#
define
LOG_LOOKUP_IDX_MAX
256
extern
const
float
kLog2Table
[
LOG_LOOKUP_IDX_MAX
]
;
extern
const
float
kSLog2Table
[
LOG_LOOKUP_IDX_MAX
]
;
typedef
float
(
*
VP8LFastLog2SlowFunc
)
(
uint32_t
v
)
;
extern
VP8LFastLog2SlowFunc
VP8LFastLog2Slow
;
extern
VP8LFastLog2SlowFunc
VP8LFastSLog2Slow
;
static
WEBP_INLINE
float
VP8LFastLog2
(
uint32_t
v
)
{
return
(
v
<
LOG_LOOKUP_IDX_MAX
)
?
kLog2Table
[
v
]
:
VP8LFastLog2Slow
(
v
)
;
}
static
WEBP_INLINE
float
VP8LFastSLog2
(
uint32_t
v
)
{
return
(
v
<
LOG_LOOKUP_IDX_MAX
)
?
kSLog2Table
[
v
]
:
VP8LFastSLog2Slow
(
v
)
;
}
static
WEBP_INLINE
void
VP8LPrefixEncodeBitsNoLUT
(
int
distance
int
*
const
code
int
*
const
extra_bits
)
{
const
int
highest_bit
=
BitsLog2Floor
(
-
-
distance
)
;
const
int
second_highest_bit
=
(
distance
>
>
(
highest_bit
-
1
)
)
&
1
;
*
extra_bits
=
highest_bit
-
1
;
*
code
=
2
*
highest_bit
+
second_highest_bit
;
}
static
WEBP_INLINE
void
VP8LPrefixEncodeNoLUT
(
int
distance
int
*
const
code
int
*
const
extra_bits
int
*
const
extra_bits_value
)
{
const
int
highest_bit
=
BitsLog2Floor
(
-
-
distance
)
;
const
int
second_highest_bit
=
(
distance
>
>
(
highest_bit
-
1
)
)
&
1
;
*
extra_bits
=
highest_bit
-
1
;
*
extra_bits_value
=
distance
&
(
(
1
<
<
*
extra_bits
)
-
1
)
;
*
code
=
2
*
highest_bit
+
second_highest_bit
;
}
#
define
PREFIX_LOOKUP_IDX_MAX
512
typedef
struct
{
int8_t
code_
;
int8_t
extra_bits_
;
}
VP8LPrefixCode
;
extern
const
VP8LPrefixCode
kPrefixEncodeCode
[
PREFIX_LOOKUP_IDX_MAX
]
;
extern
const
uint8_t
kPrefixEncodeExtraBitsValue
[
PREFIX_LOOKUP_IDX_MAX
]
;
static
WEBP_INLINE
void
VP8LPrefixEncodeBits
(
int
distance
int
*
const
code
int
*
const
extra_bits
)
{
if
(
distance
<
PREFIX_LOOKUP_IDX_MAX
)
{
const
VP8LPrefixCode
prefix_code
=
kPrefixEncodeCode
[
distance
]
;
*
code
=
prefix_code
.
code_
;
*
extra_bits
=
prefix_code
.
extra_bits_
;
}
else
{
VP8LPrefixEncodeBitsNoLUT
(
distance
code
extra_bits
)
;
}
}
static
WEBP_INLINE
void
VP8LPrefixEncode
(
int
distance
int
*
const
code
int
*
const
extra_bits
int
*
const
extra_bits_value
)
{
if
(
distance
<
PREFIX_LOOKUP_IDX_MAX
)
{
const
VP8LPrefixCode
prefix_code
=
kPrefixEncodeCode
[
distance
]
;
*
code
=
prefix_code
.
code_
;
*
extra_bits
=
prefix_code
.
extra_bits_
;
*
extra_bits_value
=
kPrefixEncodeExtraBitsValue
[
distance
]
;
}
else
{
VP8LPrefixEncodeNoLUT
(
distance
code
extra_bits
extra_bits_value
)
;
}
}
static
WEBP_UBSAN_IGNORE_UNSIGNED_OVERFLOW
WEBP_INLINE
uint32_t
VP8LAddPixels
(
uint32_t
a
uint32_t
b
)
{
const
uint32_t
alpha_and_green
=
(
a
&
0xff00ff00u
)
+
(
b
&
0xff00ff00u
)
;
const
uint32_t
red_and_blue
=
(
a
&
0x00ff00ffu
)
+
(
b
&
0x00ff00ffu
)
;
return
(
alpha_and_green
&
0xff00ff00u
)
|
(
red_and_blue
&
0x00ff00ffu
)
;
}
static
WEBP_UBSAN_IGNORE_UNSIGNED_OVERFLOW
WEBP_INLINE
uint32_t
VP8LSubPixels
(
uint32_t
a
uint32_t
b
)
{
const
uint32_t
alpha_and_green
=
0x00ff00ffu
+
(
a
&
0xff00ff00u
)
-
(
b
&
0xff00ff00u
)
;
const
uint32_t
red_and_blue
=
0xff00ff00u
+
(
a
&
0x00ff00ffu
)
-
(
b
&
0x00ff00ffu
)
;
return
(
alpha_and_green
&
0xff00ff00u
)
|
(
red_and_blue
&
0x00ff00ffu
)
;
}
#
define
GENERATE_PREDICTOR_ADD
(
PREDICTOR
PREDICTOR_ADD
)
\
static
void
PREDICTOR_ADD
(
const
uint32_t
*
in
const
uint32_t
*
upper
\
int
num_pixels
uint32_t
*
out
)
{
\
int
x
;
\
assert
(
upper
!
=
NULL
)
;
\
for
(
x
=
0
;
x
<
num_pixels
;
+
+
x
)
{
\
const
uint32_t
pred
=
(
PREDICTOR
)
(
out
[
x
-
1
]
upper
+
x
)
;
\
out
[
x
]
=
VP8LAddPixels
(
in
[
x
]
pred
)
;
\
}
\
}
#
ifdef
__cplusplus
}
#
endif
#
endif
