#
ifndef
WEBP_DSP_COMMON_SSE2_H_
#
define
WEBP_DSP_COMMON_SSE2_H_
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
if
defined
(
WEBP_USE_SSE2
)
#
include
<
emmintrin
.
h
>
#
if
0
#
include
<
stdio
.
h
>
static
WEBP_INLINE
void
PrintReg
(
const
__m128i
r
const
char
*
const
name
int
size
)
{
int
n
;
union
{
__m128i
r
;
uint8_t
i8
[
16
]
;
uint16_t
i16
[
8
]
;
uint32_t
i32
[
4
]
;
uint64_t
i64
[
2
]
;
}
tmp
;
tmp
.
r
=
r
;
fprintf
(
stderr
"
%
s
\
t
:
"
name
)
;
if
(
size
=
=
8
)
{
for
(
n
=
0
;
n
<
16
;
+
+
n
)
fprintf
(
stderr
"
%
.
2x
"
tmp
.
i8
[
n
]
)
;
}
else
if
(
size
=
=
16
)
{
for
(
n
=
0
;
n
<
8
;
+
+
n
)
fprintf
(
stderr
"
%
.
4x
"
tmp
.
i16
[
n
]
)
;
}
else
if
(
size
=
=
32
)
{
for
(
n
=
0
;
n
<
4
;
+
+
n
)
fprintf
(
stderr
"
%
.
8x
"
tmp
.
i32
[
n
]
)
;
}
else
{
for
(
n
=
0
;
n
<
2
;
+
+
n
)
fprintf
(
stderr
"
%
.
16lx
"
tmp
.
i64
[
n
]
)
;
}
fprintf
(
stderr
"
\
n
"
)
;
}
#
endif
static
WEBP_INLINE
int
VP8HorizontalAdd8b
(
const
__m128i
*
const
a
)
{
const
__m128i
zero
=
_mm_setzero_si128
(
)
;
const
__m128i
sad8x2
=
_mm_sad_epu8
(
*
a
zero
)
;
const
__m128i
sum
=
_mm_add_epi32
(
sad8x2
_mm_shuffle_epi32
(
sad8x2
2
)
)
;
return
_mm_cvtsi128_si32
(
sum
)
;
}
static
WEBP_INLINE
void
VP8Transpose_2_4x4_16b
(
const
__m128i
*
const
in0
const
__m128i
*
const
in1
const
__m128i
*
const
in2
const
__m128i
*
const
in3
__m128i
*
const
out0
__m128i
*
const
out1
__m128i
*
const
out2
__m128i
*
const
out3
)
{
const
__m128i
transpose0_0
=
_mm_unpacklo_epi16
(
*
in0
*
in1
)
;
const
__m128i
transpose0_1
=
_mm_unpacklo_epi16
(
*
in2
*
in3
)
;
const
__m128i
transpose0_2
=
_mm_unpackhi_epi16
(
*
in0
*
in1
)
;
const
__m128i
transpose0_3
=
_mm_unpackhi_epi16
(
*
in2
*
in3
)
;
const
__m128i
transpose1_0
=
_mm_unpacklo_epi32
(
transpose0_0
transpose0_1
)
;
const
__m128i
transpose1_1
=
_mm_unpacklo_epi32
(
transpose0_2
transpose0_3
)
;
const
__m128i
transpose1_2
=
_mm_unpackhi_epi32
(
transpose0_0
transpose0_1
)
;
const
__m128i
transpose1_3
=
_mm_unpackhi_epi32
(
transpose0_2
transpose0_3
)
;
*
out0
=
_mm_unpacklo_epi64
(
transpose1_0
transpose1_1
)
;
*
out1
=
_mm_unpackhi_epi64
(
transpose1_0
transpose1_1
)
;
*
out2
=
_mm_unpacklo_epi64
(
transpose1_2
transpose1_3
)
;
*
out3
=
_mm_unpackhi_epi64
(
transpose1_2
transpose1_3
)
;
}
#
define
VP8PlanarTo24bHelper
(
IN
OUT
)
\
do
{
\
const
__m128i
v_mask
=
_mm_set1_epi16
(
0x00ff
)
;
\
/
*
Take
one
every
two
upper
8b
values
.
*
/
\
(
OUT
#
#
0
)
=
_mm_packus_epi16
(
_mm_and_si128
(
(
IN
#
#
0
)
v_mask
)
\
_mm_and_si128
(
(
IN
#
#
1
)
v_mask
)
)
;
\
(
OUT
#
#
1
)
=
_mm_packus_epi16
(
_mm_and_si128
(
(
IN
#
#
2
)
v_mask
)
\
_mm_and_si128
(
(
IN
#
#
3
)
v_mask
)
)
;
\
(
OUT
#
#
2
)
=
_mm_packus_epi16
(
_mm_and_si128
(
(
IN
#
#
4
)
v_mask
)
\
_mm_and_si128
(
(
IN
#
#
5
)
v_mask
)
)
;
\
/
*
Take
one
every
two
lower
8b
values
.
*
/
\
(
OUT
#
#
3
)
=
_mm_packus_epi16
(
_mm_srli_epi16
(
(
IN
#
#
0
)
8
)
\
_mm_srli_epi16
(
(
IN
#
#
1
)
8
)
)
;
\
(
OUT
#
#
4
)
=
_mm_packus_epi16
(
_mm_srli_epi16
(
(
IN
#
#
2
)
8
)
\
_mm_srli_epi16
(
(
IN
#
#
3
)
8
)
)
;
\
(
OUT
#
#
5
)
=
_mm_packus_epi16
(
_mm_srli_epi16
(
(
IN
#
#
4
)
8
)
\
_mm_srli_epi16
(
(
IN
#
#
5
)
8
)
)
;
\
}
while
(
0
)
static
WEBP_INLINE
void
VP8PlanarTo24b_SSE2
(
__m128i
*
const
in0
__m128i
*
const
in1
__m128i
*
const
in2
__m128i
*
const
in3
__m128i
*
const
in4
__m128i
*
const
in5
)
{
__m128i
tmp0
tmp1
tmp2
tmp3
tmp4
tmp5
;
VP8PlanarTo24bHelper
(
*
in
tmp
)
;
VP8PlanarTo24bHelper
(
tmp
*
in
)
;
VP8PlanarTo24bHelper
(
*
in
tmp
)
;
{
__m128i
out0
out1
out2
out3
out4
out5
;
VP8PlanarTo24bHelper
(
tmp
out
)
;
VP8PlanarTo24bHelper
(
out
*
in
)
;
}
}
#
undef
VP8PlanarTo24bHelper
static
WEBP_INLINE
void
VP8L32bToPlanar_SSE2
(
__m128i
*
const
in0
__m128i
*
const
in1
__m128i
*
const
in2
__m128i
*
const
in3
)
{
const
__m128i
A0
=
_mm_unpacklo_epi8
(
*
in0
*
in1
)
;
const
__m128i
A1
=
_mm_unpackhi_epi8
(
*
in0
*
in1
)
;
const
__m128i
A2
=
_mm_unpacklo_epi8
(
*
in2
*
in3
)
;
const
__m128i
A3
=
_mm_unpackhi_epi8
(
*
in2
*
in3
)
;
const
__m128i
B0
=
_mm_unpacklo_epi8
(
A0
A1
)
;
const
__m128i
B1
=
_mm_unpackhi_epi8
(
A0
A1
)
;
const
__m128i
B2
=
_mm_unpacklo_epi8
(
A2
A3
)
;
const
__m128i
B3
=
_mm_unpackhi_epi8
(
A2
A3
)
;
const
__m128i
C0
=
_mm_unpacklo_epi8
(
B0
B1
)
;
const
__m128i
C1
=
_mm_unpackhi_epi8
(
B0
B1
)
;
const
__m128i
C2
=
_mm_unpacklo_epi8
(
B2
B3
)
;
const
__m128i
C3
=
_mm_unpackhi_epi8
(
B2
B3
)
;
*
in0
=
_mm_unpackhi_epi64
(
C1
C3
)
;
*
in1
=
_mm_unpacklo_epi64
(
C1
C3
)
;
*
in2
=
_mm_unpackhi_epi64
(
C0
C2
)
;
*
in3
=
_mm_unpacklo_epi64
(
C0
C2
)
;
}
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
