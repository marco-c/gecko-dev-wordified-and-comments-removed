#
ifndef
WEBP_DSP_YUV_H_
#
define
WEBP_DSP_YUV_H_
#
include
"
src
/
dsp
/
dsp
.
h
"
#
include
"
src
/
dec
/
vp8_dec
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
enum
{
YUV_FIX
=
16
YUV_HALF
=
1
<
<
(
YUV_FIX
-
1
)
YUV_FIX2
=
6
YUV_MASK2
=
(
256
<
<
YUV_FIX2
)
-
1
}
;
static
WEBP_INLINE
int
MultHi
(
int
v
int
coeff
)
{
return
(
v
*
coeff
)
>
>
8
;
}
static
WEBP_INLINE
int
VP8Clip8
(
int
v
)
{
return
(
(
v
&
~
YUV_MASK2
)
=
=
0
)
?
(
v
>
>
YUV_FIX2
)
:
(
v
<
0
)
?
0
:
255
;
}
static
WEBP_INLINE
int
VP8YUVToR
(
int
y
int
v
)
{
return
VP8Clip8
(
MultHi
(
y
19077
)
+
MultHi
(
v
26149
)
-
14234
)
;
}
static
WEBP_INLINE
int
VP8YUVToG
(
int
y
int
u
int
v
)
{
return
VP8Clip8
(
MultHi
(
y
19077
)
-
MultHi
(
u
6419
)
-
MultHi
(
v
13320
)
+
8708
)
;
}
static
WEBP_INLINE
int
VP8YUVToB
(
int
y
int
u
)
{
return
VP8Clip8
(
MultHi
(
y
19077
)
+
MultHi
(
u
33050
)
-
17685
)
;
}
static
WEBP_INLINE
void
VP8YuvToRgb
(
int
y
int
u
int
v
uint8_t
*
const
rgb
)
{
rgb
[
0
]
=
VP8YUVToR
(
y
v
)
;
rgb
[
1
]
=
VP8YUVToG
(
y
u
v
)
;
rgb
[
2
]
=
VP8YUVToB
(
y
u
)
;
}
static
WEBP_INLINE
void
VP8YuvToBgr
(
int
y
int
u
int
v
uint8_t
*
const
bgr
)
{
bgr
[
0
]
=
VP8YUVToB
(
y
u
)
;
bgr
[
1
]
=
VP8YUVToG
(
y
u
v
)
;
bgr
[
2
]
=
VP8YUVToR
(
y
v
)
;
}
static
WEBP_INLINE
void
VP8YuvToRgb565
(
int
y
int
u
int
v
uint8_t
*
const
rgb
)
{
const
int
r
=
VP8YUVToR
(
y
v
)
;
const
int
g
=
VP8YUVToG
(
y
u
v
)
;
const
int
b
=
VP8YUVToB
(
y
u
)
;
const
int
rg
=
(
r
&
0xf8
)
|
(
g
>
>
5
)
;
const
int
gb
=
(
(
g
<
<
3
)
&
0xe0
)
|
(
b
>
>
3
)
;
#
if
(
WEBP_SWAP_16BIT_CSP
=
=
1
)
rgb
[
0
]
=
gb
;
rgb
[
1
]
=
rg
;
#
else
rgb
[
0
]
=
rg
;
rgb
[
1
]
=
gb
;
#
endif
}
static
WEBP_INLINE
void
VP8YuvToRgba4444
(
int
y
int
u
int
v
uint8_t
*
const
argb
)
{
const
int
r
=
VP8YUVToR
(
y
v
)
;
const
int
g
=
VP8YUVToG
(
y
u
v
)
;
const
int
b
=
VP8YUVToB
(
y
u
)
;
const
int
rg
=
(
r
&
0xf0
)
|
(
g
>
>
4
)
;
const
int
ba
=
(
b
&
0xf0
)
|
0x0f
;
#
if
(
WEBP_SWAP_16BIT_CSP
=
=
1
)
argb
[
0
]
=
ba
;
argb
[
1
]
=
rg
;
#
else
argb
[
0
]
=
rg
;
argb
[
1
]
=
ba
;
#
endif
}
static
WEBP_INLINE
void
VP8YuvToArgb
(
uint8_t
y
uint8_t
u
uint8_t
v
uint8_t
*
const
argb
)
{
argb
[
0
]
=
0xff
;
VP8YuvToRgb
(
y
u
v
argb
+
1
)
;
}
static
WEBP_INLINE
void
VP8YuvToBgra
(
uint8_t
y
uint8_t
u
uint8_t
v
uint8_t
*
const
bgra
)
{
VP8YuvToBgr
(
y
u
v
bgra
)
;
bgra
[
3
]
=
0xff
;
}
static
WEBP_INLINE
void
VP8YuvToRgba
(
uint8_t
y
uint8_t
u
uint8_t
v
uint8_t
*
const
rgba
)
{
VP8YuvToRgb
(
y
u
v
rgba
)
;
rgba
[
3
]
=
0xff
;
}
#
if
defined
(
WEBP_USE_SSE2
)
void
VP8YuvToRgba32_SSE2
(
const
uint8_t
*
y
const
uint8_t
*
u
const
uint8_t
*
v
uint8_t
*
dst
)
;
void
VP8YuvToRgb32_SSE2
(
const
uint8_t
*
y
const
uint8_t
*
u
const
uint8_t
*
v
uint8_t
*
dst
)
;
void
VP8YuvToBgra32_SSE2
(
const
uint8_t
*
y
const
uint8_t
*
u
const
uint8_t
*
v
uint8_t
*
dst
)
;
void
VP8YuvToBgr32_SSE2
(
const
uint8_t
*
y
const
uint8_t
*
u
const
uint8_t
*
v
uint8_t
*
dst
)
;
void
VP8YuvToArgb32_SSE2
(
const
uint8_t
*
y
const
uint8_t
*
u
const
uint8_t
*
v
uint8_t
*
dst
)
;
void
VP8YuvToRgba444432_SSE2
(
const
uint8_t
*
y
const
uint8_t
*
u
const
uint8_t
*
v
uint8_t
*
dst
)
;
void
VP8YuvToRgb56532_SSE2
(
const
uint8_t
*
y
const
uint8_t
*
u
const
uint8_t
*
v
uint8_t
*
dst
)
;
#
endif
#
if
defined
(
WEBP_USE_SSE41
)
void
VP8YuvToRgb32_SSE41
(
const
uint8_t
*
y
const
uint8_t
*
u
const
uint8_t
*
v
uint8_t
*
dst
)
;
void
VP8YuvToBgr32_SSE41
(
const
uint8_t
*
y
const
uint8_t
*
u
const
uint8_t
*
v
uint8_t
*
dst
)
;
#
endif
static
WEBP_INLINE
int
VP8ClipUV
(
int
uv
int
rounding
)
{
uv
=
(
uv
+
rounding
+
(
128
<
<
(
YUV_FIX
+
2
)
)
)
>
>
(
YUV_FIX
+
2
)
;
return
(
(
uv
&
~
0xff
)
=
=
0
)
?
uv
:
(
uv
<
0
)
?
0
:
255
;
}
static
WEBP_INLINE
int
VP8RGBToY
(
int
r
int
g
int
b
int
rounding
)
{
const
int
luma
=
16839
*
r
+
33059
*
g
+
6420
*
b
;
return
(
luma
+
rounding
+
(
16
<
<
YUV_FIX
)
)
>
>
YUV_FIX
;
}
static
WEBP_INLINE
int
VP8RGBToU
(
int
r
int
g
int
b
int
rounding
)
{
const
int
u
=
-
9719
*
r
-
19081
*
g
+
28800
*
b
;
return
VP8ClipUV
(
u
rounding
)
;
}
static
WEBP_INLINE
int
VP8RGBToV
(
int
r
int
g
int
b
int
rounding
)
{
const
int
v
=
+
28800
*
r
-
24116
*
g
-
4684
*
b
;
return
VP8ClipUV
(
v
rounding
)
;
}
#
ifdef
__cplusplus
}
#
endif
#
endif
