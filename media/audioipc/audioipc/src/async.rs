use
{
RecvFd
SendFd
}
;
use
bytes
:
:
{
Buf
BufMut
}
;
use
mio_uds
;
use
std
:
:
io
as
std_io
;
use
std
:
:
os
:
:
unix
:
:
io
:
:
RawFd
;
use
std
:
:
os
:
:
unix
:
:
net
;
#
[
macro_export
]
macro_rules
!
try_nb
{
(
e
:
expr
)
=
>
(
match
e
{
Ok
(
t
)
=
>
t
Err
(
ref
e
)
if
e
.
kind
(
)
=
=
:
:
std
:
:
io
:
:
ErrorKind
:
:
WouldBlock
=
>
{
return
Ok
(
Async
:
:
NotReady
)
}
Err
(
e
)
=
>
return
Err
(
e
.
into
(
)
)
}
)
}
pub
type
AsyncResult
<
T
E
>
=
Result
<
Async
<
T
>
E
>
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
pub
enum
Async
<
T
>
{
Ready
(
T
)
NotReady
}
impl
<
T
>
Async
<
T
>
{
pub
fn
is_ready
(
&
self
)
-
>
bool
{
match
*
self
{
Async
:
:
Ready
(
_
)
=
>
true
Async
:
:
NotReady
=
>
false
}
}
pub
fn
is_not_ready
(
&
self
)
-
>
bool
{
!
self
.
is_ready
(
)
}
}
pub
type
AsyncSendResult
<
T
E
>
=
Result
<
AsyncSend
<
T
>
E
>
;
#
[
derive
(
Copy
Clone
Debug
PartialEq
)
]
pub
enum
AsyncSend
<
T
>
{
Ready
NotReady
(
T
)
}
pub
trait
AsyncRecvFd
:
RecvFd
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
bytes
:
&
mut
[
u8
]
)
-
>
bool
{
for
byte
in
bytes
.
iter_mut
(
)
{
*
byte
=
0
;
}
true
}
fn
recv_buf_fd
<
B
>
(
&
mut
self
buf
:
&
mut
B
)
-
>
AsyncResult
<
(
usize
Option
<
RawFd
>
)
std_io
:
:
Error
>
where
Self
:
Sized
B
:
BufMut
{
if
!
buf
.
has_remaining_mut
(
)
{
return
Ok
(
Async
:
:
Ready
(
(
0
None
)
)
)
;
}
unsafe
{
let
(
n
fd
)
=
{
let
bytes
=
buf
.
bytes_mut
(
)
;
self
.
prepare_uninitialized_buffer
(
bytes
)
;
try_nb
!
(
self
.
recv_fd
(
bytes
)
)
}
;
buf
.
advance_mut
(
n
)
;
Ok
(
Async
:
:
Ready
(
(
n
fd
)
)
)
}
}
}
impl
AsyncRecvFd
for
net
:
:
UnixStream
{
}
impl
AsyncRecvFd
for
mio_uds
:
:
UnixStream
{
}
pub
trait
AsyncSendFd
:
SendFd
{
fn
send_buf_fd
<
B
>
(
&
mut
self
buf
:
&
mut
B
fd
:
Option
<
RawFd
>
)
-
>
AsyncResult
<
usize
std_io
:
:
Error
>
where
Self
:
Sized
B
:
Buf
{
if
!
buf
.
has_remaining
(
)
{
return
Ok
(
Async
:
:
Ready
(
0
)
)
;
}
let
n
=
try_nb
!
(
self
.
send_fd
(
buf
.
bytes
(
)
fd
)
)
;
buf
.
advance
(
n
)
;
Ok
(
Async
:
:
Ready
(
n
)
)
}
}
impl
AsyncSendFd
for
net
:
:
UnixStream
{
}
impl
AsyncSendFd
for
mio_uds
:
:
UnixStream
{
}
