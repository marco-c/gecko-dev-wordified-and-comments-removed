use
tokio_io
:
:
{
AsyncRead
AsyncWrite
}
;
use
tokio_reactor
:
:
{
Handle
PollEvented
}
;
use
bytes
:
:
{
Buf
BufMut
}
;
use
futures
:
:
{
Async
Future
Poll
}
;
use
iovec
:
:
{
self
IoVec
}
;
use
libc
;
use
mio
:
:
Ready
;
use
mio_uds
;
use
std
:
:
fmt
;
use
std
:
:
io
:
:
{
self
Read
Write
}
;
use
std
:
:
net
:
:
Shutdown
;
use
std
:
:
os
:
:
unix
:
:
io
:
:
{
AsRawFd
RawFd
}
;
use
std
:
:
os
:
:
unix
:
:
net
:
:
{
self
SocketAddr
}
;
use
std
:
:
path
:
:
Path
;
pub
struct
UnixStream
{
io
:
PollEvented
<
mio_uds
:
:
UnixStream
>
}
#
[
derive
(
Debug
)
]
pub
struct
ConnectFuture
{
inner
:
State
}
#
[
derive
(
Debug
)
]
enum
State
{
Waiting
(
UnixStream
)
Error
(
io
:
:
Error
)
Empty
}
impl
UnixStream
{
pub
fn
connect
<
P
>
(
path
:
P
)
-
>
ConnectFuture
where
P
:
AsRef
<
Path
>
{
let
res
=
mio_uds
:
:
UnixStream
:
:
connect
(
path
)
.
map
(
UnixStream
:
:
new
)
;
let
inner
=
match
res
{
Ok
(
stream
)
=
>
State
:
:
Waiting
(
stream
)
Err
(
e
)
=
>
State
:
:
Error
(
e
)
}
;
ConnectFuture
{
inner
}
}
pub
fn
from_std
(
stream
:
net
:
:
UnixStream
handle
:
&
Handle
)
-
>
io
:
:
Result
<
UnixStream
>
{
let
stream
=
mio_uds
:
:
UnixStream
:
:
from_stream
(
stream
)
?
;
let
io
=
PollEvented
:
:
new_with_handle
(
stream
handle
)
?
;
Ok
(
UnixStream
{
io
}
)
}
pub
fn
pair
(
)
-
>
io
:
:
Result
<
(
UnixStream
UnixStream
)
>
{
let
(
a
b
)
=
mio_uds
:
:
UnixStream
:
:
pair
(
)
?
;
let
a
=
UnixStream
:
:
new
(
a
)
;
let
b
=
UnixStream
:
:
new
(
b
)
;
Ok
(
(
a
b
)
)
}
pub
(
crate
)
fn
new
(
stream
:
mio_uds
:
:
UnixStream
)
-
>
UnixStream
{
let
io
=
PollEvented
:
:
new
(
stream
)
;
UnixStream
{
io
}
}
pub
fn
poll_read_ready
(
&
self
ready
:
Ready
)
-
>
Poll
<
Ready
io
:
:
Error
>
{
self
.
io
.
poll_read_ready
(
ready
)
}
pub
fn
clear_read_ready
(
&
self
ready
:
mio
:
:
Ready
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
clear_read_ready
(
ready
)
}
pub
fn
poll_write_ready
(
&
self
)
-
>
Poll
<
Ready
io
:
:
Error
>
{
self
.
io
.
poll_write_ready
(
)
}
pub
fn
clear_write_ready
(
&
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
clear_write_ready
(
)
}
pub
fn
local_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
get_ref
(
)
.
local_addr
(
)
}
pub
fn
peer_addr
(
&
self
)
-
>
io
:
:
Result
<
SocketAddr
>
{
self
.
io
.
get_ref
(
)
.
peer_addr
(
)
}
pub
fn
take_error
(
&
self
)
-
>
io
:
:
Result
<
Option
<
io
:
:
Error
>
>
{
self
.
io
.
get_ref
(
)
.
take_error
(
)
}
pub
fn
shutdown
(
&
self
how
:
Shutdown
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
get_ref
(
)
.
shutdown
(
how
)
}
}
impl
Read
for
UnixStream
{
fn
read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
read
(
buf
)
}
}
impl
Write
for
UnixStream
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
self
.
io
.
write
(
buf
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
self
.
io
.
flush
(
)
}
}
impl
AsyncRead
for
UnixStream
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
_
:
&
mut
[
u8
]
)
-
>
bool
{
false
}
fn
read_buf
<
B
:
BufMut
>
(
&
mut
self
buf
:
&
mut
B
)
-
>
Poll
<
usize
io
:
:
Error
>
{
<
&
UnixStream
>
:
:
read_buf
(
&
mut
&
*
self
buf
)
}
}
impl
AsyncWrite
for
UnixStream
{
fn
shutdown
(
&
mut
self
)
-
>
Poll
<
(
)
io
:
:
Error
>
{
<
&
UnixStream
>
:
:
shutdown
(
&
mut
&
*
self
)
}
fn
write_buf
<
B
:
Buf
>
(
&
mut
self
buf
:
&
mut
B
)
-
>
Poll
<
usize
io
:
:
Error
>
{
<
&
UnixStream
>
:
:
write_buf
(
&
mut
&
*
self
buf
)
}
}
impl
<
'
a
>
Read
for
&
'
a
UnixStream
{
fn
read
(
&
mut
self
buf
:
&
mut
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
(
&
self
.
io
)
.
read
(
buf
)
}
}
impl
<
'
a
>
Write
for
&
'
a
UnixStream
{
fn
write
(
&
mut
self
buf
:
&
[
u8
]
)
-
>
io
:
:
Result
<
usize
>
{
(
&
self
.
io
)
.
write
(
buf
)
}
fn
flush
(
&
mut
self
)
-
>
io
:
:
Result
<
(
)
>
{
(
&
self
.
io
)
.
flush
(
)
}
}
impl
<
'
a
>
AsyncRead
for
&
'
a
UnixStream
{
unsafe
fn
prepare_uninitialized_buffer
(
&
self
_
:
&
mut
[
u8
]
)
-
>
bool
{
false
}
fn
read_buf
<
B
:
BufMut
>
(
&
mut
self
buf
:
&
mut
B
)
-
>
Poll
<
usize
io
:
:
Error
>
{
if
let
Async
:
:
NotReady
=
<
UnixStream
>
:
:
poll_read_ready
(
self
Ready
:
:
readable
(
)
)
?
{
return
Ok
(
Async
:
:
NotReady
)
;
}
unsafe
{
let
r
=
read_ready
(
buf
self
.
as_raw_fd
(
)
)
;
if
r
=
=
-
1
{
let
e
=
io
:
:
Error
:
:
last_os_error
(
)
;
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
{
self
.
io
.
clear_read_ready
(
Ready
:
:
readable
(
)
)
?
;
Ok
(
Async
:
:
NotReady
)
}
else
{
Err
(
e
)
}
}
else
{
let
r
=
r
as
usize
;
buf
.
advance_mut
(
r
)
;
Ok
(
r
.
into
(
)
)
}
}
}
}
impl
<
'
a
>
AsyncWrite
for
&
'
a
UnixStream
{
fn
shutdown
(
&
mut
self
)
-
>
Poll
<
(
)
io
:
:
Error
>
{
Ok
(
(
)
.
into
(
)
)
}
fn
write_buf
<
B
:
Buf
>
(
&
mut
self
buf
:
&
mut
B
)
-
>
Poll
<
usize
io
:
:
Error
>
{
if
let
Async
:
:
NotReady
=
<
UnixStream
>
:
:
poll_write_ready
(
self
)
?
{
return
Ok
(
Async
:
:
NotReady
)
;
}
unsafe
{
let
r
=
write_ready
(
buf
self
.
as_raw_fd
(
)
)
;
if
r
=
=
-
1
{
let
e
=
io
:
:
Error
:
:
last_os_error
(
)
;
if
e
.
kind
(
)
=
=
io
:
:
ErrorKind
:
:
WouldBlock
{
self
.
io
.
clear_write_ready
(
)
?
;
Ok
(
Async
:
:
NotReady
)
}
else
{
Err
(
e
)
}
}
else
{
let
r
=
r
as
usize
;
buf
.
advance
(
r
)
;
Ok
(
r
.
into
(
)
)
}
}
}
}
impl
fmt
:
:
Debug
for
UnixStream
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
self
.
io
.
get_ref
(
)
.
fmt
(
f
)
}
}
impl
AsRawFd
for
UnixStream
{
fn
as_raw_fd
(
&
self
)
-
>
RawFd
{
self
.
io
.
get_ref
(
)
.
as_raw_fd
(
)
}
}
impl
Future
for
ConnectFuture
{
type
Item
=
UnixStream
;
type
Error
=
io
:
:
Error
;
fn
poll
(
&
mut
self
)
-
>
Poll
<
UnixStream
io
:
:
Error
>
{
use
std
:
:
mem
;
match
self
.
inner
{
State
:
:
Waiting
(
ref
mut
stream
)
=
>
{
if
let
Async
:
:
NotReady
=
stream
.
io
.
poll_write_ready
(
)
?
{
return
Ok
(
Async
:
:
NotReady
)
;
}
if
let
Some
(
e
)
=
stream
.
io
.
get_ref
(
)
.
take_error
(
)
?
{
return
Err
(
e
)
;
}
}
State
:
:
Error
(
_
)
=
>
{
let
e
=
match
mem
:
:
replace
(
&
mut
self
.
inner
State
:
:
Empty
)
{
State
:
:
Error
(
e
)
=
>
e
_
=
>
unreachable
!
(
)
}
;
return
Err
(
e
)
;
}
State
:
:
Empty
=
>
panic
!
(
"
can
'
t
poll
stream
twice
"
)
}
match
mem
:
:
replace
(
&
mut
self
.
inner
State
:
:
Empty
)
{
State
:
:
Waiting
(
stream
)
=
>
Ok
(
Async
:
:
Ready
(
stream
)
)
_
=
>
unreachable
!
(
)
}
}
}
unsafe
fn
read_ready
<
B
:
BufMut
>
(
buf
:
&
mut
B
raw_fd
:
RawFd
)
-
>
isize
{
let
b1
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b2
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b3
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b4
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b5
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b6
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b7
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b8
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b9
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b10
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b11
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b12
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b13
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b14
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b15
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
b16
:
&
mut
[
u8
]
=
&
mut
[
0
]
;
let
mut
bufs
:
[
&
mut
IoVec
;
16
]
=
[
b1
.
into
(
)
b2
.
into
(
)
b3
.
into
(
)
b4
.
into
(
)
b5
.
into
(
)
b6
.
into
(
)
b7
.
into
(
)
b8
.
into
(
)
b9
.
into
(
)
b10
.
into
(
)
b11
.
into
(
)
b12
.
into
(
)
b13
.
into
(
)
b14
.
into
(
)
b15
.
into
(
)
b16
.
into
(
)
]
;
let
n
=
buf
.
bytes_vec_mut
(
&
mut
bufs
)
;
read_ready_vecs
(
&
mut
bufs
[
.
.
n
]
raw_fd
)
}
unsafe
fn
read_ready_vecs
(
bufs
:
&
mut
[
&
mut
IoVec
]
raw_fd
:
RawFd
)
-
>
isize
{
let
iovecs
=
iovec
:
:
unix
:
:
as_os_slice_mut
(
bufs
)
;
libc
:
:
readv
(
raw_fd
iovecs
.
as_ptr
(
)
iovecs
.
len
(
)
as
i32
)
}
unsafe
fn
write_ready
<
B
:
Buf
>
(
buf
:
&
mut
B
raw_fd
:
RawFd
)
-
>
isize
{
static
DUMMY
:
&
[
u8
]
=
&
[
0
]
;
let
iovec
=
<
&
IoVec
>
:
:
from
(
DUMMY
)
;
let
mut
bufs
=
[
iovec
iovec
iovec
iovec
iovec
iovec
iovec
iovec
iovec
iovec
iovec
iovec
iovec
iovec
iovec
iovec
]
;
let
n
=
buf
.
bytes_vec
(
&
mut
bufs
)
;
write_ready_vecs
(
&
bufs
[
.
.
n
]
raw_fd
)
}
unsafe
fn
write_ready_vecs
(
bufs
:
&
[
&
IoVec
]
raw_fd
:
RawFd
)
-
>
isize
{
let
iovecs
=
iovec
:
:
unix
:
:
as_os_slice
(
bufs
)
;
libc
:
:
writev
(
raw_fd
iovecs
.
as_ptr
(
)
iovecs
.
len
(
)
as
i32
)
}
