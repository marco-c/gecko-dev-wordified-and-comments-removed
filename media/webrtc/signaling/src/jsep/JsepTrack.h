#
ifndef
_JSEPTRACK_H_
#
define
_JSEPTRACK_H_
#
include
<
string
>
#
include
<
map
>
#
include
<
set
>
#
include
<
mozilla
/
RefPtr
.
h
>
#
include
<
mozilla
/
UniquePtr
.
h
>
#
include
<
mozilla
/
Maybe
.
h
>
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsError
.
h
"
#
include
"
signaling
/
src
/
jsep
/
JsepTransport
.
h
"
#
include
"
signaling
/
src
/
sdp
/
Sdp
.
h
"
#
include
"
signaling
/
src
/
sdp
/
SdpAttribute
.
h
"
#
include
"
signaling
/
src
/
sdp
/
SdpMediaSection
.
h
"
#
include
"
signaling
/
src
/
common
/
PtrVector
.
h
"
namespace
mozilla
{
class
JsepCodecDescription
;
class
JsepTrackNegotiatedDetails
{
public
:
size_t
GetCodecCount
(
)
const
{
return
mCodecs
.
values
.
size
(
)
;
}
const
JsepCodecDescription
*
GetCodec
(
size_t
index
)
const
{
MOZ_RELEASE_ASSERT
(
index
<
mCodecs
.
values
.
size
(
)
)
;
return
mCodecs
.
values
[
index
]
;
}
const
SdpExtmapAttributeList
:
:
Extmap
*
GetExt
(
const
std
:
:
string
&
ext_name
)
const
{
auto
it
=
mExtmap
.
find
(
ext_name
)
;
if
(
it
!
=
mExtmap
.
end
(
)
)
{
return
&
it
-
>
second
;
}
return
nullptr
;
}
std
:
:
vector
<
uint8_t
>
GetUniquePayloadTypes
(
)
const
{
return
mUniquePayloadTypes
;
}
private
:
friend
class
JsepTrack
;
std
:
:
map
<
std
:
:
string
SdpExtmapAttributeList
:
:
Extmap
>
mExtmap
;
std
:
:
vector
<
uint8_t
>
mUniquePayloadTypes
;
PtrVector
<
JsepCodecDescription
>
mCodecs
;
}
;
class
JsepTrack
{
public
:
JsepTrack
(
mozilla
:
:
SdpMediaSection
:
:
MediaType
type
const
std
:
:
string
&
streamid
const
std
:
:
string
&
trackid
sdp
:
:
Direction
direction
=
sdp
:
:
kSend
)
:
mType
(
type
)
mStreamId
(
streamid
)
mTrackId
(
trackid
)
mDirection
(
direction
)
{
}
virtual
mozilla
:
:
SdpMediaSection
:
:
MediaType
GetMediaType
(
)
const
{
return
mType
;
}
virtual
const
std
:
:
string
&
GetStreamId
(
)
const
{
return
mStreamId
;
}
virtual
void
SetStreamId
(
const
std
:
:
string
&
id
)
{
mStreamId
=
id
;
}
virtual
const
std
:
:
string
&
GetTrackId
(
)
const
{
return
mTrackId
;
}
virtual
void
SetTrackId
(
const
std
:
:
string
&
id
)
{
mTrackId
=
id
;
}
virtual
const
std
:
:
string
&
GetCNAME
(
)
const
{
return
mCNAME
;
}
virtual
void
SetCNAME
(
const
std
:
:
string
&
cname
)
{
mCNAME
=
cname
;
}
virtual
sdp
:
:
Direction
GetDirection
(
)
const
{
return
mDirection
;
}
virtual
const
std
:
:
vector
<
uint32_t
>
&
GetSsrcs
(
)
const
{
return
mSsrcs
;
}
virtual
void
AddSsrc
(
uint32_t
ssrc
)
{
mSsrcs
.
push_back
(
ssrc
)
;
}
virtual
void
PopulateCodecs
(
const
std
:
:
vector
<
JsepCodecDescription
*
>
&
prototype
)
;
virtual
void
AddToOffer
(
SdpMediaSection
*
offer
)
const
;
virtual
void
AddToAnswer
(
const
SdpMediaSection
&
offer
SdpMediaSection
*
answer
)
const
;
virtual
void
Negotiate
(
const
SdpMediaSection
&
answer
const
SdpMediaSection
&
remote
)
;
static
void
SetUniquePayloadTypes
(
const
std
:
:
vector
<
RefPtr
<
JsepTrack
>
>
&
tracks
)
;
virtual
void
GetNegotiatedPayloadTypes
(
std
:
:
vector
<
uint16_t
>
*
payloadTypes
)
;
virtual
const
JsepTrackNegotiatedDetails
*
GetNegotiatedDetails
(
)
const
{
if
(
mNegotiatedDetails
)
{
return
mNegotiatedDetails
.
get
(
)
;
}
return
nullptr
;
}
virtual
JsepTrackNegotiatedDetails
*
GetNegotiatedDetails
(
)
{
if
(
mNegotiatedDetails
)
{
return
mNegotiatedDetails
.
get
(
)
;
}
return
nullptr
;
}
virtual
void
ClearNegotiatedDetails
(
)
{
mNegotiatedDetails
.
reset
(
)
;
}
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
JsepTrack
)
;
protected
:
virtual
~
JsepTrack
(
)
{
}
private
:
virtual
std
:
:
vector
<
JsepCodecDescription
*
>
GetCodecClones
(
)
const
;
static
void
EnsureNoDuplicatePayloadTypes
(
std
:
:
vector
<
JsepCodecDescription
*
>
*
codecs
)
;
static
void
GetPayloadTypes
(
const
std
:
:
vector
<
JsepCodecDescription
*
>
&
codecs
std
:
:
vector
<
uint16_t
>
*
pts
)
;
static
void
EnsurePayloadTypeIsUnique
(
std
:
:
set
<
uint16_t
>
*
uniquePayloadTypes
JsepCodecDescription
*
codec
)
;
virtual
void
AddToMsection
(
const
std
:
:
vector
<
JsepCodecDescription
*
>
&
codecs
SdpMediaSection
*
msection
)
const
;
virtual
void
NegotiateCodecs
(
const
SdpMediaSection
&
remote
std
:
:
vector
<
JsepCodecDescription
*
>
*
codecs
const
SdpMediaSection
*
answer
=
nullptr
std
:
:
map
<
std
:
:
string
std
:
:
string
>
*
formatChanges
=
nullptr
)
const
;
const
mozilla
:
:
SdpMediaSection
:
:
MediaType
mType
;
std
:
:
string
mStreamId
;
std
:
:
string
mTrackId
;
std
:
:
string
mCNAME
;
const
sdp
:
:
Direction
mDirection
;
PtrVector
<
JsepCodecDescription
>
mPrototypeCodecs
;
UniquePtr
<
JsepTrackNegotiatedDetails
>
mNegotiatedDetails
;
std
:
:
vector
<
uint32_t
>
mSsrcs
;
}
;
struct
JsepTrackPair
{
size_t
mLevel
;
Maybe
<
size_t
>
mBundleLevel
;
uint32_t
mRecvonlySsrc
;
RefPtr
<
JsepTrack
>
mSending
;
RefPtr
<
JsepTrack
>
mReceiving
;
RefPtr
<
JsepTransport
>
mRtpTransport
;
RefPtr
<
JsepTransport
>
mRtcpTransport
;
}
;
}
#
endif
