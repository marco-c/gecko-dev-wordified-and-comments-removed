#
include
"
WebRtcLog
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
prenv
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
trace
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
include
"
nsDirectoryServiceDefs
.
h
"
using
mozilla
:
:
LogLevel
;
static
int
gWebRtcTraceLoggingOn
=
0
;
#
if
defined
(
ANDROID
)
static
const
char
*
default_tmp_dir
=
"
/
dev
/
null
"
;
static
const
char
*
default_log_name
=
"
nspr
"
;
#
else
NS_NAMED_LITERAL_CSTRING
(
default_log_name
"
WebRTC
.
log
"
)
;
#
endif
static
mozilla
:
:
LazyLogModule
sWebRtcLog
(
"
webrtc_trace
"
)
;
static
mozilla
:
:
LazyLogModule
sLogAEC
(
"
AEC
"
)
;
class
WebRtcTraceCallback
:
public
webrtc
:
:
TraceCallback
{
public
:
void
Print
(
webrtc
:
:
TraceLevel
level
const
char
*
message
int
length
)
{
MOZ_LOG
(
sWebRtcLog
LogLevel
:
:
Debug
(
"
%
s
"
message
)
)
;
}
}
;
class
LogSinkImpl
:
public
rtc
:
:
LogSink
{
public
:
LogSinkImpl
(
)
{
}
private
:
void
OnLogMessage
(
const
std
:
:
string
&
message
)
override
{
MOZ_LOG
(
sWebRtcLog
LogLevel
:
:
Debug
(
"
%
s
"
message
.
data
(
)
)
)
;
}
}
;
static
WebRtcTraceCallback
gWebRtcCallback
;
static
mozilla
:
:
StaticAutoPtr
<
LogSinkImpl
>
sSink
;
void
GetWebRtcLogPrefs
(
uint32_t
*
aTraceMask
nsACString
*
aLogFile
nsACString
*
aAECLogDir
bool
*
aMultiLog
)
{
*
aMultiLog
=
mozilla
:
:
Preferences
:
:
GetBool
(
"
media
.
webrtc
.
debug
.
multi_log
"
)
;
*
aTraceMask
=
mozilla
:
:
Preferences
:
:
GetUint
(
"
media
.
webrtc
.
debug
.
trace_mask
"
)
;
mozilla
:
:
Preferences
:
:
GetCString
(
"
media
.
webrtc
.
debug
.
log_file
"
aLogFile
)
;
mozilla
:
:
Preferences
:
:
GetCString
(
"
media
.
webrtc
.
debug
.
aec_log_dir
"
aAECLogDir
)
;
webrtc
:
:
Trace
:
:
set_aec_debug_size
(
mozilla
:
:
Preferences
:
:
GetUint
(
"
media
.
webrtc
.
debug
.
aec_dump_max_size
"
)
)
;
}
mozilla
:
:
LogLevel
CheckOverrides
(
uint32_t
*
aTraceMask
nsACString
*
aLogFile
bool
*
aMultiLog
)
{
mozilla
:
:
LogModule
*
log_info
=
sWebRtcLog
;
mozilla
:
:
LogLevel
log_level
=
log_info
-
>
Level
(
)
;
if
(
!
aTraceMask
|
|
!
aLogFile
|
|
!
aMultiLog
)
{
return
log_level
;
}
switch
(
log_level
)
{
case
mozilla
:
:
LogLevel
:
:
Verbose
:
*
aTraceMask
=
webrtc
:
:
TraceLevel
:
:
kTraceAll
;
break
;
case
mozilla
:
:
LogLevel
:
:
Debug
:
*
aTraceMask
=
0x1fff
;
break
;
case
mozilla
:
:
LogLevel
:
:
Info
:
*
aTraceMask
=
0x07ff
;
break
;
case
mozilla
:
:
LogLevel
:
:
Warning
:
*
aTraceMask
=
webrtc
:
:
TraceLevel
:
:
kTraceDefault
;
break
;
case
mozilla
:
:
LogLevel
:
:
Error
:
*
aTraceMask
=
webrtc
:
:
TraceLevel
:
:
kTraceWarning
|
webrtc
:
:
TraceLevel
:
:
kTraceError
|
webrtc
:
:
TraceLevel
:
:
kTraceStateInfo
;
break
;
case
mozilla
:
:
LogLevel
:
:
Disabled
:
default
:
*
aTraceMask
=
0
;
}
char
*
trace_level
=
getenv
(
"
WEBRTC_TRACE_LEVEL
"
)
;
if
(
trace_level
&
&
*
trace_level
)
{
*
aTraceMask
=
atoi
(
trace_level
)
;
}
log_info
=
sLogAEC
;
if
(
sLogAEC
&
&
(
log_info
-
>
Level
(
)
!
=
mozilla
:
:
LogLevel
:
:
Disabled
)
)
{
webrtc
:
:
Trace
:
:
set_aec_debug
(
true
)
;
}
const
char
*
file_name
=
PR_GetEnv
(
"
WEBRTC_TRACE_FILE
"
)
;
if
(
file_name
)
{
aLogFile
-
>
Assign
(
file_name
)
;
}
return
log_level
;
}
void
ConfigWebRtcLog
(
mozilla
:
:
LogLevel
level
uint32_t
trace_mask
nsCString
&
aLogFile
nsCString
&
aAECLogDir
bool
multi_log
)
{
if
(
gWebRtcTraceLoggingOn
)
{
return
;
}
#
if
defined
(
ANDROID
)
aLogFile
.
Assign
(
default_log_name
)
;
#
else
if
(
!
sSink
)
{
sSink
=
new
LogSinkImpl
(
)
;
}
rtc
:
:
LoggingSeverity
log_level
;
switch
(
level
)
{
case
mozilla
:
:
LogLevel
:
:
Verbose
:
log_level
=
rtc
:
:
LoggingSeverity
:
:
LS_VERBOSE
;
break
;
case
mozilla
:
:
LogLevel
:
:
Debug
:
case
mozilla
:
:
LogLevel
:
:
Info
:
log_level
=
rtc
:
:
LoggingSeverity
:
:
LS_INFO
;
break
;
case
mozilla
:
:
LogLevel
:
:
Warning
:
log_level
=
rtc
:
:
LoggingSeverity
:
:
LS_WARNING
;
break
;
case
mozilla
:
:
LogLevel
:
:
Error
:
log_level
=
rtc
:
:
LoggingSeverity
:
:
LS_ERROR
;
break
;
case
mozilla
:
:
LogLevel
:
:
Disabled
:
log_level
=
rtc
:
:
LoggingSeverity
:
:
LS_NONE
;
break
;
default
:
MOZ_ASSERT
(
false
)
;
break
;
}
rtc
:
:
LogMessage
:
:
AddLogToStream
(
sSink
log_level
)
;
webrtc
:
:
Trace
:
:
set_level_filter
(
trace_mask
)
;
if
(
trace_mask
!
=
0
)
{
if
(
aLogFile
.
EqualsLiteral
(
"
nspr
"
)
)
{
webrtc
:
:
Trace
:
:
SetTraceCallback
(
&
gWebRtcCallback
)
;
}
else
{
webrtc
:
:
Trace
:
:
SetTraceFile
(
aLogFile
.
get
(
)
multi_log
)
;
}
}
if
(
aLogFile
.
IsEmpty
(
)
)
{
nsCOMPtr
<
nsIFile
>
tempDir
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
tempDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
tempDir
-
>
AppendNative
(
default_log_name
)
;
tempDir
-
>
GetNativePath
(
aLogFile
)
;
}
}
#
endif
if
(
XRE_IsParentProcess
(
)
)
{
mozilla
:
:
Preferences
:
:
SetCString
(
"
media
.
webrtc
.
debug
.
log_file
"
aLogFile
)
;
}
return
;
}
void
StartWebRtcLog
(
uint32_t
log_level
)
{
if
(
gWebRtcTraceLoggingOn
&
&
log_level
!
=
0
)
{
return
;
}
if
(
log_level
=
=
0
)
{
if
(
gWebRtcTraceLoggingOn
)
{
gWebRtcTraceLoggingOn
=
false
;
webrtc
:
:
Trace
:
:
set_level_filter
(
webrtc
:
:
kTraceNone
)
;
}
return
;
}
uint32_t
trace_mask
=
0
;
bool
multi_log
=
false
;
nsAutoCString
log_file
;
nsAutoCString
aec_log_dir
;
GetWebRtcLogPrefs
(
&
trace_mask
&
log_file
&
aec_log_dir
&
multi_log
)
;
mozilla
:
:
LogLevel
level
=
CheckOverrides
(
&
trace_mask
&
log_file
&
multi_log
)
;
if
(
trace_mask
=
=
0
)
{
trace_mask
=
log_level
;
}
ConfigWebRtcLog
(
level
trace_mask
log_file
aec_log_dir
multi_log
)
;
return
;
}
void
EnableWebRtcLog
(
)
{
if
(
gWebRtcTraceLoggingOn
)
{
return
;
}
uint32_t
trace_mask
=
0
;
bool
multi_log
=
false
;
nsAutoCString
log_file
;
nsAutoCString
aec_log_dir
;
GetWebRtcLogPrefs
(
&
trace_mask
&
log_file
&
aec_log_dir
&
multi_log
)
;
mozilla
:
:
LogLevel
level
=
CheckOverrides
(
&
trace_mask
&
log_file
&
multi_log
)
;
ConfigWebRtcLog
(
level
trace_mask
log_file
aec_log_dir
multi_log
)
;
return
;
}
void
StopWebRtcLog
(
)
{
webrtc
:
:
Trace
:
:
set_level_filter
(
webrtc
:
:
kTraceNone
)
;
webrtc
:
:
Trace
:
:
SetTraceCallback
(
nullptr
)
;
webrtc
:
:
Trace
:
:
SetTraceFile
(
nullptr
)
;
if
(
sSink
)
{
rtc
:
:
LogMessage
:
:
RemoveLogToStream
(
sSink
)
;
sSink
=
nullptr
;
}
}
void
ConfigAecLog
(
nsCString
&
aAECLogDir
)
{
if
(
webrtc
:
:
Trace
:
:
aec_debug
(
)
)
{
return
;
}
#
if
defined
(
ANDROID
)
if
(
aAECLogDir
.
IsEmpty
(
)
)
{
aAECLogDir
.
Assign
(
default_tmp_dir
)
;
}
#
else
if
(
aAECLogDir
.
IsEmpty
(
)
)
{
nsCOMPtr
<
nsIFile
>
tempDir
;
nsresult
rv
=
NS_GetSpecialDirectory
(
NS_OS_TEMP_DIR
getter_AddRefs
(
tempDir
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
if
(
aAECLogDir
.
IsEmpty
(
)
)
{
tempDir
-
>
GetNativePath
(
aAECLogDir
)
;
}
}
}
#
endif
webrtc
:
:
Trace
:
:
set_aec_debug_filename
(
aAECLogDir
.
get
(
)
)
;
if
(
XRE_IsParentProcess
(
)
)
{
mozilla
:
:
Preferences
:
:
SetCString
(
"
media
.
webrtc
.
debug
.
aec_log_dir
"
aAECLogDir
)
;
}
}
void
StartAecLog
(
)
{
if
(
webrtc
:
:
Trace
:
:
aec_debug
(
)
)
{
return
;
}
uint32_t
trace_mask
=
0
;
bool
multi_log
=
false
;
nsAutoCString
log_file
;
nsAutoCString
aec_log_dir
;
GetWebRtcLogPrefs
(
&
trace_mask
&
log_file
&
aec_log_dir
&
multi_log
)
;
CheckOverrides
(
&
trace_mask
&
log_file
&
multi_log
)
;
ConfigAecLog
(
aec_log_dir
)
;
webrtc
:
:
Trace
:
:
set_aec_debug
(
true
)
;
}
void
StopAecLog
(
)
{
webrtc
:
:
Trace
:
:
set_aec_debug
(
false
)
;
}
