#
ifndef
RTP_PACKET_QUEUE_H_
#
define
RTP_PACKET_QUEUE_H_
#
include
"
nsTArray
.
h
"
#
include
"
MediaConduitInterface
.
h
"
namespace
mozilla
{
class
RtpPacketQueue
{
public
:
void
Clear
(
)
{
mQueuedPackets
.
Clear
(
)
;
mQueueActive
=
false
;
}
void
DequeueAll
(
MediaSessionConduit
*
conduit
)
{
for
(
auto
&
packet
:
mQueuedPackets
)
{
if
(
conduit
-
>
DeliverPacket
(
packet
-
>
mData
packet
-
>
mLen
)
!
=
kMediaConduitNoError
)
{
}
}
mQueuedPackets
.
Clear
(
)
;
mQueueActive
=
false
;
}
void
Enqueue
(
const
void
*
data
int
len
)
{
UniquePtr
<
QueuedPacket
>
packet
(
(
QueuedPacket
*
)
malloc
(
sizeof
(
QueuedPacket
)
+
len
-
1
)
)
;
packet
-
>
mLen
=
len
;
memcpy
(
packet
-
>
mData
data
len
)
;
mQueuedPackets
.
AppendElement
(
std
:
:
move
(
packet
)
)
;
mQueueActive
=
true
;
}
bool
IsQueueActive
(
)
{
return
mQueueActive
;
}
private
:
bool
mQueueActive
=
false
;
struct
QueuedPacket
{
int
mLen
;
uint8_t
mData
[
1
]
;
}
;
nsTArray
<
UniquePtr
<
QueuedPacket
>
>
mQueuedPackets
;
}
;
}
#
endif
