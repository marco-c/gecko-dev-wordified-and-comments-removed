#
ifndef
CODEC_CONFIG_H_
#
define
CODEC_CONFIG_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
signaling
/
src
/
common
/
EncodingConstraints
.
h
"
namespace
mozilla
{
struct
AudioCodecConfig
{
int
mType
;
std
:
:
string
mName
;
int
mFreq
;
int
mPacSize
;
int
mChannels
;
int
mRate
;
bool
mFECEnabled
;
bool
mDtmfEnabled
;
int
mMaxPlaybackRate
;
explicit
AudioCodecConfig
(
int
type
std
:
:
string
name
int
freq
int
pacSize
int
channels
int
rate
bool
FECEnabled
)
:
mType
(
type
)
mName
(
name
)
mFreq
(
freq
)
mPacSize
(
pacSize
)
mChannels
(
channels
)
mRate
(
rate
)
mFECEnabled
(
FECEnabled
)
mDtmfEnabled
(
false
)
mMaxPlaybackRate
(
0
)
{
}
}
;
#
define
MAX_SPROP_LEN
128
struct
VideoCodecConfigH264
{
char
sprop_parameter_sets
[
MAX_SPROP_LEN
]
;
int
packetization_mode
;
int
profile_level_id
;
int
tias_bw
;
}
;
class
VideoCodecConfig
{
public
:
int
mType
;
std
:
:
string
mName
;
std
:
:
vector
<
std
:
:
string
>
mAckFbTypes
;
std
:
:
vector
<
std
:
:
string
>
mNackFbTypes
;
std
:
:
vector
<
std
:
:
string
>
mCcmFbTypes
;
bool
mRembFbSet
;
bool
mFECFbSet
;
uint32_t
mTias
;
EncodingConstraints
mEncodingConstraints
;
struct
SimulcastEncoding
{
std
:
:
string
rid
;
EncodingConstraints
constraints
;
bool
operator
=
=
(
const
SimulcastEncoding
&
aOther
)
const
{
return
rid
=
=
aOther
.
rid
&
&
constraints
=
=
aOther
.
constraints
;
}
}
;
std
:
:
vector
<
SimulcastEncoding
>
mSimulcastEncodings
;
std
:
:
string
mSpropParameterSets
;
uint8_t
mProfile
;
uint8_t
mConstraints
;
uint8_t
mLevel
;
uint8_t
mPacketizationMode
;
bool
operator
=
=
(
const
VideoCodecConfig
&
aRhs
)
const
{
if
(
mType
!
=
aRhs
.
mType
|
|
mName
!
=
aRhs
.
mName
|
|
mAckFbTypes
!
=
aRhs
.
mAckFbTypes
|
|
mNackFbTypes
!
=
aRhs
.
mNackFbTypes
|
|
mCcmFbTypes
!
=
aRhs
.
mCcmFbTypes
|
|
mRembFbSet
!
=
aRhs
.
mRembFbSet
|
|
mFECFbSet
!
=
aRhs
.
mFECFbSet
|
|
mTias
!
=
aRhs
.
mTias
|
|
!
(
mEncodingConstraints
=
=
aRhs
.
mEncodingConstraints
)
|
|
!
(
mSimulcastEncodings
=
=
aRhs
.
mSimulcastEncodings
)
|
|
mSpropParameterSets
!
=
aRhs
.
mSpropParameterSets
|
|
mProfile
!
=
aRhs
.
mProfile
|
|
mConstraints
!
=
aRhs
.
mConstraints
|
|
mLevel
!
=
aRhs
.
mLevel
|
|
mPacketizationMode
!
=
aRhs
.
mPacketizationMode
)
{
return
false
;
}
return
true
;
}
VideoCodecConfig
(
int
type
std
:
:
string
name
const
EncodingConstraints
&
constraints
const
struct
VideoCodecConfigH264
*
h264
=
nullptr
)
:
mType
(
type
)
mName
(
name
)
mFECFbSet
(
false
)
mTias
(
0
)
mEncodingConstraints
(
constraints
)
mProfile
(
0x42
)
mConstraints
(
0xE0
)
mLevel
(
0x0C
)
mPacketizationMode
(
1
)
{
if
(
h264
)
{
mProfile
=
(
h264
-
>
profile_level_id
&
0x00FF0000
)
>
>
16
;
mConstraints
=
(
h264
-
>
profile_level_id
&
0x0000FF00
)
>
>
8
;
mLevel
=
(
h264
-
>
profile_level_id
&
0x000000FF
)
;
mPacketizationMode
=
h264
-
>
packetization_mode
;
mSpropParameterSets
=
h264
-
>
sprop_parameter_sets
;
}
}
bool
RtcpFbAckIsSet
(
const
std
:
:
string
&
type
)
const
{
for
(
auto
i
=
mAckFbTypes
.
begin
(
)
;
i
!
=
mAckFbTypes
.
end
(
)
;
+
+
i
)
{
if
(
*
i
=
=
type
)
{
return
true
;
}
}
return
false
;
}
bool
RtcpFbNackIsSet
(
const
std
:
:
string
&
type
)
const
{
for
(
auto
i
=
mNackFbTypes
.
begin
(
)
;
i
!
=
mNackFbTypes
.
end
(
)
;
+
+
i
)
{
if
(
*
i
=
=
type
)
{
return
true
;
}
}
return
false
;
}
bool
RtcpFbCcmIsSet
(
const
std
:
:
string
&
type
)
const
{
for
(
auto
i
=
mCcmFbTypes
.
begin
(
)
;
i
!
=
mCcmFbTypes
.
end
(
)
;
+
+
i
)
{
if
(
*
i
=
=
type
)
{
return
true
;
}
}
return
false
;
}
bool
RtcpFbRembIsSet
(
)
const
{
return
mRembFbSet
;
}
bool
RtcpFbFECIsSet
(
)
const
{
return
mFECFbSet
;
}
}
;
}
#
endif
