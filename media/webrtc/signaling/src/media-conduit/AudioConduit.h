#
ifndef
AUDIO_SESSION_H_
#
define
AUDIO_SESSION_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
MediaConduitInterface
.
h
"
#
include
"
MediaEngineWrapper
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_base
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_volume_control
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_codec
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_file
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_network
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_external_media
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_audio_processing
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_video_sync
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_rtp_rtcp
.
h
"
#
include
"
webrtc
/
voice_engine
/
channel_proxy
.
h
"
using
webrtc
:
:
VoEBase
;
using
webrtc
:
:
VoENetwork
;
using
webrtc
:
:
VoECodec
;
using
webrtc
:
:
VoEExternalMedia
;
using
webrtc
:
:
VoEAudioProcessing
;
using
webrtc
:
:
VoEVideoSync
;
using
webrtc
:
:
VoERTP_RTCP
;
namespace
mozilla
{
DOMHighResTimeStamp
NTPtoDOMHighResTimeStamp
(
uint32_t
ntpHigh
uint32_t
ntpLow
)
;
class
WebrtcAudioConduit
:
public
AudioSessionConduit
public
webrtc
:
:
Transport
{
public
:
static
const
unsigned
int
CODEC_PLNAME_SIZE
;
virtual
MediaConduitErrorCode
ReceivedRTPPacket
(
const
void
*
data
int
len
uint32_t
ssrc
)
override
;
virtual
MediaConduitErrorCode
ReceivedRTCPPacket
(
const
void
*
data
int
len
)
override
;
virtual
MediaConduitErrorCode
StopTransmitting
(
)
override
;
virtual
MediaConduitErrorCode
StartTransmitting
(
)
override
;
virtual
MediaConduitErrorCode
StopReceiving
(
)
override
;
virtual
MediaConduitErrorCode
StartReceiving
(
)
override
;
virtual
MediaConduitErrorCode
ConfigureSendMediaCodec
(
const
AudioCodecConfig
*
codecConfig
)
override
;
virtual
MediaConduitErrorCode
ConfigureRecvMediaCodecs
(
const
std
:
:
vector
<
AudioCodecConfig
*
>
&
codecConfigList
)
override
;
virtual
MediaConduitErrorCode
EnableAudioLevelExtension
(
bool
enabled
uint8_t
id
)
override
;
virtual
MediaConduitErrorCode
SetTransmitterTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
virtual
MediaConduitErrorCode
SetReceiverTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
virtual
MediaConduitErrorCode
SendAudioFrame
(
const
int16_t
speechData
[
]
int32_t
lengthSamples
int32_t
samplingFreqHz
int32_t
capture_time
)
override
;
virtual
MediaConduitErrorCode
GetAudioFrame
(
int16_t
speechData
[
]
int32_t
samplingFreqHz
int32_t
capture_delay
int
&
lengthSamples
)
override
;
virtual
bool
SendRtp
(
const
uint8_t
*
data
size_t
len
const
webrtc
:
:
PacketOptions
&
options
)
override
;
virtual
bool
SendRtcp
(
const
uint8_t
*
data
size_t
len
)
override
;
virtual
uint64_t
CodecPluginID
(
)
override
{
return
0
;
}
virtual
void
SetPCHandle
(
const
std
:
:
string
&
aPCHandle
)
{
}
explicit
WebrtcAudioConduit
(
)
:
mVoiceEngine
(
nullptr
)
mTransportMonitor
(
"
WebrtcAudioConduit
"
)
mTransmitterTransport
(
nullptr
)
mReceiverTransport
(
nullptr
)
mEngineTransmitting
(
false
)
mEngineReceiving
(
false
)
mChannel
(
-
1
)
mDtmfEnabled
(
false
)
mCodecMutex
(
"
AudioConduit
codec
db
"
)
mCaptureDelay
(
150
)
mLastTimestamp
(
0
)
mSamples
(
0
)
mLastSyncLog
(
0
)
{
}
virtual
~
WebrtcAudioConduit
(
)
;
MediaConduitErrorCode
Init
(
)
;
int
GetChannel
(
)
{
return
mChannel
;
}
webrtc
:
:
VoiceEngine
*
GetVoiceEngine
(
)
{
return
mVoiceEngine
;
}
bool
SetLocalSSRCs
(
const
std
:
:
vector
<
unsigned
int
>
&
aSSRCs
)
override
;
std
:
:
vector
<
unsigned
int
>
GetLocalSSRCs
(
)
const
override
;
bool
SetRemoteSSRC
(
unsigned
int
ssrc
)
override
{
return
false
;
}
bool
GetRemoteSSRC
(
unsigned
int
*
ssrc
)
override
;
bool
SetLocalCNAME
(
const
char
*
cname
)
override
;
bool
GetSendPacketTypeStats
(
webrtc
:
:
RtcpPacketTypeCounter
*
aPacketCounts
)
override
;
bool
GetRecvPacketTypeStats
(
webrtc
:
:
RtcpPacketTypeCounter
*
aPacketCounts
)
override
;
bool
GetVideoEncoderStats
(
double
*
framerateMean
double
*
framerateStdDev
double
*
bitrateMean
double
*
bitrateStdDev
uint32_t
*
droppedFrames
uint32_t
*
framesEncoded
)
override
{
return
false
;
}
bool
GetVideoDecoderStats
(
double
*
framerateMean
double
*
framerateStdDev
double
*
bitrateMean
double
*
bitrateStdDev
uint32_t
*
discardedPackets
uint32_t
*
framesDecoded
)
override
{
return
false
;
}
bool
GetAVStats
(
int32_t
*
jitterBufferDelayMs
int32_t
*
playoutBufferDelayMs
int32_t
*
avSyncOffsetMs
)
override
;
bool
GetRTPStats
(
unsigned
int
*
jitterMs
unsigned
int
*
cumulativeLost
)
override
;
bool
GetRTCPReceiverReport
(
DOMHighResTimeStamp
*
timestamp
uint32_t
*
jitterMs
uint32_t
*
packetsReceived
uint64_t
*
bytesReceived
uint32_t
*
cumulativeLost
int32_t
*
rttMs
)
override
;
bool
GetRTCPSenderReport
(
DOMHighResTimeStamp
*
timestamp
unsigned
int
*
packetsSent
uint64_t
*
bytesSent
)
override
;
bool
SetDtmfPayloadType
(
unsigned
char
type
int
freq
)
override
;
bool
InsertDTMFTone
(
int
channel
int
eventCode
bool
outOfBand
int
lengthMs
int
attenuationDb
)
override
;
private
:
WebrtcAudioConduit
(
const
WebrtcAudioConduit
&
other
)
=
delete
;
void
operator
=
(
const
WebrtcAudioConduit
&
other
)
=
delete
;
typedef
std
:
:
vector
<
AudioCodecConfig
*
>
RecvCodecList
;
bool
CodecConfigToWebRTCCodec
(
const
AudioCodecConfig
*
codecInfo
webrtc
:
:
CodecInst
&
cinst
)
;
bool
IsSamplingFreqSupported
(
int
freq
)
const
;
unsigned
int
GetNum10msSamplesForFrequency
(
int
samplingFreqHz
)
const
;
bool
CopyCodecToDB
(
const
AudioCodecConfig
*
codecInfo
)
;
bool
CheckCodecForMatch
(
const
AudioCodecConfig
*
codecInfo
)
const
;
bool
CheckCodecsForMatch
(
const
AudioCodecConfig
*
curCodecConfig
const
AudioCodecConfig
*
codecInfo
)
const
;
MediaConduitErrorCode
ValidateCodecConfig
(
const
AudioCodecConfig
*
codecInfo
bool
send
)
;
void
DumpCodecDB
(
)
const
;
webrtc
:
:
VoiceEngine
*
mVoiceEngine
;
mozilla
:
:
ReentrantMonitor
mTransportMonitor
;
RefPtr
<
TransportInterface
>
mTransmitterTransport
;
RefPtr
<
TransportInterface
>
mReceiverTransport
;
ScopedCustomReleasePtr
<
webrtc
:
:
VoENetwork
>
mPtrVoENetwork
;
ScopedCustomReleasePtr
<
webrtc
:
:
VoEBase
>
mPtrVoEBase
;
ScopedCustomReleasePtr
<
webrtc
:
:
VoECodec
>
mPtrVoECodec
;
ScopedCustomReleasePtr
<
webrtc
:
:
VoEExternalMedia
>
mPtrVoEXmedia
;
ScopedCustomReleasePtr
<
webrtc
:
:
VoEAudioProcessing
>
mPtrVoEProcessing
;
ScopedCustomReleasePtr
<
webrtc
:
:
VoEVideoSync
>
mPtrVoEVideoSync
;
ScopedCustomReleasePtr
<
webrtc
:
:
VoERTP_RTCP
>
mPtrVoERTP_RTCP
;
ScopedCustomReleasePtr
<
webrtc
:
:
VoERTP_RTCP
>
mPtrRTP
;
mozilla
:
:
Atomic
<
bool
>
mEngineTransmitting
;
mozilla
:
:
Atomic
<
bool
>
mEngineReceiving
;
struct
Processing
{
TimeStamp
mTimeStamp
;
uint32_t
mRTPTimeStamp
;
}
;
AutoTArray
<
Processing
8
>
mProcessing
;
int
mChannel
;
std
:
:
unique_ptr
<
webrtc
:
:
voe
:
:
ChannelProxy
>
mChannelProxy
;
bool
mDtmfEnabled
;
RecvCodecList
mRecvCodecList
;
Mutex
mCodecMutex
;
nsAutoPtr
<
AudioCodecConfig
>
mCurSendCodecConfig
;
int32_t
mCaptureDelay
;
uint32_t
mLastTimestamp
;
uint32_t
mSamples
;
uint32_t
mLastSyncLog
;
}
;
}
#
endif
