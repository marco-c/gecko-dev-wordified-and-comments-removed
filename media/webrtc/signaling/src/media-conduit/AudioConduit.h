#
ifndef
AUDIO_SESSION_H_
#
define
AUDIO_SESSION_H_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
MediaConduitInterface
.
h
"
#
include
"
MediaEngineWrapper
.
h
"
#
include
"
RtpSourceObserver
.
h
"
#
include
"
RtpPacketQueue
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
include
/
fake_audio_device
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_base
.
h
"
#
include
"
webrtc
/
voice_engine
/
channel_proxy
.
h
"
namespace
mozilla
{
DOMHighResTimeStamp
NTPtoDOMHighResTimeStamp
(
uint32_t
ntpHigh
uint32_t
ntpLow
)
;
class
WebrtcAudioConduit
:
public
AudioSessionConduit
public
webrtc
:
:
Transport
public
webrtc
:
:
RtpPacketObserver
{
public
:
static
const
unsigned
int
CODEC_PLNAME_SIZE
;
MediaConduitErrorCode
ReceivedRTPPacket
(
const
void
*
data
int
len
uint32_t
ssrc
)
override
;
MediaConduitErrorCode
ReceivedRTCPPacket
(
const
void
*
data
int
len
)
override
;
MediaConduitErrorCode
StopTransmitting
(
)
override
;
MediaConduitErrorCode
StartTransmitting
(
)
override
;
MediaConduitErrorCode
StopReceiving
(
)
override
;
MediaConduitErrorCode
StartReceiving
(
)
override
;
MediaConduitErrorCode
StopTransmittingLocked
(
)
;
MediaConduitErrorCode
StartTransmittingLocked
(
)
;
MediaConduitErrorCode
StopReceivingLocked
(
)
;
MediaConduitErrorCode
StartReceivingLocked
(
)
;
MediaConduitErrorCode
ConfigureSendMediaCodec
(
const
AudioCodecConfig
*
codecConfig
)
override
;
MediaConduitErrorCode
ConfigureRecvMediaCodecs
(
const
std
:
:
vector
<
UniquePtr
<
AudioCodecConfig
>
>
&
codecConfigList
)
override
;
MediaConduitErrorCode
SetLocalRTPExtensions
(
MediaSessionConduitLocalDirection
aDirection
const
RtpExtList
&
extensions
)
override
;
MediaConduitErrorCode
SetTransmitterTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
MediaConduitErrorCode
SetReceiverTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
MediaConduitErrorCode
SendAudioFrame
(
const
int16_t
speechData
[
]
int32_t
lengthSamples
int32_t
samplingFreqHz
uint32_t
channels
int32_t
capture_time
)
override
;
MediaConduitErrorCode
GetAudioFrame
(
int16_t
speechData
[
]
int32_t
samplingFreqHz
int32_t
capture_delay
int
&
lengthSamples
)
override
;
bool
SendRtp
(
const
uint8_t
*
data
size_t
len
const
webrtc
:
:
PacketOptions
&
options
)
override
;
bool
SendRtcp
(
const
uint8_t
*
data
size_t
len
)
override
;
uint64_t
CodecPluginID
(
)
override
{
return
0
;
}
void
SetPCHandle
(
const
std
:
:
string
&
aPCHandle
)
override
{
}
MediaConduitErrorCode
DeliverPacket
(
const
void
*
data
int
len
)
override
;
void
DeleteStreams
(
)
override
{
}
WebrtcAudioConduit
(
RefPtr
<
WebRtcCallWrapper
>
aCall
nsCOMPtr
<
nsIEventTarget
>
aStsThread
)
:
mTransportMonitor
(
"
WebrtcAudioConduit
"
)
mTransmitterTransport
(
nullptr
)
mReceiverTransport
(
nullptr
)
mCall
(
aCall
)
mRecvStreamConfig
(
)
mRecvStream
(
nullptr
)
mSendStreamConfig
(
this
)
mSendStream
(
nullptr
)
mRecvSSRC
(
0
)
mEngineTransmitting
(
false
)
mEngineReceiving
(
false
)
mRecvChannel
(
-
1
)
mSendChannel
(
-
1
)
mDtmfEnabled
(
false
)
mMutex
(
"
WebrtcAudioConduit
:
:
mMutex
"
)
mStsThread
(
aStsThread
)
{
}
virtual
~
WebrtcAudioConduit
(
)
;
virtual
MediaConduitErrorCode
Init
(
)
;
int
GetRecvChannel
(
)
{
return
mRecvChannel
;
}
webrtc
:
:
VoiceEngine
*
GetVoiceEngine
(
)
{
return
mCall
-
>
Call
(
)
-
>
voice_engine
(
)
;
}
bool
SetLocalSSRCs
(
const
std
:
:
vector
<
unsigned
int
>
&
aSSRCs
)
override
;
std
:
:
vector
<
unsigned
int
>
GetLocalSSRCs
(
)
override
;
bool
SetRemoteSSRC
(
unsigned
int
ssrc
)
override
;
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
override
{
return
true
;
}
bool
GetRemoteSSRC
(
unsigned
int
*
ssrc
)
override
;
bool
SetLocalCNAME
(
const
char
*
cname
)
override
;
bool
SetLocalMID
(
const
std
:
:
string
&
mid
)
override
;
void
SetSyncGroup
(
const
std
:
:
string
&
group
)
override
;
bool
GetSendPacketTypeStats
(
webrtc
:
:
RtcpPacketTypeCounter
*
aPacketCounts
)
override
;
bool
GetRecvPacketTypeStats
(
webrtc
:
:
RtcpPacketTypeCounter
*
aPacketCounts
)
override
;
bool
GetRTPReceiverStats
(
unsigned
int
*
jitterMs
unsigned
int
*
cumulativeLost
)
override
;
bool
GetRTCPReceiverReport
(
uint32_t
*
jitterMs
uint32_t
*
packetsReceived
uint64_t
*
bytesReceived
uint32_t
*
cumulativeLost
int32_t
*
rttMs
)
override
;
bool
GetRTCPSenderReport
(
unsigned
int
*
packetsSent
uint64_t
*
bytesSent
)
override
;
bool
SetDtmfPayloadType
(
unsigned
char
type
int
freq
)
override
;
bool
InsertDTMFTone
(
int
channel
int
eventCode
bool
outOfBand
int
lengthMs
int
attenuationDb
)
override
;
void
GetRtpSources
(
const
int64_t
aTimeNow
nsTArray
<
dom
:
:
RTCRtpSourceEntry
>
&
outSources
)
override
;
void
OnRtpPacket
(
const
webrtc
:
:
WebRtcRTPHeader
*
aRtpHeader
const
int64_t
aTimestamp
const
uint32_t
aJitter
)
override
;
void
InsertAudioLevelForContributingSource
(
uint32_t
aSource
int64_t
aTimestamp
bool
aHasLevel
uint8_t
aLevel
)
;
bool
IsSamplingFreqSupported
(
int
freq
)
const
override
;
protected
:
std
:
:
unique_ptr
<
webrtc
:
:
voe
:
:
ChannelProxy
>
mRecvChannelProxy
=
nullptr
;
std
:
:
unique_ptr
<
webrtc
:
:
voe
:
:
ChannelProxy
>
mSendChannelProxy
=
nullptr
;
private
:
WebrtcAudioConduit
(
const
WebrtcAudioConduit
&
other
)
=
delete
;
void
operator
=
(
const
WebrtcAudioConduit
&
other
)
=
delete
;
bool
CodecConfigToWebRTCCodec
(
const
AudioCodecConfig
*
codecInfo
webrtc
:
:
AudioSendStream
:
:
Config
&
config
)
;
unsigned
int
GetNum10msSamplesForFrequency
(
int
samplingFreqHz
)
const
;
MediaConduitErrorCode
ValidateCodecConfig
(
const
AudioCodecConfig
*
codecInfo
bool
send
)
;
MediaConduitErrorCode
CreateSendStream
(
)
;
void
DeleteSendStream
(
)
;
MediaConduitErrorCode
CreateRecvStream
(
)
;
void
DeleteRecvStream
(
)
;
bool
RecreateSendStreamIfExists
(
)
;
bool
RecreateRecvStreamIfExists
(
)
;
MediaConduitErrorCode
CreateChannels
(
)
;
virtual
void
DeleteChannels
(
)
;
mozilla
:
:
ReentrantMonitor
mTransportMonitor
;
RefPtr
<
TransportInterface
>
mTransmitterTransport
;
RefPtr
<
TransportInterface
>
mReceiverTransport
;
ScopedCustomReleasePtr
<
webrtc
:
:
VoEBase
>
mPtrVoEBase
;
const
RefPtr
<
WebRtcCallWrapper
>
mCall
;
webrtc
:
:
AudioReceiveStream
:
:
Config
mRecvStreamConfig
;
webrtc
:
:
AudioReceiveStream
*
mRecvStream
;
webrtc
:
:
AudioSendStream
:
:
Config
mSendStreamConfig
;
webrtc
:
:
AudioSendStream
*
mSendStream
;
Atomic
<
uint32_t
>
mRecvSSRC
;
RtpPacketQueue
mRtpPacketQueue
;
mozilla
:
:
Atomic
<
bool
>
mEngineTransmitting
;
mozilla
:
:
Atomic
<
bool
>
mEngineReceiving
;
int
mRecvChannel
;
int
mSendChannel
;
bool
mDtmfEnabled
;
Mutex
mMutex
;
webrtc
:
:
AudioFrame
mAudioFrame
;
RtpSourceObserver
mRtpSourceObserver
;
const
nsCOMPtr
<
nsIEventTarget
>
mStsThread
;
}
;
}
#
endif
