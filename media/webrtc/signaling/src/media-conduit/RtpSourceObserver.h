#
ifndef
AUDIOLEVELOBSERVER_H
#
define
AUDIOLEVELOBSERVER_H
#
include
<
vector
>
#
include
<
map
>
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
dom
/
RTCRtpSourcesBinding
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_packet_observer
.
h
"
#
include
"
RTCStatsReport
.
h
"
namespace
test
{
class
RtpSourcesTest
;
}
namespace
mozilla
{
class
RtpSourceObserver
:
public
webrtc
:
:
RtpPacketObserver
{
public
:
explicit
RtpSourceObserver
(
const
dom
:
:
RTCStatsTimestampMaker
&
aTimestampMaker
)
;
virtual
~
RtpSourceObserver
(
)
{
}
;
void
OnRtpPacket
(
const
webrtc
:
:
RTPHeader
&
aRtpHeader
const
int64_t
aTimestamp
const
uint32_t
aJitter
)
override
;
void
GetRtpSources
(
nsTArray
<
dom
:
:
RTCRtpSourceEntry
>
&
outSources
)
const
;
private
:
struct
RtpSourceEntry
{
RtpSourceEntry
(
)
=
default
;
void
Update
(
const
int64_t
aTimestamp
const
uint32_t
aRtpTimestamp
const
bool
aHasAudioLevel
const
uint8_t
aAudioLevel
)
{
predictedPlayoutTime
=
aTimestamp
;
rtpTimestamp
=
aRtpTimestamp
;
hasAudioLevel
=
aHasAudioLevel
&
&
!
(
aAudioLevel
&
0x80
)
;
audioLevel
=
aAudioLevel
;
}
double
ToLinearAudioLevel
(
)
const
;
int64_t
predictedPlayoutTime
=
0
;
uint32_t
rtpTimestamp
=
0
;
bool
hasAudioLevel
=
false
;
uint8_t
audioLevel
=
0
;
}
;
class
RtpSourceHistory
{
public
:
RtpSourceHistory
(
)
=
default
;
const
RtpSourceEntry
*
FindClosestNotAfter
(
int64_t
aTime
)
const
;
void
Insert
(
const
int64_t
aTimeNow
const
int64_t
aTimestamp
const
uint32_t
aRtpTimestamp
const
bool
aHasAudioLevel
const
uint8_t
aAudioLevel
)
;
void
Prune
(
const
int64_t
aTimeNow
)
;
void
SetSource
(
uint32_t
aSource
dom
:
:
RTCRtpSourceEntryType
aType
)
;
private
:
RtpSourceObserver
:
:
RtpSourceEntry
&
Insert
(
const
int64_t
aTimeNow
const
int64_t
aTimestamp
)
;
bool
Empty
(
)
const
{
return
!
mDetailedHistory
.
size
(
)
;
}
bool
HasEvicted
(
)
const
{
return
mHasEvictedEntry
;
}
constexpr
static
int64_t
kMinJitterWindow
=
1000
;
constexpr
static
int64_t
kHistoryWindow
=
10000
;
int64_t
mMaxJitterWindow
=
kMinJitterWindow
;
RtpSourceEntry
mLatestEviction
;
bool
mHasEvictedEntry
=
false
;
std
:
:
map
<
int64_t
RtpSourceEntry
>
mDetailedHistory
;
RtpSourceEntry
mPrehistory
;
friend
test
:
:
RtpSourcesTest
;
}
;
RtpSourceObserver
(
const
RtpSourceObserver
&
)
=
delete
;
RtpSourceObserver
&
operator
=
(
RtpSourceObserver
const
&
)
=
delete
;
static
uint64_t
GetKey
(
const
uint32_t
id
const
dom
:
:
RTCRtpSourceEntryType
aType
)
{
return
(
aType
=
=
dom
:
:
RTCRtpSourceEntryType
:
:
Synchronization
)
?
(
static_cast
<
uint64_t
>
(
id
)
|
(
static_cast
<
uint64_t
>
(
0x1
)
<
<
32
)
)
:
(
static_cast
<
uint64_t
>
(
id
)
)
;
}
static
uint32_t
GetSourceFromKey
(
const
uint64_t
aKey
)
{
return
static_cast
<
uint32_t
>
(
aKey
&
~
(
static_cast
<
uint64_t
>
(
0x1
)
<
<
32
)
)
;
}
static
dom
:
:
RTCRtpSourceEntryType
GetTypeFromKey
(
const
uint64_t
aKey
)
{
return
(
aKey
&
(
static_cast
<
uint64_t
>
(
0x1
)
<
<
32
)
)
?
dom
:
:
RTCRtpSourceEntryType
:
:
Synchronization
:
dom
:
:
RTCRtpSourceEntryType
:
:
Contributing
;
}
std
:
:
map
<
uint64_t
RtpSourceHistory
>
mRtpSources
;
int64_t
mMaxJitterWindow
;
mutable
Mutex
mLevelGuard
;
dom
:
:
RTCStatsTimestampMaker
mTimestampMaker
;
friend
test
:
:
RtpSourcesTest
;
friend
void
InsertAudioLevelForContributingSource
(
RtpSourceObserver
&
observer
const
uint32_t
aCsrcSource
const
int64_t
aTimestamp
const
uint32_t
aRtpTimestamp
const
bool
aHasAudioLevel
const
uint8_t
aAudioLevel
)
;
}
;
}
#
undef
NG
#
endif
