#
ifndef
VIDEO_SESSION_H_
#
define
VIDEO_SESSION_H_
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ReentrantMonitor
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
MediaConduitInterface
.
h
"
#
include
"
MediaEngineWrapper
.
h
"
#
include
"
RunningStat
.
h
"
#
include
"
RtpPacketQueue
.
h
"
#
include
"
runnable_utils
.
h
"
#
undef
FF
#
include
"
webrtc
/
call
/
call
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
ifdef
FF
#
undef
FF
/
/
Avoid
name
collision
between
scoped_ptr
.
h
and
nsCRTGlue
.
h
.
#
endif
#
include
"
webrtc
/
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
webrtc
/
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
webrtc
/
common_video
/
include
/
i420_buffer_pool
.
h
"
#
include
"
webrtc
/
media
/
base
/
videosinkinterface
.
h
"
#
include
"
webrtc
/
media
/
base
/
videoadapter
.
h
"
#
include
"
webrtc
/
media
/
base
/
videobroadcaster
.
h
"
#
include
<
functional
>
#
include
<
memory
>
namespace
mozilla
{
#
define
KBPS
(
kbps
)
kbps
*
1000
const
int
kViEMinCodecBitrate_bps
=
KBPS
(
30
)
;
const
unsigned
int
kVideoMtu
=
1200
;
const
int
kQpMax
=
56
;
template
<
typename
T
>
T
MinIgnoreZero
(
const
T
&
a
const
T
&
b
)
;
class
VideoStreamFactory
;
class
WebrtcAudioConduit
;
class
nsThread
;
class
WebrtcVideoEncoder
:
public
VideoEncoder
public
webrtc
:
:
VideoEncoder
{
}
;
class
WebrtcVideoDecoder
:
public
VideoDecoder
public
webrtc
:
:
VideoDecoder
{
}
;
class
WebrtcVideoConduit
:
public
VideoSessionConduit
public
webrtc
:
:
Transport
public
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
public
rtc
:
:
VideoSourceInterface
<
webrtc
:
:
VideoFrame
>
{
public
:
static
const
unsigned
int
CODEC_PLNAME_SIZE
;
MediaConduitErrorCode
SetLocalRTPExtensions
(
MediaSessionConduitLocalDirection
aDirection
const
RtpExtList
&
aExtensions
)
override
;
void
SyncTo
(
WebrtcAudioConduit
*
aConduit
)
;
MediaConduitErrorCode
AttachRenderer
(
RefPtr
<
mozilla
:
:
VideoRenderer
>
aVideoRenderer
)
override
;
void
DetachRenderer
(
)
override
;
MediaConduitErrorCode
ReceivedRTPPacket
(
const
void
*
data
int
len
uint32_t
ssrc
)
override
;
MediaConduitErrorCode
ReceivedRTCPPacket
(
const
void
*
data
int
len
)
override
;
MediaConduitErrorCode
StopTransmitting
(
)
override
;
MediaConduitErrorCode
StartTransmitting
(
)
override
;
MediaConduitErrorCode
StopReceiving
(
)
override
;
MediaConduitErrorCode
StartReceiving
(
)
override
;
MediaConduitErrorCode
StopTransmittingLocked
(
)
;
MediaConduitErrorCode
StartTransmittingLocked
(
)
;
MediaConduitErrorCode
StopReceivingLocked
(
)
;
MediaConduitErrorCode
StartReceivingLocked
(
)
;
MediaConduitErrorCode
ConfigureCodecMode
(
webrtc
:
:
VideoCodecMode
)
override
;
MediaConduitErrorCode
ConfigureSendMediaCodec
(
const
VideoCodecConfig
*
codecInfo
)
override
;
MediaConduitErrorCode
ConfigureRecvMediaCodecs
(
const
std
:
:
vector
<
UniquePtr
<
VideoCodecConfig
>
>
&
codecConfigList
)
override
;
MediaConduitErrorCode
SetTransmitterTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
MediaConduitErrorCode
SetReceiverTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
override
;
void
SelectSendResolution
(
unsigned
short
width
unsigned
short
height
)
;
MediaConduitErrorCode
SendVideoFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
override
;
bool
SendRtp
(
const
uint8_t
*
packet
size_t
length
const
webrtc
:
:
PacketOptions
&
options
)
override
;
bool
SendRtcp
(
const
uint8_t
*
packet
size_t
length
)
override
;
void
OnFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
override
;
void
AddOrUpdateSink
(
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
const
rtc
:
:
VideoSinkWants
&
wants
)
override
;
void
RemoveSink
(
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
)
override
;
void
OnSinkWantsChanged
(
const
rtc
:
:
VideoSinkWants
&
wants
)
;
uint64_t
CodecPluginID
(
)
override
;
void
SetPCHandle
(
const
std
:
:
string
&
aPCHandle
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mPCHandle
=
aPCHandle
;
}
void
DeleteStreams
(
)
override
;
bool
Denoising
(
)
const
{
return
mDenoising
;
}
uint8_t
SpatialLayers
(
)
const
{
return
mSpatialLayers
;
}
uint8_t
TemporalLayers
(
)
const
{
return
mTemporalLayers
;
}
webrtc
:
:
VideoCodecMode
CodecMode
(
)
const
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
mCodecMode
;
}
WebrtcVideoConduit
(
RefPtr
<
WebRtcCallWrapper
>
aCall
nsCOMPtr
<
nsIEventTarget
>
aStsThread
)
;
virtual
~
WebrtcVideoConduit
(
)
;
MediaConduitErrorCode
InitMain
(
)
;
virtual
MediaConduitErrorCode
Init
(
)
;
std
:
:
vector
<
unsigned
int
>
GetLocalSSRCs
(
)
override
;
bool
SetLocalSSRCs
(
const
std
:
:
vector
<
unsigned
int
>
&
ssrcs
)
override
;
bool
GetRemoteSSRC
(
unsigned
int
*
ssrc
)
override
;
bool
SetRemoteSSRC
(
unsigned
int
ssrc
)
override
;
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
override
;
bool
SetLocalCNAME
(
const
char
*
cname
)
override
;
bool
SetLocalMID
(
const
std
:
:
string
&
mid
)
override
;
bool
GetRemoteSSRCLocked
(
unsigned
int
*
ssrc
)
;
bool
SetRemoteSSRCLocked
(
unsigned
int
ssrc
)
;
bool
GetSendPacketTypeStats
(
webrtc
:
:
RtcpPacketTypeCounter
*
aPacketCounts
)
override
;
bool
GetRecvPacketTypeStats
(
webrtc
:
:
RtcpPacketTypeCounter
*
aPacketCounts
)
override
;
void
PollStats
(
)
;
void
UpdateVideoStatsTimer
(
)
;
bool
GetVideoEncoderStats
(
double
*
framerateMean
double
*
framerateStdDev
double
*
bitrateMean
double
*
bitrateStdDev
uint32_t
*
droppedFrames
uint32_t
*
framesEncoded
)
override
;
bool
GetVideoDecoderStats
(
double
*
framerateMean
double
*
framerateStdDev
double
*
bitrateMean
double
*
bitrateStdDev
uint32_t
*
discardedPackets
uint32_t
*
framesDecoded
)
override
;
bool
GetAVStats
(
int32_t
*
jitterBufferDelayMs
int32_t
*
playoutBufferDelayMs
int32_t
*
avSyncOffsetMs
)
override
;
bool
GetRTPStats
(
unsigned
int
*
jitterMs
unsigned
int
*
cumulativeLost
)
override
;
bool
GetRTCPReceiverReport
(
DOMHighResTimeStamp
*
timestamp
uint32_t
*
jitterMs
uint32_t
*
packetsReceived
uint64_t
*
bytesReceived
uint32_t
*
cumulativeLost
int32_t
*
rttMs
)
override
;
bool
GetRTCPSenderReport
(
DOMHighResTimeStamp
*
timestamp
unsigned
int
*
packetsSent
uint64_t
*
bytesSent
)
override
;
uint64_t
MozVideoLatencyAvg
(
)
;
void
DisableSsrcChanges
(
)
override
{
ASSERT_ON_THREAD
(
mStsThread
)
;
mAllowSsrcChange
=
false
;
}
private
:
WebrtcVideoConduit
(
const
WebrtcVideoConduit
&
)
=
delete
;
void
operator
=
(
const
WebrtcVideoConduit
&
)
=
delete
;
class
CallStatistics
{
public
:
explicit
CallStatistics
(
nsCOMPtr
<
nsIEventTarget
>
aStatsThread
)
:
mStatsThread
(
aStatsThread
)
{
}
void
Update
(
const
webrtc
:
:
Call
:
:
Stats
&
aStats
)
;
int32_t
RttMs
(
)
const
;
protected
:
const
nsCOMPtr
<
nsIEventTarget
>
mStatsThread
;
private
:
int32_t
mRttMs
=
0
;
}
;
class
StreamStatistics
{
public
:
explicit
StreamStatistics
(
nsCOMPtr
<
nsIEventTarget
>
aStatsThread
)
:
mStatsThread
(
aStatsThread
)
{
}
void
Update
(
const
double
aFrameRate
const
double
aBitrate
const
webrtc
:
:
RtcpPacketTypeCounter
&
aPacketCounts
)
;
bool
GetVideoStreamStats
(
double
&
aOutFrMean
double
&
aOutFrStdDev
double
&
aOutBrMean
double
&
aOutBrStdDev
)
const
;
const
webrtc
:
:
RtcpPacketTypeCounter
&
PacketCounts
(
)
const
;
bool
Active
(
)
const
;
void
SetActive
(
bool
aActive
)
;
protected
:
const
nsCOMPtr
<
nsIEventTarget
>
mStatsThread
;
private
:
bool
mActive
=
false
;
RunningStat
mFrameRate
;
RunningStat
mBitrate
;
webrtc
:
:
RtcpPacketTypeCounter
mPacketCounts
;
}
;
class
SendStreamStatistics
:
public
StreamStatistics
{
public
:
explicit
SendStreamStatistics
(
nsCOMPtr
<
nsIEventTarget
>
aStatsThread
)
:
StreamStatistics
(
std
:
:
forward
<
nsCOMPtr
<
nsIEventTarget
>
>
(
aStatsThread
)
)
{
}
uint32_t
DroppedFrames
(
)
const
;
uint32_t
FramesEncoded
(
)
const
;
void
Update
(
const
webrtc
:
:
VideoSendStream
:
:
Stats
&
aStats
uint32_t
aConfiguredSsrc
)
;
void
FrameDeliveredToEncoder
(
)
;
bool
SsrcFound
(
)
const
;
uint32_t
JitterMs
(
)
const
;
uint32_t
PacketsLost
(
)
const
;
uint64_t
BytesReceived
(
)
const
;
uint32_t
PacketsReceived
(
)
const
;
private
:
uint32_t
mDroppedFrames
=
0
;
uint32_t
mFramesEncoded
=
0
;
int32_t
mFramesDeliveredToEncoder
;
bool
mSsrcFound
=
false
;
uint32_t
mJitterMs
=
0
;
uint32_t
mPacketsLost
=
0
;
uint64_t
mBytesReceived
=
0
;
uint32_t
mPacketsReceived
=
0
;
}
;
class
ReceiveStreamStatistics
:
public
StreamStatistics
{
public
:
explicit
ReceiveStreamStatistics
(
nsCOMPtr
<
nsIEventTarget
>
aStatsThread
)
:
StreamStatistics
(
std
:
:
forward
<
nsCOMPtr
<
nsIEventTarget
>
>
(
aStatsThread
)
)
{
}
uint32_t
DiscardedPackets
(
)
const
;
uint32_t
FramesDecoded
(
)
const
;
uint32_t
JitterMs
(
)
const
;
uint32_t
PacketsLost
(
)
const
;
uint32_t
Ssrc
(
)
const
;
void
Update
(
const
webrtc
:
:
VideoReceiveStream
:
:
Stats
&
aStats
)
;
private
:
uint32_t
mDiscardedPackets
=
0
;
uint32_t
mFramesDecoded
=
0
;
uint32_t
mJitterMs
=
0
;
uint32_t
mPacketsLost
=
0
;
uint32_t
mSsrc
=
0
;
}
;
class
VideoEncoderConfigBuilder
{
public
:
class
SimulcastStreamConfig
{
public
:
int
jsMaxBitrate
;
double
jsScaleDownBy
=
1
.
0
;
}
;
void
SetEncoderSpecificSettings
(
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoEncoderConfig
:
:
EncoderSpecificSettings
>
aSettings
)
;
void
SetVideoStreamFactory
(
rtc
:
:
scoped_refptr
<
VideoStreamFactory
>
aFactory
)
;
void
SetMinTransmitBitrateBps
(
int
aXmitMinBps
)
;
void
SetContentType
(
webrtc
:
:
VideoEncoderConfig
:
:
ContentType
aContentType
)
;
void
SetMaxEncodings
(
size_t
aMaxStreams
)
;
void
AddStream
(
webrtc
:
:
VideoStream
aStream
)
;
void
AddStream
(
webrtc
:
:
VideoStream
aStream
const
SimulcastStreamConfig
&
aSimulcastConfig
)
;
size_t
StreamCount
(
)
const
;
void
ClearStreams
(
)
;
void
ForEachStream
(
const
std
:
:
function
<
void
(
webrtc
:
:
VideoStream
&
SimulcastStreamConfig
&
const
size_t
index
)
>
&
&
f
)
;
webrtc
:
:
VideoEncoderConfig
CopyConfig
(
)
const
{
return
mConfig
.
Copy
(
)
;
}
size_t
NumberOfStreams
(
)
const
{
return
mConfig
.
number_of_streams
;
}
private
:
webrtc
:
:
VideoEncoderConfig
mConfig
;
std
:
:
vector
<
SimulcastStreamConfig
>
mSimulcastStreams
;
}
;
void
DumpCodecDB
(
)
const
;
void
VideoLatencyUpdate
(
uint64_t
new_sample
)
;
MediaConduitErrorCode
CreateSendStream
(
)
;
void
DeleteSendStream
(
)
;
MediaConduitErrorCode
CreateRecvStream
(
)
;
void
DeleteRecvStream
(
)
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoDecoder
>
CreateDecoder
(
webrtc
:
:
VideoCodecType
aType
)
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
CreateEncoder
(
webrtc
:
:
VideoCodecType
aType
bool
enable_simulcast
)
;
MediaConduitErrorCode
DeliverPacket
(
const
void
*
data
int
len
)
override
;
bool
RequiresNewSendStream
(
const
VideoCodecConfig
&
newConfig
)
const
;
mozilla
:
:
ReentrantMonitor
mTransportMonitor
;
RefPtr
<
TransportInterface
>
mTransmitterTransport
;
RefPtr
<
TransportInterface
>
mReceiverTransport
;
RefPtr
<
mozilla
:
:
VideoRenderer
>
mRenderer
;
unsigned
short
mReceivingWidth
=
0
;
unsigned
short
mReceivingHeight
=
0
;
const
nsCOMPtr
<
nsIEventTarget
>
mStsThread
;
Mutex
mMutex
;
UniquePtr
<
cricket
:
:
VideoAdapter
>
mVideoAdapter
;
AutoTArray
<
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
1
>
mRegisteredSinks
;
rtc
:
:
VideoBroadcaster
mVideoBroadcaster
;
webrtc
:
:
I420BufferPool
mBufferPool
;
mozilla
:
:
Atomic
<
bool
>
mEngineTransmitting
;
mozilla
:
:
Atomic
<
bool
>
mEngineReceiving
;
nsTArray
<
UniquePtr
<
VideoCodecConfig
>
>
mRecvCodecList
;
nsAutoPtr
<
VideoCodecConfig
>
mCurSendCodecConfig
;
SendStreamStatistics
mSendStreamStats
;
ReceiveStreamStatistics
mRecvStreamStats
;
CallStatistics
mCallStats
;
webrtc
:
:
VideoReceiveStream
*
mRecvStream
=
nullptr
;
webrtc
:
:
VideoSendStream
*
mSendStream
=
nullptr
;
unsigned
short
mLastWidth
=
0
;
unsigned
short
mLastHeight
=
0
;
unsigned
int
mSendingFramerate
;
bool
mVideoLatencyTestEnable
=
false
;
uint64_t
mVideoLatencyAvg
=
0
;
int
mMinBitrate
=
0
;
int
mStartBitrate
=
0
;
int
mPrefMaxBitrate
=
0
;
int
mNegotiatedMaxBitrate
=
0
;
int
mMinBitrateEstimate
=
0
;
bool
mDenoising
=
false
;
bool
mLockScaling
=
false
;
uint8_t
mSpatialLayers
=
1
;
uint8_t
mTemporalLayers
=
1
;
static
const
unsigned
int
sAlphaNum
=
7
;
static
const
unsigned
int
sAlphaDen
=
8
;
static
const
unsigned
int
sRoundingPadding
=
1024
;
RefPtr
<
WebrtcAudioConduit
>
mSyncedTo
;
webrtc
:
:
VideoCodecMode
mCodecMode
;
const
RefPtr
<
WebRtcCallWrapper
>
mCall
;
webrtc
:
:
VideoSendStream
:
:
Config
mSendStreamConfig
;
VideoEncoderConfigBuilder
mEncoderConfig
;
RefPtr
<
rtc
:
:
RefCountedObject
<
VideoStreamFactory
>
>
mVideoStreamFactory
;
webrtc
:
:
VideoReceiveStream
:
:
Config
mRecvStreamConfig
;
bool
mAllowSsrcChange
=
true
;
bool
mWaitingForInitialSsrc
=
true
;
Atomic
<
uint32_t
>
mRecvSSRC
;
RtpPacketQueue
mRtpPacketQueue
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
mEncoder
;
std
:
:
vector
<
std
:
:
unique_ptr
<
webrtc
:
:
VideoDecoder
>
>
mDecoders
;
uint64_t
mSendCodecPluginID
=
0
;
uint64_t
mRecvCodecPluginID
=
0
;
nsCOMPtr
<
nsITimer
>
mVideoStatsTimer
;
bool
mVideoStatsTimerActive
=
false
;
std
:
:
string
mPCHandle
;
}
;
}
#
endif
