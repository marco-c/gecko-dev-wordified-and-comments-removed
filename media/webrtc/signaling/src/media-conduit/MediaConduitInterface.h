#
ifndef
MEDIA_CONDUIT_ABSTRACTION_
#
define
MEDIA_CONDUIT_ABSTRACTION_
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
RefCounted
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
RtpSourceObserver
.
h
"
#
include
"
CodecConfig
.
h
"
#
include
"
VideoTypes
.
h
"
#
include
"
MediaConduitErrors
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
webrtc
/
call
.
h
"
#
include
"
webrtc
/
config
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
api
/
video
/
video_frame_buffer
.
h
"
#
include
"
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log
.
h
"
#
include
<
vector
>
#
include
<
set
>
namespace
webrtc
{
class
VideoFrame
;
}
namespace
mozilla
{
enum
class
MediaSessionConduitLocalDirection
:
int
{
kSend
kRecv
}
;
using
RtpExtList
=
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
;
class
TransportInterface
{
protected
:
virtual
~
TransportInterface
(
)
{
}
public
:
virtual
nsresult
SendRtpPacket
(
const
uint8_t
*
data
size_t
len
)
=
0
;
virtual
nsresult
SendRtcpPacket
(
const
uint8_t
*
data
size_t
len
)
=
0
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
TransportInterface
)
}
;
class
VideoRenderer
{
protected
:
virtual
~
VideoRenderer
(
)
{
}
public
:
virtual
void
FrameSizeChange
(
unsigned
int
width
unsigned
int
height
)
=
0
;
virtual
void
RenderVideoFrame
(
const
webrtc
:
:
VideoFrameBuffer
&
buffer
uint32_t
time_stamp
int64_t
render_time
)
=
0
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
VideoRenderer
)
}
;
class
MediaSessionConduit
{
protected
:
virtual
~
MediaSessionConduit
(
)
{
}
public
:
enum
Type
{
AUDIO
VIDEO
}
;
static
std
:
:
string
LocalDirectionToString
(
const
MediaSessionConduitLocalDirection
aDirection
)
{
return
aDirection
=
=
MediaSessionConduitLocalDirection
:
:
kSend
?
"
send
"
:
"
receive
"
;
}
virtual
Type
type
(
)
const
=
0
;
virtual
MediaConduitErrorCode
ReceivedRTPPacket
(
const
void
*
data
int
len
uint32_t
ssrc
)
=
0
;
virtual
MediaConduitErrorCode
ReceivedRTCPPacket
(
const
void
*
data
int
len
)
=
0
;
virtual
MediaConduitErrorCode
StopTransmitting
(
)
=
0
;
virtual
MediaConduitErrorCode
StartTransmitting
(
)
=
0
;
virtual
MediaConduitErrorCode
StopReceiving
(
)
=
0
;
virtual
MediaConduitErrorCode
StartReceiving
(
)
=
0
;
virtual
MediaConduitErrorCode
SetTransmitterTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
=
0
;
virtual
MediaConduitErrorCode
SetReceiverTransport
(
RefPtr
<
TransportInterface
>
aTransport
)
=
0
;
virtual
bool
SetLocalSSRCs
(
const
std
:
:
vector
<
unsigned
int
>
&
aSSRCs
)
=
0
;
virtual
std
:
:
vector
<
unsigned
int
>
GetLocalSSRCs
(
)
=
0
;
virtual
MediaConduitErrorCode
SetLocalRTPExtensions
(
MediaSessionConduitLocalDirection
aDirection
const
RtpExtList
&
aExtensions
)
=
0
;
virtual
bool
GetRemoteSSRC
(
unsigned
int
*
ssrc
)
=
0
;
virtual
bool
SetRemoteSSRC
(
unsigned
int
ssrc
)
=
0
;
virtual
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
=
0
;
virtual
bool
SetLocalCNAME
(
const
char
*
cname
)
=
0
;
virtual
bool
SetLocalMID
(
const
std
:
:
string
&
mid
)
=
0
;
virtual
bool
GetSendPacketTypeStats
(
webrtc
:
:
RtcpPacketTypeCounter
*
aPacketCounts
)
=
0
;
virtual
bool
GetRecvPacketTypeStats
(
webrtc
:
:
RtcpPacketTypeCounter
*
aPacketCounts
)
=
0
;
virtual
bool
GetVideoEncoderStats
(
double
*
framerateMean
double
*
framerateStdDev
double
*
bitrateMean
double
*
bitrateStdDev
uint32_t
*
droppedFrames
uint32_t
*
framesEncoded
)
=
0
;
virtual
bool
GetVideoDecoderStats
(
double
*
framerateMean
double
*
framerateStdDev
double
*
bitrateMean
double
*
bitrateStdDev
uint32_t
*
discardedPackets
uint32_t
*
framesDecoded
)
=
0
;
virtual
bool
GetAVStats
(
int32_t
*
jitterBufferDelayMs
int32_t
*
playoutBufferDelayMs
int32_t
*
avSyncOffsetMs
)
=
0
;
virtual
bool
GetRTPStats
(
unsigned
int
*
jitterMs
unsigned
int
*
cumulativeLost
)
=
0
;
virtual
bool
GetRTCPReceiverReport
(
DOMHighResTimeStamp
*
timestamp
uint32_t
*
jitterMs
uint32_t
*
packetsReceived
uint64_t
*
bytesReceived
uint32_t
*
cumulativeLost
int32_t
*
rttMs
)
=
0
;
virtual
bool
GetRTCPSenderReport
(
DOMHighResTimeStamp
*
timestamp
unsigned
int
*
packetsSent
uint64_t
*
bytesSent
)
=
0
;
virtual
uint64_t
CodecPluginID
(
)
=
0
;
virtual
void
SetPCHandle
(
const
std
:
:
string
&
aPCHandle
)
=
0
;
virtual
MediaConduitErrorCode
DeliverPacket
(
const
void
*
data
int
len
)
=
0
;
virtual
void
DeleteStreams
(
)
=
0
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
MediaSessionConduit
)
}
;
class
WebRtcCallWrapper
:
public
RefCounted
<
WebRtcCallWrapper
>
{
public
:
typedef
webrtc
:
:
Call
:
:
Config
Config
;
static
RefPtr
<
WebRtcCallWrapper
>
Create
(
)
{
return
new
WebRtcCallWrapper
(
)
;
}
static
RefPtr
<
WebRtcCallWrapper
>
Create
(
UniquePtr
<
webrtc
:
:
Call
>
&
&
aCall
)
{
return
new
WebRtcCallWrapper
(
std
:
:
move
(
aCall
)
)
;
}
WebRtcCallWrapper
(
const
WebRtcCallWrapper
&
)
=
delete
;
void
operator
=
(
const
WebRtcCallWrapper
&
)
=
delete
;
webrtc
:
:
Call
*
Call
(
)
const
{
return
mCall
.
get
(
)
;
}
virtual
~
WebRtcCallWrapper
(
)
{
if
(
mCall
-
>
voice_engine
(
)
)
{
webrtc
:
:
VoiceEngine
*
voice_engine
=
mCall
-
>
voice_engine
(
)
;
mCall
.
reset
(
nullptr
)
;
webrtc
:
:
VoiceEngine
:
:
Delete
(
voice_engine
)
;
}
else
{
mCall
.
reset
(
nullptr
)
;
}
}
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
{
for
(
auto
conduit
:
mConduits
)
{
if
(
!
conduit
-
>
UnsetRemoteSSRC
(
ssrc
)
)
{
return
false
;
}
}
return
true
;
}
void
RegisterConduit
(
MediaSessionConduit
*
conduit
)
{
mConduits
.
insert
(
conduit
)
;
}
void
UnregisterConduit
(
MediaSessionConduit
*
conduit
)
{
mConduits
.
erase
(
conduit
)
;
}
MOZ_DECLARE_REFCOUNTED_TYPENAME
(
WebRtcCallWrapper
)
private
:
WebRtcCallWrapper
(
)
{
webrtc
:
:
Call
:
:
Config
config
(
&
mEventLog
)
;
mCall
.
reset
(
webrtc
:
:
Call
:
:
Create
(
config
)
)
;
}
explicit
WebRtcCallWrapper
(
UniquePtr
<
webrtc
:
:
Call
>
&
&
aCall
)
{
MOZ_ASSERT
(
aCall
)
;
mCall
=
std
:
:
move
(
aCall
)
;
}
UniquePtr
<
webrtc
:
:
Call
>
mCall
;
webrtc
:
:
RtcEventLogNullImpl
mEventLog
;
std
:
:
set
<
MediaSessionConduit
*
>
mConduits
;
}
;
class
CodecPluginID
{
public
:
virtual
~
CodecPluginID
(
)
{
}
virtual
uint64_t
PluginID
(
)
const
=
0
;
}
;
class
VideoEncoder
:
public
CodecPluginID
{
public
:
virtual
~
VideoEncoder
(
)
{
}
}
;
class
VideoDecoder
:
public
CodecPluginID
{
public
:
virtual
~
VideoDecoder
(
)
{
}
}
;
class
VideoSessionConduit
:
public
MediaSessionConduit
{
public
:
static
RefPtr
<
VideoSessionConduit
>
Create
(
RefPtr
<
WebRtcCallWrapper
>
aCall
nsCOMPtr
<
nsIEventTarget
>
aStsThread
)
;
enum
FrameRequestType
{
FrameRequestNone
FrameRequestFir
FrameRequestPli
FrameRequestUnknown
}
;
VideoSessionConduit
(
)
:
mFrameRequestMethod
(
FrameRequestNone
)
mUsingNackBasic
(
false
)
mUsingTmmbr
(
false
)
mUsingFEC
(
false
)
{
}
virtual
~
VideoSessionConduit
(
)
{
}
Type
type
(
)
const
override
{
return
VIDEO
;
}
MediaConduitErrorCode
SetLocalRTPExtensions
(
MediaSessionConduitLocalDirection
aDirection
const
RtpExtList
&
extensions
)
override
=
0
;
virtual
MediaConduitErrorCode
AttachRenderer
(
RefPtr
<
mozilla
:
:
VideoRenderer
>
aRenderer
)
=
0
;
virtual
void
DetachRenderer
(
)
=
0
;
virtual
void
DisableSsrcChanges
(
)
=
0
;
bool
SetRemoteSSRC
(
unsigned
int
ssrc
)
override
=
0
;
bool
UnsetRemoteSSRC
(
uint32_t
ssrc
)
override
=
0
;
virtual
MediaConduitErrorCode
SendVideoFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
=
0
;
virtual
MediaConduitErrorCode
ConfigureCodecMode
(
webrtc
:
:
VideoCodecMode
)
=
0
;
virtual
MediaConduitErrorCode
ConfigureSendMediaCodec
(
const
VideoCodecConfig
*
sendSessionConfig
)
=
0
;
virtual
MediaConduitErrorCode
ConfigureRecvMediaCodecs
(
const
std
:
:
vector
<
UniquePtr
<
VideoCodecConfig
>
>
&
recvCodecConfigList
)
=
0
;
FrameRequestType
FrameRequestMethod
(
)
const
{
return
mFrameRequestMethod
;
}
bool
UsingNackBasic
(
)
const
{
return
mUsingNackBasic
;
}
bool
UsingTmmbr
(
)
const
{
return
mUsingTmmbr
;
}
bool
UsingFEC
(
)
const
{
return
mUsingFEC
;
}
protected
:
FrameRequestType
mFrameRequestMethod
;
bool
mUsingNackBasic
;
bool
mUsingTmmbr
;
bool
mUsingFEC
;
}
;
class
AudioSessionConduit
:
public
MediaSessionConduit
{
public
:
static
RefPtr
<
AudioSessionConduit
>
Create
(
)
;
virtual
~
AudioSessionConduit
(
)
{
}
Type
type
(
)
const
override
{
return
AUDIO
;
}
MediaConduitErrorCode
SetLocalRTPExtensions
(
MediaSessionConduitLocalDirection
aDirection
const
RtpExtList
&
extensions
)
override
=
0
;
virtual
MediaConduitErrorCode
SendAudioFrame
(
const
int16_t
audioData
[
]
int32_t
lengthSamples
int32_t
samplingFreqHz
uint32_t
channels
int32_t
capture_delay
)
=
0
;
virtual
MediaConduitErrorCode
GetAudioFrame
(
int16_t
speechData
[
]
int32_t
samplingFreqHz
int32_t
capture_delay
int
&
lengthSamples
)
=
0
;
virtual
bool
IsSamplingFreqSupported
(
int
freq
)
const
=
0
;
virtual
MediaConduitErrorCode
ConfigureSendMediaCodec
(
const
AudioCodecConfig
*
sendCodecConfig
)
=
0
;
virtual
MediaConduitErrorCode
ConfigureRecvMediaCodecs
(
const
std
:
:
vector
<
UniquePtr
<
AudioCodecConfig
>
>
&
recvCodecConfigList
)
=
0
;
virtual
bool
SetDtmfPayloadType
(
unsigned
char
type
int
freq
)
=
0
;
virtual
bool
InsertDTMFTone
(
int
channel
int
eventCode
bool
outOfBand
int
lengthMs
int
attenuationDb
)
=
0
;
virtual
void
GetRtpSources
(
const
int64_t
aTimeNow
nsTArray
<
dom
:
:
RTCRtpSourceEntry
>
&
outSources
)
=
0
;
}
;
}
#
endif
