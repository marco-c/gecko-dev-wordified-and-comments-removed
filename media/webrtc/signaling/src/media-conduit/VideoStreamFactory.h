#
ifndef
VideoStreamFactory_h
#
define
VideoStreamFactory_h
#
include
"
CodecConfig
.
h
"
#
include
"
mozilla
/
Atomics
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
webrtc
/
media
/
base
/
videoadapter
.
h
"
namespace
mozilla
{
class
VideoStreamFactory
:
public
webrtc
:
:
VideoEncoderConfig
:
:
VideoStreamFactoryInterface
{
public
:
struct
ResolutionAndBitrateLimits
{
int
resolution_in_mb
;
int
min_bitrate_bps
;
int
start_bitrate_bps
;
int
max_bitrate_bps
;
}
;
VideoStreamFactory
(
VideoCodecConfig
aConfig
webrtc
:
:
VideoCodecMode
aCodecMode
int
aMinBitrate
int
aStartBitrate
int
aPrefMaxBitrate
int
aNegotiatedMaxBitrate
unsigned
int
aSendingFramerate
)
:
mCodecMode
(
aCodecMode
)
mSendingFramerate
(
aSendingFramerate
)
mCodecConfig
(
std
:
:
forward
<
VideoCodecConfig
>
(
aConfig
)
)
mMinBitrate
(
aMinBitrate
)
mStartBitrate
(
aStartBitrate
)
mPrefMaxBitrate
(
aPrefMaxBitrate
)
mNegotiatedMaxBitrate
(
aNegotiatedMaxBitrate
)
mSimulcastAdapter
(
MakeUnique
<
cricket
:
:
VideoAdapter
>
(
)
)
{
}
void
SetCodecMode
(
webrtc
:
:
VideoCodecMode
aCodecMode
)
;
void
SetSendingFramerate
(
unsigned
int
aSendingFramerate
)
;
std
:
:
vector
<
webrtc
:
:
VideoStream
>
CreateEncoderStreams
(
int
width
int
height
const
webrtc
:
:
VideoEncoderConfig
&
config
)
override
;
private
:
Atomic
<
webrtc
:
:
VideoCodecMode
>
mCodecMode
;
Atomic
<
unsigned
int
>
mSendingFramerate
;
const
VideoCodecConfig
mCodecConfig
;
const
int
mMinBitrate
=
0
;
const
int
mStartBitrate
=
0
;
const
int
mPrefMaxBitrate
=
0
;
const
int
mNegotiatedMaxBitrate
=
0
;
UniquePtr
<
cricket
:
:
VideoAdapter
>
mSimulcastAdapter
;
}
;
}
#
endif
