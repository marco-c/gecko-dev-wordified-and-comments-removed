#
include
"
RtpLogger
.
h
"
#
include
"
CSFLog
.
h
"
#
include
<
ctime
>
#
include
<
iomanip
>
#
include
<
sstream
>
#
ifdef
_WIN32
#
include
<
time
.
h
>
#
include
<
sys
/
timeb
.
h
>
#
else
#
include
<
sys
/
time
.
h
>
#
endif
using
namespace
mozilla
;
static
const
char
*
rlLogTag
=
"
RtpLogger
"
;
#
ifdef
LOGTAG
#
undef
LOGTAG
#
endif
#
define
LOGTAG
rlLogTag
namespace
mozilla
{
bool
RtpLogger
:
:
IsPacketLoggingOn
(
)
{
return
CSFLogTestLevel
(
CSF_LOG_DEBUG
)
;
}
void
RtpLogger
:
:
LogPacket
(
const
unsigned
char
*
data
int
len
bool
input
bool
isRtp
int
headerLength
std
:
:
string
desc
)
{
if
(
CSFLogTestLevel
(
CSF_LOG_DEBUG
)
)
{
std
:
:
stringstream
ss
;
ss
<
<
(
input
?
"
I
"
:
"
O
"
)
;
std
:
:
time_t
t
=
std
:
:
time
(
nullptr
)
;
std
:
:
tm
tm
=
*
std
:
:
localtime
(
&
t
)
;
char
buf
[
9
]
;
if
(
0
<
strftime
(
buf
sizeof
(
buf
)
"
%
H
:
%
M
:
%
S
"
&
tm
)
)
{
ss
<
<
buf
;
}
ss
<
<
std
:
:
setfill
(
'
0
'
)
;
#
ifdef
_WIN32
struct
timeb
tb
;
ftime
(
&
tb
)
;
ss
<
<
"
.
"
<
<
(
tb
.
millitm
)
<
<
"
"
;
#
else
struct
timeval
tv
;
gettimeofday
(
&
tv
NULL
)
;
ss
<
<
"
.
"
<
<
(
tv
.
tv_usec
)
<
<
"
"
;
#
endif
ss
<
<
"
000000
"
;
ss
<
<
std
:
:
hex
<
<
std
:
:
setfill
(
'
0
'
)
;
int
offset_
=
headerLength
;
if
(
isRtp
&
&
(
offset_
+
5
<
len
)
)
{
offset_
+
=
5
;
}
for
(
int
i
=
0
;
i
<
len
;
+
+
i
)
{
if
(
isRtp
&
&
i
>
offset_
)
{
ss
<
<
"
00
"
;
}
else
{
ss
<
<
"
"
<
<
std
:
:
setw
(
2
)
<
<
(
int
)
data
[
i
]
;
}
}
CSFLogDebug
(
LOGTAG
"
%
s
%
s
%
s
"
ss
.
str
(
)
.
c_str
(
)
(
isRtp
?
"
RTP_PACKET
"
:
"
RTCP_PACKET
"
)
desc
.
c_str
(
)
)
;
}
}
}
