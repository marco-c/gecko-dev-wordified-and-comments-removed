#
include
"
MediaPipeline
.
h
"
#
include
<
inttypes
.
h
>
#
include
<
math
.
h
>
#
include
"
AudioSegment
.
h
"
#
include
"
AudioConverter
.
h
"
#
include
"
DOMMediaStream
.
h
"
#
include
"
ImageContainer
.
h
"
#
include
"
ImageTypes
.
h
"
#
include
"
Layers
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
MediaEngine
.
h
"
#
include
"
MediaPipelineFilter
.
h
"
#
include
"
MediaSegment
.
h
"
#
include
"
MediaStreamGraphImpl
.
h
"
#
include
"
MediaStreamListener
.
h
"
#
include
"
MediaStreamTrack
.
h
"
#
include
"
RtpLogger
.
h
"
#
include
"
VideoFrameConverter
.
h
"
#
include
"
VideoSegment
.
h
"
#
include
"
VideoStreamTrack
.
h
"
#
include
"
VideoUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
PeerIdentity
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
SharedThreadPool
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
TaskQueue
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
UniquePtrExtensions
.
h
"
#
include
"
mozilla
/
dom
/
RTCStatsReportBinding
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
runnable_utils
.
h
"
#
include
"
signaling
/
src
/
peerconnection
/
MediaTransportHandler
.
h
"
#
include
"
Tracing
.
h
"
#
include
"
WebrtcImageBuffer
.
h
"
#
include
"
webrtc
/
common_video
/
include
/
video_frame_buffer
.
h
"
#
define
AUDIO_SAMPLE_BUFFER_MAX_BYTES
(
480
*
2
*
2
)
static_assert
(
(
WEBRTC_MAX_SAMPLE_RATE
/
100
)
*
sizeof
(
uint16_t
)
*
2
<
=
AUDIO_SAMPLE_BUFFER_MAX_BYTES
"
AUDIO_SAMPLE_BUFFER_MAX_BYTES
is
not
large
enough
"
)
;
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
layers
;
mozilla
:
:
LazyLogModule
gMediaPipelineLog
(
"
MediaPipeline
"
)
;
namespace
mozilla
{
static
const
auto
kQuashRtcpRxPref
=
NS_LITERAL_CSTRING
(
"
media
.
webrtc
.
net
.
force_disable_rtcp_reception
"
)
;
Atomic
<
bool
ReleaseAcquire
>
MediaPipeline
:
:
sPrefsRegistered
(
false
)
;
Atomic
<
bool
ReleaseAcquire
>
MediaPipeline
:
:
sForceDisableRtcpReceptionPref
(
false
)
;
class
AudioProxyThread
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
AudioProxyThread
)
explicit
AudioProxyThread
(
AudioSessionConduit
*
aConduit
)
:
mConduit
(
aConduit
)
mTaskQueue
(
new
TaskQueue
(
GetMediaThreadPool
(
MediaThreadType
:
:
WEBRTC_DECODER
)
"
AudioProxy
"
)
)
mAudioConverter
(
nullptr
)
{
MOZ_ASSERT
(
mConduit
)
;
MOZ_COUNT_CTOR
(
AudioProxyThread
)
;
}
uint32_t
AppropriateSendingRateForInputRate
(
uint32_t
aInputRate
)
{
AudioSessionConduit
*
conduit
=
static_cast
<
AudioSessionConduit
*
>
(
mConduit
.
get
(
)
)
;
if
(
conduit
-
>
IsSamplingFreqSupported
(
aInputRate
)
)
{
return
aInputRate
;
}
if
(
aInputRate
<
16000
)
{
return
16000
;
}
else
if
(
aInputRate
<
32000
)
{
return
32000
;
}
else
if
(
aInputRate
<
44100
)
{
return
44100
;
}
else
{
return
48000
;
}
}
void
InternalProcessAudioChunk
(
TrackRate
aRate
const
AudioChunk
&
aChunk
bool
aEnabled
)
{
MOZ_ASSERT
(
mTaskQueue
-
>
IsCurrentThreadIn
(
)
)
;
uint32_t
outputChannels
=
aChunk
.
ChannelCount
(
)
=
=
1
?
1
:
2
;
int32_t
transmissionRate
=
AppropriateSendingRateForInputRate
(
aRate
)
;
if
(
aEnabled
&
&
outputChannels
=
=
1
&
&
aChunk
.
mBufferFormat
=
=
AUDIO_FORMAT_S16
&
&
transmissionRate
=
=
aRate
)
{
const
int16_t
*
samples
=
aChunk
.
ChannelData
<
int16_t
>
(
)
.
Elements
(
)
[
0
]
;
PacketizeAndSend
(
samples
transmissionRate
outputChannels
aChunk
.
mDuration
)
;
return
;
}
uint32_t
sampleCount
=
aChunk
.
mDuration
*
outputChannels
;
if
(
mInterleavedAudio
.
Length
(
)
<
sampleCount
)
{
mInterleavedAudio
.
SetLength
(
sampleCount
)
;
}
if
(
!
aEnabled
|
|
aChunk
.
mBufferFormat
=
=
AUDIO_FORMAT_SILENCE
)
{
PodZero
(
mInterleavedAudio
.
Elements
(
)
sampleCount
)
;
}
else
if
(
aChunk
.
mBufferFormat
=
=
AUDIO_FORMAT_FLOAT32
)
{
DownmixAndInterleave
(
aChunk
.
ChannelData
<
float
>
(
)
aChunk
.
mDuration
aChunk
.
mVolume
outputChannels
mInterleavedAudio
.
Elements
(
)
)
;
}
else
if
(
aChunk
.
mBufferFormat
=
=
AUDIO_FORMAT_S16
)
{
DownmixAndInterleave
(
aChunk
.
ChannelData
<
int16_t
>
(
)
aChunk
.
mDuration
aChunk
.
mVolume
outputChannels
mInterleavedAudio
.
Elements
(
)
)
;
}
int16_t
*
inputAudio
=
mInterleavedAudio
.
Elements
(
)
;
size_t
inputAudioFrameCount
=
aChunk
.
mDuration
;
AudioConfig
inputConfig
(
AudioConfig
:
:
ChannelLayout
(
outputChannels
)
aRate
AudioConfig
:
:
FORMAT_S16
)
;
AudioConfig
outputConfig
(
AudioConfig
:
:
ChannelLayout
(
outputChannels
)
transmissionRate
AudioConfig
:
:
FORMAT_S16
)
;
if
(
!
mAudioConverter
|
|
mAudioConverter
-
>
InputConfig
(
)
!
=
inputConfig
|
|
mAudioConverter
-
>
OutputConfig
(
)
!
=
outputConfig
)
{
mAudioConverter
=
MakeUnique
<
AudioConverter
>
(
inputConfig
outputConfig
)
;
}
int16_t
*
processedAudio
=
nullptr
;
size_t
framesProcessed
=
mAudioConverter
-
>
Process
(
inputAudio
inputAudioFrameCount
)
;
if
(
framesProcessed
=
=
0
)
{
framesProcessed
=
mAudioConverter
-
>
Process
(
mOutputAudio
inputAudio
inputAudioFrameCount
)
;
processedAudio
=
mOutputAudio
.
Data
(
)
;
}
else
{
processedAudio
=
inputAudio
;
}
PacketizeAndSend
(
processedAudio
transmissionRate
outputChannels
framesProcessed
)
;
}
void
PacketizeAndSend
(
const
int16_t
*
aAudioData
uint32_t
aRate
uint32_t
aChannels
uint32_t
aFrameCount
)
{
MOZ_ASSERT
(
AppropriateSendingRateForInputRate
(
aRate
)
=
=
aRate
)
;
MOZ_ASSERT
(
aChannels
=
=
1
|
|
aChannels
=
=
2
)
;
MOZ_ASSERT
(
aAudioData
)
;
uint32_t
audio_10ms
=
aRate
/
100
;
if
(
!
mPacketizer
|
|
mPacketizer
-
>
PacketSize
(
)
!
=
audio_10ms
|
|
mPacketizer
-
>
Channels
(
)
!
=
aChannels
)
{
mPacketizer
=
MakeUnique
<
AudioPacketizer
<
int16_t
int16_t
>
>
(
audio_10ms
aChannels
)
;
mPacket
=
MakeUnique
<
int16_t
[
]
>
(
audio_10ms
*
aChannels
)
;
}
mPacketizer
-
>
Input
(
aAudioData
aFrameCount
)
;
while
(
mPacketizer
-
>
PacketsAvailable
(
)
)
{
mPacketizer
-
>
Output
(
mPacket
.
get
(
)
)
;
mConduit
-
>
SendAudioFrame
(
mPacket
.
get
(
)
mPacketizer
-
>
PacketSize
(
)
aRate
mPacketizer
-
>
Channels
(
)
0
)
;
}
}
void
QueueAudioChunk
(
TrackRate
aRate
const
AudioChunk
&
aChunk
bool
aEnabled
)
{
RefPtr
<
AudioProxyThread
>
self
=
this
;
nsresult
rv
=
mTaskQueue
-
>
Dispatch
(
NS_NewRunnableFunction
(
"
AudioProxyThread
:
:
QueueAudioChunk
"
[
self
aRate
aChunk
aEnabled
]
(
)
{
self
-
>
InternalProcessAudioChunk
(
aRate
aChunk
aEnabled
)
;
}
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
NS_SUCCEEDED
(
rv
)
)
;
Unused
<
<
rv
;
}
protected
:
virtual
~
AudioProxyThread
(
)
{
NS_ReleaseOnMainThreadSystemGroup
(
"
AudioProxyThread
:
:
mConduit
"
mConduit
.
forget
(
)
)
;
MOZ_COUNT_DTOR
(
AudioProxyThread
)
;
}
RefPtr
<
AudioSessionConduit
>
mConduit
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
UniquePtr
<
AudioPacketizer
<
int16_t
int16_t
>
>
mPacketizer
;
UniquePtr
<
int16_t
[
]
>
mPacket
;
nsTArray
<
int16_t
>
mInterleavedAudio
;
AlignedShortBuffer
mOutputAudio
;
UniquePtr
<
AudioConverter
>
mAudioConverter
;
}
;
MediaPipeline
:
:
MediaPipeline
(
const
std
:
:
string
&
aPc
MediaTransportHandler
*
aTransportHandler
DirectionType
aDirection
nsCOMPtr
<
nsIEventTarget
>
aMainThread
nsCOMPtr
<
nsIEventTarget
>
aStsThread
RefPtr
<
MediaSessionConduit
>
aConduit
)
:
mDirection
(
aDirection
)
mLevel
(
0
)
mTransportHandler
(
aTransportHandler
)
mConduit
(
aConduit
)
mMainThread
(
aMainThread
)
mStsThread
(
aStsThread
)
mTransport
(
new
PipelineTransport
(
aStsThread
)
)
mRtpPacketsSent
(
0
)
mRtcpPacketsSent
(
0
)
mRtpPacketsReceived
(
0
)
mRtcpPacketsReceived
(
0
)
mRtpBytesSent
(
0
)
mRtpBytesReceived
(
0
)
mPc
(
aPc
)
mRtpParser
(
webrtc
:
:
RtpHeaderParser
:
:
Create
(
)
)
mPacketDumper
(
new
PacketDumper
(
mPc
)
)
{
if
(
mDirection
=
=
DirectionType
:
:
RECEIVE
)
{
mConduit
-
>
SetReceiverTransport
(
mTransport
)
;
}
else
{
mConduit
-
>
SetTransmitterTransport
(
mTransport
)
;
}
if
(
!
sPrefsRegistered
.
exchange
(
true
)
)
{
MOZ_ASSERT
(
Preferences
:
:
IsServiceAvailable
(
)
)
;
bool
ok
=
Preferences
:
:
AddAtomicBoolVarCache
(
&
sForceDisableRtcpReceptionPref
kQuashRtcpRxPref
false
)
=
=
NS_OK
;
MOZ_LOG
(
gMediaPipelineLog
ok
?
LogLevel
:
:
Info
:
LogLevel
:
:
Error
(
"
Creating
pref
cache
:
%
s
%
s
"
kQuashRtcpRxPref
.
get
(
)
ok
?
"
succeded
.
"
:
"
FAILED
!
"
)
)
;
sPrefsRegistered
.
exchange
(
ok
)
;
}
}
MediaPipeline
:
:
~
MediaPipeline
(
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Info
(
"
Destroying
MediaPipeline
:
%
s
"
mDescription
.
c_str
(
)
)
)
;
NS_ReleaseOnMainThreadSystemGroup
(
"
MediaPipeline
:
:
mConduit
"
mConduit
.
forget
(
)
)
;
}
void
MediaPipeline
:
:
Shutdown_m
(
)
{
Stop
(
)
;
DetachMedia
(
)
;
RUN_ON_THREAD
(
mStsThread
WrapRunnable
(
RefPtr
<
MediaPipeline
>
(
this
)
&
MediaPipeline
:
:
DetachTransport_s
)
NS_DISPATCH_NORMAL
)
;
}
void
MediaPipeline
:
:
DetachTransport_s
(
)
{
ASSERT_ON_THREAD
(
mStsThread
)
;
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Info
(
"
%
s
in
%
s
"
mDescription
.
c_str
(
)
__FUNCTION__
)
)
;
disconnect_all
(
)
;
mRtpState
=
TransportLayer
:
:
TS_NONE
;
mRtcpState
=
TransportLayer
:
:
TS_NONE
;
mTransportId
.
clear
(
)
;
mTransport
-
>
Detach
(
)
;
mPacketDumper
=
nullptr
;
}
void
MediaPipeline
:
:
UpdateTransport_m
(
const
std
:
:
string
&
aTransportId
nsAutoPtr
<
MediaPipelineFilter
>
aFilter
)
{
RUN_ON_THREAD
(
mStsThread
WrapRunnable
(
RefPtr
<
MediaPipeline
>
(
this
)
&
MediaPipeline
:
:
UpdateTransport_s
aTransportId
aFilter
)
NS_DISPATCH_NORMAL
)
;
}
void
MediaPipeline
:
:
UpdateTransport_s
(
const
std
:
:
string
&
aTransportId
nsAutoPtr
<
MediaPipelineFilter
>
aFilter
)
{
ASSERT_ON_THREAD
(
mStsThread
)
;
if
(
!
mSignalsConnected
)
{
mTransportHandler
-
>
SignalStateChange
.
connect
(
this
&
MediaPipeline
:
:
RtpStateChange
)
;
mTransportHandler
-
>
SignalRtcpStateChange
.
connect
(
this
&
MediaPipeline
:
:
RtcpStateChange
)
;
mTransportHandler
-
>
SignalEncryptedSending
.
connect
(
this
&
MediaPipeline
:
:
EncryptedPacketSending
)
;
mTransportHandler
-
>
SignalPacketReceived
.
connect
(
this
&
MediaPipeline
:
:
PacketReceived
)
;
mSignalsConnected
=
true
;
}
if
(
aTransportId
!
=
mTransportId
)
{
mTransportId
=
aTransportId
;
mRtpState
=
mTransportHandler
-
>
GetState
(
mTransportId
false
)
;
mRtcpState
=
mTransportHandler
-
>
GetState
(
mTransportId
true
)
;
CheckTransportStates
(
)
;
}
if
(
mFilter
&
&
aFilter
)
{
mFilter
-
>
Update
(
*
aFilter
)
;
}
else
{
mFilter
=
aFilter
;
}
}
void
MediaPipeline
:
:
AddRIDExtension_m
(
size_t
aExtensionId
)
{
RUN_ON_THREAD
(
mStsThread
WrapRunnable
(
RefPtr
<
MediaPipeline
>
(
this
)
&
MediaPipeline
:
:
AddRIDExtension_s
aExtensionId
)
NS_DISPATCH_NORMAL
)
;
}
void
MediaPipeline
:
:
AddRIDExtension_s
(
size_t
aExtensionId
)
{
mRtpParser
-
>
RegisterRtpHeaderExtension
(
webrtc
:
:
kRtpExtensionRtpStreamId
aExtensionId
)
;
}
void
MediaPipeline
:
:
AddRIDFilter_m
(
const
std
:
:
string
&
aRid
)
{
RUN_ON_THREAD
(
mStsThread
WrapRunnable
(
RefPtr
<
MediaPipeline
>
(
this
)
&
MediaPipeline
:
:
AddRIDFilter_s
aRid
)
NS_DISPATCH_NORMAL
)
;
}
void
MediaPipeline
:
:
AddRIDFilter_s
(
const
std
:
:
string
&
aRid
)
{
mFilter
=
new
MediaPipelineFilter
;
mFilter
-
>
AddRemoteRtpStreamId
(
aRid
)
;
}
void
MediaPipeline
:
:
GetContributingSourceStats
(
const
nsString
&
aInboundRtpStreamId
FallibleTArray
<
dom
:
:
RTCRTPContributingSourceStats
>
&
aArr
)
const
{
DOMHighResTimeStamp
expiry
=
RtpCSRCStats
:
:
GetExpiryFromTime
(
GetNow
(
)
)
;
for
(
auto
info
:
mCsrcStats
)
{
if
(
!
info
.
second
.
Expired
(
expiry
)
)
{
RTCRTPContributingSourceStats
stats
;
info
.
second
.
GetWebidlInstance
(
stats
aInboundRtpStreamId
)
;
aArr
.
AppendElement
(
stats
fallible
)
;
}
}
}
void
MediaPipeline
:
:
RtpStateChange
(
const
std
:
:
string
&
aTransportId
TransportLayer
:
:
State
aState
)
{
if
(
mTransportId
!
=
aTransportId
)
{
return
;
}
mRtpState
=
aState
;
CheckTransportStates
(
)
;
}
void
MediaPipeline
:
:
RtcpStateChange
(
const
std
:
:
string
&
aTransportId
TransportLayer
:
:
State
aState
)
{
if
(
mTransportId
!
=
aTransportId
)
{
return
;
}
mRtcpState
=
aState
;
CheckTransportStates
(
)
;
}
void
MediaPipeline
:
:
CheckTransportStates
(
)
{
ASSERT_ON_THREAD
(
mStsThread
)
;
if
(
mRtpState
=
=
TransportLayer
:
:
TS_CLOSED
|
|
mRtpState
=
=
TransportLayer
:
:
TS_ERROR
|
|
mRtcpState
=
=
TransportLayer
:
:
TS_CLOSED
|
|
mRtcpState
=
=
TransportLayer
:
:
TS_ERROR
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Warning
(
"
RTP
Transport
failed
for
pipeline
%
p
flow
%
s
"
this
mDescription
.
c_str
(
)
)
)
;
NS_WARNING
(
"
MediaPipeline
Transport
failed
.
This
is
not
properly
cleaned
up
yet
"
)
;
mTransport
-
>
Detach
(
)
;
return
;
}
if
(
mRtpState
=
=
TransportLayer
:
:
TS_OPEN
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Info
(
"
RTP
Transport
ready
for
pipeline
%
p
flow
%
s
"
this
mDescription
.
c_str
(
)
)
)
;
}
if
(
mRtcpState
=
=
TransportLayer
:
:
TS_OPEN
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Info
(
"
RTCP
Transport
ready
for
pipeline
%
p
flow
%
s
"
this
mDescription
.
c_str
(
)
)
)
;
}
if
(
mRtpState
=
=
TransportLayer
:
:
TS_OPEN
&
&
mRtcpState
=
=
mRtpState
)
{
mTransport
-
>
Attach
(
this
)
;
TransportReady_s
(
)
;
}
}
void
MediaPipeline
:
:
SendPacket
(
MediaPacket
&
&
packet
)
{
ASSERT_ON_THREAD
(
mStsThread
)
;
MOZ_ASSERT
(
mRtpState
=
=
TransportLayer
:
:
TS_OPEN
)
;
MOZ_ASSERT
(
!
mTransportId
.
empty
(
)
)
;
mTransportHandler
-
>
SendPacket
(
mTransportId
std
:
:
move
(
packet
)
)
;
}
void
MediaPipeline
:
:
IncrementRtpPacketsSent
(
int32_t
aBytes
)
{
+
+
mRtpPacketsSent
;
mRtpBytesSent
+
=
aBytes
;
if
(
!
(
mRtpPacketsSent
%
100
)
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Info
(
"
RTP
sent
packet
count
for
%
s
Pipeline
%
p
:
%
u
(
%
"
PRId64
"
bytes
)
"
mDescription
.
c_str
(
)
this
mRtpPacketsSent
mRtpBytesSent
)
)
;
}
}
void
MediaPipeline
:
:
IncrementRtcpPacketsSent
(
)
{
+
+
mRtcpPacketsSent
;
if
(
!
(
mRtcpPacketsSent
%
100
)
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Info
(
"
RTCP
sent
packet
count
for
%
s
Pipeline
%
p
:
%
u
"
mDescription
.
c_str
(
)
this
mRtcpPacketsSent
)
)
;
}
}
void
MediaPipeline
:
:
IncrementRtpPacketsReceived
(
int32_t
aBytes
)
{
+
+
mRtpPacketsReceived
;
mRtpBytesReceived
+
=
aBytes
;
if
(
!
(
mRtpPacketsReceived
%
100
)
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Info
(
"
RTP
received
packet
count
for
%
s
Pipeline
%
p
:
%
u
(
%
"
PRId64
"
bytes
)
"
mDescription
.
c_str
(
)
this
mRtpPacketsReceived
mRtpBytesReceived
)
)
;
}
}
void
MediaPipeline
:
:
IncrementRtcpPacketsReceived
(
)
{
+
+
mRtcpPacketsReceived
;
if
(
!
(
mRtcpPacketsReceived
%
100
)
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Info
(
"
RTCP
received
packet
count
for
%
s
Pipeline
%
p
:
%
u
"
mDescription
.
c_str
(
)
this
mRtcpPacketsReceived
)
)
;
}
}
void
MediaPipeline
:
:
RtpPacketReceived
(
MediaPacket
&
packet
)
{
if
(
mDirection
=
=
DirectionType
:
:
TRANSMIT
)
{
return
;
}
if
(
!
mTransport
-
>
Pipeline
(
)
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Error
(
"
Discarding
incoming
packet
;
transport
disconnected
"
)
)
;
return
;
}
if
(
!
mConduit
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
Discarding
incoming
packet
;
media
disconnected
"
)
)
;
return
;
}
if
(
!
packet
.
len
(
)
)
{
return
;
}
webrtc
:
:
RTPHeader
header
;
if
(
!
mRtpParser
-
>
Parse
(
packet
.
data
(
)
packet
.
len
(
)
&
header
true
)
)
{
return
;
}
if
(
mFilter
&
&
!
mFilter
-
>
Filter
(
header
)
)
{
return
;
}
DOMHighResTimeStamp
now
=
0
.
0
;
bool
hasTime
=
false
;
if
(
!
mCsrcStats
.
empty
(
)
)
{
if
(
!
hasTime
)
{
now
=
GetNow
(
)
;
hasTime
=
true
;
}
auto
expiry
=
RtpCSRCStats
:
:
GetExpiryFromTime
(
now
)
;
for
(
auto
p
=
mCsrcStats
.
begin
(
)
;
p
!
=
mCsrcStats
.
end
(
)
;
)
{
if
(
p
-
>
second
.
Expired
(
expiry
)
)
{
p
=
mCsrcStats
.
erase
(
p
)
;
continue
;
}
p
+
+
;
}
}
if
(
header
.
numCSRCs
)
{
for
(
auto
i
=
0
;
i
<
header
.
numCSRCs
;
i
+
+
)
{
if
(
!
hasTime
)
{
now
=
GetNow
(
)
;
hasTime
=
true
;
}
auto
csrcInfo
=
mCsrcStats
.
find
(
header
.
arrOfCSRCs
[
i
]
)
;
if
(
csrcInfo
=
=
mCsrcStats
.
end
(
)
)
{
mCsrcStats
.
insert
(
std
:
:
make_pair
(
header
.
arrOfCSRCs
[
i
]
RtpCSRCStats
(
header
.
arrOfCSRCs
[
i
]
now
)
)
)
;
}
else
{
csrcInfo
-
>
second
.
SetTimestamp
(
now
)
;
}
}
}
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
%
s
received
RTP
packet
.
"
mDescription
.
c_str
(
)
)
)
;
IncrementRtpPacketsReceived
(
packet
.
len
(
)
)
;
OnRtpPacketReceived
(
)
;
RtpLogger
:
:
LogPacket
(
packet
true
mDescription
)
;
mPacketDumper
-
>
Dump
(
mLevel
dom
:
:
mozPacketDumpType
:
:
Srtp
false
packet
.
encrypted_data
(
)
packet
.
encrypted_len
(
)
)
;
mPacketDumper
-
>
Dump
(
mLevel
dom
:
:
mozPacketDumpType
:
:
Rtp
false
packet
.
data
(
)
packet
.
len
(
)
)
;
(
void
)
mConduit
-
>
ReceivedRTPPacket
(
packet
.
data
(
)
packet
.
len
(
)
header
.
ssrc
)
;
}
void
MediaPipeline
:
:
RtcpPacketReceived
(
MediaPacket
&
packet
)
{
if
(
!
mTransport
-
>
Pipeline
(
)
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
Discarding
incoming
packet
;
transport
disconnected
"
)
)
;
return
;
}
if
(
!
mConduit
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
Discarding
incoming
packet
;
media
disconnected
"
)
)
;
return
;
}
if
(
!
packet
.
len
(
)
)
{
return
;
}
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
%
s
received
RTCP
packet
.
"
mDescription
.
c_str
(
)
)
)
;
IncrementRtcpPacketsReceived
(
)
;
RtpLogger
:
:
LogPacket
(
packet
true
mDescription
)
;
mPacketDumper
-
>
Dump
(
mLevel
dom
:
:
mozPacketDumpType
:
:
Srtcp
false
packet
.
encrypted_data
(
)
packet
.
encrypted_len
(
)
)
;
mPacketDumper
-
>
Dump
(
mLevel
dom
:
:
mozPacketDumpType
:
:
Rtcp
false
packet
.
data
(
)
packet
.
len
(
)
)
;
if
(
sForceDisableRtcpReceptionPref
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
%
s
RTCP
packet
forced
to
be
dropped
"
mDescription
.
c_str
(
)
)
)
;
return
;
}
(
void
)
mConduit
-
>
ReceivedRTCPPacket
(
packet
.
data
(
)
packet
.
len
(
)
)
;
}
void
MediaPipeline
:
:
PacketReceived
(
const
std
:
:
string
&
aTransportId
MediaPacket
&
packet
)
{
if
(
mTransportId
!
=
aTransportId
)
{
return
;
}
if
(
!
mTransport
-
>
Pipeline
(
)
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
Discarding
incoming
packet
;
transport
disconnected
"
)
)
;
return
;
}
switch
(
packet
.
type
(
)
)
{
case
MediaPacket
:
:
RTP
:
RtpPacketReceived
(
packet
)
;
break
;
case
MediaPacket
:
:
RTCP
:
RtcpPacketReceived
(
packet
)
;
break
;
default
:
;
}
}
void
MediaPipeline
:
:
EncryptedPacketSending
(
const
std
:
:
string
&
aTransportId
MediaPacket
&
aPacket
)
{
if
(
mTransportId
=
=
aTransportId
)
{
dom
:
:
mozPacketDumpType
type
;
if
(
aPacket
.
type
(
)
=
=
MediaPacket
:
:
SRTP
)
{
type
=
dom
:
:
mozPacketDumpType
:
:
Srtp
;
}
else
if
(
aPacket
.
type
(
)
=
=
MediaPacket
:
:
SRTCP
)
{
type
=
dom
:
:
mozPacketDumpType
:
:
Srtcp
;
}
else
if
(
aPacket
.
type
(
)
=
=
MediaPacket
:
:
DTLS
)
{
return
;
}
else
{
MOZ_ASSERT
(
false
)
;
return
;
}
mPacketDumper
-
>
Dump
(
Level
(
)
type
true
aPacket
.
data
(
)
aPacket
.
len
(
)
)
;
}
}
class
MediaPipelineTransmit
:
:
PipelineListener
:
public
DirectMediaStreamTrackListener
{
friend
class
MediaPipelineTransmit
;
public
:
explicit
PipelineListener
(
const
RefPtr
<
MediaSessionConduit
>
&
aConduit
)
:
mConduit
(
aConduit
)
mActive
(
false
)
mEnabled
(
false
)
mDirectConnect
(
false
)
{
}
~
PipelineListener
(
)
{
NS_ReleaseOnMainThreadSystemGroup
(
"
MediaPipeline
:
:
mConduit
"
mConduit
.
forget
(
)
)
;
if
(
mConverter
)
{
mConverter
-
>
Shutdown
(
)
;
}
}
void
SetActive
(
bool
aActive
)
{
mActive
=
aActive
;
}
void
SetEnabled
(
bool
aEnabled
)
{
mEnabled
=
aEnabled
;
}
void
SetAudioProxy
(
const
RefPtr
<
AudioProxyThread
>
&
aProxy
)
{
mAudioProcessing
=
aProxy
;
}
void
SetVideoFrameConverter
(
const
RefPtr
<
VideoFrameConverter
>
&
aConverter
)
{
mConverter
=
aConverter
;
}
void
OnVideoFrameConverted
(
const
webrtc
:
:
VideoFrame
&
aVideoFrame
)
{
MOZ_RELEASE_ASSERT
(
mConduit
-
>
type
(
)
=
=
MediaSessionConduit
:
:
VIDEO
)
;
static_cast
<
VideoSessionConduit
*
>
(
mConduit
.
get
(
)
)
-
>
SendVideoFrame
(
aVideoFrame
)
;
}
void
NotifyQueuedChanges
(
MediaStreamGraph
*
aGraph
StreamTime
aTrackOffset
const
MediaSegment
&
aQueuedMedia
)
override
;
void
NotifyEnabledStateChanged
(
bool
aEnabled
)
override
;
void
NotifyRealtimeTrackData
(
MediaStreamGraph
*
aGraph
StreamTime
aTrackOffset
const
MediaSegment
&
aMedia
)
override
;
void
NotifyDirectListenerInstalled
(
InstallationResult
aResult
)
override
;
void
NotifyDirectListenerUninstalled
(
)
override
;
private
:
void
NewData
(
const
MediaSegment
&
aMedia
TrackRate
aRate
=
0
)
;
RefPtr
<
MediaSessionConduit
>
mConduit
;
RefPtr
<
AudioProxyThread
>
mAudioProcessing
;
RefPtr
<
VideoFrameConverter
>
mConverter
;
mozilla
:
:
Atomic
<
bool
>
mActive
;
mozilla
:
:
Atomic
<
bool
>
mEnabled
;
bool
mDirectConnect
;
}
;
class
MediaPipelineTransmit
:
:
VideoFrameFeeder
:
public
VideoConverterListener
{
public
:
explicit
VideoFrameFeeder
(
const
RefPtr
<
PipelineListener
>
&
aListener
)
:
mMutex
(
"
VideoFrameFeeder
"
)
mListener
(
aListener
)
{
MOZ_COUNT_CTOR
(
VideoFrameFeeder
)
;
}
void
Detach
(
)
{
MutexAutoLock
lock
(
mMutex
)
;
mListener
=
nullptr
;
}
void
OnVideoFrameConverted
(
const
webrtc
:
:
VideoFrame
&
aVideoFrame
)
override
{
MutexAutoLock
lock
(
mMutex
)
;
if
(
!
mListener
)
{
return
;
}
mListener
-
>
OnVideoFrameConverted
(
aVideoFrame
)
;
}
protected
:
virtual
~
VideoFrameFeeder
(
)
{
MOZ_COUNT_DTOR
(
VideoFrameFeeder
)
;
}
Mutex
mMutex
;
RefPtr
<
PipelineListener
>
mListener
;
}
;
MediaPipelineTransmit
:
:
MediaPipelineTransmit
(
const
std
:
:
string
&
aPc
MediaTransportHandler
*
aTransportHandler
nsCOMPtr
<
nsIEventTarget
>
aMainThread
nsCOMPtr
<
nsIEventTarget
>
aStsThread
bool
aIsVideo
RefPtr
<
MediaSessionConduit
>
aConduit
)
:
MediaPipeline
(
aPc
aTransportHandler
DirectionType
:
:
TRANSMIT
aMainThread
aStsThread
aConduit
)
mIsVideo
(
aIsVideo
)
mListener
(
new
PipelineListener
(
aConduit
)
)
mFeeder
(
aIsVideo
?
MakeAndAddRef
<
VideoFrameFeeder
>
(
mListener
)
:
nullptr
)
mTransmitting
(
false
)
{
if
(
!
IsVideo
(
)
)
{
mAudioProcessing
=
MakeAndAddRef
<
AudioProxyThread
>
(
static_cast
<
AudioSessionConduit
*
>
(
aConduit
.
get
(
)
)
)
;
mListener
-
>
SetAudioProxy
(
mAudioProcessing
)
;
}
else
{
mConverter
=
MakeAndAddRef
<
VideoFrameConverter
>
(
)
;
mConverter
-
>
AddListener
(
mFeeder
)
;
mListener
-
>
SetVideoFrameConverter
(
mConverter
)
;
}
}
MediaPipelineTransmit
:
:
~
MediaPipelineTransmit
(
)
{
if
(
mFeeder
)
{
mFeeder
-
>
Detach
(
)
;
}
MOZ_ASSERT
(
!
mDomTrack
)
;
}
void
MediaPipeline
:
:
SetDescription_s
(
const
std
:
:
string
&
description
)
{
mDescription
=
description
;
}
void
MediaPipelineTransmit
:
:
SetDescription
(
)
{
std
:
:
string
description
;
description
=
mPc
+
"
|
"
;
description
+
=
mConduit
-
>
type
(
)
=
=
MediaSessionConduit
:
:
AUDIO
?
"
Transmit
audio
[
"
:
"
Transmit
video
[
"
;
if
(
!
mDomTrack
)
{
description
+
=
"
no
track
]
"
;
}
else
{
nsString
nsTrackId
;
mDomTrack
-
>
GetId
(
nsTrackId
)
;
std
:
:
string
trackId
(
NS_ConvertUTF16toUTF8
(
nsTrackId
)
.
get
(
)
)
;
description
+
=
trackId
;
description
+
=
"
]
"
;
}
RUN_ON_THREAD
(
mStsThread
WrapRunnable
(
RefPtr
<
MediaPipeline
>
(
this
)
&
MediaPipelineTransmit
:
:
SetDescription_s
description
)
NS_DISPATCH_NORMAL
)
;
}
void
MediaPipelineTransmit
:
:
Stop
(
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
!
mDomTrack
|
|
!
mTransmitting
)
{
return
;
}
mTransmitting
=
false
;
if
(
mDomTrack
-
>
AsAudioStreamTrack
(
)
)
{
mDomTrack
-
>
RemoveDirectListener
(
mListener
)
;
mDomTrack
-
>
RemoveListener
(
mListener
)
;
}
else
if
(
mDomTrack
-
>
AsVideoStreamTrack
(
)
)
{
mDomTrack
-
>
RemoveDirectListener
(
mListener
)
;
mDomTrack
-
>
RemoveListener
(
mListener
)
;
}
else
{
MOZ_ASSERT
(
false
"
Unknown
track
type
"
)
;
}
mConduit
-
>
StopTransmitting
(
)
;
}
bool
MediaPipelineTransmit
:
:
Transmitting
(
)
const
{
ASSERT_ON_THREAD
(
mMainThread
)
;
return
mTransmitting
;
}
void
MediaPipelineTransmit
:
:
Start
(
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
!
mDomTrack
|
|
mTransmitting
)
{
return
;
}
mTransmitting
=
true
;
mConduit
-
>
StartTransmitting
(
)
;
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
Attaching
pipeline
to
track
%
p
conduit
type
=
%
s
"
this
(
mConduit
-
>
type
(
)
=
=
MediaSessionConduit
:
:
AUDIO
?
"
audio
"
:
"
video
"
)
)
)
;
#
if
!
defined
(
MOZILLA_EXTERNAL_LINKAGE
)
const
bool
enableDirectListener
=
!
Preferences
:
:
GetBool
(
"
media
.
navigator
.
audio
.
full_duplex
"
false
)
;
#
else
const
bool
enableDirectListener
=
true
;
#
endif
if
(
mDomTrack
-
>
AsAudioStreamTrack
(
)
)
{
if
(
enableDirectListener
)
{
mDomTrack
-
>
AddDirectListener
(
mListener
)
;
}
mDomTrack
-
>
AddListener
(
mListener
)
;
}
else
if
(
mDomTrack
-
>
AsVideoStreamTrack
(
)
)
{
mDomTrack
-
>
AddDirectListener
(
mListener
)
;
mDomTrack
-
>
AddListener
(
mListener
)
;
}
else
{
MOZ_ASSERT
(
false
"
Unknown
track
type
"
)
;
}
}
bool
MediaPipelineTransmit
:
:
IsVideo
(
)
const
{
return
mIsVideo
;
}
void
MediaPipelineTransmit
:
:
UpdateSinkIdentity_m
(
const
MediaStreamTrack
*
aTrack
nsIPrincipal
*
aPrincipal
const
PeerIdentity
*
aSinkIdentity
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
aTrack
!
=
nullptr
&
&
aTrack
!
=
mDomTrack
)
{
return
;
}
if
(
!
mDomTrack
)
{
return
;
}
bool
enableTrack
=
aPrincipal
-
>
Subsumes
(
mDomTrack
-
>
GetPrincipal
(
)
)
;
if
(
!
enableTrack
)
{
const
PeerIdentity
*
trackIdentity
=
mDomTrack
-
>
GetPeerIdentity
(
)
;
if
(
aSinkIdentity
&
&
trackIdentity
)
{
enableTrack
=
(
*
aSinkIdentity
=
=
*
trackIdentity
)
;
}
}
mListener
-
>
SetEnabled
(
enableTrack
)
;
}
void
MediaPipelineTransmit
:
:
DetachMedia
(
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
mDomTrack
=
nullptr
;
}
void
MediaPipelineTransmit
:
:
TransportReady_s
(
)
{
ASSERT_ON_THREAD
(
mStsThread
)
;
MediaPipeline
:
:
TransportReady_s
(
)
;
mListener
-
>
SetActive
(
true
)
;
}
nsresult
MediaPipelineTransmit
:
:
SetTrack
(
MediaStreamTrack
*
aDomTrack
)
{
if
(
aDomTrack
)
{
nsString
nsTrackId
;
aDomTrack
-
>
GetId
(
nsTrackId
)
;
std
:
:
string
track_id
(
NS_ConvertUTF16toUTF8
(
nsTrackId
)
.
get
(
)
)
;
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
Reattaching
pipeline
to
track
%
p
track
%
s
conduit
type
:
%
s
"
&
aDomTrack
track_id
.
c_str
(
)
(
mConduit
-
>
type
(
)
=
=
MediaSessionConduit
:
:
AUDIO
?
"
audio
"
:
"
video
"
)
)
)
;
}
RefPtr
<
dom
:
:
MediaStreamTrack
>
oldTrack
=
mDomTrack
;
bool
wasTransmitting
=
oldTrack
&
&
mTransmitting
;
Stop
(
)
;
mDomTrack
=
aDomTrack
;
SetDescription
(
)
;
if
(
wasTransmitting
)
{
Start
(
)
;
}
return
NS_OK
;
}
nsresult
MediaPipeline
:
:
PipelineTransport
:
:
SendRtpPacket
(
const
uint8_t
*
aData
size_t
aLen
)
{
nsAutoPtr
<
MediaPacket
>
packet
(
new
MediaPacket
)
;
packet
-
>
Copy
(
aData
aLen
aLen
+
SRTP_MAX_EXPANSION
)
;
packet
-
>
SetType
(
MediaPacket
:
:
RTP
)
;
RUN_ON_THREAD
(
mStsThread
WrapRunnable
(
RefPtr
<
MediaPipeline
:
:
PipelineTransport
>
(
this
)
&
MediaPipeline
:
:
PipelineTransport
:
:
SendRtpRtcpPacket_s
packet
)
NS_DISPATCH_NORMAL
)
;
return
NS_OK
;
}
void
MediaPipeline
:
:
PipelineTransport
:
:
SendRtpRtcpPacket_s
(
nsAutoPtr
<
MediaPacket
>
aPacket
)
{
bool
isRtp
=
aPacket
-
>
type
(
)
=
=
MediaPacket
:
:
RTP
;
ASSERT_ON_THREAD
(
mStsThread
)
;
if
(
!
mPipeline
)
{
return
;
}
if
(
isRtp
&
&
mPipeline
-
>
mRtpState
!
=
TransportLayer
:
:
TS_OPEN
)
{
return
;
}
if
(
!
isRtp
&
&
mPipeline
-
>
mRtcpState
!
=
TransportLayer
:
:
TS_OPEN
)
{
return
;
}
MediaPacket
packet
(
std
:
:
move
(
*
aPacket
)
)
;
packet
.
sdp_level
(
)
=
Some
(
mPipeline
-
>
Level
(
)
)
;
if
(
RtpLogger
:
:
IsPacketLoggingOn
(
)
)
{
RtpLogger
:
:
LogPacket
(
packet
false
mPipeline
-
>
mDescription
)
;
}
if
(
isRtp
)
{
mPipeline
-
>
mPacketDumper
-
>
Dump
(
mPipeline
-
>
Level
(
)
dom
:
:
mozPacketDumpType
:
:
Rtp
true
packet
.
data
(
)
packet
.
len
(
)
)
;
mPipeline
-
>
IncrementRtpPacketsSent
(
packet
.
len
(
)
)
;
}
else
{
mPipeline
-
>
mPacketDumper
-
>
Dump
(
mPipeline
-
>
Level
(
)
dom
:
:
mozPacketDumpType
:
:
Rtcp
true
packet
.
data
(
)
packet
.
len
(
)
)
;
mPipeline
-
>
IncrementRtcpPacketsSent
(
)
;
}
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
%
s
sending
%
s
packet
"
mPipeline
-
>
mDescription
.
c_str
(
)
(
isRtp
?
"
RTP
"
:
"
RTCP
"
)
)
)
;
mPipeline
-
>
SendPacket
(
std
:
:
move
(
packet
)
)
;
}
nsresult
MediaPipeline
:
:
PipelineTransport
:
:
SendRtcpPacket
(
const
uint8_t
*
aData
size_t
aLen
)
{
nsAutoPtr
<
MediaPacket
>
packet
(
new
MediaPacket
)
;
packet
-
>
Copy
(
aData
aLen
aLen
+
SRTP_MAX_EXPANSION
)
;
packet
-
>
SetType
(
MediaPacket
:
:
RTCP
)
;
RUN_ON_THREAD
(
mStsThread
WrapRunnable
(
RefPtr
<
MediaPipeline
:
:
PipelineTransport
>
(
this
)
&
MediaPipeline
:
:
PipelineTransport
:
:
SendRtpRtcpPacket_s
packet
)
NS_DISPATCH_NORMAL
)
;
return
NS_OK
;
}
void
MediaPipelineTransmit
:
:
PipelineListener
:
:
NotifyRealtimeTrackData
(
MediaStreamGraph
*
aGraph
StreamTime
aOffset
const
MediaSegment
&
aMedia
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
MediaPipeline
:
:
NotifyRealtimeTrackData
(
)
listener
=
%
p
offset
=
%
"
PRId64
"
duration
=
%
"
PRId64
this
aOffset
aMedia
.
GetDuration
(
)
)
)
;
TRACE_COMMENT
(
"
%
s
"
aMedia
.
GetType
(
)
=
=
MediaSegment
:
:
VIDEO
?
"
Video
"
:
"
Audio
"
)
;
NewData
(
aMedia
aGraph
-
>
GraphRate
(
)
)
;
}
void
MediaPipelineTransmit
:
:
PipelineListener
:
:
NotifyQueuedChanges
(
MediaStreamGraph
*
aGraph
StreamTime
aOffset
const
MediaSegment
&
aQueuedMedia
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
MediaPipeline
:
:
NotifyQueuedChanges
(
)
"
)
)
;
if
(
aQueuedMedia
.
GetType
(
)
=
=
MediaSegment
:
:
VIDEO
)
{
return
;
}
TRACE_AUDIO_CALLBACK_COMMENT
(
"
Audio
"
)
;
if
(
mDirectConnect
)
{
return
;
}
size_t
rate
;
if
(
aGraph
)
{
rate
=
aGraph
-
>
GraphRate
(
)
;
}
else
{
rate
=
16000
;
}
NewData
(
aQueuedMedia
rate
)
;
}
void
MediaPipelineTransmit
:
:
PipelineListener
:
:
NotifyEnabledStateChanged
(
bool
aEnabled
)
{
if
(
mConduit
-
>
type
(
)
!
=
MediaSessionConduit
:
:
VIDEO
)
{
return
;
}
MOZ_ASSERT
(
mConverter
)
;
mConverter
-
>
SetTrackEnabled
(
aEnabled
)
;
}
void
MediaPipelineTransmit
:
:
PipelineListener
:
:
NotifyDirectListenerInstalled
(
InstallationResult
aResult
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Info
(
"
MediaPipeline
:
:
NotifyDirectListenerInstalled
(
)
listener
=
%
p
"
"
result
=
%
d
"
this
static_cast
<
int32_t
>
(
aResult
)
)
)
;
mDirectConnect
=
InstallationResult
:
:
SUCCESS
=
=
aResult
;
}
void
MediaPipelineTransmit
:
:
PipelineListener
:
:
NotifyDirectListenerUninstalled
(
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Info
(
"
MediaPipeline
:
:
NotifyDirectListenerUninstalled
(
)
listener
=
%
p
"
this
)
)
;
mDirectConnect
=
false
;
}
void
MediaPipelineTransmit
:
:
PipelineListener
:
:
NewData
(
const
MediaSegment
&
aMedia
TrackRate
aRate
)
{
if
(
!
mActive
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
Discarding
packets
because
transport
not
ready
"
)
)
;
return
;
}
if
(
mConduit
-
>
type
(
)
!
=
(
aMedia
.
GetType
(
)
=
=
MediaSegment
:
:
AUDIO
?
MediaSessionConduit
:
:
AUDIO
:
MediaSessionConduit
:
:
VIDEO
)
)
{
MOZ_ASSERT
(
false
"
The
media
type
should
always
be
correct
since
the
"
"
listener
is
locked
to
a
specific
track
"
)
;
return
;
}
if
(
aMedia
.
GetType
(
)
=
=
MediaSegment
:
:
AUDIO
)
{
MOZ_RELEASE_ASSERT
(
aRate
>
0
)
;
const
AudioSegment
*
audio
=
static_cast
<
const
AudioSegment
*
>
(
&
aMedia
)
;
for
(
AudioSegment
:
:
ConstChunkIterator
iter
(
*
audio
)
;
!
iter
.
IsEnded
(
)
;
iter
.
Next
(
)
)
{
mAudioProcessing
-
>
QueueAudioChunk
(
aRate
*
iter
mEnabled
)
;
}
}
else
{
const
VideoSegment
*
video
=
static_cast
<
const
VideoSegment
*
>
(
&
aMedia
)
;
for
(
VideoSegment
:
:
ConstChunkIterator
iter
(
*
video
)
;
!
iter
.
IsEnded
(
)
;
iter
.
Next
(
)
)
{
mConverter
-
>
QueueVideoChunk
(
*
iter
!
mEnabled
)
;
}
}
}
class
GenericReceiveListener
:
public
MediaStreamTrackListener
{
public
:
explicit
GenericReceiveListener
(
dom
:
:
MediaStreamTrack
*
aTrack
)
:
mTrack
(
aTrack
)
mTrackId
(
aTrack
-
>
GetInputTrackId
(
)
)
mSource
(
mTrack
-
>
GetInputStream
(
)
-
>
AsSourceStream
(
)
)
mPrincipalHandle
(
PRINCIPAL_HANDLE_NONE
)
mListening
(
false
)
mMaybeTrackNeedsUnmute
(
true
)
{
MOZ_RELEASE_ASSERT
(
mSource
"
Must
be
used
with
a
SourceMediaStream
"
)
;
}
virtual
~
GenericReceiveListener
(
)
{
NS_ReleaseOnMainThreadSystemGroup
(
"
GenericReceiveListener
:
:
track_
"
mTrack
.
forget
(
)
)
;
}
void
AddTrackToSource
(
uint32_t
aRate
=
0
)
{
MOZ_ASSERT
(
(
aRate
!
=
0
&
&
mTrack
-
>
AsAudioStreamTrack
(
)
)
|
|
mTrack
-
>
AsVideoStreamTrack
(
)
)
;
if
(
mTrack
-
>
AsAudioStreamTrack
(
)
)
{
mSource
-
>
AddAudioTrack
(
mTrackId
aRate
new
AudioSegment
(
)
)
;
}
else
if
(
mTrack
-
>
AsVideoStreamTrack
(
)
)
{
mSource
-
>
AddTrack
(
mTrackId
new
VideoSegment
(
)
)
;
}
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
GenericReceiveListener
added
%
s
track
%
d
(
%
p
)
to
stream
%
p
"
mTrack
-
>
AsAudioStreamTrack
(
)
?
"
audio
"
:
"
video
"
mTrackId
mTrack
.
get
(
)
mSource
.
get
(
)
)
)
;
mSource
-
>
AddTrackListener
(
this
mTrackId
)
;
}
void
AddSelf
(
)
{
if
(
mListening
)
{
return
;
}
mListening
=
true
;
mMaybeTrackNeedsUnmute
=
true
;
if
(
mTrack
-
>
AsAudioStreamTrack
(
)
&
&
!
mSource
-
>
IsDestroyed
(
)
)
{
mSource
-
>
SetPullingEnabled
(
mTrackId
true
)
;
}
}
void
RemoveSelf
(
)
{
if
(
!
mListening
)
{
return
;
}
mListening
=
false
;
if
(
mTrack
-
>
AsAudioStreamTrack
(
)
&
&
!
mSource
-
>
IsDestroyed
(
)
)
{
mSource
-
>
SetPullingEnabled
(
mTrackId
false
)
;
}
}
void
OnRtpReceived
(
)
{
if
(
mMaybeTrackNeedsUnmute
)
{
mMaybeTrackNeedsUnmute
=
false
;
NS_DispatchToMainThread
(
NewRunnableMethod
(
"
GenericReceiveListener
:
:
OnRtpReceived_m
"
this
&
GenericReceiveListener
:
:
OnRtpReceived_m
)
)
;
}
}
void
OnRtpReceived_m
(
)
{
if
(
mListening
&
&
mTrack
-
>
Muted
(
)
)
{
mTrack
-
>
MutedChanged
(
false
)
;
}
}
void
EndTrack
(
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
GenericReceiveListener
ending
track
"
)
)
;
mSource
-
>
RemoveTrackListener
(
this
mTrackId
)
;
mSource
-
>
EndTrack
(
mTrackId
)
;
}
void
SetPrincipalHandle_m
(
const
PrincipalHandle
&
aPrincipalHandle
)
{
class
Message
:
public
ControlMessage
{
public
:
Message
(
GenericReceiveListener
*
aListener
const
PrincipalHandle
&
aPrincipalHandle
)
:
ControlMessage
(
nullptr
)
mListener
(
aListener
)
mPrincipalHandle
(
aPrincipalHandle
)
{
}
void
Run
(
)
override
{
mListener
-
>
SetPrincipalHandle_msg
(
mPrincipalHandle
)
;
}
const
RefPtr
<
GenericReceiveListener
>
mListener
;
PrincipalHandle
mPrincipalHandle
;
}
;
mTrack
-
>
GraphImpl
(
)
-
>
AppendMessage
(
MakeUnique
<
Message
>
(
this
aPrincipalHandle
)
)
;
}
void
SetPrincipalHandle_msg
(
const
PrincipalHandle
&
aPrincipalHandle
)
{
mPrincipalHandle
=
aPrincipalHandle
;
}
protected
:
RefPtr
<
dom
:
:
MediaStreamTrack
>
mTrack
;
const
TrackID
mTrackId
;
const
RefPtr
<
SourceMediaStream
>
mSource
;
PrincipalHandle
mPrincipalHandle
;
bool
mListening
;
Atomic
<
bool
>
mMaybeTrackNeedsUnmute
;
}
;
MediaPipelineReceive
:
:
MediaPipelineReceive
(
const
std
:
:
string
&
aPc
MediaTransportHandler
*
aTransportHandler
nsCOMPtr
<
nsIEventTarget
>
aMainThread
nsCOMPtr
<
nsIEventTarget
>
aStsThread
RefPtr
<
MediaSessionConduit
>
aConduit
)
:
MediaPipeline
(
aPc
aTransportHandler
DirectionType
:
:
RECEIVE
aMainThread
aStsThread
aConduit
)
{
}
MediaPipelineReceive
:
:
~
MediaPipelineReceive
(
)
{
}
class
MediaPipelineReceiveAudio
:
:
PipelineListener
:
public
GenericReceiveListener
{
public
:
PipelineListener
(
dom
:
:
MediaStreamTrack
*
aTrack
const
RefPtr
<
MediaSessionConduit
>
&
aConduit
)
:
GenericReceiveListener
(
aTrack
)
mConduit
(
aConduit
)
mRate
(
static_cast
<
AudioSessionConduit
*
>
(
mConduit
.
get
(
)
)
-
>
IsSamplingFreqSupported
(
mSource
-
>
GraphRate
(
)
)
?
mSource
-
>
GraphRate
(
)
:
WEBRTC_MAX_SAMPLE_RATE
)
mTaskQueue
(
new
TaskQueue
(
GetMediaThreadPool
(
MediaThreadType
:
:
WEBRTC_DECODER
)
"
AudioPipelineListener
"
)
)
mPlayedTicks
(
0
)
{
AddTrackToSource
(
mRate
)
;
}
void
NotifyPull
(
MediaStreamGraph
*
aGraph
StreamTime
aEndOfAppendedData
StreamTime
aDesiredTime
)
override
{
NotifyPullImpl
(
aDesiredTime
)
;
}
private
:
~
PipelineListener
(
)
{
NS_ReleaseOnMainThreadSystemGroup
(
"
MediaPipeline
:
:
mConduit
"
mConduit
.
forget
(
)
)
;
}
void
NotifyPullImpl
(
StreamTime
aDesiredTime
)
{
TRACE_AUDIO_CALLBACK_COMMENT
(
"
Track
%
i
"
mTrackId
)
;
uint32_t
samplesPer10ms
=
mRate
/
100
;
TrackTicks
desired
=
mSource
-
>
TimeToTicksRoundUp
(
mRate
aDesiredTime
)
;
TrackTicks
framesNeeded
=
desired
-
mPlayedTicks
;
while
(
framesNeeded
>
=
0
)
{
const
int
scratchBufferLength
=
AUDIO_SAMPLE_BUFFER_MAX_BYTES
/
sizeof
(
int16_t
)
;
int16_t
scratchBuffer
[
scratchBufferLength
]
;
int
samplesLength
=
scratchBufferLength
;
MediaConduitErrorCode
err
=
static_cast
<
AudioSessionConduit
*
>
(
mConduit
.
get
(
)
)
-
>
GetAudioFrame
(
scratchBuffer
mRate
0
samplesLength
)
;
if
(
err
!
=
kMediaConduitNoError
)
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Error
(
"
Audio
conduit
failed
(
%
d
)
to
return
data
%
"
PRId64
"
(
desired
%
"
PRId64
"
-
>
%
f
)
"
err
mPlayedTicks
aDesiredTime
mSource
-
>
StreamTimeToSeconds
(
aDesiredTime
)
)
)
;
samplesLength
=
samplesPer10ms
;
PodArrayZero
(
scratchBuffer
)
;
}
MOZ_RELEASE_ASSERT
(
samplesLength
<
=
scratchBufferLength
)
;
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Debug
(
"
Audio
conduit
returned
buffer
of
length
%
u
"
samplesLength
)
)
;
RefPtr
<
SharedBuffer
>
samples
=
SharedBuffer
:
:
Create
(
samplesLength
*
sizeof
(
uint16_t
)
)
;
int16_t
*
samplesData
=
static_cast
<
int16_t
*
>
(
samples
-
>
Data
(
)
)
;
AudioSegment
segment
;
uint32_t
channelCount
=
samplesLength
/
samplesPer10ms
;
AutoTArray
<
int16_t
*
2
>
channels
;
AutoTArray
<
const
int16_t
*
2
>
outputChannels
;
size_t
frames
=
samplesLength
/
channelCount
;
channels
.
SetLength
(
channelCount
)
;
size_t
offset
=
0
;
for
(
size_t
i
=
0
;
i
<
channelCount
;
i
+
+
)
{
channels
[
i
]
=
samplesData
+
offset
;
offset
+
=
frames
;
}
DeinterleaveAndConvertBuffer
(
scratchBuffer
frames
channelCount
channels
.
Elements
(
)
)
;
outputChannels
.
AppendElements
(
channels
)
;
segment
.
AppendFrames
(
samples
.
forget
(
)
outputChannels
frames
mPrincipalHandle
)
;
if
(
mSource
-
>
AppendToTrack
(
mTrackId
&
segment
)
)
{
framesNeeded
-
=
frames
;
mPlayedTicks
+
=
frames
;
}
else
{
MOZ_LOG
(
gMediaPipelineLog
LogLevel
:
:
Error
(
"
AppendToTrack
failed
"
)
)
;
break
;
}
}
}
RefPtr
<
MediaSessionConduit
>
mConduit
;
const
TrackRate
mRate
;
const
RefPtr
<
TaskQueue
>
mTaskQueue
;
TrackTicks
mPlayedTicks
;
}
;
MediaPipelineReceiveAudio
:
:
MediaPipelineReceiveAudio
(
const
std
:
:
string
&
aPc
MediaTransportHandler
*
aTransportHandler
nsCOMPtr
<
nsIEventTarget
>
aMainThread
nsCOMPtr
<
nsIEventTarget
>
aStsThread
RefPtr
<
AudioSessionConduit
>
aConduit
dom
:
:
MediaStreamTrack
*
aTrack
)
:
MediaPipelineReceive
(
aPc
aTransportHandler
aMainThread
aStsThread
aConduit
)
mListener
(
aTrack
?
new
PipelineListener
(
aTrack
mConduit
)
:
nullptr
)
{
mDescription
=
mPc
+
"
|
Receive
audio
"
;
}
void
MediaPipelineReceiveAudio
:
:
DetachMedia
(
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mListener
)
{
mListener
-
>
EndTrack
(
)
;
}
}
void
MediaPipelineReceiveAudio
:
:
SetPrincipalHandle_m
(
const
PrincipalHandle
&
aPrincipalHandle
)
{
if
(
mListener
)
{
mListener
-
>
SetPrincipalHandle_m
(
aPrincipalHandle
)
;
}
}
void
MediaPipelineReceiveAudio
:
:
Start
(
)
{
mConduit
-
>
StartReceiving
(
)
;
if
(
mListener
)
{
mListener
-
>
AddSelf
(
)
;
}
}
void
MediaPipelineReceiveAudio
:
:
Stop
(
)
{
if
(
mListener
)
{
mListener
-
>
RemoveSelf
(
)
;
}
mConduit
-
>
StopReceiving
(
)
;
}
void
MediaPipelineReceiveAudio
:
:
OnRtpPacketReceived
(
)
{
if
(
mListener
)
{
mListener
-
>
OnRtpReceived
(
)
;
}
}
class
MediaPipelineReceiveVideo
:
:
PipelineListener
:
public
GenericReceiveListener
{
public
:
explicit
PipelineListener
(
dom
:
:
MediaStreamTrack
*
aTrack
)
:
GenericReceiveListener
(
aTrack
)
mImageContainer
(
LayerManager
:
:
CreateImageContainer
(
ImageContainer
:
:
ASYNCHRONOUS
)
)
{
AddTrackToSource
(
)
;
}
void
RenderVideoFrame
(
const
webrtc
:
:
VideoFrameBuffer
&
aBuffer
uint32_t
aTimeStamp
int64_t
aRenderTime
)
{
RefPtr
<
Image
>
image
;
if
(
aBuffer
.
type
(
)
=
=
webrtc
:
:
VideoFrameBuffer
:
:
Type
:
:
kNative
)
{
const
ImageBuffer
*
imageBuffer
=
static_cast
<
const
ImageBuffer
*
>
(
&
aBuffer
)
;
image
=
imageBuffer
-
>
GetNativeImage
(
)
;
}
else
{
MOZ_ASSERT
(
aBuffer
.
type
(
)
=
=
webrtc
:
:
VideoFrameBuffer
:
:
Type
:
:
kI420
)
;
rtc
:
:
scoped_refptr
<
const
webrtc
:
:
I420BufferInterface
>
i420
=
aBuffer
.
GetI420
(
)
;
MOZ_ASSERT
(
i420
-
>
DataY
(
)
)
;
RefPtr
<
PlanarYCbCrImage
>
yuvImage
=
mImageContainer
-
>
CreatePlanarYCbCrImage
(
)
;
PlanarYCbCrData
yuvData
;
yuvData
.
mYChannel
=
const_cast
<
uint8_t
*
>
(
i420
-
>
DataY
(
)
)
;
yuvData
.
mYSize
=
IntSize
(
i420
-
>
width
(
)
i420
-
>
height
(
)
)
;
yuvData
.
mYStride
=
i420
-
>
StrideY
(
)
;
MOZ_ASSERT
(
i420
-
>
StrideU
(
)
=
=
i420
-
>
StrideV
(
)
)
;
yuvData
.
mCbCrStride
=
i420
-
>
StrideU
(
)
;
yuvData
.
mCbChannel
=
const_cast
<
uint8_t
*
>
(
i420
-
>
DataU
(
)
)
;
yuvData
.
mCrChannel
=
const_cast
<
uint8_t
*
>
(
i420
-
>
DataV
(
)
)
;
yuvData
.
mCbCrSize
=
IntSize
(
(
i420
-
>
width
(
)
+
1
)
>
>
1
(
i420
-
>
height
(
)
+
1
)
>
>
1
)
;
yuvData
.
mPicX
=
0
;
yuvData
.
mPicY
=
0
;
yuvData
.
mPicSize
=
IntSize
(
i420
-
>
width
(
)
i420
-
>
height
(
)
)
;
yuvData
.
mStereoMode
=
StereoMode
:
:
MONO
;
if
(
!
yuvImage
-
>
CopyData
(
yuvData
)
)
{
MOZ_ASSERT
(
false
)
;
return
;
}
image
=
yuvImage
.
forget
(
)
;
}
VideoSegment
segment
;
auto
size
=
image
-
>
GetSize
(
)
;
segment
.
AppendFrame
(
image
.
forget
(
)
size
mPrincipalHandle
)
;
mSource
-
>
AppendToTrack
(
mTrackId
&
segment
)
;
}
private
:
RefPtr
<
layers
:
:
ImageContainer
>
mImageContainer
;
}
;
class
MediaPipelineReceiveVideo
:
:
PipelineRenderer
:
public
mozilla
:
:
VideoRenderer
{
public
:
explicit
PipelineRenderer
(
MediaPipelineReceiveVideo
*
aPipeline
)
:
mPipeline
(
aPipeline
)
{
}
void
Detach
(
)
{
mPipeline
=
nullptr
;
}
void
FrameSizeChange
(
unsigned
int
aWidth
unsigned
int
aHeight
)
override
{
}
void
RenderVideoFrame
(
const
webrtc
:
:
VideoFrameBuffer
&
aBuffer
uint32_t
aTimeStamp
int64_t
aRenderTime
)
override
{
mPipeline
-
>
mListener
-
>
RenderVideoFrame
(
aBuffer
aTimeStamp
aRenderTime
)
;
}
private
:
MediaPipelineReceiveVideo
*
mPipeline
;
}
;
MediaPipelineReceiveVideo
:
:
MediaPipelineReceiveVideo
(
const
std
:
:
string
&
aPc
MediaTransportHandler
*
aTransportHandler
nsCOMPtr
<
nsIEventTarget
>
aMainThread
nsCOMPtr
<
nsIEventTarget
>
aStsThread
RefPtr
<
VideoSessionConduit
>
aConduit
dom
:
:
MediaStreamTrack
*
aTrack
)
:
MediaPipelineReceive
(
aPc
aTransportHandler
aMainThread
aStsThread
aConduit
)
mRenderer
(
new
PipelineRenderer
(
this
)
)
mListener
(
aTrack
?
new
PipelineListener
(
aTrack
)
:
nullptr
)
{
mDescription
=
mPc
+
"
|
Receive
video
"
;
aConduit
-
>
AttachRenderer
(
mRenderer
)
;
}
void
MediaPipelineReceiveVideo
:
:
DetachMedia
(
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
static_cast
<
VideoSessionConduit
*
>
(
mConduit
.
get
(
)
)
-
>
DetachRenderer
(
)
;
if
(
mListener
)
{
mListener
-
>
EndTrack
(
)
;
}
}
void
MediaPipelineReceiveVideo
:
:
SetPrincipalHandle_m
(
const
PrincipalHandle
&
aPrincipalHandle
)
{
if
(
mListener
)
{
mListener
-
>
SetPrincipalHandle_m
(
aPrincipalHandle
)
;
}
}
void
MediaPipelineReceiveVideo
:
:
Start
(
)
{
mConduit
-
>
StartReceiving
(
)
;
if
(
mListener
)
{
mListener
-
>
AddSelf
(
)
;
}
}
void
MediaPipelineReceiveVideo
:
:
Stop
(
)
{
if
(
mListener
)
{
mListener
-
>
RemoveSelf
(
)
;
}
mConduit
-
>
StopReceiving
(
)
;
}
void
MediaPipelineReceiveVideo
:
:
OnRtpPacketReceived
(
)
{
if
(
mListener
)
{
mListener
-
>
OnRtpReceived
(
)
;
}
}
DOMHighResTimeStamp
MediaPipeline
:
:
GetNow
(
)
{
return
webrtc
:
:
Clock
:
:
GetRealTimeClock
(
)
-
>
TimeInMilliseconds
(
)
;
}
DOMHighResTimeStamp
MediaPipeline
:
:
RtpCSRCStats
:
:
GetExpiryFromTime
(
const
DOMHighResTimeStamp
aTime
)
{
return
aTime
-
EXPIRY_TIME_MILLISECONDS
;
}
MediaPipeline
:
:
RtpCSRCStats
:
:
RtpCSRCStats
(
const
uint32_t
aCsrc
const
DOMHighResTimeStamp
aTime
)
:
mCsrc
(
aCsrc
)
mTimestamp
(
aTime
)
{
}
void
MediaPipeline
:
:
RtpCSRCStats
:
:
GetWebidlInstance
(
dom
:
:
RTCRTPContributingSourceStats
&
aWebidlObj
const
nsString
&
aInboundRtpStreamId
)
const
{
nsString
statId
=
NS_LITERAL_STRING
(
"
csrc_
"
)
+
aInboundRtpStreamId
;
statId
.
AppendLiteral
(
"
_
"
)
;
statId
.
AppendInt
(
mCsrc
)
;
aWebidlObj
.
mId
.
Construct
(
statId
)
;
aWebidlObj
.
mType
.
Construct
(
RTCStatsType
:
:
Csrc
)
;
aWebidlObj
.
mTimestamp
.
Construct
(
mTimestamp
)
;
aWebidlObj
.
mContributorSsrc
.
Construct
(
mCsrc
)
;
aWebidlObj
.
mInboundRtpStreamId
.
Construct
(
aInboundRtpStreamId
)
;
}
}
