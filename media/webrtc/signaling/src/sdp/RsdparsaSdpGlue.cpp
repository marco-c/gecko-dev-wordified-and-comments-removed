#
include
<
string
>
#
include
"
signaling
/
src
/
sdp
/
RsdparsaSdpInc
.
h
"
#
include
"
signaling
/
src
/
sdp
/
RsdparsaSdpGlue
.
h
"
namespace
mozilla
{
std
:
:
string
convertStringView
(
StringView
str
)
{
if
(
nullptr
=
=
str
.
buf
)
{
return
std
:
:
string
(
)
;
}
else
{
return
std
:
:
string
(
str
.
buf
str
.
len
)
;
}
}
std
:
:
vector
<
std
:
:
string
>
convertStringVec
(
StringVec
*
vec
)
{
std
:
:
vector
<
std
:
:
string
>
ret
;
size_t
len
=
string_vec_len
(
vec
)
;
for
(
size_t
i
=
0
;
i
<
len
;
i
+
+
)
{
StringView
view
;
string_vec_get_view
(
vec
i
&
view
)
;
ret
.
push_back
(
convertStringView
(
view
)
)
;
}
return
ret
;
}
sdp
:
:
AddrType
convertAddressType
(
RustSdpAddrType
addrType
)
{
switch
(
addrType
)
{
case
RustSdpAddrType
:
:
kRustAddrNone
:
return
sdp
:
:
kAddrTypeNone
;
case
RustSdpAddrType
:
:
kRustAddrIp4
:
return
sdp
:
:
kIPv4
;
case
RustSdpAddrType
:
:
kRustAddrIp6
:
return
sdp
:
:
kIPv6
;
}
MOZ_CRASH
(
"
unknown
address
type
"
)
;
}
}
