#
ifndef
_PARSINGRESULTCOMPARER_H_
#
define
_PARSINGRESULTCOMPARER_H_
#
include
"
signaling
/
src
/
sdp
/
SdpParser
.
h
"
#
include
<
string
>
namespace
mozilla
{
class
Sdp
;
class
SdpMediaSection
;
class
SdpAttributeList
;
enum
class
SdpComparisonResult
{
Inequal
=
false
Equal
=
true
}
;
class
ParsingResultComparer
{
public
:
ParsingResultComparer
(
)
=
default
;
static
bool
Compare
(
const
UniquePtr
<
SdpParser
:
:
Results
>
&
aResA
const
UniquePtr
<
SdpParser
:
:
Results
>
&
aResB
const
std
:
:
string
&
orignalSdp
)
;
bool
Compare
(
const
Sdp
&
rsdparsaSdp
const
Sdp
&
sipccSdp
const
std
:
:
string
&
originalSdp
const
SdpComparisonResult
expect
=
SdpComparisonResult
:
:
Equal
)
;
bool
CompareMediaSections
(
const
SdpMediaSection
&
rustMediaSection
const
SdpMediaSection
&
sipccMediaSection
const
SdpComparisonResult
expect
=
SdpComparisonResult
:
:
Equal
)
const
;
bool
CompareAttrLists
(
const
SdpAttributeList
&
rustAttrlist
const
SdpAttributeList
&
sipccAttrlist
int
level
const
SdpComparisonResult
expect
=
SdpComparisonResult
:
:
Equal
)
const
;
void
TrackRustParsingFailed
(
size_t
sipccErrorCount
)
const
;
void
TrackSipccParsingFailed
(
size_t
rustErrorCount
)
const
;
private
:
std
:
:
string
mOriginalSdp
;
std
:
:
string
GetAttributeLines
(
const
std
:
:
string
&
attrType
int
level
)
const
;
}
;
}
#
endif
