#
ifndef
_PEER_CONNECTION_MEDIA_H_
#
define
_PEER_CONNECTION_MEDIA_H_
#
include
<
string
>
#
include
<
vector
>
#
include
<
map
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
net
/
StunAddrsRequestChild
.
h
"
#
include
"
nsIProtocolProxyCallback
.
h
"
#
include
"
TransceiverImpl
.
h
"
class
nsIPrincipal
;
namespace
mozilla
{
class
DataChannel
;
class
PeerIdentity
;
namespace
dom
{
struct
RTCInboundRTPStreamStats
;
struct
RTCOutboundRTPStreamStats
;
class
MediaStreamTrack
;
}
}
#
include
"
nriceresolver
.
h
"
#
include
"
nricemediastream
.
h
"
namespace
mozilla
{
class
PeerConnectionImpl
;
class
PeerConnectionMedia
;
class
PCUuidGenerator
;
class
MediaPipeline
;
class
MediaPipelineFilter
;
class
JsepSession
;
class
PeerConnectionMedia
:
public
sigslot
:
:
has_slots
<
>
{
~
PeerConnectionMedia
(
)
;
public
:
explicit
PeerConnectionMedia
(
PeerConnectionImpl
*
parent
)
;
PeerConnectionImpl
*
GetPC
(
)
{
return
mParent
;
}
nsresult
Init
(
const
std
:
:
vector
<
NrIceStunServer
>
&
stun_servers
const
std
:
:
vector
<
NrIceTurnServer
>
&
turn_servers
NrIceCtx
:
:
Policy
policy
)
;
void
SelfDestruct
(
)
;
RefPtr
<
NrIceCtx
>
ice_ctx
(
)
const
{
return
mIceCtx
;
}
RefPtr
<
NrIceMediaStream
>
ice_media_stream
(
const
std
:
:
string
&
aTransportId
)
const
{
return
mIceCtx
-
>
GetStream
(
aTransportId
)
;
}
void
EnsureTransports
(
const
JsepSession
&
aSession
)
;
nsresult
UpdateTransports
(
const
JsepSession
&
aSession
const
bool
forceIceTcp
)
;
void
StartIceChecks
(
const
JsepSession
&
session
)
;
void
AddIceCandidate
(
const
std
:
:
string
&
candidate
const
std
:
:
string
&
aTransportId
)
;
void
UpdateNetworkState
(
bool
online
)
;
nsresult
UpdateMediaPipelines
(
)
;
nsresult
AddTransceiver
(
JsepTransceiver
*
aJsepTransceiver
dom
:
:
MediaStreamTrack
&
aReceiveTrack
dom
:
:
MediaStreamTrack
*
aSendTrack
RefPtr
<
TransceiverImpl
>
*
aTransceiverImpl
)
;
void
GetTransmitPipelinesMatching
(
const
dom
:
:
MediaStreamTrack
*
aTrack
nsTArray
<
RefPtr
<
MediaPipeline
>
>
*
aPipelines
)
;
void
GetReceivePipelinesMatching
(
const
dom
:
:
MediaStreamTrack
*
aTrack
nsTArray
<
RefPtr
<
MediaPipeline
>
>
*
aPipelines
)
;
std
:
:
string
GetTransportIdMatching
(
const
dom
:
:
MediaStreamTrack
&
aTrack
)
const
;
nsresult
AddRIDExtension
(
dom
:
:
MediaStreamTrack
&
aRecvTrack
unsigned
short
aExtensionId
)
;
nsresult
AddRIDFilter
(
dom
:
:
MediaStreamTrack
&
aRecvTrack
const
nsAString
&
aRid
)
;
void
UpdateSinkIdentity_m
(
const
dom
:
:
MediaStreamTrack
*
aTrack
nsIPrincipal
*
aPrincipal
const
PeerIdentity
*
aSinkIdentity
)
;
bool
AnyLocalTrackHasPeerIdentity
(
)
const
;
void
UpdateRemoteStreamPrincipals_m
(
nsIPrincipal
*
aPrincipal
)
;
bool
AnyCodecHasPluginID
(
uint64_t
aPluginID
)
;
const
nsCOMPtr
<
nsIThread
>
&
GetMainThread
(
)
const
{
return
mMainThread
;
}
const
nsCOMPtr
<
nsIEventTarget
>
&
GetSTSThread
(
)
const
{
return
mSTSThread
;
}
RefPtr
<
TransportFlow
>
GetTransportFlow
(
const
std
:
:
string
&
aId
bool
aIsRtcp
)
{
auto
&
flows
=
aIsRtcp
?
mRtcpTransportFlows
:
mTransportFlows
;
auto
it
=
flows
.
find
(
aId
)
;
if
(
it
=
=
flows
.
end
(
)
)
{
return
nullptr
;
}
return
it
-
>
second
;
}
std
:
:
vector
<
RefPtr
<
TransceiverImpl
>
>
&
GetTransceivers
(
)
{
return
mTransceivers
;
}
void
AddTransportFlow
(
const
std
:
:
string
&
aId
bool
aRtcp
const
RefPtr
<
TransportFlow
>
&
aFlow
)
;
void
RemoveTransportFlow
(
const
std
:
:
string
&
aId
bool
aRtcp
)
;
void
ConnectDtlsListener_s
(
const
RefPtr
<
TransportFlow
>
&
aFlow
)
;
void
DtlsConnected_s
(
TransportLayer
*
aFlow
TransportLayer
:
:
State
state
)
;
static
void
DtlsConnected_m
(
const
std
:
:
string
&
aParentHandle
bool
aPrivacyRequested
)
;
sigslot
:
:
signal2
<
NrIceCtx
*
NrIceCtx
:
:
GatheringState
>
SignalIceGatheringStateChange
;
sigslot
:
:
signal2
<
NrIceCtx
*
NrIceCtx
:
:
ConnectionState
>
SignalIceConnectionStateChange
;
sigslot
:
:
signal2
<
const
std
:
:
string
&
const
std
:
:
string
&
>
SignalCandidate
;
sigslot
:
:
signal5
<
const
std
:
:
string
&
uint16_t
const
std
:
:
string
&
uint16_t
const
std
:
:
string
&
>
SignalUpdateDefaultCandidate
;
sigslot
:
:
signal1
<
const
std
:
:
string
&
>
SignalEndOfLocalCandidates
;
RefPtr
<
WebRtcCallWrapper
>
mCall
;
private
:
void
InitLocalAddrs
(
)
;
nsresult
InitProxy
(
)
;
class
ProtocolProxyQueryHandler
:
public
nsIProtocolProxyCallback
{
public
:
explicit
ProtocolProxyQueryHandler
(
PeerConnectionMedia
*
pcm
)
:
pcm_
(
pcm
)
{
}
NS_IMETHOD
OnProxyAvailable
(
nsICancelable
*
request
nsIChannel
*
aChannel
nsIProxyInfo
*
proxyinfo
nsresult
result
)
override
;
NS_DECL_ISUPPORTS
private
:
void
SetProxyOnPcm
(
nsIProxyInfo
&
proxyinfo
)
;
RefPtr
<
PeerConnectionMedia
>
pcm_
;
virtual
~
ProtocolProxyQueryHandler
(
)
{
}
}
;
class
StunAddrsHandler
:
public
net
:
:
StunAddrsListener
{
public
:
explicit
StunAddrsHandler
(
PeerConnectionMedia
*
pcm
)
:
pcm_
(
pcm
)
{
}
void
OnStunAddrsAvailable
(
const
mozilla
:
:
net
:
:
NrIceStunAddrArray
&
addrs
)
override
;
private
:
RefPtr
<
PeerConnectionMedia
>
pcm_
;
virtual
~
StunAddrsHandler
(
)
{
}
}
;
void
ShutdownMediaTransport_s
(
)
;
void
SelfDestruct_m
(
)
;
nsresult
UpdateTransport
(
const
JsepTransceiver
&
aTransceiver
bool
aForceIceTcp
)
;
void
EnsureTransport_s
(
const
std
:
:
string
&
aTransportId
const
std
:
:
string
&
aUfrag
const
std
:
:
string
&
aPwd
size_t
aComponentCount
)
;
void
ActivateTransport_s
(
const
std
:
:
string
&
aTransportId
const
std
:
:
string
&
aLocalUfrag
const
std
:
:
string
&
aLocalPwd
size_t
aComponentCount
const
std
:
:
string
&
aUfrag
const
std
:
:
string
&
aPassword
const
std
:
:
vector
<
std
:
:
string
>
&
aCandidateList
)
;
void
RemoveTransportsExcept_s
(
const
std
:
:
set
<
std
:
:
string
>
&
aTransportIds
)
;
nsresult
UpdateTransportFlows
(
const
JsepTransceiver
&
transceiver
)
;
nsresult
UpdateTransportFlow
(
bool
aIsRtcp
const
JsepTransport
&
aTransport
)
;
void
GatherIfReady
(
)
;
void
FlushIceCtxOperationQueueIfReady
(
)
;
void
PerformOrEnqueueIceCtxOperation
(
nsIRunnable
*
runnable
)
;
void
EnsureIceGathering_s
(
bool
aDefaultRouteOnly
bool
aProxyOnly
)
;
void
StartIceChecks_s
(
bool
aIsControlling
bool
aIsOfferer
bool
aIsIceLite
const
std
:
:
vector
<
std
:
:
string
>
&
aIceOptionsList
)
;
bool
GetPrefDefaultAddressOnly
(
)
const
;
bool
GetPrefProxyOnly
(
)
const
;
void
ConnectSignals
(
NrIceCtx
*
aCtx
NrIceCtx
*
aOldCtx
=
nullptr
)
;
void
AddIceCandidate_s
(
const
std
:
:
string
&
aCandidate
const
std
:
:
string
&
aTransportId
)
;
void
UpdateNetworkState_s
(
bool
online
)
;
void
IceGatheringStateChange_s
(
NrIceCtx
*
ctx
NrIceCtx
:
:
GatheringState
state
)
;
void
IceConnectionStateChange_s
(
NrIceCtx
*
ctx
NrIceCtx
:
:
ConnectionState
state
)
;
void
IceStreamReady_s
(
NrIceMediaStream
*
aStream
)
;
void
OnCandidateFound_s
(
NrIceMediaStream
*
aStream
const
std
:
:
string
&
aCandidate
)
;
void
EndOfLocalCandidates
(
const
std
:
:
string
&
aDefaultAddr
uint16_t
aDefaultPort
const
std
:
:
string
&
aDefaultRtcpAddr
uint16_t
aDefaultRtcpPort
const
std
:
:
string
&
aTransportId
)
;
void
GetDefaultCandidates
(
const
NrIceMediaStream
&
aStream
NrIceCandidate
*
aCandidate
NrIceCandidate
*
aRtcpCandidate
)
;
void
IceGatheringStateChange_m
(
NrIceCtx
*
ctx
NrIceCtx
:
:
GatheringState
state
)
;
void
IceConnectionStateChange_m
(
NrIceCtx
*
ctx
NrIceCtx
:
:
ConnectionState
state
)
;
void
OnCandidateFound_m
(
const
std
:
:
string
&
aCandidateLine
const
std
:
:
string
&
aDefaultAddr
uint16_t
aDefaultPort
const
std
:
:
string
&
aDefaultRtcpAddr
uint16_t
aDefaultRtcpPort
const
std
:
:
string
&
aTransportId
)
;
void
EndOfLocalCandidates_m
(
const
std
:
:
string
&
aDefaultAddr
uint16_t
aDefaultPort
const
std
:
:
string
&
aDefaultRtcpAddr
uint16_t
aDefaultRtcpPort
const
std
:
:
string
&
aTransportId
)
;
bool
IsIceCtxReady
(
)
const
{
return
mProxyResolveCompleted
&
&
mLocalAddrsCompleted
;
}
PeerConnectionImpl
*
mParent
;
std
:
:
string
mParentHandle
;
std
:
:
string
mParentName
;
std
:
:
vector
<
RefPtr
<
TransceiverImpl
>
>
mTransceivers
;
RefPtr
<
NrIceCtx
>
mIceCtx
;
RefPtr
<
NrIceResolver
>
mDNSResolver
;
std
:
:
map
<
std
:
:
string
RefPtr
<
TransportFlow
>
>
mTransportFlows
;
std
:
:
map
<
std
:
:
string
RefPtr
<
TransportFlow
>
>
mRtcpTransportFlows
;
UniquePtr
<
PCUuidGenerator
>
mUuidGen
;
nsCOMPtr
<
nsIThread
>
mMainThread
;
nsCOMPtr
<
nsIEventTarget
>
mSTSThread
;
std
:
:
vector
<
nsCOMPtr
<
nsIRunnable
>
>
mQueuedIceCtxOperations
;
nsCOMPtr
<
nsICancelable
>
mProxyRequest
;
bool
mProxyResolveCompleted
;
UniquePtr
<
NrIceProxyServer
>
mProxyServer
;
RefPtr
<
net
:
:
StunAddrsRequestChild
>
mStunAddrsRequest
;
bool
mLocalAddrsCompleted
;
nsTArray
<
NrIceStunAddr
>
mStunAddrs
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
PeerConnectionMedia
)
}
;
}
#
endif
