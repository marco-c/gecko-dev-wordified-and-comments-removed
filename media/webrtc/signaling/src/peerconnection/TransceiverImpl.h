#
ifndef
_TRANSCEIVERIMPL_H_
#
define
_TRANSCEIVERIMPL_H_
#
include
<
string
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISerialEventTarget
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrack
.
h
"
#
include
"
ErrorList
.
h
"
#
include
"
signaling
/
src
/
jsep
/
JsepTransceiver
.
h
"
class
nsIPrincipal
;
namespace
mozilla
{
class
PeerIdentity
;
class
JsepTransceiver
;
enum
class
MediaSessionConduitLocalDirection
:
int
;
class
MediaSessionConduit
;
class
VideoSessionConduit
;
class
AudioSessionConduit
;
class
MediaPipelineReceive
;
class
MediaPipelineTransmit
;
class
MediaPipeline
;
class
MediaPipelineFilter
;
class
MediaTransportHandler
;
class
WebRtcCallWrapper
;
class
JsepTrackNegotiatedDetails
;
namespace
dom
{
class
RTCRtpTransceiver
;
struct
RTCRtpSourceEntry
;
}
class
TransceiverImpl
:
public
nsISupports
{
public
:
TransceiverImpl
(
const
std
:
:
string
&
aPCHandle
MediaTransportHandler
*
aTransportHandler
JsepTransceiver
*
aJsepTransceiver
nsISerialEventTarget
*
aMainThread
nsISerialEventTarget
*
aStsThread
dom
:
:
MediaStreamTrack
*
aReceiveTrack
dom
:
:
MediaStreamTrack
*
aSendTrack
WebRtcCallWrapper
*
aCallWrapper
const
PrincipalHandle
&
aPrincipalHandle
)
;
bool
IsValid
(
)
const
{
return
!
!
mConduit
;
}
nsresult
UpdateSendTrack
(
dom
:
:
MediaStreamTrack
*
aSendTrack
)
;
nsresult
UpdateSinkIdentity
(
const
dom
:
:
MediaStreamTrack
*
aTrack
nsIPrincipal
*
aPrincipal
const
PeerIdentity
*
aSinkIdentity
)
;
nsresult
UpdateTransport
(
)
;
nsresult
UpdateConduit
(
)
;
nsresult
UpdatePrincipal
(
nsIPrincipal
*
aPrincipal
)
;
void
ResetSync
(
)
;
nsresult
SyncWithMatchingVideoConduits
(
std
:
:
vector
<
RefPtr
<
TransceiverImpl
>
>
&
transceivers
)
;
void
Shutdown_m
(
)
;
bool
ConduitHasPluginID
(
uint64_t
aPluginID
)
;
bool
HasSendTrack
(
const
dom
:
:
MediaStreamTrack
*
aSendTrack
)
const
;
RefPtr
<
dom
:
:
MediaStreamTrack
>
GetSendTrack
(
)
{
return
mSendTrack
;
}
bool
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aReflector
)
;
already_AddRefed
<
dom
:
:
MediaStreamTrack
>
GetReceiveTrack
(
)
;
void
SetReceiveTrackMuted
(
bool
aMuted
)
;
void
SyncWithJS
(
dom
:
:
RTCRtpTransceiver
&
aJsTransceiver
ErrorResult
&
aRv
)
;
void
InsertDTMFTone
(
int
tone
uint32_t
duration
)
;
bool
HasReceiveTrack
(
const
dom
:
:
MediaStreamTrack
*
aReceiveTrack
)
const
;
RefPtr
<
MediaPipeline
>
GetSendPipeline
(
)
;
RefPtr
<
MediaPipeline
>
GetReceivePipeline
(
)
;
std
:
:
string
GetTransportId
(
)
const
{
return
mJsepTransceiver
-
>
mTransport
.
mTransportId
;
}
void
AddRIDExtension
(
unsigned
short
aExtensionId
)
;
void
AddRIDFilter
(
const
nsAString
&
aRid
)
;
bool
IsVideo
(
)
const
;
bool
IsSending
(
)
const
{
return
!
mJsepTransceiver
-
>
IsStopped
(
)
&
&
mJsepTransceiver
-
>
mSendTrack
.
GetActive
(
)
;
}
void
GetRtpSources
(
const
int64_t
aTimeNow
nsTArray
<
dom
:
:
RTCRtpSourceEntry
>
&
outSources
)
const
;
void
InsertAudioLevelForContributingSource
(
const
uint32_t
aSource
const
int64_t
aTimestamp
const
uint32_t
aRtpTimestamp
const
bool
aHasLevel
const
uint8_t
aLevel
)
;
NS_DECL_THREADSAFE_ISUPPORTS
private
:
virtual
~
TransceiverImpl
(
)
;
void
InitAudio
(
const
PrincipalHandle
&
aPrincipalHandle
)
;
void
InitVideo
(
const
PrincipalHandle
&
aPrincipalHandle
)
;
nsresult
UpdateAudioConduit
(
)
;
nsresult
UpdateVideoConduit
(
)
;
nsresult
ConfigureVideoCodecMode
(
VideoSessionConduit
&
aConduit
)
;
void
UpdateConduitRtpExtmap
(
const
JsepTrackNegotiatedDetails
&
aDetails
const
MediaSessionConduitLocalDirection
aDir
)
;
void
Stop
(
)
;
const
std
:
:
string
mPCHandle
;
RefPtr
<
MediaTransportHandler
>
mTransportHandler
;
RefPtr
<
JsepTransceiver
>
mJsepTransceiver
;
std
:
:
string
mMid
;
bool
mHaveStartedReceiving
;
bool
mHaveSetupTransport
;
nsCOMPtr
<
nsISerialEventTarget
>
mMainThread
;
nsCOMPtr
<
nsISerialEventTarget
>
mStsThread
;
RefPtr
<
dom
:
:
MediaStreamTrack
>
mReceiveTrack
;
RefPtr
<
dom
:
:
MediaStreamTrack
>
mSendTrack
;
RefPtr
<
WebRtcCallWrapper
>
mCallWrapper
;
RefPtr
<
MediaSessionConduit
>
mConduit
;
RefPtr
<
MediaPipelineReceive
>
mReceivePipeline
;
RefPtr
<
MediaPipelineTransmit
>
mTransmitPipeline
;
}
;
}
#
endif
