#
ifndef
_TRANSCEIVERIMPL_H_
#
define
_TRANSCEIVERIMPL_H_
#
include
<
string
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISerialEventTarget
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
MediaStreamTrack
.
h
"
#
include
"
ErrorList
.
h
"
#
include
"
signaling
/
src
/
jsep
/
JsepTransceiver
.
h
"
#
include
"
transportlayer
.
h
"
class
nsIPrincipal
;
namespace
mozilla
{
class
PeerIdentity
;
class
JsepTransceiver
;
enum
class
MediaSessionConduitLocalDirection
:
int
;
class
MediaSessionConduit
;
class
VideoSessionConduit
;
class
AudioSessionConduit
;
struct
AudioCodecConfig
;
class
VideoCodecConfig
;
class
MediaPipelineTransmit
;
class
MediaPipeline
;
class
MediaPipelineFilter
;
class
MediaTransportHandler
;
class
WebRtcCallWrapper
;
class
JsepTrackNegotiatedDetails
;
namespace
dom
{
class
RTCDtlsTransport
;
class
RTCDTMFSender
;
class
RTCRtpTransceiver
;
struct
RTCRtpSourceEntry
;
class
RTCRtpReceiver
;
}
class
TransceiverImpl
:
public
nsISupports
public
nsWrapperCache
public
sigslot
:
:
has_slots
<
>
{
public
:
TransceiverImpl
(
nsPIDOMWindowInner
*
aWindow
bool
aPrivacyNeeded
const
std
:
:
string
&
aPCHandle
MediaTransportHandler
*
aTransportHandler
JsepTransceiver
*
aJsepTransceiver
nsISerialEventTarget
*
aMainThread
nsISerialEventTarget
*
aStsThread
dom
:
:
MediaStreamTrack
*
aSendTrack
WebRtcCallWrapper
*
aCallWrapper
)
;
bool
IsValid
(
)
const
{
return
!
!
mConduit
;
}
nsresult
UpdateSendTrack
(
dom
:
:
MediaStreamTrack
*
aSendTrack
)
;
nsresult
UpdateSinkIdentity
(
const
dom
:
:
MediaStreamTrack
*
aTrack
nsIPrincipal
*
aPrincipal
const
PeerIdentity
*
aSinkIdentity
)
;
nsresult
UpdateTransport
(
)
;
nsresult
UpdateConduit
(
)
;
void
ResetSync
(
)
;
nsresult
SyncWithMatchingVideoConduits
(
std
:
:
vector
<
RefPtr
<
TransceiverImpl
>
>
&
transceivers
)
;
void
Shutdown_m
(
)
;
bool
ConduitHasPluginID
(
uint64_t
aPluginID
)
;
bool
HasSendTrack
(
const
dom
:
:
MediaStreamTrack
*
aSendTrack
)
const
;
RefPtr
<
dom
:
:
MediaStreamTrack
>
GetSendTrack
(
)
{
return
mSendTrack
;
}
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
nsPIDOMWindowInner
*
GetParentObject
(
)
const
;
void
SyncWithJS
(
dom
:
:
RTCRtpTransceiver
&
aJsTransceiver
ErrorResult
&
aRv
)
;
dom
:
:
RTCRtpReceiver
*
Receiver
(
)
const
{
return
mReceiver
;
}
dom
:
:
RTCDTMFSender
*
GetDtmf
(
)
const
{
return
mDtmf
;
}
dom
:
:
RTCDtlsTransport
*
GetDtlsTransport
(
)
const
{
return
mDtlsTransport
;
}
bool
CanSendDTMF
(
)
const
;
RefPtr
<
MediaPipelineTransmit
>
GetSendPipeline
(
)
;
void
UpdateDtlsTransportState
(
const
std
:
:
string
&
aTransportId
TransportLayer
:
:
State
aState
)
;
void
SetDtlsTransport
(
dom
:
:
RTCDtlsTransport
*
aDtlsTransport
bool
aStable
)
;
void
RollbackToStableDtlsTransport
(
)
;
std
:
:
string
GetTransportId
(
)
const
{
return
mJsepTransceiver
-
>
mTransport
.
mTransportId
;
}
bool
IsVideo
(
)
const
;
bool
IsSending
(
)
const
{
return
!
mJsepTransceiver
-
>
IsStopped
(
)
&
&
mJsepTransceiver
-
>
mSendTrack
.
GetActive
(
)
;
}
bool
IsReceiving
(
)
const
{
return
!
mJsepTransceiver
-
>
IsStopped
(
)
&
&
mJsepTransceiver
-
>
mRecvTrack
.
GetActive
(
)
;
}
MediaSessionConduit
*
GetConduit
(
)
const
{
return
mConduit
;
}
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
TransceiverImpl
)
static
nsresult
NegotiatedDetailsToAudioCodecConfigs
(
const
JsepTrackNegotiatedDetails
&
aDetails
std
:
:
vector
<
UniquePtr
<
AudioCodecConfig
>
>
*
aConfigs
)
;
static
nsresult
NegotiatedDetailsToVideoCodecConfigs
(
const
JsepTrackNegotiatedDetails
&
aDetails
std
:
:
vector
<
UniquePtr
<
VideoCodecConfig
>
>
*
aConfigs
)
;
static
void
UpdateConduitRtpExtmap
(
MediaSessionConduit
&
aConduit
const
JsepTrackNegotiatedDetails
&
aDetails
const
MediaSessionConduitLocalDirection
aDir
)
;
private
:
virtual
~
TransceiverImpl
(
)
;
void
InitAudio
(
)
;
void
InitVideo
(
)
;
nsresult
UpdateAudioConduit
(
)
;
nsresult
UpdateVideoConduit
(
)
;
nsresult
ConfigureVideoCodecMode
(
VideoSessionConduit
&
aConduit
)
;
void
Stop
(
)
;
nsCOMPtr
<
nsPIDOMWindowInner
>
mWindow
;
const
std
:
:
string
mPCHandle
;
RefPtr
<
MediaTransportHandler
>
mTransportHandler
;
RefPtr
<
JsepTransceiver
>
mJsepTransceiver
;
std
:
:
string
mMid
;
bool
mHaveSetupTransport
;
nsCOMPtr
<
nsISerialEventTarget
>
mMainThread
;
nsCOMPtr
<
nsISerialEventTarget
>
mStsThread
;
RefPtr
<
dom
:
:
MediaStreamTrack
>
mSendTrack
;
RefPtr
<
WebRtcCallWrapper
>
mCallWrapper
;
RefPtr
<
MediaSessionConduit
>
mConduit
;
RefPtr
<
MediaPipelineTransmit
>
mTransmitPipeline
;
RefPtr
<
dom
:
:
RTCDtlsTransport
>
mDtlsTransport
;
RefPtr
<
dom
:
:
RTCDtlsTransport
>
mLastStableDtlsTransport
;
RefPtr
<
dom
:
:
RTCRtpReceiver
>
mReceiver
;
RefPtr
<
dom
:
:
RTCDTMFSender
>
mDtmf
;
}
;
}
#
endif
