#
include
"
signaling
/
src
/
peerconnection
/
PacketDumper
.
h
"
#
include
"
signaling
/
src
/
peerconnection
/
PeerConnectionImpl
.
h
"
#
include
"
mozilla
/
media
/
MediaUtils
.
h
"
#
include
"
nsThreadUtils
.
h
"
namespace
mozilla
{
PacketDumper
:
:
PacketDumper
(
PeerConnectionImpl
*
aPc
)
:
mPc
(
aPc
)
{
}
PacketDumper
:
:
PacketDumper
(
const
std
:
:
string
&
aPcHandle
)
{
if
(
!
aPcHandle
.
empty
(
)
)
{
PeerConnectionWrapper
pcw
(
aPcHandle
)
;
mPc
=
pcw
.
impl
(
)
;
}
}
PacketDumper
:
:
~
PacketDumper
(
)
{
RefPtr
<
Runnable
>
pcDisposeRunnable
=
media
:
:
NewRunnableFrom
(
std
:
:
bind
(
[
]
(
RefPtr
<
PeerConnectionImpl
>
pc
)
{
return
NS_OK
;
}
mPc
.
forget
(
)
)
)
;
NS_DispatchToMainThread
(
pcDisposeRunnable
)
;
}
void
PacketDumper
:
:
Dump
(
size_t
level
dom
:
:
mozPacketDumpType
type
bool
sending
const
void
*
data
size_t
size
)
{
if
(
!
mPc
|
|
!
mPc
-
>
ShouldDumpPacket
(
level
type
sending
)
)
{
return
;
}
RefPtr
<
PeerConnectionImpl
>
pc
=
mPc
;
UniquePtr
<
uint8_t
[
]
>
ownedPacket
=
MakeUnique
<
uint8_t
[
]
>
(
size
)
;
memcpy
(
ownedPacket
.
get
(
)
data
size
)
;
RefPtr
<
Runnable
>
dumpRunnable
=
media
:
:
NewRunnableFrom
(
std
:
:
bind
(
[
pc
level
type
sending
size
]
(
UniquePtr
<
uint8_t
[
]
>
&
packet
)
-
>
nsresult
{
pc
-
>
DumpPacket_m
(
level
type
sending
packet
size
)
;
return
NS_OK
;
}
std
:
:
move
(
ownedPacket
)
)
)
;
NS_DispatchToMainThread
(
dumpRunnable
)
;
}
}
