#
include
"
config_for_unittests
.
h
"
#
include
<
gflags
/
gflags
.
h
>
#
include
<
math
.
h
>
#
include
<
stdio
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
ifdef
HAVE_UNISTD_H
#
include
<
unistd
.
h
>
#
endif
#
include
<
vector
>
#
include
<
string
>
#
include
"
util
.
h
"
TEST_INIT
EXPECT_DEATH_INIT
#
ifndef
_MSC_VER
#
include
<
google
/
gflags_completions
.
h
>
void
(
*
unused_fn
)
(
)
=
&
GOOGLE_NAMESPACE
:
:
HandleCommandLineCompletions
;
#
endif
using
std
:
:
string
;
using
std
:
:
vector
;
using
GOOGLE_NAMESPACE
:
:
int32
;
using
GOOGLE_NAMESPACE
:
:
FlagRegisterer
;
using
GOOGLE_NAMESPACE
:
:
StringFromEnv
;
using
GOOGLE_NAMESPACE
:
:
RegisterFlagValidator
;
using
GOOGLE_NAMESPACE
:
:
CommandLineFlagInfo
;
using
GOOGLE_NAMESPACE
:
:
GetAllFlags
;
DEFINE_string
(
test_tmpdir
"
/
tmp
/
gflags_unittest
"
"
Dir
we
use
for
temp
files
"
)
;
#
ifdef
_MSC_VER
DEFINE_string
(
srcdir
"
.
.
\
\
.
.
"
"
Source
-
dir
root
needed
to
find
gflags_unittest_flagfile
"
)
;
#
else
DEFINE_string
(
srcdir
StringFromEnv
(
"
SRCDIR
"
"
.
"
)
"
Source
-
dir
root
needed
to
find
gflags_unittest_flagfile
"
)
;
#
endif
DECLARE_string
(
tryfromenv
)
;
DEFINE_bool
(
test_bool
false
"
tests
bool
-
ness
"
)
;
DEFINE_int32
(
test_int32
-
1
"
"
)
;
DEFINE_int64
(
test_int64
-
2
"
"
)
;
DEFINE_uint64
(
test_uint64
2
"
"
)
;
DEFINE_double
(
test_double
-
1
.
0
"
"
)
;
DEFINE_string
(
test_string
"
initial
"
"
"
)
;
DEFINE_bool
(
test_bool_with_quite_quite_quite_quite_quite_quite_quite_quite_quite_quite_quite_quite_quite_quite_long_name
false
"
extremely_extremely_extremely_extremely_extremely_extremely_extremely_extremely_long_meaning
"
)
;
DEFINE_string
(
test_str1
"
initial
"
"
"
)
;
DEFINE_string
(
test_str2
"
initial
"
"
"
)
;
DEFINE_string
(
test_str3
"
initial
"
"
"
)
;
DEFINE_string
(
test_tryfromenv
"
initial
"
"
"
)
;
static
int
changeable_var
=
12
;
DEFINE_int32
(
changeable_var
+
+
changeable_var
"
"
)
;
static
int
changeable_bool_var
=
8008
;
DEFINE_bool
(
changeable_bool_var
+
+
changeable_bool_var
=
=
8009
"
"
)
;
static
int
changeable_string_var
=
0
;
static
string
ChangeableString
(
)
{
char
r
[
]
=
{
static_cast
<
char
>
(
'
0
'
+
+
+
changeable_string_var
)
'
\
0
'
}
;
return
r
;
}
DEFINE_string
(
changeable_string_var
ChangeableString
(
)
"
"
)
;
DEFINE_bool
(
unused_bool
true
"
unused
bool
-
ness
"
)
;
DEFINE_int32
(
unused_int32
-
1001
"
"
)
;
DEFINE_int64
(
unused_int64
-
2001
"
"
)
;
DEFINE_uint64
(
unused_uint64
2000
"
"
)
;
DEFINE_double
(
unused_double
-
1000
.
0
"
"
)
;
DEFINE_string
(
unused_string
"
unused
"
"
"
)
;
DEFINE_bool
(
changed_bool1
false
"
changed
"
)
;
DEFINE_bool
(
changed_bool2
false
"
changed
"
)
;
DEFINE_bool
(
long_helpstring
false
"
This
helpstring
goes
on
forever
and
ever
and
ever
and
ever
and
"
"
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
"
"
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
"
"
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
"
"
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
"
"
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
"
"
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
"
"
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
"
"
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
"
"
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
ever
and
"
"
ever
.
This
is
the
end
of
a
long
helpstring
"
)
;
static
bool
AlwaysFail
(
const
char
*
flag
bool
value
)
{
return
value
=
=
false
;
}
DEFINE_bool
(
always_fail
false
"
will
fail
to
validate
when
you
set
it
"
)
;
DEFINE_validator
(
always_fail
AlwaysFail
)
;
static
bool
DeadlockIfCantLockInValidators
(
const
char
*
flag
bool
value
)
{
if
(
!
value
)
{
return
true
;
}
vector
<
CommandLineFlagInfo
>
dummy
;
GetAllFlags
(
&
dummy
)
;
return
true
;
}
DEFINE_bool
(
deadlock_if_cant_lock
false
"
will
deadlock
if
set
to
true
and
"
"
if
locking
of
registry
in
validators
fails
.
"
)
;
DEFINE_validator
(
deadlock_if_cant_lock
DeadlockIfCantLockInValidators
)
;
#
define
MAKEFLAG
(
x
)
DEFINE_int32
(
test_flag_num
#
#
x
x
"
Test
flag
"
)
#
define
MAKEFLAG10
(
x
)
\
MAKEFLAG
(
x
#
#
0
)
;
\
MAKEFLAG
(
x
#
#
1
)
;
\
MAKEFLAG
(
x
#
#
2
)
;
\
MAKEFLAG
(
x
#
#
3
)
;
\
MAKEFLAG
(
x
#
#
4
)
;
\
MAKEFLAG
(
x
#
#
5
)
;
\
MAKEFLAG
(
x
#
#
6
)
;
\
MAKEFLAG
(
x
#
#
7
)
;
\
MAKEFLAG
(
x
#
#
8
)
;
\
MAKEFLAG
(
x
#
#
9
)
#
define
MAKEFLAG100
(
x
)
\
MAKEFLAG10
(
x
#
#
0
)
;
\
MAKEFLAG10
(
x
#
#
1
)
;
\
MAKEFLAG10
(
x
#
#
2
)
;
\
MAKEFLAG10
(
x
#
#
3
)
;
\
MAKEFLAG10
(
x
#
#
4
)
;
\
MAKEFLAG10
(
x
#
#
5
)
;
\
MAKEFLAG10
(
x
#
#
6
)
;
\
MAKEFLAG10
(
x
#
#
7
)
;
\
MAKEFLAG10
(
x
#
#
8
)
;
\
MAKEFLAG10
(
x
#
#
9
)
MAKEFLAG100
(
1
)
;
MAKEFLAG100
(
2
)
;
MAKEFLAG100
(
3
)
;
MAKEFLAG100
(
4
)
;
MAKEFLAG100
(
5
)
;
MAKEFLAG100
(
6
)
;
MAKEFLAG100
(
7
)
;
MAKEFLAG100
(
8
)
;
MAKEFLAG100
(
9
)
;
MAKEFLAG100
(
10
)
;
MAKEFLAG100
(
11
)
;
MAKEFLAG100
(
12
)
;
MAKEFLAG100
(
13
)
;
MAKEFLAG100
(
14
)
;
MAKEFLAG100
(
15
)
;
#
undef
MAKEFLAG100
#
undef
MAKEFLAG10
#
undef
MAKEFLAG
namespace
fLI
{
static
const
int32
FLAGS_nonotldflag1
=
12
;
int32
FLAGS_tldflag1
=
FLAGS_nonotldflag1
;
int32
FLAGS_notldflag1
=
FLAGS_nonotldflag1
;
static
FlagRegisterer
o_tldflag1
(
"
tldflag1
"
"
int32
"
"
should
show
up
in
-
-
helpshort
"
"
gflags_unittest
.
cc
"
&
FLAGS_tldflag1
&
FLAGS_notldflag1
)
;
}
using
fLI
:
:
FLAGS_tldflag1
;
namespace
fLI
{
static
const
int32
FLAGS_nonotldflag2
=
23
;
int32
FLAGS_tldflag2
=
FLAGS_nonotldflag2
;
int32
FLAGS_notldflag2
=
FLAGS_nonotldflag2
;
static
FlagRegisterer
o_tldflag2
(
"
tldflag2
"
"
int32
"
"
should
show
up
in
-
-
helpshort
"
"
gflags_unittest
.
"
&
FLAGS_tldflag2
&
FLAGS_notldflag2
)
;
}
using
fLI
:
:
FLAGS_tldflag2
;
_START_GOOGLE_NAMESPACE_
namespace
{
static
string
TmpFile
(
const
string
&
basename
)
{
#
ifdef
_MSC_VER
return
FLAGS_test_tmpdir
+
"
\
\
"
+
basename
;
#
else
return
FLAGS_test_tmpdir
+
"
/
"
+
basename
;
#
endif
}
static
const
char
*
GetFlagFileFlag
(
)
{
#
ifdef
_MSC_VER
static
const
string
flagfile
=
FLAGS_srcdir
+
"
\
\
src
\
\
gflags_unittest_flagfile
"
;
#
else
static
const
string
flagfile
=
FLAGS_srcdir
+
"
/
src
/
gflags_unittest_flagfile
"
;
#
endif
static
const
string
flagfile_flag
=
string
(
"
-
-
flagfile
=
"
)
+
flagfile
;
return
flagfile_flag
.
c_str
(
)
;
}
template
<
typename
T1
typename
T2
>
struct
CompileAssertTypesEqual
;
template
<
typename
T
>
struct
CompileAssertTypesEqual
<
T
T
>
{
}
;
template
<
typename
Expected
typename
Actual
>
void
AssertIsType
(
Actual
&
x
)
{
CompileAssertTypesEqual
<
Expected
Actual
>
(
)
;
}
TEST
(
FlagTypes
FlagTypes
)
{
AssertIsType
<
bool
>
(
FLAGS_test_bool
)
;
AssertIsType
<
int32
>
(
FLAGS_test_int32
)
;
AssertIsType
<
int64
>
(
FLAGS_test_int64
)
;
AssertIsType
<
uint64
>
(
FLAGS_test_uint64
)
;
AssertIsType
<
double
>
(
FLAGS_test_double
)
;
AssertIsType
<
string
>
(
FLAGS_test_string
)
;
}
#
ifdef
GTEST_HAS_DEATH_TEST
TEST
(
ReadFlagsFromStringDeathTest
HelpMatch
)
{
EXPECT_DEATH
(
ReadFlagsFromString
(
"
-
helpmatch
=
base
"
GetArgv0
(
)
true
)
"
"
)
;
}
TEST
(
ReadFlagsFromStringDeathTest
HelpXml
)
{
EXPECT_DEATH
(
ReadFlagsFromString
(
"
-
helpxml
"
GetArgv0
(
)
true
)
"
"
)
;
}
#
endif
void
TestFlagString
(
const
string
&
flags
const
string
&
expected_string
bool
expected_bool
int32
expected_int32
double
expected_double
)
{
EXPECT_TRUE
(
ReadFlagsFromString
(
flags
GetArgv0
(
)
true
)
)
;
EXPECT_EQ
(
expected_string
FLAGS_test_string
)
;
EXPECT_EQ
(
expected_bool
FLAGS_test_bool
)
;
EXPECT_EQ
(
expected_int32
FLAGS_test_int32
)
;
EXPECT_DOUBLE_EQ
(
expected_double
FLAGS_test_double
)
;
}
TEST
(
FlagFileTest
ReadFlagsFromString
)
{
TestFlagString
(
"
-
test_string
=
continued
\
n
"
"
#
some
comments
are
in
order
\
n
"
"
#
some
\
n
"
"
#
comments
\
n
"
"
#
are
\
n
"
"
#
trickier
\
n
"
"
#
than
others
\
n
"
"
-
test_bool
=
true
\
n
"
"
-
test_int32
=
1
\
n
"
"
-
test_double
=
0
.
0
\
n
"
"
continued
"
true
1
0
.
0
)
;
TestFlagString
(
"
#
let
'
s
make
sure
it
can
update
values
\
n
"
"
-
test_string
=
initial
\
n
"
"
-
test_bool
=
false
\
n
"
"
-
test_int32
=
123
\
n
"
"
-
test_double
=
123
.
0
\
n
"
"
initial
"
false
123
123
.
0
)
;
}
TEST
(
FlagFileTest
FilenamesOurfileLast
)
{
FLAGS_test_string
=
"
initial
"
;
FLAGS_test_bool
=
false
;
FLAGS_test_int32
=
-
1
;
FLAGS_test_double
=
-
1
.
0
;
TestFlagString
(
"
-
test_string
=
continued
\
n
"
"
#
some
comments
are
in
order
\
n
"
"
#
some
\
n
"
"
#
comments
\
n
"
"
#
are
\
n
"
"
#
trickier
\
n
"
"
#
than
others
\
n
"
"
not_our_filename
\
n
"
"
-
test_bool
=
true
\
n
"
"
-
test_int32
=
1
\
n
"
"
gflags_unittest
\
n
"
"
-
test_double
=
1000
.
0
\
n
"
"
continued
"
false
-
1
1000
.
0
)
;
}
TEST
(
FlagFileTest
FilenamesOurfileFirst
)
{
FLAGS_test_string
=
"
initial
"
;
FLAGS_test_bool
=
false
;
FLAGS_test_int32
=
-
1
;
FLAGS_test_double
=
-
1
.
0
;
TestFlagString
(
"
-
test_string
=
continued
\
n
"
"
#
some
comments
are
in
order
\
n
"
"
#
some
\
n
"
"
#
comments
\
n
"
"
#
are
\
n
"
"
#
trickier
\
n
"
"
#
than
others
\
n
"
"
gflags_unittest
\
n
"
"
-
test_bool
=
true
\
n
"
"
-
test_int32
=
1
\
n
"
"
not_our_filename
\
n
"
"
-
test_double
=
1000
.
0
\
n
"
"
continued
"
true
1
-
1
.
0
)
;
}
#
ifdef
HAVE_FNMATCH_H
TEST
(
FlagFileTest
FilenamesOurfileGlob
)
{
FLAGS_test_string
=
"
initial
"
;
FLAGS_test_bool
=
false
;
FLAGS_test_int32
=
-
1
;
FLAGS_test_double
=
-
1
.
0
;
TestFlagString
(
"
-
test_string
=
continued
\
n
"
"
#
some
comments
are
in
order
\
n
"
"
#
some
\
n
"
"
#
comments
\
n
"
"
#
are
\
n
"
"
#
trickier
\
n
"
"
#
than
others
\
n
"
"
*
flags
*
\
n
"
"
-
test_bool
=
true
\
n
"
"
-
test_int32
=
1
\
n
"
"
flags
\
n
"
"
-
test_double
=
1000
.
0
\
n
"
"
continued
"
true
1
-
1
.
0
)
;
}
TEST
(
FlagFileTest
FilenamesOurfileInBigList
)
{
FLAGS_test_string
=
"
initial
"
;
FLAGS_test_bool
=
false
;
FLAGS_test_int32
=
-
1
;
FLAGS_test_double
=
-
1
.
0
;
TestFlagString
(
"
-
test_string
=
continued
\
n
"
"
#
some
comments
are
in
order
\
n
"
"
#
some
\
n
"
"
#
comments
\
n
"
"
#
are
\
n
"
"
#
trickier
\
n
"
"
#
than
others
\
n
"
"
*
first
*
*
flags
*
*
third
*
\
n
"
"
-
test_bool
=
true
\
n
"
"
-
test_int32
=
1
\
n
"
"
flags
\
n
"
"
-
test_double
=
1000
.
0
\
n
"
"
continued
"
true
1
-
1
.
0
)
;
}
#
endif
TEST
(
FlagFileTest
FailReadFlagsFromString
)
{
FLAGS_test_int32
=
119
;
string
flags
(
"
#
let
'
s
make
sure
it
can
update
values
\
n
"
"
-
test_string
=
non_initial
\
n
"
"
-
test_bool
=
false
\
n
"
"
-
test_int32
=
123
\
n
"
"
-
test_double
=
illegal
\
n
"
)
;
EXPECT_FALSE
(
ReadFlagsFromString
(
flags
GetArgv0
(
)
false
)
)
;
EXPECT_EQ
(
119
FLAGS_test_int32
)
;
EXPECT_EQ
(
"
initial
"
FLAGS_test_string
)
;
}
TEST
(
SetFlagValueTest
OrdinaryValues
)
{
EXPECT_EQ
(
"
initial
"
FLAGS_test_str1
)
;
SetCommandLineOptionWithMode
(
"
test_str1
"
"
second
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_EQ
(
"
second
"
FLAGS_test_str1
)
;
SetCommandLineOptionWithMode
(
"
test_str1
"
"
third
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_EQ
(
"
second
"
FLAGS_test_str1
)
;
FLAGS_test_str1
=
"
initial
"
;
SetCommandLineOptionWithMode
(
"
test_str1
"
"
third
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_EQ
(
"
initial
"
FLAGS_test_str1
)
;
SetCommandLineOptionWithMode
(
"
test_str1
"
"
third
"
SET_FLAGS_VALUE
)
;
EXPECT_EQ
(
"
third
"
FLAGS_test_str1
)
;
SetCommandLineOptionWithMode
(
"
test_str1
"
"
fourth
"
SET_FLAGS_DEFAULT
)
;
EXPECT_EQ
(
"
third
"
FLAGS_test_str1
)
;
EXPECT_EQ
(
"
initial
"
FLAGS_test_str2
)
;
SetCommandLineOptionWithMode
(
"
test_str2
"
"
second
"
SET_FLAGS_DEFAULT
)
;
EXPECT_EQ
(
"
second
"
FLAGS_test_str2
)
;
FLAGS_test_str2
=
"
extra
"
;
EXPECT_EQ
(
"
extra
"
FLAGS_test_str2
)
;
FLAGS_test_str2
=
"
second
"
;
SetCommandLineOptionWithMode
(
"
test_str2
"
"
third
"
SET_FLAGS_DEFAULT
)
;
EXPECT_EQ
(
"
third
"
FLAGS_test_str2
)
;
SetCommandLineOptionWithMode
(
"
test_str2
"
"
fourth
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_EQ
(
"
fourth
"
FLAGS_test_str2
)
;
EXPECT_EQ
(
"
initial
"
FLAGS_test_str3
)
;
SetCommandLineOptionWithMode
(
"
test_str3
"
"
second
"
SET_FLAGS_DEFAULT
)
;
EXPECT_EQ
(
"
second
"
FLAGS_test_str3
)
;
FLAGS_test_str3
=
"
third
"
;
SetCommandLineOptionWithMode
(
"
test_str3
"
"
fourth
"
SET_FLAGS_DEFAULT
)
;
EXPECT_EQ
(
"
third
"
FLAGS_test_str3
)
;
SetCommandLineOptionWithMode
(
"
test_str3
"
"
fourth
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_EQ
(
"
third
"
FLAGS_test_str3
)
;
SetCommandLineOptionWithMode
(
"
test_str3
"
"
fourth
"
SET_FLAGS_VALUE
)
;
EXPECT_EQ
(
"
fourth
"
FLAGS_test_str3
)
;
}
TEST
(
SetFlagValueTest
ExceptionalValues
)
{
#
if
defined
(
isinf
)
&
&
!
defined
(
__MINGW32__
)
EXPECT_EQ
(
"
test_double
set
to
inf
\
n
"
SetCommandLineOption
(
"
test_double
"
"
inf
"
)
)
;
EXPECT_INF
(
FLAGS_test_double
)
;
EXPECT_EQ
(
"
test_double
set
to
inf
\
n
"
SetCommandLineOption
(
"
test_double
"
"
INF
"
)
)
;
EXPECT_INF
(
FLAGS_test_double
)
;
#
endif
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_double
"
"
0
.
1xxx
"
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_double
"
"
"
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_double
"
"
"
)
)
;
#
if
defined
(
isinf
)
&
&
!
defined
(
__MINGW32__
)
EXPECT_EQ
(
"
test_double
set
to
-
inf
\
n
"
SetCommandLineOption
(
"
test_double
"
"
-
inf
"
)
)
;
EXPECT_INF
(
FLAGS_test_double
)
;
EXPECT_GT
(
0
FLAGS_test_double
)
;
#
endif
#
if
defined
(
isnan
)
&
&
!
defined
(
__MINGW32__
)
EXPECT_EQ
(
"
test_double
set
to
nan
\
n
"
SetCommandLineOption
(
"
test_double
"
"
NaN
"
)
)
;
EXPECT_NAN
(
FLAGS_test_double
)
;
#
endif
}
TEST
(
SetFlagValueTest
DifferentRadices
)
{
EXPECT_EQ
(
"
test_int32
set
to
12
\
n
"
SetCommandLineOption
(
"
test_int32
"
"
12
"
)
)
;
EXPECT_EQ
(
"
test_int32
set
to
16
\
n
"
SetCommandLineOption
(
"
test_int32
"
"
0x10
"
)
)
;
EXPECT_EQ
(
"
test_int32
set
to
34
\
n
"
SetCommandLineOption
(
"
test_int32
"
"
0X22
"
)
)
;
EXPECT_EQ
(
"
test_int32
set
to
10
\
n
"
SetCommandLineOption
(
"
test_int32
"
"
010
"
)
)
;
}
TEST
(
SetFlagValueTest
IllegalValues
)
{
FLAGS_test_bool
=
true
;
FLAGS_test_int32
=
119
;
FLAGS_test_int64
=
1191
;
FLAGS_test_uint64
=
11911
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_bool
"
"
12
"
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_int32
"
"
7000000000000
"
)
)
;
#
if
0
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_uint64
"
"
-
1
"
)
)
;
#
endif
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_int64
"
"
not
a
number
!
"
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_bool
"
"
"
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_int32
"
"
"
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_int64
"
"
"
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_uint64
"
"
"
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_double
"
"
"
)
)
;
EXPECT_EQ
(
"
test_string
set
to
\
n
"
SetCommandLineOption
(
"
test_string
"
"
"
)
)
;
EXPECT_TRUE
(
FLAGS_test_bool
)
;
EXPECT_EQ
(
119
FLAGS_test_int32
)
;
EXPECT_EQ
(
1191
FLAGS_test_int64
)
;
EXPECT_EQ
(
11911
FLAGS_test_uint64
)
;
}
TEST
(
MacroArgs
EvaluateOnce
)
{
EXPECT_EQ
(
13
FLAGS_changeable_var
)
;
EXPECT_EQ
(
13
FLAGS_changeable_var
)
;
EXPECT_EQ
(
13
changeable_var
)
;
SetCommandLineOptionWithMode
(
"
changeable_var
"
"
21
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_EQ
(
21
FLAGS_changeable_var
)
;
}
TEST
(
MacroArgs
EvaluateOnceBool
)
{
EXPECT_TRUE
(
FLAGS_changeable_bool_var
)
;
EXPECT_TRUE
(
FLAGS_changeable_bool_var
)
;
EXPECT_EQ
(
8009
changeable_bool_var
)
;
SetCommandLineOptionWithMode
(
"
changeable_bool_var
"
"
false
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_FALSE
(
FLAGS_changeable_bool_var
)
;
}
TEST
(
MacroArgs
EvaluateOnceStrings
)
{
EXPECT_EQ
(
"
1
"
FLAGS_changeable_string_var
)
;
EXPECT_EQ
(
"
1
"
FLAGS_changeable_string_var
)
;
EXPECT_EQ
(
1
changeable_string_var
)
;
SetCommandLineOptionWithMode
(
"
changeable_string_var
"
"
different
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_EQ
(
"
different
"
FLAGS_changeable_string_var
)
;
}
TEST
(
FromEnvTest
LegalValues
)
{
setenv
(
"
BOOL_VAL1
"
"
true
"
1
)
;
setenv
(
"
BOOL_VAL2
"
"
false
"
1
)
;
setenv
(
"
BOOL_VAL3
"
"
1
"
1
)
;
setenv
(
"
BOOL_VAL4
"
"
F
"
1
)
;
EXPECT_TRUE
(
BoolFromEnv
(
"
BOOL_VAL1
"
false
)
)
;
EXPECT_FALSE
(
BoolFromEnv
(
"
BOOL_VAL2
"
true
)
)
;
EXPECT_TRUE
(
BoolFromEnv
(
"
BOOL_VAL3
"
false
)
)
;
EXPECT_FALSE
(
BoolFromEnv
(
"
BOOL_VAL4
"
true
)
)
;
EXPECT_TRUE
(
BoolFromEnv
(
"
BOOL_VAL_UNKNOWN
"
true
)
)
;
EXPECT_FALSE
(
BoolFromEnv
(
"
BOOL_VAL_UNKNOWN
"
false
)
)
;
setenv
(
"
INT_VAL1
"
"
1
"
1
)
;
setenv
(
"
INT_VAL2
"
"
-
1
"
1
)
;
EXPECT_EQ
(
1
Int32FromEnv
(
"
INT_VAL1
"
10
)
)
;
EXPECT_EQ
(
-
1
Int32FromEnv
(
"
INT_VAL2
"
10
)
)
;
EXPECT_EQ
(
10
Int32FromEnv
(
"
INT_VAL_UNKNOWN
"
10
)
)
;
setenv
(
"
INT_VAL3
"
"
1099511627776
"
1
)
;
EXPECT_EQ
(
1
Int64FromEnv
(
"
INT_VAL1
"
20
)
)
;
EXPECT_EQ
(
-
1
Int64FromEnv
(
"
INT_VAL2
"
20
)
)
;
EXPECT_EQ
(
1099511627776LL
Int64FromEnv
(
"
INT_VAL3
"
20
)
)
;
EXPECT_EQ
(
20
Int64FromEnv
(
"
INT_VAL_UNKNOWN
"
20
)
)
;
EXPECT_EQ
(
1
Uint64FromEnv
(
"
INT_VAL1
"
30
)
)
;
EXPECT_EQ
(
1099511627776ULL
Uint64FromEnv
(
"
INT_VAL3
"
30
)
)
;
EXPECT_EQ
(
30
Uint64FromEnv
(
"
INT_VAL_UNKNOWN
"
30
)
)
;
setenv
(
"
DOUBLE_VAL1
"
"
0
.
0
"
1
)
;
setenv
(
"
DOUBLE_VAL2
"
"
1
.
0
"
1
)
;
setenv
(
"
DOUBLE_VAL3
"
"
-
1
.
0
"
1
)
;
EXPECT_EQ
(
0
.
0
DoubleFromEnv
(
"
DOUBLE_VAL1
"
40
.
0
)
)
;
EXPECT_EQ
(
1
.
0
DoubleFromEnv
(
"
DOUBLE_VAL2
"
40
.
0
)
)
;
EXPECT_EQ
(
-
1
.
0
DoubleFromEnv
(
"
DOUBLE_VAL3
"
40
.
0
)
)
;
EXPECT_EQ
(
40
.
0
DoubleFromEnv
(
"
DOUBLE_VAL_UNKNOWN
"
40
.
0
)
)
;
setenv
(
"
STRING_VAL1
"
"
"
1
)
;
setenv
(
"
STRING_VAL2
"
"
my
happy
string
!
"
1
)
;
EXPECT_STREQ
(
"
"
StringFromEnv
(
"
STRING_VAL1
"
"
unknown
"
)
)
;
EXPECT_STREQ
(
"
my
happy
string
!
"
StringFromEnv
(
"
STRING_VAL2
"
"
unknown
"
)
)
;
EXPECT_STREQ
(
"
unknown
"
StringFromEnv
(
"
STRING_VAL_UNKNOWN
"
"
unknown
"
)
)
;
}
#
ifdef
GTEST_HAS_DEATH_TEST
TEST
(
FromEnvDeathTest
IllegalValues
)
{
setenv
(
"
BOOL_BAD1
"
"
so
true
!
"
1
)
;
setenv
(
"
BOOL_BAD2
"
"
"
1
)
;
EXPECT_DEATH
(
BoolFromEnv
(
"
BOOL_BAD1
"
false
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
BoolFromEnv
(
"
BOOL_BAD2
"
true
)
"
error
parsing
env
variable
"
)
;
setenv
(
"
INT_BAD1
"
"
one
"
1
)
;
setenv
(
"
INT_BAD2
"
"
100000000000000000
"
1
)
;
setenv
(
"
INT_BAD3
"
"
0xx10
"
1
)
;
setenv
(
"
INT_BAD4
"
"
"
1
)
;
EXPECT_DEATH
(
Int32FromEnv
(
"
INT_BAD1
"
10
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
Int32FromEnv
(
"
INT_BAD2
"
10
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
Int32FromEnv
(
"
INT_BAD3
"
10
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
Int32FromEnv
(
"
INT_BAD4
"
10
)
"
error
parsing
env
variable
"
)
;
setenv
(
"
BIGINT_BAD1
"
"
18446744073709551616000
"
1
)
;
EXPECT_DEATH
(
Int64FromEnv
(
"
INT_BAD1
"
20
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
Int64FromEnv
(
"
INT_BAD3
"
20
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
Int64FromEnv
(
"
INT_BAD4
"
20
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
Int64FromEnv
(
"
BIGINT_BAD1
"
200
)
"
error
parsing
env
variable
"
)
;
setenv
(
"
BIGINT_BAD2
"
"
-
1
"
1
)
;
EXPECT_DEATH
(
Uint64FromEnv
(
"
INT_BAD1
"
30
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
Uint64FromEnv
(
"
INT_BAD3
"
30
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
Uint64FromEnv
(
"
INT_BAD4
"
30
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
Uint64FromEnv
(
"
BIGINT_BAD1
"
30
)
"
error
parsing
env
variable
"
)
;
#
if
0
EXPECT_DEATH
(
Uint64FromEnv
(
"
BIGINT_BAD2
"
30
)
"
error
parsing
env
variable
"
)
;
#
endif
setenv
(
"
DOUBLE_BAD1
"
"
0
.
0
.
0
"
1
)
;
setenv
(
"
DOUBLE_BAD2
"
"
"
1
)
;
EXPECT_DEATH
(
DoubleFromEnv
(
"
DOUBLE_BAD1
"
40
.
0
)
"
error
parsing
env
variable
"
)
;
EXPECT_DEATH
(
DoubleFromEnv
(
"
DOUBLE_BAD2
"
40
.
0
)
"
error
parsing
env
variable
"
)
;
}
#
endif
TEST
(
FlagSaverTest
CanSaveStringFlagStates
)
{
SetCommandLineOptionWithMode
(
"
test_str2
"
"
second
"
SET_FLAGS_VALUE
)
;
SetCommandLineOptionWithMode
(
"
test_str3
"
"
second
"
SET_FLAGS_DEFAULT
)
;
{
FlagSaver
fs
;
SetCommandLineOptionWithMode
(
"
test_str1
"
"
second
"
SET_FLAGS_VALUE
)
;
EXPECT_EQ
(
"
second
"
FLAGS_test_str1
)
;
SetCommandLineOptionWithMode
(
"
test_str2
"
"
third
"
SET_FLAGS_DEFAULT
)
;
EXPECT_EQ
(
"
second
"
FLAGS_test_str2
)
;
SetCommandLineOptionWithMode
(
"
test_str3
"
"
third
"
SET_FLAGS_VALUE
)
;
EXPECT_EQ
(
"
third
"
FLAGS_test_str3
)
;
}
EXPECT_EQ
(
"
initial
"
FLAGS_test_str1
)
;
SetCommandLineOptionWithMode
(
"
test_str1
"
"
second
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_EQ
(
"
second
"
FLAGS_test_str1
)
;
EXPECT_EQ
(
"
second
"
FLAGS_test_str2
)
;
SetCommandLineOptionWithMode
(
"
test_str2
"
"
fourth
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_EQ
(
"
second
"
FLAGS_test_str2
)
;
EXPECT_EQ
(
"
second
"
FLAGS_test_str3
)
;
SetCommandLineOptionWithMode
(
"
test_str3
"
"
fourth
"
SET_FLAG_IF_DEFAULT
)
;
EXPECT_EQ
(
"
fourth
"
FLAGS_test_str3
)
;
}
TEST
(
FlagSaverTest
CanSaveVariousTypedFlagValues
)
{
FLAGS_test_bool
=
false
;
FLAGS_test_int32
=
-
1
;
FLAGS_test_int64
=
-
2
;
FLAGS_test_uint64
=
3
;
FLAGS_test_double
=
4
.
0
;
FLAGS_test_string
=
"
good
"
;
{
FlagSaver
fs
;
FLAGS_test_bool
=
true
;
FLAGS_test_int32
=
-
5
;
FLAGS_test_int64
=
-
6
;
FLAGS_test_uint64
=
7
;
FLAGS_test_double
=
8
.
0
;
FLAGS_test_string
=
"
bad
"
;
}
EXPECT_FALSE
(
FLAGS_test_bool
)
;
EXPECT_EQ
(
-
1
FLAGS_test_int32
)
;
EXPECT_EQ
(
-
2
FLAGS_test_int64
)
;
EXPECT_EQ
(
3
FLAGS_test_uint64
)
;
EXPECT_DOUBLE_EQ
(
4
.
0
FLAGS_test_double
)
;
EXPECT_EQ
(
"
good
"
FLAGS_test_string
)
;
}
TEST
(
GetAllFlagsTest
BaseTest
)
{
vector
<
CommandLineFlagInfo
>
flags
;
GetAllFlags
(
&
flags
)
;
bool
found_test_bool
=
false
;
vector
<
CommandLineFlagInfo
>
:
:
const_iterator
i
;
for
(
i
=
flags
.
begin
(
)
;
i
!
=
flags
.
end
(
)
;
+
+
i
)
{
if
(
i
-
>
name
=
=
"
test_bool
"
)
{
found_test_bool
=
true
;
EXPECT_EQ
(
i
-
>
type
"
bool
"
)
;
EXPECT_EQ
(
i
-
>
default_value
"
false
"
)
;
EXPECT_EQ
(
i
-
>
flag_ptr
&
FLAGS_test_bool
)
;
break
;
}
}
EXPECT_TRUE
(
found_test_bool
)
;
}
TEST
(
ShowUsageWithFlagsTest
BaseTest
)
{
}
TEST
(
ShowUsageWithFlagsRestrictTest
BaseTest
)
{
}
TEST
(
GetArgvsTest
BaseTest
)
{
vector
<
string
>
argvs
=
GetArgvs
(
)
;
EXPECT_EQ
(
4
argvs
.
size
(
)
)
;
EXPECT_EQ
(
"
/
test
/
argv
/
for
/
gflags_unittest
"
argvs
[
0
]
)
;
EXPECT_EQ
(
"
argv
2
"
argvs
[
1
]
)
;
EXPECT_EQ
(
"
3rd
argv
"
argvs
[
2
]
)
;
EXPECT_EQ
(
"
argv
#
4
"
argvs
[
3
]
)
;
}
TEST
(
GetArgvTest
BaseTest
)
{
EXPECT_STREQ
(
"
/
test
/
argv
/
for
/
gflags_unittest
"
"
argv
2
3rd
argv
argv
#
4
"
GetArgv
(
)
)
;
}
TEST
(
GetArgv0Test
BaseTest
)
{
EXPECT_STREQ
(
"
/
test
/
argv
/
for
/
gflags_unittest
"
GetArgv0
(
)
)
;
}
TEST
(
GetArgvSumTest
BaseTest
)
{
EXPECT_EQ
(
4904
GetArgvSum
(
)
)
;
}
TEST
(
ProgramInvocationNameTest
BaseTest
)
{
EXPECT_STREQ
(
"
/
test
/
argv
/
for
/
gflags_unittest
"
ProgramInvocationName
(
)
)
;
}
TEST
(
ProgramInvocationShortNameTest
BaseTest
)
{
EXPECT_STREQ
(
"
gflags_unittest
"
ProgramInvocationShortName
(
)
)
;
}
TEST
(
ProgramUsageTest
BaseTest
)
{
EXPECT_STREQ
(
"
/
test
/
argv
/
for
/
gflags_unittest
:
"
"
<
useless
flag
>
[
.
.
.
]
\
nDoes
something
useless
.
\
n
"
ProgramUsage
(
)
)
;
}
TEST
(
GetCommandLineOptionTest
NameExistsAndIsDefault
)
{
string
value
(
"
will
be
changed
"
)
;
bool
r
=
GetCommandLineOption
(
"
test_bool
"
&
value
)
;
EXPECT_TRUE
(
r
)
;
EXPECT_EQ
(
"
false
"
value
)
;
r
=
GetCommandLineOption
(
"
test_int32
"
&
value
)
;
EXPECT_TRUE
(
r
)
;
EXPECT_EQ
(
"
-
1
"
value
)
;
}
TEST
(
GetCommandLineOptionTest
NameExistsAndWasAssigned
)
{
FLAGS_test_int32
=
400
;
string
value
(
"
will
be
changed
"
)
;
const
bool
r
=
GetCommandLineOption
(
"
test_int32
"
&
value
)
;
EXPECT_TRUE
(
r
)
;
EXPECT_EQ
(
"
400
"
value
)
;
}
TEST
(
GetCommandLineOptionTest
NameExistsAndWasSet
)
{
SetCommandLineOption
(
"
test_int32
"
"
700
"
)
;
string
value
(
"
will
be
changed
"
)
;
const
bool
r
=
GetCommandLineOption
(
"
test_int32
"
&
value
)
;
EXPECT_TRUE
(
r
)
;
EXPECT_EQ
(
"
700
"
value
)
;
}
TEST
(
GetCommandLineOptionTest
NameExistsAndWasNotSet
)
{
SetCommandLineOptionWithMode
(
"
test_int32
"
"
800
"
SET_FLAGS_DEFAULT
)
;
string
value
(
"
will
be
changed
"
)
;
const
bool
r
=
GetCommandLineOption
(
"
test_int32
"
&
value
)
;
EXPECT_TRUE
(
r
)
;
EXPECT_EQ
(
"
800
"
value
)
;
EXPECT_TRUE
(
GetCommandLineFlagInfoOrDie
(
"
test_int32
"
)
.
is_default
)
;
}
TEST
(
GetCommandLineOptionTest
NameExistsAndWasConditionallySet
)
{
SetCommandLineOptionWithMode
(
"
test_int32
"
"
900
"
SET_FLAG_IF_DEFAULT
)
;
string
value
(
"
will
be
changed
"
)
;
const
bool
r
=
GetCommandLineOption
(
"
test_int32
"
&
value
)
;
EXPECT_TRUE
(
r
)
;
EXPECT_EQ
(
"
900
"
value
)
;
}
TEST
(
GetCommandLineOptionTest
NameDoesNotExist
)
{
string
value
(
"
will
not
be
changed
"
)
;
const
bool
r
=
GetCommandLineOption
(
"
test_int3210
"
&
value
)
;
EXPECT_FALSE
(
r
)
;
EXPECT_EQ
(
"
will
not
be
changed
"
value
)
;
}
TEST
(
GetCommandLineFlagInfoTest
FlagExists
)
{
CommandLineFlagInfo
info
;
bool
r
=
GetCommandLineFlagInfo
(
"
test_int32
"
&
info
)
;
EXPECT_TRUE
(
r
)
;
EXPECT_EQ
(
"
test_int32
"
info
.
name
)
;
EXPECT_EQ
(
"
int32
"
info
.
type
)
;
EXPECT_EQ
(
"
"
info
.
description
)
;
EXPECT_EQ
(
"
-
1
"
info
.
current_value
)
;
EXPECT_EQ
(
"
-
1
"
info
.
default_value
)
;
EXPECT_TRUE
(
info
.
is_default
)
;
EXPECT_FALSE
(
info
.
has_validator_fn
)
;
EXPECT_EQ
(
&
FLAGS_test_int32
info
.
flag_ptr
)
;
FLAGS_test_bool
=
true
;
r
=
GetCommandLineFlagInfo
(
"
test_bool
"
&
info
)
;
EXPECT_TRUE
(
r
)
;
EXPECT_EQ
(
"
test_bool
"
info
.
name
)
;
EXPECT_EQ
(
"
bool
"
info
.
type
)
;
EXPECT_EQ
(
"
tests
bool
-
ness
"
info
.
description
)
;
EXPECT_EQ
(
"
true
"
info
.
current_value
)
;
EXPECT_EQ
(
"
false
"
info
.
default_value
)
;
EXPECT_FALSE
(
info
.
is_default
)
;
EXPECT_FALSE
(
info
.
has_validator_fn
)
;
EXPECT_EQ
(
&
FLAGS_test_bool
info
.
flag_ptr
)
;
FLAGS_test_bool
=
false
;
r
=
GetCommandLineFlagInfo
(
"
test_bool
"
&
info
)
;
EXPECT_TRUE
(
r
)
;
EXPECT_EQ
(
"
test_bool
"
info
.
name
)
;
EXPECT_EQ
(
"
bool
"
info
.
type
)
;
EXPECT_EQ
(
"
tests
bool
-
ness
"
info
.
description
)
;
EXPECT_EQ
(
"
false
"
info
.
current_value
)
;
EXPECT_EQ
(
"
false
"
info
.
default_value
)
;
EXPECT_FALSE
(
info
.
is_default
)
;
EXPECT_FALSE
(
info
.
has_validator_fn
)
;
EXPECT_EQ
(
&
FLAGS_test_bool
info
.
flag_ptr
)
;
}
TEST
(
GetCommandLineFlagInfoTest
FlagDoesNotExist
)
{
CommandLineFlagInfo
info
;
info
.
name
=
"
name
"
;
info
.
type
=
"
type
"
;
info
.
current_value
=
"
curr
"
;
info
.
default_value
=
"
def
"
;
info
.
filename
=
"
/
"
;
info
.
is_default
=
false
;
info
.
has_validator_fn
=
true
;
info
.
flag_ptr
=
NULL
;
bool
r
=
GetCommandLineFlagInfo
(
"
test_int3210
"
&
info
)
;
EXPECT_FALSE
(
r
)
;
EXPECT_EQ
(
"
name
"
info
.
name
)
;
EXPECT_EQ
(
"
type
"
info
.
type
)
;
EXPECT_EQ
(
"
"
info
.
description
)
;
EXPECT_EQ
(
"
curr
"
info
.
current_value
)
;
EXPECT_EQ
(
"
def
"
info
.
default_value
)
;
EXPECT_EQ
(
"
/
"
info
.
filename
)
;
EXPECT_FALSE
(
info
.
is_default
)
;
EXPECT_TRUE
(
info
.
has_validator_fn
)
;
EXPECT_EQ
(
NULL
info
.
flag_ptr
)
;
}
TEST
(
GetCommandLineFlagInfoOrDieTest
FlagExistsAndIsDefault
)
{
CommandLineFlagInfo
info
;
info
=
GetCommandLineFlagInfoOrDie
(
"
test_int32
"
)
;
EXPECT_EQ
(
"
test_int32
"
info
.
name
)
;
EXPECT_EQ
(
"
int32
"
info
.
type
)
;
EXPECT_EQ
(
"
"
info
.
description
)
;
EXPECT_EQ
(
"
-
1
"
info
.
current_value
)
;
EXPECT_EQ
(
"
-
1
"
info
.
default_value
)
;
EXPECT_TRUE
(
info
.
is_default
)
;
EXPECT_EQ
(
&
FLAGS_test_int32
info
.
flag_ptr
)
;
info
=
GetCommandLineFlagInfoOrDie
(
"
test_bool
"
)
;
EXPECT_EQ
(
"
test_bool
"
info
.
name
)
;
EXPECT_EQ
(
"
bool
"
info
.
type
)
;
EXPECT_EQ
(
"
tests
bool
-
ness
"
info
.
description
)
;
EXPECT_EQ
(
"
false
"
info
.
current_value
)
;
EXPECT_EQ
(
"
false
"
info
.
default_value
)
;
EXPECT_TRUE
(
info
.
is_default
)
;
EXPECT_FALSE
(
info
.
has_validator_fn
)
;
EXPECT_EQ
(
&
FLAGS_test_bool
info
.
flag_ptr
)
;
}
TEST
(
GetCommandLineFlagInfoOrDieTest
FlagExistsAndWasAssigned
)
{
FLAGS_test_int32
=
400
;
CommandLineFlagInfo
info
;
info
=
GetCommandLineFlagInfoOrDie
(
"
test_int32
"
)
;
EXPECT_EQ
(
"
test_int32
"
info
.
name
)
;
EXPECT_EQ
(
"
int32
"
info
.
type
)
;
EXPECT_EQ
(
"
"
info
.
description
)
;
EXPECT_EQ
(
"
400
"
info
.
current_value
)
;
EXPECT_EQ
(
"
-
1
"
info
.
default_value
)
;
EXPECT_FALSE
(
info
.
is_default
)
;
EXPECT_EQ
(
&
FLAGS_test_int32
info
.
flag_ptr
)
;
FLAGS_test_bool
=
true
;
info
=
GetCommandLineFlagInfoOrDie
(
"
test_bool
"
)
;
EXPECT_EQ
(
"
test_bool
"
info
.
name
)
;
EXPECT_EQ
(
"
bool
"
info
.
type
)
;
EXPECT_EQ
(
"
tests
bool
-
ness
"
info
.
description
)
;
EXPECT_EQ
(
"
true
"
info
.
current_value
)
;
EXPECT_EQ
(
"
false
"
info
.
default_value
)
;
EXPECT_FALSE
(
info
.
is_default
)
;
EXPECT_FALSE
(
info
.
has_validator_fn
)
;
EXPECT_EQ
(
&
FLAGS_test_bool
info
.
flag_ptr
)
;
}
#
ifdef
GTEST_HAS_DEATH_TEST
TEST
(
GetCommandLineFlagInfoOrDieDeathTest
FlagDoesNotExist
)
{
EXPECT_DEATH
(
GetCommandLineFlagInfoOrDie
(
"
test_int3210
"
)
"
.
*
:
flag
test_int3210
does
not
exist
"
)
;
}
#
endif
TEST
(
DeprecatedFunctionsTest
CommandlineFlagsIntoString
)
{
string
s
=
CommandlineFlagsIntoString
(
)
;
EXPECT_NE
(
string
:
:
npos
s
.
find
(
"
-
-
test_bool
=
"
)
)
;
}
TEST
(
DeprecatedFunctionsTest
AppendFlagsIntoFile
)
{
FLAGS_test_int32
=
10
;
string
filename
(
TmpFile
(
"
flagfile
"
)
)
;
unlink
(
filename
.
c_str
(
)
)
;
const
bool
r
=
AppendFlagsIntoFile
(
filename
"
not
the
real
argv0
"
)
;
EXPECT_TRUE
(
r
)
;
FILE
*
fp
=
fopen
(
filename
.
c_str
(
)
"
r
"
)
;
EXPECT_TRUE
(
fp
!
=
NULL
)
;
char
line
[
8192
]
;
EXPECT_TRUE
(
fgets
(
line
sizeof
(
line
)
-
1
fp
)
!
=
NULL
)
;
EXPECT_STREQ
(
"
not
the
real
argv0
\
n
"
line
)
;
bool
found_bool
=
false
found_int32
=
false
;
while
(
fgets
(
line
sizeof
(
line
)
-
1
fp
)
)
{
line
[
sizeof
(
line
)
-
1
]
=
'
\
0
'
;
if
(
strcmp
(
line
"
-
-
test_bool
=
false
\
n
"
)
=
=
0
)
found_bool
=
true
;
if
(
strcmp
(
line
"
-
-
test_int32
=
10
\
n
"
)
=
=
0
)
found_int32
=
true
;
}
EXPECT_TRUE
(
found_int32
)
;
EXPECT_TRUE
(
found_bool
)
;
fclose
(
fp
)
;
}
TEST
(
DeprecatedFunctionsTest
ReadFromFlagsFile
)
{
FLAGS_test_int32
=
-
10
;
string
filename
(
TmpFile
(
"
flagfile2
"
)
)
;
unlink
(
filename
.
c_str
(
)
)
;
bool
r
=
AppendFlagsIntoFile
(
filename
GetArgv0
(
)
)
;
EXPECT_TRUE
(
r
)
;
FLAGS_test_int32
=
-
11
;
r
=
ReadFromFlagsFile
(
filename
GetArgv0
(
)
true
)
;
EXPECT_TRUE
(
r
)
;
EXPECT_EQ
(
-
10
FLAGS_test_int32
)
;
}
TEST
(
DeprecatedFunctionsTest
ReadFromFlagsFileFailure
)
{
FLAGS_test_int32
=
-
20
;
string
filename
(
TmpFile
(
"
flagfile3
"
)
)
;
FILE
*
fp
=
fopen
(
filename
.
c_str
(
)
"
w
"
)
;
EXPECT_TRUE
(
fp
!
=
NULL
)
;
fprintf
(
fp
"
%
s
\
n
-
-
test_int32
=
-
21
\
n
-
-
test_bool
=
not_a_bool
!
\
n
"
GetArgv0
(
)
)
;
fclose
(
fp
)
;
FLAGS_test_int32
=
-
22
;
const
bool
r
=
ReadFromFlagsFile
(
filename
GetArgv0
(
)
false
)
;
EXPECT_FALSE
(
r
)
;
EXPECT_EQ
(
-
22
FLAGS_test_int32
)
;
}
TEST
(
FlagsSetBeforeInitTest
TryFromEnv
)
{
EXPECT_EQ
(
"
pre
-
set
"
FLAGS_test_tryfromenv
)
;
}
DEFINE_int32
(
test_flag
-
1
"
used
for
testing
gflags
.
cc
"
)
;
int32
ParseTestFlag
(
bool
with_help
int
argc
const
char
*
*
const_argv
)
{
FlagSaver
fs
;
char
*
*
const
argv_save
=
new
char
*
[
argc
+
1
]
;
char
*
*
argv
=
argv_save
;
memcpy
(
argv
const_argv
sizeof
(
*
argv
)
*
(
argc
+
1
)
)
;
if
(
with_help
)
{
ParseCommandLineFlags
(
&
argc
&
argv
true
)
;
}
else
{
ParseCommandLineNonHelpFlags
(
&
argc
&
argv
true
)
;
}
delete
[
]
argv_save
;
return
FLAGS_test_flag
;
}
TEST
(
ParseCommandLineFlagsUsesLastDefinitionTest
WhenFlagIsDefinedTwiceOnCommandLine
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
-
test_flag
=
1
"
"
-
-
test_flag
=
2
"
NULL
}
;
EXPECT_EQ
(
2
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
)
;
EXPECT_EQ
(
2
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
)
;
}
TEST
(
ParseCommandLineFlagsUsesLastDefinitionTest
WhenFlagIsDefinedTwiceInFlagFile
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
GetFlagFileFlag
(
)
NULL
}
;
EXPECT_EQ
(
2
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
)
;
EXPECT_EQ
(
2
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
)
;
}
TEST
(
ParseCommandLineFlagsUsesLastDefinitionTest
WhenFlagIsDefinedInCommandLineAndThenFlagFile
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
-
test_flag
=
0
"
GetFlagFileFlag
(
)
NULL
}
;
EXPECT_EQ
(
2
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
)
;
EXPECT_EQ
(
2
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
)
;
}
TEST
(
ParseCommandLineFlagsUsesLastDefinitionTest
WhenFlagIsDefinedInFlagFileAndThenCommandLine
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
GetFlagFileFlag
(
)
"
-
-
test_flag
=
3
"
NULL
}
;
EXPECT_EQ
(
3
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
)
;
EXPECT_EQ
(
3
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
)
;
}
TEST
(
ParseCommandLineFlagsUsesLastDefinitionTest
WhenFlagIsDefinedInCommandLineAndFlagFileAndThenCommandLine
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
-
test_flag
=
0
"
GetFlagFileFlag
(
)
"
-
-
test_flag
=
3
"
NULL
}
;
EXPECT_EQ
(
3
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
)
;
EXPECT_EQ
(
3
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
)
;
}
TEST
(
ParseCommandLineFlagsAndDashArgs
TwoDashArgFirst
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
-
"
"
-
-
test_flag
=
0
"
NULL
}
;
EXPECT_EQ
(
-
1
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
)
;
EXPECT_EQ
(
-
1
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
)
;
}
TEST
(
ParseCommandLineFlagsAndDashArgs
TwoDashArgMiddle
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
-
test_flag
=
7
"
"
-
-
"
"
-
-
test_flag
=
0
"
NULL
}
;
EXPECT_EQ
(
7
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
)
;
EXPECT_EQ
(
7
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
)
;
}
TEST
(
ParseCommandLineFlagsAndDashArgs
OneDashArg
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
"
"
-
-
test_flag
=
0
"
NULL
}
;
EXPECT_EQ
(
0
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
)
;
EXPECT_EQ
(
0
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
)
;
}
#
ifdef
GTEST_HAS_DEATH_TEST
TEST
(
ParseCommandLineFlagsUnknownFlagDeathTest
FlagIsCompletelyUnknown
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
-
this_flag_does_not_exist
"
NULL
}
;
EXPECT_DEATH
(
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
"
unknown
command
line
flag
.
*
"
)
;
EXPECT_DEATH
(
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
"
unknown
command
line
flag
.
*
"
)
;
}
TEST
(
ParseCommandLineFlagsUnknownFlagDeathTest
BoolFlagIsCompletelyUnknown
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
-
nothis_flag_does_not_exist
"
NULL
}
;
EXPECT_DEATH
(
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
"
unknown
command
line
flag
.
*
"
)
;
EXPECT_DEATH
(
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
"
unknown
command
line
flag
.
*
"
)
;
}
TEST
(
ParseCommandLineFlagsUnknownFlagDeathTest
FlagIsNotABool
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
-
notest_string
"
NULL
}
;
EXPECT_DEATH
(
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
"
boolean
value
.
*
specified
for
.
*
command
line
flag
"
)
;
EXPECT_DEATH
(
ParseTestFlag
(
false
arraysize
(
argv
)
-
1
argv
)
"
boolean
value
.
*
specified
for
.
*
command
line
flag
"
)
;
}
#
endif
TEST
(
ParseCommandLineFlagsWrongFields
DescriptionIsInvalid
)
{
static
bool
current_storage
;
static
bool
defvalue_storage
;
FlagRegisterer
fr
(
"
flag_name
"
"
bool
"
0
"
filename
"
&
current_storage
&
defvalue_storage
)
;
CommandLineFlagInfo
fi
;
EXPECT_TRUE
(
GetCommandLineFlagInfo
(
"
flag_name
"
&
fi
)
)
;
EXPECT_EQ
(
"
"
fi
.
description
)
;
EXPECT_EQ
(
&
current_storage
fi
.
flag_ptr
)
;
}
static
bool
ValidateTestFlagIs5
(
const
char
*
flagname
int32
flagval
)
{
if
(
flagval
=
=
5
)
return
true
;
printf
(
"
%
s
isn
'
t
5
!
\
n
"
flagname
)
;
return
false
;
}
static
bool
ValidateTestFlagIs10
(
const
char
*
flagname
int32
flagval
)
{
return
flagval
=
=
10
;
}
TEST
(
FlagsValidator
ValidFlagViaArgv
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
-
test_flag
=
5
"
NULL
}
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
EXPECT_EQ
(
5
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
NULL
)
)
;
}
TEST
(
FlagsValidator
ValidFlagViaSetDefault
)
{
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
EXPECT_NE
(
"
"
SetCommandLineOptionWithMode
(
"
test_flag
"
"
5
"
SET_FLAG_IF_DEFAULT
)
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
NULL
)
)
;
}
TEST
(
FlagsValidator
ValidFlagViaSetValue
)
{
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
FLAGS_test_flag
=
100
;
EXPECT_NE
(
"
"
SetCommandLineOptionWithMode
(
"
test_flag
"
"
5
"
SET_FLAGS_VALUE
)
)
;
EXPECT_NE
(
"
"
SetCommandLineOptionWithMode
(
"
test_flag
"
"
5
"
SET_FLAGS_DEFAULT
)
)
;
EXPECT_NE
(
"
"
SetCommandLineOption
(
"
test_flag
"
"
5
"
)
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
NULL
)
)
;
}
#
ifdef
GTEST_HAS_DEATH_TEST
TEST
(
FlagsValidatorDeathTest
InvalidFlagViaArgv
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
"
-
-
test_flag
=
50
"
NULL
}
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
EXPECT_DEATH
(
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
"
ERROR
:
failed
validation
of
new
value
'
50
'
for
flag
'
test_flag
'
"
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
NULL
)
)
;
}
#
endif
TEST
(
FlagsValidator
InvalidFlagViaSetDefault
)
{
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOptionWithMode
(
"
test_flag
"
"
50
"
SET_FLAG_IF_DEFAULT
)
)
;
EXPECT_EQ
(
-
1
FLAGS_test_flag
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
NULL
)
)
;
}
TEST
(
FlagsValidator
InvalidFlagViaSetValue
)
{
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
FLAGS_test_flag
=
100
;
EXPECT_EQ
(
"
"
SetCommandLineOptionWithMode
(
"
test_flag
"
"
50
"
SET_FLAGS_VALUE
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOptionWithMode
(
"
test_flag
"
"
50
"
SET_FLAGS_DEFAULT
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_flag
"
"
50
"
)
)
;
EXPECT_EQ
(
100
FLAGS_test_flag
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
NULL
)
)
;
}
#
ifdef
GTEST_HAS_DEATH_TEST
TEST
(
FlagsValidatorDeathTest
InvalidFlagNeverSet
)
{
const
char
*
argv
[
]
=
{
"
my_test
"
NULL
}
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
EXPECT_DEATH
(
ParseTestFlag
(
true
arraysize
(
argv
)
-
1
argv
)
"
ERROR
:
-
-
test_flag
must
be
set
on
the
commandline
"
)
;
}
#
endif
TEST
(
FlagsValidator
InvalidFlagPtr
)
{
int32
dummy
;
EXPECT_FALSE
(
RegisterFlagValidator
(
NULL
&
ValidateTestFlagIs5
)
)
;
EXPECT_FALSE
(
RegisterFlagValidator
(
&
dummy
&
ValidateTestFlagIs5
)
)
;
}
TEST
(
FlagsValidator
RegisterValidatorTwice
)
{
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
EXPECT_FALSE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs10
)
)
;
EXPECT_FALSE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs10
)
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
NULL
)
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs10
)
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
NULL
)
)
;
}
TEST
(
FlagsValidator
CommandLineFlagInfo
)
{
CommandLineFlagInfo
info
;
info
=
GetCommandLineFlagInfoOrDie
(
"
test_flag
"
)
;
EXPECT_FALSE
(
info
.
has_validator_fn
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
info
=
GetCommandLineFlagInfoOrDie
(
"
test_flag
"
)
;
EXPECT_TRUE
(
info
.
has_validator_fn
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
NULL
)
)
;
info
=
GetCommandLineFlagInfoOrDie
(
"
test_flag
"
)
;
EXPECT_FALSE
(
info
.
has_validator_fn
)
;
}
TEST
(
FlagsValidator
FlagSaver
)
{
{
FlagSaver
fs
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_flag
"
"
50
"
)
)
;
}
EXPECT_NE
(
"
"
SetCommandLineOption
(
"
test_flag
"
"
50
"
)
)
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
&
ValidateTestFlagIs5
)
)
;
{
FlagSaver
fs
;
EXPECT_TRUE
(
RegisterFlagValidator
(
&
FLAGS_test_flag
NULL
)
)
;
EXPECT_NE
(
"
"
SetCommandLineOption
(
"
test_flag
"
"
50
"
)
)
;
}
EXPECT_EQ
(
"
"
SetCommandLineOption
(
"
test_flag
"
"
50
"
)
)
;
}
}
int
main
(
int
argc
char
*
*
argv
)
{
const
char
*
test_argv
[
]
=
{
"
/
test
/
argv
/
for
/
gflags_unittest
"
"
argv
2
"
"
3rd
argv
"
"
argv
#
4
"
}
;
SetArgv
(
arraysize
(
test_argv
)
test_argv
)
;
string
usage_message
=
(
string
(
GetArgv0
(
)
)
+
"
:
<
useless
flag
>
[
.
.
.
]
\
nDoes
something
useless
.
\
n
"
)
;
FLAGS_tryfromenv
=
"
test_tryfromenv
"
;
setenv
(
"
FLAGS_test_tryfromenv
"
"
pre
-
set
"
1
)
;
SetCommandLineOptionWithMode
(
"
changed_bool1
"
"
true
"
SET_FLAGS_DEFAULT
)
;
FLAGS_changed_bool2
=
true
;
SetUsageMessage
(
usage_message
.
c_str
(
)
)
;
SetVersionString
(
"
test_version
"
)
;
ParseCommandLineFlags
(
&
argc
&
argv
true
)
;
MakeTmpdir
(
&
FLAGS_test_tmpdir
)
;
const
int
exit_status
=
RUN_ALL_TESTS
(
)
;
ShutDownCommandLineFlags
(
)
;
return
exit_status
;
}
_END_GOOGLE_NAMESPACE_
int
main
(
int
argc
char
*
*
argv
)
{
return
GOOGLE_NAMESPACE
:
:
main
(
argc
argv
)
;
}
