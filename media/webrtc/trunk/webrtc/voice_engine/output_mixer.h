#
ifndef
WEBRTC_VOICE_ENGINE_OUTPUT_MIXER_H_
#
define
WEBRTC_VOICE_ENGINE_OUTPUT_MIXER_H_
#
include
<
memory
>
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
common_audio
/
resampler
/
include
/
push_resampler
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
modules
/
audio_conference_mixer
/
include
/
audio_conference_mixer
.
h
"
#
include
"
webrtc
/
modules
/
audio_conference_mixer
/
include
/
audio_conference_mixer_defines
.
h
"
#
include
"
webrtc
/
voice_engine
/
file_recorder
.
h
"
#
include
"
webrtc
/
voice_engine
/
level_indicator
.
h
"
#
include
"
webrtc
/
voice_engine
/
voice_engine_defines
.
h
"
namespace
webrtc
{
class
AudioProcessing
;
class
FileWrapper
;
class
VoEMediaProcess
;
namespace
voe
{
class
Statistics
;
class
OutputMixer
:
public
AudioMixerOutputReceiver
public
FileCallback
{
public
:
static
int32_t
Create
(
OutputMixer
*
&
mixer
uint32_t
instanceId
)
;
static
void
Destroy
(
OutputMixer
*
&
mixer
)
;
int32_t
SetEngineInformation
(
Statistics
&
engineStatistics
)
;
int32_t
SetAudioProcessingModule
(
AudioProcessing
*
audioProcessingModule
)
;
int
RegisterExternalMediaProcessing
(
VoEMediaProcess
&
proccess_object
)
;
int
DeRegisterExternalMediaProcessing
(
)
;
int32_t
MixActiveChannels
(
)
;
int32_t
DoOperationsOnCombinedSignal
(
bool
feed_data_to_apm
)
;
int32_t
SetMixabilityStatus
(
MixerParticipant
&
participant
bool
mixable
)
;
int32_t
SetAnonymousMixabilityStatus
(
MixerParticipant
&
participant
bool
mixable
)
;
int
GetMixedAudio
(
int
sample_rate_hz
size_t
num_channels
AudioFrame
*
audioFrame
)
;
int
GetSpeechOutputLevel
(
uint32_t
&
level
)
;
int
GetSpeechOutputLevelFullRange
(
uint32_t
&
level
)
;
int
SetOutputVolumePan
(
float
left
float
right
)
;
int
GetOutputVolumePan
(
float
&
left
float
&
right
)
;
int
StartRecordingPlayout
(
const
char
*
fileName
const
CodecInst
*
codecInst
)
;
int
StartRecordingPlayout
(
OutStream
*
stream
const
CodecInst
*
codecInst
)
;
int
StopRecordingPlayout
(
)
;
virtual
~
OutputMixer
(
)
;
virtual
void
NewMixedAudio
(
int32_t
id
const
AudioFrame
&
generalAudioFrame
const
AudioFrame
*
*
uniqueAudioFrames
uint32_t
size
)
;
void
PlayNotification
(
int32_t
id
uint32_t
durationMs
)
;
void
RecordNotification
(
int32_t
id
uint32_t
durationMs
)
;
void
PlayFileEnded
(
int32_t
id
)
;
void
RecordFileEnded
(
int32_t
id
)
;
private
:
OutputMixer
(
uint32_t
instanceId
)
;
Statistics
*
_engineStatisticsPtr
;
AudioProcessing
*
_audioProcessingModulePtr
;
rtc
:
:
CriticalSection
_callbackCritSect
;
rtc
:
:
CriticalSection
_fileCritSect
;
AudioConferenceMixer
&
_mixerModule
;
AudioFrame
_audioFrame
;
PushResampler
<
int16_t
>
resampler_
;
PushResampler
<
int16_t
>
audioproc_resampler_
;
AudioLevel
_audioLevel
;
int
_instanceId
;
VoEMediaProcess
*
_externalMediaCallbackPtr
;
bool
_externalMedia
;
float
_panLeft
;
float
_panRight
;
int
_mixingFrequencyHz
;
std
:
:
unique_ptr
<
FileRecorder
>
output_file_recorder_
;
bool
_outputFileRecording
;
}
;
}
}
#
endif
