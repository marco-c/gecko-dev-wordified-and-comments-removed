#
include
"
voice_engine
/
channel_manager
.
h
"
#
include
"
rtc_base
/
timeutils
.
h
"
#
include
"
voice_engine
/
channel
.
h
"
namespace
webrtc
{
namespace
voe
{
ChannelOwner
:
:
ChannelOwner
(
class
Channel
*
channel
)
:
channel_ref_
(
new
ChannelRef
(
channel
)
)
{
}
ChannelOwner
:
:
ChannelRef
:
:
ChannelRef
(
class
Channel
*
channel
)
:
channel
(
channel
)
{
}
ChannelManager
:
:
ChannelManager
(
uint32_t
instance_id
)
:
instance_id_
(
instance_id
)
last_channel_id_
(
-
1
)
random_
(
rtc
:
:
TimeNanos
(
)
)
{
}
ChannelOwner
ChannelManager
:
:
CreateChannel
(
const
VoEBase
:
:
ChannelConfig
&
config
)
{
Channel
*
channel
;
Channel
:
:
CreateChannel
(
channel
+
+
last_channel_id_
instance_id_
config
)
;
channel
-
>
SetLocalSSRC
(
random_
.
Rand
<
uint32_t
>
(
)
)
;
ChannelOwner
channel_owner
(
channel
)
;
rtc
:
:
CritScope
crit
(
&
lock_
)
;
channels_
.
push_back
(
channel_owner
)
;
return
channel_owner
;
}
ChannelOwner
ChannelManager
:
:
GetChannel
(
int32_t
channel_id
)
{
rtc
:
:
CritScope
crit
(
&
lock_
)
;
for
(
size_t
i
=
0
;
i
<
channels_
.
size
(
)
;
+
+
i
)
{
if
(
channels_
[
i
]
.
channel
(
)
-
>
ChannelId
(
)
=
=
channel_id
)
return
channels_
[
i
]
;
}
return
ChannelOwner
(
NULL
)
;
}
void
ChannelManager
:
:
GetAllChannels
(
std
:
:
vector
<
ChannelOwner
>
*
channels
)
{
rtc
:
:
CritScope
crit
(
&
lock_
)
;
*
channels
=
channels_
;
}
void
ChannelManager
:
:
DestroyChannel
(
int32_t
channel_id
)
{
assert
(
channel_id
>
=
0
)
;
ChannelOwner
reference
(
NULL
)
;
{
rtc
:
:
CritScope
crit
(
&
lock_
)
;
std
:
:
vector
<
ChannelOwner
>
:
:
iterator
to_delete
=
channels_
.
end
(
)
;
for
(
auto
it
=
channels_
.
begin
(
)
;
it
!
=
channels_
.
end
(
)
;
+
+
it
)
{
Channel
*
channel
=
it
-
>
channel
(
)
;
channel
-
>
DisassociateSendChannel
(
channel_id
)
;
if
(
channel
-
>
ChannelId
(
)
=
=
channel_id
)
{
to_delete
=
it
;
}
}
if
(
to_delete
!
=
channels_
.
end
(
)
)
{
reference
=
*
to_delete
;
channels_
.
erase
(
to_delete
)
;
}
}
if
(
reference
.
channel
(
)
)
{
reference
.
channel
(
)
-
>
Terminate
(
)
;
}
}
void
ChannelManager
:
:
DestroyAllChannels
(
)
{
std
:
:
vector
<
ChannelOwner
>
references
;
{
rtc
:
:
CritScope
crit
(
&
lock_
)
;
references
=
channels_
;
channels_
.
clear
(
)
;
}
for
(
auto
&
owner
:
references
)
{
if
(
owner
.
channel
(
)
)
owner
.
channel
(
)
-
>
Terminate
(
)
;
}
}
size_t
ChannelManager
:
:
NumOfChannels
(
)
const
{
rtc
:
:
CritScope
crit
(
&
lock_
)
;
return
channels_
.
size
(
)
;
}
ChannelManager
:
:
Iterator
:
:
Iterator
(
ChannelManager
*
channel_manager
)
:
iterator_pos_
(
0
)
{
channel_manager
-
>
GetAllChannels
(
&
channels_
)
;
}
Channel
*
ChannelManager
:
:
Iterator
:
:
GetChannel
(
)
{
if
(
iterator_pos_
<
channels_
.
size
(
)
)
return
channels_
[
iterator_pos_
]
.
channel
(
)
;
return
NULL
;
}
bool
ChannelManager
:
:
Iterator
:
:
IsValid
(
)
{
return
iterator_pos_
<
channels_
.
size
(
)
;
}
void
ChannelManager
:
:
Iterator
:
:
Increment
(
)
{
+
+
iterator_pos_
;
}
}
}
