#
if
defined
(
WEBRTC_ANDROID
)
#
include
"
modules
/
audio_device
/
android
/
audio_device_template
.
h
"
#
include
"
modules
/
audio_device
/
android
/
audio_record_jni
.
h
"
#
include
"
modules
/
audio_device
/
android
/
audio_track_jni
.
h
"
#
endif
#
include
"
modules
/
audio_coding
/
include
/
audio_coding_module
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
voice_engine
/
channel_proxy
.
h
"
#
include
"
voice_engine
/
voice_engine_impl
.
h
"
namespace
webrtc
{
static
int32_t
gVoiceEngineInstanceCounter
=
0
;
VoiceEngine
*
GetVoiceEngine
(
)
{
VoiceEngineImpl
*
self
=
new
VoiceEngineImpl
(
)
;
if
(
self
!
=
NULL
)
{
self
-
>
AddRef
(
)
;
gVoiceEngineInstanceCounter
+
+
;
}
return
self
;
}
int
VoiceEngineImpl
:
:
AddRef
(
)
{
return
+
+
_ref_count
;
}
int
VoiceEngineImpl
:
:
Release
(
)
{
int
new_ref
=
-
-
_ref_count
;
assert
(
new_ref
>
=
0
)
;
if
(
new_ref
=
=
0
)
{
Terminate
(
)
;
delete
this
;
}
return
new_ref
;
}
std
:
:
unique_ptr
<
voe
:
:
ChannelProxy
>
VoiceEngineImpl
:
:
GetChannelProxy
(
int
channel_id
)
{
RTC_DCHECK
(
channel_id
>
=
0
)
;
rtc
:
:
CritScope
cs
(
crit_sec
(
)
)
;
return
std
:
:
unique_ptr
<
voe
:
:
ChannelProxy
>
(
new
voe
:
:
ChannelProxy
(
channel_manager
(
)
.
GetChannel
(
channel_id
)
)
)
;
}
VoiceEngine
*
VoiceEngine
:
:
Create
(
)
{
return
GetVoiceEngine
(
)
;
}
bool
VoiceEngine
:
:
Delete
(
VoiceEngine
*
&
voiceEngine
)
{
if
(
voiceEngine
=
=
NULL
)
return
false
;
VoiceEngineImpl
*
s
=
static_cast
<
VoiceEngineImpl
*
>
(
voiceEngine
)
;
s
-
>
Release
(
)
;
voiceEngine
=
NULL
;
return
true
;
}
}
