#
ifndef
WEBRTC_VOICE_ENGINE_CHANNEL_MANAGER_H
#
define
WEBRTC_VOICE_ENGINE_CHANNEL_MANAGER_H
#
include
<
memory
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
atomic32
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_base
.
h
"
namespace
webrtc
{
class
AudioDecoderFactory
;
namespace
voe
{
class
Channel
;
class
ChannelOwner
{
public
:
explicit
ChannelOwner
(
Channel
*
channel
)
;
ChannelOwner
(
const
ChannelOwner
&
channel_owner
)
;
~
ChannelOwner
(
)
;
ChannelOwner
&
operator
=
(
const
ChannelOwner
&
other
)
;
Channel
*
channel
(
)
const
{
return
channel_ref_
-
>
channel
.
get
(
)
;
}
bool
IsValid
(
)
{
return
channel_ref_
-
>
channel
.
get
(
)
!
=
NULL
;
}
int
use_count
(
)
const
{
return
channel_ref_
-
>
ref_count
.
Value
(
)
;
}
private
:
struct
ChannelRef
{
ChannelRef
(
Channel
*
channel
)
;
const
std
:
:
unique_ptr
<
Channel
>
channel
;
Atomic32
ref_count
;
}
;
ChannelRef
*
channel_ref_
;
}
;
class
ChannelManager
{
public
:
ChannelManager
(
uint32_t
instance_id
)
;
class
Iterator
{
public
:
explicit
Iterator
(
ChannelManager
*
channel_manager
)
;
Channel
*
GetChannel
(
)
;
bool
IsValid
(
)
;
void
Increment
(
)
;
private
:
size_t
iterator_pos_
;
std
:
:
vector
<
ChannelOwner
>
channels_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
Iterator
)
;
}
;
ChannelOwner
CreateChannel
(
const
VoEBase
:
:
ChannelConfig
&
config
)
;
ChannelOwner
GetChannel
(
int32_t
channel_id
)
;
void
GetAllChannels
(
std
:
:
vector
<
ChannelOwner
>
*
channels
)
;
void
DestroyChannel
(
int32_t
channel_id
)
;
void
DestroyAllChannels
(
)
;
size_t
NumOfChannels
(
)
const
;
private
:
uint32_t
instance_id_
;
Atomic32
last_channel_id_
;
rtc
:
:
CriticalSection
lock_
;
std
:
:
vector
<
ChannelOwner
>
channels_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
ChannelManager
)
;
}
;
}
}
#
endif
