#
ifndef
VOICE_ENGINE_TRANSMIT_MIXER_H_
#
define
VOICE_ENGINE_TRANSMIT_MIXER_H_
#
include
<
memory
>
#
include
"
common_audio
/
resampler
/
include
/
push_resampler
.
h
"
#
include
"
common_types
.
h
"
#
include
"
modules
/
audio_processing
/
typing_detection
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
voice_engine
/
audio_level
.
h
"
#
include
"
voice_engine
/
include
/
voe_base
.
h
"
#
if
!
defined
(
WEBRTC_ANDROID
)
&
&
!
defined
(
WEBRTC_IOS
)
#
define
WEBRTC_VOICE_ENGINE_TYPING_DETECTION
1
#
else
#
define
WEBRTC_VOICE_ENGINE_TYPING_DETECTION
0
#
endif
namespace
webrtc
{
class
AudioProcessing
;
class
ProcessThread
;
namespace
voe
{
class
ChannelManager
;
class
MixedAudio
;
class
TransmitMixer
{
public
:
static
int32_t
Create
(
TransmitMixer
*
&
mixer
)
;
static
void
Destroy
(
TransmitMixer
*
&
mixer
)
;
void
SetEngineInformation
(
ChannelManager
*
channelManager
)
;
int32_t
SetAudioProcessingModule
(
AudioProcessing
*
audioProcessingModule
)
;
int32_t
PrepareDemux
(
const
void
*
audioSamples
size_t
nSamples
size_t
nChannels
uint32_t
samplesPerSec
uint16_t
totalDelayMS
int32_t
clockDrift
uint16_t
currentMicLevel
bool
keyPressed
)
;
void
ProcessAndEncodeAudio
(
)
;
uint32_t
CaptureLevel
(
)
const
;
int32_t
StopSend
(
)
;
int8_t
AudioLevel
(
)
const
;
virtual
int16_t
AudioLevelFullRange
(
)
const
;
virtual
double
GetTotalInputEnergy
(
)
const
;
virtual
double
GetTotalInputDuration
(
)
const
;
virtual
~
TransmitMixer
(
)
;
virtual
void
EnableStereoChannelSwapping
(
bool
enable
)
;
bool
IsStereoChannelSwappingEnabled
(
)
;
virtual
bool
typing_noise_detected
(
)
const
;
protected
:
TransmitMixer
(
)
=
default
;
private
:
void
GetSendCodecInfo
(
int
*
max_sample_rate
size_t
*
max_channels
)
;
void
GenerateAudioFrame
(
const
int16_t
audioSamples
[
]
size_t
nSamples
size_t
nChannels
int
samplesPerSec
)
;
void
ProcessAudio
(
int
delay_ms
int
clock_drift
int
current_mic_level
bool
key_pressed
)
;
#
if
WEBRTC_VOICE_ENGINE_TYPING_DETECTION
void
TypingDetection
(
bool
key_pressed
)
;
#
endif
ChannelManager
*
_channelManagerPtr
=
nullptr
;
AudioProcessing
*
audioproc_
=
nullptr
;
AudioFrame
_audioFrame
;
PushResampler
<
int16_t
>
resampler_
;
voe
:
:
AudioLevel
_audioLevel
;
#
if
WEBRTC_VOICE_ENGINE_TYPING_DETECTION
webrtc
:
:
TypingDetection
typing_detection_
;
#
endif
rtc
:
:
CriticalSection
lock_
;
bool
typing_noise_detected_
RTC_GUARDED_BY
(
lock_
)
=
false
;
uint32_t
_captureLevel
=
0
;
bool
stereo_codec_
=
false
;
bool
swap_stereo_channels_
=
false
;
}
;
}
}
#
endif
