#
include
"
webrtc
/
voice_engine
/
include
/
voe_base
.
h
"
#
include
"
testing
/
gtest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
webrtc
/
voice_engine
/
channel_manager
.
h
"
#
include
"
webrtc
/
voice_engine
/
shared_data
.
h
"
#
include
"
webrtc
/
voice_engine
/
voice_engine_fixture
.
h
"
#
include
"
webrtc
/
voice_engine
/
voice_engine_impl
.
h
"
namespace
webrtc
{
class
VoEBaseTest
:
public
VoiceEngineFixture
{
}
;
TEST_F
(
VoEBaseTest
InitWithExternalAudioDeviceAndAudioProcessing
)
{
AudioProcessing
*
audioproc
=
AudioProcessing
:
:
Create
(
)
;
EXPECT_EQ
(
0
base_
-
>
Init
(
&
adm_
audioproc
)
)
;
EXPECT_EQ
(
audioproc
base_
-
>
audio_processing
(
)
)
;
EXPECT_EQ
(
0
base_
-
>
LastError
(
)
)
;
}
TEST_F
(
VoEBaseTest
InitWithExternalAudioDevice
)
{
EXPECT_EQ
(
nullptr
base_
-
>
audio_processing
(
)
)
;
EXPECT_EQ
(
0
base_
-
>
Init
(
&
adm_
nullptr
)
)
;
EXPECT_NE
(
nullptr
base_
-
>
audio_processing
(
)
)
;
EXPECT_EQ
(
0
base_
-
>
LastError
(
)
)
;
}
TEST_F
(
VoEBaseTest
CreateChannelBeforeInitShouldFail
)
{
int
channelID
=
base_
-
>
CreateChannel
(
)
;
EXPECT_EQ
(
channelID
-
1
)
;
}
TEST_F
(
VoEBaseTest
CreateChannelAfterInit
)
{
EXPECT_EQ
(
0
base_
-
>
Init
(
&
adm_
nullptr
)
)
;
int
channelID
=
base_
-
>
CreateChannel
(
)
;
EXPECT_NE
(
channelID
-
1
)
;
EXPECT_EQ
(
0
base_
-
>
DeleteChannel
(
channelID
)
)
;
}
TEST_F
(
VoEBaseTest
AssociateSendChannel
)
{
AudioProcessing
*
audioproc
=
AudioProcessing
:
:
Create
(
)
;
EXPECT_EQ
(
0
base_
-
>
Init
(
&
adm_
audioproc
)
)
;
const
int
channel_1
=
base_
-
>
CreateChannel
(
)
;
EXPECT_EQ
(
-
1
base_
-
>
AssociateSendChannel
(
channel_1
channel_1
+
1
)
)
;
const
int
channel_2
=
base_
-
>
CreateChannel
(
)
;
EXPECT_EQ
(
0
base_
-
>
AssociateSendChannel
(
channel_1
channel_2
)
)
;
EXPECT_EQ
(
0
base_
-
>
AssociateSendChannel
(
channel_2
channel_1
)
)
;
voe
:
:
SharedData
*
shared_data
=
static_cast
<
voe
:
:
SharedData
*
>
(
static_cast
<
VoiceEngineImpl
*
>
(
voe_
)
)
;
voe
:
:
ChannelOwner
reference
=
shared_data
-
>
channel_manager
(
)
.
GetChannel
(
channel_1
)
;
EXPECT_EQ
(
0
base_
-
>
DeleteChannel
(
channel_1
)
)
;
EXPECT_EQ
(
1
reference
.
use_count
(
)
)
;
reference
=
shared_data
-
>
channel_manager
(
)
.
GetChannel
(
channel_2
)
;
EXPECT_EQ
(
0
base_
-
>
DeleteChannel
(
channel_2
)
)
;
EXPECT_EQ
(
1
reference
.
use_count
(
)
)
;
}
TEST_F
(
VoEBaseTest
GetVersion
)
{
char
v1
[
1024
]
=
{
75
}
;
base_
-
>
GetVersion
(
v1
)
;
std
:
:
string
v2
=
VoiceEngine
:
:
GetVersionString
(
)
+
"
\
n
"
;
EXPECT_EQ
(
v2
v1
)
;
}
}
