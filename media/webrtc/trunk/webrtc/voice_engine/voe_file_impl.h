#
ifndef
WEBRTC_VOICE_ENGINE_VOE_FILE_IMPL_H
#
define
WEBRTC_VOICE_ENGINE_VOE_FILE_IMPL_H
#
include
"
webrtc
/
voice_engine
/
include
/
voe_file
.
h
"
#
include
"
webrtc
/
voice_engine
/
shared_data
.
h
"
namespace
webrtc
{
class
VoEFileImpl
:
public
VoEFile
{
public
:
int
StartPlayingFileLocally
(
int
channel
const
char
fileNameUTF8
[
1024
]
bool
loop
=
false
FileFormats
format
=
kFileFormatPcm16kHzFile
float
volumeScaling
=
1
.
0
int
startPointMs
=
0
int
stopPointMs
=
0
)
override
;
int
StartPlayingFileLocally
(
int
channel
InStream
*
stream
FileFormats
format
=
kFileFormatPcm16kHzFile
float
volumeScaling
=
1
.
0
int
startPointMs
=
0
int
stopPointMs
=
0
)
override
;
int
StopPlayingFileLocally
(
int
channel
)
override
;
int
IsPlayingFileLocally
(
int
channel
)
override
;
int
StartPlayingFileAsMicrophone
(
int
channel
const
char
fileNameUTF8
[
1024
]
bool
loop
=
false
bool
mixWithMicrophone
=
false
FileFormats
format
=
kFileFormatPcm16kHzFile
float
volumeScaling
=
1
.
0
)
override
;
int
StartPlayingFileAsMicrophone
(
int
channel
InStream
*
stream
bool
mixWithMicrophone
=
false
FileFormats
format
=
kFileFormatPcm16kHzFile
float
volumeScaling
=
1
.
0
)
override
;
int
StopPlayingFileAsMicrophone
(
int
channel
)
override
;
int
IsPlayingFileAsMicrophone
(
int
channel
)
override
;
int
StartRecordingPlayout
(
int
channel
const
char
*
fileNameUTF8
CodecInst
*
compression
=
NULL
int
maxSizeBytes
=
-
1
)
override
;
int
StartRecordingPlayout
(
int
channel
OutStream
*
stream
CodecInst
*
compression
=
NULL
)
override
;
int
StopRecordingPlayout
(
int
channel
)
override
;
int
StartRecordingMicrophone
(
const
char
*
fileNameUTF8
CodecInst
*
compression
=
NULL
int
maxSizeBytes
=
-
1
)
override
;
int
StartRecordingMicrophone
(
OutStream
*
stream
CodecInst
*
compression
=
NULL
)
override
;
int
StopRecordingMicrophone
(
)
override
;
protected
:
VoEFileImpl
(
voe
:
:
SharedData
*
shared
)
;
~
VoEFileImpl
(
)
override
;
private
:
voe
:
:
SharedData
*
_shared
;
}
;
}
#
endif
