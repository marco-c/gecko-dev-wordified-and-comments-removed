#
ifndef
WEBRTC_VOICE_ENGINE_TEST_AUTO_TEST_FAKES_CONFERENCE_TRANSPORT_H_
#
define
WEBRTC_VOICE_ENGINE_TEST_AUTO_TEST_FAKES_CONFERENCE_TRANSPORT_H_
#
include
<
deque
>
#
include
<
map
>
#
include
<
utility
>
#
include
"
testing
/
gtest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
webrtc
/
base
/
basictypes
.
h
"
#
include
"
webrtc
/
base
/
platform_thread
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_header_parser
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
critical_section_wrapper
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
event_wrapper
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_base
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_codec
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_file
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_network
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_rtp_rtcp
.
h
"
#
include
"
webrtc
/
voice_engine
/
test
/
auto_test
/
fakes
/
loudest_filter
.
h
"
static
const
size_t
kMaxPacketSizeByte
=
1500
;
namespace
voetest
{
class
ConferenceTransport
:
public
webrtc
:
:
Transport
{
public
:
ConferenceTransport
(
)
;
virtual
~
ConferenceTransport
(
)
;
void
SetRtt
(
unsigned
int
rtt_ms
)
;
unsigned
int
AddStream
(
std
:
:
string
file_name
webrtc
:
:
FileFormats
format
)
;
bool
RemoveStream
(
unsigned
int
id
)
;
bool
StartPlayout
(
unsigned
int
id
)
;
bool
GetReceiverStatistics
(
unsigned
int
id
webrtc
:
:
CallStatistics
*
stats
)
;
bool
SendRtp
(
const
uint8_t
*
data
size_t
len
const
webrtc
:
:
PacketOptions
&
options
)
override
;
bool
SendRtcp
(
const
uint8_t
*
data
size_t
len
)
override
;
private
:
struct
Packet
{
enum
Type
{
Rtp
Rtcp
}
type_
;
Packet
(
)
:
len_
(
0
)
{
}
Packet
(
Type
type
const
void
*
data
size_t
len
uint32_t
time_ms
)
:
type_
(
type
)
len_
(
len
)
send_time_ms_
(
time_ms
)
{
EXPECT_LE
(
len_
kMaxPacketSizeByte
)
;
memcpy
(
data_
data
len_
)
;
}
uint8_t
data_
[
kMaxPacketSizeByte
]
;
size_t
len_
;
uint32_t
send_time_ms_
;
}
;
static
bool
Run
(
void
*
transport
)
{
return
static_cast
<
ConferenceTransport
*
>
(
transport
)
-
>
DispatchPackets
(
)
;
}
int
GetReceiverChannelForSsrc
(
unsigned
int
sender_ssrc
)
const
;
void
StorePacket
(
Packet
:
:
Type
type
const
void
*
data
size_t
len
)
;
void
SendPacket
(
const
Packet
&
packet
)
;
bool
DispatchPackets
(
)
;
const
rtc
:
:
scoped_ptr
<
webrtc
:
:
CriticalSectionWrapper
>
pq_crit_
;
const
rtc
:
:
scoped_ptr
<
webrtc
:
:
CriticalSectionWrapper
>
stream_crit_
;
const
rtc
:
:
scoped_ptr
<
webrtc
:
:
EventWrapper
>
packet_event_
;
rtc
:
:
PlatformThread
thread_
;
unsigned
int
rtt_ms_
;
unsigned
int
stream_count_
;
std
:
:
map
<
unsigned
int
std
:
:
pair
<
int
int
>
>
streams_
GUARDED_BY
(
stream_crit_
.
get
(
)
)
;
std
:
:
deque
<
Packet
>
packet_queue_
GUARDED_BY
(
pq_crit_
.
get
(
)
)
;
int
local_sender_
;
int
reflector_
;
webrtc
:
:
VoiceEngine
*
local_voe_
;
webrtc
:
:
VoEBase
*
local_base_
;
webrtc
:
:
VoERTP_RTCP
*
local_rtp_rtcp_
;
webrtc
:
:
VoENetwork
*
local_network_
;
webrtc
:
:
VoiceEngine
*
remote_voe_
;
webrtc
:
:
VoEBase
*
remote_base_
;
webrtc
:
:
VoECodec
*
remote_codec_
;
webrtc
:
:
VoERTP_RTCP
*
remote_rtp_rtcp_
;
webrtc
:
:
VoENetwork
*
remote_network_
;
webrtc
:
:
VoEFile
*
remote_file_
;
LoudestFilter
loudest_filter_
;
const
rtc
:
:
scoped_ptr
<
webrtc
:
:
RtpHeaderParser
>
rtp_header_parser_
;
}
;
}
#
endif
