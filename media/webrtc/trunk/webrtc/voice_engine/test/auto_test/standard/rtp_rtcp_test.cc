#
include
"
webrtc
/
system_wrappers
/
include
/
atomic32
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
critical_section_wrapper
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
event_wrapper
.
h
"
#
include
"
webrtc
/
test
/
testsupport
/
fileutils
.
h
"
#
include
"
webrtc
/
voice_engine
/
test
/
auto_test
/
fixtures
/
after_streaming_fixture
.
h
"
#
include
"
webrtc
/
voice_engine
/
test
/
auto_test
/
voe_standard_test
.
h
"
class
TestRtpObserver
:
public
webrtc
:
:
VoERTPObserver
{
public
:
TestRtpObserver
(
)
:
crit_
(
voetest
:
:
CriticalSectionWrapper
:
:
CreateCriticalSection
(
)
)
changed_ssrc_event_
(
voetest
:
:
EventWrapper
:
:
Create
(
)
)
{
}
virtual
~
TestRtpObserver
(
)
{
}
virtual
void
OnIncomingCSRCChanged
(
int
channel
unsigned
int
CSRC
bool
added
)
{
}
virtual
void
OnIncomingSSRCChanged
(
int
channel
unsigned
int
SSRC
)
;
void
WaitForChangedSsrc
(
)
{
EXPECT_EQ
(
voetest
:
:
kEventSignaled
changed_ssrc_event_
-
>
Wait
(
10
*
1000
)
)
;
}
void
SetIncomingSsrc
(
unsigned
int
ssrc
)
{
voetest
:
:
CriticalSectionScoped
lock
(
crit_
.
get
(
)
)
;
incoming_ssrc_
=
ssrc
;
}
public
:
rtc
:
:
scoped_ptr
<
voetest
:
:
CriticalSectionWrapper
>
crit_
;
unsigned
int
incoming_ssrc_
;
rtc
:
:
scoped_ptr
<
voetest
:
:
EventWrapper
>
changed_ssrc_event_
;
}
;
void
TestRtpObserver
:
:
OnIncomingSSRCChanged
(
int
channel
unsigned
int
SSRC
)
{
char
msg
[
128
]
;
sprintf
(
msg
"
\
n
=
>
OnIncomingSSRCChanged
(
channel
=
%
d
SSRC
=
%
u
)
\
n
"
channel
SSRC
)
;
TEST_LOG
(
"
%
s
"
msg
)
;
{
voetest
:
:
CriticalSectionScoped
lock
(
crit_
.
get
(
)
)
;
if
(
incoming_ssrc_
=
=
SSRC
)
changed_ssrc_event_
-
>
Set
(
)
;
}
}
static
const
char
*
const
RTCP_CNAME
=
"
Whatever
"
;
class
RtpRtcpTest
:
public
AfterStreamingFixture
{
protected
:
void
SetUp
(
)
{
second_channel_
=
voe_base_
-
>
CreateChannel
(
)
;
EXPECT_GE
(
second_channel_
0
)
;
transport_
=
new
LoopBackTransport
(
voe_network_
second_channel_
)
;
EXPECT_EQ
(
0
voe_network_
-
>
RegisterExternalTransport
(
second_channel_
*
transport_
)
)
;
EXPECT_EQ
(
0
voe_base_
-
>
StartReceive
(
second_channel_
)
)
;
EXPECT_EQ
(
0
voe_base_
-
>
StartPlayout
(
second_channel_
)
)
;
EXPECT_EQ
(
0
voe_rtp_rtcp_
-
>
SetLocalSSRC
(
second_channel_
5678
)
)
;
EXPECT_EQ
(
0
voe_base_
-
>
StartSend
(
second_channel_
)
)
;
voe_rtp_rtcp_
-
>
SetRTCP_CNAME
(
channel_
RTCP_CNAME
)
;
}
void
TearDown
(
)
{
EXPECT_EQ
(
0
voe_network_
-
>
DeRegisterExternalTransport
(
second_channel_
)
)
;
voe_base_
-
>
DeleteChannel
(
second_channel_
)
;
delete
transport_
;
}
int
second_channel_
;
LoopBackTransport
*
transport_
;
}
;
TEST_F
(
RtpRtcpTest
RemoteRtcpCnameHasPropagatedToRemoteSide
)
{
if
(
!
FLAGS_include_timing_dependent_tests
)
{
TEST_LOG
(
"
Skipping
test
-
running
in
slow
execution
environment
.
.
.
\
n
"
)
;
return
;
}
Sleep
(
1000
)
;
char
char_buffer
[
256
]
;
voe_rtp_rtcp_
-
>
GetRemoteRTCP_CNAME
(
channel_
char_buffer
)
;
EXPECT_STREQ
(
RTCP_CNAME
char_buffer
)
;
}
TEST_F
(
RtpRtcpTest
SSRCPropagatesCorrectly
)
{
unsigned
int
local_ssrc
=
1234
;
EXPECT_EQ
(
0
voe_base_
-
>
StopSend
(
channel_
)
)
;
EXPECT_EQ
(
0
voe_rtp_rtcp_
-
>
SetLocalSSRC
(
channel_
local_ssrc
)
)
;
EXPECT_EQ
(
0
voe_base_
-
>
StartSend
(
channel_
)
)
;
Sleep
(
1000
)
;
unsigned
int
ssrc
;
EXPECT_EQ
(
0
voe_rtp_rtcp_
-
>
GetLocalSSRC
(
channel_
ssrc
)
)
;
EXPECT_EQ
(
local_ssrc
ssrc
)
;
EXPECT_EQ
(
0
voe_rtp_rtcp_
-
>
GetRemoteSSRC
(
channel_
ssrc
)
)
;
EXPECT_EQ
(
local_ssrc
ssrc
)
;
}
