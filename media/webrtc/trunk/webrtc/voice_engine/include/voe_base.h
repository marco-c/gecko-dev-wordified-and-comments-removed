#
ifndef
VOICE_ENGINE_VOE_BASE_H_
#
define
VOICE_ENGINE_VOE_BASE_H_
#
include
"
api
/
audio_codecs
/
audio_decoder_factory
.
h
"
#
include
"
common_types
.
h
"
#
include
"
modules
/
audio_coding
/
include
/
audio_coding_module
.
h
"
#
include
"
rtc_base
/
scoped_ref_ptr
.
h
"
namespace
webrtc
{
class
AudioDeviceModule
;
class
AudioProcessing
;
class
AudioTransport
;
namespace
voe
{
class
TransmitMixer
;
}
class
WEBRTC_DLLEXPORT
VoiceEngine
{
public
:
static
VoiceEngine
*
Create
(
)
;
static
bool
Delete
(
VoiceEngine
*
&
voiceEngine
)
;
protected
:
VoiceEngine
(
)
{
}
~
VoiceEngine
(
)
{
}
}
;
class
WEBRTC_DLLEXPORT
VoEBase
{
public
:
struct
ChannelConfig
{
AudioCodingModule
:
:
Config
acm_config
;
bool
enable_voice_pacing
=
false
;
}
;
static
VoEBase
*
GetInterface
(
VoiceEngine
*
voiceEngine
)
;
virtual
int
Release
(
)
=
0
;
virtual
int
Init
(
AudioDeviceModule
*
audio_device
AudioProcessing
*
audio_processing
const
rtc
:
:
scoped_refptr
<
AudioDecoderFactory
>
&
decoder_factory
)
=
0
;
virtual
voe
:
:
TransmitMixer
*
transmit_mixer
(
)
=
0
;
virtual
void
Terminate
(
)
=
0
;
virtual
int
CreateChannel
(
)
=
0
;
virtual
int
CreateChannel
(
const
ChannelConfig
&
config
)
=
0
;
virtual
int
DeleteChannel
(
int
channel
)
=
0
;
virtual
int
StartPlayout
(
int
channel
)
=
0
;
virtual
int
StopPlayout
(
int
channel
)
=
0
;
virtual
int
StartSend
(
int
channel
)
=
0
;
virtual
int
StopSend
(
int
channel
)
=
0
;
virtual
int
SetPlayout
(
bool
enabled
)
=
0
;
virtual
int
SetRecording
(
bool
enabled
)
=
0
;
virtual
AudioTransport
*
audio_transport
(
)
{
return
NULL
;
}
protected
:
VoEBase
(
)
{
}
virtual
~
VoEBase
(
)
{
}
}
;
}
#
endif
