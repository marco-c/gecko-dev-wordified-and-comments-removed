#
ifndef
WEBRTC_VOICE_ENGINE_VOE_BASE_H
#
define
WEBRTC_VOICE_ENGINE_VOE_BASE_H
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
audio_decoder_factory
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
include
/
audio_coding_module
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
namespace
webrtc
{
class
AudioDeviceModule
;
class
AudioProcessing
;
class
AudioTransport
;
class
WEBRTC_DLLEXPORT
VoiceEngineObserver
{
public
:
virtual
void
CallbackOnError
(
int
channel
int
errCode
)
=
0
;
protected
:
virtual
~
VoiceEngineObserver
(
)
{
}
}
;
class
WEBRTC_DLLEXPORT
VoiceEngine
{
public
:
static
VoiceEngine
*
Create
(
)
;
static
bool
Delete
(
VoiceEngine
*
&
voiceEngine
)
;
static
int
SetTraceFilter
(
unsigned
int
filter
)
;
static
int
SetTraceFile
(
const
char
*
fileNameUTF8
bool
addFileCounter
=
false
)
;
static
int
SetTraceCallback
(
TraceCallback
*
callback
)
;
#
if
!
defined
(
WEBRTC_CHROMIUM_BUILD
)
static
int
SetAndroidObjects
(
void
*
javaVM
void
*
context
)
;
#
endif
static
std
:
:
string
GetVersionString
(
)
;
protected
:
VoiceEngine
(
)
{
}
~
VoiceEngine
(
)
{
}
}
;
class
WEBRTC_DLLEXPORT
VoEBase
{
public
:
struct
ChannelConfig
{
AudioCodingModule
:
:
Config
acm_config
;
bool
enable_voice_pacing
=
false
;
}
;
static
VoEBase
*
GetInterface
(
VoiceEngine
*
voiceEngine
)
;
virtual
int
Release
(
)
=
0
;
virtual
int
RegisterVoiceEngineObserver
(
VoiceEngineObserver
&
observer
)
=
0
;
virtual
int
DeRegisterVoiceEngineObserver
(
)
=
0
;
virtual
int
Init
(
AudioDeviceModule
*
external_adm
=
NULL
AudioProcessing
*
audioproc
=
NULL
const
rtc
:
:
scoped_refptr
<
AudioDecoderFactory
>
&
decoder_factory
=
nullptr
)
=
0
;
virtual
AudioProcessing
*
audio_processing
(
)
=
0
;
virtual
AudioDeviceModule
*
audio_device_module
(
)
=
0
;
virtual
int
Terminate
(
)
=
0
;
virtual
int
CreateChannel
(
)
=
0
;
virtual
int
CreateChannel
(
const
ChannelConfig
&
config
)
=
0
;
virtual
int
DeleteChannel
(
int
channel
)
=
0
;
virtual
int
StartReceive
(
int
channel
)
=
0
;
virtual
int
StopReceive
(
int
channel
)
{
return
0
;
}
virtual
int
StartPlayout
(
int
channel
)
=
0
;
virtual
int
StopPlayout
(
int
channel
)
=
0
;
virtual
int
StartSend
(
int
channel
)
=
0
;
virtual
int
StopSend
(
int
channel
)
=
0
;
virtual
int
GetVersion
(
char
version
[
1024
]
)
=
0
;
virtual
int
LastError
(
)
=
0
;
virtual
AudioTransport
*
audio_transport
(
)
{
return
NULL
;
}
virtual
int
AssociateSendChannel
(
int
channel
int
accociate_send_channel
)
=
0
;
protected
:
VoEBase
(
)
{
}
virtual
~
VoEBase
(
)
{
}
}
;
}
#
endif
