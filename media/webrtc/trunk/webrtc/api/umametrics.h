#
ifndef
API_UMAMETRICS_H_
#
define
API_UMAMETRICS_H_
#
include
"
rtc_base
/
refcount
.
h
"
namespace
webrtc
{
enum
PeerConnectionEnumCounterType
{
kEnumCounterAddressFamily
kEnumCounterIceCandidatePairTypeUdp
kEnumCounterIceCandidatePairTypeTcp
kEnumCounterAudioSrtpCipher
kEnumCounterAudioSslCipher
kEnumCounterVideoSrtpCipher
kEnumCounterVideoSslCipher
kEnumCounterDataSrtpCipher
kEnumCounterDataSslCipher
kEnumCounterDtlsHandshakeError
kEnumCounterIceRegathering
kEnumCounterIceRestart
kPeerConnectionEnumCounterMax
}
;
enum
PeerConnectionAddressFamilyCounter
{
kPeerConnection_IPv4
kPeerConnection_IPv6
kBestConnections_IPv4
kBestConnections_IPv6
kPeerConnectionAddressFamilyCounter_Max
}
;
#
define
kBoundary
kPeerConnectionAddressFamilyCounter_Max
typedef
PeerConnectionAddressFamilyCounter
PeerConnectionUMAMetricsCounter
;
enum
PeerConnectionMetricsName
{
kNetworkInterfaces_IPv4
kNetworkInterfaces_IPv6
kTimeToConnect
kLocalCandidates_IPv4
kLocalCandidates_IPv6
kPeerConnectionMetricsName_Max
}
;
typedef
PeerConnectionMetricsName
PeerConnectionUMAMetricsName
;
enum
IceCandidatePairType
{
kIceCandidatePairHostHost
kIceCandidatePairHostSrflx
kIceCandidatePairHostRelay
kIceCandidatePairHostPrflx
kIceCandidatePairSrflxHost
kIceCandidatePairSrflxSrflx
kIceCandidatePairSrflxRelay
kIceCandidatePairSrflxPrflx
kIceCandidatePairRelayHost
kIceCandidatePairRelaySrflx
kIceCandidatePairRelayRelay
kIceCandidatePairRelayPrflx
kIceCandidatePairPrflxHost
kIceCandidatePairPrflxSrflx
kIceCandidatePairPrflxRelay
kIceCandidatePairHostPrivateHostPrivate
kIceCandidatePairHostPrivateHostPublic
kIceCandidatePairHostPublicHostPrivate
kIceCandidatePairHostPublicHostPublic
kIceCandidatePairMax
}
;
class
MetricsObserverInterface
:
public
rtc
:
:
RefCountInterface
{
public
:
virtual
void
IncrementEnumCounter
(
PeerConnectionEnumCounterType
type
int
counter
int
counter_max
)
{
}
virtual
void
IncrementSparseEnumCounter
(
PeerConnectionEnumCounterType
type
int
counter
)
;
virtual
void
AddHistogramSample
(
PeerConnectionMetricsName
type
int
value
)
=
0
;
}
;
typedef
MetricsObserverInterface
UMAObserver
;
}
#
endif
