#
ifndef
API_RTPPARAMETERS_H_
#
define
API_RTPPARAMETERS_H_
#
include
<
string
>
#
include
<
unordered_map
>
#
include
<
vector
>
#
include
"
api
/
mediatypes
.
h
"
#
include
"
api
/
optional
.
h
"
namespace
webrtc
{
enum
class
FecMechanism
{
RED
RED_AND_ULPFEC
FLEXFEC
}
;
enum
class
RtcpFeedbackType
{
CCM
NACK
REMB
TRANSPORT_CC
}
;
enum
class
RtcpFeedbackMessageType
{
GENERIC_NACK
PLI
FIR
}
;
enum
class
DtxStatus
{
DISABLED
ENABLED
}
;
enum
class
DegradationPreference
{
MAINTAIN_FRAMERATE
MAINTAIN_RESOLUTION
BALANCED
}
;
enum
class
PriorityType
{
VERY_LOW
LOW
MEDIUM
HIGH
}
;
struct
RtcpFeedback
{
RtcpFeedbackType
type
=
RtcpFeedbackType
:
:
CCM
;
rtc
:
:
Optional
<
RtcpFeedbackMessageType
>
message_type
;
RtcpFeedback
(
)
;
explicit
RtcpFeedback
(
RtcpFeedbackType
type
)
;
RtcpFeedback
(
RtcpFeedbackType
type
RtcpFeedbackMessageType
message_type
)
;
~
RtcpFeedback
(
)
;
bool
operator
=
=
(
const
RtcpFeedback
&
o
)
const
{
return
type
=
=
o
.
type
&
&
message_type
=
=
o
.
message_type
;
}
bool
operator
!
=
(
const
RtcpFeedback
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
struct
RtpCodecCapability
{
RtpCodecCapability
(
)
;
~
RtpCodecCapability
(
)
;
std
:
:
string
mime_type
(
)
const
{
return
MediaTypeToString
(
kind
)
+
"
/
"
+
name
;
}
std
:
:
string
name
;
cricket
:
:
MediaType
kind
=
cricket
:
:
MEDIA_TYPE_AUDIO
;
rtc
:
:
Optional
<
int
>
clock_rate
;
rtc
:
:
Optional
<
int
>
preferred_payload_type
;
rtc
:
:
Optional
<
int
>
max_ptime
;
rtc
:
:
Optional
<
int
>
ptime
;
rtc
:
:
Optional
<
int
>
num_channels
;
std
:
:
vector
<
RtcpFeedback
>
rtcp_feedback
;
std
:
:
unordered_map
<
std
:
:
string
std
:
:
string
>
parameters
;
std
:
:
unordered_map
<
std
:
:
string
std
:
:
string
>
options
;
int
max_temporal_layer_extensions
=
0
;
int
max_spatial_layer_extensions
=
0
;
bool
svc_multi_stream_support
=
false
;
bool
operator
=
=
(
const
RtpCodecCapability
&
o
)
const
{
return
name
=
=
o
.
name
&
&
kind
=
=
o
.
kind
&
&
clock_rate
=
=
o
.
clock_rate
&
&
preferred_payload_type
=
=
o
.
preferred_payload_type
&
&
max_ptime
=
=
o
.
max_ptime
&
&
ptime
=
=
o
.
ptime
&
&
num_channels
=
=
o
.
num_channels
&
&
rtcp_feedback
=
=
o
.
rtcp_feedback
&
&
parameters
=
=
o
.
parameters
&
&
options
=
=
o
.
options
&
&
max_temporal_layer_extensions
=
=
o
.
max_temporal_layer_extensions
&
&
max_spatial_layer_extensions
=
=
o
.
max_spatial_layer_extensions
&
&
svc_multi_stream_support
=
=
o
.
svc_multi_stream_support
;
}
bool
operator
!
=
(
const
RtpCodecCapability
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
struct
RtpHeaderExtensionCapability
{
std
:
:
string
uri
;
rtc
:
:
Optional
<
int
>
preferred_id
;
bool
preferred_encrypt
=
false
;
RtpHeaderExtensionCapability
(
)
;
explicit
RtpHeaderExtensionCapability
(
const
std
:
:
string
&
uri
)
;
RtpHeaderExtensionCapability
(
const
std
:
:
string
&
uri
int
preferred_id
)
;
~
RtpHeaderExtensionCapability
(
)
;
bool
operator
=
=
(
const
RtpHeaderExtensionCapability
&
o
)
const
{
return
uri
=
=
o
.
uri
&
&
preferred_id
=
=
o
.
preferred_id
&
&
preferred_encrypt
=
=
o
.
preferred_encrypt
;
}
bool
operator
!
=
(
const
RtpHeaderExtensionCapability
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
struct
RtpExtension
{
RtpExtension
(
)
;
RtpExtension
(
const
std
:
:
string
&
uri
int
id
)
;
RtpExtension
(
const
std
:
:
string
&
uri
int
id
bool
encrypt
)
;
~
RtpExtension
(
)
;
std
:
:
string
ToString
(
)
const
;
bool
operator
=
=
(
const
RtpExtension
&
rhs
)
const
{
return
uri
=
=
rhs
.
uri
&
&
id
=
=
rhs
.
id
&
&
encrypt
=
=
rhs
.
encrypt
;
}
static
bool
IsSupportedForAudio
(
const
std
:
:
string
&
uri
)
;
static
bool
IsSupportedForVideo
(
const
std
:
:
string
&
uri
)
;
static
bool
IsEncryptionSupported
(
const
std
:
:
string
&
uri
)
;
static
const
RtpExtension
*
FindHeaderExtensionByUri
(
const
std
:
:
vector
<
RtpExtension
>
&
extensions
const
std
:
:
string
&
uri
)
;
static
std
:
:
vector
<
RtpExtension
>
FilterDuplicateNonEncrypted
(
const
std
:
:
vector
<
RtpExtension
>
&
extensions
)
;
static
const
char
kAudioLevelUri
[
]
;
static
const
int
kAudioLevelDefaultId
;
static
const
char
kTimestampOffsetUri
[
]
;
static
const
int
kTimestampOffsetDefaultId
;
static
const
char
kAbsSendTimeUri
[
]
;
static
const
int
kAbsSendTimeDefaultId
;
static
const
char
kVideoRotationUri
[
]
;
static
const
int
kVideoRotationDefaultId
;
static
const
char
kVideoContentTypeUri
[
]
;
static
const
int
kVideoContentTypeDefaultId
;
static
const
char
kVideoTimingUri
[
]
;
static
const
int
kVideoTimingDefaultId
;
static
const
char
kTransportSequenceNumberUri
[
]
;
static
const
int
kTransportSequenceNumberDefaultId
;
static
const
char
kPlayoutDelayUri
[
]
;
static
const
int
kPlayoutDelayDefaultId
;
static
const
char
kEncryptHeaderExtensionsUri
[
]
;
static
const
int
kMinId
;
static
const
int
kMaxId
;
std
:
:
string
uri
;
int
id
=
0
;
bool
encrypt
=
false
;
}
;
typedef
RtpExtension
RtpHeaderExtensionParameters
;
struct
RtpFecParameters
{
rtc
:
:
Optional
<
uint32_t
>
ssrc
;
FecMechanism
mechanism
=
FecMechanism
:
:
RED
;
RtpFecParameters
(
)
;
explicit
RtpFecParameters
(
FecMechanism
mechanism
)
;
RtpFecParameters
(
FecMechanism
mechanism
uint32_t
ssrc
)
;
~
RtpFecParameters
(
)
;
bool
operator
=
=
(
const
RtpFecParameters
&
o
)
const
{
return
ssrc
=
=
o
.
ssrc
&
&
mechanism
=
=
o
.
mechanism
;
}
bool
operator
!
=
(
const
RtpFecParameters
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
struct
RtpRtxParameters
{
rtc
:
:
Optional
<
uint32_t
>
ssrc
;
RtpRtxParameters
(
)
;
explicit
RtpRtxParameters
(
uint32_t
ssrc
)
;
~
RtpRtxParameters
(
)
;
bool
operator
=
=
(
const
RtpRtxParameters
&
o
)
const
{
return
ssrc
=
=
o
.
ssrc
;
}
bool
operator
!
=
(
const
RtpRtxParameters
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
struct
RtpEncodingParameters
{
RtpEncodingParameters
(
)
;
~
RtpEncodingParameters
(
)
;
rtc
:
:
Optional
<
uint32_t
>
ssrc
;
rtc
:
:
Optional
<
int
>
codec_payload_type
;
rtc
:
:
Optional
<
RtpFecParameters
>
fec
;
rtc
:
:
Optional
<
RtpRtxParameters
>
rtx
;
rtc
:
:
Optional
<
DtxStatus
>
dtx
;
rtc
:
:
Optional
<
PriorityType
>
priority
;
rtc
:
:
Optional
<
int
>
max_bitrate_bps
;
rtc
:
:
Optional
<
int
>
max_framerate
;
double
scale_resolution_down_by
=
1
.
0
;
double
scale_framerate_down_by
=
1
.
0
;
bool
active
=
true
;
std
:
:
string
rid
;
std
:
:
vector
<
std
:
:
string
>
dependency_rids
;
bool
operator
=
=
(
const
RtpEncodingParameters
&
o
)
const
{
return
ssrc
=
=
o
.
ssrc
&
&
codec_payload_type
=
=
o
.
codec_payload_type
&
&
fec
=
=
o
.
fec
&
&
rtx
=
=
o
.
rtx
&
&
dtx
=
=
o
.
dtx
&
&
priority
=
=
o
.
priority
&
&
max_bitrate_bps
=
=
o
.
max_bitrate_bps
&
&
max_framerate
=
=
o
.
max_framerate
&
&
scale_resolution_down_by
=
=
o
.
scale_resolution_down_by
&
&
scale_framerate_down_by
=
=
o
.
scale_framerate_down_by
&
&
active
=
=
o
.
active
&
&
rid
=
=
o
.
rid
&
&
dependency_rids
=
=
o
.
dependency_rids
;
}
bool
operator
!
=
(
const
RtpEncodingParameters
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
struct
RtpCodecParameters
{
RtpCodecParameters
(
)
;
~
RtpCodecParameters
(
)
;
std
:
:
string
mime_type
(
)
const
{
return
MediaTypeToString
(
kind
)
+
"
/
"
+
name
;
}
std
:
:
string
name
;
cricket
:
:
MediaType
kind
=
cricket
:
:
MEDIA_TYPE_AUDIO
;
int
payload_type
=
0
;
rtc
:
:
Optional
<
int
>
clock_rate
;
rtc
:
:
Optional
<
int
>
num_channels
;
rtc
:
:
Optional
<
int
>
max_ptime
;
rtc
:
:
Optional
<
int
>
ptime
;
std
:
:
vector
<
RtcpFeedback
>
rtcp_feedback
;
std
:
:
unordered_map
<
std
:
:
string
std
:
:
string
>
parameters
;
bool
operator
=
=
(
const
RtpCodecParameters
&
o
)
const
{
return
name
=
=
o
.
name
&
&
kind
=
=
o
.
kind
&
&
payload_type
=
=
o
.
payload_type
&
&
clock_rate
=
=
o
.
clock_rate
&
&
num_channels
=
=
o
.
num_channels
&
&
max_ptime
=
=
o
.
max_ptime
&
&
ptime
=
=
o
.
ptime
&
&
rtcp_feedback
=
=
o
.
rtcp_feedback
&
&
parameters
=
=
o
.
parameters
;
}
bool
operator
!
=
(
const
RtpCodecParameters
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
struct
RtpCapabilities
{
RtpCapabilities
(
)
;
~
RtpCapabilities
(
)
;
std
:
:
vector
<
RtpCodecCapability
>
codecs
;
std
:
:
vector
<
RtpHeaderExtensionCapability
>
header_extensions
;
std
:
:
vector
<
FecMechanism
>
fec
;
bool
operator
=
=
(
const
RtpCapabilities
&
o
)
const
{
return
codecs
=
=
o
.
codecs
&
&
header_extensions
=
=
o
.
header_extensions
&
&
fec
=
=
o
.
fec
;
}
bool
operator
!
=
(
const
RtpCapabilities
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
struct
RtpParameters
{
RtpParameters
(
)
;
~
RtpParameters
(
)
;
std
:
:
string
transaction_id
;
std
:
:
string
mid
;
std
:
:
vector
<
RtpCodecParameters
>
codecs
;
std
:
:
vector
<
RtpHeaderExtensionParameters
>
header_extensions
;
std
:
:
vector
<
RtpEncodingParameters
>
encodings
;
DegradationPreference
degradation_preference
=
DegradationPreference
:
:
BALANCED
;
bool
operator
=
=
(
const
RtpParameters
&
o
)
const
{
return
mid
=
=
o
.
mid
&
&
codecs
=
=
o
.
codecs
&
&
header_extensions
=
=
o
.
header_extensions
&
&
encodings
=
=
o
.
encodings
&
&
degradation_preference
=
=
o
.
degradation_preference
;
}
bool
operator
!
=
(
const
RtpParameters
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
}
#
endif
