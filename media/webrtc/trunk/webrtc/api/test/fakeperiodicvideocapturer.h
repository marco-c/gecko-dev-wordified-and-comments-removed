#
ifndef
WEBRTC_API_TEST_FAKEPERIODICVIDEOCAPTURER_H_
#
define
WEBRTC_API_TEST_FAKEPERIODICVIDEOCAPTURER_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
thread
.
h
"
#
include
"
webrtc
/
media
/
base
/
fakevideocapturer
.
h
"
namespace
webrtc
{
class
FakePeriodicVideoCapturer
:
public
cricket
:
:
FakeVideoCapturer
public
rtc
:
:
MessageHandler
{
public
:
FakePeriodicVideoCapturer
(
)
{
std
:
:
vector
<
cricket
:
:
VideoFormat
>
formats
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
1280
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
360
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
160
120
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
ResetSupportedFormats
(
formats
)
;
}
virtual
cricket
:
:
CaptureState
Start
(
const
cricket
:
:
VideoFormat
&
format
)
{
cricket
:
:
CaptureState
state
=
FakeVideoCapturer
:
:
Start
(
format
)
;
if
(
state
!
=
cricket
:
:
CS_FAILED
)
{
rtc
:
:
Thread
:
:
Current
(
)
-
>
Post
(
RTC_FROM_HERE
this
MSG_CREATEFRAME
)
;
}
return
state
;
}
virtual
void
Stop
(
)
{
rtc
:
:
Thread
:
:
Current
(
)
-
>
Clear
(
this
)
;
}
virtual
void
OnMessage
(
rtc
:
:
Message
*
msg
)
{
if
(
msg
-
>
message_id
=
=
MSG_CREATEFRAME
)
{
if
(
IsRunning
(
)
)
{
CaptureFrame
(
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
PostDelayed
(
RTC_FROM_HERE
static_cast
<
int
>
(
GetCaptureFormat
(
)
-
>
interval
/
rtc
:
:
kNumNanosecsPerMillisec
)
this
MSG_CREATEFRAME
)
;
}
}
}
private
:
enum
{
MSG_CREATEFRAME
=
0xFF
}
;
}
;
}
#
endif
