#
ifndef
WEBRTC_API_TEST_MOCK_WEBRTCSESSION_H_
#
define
WEBRTC_API_TEST_MOCK_WEBRTCSESSION_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
webrtc
/
api
/
webrtcsession
.
h
"
#
include
"
webrtc
/
media
/
sctp
/
sctptransportinternal
.
h
"
#
include
"
webrtc
/
test
/
gmock
.
h
"
namespace
webrtc
{
class
MockWebRtcSession
:
public
webrtc
:
:
WebRtcSession
{
public
:
explicit
MockWebRtcSession
(
MediaControllerInterface
*
media_controller
)
:
WebRtcSession
(
media_controller
rtc
:
:
Thread
:
:
Current
(
)
rtc
:
:
Thread
:
:
Current
(
)
rtc
:
:
Thread
:
:
Current
(
)
nullptr
std
:
:
unique_ptr
<
cricket
:
:
TransportController
>
(
new
cricket
:
:
TransportController
(
rtc
:
:
Thread
:
:
Current
(
)
rtc
:
:
Thread
:
:
Current
(
)
nullptr
)
)
std
:
:
unique_ptr
<
cricket
:
:
SctpTransportInternalFactory
>
(
)
)
{
}
MOCK_METHOD0
(
voice_channel
cricket
:
:
VoiceChannel
*
(
)
)
;
MOCK_METHOD0
(
video_channel
cricket
:
:
VideoChannel
*
(
)
)
;
MOCK_METHOD2
(
GetLocalTrackIdBySsrc
bool
(
uint32_t
std
:
:
string
*
)
)
;
MOCK_METHOD2
(
GetRemoteTrackIdBySsrc
bool
(
uint32_t
std
:
:
string
*
)
)
;
MOCK_METHOD1
(
GetStats
std
:
:
unique_ptr
<
SessionStats
>
(
const
ChannelNamePairs
&
)
)
;
MOCK_METHOD2
(
GetLocalCertificate
bool
(
const
std
:
:
string
&
transport_name
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
*
certificate
)
)
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificate
>
GetRemoteSSLCertificate
(
const
std
:
:
string
&
transport_name
)
{
return
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificate
>
(
GetRemoteSSLCertificate_ReturnsRawPointer
(
transport_name
)
)
;
}
MOCK_METHOD1
(
GetRemoteSSLCertificate_ReturnsRawPointer
rtc
:
:
SSLCertificate
*
(
const
std
:
:
string
&
transport_name
)
)
;
}
;
}
#
endif
