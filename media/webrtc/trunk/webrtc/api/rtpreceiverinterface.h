#
ifndef
API_RTPRECEIVERINTERFACE_H_
#
define
API_RTPRECEIVERINTERFACE_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
mediastreaminterface
.
h
"
#
include
"
api
/
mediatypes
.
h
"
#
include
"
api
/
proxy
.
h
"
#
include
"
api
/
rtpparameters
.
h
"
#
include
"
rtc_base
/
refcount
.
h
"
#
include
"
rtc_base
/
scoped_ref_ptr
.
h
"
namespace
webrtc
{
enum
class
RtpSourceType
{
SSRC
CSRC
}
;
class
RtpSource
{
public
:
RtpSource
(
)
=
delete
;
RtpSource
(
int64_t
timestamp_ms
uint32_t
source_id
RtpSourceType
source_type
)
:
timestamp_ms_
(
timestamp_ms
)
source_id_
(
source_id
)
source_type_
(
source_type
)
{
}
RtpSource
(
int64_t
timestamp_ms
uint32_t
source_id
RtpSourceType
source_type
uint8_t
audio_level
)
:
timestamp_ms_
(
timestamp_ms
)
source_id_
(
source_id
)
source_type_
(
source_type
)
audio_level_
(
audio_level
)
{
}
int64_t
timestamp_ms
(
)
const
{
return
timestamp_ms_
;
}
void
update_timestamp_ms
(
int64_t
timestamp_ms
)
{
RTC_DCHECK_LE
(
timestamp_ms_
timestamp_ms
)
;
timestamp_ms_
=
timestamp_ms
;
}
uint32_t
source_id
(
)
const
{
return
source_id_
;
}
RtpSourceType
source_type
(
)
const
{
return
source_type_
;
}
rtc
:
:
Optional
<
uint8_t
>
audio_level
(
)
const
{
return
audio_level_
;
}
void
set_audio_level
(
const
rtc
:
:
Optional
<
uint8_t
>
&
level
)
{
audio_level_
=
level
;
}
bool
operator
=
=
(
const
RtpSource
&
o
)
const
{
return
timestamp_ms_
=
=
o
.
timestamp_ms
(
)
&
&
source_id_
=
=
o
.
source_id
(
)
&
&
source_type_
=
=
o
.
source_type
(
)
&
&
audio_level_
=
=
o
.
audio_level_
;
}
private
:
int64_t
timestamp_ms_
;
uint32_t
source_id_
;
RtpSourceType
source_type_
;
rtc
:
:
Optional
<
uint8_t
>
audio_level_
;
}
;
class
RtpReceiverObserverInterface
{
public
:
virtual
void
OnFirstPacketReceived
(
cricket
:
:
MediaType
media_type
)
=
0
;
protected
:
virtual
~
RtpReceiverObserverInterface
(
)
{
}
}
;
class
RtpReceiverInterface
:
public
rtc
:
:
RefCountInterface
{
public
:
virtual
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
(
)
const
=
0
;
virtual
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
MediaStreamInterface
>
>
streams
(
)
const
{
return
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
MediaStreamInterface
>
>
(
)
;
}
virtual
cricket
:
:
MediaType
media_type
(
)
const
=
0
;
virtual
std
:
:
string
id
(
)
const
=
0
;
virtual
RtpParameters
GetParameters
(
)
const
=
0
;
virtual
bool
SetParameters
(
const
RtpParameters
&
parameters
)
=
0
;
virtual
void
SetObserver
(
RtpReceiverObserverInterface
*
observer
)
=
0
;
virtual
std
:
:
vector
<
RtpSource
>
GetSources
(
)
const
{
return
std
:
:
vector
<
RtpSource
>
(
)
;
}
protected
:
virtual
~
RtpReceiverInterface
(
)
{
}
}
;
BEGIN_SIGNALING_PROXY_MAP
(
RtpReceiver
)
PROXY_SIGNALING_THREAD_DESTRUCTOR
(
)
PROXY_CONSTMETHOD0
(
rtc
:
:
scoped_refptr
<
MediaStreamTrackInterface
>
track
)
PROXY_CONSTMETHOD0
(
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
MediaStreamInterface
>
>
streams
)
PROXY_CONSTMETHOD0
(
cricket
:
:
MediaType
media_type
)
PROXY_CONSTMETHOD0
(
std
:
:
string
id
)
PROXY_CONSTMETHOD0
(
RtpParameters
GetParameters
)
;
PROXY_METHOD1
(
bool
SetParameters
const
RtpParameters
&
)
PROXY_METHOD1
(
void
SetObserver
RtpReceiverObserverInterface
*
)
;
PROXY_CONSTMETHOD0
(
std
:
:
vector
<
RtpSource
>
GetSources
)
;
END_PROXY_MAP
(
)
}
#
endif
