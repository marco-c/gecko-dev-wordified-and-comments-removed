#
ifndef
API_JSEPSESSIONDESCRIPTION_H_
#
define
API_JSEPSESSIONDESCRIPTION_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
candidate
.
h
"
#
include
"
api
/
jsep
.
h
"
#
include
"
api
/
jsepicecandidate
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
cricket
{
class
SessionDescription
;
}
namespace
webrtc
{
class
JsepSessionDescription
:
public
SessionDescriptionInterface
{
public
:
explicit
JsepSessionDescription
(
const
std
:
:
string
&
type
)
;
virtual
~
JsepSessionDescription
(
)
;
bool
Initialize
(
cricket
:
:
SessionDescription
*
description
const
std
:
:
string
&
session_id
const
std
:
:
string
&
session_version
)
;
virtual
cricket
:
:
SessionDescription
*
description
(
)
{
return
description_
.
get
(
)
;
}
virtual
const
cricket
:
:
SessionDescription
*
description
(
)
const
{
return
description_
.
get
(
)
;
}
virtual
std
:
:
string
session_id
(
)
const
{
return
session_id_
;
}
virtual
std
:
:
string
session_version
(
)
const
{
return
session_version_
;
}
virtual
std
:
:
string
type
(
)
const
{
return
type_
;
}
void
set_type
(
const
std
:
:
string
&
type
)
{
type_
=
type
;
}
virtual
bool
AddCandidate
(
const
IceCandidateInterface
*
candidate
)
;
virtual
size_t
RemoveCandidates
(
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
candidates
)
;
virtual
size_t
number_of_mediasections
(
)
const
;
virtual
const
IceCandidateCollection
*
candidates
(
size_t
mediasection_index
)
const
;
virtual
bool
ToString
(
std
:
:
string
*
out
)
const
;
static
const
int
kDefaultVideoCodecId
;
static
const
char
kDefaultVideoCodecName
[
]
;
private
:
std
:
:
unique_ptr
<
cricket
:
:
SessionDescription
>
description_
;
std
:
:
string
session_id_
;
std
:
:
string
session_version_
;
std
:
:
string
type_
;
std
:
:
vector
<
JsepCandidateCollection
>
candidate_collection_
;
bool
GetMediasectionIndex
(
const
IceCandidateInterface
*
candidate
size_t
*
index
)
;
int
GetMediasectionIndex
(
const
cricket
:
:
Candidate
&
candidate
)
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
JsepSessionDescription
)
;
}
;
}
#
endif
