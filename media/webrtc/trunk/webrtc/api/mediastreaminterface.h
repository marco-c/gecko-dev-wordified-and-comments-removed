#
ifndef
API_MEDIASTREAMINTERFACE_H_
#
define
API_MEDIASTREAMINTERFACE_H_
#
include
<
stddef
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
optional
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
media
/
base
/
videosinkinterface
.
h
"
#
include
"
media
/
base
/
videosourceinterface
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing_statistics
.
h
"
#
include
"
rtc_base
/
ratetracker
.
h
"
#
include
"
rtc_base
/
refcount
.
h
"
#
include
"
rtc_base
/
scoped_ref_ptr
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
timeutils
.
h
"
namespace
webrtc
{
class
ObserverInterface
{
public
:
virtual
void
OnChanged
(
)
=
0
;
protected
:
virtual
~
ObserverInterface
(
)
{
}
}
;
class
NotifierInterface
{
public
:
virtual
void
RegisterObserver
(
ObserverInterface
*
observer
)
=
0
;
virtual
void
UnregisterObserver
(
ObserverInterface
*
observer
)
=
0
;
virtual
~
NotifierInterface
(
)
{
}
}
;
class
MediaSourceInterface
:
public
rtc
:
:
RefCountInterface
public
NotifierInterface
{
public
:
enum
SourceState
{
kInitializing
kLive
kEnded
kMuted
}
;
virtual
SourceState
state
(
)
const
=
0
;
virtual
bool
remote
(
)
const
=
0
;
protected
:
virtual
~
MediaSourceInterface
(
)
{
}
}
;
class
MediaStreamTrackInterface
:
public
rtc
:
:
RefCountInterface
public
NotifierInterface
{
public
:
enum
TrackState
{
kLive
kEnded
}
;
static
const
char
kAudioKind
[
]
;
static
const
char
kVideoKind
[
]
;
virtual
std
:
:
string
kind
(
)
const
=
0
;
virtual
std
:
:
string
id
(
)
const
=
0
;
virtual
bool
enabled
(
)
const
=
0
;
virtual
bool
set_enabled
(
bool
enable
)
=
0
;
virtual
TrackState
state
(
)
const
=
0
;
protected
:
virtual
~
MediaStreamTrackInterface
(
)
{
}
}
;
class
VideoTrackSourceInterface
:
public
MediaSourceInterface
public
rtc
:
:
VideoSourceInterface
<
VideoFrame
>
{
public
:
struct
Stats
{
int
input_width
;
int
input_height
;
}
;
virtual
bool
is_screencast
(
)
const
=
0
;
virtual
rtc
:
:
Optional
<
bool
>
needs_denoising
(
)
const
=
0
;
virtual
bool
GetStats
(
Stats
*
stats
)
=
0
;
protected
:
virtual
~
VideoTrackSourceInterface
(
)
{
}
}
;
class
VideoTrackInterface
:
public
MediaStreamTrackInterface
public
rtc
:
:
VideoSourceInterface
<
VideoFrame
>
{
public
:
enum
class
ContentHint
{
kNone
kFluid
kDetailed
}
;
void
AddOrUpdateSink
(
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
sink
const
rtc
:
:
VideoSinkWants
&
wants
)
override
{
}
void
RemoveSink
(
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
sink
)
override
{
}
virtual
VideoTrackSourceInterface
*
GetSource
(
)
const
=
0
;
virtual
ContentHint
content_hint
(
)
const
{
return
ContentHint
:
:
kNone
;
}
virtual
void
set_content_hint
(
ContentHint
hint
)
{
}
protected
:
virtual
~
VideoTrackInterface
(
)
{
}
}
;
class
AudioTrackSinkInterface
{
public
:
virtual
void
OnData
(
const
void
*
audio_data
int
bits_per_sample
int
sample_rate
size_t
number_of_channels
size_t
number_of_frames
)
=
0
;
protected
:
virtual
~
AudioTrackSinkInterface
(
)
{
}
}
;
class
AudioSourceInterface
:
public
MediaSourceInterface
{
public
:
class
AudioObserver
{
public
:
virtual
void
OnSetVolume
(
double
volume
)
=
0
;
protected
:
virtual
~
AudioObserver
(
)
{
}
}
;
virtual
void
SetVolume
(
double
volume
)
{
}
virtual
void
RegisterAudioObserver
(
AudioObserver
*
observer
)
{
}
virtual
void
UnregisterAudioObserver
(
AudioObserver
*
observer
)
{
}
virtual
void
AddSink
(
AudioTrackSinkInterface
*
sink
)
{
}
virtual
void
RemoveSink
(
AudioTrackSinkInterface
*
sink
)
{
}
}
;
class
AudioProcessorInterface
:
public
rtc
:
:
RefCountInterface
{
public
:
struct
AudioProcessorStats
{
AudioProcessorStats
(
)
:
typing_noise_detected
(
false
)
echo_return_loss
(
0
)
echo_return_loss_enhancement
(
0
)
echo_delay_median_ms
(
0
)
echo_delay_std_ms
(
0
)
aec_quality_min
(
0
.
0
)
residual_echo_likelihood
(
0
.
0f
)
residual_echo_likelihood_recent_max
(
0
.
0f
)
aec_divergent_filter_fraction
(
0
.
0
)
{
}
~
AudioProcessorStats
(
)
{
}
bool
typing_noise_detected
;
int
echo_return_loss
;
int
echo_return_loss_enhancement
;
int
echo_delay_median_ms
;
int
echo_delay_std_ms
;
float
aec_quality_min
;
float
residual_echo_likelihood
;
float
residual_echo_likelihood_recent_max
;
float
aec_divergent_filter_fraction
;
}
;
struct
AudioProcessorStatistics
{
bool
typing_noise_detected
=
false
;
AudioProcessingStats
apm_statistics
;
}
;
virtual
void
GetStats
(
AudioProcessorStats
*
stats
)
=
0
;
virtual
AudioProcessorStatistics
GetStats
(
bool
has_remote_tracks
)
;
protected
:
virtual
~
AudioProcessorInterface
(
)
{
}
}
;
class
AudioTrackInterface
:
public
MediaStreamTrackInterface
{
public
:
virtual
AudioSourceInterface
*
GetSource
(
)
const
=
0
;
virtual
void
AddSink
(
AudioTrackSinkInterface
*
sink
)
=
0
;
virtual
void
RemoveSink
(
AudioTrackSinkInterface
*
sink
)
=
0
;
virtual
bool
GetSignalLevel
(
int
*
level
)
{
return
false
;
}
virtual
rtc
:
:
scoped_refptr
<
AudioProcessorInterface
>
GetAudioProcessor
(
)
{
return
nullptr
;
}
protected
:
virtual
~
AudioTrackInterface
(
)
{
}
}
;
typedef
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
AudioTrackInterface
>
>
AudioTrackVector
;
typedef
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
VideoTrackInterface
>
>
VideoTrackVector
;
class
MediaStreamInterface
:
public
rtc
:
:
RefCountInterface
public
NotifierInterface
{
public
:
virtual
std
:
:
string
label
(
)
const
=
0
;
virtual
AudioTrackVector
GetAudioTracks
(
)
=
0
;
virtual
VideoTrackVector
GetVideoTracks
(
)
=
0
;
virtual
rtc
:
:
scoped_refptr
<
AudioTrackInterface
>
FindAudioTrack
(
const
std
:
:
string
&
track_id
)
=
0
;
virtual
rtc
:
:
scoped_refptr
<
VideoTrackInterface
>
FindVideoTrack
(
const
std
:
:
string
&
track_id
)
=
0
;
virtual
bool
AddTrack
(
AudioTrackInterface
*
track
)
=
0
;
virtual
bool
AddTrack
(
VideoTrackInterface
*
track
)
=
0
;
virtual
bool
RemoveTrack
(
AudioTrackInterface
*
track
)
=
0
;
virtual
bool
RemoveTrack
(
VideoTrackInterface
*
track
)
=
0
;
protected
:
virtual
~
MediaStreamInterface
(
)
{
}
}
;
}
#
endif
