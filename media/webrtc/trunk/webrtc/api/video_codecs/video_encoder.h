#
ifndef
API_VIDEO_CODECS_VIDEO_ENCODER_H_
#
define
API_VIDEO_CODECS_VIDEO_ENCODER_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
optional
.
h
"
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
common_types
.
h
"
#
include
"
common_video
/
include
/
video_frame
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
RTPFragmentationHeader
;
struct
CodecSpecificInfo
;
class
VideoCodec
;
class
EncodedImageCallback
{
public
:
virtual
~
EncodedImageCallback
(
)
{
}
struct
Result
{
enum
Error
{
OK
ERROR_SEND_FAILED
}
;
explicit
Result
(
Error
error
)
:
error
(
error
)
{
}
Result
(
Error
error
uint32_t
frame_id
)
:
error
(
error
)
frame_id
(
frame_id
)
{
}
Error
error
;
uint32_t
frame_id
=
0
;
bool
drop_next_frame
=
false
;
}
;
enum
class
DropReason
:
uint8_t
{
kDroppedByMediaOptimizations
kDroppedByEncoder
}
;
virtual
Result
OnEncodedImage
(
const
EncodedImage
&
encoded_image
const
CodecSpecificInfo
*
codec_specific_info
const
RTPFragmentationHeader
*
fragmentation
)
=
0
;
virtual
void
OnDroppedFrame
(
)
{
}
virtual
void
OnDroppedFrame
(
DropReason
reason
)
{
}
}
;
class
VideoEncoder
{
public
:
struct
QpThresholds
{
QpThresholds
(
int
l
int
h
)
:
low
(
l
)
high
(
h
)
{
}
QpThresholds
(
)
:
low
(
-
1
)
high
(
-
1
)
{
}
int
low
;
int
high
;
}
;
struct
ScalingSettings
{
ScalingSettings
(
bool
on
int
low
int
high
)
;
ScalingSettings
(
bool
on
int
low
int
high
int
min_pixels
)
;
ScalingSettings
(
bool
on
int
min_pixels
)
;
explicit
ScalingSettings
(
bool
on
)
;
ScalingSettings
(
const
ScalingSettings
&
)
;
~
ScalingSettings
(
)
;
const
bool
enabled
;
const
rtc
:
:
Optional
<
QpThresholds
>
thresholds
;
const
int
min_pixels_per_frame
=
320
*
180
;
}
;
static
VideoCodecVP8
GetDefaultVp8Settings
(
)
;
static
VideoCodecVP9
GetDefaultVp9Settings
(
)
;
static
VideoCodecH264
GetDefaultH264Settings
(
)
;
virtual
~
VideoEncoder
(
)
{
}
virtual
int32_t
InitEncode
(
const
VideoCodec
*
codec_settings
int32_t
number_of_cores
size_t
max_payload_size
)
=
0
;
virtual
int32_t
RegisterEncodeCompleteCallback
(
EncodedImageCallback
*
callback
)
=
0
;
virtual
int32_t
Release
(
)
=
0
;
virtual
int32_t
Encode
(
const
VideoFrame
&
frame
const
CodecSpecificInfo
*
codec_specific_info
const
std
:
:
vector
<
FrameType
>
*
frame_types
)
=
0
;
virtual
int32_t
SetChannelParameters
(
uint32_t
packet_loss
int64_t
rtt
)
=
0
;
virtual
int32_t
SetRates
(
uint32_t
bitrate
uint32_t
framerate
)
;
virtual
int32_t
SetRateAllocation
(
const
BitrateAllocation
&
allocation
uint32_t
framerate
)
;
virtual
ScalingSettings
GetScalingSettings
(
)
const
;
virtual
int32_t
SetPeriodicKeyFrames
(
bool
enable
)
;
virtual
bool
SupportsNativeHandle
(
)
const
;
virtual
const
char
*
ImplementationName
(
)
const
;
}
;
}
#
endif
