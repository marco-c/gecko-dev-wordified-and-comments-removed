#
ifndef
API_JSEP_H_
#
define
API_JSEP_H_
#
include
<
stddef
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
rtc_base
/
refcount
.
h
"
namespace
cricket
{
class
Candidate
;
class
SessionDescription
;
}
namespace
webrtc
{
struct
SdpParseError
{
public
:
std
:
:
string
line
;
std
:
:
string
description
;
}
;
class
IceCandidateInterface
{
public
:
virtual
~
IceCandidateInterface
(
)
{
}
virtual
std
:
:
string
sdp_mid
(
)
const
=
0
;
virtual
int
sdp_mline_index
(
)
const
=
0
;
virtual
const
cricket
:
:
Candidate
&
candidate
(
)
const
=
0
;
virtual
std
:
:
string
server_url
(
)
const
{
return
"
"
;
}
virtual
bool
ToString
(
std
:
:
string
*
out
)
const
=
0
;
}
;
IceCandidateInterface
*
CreateIceCandidate
(
const
std
:
:
string
&
sdp_mid
int
sdp_mline_index
const
std
:
:
string
&
sdp
SdpParseError
*
error
)
;
class
IceCandidateCollection
{
public
:
virtual
~
IceCandidateCollection
(
)
{
}
virtual
size_t
count
(
)
const
=
0
;
virtual
bool
HasCandidate
(
const
IceCandidateInterface
*
candidate
)
const
=
0
;
virtual
const
IceCandidateInterface
*
at
(
size_t
index
)
const
=
0
;
}
;
class
SessionDescriptionInterface
{
public
:
static
const
char
kOffer
[
]
;
static
const
char
kPrAnswer
[
]
;
static
const
char
kAnswer
[
]
;
virtual
~
SessionDescriptionInterface
(
)
{
}
virtual
cricket
:
:
SessionDescription
*
description
(
)
=
0
;
virtual
const
cricket
:
:
SessionDescription
*
description
(
)
const
=
0
;
virtual
std
:
:
string
session_id
(
)
const
=
0
;
virtual
std
:
:
string
session_version
(
)
const
=
0
;
virtual
std
:
:
string
type
(
)
const
=
0
;
virtual
bool
AddCandidate
(
const
IceCandidateInterface
*
candidate
)
=
0
;
virtual
size_t
RemoveCandidates
(
const
std
:
:
vector
<
cricket
:
:
Candidate
>
&
candidates
)
{
return
0
;
}
virtual
size_t
number_of_mediasections
(
)
const
=
0
;
virtual
const
IceCandidateCollection
*
candidates
(
size_t
mediasection_index
)
const
=
0
;
virtual
bool
ToString
(
std
:
:
string
*
out
)
const
=
0
;
}
;
SessionDescriptionInterface
*
CreateSessionDescription
(
const
std
:
:
string
&
type
const
std
:
:
string
&
sdp
SdpParseError
*
error
)
;
class
CreateSessionDescriptionObserver
:
public
rtc
:
:
RefCountInterface
{
public
:
virtual
void
OnSuccess
(
SessionDescriptionInterface
*
desc
)
=
0
;
virtual
void
OnFailure
(
const
std
:
:
string
&
error
)
=
0
;
protected
:
~
CreateSessionDescriptionObserver
(
)
{
}
}
;
class
SetSessionDescriptionObserver
:
public
rtc
:
:
RefCountInterface
{
public
:
virtual
void
OnSuccess
(
)
=
0
;
virtual
void
OnFailure
(
const
std
:
:
string
&
error
)
=
0
;
protected
:
~
SetSessionDescriptionObserver
(
)
{
}
}
;
}
#
endif
