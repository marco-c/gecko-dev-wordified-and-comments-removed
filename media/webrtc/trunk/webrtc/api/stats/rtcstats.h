#
ifndef
API_STATS_RTCSTATS_H_
#
define
API_STATS_RTCSTATS_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
class
RTCStatsMemberInterface
;
class
RTCStats
{
public
:
RTCStats
(
const
std
:
:
string
&
id
int64_t
timestamp_us
)
:
id_
(
id
)
timestamp_us_
(
timestamp_us
)
{
}
RTCStats
(
std
:
:
string
&
&
id
int64_t
timestamp_us
)
:
id_
(
std
:
:
move
(
id
)
)
timestamp_us_
(
timestamp_us
)
{
}
virtual
~
RTCStats
(
)
{
}
virtual
std
:
:
unique_ptr
<
RTCStats
>
copy
(
)
const
=
0
;
const
std
:
:
string
&
id
(
)
const
{
return
id_
;
}
int64_t
timestamp_us
(
)
const
{
return
timestamp_us_
;
}
virtual
const
char
*
type
(
)
const
=
0
;
std
:
:
vector
<
const
RTCStatsMemberInterface
*
>
Members
(
)
const
;
bool
operator
=
=
(
const
RTCStats
&
other
)
const
;
bool
operator
!
=
(
const
RTCStats
&
other
)
const
;
std
:
:
string
ToJson
(
)
const
;
template
<
typename
T
>
const
T
&
cast_to
(
)
const
{
RTC_DCHECK_EQ
(
type
(
)
T
:
:
kType
)
;
return
static_cast
<
const
T
&
>
(
*
this
)
;
}
protected
:
virtual
std
:
:
vector
<
const
RTCStatsMemberInterface
*
>
MembersOfThisObjectAndAncestors
(
size_t
additional_capacity
)
const
;
std
:
:
string
const
id_
;
int64_t
timestamp_us_
;
}
;
#
define
WEBRTC_RTCSTATS_DECL
(
)
\
public
:
\
static
const
char
kType
[
]
;
\
\
std
:
:
unique_ptr
<
webrtc
:
:
RTCStats
>
copy
(
)
const
override
;
\
const
char
*
type
(
)
const
override
;
\
\
protected
:
\
std
:
:
vector
<
const
webrtc
:
:
RTCStatsMemberInterface
*
>
\
MembersOfThisObjectAndAncestors
(
\
size_t
local_var_additional_capacity
)
const
override
;
\
\
public
:
#
define
WEBRTC_RTCSTATS_IMPL
(
this_class
parent_class
type_str
.
.
.
)
\
const
char
this_class
:
:
kType
[
]
=
type_str
;
\
\
std
:
:
unique_ptr
<
webrtc
:
:
RTCStats
>
this_class
:
:
copy
(
)
const
{
\
return
std
:
:
unique_ptr
<
webrtc
:
:
RTCStats
>
(
new
this_class
(
*
this
)
)
;
\
}
\
\
const
char
*
this_class
:
:
type
(
)
const
{
\
return
this_class
:
:
kType
;
\
}
\
\
std
:
:
vector
<
const
webrtc
:
:
RTCStatsMemberInterface
*
>
\
this_class
:
:
MembersOfThisObjectAndAncestors
(
\
size_t
local_var_additional_capacity
)
const
{
\
const
webrtc
:
:
RTCStatsMemberInterface
*
local_var_members
[
]
=
{
\
__VA_ARGS__
\
}
;
\
size_t
local_var_members_count
=
\
sizeof
(
local_var_members
)
/
sizeof
(
local_var_members
[
0
]
)
;
\
std
:
:
vector
<
const
webrtc
:
:
RTCStatsMemberInterface
*
>
local_var_members_vec
=
\
parent_class
:
:
MembersOfThisObjectAndAncestors
(
\
local_var_members_count
+
local_var_additional_capacity
)
;
\
RTC_DCHECK_GE
(
\
local_var_members_vec
.
capacity
(
)
-
local_var_members_vec
.
size
(
)
\
local_var_members_count
+
local_var_additional_capacity
)
;
\
local_var_members_vec
.
insert
(
local_var_members_vec
.
end
(
)
\
&
local_var_members
[
0
]
\
&
local_var_members
[
local_var_members_count
]
)
;
\
return
local_var_members_vec
;
\
}
class
RTCStatsMemberInterface
{
public
:
enum
Type
{
kBool
kInt32
kUint32
kInt64
kUint64
kDouble
kString
kSequenceBool
kSequenceInt32
kSequenceUint32
kSequenceInt64
kSequenceUint64
kSequenceDouble
kSequenceString
}
;
virtual
~
RTCStatsMemberInterface
(
)
{
}
const
char
*
name
(
)
const
{
return
name_
;
}
virtual
Type
type
(
)
const
=
0
;
virtual
bool
is_sequence
(
)
const
=
0
;
virtual
bool
is_string
(
)
const
=
0
;
bool
is_defined
(
)
const
{
return
is_defined_
;
}
virtual
bool
operator
=
=
(
const
RTCStatsMemberInterface
&
other
)
const
=
0
;
bool
operator
!
=
(
const
RTCStatsMemberInterface
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
virtual
std
:
:
string
ValueToString
(
)
const
=
0
;
virtual
std
:
:
string
ValueToJson
(
)
const
=
0
;
template
<
typename
T
>
const
T
&
cast_to
(
)
const
{
RTC_DCHECK_EQ
(
type
(
)
T
:
:
kType
)
;
return
static_cast
<
const
T
&
>
(
*
this
)
;
}
protected
:
RTCStatsMemberInterface
(
const
char
*
name
bool
is_defined
)
:
name_
(
name
)
is_defined_
(
is_defined
)
{
}
const
char
*
const
name_
;
bool
is_defined_
;
}
;
template
<
typename
T
>
class
RTCStatsMember
:
public
RTCStatsMemberInterface
{
public
:
static
const
Type
kType
;
explicit
RTCStatsMember
(
const
char
*
name
)
:
RTCStatsMemberInterface
(
name
false
)
value_
(
)
{
}
RTCStatsMember
(
const
char
*
name
const
T
&
value
)
:
RTCStatsMemberInterface
(
name
true
)
value_
(
value
)
{
}
RTCStatsMember
(
const
char
*
name
T
&
&
value
)
:
RTCStatsMemberInterface
(
name
true
)
value_
(
std
:
:
move
(
value
)
)
{
}
explicit
RTCStatsMember
(
const
RTCStatsMember
<
T
>
&
other
)
:
RTCStatsMemberInterface
(
other
.
name_
other
.
is_defined_
)
value_
(
other
.
value_
)
{
}
explicit
RTCStatsMember
(
RTCStatsMember
<
T
>
&
&
other
)
:
RTCStatsMemberInterface
(
other
.
name_
other
.
is_defined_
)
value_
(
std
:
:
move
(
other
.
value_
)
)
{
}
Type
type
(
)
const
override
{
return
kType
;
}
bool
is_sequence
(
)
const
override
;
bool
is_string
(
)
const
override
;
bool
operator
=
=
(
const
RTCStatsMemberInterface
&
other
)
const
override
{
if
(
type
(
)
!
=
other
.
type
(
)
)
return
false
;
const
RTCStatsMember
<
T
>
&
other_t
=
static_cast
<
const
RTCStatsMember
<
T
>
&
>
(
other
)
;
if
(
!
is_defined_
)
return
!
other_t
.
is_defined
(
)
;
if
(
!
other
.
is_defined
(
)
)
return
false
;
return
value_
=
=
other_t
.
value_
;
}
std
:
:
string
ValueToString
(
)
const
override
;
std
:
:
string
ValueToJson
(
)
const
override
;
T
&
operator
=
(
const
T
&
value
)
{
value_
=
value
;
is_defined_
=
true
;
return
value_
;
}
T
&
operator
=
(
const
T
&
&
value
)
{
value_
=
std
:
:
move
(
value
)
;
is_defined_
=
true
;
return
value_
;
}
T
&
operator
=
(
const
RTCStatsMember
<
T
>
&
other
)
{
RTC_DCHECK
(
other
.
is_defined_
)
;
value_
=
other
.
is_defined_
;
is_defined_
=
true
;
return
value_
;
}
T
&
operator
*
(
)
{
RTC_DCHECK
(
is_defined_
)
;
return
value_
;
}
const
T
&
operator
*
(
)
const
{
RTC_DCHECK
(
is_defined_
)
;
return
value_
;
}
T
*
operator
-
>
(
)
{
RTC_DCHECK
(
is_defined_
)
;
return
&
value_
;
}
const
T
*
operator
-
>
(
)
const
{
RTC_DCHECK
(
is_defined_
)
;
return
&
value_
;
}
private
:
T
value_
;
}
;
}
#
endif
