#
ifndef
WEBRTC_API_VIDEO_I420_BUFFER_H_
#
define
WEBRTC_API_VIDEO_I420_BUFFER_H_
#
include
<
memory
>
#
include
"
webrtc
/
api
/
video
/
video_rotation
.
h
"
#
include
"
webrtc
/
api
/
video
/
video_frame_buffer
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
aligned_malloc
.
h
"
namespace
webrtc
{
class
I420Buffer
:
public
VideoFrameBuffer
{
public
:
static
rtc
:
:
scoped_refptr
<
I420Buffer
>
Create
(
int
width
int
height
)
;
static
rtc
:
:
scoped_refptr
<
I420Buffer
>
Create
(
int
width
int
height
int
stride_y
int
stride_u
int
stride_v
)
;
static
rtc
:
:
scoped_refptr
<
I420Buffer
>
Copy
(
const
VideoFrameBuffer
&
buffer
)
;
static
rtc
:
:
scoped_refptr
<
I420Buffer
>
Copy
(
int
width
int
height
const
uint8_t
*
data_y
int
stride_y
const
uint8_t
*
data_u
int
stride_u
const
uint8_t
*
data_v
int
stride_v
)
;
static
rtc
:
:
scoped_refptr
<
I420Buffer
>
Rotate
(
const
VideoFrameBuffer
&
src
VideoRotation
rotation
)
;
static
void
SetBlack
(
I420Buffer
*
buffer
)
;
void
InitializeData
(
)
;
void
SetToBlack
(
)
{
SetBlack
(
this
)
;
}
int
width
(
)
const
override
;
int
height
(
)
const
override
;
const
uint8_t
*
DataY
(
)
const
override
;
const
uint8_t
*
DataU
(
)
const
override
;
const
uint8_t
*
DataV
(
)
const
override
;
int
StrideY
(
)
const
override
;
int
StrideU
(
)
const
override
;
int
StrideV
(
)
const
override
;
void
*
native_handle
(
)
const
override
;
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
NativeToI420Buffer
(
)
override
;
uint8_t
*
MutableDataY
(
)
;
uint8_t
*
MutableDataU
(
)
;
uint8_t
*
MutableDataV
(
)
;
void
CropAndScaleFrom
(
const
VideoFrameBuffer
&
src
int
offset_x
int
offset_y
int
crop_width
int
crop_height
)
;
void
CropAndScaleFrom
(
const
VideoFrameBuffer
&
src
)
;
void
ScaleFrom
(
const
VideoFrameBuffer
&
src
)
;
static
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
Rotate
(
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
src
VideoRotation
rotation
)
;
protected
:
I420Buffer
(
int
width
int
height
)
;
I420Buffer
(
int
width
int
height
int
stride_y
int
stride_u
int
stride_v
)
;
~
I420Buffer
(
)
override
;
private
:
const
int
width_
;
const
int
height_
;
const
int
stride_y_
;
const
int
stride_u_
;
const
int
stride_v_
;
const
std
:
:
unique_ptr
<
uint8_t
AlignedFreeDeleter
>
data_
;
}
;
}
#
endif
