#
include
"
api
/
video
/
video_content_type
.
h
"
namespace
webrtc
{
namespace
videocontenttypehelpers
{
namespace
{
static
constexpr
uint8_t
kScreenshareBitsSize
=
1
;
static
constexpr
uint8_t
kScreenshareBitsMask
=
(
1u
<
<
kScreenshareBitsSize
)
-
1
;
static
constexpr
uint8_t
kSimulcastShift
=
1
;
static
constexpr
uint8_t
kSimulcastBitsSize
=
2
;
static
constexpr
uint8_t
kSimulcastBitsMask
=
(
(
1u
<
<
kSimulcastBitsSize
)
-
1
)
<
<
kSimulcastShift
;
static
constexpr
uint8_t
kExperimentShift
=
3
;
static
constexpr
uint8_t
kExperimentBitsSize
=
3
;
static
constexpr
uint8_t
kExperimentBitsMask
=
(
(
1u
<
<
kExperimentBitsSize
)
-
1
)
<
<
kExperimentShift
;
static
constexpr
uint8_t
kTotalBitsSize
=
kScreenshareBitsSize
+
kSimulcastBitsSize
+
kExperimentBitsSize
;
}
bool
SetExperimentId
(
VideoContentType
*
content_type
uint8_t
experiment_id
)
{
if
(
experiment_id
>
=
(
1
<
<
kExperimentBitsSize
)
)
return
false
;
*
content_type
=
static_cast
<
VideoContentType
>
(
(
static_cast
<
uint8_t
>
(
*
content_type
)
&
~
kExperimentBitsMask
)
|
(
(
experiment_id
<
<
kExperimentShift
)
&
kExperimentBitsMask
)
)
;
return
true
;
}
bool
SetSimulcastId
(
VideoContentType
*
content_type
uint8_t
simulcast_id
)
{
if
(
simulcast_id
>
=
(
1
<
<
kSimulcastBitsSize
)
)
return
false
;
*
content_type
=
static_cast
<
VideoContentType
>
(
(
static_cast
<
uint8_t
>
(
*
content_type
)
&
~
kSimulcastBitsMask
)
|
(
(
simulcast_id
<
<
kSimulcastShift
)
&
kSimulcastBitsMask
)
)
;
return
true
;
}
uint8_t
GetExperimentId
(
const
VideoContentType
&
content_type
)
{
return
(
static_cast
<
uint8_t
>
(
content_type
)
&
kExperimentBitsMask
)
>
>
kExperimentShift
;
}
uint8_t
GetSimulcastId
(
const
VideoContentType
&
content_type
)
{
return
(
static_cast
<
uint8_t
>
(
content_type
)
&
kSimulcastBitsMask
)
>
>
kSimulcastShift
;
}
bool
IsScreenshare
(
const
VideoContentType
&
content_type
)
{
return
(
static_cast
<
uint8_t
>
(
content_type
)
&
kScreenshareBitsMask
)
>
0
;
}
bool
IsValidContentType
(
uint8_t
value
)
{
return
value
<
(
1
<
<
kTotalBitsSize
)
;
}
const
char
*
ToString
(
const
VideoContentType
&
content_type
)
{
return
IsScreenshare
(
content_type
)
?
"
screen
"
:
"
realtime
"
;
}
}
}
