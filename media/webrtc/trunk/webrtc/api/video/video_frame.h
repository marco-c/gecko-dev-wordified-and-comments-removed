#
ifndef
WEBRTC_API_VIDEO_VIDEO_FRAME_H_
#
define
WEBRTC_API_VIDEO_VIDEO_FRAME_H_
#
include
<
stdint
.
h
>
#
include
"
webrtc
/
api
/
video
/
video_rotation
.
h
"
#
include
"
webrtc
/
api
/
video
/
video_frame_buffer
.
h
"
#
include
"
webrtc
/
base
/
timeutils
.
h
"
namespace
webrtc
{
class
VideoFrame
{
public
:
VideoFrame
(
)
{
video_frame_buffer_
=
nullptr
;
timestamp_rtp_
=
0
;
timestamp_us_
=
0
;
ntp_time_ms_
=
0
;
rotation_
=
kVideoRotation_0
;
}
VideoFrame
(
const
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
&
buffer
webrtc
:
:
VideoRotation
rotation
int64_t
timestamp_us
)
;
VideoFrame
(
const
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
&
buffer
uint32_t
timestamp
int64_t
render_time_ms
VideoRotation
rotation
)
;
~
VideoFrame
(
)
;
VideoFrame
(
const
VideoFrame
&
)
;
VideoFrame
(
VideoFrame
&
&
)
;
VideoFrame
&
operator
=
(
const
VideoFrame
&
)
;
VideoFrame
&
operator
=
(
VideoFrame
&
&
)
;
int
width
(
)
const
;
int
height
(
)
const
;
int64_t
timestamp_us
(
)
const
{
return
timestamp_us_
;
}
void
set_timestamp_us
(
int64_t
timestamp_us
)
{
timestamp_us_
=
timestamp_us
;
}
void
set_timestamp
(
uint32_t
timestamp
)
{
timestamp_rtp_
=
timestamp
;
}
uint32_t
timestamp
(
)
const
{
return
timestamp_rtp_
;
}
uint32_t
transport_frame_id
(
)
const
{
return
timestamp
(
)
;
}
void
set_ntp_time_ms
(
int64_t
ntp_time_ms
)
{
ntp_time_ms_
=
ntp_time_ms
;
}
int64_t
ntp_time_ms
(
)
const
{
return
ntp_time_ms_
;
}
VideoRotation
rotation
(
)
const
{
return
rotation_
;
}
void
set_rotation
(
VideoRotation
rotation
)
{
rotation_
=
rotation
;
}
void
set_render_time_ms
(
int64_t
render_time_ms
)
;
int64_t
render_time_ms
(
)
const
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoFrameBuffer
>
video_frame_buffer
(
)
const
;
bool
is_texture
(
)
const
{
return
video_frame_buffer
(
)
-
>
native_handle
(
)
!
=
nullptr
;
}
private
:
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoFrameBuffer
>
video_frame_buffer_
;
uint32_t
timestamp_rtp_
;
int64_t
ntp_time_ms_
;
int64_t
timestamp_us_
;
VideoRotation
rotation_
;
}
;
}
#
endif
