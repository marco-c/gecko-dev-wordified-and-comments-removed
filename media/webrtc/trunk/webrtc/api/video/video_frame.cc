#
include
"
webrtc
/
api
/
video
/
video_frame
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
timeutils
.
h
"
namespace
webrtc
{
VideoFrame
:
:
VideoFrame
(
const
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
&
buffer
webrtc
:
:
VideoRotation
rotation
int64_t
timestamp_us
)
:
video_frame_buffer_
(
buffer
)
timestamp_rtp_
(
0
)
ntp_time_ms_
(
0
)
timestamp_us_
(
timestamp_us
)
rotation_
(
rotation
)
{
}
VideoFrame
:
:
VideoFrame
(
const
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
&
buffer
uint32_t
timestamp
int64_t
render_time_ms
VideoRotation
rotation
)
:
video_frame_buffer_
(
buffer
)
timestamp_rtp_
(
timestamp
)
ntp_time_ms_
(
0
)
timestamp_us_
(
render_time_ms
*
rtc
:
:
kNumMicrosecsPerMillisec
)
rotation_
(
rotation
)
{
RTC_DCHECK
(
buffer
)
;
}
VideoFrame
:
:
~
VideoFrame
(
)
=
default
;
VideoFrame
:
:
VideoFrame
(
const
VideoFrame
&
)
=
default
;
VideoFrame
:
:
VideoFrame
(
VideoFrame
&
&
)
=
default
;
VideoFrame
&
VideoFrame
:
:
operator
=
(
const
VideoFrame
&
)
=
default
;
VideoFrame
&
VideoFrame
:
:
operator
=
(
VideoFrame
&
&
)
=
default
;
int
VideoFrame
:
:
width
(
)
const
{
return
video_frame_buffer_
?
video_frame_buffer_
-
>
width
(
)
:
0
;
}
int
VideoFrame
:
:
height
(
)
const
{
return
video_frame_buffer_
?
video_frame_buffer_
-
>
height
(
)
:
0
;
}
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
VideoFrame
:
:
video_frame_buffer
(
)
const
{
return
video_frame_buffer_
;
}
void
VideoFrame
:
:
set_render_time_ms
(
int64_t
render_time_ms
)
{
set_timestamp_us
(
render_time_ms
*
rtc
:
:
kNumMicrosecsPerMillisec
)
;
}
int64_t
VideoFrame
:
:
render_time_ms
(
)
const
{
return
timestamp_us
(
)
/
rtc
:
:
kNumMicrosecsPerMillisec
;
}
}
