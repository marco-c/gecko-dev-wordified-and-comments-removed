#
ifndef
SDK_OBJC_FRAMEWORK_CLASSES_VIDEO_AVFOUNDATIONVIDEOCAPTURER_H_
#
define
SDK_OBJC_FRAMEWORK_CLASSES_VIDEO_AVFOUNDATIONVIDEOCAPTURER_H_
#
import
<
AVFoundation
/
AVFoundation
.
h
>
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
common_video
/
include
/
i420_buffer_pool
.
h
"
#
include
"
media
/
base
/
videocapturer
.
h
"
class
RTCAVFoundationVideoCapturerInternal
;
namespace
rtc
{
class
Thread
;
}
namespace
webrtc
{
class
AVFoundationVideoCapturer
:
public
cricket
:
:
VideoCapturer
{
public
:
AVFoundationVideoCapturer
(
)
;
~
AVFoundationVideoCapturer
(
)
;
cricket
:
:
CaptureState
Start
(
const
cricket
:
:
VideoFormat
&
format
)
override
;
void
Stop
(
)
override
;
bool
IsRunning
(
)
override
;
bool
IsScreencast
(
)
const
override
{
return
false
;
}
bool
GetPreferredFourccs
(
std
:
:
vector
<
uint32_t
>
*
fourccs
)
override
{
fourccs
-
>
push_back
(
cricket
:
:
FOURCC_NV12
)
;
return
true
;
}
AVCaptureSession
*
GetCaptureSession
(
)
;
bool
CanUseBackCamera
(
)
const
;
void
SetUseBackCamera
(
bool
useBackCamera
)
;
bool
GetUseBackCamera
(
)
const
;
void
CaptureSampleBuffer
(
CMSampleBufferRef
sample_buffer
webrtc
:
:
VideoRotation
rotation
)
;
void
AdaptOutputFormat
(
int
width
int
height
int
fps
)
;
private
:
RTCAVFoundationVideoCapturerInternal
*
_capturer
;
webrtc
:
:
I420BufferPool
_buffer_pool
;
}
;
}
#
endif
