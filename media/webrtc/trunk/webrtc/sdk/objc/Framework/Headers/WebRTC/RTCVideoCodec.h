#
import
<
Foundation
/
Foundation
.
h
>
#
import
<
WebRTC
/
RTCMacros
.
h
>
#
import
<
WebRTC
/
RTCVideoFrame
.
h
>
NS_ASSUME_NONNULL_BEGIN
RTC_EXPORT
extern
NSString
*
const
kRTCVideoCodecVp8Name
;
RTC_EXPORT
extern
NSString
*
const
kRTCVideoCodecVp9Name
;
RTC_EXPORT
extern
NSString
*
const
kRTCVideoCodecH264Name
;
RTC_EXPORT
extern
NSString
*
const
kRTCLevel31ConstrainedHigh
;
RTC_EXPORT
extern
NSString
*
const
kRTCLevel31ConstrainedBaseline
;
typedef
NS_ENUM
(
NSUInteger
RTCFrameType
)
{
RTCFrameTypeEmptyFrame
=
0
RTCFrameTypeAudioFrameSpeech
=
1
RTCFrameTypeAudioFrameCN
=
2
RTCFrameTypeVideoFrameKey
=
3
RTCFrameTypeVideoFrameDelta
=
4
}
;
typedef
NS_ENUM
(
NSUInteger
RTCVideoContentType
)
{
RTCVideoContentTypeUnspecified
RTCVideoContentTypeScreenshare
}
;
RTC_EXPORT
interface
RTCEncodedImage
:
NSObject
property
(
nonatomic
strong
)
NSData
*
buffer
;
property
(
nonatomic
assign
)
int32_t
encodedWidth
;
property
(
nonatomic
assign
)
int32_t
encodedHeight
;
property
(
nonatomic
assign
)
uint32_t
timeStamp
;
property
(
nonatomic
assign
)
int64_t
captureTimeMs
;
property
(
nonatomic
assign
)
int64_t
ntpTimeMs
;
property
(
nonatomic
assign
)
uint8_t
flags
;
property
(
nonatomic
assign
)
int64_t
encodeStartMs
;
property
(
nonatomic
assign
)
int64_t
encodeFinishMs
;
property
(
nonatomic
assign
)
RTCFrameType
frameType
;
property
(
nonatomic
assign
)
RTCVideoRotation
rotation
;
property
(
nonatomic
assign
)
BOOL
completeFrame
;
property
(
nonatomic
strong
)
NSNumber
*
qp
;
property
(
nonatomic
assign
)
RTCVideoContentType
contentType
;
end
RTC_EXPORT
interface
RTCRtpFragmentationHeader
:
NSObject
property
(
nonatomic
strong
)
NSArray
<
NSNumber
*
>
*
fragmentationOffset
;
property
(
nonatomic
strong
)
NSArray
<
NSNumber
*
>
*
fragmentationLength
;
property
(
nonatomic
strong
)
NSArray
<
NSNumber
*
>
*
fragmentationTimeDiff
;
property
(
nonatomic
strong
)
NSArray
<
NSNumber
*
>
*
fragmentationPlType
;
end
RTC_EXPORT
protocol
RTCCodecSpecificInfo
<
NSObject
>
end
typedef
BOOL
(
^
RTCVideoEncoderCallback
)
(
RTCEncodedImage
*
frame
id
<
RTCCodecSpecificInfo
>
info
RTCRtpFragmentationHeader
*
header
)
;
typedef
void
(
^
RTCVideoDecoderCallback
)
(
RTCVideoFrame
*
frame
)
;
typedef
NS_ENUM
(
NSUInteger
RTCVideoCodecMode
)
{
RTCVideoCodecModeRealtimeVideo
RTCVideoCodecModeScreensharing
}
;
RTC_EXPORT
interface
RTCVideoCodecInfo
:
NSObject
<
NSCoding
>
-
(
instancetype
)
init
NS_UNAVAILABLE
;
-
(
instancetype
)
initWithName
:
(
NSString
*
)
name
;
-
(
instancetype
)
initWithName
:
(
NSString
*
)
name
parameters
:
(
nullable
NSDictionary
<
NSString
*
NSString
*
>
*
)
parameters
NS_DESIGNATED_INITIALIZER
;
-
(
BOOL
)
isEqualToCodecInfo
:
(
RTCVideoCodecInfo
*
)
info
;
property
(
nonatomic
readonly
)
NSString
*
name
;
property
(
nonatomic
readonly
)
NSDictionary
<
NSString
*
NSString
*
>
*
parameters
;
end
RTC_EXPORT
interface
RTCVideoEncoderSettings
:
NSObject
property
(
nonatomic
strong
)
NSString
*
name
;
property
(
nonatomic
assign
)
unsigned
short
width
;
property
(
nonatomic
assign
)
unsigned
short
height
;
property
(
nonatomic
assign
)
unsigned
int
startBitrate
;
property
(
nonatomic
assign
)
unsigned
int
maxBitrate
;
property
(
nonatomic
assign
)
unsigned
int
minBitrate
;
property
(
nonatomic
assign
)
unsigned
int
targetBitrate
;
property
(
nonatomic
assign
)
uint32_t
maxFramerate
;
property
(
nonatomic
assign
)
unsigned
int
qpMax
;
property
(
nonatomic
assign
)
RTCVideoCodecMode
mode
;
end
RTC_EXPORT
interface
RTCVideoEncoderQpThresholds
:
NSObject
-
(
instancetype
)
initWithThresholdsLow
:
(
NSInteger
)
low
high
:
(
NSInteger
)
high
;
property
(
nonatomic
readonly
)
NSInteger
low
;
property
(
nonatomic
readonly
)
NSInteger
high
;
end
RTC_EXPORT
protocol
RTCVideoEncoder
<
NSObject
>
-
(
void
)
setCallback
:
(
RTCVideoEncoderCallback
)
callback
;
-
(
NSInteger
)
startEncodeWithSettings
:
(
RTCVideoEncoderSettings
*
)
settings
numberOfCores
:
(
int
)
numberOfCores
;
-
(
NSInteger
)
releaseEncoder
;
-
(
NSInteger
)
encode
:
(
RTCVideoFrame
*
)
frame
codecSpecificInfo
:
(
id
<
RTCCodecSpecificInfo
>
)
info
frameTypes
:
(
NSArray
<
NSNumber
*
>
*
)
frameTypes
;
-
(
int
)
setBitrate
:
(
uint32_t
)
bitrateKbit
framerate
:
(
uint32_t
)
framerate
;
-
(
NSString
*
)
implementationName
;
-
(
RTCVideoEncoderQpThresholds
*
)
scalingSettings
;
end
RTC_EXPORT
protocol
RTCVideoDecoder
<
NSObject
>
-
(
void
)
setCallback
:
(
RTCVideoDecoderCallback
)
callback
;
-
(
NSInteger
)
startDecodeWithSettings
:
(
RTCVideoEncoderSettings
*
)
settings
numberOfCores
:
(
int
)
numberOfCores
;
-
(
NSInteger
)
releaseDecoder
;
-
(
NSInteger
)
decode
:
(
RTCEncodedImage
*
)
encodedImage
missingFrames
:
(
BOOL
)
missingFrames
fragmentationHeader
:
(
RTCRtpFragmentationHeader
*
)
fragmentationHeader
codecSpecificInfo
:
(
__nullable
id
<
RTCCodecSpecificInfo
>
)
info
renderTimeMs
:
(
int64_t
)
renderTimeMs
;
-
(
NSString
*
)
implementationName
;
end
NS_ASSUME_NONNULL_END
