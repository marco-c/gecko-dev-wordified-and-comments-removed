#
ifndef
WEBRTC_SDK_ANDROID_SRC_JNI_ANDROIDMEDIACODECCOMMON_H_
#
define
WEBRTC_SDK_ANDROID_SRC_JNI_ANDROIDMEDIACODECCOMMON_H_
#
include
<
android
/
log
.
h
>
#
include
<
string
>
#
include
"
webrtc
/
base
/
thread
.
h
"
#
include
"
webrtc
/
sdk
/
android
/
src
/
jni
/
classreferenceholder
.
h
"
#
include
"
webrtc
/
sdk
/
android
/
src
/
jni
/
jni_helpers
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
namespace
webrtc_jni
{
#
define
TAG_COMMON
"
MediaCodecVideo
"
enum
COLOR_FORMATTYPE
{
COLOR_FormatYUV420Planar
=
0x13
COLOR_FormatYUV420SemiPlanar
=
0x15
COLOR_QCOM_FormatYUV420SemiPlanar
=
0x7FA30C00
COLOR_QCOM_FORMATYVU420PackedSemiPlanar32m4ka
=
0x7FA30C01
COLOR_QCOM_FORMATYVU420PackedSemiPlanar16m4ka
=
0x7FA30C02
COLOR_QCOM_FORMATYVU420PackedSemiPlanar64x32Tile2m8ka
=
0x7FA30C03
COLOR_QCOM_FORMATYUV420PackedSemiPlanar32m
=
0x7FA30C04
}
;
enum
{
kMediaCodecPollMs
=
10
}
;
enum
{
kMediaCodecPollNoFramesMs
=
100
}
;
enum
{
kMediaCodecTimeoutMs
=
1000
}
;
enum
{
kMediaCodecStatisticsIntervalMs
=
3000
}
;
enum
{
kMaxPendingFramesVp8
=
1
}
;
enum
{
kMaxPendingFramesVp9
=
1
}
;
enum
{
kMaxPendingFramesH264
=
4
}
;
enum
{
kMaxDecodedLogFrames
=
10
}
;
enum
{
kMaxEncodedLogFrames
=
10
}
;
static
inline
void
AllowBlockingCalls
(
)
{
rtc
:
:
Thread
*
current_thread
=
rtc
:
:
Thread
:
:
Current
(
)
;
if
(
current_thread
!
=
NULL
)
current_thread
-
>
SetAllowBlockingCalls
(
true
)
;
}
static
inline
jobject
JavaEnumFromIndexAndClassName
(
JNIEnv
*
jni
const
std
:
:
string
&
state_class_fragment
int
index
)
{
const
std
:
:
string
state_class
=
"
org
/
webrtc
/
"
+
state_class_fragment
;
return
JavaEnumFromIndex
(
jni
FindClass
(
jni
state_class
.
c_str
(
)
)
state_class
index
)
;
}
static
inline
bool
CheckException
(
JNIEnv
*
jni
)
{
if
(
jni
-
>
ExceptionCheck
(
)
)
{
LOG_TAG
(
rtc
:
:
LS_ERROR
TAG_COMMON
)
<
<
"
Java
JNI
exception
.
"
;
jni
-
>
ExceptionDescribe
(
)
;
jni
-
>
ExceptionClear
(
)
;
return
true
;
}
return
false
;
}
}
#
endif
