#
ifndef
SDK_ANDROID_SRC_JNI_VIDEOFRAME_H_
#
define
SDK_ANDROID_SRC_JNI_VIDEOFRAME_H_
#
include
<
jni
.
h
>
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video
/
video_frame_buffer
.
h
"
#
include
"
api
/
video
/
video_rotation
.
h
"
#
include
"
rtc_base
/
callback
.
h
"
#
include
"
sdk
/
android
/
src
/
jni
/
jni_helpers
.
h
"
namespace
webrtc
{
namespace
jni
{
class
Matrix
{
public
:
Matrix
(
JNIEnv
*
jni
jfloatArray
a
)
;
static
Matrix
fromAndroidGraphicsMatrix
(
JNIEnv
*
jni
jobject
j_matrix
)
;
jfloatArray
ToJava
(
JNIEnv
*
jni
)
const
;
void
Crop
(
float
cropped_width
float
cropped_height
float
crop_x
float
crop_y
)
;
void
Rotate
(
VideoRotation
rotation
)
;
private
:
Matrix
(
)
{
}
static
void
Multiply
(
const
float
a
[
16
]
const
float
b
[
16
]
float
result
[
16
]
)
;
float
elem_
[
16
]
;
}
;
struct
NativeHandleImpl
{
NativeHandleImpl
(
JNIEnv
*
jni
jint
j_oes_texture_id
jfloatArray
j_transform_matrix
)
;
NativeHandleImpl
(
int
id
const
Matrix
&
matrix
)
;
const
int
oes_texture_id
;
Matrix
sampling_matrix
;
}
;
class
AndroidVideoFrameBuffer
:
public
VideoFrameBuffer
{
public
:
enum
class
AndroidType
{
kTextureBuffer
kJavaBuffer
}
;
virtual
AndroidType
android_type
(
)
=
0
;
}
;
class
AndroidTextureBuffer
:
public
AndroidVideoFrameBuffer
{
public
:
AndroidTextureBuffer
(
int
width
int
height
const
NativeHandleImpl
&
native_handle
jobject
surface_texture_helper
const
rtc
:
:
Callback0
<
void
>
&
no_longer_used
)
;
~
AndroidTextureBuffer
(
)
;
NativeHandleImpl
native_handle_impl
(
)
const
;
private
:
Type
type
(
)
const
override
;
int
width
(
)
const
override
;
int
height
(
)
const
override
;
rtc
:
:
scoped_refptr
<
I420BufferInterface
>
ToI420
(
)
override
;
AndroidType
android_type
(
)
override
{
return
AndroidType
:
:
kTextureBuffer
;
}
const
int
width_
;
const
int
height_
;
NativeHandleImpl
native_handle_
;
jobject
surface_texture_helper_
;
rtc
:
:
Callback0
<
void
>
no_longer_used_cb_
;
}
;
class
AndroidVideoBuffer
:
public
AndroidVideoFrameBuffer
{
public
:
static
rtc
:
:
scoped_refptr
<
AndroidVideoBuffer
>
Create
(
JNIEnv
*
jni
jobject
j_video_frame_buffer
)
;
static
rtc
:
:
scoped_refptr
<
AndroidVideoBuffer
>
Adopt
(
JNIEnv
*
jni
jobject
j_video_frame_buffer
)
;
~
AndroidVideoBuffer
(
)
override
;
jobject
video_frame_buffer
(
)
const
;
rtc
:
:
scoped_refptr
<
AndroidVideoBuffer
>
CropAndScale
(
JNIEnv
*
jni
int
crop_x
int
crop_y
int
crop_width
int
crop_height
int
scale_width
int
scale_height
)
;
jobject
ToJavaI420Frame
(
JNIEnv
*
jni
int
rotation
)
;
protected
:
AndroidVideoBuffer
(
JNIEnv
*
jni
jobject
j_video_frame_buffer
)
;
private
:
Type
type
(
)
const
override
;
int
width
(
)
const
override
;
int
height
(
)
const
override
;
rtc
:
:
scoped_refptr
<
I420BufferInterface
>
ToI420
(
)
override
;
AndroidType
android_type
(
)
override
{
return
AndroidType
:
:
kJavaBuffer
;
}
const
int
width_
;
const
int
height_
;
const
ScopedGlobalRef
<
jobject
>
j_video_frame_buffer_
;
}
;
VideoFrame
JavaToNativeFrame
(
JNIEnv
*
jni
jobject
j_video_frame
uint32_t
timestamp_rtp
)
;
jobject
NativeToJavaFrame
(
JNIEnv
*
jni
const
VideoFrame
&
frame
)
;
int64_t
GetJavaVideoFrameTimestampNs
(
JNIEnv
*
jni
jobject
j_video_frame
)
;
}
}
#
endif
