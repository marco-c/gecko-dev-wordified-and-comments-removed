#
ifndef
SDK_ANDROID_SRC_JNI_JNI_GENERATOR_HELPER_H_
#
define
SDK_ANDROID_SRC_JNI_JNI_GENERATOR_HELPER_H_
#
include
"
sdk
/
android
/
src
/
jni
/
jni_helpers
.
h
"
#
define
CHECK_CLAZZ
(
env
jcaller
clazz
.
.
.
)
RTC_DCHECK
(
clazz
)
;
#
define
CHECK_NATIVE_PTR
(
env
jcaller
native_ptr
method_name
.
.
.
)
\
RTC_DCHECK
(
native_ptr
)
<
<
method_name
;
#
define
BASE_EXPORT
#
define
JNI_REGISTRATION_EXPORT
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
define
JNI_GENERATOR_EXPORT
extern
"
C
"
JNIEXPORT
JNICALL
namespace
jni_generator
{
inline
void
CheckException
(
JNIEnv
*
env
)
{
CHECK_EXCEPTION
(
env
)
;
}
}
namespace
{
typedef
jint
JniIntWrapper
;
inline
jint
as_jint
(
JniIntWrapper
wrapper
)
{
return
wrapper
;
}
}
namespace
base
{
namespace
subtle
{
typedef
void
*
AtomicWord
;
}
namespace
android
{
template
<
typename
T
>
class
JavaRef
{
public
:
JavaRef
(
)
{
}
JavaRef
(
JNIEnv
*
env
T
obj
)
:
obj_
(
obj
)
{
}
T
obj
(
)
const
{
return
obj_
;
}
JavaRef
(
const
T
&
obj
)
:
obj_
(
obj
)
{
}
operator
T
(
)
const
{
return
obj_
;
}
private
:
T
obj_
;
}
;
template
<
typename
T
>
using
ScopedJavaLocalRef
=
JavaRef
<
T
>
;
template
<
typename
T
>
using
JavaParamRef
=
JavaRef
<
T
>
;
jclass
LazyGetClass
(
JNIEnv
*
env
const
char
*
class_name
base
:
:
subtle
:
:
AtomicWord
*
atomic_class_id
)
;
class
MethodID
{
public
:
enum
Type
{
TYPE_STATIC
TYPE_INSTANCE
}
;
template
<
Type
type
>
static
jmethodID
LazyGet
(
JNIEnv
*
env
jclass
clazz
const
char
*
method_name
const
char
*
jni_signature
base
:
:
subtle
:
:
AtomicWord
*
atomic_method_id
)
;
}
;
}
}
#
endif
