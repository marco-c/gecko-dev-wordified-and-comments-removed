#
include
"
sdk
/
android
/
src
/
jni
/
jni_generator_helper
.
h
"
#
include
"
rtc_base
/
atomicops
.
h
"
#
include
"
sdk
/
android
/
src
/
jni
/
class_loader
.
h
"
namespace
base
{
namespace
android
{
jclass
LazyGetClass
(
JNIEnv
*
env
const
char
*
class_name
base
:
:
subtle
:
:
AtomicWord
*
atomic_class_id
)
{
static_assert
(
sizeof
(
base
:
:
subtle
:
:
AtomicWord
)
>
=
sizeof
(
jclass
)
"
AtomicWord
can
'
t
be
smaller
than
jclass
"
)
;
base
:
:
subtle
:
:
AtomicWord
value
=
rtc
:
:
AtomicOps
:
:
AcquireLoadPtr
(
atomic_class_id
)
;
if
(
value
)
return
reinterpret_cast
<
jclass
>
(
value
)
;
jclass
clazz
=
static_cast
<
jclass
>
(
env
-
>
NewGlobalRef
(
webrtc
:
:
jni
:
:
GetClass
(
env
class_name
)
)
)
;
RTC_CHECK
(
clazz
)
<
<
class_name
;
base
:
:
subtle
:
:
AtomicWord
null_aw
=
nullptr
;
base
:
:
subtle
:
:
AtomicWord
cas_result
=
rtc
:
:
AtomicOps
:
:
CompareAndSwapPtr
(
atomic_class_id
null_aw
reinterpret_cast
<
base
:
:
subtle
:
:
AtomicWord
>
(
clazz
)
)
;
if
(
cas_result
=
=
null_aw
)
{
return
clazz
;
}
else
{
env
-
>
DeleteGlobalRef
(
clazz
)
;
return
reinterpret_cast
<
jclass
>
(
cas_result
)
;
}
}
template
<
MethodID
:
:
Type
type
>
jmethodID
MethodID
:
:
LazyGet
(
JNIEnv
*
env
jclass
clazz
const
char
*
method_name
const
char
*
jni_signature
base
:
:
subtle
:
:
AtomicWord
*
atomic_method_id
)
{
static_assert
(
sizeof
(
base
:
:
subtle
:
:
AtomicWord
)
>
=
sizeof
(
jmethodID
)
"
AtomicWord
can
'
t
be
smaller
than
jMethodID
"
)
;
base
:
:
subtle
:
:
AtomicWord
value
=
rtc
:
:
AtomicOps
:
:
AcquireLoadPtr
(
atomic_method_id
)
;
if
(
value
)
return
reinterpret_cast
<
jmethodID
>
(
value
)
;
jmethodID
id
=
(
type
=
=
MethodID
:
:
TYPE_STATIC
)
?
webrtc
:
:
jni
:
:
GetStaticMethodID
(
env
clazz
method_name
jni_signature
)
:
webrtc
:
:
jni
:
:
GetMethodID
(
env
clazz
method_name
jni_signature
)
;
rtc
:
:
AtomicOps
:
:
CompareAndSwapPtr
(
atomic_method_id
base
:
:
subtle
:
:
AtomicWord
(
nullptr
)
reinterpret_cast
<
base
:
:
subtle
:
:
AtomicWord
>
(
id
)
)
;
return
id
;
}
template
jmethodID
MethodID
:
:
LazyGet
<
MethodID
:
:
TYPE_STATIC
>
(
JNIEnv
*
env
jclass
clazz
const
char
*
method_name
const
char
*
jni_signature
base
:
:
subtle
:
:
AtomicWord
*
atomic_method_id
)
;
template
jmethodID
MethodID
:
:
LazyGet
<
MethodID
:
:
TYPE_INSTANCE
>
(
JNIEnv
*
env
jclass
clazz
const
char
*
method_name
const
char
*
jni_signature
base
:
:
subtle
:
:
AtomicWord
*
atomic_method_id
)
;
}
}
