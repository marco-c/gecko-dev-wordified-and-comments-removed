#
ifndef
SDK_ANDROID_SRC_JNI_VIDEODECODERWRAPPER_H_
#
define
SDK_ANDROID_SRC_JNI_VIDEODECODERWRAPPER_H_
#
include
<
jni
.
h
>
#
include
<
deque
>
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
common_video
/
h264
/
h264_bitstream_parser
.
h
"
#
include
"
sdk
/
android
/
src
/
jni
/
jni_helpers
.
h
"
namespace
webrtc
{
namespace
jni
{
class
VideoDecoderWrapper
:
public
VideoDecoder
{
public
:
VideoDecoderWrapper
(
JNIEnv
*
jni
jobject
decoder
)
;
int32_t
InitDecode
(
const
VideoCodec
*
codec_settings
int32_t
number_of_cores
)
override
;
int32_t
Decode
(
const
EncodedImage
&
input_image
bool
missing_frames
const
RTPFragmentationHeader
*
fragmentation
const
CodecSpecificInfo
*
codec_specific_info
int64_t
render_time_ms
)
override
;
int32_t
RegisterDecodeCompleteCallback
(
DecodedImageCallback
*
callback
)
override
;
int32_t
Release
(
)
override
;
bool
PrefersLateDecoding
(
)
const
override
;
const
char
*
ImplementationName
(
)
const
override
;
void
OnDecodedFrame
(
JNIEnv
*
env
jobject
j_caller
jobject
j_frame
jobject
j_decode_time_ms
jobject
j_qp
)
;
private
:
struct
FrameExtraInfo
{
int64_t
timestamp_ns
;
uint32_t
timestamp_rtp
;
int64_t
timestamp_ntp
;
rtc
:
:
Optional
<
uint8_t
>
qp
;
}
;
int32_t
InitDecodeInternal
(
JNIEnv
*
jni
)
;
int32_t
HandleReturnCode
(
JNIEnv
*
jni
jobject
code
)
;
rtc
:
:
Optional
<
uint8_t
>
ParseQP
(
const
EncodedImage
&
input_image
)
;
VideoCodec
codec_settings_
;
int32_t
number_of_cores_
;
bool
initialized_
;
std
:
:
deque
<
FrameExtraInfo
>
frame_extra_infos_
;
bool
qp_parsing_enabled_
;
H264BitstreamParser
h264_bitstream_parser_
;
std
:
:
string
implementation_name_
;
DecodedImageCallback
*
callback_
;
const
ScopedGlobalRef
<
jobject
>
decoder_
;
}
;
}
}
#
endif
