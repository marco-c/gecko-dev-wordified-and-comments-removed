#
ifndef
SDK_ANDROID_SRC_JNI_JNI_HELPERS_H_
#
define
SDK_ANDROID_SRC_JNI_JNI_HELPERS_H_
#
include
<
jni
.
h
>
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
optional
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
rtc_base
/
refcount
.
h
"
#
include
"
rtc_base
/
thread_checker
.
h
"
#
define
CHECK_EXCEPTION
(
jni
)
\
RTC_CHECK
(
!
jni
-
>
ExceptionCheck
(
)
)
\
<
<
(
jni
-
>
ExceptionDescribe
(
)
jni
-
>
ExceptionClear
(
)
"
"
)
#
define
CHECK_RELEASE
(
ptr
)
\
RTC_CHECK
(
(
ptr
)
-
>
Release
(
)
=
=
rtc
:
:
RefCountReleaseStatus
:
:
kDroppedLastRef
)
\
<
<
"
Unexpected
refcount
.
"
#
define
JNI_FUNCTION_DECLARATION
(
rettype
name
.
.
.
)
\
extern
"
C
"
JNIEXPORT
rettype
JNICALL
Java_org_webrtc_
#
#
name
(
__VA_ARGS__
)
namespace
webrtc
{
namespace
jni
{
jint
InitGlobalJniVariables
(
JavaVM
*
jvm
)
;
JNIEnv
*
GetEnv
(
)
;
JavaVM
*
GetJVM
(
)
;
JNIEnv
*
AttachCurrentThreadIfNeeded
(
)
;
jlong
jlongFromPointer
(
void
*
ptr
)
;
jmethodID
GetMethodID
(
JNIEnv
*
jni
jclass
c
const
std
:
:
string
&
name
const
char
*
signature
)
;
jmethodID
GetStaticMethodID
(
JNIEnv
*
jni
jclass
c
const
char
*
name
const
char
*
signature
)
;
jfieldID
GetFieldID
(
JNIEnv
*
jni
jclass
c
const
char
*
name
const
char
*
signature
)
;
jfieldID
GetStaticFieldID
(
JNIEnv
*
jni
jclass
c
const
char
*
name
const
char
*
signature
)
;
jclass
GetObjectClass
(
JNIEnv
*
jni
jobject
object
)
;
jobject
GetObjectField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
jobject
GetStaticObjectField
(
JNIEnv
*
jni
jclass
c
jfieldID
id
)
;
jobject
GetNullableObjectField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
jstring
GetStringField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
jlong
GetLongField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
jint
GetIntField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
bool
GetBooleanField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
bool
IsNull
(
JNIEnv
*
jni
jobject
obj
)
;
std
:
:
string
JavaToStdString
(
JNIEnv
*
jni
const
jstring
&
j_string
)
;
std
:
:
vector
<
std
:
:
string
>
JavaToStdVectorStrings
(
JNIEnv
*
jni
jobject
list
)
;
rtc
:
:
Optional
<
int32_t
>
JavaToNativeOptionalInt
(
JNIEnv
*
jni
jobject
integer
)
;
jobject
NativeToJavaBoolean
(
JNIEnv
*
env
bool
b
)
;
jobject
NativeToJavaInteger
(
JNIEnv
*
jni
int32_t
i
)
;
jobject
NativeToJavaLong
(
JNIEnv
*
env
int64_t
u
)
;
jobject
NativeToJavaDouble
(
JNIEnv
*
env
double
d
)
;
jstring
NativeToJavaString
(
JNIEnv
*
jni
const
std
:
:
string
&
native
)
;
jobject
NativeToJavaInteger
(
JNIEnv
*
jni
const
rtc
:
:
Optional
<
int32_t
>
&
optional_int
)
;
jobject
JavaEnumFromIndex
(
JNIEnv
*
jni
jclass
state_class
const
std
:
:
string
&
state_class_name
int
index
)
;
jobject
JavaEnumFromIndexAndClassName
(
JNIEnv
*
jni
const
std
:
:
string
&
state_class_fragment
int
index
)
;
std
:
:
map
<
std
:
:
string
std
:
:
string
>
JavaToStdMapStrings
(
JNIEnv
*
jni
jobject
j_map
)
;
std
:
:
string
GetJavaEnumName
(
JNIEnv
*
jni
jobject
j_enum
)
;
jobject
NewGlobalRef
(
JNIEnv
*
jni
jobject
o
)
;
void
DeleteGlobalRef
(
JNIEnv
*
jni
jobject
o
)
;
class
ScopedLocalRefFrame
{
public
:
explicit
ScopedLocalRefFrame
(
JNIEnv
*
jni
)
;
~
ScopedLocalRefFrame
(
)
;
private
:
JNIEnv
*
jni_
;
}
;
template
<
class
T
>
class
ScopedGlobalRef
{
public
:
ScopedGlobalRef
(
JNIEnv
*
jni
T
obj
)
:
obj_
(
static_cast
<
T
>
(
jni
-
>
NewGlobalRef
(
obj
)
)
)
{
}
~
ScopedGlobalRef
(
)
{
DeleteGlobalRef
(
AttachCurrentThreadIfNeeded
(
)
obj_
)
;
}
T
operator
*
(
)
const
{
return
obj_
;
}
private
:
T
obj_
;
}
;
class
Iterable
{
public
:
Iterable
(
JNIEnv
*
jni
jobject
iterable
)
:
jni_
(
jni
)
iterable_
(
iterable
)
{
}
class
Iterator
{
public
:
Iterator
(
)
;
Iterator
(
JNIEnv
*
jni
jobject
iterable
)
;
Iterator
(
Iterator
&
&
other
)
;
Iterator
&
operator
=
(
Iterator
&
&
)
=
delete
;
Iterator
&
operator
+
+
(
)
;
void
Remove
(
)
;
bool
operator
=
=
(
const
Iterator
&
other
)
;
bool
operator
!
=
(
const
Iterator
&
other
)
{
return
!
(
*
this
=
=
other
)
;
}
jobject
operator
*
(
)
;
private
:
bool
AtEnd
(
)
const
;
JNIEnv
*
jni_
=
nullptr
;
jobject
iterator_
=
nullptr
;
jobject
value_
=
nullptr
;
jmethodID
has_next_id_
=
nullptr
;
jmethodID
next_id_
=
nullptr
;
jmethodID
remove_id_
=
nullptr
;
rtc
:
:
ThreadChecker
thread_checker_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
Iterator
)
;
}
;
Iterable
:
:
Iterator
begin
(
)
{
return
Iterable
:
:
Iterator
(
jni_
iterable_
)
;
}
Iterable
:
:
Iterator
end
(
)
{
return
Iterable
:
:
Iterator
(
)
;
}
private
:
JNIEnv
*
jni_
;
jobject
iterable_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
Iterable
)
;
}
;
template
<
typename
T
typename
Convert
>
jobjectArray
NativeToJavaObjectArray
(
JNIEnv
*
env
const
std
:
:
vector
<
T
>
&
container
jclass
clazz
Convert
convert
)
{
jobjectArray
j_container
=
env
-
>
NewObjectArray
(
container
.
size
(
)
clazz
nullptr
)
;
int
i
=
0
;
for
(
const
T
&
element
:
container
)
{
jobject
j_element
=
convert
(
env
element
)
;
env
-
>
SetObjectArrayElement
(
j_container
i
j_element
)
;
env
-
>
DeleteLocalRef
(
j_element
)
;
+
+
i
;
}
return
j_container
;
}
jobjectArray
NativeToJavaIntegerArray
(
JNIEnv
*
env
const
std
:
:
vector
<
int32_t
>
&
container
)
;
jobjectArray
NativeToJavaBooleanArray
(
JNIEnv
*
env
const
std
:
:
vector
<
bool
>
&
container
)
;
jobjectArray
NativeToJavaLongArray
(
JNIEnv
*
env
const
std
:
:
vector
<
int64_t
>
&
container
)
;
jobjectArray
NativeToJavaDoubleArray
(
JNIEnv
*
env
const
std
:
:
vector
<
double
>
&
container
)
;
jobjectArray
NativeToJavaStringArray
(
JNIEnv
*
env
const
std
:
:
vector
<
std
:
:
string
>
&
container
)
;
}
}
namespace
webrtc_jni
{
using
webrtc
:
:
jni
:
:
AttachCurrentThreadIfNeeded
;
using
webrtc
:
:
jni
:
:
InitGlobalJniVariables
;
}
#
endif
