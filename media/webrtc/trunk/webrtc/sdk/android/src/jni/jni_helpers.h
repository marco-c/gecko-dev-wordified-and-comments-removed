#
ifndef
WEBRTC_SDK_ANDROID_SRC_JNI_JNI_HELPERS_H_
#
define
WEBRTC_SDK_ANDROID_SRC_JNI_JNI_HELPERS_H_
#
include
<
jni
.
h
>
#
include
<
string
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
define
CHECK_EXCEPTION
(
jni
)
\
RTC_CHECK
(
!
jni
-
>
ExceptionCheck
(
)
)
\
<
<
(
jni
-
>
ExceptionDescribe
(
)
jni
-
>
ExceptionClear
(
)
"
"
)
#
define
CHECK_RELEASE
(
ptr
)
\
RTC_CHECK_EQ
(
0
(
ptr
)
-
>
Release
(
)
)
<
<
"
Unexpected
refcount
.
"
namespace
webrtc_jni
{
jint
InitGlobalJniVariables
(
JavaVM
*
jvm
)
;
JNIEnv
*
GetEnv
(
)
;
JavaVM
*
GetJVM
(
)
;
JNIEnv
*
AttachCurrentThreadIfNeeded
(
)
;
jlong
jlongFromPointer
(
void
*
ptr
)
;
jmethodID
GetMethodID
(
JNIEnv
*
jni
jclass
c
const
std
:
:
string
&
name
const
char
*
signature
)
;
jmethodID
GetStaticMethodID
(
JNIEnv
*
jni
jclass
c
const
char
*
name
const
char
*
signature
)
;
jfieldID
GetFieldID
(
JNIEnv
*
jni
jclass
c
const
char
*
name
const
char
*
signature
)
;
jfieldID
GetStaticFieldID
(
JNIEnv
*
jni
jclass
c
const
char
*
name
const
char
*
signature
)
;
jclass
GetObjectClass
(
JNIEnv
*
jni
jobject
object
)
;
jobject
GetObjectField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
jobject
GetStaticObjectField
(
JNIEnv
*
jni
jclass
c
jfieldID
id
)
;
jobject
GetNullableObjectField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
jstring
GetStringField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
jlong
GetLongField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
jint
GetIntField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
bool
GetBooleanField
(
JNIEnv
*
jni
jobject
object
jfieldID
id
)
;
bool
IsNull
(
JNIEnv
*
jni
jobject
obj
)
;
jstring
JavaStringFromStdString
(
JNIEnv
*
jni
const
std
:
:
string
&
native
)
;
std
:
:
string
JavaToStdString
(
JNIEnv
*
jni
const
jstring
&
j_string
)
;
jobject
JavaEnumFromIndex
(
JNIEnv
*
jni
jclass
state_class
const
std
:
:
string
&
state_class_name
int
index
)
;
std
:
:
string
GetJavaEnumName
(
JNIEnv
*
jni
const
std
:
:
string
&
className
jobject
j_enum
)
;
jobject
NewGlobalRef
(
JNIEnv
*
jni
jobject
o
)
;
void
DeleteGlobalRef
(
JNIEnv
*
jni
jobject
o
)
;
class
ScopedLocalRefFrame
{
public
:
explicit
ScopedLocalRefFrame
(
JNIEnv
*
jni
)
;
~
ScopedLocalRefFrame
(
)
;
private
:
JNIEnv
*
jni_
;
}
;
template
<
class
T
>
class
ScopedGlobalRef
{
public
:
ScopedGlobalRef
(
JNIEnv
*
jni
T
obj
)
:
obj_
(
static_cast
<
T
>
(
jni
-
>
NewGlobalRef
(
obj
)
)
)
{
}
~
ScopedGlobalRef
(
)
{
DeleteGlobalRef
(
AttachCurrentThreadIfNeeded
(
)
obj_
)
;
}
T
operator
*
(
)
const
{
return
obj_
;
}
private
:
T
obj_
;
}
;
class
Iterable
{
public
:
Iterable
(
JNIEnv
*
jni
jobject
iterable
)
:
jni_
(
jni
)
iterable_
(
iterable
)
{
}
class
Iterator
{
public
:
Iterator
(
)
;
Iterator
(
JNIEnv
*
jni
jobject
iterable
)
;
Iterator
(
Iterator
&
&
other
)
;
Iterator
&
operator
=
(
Iterator
&
&
)
=
delete
;
Iterator
&
operator
+
+
(
)
;
bool
operator
=
=
(
const
Iterator
&
other
)
;
bool
operator
!
=
(
const
Iterator
&
other
)
{
return
!
(
*
this
=
=
other
)
;
}
jobject
operator
*
(
)
;
private
:
bool
AtEnd
(
)
const
;
JNIEnv
*
jni_
=
nullptr
;
jobject
iterator_
=
nullptr
;
jobject
value_
=
nullptr
;
jmethodID
has_next_id_
=
nullptr
;
jmethodID
next_id_
=
nullptr
;
rtc
:
:
ThreadChecker
thread_checker_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
Iterator
)
;
}
;
Iterable
:
:
Iterator
begin
(
)
{
return
Iterable
:
:
Iterator
(
jni_
iterable_
)
;
}
Iterable
:
:
Iterator
end
(
)
{
return
Iterable
:
:
Iterator
(
)
;
}
private
:
JNIEnv
*
jni_
;
jobject
iterable_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
Iterable
)
;
}
;
}
#
endif
