package
org
.
webrtc
;
import
static
android
.
net
.
NetworkCapabilities
.
NET_CAPABILITY_INTERNET
;
import
static
android
.
net
.
NetworkCapabilities
.
TRANSPORT_CELLULAR
;
import
android
.
Manifest
.
permission
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
content
.
BroadcastReceiver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
IntentFilter
;
import
android
.
net
.
ConnectivityManager
;
import
android
.
net
.
ConnectivityManager
.
NetworkCallback
;
import
android
.
net
.
LinkAddress
;
import
android
.
net
.
LinkProperties
;
import
android
.
net
.
Network
;
import
android
.
net
.
NetworkCapabilities
;
import
android
.
net
.
NetworkInfo
;
import
android
.
net
.
NetworkRequest
;
import
android
.
net
.
wifi
.
WifiInfo
;
import
android
.
net
.
wifi
.
WifiManager
;
import
android
.
os
.
Build
;
import
android
.
telephony
.
TelephonyManager
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
NetworkMonitorAutoDetect
extends
BroadcastReceiver
{
public
static
enum
ConnectionType
{
CONNECTION_UNKNOWN
CONNECTION_ETHERNET
CONNECTION_WIFI
CONNECTION_4G
CONNECTION_3G
CONNECTION_2G
CONNECTION_UNKNOWN_CELLULAR
CONNECTION_BLUETOOTH
CONNECTION_NONE
}
public
static
class
IPAddress
{
public
final
byte
[
]
address
;
public
IPAddress
(
byte
[
]
address
)
{
this
.
address
=
address
;
}
}
public
static
class
NetworkInformation
{
public
final
String
name
;
public
final
ConnectionType
type
;
public
final
long
handle
;
public
final
IPAddress
[
]
ipAddresses
;
public
NetworkInformation
(
String
name
ConnectionType
type
long
handle
IPAddress
[
]
addresses
)
{
this
.
name
=
name
;
this
.
type
=
type
;
this
.
handle
=
handle
;
this
.
ipAddresses
=
addresses
;
}
}
;
static
class
NetworkState
{
private
final
boolean
connected
;
private
final
int
type
;
private
final
int
subtype
;
public
NetworkState
(
boolean
connected
int
type
int
subtype
)
{
this
.
connected
=
connected
;
this
.
type
=
type
;
this
.
subtype
=
subtype
;
}
public
boolean
isConnected
(
)
{
return
connected
;
}
public
int
getNetworkType
(
)
{
return
type
;
}
public
int
getNetworkSubType
(
)
{
return
subtype
;
}
}
SuppressLint
(
"
NewApi
"
)
private
class
SimpleNetworkCallback
extends
NetworkCallback
{
Override
public
void
onAvailable
(
Network
network
)
{
Logging
.
d
(
TAG
"
Network
becomes
available
:
"
+
network
.
toString
(
)
)
;
onNetworkChanged
(
network
)
;
}
Override
public
void
onCapabilitiesChanged
(
Network
network
NetworkCapabilities
networkCapabilities
)
{
Logging
.
d
(
TAG
"
capabilities
changed
:
"
+
networkCapabilities
.
toString
(
)
)
;
onNetworkChanged
(
network
)
;
}
Override
public
void
onLinkPropertiesChanged
(
Network
network
LinkProperties
linkProperties
)
{
Logging
.
d
(
TAG
"
link
properties
changed
:
"
+
linkProperties
.
toString
(
)
)
;
onNetworkChanged
(
network
)
;
}
Override
public
void
onLosing
(
Network
network
int
maxMsToLive
)
{
Logging
.
d
(
TAG
"
Network
"
+
network
.
toString
(
)
+
"
is
about
to
lose
in
"
+
maxMsToLive
+
"
ms
"
)
;
}
Override
public
void
onLost
(
Network
network
)
{
Logging
.
d
(
TAG
"
Network
"
+
network
.
toString
(
)
+
"
is
disconnected
"
)
;
observer
.
onNetworkDisconnect
(
networkToNetId
(
network
)
)
;
}
private
void
onNetworkChanged
(
Network
network
)
{
NetworkInformation
networkInformation
=
connectivityManagerDelegate
.
networkToInfo
(
network
)
;
if
(
networkInformation
!
=
null
)
{
observer
.
onNetworkConnect
(
networkInformation
)
;
}
}
}
static
class
ConnectivityManagerDelegate
{
private
final
ConnectivityManager
connectivityManager
;
ConnectivityManagerDelegate
(
Context
context
)
{
connectivityManager
=
(
ConnectivityManager
)
context
.
getSystemService
(
Context
.
CONNECTIVITY_SERVICE
)
;
}
ConnectivityManagerDelegate
(
)
{
connectivityManager
=
null
;
}
NetworkState
getNetworkState
(
)
{
if
(
connectivityManager
=
=
null
)
{
return
new
NetworkState
(
false
-
1
-
1
)
;
}
return
getNetworkState
(
connectivityManager
.
getActiveNetworkInfo
(
)
)
;
}
SuppressLint
(
"
NewApi
"
)
NetworkState
getNetworkState
(
Network
network
)
{
if
(
connectivityManager
=
=
null
)
{
return
new
NetworkState
(
false
-
1
-
1
)
;
}
return
getNetworkState
(
connectivityManager
.
getNetworkInfo
(
network
)
)
;
}
NetworkState
getNetworkState
(
NetworkInfo
networkInfo
)
{
if
(
networkInfo
=
=
null
|
|
!
networkInfo
.
isConnected
(
)
)
{
return
new
NetworkState
(
false
-
1
-
1
)
;
}
return
new
NetworkState
(
true
networkInfo
.
getType
(
)
networkInfo
.
getSubtype
(
)
)
;
}
SuppressLint
(
"
NewApi
"
)
Network
[
]
getAllNetworks
(
)
{
if
(
connectivityManager
=
=
null
)
{
return
new
Network
[
0
]
;
}
return
connectivityManager
.
getAllNetworks
(
)
;
}
List
<
NetworkInformation
>
getActiveNetworkList
(
)
{
if
(
!
supportNetworkCallback
(
)
)
{
return
null
;
}
ArrayList
<
NetworkInformation
>
netInfoList
=
new
ArrayList
<
NetworkInformation
>
(
)
;
for
(
Network
network
:
getAllNetworks
(
)
)
{
NetworkInformation
info
=
networkToInfo
(
network
)
;
if
(
info
!
=
null
)
{
netInfoList
.
add
(
info
)
;
}
}
return
netInfoList
;
}
SuppressLint
(
"
NewApi
"
)
long
getDefaultNetId
(
)
{
if
(
!
supportNetworkCallback
(
)
)
{
return
INVALID_NET_ID
;
}
final
NetworkInfo
defaultNetworkInfo
=
connectivityManager
.
getActiveNetworkInfo
(
)
;
if
(
defaultNetworkInfo
=
=
null
)
{
return
INVALID_NET_ID
;
}
final
Network
[
]
networks
=
getAllNetworks
(
)
;
long
defaultNetId
=
INVALID_NET_ID
;
for
(
Network
network
:
networks
)
{
if
(
!
hasInternetCapability
(
network
)
)
{
continue
;
}
final
NetworkInfo
networkInfo
=
connectivityManager
.
getNetworkInfo
(
network
)
;
if
(
networkInfo
!
=
null
&
&
networkInfo
.
getType
(
)
=
=
defaultNetworkInfo
.
getType
(
)
)
{
assert
defaultNetId
=
=
INVALID_NET_ID
;
defaultNetId
=
networkToNetId
(
network
)
;
}
}
return
defaultNetId
;
}
SuppressLint
(
"
NewApi
"
)
private
NetworkInformation
networkToInfo
(
Network
network
)
{
LinkProperties
linkProperties
=
connectivityManager
.
getLinkProperties
(
network
)
;
if
(
linkProperties
=
=
null
)
{
Logging
.
w
(
TAG
"
Detected
unknown
network
:
"
+
network
.
toString
(
)
)
;
return
null
;
}
if
(
linkProperties
.
getInterfaceName
(
)
=
=
null
)
{
Logging
.
w
(
TAG
"
Null
interface
name
for
network
"
+
network
.
toString
(
)
)
;
return
null
;
}
NetworkState
networkState
=
getNetworkState
(
network
)
;
if
(
networkState
.
connected
&
&
networkState
.
getNetworkType
(
)
=
=
ConnectivityManager
.
TYPE_VPN
)
{
networkState
=
getNetworkState
(
)
;
}
ConnectionType
connectionType
=
getConnectionType
(
networkState
)
;
if
(
connectionType
=
=
ConnectionType
.
CONNECTION_NONE
)
{
Logging
.
d
(
TAG
"
Network
"
+
network
.
toString
(
)
+
"
is
disconnected
"
)
;
return
null
;
}
if
(
connectionType
=
=
ConnectionType
.
CONNECTION_UNKNOWN
|
|
connectionType
=
=
ConnectionType
.
CONNECTION_UNKNOWN_CELLULAR
)
{
Logging
.
d
(
TAG
"
Network
"
+
network
.
toString
(
)
+
"
connection
type
is
"
+
connectionType
+
"
because
it
has
type
"
+
networkState
.
getNetworkType
(
)
+
"
and
subtype
"
+
networkState
.
getNetworkSubType
(
)
)
;
}
NetworkInformation
networkInformation
=
new
NetworkInformation
(
linkProperties
.
getInterfaceName
(
)
connectionType
networkToNetId
(
network
)
getIPAddresses
(
linkProperties
)
)
;
return
networkInformation
;
}
SuppressLint
(
"
NewApi
"
)
boolean
hasInternetCapability
(
Network
network
)
{
if
(
connectivityManager
=
=
null
)
{
return
false
;
}
final
NetworkCapabilities
capabilities
=
connectivityManager
.
getNetworkCapabilities
(
network
)
;
return
capabilities
!
=
null
&
&
capabilities
.
hasCapability
(
NET_CAPABILITY_INTERNET
)
;
}
SuppressLint
(
"
NewApi
"
)
public
void
registerNetworkCallback
(
NetworkCallback
networkCallback
)
{
connectivityManager
.
registerNetworkCallback
(
new
NetworkRequest
.
Builder
(
)
.
addCapability
(
NET_CAPABILITY_INTERNET
)
.
build
(
)
networkCallback
)
;
}
SuppressLint
(
"
NewApi
"
)
public
void
requestMobileNetwork
(
NetworkCallback
networkCallback
)
{
NetworkRequest
.
Builder
builder
=
new
NetworkRequest
.
Builder
(
)
;
builder
.
addCapability
(
NET_CAPABILITY_INTERNET
)
.
addTransportType
(
TRANSPORT_CELLULAR
)
;
connectivityManager
.
requestNetwork
(
builder
.
build
(
)
networkCallback
)
;
}
SuppressLint
(
"
NewApi
"
)
IPAddress
[
]
getIPAddresses
(
LinkProperties
linkProperties
)
{
IPAddress
[
]
ipAddresses
=
new
IPAddress
[
linkProperties
.
getLinkAddresses
(
)
.
size
(
)
]
;
int
i
=
0
;
for
(
LinkAddress
linkAddress
:
linkProperties
.
getLinkAddresses
(
)
)
{
ipAddresses
[
i
]
=
new
IPAddress
(
linkAddress
.
getAddress
(
)
.
getAddress
(
)
)
;
+
+
i
;
}
return
ipAddresses
;
}
SuppressLint
(
"
NewApi
"
)
public
void
releaseCallback
(
NetworkCallback
networkCallback
)
{
if
(
supportNetworkCallback
(
)
)
{
Logging
.
d
(
TAG
"
Unregister
network
callback
"
)
;
connectivityManager
.
unregisterNetworkCallback
(
networkCallback
)
;
}
}
public
boolean
supportNetworkCallback
(
)
{
return
Build
.
VERSION
.
SDK_INT
>
=
Build
.
VERSION_CODES
.
LOLLIPOP
&
&
connectivityManager
!
=
null
;
}
}
static
class
WifiManagerDelegate
{
private
final
Context
context
;
WifiManagerDelegate
(
Context
context
)
{
this
.
context
=
context
;
}
WifiManagerDelegate
(
)
{
context
=
null
;
}
String
getWifiSSID
(
)
{
final
Intent
intent
=
context
.
registerReceiver
(
null
new
IntentFilter
(
WifiManager
.
NETWORK_STATE_CHANGED_ACTION
)
)
;
if
(
intent
!
=
null
)
{
final
WifiInfo
wifiInfo
=
intent
.
getParcelableExtra
(
WifiManager
.
EXTRA_WIFI_INFO
)
;
if
(
wifiInfo
!
=
null
)
{
final
String
ssid
=
wifiInfo
.
getSSID
(
)
;
if
(
ssid
!
=
null
)
{
return
ssid
;
}
}
}
return
"
"
;
}
}
static
final
long
INVALID_NET_ID
=
-
1
;
private
static
final
String
TAG
=
"
NetworkMonitorAutoDetect
"
;
private
final
Observer
observer
;
private
final
IntentFilter
intentFilter
;
private
final
Context
context
;
private
final
NetworkCallback
mobileNetworkCallback
;
private
final
NetworkCallback
allNetworkCallback
;
private
ConnectivityManagerDelegate
connectivityManagerDelegate
;
private
WifiManagerDelegate
wifiManagerDelegate
;
private
boolean
isRegistered
;
private
ConnectionType
connectionType
;
private
String
wifiSSID
;
public
static
interface
Observer
{
public
void
onConnectionTypeChanged
(
ConnectionType
newConnectionType
)
;
public
void
onNetworkConnect
(
NetworkInformation
networkInfo
)
;
public
void
onNetworkDisconnect
(
long
networkHandle
)
;
}
SuppressLint
(
"
NewApi
"
)
public
NetworkMonitorAutoDetect
(
Observer
observer
Context
context
)
{
this
.
observer
=
observer
;
this
.
context
=
context
;
connectivityManagerDelegate
=
new
ConnectivityManagerDelegate
(
context
)
;
wifiManagerDelegate
=
new
WifiManagerDelegate
(
context
)
;
final
NetworkState
networkState
=
connectivityManagerDelegate
.
getNetworkState
(
)
;
connectionType
=
getConnectionType
(
networkState
)
;
wifiSSID
=
getWifiSSID
(
networkState
)
;
intentFilter
=
new
IntentFilter
(
ConnectivityManager
.
CONNECTIVITY_ACTION
)
;
registerReceiver
(
)
;
if
(
connectivityManagerDelegate
.
supportNetworkCallback
(
)
)
{
NetworkCallback
tempNetworkCallback
=
new
NetworkCallback
(
)
;
try
{
connectivityManagerDelegate
.
requestMobileNetwork
(
tempNetworkCallback
)
;
}
catch
(
java
.
lang
.
SecurityException
e
)
{
Logging
.
w
(
TAG
"
Unable
to
obtain
permission
to
request
a
cellular
network
.
"
)
;
tempNetworkCallback
=
null
;
}
mobileNetworkCallback
=
tempNetworkCallback
;
allNetworkCallback
=
new
SimpleNetworkCallback
(
)
;
connectivityManagerDelegate
.
registerNetworkCallback
(
allNetworkCallback
)
;
}
else
{
mobileNetworkCallback
=
null
;
allNetworkCallback
=
null
;
}
}
void
setConnectivityManagerDelegateForTests
(
ConnectivityManagerDelegate
delegate
)
{
connectivityManagerDelegate
=
delegate
;
}
void
setWifiManagerDelegateForTests
(
WifiManagerDelegate
delegate
)
{
wifiManagerDelegate
=
delegate
;
}
boolean
isReceiverRegisteredForTesting
(
)
{
return
isRegistered
;
}
List
<
NetworkInformation
>
getActiveNetworkList
(
)
{
return
connectivityManagerDelegate
.
getActiveNetworkList
(
)
;
}
public
void
destroy
(
)
{
if
(
allNetworkCallback
!
=
null
)
{
connectivityManagerDelegate
.
releaseCallback
(
allNetworkCallback
)
;
}
if
(
mobileNetworkCallback
!
=
null
)
{
connectivityManagerDelegate
.
releaseCallback
(
mobileNetworkCallback
)
;
}
unregisterReceiver
(
)
;
}
private
void
registerReceiver
(
)
{
if
(
isRegistered
)
return
;
isRegistered
=
true
;
context
.
registerReceiver
(
this
intentFilter
)
;
}
private
void
unregisterReceiver
(
)
{
if
(
!
isRegistered
)
return
;
isRegistered
=
false
;
context
.
unregisterReceiver
(
this
)
;
}
public
NetworkState
getCurrentNetworkState
(
)
{
return
connectivityManagerDelegate
.
getNetworkState
(
)
;
}
public
long
getDefaultNetId
(
)
{
return
connectivityManagerDelegate
.
getDefaultNetId
(
)
;
}
public
static
ConnectionType
getConnectionType
(
NetworkState
networkState
)
{
if
(
!
networkState
.
isConnected
(
)
)
{
return
ConnectionType
.
CONNECTION_NONE
;
}
switch
(
networkState
.
getNetworkType
(
)
)
{
case
ConnectivityManager
.
TYPE_ETHERNET
:
return
ConnectionType
.
CONNECTION_ETHERNET
;
case
ConnectivityManager
.
TYPE_WIFI
:
return
ConnectionType
.
CONNECTION_WIFI
;
case
ConnectivityManager
.
TYPE_WIMAX
:
return
ConnectionType
.
CONNECTION_4G
;
case
ConnectivityManager
.
TYPE_BLUETOOTH
:
return
ConnectionType
.
CONNECTION_BLUETOOTH
;
case
ConnectivityManager
.
TYPE_MOBILE
:
switch
(
networkState
.
getNetworkSubType
(
)
)
{
case
TelephonyManager
.
NETWORK_TYPE_GPRS
:
case
TelephonyManager
.
NETWORK_TYPE_EDGE
:
case
TelephonyManager
.
NETWORK_TYPE_CDMA
:
case
TelephonyManager
.
NETWORK_TYPE_1xRTT
:
case
TelephonyManager
.
NETWORK_TYPE_IDEN
:
return
ConnectionType
.
CONNECTION_2G
;
case
TelephonyManager
.
NETWORK_TYPE_UMTS
:
case
TelephonyManager
.
NETWORK_TYPE_EVDO_0
:
case
TelephonyManager
.
NETWORK_TYPE_EVDO_A
:
case
TelephonyManager
.
NETWORK_TYPE_HSDPA
:
case
TelephonyManager
.
NETWORK_TYPE_HSUPA
:
case
TelephonyManager
.
NETWORK_TYPE_HSPA
:
case
TelephonyManager
.
NETWORK_TYPE_EVDO_B
:
case
TelephonyManager
.
NETWORK_TYPE_EHRPD
:
case
TelephonyManager
.
NETWORK_TYPE_HSPAP
:
return
ConnectionType
.
CONNECTION_3G
;
case
TelephonyManager
.
NETWORK_TYPE_LTE
:
return
ConnectionType
.
CONNECTION_4G
;
default
:
return
ConnectionType
.
CONNECTION_UNKNOWN_CELLULAR
;
}
default
:
return
ConnectionType
.
CONNECTION_UNKNOWN
;
}
}
private
String
getWifiSSID
(
NetworkState
networkState
)
{
if
(
getConnectionType
(
networkState
)
!
=
ConnectionType
.
CONNECTION_WIFI
)
return
"
"
;
return
wifiManagerDelegate
.
getWifiSSID
(
)
;
}
Override
public
void
onReceive
(
Context
context
Intent
intent
)
{
final
NetworkState
networkState
=
getCurrentNetworkState
(
)
;
if
(
ConnectivityManager
.
CONNECTIVITY_ACTION
.
equals
(
intent
.
getAction
(
)
)
)
{
connectionTypeChanged
(
networkState
)
;
}
}
private
void
connectionTypeChanged
(
NetworkState
networkState
)
{
ConnectionType
newConnectionType
=
getConnectionType
(
networkState
)
;
String
newWifiSSID
=
getWifiSSID
(
networkState
)
;
if
(
newConnectionType
=
=
connectionType
&
&
newWifiSSID
.
equals
(
wifiSSID
)
)
return
;
connectionType
=
newConnectionType
;
wifiSSID
=
newWifiSSID
;
Logging
.
d
(
TAG
"
Network
connectivity
changed
type
is
:
"
+
connectionType
)
;
observer
.
onConnectionTypeChanged
(
newConnectionType
)
;
}
SuppressLint
(
"
NewApi
"
)
private
static
long
networkToNetId
(
Network
network
)
{
if
(
Build
.
VERSION
.
SDK_INT
>
=
Build
.
VERSION_CODES
.
M
)
{
return
network
.
getNetworkHandle
(
)
;
}
return
Integer
.
parseInt
(
network
.
toString
(
)
)
;
}
}
