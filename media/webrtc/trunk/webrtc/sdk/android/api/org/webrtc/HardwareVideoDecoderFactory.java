package
org
.
webrtc
;
import
static
org
.
webrtc
.
MediaCodecUtils
.
EXYNOS_PREFIX
;
import
static
org
.
webrtc
.
MediaCodecUtils
.
INTEL_PREFIX
;
import
static
org
.
webrtc
.
MediaCodecUtils
.
NVIDIA_PREFIX
;
import
static
org
.
webrtc
.
MediaCodecUtils
.
QCOM_PREFIX
;
import
android
.
media
.
MediaCodecInfo
;
import
android
.
media
.
MediaCodecInfo
.
CodecCapabilities
;
import
android
.
media
.
MediaCodecList
;
import
android
.
os
.
Build
;
SuppressWarnings
(
"
deprecation
"
)
public
class
HardwareVideoDecoderFactory
implements
VideoDecoderFactory
{
private
static
final
String
TAG
=
"
HardwareVideoDecoderFactory
"
;
private
final
EglBase
.
Context
sharedContext
;
private
final
boolean
fallbackToSoftware
;
Deprecated
public
HardwareVideoDecoderFactory
(
)
{
this
(
null
)
;
}
public
HardwareVideoDecoderFactory
(
EglBase
.
Context
sharedContext
)
{
this
(
sharedContext
true
)
;
}
HardwareVideoDecoderFactory
(
EglBase
.
Context
sharedContext
boolean
fallbackToSoftware
)
{
this
.
sharedContext
=
sharedContext
;
this
.
fallbackToSoftware
=
fallbackToSoftware
;
}
Override
public
VideoDecoder
createDecoder
(
String
codecType
)
{
VideoCodecType
type
=
VideoCodecType
.
valueOf
(
codecType
)
;
MediaCodecInfo
info
=
findCodecForType
(
type
)
;
if
(
info
=
=
null
)
{
if
(
fallbackToSoftware
)
{
SoftwareVideoDecoderFactory
softwareVideoDecoderFactory
=
new
SoftwareVideoDecoderFactory
(
)
;
return
softwareVideoDecoderFactory
.
createDecoder
(
codecType
)
;
}
else
{
return
null
;
}
}
CodecCapabilities
capabilities
=
info
.
getCapabilitiesForType
(
type
.
mimeType
(
)
)
;
return
new
HardwareVideoDecoder
(
info
.
getName
(
)
type
MediaCodecUtils
.
selectColorFormat
(
MediaCodecUtils
.
DECODER_COLOR_FORMATS
capabilities
)
sharedContext
)
;
}
private
MediaCodecInfo
findCodecForType
(
VideoCodecType
type
)
{
if
(
Build
.
VERSION
.
SDK_INT
<
Build
.
VERSION_CODES
.
KITKAT
)
{
return
null
;
}
for
(
int
i
=
0
;
i
<
MediaCodecList
.
getCodecCount
(
)
;
+
+
i
)
{
MediaCodecInfo
info
=
null
;
try
{
info
=
MediaCodecList
.
getCodecInfoAt
(
i
)
;
}
catch
(
IllegalArgumentException
e
)
{
Logging
.
e
(
TAG
"
Cannot
retrieve
encoder
codec
info
"
e
)
;
}
if
(
info
=
=
null
|
|
info
.
isEncoder
(
)
)
{
continue
;
}
if
(
isSupportedCodec
(
info
type
)
)
{
return
info
;
}
}
return
null
;
}
private
boolean
isSupportedCodec
(
MediaCodecInfo
info
VideoCodecType
type
)
{
if
(
!
MediaCodecUtils
.
codecSupportsType
(
info
type
)
)
{
return
false
;
}
if
(
MediaCodecUtils
.
selectColorFormat
(
MediaCodecUtils
.
DECODER_COLOR_FORMATS
info
.
getCapabilitiesForType
(
type
.
mimeType
(
)
)
)
=
=
null
)
{
return
false
;
}
return
isHardwareSupported
(
info
type
)
;
}
private
boolean
isHardwareSupported
(
MediaCodecInfo
info
VideoCodecType
type
)
{
String
name
=
info
.
getName
(
)
;
switch
(
type
)
{
case
VP8
:
return
name
.
startsWith
(
QCOM_PREFIX
)
|
|
name
.
startsWith
(
INTEL_PREFIX
)
|
|
name
.
startsWith
(
EXYNOS_PREFIX
)
|
|
name
.
startsWith
(
NVIDIA_PREFIX
)
;
case
VP9
:
return
name
.
startsWith
(
QCOM_PREFIX
)
|
|
name
.
startsWith
(
EXYNOS_PREFIX
)
;
case
H264
:
return
name
.
startsWith
(
QCOM_PREFIX
)
|
|
name
.
startsWith
(
INTEL_PREFIX
)
|
|
name
.
startsWith
(
EXYNOS_PREFIX
)
;
default
:
return
false
;
}
}
}
