package
org
.
webrtc
;
import
android
.
annotation
.
TargetApi
;
import
android
.
app
.
Activity
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
hardware
.
display
.
DisplayManager
;
import
android
.
hardware
.
display
.
VirtualDisplay
;
import
android
.
media
.
projection
.
MediaProjection
;
import
android
.
media
.
projection
.
MediaProjectionManager
;
import
android
.
view
.
Surface
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
TargetApi
(
21
)
public
class
ScreenCapturerAndroid
implements
VideoCapturer
SurfaceTextureHelper
.
OnTextureFrameAvailableListener
{
private
static
final
int
DISPLAY_FLAGS
=
DisplayManager
.
VIRTUAL_DISPLAY_FLAG_PUBLIC
|
DisplayManager
.
VIRTUAL_DISPLAY_FLAG_PRESENTATION
;
private
static
final
int
VIRTUAL_DISPLAY_DPI
=
400
;
private
final
Intent
mediaProjectionPermissionResultData
;
private
final
MediaProjection
.
Callback
mediaProjectionCallback
;
private
int
width
;
private
int
height
;
private
VirtualDisplay
virtualDisplay
;
private
SurfaceTextureHelper
surfaceTextureHelper
;
private
CapturerObserver
capturerObserver
;
private
long
numCapturedFrames
=
0
;
private
MediaProjection
mediaProjection
;
private
boolean
isDisposed
=
false
;
private
MediaProjectionManager
mediaProjectionManager
;
public
ScreenCapturerAndroid
(
Intent
mediaProjectionPermissionResultData
MediaProjection
.
Callback
mediaProjectionCallback
)
{
this
.
mediaProjectionPermissionResultData
=
mediaProjectionPermissionResultData
;
this
.
mediaProjectionCallback
=
mediaProjectionCallback
;
}
private
void
checkNotDisposed
(
)
{
if
(
isDisposed
)
{
throw
new
RuntimeException
(
"
capturer
is
disposed
.
"
)
;
}
}
Override
public
synchronized
void
initialize
(
final
SurfaceTextureHelper
surfaceTextureHelper
final
Context
applicationContext
final
VideoCapturer
.
CapturerObserver
capturerObserver
)
{
checkNotDisposed
(
)
;
if
(
capturerObserver
=
=
null
)
{
throw
new
RuntimeException
(
"
capturerObserver
not
set
.
"
)
;
}
this
.
capturerObserver
=
capturerObserver
;
if
(
surfaceTextureHelper
=
=
null
)
{
throw
new
RuntimeException
(
"
surfaceTextureHelper
not
set
.
"
)
;
}
this
.
surfaceTextureHelper
=
surfaceTextureHelper
;
mediaProjectionManager
=
(
MediaProjectionManager
)
applicationContext
.
getSystemService
(
Context
.
MEDIA_PROJECTION_SERVICE
)
;
}
Override
public
synchronized
void
startCapture
(
final
int
width
final
int
height
final
int
ignoredFramerate
)
{
checkNotDisposed
(
)
;
this
.
width
=
width
;
this
.
height
=
height
;
mediaProjection
=
mediaProjectionManager
.
getMediaProjection
(
Activity
.
RESULT_OK
mediaProjectionPermissionResultData
)
;
mediaProjection
.
registerCallback
(
mediaProjectionCallback
surfaceTextureHelper
.
getHandler
(
)
)
;
createVirtualDisplay
(
)
;
capturerObserver
.
onCapturerStarted
(
true
)
;
surfaceTextureHelper
.
startListening
(
ScreenCapturerAndroid
.
this
)
;
}
Override
public
synchronized
void
stopCapture
(
)
{
checkNotDisposed
(
)
;
ThreadUtils
.
invokeAtFrontUninterruptibly
(
surfaceTextureHelper
.
getHandler
(
)
new
Runnable
(
)
{
Override
public
void
run
(
)
{
surfaceTextureHelper
.
stopListening
(
)
;
capturerObserver
.
onCapturerStopped
(
)
;
if
(
virtualDisplay
!
=
null
)
{
virtualDisplay
.
release
(
)
;
virtualDisplay
=
null
;
}
if
(
mediaProjection
!
=
null
)
{
mediaProjection
.
unregisterCallback
(
mediaProjectionCallback
)
;
mediaProjection
.
stop
(
)
;
mediaProjection
=
null
;
}
}
}
)
;
}
Override
public
synchronized
void
dispose
(
)
{
isDisposed
=
true
;
}
Override
public
synchronized
void
changeCaptureFormat
(
final
int
width
final
int
height
final
int
ignoredFramerate
)
{
checkNotDisposed
(
)
;
this
.
width
=
width
;
this
.
height
=
height
;
if
(
virtualDisplay
=
=
null
)
{
return
;
}
ThreadUtils
.
invokeAtFrontUninterruptibly
(
surfaceTextureHelper
.
getHandler
(
)
new
Runnable
(
)
{
Override
public
void
run
(
)
{
virtualDisplay
.
release
(
)
;
createVirtualDisplay
(
)
;
}
}
)
;
}
private
void
createVirtualDisplay
(
)
{
surfaceTextureHelper
.
getSurfaceTexture
(
)
.
setDefaultBufferSize
(
width
height
)
;
virtualDisplay
=
mediaProjection
.
createVirtualDisplay
(
"
WebRTC_ScreenCapture
"
width
height
VIRTUAL_DISPLAY_DPI
DISPLAY_FLAGS
new
Surface
(
surfaceTextureHelper
.
getSurfaceTexture
(
)
)
null
null
)
;
}
Override
public
void
onTextureFrameAvailable
(
int
oesTextureId
float
[
]
transformMatrix
long
timestampNs
)
{
numCapturedFrames
+
+
;
capturerObserver
.
onTextureFrameCaptured
(
width
height
oesTextureId
transformMatrix
0
timestampNs
)
;
}
Override
public
boolean
isScreencast
(
)
{
return
true
;
}
public
long
getNumCapturedFrames
(
)
{
return
numCapturedFrames
;
}
}
