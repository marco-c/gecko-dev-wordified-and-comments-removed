package
org
.
webrtc
;
import
static
org
.
webrtc
.
NetworkMonitorAutoDetect
.
ConnectionType
;
import
static
org
.
webrtc
.
NetworkMonitorAutoDetect
.
INVALID_NET_ID
;
import
static
org
.
webrtc
.
NetworkMonitorAutoDetect
.
NetworkInformation
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
content
.
Context
;
import
android
.
os
.
Build
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
NetworkMonitor
{
public
interface
NetworkObserver
{
public
void
onConnectionTypeChanged
(
ConnectionType
connectionType
)
;
}
private
static
final
String
TAG
=
"
NetworkMonitor
"
;
private
static
NetworkMonitor
instance
;
private
final
ArrayList
<
Long
>
nativeNetworkObservers
;
private
final
ArrayList
<
NetworkObserver
>
networkObservers
;
private
NetworkMonitorAutoDetect
autoDetector
;
private
ConnectionType
currentConnectionType
=
ConnectionType
.
CONNECTION_UNKNOWN
;
private
NetworkMonitor
(
)
{
nativeNetworkObservers
=
new
ArrayList
<
Long
>
(
)
;
networkObservers
=
new
ArrayList
<
NetworkObserver
>
(
)
;
}
Deprecated
public
static
void
init
(
Context
context
)
{
}
CalledByNative
public
static
NetworkMonitor
getInstance
(
)
{
if
(
instance
=
=
null
)
{
instance
=
new
NetworkMonitor
(
)
;
}
return
instance
;
}
private
static
void
assertIsTrue
(
boolean
condition
)
{
if
(
!
condition
)
{
throw
new
AssertionError
(
"
Expected
to
be
true
"
)
;
}
}
CalledByNative
private
void
startMonitoring
(
long
nativeObserver
)
{
Logging
.
d
(
TAG
"
Start
monitoring
from
native
observer
"
+
nativeObserver
)
;
nativeNetworkObservers
.
add
(
nativeObserver
)
;
if
(
autoDetector
=
=
null
)
{
createAutoDetector
(
)
;
}
final
NetworkMonitorAutoDetect
.
NetworkState
networkState
=
autoDetector
.
getCurrentNetworkState
(
)
;
updateCurrentConnectionType
(
NetworkMonitorAutoDetect
.
getConnectionType
(
networkState
)
)
;
updateObserverActiveNetworkList
(
nativeObserver
)
;
}
CalledByNative
private
void
stopMonitoring
(
long
nativeObserver
)
{
Logging
.
d
(
TAG
"
Stop
monitoring
from
native
observer
"
+
nativeObserver
)
;
nativeNetworkObservers
.
remove
(
nativeObserver
)
;
if
(
nativeNetworkObservers
.
isEmpty
(
)
)
{
autoDetector
.
destroy
(
)
;
autoDetector
=
null
;
}
}
CalledByNative
private
boolean
networkBindingSupported
(
)
{
return
autoDetector
!
=
null
&
&
autoDetector
.
supportNetworkCallback
(
)
;
}
CalledByNative
private
static
int
androidSdkInt
(
)
{
return
Build
.
VERSION
.
SDK_INT
;
}
private
ConnectionType
getCurrentConnectionType
(
)
{
return
currentConnectionType
;
}
private
long
getCurrentDefaultNetId
(
)
{
return
autoDetector
=
=
null
?
INVALID_NET_ID
:
autoDetector
.
getDefaultNetId
(
)
;
}
private
void
createAutoDetector
(
)
{
autoDetector
=
new
NetworkMonitorAutoDetect
(
new
NetworkMonitorAutoDetect
.
Observer
(
)
{
Override
public
void
onConnectionTypeChanged
(
ConnectionType
newConnectionType
)
{
updateCurrentConnectionType
(
newConnectionType
)
;
}
Override
public
void
onNetworkConnect
(
NetworkInformation
networkInfo
)
{
notifyObserversOfNetworkConnect
(
networkInfo
)
;
}
Override
public
void
onNetworkDisconnect
(
long
networkHandle
)
{
notifyObserversOfNetworkDisconnect
(
networkHandle
)
;
}
}
ContextUtils
.
getApplicationContext
(
)
)
;
}
private
void
updateCurrentConnectionType
(
ConnectionType
newConnectionType
)
{
currentConnectionType
=
newConnectionType
;
notifyObserversOfConnectionTypeChange
(
newConnectionType
)
;
}
private
void
notifyObserversOfConnectionTypeChange
(
ConnectionType
newConnectionType
)
{
for
(
long
nativeObserver
:
nativeNetworkObservers
)
{
nativeNotifyConnectionTypeChanged
(
nativeObserver
)
;
}
for
(
NetworkObserver
observer
:
networkObservers
)
{
observer
.
onConnectionTypeChanged
(
newConnectionType
)
;
}
}
private
void
notifyObserversOfNetworkConnect
(
NetworkInformation
networkInfo
)
{
for
(
long
nativeObserver
:
nativeNetworkObservers
)
{
nativeNotifyOfNetworkConnect
(
nativeObserver
networkInfo
)
;
}
}
private
void
notifyObserversOfNetworkDisconnect
(
long
networkHandle
)
{
for
(
long
nativeObserver
:
nativeNetworkObservers
)
{
nativeNotifyOfNetworkDisconnect
(
nativeObserver
networkHandle
)
;
}
}
private
void
updateObserverActiveNetworkList
(
long
nativeObserver
)
{
List
<
NetworkInformation
>
networkInfoList
=
autoDetector
.
getActiveNetworkList
(
)
;
if
(
networkInfoList
=
=
null
|
|
networkInfoList
.
size
(
)
=
=
0
)
{
return
;
}
NetworkInformation
[
]
networkInfos
=
new
NetworkInformation
[
networkInfoList
.
size
(
)
]
;
networkInfos
=
networkInfoList
.
toArray
(
networkInfos
)
;
nativeNotifyOfActiveNetworkList
(
nativeObserver
networkInfos
)
;
}
public
static
void
addNetworkObserver
(
NetworkObserver
observer
)
{
getInstance
(
)
.
addNetworkObserverInternal
(
observer
)
;
}
private
void
addNetworkObserverInternal
(
NetworkObserver
observer
)
{
networkObservers
.
add
(
observer
)
;
}
public
static
void
removeNetworkObserver
(
NetworkObserver
observer
)
{
getInstance
(
)
.
removeNetworkObserverInternal
(
observer
)
;
}
private
void
removeNetworkObserverInternal
(
NetworkObserver
observer
)
{
networkObservers
.
remove
(
observer
)
;
}
public
static
boolean
isOnline
(
)
{
ConnectionType
connectionType
=
getInstance
(
)
.
getCurrentConnectionType
(
)
;
return
connectionType
!
=
ConnectionType
.
CONNECTION_NONE
;
}
NativeClassQualifiedName
(
"
webrtc
:
:
jni
:
:
AndroidNetworkMonitor
"
)
private
native
void
nativeNotifyConnectionTypeChanged
(
long
nativePtr
)
;
NativeClassQualifiedName
(
"
webrtc
:
:
jni
:
:
AndroidNetworkMonitor
"
)
private
native
void
nativeNotifyOfNetworkConnect
(
long
nativePtr
NetworkInformation
networkInfo
)
;
NativeClassQualifiedName
(
"
webrtc
:
:
jni
:
:
AndroidNetworkMonitor
"
)
private
native
void
nativeNotifyOfNetworkDisconnect
(
long
nativePtr
long
networkHandle
)
;
NativeClassQualifiedName
(
"
webrtc
:
:
jni
:
:
AndroidNetworkMonitor
"
)
private
native
void
nativeNotifyOfActiveNetworkList
(
long
nativePtr
NetworkInformation
[
]
networkInfos
)
;
static
void
resetInstanceForTests
(
)
{
instance
=
new
NetworkMonitor
(
)
;
}
static
void
createAutoDetectorForTest
(
)
{
getInstance
(
)
.
createAutoDetector
(
)
;
}
static
NetworkMonitorAutoDetect
getAutoDetectorForTest
(
)
{
return
getInstance
(
)
.
autoDetector
;
}
}
