package
org
.
webrtc
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
public
class
PeerConnection
{
public
enum
IceGatheringState
{
NEW
GATHERING
COMPLETE
}
public
enum
IceConnectionState
{
NEW
CHECKING
CONNECTED
COMPLETED
FAILED
DISCONNECTED
CLOSED
}
public
enum
TlsCertPolicy
{
TLS_CERT_POLICY_SECURE
TLS_CERT_POLICY_INSECURE_NO_CHECK
}
public
enum
SignalingState
{
STABLE
HAVE_LOCAL_OFFER
HAVE_LOCAL_PRANSWER
HAVE_REMOTE_OFFER
HAVE_REMOTE_PRANSWER
CLOSED
}
public
static
interface
Observer
{
public
void
onSignalingChange
(
SignalingState
newState
)
;
public
void
onIceConnectionChange
(
IceConnectionState
newState
)
;
public
void
onIceConnectionReceivingChange
(
boolean
receiving
)
;
public
void
onIceGatheringChange
(
IceGatheringState
newState
)
;
public
void
onIceCandidate
(
IceCandidate
candidate
)
;
public
void
onIceCandidatesRemoved
(
IceCandidate
[
]
candidates
)
;
public
void
onAddStream
(
MediaStream
stream
)
;
public
void
onRemoveStream
(
MediaStream
stream
)
;
public
void
onDataChannel
(
DataChannel
dataChannel
)
;
public
void
onRenegotiationNeeded
(
)
;
public
void
onAddTrack
(
RtpReceiver
receiver
MediaStream
[
]
mediaStreams
)
;
}
public
static
class
IceServer
{
Deprecated
public
final
String
uri
;
public
final
List
<
String
>
urls
;
public
final
String
username
;
public
final
String
password
;
public
final
TlsCertPolicy
tlsCertPolicy
;
public
final
String
hostname
;
public
final
List
<
String
>
tlsAlpnProtocols
;
public
final
List
<
String
>
tlsEllipticCurves
;
Deprecated
public
IceServer
(
String
uri
)
{
this
(
uri
"
"
"
"
)
;
}
Deprecated
public
IceServer
(
String
uri
String
username
String
password
)
{
this
(
uri
username
password
TlsCertPolicy
.
TLS_CERT_POLICY_SECURE
)
;
}
Deprecated
public
IceServer
(
String
uri
String
username
String
password
TlsCertPolicy
tlsCertPolicy
)
{
this
(
uri
username
password
tlsCertPolicy
"
"
)
;
}
Deprecated
public
IceServer
(
String
uri
String
username
String
password
TlsCertPolicy
tlsCertPolicy
String
hostname
)
{
this
(
uri
Collections
.
singletonList
(
uri
)
username
password
tlsCertPolicy
hostname
null
null
)
;
}
private
IceServer
(
String
uri
List
<
String
>
urls
String
username
String
password
TlsCertPolicy
tlsCertPolicy
String
hostname
List
<
String
>
tlsAlpnProtocols
List
<
String
>
tlsEllipticCurves
)
{
if
(
uri
=
=
null
|
|
urls
=
=
null
|
|
urls
.
isEmpty
(
)
)
{
throw
new
IllegalArgumentException
(
"
uri
=
=
null
|
|
urls
=
=
null
|
|
urls
.
isEmpty
(
)
"
)
;
}
for
(
String
it
:
urls
)
{
if
(
it
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
urls
element
is
null
:
"
+
urls
)
;
}
}
if
(
username
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
username
=
=
null
"
)
;
}
if
(
password
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
password
=
=
null
"
)
;
}
if
(
hostname
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
hostname
=
=
null
"
)
;
}
this
.
uri
=
uri
;
this
.
urls
=
urls
;
this
.
username
=
username
;
this
.
password
=
password
;
this
.
tlsCertPolicy
=
tlsCertPolicy
;
this
.
hostname
=
hostname
;
this
.
tlsAlpnProtocols
=
tlsAlpnProtocols
;
this
.
tlsEllipticCurves
=
tlsEllipticCurves
;
}
Override
public
String
toString
(
)
{
return
urls
+
"
[
"
+
username
+
"
:
"
+
password
+
"
]
[
"
+
tlsCertPolicy
+
"
]
[
"
+
hostname
+
"
]
[
"
+
tlsAlpnProtocols
+
"
]
[
"
+
tlsEllipticCurves
+
"
]
"
;
}
public
static
Builder
builder
(
String
uri
)
{
return
new
Builder
(
Collections
.
singletonList
(
uri
)
)
;
}
public
static
Builder
builder
(
List
<
String
>
urls
)
{
return
new
Builder
(
urls
)
;
}
public
static
class
Builder
{
private
final
List
<
String
>
urls
;
private
String
username
=
"
"
;
private
String
password
=
"
"
;
private
TlsCertPolicy
tlsCertPolicy
=
TlsCertPolicy
.
TLS_CERT_POLICY_SECURE
;
private
String
hostname
=
"
"
;
private
List
<
String
>
tlsAlpnProtocols
;
private
List
<
String
>
tlsEllipticCurves
;
private
Builder
(
List
<
String
>
urls
)
{
if
(
urls
=
=
null
|
|
urls
.
isEmpty
(
)
)
{
throw
new
IllegalArgumentException
(
"
urls
=
=
null
|
|
urls
.
isEmpty
(
)
:
"
+
urls
)
;
}
this
.
urls
=
urls
;
}
public
Builder
setUsername
(
String
username
)
{
this
.
username
=
username
;
return
this
;
}
public
Builder
setPassword
(
String
password
)
{
this
.
password
=
password
;
return
this
;
}
public
Builder
setTlsCertPolicy
(
TlsCertPolicy
tlsCertPolicy
)
{
this
.
tlsCertPolicy
=
tlsCertPolicy
;
return
this
;
}
public
Builder
setHostname
(
String
hostname
)
{
this
.
hostname
=
hostname
;
return
this
;
}
public
Builder
setTlsAlpnProtocols
(
List
<
String
>
tlsAlpnProtocols
)
{
this
.
tlsAlpnProtocols
=
tlsAlpnProtocols
;
return
this
;
}
public
Builder
setTlsEllipticCurves
(
List
<
String
>
tlsEllipticCurves
)
{
this
.
tlsEllipticCurves
=
tlsEllipticCurves
;
return
this
;
}
public
IceServer
createIceServer
(
)
{
return
new
IceServer
(
urls
.
get
(
0
)
urls
username
password
tlsCertPolicy
hostname
tlsAlpnProtocols
tlsEllipticCurves
)
;
}
}
}
public
enum
IceTransportsType
{
NONE
RELAY
NOHOST
ALL
}
public
enum
BundlePolicy
{
BALANCED
MAXBUNDLE
MAXCOMPAT
}
public
enum
RtcpMuxPolicy
{
NEGOTIATE
REQUIRE
}
public
enum
TcpCandidatePolicy
{
ENABLED
DISABLED
}
public
enum
CandidateNetworkPolicy
{
ALL
LOW_COST
}
public
enum
KeyType
{
RSA
ECDSA
}
public
enum
ContinualGatheringPolicy
{
GATHER_ONCE
GATHER_CONTINUALLY
}
public
static
class
IntervalRange
{
private
final
int
min
;
private
final
int
max
;
public
IntervalRange
(
int
min
int
max
)
{
this
.
min
=
min
;
this
.
max
=
max
;
}
public
int
getMin
(
)
{
return
min
;
}
public
int
getMax
(
)
{
return
max
;
}
}
public
static
class
RTCConfiguration
{
public
IceTransportsType
iceTransportsType
;
public
List
<
IceServer
>
iceServers
;
public
BundlePolicy
bundlePolicy
;
public
RtcpMuxPolicy
rtcpMuxPolicy
;
public
TcpCandidatePolicy
tcpCandidatePolicy
;
public
CandidateNetworkPolicy
candidateNetworkPolicy
;
public
int
audioJitterBufferMaxPackets
;
public
boolean
audioJitterBufferFastAccelerate
;
public
int
iceConnectionReceivingTimeout
;
public
int
iceBackupCandidatePairPingInterval
;
public
KeyType
keyType
;
public
ContinualGatheringPolicy
continualGatheringPolicy
;
public
int
iceCandidatePoolSize
;
public
boolean
pruneTurnPorts
;
public
boolean
presumeWritableWhenFullyRelayed
;
public
Integer
iceCheckMinInterval
;
public
boolean
disableIPv6OnWifi
;
public
int
maxIPv6Networks
;
public
IntervalRange
iceRegatherIntervalRange
;
public
TurnCustomizer
turnCustomizer
;
public
RTCConfiguration
(
List
<
IceServer
>
iceServers
)
{
iceTransportsType
=
IceTransportsType
.
ALL
;
bundlePolicy
=
BundlePolicy
.
BALANCED
;
rtcpMuxPolicy
=
RtcpMuxPolicy
.
REQUIRE
;
tcpCandidatePolicy
=
TcpCandidatePolicy
.
ENABLED
;
candidateNetworkPolicy
=
CandidateNetworkPolicy
.
ALL
;
this
.
iceServers
=
iceServers
;
audioJitterBufferMaxPackets
=
50
;
audioJitterBufferFastAccelerate
=
false
;
iceConnectionReceivingTimeout
=
-
1
;
iceBackupCandidatePairPingInterval
=
-
1
;
keyType
=
KeyType
.
ECDSA
;
continualGatheringPolicy
=
ContinualGatheringPolicy
.
GATHER_ONCE
;
iceCandidatePoolSize
=
0
;
pruneTurnPorts
=
false
;
presumeWritableWhenFullyRelayed
=
false
;
iceCheckMinInterval
=
null
;
disableIPv6OnWifi
=
false
;
maxIPv6Networks
=
5
;
iceRegatherIntervalRange
=
null
;
}
}
;
private
final
List
<
MediaStream
>
localStreams
=
new
ArrayList
<
>
(
)
;
private
final
long
nativePeerConnection
;
private
final
long
nativeObserver
;
private
List
<
RtpSender
>
senders
=
new
ArrayList
<
>
(
)
;
private
List
<
RtpReceiver
>
receivers
=
new
ArrayList
<
>
(
)
;
PeerConnection
(
long
nativePeerConnection
long
nativeObserver
)
{
this
.
nativePeerConnection
=
nativePeerConnection
;
this
.
nativeObserver
=
nativeObserver
;
}
public
native
SessionDescription
getLocalDescription
(
)
;
public
native
SessionDescription
getRemoteDescription
(
)
;
public
native
DataChannel
createDataChannel
(
String
label
DataChannel
.
Init
init
)
;
public
native
void
createOffer
(
SdpObserver
observer
MediaConstraints
constraints
)
;
public
native
void
createAnswer
(
SdpObserver
observer
MediaConstraints
constraints
)
;
public
native
void
setLocalDescription
(
SdpObserver
observer
SessionDescription
sdp
)
;
public
native
void
setRemoteDescription
(
SdpObserver
observer
SessionDescription
sdp
)
;
public
native
void
setAudioPlayout
(
boolean
playout
)
;
public
native
void
setAudioRecording
(
boolean
recording
)
;
public
boolean
setConfiguration
(
RTCConfiguration
config
)
{
return
nativeSetConfiguration
(
config
nativeObserver
)
;
}
public
boolean
addIceCandidate
(
IceCandidate
candidate
)
{
return
nativeAddIceCandidate
(
candidate
.
sdpMid
candidate
.
sdpMLineIndex
candidate
.
sdp
)
;
}
public
boolean
removeIceCandidates
(
final
IceCandidate
[
]
candidates
)
{
return
nativeRemoveIceCandidates
(
candidates
)
;
}
public
boolean
addStream
(
MediaStream
stream
)
{
boolean
ret
=
nativeAddLocalStream
(
stream
.
nativeStream
)
;
if
(
!
ret
)
{
return
false
;
}
localStreams
.
add
(
stream
)
;
return
true
;
}
public
void
removeStream
(
MediaStream
stream
)
{
nativeRemoveLocalStream
(
stream
.
nativeStream
)
;
localStreams
.
remove
(
stream
)
;
}
public
RtpSender
createSender
(
String
kind
String
stream_id
)
{
RtpSender
new_sender
=
nativeCreateSender
(
kind
stream_id
)
;
if
(
new_sender
!
=
null
)
{
senders
.
add
(
new_sender
)
;
}
return
new_sender
;
}
public
List
<
RtpSender
>
getSenders
(
)
{
for
(
RtpSender
sender
:
senders
)
{
sender
.
dispose
(
)
;
}
senders
=
nativeGetSenders
(
)
;
return
Collections
.
unmodifiableList
(
senders
)
;
}
public
List
<
RtpReceiver
>
getReceivers
(
)
{
for
(
RtpReceiver
receiver
:
receivers
)
{
receiver
.
dispose
(
)
;
}
receivers
=
nativeGetReceivers
(
)
;
return
Collections
.
unmodifiableList
(
receivers
)
;
}
Deprecated
public
boolean
getStats
(
StatsObserver
observer
MediaStreamTrack
track
)
{
return
nativeOldGetStats
(
observer
(
track
=
=
null
)
?
0
:
track
.
nativeTrack
)
;
}
public
void
getStats
(
RTCStatsCollectorCallback
callback
)
{
nativeNewGetStats
(
callback
)
;
}
public
native
boolean
setBitrate
(
Integer
min
Integer
current
Integer
max
)
;
public
boolean
startRtcEventLog
(
int
file_descriptor
int
max_size_bytes
)
{
return
nativeStartRtcEventLog
(
file_descriptor
max_size_bytes
)
;
}
public
void
stopRtcEventLog
(
)
{
nativeStopRtcEventLog
(
)
;
}
public
native
SignalingState
signalingState
(
)
;
public
native
IceConnectionState
iceConnectionState
(
)
;
public
native
IceGatheringState
iceGatheringState
(
)
;
public
native
void
close
(
)
;
public
void
dispose
(
)
{
close
(
)
;
for
(
MediaStream
stream
:
localStreams
)
{
nativeRemoveLocalStream
(
stream
.
nativeStream
)
;
stream
.
dispose
(
)
;
}
localStreams
.
clear
(
)
;
for
(
RtpSender
sender
:
senders
)
{
sender
.
dispose
(
)
;
}
senders
.
clear
(
)
;
for
(
RtpReceiver
receiver
:
receivers
)
{
receiver
.
dispose
(
)
;
}
receivers
.
clear
(
)
;
JniCommon
.
nativeReleaseRef
(
nativePeerConnection
)
;
freeObserver
(
nativeObserver
)
;
}
private
static
native
void
freeObserver
(
long
nativeObserver
)
;
public
native
boolean
nativeSetConfiguration
(
RTCConfiguration
config
long
nativeObserver
)
;
private
native
boolean
nativeAddIceCandidate
(
String
sdpMid
int
sdpMLineIndex
String
iceCandidateSdp
)
;
private
native
boolean
nativeRemoveIceCandidates
(
final
IceCandidate
[
]
candidates
)
;
private
native
boolean
nativeAddLocalStream
(
long
nativeStream
)
;
private
native
void
nativeRemoveLocalStream
(
long
nativeStream
)
;
private
native
boolean
nativeOldGetStats
(
StatsObserver
observer
long
nativeTrack
)
;
private
native
void
nativeNewGetStats
(
RTCStatsCollectorCallback
callback
)
;
private
native
RtpSender
nativeCreateSender
(
String
kind
String
stream_id
)
;
private
native
List
<
RtpSender
>
nativeGetSenders
(
)
;
private
native
List
<
RtpReceiver
>
nativeGetReceivers
(
)
;
private
native
boolean
nativeStartRtcEventLog
(
int
file_descriptor
int
max_size_bytes
)
;
private
native
void
nativeStopRtcEventLog
(
)
;
}
