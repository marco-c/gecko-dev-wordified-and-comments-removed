package
org
.
webrtc
;
import
android
.
graphics
.
Point
;
import
android
.
opengl
.
Matrix
;
import
android
.
view
.
View
;
public
class
RendererCommon
{
public
static
interface
RendererEvents
{
public
void
onFirstFrameRendered
(
)
;
public
void
onFrameResolutionChanged
(
int
videoWidth
int
videoHeight
int
rotation
)
;
}
public
static
interface
GlDrawer
{
void
drawOes
(
int
oesTextureId
float
[
]
texMatrix
int
frameWidth
int
frameHeight
int
viewportX
int
viewportY
int
viewportWidth
int
viewportHeight
)
;
void
drawRgb
(
int
textureId
float
[
]
texMatrix
int
frameWidth
int
frameHeight
int
viewportX
int
viewportY
int
viewportWidth
int
viewportHeight
)
;
void
drawYuv
(
int
[
]
yuvTextures
float
[
]
texMatrix
int
frameWidth
int
frameHeight
int
viewportX
int
viewportY
int
viewportWidth
int
viewportHeight
)
;
void
release
(
)
;
}
public
static
class
VideoLayoutMeasure
{
private
ScalingType
scalingTypeMatchOrientation
=
ScalingType
.
SCALE_ASPECT_BALANCED
;
private
ScalingType
scalingTypeMismatchOrientation
=
ScalingType
.
SCALE_ASPECT_BALANCED
;
public
void
setScalingType
(
ScalingType
scalingType
)
{
this
.
scalingTypeMatchOrientation
=
scalingType
;
this
.
scalingTypeMismatchOrientation
=
scalingType
;
}
public
void
setScalingType
(
ScalingType
scalingTypeMatchOrientation
ScalingType
scalingTypeMismatchOrientation
)
{
this
.
scalingTypeMatchOrientation
=
scalingTypeMatchOrientation
;
this
.
scalingTypeMismatchOrientation
=
scalingTypeMismatchOrientation
;
}
public
Point
measure
(
int
widthSpec
int
heightSpec
int
frameWidth
int
frameHeight
)
{
final
int
maxWidth
=
View
.
getDefaultSize
(
Integer
.
MAX_VALUE
widthSpec
)
;
final
int
maxHeight
=
View
.
getDefaultSize
(
Integer
.
MAX_VALUE
heightSpec
)
;
if
(
frameWidth
=
=
0
|
|
frameHeight
=
=
0
|
|
maxWidth
=
=
0
|
|
maxHeight
=
=
0
)
{
return
new
Point
(
maxWidth
maxHeight
)
;
}
final
float
frameAspect
=
frameWidth
/
(
float
)
frameHeight
;
final
float
displayAspect
=
maxWidth
/
(
float
)
maxHeight
;
final
ScalingType
scalingType
=
(
frameAspect
>
1
.
0f
)
=
=
(
displayAspect
>
1
.
0f
)
?
scalingTypeMatchOrientation
:
scalingTypeMismatchOrientation
;
final
Point
layoutSize
=
getDisplaySize
(
scalingType
frameAspect
maxWidth
maxHeight
)
;
if
(
View
.
MeasureSpec
.
getMode
(
widthSpec
)
=
=
View
.
MeasureSpec
.
EXACTLY
)
{
layoutSize
.
x
=
maxWidth
;
}
if
(
View
.
MeasureSpec
.
getMode
(
heightSpec
)
=
=
View
.
MeasureSpec
.
EXACTLY
)
{
layoutSize
.
y
=
maxHeight
;
}
return
layoutSize
;
}
}
public
static
enum
ScalingType
{
SCALE_ASPECT_FIT
SCALE_ASPECT_FILL
SCALE_ASPECT_BALANCED
}
private
static
float
BALANCED_VISIBLE_FRACTION
=
0
.
5625f
;
public
static
final
float
[
]
identityMatrix
(
)
{
return
new
float
[
]
{
1
0
0
0
0
1
0
0
0
0
1
0
0
0
0
1
}
;
}
public
static
final
float
[
]
verticalFlipMatrix
(
)
{
return
new
float
[
]
{
1
0
0
0
0
-
1
0
0
0
0
1
0
0
1
0
1
}
;
}
public
static
final
float
[
]
horizontalFlipMatrix
(
)
{
return
new
float
[
]
{
-
1
0
0
0
0
1
0
0
0
0
1
0
1
0
0
1
}
;
}
public
static
float
[
]
rotateTextureMatrix
(
float
[
]
textureMatrix
float
rotationDegree
)
{
final
float
[
]
rotationMatrix
=
new
float
[
16
]
;
Matrix
.
setRotateM
(
rotationMatrix
0
rotationDegree
0
0
1
)
;
adjustOrigin
(
rotationMatrix
)
;
return
multiplyMatrices
(
textureMatrix
rotationMatrix
)
;
}
public
static
float
[
]
multiplyMatrices
(
float
[
]
a
float
[
]
b
)
{
final
float
[
]
resultMatrix
=
new
float
[
16
]
;
Matrix
.
multiplyMM
(
resultMatrix
0
a
0
b
0
)
;
return
resultMatrix
;
}
public
static
float
[
]
getLayoutMatrix
(
boolean
mirror
float
videoAspectRatio
float
displayAspectRatio
)
{
float
scaleX
=
1
;
float
scaleY
=
1
;
if
(
displayAspectRatio
>
videoAspectRatio
)
{
scaleY
=
videoAspectRatio
/
displayAspectRatio
;
}
else
{
scaleX
=
displayAspectRatio
/
videoAspectRatio
;
}
if
(
mirror
)
{
scaleX
*
=
-
1
;
}
final
float
matrix
[
]
=
new
float
[
16
]
;
Matrix
.
setIdentityM
(
matrix
0
)
;
Matrix
.
scaleM
(
matrix
0
scaleX
scaleY
1
)
;
adjustOrigin
(
matrix
)
;
return
matrix
;
}
public
static
android
.
graphics
.
Matrix
convertMatrixToAndroidGraphicsMatrix
(
float
[
]
matrix4x4
)
{
float
[
]
values
=
{
matrix4x4
[
0
*
4
+
0
]
matrix4x4
[
1
*
4
+
0
]
matrix4x4
[
3
*
4
+
0
]
matrix4x4
[
0
*
4
+
1
]
matrix4x4
[
1
*
4
+
1
]
matrix4x4
[
3
*
4
+
1
]
matrix4x4
[
0
*
4
+
3
]
matrix4x4
[
1
*
4
+
3
]
matrix4x4
[
3
*
4
+
3
]
}
;
android
.
graphics
.
Matrix
matrix
=
new
android
.
graphics
.
Matrix
(
)
;
matrix
.
setValues
(
values
)
;
return
matrix
;
}
public
static
float
[
]
convertMatrixFromAndroidGraphicsMatrix
(
android
.
graphics
.
Matrix
matrix
)
{
float
[
]
values
=
new
float
[
9
]
;
matrix
.
getValues
(
values
)
;
float
[
]
matrix4x4
=
{
values
[
0
*
3
+
0
]
values
[
1
*
3
+
0
]
0
values
[
2
*
3
+
0
]
values
[
0
*
3
+
1
]
values
[
1
*
3
+
1
]
0
values
[
2
*
3
+
1
]
0
0
1
0
values
[
0
*
3
+
2
]
values
[
1
*
3
+
2
]
0
values
[
2
*
3
+
2
]
}
;
return
matrix4x4
;
}
public
static
Point
getDisplaySize
(
ScalingType
scalingType
float
videoAspectRatio
int
maxDisplayWidth
int
maxDisplayHeight
)
{
return
getDisplaySize
(
convertScalingTypeToVisibleFraction
(
scalingType
)
videoAspectRatio
maxDisplayWidth
maxDisplayHeight
)
;
}
private
static
void
adjustOrigin
(
float
[
]
matrix
)
{
matrix
[
12
]
-
=
0
.
5f
*
(
matrix
[
0
]
+
matrix
[
4
]
)
;
matrix
[
13
]
-
=
0
.
5f
*
(
matrix
[
1
]
+
matrix
[
5
]
)
;
matrix
[
12
]
+
=
0
.
5f
;
matrix
[
13
]
+
=
0
.
5f
;
}
private
static
float
convertScalingTypeToVisibleFraction
(
ScalingType
scalingType
)
{
switch
(
scalingType
)
{
case
SCALE_ASPECT_FIT
:
return
1
.
0f
;
case
SCALE_ASPECT_FILL
:
return
0
.
0f
;
case
SCALE_ASPECT_BALANCED
:
return
BALANCED_VISIBLE_FRACTION
;
default
:
throw
new
IllegalArgumentException
(
)
;
}
}
private
static
Point
getDisplaySize
(
float
minVisibleFraction
float
videoAspectRatio
int
maxDisplayWidth
int
maxDisplayHeight
)
{
if
(
minVisibleFraction
=
=
0
|
|
videoAspectRatio
=
=
0
)
{
return
new
Point
(
maxDisplayWidth
maxDisplayHeight
)
;
}
final
int
width
=
Math
.
min
(
maxDisplayWidth
Math
.
round
(
maxDisplayHeight
/
minVisibleFraction
*
videoAspectRatio
)
)
;
final
int
height
=
Math
.
min
(
maxDisplayHeight
Math
.
round
(
maxDisplayWidth
/
minVisibleFraction
/
videoAspectRatio
)
)
;
return
new
Point
(
width
height
)
;
}
}
