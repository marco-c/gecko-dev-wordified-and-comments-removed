package
org
.
webrtc
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
junit
.
Assert
.
assertFalse
;
import
static
org
.
junit
.
Assert
.
fail
;
import
android
.
graphics
.
SurfaceTexture
;
import
android
.
opengl
.
GLES20
;
import
android
.
os
.
SystemClock
;
import
android
.
support
.
test
.
filters
.
MediumTest
;
import
android
.
support
.
test
.
filters
.
SmallTest
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
util
.
concurrent
.
CountDownLatch
;
import
org
.
chromium
.
base
.
test
.
BaseJUnit4ClassRunner
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
RunWith
(
BaseJUnit4ClassRunner
.
class
)
public
class
SurfaceTextureHelperTest
{
public
static
final
class
MockTextureListener
implements
SurfaceTextureHelper
.
OnTextureFrameAvailableListener
{
public
int
oesTextureId
;
public
float
[
]
transformMatrix
;
private
boolean
hasNewFrame
=
false
;
private
final
Thread
expectedThread
;
MockTextureListener
(
)
{
this
.
expectedThread
=
null
;
}
MockTextureListener
(
Thread
expectedThread
)
{
this
.
expectedThread
=
expectedThread
;
}
Override
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
onTextureFrameAvailable
(
int
oesTextureId
float
[
]
transformMatrix
long
timestampNs
)
{
if
(
expectedThread
!
=
null
&
&
Thread
.
currentThread
(
)
!
=
expectedThread
)
{
throw
new
IllegalStateException
(
"
onTextureFrameAvailable
called
on
wrong
thread
.
"
)
;
}
this
.
oesTextureId
=
oesTextureId
;
this
.
transformMatrix
=
transformMatrix
;
hasNewFrame
=
true
;
notifyAll
(
)
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
void
waitForNewFrame
(
)
throws
InterruptedException
{
while
(
!
hasNewFrame
)
{
wait
(
)
;
}
hasNewFrame
=
false
;
}
SuppressWarnings
(
"
NoSynchronizedMethodCheck
"
)
public
synchronized
boolean
waitForNewFrame
(
final
long
timeoutMs
)
throws
InterruptedException
{
final
long
startTimeMs
=
SystemClock
.
elapsedRealtime
(
)
;
long
timeRemainingMs
=
timeoutMs
;
while
(
!
hasNewFrame
&
&
timeRemainingMs
>
0
)
{
wait
(
timeRemainingMs
)
;
final
long
elapsedTimeMs
=
SystemClock
.
elapsedRealtime
(
)
-
startTimeMs
;
timeRemainingMs
=
timeoutMs
-
elapsedTimeMs
;
}
final
boolean
didReceiveFrame
=
hasNewFrame
;
hasNewFrame
=
false
;
return
didReceiveFrame
;
}
}
public
static
void
assertClose
(
int
threshold
int
expected
int
actual
)
{
if
(
Math
.
abs
(
expected
-
actual
)
<
=
threshold
)
return
;
fail
(
"
Not
close
enough
threshold
"
+
threshold
+
"
.
Expected
:
"
+
expected
+
"
Actual
:
"
+
actual
)
;
}
Before
public
void
setUp
(
)
{
NativeLibrary
.
initialize
(
new
NativeLibrary
.
DefaultLoader
(
)
)
;
}
Test
MediumTest
public
void
testThreeConstantColorFrames
(
)
throws
InterruptedException
{
final
int
width
=
16
;
final
int
height
=
16
;
final
EglBase
eglBase
=
EglBase
.
create
(
null
EglBase
.
CONFIG_PIXEL_BUFFER
)
;
eglBase
.
createPbufferSurface
(
width
height
)
;
final
GlRectDrawer
drawer
=
new
GlRectDrawer
(
)
;
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
test
"
eglBase
.
getEglBaseContext
(
)
)
;
final
MockTextureListener
listener
=
new
MockTextureListener
(
)
;
surfaceTextureHelper
.
startListening
(
listener
)
;
surfaceTextureHelper
.
getSurfaceTexture
(
)
.
setDefaultBufferSize
(
width
height
)
;
final
EglBase
eglOesBase
=
EglBase
.
create
(
eglBase
.
getEglBaseContext
(
)
EglBase
.
CONFIG_PLAIN
)
;
eglOesBase
.
createSurface
(
surfaceTextureHelper
.
getSurfaceTexture
(
)
)
;
assertEquals
(
eglOesBase
.
surfaceWidth
(
)
width
)
;
assertEquals
(
eglOesBase
.
surfaceHeight
(
)
height
)
;
final
int
red
[
]
=
new
int
[
]
{
79
144
185
}
;
final
int
green
[
]
=
new
int
[
]
{
66
210
162
}
;
final
int
blue
[
]
=
new
int
[
]
{
161
117
158
}
;
for
(
int
i
=
0
;
i
<
3
;
+
+
i
)
{
eglOesBase
.
makeCurrent
(
)
;
GLES20
.
glClearColor
(
red
[
i
]
/
255
.
0f
green
[
i
]
/
255
.
0f
blue
[
i
]
/
255
.
0f
1
.
0f
)
;
GLES20
.
glClear
(
GLES20
.
GL_COLOR_BUFFER_BIT
)
;
eglOesBase
.
swapBuffers
(
)
;
listener
.
waitForNewFrame
(
)
;
eglBase
.
makeCurrent
(
)
;
drawer
.
drawOes
(
listener
.
oesTextureId
listener
.
transformMatrix
width
height
0
0
width
height
)
;
surfaceTextureHelper
.
returnTextureFrame
(
)
;
final
ByteBuffer
rgbaData
=
ByteBuffer
.
allocateDirect
(
width
*
height
*
4
)
;
GLES20
.
glReadPixels
(
0
0
width
height
GLES20
.
GL_RGBA
GLES20
.
GL_UNSIGNED_BYTE
rgbaData
)
;
GlUtil
.
checkNoGLES2Error
(
"
glReadPixels
"
)
;
while
(
rgbaData
.
hasRemaining
(
)
)
{
assertEquals
(
rgbaData
.
get
(
)
&
0xFF
red
[
i
]
)
;
assertEquals
(
rgbaData
.
get
(
)
&
0xFF
green
[
i
]
)
;
assertEquals
(
rgbaData
.
get
(
)
&
0xFF
blue
[
i
]
)
;
assertEquals
(
rgbaData
.
get
(
)
&
0xFF
255
)
;
}
}
drawer
.
release
(
)
;
surfaceTextureHelper
.
dispose
(
)
;
eglBase
.
release
(
)
;
}
Test
MediumTest
public
void
testLateReturnFrame
(
)
throws
InterruptedException
{
final
int
width
=
16
;
final
int
height
=
16
;
final
EglBase
eglBase
=
EglBase
.
create
(
null
EglBase
.
CONFIG_PIXEL_BUFFER
)
;
eglBase
.
createPbufferSurface
(
width
height
)
;
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
test
"
eglBase
.
getEglBaseContext
(
)
)
;
final
MockTextureListener
listener
=
new
MockTextureListener
(
)
;
surfaceTextureHelper
.
startListening
(
listener
)
;
surfaceTextureHelper
.
getSurfaceTexture
(
)
.
setDefaultBufferSize
(
width
height
)
;
final
EglBase
eglOesBase
=
EglBase
.
create
(
eglBase
.
getEglBaseContext
(
)
EglBase
.
CONFIG_PLAIN
)
;
eglOesBase
.
createSurface
(
surfaceTextureHelper
.
getSurfaceTexture
(
)
)
;
assertEquals
(
eglOesBase
.
surfaceWidth
(
)
width
)
;
assertEquals
(
eglOesBase
.
surfaceHeight
(
)
height
)
;
final
int
red
=
79
;
final
int
green
=
66
;
final
int
blue
=
161
;
eglOesBase
.
makeCurrent
(
)
;
GLES20
.
glClearColor
(
red
/
255
.
0f
green
/
255
.
0f
blue
/
255
.
0f
1
.
0f
)
;
GLES20
.
glClear
(
GLES20
.
GL_COLOR_BUFFER_BIT
)
;
eglOesBase
.
swapBuffers
(
)
;
eglOesBase
.
release
(
)
;
listener
.
waitForNewFrame
(
)
;
surfaceTextureHelper
.
dispose
(
)
;
eglBase
.
makeCurrent
(
)
;
final
GlRectDrawer
drawer
=
new
GlRectDrawer
(
)
;
drawer
.
drawOes
(
listener
.
oesTextureId
listener
.
transformMatrix
width
height
0
0
width
height
)
;
drawer
.
release
(
)
;
final
ByteBuffer
rgbaData
=
ByteBuffer
.
allocateDirect
(
width
*
height
*
4
)
;
GLES20
.
glReadPixels
(
0
0
width
height
GLES20
.
GL_RGBA
GLES20
.
GL_UNSIGNED_BYTE
rgbaData
)
;
GlUtil
.
checkNoGLES2Error
(
"
glReadPixels
"
)
;
eglBase
.
release
(
)
;
while
(
rgbaData
.
hasRemaining
(
)
)
{
assertEquals
(
rgbaData
.
get
(
)
&
0xFF
red
)
;
assertEquals
(
rgbaData
.
get
(
)
&
0xFF
green
)
;
assertEquals
(
rgbaData
.
get
(
)
&
0xFF
blue
)
;
assertEquals
(
rgbaData
.
get
(
)
&
0xFF
255
)
;
}
surfaceTextureHelper
.
returnTextureFrame
(
)
;
}
Test
MediumTest
public
void
testDispose
(
)
throws
InterruptedException
{
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
test
"
null
)
;
final
MockTextureListener
listener
=
new
MockTextureListener
(
)
;
surfaceTextureHelper
.
startListening
(
listener
)
;
final
EglBase
eglBase
=
EglBase
.
create
(
null
EglBase
.
CONFIG_PLAIN
)
;
eglBase
.
createSurface
(
surfaceTextureHelper
.
getSurfaceTexture
(
)
)
;
eglBase
.
makeCurrent
(
)
;
assertFalse
(
listener
.
waitForNewFrame
(
1
)
)
;
GLES20
.
glClear
(
GLES20
.
GL_COLOR_BUFFER_BIT
)
;
eglBase
.
swapBuffers
(
)
;
listener
.
waitForNewFrame
(
)
;
surfaceTextureHelper
.
returnTextureFrame
(
)
;
surfaceTextureHelper
.
dispose
(
)
;
GLES20
.
glClear
(
GLES20
.
GL_COLOR_BUFFER_BIT
)
;
eglBase
.
swapBuffers
(
)
;
assertFalse
(
listener
.
waitForNewFrame
(
500
)
)
;
eglBase
.
release
(
)
;
}
Test
SmallTest
public
void
testDisposeImmediately
(
)
{
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
test
"
null
)
;
surfaceTextureHelper
.
dispose
(
)
;
}
Test
MediumTest
public
void
testStopListening
(
)
throws
InterruptedException
{
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
test
"
null
)
;
final
MockTextureListener
listener
=
new
MockTextureListener
(
)
;
surfaceTextureHelper
.
startListening
(
listener
)
;
final
EglBase
eglBase
=
EglBase
.
create
(
null
EglBase
.
CONFIG_PLAIN
)
;
eglBase
.
createSurface
(
surfaceTextureHelper
.
getSurfaceTexture
(
)
)
;
eglBase
.
makeCurrent
(
)
;
assertFalse
(
listener
.
waitForNewFrame
(
1
)
)
;
GLES20
.
glClear
(
GLES20
.
GL_COLOR_BUFFER_BIT
)
;
eglBase
.
swapBuffers
(
)
;
listener
.
waitForNewFrame
(
)
;
surfaceTextureHelper
.
returnTextureFrame
(
)
;
surfaceTextureHelper
.
stopListening
(
)
;
GLES20
.
glClear
(
GLES20
.
GL_COLOR_BUFFER_BIT
)
;
eglBase
.
swapBuffers
(
)
;
assertFalse
(
listener
.
waitForNewFrame
(
500
)
)
;
surfaceTextureHelper
.
dispose
(
)
;
eglBase
.
release
(
)
;
}
Test
SmallTest
public
void
testStopListeningImmediately
(
)
throws
InterruptedException
{
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
test
"
null
)
;
final
MockTextureListener
listener
=
new
MockTextureListener
(
)
;
surfaceTextureHelper
.
startListening
(
listener
)
;
surfaceTextureHelper
.
stopListening
(
)
;
surfaceTextureHelper
.
dispose
(
)
;
}
Test
SmallTest
public
void
testStopListeningImmediatelyOnHandlerThread
(
)
throws
InterruptedException
{
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
test
"
null
)
;
final
MockTextureListener
listener
=
new
MockTextureListener
(
)
;
final
CountDownLatch
stopListeningBarrier
=
new
CountDownLatch
(
1
)
;
final
CountDownLatch
stopListeningBarrierDone
=
new
CountDownLatch
(
1
)
;
surfaceTextureHelper
.
getHandler
(
)
.
post
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
ThreadUtils
.
awaitUninterruptibly
(
stopListeningBarrier
)
;
surfaceTextureHelper
.
stopListening
(
)
;
stopListeningBarrierDone
.
countDown
(
)
;
}
}
)
;
surfaceTextureHelper
.
startListening
(
listener
)
;
stopListeningBarrier
.
countDown
(
)
;
stopListeningBarrierDone
.
await
(
)
;
final
CountDownLatch
barrier
=
new
CountDownLatch
(
1
)
;
surfaceTextureHelper
.
getHandler
(
)
.
post
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
barrier
.
countDown
(
)
;
}
}
)
;
ThreadUtils
.
awaitUninterruptibly
(
barrier
)
;
surfaceTextureHelper
.
startListening
(
listener
)
;
surfaceTextureHelper
.
dispose
(
)
;
}
Test
MediumTest
public
void
testRestartListeningWithNewListener
(
)
throws
InterruptedException
{
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
test
"
null
)
;
final
MockTextureListener
listener1
=
new
MockTextureListener
(
)
;
surfaceTextureHelper
.
startListening
(
listener1
)
;
final
EglBase
eglBase
=
EglBase
.
create
(
null
EglBase
.
CONFIG_PLAIN
)
;
eglBase
.
createSurface
(
surfaceTextureHelper
.
getSurfaceTexture
(
)
)
;
eglBase
.
makeCurrent
(
)
;
assertFalse
(
listener1
.
waitForNewFrame
(
1
)
)
;
GLES20
.
glClear
(
GLES20
.
GL_COLOR_BUFFER_BIT
)
;
eglBase
.
swapBuffers
(
)
;
listener1
.
waitForNewFrame
(
)
;
surfaceTextureHelper
.
returnTextureFrame
(
)
;
surfaceTextureHelper
.
stopListening
(
)
;
final
MockTextureListener
listener2
=
new
MockTextureListener
(
)
;
surfaceTextureHelper
.
startListening
(
listener2
)
;
assertFalse
(
listener2
.
waitForNewFrame
(
1
)
)
;
GLES20
.
glClear
(
GLES20
.
GL_COLOR_BUFFER_BIT
)
;
eglBase
.
swapBuffers
(
)
;
listener2
.
waitForNewFrame
(
)
;
assertFalse
(
listener1
.
waitForNewFrame
(
1
)
)
;
surfaceTextureHelper
.
returnTextureFrame
(
)
;
surfaceTextureHelper
.
dispose
(
)
;
eglBase
.
release
(
)
;
}
Test
MediumTest
public
void
testTexturetoYuv
(
)
throws
InterruptedException
{
final
int
width
=
16
;
final
int
height
=
16
;
final
EglBase
eglBase
=
EglBase
.
create
(
null
EglBase
.
CONFIG_PLAIN
)
;
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
test
"
eglBase
.
getEglBaseContext
(
)
)
;
final
MockTextureListener
listener
=
new
MockTextureListener
(
)
;
surfaceTextureHelper
.
startListening
(
listener
)
;
surfaceTextureHelper
.
getSurfaceTexture
(
)
.
setDefaultBufferSize
(
width
height
)
;
eglBase
.
createSurface
(
surfaceTextureHelper
.
getSurfaceTexture
(
)
)
;
assertEquals
(
eglBase
.
surfaceWidth
(
)
width
)
;
assertEquals
(
eglBase
.
surfaceHeight
(
)
height
)
;
final
int
red
[
]
=
new
int
[
]
{
79
144
185
}
;
final
int
green
[
]
=
new
int
[
]
{
66
210
162
}
;
final
int
blue
[
]
=
new
int
[
]
{
161
117
158
}
;
final
int
ref_y
[
]
=
new
int
[
]
{
81
180
168
}
;
final
int
ref_u
[
]
=
new
int
[
]
{
173
93
122
}
;
final
int
ref_v
[
]
=
new
int
[
]
{
127
103
140
}
;
for
(
int
i
=
0
;
i
<
3
;
+
+
i
)
{
eglBase
.
makeCurrent
(
)
;
GLES20
.
glClearColor
(
red
[
i
]
/
255
.
0f
green
[
i
]
/
255
.
0f
blue
[
i
]
/
255
.
0f
1
.
0f
)
;
GLES20
.
glClear
(
GLES20
.
GL_COLOR_BUFFER_BIT
)
;
eglBase
.
swapBuffers
(
)
;
listener
.
waitForNewFrame
(
)
;
final
VideoFrame
.
I420Buffer
i420
=
surfaceTextureHelper
.
textureToYuv
(
surfaceTextureHelper
.
createTextureBuffer
(
width
height
RendererCommon
.
convertMatrixToAndroidGraphicsMatrix
(
listener
.
transformMatrix
)
)
)
;
surfaceTextureHelper
.
returnTextureFrame
(
)
;
final
ByteBuffer
dataY
=
i420
.
getDataY
(
)
;
final
int
strideY
=
i420
.
getStrideY
(
)
;
for
(
int
y
=
0
;
y
<
height
;
y
+
+
)
{
for
(
int
x
=
0
;
x
<
width
;
x
+
+
)
{
assertClose
(
1
ref_y
[
i
]
dataY
.
get
(
y
*
strideY
+
x
)
&
0xFF
)
;
}
}
final
int
chromaWidth
=
width
/
2
;
final
int
chromaHeight
=
height
/
2
;
final
ByteBuffer
dataU
=
i420
.
getDataU
(
)
;
final
ByteBuffer
dataV
=
i420
.
getDataV
(
)
;
final
int
strideU
=
i420
.
getStrideU
(
)
;
final
int
strideV
=
i420
.
getStrideV
(
)
;
for
(
int
y
=
0
;
y
<
chromaHeight
;
y
+
+
)
{
for
(
int
x
=
0
;
x
<
chromaWidth
;
x
+
+
)
{
assertClose
(
1
ref_u
[
i
]
dataU
.
get
(
y
*
strideU
+
x
)
&
0xFF
)
;
assertClose
(
1
ref_v
[
i
]
dataV
.
get
(
y
*
strideV
+
x
)
&
0xFF
)
;
}
}
}
surfaceTextureHelper
.
dispose
(
)
;
eglBase
.
release
(
)
;
}
}
