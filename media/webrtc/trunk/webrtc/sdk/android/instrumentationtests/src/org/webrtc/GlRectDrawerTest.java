package
org
.
webrtc
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
junit
.
Assert
.
assertTrue
;
import
static
org
.
junit
.
Assert
.
fail
;
import
android
.
graphics
.
SurfaceTexture
;
import
android
.
opengl
.
GLES20
;
import
android
.
support
.
test
.
filters
.
MediumTest
;
import
android
.
support
.
test
.
filters
.
SmallTest
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
util
.
Random
;
import
org
.
chromium
.
base
.
test
.
BaseJUnit4ClassRunner
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
RunWith
(
BaseJUnit4ClassRunner
.
class
)
public
class
GlRectDrawerTest
{
private
static
final
int
WIDTH
=
16
;
private
static
final
int
HEIGHT
=
16
;
private
static
final
int
SEED
=
42
;
private
static
final
float
MAX_DIFF
=
1
.
5f
;
private
static
float
normalizedByte
(
byte
b
)
{
return
(
b
&
0xFF
)
/
255
.
0f
;
}
private
static
float
saturatedConvert
(
float
c
)
{
return
255
.
0f
*
Math
.
max
(
0
Math
.
min
(
c
1
)
)
;
}
private
static
void
assertByteBufferEquals
(
int
width
int
height
ByteBuffer
actual
ByteBuffer
expected
)
{
actual
.
rewind
(
)
;
expected
.
rewind
(
)
;
assertEquals
(
actual
.
remaining
(
)
width
*
height
*
3
)
;
assertEquals
(
expected
.
remaining
(
)
width
*
height
*
3
)
;
for
(
int
y
=
0
;
y
<
height
;
+
+
y
)
{
for
(
int
x
=
0
;
x
<
width
;
+
+
x
)
{
final
int
actualR
=
actual
.
get
(
)
&
0xFF
;
final
int
actualG
=
actual
.
get
(
)
&
0xFF
;
final
int
actualB
=
actual
.
get
(
)
&
0xFF
;
final
int
expectedR
=
expected
.
get
(
)
&
0xFF
;
final
int
expectedG
=
expected
.
get
(
)
&
0xFF
;
final
int
expectedB
=
expected
.
get
(
)
&
0xFF
;
if
(
actualR
!
=
expectedR
|
|
actualG
!
=
expectedG
|
|
actualB
!
=
expectedB
)
{
fail
(
"
ByteBuffers
of
size
"
+
width
+
"
x
"
+
height
+
"
not
equal
at
position
"
+
"
(
"
+
x
+
"
"
+
y
+
"
)
.
Expected
color
(
R
G
B
)
:
"
+
"
(
"
+
expectedR
+
"
"
+
expectedG
+
"
"
+
expectedB
+
"
)
"
+
"
but
was
:
"
+
"
(
"
+
actualR
+
"
"
+
actualG
+
"
"
+
actualB
+
"
)
.
"
)
;
}
}
}
}
private
static
ByteBuffer
stripAlphaChannel
(
ByteBuffer
rgbaBuffer
)
{
rgbaBuffer
.
rewind
(
)
;
assertEquals
(
rgbaBuffer
.
remaining
(
)
%
4
0
)
;
final
int
numberOfPixels
=
rgbaBuffer
.
remaining
(
)
/
4
;
final
ByteBuffer
rgbBuffer
=
ByteBuffer
.
allocateDirect
(
numberOfPixels
*
3
)
;
while
(
rgbaBuffer
.
hasRemaining
(
)
)
{
for
(
int
channel
=
0
;
channel
<
3
;
+
+
channel
)
{
rgbBuffer
.
put
(
rgbaBuffer
.
get
(
)
)
;
}
rgbaBuffer
.
get
(
)
;
}
return
rgbBuffer
;
}
Test
SmallTest
public
void
testRgbRendering
(
)
{
final
EglBase
eglBase
=
EglBase
.
create
(
null
EglBase
.
CONFIG_PIXEL_BUFFER
)
;
eglBase
.
createPbufferSurface
(
WIDTH
HEIGHT
)
;
eglBase
.
makeCurrent
(
)
;
final
ByteBuffer
rgbPlane
=
ByteBuffer
.
allocateDirect
(
WIDTH
*
HEIGHT
*
3
)
;
final
Random
random
=
new
Random
(
SEED
)
;
random
.
nextBytes
(
rgbPlane
.
array
(
)
)
;
final
int
rgbTexture
=
GlUtil
.
generateTexture
(
GLES20
.
GL_TEXTURE_2D
)
;
GLES20
.
glActiveTexture
(
GLES20
.
GL_TEXTURE0
)
;
GLES20
.
glBindTexture
(
GLES20
.
GL_TEXTURE_2D
rgbTexture
)
;
GLES20
.
glTexImage2D
(
GLES20
.
GL_TEXTURE_2D
0
GLES20
.
GL_RGB
WIDTH
HEIGHT
0
GLES20
.
GL_RGB
GLES20
.
GL_UNSIGNED_BYTE
rgbPlane
)
;
GlUtil
.
checkNoGLES2Error
(
"
glTexImage2D
"
)
;
final
GlRectDrawer
drawer
=
new
GlRectDrawer
(
)
;
drawer
.
drawRgb
(
rgbTexture
RendererCommon
.
identityMatrix
(
)
WIDTH
HEIGHT
0
0
WIDTH
HEIGHT
)
;
final
ByteBuffer
rgbaData
=
ByteBuffer
.
allocateDirect
(
WIDTH
*
HEIGHT
*
4
)
;
GLES20
.
glReadPixels
(
0
0
WIDTH
HEIGHT
GLES20
.
GL_RGBA
GLES20
.
GL_UNSIGNED_BYTE
rgbaData
)
;
GlUtil
.
checkNoGLES2Error
(
"
glReadPixels
"
)
;
assertByteBufferEquals
(
WIDTH
HEIGHT
stripAlphaChannel
(
rgbaData
)
rgbPlane
)
;
drawer
.
release
(
)
;
GLES20
.
glDeleteTextures
(
1
new
int
[
]
{
rgbTexture
}
0
)
;
eglBase
.
release
(
)
;
}
Test
SmallTest
public
void
testYuvRendering
(
)
{
EglBase
eglBase
=
EglBase
.
create
(
null
EglBase
.
CONFIG_PIXEL_BUFFER
)
;
eglBase
.
createPbufferSurface
(
WIDTH
HEIGHT
)
;
eglBase
.
makeCurrent
(
)
;
final
ByteBuffer
[
]
yuvPlanes
=
new
ByteBuffer
[
3
]
;
final
Random
random
=
new
Random
(
SEED
)
;
for
(
int
i
=
0
;
i
<
3
;
+
+
i
)
{
yuvPlanes
[
i
]
=
ByteBuffer
.
allocateDirect
(
WIDTH
*
HEIGHT
)
;
random
.
nextBytes
(
yuvPlanes
[
i
]
.
array
(
)
)
;
}
final
int
yuvTextures
[
]
=
new
int
[
3
]
;
for
(
int
i
=
0
;
i
<
3
;
i
+
+
)
{
yuvTextures
[
i
]
=
GlUtil
.
generateTexture
(
GLES20
.
GL_TEXTURE_2D
)
;
}
for
(
int
i
=
0
;
i
<
3
;
+
+
i
)
{
GLES20
.
glActiveTexture
(
GLES20
.
GL_TEXTURE0
+
i
)
;
GLES20
.
glBindTexture
(
GLES20
.
GL_TEXTURE_2D
yuvTextures
[
i
]
)
;
GLES20
.
glTexImage2D
(
GLES20
.
GL_TEXTURE_2D
0
GLES20
.
GL_LUMINANCE
WIDTH
HEIGHT
0
GLES20
.
GL_LUMINANCE
GLES20
.
GL_UNSIGNED_BYTE
yuvPlanes
[
i
]
)
;
GlUtil
.
checkNoGLES2Error
(
"
glTexImage2D
"
)
;
}
final
GlRectDrawer
drawer
=
new
GlRectDrawer
(
)
;
drawer
.
drawYuv
(
yuvTextures
RendererCommon
.
identityMatrix
(
)
WIDTH
HEIGHT
0
0
WIDTH
HEIGHT
)
;
final
ByteBuffer
data
=
ByteBuffer
.
allocateDirect
(
WIDTH
*
HEIGHT
*
4
)
;
GLES20
.
glReadPixels
(
0
0
WIDTH
HEIGHT
GLES20
.
GL_RGBA
GLES20
.
GL_UNSIGNED_BYTE
data
)
;
GlUtil
.
checkNoGLES2Error
(
"
glReadPixels
"
)
;
for
(
int
y
=
0
;
y
<
HEIGHT
;
+
+
y
)
{
for
(
int
x
=
0
;
x
<
WIDTH
;
+
+
x
)
{
final
float
y_luma
=
normalizedByte
(
yuvPlanes
[
0
]
.
get
(
)
)
;
final
float
u_chroma
=
normalizedByte
(
yuvPlanes
[
1
]
.
get
(
)
)
-
0
.
5f
;
final
float
v_chroma
=
normalizedByte
(
yuvPlanes
[
2
]
.
get
(
)
)
-
0
.
5f
;
final
float
expectedRed
=
saturatedConvert
(
y_luma
+
1
.
403f
*
v_chroma
)
;
final
float
expectedGreen
=
saturatedConvert
(
y_luma
-
0
.
344f
*
u_chroma
-
0
.
714f
*
v_chroma
)
;
final
float
expectedBlue
=
saturatedConvert
(
y_luma
+
1
.
77f
*
u_chroma
)
;
final
int
actualRed
=
data
.
get
(
)
&
0xFF
;
final
int
actualGreen
=
data
.
get
(
)
&
0xFF
;
final
int
actualBlue
=
data
.
get
(
)
&
0xFF
;
final
int
actualAlpha
=
data
.
get
(
)
&
0xFF
;
assertTrue
(
Math
.
abs
(
actualRed
-
expectedRed
)
<
MAX_DIFF
)
;
assertTrue
(
Math
.
abs
(
actualGreen
-
expectedGreen
)
<
MAX_DIFF
)
;
assertTrue
(
Math
.
abs
(
actualBlue
-
expectedBlue
)
<
MAX_DIFF
)
;
assertEquals
(
actualAlpha
255
)
;
}
}
drawer
.
release
(
)
;
GLES20
.
glDeleteTextures
(
3
yuvTextures
0
)
;
eglBase
.
release
(
)
;
}
Test
MediumTest
public
void
testOesRendering
(
)
throws
InterruptedException
{
class
StubOesTextureProducer
{
private
final
EglBase
eglBase
;
private
final
GlRectDrawer
drawer
;
private
final
int
rgbTexture
;
public
StubOesTextureProducer
(
EglBase
.
Context
sharedContext
SurfaceTexture
surfaceTexture
int
width
int
height
)
{
eglBase
=
EglBase
.
create
(
sharedContext
EglBase
.
CONFIG_PLAIN
)
;
surfaceTexture
.
setDefaultBufferSize
(
width
height
)
;
eglBase
.
createSurface
(
surfaceTexture
)
;
assertEquals
(
eglBase
.
surfaceWidth
(
)
width
)
;
assertEquals
(
eglBase
.
surfaceHeight
(
)
height
)
;
drawer
=
new
GlRectDrawer
(
)
;
eglBase
.
makeCurrent
(
)
;
rgbTexture
=
GlUtil
.
generateTexture
(
GLES20
.
GL_TEXTURE_2D
)
;
}
public
void
draw
(
ByteBuffer
rgbPlane
)
{
eglBase
.
makeCurrent
(
)
;
GLES20
.
glActiveTexture
(
GLES20
.
GL_TEXTURE0
)
;
GLES20
.
glBindTexture
(
GLES20
.
GL_TEXTURE_2D
rgbTexture
)
;
GLES20
.
glTexImage2D
(
GLES20
.
GL_TEXTURE_2D
0
GLES20
.
GL_RGB
WIDTH
HEIGHT
0
GLES20
.
GL_RGB
GLES20
.
GL_UNSIGNED_BYTE
rgbPlane
)
;
drawer
.
drawRgb
(
rgbTexture
RendererCommon
.
identityMatrix
(
)
WIDTH
HEIGHT
0
0
WIDTH
HEIGHT
)
;
eglBase
.
swapBuffers
(
)
;
}
public
void
release
(
)
{
eglBase
.
makeCurrent
(
)
;
drawer
.
release
(
)
;
GLES20
.
glDeleteTextures
(
1
new
int
[
]
{
rgbTexture
}
0
)
;
eglBase
.
release
(
)
;
}
}
final
EglBase
eglBase
=
EglBase
.
create
(
null
EglBase
.
CONFIG_PIXEL_BUFFER
)
;
eglBase
.
createPbufferSurface
(
WIDTH
HEIGHT
)
;
final
SurfaceTextureHelper
surfaceTextureHelper
=
SurfaceTextureHelper
.
create
(
"
SurfaceTextureHelper
test
"
eglBase
.
getEglBaseContext
(
)
)
;
final
StubOesTextureProducer
oesProducer
=
new
StubOesTextureProducer
(
eglBase
.
getEglBaseContext
(
)
surfaceTextureHelper
.
getSurfaceTexture
(
)
WIDTH
HEIGHT
)
;
final
SurfaceTextureHelperTest
.
MockTextureListener
listener
=
new
SurfaceTextureHelperTest
.
MockTextureListener
(
)
;
surfaceTextureHelper
.
startListening
(
listener
)
;
final
ByteBuffer
rgbPlane
=
ByteBuffer
.
allocateDirect
(
WIDTH
*
HEIGHT
*
3
)
;
final
Random
random
=
new
Random
(
SEED
)
;
random
.
nextBytes
(
rgbPlane
.
array
(
)
)
;
oesProducer
.
draw
(
rgbPlane
)
;
listener
.
waitForNewFrame
(
)
;
eglBase
.
makeCurrent
(
)
;
final
GlRectDrawer
drawer
=
new
GlRectDrawer
(
)
;
drawer
.
drawOes
(
listener
.
oesTextureId
listener
.
transformMatrix
WIDTH
HEIGHT
0
0
WIDTH
HEIGHT
)
;
final
ByteBuffer
rgbaData
=
ByteBuffer
.
allocateDirect
(
WIDTH
*
HEIGHT
*
4
)
;
GLES20
.
glReadPixels
(
0
0
WIDTH
HEIGHT
GLES20
.
GL_RGBA
GLES20
.
GL_UNSIGNED_BYTE
rgbaData
)
;
GlUtil
.
checkNoGLES2Error
(
"
glReadPixels
"
)
;
assertByteBufferEquals
(
WIDTH
HEIGHT
stripAlphaChannel
(
rgbaData
)
rgbPlane
)
;
drawer
.
release
(
)
;
surfaceTextureHelper
.
returnTextureFrame
(
)
;
oesProducer
.
release
(
)
;
surfaceTextureHelper
.
dispose
(
)
;
eglBase
.
release
(
)
;
}
}
