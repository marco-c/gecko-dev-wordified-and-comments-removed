package
org
.
webrtc
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
junit
.
Assert
.
assertFalse
;
import
static
org
.
junit
.
Assert
.
fail
;
import
android
.
annotation
.
TargetApi
;
import
android
.
content
.
Context
;
import
android
.
hardware
.
camera2
.
CameraAccessException
;
import
android
.
hardware
.
camera2
.
CameraDevice
;
import
android
.
hardware
.
camera2
.
CameraManager
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Looper
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
android
.
support
.
test
.
filters
.
LargeTest
;
import
android
.
support
.
test
.
filters
.
MediumTest
;
import
android
.
support
.
test
.
filters
.
SmallTest
;
import
java
.
io
.
IOException
;
import
java
.
util
.
concurrent
.
CountDownLatch
;
import
org
.
chromium
.
base
.
test
.
BaseJUnit4ClassRunner
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
TargetApi
(
21
)
RunWith
(
BaseJUnit4ClassRunner
.
class
)
public
class
Camera2CapturerTest
{
static
final
String
TAG
=
"
Camera2CapturerTest
"
;
private
class
SimpleCamera2
{
final
CameraManager
cameraManager
;
final
LooperThread
looperThread
;
final
CountDownLatch
openDoneSignal
;
final
Object
cameraDeviceLock
;
CameraDevice
cameraDevice
;
boolean
openSucceeded
;
private
class
LooperThread
extends
Thread
{
final
CountDownLatch
startedSignal
=
new
CountDownLatch
(
1
)
;
private
Handler
handler
;
Override
public
void
run
(
)
{
Looper
.
prepare
(
)
;
handler
=
new
Handler
(
)
;
startedSignal
.
countDown
(
)
;
Looper
.
loop
(
)
;
}
public
void
waitToStart
(
)
{
ThreadUtils
.
awaitUninterruptibly
(
startedSignal
)
;
}
public
void
requestStop
(
)
{
handler
.
getLooper
(
)
.
quit
(
)
;
}
public
Handler
getHandler
(
)
{
return
handler
;
}
}
private
class
CameraStateCallback
extends
CameraDevice
.
StateCallback
{
Override
public
void
onClosed
(
CameraDevice
cameraDevice
)
{
Logging
.
d
(
TAG
"
Simple
camera2
closed
.
"
)
;
synchronized
(
cameraDeviceLock
)
{
SimpleCamera2
.
this
.
cameraDevice
=
null
;
}
}
Override
public
void
onDisconnected
(
CameraDevice
cameraDevice
)
{
Logging
.
d
(
TAG
"
Simple
camera2
disconnected
.
"
)
;
synchronized
(
cameraDeviceLock
)
{
SimpleCamera2
.
this
.
cameraDevice
=
null
;
}
}
Override
public
void
onError
(
CameraDevice
cameraDevice
int
errorCode
)
{
Logging
.
w
(
TAG
"
Simple
camera2
error
:
"
+
errorCode
)
;
synchronized
(
cameraDeviceLock
)
{
SimpleCamera2
.
this
.
cameraDevice
=
cameraDevice
;
openSucceeded
=
false
;
}
openDoneSignal
.
countDown
(
)
;
}
Override
public
void
onOpened
(
CameraDevice
cameraDevice
)
{
Logging
.
d
(
TAG
"
Simple
camera2
opened
.
"
)
;
synchronized
(
cameraDeviceLock
)
{
SimpleCamera2
.
this
.
cameraDevice
=
cameraDevice
;
openSucceeded
=
true
;
}
openDoneSignal
.
countDown
(
)
;
}
}
SimpleCamera2
(
Context
context
String
deviceName
)
{
cameraManager
=
(
CameraManager
)
context
.
getSystemService
(
Context
.
CAMERA_SERVICE
)
;
looperThread
=
new
LooperThread
(
)
;
looperThread
.
start
(
)
;
looperThread
.
waitToStart
(
)
;
cameraDeviceLock
=
new
Object
(
)
;
openDoneSignal
=
new
CountDownLatch
(
1
)
;
cameraDevice
=
null
;
Logging
.
d
(
TAG
"
Opening
simple
camera2
.
"
)
;
try
{
cameraManager
.
openCamera
(
deviceName
new
CameraStateCallback
(
)
looperThread
.
getHandler
(
)
)
;
}
catch
(
CameraAccessException
e
)
{
fail
(
"
Simple
camera2
CameraAccessException
:
"
+
e
.
getMessage
(
)
)
;
}
Logging
.
d
(
TAG
"
Waiting
for
simple
camera2
to
open
.
"
)
;
ThreadUtils
.
awaitUninterruptibly
(
openDoneSignal
)
;
synchronized
(
cameraDeviceLock
)
{
if
(
!
openSucceeded
)
{
fail
(
"
Opening
simple
camera2
failed
.
"
)
;
}
}
}
public
void
close
(
)
{
Logging
.
d
(
TAG
"
Closing
simple
camera2
.
"
)
;
synchronized
(
cameraDeviceLock
)
{
if
(
cameraDevice
!
=
null
)
{
cameraDevice
.
close
(
)
;
}
}
looperThread
.
requestStop
(
)
;
ThreadUtils
.
joinUninterruptibly
(
looperThread
)
;
}
}
private
class
TestObjectFactory
extends
CameraVideoCapturerTestFixtures
.
TestObjectFactory
{
Override
public
CameraEnumerator
getCameraEnumerator
(
)
{
return
new
Camera2Enumerator
(
getAppContext
(
)
)
;
}
Override
public
Context
getAppContext
(
)
{
return
InstrumentationRegistry
.
getTargetContext
(
)
;
}
SuppressWarnings
(
"
deprecation
"
)
Override
public
Object
rawOpenCamera
(
String
cameraName
)
{
return
new
SimpleCamera2
(
getAppContext
(
)
cameraName
)
;
}
SuppressWarnings
(
"
deprecation
"
)
Override
public
void
rawCloseCamera
(
Object
camera
)
{
(
(
SimpleCamera2
)
camera
)
.
close
(
)
;
}
}
private
CameraVideoCapturerTestFixtures
fixtures
;
Before
public
void
setUp
(
)
{
fixtures
=
new
CameraVideoCapturerTestFixtures
(
new
TestObjectFactory
(
)
)
;
}
After
public
void
tearDown
(
)
{
fixtures
.
dispose
(
)
;
}
Test
SmallTest
public
void
testCreateAndDispose
(
)
throws
InterruptedException
{
fixtures
.
createCapturerAndDispose
(
)
;
}
Test
SmallTest
public
void
testCreateNonExistingCamera
(
)
throws
InterruptedException
{
fixtures
.
createNonExistingCamera
(
)
;
}
Test
MediumTest
public
void
testCreateCapturerAndRender
(
)
throws
InterruptedException
{
fixtures
.
createCapturerAndRender
(
)
;
}
Test
MediumTest
public
void
testStartFrontFacingVideoCapturer
(
)
throws
InterruptedException
{
fixtures
.
createFrontFacingCapturerAndRender
(
)
;
}
Test
MediumTest
public
void
testStartBackFacingVideoCapturer
(
)
throws
InterruptedException
{
fixtures
.
createBackFacingCapturerAndRender
(
)
;
}
Test
MediumTest
public
void
testSwitchVideoCapturer
(
)
throws
InterruptedException
{
fixtures
.
switchCamera
(
)
;
}
Test
MediumTest
public
void
testCameraEvents
(
)
throws
InterruptedException
{
fixtures
.
cameraEventsInvoked
(
)
;
}
Test
MediumTest
public
void
testUpdateMediaRecorder
(
)
throws
InterruptedException
IOException
{
fixtures
.
updateMediaRecorder
(
true
)
;
}
Test
MediumTest
public
void
testCameraCallsAfterStop
(
)
throws
InterruptedException
{
fixtures
.
cameraCallsAfterStop
(
)
;
}
Test
LargeTest
public
void
testStopRestartVideoSource
(
)
throws
InterruptedException
{
fixtures
.
stopRestartVideoSource
(
)
;
}
Test
LargeTest
public
void
testStartStopWithDifferentResolutions
(
)
throws
InterruptedException
{
fixtures
.
startStopWithDifferentResolutions
(
)
;
}
Test
LargeTest
public
void
testReturnBufferLate
(
)
throws
InterruptedException
{
fixtures
.
returnBufferLate
(
)
;
}
Test
MediumTest
public
void
testReturnBufferLateEndToEnd
(
)
throws
InterruptedException
{
fixtures
.
returnBufferLateEndToEnd
(
)
;
}
Test
LargeTest
public
void
testCameraFreezedEventOnBufferStarvation
(
)
throws
InterruptedException
{
fixtures
.
cameraFreezedEventOnBufferStarvation
(
)
;
}
Test
MediumTest
public
void
testScaleCameraOutput
(
)
throws
InterruptedException
{
fixtures
.
scaleCameraOutput
(
)
;
}
Test
LargeTest
public
void
testStartWhileCameraIsAlreadyOpen
(
)
throws
InterruptedException
{
fixtures
.
startWhileCameraIsAlreadyOpen
(
)
;
}
Test
LargeTest
public
void
testStartWhileCameraIsAlreadyOpenAndCloseCamera
(
)
throws
InterruptedException
{
fixtures
.
startWhileCameraIsAlreadyOpenAndCloseCamera
(
)
;
}
Test
MediumTest
public
void
testStartWhileCameraIsAlreadyOpenAndStop
(
)
throws
InterruptedException
{
fixtures
.
startWhileCameraIsAlreadyOpenAndStop
(
)
;
}
}
