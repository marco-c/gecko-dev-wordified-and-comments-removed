#
include
"
webrtc
/
system_wrappers
/
include
/
rtp_to_ntp_estimator
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
const
uint32_t
kOneMsInNtpFrac
=
4294967
;
const
uint32_t
kTimestampTicksPerMs
=
90
;
}
TEST
(
WrapAroundTests
NoWrap
)
{
EXPECT_EQ
(
0
CheckForWrapArounds
(
0xFFFFFFFF
0xFFFFFFFE
)
)
;
EXPECT_EQ
(
0
CheckForWrapArounds
(
1
0
)
)
;
EXPECT_EQ
(
0
CheckForWrapArounds
(
0x00010000
0x0000FFFF
)
)
;
}
TEST
(
WrapAroundTests
ForwardWrap
)
{
EXPECT_EQ
(
1
CheckForWrapArounds
(
0
0xFFFFFFFF
)
)
;
EXPECT_EQ
(
1
CheckForWrapArounds
(
0
0xFFFF0000
)
)
;
EXPECT_EQ
(
1
CheckForWrapArounds
(
0x0000FFFF
0xFFFFFFFF
)
)
;
EXPECT_EQ
(
1
CheckForWrapArounds
(
0x0000FFFF
0xFFFF0000
)
)
;
}
TEST
(
WrapAroundTests
BackwardWrap
)
{
EXPECT_EQ
(
-
1
CheckForWrapArounds
(
0xFFFFFFFF
0
)
)
;
EXPECT_EQ
(
-
1
CheckForWrapArounds
(
0xFFFF0000
0
)
)
;
EXPECT_EQ
(
-
1
CheckForWrapArounds
(
0xFFFFFFFF
0x0000FFFF
)
)
;
EXPECT_EQ
(
-
1
CheckForWrapArounds
(
0xFFFF0000
0x0000FFFF
)
)
;
}
TEST
(
WrapAroundTests
OldRtcpWrapped_OldRtpTimestamp
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
-
=
kTimestampTicksPerMs
;
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
}
TEST
(
WrapAroundTests
NewRtcpWrapped
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0xFFFFFFFF
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
int64_t
timestamp_ms
=
-
1
;
EXPECT_TRUE
(
estimator
.
Estimate
(
0xFFFFFFFF
&
timestamp_ms
)
)
;
EXPECT_EQ
(
0
timestamp_ms
)
;
}
TEST
(
WrapAroundTests
RtpWrapped
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0xFFFFFFFF
-
2
*
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
int64_t
timestamp_ms
=
-
1
;
EXPECT_TRUE
(
estimator
.
Estimate
(
0xFFFFFFFF
-
2
*
kTimestampTicksPerMs
&
timestamp_ms
)
)
;
EXPECT_EQ
(
0
timestamp_ms
)
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
EXPECT_EQ
(
2
timestamp_ms
)
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
EXPECT_EQ
(
3
timestamp_ms
)
;
}
TEST
(
WrapAroundTests
OldRtp_RtcpsWrapped
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
timestamp
-
=
2
*
kTimestampTicksPerMs
;
int64_t
timestamp_ms
=
-
1
;
EXPECT_FALSE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
}
TEST
(
WrapAroundTests
OldRtp_NewRtcpWrapped
)
{
RtpToNtpEstimator
estimator
;
bool
new_sr
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
1
;
uint32_t
timestamp
=
0xFFFFFFFF
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
timestamp
-
=
kTimestampTicksPerMs
;
int64_t
timestamp_ms
=
-
1
;
EXPECT_TRUE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
EXPECT_EQ
(
0
timestamp_ms
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForZeroNtp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
0
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_FALSE
(
new_sr
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForEqualNtp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
699925050
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
+
+
timestamp
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_FALSE
(
new_sr
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForOldNtp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
1
;
uint32_t
ntp_frac
=
699925050
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
ntp_frac
-
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForEqualTimestamp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
2
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
+
+
ntp_frac
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_FALSE
(
new_sr
)
;
}
TEST
(
UpdateRtcpMeasurementTests
FailsForOldRtpTimestamp
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
0
;
uint32_t
ntp_frac
=
2
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
-
=
kTimestampTicksPerMs
;
EXPECT_FALSE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_FALSE
(
new_sr
)
;
}
TEST
(
UpdateRtcpMeasurementTests
VerifyParameters
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
1
;
uint32_t
ntp_frac
=
2
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
EXPECT_FALSE
(
estimator
.
params
(
)
.
calculated
)
;
ntp_frac
+
=
kOneMsInNtpFrac
;
timestamp
+
=
kTimestampTicksPerMs
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
estimator
.
params
(
)
.
calculated
)
;
EXPECT_DOUBLE_EQ
(
90
.
0
estimator
.
params
(
)
.
frequency_khz
)
;
EXPECT_NE
(
0
.
0
estimator
.
params
(
)
.
offset_ms
)
;
}
TEST
(
RtpToNtpTests
FailsForNoParameters
)
{
RtpToNtpEstimator
estimator
;
uint32_t
ntp_sec
=
1
;
uint32_t
ntp_frac
=
2
;
uint32_t
timestamp
=
0x12345678
;
bool
new_sr
;
EXPECT_TRUE
(
estimator
.
UpdateMeasurements
(
ntp_sec
ntp_frac
timestamp
&
new_sr
)
)
;
EXPECT_TRUE
(
new_sr
)
;
EXPECT_FALSE
(
estimator
.
params
(
)
.
calculated
)
;
int64_t
timestamp_ms
=
-
1
;
EXPECT_FALSE
(
estimator
.
Estimate
(
timestamp
&
timestamp_ms
)
)
;
}
}
;
