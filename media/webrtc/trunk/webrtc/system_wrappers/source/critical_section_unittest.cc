#
include
"
webrtc
/
system_wrappers
/
include
/
critical_section_wrapper
.
h
"
#
include
"
webrtc
/
base
/
platform_thread
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
sleep
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
trace
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
static
void
SwitchProcess
(
)
{
SleepMs
(
1
)
;
}
class
ProtectedCount
{
public
:
explicit
ProtectedCount
(
CriticalSectionWrapper
*
crit_sect
)
:
crit_sect_
(
crit_sect
)
count_
(
0
)
{
}
void
Increment
(
)
{
CriticalSectionScoped
cs
(
crit_sect_
)
;
+
+
count_
;
}
int
Count
(
)
const
{
CriticalSectionScoped
cs
(
crit_sect_
)
;
return
count_
;
}
private
:
CriticalSectionWrapper
*
crit_sect_
;
int
count_
;
}
;
class
CritSectTest
:
public
:
:
testing
:
:
Test
{
public
:
CritSectTest
(
)
{
}
bool
WaitForCount
(
int
target
ProtectedCount
*
count
)
{
int
loop_counter
=
0
;
while
(
count
-
>
Count
(
)
<
target
&
&
loop_counter
<
100
*
target
)
{
+
+
loop_counter
;
SwitchProcess
(
)
;
}
return
(
count
-
>
Count
(
)
>
=
target
)
;
}
}
;
bool
LockUnlockThenStopRunFunction
(
void
*
obj
)
{
ProtectedCount
*
the_count
=
static_cast
<
ProtectedCount
*
>
(
obj
)
;
the_count
-
>
Increment
(
)
;
return
false
;
}
TEST_F
(
CritSectTest
ThreadWakesOnce
)
NO_THREAD_SAFETY_ANALYSIS
{
CriticalSectionWrapper
*
crit_sect
=
CriticalSectionWrapper
:
:
CreateCriticalSection
(
)
;
ProtectedCount
count
(
crit_sect
)
;
rtc
:
:
PlatformThread
thread
(
&
LockUnlockThenStopRunFunction
&
count
"
ThreadWakesOnce
"
)
;
crit_sect
-
>
Enter
(
)
;
thread
.
Start
(
)
;
SwitchProcess
(
)
;
ASSERT_EQ
(
0
count
.
Count
(
)
)
;
crit_sect
-
>
Leave
(
)
;
EXPECT_TRUE
(
WaitForCount
(
1
&
count
)
)
;
thread
.
Stop
(
)
;
delete
crit_sect
;
}
bool
LockUnlockRunFunction
(
void
*
obj
)
{
ProtectedCount
*
the_count
=
static_cast
<
ProtectedCount
*
>
(
obj
)
;
the_count
-
>
Increment
(
)
;
SwitchProcess
(
)
;
return
true
;
}
TEST_F
(
CritSectTest
ThreadWakesTwice
)
NO_THREAD_SAFETY_ANALYSIS
{
CriticalSectionWrapper
*
crit_sect
=
CriticalSectionWrapper
:
:
CreateCriticalSection
(
)
;
ProtectedCount
count
(
crit_sect
)
;
rtc
:
:
PlatformThread
thread
(
&
LockUnlockRunFunction
&
count
"
ThreadWakesTwice
"
)
;
crit_sect
-
>
Enter
(
)
;
thread
.
Start
(
)
;
crit_sect
-
>
Leave
(
)
;
EXPECT_TRUE
(
WaitForCount
(
2
&
count
)
)
;
EXPECT_LE
(
2
count
.
Count
(
)
)
;
crit_sect
-
>
Enter
(
)
;
int
count_before
=
count
.
Count
(
)
;
for
(
int
i
=
0
;
i
<
10
;
i
+
+
)
{
SwitchProcess
(
)
;
}
EXPECT_EQ
(
count_before
count
.
Count
(
)
)
;
crit_sect
-
>
Leave
(
)
;
SwitchProcess
(
)
;
EXPECT_TRUE
(
WaitForCount
(
count_before
+
1
&
count
)
)
;
thread
.
Stop
(
)
;
delete
crit_sect
;
}
}
}
