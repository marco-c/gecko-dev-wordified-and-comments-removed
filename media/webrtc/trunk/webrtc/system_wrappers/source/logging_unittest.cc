#
include
"
webrtc
/
system_wrappers
/
include
/
logging
.
h
"
#
include
"
webrtc
/
base
/
arraysize
.
h
"
#
include
"
webrtc
/
base
/
event
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
trace
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
const
char
kTestLogString
[
]
=
"
Incredibly
important
test
message
!
(
?
)
"
;
const
int
kTestLevel
=
kTraceWarning
;
class
LoggingTestCallback
:
public
TraceCallback
{
public
:
LoggingTestCallback
(
rtc
:
:
Event
*
event
)
:
event_
(
event
)
{
}
private
:
void
Print
(
TraceLevel
level
const
char
*
msg
int
length
)
override
{
if
(
static_cast
<
size_t
>
(
length
)
<
arraysize
(
kTestLogString
)
|
|
level
!
=
kTestLevel
)
{
return
;
}
std
:
:
string
msg_str
(
msg
length
)
;
if
(
msg_str
.
find
(
kTestLogString
)
!
=
std
:
:
string
:
:
npos
)
event_
-
>
Set
(
)
;
}
rtc
:
:
Event
*
const
event_
;
}
;
}
TEST
(
LoggingTest
LogStream
)
{
Trace
:
:
CreateTrace
(
)
;
rtc
:
:
Event
event
(
false
false
)
;
LoggingTestCallback
callback
(
&
event
)
;
Trace
:
:
SetTraceCallback
(
&
callback
)
;
LOG
(
LS_WARNING
)
<
<
kTestLogString
;
EXPECT_TRUE
(
event
.
Wait
(
2000
)
)
;
Trace
:
:
SetTraceCallback
(
nullptr
)
;
Trace
:
:
ReturnTrace
(
)
;
}
}
