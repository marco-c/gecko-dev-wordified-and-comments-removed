#
ifndef
WEBRTC_SYSTEM_WRAPPERS_INCLUDE_METRICS_H_
#
define
WEBRTC_SYSTEM_WRAPPERS_INCLUDE_METRICS_H_
#
include
<
string
>
#
include
"
webrtc
/
base
/
atomicops
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
define
RTC_HISTOGRAM_COUNTS_100
(
name
sample
)
\
RTC_HISTOGRAM_COUNTS
(
name
sample
1
100
50
)
#
define
RTC_HISTOGRAM_COUNTS_200
(
name
sample
)
\
RTC_HISTOGRAM_COUNTS
(
name
sample
1
200
50
)
#
define
RTC_HISTOGRAM_COUNTS_1000
(
name
sample
)
\
RTC_HISTOGRAM_COUNTS
(
name
sample
1
1000
50
)
#
define
RTC_HISTOGRAM_COUNTS_10000
(
name
sample
)
\
RTC_HISTOGRAM_COUNTS
(
name
sample
1
10000
50
)
#
define
RTC_HISTOGRAM_COUNTS_100000
(
name
sample
)
\
RTC_HISTOGRAM_COUNTS
(
name
sample
1
100000
50
)
#
define
RTC_HISTOGRAM_COUNTS
(
name
sample
min
max
bucket_count
)
\
RTC_HISTOGRAM_COMMON_BLOCK
(
name
sample
\
webrtc
:
:
metrics
:
:
HistogramFactoryGetCounts
(
name
min
max
bucket_count
)
)
#
define
RTC_HISTOGRAM_COUNTS_SPARSE_100
(
name
sample
)
\
RTC_HISTOGRAM_COUNTS_SPARSE
(
name
sample
1
100
50
)
#
define
RTC_HISTOGRAM_COUNTS_SPARSE_200
(
name
sample
)
\
RTC_HISTOGRAM_COUNTS_SPARSE
(
name
sample
1
200
50
)
#
define
RTC_HISTOGRAM_COUNTS_SPARSE_1000
(
name
sample
)
\
RTC_HISTOGRAM_COUNTS_SPARSE
(
name
sample
1
1000
50
)
#
define
RTC_HISTOGRAM_COUNTS_SPARSE_10000
(
name
sample
)
\
RTC_HISTOGRAM_COUNTS_SPARSE
(
name
sample
1
10000
50
)
#
define
RTC_HISTOGRAM_COUNTS_SPARSE_100000
(
name
sample
)
\
RTC_HISTOGRAM_COUNTS_SPARSE
(
name
sample
1
100000
50
)
#
define
RTC_HISTOGRAM_COUNTS_SPARSE
(
name
sample
min
max
bucket_count
)
\
RTC_HISTOGRAM_COMMON_BLOCK_SLOW
(
name
sample
\
webrtc
:
:
metrics
:
:
HistogramFactoryGetCounts
(
name
min
max
bucket_count
)
)
#
define
RTC_HISTOGRAM_PERCENTAGE
(
name
sample
)
\
RTC_HISTOGRAM_ENUMERATION
(
name
sample
101
)
#
define
RTC_HISTOGRAM_PERCENTAGE_SPARSE
(
name
sample
)
\
RTC_HISTOGRAM_ENUMERATION_SPARSE
(
name
sample
101
)
#
define
RTC_HISTOGRAM_ENUMERATION
(
name
sample
boundary
)
\
RTC_HISTOGRAM_COMMON_BLOCK
(
name
sample
\
webrtc
:
:
metrics
:
:
HistogramFactoryGetEnumeration
(
name
boundary
)
)
#
define
RTC_HISTOGRAM_ENUMERATION_SPARSE
(
name
sample
boundary
)
\
RTC_HISTOGRAM_COMMON_BLOCK_SLOW
(
name
sample
\
webrtc
:
:
metrics
:
:
HistogramFactoryGetEnumeration
(
name
boundary
)
)
#
define
RTC_HISTOGRAM_COMMON_BLOCK
(
constant_name
sample
\
factory_get_invocation
)
\
do
{
\
static
webrtc
:
:
metrics
:
:
Histogram
*
atomic_histogram_pointer
=
nullptr
;
\
webrtc
:
:
metrics
:
:
Histogram
*
histogram_pointer
=
\
rtc
:
:
AtomicOps
:
:
AcquireLoadPtr
(
&
atomic_histogram_pointer
)
;
\
if
(
!
histogram_pointer
)
{
\
histogram_pointer
=
factory_get_invocation
;
\
webrtc
:
:
metrics
:
:
Histogram
*
prev_pointer
=
\
rtc
:
:
AtomicOps
:
:
CompareAndSwapPtr
(
\
&
atomic_histogram_pointer
\
static_cast
<
webrtc
:
:
metrics
:
:
Histogram
*
>
(
nullptr
)
\
histogram_pointer
)
;
\
RTC_DCHECK
(
prev_pointer
=
=
nullptr
|
|
\
prev_pointer
=
=
histogram_pointer
)
;
\
}
\
webrtc
:
:
metrics
:
:
HistogramAdd
(
histogram_pointer
constant_name
sample
)
;
\
}
while
(
0
)
#
define
RTC_HISTOGRAM_COMMON_BLOCK_SLOW
(
name
sample
factory_get_invocation
)
\
do
{
\
webrtc
:
:
metrics
:
:
Histogram
*
histogram_pointer
=
factory_get_invocation
;
\
webrtc
:
:
metrics
:
:
HistogramAdd
(
histogram_pointer
name
sample
)
;
\
}
while
(
0
)
namespace
webrtc
{
namespace
metrics
{
enum
{
kMinRunTimeInSeconds
=
10
}
;
class
Histogram
;
Histogram
*
HistogramFactoryGetCounts
(
const
std
:
:
string
&
name
int
min
int
max
int
bucket_count
)
;
Histogram
*
HistogramFactoryGetEnumeration
(
const
std
:
:
string
&
name
int
boundary
)
;
void
HistogramAdd
(
Histogram
*
histogram_pointer
const
std
:
:
string
&
name
int
sample
)
;
}
}
#
endif
