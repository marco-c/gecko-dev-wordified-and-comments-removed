#
ifndef
WEBRTC_SYSTEM_WRAPPERS_INCLUDE_RTP_TO_NTP_ESTIMATOR_H_
#
define
WEBRTC_SYSTEM_WRAPPERS_INCLUDE_RTP_TO_NTP_ESTIMATOR_H_
#
include
<
list
>
#
include
"
webrtc
/
system_wrappers
/
include
/
ntp_time
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
RtpToNtpEstimator
{
public
:
RtpToNtpEstimator
(
)
;
~
RtpToNtpEstimator
(
)
;
struct
RtcpMeasurement
{
RtcpMeasurement
(
uint32_t
ntp_secs
uint32_t
ntp_frac
uint32_t
timestamp
)
;
bool
IsEqual
(
const
RtcpMeasurement
&
other
)
const
;
NtpTime
ntp_time
;
uint32_t
rtp_timestamp
;
}
;
struct
Parameters
{
double
frequency_khz
=
0
.
0
;
double
offset_ms
=
0
.
0
;
bool
calculated
=
false
;
}
;
bool
UpdateMeasurements
(
uint32_t
ntp_secs
uint32_t
ntp_frac
uint32_t
rtp_timestamp
bool
*
new_rtcp_sr
)
;
bool
Estimate
(
int64_t
rtp_timestamp
int64_t
*
rtp_timestamp_ms
)
const
;
const
Parameters
&
params
(
)
const
{
return
params_
;
}
private
:
void
UpdateParameters
(
)
;
std
:
:
list
<
RtcpMeasurement
>
measurements_
;
Parameters
params_
;
}
;
int
CheckForWrapArounds
(
uint32_t
new_timestamp
uint32_t
old_timestamp
)
;
}
#
endif
