#
ifndef
WEBRTC_SYSTEM_WRAPPERS_INCLUDE_LOGGING_H_
#
define
WEBRTC_SYSTEM_WRAPPERS_INCLUDE_LOGGING_H_
#
include
<
sstream
>
namespace
webrtc
{
enum
LoggingSeverity
{
LS_SENSITIVE
LS_VERBOSE
LS_INFO
LS_WARNING
LS_ERROR
}
;
class
LogMessage
{
public
:
LogMessage
(
const
char
*
file
int
line
LoggingSeverity
sev
)
;
~
LogMessage
(
)
;
static
bool
Loggable
(
LoggingSeverity
sev
)
;
std
:
:
ostream
&
stream
(
)
{
return
print_stream_
;
}
private
:
std
:
:
ostringstream
print_stream_
;
LoggingSeverity
severity_
;
}
;
#
ifndef
LOG
class
LogMessageVoidify
{
public
:
LogMessageVoidify
(
)
{
}
void
operator
&
(
std
:
:
ostream
&
)
{
}
}
;
#
if
defined
(
WEBRTC_RESTRICT_LOGGING
)
#
define
RESTRICT_LOGGING_PRECONDITION
(
sev
)
\
sev
<
webrtc
:
:
LS_INFO
?
(
void
)
0
:
#
else
#
define
RESTRICT_LOGGING_PRECONDITION
(
sev
)
#
endif
#
define
LOG_SEVERITY_PRECONDITION
(
sev
)
\
RESTRICT_LOGGING_PRECONDITION
(
sev
)
!
(
webrtc
:
:
LogMessage
:
:
Loggable
(
sev
)
)
\
?
(
void
)
0
\
:
webrtc
:
:
LogMessageVoidify
(
)
&
#
define
LOG
(
sev
)
\
LOG_SEVERITY_PRECONDITION
(
webrtc
:
:
sev
)
\
webrtc
:
:
LogMessage
(
__FILE__
__LINE__
webrtc
:
:
sev
)
.
stream
(
)
#
define
LOG_V
(
sev
)
\
LOG_SEVERITY_PRECONDITION
(
sev
)
\
webrtc
:
:
LogMessage
(
__FILE__
__LINE__
sev
)
.
stream
(
)
#
if
(
defined
(
__GNUC__
)
&
&
!
defined
(
NDEBUG
)
)
|
|
defined
(
WANT_PRETTY_LOG_F
)
#
define
LOG_F
(
sev
)
LOG
(
sev
)
<
<
__PRETTY_FUNCTION__
<
<
"
:
"
#
else
#
define
LOG_F
(
sev
)
LOG
(
sev
)
<
<
__FUNCTION__
<
<
"
:
"
#
endif
#
endif
}
#
endif
