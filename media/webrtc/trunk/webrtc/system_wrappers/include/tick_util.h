#
ifndef
WEBRTC_SYSTEM_WRAPPERS_INCLUDE_TICK_UTIL_H_
#
define
WEBRTC_SYSTEM_WRAPPERS_INCLUDE_TICK_UTIL_H_
#
if
_WIN32
#
include
<
windows
.
h
>
#
include
<
mmsystem
.
h
>
#
elif
defined
(
WEBRTC_LINUX
)
|
|
defined
(
WEBRTC_BSD
)
#
include
<
time
.
h
>
#
elif
WEBRTC_MAC
#
include
<
mach
/
mach_time
.
h
>
#
include
<
string
.
h
>
#
else
#
include
<
sys
/
time
.
h
>
#
include
<
time
.
h
>
#
endif
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
TickInterval
;
class
TickTime
{
public
:
TickTime
(
)
;
explicit
TickTime
(
int64_t
ticks
)
;
static
TickTime
Now
(
)
;
static
int64_t
MillisecondTimestamp
(
)
;
static
int64_t
MicrosecondTimestamp
(
)
;
int64_t
Ticks
(
)
const
;
static
int64_t
MillisecondsToTicks
(
const
int64_t
ms
)
;
static
int64_t
TicksToMilliseconds
(
const
int64_t
ticks
)
;
static
int64_t
TicksToMicroseconds
(
const
int64_t
ticks
)
;
friend
TickTime
operator
+
(
const
TickTime
lhs
const
int64_t
ticks
)
;
TickTime
&
operator
+
=
(
const
int64_t
&
ticks
)
;
friend
TickInterval
operator
-
(
const
TickTime
&
lhs
const
TickTime
&
rhs
)
;
private
:
static
int64_t
QueryOsForTicks
(
)
;
int64_t
ticks_
;
}
;
class
TickInterval
{
public
:
TickInterval
(
)
;
explicit
TickInterval
(
int64_t
interval
)
;
int64_t
Milliseconds
(
)
const
;
int64_t
Microseconds
(
)
const
;
friend
TickInterval
operator
+
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
;
TickInterval
&
operator
+
=
(
const
TickInterval
&
rhs
)
;
friend
TickInterval
operator
-
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
;
TickInterval
&
operator
-
=
(
const
TickInterval
&
rhs
)
;
friend
bool
operator
>
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
;
friend
bool
operator
<
=
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
;
friend
bool
operator
<
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
;
friend
bool
operator
>
=
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
;
private
:
friend
class
TickTime
;
friend
TickInterval
operator
-
(
const
TickTime
&
lhs
const
TickTime
&
rhs
)
;
private
:
int64_t
interval_
;
}
;
inline
int64_t
TickInterval
:
:
Milliseconds
(
)
const
{
return
TickTime
:
:
TicksToMilliseconds
(
interval_
)
;
}
inline
int64_t
TickInterval
:
:
Microseconds
(
)
const
{
return
TickTime
:
:
TicksToMicroseconds
(
interval_
)
;
}
inline
TickInterval
operator
+
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
{
return
TickInterval
(
lhs
.
interval_
+
rhs
.
interval_
)
;
}
inline
TickInterval
operator
-
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
{
return
TickInterval
(
lhs
.
interval_
-
rhs
.
interval_
)
;
}
inline
TickInterval
operator
-
(
const
TickTime
&
lhs
const
TickTime
&
rhs
)
{
return
TickInterval
(
lhs
.
ticks_
-
rhs
.
ticks_
)
;
}
inline
TickTime
operator
+
(
const
TickTime
lhs
const
int64_t
ticks
)
{
TickTime
time
=
lhs
;
time
.
ticks_
+
=
ticks
;
return
time
;
}
inline
bool
operator
>
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
{
return
lhs
.
interval_
>
rhs
.
interval_
;
}
inline
bool
operator
<
=
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
{
return
lhs
.
interval_
<
=
rhs
.
interval_
;
}
inline
bool
operator
<
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
{
return
lhs
.
interval_
<
=
rhs
.
interval_
;
}
inline
bool
operator
>
=
(
const
TickInterval
&
lhs
const
TickInterval
&
rhs
)
{
return
lhs
.
interval_
>
=
rhs
.
interval_
;
}
inline
TickTime
:
:
TickTime
(
)
:
ticks_
(
0
)
{
}
inline
TickTime
:
:
TickTime
(
int64_t
ticks
)
:
ticks_
(
ticks
)
{
}
inline
TickTime
TickTime
:
:
Now
(
)
{
return
TickTime
(
QueryOsForTicks
(
)
)
;
}
inline
int64_t
TickTime
:
:
Ticks
(
)
const
{
return
ticks_
;
}
inline
TickTime
&
TickTime
:
:
operator
+
=
(
const
int64_t
&
ticks
)
{
ticks_
+
=
ticks
;
return
*
this
;
}
inline
TickInterval
:
:
TickInterval
(
)
:
interval_
(
0
)
{
}
inline
TickInterval
:
:
TickInterval
(
const
int64_t
interval
)
:
interval_
(
interval
)
{
}
inline
TickInterval
&
TickInterval
:
:
operator
+
=
(
const
TickInterval
&
rhs
)
{
interval_
+
=
rhs
.
interval_
;
return
*
this
;
}
inline
TickInterval
&
TickInterval
:
:
operator
-
=
(
const
TickInterval
&
rhs
)
{
interval_
-
=
rhs
.
interval_
;
return
*
this
;
}
}
#
endif
