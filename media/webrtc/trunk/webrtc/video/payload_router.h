#
ifndef
WEBRTC_VIDEO_PAYLOAD_ROUTER_H_
#
define
WEBRTC_VIDEO_PAYLOAD_ROUTER_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
config
.
h
"
#
include
"
webrtc
/
video_encoder
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
atomic32
.
h
"
namespace
webrtc
{
class
RTPFragmentationHeader
;
class
RtpRtcp
;
struct
RTPVideoHeader
;
class
PayloadRouter
:
public
EncodedImageCallback
{
public
:
PayloadRouter
(
const
std
:
:
vector
<
RtpRtcp
*
>
&
rtp_modules
int
payload_type
)
;
~
PayloadRouter
(
)
;
void
SetActive
(
bool
active
)
;
bool
IsActive
(
)
;
EncodedImageCallback
:
:
Result
OnEncodedImage
(
const
EncodedImage
&
encoded_image
const
CodecSpecificInfo
*
codec_specific_info
const
RTPFragmentationHeader
*
fragmentation
)
override
;
void
OnBitrateAllocationUpdated
(
const
BitrateAllocation
&
bitrate
)
;
private
:
void
UpdateModuleSendingState
(
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
rtc
:
:
CriticalSection
crit_
;
bool
active_
GUARDED_BY
(
crit_
)
;
const
std
:
:
vector
<
RtpRtcp
*
>
rtp_modules_
;
const
int
payload_type_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
PayloadRouter
)
;
}
;
}
#
endif
