#
ifndef
WEBRTC_VIDEO_VIE_ENCODER_H_
#
define
WEBRTC_VIDEO_VIE_ENCODER_H_
#
include
<
map
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
include
"
webrtc
/
call
/
bitrate_allocator
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
frame_callback
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
include
/
video_coding_defines
.
h
"
#
include
"
webrtc
/
modules
/
video_processing
/
include
/
video_processing
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
#
include
"
webrtc
/
video
/
video_capture_input
.
h
"
namespace
webrtc
{
class
BitrateAllocator
;
class
BitrateObserver
;
class
Config
;
class
CriticalSectionWrapper
;
class
EncodedImageCallback
;
class
PacedSender
;
class
PayloadRouter
;
class
ProcessThread
;
class
QMVideoSettingsCallback
;
class
SendStatisticsProxy
;
class
ViEBitrateObserver
;
class
ViEEffectFilter
;
class
VideoCodingModule
;
class
ViEEncoder
:
public
RtcpIntraFrameObserver
public
VideoEncoderRateObserver
public
VCMPacketizationCallback
public
VCMSendStatisticsCallback
public
CPULoadStateObserver
public
VideoCaptureCallback
{
public
:
friend
class
ViEBitrateObserver
;
ViEEncoder
(
uint32_t
number_of_cores
ProcessThread
*
module_process_thread
SendStatisticsProxy
*
stats_proxy
I420FrameCallback
*
pre_encode_callback
PacedSender
*
pacer
BitrateAllocator
*
bitrate_allocator
)
;
~
ViEEncoder
(
)
;
bool
Init
(
)
;
void
StartThreadsAndSetSharedMembers
(
rtc
:
:
scoped_refptr
<
PayloadRouter
>
send_payload_router
VCMProtectionCallback
*
vcm_protection_callback
)
;
void
StopThreadsAndRemoveSharedMembers
(
)
;
void
SetNetworkTransmissionState
(
bool
is_transmitting
)
;
int
Owner
(
)
const
;
void
onLoadStateChanged
(
CPULoadState
state
)
override
;
void
Pause
(
)
;
void
Restart
(
)
;
int32_t
RegisterExternalEncoder
(
VideoEncoder
*
encoder
uint8_t
pl_type
bool
internal_source
)
;
int32_t
DeRegisterExternalEncoder
(
uint8_t
pl_type
)
;
int32_t
SetEncoder
(
const
VideoCodec
&
video_codec
)
;
void
DeliverFrame
(
VideoFrame
video_frame
)
override
;
int32_t
SendKeyFrame
(
)
;
uint32_t
LastObservedBitrateBps
(
)
const
;
int
CodecTargetBitrate
(
uint32_t
*
bitrate
)
const
;
void
SetProtectionMethod
(
bool
nack
bool
fec
)
;
void
SetSenderBufferingMode
(
int
target_delay_ms
)
;
void
OnSetRates
(
uint32_t
bitrate_bps
int
framerate
)
override
;
int32_t
SendData
(
uint8_t
payload_type
const
EncodedImage
&
encoded_image
const
RTPFragmentationHeader
&
fragmentation_header
const
RTPVideoHeader
*
rtp_video_hdr
)
override
;
void
OnEncoderImplementationName
(
const
char
*
implementation_name
)
override
;
int32_t
SendStatistics
(
const
uint32_t
bit_rate
const
uint32_t
frame_rate
)
override
;
void
OnReceivedIntraFrameRequest
(
uint32_t
ssrc
)
override
;
void
OnReceivedSLI
(
uint32_t
ssrc
uint8_t
picture_id
)
override
;
void
OnReceivedRPSI
(
uint32_t
ssrc
uint64_t
picture_id
)
override
;
void
OnLocalSsrcChanged
(
uint32_t
old_ssrc
uint32_t
new_ssrc
)
override
;
void
SetSsrcs
(
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
)
;
void
SetMinTransmitBitrate
(
int
min_transmit_bitrate_kbps
)
;
void
SuspendBelowMinBitrate
(
)
;
void
RegisterPostEncodeImageCallback
(
EncodedImageCallback
*
post_encode_callback
)
;
int
GetPaddingNeededBps
(
)
const
;
protected
:
void
OnNetworkChanged
(
uint32_t
bitrate_bps
uint8_t
fraction_lost
int64_t
round_trip_time_ms
)
;
private
:
bool
EncoderPaused
(
)
const
EXCLUSIVE_LOCKS_REQUIRED
(
data_cs_
)
;
void
TraceFrameDropStart
(
)
EXCLUSIVE_LOCKS_REQUIRED
(
data_cs_
)
;
void
TraceFrameDropEnd
(
)
EXCLUSIVE_LOCKS_REQUIRED
(
data_cs_
)
;
const
uint32_t
number_of_cores_
;
const
rtc
:
:
scoped_ptr
<
VideoProcessing
>
vp_
;
const
rtc
:
:
scoped_ptr
<
QMVideoSettingsCallback
>
qm_callback_
;
const
rtc
:
:
scoped_ptr
<
VideoCodingModule
>
vcm_
;
rtc
:
:
scoped_refptr
<
PayloadRouter
>
send_payload_router_
;
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
data_cs_
;
rtc
:
:
scoped_ptr
<
BitrateObserver
>
bitrate_observer_
;
SendStatisticsProxy
*
const
stats_proxy_
;
I420FrameCallback
*
const
pre_encode_callback_
;
PacedSender
*
const
pacer_
;
BitrateAllocator
*
const
bitrate_allocator_
;
int64_t
time_of_last_frame_activity_ms_
GUARDED_BY
(
data_cs_
)
;
VideoCodec
encoder_config_
GUARDED_BY
(
data_cs_
)
;
int
min_transmit_bitrate_kbps_
GUARDED_BY
(
data_cs_
)
;
uint32_t
last_observed_bitrate_bps_
GUARDED_BY
(
data_cs_
)
;
int
target_delay_ms_
GUARDED_BY
(
data_cs_
)
;
bool
network_is_transmitting_
GUARDED_BY
(
data_cs_
)
;
bool
encoder_paused_
GUARDED_BY
(
data_cs_
)
;
bool
encoder_paused_and_dropped_frame_
GUARDED_BY
(
data_cs_
)
;
std
:
:
map
<
unsigned
int
int64_t
>
time_last_intra_request_ms_
GUARDED_BY
(
data_cs_
)
;
ProcessThread
*
module_process_thread_
;
bool
has_received_sli_
GUARDED_BY
(
data_cs_
)
;
uint8_t
picture_id_sli_
GUARDED_BY
(
data_cs_
)
;
bool
has_received_rpsi_
GUARDED_BY
(
data_cs_
)
;
uint64_t
picture_id_rpsi_
GUARDED_BY
(
data_cs_
)
;
std
:
:
map
<
uint32_t
int
>
ssrc_streams_
GUARDED_BY
(
data_cs_
)
;
bool
video_suspended_
GUARDED_BY
(
data_cs_
)
;
}
;
}
#
endif
