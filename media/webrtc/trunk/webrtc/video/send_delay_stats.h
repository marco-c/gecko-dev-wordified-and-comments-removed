#
ifndef
VIDEO_SEND_DELAY_STATS_H_
#
define
VIDEO_SEND_DELAY_STATS_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
"
common_types
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
video
/
stats_counter
.
h
"
#
include
"
call
/
video_send_stream
.
h
"
namespace
webrtc
{
class
SendDelayStats
:
public
SendPacketObserver
{
public
:
explicit
SendDelayStats
(
Clock
*
clock
)
;
virtual
~
SendDelayStats
(
)
;
void
AddSsrcs
(
const
VideoSendStream
:
:
Config
&
config
)
;
bool
OnSentPacket
(
int
packet_id
int64_t
time_ms
)
;
protected
:
void
OnSendPacket
(
uint16_t
packet_id
int64_t
capture_time_ms
uint32_t
ssrc
)
override
;
private
:
struct
SequenceNumberOlderThan
{
bool
operator
(
)
(
uint16_t
seq1
uint16_t
seq2
)
const
{
return
IsNewerSequenceNumber
(
seq2
seq1
)
;
}
}
;
struct
Packet
{
Packet
(
uint32_t
ssrc
int64_t
capture_time_ms
int64_t
send_time_ms
)
:
ssrc
(
ssrc
)
capture_time_ms
(
capture_time_ms
)
send_time_ms
(
send_time_ms
)
{
}
uint32_t
ssrc
;
int64_t
capture_time_ms
;
int64_t
send_time_ms
;
}
;
typedef
std
:
:
map
<
uint16_t
Packet
SequenceNumberOlderThan
>
PacketMap
;
void
UpdateHistograms
(
)
;
void
RemoveOld
(
int64_t
now
PacketMap
*
packets
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
AvgCounter
*
GetSendDelayCounter
(
uint32_t
ssrc
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
Clock
*
const
clock_
;
rtc
:
:
CriticalSection
crit_
;
PacketMap
packets_
RTC_GUARDED_BY
(
crit_
)
;
size_t
num_old_packets_
RTC_GUARDED_BY
(
crit_
)
;
size_t
num_skipped_packets_
RTC_GUARDED_BY
(
crit_
)
;
std
:
:
set
<
uint32_t
>
ssrcs_
RTC_GUARDED_BY
(
crit_
)
;
std
:
:
map
<
uint32_t
std
:
:
unique_ptr
<
AvgCounter
>
>
send_delay_counters_
RTC_GUARDED_BY
(
crit_
)
;
}
;
}
#
endif
