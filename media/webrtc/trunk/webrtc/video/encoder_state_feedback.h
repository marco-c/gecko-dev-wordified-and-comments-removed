#
ifndef
WEBRTC_VIDEO_ENCODER_STATE_FEEDBACK_H_
#
define
WEBRTC_VIDEO_ENCODER_STATE_FEEDBACK_H_
#
include
<
map
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
CriticalSectionWrapper
;
class
EncoderStateFeedbackObserver
;
class
RtcpIntraFrameObserver
;
class
ViEEncoder
;
class
EncoderStateFeedback
{
public
:
friend
class
EncoderStateFeedbackObserver
;
EncoderStateFeedback
(
)
;
~
EncoderStateFeedback
(
)
;
void
AddEncoder
(
const
std
:
:
vector
<
uint32_t
>
&
ssrc
ViEEncoder
*
encoder
)
;
void
RemoveEncoder
(
const
ViEEncoder
*
encoder
)
;
RtcpIntraFrameObserver
*
GetRtcpIntraFrameObserver
(
)
;
protected
:
void
OnReceivedIntraFrameRequest
(
uint32_t
ssrc
)
;
void
OnReceivedSLI
(
uint32_t
ssrc
uint8_t
picture_id
)
;
void
OnReceivedRPSI
(
uint32_t
ssrc
uint64_t
picture_id
)
;
void
OnLocalSsrcChanged
(
uint32_t
old_ssrc
uint32_t
new_ssrc
)
;
private
:
typedef
std
:
:
map
<
uint32_t
ViEEncoder
*
>
SsrcEncoderMap
;
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
crit_
;
rtc
:
:
scoped_ptr
<
EncoderStateFeedbackObserver
>
observer_
;
SsrcEncoderMap
encoders_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
EncoderStateFeedback
)
;
}
;
}
#
endif
