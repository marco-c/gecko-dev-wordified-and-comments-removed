#
ifndef
VIDEO_OVERUSE_FRAME_DETECTOR_H_
#
define
VIDEO_OVERUSE_FRAME_DETECTOR_H_
#
include
<
list
>
#
include
<
memory
>
#
include
"
api
/
optional
.
h
"
#
include
"
modules
/
video_coding
/
utility
/
quality_scaler
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
rtc_base
/
numerics
/
exp_filter
.
h
"
#
include
"
rtc_base
/
sequenced_task_checker
.
h
"
#
include
"
rtc_base
/
task_queue
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
EncodedFrameObserver
;
class
VideoFrame
;
struct
CpuOveruseOptions
{
CpuOveruseOptions
(
)
;
int
low_encode_usage_threshold_percent
;
int
high_encode_usage_threshold_percent
;
int
frame_timeout_interval_ms
;
int
min_frame_samples
;
int
min_process_count
;
int
high_threshold_consecutive_count
;
}
;
struct
CpuOveruseMetrics
{
CpuOveruseMetrics
(
)
:
encode_usage_percent
(
-
1
)
{
}
int
encode_usage_percent
;
}
;
class
CpuOveruseMetricsObserver
{
public
:
virtual
~
CpuOveruseMetricsObserver
(
)
{
}
virtual
void
OnEncodedFrameTimeMeasured
(
int
encode_duration_ms
const
CpuOveruseMetrics
&
metrics
)
=
0
;
}
;
class
OveruseFrameDetector
{
public
:
OveruseFrameDetector
(
const
CpuOveruseOptions
&
options
AdaptationObserverInterface
*
overuse_observer
EncodedFrameObserver
*
encoder_timing_
CpuOveruseMetricsObserver
*
metrics_observer
)
;
virtual
~
OveruseFrameDetector
(
)
;
void
StartCheckForOveruse
(
)
;
void
StopCheckForOveruse
(
)
;
virtual
void
OnTargetFramerateUpdated
(
int
framerate_fps
)
;
void
FrameCaptured
(
const
VideoFrame
&
frame
int64_t
time_when_first_seen_us
)
;
void
FrameSent
(
uint32_t
timestamp
int64_t
time_sent_in_us
)
;
protected
:
void
CheckForOveruse
(
)
;
private
:
class
OverdoseInjector
;
class
SendProcessingUsage
;
class
CheckOveruseTask
;
struct
FrameTiming
{
FrameTiming
(
int64_t
capture_time_us
uint32_t
timestamp
int64_t
now
)
:
capture_time_us
(
capture_time_us
)
timestamp
(
timestamp
)
capture_us
(
now
)
last_send_us
(
-
1
)
{
}
int64_t
capture_time_us
;
uint32_t
timestamp
;
int64_t
capture_us
;
int64_t
last_send_us
;
}
;
void
EncodedFrameTimeMeasured
(
int
encode_duration_ms
)
;
bool
IsOverusing
(
const
CpuOveruseMetrics
&
metrics
)
;
bool
IsUnderusing
(
const
CpuOveruseMetrics
&
metrics
int64_t
time_now
)
;
bool
FrameTimeoutDetected
(
int64_t
now
)
const
;
bool
FrameSizeChanged
(
int
num_pixels
)
const
;
void
ResetAll
(
int
num_pixels
)
;
static
std
:
:
unique_ptr
<
SendProcessingUsage
>
CreateSendProcessingUsage
(
const
CpuOveruseOptions
&
options
)
;
rtc
:
:
SequencedTaskChecker
task_checker_
;
CheckOveruseTask
*
check_overuse_task_
;
const
CpuOveruseOptions
options_
;
AdaptationObserverInterface
*
const
observer_
;
EncodedFrameObserver
*
const
encoder_timing_
;
CpuOveruseMetricsObserver
*
const
metrics_observer_
;
rtc
:
:
Optional
<
CpuOveruseMetrics
>
metrics_
RTC_GUARDED_BY
(
task_checker_
)
;
int64_t
num_process_times_
RTC_GUARDED_BY
(
task_checker_
)
;
int64_t
last_capture_time_us_
RTC_GUARDED_BY
(
task_checker_
)
;
int64_t
last_processed_capture_time_us_
RTC_GUARDED_BY
(
task_checker_
)
;
int
num_pixels_
RTC_GUARDED_BY
(
task_checker_
)
;
int
max_framerate_
RTC_GUARDED_BY
(
task_checker_
)
;
int64_t
last_overuse_time_ms_
RTC_GUARDED_BY
(
task_checker_
)
;
int
checks_above_threshold_
RTC_GUARDED_BY
(
task_checker_
)
;
int
num_overuse_detections_
RTC_GUARDED_BY
(
task_checker_
)
;
int64_t
last_rampup_time_ms_
RTC_GUARDED_BY
(
task_checker_
)
;
bool
in_quick_rampup_
RTC_GUARDED_BY
(
task_checker_
)
;
int
current_rampup_delay_ms_
RTC_GUARDED_BY
(
task_checker_
)
;
const
std
:
:
unique_ptr
<
SendProcessingUsage
>
usage_
RTC_GUARDED_BY
(
task_checker_
)
;
std
:
:
list
<
FrameTiming
>
frame_timing_
RTC_GUARDED_BY
(
task_checker_
)
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
OveruseFrameDetector
)
;
}
;
}
#
endif
