#
ifndef
WEBRTC_VIDEO_VIE_REMB_H_
#
define
WEBRTC_VIDEO_VIE_REMB_H_
#
include
<
list
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
include
/
remote_bitrate_estimator
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
namespace
webrtc
{
class
ProcessThread
;
class
RtpRtcp
;
class
VieRemb
:
public
RemoteBitrateObserver
{
public
:
explicit
VieRemb
(
Clock
*
clock
)
;
~
VieRemb
(
)
;
void
AddReceiveChannel
(
RtpRtcp
*
rtp_rtcp
)
;
void
RemoveReceiveChannel
(
RtpRtcp
*
rtp_rtcp
)
;
void
AddRembSender
(
RtpRtcp
*
rtp_rtcp
)
;
void
RemoveRembSender
(
RtpRtcp
*
rtp_rtcp
)
;
bool
InUse
(
)
const
;
virtual
void
OnReceiveBitrateChanged
(
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
uint32_t
bitrate
)
;
private
:
typedef
std
:
:
list
<
RtpRtcp
*
>
RtpModules
;
Clock
*
const
clock_
;
rtc
:
:
CriticalSection
list_crit_
;
int64_t
last_remb_time_
;
uint32_t
last_send_bitrate_
;
RtpModules
receive_modules_
;
RtpModules
rtcp_sender_
;
uint32_t
bitrate_
;
}
;
}
#
endif
