#
ifndef
WEBRTC_VIDEO_RTP_STREAMS_SYNCHRONIZER_H_
#
define
WEBRTC_VIDEO_RTP_STREAMS_SYNCHRONIZER_H_
#
include
<
memory
>
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module
.
h
"
#
include
"
webrtc
/
video
/
rtp_stream_receiver
.
h
"
#
include
"
webrtc
/
video
/
stream_synchronization
.
h
"
namespace
webrtc
{
class
Clock
;
class
VideoFrame
;
class
VoEVideoSync
;
namespace
vcm
{
class
VideoReceiver
;
}
class
RtpStreamsSynchronizer
:
public
Module
{
public
:
RtpStreamsSynchronizer
(
vcm
:
:
VideoReceiver
*
vcm
RtpStreamReceiver
*
rtp_stream_receiver
)
;
void
ConfigureSync
(
int
voe_channel_id
VoEVideoSync
*
voe_sync_interface
)
;
int64_t
TimeUntilNextProcess
(
)
override
;
void
Process
(
)
override
;
bool
GetStreamSyncOffsetInMs
(
const
VideoFrame
&
frame
int64_t
*
stream_offset_ms
double
*
estimated_freq_khz
)
const
;
private
:
Clock
*
const
clock_
;
vcm
:
:
VideoReceiver
*
const
video_receiver_
;
RtpReceiver
*
const
video_rtp_receiver_
;
RtpRtcp
*
const
video_rtp_rtcp_
;
rtc
:
:
CriticalSection
crit_
;
int
voe_channel_id_
GUARDED_BY
(
crit_
)
;
VoEVideoSync
*
voe_sync_interface_
GUARDED_BY
(
crit_
)
;
RtpReceiver
*
audio_rtp_receiver_
GUARDED_BY
(
crit_
)
;
RtpRtcp
*
audio_rtp_rtcp_
GUARDED_BY
(
crit_
)
;
std
:
:
unique_ptr
<
StreamSynchronization
>
sync_
GUARDED_BY
(
crit_
)
;
StreamSynchronization
:
:
Measurements
audio_measurement_
GUARDED_BY
(
crit_
)
;
StreamSynchronization
:
:
Measurements
video_measurement_
GUARDED_BY
(
crit_
)
;
rtc
:
:
ThreadChecker
process_thread_checker_
;
int64_t
last_sync_time_
ACCESS_ON
(
&
process_thread_checker_
)
;
}
;
}
#
endif
