#
ifndef
WEBRTC_VIDEO_VIE_CHANNEL_H_
#
define
WEBRTC_VIDEO_VIE_CHANNEL_H_
#
include
<
list
>
#
include
<
map
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
platform_thread
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
include
/
remote_bitrate_estimator
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
include
/
video_coding_defines
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
critical_section_wrapper
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
tick_util
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
#
include
"
webrtc
/
video
/
vie_receiver
.
h
"
#
include
"
webrtc
/
video
/
vie_sync_module
.
h
"
namespace
webrtc
{
class
CallStatsObserver
;
class
ChannelStatsObserver
;
class
Config
;
class
CriticalSectionWrapper
;
class
EncodedImageCallback
;
class
I420FrameCallback
;
class
IncomingVideoStream
;
class
PacedSender
;
class
PacketRouter
;
class
PayloadRouter
;
class
ProcessThread
;
class
ReceiveStatisticsProxy
;
class
ReportBlockStats
;
class
RtcpRttStats
;
class
ViEChannelProtectionCallback
;
class
ViERTPObserver
;
class
VideoCodingModule
;
class
VideoDecoder
;
class
VideoRenderCallback
;
class
VoEVideoSync
;
enum
StreamType
{
kViEStreamTypeNormal
=
0
kViEStreamTypeRtx
=
1
}
;
class
ViEChannel
:
public
VCMFrameTypeCallback
public
VCMReceiveCallback
public
VCMReceiveStateCallback
public
VCMReceiveStatisticsCallback
public
VCMDecoderTimingCallback
public
VCMPacketRequestCallback
public
RtpFeedback
{
public
:
friend
class
ChannelStatsObserver
;
friend
class
ViEChannelProtectionCallback
;
ViEChannel
(
uint32_t
number_of_cores
Transport
*
transport
ProcessThread
*
module_process_thread
RtcpIntraFrameObserver
*
intra_frame_observer
RtcpBandwidthObserver
*
bandwidth_observer
TransportFeedbackObserver
*
transport_feedback_observer
RemoteBitrateEstimator
*
remote_bitrate_estimator
RtcpRttStats
*
rtt_stats
PacedSender
*
paced_sender
PacketRouter
*
packet_router
size_t
max_rtp_streams
bool
sender
)
;
~
ViEChannel
(
)
;
int32_t
Init
(
)
;
int32_t
SetSendCodec
(
const
VideoCodec
&
video_codec
bool
new_stream
=
true
)
;
int32_t
SetReceiveCodec
(
const
VideoCodec
&
video_codec
)
;
void
RegisterExternalDecoder
(
const
uint8_t
pl_type
VideoDecoder
*
decoder
)
;
int32_t
ReceiveCodecStatistics
(
uint32_t
*
num_key_frames
uint32_t
*
num_delta_frames
)
;
uint32_t
DiscardedPackets
(
)
const
;
int
ReceiveDelay
(
)
const
;
void
SetExpectedRenderDelay
(
int
delay_ms
)
;
void
SetRTCPMode
(
const
RtcpMode
rtcp_mode
)
;
void
SetProtectionMode
(
bool
enable_nack
bool
enable_fec
int
payload_type_red
int
payload_type_fec
)
;
bool
IsSendingFecEnabled
(
)
;
int
SetSenderBufferingMode
(
int
target_delay_ms
)
;
int
SetSendTimestampOffsetStatus
(
bool
enable
int
id
)
;
int
SetReceiveTimestampOffsetStatus
(
bool
enable
int
id
)
;
int
SetSendAbsoluteSendTimeStatus
(
bool
enable
int
id
)
;
int
SetReceiveAbsoluteSendTimeStatus
(
bool
enable
int
id
)
;
int
SetSendVideoRotationStatus
(
bool
enable
int
id
)
;
int
SetReceiveVideoRotationStatus
(
bool
enable
int
id
)
;
int
SetSendTransportSequenceNumber
(
bool
enable
int
id
)
;
int
SetReceiveTransportSequenceNumber
(
bool
enable
int
id
)
;
int
SetSendRtpStreamId
(
bool
enable
int
id
)
;
int
SetReceiveRtpStreamId
(
bool
enable
int
id
)
;
void
SetRtcpXrRrtrStatus
(
bool
enable
)
;
void
EnableTMMBR
(
bool
enable
)
;
int32_t
SetSSRC
(
const
uint32_t
SSRC
const
StreamType
usage
const
unsigned
char
simulcast_idx
)
;
int32_t
GetLocalSSRC
(
uint8_t
idx
unsigned
int
*
ssrc
)
;
uint32_t
GetRemoteSSRC
(
)
;
int32_t
GetRemoteRtpStreamId
(
char
rid
[
256
]
)
;
int
SetRtxSendPayloadType
(
int
payload_type
int
associated_payload_type
)
;
void
SetRtxReceivePayloadType
(
int
payload_type
int
associated_payload_type
)
;
void
SetUseRtxPayloadMappingOnRestore
(
bool
val
)
;
void
SetRtpStateForSsrc
(
uint32_t
ssrc
const
RtpState
&
rtp_state
)
;
RtpState
GetRtpStateForSsrc
(
uint32_t
ssrc
)
;
int32_t
SetRTCPCName
(
const
char
*
rtcp_cname
)
;
int32_t
GetRemoteRTCPCName
(
char
rtcp_cname
[
]
)
;
int32_t
GetSendRtcpStatistics
(
uint16_t
*
fraction_lost
uint32_t
*
cumulative_lost
uint32_t
*
extended_max
uint32_t
*
jitter_samples
int64_t
*
rtt_ms
)
;
int32_t
GetRemoteRTCPReceiverInfo
(
uint32_t
&
NTPHigh
uint32_t
&
NTPLow
uint32_t
&
receivedPacketCount
uint64_t
&
receivedOctetCount
uint32_t
*
jitterSamples
uint16_t
*
fractionLost
uint32_t
*
cumulativeLost
int64_t
*
rttMs
)
;
int32_t
GetRemoteRTCPSenderInfo
(
RTCPSenderInfo
*
sender_info
)
const
;
void
RegisterSendChannelRtcpStatisticsCallback
(
RtcpStatisticsCallback
*
callback
)
;
void
RegisterReceiveChannelRtcpStatisticsCallback
(
RtcpStatisticsCallback
*
callback
)
;
void
GetSendStreamDataCounters
(
StreamDataCounters
*
rtp_counters
StreamDataCounters
*
rtx_counters
)
const
;
void
GetReceiveStreamDataCounters
(
StreamDataCounters
*
rtp_counters
StreamDataCounters
*
rtx_counters
)
const
;
void
RegisterSendChannelRtpStatisticsCallback
(
StreamDataCountersCallback
*
callback
)
;
void
RegisterReceiveChannelRtpStatisticsCallback
(
StreamDataCountersCallback
*
callback
)
;
void
GetSendRtcpPacketTypeCounter
(
RtcpPacketTypeCounter
*
packet_counter
)
const
;
void
GetReceiveRtcpPacketTypeCounter
(
RtcpPacketTypeCounter
*
packet_counter
)
const
;
void
RegisterSendSideDelayObserver
(
SendSideDelayObserver
*
observer
)
;
void
RegisterSendBitrateObserver
(
BitrateStatisticsObserver
*
observer
)
;
int32_t
OnInitializeDecoder
(
const
int8_t
payload_type
const
char
payload_name
[
RTP_PAYLOAD_NAME_SIZE
]
const
int
frequency
const
size_t
channels
const
uint32_t
rate
)
override
;
void
OnIncomingSSRCChanged
(
const
uint32_t
ssrc
)
override
;
void
OnIncomingCSRCChanged
(
const
uint32_t
CSRC
const
bool
added
)
override
;
int32_t
SetRemoteSSRCType
(
const
StreamType
usage
const
uint32_t
SSRC
)
;
int32_t
StartSend
(
)
;
int32_t
StopSend
(
)
;
bool
Sending
(
)
;
void
StartReceive
(
)
;
void
StopReceive
(
)
;
int32_t
ReceivedRTPPacket
(
const
void
*
rtp_packet
const
size_t
rtp_packet_length
const
PacketTime
&
packet_time
)
;
int32_t
ReceivedRTCPPacket
(
const
void
*
rtcp_packet
const
size_t
rtcp_packet_length
)
;
int32_t
SetMTU
(
uint16_t
mtu
)
;
RtpRtcp
*
rtp_rtcp
(
)
;
rtc
:
:
scoped_refptr
<
PayloadRouter
>
send_payload_router
(
)
;
VCMProtectionCallback
*
vcm_protection_callback
(
)
;
CallStatsObserver
*
GetStatsObserver
(
)
;
virtual
int32_t
FrameToRender
(
VideoFrame
&
video_frame
)
;
virtual
int32_t
ReceivedDecodedReferenceFrame
(
const
uint64_t
picture_id
)
;
void
OnIncomingPayloadType
(
int
payload_type
)
override
;
void
OnDecoderImplementationName
(
const
char
*
implementation_name
)
override
;
void
OnReceiveRatesUpdated
(
uint32_t
bit_rate
uint32_t
frame_rate
)
override
;
void
OnDiscardedPacketsUpdated
(
int
discarded_packets
)
override
;
void
OnFrameCountsUpdated
(
const
FrameCounts
&
frame_counts
)
override
;
virtual
void
OnDecoderTiming
(
int
decode_ms
int
max_decode_ms
int
current_delay_ms
int
target_delay_ms
int
jitter_buffer_ms
int
min_playout_delay_ms
int
render_delay_ms
)
;
virtual
int32_t
RequestKeyFrame
(
)
;
virtual
int32_t
SliceLossIndicationRequest
(
const
uint64_t
picture_id
)
;
int32_t
ResendPackets
(
const
uint16_t
*
sequence_numbers
uint16_t
length
)
override
;
virtual
void
ReceiveStateChange
(
VideoReceiveState
state
)
override
;
int32_t
SetVoiceChannel
(
int32_t
ve_channel_id
VoEVideoSync
*
ve_sync_interface
)
;
int32_t
VoiceChannel
(
)
;
void
RegisterPreRenderCallback
(
I420FrameCallback
*
pre_render_callback
)
;
void
RegisterPreDecodeImageCallback
(
EncodedImageCallback
*
pre_decode_callback
)
;
void
RegisterSendFrameCountObserver
(
FrameCountObserver
*
observer
)
;
void
RegisterRtcpPacketTypeCounterObserver
(
RtcpPacketTypeCounterObserver
*
observer
)
;
void
RegisterReceiveStatisticsProxy
(
ReceiveStatisticsProxy
*
receive_statistics_proxy
)
;
void
SetIncomingVideoStream
(
IncomingVideoStream
*
incoming_video_stream
)
;
protected
:
static
bool
ChannelDecodeThreadFunction
(
void
*
obj
)
;
bool
ChannelDecodeProcess
(
)
;
void
OnRttUpdate
(
int64_t
avg_rtt_ms
int64_t
max_rtt_ms
)
;
int
ProtectionRequest
(
const
FecProtectionParams
*
delta_fec_params
const
FecProtectionParams
*
key_fec_params
uint32_t
*
sent_video_rate_bps
uint32_t
*
sent_nack_rate_bps
uint32_t
*
sent_fec_rate_bps
)
;
private
:
static
std
:
:
vector
<
RtpRtcp
*
>
CreateRtpRtcpModules
(
bool
receiver_only
ReceiveStatistics
*
receive_statistics
Transport
*
outgoing_transport
RtcpIntraFrameObserver
*
intra_frame_callback
RtcpBandwidthObserver
*
bandwidth_callback
TransportFeedbackObserver
*
transport_feedback_callback
RtcpRttStats
*
rtt_stats
RtcpPacketTypeCounterObserver
*
rtcp_packet_type_counter_observer
RemoteBitrateEstimator
*
remote_bitrate_estimator
RtpPacketSender
*
paced_sender
TransportSequenceNumberAllocator
*
transport_sequence_number_allocator
BitrateStatisticsObserver
*
send_bitrate_observer
FrameCountObserver
*
send_frame_count_observer
SendSideDelayObserver
*
send_side_delay_observer
size_t
num_modules
)
;
void
StartDecodeThread
(
)
;
void
StopDecodeThread
(
)
;
void
ProcessNACKRequest
(
const
bool
enable
)
;
int
GetRequiredNackListSize
(
int
target_delay_ms
)
;
void
SetRtxSendStatus
(
bool
enable
)
;
void
UpdateHistograms
(
)
;
template
<
class
T
>
class
RegisterableCallback
:
public
T
{
public
:
RegisterableCallback
(
)
:
critsect_
(
CriticalSectionWrapper
:
:
CreateCriticalSection
(
)
)
callback_
(
NULL
)
{
}
void
Set
(
T
*
callback
)
{
CriticalSectionScoped
cs
(
critsect_
.
get
(
)
)
;
callback_
=
callback
;
}
protected
:
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
critsect_
;
T
*
callback_
GUARDED_BY
(
critsect_
)
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
RegisterableCallback
)
;
}
;
class
RegisterableBitrateStatisticsObserver
:
public
RegisterableCallback
<
BitrateStatisticsObserver
>
{
virtual
void
Notify
(
const
BitrateStatistics
&
total_stats
const
BitrateStatistics
&
retransmit_stats
uint32_t
ssrc
)
{
CriticalSectionScoped
cs
(
critsect_
.
get
(
)
)
;
if
(
callback_
)
callback_
-
>
Notify
(
total_stats
retransmit_stats
ssrc
)
;
}
}
send_bitrate_observer_
;
class
RegisterableFrameCountObserver
:
public
RegisterableCallback
<
FrameCountObserver
>
{
public
:
virtual
void
FrameCountUpdated
(
const
FrameCounts
&
frame_counts
uint32_t
ssrc
)
{
CriticalSectionScoped
cs
(
critsect_
.
get
(
)
)
;
if
(
callback_
)
callback_
-
>
FrameCountUpdated
(
frame_counts
ssrc
)
;
}
private
:
}
send_frame_count_observer_
;
class
RegisterableSendSideDelayObserver
:
public
RegisterableCallback
<
SendSideDelayObserver
>
{
void
SendSideDelayUpdated
(
int
avg_delay_ms
int
max_delay_ms
uint32_t
ssrc
)
override
{
CriticalSectionScoped
cs
(
critsect_
.
get
(
)
)
;
if
(
callback_
)
callback_
-
>
SendSideDelayUpdated
(
avg_delay_ms
max_delay_ms
ssrc
)
;
}
}
send_side_delay_observer_
;
class
RegisterableRtcpPacketTypeCounterObserver
:
public
RegisterableCallback
<
RtcpPacketTypeCounterObserver
>
{
public
:
void
RtcpPacketTypesCounterUpdated
(
uint32_t
ssrc
const
RtcpPacketTypeCounter
&
packet_counter
)
override
{
CriticalSectionScoped
cs
(
critsect_
.
get
(
)
)
;
if
(
callback_
)
callback_
-
>
RtcpPacketTypesCounterUpdated
(
ssrc
packet_counter
)
;
counter_map_
[
ssrc
]
=
packet_counter
;
}
virtual
std
:
:
map
<
uint32_t
RtcpPacketTypeCounter
>
GetPacketTypeCounterMap
(
)
const
{
CriticalSectionScoped
cs
(
critsect_
.
get
(
)
)
;
return
counter_map_
;
}
private
:
std
:
:
map
<
uint32_t
RtcpPacketTypeCounter
>
counter_map_
GUARDED_BY
(
critsect_
)
;
}
rtcp_packet_type_counter_observer_
;
const
uint32_t
number_of_cores_
;
const
bool
sender_
;
ProcessThread
*
const
module_process_thread_
;
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
crit_
;
rtc
:
:
scoped_refptr
<
PayloadRouter
>
send_payload_router_
;
rtc
:
:
scoped_ptr
<
ViEChannelProtectionCallback
>
vcm_protection_callback_
;
VideoCodingModule
*
const
vcm_
;
ViEReceiver
vie_receiver_
;
ViESyncModule
vie_sync_
;
rtc
:
:
scoped_ptr
<
ChannelStatsObserver
>
stats_observer_
;
ReceiveStatisticsProxy
*
receive_stats_callback_
GUARDED_BY
(
crit_
)
;
FrameCounts
receive_frame_counts_
GUARDED_BY
(
crit_
)
;
IncomingVideoStream
*
incoming_video_stream_
GUARDED_BY
(
crit_
)
;
RtcpIntraFrameObserver
*
const
intra_frame_observer_
;
RtcpRttStats
*
const
rtt_stats_
;
PacedSender
*
const
paced_sender_
;
PacketRouter
*
const
packet_router_
;
const
rtc
:
:
scoped_ptr
<
RtcpBandwidthObserver
>
bandwidth_observer_
;
TransportFeedbackObserver
*
const
transport_feedback_observer_
;
rtc
:
:
PlatformThread
decode_thread_
;
int
nack_history_size_sender_
;
int
max_nack_reordering_threshold_
;
I420FrameCallback
*
pre_render_callback_
GUARDED_BY
(
crit_
)
;
const
rtc
:
:
scoped_ptr
<
ReportBlockStats
>
report_block_stats_sender_
;
int64_t
time_of_first_rtt_ms_
GUARDED_BY
(
crit_
)
;
int64_t
rtt_sum_ms_
GUARDED_BY
(
crit_
)
;
int64_t
last_rtt_ms_
GUARDED_BY
(
crit_
)
;
size_t
num_rtts_
GUARDED_BY
(
crit_
)
;
const
std
:
:
vector
<
RtpRtcp
*
>
rtp_rtcp_modules_
;
size_t
num_active_rtp_rtcp_modules_
GUARDED_BY
(
crit_
)
;
}
;
}
#
endif
