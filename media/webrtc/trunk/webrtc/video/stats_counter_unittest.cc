#
include
"
video
/
stats_counter
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
const
int
kDefaultProcessIntervalMs
=
2000
;
const
uint32_t
kStreamId
=
123456
;
class
StatsCounterObserverImpl
:
public
StatsCounterObserver
{
public
:
StatsCounterObserverImpl
(
)
:
num_calls_
(
0
)
last_sample_
(
-
1
)
{
}
void
OnMetricUpdated
(
int
sample
)
override
{
+
+
num_calls_
;
last_sample_
=
sample
;
}
int
num_calls_
;
int
last_sample_
;
}
;
}
class
StatsCounterTest
:
public
:
:
testing
:
:
Test
{
protected
:
StatsCounterTest
(
)
:
clock_
(
1234
)
{
}
void
AddSampleAndAdvance
(
int
sample
int
interval_ms
AvgCounter
*
counter
)
{
counter
-
>
Add
(
sample
)
;
clock_
.
AdvanceTimeMilliseconds
(
interval_ms
)
;
}
void
SetSampleAndAdvance
(
int
sample
int
interval_ms
RateAccCounter
*
counter
)
{
counter
-
>
Set
(
sample
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
interval_ms
)
;
}
void
VerifyStatsIsNotSet
(
const
AggregatedStats
&
stats
)
{
EXPECT_EQ
(
0
stats
.
num_samples
)
;
EXPECT_EQ
(
-
1
stats
.
min
)
;
EXPECT_EQ
(
-
1
stats
.
max
)
;
EXPECT_EQ
(
-
1
stats
.
average
)
;
}
SimulatedClock
clock_
;
}
;
TEST_F
(
StatsCounterTest
NoSamples
)
{
AvgCounter
counter
(
&
clock_
nullptr
false
)
;
VerifyStatsIsNotSet
(
counter
.
GetStats
(
)
)
;
}
TEST_F
(
StatsCounterTest
TestRegisterObserver
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
const
int
kSample
=
22
;
AvgCounter
counter
(
&
clock_
observer
false
)
;
AddSampleAndAdvance
(
kSample
kDefaultProcessIntervalMs
&
counter
)
;
counter
.
Add
(
111
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
}
TEST_F
(
StatsCounterTest
HasSample
)
{
AvgCounter
counter
(
&
clock_
nullptr
false
)
;
EXPECT_FALSE
(
counter
.
HasSample
(
)
)
;
counter
.
Add
(
1
)
;
EXPECT_TRUE
(
counter
.
HasSample
(
)
)
;
}
TEST_F
(
StatsCounterTest
VerifyProcessInterval
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
AvgCounter
counter
(
&
clock_
observer
false
)
;
counter
.
Add
(
4
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
-
1
)
;
counter
.
Add
(
8
)
;
EXPECT_EQ
(
0
observer
-
>
num_calls_
)
;
VerifyStatsIsNotSet
(
counter
.
GetStats
(
)
)
;
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
counter
.
Add
(
111
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
1
stats
.
num_samples
)
;
}
TEST_F
(
StatsCounterTest
TestMetric_AvgCounter
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
AvgCounter
counter
(
&
clock_
observer
false
)
;
counter
.
Add
(
4
)
;
counter
.
Add
(
8
)
;
counter
.
Add
(
9
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
Add
(
111
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
7
observer
-
>
last_sample_
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
1
stats
.
num_samples
)
;
EXPECT_EQ
(
7
stats
.
min
)
;
EXPECT_EQ
(
7
stats
.
max
)
;
EXPECT_EQ
(
7
stats
.
average
)
;
}
TEST_F
(
StatsCounterTest
TestMetric_MaxCounter
)
{
const
int64_t
kProcessIntervalMs
=
1000
;
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
MaxCounter
counter
(
&
clock_
observer
kProcessIntervalMs
)
;
counter
.
Add
(
4
)
;
counter
.
Add
(
9
)
;
counter
.
Add
(
8
)
;
clock_
.
AdvanceTimeMilliseconds
(
kProcessIntervalMs
)
;
counter
.
Add
(
111
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
9
observer
-
>
last_sample_
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
1
stats
.
num_samples
)
;
EXPECT_EQ
(
9
stats
.
min
)
;
EXPECT_EQ
(
9
stats
.
max
)
;
EXPECT_EQ
(
9
stats
.
average
)
;
}
TEST_F
(
StatsCounterTest
TestMetric_PercentCounter
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
PercentCounter
counter
(
&
clock_
observer
)
;
counter
.
Add
(
true
)
;
counter
.
Add
(
false
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
Add
(
false
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
50
observer
-
>
last_sample_
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
1
stats
.
num_samples
)
;
EXPECT_EQ
(
50
stats
.
min
)
;
EXPECT_EQ
(
50
stats
.
max
)
;
}
TEST_F
(
StatsCounterTest
TestMetric_PermilleCounter
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
PermilleCounter
counter
(
&
clock_
observer
)
;
counter
.
Add
(
true
)
;
counter
.
Add
(
false
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
Add
(
false
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
500
observer
-
>
last_sample_
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
1
stats
.
num_samples
)
;
EXPECT_EQ
(
500
stats
.
min
)
;
EXPECT_EQ
(
500
stats
.
max
)
;
}
TEST_F
(
StatsCounterTest
TestMetric_RateCounter
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
RateCounter
counter
(
&
clock_
observer
true
)
;
counter
.
Add
(
186
)
;
counter
.
Add
(
350
)
;
counter
.
Add
(
22
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
Add
(
111
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
279
observer
-
>
last_sample_
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
1
stats
.
num_samples
)
;
EXPECT_EQ
(
279
stats
.
min
)
;
EXPECT_EQ
(
279
stats
.
max
)
;
}
TEST_F
(
StatsCounterTest
TestMetric_RateAccCounter
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
RateAccCounter
counter
(
&
clock_
observer
true
)
;
counter
.
Set
(
175
kStreamId
)
;
counter
.
Set
(
188
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
Set
(
192
kStreamId
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
94
observer
-
>
last_sample_
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
1
stats
.
num_samples
)
;
EXPECT_EQ
(
94
stats
.
min
)
;
EXPECT_EQ
(
94
stats
.
max
)
;
}
TEST_F
(
StatsCounterTest
TestMetric_RateAccCounterWithSetLast
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
RateAccCounter
counter
(
&
clock_
observer
true
)
;
counter
.
SetLast
(
98
kStreamId
)
;
counter
.
Set
(
175
kStreamId
)
;
counter
.
Set
(
188
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
Set
(
192
kStreamId
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
45
observer
-
>
last_sample_
)
;
}
TEST_F
(
StatsCounterTest
TestMetric_RateAccCounterWithMultipleStreamIds
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
RateAccCounter
counter
(
&
clock_
observer
true
)
;
counter
.
Set
(
175
kStreamId
)
;
counter
.
Set
(
188
kStreamId
)
;
counter
.
Set
(
100
kStreamId
+
1
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
Set
(
150
kStreamId
+
1
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
144
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
Set
(
198
kStreamId
)
;
EXPECT_EQ
(
2
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
25
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
Set
(
200
kStreamId
)
;
EXPECT_EQ
(
3
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
5
observer
-
>
last_sample_
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
3
stats
.
num_samples
)
;
EXPECT_EQ
(
5
stats
.
min
)
;
EXPECT_EQ
(
144
stats
.
max
)
;
}
TEST_F
(
StatsCounterTest
TestGetStats_MultipleIntervals
)
{
AvgCounter
counter
(
&
clock_
nullptr
false
)
;
const
int
kSample1
=
1
;
const
int
kSample2
=
5
;
const
int
kSample3
=
8
;
const
int
kSample4
=
11
;
const
int
kSample5
=
50
;
AddSampleAndAdvance
(
kSample1
kDefaultProcessIntervalMs
&
counter
)
;
AddSampleAndAdvance
(
kSample2
kDefaultProcessIntervalMs
&
counter
)
;
AddSampleAndAdvance
(
kSample3
kDefaultProcessIntervalMs
&
counter
)
;
AddSampleAndAdvance
(
kSample4
kDefaultProcessIntervalMs
&
counter
)
;
AddSampleAndAdvance
(
kSample5
kDefaultProcessIntervalMs
&
counter
)
;
counter
.
Add
(
111
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
5
stats
.
num_samples
)
;
EXPECT_EQ
(
kSample1
stats
.
min
)
;
EXPECT_EQ
(
kSample5
stats
.
max
)
;
EXPECT_EQ
(
15
stats
.
average
)
;
}
TEST_F
(
StatsCounterTest
TestGetStatsTwice
)
{
const
int
kSample1
=
4
;
const
int
kSample2
=
7
;
AvgCounter
counter
(
&
clock_
nullptr
false
)
;
AddSampleAndAdvance
(
kSample1
kDefaultProcessIntervalMs
&
counter
)
;
counter
.
Add
(
kSample2
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
1
stats
.
num_samples
)
;
EXPECT_EQ
(
kSample1
stats
.
min
)
;
EXPECT_EQ
(
kSample1
stats
.
max
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
Add
(
111
)
;
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
2
stats
.
num_samples
)
;
EXPECT_EQ
(
kSample1
stats
.
min
)
;
EXPECT_EQ
(
kSample2
stats
.
max
)
;
EXPECT_EQ
(
6
stats
.
average
)
;
}
TEST_F
(
StatsCounterTest
TestRateAccCounter_NegativeRateIgnored
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
const
int
kSample1
=
200
;
const
int
kSample2
=
100
;
const
int
kSample3
=
700
;
RateAccCounter
counter
(
&
clock_
observer
true
)
;
SetSampleAndAdvance
(
kSample1
kDefaultProcessIntervalMs
&
counter
)
;
SetSampleAndAdvance
(
kSample2
kDefaultProcessIntervalMs
&
counter
)
;
SetSampleAndAdvance
(
kSample3
kDefaultProcessIntervalMs
&
counter
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
100
observer
-
>
last_sample_
)
;
counter
.
Set
(
2000
kStreamId
)
;
EXPECT_EQ
(
2
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
300
observer
-
>
last_sample_
)
;
AggregatedStats
stats
=
counter
.
GetStats
(
)
;
EXPECT_EQ
(
2
stats
.
num_samples
)
;
EXPECT_EQ
(
100
stats
.
min
)
;
EXPECT_EQ
(
300
stats
.
max
)
;
EXPECT_EQ
(
200
stats
.
average
)
;
}
TEST_F
(
StatsCounterTest
TestAvgCounter_IntervalsWithoutSamplesIncluded
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
AvgCounter
counter
(
&
clock_
observer
true
)
;
AddSampleAndAdvance
(
6
kDefaultProcessIntervalMs
*
4
-
1
&
counter
)
;
counter
.
Add
(
8
)
;
AggregatedStats
stats
=
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
3
stats
.
num_samples
)
;
EXPECT_EQ
(
6
stats
.
min
)
;
EXPECT_EQ
(
6
stats
.
max
)
;
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
4
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
8
observer
-
>
last_sample_
)
;
}
TEST_F
(
StatsCounterTest
TestAvgCounter_WithPause
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
AvgCounter
counter
(
&
clock_
observer
true
)
;
AddSampleAndAdvance
(
6
kDefaultProcessIntervalMs
*
4
-
1
&
counter
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
3
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
counter
.
ProcessAndPause
(
)
;
EXPECT_EQ
(
4
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
*
2
-
1
)
;
counter
.
Add
(
22
)
;
EXPECT_EQ
(
4
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
5
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
22
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
6
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
22
observer
-
>
last_sample_
)
;
}
TEST_F
(
StatsCounterTest
TestRateAccCounter_AddSampleStopsPause
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
RateAccCounter
counter
(
&
clock_
observer
true
)
;
counter
.
Set
(
12
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
ProcessAndPause
(
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
counter
.
Set
(
24
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
2
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
}
TEST_F
(
StatsCounterTest
TestRateAccCounter_AddSameSampleDoesNotStopPause
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
RateAccCounter
counter
(
&
clock_
observer
true
)
;
counter
.
Set
(
12
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
ProcessAndPause
(
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
counter
.
Set
(
12
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
counter
.
Set
(
24
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
2
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
}
TEST_F
(
StatsCounterTest
TestRateAccCounter_PauseAndStopPause
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
RateAccCounter
counter
(
&
clock_
observer
true
)
;
counter
.
Set
(
12
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
ProcessAndPause
(
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
counter
.
Set
(
12
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
counter
.
ProcessAndStopPause
(
)
;
counter
.
Set
(
12
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
2
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
0
observer
-
>
last_sample_
)
;
}
TEST_F
(
StatsCounterTest
TestAvgCounter_WithoutMinPauseTimePassed
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
AvgCounter
counter
(
&
clock_
observer
true
)
;
AddSampleAndAdvance
(
6
kDefaultProcessIntervalMs
&
counter
)
;
const
int64_t
kMinMs
=
500
;
counter
.
ProcessAndPauseForDuration
(
kMinMs
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
kMinMs
-
1
)
;
counter
.
Add
(
2
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
*
2
-
(
kMinMs
-
1
)
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
2
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
2
observer
-
>
last_sample_
)
;
}
TEST_F
(
StatsCounterTest
TestAvgCounter_WithMinPauseTimePassed
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
AvgCounter
counter
(
&
clock_
observer
true
)
;
AddSampleAndAdvance
(
6
kDefaultProcessIntervalMs
&
counter
)
;
const
int64_t
kMinMs
=
500
;
counter
.
ProcessAndPauseForDuration
(
kMinMs
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
kMinMs
)
;
counter
.
Add
(
2
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
*
2
-
kMinMs
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
3
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
2
observer
-
>
last_sample_
)
;
}
TEST_F
(
StatsCounterTest
TestRateCounter_IntervalsWithoutSamplesIgnored
)
{
const
bool
kIncludeEmptyIntervals
=
false
;
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
const
int
kSample1
=
50
;
const
int
kSample2
=
20
;
RateCounter
counter
(
&
clock_
observer
kIncludeEmptyIntervals
)
;
counter
.
Add
(
kSample1
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
*
3
-
1
)
;
counter
.
Add
(
kSample2
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
25
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
2
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
10
observer
-
>
last_sample_
)
;
}
TEST_F
(
StatsCounterTest
TestRateCounter_IntervalsWithoutSamplesIncluded
)
{
const
bool
kIncludeEmptyIntervals
=
true
;
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
const
int
kSample1
=
50
;
const
int
kSample2
=
20
;
RateCounter
counter
(
&
clock_
observer
kIncludeEmptyIntervals
)
;
counter
.
Add
(
kSample1
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
*
3
-
1
)
;
counter
.
Add
(
kSample2
)
;
EXPECT_EQ
(
2
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
0
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
AggregatedStats
stats
=
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
25
stats
.
max
)
;
EXPECT_EQ
(
3
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
10
observer
-
>
last_sample_
)
;
}
TEST_F
(
StatsCounterTest
TestRateAccCounter_IntervalsWithoutSamplesIncluded
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
RateAccCounter
counter
(
&
clock_
observer
true
)
;
VerifyStatsIsNotSet
(
counter
.
ProcessAndGetStats
(
)
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
)
;
VerifyStatsIsNotSet
(
counter
.
ProcessAndGetStats
(
)
)
;
counter
.
Set
(
12
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
*
4
-
1
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
3
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
0
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
4
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
0
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
-
1
)
;
counter
.
Set
(
60
kStreamId
)
;
EXPECT_EQ
(
4
observer
-
>
num_calls_
)
;
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
AggregatedStats
stats
=
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
5
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
24
observer
-
>
last_sample_
)
;
EXPECT_EQ
(
6
stats
.
average
)
;
}
TEST_F
(
StatsCounterTest
TestRateAccCounter_IntervalsWithoutSamplesIgnored
)
{
StatsCounterObserverImpl
*
observer
=
new
StatsCounterObserverImpl
(
)
;
RateAccCounter
counter
(
&
clock_
observer
false
)
;
counter
.
Set
(
12
kStreamId
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
*
4
-
1
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
6
observer
-
>
last_sample_
)
;
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
clock_
.
AdvanceTimeMilliseconds
(
kDefaultProcessIntervalMs
-
1
)
;
counter
.
Set
(
60
kStreamId
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
1
observer
-
>
num_calls_
)
;
clock_
.
AdvanceTimeMilliseconds
(
1
)
;
counter
.
ProcessAndGetStats
(
)
;
EXPECT_EQ
(
2
observer
-
>
num_calls_
)
;
EXPECT_EQ
(
24
observer
-
>
last_sample_
)
;
}
}
