#
ifndef
WEBRTC_VIDEO_SEND_STREAM_H_
#
define
WEBRTC_VIDEO_SEND_STREAM_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
<
utility
>
#
include
"
webrtc
/
api
/
call
/
transport
.
h
"
#
include
"
webrtc
/
base
/
platform_file
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
common_video
/
include
/
frame_callback
.
h
"
#
include
"
webrtc
/
config
.
h
"
#
include
"
webrtc
/
media
/
base
/
videosinkinterface
.
h
"
#
include
"
webrtc
/
media
/
base
/
videosourceinterface
.
h
"
namespace
webrtc
{
class
VideoEncoder
;
class
VideoSendStream
{
public
:
struct
StreamStats
{
std
:
:
string
ToString
(
)
const
;
FrameCounts
frame_counts
;
bool
is_rtx
=
false
;
bool
is_flexfec
=
false
;
int
width
=
0
;
int
height
=
0
;
int
total_bitrate_bps
=
0
;
int
retransmit_bitrate_bps
=
0
;
int
avg_delay_ms
=
0
;
int
max_delay_ms
=
0
;
StreamDataCounters
rtp_stats
;
RtcpPacketTypeCounter
rtcp_packet_type_counts
;
RtcpStatistics
rtcp_stats
;
}
;
struct
Stats
{
std
:
:
string
ToString
(
int64_t
time_ms
)
const
;
std
:
:
string
encoder_implementation_name
=
"
unknown
"
;
int
input_frame_rate
=
0
;
int
encode_frame_rate
=
0
;
int
avg_encode_time_ms
=
0
;
int
encode_usage_percent
=
0
;
uint32_t
frames_encoded
=
0
;
rtc
:
:
Optional
<
uint64_t
>
qp_sum
;
int
target_media_bitrate_bps
=
0
;
int
media_bitrate_bps
=
0
;
int
preferred_media_bitrate_bps
=
0
;
bool
suspended
=
false
;
bool
bw_limited_resolution
=
false
;
bool
cpu_limited_resolution
=
false
;
int
number_of_cpu_adapt_changes
=
0
;
std
:
:
map
<
uint32_t
StreamStats
>
substreams
;
}
;
struct
Config
{
public
:
Config
(
)
=
delete
;
Config
(
Config
&
&
)
=
default
;
explicit
Config
(
Transport
*
send_transport
)
:
send_transport
(
send_transport
)
{
}
Config
&
operator
=
(
Config
&
&
)
=
default
;
Config
&
operator
=
(
const
Config
&
)
=
delete
;
Config
Copy
(
)
const
{
return
Config
(
*
this
)
;
}
std
:
:
string
ToString
(
)
const
;
struct
EncoderSettings
{
EncoderSettings
(
)
=
default
;
EncoderSettings
(
std
:
:
string
payload_name
int
payload_type
VideoEncoder
*
encoder
)
:
payload_name
(
std
:
:
move
(
payload_name
)
)
payload_type
(
payload_type
)
encoder
(
encoder
)
{
}
std
:
:
string
ToString
(
)
const
;
std
:
:
string
payload_name
;
int
payload_type
=
-
1
;
bool
internal_source
=
false
;
bool
full_overuse_time
=
false
;
VideoEncoder
*
encoder
=
nullptr
;
}
encoder_settings
;
static
const
size_t
kDefaultMaxPacketSize
=
1500
-
40
;
struct
Rtp
{
std
:
:
string
ToString
(
)
const
;
std
:
:
vector
<
uint32_t
>
ssrcs
;
RtcpMode
rtcp_mode
=
RtcpMode
:
:
kCompound
;
size_t
max_packet_size
=
kDefaultMaxPacketSize
;
std
:
:
vector
<
RtpExtension
>
extensions
;
NackConfig
nack
;
UlpfecConfig
ulpfec
;
struct
Flexfec
{
int
payload_type
=
-
1
;
uint32_t
ssrc
=
0
;
std
:
:
vector
<
uint32_t
>
protected_media_ssrcs
;
}
flexfec
;
struct
Rtx
{
std
:
:
string
ToString
(
)
const
;
std
:
:
vector
<
uint32_t
>
ssrcs
;
int
payload_type
=
-
1
;
}
rtx
;
std
:
:
string
c_name
;
}
rtp
;
Transport
*
send_transport
=
nullptr
;
rtc
:
:
VideoSinkInterface
<
VideoFrame
>
*
pre_encode_callback
=
nullptr
;
EncodedFrameObserver
*
post_encode_callback
=
nullptr
;
int
render_delay_ms
=
0
;
int
target_delay_ms
=
0
;
bool
suspend_below_min_bitrate
=
false
;
bool
periodic_alr_bandwidth_probing
=
false
;
private
:
Config
(
const
Config
&
)
=
default
;
}
;
virtual
void
Start
(
)
=
0
;
virtual
void
Stop
(
)
=
0
;
enum
class
DegradationPreference
{
kMaintainResolution
kBalanced
}
;
virtual
void
SetSource
(
rtc
:
:
VideoSourceInterface
<
webrtc
:
:
VideoFrame
>
*
source
const
DegradationPreference
&
degradation_preference
)
=
0
;
virtual
void
ReconfigureVideoEncoder
(
VideoEncoderConfig
config
)
=
0
;
virtual
Stats
GetStats
(
)
=
0
;
virtual
void
EnableEncodedFrameRecording
(
const
std
:
:
vector
<
rtc
:
:
PlatformFile
>
&
files
size_t
byte_limit
)
=
0
;
inline
void
DisableEncodedFrameRecording
(
)
{
EnableEncodedFrameRecording
(
std
:
:
vector
<
rtc
:
:
PlatformFile
>
(
)
0
)
;
}
protected
:
virtual
~
VideoSendStream
(
)
{
}
}
;
}
#
endif
