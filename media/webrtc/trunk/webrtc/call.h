#
ifndef
WEBRTC_CALL_H_
#
define
WEBRTC_CALL_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
audio_receive_stream
.
h
"
#
include
"
webrtc
/
audio_send_stream
.
h
"
#
include
"
webrtc
/
audio_state
.
h
"
#
include
"
webrtc
/
base
/
socket
.
h
"
#
include
"
webrtc
/
video_receive_stream
.
h
"
#
include
"
webrtc
/
video_send_stream
.
h
"
namespace
webrtc
{
class
AudioProcessing
;
const
char
*
Version
(
)
;
enum
class
MediaType
{
ANY
AUDIO
VIDEO
DATA
}
;
class
PacketReceiver
{
public
:
enum
DeliveryStatus
{
DELIVERY_OK
DELIVERY_UNKNOWN_SSRC
DELIVERY_PACKET_ERROR
}
;
virtual
DeliveryStatus
DeliverPacket
(
MediaType
media_type
const
uint8_t
*
packet
size_t
length
const
PacketTime
&
packet_time
)
=
0
;
protected
:
virtual
~
PacketReceiver
(
)
{
}
}
;
class
LoadObserver
{
public
:
enum
Load
{
kOveruse
kUnderuse
}
;
virtual
void
OnLoadUpdate
(
Load
load
)
=
0
;
protected
:
virtual
~
LoadObserver
(
)
{
}
}
;
class
Call
{
public
:
struct
Config
{
static
const
int
kDefaultStartBitrateBps
;
struct
BitrateConfig
{
int
min_bitrate_bps
=
0
;
int
start_bitrate_bps
=
kDefaultStartBitrateBps
;
int
max_bitrate_bps
=
-
1
;
}
bitrate_config
;
rtc
:
:
scoped_refptr
<
AudioState
>
audio_state
;
AudioProcessing
*
audio_processing
=
nullptr
;
}
;
struct
Stats
{
int
send_bandwidth_bps
=
0
;
int
recv_bandwidth_bps
=
0
;
int64_t
pacer_delay_ms
=
0
;
int64_t
rtt_ms
=
-
1
;
}
;
static
Call
*
Create
(
const
Call
:
:
Config
&
config
)
;
virtual
AudioSendStream
*
CreateAudioSendStream
(
const
AudioSendStream
:
:
Config
&
config
)
=
0
;
virtual
void
DestroyAudioSendStream
(
AudioSendStream
*
send_stream
)
=
0
;
virtual
AudioReceiveStream
*
CreateAudioReceiveStream
(
const
AudioReceiveStream
:
:
Config
&
config
)
=
0
;
virtual
void
DestroyAudioReceiveStream
(
AudioReceiveStream
*
receive_stream
)
=
0
;
virtual
VideoSendStream
*
CreateVideoSendStream
(
const
VideoSendStream
:
:
Config
&
config
const
VideoEncoderConfig
&
encoder_config
)
=
0
;
virtual
void
DestroyVideoSendStream
(
VideoSendStream
*
send_stream
)
=
0
;
virtual
VideoReceiveStream
*
CreateVideoReceiveStream
(
const
VideoReceiveStream
:
:
Config
&
config
)
=
0
;
virtual
void
DestroyVideoReceiveStream
(
VideoReceiveStream
*
receive_stream
)
=
0
;
virtual
PacketReceiver
*
Receiver
(
)
=
0
;
virtual
Stats
GetStats
(
)
const
=
0
;
virtual
void
SetBitrateConfig
(
const
Config
:
:
BitrateConfig
&
bitrate_config
)
=
0
;
virtual
void
SignalNetworkState
(
NetworkState
state
)
=
0
;
virtual
void
OnSentPacket
(
const
rtc
:
:
SentPacket
&
sent_packet
)
=
0
;
virtual
VoiceEngine
*
voice_engine
(
)
=
0
;
virtual
~
Call
(
)
{
}
}
;
}
#
endif
