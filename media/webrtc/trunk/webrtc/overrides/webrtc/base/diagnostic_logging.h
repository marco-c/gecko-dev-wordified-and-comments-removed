#
ifndef
THIRD_PARTY_LIBJINGLE_OVERRIDES_WEBRTC_BASE_DIAGNOSTIC_LOGGING_H_
#
define
THIRD_PARTY_LIBJINGLE_OVERRIDES_WEBRTC_BASE_DIAGNOSTIC_LOGGING_H_
#
include
<
sstream
>
#
include
<
string
>
#
include
"
base
/
logging
.
h
"
#
include
"
third_party
/
webrtc
/
base
/
scoped_ref_ptr
.
h
"
namespace
rtc
{
struct
ConstantLabel
{
int
value
;
const
char
*
label
;
}
;
#
define
KLABEL
(
x
)
{
x
#
x
}
#
define
LASTLABEL
{
0
0
}
const
char
*
FindLabel
(
int
value
const
ConstantLabel
entries
[
]
)
;
std
:
:
string
ErrorName
(
int
err
const
ConstantLabel
*
err_table
)
;
enum
LoggingSeverity
{
LS_ERROR
=
1
LS_WARNING
=
2
LS_INFO
=
3
LS_VERBOSE
=
4
LS_SENSITIVE
=
5
INFO
=
LS_INFO
WARNING
=
LS_WARNING
LERROR
=
LS_ERROR
}
;
enum
LogErrorContext
{
ERRCTX_NONE
ERRCTX_ERRNO
ERRCTX_HRESULT
ERRCTX_OSSTATUS
ERRCTX_EN
=
ERRCTX_ERRNO
ERRCTX_HR
=
ERRCTX_HRESULT
ERRCTX_OS
=
ERRCTX_OSSTATUS
}
;
class
DiagnosticLogMessage
{
public
:
DiagnosticLogMessage
(
const
char
*
file
int
line
LoggingSeverity
severity
bool
log_to_chrome
LogErrorContext
err_ctx
int
err
)
;
DiagnosticLogMessage
(
const
char
*
file
int
line
LoggingSeverity
severity
bool
log_to_chrome
LogErrorContext
err_ctx
int
err
const
char
*
module
)
;
~
DiagnosticLogMessage
(
)
;
void
CreateTimestamp
(
)
;
std
:
:
ostream
&
stream
(
)
{
return
print_stream_
;
}
private
:
const
char
*
file_name_
;
const
int
line_
;
const
LoggingSeverity
severity_
;
const
bool
log_to_chrome_
;
std
:
:
string
extra_
;
std
:
:
ostringstream
print_stream_
;
}
;
class
LogMessageVoidify
{
public
:
LogMessageVoidify
(
)
{
}
void
operator
&
(
std
:
:
ostream
&
)
{
}
}
;
class
LogMultilineState
{
public
:
size_t
unprintable_count_
[
2
]
;
LogMultilineState
(
)
{
unprintable_count_
[
0
]
=
unprintable_count_
[
1
]
=
0
;
}
}
;
class
LogMessage
{
public
:
static
void
LogToDebug
(
int
min_sev
)
;
}
;
void
LogMultiline
(
LoggingSeverity
level
const
char
*
label
bool
input
const
void
*
data
size_t
len
bool
hex_mode
LogMultilineState
*
state
)
;
void
InitDiagnosticLoggingDelegateFunction
(
void
(
*
delegate
)
(
const
std
:
:
string
&
)
)
;
void
SetExtraLoggingInit
(
void
(
*
function
)
(
void
(
*
delegate
)
(
const
std
:
:
string
&
)
)
)
;
}
#
endif
