#
ifndef
WEBRTC_P2P_CLIENT_BASICPORTALLOCATOR_H_
#
define
WEBRTC_P2P_CLIENT_BASICPORTALLOCATOR_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
p2p
/
base
/
portallocator
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
messagequeue
.
h
"
#
include
"
webrtc
/
base
/
network
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
namespace
cricket
{
class
BasicPortAllocator
:
public
PortAllocator
{
public
:
BasicPortAllocator
(
rtc
:
:
NetworkManager
*
network_manager
rtc
:
:
PacketSocketFactory
*
socket_factory
)
;
explicit
BasicPortAllocator
(
rtc
:
:
NetworkManager
*
network_manager
)
;
BasicPortAllocator
(
rtc
:
:
NetworkManager
*
network_manager
rtc
:
:
PacketSocketFactory
*
socket_factory
const
ServerAddresses
&
stun_servers
)
;
BasicPortAllocator
(
rtc
:
:
NetworkManager
*
network_manager
const
ServerAddresses
&
stun_servers
const
rtc
:
:
SocketAddress
&
relay_server_udp
const
rtc
:
:
SocketAddress
&
relay_server_tcp
const
rtc
:
:
SocketAddress
&
relay_server_ssl
)
;
virtual
~
BasicPortAllocator
(
)
;
void
SetNetworkIgnoreMask
(
int
network_ignore_mask
)
override
{
network_ignore_mask_
=
network_ignore_mask
;
}
int
network_ignore_mask
(
)
const
{
return
network_ignore_mask_
;
}
rtc
:
:
NetworkManager
*
network_manager
(
)
const
{
return
network_manager_
;
}
rtc
:
:
PacketSocketFactory
*
socket_factory
(
)
{
return
socket_factory_
;
}
PortAllocatorSession
*
CreateSessionInternal
(
const
std
:
:
string
&
content_name
int
component
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
override
;
void
AddTurnServer
(
const
RelayServerConfig
&
turn_server
)
;
private
:
void
Construct
(
)
;
void
OnIceRegathering
(
PortAllocatorSession
*
session
IceRegatheringReason
reason
)
;
rtc
:
:
NetworkManager
*
network_manager_
;
rtc
:
:
PacketSocketFactory
*
socket_factory_
;
bool
allow_tcp_listen_
;
int
network_ignore_mask_
=
rtc
:
:
kDefaultNetworkIgnoreMask
;
}
;
struct
PortConfiguration
;
class
AllocationSequence
;
enum
class
SessionState
{
GATHERING
CLEARED
STOPPED
}
;
class
BasicPortAllocatorSession
:
public
PortAllocatorSession
public
rtc
:
:
MessageHandler
{
public
:
BasicPortAllocatorSession
(
BasicPortAllocator
*
allocator
const
std
:
:
string
&
content_name
int
component
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
;
~
BasicPortAllocatorSession
(
)
;
virtual
BasicPortAllocator
*
allocator
(
)
{
return
allocator_
;
}
rtc
:
:
Thread
*
network_thread
(
)
{
return
network_thread_
;
}
rtc
:
:
PacketSocketFactory
*
socket_factory
(
)
{
return
socket_factory_
;
}
void
SetCandidateFilter
(
uint32_t
filter
)
override
;
void
StartGettingPorts
(
)
override
;
void
StopGettingPorts
(
)
override
;
void
ClearGettingPorts
(
)
override
;
bool
IsGettingPorts
(
)
override
{
return
state_
=
=
SessionState
:
:
GATHERING
;
}
bool
IsCleared
(
)
const
override
{
return
state_
=
=
SessionState
:
:
CLEARED
;
}
bool
IsStopped
(
)
const
override
{
return
state_
=
=
SessionState
:
:
STOPPED
;
}
std
:
:
vector
<
PortInterface
*
>
ReadyPorts
(
)
const
override
;
std
:
:
vector
<
Candidate
>
ReadyCandidates
(
)
const
override
;
bool
CandidatesAllocationDone
(
)
const
override
;
void
RegatherOnFailedNetworks
(
)
override
;
void
PruneAllPorts
(
)
override
;
protected
:
void
UpdateIceParametersInternal
(
)
override
;
virtual
void
GetPortConfigurations
(
)
;
virtual
void
ConfigReady
(
PortConfiguration
*
config
)
;
void
OnMessage
(
rtc
:
:
Message
*
message
)
override
;
private
:
class
PortData
{
public
:
PortData
(
)
{
}
PortData
(
Port
*
port
AllocationSequence
*
seq
)
:
port_
(
port
)
sequence_
(
seq
)
{
}
Port
*
port
(
)
const
{
return
port_
;
}
AllocationSequence
*
sequence
(
)
const
{
return
sequence_
;
}
bool
has_pairable_candidate
(
)
const
{
return
has_pairable_candidate_
;
}
bool
complete
(
)
const
{
return
state_
=
=
STATE_COMPLETE
;
}
bool
error
(
)
const
{
return
state_
=
=
STATE_ERROR
;
}
bool
pruned
(
)
const
{
return
state_
=
=
STATE_PRUNED
;
}
bool
inprogress
(
)
const
{
return
state_
=
=
STATE_INPROGRESS
;
}
bool
ready
(
)
const
{
return
has_pairable_candidate_
&
&
state_
!
=
STATE_ERROR
&
&
state_
!
=
STATE_PRUNED
;
}
void
Prune
(
)
{
state_
=
STATE_PRUNED
;
if
(
port
(
)
)
{
port
(
)
-
>
Prune
(
)
;
}
}
void
set_has_pairable_candidate
(
bool
has_pairable_candidate
)
{
if
(
has_pairable_candidate
)
{
RTC_DCHECK
(
state_
=
=
STATE_INPROGRESS
)
;
}
has_pairable_candidate_
=
has_pairable_candidate
;
}
void
set_complete
(
)
{
state_
=
STATE_COMPLETE
;
}
void
set_error
(
)
{
RTC_DCHECK
(
state_
=
=
STATE_INPROGRESS
)
;
state_
=
STATE_ERROR
;
}
private
:
enum
State
{
STATE_INPROGRESS
STATE_COMPLETE
STATE_ERROR
STATE_PRUNED
}
;
Port
*
port_
=
nullptr
;
AllocationSequence
*
sequence_
=
nullptr
;
bool
has_pairable_candidate_
=
false
;
State
state_
=
STATE_INPROGRESS
;
}
;
void
OnConfigReady
(
PortConfiguration
*
config
)
;
void
OnConfigStop
(
)
;
void
AllocatePorts
(
)
;
void
OnAllocate
(
)
;
void
DoAllocate
(
)
;
void
OnNetworksChanged
(
)
;
void
OnAllocationSequenceObjectsCreated
(
)
;
void
DisableEquivalentPhases
(
rtc
:
:
Network
*
network
PortConfiguration
*
config
uint32_t
*
flags
)
;
void
AddAllocatedPort
(
Port
*
port
AllocationSequence
*
seq
bool
prepare_address
)
;
void
OnCandidateReady
(
Port
*
port
const
Candidate
&
c
)
;
void
OnPortComplete
(
Port
*
port
)
;
void
OnPortError
(
Port
*
port
)
;
void
OnProtocolEnabled
(
AllocationSequence
*
seq
ProtocolType
proto
)
;
void
OnPortDestroyed
(
PortInterface
*
port
)
;
void
MaybeSignalCandidatesAllocationDone
(
)
;
void
OnPortAllocationComplete
(
AllocationSequence
*
seq
)
;
PortData
*
FindPort
(
Port
*
port
)
;
std
:
:
vector
<
rtc
:
:
Network
*
>
GetNetworks
(
)
;
std
:
:
vector
<
rtc
:
:
Network
*
>
GetFailedNetworks
(
)
;
bool
CheckCandidateFilter
(
const
Candidate
&
c
)
const
;
bool
CandidatePairable
(
const
Candidate
&
c
const
Port
*
port
)
const
;
Candidate
SanitizeRelatedAddress
(
const
Candidate
&
c
)
const
;
std
:
:
vector
<
PortData
*
>
GetUnprunedPorts
(
const
std
:
:
vector
<
rtc
:
:
Network
*
>
&
networks
)
;
void
PrunePortsAndRemoveCandidates
(
const
std
:
:
vector
<
PortData
*
>
&
port_data_list
)
;
void
GetCandidatesFromPort
(
const
PortData
&
data
std
:
:
vector
<
Candidate
>
*
candidates
)
const
;
Port
*
GetBestTurnPortForNetwork
(
const
std
:
:
string
&
network_name
)
const
;
bool
PruneTurnPorts
(
Port
*
newly_pairable_turn_port
)
;
BasicPortAllocator
*
allocator_
;
rtc
:
:
Thread
*
network_thread_
;
std
:
:
unique_ptr
<
rtc
:
:
PacketSocketFactory
>
owned_socket_factory_
;
rtc
:
:
PacketSocketFactory
*
socket_factory_
;
bool
allocation_started_
;
bool
network_manager_started_
;
bool
allocation_sequences_created_
;
std
:
:
vector
<
PortConfiguration
*
>
configs_
;
std
:
:
vector
<
AllocationSequence
*
>
sequences_
;
std
:
:
vector
<
PortData
>
ports_
;
uint32_t
candidate_filter_
=
CF_ALL
;
bool
prune_turn_ports_
;
SessionState
state_
=
SessionState
:
:
CLEARED
;
friend
class
AllocationSequence
;
}
;
struct
PortConfiguration
:
public
rtc
:
:
MessageData
{
rtc
:
:
SocketAddress
stun_address
;
ServerAddresses
stun_servers
;
std
:
:
string
username
;
std
:
:
string
password
;
typedef
std
:
:
vector
<
RelayServerConfig
>
RelayList
;
RelayList
relays
;
PortConfiguration
(
const
rtc
:
:
SocketAddress
&
stun_address
const
std
:
:
string
&
username
const
std
:
:
string
&
password
)
;
PortConfiguration
(
const
ServerAddresses
&
stun_servers
const
std
:
:
string
&
username
const
std
:
:
string
&
password
)
;
ServerAddresses
StunServers
(
)
;
void
AddRelay
(
const
RelayServerConfig
&
config
)
;
bool
SupportsProtocol
(
const
RelayServerConfig
&
relay
ProtocolType
type
)
const
;
bool
SupportsProtocol
(
RelayType
turn_type
ProtocolType
type
)
const
;
ServerAddresses
GetRelayServerAddresses
(
RelayType
turn_type
ProtocolType
type
)
const
;
}
;
class
UDPPort
;
class
TurnPort
;
class
AllocationSequence
:
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
enum
State
{
kInit
kRunning
kStopped
kCompleted
}
;
AllocationSequence
(
BasicPortAllocatorSession
*
session
rtc
:
:
Network
*
network
PortConfiguration
*
config
uint32_t
flags
)
;
~
AllocationSequence
(
)
;
void
Init
(
)
;
void
Clear
(
)
;
void
OnNetworkFailed
(
)
;
State
state
(
)
const
{
return
state_
;
}
rtc
:
:
Network
*
network
(
)
const
{
return
network_
;
}
bool
network_failed
(
)
const
{
return
network_failed_
;
}
void
set_network_failed
(
)
{
network_failed_
=
true
;
}
void
DisableEquivalentPhases
(
rtc
:
:
Network
*
network
PortConfiguration
*
config
uint32_t
*
flags
)
;
void
Start
(
)
;
void
Stop
(
)
;
void
OnMessage
(
rtc
:
:
Message
*
msg
)
;
void
EnableProtocol
(
ProtocolType
proto
)
;
bool
ProtocolEnabled
(
ProtocolType
proto
)
const
;
sigslot
:
:
signal1
<
AllocationSequence
*
>
SignalPortAllocationComplete
;
protected
:
void
CreateTurnPort
(
const
RelayServerConfig
&
config
)
;
private
:
typedef
std
:
:
vector
<
ProtocolType
>
ProtocolList
;
bool
IsFlagSet
(
uint32_t
flag
)
{
return
(
(
flags_
&
flag
)
!
=
0
)
;
}
void
CreateUDPPorts
(
)
;
void
CreateTCPPorts
(
)
;
void
CreateStunPorts
(
)
;
void
CreateRelayPorts
(
)
;
void
CreateGturnPort
(
const
RelayServerConfig
&
config
)
;
void
OnReadPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
remote_addr
const
rtc
:
:
PacketTime
&
packet_time
)
;
void
OnPortDestroyed
(
PortInterface
*
port
)
;
BasicPortAllocatorSession
*
session_
;
bool
network_failed_
=
false
;
rtc
:
:
Network
*
network_
;
rtc
:
:
IPAddress
ip_
;
PortConfiguration
*
config_
;
State
state_
;
uint32_t
flags_
;
ProtocolList
protocols_
;
std
:
:
unique_ptr
<
rtc
:
:
AsyncPacketSocket
>
udp_socket_
;
UDPPort
*
udp_port_
;
std
:
:
vector
<
TurnPort
*
>
turn_ports_
;
int
phase_
;
}
;
}
#
endif
