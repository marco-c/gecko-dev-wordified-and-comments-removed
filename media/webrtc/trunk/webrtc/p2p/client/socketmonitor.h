#
ifndef
WEBRTC_P2P_CLIENT_SOCKETMONITOR_H_
#
define
WEBRTC_P2P_CLIENT_SOCKETMONITOR_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
jseptransport
.
h
"
namespace
cricket
{
class
ConnectionStatsGetter
{
public
:
virtual
~
ConnectionStatsGetter
(
)
{
}
virtual
bool
GetConnectionStats
(
ConnectionInfos
*
infos
)
=
0
;
}
;
class
ConnectionMonitor
:
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
ConnectionMonitor
(
ConnectionStatsGetter
*
stats_getter
rtc
:
:
Thread
*
network_thread
rtc
:
:
Thread
*
monitoring_thread
)
;
~
ConnectionMonitor
(
)
;
void
Start
(
int
cms
)
;
void
Stop
(
)
;
sigslot
:
:
signal2
<
ConnectionMonitor
*
const
std
:
:
vector
<
ConnectionInfo
>
&
>
SignalUpdate
;
protected
:
void
OnMessage
(
rtc
:
:
Message
*
message
)
;
private
:
void
PollConnectionStats_w
(
)
;
std
:
:
vector
<
ConnectionInfo
>
connection_infos_
;
ConnectionStatsGetter
*
stats_getter_
;
rtc
:
:
Thread
*
network_thread_
;
rtc
:
:
Thread
*
monitoring_thread_
;
rtc
:
:
CriticalSection
crit_
;
uint32_t
rate_
;
bool
monitoring_
;
}
;
}
#
endif
