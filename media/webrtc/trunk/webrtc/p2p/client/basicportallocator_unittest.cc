#
include
<
algorithm
>
#
include
<
memory
>
#
include
"
webrtc
/
p2p
/
base
/
basicpacketsocketfactory
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
p2pconstants
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
p2ptransportchannel
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
testrelayserver
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
teststunserver
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
testturnserver
.
h
"
#
include
"
webrtc
/
p2p
/
client
/
basicportallocator
.
h
"
#
include
"
webrtc
/
base
/
fakenetwork
.
h
"
#
include
"
webrtc
/
base
/
firewallsocketserver
.
h
"
#
include
"
webrtc
/
base
/
gunit
.
h
"
#
include
"
webrtc
/
base
/
helpers
.
h
"
#
include
"
webrtc
/
base
/
ipaddress
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
base
/
natserver
.
h
"
#
include
"
webrtc
/
base
/
natsocketfactory
.
h
"
#
include
"
webrtc
/
base
/
network
.
h
"
#
include
"
webrtc
/
base
/
physicalsocketserver
.
h
"
#
include
"
webrtc
/
base
/
socketaddress
.
h
"
#
include
"
webrtc
/
base
/
ssladapter
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
#
include
"
webrtc
/
base
/
virtualsocketserver
.
h
"
using
rtc
:
:
IPAddress
;
using
rtc
:
:
SocketAddress
;
using
rtc
:
:
Thread
;
static
const
SocketAddress
kAnyAddr
(
"
0
.
0
.
0
.
0
"
0
)
;
static
const
SocketAddress
kClientAddr
(
"
11
.
11
.
11
.
11
"
0
)
;
static
const
SocketAddress
kClientAddr2
(
"
22
.
22
.
22
.
22
"
0
)
;
static
const
SocketAddress
kLoopbackAddr
(
"
127
.
0
.
0
.
1
"
0
)
;
static
const
SocketAddress
kPrivateAddr
(
"
192
.
168
.
1
.
11
"
0
)
;
static
const
SocketAddress
kPrivateAddr2
(
"
192
.
168
.
1
.
12
"
0
)
;
static
const
SocketAddress
kClientIPv6Addr
(
"
2401
:
fa00
:
4
:
1000
:
be30
:
5bff
:
fee5
:
c3
"
0
)
;
static
const
SocketAddress
kClientIPv6Addr2
(
"
2401
:
fa00
:
4
:
2000
:
be30
:
5bff
:
fee5
:
c3
"
0
)
;
static
const
SocketAddress
kNatUdpAddr
(
"
77
.
77
.
77
.
77
"
rtc
:
:
NAT_SERVER_UDP_PORT
)
;
static
const
SocketAddress
kNatTcpAddr
(
"
77
.
77
.
77
.
77
"
rtc
:
:
NAT_SERVER_TCP_PORT
)
;
static
const
SocketAddress
kRemoteClientAddr
(
"
22
.
22
.
22
.
22
"
0
)
;
static
const
SocketAddress
kStunAddr
(
"
99
.
99
.
99
.
1
"
cricket
:
:
STUN_SERVER_PORT
)
;
static
const
SocketAddress
kRelayUdpIntAddr
(
"
99
.
99
.
99
.
2
"
5000
)
;
static
const
SocketAddress
kRelayUdpExtAddr
(
"
99
.
99
.
99
.
3
"
5001
)
;
static
const
SocketAddress
kRelayTcpIntAddr
(
"
99
.
99
.
99
.
2
"
5002
)
;
static
const
SocketAddress
kRelayTcpExtAddr
(
"
99
.
99
.
99
.
3
"
5003
)
;
static
const
SocketAddress
kRelaySslTcpIntAddr
(
"
99
.
99
.
99
.
2
"
5004
)
;
static
const
SocketAddress
kRelaySslTcpExtAddr
(
"
99
.
99
.
99
.
3
"
5005
)
;
static
const
SocketAddress
kTurnUdpIntAddr
(
"
99
.
99
.
99
.
4
"
3478
)
;
static
const
SocketAddress
kTurnUdpIntIPv6Addr
(
"
2402
:
fb00
:
4
:
1000
:
be30
:
5bff
:
fee5
:
c3
"
3479
)
;
static
const
SocketAddress
kTurnTcpIntAddr
(
"
99
.
99
.
99
.
5
"
3478
)
;
static
const
SocketAddress
kTurnTcpIntIPv6Addr
(
"
2402
:
fb00
:
4
:
2000
:
be30
:
5bff
:
fee5
:
c3
"
3479
)
;
static
const
SocketAddress
kTurnUdpExtAddr
(
"
99
.
99
.
99
.
6
"
0
)
;
static
const
int
kMinPort
=
10000
;
static
const
int
kMaxPort
=
10099
;
static
const
char
kIceUfrag0
[
]
=
"
UF00
"
;
static
const
char
kIcePwd0
[
]
=
"
TESTICEPWD00000000000000
"
;
static
const
char
kContentName
[
]
=
"
test
content
"
;
static
const
int
kDefaultAllocationTimeout
=
3000
;
static
const
char
kTurnUsername
[
]
=
"
test
"
;
static
const
char
kTurnPassword
[
]
=
"
test
"
;
static
const
int
kStunTimeoutMs
=
15000
;
namespace
cricket
{
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
std
:
:
vector
<
Candidate
>
&
candidates
)
{
os
<
<
'
[
'
;
bool
first
=
true
;
for
(
const
Candidate
&
c
:
candidates
)
{
if
(
!
first
)
{
os
<
<
"
"
;
}
os
<
<
c
.
ToString
(
)
;
first
=
false
;
}
;
os
<
<
'
]
'
;
return
os
;
}
class
BasicPortAllocatorTest
:
public
testing
:
:
Test
public
sigslot
:
:
has_slots
<
>
{
public
:
BasicPortAllocatorTest
(
)
:
pss_
(
new
rtc
:
:
PhysicalSocketServer
)
vss_
(
new
rtc
:
:
VirtualSocketServer
(
pss_
.
get
(
)
)
)
fss_
(
new
rtc
:
:
FirewallSocketServer
(
vss_
.
get
(
)
)
)
ss_scope_
(
fss_
.
get
(
)
)
nat_factory_
(
vss_
.
get
(
)
kNatUdpAddr
kNatTcpAddr
)
nat_socket_factory_
(
new
rtc
:
:
BasicPacketSocketFactory
(
&
nat_factory_
)
)
stun_server_
(
TestStunServer
:
:
Create
(
Thread
:
:
Current
(
)
kStunAddr
)
)
relay_server_
(
Thread
:
:
Current
(
)
kRelayUdpIntAddr
kRelayUdpExtAddr
kRelayTcpIntAddr
kRelayTcpExtAddr
kRelaySslTcpIntAddr
kRelaySslTcpExtAddr
)
turn_server_
(
Thread
:
:
Current
(
)
kTurnUdpIntAddr
kTurnUdpExtAddr
)
candidate_allocation_done_
(
false
)
{
ServerAddresses
stun_servers
;
stun_servers
.
insert
(
kStunAddr
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
stun_servers
kRelayUdpIntAddr
kRelayTcpIntAddr
kRelaySslTcpIntAddr
)
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
}
void
AddInterface
(
const
SocketAddress
&
addr
)
{
network_manager_
.
AddInterface
(
addr
)
;
}
void
AddInterface
(
const
SocketAddress
&
addr
const
std
:
:
string
&
if_name
)
{
network_manager_
.
AddInterface
(
addr
if_name
)
;
}
void
AddInterface
(
const
SocketAddress
&
addr
const
std
:
:
string
&
if_name
rtc
:
:
AdapterType
type
)
{
network_manager_
.
AddInterface
(
addr
if_name
type
)
;
}
void
AddInterfaceAsDefaultRoute
(
const
SocketAddress
&
addr
)
{
AddInterface
(
addr
)
;
vss_
-
>
SetDefaultRoute
(
addr
.
ipaddr
(
)
)
;
}
void
RemoveInterface
(
const
SocketAddress
&
addr
)
{
network_manager_
.
RemoveInterface
(
addr
)
;
}
bool
SetPortRange
(
int
min_port
int
max_port
)
{
return
allocator_
-
>
SetPortRange
(
min_port
max_port
)
;
}
void
ResetWithNoServersOrNat
(
)
{
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
)
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
}
void
ResetWithStunServerAndNat
(
const
rtc
:
:
SocketAddress
&
stun_server
)
{
ResetWithStunServer
(
stun_server
true
)
;
}
void
ResetWithStunServerNoNat
(
const
rtc
:
:
SocketAddress
&
stun_server
)
{
ResetWithStunServer
(
stun_server
false
)
;
}
void
ResetWithTurnServersNoNat
(
const
rtc
:
:
SocketAddress
&
udp_turn
const
rtc
:
:
SocketAddress
&
tcp_turn
)
{
ResetWithNoServersOrNat
(
)
;
AddTurnServers
(
udp_turn
tcp_turn
)
;
}
void
AddTurnServers
(
const
rtc
:
:
SocketAddress
&
udp_turn
const
rtc
:
:
SocketAddress
&
tcp_turn
)
{
RelayServerConfig
turn_server
(
RELAY_TURN
)
;
RelayCredentials
credentials
(
kTurnUsername
kTurnPassword
)
;
turn_server
.
credentials
=
credentials
;
if
(
!
udp_turn
.
IsNil
(
)
)
{
turn_server
.
ports
.
push_back
(
ProtocolAddress
(
udp_turn
PROTO_UDP
)
)
;
}
if
(
!
tcp_turn
.
IsNil
(
)
)
{
turn_server
.
ports
.
push_back
(
ProtocolAddress
(
tcp_turn
PROTO_TCP
)
)
;
}
allocator_
-
>
AddTurnServer
(
turn_server
)
;
}
bool
CreateSession
(
int
component
)
{
session_
=
CreateSession
(
"
session
"
component
)
;
if
(
!
session_
)
{
return
false
;
}
return
true
;
}
bool
CreateSession
(
int
component
const
std
:
:
string
&
content_name
)
{
session_
=
CreateSession
(
"
session
"
content_name
component
)
;
if
(
!
session_
)
{
return
false
;
}
return
true
;
}
std
:
:
unique_ptr
<
PortAllocatorSession
>
CreateSession
(
const
std
:
:
string
&
sid
int
component
)
{
return
CreateSession
(
sid
kContentName
component
)
;
}
std
:
:
unique_ptr
<
PortAllocatorSession
>
CreateSession
(
const
std
:
:
string
&
sid
const
std
:
:
string
&
content_name
int
component
)
{
return
CreateSession
(
sid
content_name
component
kIceUfrag0
kIcePwd0
)
;
}
std
:
:
unique_ptr
<
PortAllocatorSession
>
CreateSession
(
const
std
:
:
string
&
sid
const
std
:
:
string
&
content_name
int
component
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
{
std
:
:
unique_ptr
<
PortAllocatorSession
>
session
=
allocator_
-
>
CreateSession
(
content_name
component
ice_ufrag
ice_pwd
)
;
session
-
>
SignalPortReady
.
connect
(
this
&
BasicPortAllocatorTest
:
:
OnPortReady
)
;
session
-
>
SignalPortsPruned
.
connect
(
this
&
BasicPortAllocatorTest
:
:
OnPortsPruned
)
;
session
-
>
SignalCandidatesReady
.
connect
(
this
&
BasicPortAllocatorTest
:
:
OnCandidatesReady
)
;
session
-
>
SignalCandidatesRemoved
.
connect
(
this
&
BasicPortAllocatorTest
:
:
OnCandidatesRemoved
)
;
session
-
>
SignalCandidatesAllocationDone
.
connect
(
this
&
BasicPortAllocatorTest
:
:
OnCandidatesAllocationDone
)
;
return
session
;
}
static
bool
AddressMatch
(
const
SocketAddress
&
address
const
SocketAddress
&
pattern
)
{
return
address
.
ipaddr
(
)
=
=
pattern
.
ipaddr
(
)
&
&
(
(
pattern
.
port
(
)
=
=
0
&
&
(
address
.
port
(
)
!
=
0
|
|
IPIsAny
(
address
.
ipaddr
(
)
)
)
)
|
|
(
pattern
.
port
(
)
!
=
0
&
&
address
.
port
(
)
=
=
pattern
.
port
(
)
)
)
;
}
static
int
CountPorts
(
const
std
:
:
vector
<
PortInterface
*
>
&
ports
const
std
:
:
string
&
type
ProtocolType
protocol
const
SocketAddress
&
client_addr
)
{
return
std
:
:
count_if
(
ports
.
begin
(
)
ports
.
end
(
)
[
type
protocol
client_addr
]
(
PortInterface
*
port
)
{
return
port
-
>
Type
(
)
=
=
type
&
&
port
-
>
GetProtocol
(
)
=
=
protocol
&
&
port
-
>
Network
(
)
-
>
GetBestIP
(
)
=
=
client_addr
.
ipaddr
(
)
;
}
)
;
}
static
int
CountCandidates
(
const
std
:
:
vector
<
Candidate
>
&
candidates
const
std
:
:
string
&
type
const
std
:
:
string
&
proto
const
SocketAddress
&
addr
)
{
return
std
:
:
count_if
(
candidates
.
begin
(
)
candidates
.
end
(
)
[
type
proto
addr
]
(
const
Candidate
&
c
)
{
return
c
.
type
(
)
=
=
type
&
&
c
.
protocol
(
)
=
=
proto
&
&
AddressMatch
(
c
.
address
(
)
addr
)
;
}
)
;
}
static
bool
FindCandidate
(
const
std
:
:
vector
<
Candidate
>
&
candidates
const
std
:
:
string
&
type
const
std
:
:
string
&
proto
const
SocketAddress
&
addr
Candidate
*
found
)
{
auto
it
=
std
:
:
find_if
(
candidates
.
begin
(
)
candidates
.
end
(
)
[
type
proto
addr
]
(
const
Candidate
&
c
)
{
return
c
.
type
(
)
=
=
type
&
&
c
.
protocol
(
)
=
=
proto
&
&
AddressMatch
(
c
.
address
(
)
addr
)
;
}
)
;
if
(
it
!
=
candidates
.
end
(
)
&
&
found
)
{
*
found
=
*
it
;
}
return
it
!
=
candidates
.
end
(
)
;
}
static
bool
HasCandidate
(
const
std
:
:
vector
<
Candidate
>
&
candidates
const
std
:
:
string
&
type
const
std
:
:
string
&
proto
const
SocketAddress
&
addr
)
{
return
FindCandidate
(
candidates
type
proto
addr
nullptr
)
;
}
static
bool
HasCandidateWithRelatedAddr
(
const
std
:
:
vector
<
Candidate
>
&
candidates
const
std
:
:
string
&
type
const
std
:
:
string
&
proto
const
SocketAddress
&
addr
const
SocketAddress
&
related_addr
)
{
auto
it
=
std
:
:
find_if
(
candidates
.
begin
(
)
candidates
.
end
(
)
[
type
proto
addr
related_addr
]
(
const
Candidate
&
c
)
{
return
c
.
type
(
)
=
=
type
&
&
c
.
protocol
(
)
=
=
proto
&
&
AddressMatch
(
c
.
address
(
)
addr
)
&
&
AddressMatch
(
c
.
related_address
(
)
related_addr
)
;
}
)
;
return
it
!
=
candidates
.
end
(
)
;
}
static
bool
CheckPort
(
const
rtc
:
:
SocketAddress
&
addr
int
min_port
int
max_port
)
{
return
(
addr
.
port
(
)
>
=
min_port
&
&
addr
.
port
(
)
<
=
max_port
)
;
}
void
OnCandidatesAllocationDone
(
PortAllocatorSession
*
session
)
{
if
(
session
=
=
session_
.
get
(
)
)
{
ASSERT_FALSE
(
candidate_allocation_done_
)
;
candidate_allocation_done_
=
true
;
}
EXPECT_TRUE
(
session
-
>
CandidatesAllocationDone
(
)
)
;
}
void
CheckSendBufferSizesOfAllPorts
(
int
expected
)
{
std
:
:
vector
<
PortInterface
*
>
:
:
iterator
it
;
for
(
it
=
ports_
.
begin
(
)
;
it
<
ports_
.
end
(
)
;
+
+
it
)
{
int
send_buffer_size
;
if
(
expected
=
=
-
1
)
{
EXPECT_EQ
(
SOCKET_ERROR
(
*
it
)
-
>
GetOption
(
rtc
:
:
Socket
:
:
OPT_SNDBUF
&
send_buffer_size
)
)
;
}
else
{
EXPECT_EQ
(
0
(
*
it
)
-
>
GetOption
(
rtc
:
:
Socket
:
:
OPT_SNDBUF
&
send_buffer_size
)
)
;
ASSERT_EQ
(
expected
send_buffer_size
)
;
}
}
}
void
CheckDisableAdapterEnumeration
(
uint32_t
total_ports
const
rtc
:
:
IPAddress
&
host_candidate_addr
const
rtc
:
:
IPAddress
&
stun_candidate_addr
const
rtc
:
:
IPAddress
&
relay_candidate_udp_transport_addr
const
rtc
:
:
IPAddress
&
relay_candidate_tcp_transport_addr
)
{
network_manager_
.
set_default_local_addresses
(
kPrivateAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
)
;
if
(
!
session_
)
{
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
}
session_
-
>
set_flags
(
session_
-
>
flags
(
)
|
PORTALLOCATOR_DISABLE_ADAPTER_ENUMERATION
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
allocator
(
)
.
set_allow_tcp_listen
(
false
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
uint32_t
total_candidates
=
0
;
if
(
!
host_candidate_addr
.
IsNil
(
)
)
{
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
rtc
:
:
SocketAddress
(
kPrivateAddr
.
ipaddr
(
)
0
)
)
;
+
+
total_candidates
;
}
if
(
!
stun_candidate_addr
.
IsNil
(
)
)
{
rtc
:
:
SocketAddress
related_address
(
host_candidate_addr
0
)
;
if
(
host_candidate_addr
.
IsNil
(
)
)
{
related_address
.
SetIP
(
rtc
:
:
GetAnyIP
(
stun_candidate_addr
.
family
(
)
)
)
;
}
EXPECT_PRED5
(
HasCandidateWithRelatedAddr
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
stun_candidate_addr
0
)
related_address
)
;
+
+
total_candidates
;
}
if
(
!
relay_candidate_udp_transport_addr
.
IsNil
(
)
)
{
EXPECT_PRED5
(
HasCandidateWithRelatedAddr
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
relay_candidate_udp_transport_addr
0
)
rtc
:
:
SocketAddress
(
stun_candidate_addr
0
)
)
;
+
+
total_candidates
;
}
if
(
!
relay_candidate_tcp_transport_addr
.
IsNil
(
)
)
{
EXPECT_PRED5
(
HasCandidateWithRelatedAddr
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
relay_candidate_tcp_transport_addr
0
)
rtc
:
:
SocketAddress
(
stun_candidate_addr
0
)
)
;
+
+
total_candidates
;
}
EXPECT_EQ
(
total_candidates
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
total_ports
ports_
.
size
(
)
)
;
}
rtc
:
:
VirtualSocketServer
*
virtual_socket_server
(
)
{
return
vss_
.
get
(
)
;
}
protected
:
BasicPortAllocator
&
allocator
(
)
{
return
*
allocator_
;
}
void
OnPortReady
(
PortAllocatorSession
*
ses
PortInterface
*
port
)
{
LOG
(
LS_INFO
)
<
<
"
OnPortReady
:
"
<
<
port
-
>
ToString
(
)
;
ports_
.
push_back
(
port
)
;
auto
ready_ports
=
ses
-
>
ReadyPorts
(
)
;
EXPECT_NE
(
ready_ports
.
end
(
)
std
:
:
find
(
ready_ports
.
begin
(
)
ready_ports
.
end
(
)
port
)
)
;
}
void
OnPortsPruned
(
PortAllocatorSession
*
ses
const
std
:
:
vector
<
PortInterface
*
>
&
pruned_ports
)
{
LOG
(
LS_INFO
)
<
<
"
Number
of
ports
pruned
:
"
<
<
pruned_ports
.
size
(
)
;
auto
ready_ports
=
ses
-
>
ReadyPorts
(
)
;
auto
new_end
=
ports_
.
end
(
)
;
for
(
PortInterface
*
port
:
pruned_ports
)
{
new_end
=
std
:
:
remove
(
ports_
.
begin
(
)
new_end
port
)
;
EXPECT_EQ
(
ready_ports
.
end
(
)
std
:
:
find
(
ready_ports
.
begin
(
)
ready_ports
.
end
(
)
port
)
)
;
}
ports_
.
erase
(
new_end
ports_
.
end
(
)
)
;
}
void
OnCandidatesReady
(
PortAllocatorSession
*
ses
const
std
:
:
vector
<
Candidate
>
&
candidates
)
{
for
(
const
Candidate
&
candidate
:
candidates
)
{
LOG
(
LS_INFO
)
<
<
"
OnCandidatesReady
:
"
<
<
candidate
.
ToString
(
)
;
EXPECT_EQ
(
ICE_CANDIDATE_COMPONENT_RTP
candidate
.
component
(
)
)
;
candidates_
.
push_back
(
candidate
)
;
}
auto
ses_candidates
=
ses
-
>
ReadyCandidates
(
)
;
for
(
const
Candidate
&
candidate
:
candidates
)
{
EXPECT_NE
(
ses_candidates
.
end
(
)
std
:
:
find
(
ses_candidates
.
begin
(
)
ses_candidates
.
end
(
)
candidate
)
)
;
}
}
void
OnCandidatesRemoved
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
Candidate
>
&
removed_candidates
)
{
auto
new_end
=
std
:
:
remove_if
(
candidates_
.
begin
(
)
candidates_
.
end
(
)
[
removed_candidates
]
(
Candidate
&
candidate
)
{
for
(
const
Candidate
&
removed_candidate
:
removed_candidates
)
{
if
(
candidate
.
MatchesForRemoval
(
removed_candidate
)
)
{
return
true
;
}
}
return
false
;
}
)
;
candidates_
.
erase
(
new_end
candidates_
.
end
(
)
)
;
}
bool
HasRelayAddress
(
const
ProtocolAddress
&
proto_addr
)
{
for
(
size_t
i
=
0
;
i
<
allocator_
-
>
turn_servers
(
)
.
size
(
)
;
+
+
i
)
{
RelayServerConfig
server_config
=
allocator_
-
>
turn_servers
(
)
[
i
]
;
PortList
:
:
const_iterator
relay_port
;
for
(
relay_port
=
server_config
.
ports
.
begin
(
)
;
relay_port
!
=
server_config
.
ports
.
end
(
)
;
+
+
relay_port
)
{
if
(
proto_addr
.
address
=
=
relay_port
-
>
address
&
&
proto_addr
.
proto
=
=
relay_port
-
>
proto
)
return
true
;
}
}
return
false
;
}
void
ResetWithStunServer
(
const
rtc
:
:
SocketAddress
&
stun_server
bool
with_nat
)
{
if
(
with_nat
)
{
nat_server_
.
reset
(
new
rtc
:
:
NATServer
(
rtc
:
:
NAT_OPEN_CONE
vss_
.
get
(
)
kNatUdpAddr
kNatTcpAddr
vss_
.
get
(
)
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
)
)
;
}
else
{
nat_socket_factory_
.
reset
(
new
rtc
:
:
BasicPacketSocketFactory
(
)
)
;
}
ServerAddresses
stun_servers
;
if
(
!
stun_server
.
IsNil
(
)
)
{
stun_servers
.
insert
(
stun_server
)
;
}
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
nat_socket_factory_
.
get
(
)
stun_servers
)
)
;
allocator
(
)
.
set_step_delay
(
kMinimumStepDelay
)
;
}
void
TestUdpTurnPortPrunesTcpTurnPort
(
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddInterface
(
kClientAddr
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
)
)
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
0
true
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
2U
session_
-
>
ReadyPorts
(
)
.
size
(
)
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kClientAddr
)
)
;
EXPECT_EQ
(
0
CountPorts
(
ports_
"
relay
"
PROTO_TCP
kClientAddr
)
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
const
std
:
:
vector
<
Candidate
>
&
ready_candidates
=
session_
-
>
ReadyCandidates
(
)
;
EXPECT_EQ
(
2U
ready_candidates
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
;
}
void
TestIPv6TurnPortPrunesIPv4TurnPort
(
)
{
turn_server_
.
AddInternalSocket
(
kTurnUdpIntIPv6Addr
PROTO_UDP
)
;
AddInterface
(
kClientAddr
"
net1
"
)
;
AddInterface
(
kClientIPv6Addr
"
net1
"
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
)
)
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
0
true
)
;
AddTurnServers
(
kTurnUdpIntIPv6Addr
rtc
:
:
SocketAddress
(
)
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_ENABLE_IPV6
|
PORTALLOCATOR_DISABLE_TCP
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
3U
session_
-
>
ReadyPorts
(
)
.
size
(
)
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientIPv6Addr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kClientIPv6Addr
)
)
;
EXPECT_EQ
(
0
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kClientAddr
)
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
const
std
:
:
vector
<
Candidate
>
&
ready_candidates
=
session_
-
>
ReadyCandidates
(
)
;
EXPECT_EQ
(
3U
ready_candidates
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
;
}
void
TestEachInterfaceHasItsOwnTurnPorts
(
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
turn_server_
.
AddInternalSocket
(
kTurnUdpIntIPv6Addr
PROTO_UDP
)
;
turn_server_
.
AddInternalSocket
(
kTurnTcpIntIPv6Addr
PROTO_TCP
)
;
AddInterface
(
kClientAddr
"
net1
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
kClientIPv6Addr
"
net1
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
kClientAddr2
"
net2
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
AddInterface
(
kClientIPv6Addr2
"
net2
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
)
)
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
0
true
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
AddTurnServers
(
kTurnUdpIntIPv6Addr
kTurnTcpIntIPv6Addr
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_ENABLE_IPV6
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
10U
session_
-
>
ReadyPorts
(
)
.
size
(
)
)
;
EXPECT_EQ
(
10U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientAddr2
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientIPv6Addr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_UDP
kClientIPv6Addr2
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_TCP
kClientAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_TCP
kClientAddr2
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_TCP
kClientIPv6Addr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_TCP
kClientIPv6Addr2
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kClientIPv6Addr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kClientIPv6Addr2
)
)
;
EXPECT_EQ
(
10U
candidates_
.
size
(
)
)
;
const
std
:
:
vector
<
Candidate
>
&
ready_candidates
=
session_
-
>
ReadyCandidates
(
)
;
EXPECT_EQ
(
10U
ready_candidates
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
local
"
"
udp
"
kClientAddr2
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
local
"
"
udp
"
kClientIPv6Addr
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
local
"
"
udp
"
kClientIPv6Addr2
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
local
"
"
tcp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
local
"
"
tcp
"
kClientAddr2
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
local
"
"
tcp
"
kClientIPv6Addr
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
local
"
"
tcp
"
kClientIPv6Addr2
)
;
EXPECT_PRED4
(
HasCandidate
ready_candidates
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
;
}
std
:
:
unique_ptr
<
rtc
:
:
PhysicalSocketServer
>
pss_
;
std
:
:
unique_ptr
<
rtc
:
:
VirtualSocketServer
>
vss_
;
std
:
:
unique_ptr
<
rtc
:
:
FirewallSocketServer
>
fss_
;
rtc
:
:
SocketServerScope
ss_scope_
;
std
:
:
unique_ptr
<
rtc
:
:
NATServer
>
nat_server_
;
rtc
:
:
NATSocketFactory
nat_factory_
;
std
:
:
unique_ptr
<
rtc
:
:
BasicPacketSocketFactory
>
nat_socket_factory_
;
std
:
:
unique_ptr
<
TestStunServer
>
stun_server_
;
TestRelayServer
relay_server_
;
TestTurnServer
turn_server_
;
rtc
:
:
FakeNetworkManager
network_manager_
;
std
:
:
unique_ptr
<
BasicPortAllocator
>
allocator_
;
std
:
:
unique_ptr
<
PortAllocatorSession
>
session_
;
std
:
:
vector
<
PortInterface
*
>
ports_
;
std
:
:
vector
<
Candidate
>
candidates_
;
bool
candidate_allocation_done_
;
}
;
TEST_F
(
BasicPortAllocatorTest
TestBasic
)
{
EXPECT_EQ
(
&
network_manager_
allocator
(
)
.
network_manager
(
)
)
;
EXPECT_EQ
(
kStunAddr
*
allocator
(
)
.
stun_servers
(
)
.
begin
(
)
)
;
ASSERT_EQ
(
1u
allocator
(
)
.
turn_servers
(
)
.
size
(
)
)
;
EXPECT_EQ
(
RELAY_GTURN
allocator
(
)
.
turn_servers
(
)
[
0
]
.
type
)
;
EXPECT_TRUE
(
allocator
(
)
.
turn_servers
(
)
[
0
]
.
credentials
.
username
.
empty
(
)
)
;
EXPECT_TRUE
(
allocator
(
)
.
turn_servers
(
)
[
0
]
.
credentials
.
password
.
empty
(
)
)
;
EXPECT_TRUE
(
HasRelayAddress
(
ProtocolAddress
(
kRelayUdpIntAddr
PROTO_UDP
)
)
)
;
EXPECT_TRUE
(
HasRelayAddress
(
ProtocolAddress
(
kRelayTcpIntAddr
PROTO_TCP
)
)
)
;
EXPECT_TRUE
(
HasRelayAddress
(
ProtocolAddress
(
kRelaySslTcpIntAddr
PROTO_SSLTCP
)
)
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
EXPECT_FALSE
(
session_
-
>
CandidatesAllocationDone
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestIgnoreOnlyLoopbackNetworkByDefault
)
{
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345600U
)
0
)
"
test_eth0
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345601U
)
0
)
"
test_wlan0
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345602U
)
0
)
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345603U
)
0
)
"
test_vpn0
"
rtc
:
:
ADAPTER_TYPE_VPN
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345604U
)
0
)
"
test_lo
"
rtc
:
:
ADAPTER_TYPE_LOOPBACK
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
4U
candidates_
.
size
(
)
)
;
for
(
Candidate
candidate
:
candidates_
)
{
EXPECT_LT
(
candidate
.
address
(
)
.
ip
(
)
0x12345604U
)
;
}
}
TEST_F
(
BasicPortAllocatorTest
TestIgnoreNetworksAccordingToIgnoreMask
)
{
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345600U
)
0
)
"
test_eth0
"
rtc
:
:
ADAPTER_TYPE_ETHERNET
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345601U
)
0
)
"
test_wlan0
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
SocketAddress
(
IPAddress
(
0x12345602U
)
0
)
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
allocator_
-
>
SetNetworkIgnoreMask
(
rtc
:
:
ADAPTER_TYPE_ETHERNET
|
rtc
:
:
ADAPTER_TYPE_LOOPBACK
|
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
0x12345602U
candidates_
[
0
]
.
address
(
)
.
ip
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGatherLowCostNetworkOnly
)
{
SocketAddress
addr_wifi
(
IPAddress
(
0x12345600U
)
0
)
;
SocketAddress
addr_cellular
(
IPAddress
(
0x12345601U
)
0
)
;
SocketAddress
addr_unknown1
(
IPAddress
(
0x12345602U
)
0
)
;
SocketAddress
addr_unknown2
(
IPAddress
(
0x12345603U
)
0
)
;
AddInterface
(
addr_wifi
"
test_wlan0
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
AddInterface
(
addr_cellular
"
test_cell0
"
rtc
:
:
ADAPTER_TYPE_CELLULAR
)
;
allocator
(
)
.
set_flags
(
cricket
:
:
PORTALLOCATOR_DISABLE_STUN
|
cricket
:
:
PORTALLOCATOR_DISABLE_RELAY
|
cricket
:
:
PORTALLOCATOR_DISABLE_TCP
|
cricket
:
:
PORTALLOCATOR_DISABLE_COSTLY_NETWORKS
)
;
EXPECT_TRUE
(
CreateSession
(
cricket
:
:
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
addr_wifi
.
EqualIPs
(
candidates_
[
0
]
.
address
(
)
)
)
;
candidates_
.
clear
(
)
;
candidate_allocation_done_
=
false
;
RemoveInterface
(
addr_wifi
)
;
AddInterface
(
addr_unknown1
"
test_unknown0
"
rtc
:
:
ADAPTER_TYPE_UNKNOWN
)
;
AddInterface
(
addr_unknown2
"
test_unknown1
"
rtc
:
:
ADAPTER_TYPE_UNKNOWN
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
(
addr_unknown1
.
EqualIPs
(
candidates_
[
0
]
.
address
(
)
)
&
&
addr_unknown2
.
EqualIPs
(
candidates_
[
1
]
.
address
(
)
)
)
|
|
(
addr_unknown1
.
EqualIPs
(
candidates_
[
1
]
.
address
(
)
)
&
&
addr_unknown2
.
EqualIPs
(
candidates_
[
0
]
.
address
(
)
)
)
)
;
candidates_
.
clear
(
)
;
candidate_allocation_done_
=
false
;
AddInterface
(
addr_wifi
"
test_wlan0
"
rtc
:
:
ADAPTER_TYPE_WIFI
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
addr_wifi
.
EqualIPs
(
candidates_
[
0
]
.
address
(
)
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestLoopbackNetworkInterface
)
{
AddInterface
(
kLoopbackAddr
"
test_loopback
"
rtc
:
:
ADAPTER_TYPE_LOOPBACK
)
;
allocator_
-
>
SetNetworkIgnoreMask
(
0
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsWithMinimumStepDelay
)
{
AddInterface
(
kClientAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
7U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
stun
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
kRelayUdpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
kRelayUdpExtAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
tcp
"
kRelayTcpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
tcp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
ssltcp
"
kRelaySslTcpIntAddr
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSameNetworkDownAndUpWhenSessionNotStopped
)
{
std
:
:
string
if_name
(
"
test_net0
"
)
;
AddInterface
(
kClientAddr
if_name
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
7U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
candidate_allocation_done_
=
false
;
candidates_
.
clear
(
)
;
ports_
.
clear
(
)
;
RemoveInterface
(
kClientAddr
)
;
ASSERT_EQ_WAIT
(
0U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
0U
ports_
.
size
(
)
)
;
EXPECT_FALSE
(
candidate_allocation_done_
)
;
AddInterface
(
kClientAddr
if_name
)
;
ASSERT_EQ_WAIT
(
7U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSameNetworkDownAndUpWhenSessionStopped
)
{
std
:
:
string
if_name
(
"
test_net0
"
)
;
AddInterface
(
kClientAddr
if_name
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
7U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
session_
-
>
StopGettingPorts
(
)
;
candidates_
.
clear
(
)
;
ports_
.
clear
(
)
;
RemoveInterface
(
kClientAddr
)
;
ASSERT_EQ_WAIT
(
0U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
0U
ports_
.
size
(
)
)
;
AddInterface
(
kClientAddr
if_name
)
;
ASSERT_EQ_WAIT
(
0U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
0U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsWithOneSecondStepDelay
)
{
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_step_delay
(
kDefaultStepDelay
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
2U
candidates_
.
size
(
)
1000
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
ASSERT_EQ_WAIT
(
4U
candidates_
.
size
(
)
2000
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
kRelayUdpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
kRelayUdpExtAddr
)
;
ASSERT_EQ_WAIT
(
6U
candidates_
.
size
(
)
1500
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
tcp
"
kRelayTcpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
tcp
"
kClientAddr
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
ASSERT_EQ_WAIT
(
7U
candidates_
.
size
(
)
2000
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
ssltcp
"
kRelaySslTcpIntAddr
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
session_
-
>
StopGettingPorts
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSetupVideoRtpPortsWithNormalSendBuffers
)
{
AddInterface
(
kClientAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
CN_VIDEO
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
7U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
session_
-
>
StopGettingPorts
(
)
;
CheckSendBufferSizesOfAllPorts
(
-
1
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestStopGetAllPorts
)
{
AddInterface
(
kClientAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
2U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
session_
-
>
StopGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsPortRange
)
{
AddInterface
(
kClientAddr
)
;
EXPECT_FALSE
(
SetPortRange
(
kMaxPort
kMinPort
)
)
;
EXPECT_TRUE
(
SetPortRange
(
0
0
)
)
;
EXPECT_TRUE
(
SetPortRange
(
kMinPort
kMaxPort
)
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
7U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
int
num_nonrelay_candidates
=
0
;
for
(
const
Candidate
&
candidate
:
candidates_
)
{
if
(
candidate
.
type
(
)
!
=
RELAY_PORT_TYPE
)
{
EXPECT_PRED3
(
CheckPort
candidate
.
address
(
)
kMinPort
kMaxPort
)
;
+
+
num_nonrelay_candidates
;
}
}
EXPECT_EQ
(
3
num_nonrelay_candidates
)
;
EXPECT_PRED3
(
CheckPort
relay_server_
.
GetConnection
(
0
)
.
source
(
)
kMinPort
kMaxPort
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsNoAdapters
)
{
ResetWithStunServerAndNat
(
kStunAddr
)
;
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
AddTurnServers
(
kTurnUdpIntIPv6Addr
kTurnTcpIntIPv6Addr
)
;
network_manager_
.
set_ipv6_enabled
(
false
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
stun
"
PROTO_UDP
kAnyAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
local
"
PROTO_TCP
kAnyAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_UDP
kAnyAddr
)
)
;
EXPECT_EQ
(
1
CountPorts
(
ports_
"
relay
"
PROTO_TCP
kAnyAddr
)
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
)
;
EXPECT_EQ
(
2
CountCandidates
(
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationWithoutNatRelayTransportOnly
)
{
ResetWithStunServerNoNat
(
kStunAddr
)
;
allocator
(
)
.
set_candidate_filter
(
CF_RELAY
)
;
CheckDisableAdapterEnumeration
(
0U
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationBehindNatMultipleInterfaces
)
{
AddInterface
(
kPrivateAddr
)
;
AddInterface
(
kPrivateAddr2
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_ENABLE_IPV6
)
;
CheckDisableAdapterEnumeration
(
5U
kPrivateAddr
.
ipaddr
(
)
kNatUdpAddr
.
ipaddr
(
)
kTurnUdpExtAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationBehindNatWithTcp
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddInterface
(
kPrivateAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
CheckDisableAdapterEnumeration
(
4U
kPrivateAddr
.
ipaddr
(
)
kNatUdpAddr
.
ipaddr
(
)
kTurnUdpExtAddr
.
ipaddr
(
)
kTurnUdpExtAddr
.
ipaddr
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationWithoutNatOrServers
)
{
ResetWithNoServersOrNat
(
)
;
CheckDisableAdapterEnumeration
(
2U
kPrivateAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationWithoutNatLocalhostCandidateDisabled
)
{
ResetWithStunServerNoNat
(
kStunAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_DEFAULT_LOCAL_CANDIDATE
)
;
CheckDisableAdapterEnumeration
(
2U
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationWithoutNatLocalhostCandidateDisabledWithDifferentDefaultRoute
)
{
ResetWithStunServerNoNat
(
kStunAddr
)
;
AddInterfaceAsDefaultRoute
(
kClientAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_DEFAULT_LOCAL_CANDIDATE
)
;
CheckDisableAdapterEnumeration
(
2U
rtc
:
:
IPAddress
(
)
kClientAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableAdapterEnumerationWithNatLocalhostCandidateDisabled
)
{
ResetWithStunServerAndNat
(
kStunAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_DEFAULT_LOCAL_CANDIDATE
)
;
CheckDisableAdapterEnumeration
(
2U
rtc
:
:
IPAddress
(
)
kNatUdpAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
rtc
:
:
IPAddress
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestDisableUdpTurn
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_UDP_RELAY
|
PORTALLOCATOR_DISABLE_UDP
|
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
Candidate
turn_candidate
;
EXPECT_PRED5
(
FindCandidate
candidates_
"
relay
"
"
udp
"
kTurnUdpExtAddr
&
turn_candidate
)
;
EXPECT_EQ
(
TCP_PROTOCOL_NAME
turn_candidate
.
relay_protocol
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
tcp
"
kClientAddr
)
;
}
#
if
!
defined
(
ADDRESS_SANITIZER
)
TEST_F
(
BasicPortAllocatorTest
TestDisableAllPorts
)
{
AddInterface
(
kClientAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
set_flags
(
PORTALLOCATOR_DISABLE_UDP
|
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
)
;
session_
-
>
StartGettingPorts
(
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
ProcessMessages
(
100
)
;
EXPECT_EQ
(
0U
candidates_
.
size
(
)
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsNoUdpSockets
)
{
AddInterface
(
kClientAddr
)
;
fss_
-
>
set_udp_sockets_enabled
(
false
)
;
EXPECT_TRUE
(
CreateSession
(
1
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
5U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
kRelayUdpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
kRelayUdpExtAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
tcp
"
kRelayTcpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
tcp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
ssltcp
"
kRelaySslTcpIntAddr
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
}
#
endif
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsNoUdpSocketsNoTcpListen
)
{
AddInterface
(
kClientAddr
)
;
fss_
-
>
set_udp_sockets_enabled
(
false
)
;
fss_
-
>
set_tcp_listen_enabled
(
false
)
;
EXPECT_TRUE
(
CreateSession
(
1
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
5U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
kRelayUdpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
kRelayUdpExtAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
tcp
"
kRelayTcpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
tcp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
ssltcp
"
kRelaySslTcpIntAddr
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsNoSockets
)
{
AddInterface
(
kClientAddr
)
;
fss_
-
>
set_tcp_sockets_enabled
(
false
)
;
fss_
-
>
set_udp_sockets_enabled
(
false
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
WAIT
(
candidates_
.
size
(
)
>
0
2000
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsNoUdpAllowed
)
{
fss_
-
>
AddRule
(
false
rtc
:
:
FP_UDP
rtc
:
:
FD_ANY
kClientAddr
)
;
AddInterface
(
kClientAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_EQ_WAIT
(
2U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
tcp
"
kClientAddr
)
;
EXPECT_EQ_WAIT
(
6U
candidates_
.
size
(
)
kStunTimeoutMs
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
kRelayUdpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
tcp
"
kRelayTcpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
ssltcp
"
kRelaySslTcpIntAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
kRelayUdpExtAddr
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kStunTimeoutMs
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestCandidatePriorityOfMultipleInterfaces
)
{
AddInterface
(
kClientAddr
)
;
AddInterface
(
kClientAddr2
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_DISABLE_TCP
|
PORTALLOCATOR_DISABLE_STUN
|
PORTALLOCATOR_DISABLE_RELAY
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
ASSERT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_NE
(
candidates_
[
0
]
.
priority
(
)
candidates_
[
1
]
.
priority
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestGetAllPortsRestarts
)
{
AddInterface
(
kClientAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_EQ_WAIT
(
7U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSessionUsesOwnCandidateFilter
)
{
AddInterface
(
kClientAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
allocator
(
)
.
set_candidate_filter
(
CF_RELAY
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_EQ_WAIT
(
7U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
EXPECT_TRUE
(
candidate_allocation_done_
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestCandidateFilterWithRelayOnly
)
{
AddInterface
(
kClientAddr
)
;
ResetWithTurnServersNoNat
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator
(
)
.
set_candidate_filter
(
CF_RELAY
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
std
:
:
string
(
RELAY_PORT_TYPE
)
candidates_
[
0
]
.
type
(
)
)
;
EXPECT_EQ
(
candidates_
[
0
]
.
related_address
(
)
rtc
:
:
EmptySocketAddressWithFamily
(
candidates_
[
0
]
.
address
(
)
.
family
(
)
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestCandidateFilterWithHostOnly
)
{
AddInterface
(
kClientAddr
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
allocator
(
)
.
set_candidate_filter
(
CF_HOST
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
for
(
const
Candidate
&
candidate
:
candidates_
)
{
EXPECT_EQ
(
std
:
:
string
(
LOCAL_PORT_TYPE
)
candidate
.
type
(
)
)
;
}
}
TEST_F
(
BasicPortAllocatorTest
TestCandidateFilterWithReflexiveOnly
)
{
AddInterface
(
kPrivateAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
allocator
(
)
.
set_candidate_filter
(
CF_REFLEXIVE
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
.
size
(
)
)
;
EXPECT_EQ
(
std
:
:
string
(
STUN_PORT_TYPE
)
candidates_
[
0
]
.
type
(
)
)
;
EXPECT_EQ
(
candidates_
[
0
]
.
related_address
(
)
rtc
:
:
EmptySocketAddressWithFamily
(
candidates_
[
0
]
.
address
(
)
.
family
(
)
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestCandidateFilterWithReflexiveOnlyAndNoNAT
)
{
AddInterface
(
kClientAddr
)
;
allocator
(
)
.
set_flags
(
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
allocator
(
)
.
set_candidate_filter
(
CF_REFLEXIVE
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
for
(
const
Candidate
&
candidate
:
candidates_
)
{
EXPECT_EQ
(
std
:
:
string
(
LOCAL_PORT_TYPE
)
candidate
.
type
(
)
)
;
}
}
TEST_F
(
BasicPortAllocatorTest
TestEnableSharedUfrag
)
{
AddInterface
(
kClientAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
7U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
stun
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
tcp
"
kClientAddr
)
;
EXPECT_EQ
(
4U
ports_
.
size
(
)
)
;
for
(
const
Candidate
&
candidate
:
candidates_
)
{
EXPECT_EQ
(
kIceUfrag0
candidate
.
username
(
)
)
;
EXPECT_EQ
(
kIcePwd0
candidate
.
password
(
)
)
;
}
EXPECT_TRUE
(
candidate_allocation_done_
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithoutNat
)
{
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
6U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithNat
)
{
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
3U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
ASSERT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithoutNatUsingTurn
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddInterface
(
kClientAddr
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
)
)
;
AddTurnServers
(
kTurnUdpIntAddr
kTurnTcpIntAddr
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
3U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
ASSERT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestUdpTurnPortPrunesTcpTurnPortWithTcpPortReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
200
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnTcpIntAddr
100
)
;
TestUdpTurnPortPrunesTcpTurnPort
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestUdpTurnPortPrunesTcpTurnPortsWithUdpPortReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
100
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnTcpIntAddr
200
)
;
TestUdpTurnPortPrunesTcpTurnPort
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestIPv6TurnPortPrunesIPv4TurnPortWithIPv4PortReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
100
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntIPv6Addr
200
)
;
TestIPv6TurnPortPrunesIPv4TurnPort
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestIPv6TurnPortPrunesIPv4TurnPortWithIPv6PortReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
200
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntIPv6Addr
100
)
;
TestIPv6TurnPortPrunesIPv4TurnPort
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestEachInterfaceHasItsOwnTurnPortsNoDelay
)
{
TestEachInterfaceHasItsOwnTurnPorts
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestEachInterfaceHasItsOwnTurnPortsWithTcpIPv4ReadyFirst
)
{
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnTcpIntAddr
10
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntAddr
100
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnTcpIntIPv6Addr
20
)
;
virtual_socket_server
(
)
-
>
SetDelayOnAddress
(
kTurnUdpIntIPv6Addr
300
)
;
TestEachInterfaceHasItsOwnTurnPorts
(
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithServerAddressResolve
)
{
turn_server_
.
AddInternalSocket
(
rtc
:
:
SocketAddress
(
"
127
.
0
.
0
.
1
"
3478
)
PROTO_UDP
)
;
AddInterface
(
kClientAddr
)
;
allocator_
.
reset
(
new
BasicPortAllocator
(
&
network_manager_
)
)
;
RelayServerConfig
turn_server
(
RELAY_TURN
)
;
RelayCredentials
credentials
(
kTurnUsername
kTurnPassword
)
;
turn_server
.
credentials
=
credentials
;
turn_server
.
ports
.
push_back
(
ProtocolAddress
(
rtc
:
:
SocketAddress
(
"
localhost
"
3478
)
PROTO_UDP
)
)
;
allocator_
-
>
AddTurnServer
(
turn_server
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_EQ_WAIT
(
2U
ports_
.
size
(
)
kDefaultAllocationTimeout
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithNatUsingTurn
)
{
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
3U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
ASSERT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
2U
ports_
[
0
]
-
>
Candidates
(
)
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
1
]
-
>
Candidates
(
)
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithNatUsingTurnAsStun
)
{
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
SocketAddress
(
)
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_step_delay
(
0
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
3U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
Candidate
stun_candidate
;
EXPECT_PRED5
(
FindCandidate
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
&
stun_candidate
)
;
EXPECT_PRED5
(
HasCandidateWithRelatedAddr
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
stun_candidate
.
address
(
)
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
2U
ports_
[
0
]
-
>
Candidates
(
)
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
1
]
-
>
Candidates
(
)
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithNatUsingTurnTcpOnly
)
{
turn_server_
.
AddInternalSocket
(
kTurnTcpIntAddr
PROTO_TCP
)
;
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
rtc
:
:
SocketAddress
(
)
)
;
AddTurnServers
(
rtc
:
:
SocketAddress
(
)
kTurnTcpIntAddr
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
2U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
ASSERT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
2U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
0
]
-
>
Candidates
(
)
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
1
]
-
>
Candidates
(
)
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestNonSharedSocketWithNatUsingTurnAsStun
)
{
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
SocketAddress
(
)
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_DISABLE_TCP
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
3U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
ASSERT_EQ
(
3U
ports_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
Candidate
stun_candidate
;
EXPECT_PRED5
(
FindCandidate
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
&
stun_candidate
)
;
Candidate
turn_candidate
;
EXPECT_PRED5
(
FindCandidate
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
&
turn_candidate
)
;
EXPECT_NE
(
turn_candidate
.
related_address
(
)
stun_candidate
.
address
(
)
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
3U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
0
]
-
>
Candidates
(
)
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
1
]
-
>
Candidates
(
)
.
size
(
)
)
;
EXPECT_EQ
(
1U
ports_
[
2
]
-
>
Candidates
(
)
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketWithNatUsingTurnAndStun
)
{
AddInterface
(
kClientAddr
)
;
ResetWithStunServerAndNat
(
kStunAddr
)
;
stun_server_
.
reset
(
)
;
AddTurnServers
(
kTurnUdpIntAddr
rtc
:
:
SocketAddress
(
)
)
;
allocator_
-
>
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
|
PORTALLOCATOR_DISABLE_TCP
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
3U
candidates_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
Candidate
stun_candidate
;
EXPECT_PRED5
(
FindCandidate
candidates_
"
stun
"
"
udp
"
rtc
:
:
SocketAddress
(
kNatUdpAddr
.
ipaddr
(
)
0
)
&
stun_candidate
)
;
EXPECT_PRED5
(
HasCandidateWithRelatedAddr
candidates_
"
relay
"
"
udp
"
rtc
:
:
SocketAddress
(
kTurnUdpExtAddr
.
ipaddr
(
)
0
)
stun_candidate
.
address
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestSharedSocketNoUdpAllowed
)
{
allocator
(
)
.
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
fss_
-
>
AddRule
(
false
rtc
:
:
FP_UDP
rtc
:
:
FD_ANY
kClientAddr
)
;
AddInterface
(
kClientAddr
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
1U
ports_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kStunTimeoutMs
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestNetworkPermissionBlocked
)
{
network_manager_
.
set_default_local_addresses
(
kPrivateAddr
.
ipaddr
(
)
rtc
:
:
IPAddress
(
)
)
;
network_manager_
.
set_enumeration_permission
(
rtc
:
:
NetworkManager
:
:
ENUMERATION_BLOCKED
)
;
allocator
(
)
.
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_DISABLE_TCP
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
EXPECT_EQ
(
0U
allocator_
-
>
flags
(
)
&
PORTALLOCATOR_DISABLE_ADAPTER_ENUMERATION
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
EXPECT_EQ
(
0U
session_
-
>
flags
(
)
&
PORTALLOCATOR_DISABLE_ADAPTER_ENUMERATION
)
;
session_
-
>
StartGettingPorts
(
)
;
EXPECT_EQ_WAIT
(
1U
ports_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
1U
candidates_
.
size
(
)
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kPrivateAddr
)
;
EXPECT_NE
(
0U
session_
-
>
flags
(
)
&
PORTALLOCATOR_DISABLE_ADAPTER_ENUMERATION
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestEnableIPv6Addresses
)
{
allocator
(
)
.
set_flags
(
allocator
(
)
.
flags
(
)
|
PORTALLOCATOR_DISABLE_RELAY
|
PORTALLOCATOR_ENABLE_IPV6
|
PORTALLOCATOR_ENABLE_SHARED_SOCKET
)
;
AddInterface
(
kClientIPv6Addr
)
;
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
4U
ports_
.
size
(
)
kDefaultAllocationTimeout
)
;
EXPECT_EQ
(
4U
candidates_
.
size
(
)
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientIPv6Addr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
udp
"
kClientAddr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
tcp
"
kClientIPv6Addr
)
;
EXPECT_PRED4
(
HasCandidate
candidates_
"
local
"
"
tcp
"
kClientAddr
)
;
EXPECT_EQ
(
4U
candidates_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestStopGettingPorts
)
{
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_step_delay
(
kDefaultStepDelay
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
2U
candidates_
.
size
(
)
1000
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
session_
-
>
StopGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
1000
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
candidates_
.
clear
(
)
;
ports_
.
clear
(
)
;
candidate_allocation_done_
=
false
;
network_manager_
.
AddInterface
(
kClientAddr2
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
ProcessMessages
(
1000
)
;
EXPECT_EQ
(
0U
candidates_
.
size
(
)
)
;
EXPECT_EQ
(
0U
ports_
.
size
(
)
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestClearGettingPorts
)
{
AddInterface
(
kClientAddr
)
;
allocator_
-
>
set_step_delay
(
kDefaultStepDelay
)
;
EXPECT_TRUE
(
CreateSession
(
ICE_CANDIDATE_COMPONENT_RTP
)
)
;
session_
-
>
StartGettingPorts
(
)
;
ASSERT_EQ_WAIT
(
2U
candidates_
.
size
(
)
1000
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
session_
-
>
ClearGettingPorts
(
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
1000
)
;
allocator_
-
>
set_step_delay
(
kMinimumStepDelay
)
;
candidates_
.
clear
(
)
;
ports_
.
clear
(
)
;
candidate_allocation_done_
=
false
;
network_manager_
.
AddInterface
(
kClientAddr2
)
;
ASSERT_EQ_WAIT
(
2U
candidates_
.
size
(
)
1000
)
;
EXPECT_EQ
(
2U
ports_
.
size
(
)
)
;
EXPECT_TRUE_WAIT
(
candidate_allocation_done_
kDefaultAllocationTimeout
)
;
}
TEST_F
(
BasicPortAllocatorTest
TestTransportInformationUpdated
)
{
AddInterface
(
kClientAddr
)
;
int
pool_size
=
1
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
pool_size
false
)
;
const
PortAllocatorSession
*
peeked_session
=
allocator_
-
>
GetPooledSession
(
)
;
ASSERT_NE
(
nullptr
peeked_session
)
;
EXPECT_EQ_WAIT
(
true
peeked_session
-
>
CandidatesAllocationDone
(
)
kDefaultAllocationTimeout
)
;
session_
=
allocator_
-
>
TakePooledSession
(
kContentName
1
kIceUfrag0
kIcePwd0
)
;
ASSERT_NE
(
nullptr
session_
.
get
(
)
)
;
auto
ready_ports
=
session_
-
>
ReadyPorts
(
)
;
auto
candidates
=
session_
-
>
ReadyCandidates
(
)
;
EXPECT_FALSE
(
ready_ports
.
empty
(
)
)
;
EXPECT_FALSE
(
candidates
.
empty
(
)
)
;
for
(
const
PortInterface
*
port_interface
:
ready_ports
)
{
const
Port
*
port
=
static_cast
<
const
Port
*
>
(
port_interface
)
;
EXPECT_EQ
(
kContentName
port
-
>
content_name
(
)
)
;
EXPECT_EQ
(
1
port
-
>
component
(
)
)
;
EXPECT_EQ
(
kIceUfrag0
port
-
>
username_fragment
(
)
)
;
EXPECT_EQ
(
kIcePwd0
port
-
>
password
(
)
)
;
}
for
(
const
Candidate
&
candidate
:
candidates
)
{
EXPECT_EQ
(
1
candidate
.
component
(
)
)
;
EXPECT_EQ
(
kIceUfrag0
candidate
.
username
(
)
)
;
EXPECT_EQ
(
kIcePwd0
candidate
.
password
(
)
)
;
}
}
TEST_F
(
BasicPortAllocatorTest
TestSetCandidateFilterAfterCandidatesGathered
)
{
AddInterface
(
kClientAddr
)
;
int
pool_size
=
1
;
allocator_
-
>
SetConfiguration
(
allocator_
-
>
stun_servers
(
)
allocator_
-
>
turn_servers
(
)
pool_size
false
)
;
const
PortAllocatorSession
*
peeked_session
=
allocator_
-
>
GetPooledSession
(
)
;
ASSERT_NE
(
nullptr
peeked_session
)
;
EXPECT_EQ_WAIT
(
true
peeked_session
-
>
CandidatesAllocationDone
(
)
kDefaultAllocationTimeout
)
;
size_t
initial_candidates_size
=
peeked_session
-
>
ReadyCandidates
(
)
.
size
(
)
;
size_t
initial_ports_size
=
peeked_session
-
>
ReadyPorts
(
)
.
size
(
)
;
allocator_
-
>
set_candidate_filter
(
CF_RELAY
)
;
session_
=
allocator_
-
>
TakePooledSession
(
kContentName
1
kIceUfrag0
kIcePwd0
)
;
ASSERT_NE
(
nullptr
session_
.
get
(
)
)
;
auto
candidates
=
session_
-
>
ReadyCandidates
(
)
;
auto
ports
=
session_
-
>
ReadyPorts
(
)
;
EXPECT_GT
(
initial_candidates_size
candidates
.
size
(
)
)
;
EXPECT_GT
(
initial_ports_size
ports
.
size
(
)
)
;
for
(
const
PortInterface
*
port
:
ports
)
{
EXPECT_EQ
(
RELAY_PORT_TYPE
port
-
>
Type
(
)
)
;
}
for
(
const
Candidate
&
candidate
:
candidates
)
{
EXPECT_EQ
(
std
:
:
string
(
RELAY_PORT_TYPE
)
candidate
.
type
(
)
)
;
EXPECT_EQ
(
candidate
.
related_address
(
)
rtc
:
:
EmptySocketAddressWithFamily
(
candidate
.
address
(
)
.
family
(
)
)
)
;
}
}
}
