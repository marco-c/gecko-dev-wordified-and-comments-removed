#
include
<
memory
>
#
include
"
webrtc
/
p2p
/
quic
/
quicconnectionhelper
.
h
"
#
include
"
net
/
quic
/
quic_time
.
h
"
#
include
"
webrtc
/
base
/
gunit
.
h
"
using
cricket
:
:
QuicAlarm
;
using
cricket
:
:
QuicConnectionHelper
;
using
net
:
:
QuicClock
;
using
net
:
:
QuicTime
;
using
net
:
:
QuicWallTime
;
class
MockClock
:
public
QuicClock
{
public
:
MockClock
(
)
:
now_
(
QuicTime
:
:
Zero
(
)
)
{
}
void
AdvanceTime
(
QuicTime
:
:
Delta
delta
)
{
now_
=
now_
.
Add
(
delta
)
;
}
QuicTime
Now
(
)
const
override
{
return
now_
;
}
QuicTime
ApproximateNow
(
)
const
override
{
return
now_
;
}
QuicWallTime
WallNow
(
)
const
override
{
return
QuicWallTime
:
:
FromUNIXSeconds
(
now_
.
Subtract
(
QuicTime
:
:
Zero
(
)
)
.
ToSeconds
(
)
)
;
}
base
:
:
TimeTicks
NowInTicks
(
)
const
{
base
:
:
TimeTicks
ticks
;
return
ticks
+
base
:
:
TimeDelta
:
:
FromMicroseconds
(
now_
.
Subtract
(
QuicTime
:
:
Zero
(
)
)
.
ToMicroseconds
(
)
)
;
}
private
:
QuicTime
now_
;
}
;
class
MockAlarmDelegate
:
public
QuicAlarm
:
:
Delegate
{
public
:
MockAlarmDelegate
(
)
:
fired_
(
false
)
{
}
void
OnAlarm
(
)
override
{
fired_
=
true
;
}
bool
fired
(
)
const
{
return
fired_
;
}
void
Clear
(
)
{
fired_
=
false
;
}
private
:
bool
fired_
;
}
;
class
QuicAlarmTest
:
public
:
:
testing
:
:
Test
{
public
:
QuicAlarmTest
(
)
:
delegate_
(
new
MockAlarmDelegate
(
)
)
alarm_
(
new
QuicAlarm
(
&
clock_
rtc
:
:
Thread
:
:
Current
(
)
net
:
:
QuicArenaScopedPtr
<
net
:
:
QuicAlarm
:
:
Delegate
>
(
delegate_
)
)
)
{
}
void
SetTime
(
int
us
)
{
QuicTime
:
:
Delta
delta
=
QuicTime
:
:
Delta
:
:
FromMicroseconds
(
us
)
;
alarm_
-
>
Set
(
clock_
.
Now
(
)
.
Add
(
delta
)
)
;
}
void
ProcessNextMessage
(
)
{
rtc
:
:
Thread
:
:
Current
(
)
-
>
ProcessMessages
(
0
)
;
}
protected
:
MockAlarmDelegate
*
delegate_
;
MockClock
clock_
;
std
:
:
unique_ptr
<
QuicAlarm
>
alarm_
;
}
;
TEST_F
(
QuicAlarmTest
FireAlarm
)
{
SetTime
(
-
1
)
;
ProcessNextMessage
(
)
;
ASSERT_TRUE
(
delegate_
-
>
fired
(
)
)
;
ASSERT_EQ
(
QuicTime
:
:
Zero
(
)
alarm_
-
>
deadline
(
)
)
;
}
TEST_F
(
QuicAlarmTest
CancelAlarmAfterSet
)
{
SetTime
(
-
1
)
;
alarm_
-
>
Cancel
(
)
;
ProcessNextMessage
(
)
;
ASSERT_FALSE
(
delegate_
-
>
fired
(
)
)
;
}
TEST_F
(
QuicAlarmTest
CancelAlarmBeforeSet
)
{
alarm_
-
>
Cancel
(
)
;
ProcessNextMessage
(
)
;
ASSERT_FALSE
(
delegate_
-
>
fired
(
)
)
;
}
TEST_F
(
QuicAlarmTest
AlarmGetDelay
)
{
SetTime
(
1000000
)
;
EXPECT_EQ
(
1000
alarm_
-
>
GetDelay
(
)
)
;
clock_
.
AdvanceTime
(
QuicTime
:
:
Delta
:
:
FromMicroseconds
(
300000
)
)
;
EXPECT_EQ
(
700
alarm_
-
>
GetDelay
(
)
)
;
}
