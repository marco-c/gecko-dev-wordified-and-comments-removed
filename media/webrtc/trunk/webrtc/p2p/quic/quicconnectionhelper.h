#
ifndef
WEBRTC_P2P_QUIC_QUICCONNECTIONHELPER_H_
#
define
WEBRTC_P2P_QUIC_QUICCONNECTIONHELPER_H_
#
include
"
net
/
quic
/
crypto
/
quic_random
.
h
"
#
include
"
net
/
quic
/
quic_alarm
.
h
"
#
include
"
net
/
quic
/
quic_clock
.
h
"
#
include
"
net
/
quic
/
quic_connection
.
h
"
#
include
"
net
/
quic
/
quic_simple_buffer_allocator
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
namespace
cricket
{
class
QuicAlarm
:
public
net
:
:
QuicAlarm
public
rtc
:
:
MessageHandler
{
public
:
QuicAlarm
(
const
net
:
:
QuicClock
*
clock
rtc
:
:
Thread
*
thread
net
:
:
QuicArenaScopedPtr
<
net
:
:
QuicAlarm
:
:
Delegate
>
delegate
)
;
~
QuicAlarm
(
)
override
;
void
OnMessage
(
rtc
:
:
Message
*
msg
)
override
;
int64_t
GetDelay
(
)
const
;
protected
:
void
SetImpl
(
)
override
;
void
CancelImpl
(
)
override
;
private
:
const
net
:
:
QuicClock
*
clock_
;
rtc
:
:
Thread
*
thread_
;
}
;
class
QuicConnectionHelper
:
public
net
:
:
QuicConnectionHelperInterface
{
public
:
explicit
QuicConnectionHelper
(
rtc
:
:
Thread
*
thread
)
;
~
QuicConnectionHelper
(
)
override
;
const
net
:
:
QuicClock
*
GetClock
(
)
const
override
;
net
:
:
QuicRandom
*
GetRandomGenerator
(
)
override
;
QuicAlarm
*
CreateAlarm
(
net
:
:
QuicAlarm
:
:
Delegate
*
delegate
)
override
;
net
:
:
QuicArenaScopedPtr
<
net
:
:
QuicAlarm
>
CreateAlarm
(
net
:
:
QuicArenaScopedPtr
<
QuicAlarm
:
:
Delegate
>
delegate
net
:
:
QuicConnectionArena
*
arena
)
override
;
net
:
:
QuicBufferAllocator
*
GetBufferAllocator
(
)
override
;
private
:
net
:
:
QuicClock
clock_
;
net
:
:
SimpleBufferAllocator
buffer_allocator_
;
rtc
:
:
Thread
*
thread_
;
}
;
}
#
endif
