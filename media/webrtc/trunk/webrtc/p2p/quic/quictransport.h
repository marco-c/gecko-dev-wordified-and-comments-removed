#
ifndef
WEBRTC_P2P_QUIC_QUICTRANSPORT_H_
#
define
WEBRTC_P2P_QUIC_QUICTRANSPORT_H_
#
include
<
string
>
#
include
<
map
>
#
include
<
memory
>
#
include
"
webrtc
/
p2p
/
base
/
jseptransport
.
h
"
#
include
"
webrtc
/
p2p
/
quic
/
quictransportchannel
.
h
"
namespace
cricket
{
class
P2PTransportChannel
;
class
PortAllocator
;
class
QuicTransport
:
public
Transport
{
public
:
QuicTransport
(
const
std
:
:
string
&
name
PortAllocator
*
allocator
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
;
~
QuicTransport
(
)
override
;
void
SetLocalCertificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
override
;
bool
GetLocalCertificate
(
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
*
certificate
)
override
;
bool
SetSslMaxProtocolVersion
(
rtc
:
:
SSLProtocolVersion
version
)
override
{
return
true
;
}
bool
GetSslRole
(
rtc
:
:
SSLRole
*
ssl_role
)
const
override
;
protected
:
QuicTransportChannel
*
CreateTransportChannel
(
int
component
)
override
;
void
DestroyTransportChannel
(
TransportChannelImpl
*
channel
)
override
;
bool
ApplyLocalTransportDescription
(
TransportChannelImpl
*
channel
std
:
:
string
*
error_desc
)
override
;
bool
NegotiateTransportDescription
(
ContentAction
action
std
:
:
string
*
error_desc
)
override
;
bool
ApplyNegotiatedTransportDescription
(
TransportChannelImpl
*
channel
std
:
:
string
*
error_desc
)
override
;
private
:
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
local_certificate_
;
rtc
:
:
SSLRole
local_role_
=
rtc
:
:
SSL_CLIENT
;
std
:
:
unique_ptr
<
rtc
:
:
SSLFingerprint
>
remote_fingerprint_
;
}
;
}
#
endif
