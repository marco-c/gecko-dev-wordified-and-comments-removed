#
ifndef
WEBRTC_P2P_QUIC_QUICSESSION_H_
#
define
WEBRTC_P2P_QUIC_QUICSESSION_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
net
/
quic
/
quic_crypto_client_stream
.
h
"
#
include
"
net
/
quic
/
quic_crypto_server_stream
.
h
"
#
include
"
net
/
quic
/
quic_crypto_stream
.
h
"
#
include
"
net
/
quic
/
quic_session
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
sslidentity
.
h
"
#
include
"
webrtc
/
p2p
/
quic
/
reliablequicstream
.
h
"
namespace
cricket
{
class
QuicSession
:
public
net
:
:
QuicSession
public
sigslot
:
:
has_slots
<
>
{
public
:
QuicSession
(
std
:
:
unique_ptr
<
net
:
:
QuicConnection
>
connection
const
net
:
:
QuicConfig
&
config
)
;
~
QuicSession
(
)
override
;
void
StartClientHandshake
(
net
:
:
QuicCryptoClientStream
*
crypto_stream
)
;
void
StartServerHandshake
(
net
:
:
QuicCryptoServerStream
*
crypto_stream
)
;
net
:
:
QuicCryptoStream
*
GetCryptoStream
(
)
override
{
return
crypto_stream_
.
get
(
)
;
}
ReliableQuicStream
*
CreateOutgoingDynamicStream
(
net
:
:
SpdyPriority
priority
)
override
;
void
OnCryptoHandshakeEvent
(
CryptoHandshakeEvent
event
)
override
;
void
CloseStream
(
net
:
:
QuicStreamId
stream_id
)
override
;
void
OnConnectionClosed
(
net
:
:
QuicErrorCode
error
const
std
:
:
string
&
error_details
net
:
:
ConnectionCloseSource
source
)
override
;
bool
ExportKeyingMaterial
(
base
:
:
StringPiece
label
base
:
:
StringPiece
context
size_t
result_len
std
:
:
string
*
result
)
;
bool
OnReadPacket
(
const
char
*
data
size_t
data_len
)
;
sigslot
:
:
signal0
<
>
SignalHandshakeComplete
;
sigslot
:
:
signal2
<
net
:
:
QuicErrorCode
bool
>
SignalConnectionClosed
;
sigslot
:
:
signal1
<
ReliableQuicStream
*
>
SignalIncomingStream
;
protected
:
void
SetCryptoStream
(
net
:
:
QuicCryptoStream
*
crypto_stream
)
;
ReliableQuicStream
*
CreateIncomingDynamicStream
(
net
:
:
QuicStreamId
id
)
override
;
virtual
ReliableQuicStream
*
CreateDataStream
(
net
:
:
QuicStreamId
id
net
:
:
SpdyPriority
priority
)
;
private
:
std
:
:
unique_ptr
<
net
:
:
QuicCryptoStream
>
crypto_stream_
;
net
:
:
QuicClock
clock_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
QuicSession
)
;
}
;
}
#
endif
