#
ifndef
WEBRTC_P2P_QUIC_QUICTRANSPORTCHANNEL_H_
#
define
WEBRTC_P2P_QUIC_QUICTRANSPORTCHANNEL_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
net
/
quic
/
quic_crypto_client_stream
.
h
"
#
include
"
net
/
quic
/
quic_packet_writer
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
optional
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transportchannelimpl
.
h
"
#
include
"
webrtc
/
p2p
/
quic
/
quicconnectionhelper
.
h
"
#
include
"
webrtc
/
p2p
/
quic
/
quicsession
.
h
"
namespace
cricket
{
enum
QuicTransportState
{
QUIC_TRANSPORT_NEW
=
0
QUIC_TRANSPORT_CONNECTING
QUIC_TRANSPORT_CONNECTED
QUIC_TRANSPORT_CLOSED
}
;
class
QuicTransportChannel
:
public
TransportChannelImpl
public
net
:
:
QuicPacketWriter
public
net
:
:
QuicCryptoClientStream
:
:
ProofHandler
{
public
:
explicit
QuicTransportChannel
(
TransportChannelImpl
*
channel
)
;
~
QuicTransportChannel
(
)
override
;
bool
SetLocalCertificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
override
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
GetLocalCertificate
(
)
const
override
;
bool
SetRemoteFingerprint
(
const
std
:
:
string
&
digest_alg
const
uint8_t
*
digest
size_t
digest_len
)
override
;
bool
IsDtlsActive
(
)
const
override
{
return
true
;
}
int
SendPacket
(
const
char
*
data
size_t
size
const
rtc
:
:
PacketOptions
&
options
int
flags
)
override
;
bool
SetSrtpCryptoSuites
(
const
std
:
:
vector
<
int
>
&
ciphers
)
override
{
return
true
;
}
bool
GetSrtpCryptoSuite
(
int
*
cipher
)
override
;
bool
SetSslRole
(
rtc
:
:
SSLRole
role
)
override
;
bool
GetSslRole
(
rtc
:
:
SSLRole
*
role
)
const
override
;
bool
GetSslCipherSuite
(
int
*
cipher
)
override
{
return
false
;
}
bool
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8_t
*
context
size_t
context_len
bool
use_context
uint8_t
*
result
size_t
result_len
)
override
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificate
>
GetRemoteSSLCertificate
(
)
const
override
{
return
nullptr
;
}
void
SetIceRole
(
IceRole
role
)
override
{
channel_
-
>
SetIceRole
(
role
)
;
}
IceRole
GetIceRole
(
)
const
override
{
return
channel_
-
>
GetIceRole
(
)
;
}
int
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
override
{
return
channel_
-
>
SetOption
(
opt
value
)
;
}
bool
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
override
{
return
channel_
-
>
GetOption
(
opt
value
)
;
}
int
GetError
(
)
override
{
return
channel_
-
>
GetError
(
)
;
}
bool
GetStats
(
ConnectionInfos
*
infos
)
override
{
return
channel_
-
>
GetStats
(
infos
)
;
}
const
std
:
:
string
SessionId
(
)
const
override
{
return
channel_
-
>
SessionId
(
)
;
}
TransportChannelState
GetState
(
)
const
override
{
return
channel_
-
>
GetState
(
)
;
}
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
override
{
channel_
-
>
SetIceTiebreaker
(
tiebreaker
)
;
}
void
SetIceParameters
(
const
IceParameters
&
ice_params
)
override
{
channel_
-
>
SetIceParameters
(
ice_params
)
;
}
void
SetRemoteIceParameters
(
const
IceParameters
&
ice_params
)
override
{
channel_
-
>
SetRemoteIceParameters
(
ice_params
)
;
}
void
SetRemoteIceMode
(
IceMode
mode
)
override
{
channel_
-
>
SetRemoteIceMode
(
mode
)
;
}
void
MaybeStartGathering
(
)
override
{
channel_
-
>
MaybeStartGathering
(
)
;
}
IceGatheringState
gathering_state
(
)
const
override
{
return
channel_
-
>
gathering_state
(
)
;
}
void
AddRemoteCandidate
(
const
Candidate
&
candidate
)
override
{
channel_
-
>
AddRemoteCandidate
(
candidate
)
;
}
void
RemoveRemoteCandidate
(
const
Candidate
&
candidate
)
override
{
channel_
-
>
RemoveRemoteCandidate
(
candidate
)
;
}
void
SetIceConfig
(
const
IceConfig
&
config
)
override
{
channel_
-
>
SetIceConfig
(
config
)
;
}
net
:
:
WriteResult
WritePacket
(
const
char
*
buffer
size_t
buf_len
const
net
:
:
IPAddress
&
self_address
const
net
:
:
IPEndPoint
&
peer_address
net
:
:
PerPacketOptions
*
options
)
override
;
bool
IsWriteBlockedDataBuffered
(
)
const
override
{
return
false
;
}
bool
IsWriteBlocked
(
)
const
override
;
net
:
:
QuicByteCount
GetMaxPacketSize
(
const
net
:
:
IPEndPoint
&
peer_address
)
const
override
{
return
net
:
:
kMaxPacketSize
;
}
void
SetWritable
(
)
override
{
}
void
OnProofValid
(
const
net
:
:
QuicCryptoClientConfig
:
:
CachedState
&
cached
)
override
;
void
OnProofVerifyDetailsAvailable
(
const
net
:
:
ProofVerifyDetails
&
verify_details
)
override
;
void
SetMetricsObserver
(
webrtc
:
:
MetricsObserverInterface
*
observer
)
override
{
channel_
-
>
SetMetricsObserver
(
observer
)
;
}
bool
HasDataToWrite
(
)
const
;
void
OnCanWrite
(
)
;
QuicTransportState
quic_state
(
)
const
{
return
quic_state_
;
}
ReliableQuicStream
*
CreateQuicStream
(
)
;
TransportChannelImpl
*
ice_transport_channel
(
)
{
return
channel_
.
get
(
)
;
}
sigslot
:
:
signal1
<
ReliableQuicStream
*
>
SignalIncomingStream
;
sigslot
:
:
signal0
<
>
SignalClosed
;
private
:
struct
RemoteFingerprint
{
std
:
:
string
value
;
std
:
:
string
algorithm
;
}
;
void
OnReadableState
(
TransportChannel
*
channel
)
;
void
OnWritableState
(
TransportChannel
*
channel
)
;
void
OnReadPacket
(
TransportChannel
*
channel
const
char
*
data
size_t
size
const
rtc
:
:
PacketTime
&
packet_time
int
flags
)
;
void
OnSentPacket
(
TransportChannel
*
channel
const
rtc
:
:
SentPacket
&
sent_packet
)
;
void
OnReadyToSend
(
TransportChannel
*
channel
)
;
void
OnReceivingState
(
TransportChannel
*
channel
)
;
void
OnGatheringState
(
TransportChannelImpl
*
channel
)
;
void
OnCandidateGathered
(
TransportChannelImpl
*
channel
const
Candidate
&
c
)
;
void
OnRoleConflict
(
TransportChannelImpl
*
channel
)
;
void
OnRouteChange
(
TransportChannel
*
channel
const
Candidate
&
candidate
)
;
void
OnSelectedCandidatePairChanged
(
TransportChannel
*
channel
CandidatePairInterface
*
selected_candidate_pair
int
last_sent_packet_id
bool
ready_to_send
)
;
void
OnChannelStateChanged
(
TransportChannelImpl
*
channel
)
;
void
OnHandshakeComplete
(
)
;
void
OnConnectionClosed
(
net
:
:
QuicErrorCode
error
bool
from_peer
)
;
void
OnIncomingStream
(
ReliableQuicStream
*
stream
)
;
bool
HandleQuicPacket
(
const
char
*
data
size_t
size
)
;
bool
MaybeStartQuic
(
)
;
bool
CreateQuicSession
(
)
;
bool
StartQuicHandshake
(
)
;
void
set_quic_state
(
QuicTransportState
state
)
;
rtc
:
:
Thread
*
network_thread_
;
std
:
:
unique_ptr
<
TransportChannelImpl
>
channel_
;
QuicTransportState
quic_state_
=
QUIC_TRANSPORT_NEW
;
std
:
:
unique_ptr
<
QuicSession
>
quic_
;
net
:
:
QuicConfig
config_
;
QuicConnectionHelper
helper_
;
rtc
:
:
Optional
<
rtc
:
:
SSLRole
>
ssl_role_
;
std
:
:
unique_ptr
<
net
:
:
QuicCryptoClientConfig
>
quic_crypto_client_config_
;
std
:
:
unique_ptr
<
net
:
:
QuicCryptoServerConfig
>
quic_crypto_server_config_
;
std
:
:
unique_ptr
<
net
:
:
QuicCompressedCertsCache
>
quic_compressed_certs_cache_
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
local_certificate_
;
rtc
:
:
Optional
<
RemoteFingerprint
>
remote_fingerprint_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
QuicTransportChannel
)
;
}
;
}
#
endif
