#
ifndef
WEBRTC_P2P_BASE_STUN_H_
#
define
WEBRTC_P2P_BASE_STUN_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
basictypes
.
h
"
#
include
"
webrtc
/
base
/
bytebuffer
.
h
"
#
include
"
webrtc
/
base
/
socketaddress
.
h
"
namespace
cricket
{
enum
StunMessageType
{
STUN_BINDING_REQUEST
=
0x0001
STUN_BINDING_INDICATION
=
0x0011
STUN_BINDING_RESPONSE
=
0x0101
STUN_BINDING_ERROR_RESPONSE
=
0x0111
}
;
enum
StunAttributeType
{
STUN_ATTR_MAPPED_ADDRESS
=
0x0001
STUN_ATTR_USERNAME
=
0x0006
STUN_ATTR_MESSAGE_INTEGRITY
=
0x0008
STUN_ATTR_ERROR_CODE
=
0x0009
STUN_ATTR_UNKNOWN_ATTRIBUTES
=
0x000a
STUN_ATTR_REALM
=
0x0014
STUN_ATTR_NONCE
=
0x0015
STUN_ATTR_XOR_MAPPED_ADDRESS
=
0x0020
STUN_ATTR_SOFTWARE
=
0x8022
STUN_ATTR_ALTERNATE_SERVER
=
0x8023
STUN_ATTR_FINGERPRINT
=
0x8028
STUN_ATTR_ORIGIN
=
0x802F
STUN_ATTR_RETRANSMIT_COUNT
=
0xFF00
}
;
enum
StunAttributeValueType
{
STUN_VALUE_UNKNOWN
=
0
STUN_VALUE_ADDRESS
=
1
STUN_VALUE_XOR_ADDRESS
=
2
STUN_VALUE_UINT32
=
3
STUN_VALUE_UINT64
=
4
STUN_VALUE_BYTE_STRING
=
5
STUN_VALUE_ERROR_CODE
=
6
STUN_VALUE_UINT16_LIST
=
7
}
;
enum
StunAddressFamily
{
STUN_ADDRESS_UNDEF
=
0
STUN_ADDRESS_IPV4
=
1
STUN_ADDRESS_IPV6
=
2
}
;
enum
StunErrorCode
{
STUN_ERROR_TRY_ALTERNATE
=
300
STUN_ERROR_BAD_REQUEST
=
400
STUN_ERROR_UNAUTHORIZED
=
401
STUN_ERROR_UNKNOWN_ATTRIBUTE
=
420
STUN_ERROR_STALE_CREDENTIALS
=
430
STUN_ERROR_STALE_NONCE
=
438
STUN_ERROR_SERVER_ERROR
=
500
STUN_ERROR_GLOBAL_FAILURE
=
600
}
;
extern
const
char
STUN_ERROR_REASON_TRY_ALTERNATE_SERVER
[
]
;
extern
const
char
STUN_ERROR_REASON_BAD_REQUEST
[
]
;
extern
const
char
STUN_ERROR_REASON_UNAUTHORIZED
[
]
;
extern
const
char
STUN_ERROR_REASON_UNKNOWN_ATTRIBUTE
[
]
;
extern
const
char
STUN_ERROR_REASON_STALE_CREDENTIALS
[
]
;
extern
const
char
STUN_ERROR_REASON_STALE_NONCE
[
]
;
extern
const
char
STUN_ERROR_REASON_SERVER_ERROR
[
]
;
const
uint32
kStunTypeMask
=
0x0110
;
const
size_t
kStunAttributeHeaderSize
=
4
;
const
size_t
kStunHeaderSize
=
20
;
const
size_t
kStunTransactionIdOffset
=
8
;
const
size_t
kStunTransactionIdLength
=
12
;
const
uint32
kStunMagicCookie
=
0x2112A442
;
const
size_t
kStunMagicCookieLength
=
sizeof
(
kStunMagicCookie
)
;
const
size_t
kStunLegacyTransactionIdLength
=
16
;
const
size_t
kStunMessageIntegritySize
=
20
;
class
StunAttribute
;
class
StunAddressAttribute
;
class
StunXorAddressAttribute
;
class
StunUInt32Attribute
;
class
StunUInt64Attribute
;
class
StunByteStringAttribute
;
class
StunErrorCodeAttribute
;
class
StunUInt16ListAttribute
;
class
StunMessage
{
public
:
StunMessage
(
)
;
virtual
~
StunMessage
(
)
;
int
type
(
)
const
{
return
type_
;
}
size_t
length
(
)
const
{
return
length_
;
}
const
std
:
:
string
&
transaction_id
(
)
const
{
return
transaction_id_
;
}
bool
IsLegacy
(
)
const
;
void
SetType
(
int
type
)
{
type_
=
static_cast
<
uint16
>
(
type
)
;
}
bool
SetTransactionID
(
const
std
:
:
string
&
str
)
;
const
StunAddressAttribute
*
GetAddress
(
int
type
)
const
;
const
StunUInt32Attribute
*
GetUInt32
(
int
type
)
const
;
const
StunUInt64Attribute
*
GetUInt64
(
int
type
)
const
;
const
StunByteStringAttribute
*
GetByteString
(
int
type
)
const
;
const
StunErrorCodeAttribute
*
GetErrorCode
(
)
const
;
const
StunUInt16ListAttribute
*
GetUnknownAttributes
(
)
const
;
bool
AddAttribute
(
StunAttribute
*
attr
)
;
static
bool
ValidateMessageIntegrity
(
const
char
*
data
size_t
size
const
std
:
:
string
&
password
)
;
bool
AddMessageIntegrity
(
const
std
:
:
string
&
password
)
;
bool
AddMessageIntegrity
(
const
char
*
key
size_t
keylen
)
;
static
bool
ValidateFingerprint
(
const
char
*
data
size_t
size
)
;
bool
AddFingerprint
(
)
;
bool
Read
(
rtc
:
:
ByteBuffer
*
buf
)
;
bool
Write
(
rtc
:
:
ByteBuffer
*
buf
)
const
;
virtual
StunMessage
*
CreateNew
(
)
const
{
return
new
StunMessage
(
)
;
}
protected
:
virtual
StunAttributeValueType
GetAttributeValueType
(
int
type
)
const
;
private
:
StunAttribute
*
CreateAttribute
(
int
type
size_t
length
)
;
const
StunAttribute
*
GetAttribute
(
int
type
)
const
;
static
bool
IsValidTransactionId
(
const
std
:
:
string
&
transaction_id
)
;
uint16
type_
;
uint16
length_
;
std
:
:
string
transaction_id_
;
std
:
:
vector
<
StunAttribute
*
>
*
attrs_
;
}
;
class
StunAttribute
{
public
:
virtual
~
StunAttribute
(
)
{
}
int
type
(
)
const
{
return
type_
;
}
size_t
length
(
)
const
{
return
length_
;
}
virtual
StunAttributeValueType
value_type
(
)
const
=
0
;
virtual
void
SetOwner
(
StunMessage
*
owner
)
{
}
virtual
bool
Read
(
rtc
:
:
ByteBuffer
*
buf
)
=
0
;
virtual
bool
Write
(
rtc
:
:
ByteBuffer
*
buf
)
const
=
0
;
static
StunAttribute
*
Create
(
StunAttributeValueType
value_type
uint16
type
uint16
length
StunMessage
*
owner
)
;
static
StunAddressAttribute
*
CreateAddress
(
uint16
type
)
;
static
StunXorAddressAttribute
*
CreateXorAddress
(
uint16
type
)
;
static
StunUInt32Attribute
*
CreateUInt32
(
uint16
type
)
;
static
StunUInt64Attribute
*
CreateUInt64
(
uint16
type
)
;
static
StunByteStringAttribute
*
CreateByteString
(
uint16
type
)
;
static
StunErrorCodeAttribute
*
CreateErrorCode
(
)
;
static
StunUInt16ListAttribute
*
CreateUnknownAttributes
(
)
;
protected
:
StunAttribute
(
uint16
type
uint16
length
)
;
void
SetLength
(
uint16
length
)
{
length_
=
length
;
}
void
WritePadding
(
rtc
:
:
ByteBuffer
*
buf
)
const
;
void
ConsumePadding
(
rtc
:
:
ByteBuffer
*
buf
)
const
;
private
:
uint16
type_
;
uint16
length_
;
}
;
class
StunAddressAttribute
:
public
StunAttribute
{
public
:
static
const
uint16
SIZE_UNDEF
=
0
;
static
const
uint16
SIZE_IP4
=
8
;
static
const
uint16
SIZE_IP6
=
20
;
StunAddressAttribute
(
uint16
type
const
rtc
:
:
SocketAddress
&
addr
)
;
StunAddressAttribute
(
uint16
type
uint16
length
)
;
virtual
StunAttributeValueType
value_type
(
)
const
{
return
STUN_VALUE_ADDRESS
;
}
StunAddressFamily
family
(
)
const
{
switch
(
address_
.
ipaddr
(
)
.
family
(
)
)
{
case
AF_INET
:
return
STUN_ADDRESS_IPV4
;
case
AF_INET6
:
return
STUN_ADDRESS_IPV6
;
}
return
STUN_ADDRESS_UNDEF
;
}
const
rtc
:
:
SocketAddress
&
GetAddress
(
)
const
{
return
address_
;
}
const
rtc
:
:
IPAddress
&
ipaddr
(
)
const
{
return
address_
.
ipaddr
(
)
;
}
uint16
port
(
)
const
{
return
address_
.
port
(
)
;
}
void
SetAddress
(
const
rtc
:
:
SocketAddress
&
addr
)
{
address_
=
addr
;
EnsureAddressLength
(
)
;
}
void
SetIP
(
const
rtc
:
:
IPAddress
&
ip
)
{
address_
.
SetIP
(
ip
)
;
EnsureAddressLength
(
)
;
}
void
SetPort
(
uint16
port
)
{
address_
.
SetPort
(
port
)
;
}
virtual
bool
Read
(
rtc
:
:
ByteBuffer
*
buf
)
;
virtual
bool
Write
(
rtc
:
:
ByteBuffer
*
buf
)
const
;
private
:
void
EnsureAddressLength
(
)
{
switch
(
family
(
)
)
{
case
STUN_ADDRESS_IPV4
:
{
SetLength
(
SIZE_IP4
)
;
break
;
}
case
STUN_ADDRESS_IPV6
:
{
SetLength
(
SIZE_IP6
)
;
break
;
}
default
:
{
SetLength
(
SIZE_UNDEF
)
;
break
;
}
}
}
rtc
:
:
SocketAddress
address_
;
}
;
class
StunXorAddressAttribute
:
public
StunAddressAttribute
{
public
:
StunXorAddressAttribute
(
uint16
type
const
rtc
:
:
SocketAddress
&
addr
)
;
StunXorAddressAttribute
(
uint16
type
uint16
length
StunMessage
*
owner
)
;
virtual
StunAttributeValueType
value_type
(
)
const
{
return
STUN_VALUE_XOR_ADDRESS
;
}
virtual
void
SetOwner
(
StunMessage
*
owner
)
{
owner_
=
owner
;
}
virtual
bool
Read
(
rtc
:
:
ByteBuffer
*
buf
)
;
virtual
bool
Write
(
rtc
:
:
ByteBuffer
*
buf
)
const
;
private
:
rtc
:
:
IPAddress
GetXoredIP
(
)
const
;
StunMessage
*
owner_
;
}
;
class
StunUInt32Attribute
:
public
StunAttribute
{
public
:
static
const
uint16
SIZE
=
4
;
StunUInt32Attribute
(
uint16
type
uint32
value
)
;
explicit
StunUInt32Attribute
(
uint16
type
)
;
virtual
StunAttributeValueType
value_type
(
)
const
{
return
STUN_VALUE_UINT32
;
}
uint32
value
(
)
const
{
return
bits_
;
}
void
SetValue
(
uint32
bits
)
{
bits_
=
bits
;
}
bool
GetBit
(
size_t
index
)
const
;
void
SetBit
(
size_t
index
bool
value
)
;
virtual
bool
Read
(
rtc
:
:
ByteBuffer
*
buf
)
;
virtual
bool
Write
(
rtc
:
:
ByteBuffer
*
buf
)
const
;
private
:
uint32
bits_
;
}
;
class
StunUInt64Attribute
:
public
StunAttribute
{
public
:
static
const
uint16
SIZE
=
8
;
StunUInt64Attribute
(
uint16
type
uint64
value
)
;
explicit
StunUInt64Attribute
(
uint16
type
)
;
virtual
StunAttributeValueType
value_type
(
)
const
{
return
STUN_VALUE_UINT64
;
}
uint64
value
(
)
const
{
return
bits_
;
}
void
SetValue
(
uint64
bits
)
{
bits_
=
bits
;
}
virtual
bool
Read
(
rtc
:
:
ByteBuffer
*
buf
)
;
virtual
bool
Write
(
rtc
:
:
ByteBuffer
*
buf
)
const
;
private
:
uint64
bits_
;
}
;
class
StunByteStringAttribute
:
public
StunAttribute
{
public
:
explicit
StunByteStringAttribute
(
uint16
type
)
;
StunByteStringAttribute
(
uint16
type
const
std
:
:
string
&
str
)
;
StunByteStringAttribute
(
uint16
type
const
void
*
bytes
size_t
length
)
;
StunByteStringAttribute
(
uint16
type
uint16
length
)
;
~
StunByteStringAttribute
(
)
;
virtual
StunAttributeValueType
value_type
(
)
const
{
return
STUN_VALUE_BYTE_STRING
;
}
const
char
*
bytes
(
)
const
{
return
bytes_
;
}
std
:
:
string
GetString
(
)
const
{
return
std
:
:
string
(
bytes_
length
(
)
)
;
}
void
CopyBytes
(
const
char
*
bytes
)
;
void
CopyBytes
(
const
void
*
bytes
size_t
length
)
;
uint8
GetByte
(
size_t
index
)
const
;
void
SetByte
(
size_t
index
uint8
value
)
;
virtual
bool
Read
(
rtc
:
:
ByteBuffer
*
buf
)
;
virtual
bool
Write
(
rtc
:
:
ByteBuffer
*
buf
)
const
;
private
:
void
SetBytes
(
char
*
bytes
size_t
length
)
;
char
*
bytes_
;
}
;
class
StunErrorCodeAttribute
:
public
StunAttribute
{
public
:
static
const
uint16
MIN_SIZE
=
4
;
StunErrorCodeAttribute
(
uint16
type
int
code
const
std
:
:
string
&
reason
)
;
StunErrorCodeAttribute
(
uint16
type
uint16
length
)
;
~
StunErrorCodeAttribute
(
)
;
virtual
StunAttributeValueType
value_type
(
)
const
{
return
STUN_VALUE_ERROR_CODE
;
}
int
code
(
)
const
;
void
SetCode
(
int
code
)
;
int
eclass
(
)
const
{
return
class_
;
}
int
number
(
)
const
{
return
number_
;
}
const
std
:
:
string
&
reason
(
)
const
{
return
reason_
;
}
void
SetClass
(
uint8
eclass
)
{
class_
=
eclass
;
}
void
SetNumber
(
uint8
number
)
{
number_
=
number
;
}
void
SetReason
(
const
std
:
:
string
&
reason
)
;
bool
Read
(
rtc
:
:
ByteBuffer
*
buf
)
;
bool
Write
(
rtc
:
:
ByteBuffer
*
buf
)
const
;
private
:
uint8
class_
;
uint8
number_
;
std
:
:
string
reason_
;
}
;
class
StunUInt16ListAttribute
:
public
StunAttribute
{
public
:
StunUInt16ListAttribute
(
uint16
type
uint16
length
)
;
~
StunUInt16ListAttribute
(
)
;
virtual
StunAttributeValueType
value_type
(
)
const
{
return
STUN_VALUE_UINT16_LIST
;
}
size_t
Size
(
)
const
;
uint16
GetType
(
int
index
)
const
;
void
SetType
(
int
index
uint16
value
)
;
void
AddType
(
uint16
value
)
;
bool
Read
(
rtc
:
:
ByteBuffer
*
buf
)
;
bool
Write
(
rtc
:
:
ByteBuffer
*
buf
)
const
;
private
:
std
:
:
vector
<
uint16
>
*
attr_types_
;
}
;
int
GetStunSuccessResponseType
(
int
request_type
)
;
int
GetStunErrorResponseType
(
int
request_type
)
;
bool
IsStunRequestType
(
int
msg_type
)
;
bool
IsStunIndicationType
(
int
msg_type
)
;
bool
IsStunSuccessResponseType
(
int
msg_type
)
;
bool
IsStunErrorResponseType
(
int
msg_type
)
;
bool
ComputeStunCredentialHash
(
const
std
:
:
string
&
username
const
std
:
:
string
&
realm
const
std
:
:
string
&
password
std
:
:
string
*
hash
)
;
extern
const
char
TURN_MAGIC_COOKIE_VALUE
[
4
]
;
enum
RelayMessageType
{
STUN_SEND_REQUEST
=
0x0004
STUN_SEND_RESPONSE
=
0x0104
STUN_SEND_ERROR_RESPONSE
=
0x0114
STUN_DATA_INDICATION
=
0x0115
}
;
enum
RelayAttributeType
{
STUN_ATTR_LIFETIME
=
0x000d
STUN_ATTR_MAGIC_COOKIE
=
0x000f
STUN_ATTR_BANDWIDTH
=
0x0010
STUN_ATTR_DESTINATION_ADDRESS
=
0x0011
STUN_ATTR_SOURCE_ADDRESS2
=
0x0012
STUN_ATTR_DATA
=
0x0013
STUN_ATTR_OPTIONS
=
0x8001
}
;
class
RelayMessage
:
public
StunMessage
{
protected
:
virtual
StunAttributeValueType
GetAttributeValueType
(
int
type
)
const
{
switch
(
type
)
{
case
STUN_ATTR_LIFETIME
:
return
STUN_VALUE_UINT32
;
case
STUN_ATTR_MAGIC_COOKIE
:
return
STUN_VALUE_BYTE_STRING
;
case
STUN_ATTR_BANDWIDTH
:
return
STUN_VALUE_UINT32
;
case
STUN_ATTR_DESTINATION_ADDRESS
:
return
STUN_VALUE_ADDRESS
;
case
STUN_ATTR_SOURCE_ADDRESS2
:
return
STUN_VALUE_ADDRESS
;
case
STUN_ATTR_DATA
:
return
STUN_VALUE_BYTE_STRING
;
case
STUN_ATTR_OPTIONS
:
return
STUN_VALUE_UINT32
;
default
:
return
StunMessage
:
:
GetAttributeValueType
(
type
)
;
}
}
virtual
StunMessage
*
CreateNew
(
)
const
{
return
new
RelayMessage
(
)
;
}
}
;
enum
TurnMessageType
{
STUN_ALLOCATE_REQUEST
=
0x0003
STUN_ALLOCATE_RESPONSE
=
0x0103
STUN_ALLOCATE_ERROR_RESPONSE
=
0x0113
TURN_REFRESH_REQUEST
=
0x0004
TURN_REFRESH_RESPONSE
=
0x0104
TURN_REFRESH_ERROR_RESPONSE
=
0x0114
TURN_SEND_INDICATION
=
0x0016
TURN_DATA_INDICATION
=
0x0017
TURN_CREATE_PERMISSION_REQUEST
=
0x0008
TURN_CREATE_PERMISSION_RESPONSE
=
0x0108
TURN_CREATE_PERMISSION_ERROR_RESPONSE
=
0x0118
TURN_CHANNEL_BIND_REQUEST
=
0x0009
TURN_CHANNEL_BIND_RESPONSE
=
0x0109
TURN_CHANNEL_BIND_ERROR_RESPONSE
=
0x0119
}
;
enum
TurnAttributeType
{
STUN_ATTR_CHANNEL_NUMBER
=
0x000C
STUN_ATTR_TURN_LIFETIME
=
0x000d
STUN_ATTR_XOR_PEER_ADDRESS
=
0x0012
STUN_ATTR_XOR_RELAYED_ADDRESS
=
0x0016
STUN_ATTR_EVEN_PORT
=
0x0018
STUN_ATTR_REQUESTED_TRANSPORT
=
0x0019
STUN_ATTR_DONT_FRAGMENT
=
0x001A
STUN_ATTR_RESERVATION_TOKEN
=
0x0022
}
;
enum
TurnErrorType
{
STUN_ERROR_FORBIDDEN
=
403
STUN_ERROR_ALLOCATION_MISMATCH
=
437
STUN_ERROR_WRONG_CREDENTIALS
=
441
STUN_ERROR_UNSUPPORTED_PROTOCOL
=
442
}
;
extern
const
char
STUN_ERROR_REASON_FORBIDDEN
[
]
;
extern
const
char
STUN_ERROR_REASON_ALLOCATION_MISMATCH
[
]
;
extern
const
char
STUN_ERROR_REASON_WRONG_CREDENTIALS
[
]
;
extern
const
char
STUN_ERROR_REASON_UNSUPPORTED_PROTOCOL
[
]
;
class
TurnMessage
:
public
StunMessage
{
protected
:
virtual
StunAttributeValueType
GetAttributeValueType
(
int
type
)
const
{
switch
(
type
)
{
case
STUN_ATTR_CHANNEL_NUMBER
:
return
STUN_VALUE_UINT32
;
case
STUN_ATTR_TURN_LIFETIME
:
return
STUN_VALUE_UINT32
;
case
STUN_ATTR_XOR_PEER_ADDRESS
:
return
STUN_VALUE_XOR_ADDRESS
;
case
STUN_ATTR_DATA
:
return
STUN_VALUE_BYTE_STRING
;
case
STUN_ATTR_XOR_RELAYED_ADDRESS
:
return
STUN_VALUE_XOR_ADDRESS
;
case
STUN_ATTR_EVEN_PORT
:
return
STUN_VALUE_BYTE_STRING
;
case
STUN_ATTR_REQUESTED_TRANSPORT
:
return
STUN_VALUE_UINT32
;
case
STUN_ATTR_DONT_FRAGMENT
:
return
STUN_VALUE_BYTE_STRING
;
case
STUN_ATTR_RESERVATION_TOKEN
:
return
STUN_VALUE_BYTE_STRING
;
default
:
return
StunMessage
:
:
GetAttributeValueType
(
type
)
;
}
}
virtual
StunMessage
*
CreateNew
(
)
const
{
return
new
TurnMessage
(
)
;
}
}
;
enum
IceAttributeType
{
STUN_ATTR_PRIORITY
=
0x0024
STUN_ATTR_USE_CANDIDATE
=
0x0025
STUN_ATTR_ICE_CONTROLLED
=
0x8029
STUN_ATTR_ICE_CONTROLLING
=
0x802A
}
;
enum
IceErrorCode
{
STUN_ERROR_ROLE_CONFLICT
=
487
}
;
extern
const
char
STUN_ERROR_REASON_ROLE_CONFLICT
[
]
;
class
IceMessage
:
public
StunMessage
{
protected
:
virtual
StunAttributeValueType
GetAttributeValueType
(
int
type
)
const
{
switch
(
type
)
{
case
STUN_ATTR_PRIORITY
:
return
STUN_VALUE_UINT32
;
case
STUN_ATTR_USE_CANDIDATE
:
return
STUN_VALUE_BYTE_STRING
;
case
STUN_ATTR_ICE_CONTROLLED
:
return
STUN_VALUE_UINT64
;
case
STUN_ATTR_ICE_CONTROLLING
:
return
STUN_VALUE_UINT64
;
default
:
return
StunMessage
:
:
GetAttributeValueType
(
type
)
;
}
}
virtual
StunMessage
*
CreateNew
(
)
const
{
return
new
IceMessage
(
)
;
}
}
;
}
#
endif
