#
ifndef
WEBRTC_P2P_BASE_RELAYSERVER_H_
#
define
WEBRTC_P2P_BASE_RELAYSERVER_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
p2p
/
base
/
port
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
stun
.
h
"
#
include
"
webrtc
/
base
/
asyncudpsocket
.
h
"
#
include
"
webrtc
/
base
/
socketaddresspair
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
#
include
"
webrtc
/
base
/
timeutils
.
h
"
namespace
cricket
{
class
RelayServerBinding
;
class
RelayServerConnection
;
class
RelayServer
:
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
explicit
RelayServer
(
rtc
:
:
Thread
*
thread
)
;
~
RelayServer
(
)
;
rtc
:
:
Thread
*
thread
(
)
{
return
thread_
;
}
bool
log_bindings
(
)
const
{
return
log_bindings_
;
}
void
set_log_bindings
(
bool
log_bindings
)
{
log_bindings_
=
log_bindings
;
}
void
AddInternalSocket
(
rtc
:
:
AsyncPacketSocket
*
socket
)
;
void
RemoveInternalSocket
(
rtc
:
:
AsyncPacketSocket
*
socket
)
;
void
AddExternalSocket
(
rtc
:
:
AsyncPacketSocket
*
socket
)
;
void
RemoveExternalSocket
(
rtc
:
:
AsyncPacketSocket
*
socket
)
;
void
AddInternalServerSocket
(
rtc
:
:
AsyncSocket
*
socket
cricket
:
:
ProtocolType
proto
)
;
void
RemoveInternalServerSocket
(
rtc
:
:
AsyncSocket
*
socket
)
;
int
GetConnectionCount
(
)
const
;
rtc
:
:
SocketAddressPair
GetConnection
(
int
connection
)
const
;
bool
HasConnection
(
const
rtc
:
:
SocketAddress
&
address
)
const
;
private
:
typedef
std
:
:
vector
<
rtc
:
:
AsyncPacketSocket
*
>
SocketList
;
typedef
std
:
:
map
<
rtc
:
:
AsyncSocket
*
cricket
:
:
ProtocolType
>
ServerSocketMap
;
typedef
std
:
:
map
<
std
:
:
string
RelayServerBinding
*
>
BindingMap
;
typedef
std
:
:
map
<
rtc
:
:
SocketAddressPair
RelayServerConnection
*
>
ConnectionMap
;
rtc
:
:
Thread
*
thread_
;
bool
log_bindings_
;
SocketList
internal_sockets_
;
SocketList
external_sockets_
;
SocketList
removed_sockets_
;
ServerSocketMap
server_sockets_
;
BindingMap
bindings_
;
ConnectionMap
connections_
;
void
OnInternalPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
char
*
bytes
size_t
size
const
rtc
:
:
SocketAddress
&
remote_addr
const
rtc
:
:
PacketTime
&
packet_time
)
;
void
OnExternalPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
char
*
bytes
size_t
size
const
rtc
:
:
SocketAddress
&
remote_addr
const
rtc
:
:
PacketTime
&
packet_time
)
;
void
OnReadEvent
(
rtc
:
:
AsyncSocket
*
socket
)
;
bool
HandleStun
(
const
char
*
bytes
size_t
size
const
rtc
:
:
SocketAddress
&
remote_addr
rtc
:
:
AsyncPacketSocket
*
socket
std
:
:
string
*
username
StunMessage
*
msg
)
;
void
HandleStunAllocate
(
const
char
*
bytes
size_t
size
const
rtc
:
:
SocketAddressPair
&
ap
rtc
:
:
AsyncPacketSocket
*
socket
)
;
void
HandleStun
(
RelayServerConnection
*
int_conn
const
char
*
bytes
size_t
size
)
;
void
HandleStunAllocate
(
RelayServerConnection
*
int_conn
const
StunMessage
&
msg
)
;
void
HandleStunSend
(
RelayServerConnection
*
int_conn
const
StunMessage
&
msg
)
;
void
AddConnection
(
RelayServerConnection
*
conn
)
;
void
RemoveConnection
(
RelayServerConnection
*
conn
)
;
void
RemoveBinding
(
RelayServerBinding
*
binding
)
;
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
;
void
OnTimeout
(
RelayServerBinding
*
binding
)
;
void
AcceptConnection
(
rtc
:
:
AsyncSocket
*
server_socket
)
;
friend
class
RelayServerConnection
;
friend
class
RelayServerBinding
;
}
;
class
RelayServerConnection
{
public
:
RelayServerConnection
(
RelayServerBinding
*
binding
const
rtc
:
:
SocketAddressPair
&
addrs
rtc
:
:
AsyncPacketSocket
*
socket
)
;
~
RelayServerConnection
(
)
;
RelayServerBinding
*
binding
(
)
{
return
binding_
;
}
rtc
:
:
AsyncPacketSocket
*
socket
(
)
{
return
socket_
;
}
const
rtc
:
:
SocketAddressPair
&
addr_pair
(
)
{
return
addr_pair_
;
}
void
Send
(
const
char
*
data
size_t
size
)
;
void
Send
(
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
ext_addr
)
;
void
SendStun
(
const
StunMessage
&
msg
)
;
void
SendStunError
(
const
StunMessage
&
request
int
code
const
char
*
desc
)
;
bool
locked
(
)
const
{
return
locked_
;
}
void
Lock
(
)
;
void
Unlock
(
)
;
const
rtc
:
:
SocketAddress
&
default_destination
(
)
const
{
return
default_dest_
;
}
void
set_default_destination
(
const
rtc
:
:
SocketAddress
&
addr
)
{
default_dest_
=
addr
;
}
private
:
RelayServerBinding
*
binding_
;
rtc
:
:
SocketAddressPair
addr_pair_
;
rtc
:
:
AsyncPacketSocket
*
socket_
;
bool
locked_
;
rtc
:
:
SocketAddress
default_dest_
;
}
;
class
RelayServerBinding
:
public
rtc
:
:
MessageHandler
{
public
:
RelayServerBinding
(
RelayServer
*
server
const
std
:
:
string
&
username
const
std
:
:
string
&
password
int
lifetime
)
;
virtual
~
RelayServerBinding
(
)
;
RelayServer
*
server
(
)
{
return
server_
;
}
int
lifetime
(
)
{
return
lifetime_
;
}
const
std
:
:
string
&
username
(
)
{
return
username_
;
}
const
std
:
:
string
&
password
(
)
{
return
password_
;
}
const
std
:
:
string
&
magic_cookie
(
)
{
return
magic_cookie_
;
}
void
AddInternalConnection
(
RelayServerConnection
*
conn
)
;
void
AddExternalConnection
(
RelayServerConnection
*
conn
)
;
void
NoteUsed
(
)
;
sigslot
:
:
signal1
<
RelayServerBinding
*
>
SignalTimeout
;
bool
HasMagicCookie
(
const
char
*
bytes
size_t
size
)
const
;
RelayServerConnection
*
GetInternalConnection
(
const
rtc
:
:
SocketAddress
&
ext_addr
)
;
RelayServerConnection
*
GetExternalConnection
(
const
rtc
:
:
SocketAddress
&
ext_addr
)
;
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
;
private
:
RelayServer
*
server_
;
std
:
:
string
username_
;
std
:
:
string
password_
;
std
:
:
string
magic_cookie_
;
std
:
:
vector
<
RelayServerConnection
*
>
internal_connections_
;
std
:
:
vector
<
RelayServerConnection
*
>
external_connections_
;
int
lifetime_
;
int64_t
last_used_
;
}
;
}
#
endif
