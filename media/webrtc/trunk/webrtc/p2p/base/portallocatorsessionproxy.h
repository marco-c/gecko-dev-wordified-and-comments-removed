#
ifndef
WEBRTC_P2P_BASE_PORTALLOCATORSESSIONPROXY_H_
#
define
WEBRTC_P2P_BASE_PORTALLOCATORSESSIONPROXY_H_
#
include
<
string
>
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
portallocator
.
h
"
namespace
cricket
{
class
PortAllocator
;
class
PortAllocatorSessionProxy
;
class
PortProxy
;
class
PortAllocatorSessionMuxer
:
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
explicit
PortAllocatorSessionMuxer
(
PortAllocatorSession
*
session
)
;
virtual
~
PortAllocatorSessionMuxer
(
)
;
void
RegisterSessionProxy
(
PortAllocatorSessionProxy
*
session_proxy
)
;
void
OnPortReady
(
PortAllocatorSession
*
session
PortInterface
*
port
)
;
void
OnPortDestroyed
(
PortInterface
*
port
)
;
void
OnCandidatesAllocationDone
(
PortAllocatorSession
*
session
)
;
const
std
:
:
vector
<
PortInterface
*
>
&
ports
(
)
{
return
ports_
;
}
sigslot
:
:
signal1
<
PortAllocatorSessionMuxer
*
>
SignalDestroyed
;
private
:
virtual
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
;
void
OnSessionProxyDestroyed
(
PortAllocatorSession
*
proxy
)
;
void
SendAllocationDone_w
(
PortAllocatorSessionProxy
*
proxy
)
;
void
SendAllocatedPorts_w
(
PortAllocatorSessionProxy
*
proxy
)
;
rtc
:
:
Thread
*
worker_thread_
;
std
:
:
vector
<
PortInterface
*
>
ports_
;
rtc
:
:
scoped_ptr
<
PortAllocatorSession
>
session_
;
std
:
:
vector
<
PortAllocatorSessionProxy
*
>
session_proxies_
;
bool
candidate_done_signal_received_
;
}
;
class
PortAllocatorSessionProxy
:
public
PortAllocatorSession
{
public
:
PortAllocatorSessionProxy
(
const
std
:
:
string
&
content_name
int
component
uint32
flags
)
:
PortAllocatorSession
(
content_name
component
"
"
"
"
flags
)
impl_
(
NULL
)
{
}
virtual
~
PortAllocatorSessionProxy
(
)
;
PortAllocatorSession
*
impl
(
)
{
return
impl_
;
}
void
set_impl
(
PortAllocatorSession
*
session
)
;
virtual
void
StartGettingPorts
(
)
;
virtual
void
StopGettingPorts
(
)
;
virtual
bool
IsGettingPorts
(
)
;
virtual
void
set_generation
(
uint32
generation
)
{
ASSERT
(
impl_
!
=
NULL
)
;
impl_
-
>
set_generation
(
generation
)
;
}
virtual
uint32
generation
(
)
{
ASSERT
(
impl_
!
=
NULL
)
;
return
impl_
-
>
generation
(
)
;
}
private
:
void
OnPortReady
(
PortAllocatorSession
*
session
PortInterface
*
port
)
;
void
OnCandidatesReady
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
Candidate
>
&
candidates
)
;
void
OnPortDestroyed
(
PortInterface
*
port
)
;
void
OnCandidatesAllocationDone
(
PortAllocatorSession
*
session
)
;
PortAllocatorSession
*
impl_
;
std
:
:
map
<
PortInterface
*
PortProxy
*
>
proxy_ports_
;
friend
class
PortAllocatorSessionMuxer
;
}
;
}
#
endif
