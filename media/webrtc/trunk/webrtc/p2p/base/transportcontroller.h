#
ifndef
WEBRTC_P2P_BASE_TRANSPORTCONTROLLER_H_
#
define
WEBRTC_P2P_BASE_TRANSPORTCONTROLLER_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
sslstreamadapter
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transport
.
h
"
namespace
rtc
{
class
Thread
;
}
namespace
cricket
{
class
TransportController
:
public
sigslot
:
:
has_slots
<
>
public
rtc
:
:
MessageHandler
{
public
:
TransportController
(
rtc
:
:
Thread
*
signaling_thread
rtc
:
:
Thread
*
worker_thread
PortAllocator
*
port_allocator
)
;
virtual
~
TransportController
(
)
;
rtc
:
:
Thread
*
signaling_thread
(
)
const
{
return
signaling_thread_
;
}
rtc
:
:
Thread
*
worker_thread
(
)
const
{
return
worker_thread_
;
}
PortAllocator
*
port_allocator
(
)
const
{
return
port_allocator_
;
}
bool
SetSslMaxProtocolVersion
(
rtc
:
:
SSLProtocolVersion
version
)
;
void
SetIceConfig
(
const
IceConfig
&
config
)
;
void
SetIceRole
(
IceRole
ice_role
)
;
bool
GetSslRole
(
const
std
:
:
string
&
transport_name
rtc
:
:
SSLRole
*
role
)
;
bool
SetLocalCertificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
;
bool
GetLocalCertificate
(
const
std
:
:
string
&
transport_name
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
*
certificate
)
;
bool
GetRemoteSSLCertificate
(
const
std
:
:
string
&
transport_name
rtc
:
:
SSLCertificate
*
*
cert
)
;
bool
SetLocalTransportDescription
(
const
std
:
:
string
&
transport_name
const
TransportDescription
&
tdesc
ContentAction
action
std
:
:
string
*
err
)
;
bool
SetRemoteTransportDescription
(
const
std
:
:
string
&
transport_name
const
TransportDescription
&
tdesc
ContentAction
action
std
:
:
string
*
err
)
;
void
MaybeStartGathering
(
)
;
bool
AddRemoteCandidates
(
const
std
:
:
string
&
transport_name
const
Candidates
&
candidates
std
:
:
string
*
err
)
;
bool
ReadyForRemoteCandidates
(
const
std
:
:
string
&
transport_name
)
;
bool
GetStats
(
const
std
:
:
string
&
transport_name
TransportStats
*
stats
)
;
virtual
TransportChannel
*
CreateTransportChannel_w
(
const
std
:
:
string
&
transport_name
int
component
)
;
virtual
void
DestroyTransportChannel_w
(
const
std
:
:
string
&
transport_name
int
component
)
;
sigslot
:
:
signal1
<
IceConnectionState
>
SignalConnectionState
;
sigslot
:
:
signal1
<
bool
>
SignalReceiving
;
sigslot
:
:
signal1
<
IceGatheringState
>
SignalGatheringState
;
sigslot
:
:
signal2
<
const
std
:
:
string
&
const
Candidates
&
>
SignalCandidatesGathered
;
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate_for_testing
(
)
;
protected
:
virtual
Transport
*
CreateTransport_w
(
const
std
:
:
string
&
transport_name
)
;
const
std
:
:
map
<
std
:
:
string
Transport
*
>
&
transports
(
)
{
return
transports_
;
}
Transport
*
GetTransport_w
(
const
std
:
:
string
&
transport_name
)
;
private
:
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
override
;
struct
RefCountedChannel
{
RefCountedChannel
(
)
:
impl_
(
nullptr
)
ref_
(
0
)
{
}
explicit
RefCountedChannel
(
TransportChannelImpl
*
impl
)
:
impl_
(
impl
)
ref_
(
0
)
{
}
void
AddRef
(
)
{
+
+
ref_
;
}
void
DecRef
(
)
{
ASSERT
(
ref_
>
0
)
;
-
-
ref_
;
}
int
ref
(
)
const
{
return
ref_
;
}
TransportChannelImpl
*
get
(
)
const
{
return
impl_
;
}
TransportChannelImpl
*
operator
-
>
(
)
const
{
return
impl_
;
}
private
:
TransportChannelImpl
*
impl_
;
int
ref_
;
}
;
std
:
:
vector
<
RefCountedChannel
>
:
:
iterator
FindChannel_w
(
const
std
:
:
string
&
transport_name
int
component
)
;
Transport
*
GetOrCreateTransport_w
(
const
std
:
:
string
&
transport_name
)
;
void
DestroyTransport_w
(
const
std
:
:
string
&
transport_name
)
;
void
DestroyAllTransports_w
(
)
;
bool
SetSslMaxProtocolVersion_w
(
rtc
:
:
SSLProtocolVersion
version
)
;
void
SetIceConfig_w
(
const
IceConfig
&
config
)
;
void
SetIceRole_w
(
IceRole
ice_role
)
;
bool
GetSslRole_w
(
const
std
:
:
string
&
transport_name
rtc
:
:
SSLRole
*
role
)
;
bool
SetLocalCertificate_w
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
;
bool
GetLocalCertificate_w
(
const
std
:
:
string
&
transport_name
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
*
certificate
)
;
bool
GetRemoteSSLCertificate_w
(
const
std
:
:
string
&
transport_name
rtc
:
:
SSLCertificate
*
*
cert
)
;
bool
SetLocalTransportDescription_w
(
const
std
:
:
string
&
transport_name
const
TransportDescription
&
tdesc
ContentAction
action
std
:
:
string
*
err
)
;
bool
SetRemoteTransportDescription_w
(
const
std
:
:
string
&
transport_name
const
TransportDescription
&
tdesc
ContentAction
action
std
:
:
string
*
err
)
;
void
MaybeStartGathering_w
(
)
;
bool
AddRemoteCandidates_w
(
const
std
:
:
string
&
transport_name
const
Candidates
&
candidates
std
:
:
string
*
err
)
;
bool
ReadyForRemoteCandidates_w
(
const
std
:
:
string
&
transport_name
)
;
bool
GetStats_w
(
const
std
:
:
string
&
transport_name
TransportStats
*
stats
)
;
void
OnChannelWritableState_w
(
TransportChannel
*
channel
)
;
void
OnChannelReceivingState_w
(
TransportChannel
*
channel
)
;
void
OnChannelGatheringState_w
(
TransportChannelImpl
*
channel
)
;
void
OnChannelCandidateGathered_w
(
TransportChannelImpl
*
channel
const
Candidate
&
candidate
)
;
void
OnChannelRoleConflict_w
(
TransportChannelImpl
*
channel
)
;
void
OnChannelConnectionRemoved_w
(
TransportChannelImpl
*
channel
)
;
void
UpdateAggregateStates_w
(
)
;
rtc
:
:
Thread
*
const
signaling_thread_
=
nullptr
;
rtc
:
:
Thread
*
const
worker_thread_
=
nullptr
;
typedef
std
:
:
map
<
std
:
:
string
Transport
*
>
TransportMap
;
TransportMap
transports_
;
std
:
:
vector
<
RefCountedChannel
>
channels_
;
PortAllocator
*
const
port_allocator_
=
nullptr
;
rtc
:
:
SSLProtocolVersion
ssl_max_version_
=
rtc
:
:
SSL_PROTOCOL_DTLS_12
;
IceConnectionState
connection_state_
=
kIceConnectionConnecting
;
bool
receiving_
=
false
;
IceGatheringState
gathering_state_
=
kIceGatheringNew
;
IceConfig
ice_config_
;
IceRole
ice_role_
=
ICEROLE_CONTROLLING
;
bool
ice_role_switch_
=
false
;
uint64_t
ice_tiebreaker_
=
rtc
:
:
CreateRandomId64
(
)
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
certificate_
;
}
;
}
#
endif
