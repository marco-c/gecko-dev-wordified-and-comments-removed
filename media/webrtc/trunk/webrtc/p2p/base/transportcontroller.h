#
ifndef
WEBRTC_P2P_BASE_TRANSPORTCONTROLLER_H_
#
define
WEBRTC_P2P_BASE_TRANSPORTCONTROLLER_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
asyncinvoker
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
refcountedobject
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
sslstreamadapter
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
dtlstransportchannel
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
jseptransport
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
p2ptransportchannel
.
h
"
namespace
rtc
{
class
Thread
;
class
PacketTransportInterface
;
}
namespace
webrtc
{
class
MetricsObserverInterface
;
}
namespace
cricket
{
class
TransportController
:
public
sigslot
:
:
has_slots
<
>
public
rtc
:
:
MessageHandler
{
public
:
TransportController
(
rtc
:
:
Thread
*
signaling_thread
rtc
:
:
Thread
*
network_thread
PortAllocator
*
port_allocator
bool
redetermine_role_on_ice_restart
)
;
TransportController
(
rtc
:
:
Thread
*
signaling_thread
rtc
:
:
Thread
*
network_thread
PortAllocator
*
port_allocator
)
;
virtual
~
TransportController
(
)
;
rtc
:
:
Thread
*
signaling_thread
(
)
const
{
return
signaling_thread_
;
}
rtc
:
:
Thread
*
network_thread
(
)
const
{
return
network_thread_
;
}
PortAllocator
*
port_allocator
(
)
const
{
return
port_allocator_
;
}
bool
SetSslMaxProtocolVersion
(
rtc
:
:
SSLProtocolVersion
version
)
;
void
SetIceConfig
(
const
IceConfig
&
config
)
;
void
SetIceRole
(
IceRole
ice_role
)
;
void
SetNeedsIceRestartFlag
(
)
;
bool
NeedsIceRestart
(
const
std
:
:
string
&
transport_name
)
const
;
bool
GetSslRole
(
const
std
:
:
string
&
transport_name
rtc
:
:
SSLRole
*
role
)
const
;
bool
SetLocalCertificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
;
bool
GetLocalCertificate
(
const
std
:
:
string
&
transport_name
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
*
certificate
)
const
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificate
>
GetRemoteSSLCertificate
(
const
std
:
:
string
&
transport_name
)
const
;
bool
SetLocalTransportDescription
(
const
std
:
:
string
&
transport_name
const
TransportDescription
&
tdesc
ContentAction
action
std
:
:
string
*
err
)
;
bool
SetRemoteTransportDescription
(
const
std
:
:
string
&
transport_name
const
TransportDescription
&
tdesc
ContentAction
action
std
:
:
string
*
err
)
;
void
MaybeStartGathering
(
)
;
bool
AddRemoteCandidates
(
const
std
:
:
string
&
transport_name
const
Candidates
&
candidates
std
:
:
string
*
err
)
;
bool
RemoveRemoteCandidates
(
const
Candidates
&
candidates
std
:
:
string
*
err
)
;
bool
ReadyForRemoteCandidates
(
const
std
:
:
string
&
transport_name
)
const
;
bool
GetStats
(
const
std
:
:
string
&
transport_name
TransportStats
*
stats
)
;
void
SetMetricsObserver
(
webrtc
:
:
MetricsObserverInterface
*
metrics_observer
)
;
TransportChannel
*
CreateTransportChannel
(
const
std
:
:
string
&
transport_name
int
component
)
;
virtual
TransportChannel
*
CreateTransportChannel_n
(
const
std
:
:
string
&
transport_name
int
component
)
;
virtual
void
DestroyTransportChannel_n
(
const
std
:
:
string
&
transport_name
int
component
)
;
void
use_quic
(
)
{
quic_
=
true
;
}
bool
quic
(
)
const
{
return
quic_
;
}
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate_for_testing
(
)
const
{
return
certificate_
;
}
std
:
:
vector
<
std
:
:
string
>
transport_names_for_testing
(
)
;
std
:
:
vector
<
TransportChannelImpl
*
>
channels_for_testing
(
)
;
TransportChannelImpl
*
get_channel_for_testing
(
const
std
:
:
string
&
transport_name
int
component
)
;
sigslot
:
:
signal1
<
IceConnectionState
>
SignalConnectionState
;
sigslot
:
:
signal1
<
bool
>
SignalReceiving
;
sigslot
:
:
signal1
<
IceGatheringState
>
SignalGatheringState
;
sigslot
:
:
signal2
<
const
std
:
:
string
&
const
Candidates
&
>
SignalCandidatesGathered
;
sigslot
:
:
signal1
<
const
Candidates
&
>
SignalCandidatesRemoved
;
sigslot
:
:
signal1
<
rtc
:
:
SSLHandshakeError
>
SignalDtlsHandshakeError
;
protected
:
virtual
IceTransportInternal
*
CreateIceTransportChannel_n
(
const
std
:
:
string
&
transport_name
int
component
)
;
virtual
TransportChannelImpl
*
CreateDtlsTransportChannel_n
(
const
std
:
:
string
&
transport_name
int
component
IceTransportInternal
*
ice
)
;
private
:
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
override
;
class
ChannelPair
;
typedef
rtc
:
:
RefCountedObject
<
ChannelPair
>
RefCountedChannel
;
std
:
:
vector
<
RefCountedChannel
*
>
:
:
iterator
GetChannelIterator_n
(
const
std
:
:
string
&
transport_name
int
component
)
;
std
:
:
vector
<
RefCountedChannel
*
>
:
:
const_iterator
GetChannelIterator_n
(
const
std
:
:
string
&
transport_name
int
component
)
const
;
const
JsepTransport
*
GetJsepTransport
(
const
std
:
:
string
&
transport_name
)
const
;
JsepTransport
*
GetJsepTransport
(
const
std
:
:
string
&
transport_name
)
;
const
RefCountedChannel
*
GetChannel_n
(
const
std
:
:
string
&
transport_name
int
component
)
const
;
RefCountedChannel
*
GetChannel_n
(
const
std
:
:
string
&
transport_name
int
component
)
;
JsepTransport
*
GetOrCreateJsepTransport
(
const
std
:
:
string
&
transport_name
)
;
void
DestroyAllChannels_n
(
)
;
bool
SetSslMaxProtocolVersion_n
(
rtc
:
:
SSLProtocolVersion
version
)
;
void
SetIceConfig_n
(
const
IceConfig
&
config
)
;
void
SetIceRole_n
(
IceRole
ice_role
)
;
bool
GetSslRole_n
(
const
std
:
:
string
&
transport_name
rtc
:
:
SSLRole
*
role
)
const
;
bool
SetLocalCertificate_n
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
;
bool
GetLocalCertificate_n
(
const
std
:
:
string
&
transport_name
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
*
certificate
)
const
;
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificate
>
GetRemoteSSLCertificate_n
(
const
std
:
:
string
&
transport_name
)
const
;
bool
SetLocalTransportDescription_n
(
const
std
:
:
string
&
transport_name
const
TransportDescription
&
tdesc
ContentAction
action
std
:
:
string
*
err
)
;
bool
SetRemoteTransportDescription_n
(
const
std
:
:
string
&
transport_name
const
TransportDescription
&
tdesc
ContentAction
action
std
:
:
string
*
err
)
;
void
MaybeStartGathering_n
(
)
;
bool
AddRemoteCandidates_n
(
const
std
:
:
string
&
transport_name
const
Candidates
&
candidates
std
:
:
string
*
err
)
;
bool
RemoveRemoteCandidates_n
(
const
Candidates
&
candidates
std
:
:
string
*
err
)
;
bool
ReadyForRemoteCandidates_n
(
const
std
:
:
string
&
transport_name
)
const
;
bool
GetStats_n
(
const
std
:
:
string
&
transport_name
TransportStats
*
stats
)
;
void
SetMetricsObserver_n
(
webrtc
:
:
MetricsObserverInterface
*
metrics_observer
)
;
void
OnChannelWritableState_n
(
rtc
:
:
PacketTransportInterface
*
transport
)
;
void
OnChannelReceivingState_n
(
rtc
:
:
PacketTransportInterface
*
transport
)
;
void
OnChannelGatheringState_n
(
TransportChannelImpl
*
channel
)
;
void
OnChannelCandidateGathered_n
(
TransportChannelImpl
*
channel
const
Candidate
&
candidate
)
;
void
OnChannelCandidatesRemoved
(
const
Candidates
&
candidates
)
;
void
OnChannelCandidatesRemoved_n
(
TransportChannelImpl
*
channel
const
Candidates
&
candidates
)
;
void
OnChannelRoleConflict_n
(
TransportChannelImpl
*
channel
)
;
void
OnChannelStateChanged_n
(
TransportChannelImpl
*
channel
)
;
void
UpdateAggregateStates_n
(
)
;
void
OnDtlsHandshakeError
(
rtc
:
:
SSLHandshakeError
error
)
;
rtc
:
:
Thread
*
const
signaling_thread_
=
nullptr
;
rtc
:
:
Thread
*
const
network_thread_
=
nullptr
;
PortAllocator
*
const
port_allocator_
=
nullptr
;
std
:
:
map
<
std
:
:
string
std
:
:
unique_ptr
<
JsepTransport
>
>
transports_
;
std
:
:
vector
<
RefCountedChannel
*
>
channels_
;
IceConnectionState
connection_state_
=
kIceConnectionConnecting
;
bool
receiving_
=
false
;
IceGatheringState
gathering_state_
=
kIceGatheringNew
;
IceConfig
ice_config_
;
IceRole
ice_role_
=
ICEROLE_CONTROLLING
;
bool
redetermine_role_on_ice_restart_
;
uint64_t
ice_tiebreaker_
=
rtc
:
:
CreateRandomId64
(
)
;
rtc
:
:
SSLProtocolVersion
ssl_max_version_
=
rtc
:
:
SSL_PROTOCOL_DTLS_12
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
certificate_
;
rtc
:
:
AsyncInvoker
invoker_
;
bool
quic_
=
false
;
webrtc
:
:
MetricsObserverInterface
*
metrics_observer_
=
nullptr
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
TransportController
)
;
}
;
}
#
endif
