#
include
"
webrtc
/
base
/
gunit
.
h
"
#
include
"
webrtc
/
base
/
physicalsocketserver
.
h
"
#
include
"
webrtc
/
base
/
virtualsocketserver
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
basicpacketsocketfactory
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
turnserver
.
h
"
namespace
cricket
{
class
TurnServerConnectionTest
:
public
testing
:
:
Test
{
public
:
TurnServerConnectionTest
(
)
:
vss_
(
&
pss_
)
ss_scope_
(
&
vss_
)
{
}
void
ExpectEqual
(
const
TurnServerConnection
&
a
const
TurnServerConnection
&
b
)
{
EXPECT_TRUE
(
a
=
=
b
)
;
EXPECT_FALSE
(
a
<
b
)
;
EXPECT_FALSE
(
b
<
a
)
;
}
void
ExpectNotEqual
(
const
TurnServerConnection
&
a
const
TurnServerConnection
&
b
)
{
EXPECT_FALSE
(
a
=
=
b
)
;
EXPECT_TRUE
(
(
a
<
b
)
!
=
(
b
<
a
)
)
;
}
protected
:
rtc
:
:
PhysicalSocketServer
pss_
;
rtc
:
:
VirtualSocketServer
vss_
;
rtc
:
:
SocketServerScope
ss_scope_
;
rtc
:
:
BasicPacketSocketFactory
socket_factory_
;
}
;
TEST_F
(
TurnServerConnectionTest
ComparisonOperators
)
{
std
:
:
unique_ptr
<
rtc
:
:
AsyncPacketSocket
>
socket1
(
socket_factory_
.
CreateUdpSocket
(
rtc
:
:
SocketAddress
(
"
1
.
1
.
1
.
1
"
1
)
0
0
)
)
;
std
:
:
unique_ptr
<
rtc
:
:
AsyncPacketSocket
>
socket2
(
socket_factory_
.
CreateUdpSocket
(
rtc
:
:
SocketAddress
(
"
2
.
2
.
2
.
2
"
2
)
0
0
)
)
;
TurnServerConnection
connection1
(
socket2
-
>
GetLocalAddress
(
)
PROTO_UDP
socket1
.
get
(
)
)
;
TurnServerConnection
connection2
(
socket2
-
>
GetLocalAddress
(
)
PROTO_UDP
socket1
.
get
(
)
)
;
TurnServerConnection
connection3
(
socket1
-
>
GetLocalAddress
(
)
PROTO_UDP
socket2
.
get
(
)
)
;
TurnServerConnection
connection4
(
socket2
-
>
GetLocalAddress
(
)
PROTO_TCP
socket1
.
get
(
)
)
;
ExpectEqual
(
connection1
connection2
)
;
ExpectNotEqual
(
connection1
connection3
)
;
ExpectNotEqual
(
connection1
connection4
)
;
}
}
