#
ifndef
WEBRTC_P2P_BASE_TESTSTUNSERVER_H_
#
define
WEBRTC_P2P_BASE_TESTSTUNSERVER_H_
#
include
"
webrtc
/
p2p
/
base
/
stunserver
.
h
"
#
include
"
webrtc
/
base
/
socketaddress
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
namespace
cricket
{
class
TestStunServer
:
StunServer
{
public
:
static
TestStunServer
*
Create
(
rtc
:
:
Thread
*
thread
const
rtc
:
:
SocketAddress
&
addr
)
{
rtc
:
:
AsyncSocket
*
socket
=
thread
-
>
socketserver
(
)
-
>
CreateAsyncSocket
(
addr
.
family
(
)
SOCK_DGRAM
)
;
rtc
:
:
AsyncUDPSocket
*
udp_socket
=
rtc
:
:
AsyncUDPSocket
:
:
Create
(
socket
addr
)
;
return
new
TestStunServer
(
udp_socket
)
;
}
void
set_fake_stun_addr
(
const
rtc
:
:
SocketAddress
&
addr
)
{
fake_stun_addr_
=
addr
;
}
private
:
explicit
TestStunServer
(
rtc
:
:
AsyncUDPSocket
*
socket
)
:
StunServer
(
socket
)
{
}
void
OnBindingRequest
(
StunMessage
*
msg
const
rtc
:
:
SocketAddress
&
remote_addr
)
override
{
if
(
fake_stun_addr_
.
IsNil
(
)
)
{
StunServer
:
:
OnBindingRequest
(
msg
remote_addr
)
;
}
else
{
StunMessage
response
;
GetStunBindReqponse
(
msg
fake_stun_addr_
&
response
)
;
SendResponse
(
response
remote_addr
)
;
}
}
private
:
rtc
:
:
SocketAddress
fake_stun_addr_
;
}
;
}
#
endif
