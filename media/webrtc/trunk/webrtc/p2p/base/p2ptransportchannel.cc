#
include
"
webrtc
/
p2p
/
base
/
p2ptransportchannel
.
h
"
#
include
<
algorithm
>
#
include
<
iterator
>
#
include
<
set
>
#
include
"
webrtc
/
api
/
umametrics
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
common
.
h
"
#
include
"
webrtc
/
base
/
crc32
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
base
/
stringencode
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
candidatepairinterface
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
common
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
relayport
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
stunport
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
field_trial
.
h
"
namespace
{
enum
{
MSG_SORT_AND_UPDATE_STATE
=
1
MSG_CHECK_AND_PING
MSG_REGATHER_ON_FAILED_NETWORKS
}
;
const
int
kMinImprovement
=
10
;
bool
IsRelayRelay
(
const
cricket
:
:
Connection
*
conn
)
{
return
conn
-
>
local_candidate
(
)
.
type
(
)
=
=
cricket
:
:
RELAY_PORT_TYPE
&
&
conn
-
>
remote_candidate
(
)
.
type
(
)
=
=
cricket
:
:
RELAY_PORT_TYPE
;
}
bool
IsUdp
(
cricket
:
:
Connection
*
conn
)
{
return
conn
-
>
local_candidate
(
)
.
relay_protocol
(
)
=
=
cricket
:
:
UDP_PROTOCOL_NAME
;
}
cricket
:
:
PortInterface
:
:
CandidateOrigin
GetOrigin
(
cricket
:
:
PortInterface
*
port
cricket
:
:
PortInterface
*
origin_port
)
{
if
(
!
origin_port
)
return
cricket
:
:
PortInterface
:
:
ORIGIN_MESSAGE
;
else
if
(
port
=
=
origin_port
)
return
cricket
:
:
PortInterface
:
:
ORIGIN_THIS_PORT
;
else
return
cricket
:
:
PortInterface
:
:
ORIGIN_OTHER_PORT
;
}
}
namespace
cricket
{
static
const
int
PING_PACKET_SIZE
=
60
*
8
;
static
const
int
STRONG_PING_INTERVAL
=
1000
*
PING_PACKET_SIZE
/
1000
;
const
int
WEAK_PING_INTERVAL
=
1000
*
PING_PACKET_SIZE
/
10000
;
const
int
WEAK_OR_STABILIZING_WRITABLE_CONNECTION_PING_INTERVAL
=
900
;
const
int
STRONG_AND_STABLE_WRITABLE_CONNECTION_PING_INTERVAL
=
2500
;
static
const
int
MIN_CHECK_RECEIVING_INTERVAL
=
50
;
static
const
int
RECEIVING_SWITCHING_DELAY
=
1000
;
static
const
int
DEFAULT_REGATHER_ON_FAILED_NETWORKS_INTERVAL
=
5
*
60
*
1000
;
static
constexpr
int
DEFAULT_BACKUP_CONNECTION_PING_INTERVAL
=
25
*
1000
;
static
constexpr
int
a_is_better
=
1
;
static
constexpr
int
b_is_better
=
-
1
;
P2PTransportChannel
:
:
P2PTransportChannel
(
const
std
:
:
string
&
transport_name
int
component
PortAllocator
*
allocator
)
:
transport_name_
(
transport_name
)
component_
(
component
)
allocator_
(
allocator
)
network_thread_
(
rtc
:
:
Thread
:
:
Current
(
)
)
incoming_only_
(
false
)
error_
(
0
)
sort_dirty_
(
false
)
remote_ice_mode_
(
ICEMODE_FULL
)
ice_role_
(
ICEROLE_UNKNOWN
)
tiebreaker_
(
0
)
gathering_state_
(
kIceGatheringNew
)
check_receiving_interval_
(
MIN_CHECK_RECEIVING_INTERVAL
*
5
)
config_
(
MIN_CHECK_RECEIVING_INTERVAL
*
50
DEFAULT_BACKUP_CONNECTION_PING_INTERVAL
GATHER_ONCE
false
STRONG_AND_STABLE_WRITABLE_CONNECTION_PING_INTERVAL
true
DEFAULT_REGATHER_ON_FAILED_NETWORKS_INTERVAL
RECEIVING_SWITCHING_DELAY
)
{
uint32_t
weak_ping_interval
=
:
:
strtoul
(
webrtc
:
:
field_trial
:
:
FindFullName
(
"
WebRTC
-
StunInterPacketDelay
"
)
.
c_str
(
)
nullptr
10
)
;
if
(
weak_ping_interval
)
{
weak_ping_interval_
=
static_cast
<
int
>
(
weak_ping_interval
)
;
}
}
P2PTransportChannel
:
:
~
P2PTransportChannel
(
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
}
void
P2PTransportChannel
:
:
AddAllocatorSession
(
std
:
:
unique_ptr
<
PortAllocatorSession
>
session
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
session
-
>
set_generation
(
static_cast
<
uint32_t
>
(
allocator_sessions_
.
size
(
)
)
)
;
session
-
>
SignalPortReady
.
connect
(
this
&
P2PTransportChannel
:
:
OnPortReady
)
;
session
-
>
SignalPortsPruned
.
connect
(
this
&
P2PTransportChannel
:
:
OnPortsPruned
)
;
session
-
>
SignalCandidatesReady
.
connect
(
this
&
P2PTransportChannel
:
:
OnCandidatesReady
)
;
session
-
>
SignalCandidatesRemoved
.
connect
(
this
&
P2PTransportChannel
:
:
OnCandidatesRemoved
)
;
session
-
>
SignalCandidatesAllocationDone
.
connect
(
this
&
P2PTransportChannel
:
:
OnCandidatesAllocationDone
)
;
if
(
!
allocator_sessions_
.
empty
(
)
)
{
allocator_session
(
)
-
>
PruneAllPorts
(
)
;
}
allocator_sessions_
.
push_back
(
std
:
:
move
(
session
)
)
;
PruneAllPorts
(
)
;
}
void
P2PTransportChannel
:
:
AddConnection
(
Connection
*
connection
)
{
connections_
.
push_back
(
connection
)
;
unpinged_connections_
.
insert
(
connection
)
;
connection
-
>
set_remote_ice_mode
(
remote_ice_mode_
)
;
connection
-
>
set_receiving_timeout
(
config_
.
receiving_timeout
)
;
connection
-
>
SignalReadPacket
.
connect
(
this
&
P2PTransportChannel
:
:
OnReadPacket
)
;
connection
-
>
SignalReadyToSend
.
connect
(
this
&
P2PTransportChannel
:
:
OnReadyToSend
)
;
connection
-
>
SignalStateChange
.
connect
(
this
&
P2PTransportChannel
:
:
OnConnectionStateChange
)
;
connection
-
>
SignalDestroyed
.
connect
(
this
&
P2PTransportChannel
:
:
OnConnectionDestroyed
)
;
connection
-
>
SignalNominated
.
connect
(
this
&
P2PTransportChannel
:
:
OnNominated
)
;
had_connection_
=
true
;
}
bool
P2PTransportChannel
:
:
ShouldSwitchSelectedConnection
(
Connection
*
new_connection
bool
*
missed_receiving_unchanged_threshold
)
const
{
if
(
!
ReadyToSend
(
new_connection
)
|
|
selected_connection_
=
=
new_connection
)
{
return
false
;
}
if
(
selected_connection_
=
=
nullptr
)
{
return
true
;
}
if
(
new_connection
-
>
ComputeNetworkCost
(
)
>
selected_connection_
-
>
ComputeNetworkCost
(
)
&
&
!
new_connection
-
>
receiving
(
)
)
{
return
false
;
}
rtc
:
:
Optional
<
int64_t
>
receiving_unchanged_threshold
(
rtc
:
:
TimeMillis
(
)
-
config_
.
receiving_switching_delay
.
value_or
(
0
)
)
;
int
cmp
=
CompareConnections
(
selected_connection_
new_connection
receiving_unchanged_threshold
missed_receiving_unchanged_threshold
)
;
if
(
cmp
!
=
0
)
{
return
cmp
<
0
;
}
return
new_connection
-
>
rtt
(
)
<
=
selected_connection_
-
>
rtt
(
)
-
kMinImprovement
;
}
bool
P2PTransportChannel
:
:
MaybeSwitchSelectedConnection
(
Connection
*
new_connection
const
std
:
:
string
&
reason
)
{
bool
missed_receiving_unchanged_threshold
=
false
;
if
(
ShouldSwitchSelectedConnection
(
new_connection
&
missed_receiving_unchanged_threshold
)
)
{
LOG
(
LS_INFO
)
<
<
"
Switching
selected
connection
due
to
"
<
<
reason
;
SwitchSelectedConnection
(
new_connection
)
;
return
true
;
}
if
(
missed_receiving_unchanged_threshold
&
&
config_
.
receiving_switching_delay
)
{
thread
(
)
-
>
PostDelayed
(
RTC_FROM_HERE
*
config_
.
receiving_switching_delay
this
MSG_SORT_AND_UPDATE_STATE
)
;
}
return
false
;
}
void
P2PTransportChannel
:
:
SetIceRole
(
IceRole
ice_role
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
if
(
ice_role_
!
=
ice_role
)
{
ice_role_
=
ice_role
;
for
(
PortInterface
*
port
:
ports_
)
{
port
-
>
SetIceRole
(
ice_role
)
;
}
for
(
PortInterface
*
port
:
pruned_ports_
)
{
port
-
>
SetIceRole
(
ice_role
)
;
}
}
}
void
P2PTransportChannel
:
:
SetIceTiebreaker
(
uint64_t
tiebreaker
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
if
(
!
ports_
.
empty
(
)
|
|
!
pruned_ports_
.
empty
(
)
)
{
LOG
(
LS_ERROR
)
<
<
"
Attempt
to
change
tiebreaker
after
Port
has
been
allocated
.
"
;
return
;
}
tiebreaker_
=
tiebreaker
;
}
IceTransportState
P2PTransportChannel
:
:
GetState
(
)
const
{
return
state_
;
}
IceTransportState
P2PTransportChannel
:
:
ComputeState
(
)
const
{
if
(
!
had_connection_
)
{
return
IceTransportState
:
:
STATE_INIT
;
}
std
:
:
vector
<
Connection
*
>
active_connections
;
for
(
Connection
*
connection
:
connections_
)
{
if
(
connection
-
>
active
(
)
)
{
active_connections
.
push_back
(
connection
)
;
}
}
if
(
active_connections
.
empty
(
)
)
{
return
IceTransportState
:
:
STATE_FAILED
;
}
std
:
:
set
<
rtc
:
:
Network
*
>
networks
;
for
(
Connection
*
connection
:
active_connections
)
{
rtc
:
:
Network
*
network
=
connection
-
>
port
(
)
-
>
Network
(
)
;
if
(
networks
.
find
(
network
)
=
=
networks
.
end
(
)
)
{
networks
.
insert
(
network
)
;
}
else
{
LOG_J
(
LS_VERBOSE
this
)
<
<
"
Ice
not
completed
yet
for
this
channel
as
"
<
<
network
-
>
ToString
(
)
<
<
"
has
more
than
1
connection
.
"
;
return
IceTransportState
:
:
STATE_CONNECTING
;
}
}
return
IceTransportState
:
:
STATE_COMPLETED
;
}
void
P2PTransportChannel
:
:
SetIceParameters
(
const
IceParameters
&
ice_params
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
LOG
(
LS_INFO
)
<
<
"
Set
ICE
ufrag
:
"
<
<
ice_params
.
ufrag
<
<
"
pwd
:
"
<
<
ice_params
.
pwd
<
<
"
on
transport
"
<
<
transport_name
(
)
;
ice_parameters_
=
ice_params
;
}
void
P2PTransportChannel
:
:
SetRemoteIceParameters
(
const
IceParameters
&
ice_params
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
LOG
(
LS_INFO
)
<
<
"
Remote
supports
ICE
renomination
?
"
<
<
ice_params
.
renomination
;
IceParameters
*
current_ice
=
remote_ice
(
)
;
if
(
!
current_ice
|
|
*
current_ice
!
=
ice_params
)
{
remote_ice_parameters_
.
push_back
(
ice_params
)
;
}
for
(
RemoteCandidate
&
candidate
:
remote_candidates_
)
{
if
(
candidate
.
username
(
)
=
=
ice_params
.
ufrag
&
&
candidate
.
password
(
)
.
empty
(
)
)
{
candidate
.
set_password
(
ice_params
.
pwd
)
;
}
}
for
(
Connection
*
conn
:
connections_
)
{
conn
-
>
MaybeSetRemoteIceParametersAndGeneration
(
ice_params
static_cast
<
int
>
(
remote_ice_parameters_
.
size
(
)
-
1
)
)
;
}
RequestSortAndStateUpdate
(
)
;
}
void
P2PTransportChannel
:
:
SetRemoteIceMode
(
IceMode
mode
)
{
remote_ice_mode_
=
mode
;
}
void
P2PTransportChannel
:
:
SetIceConfig
(
const
IceConfig
&
config
)
{
if
(
config_
.
continual_gathering_policy
!
=
config
.
continual_gathering_policy
)
{
if
(
!
allocator_sessions_
.
empty
(
)
)
{
LOG
(
LS_ERROR
)
<
<
"
Trying
to
change
continual
gathering
policy
"
<
<
"
when
gathering
has
already
started
!
"
;
}
else
{
config_
.
continual_gathering_policy
=
config
.
continual_gathering_policy
;
LOG
(
LS_INFO
)
<
<
"
Set
continual_gathering_policy
to
"
<
<
config_
.
continual_gathering_policy
;
}
}
if
(
config
.
backup_connection_ping_interval
>
=
0
&
&
config_
.
backup_connection_ping_interval
!
=
config
.
backup_connection_ping_interval
)
{
config_
.
backup_connection_ping_interval
=
config
.
backup_connection_ping_interval
;
LOG
(
LS_INFO
)
<
<
"
Set
backup
connection
ping
interval
to
"
<
<
config_
.
backup_connection_ping_interval
<
<
"
milliseconds
.
"
;
}
if
(
config
.
receiving_timeout
>
=
0
&
&
config_
.
receiving_timeout
!
=
config
.
receiving_timeout
)
{
config_
.
receiving_timeout
=
config
.
receiving_timeout
;
check_receiving_interval_
=
std
:
:
max
(
MIN_CHECK_RECEIVING_INTERVAL
config_
.
receiving_timeout
/
10
)
;
for
(
Connection
*
connection
:
connections_
)
{
connection
-
>
set_receiving_timeout
(
config_
.
receiving_timeout
)
;
}
LOG
(
LS_INFO
)
<
<
"
Set
ICE
receiving
timeout
to
"
<
<
config_
.
receiving_timeout
<
<
"
milliseconds
"
;
}
config_
.
prioritize_most_likely_candidate_pairs
=
config
.
prioritize_most_likely_candidate_pairs
;
LOG
(
LS_INFO
)
<
<
"
Set
ping
most
likely
connection
to
"
<
<
config_
.
prioritize_most_likely_candidate_pairs
;
if
(
config
.
stable_writable_connection_ping_interval
>
=
0
&
&
config_
.
stable_writable_connection_ping_interval
!
=
config
.
stable_writable_connection_ping_interval
)
{
config_
.
stable_writable_connection_ping_interval
=
config
.
stable_writable_connection_ping_interval
;
LOG
(
LS_INFO
)
<
<
"
Set
stable_writable_connection_ping_interval
to
"
<
<
config_
.
stable_writable_connection_ping_interval
;
}
if
(
config
.
presume_writable_when_fully_relayed
!
=
config_
.
presume_writable_when_fully_relayed
)
{
if
(
!
connections_
.
empty
(
)
)
{
LOG
(
LS_ERROR
)
<
<
"
Trying
to
change
'
presume
writable
'
"
<
<
"
while
connections
already
exist
!
"
;
}
else
{
config_
.
presume_writable_when_fully_relayed
=
config
.
presume_writable_when_fully_relayed
;
LOG
(
LS_INFO
)
<
<
"
Set
presume
writable
when
fully
relayed
to
"
<
<
config_
.
presume_writable_when_fully_relayed
;
}
}
if
(
config
.
regather_on_failed_networks_interval
)
{
config_
.
regather_on_failed_networks_interval
=
config
.
regather_on_failed_networks_interval
;
LOG
(
LS_INFO
)
<
<
"
Set
regather_on_failed_networks_interval
to
"
<
<
*
config_
.
regather_on_failed_networks_interval
;
}
if
(
config
.
receiving_switching_delay
)
{
config_
.
receiving_switching_delay
=
config
.
receiving_switching_delay
;
LOG
(
LS_INFO
)
<
<
"
Set
receiving_switching_delay
to
"
<
<
*
config_
.
receiving_switching_delay
;
}
if
(
config_
.
default_nomination_mode
!
=
config
.
default_nomination_mode
)
{
config_
.
default_nomination_mode
=
config
.
default_nomination_mode
;
LOG
(
LS_INFO
)
<
<
"
Set
default
nomination
mode
to
"
<
<
static_cast
<
int
>
(
config_
.
default_nomination_mode
)
;
}
}
const
IceConfig
&
P2PTransportChannel
:
:
config
(
)
const
{
return
config_
;
}
void
P2PTransportChannel
:
:
SetMetricsObserver
(
webrtc
:
:
MetricsObserverInterface
*
observer
)
{
metrics_observer_
=
observer
;
}
void
P2PTransportChannel
:
:
MaybeStartGathering
(
)
{
if
(
ice_parameters_
.
ufrag
.
empty
(
)
|
|
ice_parameters_
.
pwd
.
empty
(
)
)
{
LOG
(
LS_ERROR
)
<
<
"
Cannot
gather
candidates
because
ICE
parameters
are
empty
"
<
<
"
ufrag
:
"
<
<
ice_parameters_
.
ufrag
<
<
"
pwd
:
"
<
<
ice_parameters_
.
pwd
;
return
;
}
if
(
allocator_sessions_
.
empty
(
)
|
|
IceCredentialsChanged
(
allocator_sessions_
.
back
(
)
-
>
ice_ufrag
(
)
allocator_sessions_
.
back
(
)
-
>
ice_pwd
(
)
ice_parameters_
.
ufrag
ice_parameters_
.
pwd
)
)
{
if
(
gathering_state_
!
=
kIceGatheringGathering
)
{
gathering_state_
=
kIceGatheringGathering
;
SignalGatheringState
(
this
)
;
}
if
(
metrics_observer_
&
&
!
allocator_sessions_
.
empty
(
)
)
{
IceRestartState
state
;
if
(
writable
(
)
)
{
state
=
IceRestartState
:
:
CONNECTED
;
}
else
if
(
IsGettingPorts
(
)
)
{
state
=
IceRestartState
:
:
CONNECTING
;
}
else
{
state
=
IceRestartState
:
:
DISCONNECTED
;
}
metrics_observer_
-
>
IncrementEnumCounter
(
webrtc
:
:
kEnumCounterIceRestart
static_cast
<
int
>
(
state
)
static_cast
<
int
>
(
IceRestartState
:
:
MAX_VALUE
)
)
;
}
std
:
:
unique_ptr
<
PortAllocatorSession
>
pooled_session
=
allocator_
-
>
TakePooledSession
(
transport_name
(
)
component
(
)
ice_parameters_
.
ufrag
ice_parameters_
.
pwd
)
;
if
(
pooled_session
)
{
AddAllocatorSession
(
std
:
:
move
(
pooled_session
)
)
;
PortAllocatorSession
*
raw_pooled_session
=
allocator_sessions_
.
back
(
)
.
get
(
)
;
OnCandidatesReady
(
raw_pooled_session
raw_pooled_session
-
>
ReadyCandidates
(
)
)
;
for
(
PortInterface
*
port
:
allocator_sessions_
.
back
(
)
-
>
ReadyPorts
(
)
)
{
OnPortReady
(
raw_pooled_session
port
)
;
}
if
(
allocator_sessions_
.
back
(
)
-
>
CandidatesAllocationDone
(
)
)
{
OnCandidatesAllocationDone
(
raw_pooled_session
)
;
}
}
else
{
AddAllocatorSession
(
allocator_
-
>
CreateSession
(
transport_name
(
)
component
(
)
ice_parameters_
.
ufrag
ice_parameters_
.
pwd
)
)
;
allocator_sessions_
.
back
(
)
-
>
StartGettingPorts
(
)
;
}
}
}
void
P2PTransportChannel
:
:
OnPortReady
(
PortAllocatorSession
*
session
PortInterface
*
port
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
for
(
OptionMap
:
:
const_iterator
it
=
options_
.
begin
(
)
;
it
!
=
options_
.
end
(
)
;
+
+
it
)
{
int
val
=
port
-
>
SetOption
(
it
-
>
first
it
-
>
second
)
;
if
(
val
<
0
)
{
LOG_J
(
LS_WARNING
port
)
<
<
"
SetOption
(
"
<
<
it
-
>
first
<
<
"
"
<
<
it
-
>
second
<
<
"
)
failed
:
"
<
<
port
-
>
GetError
(
)
;
}
}
port
-
>
SetIceRole
(
ice_role_
)
;
port
-
>
SetIceTiebreaker
(
tiebreaker_
)
;
ports_
.
push_back
(
port
)
;
port
-
>
SignalUnknownAddress
.
connect
(
this
&
P2PTransportChannel
:
:
OnUnknownAddress
)
;
port
-
>
SignalDestroyed
.
connect
(
this
&
P2PTransportChannel
:
:
OnPortDestroyed
)
;
port
-
>
SignalRoleConflict
.
connect
(
this
&
P2PTransportChannel
:
:
OnRoleConflict
)
;
port
-
>
SignalSentPacket
.
connect
(
this
&
P2PTransportChannel
:
:
OnSentPacket
)
;
std
:
:
vector
<
RemoteCandidate
>
:
:
iterator
iter
;
for
(
iter
=
remote_candidates_
.
begin
(
)
;
iter
!
=
remote_candidates_
.
end
(
)
;
+
+
iter
)
{
CreateConnection
(
port
*
iter
iter
-
>
origin_port
(
)
)
;
}
SortConnectionsAndUpdateState
(
)
;
}
void
P2PTransportChannel
:
:
OnCandidatesReady
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
Candidate
>
&
candidates
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
for
(
size_t
i
=
0
;
i
<
candidates
.
size
(
)
;
+
+
i
)
{
SignalCandidateGathered
(
this
candidates
[
i
]
)
;
}
}
void
P2PTransportChannel
:
:
OnCandidatesAllocationDone
(
PortAllocatorSession
*
session
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
if
(
config_
.
gather_continually
(
)
)
{
LOG
(
LS_INFO
)
<
<
"
P2PTransportChannel
:
"
<
<
transport_name
(
)
<
<
"
component
"
<
<
component
(
)
<
<
"
gathering
complete
but
using
continual
"
<
<
"
gathering
so
not
changing
gathering
state
.
"
;
return
;
}
gathering_state_
=
kIceGatheringComplete
;
LOG
(
LS_INFO
)
<
<
"
P2PTransportChannel
:
"
<
<
transport_name
(
)
<
<
"
component
"
<
<
component
(
)
<
<
"
gathering
complete
"
;
SignalGatheringState
(
this
)
;
}
void
P2PTransportChannel
:
:
OnUnknownAddress
(
PortInterface
*
port
const
rtc
:
:
SocketAddress
&
address
ProtocolType
proto
IceMessage
*
stun_msg
const
std
:
:
string
&
remote_username
bool
port_muxed
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
const
Candidate
*
candidate
=
nullptr
;
for
(
const
Candidate
&
c
:
remote_candidates_
)
{
if
(
c
.
username
(
)
=
=
remote_username
&
&
c
.
address
(
)
=
=
address
&
&
c
.
protocol
(
)
=
=
ProtoToString
(
proto
)
)
{
candidate
=
&
c
;
break
;
}
}
uint32_t
remote_generation
=
0
;
std
:
:
string
remote_password
;
const
IceParameters
*
ice_param
=
FindRemoteIceFromUfrag
(
remote_username
&
remote_generation
)
;
if
(
ice_param
!
=
nullptr
)
{
remote_password
=
ice_param
-
>
pwd
;
}
Candidate
remote_candidate
;
bool
remote_candidate_is_new
=
(
candidate
=
=
nullptr
)
;
if
(
!
remote_candidate_is_new
)
{
remote_candidate
=
*
candidate
;
}
else
{
const
StunUInt32Attribute
*
priority_attr
=
stun_msg
-
>
GetUInt32
(
STUN_ATTR_PRIORITY
)
;
if
(
!
priority_attr
)
{
LOG
(
LS_WARNING
)
<
<
"
P2PTransportChannel
:
:
OnUnknownAddress
-
"
<
<
"
No
STUN_ATTR_PRIORITY
found
in
the
"
<
<
"
stun
request
message
"
;
port
-
>
SendBindingErrorResponse
(
stun_msg
address
STUN_ERROR_BAD_REQUEST
STUN_ERROR_REASON_BAD_REQUEST
)
;
return
;
}
int
remote_candidate_priority
=
priority_attr
-
>
value
(
)
;
uint16_t
network_id
=
0
;
uint16_t
network_cost
=
0
;
const
StunUInt32Attribute
*
network_attr
=
stun_msg
-
>
GetUInt32
(
STUN_ATTR_NETWORK_INFO
)
;
if
(
network_attr
)
{
uint32_t
network_info
=
network_attr
-
>
value
(
)
;
network_id
=
static_cast
<
uint16_t
>
(
network_info
>
>
16
)
;
network_cost
=
static_cast
<
uint16_t
>
(
network_info
)
;
}
remote_candidate
=
Candidate
(
component
(
)
ProtoToString
(
proto
)
address
remote_candidate_priority
remote_username
remote_password
PRFLX_PORT_TYPE
remote_generation
"
"
network_id
network_cost
)
;
remote_candidate
.
set_foundation
(
rtc
:
:
ToString
<
uint32_t
>
(
rtc
:
:
ComputeCrc32
(
remote_candidate
.
id
(
)
)
)
)
;
}
if
(
port
-
>
GetConnection
(
remote_candidate
.
address
(
)
)
)
{
if
(
port_muxed
)
{
LOG
(
LS_INFO
)
<
<
"
Connection
already
exists
for
peer
reflexive
"
<
<
"
candidate
:
"
<
<
remote_candidate
.
ToString
(
)
;
return
;
}
else
{
RTC_NOTREACHED
(
)
;
port
-
>
SendBindingErrorResponse
(
stun_msg
address
STUN_ERROR_SERVER_ERROR
STUN_ERROR_REASON_SERVER_ERROR
)
;
return
;
}
}
Connection
*
connection
=
port
-
>
CreateConnection
(
remote_candidate
PortInterface
:
:
ORIGIN_THIS_PORT
)
;
if
(
!
connection
)
{
port
-
>
SendBindingErrorResponse
(
stun_msg
address
STUN_ERROR_SERVER_ERROR
STUN_ERROR_REASON_SERVER_ERROR
)
;
return
;
}
LOG
(
LS_INFO
)
<
<
"
Adding
connection
from
"
<
<
(
remote_candidate_is_new
?
"
peer
reflexive
"
:
"
resurrected
"
)
<
<
"
candidate
:
"
<
<
remote_candidate
.
ToString
(
)
;
AddConnection
(
connection
)
;
connection
-
>
HandleBindingRequest
(
stun_msg
)
;
SortConnectionsAndUpdateState
(
)
;
}
void
P2PTransportChannel
:
:
OnRoleConflict
(
PortInterface
*
port
)
{
SignalRoleConflict
(
this
)
;
}
const
IceParameters
*
P2PTransportChannel
:
:
FindRemoteIceFromUfrag
(
const
std
:
:
string
&
ufrag
uint32_t
*
generation
)
{
const
auto
&
params
=
remote_ice_parameters_
;
auto
it
=
std
:
:
find_if
(
params
.
rbegin
(
)
params
.
rend
(
)
[
ufrag
]
(
const
IceParameters
&
param
)
{
return
param
.
ufrag
=
=
ufrag
;
}
)
;
if
(
it
=
=
params
.
rend
(
)
)
{
return
nullptr
;
}
*
generation
=
params
.
rend
(
)
-
it
-
1
;
return
&
(
*
it
)
;
}
void
P2PTransportChannel
:
:
OnNominated
(
Connection
*
conn
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
RTC_DCHECK
(
ice_role_
=
=
ICEROLE_CONTROLLED
)
;
if
(
selected_connection_
=
=
conn
)
{
return
;
}
if
(
MaybeSwitchSelectedConnection
(
conn
"
nomination
on
the
controlled
side
"
)
)
{
RequestSortAndStateUpdate
(
)
;
}
else
{
LOG
(
LS_INFO
)
<
<
"
Not
switching
the
selected
connection
on
controlled
side
yet
:
"
<
<
conn
-
>
ToString
(
)
;
}
}
void
P2PTransportChannel
:
:
AddRemoteCandidate
(
const
Candidate
&
candidate
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
uint32_t
generation
=
GetRemoteCandidateGeneration
(
candidate
)
;
if
(
generation
<
remote_ice_generation
(
)
)
{
LOG
(
LS_WARNING
)
<
<
"
Dropping
a
remote
candidate
because
its
ufrag
"
<
<
candidate
.
username
(
)
<
<
"
indicates
it
was
for
a
previous
generation
.
"
;
return
;
}
Candidate
new_remote_candidate
(
candidate
)
;
new_remote_candidate
.
set_generation
(
generation
)
;
if
(
remote_ice
(
)
)
{
if
(
candidate
.
username
(
)
.
empty
(
)
)
{
new_remote_candidate
.
set_username
(
remote_ice
(
)
-
>
ufrag
)
;
}
if
(
new_remote_candidate
.
username
(
)
=
=
remote_ice
(
)
-
>
ufrag
)
{
if
(
candidate
.
password
(
)
.
empty
(
)
)
{
new_remote_candidate
.
set_password
(
remote_ice
(
)
-
>
pwd
)
;
}
}
else
{
LOG
(
LS_WARNING
)
<
<
"
A
remote
candidate
arrives
with
an
unknown
ufrag
:
"
<
<
candidate
.
username
(
)
;
}
}
for
(
Connection
*
conn
:
connections_
)
{
conn
-
>
MaybeUpdatePeerReflexiveCandidate
(
new_remote_candidate
)
;
}
CreateConnections
(
new_remote_candidate
NULL
)
;
SortConnectionsAndUpdateState
(
)
;
}
void
P2PTransportChannel
:
:
RemoveRemoteCandidate
(
const
Candidate
&
cand_to_remove
)
{
auto
iter
=
std
:
:
remove_if
(
remote_candidates_
.
begin
(
)
remote_candidates_
.
end
(
)
[
cand_to_remove
]
(
const
Candidate
&
candidate
)
{
return
cand_to_remove
.
MatchesForRemoval
(
candidate
)
;
}
)
;
if
(
iter
!
=
remote_candidates_
.
end
(
)
)
{
LOG
(
LS_VERBOSE
)
<
<
"
Removed
remote
candidate
"
<
<
cand_to_remove
.
ToString
(
)
;
remote_candidates_
.
erase
(
iter
remote_candidates_
.
end
(
)
)
;
}
}
bool
P2PTransportChannel
:
:
CreateConnections
(
const
Candidate
&
remote_candidate
PortInterface
*
origin_port
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
if
(
!
origin_port
&
&
IsDuplicateRemoteCandidate
(
remote_candidate
)
)
{
return
true
;
}
bool
created
=
false
;
std
:
:
vector
<
PortInterface
*
>
:
:
reverse_iterator
it
;
for
(
it
=
ports_
.
rbegin
(
)
;
it
!
=
ports_
.
rend
(
)
;
+
+
it
)
{
if
(
CreateConnection
(
*
it
remote_candidate
origin_port
)
)
{
if
(
*
it
=
=
origin_port
)
created
=
true
;
}
}
if
(
(
origin_port
!
=
NULL
)
&
&
std
:
:
find
(
ports_
.
begin
(
)
ports_
.
end
(
)
origin_port
)
=
=
ports_
.
end
(
)
)
{
if
(
CreateConnection
(
origin_port
remote_candidate
origin_port
)
)
created
=
true
;
}
RememberRemoteCandidate
(
remote_candidate
origin_port
)
;
return
created
;
}
bool
P2PTransportChannel
:
:
CreateConnection
(
PortInterface
*
port
const
Candidate
&
remote_candidate
PortInterface
*
origin_port
)
{
if
(
!
port
-
>
SupportsProtocol
(
remote_candidate
.
protocol
(
)
)
)
{
return
false
;
}
Connection
*
connection
=
port
-
>
GetConnection
(
remote_candidate
.
address
(
)
)
;
if
(
connection
=
=
nullptr
|
|
connection
-
>
remote_candidate
(
)
.
generation
(
)
<
remote_candidate
.
generation
(
)
)
{
PortInterface
:
:
CandidateOrigin
origin
=
GetOrigin
(
port
origin_port
)
;
if
(
origin
=
=
PortInterface
:
:
ORIGIN_MESSAGE
&
&
incoming_only_
)
{
return
false
;
}
Connection
*
connection
=
port
-
>
CreateConnection
(
remote_candidate
origin
)
;
if
(
!
connection
)
{
return
false
;
}
AddConnection
(
connection
)
;
LOG_J
(
LS_INFO
this
)
<
<
"
Created
connection
with
origin
=
"
<
<
origin
<
<
"
(
"
<
<
connections_
.
size
(
)
<
<
"
total
)
"
;
return
true
;
}
if
(
!
remote_candidate
.
IsEquivalent
(
connection
-
>
remote_candidate
(
)
)
)
{
LOG
(
INFO
)
<
<
"
Attempt
to
change
a
remote
candidate
.
"
<
<
"
Existing
remote
candidate
:
"
<
<
connection
-
>
remote_candidate
(
)
.
ToString
(
)
<
<
"
New
remote
candidate
:
"
<
<
remote_candidate
.
ToString
(
)
;
}
return
false
;
}
bool
P2PTransportChannel
:
:
FindConnection
(
Connection
*
connection
)
const
{
std
:
:
vector
<
Connection
*
>
:
:
const_iterator
citer
=
std
:
:
find
(
connections_
.
begin
(
)
connections_
.
end
(
)
connection
)
;
return
citer
!
=
connections_
.
end
(
)
;
}
uint32_t
P2PTransportChannel
:
:
GetRemoteCandidateGeneration
(
const
Candidate
&
candidate
)
{
if
(
!
candidate
.
username
(
)
.
empty
(
)
)
{
uint32_t
generation
=
0
;
if
(
!
FindRemoteIceFromUfrag
(
candidate
.
username
(
)
&
generation
)
)
{
generation
=
static_cast
<
uint32_t
>
(
remote_ice_parameters_
.
size
(
)
)
;
}
return
generation
;
}
if
(
candidate
.
generation
(
)
>
0
)
{
return
candidate
.
generation
(
)
;
}
return
remote_ice_generation
(
)
;
}
bool
P2PTransportChannel
:
:
IsDuplicateRemoteCandidate
(
const
Candidate
&
candidate
)
{
for
(
size_t
i
=
0
;
i
<
remote_candidates_
.
size
(
)
;
+
+
i
)
{
if
(
remote_candidates_
[
i
]
.
IsEquivalent
(
candidate
)
)
{
return
true
;
}
}
return
false
;
}
void
P2PTransportChannel
:
:
RememberRemoteCandidate
(
const
Candidate
&
remote_candidate
PortInterface
*
origin_port
)
{
size_t
i
=
0
;
while
(
i
<
remote_candidates_
.
size
(
)
)
{
if
(
remote_candidates_
[
i
]
.
generation
(
)
<
remote_candidate
.
generation
(
)
)
{
LOG
(
INFO
)
<
<
"
Pruning
candidate
from
old
generation
:
"
<
<
remote_candidates_
[
i
]
.
address
(
)
.
ToSensitiveString
(
)
;
remote_candidates_
.
erase
(
remote_candidates_
.
begin
(
)
+
i
)
;
}
else
{
i
+
=
1
;
}
}
if
(
IsDuplicateRemoteCandidate
(
remote_candidate
)
)
{
LOG
(
INFO
)
<
<
"
Duplicate
candidate
:
"
<
<
remote_candidate
.
ToString
(
)
;
return
;
}
remote_candidates_
.
push_back
(
RemoteCandidate
(
remote_candidate
origin_port
)
)
;
}
int
P2PTransportChannel
:
:
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
OptionMap
:
:
iterator
it
=
options_
.
find
(
opt
)
;
if
(
it
=
=
options_
.
end
(
)
)
{
options_
.
insert
(
std
:
:
make_pair
(
opt
value
)
)
;
}
else
if
(
it
-
>
second
=
=
value
)
{
return
0
;
}
else
{
it
-
>
second
=
value
;
}
for
(
PortInterface
*
port
:
ports_
)
{
int
val
=
port
-
>
SetOption
(
opt
value
)
;
if
(
val
<
0
)
{
LOG
(
WARNING
)
<
<
"
SetOption
(
"
<
<
opt
<
<
"
"
<
<
value
<
<
"
)
failed
:
"
<
<
port
-
>
GetError
(
)
;
}
}
return
0
;
}
bool
P2PTransportChannel
:
:
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
const
auto
&
found
=
options_
.
find
(
opt
)
;
if
(
found
=
=
options_
.
end
(
)
)
{
return
false
;
}
*
value
=
found
-
>
second
;
return
true
;
}
int
P2PTransportChannel
:
:
SendPacket
(
const
char
*
data
size_t
len
const
rtc
:
:
PacketOptions
&
options
int
flags
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
if
(
flags
!
=
0
)
{
error_
=
EINVAL
;
return
-
1
;
}
if
(
!
ReadyToSend
(
selected_connection_
)
)
{
error_
=
ENOTCONN
;
return
-
1
;
}
last_sent_packet_id_
=
options
.
packet_id
;
int
sent
=
selected_connection_
-
>
Send
(
data
len
options
)
;
if
(
sent
<
=
0
)
{
RTC_DCHECK
(
sent
<
0
)
;
error_
=
selected_connection_
-
>
GetError
(
)
;
}
return
sent
;
}
bool
P2PTransportChannel
:
:
GetStats
(
ConnectionInfos
*
infos
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
infos
-
>
clear
(
)
;
for
(
Connection
*
connection
:
connections_
)
{
ConnectionInfo
info
=
connection
-
>
stats
(
)
;
info
.
best_connection
=
(
selected_connection_
=
=
connection
)
;
infos
-
>
push_back
(
std
:
:
move
(
info
)
)
;
connection
-
>
set_reported
(
true
)
;
}
return
true
;
}
rtc
:
:
DiffServCodePoint
P2PTransportChannel
:
:
DefaultDscpValue
(
)
const
{
OptionMap
:
:
const_iterator
it
=
options_
.
find
(
rtc
:
:
Socket
:
:
OPT_DSCP
)
;
if
(
it
=
=
options_
.
end
(
)
)
{
return
rtc
:
:
DSCP_NO_CHANGE
;
}
return
static_cast
<
rtc
:
:
DiffServCodePoint
>
(
it
-
>
second
)
;
}
void
P2PTransportChannel
:
:
UpdateConnectionStates
(
)
{
int64_t
now
=
rtc
:
:
TimeMillis
(
)
;
for
(
Connection
*
c
:
connections_
)
{
c
-
>
UpdateState
(
now
)
;
}
}
void
P2PTransportChannel
:
:
RequestSortAndStateUpdate
(
)
{
if
(
!
sort_dirty_
)
{
network_thread_
-
>
Post
(
RTC_FROM_HERE
this
MSG_SORT_AND_UPDATE_STATE
)
;
sort_dirty_
=
true
;
}
}
void
P2PTransportChannel
:
:
MaybeStartPinging
(
)
{
if
(
started_pinging_
)
{
return
;
}
int64_t
now
=
rtc
:
:
TimeMillis
(
)
;
if
(
std
:
:
any_of
(
connections_
.
begin
(
)
connections_
.
end
(
)
[
this
now
]
(
const
Connection
*
c
)
{
return
IsPingable
(
c
now
)
;
}
)
)
{
LOG_J
(
LS_INFO
this
)
<
<
"
Have
a
pingable
connection
for
the
first
time
;
"
<
<
"
starting
to
ping
.
"
;
thread
(
)
-
>
Post
(
RTC_FROM_HERE
this
MSG_CHECK_AND_PING
)
;
thread
(
)
-
>
PostDelayed
(
RTC_FROM_HERE
*
config_
.
regather_on_failed_networks_interval
this
MSG_REGATHER_ON_FAILED_NETWORKS
)
;
started_pinging_
=
true
;
}
}
int
P2PTransportChannel
:
:
CompareConnectionStates
(
const
Connection
*
a
const
Connection
*
b
rtc
:
:
Optional
<
int64_t
>
receiving_unchanged_threshold
bool
*
missed_receiving_unchanged_threshold
)
const
{
bool
a_writable
=
a
-
>
writable
(
)
|
|
PresumedWritable
(
a
)
;
bool
b_writable
=
b
-
>
writable
(
)
|
|
PresumedWritable
(
b
)
;
if
(
a_writable
&
&
!
b_writable
)
{
return
a_is_better
;
}
if
(
!
a_writable
&
&
b_writable
)
{
return
b_is_better
;
}
if
(
a
-
>
write_state
(
)
<
b
-
>
write_state
(
)
)
{
return
a_is_better
;
}
if
(
b
-
>
write_state
(
)
<
a
-
>
write_state
(
)
)
{
return
b_is_better
;
}
if
(
a
-
>
receiving
(
)
&
&
!
b
-
>
receiving
(
)
)
{
return
a_is_better
;
}
if
(
!
a
-
>
receiving
(
)
&
&
b
-
>
receiving
(
)
)
{
if
(
!
receiving_unchanged_threshold
|
|
(
a
-
>
receiving_unchanged_since
(
)
<
=
*
receiving_unchanged_threshold
&
&
b
-
>
receiving_unchanged_since
(
)
<
=
*
receiving_unchanged_threshold
)
)
{
return
b_is_better
;
}
*
missed_receiving_unchanged_threshold
=
true
;
}
if
(
a
-
>
write_state
(
)
=
=
Connection
:
:
STATE_WRITABLE
&
&
b
-
>
write_state
(
)
=
=
Connection
:
:
STATE_WRITABLE
)
{
if
(
a
-
>
connected
(
)
&
&
!
b
-
>
connected
(
)
)
{
return
a_is_better
;
}
if
(
!
a
-
>
connected
(
)
&
&
b
-
>
connected
(
)
)
{
return
b_is_better
;
}
}
return
0
;
}
int
P2PTransportChannel
:
:
CompareConnectionCandidates
(
const
Connection
*
a
const
Connection
*
b
)
const
{
uint32_t
a_cost
=
a
-
>
ComputeNetworkCost
(
)
;
uint32_t
b_cost
=
b
-
>
ComputeNetworkCost
(
)
;
if
(
a_cost
<
b_cost
)
{
return
a_is_better
;
}
if
(
a_cost
>
b_cost
)
{
return
b_is_better
;
}
if
(
a
-
>
priority
(
)
>
b
-
>
priority
(
)
)
{
return
a_is_better
;
}
if
(
a
-
>
priority
(
)
<
b
-
>
priority
(
)
)
{
return
b_is_better
;
}
return
(
a
-
>
remote_candidate
(
)
.
generation
(
)
+
a
-
>
port
(
)
-
>
generation
(
)
)
-
(
b
-
>
remote_candidate
(
)
.
generation
(
)
+
b
-
>
port
(
)
-
>
generation
(
)
)
;
}
int
P2PTransportChannel
:
:
CompareConnections
(
const
Connection
*
a
const
Connection
*
b
rtc
:
:
Optional
<
int64_t
>
receiving_unchanged_threshold
bool
*
missed_receiving_unchanged_threshold
)
const
{
RTC_CHECK
(
a
!
=
nullptr
)
;
RTC_CHECK
(
b
!
=
nullptr
)
;
int
state_cmp
=
CompareConnectionStates
(
a
b
receiving_unchanged_threshold
missed_receiving_unchanged_threshold
)
;
if
(
state_cmp
!
=
0
)
{
return
state_cmp
;
}
if
(
ice_role_
=
=
ICEROLE_CONTROLLED
)
{
if
(
a
-
>
remote_nomination
(
)
>
b
-
>
remote_nomination
(
)
)
{
return
a_is_better
;
}
if
(
a
-
>
remote_nomination
(
)
<
b
-
>
remote_nomination
(
)
)
{
return
b_is_better
;
}
if
(
a
-
>
last_data_received
(
)
>
b
-
>
last_data_received
(
)
)
{
return
a_is_better
;
}
if
(
a
-
>
last_data_received
(
)
<
b
-
>
last_data_received
(
)
)
{
return
b_is_better
;
}
}
return
CompareConnectionCandidates
(
a
b
)
;
}
bool
P2PTransportChannel
:
:
PresumedWritable
(
const
Connection
*
conn
)
const
{
return
(
conn
-
>
write_state
(
)
=
=
Connection
:
:
STATE_WRITE_INIT
&
&
config_
.
presume_writable_when_fully_relayed
&
&
conn
-
>
local_candidate
(
)
.
type
(
)
=
=
RELAY_PORT_TYPE
&
&
(
conn
-
>
remote_candidate
(
)
.
type
(
)
=
=
RELAY_PORT_TYPE
|
|
conn
-
>
remote_candidate
(
)
.
type
(
)
=
=
PRFLX_PORT_TYPE
)
)
;
}
void
P2PTransportChannel
:
:
SortConnectionsAndUpdateState
(
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
UpdateConnectionStates
(
)
;
sort_dirty_
=
false
;
std
:
:
stable_sort
(
connections_
.
begin
(
)
connections_
.
end
(
)
[
this
]
(
const
Connection
*
a
const
Connection
*
b
)
{
int
cmp
=
CompareConnections
(
a
b
rtc
:
:
Optional
<
int64_t
>
(
)
nullptr
)
;
if
(
cmp
!
=
0
)
{
return
cmp
>
0
;
}
return
a
-
>
rtt
(
)
<
b
-
>
rtt
(
)
;
}
)
;
LOG
(
LS_VERBOSE
)
<
<
"
Sorting
"
<
<
connections_
.
size
(
)
<
<
"
available
connections
:
"
;
for
(
size_t
i
=
0
;
i
<
connections_
.
size
(
)
;
+
+
i
)
{
LOG
(
LS_VERBOSE
)
<
<
connections_
[
i
]
-
>
ToString
(
)
;
}
Connection
*
top_connection
=
(
connections_
.
size
(
)
>
0
)
?
connections_
[
0
]
:
nullptr
;
MaybeSwitchSelectedConnection
(
top_connection
"
sorting
"
)
;
if
(
ice_role_
=
=
ICEROLE_CONTROLLING
|
|
(
selected_connection_
&
&
selected_connection_
-
>
nominated
(
)
)
)
{
PruneConnections
(
)
;
}
bool
all_connections_timedout
=
true
;
for
(
size_t
i
=
0
;
i
<
connections_
.
size
(
)
;
+
+
i
)
{
if
(
connections_
[
i
]
-
>
write_state
(
)
!
=
Connection
:
:
STATE_WRITE_TIMEOUT
)
{
all_connections_timedout
=
false
;
break
;
}
}
if
(
all_connections_timedout
)
{
HandleAllTimedOut
(
)
;
}
UpdateState
(
)
;
MaybeStartPinging
(
)
;
}
std
:
:
map
<
rtc
:
:
Network
*
Connection
*
>
P2PTransportChannel
:
:
GetBestConnectionByNetwork
(
)
const
{
std
:
:
map
<
rtc
:
:
Network
*
Connection
*
>
best_connection_by_network
;
if
(
selected_connection_
)
{
best_connection_by_network
[
selected_connection_
-
>
port
(
)
-
>
Network
(
)
]
=
selected_connection_
;
}
for
(
Connection
*
conn
:
connections_
)
{
rtc
:
:
Network
*
network
=
conn
-
>
port
(
)
-
>
Network
(
)
;
best_connection_by_network
.
insert
(
std
:
:
make_pair
(
network
conn
)
)
;
}
return
best_connection_by_network
;
}
std
:
:
vector
<
Connection
*
>
P2PTransportChannel
:
:
GetBestWritableConnectionPerNetwork
(
)
const
{
std
:
:
vector
<
Connection
*
>
connections
;
for
(
auto
kv
:
GetBestConnectionByNetwork
(
)
)
{
Connection
*
conn
=
kv
.
second
;
if
(
conn
-
>
writable
(
)
&
&
conn
-
>
connected
(
)
)
{
connections
.
push_back
(
conn
)
;
}
}
return
connections
;
}
void
P2PTransportChannel
:
:
PruneConnections
(
)
{
auto
best_connection_by_network
=
GetBestConnectionByNetwork
(
)
;
for
(
Connection
*
conn
:
connections_
)
{
Connection
*
best_conn_on_network
=
best_connection_by_network
[
conn
-
>
port
(
)
-
>
Network
(
)
]
;
if
(
best_conn_on_network
&
&
conn
!
=
best_conn_on_network
&
&
!
best_conn_on_network
-
>
weak
(
)
&
&
CompareConnectionCandidates
(
best_conn_on_network
conn
)
>
=
0
)
{
conn
-
>
Prune
(
)
;
}
}
}
void
P2PTransportChannel
:
:
SwitchSelectedConnection
(
Connection
*
conn
)
{
Connection
*
old_selected_connection
=
selected_connection_
;
selected_connection_
=
conn
;
if
(
selected_connection_
)
{
+
+
nomination_
;
if
(
old_selected_connection
)
{
LOG_J
(
LS_INFO
this
)
<
<
"
Previous
selected
connection
:
"
<
<
old_selected_connection
-
>
ToString
(
)
;
}
LOG_J
(
LS_INFO
this
)
<
<
"
New
selected
connection
:
"
<
<
selected_connection_
-
>
ToString
(
)
;
SignalRouteChange
(
this
selected_connection_
-
>
remote_candidate
(
)
)
;
if
(
selected_connection_
-
>
writable
(
)
|
|
PresumedWritable
(
selected_connection_
)
)
{
SignalReadyToSend
(
this
)
;
}
}
else
{
LOG_J
(
LS_INFO
this
)
<
<
"
No
selected
connection
"
;
}
SignalSelectedCandidatePairChanged
(
this
selected_connection_
last_sent_packet_id_
ReadyToSend
(
selected_connection_
)
)
;
}
void
P2PTransportChannel
:
:
UpdateState
(
)
{
IceTransportState
state
=
ComputeState
(
)
;
if
(
state_
!
=
state
)
{
LOG_J
(
LS_INFO
this
)
<
<
"
Transport
channel
state
changed
from
"
<
<
static_cast
<
int
>
(
state_
)
<
<
"
to
"
<
<
static_cast
<
int
>
(
state
)
;
switch
(
state_
)
{
case
IceTransportState
:
:
STATE_INIT
:
RTC_DCHECK
(
state
=
=
IceTransportState
:
:
STATE_CONNECTING
|
|
state
=
=
IceTransportState
:
:
STATE_COMPLETED
)
;
break
;
case
IceTransportState
:
:
STATE_CONNECTING
:
RTC_DCHECK
(
state
=
=
IceTransportState
:
:
STATE_COMPLETED
|
|
state
=
=
IceTransportState
:
:
STATE_FAILED
)
;
break
;
case
IceTransportState
:
:
STATE_COMPLETED
:
RTC_DCHECK
(
state
=
=
IceTransportState
:
:
STATE_CONNECTING
|
|
state
=
=
IceTransportState
:
:
STATE_FAILED
)
;
break
;
case
IceTransportState
:
:
STATE_FAILED
:
RTC_DCHECK
(
state
=
=
IceTransportState
:
:
STATE_CONNECTING
|
|
state
=
=
IceTransportState
:
:
STATE_COMPLETED
)
;
break
;
default
:
RTC_NOTREACHED
(
)
;
break
;
}
state_
=
state
;
SignalStateChanged
(
this
)
;
}
bool
writable
=
selected_connection_
&
&
(
selected_connection_
-
>
writable
(
)
|
|
PresumedWritable
(
selected_connection_
)
)
;
set_writable
(
writable
)
;
bool
receiving
=
false
;
for
(
const
Connection
*
connection
:
connections_
)
{
if
(
connection
-
>
receiving
(
)
)
{
receiving
=
true
;
break
;
}
}
set_receiving
(
receiving
)
;
}
void
P2PTransportChannel
:
:
MaybeStopPortAllocatorSessions
(
)
{
if
(
!
IsGettingPorts
(
)
)
{
return
;
}
for
(
const
auto
&
session
:
allocator_sessions_
)
{
if
(
session
-
>
IsStopped
(
)
)
{
continue
;
}
if
(
config_
.
gather_continually
(
)
&
&
session
=
=
allocator_sessions_
.
back
(
)
)
{
session
-
>
ClearGettingPorts
(
)
;
}
else
{
session
-
>
StopGettingPorts
(
)
;
}
}
}
void
P2PTransportChannel
:
:
HandleAllTimedOut
(
)
{
for
(
Connection
*
connection
:
connections_
)
{
connection
-
>
Destroy
(
)
;
}
}
bool
P2PTransportChannel
:
:
weak
(
)
const
{
return
!
selected_connection_
|
|
selected_connection_
-
>
weak
(
)
;
}
bool
P2PTransportChannel
:
:
ReadyToSend
(
Connection
*
connection
)
const
{
return
connection
!
=
nullptr
&
&
(
connection
-
>
writable
(
)
|
|
connection
-
>
write_state
(
)
=
=
Connection
:
:
STATE_WRITE_UNRELIABLE
|
|
PresumedWritable
(
connection
)
)
;
}
void
P2PTransportChannel
:
:
OnMessage
(
rtc
:
:
Message
*
pmsg
)
{
switch
(
pmsg
-
>
message_id
)
{
case
MSG_SORT_AND_UPDATE_STATE
:
SortConnectionsAndUpdateState
(
)
;
break
;
case
MSG_CHECK_AND_PING
:
OnCheckAndPing
(
)
;
break
;
case
MSG_REGATHER_ON_FAILED_NETWORKS
:
OnRegatherOnFailedNetworks
(
)
;
break
;
default
:
RTC_NOTREACHED
(
)
;
break
;
}
}
void
P2PTransportChannel
:
:
OnCheckAndPing
(
)
{
UpdateConnectionStates
(
)
;
bool
need_more_pings_at_weak_interval
=
std
:
:
any_of
(
connections_
.
begin
(
)
connections_
.
end
(
)
[
]
(
Connection
*
conn
)
{
return
conn
-
>
active
(
)
&
&
conn
-
>
num_pings_sent
(
)
<
MIN_PINGS_AT_WEAK_PING_INTERVAL
;
}
)
;
int
ping_interval
=
(
weak
(
)
|
|
need_more_pings_at_weak_interval
)
?
weak_ping_interval_
:
STRONG_PING_INTERVAL
;
if
(
rtc
:
:
TimeMillis
(
)
>
=
last_ping_sent_ms_
+
ping_interval
)
{
Connection
*
conn
=
FindNextPingableConnection
(
)
;
if
(
conn
)
{
PingConnection
(
conn
)
;
MarkConnectionPinged
(
conn
)
;
}
}
int
delay
=
std
:
:
min
(
ping_interval
check_receiving_interval_
)
;
thread
(
)
-
>
PostDelayed
(
RTC_FROM_HERE
delay
this
MSG_CHECK_AND_PING
)
;
}
bool
P2PTransportChannel
:
:
IsBackupConnection
(
const
Connection
*
conn
)
const
{
return
state_
=
=
IceTransportState
:
:
STATE_COMPLETED
&
&
conn
!
=
selected_connection_
&
&
conn
-
>
active
(
)
;
}
bool
P2PTransportChannel
:
:
IsPingable
(
const
Connection
*
conn
int64_t
now
)
const
{
const
Candidate
&
remote
=
conn
-
>
remote_candidate
(
)
;
RTC_DCHECK
(
!
remote
.
username
(
)
.
empty
(
)
)
;
if
(
remote
.
username
(
)
.
empty
(
)
|
|
remote
.
password
(
)
.
empty
(
)
)
{
return
false
;
}
if
(
conn
-
>
state
(
)
=
=
IceCandidatePairState
:
:
FAILED
)
{
return
false
;
}
if
(
!
conn
-
>
connected
(
)
&
&
!
conn
-
>
writable
(
)
)
{
return
false
;
}
if
(
weak
(
)
)
{
return
true
;
}
if
(
IsBackupConnection
(
conn
)
)
{
return
conn
-
>
rtt_samples
(
)
=
=
0
|
|
(
now
>
=
conn
-
>
last_ping_response_received
(
)
+
config_
.
backup_connection_ping_interval
)
;
}
if
(
!
conn
-
>
active
(
)
)
{
return
false
;
}
if
(
!
conn
-
>
writable
(
)
)
{
return
true
;
}
return
WritableConnectionPastPingInterval
(
conn
now
)
;
}
bool
P2PTransportChannel
:
:
WritableConnectionPastPingInterval
(
const
Connection
*
conn
int64_t
now
)
const
{
int
interval
=
CalculateActiveWritablePingInterval
(
conn
now
)
;
return
conn
-
>
last_ping_sent
(
)
+
interval
<
=
now
;
}
int
P2PTransportChannel
:
:
CalculateActiveWritablePingInterval
(
const
Connection
*
conn
int64_t
now
)
const
{
if
(
conn
-
>
num_pings_sent
(
)
<
MIN_PINGS_AT_WEAK_PING_INTERVAL
)
{
return
weak_ping_interval_
;
}
int
stable_interval
=
config_
.
stable_writable_connection_ping_interval
;
int
weak_or_stablizing_interval
=
std
:
:
min
(
stable_interval
WEAK_OR_STABILIZING_WRITABLE_CONNECTION_PING_INTERVAL
)
;
return
(
!
weak
(
)
&
&
conn
-
>
stable
(
now
)
)
?
stable_interval
:
weak_or_stablizing_interval
;
}
Connection
*
P2PTransportChannel
:
:
FindNextPingableConnection
(
)
{
int64_t
now
=
rtc
:
:
TimeMillis
(
)
;
if
(
selected_connection_
&
&
selected_connection_
-
>
connected
(
)
&
&
selected_connection_
-
>
writable
(
)
&
&
WritableConnectionPastPingInterval
(
selected_connection_
now
)
)
{
return
selected_connection_
;
}
if
(
weak
(
)
)
{
auto
selectable_connections
=
GetBestWritableConnectionPerNetwork
(
)
;
std
:
:
vector
<
Connection
*
>
pingable_selectable_connections
;
std
:
:
copy_if
(
selectable_connections
.
begin
(
)
selectable_connections
.
end
(
)
std
:
:
back_inserter
(
pingable_selectable_connections
)
[
this
now
]
(
Connection
*
conn
)
{
return
WritableConnectionPastPingInterval
(
conn
now
)
;
}
)
;
auto
iter
=
std
:
:
min_element
(
pingable_selectable_connections
.
begin
(
)
pingable_selectable_connections
.
end
(
)
[
]
(
Connection
*
conn1
Connection
*
conn2
)
{
return
conn1
-
>
last_ping_sent
(
)
<
conn2
-
>
last_ping_sent
(
)
;
}
)
;
if
(
iter
!
=
pingable_selectable_connections
.
end
(
)
)
{
return
*
iter
;
}
}
Connection
*
oldest_triggered_check
=
FindOldestConnectionNeedingTriggeredCheck
(
now
)
;
if
(
oldest_triggered_check
)
{
return
oldest_triggered_check
;
}
RTC_CHECK
(
connections_
.
size
(
)
=
=
pinged_connections_
.
size
(
)
+
unpinged_connections_
.
size
(
)
)
;
if
(
std
:
:
find_if
(
unpinged_connections_
.
begin
(
)
unpinged_connections_
.
end
(
)
[
this
now
]
(
Connection
*
conn
)
{
return
this
-
>
IsPingable
(
conn
now
)
;
}
)
=
=
unpinged_connections_
.
end
(
)
)
{
unpinged_connections_
.
insert
(
pinged_connections_
.
begin
(
)
pinged_connections_
.
end
(
)
)
;
pinged_connections_
.
clear
(
)
;
}
std
:
:
vector
<
Connection
*
>
pingable_connections
;
std
:
:
copy_if
(
unpinged_connections_
.
begin
(
)
unpinged_connections_
.
end
(
)
std
:
:
back_inserter
(
pingable_connections
)
[
this
now
]
(
Connection
*
conn
)
{
return
IsPingable
(
conn
now
)
;
}
)
;
auto
iter
=
std
:
:
max_element
(
pingable_connections
.
begin
(
)
pingable_connections
.
end
(
)
[
this
]
(
Connection
*
conn1
Connection
*
conn2
)
{
return
MorePingable
(
conn1
conn2
)
=
=
conn2
;
}
)
;
if
(
iter
!
=
pingable_connections
.
end
(
)
)
{
return
*
iter
;
}
return
nullptr
;
}
void
P2PTransportChannel
:
:
MarkConnectionPinged
(
Connection
*
conn
)
{
if
(
conn
&
&
pinged_connections_
.
insert
(
conn
)
.
second
)
{
unpinged_connections_
.
erase
(
conn
)
;
}
}
void
P2PTransportChannel
:
:
PingConnection
(
Connection
*
conn
)
{
bool
use_candidate_attr
=
false
;
uint32_t
nomination
=
0
;
if
(
ice_role_
=
=
ICEROLE_CONTROLLING
)
{
bool
renomination_supported
=
ice_parameters_
.
renomination
&
&
!
remote_ice_parameters_
.
empty
(
)
&
&
remote_ice_parameters_
.
back
(
)
.
renomination
;
if
(
renomination_supported
)
{
nomination
=
GetNominationAttr
(
conn
)
;
}
else
{
use_candidate_attr
=
GetUseCandidateAttr
(
conn
config_
.
default_nomination_mode
)
;
}
}
conn
-
>
set_nomination
(
nomination
)
;
conn
-
>
set_use_candidate_attr
(
use_candidate_attr
)
;
last_ping_sent_ms_
=
rtc
:
:
TimeMillis
(
)
;
conn
-
>
Ping
(
last_ping_sent_ms_
)
;
}
uint32_t
P2PTransportChannel
:
:
GetNominationAttr
(
Connection
*
conn
)
const
{
return
(
conn
=
=
selected_connection_
)
?
nomination_
:
0
;
}
bool
P2PTransportChannel
:
:
GetUseCandidateAttr
(
Connection
*
conn
NominationMode
mode
)
const
{
switch
(
mode
)
{
case
NominationMode
:
:
REGULAR
:
return
false
;
case
NominationMode
:
:
AGGRESSIVE
:
if
(
remote_ice_mode_
=
=
ICEMODE_LITE
)
{
return
GetUseCandidateAttr
(
conn
NominationMode
:
:
REGULAR
)
;
}
return
true
;
case
NominationMode
:
:
SEMI_AGGRESSIVE
:
{
bool
selected
=
conn
=
=
selected_connection_
;
if
(
remote_ice_mode_
=
=
ICEMODE_LITE
)
{
return
selected
&
&
conn
-
>
writable
(
)
;
}
bool
better_than_selected
=
!
selected_connection_
|
|
!
selected_connection_
-
>
writable
(
)
|
|
CompareConnectionCandidates
(
selected_connection_
conn
)
<
0
;
return
selected
|
|
better_than_selected
;
}
default
:
RTC_NOTREACHED
(
)
;
return
false
;
}
}
void
P2PTransportChannel
:
:
OnConnectionStateChange
(
Connection
*
connection
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
bool
strongly_connected
=
!
connection
-
>
weak
(
)
;
bool
latest_generation
=
connection
-
>
local_candidate
(
)
.
generation
(
)
>
=
allocator_session
(
)
-
>
generation
(
)
;
if
(
strongly_connected
&
&
latest_generation
)
{
MaybeStopPortAllocatorSessions
(
)
;
}
RequestSortAndStateUpdate
(
)
;
}
void
P2PTransportChannel
:
:
OnConnectionDestroyed
(
Connection
*
connection
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
std
:
:
vector
<
Connection
*
>
:
:
iterator
iter
=
std
:
:
find
(
connections_
.
begin
(
)
connections_
.
end
(
)
connection
)
;
RTC_DCHECK
(
iter
!
=
connections_
.
end
(
)
)
;
pinged_connections_
.
erase
(
*
iter
)
;
unpinged_connections_
.
erase
(
*
iter
)
;
connections_
.
erase
(
iter
)
;
LOG_J
(
LS_INFO
this
)
<
<
"
Removed
connection
"
<
<
std
:
:
hex
<
<
connection
<
<
std
:
:
dec
<
<
"
(
"
<
<
connections_
.
size
(
)
<
<
"
remaining
)
"
;
if
(
selected_connection_
=
=
connection
)
{
LOG
(
LS_INFO
)
<
<
"
Selected
connection
destroyed
.
Will
choose
a
new
one
.
"
;
SwitchSelectedConnection
(
nullptr
)
;
RequestSortAndStateUpdate
(
)
;
}
else
{
UpdateState
(
)
;
}
}
void
P2PTransportChannel
:
:
OnPortDestroyed
(
PortInterface
*
port
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
ports_
.
erase
(
std
:
:
remove
(
ports_
.
begin
(
)
ports_
.
end
(
)
port
)
ports_
.
end
(
)
)
;
pruned_ports_
.
erase
(
std
:
:
remove
(
pruned_ports_
.
begin
(
)
pruned_ports_
.
end
(
)
port
)
pruned_ports_
.
end
(
)
)
;
LOG
(
INFO
)
<
<
"
Removed
port
because
it
is
destroyed
:
"
<
<
ports_
.
size
(
)
<
<
"
remaining
"
;
}
void
P2PTransportChannel
:
:
OnPortsPruned
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
PortInterface
*
>
&
ports
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
for
(
PortInterface
*
port
:
ports
)
{
if
(
PrunePort
(
port
)
)
{
LOG
(
INFO
)
<
<
"
Removed
port
:
"
<
<
port
-
>
ToString
(
)
<
<
"
"
<
<
ports_
.
size
(
)
<
<
"
remaining
"
;
}
}
}
void
P2PTransportChannel
:
:
OnCandidatesRemoved
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
Candidate
>
&
candidates
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
if
(
!
config_
.
gather_continually
(
)
|
|
session
!
=
allocator_session
(
)
)
{
return
;
}
std
:
:
vector
<
Candidate
>
candidates_to_remove
;
for
(
Candidate
candidate
:
candidates
)
{
candidate
.
set_transport_name
(
transport_name
(
)
)
;
candidates_to_remove
.
push_back
(
candidate
)
;
}
SignalCandidatesRemoved
(
this
candidates_to_remove
)
;
}
void
P2PTransportChannel
:
:
OnRegatherOnFailedNetworks
(
)
{
if
(
!
allocator_sessions_
.
empty
(
)
&
&
allocator_session
(
)
-
>
IsCleared
(
)
)
{
allocator_session
(
)
-
>
RegatherOnFailedNetworks
(
)
;
}
thread
(
)
-
>
PostDelayed
(
RTC_FROM_HERE
*
config_
.
regather_on_failed_networks_interval
this
MSG_REGATHER_ON_FAILED_NETWORKS
)
;
}
void
P2PTransportChannel
:
:
PruneAllPorts
(
)
{
pruned_ports_
.
insert
(
pruned_ports_
.
end
(
)
ports_
.
begin
(
)
ports_
.
end
(
)
)
;
ports_
.
clear
(
)
;
}
bool
P2PTransportChannel
:
:
PrunePort
(
PortInterface
*
port
)
{
auto
it
=
std
:
:
find
(
ports_
.
begin
(
)
ports_
.
end
(
)
port
)
;
if
(
it
=
=
ports_
.
end
(
)
)
{
return
false
;
}
ports_
.
erase
(
it
)
;
pruned_ports_
.
push_back
(
port
)
;
return
true
;
}
void
P2PTransportChannel
:
:
OnReadPacket
(
Connection
*
connection
const
char
*
data
size_t
len
const
rtc
:
:
PacketTime
&
packet_time
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
if
(
!
FindConnection
(
connection
)
)
return
;
SignalReadPacket
(
this
data
len
packet_time
0
)
;
if
(
ice_role_
=
=
ICEROLE_CONTROLLED
)
{
MaybeSwitchSelectedConnection
(
connection
"
data
received
"
)
;
}
}
void
P2PTransportChannel
:
:
OnSentPacket
(
const
rtc
:
:
SentPacket
&
sent_packet
)
{
RTC_DCHECK
(
network_thread_
=
=
rtc
:
:
Thread
:
:
Current
(
)
)
;
SignalSentPacket
(
this
sent_packet
)
;
}
void
P2PTransportChannel
:
:
OnReadyToSend
(
Connection
*
connection
)
{
if
(
connection
=
=
selected_connection_
&
&
writable
(
)
)
{
SignalReadyToSend
(
this
)
;
}
}
Connection
*
P2PTransportChannel
:
:
FindOldestConnectionNeedingTriggeredCheck
(
int64_t
now
)
{
Connection
*
oldest_needing_triggered_check
=
nullptr
;
for
(
auto
conn
:
connections_
)
{
if
(
!
IsPingable
(
conn
now
)
)
{
continue
;
}
bool
needs_triggered_check
=
(
!
conn
-
>
writable
(
)
&
&
conn
-
>
last_ping_received
(
)
>
conn
-
>
last_ping_sent
(
)
)
;
if
(
needs_triggered_check
&
&
(
!
oldest_needing_triggered_check
|
|
(
conn
-
>
last_ping_received
(
)
<
oldest_needing_triggered_check
-
>
last_ping_received
(
)
)
)
)
{
oldest_needing_triggered_check
=
conn
;
}
}
if
(
oldest_needing_triggered_check
)
{
LOG
(
LS_INFO
)
<
<
"
Selecting
connection
for
triggered
check
:
"
<
<
oldest_needing_triggered_check
-
>
ToString
(
)
;
}
return
oldest_needing_triggered_check
;
}
Connection
*
P2PTransportChannel
:
:
MostLikelyToWork
(
Connection
*
conn1
Connection
*
conn2
)
{
bool
rr1
=
IsRelayRelay
(
conn1
)
;
bool
rr2
=
IsRelayRelay
(
conn2
)
;
if
(
rr1
&
&
!
rr2
)
{
return
conn1
;
}
else
if
(
rr2
&
&
!
rr1
)
{
return
conn2
;
}
else
if
(
rr1
&
&
rr2
)
{
bool
udp1
=
IsUdp
(
conn1
)
;
bool
udp2
=
IsUdp
(
conn2
)
;
if
(
udp1
&
&
!
udp2
)
{
return
conn1
;
}
else
if
(
udp2
&
&
udp1
)
{
return
conn2
;
}
}
return
nullptr
;
}
Connection
*
P2PTransportChannel
:
:
LeastRecentlyPinged
(
Connection
*
conn1
Connection
*
conn2
)
{
if
(
conn1
-
>
last_ping_sent
(
)
<
conn2
-
>
last_ping_sent
(
)
)
{
return
conn1
;
}
if
(
conn1
-
>
last_ping_sent
(
)
>
conn2
-
>
last_ping_sent
(
)
)
{
return
conn2
;
}
return
nullptr
;
}
Connection
*
P2PTransportChannel
:
:
MorePingable
(
Connection
*
conn1
Connection
*
conn2
)
{
RTC_DCHECK
(
conn1
!
=
conn2
)
;
if
(
config_
.
prioritize_most_likely_candidate_pairs
)
{
Connection
*
most_likely_to_work_conn
=
MostLikelyToWork
(
conn1
conn2
)
;
if
(
most_likely_to_work_conn
)
{
return
most_likely_to_work_conn
;
}
}
Connection
*
least_recently_pinged_conn
=
LeastRecentlyPinged
(
conn1
conn2
)
;
if
(
least_recently_pinged_conn
)
{
return
least_recently_pinged_conn
;
}
return
*
(
std
:
:
find_if
(
connections_
.
begin
(
)
connections_
.
end
(
)
[
conn1
conn2
]
(
Connection
*
conn
)
{
return
conn
=
=
conn1
|
|
conn
=
=
conn2
;
}
)
)
;
}
void
P2PTransportChannel
:
:
set_writable
(
bool
writable
)
{
if
(
writable_
=
=
writable
)
{
return
;
}
LOG_J
(
LS_VERBOSE
this
)
<
<
"
set_writable
from
:
"
<
<
writable_
<
<
"
to
"
<
<
writable
;
writable_
=
writable
;
if
(
writable_
)
{
SignalReadyToSend
(
this
)
;
}
SignalWritableState
(
this
)
;
}
void
P2PTransportChannel
:
:
set_receiving
(
bool
receiving
)
{
if
(
receiving_
=
=
receiving
)
{
return
;
}
receiving_
=
receiving
;
SignalReceivingState
(
this
)
;
}
}
