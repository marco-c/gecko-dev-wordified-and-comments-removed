#
include
"
webrtc
/
p2p
/
base
/
asyncstuntcpsocket
.
h
"
#
include
<
string
.
h
>
#
include
"
webrtc
/
p2p
/
base
/
stun
.
h
"
#
include
"
webrtc
/
base
/
common
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
namespace
cricket
{
static
const
size_t
kMaxPacketSize
=
64
*
1024
;
typedef
uint16_t
PacketLength
;
static
const
size_t
kPacketLenSize
=
sizeof
(
PacketLength
)
;
static
const
size_t
kPacketLenOffset
=
2
;
static
const
size_t
kBufSize
=
kMaxPacketSize
+
kStunHeaderSize
;
static
const
size_t
kTurnChannelDataHdrSize
=
4
;
inline
bool
IsStunMessage
(
uint16_t
msg_type
)
{
return
(
msg_type
&
0xC000
)
?
false
:
true
;
}
AsyncStunTCPSocket
*
AsyncStunTCPSocket
:
:
Create
(
rtc
:
:
AsyncSocket
*
socket
const
rtc
:
:
SocketAddress
&
bind_address
const
rtc
:
:
SocketAddress
&
remote_address
)
{
return
new
AsyncStunTCPSocket
(
AsyncTCPSocketBase
:
:
ConnectSocket
(
socket
bind_address
remote_address
)
false
)
;
}
AsyncStunTCPSocket
:
:
AsyncStunTCPSocket
(
rtc
:
:
AsyncSocket
*
socket
bool
listen
)
:
rtc
:
:
AsyncTCPSocketBase
(
socket
listen
kBufSize
)
{
}
int
AsyncStunTCPSocket
:
:
Send
(
const
void
*
pv
size_t
cb
const
rtc
:
:
PacketOptions
&
options
)
{
if
(
cb
>
kBufSize
|
|
cb
<
kPacketLenSize
+
kPacketLenOffset
)
{
SetError
(
EMSGSIZE
)
;
return
-
1
;
}
if
(
!
IsOutBufferEmpty
(
)
)
return
static_cast
<
int
>
(
cb
)
;
int
pad_bytes
;
size_t
expected_pkt_len
=
GetExpectedLength
(
pv
cb
&
pad_bytes
)
;
if
(
cb
!
=
expected_pkt_len
)
return
-
1
;
AppendToOutBuffer
(
pv
cb
)
;
ASSERT
(
pad_bytes
<
4
)
;
char
padding
[
4
]
=
{
0
}
;
AppendToOutBuffer
(
padding
pad_bytes
)
;
int
res
=
FlushOutBuffer
(
)
;
if
(
res
<
=
0
)
{
ClearOutBuffer
(
)
;
return
res
;
}
return
static_cast
<
int
>
(
cb
)
;
}
void
AsyncStunTCPSocket
:
:
ProcessInput
(
char
*
data
size_t
*
len
)
{
rtc
:
:
SocketAddress
remote_addr
(
GetRemoteAddress
(
)
)
;
while
(
true
)
{
if
(
*
len
<
kPacketLenOffset
+
kPacketLenSize
)
return
;
int
pad_bytes
;
size_t
expected_pkt_len
=
GetExpectedLength
(
data
*
len
&
pad_bytes
)
;
size_t
actual_length
=
expected_pkt_len
+
pad_bytes
;
if
(
*
len
<
actual_length
)
{
return
;
}
SignalReadPacket
(
this
data
expected_pkt_len
remote_addr
rtc
:
:
CreatePacketTime
(
0
)
)
;
*
len
-
=
actual_length
;
if
(
*
len
>
0
)
{
memmove
(
data
data
+
actual_length
*
len
)
;
}
}
}
void
AsyncStunTCPSocket
:
:
HandleIncomingConnection
(
rtc
:
:
AsyncSocket
*
socket
)
{
SignalNewConnection
(
this
new
AsyncStunTCPSocket
(
socket
false
)
)
;
}
size_t
AsyncStunTCPSocket
:
:
GetExpectedLength
(
const
void
*
data
size_t
len
int
*
pad_bytes
)
{
*
pad_bytes
=
0
;
PacketLength
pkt_len
=
rtc
:
:
GetBE16
(
static_cast
<
const
char
*
>
(
data
)
+
kPacketLenOffset
)
;
size_t
expected_pkt_len
;
uint16_t
msg_type
=
rtc
:
:
GetBE16
(
data
)
;
if
(
IsStunMessage
(
msg_type
)
)
{
expected_pkt_len
=
kStunHeaderSize
+
pkt_len
;
}
else
{
expected_pkt_len
=
kTurnChannelDataHdrSize
+
pkt_len
;
if
(
expected_pkt_len
%
4
)
*
pad_bytes
=
4
-
(
expected_pkt_len
%
4
)
;
}
return
expected_pkt_len
;
}
}
