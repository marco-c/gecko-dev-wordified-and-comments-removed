#
ifndef
WEBRTC_P2P_BASE_TRANSPORT_H_
#
define
WEBRTC_P2P_BASE_TRANSPORT_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
constants
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
sessiondescription
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transportinfo
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
messagequeue
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
sslstreamadapter
.
h
"
namespace
rtc
{
class
Thread
;
}
namespace
cricket
{
class
PortAllocator
;
class
TransportChannel
;
class
TransportChannelImpl
;
typedef
std
:
:
vector
<
Candidate
>
Candidates
;
enum
TransportState
{
TRANSPORT_STATE_NONE
=
0
TRANSPORT_STATE_SOME
TRANSPORT_STATE_ALL
}
;
struct
ConnectionInfo
{
ConnectionInfo
(
)
:
best_connection
(
false
)
writable
(
false
)
readable
(
false
)
timeout
(
false
)
new_connection
(
false
)
rtt
(
0
)
sent_total_bytes
(
0
)
sent_bytes_second
(
0
)
sent_discarded_packets
(
0
)
sent_total_packets
(
0
)
recv_total_bytes
(
0
)
recv_bytes_second
(
0
)
key
(
NULL
)
{
}
bool
best_connection
;
bool
writable
;
bool
readable
;
bool
timeout
;
bool
new_connection
;
size_t
rtt
;
size_t
sent_total_bytes
;
size_t
sent_bytes_second
;
size_t
sent_discarded_packets
;
size_t
sent_total_packets
;
size_t
recv_total_bytes
;
size_t
recv_bytes_second
;
Candidate
local_candidate
;
Candidate
remote_candidate
;
void
*
key
;
}
;
typedef
std
:
:
vector
<
ConnectionInfo
>
ConnectionInfos
;
struct
TransportChannelStats
{
int
component
;
ConnectionInfos
connection_infos
;
std
:
:
string
srtp_cipher
;
std
:
:
string
ssl_cipher
;
}
;
typedef
std
:
:
vector
<
TransportChannelStats
>
TransportChannelStatsList
;
struct
TransportStats
{
std
:
:
string
content_name
;
TransportChannelStatsList
channel_stats
;
}
;
bool
BadTransportDescription
(
const
std
:
:
string
&
desc
std
:
:
string
*
err_desc
)
;
bool
IceCredentialsChanged
(
const
std
:
:
string
&
old_ufrag
const
std
:
:
string
&
old_pwd
const
std
:
:
string
&
new_ufrag
const
std
:
:
string
&
new_pwd
)
;
class
Transport
:
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
Transport
(
rtc
:
:
Thread
*
signaling_thread
rtc
:
:
Thread
*
worker_thread
const
std
:
:
string
&
content_name
const
std
:
:
string
&
type
PortAllocator
*
allocator
)
;
virtual
~
Transport
(
)
;
rtc
:
:
Thread
*
signaling_thread
(
)
{
return
signaling_thread_
;
}
rtc
:
:
Thread
*
worker_thread
(
)
{
return
worker_thread_
;
}
const
std
:
:
string
&
content_name
(
)
const
{
return
content_name_
;
}
const
std
:
:
string
&
type
(
)
const
{
return
type_
;
}
PortAllocator
*
port_allocator
(
)
{
return
allocator_
;
}
bool
readable
(
)
const
{
return
any_channels_readable
(
)
;
}
bool
writable
(
)
const
{
return
any_channels_writable
(
)
;
}
bool
was_writable
(
)
const
{
return
was_writable_
;
}
bool
any_channels_readable
(
)
const
{
return
(
readable_
=
=
TRANSPORT_STATE_SOME
|
|
readable_
=
=
TRANSPORT_STATE_ALL
)
;
}
bool
any_channels_writable
(
)
const
{
return
(
writable_
=
=
TRANSPORT_STATE_SOME
|
|
writable_
=
=
TRANSPORT_STATE_ALL
)
;
}
bool
all_channels_readable
(
)
const
{
return
(
readable_
=
=
TRANSPORT_STATE_ALL
)
;
}
bool
all_channels_writable
(
)
const
{
return
(
writable_
=
=
TRANSPORT_STATE_ALL
)
;
}
sigslot
:
:
signal1
<
Transport
*
>
SignalReadableState
;
sigslot
:
:
signal1
<
Transport
*
>
SignalWritableState
;
sigslot
:
:
signal1
<
Transport
*
>
SignalCompleted
;
sigslot
:
:
signal1
<
Transport
*
>
SignalFailed
;
bool
connect_requested
(
)
const
{
return
connect_requested_
;
}
void
SetIceRole
(
IceRole
role
)
;
IceRole
ice_role
(
)
const
{
return
ice_role_
;
}
void
SetIceTiebreaker
(
uint64
IceTiebreaker
)
{
tiebreaker_
=
IceTiebreaker
;
}
uint64
IceTiebreaker
(
)
{
return
tiebreaker_
;
}
void
SetIdentity
(
rtc
:
:
SSLIdentity
*
identity
)
;
bool
GetIdentity
(
rtc
:
:
SSLIdentity
*
*
identity
)
;
bool
GetRemoteCertificate
(
rtc
:
:
SSLCertificate
*
*
cert
)
;
TransportProtocol
protocol
(
)
const
{
return
protocol_
;
}
TransportChannelImpl
*
CreateChannel
(
int
component
)
;
TransportChannelImpl
*
GetChannel
(
int
component
)
;
bool
HasChannel
(
int
component
)
{
return
(
NULL
!
=
GetChannel
(
component
)
)
;
}
bool
HasChannels
(
)
;
void
DestroyChannel
(
int
component
)
;
bool
SetLocalTransportDescription
(
const
TransportDescription
&
description
ContentAction
action
std
:
:
string
*
error_desc
)
;
bool
SetRemoteTransportDescription
(
const
TransportDescription
&
description
ContentAction
action
std
:
:
string
*
error_desc
)
;
void
ConnectChannels
(
)
;
sigslot
:
:
signal1
<
Transport
*
>
SignalConnecting
;
void
ResetChannels
(
)
;
void
DestroyAllChannels
(
)
;
bool
GetStats
(
TransportStats
*
stats
)
;
sigslot
:
:
signal1
<
Transport
*
>
SignalRequestSignaling
;
void
OnSignalingReady
(
)
;
sigslot
:
:
signal2
<
Transport
*
const
std
:
:
vector
<
Candidate
>
&
>
SignalCandidatesReady
;
sigslot
:
:
signal1
<
Transport
*
>
SignalCandidatesAllocationDone
;
void
OnRemoteCandidates
(
const
std
:
:
vector
<
Candidate
>
&
candidates
)
;
virtual
bool
VerifyCandidate
(
const
Candidate
&
candidate
std
:
:
string
*
error
)
;
sigslot
:
:
signal3
<
Transport
*
int
const
Candidate
&
>
SignalRouteChange
;
sigslot
:
:
signal0
<
>
SignalRoleConflict
;
virtual
bool
GetSslRole
(
rtc
:
:
SSLRole
*
ssl_role
)
const
;
protected
:
virtual
TransportChannelImpl
*
CreateTransportChannel
(
int
component
)
=
0
;
virtual
void
DestroyTransportChannel
(
TransportChannelImpl
*
channel
)
=
0
;
virtual
void
OnTransportSignalingReady
(
)
{
}
const
TransportDescription
*
local_description
(
)
const
{
return
local_description_
.
get
(
)
;
}
const
TransportDescription
*
remote_description
(
)
const
{
return
remote_description_
.
get
(
)
;
}
virtual
void
SetIdentity_w
(
rtc
:
:
SSLIdentity
*
identity
)
{
}
virtual
bool
GetIdentity_w
(
rtc
:
:
SSLIdentity
*
*
identity
)
{
return
false
;
}
virtual
bool
ApplyLocalTransportDescription_w
(
TransportChannelImpl
*
channel
std
:
:
string
*
error_desc
)
;
virtual
bool
ApplyRemoteTransportDescription_w
(
TransportChannelImpl
*
ch
std
:
:
string
*
error_desc
)
;
virtual
bool
NegotiateTransportDescription_w
(
ContentAction
local_role
std
:
:
string
*
error_desc
)
;
virtual
bool
ApplyNegotiatedTransportDescription_w
(
TransportChannelImpl
*
channel
std
:
:
string
*
error_desc
)
;
virtual
bool
GetSslRole_w
(
rtc
:
:
SSLRole
*
ssl_role
)
const
{
return
false
;
}
private
:
struct
ChannelMapEntry
{
ChannelMapEntry
(
)
:
impl_
(
NULL
)
candidates_allocated_
(
false
)
ref_
(
0
)
{
}
explicit
ChannelMapEntry
(
TransportChannelImpl
*
impl
)
:
impl_
(
impl
)
candidates_allocated_
(
false
)
ref_
(
0
)
{
}
void
AddRef
(
)
{
+
+
ref_
;
}
void
DecRef
(
)
{
ASSERT
(
ref_
>
0
)
;
-
-
ref_
;
}
int
ref
(
)
const
{
return
ref_
;
}
TransportChannelImpl
*
get
(
)
const
{
return
impl_
;
}
TransportChannelImpl
*
operator
-
>
(
)
const
{
return
impl_
;
}
void
set_candidates_allocated
(
bool
status
)
{
candidates_allocated_
=
status
;
}
bool
candidates_allocated
(
)
const
{
return
candidates_allocated_
;
}
private
:
TransportChannelImpl
*
impl_
;
bool
candidates_allocated_
;
int
ref_
;
}
;
typedef
std
:
:
map
<
int
ChannelMapEntry
>
ChannelMap
;
void
OnChannelReadableState
(
TransportChannel
*
channel
)
;
void
OnChannelWritableState
(
TransportChannel
*
channel
)
;
void
OnChannelRequestSignaling
(
TransportChannelImpl
*
channel
)
;
void
OnRemoteCandidate
(
const
Candidate
&
candidate
)
;
void
OnChannelCandidateReady
(
TransportChannelImpl
*
channel
const
Candidate
&
candidate
)
;
void
OnChannelRouteChange
(
TransportChannel
*
channel
const
Candidate
&
remote_candidate
)
;
void
OnChannelCandidatesAllocationDone
(
TransportChannelImpl
*
channel
)
;
void
OnRoleConflict
(
TransportChannelImpl
*
channel
)
;
void
OnChannelConnectionRemoved
(
TransportChannelImpl
*
channel
)
;
void
OnMessage
(
rtc
:
:
Message
*
msg
)
;
TransportChannelImpl
*
CreateChannel_w
(
int
component
)
;
void
DestroyChannel_w
(
int
component
)
;
void
ConnectChannels_w
(
)
;
void
ResetChannels_w
(
)
;
void
DestroyAllChannels_w
(
)
;
void
OnRemoteCandidate_w
(
const
Candidate
&
candidate
)
;
void
OnChannelReadableState_s
(
)
;
void
OnChannelWritableState_s
(
)
;
void
OnChannelRequestSignaling_s
(
)
;
void
OnConnecting_s
(
)
;
void
OnChannelRouteChange_s
(
const
TransportChannel
*
channel
const
Candidate
&
remote_candidate
)
;
void
OnChannelCandidatesAllocationDone_s
(
)
;
typedef
void
(
TransportChannelImpl
:
:
*
TransportChannelFunc
)
(
)
;
void
CallChannels_w
(
TransportChannelFunc
func
)
;
TransportState
GetTransportState_s
(
bool
read
)
;
void
OnChannelCandidateReady_s
(
)
;
void
SetIceRole_w
(
IceRole
role
)
;
void
SetRemoteIceMode_w
(
IceMode
mode
)
;
bool
SetLocalTransportDescription_w
(
const
TransportDescription
&
desc
ContentAction
action
std
:
:
string
*
error_desc
)
;
bool
SetRemoteTransportDescription_w
(
const
TransportDescription
&
desc
ContentAction
action
std
:
:
string
*
error_desc
)
;
bool
GetStats_w
(
TransportStats
*
infos
)
;
bool
GetRemoteCertificate_w
(
rtc
:
:
SSLCertificate
*
*
cert
)
;
void
MaybeCompleted_w
(
)
;
rtc
:
:
Thread
*
const
signaling_thread_
;
rtc
:
:
Thread
*
const
worker_thread_
;
const
std
:
:
string
content_name_
;
const
std
:
:
string
type_
;
PortAllocator
*
const
allocator_
;
bool
destroyed_
;
TransportState
readable_
;
TransportState
writable_
;
bool
was_writable_
;
bool
connect_requested_
;
IceRole
ice_role_
;
uint64
tiebreaker_
;
TransportProtocol
protocol_
;
IceMode
remote_ice_mode_
;
rtc
:
:
scoped_ptr
<
TransportDescription
>
local_description_
;
rtc
:
:
scoped_ptr
<
TransportDescription
>
remote_description_
;
ChannelMap
channels_
;
std
:
:
vector
<
Candidate
>
ready_candidates_
;
rtc
:
:
CriticalSection
crit_
;
DISALLOW_EVIL_CONSTRUCTORS
(
Transport
)
;
}
;
TransportProtocol
TransportProtocolFromDescription
(
const
TransportDescription
*
desc
)
;
}
#
endif
