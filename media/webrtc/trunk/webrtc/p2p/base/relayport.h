#
ifndef
WEBRTC_P2P_BASE_RELAYPORT_H_
#
define
WEBRTC_P2P_BASE_RELAYPORT_H_
#
include
<
deque
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
webrtc
/
p2p
/
base
/
port
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
stunrequest
.
h
"
namespace
cricket
{
class
RelayEntry
;
class
RelayConnection
;
class
RelayPort
:
public
Port
{
public
:
typedef
std
:
:
pair
<
rtc
:
:
Socket
:
:
Option
int
>
OptionValue
;
static
RelayPort
*
Create
(
rtc
:
:
Thread
*
thread
rtc
:
:
PacketSocketFactory
*
factory
rtc
:
:
Network
*
network
const
rtc
:
:
IPAddress
&
ip
uint16_t
min_port
uint16_t
max_port
const
std
:
:
string
&
username
const
std
:
:
string
&
password
)
{
return
new
RelayPort
(
thread
factory
network
ip
min_port
max_port
username
password
)
;
}
~
RelayPort
(
)
override
;
void
AddServerAddress
(
const
ProtocolAddress
&
addr
)
;
void
AddExternalAddress
(
const
ProtocolAddress
&
addr
)
;
const
std
:
:
vector
<
OptionValue
>
&
options
(
)
const
{
return
options_
;
}
bool
HasMagicCookie
(
const
char
*
data
size_t
size
)
;
void
PrepareAddress
(
)
override
;
Connection
*
CreateConnection
(
const
Candidate
&
address
CandidateOrigin
origin
)
override
;
int
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
override
;
int
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
override
;
int
GetError
(
)
override
;
bool
SupportsProtocol
(
const
std
:
:
string
&
protocol
)
const
override
{
return
true
;
}
const
ProtocolAddress
*
ServerAddress
(
size_t
index
)
const
;
bool
IsReady
(
)
{
return
ready_
;
}
sigslot
:
:
signal1
<
const
ProtocolAddress
*
>
SignalConnectFailure
;
sigslot
:
:
signal1
<
const
ProtocolAddress
*
>
SignalSoftTimeout
;
protected
:
RelayPort
(
rtc
:
:
Thread
*
thread
rtc
:
:
PacketSocketFactory
*
factory
rtc
:
:
Network
*
const
rtc
:
:
IPAddress
&
ip
uint16_t
min_port
uint16_t
max_port
const
std
:
:
string
&
username
const
std
:
:
string
&
password
)
;
bool
Init
(
)
;
void
SetReady
(
)
;
int
SendTo
(
const
void
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
addr
const
rtc
:
:
PacketOptions
&
options
bool
payload
)
override
;
void
OnReadPacket
(
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
remote_addr
ProtocolType
proto
const
rtc
:
:
PacketTime
&
packet_time
)
;
void
OnSentPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
SentPacket
&
sent_packet
)
override
{
}
private
:
friend
class
RelayEntry
;
std
:
:
deque
<
ProtocolAddress
>
server_addr_
;
std
:
:
vector
<
ProtocolAddress
>
external_addr_
;
bool
ready_
;
std
:
:
vector
<
RelayEntry
*
>
entries_
;
std
:
:
vector
<
OptionValue
>
options_
;
int
error_
;
}
;
}
#
endif
