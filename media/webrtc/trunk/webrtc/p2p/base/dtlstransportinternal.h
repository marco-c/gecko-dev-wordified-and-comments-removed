#
ifndef
WEBRTC_P2P_BASE_DTLSTRANSPORTINTERNAL_H_
#
define
WEBRTC_P2P_BASE_DTLSTRANSPORTINTERNAL_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
sslstreamadapter
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
icetransportinternal
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
jseptransport
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
packettransportinterface
.
h
"
namespace
cricket
{
class
DtlsTransportInternal
:
public
rtc
:
:
PacketTransportInterface
{
public
:
virtual
~
DtlsTransportInternal
(
)
{
}
virtual
DtlsTransportState
dtls_state
(
)
const
=
0
;
virtual
const
std
:
:
string
&
transport_name
(
)
const
=
0
;
virtual
int
component
(
)
const
=
0
;
virtual
bool
IsDtlsActive
(
)
const
=
0
;
virtual
bool
GetSslRole
(
rtc
:
:
SSLRole
*
role
)
const
=
0
;
virtual
bool
SetSslRole
(
rtc
:
:
SSLRole
role
)
=
0
;
virtual
bool
SetSrtpCryptoSuites
(
const
std
:
:
vector
<
int
>
&
ciphers
)
=
0
;
virtual
bool
SetSrtpCiphers
(
const
std
:
:
vector
<
std
:
:
string
>
&
ciphers
)
=
0
;
virtual
bool
GetSrtpCryptoSuite
(
int
*
cipher
)
=
0
;
virtual
bool
GetSslCipherSuite
(
int
*
cipher
)
=
0
;
virtual
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
GetLocalCertificate
(
)
const
=
0
;
virtual
bool
SetLocalCertificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
=
0
;
virtual
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificate
>
GetRemoteSSLCertificate
(
)
const
=
0
;
virtual
bool
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8_t
*
context
size_t
context_len
bool
use_context
uint8_t
*
result
size_t
result_len
)
=
0
;
virtual
bool
SetRemoteFingerprint
(
const
std
:
:
string
&
digest_alg
const
uint8_t
*
digest
size_t
digest_len
)
=
0
;
virtual
IceTransportInternal
*
ice_transport
(
)
=
0
;
sigslot
:
:
signal2
<
DtlsTransportInternal
*
DtlsTransportState
>
SignalDtlsState
;
sigslot
:
:
signal1
<
rtc
:
:
SSLHandshakeError
>
SignalDtlsHandshakeError
;
std
:
:
string
debug_name
(
)
const
override
{
return
transport_name
(
)
+
"
"
+
std
:
:
to_string
(
component
(
)
)
;
}
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
DtlsTransportInternal
)
;
}
;
}
#
endif
