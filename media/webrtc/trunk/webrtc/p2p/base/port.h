#
ifndef
WEBRTC_P2P_BASE_PORT_H_
#
define
WEBRTC_P2P_BASE_PORT_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
candidatepairinterface
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
jseptransport
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
packetsocketfactory
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
portinterface
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
stun
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
stunrequest
.
h
"
#
include
"
webrtc
/
base
/
asyncpacketsocket
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
network
.
h
"
#
include
"
webrtc
/
base
/
proxyinfo
.
h
"
#
include
"
webrtc
/
base
/
ratetracker
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
socketaddress
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
namespace
cricket
{
class
Connection
;
class
ConnectionRequest
;
extern
const
char
LOCAL_PORT_TYPE
[
]
;
extern
const
char
STUN_PORT_TYPE
[
]
;
extern
const
char
PRFLX_PORT_TYPE
[
]
;
extern
const
char
RELAY_PORT_TYPE
[
]
;
extern
const
char
UDP_PROTOCOL_NAME
[
]
;
extern
const
char
TCP_PROTOCOL_NAME
[
]
;
extern
const
char
SSLTCP_PROTOCOL_NAME
[
]
;
extern
const
char
TLS_PROTOCOL_NAME
[
]
;
extern
const
int
DISCARD_PORT
;
extern
const
char
TCPTYPE_ACTIVE_STR
[
]
;
extern
const
char
TCPTYPE_PASSIVE_STR
[
]
;
extern
const
char
TCPTYPE_SIMOPEN_STR
[
]
;
static
const
int
MIN_CONNECTION_LIFETIME
=
10
*
1000
;
static
const
int
DEAD_CONNECTION_RECEIVE_TIMEOUT
=
30
*
1000
;
static
const
int
WEAK_CONNECTION_RECEIVE_TIMEOUT
=
2500
;
static
const
int
CONNECTION_WRITE_TIMEOUT
=
15
*
1000
;
static
const
int
CONNECTION_WRITE_CONNECT_TIMEOUT
=
5
*
1000
;
static
const
int
CONNECTION_RESPONSE_TIMEOUT
=
5
*
1000
;
static
const
uint32_t
CONNECTION_WRITE_CONNECT_FAILURES
=
5
;
enum
RelayType
{
RELAY_GTURN
RELAY_TURN
}
;
enum
IcePriorityValue
{
ICE_TYPE_PREFERENCE_RELAY_TLS
=
0
ICE_TYPE_PREFERENCE_RELAY_TCP
=
1
ICE_TYPE_PREFERENCE_RELAY_UDP
=
2
ICE_TYPE_PREFERENCE_PRFLX_TCP
=
80
ICE_TYPE_PREFERENCE_HOST_TCP
=
90
ICE_TYPE_PREFERENCE_SRFLX
=
100
ICE_TYPE_PREFERENCE_PRFLX
=
110
ICE_TYPE_PREFERENCE_HOST
=
126
}
;
enum
class
IceCandidatePairState
{
WAITING
=
0
IN_PROGRESS
SUCCEEDED
FAILED
}
;
const
char
*
ProtoToString
(
ProtocolType
proto
)
;
bool
StringToProto
(
const
char
*
value
ProtocolType
*
proto
)
;
struct
ProtocolAddress
{
rtc
:
:
SocketAddress
address
;
ProtocolType
proto
;
ProtocolAddress
(
const
rtc
:
:
SocketAddress
&
a
ProtocolType
p
)
:
address
(
a
)
proto
(
p
)
{
}
bool
operator
=
=
(
const
ProtocolAddress
&
o
)
const
{
return
address
=
=
o
.
address
&
&
proto
=
=
o
.
proto
;
}
bool
operator
!
=
(
const
ProtocolAddress
&
o
)
const
{
return
!
(
*
this
=
=
o
)
;
}
}
;
typedef
std
:
:
set
<
rtc
:
:
SocketAddress
>
ServerAddresses
;
class
Port
:
public
PortInterface
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
enum
class
State
{
INIT
KEEP_ALIVE_UNTIL_PRUNED
PRUNED
}
;
Port
(
rtc
:
:
Thread
*
thread
const
std
:
:
string
&
type
rtc
:
:
PacketSocketFactory
*
factory
rtc
:
:
Network
*
network
const
rtc
:
:
IPAddress
&
ip
const
std
:
:
string
&
username_fragment
const
std
:
:
string
&
password
)
;
Port
(
rtc
:
:
Thread
*
thread
const
std
:
:
string
&
type
rtc
:
:
PacketSocketFactory
*
factory
rtc
:
:
Network
*
network
const
rtc
:
:
IPAddress
&
ip
uint16_t
min_port
uint16_t
max_port
const
std
:
:
string
&
username_fragment
const
std
:
:
string
&
password
)
;
virtual
~
Port
(
)
;
virtual
const
std
:
:
string
&
Type
(
)
const
{
return
type_
;
}
virtual
rtc
:
:
Network
*
Network
(
)
const
{
return
network_
;
}
IceRole
GetIceRole
(
)
const
{
return
ice_role_
;
}
void
SetIceRole
(
IceRole
role
)
{
ice_role_
=
role
;
}
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
{
tiebreaker_
=
tiebreaker
;
}
uint64_t
IceTiebreaker
(
)
const
{
return
tiebreaker_
;
}
virtual
bool
SharedSocket
(
)
const
{
return
shared_socket_
;
}
void
ResetSharedSocket
(
)
{
shared_socket_
=
false
;
}
void
KeepAliveUntilPruned
(
)
;
void
Prune
(
)
;
rtc
:
:
Thread
*
thread
(
)
{
return
thread_
;
}
rtc
:
:
PacketSocketFactory
*
socket_factory
(
)
const
{
return
factory_
;
}
void
set_socket_factory
(
rtc
:
:
PacketSocketFactory
*
factory
)
{
factory_
=
factory
;
}
const
std
:
:
string
&
content_name
(
)
const
{
return
content_name_
;
}
void
set_content_name
(
const
std
:
:
string
&
content_name
)
{
content_name_
=
content_name
;
}
int
component
(
)
const
{
return
component_
;
}
void
set_component
(
int
component
)
{
component_
=
component
;
}
bool
send_retransmit_count_attribute
(
)
const
{
return
send_retransmit_count_attribute_
;
}
void
set_send_retransmit_count_attribute
(
bool
enable
)
{
send_retransmit_count_attribute_
=
enable
;
}
uint32_t
generation
(
)
const
{
return
generation_
;
}
void
set_generation
(
uint32_t
generation
)
{
generation_
=
generation
;
}
const
std
:
:
string
username_fragment
(
)
const
;
const
std
:
:
string
&
password
(
)
const
{
return
password_
;
}
void
SetIceParameters
(
int
component
const
std
:
:
string
&
username_fragment
const
std
:
:
string
&
password
)
;
sigslot
:
:
signal2
<
Port
*
const
Candidate
&
>
SignalCandidateReady
;
virtual
const
std
:
:
vector
<
Candidate
>
&
Candidates
(
)
const
{
return
candidates_
;
}
sigslot
:
:
signal1
<
Port
*
>
SignalPortComplete
;
sigslot
:
:
signal1
<
Port
*
>
SignalPortError
;
typedef
std
:
:
map
<
rtc
:
:
SocketAddress
Connection
*
>
AddressMap
;
const
AddressMap
&
connections
(
)
{
return
connections_
;
}
virtual
Connection
*
GetConnection
(
const
rtc
:
:
SocketAddress
&
remote_addr
)
;
sigslot
:
:
signal2
<
Port
*
Connection
*
>
SignalConnectionCreated
;
virtual
bool
HandleIncomingPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
remote_addr
const
rtc
:
:
PacketTime
&
packet_time
)
{
RTC_NOTREACHED
(
)
;
return
false
;
}
virtual
void
SendBindingResponse
(
StunMessage
*
request
const
rtc
:
:
SocketAddress
&
addr
)
;
virtual
void
SendBindingErrorResponse
(
StunMessage
*
request
const
rtc
:
:
SocketAddress
&
addr
int
error_code
const
std
:
:
string
&
reason
)
;
void
set_proxy
(
const
std
:
:
string
&
user_agent
const
rtc
:
:
ProxyInfo
&
proxy
)
{
user_agent_
=
user_agent
;
proxy_
=
proxy
;
}
const
std
:
:
string
&
user_agent
(
)
{
return
user_agent_
;
}
const
rtc
:
:
ProxyInfo
&
proxy
(
)
{
return
proxy_
;
}
virtual
void
EnablePortPackets
(
)
;
void
Destroy
(
)
;
virtual
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
;
virtual
std
:
:
string
ToString
(
)
const
;
const
rtc
:
:
IPAddress
&
ip
(
)
const
{
return
ip_
;
}
uint16_t
min_port
(
)
{
return
min_port_
;
}
uint16_t
max_port
(
)
{
return
max_port_
;
}
void
set_timeout_delay
(
int
delay
)
{
timeout_delay_
=
delay
;
}
bool
ParseStunUsername
(
const
StunMessage
*
stun_msg
std
:
:
string
*
local_username
std
:
:
string
*
remote_username
)
const
;
void
CreateStunUsername
(
const
std
:
:
string
&
remote_username
std
:
:
string
*
stun_username_attr_str
)
const
;
bool
MaybeIceRoleConflict
(
const
rtc
:
:
SocketAddress
&
addr
IceMessage
*
stun_msg
const
std
:
:
string
&
remote_ufrag
)
;
virtual
void
OnSentPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
rtc
:
:
SentPacket
&
sent_packet
)
=
0
;
void
OnReadyToSend
(
)
;
size_t
AddPrflxCandidate
(
const
Candidate
&
local
)
;
int16_t
network_cost
(
)
const
{
return
network_cost_
;
}
protected
:
enum
{
MSG_DESTROY_IF_DEAD
=
0
MSG_FIRST_AVAILABLE
}
;
virtual
void
UpdateNetworkCost
(
)
;
void
set_type
(
const
std
:
:
string
&
type
)
{
type_
=
type
;
}
void
AddAddress
(
const
rtc
:
:
SocketAddress
&
address
const
rtc
:
:
SocketAddress
&
base_address
const
rtc
:
:
SocketAddress
&
related_address
const
std
:
:
string
&
protocol
const
std
:
:
string
&
relay_protocol
const
std
:
:
string
&
tcptype
const
std
:
:
string
&
type
uint32_t
type_preference
uint32_t
relay_preference
bool
final
)
;
void
AddOrReplaceConnection
(
Connection
*
conn
)
;
void
OnReadPacket
(
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
addr
ProtocolType
proto
)
;
bool
GetStunMessage
(
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
addr
std
:
:
unique_ptr
<
IceMessage
>
*
out_msg
std
:
:
string
*
out_username
)
;
bool
IsCompatibleAddress
(
const
rtc
:
:
SocketAddress
&
addr
)
;
rtc
:
:
DiffServCodePoint
DefaultDscpValue
(
)
const
{
return
rtc
:
:
DSCP_NO_CHANGE
;
}
virtual
void
HandleConnectionDestroyed
(
Connection
*
conn
)
{
}
private
:
void
Construct
(
)
;
void
OnConnectionDestroyed
(
Connection
*
conn
)
;
void
OnNetworkTypeChanged
(
const
rtc
:
:
Network
*
network
)
;
rtc
:
:
Thread
*
thread_
;
rtc
:
:
PacketSocketFactory
*
factory_
;
std
:
:
string
type_
;
bool
send_retransmit_count_attribute_
;
rtc
:
:
Network
*
network_
;
rtc
:
:
IPAddress
ip_
;
uint16_t
min_port_
;
uint16_t
max_port_
;
std
:
:
string
content_name_
;
int
component_
;
uint32_t
generation_
;
std
:
:
string
ice_username_fragment_
;
std
:
:
string
password_
;
std
:
:
vector
<
Candidate
>
candidates_
;
AddressMap
connections_
;
int
timeout_delay_
;
bool
enable_port_packets_
;
IceRole
ice_role_
;
uint64_t
tiebreaker_
;
bool
shared_socket_
;
std
:
:
string
user_agent_
;
rtc
:
:
ProxyInfo
proxy_
;
uint16_t
network_cost_
;
State
state_
=
State
:
:
INIT
;
int64_t
last_time_all_connections_removed_
=
0
;
friend
class
Connection
;
}
;
class
Connection
:
public
CandidatePairInterface
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
struct
SentPing
{
SentPing
(
const
std
:
:
string
id
int64_t
sent_time
uint32_t
nomination
)
:
id
(
id
)
sent_time
(
sent_time
)
nomination
(
nomination
)
{
}
std
:
:
string
id
;
int64_t
sent_time
;
uint32_t
nomination
;
}
;
virtual
~
Connection
(
)
;
Port
*
port
(
)
{
return
port_
;
}
const
Port
*
port
(
)
const
{
return
port_
;
}
virtual
const
Candidate
&
local_candidate
(
)
const
;
virtual
const
Candidate
&
remote_candidate
(
)
const
;
uint64_t
priority
(
)
const
;
enum
WriteState
{
STATE_WRITABLE
=
0
STATE_WRITE_UNRELIABLE
=
1
STATE_WRITE_INIT
=
2
STATE_WRITE_TIMEOUT
=
3
}
;
WriteState
write_state
(
)
const
{
return
write_state_
;
}
bool
writable
(
)
const
{
return
write_state_
=
=
STATE_WRITABLE
;
}
bool
receiving
(
)
const
{
return
receiving_
;
}
bool
connected
(
)
const
{
return
connected_
;
}
bool
weak
(
)
const
{
return
!
(
writable
(
)
&
&
receiving
(
)
&
&
connected
(
)
)
;
}
bool
active
(
)
const
{
return
write_state_
!
=
STATE_WRITE_TIMEOUT
;
}
bool
dead
(
int64_t
now
)
const
;
int
rtt
(
)
const
{
return
rtt_
;
}
ConnectionInfo
stats
(
)
;
sigslot
:
:
signal1
<
Connection
*
>
SignalStateChange
;
sigslot
:
:
signal1
<
Connection
*
>
SignalDestroyed
;
virtual
int
Send
(
const
void
*
data
size_t
size
const
rtc
:
:
PacketOptions
&
options
)
=
0
;
virtual
int
GetError
(
)
=
0
;
sigslot
:
:
signal4
<
Connection
*
const
char
*
size_t
const
rtc
:
:
PacketTime
&
>
SignalReadPacket
;
sigslot
:
:
signal1
<
Connection
*
>
SignalReadyToSend
;
void
OnReadPacket
(
const
char
*
data
size_t
size
const
rtc
:
:
PacketTime
&
packet_time
)
;
void
OnReadyToSend
(
)
;
bool
pruned
(
)
const
{
return
pruned_
;
}
void
Prune
(
)
;
bool
use_candidate_attr
(
)
const
{
return
use_candidate_attr_
;
}
void
set_use_candidate_attr
(
bool
enable
)
;
void
set_nomination
(
uint32_t
value
)
{
nomination_
=
value
;
}
uint32_t
remote_nomination
(
)
const
{
return
remote_nomination_
;
}
bool
nominated
(
)
const
{
return
remote_nomination_
>
0
;
}
void
set_remote_nomination
(
uint32_t
remote_nomination
)
{
remote_nomination_
=
remote_nomination
;
}
uint32_t
acked_nomination
(
)
const
{
return
acked_nomination_
;
}
void
set_remote_ice_mode
(
IceMode
mode
)
{
remote_ice_mode_
=
mode
;
}
void
set_receiving_timeout
(
int
receiving_timeout_ms
)
{
receiving_timeout_
=
receiving_timeout_ms
;
}
void
Destroy
(
)
;
void
FailAndDestroy
(
)
;
void
FailAndPrune
(
)
;
void
UpdateState
(
int64_t
now
)
;
int64_t
last_ping_sent
(
)
const
{
return
last_ping_sent_
;
}
void
Ping
(
int64_t
now
)
;
void
ReceivedPingResponse
(
int
rtt
const
std
:
:
string
&
request_id
)
;
int64_t
last_ping_response_received
(
)
const
{
return
last_ping_response_received_
;
}
int
rtt_samples
(
)
const
{
return
rtt_samples_
;
}
int64_t
last_ping_received
(
)
const
{
return
last_ping_received_
;
}
void
ReceivedPing
(
)
;
void
HandleBindingRequest
(
IceMessage
*
msg
)
;
int64_t
last_data_received
(
)
const
{
return
last_data_received_
;
}
std
:
:
string
ToDebugId
(
)
const
;
std
:
:
string
ToString
(
)
const
;
std
:
:
string
ToSensitiveString
(
)
const
;
void
PrintPingsSinceLastResponse
(
std
:
:
string
*
pings
size_t
max
)
;
bool
reported
(
)
const
{
return
reported_
;
}
void
set_reported
(
bool
reported
)
{
reported_
=
reported
;
}
sigslot
:
:
signal1
<
Connection
*
>
SignalNominated
;
void
HandleRoleConflictFromPeer
(
)
;
IceCandidatePairState
state
(
)
const
{
return
state_
;
}
int
num_pings_sent
(
)
const
{
return
num_pings_sent_
;
}
IceMode
remote_ice_mode
(
)
const
{
return
remote_ice_mode_
;
}
uint32_t
ComputeNetworkCost
(
)
const
;
void
MaybeSetRemoteIceParametersAndGeneration
(
const
IceParameters
&
params
int
generation
)
;
void
MaybeUpdatePeerReflexiveCandidate
(
const
Candidate
&
new_candidate
)
;
int64_t
last_received
(
)
const
;
int64_t
receiving_unchanged_since
(
)
const
{
return
receiving_unchanged_since_
;
}
bool
stable
(
int64_t
now
)
const
;
protected
:
enum
{
MSG_DELETE
=
0
MSG_FIRST_AVAILABLE
}
;
Connection
(
Port
*
port
size_t
index
const
Candidate
&
candidate
)
;
void
OnSendStunPacket
(
const
void
*
data
size_t
size
StunRequest
*
req
)
;
virtual
void
OnConnectionRequestResponse
(
ConnectionRequest
*
req
StunMessage
*
response
)
;
void
OnConnectionRequestErrorResponse
(
ConnectionRequest
*
req
StunMessage
*
response
)
;
void
OnConnectionRequestTimeout
(
ConnectionRequest
*
req
)
;
void
OnConnectionRequestSent
(
ConnectionRequest
*
req
)
;
bool
rtt_converged
(
)
const
;
bool
missing_responses
(
int64_t
now
)
const
;
void
set_write_state
(
WriteState
value
)
;
void
UpdateReceiving
(
int64_t
now
)
;
void
set_state
(
IceCandidatePairState
state
)
;
void
set_connected
(
bool
value
)
;
uint32_t
nomination
(
)
const
{
return
nomination_
;
}
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
;
Port
*
port_
;
size_t
local_candidate_index_
;
Candidate
remote_candidate_
;
ConnectionInfo
stats_
;
rtc
:
:
RateTracker
recv_rate_tracker_
;
rtc
:
:
RateTracker
send_rate_tracker_
;
private
:
void
MaybeUpdateLocalCandidate
(
ConnectionRequest
*
request
StunMessage
*
response
)
;
WriteState
write_state_
;
bool
receiving_
;
bool
connected_
;
bool
pruned_
;
bool
use_candidate_attr_
;
uint32_t
nomination_
=
0
;
uint32_t
acked_nomination_
=
0
;
uint32_t
remote_nomination_
=
0
;
IceMode
remote_ice_mode_
;
StunRequestManager
requests_
;
int
rtt_
;
int
rtt_samples_
=
0
;
int64_t
last_ping_sent_
;
int64_t
last_ping_received_
;
int64_t
last_data_received_
;
int64_t
last_ping_response_received_
;
int64_t
receiving_unchanged_since_
=
0
;
std
:
:
vector
<
SentPing
>
pings_since_last_response_
;
bool
reported_
;
IceCandidatePairState
state_
;
int
receiving_timeout_
;
int64_t
time_created_ms_
;
int
num_pings_sent_
=
0
;
friend
class
Port
;
friend
class
ConnectionRequest
;
}
;
class
ProxyConnection
:
public
Connection
{
public
:
ProxyConnection
(
Port
*
port
size_t
index
const
Candidate
&
remote_candidate
)
;
int
Send
(
const
void
*
data
size_t
size
const
rtc
:
:
PacketOptions
&
options
)
override
;
int
GetError
(
)
override
{
return
error_
;
}
private
:
int
error_
=
0
;
}
;
}
#
endif
