#
ifndef
WEBRTC_P2P_BASE_PORT_H_
#
define
WEBRTC_P2P_BASE_PORT_H_
#
include
<
map
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
packetsocketfactory
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
portinterface
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
stun
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
stunrequest
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transport
.
h
"
#
include
"
webrtc
/
base
/
asyncpacketsocket
.
h
"
#
include
"
webrtc
/
base
/
network
.
h
"
#
include
"
webrtc
/
base
/
proxyinfo
.
h
"
#
include
"
webrtc
/
base
/
ratetracker
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
socketaddress
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
namespace
cricket
{
class
Connection
;
class
ConnectionRequest
;
extern
const
char
LOCAL_PORT_TYPE
[
]
;
extern
const
char
STUN_PORT_TYPE
[
]
;
extern
const
char
PRFLX_PORT_TYPE
[
]
;
extern
const
char
RELAY_PORT_TYPE
[
]
;
extern
const
char
UDP_PROTOCOL_NAME
[
]
;
extern
const
char
TCP_PROTOCOL_NAME
[
]
;
extern
const
char
SSLTCP_PROTOCOL_NAME
[
]
;
extern
const
int
DISCARD_PORT
;
extern
const
char
TCPTYPE_ACTIVE_STR
[
]
;
extern
const
char
TCPTYPE_PASSIVE_STR
[
]
;
extern
const
char
TCPTYPE_SIMOPEN_STR
[
]
;
const
uint32
CONNECTION_READ_TIMEOUT
=
30
*
1000
;
const
uint32
CONNECTION_WRITE_TIMEOUT
=
15
*
1000
;
const
uint32
CONNECTION_WRITE_CONNECT_TIMEOUT
=
5
*
1000
;
const
uint32
CONNECTION_WRITE_CONNECT_FAILURES
=
5
;
const
int
CONNECTION_RESPONSE_TIMEOUT
=
5
*
1000
;
enum
RelayType
{
RELAY_GTURN
RELAY_TURN
}
;
enum
IcePriorityValue
{
ICE_TYPE_PREFERENCE_RELAY
=
2
ICE_TYPE_PREFERENCE_HOST_TCP
=
90
ICE_TYPE_PREFERENCE_SRFLX
=
100
ICE_TYPE_PREFERENCE_PRFLX
=
110
ICE_TYPE_PREFERENCE_HOST
=
126
}
;
const
char
*
ProtoToString
(
ProtocolType
proto
)
;
bool
StringToProto
(
const
char
*
value
ProtocolType
*
proto
)
;
struct
ProtocolAddress
{
rtc
:
:
SocketAddress
address
;
ProtocolType
proto
;
bool
secure
;
ProtocolAddress
(
const
rtc
:
:
SocketAddress
&
a
ProtocolType
p
)
:
address
(
a
)
proto
(
p
)
secure
(
false
)
{
}
ProtocolAddress
(
const
rtc
:
:
SocketAddress
&
a
ProtocolType
p
bool
sec
)
:
address
(
a
)
proto
(
p
)
secure
(
sec
)
{
}
}
;
typedef
std
:
:
set
<
rtc
:
:
SocketAddress
>
ServerAddresses
;
class
Port
:
public
PortInterface
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
Port
(
rtc
:
:
Thread
*
thread
rtc
:
:
PacketSocketFactory
*
factory
rtc
:
:
Network
*
network
const
rtc
:
:
IPAddress
&
ip
const
std
:
:
string
&
username_fragment
const
std
:
:
string
&
password
)
;
Port
(
rtc
:
:
Thread
*
thread
const
std
:
:
string
&
type
rtc
:
:
PacketSocketFactory
*
factory
rtc
:
:
Network
*
network
const
rtc
:
:
IPAddress
&
ip
uint16
min_port
uint16
max_port
const
std
:
:
string
&
username_fragment
const
std
:
:
string
&
password
)
;
virtual
~
Port
(
)
;
virtual
const
std
:
:
string
&
Type
(
)
const
{
return
type_
;
}
virtual
rtc
:
:
Network
*
Network
(
)
const
{
return
network_
;
}
virtual
void
SetIceProtocolType
(
IceProtocolType
protocol
)
{
ice_protocol_
=
protocol
;
}
virtual
IceProtocolType
IceProtocol
(
)
const
{
return
ice_protocol_
;
}
IceRole
GetIceRole
(
)
const
{
return
ice_role_
;
}
void
SetIceRole
(
IceRole
role
)
{
ice_role_
=
role
;
}
void
SetIceTiebreaker
(
uint64
tiebreaker
)
{
tiebreaker_
=
tiebreaker
;
}
uint64
IceTiebreaker
(
)
const
{
return
tiebreaker_
;
}
virtual
bool
SharedSocket
(
)
const
{
return
shared_socket_
;
}
void
ResetSharedSocket
(
)
{
shared_socket_
=
false
;
}
rtc
:
:
Thread
*
thread
(
)
{
return
thread_
;
}
rtc
:
:
PacketSocketFactory
*
socket_factory
(
)
const
{
return
factory_
;
}
void
set_socket_factory
(
rtc
:
:
PacketSocketFactory
*
factory
)
{
factory_
=
factory
;
}
const
std
:
:
string
&
content_name
(
)
const
{
return
content_name_
;
}
void
set_content_name
(
const
std
:
:
string
&
content_name
)
{
content_name_
=
content_name
;
}
int
component
(
)
const
{
return
component_
;
}
void
set_component
(
int
component
)
{
component_
=
component
;
}
bool
send_retransmit_count_attribute
(
)
const
{
return
send_retransmit_count_attribute_
;
}
void
set_send_retransmit_count_attribute
(
bool
enable
)
{
send_retransmit_count_attribute_
=
enable
;
}
uint32
generation
(
)
{
return
generation_
;
}
void
set_generation
(
uint32
generation
)
{
generation_
=
generation
;
}
const
std
:
:
string
username_fragment
(
)
const
;
const
std
:
:
string
&
password
(
)
const
{
return
password_
;
}
sigslot
:
:
signal2
<
Port
*
const
Candidate
&
>
SignalCandidateReady
;
virtual
const
std
:
:
vector
<
Candidate
>
&
Candidates
(
)
const
{
return
candidates_
;
}
sigslot
:
:
signal1
<
Port
*
>
SignalPortComplete
;
sigslot
:
:
signal1
<
Port
*
>
SignalPortError
;
typedef
std
:
:
map
<
rtc
:
:
SocketAddress
Connection
*
>
AddressMap
;
const
AddressMap
&
connections
(
)
{
return
connections_
;
}
virtual
Connection
*
GetConnection
(
const
rtc
:
:
SocketAddress
&
remote_addr
)
;
sigslot
:
:
signal2
<
Port
*
Connection
*
>
SignalConnectionCreated
;
virtual
bool
HandleIncomingPacket
(
rtc
:
:
AsyncPacketSocket
*
socket
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
remote_addr
const
rtc
:
:
PacketTime
&
packet_time
)
{
ASSERT
(
false
)
;
return
false
;
}
virtual
void
SendBindingResponse
(
StunMessage
*
request
const
rtc
:
:
SocketAddress
&
addr
)
;
virtual
void
SendBindingErrorResponse
(
StunMessage
*
request
const
rtc
:
:
SocketAddress
&
addr
int
error_code
const
std
:
:
string
&
reason
)
;
void
set_proxy
(
const
std
:
:
string
&
user_agent
const
rtc
:
:
ProxyInfo
&
proxy
)
{
user_agent_
=
user_agent
;
proxy_
=
proxy
;
}
const
std
:
:
string
&
user_agent
(
)
{
return
user_agent_
;
}
const
rtc
:
:
ProxyInfo
&
proxy
(
)
{
return
proxy_
;
}
virtual
void
EnablePortPackets
(
)
;
void
Destroy
(
)
;
virtual
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
;
virtual
std
:
:
string
ToString
(
)
const
;
const
rtc
:
:
IPAddress
&
ip
(
)
const
{
return
ip_
;
}
uint16
min_port
(
)
{
return
min_port_
;
}
uint16
max_port
(
)
{
return
max_port_
;
}
void
set_timeout_delay
(
int
delay
)
{
timeout_delay_
=
delay
;
}
bool
ParseStunUsername
(
const
StunMessage
*
stun_msg
std
:
:
string
*
local_username
std
:
:
string
*
remote_username
IceProtocolType
*
remote_protocol_type
)
const
;
void
CreateStunUsername
(
const
std
:
:
string
&
remote_username
std
:
:
string
*
stun_username_attr_str
)
const
;
bool
MaybeIceRoleConflict
(
const
rtc
:
:
SocketAddress
&
addr
IceMessage
*
stun_msg
const
std
:
:
string
&
remote_ufrag
)
;
void
OnReadyToSend
(
)
;
size_t
AddPrflxCandidate
(
const
Candidate
&
local
)
;
bool
IsStandardIce
(
)
const
;
bool
IsGoogleIce
(
)
const
;
bool
IsHybridIce
(
)
const
;
void
set_candidate_filter
(
uint32
candidate_filter
)
{
candidate_filter_
=
candidate_filter
;
}
protected
:
enum
{
MSG_CHECKTIMEOUT
=
0
MSG_FIRST_AVAILABLE
}
;
void
set_type
(
const
std
:
:
string
&
type
)
{
type_
=
type
;
}
void
AddAddress
(
const
rtc
:
:
SocketAddress
&
address
const
rtc
:
:
SocketAddress
&
base_address
const
rtc
:
:
SocketAddress
&
related_address
const
std
:
:
string
&
protocol
const
std
:
:
string
&
tcptype
const
std
:
:
string
&
type
uint32
type_preference
uint32
relay_preference
bool
final
)
;
void
AddConnection
(
Connection
*
conn
)
;
void
OnReadPacket
(
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
addr
ProtocolType
proto
)
;
bool
GetStunMessage
(
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
addr
IceMessage
*
*
out_msg
std
:
:
string
*
out_username
)
;
bool
IsCompatibleAddress
(
const
rtc
:
:
SocketAddress
&
addr
)
;
rtc
:
:
DiffServCodePoint
DefaultDscpValue
(
)
const
{
return
rtc
:
:
DSCP_NO_CHANGE
;
}
uint32
candidate_filter
(
)
{
return
candidate_filter_
;
}
private
:
void
Construct
(
)
;
void
OnConnectionDestroyed
(
Connection
*
conn
)
;
void
CheckTimeout
(
)
;
rtc
:
:
Thread
*
thread_
;
rtc
:
:
PacketSocketFactory
*
factory_
;
std
:
:
string
type_
;
bool
send_retransmit_count_attribute_
;
rtc
:
:
Network
*
network_
;
rtc
:
:
IPAddress
ip_
;
uint16
min_port_
;
uint16
max_port_
;
std
:
:
string
content_name_
;
int
component_
;
uint32
generation_
;
std
:
:
string
ice_username_fragment_
;
std
:
:
string
password_
;
std
:
:
vector
<
Candidate
>
candidates_
;
AddressMap
connections_
;
int
timeout_delay_
;
bool
enable_port_packets_
;
IceProtocolType
ice_protocol_
;
IceRole
ice_role_
;
uint64
tiebreaker_
;
bool
shared_socket_
;
std
:
:
string
user_agent_
;
rtc
:
:
ProxyInfo
proxy_
;
uint32
candidate_filter_
;
friend
class
Connection
;
}
;
class
Connection
:
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
{
public
:
enum
State
{
STATE_WAITING
=
0
STATE_INPROGRESS
STATE_SUCCEEDED
STATE_FAILED
}
;
virtual
~
Connection
(
)
;
Port
*
port
(
)
{
return
port_
;
}
const
Port
*
port
(
)
const
{
return
port_
;
}
virtual
const
Candidate
&
local_candidate
(
)
const
;
const
Candidate
&
remote_candidate
(
)
const
{
return
remote_candidate_
;
}
uint64
priority
(
)
const
;
enum
ReadState
{
STATE_READ_INIT
=
0
STATE_READABLE
=
1
STATE_READ_TIMEOUT
=
2
}
;
ReadState
read_state
(
)
const
{
return
read_state_
;
}
bool
readable
(
)
const
{
return
read_state_
=
=
STATE_READABLE
;
}
enum
WriteState
{
STATE_WRITABLE
=
0
STATE_WRITE_UNRELIABLE
=
1
STATE_WRITE_INIT
=
2
STATE_WRITE_TIMEOUT
=
3
}
;
WriteState
write_state
(
)
const
{
return
write_state_
;
}
bool
writable
(
)
const
{
return
write_state_
=
=
STATE_WRITABLE
;
}
bool
connected
(
)
const
{
return
connected_
;
}
uint32
rtt
(
)
const
{
return
rtt_
;
}
size_t
sent_total_bytes
(
)
;
size_t
sent_bytes_second
(
)
;
size_t
sent_discarded_packets
(
)
;
size_t
sent_total_packets
(
)
;
size_t
recv_total_bytes
(
)
;
size_t
recv_bytes_second
(
)
;
sigslot
:
:
signal1
<
Connection
*
>
SignalStateChange
;
sigslot
:
:
signal1
<
Connection
*
>
SignalDestroyed
;
virtual
int
Send
(
const
void
*
data
size_t
size
const
rtc
:
:
PacketOptions
&
options
)
=
0
;
virtual
int
GetError
(
)
=
0
;
sigslot
:
:
signal4
<
Connection
*
const
char
*
size_t
const
rtc
:
:
PacketTime
&
>
SignalReadPacket
;
sigslot
:
:
signal1
<
Connection
*
>
SignalReadyToSend
;
void
OnReadPacket
(
const
char
*
data
size_t
size
const
rtc
:
:
PacketTime
&
packet_time
)
;
void
OnReadyToSend
(
)
;
bool
pruned
(
)
const
{
return
pruned_
;
}
void
Prune
(
)
;
bool
use_candidate_attr
(
)
const
{
return
use_candidate_attr_
;
}
void
set_use_candidate_attr
(
bool
enable
)
;
void
set_remote_ice_mode
(
IceMode
mode
)
{
remote_ice_mode_
=
mode
;
}
void
Destroy
(
)
;
void
UpdateState
(
uint32
now
)
;
uint32
last_ping_sent
(
)
const
{
return
last_ping_sent_
;
}
void
Ping
(
uint32
now
)
;
uint32
last_ping_received
(
)
const
{
return
last_ping_received_
;
}
void
ReceivedPing
(
)
;
std
:
:
string
ToDebugId
(
)
const
;
std
:
:
string
ToString
(
)
const
;
std
:
:
string
ToSensitiveString
(
)
const
;
bool
reported
(
)
const
{
return
reported_
;
}
void
set_reported
(
bool
reported
)
{
reported_
=
reported
;
}
sigslot
:
:
signal1
<
Connection
*
>
SignalUseCandidate
;
void
HandleRoleConflictFromPeer
(
)
;
State
state
(
)
const
{
return
state_
;
}
IceMode
remote_ice_mode
(
)
const
{
return
remote_ice_mode_
;
}
void
MaybeSetRemoteIceCredentials
(
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
;
void
MaybeUpdatePeerReflexiveCandidate
(
const
Candidate
&
new_candidate
)
;
protected
:
Connection
(
Port
*
port
size_t
index
const
Candidate
&
candidate
)
;
void
OnSendStunPacket
(
const
void
*
data
size_t
size
StunRequest
*
req
)
;
void
OnConnectionRequestResponse
(
ConnectionRequest
*
req
StunMessage
*
response
)
;
void
OnConnectionRequestErrorResponse
(
ConnectionRequest
*
req
StunMessage
*
response
)
;
void
OnConnectionRequestTimeout
(
ConnectionRequest
*
req
)
;
void
set_read_state
(
ReadState
value
)
;
void
set_write_state
(
WriteState
value
)
;
void
set_state
(
State
state
)
;
void
set_connected
(
bool
value
)
;
void
CheckTimeout
(
)
;
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
;
Port
*
port_
;
size_t
local_candidate_index_
;
Candidate
remote_candidate_
;
ReadState
read_state_
;
WriteState
write_state_
;
bool
connected_
;
bool
pruned_
;
bool
use_candidate_attr_
;
IceMode
remote_ice_mode_
;
StunRequestManager
requests_
;
uint32
rtt_
;
uint32
last_ping_sent_
;
uint32
last_ping_received_
;
uint32
last_data_received_
;
uint32
last_ping_response_received_
;
std
:
:
vector
<
uint32
>
pings_since_last_response_
;
rtc
:
:
RateTracker
recv_rate_tracker_
;
rtc
:
:
RateTracker
send_rate_tracker_
;
uint32
sent_packets_discarded_
;
uint32
sent_packets_total_
;
private
:
void
MaybeAddPrflxCandidate
(
ConnectionRequest
*
request
StunMessage
*
response
)
;
bool
reported_
;
State
state_
;
friend
class
Port
;
friend
class
ConnectionRequest
;
}
;
class
ProxyConnection
:
public
Connection
{
public
:
ProxyConnection
(
Port
*
port
size_t
index
const
Candidate
&
candidate
)
;
virtual
int
Send
(
const
void
*
data
size_t
size
const
rtc
:
:
PacketOptions
&
options
)
;
virtual
int
GetError
(
)
{
return
error_
;
}
private
:
int
error_
;
}
;
}
#
endif
