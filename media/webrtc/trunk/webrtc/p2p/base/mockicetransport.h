#
ifndef
WEBRTC_P2P_BASE_MOCKICETRANSPORT_H_
#
define
WEBRTC_P2P_BASE_MOCKICETRANSPORT_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
gunit
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
icetransportinternal
.
h
"
#
include
"
webrtc
/
test
/
gmock
.
h
"
using
testing
:
:
_
;
using
testing
:
:
Return
;
namespace
cricket
{
class
MockIceTransport
:
public
IceTransportInternal
{
public
:
MockIceTransport
(
)
{
SignalReadyToSend
(
this
)
;
SignalWritableState
(
this
)
;
}
MOCK_METHOD4
(
SendPacket
int
(
const
char
*
data
size_t
len
const
rtc
:
:
PacketOptions
&
options
int
flags
)
)
;
MOCK_METHOD2
(
SetOption
int
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
)
;
MOCK_METHOD0
(
GetError
int
(
)
)
;
MOCK_CONST_METHOD0
(
GetIceRole
cricket
:
:
IceRole
(
)
)
;
MOCK_METHOD1
(
GetStats
bool
(
cricket
:
:
ConnectionInfos
*
infos
)
)
;
MOCK_CONST_METHOD0
(
IsDtlsActive
bool
(
)
)
;
MOCK_CONST_METHOD1
(
GetSslRole
bool
(
rtc
:
:
SSLRole
*
role
)
)
;
IceTransportState
GetState
(
)
const
override
{
return
IceTransportState
:
:
STATE_INIT
;
}
const
std
:
:
string
&
transport_name
(
)
const
override
{
return
transport_name_
;
}
int
component
(
)
const
override
{
return
0
;
}
void
SetIceRole
(
IceRole
role
)
override
{
}
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
override
{
}
void
SetIceParameters
(
const
IceParameters
&
ice_params
)
override
{
}
void
SetRemoteIceParameters
(
const
IceParameters
&
ice_params
)
override
{
}
void
SetRemoteIceMode
(
IceMode
mode
)
override
{
}
void
SetIceConfig
(
const
IceConfig
&
config
)
override
{
}
void
MaybeStartGathering
(
)
override
{
}
void
SetMetricsObserver
(
webrtc
:
:
MetricsObserverInterface
*
observer
)
override
{
}
void
AddRemoteCandidate
(
const
Candidate
&
candidate
)
override
{
}
void
RemoveRemoteCandidate
(
const
Candidate
&
candidate
)
override
{
}
IceGatheringState
gathering_state
(
)
const
override
{
return
IceGatheringState
:
:
kIceGatheringComplete
;
}
bool
receiving
(
)
const
override
{
return
true
;
}
bool
writable
(
)
const
override
{
return
true
;
}
private
:
std
:
:
string
transport_name_
;
}
;
}
#
endif
