#
ifndef
WEBRTC_P2P_BASE_DTLSTRANSPORTCHANNEL_H_
#
define
WEBRTC_P2P_BASE_DTLSTRANSPORTCHANNEL_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
p2p
/
base
/
transportchannelimpl
.
h
"
#
include
"
webrtc
/
base
/
buffer
.
h
"
#
include
"
webrtc
/
base
/
bufferqueue
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
sslstreamadapter
.
h
"
#
include
"
webrtc
/
base
/
stream
.
h
"
namespace
cricket
{
class
StreamInterfaceChannel
:
public
rtc
:
:
StreamInterface
{
public
:
explicit
StreamInterfaceChannel
(
TransportChannel
*
channel
)
;
bool
OnPacketReceived
(
const
char
*
data
size_t
size
)
;
rtc
:
:
StreamState
GetState
(
)
const
override
{
return
state_
;
}
void
Close
(
)
override
{
state_
=
rtc
:
:
SS_CLOSED
;
}
rtc
:
:
StreamResult
Read
(
void
*
buffer
size_t
buffer_len
size_t
*
read
int
*
error
)
override
;
rtc
:
:
StreamResult
Write
(
const
void
*
data
size_t
data_len
size_t
*
written
int
*
error
)
override
;
private
:
TransportChannel
*
channel_
;
rtc
:
:
StreamState
state_
;
rtc
:
:
BufferQueue
packets_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
StreamInterfaceChannel
)
;
}
;
class
DtlsTransportChannelWrapper
:
public
TransportChannelImpl
{
public
:
DtlsTransportChannelWrapper
(
Transport
*
transport
TransportChannelImpl
*
channel
)
;
~
DtlsTransportChannelWrapper
(
)
override
;
void
SetIceRole
(
IceRole
role
)
override
{
channel_
-
>
SetIceRole
(
role
)
;
}
IceRole
GetIceRole
(
)
const
override
{
return
channel_
-
>
GetIceRole
(
)
;
}
bool
SetLocalCertificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
override
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
GetLocalCertificate
(
)
const
override
;
bool
SetRemoteFingerprint
(
const
std
:
:
string
&
digest_alg
const
uint8_t
*
digest
size_t
digest_len
)
override
;
bool
IsDtlsActive
(
)
const
override
{
return
dtls_active_
;
}
int
SendPacket
(
const
char
*
data
size_t
size
const
rtc
:
:
PacketOptions
&
options
int
flags
)
override
;
int
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
override
{
return
channel_
-
>
SetOption
(
opt
value
)
;
}
bool
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
override
{
return
channel_
-
>
GetOption
(
opt
value
)
;
}
int
GetError
(
)
override
{
return
channel_
-
>
GetError
(
)
;
}
bool
GetStats
(
ConnectionInfos
*
infos
)
override
{
return
channel_
-
>
GetStats
(
infos
)
;
}
const
std
:
:
string
SessionId
(
)
const
override
{
return
channel_
-
>
SessionId
(
)
;
}
virtual
bool
SetSslMaxProtocolVersion
(
rtc
:
:
SSLProtocolVersion
version
)
;
bool
SetSrtpCryptoSuites
(
const
std
:
:
vector
<
int
>
&
ciphers
)
override
;
bool
GetSrtpCryptoSuite
(
int
*
cipher
)
override
;
bool
GetSslRole
(
rtc
:
:
SSLRole
*
role
)
const
override
;
bool
SetSslRole
(
rtc
:
:
SSLRole
role
)
override
;
bool
GetSslCipherSuite
(
int
*
cipher
)
override
;
bool
GetRemoteSSLCertificate
(
rtc
:
:
SSLCertificate
*
*
cert
)
const
override
;
bool
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8_t
*
context
size_t
context_len
bool
use_context
uint8_t
*
result
size_t
result_len
)
override
{
return
(
dtls_
.
get
(
)
)
?
dtls_
-
>
ExportKeyingMaterial
(
label
context
context_len
use_context
result
result_len
)
:
false
;
}
Transport
*
GetTransport
(
)
override
{
return
transport_
;
}
TransportChannelState
GetState
(
)
const
override
{
return
channel_
-
>
GetState
(
)
;
}
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
override
{
channel_
-
>
SetIceTiebreaker
(
tiebreaker
)
;
}
void
SetIceCredentials
(
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
override
{
channel_
-
>
SetIceCredentials
(
ice_ufrag
ice_pwd
)
;
}
void
SetRemoteIceCredentials
(
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
override
{
channel_
-
>
SetRemoteIceCredentials
(
ice_ufrag
ice_pwd
)
;
}
void
SetRemoteIceMode
(
IceMode
mode
)
override
{
channel_
-
>
SetRemoteIceMode
(
mode
)
;
}
void
Connect
(
)
override
;
void
MaybeStartGathering
(
)
override
{
channel_
-
>
MaybeStartGathering
(
)
;
}
IceGatheringState
gathering_state
(
)
const
override
{
return
channel_
-
>
gathering_state
(
)
;
}
void
AddRemoteCandidate
(
const
Candidate
&
candidate
)
override
{
channel_
-
>
AddRemoteCandidate
(
candidate
)
;
}
void
SetIceConfig
(
const
IceConfig
&
config
)
override
{
channel_
-
>
SetIceConfig
(
config
)
;
}
TransportChannelImpl
*
channel
(
)
{
return
channel_
;
}
private
:
void
OnReadableState
(
TransportChannel
*
channel
)
;
void
OnWritableState
(
TransportChannel
*
channel
)
;
void
OnReadPacket
(
TransportChannel
*
channel
const
char
*
data
size_t
size
const
rtc
:
:
PacketTime
&
packet_time
int
flags
)
;
void
OnSentPacket
(
TransportChannel
*
channel
const
rtc
:
:
SentPacket
&
sent_packet
)
;
void
OnReadyToSend
(
TransportChannel
*
channel
)
;
void
OnReceivingState
(
TransportChannel
*
channel
)
;
void
OnDtlsEvent
(
rtc
:
:
StreamInterface
*
stream_
int
sig
int
err
)
;
bool
SetupDtls
(
)
;
bool
MaybeStartDtls
(
)
;
bool
HandleDtlsPacket
(
const
char
*
data
size_t
size
)
;
void
OnGatheringState
(
TransportChannelImpl
*
channel
)
;
void
OnCandidateGathered
(
TransportChannelImpl
*
channel
const
Candidate
&
c
)
;
void
OnRoleConflict
(
TransportChannelImpl
*
channel
)
;
void
OnRouteChange
(
TransportChannel
*
channel
const
Candidate
&
candidate
)
;
void
OnConnectionRemoved
(
TransportChannelImpl
*
channel
)
;
void
Reconnect
(
)
;
Transport
*
transport_
;
rtc
:
:
Thread
*
worker_thread_
;
TransportChannelImpl
*
const
channel_
;
rtc
:
:
scoped_ptr
<
rtc
:
:
SSLStreamAdapter
>
dtls_
;
StreamInterfaceChannel
*
downward_
;
std
:
:
vector
<
int
>
srtp_ciphers_
;
bool
dtls_active_
=
false
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
local_certificate_
;
rtc
:
:
SSLRole
ssl_role_
;
rtc
:
:
SSLProtocolVersion
ssl_max_version_
;
rtc
:
:
Buffer
remote_fingerprint_value_
;
std
:
:
string
remote_fingerprint_algorithm_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
DtlsTransportChannelWrapper
)
;
}
;
}
#
endif
