#
ifndef
WEBRTC_P2P_BASE_ICETRANSPORTINTERNAL_H_
#
define
WEBRTC_P2P_BASE_ICETRANSPORTINTERNAL_H_
#
include
<
string
>
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
candidatepairinterface
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
jseptransport
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
packettransportinterface
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transportdescription
.
h
"
namespace
webrtc
{
class
MetricsObserverInterface
;
}
namespace
cricket
{
class
IceTransportInternal
;
typedef
IceTransportInternal
IceTransportInternal2
;
enum
class
IceTransportState
{
STATE_INIT
STATE_CONNECTING
STATE_COMPLETED
STATE_FAILED
}
;
enum
IceProtocolType
{
ICEPROTO_RFC5245
}
;
class
IceTransportInternal
:
public
rtc
:
:
PacketTransportInterface
{
public
:
virtual
~
IceTransportInternal
(
)
{
}
;
virtual
IceTransportState
GetState
(
)
const
=
0
;
virtual
const
std
:
:
string
&
transport_name
(
)
const
=
0
;
virtual
int
component
(
)
const
=
0
;
virtual
IceRole
GetIceRole
(
)
const
=
0
;
virtual
void
SetIceRole
(
IceRole
role
)
=
0
;
virtual
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
=
0
;
virtual
void
SetIceProtocolType
(
IceProtocolType
type
)
{
}
virtual
void
SetIceCredentials
(
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
{
SetIceParameters
(
IceParameters
(
ice_ufrag
ice_pwd
false
)
)
;
}
virtual
void
SetRemoteIceCredentials
(
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
{
SetRemoteIceParameters
(
IceParameters
(
ice_ufrag
ice_pwd
false
)
)
;
}
virtual
void
SetIceParameters
(
const
IceParameters
&
ice_params
)
=
0
;
virtual
void
SetRemoteIceParameters
(
const
IceParameters
&
ice_params
)
=
0
;
virtual
void
SetRemoteIceMode
(
IceMode
mode
)
=
0
;
virtual
void
SetIceConfig
(
const
IceConfig
&
config
)
=
0
;
virtual
void
MaybeStartGathering
(
)
=
0
;
virtual
void
SetMetricsObserver
(
webrtc
:
:
MetricsObserverInterface
*
observer
)
=
0
;
virtual
void
AddRemoteCandidate
(
const
Candidate
&
candidate
)
=
0
;
virtual
void
RemoveRemoteCandidate
(
const
Candidate
&
candidate
)
=
0
;
virtual
IceGatheringState
gathering_state
(
)
const
=
0
;
virtual
bool
GetStats
(
ConnectionInfos
*
infos
)
=
0
;
sigslot
:
:
signal1
<
IceTransportInternal
*
>
SignalGatheringState
;
sigslot
:
:
signal2
<
IceTransportInternal
*
const
Candidate
&
>
SignalCandidateGathered
;
sigslot
:
:
signal2
<
IceTransportInternal
*
const
Candidates
&
>
SignalCandidatesRemoved
;
sigslot
:
:
signal2
<
IceTransportInternal
*
const
Candidate
&
>
SignalRouteChange
;
sigslot
:
:
signal4
<
IceTransportInternal
*
CandidatePairInterface
*
int
bool
>
SignalSelectedCandidatePairChanged
;
sigslot
:
:
signal1
<
IceTransportInternal
*
>
SignalRoleConflict
;
sigslot
:
:
signal1
<
IceTransportInternal
*
>
SignalStateChanged
;
sigslot
:
:
signal1
<
IceTransportInternal
*
>
SignalDestroyed
;
const
std
:
:
string
debug_name
(
)
const
override
{
return
transport_name
(
)
+
"
"
+
std
:
:
to_string
(
component
(
)
)
;
}
}
;
}
#
endif
