#
ifndef
WEBRTC_P2P_BASE_TRANSPORTCHANNELPROXY_H_
#
define
WEBRTC_P2P_BASE_TRANSPORTCHANNELPROXY_H_
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
webrtc
/
p2p
/
base
/
transportchannel
.
h
"
#
include
"
webrtc
/
base
/
messagehandler
.
h
"
namespace
rtc
{
class
Thread
;
}
namespace
cricket
{
class
TransportChannelImpl
;
class
TransportChannelProxy
:
public
TransportChannel
public
rtc
:
:
MessageHandler
{
public
:
TransportChannelProxy
(
const
std
:
:
string
&
content_name
int
component
)
;
virtual
~
TransportChannelProxy
(
)
;
TransportChannelImpl
*
impl
(
)
{
return
impl_
;
}
virtual
TransportChannelState
GetState
(
)
const
;
void
SetImplementation
(
TransportChannelImpl
*
impl
)
;
virtual
int
SendPacket
(
const
char
*
data
size_t
len
const
rtc
:
:
PacketOptions
&
options
int
flags
)
;
virtual
int
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
;
virtual
bool
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
;
virtual
int
GetError
(
)
;
virtual
IceRole
GetIceRole
(
)
const
;
virtual
bool
GetStats
(
ConnectionInfos
*
infos
)
;
virtual
bool
IsDtlsActive
(
)
const
;
virtual
bool
GetSslRole
(
rtc
:
:
SSLRole
*
role
)
const
;
virtual
bool
SetSslRole
(
rtc
:
:
SSLRole
role
)
;
virtual
bool
SetSrtpCiphers
(
const
std
:
:
vector
<
std
:
:
string
>
&
ciphers
)
;
virtual
bool
GetSrtpCipher
(
std
:
:
string
*
cipher
)
;
virtual
bool
GetSslCipher
(
std
:
:
string
*
cipher
)
;
virtual
bool
GetLocalIdentity
(
rtc
:
:
SSLIdentity
*
*
identity
)
const
;
virtual
bool
GetRemoteCertificate
(
rtc
:
:
SSLCertificate
*
*
cert
)
const
;
virtual
bool
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8
*
context
size_t
context_len
bool
use_context
uint8
*
result
size_t
result_len
)
;
private
:
void
OnReadableState
(
TransportChannel
*
channel
)
;
void
OnWritableState
(
TransportChannel
*
channel
)
;
void
OnReadPacket
(
TransportChannel
*
channel
const
char
*
data
size_t
size
const
rtc
:
:
PacketTime
&
packet_time
int
flags
)
;
void
OnReadyToSend
(
TransportChannel
*
channel
)
;
void
OnRouteChange
(
TransportChannel
*
channel
const
Candidate
&
candidate
)
;
void
OnMessage
(
rtc
:
:
Message
*
message
)
;
typedef
std
:
:
pair
<
rtc
:
:
Socket
:
:
Option
int
>
OptionPair
;
typedef
std
:
:
vector
<
OptionPair
>
OptionList
;
rtc
:
:
Thread
*
worker_thread_
;
TransportChannelImpl
*
impl_
;
OptionList
options_
;
std
:
:
vector
<
std
:
:
string
>
pending_srtp_ciphers_
;
DISALLOW_EVIL_CONSTRUCTORS
(
TransportChannelProxy
)
;
}
;
}
#
endif
