#
ifndef
WEBRTC_P2P_BASE_P2PTRANSPORTCHANNEL_H_
#
define
WEBRTC_P2P_BASE_P2PTRANSPORTCHANNEL_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
asyncpacketsocket
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
candidatepairinterface
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
icetransportinternal
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
portallocator
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
portinterface
.
h
"
namespace
cricket
{
enum
class
IceRestartState
{
CONNECTING
CONNECTED
DISCONNECTED
MAX_VALUE
}
;
extern
const
int
WEAK_PING_INTERVAL
;
extern
const
int
WEAK_OR_STABILIZING_WRITABLE_CONNECTION_PING_INTERVAL
;
extern
const
int
STRONG_AND_STABLE_WRITABLE_CONNECTION_PING_INTERVAL
;
static
const
int
MIN_PINGS_AT_WEAK_PING_INTERVAL
=
3
;
class
RemoteCandidate
:
public
Candidate
{
public
:
RemoteCandidate
(
const
Candidate
&
c
PortInterface
*
origin_port
)
:
Candidate
(
c
)
origin_port_
(
origin_port
)
{
}
PortInterface
*
origin_port
(
)
{
return
origin_port_
;
}
private
:
PortInterface
*
origin_port_
;
}
;
class
P2PTransportChannel
:
public
IceTransportInternal
public
rtc
:
:
MessageHandler
{
public
:
P2PTransportChannel
(
const
std
:
:
string
&
transport_name
int
component
PortAllocator
*
allocator
)
;
virtual
~
P2PTransportChannel
(
)
;
IceTransportState
GetState
(
)
const
override
;
const
std
:
:
string
&
transport_name
(
)
const
override
{
return
transport_name_
;
}
int
component
(
)
const
override
{
return
component_
;
}
bool
writable
(
)
const
override
{
return
writable_
;
}
bool
receiving
(
)
const
override
{
return
receiving_
;
}
void
SetIceRole
(
IceRole
role
)
override
;
IceRole
GetIceRole
(
)
const
override
{
return
ice_role_
;
}
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
override
;
void
SetIceParameters
(
const
IceParameters
&
ice_params
)
override
;
void
SetRemoteIceParameters
(
const
IceParameters
&
ice_params
)
override
;
void
SetRemoteIceMode
(
IceMode
mode
)
override
;
void
Connect
(
)
{
}
void
MaybeStartGathering
(
)
override
;
IceGatheringState
gathering_state
(
)
const
override
{
return
gathering_state_
;
}
void
AddRemoteCandidate
(
const
Candidate
&
candidate
)
override
;
void
RemoveRemoteCandidate
(
const
Candidate
&
candidate
)
override
;
void
SetIceConfig
(
const
IceConfig
&
config
)
override
;
const
IceConfig
&
config
(
)
const
;
void
SetMetricsObserver
(
webrtc
:
:
MetricsObserverInterface
*
observer
)
override
;
int
SendPacket
(
const
char
*
data
size_t
len
const
rtc
:
:
PacketOptions
&
options
int
flags
)
override
;
int
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
override
;
bool
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
override
;
int
GetError
(
)
override
{
return
error_
;
}
bool
GetStats
(
std
:
:
vector
<
ConnectionInfo
>
*
stats
)
override
;
const
Connection
*
best_connection
(
)
const
{
return
selected_connection_
;
}
const
Connection
*
selected_connection
(
)
const
{
return
selected_connection_
;
}
void
set_incoming_only
(
bool
value
)
{
incoming_only_
=
value
;
}
const
std
:
:
vector
<
PortInterface
*
>
&
ports
(
)
{
return
ports_
;
}
const
std
:
:
vector
<
PortInterface
*
>
&
pruned_ports
(
)
{
return
pruned_ports_
;
}
IceMode
remote_ice_mode
(
)
const
{
return
remote_ice_mode_
;
}
void
PruneAllPorts
(
)
;
int
receiving_timeout
(
)
const
{
return
config_
.
receiving_timeout
;
}
int
check_receiving_interval
(
)
const
{
return
check_receiving_interval_
;
}
rtc
:
:
DiffServCodePoint
DefaultDscpValue
(
)
const
;
Connection
*
FindNextPingableConnection
(
)
;
void
MarkConnectionPinged
(
Connection
*
conn
)
;
const
std
:
:
vector
<
Connection
*
>
&
connections
(
)
const
{
return
connections_
;
}
PortAllocatorSession
*
allocator_session
(
)
{
return
allocator_sessions_
.
back
(
)
.
get
(
)
;
}
const
std
:
:
vector
<
RemoteCandidate
>
&
remote_candidates
(
)
const
{
return
remote_candidates_
;
}
std
:
:
string
ToString
(
)
const
{
const
char
RECEIVING_ABBREV
[
2
]
=
{
'
_
'
'
R
'
}
;
const
char
WRITABLE_ABBREV
[
2
]
=
{
'
_
'
'
W
'
}
;
std
:
:
stringstream
ss
;
ss
<
<
"
Channel
[
"
<
<
transport_name_
<
<
"
|
"
<
<
component_
<
<
"
|
"
<
<
RECEIVING_ABBREV
[
receiving_
]
<
<
WRITABLE_ABBREV
[
writable_
]
<
<
"
]
"
;
return
ss
.
str
(
)
;
}
private
:
rtc
:
:
Thread
*
thread
(
)
const
{
return
network_thread_
;
}
bool
IsGettingPorts
(
)
{
return
allocator_session
(
)
-
>
IsGettingPorts
(
)
;
}
bool
weak
(
)
const
;
bool
ReadyToSend
(
Connection
*
connection
)
const
;
void
UpdateConnectionStates
(
)
;
void
RequestSortAndStateUpdate
(
)
;
void
MaybeStartPinging
(
)
;
int
CompareConnectionStates
(
const
cricket
:
:
Connection
*
a
const
cricket
:
:
Connection
*
b
rtc
:
:
Optional
<
int64_t
>
receiving_unchanged_threshold
bool
*
missed_receiving_unchanged_threshold
)
const
;
int
CompareConnectionCandidates
(
const
cricket
:
:
Connection
*
a
const
cricket
:
:
Connection
*
b
)
const
;
int
CompareConnections
(
const
cricket
:
:
Connection
*
a
const
cricket
:
:
Connection
*
b
rtc
:
:
Optional
<
int64_t
>
receiving_unchanged_threshold
bool
*
missed_receiving_unchanged_threshold
)
const
;
bool
PresumedWritable
(
const
cricket
:
:
Connection
*
conn
)
const
;
void
SortConnectionsAndUpdateState
(
)
;
void
SwitchSelectedConnection
(
Connection
*
conn
)
;
void
UpdateState
(
)
;
void
HandleAllTimedOut
(
)
;
void
MaybeStopPortAllocatorSessions
(
)
;
IceTransportState
ComputeState
(
)
const
;
Connection
*
GetBestConnectionOnNetwork
(
rtc
:
:
Network
*
network
)
const
;
bool
CreateConnections
(
const
Candidate
&
remote_candidate
PortInterface
*
origin_port
)
;
bool
CreateConnection
(
PortInterface
*
port
const
Candidate
&
remote_candidate
PortInterface
*
origin_port
)
;
bool
FindConnection
(
cricket
:
:
Connection
*
connection
)
const
;
uint32_t
GetRemoteCandidateGeneration
(
const
Candidate
&
candidate
)
;
bool
IsDuplicateRemoteCandidate
(
const
Candidate
&
candidate
)
;
void
RememberRemoteCandidate
(
const
Candidate
&
remote_candidate
PortInterface
*
origin_port
)
;
bool
IsPingable
(
const
Connection
*
conn
int64_t
now
)
const
;
bool
WritableConnectionPastPingInterval
(
const
Connection
*
conn
int64_t
now
)
const
;
int
CalculateActiveWritablePingInterval
(
const
Connection
*
conn
int64_t
now
)
const
;
void
PingConnection
(
Connection
*
conn
)
;
void
AddAllocatorSession
(
std
:
:
unique_ptr
<
PortAllocatorSession
>
session
)
;
void
AddConnection
(
Connection
*
connection
)
;
void
OnPortReady
(
PortAllocatorSession
*
session
PortInterface
*
port
)
;
void
OnPortsPruned
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
PortInterface
*
>
&
ports
)
;
void
OnCandidatesReady
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
Candidate
>
&
candidates
)
;
void
OnCandidatesRemoved
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
Candidate
>
&
candidates
)
;
void
OnCandidatesAllocationDone
(
PortAllocatorSession
*
session
)
;
void
OnUnknownAddress
(
PortInterface
*
port
const
rtc
:
:
SocketAddress
&
addr
ProtocolType
proto
IceMessage
*
stun_msg
const
std
:
:
string
&
remote_username
bool
port_muxed
)
;
void
OnPortDestroyed
(
PortInterface
*
port
)
;
bool
PrunePort
(
PortInterface
*
port
)
;
void
OnRoleConflict
(
PortInterface
*
port
)
;
void
OnConnectionStateChange
(
Connection
*
connection
)
;
void
OnReadPacket
(
Connection
*
connection
const
char
*
data
size_t
len
const
rtc
:
:
PacketTime
&
packet_time
)
;
void
OnSentPacket
(
const
rtc
:
:
SentPacket
&
sent_packet
)
;
void
OnReadyToSend
(
Connection
*
connection
)
;
void
OnConnectionDestroyed
(
Connection
*
connection
)
;
void
OnNominated
(
Connection
*
conn
)
;
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
override
;
void
OnCheckAndPing
(
)
;
void
OnRegatherOnFailedNetworks
(
)
;
uint32_t
GetNominationAttr
(
Connection
*
conn
)
const
;
bool
GetUseCandidateAttr
(
Connection
*
conn
NominationMode
mode
)
const
;
bool
ShouldSwitchSelectedConnection
(
Connection
*
new_connection
bool
*
missed_receiving_unchanged_threshold
)
const
;
bool
MaybeSwitchSelectedConnection
(
Connection
*
new_connection
const
std
:
:
string
&
reason
)
;
std
:
:
map
<
rtc
:
:
Network
*
Connection
*
>
GetBestConnectionByNetwork
(
)
const
;
std
:
:
vector
<
Connection
*
>
GetBestWritableConnectionPerNetwork
(
)
const
;
void
PruneConnections
(
)
;
bool
IsBackupConnection
(
const
Connection
*
conn
)
const
;
Connection
*
FindOldestConnectionNeedingTriggeredCheck
(
int64_t
now
)
;
Connection
*
MorePingable
(
Connection
*
conn1
Connection
*
conn2
)
;
Connection
*
MostLikelyToWork
(
Connection
*
conn1
Connection
*
conn2
)
;
Connection
*
LeastRecentlyPinged
(
Connection
*
conn1
Connection
*
conn2
)
;
IceParameters
*
remote_ice
(
)
{
return
remote_ice_parameters_
.
empty
(
)
?
nullptr
:
&
remote_ice_parameters_
.
back
(
)
;
}
const
IceParameters
*
FindRemoteIceFromUfrag
(
const
std
:
:
string
&
ufrag
uint32_t
*
generation
)
;
uint32_t
remote_ice_generation
(
)
{
return
remote_ice_parameters_
.
empty
(
)
?
0
:
static_cast
<
uint32_t
>
(
remote_ice_parameters_
.
size
(
)
-
1
)
;
}
void
set_writable
(
bool
writable
)
;
void
set_receiving
(
bool
receiving
)
;
std
:
:
string
transport_name_
;
int
component_
;
PortAllocator
*
allocator_
;
rtc
:
:
Thread
*
network_thread_
;
bool
incoming_only_
;
int
error_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
PortAllocatorSession
>
>
allocator_sessions_
;
std
:
:
vector
<
PortInterface
*
>
ports_
;
std
:
:
vector
<
PortInterface
*
>
pruned_ports_
;
std
:
:
vector
<
Connection
*
>
connections_
;
std
:
:
set
<
Connection
*
>
pinged_connections_
;
std
:
:
set
<
Connection
*
>
unpinged_connections_
;
Connection
*
selected_connection_
=
nullptr
;
std
:
:
vector
<
RemoteCandidate
>
remote_candidates_
;
bool
sort_dirty_
;
bool
had_connection_
=
false
;
typedef
std
:
:
map
<
rtc
:
:
Socket
:
:
Option
int
>
OptionMap
;
OptionMap
options_
;
IceParameters
ice_parameters_
;
std
:
:
vector
<
IceParameters
>
remote_ice_parameters_
;
IceMode
remote_ice_mode_
;
IceRole
ice_role_
;
uint64_t
tiebreaker_
;
IceGatheringState
gathering_state_
;
int
check_receiving_interval_
;
int64_t
last_ping_sent_ms_
=
0
;
int
weak_ping_interval_
=
WEAK_PING_INTERVAL
;
IceTransportState
state_
=
IceTransportState
:
:
STATE_INIT
;
IceConfig
config_
;
int
last_sent_packet_id_
=
-
1
;
bool
started_pinging_
=
false
;
uint32_t
nomination_
=
0
;
bool
receiving_
=
false
;
bool
writable_
=
false
;
webrtc
:
:
MetricsObserverInterface
*
metrics_observer_
=
nullptr
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
P2PTransportChannel
)
;
}
;
}
#
endif
