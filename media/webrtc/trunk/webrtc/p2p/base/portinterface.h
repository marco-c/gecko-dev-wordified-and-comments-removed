#
ifndef
WEBRTC_P2P_BASE_PORTINTERFACE_H_
#
define
WEBRTC_P2P_BASE_PORTINTERFACE_H_
#
include
<
string
>
#
include
"
webrtc
/
base
/
asyncpacketsocket
.
h
"
#
include
"
webrtc
/
base
/
socketaddress
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
jseptransport
.
h
"
namespace
rtc
{
class
Network
;
struct
PacketOptions
;
}
namespace
cricket
{
class
Connection
;
class
IceMessage
;
class
StunMessage
;
enum
ProtocolType
{
PROTO_UDP
PROTO_TCP
PROTO_SSLTCP
PROTO_TLS
PROTO_LAST
=
PROTO_TLS
}
;
class
PortInterface
{
public
:
virtual
~
PortInterface
(
)
{
}
virtual
const
std
:
:
string
&
Type
(
)
const
=
0
;
virtual
rtc
:
:
Network
*
Network
(
)
const
=
0
;
virtual
void
SetIceRole
(
IceRole
role
)
=
0
;
virtual
IceRole
GetIceRole
(
)
const
=
0
;
virtual
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
=
0
;
virtual
uint64_t
IceTiebreaker
(
)
const
=
0
;
virtual
bool
SharedSocket
(
)
const
=
0
;
virtual
bool
SupportsProtocol
(
const
std
:
:
string
&
protocol
)
const
=
0
;
virtual
void
PrepareAddress
(
)
=
0
;
virtual
Connection
*
GetConnection
(
const
rtc
:
:
SocketAddress
&
remote_addr
)
=
0
;
enum
CandidateOrigin
{
ORIGIN_THIS_PORT
ORIGIN_OTHER_PORT
ORIGIN_MESSAGE
}
;
virtual
Connection
*
CreateConnection
(
const
Candidate
&
remote_candidate
CandidateOrigin
origin
)
=
0
;
virtual
int
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
=
0
;
virtual
int
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
=
0
;
virtual
int
GetError
(
)
=
0
;
virtual
ProtocolType
GetProtocol
(
)
const
=
0
;
virtual
const
std
:
:
vector
<
Candidate
>
&
Candidates
(
)
const
=
0
;
virtual
int
SendTo
(
const
void
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
addr
const
rtc
:
:
PacketOptions
&
options
bool
payload
)
=
0
;
sigslot
:
:
signal6
<
PortInterface
*
const
rtc
:
:
SocketAddress
&
ProtocolType
IceMessage
*
const
std
:
:
string
&
bool
>
SignalUnknownAddress
;
virtual
void
SendBindingResponse
(
StunMessage
*
request
const
rtc
:
:
SocketAddress
&
addr
)
=
0
;
virtual
void
SendBindingErrorResponse
(
StunMessage
*
request
const
rtc
:
:
SocketAddress
&
addr
int
error_code
const
std
:
:
string
&
reason
)
=
0
;
sigslot
:
:
signal1
<
PortInterface
*
>
SignalDestroyed
;
sigslot
:
:
signal1
<
PortInterface
*
>
SignalRoleConflict
;
virtual
void
EnablePortPackets
(
)
=
0
;
sigslot
:
:
signal4
<
PortInterface
*
const
char
*
size_t
const
rtc
:
:
SocketAddress
&
>
SignalReadPacket
;
sigslot
:
:
signal1
<
const
rtc
:
:
SentPacket
&
>
SignalSentPacket
;
virtual
std
:
:
string
ToString
(
)
const
=
0
;
protected
:
PortInterface
(
)
{
}
}
;
}
#
endif
