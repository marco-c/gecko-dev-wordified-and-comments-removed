#
ifndef
WEBRTC_P2P_BASE_STUNREQUEST_H_
#
define
WEBRTC_P2P_BASE_STUNREQUEST_H_
#
include
<
map
>
#
include
<
string
>
#
include
"
webrtc
/
p2p
/
base
/
stun
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
namespace
cricket
{
class
StunRequest
;
const
int
kAllRequests
=
0
;
class
StunRequestManager
{
public
:
StunRequestManager
(
rtc
:
:
Thread
*
thread
)
;
~
StunRequestManager
(
)
;
void
Send
(
StunRequest
*
request
)
;
void
SendDelayed
(
StunRequest
*
request
int
delay
)
;
void
Flush
(
int
msg_type
)
;
void
Remove
(
StunRequest
*
request
)
;
void
Clear
(
)
;
bool
CheckResponse
(
StunMessage
*
msg
)
;
bool
CheckResponse
(
const
char
*
data
size_t
size
)
;
bool
empty
(
)
{
return
requests_
.
empty
(
)
;
}
void
set_origin
(
const
std
:
:
string
&
origin
)
{
origin_
=
origin
;
}
sigslot
:
:
signal3
<
const
void
*
size_t
StunRequest
*
>
SignalSendPacket
;
private
:
typedef
std
:
:
map
<
std
:
:
string
StunRequest
*
>
RequestMap
;
rtc
:
:
Thread
*
thread_
;
RequestMap
requests_
;
std
:
:
string
origin_
;
friend
class
StunRequest
;
}
;
class
StunRequest
:
public
rtc
:
:
MessageHandler
{
public
:
StunRequest
(
)
;
StunRequest
(
StunMessage
*
request
)
;
virtual
~
StunRequest
(
)
;
void
Construct
(
)
;
StunRequestManager
*
manager
(
)
{
return
manager_
;
}
const
std
:
:
string
&
id
(
)
{
return
msg_
-
>
transaction_id
(
)
;
}
const
std
:
:
string
&
origin
(
)
const
{
return
origin_
;
}
void
set_origin
(
const
std
:
:
string
&
origin
)
{
origin_
=
origin
;
}
int
type
(
)
;
const
StunMessage
*
msg
(
)
const
;
uint32_t
Elapsed
(
)
const
;
protected
:
int
count_
;
bool
timeout_
;
std
:
:
string
origin_
;
virtual
void
Prepare
(
StunMessage
*
request
)
{
}
virtual
void
OnResponse
(
StunMessage
*
response
)
{
}
virtual
void
OnErrorResponse
(
StunMessage
*
response
)
{
}
virtual
void
OnTimeout
(
)
{
}
virtual
void
OnSent
(
)
;
virtual
int
resend_delay
(
)
;
private
:
void
set_manager
(
StunRequestManager
*
manager
)
;
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
;
StunRequestManager
*
manager_
;
StunMessage
*
msg_
;
uint32_t
tstamp_
;
friend
class
StunRequestManager
;
}
;
}
#
endif
