#
ifndef
WEBRTC_P2P_BASE_RAWTRANSPORTCHANNEL_H_
#
define
WEBRTC_P2P_BASE_RAWTRANSPORTCHANNEL_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
rawtransport
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transportchannelimpl
.
h
"
#
include
"
webrtc
/
base
/
messagequeue
.
h
"
#
if
defined
(
FEATURE_ENABLE_PSTN
)
namespace
rtc
{
class
Thread
;
}
namespace
cricket
{
class
Connection
;
class
PortAllocator
;
class
PortAllocatorSession
;
class
PortInterface
;
class
RelayPort
;
class
StunPort
;
class
RawTransportChannel
:
public
TransportChannelImpl
public
rtc
:
:
MessageHandler
{
public
:
RawTransportChannel
(
const
std
:
:
string
&
content_name
int
component
RawTransport
*
transport
rtc
:
:
Thread
*
worker_thread
PortAllocator
*
allocator
)
;
virtual
~
RawTransportChannel
(
)
;
virtual
int
SendPacket
(
const
char
*
data
size_t
len
const
rtc
:
:
PacketOptions
&
options
int
flags
)
;
virtual
int
SetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
value
)
;
virtual
bool
GetOption
(
rtc
:
:
Socket
:
:
Option
opt
int
*
value
)
;
virtual
int
GetError
(
)
;
virtual
Transport
*
GetTransport
(
)
{
return
raw_transport_
;
}
virtual
TransportChannelState
GetState
(
)
const
{
return
TransportChannelState
:
:
STATE_COMPLETED
;
}
virtual
void
SetIceCredentials
(
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
{
}
virtual
void
SetRemoteIceCredentials
(
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
{
}
virtual
void
Connect
(
)
;
virtual
void
Reset
(
)
;
virtual
void
OnSignalingReady
(
)
{
}
virtual
void
OnCandidate
(
const
Candidate
&
candidate
)
;
void
OnRemoteAddress
(
const
rtc
:
:
SocketAddress
&
remote_address
)
;
virtual
IceRole
GetIceRole
(
)
const
{
return
ICEROLE_UNKNOWN
;
}
virtual
void
SetIceRole
(
IceRole
role
)
{
}
virtual
void
SetIceTiebreaker
(
uint64
tiebreaker
)
{
}
virtual
bool
GetIceProtocolType
(
IceProtocolType
*
type
)
const
{
return
false
;
}
virtual
void
SetIceProtocolType
(
IceProtocolType
type
)
{
}
virtual
void
SetIceUfrag
(
const
std
:
:
string
&
ice_ufrag
)
{
}
virtual
void
SetIcePwd
(
const
std
:
:
string
&
ice_pwd
)
{
}
virtual
void
SetRemoteIceMode
(
IceMode
mode
)
{
}
virtual
size_t
GetConnectionCount
(
)
const
{
return
1
;
}
virtual
bool
GetStats
(
ConnectionInfos
*
infos
)
{
return
false
;
}
virtual
bool
IsDtlsActive
(
)
const
{
return
false
;
}
virtual
bool
GetSslRole
(
rtc
:
:
SSLRole
*
role
)
const
{
return
false
;
}
virtual
bool
SetSslRole
(
rtc
:
:
SSLRole
role
)
{
return
false
;
}
virtual
bool
SetSrtpCiphers
(
const
std
:
:
vector
<
std
:
:
string
>
&
ciphers
)
{
return
false
;
}
virtual
bool
GetSrtpCipher
(
std
:
:
string
*
cipher
)
{
return
false
;
}
virtual
bool
GetSslCipher
(
std
:
:
string
*
cipher
)
{
return
false
;
}
virtual
bool
GetLocalIdentity
(
rtc
:
:
SSLIdentity
*
*
identity
)
const
{
return
false
;
}
virtual
bool
GetRemoteCertificate
(
rtc
:
:
SSLCertificate
*
*
cert
)
const
{
return
false
;
}
virtual
bool
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8
*
context
size_t
context_len
bool
use_context
uint8
*
result
size_t
result_len
)
{
return
false
;
}
virtual
bool
SetLocalIdentity
(
rtc
:
:
SSLIdentity
*
identity
)
{
return
false
;
}
virtual
bool
SetRemoteFingerprint
(
const
std
:
:
string
&
digest_alg
const
uint8
*
digest
size_t
digest_len
)
{
return
false
;
}
private
:
RawTransport
*
raw_transport_
;
rtc
:
:
Thread
*
worker_thread_
;
PortAllocator
*
allocator_
;
PortAllocatorSession
*
allocator_session_
;
StunPort
*
stun_port_
;
RelayPort
*
relay_port_
;
PortInterface
*
port_
;
bool
use_relay_
;
rtc
:
:
SocketAddress
remote_address_
;
void
OnPortReady
(
PortAllocatorSession
*
session
PortInterface
*
port
)
;
void
OnCandidatesReady
(
PortAllocatorSession
*
session
const
std
:
:
vector
<
Candidate
>
&
candidates
)
;
void
SetPort
(
PortInterface
*
port
)
;
void
SetWritable
(
)
;
void
OnReadPacket
(
PortInterface
*
port
const
char
*
data
size_t
size
const
rtc
:
:
SocketAddress
&
addr
)
;
virtual
void
OnMessage
(
rtc
:
:
Message
*
msg
)
;
DISALLOW_EVIL_CONSTRUCTORS
(
RawTransportChannel
)
;
}
;
}
#
endif
#
endif
