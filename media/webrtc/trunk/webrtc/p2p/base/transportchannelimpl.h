#
ifndef
WEBRTC_P2P_BASE_TRANSPORTCHANNELIMPL_H_
#
define
WEBRTC_P2P_BASE_TRANSPORTCHANNELIMPL_H_
#
include
<
string
>
#
include
"
webrtc
/
p2p
/
base
/
transport
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transportchannel
.
h
"
namespace
buzz
{
class
XmlElement
;
}
namespace
cricket
{
class
Candidate
;
enum
IceProtocolType
{
ICEPROTO_RFC5245
}
;
class
TransportChannelImpl
:
public
TransportChannel
{
public
:
explicit
TransportChannelImpl
(
const
std
:
:
string
&
transport_name
int
component
)
:
TransportChannel
(
transport_name
component
)
{
}
virtual
Transport
*
GetTransport
(
)
=
0
;
virtual
IceRole
GetIceRole
(
)
const
=
0
;
virtual
void
SetIceRole
(
IceRole
role
)
=
0
;
virtual
void
SetIceTiebreaker
(
uint64_t
tiebreaker
)
=
0
;
virtual
void
SetIceProtocolType
(
IceProtocolType
type
)
{
}
virtual
void
SetIceCredentials
(
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
=
0
;
virtual
void
SetRemoteIceCredentials
(
const
std
:
:
string
&
ice_ufrag
const
std
:
:
string
&
ice_pwd
)
=
0
;
virtual
void
SetRemoteIceMode
(
IceMode
mode
)
=
0
;
virtual
void
SetIceConfig
(
const
IceConfig
&
config
)
=
0
;
virtual
void
Connect
(
)
=
0
;
virtual
void
MaybeStartGathering
(
)
=
0
;
sigslot
:
:
signal1
<
TransportChannelImpl
*
>
SignalGatheringState
;
sigslot
:
:
signal2
<
TransportChannelImpl
*
const
Candidate
&
>
SignalCandidateGathered
;
virtual
void
AddRemoteCandidate
(
const
Candidate
&
candidate
)
=
0
;
virtual
IceGatheringState
gathering_state
(
)
const
=
0
;
virtual
bool
SetLocalCertificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
=
0
;
virtual
bool
SetRemoteFingerprint
(
const
std
:
:
string
&
digest_alg
const
uint8_t
*
digest
size_t
digest_len
)
=
0
;
virtual
bool
SetSslRole
(
rtc
:
:
SSLRole
role
)
=
0
;
sigslot
:
:
signal1
<
TransportChannelImpl
*
>
SignalRoleConflict
;
sigslot
:
:
signal1
<
TransportChannelImpl
*
>
SignalConnectionRemoved
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
TransportChannelImpl
)
;
}
;
}
#
endif
