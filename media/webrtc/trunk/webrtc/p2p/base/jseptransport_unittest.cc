#
include
<
memory
>
#
include
"
webrtc
/
base
/
fakesslidentity
.
h
"
#
include
"
webrtc
/
base
/
gunit
.
h
"
#
include
"
webrtc
/
base
/
network
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
faketransportcontroller
.
h
"
using
cricket
:
:
JsepTransport
;
using
cricket
:
:
TransportChannel
;
using
cricket
:
:
FakeTransportChannel
;
using
cricket
:
:
IceRole
;
using
cricket
:
:
TransportDescription
;
using
rtc
:
:
SocketAddress
;
static
const
char
kIceUfrag1
[
]
=
"
TESTICEUFRAG0001
"
;
static
const
char
kIcePwd1
[
]
=
"
TESTICEPWD00000000000001
"
;
static
const
char
kIceUfrag2
[
]
=
"
TESTICEUFRAG0002
"
;
static
const
char
kIcePwd2
[
]
=
"
TESTICEPWD00000000000002
"
;
class
JsepTransportTest
:
public
testing
:
:
Test
public
sigslot
:
:
has_slots
<
>
{
public
:
JsepTransportTest
(
)
:
transport_
(
new
JsepTransport
(
"
test
content
name
"
nullptr
)
)
{
}
bool
SetupChannel
(
)
{
fake_ice_channel_
.
reset
(
new
FakeTransportChannel
(
transport_
-
>
mid
(
)
1
)
)
;
fake_dtls_channel_
.
reset
(
new
FakeTransportChannel
(
transport_
-
>
mid
(
)
1
)
)
;
return
transport_
-
>
AddChannel
(
fake_dtls_channel_
.
get
(
)
1
)
;
}
void
DestroyChannel
(
)
{
transport_
-
>
RemoveChannel
(
1
)
;
}
protected
:
std
:
:
unique_ptr
<
FakeTransportChannel
>
fake_dtls_channel_
;
std
:
:
unique_ptr
<
FakeTransportChannel
>
fake_ice_channel_
;
std
:
:
unique_ptr
<
JsepTransport
>
transport_
;
}
;
TEST_F
(
JsepTransportTest
TestChannelIceParameters
)
{
cricket
:
:
TransportDescription
local_desc
(
kIceUfrag1
kIcePwd1
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
local_desc
cricket
:
:
CA_OFFER
NULL
)
)
;
EXPECT_TRUE
(
SetupChannel
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEMODE_FULL
fake_dtls_channel_
-
>
remote_ice_mode
(
)
)
;
EXPECT_EQ
(
kIceUfrag1
fake_dtls_channel_
-
>
ice_ufrag
(
)
)
;
EXPECT_EQ
(
kIcePwd1
fake_dtls_channel_
-
>
ice_pwd
(
)
)
;
cricket
:
:
TransportDescription
remote_desc
(
kIceUfrag1
kIcePwd1
)
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
cricket
:
:
CA_ANSWER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEMODE_FULL
fake_dtls_channel_
-
>
remote_ice_mode
(
)
)
;
EXPECT_EQ
(
kIceUfrag1
fake_dtls_channel_
-
>
remote_ice_ufrag
(
)
)
;
EXPECT_EQ
(
kIcePwd1
fake_dtls_channel_
-
>
remote_ice_pwd
(
)
)
;
}
TEST_F
(
JsepTransportTest
TestIceCredentialsChanged
)
{
EXPECT_TRUE
(
cricket
:
:
IceCredentialsChanged
(
"
u1
"
"
p1
"
"
u2
"
"
p2
"
)
)
;
EXPECT_TRUE
(
cricket
:
:
IceCredentialsChanged
(
"
u1
"
"
p1
"
"
u2
"
"
p1
"
)
)
;
EXPECT_TRUE
(
cricket
:
:
IceCredentialsChanged
(
"
u1
"
"
p1
"
"
u1
"
"
p2
"
)
)
;
EXPECT_FALSE
(
cricket
:
:
IceCredentialsChanged
(
"
u1
"
"
p1
"
"
u1
"
"
p1
"
)
)
;
}
TEST_F
(
JsepTransportTest
NeedsIceRestart
)
{
cricket
:
:
TransportDescription
local_desc
(
kIceUfrag1
kIcePwd1
)
;
cricket
:
:
TransportDescription
remote_desc
(
kIceUfrag1
kIcePwd1
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
local_desc
cricket
:
:
CA_OFFER
nullptr
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
cricket
:
:
CA_ANSWER
nullptr
)
)
;
EXPECT_FALSE
(
transport_
-
>
NeedsIceRestart
(
)
)
;
transport_
-
>
SetNeedsIceRestartFlag
(
)
;
EXPECT_TRUE
(
transport_
-
>
NeedsIceRestart
(
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
local_desc
cricket
:
:
CA_OFFER
nullptr
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
cricket
:
:
CA_ANSWER
nullptr
)
)
;
EXPECT_TRUE
(
transport_
-
>
NeedsIceRestart
(
)
)
;
cricket
:
:
TransportDescription
ice_restart_local_desc
(
kIceUfrag2
kIcePwd2
)
;
cricket
:
:
TransportDescription
ice_restart_remote_desc
(
kIceUfrag2
kIcePwd2
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
ice_restart_local_desc
cricket
:
:
CA_OFFER
nullptr
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
ice_restart_remote_desc
cricket
:
:
CA_ANSWER
nullptr
)
)
;
EXPECT_FALSE
(
transport_
-
>
NeedsIceRestart
(
)
)
;
}
TEST_F
(
JsepTransportTest
TestGetStats
)
{
EXPECT_TRUE
(
SetupChannel
(
)
)
;
cricket
:
:
TransportStats
stats
;
EXPECT_TRUE
(
transport_
-
>
GetStats
(
&
stats
)
)
;
ASSERT_EQ
(
1U
stats
.
channel_stats
.
size
(
)
)
;
EXPECT_EQ
(
1
stats
.
channel_stats
[
0
]
.
component
)
;
TransportDescription
faketransport_desc
(
std
:
:
vector
<
std
:
:
string
>
(
)
rtc
:
:
CreateRandomString
(
cricket
:
:
ICE_UFRAG_LENGTH
)
rtc
:
:
CreateRandomString
(
cricket
:
:
ICE_PWD_LENGTH
)
cricket
:
:
ICEMODE_FULL
cricket
:
:
CONNECTIONROLE_NONE
nullptr
)
;
transport_
-
>
SetLocalTransportDescription
(
faketransport_desc
cricket
:
:
CA_OFFER
nullptr
)
;
EXPECT_TRUE
(
transport_
-
>
GetStats
(
&
stats
)
)
;
ASSERT_EQ
(
1U
stats
.
channel_stats
.
size
(
)
)
;
EXPECT_EQ
(
1
stats
.
channel_stats
[
0
]
.
component
)
;
}
TEST_F
(
JsepTransportTest
TestVerifyCertificateFingerprint
)
{
std
:
:
string
error_desc
;
EXPECT_FALSE
(
transport_
-
>
VerifyCertificateFingerprint
(
nullptr
nullptr
&
error_desc
)
)
;
rtc
:
:
KeyType
key_types
[
]
=
{
rtc
:
:
KT_RSA
rtc
:
:
KT_ECDSA
}
;
for
(
auto
&
key_type
:
key_types
)
{
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
certificate
=
rtc
:
:
RTCCertificate
:
:
Create
(
std
:
:
unique_ptr
<
rtc
:
:
SSLIdentity
>
(
rtc
:
:
SSLIdentity
:
:
Generate
(
"
testing
"
key_type
)
)
)
;
ASSERT_NE
(
nullptr
certificate
)
;
std
:
:
string
digest_algorithm
;
ASSERT_TRUE
(
certificate
-
>
ssl_certificate
(
)
.
GetSignatureDigestAlgorithm
(
&
digest_algorithm
)
)
;
ASSERT_FALSE
(
digest_algorithm
.
empty
(
)
)
;
std
:
:
unique_ptr
<
rtc
:
:
SSLFingerprint
>
good_fingerprint
(
rtc
:
:
SSLFingerprint
:
:
Create
(
digest_algorithm
certificate
-
>
identity
(
)
)
)
;
ASSERT_NE
(
nullptr
good_fingerprint
)
;
EXPECT_TRUE
(
transport_
-
>
VerifyCertificateFingerprint
(
certificate
.
get
(
)
good_fingerprint
.
get
(
)
&
error_desc
)
)
;
EXPECT_FALSE
(
transport_
-
>
VerifyCertificateFingerprint
(
certificate
.
get
(
)
nullptr
&
error_desc
)
)
;
EXPECT_FALSE
(
transport_
-
>
VerifyCertificateFingerprint
(
nullptr
good_fingerprint
.
get
(
)
&
error_desc
)
)
;
rtc
:
:
SSLFingerprint
bad_fingerprint
=
*
good_fingerprint
;
bad_fingerprint
.
digest
.
AppendData
(
"
0
"
1
)
;
EXPECT_FALSE
(
transport_
-
>
VerifyCertificateFingerprint
(
certificate
.
get
(
)
&
bad_fingerprint
&
error_desc
)
)
;
}
}
TEST_F
(
JsepTransportTest
TestNegotiateRole
)
{
TransportDescription
local_desc
(
kIceUfrag1
kIcePwd1
)
;
TransportDescription
remote_desc
(
kIceUfrag2
kIcePwd2
)
;
struct
NegotiateRoleParams
{
cricket
:
:
ConnectionRole
local_role
;
cricket
:
:
ConnectionRole
remote_role
;
cricket
:
:
ContentAction
local_action
;
cricket
:
:
ContentAction
remote_action
;
}
;
rtc
:
:
SSLRole
ssl_role
;
std
:
:
string
error_desc
;
NegotiateRoleParams
valid_client_params
[
]
=
{
{
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CA_ANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CA_PRANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_ANSWER
}
{
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_PRANSWER
}
}
;
for
(
auto
&
param
:
valid_client_params
)
{
local_desc
.
connection_role
=
param
.
local_role
;
remote_desc
.
connection_role
=
param
.
remote_role
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
param
.
remote_action
nullptr
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
local_desc
param
.
local_action
nullptr
)
)
;
EXPECT_TRUE
(
transport_
-
>
NegotiateRole
(
param
.
local_action
&
ssl_role
&
error_desc
)
)
;
EXPECT_EQ
(
rtc
:
:
SSL_CLIENT
ssl_role
)
;
}
NegotiateRoleParams
valid_server_params
[
]
=
{
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CA_ANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CA_PRANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_ANSWER
}
{
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_PRANSWER
}
}
;
for
(
auto
&
param
:
valid_server_params
)
{
local_desc
.
connection_role
=
param
.
local_role
;
remote_desc
.
connection_role
=
param
.
remote_role
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
param
.
remote_action
nullptr
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
local_desc
param
.
local_action
nullptr
)
)
;
EXPECT_TRUE
(
transport_
-
>
NegotiateRole
(
param
.
local_action
&
ssl_role
&
error_desc
)
)
;
EXPECT_EQ
(
rtc
:
:
SSL_SERVER
ssl_role
)
;
}
NegotiateRoleParams
duplicate_params
[
]
=
{
{
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CA_ANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CA_ANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_ANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CA_PRANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CA_PRANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_PRANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_ANSWER
}
{
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CA_OFFER
cricket
:
:
CA_ANSWER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_ANSWER
}
{
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_PRANSWER
}
{
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CA_OFFER
cricket
:
:
CA_PRANSWER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_PRANSWER
}
}
;
for
(
auto
&
param
:
duplicate_params
)
{
local_desc
.
connection_role
=
param
.
local_role
;
remote_desc
.
connection_role
=
param
.
remote_role
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
param
.
remote_action
nullptr
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
local_desc
param
.
local_action
nullptr
)
)
;
EXPECT_FALSE
(
transport_
-
>
NegotiateRole
(
param
.
local_action
&
ssl_role
&
error_desc
)
)
;
}
NegotiateRoleParams
offerer_without_actpass_params
[
]
=
{
{
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_ANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CA_ANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_ANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_PRANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CA_PRANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_PRANSWER
cricket
:
:
CA_OFFER
}
{
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_ANSWER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_ANSWER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CA_OFFER
cricket
:
:
CA_ANSWER
}
{
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_PRANSWER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_ACTIVE
cricket
:
:
CA_OFFER
cricket
:
:
CA_PRANSWER
}
{
cricket
:
:
CONNECTIONROLE_PASSIVE
cricket
:
:
CONNECTIONROLE_ACTPASS
cricket
:
:
CA_OFFER
cricket
:
:
CA_PRANSWER
}
}
;
for
(
auto
&
param
:
offerer_without_actpass_params
)
{
local_desc
.
connection_role
=
param
.
local_role
;
remote_desc
.
connection_role
=
param
.
remote_role
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
param
.
remote_action
nullptr
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
local_desc
param
.
local_action
nullptr
)
)
;
EXPECT_FALSE
(
transport_
-
>
NegotiateRole
(
param
.
local_action
&
ssl_role
&
error_desc
)
)
;
}
}
