#
include
"
webrtc
/
base
/
fakesslidentity
.
h
"
#
include
"
webrtc
/
base
/
gunit
.
h
"
#
include
"
webrtc
/
base
/
network
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
faketransportcontroller
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
p2ptransport
.
h
"
using
cricket
:
:
Candidate
;
using
cricket
:
:
Candidates
;
using
cricket
:
:
Transport
;
using
cricket
:
:
FakeTransport
;
using
cricket
:
:
TransportChannel
;
using
cricket
:
:
FakeTransportChannel
;
using
cricket
:
:
IceRole
;
using
cricket
:
:
TransportDescription
;
using
rtc
:
:
SocketAddress
;
static
const
char
kIceUfrag1
[
]
=
"
TESTICEUFRAG0001
"
;
static
const
char
kIcePwd1
[
]
=
"
TESTICEPWD00000000000001
"
;
static
const
char
kIceUfrag2
[
]
=
"
TESTICEUFRAG0002
"
;
static
const
char
kIcePwd2
[
]
=
"
TESTICEPWD00000000000002
"
;
class
TransportTest
:
public
testing
:
:
Test
public
sigslot
:
:
has_slots
<
>
{
public
:
TransportTest
(
)
:
transport_
(
new
FakeTransport
(
"
test
content
name
"
)
)
channel_
(
NULL
)
{
}
~
TransportTest
(
)
{
transport_
-
>
DestroyAllChannels
(
)
;
}
bool
SetupChannel
(
)
{
channel_
=
CreateChannel
(
1
)
;
return
(
channel_
!
=
NULL
)
;
}
FakeTransportChannel
*
CreateChannel
(
int
component
)
{
return
static_cast
<
FakeTransportChannel
*
>
(
transport_
-
>
CreateChannel
(
component
)
)
;
}
void
DestroyChannel
(
)
{
transport_
-
>
DestroyChannel
(
1
)
;
channel_
=
NULL
;
}
protected
:
rtc
:
:
scoped_ptr
<
FakeTransport
>
transport_
;
FakeTransportChannel
*
channel_
;
}
;
TEST_F
(
TransportTest
TestChannelIceParameters
)
{
transport_
-
>
SetIceRole
(
cricket
:
:
ICEROLE_CONTROLLING
)
;
transport_
-
>
SetIceTiebreaker
(
99U
)
;
cricket
:
:
TransportDescription
local_desc
(
kIceUfrag1
kIcePwd1
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
local_desc
cricket
:
:
CA_OFFER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
transport_
-
>
ice_role
(
)
)
;
EXPECT_TRUE
(
SetupChannel
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
channel_
-
>
GetIceRole
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEMODE_FULL
channel_
-
>
remote_ice_mode
(
)
)
;
EXPECT_EQ
(
kIceUfrag1
channel_
-
>
ice_ufrag
(
)
)
;
EXPECT_EQ
(
kIcePwd1
channel_
-
>
ice_pwd
(
)
)
;
cricket
:
:
TransportDescription
remote_desc
(
kIceUfrag1
kIcePwd1
)
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
cricket
:
:
CA_ANSWER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
channel_
-
>
GetIceRole
(
)
)
;
EXPECT_EQ
(
99U
channel_
-
>
IceTiebreaker
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEMODE_FULL
channel_
-
>
remote_ice_mode
(
)
)
;
transport_
-
>
SetIceRole
(
cricket
:
:
ICEROLE_CONTROLLED
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLED
channel_
-
>
GetIceRole
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEMODE_FULL
channel_
-
>
remote_ice_mode
(
)
)
;
EXPECT_EQ
(
kIceUfrag1
channel_
-
>
remote_ice_ufrag
(
)
)
;
EXPECT_EQ
(
kIcePwd1
channel_
-
>
remote_ice_pwd
(
)
)
;
}
TEST_F
(
TransportTest
TestIceCredentialsChanged
)
{
EXPECT_TRUE
(
cricket
:
:
IceCredentialsChanged
(
"
u1
"
"
p1
"
"
u2
"
"
p2
"
)
)
;
EXPECT_TRUE
(
cricket
:
:
IceCredentialsChanged
(
"
u1
"
"
p1
"
"
u2
"
"
p1
"
)
)
;
EXPECT_TRUE
(
cricket
:
:
IceCredentialsChanged
(
"
u1
"
"
p1
"
"
u1
"
"
p2
"
)
)
;
EXPECT_FALSE
(
cricket
:
:
IceCredentialsChanged
(
"
u1
"
"
p1
"
"
u1
"
"
p1
"
)
)
;
}
TEST_F
(
TransportTest
TestIceControlledToControllingOnIceRestart
)
{
EXPECT_TRUE
(
SetupChannel
(
)
)
;
transport_
-
>
SetIceRole
(
cricket
:
:
ICEROLE_CONTROLLED
)
;
cricket
:
:
TransportDescription
desc
(
kIceUfrag1
kIcePwd1
)
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
desc
cricket
:
:
CA_OFFER
NULL
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
desc
cricket
:
:
CA_ANSWER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLED
transport_
-
>
ice_role
(
)
)
;
cricket
:
:
TransportDescription
new_local_desc
(
kIceUfrag2
kIcePwd2
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
new_local_desc
cricket
:
:
CA_OFFER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
transport_
-
>
ice_role
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
channel_
-
>
GetIceRole
(
)
)
;
}
TEST_F
(
TransportTest
TestIceControllingToControlledOnIceRestart
)
{
EXPECT_TRUE
(
SetupChannel
(
)
)
;
transport_
-
>
SetIceRole
(
cricket
:
:
ICEROLE_CONTROLLING
)
;
cricket
:
:
TransportDescription
desc
(
kIceUfrag1
kIcePwd1
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
desc
cricket
:
:
CA_OFFER
NULL
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
desc
cricket
:
:
CA_ANSWER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
transport_
-
>
ice_role
(
)
)
;
cricket
:
:
TransportDescription
new_local_desc
(
kIceUfrag2
kIcePwd2
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
new_local_desc
cricket
:
:
CA_ANSWER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLED
transport_
-
>
ice_role
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLED
channel_
-
>
GetIceRole
(
)
)
;
}
TEST_F
(
TransportTest
TestIceControllingOnIceRestartIfRemoteIsIceLite
)
{
EXPECT_TRUE
(
SetupChannel
(
)
)
;
transport_
-
>
SetIceRole
(
cricket
:
:
ICEROLE_CONTROLLING
)
;
cricket
:
:
TransportDescription
desc
(
kIceUfrag1
kIcePwd1
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
desc
cricket
:
:
CA_OFFER
NULL
)
)
;
cricket
:
:
TransportDescription
remote_desc
(
std
:
:
vector
<
std
:
:
string
>
(
)
kIceUfrag1
kIcePwd1
cricket
:
:
ICEMODE_LITE
cricket
:
:
CONNECTIONROLE_NONE
NULL
cricket
:
:
Candidates
(
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
cricket
:
:
CA_ANSWER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
transport_
-
>
ice_role
(
)
)
;
cricket
:
:
TransportDescription
new_local_desc
(
kIceUfrag2
kIcePwd2
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
new_local_desc
cricket
:
:
CA_ANSWER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
transport_
-
>
ice_role
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
channel_
-
>
GetIceRole
(
)
)
;
}
TEST_F
(
TransportTest
TestSetRemoteIceLiteInOffer
)
{
transport_
-
>
SetIceRole
(
cricket
:
:
ICEROLE_CONTROLLED
)
;
cricket
:
:
TransportDescription
remote_desc
(
std
:
:
vector
<
std
:
:
string
>
(
)
kIceUfrag1
kIcePwd1
cricket
:
:
ICEMODE_LITE
cricket
:
:
CONNECTIONROLE_ACTPASS
NULL
cricket
:
:
Candidates
(
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
cricket
:
:
CA_OFFER
NULL
)
)
;
cricket
:
:
TransportDescription
local_desc
(
kIceUfrag1
kIcePwd1
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
local_desc
cricket
:
:
CA_ANSWER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
transport_
-
>
ice_role
(
)
)
;
EXPECT_TRUE
(
SetupChannel
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
channel_
-
>
GetIceRole
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEMODE_LITE
channel_
-
>
remote_ice_mode
(
)
)
;
}
TEST_F
(
TransportTest
TestSetRemoteIceLiteInAnswer
)
{
transport_
-
>
SetIceRole
(
cricket
:
:
ICEROLE_CONTROLLING
)
;
cricket
:
:
TransportDescription
local_desc
(
kIceUfrag1
kIcePwd1
)
;
ASSERT_TRUE
(
transport_
-
>
SetLocalTransportDescription
(
local_desc
cricket
:
:
CA_OFFER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
transport_
-
>
ice_role
(
)
)
;
EXPECT_TRUE
(
SetupChannel
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
channel_
-
>
GetIceRole
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEMODE_FULL
channel_
-
>
remote_ice_mode
(
)
)
;
cricket
:
:
TransportDescription
remote_desc
(
std
:
:
vector
<
std
:
:
string
>
(
)
kIceUfrag1
kIcePwd1
cricket
:
:
ICEMODE_LITE
cricket
:
:
CONNECTIONROLE_NONE
NULL
cricket
:
:
Candidates
(
)
)
;
ASSERT_TRUE
(
transport_
-
>
SetRemoteTransportDescription
(
remote_desc
cricket
:
:
CA_ANSWER
NULL
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEROLE_CONTROLLING
channel_
-
>
GetIceRole
(
)
)
;
EXPECT_EQ
(
cricket
:
:
ICEMODE_LITE
channel_
-
>
remote_ice_mode
(
)
)
;
}
TEST_F
(
TransportTest
TestGetStats
)
{
EXPECT_TRUE
(
SetupChannel
(
)
)
;
cricket
:
:
TransportStats
stats
;
EXPECT_TRUE
(
transport_
-
>
GetStats
(
&
stats
)
)
;
ASSERT_EQ
(
1U
stats
.
channel_stats
.
size
(
)
)
;
EXPECT_EQ
(
1
stats
.
channel_stats
[
0
]
.
component
)
;
transport_
-
>
ConnectChannels
(
)
;
EXPECT_TRUE
(
transport_
-
>
GetStats
(
&
stats
)
)
;
ASSERT_EQ
(
1U
stats
.
channel_stats
.
size
(
)
)
;
EXPECT_EQ
(
1
stats
.
channel_stats
[
0
]
.
component
)
;
}
