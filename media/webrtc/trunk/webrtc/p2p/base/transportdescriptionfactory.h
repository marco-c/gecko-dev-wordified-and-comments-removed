#
ifndef
WEBRTC_P2P_BASE_TRANSPORTDESCRIPTIONFACTORY_H_
#
define
WEBRTC_P2P_BASE_TRANSPORTDESCRIPTIONFACTORY_H_
#
include
"
webrtc
/
base
/
rtccertificate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transportdescription
.
h
"
namespace
rtc
{
class
SSLIdentity
;
}
namespace
cricket
{
struct
TransportOptions
{
TransportOptions
(
)
:
ice_restart
(
false
)
prefer_passive_role
(
false
)
{
}
bool
ice_restart
;
bool
prefer_passive_role
;
}
;
class
TransportDescriptionFactory
{
public
:
TransportDescriptionFactory
(
)
;
SecurePolicy
secure
(
)
const
{
return
secure_
;
}
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
(
)
const
{
return
certificate_
;
}
void
set_secure
(
SecurePolicy
s
)
{
secure_
=
s
;
}
void
set_certificate
(
const
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
&
certificate
)
{
certificate_
=
certificate
;
}
TransportDescription
*
CreateOffer
(
const
TransportOptions
&
options
const
TransportDescription
*
current_description
)
const
;
TransportDescription
*
CreateAnswer
(
const
TransportDescription
*
offer
const
TransportOptions
&
options
const
TransportDescription
*
current_description
)
const
;
private
:
bool
SetSecurityInfo
(
TransportDescription
*
description
ConnectionRole
role
)
const
;
SecurePolicy
secure_
;
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
certificate_
;
}
;
}
#
endif
