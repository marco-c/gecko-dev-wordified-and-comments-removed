#
ifndef
WEBRTC_P2P_BASE_TRANSPORTCHANNEL_H_
#
define
WEBRTC_P2P_BASE_TRANSPORTCHANNEL_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
asyncpacketsocket
.
h
"
#
include
"
webrtc
/
base
/
basictypes
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
dscp
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
socket
.
h
"
#
include
"
webrtc
/
base
/
sslidentity
.
h
"
#
include
"
webrtc
/
base
/
sslstreamadapter
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
candidatepairinterface
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
icetransportinternal
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
jseptransport
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
packettransportinterface
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transportdescription
.
h
"
namespace
cricket
{
class
Candidate
;
enum
PacketFlags
{
PF_NORMAL
=
0x00
PF_SRTP_BYPASS
=
0x01
}
;
class
TransportChannel
:
public
rtc
:
:
PacketTransportInterface
{
public
:
TransportChannel
(
const
std
:
:
string
&
transport_name
int
component
)
:
transport_name_
(
transport_name
)
component_
(
component
)
writable_
(
false
)
receiving_
(
false
)
{
}
virtual
~
TransportChannel
(
)
{
}
virtual
IceTransportState
GetState
(
)
const
{
return
IceTransportState
:
:
STATE_CONNECTING
;
}
const
std
:
:
string
&
transport_name
(
)
const
{
return
transport_name_
;
}
int
component
(
)
const
{
return
component_
;
}
const
std
:
:
string
debug_name
(
)
const
override
{
return
transport_name
(
)
+
"
"
+
std
:
:
to_string
(
component
(
)
)
;
}
bool
writable
(
)
const
override
{
return
writable_
;
}
bool
receiving
(
)
const
override
{
return
receiving_
;
}
DtlsTransportState
dtls_state
(
)
const
{
return
dtls_state_
;
}
sigslot
:
:
signal2
<
TransportChannel
*
DtlsTransportState
>
SignalDtlsState
;
virtual
bool
GetStats
(
ConnectionInfos
*
infos
)
=
0
;
virtual
bool
IsDtlsActive
(
)
const
=
0
;
virtual
bool
GetSslRole
(
rtc
:
:
SSLRole
*
role
)
const
=
0
;
virtual
bool
SetSrtpCryptoSuites
(
const
std
:
:
vector
<
int
>
&
ciphers
)
;
virtual
bool
SetSrtpCiphers
(
const
std
:
:
vector
<
std
:
:
string
>
&
ciphers
)
;
virtual
bool
GetSrtpCryptoSuite
(
int
*
cipher
)
{
return
false
;
}
virtual
bool
GetSslCipherSuite
(
int
*
cipher
)
{
return
false
;
}
virtual
rtc
:
:
scoped_refptr
<
rtc
:
:
RTCCertificate
>
GetLocalCertificate
(
)
const
=
0
;
virtual
std
:
:
unique_ptr
<
rtc
:
:
SSLCertificate
>
GetRemoteSSLCertificate
(
)
const
=
0
;
virtual
bool
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8_t
*
context
size_t
context_len
bool
use_context
uint8_t
*
result
size_t
result_len
)
=
0
;
sigslot
:
:
signal2
<
TransportChannel
*
const
Candidate
&
>
SignalRouteChange
;
sigslot
:
:
signal4
<
TransportChannel
*
CandidatePairInterface
*
int
bool
>
SignalSelectedCandidatePairChanged
;
sigslot
:
:
signal1
<
TransportChannel
*
>
SignalDestroyed
;
std
:
:
string
ToString
(
)
const
;
protected
:
void
set_writable
(
bool
writable
)
;
void
set_receiving
(
bool
receiving
)
;
void
set_dtls_state
(
DtlsTransportState
state
)
;
private
:
std
:
:
string
transport_name_
;
int
component_
;
bool
writable_
;
bool
receiving_
;
DtlsTransportState
dtls_state_
=
DTLS_TRANSPORT_NEW
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
TransportChannel
)
;
}
;
}
#
endif
