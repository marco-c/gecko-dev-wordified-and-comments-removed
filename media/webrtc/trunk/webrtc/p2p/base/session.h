#
ifndef
WEBRTC_P2P_BASE_SESSION_H_
#
define
WEBRTC_P2P_BASE_SESSION_H_
#
include
<
list
>
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
p2p
/
base
/
candidate
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
port
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transport
.
h
"
#
include
"
webrtc
/
base
/
refcount
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
base
/
socketaddress
.
h
"
namespace
cricket
{
class
BaseSession
;
class
P2PTransportChannel
;
class
Transport
;
class
TransportChannel
;
class
TransportChannelProxy
;
class
TransportChannelImpl
;
typedef
rtc
:
:
RefCountedObject
<
rtc
:
:
scoped_ptr
<
Transport
>
>
TransportWrapper
;
typedef
std
:
:
map
<
int
TransportChannelProxy
*
>
ChannelMap
;
class
TransportProxy
:
public
sigslot
:
:
has_slots
<
>
{
public
:
TransportProxy
(
rtc
:
:
Thread
*
worker_thread
const
std
:
:
string
&
sid
const
std
:
:
string
&
content_name
TransportWrapper
*
transport
)
:
worker_thread_
(
worker_thread
)
sid_
(
sid
)
content_name_
(
content_name
)
transport_
(
transport
)
connecting_
(
false
)
negotiated_
(
false
)
sent_candidates_
(
false
)
candidates_allocated_
(
false
)
local_description_set_
(
false
)
remote_description_set_
(
false
)
{
transport_
-
>
get
(
)
-
>
SignalCandidatesReady
.
connect
(
this
&
TransportProxy
:
:
OnTransportCandidatesReady
)
;
}
~
TransportProxy
(
)
;
const
std
:
:
string
&
content_name
(
)
const
{
return
content_name_
;
}
Transport
*
impl
(
)
const
{
return
transport_
-
>
get
(
)
;
}
const
std
:
:
string
&
type
(
)
const
;
bool
negotiated
(
)
const
{
return
negotiated_
;
}
const
Candidates
&
sent_candidates
(
)
const
{
return
sent_candidates_
;
}
const
Candidates
&
unsent_candidates
(
)
const
{
return
unsent_candidates_
;
}
bool
candidates_allocated
(
)
const
{
return
candidates_allocated_
;
}
void
set_candidates_allocated
(
bool
allocated
)
{
candidates_allocated_
=
allocated
;
}
TransportChannel
*
GetChannel
(
int
component
)
;
TransportChannel
*
CreateChannel
(
int
component
)
;
bool
HasChannel
(
int
component
)
;
void
DestroyChannel
(
int
component
)
;
void
AddSentCandidates
(
const
Candidates
&
candidates
)
;
void
AddUnsentCandidates
(
const
Candidates
&
candidates
)
;
void
ClearSentCandidates
(
)
{
sent_candidates_
.
clear
(
)
;
}
void
ClearUnsentCandidates
(
)
{
unsent_candidates_
.
clear
(
)
;
}
void
ConnectChannels
(
)
;
void
CompleteNegotiation
(
)
;
bool
SetupMux
(
TransportProxy
*
proxy
)
;
void
SetIceRole
(
IceRole
role
)
;
void
SetIdentity
(
rtc
:
:
SSLIdentity
*
identity
)
;
bool
SetLocalTransportDescription
(
const
TransportDescription
&
description
ContentAction
action
std
:
:
string
*
error_desc
)
;
bool
SetRemoteTransportDescription
(
const
TransportDescription
&
description
ContentAction
action
std
:
:
string
*
error_desc
)
;
void
OnSignalingReady
(
)
;
bool
OnRemoteCandidates
(
const
Candidates
&
candidates
std
:
:
string
*
error
)
;
void
OnTransportCandidatesReady
(
cricket
:
:
Transport
*
transport
const
Candidates
&
candidates
)
{
SignalCandidatesReady
(
this
candidates
)
;
}
bool
local_description_set
(
)
const
{
return
local_description_set_
;
}
bool
remote_description_set
(
)
const
{
return
remote_description_set_
;
}
sigslot
:
:
signal2
<
TransportProxy
*
const
std
:
:
vector
<
Candidate
>
&
>
SignalCandidatesReady
;
private
:
TransportChannelProxy
*
GetChannelProxy
(
int
component
)
const
;
void
CreateChannelImpl
(
int
component
)
;
void
CreateChannelImpl_w
(
int
component
)
;
void
SetChannelImplFromTransport
(
TransportChannelProxy
*
proxy
int
component
)
;
void
SetChannelImplFromTransport_w
(
TransportChannelProxy
*
proxy
int
component
)
;
void
ReplaceChannelImpl
(
TransportChannelProxy
*
proxy
TransportChannelImpl
*
impl
)
;
void
ReplaceChannelImpl_w
(
TransportChannelProxy
*
proxy
TransportChannelImpl
*
impl
)
;
rtc
:
:
Thread
*
const
worker_thread_
;
const
std
:
:
string
sid_
;
const
std
:
:
string
content_name_
;
rtc
:
:
scoped_refptr
<
TransportWrapper
>
transport_
;
bool
connecting_
;
bool
negotiated_
;
ChannelMap
channels_
;
Candidates
sent_candidates_
;
Candidates
unsent_candidates_
;
bool
candidates_allocated_
;
bool
local_description_set_
;
bool
remote_description_set_
;
}
;
typedef
std
:
:
map
<
std
:
:
string
TransportProxy
*
>
TransportMap
;
typedef
std
:
:
map
<
std
:
:
string
TransportStats
>
TransportStatsMap
;
typedef
std
:
:
map
<
std
:
:
string
std
:
:
string
>
ProxyTransportMap
;
struct
SessionStats
{
ProxyTransportMap
proxy_to_transport
;
TransportStatsMap
transport_stats
;
}
;
class
BaseSession
:
public
sigslot
:
:
has_slots
<
>
public
rtc
:
:
MessageHandler
{
public
:
enum
{
MSG_TIMEOUT
=
0
MSG_ERROR
MSG_STATE
}
;
enum
State
{
STATE_INIT
=
0
STATE_SENTINITIATE
STATE_RECEIVEDINITIATE
STATE_SENTPRACCEPT
STATE_SENTACCEPT
STATE_RECEIVEDPRACCEPT
STATE_RECEIVEDACCEPT
STATE_SENTMODIFY
STATE_RECEIVEDMODIFY
STATE_SENTREJECT
STATE_RECEIVEDREJECT
STATE_SENTREDIRECT
STATE_SENTTERMINATE
STATE_RECEIVEDTERMINATE
STATE_INPROGRESS
STATE_DEINIT
}
;
enum
Error
{
ERROR_NONE
=
0
ERROR_TIME
=
1
ERROR_RESPONSE
=
2
ERROR_NETWORK
=
3
ERROR_CONTENT
=
4
ERROR_TRANSPORT
=
5
}
;
static
std
:
:
string
StateToString
(
State
state
)
;
BaseSession
(
rtc
:
:
Thread
*
signaling_thread
rtc
:
:
Thread
*
worker_thread
PortAllocator
*
port_allocator
const
std
:
:
string
&
sid
const
std
:
:
string
&
content_type
bool
initiator
)
;
virtual
~
BaseSession
(
)
;
rtc
:
:
Thread
*
signaling_thread
(
)
const
{
return
signaling_thread_
;
}
rtc
:
:
Thread
*
worker_thread
(
)
const
{
return
worker_thread_
;
}
PortAllocator
*
port_allocator
(
)
const
{
return
port_allocator_
;
}
const
std
:
:
string
&
id
(
)
const
{
return
sid_
;
}
const
std
:
:
string
&
content_type
(
)
const
{
return
content_type_
;
}
const
std
:
:
string
&
transport_type
(
)
const
{
return
transport_type_
;
}
bool
initiator
(
)
const
{
return
initiator_
;
}
const
SessionDescription
*
local_description
(
)
const
;
const
SessionDescription
*
remote_description
(
)
const
;
SessionDescription
*
remote_description
(
)
;
void
set_local_description
(
const
SessionDescription
*
sdesc
)
;
void
set_remote_description
(
SessionDescription
*
sdesc
)
;
const
SessionDescription
*
initiator_description
(
)
const
;
State
state
(
)
const
{
return
state_
;
}
sigslot
:
:
signal2
<
BaseSession
*
State
>
SignalState
;
Error
error
(
)
const
{
return
error_
;
}
const
std
:
:
string
&
error_desc
(
)
const
{
return
error_desc_
;
}
sigslot
:
:
signal2
<
BaseSession
*
Error
>
SignalError
;
virtual
void
SetState
(
State
state
)
;
virtual
void
SetError
(
Error
error
const
std
:
:
string
&
error_desc
)
;
sigslot
:
:
signal2
<
BaseSession
*
const
ContentInfos
&
>
SignalRemoteDescriptionUpdate
;
sigslot
:
:
signal2
<
BaseSession
*
ContentAction
>
SignalNewLocalDescription
;
sigslot
:
:
signal2
<
BaseSession
*
ContentAction
>
SignalNewRemoteDescription
;
virtual
Transport
*
GetTransport
(
const
std
:
:
string
&
content_name
)
;
virtual
TransportChannel
*
CreateChannel
(
const
std
:
:
string
&
content_name
int
component
)
;
virtual
TransportChannel
*
GetChannel
(
const
std
:
:
string
&
content_name
int
component
)
;
virtual
void
DestroyChannel
(
const
std
:
:
string
&
content_name
int
component
)
;
rtc
:
:
SSLIdentity
*
identity
(
)
{
return
identity_
;
}
protected
:
bool
SetIdentity
(
rtc
:
:
SSLIdentity
*
identity
)
;
bool
PushdownTransportDescription
(
ContentSource
source
ContentAction
action
std
:
:
string
*
error_desc
)
;
void
set_initiator
(
bool
initiator
)
{
initiator_
=
initiator
;
}
const
TransportMap
&
transport_proxies
(
)
const
{
return
transports_
;
}
TransportProxy
*
GetTransportProxy
(
const
std
:
:
string
&
content_name
)
;
void
DestroyTransportProxy
(
const
std
:
:
string
&
content_name
)
;
TransportProxy
*
GetOrCreateTransportProxy
(
const
std
:
:
string
&
content_name
)
;
virtual
Transport
*
CreateTransport
(
const
std
:
:
string
&
content_name
)
;
void
OnSignalingReady
(
)
;
void
SpeculativelyConnectAllTransportChannels
(
)
;
bool
OnRemoteCandidates
(
const
std
:
:
string
&
content_name
const
Candidates
&
candidates
std
:
:
string
*
error
)
;
bool
MaybeEnableMuxingSupport
(
)
;
virtual
void
OnTransportRequestSignaling
(
Transport
*
transport
)
{
}
virtual
void
OnTransportConnecting
(
Transport
*
transport
)
{
}
virtual
void
OnTransportWritable
(
Transport
*
transport
)
{
}
virtual
void
OnTransportReadable
(
Transport
*
transport
)
{
}
virtual
void
OnTransportCompleted
(
Transport
*
transport
)
{
}
virtual
void
OnTransportFailed
(
Transport
*
transport
)
{
}
virtual
void
OnTransportProxyCandidatesReady
(
TransportProxy
*
proxy
const
Candidates
&
candidates
)
{
}
virtual
void
OnTransportRouteChange
(
Transport
*
transport
int
component
const
cricket
:
:
Candidate
&
remote_candidate
)
{
}
virtual
void
OnTransportCandidatesAllocationDone
(
Transport
*
transport
)
;
virtual
void
OnCandidatesAllocationDone
(
)
{
}
virtual
void
OnRoleConflict
(
)
;
virtual
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
;
protected
:
bool
IsCandidateAllocationDone
(
)
const
;
State
state_
;
Error
error_
;
std
:
:
string
error_desc_
;
virtual
void
SignalNewDescription
(
)
;
bool
BundleContentGroup
(
const
ContentGroup
*
bundle_group
)
;
private
:
bool
PushdownLocalTransportDescription
(
const
SessionDescription
*
sdesc
ContentAction
action
std
:
:
string
*
error_desc
)
;
bool
PushdownRemoteTransportDescription
(
const
SessionDescription
*
sdesc
ContentAction
action
std
:
:
string
*
error_desc
)
;
void
MaybeCandidateAllocationDone
(
)
;
void
LogState
(
State
old_state
State
new_state
)
;
static
bool
GetTransportDescription
(
const
SessionDescription
*
description
const
std
:
:
string
&
content_name
TransportDescription
*
info
)
;
bool
GetContentAction
(
ContentAction
*
action
ContentSource
*
source
)
;
rtc
:
:
Thread
*
const
signaling_thread_
;
rtc
:
:
Thread
*
const
worker_thread_
;
PortAllocator
*
const
port_allocator_
;
const
std
:
:
string
sid_
;
const
std
:
:
string
content_type_
;
const
std
:
:
string
transport_type_
;
bool
initiator_
;
rtc
:
:
SSLIdentity
*
identity_
;
rtc
:
:
scoped_ptr
<
const
SessionDescription
>
local_description_
;
rtc
:
:
scoped_ptr
<
SessionDescription
>
remote_description_
;
uint64
ice_tiebreaker_
;
bool
role_switch_
;
TransportMap
transports_
;
}
;
}
#
endif
