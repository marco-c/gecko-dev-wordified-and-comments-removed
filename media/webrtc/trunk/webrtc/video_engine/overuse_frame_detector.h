#
ifndef
WEBRTC_VIDEO_ENGINE_OVERUSE_FRAME_DETECTOR_H_
#
define
WEBRTC_VIDEO_ENGINE_OVERUSE_FRAME_DETECTOR_H_
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
exp_filter
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
modules
/
interface
/
module
.
h
"
#
include
"
webrtc
/
video_engine
/
include
/
vie_base
.
h
"
namespace
webrtc
{
class
Clock
;
class
CpuOveruseObserver
;
class
Statistics
{
public
:
Statistics
(
)
;
void
AddSample
(
float
sample_ms
)
;
void
Reset
(
)
;
void
SetOptions
(
const
CpuOveruseOptions
&
options
)
;
float
Mean
(
)
const
;
float
StdDev
(
)
const
;
uint64_t
Count
(
)
const
;
private
:
float
InitialMean
(
)
const
;
float
InitialVariance
(
)
const
;
float
sum_
;
uint64_t
count_
;
CpuOveruseOptions
options_
;
rtc
:
:
scoped_ptr
<
rtc
:
:
ExpFilter
>
filtered_samples_
;
rtc
:
:
scoped_ptr
<
rtc
:
:
ExpFilter
>
filtered_variance_
;
}
;
class
OveruseFrameDetector
:
public
Module
{
public
:
OveruseFrameDetector
(
Clock
*
clock
CpuOveruseMetricsObserver
*
metrics_observer
)
;
~
OveruseFrameDetector
(
)
;
void
SetObserver
(
CpuOveruseObserver
*
observer
)
;
void
SetOptions
(
const
CpuOveruseOptions
&
options
)
;
void
FrameCaptured
(
int
width
int
height
int64_t
capture_time_ms
)
;
void
FrameProcessingStarted
(
)
;
void
FrameEncoded
(
int
encode_time_ms
)
;
void
FrameSent
(
int64_t
capture_time_ms
)
;
int
CaptureQueueDelayMsPerS
(
)
const
;
int
LastProcessingTimeMs
(
)
const
;
int
FramesInQueue
(
)
const
;
int64_t
TimeUntilNextProcess
(
)
override
;
int32_t
Process
(
)
override
;
private
:
class
EncodeTimeAvg
;
class
SendProcessingUsage
;
class
CaptureQueueDelay
;
class
FrameQueue
;
void
UpdateCpuOveruseMetrics
(
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
void
AddProcessingTime
(
int
elapsed_ms
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
bool
IsOverusing
(
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
bool
IsUnderusing
(
int64_t
time_now
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
bool
FrameTimeoutDetected
(
int64_t
now
)
const
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
bool
FrameSizeChanged
(
int
num_pixels
)
const
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
void
ResetAll
(
int
num_pixels
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
mutable
rtc
:
:
CriticalSection
crit_
;
CpuOveruseObserver
*
observer_
GUARDED_BY
(
crit_
)
;
CpuOveruseOptions
options_
GUARDED_BY
(
crit_
)
;
CpuOveruseMetricsObserver
*
const
metrics_observer_
;
CpuOveruseMetrics
metrics_
GUARDED_BY
(
crit_
)
;
Clock
*
const
clock_
;
int64_t
next_process_time_
;
int64_t
num_process_times_
GUARDED_BY
(
crit_
)
;
Statistics
capture_deltas_
GUARDED_BY
(
crit_
)
;
int64_t
last_capture_time_
GUARDED_BY
(
crit_
)
;
int64_t
last_overuse_time_
;
int
checks_above_threshold_
;
int
num_overuse_detections_
;
int64_t
last_rampup_time_
;
bool
in_quick_rampup_
;
int
current_rampup_delay_ms_
;
int
num_pixels_
GUARDED_BY
(
crit_
)
;
int64_t
last_encode_sample_ms_
;
const
rtc
:
:
scoped_ptr
<
EncodeTimeAvg
>
encode_time_
GUARDED_BY
(
crit_
)
;
const
rtc
:
:
scoped_ptr
<
SendProcessingUsage
>
usage_
GUARDED_BY
(
crit_
)
;
const
rtc
:
:
scoped_ptr
<
FrameQueue
>
frame_queue_
GUARDED_BY
(
crit_
)
;
int64_t
last_sample_time_ms_
;
const
rtc
:
:
scoped_ptr
<
CaptureQueueDelay
>
capture_queue_delay_
GUARDED_BY
(
crit_
)
;
rtc
:
:
ThreadChecker
processing_thread_
;
DISALLOW_COPY_AND_ASSIGN
(
OveruseFrameDetector
)
;
}
;
}
#
endif
