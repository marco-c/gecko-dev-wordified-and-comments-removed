#
include
"
testing
/
gmock
/
include
/
gmock
/
gmock
.
h
"
#
include
"
testing
/
gtest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
interface
/
rtp_rtcp_defines
.
h
"
#
include
"
webrtc
/
system_wrappers
/
interface
/
tick_util
.
h
"
#
include
"
webrtc
/
video_engine
/
call_stats
.
h
"
using
:
:
testing
:
:
_
;
using
:
:
testing
:
:
AnyNumber
;
using
:
:
testing
:
:
Return
;
namespace
webrtc
{
class
MockStatsObserver
:
public
CallStatsObserver
{
public
:
MockStatsObserver
(
)
{
}
virtual
~
MockStatsObserver
(
)
{
}
MOCK_METHOD1
(
OnRttUpdate
void
(
int64_t
)
)
;
}
;
class
CallStatsTest
:
public
:
:
testing
:
:
Test
{
protected
:
virtual
void
SetUp
(
)
{
TickTime
:
:
UseFakeClock
(
12345
)
;
call_stats_
.
reset
(
new
CallStats
(
)
)
;
}
rtc
:
:
scoped_ptr
<
CallStats
>
call_stats_
;
}
;
TEST_F
(
CallStatsTest
AddAndTriggerCallback
)
{
MockStatsObserver
stats_observer
;
RtcpRttStats
*
rtcp_rtt_stats
=
call_stats_
-
>
rtcp_rtt_stats
(
)
;
call_stats_
-
>
RegisterStatsObserver
(
&
stats_observer
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
EXPECT_EQ
(
0
rtcp_rtt_stats
-
>
LastProcessedRtt
(
)
)
;
const
int64_t
kRtt
=
25
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kRtt
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kRtt
)
)
.
Times
(
1
)
;
call_stats_
-
>
Process
(
)
;
EXPECT_EQ
(
kRtt
rtcp_rtt_stats
-
>
LastProcessedRtt
(
)
)
;
const
int64_t
kRttTimeOutMs
=
1500
+
10
;
TickTime
:
:
AdvanceFakeClock
(
kRttTimeOutMs
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
_
)
)
.
Times
(
0
)
;
call_stats_
-
>
Process
(
)
;
EXPECT_EQ
(
0
rtcp_rtt_stats
-
>
LastProcessedRtt
(
)
)
;
call_stats_
-
>
DeregisterStatsObserver
(
&
stats_observer
)
;
}
TEST_F
(
CallStatsTest
ProcessTime
)
{
MockStatsObserver
stats_observer
;
call_stats_
-
>
RegisterStatsObserver
(
&
stats_observer
)
;
RtcpRttStats
*
rtcp_rtt_stats
=
call_stats_
-
>
rtcp_rtt_stats
(
)
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
100
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
_
)
)
.
Times
(
0
)
;
call_stats_
-
>
Process
(
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
_
)
)
.
Times
(
1
)
;
call_stats_
-
>
Process
(
)
;
TickTime
:
:
AdvanceFakeClock
(
999
)
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
100
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
_
)
)
.
Times
(
0
)
;
call_stats_
-
>
Process
(
)
;
TickTime
:
:
AdvanceFakeClock
(
1
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
_
)
)
.
Times
(
1
)
;
call_stats_
-
>
Process
(
)
;
call_stats_
-
>
DeregisterStatsObserver
(
&
stats_observer
)
;
}
TEST_F
(
CallStatsTest
MultipleObservers
)
{
MockStatsObserver
stats_observer_1
;
call_stats_
-
>
RegisterStatsObserver
(
&
stats_observer_1
)
;
MockStatsObserver
stats_observer_2
;
call_stats_
-
>
RegisterStatsObserver
(
&
stats_observer_2
)
;
call_stats_
-
>
RegisterStatsObserver
(
&
stats_observer_2
)
;
RtcpRttStats
*
rtcp_rtt_stats
=
call_stats_
-
>
rtcp_rtt_stats
(
)
;
const
int64_t
kRtt
=
100
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kRtt
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
EXPECT_CALL
(
stats_observer_1
OnRttUpdate
(
kRtt
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
stats_observer_2
OnRttUpdate
(
kRtt
)
)
.
Times
(
1
)
;
call_stats_
-
>
Process
(
)
;
call_stats_
-
>
DeregisterStatsObserver
(
&
stats_observer_2
)
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kRtt
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
EXPECT_CALL
(
stats_observer_1
OnRttUpdate
(
kRtt
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
stats_observer_2
OnRttUpdate
(
kRtt
)
)
.
Times
(
0
)
;
call_stats_
-
>
Process
(
)
;
call_stats_
-
>
DeregisterStatsObserver
(
&
stats_observer_1
)
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kRtt
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
EXPECT_CALL
(
stats_observer_1
OnRttUpdate
(
kRtt
)
)
.
Times
(
0
)
;
EXPECT_CALL
(
stats_observer_2
OnRttUpdate
(
kRtt
)
)
.
Times
(
0
)
;
call_stats_
-
>
Process
(
)
;
}
TEST_F
(
CallStatsTest
ChangeRtt
)
{
MockStatsObserver
stats_observer
;
call_stats_
-
>
RegisterStatsObserver
(
&
stats_observer
)
;
RtcpRttStats
*
rtcp_rtt_stats
=
call_stats_
-
>
rtcp_rtt_stats
(
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
const
int64_t
kFirstRtt
=
100
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kFirstRtt
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kFirstRtt
)
)
.
Times
(
1
)
;
call_stats_
-
>
Process
(
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
const
int64_t
kHighRtt
=
kFirstRtt
+
20
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kHighRtt
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kHighRtt
)
)
.
Times
(
1
)
;
call_stats_
-
>
Process
(
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
const
int64_t
kLowRtt
=
kFirstRtt
-
20
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kLowRtt
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kHighRtt
)
)
.
Times
(
1
)
;
call_stats_
-
>
Process
(
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kLowRtt
)
)
.
Times
(
1
)
;
call_stats_
-
>
Process
(
)
;
call_stats_
-
>
DeregisterStatsObserver
(
&
stats_observer
)
;
}
TEST_F
(
CallStatsTest
LastProcessedRtt
)
{
MockStatsObserver
stats_observer
;
call_stats_
-
>
RegisterStatsObserver
(
&
stats_observer
)
;
RtcpRttStats
*
rtcp_rtt_stats
=
call_stats_
-
>
rtcp_rtt_stats
(
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
const
int64_t
kRttLow
=
10
;
const
int64_t
kRttHigh
=
30
;
const
int64_t
kAvgRtt
=
20
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kRttLow
)
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kRttHigh
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kRttHigh
)
)
.
Times
(
1
)
;
call_stats_
-
>
Process
(
)
;
EXPECT_EQ
(
kAvgRtt
rtcp_rtt_stats
-
>
LastProcessedRtt
(
)
)
;
TickTime
:
:
AdvanceFakeClock
(
1000
)
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kRttLow
)
;
rtcp_rtt_stats
-
>
OnRttUpdate
(
kRttHigh
)
;
EXPECT_CALL
(
stats_observer
OnRttUpdate
(
kRttHigh
)
)
.
Times
(
1
)
;
call_stats_
-
>
Process
(
)
;
EXPECT_EQ
(
kAvgRtt
rtcp_rtt_stats
-
>
LastProcessedRtt
(
)
)
;
call_stats_
-
>
DeregisterStatsObserver
(
&
stats_observer
)
;
}
}
