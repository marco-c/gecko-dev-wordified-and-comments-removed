#
ifndef
WEBRTC_VIDEO_ENGINE_VIE_FRAME_PROVIDER_BASE_H_
#
define
WEBRTC_VIDEO_ENGINE_VIE_FRAME_PROVIDER_BASE_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
CriticalSectionWrapper
;
class
VideoEncoder
;
class
I420VideoFrame
;
class
ViEFrameCallback
{
public
:
virtual
void
DeliverFrame
(
int
id
I420VideoFrame
*
video_frame
const
std
:
:
vector
<
uint32_t
>
&
csrcs
)
=
0
;
virtual
void
DelayChanged
(
int
id
int
frame_delay
)
=
0
;
virtual
int
GetPreferedFrameSettings
(
int
*
width
int
*
height
int
*
frame_rate
)
=
0
;
virtual
void
ProviderDestroyed
(
int
id
)
=
0
;
virtual
~
ViEFrameCallback
(
)
{
}
}
;
class
ViEFrameProviderBase
{
public
:
ViEFrameProviderBase
(
int
Id
int
engine_id
)
;
virtual
~
ViEFrameProviderBase
(
)
;
int
Id
(
)
const
;
int
RegisterFrameCallback
(
int
observer_id
ViEFrameCallback
*
callback
)
;
int
DeregisterFrameCallback
(
const
ViEFrameCallback
*
callback
)
;
bool
IsFrameCallbackRegistered
(
const
ViEFrameCallback
*
callback
)
;
virtual
int
FrameCallbackChanged
(
)
=
0
;
protected
:
void
DeliverFrame
(
I420VideoFrame
*
video_frame
const
std
:
:
vector
<
uint32_t
>
&
csrcs
)
;
void
SetFrameDelay
(
int
frame_delay
)
;
int
FrameDelay
(
)
;
int
GetBestFormat
(
int
*
best_width
int
*
best_height
int
*
best_frame_rate
)
;
rtc
:
:
ThreadChecker
thread_checker_
;
rtc
:
:
ThreadChecker
frame_delivery_thread_checker_
;
const
int
id_
;
const
int
engine_id_
;
typedef
std
:
:
vector
<
ViEFrameCallback
*
>
FrameCallbacks
;
FrameCallbacks
frame_callbacks_
;
const
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
provider_cs_
;
private
:
rtc
:
:
scoped_ptr
<
I420VideoFrame
>
extra_frame_
;
int
frame_delay_
;
}
;
}
#
endif
