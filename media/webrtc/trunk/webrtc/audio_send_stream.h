#
ifndef
WEBRTC_AUDIO_SEND_STREAM_H_
#
define
WEBRTC_AUDIO_SEND_STREAM_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
config
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
audio_encoder
.
h
"
#
include
"
webrtc
/
stream
.
h
"
#
include
"
webrtc
/
transport
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
AudioSendStream
:
public
SendStream
{
public
:
struct
Stats
{
uint32_t
local_ssrc
=
0
;
int64_t
bytes_sent
=
0
;
int32_t
packets_sent
=
0
;
int32_t
packets_lost
=
-
1
;
float
fraction_lost
=
-
1
.
0f
;
std
:
:
string
codec_name
;
int32_t
ext_seqnum
=
-
1
;
int32_t
jitter_ms
=
-
1
;
int64_t
rtt_ms
=
-
1
;
int32_t
audio_level
=
-
1
;
float
aec_quality_min
=
-
1
.
0f
;
int32_t
echo_delay_median_ms
=
-
1
;
int32_t
echo_delay_std_ms
=
-
1
;
int32_t
echo_return_loss
=
-
100
;
int32_t
echo_return_loss_enhancement
=
-
100
;
bool
typing_noise_detected
=
false
;
}
;
struct
Config
{
Config
(
)
=
delete
;
explicit
Config
(
Transport
*
send_transport
)
:
send_transport
(
send_transport
)
{
}
std
:
:
string
ToString
(
)
const
;
struct
Rtp
{
std
:
:
string
ToString
(
)
const
;
uint32_t
ssrc
=
0
;
std
:
:
vector
<
RtpExtension
>
extensions
;
std
:
:
string
c_name
;
}
rtp
;
Transport
*
send_transport
=
nullptr
;
int
voe_channel_id
=
-
1
;
int
cng_payload_type
=
-
1
;
int
red_payload_type
=
-
1
;
}
;
virtual
bool
SendTelephoneEvent
(
int
payload_type
uint8_t
event
uint32_t
duration_ms
)
=
0
;
virtual
Stats
GetStats
(
)
const
=
0
;
}
;
}
#
endif
