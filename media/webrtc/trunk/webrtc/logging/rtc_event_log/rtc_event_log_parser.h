#
ifndef
WEBRTC_LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_PARSER_H_
#
define
WEBRTC_LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_PARSER_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
ignore_wundef
.
h
"
#
include
"
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log
.
h
"
#
include
"
webrtc
/
video_receive_stream
.
h
"
#
include
"
webrtc
/
video_send_stream
.
h
"
RTC_PUSH_IGNORING_WUNDEF
(
)
#
ifdef
WEBRTC_ANDROID_PLATFORM_BUILD
#
include
"
external
/
webrtc
/
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log
.
pb
.
h
"
#
else
#
include
"
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log
.
pb
.
h
"
#
endif
RTC_POP_IGNORING_WUNDEF
(
)
namespace
webrtc
{
enum
class
MediaType
;
class
ParsedRtcEventLog
{
friend
class
RtcEventLogTestHelper
;
public
:
enum
EventType
{
UNKNOWN_EVENT
=
0
LOG_START
=
1
LOG_END
=
2
RTP_EVENT
=
3
RTCP_EVENT
=
4
AUDIO_PLAYOUT_EVENT
=
5
BWE_PACKET_LOSS_EVENT
=
6
BWE_PACKET_DELAY_EVENT
=
7
VIDEO_RECEIVER_CONFIG_EVENT
=
8
VIDEO_SENDER_CONFIG_EVENT
=
9
AUDIO_RECEIVER_CONFIG_EVENT
=
10
AUDIO_SENDER_CONFIG_EVENT
=
11
}
;
bool
ParseFile
(
const
std
:
:
string
&
file_name
)
;
bool
ParseString
(
const
std
:
:
string
&
s
)
;
bool
ParseStream
(
std
:
:
istream
&
stream
)
;
size_t
GetNumberOfEvents
(
)
const
;
int64_t
GetTimestamp
(
size_t
index
)
const
;
EventType
GetEventType
(
size_t
index
)
const
;
void
GetRtpHeader
(
size_t
index
PacketDirection
*
incoming
MediaType
*
media_type
uint8_t
*
header
size_t
*
header_length
size_t
*
total_length
)
const
;
void
GetRtcpPacket
(
size_t
index
PacketDirection
*
incoming
MediaType
*
media_type
uint8_t
*
packet
size_t
*
length
)
const
;
void
GetVideoReceiveConfig
(
size_t
index
VideoReceiveStream
:
:
Config
*
config
)
const
;
void
GetVideoSendConfig
(
size_t
index
VideoSendStream
:
:
Config
*
config
)
const
;
void
GetAudioReceiveConfig
(
size_t
index
AudioReceiveStream
:
:
Config
*
config
)
const
;
void
GetAudioSendConfig
(
size_t
index
AudioSendStream
:
:
Config
*
config
)
const
;
void
GetAudioPlayout
(
size_t
index
uint32_t
*
ssrc
)
const
;
void
GetBwePacketLossEvent
(
size_t
index
int32_t
*
bitrate
uint8_t
*
fraction_loss
int32_t
*
total_packets
)
const
;
private
:
std
:
:
vector
<
rtclog
:
:
Event
>
events_
;
}
;
}
#
endif
