#
ifndef
LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_PARSER_H_
#
define
LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_PARSER_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
call
/
video_receive_stream
.
h
"
#
include
"
call
/
video_send_stream
.
h
"
#
include
"
logging
/
rtc_event_log
/
events
/
rtc_event_probe_result_failure
.
h
"
#
include
"
logging
/
rtc_event_log
/
rtc_event_log
.
h
"
#
include
"
logging
/
rtc_event_log
/
rtc_stream_config
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_header_extension_map
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
byte_io
.
h
"
#
include
"
rtc_base
/
ignore_wundef
.
h
"
RTC_PUSH_IGNORING_WUNDEF
(
)
#
ifdef
WEBRTC_ANDROID_PLATFORM_BUILD
#
include
"
external
/
webrtc
/
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log
.
pb
.
h
"
#
else
#
include
"
logging
/
rtc_event_log
/
rtc_event_log
.
pb
.
h
"
#
endif
RTC_POP_IGNORING_WUNDEF
(
)
namespace
webrtc
{
enum
class
BandwidthUsage
;
enum
class
MediaType
;
struct
AudioEncoderRuntimeConfig
;
class
ParsedRtcEventLog
{
friend
class
RtcEventLogTestHelper
;
public
:
struct
BweProbeClusterCreatedEvent
{
uint64_t
timestamp
;
uint32_t
id
;
uint64_t
bitrate_bps
;
uint32_t
min_packets
;
uint32_t
min_bytes
;
}
;
struct
BweProbeResultEvent
{
uint64_t
timestamp
;
uint32_t
id
;
rtc
:
:
Optional
<
uint64_t
>
bitrate_bps
;
rtc
:
:
Optional
<
ProbeFailureReason
>
failure_reason
;
}
;
struct
BweDelayBasedUpdate
{
uint64_t
timestamp
;
int32_t
bitrate_bps
;
BandwidthUsage
detector_state
;
}
;
enum
EventType
{
UNKNOWN_EVENT
=
0
LOG_START
=
1
LOG_END
=
2
RTP_EVENT
=
3
RTCP_EVENT
=
4
AUDIO_PLAYOUT_EVENT
=
5
LOSS_BASED_BWE_UPDATE
=
6
DELAY_BASED_BWE_UPDATE
=
7
VIDEO_RECEIVER_CONFIG_EVENT
=
8
VIDEO_SENDER_CONFIG_EVENT
=
9
AUDIO_RECEIVER_CONFIG_EVENT
=
10
AUDIO_SENDER_CONFIG_EVENT
=
11
AUDIO_NETWORK_ADAPTATION_EVENT
=
16
BWE_PROBE_CLUSTER_CREATED_EVENT
=
17
BWE_PROBE_RESULT_EVENT
=
18
}
;
enum
class
MediaType
{
ANY
AUDIO
VIDEO
DATA
}
;
bool
ParseFile
(
const
std
:
:
string
&
file_name
)
;
bool
ParseString
(
const
std
:
:
string
&
s
)
;
bool
ParseStream
(
std
:
:
istream
&
stream
)
;
size_t
GetNumberOfEvents
(
)
const
;
int64_t
GetTimestamp
(
size_t
index
)
const
;
EventType
GetEventType
(
size_t
index
)
const
;
webrtc
:
:
RtpHeaderExtensionMap
*
GetRtpHeader
(
size_t
index
PacketDirection
*
incoming
uint8_t
*
header
size_t
*
header_length
size_t
*
total_length
int
*
probe_cluster_id
)
const
;
void
GetRtcpPacket
(
size_t
index
PacketDirection
*
incoming
uint8_t
*
packet
size_t
*
length
)
const
;
rtclog
:
:
StreamConfig
GetVideoReceiveConfig
(
size_t
index
)
const
;
std
:
:
vector
<
rtclog
:
:
StreamConfig
>
GetVideoSendConfig
(
size_t
index
)
const
;
rtclog
:
:
StreamConfig
GetAudioReceiveConfig
(
size_t
index
)
const
;
rtclog
:
:
StreamConfig
GetAudioSendConfig
(
size_t
index
)
const
;
void
GetAudioPlayout
(
size_t
index
uint32_t
*
ssrc
)
const
;
void
GetLossBasedBweUpdate
(
size_t
index
int32_t
*
bitrate_bps
uint8_t
*
fraction_loss
int32_t
*
total_packets
)
const
;
BweDelayBasedUpdate
GetDelayBasedBweUpdate
(
size_t
index
)
const
;
void
GetAudioNetworkAdaptation
(
size_t
index
AudioEncoderRuntimeConfig
*
config
)
const
;
BweProbeClusterCreatedEvent
GetBweProbeClusterCreated
(
size_t
index
)
const
;
BweProbeResultEvent
GetBweProbeResult
(
size_t
index
)
const
;
MediaType
GetMediaType
(
uint32_t
ssrc
PacketDirection
direction
)
const
;
private
:
rtclog
:
:
StreamConfig
GetVideoReceiveConfig
(
const
rtclog
:
:
Event
&
event
)
const
;
std
:
:
vector
<
rtclog
:
:
StreamConfig
>
GetVideoSendConfig
(
const
rtclog
:
:
Event
&
event
)
const
;
rtclog
:
:
StreamConfig
GetAudioReceiveConfig
(
const
rtclog
:
:
Event
&
event
)
const
;
rtclog
:
:
StreamConfig
GetAudioSendConfig
(
const
rtclog
:
:
Event
&
event
)
const
;
std
:
:
vector
<
rtclog
:
:
Event
>
events_
;
struct
Stream
{
Stream
(
uint32_t
ssrc
MediaType
media_type
webrtc
:
:
PacketDirection
direction
webrtc
:
:
RtpHeaderExtensionMap
map
)
:
ssrc
(
ssrc
)
media_type
(
media_type
)
direction
(
direction
)
rtp_extensions_map
(
map
)
{
}
uint32_t
ssrc
;
MediaType
media_type
;
webrtc
:
:
PacketDirection
direction
;
webrtc
:
:
RtpHeaderExtensionMap
rtp_extensions_map
;
}
;
std
:
:
vector
<
Stream
>
streams_
;
typedef
std
:
:
pair
<
uint32_t
webrtc
:
:
PacketDirection
>
StreamId
;
std
:
:
map
<
StreamId
webrtc
:
:
RtpHeaderExtensionMap
*
>
rtp_extensions_maps_
;
}
;
}
#
endif
