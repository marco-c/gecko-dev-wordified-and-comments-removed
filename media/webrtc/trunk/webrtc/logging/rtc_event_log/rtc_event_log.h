#
ifndef
WEBRTC_LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_H_
#
define
WEBRTC_LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
webrtc
/
base
/
platform_file
.
h
"
#
include
"
webrtc
/
call
/
audio_receive_stream
.
h
"
#
include
"
webrtc
/
call
/
audio_send_stream
.
h
"
#
include
"
webrtc
/
video_receive_stream
.
h
"
#
include
"
webrtc
/
video_send_stream
.
h
"
namespace
webrtc
{
namespace
rtclog
{
class
EventStream
;
}
class
Clock
;
class
RtcEventLogImpl
;
enum
class
MediaType
;
enum
PacketDirection
{
kIncomingPacket
=
0
kOutgoingPacket
}
;
class
RtcEventLog
{
public
:
virtual
~
RtcEventLog
(
)
{
}
static
std
:
:
unique_ptr
<
RtcEventLog
>
Create
(
)
;
static
std
:
:
unique_ptr
<
RtcEventLog
>
Create
(
const
Clock
*
clock
)
{
return
Create
(
)
;
}
static
std
:
:
unique_ptr
<
RtcEventLog
>
CreateNull
(
)
;
virtual
bool
StartLogging
(
const
std
:
:
string
&
file_name
int64_t
max_size_bytes
)
=
0
;
virtual
bool
StartLogging
(
rtc
:
:
PlatformFile
platform_file
int64_t
max_size_bytes
)
=
0
;
bool
StartLogging
(
const
std
:
:
string
&
file_name
)
{
return
StartLogging
(
file_name
10000000
)
;
}
bool
StartLogging
(
rtc
:
:
PlatformFile
platform_file
)
{
return
StartLogging
(
platform_file
10000000
)
;
}
virtual
void
StopLogging
(
)
=
0
;
virtual
void
LogVideoReceiveStreamConfig
(
const
webrtc
:
:
VideoReceiveStream
:
:
Config
&
config
)
=
0
;
virtual
void
LogVideoSendStreamConfig
(
const
webrtc
:
:
VideoSendStream
:
:
Config
&
config
)
=
0
;
virtual
void
LogAudioReceiveStreamConfig
(
const
webrtc
:
:
AudioReceiveStream
:
:
Config
&
config
)
=
0
;
virtual
void
LogAudioSendStreamConfig
(
const
webrtc
:
:
AudioSendStream
:
:
Config
&
config
)
=
0
;
virtual
void
LogRtpHeader
(
PacketDirection
direction
MediaType
media_type
const
uint8_t
*
header
size_t
packet_length
)
=
0
;
virtual
void
LogRtcpPacket
(
PacketDirection
direction
MediaType
media_type
const
uint8_t
*
packet
size_t
length
)
=
0
;
virtual
void
LogAudioPlayout
(
uint32_t
ssrc
)
=
0
;
virtual
void
LogBwePacketLossEvent
(
int32_t
bitrate
uint8_t
fraction_loss
int32_t
total_packets
)
=
0
;
static
bool
ParseRtcEventLog
(
const
std
:
:
string
&
file_name
rtclog
:
:
EventStream
*
result
)
;
}
;
class
RtcEventLogNullImpl
final
:
public
RtcEventLog
{
public
:
bool
StartLogging
(
const
std
:
:
string
&
file_name
int64_t
max_size_bytes
)
override
{
return
false
;
}
bool
StartLogging
(
rtc
:
:
PlatformFile
platform_file
int64_t
max_size_bytes
)
override
;
void
StopLogging
(
)
override
{
}
void
LogVideoReceiveStreamConfig
(
const
VideoReceiveStream
:
:
Config
&
config
)
override
{
}
void
LogVideoSendStreamConfig
(
const
VideoSendStream
:
:
Config
&
config
)
override
{
}
void
LogAudioReceiveStreamConfig
(
const
AudioReceiveStream
:
:
Config
&
config
)
override
{
}
void
LogAudioSendStreamConfig
(
const
AudioSendStream
:
:
Config
&
config
)
override
{
}
void
LogRtpHeader
(
PacketDirection
direction
MediaType
media_type
const
uint8_t
*
header
size_t
packet_length
)
override
{
}
void
LogRtcpPacket
(
PacketDirection
direction
MediaType
media_type
const
uint8_t
*
packet
size_t
length
)
override
{
}
void
LogAudioPlayout
(
uint32_t
ssrc
)
override
{
}
void
LogBwePacketLossEvent
(
int32_t
bitrate
uint8_t
fraction_loss
int32_t
total_packets
)
override
{
}
}
;
}
#
endif
