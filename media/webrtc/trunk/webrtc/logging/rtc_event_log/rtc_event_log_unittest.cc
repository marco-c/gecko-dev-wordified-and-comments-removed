#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
buffer
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
fakeclock
.
h
"
#
include
"
webrtc
/
base
/
random
.
h
"
#
include
"
webrtc
/
call
/
call
.
h
"
#
include
"
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log
.
h
"
#
include
"
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log_parser
.
h
"
#
include
"
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log_unittest_helper
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
sender_report
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_header_extension
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_header_extensions
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_packet_to_send
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
#
include
"
webrtc
/
test
/
testsupport
/
fileutils
.
h
"
#
ifdef
WEBRTC_ANDROID_PLATFORM_BUILD
#
include
"
external
/
webrtc
/
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log
.
pb
.
h
"
#
else
#
include
"
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log
.
pb
.
h
"
#
endif
namespace
webrtc
{
namespace
{
const
RTPExtensionType
kExtensionTypes
[
]
=
{
RTPExtensionType
:
:
kRtpExtensionTransmissionTimeOffset
RTPExtensionType
:
:
kRtpExtensionAudioLevel
RTPExtensionType
:
:
kRtpExtensionAbsoluteSendTime
RTPExtensionType
:
:
kRtpExtensionVideoRotation
RTPExtensionType
:
:
kRtpExtensionTransportSequenceNumber
}
;
const
char
*
kExtensionNames
[
]
=
{
RtpExtension
:
:
kTimestampOffsetUri
RtpExtension
:
:
kAudioLevelUri
RtpExtension
:
:
kAbsSendTimeUri
RtpExtension
:
:
kVideoRotationUri
RtpExtension
:
:
kTransportSequenceNumberUri
}
;
const
size_t
kNumExtensions
=
5
;
void
PrintActualEvents
(
const
ParsedRtcEventLog
&
parsed_log
)
{
std
:
:
map
<
int
size_t
>
actual_event_counts
;
for
(
size_t
i
=
0
;
i
<
parsed_log
.
GetNumberOfEvents
(
)
;
i
+
+
)
{
actual_event_counts
[
parsed_log
.
GetEventType
(
i
)
]
+
+
;
}
printf
(
"
Actual
events
:
"
)
;
for
(
auto
kv
:
actual_event_counts
)
{
printf
(
"
%
d_count
=
%
zu
"
kv
.
first
kv
.
second
)
;
}
printf
(
"
\
n
"
)
;
for
(
size_t
i
=
0
;
i
<
parsed_log
.
GetNumberOfEvents
(
)
;
i
+
+
)
{
printf
(
"
%
4d
"
parsed_log
.
GetEventType
(
i
)
)
;
}
printf
(
"
\
n
"
)
;
}
void
PrintExpectedEvents
(
size_t
rtp_count
size_t
rtcp_count
size_t
playout_count
size_t
bwe_loss_count
)
{
printf
(
"
Expected
events
:
rtp_count
=
%
zu
rtcp_count
=
%
zu
"
"
playout_count
=
%
zu
bwe_loss_count
=
%
zu
\
n
"
rtp_count
rtcp_count
playout_count
bwe_loss_count
)
;
size_t
rtcp_index
=
1
playout_index
=
1
bwe_loss_index
=
1
;
printf
(
"
strt
cfg
cfg
"
)
;
for
(
size_t
i
=
1
;
i
<
=
rtp_count
;
i
+
+
)
{
printf
(
"
rtp
"
)
;
if
(
i
*
rtcp_count
>
=
rtcp_index
*
rtp_count
)
{
printf
(
"
rtcp
"
)
;
rtcp_index
+
+
;
}
if
(
i
*
playout_count
>
=
playout_index
*
rtp_count
)
{
printf
(
"
play
"
)
;
playout_index
+
+
;
}
if
(
i
*
bwe_loss_count
>
=
bwe_loss_index
*
rtp_count
)
{
printf
(
"
loss
"
)
;
bwe_loss_index
+
+
;
}
}
printf
(
"
end
\
n
"
)
;
}
}
RtpPacketToSend
GenerateRtpPacket
(
const
RtpHeaderExtensionMap
*
extensions
uint32_t
csrcs_count
size_t
packet_size
Random
*
prng
)
{
RTC_CHECK_GE
(
packet_size
16
+
4
*
csrcs_count
+
4
*
kNumExtensions
)
;
std
:
:
vector
<
uint32_t
>
csrcs
;
for
(
unsigned
i
=
0
;
i
<
csrcs_count
;
i
+
+
)
{
csrcs
.
push_back
(
prng
-
>
Rand
<
uint32_t
>
(
)
)
;
}
RtpPacketToSend
rtp_packet
(
extensions
packet_size
)
;
rtp_packet
.
SetPayloadType
(
prng
-
>
Rand
(
127
)
)
;
rtp_packet
.
SetMarker
(
prng
-
>
Rand
<
bool
>
(
)
)
;
rtp_packet
.
SetSequenceNumber
(
prng
-
>
Rand
<
uint16_t
>
(
)
)
;
rtp_packet
.
SetSsrc
(
prng
-
>
Rand
<
uint32_t
>
(
)
)
;
rtp_packet
.
SetTimestamp
(
prng
-
>
Rand
<
uint32_t
>
(
)
)
;
rtp_packet
.
SetCsrcs
(
csrcs
)
;
rtp_packet
.
SetExtension
<
TransmissionOffset
>
(
prng
-
>
Rand
(
0x00ffffff
)
)
;
rtp_packet
.
SetExtension
<
AudioLevel
>
(
prng
-
>
Rand
<
bool
>
(
)
prng
-
>
Rand
(
127
)
)
;
rtp_packet
.
SetExtension
<
AbsoluteSendTime
>
(
prng
-
>
Rand
<
int32_t
>
(
)
)
;
rtp_packet
.
SetExtension
<
VideoOrientation
>
(
prng
-
>
Rand
(
2
)
)
;
rtp_packet
.
SetExtension
<
TransportSequenceNumber
>
(
prng
-
>
Rand
<
uint16_t
>
(
)
)
;
size_t
payload_size
=
packet_size
-
rtp_packet
.
headers_size
(
)
;
uint8_t
*
payload
=
rtp_packet
.
AllocatePayload
(
payload_size
)
;
for
(
size_t
i
=
0
;
i
<
payload_size
;
i
+
+
)
{
payload
[
i
]
=
prng
-
>
Rand
<
uint8_t
>
(
)
;
}
return
rtp_packet
;
}
rtc
:
:
Buffer
GenerateRtcpPacket
(
Random
*
prng
)
{
rtcp
:
:
ReportBlock
report_block
;
report_block
.
SetMediaSsrc
(
prng
-
>
Rand
<
uint32_t
>
(
)
)
;
report_block
.
SetFractionLost
(
prng
-
>
Rand
(
50
)
)
;
rtcp
:
:
SenderReport
sender_report
;
sender_report
.
SetSenderSsrc
(
prng
-
>
Rand
<
uint32_t
>
(
)
)
;
sender_report
.
SetNtp
(
NtpTime
(
prng
-
>
Rand
<
uint32_t
>
(
)
prng
-
>
Rand
<
uint32_t
>
(
)
)
)
;
sender_report
.
SetPacketCount
(
prng
-
>
Rand
<
uint32_t
>
(
)
)
;
sender_report
.
AddReportBlock
(
report_block
)
;
return
sender_report
.
Build
(
)
;
}
void
GenerateVideoReceiveConfig
(
uint32_t
extensions_bitvector
VideoReceiveStream
:
:
Config
*
config
Random
*
prng
)
{
VideoReceiveStream
:
:
Decoder
decoder
;
decoder
.
payload_type
=
prng
-
>
Rand
(
0
127
)
;
decoder
.
payload_name
=
(
prng
-
>
Rand
<
bool
>
(
)
?
"
VP8
"
:
"
H264
"
)
;
config
-
>
decoders
.
push_back
(
decoder
)
;
config
-
>
rtp
.
remote_ssrc
=
prng
-
>
Rand
<
uint32_t
>
(
)
;
config
-
>
rtp
.
local_ssrc
=
prng
-
>
Rand
<
uint32_t
>
(
)
;
config
-
>
rtp
.
rtcp_mode
=
prng
-
>
Rand
<
bool
>
(
)
?
RtcpMode
:
:
kCompound
:
RtcpMode
:
:
kReducedSize
;
config
-
>
rtp
.
remb
=
prng
-
>
Rand
<
bool
>
(
)
;
VideoReceiveStream
:
:
Config
:
:
Rtp
:
:
Rtx
rtx_pair
;
rtx_pair
.
ssrc
=
prng
-
>
Rand
<
uint32_t
>
(
)
;
rtx_pair
.
payload_type
=
prng
-
>
Rand
(
0
127
)
;
config
-
>
rtp
.
rtx
.
insert
(
std
:
:
make_pair
(
prng
-
>
Rand
(
0
127
)
rtx_pair
)
)
;
for
(
unsigned
i
=
0
;
i
<
kNumExtensions
;
i
+
+
)
{
if
(
extensions_bitvector
&
(
1u
<
<
i
)
)
{
config
-
>
rtp
.
extensions
.
push_back
(
RtpExtension
(
kExtensionNames
[
i
]
prng
-
>
Rand
<
int
>
(
)
)
)
;
}
}
}
void
GenerateVideoSendConfig
(
uint32_t
extensions_bitvector
VideoSendStream
:
:
Config
*
config
Random
*
prng
)
{
config
-
>
encoder_settings
.
payload_type
=
prng
-
>
Rand
(
0
127
)
;
config
-
>
encoder_settings
.
payload_name
=
(
prng
-
>
Rand
<
bool
>
(
)
?
"
VP8
"
:
"
H264
"
)
;
config
-
>
rtp
.
ssrcs
.
push_back
(
prng
-
>
Rand
<
uint32_t
>
(
)
)
;
config
-
>
rtp
.
rtx
.
ssrcs
.
push_back
(
prng
-
>
Rand
<
uint32_t
>
(
)
)
;
config
-
>
rtp
.
rtx
.
payload_type
=
prng
-
>
Rand
(
0
127
)
;
for
(
unsigned
i
=
0
;
i
<
kNumExtensions
;
i
+
+
)
{
if
(
extensions_bitvector
&
(
1u
<
<
i
)
)
{
config
-
>
rtp
.
extensions
.
push_back
(
RtpExtension
(
kExtensionNames
[
i
]
prng
-
>
Rand
<
int
>
(
)
)
)
;
}
}
}
void
GenerateAudioReceiveConfig
(
uint32_t
extensions_bitvector
AudioReceiveStream
:
:
Config
*
config
Random
*
prng
)
{
config
-
>
rtp
.
remote_ssrc
=
prng
-
>
Rand
<
uint32_t
>
(
)
;
config
-
>
rtp
.
local_ssrc
=
prng
-
>
Rand
<
uint32_t
>
(
)
;
for
(
unsigned
i
=
0
;
i
<
kNumExtensions
;
i
+
+
)
{
if
(
extensions_bitvector
&
(
1u
<
<
i
)
)
{
config
-
>
rtp
.
extensions
.
push_back
(
RtpExtension
(
kExtensionNames
[
i
]
prng
-
>
Rand
<
int
>
(
)
)
)
;
}
}
}
void
GenerateAudioSendConfig
(
uint32_t
extensions_bitvector
AudioSendStream
:
:
Config
*
config
Random
*
prng
)
{
config
-
>
rtp
.
ssrc
=
prng
-
>
Rand
<
uint32_t
>
(
)
;
for
(
unsigned
i
=
0
;
i
<
kNumExtensions
;
i
+
+
)
{
if
(
extensions_bitvector
&
(
1u
<
<
i
)
)
{
config
-
>
rtp
.
extensions
.
push_back
(
RtpExtension
(
kExtensionNames
[
i
]
prng
-
>
Rand
<
int
>
(
)
)
)
;
}
}
}
void
LogSessionAndReadBack
(
size_t
rtp_count
size_t
rtcp_count
size_t
playout_count
size_t
bwe_loss_count
uint32_t
extensions_bitvector
uint32_t
csrcs_count
unsigned
int
random_seed
)
{
ASSERT_LE
(
rtcp_count
rtp_count
)
;
ASSERT_LE
(
playout_count
rtp_count
)
;
ASSERT_LE
(
bwe_loss_count
rtp_count
)
;
std
:
:
vector
<
RtpPacketToSend
>
rtp_packets
;
std
:
:
vector
<
rtc
:
:
Buffer
>
rtcp_packets
;
std
:
:
vector
<
uint32_t
>
playout_ssrcs
;
std
:
:
vector
<
std
:
:
pair
<
int32_t
uint8_t
>
>
bwe_loss_updates
;
VideoReceiveStream
:
:
Config
receiver_config
(
nullptr
)
;
VideoSendStream
:
:
Config
sender_config
(
nullptr
)
;
Random
prng
(
random_seed
)
;
RtpHeaderExtensionMap
extensions
;
for
(
unsigned
i
=
0
;
i
<
kNumExtensions
;
i
+
+
)
{
if
(
extensions_bitvector
&
(
1u
<
<
i
)
)
{
extensions
.
Register
(
kExtensionTypes
[
i
]
i
+
1
)
;
}
}
for
(
size_t
i
=
0
;
i
<
rtp_count
;
i
+
+
)
{
size_t
packet_size
=
prng
.
Rand
(
1000
1100
)
;
rtp_packets
.
push_back
(
GenerateRtpPacket
(
&
extensions
csrcs_count
packet_size
&
prng
)
)
;
}
for
(
size_t
i
=
0
;
i
<
rtcp_count
;
i
+
+
)
{
rtcp_packets
.
push_back
(
GenerateRtcpPacket
(
&
prng
)
)
;
}
for
(
size_t
i
=
0
;
i
<
playout_count
;
i
+
+
)
{
playout_ssrcs
.
push_back
(
prng
.
Rand
<
uint32_t
>
(
)
)
;
}
for
(
size_t
i
=
0
;
i
<
bwe_loss_count
;
i
+
+
)
{
bwe_loss_updates
.
push_back
(
std
:
:
make_pair
(
prng
.
Rand
<
int32_t
>
(
)
prng
.
Rand
<
uint8_t
>
(
)
)
)
;
}
GenerateVideoReceiveConfig
(
extensions_bitvector
&
receiver_config
&
prng
)
;
GenerateVideoSendConfig
(
extensions_bitvector
&
sender_config
&
prng
)
;
const
int
config_count
=
2
;
auto
test_info
=
:
:
testing
:
:
UnitTest
:
:
GetInstance
(
)
-
>
current_test_info
(
)
;
const
std
:
:
string
temp_filename
=
test
:
:
OutputPath
(
)
+
test_info
-
>
test_case_name
(
)
+
test_info
-
>
name
(
)
;
{
rtc
:
:
ScopedFakeClock
fake_clock
;
fake_clock
.
SetTimeMicros
(
prng
.
Rand
<
uint32_t
>
(
)
)
;
std
:
:
unique_ptr
<
RtcEventLog
>
log_dumper
(
RtcEventLog
:
:
Create
(
)
)
;
log_dumper
-
>
LogVideoReceiveStreamConfig
(
receiver_config
)
;
fake_clock
.
AdvanceTimeMicros
(
prng
.
Rand
(
1
1000
)
)
;
log_dumper
-
>
LogVideoSendStreamConfig
(
sender_config
)
;
fake_clock
.
AdvanceTimeMicros
(
prng
.
Rand
(
1
1000
)
)
;
size_t
rtcp_index
=
1
;
size_t
playout_index
=
1
;
size_t
bwe_loss_index
=
1
;
for
(
size_t
i
=
1
;
i
<
=
rtp_count
;
i
+
+
)
{
log_dumper
-
>
LogRtpHeader
(
(
i
%
2
=
=
0
)
?
kIncomingPacket
:
kOutgoingPacket
(
i
%
3
=
=
0
)
?
MediaType
:
:
AUDIO
:
MediaType
:
:
VIDEO
rtp_packets
[
i
-
1
]
.
data
(
)
rtp_packets
[
i
-
1
]
.
size
(
)
)
;
fake_clock
.
AdvanceTimeMicros
(
prng
.
Rand
(
1
1000
)
)
;
if
(
i
*
rtcp_count
>
=
rtcp_index
*
rtp_count
)
{
log_dumper
-
>
LogRtcpPacket
(
(
rtcp_index
%
2
=
=
0
)
?
kIncomingPacket
:
kOutgoingPacket
rtcp_index
%
3
=
=
0
?
MediaType
:
:
AUDIO
:
MediaType
:
:
VIDEO
rtcp_packets
[
rtcp_index
-
1
]
.
data
(
)
rtcp_packets
[
rtcp_index
-
1
]
.
size
(
)
)
;
rtcp_index
+
+
;
fake_clock
.
AdvanceTimeMicros
(
prng
.
Rand
(
1
1000
)
)
;
}
if
(
i
*
playout_count
>
=
playout_index
*
rtp_count
)
{
log_dumper
-
>
LogAudioPlayout
(
playout_ssrcs
[
playout_index
-
1
]
)
;
playout_index
+
+
;
fake_clock
.
AdvanceTimeMicros
(
prng
.
Rand
(
1
1000
)
)
;
}
if
(
i
*
bwe_loss_count
>
=
bwe_loss_index
*
rtp_count
)
{
log_dumper
-
>
LogBwePacketLossEvent
(
bwe_loss_updates
[
bwe_loss_index
-
1
]
.
first
bwe_loss_updates
[
bwe_loss_index
-
1
]
.
second
i
)
;
bwe_loss_index
+
+
;
fake_clock
.
AdvanceTimeMicros
(
prng
.
Rand
(
1
1000
)
)
;
}
if
(
i
=
=
rtp_count
/
2
)
{
log_dumper
-
>
StartLogging
(
temp_filename
10000000
)
;
fake_clock
.
AdvanceTimeMicros
(
prng
.
Rand
(
1
1000
)
)
;
}
}
log_dumper
-
>
StopLogging
(
)
;
}
ParsedRtcEventLog
parsed_log
;
ASSERT_TRUE
(
parsed_log
.
ParseFile
(
temp_filename
)
)
;
const
size_t
event_count
=
config_count
+
playout_count
+
bwe_loss_count
+
rtcp_count
+
rtp_count
+
2
;
EXPECT_GE
(
1000u
event_count
)
;
EXPECT_EQ
(
event_count
parsed_log
.
GetNumberOfEvents
(
)
)
;
if
(
event_count
!
=
parsed_log
.
GetNumberOfEvents
(
)
)
{
PrintActualEvents
(
parsed_log
)
;
PrintExpectedEvents
(
rtp_count
rtcp_count
playout_count
bwe_loss_count
)
;
}
RtcEventLogTestHelper
:
:
VerifyLogStartEvent
(
parsed_log
0
)
;
RtcEventLogTestHelper
:
:
VerifyVideoReceiveStreamConfig
(
parsed_log
1
receiver_config
)
;
RtcEventLogTestHelper
:
:
VerifyVideoSendStreamConfig
(
parsed_log
2
sender_config
)
;
size_t
event_index
=
config_count
+
1
;
size_t
rtcp_index
=
1
;
size_t
playout_index
=
1
;
size_t
bwe_loss_index
=
1
;
for
(
size_t
i
=
1
;
i
<
=
rtp_count
;
i
+
+
)
{
RtcEventLogTestHelper
:
:
VerifyRtpEvent
(
parsed_log
event_index
(
i
%
2
=
=
0
)
?
kIncomingPacket
:
kOutgoingPacket
(
i
%
3
=
=
0
)
?
MediaType
:
:
AUDIO
:
MediaType
:
:
VIDEO
rtp_packets
[
i
-
1
]
.
data
(
)
rtp_packets
[
i
-
1
]
.
headers_size
(
)
rtp_packets
[
i
-
1
]
.
size
(
)
)
;
event_index
+
+
;
if
(
i
*
rtcp_count
>
=
rtcp_index
*
rtp_count
)
{
RtcEventLogTestHelper
:
:
VerifyRtcpEvent
(
parsed_log
event_index
rtcp_index
%
2
=
=
0
?
kIncomingPacket
:
kOutgoingPacket
rtcp_index
%
3
=
=
0
?
MediaType
:
:
AUDIO
:
MediaType
:
:
VIDEO
rtcp_packets
[
rtcp_index
-
1
]
.
data
(
)
rtcp_packets
[
rtcp_index
-
1
]
.
size
(
)
)
;
event_index
+
+
;
rtcp_index
+
+
;
}
if
(
i
*
playout_count
>
=
playout_index
*
rtp_count
)
{
RtcEventLogTestHelper
:
:
VerifyPlayoutEvent
(
parsed_log
event_index
playout_ssrcs
[
playout_index
-
1
]
)
;
event_index
+
+
;
playout_index
+
+
;
}
if
(
i
*
bwe_loss_count
>
=
bwe_loss_index
*
rtp_count
)
{
RtcEventLogTestHelper
:
:
VerifyBweLossEvent
(
parsed_log
event_index
bwe_loss_updates
[
bwe_loss_index
-
1
]
.
first
bwe_loss_updates
[
bwe_loss_index
-
1
]
.
second
i
)
;
event_index
+
+
;
bwe_loss_index
+
+
;
}
}
remove
(
temp_filename
.
c_str
(
)
)
;
}
TEST
(
RtcEventLogTest
LogSessionAndReadBack
)
{
LogSessionAndReadBack
(
5
2
0
0
0
0
321
)
;
uint32_t
extensions
=
0
;
for
(
uint32_t
i
=
0
;
i
<
kNumExtensions
;
i
+
+
)
{
if
(
kExtensionTypes
[
i
]
=
=
RTPExtensionType
:
:
kRtpExtensionAbsoluteSendTime
|
|
kExtensionTypes
[
i
]
=
=
RTPExtensionType
:
:
kRtpExtensionTransportSequenceNumber
)
{
extensions
|
=
1u
<
<
i
;
}
}
LogSessionAndReadBack
(
8
2
0
0
extensions
0
3141592653u
)
;
extensions
=
(
1u
<
<
kNumExtensions
)
-
1
;
LogSessionAndReadBack
(
9
2
3
2
extensions
2
2718281828u
)
;
for
(
extensions
=
0
;
extensions
<
(
1u
<
<
kNumExtensions
)
;
extensions
+
+
)
{
for
(
uint32_t
csrcs_count
=
0
;
csrcs_count
<
3
;
csrcs_count
+
+
)
{
LogSessionAndReadBack
(
5
+
extensions
2
+
csrcs_count
3
+
csrcs_count
1
+
csrcs_count
extensions
csrcs_count
extensions
*
3
+
csrcs_count
+
1
)
;
}
}
}
TEST
(
RtcEventLogTest
LogEventAndReadBack
)
{
Random
prng
(
987654321
)
;
size_t
packet_size
=
prng
.
Rand
(
1000
1100
)
;
RtpPacketToSend
rtp_packet
=
GenerateRtpPacket
(
nullptr
0
packet_size
&
prng
)
;
rtc
:
:
Buffer
rtcp_packet
=
GenerateRtcpPacket
(
&
prng
)
;
auto
test_info
=
:
:
testing
:
:
UnitTest
:
:
GetInstance
(
)
-
>
current_test_info
(
)
;
const
std
:
:
string
temp_filename
=
test
:
:
OutputPath
(
)
+
test_info
-
>
test_case_name
(
)
+
test_info
-
>
name
(
)
;
rtc
:
:
ScopedFakeClock
fake_clock
;
fake_clock
.
SetTimeMicros
(
prng
.
Rand
<
uint32_t
>
(
)
)
;
std
:
:
unique_ptr
<
RtcEventLog
>
log_dumper
(
RtcEventLog
:
:
Create
(
)
)
;
log_dumper
-
>
LogRtpHeader
(
kIncomingPacket
MediaType
:
:
VIDEO
rtp_packet
.
data
(
)
rtp_packet
.
size
(
)
)
;
fake_clock
.
AdvanceTimeMicros
(
prng
.
Rand
(
1
1000
)
)
;
log_dumper
-
>
StartLogging
(
temp_filename
10000000
)
;
fake_clock
.
AdvanceTimeMicros
(
prng
.
Rand
(
1
1000
)
)
;
log_dumper
-
>
LogRtcpPacket
(
kOutgoingPacket
MediaType
:
:
VIDEO
rtcp_packet
.
data
(
)
rtcp_packet
.
size
(
)
)
;
fake_clock
.
AdvanceTimeMicros
(
prng
.
Rand
(
1
1000
)
)
;
log_dumper
-
>
StopLogging
(
)
;
ParsedRtcEventLog
parsed_log
;
ASSERT_TRUE
(
parsed_log
.
ParseFile
(
temp_filename
)
)
;
EXPECT_EQ
(
4u
parsed_log
.
GetNumberOfEvents
(
)
)
;
RtcEventLogTestHelper
:
:
VerifyLogStartEvent
(
parsed_log
0
)
;
RtcEventLogTestHelper
:
:
VerifyRtpEvent
(
parsed_log
1
kIncomingPacket
MediaType
:
:
VIDEO
rtp_packet
.
data
(
)
rtp_packet
.
headers_size
(
)
rtp_packet
.
size
(
)
)
;
RtcEventLogTestHelper
:
:
VerifyRtcpEvent
(
parsed_log
2
kOutgoingPacket
MediaType
:
:
VIDEO
rtcp_packet
.
data
(
)
rtcp_packet
.
size
(
)
)
;
RtcEventLogTestHelper
:
:
VerifyLogEndEvent
(
parsed_log
3
)
;
remove
(
temp_filename
.
c_str
(
)
)
;
}
class
ConfigReadWriteTest
{
public
:
ConfigReadWriteTest
(
)
:
prng
(
987654321
)
{
}
virtual
~
ConfigReadWriteTest
(
)
{
}
virtual
void
GenerateConfig
(
uint32_t
extensions_bitvector
)
=
0
;
virtual
void
VerifyConfig
(
const
ParsedRtcEventLog
&
parsed_log
size_t
index
)
=
0
;
virtual
void
LogConfig
(
RtcEventLog
*
event_log
)
=
0
;
void
DoTest
(
)
{
auto
test_info
=
:
:
testing
:
:
UnitTest
:
:
GetInstance
(
)
-
>
current_test_info
(
)
;
const
std
:
:
string
temp_filename
=
test
:
:
OutputPath
(
)
+
test_info
-
>
test_case_name
(
)
+
test_info
-
>
name
(
)
;
uint32_t
extensions_bitvector
=
(
1u
<
<
kNumExtensions
)
-
1
;
GenerateConfig
(
extensions_bitvector
)
;
rtc
:
:
ScopedFakeClock
fake_clock
;
fake_clock
.
SetTimeMicros
(
prng
.
Rand
<
uint32_t
>
(
)
)
;
std
:
:
unique_ptr
<
RtcEventLog
>
log_dumper
(
RtcEventLog
:
:
Create
(
)
)
;
log_dumper
-
>
StartLogging
(
temp_filename
10000000
)
;
LogConfig
(
log_dumper
.
get
(
)
)
;
log_dumper
-
>
StopLogging
(
)
;
ParsedRtcEventLog
parsed_log
;
ASSERT_TRUE
(
parsed_log
.
ParseFile
(
temp_filename
)
)
;
EXPECT_EQ
(
3u
parsed_log
.
GetNumberOfEvents
(
)
)
;
RtcEventLogTestHelper
:
:
VerifyLogStartEvent
(
parsed_log
0
)
;
VerifyConfig
(
parsed_log
1
)
;
RtcEventLogTestHelper
:
:
VerifyLogEndEvent
(
parsed_log
2
)
;
remove
(
temp_filename
.
c_str
(
)
)
;
}
Random
prng
;
}
;
class
AudioReceiveConfigReadWriteTest
:
public
ConfigReadWriteTest
{
public
:
void
GenerateConfig
(
uint32_t
extensions_bitvector
)
override
{
GenerateAudioReceiveConfig
(
extensions_bitvector
&
config
&
prng
)
;
}
void
LogConfig
(
RtcEventLog
*
event_log
)
override
{
event_log
-
>
LogAudioReceiveStreamConfig
(
config
)
;
}
void
VerifyConfig
(
const
ParsedRtcEventLog
&
parsed_log
size_t
index
)
override
{
RtcEventLogTestHelper
:
:
VerifyAudioReceiveStreamConfig
(
parsed_log
index
config
)
;
}
AudioReceiveStream
:
:
Config
config
;
}
;
class
AudioSendConfigReadWriteTest
:
public
ConfigReadWriteTest
{
public
:
AudioSendConfigReadWriteTest
(
)
:
config
(
nullptr
)
{
}
void
GenerateConfig
(
uint32_t
extensions_bitvector
)
override
{
GenerateAudioSendConfig
(
extensions_bitvector
&
config
&
prng
)
;
}
void
LogConfig
(
RtcEventLog
*
event_log
)
override
{
event_log
-
>
LogAudioSendStreamConfig
(
config
)
;
}
void
VerifyConfig
(
const
ParsedRtcEventLog
&
parsed_log
size_t
index
)
override
{
RtcEventLogTestHelper
:
:
VerifyAudioSendStreamConfig
(
parsed_log
index
config
)
;
}
AudioSendStream
:
:
Config
config
;
}
;
class
VideoReceiveConfigReadWriteTest
:
public
ConfigReadWriteTest
{
public
:
VideoReceiveConfigReadWriteTest
(
)
:
config
(
nullptr
)
{
}
void
GenerateConfig
(
uint32_t
extensions_bitvector
)
override
{
GenerateVideoReceiveConfig
(
extensions_bitvector
&
config
&
prng
)
;
}
void
LogConfig
(
RtcEventLog
*
event_log
)
override
{
event_log
-
>
LogVideoReceiveStreamConfig
(
config
)
;
}
void
VerifyConfig
(
const
ParsedRtcEventLog
&
parsed_log
size_t
index
)
override
{
RtcEventLogTestHelper
:
:
VerifyVideoReceiveStreamConfig
(
parsed_log
index
config
)
;
}
VideoReceiveStream
:
:
Config
config
;
}
;
class
VideoSendConfigReadWriteTest
:
public
ConfigReadWriteTest
{
public
:
VideoSendConfigReadWriteTest
(
)
:
config
(
nullptr
)
{
}
void
GenerateConfig
(
uint32_t
extensions_bitvector
)
override
{
GenerateVideoSendConfig
(
extensions_bitvector
&
config
&
prng
)
;
}
void
LogConfig
(
RtcEventLog
*
event_log
)
override
{
event_log
-
>
LogVideoSendStreamConfig
(
config
)
;
}
void
VerifyConfig
(
const
ParsedRtcEventLog
&
parsed_log
size_t
index
)
override
{
RtcEventLogTestHelper
:
:
VerifyVideoSendStreamConfig
(
parsed_log
index
config
)
;
}
VideoSendStream
:
:
Config
config
;
}
;
TEST
(
RtcEventLogTest
LogAudioReceiveConfig
)
{
AudioReceiveConfigReadWriteTest
test
;
test
.
DoTest
(
)
;
}
TEST
(
RtcEventLogTest
LogAudioSendConfig
)
{
AudioSendConfigReadWriteTest
test
;
test
.
DoTest
(
)
;
}
TEST
(
RtcEventLogTest
LogVideoReceiveConfig
)
{
VideoReceiveConfigReadWriteTest
test
;
test
.
DoTest
(
)
;
}
TEST
(
RtcEventLogTest
LogVideoSendConfig
)
{
VideoSendConfigReadWriteTest
test
;
test
.
DoTest
(
)
;
}
}
