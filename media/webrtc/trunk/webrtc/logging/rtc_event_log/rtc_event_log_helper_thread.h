#
ifndef
WEBRTC_LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_HELPER_THREAD_H_
#
define
WEBRTC_LOGGING_RTC_EVENT_LOG_RTC_EVENT_LOG_HELPER_THREAD_H_
#
include
<
limits
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
event
.
h
"
#
include
"
webrtc
/
base
/
ignore_wundef
.
h
"
#
include
"
webrtc
/
base
/
platform_thread
.
h
"
#
include
"
webrtc
/
base
/
swap_queue
.
h
"
#
include
"
webrtc
/
logging
/
rtc_event_log
/
ringbuffer
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
file_wrapper
.
h
"
#
ifdef
ENABLE_RTC_EVENT_LOG
RTC_PUSH_IGNORING_WUNDEF
(
)
#
ifdef
WEBRTC_ANDROID_PLATFORM_BUILD
#
include
"
external
/
webrtc
/
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log
.
pb
.
h
"
#
else
#
include
"
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log
.
pb
.
h
"
#
endif
RTC_POP_IGNORING_WUNDEF
(
)
#
endif
#
ifdef
ENABLE_RTC_EVENT_LOG
namespace
webrtc
{
class
RtcEventLogHelperThread
final
{
public
:
struct
ControlMessage
{
ControlMessage
(
)
:
message_type
(
STOP_FILE
)
file
(
nullptr
)
max_size_bytes
(
0
)
start_time
(
0
)
stop_time
(
0
)
{
}
enum
{
START_FILE
STOP_FILE
TERMINATE_THREAD
}
message_type
;
std
:
:
unique_ptr
<
FileWrapper
>
file
;
int64_t
max_size_bytes
;
int64_t
start_time
;
int64_t
stop_time
;
friend
void
swap
(
ControlMessage
&
lhs
ControlMessage
&
rhs
)
{
using
std
:
:
swap
;
swap
(
lhs
.
message_type
rhs
.
message_type
)
;
lhs
.
file
.
swap
(
rhs
.
file
)
;
swap
(
lhs
.
max_size_bytes
rhs
.
max_size_bytes
)
;
swap
(
lhs
.
start_time
rhs
.
start_time
)
;
swap
(
lhs
.
stop_time
rhs
.
stop_time
)
;
}
}
;
RtcEventLogHelperThread
(
SwapQueue
<
ControlMessage
>
*
message_queue
SwapQueue
<
std
:
:
unique_ptr
<
rtclog
:
:
Event
>
>
*
event_queue
)
;
~
RtcEventLogHelperThread
(
)
;
void
WaitForFileFinished
(
)
;
void
SignalNewEvent
(
)
;
private
:
static
bool
ThreadOutputFunction
(
void
*
obj
)
;
bool
AppendEventToString
(
rtclog
:
:
Event
*
event
)
;
bool
LogToMemory
(
)
;
void
StartLogFile
(
)
;
bool
LogToFile
(
)
;
void
StopLogFile
(
)
;
void
ProcessEvents
(
)
;
SwapQueue
<
ControlMessage
>
*
message_queue_
;
SwapQueue
<
std
:
:
unique_ptr
<
rtclog
:
:
Event
>
>
*
event_queue_
;
RingBuffer
<
std
:
:
unique_ptr
<
rtclog
:
:
Event
>
>
history_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
rtclog
:
:
Event
>
>
config_history_
;
std
:
:
unique_ptr
<
FileWrapper
>
file_
;
rtc
:
:
PlatformThread
thread_
;
int64_t
max_size_bytes_
;
int64_t
written_bytes_
;
int64_t
start_time_
;
int64_t
stop_time_
;
bool
has_recent_event_
;
std
:
:
unique_ptr
<
rtclog
:
:
Event
>
most_recent_event_
;
std
:
:
string
output_string_
;
rtc
:
:
Event
wake_periodically_
;
rtc
:
:
Event
wake_from_hibernation_
;
rtc
:
:
Event
file_finished_
;
RTC_DISALLOW_IMPLICIT_CONSTRUCTORS
(
RtcEventLogHelperThread
)
;
}
;
}
#
endif
#
endif
