#
ifndef
WEBRTC_CALL_BITRATE_ALLOCATOR_H_
#
define
WEBRTC_CALL_BITRATE_ALLOCATOR_H_
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
sequenced_task_checker
.
h
"
namespace
webrtc
{
class
Clock
;
class
BitrateAllocatorObserver
{
public
:
virtual
uint32_t
OnBitrateUpdated
(
uint32_t
bitrate_bps
uint8_t
fraction_loss
int64_t
rtt
int64_t
probing_interval_ms
)
=
0
;
protected
:
virtual
~
BitrateAllocatorObserver
(
)
{
}
}
;
class
BitrateAllocator
{
public
:
class
LimitObserver
{
public
:
virtual
void
OnAllocationLimitsChanged
(
uint32_t
min_send_bitrate_bps
uint32_t
max_padding_bitrate_bps
)
=
0
;
protected
:
virtual
~
LimitObserver
(
)
{
}
}
;
explicit
BitrateAllocator
(
LimitObserver
*
limit_observer
)
;
~
BitrateAllocator
(
)
;
void
OnNetworkChanged
(
uint32_t
target_bitrate_bps
uint8_t
fraction_loss
int64_t
rtt
int64_t
probing_interval_ms
)
;
void
AddObserver
(
BitrateAllocatorObserver
*
observer
uint32_t
min_bitrate_bps
uint32_t
max_bitrate_bps
uint32_t
pad_up_bitrate_bps
bool
enforce_min_bitrate
)
;
void
RemoveObserver
(
BitrateAllocatorObserver
*
observer
)
;
int
GetStartBitrate
(
BitrateAllocatorObserver
*
observer
)
;
private
:
struct
ObserverConfig
{
ObserverConfig
(
BitrateAllocatorObserver
*
observer
uint32_t
min_bitrate_bps
uint32_t
max_bitrate_bps
uint32_t
pad_up_bitrate_bps
bool
enforce_min_bitrate
)
:
observer
(
observer
)
min_bitrate_bps
(
min_bitrate_bps
)
max_bitrate_bps
(
max_bitrate_bps
)
pad_up_bitrate_bps
(
pad_up_bitrate_bps
)
enforce_min_bitrate
(
enforce_min_bitrate
)
allocated_bitrate_bps
(
-
1
)
media_ratio
(
1
.
0
)
{
}
BitrateAllocatorObserver
*
observer
;
uint32_t
min_bitrate_bps
;
uint32_t
max_bitrate_bps
;
uint32_t
pad_up_bitrate_bps
;
bool
enforce_min_bitrate
;
int64_t
allocated_bitrate_bps
;
double
media_ratio
;
}
;
void
UpdateAllocationLimits
(
)
;
typedef
std
:
:
vector
<
ObserverConfig
>
ObserverConfigs
;
ObserverConfigs
:
:
iterator
FindObserverConfig
(
const
BitrateAllocatorObserver
*
observer
)
;
typedef
std
:
:
multimap
<
uint32_t
const
ObserverConfig
*
>
ObserverSortingMap
;
typedef
std
:
:
map
<
BitrateAllocatorObserver
*
int
>
ObserverAllocation
;
ObserverAllocation
AllocateBitrates
(
uint32_t
bitrate
)
;
ObserverAllocation
ZeroRateAllocation
(
)
;
ObserverAllocation
LowRateAllocation
(
uint32_t
bitrate
)
;
ObserverAllocation
NormalRateAllocation
(
uint32_t
bitrate
uint32_t
sum_min_bitrates
)
;
ObserverAllocation
MaxRateAllocation
(
uint32_t
bitrate
uint32_t
sum_max_bitrates
)
;
uint32_t
LastAllocatedBitrate
(
const
ObserverConfig
&
observer_config
)
;
uint32_t
MinBitrateWithHysteresis
(
const
ObserverConfig
&
observer_config
)
;
void
DistributeBitrateEvenly
(
uint32_t
bitrate
bool
include_zero_allocations
int
max_multiplier
ObserverAllocation
*
allocation
)
;
bool
EnoughBitrateForAllObservers
(
uint32_t
bitrate
uint32_t
sum_min_bitrates
)
;
rtc
:
:
SequencedTaskChecker
sequenced_checker_
;
LimitObserver
*
const
limit_observer_
GUARDED_BY
(
&
sequenced_checker_
)
;
ObserverConfigs
bitrate_observer_configs_
GUARDED_BY
(
&
sequenced_checker_
)
;
uint32_t
last_bitrate_bps_
GUARDED_BY
(
&
sequenced_checker_
)
;
uint32_t
last_non_zero_bitrate_bps_
GUARDED_BY
(
&
sequenced_checker_
)
;
uint8_t
last_fraction_loss_
GUARDED_BY
(
&
sequenced_checker_
)
;
int64_t
last_rtt_
GUARDED_BY
(
&
sequenced_checker_
)
;
int64_t
last_probing_interval_ms_
GUARDED_BY
(
&
sequenced_checker_
)
;
int
num_pause_events_
GUARDED_BY
(
&
sequenced_checker_
)
;
Clock
*
const
clock_
GUARDED_BY
(
&
sequenced_checker_
)
;
int64_t
last_bwe_log_time_
GUARDED_BY
(
&
sequenced_checker_
)
;
}
;
}
#
endif
