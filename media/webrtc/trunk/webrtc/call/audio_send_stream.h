#
ifndef
WEBRTC_CALL_AUDIO_SEND_STREAM_H_
#
define
WEBRTC_CALL_AUDIO_SEND_STREAM_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
api
/
call
/
transport
.
h
"
#
include
"
webrtc
/
base
/
optional
.
h
"
#
include
"
webrtc
/
config
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
audio_encoder
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
AudioSendStream
{
public
:
struct
Stats
{
Stats
(
)
;
~
Stats
(
)
;
uint32_t
local_ssrc
=
0
;
int64_t
bytes_sent
=
0
;
int32_t
packets_sent
=
0
;
int32_t
packets_lost
=
-
1
;
float
fraction_lost
=
-
1
.
0f
;
std
:
:
string
codec_name
;
rtc
:
:
Optional
<
int
>
codec_payload_type
;
int32_t
ext_seqnum
=
-
1
;
int32_t
jitter_ms
=
-
1
;
int64_t
rtt_ms
=
-
1
;
int32_t
audio_level
=
-
1
;
float
aec_quality_min
=
-
1
.
0f
;
int32_t
echo_delay_median_ms
=
-
1
;
int32_t
echo_delay_std_ms
=
-
1
;
int32_t
echo_return_loss
=
-
100
;
int32_t
echo_return_loss_enhancement
=
-
100
;
float
residual_echo_likelihood
=
-
1
.
0f
;
float
residual_echo_likelihood_recent_max
=
-
1
.
0f
;
bool
typing_noise_detected
=
false
;
}
;
struct
Config
{
Config
(
)
=
delete
;
explicit
Config
(
Transport
*
send_transport
)
;
~
Config
(
)
;
std
:
:
string
ToString
(
)
const
;
struct
Rtp
{
Rtp
(
)
;
~
Rtp
(
)
;
std
:
:
string
ToString
(
)
const
;
uint32_t
ssrc
=
0
;
std
:
:
vector
<
RtpExtension
>
extensions
;
NackConfig
nack
;
std
:
:
string
c_name
;
}
rtp
;
Transport
*
send_transport
=
nullptr
;
int
voe_channel_id
=
-
1
;
int
min_bitrate_bps
=
-
1
;
int
max_bitrate_bps
=
-
1
;
rtc
:
:
Optional
<
std
:
:
string
>
audio_network_adaptor_config
;
struct
SendCodecSpec
{
SendCodecSpec
(
)
;
std
:
:
string
ToString
(
)
const
;
bool
operator
=
=
(
const
SendCodecSpec
&
rhs
)
const
;
bool
operator
!
=
(
const
SendCodecSpec
&
rhs
)
const
{
return
!
(
*
this
=
=
rhs
)
;
}
bool
nack_enabled
=
false
;
bool
transport_cc_enabled
=
false
;
bool
enable_codec_fec
=
false
;
bool
enable_opus_dtx
=
false
;
int
opus_max_playback_rate
=
0
;
int
cng_payload_type
=
-
1
;
int
cng_plfreq
=
-
1
;
int
max_ptime_ms
=
-
1
;
int
min_ptime_ms
=
-
1
;
webrtc
:
:
CodecInst
codec_inst
;
}
send_codec_spec
;
}
;
virtual
void
Start
(
)
=
0
;
virtual
void
Stop
(
)
=
0
;
virtual
bool
SendTelephoneEvent
(
int
payload_type
int
payload_frequency
int
event
int
duration_ms
)
=
0
;
virtual
void
SetMuted
(
bool
muted
)
=
0
;
virtual
Stats
GetStats
(
)
const
=
0
;
protected
:
virtual
~
AudioSendStream
(
)
{
}
}
;
}
#
endif
