#
ifndef
CALL_AUDIO_SEND_STREAM_H_
#
define
CALL_AUDIO_SEND_STREAM_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
audio_codecs
/
audio_encoder
.
h
"
#
include
"
api
/
audio_codecs
/
audio_encoder_factory
.
h
"
#
include
"
api
/
audio_codecs
/
audio_format
.
h
"
#
include
"
api
/
call
/
transport
.
h
"
#
include
"
api
/
optional
.
h
"
#
include
"
api
/
rtpparameters
.
h
"
#
include
"
call
/
rtp_config
.
h
"
#
include
"
modules
/
audio_processing
/
include
/
audio_processing_statistics
.
h
"
#
include
"
rtc_base
/
scoped_ref_ptr
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
AudioSendStream
{
public
:
struct
Stats
{
Stats
(
)
;
~
Stats
(
)
;
uint32_t
local_ssrc
=
0
;
int64_t
bytes_sent
=
0
;
int32_t
packets_sent
=
0
;
int32_t
packets_lost
=
-
1
;
float
fraction_lost
=
-
1
.
0f
;
std
:
:
string
codec_name
;
rtc
:
:
Optional
<
int
>
codec_payload_type
;
int32_t
ext_seqnum
=
-
1
;
int32_t
jitter_ms
=
-
1
;
int64_t
rtt_ms
=
-
1
;
int32_t
audio_level
=
-
1
;
double
total_input_energy
=
0
.
0
;
double
total_input_duration
=
0
.
0
;
bool
typing_noise_detected
=
false
;
ANAStats
ana_statistics
;
AudioProcessingStats
apm_statistics
;
}
;
struct
Config
{
Config
(
)
=
delete
;
explicit
Config
(
Transport
*
send_transport
)
;
~
Config
(
)
;
std
:
:
string
ToString
(
)
const
;
struct
Rtp
{
Rtp
(
)
;
~
Rtp
(
)
;
std
:
:
string
ToString
(
)
const
;
uint32_t
ssrc
=
0
;
std
:
:
vector
<
RtpExtension
>
extensions
;
NackConfig
nack
;
std
:
:
string
c_name
;
}
rtp
;
Transport
*
send_transport
=
nullptr
;
int
voe_channel_id
=
-
1
;
int
min_bitrate_bps
=
-
1
;
int
max_bitrate_bps
=
-
1
;
rtc
:
:
Optional
<
std
:
:
string
>
audio_network_adaptor_config
;
struct
SendCodecSpec
{
SendCodecSpec
(
int
payload_type
const
SdpAudioFormat
&
format
)
;
~
SendCodecSpec
(
)
;
std
:
:
string
ToString
(
)
const
;
bool
operator
=
=
(
const
SendCodecSpec
&
rhs
)
const
;
bool
operator
!
=
(
const
SendCodecSpec
&
rhs
)
const
{
return
!
(
*
this
=
=
rhs
)
;
}
int
payload_type
;
SdpAudioFormat
format
;
bool
nack_enabled
=
false
;
bool
transport_cc_enabled
=
false
;
rtc
:
:
Optional
<
int
>
cng_payload_type
;
rtc
:
:
Optional
<
int
>
target_bitrate_bps
;
}
;
rtc
:
:
Optional
<
SendCodecSpec
>
send_codec_spec
;
rtc
:
:
scoped_refptr
<
AudioEncoderFactory
>
encoder_factory
;
std
:
:
string
track_id
;
}
;
virtual
~
AudioSendStream
(
)
=
default
;
virtual
const
webrtc
:
:
AudioSendStream
:
:
Config
&
GetConfig
(
)
const
=
0
;
virtual
void
Reconfigure
(
const
Config
&
config
)
=
0
;
virtual
void
Start
(
)
=
0
;
virtual
void
Stop
(
)
=
0
;
virtual
bool
SendTelephoneEvent
(
int
payload_type
int
payload_frequency
int
event
int
duration_ms
)
=
0
;
virtual
void
SetMuted
(
bool
muted
)
=
0
;
virtual
Stats
GetStats
(
)
const
=
0
;
virtual
Stats
GetStats
(
bool
has_remote_tracks
)
const
=
0
;
}
;
}
#
endif
