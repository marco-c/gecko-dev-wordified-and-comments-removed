#
include
<
stdint
.
h
>
#
include
"
webrtc
/
base
/
array_view
.
h
"
#
include
"
webrtc
/
call
/
flexfec_receive_stream_impl
.
h
"
#
include
"
webrtc
/
modules
/
pacing
/
packet_router
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
flexfec_receiver
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
mocks
/
mock_recovered_packet_receiver
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
mocks
/
mock_rtcp_rtt_stats
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
byte_io
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_header_extensions
.
h
"
#
include
"
webrtc
/
modules
/
utility
/
include
/
mock
/
mock_process_thread
.
h
"
#
include
"
webrtc
/
test
/
gmock
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
#
include
"
webrtc
/
test
/
mock_transport
.
h
"
namespace
webrtc
{
namespace
{
constexpr
uint8_t
kFlexfecPlType
=
118
;
constexpr
uint8_t
kFlexfecSsrc
[
]
=
{
0x00
0x00
0x00
0x01
}
;
constexpr
uint8_t
kMediaSsrc
[
]
=
{
0x00
0x00
0x00
0x02
}
;
FlexfecReceiveStream
:
:
Config
CreateDefaultConfig
(
Transport
*
rtcp_send_transport
)
{
FlexfecReceiveStream
:
:
Config
config
(
rtcp_send_transport
)
;
config
.
payload_type
=
kFlexfecPlType
;
config
.
remote_ssrc
=
ByteReader
<
uint32_t
>
:
:
ReadBigEndian
(
kFlexfecSsrc
)
;
config
.
protected_media_ssrcs
=
{
ByteReader
<
uint32_t
>
:
:
ReadBigEndian
(
kMediaSsrc
)
}
;
EXPECT_TRUE
(
config
.
IsCompleteAndEnabled
(
)
)
;
return
config
;
}
RtpPacketReceived
ParsePacket
(
rtc
:
:
ArrayView
<
const
uint8_t
>
packet
)
{
RtpPacketReceived
parsed_packet
(
nullptr
)
;
EXPECT_TRUE
(
parsed_packet
.
Parse
(
packet
)
)
;
return
parsed_packet
;
}
}
TEST
(
FlexfecReceiveStreamConfigTest
IsCompleteAndEnabled
)
{
MockTransport
rtcp_send_transport
;
FlexfecReceiveStream
:
:
Config
config
(
&
rtcp_send_transport
)
;
config
.
local_ssrc
=
18374743
;
config
.
rtcp_mode
=
RtcpMode
:
:
kCompound
;
config
.
transport_cc
=
true
;
config
.
rtp_header_extensions
.
emplace_back
(
TransportSequenceNumber
:
:
kUri
7
)
;
EXPECT_FALSE
(
config
.
IsCompleteAndEnabled
(
)
)
;
config
.
payload_type
=
123
;
EXPECT_FALSE
(
config
.
IsCompleteAndEnabled
(
)
)
;
config
.
remote_ssrc
=
238423838
;
EXPECT_FALSE
(
config
.
IsCompleteAndEnabled
(
)
)
;
config
.
protected_media_ssrcs
.
push_back
(
138989393
)
;
EXPECT_TRUE
(
config
.
IsCompleteAndEnabled
(
)
)
;
config
.
protected_media_ssrcs
.
push_back
(
33423423
)
;
EXPECT_FALSE
(
config
.
IsCompleteAndEnabled
(
)
)
;
}
class
FlexfecReceiveStreamTest
:
public
:
:
testing
:
:
Test
{
protected
:
FlexfecReceiveStreamTest
(
)
:
config_
(
CreateDefaultConfig
(
&
rtcp_send_transport_
)
)
receive_stream_
(
config_
&
recovered_packet_receiver_
&
rtt_stats_
&
process_thread_
)
{
}
MockTransport
rtcp_send_transport_
;
FlexfecReceiveStream
:
:
Config
config_
;
MockRecoveredPacketReceiver
recovered_packet_receiver_
;
MockRtcpRttStats
rtt_stats_
;
MockProcessThread
process_thread_
;
FlexfecReceiveStreamImpl
receive_stream_
;
}
;
TEST_F
(
FlexfecReceiveStreamTest
ConstructDestruct
)
{
}
TEST_F
(
FlexfecReceiveStreamTest
StartStop
)
{
receive_stream_
.
Start
(
)
;
receive_stream_
.
Stop
(
)
;
}
TEST_F
(
FlexfecReceiveStreamTest
RecoversPacketWhenStarted
)
{
constexpr
uint8_t
kFlexfecSeqNum
[
]
=
{
0x00
0x01
}
;
constexpr
uint8_t
kFlexfecTs
[
]
=
{
0x00
0x11
0x22
0x33
}
;
constexpr
uint8_t
kMediaPlType
=
107
;
constexpr
uint8_t
kMediaSeqNum
[
]
=
{
0x00
0x02
}
;
constexpr
uint8_t
kMediaTs
[
]
=
{
0xaa
0xbb
0xcc
0xdd
}
;
constexpr
uint8_t
kKBit0
=
1
<
<
7
;
constexpr
uint8_t
kFlexfecPktMask
[
]
=
{
kKBit0
|
0x00
0x01
}
;
constexpr
uint8_t
kPayloadLength
[
]
=
{
0x00
0x04
}
;
constexpr
uint8_t
kSsrcCount
=
1
;
constexpr
uint8_t
kReservedBits
=
0x00
;
constexpr
uint8_t
kPayloadBits
=
0x00
;
constexpr
uint8_t
kFlexfecPacket
[
]
=
{
0x80
kFlexfecPlType
kFlexfecSeqNum
[
0
]
kFlexfecSeqNum
[
1
]
kFlexfecTs
[
0
]
kFlexfecTs
[
1
]
kFlexfecTs
[
2
]
kFlexfecTs
[
3
]
kFlexfecSsrc
[
0
]
kFlexfecSsrc
[
1
]
kFlexfecSsrc
[
2
]
kFlexfecSsrc
[
3
]
0x00
kMediaPlType
kPayloadLength
[
0
]
kPayloadLength
[
1
]
kMediaTs
[
0
]
kMediaTs
[
1
]
kMediaTs
[
2
]
kMediaTs
[
3
]
kSsrcCount
kReservedBits
kReservedBits
kReservedBits
kMediaSsrc
[
0
]
kMediaSsrc
[
1
]
kMediaSsrc
[
2
]
kMediaSsrc
[
3
]
kMediaSeqNum
[
0
]
kMediaSeqNum
[
1
]
kFlexfecPktMask
[
0
]
kFlexfecPktMask
[
1
]
kPayloadBits
kPayloadBits
kPayloadBits
kPayloadBits
}
;
testing
:
:
StrictMock
<
MockRecoveredPacketReceiver
>
recovered_packet_receiver
;
FlexfecReceiveStreamImpl
receive_stream
(
config_
&
recovered_packet_receiver
&
rtt_stats_
&
process_thread_
)
;
receive_stream
.
AddAndProcessReceivedPacket
(
ParsePacket
(
kFlexfecPacket
)
)
;
receive_stream
.
Start
(
)
;
EXPECT_CALL
(
recovered_packet_receiver
OnRecoveredPacket
(
:
:
testing
:
:
_
kRtpHeaderSize
+
kPayloadLength
[
1
]
)
)
;
receive_stream
.
AddAndProcessReceivedPacket
(
ParsePacket
(
kFlexfecPacket
)
)
;
}
}
