#
ifndef
WEBRTC_CONFIG_H_
#
define
WEBRTC_CONFIG_H_
#
include
<
string
>
#
include
<
vector
>
#
include
<
string
.
h
>
#
include
<
algorithm
>
#
include
"
webrtc
/
base
/
basictypes
.
h
"
#
include
"
webrtc
/
base
/
optional
.
h
"
#
include
"
webrtc
/
base
/
refcount
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
struct
NackConfig
{
NackConfig
(
)
:
rtp_history_ms
(
0
)
{
}
std
:
:
string
ToString
(
)
const
;
int
rtp_history_ms
;
}
;
struct
UlpfecConfig
{
UlpfecConfig
(
)
:
ulpfec_payload_type
(
-
1
)
red_payload_type
(
-
1
)
red_rtx_payload_type
(
-
1
)
{
}
std
:
:
string
ToString
(
)
const
;
bool
operator
=
=
(
const
UlpfecConfig
&
other
)
const
;
int
ulpfec_payload_type
;
int
red_payload_type
;
int
red_rtx_payload_type
;
}
;
struct
RtpExtension
{
RtpExtension
(
)
:
id
(
0
)
{
}
RtpExtension
(
const
std
:
:
string
&
uri
int
id
)
:
uri
(
uri
)
id
(
id
)
{
}
std
:
:
string
ToString
(
)
const
;
bool
operator
=
=
(
const
RtpExtension
&
rhs
)
const
{
return
uri
=
=
rhs
.
uri
&
&
id
=
=
rhs
.
id
;
}
static
bool
IsSupportedForAudio
(
const
std
:
:
string
&
uri
)
;
static
bool
IsSupportedForVideo
(
const
std
:
:
string
&
uri
)
;
static
const
char
*
kAudioLevelUri
;
static
const
int
kAudioLevelDefaultId
;
static
const
char
*
kTimestampOffsetUri
;
static
const
int
kTimestampOffsetDefaultId
;
static
const
char
*
kAbsSendTimeUri
;
static
const
int
kAbsSendTimeDefaultId
;
static
const
char
*
kVideoRotationUri
;
static
const
int
kVideoRotationDefaultId
;
static
const
char
*
kTransportSequenceNumberUri
;
static
const
int
kTransportSequenceNumberDefaultId
;
static
const
char
*
kPlayoutDelayUri
;
static
const
int
kPlayoutDelayDefaultId
;
static
const
char
*
kRtpStreamIdUri
;
static
const
int
kRtpStreamIdDefaultId
;
static
const
char
*
kRepairedRtpStreamIdUri
;
static
const
int
kRepairedRtpStreamIdDefaultId
;
static
const
char
*
kMIdUri
;
static
const
int
kMIdDefaultId
;
static
const
char
*
kCsrcAudioLevelUri
;
static
const
int
kCsrcAudioLevelDefaultId
;
std
:
:
string
uri
;
int
id
;
}
;
struct
VideoStream
{
VideoStream
(
)
;
~
VideoStream
(
)
;
std
:
:
string
ToString
(
)
const
;
size_t
width
;
size_t
height
;
int
max_framerate
;
int
min_bitrate_bps
;
int
target_bitrate_bps
;
int
max_bitrate_bps
;
int
max_qp
;
char
rid
[
kRIDSize
+
1
]
;
const
std
:
:
string
Rid
(
)
const
{
return
std
:
:
string
(
rid
)
;
}
void
SetRid
(
const
std
:
:
string
&
aRid
)
{
static_assert
(
sizeof
(
rid
)
>
kRIDSize
"
mRid
must
be
large
enought
to
hold
a
RID
+
null
termination
"
)
;
auto
len
=
std
:
:
min
(
(
size_t
)
kRIDSize
-
1
aRid
.
length
(
)
)
;
strncpy
(
&
rid
[
0
]
aRid
.
c_str
(
)
len
)
;
rid
[
len
]
=
0
;
}
std
:
:
vector
<
int
>
temporal_layer_thresholds_bps
;
}
;
class
VideoEncoderConfig
{
public
:
class
EncoderSpecificSettings
:
public
rtc
:
:
RefCountInterface
{
public
:
void
FillEncoderSpecificSettings
(
VideoCodec
*
codec_struct
)
const
;
virtual
void
FillVideoCodecVp8
(
VideoCodecVP8
*
vp8_settings
)
const
;
virtual
void
FillVideoCodecVp9
(
VideoCodecVP9
*
vp9_settings
)
const
;
virtual
void
FillVideoCodecH264
(
VideoCodecH264
*
h264_settings
)
const
;
private
:
~
EncoderSpecificSettings
(
)
override
{
}
friend
class
VideoEncoderConfig
;
}
;
class
H264EncoderSpecificSettings
:
public
EncoderSpecificSettings
{
public
:
explicit
H264EncoderSpecificSettings
(
const
VideoCodecH264
&
specifics
)
;
void
FillVideoCodecH264
(
VideoCodecH264
*
h264_settings
)
const
override
;
private
:
VideoCodecH264
specifics_
;
}
;
class
Vp8EncoderSpecificSettings
:
public
EncoderSpecificSettings
{
public
:
explicit
Vp8EncoderSpecificSettings
(
const
VideoCodecVP8
&
specifics
)
;
void
FillVideoCodecVp8
(
VideoCodecVP8
*
vp8_settings
)
const
override
;
private
:
VideoCodecVP8
specifics_
;
}
;
class
Vp9EncoderSpecificSettings
:
public
EncoderSpecificSettings
{
public
:
explicit
Vp9EncoderSpecificSettings
(
const
VideoCodecVP9
&
specifics
)
;
void
FillVideoCodecVp9
(
VideoCodecVP9
*
vp9_settings
)
const
override
;
private
:
VideoCodecVP9
specifics_
;
}
;
enum
class
ContentType
{
kRealtimeVideo
kScreen
}
;
class
VideoStreamFactoryInterface
:
public
rtc
:
:
RefCountInterface
{
public
:
virtual
std
:
:
vector
<
VideoStream
>
CreateEncoderStreams
(
int
width
int
height
const
VideoEncoderConfig
&
encoder_config
)
=
0
;
protected
:
~
VideoStreamFactoryInterface
(
)
override
{
}
}
;
VideoEncoderConfig
&
operator
=
(
VideoEncoderConfig
&
&
)
=
default
;
VideoEncoderConfig
&
operator
=
(
const
VideoEncoderConfig
&
)
=
delete
;
VideoEncoderConfig
Copy
(
)
const
{
return
VideoEncoderConfig
(
*
this
)
;
}
VideoEncoderConfig
(
)
;
VideoEncoderConfig
(
VideoEncoderConfig
&
&
)
;
~
VideoEncoderConfig
(
)
;
std
:
:
string
ToString
(
)
const
;
rtc
:
:
scoped_refptr
<
VideoStreamFactoryInterface
>
video_stream_factory
;
std
:
:
vector
<
SpatialLayer
>
spatial_layers
;
ContentType
content_type
;
rtc
:
:
scoped_refptr
<
const
EncoderSpecificSettings
>
encoder_specific_settings
;
unsigned
char
resolution_divisor
;
int
min_transmit_bitrate_bps
;
int
max_bitrate_bps
;
size_t
number_of_streams
;
private
:
VideoEncoderConfig
(
const
VideoEncoderConfig
&
)
;
}
;
}
#
endif
