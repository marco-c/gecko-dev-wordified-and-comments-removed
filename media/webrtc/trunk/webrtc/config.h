#
ifndef
WEBRTC_CONFIG_H_
#
define
WEBRTC_CONFIG_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
struct
NackConfig
{
NackConfig
(
)
:
rtp_history_ms
(
0
)
{
}
int
rtp_history_ms
;
}
;
struct
FecConfig
{
FecConfig
(
)
:
ulpfec_payload_type
(
-
1
)
red_payload_type
(
-
1
)
{
}
std
:
:
string
ToString
(
)
const
;
int
ulpfec_payload_type
;
int
red_payload_type
;
}
;
struct
RtpExtension
{
RtpExtension
(
const
std
:
:
string
&
name
int
id
)
:
name
(
name
)
id
(
id
)
{
}
std
:
:
string
ToString
(
)
const
;
static
bool
IsSupported
(
const
std
:
:
string
&
name
)
;
static
const
char
*
kTOffset
;
static
const
char
*
kAbsSendTime
;
static
const
char
*
kVideoRotation
;
std
:
:
string
name
;
int
id
;
}
;
struct
VideoStream
{
VideoStream
(
)
;
~
VideoStream
(
)
;
std
:
:
string
ToString
(
)
const
;
size_t
width
;
size_t
height
;
int
max_framerate
;
int
min_bitrate_bps
;
int
target_bitrate_bps
;
int
max_bitrate_bps
;
int
max_qp
;
std
:
:
vector
<
int
>
temporal_layer_thresholds_bps
;
}
;
struct
VideoEncoderConfig
{
enum
ContentType
{
kRealtimeVideo
kScreenshare
}
;
VideoEncoderConfig
(
)
;
~
VideoEncoderConfig
(
)
;
std
:
:
string
ToString
(
)
const
;
std
:
:
vector
<
VideoStream
>
streams
;
ContentType
content_type
;
void
*
encoder_specific_settings
;
int
min_transmit_bitrate_bps
;
}
;
}
#
endif
