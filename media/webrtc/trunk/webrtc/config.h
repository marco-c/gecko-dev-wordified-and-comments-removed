#
ifndef
WEBRTC_CONFIG_H_
#
define
WEBRTC_CONFIG_H_
#
include
<
string
>
#
include
<
vector
>
#
include
<
string
.
h
>
#
include
<
algorithm
>
#
include
"
webrtc
/
common
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
struct
NackConfig
{
NackConfig
(
)
:
rtp_history_ms
(
0
)
{
}
int
rtp_history_ms
;
}
;
struct
FecConfig
{
FecConfig
(
)
:
ulpfec_payload_type
(
-
1
)
red_payload_type
(
-
1
)
red_rtx_payload_type
(
-
1
)
{
}
std
:
:
string
ToString
(
)
const
;
int
ulpfec_payload_type
;
int
red_payload_type
;
int
red_rtx_payload_type
;
}
;
struct
RtpExtension
{
RtpExtension
(
const
std
:
:
string
&
name
int
id
)
:
name
(
name
)
id
(
id
)
{
}
std
:
:
string
ToString
(
)
const
;
bool
operator
=
=
(
const
RtpExtension
&
rhs
)
const
{
return
name
=
=
rhs
.
name
&
&
id
=
=
rhs
.
id
;
}
static
bool
IsSupportedForAudio
(
const
std
:
:
string
&
name
)
;
static
bool
IsSupportedForVideo
(
const
std
:
:
string
&
name
)
;
static
const
char
*
kTOffset
;
static
const
char
*
kAbsSendTime
;
static
const
char
*
kVideoRotation
;
static
const
char
*
kAudioLevel
;
static
const
char
*
kTransportSequenceNumber
;
static
const
char
*
kRtpStreamId
;
std
:
:
string
name
;
int
id
;
}
;
struct
VideoStream
{
VideoStream
(
)
;
~
VideoStream
(
)
;
std
:
:
string
ToString
(
)
const
;
size_t
width
;
size_t
height
;
int
max_framerate
;
int
min_bitrate_bps
;
int
target_bitrate_bps
;
int
max_bitrate_bps
;
int
max_qp
;
std
:
:
vector
<
int
>
temporal_layer_thresholds_bps
;
}
;
struct
VideoEncoderConfig
{
enum
class
ContentType
{
kRealtimeVideo
kScreen
}
;
VideoEncoderConfig
(
)
;
~
VideoEncoderConfig
(
)
;
std
:
:
string
ToString
(
)
const
;
std
:
:
vector
<
VideoStream
>
streams
;
std
:
:
vector
<
SpatialLayer
>
spatial_layers
;
ContentType
content_type
;
void
*
encoder_specific_settings
;
unsigned
char
resolution_divisor
;
int
min_transmit_bitrate_bps
;
}
;
struct
NetEqCapacityConfig
{
NetEqCapacityConfig
(
)
:
enabled
(
false
)
capacity
(
0
)
{
}
explicit
NetEqCapacityConfig
(
int
value
)
:
enabled
(
true
)
capacity
(
value
)
{
}
static
const
ConfigOptionID
identifier
=
ConfigOptionID
:
:
kNetEqCapacityConfig
;
bool
enabled
;
int
capacity
;
}
;
struct
NetEqFastAccelerate
{
NetEqFastAccelerate
(
)
:
enabled
(
false
)
{
}
explicit
NetEqFastAccelerate
(
bool
value
)
:
enabled
(
value
)
{
}
static
const
ConfigOptionID
identifier
=
ConfigOptionID
:
:
kNetEqFastAccelerate
;
bool
enabled
;
}
;
struct
VoicePacing
{
VoicePacing
(
)
:
enabled
(
false
)
{
}
explicit
VoicePacing
(
bool
value
)
:
enabled
(
value
)
{
}
static
const
ConfigOptionID
identifier
=
ConfigOptionID
:
:
kVoicePacing
;
bool
enabled
;
}
;
}
#
endif
