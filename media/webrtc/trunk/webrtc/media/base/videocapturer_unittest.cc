#
include
<
stdio
.
h
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
gunit
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
#
include
"
webrtc
/
media
/
base
/
fakevideocapturer
.
h
"
#
include
"
webrtc
/
media
/
base
/
fakevideorenderer
.
h
"
#
include
"
webrtc
/
media
/
base
/
testutils
.
h
"
#
include
"
webrtc
/
media
/
base
/
videocapturer
.
h
"
using
cricket
:
:
FakeVideoCapturer
;
namespace
{
const
int
kMsCallbackWait
=
500
;
const
int
kMinHdHeight
=
720
;
}
class
VideoCapturerTest
:
public
sigslot
:
:
has_slots
<
>
public
testing
:
:
Test
{
public
:
VideoCapturerTest
(
)
:
capture_state_
(
cricket
:
:
CS_STOPPED
)
num_state_changes_
(
0
)
{
InitCapturer
(
false
)
;
}
protected
:
void
InitCapturer
(
bool
is_screencast
)
{
capturer_
=
std
:
:
unique_ptr
<
FakeVideoCapturer
>
(
new
FakeVideoCapturer
(
is_screencast
)
)
;
capturer_
-
>
SignalStateChange
.
connect
(
this
&
VideoCapturerTest
:
:
OnStateChange
)
;
capturer_
-
>
AddOrUpdateSink
(
&
renderer_
rtc
:
:
VideoSinkWants
(
)
)
;
}
void
InitScreencast
(
)
{
InitCapturer
(
true
)
;
}
void
OnStateChange
(
cricket
:
:
VideoCapturer
*
cricket
:
:
CaptureState
capture_state
)
{
capture_state_
=
capture_state
;
+
+
num_state_changes_
;
}
cricket
:
:
CaptureState
capture_state
(
)
{
return
capture_state_
;
}
int
num_state_changes
(
)
{
return
num_state_changes_
;
}
std
:
:
unique_ptr
<
cricket
:
:
FakeVideoCapturer
>
capturer_
;
cricket
:
:
CaptureState
capture_state_
;
int
num_state_changes_
;
cricket
:
:
FakeVideoRenderer
renderer_
;
bool
expects_rotation_applied_
;
}
;
TEST_F
(
VideoCapturerTest
CaptureState
)
{
EXPECT_TRUE
(
capturer_
-
>
enable_video_adapter
(
)
)
;
EXPECT_EQ
(
cricket
:
:
CS_RUNNING
capturer_
-
>
Start
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
)
;
EXPECT_TRUE
(
capturer_
-
>
IsRunning
(
)
)
;
EXPECT_EQ_WAIT
(
cricket
:
:
CS_RUNNING
capture_state
(
)
kMsCallbackWait
)
;
EXPECT_EQ
(
1
num_state_changes
(
)
)
;
capturer_
-
>
Stop
(
)
;
EXPECT_EQ_WAIT
(
cricket
:
:
CS_STOPPED
capture_state
(
)
kMsCallbackWait
)
;
EXPECT_EQ
(
2
num_state_changes
(
)
)
;
capturer_
-
>
Stop
(
)
;
rtc
:
:
Thread
:
:
Current
(
)
-
>
ProcessMessages
(
100
)
;
EXPECT_EQ
(
2
num_state_changes
(
)
)
;
}
TEST_F
(
VideoCapturerTest
ScreencastScaledOddWidth
)
{
InitScreencast
(
)
;
int
kWidth
=
1281
;
int
kHeight
=
720
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
formats
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
kWidth
kHeight
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
5
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
formats
)
;
EXPECT_EQ
(
cricket
:
:
CS_RUNNING
capturer_
-
>
Start
(
cricket
:
:
VideoFormat
(
kWidth
kHeight
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
)
;
EXPECT_TRUE
(
capturer_
-
>
IsRunning
(
)
)
;
EXPECT_EQ
(
0
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
1
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
kWidth
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
kHeight
renderer_
.
height
(
)
)
;
}
TEST_F
(
VideoCapturerTest
TestRotationAppliedBySource
)
{
int
kWidth
=
800
;
int
kHeight
=
400
;
int
frame_count
=
0
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
formats
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
kWidth
kHeight
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
5
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
formats
)
;
rtc
:
:
VideoSinkWants
wants
;
wants
.
rotation_applied
=
true
;
capturer_
-
>
AddOrUpdateSink
(
&
renderer_
wants
)
;
EXPECT_EQ
(
cricket
:
:
CS_RUNNING
capturer_
-
>
Start
(
cricket
:
:
VideoFormat
(
kWidth
kHeight
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
)
;
EXPECT_TRUE
(
capturer_
-
>
IsRunning
(
)
)
;
EXPECT_EQ
(
0
renderer_
.
num_rendered_frames
(
)
)
;
capturer_
-
>
SetRotation
(
webrtc
:
:
kVideoRotation_90
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
+
+
frame_count
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
kWidth
renderer_
.
height
(
)
)
;
EXPECT_EQ
(
kHeight
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
kVideoRotation_0
renderer_
.
rotation
(
)
)
;
capturer_
-
>
SetRotation
(
webrtc
:
:
kVideoRotation_270
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
+
+
frame_count
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
kWidth
renderer_
.
height
(
)
)
;
EXPECT_EQ
(
kHeight
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
kVideoRotation_0
renderer_
.
rotation
(
)
)
;
capturer_
-
>
SetRotation
(
webrtc
:
:
kVideoRotation_180
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
+
+
frame_count
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
kWidth
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
kHeight
renderer_
.
height
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
kVideoRotation_0
renderer_
.
rotation
(
)
)
;
}
TEST_F
(
VideoCapturerTest
TestRotationAppliedBySinkByDefault
)
{
int
kWidth
=
800
;
int
kHeight
=
400
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
formats
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
kWidth
kHeight
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
5
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
formats
)
;
EXPECT_EQ
(
cricket
:
:
CS_RUNNING
capturer_
-
>
Start
(
cricket
:
:
VideoFormat
(
kWidth
kHeight
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
)
;
EXPECT_TRUE
(
capturer_
-
>
IsRunning
(
)
)
;
EXPECT_EQ
(
0
renderer_
.
num_rendered_frames
(
)
)
;
int
frame_count
=
0
;
capturer_
-
>
SetRotation
(
webrtc
:
:
kVideoRotation_0
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
+
+
frame_count
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
capturer_
-
>
GetRotation
(
)
renderer_
.
rotation
(
)
)
;
capturer_
-
>
SetRotation
(
webrtc
:
:
kVideoRotation_90
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
+
+
frame_count
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
capturer_
-
>
GetRotation
(
)
renderer_
.
rotation
(
)
)
;
capturer_
-
>
SetRotation
(
webrtc
:
:
kVideoRotation_180
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
+
+
frame_count
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
capturer_
-
>
GetRotation
(
)
renderer_
.
rotation
(
)
)
;
capturer_
-
>
SetRotation
(
webrtc
:
:
kVideoRotation_270
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
+
+
frame_count
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
capturer_
-
>
GetRotation
(
)
renderer_
.
rotation
(
)
)
;
}
TEST_F
(
VideoCapturerTest
TestRotationAppliedBySourceWhenDifferentWants
)
{
int
kWidth
=
800
;
int
kHeight
=
400
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
formats
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
kWidth
kHeight
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
5
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
formats
)
;
rtc
:
:
VideoSinkWants
wants
;
wants
.
rotation_applied
=
false
;
capturer_
-
>
AddOrUpdateSink
(
&
renderer_
wants
)
;
EXPECT_EQ
(
cricket
:
:
CS_RUNNING
capturer_
-
>
Start
(
cricket
:
:
VideoFormat
(
kWidth
kHeight
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
)
;
EXPECT_TRUE
(
capturer_
-
>
IsRunning
(
)
)
;
EXPECT_EQ
(
0
renderer_
.
num_rendered_frames
(
)
)
;
int
frame_count
=
0
;
capturer_
-
>
SetRotation
(
webrtc
:
:
kVideoRotation_90
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
+
+
frame_count
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
capturer_
-
>
GetRotation
(
)
renderer_
.
rotation
(
)
)
;
cricket
:
:
FakeVideoRenderer
renderer2
;
wants
.
rotation_applied
=
true
;
capturer_
-
>
AddOrUpdateSink
(
&
renderer2
wants
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
+
+
frame_count
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
1
renderer2
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
kVideoRotation_0
renderer_
.
rotation
(
)
)
;
EXPECT_EQ
(
webrtc
:
:
kVideoRotation_0
renderer2
.
rotation
(
)
)
;
}
TEST_F
(
VideoCapturerTest
SinkWantsMaxPixelAndMaxPixelCountStepUp
)
{
EXPECT_EQ
(
cricket
:
:
CS_RUNNING
capturer_
-
>
Start
(
cricket
:
:
VideoFormat
(
1280
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
)
;
EXPECT_TRUE
(
capturer_
-
>
IsRunning
(
)
)
;
EXPECT_EQ
(
0
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
1
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
1280
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
720
renderer_
.
height
(
)
)
;
rtc
:
:
VideoSinkWants
wants
;
wants
.
max_pixel_count
=
rtc
:
:
Optional
<
int
>
(
1280
*
720
*
3
/
5
)
;
capturer_
-
>
AddOrUpdateSink
(
&
renderer_
wants
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
2
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
960
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
540
renderer_
.
height
(
)
)
;
wants
.
max_pixel_count
=
rtc
:
:
Optional
<
int
>
(
renderer_
.
width
(
)
*
renderer_
.
height
(
)
*
3
/
5
)
;
capturer_
-
>
AddOrUpdateSink
(
&
renderer_
wants
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
3
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
640
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
360
renderer_
.
height
(
)
)
;
cricket
:
:
FakeVideoRenderer
renderer2
;
capturer_
-
>
AddOrUpdateSink
(
&
renderer2
rtc
:
:
VideoSinkWants
(
)
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
4
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
640
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
360
renderer_
.
height
(
)
)
;
EXPECT_EQ
(
1
renderer2
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
640
renderer2
.
width
(
)
)
;
EXPECT_EQ
(
360
renderer2
.
height
(
)
)
;
wants
.
max_pixel_count_step_up
=
wants
.
max_pixel_count
;
wants
.
max_pixel_count
=
rtc
:
:
Optional
<
int
>
(
)
;
capturer_
-
>
AddOrUpdateSink
(
&
renderer_
wants
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
5
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
960
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
540
renderer_
.
height
(
)
)
;
EXPECT_EQ
(
2
renderer2
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
960
renderer2
.
width
(
)
)
;
EXPECT_EQ
(
540
renderer2
.
height
(
)
)
;
capturer_
-
>
AddOrUpdateSink
(
&
renderer2
rtc
:
:
VideoSinkWants
(
)
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
6
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
960
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
540
renderer_
.
height
(
)
)
;
EXPECT_EQ
(
3
renderer2
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
960
renderer2
.
width
(
)
)
;
EXPECT_EQ
(
540
renderer2
.
height
(
)
)
;
capturer_
-
>
AddOrUpdateSink
(
&
renderer_
rtc
:
:
VideoSinkWants
(
)
)
;
EXPECT_TRUE
(
capturer_
-
>
CaptureFrame
(
)
)
;
EXPECT_EQ
(
7
renderer_
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
1280
renderer_
.
width
(
)
)
;
EXPECT_EQ
(
720
renderer_
.
height
(
)
)
;
EXPECT_EQ
(
4
renderer2
.
num_rendered_frames
(
)
)
;
EXPECT_EQ
(
1280
renderer2
.
width
(
)
)
;
EXPECT_EQ
(
720
renderer2
.
height
(
)
)
;
}
TEST_F
(
VideoCapturerTest
TestFourccMatch
)
{
cricket
:
:
VideoFormat
desired
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_ANY
)
;
cricket
:
:
VideoFormat
best
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
480
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
desired
.
fourcc
=
cricket
:
:
FOURCC_MJPG
;
EXPECT_FALSE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
desired
.
fourcc
=
cricket
:
:
FOURCC_I420
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
}
TEST_F
(
VideoCapturerTest
TestResolutionMatch
)
{
cricket
:
:
VideoFormat
desired
(
1920
1080
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_ANY
)
;
cricket
:
:
VideoFormat
best
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
1280
best
.
width
)
;
EXPECT_EQ
(
720
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
desired
.
width
=
360
;
desired
.
height
=
250
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
320
best
.
width
)
;
EXPECT_EQ
(
240
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
desired
.
width
=
480
;
desired
.
height
=
270
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
480
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
desired
.
width
=
320
;
desired
.
height
=
240
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
320
best
.
width
)
;
EXPECT_EQ
(
240
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
desired
.
width
=
80
;
desired
.
height
=
60
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
160
best
.
width
)
;
EXPECT_EQ
(
120
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
}
TEST_F
(
VideoCapturerTest
TestHDResolutionMatch
)
{
std
:
:
vector
<
cricket
:
:
VideoFormat
>
formats
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
960
544
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
24
)
cricket
:
:
FOURCC_I420
)
)
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
1280
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
15
)
cricket
:
:
FOURCC_I420
)
)
;
formats
.
push_back
(
cricket
:
:
VideoFormat
(
2592
1944
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
7
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
formats
)
;
cricket
:
:
VideoFormat
desired
(
960
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_ANY
)
;
cricket
:
:
VideoFormat
best
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
960
best
.
width
)
;
EXPECT_EQ
(
544
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
24
)
best
.
interval
)
;
desired
.
width
=
960
;
desired
.
height
=
544
;
desired
.
interval
=
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
960
best
.
width
)
;
EXPECT_EQ
(
544
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
24
)
best
.
interval
)
;
desired
.
width
=
360
;
desired
.
height
=
250
;
desired
.
interval
=
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
320
best
.
width
)
;
EXPECT_EQ
(
240
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
desired
.
width
=
480
;
desired
.
height
=
270
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
480
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
desired
.
width
=
320
;
desired
.
height
=
240
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
320
best
.
width
)
;
EXPECT_EQ
(
240
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
desired
.
width
=
160
;
desired
.
height
=
120
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
320
best
.
width
)
;
EXPECT_EQ
(
240
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
desired
.
width
=
1280
;
desired
.
height
=
720
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
480
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
desired
.
width
=
1280
;
desired
.
height
=
720
;
desired
.
interval
=
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
15
)
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
1280
best
.
width
)
;
EXPECT_EQ
(
720
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
15
)
best
.
interval
)
;
desired
.
width
=
1920
;
desired
.
height
=
1080
;
desired
.
interval
=
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
desired
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
480
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
}
TEST_F
(
VideoCapturerTest
TestStrangeFormats
)
{
std
:
:
vector
<
cricket
:
:
VideoFormat
>
supported_formats
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
640
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
required_formats
;
required_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
required_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
200
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
required_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
180
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
cricket
:
:
VideoFormat
best
;
for
(
size_t
i
=
0
;
i
<
required_formats
.
size
(
)
;
+
+
i
)
{
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
i
]
&
best
)
)
;
EXPECT_EQ
(
320
best
.
width
)
;
EXPECT_EQ
(
240
best
.
height
)
;
}
supported_formats
.
clear
(
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
640
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
for
(
size_t
i
=
0
;
i
<
required_formats
.
size
(
)
;
+
+
i
)
{
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
i
]
&
best
)
)
;
EXPECT_EQ
(
320
best
.
width
)
;
EXPECT_EQ
(
240
best
.
height
)
;
}
}
TEST_F
(
VideoCapturerTest
TestPoorFpsFormats
)
{
std
:
:
vector
<
cricket
:
:
VideoFormat
>
supported_formats
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
10
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
7
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
1280
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
2
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
required_formats
;
required_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
required_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
cricket
:
:
VideoFormat
best
;
for
(
size_t
i
=
0
;
i
<
required_formats
.
size
(
)
;
+
+
i
)
{
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
i
]
&
best
)
)
;
EXPECT_EQ
(
required_formats
[
i
]
.
width
best
.
width
)
;
EXPECT_EQ
(
required_formats
[
i
]
.
height
best
.
height
)
;
}
supported_formats
.
clear
(
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
7
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
1280
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
2
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
for
(
size_t
i
=
0
;
i
<
required_formats
.
size
(
)
;
+
+
i
)
{
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
i
]
&
best
)
)
;
EXPECT_EQ
(
320
best
.
width
)
;
EXPECT_EQ
(
240
best
.
height
)
;
}
}
TEST_F
(
VideoCapturerTest
TestSameSizeDifferentFpsFormats
)
{
std
:
:
vector
<
cricket
:
:
VideoFormat
>
supported_formats
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
10
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
20
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
320
240
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
required_formats
=
supported_formats
;
cricket
:
:
VideoFormat
best
;
for
(
size_t
i
=
0
;
i
<
required_formats
.
size
(
)
;
+
+
i
)
{
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
i
]
&
best
)
)
;
EXPECT_EQ
(
320
best
.
width
)
;
EXPECT_EQ
(
240
best
.
height
)
;
EXPECT_EQ
(
required_formats
[
i
]
.
interval
best
.
interval
)
;
}
}
TEST_F
(
VideoCapturerTest
TestFpsFormats
)
{
std
:
:
vector
<
cricket
:
:
VideoFormat
>
supported_formats
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
1280
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
15
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
400
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
360
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
required_formats
;
required_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_ANY
)
)
;
required_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
20
)
cricket
:
:
FOURCC_ANY
)
)
;
required_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
10
)
cricket
:
:
FOURCC_ANY
)
)
;
cricket
:
:
VideoFormat
best
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
0
]
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
400
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
1
]
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
400
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
best
.
interval
)
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
2
]
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
480
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
15
)
best
.
interval
)
;
supported_formats
.
clear
(
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
1280
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
60
)
cricket
:
:
FOURCC_MJPG
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
15
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
400
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
360
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
0
]
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
480
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
60
)
best
.
interval
)
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
1
]
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
480
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
60
)
best
.
interval
)
;
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
2
]
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
480
best
.
height
)
;
EXPECT_EQ
(
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
15
)
best
.
interval
)
;
}
TEST_F
(
VideoCapturerTest
TestRequest16x10_9
)
{
std
:
:
vector
<
cricket
:
:
VideoFormat
>
supported_formats
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
400
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
360
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
required_formats
=
supported_formats
;
cricket
:
:
VideoFormat
best
;
for
(
size_t
i
=
0
;
i
<
required_formats
.
size
(
)
;
+
+
i
)
{
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
i
]
&
best
)
)
;
EXPECT_EQ
(
required_formats
[
i
]
.
width
best
.
width
)
;
EXPECT_EQ
(
required_formats
[
i
]
.
height
best
.
height
)
;
}
supported_formats
.
clear
(
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
960
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
400
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
360
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
for
(
size_t
i
=
0
;
i
<
required_formats
.
size
(
)
;
+
+
i
)
{
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
i
]
&
best
)
)
;
EXPECT_EQ
(
required_formats
[
i
]
.
width
best
.
width
)
;
EXPECT_EQ
(
required_formats
[
i
]
.
height
best
.
height
)
;
}
supported_formats
.
clear
(
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
1280
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
400
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
640
360
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
for
(
size_t
i
=
0
;
i
<
required_formats
.
size
(
)
-
1
;
+
+
i
)
{
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
i
]
&
best
)
)
;
EXPECT_EQ
(
required_formats
[
i
]
.
width
best
.
width
)
;
EXPECT_EQ
(
required_formats
[
i
]
.
height
best
.
height
)
;
}
EXPECT_TRUE
(
capturer_
-
>
GetBestCaptureFormat
(
required_formats
[
2
]
&
best
)
)
;
EXPECT_EQ
(
640
best
.
width
)
;
EXPECT_EQ
(
360
best
.
height
)
;
}
bool
HdFormatInList
(
const
std
:
:
vector
<
cricket
:
:
VideoFormat
>
&
formats
)
{
for
(
std
:
:
vector
<
cricket
:
:
VideoFormat
>
:
:
const_iterator
found
=
formats
.
begin
(
)
;
found
!
=
formats
.
end
(
)
;
+
+
found
)
{
if
(
found
-
>
height
>
=
kMinHdHeight
)
{
return
true
;
}
}
return
false
;
}
TEST_F
(
VideoCapturerTest
Whitelist
)
{
const
int
kMinHdWidth
=
1
;
cricket
:
:
VideoFormat
hd_format
(
kMinHdWidth
kMinHdHeight
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
;
cricket
:
:
VideoFormat
vga_format
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
formats
=
*
capturer_
-
>
GetSupportedFormats
(
)
;
formats
.
push_back
(
hd_format
)
;
capturer_
-
>
set_enable_camera_list
(
true
)
;
capturer_
-
>
ResetSupportedFormats
(
formats
)
;
EXPECT_TRUE
(
HdFormatInList
(
*
capturer_
-
>
GetSupportedFormats
(
)
)
)
;
capturer_
-
>
ConstrainSupportedFormats
(
vga_format
)
;
EXPECT_FALSE
(
HdFormatInList
(
*
capturer_
-
>
GetSupportedFormats
(
)
)
)
;
capturer_
-
>
set_enable_camera_list
(
false
)
;
capturer_
-
>
ResetSupportedFormats
(
formats
)
;
EXPECT_TRUE
(
HdFormatInList
(
*
capturer_
-
>
GetSupportedFormats
(
)
)
)
;
capturer_
-
>
ConstrainSupportedFormats
(
vga_format
)
;
EXPECT_TRUE
(
HdFormatInList
(
*
capturer_
-
>
GetSupportedFormats
(
)
)
)
;
}
TEST_F
(
VideoCapturerTest
BlacklistAllFormats
)
{
cricket
:
:
VideoFormat
vga_format
(
640
480
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
;
std
:
:
vector
<
cricket
:
:
VideoFormat
>
supported_formats
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
1280
720
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
supported_formats
.
push_back
(
cricket
:
:
VideoFormat
(
1920
1080
cricket
:
:
VideoFormat
:
:
FpsToInterval
(
30
)
cricket
:
:
FOURCC_I420
)
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
EXPECT_EQ
(
2u
capturer_
-
>
GetSupportedFormats
(
)
-
>
size
(
)
)
;
capturer_
-
>
set_enable_camera_list
(
true
)
;
capturer_
-
>
ConstrainSupportedFormats
(
vga_format
)
;
EXPECT_EQ
(
2u
capturer_
-
>
GetSupportedFormats
(
)
-
>
size
(
)
)
;
supported_formats
.
push_back
(
vga_format
)
;
capturer_
-
>
ResetSupportedFormats
(
supported_formats
)
;
ASSERT_EQ
(
1u
capturer_
-
>
GetSupportedFormats
(
)
-
>
size
(
)
)
;
EXPECT_EQ
(
vga_format
.
height
capturer_
-
>
GetSupportedFormats
(
)
-
>
at
(
0
)
.
height
)
;
}
