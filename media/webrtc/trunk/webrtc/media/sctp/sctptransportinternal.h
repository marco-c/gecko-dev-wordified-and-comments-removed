#
ifndef
WEBRTC_MEDIA_SCTP_SCTPTRANSPORTINTERNAL_H_
#
define
WEBRTC_MEDIA_SCTP_SCTPTRANSPORTINTERNAL_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
copyonwritebuffer
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
#
include
"
webrtc
/
media
/
base
/
mediachannel
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transportchannel
.
h
"
namespace
cricket
{
constexpr
uint16_t
kMaxSctpStreams
=
1024
;
constexpr
uint16_t
kMaxSctpSid
=
kMaxSctpStreams
-
1
;
constexpr
uint16_t
kMinSctpSid
=
0
;
const
int
kSctpDefaultPort
=
5000
;
class
SctpTransportInternal
{
public
:
virtual
~
SctpTransportInternal
(
)
{
}
virtual
void
SetTransportChannel
(
TransportChannel
*
channel
)
=
0
;
virtual
bool
Start
(
int
local_sctp_port
int
remote_sctp_port
)
=
0
;
virtual
bool
OpenStream
(
int
sid
)
=
0
;
virtual
bool
ResetStream
(
int
sid
)
=
0
;
virtual
bool
SendData
(
const
SendDataParams
&
params
const
rtc
:
:
CopyOnWriteBuffer
&
payload
SendDataResult
*
result
=
nullptr
)
=
0
;
virtual
bool
ReadyToSendData
(
)
=
0
;
sigslot
:
:
signal0
<
>
SignalReadyToSendData
;
sigslot
:
:
signal2
<
const
ReceiveDataParams
&
const
rtc
:
:
CopyOnWriteBuffer
&
>
SignalDataReceived
;
sigslot
:
:
signal1
<
int
>
SignalStreamClosedRemotely
;
virtual
void
set_debug_name_for_testing
(
const
char
*
debug_name
)
=
0
;
}
;
class
SctpTransportInternalFactory
{
public
:
virtual
~
SctpTransportInternalFactory
(
)
{
}
virtual
std
:
:
unique_ptr
<
SctpTransportInternal
>
CreateSctpTransport
(
TransportChannel
*
channel
)
=
0
;
}
;
}
#
endif
