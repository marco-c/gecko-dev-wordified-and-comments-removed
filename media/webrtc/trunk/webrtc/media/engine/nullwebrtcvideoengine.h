#
ifndef
WEBRTC_MEDIA_ENGINE_NULLWEBRTCVIDEOENGINE_H_
#
define
WEBRTC_MEDIA_ENGINE_NULLWEBRTCVIDEOENGINE_H_
#
include
<
vector
>
#
include
"
webrtc
/
media
/
base
/
mediachannel
.
h
"
#
include
"
webrtc
/
media
/
base
/
mediaengine
.
h
"
namespace
webrtc
{
class
Call
;
}
namespace
cricket
{
class
VideoMediaChannel
;
class
WebRtcVideoDecoderFactory
;
class
WebRtcVideoEncoderFactory
;
class
NullWebRtcVideoEngine
{
public
:
NullWebRtcVideoEngine
(
)
{
}
~
NullWebRtcVideoEngine
(
)
{
}
void
SetExternalDecoderFactory
(
WebRtcVideoDecoderFactory
*
decoder_factory
)
{
}
void
SetExternalEncoderFactory
(
WebRtcVideoEncoderFactory
*
encoder_factory
)
{
}
void
Init
(
)
{
}
const
std
:
:
vector
<
VideoCodec
>
&
codecs
(
)
{
return
codecs_
;
}
RtpCapabilities
GetCapabilities
(
)
{
RtpCapabilities
capabilities
;
return
capabilities
;
}
VideoMediaChannel
*
CreateChannel
(
webrtc
:
:
Call
*
call
const
MediaConfig
&
config
const
VideoOptions
&
options
)
{
return
nullptr
;
}
private
:
std
:
:
vector
<
VideoCodec
>
codecs_
;
}
;
}
#
endif
