#
ifndef
WEBRTC_MEDIA_ENGINE_WEBRTCMEDIAENGINE_H_
#
define
WEBRTC_MEDIA_ENGINE_WEBRTCMEDIAENGINE_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
call
/
call
.
h
"
#
include
"
webrtc
/
config
.
h
"
#
include
"
webrtc
/
media
/
base
/
mediaengine
.
h
"
namespace
webrtc
{
class
AudioDecoderFactory
;
class
AudioDeviceModule
;
class
AudioMixer
;
}
namespace
cricket
{
class
WebRtcVideoDecoderFactory
;
class
WebRtcVideoEncoderFactory
;
}
namespace
cricket
{
class
WebRtcMediaEngineFactory
{
public
:
static
MediaEngineInterface
*
Create
(
webrtc
:
:
AudioDeviceModule
*
adm
WebRtcVideoEncoderFactory
*
video_encoder_factory
WebRtcVideoDecoderFactory
*
video_decoder_factory
)
;
static
MediaEngineInterface
*
Create
(
webrtc
:
:
AudioDeviceModule
*
adm
const
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioDecoderFactory
>
&
audio_decoder_factory
WebRtcVideoEncoderFactory
*
video_encoder_factory
WebRtcVideoDecoderFactory
*
video_decoder_factory
)
;
static
MediaEngineInterface
*
Create
(
webrtc
:
:
AudioDeviceModule
*
adm
const
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioDecoderFactory
>
&
audio_decoder_factory
WebRtcVideoEncoderFactory
*
video_encoder_factory
WebRtcVideoDecoderFactory
*
video_decoder_factory
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioMixer
>
audio_mixer
)
;
}
;
bool
ValidateRtpExtensions
(
const
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
&
extensions
)
;
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
FilterRtpExtensions
(
const
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
&
extensions
bool
(
*
supported
)
(
const
std
:
:
string
&
)
bool
filter_redundant_extensions
)
;
webrtc
:
:
Call
:
:
Config
:
:
BitrateConfig
GetBitrateConfigForCodec
(
const
Codec
&
codec
)
;
}
#
endif
