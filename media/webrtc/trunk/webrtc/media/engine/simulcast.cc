#
include
<
stdio
.
h
>
#
include
"
webrtc
/
base
/
arraysize
.
h
"
#
include
"
webrtc
/
base
/
common
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
media
/
base
/
streamparams
.
h
"
#
include
"
webrtc
/
media
/
engine
/
constants
.
h
"
#
include
"
webrtc
/
media
/
engine
/
simulcast
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
field_trial
.
h
"
namespace
cricket
{
struct
SimulcastFormat
{
int
width
;
int
height
;
size_t
max_layers
;
int
max_bitrate_kbps
;
int
target_bitrate_kbps
;
int
min_bitrate_kbps
;
}
;
const
SimulcastFormat
kSimulcastFormats
[
]
=
{
{
1920
1080
3
5000
4000
800
}
{
1280
720
3
2500
2500
600
}
{
960
540
3
900
900
450
}
{
640
360
2
700
500
150
}
{
480
270
2
450
350
150
}
{
320
180
1
200
150
30
}
{
0
0
1
200
150
30
}
}
;
const
int
kDefaultScreenshareSimulcastStreams
=
2
;
static
const
int
kDefaultConferenceNumberOfTemporalLayers
[
webrtc
:
:
kMaxSimulcastStreams
]
=
{
3
3
3
3
}
;
void
GetSimulcastSsrcs
(
const
StreamParams
&
sp
std
:
:
vector
<
uint32_t
>
*
ssrcs
)
{
const
SsrcGroup
*
sim_group
=
sp
.
get_ssrc_group
(
kSimSsrcGroupSemantics
)
;
if
(
sim_group
)
{
ssrcs
-
>
insert
(
ssrcs
-
>
end
(
)
sim_group
-
>
ssrcs
.
begin
(
)
sim_group
-
>
ssrcs
.
end
(
)
)
;
}
}
void
MaybeExchangeWidthHeight
(
int
*
width
int
*
height
)
{
if
(
*
width
<
*
height
)
{
int
temp
=
*
width
;
*
width
=
*
height
;
*
height
=
temp
;
}
}
int
FindSimulcastFormatIndex
(
int
width
int
height
)
{
MaybeExchangeWidthHeight
(
&
width
&
height
)
;
for
(
uint32_t
i
=
0
;
i
<
arraysize
(
kSimulcastFormats
)
;
+
+
i
)
{
if
(
width
*
height
>
=
kSimulcastFormats
[
i
]
.
width
*
kSimulcastFormats
[
i
]
.
height
)
{
return
i
;
}
}
return
-
1
;
}
int
FindSimulcastFormatIndex
(
int
width
int
height
size_t
max_layers
)
{
MaybeExchangeWidthHeight
(
&
width
&
height
)
;
for
(
uint32_t
i
=
0
;
i
<
arraysize
(
kSimulcastFormats
)
;
+
+
i
)
{
if
(
width
*
height
>
=
kSimulcastFormats
[
i
]
.
width
*
kSimulcastFormats
[
i
]
.
height
&
&
max_layers
=
=
kSimulcastFormats
[
i
]
.
max_layers
)
{
return
i
;
}
}
return
-
1
;
}
int
NormalizeSimulcastSize
(
int
size
size_t
simulcast_layers
)
{
const
int
base2_exponent
=
static_cast
<
int
>
(
simulcast_layers
)
-
1
;
return
(
(
size
>
>
base2_exponent
)
<
<
base2_exponent
)
;
}
size_t
FindSimulcastMaxLayers
(
int
width
int
height
)
{
int
index
=
FindSimulcastFormatIndex
(
width
height
)
;
if
(
index
=
=
-
1
)
{
return
-
1
;
}
return
kSimulcastFormats
[
index
]
.
max_layers
;
}
int
FindSimulcastMaxBitrateBps
(
int
width
int
height
)
{
const
int
format_index
=
FindSimulcastFormatIndex
(
width
height
)
;
if
(
format_index
=
=
-
1
)
{
return
-
1
;
}
return
kSimulcastFormats
[
format_index
]
.
max_bitrate_kbps
*
1000
;
}
int
FindSimulcastTargetBitrateBps
(
int
width
int
height
)
{
const
int
format_index
=
FindSimulcastFormatIndex
(
width
height
)
;
if
(
format_index
=
=
-
1
)
{
return
-
1
;
}
return
kSimulcastFormats
[
format_index
]
.
target_bitrate_kbps
*
1000
;
}
int
FindSimulcastMinBitrateBps
(
int
width
int
height
)
{
const
int
format_index
=
FindSimulcastFormatIndex
(
width
height
)
;
if
(
format_index
=
=
-
1
)
{
return
-
1
;
}
return
kSimulcastFormats
[
format_index
]
.
min_bitrate_kbps
*
1000
;
}
bool
SlotSimulcastMaxResolution
(
size_t
max_layers
int
*
width
int
*
height
)
{
int
index
=
FindSimulcastFormatIndex
(
*
width
*
height
max_layers
)
;
if
(
index
=
=
-
1
)
{
LOG
(
LS_ERROR
)
<
<
"
SlotSimulcastMaxResolution
"
;
return
false
;
}
*
width
=
kSimulcastFormats
[
index
]
.
width
;
*
height
=
kSimulcastFormats
[
index
]
.
height
;
LOG
(
LS_INFO
)
<
<
"
SlotSimulcastMaxResolution
to
width
:
"
<
<
*
width
<
<
"
height
:
"
<
<
*
height
;
return
true
;
}
int
GetTotalMaxBitrateBps
(
const
std
:
:
vector
<
webrtc
:
:
VideoStream
>
&
streams
)
{
int
total_max_bitrate_bps
=
0
;
for
(
size_t
s
=
0
;
s
<
streams
.
size
(
)
-
1
;
+
+
s
)
{
total_max_bitrate_bps
+
=
streams
[
s
]
.
target_bitrate_bps
;
}
total_max_bitrate_bps
+
=
streams
.
back
(
)
.
max_bitrate_bps
;
return
total_max_bitrate_bps
;
}
std
:
:
vector
<
webrtc
:
:
VideoStream
>
GetSimulcastConfig
(
size_t
max_streams
int
width
int
height
int
max_bitrate_bps
int
max_qp
int
max_framerate
bool
is_screencast
)
{
size_t
num_simulcast_layers
;
if
(
is_screencast
)
{
num_simulcast_layers
=
UseSimulcastScreenshare
(
)
?
kDefaultScreenshareSimulcastStreams
:
1
;
}
else
{
num_simulcast_layers
=
FindSimulcastMaxLayers
(
width
height
)
;
}
if
(
num_simulcast_layers
>
max_streams
)
{
if
(
!
SlotSimulcastMaxResolution
(
max_streams
&
width
&
height
)
)
{
return
std
:
:
vector
<
webrtc
:
:
VideoStream
>
(
)
;
}
num_simulcast_layers
=
max_streams
;
}
std
:
:
vector
<
webrtc
:
:
VideoStream
>
streams
;
streams
.
resize
(
num_simulcast_layers
)
;
if
(
!
is_screencast
)
{
width
=
NormalizeSimulcastSize
(
width
num_simulcast_layers
)
;
height
=
NormalizeSimulcastSize
(
height
num_simulcast_layers
)
;
}
for
(
size_t
s
=
num_simulcast_layers
-
1
;
;
-
-
s
)
{
streams
[
s
]
.
width
=
width
;
streams
[
s
]
.
height
=
height
;
streams
[
s
]
.
max_qp
=
max_qp
;
if
(
is_screencast
&
&
s
=
=
0
)
{
ScreenshareLayerConfig
config
=
ScreenshareLayerConfig
:
:
GetDefault
(
)
;
streams
[
s
]
.
min_bitrate_bps
=
kMinVideoBitrateKbps
*
1000
;
streams
[
s
]
.
target_bitrate_bps
=
config
.
tl0_bitrate_kbps
*
1000
;
streams
[
s
]
.
max_bitrate_bps
=
config
.
tl1_bitrate_kbps
*
1000
;
streams
[
s
]
.
temporal_layer_thresholds_bps
.
clear
(
)
;
streams
[
s
]
.
temporal_layer_thresholds_bps
.
push_back
(
config
.
tl0_bitrate_kbps
*
1000
)
;
streams
[
s
]
.
max_framerate
=
5
;
}
else
{
streams
[
s
]
.
temporal_layer_thresholds_bps
.
resize
(
kDefaultConferenceNumberOfTemporalLayers
[
s
]
-
1
)
;
streams
[
s
]
.
max_bitrate_bps
=
FindSimulcastMaxBitrateBps
(
width
height
)
;
streams
[
s
]
.
target_bitrate_bps
=
FindSimulcastTargetBitrateBps
(
width
height
)
;
streams
[
s
]
.
min_bitrate_bps
=
FindSimulcastMinBitrateBps
(
width
height
)
;
streams
[
s
]
.
max_framerate
=
max_framerate
;
}
if
(
!
is_screencast
)
{
width
/
=
2
;
height
/
=
2
;
}
if
(
s
=
=
0
)
break
;
}
int
bitrate_left_bps
=
max_bitrate_bps
-
GetTotalMaxBitrateBps
(
streams
)
;
if
(
bitrate_left_bps
>
0
)
{
streams
.
back
(
)
.
max_bitrate_bps
+
=
bitrate_left_bps
;
}
return
streams
;
}
static
const
int
kScreenshareMinBitrateKbps
=
50
;
static
const
int
kScreenshareMaxBitrateKbps
=
6000
;
static
const
int
kScreenshareDefaultTl0BitrateKbps
=
200
;
static
const
int
kScreenshareDefaultTl1BitrateKbps
=
1000
;
static
const
char
*
kScreencastLayerFieldTrialName
=
"
WebRTC
-
ScreenshareLayerRates
"
;
static
const
char
*
kSimulcastScreenshareFieldTrialName
=
"
WebRTC
-
SimulcastScreenshare
"
;
ScreenshareLayerConfig
:
:
ScreenshareLayerConfig
(
int
tl0_bitrate
int
tl1_bitrate
)
:
tl0_bitrate_kbps
(
tl0_bitrate
)
tl1_bitrate_kbps
(
tl1_bitrate
)
{
}
ScreenshareLayerConfig
ScreenshareLayerConfig
:
:
GetDefault
(
)
{
std
:
:
string
group
=
webrtc
:
:
field_trial
:
:
FindFullName
(
kScreencastLayerFieldTrialName
)
;
ScreenshareLayerConfig
config
(
kScreenshareDefaultTl0BitrateKbps
kScreenshareDefaultTl1BitrateKbps
)
;
if
(
!
group
.
empty
(
)
&
&
!
FromFieldTrialGroup
(
group
&
config
)
)
{
LOG
(
LS_WARNING
)
<
<
"
Unable
to
parse
WebRTC
-
ScreenshareLayerRates
"
"
field
trial
group
:
'
"
<
<
group
<
<
"
'
.
"
;
}
return
config
;
}
bool
ScreenshareLayerConfig
:
:
FromFieldTrialGroup
(
const
std
:
:
string
&
group
ScreenshareLayerConfig
*
config
)
{
int
tl0_bitrate
;
int
tl1_bitrate
;
if
(
sscanf
(
group
.
c_str
(
)
"
%
d
-
%
d
"
&
tl0_bitrate
&
tl1_bitrate
)
!
=
2
)
{
return
false
;
}
if
(
tl0_bitrate
<
kScreenshareMinBitrateKbps
|
|
tl0_bitrate
>
kScreenshareMaxBitrateKbps
|
|
tl1_bitrate
<
kScreenshareMinBitrateKbps
|
|
tl1_bitrate
>
kScreenshareMaxBitrateKbps
|
|
tl0_bitrate
>
tl1_bitrate
)
{
return
false
;
}
config
-
>
tl0_bitrate_kbps
=
tl0_bitrate
;
config
-
>
tl1_bitrate_kbps
=
tl1_bitrate
;
return
true
;
}
bool
UseSimulcastScreenshare
(
)
{
return
webrtc
:
:
field_trial
:
:
FindFullName
(
kSimulcastScreenshareFieldTrialName
)
=
=
"
Enabled
"
;
}
}
