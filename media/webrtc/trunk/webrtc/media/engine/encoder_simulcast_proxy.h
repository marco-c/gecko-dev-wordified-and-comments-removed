#
ifndef
MEDIA_ENGINE_ENCODER_SIMULCAST_PROXY_H_
#
define
MEDIA_ENGINE_ENCODER_SIMULCAST_PROXY_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
api
/
video_codecs
/
sdp_video_format
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
api
/
video_codecs
/
video_encoder_factory
.
h
"
#
include
"
common_types
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
namespace
webrtc
{
class
EncoderSimulcastProxy
:
public
VideoEncoder
{
public
:
EncoderSimulcastProxy
(
VideoEncoderFactory
*
factory
const
SdpVideoFormat
&
format
)
;
explicit
EncoderSimulcastProxy
(
VideoEncoderFactory
*
factory
)
;
~
EncoderSimulcastProxy
(
)
override
;
int
Release
(
)
override
;
int
InitEncode
(
const
VideoCodec
*
inst
int
number_of_cores
size_t
max_payload_size
)
override
;
int
Encode
(
const
VideoFrame
&
input_image
const
CodecSpecificInfo
*
codec_specific_info
const
std
:
:
vector
<
FrameType
>
*
frame_types
)
override
;
int
RegisterEncodeCompleteCallback
(
EncodedImageCallback
*
callback
)
override
;
int
SetRateAllocation
(
const
BitrateAllocation
&
bitrate
uint32_t
new_framerate
)
override
;
int
SetChannelParameters
(
uint32_t
packet_loss
int64_t
rtt
)
override
;
private
:
VideoEncoderFactory
*
const
factory_
;
SdpVideoFormat
video_format_
;
std
:
:
unique_ptr
<
VideoEncoder
>
encoder_
;
EncodedImageCallback
*
callback_
;
}
;
}
#
endif
