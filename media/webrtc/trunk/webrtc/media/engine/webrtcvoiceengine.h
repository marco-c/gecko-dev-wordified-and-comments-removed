#
ifndef
WEBRTC_MEDIA_ENGINE_WEBRTCVOICEENGINE_H_
#
define
WEBRTC_MEDIA_ENGINE_WEBRTCVOICEENGINE_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
buffer
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
networkroute
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
call
/
audio_state
.
h
"
#
include
"
webrtc
/
call
/
call
.
h
"
#
include
"
webrtc
/
config
.
h
"
#
include
"
webrtc
/
media
/
base
/
rtputils
.
h
"
#
include
"
webrtc
/
media
/
engine
/
webrtccommon
.
h
"
#
include
"
webrtc
/
media
/
engine
/
webrtcvoe
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
webrtc
/
pc
/
channel
.
h
"
namespace
cricket
{
class
AudioDeviceModule
;
class
AudioMixer
;
class
AudioSource
;
class
VoEWrapper
;
class
WebRtcVoiceMediaChannel
;
class
WebRtcVoiceEngine
final
:
public
webrtc
:
:
TraceCallback
{
friend
class
WebRtcVoiceMediaChannel
;
public
:
static
bool
ToCodecInst
(
const
AudioCodec
&
in
webrtc
:
:
CodecInst
*
out
)
;
WebRtcVoiceEngine
(
webrtc
:
:
AudioDeviceModule
*
adm
const
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioDecoderFactory
>
&
decoder_factory
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioMixer
>
audio_mixer
)
;
WebRtcVoiceEngine
(
webrtc
:
:
AudioDeviceModule
*
adm
const
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioDecoderFactory
>
&
decoder_factory
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioMixer
>
audio_mixer
VoEWrapper
*
voe_wrapper
)
;
~
WebRtcVoiceEngine
(
)
override
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioState
>
GetAudioState
(
)
const
;
VoiceMediaChannel
*
CreateChannel
(
webrtc
:
:
Call
*
call
const
MediaConfig
&
config
const
AudioOptions
&
options
)
;
int
GetInputLevel
(
)
;
const
std
:
:
vector
<
AudioCodec
>
&
send_codecs
(
)
const
;
const
std
:
:
vector
<
AudioCodec
>
&
recv_codecs
(
)
const
;
RtpCapabilities
GetCapabilities
(
)
const
;
void
RegisterChannel
(
WebRtcVoiceMediaChannel
*
channel
)
;
void
UnregisterChannel
(
WebRtcVoiceMediaChannel
*
channel
)
;
bool
AdjustAgcLevel
(
int
delta
)
;
VoEWrapper
*
voe
(
)
{
return
voe_wrapper_
.
get
(
)
;
}
int
GetLastEngineError
(
)
;
bool
StartAecDump
(
rtc
:
:
PlatformFile
file
int64_t
max_size_bytes
)
;
void
StopAecDump
(
)
;
const
webrtc
:
:
AudioProcessing
:
:
Config
&
GetApmConfigForTest
(
)
const
{
return
apm_config_
;
}
private
:
bool
ApplyOptions
(
const
AudioOptions
&
options
)
;
void
SetDefaultDevices
(
)
;
void
Print
(
webrtc
:
:
TraceLevel
level
const
char
*
trace
int
length
)
override
;
void
StartAecDump
(
const
std
:
:
string
&
filename
)
;
int
CreateVoEChannel
(
)
;
webrtc
:
:
AudioDeviceModule
*
adm
(
)
;
webrtc
:
:
AudioProcessing
*
apm
(
)
;
AudioCodecs
CollectRecvCodecs
(
)
const
;
rtc
:
:
ThreadChecker
signal_thread_checker_
;
rtc
:
:
ThreadChecker
worker_thread_checker_
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioDeviceModule
>
adm_
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioDecoderFactory
>
decoder_factory_
;
webrtc
:
:
AudioProcessing
*
apm_
=
nullptr
;
std
:
:
unique_ptr
<
VoEWrapper
>
voe_wrapper_
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
AudioState
>
audio_state_
;
std
:
:
vector
<
AudioCodec
>
send_codecs_
;
std
:
:
vector
<
AudioCodec
>
recv_codecs_
;
std
:
:
vector
<
WebRtcVoiceMediaChannel
*
>
channels_
;
webrtc
:
:
VoEBase
:
:
ChannelConfig
channel_config_
;
bool
is_dumping_aec_
=
false
;
webrtc
:
:
AgcConfig
default_agc_config_
;
rtc
:
:
Optional
<
bool
>
extended_filter_aec_
;
rtc
:
:
Optional
<
bool
>
delay_agnostic_aec_
;
rtc
:
:
Optional
<
bool
>
experimental_ns_
;
rtc
:
:
Optional
<
bool
>
intelligibility_enhancer_
;
rtc
:
:
Optional
<
bool
>
level_control_
;
webrtc
:
:
AudioProcessing
:
:
Config
apm_config_
;
RTC_DISALLOW_IMPLICIT_CONSTRUCTORS
(
WebRtcVoiceEngine
)
;
}
;
class
WebRtcVoiceMediaChannel
final
:
public
VoiceMediaChannel
public
webrtc
:
:
Transport
{
public
:
WebRtcVoiceMediaChannel
(
WebRtcVoiceEngine
*
engine
const
MediaConfig
&
config
const
AudioOptions
&
options
webrtc
:
:
Call
*
call
)
;
~
WebRtcVoiceMediaChannel
(
)
override
;
const
AudioOptions
&
options
(
)
const
{
return
options_
;
}
rtc
:
:
DiffServCodePoint
PreferredDscp
(
)
const
override
;
bool
SetSendParameters
(
const
AudioSendParameters
&
params
)
override
;
bool
SetRecvParameters
(
const
AudioRecvParameters
&
params
)
override
;
webrtc
:
:
RtpParameters
GetRtpSendParameters
(
uint32_t
ssrc
)
const
override
;
bool
SetRtpSendParameters
(
uint32_t
ssrc
const
webrtc
:
:
RtpParameters
&
parameters
)
override
;
webrtc
:
:
RtpParameters
GetRtpReceiveParameters
(
uint32_t
ssrc
)
const
override
;
bool
SetRtpReceiveParameters
(
uint32_t
ssrc
const
webrtc
:
:
RtpParameters
&
parameters
)
override
;
void
SetPlayout
(
bool
playout
)
override
;
void
SetSend
(
bool
send
)
override
;
bool
SetAudioSend
(
uint32_t
ssrc
bool
enable
const
AudioOptions
*
options
AudioSource
*
source
)
override
;
bool
AddSendStream
(
const
StreamParams
&
sp
)
override
;
bool
RemoveSendStream
(
uint32_t
ssrc
)
override
;
bool
AddRecvStream
(
const
StreamParams
&
sp
)
override
;
bool
RemoveRecvStream
(
uint32_t
ssrc
)
override
;
bool
GetActiveStreams
(
AudioInfo
:
:
StreamList
*
actives
)
override
;
int
GetOutputLevel
(
)
override
;
int
GetTimeSinceLastTyping
(
)
override
;
void
SetTypingDetectionParameters
(
int
time_window
int
cost_per_typing
int
reporting_threshold
int
penalty_decay
int
type_event_delay
)
override
;
bool
SetOutputVolume
(
uint32_t
ssrc
double
volume
)
override
;
bool
CanInsertDtmf
(
)
override
;
bool
InsertDtmf
(
uint32_t
ssrc
int
event
int
duration
)
override
;
void
OnPacketReceived
(
rtc
:
:
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketTime
&
packet_time
)
override
;
void
OnRtcpReceived
(
rtc
:
:
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketTime
&
packet_time
)
override
;
void
OnNetworkRouteChanged
(
const
std
:
:
string
&
transport_name
const
rtc
:
:
NetworkRoute
&
network_route
)
override
;
void
OnReadyToSend
(
bool
ready
)
override
;
void
OnTransportOverheadChanged
(
int
transport_overhead_per_packet
)
override
;
bool
GetStats
(
VoiceMediaInfo
*
info
)
override
;
void
SetRawAudioSink
(
uint32_t
ssrc
std
:
:
unique_ptr
<
webrtc
:
:
AudioSinkInterface
>
sink
)
override
;
bool
SendRtp
(
const
uint8_t
*
data
size_t
len
const
webrtc
:
:
PacketOptions
&
options
)
override
{
rtc
:
:
CopyOnWriteBuffer
packet
(
data
len
kMaxRtpPacketLen
)
;
rtc
:
:
PacketOptions
rtc_options
;
rtc_options
.
packet_id
=
options
.
packet_id
;
return
VoiceMediaChannel
:
:
SendPacket
(
&
packet
rtc_options
)
;
}
bool
SendRtcp
(
const
uint8_t
*
data
size_t
len
)
override
{
rtc
:
:
CopyOnWriteBuffer
packet
(
data
len
kMaxRtpPacketLen
)
;
return
VoiceMediaChannel
:
:
SendRtcp
(
&
packet
rtc
:
:
PacketOptions
(
)
)
;
}
int
GetReceiveChannelId
(
uint32_t
ssrc
)
const
;
int
GetSendChannelId
(
uint32_t
ssrc
)
const
;
private
:
bool
SetOptions
(
const
AudioOptions
&
options
)
;
bool
SetRecvCodecs
(
const
std
:
:
vector
<
AudioCodec
>
&
codecs
)
;
bool
SetSendCodecs
(
const
std
:
:
vector
<
AudioCodec
>
&
codecs
)
;
bool
SetLocalSource
(
uint32_t
ssrc
AudioSource
*
source
)
;
bool
MuteStream
(
uint32_t
ssrc
bool
mute
)
;
WebRtcVoiceEngine
*
engine
(
)
{
return
engine_
;
}
int
GetLastEngineError
(
)
{
return
engine
(
)
-
>
GetLastEngineError
(
)
;
}
int
GetOutputLevel
(
int
channel
)
;
void
ChangePlayout
(
bool
playout
)
;
int
CreateVoEChannel
(
)
;
bool
DeleteVoEChannel
(
int
channel
)
;
bool
IsDefaultRecvStream
(
uint32_t
ssrc
)
{
return
default_recv_ssrc_
=
=
static_cast
<
int64_t
>
(
ssrc
)
;
}
bool
SetMaxSendBitrate
(
int
bps
)
;
bool
ValidateRtpParameters
(
const
webrtc
:
:
RtpParameters
&
parameters
)
;
void
SetupRecording
(
)
;
rtc
:
:
ThreadChecker
worker_thread_checker_
;
WebRtcVoiceEngine
*
const
engine_
=
nullptr
;
std
:
:
vector
<
AudioCodec
>
send_codecs_
;
std
:
:
vector
<
AudioCodec
>
recv_codecs_
;
int
max_send_bitrate_bps_
=
0
;
AudioOptions
options_
;
rtc
:
:
Optional
<
int
>
dtmf_payload_type_
;
int
dtmf_payload_freq_
=
-
1
;
bool
recv_transport_cc_enabled_
=
false
;
bool
recv_nack_enabled_
=
false
;
bool
desired_playout_
=
false
;
bool
playout_
=
false
;
bool
send_
=
false
;
webrtc
:
:
Call
*
const
call_
=
nullptr
;
webrtc
:
:
Call
:
:
Config
:
:
BitrateConfig
bitrate_config_
;
int64_t
default_recv_ssrc_
=
-
1
;
double
default_recv_volume_
=
1
.
0
;
std
:
:
unique_ptr
<
webrtc
:
:
AudioSinkInterface
>
default_sink_
;
uint32_t
receiver_reports_ssrc_
=
0xFA17FA17u
;
class
WebRtcAudioSendStream
;
std
:
:
map
<
uint32_t
WebRtcAudioSendStream
*
>
send_streams_
;
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
send_rtp_extensions_
;
class
WebRtcAudioReceiveStream
;
std
:
:
map
<
uint32_t
WebRtcAudioReceiveStream
*
>
recv_streams_
;
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
recv_rtp_extensions_
;
webrtc
:
:
AudioSendStream
:
:
Config
:
:
SendCodecSpec
send_codec_spec_
;
RTC_DISALLOW_IMPLICIT_CONSTRUCTORS
(
WebRtcVoiceMediaChannel
)
;
}
;
}
#
endif
