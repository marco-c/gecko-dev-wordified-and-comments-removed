#
ifndef
WEBRTC_MEDIA_ENGINE_WEBRTCVIDEOCAPTURER_H_
#
define
WEBRTC_MEDIA_ENGINE_WEBRTCVIDEOCAPTURER_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
asyncinvoker
.
h
"
#
include
"
webrtc
/
base
/
messagehandler
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
common_video
/
libyuv
/
include
/
webrtc_libyuv
.
h
"
#
include
"
webrtc
/
media
/
base
/
device
.
h
"
#
include
"
webrtc
/
media
/
base
/
videocapturer
.
h
"
#
include
"
webrtc
/
modules
/
video_capture
/
video_capture
.
h
"
namespace
cricket
{
class
WebRtcVcmFactoryInterface
{
public
:
virtual
~
WebRtcVcmFactoryInterface
(
)
{
}
virtual
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoCaptureModule
>
Create
(
const
char
*
device
)
=
0
;
virtual
webrtc
:
:
VideoCaptureModule
:
:
DeviceInfo
*
CreateDeviceInfo
(
)
=
0
;
virtual
void
DestroyDeviceInfo
(
webrtc
:
:
VideoCaptureModule
:
:
DeviceInfo
*
info
)
=
0
;
}
;
class
WebRtcVideoCapturer
:
public
VideoCapturer
public
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
{
public
:
WebRtcVideoCapturer
(
)
;
explicit
WebRtcVideoCapturer
(
WebRtcVcmFactoryInterface
*
factory
)
;
virtual
~
WebRtcVideoCapturer
(
)
;
bool
Init
(
const
Device
&
device
)
;
bool
Init
(
const
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoCaptureModule
>
&
module
)
;
bool
GetBestCaptureFormat
(
const
VideoFormat
&
desired
VideoFormat
*
best_format
)
override
;
CaptureState
Start
(
const
VideoFormat
&
capture_format
)
override
;
void
Stop
(
)
override
;
bool
IsRunning
(
)
override
;
bool
IsScreencast
(
)
const
override
{
return
false
;
}
protected
:
void
OnSinkWantsChanged
(
const
rtc
:
:
VideoSinkWants
&
wants
)
override
;
bool
GetPreferredFourccs
(
std
:
:
vector
<
uint32_t
>
*
fourccs
)
override
;
private
:
void
OnFrame
(
const
webrtc
:
:
VideoFrame
&
frame
)
override
;
void
SignalFrameCapturedOnStartThread
(
const
webrtc
:
:
VideoFrame
&
frame
)
;
std
:
:
unique_ptr
<
WebRtcVcmFactoryInterface
>
factory_
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoCaptureModule
>
module_
;
int
captured_frames_
;
std
:
:
vector
<
uint8_t
>
capture_buffer_
;
rtc
:
:
Thread
*
start_thread_
;
std
:
:
unique_ptr
<
rtc
:
:
AsyncInvoker
>
async_invoker_
;
}
;
}
#
endif
