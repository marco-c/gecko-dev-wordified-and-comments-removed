#
ifndef
WEBRTC_MEDIA_ENGINE_VIDEOENCODERSOFTWAREFALLBACKWRAPPER_H_
#
define
WEBRTC_MEDIA_ENGINE_VIDEOENCODERSOFTWAREFALLBACKWRAPPER_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
media
/
base
/
codec
.
h
"
#
include
"
webrtc
/
video_encoder
.
h
"
namespace
webrtc
{
class
VideoEncoderSoftwareFallbackWrapper
:
public
VideoEncoder
{
public
:
VideoEncoderSoftwareFallbackWrapper
(
const
cricket
:
:
VideoCodec
&
codec
webrtc
:
:
VideoEncoder
*
encoder
)
;
int32_t
InitEncode
(
const
VideoCodec
*
codec_settings
int32_t
number_of_cores
size_t
max_payload_size
)
override
;
int32_t
RegisterEncodeCompleteCallback
(
EncodedImageCallback
*
callback
)
override
;
int32_t
Release
(
)
override
;
int32_t
Encode
(
const
VideoFrame
&
frame
const
CodecSpecificInfo
*
codec_specific_info
const
std
:
:
vector
<
FrameType
>
*
frame_types
)
override
;
int32_t
SetChannelParameters
(
uint32_t
packet_loss
int64_t
rtt
)
override
;
int32_t
SetRateAllocation
(
const
BitrateAllocation
&
bitrate_allocation
uint32_t
framerate
)
override
;
bool
SupportsNativeHandle
(
)
const
override
;
ScalingSettings
GetScalingSettings
(
)
const
override
;
private
:
bool
InitFallbackEncoder
(
)
;
VideoCodec
codec_settings_
;
int32_t
number_of_cores_
;
size_t
max_payload_size_
;
bool
rates_set_
;
BitrateAllocation
bitrate_allocation_
;
uint32_t
framerate_
;
bool
channel_parameters_set_
;
uint32_t
packet_loss_
;
int64_t
rtt_
;
const
cricket
:
:
VideoCodec
codec_
;
webrtc
:
:
VideoEncoder
*
const
encoder_
;
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
fallback_encoder_
;
std
:
:
string
fallback_implementation_name_
;
EncodedImageCallback
*
callback_
;
}
;
}
#
endif
