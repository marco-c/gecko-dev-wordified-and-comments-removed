#
ifndef
MEDIA_ENGINE_VIDEOENCODERSOFTWAREFALLBACKWRAPPER_H_
#
define
MEDIA_ENGINE_VIDEOENCODERSOFTWAREFALLBACKWRAPPER_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
#
include
"
media
/
base
/
codec
.
h
"
namespace
webrtc
{
class
VideoEncoderSoftwareFallbackWrapper
:
public
VideoEncoder
{
public
:
VideoEncoderSoftwareFallbackWrapper
(
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
sw_encoder
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
hw_encoder
)
;
int32_t
InitEncode
(
const
VideoCodec
*
codec_settings
int32_t
number_of_cores
size_t
max_payload_size
)
override
;
int32_t
RegisterEncodeCompleteCallback
(
EncodedImageCallback
*
callback
)
override
;
int32_t
Release
(
)
override
;
int32_t
Encode
(
const
VideoFrame
&
frame
const
CodecSpecificInfo
*
codec_specific_info
const
std
:
:
vector
<
FrameType
>
*
frame_types
)
override
;
int32_t
SetChannelParameters
(
uint32_t
packet_loss
int64_t
rtt
)
override
;
int32_t
SetRateAllocation
(
const
BitrateAllocation
&
bitrate_allocation
uint32_t
framerate
)
override
;
bool
SupportsNativeHandle
(
)
const
override
;
ScalingSettings
GetScalingSettings
(
)
const
override
;
const
char
*
ImplementationName
(
)
const
override
;
private
:
bool
InitFallbackEncoder
(
)
;
class
ForcedFallbackParams
{
public
:
bool
IsValid
(
const
VideoCodec
&
codec
)
const
{
return
codec
.
width
*
codec
.
height
<
=
max_pixels_
;
}
bool
active_
=
false
;
int
min_pixels_
=
320
*
180
;
int
max_pixels_
=
320
*
240
;
}
;
bool
TryInitForcedFallbackEncoder
(
)
;
bool
TryReInitForcedFallbackEncoder
(
)
;
void
ValidateSettingsForForcedFallback
(
)
;
bool
IsForcedFallbackActive
(
)
const
;
void
MaybeModifyCodecForFallback
(
)
;
VideoCodec
codec_settings_
;
int32_t
number_of_cores_
;
size_t
max_payload_size_
;
bool
rates_set_
;
BitrateAllocation
bitrate_allocation_
;
uint32_t
framerate_
;
bool
channel_parameters_set_
;
uint32_t
packet_loss_
;
int64_t
rtt_
;
bool
use_fallback_encoder_
;
const
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
encoder_
;
const
std
:
:
unique_ptr
<
webrtc
:
:
VideoEncoder
>
fallback_encoder_
;
EncodedImageCallback
*
callback_
;
bool
forced_fallback_possible_
;
ForcedFallbackParams
forced_fallback_
;
}
;
}
#
endif
