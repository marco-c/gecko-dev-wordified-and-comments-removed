#
ifndef
WEBRTC_MEDIA_ENGINE_FAKEWEBRTCVCMFACTORY_H_
#
define
WEBRTC_MEDIA_ENGINE_FAKEWEBRTCVCMFACTORY_H_
#
include
<
vector
>
#
include
"
webrtc
/
media
/
engine
/
fakewebrtcdeviceinfo
.
h
"
#
include
"
webrtc
/
media
/
engine
/
fakewebrtcvideocapturemodule
.
h
"
#
include
"
webrtc
/
media
/
engine
/
webrtcvideocapturer
.
h
"
class
FakeWebRtcVcmFactory
:
public
cricket
:
:
WebRtcVcmFactoryInterface
{
public
:
virtual
rtc
:
:
scoped_refptr
<
webrtc
:
:
VideoCaptureModule
>
Create
(
const
char
*
device_id
)
{
if
(
!
device_info
.
GetDeviceById
(
device_id
)
)
return
NULL
;
rtc
:
:
scoped_refptr
<
FakeWebRtcVideoCaptureModule
>
module
(
new
rtc
:
:
RefCountedObject
<
FakeWebRtcVideoCaptureModule
>
(
this
)
)
;
modules
.
push_back
(
module
)
;
return
module
;
}
virtual
webrtc
:
:
VideoCaptureModule
:
:
DeviceInfo
*
CreateDeviceInfo
(
)
{
return
&
device_info
;
}
virtual
void
DestroyDeviceInfo
(
webrtc
:
:
VideoCaptureModule
:
:
DeviceInfo
*
info
)
{
}
void
OnDestroyed
(
webrtc
:
:
VideoCaptureModule
*
module
)
{
std
:
:
remove
(
modules
.
begin
(
)
modules
.
end
(
)
module
)
;
}
FakeWebRtcDeviceInfo
device_info
;
std
:
:
vector
<
rtc
:
:
scoped_refptr
<
FakeWebRtcVideoCaptureModule
>
>
modules
;
}
;
FakeWebRtcVideoCaptureModule
:
:
~
FakeWebRtcVideoCaptureModule
(
)
{
if
(
factory_
)
factory_
-
>
OnDestroyed
(
this
)
;
}
#
endif
