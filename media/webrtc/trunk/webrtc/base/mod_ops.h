#
ifndef
WEBRTC_BASE_MOD_OPS_H_
#
define
WEBRTC_BASE_MOD_OPS_H_
#
include
<
limits
>
#
include
<
type_traits
>
#
include
"
webrtc
/
base
/
checks
.
h
"
namespace
webrtc
{
template
<
unsigned
long
M
>
inline
unsigned
long
Add
(
unsigned
long
a
unsigned
long
b
)
{
RTC_DCHECK_LT
(
a
M
)
;
unsigned
long
t
=
M
-
b
%
M
;
unsigned
long
res
=
a
-
t
;
if
(
t
>
a
)
return
res
+
M
;
return
res
;
}
template
<
unsigned
long
M
>
inline
unsigned
long
Subtract
(
unsigned
long
a
unsigned
long
b
)
{
RTC_DCHECK_LT
(
a
M
)
;
unsigned
long
sub
=
b
%
M
;
if
(
a
<
sub
)
return
M
-
(
sub
-
a
)
;
return
a
-
sub
;
}
template
<
typename
T
T
M
>
inline
T
ForwardDiff
(
T
a
T
b
)
{
static_assert
(
std
:
:
is_unsigned
<
T
>
:
:
value
"
Type
must
be
an
unsigned
integer
.
"
)
;
RTC_DCHECK_LT
(
a
M
)
;
RTC_DCHECK_LT
(
b
M
)
;
return
a
<
=
b
?
b
-
a
:
M
-
(
a
-
b
)
;
}
template
<
typename
T
>
inline
T
ForwardDiff
(
T
a
T
b
)
{
static_assert
(
std
:
:
is_unsigned
<
T
>
:
:
value
"
Type
must
be
an
unsigned
integer
.
"
)
;
return
b
-
a
;
}
template
<
typename
T
T
M
>
inline
T
ReverseDiff
(
T
a
T
b
)
{
static_assert
(
std
:
:
is_unsigned
<
T
>
:
:
value
"
Type
must
be
an
unsigned
integer
.
"
)
;
RTC_DCHECK_LT
(
a
M
)
;
RTC_DCHECK_LT
(
b
M
)
;
return
b
<
=
a
?
a
-
b
:
M
-
(
b
-
a
)
;
}
template
<
typename
T
>
inline
T
ReverseDiff
(
T
a
T
b
)
{
static_assert
(
std
:
:
is_unsigned
<
T
>
:
:
value
"
Type
must
be
an
unsigned
integer
.
"
)
;
return
a
-
b
;
}
template
<
typename
T
T
M
>
inline
T
MinDiff
(
T
a
T
b
)
{
static_assert
(
std
:
:
is_unsigned
<
T
>
:
:
value
"
Type
must
be
an
unsigned
integer
.
"
)
;
return
std
:
:
min
(
ForwardDiff
<
T
M
>
(
a
b
)
ReverseDiff
<
T
M
>
(
a
b
)
)
;
}
template
<
typename
T
>
inline
T
MinDiff
(
T
a
T
b
)
{
static_assert
(
std
:
:
is_unsigned
<
T
>
:
:
value
"
Type
must
be
an
unsigned
integer
.
"
)
;
return
std
:
:
min
(
ForwardDiff
(
a
b
)
ReverseDiff
(
a
b
)
)
;
}
}
#
endif
