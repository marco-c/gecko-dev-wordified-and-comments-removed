#
ifndef
WEBRTC_BASE_REFCOUNTEDOBJECT_H_
#
define
WEBRTC_BASE_REFCOUNTEDOBJECT_H_
#
include
<
utility
>
#
include
"
webrtc
/
base
/
atomicops
.
h
"
namespace
rtc
{
template
<
class
T
>
class
RefCountedObject
:
public
T
{
public
:
RefCountedObject
(
)
{
}
template
<
class
P0
>
explicit
RefCountedObject
(
P0
&
&
p0
)
:
T
(
std
:
:
forward
<
P0
>
(
p0
)
)
{
}
template
<
class
P0
class
P1
class
.
.
.
Args
>
RefCountedObject
(
P0
&
&
p0
P1
&
&
p1
Args
&
&
.
.
.
args
)
:
T
(
std
:
:
forward
<
P0
>
(
p0
)
std
:
:
forward
<
P1
>
(
p1
)
std
:
:
forward
<
Args
>
(
args
)
.
.
.
)
{
}
virtual
int
AddRef
(
)
const
{
return
AtomicOps
:
:
Increment
(
&
ref_count_
)
;
}
virtual
int
Release
(
)
const
{
int
count
=
AtomicOps
:
:
Decrement
(
&
ref_count_
)
;
if
(
!
count
)
{
delete
this
;
}
return
count
;
}
virtual
bool
HasOneRef
(
)
const
{
return
AtomicOps
:
:
AcquireLoad
(
&
ref_count_
)
=
=
1
;
}
protected
:
virtual
~
RefCountedObject
(
)
{
}
mutable
volatile
int
ref_count_
=
0
;
}
;
}
#
endif
