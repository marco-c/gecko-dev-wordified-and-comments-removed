#
ifndef
WEBRTC_BASE_SAFE_CONVERSIONS_H_
#
define
WEBRTC_BASE_SAFE_CONVERSIONS_H_
#
include
<
limits
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
safe_conversions_impl
.
h
"
namespace
rtc
{
template
<
typename
Dst
typename
Src
>
inline
bool
IsValueInRangeForNumericType
(
Src
value
)
{
return
internal
:
:
RangeCheck
<
Dst
>
(
value
)
=
=
internal
:
:
TYPE_VALID
;
}
template
<
typename
Dst
typename
Src
>
inline
Dst
checked_cast
(
Src
value
)
{
CHECK
(
IsValueInRangeForNumericType
<
Dst
>
(
value
)
)
;
return
static_cast
<
Dst
>
(
value
)
;
}
template
<
typename
Dst
typename
Src
>
inline
Dst
saturated_cast
(
Src
value
)
{
if
(
std
:
:
numeric_limits
<
Dst
>
:
:
is_iec559
)
return
static_cast
<
Dst
>
(
value
)
;
switch
(
internal
:
:
RangeCheck
<
Dst
>
(
value
)
)
{
case
internal
:
:
TYPE_VALID
:
return
static_cast
<
Dst
>
(
value
)
;
case
internal
:
:
TYPE_UNDERFLOW
:
return
std
:
:
numeric_limits
<
Dst
>
:
:
min
(
)
;
case
internal
:
:
TYPE_OVERFLOW
:
return
std
:
:
numeric_limits
<
Dst
>
:
:
max
(
)
;
case
internal
:
:
TYPE_INVALID
:
FATAL
(
)
;
return
std
:
:
numeric_limits
<
Dst
>
:
:
max
(
)
;
}
FATAL
(
)
;
return
static_cast
<
Dst
>
(
value
)
;
}
}
#
endif
