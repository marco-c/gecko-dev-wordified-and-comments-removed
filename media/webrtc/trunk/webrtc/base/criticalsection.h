#
ifndef
WEBRTC_BASE_CRITICALSECTION_H_
#
define
WEBRTC_BASE_CRITICALSECTION_H_
#
include
"
webrtc
/
base
/
atomicops
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
if
defined
(
WEBRTC_WIN
)
#
include
<
winsock2
.
h
>
#
include
<
windows
.
h
>
#
include
<
sal
.
h
>
#
endif
#
if
defined
(
WEBRTC_POSIX
)
#
include
<
pthread
.
h
>
#
endif
#
if
(
!
defined
(
NDEBUG
)
|
|
defined
(
DCHECK_ALWAYS_ON
)
)
#
define
CS_DEBUG_CHECKS
1
#
endif
#
if
CS_DEBUG_CHECKS
#
define
CS_DEBUG_CODE
(
x
)
x
#
else
#
define
CS_DEBUG_CODE
(
x
)
#
endif
namespace
rtc
{
class
LOCKABLE
CriticalSection
{
public
:
CriticalSection
(
)
;
~
CriticalSection
(
)
;
void
Enter
(
)
EXCLUSIVE_LOCK_FUNCTION
(
)
;
bool
TryEnter
(
)
EXCLUSIVE_TRYLOCK_FUNCTION
(
true
)
;
void
Leave
(
)
UNLOCK_FUNCTION
(
)
;
bool
CurrentThreadIsOwner
(
)
const
;
bool
IsLocked
(
)
const
;
private
:
#
if
defined
(
WEBRTC_WIN
)
CRITICAL_SECTION
crit_
;
#
elif
defined
(
WEBRTC_POSIX
)
pthread_mutex_t
mutex_
;
CS_DEBUG_CODE
(
pthread_t
thread_
)
;
CS_DEBUG_CODE
(
int
recursion_count_
)
;
#
endif
}
;
class
SCOPED_LOCKABLE
CritScope
{
public
:
explicit
CritScope
(
CriticalSection
*
cs
)
EXCLUSIVE_LOCK_FUNCTION
(
cs
)
;
~
CritScope
(
)
UNLOCK_FUNCTION
(
)
;
private
:
CriticalSection
*
const
cs_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
CritScope
)
;
}
;
class
TryCritScope
{
public
:
explicit
TryCritScope
(
CriticalSection
*
cs
)
;
~
TryCritScope
(
)
;
#
if
defined
(
WEBRTC_WIN
)
_Check_return_
bool
locked
(
)
const
;
#
else
bool
locked
(
)
const
__attribute__
(
(
__warn_unused_result__
)
)
;
#
endif
private
:
CriticalSection
*
const
cs_
;
const
bool
locked_
;
CS_DEBUG_CODE
(
mutable
bool
lock_was_called_
)
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
TryCritScope
)
;
}
;
class
LOCKABLE
GlobalLockPod
{
public
:
void
Lock
(
)
EXCLUSIVE_LOCK_FUNCTION
(
)
;
void
Unlock
(
)
UNLOCK_FUNCTION
(
)
;
volatile
int
lock_acquired
;
}
;
class
GlobalLock
:
public
GlobalLockPod
{
public
:
GlobalLock
(
)
;
}
;
class
SCOPED_LOCKABLE
GlobalLockScope
{
public
:
explicit
GlobalLockScope
(
GlobalLockPod
*
lock
)
EXCLUSIVE_LOCK_FUNCTION
(
lock
)
;
~
GlobalLockScope
(
)
UNLOCK_FUNCTION
(
)
;
private
:
GlobalLockPod
*
const
lock_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
GlobalLockScope
)
;
}
;
}
#
endif
