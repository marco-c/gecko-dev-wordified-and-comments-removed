#
ifndef
WEBRTC_BASE_VIRTUALSOCKETSERVER_H_
#
define
WEBRTC_BASE_VIRTUALSOCKETSERVER_H_
#
include
<
assert
.
h
>
#
include
<
deque
>
#
include
<
map
>
#
include
"
webrtc
/
base
/
messagequeue
.
h
"
#
include
"
webrtc
/
base
/
socketserver
.
h
"
namespace
rtc
{
class
Packet
;
class
VirtualSocket
;
class
SocketAddressPair
;
class
VirtualSocketServer
:
public
SocketServer
public
sigslot
:
:
has_slots
<
>
{
public
:
explicit
VirtualSocketServer
(
SocketServer
*
ss
)
;
~
VirtualSocketServer
(
)
override
;
SocketServer
*
socketserver
(
)
{
return
server_
;
}
IPAddress
GetDefaultRoute
(
int
family
)
;
void
SetDefaultRoute
(
const
IPAddress
&
from_addr
)
;
uint32_t
bandwidth
(
)
const
{
return
bandwidth_
;
}
void
set_bandwidth
(
uint32_t
bandwidth
)
{
bandwidth_
=
bandwidth
;
}
uint32_t
network_capacity
(
)
const
{
return
network_capacity_
;
}
void
set_network_capacity
(
uint32_t
capacity
)
{
network_capacity_
=
capacity
;
}
uint32_t
send_buffer_capacity
(
)
const
{
return
send_buffer_capacity_
;
}
void
set_send_buffer_capacity
(
uint32_t
capacity
)
{
send_buffer_capacity_
=
capacity
;
}
uint32_t
recv_buffer_capacity
(
)
const
{
return
recv_buffer_capacity_
;
}
void
set_recv_buffer_capacity
(
uint32_t
capacity
)
{
recv_buffer_capacity_
=
capacity
;
}
uint32_t
delay_mean
(
)
const
{
return
delay_mean_
;
}
uint32_t
delay_stddev
(
)
const
{
return
delay_stddev_
;
}
uint32_t
delay_samples
(
)
const
{
return
delay_samples_
;
}
void
set_delay_mean
(
uint32_t
delay_mean
)
{
delay_mean_
=
delay_mean
;
}
void
set_delay_stddev
(
uint32_t
delay_stddev
)
{
delay_stddev_
=
delay_stddev
;
}
void
set_delay_samples
(
uint32_t
delay_samples
)
{
delay_samples_
=
delay_samples
;
}
void
UpdateDelayDistribution
(
)
;
double
drop_probability
(
)
{
return
drop_prob_
;
}
void
set_drop_probability
(
double
drop_prob
)
{
assert
(
(
0
<
=
drop_prob
)
&
&
(
drop_prob
<
=
1
)
)
;
drop_prob_
=
drop_prob
;
}
Socket
*
CreateSocket
(
int
type
)
override
;
Socket
*
CreateSocket
(
int
family
int
type
)
override
;
AsyncSocket
*
CreateAsyncSocket
(
int
type
)
override
;
AsyncSocket
*
CreateAsyncSocket
(
int
family
int
type
)
override
;
void
SetMessageQueue
(
MessageQueue
*
queue
)
override
;
bool
Wait
(
int
cms
bool
process_io
)
override
;
void
WakeUp
(
)
override
;
typedef
std
:
:
pair
<
double
double
>
Point
;
typedef
std
:
:
vector
<
Point
>
Function
;
static
Function
*
CreateDistribution
(
uint32_t
mean
uint32_t
stddev
uint32_t
samples
)
;
bool
ProcessMessagesUntilIdle
(
)
;
void
SetNextPortForTesting
(
uint16_t
port
)
;
bool
CloseTcpConnections
(
const
SocketAddress
&
addr_local
const
SocketAddress
&
addr_remote
)
;
protected
:
IPAddress
GetNextIP
(
int
family
)
;
uint16_t
GetNextPort
(
)
;
VirtualSocket
*
CreateSocketInternal
(
int
family
int
type
)
;
int
Bind
(
VirtualSocket
*
socket
SocketAddress
*
addr
)
;
int
Bind
(
VirtualSocket
*
socket
const
SocketAddress
&
addr
)
;
VirtualSocket
*
LookupBinding
(
const
SocketAddress
&
addr
)
;
int
Unbind
(
const
SocketAddress
&
addr
VirtualSocket
*
socket
)
;
void
AddConnection
(
const
SocketAddress
&
client
const
SocketAddress
&
server
VirtualSocket
*
socket
)
;
VirtualSocket
*
LookupConnection
(
const
SocketAddress
&
client
const
SocketAddress
&
server
)
;
void
RemoveConnection
(
const
SocketAddress
&
client
const
SocketAddress
&
server
)
;
int
Connect
(
VirtualSocket
*
socket
const
SocketAddress
&
remote_addr
bool
use_delay
)
;
bool
Disconnect
(
VirtualSocket
*
socket
)
;
int
SendUdp
(
VirtualSocket
*
socket
const
char
*
data
size_t
data_size
const
SocketAddress
&
remote_addr
)
;
void
SendTcp
(
VirtualSocket
*
socket
)
;
void
AddPacketToNetwork
(
VirtualSocket
*
socket
VirtualSocket
*
recipient
uint32_t
cur_time
const
char
*
data
size_t
data_size
size_t
header_size
bool
ordered
)
;
void
PurgeNetworkPackets
(
VirtualSocket
*
socket
uint32_t
cur_time
)
;
uint32_t
SendDelay
(
uint32_t
size
)
;
uint32_t
GetRandomTransitDelay
(
)
;
static
Function
*
Accumulate
(
Function
*
f
)
;
static
Function
*
Invert
(
Function
*
f
)
;
static
Function
*
Resample
(
Function
*
f
double
x1
double
x2
uint32_t
samples
)
;
static
double
Evaluate
(
Function
*
f
double
x
)
;
void
OnMessageQueueDestroyed
(
)
{
msg_queue_
=
NULL
;
}
static
bool
CanInteractWith
(
VirtualSocket
*
local
VirtualSocket
*
remote
)
;
private
:
friend
class
VirtualSocket
;
typedef
std
:
:
map
<
SocketAddress
VirtualSocket
*
>
AddressMap
;
typedef
std
:
:
map
<
SocketAddressPair
VirtualSocket
*
>
ConnectionMap
;
SocketServer
*
server_
;
bool
server_owned_
;
MessageQueue
*
msg_queue_
;
bool
stop_on_idle_
;
uint32_t
network_delay_
;
in_addr
next_ipv4_
;
in6_addr
next_ipv6_
;
uint16_t
next_port_
;
AddressMap
*
bindings_
;
ConnectionMap
*
connections_
;
IPAddress
default_route_v4_
;
IPAddress
default_route_v6_
;
uint32_t
bandwidth_
;
uint32_t
network_capacity_
;
uint32_t
send_buffer_capacity_
;
uint32_t
recv_buffer_capacity_
;
uint32_t
delay_mean_
;
uint32_t
delay_stddev_
;
uint32_t
delay_samples_
;
Function
*
delay_dist_
;
CriticalSection
delay_crit_
;
double
drop_prob_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
VirtualSocketServer
)
;
}
;
class
VirtualSocket
:
public
AsyncSocket
public
MessageHandler
{
public
:
VirtualSocket
(
VirtualSocketServer
*
server
int
family
int
type
bool
async
)
;
~
VirtualSocket
(
)
override
;
SocketAddress
GetLocalAddress
(
)
const
override
;
SocketAddress
GetRemoteAddress
(
)
const
override
;
void
SetAlternativeLocalAddress
(
const
SocketAddress
&
addr
)
;
int
Bind
(
const
SocketAddress
&
addr
)
override
;
int
Connect
(
const
SocketAddress
&
addr
)
override
;
int
Close
(
)
override
;
int
Send
(
const
void
*
pv
size_t
cb
)
override
;
int
SendTo
(
const
void
*
pv
size_t
cb
const
SocketAddress
&
addr
)
override
;
int
Recv
(
void
*
pv
size_t
cb
)
override
;
int
RecvFrom
(
void
*
pv
size_t
cb
SocketAddress
*
paddr
)
override
;
int
Listen
(
int
backlog
)
override
;
VirtualSocket
*
Accept
(
SocketAddress
*
paddr
)
override
;
int
GetError
(
)
const
override
;
void
SetError
(
int
error
)
override
;
ConnState
GetState
(
)
const
override
;
int
GetOption
(
Option
opt
int
*
value
)
override
;
int
SetOption
(
Option
opt
int
value
)
override
;
int
EstimateMTU
(
uint16_t
*
mtu
)
override
;
void
OnMessage
(
Message
*
pmsg
)
override
;
bool
was_any
(
)
{
return
was_any_
;
}
void
set_was_any
(
bool
was_any
)
{
was_any_
=
was_any
;
}
sigslot
:
:
signal2
<
VirtualSocket
*
const
SocketAddress
&
>
SignalAddressReady
;
private
:
struct
NetworkEntry
{
size_t
size
;
uint32_t
done_time
;
}
;
typedef
std
:
:
deque
<
SocketAddress
>
ListenQueue
;
typedef
std
:
:
deque
<
NetworkEntry
>
NetworkQueue
;
typedef
std
:
:
vector
<
char
>
SendBuffer
;
typedef
std
:
:
list
<
Packet
*
>
RecvBuffer
;
typedef
std
:
:
map
<
Option
int
>
OptionsMap
;
int
InitiateConnect
(
const
SocketAddress
&
addr
bool
use_delay
)
;
void
CompleteConnect
(
const
SocketAddress
&
addr
bool
notify
)
;
int
SendUdp
(
const
void
*
pv
size_t
cb
const
SocketAddress
&
addr
)
;
int
SendTcp
(
const
void
*
pv
size_t
cb
)
;
void
SetLocalAddress
(
const
SocketAddress
&
addr
)
;
VirtualSocketServer
*
server_
;
int
type_
;
bool
async_
;
ConnState
state_
;
int
error_
;
SocketAddress
local_addr_
;
SocketAddress
alternative_local_addr_
;
SocketAddress
remote_addr_
;
ListenQueue
*
listen_queue_
;
SendBuffer
send_buffer_
;
bool
write_enabled_
;
CriticalSection
crit_
;
NetworkQueue
network_
;
size_t
network_size_
;
RecvBuffer
recv_buffer_
;
size_t
recv_buffer_size_
;
bool
bound_
;
bool
was_any_
;
OptionsMap
options_map_
;
friend
class
VirtualSocketServer
;
}
;
}
#
endif
