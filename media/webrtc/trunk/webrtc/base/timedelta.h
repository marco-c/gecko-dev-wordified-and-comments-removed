#
ifndef
WEBRTC_BASE_TIMEDELTA_H_
#
define
WEBRTC_BASE_TIMEDELTA_H_
#
include
<
stdint
.
h
>
#
include
"
webrtc
/
base
/
timeutils
.
h
"
namespace
rtc
{
class
TimeDelta
{
public
:
TimeDelta
(
)
:
delta_
(
0
)
{
}
static
constexpr
TimeDelta
FromSeconds
(
int64_t
secs
)
{
return
TimeDelta
(
secs
*
kNumNanosecsPerSec
)
;
}
static
constexpr
TimeDelta
FromMilliseconds
(
int64_t
ms
)
{
return
TimeDelta
(
ms
*
kNumNanosecsPerMillisec
)
;
}
static
constexpr
TimeDelta
FromMicroseconds
(
int64_t
us
)
{
return
TimeDelta
(
us
*
kNumNanosecsPerMicrosec
)
;
}
static
constexpr
TimeDelta
FromNanoseconds
(
int64_t
ns
)
{
return
TimeDelta
(
ns
)
;
}
bool
is_zero
(
)
const
{
return
delta_
=
=
0
;
}
int64_t
ToSeconds
(
)
const
{
return
delta_
/
kNumNanosecsPerSec
;
}
int64_t
ToMilliseconds
(
)
const
{
return
delta_
/
kNumNanosecsPerMillisec
;
}
int64_t
ToMicroseconds
(
)
const
{
return
delta_
/
kNumNanosecsPerMicrosec
;
}
int64_t
ToNanoseconds
(
)
const
{
return
delta_
;
}
TimeDelta
&
operator
=
(
TimeDelta
other
)
{
delta_
=
other
.
delta_
;
return
*
this
;
}
TimeDelta
operator
+
(
TimeDelta
other
)
const
{
return
TimeDelta
(
delta_
+
other
.
delta_
)
;
}
TimeDelta
operator
-
(
TimeDelta
other
)
const
{
return
TimeDelta
(
delta_
+
other
.
delta_
)
;
}
TimeDelta
&
operator
+
=
(
TimeDelta
other
)
{
return
*
this
=
(
*
this
+
other
)
;
}
TimeDelta
&
operator
-
=
(
TimeDelta
other
)
{
return
*
this
=
(
*
this
-
other
)
;
}
TimeDelta
operator
-
(
)
const
{
return
TimeDelta
(
-
delta_
)
;
}
template
<
typename
T
>
TimeDelta
operator
*
(
T
a
)
const
{
return
TimeDelta
(
delta_
*
a
)
;
}
template
<
typename
T
>
TimeDelta
operator
/
(
T
a
)
const
{
return
TimeDelta
(
delta_
/
a
)
;
}
template
<
typename
T
>
TimeDelta
&
operator
*
=
(
T
a
)
{
return
*
this
=
(
*
this
*
a
)
;
}
template
<
typename
T
>
TimeDelta
&
operator
/
=
(
T
a
)
{
return
*
this
=
(
*
this
/
a
)
;
}
TimeDelta
operator
%
(
TimeDelta
a
)
const
{
return
TimeDelta
(
delta_
%
a
.
delta_
)
;
}
constexpr
bool
operator
=
=
(
TimeDelta
other
)
const
{
return
delta_
=
=
other
.
delta_
;
}
constexpr
bool
operator
!
=
(
TimeDelta
other
)
const
{
return
delta_
!
=
other
.
delta_
;
}
constexpr
bool
operator
<
(
TimeDelta
other
)
const
{
return
delta_
<
other
.
delta_
;
}
constexpr
bool
operator
<
=
(
TimeDelta
other
)
const
{
return
delta_
<
=
other
.
delta_
;
}
constexpr
bool
operator
>
(
TimeDelta
other
)
const
{
return
delta_
>
other
.
delta_
;
}
constexpr
bool
operator
>
=
(
TimeDelta
other
)
const
{
return
delta_
>
=
other
.
delta_
;
}
private
:
constexpr
explicit
TimeDelta
(
int64_t
delta_ns
)
:
delta_
(
delta_ns
)
{
}
int64_t
delta_
;
}
;
template
<
typename
T
>
inline
TimeDelta
operator
*
(
T
a
TimeDelta
td
)
{
return
td
*
a
;
}
}
#
endif
