#
ifndef
WEBRTC_BASE_RACE_CHECKER_H_
#
define
WEBRTC_BASE_RACE_CHECKER_H_
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
platform_thread
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
namespace
rtc
{
namespace
internal
{
class
RaceCheckerScope
;
}
class
LOCKABLE
RaceChecker
{
public
:
friend
class
internal
:
:
RaceCheckerScope
;
RaceChecker
(
)
;
private
:
bool
Acquire
(
)
const
EXCLUSIVE_LOCK_FUNCTION
(
)
;
void
Release
(
)
const
UNLOCK_FUNCTION
(
)
;
mutable
volatile
int
access_count_
=
0
;
mutable
volatile
PlatformThreadRef
accessing_thread_
;
}
;
namespace
internal
{
class
SCOPED_LOCKABLE
RaceCheckerScope
{
public
:
explicit
RaceCheckerScope
(
const
RaceChecker
*
race_checker
)
EXCLUSIVE_LOCK_FUNCTION
(
race_checker
)
;
bool
RaceDetected
(
)
const
;
~
RaceCheckerScope
(
)
UNLOCK_FUNCTION
(
)
;
private
:
const
RaceChecker
*
const
race_checker_
;
const
bool
race_check_ok_
;
}
;
class
SCOPED_LOCKABLE
RaceCheckerScopeDoNothing
{
public
:
explicit
RaceCheckerScopeDoNothing
(
const
RaceChecker
*
race_checker
)
EXCLUSIVE_LOCK_FUNCTION
(
race_checker
)
{
}
~
RaceCheckerScopeDoNothing
(
)
UNLOCK_FUNCTION
(
)
{
}
}
;
}
}
#
define
RTC_CHECK_RUNS_SERIALIZED
(
x
)
\
rtc
:
:
internal
:
:
RaceCheckerScope
race_checker
(
x
)
;
\
RTC_CHECK
(
!
race_checker
.
RaceDetected
(
)
)
#
if
RTC_DCHECK_IS_ON
#
define
RTC_DCHECK_RUNS_SERIALIZED
(
x
)
\
rtc
:
:
internal
:
:
RaceCheckerScope
race_checker
(
x
)
;
\
RTC_DCHECK
(
!
race_checker
.
RaceDetected
(
)
)
#
else
#
define
RTC_DCHECK_RUNS_SERIALIZED
(
x
)
\
rtc
:
:
internal
:
:
RaceCheckerScopeDoNothing
race_checker
(
x
)
#
endif
#
endif
