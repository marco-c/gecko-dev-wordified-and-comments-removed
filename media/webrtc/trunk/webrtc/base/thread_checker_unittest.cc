#
include
<
memory
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
task_queue
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
#
define
ENABLE_THREAD_CHECKER
RTC_DCHECK_IS_ON
namespace
rtc
{
namespace
{
class
ThreadCheckerClass
:
public
ThreadChecker
{
public
:
ThreadCheckerClass
(
)
{
}
void
DoStuff
(
)
{
RTC_DCHECK
(
CalledOnValidThread
(
)
)
;
}
void
DetachFromThread
(
)
{
ThreadChecker
:
:
DetachFromThread
(
)
;
}
static
void
MethodOnDifferentThreadImpl
(
)
;
static
void
DetachThenCallFromDifferentThreadImpl
(
)
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
ThreadCheckerClass
)
;
}
;
class
CallDoStuffOnThread
:
public
Thread
{
public
:
explicit
CallDoStuffOnThread
(
ThreadCheckerClass
*
thread_checker_class
)
:
Thread
(
)
thread_checker_class_
(
thread_checker_class
)
{
SetName
(
"
call_do_stuff_on_thread
"
NULL
)
;
}
void
Run
(
)
override
{
thread_checker_class_
-
>
DoStuff
(
)
;
}
void
Join
(
)
{
Thread
:
:
Join
(
)
;
}
private
:
ThreadCheckerClass
*
thread_checker_class_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
CallDoStuffOnThread
)
;
}
;
class
DeleteThreadCheckerClassOnThread
:
public
Thread
{
public
:
explicit
DeleteThreadCheckerClassOnThread
(
ThreadCheckerClass
*
thread_checker_class
)
:
Thread
(
)
thread_checker_class_
(
thread_checker_class
)
{
SetName
(
"
delete_thread_checker_class_on_thread
"
NULL
)
;
}
void
Run
(
)
override
{
thread_checker_class_
.
reset
(
)
;
}
void
Join
(
)
{
Thread
:
:
Join
(
)
;
}
private
:
std
:
:
unique_ptr
<
ThreadCheckerClass
>
thread_checker_class_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
DeleteThreadCheckerClassOnThread
)
;
}
;
}
TEST
(
ThreadCheckerTest
CallsAllowedOnSameThread
)
{
std
:
:
unique_ptr
<
ThreadCheckerClass
>
thread_checker_class
(
new
ThreadCheckerClass
)
;
thread_checker_class
-
>
DoStuff
(
)
;
thread_checker_class
.
reset
(
)
;
}
TEST
(
ThreadCheckerTest
DestructorAllowedOnDifferentThread
)
{
std
:
:
unique_ptr
<
ThreadCheckerClass
>
thread_checker_class
(
new
ThreadCheckerClass
)
;
DeleteThreadCheckerClassOnThread
delete_on_thread
(
thread_checker_class
.
release
(
)
)
;
delete_on_thread
.
Start
(
)
;
delete_on_thread
.
Join
(
)
;
}
TEST
(
ThreadCheckerTest
DetachFromThread
)
{
std
:
:
unique_ptr
<
ThreadCheckerClass
>
thread_checker_class
(
new
ThreadCheckerClass
)
;
thread_checker_class
-
>
DetachFromThread
(
)
;
CallDoStuffOnThread
call_on_thread
(
thread_checker_class
.
get
(
)
)
;
call_on_thread
.
Start
(
)
;
call_on_thread
.
Join
(
)
;
}
#
if
GTEST_HAS_DEATH_TEST
|
|
!
ENABLE_THREAD_CHECKER
void
ThreadCheckerClass
:
:
MethodOnDifferentThreadImpl
(
)
{
std
:
:
unique_ptr
<
ThreadCheckerClass
>
thread_checker_class
(
new
ThreadCheckerClass
)
;
CallDoStuffOnThread
call_on_thread
(
thread_checker_class
.
get
(
)
)
;
call_on_thread
.
Start
(
)
;
call_on_thread
.
Join
(
)
;
}
#
if
ENABLE_THREAD_CHECKER
TEST
(
ThreadCheckerDeathTest
MethodNotAllowedOnDifferentThreadInDebug
)
{
ASSERT_DEATH
(
{
ThreadCheckerClass
:
:
MethodOnDifferentThreadImpl
(
)
;
}
"
"
)
;
}
#
else
TEST
(
ThreadCheckerTest
MethodAllowedOnDifferentThreadInRelease
)
{
ThreadCheckerClass
:
:
MethodOnDifferentThreadImpl
(
)
;
}
#
endif
void
ThreadCheckerClass
:
:
DetachThenCallFromDifferentThreadImpl
(
)
{
std
:
:
unique_ptr
<
ThreadCheckerClass
>
thread_checker_class
(
new
ThreadCheckerClass
)
;
thread_checker_class
-
>
DetachFromThread
(
)
;
CallDoStuffOnThread
call_on_thread
(
thread_checker_class
.
get
(
)
)
;
call_on_thread
.
Start
(
)
;
call_on_thread
.
Join
(
)
;
thread_checker_class
-
>
DoStuff
(
)
;
}
#
if
ENABLE_THREAD_CHECKER
TEST
(
ThreadCheckerDeathTest
DetachFromThreadInDebug
)
{
ASSERT_DEATH
(
{
ThreadCheckerClass
:
:
DetachThenCallFromDifferentThreadImpl
(
)
;
}
"
"
)
;
}
#
else
TEST
(
ThreadCheckerTest
DetachFromThreadInRelease
)
{
ThreadCheckerClass
:
:
DetachThenCallFromDifferentThreadImpl
(
)
;
}
#
endif
#
endif
class
ThreadAnnotateTest
{
public
:
template
<
typename
T
>
void
access_var_no_annotate
(
)
{
var_thread_
=
42
;
}
template
<
typename
T
>
void
access_fun_no_annotate
(
)
{
function
(
)
;
}
void
access_var_annotate_thread
(
)
{
RTC_DCHECK_RUN_ON
(
thread_
)
;
var_thread_
=
42
;
}
void
access_var_annotate_checker
(
)
{
RTC_DCHECK_RUN_ON
(
&
checker_
)
;
var_checker_
=
44
;
}
void
access_var_annotate_queue
(
)
{
RTC_DCHECK_RUN_ON
(
queue_
)
;
var_queue_
=
46
;
}
void
access_fun_annotate
(
)
{
RTC_DCHECK_RUN_ON
(
thread_
)
;
function
(
)
;
}
void
access_fun_and_var
(
)
{
RTC_DCHECK_RUN_ON
(
thread_
)
;
fun_acccess_var
(
)
;
}
private
:
void
function
(
)
RUN_ON
(
thread_
)
{
}
void
fun_acccess_var
(
)
RUN_ON
(
thread_
)
{
var_thread_
=
13
;
}
rtc
:
:
Thread
*
thread_
;
rtc
:
:
ThreadChecker
checker_
;
rtc
:
:
TaskQueue
*
queue_
;
int
var_thread_
ACCESS_ON
(
thread_
)
;
int
var_checker_
GUARDED_BY
(
checker_
)
;
int
var_queue_
ACCESS_ON
(
queue_
)
;
}
;
#
undef
ENABLE_THREAD_CHECKER
}
