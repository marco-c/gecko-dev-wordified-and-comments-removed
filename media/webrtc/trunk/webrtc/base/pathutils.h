#
ifndef
WEBRTC_BASE_PATHUTILS_H__
#
define
WEBRTC_BASE_PATHUTILS_H__
#
include
<
string
>
#
include
"
webrtc
/
base
/
checks
.
h
"
namespace
rtc
{
class
Pathname
{
public
:
static
bool
IsFolderDelimiter
(
char
ch
)
;
static
char
DefaultFolderDelimiter
(
)
;
Pathname
(
)
;
Pathname
(
const
Pathname
&
)
;
Pathname
(
Pathname
&
&
)
;
Pathname
(
const
std
:
:
string
&
pathname
)
;
Pathname
(
const
std
:
:
string
&
folder
const
std
:
:
string
&
filename
)
;
Pathname
&
operator
=
(
const
Pathname
&
)
;
Pathname
&
operator
=
(
Pathname
&
&
)
;
char
folder_delimiter
(
)
const
{
return
folder_delimiter_
;
}
void
SetFolderDelimiter
(
char
delimiter
)
;
void
Normalize
(
)
;
void
clear
(
)
;
bool
empty
(
)
const
;
std
:
:
string
pathname
(
)
const
;
void
SetPathname
(
const
std
:
:
string
&
pathname
)
;
void
SetPathname
(
const
std
:
:
string
&
folder
const
std
:
:
string
&
filename
)
;
void
AppendPathname
(
const
std
:
:
string
&
pathname
)
;
std
:
:
string
folder
(
)
const
;
std
:
:
string
folder_name
(
)
const
;
std
:
:
string
parent_folder
(
)
const
;
void
SetFolder
(
const
std
:
:
string
&
folder
)
;
void
AppendFolder
(
const
std
:
:
string
&
folder
)
;
std
:
:
string
basename
(
)
const
;
bool
SetBasename
(
const
std
:
:
string
&
basename
)
;
std
:
:
string
extension
(
)
const
;
bool
SetExtension
(
const
std
:
:
string
&
extension
)
;
std
:
:
string
filename
(
)
const
;
bool
SetFilename
(
const
std
:
:
string
&
filename
)
;
#
if
defined
(
WEBRTC_WIN
)
bool
GetDrive
(
char
*
drive
uint32_t
bytes
)
const
;
static
bool
GetDrive
(
char
*
drive
uint32_t
bytes
const
std
:
:
string
&
pathname
)
;
#
endif
private
:
std
:
:
string
folder_
basename_
extension_
;
char
folder_delimiter_
;
}
;
}
#
endif
