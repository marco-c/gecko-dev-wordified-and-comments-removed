#
ifndef
WEBRTC_BASE_PLATFORM_THREAD_H_
#
define
WEBRTC_BASE_PLATFORM_THREAD_H_
#
include
<
string
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
event
.
h
"
#
include
"
webrtc
/
base
/
platform_thread_types
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
namespace
rtc
{
PlatformThreadId
CurrentThreadId
(
)
;
PlatformThreadRef
CurrentThreadRef
(
)
;
bool
IsThreadRefEqual
(
const
PlatformThreadRef
&
a
const
PlatformThreadRef
&
b
)
;
void
SetCurrentThreadName
(
const
char
*
name
)
;
typedef
bool
(
*
ThreadRunFunction
)
(
void
*
)
;
enum
ThreadPriority
{
#
ifdef
WEBRTC_WIN
kLowPriority
=
THREAD_PRIORITY_BELOW_NORMAL
kNormalPriority
=
THREAD_PRIORITY_NORMAL
kHighPriority
=
THREAD_PRIORITY_ABOVE_NORMAL
kHighestPriority
=
THREAD_PRIORITY_HIGHEST
kRealtimePriority
=
THREAD_PRIORITY_TIME_CRITICAL
#
else
kLowPriority
=
1
kNormalPriority
=
2
kHighPriority
=
3
kHighestPriority
=
4
kRealtimePriority
=
5
#
endif
}
;
class
PlatformThread
{
public
:
PlatformThread
(
ThreadRunFunction
func
void
*
obj
const
char
*
thread_name
)
;
virtual
~
PlatformThread
(
)
;
void
Start
(
)
;
bool
IsRunning
(
)
const
;
virtual
void
Stop
(
)
;
bool
SetPriority
(
ThreadPriority
priority
)
;
protected
:
virtual
void
Run
(
)
;
ThreadRunFunction
const
run_function_
;
void
*
const
obj_
;
const
std
:
:
string
name_
;
rtc
:
:
ThreadChecker
thread_checker_
;
#
if
defined
(
WEBRTC_WIN
)
static
DWORD
WINAPI
StartThread
(
void
*
param
)
;
bool
stop_
;
HANDLE
thread_
;
#
else
static
void
*
StartThread
(
void
*
param
)
;
rtc
:
:
Event
stop_event_
;
pthread_t
thread_
;
#
endif
RTC_DISALLOW_COPY_AND_ASSIGN
(
PlatformThread
)
;
}
;
#
if
defined
(
WEBRTC_WIN
)
class
PlatformUIThread
:
public
PlatformThread
{
public
:
PlatformUIThread
(
ThreadRunFunction
func
void
*
obj
const
char
*
thread_name
)
:
PlatformThread
(
func
obj
thread_name
)
hwnd_
(
nullptr
)
timerid_
(
0
)
timeout_
(
0
)
{
}
virtual
~
PlatformUIThread
(
)
{
}
virtual
void
Stop
(
)
override
;
void
RequestCallback
(
)
;
bool
RequestCallbackTimer
(
unsigned
int
milliseconds
)
;
protected
:
virtual
void
Run
(
)
override
;
private
:
static
LRESULT
CALLBACK
EventWindowProc
(
HWND
UINT
WPARAM
LPARAM
)
;
void
NativeEventCallback
(
)
;
bool
InternalInit
(
)
;
HWND
hwnd_
;
UINT_PTR
timerid_
;
unsigned
int
timeout_
;
}
;
#
endif
}
#
endif
