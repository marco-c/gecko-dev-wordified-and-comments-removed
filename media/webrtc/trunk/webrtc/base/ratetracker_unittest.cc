#
include
"
webrtc
/
base
/
gunit
.
h
"
#
include
"
webrtc
/
base
/
ratetracker
.
h
"
namespace
rtc
{
class
RateTrackerForTest
:
public
RateTracker
{
public
:
RateTrackerForTest
(
)
:
RateTracker
(
100u
10u
)
time_
(
0
)
{
}
virtual
uint32_t
Time
(
)
const
{
return
time_
;
}
void
AdvanceTime
(
uint32_t
delta
)
{
time_
+
=
delta
;
}
private
:
uint32_t
time_
;
}
;
TEST
(
RateTrackerTest
Test30FPS
)
{
RateTrackerForTest
tracker
;
for
(
int
i
=
0
;
i
<
300
;
+
+
i
)
{
tracker
.
AddSamples
(
1
)
;
tracker
.
AdvanceTime
(
33
)
;
if
(
i
%
3
=
=
0
)
{
tracker
.
AdvanceTime
(
1
)
;
}
}
EXPECT_DOUBLE_EQ
(
30
.
0
tracker
.
ComputeRateForInterval
(
50000u
)
)
;
}
TEST
(
RateTrackerTest
Test60FPS
)
{
RateTrackerForTest
tracker
;
for
(
int
i
=
0
;
i
<
300
;
+
+
i
)
{
tracker
.
AddSamples
(
1
)
;
tracker
.
AdvanceTime
(
16
)
;
if
(
i
%
3
!
=
0
)
{
tracker
.
AdvanceTime
(
1
)
;
}
}
EXPECT_DOUBLE_EQ
(
60
.
0
tracker
.
ComputeRateForInterval
(
1000u
)
)
;
}
TEST
(
RateTrackerTest
TestRateTrackerBasics
)
{
RateTrackerForTest
tracker
;
EXPECT_DOUBLE_EQ
(
0
.
0
tracker
.
ComputeRateForInterval
(
1000u
)
)
;
tracker
.
AddSamples
(
1234
)
;
tracker
.
AdvanceTime
(
100
)
;
EXPECT_DOUBLE_EQ
(
12340
.
0
tracker
.
ComputeRateForInterval
(
1000u
)
)
;
EXPECT_DOUBLE_EQ
(
12340
.
0
tracker
.
ComputeRate
(
)
)
;
EXPECT_EQ
(
1234U
tracker
.
TotalSampleCount
(
)
)
;
EXPECT_DOUBLE_EQ
(
12340
.
0
tracker
.
ComputeTotalRate
(
)
)
;
tracker
.
AddSamples
(
1234
)
;
tracker
.
AdvanceTime
(
100
)
;
EXPECT_DOUBLE_EQ
(
12340
.
0
tracker
.
ComputeRateForInterval
(
1000u
)
)
;
EXPECT_DOUBLE_EQ
(
12340
.
0
tracker
.
ComputeRate
(
)
)
;
EXPECT_EQ
(
1234U
*
2
tracker
.
TotalSampleCount
(
)
)
;
EXPECT_DOUBLE_EQ
(
12340
.
0
tracker
.
ComputeTotalRate
(
)
)
;
tracker
.
AdvanceTime
(
800
)
;
EXPECT_DOUBLE_EQ
(
1234
.
0
*
2
.
0
tracker
.
ComputeRateForInterval
(
1000u
)
)
;
EXPECT_DOUBLE_EQ
(
1234
.
0
*
2
.
0
tracker
.
ComputeRate
(
)
)
;
EXPECT_EQ
(
1234U
*
2
tracker
.
TotalSampleCount
(
)
)
;
EXPECT_DOUBLE_EQ
(
1234
.
0
*
2
.
0
tracker
.
ComputeTotalRate
(
)
)
;
EXPECT_DOUBLE_EQ
(
1234
.
0
*
2
.
0
tracker
.
ComputeRateForInterval
(
1000u
)
)
;
EXPECT_DOUBLE_EQ
(
1234
.
0
*
2
.
0
tracker
.
ComputeRate
(
)
)
;
EXPECT_EQ
(
1234U
*
2
tracker
.
TotalSampleCount
(
)
)
;
EXPECT_DOUBLE_EQ
(
1234
.
0
*
2
.
0
tracker
.
ComputeTotalRate
(
)
)
;
tracker
.
AdvanceTime
(
1000
)
;
EXPECT_DOUBLE_EQ
(
0
.
0
tracker
.
ComputeRateForInterval
(
1000u
)
)
;
EXPECT_DOUBLE_EQ
(
0
.
0
tracker
.
ComputeRate
(
)
)
;
EXPECT_EQ
(
1234U
*
2
tracker
.
TotalSampleCount
(
)
)
;
EXPECT_DOUBLE_EQ
(
1234
.
0
tracker
.
ComputeTotalRate
(
)
)
;
for
(
int
i
=
0
;
i
<
5500
;
i
+
=
100
)
{
tracker
.
AddSamples
(
9876U
)
;
tracker
.
AdvanceTime
(
100
)
;
}
EXPECT_DOUBLE_EQ
(
9876
.
0
*
10
.
0
tracker
.
ComputeRateForInterval
(
1000u
)
)
;
EXPECT_DOUBLE_EQ
(
9876
.
0
*
10
.
0
tracker
.
ComputeRate
(
)
)
;
EXPECT_EQ
(
1234U
*
2
+
9876U
*
55
tracker
.
TotalSampleCount
(
)
)
;
EXPECT_DOUBLE_EQ
(
(
1234
.
0
*
2
.
0
+
9876
.
0
*
55
.
0
)
/
7
.
5
tracker
.
ComputeTotalRate
(
)
)
;
tracker
.
AdvanceTime
(
500
)
;
EXPECT_DOUBLE_EQ
(
9876
.
0
*
5
.
0
tracker
.
ComputeRateForInterval
(
1000u
)
)
;
EXPECT_DOUBLE_EQ
(
9876
.
0
*
5
.
0
tracker
.
ComputeRate
(
)
)
;
EXPECT_EQ
(
1234U
*
2
+
9876U
*
55
tracker
.
TotalSampleCount
(
)
)
;
EXPECT_DOUBLE_EQ
(
(
1234
.
0
*
2
.
0
+
9876
.
0
*
55
.
0
)
/
8
.
0
tracker
.
ComputeTotalRate
(
)
)
;
EXPECT_DOUBLE_EQ
(
0
.
0
tracker
.
ComputeRateForInterval
(
500u
)
)
;
}
TEST
(
RateTrackerTest
TestLongPeriodBetweenSamples
)
{
RateTrackerForTest
tracker
;
tracker
.
AddSamples
(
1
)
;
tracker
.
AdvanceTime
(
1000
)
;
EXPECT_DOUBLE_EQ
(
1
.
0
tracker
.
ComputeRate
(
)
)
;
tracker
.
AdvanceTime
(
2000
)
;
EXPECT_DOUBLE_EQ
(
0
.
0
tracker
.
ComputeRate
(
)
)
;
tracker
.
AdvanceTime
(
2000
)
;
tracker
.
AddSamples
(
1
)
;
EXPECT_DOUBLE_EQ
(
1
.
0
tracker
.
ComputeRate
(
)
)
;
}
TEST
(
RateTrackerTest
TestRolloff
)
{
RateTrackerForTest
tracker
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
tracker
.
AddSamples
(
1U
)
;
tracker
.
AdvanceTime
(
100
)
;
}
EXPECT_DOUBLE_EQ
(
10
.
0
tracker
.
ComputeRate
(
)
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
tracker
.
AddSamples
(
1U
)
;
tracker
.
AdvanceTime
(
50
)
;
}
EXPECT_DOUBLE_EQ
(
15
.
0
tracker
.
ComputeRate
(
)
)
;
EXPECT_DOUBLE_EQ
(
20
.
0
tracker
.
ComputeRateForInterval
(
500u
)
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
tracker
.
AddSamples
(
1U
)
;
tracker
.
AdvanceTime
(
50
)
;
}
EXPECT_DOUBLE_EQ
(
20
.
0
tracker
.
ComputeRate
(
)
)
;
}
TEST
(
RateTrackerTest
TestGetUnitSecondsAfterInitialValue
)
{
RateTrackerForTest
tracker
;
tracker
.
AddSamples
(
1234
)
;
tracker
.
AdvanceTime
(
1000
)
;
EXPECT_DOUBLE_EQ
(
1234
.
0
tracker
.
ComputeRateForInterval
(
1000u
)
)
;
}
}
