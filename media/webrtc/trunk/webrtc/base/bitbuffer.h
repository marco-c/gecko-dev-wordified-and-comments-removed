#
ifndef
WEBRTC_BASE_BITBUFFER_H_
#
define
WEBRTC_BASE_BITBUFFER_H_
#
include
<
stdint
.
h
>
#
include
<
stddef
.
h
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
namespace
rtc
{
class
BitBuffer
{
public
:
BitBuffer
(
const
uint8_t
*
bytes
size_t
byte_count
)
;
void
GetCurrentOffset
(
size_t
*
out_byte_offset
size_t
*
out_bit_offset
)
;
uint64_t
RemainingBitCount
(
)
const
;
bool
ReadUInt8
(
uint8_t
*
val
)
;
bool
ReadUInt16
(
uint16_t
*
val
)
;
bool
ReadUInt32
(
uint32_t
*
val
)
;
bool
ReadBits
(
uint32_t
*
val
size_t
bit_count
)
;
bool
PeekBits
(
uint32_t
*
val
size_t
bit_count
)
;
bool
ReadExponentialGolomb
(
uint32_t
*
val
)
;
bool
ReadSignedExponentialGolomb
(
int32_t
*
val
)
;
bool
ConsumeBytes
(
size_t
byte_count
)
;
bool
ConsumeBits
(
size_t
bit_count
)
;
bool
Seek
(
size_t
byte_offset
size_t
bit_offset
)
;
protected
:
const
uint8_t
*
const
bytes_
;
size_t
byte_count_
;
size_t
byte_offset_
;
size_t
bit_offset_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
BitBuffer
)
;
}
;
class
BitBufferWriter
:
public
BitBuffer
{
public
:
BitBufferWriter
(
uint8_t
*
bytes
size_t
byte_count
)
;
bool
WriteUInt8
(
uint8_t
val
)
;
bool
WriteUInt16
(
uint16_t
val
)
;
bool
WriteUInt32
(
uint32_t
val
)
;
bool
WriteBits
(
uint64_t
val
size_t
bit_count
)
;
bool
WriteExponentialGolomb
(
uint32_t
val
)
;
bool
WriteSignedExponentialGolomb
(
int32_t
val
)
;
private
:
uint8_t
*
const
writable_bytes_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
BitBufferWriter
)
;
}
;
}
#
endif
