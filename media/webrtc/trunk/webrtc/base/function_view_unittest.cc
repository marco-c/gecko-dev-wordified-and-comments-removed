#
include
<
memory
>
#
include
<
utility
>
#
include
"
webrtc
/
base
/
function_view
.
h
"
#
include
"
webrtc
/
base
/
gunit
.
h
"
namespace
rtc
{
namespace
{
int
CallWith33
(
rtc
:
:
FunctionView
<
int
(
int
)
>
fv
)
{
return
fv
?
fv
(
33
)
:
-
1
;
}
int
Add33
(
int
x
)
{
return
x
+
33
;
}
}
TEST
(
FunctionViewTest
ImplicitConversion
)
{
EXPECT_EQ
(
38
CallWith33
(
[
]
(
int
x
)
{
return
x
+
5
;
}
)
)
;
EXPECT_EQ
(
66
CallWith33
(
Add33
)
)
;
EXPECT_EQ
(
-
1
CallWith33
(
nullptr
)
)
;
}
TEST
(
FunctionViewTest
IntIntLambdaWithoutState
)
{
auto
f
=
[
]
(
int
x
)
{
return
x
+
1
;
}
;
EXPECT_EQ
(
18
f
(
17
)
)
;
rtc
:
:
FunctionView
<
int
(
int
)
>
fv
(
f
)
;
EXPECT_TRUE
(
fv
)
;
EXPECT_EQ
(
18
fv
(
17
)
)
;
}
TEST
(
FunctionViewTest
IntVoidLambdaWithState
)
{
int
x
=
13
;
auto
f
=
[
x
]
(
)
mutable
{
return
+
+
x
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv
(
f
)
;
EXPECT_TRUE
(
fv
)
;
EXPECT_EQ
(
14
f
(
)
)
;
EXPECT_EQ
(
15
fv
(
)
)
;
EXPECT_EQ
(
16
f
(
)
)
;
EXPECT_EQ
(
17
fv
(
)
)
;
}
TEST
(
FunctionViewTest
IntIntFunction
)
{
rtc
:
:
FunctionView
<
int
(
int
)
>
fv
(
Add33
)
;
EXPECT_TRUE
(
fv
)
;
EXPECT_EQ
(
50
fv
(
17
)
)
;
}
TEST
(
FunctionViewTest
IntIntFunctionPointer
)
{
rtc
:
:
FunctionView
<
int
(
int
)
>
fv
(
&
Add33
)
;
EXPECT_TRUE
(
fv
)
;
EXPECT_EQ
(
50
fv
(
17
)
)
;
}
TEST
(
FunctionViewTest
Null
)
{
EXPECT_FALSE
(
rtc
:
:
FunctionView
<
int
(
)
>
(
)
)
;
EXPECT_FALSE
(
rtc
:
:
FunctionView
<
int
(
)
>
(
nullptr
)
)
;
EXPECT_FALSE
(
rtc
:
:
FunctionView
<
int
(
)
>
(
reinterpret_cast
<
int
(
*
)
(
)
>
(
0
)
)
)
;
}
TEST
(
FunctionViewTest
UniquePtrPassthrough
)
{
auto
f
=
[
]
(
std
:
:
unique_ptr
<
int
>
x
)
{
return
x
;
}
;
rtc
:
:
FunctionView
<
std
:
:
unique_ptr
<
int
>
(
std
:
:
unique_ptr
<
int
>
)
>
fv
(
f
)
;
std
:
:
unique_ptr
<
int
>
x
(
new
int
)
;
int
*
x_addr
=
x
.
get
(
)
;
auto
y
=
fv
(
std
:
:
move
(
x
)
)
;
EXPECT_EQ
(
x_addr
y
.
get
(
)
)
;
}
TEST
(
FunctionViewTest
CopyConstructor
)
{
auto
f17
=
[
]
{
return
17
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv1
(
f17
)
;
rtc
:
:
FunctionView
<
int
(
)
>
fv2
(
fv1
)
;
EXPECT_EQ
(
17
fv1
(
)
)
;
EXPECT_EQ
(
17
fv2
(
)
)
;
}
TEST
(
FunctionViewTest
MoveConstructorIsCopy
)
{
auto
f17
=
[
]
{
return
17
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv1
(
f17
)
;
rtc
:
:
FunctionView
<
int
(
)
>
fv2
(
std
:
:
move
(
fv1
)
)
;
EXPECT_EQ
(
17
fv1
(
)
)
;
EXPECT_EQ
(
17
fv2
(
)
)
;
}
TEST
(
FunctionViewTest
CopyAssignment
)
{
auto
f17
=
[
]
{
return
17
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv1
(
f17
)
;
auto
f23
=
[
]
{
return
23
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv2
(
f23
)
;
EXPECT_EQ
(
17
fv1
(
)
)
;
EXPECT_EQ
(
23
fv2
(
)
)
;
fv2
=
fv1
;
EXPECT_EQ
(
17
fv1
(
)
)
;
EXPECT_EQ
(
17
fv2
(
)
)
;
}
TEST
(
FunctionViewTest
MoveAssignmentIsCopy
)
{
auto
f17
=
[
]
{
return
17
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv1
(
f17
)
;
auto
f23
=
[
]
{
return
23
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv2
(
f23
)
;
EXPECT_EQ
(
17
fv1
(
)
)
;
EXPECT_EQ
(
23
fv2
(
)
)
;
fv2
=
std
:
:
move
(
fv1
)
;
EXPECT_EQ
(
17
fv1
(
)
)
;
EXPECT_EQ
(
17
fv2
(
)
)
;
}
TEST
(
FunctionViewTest
Swap
)
{
auto
f17
=
[
]
{
return
17
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv1
(
f17
)
;
auto
f23
=
[
]
{
return
23
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv2
(
f23
)
;
EXPECT_EQ
(
17
fv1
(
)
)
;
EXPECT_EQ
(
23
fv2
(
)
)
;
using
std
:
:
swap
;
swap
(
fv1
fv2
)
;
EXPECT_EQ
(
23
fv1
(
)
)
;
EXPECT_EQ
(
17
fv2
(
)
)
;
}
TEST
(
FunctionViewTest
CopyConstructorChaining
)
{
auto
f17
=
[
]
{
return
17
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv1
(
f17
)
;
rtc
:
:
FunctionView
<
int
(
)
>
fv2
(
fv1
)
;
EXPECT_EQ
(
17
fv1
(
)
)
;
EXPECT_EQ
(
17
fv2
(
)
)
;
auto
f23
=
[
]
{
return
23
;
}
;
fv1
=
f23
;
EXPECT_EQ
(
23
fv1
(
)
)
;
EXPECT_EQ
(
17
fv2
(
)
)
;
}
TEST
(
FunctionViewTest
CopyAssignmentChaining
)
{
auto
f17
=
[
]
{
return
17
;
}
;
rtc
:
:
FunctionView
<
int
(
)
>
fv1
(
f17
)
;
rtc
:
:
FunctionView
<
int
(
)
>
fv2
;
EXPECT_TRUE
(
fv1
)
;
EXPECT_EQ
(
17
fv1
(
)
)
;
EXPECT_FALSE
(
fv2
)
;
fv2
=
fv1
;
EXPECT_EQ
(
17
fv1
(
)
)
;
EXPECT_EQ
(
17
fv2
(
)
)
;
auto
f23
=
[
]
{
return
23
;
}
;
fv1
=
f23
;
EXPECT_EQ
(
23
fv1
(
)
)
;
EXPECT_EQ
(
17
fv2
(
)
)
;
}
}
