#
ifndef
WEBRTC_BASE_TASKRUNNER_H__
#
define
WEBRTC_BASE_TASKRUNNER_H__
#
include
<
stdint
.
h
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
taskparent
.
h
"
namespace
rtc
{
class
Task
;
const
int64_t
kSecToMsec
=
1000
;
const
int64_t
kMsecTo100ns
=
10000
;
const
int64_t
kSecTo100ns
=
kSecToMsec
*
kMsecTo100ns
;
class
TaskRunner
:
public
TaskParent
public
sigslot
:
:
has_slots
<
>
{
public
:
TaskRunner
(
)
;
~
TaskRunner
(
)
override
;
virtual
void
WakeTasks
(
)
=
0
;
virtual
int64_t
CurrentTime
(
)
=
0
;
void
StartTask
(
Task
*
task
)
;
void
RunTasks
(
)
;
void
PollTasks
(
)
;
void
UpdateTaskTimeout
(
Task
*
task
int64_t
previous_task_timeout_time
)
;
#
if
RTC_DCHECK_IS_ON
bool
is_ok_to_delete
(
Task
*
task
)
{
return
task
=
=
deleting_task_
;
}
void
IncrementAbortCount
(
)
{
+
+
abort_count_
;
}
void
DecrementAbortCount
(
)
{
-
-
abort_count_
;
}
#
endif
int64_t
next_task_timeout
(
)
const
;
protected
:
virtual
void
OnTimeoutChange
(
)
{
}
private
:
void
InternalRunTasks
(
bool
in_destructor
)
;
void
CheckForTimeoutChange
(
int64_t
previous_timeout_time
)
;
std
:
:
vector
<
Task
*
>
tasks_
;
Task
*
next_timeout_task_
=
nullptr
;
bool
tasks_running_
=
false
;
#
if
RTC_DCHECK_IS_ON
int
abort_count_
=
0
;
Task
*
deleting_task_
=
nullptr
;
#
endif
void
RecalcNextTimeout
(
Task
*
exclude_task
)
;
}
;
}
#
endif
