#
ifndef
WEBRTC_BASE_OPENSSLSTREAMADAPTER_H__
#
define
WEBRTC_BASE_OPENSSLSTREAMADAPTER_H__
#
include
<
string
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
buffer
.
h
"
#
include
"
webrtc
/
base
/
sslstreamadapter
.
h
"
#
include
"
webrtc
/
base
/
opensslidentity
.
h
"
typedef
struct
ssl_st
SSL
;
typedef
struct
ssl_ctx_st
SSL_CTX
;
typedef
struct
ssl_cipher_st
SSL_CIPHER
;
typedef
struct
x509_store_ctx_st
X509_STORE_CTX
;
namespace
rtc
{
class
OpenSSLIdentity
;
class
OpenSSLStreamAdapter
:
public
SSLStreamAdapter
{
public
:
explicit
OpenSSLStreamAdapter
(
StreamInterface
*
stream
)
;
~
OpenSSLStreamAdapter
(
)
override
;
void
SetIdentity
(
SSLIdentity
*
identity
)
override
;
void
SetServerRole
(
SSLRole
role
=
SSL_SERVER
)
override
;
bool
SetPeerCertificateDigest
(
const
std
:
:
string
&
digest_alg
const
unsigned
char
*
digest_val
size_t
digest_len
SSLPeerCertificateDigestError
*
error
=
nullptr
)
override
;
std
:
:
unique_ptr
<
SSLCertificate
>
GetPeerCertificate
(
)
const
override
;
int
StartSSL
(
)
override
;
void
SetMode
(
SSLMode
mode
)
override
;
void
SetMaxProtocolVersion
(
SSLProtocolVersion
version
)
override
;
StreamResult
Read
(
void
*
data
size_t
data_len
size_t
*
read
int
*
error
)
override
;
StreamResult
Write
(
const
void
*
data
size_t
data_len
size_t
*
written
int
*
error
)
override
;
void
Close
(
)
override
;
StreamState
GetState
(
)
const
override
;
static
std
:
:
string
SslCipherSuiteToName
(
int
crypto_suite
)
;
bool
GetSslCipherSuite
(
int
*
cipher
)
override
;
int
GetSslVersion
(
)
const
override
;
bool
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8_t
*
context
size_t
context_len
bool
use_context
uint8_t
*
result
size_t
result_len
)
override
;
bool
SetDtlsSrtpCryptoSuites
(
const
std
:
:
vector
<
int
>
&
crypto_suites
)
override
;
bool
GetDtlsSrtpCryptoSuite
(
int
*
crypto_suite
)
override
;
bool
IsTlsConnected
(
)
override
;
static
bool
HaveDtls
(
)
;
static
bool
HaveDtlsSrtp
(
)
;
static
bool
HaveExporter
(
)
;
static
bool
IsBoringSsl
(
)
;
static
bool
IsAcceptableCipher
(
int
cipher
KeyType
key_type
)
;
static
bool
IsAcceptableCipher
(
const
std
:
:
string
&
cipher
KeyType
key_type
)
;
static
void
enable_time_callback_for_testing
(
)
;
protected
:
void
OnEvent
(
StreamInterface
*
stream
int
events
int
err
)
override
;
private
:
enum
SSLState
{
SSL_NONE
SSL_WAIT
SSL_CONNECTING
SSL_CONNECTED
SSL_ERROR
SSL_CLOSED
}
;
enum
{
MSG_TIMEOUT
=
MSG_MAX
+
1
}
;
int
BeginSSL
(
)
;
int
ContinueSSL
(
)
;
void
Error
(
const
char
*
context
int
err
uint8_t
alert
bool
signal
)
;
void
Cleanup
(
uint8_t
alert
)
;
void
OnMessage
(
Message
*
msg
)
override
;
void
FlushInput
(
unsigned
int
left
)
;
SSL_CTX
*
SetupSSLContext
(
)
;
bool
VerifyPeerCertificate
(
)
;
static
int
SSLVerifyCallback
(
int
ok
X509_STORE_CTX
*
store
)
;
bool
waiting_to_verify_peer_certificate
(
)
const
{
return
client_auth_enabled
(
)
&
&
!
peer_certificate_verified_
;
}
bool
has_peer_certificate_digest
(
)
const
{
return
!
peer_certificate_digest_algorithm_
.
empty
(
)
&
&
!
peer_certificate_digest_value_
.
empty
(
)
;
}
SSLState
state_
;
SSLRole
role_
;
int
ssl_error_code_
;
bool
ssl_read_needs_write_
;
bool
ssl_write_needs_read_
;
SSL
*
ssl_
;
SSL_CTX
*
ssl_ctx_
;
std
:
:
unique_ptr
<
OpenSSLIdentity
>
identity_
;
std
:
:
unique_ptr
<
OpenSSLCertificate
>
peer_certificate_
;
bool
peer_certificate_verified_
=
false
;
Buffer
peer_certificate_digest_value_
;
std
:
:
string
peer_certificate_digest_algorithm_
;
std
:
:
string
srtp_ciphers_
;
SSLMode
ssl_mode_
;
SSLProtocolVersion
ssl_max_version_
;
}
;
}
#
endif
