#
ifndef
WEBRTC_BASE_SSLSTREAMADAPTER_H_
#
define
WEBRTC_BASE_SSLSTREAMADAPTER_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
stream
.
h
"
#
include
"
webrtc
/
base
/
sslidentity
.
h
"
namespace
rtc
{
const
int
TLS_NULL_WITH_NULL_NULL
=
0
;
const
int
SRTP_INVALID_CRYPTO_SUITE
=
0
;
const
int
SRTP_AES128_CM_SHA1_80
=
0x0001
;
const
int
SRTP_AES128_CM_SHA1_32
=
0x0002
;
extern
const
char
CS_AES_CM_128_HMAC_SHA1_80
[
]
;
extern
const
char
CS_AES_CM_128_HMAC_SHA1_32
[
]
;
std
:
:
string
SrtpCryptoSuiteToName
(
int
crypto_suite
)
;
int
SrtpCryptoSuiteFromName
(
const
std
:
:
string
&
crypto_suite
)
;
enum
SSLRole
{
SSL_CLIENT
SSL_SERVER
}
;
enum
SSLMode
{
SSL_MODE_TLS
SSL_MODE_DTLS
}
;
enum
SSLProtocolVersion
{
SSL_PROTOCOL_TLS_10
SSL_PROTOCOL_TLS_11
SSL_PROTOCOL_TLS_12
SSL_PROTOCOL_DTLS_10
=
SSL_PROTOCOL_TLS_11
SSL_PROTOCOL_DTLS_12
=
SSL_PROTOCOL_TLS_12
}
;
enum
{
SSE_MSG_TRUNC
=
0xff0001
}
;
class
SSLStreamAdapter
:
public
StreamAdapterInterface
{
public
:
static
SSLStreamAdapter
*
Create
(
StreamInterface
*
stream
)
;
explicit
SSLStreamAdapter
(
StreamInterface
*
stream
)
:
StreamAdapterInterface
(
stream
)
ignore_bad_cert_
(
false
)
client_auth_enabled_
(
true
)
{
}
void
set_ignore_bad_cert
(
bool
ignore
)
{
ignore_bad_cert_
=
ignore
;
}
bool
ignore_bad_cert
(
)
const
{
return
ignore_bad_cert_
;
}
void
set_client_auth_enabled
(
bool
enabled
)
{
client_auth_enabled_
=
enabled
;
}
bool
client_auth_enabled
(
)
const
{
return
client_auth_enabled_
;
}
virtual
void
SetIdentity
(
SSLIdentity
*
identity
)
=
0
;
virtual
void
SetServerRole
(
SSLRole
role
=
SSL_SERVER
)
=
0
;
virtual
void
SetMode
(
SSLMode
mode
)
=
0
;
virtual
void
SetMaxProtocolVersion
(
SSLProtocolVersion
version
)
=
0
;
virtual
int
StartSSLWithServer
(
const
char
*
server_name
)
=
0
;
virtual
int
StartSSLWithPeer
(
)
=
0
;
virtual
bool
SetPeerCertificateDigest
(
const
std
:
:
string
&
digest_alg
const
unsigned
char
*
digest_val
size_t
digest_len
)
=
0
;
virtual
bool
GetPeerCertificate
(
SSLCertificate
*
*
cert
)
const
=
0
;
virtual
bool
GetSslCipherSuite
(
int
*
cipher_suite
)
;
virtual
bool
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8_t
*
context
size_t
context_len
bool
use_context
uint8_t
*
result
size_t
result_len
)
;
virtual
bool
SetDtlsSrtpCryptoSuites
(
const
std
:
:
vector
<
int
>
&
crypto_suites
)
;
virtual
bool
GetDtlsSrtpCryptoSuite
(
int
*
crypto_suite
)
;
static
bool
HaveDtls
(
)
;
static
bool
HaveDtlsSrtp
(
)
;
static
bool
HaveExporter
(
)
;
static
int
GetDefaultSslCipherForTest
(
SSLProtocolVersion
version
KeyType
key_type
)
;
static
std
:
:
string
SslCipherSuiteToName
(
int
cipher_suite
)
;
private
:
bool
ignore_bad_cert_
;
bool
client_auth_enabled_
;
}
;
}
#
endif
