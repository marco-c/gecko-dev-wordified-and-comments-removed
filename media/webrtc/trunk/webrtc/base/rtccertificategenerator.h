#
ifndef
WEBRTC_BASE_RTCCERTIFICATEGENERATOR_H_
#
define
WEBRTC_BASE_RTCCERTIFICATEGENERATOR_H_
#
include
"
webrtc
/
base
/
optional
.
h
"
#
include
"
webrtc
/
base
/
refcount
.
h
"
#
include
"
webrtc
/
base
/
rtccertificate
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
base
/
sslidentity
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
namespace
rtc
{
class
RTCCertificateGeneratorCallback
:
public
RefCountInterface
{
public
:
virtual
void
OnSuccess
(
const
scoped_refptr
<
RTCCertificate
>
&
certificate
)
=
0
;
virtual
void
OnFailure
(
)
=
0
;
protected
:
~
RTCCertificateGeneratorCallback
(
)
override
{
}
}
;
class
RTCCertificateGeneratorInterface
{
public
:
virtual
~
RTCCertificateGeneratorInterface
(
)
{
}
virtual
void
GenerateCertificateAsync
(
const
KeyParams
&
key_params
const
Optional
<
uint64_t
>
&
expires_ms
const
scoped_refptr
<
RTCCertificateGeneratorCallback
>
&
callback
)
=
0
;
}
;
class
RTCCertificateGenerator
:
public
RTCCertificateGeneratorInterface
{
public
:
static
scoped_refptr
<
RTCCertificate
>
GenerateCertificate
(
const
KeyParams
&
key_params
const
Optional
<
uint64_t
>
&
expires_ms
)
;
RTCCertificateGenerator
(
Thread
*
signaling_thread
Thread
*
worker_thread
)
;
~
RTCCertificateGenerator
(
)
override
{
}
void
GenerateCertificateAsync
(
const
KeyParams
&
key_params
const
Optional
<
uint64_t
>
&
expires_ms
const
scoped_refptr
<
RTCCertificateGeneratorCallback
>
&
callback
)
override
;
private
:
Thread
*
const
signaling_thread_
;
Thread
*
const
worker_thread_
;
}
;
}
#
endif
