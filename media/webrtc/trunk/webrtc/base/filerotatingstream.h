#
ifndef
WEBRTC_BASE_FILEROTATINGSTREAM_H_
#
define
WEBRTC_BASE_FILEROTATINGSTREAM_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
stream
.
h
"
namespace
rtc
{
class
FileRotatingStream
:
public
StreamInterface
{
public
:
FileRotatingStream
(
const
std
:
:
string
&
dir_path
const
std
:
:
string
&
file_prefix
)
;
FileRotatingStream
(
const
std
:
:
string
&
dir_path
const
std
:
:
string
&
file_prefix
size_t
max_file_size
size_t
num_files
)
;
~
FileRotatingStream
(
)
override
;
StreamState
GetState
(
)
const
override
;
StreamResult
Read
(
void
*
buffer
size_t
buffer_len
size_t
*
read
int
*
error
)
override
;
StreamResult
Write
(
const
void
*
data
size_t
data_len
size_t
*
written
int
*
error
)
override
;
bool
Flush
(
)
override
;
bool
GetSize
(
size_t
*
size
)
const
override
;
void
Close
(
)
override
;
bool
Open
(
)
;
bool
DisableBuffering
(
)
;
std
:
:
string
GetFilePath
(
size_t
index
)
const
;
size_t
GetNumFiles
(
)
{
return
file_names_
.
size
(
)
;
}
protected
:
size_t
GetMaxFileSize
(
)
const
{
return
max_file_size_
;
}
void
SetMaxFileSize
(
size_t
size
)
{
max_file_size_
=
size
;
}
size_t
GetRotationIndex
(
)
const
{
return
rotation_index_
;
}
void
SetRotationIndex
(
size_t
index
)
{
rotation_index_
=
index
;
}
virtual
void
OnRotation
(
)
{
}
private
:
enum
Mode
{
kRead
kWrite
}
;
FileRotatingStream
(
const
std
:
:
string
&
dir_path
const
std
:
:
string
&
file_prefix
size_t
max_file_size
size_t
num_files
Mode
mode
)
;
bool
OpenCurrentFile
(
)
;
void
CloseCurrentFile
(
)
;
void
RotateFiles
(
)
;
std
:
:
vector
<
std
:
:
string
>
GetFilesWithPrefix
(
)
const
;
std
:
:
string
GetFilePath
(
size_t
index
size_t
num_files
)
const
;
const
std
:
:
string
dir_path_
;
const
std
:
:
string
file_prefix_
;
const
Mode
mode_
;
std
:
:
unique_ptr
<
FileStream
>
file_stream_
;
std
:
:
vector
<
std
:
:
string
>
file_names_
;
size_t
max_file_size_
;
size_t
current_file_index_
;
size_t
rotation_index_
;
size_t
current_bytes_written_
;
bool
disable_buffering_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
FileRotatingStream
)
;
}
;
class
CallSessionFileRotatingStream
:
public
FileRotatingStream
{
public
:
explicit
CallSessionFileRotatingStream
(
const
std
:
:
string
&
dir_path
)
;
CallSessionFileRotatingStream
(
const
std
:
:
string
&
dir_path
size_t
max_total_log_size
)
;
~
CallSessionFileRotatingStream
(
)
override
{
}
protected
:
void
OnRotation
(
)
override
;
private
:
static
size_t
GetRotatingLogSize
(
size_t
max_total_log_size
)
;
static
size_t
GetNumRotatingLogFiles
(
size_t
max_total_log_size
)
;
static
const
char
*
kLogPrefix
;
static
const
size_t
kRotatingLogFileDefaultSize
;
const
size_t
max_total_log_size_
;
size_t
num_rotations_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
CallSessionFileRotatingStream
)
;
}
;
}
#
endif
