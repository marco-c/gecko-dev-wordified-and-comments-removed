#
ifndef
WEBRTC_BASE_NSSSTREAMADAPTER_H_
#
define
WEBRTC_BASE_NSSSTREAMADAPTER_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
nspr
.
h
"
#
include
"
nss
.
h
"
#
include
"
secmodt
.
h
"
#
include
"
webrtc
/
base
/
buffer
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
nssidentity
.
h
"
#
include
"
webrtc
/
base
/
ssladapter
.
h
"
#
include
"
webrtc
/
base
/
sslstreamadapter
.
h
"
#
include
"
webrtc
/
base
/
sslstreamadapterhelper
.
h
"
namespace
rtc
{
class
NSSContext
{
public
:
explicit
NSSContext
(
PK11SlotInfo
*
slot
)
:
slot_
(
slot
)
{
}
~
NSSContext
(
)
{
}
static
PK11SlotInfo
*
GetSlot
(
)
{
return
Instance
(
)
?
Instance
(
)
-
>
slot_
:
NULL
;
}
static
NSSContext
*
Instance
(
)
;
static
bool
InitializeSSL
(
VerificationCallback
callback
)
;
static
bool
InitializeSSLThread
(
)
;
static
bool
CleanupSSL
(
)
;
private
:
PK11SlotInfo
*
slot_
;
static
GlobalLockPod
lock
;
static
NSSContext
*
global_nss_context
;
}
;
class
NSSStreamAdapter
:
public
SSLStreamAdapterHelper
{
public
:
explicit
NSSStreamAdapter
(
StreamInterface
*
stream
)
;
~
NSSStreamAdapter
(
)
override
;
bool
Init
(
)
;
StreamResult
Read
(
void
*
data
size_t
data_len
size_t
*
read
int
*
error
)
override
;
StreamResult
Write
(
const
void
*
data
size_t
data_len
size_t
*
written
int
*
error
)
override
;
void
OnMessage
(
Message
*
msg
)
override
;
bool
GetSslCipher
(
std
:
:
string
*
cipher
)
override
;
bool
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8
*
context
size_t
context_len
bool
use_context
uint8
*
result
size_t
result_len
)
override
;
bool
SetDtlsSrtpCiphers
(
const
std
:
:
vector
<
std
:
:
string
>
&
ciphers
)
override
;
bool
GetDtlsSrtpCipher
(
std
:
:
string
*
cipher
)
override
;
static
bool
HaveDtls
(
)
;
static
bool
HaveDtlsSrtp
(
)
;
static
bool
HaveExporter
(
)
;
static
std
:
:
string
GetDefaultSslCipher
(
)
;
protected
:
void
OnEvent
(
StreamInterface
*
stream
int
events
int
err
)
override
;
int
BeginSSL
(
)
override
;
void
Cleanup
(
)
override
;
bool
GetDigestLength
(
const
std
:
:
string
&
algorithm
size_t
*
length
)
override
;
private
:
int
ContinueSSL
(
)
;
static
SECStatus
AuthCertificateHook
(
void
*
arg
PRFileDesc
*
fd
PRBool
checksig
PRBool
isServer
)
;
static
SECStatus
GetClientAuthDataHook
(
void
*
arg
PRFileDesc
*
fd
CERTDistNames
*
caNames
CERTCertificate
*
*
pRetCert
SECKEYPrivateKey
*
*
pRetKey
)
;
PRFileDesc
*
ssl_fd_
;
static
bool
initialized
;
bool
cert_ok_
;
std
:
:
vector
<
PRUint16
>
srtp_ciphers_
;
static
PRDescIdentity
nspr_layer_identity
;
}
;
}
#
endif
