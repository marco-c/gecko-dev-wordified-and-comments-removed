#
if
HAVE_CONFIG_H
#
include
"
config
.
h
"
#
endif
#
include
"
webrtc
/
base
/
sslstreamadapter
.
h
"
#
include
"
webrtc
/
base
/
sslconfig
.
h
"
#
if
SSL_USE_OPENSSL
#
include
"
webrtc
/
base
/
opensslstreamadapter
.
h
"
#
endif
namespace
rtc
{
const
char
CS_AES_CM_128_HMAC_SHA1_80
[
]
=
"
AES_CM_128_HMAC_SHA1_80
"
;
const
char
CS_AES_CM_128_HMAC_SHA1_32
[
]
=
"
AES_CM_128_HMAC_SHA1_32
"
;
std
:
:
string
SrtpCryptoSuiteToName
(
int
crypto_suite
)
{
if
(
crypto_suite
=
=
SRTP_AES128_CM_SHA1_32
)
return
CS_AES_CM_128_HMAC_SHA1_32
;
if
(
crypto_suite
=
=
SRTP_AES128_CM_SHA1_80
)
return
CS_AES_CM_128_HMAC_SHA1_80
;
return
std
:
:
string
(
)
;
}
int
SrtpCryptoSuiteFromName
(
const
std
:
:
string
&
crypto_suite
)
{
if
(
crypto_suite
=
=
CS_AES_CM_128_HMAC_SHA1_32
)
return
SRTP_AES128_CM_SHA1_32
;
if
(
crypto_suite
=
=
CS_AES_CM_128_HMAC_SHA1_80
)
return
SRTP_AES128_CM_SHA1_80
;
return
SRTP_INVALID_CRYPTO_SUITE
;
}
SSLStreamAdapter
*
SSLStreamAdapter
:
:
Create
(
StreamInterface
*
stream
)
{
#
if
SSL_USE_OPENSSL
return
new
OpenSSLStreamAdapter
(
stream
)
;
#
else
return
NULL
;
#
endif
}
bool
SSLStreamAdapter
:
:
GetSslCipherSuite
(
int
*
cipher_suite
)
{
return
false
;
}
bool
SSLStreamAdapter
:
:
ExportKeyingMaterial
(
const
std
:
:
string
&
label
const
uint8_t
*
context
size_t
context_len
bool
use_context
uint8_t
*
result
size_t
result_len
)
{
return
false
;
}
bool
SSLStreamAdapter
:
:
SetDtlsSrtpCryptoSuites
(
const
std
:
:
vector
<
int
>
&
crypto_suites
)
{
return
false
;
}
bool
SSLStreamAdapter
:
:
GetDtlsSrtpCryptoSuite
(
int
*
crypto_suite
)
{
return
false
;
}
#
if
SSL_USE_OPENSSL
bool
SSLStreamAdapter
:
:
HaveDtls
(
)
{
return
OpenSSLStreamAdapter
:
:
HaveDtls
(
)
;
}
bool
SSLStreamAdapter
:
:
HaveDtlsSrtp
(
)
{
return
OpenSSLStreamAdapter
:
:
HaveDtlsSrtp
(
)
;
}
bool
SSLStreamAdapter
:
:
HaveExporter
(
)
{
return
OpenSSLStreamAdapter
:
:
HaveExporter
(
)
;
}
int
SSLStreamAdapter
:
:
GetDefaultSslCipherForTest
(
SSLProtocolVersion
version
KeyType
key_type
)
{
return
OpenSSLStreamAdapter
:
:
GetDefaultSslCipherForTest
(
version
key_type
)
;
}
std
:
:
string
SSLStreamAdapter
:
:
SslCipherSuiteToName
(
int
cipher_suite
)
{
return
OpenSSLStreamAdapter
:
:
SslCipherSuiteToName
(
cipher_suite
)
;
}
#
endif
}
