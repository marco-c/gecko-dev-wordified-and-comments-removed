#
ifndef
WEBRTC_BASE_RATETRACKER_H_
#
define
WEBRTC_BASE_RATETRACKER_H_
#
include
<
stdlib
.
h
>
#
include
"
webrtc
/
base
/
basictypes
.
h
"
namespace
rtc
{
class
RateTracker
{
public
:
RateTracker
(
int64_t
bucket_milliseconds
size_t
bucket_count
)
;
virtual
~
RateTracker
(
)
;
double
ComputeRateForInterval
(
int64_t
interval_milliseconds
)
const
;
double
ComputeRate
(
)
const
{
return
ComputeRateForInterval
(
bucket_milliseconds_
*
static_cast
<
int64_t
>
(
bucket_count_
)
)
;
}
double
ComputeTotalRate
(
)
const
;
size_t
TotalSampleCount
(
)
const
;
void
AddSamples
(
size_t
sample_count
)
;
protected
:
virtual
int64_t
Time
(
)
const
;
private
:
void
EnsureInitialized
(
)
;
size_t
NextBucketIndex
(
size_t
bucket_index
)
const
;
const
int64_t
bucket_milliseconds_
;
const
size_t
bucket_count_
;
size_t
*
sample_buckets_
;
size_t
total_sample_count_
;
size_t
current_bucket_
;
int64_t
bucket_start_time_milliseconds_
;
int64_t
initialization_time_milliseconds_
;
}
;
}
#
endif
