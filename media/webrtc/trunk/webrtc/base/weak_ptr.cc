#
include
"
webrtc
/
base
/
weak_ptr
.
h
"
namespace
rtc
{
namespace
internal
{
WeakReference
:
:
Flag
:
:
Flag
(
)
:
is_valid_
(
true
)
{
checker_
.
Detach
(
)
;
}
void
WeakReference
:
:
Flag
:
:
Invalidate
(
)
{
RTC_DCHECK
(
checker_
.
CalledSequentially
(
)
)
<
<
"
WeakPtrs
must
be
invalidated
on
the
same
sequence
.
"
;
is_valid_
=
false
;
}
bool
WeakReference
:
:
Flag
:
:
IsValid
(
)
const
{
RTC_DCHECK
(
checker_
.
CalledSequentially
(
)
)
<
<
"
WeakPtrs
must
be
checked
on
the
same
sequence
.
"
;
return
is_valid_
;
}
WeakReference
:
:
Flag
:
:
~
Flag
(
)
{
}
WeakReference
:
:
WeakReference
(
)
{
}
WeakReference
:
:
WeakReference
(
const
Flag
*
flag
)
:
flag_
(
flag
)
{
}
WeakReference
:
:
~
WeakReference
(
)
{
}
WeakReference
:
:
WeakReference
(
WeakReference
&
&
other
)
=
default
;
WeakReference
:
:
WeakReference
(
const
WeakReference
&
other
)
=
default
;
bool
WeakReference
:
:
is_valid
(
)
const
{
return
flag_
.
get
(
)
&
&
flag_
-
>
IsValid
(
)
;
}
WeakReferenceOwner
:
:
WeakReferenceOwner
(
)
{
checker_
.
Detach
(
)
;
}
WeakReferenceOwner
:
:
~
WeakReferenceOwner
(
)
{
RTC_DCHECK
(
checker_
.
CalledSequentially
(
)
)
;
Invalidate
(
)
;
}
WeakReference
WeakReferenceOwner
:
:
GetRef
(
)
const
{
RTC_DCHECK
(
checker_
.
CalledSequentially
(
)
)
;
if
(
!
HasRefs
(
)
)
flag_
=
new
RefCountedObject
<
WeakReference
:
:
Flag
>
(
)
;
return
WeakReference
(
flag_
.
get
(
)
)
;
}
void
WeakReferenceOwner
:
:
Invalidate
(
)
{
RTC_DCHECK
(
checker_
.
CalledSequentially
(
)
)
;
if
(
flag_
.
get
(
)
)
{
flag_
-
>
Invalidate
(
)
;
flag_
=
NULL
;
}
}
WeakPtrBase
:
:
WeakPtrBase
(
)
{
}
WeakPtrBase
:
:
~
WeakPtrBase
(
)
{
}
WeakPtrBase
:
:
WeakPtrBase
(
const
WeakReference
&
ref
)
:
ref_
(
ref
)
{
}
}
}
