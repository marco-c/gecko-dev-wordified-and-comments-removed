#
ifndef
WEBRTC_BASE_PHYSICALSOCKETSERVER_H__
#
define
WEBRTC_BASE_PHYSICALSOCKETSERVER_H__
#
include
<
memory
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
nethelpers
.
h
"
#
include
"
webrtc
/
base
/
socketserver
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
if
defined
(
WEBRTC_POSIX
)
typedef
int
SOCKET
;
#
endif
namespace
rtc
{
enum
DispatcherEvent
{
DE_READ
=
0x0001
DE_WRITE
=
0x0002
DE_CONNECT
=
0x0004
DE_CLOSE
=
0x0008
DE_ACCEPT
=
0x0010
}
;
class
Signaler
;
#
if
defined
(
WEBRTC_POSIX
)
class
PosixSignalDispatcher
;
#
endif
class
Dispatcher
{
public
:
virtual
~
Dispatcher
(
)
{
}
virtual
uint32_t
GetRequestedEvents
(
)
=
0
;
virtual
void
OnPreEvent
(
uint32_t
ff
)
=
0
;
virtual
void
OnEvent
(
uint32_t
ff
int
err
)
=
0
;
#
if
defined
(
WEBRTC_WIN
)
virtual
WSAEVENT
GetWSAEvent
(
)
=
0
;
virtual
SOCKET
GetSocket
(
)
=
0
;
virtual
bool
CheckSignalClose
(
)
=
0
;
#
elif
defined
(
WEBRTC_POSIX
)
virtual
int
GetDescriptor
(
)
=
0
;
virtual
bool
IsDescriptorClosed
(
)
=
0
;
#
endif
}
;
class
PhysicalSocketServer
:
public
SocketServer
{
public
:
PhysicalSocketServer
(
)
;
~
PhysicalSocketServer
(
)
override
;
Socket
*
CreateSocket
(
int
type
)
override
;
Socket
*
CreateSocket
(
int
family
int
type
)
override
;
AsyncSocket
*
CreateAsyncSocket
(
int
type
)
override
;
AsyncSocket
*
CreateAsyncSocket
(
int
family
int
type
)
override
;
virtual
AsyncSocket
*
WrapSocket
(
SOCKET
s
)
;
bool
Wait
(
int
cms
bool
process_io
)
override
;
void
WakeUp
(
)
override
;
void
Add
(
Dispatcher
*
dispatcher
)
;
void
Remove
(
Dispatcher
*
dispatcher
)
;
#
if
defined
(
WEBRTC_POSIX
)
virtual
bool
SetPosixSignalHandler
(
int
signum
void
(
*
handler
)
(
int
)
)
;
protected
:
Dispatcher
*
signal_dispatcher
(
)
;
#
endif
private
:
typedef
std
:
:
vector
<
Dispatcher
*
>
DispatcherList
;
typedef
std
:
:
vector
<
size_t
*
>
IteratorList
;
#
if
defined
(
WEBRTC_POSIX
)
static
bool
InstallSignal
(
int
signum
void
(
*
handler
)
(
int
)
)
;
std
:
:
unique_ptr
<
PosixSignalDispatcher
>
signal_dispatcher_
;
#
endif
DispatcherList
dispatchers_
;
IteratorList
iterators_
;
Signaler
*
signal_wakeup_
;
CriticalSection
crit_
;
bool
fWait_
;
#
if
defined
(
WEBRTC_WIN
)
WSAEVENT
socket_ev_
;
#
endif
}
;
class
PhysicalSocket
:
public
AsyncSocket
public
sigslot
:
:
has_slots
<
>
{
public
:
PhysicalSocket
(
PhysicalSocketServer
*
ss
SOCKET
s
=
INVALID_SOCKET
)
;
~
PhysicalSocket
(
)
override
;
virtual
bool
Create
(
int
family
int
type
)
;
SocketAddress
GetLocalAddress
(
)
const
override
;
SocketAddress
GetRemoteAddress
(
)
const
override
;
int
Bind
(
const
SocketAddress
&
bind_addr
)
override
;
int
Connect
(
const
SocketAddress
&
addr
)
override
;
int
GetError
(
)
const
override
;
void
SetError
(
int
error
)
override
;
ConnState
GetState
(
)
const
override
;
int
GetOption
(
Option
opt
int
*
value
)
override
;
int
SetOption
(
Option
opt
int
value
)
override
;
int
Send
(
const
void
*
pv
size_t
cb
)
override
;
int
SendTo
(
const
void
*
buffer
size_t
length
const
SocketAddress
&
addr
)
override
;
int
Recv
(
void
*
buffer
size_t
length
int64_t
*
timestamp
)
override
;
int
RecvFrom
(
void
*
buffer
size_t
length
SocketAddress
*
out_addr
int64_t
*
timestamp
)
override
;
int
Listen
(
int
backlog
)
override
;
AsyncSocket
*
Accept
(
SocketAddress
*
out_addr
)
override
;
int
Close
(
)
override
;
int
EstimateMTU
(
uint16_t
*
mtu
)
override
;
SocketServer
*
socketserver
(
)
{
return
ss_
;
}
protected
:
int
DoConnect
(
const
SocketAddress
&
connect_addr
)
;
virtual
SOCKET
DoAccept
(
SOCKET
socket
sockaddr
*
addr
socklen_t
*
addrlen
)
;
virtual
int
DoSend
(
SOCKET
socket
const
char
*
buf
int
len
int
flags
)
;
virtual
int
DoSendTo
(
SOCKET
socket
const
char
*
buf
int
len
int
flags
const
struct
sockaddr
*
dest_addr
socklen_t
addrlen
)
;
void
OnResolveResult
(
AsyncResolverInterface
*
resolver
)
;
void
UpdateLastError
(
)
;
void
MaybeRemapSendError
(
)
;
static
int
TranslateOption
(
Option
opt
int
*
slevel
int
*
sopt
)
;
PhysicalSocketServer
*
ss_
;
SOCKET
s_
;
uint8_t
enabled_events_
;
bool
udp_
;
CriticalSection
crit_
;
int
error_
GUARDED_BY
(
crit_
)
;
ConnState
state_
;
AsyncResolver
*
resolver_
;
#
if
!
defined
(
NDEBUG
)
std
:
:
string
dbg_addr_
;
#
endif
}
;
class
SocketDispatcher
:
public
Dispatcher
public
PhysicalSocket
{
public
:
explicit
SocketDispatcher
(
PhysicalSocketServer
*
ss
)
;
SocketDispatcher
(
SOCKET
s
PhysicalSocketServer
*
ss
)
;
~
SocketDispatcher
(
)
override
;
bool
Initialize
(
)
;
virtual
bool
Create
(
int
type
)
;
bool
Create
(
int
family
int
type
)
override
;
#
if
defined
(
WEBRTC_WIN
)
WSAEVENT
GetWSAEvent
(
)
override
;
SOCKET
GetSocket
(
)
override
;
bool
CheckSignalClose
(
)
override
;
#
elif
defined
(
WEBRTC_POSIX
)
int
GetDescriptor
(
)
override
;
bool
IsDescriptorClosed
(
)
override
;
#
endif
uint32_t
GetRequestedEvents
(
)
override
;
void
OnPreEvent
(
uint32_t
ff
)
override
;
void
OnEvent
(
uint32_t
ff
int
err
)
override
;
int
Close
(
)
override
;
#
if
defined
(
WEBRTC_WIN
)
private
:
static
int
next_id_
;
int
id_
;
bool
signal_close_
;
int
signal_err_
;
#
endif
}
;
}
#
endif
