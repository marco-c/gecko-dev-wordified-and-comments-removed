#
ifndef
WEBRTC_BASE_CHECKS_H_
#
define
WEBRTC_BASE_CHECKS_H_
#
include
<
sstream
>
#
include
<
string
>
#
include
"
webrtc
/
typedefs
.
h
"
namespace
rtc
{
#
define
RTC_LAZY_STREAM
(
stream
condition
)
\
!
(
condition
)
?
static_cast
<
void
>
(
0
)
:
rtc
:
:
FatalMessageVoidify
(
)
&
(
stream
)
#
define
RTC_EAT_STREAM_PARAMETERS
(
condition
)
\
(
true
?
true
:
!
(
condition
)
)
\
?
static_cast
<
void
>
(
0
)
\
:
rtc
:
:
FatalMessageVoidify
(
)
&
rtc
:
:
FatalMessage
(
"
"
0
)
.
stream
(
)
#
define
RTC_CHECK
(
condition
)
\
RTC_LAZY_STREAM
(
rtc
:
:
FatalMessage
(
__FILE__
__LINE__
)
.
stream
(
)
\
!
(
condition
)
)
\
<
<
"
Check
failed
:
"
#
condition
<
<
std
:
:
endl
<
<
"
#
"
#
define
RTC_CHECK_OP
(
name
op
val1
val2
)
\
if
(
std
:
:
string
*
_result
=
\
rtc
:
:
Check
#
#
name
#
#
Impl
(
(
val1
)
(
val2
)
#
val1
"
"
#
op
"
"
#
val2
)
)
\
rtc
:
:
FatalMessage
(
__FILE__
__LINE__
_result
)
.
stream
(
)
template
<
class
t1
class
t2
>
std
:
:
string
*
MakeCheckOpString
(
const
t1
&
v1
const
t2
&
v2
const
char
*
names
)
{
std
:
:
ostringstream
ss
;
ss
<
<
names
<
<
"
(
"
<
<
v1
<
<
"
vs
.
"
<
<
v2
<
<
"
)
"
;
std
:
:
string
*
msg
=
new
std
:
:
string
(
ss
.
str
(
)
)
;
return
msg
;
}
#
if
!
defined
(
COMPILER_MSVC
)
extern
template
std
:
:
string
*
MakeCheckOpString
<
int
int
>
(
const
int
&
const
int
&
const
char
*
names
)
;
extern
template
std
:
:
string
*
MakeCheckOpString
<
unsigned
long
unsigned
long
>
(
const
unsigned
long
&
const
unsigned
long
&
const
char
*
names
)
;
extern
template
std
:
:
string
*
MakeCheckOpString
<
unsigned
long
unsigned
int
>
(
const
unsigned
long
&
const
unsigned
int
&
const
char
*
names
)
;
extern
template
std
:
:
string
*
MakeCheckOpString
<
unsigned
int
unsigned
long
>
(
const
unsigned
int
&
const
unsigned
long
&
const
char
*
names
)
;
extern
template
std
:
:
string
*
MakeCheckOpString
<
std
:
:
string
std
:
:
string
>
(
const
std
:
:
string
&
const
std
:
:
string
&
const
char
*
name
)
;
#
endif
#
define
DEFINE_RTC_CHECK_OP_IMPL
(
name
op
)
\
template
<
class
t1
class
t2
>
\
inline
std
:
:
string
*
Check
#
#
name
#
#
Impl
(
const
t1
&
v1
const
t2
&
v2
\
const
char
*
names
)
{
\
if
(
v1
op
v2
)
\
return
NULL
;
\
else
\
return
rtc
:
:
MakeCheckOpString
(
v1
v2
names
)
;
\
}
\
inline
std
:
:
string
*
Check
#
#
name
#
#
Impl
(
int
v1
int
v2
const
char
*
names
)
{
\
if
(
v1
op
v2
)
\
return
NULL
;
\
else
\
return
rtc
:
:
MakeCheckOpString
(
v1
v2
names
)
;
\
}
DEFINE_RTC_CHECK_OP_IMPL
(
EQ
=
=
)
DEFINE_RTC_CHECK_OP_IMPL
(
NE
!
=
)
DEFINE_RTC_CHECK_OP_IMPL
(
LE
<
=
)
DEFINE_RTC_CHECK_OP_IMPL
(
LT
<
)
DEFINE_RTC_CHECK_OP_IMPL
(
GE
>
=
)
DEFINE_RTC_CHECK_OP_IMPL
(
GT
>
)
#
undef
DEFINE_RTC_CHECK_OP_IMPL
#
define
RTC_CHECK_EQ
(
val1
val2
)
RTC_CHECK_OP
(
EQ
=
=
val1
val2
)
#
define
RTC_CHECK_NE
(
val1
val2
)
RTC_CHECK_OP
(
NE
!
=
val1
val2
)
#
define
RTC_CHECK_LE
(
val1
val2
)
RTC_CHECK_OP
(
LE
<
=
val1
val2
)
#
define
RTC_CHECK_LT
(
val1
val2
)
RTC_CHECK_OP
(
LT
<
val1
val2
)
#
define
RTC_CHECK_GE
(
val1
val2
)
RTC_CHECK_OP
(
GE
>
=
val1
val2
)
#
define
RTC_CHECK_GT
(
val1
val2
)
RTC_CHECK_OP
(
GT
>
val1
val2
)
#
if
(
!
defined
(
NDEBUG
)
|
|
defined
(
DCHECK_ALWAYS_ON
)
)
#
define
RTC_DCHECK_IS_ON
1
#
define
RTC_DCHECK
(
condition
)
RTC_CHECK
(
condition
)
#
define
RTC_DCHECK_EQ
(
v1
v2
)
RTC_CHECK_EQ
(
v1
v2
)
#
define
RTC_DCHECK_NE
(
v1
v2
)
RTC_CHECK_NE
(
v1
v2
)
#
define
RTC_DCHECK_LE
(
v1
v2
)
RTC_CHECK_LE
(
v1
v2
)
#
define
RTC_DCHECK_LT
(
v1
v2
)
RTC_CHECK_LT
(
v1
v2
)
#
define
RTC_DCHECK_GE
(
v1
v2
)
RTC_CHECK_GE
(
v1
v2
)
#
define
RTC_DCHECK_GT
(
v1
v2
)
RTC_CHECK_GT
(
v1
v2
)
#
else
#
define
RTC_DCHECK_IS_ON
0
#
define
RTC_DCHECK
(
condition
)
RTC_EAT_STREAM_PARAMETERS
(
condition
)
#
define
RTC_DCHECK_EQ
(
v1
v2
)
RTC_EAT_STREAM_PARAMETERS
(
(
v1
)
=
=
(
v2
)
)
#
define
RTC_DCHECK_NE
(
v1
v2
)
RTC_EAT_STREAM_PARAMETERS
(
(
v1
)
!
=
(
v2
)
)
#
define
RTC_DCHECK_LE
(
v1
v2
)
RTC_EAT_STREAM_PARAMETERS
(
(
v1
)
<
=
(
v2
)
)
#
define
RTC_DCHECK_LT
(
v1
v2
)
RTC_EAT_STREAM_PARAMETERS
(
(
v1
)
<
(
v2
)
)
#
define
RTC_DCHECK_GE
(
v1
v2
)
RTC_EAT_STREAM_PARAMETERS
(
(
v1
)
>
=
(
v2
)
)
#
define
RTC_DCHECK_GT
(
v1
v2
)
RTC_EAT_STREAM_PARAMETERS
(
(
v1
)
>
(
v2
)
)
#
endif
class
FatalMessageVoidify
{
public
:
FatalMessageVoidify
(
)
{
}
void
operator
&
(
std
:
:
ostream
&
)
{
}
}
;
#
define
RTC_UNREACHABLE_CODE_HIT
false
#
define
RTC_NOTREACHED
(
)
RTC_DCHECK
(
RTC_UNREACHABLE_CODE_HIT
)
#
define
FATAL
(
)
rtc
:
:
FatalMessage
(
__FILE__
__LINE__
)
.
stream
(
)
class
FatalMessage
{
public
:
FatalMessage
(
const
char
*
file
int
line
)
;
FatalMessage
(
const
char
*
file
int
line
std
:
:
string
*
result
)
;
NO_RETURN
~
FatalMessage
(
)
;
std
:
:
ostream
&
stream
(
)
{
return
stream_
;
}
private
:
void
Init
(
const
char
*
file
int
line
)
;
std
:
:
ostringstream
stream_
;
}
;
template
<
typename
T
>
inline
T
CheckedDivExact
(
T
a
T
b
)
{
RTC_CHECK_EQ
(
a
%
b
static_cast
<
T
>
(
0
)
)
;
return
a
/
b
;
}
}
#
endif
