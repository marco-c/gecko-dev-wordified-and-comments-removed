#
ifndef
WEBRTC_BASE_MACASYNCSOCKET_H__
#
define
WEBRTC_BASE_MACASYNCSOCKET_H__
#
include
<
CoreFoundation
/
CoreFoundation
.
h
>
#
include
"
webrtc
/
base
/
asyncsocket
.
h
"
#
include
"
webrtc
/
base
/
nethelpers
.
h
"
namespace
rtc
{
class
MacBaseSocketServer
;
class
MacAsyncSocket
:
public
AsyncSocket
public
sigslot
:
:
has_slots
<
>
{
public
:
MacAsyncSocket
(
MacBaseSocketServer
*
ss
int
family
)
;
~
MacAsyncSocket
(
)
override
;
bool
valid
(
)
const
{
return
source_
!
=
NULL
;
}
SocketAddress
GetLocalAddress
(
)
const
override
;
SocketAddress
GetRemoteAddress
(
)
const
override
;
int
Bind
(
const
SocketAddress
&
addr
)
override
;
int
Connect
(
const
SocketAddress
&
addr
)
override
;
int
Send
(
const
void
*
buffer
size_t
length
)
override
;
int
SendTo
(
const
void
*
buffer
size_t
length
const
SocketAddress
&
addr
)
override
;
int
Recv
(
void
*
buffer
size_t
length
)
override
;
int
RecvFrom
(
void
*
buffer
size_t
length
SocketAddress
*
out_addr
)
override
;
int
Listen
(
int
backlog
)
override
;
MacAsyncSocket
*
Accept
(
SocketAddress
*
out_addr
)
override
;
int
Close
(
)
override
;
int
GetError
(
)
const
override
;
void
SetError
(
int
error
)
override
;
ConnState
GetState
(
)
const
override
;
int
EstimateMTU
(
uint16
*
mtu
)
override
;
int
GetOption
(
Option
opt
int
*
value
)
override
;
int
SetOption
(
Option
opt
int
value
)
override
;
void
EnableCallbacks
(
)
;
void
DisableCallbacks
(
)
;
protected
:
void
OnResolveResult
(
SignalThread
*
thread
)
;
int
DoConnect
(
const
SocketAddress
&
addr
)
;
private
:
MacAsyncSocket
(
MacBaseSocketServer
*
ss
int
family
int
native_socket
)
;
void
Initialize
(
int
family
)
;
static
CFDataRef
CopyCFAddress
(
const
SocketAddress
&
address
)
;
static
void
MacAsyncSocketCallBack
(
CFSocketRef
s
CFSocketCallBackType
callbackType
CFDataRef
address
const
void
*
data
void
*
info
)
;
MacBaseSocketServer
*
ss_
;
CFSocketRef
socket_
;
int
native_socket_
;
CFRunLoopSourceRef
source_
;
int
current_callbacks_
;
bool
disabled_
;
int
error_
;
ConnState
state_
;
AsyncResolver
*
resolver_
;
DISALLOW_EVIL_CONSTRUCTORS
(
MacAsyncSocket
)
;
}
;
}
#
endif
