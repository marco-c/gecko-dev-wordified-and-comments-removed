#
ifndef
WEBRTC_BASE_SSLIDENTITY_H_
#
define
WEBRTC_BASE_SSLIDENTITY_H_
#
include
<
algorithm
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
buffer
.
h
"
#
include
"
webrtc
/
base
/
messagedigest
.
h
"
#
include
"
webrtc
/
base
/
timeutils
.
h
"
namespace
rtc
{
class
SSLCertChain
;
class
SSLCertificate
{
public
:
static
SSLCertificate
*
FromPEMString
(
const
std
:
:
string
&
pem_string
)
;
virtual
~
SSLCertificate
(
)
{
}
virtual
SSLCertificate
*
GetReference
(
)
const
=
0
;
virtual
bool
GetChain
(
SSLCertChain
*
*
chain
)
const
=
0
;
virtual
std
:
:
string
ToPEMString
(
)
const
=
0
;
virtual
void
ToDER
(
Buffer
*
der_buffer
)
const
=
0
;
virtual
bool
GetSignatureDigestAlgorithm
(
std
:
:
string
*
algorithm
)
const
=
0
;
virtual
bool
ComputeDigest
(
const
std
:
:
string
&
algorithm
unsigned
char
*
digest
size_t
size
size_t
*
length
)
const
=
0
;
virtual
int64_t
CertificateExpirationTime
(
)
const
=
0
;
}
;
class
SSLCertChain
{
public
:
explicit
SSLCertChain
(
const
std
:
:
vector
<
SSLCertificate
*
>
&
certs
)
;
explicit
SSLCertChain
(
const
SSLCertificate
*
cert
)
;
~
SSLCertChain
(
)
;
size_t
GetSize
(
)
const
{
return
certs_
.
size
(
)
;
}
const
SSLCertificate
&
Get
(
size_t
pos
)
const
{
return
*
(
certs_
[
pos
]
)
;
}
SSLCertChain
*
Copy
(
)
const
{
return
new
SSLCertChain
(
certs_
)
;
}
private
:
static
SSLCertificate
*
DupCert
(
const
SSLCertificate
*
cert
)
{
return
cert
-
>
GetReference
(
)
;
}
static
void
DeleteCert
(
SSLCertificate
*
cert
)
{
delete
cert
;
}
std
:
:
vector
<
SSLCertificate
*
>
certs_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
SSLCertChain
)
;
}
;
enum
KeyType
{
KT_RSA
KT_ECDSA
KT_LAST
KT_DEFAULT
=
KT_RSA
}
;
static
const
int
kRsaDefaultModSize
=
1024
;
static
const
int
kRsaDefaultExponent
=
0x10001
;
static
const
int
kRsaMinModSize
=
1024
;
static
const
int
kRsaMaxModSize
=
8192
;
struct
RSAParams
{
unsigned
int
mod_size
;
unsigned
int
pub_exp
;
}
;
enum
ECCurve
{
EC_NIST_P256
EC_LAST
}
;
class
KeyParams
{
public
:
explicit
KeyParams
(
KeyType
key_type
=
KT_DEFAULT
)
;
static
KeyParams
RSA
(
int
mod_size
=
kRsaDefaultModSize
int
pub_exp
=
kRsaDefaultExponent
)
;
static
KeyParams
ECDSA
(
ECCurve
curve
=
EC_NIST_P256
)
;
bool
IsValid
(
)
const
;
RSAParams
rsa_params
(
)
const
;
ECCurve
ec_curve
(
)
const
;
KeyType
type
(
)
const
{
return
type_
;
}
private
:
KeyType
type_
;
union
{
RSAParams
rsa
;
ECCurve
curve
;
}
params_
;
}
;
KeyType
IntKeyTypeFamilyToKeyType
(
int
key_type_family
)
;
struct
SSLIdentityParams
{
std
:
:
string
common_name
;
time_t
not_before
;
time_t
not_after
;
KeyParams
key_params
;
}
;
class
SSLIdentity
{
public
:
static
SSLIdentity
*
Generate
(
const
std
:
:
string
&
common_name
const
KeyParams
&
key_param
)
;
static
SSLIdentity
*
Generate
(
const
std
:
:
string
&
common_name
KeyType
key_type
)
{
return
Generate
(
common_name
KeyParams
(
key_type
)
)
;
}
static
SSLIdentity
*
GenerateForTest
(
const
SSLIdentityParams
&
params
)
;
static
SSLIdentity
*
FromPEMStrings
(
const
std
:
:
string
&
private_key
const
std
:
:
string
&
certificate
)
;
virtual
~
SSLIdentity
(
)
{
}
virtual
SSLIdentity
*
GetReference
(
)
const
=
0
;
virtual
const
SSLCertificate
&
certificate
(
)
const
=
0
;
static
bool
PemToDer
(
const
std
:
:
string
&
pem_type
const
std
:
:
string
&
pem_string
std
:
:
string
*
der
)
;
static
std
:
:
string
DerToPem
(
const
std
:
:
string
&
pem_type
const
unsigned
char
*
data
size_t
length
)
;
}
;
int64_t
ASN1TimeToSec
(
const
unsigned
char
*
s
size_t
length
bool
long_format
)
;
extern
const
char
kPemTypeCertificate
[
]
;
extern
const
char
kPemTypeRsaPrivateKey
[
]
;
extern
const
char
kPemTypeEcPrivateKey
[
]
;
}
#
endif
