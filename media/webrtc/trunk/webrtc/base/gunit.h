#
ifndef
WEBRTC_BASE_GUNIT_H_
#
define
WEBRTC_BASE_GUNIT_H_
#
include
"
webrtc
/
base
/
fakeclock
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
#
if
defined
(
GTEST_RELATIVE_PATH
)
#
include
"
webrtc
/
test
/
gtest
.
h
"
#
else
#
include
"
testing
/
base
/
public
/
gunit
.
h
"
#
endif
#
define
WAIT
(
ex
timeout
)
\
for
(
int64_t
start
=
rtc
:
:
SystemTimeMillis
(
)
;
\
!
(
ex
)
&
&
rtc
:
:
SystemTimeMillis
(
)
<
start
+
(
timeout
)
;
)
{
\
rtc
:
:
Thread
:
:
Current
(
)
-
>
ProcessMessages
(
0
)
;
\
rtc
:
:
Thread
:
:
Current
(
)
-
>
SleepMs
(
1
)
;
\
}
#
define
WAIT_
(
ex
timeout
res
)
\
do
{
\
int64_t
start
=
rtc
:
:
SystemTimeMillis
(
)
;
\
res
=
(
ex
)
;
\
while
(
!
res
&
&
rtc
:
:
SystemTimeMillis
(
)
<
start
+
(
timeout
)
)
{
\
rtc
:
:
Thread
:
:
Current
(
)
-
>
ProcessMessages
(
0
)
;
\
rtc
:
:
Thread
:
:
Current
(
)
-
>
SleepMs
(
1
)
;
\
res
=
(
ex
)
;
\
}
\
}
while
(
0
)
#
define
EXPECT_TRUE_WAIT
(
ex
timeout
)
\
do
{
\
bool
res
;
\
WAIT_
(
ex
timeout
res
)
;
\
if
(
!
res
)
EXPECT_TRUE
(
ex
)
;
\
}
while
(
0
)
#
define
EXPECT_EQ_WAIT
(
v1
v2
timeout
)
\
do
{
\
bool
res
;
\
WAIT_
(
v1
=
=
v2
timeout
res
)
;
\
if
(
!
res
)
EXPECT_EQ
(
v1
v2
)
;
\
}
while
(
0
)
#
define
ASSERT_TRUE_WAIT
(
ex
timeout
)
\
do
{
\
bool
res
;
\
WAIT_
(
ex
timeout
res
)
;
\
if
(
!
res
)
ASSERT_TRUE
(
ex
)
;
\
}
while
(
0
)
#
define
ASSERT_EQ_WAIT
(
v1
v2
timeout
)
\
do
{
\
bool
res
;
\
WAIT_
(
v1
=
=
v2
timeout
res
)
;
\
if
(
!
res
)
ASSERT_EQ
(
v1
v2
)
;
\
}
while
(
0
)
#
define
EXPECT_TRUE_WAIT_MARGIN
(
ex
timeout
margin
)
\
do
{
\
bool
res
;
\
WAIT_
(
ex
timeout
res
)
;
\
if
(
res
)
{
\
break
;
\
}
\
LOG
(
LS_WARNING
)
<
<
"
Expression
"
<
<
#
ex
<
<
"
still
not
true
after
"
\
<
<
(
timeout
)
<
<
"
ms
;
waiting
an
additional
"
<
<
margin
\
<
<
"
ms
"
;
\
WAIT_
(
ex
margin
res
)
;
\
if
(
!
res
)
{
\
EXPECT_TRUE
(
ex
)
;
\
}
\
}
while
(
0
)
#
define
SIMULATED_WAIT
(
ex
timeout
clock
)
\
for
(
int64_t
start
=
rtc
:
:
TimeMillis
(
)
;
\
!
(
ex
)
&
&
rtc
:
:
TimeMillis
(
)
<
start
+
(
timeout
)
;
)
{
\
(
clock
)
.
AdvanceTime
(
rtc
:
:
TimeDelta
:
:
FromMilliseconds
(
1
)
)
;
\
}
#
define
SIMULATED_WAIT_
(
ex
timeout
res
clock
)
\
do
{
\
int64_t
start
=
rtc
:
:
TimeMillis
(
)
;
\
res
=
(
ex
)
;
\
while
(
!
res
&
&
rtc
:
:
TimeMillis
(
)
<
start
+
(
timeout
)
)
{
\
(
clock
)
.
AdvanceTime
(
rtc
:
:
TimeDelta
:
:
FromMilliseconds
(
1
)
)
;
\
res
=
(
ex
)
;
\
}
\
}
while
(
0
)
#
define
EXPECT_TRUE_SIMULATED_WAIT
(
ex
timeout
clock
)
\
do
{
\
bool
res
;
\
SIMULATED_WAIT_
(
ex
timeout
res
clock
)
;
\
if
(
!
res
)
{
\
EXPECT_TRUE
(
ex
)
;
\
}
\
}
while
(
0
)
#
define
EXPECT_EQ_SIMULATED_WAIT
(
v1
v2
timeout
clock
)
\
do
{
\
bool
res
;
\
SIMULATED_WAIT_
(
v1
=
=
v2
timeout
res
clock
)
;
\
if
(
!
res
)
{
\
EXPECT_EQ
(
v1
v2
)
;
\
}
\
}
while
(
0
)
#
define
ASSERT_TRUE_SIMULATED_WAIT
(
ex
timeout
clock
)
\
do
{
\
bool
res
;
\
SIMULATED_WAIT_
(
ex
timeout
res
clock
)
;
\
if
(
!
res
)
\
ASSERT_TRUE
(
ex
)
;
\
}
while
(
0
)
#
define
ASSERT_EQ_SIMULATED_WAIT
(
v1
v2
timeout
clock
)
\
do
{
\
bool
res
;
\
SIMULATED_WAIT_
(
v1
=
=
v2
timeout
res
clock
)
;
\
if
(
!
res
)
\
ASSERT_EQ
(
v1
v2
)
;
\
}
while
(
0
)
#
endif
