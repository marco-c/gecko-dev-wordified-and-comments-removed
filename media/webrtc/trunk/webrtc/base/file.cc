#
include
"
webrtc
/
base
/
file
.
h
"
#
include
<
utility
>
namespace
rtc
{
namespace
{
std
:
:
string
NormalizePathname
(
Pathname
&
&
path
)
{
path
.
Normalize
(
)
;
return
path
.
pathname
(
)
;
}
}
File
:
:
File
(
PlatformFile
file
)
:
file_
(
file
)
{
}
File
:
:
File
(
)
:
file_
(
kInvalidPlatformFileValue
)
{
}
File
:
:
~
File
(
)
{
Close
(
)
;
}
File
File
:
:
Open
(
const
std
:
:
string
&
path
)
{
return
File
(
OpenPlatformFile
(
path
)
)
;
}
File
File
:
:
Open
(
Pathname
&
&
path
)
{
return
Open
(
NormalizePathname
(
std
:
:
move
(
path
)
)
)
;
}
File
File
:
:
Open
(
const
Pathname
&
path
)
{
return
Open
(
Pathname
(
path
)
)
;
}
File
File
:
:
Create
(
const
std
:
:
string
&
path
)
{
return
File
(
CreatePlatformFile
(
path
)
)
;
}
File
File
:
:
Create
(
Pathname
&
&
path
)
{
return
Create
(
NormalizePathname
(
std
:
:
move
(
path
)
)
)
;
}
File
File
:
:
Create
(
const
Pathname
&
path
)
{
return
Create
(
Pathname
(
path
)
)
;
}
bool
File
:
:
Remove
(
const
std
:
:
string
&
path
)
{
return
RemoveFile
(
path
)
;
}
bool
File
:
:
Remove
(
Pathname
&
&
path
)
{
return
Remove
(
NormalizePathname
(
std
:
:
move
(
path
)
)
)
;
}
bool
File
:
:
Remove
(
const
Pathname
&
path
)
{
return
Remove
(
Pathname
(
path
)
)
;
}
File
:
:
File
(
File
&
&
other
)
:
file_
(
other
.
file_
)
{
other
.
file_
=
kInvalidPlatformFileValue
;
}
File
&
File
:
:
operator
=
(
File
&
&
other
)
{
Close
(
)
;
file_
=
other
.
file_
;
other
.
file_
=
kInvalidPlatformFileValue
;
return
*
this
;
}
bool
File
:
:
IsOpen
(
)
{
return
file_
!
=
kInvalidPlatformFileValue
;
}
}
