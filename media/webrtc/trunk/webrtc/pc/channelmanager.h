#
ifndef
WEBRTC_PC_CHANNELMANAGER_H_
#
define
WEBRTC_PC_CHANNELMANAGER_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
fileutils
.
h
"
#
include
"
webrtc
/
base
/
thread
.
h
"
#
include
"
webrtc
/
media
/
base
/
mediaengine
.
h
"
#
include
"
webrtc
/
pc
/
voicechannel
.
h
"
namespace
webrtc
{
class
MediaControllerInterface
;
}
namespace
cricket
{
class
VoiceChannel
;
class
ChannelManager
{
public
:
ChannelManager
(
MediaEngineInterface
*
me
DataEngineInterface
*
dme
rtc
:
:
Thread
*
worker_and_network
)
;
ChannelManager
(
MediaEngineInterface
*
me
rtc
:
:
Thread
*
worker
rtc
:
:
Thread
*
network
)
;
~
ChannelManager
(
)
;
rtc
:
:
Thread
*
worker_thread
(
)
const
{
return
worker_thread_
;
}
bool
set_worker_thread
(
rtc
:
:
Thread
*
thread
)
{
if
(
initialized_
)
{
return
false
;
}
worker_thread_
=
thread
;
return
true
;
}
rtc
:
:
Thread
*
network_thread
(
)
const
{
return
network_thread_
;
}
bool
set_network_thread
(
rtc
:
:
Thread
*
thread
)
{
if
(
initialized_
)
{
return
false
;
}
network_thread_
=
thread
;
return
true
;
}
MediaEngineInterface
*
media_engine
(
)
{
return
media_engine_
.
get
(
)
;
}
void
GetSupportedAudioSendCodecs
(
std
:
:
vector
<
AudioCodec
>
*
codecs
)
const
;
void
GetSupportedAudioReceiveCodecs
(
std
:
:
vector
<
AudioCodec
>
*
codecs
)
const
;
void
GetSupportedAudioRtpHeaderExtensions
(
RtpHeaderExtensions
*
ext
)
const
;
void
GetSupportedVideoCodecs
(
std
:
:
vector
<
VideoCodec
>
*
codecs
)
const
;
void
GetSupportedVideoRtpHeaderExtensions
(
RtpHeaderExtensions
*
ext
)
const
;
void
GetSupportedDataCodecs
(
std
:
:
vector
<
DataCodec
>
*
codecs
)
const
;
bool
initialized
(
)
const
{
return
initialized_
;
}
bool
Init
(
)
;
void
Terminate
(
)
;
VoiceChannel
*
CreateVoiceChannel
(
webrtc
:
:
MediaControllerInterface
*
media_controller
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
rtc
:
:
Thread
*
signaling_thread
const
std
:
:
string
&
content_name
const
std
:
:
string
*
bundle_transport_name
bool
rtcp_mux_required
bool
srtp_required
const
AudioOptions
&
options
)
;
void
DestroyVoiceChannel
(
VoiceChannel
*
voice_channel
)
;
VideoChannel
*
CreateVideoChannel
(
webrtc
:
:
MediaControllerInterface
*
media_controller
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
rtc
:
:
Thread
*
signaling_thread
const
std
:
:
string
&
content_name
const
std
:
:
string
*
bundle_transport_name
bool
rtcp_mux_required
bool
srtp_required
const
VideoOptions
&
options
)
;
void
DestroyVideoChannel
(
VideoChannel
*
video_channel
)
;
RtpDataChannel
*
CreateRtpDataChannel
(
webrtc
:
:
MediaControllerInterface
*
media_controller
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
rtc
:
:
Thread
*
signaling_thread
const
std
:
:
string
&
content_name
const
std
:
:
string
*
bundle_transport_name
bool
rtcp_mux_required
bool
srtp_required
)
;
void
DestroyRtpDataChannel
(
RtpDataChannel
*
data_channel
)
;
bool
has_channels
(
)
const
{
return
(
!
voice_channels_
.
empty
(
)
|
|
!
video_channels_
.
empty
(
)
)
;
}
bool
SetVideoRtxEnabled
(
bool
enable
)
;
bool
SetCryptoOptions
(
const
rtc
:
:
CryptoOptions
&
crypto_options
)
;
bool
capturing
(
)
const
{
return
capturing_
;
}
bool
StartAecDump
(
rtc
:
:
PlatformFile
file
int64_t
max_size_bytes
)
;
void
StopAecDump
(
)
;
private
:
typedef
std
:
:
vector
<
VoiceChannel
*
>
VoiceChannels
;
typedef
std
:
:
vector
<
VideoChannel
*
>
VideoChannels
;
typedef
std
:
:
vector
<
RtpDataChannel
*
>
RtpDataChannels
;
void
Construct
(
MediaEngineInterface
*
me
DataEngineInterface
*
dme
rtc
:
:
Thread
*
worker_thread
rtc
:
:
Thread
*
network_thread
)
;
bool
InitMediaEngine_w
(
)
;
void
DestructorDeletes_w
(
)
;
void
Terminate_w
(
)
;
bool
SetCryptoOptions_w
(
const
rtc
:
:
CryptoOptions
&
crypto_options
)
;
VoiceChannel
*
CreateVoiceChannel_w
(
webrtc
:
:
MediaControllerInterface
*
media_controller
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
rtc
:
:
Thread
*
signaling_thread
const
std
:
:
string
&
content_name
const
std
:
:
string
*
bundle_transport_name
bool
rtcp_mux_required
bool
srtp_required
const
AudioOptions
&
options
)
;
void
DestroyVoiceChannel_w
(
VoiceChannel
*
voice_channel
)
;
VideoChannel
*
CreateVideoChannel_w
(
webrtc
:
:
MediaControllerInterface
*
media_controller
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
rtc
:
:
Thread
*
signaling_thread
const
std
:
:
string
&
content_name
const
std
:
:
string
*
bundle_transport_name
bool
rtcp_mux_required
bool
srtp_required
const
VideoOptions
&
options
)
;
void
DestroyVideoChannel_w
(
VideoChannel
*
video_channel
)
;
RtpDataChannel
*
CreateRtpDataChannel_w
(
webrtc
:
:
MediaControllerInterface
*
media_controller
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
rtc
:
:
Thread
*
signaling_thread
const
std
:
:
string
&
content_name
const
std
:
:
string
*
bundle_transport_name
bool
rtcp_mux_required
bool
srtp_required
)
;
void
DestroyRtpDataChannel_w
(
RtpDataChannel
*
data_channel
)
;
std
:
:
unique_ptr
<
MediaEngineInterface
>
media_engine_
;
std
:
:
unique_ptr
<
DataEngineInterface
>
data_media_engine_
;
bool
initialized_
;
rtc
:
:
Thread
*
main_thread_
;
rtc
:
:
Thread
*
worker_thread_
;
rtc
:
:
Thread
*
network_thread_
;
VoiceChannels
voice_channels_
;
VideoChannels
video_channels_
;
RtpDataChannels
data_channels_
;
bool
enable_rtx_
;
rtc
:
:
CryptoOptions
crypto_options_
;
bool
capturing_
;
}
;
}
#
endif
