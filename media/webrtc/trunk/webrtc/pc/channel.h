#
ifndef
WEBRTC_PC_CHANNEL_H_
#
define
WEBRTC_PC_CHANNEL_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
webrtc
/
api
/
call
/
audio_sink
.
h
"
#
include
"
webrtc
/
base
/
asyncinvoker
.
h
"
#
include
"
webrtc
/
base
/
asyncudpsocket
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
network
.
h
"
#
include
"
webrtc
/
base
/
sigslot
.
h
"
#
include
"
webrtc
/
base
/
window
.
h
"
#
include
"
webrtc
/
media
/
base
/
mediachannel
.
h
"
#
include
"
webrtc
/
media
/
base
/
mediaengine
.
h
"
#
include
"
webrtc
/
media
/
base
/
streamparams
.
h
"
#
include
"
webrtc
/
media
/
base
/
videosinkinterface
.
h
"
#
include
"
webrtc
/
media
/
base
/
videosourceinterface
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
transportcontroller
.
h
"
#
include
"
webrtc
/
p2p
/
client
/
socketmonitor
.
h
"
#
include
"
webrtc
/
pc
/
audiomonitor
.
h
"
#
include
"
webrtc
/
pc
/
bundlefilter
.
h
"
#
include
"
webrtc
/
pc
/
mediamonitor
.
h
"
#
include
"
webrtc
/
pc
/
mediasession
.
h
"
#
include
"
webrtc
/
pc
/
rtcpmuxfilter
.
h
"
#
include
"
webrtc
/
pc
/
srtpfilter
.
h
"
namespace
rtc
{
class
PacketTransportInterface
;
}
namespace
webrtc
{
class
AudioSinkInterface
;
}
namespace
cricket
{
struct
CryptoParams
;
class
MediaContentDescription
;
class
BaseChannel
:
public
rtc
:
:
MessageHandler
public
sigslot
:
:
has_slots
<
>
public
MediaChannel
:
:
NetworkInterface
public
ConnectionStatsGetter
{
public
:
BaseChannel
(
rtc
:
:
Thread
*
worker_thread
rtc
:
:
Thread
*
network_thread
rtc
:
:
Thread
*
signaling_thread
MediaChannel
*
channel
const
std
:
:
string
&
content_name
bool
rtcp_mux_required
bool
srtp_required
)
;
virtual
~
BaseChannel
(
)
;
bool
Init_w
(
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
)
;
void
Deinit
(
)
;
rtc
:
:
Thread
*
worker_thread
(
)
const
{
return
worker_thread_
;
}
rtc
:
:
Thread
*
network_thread
(
)
const
{
return
network_thread_
;
}
const
std
:
:
string
&
content_name
(
)
const
{
return
content_name_
;
}
const
std
:
:
string
&
transport_name
(
)
const
{
return
transport_name_
;
}
bool
enabled
(
)
const
{
return
enabled_
;
}
bool
secure
(
)
const
{
return
srtp_filter_
.
IsActive
(
)
;
}
bool
secure_dtls
(
)
const
{
return
dtls_keyed_
;
}
bool
writable
(
)
const
{
return
writable_
;
}
bool
SetTransport
(
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
)
;
bool
PushdownLocalDescription
(
const
SessionDescription
*
local_desc
ContentAction
action
std
:
:
string
*
error_desc
)
;
bool
PushdownRemoteDescription
(
const
SessionDescription
*
remote_desc
ContentAction
action
std
:
:
string
*
error_desc
)
;
bool
SetLocalContent
(
const
MediaContentDescription
*
content
ContentAction
action
std
:
:
string
*
error_desc
)
;
bool
SetRemoteContent
(
const
MediaContentDescription
*
content
ContentAction
action
std
:
:
string
*
error_desc
)
;
bool
Enable
(
bool
enable
)
;
bool
AddRecvStream
(
const
StreamParams
&
sp
)
;
bool
RemoveRecvStream
(
uint32_t
ssrc
)
;
bool
AddSendStream
(
const
StreamParams
&
sp
)
;
bool
RemoveSendStream
(
uint32_t
ssrc
)
;
void
StartConnectionMonitor
(
int
cms
)
;
void
StopConnectionMonitor
(
)
;
bool
GetConnectionStats
(
ConnectionInfos
*
infos
)
override
;
BundleFilter
*
bundle_filter
(
)
{
return
&
bundle_filter_
;
}
const
std
:
:
vector
<
StreamParams
>
&
local_streams
(
)
const
{
return
local_streams_
;
}
const
std
:
:
vector
<
StreamParams
>
&
remote_streams
(
)
const
{
return
remote_streams_
;
}
sigslot
:
:
signal2
<
BaseChannel
*
bool
>
SignalDtlsSrtpSetupFailure
;
void
SignalDtlsSrtpSetupFailure_n
(
bool
rtcp
)
;
void
SignalDtlsSrtpSetupFailure_s
(
bool
rtcp
)
;
sigslot
:
:
signal1
<
BaseChannel
*
>
SignalFirstPacketReceived
;
sigslot
:
:
signal1
<
const
rtc
:
:
SentPacket
&
>
SignalSentPacket
;
sigslot
:
:
signal1
<
const
std
:
:
string
&
>
SignalRtcpMuxFullyActive
;
TransportChannel
*
rtp_transport
(
)
const
{
return
rtp_transport_
;
}
TransportChannel
*
rtcp_transport
(
)
const
{
return
rtcp_transport_
;
}
bool
NeedsRtcpTransport
(
)
;
void
SetTransportChannelReadyToSend
(
bool
rtcp
bool
ready
)
;
int
SetOption
(
SocketType
type
rtc
:
:
Socket
:
:
Option
o
int
val
)
override
;
int
SetOption_n
(
SocketType
type
rtc
:
:
Socket
:
:
Option
o
int
val
)
;
SrtpFilter
*
srtp_filter
(
)
{
return
&
srtp_filter_
;
}
virtual
cricket
:
:
MediaType
media_type
(
)
=
0
;
bool
SetCryptoOptions
(
const
rtc
:
:
CryptoOptions
&
crypto_options
)
;
bool
srtp_required_for_testing
(
)
const
{
return
srtp_required_
;
}
protected
:
virtual
MediaChannel
*
media_channel
(
)
const
{
return
media_channel_
;
}
bool
SetTransport_n
(
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
)
;
void
SetTransportChannel_n
(
bool
rtcp
TransportChannel
*
new_transport
)
;
bool
was_ever_writable
(
)
const
{
return
was_ever_writable_
;
}
void
set_local_content_direction
(
MediaContentDirection
direction
)
{
local_content_direction_
=
direction
;
}
void
set_remote_content_direction
(
MediaContentDirection
direction
)
{
remote_content_direction_
=
direction
;
}
bool
IsReadyToReceiveMedia_w
(
)
const
;
bool
IsReadyToSendMedia_w
(
)
const
;
rtc
:
:
Thread
*
signaling_thread
(
)
{
return
signaling_thread_
;
}
void
ConnectToTransportChannel
(
TransportChannel
*
tc
)
;
void
DisconnectFromTransportChannel
(
TransportChannel
*
tc
)
;
void
FlushRtcpMessages_n
(
)
;
bool
SendPacket
(
rtc
:
:
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketOptions
&
options
)
override
;
bool
SendRtcp
(
rtc
:
:
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketOptions
&
options
)
override
;
void
OnWritableState
(
rtc
:
:
PacketTransportInterface
*
transport
)
;
virtual
void
OnPacketRead
(
rtc
:
:
PacketTransportInterface
*
transport
const
char
*
data
size_t
len
const
rtc
:
:
PacketTime
&
packet_time
int
flags
)
;
void
OnReadyToSend
(
rtc
:
:
PacketTransportInterface
*
transport
)
;
void
OnDtlsState
(
TransportChannel
*
channel
DtlsTransportState
state
)
;
void
OnSelectedCandidatePairChanged
(
TransportChannel
*
channel
CandidatePairInterface
*
selected_candidate_pair
int
last_sent_packet_id
bool
ready_to_send
)
;
bool
PacketIsRtcp
(
const
rtc
:
:
PacketTransportInterface
*
transport
const
char
*
data
size_t
len
)
;
bool
SendPacket
(
bool
rtcp
rtc
:
:
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketOptions
&
options
)
;
bool
WantsPacket
(
bool
rtcp
const
rtc
:
:
CopyOnWriteBuffer
*
packet
)
;
void
HandlePacket
(
bool
rtcp
rtc
:
:
CopyOnWriteBuffer
*
packet
const
rtc
:
:
PacketTime
&
packet_time
)
;
void
OnPacketReceived
(
bool
rtcp
const
rtc
:
:
CopyOnWriteBuffer
&
packet
const
rtc
:
:
PacketTime
&
packet_time
)
;
void
EnableMedia_w
(
)
;
void
DisableMedia_w
(
)
;
void
UpdateWritableState_n
(
)
;
void
ChannelWritable_n
(
)
;
void
ChannelNotWritable_n
(
)
;
bool
AddRecvStream_w
(
const
StreamParams
&
sp
)
;
bool
RemoveRecvStream_w
(
uint32_t
ssrc
)
;
bool
AddSendStream_w
(
const
StreamParams
&
sp
)
;
bool
RemoveSendStream_w
(
uint32_t
ssrc
)
;
bool
ShouldSetupDtlsSrtp_n
(
)
const
;
bool
SetupDtlsSrtp_n
(
bool
rtcp_channel
)
;
void
MaybeSetupDtlsSrtp_n
(
)
;
bool
SetDtlsSrtpCryptoSuites_n
(
TransportChannel
*
tc
bool
rtcp
)
;
void
UpdateMediaSendRecvState
(
)
;
virtual
void
UpdateMediaSendRecvState_w
(
)
=
0
;
virtual
const
ContentInfo
*
GetFirstContent
(
const
SessionDescription
*
sdesc
)
=
0
;
bool
UpdateLocalStreams_w
(
const
std
:
:
vector
<
StreamParams
>
&
streams
ContentAction
action
std
:
:
string
*
error_desc
)
;
bool
UpdateRemoteStreams_w
(
const
std
:
:
vector
<
StreamParams
>
&
streams
ContentAction
action
std
:
:
string
*
error_desc
)
;
virtual
bool
SetLocalContent_w
(
const
MediaContentDescription
*
content
ContentAction
action
std
:
:
string
*
error_desc
)
=
0
;
virtual
bool
SetRemoteContent_w
(
const
MediaContentDescription
*
content
ContentAction
action
std
:
:
string
*
error_desc
)
=
0
;
bool
SetRtpTransportParameters
(
const
MediaContentDescription
*
content
ContentAction
action
ContentSource
src
std
:
:
string
*
error_desc
)
;
bool
SetRtpTransportParameters_n
(
const
MediaContentDescription
*
content
ContentAction
action
ContentSource
src
std
:
:
string
*
error_desc
)
;
void
MaybeCacheRtpAbsSendTimeHeaderExtension_w
(
const
std
:
:
vector
<
webrtc
:
:
RtpExtension
>
&
extensions
)
;
bool
CheckSrtpConfig_n
(
const
std
:
:
vector
<
CryptoParams
>
&
cryptos
bool
*
dtls
std
:
:
string
*
error_desc
)
;
bool
SetSrtp_n
(
const
std
:
:
vector
<
CryptoParams
>
&
params
ContentAction
action
ContentSource
src
std
:
:
string
*
error_desc
)
;
bool
SetRtcpMux_n
(
bool
enable
ContentAction
action
ContentSource
src
std
:
:
string
*
error_desc
)
;
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
override
;
const
rtc
:
:
CryptoOptions
&
crypto_options
(
)
const
{
return
crypto_options_
;
}
virtual
void
GetSrtpCryptoSuites_n
(
std
:
:
vector
<
int
>
*
crypto_suites
)
const
=
0
;
virtual
void
OnConnectionMonitorUpdate
(
ConnectionMonitor
*
monitor
const
std
:
:
vector
<
ConnectionInfo
>
&
infos
)
=
0
;
template
<
class
FunctorT
>
bool
InvokeOnWorker
(
const
rtc
:
:
Location
&
posted_from
const
FunctorT
&
functor
)
{
return
worker_thread_
-
>
Invoke
<
bool
>
(
posted_from
functor
)
;
}
private
:
bool
InitNetwork_n
(
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
)
;
void
DisconnectTransportChannels_n
(
)
;
void
SignalSentPacket_n
(
rtc
:
:
PacketTransportInterface
*
transport
const
rtc
:
:
SentPacket
&
sent_packet
)
;
void
SignalSentPacket_w
(
const
rtc
:
:
SentPacket
&
sent_packet
)
;
bool
IsReadyToSendMedia_n
(
)
const
;
void
CacheRtpAbsSendTimeHeaderExtension_n
(
int
rtp_abs_sendtime_extn_id
)
;
int
GetTransportOverheadPerPacket
(
)
const
;
void
UpdateTransportOverhead
(
)
;
rtc
:
:
Thread
*
const
worker_thread_
;
rtc
:
:
Thread
*
const
network_thread_
;
rtc
:
:
Thread
*
const
signaling_thread_
;
rtc
:
:
AsyncInvoker
invoker_
;
const
std
:
:
string
content_name_
;
std
:
:
unique_ptr
<
ConnectionMonitor
>
connection_monitor_
;
std
:
:
string
transport_name_
;
const
bool
rtcp_mux_required_
;
TransportChannel
*
rtp_transport_
=
nullptr
;
std
:
:
vector
<
std
:
:
pair
<
rtc
:
:
Socket
:
:
Option
int
>
>
socket_options_
;
TransportChannel
*
rtcp_transport_
=
nullptr
;
std
:
:
vector
<
std
:
:
pair
<
rtc
:
:
Socket
:
:
Option
int
>
>
rtcp_socket_options_
;
SrtpFilter
srtp_filter_
;
RtcpMuxFilter
rtcp_mux_filter_
;
BundleFilter
bundle_filter_
;
bool
rtp_ready_to_send_
=
false
;
bool
rtcp_ready_to_send_
=
false
;
bool
writable_
=
false
;
bool
was_ever_writable_
=
false
;
bool
has_received_packet_
=
false
;
bool
dtls_keyed_
=
false
;
const
bool
srtp_required_
=
true
;
rtc
:
:
CryptoOptions
crypto_options_
;
int
rtp_abs_sendtime_extn_id_
=
-
1
;
MediaChannel
*
const
media_channel_
;
bool
enabled_
=
false
;
std
:
:
vector
<
StreamParams
>
local_streams_
;
std
:
:
vector
<
StreamParams
>
remote_streams_
;
MediaContentDirection
local_content_direction_
=
MD_INACTIVE
;
MediaContentDirection
remote_content_direction_
=
MD_INACTIVE
;
CandidatePairInterface
*
selected_candidate_pair_
;
}
;
class
VoiceChannel
:
public
BaseChannel
{
public
:
VoiceChannel
(
rtc
:
:
Thread
*
worker_thread
rtc
:
:
Thread
*
network_thread
rtc
:
:
Thread
*
signaling_thread
MediaEngineInterface
*
media_engine
VoiceMediaChannel
*
channel
const
std
:
:
string
&
content_name
bool
rtcp_mux_required
bool
srtp_required
)
;
~
VoiceChannel
(
)
;
bool
Init_w
(
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
)
;
bool
SetAudioSend
(
uint32_t
ssrc
bool
enable
const
AudioOptions
*
options
AudioSource
*
source
)
;
VoiceMediaChannel
*
media_channel
(
)
const
override
{
return
static_cast
<
VoiceMediaChannel
*
>
(
BaseChannel
:
:
media_channel
(
)
)
;
}
void
SetEarlyMedia
(
bool
enable
)
;
sigslot
:
:
signal1
<
VoiceChannel
*
>
SignalEarlyMediaTimeout
;
bool
CanInsertDtmf
(
)
;
bool
InsertDtmf
(
uint32_t
ssrc
int
event_code
int
duration
)
;
bool
SetOutputVolume
(
uint32_t
ssrc
double
volume
)
;
void
SetRawAudioSink
(
uint32_t
ssrc
std
:
:
unique_ptr
<
webrtc
:
:
AudioSinkInterface
>
sink
)
;
webrtc
:
:
RtpParameters
GetRtpSendParameters
(
uint32_t
ssrc
)
const
;
bool
SetRtpSendParameters
(
uint32_t
ssrc
const
webrtc
:
:
RtpParameters
&
parameters
)
;
webrtc
:
:
RtpParameters
GetRtpReceiveParameters
(
uint32_t
ssrc
)
const
;
bool
SetRtpReceiveParameters
(
uint32_t
ssrc
const
webrtc
:
:
RtpParameters
&
parameters
)
;
bool
GetStats
(
VoiceMediaInfo
*
stats
)
;
sigslot
:
:
signal2
<
VoiceChannel
*
const
std
:
:
vector
<
ConnectionInfo
>
&
>
SignalConnectionMonitor
;
void
StartMediaMonitor
(
int
cms
)
;
void
StopMediaMonitor
(
)
;
sigslot
:
:
signal2
<
VoiceChannel
*
const
VoiceMediaInfo
&
>
SignalMediaMonitor
;
void
StartAudioMonitor
(
int
cms
)
;
void
StopAudioMonitor
(
)
;
bool
IsAudioMonitorRunning
(
)
const
;
sigslot
:
:
signal2
<
VoiceChannel
*
const
AudioInfo
&
>
SignalAudioMonitor
;
int
GetInputLevel_w
(
)
;
int
GetOutputLevel_w
(
)
;
void
GetActiveStreams_w
(
AudioInfo
:
:
StreamList
*
actives
)
;
webrtc
:
:
RtpParameters
GetRtpSendParameters_w
(
uint32_t
ssrc
)
const
;
bool
SetRtpSendParameters_w
(
uint32_t
ssrc
webrtc
:
:
RtpParameters
parameters
)
;
webrtc
:
:
RtpParameters
GetRtpReceiveParameters_w
(
uint32_t
ssrc
)
const
;
bool
SetRtpReceiveParameters_w
(
uint32_t
ssrc
webrtc
:
:
RtpParameters
parameters
)
;
cricket
:
:
MediaType
media_type
(
)
override
{
return
cricket
:
:
MEDIA_TYPE_AUDIO
;
}
private
:
void
OnPacketRead
(
rtc
:
:
PacketTransportInterface
*
transport
const
char
*
data
size_t
len
const
rtc
:
:
PacketTime
&
packet_time
int
flags
)
override
;
void
UpdateMediaSendRecvState_w
(
)
override
;
const
ContentInfo
*
GetFirstContent
(
const
SessionDescription
*
sdesc
)
override
;
bool
SetLocalContent_w
(
const
MediaContentDescription
*
content
ContentAction
action
std
:
:
string
*
error_desc
)
override
;
bool
SetRemoteContent_w
(
const
MediaContentDescription
*
content
ContentAction
action
std
:
:
string
*
error_desc
)
override
;
void
HandleEarlyMediaTimeout
(
)
;
bool
InsertDtmf_w
(
uint32_t
ssrc
int
event
int
duration
)
;
bool
SetOutputVolume_w
(
uint32_t
ssrc
double
volume
)
;
bool
GetStats_w
(
VoiceMediaInfo
*
stats
)
;
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
override
;
void
GetSrtpCryptoSuites_n
(
std
:
:
vector
<
int
>
*
crypto_suites
)
const
override
;
void
OnConnectionMonitorUpdate
(
ConnectionMonitor
*
monitor
const
std
:
:
vector
<
ConnectionInfo
>
&
infos
)
override
;
void
OnMediaMonitorUpdate
(
VoiceMediaChannel
*
media_channel
const
VoiceMediaInfo
&
info
)
;
void
OnAudioMonitorUpdate
(
AudioMonitor
*
monitor
const
AudioInfo
&
info
)
;
static
const
int
kEarlyMediaTimeout
=
1000
;
MediaEngineInterface
*
media_engine_
;
bool
received_media_
;
std
:
:
unique_ptr
<
VoiceMediaMonitor
>
media_monitor_
;
std
:
:
unique_ptr
<
AudioMonitor
>
audio_monitor_
;
AudioSendParameters
last_send_params_
;
AudioRecvParameters
last_recv_params_
;
}
;
class
VideoChannel
:
public
BaseChannel
{
public
:
VideoChannel
(
rtc
:
:
Thread
*
worker_thread
rtc
:
:
Thread
*
network_thread
rtc
:
:
Thread
*
signaling_thread
VideoMediaChannel
*
channel
const
std
:
:
string
&
content_name
bool
rtcp_mux_required
bool
srtp_required
)
;
~
VideoChannel
(
)
;
bool
Init_w
(
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
)
;
VideoMediaChannel
*
media_channel
(
)
const
override
{
return
static_cast
<
VideoMediaChannel
*
>
(
BaseChannel
:
:
media_channel
(
)
)
;
}
bool
SetSink
(
uint32_t
ssrc
rtc
:
:
VideoSinkInterface
<
webrtc
:
:
VideoFrame
>
*
sink
)
;
bool
GetStats
(
VideoMediaInfo
*
stats
)
;
sigslot
:
:
signal2
<
VideoChannel
*
const
std
:
:
vector
<
ConnectionInfo
>
&
>
SignalConnectionMonitor
;
void
StartMediaMonitor
(
int
cms
)
;
void
StopMediaMonitor
(
)
;
sigslot
:
:
signal2
<
VideoChannel
*
const
VideoMediaInfo
&
>
SignalMediaMonitor
;
bool
SetVideoSend
(
uint32_t
ssrc
bool
enable
const
VideoOptions
*
options
rtc
:
:
VideoSourceInterface
<
webrtc
:
:
VideoFrame
>
*
source
)
;
webrtc
:
:
RtpParameters
GetRtpSendParameters
(
uint32_t
ssrc
)
const
;
bool
SetRtpSendParameters
(
uint32_t
ssrc
const
webrtc
:
:
RtpParameters
&
parameters
)
;
webrtc
:
:
RtpParameters
GetRtpReceiveParameters
(
uint32_t
ssrc
)
const
;
bool
SetRtpReceiveParameters
(
uint32_t
ssrc
const
webrtc
:
:
RtpParameters
&
parameters
)
;
cricket
:
:
MediaType
media_type
(
)
override
{
return
cricket
:
:
MEDIA_TYPE_VIDEO
;
}
private
:
void
UpdateMediaSendRecvState_w
(
)
override
;
const
ContentInfo
*
GetFirstContent
(
const
SessionDescription
*
sdesc
)
override
;
bool
SetLocalContent_w
(
const
MediaContentDescription
*
content
ContentAction
action
std
:
:
string
*
error_desc
)
override
;
bool
SetRemoteContent_w
(
const
MediaContentDescription
*
content
ContentAction
action
std
:
:
string
*
error_desc
)
override
;
bool
GetStats_w
(
VideoMediaInfo
*
stats
)
;
webrtc
:
:
RtpParameters
GetRtpSendParameters_w
(
uint32_t
ssrc
)
const
;
bool
SetRtpSendParameters_w
(
uint32_t
ssrc
webrtc
:
:
RtpParameters
parameters
)
;
webrtc
:
:
RtpParameters
GetRtpReceiveParameters_w
(
uint32_t
ssrc
)
const
;
bool
SetRtpReceiveParameters_w
(
uint32_t
ssrc
webrtc
:
:
RtpParameters
parameters
)
;
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
override
;
void
GetSrtpCryptoSuites_n
(
std
:
:
vector
<
int
>
*
crypto_suites
)
const
override
;
void
OnConnectionMonitorUpdate
(
ConnectionMonitor
*
monitor
const
std
:
:
vector
<
ConnectionInfo
>
&
infos
)
override
;
void
OnMediaMonitorUpdate
(
VideoMediaChannel
*
media_channel
const
VideoMediaInfo
&
info
)
;
std
:
:
unique_ptr
<
VideoMediaMonitor
>
media_monitor_
;
VideoSendParameters
last_send_params_
;
VideoRecvParameters
last_recv_params_
;
}
;
class
RtpDataChannel
:
public
BaseChannel
{
public
:
RtpDataChannel
(
rtc
:
:
Thread
*
worker_thread
rtc
:
:
Thread
*
network_thread
rtc
:
:
Thread
*
signaling_thread
DataMediaChannel
*
channel
const
std
:
:
string
&
content_name
bool
rtcp_mux_required
bool
srtp_required
)
;
~
RtpDataChannel
(
)
;
bool
Init_w
(
TransportChannel
*
rtp_transport
TransportChannel
*
rtcp_transport
)
;
virtual
bool
SendData
(
const
SendDataParams
&
params
const
rtc
:
:
CopyOnWriteBuffer
&
payload
SendDataResult
*
result
)
;
void
StartMediaMonitor
(
int
cms
)
;
void
StopMediaMonitor
(
)
;
bool
ready_to_send_data
(
)
const
{
return
ready_to_send_data_
;
}
sigslot
:
:
signal2
<
RtpDataChannel
*
const
DataMediaInfo
&
>
SignalMediaMonitor
;
sigslot
:
:
signal2
<
RtpDataChannel
*
const
std
:
:
vector
<
ConnectionInfo
>
&
>
SignalConnectionMonitor
;
sigslot
:
:
signal2
<
const
ReceiveDataParams
&
const
rtc
:
:
CopyOnWriteBuffer
&
>
SignalDataReceived
;
sigslot
:
:
signal1
<
bool
>
SignalReadyToSendData
;
cricket
:
:
MediaType
media_type
(
)
override
{
return
cricket
:
:
MEDIA_TYPE_DATA
;
}
protected
:
DataMediaChannel
*
media_channel
(
)
const
override
{
return
static_cast
<
DataMediaChannel
*
>
(
BaseChannel
:
:
media_channel
(
)
)
;
}
private
:
struct
SendDataMessageData
:
public
rtc
:
:
MessageData
{
SendDataMessageData
(
const
SendDataParams
&
params
const
rtc
:
:
CopyOnWriteBuffer
*
payload
SendDataResult
*
result
)
:
params
(
params
)
payload
(
payload
)
result
(
result
)
succeeded
(
false
)
{
}
const
SendDataParams
&
params
;
const
rtc
:
:
CopyOnWriteBuffer
*
payload
;
SendDataResult
*
result
;
bool
succeeded
;
}
;
struct
DataReceivedMessageData
:
public
rtc
:
:
MessageData
{
DataReceivedMessageData
(
const
ReceiveDataParams
&
params
const
char
*
data
size_t
len
)
:
params
(
params
)
payload
(
data
len
)
{
}
const
ReceiveDataParams
params
;
const
rtc
:
:
CopyOnWriteBuffer
payload
;
}
;
typedef
rtc
:
:
TypedMessageData
<
bool
>
DataChannelReadyToSendMessageData
;
const
ContentInfo
*
GetFirstContent
(
const
SessionDescription
*
sdesc
)
override
;
bool
CheckDataChannelTypeFromContent
(
const
DataContentDescription
*
content
std
:
:
string
*
error_desc
)
;
bool
SetLocalContent_w
(
const
MediaContentDescription
*
content
ContentAction
action
std
:
:
string
*
error_desc
)
override
;
bool
SetRemoteContent_w
(
const
MediaContentDescription
*
content
ContentAction
action
std
:
:
string
*
error_desc
)
override
;
void
UpdateMediaSendRecvState_w
(
)
override
;
void
OnMessage
(
rtc
:
:
Message
*
pmsg
)
override
;
void
GetSrtpCryptoSuites_n
(
std
:
:
vector
<
int
>
*
crypto_suites
)
const
override
;
void
OnConnectionMonitorUpdate
(
ConnectionMonitor
*
monitor
const
std
:
:
vector
<
ConnectionInfo
>
&
infos
)
override
;
void
OnMediaMonitorUpdate
(
DataMediaChannel
*
media_channel
const
DataMediaInfo
&
info
)
;
void
OnDataReceived
(
const
ReceiveDataParams
&
params
const
char
*
data
size_t
len
)
;
void
OnDataChannelError
(
uint32_t
ssrc
DataMediaChannel
:
:
Error
error
)
;
void
OnDataChannelReadyToSend
(
bool
writable
)
;
std
:
:
unique_ptr
<
DataMediaMonitor
>
media_monitor_
;
bool
ready_to_send_data_
=
false
;
DataSendParameters
last_send_params_
;
DataRecvParameters
last_recv_params_
;
}
;
}
#
endif
