#
ifndef
WEBRTC_PC_SRTPFILTER_H_
#
define
WEBRTC_PC_SRTPFILTER_H_
#
include
<
list
>
#
include
<
map
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
basictypes
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
sigslotrepeater
.
h
"
#
include
"
webrtc
/
base
/
sslstreamadapter
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
media
/
base
/
cryptoparams
.
h
"
#
include
"
webrtc
/
p2p
/
base
/
sessiondescription
.
h
"
struct
srtp_event_data_t
;
struct
srtp_ctx_t_
;
namespace
cricket
{
class
SrtpSession
;
class
SrtpStat
;
void
ShutdownSrtp
(
)
;
class
SrtpFilter
{
public
:
enum
Mode
{
PROTECT
UNPROTECT
}
;
enum
Error
{
ERROR_NONE
ERROR_FAIL
ERROR_AUTH
ERROR_REPLAY
}
;
SrtpFilter
(
)
;
~
SrtpFilter
(
)
;
bool
IsActive
(
)
const
;
bool
SetOffer
(
const
std
:
:
vector
<
CryptoParams
>
&
offer_params
ContentSource
source
)
;
bool
SetProvisionalAnswer
(
const
std
:
:
vector
<
CryptoParams
>
&
answer_params
ContentSource
source
)
;
bool
SetAnswer
(
const
std
:
:
vector
<
CryptoParams
>
&
answer_params
ContentSource
source
)
;
bool
SetRtpParams
(
int
send_cs
const
uint8_t
*
send_key
int
send_key_len
int
recv_cs
const
uint8_t
*
recv_key
int
recv_key_len
)
;
bool
SetRtcpParams
(
int
send_cs
const
uint8_t
*
send_key
int
send_key_len
int
recv_cs
const
uint8_t
*
recv_key
int
recv_key_len
)
;
bool
ProtectRtp
(
void
*
data
int
in_len
int
max_len
int
*
out_len
)
;
bool
ProtectRtp
(
void
*
data
int
in_len
int
max_len
int
*
out_len
int64_t
*
index
)
;
bool
ProtectRtcp
(
void
*
data
int
in_len
int
max_len
int
*
out_len
)
;
bool
UnprotectRtp
(
void
*
data
int
in_len
int
*
out_len
)
;
bool
UnprotectRtcp
(
void
*
data
int
in_len
int
*
out_len
)
;
bool
GetRtpAuthParams
(
uint8_t
*
*
key
int
*
key_len
int
*
tag_len
)
;
bool
GetSrtpOverhead
(
int
*
srtp_overhead
)
const
;
void
set_signal_silent_time
(
int
signal_silent_time_in_ms
)
;
bool
ResetParams
(
)
;
sigslot
:
:
repeater3
<
uint32_t
Mode
Error
>
SignalSrtpError
;
protected
:
bool
ExpectOffer
(
ContentSource
source
)
;
bool
StoreParams
(
const
std
:
:
vector
<
CryptoParams
>
&
params
ContentSource
source
)
;
bool
ExpectAnswer
(
ContentSource
source
)
;
bool
DoSetAnswer
(
const
std
:
:
vector
<
CryptoParams
>
&
answer_params
ContentSource
source
bool
final
)
;
void
CreateSrtpSessions
(
)
;
bool
NegotiateParams
(
const
std
:
:
vector
<
CryptoParams
>
&
answer_params
CryptoParams
*
selected_params
)
;
bool
ApplyParams
(
const
CryptoParams
&
send_params
const
CryptoParams
&
recv_params
)
;
static
bool
ParseKeyParams
(
const
std
:
:
string
&
params
uint8_t
*
key
size_t
len
)
;
private
:
enum
State
{
ST_INIT
ST_SENTOFFER
ST_RECEIVEDOFFER
ST_SENTPRANSWER_NO_CRYPTO
ST_RECEIVEDPRANSWER_NO_CRYPTO
ST_ACTIVE
ST_SENTUPDATEDOFFER
ST_RECEIVEDUPDATEDOFFER
ST_SENTPRANSWER
ST_RECEIVEDPRANSWER
}
;
State
state_
;
int
signal_silent_time_in_ms_
;
std
:
:
vector
<
CryptoParams
>
offer_params_
;
std
:
:
unique_ptr
<
SrtpSession
>
send_session_
;
std
:
:
unique_ptr
<
SrtpSession
>
recv_session_
;
std
:
:
unique_ptr
<
SrtpSession
>
send_rtcp_session_
;
std
:
:
unique_ptr
<
SrtpSession
>
recv_rtcp_session_
;
CryptoParams
applied_send_params_
;
CryptoParams
applied_recv_params_
;
}
;
class
SrtpSession
{
public
:
SrtpSession
(
)
;
~
SrtpSession
(
)
;
bool
SetSend
(
int
cs
const
uint8_t
*
key
size_t
len
)
;
bool
SetRecv
(
int
cs
const
uint8_t
*
key
size_t
len
)
;
bool
ProtectRtp
(
void
*
data
int
in_len
int
max_len
int
*
out_len
)
;
bool
ProtectRtp
(
void
*
data
int
in_len
int
max_len
int
*
out_len
int64_t
*
index
)
;
bool
ProtectRtcp
(
void
*
data
int
in_len
int
max_len
int
*
out_len
)
;
bool
UnprotectRtp
(
void
*
data
int
in_len
int
*
out_len
)
;
bool
UnprotectRtcp
(
void
*
data
int
in_len
int
*
out_len
)
;
bool
GetRtpAuthParams
(
uint8_t
*
*
key
int
*
key_len
int
*
tag_len
)
;
int
GetSrtpOverhead
(
)
const
;
void
set_signal_silent_time
(
int
signal_silent_time_in_ms
)
;
static
void
Terminate
(
)
;
sigslot
:
:
repeater3
<
uint32_t
SrtpFilter
:
:
Mode
SrtpFilter
:
:
Error
>
SignalSrtpError
;
private
:
bool
SetKey
(
int
type
int
cs
const
uint8_t
*
key
size_t
len
)
;
bool
GetSendStreamPacketIndex
(
void
*
data
int
in_len
int64_t
*
index
)
;
static
bool
Init
(
)
;
void
HandleEvent
(
const
srtp_event_data_t
*
ev
)
;
static
void
HandleEventThunk
(
srtp_event_data_t
*
ev
)
;
rtc
:
:
ThreadChecker
thread_checker_
;
srtp_ctx_t_
*
session_
;
int
rtp_auth_tag_len_
;
int
rtcp_auth_tag_len_
;
std
:
:
unique_ptr
<
SrtpStat
>
srtp_stat_
;
static
bool
inited_
;
static
rtc
:
:
GlobalLockPod
lock_
;
int
last_send_seq_num_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
SrtpSession
)
;
}
;
class
SrtpStat
{
public
:
SrtpStat
(
)
;
void
AddProtectRtpResult
(
uint32_t
ssrc
int
result
)
;
void
AddUnprotectRtpResult
(
uint32_t
ssrc
int
result
)
;
void
AddProtectRtcpResult
(
int
result
)
;
void
AddUnprotectRtcpResult
(
int
result
)
;
int
signal_silent_time
(
)
const
{
return
signal_silent_time_
;
}
void
set_signal_silent_time
(
int
signal_silent_time
)
{
signal_silent_time_
=
signal_silent_time
;
}
sigslot
:
:
signal3
<
uint32_t
SrtpFilter
:
:
Mode
SrtpFilter
:
:
Error
>
SignalSrtpError
;
private
:
struct
FailureKey
{
FailureKey
(
)
:
ssrc
(
0
)
mode
(
SrtpFilter
:
:
PROTECT
)
error
(
SrtpFilter
:
:
ERROR_NONE
)
{
}
FailureKey
(
uint32_t
in_ssrc
SrtpFilter
:
:
Mode
in_mode
SrtpFilter
:
:
Error
in_error
)
:
ssrc
(
in_ssrc
)
mode
(
in_mode
)
error
(
in_error
)
{
}
bool
operator
<
(
const
FailureKey
&
key
)
const
{
return
(
ssrc
<
key
.
ssrc
)
|
|
(
ssrc
=
=
key
.
ssrc
&
&
mode
<
key
.
mode
)
|
|
(
ssrc
=
=
key
.
ssrc
&
&
mode
=
=
key
.
mode
&
&
error
<
key
.
error
)
;
}
uint32_t
ssrc
;
SrtpFilter
:
:
Mode
mode
;
SrtpFilter
:
:
Error
error
;
}
;
struct
FailureStat
{
FailureStat
(
)
:
last_signal_time
(
0
)
{
}
explicit
FailureStat
(
uint32_t
in_last_signal_time
)
:
last_signal_time
(
in_last_signal_time
)
{
}
void
Reset
(
)
{
last_signal_time
=
0
;
}
int64_t
last_signal_time
;
}
;
void
HandleSrtpResult
(
const
FailureKey
&
key
)
;
std
:
:
map
<
FailureKey
FailureStat
>
failures_
;
int
signal_silent_time_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
SrtpStat
)
;
}
;
}
#
endif
