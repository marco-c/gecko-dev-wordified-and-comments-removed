#
ifndef
TEST_VIDEO_CODEC_SETTINGS_H_
#
define
TEST_VIDEO_CODEC_SETTINGS_H_
#
include
"
api
/
video_codecs
/
video_encoder
.
h
"
namespace
webrtc
{
namespace
test
{
const
uint16_t
kTestWidth
=
352
;
const
uint16_t
kTestHeight
=
288
;
const
uint32_t
kTestFrameRate
=
30
;
const
unsigned
int
kTestMinBitrateKbps
=
30
;
const
unsigned
int
kTestStartBitrateKbps
=
300
;
const
uint8_t
kTestPayloadType
=
100
;
const
int64_t
kTestTimingFramesDelayMs
=
200
;
const
uint16_t
kTestOutlierFrameSizePercent
=
250
;
static
void
CodecSettings
(
VideoCodecType
codec_type
VideoCodec
*
settings
)
{
memset
(
settings
0
sizeof
(
VideoCodec
)
)
;
switch
(
codec_type
)
{
case
kVideoCodecVP8
:
strncpy
(
settings
-
>
plName
"
VP8
"
4
)
;
settings
-
>
codecType
=
kVideoCodecVP8
;
settings
-
>
plType
=
kTestPayloadType
;
settings
-
>
startBitrate
=
kTestStartBitrateKbps
;
settings
-
>
minBitrate
=
kTestMinBitrateKbps
;
settings
-
>
maxBitrate
=
0
;
settings
-
>
maxFramerate
=
kTestFrameRate
;
settings
-
>
width
=
kTestWidth
;
settings
-
>
height
=
kTestHeight
;
settings
-
>
numberOfSimulcastStreams
=
0
;
settings
-
>
qpMax
=
56
;
settings
-
>
timing_frame_thresholds
=
{
kTestTimingFramesDelayMs
kTestOutlierFrameSizePercent
}
;
*
(
settings
-
>
VP8
(
)
)
=
VideoEncoder
:
:
GetDefaultVp8Settings
(
)
;
return
;
case
kVideoCodecVP9
:
strncpy
(
settings
-
>
plName
"
VP9
"
4
)
;
settings
-
>
codecType
=
kVideoCodecVP9
;
settings
-
>
plType
=
kTestPayloadType
;
settings
-
>
startBitrate
=
100
;
settings
-
>
minBitrate
=
kTestMinBitrateKbps
;
settings
-
>
maxBitrate
=
0
;
settings
-
>
maxFramerate
=
kTestFrameRate
;
settings
-
>
width
=
kTestWidth
;
settings
-
>
height
=
kTestHeight
;
settings
-
>
numberOfSimulcastStreams
=
0
;
settings
-
>
qpMax
=
56
;
settings
-
>
timing_frame_thresholds
=
{
kTestTimingFramesDelayMs
kTestOutlierFrameSizePercent
}
;
*
(
settings
-
>
VP9
(
)
)
=
VideoEncoder
:
:
GetDefaultVp9Settings
(
)
;
return
;
case
kVideoCodecH264
:
strncpy
(
settings
-
>
plName
"
H264
"
5
)
;
settings
-
>
codecType
=
kVideoCodecH264
;
settings
-
>
plType
=
kTestPayloadType
;
settings
-
>
startBitrate
=
kTestStartBitrateKbps
;
settings
-
>
minBitrate
=
kTestMinBitrateKbps
;
settings
-
>
maxBitrate
=
0
;
settings
-
>
maxFramerate
=
kTestFrameRate
;
settings
-
>
width
=
kTestWidth
;
settings
-
>
height
=
kTestHeight
;
settings
-
>
numberOfSimulcastStreams
=
0
;
settings
-
>
qpMax
=
56
;
settings
-
>
timing_frame_thresholds
=
{
kTestTimingFramesDelayMs
kTestOutlierFrameSizePercent
}
;
*
(
settings
-
>
H264
(
)
)
=
VideoEncoder
:
:
GetDefaultH264Settings
(
)
;
return
;
case
kVideoCodecI420
:
strncpy
(
settings
-
>
plName
"
I420
"
5
)
;
settings
-
>
codecType
=
kVideoCodecI420
;
settings
-
>
plType
=
kTestPayloadType
;
settings
-
>
startBitrate
=
3
*
kTestWidth
*
kTestHeight
*
8
*
kTestFrameRate
/
1000
/
2
;
settings
-
>
maxBitrate
=
settings
-
>
startBitrate
;
settings
-
>
maxFramerate
=
kTestFrameRate
;
settings
-
>
width
=
kTestWidth
;
settings
-
>
height
=
kTestHeight
;
settings
-
>
minBitrate
=
kTestMinBitrateKbps
;
settings
-
>
numberOfSimulcastStreams
=
0
;
return
;
case
kVideoCodecRED
:
case
kVideoCodecULPFEC
:
case
kVideoCodecFlexfec
:
case
kVideoCodecGeneric
:
case
kVideoCodecUnknown
:
RTC_NOTREACHED
(
)
;
return
;
}
}
}
}
#
endif
