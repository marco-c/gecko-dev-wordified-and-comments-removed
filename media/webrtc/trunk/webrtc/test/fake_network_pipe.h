#
ifndef
WEBRTC_TEST_FAKE_NETWORK_PIPE_H_
#
define
WEBRTC_TEST_FAKE_NETWORK_PIPE_H_
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
.
h
>
#
include
<
queue
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
random
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
Clock
;
class
CriticalSectionWrapper
;
class
PacketReceiver
;
class
NetworkPacket
{
public
:
NetworkPacket
(
const
uint8_t
*
data
size_t
length
int64_t
send_time
int64_t
arrival_time
)
:
data_
(
new
uint8_t
[
length
]
)
data_length_
(
length
)
send_time_
(
send_time
)
arrival_time_
(
arrival_time
)
{
memcpy
(
data_
.
get
(
)
data
length
)
;
}
uint8_t
*
data
(
)
const
{
return
data_
.
get
(
)
;
}
size_t
data_length
(
)
const
{
return
data_length_
;
}
int64_t
send_time
(
)
const
{
return
send_time_
;
}
int64_t
arrival_time
(
)
const
{
return
arrival_time_
;
}
void
IncrementArrivalTime
(
int64_t
extra_delay
)
{
arrival_time_
+
=
extra_delay
;
}
private
:
std
:
:
unique_ptr
<
uint8_t
[
]
>
data_
;
size_t
data_length_
;
const
int64_t
send_time_
;
int64_t
arrival_time_
;
}
;
class
FakeNetworkPipe
{
public
:
struct
Config
{
Config
(
)
{
}
size_t
queue_length_packets
=
0
;
int
queue_delay_ms
=
0
;
int
delay_standard_deviation_ms
=
0
;
int
link_capacity_kbps
=
0
;
int
loss_percent
=
0
;
bool
allow_reordering
=
false
;
int
avg_burst_loss_length
=
-
1
;
}
;
FakeNetworkPipe
(
Clock
*
clock
const
FakeNetworkPipe
:
:
Config
&
config
)
;
FakeNetworkPipe
(
Clock
*
clock
const
FakeNetworkPipe
:
:
Config
&
config
uint64_t
seed
)
;
~
FakeNetworkPipe
(
)
;
void
SetReceiver
(
PacketReceiver
*
receiver
)
;
void
SetConfig
(
const
FakeNetworkPipe
:
:
Config
&
config
)
;
void
SendPacket
(
const
uint8_t
*
packet
size_t
packet_length
)
;
void
Process
(
)
;
int64_t
TimeUntilNextProcess
(
)
const
;
float
PercentageLoss
(
)
;
int
AverageDelay
(
)
;
size_t
dropped_packets
(
)
{
return
dropped_packets_
;
}
size_t
sent_packets
(
)
{
return
sent_packets_
;
}
private
:
Clock
*
const
clock_
;
rtc
:
:
CriticalSection
lock_
;
PacketReceiver
*
packet_receiver_
;
std
:
:
queue
<
NetworkPacket
*
>
capacity_link_
;
Random
random_
;
struct
PacketArrivalTimeComparator
{
bool
operator
(
)
(
const
NetworkPacket
*
p1
const
NetworkPacket
*
p2
)
{
return
p1
-
>
arrival_time
(
)
<
p2
-
>
arrival_time
(
)
;
}
}
;
std
:
:
multiset
<
NetworkPacket
*
PacketArrivalTimeComparator
>
delay_link_
;
Config
config_
;
size_t
dropped_packets_
;
size_t
sent_packets_
;
int64_t
total_packet_delay_
;
bool
bursting_
;
double
prob_loss_bursting_
;
double
prob_start_bursting_
;
int64_t
next_process_time_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
FakeNetworkPipe
)
;
}
;
}
#
endif
