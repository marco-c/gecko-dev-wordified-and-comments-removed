#
ifndef
TEST_LAYER_FILTERING_TRANSPORT_H_
#
define
TEST_LAYER_FILTERING_TRANSPORT_H_
#
include
"
call
/
call
.
h
"
#
include
"
test
/
direct_transport
.
h
"
#
include
"
test
/
fake_network_pipe
.
h
"
#
include
"
test
/
single_threaded_task_queue
.
h
"
#
include
<
map
>
namespace
webrtc
{
namespace
test
{
class
LayerFilteringTransport
:
public
test
:
:
DirectTransport
{
public
:
LayerFilteringTransport
(
SingleThreadedTaskQueueForTesting
*
task_queue
const
FakeNetworkPipe
:
:
Config
&
config
Call
*
send_call
uint8_t
vp8_video_payload_type
uint8_t
vp9_video_payload_type
int
selected_tl
int
selected_sl
const
std
:
:
map
<
uint8_t
MediaType
>
&
payload_type_map
)
;
LayerFilteringTransport
(
SingleThreadedTaskQueueForTesting
*
task_queue
std
:
:
unique_ptr
<
FakeNetworkPipe
>
pipe
Call
*
send_call
uint8_t
vp8_video_payload_type
uint8_t
vp9_video_payload_type
int
selected_tl
int
selected_sl
)
;
bool
DiscardedLastPacket
(
)
const
;
bool
SendRtp
(
const
uint8_t
*
data
size_t
length
const
PacketOptions
&
options
)
override
;
private
:
const
uint8_t
vp8_video_payload_type_
;
const
uint8_t
vp9_video_payload_type_
;
const
int
selected_tl_
;
const
int
selected_sl_
;
bool
discarded_last_packet_
;
}
;
}
}
#
endif
