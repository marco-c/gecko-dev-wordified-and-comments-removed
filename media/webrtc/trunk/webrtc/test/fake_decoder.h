#
ifndef
WEBRTC_VIDEO_ENGINE_TEST_COMMON_FAKE_DECODER_H_
#
define
WEBRTC_VIDEO_ENGINE_TEST_COMMON_FAKE_DECODER_H_
#
include
<
vector
>
#
include
"
webrtc
/
modules
/
video_coding
/
codecs
/
interface
/
video_codec_interface
.
h
"
#
include
"
webrtc
/
system_wrappers
/
interface
/
clock
.
h
"
namespace
webrtc
{
namespace
test
{
class
FakeDecoder
:
public
VideoDecoder
{
public
:
FakeDecoder
(
)
;
virtual
~
FakeDecoder
(
)
{
}
int32_t
InitDecode
(
const
VideoCodec
*
config
int32_t
number_of_cores
)
override
;
int32_t
Decode
(
const
EncodedImage
&
input
bool
missing_frames
const
RTPFragmentationHeader
*
fragmentation
const
CodecSpecificInfo
*
codec_specific_info
int64_t
render_time_ms
)
override
;
int32_t
RegisterDecodeCompleteCallback
(
DecodedImageCallback
*
callback
)
override
;
int32_t
Release
(
)
override
;
int32_t
Reset
(
)
override
;
private
:
VideoCodec
config_
;
I420VideoFrame
frame_
;
DecodedImageCallback
*
callback_
;
}
;
class
FakeH264Decoder
:
public
FakeDecoder
{
public
:
virtual
~
FakeH264Decoder
(
)
{
}
int32_t
Decode
(
const
EncodedImage
&
input
bool
missing_frames
const
RTPFragmentationHeader
*
fragmentation
const
CodecSpecificInfo
*
codec_specific_info
int64_t
render_time_ms
)
override
;
}
;
class
FakeNullDecoder
:
public
FakeDecoder
{
public
:
virtual
~
FakeNullDecoder
(
)
{
}
int32_t
Decode
(
const
EncodedImage
&
input
bool
missing_frames
const
RTPFragmentationHeader
*
fragmentation
const
CodecSpecificInfo
*
codec_specific_info
int64_t
render_time_ms
)
override
{
return
0
;
}
}
;
}
}
#
endif
