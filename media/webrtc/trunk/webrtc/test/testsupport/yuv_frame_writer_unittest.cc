#
include
<
memory
>
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
testsupport
/
fileutils
.
h
"
#
include
"
test
/
testsupport
/
frame_writer
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
{
const
size_t
kFrameWidth
=
50
;
const
size_t
kFrameHeight
=
20
;
const
size_t
kFrameLength
=
3
*
kFrameWidth
*
kFrameHeight
/
2
;
}
class
YuvFrameWriterTest
:
public
testing
:
:
Test
{
protected
:
YuvFrameWriterTest
(
)
=
default
;
~
YuvFrameWriterTest
(
)
override
=
default
;
void
SetUp
(
)
override
{
temp_filename_
=
webrtc
:
:
test
:
:
TempFilename
(
webrtc
:
:
test
:
:
OutputPath
(
)
"
yuv_frame_writer_unittest
"
)
;
frame_writer_
.
reset
(
new
YuvFrameWriterImpl
(
temp_filename_
kFrameWidth
kFrameHeight
)
)
;
ASSERT_TRUE
(
frame_writer_
-
>
Init
(
)
)
;
}
void
TearDown
(
)
override
{
remove
(
temp_filename_
.
c_str
(
)
)
;
}
std
:
:
unique_ptr
<
FrameWriter
>
frame_writer_
;
std
:
:
string
temp_filename_
;
}
;
TEST_F
(
YuvFrameWriterTest
InitSuccess
)
{
}
TEST_F
(
YuvFrameWriterTest
FrameLength
)
{
EXPECT_EQ
(
kFrameLength
frame_writer_
-
>
FrameLength
(
)
)
;
}
TEST_F
(
YuvFrameWriterTest
WriteFrame
)
{
uint8_t
buffer
[
kFrameLength
]
;
memset
(
buffer
9
kFrameLength
)
;
bool
result
=
frame_writer_
-
>
WriteFrame
(
buffer
)
;
ASSERT_TRUE
(
result
)
;
frame_writer_
-
>
Close
(
)
;
EXPECT_EQ
(
kFrameLength
GetFileSize
(
temp_filename_
)
)
;
}
TEST_F
(
YuvFrameWriterTest
WriteFrameUninitialized
)
{
uint8_t
buffer
[
kFrameLength
]
;
YuvFrameWriterImpl
frame_writer
(
temp_filename_
kFrameWidth
kFrameHeight
)
;
EXPECT_FALSE
(
frame_writer
.
WriteFrame
(
buffer
)
)
;
}
}
}
