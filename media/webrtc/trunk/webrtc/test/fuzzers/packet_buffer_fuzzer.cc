#
include
"
modules
/
video_coding
/
packet_buffer
.
h
"
#
include
"
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
namespace
{
class
NullCallback
:
public
video_coding
:
:
OnReceivedFrameCallback
{
void
OnReceivedFrame
(
std
:
:
unique_ptr
<
video_coding
:
:
RtpFrameObject
>
frame
)
{
}
}
;
}
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
constexpr
size_t
kMinDataNeeded
=
3
;
if
(
size
<
kMinDataNeeded
)
{
return
;
}
VCMPacket
packet
;
NullCallback
callback
;
SimulatedClock
clock
(
0
)
;
rtc
:
:
scoped_refptr
<
video_coding
:
:
PacketBuffer
>
packet_buffer
(
video_coding
:
:
PacketBuffer
:
:
Create
(
&
clock
8
1024
&
callback
)
)
;
size_t
i
=
kMinDataNeeded
;
while
(
i
<
size
)
{
memcpy
(
&
packet
.
seqNum
&
data
[
i
-
kMinDataNeeded
]
2
)
;
packet
.
is_first_packet_in_frame
=
data
[
i
]
&
1
;
packet
.
markerBit
=
data
[
i
]
&
2
;
packet_buffer
-
>
InsertPacket
(
&
packet
)
;
i
+
=
kMinDataNeeded
;
}
}
}
