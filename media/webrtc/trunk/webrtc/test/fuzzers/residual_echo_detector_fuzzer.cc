#
include
<
math
.
h
>
#
include
<
string
.
h
>
#
include
<
algorithm
>
#
include
<
bitset
>
#
include
<
vector
>
#
include
"
modules
/
audio_processing
/
residual_echo_detector
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
constexpr
size_t
kNrOfUpdates
=
7
;
constexpr
size_t
kNrOfNeededInputBytes
=
2
*
kNrOfUpdates
*
sizeof
(
float
)
+
2
;
const
float
maxFuzzedValue
=
sqrtf
(
20
*
48
)
*
32768
;
if
(
size
<
kNrOfNeededInputBytes
)
{
return
;
}
size_t
read_idx
=
0
;
uint16_t
call_order_int
;
memcpy
(
&
call_order_int
&
data
[
read_idx
]
2
)
;
read_idx
+
=
2
;
std
:
:
bitset
<
16
>
call_order
(
call_order_int
)
;
ResidualEchoDetector
echo_detector
;
std
:
:
vector
<
float
>
input
(
1
)
;
echo_detector
.
AnalyzeCaptureAudio
(
input
)
;
for
(
size_t
i
=
0
;
i
<
2
*
kNrOfUpdates
;
+
+
i
)
{
RTC_DCHECK_LE
(
read_idx
+
sizeof
(
float
)
size
)
;
memcpy
(
input
.
data
(
)
&
data
[
read_idx
]
sizeof
(
float
)
)
;
read_idx
+
=
sizeof
(
float
)
;
if
(
!
isfinite
(
input
[
0
]
)
|
|
fabs
(
input
[
0
]
)
>
maxFuzzedValue
)
{
continue
;
}
if
(
call_order
[
i
]
)
{
echo_detector
.
AnalyzeRenderAudio
(
input
)
;
}
else
{
echo_detector
.
AnalyzeCaptureAudio
(
input
)
;
}
}
}
}
