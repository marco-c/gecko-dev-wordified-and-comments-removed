#
include
<
bitset
>
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_utility
.
h
"
namespace
webrtc
{
static_assert
(
kRtpExtensionNumberOfExtensions
<
=
8
"
Insufficient
bits
read
to
configure
all
header
extensions
.
Add
"
"
an
extra
byte
and
update
the
switches
.
"
)
;
void
FuzzOneInput
(
const
uint8_t
*
data
size_t
size
)
{
if
(
size
<
=
1
)
return
;
std
:
:
bitset
<
8
>
extensionMask
(
data
[
0
]
)
;
data
+
+
;
size
-
-
;
RtpPacketReceived
:
:
ExtensionManager
extensions
;
for
(
int
i
=
0
;
i
<
kRtpExtensionNumberOfExtensions
;
i
+
+
)
{
RTPExtensionType
extension_type
=
static_cast
<
RTPExtensionType
>
(
i
)
;
if
(
extensionMask
[
i
]
&
&
extension_type
!
=
kRtpExtensionNone
)
{
extensions
.
Register
(
extension_type
i
)
;
}
}
RTPHeader
rtp_header
;
RtpUtility
:
:
RtpHeaderParser
rtp_parser
(
data
size
)
;
rtp_parser
.
Parse
(
&
rtp_header
&
extensions
)
;
}
}
