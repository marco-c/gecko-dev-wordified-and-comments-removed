#
ifndef
WEBRTC_SOUND_AUTOMATICALLYCHOSENSOUNDSYSTEM_H_
#
define
WEBRTC_SOUND_AUTOMATICALLYCHOSENSOUNDSYSTEM_H_
#
include
"
webrtc
/
sound
/
soundsysteminterface
.
h
"
#
include
"
webrtc
/
sound
/
soundsystemproxy
.
h
"
#
include
"
webrtc
/
base
/
common
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
namespace
rtc
{
typedef
SoundSystemInterface
*
(
*
SoundSystemCreator
)
(
)
;
template
<
const
SoundSystemCreator
kSoundSystemCreators
[
]
int
kNumSoundSystems
>
class
AutomaticallyChosenSoundSystem
:
public
SoundSystemProxy
{
public
:
virtual
bool
Init
(
)
;
virtual
void
Terminate
(
)
;
virtual
const
char
*
GetName
(
)
const
;
private
:
rtc
:
:
scoped_ptr
<
SoundSystemInterface
>
sound_systems_
[
kNumSoundSystems
]
;
}
;
template
<
const
SoundSystemCreator
kSoundSystemCreators
[
]
int
kNumSoundSystems
>
bool
AutomaticallyChosenSoundSystem
<
kSoundSystemCreators
kNumSoundSystems
>
:
:
Init
(
)
{
if
(
wrapped_
)
{
return
true
;
}
for
(
int
i
=
0
;
i
<
kNumSoundSystems
;
+
+
i
)
{
if
(
!
sound_systems_
[
i
]
.
get
(
)
)
{
sound_systems_
[
i
]
.
reset
(
(
*
kSoundSystemCreators
[
i
]
)
(
)
)
;
}
if
(
sound_systems_
[
i
]
-
>
Init
(
)
)
{
wrapped_
=
sound_systems_
[
i
]
.
get
(
)
;
break
;
}
}
if
(
!
wrapped_
)
{
LOG
(
LS_ERROR
)
<
<
"
Failed
to
find
a
usable
sound
system
"
;
return
false
;
}
LOG
(
LS_INFO
)
<
<
"
Selected
"
<
<
wrapped_
-
>
GetName
(
)
<
<
"
sound
system
"
;
return
true
;
}
template
<
const
SoundSystemCreator
kSoundSystemCreators
[
]
int
kNumSoundSystems
>
void
AutomaticallyChosenSoundSystem
<
kSoundSystemCreators
kNumSoundSystems
>
:
:
Terminate
(
)
{
if
(
!
wrapped_
)
{
return
;
}
wrapped_
-
>
Terminate
(
)
;
wrapped_
=
NULL
;
}
template
<
const
SoundSystemCreator
kSoundSystemCreators
[
]
int
kNumSoundSystems
>
const
char
*
AutomaticallyChosenSoundSystem
<
kSoundSystemCreators
kNumSoundSystems
>
:
:
GetName
(
)
const
{
return
wrapped_
?
wrapped_
-
>
GetName
(
)
:
"
automatic
"
;
}
}
#
endif
