#
ifndef
WEBRTC_MODULES_UTILITY_INCLUDE_JVM_ANDROID_H_
#
define
WEBRTC_MODULES_UTILITY_INCLUDE_JVM_ANDROID_H_
#
include
<
jni
.
h
>
#
include
<
string
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
modules
/
utility
/
include
/
helpers_android
.
h
"
namespace
webrtc
{
class
AttachCurrentThreadIfNeeded
{
public
:
AttachCurrentThreadIfNeeded
(
)
;
~
AttachCurrentThreadIfNeeded
(
)
;
private
:
rtc
:
:
ThreadChecker
thread_checker_
;
bool
attached_
;
}
;
class
GlobalRef
{
public
:
GlobalRef
(
JNIEnv
*
jni
jobject
object
)
;
~
GlobalRef
(
)
;
jboolean
CallBooleanMethod
(
jmethodID
methodID
.
.
.
)
;
jint
CallIntMethod
(
jmethodID
methodID
.
.
.
)
;
void
CallVoidMethod
(
jmethodID
methodID
.
.
.
)
;
private
:
JNIEnv
*
const
jni_
;
const
jobject
j_object_
;
}
;
class
JavaClass
{
public
:
JavaClass
(
JNIEnv
*
jni
jclass
clazz
)
:
jni_
(
jni
)
j_class_
(
clazz
)
{
}
~
JavaClass
(
)
{
}
jmethodID
GetMethodId
(
const
char
*
name
const
char
*
signature
)
;
jmethodID
GetStaticMethodId
(
const
char
*
name
const
char
*
signature
)
;
jobject
CallStaticObjectMethod
(
jmethodID
methodID
.
.
.
)
;
protected
:
JNIEnv
*
const
jni_
;
jclass
const
j_class_
;
}
;
class
NativeRegistration
:
public
JavaClass
{
public
:
NativeRegistration
(
JNIEnv
*
jni
jclass
clazz
)
;
~
NativeRegistration
(
)
;
rtc
:
:
scoped_ptr
<
GlobalRef
>
NewObject
(
const
char
*
name
const
char
*
signature
.
.
.
)
;
private
:
JNIEnv
*
const
jni_
;
}
;
class
JNIEnvironment
{
public
:
explicit
JNIEnvironment
(
JNIEnv
*
jni
)
;
~
JNIEnvironment
(
)
;
rtc
:
:
scoped_ptr
<
NativeRegistration
>
RegisterNatives
(
const
char
*
name
const
JNINativeMethod
*
methods
int
num_methods
)
;
std
:
:
string
JavaToStdString
(
const
jstring
&
j_string
)
;
private
:
rtc
:
:
ThreadChecker
thread_checker_
;
JNIEnv
*
const
jni_
;
}
;
class
JVM
{
public
:
static
void
Initialize
(
JavaVM
*
jvm
jobject
context
)
;
static
void
Uninitialize
(
)
;
static
JVM
*
GetInstance
(
)
;
rtc
:
:
scoped_ptr
<
JNIEnvironment
>
environment
(
)
;
JavaClass
GetClass
(
const
char
*
name
)
;
JavaVM
*
jvm
(
)
const
{
return
jvm_
;
}
jobject
context
(
)
const
{
return
context_
;
}
protected
:
JVM
(
JavaVM
*
jvm
jobject
context
)
;
~
JVM
(
)
;
private
:
JNIEnv
*
jni
(
)
const
{
return
GetEnv
(
jvm_
)
;
}
rtc
:
:
ThreadChecker
thread_checker_
;
JavaVM
*
const
jvm_
;
jobject
context_
;
}
;
}
#
endif
