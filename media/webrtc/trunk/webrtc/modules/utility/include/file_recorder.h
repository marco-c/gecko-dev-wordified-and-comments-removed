#
ifndef
WEBRTC_MODULES_UTILITY_INCLUDE_FILE_RECORDER_H_
#
define
WEBRTC_MODULES_UTILITY_INCLUDE_FILE_RECORDER_H_
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
engine_configurations
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
#
include
"
webrtc
/
modules
/
media_file
/
media_file_defines
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
tick_util
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
#
include
"
webrtc
/
video_frame
.
h
"
namespace
webrtc
{
class
FileRecorder
{
public
:
static
FileRecorder
*
CreateFileRecorder
(
const
uint32_t
instanceID
const
FileFormats
fileFormat
)
;
static
void
DestroyFileRecorder
(
FileRecorder
*
recorder
)
;
virtual
int32_t
RegisterModuleFileCallback
(
FileCallback
*
callback
)
=
0
;
virtual
FileFormats
RecordingFileFormat
(
)
const
=
0
;
virtual
int32_t
StartRecordingAudioFile
(
const
char
*
fileName
const
CodecInst
&
codecInst
uint32_t
notification
)
=
0
;
virtual
int32_t
StartRecordingAudioFile
(
OutStream
&
destStream
const
CodecInst
&
codecInst
uint32_t
notification
)
=
0
;
virtual
int32_t
StopRecording
(
)
=
0
;
virtual
bool
IsRecording
(
)
const
=
0
;
virtual
int32_t
codec_info
(
CodecInst
&
codecInst
)
const
=
0
;
virtual
int32_t
RecordAudioToFile
(
const
AudioFrame
&
frame
const
TickTime
*
playoutTS
=
NULL
)
=
0
;
virtual
int32_t
StartRecordingVideoFile
(
const
char
*
fileName
const
CodecInst
&
audioCodecInst
const
VideoCodec
&
videoCodecInst
bool
videoOnly
=
false
)
=
0
;
virtual
int32_t
RecordVideoToFile
(
const
VideoFrame
&
videoFrame
)
=
0
;
protected
:
virtual
~
FileRecorder
(
)
{
}
}
;
}
#
endif
