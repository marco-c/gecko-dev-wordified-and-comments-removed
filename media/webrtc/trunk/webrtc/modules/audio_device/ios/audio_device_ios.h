#
ifndef
WEBRTC_MODULES_AUDIO_DEVICE_IOS_AUDIO_DEVICE_IOS_H_
#
define
WEBRTC_MODULES_AUDIO_DEVICE_IOS_AUDIO_DEVICE_IOS_H_
#
include
<
AudioUnit
/
AudioUnit
.
h
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
audio_device_generic
.
h
"
namespace
webrtc
{
class
FineAudioBuffer
;
class
AudioDeviceIOS
:
public
AudioDeviceGeneric
{
public
:
AudioDeviceIOS
(
)
;
~
AudioDeviceIOS
(
)
;
void
AttachAudioBuffer
(
AudioDeviceBuffer
*
audioBuffer
)
override
;
int32_t
Init
(
)
override
;
int32_t
Terminate
(
)
override
;
bool
Initialized
(
)
const
override
{
return
initialized_
;
}
int32_t
InitPlayout
(
)
override
;
bool
PlayoutIsInitialized
(
)
const
override
{
return
play_is_initialized_
;
}
int32_t
InitRecording
(
)
override
;
bool
RecordingIsInitialized
(
)
const
override
{
return
rec_is_initialized_
;
}
int32_t
StartPlayout
(
)
override
;
int32_t
StopPlayout
(
)
override
;
bool
Playing
(
)
const
override
{
return
playing_
;
}
int32_t
StartRecording
(
)
override
;
int32_t
StopRecording
(
)
override
;
bool
Recording
(
)
const
override
{
return
recording_
;
}
int32_t
SetLoudspeakerStatus
(
bool
enable
)
override
;
int32_t
GetLoudspeakerStatus
(
bool
&
enabled
)
const
override
;
int32_t
PlayoutDelay
(
uint16_t
&
delayMS
)
const
override
;
int32_t
RecordingDelay
(
uint16_t
&
delayMS
)
const
override
;
int
GetPlayoutAudioParameters
(
AudioParameters
*
params
)
const
override
;
int
GetRecordAudioParameters
(
AudioParameters
*
params
)
const
override
;
int32_t
PlayoutBuffer
(
AudioDeviceModule
:
:
BufferType
&
type
uint16_t
&
sizeMS
)
const
override
;
int32_t
ActiveAudioLayer
(
AudioDeviceModule
:
:
AudioLayer
&
audioLayer
)
const
;
int32_t
ResetAudioDevice
(
)
override
;
int32_t
PlayoutIsAvailable
(
bool
&
available
)
override
;
int32_t
RecordingIsAvailable
(
bool
&
available
)
override
;
int32_t
SetAGC
(
bool
enable
)
override
;
bool
AGC
(
)
const
override
;
int16_t
PlayoutDevices
(
)
override
;
int16_t
RecordingDevices
(
)
override
;
int32_t
PlayoutDeviceName
(
uint16_t
index
char
name
[
kAdmMaxDeviceNameSize
]
char
guid
[
kAdmMaxGuidSize
]
)
override
;
int32_t
RecordingDeviceName
(
uint16_t
index
char
name
[
kAdmMaxDeviceNameSize
]
char
guid
[
kAdmMaxGuidSize
]
)
override
;
int32_t
SetPlayoutDevice
(
uint16_t
index
)
override
;
int32_t
SetPlayoutDevice
(
AudioDeviceModule
:
:
WindowsDeviceType
device
)
override
;
int32_t
SetRecordingDevice
(
uint16_t
index
)
override
;
int32_t
SetRecordingDevice
(
AudioDeviceModule
:
:
WindowsDeviceType
device
)
override
;
int32_t
SetWaveOutVolume
(
uint16_t
volumeLeft
uint16_t
volumeRight
)
override
;
int32_t
WaveOutVolume
(
uint16_t
&
volumeLeft
uint16_t
&
volumeRight
)
const
override
;
int32_t
InitSpeaker
(
)
override
;
bool
SpeakerIsInitialized
(
)
const
override
;
int32_t
InitMicrophone
(
)
override
;
bool
MicrophoneIsInitialized
(
)
const
override
;
int32_t
SpeakerVolumeIsAvailable
(
bool
&
available
)
override
;
int32_t
SetSpeakerVolume
(
uint32_t
volume
)
override
;
int32_t
SpeakerVolume
(
uint32_t
&
volume
)
const
override
;
int32_t
MaxSpeakerVolume
(
uint32_t
&
maxVolume
)
const
override
;
int32_t
MinSpeakerVolume
(
uint32_t
&
minVolume
)
const
override
;
int32_t
SpeakerVolumeStepSize
(
uint16_t
&
stepSize
)
const
override
;
int32_t
MicrophoneVolumeIsAvailable
(
bool
&
available
)
override
;
int32_t
SetMicrophoneVolume
(
uint32_t
volume
)
override
;
int32_t
MicrophoneVolume
(
uint32_t
&
volume
)
const
override
;
int32_t
MaxMicrophoneVolume
(
uint32_t
&
maxVolume
)
const
override
;
int32_t
MinMicrophoneVolume
(
uint32_t
&
minVolume
)
const
override
;
int32_t
MicrophoneVolumeStepSize
(
uint16_t
&
stepSize
)
const
override
;
int32_t
MicrophoneMuteIsAvailable
(
bool
&
available
)
override
;
int32_t
SetMicrophoneMute
(
bool
enable
)
override
;
int32_t
MicrophoneMute
(
bool
&
enabled
)
const
override
;
int32_t
SpeakerMuteIsAvailable
(
bool
&
available
)
override
;
int32_t
SetSpeakerMute
(
bool
enable
)
override
;
int32_t
SpeakerMute
(
bool
&
enabled
)
const
override
;
int32_t
MicrophoneBoostIsAvailable
(
bool
&
available
)
override
;
int32_t
SetMicrophoneBoost
(
bool
enable
)
override
;
int32_t
MicrophoneBoost
(
bool
&
enabled
)
const
override
;
int32_t
StereoPlayoutIsAvailable
(
bool
&
available
)
override
;
int32_t
SetStereoPlayout
(
bool
enable
)
override
;
int32_t
StereoPlayout
(
bool
&
enabled
)
const
override
;
int32_t
StereoRecordingIsAvailable
(
bool
&
available
)
override
;
int32_t
SetStereoRecording
(
bool
enable
)
override
;
int32_t
StereoRecording
(
bool
&
enabled
)
const
override
;
int32_t
SetPlayoutBuffer
(
const
AudioDeviceModule
:
:
BufferType
type
uint16_t
sizeMS
)
override
;
int32_t
CPULoad
(
uint16_t
&
load
)
const
override
;
bool
PlayoutWarning
(
)
const
override
;
bool
PlayoutError
(
)
const
override
;
bool
RecordingWarning
(
)
const
override
;
bool
RecordingError
(
)
const
override
;
void
ClearPlayoutWarning
(
)
override
{
}
void
ClearPlayoutError
(
)
override
{
}
void
ClearRecordingWarning
(
)
override
{
}
void
ClearRecordingError
(
)
override
{
}
private
:
void
UpdateAudioDeviceBuffer
(
)
;
void
RegisterNotificationObservers
(
)
;
void
UnregisterNotificationObservers
(
)
;
void
SetupAudioBuffersForActiveAudioSession
(
)
;
bool
SetupAndInitializeVoiceProcessingAudioUnit
(
)
;
bool
RestartAudioUnitWithNewFormat
(
float
sample_rate
)
;
bool
InitPlayOrRecord
(
)
;
void
ShutdownPlayOrRecord
(
)
;
void
DisposeAudioUnit
(
)
;
static
OSStatus
RecordedDataIsAvailable
(
void
*
in_ref_con
AudioUnitRenderActionFlags
*
io_action_flags
const
AudioTimeStamp
*
time_stamp
UInt32
in_bus_number
UInt32
in_number_frames
AudioBufferList
*
io_data
)
;
OSStatus
OnRecordedDataIsAvailable
(
AudioUnitRenderActionFlags
*
io_action_flags
const
AudioTimeStamp
*
time_stamp
UInt32
in_bus_number
UInt32
in_number_frames
)
;
static
OSStatus
GetPlayoutData
(
void
*
in_ref_con
AudioUnitRenderActionFlags
*
io_action_flags
const
AudioTimeStamp
*
time_stamp
UInt32
in_bus_number
UInt32
in_number_frames
AudioBufferList
*
io_data
)
;
OSStatus
OnGetPlayoutData
(
AudioUnitRenderActionFlags
*
io_action_flags
UInt32
in_number_frames
AudioBufferList
*
io_data
)
;
rtc
:
:
ThreadChecker
thread_checker_
;
AudioDeviceBuffer
*
audio_device_buffer_
;
AudioParameters
playout_parameters_
;
AudioParameters
record_parameters_
;
AudioUnit
vpio_unit_
;
rtc
:
:
scoped_ptr
<
FineAudioBuffer
>
fine_audio_buffer_
;
rtc
:
:
scoped_ptr
<
SInt8
[
]
>
playout_audio_buffer_
;
AudioBufferList
audio_record_buffer_list_
;
rtc
:
:
scoped_ptr
<
SInt8
[
]
>
record_audio_buffer_
;
volatile
int
recording_
;
volatile
int
playing_
;
bool
initialized_
;
bool
rec_is_initialized_
;
bool
play_is_initialized_
;
void
*
audio_interruption_observer_
;
void
*
route_change_observer_
;
AudioStreamBasicDescription
application_format_
;
}
;
}
#
endif
