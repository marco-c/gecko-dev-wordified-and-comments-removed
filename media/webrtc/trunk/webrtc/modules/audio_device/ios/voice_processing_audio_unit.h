#
ifndef
WEBRTC_MODULES_AUDIO_DEVICE_IOS_VOICE_PROCESSING_AUDIO_UNIT_H_
#
define
WEBRTC_MODULES_AUDIO_DEVICE_IOS_VOICE_PROCESSING_AUDIO_UNIT_H_
#
include
<
AudioUnit
/
AudioUnit
.
h
>
namespace
webrtc
{
class
VoiceProcessingAudioUnitObserver
{
public
:
virtual
OSStatus
OnDeliverRecordedData
(
AudioUnitRenderActionFlags
*
flags
const
AudioTimeStamp
*
time_stamp
UInt32
bus_number
UInt32
num_frames
AudioBufferList
*
io_data
)
=
0
;
virtual
OSStatus
OnGetPlayoutData
(
AudioUnitRenderActionFlags
*
io_action_flags
const
AudioTimeStamp
*
time_stamp
UInt32
bus_number
UInt32
num_frames
AudioBufferList
*
io_data
)
=
0
;
protected
:
~
VoiceProcessingAudioUnitObserver
(
)
{
}
}
;
class
VoiceProcessingAudioUnit
{
public
:
explicit
VoiceProcessingAudioUnit
(
VoiceProcessingAudioUnitObserver
*
observer
)
;
~
VoiceProcessingAudioUnit
(
)
;
enum
State
:
int32_t
{
kInitRequired
kUninitialized
kInitialized
kStarted
}
;
static
const
UInt32
kBytesPerSample
;
bool
Init
(
)
;
VoiceProcessingAudioUnit
:
:
State
GetState
(
)
const
;
bool
Initialize
(
Float64
sample_rate
)
;
bool
Start
(
)
;
bool
Stop
(
)
;
bool
Uninitialize
(
)
;
OSStatus
Render
(
AudioUnitRenderActionFlags
*
flags
const
AudioTimeStamp
*
time_stamp
UInt32
output_bus_number
UInt32
num_frames
AudioBufferList
*
io_data
)
;
private
:
static
OSStatus
OnGetPlayoutData
(
void
*
in_ref_con
AudioUnitRenderActionFlags
*
flags
const
AudioTimeStamp
*
time_stamp
UInt32
bus_number
UInt32
num_frames
AudioBufferList
*
io_data
)
;
static
OSStatus
OnDeliverRecordedData
(
void
*
in_ref_con
AudioUnitRenderActionFlags
*
flags
const
AudioTimeStamp
*
time_stamp
UInt32
bus_number
UInt32
num_frames
AudioBufferList
*
io_data
)
;
OSStatus
NotifyGetPlayoutData
(
AudioUnitRenderActionFlags
*
flags
const
AudioTimeStamp
*
time_stamp
UInt32
bus_number
UInt32
num_frames
AudioBufferList
*
io_data
)
;
OSStatus
NotifyDeliverRecordedData
(
AudioUnitRenderActionFlags
*
flags
const
AudioTimeStamp
*
time_stamp
UInt32
bus_number
UInt32
num_frames
AudioBufferList
*
io_data
)
;
AudioStreamBasicDescription
GetFormat
(
Float64
sample_rate
)
const
;
void
DisposeAudioUnit
(
)
;
VoiceProcessingAudioUnitObserver
*
observer_
;
AudioUnit
vpio_unit_
;
VoiceProcessingAudioUnit
:
:
State
state_
;
}
;
}
#
endif
