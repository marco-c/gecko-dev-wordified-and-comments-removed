#
ifndef
WEBRTC_MODULES_AUDIO_DEVICE_ANDROID_AUDIO_MANAGER_H_
#
define
WEBRTC_MODULES_AUDIO_DEVICE_ANDROID_AUDIO_MANAGER_H_
#
include
<
jni
.
h
>
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
android
/
audio_common
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
include
/
audio_device_defines
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
audio_device_generic
.
h
"
#
include
"
webrtc
/
modules
/
utility
/
interface
/
helpers_android
.
h
"
namespace
webrtc
{
class
AudioParameters
{
public
:
enum
{
kBitsPerSample
=
16
}
;
AudioParameters
(
)
:
sample_rate_
(
0
)
channels_
(
0
)
frames_per_buffer_
(
0
)
bits_per_sample_
(
kBitsPerSample
)
{
}
AudioParameters
(
int
sample_rate
int
channels
)
:
sample_rate_
(
sample_rate
)
channels_
(
channels
)
frames_per_buffer_
(
sample_rate
/
100
)
bits_per_sample_
(
kBitsPerSample
)
{
}
void
reset
(
int
sample_rate
int
channels
)
{
sample_rate_
=
sample_rate
;
channels_
=
channels
;
frames_per_buffer_
=
(
sample_rate
/
100
)
;
}
int
sample_rate
(
)
const
{
return
sample_rate_
;
}
int
channels
(
)
const
{
return
channels_
;
}
int
frames_per_buffer
(
)
const
{
return
frames_per_buffer_
;
}
bool
is_valid
(
)
const
{
return
(
(
sample_rate_
>
0
)
&
&
(
channels_
>
0
)
&
&
(
frames_per_buffer_
>
0
)
)
;
}
int
GetBytesPerFrame
(
)
const
{
return
channels_
*
bits_per_sample_
/
8
;
}
int
GetBytesPerBuffer
(
)
const
{
return
frames_per_buffer_
*
GetBytesPerFrame
(
)
;
}
private
:
int
sample_rate_
;
int
channels_
;
int
frames_per_buffer_
;
const
int
bits_per_sample_
;
}
;
class
AudioManager
{
public
:
static
void
SetAndroidAudioDeviceObjects
(
void
*
jvm
void
*
context
)
;
static
void
ClearAndroidAudioDeviceObjects
(
)
;
AudioManager
(
)
;
~
AudioManager
(
)
;
bool
Init
(
)
;
bool
Close
(
)
;
AudioParameters
GetPlayoutAudioParameters
(
)
const
;
AudioParameters
GetRecordAudioParameters
(
)
const
;
bool
initialized
(
)
const
{
return
initialized_
;
}
private
:
static
void
JNICALL
CacheAudioParameters
(
JNIEnv
*
env
jobject
obj
jint
sample_rate
jint
channels
jlong
nativeAudioManager
)
;
void
OnCacheAudioParameters
(
JNIEnv
*
env
jint
sample_rate
jint
channels
)
;
bool
HasDeviceObjects
(
)
;
void
CreateJavaInstance
(
)
;
rtc
:
:
ThreadChecker
thread_checker_
;
jobject
j_audio_manager_
;
bool
initialized_
;
AudioParameters
playout_parameters_
;
AudioParameters
record_parameters_
;
}
;
}
#
endif
