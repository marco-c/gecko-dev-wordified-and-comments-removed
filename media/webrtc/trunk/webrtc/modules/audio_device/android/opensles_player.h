#
ifndef
WEBRTC_MODULES_AUDIO_DEVICE_ANDROID_OPENSLES_PLAYER_H_
#
define
WEBRTC_MODULES_AUDIO_DEVICE_ANDROID_OPENSLES_PLAYER_H_
#
include
<
SLES
/
OpenSLES
.
h
>
#
include
<
SLES
/
OpenSLES_Android
.
h
>
#
include
<
SLES
/
OpenSLES_AndroidConfiguration
.
h
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
android
/
audio_common
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
android
/
audio_manager
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
android
/
opensles_common
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
include
/
audio_device_defines
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
audio_device_generic
.
h
"
#
include
"
webrtc
/
modules
/
utility
/
include
/
helpers_android
.
h
"
namespace
webrtc
{
class
FineAudioBuffer
;
class
OpenSLESPlayer
{
public
:
static
const
int
kNumOfOpenSLESBuffers
=
4
;
static
int32_t
SetAndroidAudioDeviceObjects
(
void
*
javaVM
void
*
context
)
{
return
0
;
}
static
void
ClearAndroidAudioDeviceObjects
(
)
{
}
explicit
OpenSLESPlayer
(
AudioManager
*
audio_manager
)
;
~
OpenSLESPlayer
(
)
;
int
Init
(
)
;
int
Terminate
(
)
;
int
InitPlayout
(
)
;
bool
PlayoutIsInitialized
(
)
const
{
return
initialized_
;
}
int
StartPlayout
(
)
;
int
StopPlayout
(
)
;
bool
Playing
(
)
const
{
return
playing_
;
}
int
SpeakerVolumeIsAvailable
(
bool
&
available
)
;
int
SetSpeakerVolume
(
uint32_t
volume
)
;
int
SpeakerVolume
(
uint32_t
&
volume
)
const
;
int
MaxSpeakerVolume
(
uint32_t
&
maxVolume
)
const
;
int
MinSpeakerVolume
(
uint32_t
&
minVolume
)
const
;
void
AttachAudioBuffer
(
AudioDeviceBuffer
*
audioBuffer
)
;
private
:
static
void
SimpleBufferQueueCallback
(
SLAndroidSimpleBufferQueueItf
caller
void
*
context
)
;
void
FillBufferQueue
(
)
;
void
EnqueuePlayoutData
(
)
;
SLDataFormat_PCM
CreatePCMConfiguration
(
size_t
channels
int
sample_rate
size_t
bits_per_sample
)
;
void
AllocateDataBuffers
(
)
;
bool
CreateEngine
(
)
;
void
DestroyEngine
(
)
;
bool
CreateMix
(
)
;
void
DestroyMix
(
)
;
bool
CreateAudioPlayer
(
)
;
void
DestroyAudioPlayer
(
)
;
SLuint32
GetPlayState
(
)
const
;
rtc
:
:
ThreadChecker
thread_checker_
;
rtc
:
:
ThreadChecker
thread_checker_opensles_
;
const
AudioParameters
audio_parameters_
;
AudioDeviceBuffer
*
audio_device_buffer_
;
bool
initialized_
;
bool
playing_
;
SLDataFormat_PCM
pcm_format_
;
size_t
bytes_per_buffer_
;
rtc
:
:
scoped_ptr
<
SLint8
[
]
>
audio_buffers_
[
kNumOfOpenSLESBuffers
]
;
rtc
:
:
scoped_ptr
<
FineAudioBuffer
>
fine_buffer_
;
int
buffer_index_
;
SLObjectItf
engine_object_
;
SLEngineItf
engine_
;
webrtc
:
:
ScopedSLObjectItf
output_mix_
;
webrtc
:
:
ScopedSLObjectItf
player_object_
;
SLPlayItf
player_
;
SLAndroidSimpleBufferQueueItf
simple_buffer_queue_
;
SLVolumeItf
volume_
;
uint32_t
last_play_time_
;
void
*
opensles_lib_
;
typedef
SLresult
(
*
slCreateEngine_t
)
(
SLObjectItf
*
SLuint32
const
SLEngineOption
*
SLuint32
const
SLInterfaceID
*
const
SLboolean
*
)
;
slCreateEngine_t
slCreateEngine_
;
SLInterfaceID
SL_IID_ENGINE_
;
SLInterfaceID
SL_IID_ANDROIDCONFIGURATION_
;
SLInterfaceID
SL_IID_BUFFERQUEUE_
;
SLInterfaceID
SL_IID_VOLUME_
;
SLInterfaceID
SL_IID_PLAY_
;
}
;
}
#
endif
