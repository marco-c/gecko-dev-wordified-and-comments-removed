#
ifndef
WEBRTC_MODULES_AUDIO_DEVICE_ANDROID_AUDIO_TRACK_JNI_H_
#
define
WEBRTC_MODULES_AUDIO_DEVICE_ANDROID_AUDIO_TRACK_JNI_H_
#
include
<
jni
.
h
>
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
android
/
audio_common
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
android
/
audio_manager
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
include
/
audio_device_defines
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
audio_device_generic
.
h
"
#
include
"
webrtc
/
modules
/
utility
/
interface
/
helpers_android
.
h
"
namespace
webrtc
{
class
AudioTrackJni
:
public
PlayoutDelayProvider
{
public
:
static
void
SetAndroidAudioDeviceObjects
(
void
*
jvm
void
*
context
)
;
static
void
ClearAndroidAudioDeviceObjects
(
)
;
AudioTrackJni
(
AudioManager
*
audio_manager
)
;
~
AudioTrackJni
(
)
;
int32_t
Init
(
)
;
int32_t
Terminate
(
)
;
int32_t
InitPlayout
(
)
;
bool
PlayoutIsInitialized
(
)
const
{
return
initialized_
;
}
int32_t
StartPlayout
(
)
;
int32_t
StopPlayout
(
)
;
bool
Playing
(
)
const
{
return
playing_
;
}
int
SpeakerVolumeIsAvailable
(
bool
&
available
)
;
int
SetSpeakerVolume
(
uint32_t
volume
)
;
int
SpeakerVolume
(
uint32_t
&
volume
)
const
;
int
MaxSpeakerVolume
(
uint32_t
&
max_volume
)
const
;
int
MinSpeakerVolume
(
uint32_t
&
min_volume
)
const
;
int32_t
PlayoutDelay
(
uint16_t
&
delayMS
)
const
;
void
AttachAudioBuffer
(
AudioDeviceBuffer
*
audioBuffer
)
;
protected
:
virtual
int
PlayoutDelayMs
(
)
;
private
:
static
void
JNICALL
CacheDirectBufferAddress
(
JNIEnv
*
env
jobject
obj
jobject
byte_buffer
jlong
nativeAudioTrack
)
;
void
OnCacheDirectBufferAddress
(
JNIEnv
*
env
jobject
byte_buffer
)
;
static
void
JNICALL
GetPlayoutData
(
JNIEnv
*
env
jobject
obj
jint
length
jlong
nativeAudioTrack
)
;
void
OnGetPlayoutData
(
int
length
)
;
bool
HasDeviceObjects
(
)
;
void
CreateJavaInstance
(
)
;
rtc
:
:
ThreadChecker
thread_checker_
;
rtc
:
:
ThreadChecker
thread_checker_java_
;
const
AudioParameters
audio_parameters_
;
jobject
j_audio_track_
;
void
*
direct_buffer_address_
;
int
direct_buffer_capacity_in_bytes_
;
int
frames_per_buffer_
;
bool
initialized_
;
bool
playing_
;
AudioDeviceBuffer
*
audio_device_buffer_
;
int
delay_in_milliseconds_
;
}
;
}
#
endif
