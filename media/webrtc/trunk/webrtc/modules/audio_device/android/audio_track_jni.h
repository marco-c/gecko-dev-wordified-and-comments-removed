#
ifndef
WEBRTC_MODULES_AUDIO_DEVICE_ANDROID_AUDIO_TRACK_JNI_H_
#
define
WEBRTC_MODULES_AUDIO_DEVICE_ANDROID_AUDIO_TRACK_JNI_H_
#
include
<
jni
.
h
>
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
android
/
audio_common
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
android
/
audio_manager
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
include
/
audio_device_defines
.
h
"
#
include
"
webrtc
/
modules
/
audio_device
/
audio_device_generic
.
h
"
#
include
"
webrtc
/
modules
/
utility
/
include
/
helpers_android
.
h
"
#
include
"
webrtc
/
modules
/
utility
/
include
/
jvm_android
.
h
"
namespace
webrtc
{
class
AudioTrackJni
{
public
:
class
JavaAudioTrack
{
public
:
JavaAudioTrack
(
NativeRegistration
*
native_registration
rtc
:
:
scoped_ptr
<
GlobalRef
>
audio_track
)
;
~
JavaAudioTrack
(
)
;
void
InitPlayout
(
int
sample_rate
int
channels
)
;
bool
StartPlayout
(
)
;
bool
StopPlayout
(
)
;
bool
SetStreamVolume
(
int
volume
)
;
int
GetStreamMaxVolume
(
)
;
int
GetStreamVolume
(
)
;
private
:
rtc
:
:
scoped_ptr
<
GlobalRef
>
audio_track_
;
jmethodID
init_playout_
;
jmethodID
start_playout_
;
jmethodID
stop_playout_
;
jmethodID
set_stream_volume_
;
jmethodID
get_stream_max_volume_
;
jmethodID
get_stream_volume_
;
}
;
explicit
AudioTrackJni
(
AudioManager
*
audio_manager
)
;
~
AudioTrackJni
(
)
;
int32_t
Init
(
)
;
int32_t
Terminate
(
)
;
int32_t
InitPlayout
(
)
;
bool
PlayoutIsInitialized
(
)
const
{
return
initialized_
;
}
int32_t
StartPlayout
(
)
;
int32_t
StopPlayout
(
)
;
bool
Playing
(
)
const
{
return
playing_
;
}
int
SpeakerVolumeIsAvailable
(
bool
&
available
)
;
int
SetSpeakerVolume
(
uint32_t
volume
)
;
int
SpeakerVolume
(
uint32_t
&
volume
)
const
;
int
MaxSpeakerVolume
(
uint32_t
&
max_volume
)
const
;
int
MinSpeakerVolume
(
uint32_t
&
min_volume
)
const
;
void
AttachAudioBuffer
(
AudioDeviceBuffer
*
audioBuffer
)
;
int32_t
PlayoutDeviceName
(
uint16_t
index
char
name
[
kAdmMaxDeviceNameSize
]
char
guid
[
kAdmMaxGuidSize
]
)
;
private
:
static
void
JNICALL
CacheDirectBufferAddress
(
JNIEnv
*
env
jobject
obj
jobject
byte_buffer
jlong
nativeAudioTrack
)
;
void
OnCacheDirectBufferAddress
(
JNIEnv
*
env
jobject
byte_buffer
)
;
static
void
JNICALL
GetPlayoutData
(
JNIEnv
*
env
jobject
obj
jint
length
jlong
nativeAudioTrack
)
;
void
OnGetPlayoutData
(
size_t
length
)
;
rtc
:
:
ThreadChecker
thread_checker_
;
rtc
:
:
ThreadChecker
thread_checker_java_
;
AttachCurrentThreadIfNeeded
attach_thread_if_needed_
;
rtc
:
:
scoped_ptr
<
JNIEnvironment
>
j_environment_
;
rtc
:
:
scoped_ptr
<
NativeRegistration
>
j_native_registration_
;
rtc
:
:
scoped_ptr
<
AudioTrackJni
:
:
JavaAudioTrack
>
j_audio_track_
;
const
AudioParameters
audio_parameters_
;
void
*
direct_buffer_address_
;
size_t
direct_buffer_capacity_in_bytes_
;
size_t
frames_per_buffer_
;
bool
initialized_
;
bool
playing_
;
AudioDeviceBuffer
*
audio_device_buffer_
;
}
;
}
#
endif
