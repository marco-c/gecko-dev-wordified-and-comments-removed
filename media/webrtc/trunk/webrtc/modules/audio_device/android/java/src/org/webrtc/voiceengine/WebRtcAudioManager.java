package
org
.
webrtc
.
voiceengine
;
import
android
.
content
.
Context
;
import
android
.
content
.
pm
.
PackageManager
;
import
android
.
media
.
AudioManager
;
import
android
.
util
.
Log
;
class
WebRtcAudioManager
{
private
static
final
boolean
DEBUG
=
false
;
private
static
final
String
TAG
=
"
WebRtcAudioManager
"
;
private
static
final
int
SAMPLE_RATE_HZ
=
44100
;
private
static
final
int
CHANNELS
=
1
;
private
final
long
nativeAudioManager
;
private
final
Context
context
;
private
final
AudioManager
audioManager
;
private
boolean
initialized
=
false
;
private
int
nativeSampleRate
;
private
int
nativeChannels
;
private
int
savedAudioMode
=
AudioManager
.
MODE_INVALID
;
private
boolean
savedIsSpeakerPhoneOn
=
false
;
WebRtcAudioManager
(
Context
context
long
nativeAudioManager
)
{
Logd
(
"
ctor
"
+
WebRtcAudioUtils
.
getThreadInfo
(
)
)
;
this
.
context
=
context
;
this
.
nativeAudioManager
=
nativeAudioManager
;
audioManager
=
(
AudioManager
)
context
.
getSystemService
(
Context
.
AUDIO_SERVICE
)
;
if
(
DEBUG
)
{
WebRtcAudioUtils
.
logDeviceInfo
(
TAG
)
;
}
storeAudioParameters
(
)
;
nativeCacheAudioParameters
(
nativeSampleRate
nativeChannels
nativeAudioManager
)
;
}
private
boolean
init
(
)
{
Logd
(
"
init
"
+
WebRtcAudioUtils
.
getThreadInfo
(
)
)
;
if
(
initialized
)
{
return
true
;
}
savedAudioMode
=
audioManager
.
getMode
(
)
;
savedIsSpeakerPhoneOn
=
audioManager
.
isSpeakerphoneOn
(
)
;
audioManager
.
setMode
(
AudioManager
.
MODE_IN_COMMUNICATION
)
;
if
(
DEBUG
)
{
Logd
(
"
savedAudioMode
:
"
+
savedAudioMode
)
;
Logd
(
"
savedIsSpeakerPhoneOn
:
"
+
savedIsSpeakerPhoneOn
)
;
Logd
(
"
hasEarpiece
:
"
+
hasEarpiece
(
)
)
;
}
initialized
=
true
;
return
true
;
}
private
void
dispose
(
)
{
Logd
(
"
dispose
"
+
WebRtcAudioUtils
.
getThreadInfo
(
)
)
;
if
(
!
initialized
)
{
return
;
}
setSpeakerphoneOn
(
savedIsSpeakerPhoneOn
)
;
audioManager
.
setMode
(
savedAudioMode
)
;
}
private
void
storeAudioParameters
(
)
{
nativeChannels
=
CHANNELS
;
if
(
!
WebRtcAudioUtils
.
runningOnJellyBeanMR1OrHigher
(
)
)
{
nativeSampleRate
=
SAMPLE_RATE_HZ
;
}
else
{
String
sampleRateString
=
audioManager
.
getProperty
(
AudioManager
.
PROPERTY_OUTPUT_SAMPLE_RATE
)
;
nativeSampleRate
=
(
sampleRateString
=
=
null
)
?
SAMPLE_RATE_HZ
:
Integer
.
parseInt
(
sampleRateString
)
;
}
Logd
(
"
nativeSampleRate
:
"
+
nativeSampleRate
)
;
Logd
(
"
nativeChannels
:
"
+
nativeChannels
)
;
}
private
void
setSpeakerphoneOn
(
boolean
on
)
{
boolean
wasOn
=
audioManager
.
isSpeakerphoneOn
(
)
;
if
(
wasOn
=
=
on
)
{
return
;
}
audioManager
.
setSpeakerphoneOn
(
on
)
;
}
private
boolean
hasEarpiece
(
)
{
return
context
.
getPackageManager
(
)
.
hasSystemFeature
(
PackageManager
.
FEATURE_TELEPHONY
)
;
}
private
static
void
assertTrue
(
boolean
condition
)
{
if
(
!
condition
)
{
throw
new
AssertionError
(
"
Expected
condition
to
be
true
"
)
;
}
}
private
static
void
Logd
(
String
msg
)
{
Log
.
d
(
TAG
msg
)
;
}
private
static
void
Loge
(
String
msg
)
{
Log
.
e
(
TAG
msg
)
;
}
private
native
void
nativeCacheAudioParameters
(
int
sampleRate
int
channels
long
nativeAudioManager
)
;
}
