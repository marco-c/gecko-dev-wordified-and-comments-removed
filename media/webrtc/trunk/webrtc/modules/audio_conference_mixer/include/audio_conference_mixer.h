#
ifndef
WEBRTC_MODULES_AUDIO_CONFERENCE_MIXER_INCLUDE_AUDIO_CONFERENCE_MIXER_H_
#
define
WEBRTC_MODULES_AUDIO_CONFERENCE_MIXER_INCLUDE_AUDIO_CONFERENCE_MIXER_H_
#
include
"
webrtc
/
modules
/
audio_conference_mixer
/
include
/
audio_conference_mixer_defines
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
namespace
webrtc
{
class
AudioMixerOutputReceiver
;
class
MixerParticipant
;
class
Trace
;
class
AudioConferenceMixer
:
public
Module
{
public
:
enum
{
kMaximumAmountOfMixedParticipants
=
3
}
;
enum
Frequency
{
kNbInHz
=
8000
kWbInHz
=
16000
kSwbInHz
=
32000
kFbInHz
=
48000
kLowestPossible
=
-
1
kDefaultFrequency
=
kWbInHz
}
;
static
AudioConferenceMixer
*
Create
(
int
id
)
;
virtual
~
AudioConferenceMixer
(
)
{
}
int64_t
TimeUntilNextProcess
(
)
override
=
0
;
int32_t
Process
(
)
override
=
0
;
virtual
int32_t
RegisterMixedStreamCallback
(
AudioMixerOutputReceiver
*
receiver
)
=
0
;
virtual
int32_t
UnRegisterMixedStreamCallback
(
)
=
0
;
virtual
int32_t
SetMixabilityStatus
(
MixerParticipant
*
participant
bool
mixable
)
=
0
;
virtual
bool
MixabilityStatus
(
const
MixerParticipant
&
participant
)
const
=
0
;
virtual
int32_t
SetAnonymousMixabilityStatus
(
MixerParticipant
*
participant
bool
mixable
)
=
0
;
virtual
bool
AnonymousMixabilityStatus
(
const
MixerParticipant
&
participant
)
const
=
0
;
virtual
int32_t
SetMinimumMixingFrequency
(
Frequency
freq
)
=
0
;
protected
:
AudioConferenceMixer
(
)
{
}
}
;
}
#
endif
