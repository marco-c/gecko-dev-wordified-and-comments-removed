#
ifndef
WEBRTC_MODULES_AUDIO_CONFERENCE_MIXER_SOURCE_AUDIO_CONFERENCE_MIXER_IMPL_H_
#
define
WEBRTC_MODULES_AUDIO_CONFERENCE_MIXER_SOURCE_AUDIO_CONFERENCE_MIXER_IMPL_H_
#
include
<
list
>
#
include
<
map
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
engine_configurations
.
h
"
#
include
"
webrtc
/
modules
/
audio_conference_mixer
/
include
/
audio_conference_mixer
.
h
"
#
include
"
webrtc
/
modules
/
audio_conference_mixer
/
source
/
memory_pool
.
h
"
#
include
"
webrtc
/
modules
/
audio_conference_mixer
/
source
/
time_scheduler
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
namespace
webrtc
{
class
AudioProcessing
;
class
CriticalSectionWrapper
;
typedef
std
:
:
list
<
AudioFrame
*
>
AudioFrameList
;
typedef
std
:
:
list
<
MixerParticipant
*
>
MixerParticipantList
;
class
MixHistory
{
public
:
MixHistory
(
)
;
~
MixHistory
(
)
;
bool
IsMixed
(
)
const
;
bool
WasMixed
(
)
const
;
int32_t
SetIsMixed
(
bool
mixed
)
;
void
ResetMixedStatus
(
)
;
private
:
bool
_isMixed
;
}
;
class
AudioConferenceMixerImpl
:
public
AudioConferenceMixer
{
public
:
enum
{
kProcessPeriodicityInMs
=
10
}
;
AudioConferenceMixerImpl
(
int
id
)
;
~
AudioConferenceMixerImpl
(
)
;
bool
Init
(
)
;
int64_t
TimeUntilNextProcess
(
)
override
;
int32_t
Process
(
)
override
;
int32_t
RegisterMixedStreamCallback
(
AudioMixerOutputReceiver
*
mixReceiver
)
override
;
int32_t
UnRegisterMixedStreamCallback
(
)
override
;
int32_t
SetMixabilityStatus
(
MixerParticipant
*
participant
bool
mixable
)
override
;
bool
MixabilityStatus
(
const
MixerParticipant
&
participant
)
const
override
;
int32_t
SetMinimumMixingFrequency
(
Frequency
freq
)
override
;
int32_t
SetAnonymousMixabilityStatus
(
MixerParticipant
*
participant
bool
mixable
)
override
;
bool
AnonymousMixabilityStatus
(
const
MixerParticipant
&
participant
)
const
override
;
private
:
enum
{
DEFAULT_AUDIO_FRAME_POOLSIZE
=
50
}
;
int32_t
SetOutputFrequency
(
const
Frequency
&
frequency
)
;
Frequency
OutputFrequency
(
)
const
;
void
UpdateToMix
(
AudioFrameList
*
mixList
AudioFrameList
*
rampOutList
std
:
:
map
<
int
MixerParticipant
*
>
*
mixParticipantList
size_t
*
maxAudioFrameCounter
)
const
;
int32_t
GetLowestMixingFrequency
(
)
const
;
int32_t
GetLowestMixingFrequencyFromList
(
const
MixerParticipantList
&
mixList
)
const
;
void
GetAdditionalAudio
(
AudioFrameList
*
additionalFramesList
)
const
;
void
UpdateMixedStatus
(
const
std
:
:
map
<
int
MixerParticipant
*
>
&
mixedParticipantsList
)
const
;
void
ClearAudioFrameList
(
AudioFrameList
*
audioFrameList
)
const
;
void
UpdateVADPositiveParticipants
(
AudioFrameList
*
mixList
)
const
;
bool
IsParticipantInList
(
const
MixerParticipant
&
participant
const
MixerParticipantList
&
participantList
)
const
;
bool
AddParticipantToList
(
MixerParticipant
*
participant
MixerParticipantList
*
participantList
)
const
;
bool
RemoveParticipantFromList
(
MixerParticipant
*
removeParticipant
MixerParticipantList
*
participantList
)
const
;
int32_t
MixFromList
(
AudioFrame
*
mixedAudio
const
AudioFrameList
&
audioFrameList
)
const
;
int32_t
MixAnonomouslyFromList
(
AudioFrame
*
mixedAudio
const
AudioFrameList
&
audioFrameList
)
const
;
bool
LimitMixedAudio
(
AudioFrame
*
mixedAudio
)
const
;
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
_crit
;
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
_cbCrit
;
int32_t
_id
;
Frequency
_minimumMixingFreq
;
AudioMixerOutputReceiver
*
_mixReceiver
;
Frequency
_outputFrequency
;
size_t
_sampleSize
;
MemoryPool
<
AudioFrame
>
*
_audioFramePool
;
MixerParticipantList
_participantList
;
MixerParticipantList
_additionalParticipantList
;
size_t
_numMixedParticipants
;
bool
use_limiter_
;
uint32_t
_timeStamp
;
TimeScheduler
_timeScheduler
;
int16_t
_processCalls
;
rtc
:
:
scoped_ptr
<
AudioProcessing
>
_limiter
;
}
;
}
#
endif
