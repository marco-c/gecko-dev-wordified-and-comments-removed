#
include
"
webrtc
/
modules
/
video_coding
/
protection_bitrate_calculator
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
clock
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
namespace
webrtc
{
static
const
int
kCodecBitrateBps
=
100000
;
class
ProtectionBitrateCalculatorTest
:
public
:
:
testing
:
:
Test
{
protected
:
enum
{
kSampleRate
=
90000
}
;
class
ProtectionCallback
:
public
VCMProtectionCallback
{
public
:
int
ProtectionRequest
(
const
FecProtectionParams
*
delta_params
const
FecProtectionParams
*
key_params
uint32_t
*
sent_video_rate_bps
uint32_t
*
sent_nack_rate_bps
uint32_t
*
sent_fec_rate_bps
)
override
{
*
sent_video_rate_bps
=
kCodecBitrateBps
;
*
sent_nack_rate_bps
=
nack_rate_bps_
;
*
sent_fec_rate_bps
=
fec_rate_bps_
;
return
0
;
}
uint32_t
fec_rate_bps_
=
0
;
uint32_t
nack_rate_bps_
=
0
;
}
;
ProtectionBitrateCalculatorTest
(
)
:
clock_
(
1000
)
media_opt_
(
&
clock_
&
protection_callback_
)
{
}
SimulatedClock
clock_
;
ProtectionCallback
protection_callback_
;
ProtectionBitrateCalculator
media_opt_
;
}
;
TEST_F
(
ProtectionBitrateCalculatorTest
ProtectsUsingFecBitrate
)
{
static
const
uint32_t
kMaxBitrateBps
=
130000
;
media_opt_
.
SetProtectionMethod
(
true
false
)
;
media_opt_
.
SetEncodingData
(
640
480
1
1000
)
;
protection_callback_
.
fec_rate_bps_
=
kCodecBitrateBps
/
10
;
uint32_t
target_bitrate
=
media_opt_
.
SetTargetRates
(
kMaxBitrateBps
30
0
0
)
;
EXPECT_GT
(
target_bitrate
0u
)
;
EXPECT_GT
(
kMaxBitrateBps
target_bitrate
)
;
protection_callback_
.
fec_rate_bps_
=
kCodecBitrateBps
;
target_bitrate
=
media_opt_
.
SetTargetRates
(
kMaxBitrateBps
30
128
100
)
;
EXPECT_EQ
(
kMaxBitrateBps
/
2
target_bitrate
)
;
}
TEST_F
(
ProtectionBitrateCalculatorTest
ProtectsUsingNackBitrate
)
{
static
const
uint32_t
kMaxBitrateBps
=
130000
;
media_opt_
.
SetProtectionMethod
(
false
true
)
;
media_opt_
.
SetEncodingData
(
640
480
1
1000
)
;
uint32_t
target_bitrate
=
media_opt_
.
SetTargetRates
(
kMaxBitrateBps
30
0
0
)
;
EXPECT_EQ
(
kMaxBitrateBps
target_bitrate
)
;
protection_callback_
.
nack_rate_bps_
=
kMaxBitrateBps
;
target_bitrate
=
media_opt_
.
SetTargetRates
(
kMaxBitrateBps
30
128
100
)
;
EXPECT_EQ
(
kMaxBitrateBps
/
2
target_bitrate
)
;
}
TEST_F
(
ProtectionBitrateCalculatorTest
NoProtection
)
{
static
const
uint32_t
kMaxBitrateBps
=
130000
;
media_opt_
.
SetProtectionMethod
(
false
false
)
;
media_opt_
.
SetEncodingData
(
640
480
1
1000
)
;
uint32_t
target_bitrate
=
media_opt_
.
SetTargetRates
(
kMaxBitrateBps
30
128
100
)
;
EXPECT_EQ
(
kMaxBitrateBps
target_bitrate
)
;
}
}
