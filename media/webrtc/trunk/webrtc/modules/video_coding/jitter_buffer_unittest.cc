#
include
<
string
>
#
include
<
list
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
webrtc
/
common_video
/
h264
/
h264_common
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
frame_buffer
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
jitter_buffer
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
media_opt_util
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
packet
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
test
/
stream_generator
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
test
/
test_util
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
clock
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
field_trial
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
metrics
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
metrics_default
.
h
"
#
include
"
webrtc
/
test
/
field_trial
.
h
"
#
include
"
webrtc
/
test
/
gmock
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
const
uint32_t
kProcessIntervalSec
=
60
;
}
class
Vp9SsMapTest
:
public
:
:
testing
:
:
Test
{
protected
:
Vp9SsMapTest
(
)
:
packet_
(
)
{
}
virtual
void
SetUp
(
)
{
packet_
.
is_first_packet_in_frame
=
true
;
packet_
.
dataPtr
=
data_
;
packet_
.
sizeBytes
=
1400
;
packet_
.
seqNum
=
1234
;
packet_
.
timestamp
=
1
;
packet_
.
markerBit
=
true
;
packet_
.
frameType
=
kVideoFrameKey
;
packet_
.
codec
=
kVideoCodecVP9
;
packet_
.
video_header
.
codec
=
kRtpVideoVp9
;
packet_
.
video_header
.
codecHeader
.
VP9
.
flexible_mode
=
false
;
packet_
.
video_header
.
codecHeader
.
VP9
.
gof_idx
=
0
;
packet_
.
video_header
.
codecHeader
.
VP9
.
temporal_idx
=
kNoTemporalIdx
;
packet_
.
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
=
false
;
packet_
.
video_header
.
codecHeader
.
VP9
.
ss_data_available
=
true
;
packet_
.
video_header
.
codecHeader
.
VP9
.
gof
.
SetGofInfoVP9
(
kTemporalStructureMode3
)
;
}
Vp9SsMap
map_
;
uint8_t
data_
[
1500
]
;
VCMPacket
packet_
;
}
;
TEST_F
(
Vp9SsMapTest
Insert
)
{
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
}
TEST_F
(
Vp9SsMapTest
Insert_NoSsData
)
{
packet_
.
video_header
.
codecHeader
.
VP9
.
ss_data_available
=
false
;
EXPECT_FALSE
(
map_
.
Insert
(
packet_
)
)
;
}
TEST_F
(
Vp9SsMapTest
Find
)
{
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
Vp9SsMap
:
:
SsMap
:
:
iterator
it
;
EXPECT_TRUE
(
map_
.
Find
(
packet_
.
timestamp
&
it
)
)
;
EXPECT_EQ
(
packet_
.
timestamp
it
-
>
first
)
;
}
TEST_F
(
Vp9SsMapTest
Find_WithWrap
)
{
const
uint32_t
kSsTimestamp1
=
0xFFFFFFFF
;
const
uint32_t
kSsTimestamp2
=
100
;
packet_
.
timestamp
=
kSsTimestamp1
;
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
packet_
.
timestamp
=
kSsTimestamp2
;
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
Vp9SsMap
:
:
SsMap
:
:
iterator
it
;
EXPECT_FALSE
(
map_
.
Find
(
kSsTimestamp1
-
1
&
it
)
)
;
EXPECT_TRUE
(
map_
.
Find
(
kSsTimestamp1
&
it
)
)
;
EXPECT_EQ
(
kSsTimestamp1
it
-
>
first
)
;
EXPECT_TRUE
(
map_
.
Find
(
0
&
it
)
)
;
EXPECT_EQ
(
kSsTimestamp1
it
-
>
first
)
;
EXPECT_TRUE
(
map_
.
Find
(
kSsTimestamp2
-
1
&
it
)
)
;
EXPECT_EQ
(
kSsTimestamp1
it
-
>
first
)
;
EXPECT_TRUE
(
map_
.
Find
(
kSsTimestamp2
&
it
)
)
;
EXPECT_EQ
(
kSsTimestamp2
it
-
>
first
)
;
EXPECT_TRUE
(
map_
.
Find
(
kSsTimestamp2
+
1
&
it
)
)
;
EXPECT_EQ
(
kSsTimestamp2
it
-
>
first
)
;
}
TEST_F
(
Vp9SsMapTest
Reset
)
{
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
Vp9SsMap
:
:
SsMap
:
:
iterator
it
;
EXPECT_TRUE
(
map_
.
Find
(
packet_
.
timestamp
&
it
)
)
;
EXPECT_EQ
(
packet_
.
timestamp
it
-
>
first
)
;
map_
.
Reset
(
)
;
EXPECT_FALSE
(
map_
.
Find
(
packet_
.
timestamp
&
it
)
)
;
}
TEST_F
(
Vp9SsMapTest
RemoveOld
)
{
Vp9SsMap
:
:
SsMap
:
:
iterator
it
;
const
uint32_t
kSsTimestamp1
=
10000
;
packet_
.
timestamp
=
kSsTimestamp1
;
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
const
uint32_t
kTimestamp
=
kSsTimestamp1
+
kProcessIntervalSec
*
90000
;
map_
.
RemoveOld
(
kTimestamp
-
1
)
;
EXPECT_TRUE
(
map_
.
Find
(
kSsTimestamp1
&
it
)
)
;
map_
.
RemoveOld
(
kTimestamp
)
;
EXPECT_FALSE
(
map_
.
Find
(
kSsTimestamp1
&
it
)
)
;
EXPECT_TRUE
(
map_
.
Find
(
kTimestamp
&
it
)
)
;
EXPECT_EQ
(
kTimestamp
it
-
>
first
)
;
}
TEST_F
(
Vp9SsMapTest
RemoveOld_WithWrap
)
{
Vp9SsMap
:
:
SsMap
:
:
iterator
it
;
const
uint32_t
kSsTimestamp1
=
0xFFFFFFFF
-
kProcessIntervalSec
*
90000
;
const
uint32_t
kSsTimestamp2
=
10
;
const
uint32_t
kSsTimestamp3
=
1000
;
packet_
.
timestamp
=
kSsTimestamp1
;
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
packet_
.
timestamp
=
kSsTimestamp2
;
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
packet_
.
timestamp
=
kSsTimestamp3
;
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
map_
.
RemoveOld
(
kSsTimestamp3
)
;
EXPECT_FALSE
(
map_
.
Find
(
kSsTimestamp1
&
it
)
)
;
EXPECT_FALSE
(
map_
.
Find
(
kSsTimestamp2
&
it
)
)
;
EXPECT_TRUE
(
map_
.
Find
(
kSsTimestamp3
&
it
)
)
;
}
TEST_F
(
Vp9SsMapTest
UpdatePacket_NoSsData
)
{
packet_
.
video_header
.
codecHeader
.
VP9
.
gof_idx
=
0
;
EXPECT_FALSE
(
map_
.
UpdatePacket
(
&
packet_
)
)
;
}
TEST_F
(
Vp9SsMapTest
UpdatePacket_NoGofIdx
)
{
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
packet_
.
video_header
.
codecHeader
.
VP9
.
gof_idx
=
kNoGofIdx
;
EXPECT_FALSE
(
map_
.
UpdatePacket
(
&
packet_
)
)
;
}
TEST_F
(
Vp9SsMapTest
UpdatePacket_InvalidGofIdx
)
{
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
packet_
.
video_header
.
codecHeader
.
VP9
.
gof_idx
=
4
;
EXPECT_FALSE
(
map_
.
UpdatePacket
(
&
packet_
)
)
;
}
TEST_F
(
Vp9SsMapTest
UpdatePacket
)
{
EXPECT_TRUE
(
map_
.
Insert
(
packet_
)
)
;
packet_
.
video_header
.
codecHeader
.
VP9
.
gof_idx
=
0
;
EXPECT_TRUE
(
map_
.
UpdatePacket
(
&
packet_
)
)
;
EXPECT_EQ
(
0
packet_
.
video_header
.
codecHeader
.
VP9
.
temporal_idx
)
;
EXPECT_FALSE
(
packet_
.
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
)
;
EXPECT_EQ
(
1U
packet_
.
video_header
.
codecHeader
.
VP9
.
num_ref_pics
)
;
EXPECT_EQ
(
4
packet_
.
video_header
.
codecHeader
.
VP9
.
pid_diff
[
0
]
)
;
packet_
.
video_header
.
codecHeader
.
VP9
.
gof_idx
=
1
;
EXPECT_TRUE
(
map_
.
UpdatePacket
(
&
packet_
)
)
;
EXPECT_EQ
(
2
packet_
.
video_header
.
codecHeader
.
VP9
.
temporal_idx
)
;
EXPECT_TRUE
(
packet_
.
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
)
;
EXPECT_EQ
(
1U
packet_
.
video_header
.
codecHeader
.
VP9
.
num_ref_pics
)
;
EXPECT_EQ
(
1
packet_
.
video_header
.
codecHeader
.
VP9
.
pid_diff
[
0
]
)
;
packet_
.
video_header
.
codecHeader
.
VP9
.
gof_idx
=
2
;
EXPECT_TRUE
(
map_
.
UpdatePacket
(
&
packet_
)
)
;
EXPECT_EQ
(
1
packet_
.
video_header
.
codecHeader
.
VP9
.
temporal_idx
)
;
EXPECT_TRUE
(
packet_
.
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
)
;
EXPECT_EQ
(
1U
packet_
.
video_header
.
codecHeader
.
VP9
.
num_ref_pics
)
;
EXPECT_EQ
(
2
packet_
.
video_header
.
codecHeader
.
VP9
.
pid_diff
[
0
]
)
;
packet_
.
video_header
.
codecHeader
.
VP9
.
gof_idx
=
3
;
EXPECT_TRUE
(
map_
.
UpdatePacket
(
&
packet_
)
)
;
EXPECT_EQ
(
2
packet_
.
video_header
.
codecHeader
.
VP9
.
temporal_idx
)
;
EXPECT_FALSE
(
packet_
.
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
)
;
EXPECT_EQ
(
2U
packet_
.
video_header
.
codecHeader
.
VP9
.
num_ref_pics
)
;
EXPECT_EQ
(
1
packet_
.
video_header
.
codecHeader
.
VP9
.
pid_diff
[
0
]
)
;
EXPECT_EQ
(
2
packet_
.
video_header
.
codecHeader
.
VP9
.
pid_diff
[
1
]
)
;
}
class
ProcessThreadMock
:
public
ProcessThread
{
public
:
MOCK_METHOD0
(
Start
void
(
)
)
;
MOCK_METHOD0
(
Stop
void
(
)
)
;
MOCK_METHOD1
(
WakeUp
void
(
Module
*
module
)
)
;
MOCK_METHOD1
(
RegisterModule
void
(
Module
*
module
)
)
;
MOCK_METHOD1
(
DeRegisterModule
void
(
Module
*
module
)
)
;
void
PostTask
(
std
:
:
unique_ptr
<
rtc
:
:
QueuedTask
>
task
)
{
}
}
;
class
TestBasicJitterBuffer
:
public
:
:
testing
:
:
TestWithParam
<
std
:
:
string
>
public
NackSender
public
KeyFrameRequestSender
{
public
:
void
SendNack
(
const
std
:
:
vector
<
uint16_t
>
&
sequence_numbers
)
override
{
nack_sent_
.
insert
(
nack_sent_
.
end
(
)
sequence_numbers
.
begin
(
)
sequence_numbers
.
end
(
)
)
;
}
void
RequestKeyFrame
(
)
override
{
+
+
keyframe_requests_
;
}
:
:
testing
:
:
NiceMock
<
ProcessThreadMock
>
process_thread_mock_
;
std
:
:
vector
<
uint16_t
>
nack_sent_
;
int
keyframe_requests_
;
protected
:
TestBasicJitterBuffer
(
)
{
}
void
SetUp
(
)
override
{
clock_
.
reset
(
new
SimulatedClock
(
0
)
)
;
jitter_buffer_
.
reset
(
new
VCMJitterBuffer
(
clock_
.
get
(
)
std
:
:
unique_ptr
<
EventWrapper
>
(
event_factory_
.
CreateEvent
(
)
)
this
this
)
)
;
jitter_buffer_
-
>
Start
(
)
;
seq_num_
=
1234
;
timestamp_
=
0
;
size_
=
1400
;
data_
[
0
]
=
0
;
data_
[
1
]
=
0
;
data_
[
2
]
=
0x80
;
int
count
=
3
;
for
(
unsigned
int
i
=
3
;
i
<
sizeof
(
data_
)
-
3
;
+
+
i
)
{
data_
[
i
]
=
count
;
count
+
+
;
if
(
count
=
=
10
)
{
data_
[
i
+
1
]
=
0
;
data_
[
i
+
2
]
=
0
;
data_
[
i
+
3
]
=
0x80
;
count
=
3
;
i
+
=
3
;
}
}
WebRtcRTPHeader
rtpHeader
;
memset
(
&
rtpHeader
0
sizeof
(
rtpHeader
)
)
;
rtpHeader
.
header
.
sequenceNumber
=
seq_num_
;
rtpHeader
.
header
.
timestamp
=
timestamp_
;
rtpHeader
.
header
.
markerBit
=
true
;
rtpHeader
.
frameType
=
kVideoFrameDelta
;
packet_
.
reset
(
new
VCMPacket
(
data_
size_
rtpHeader
)
)
;
}
VCMEncodedFrame
*
DecodeCompleteFrame
(
)
{
VCMEncodedFrame
*
found_frame
=
jitter_buffer_
-
>
NextCompleteFrame
(
10
)
;
if
(
!
found_frame
)
return
nullptr
;
return
jitter_buffer_
-
>
ExtractAndSetDecode
(
found_frame
-
>
TimeStamp
(
)
)
;
}
VCMEncodedFrame
*
DecodeIncompleteFrame
(
)
{
uint32_t
timestamp
=
0
;
bool
found_frame
=
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
;
if
(
!
found_frame
)
return
NULL
;
VCMEncodedFrame
*
frame
=
jitter_buffer_
-
>
ExtractAndSetDecode
(
timestamp
)
;
return
frame
;
}
void
CheckOutFrame
(
VCMEncodedFrame
*
frame_out
unsigned
int
size
bool
startCode
)
{
ASSERT_TRUE
(
frame_out
)
;
const
uint8_t
*
outData
=
frame_out
-
>
Buffer
(
)
;
unsigned
int
i
=
0
;
if
(
startCode
)
{
EXPECT_EQ
(
0
outData
[
0
]
)
;
EXPECT_EQ
(
0
outData
[
1
]
)
;
EXPECT_EQ
(
0
outData
[
2
]
)
;
EXPECT_EQ
(
1
outData
[
3
]
)
;
i
+
=
4
;
}
EXPECT_EQ
(
size
frame_out
-
>
Length
(
)
)
;
int
count
=
3
;
for
(
;
i
<
size
;
i
+
+
)
{
if
(
outData
[
i
]
=
=
0
&
&
outData
[
i
+
1
]
=
=
0
&
&
outData
[
i
+
2
]
=
=
0x80
)
{
i
+
=
2
;
}
else
if
(
startCode
&
&
outData
[
i
]
=
=
0
&
&
outData
[
i
+
1
]
=
=
0
)
{
EXPECT_EQ
(
0
outData
[
0
]
)
;
EXPECT_EQ
(
0
outData
[
1
]
)
;
EXPECT_EQ
(
0
outData
[
2
]
)
;
EXPECT_EQ
(
1
outData
[
3
]
)
;
i
+
=
3
;
}
else
{
EXPECT_EQ
(
count
outData
[
i
]
)
;
count
+
+
;
if
(
count
=
=
10
)
{
count
=
3
;
}
}
}
}
uint16_t
seq_num_
;
uint32_t
timestamp_
;
int
size_
;
uint8_t
data_
[
1500
]
;
std
:
:
unique_ptr
<
VCMPacket
>
packet_
;
std
:
:
unique_ptr
<
SimulatedClock
>
clock_
;
NullEventFactory
event_factory_
;
std
:
:
unique_ptr
<
VCMJitterBuffer
>
jitter_buffer_
;
}
;
class
TestRunningJitterBuffer
:
public
:
:
testing
:
:
TestWithParam
<
std
:
:
string
>
public
NackSender
public
KeyFrameRequestSender
{
public
:
void
SendNack
(
const
std
:
:
vector
<
uint16_t
>
&
sequence_numbers
)
{
nack_sent_
.
insert
(
nack_sent_
.
end
(
)
sequence_numbers
.
begin
(
)
sequence_numbers
.
end
(
)
)
;
}
void
RequestKeyFrame
(
)
{
+
+
keyframe_requests_
;
}
:
:
testing
:
:
NiceMock
<
ProcessThreadMock
>
process_thread_mock_
;
std
:
:
vector
<
uint16_t
>
nack_sent_
;
int
keyframe_requests_
;
protected
:
enum
{
kDataBufferSize
=
10
}
;
virtual
void
SetUp
(
)
{
clock_
.
reset
(
new
SimulatedClock
(
0
)
)
;
max_nack_list_size_
=
150
;
oldest_packet_to_nack_
=
250
;
jitter_buffer_
=
new
VCMJitterBuffer
(
clock_
.
get
(
)
std
:
:
unique_ptr
<
EventWrapper
>
(
event_factory_
.
CreateEvent
(
)
)
this
this
)
;
stream_generator_
=
new
StreamGenerator
(
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
jitter_buffer_
-
>
Start
(
)
;
jitter_buffer_
-
>
SetNackSettings
(
max_nack_list_size_
oldest_packet_to_nack_
0
)
;
memset
(
data_buffer_
0
kDataBufferSize
)
;
}
virtual
void
TearDown
(
)
{
jitter_buffer_
-
>
Stop
(
)
;
delete
stream_generator_
;
delete
jitter_buffer_
;
}
VCMFrameBufferEnum
InsertPacketAndPop
(
int
index
)
{
VCMPacket
packet
;
packet
.
dataPtr
=
data_buffer_
;
bool
packet_available
=
stream_generator_
-
>
PopPacket
(
&
packet
index
)
;
EXPECT_TRUE
(
packet_available
)
;
if
(
!
packet_available
)
return
kGeneralError
;
bool
retransmitted
=
false
;
return
jitter_buffer_
-
>
InsertPacket
(
packet
&
retransmitted
)
;
}
VCMFrameBufferEnum
InsertPacket
(
int
index
)
{
VCMPacket
packet
;
packet
.
dataPtr
=
data_buffer_
;
bool
packet_available
=
stream_generator_
-
>
GetPacket
(
&
packet
index
)
;
EXPECT_TRUE
(
packet_available
)
;
if
(
!
packet_available
)
return
kGeneralError
;
bool
retransmitted
=
false
;
return
jitter_buffer_
-
>
InsertPacket
(
packet
&
retransmitted
)
;
}
VCMFrameBufferEnum
InsertFrame
(
FrameType
frame_type
)
{
stream_generator_
-
>
GenerateFrame
(
frame_type
(
frame_type
!
=
kEmptyFrame
)
?
1
:
0
(
frame_type
=
=
kEmptyFrame
)
?
1
:
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
VCMFrameBufferEnum
ret
=
InsertPacketAndPop
(
0
)
;
clock_
-
>
AdvanceTimeMilliseconds
(
kDefaultFramePeriodMs
)
;
return
ret
;
}
VCMFrameBufferEnum
InsertFrames
(
int
num_frames
FrameType
frame_type
)
{
VCMFrameBufferEnum
ret_for_all
=
kNoError
;
for
(
int
i
=
0
;
i
<
num_frames
;
+
+
i
)
{
VCMFrameBufferEnum
ret
=
InsertFrame
(
frame_type
)
;
if
(
ret
<
kNoError
)
{
ret_for_all
=
ret
;
}
else
if
(
ret_for_all
>
=
kNoError
)
{
ret_for_all
=
ret
;
}
}
return
ret_for_all
;
}
void
DropFrame
(
int
num_packets
)
{
stream_generator_
-
>
GenerateFrame
(
kVideoFrameDelta
num_packets
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
for
(
int
i
=
0
;
i
<
num_packets
;
+
+
i
)
stream_generator_
-
>
DropLastPacket
(
)
;
clock_
-
>
AdvanceTimeMilliseconds
(
kDefaultFramePeriodMs
)
;
}
bool
DecodeCompleteFrame
(
)
{
VCMEncodedFrame
*
found_frame
=
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
;
if
(
!
found_frame
)
return
false
;
VCMEncodedFrame
*
frame
=
jitter_buffer_
-
>
ExtractAndSetDecode
(
found_frame
-
>
TimeStamp
(
)
)
;
bool
ret
=
(
frame
!
=
NULL
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame
)
;
return
ret
;
}
bool
DecodeIncompleteFrame
(
)
{
uint32_t
timestamp
=
0
;
bool
found_frame
=
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
;
if
(
!
found_frame
)
return
false
;
VCMEncodedFrame
*
frame
=
jitter_buffer_
-
>
ExtractAndSetDecode
(
timestamp
)
;
bool
ret
=
(
frame
!
=
NULL
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame
)
;
return
ret
;
}
VCMJitterBuffer
*
jitter_buffer_
;
StreamGenerator
*
stream_generator_
;
std
:
:
unique_ptr
<
SimulatedClock
>
clock_
;
NullEventFactory
event_factory_
;
size_t
max_nack_list_size_
;
int
oldest_packet_to_nack_
;
uint8_t
data_buffer_
[
kDataBufferSize
]
;
}
;
class
TestJitterBufferNack
:
public
TestRunningJitterBuffer
{
protected
:
TestJitterBufferNack
(
)
{
}
virtual
void
SetUp
(
)
{
TestRunningJitterBuffer
:
:
SetUp
(
)
;
jitter_buffer_
-
>
SetNackMode
(
kNack
-
1
-
1
)
;
}
virtual
void
TearDown
(
)
{
TestRunningJitterBuffer
:
:
TearDown
(
)
;
}
}
;
TEST_F
(
TestBasicJitterBuffer
StopRunning
)
{
jitter_buffer_
-
>
Stop
(
)
;
EXPECT_TRUE
(
NULL
=
=
DecodeCompleteFrame
(
)
)
;
EXPECT_TRUE
(
NULL
=
=
DecodeIncompleteFrame
(
)
)
;
jitter_buffer_
-
>
Start
(
)
;
jitter_buffer_
-
>
SetDecodeErrorMode
(
kSelectiveErrors
)
;
EXPECT_TRUE
(
NULL
=
=
DecodeCompleteFrame
(
)
)
;
EXPECT_TRUE
(
NULL
=
=
DecodeIncompleteFrame
(
)
)
;
jitter_buffer_
-
>
SetDecodeErrorMode
(
kWithErrors
)
;
EXPECT_TRUE
(
NULL
=
=
DecodeCompleteFrame
(
)
)
;
EXPECT_TRUE
(
NULL
=
=
DecodeIncompleteFrame
(
)
)
;
}
TEST_F
(
TestBasicJitterBuffer
SinglePacketFrame
)
{
jitter_buffer_
-
>
SetDecodeErrorMode
(
kNoErrors
)
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
timestamp
+
=
123
*
90
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
VerifyHistogramStats
)
{
metrics
:
:
Reset
(
)
;
jitter_buffer_
-
>
SetDecodeErrorMode
(
kNoErrors
)
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
timestamp
+
=
123
*
90
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
clock_
-
>
AdvanceTimeMilliseconds
(
metrics
:
:
kMinRunTimeInSeconds
*
1000
)
;
jitter_buffer_
-
>
Stop
(
)
;
EXPECT_EQ
(
1
metrics
:
:
NumEvents
(
"
WebRTC
.
Video
.
DiscardedPacketsInPercent
"
0
)
)
;
EXPECT_EQ
(
1
metrics
:
:
NumEvents
(
"
WebRTC
.
Video
.
DuplicatedPacketsInPercent
"
0
)
)
;
EXPECT_EQ
(
1
metrics
:
:
NumSamples
(
"
WebRTC
.
Video
.
CompleteFramesReceivedPerSecond
"
)
)
;
EXPECT_EQ
(
1
metrics
:
:
NumEvents
(
"
WebRTC
.
Video
.
KeyFramesReceivedInPermille
"
1000
)
)
;
jitter_buffer_
-
>
Stop
(
)
;
EXPECT_EQ
(
1
metrics
:
:
NumSamples
(
"
WebRTC
.
Video
.
DiscardedPacketsInPercent
"
)
)
;
EXPECT_EQ
(
1
metrics
:
:
NumSamples
(
"
WebRTC
.
Video
.
DuplicatedPacketsInPercent
"
)
)
;
EXPECT_EQ
(
1
metrics
:
:
NumSamples
(
"
WebRTC
.
Video
.
CompleteFramesReceivedPerSecond
"
)
)
;
EXPECT_EQ
(
1
metrics
:
:
NumSamples
(
"
WebRTC
.
Video
.
KeyFramesReceivedInPermille
"
)
)
;
}
TEST_F
(
TestBasicJitterBuffer
DualPacketFrame
)
{
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
+
+
seq_num_
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
2
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
100PacketKeyFrame
)
{
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
int
loop
=
0
;
do
{
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
loop
+
+
;
}
while
(
loop
<
98
)
;
+
+
seq_num_
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
100
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
100PacketDeltaFrame
)
{
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_FALSE
(
frame_out
=
=
NULL
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
+
+
seq_num_
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
timestamp
+
=
33
*
90
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
packet_
-
>
is_first_packet_in_frame
=
false
;
int
loop
=
0
;
do
{
+
+
seq_num_
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
loop
+
+
;
}
while
(
loop
<
98
)
;
+
+
seq_num_
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
100
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
PacketReorderingReverseOrder
)
{
seq_num_
+
=
100
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
int
loop
=
0
;
do
{
seq_num_
-
-
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
loop
+
+
;
}
while
(
loop
<
98
)
;
seq_num_
-
-
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
100
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
FrameReordering2Frames2PacketsEach
)
{
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
seq_num_
-
=
3
;
timestamp_
-
=
33
*
90
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
2
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
2
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
TestReorderingWithPadding
)
{
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
!
=
NULL
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
seqNum
=
seq_num_
+
3
;
packet_
-
>
timestamp
=
timestamp_
+
(
66
*
90
)
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
packet_
-
>
seqNum
=
seq_num_
+
1
;
packet_
-
>
timestamp
=
timestamp_
+
(
33
*
90
)
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
!
=
NULL
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
WebRtcRTPHeader
rtpHeader
;
memset
(
&
rtpHeader
0
sizeof
(
rtpHeader
)
)
;
rtpHeader
.
header
.
sequenceNumber
=
seq_num_
+
2
;
rtpHeader
.
header
.
timestamp
=
timestamp_
+
(
33
*
90
)
;
rtpHeader
.
header
.
markerBit
=
false
;
VCMPacket
empty_packet
(
data_
0
rtpHeader
)
;
EXPECT_EQ
(
kOldPacket
jitter_buffer_
-
>
InsertPacket
(
empty_packet
&
retransmitted
)
)
;
empty_packet
.
seqNum
+
=
1
;
EXPECT_EQ
(
kOldPacket
jitter_buffer_
-
>
InsertPacket
(
empty_packet
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
!
=
NULL
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
DuplicatePackets
)
{
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
EXPECT_EQ
(
0
jitter_buffer_
-
>
num_packets
(
)
)
;
EXPECT_EQ
(
0
jitter_buffer_
-
>
num_duplicated_packets
(
)
)
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
EXPECT_EQ
(
1
jitter_buffer_
-
>
num_packets
(
)
)
;
EXPECT_EQ
(
0
jitter_buffer_
-
>
num_duplicated_packets
(
)
)
;
EXPECT_EQ
(
kDuplicatePacket
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
2
jitter_buffer_
-
>
num_packets
(
)
)
;
EXPECT_EQ
(
1
jitter_buffer_
-
>
num_duplicated_packets
(
)
)
;
seq_num_
+
+
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
is_first_packet_in_frame
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
ASSERT_TRUE
(
frame_out
!
=
NULL
)
;
CheckOutFrame
(
frame_out
2
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
EXPECT_EQ
(
3
jitter_buffer_
-
>
num_packets
(
)
)
;
EXPECT_EQ
(
1
jitter_buffer_
-
>
num_duplicated_packets
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
DuplicatePreviousDeltaFramePacket
)
{
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
jitter_buffer_
-
>
SetDecodeErrorMode
(
kNoErrors
)
;
EXPECT_EQ
(
0
jitter_buffer_
-
>
num_packets
(
)
)
;
EXPECT_EQ
(
0
jitter_buffer_
-
>
num_duplicated_packets
(
)
)
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
ASSERT_TRUE
(
frame_out
!
=
NULL
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
for
(
uint16_t
i
=
1
;
i
<
=
3
;
+
+
i
)
{
packet_
-
>
seqNum
=
seq_num_
+
i
;
packet_
-
>
timestamp
=
timestamp_
+
(
i
*
33
)
*
90
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
i
+
1
jitter_buffer_
-
>
num_packets
(
)
)
;
EXPECT_EQ
(
0
jitter_buffer_
-
>
num_duplicated_packets
(
)
)
;
}
packet_
-
>
seqNum
=
seq_num_
+
2
;
packet_
-
>
timestamp
=
timestamp_
+
66
*
90
;
EXPECT_EQ
(
kDuplicatePacket
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
5
jitter_buffer_
-
>
num_packets
(
)
)
;
EXPECT_EQ
(
1
jitter_buffer_
-
>
num_duplicated_packets
(
)
)
;
for
(
size_t
i
=
0
;
i
<
3
;
+
+
i
)
{
frame_out
=
DecodeCompleteFrame
(
)
;
ASSERT_TRUE
(
frame_out
!
=
NULL
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
}
TEST_F
(
TestBasicJitterBuffer
TestSkipForwardVp9
)
{
bool
re
=
false
;
packet_
-
>
codec
=
kVideoCodecVP9
;
packet_
-
>
video_header
.
codec
=
kRtpVideoVp9
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
flexible_mode
=
false
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
spatial_idx
=
0
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
beginning_of_frame
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
end_of_frame
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
=
false
;
packet_
-
>
seqNum
=
65485
;
packet_
-
>
timestamp
=
1000
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
picture_id
=
5
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
tl0_pic_idx
=
200
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_idx
=
0
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
ss_data_available
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
gof
.
SetGofInfoVP9
(
kTemporalStructureMode3
)
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
re
)
)
;
packet_
-
>
seqNum
=
65489
;
packet_
-
>
timestamp
=
13000
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
picture_id
=
9
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
tl0_pic_idx
=
201
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_idx
=
0
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
ss_data_available
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
re
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
1000U
frame_out
-
>
TimeStamp
(
)
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
13000U
frame_out
-
>
TimeStamp
(
)
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
ReorderedVp9SsData_3TlLayers
)
{
bool
re
=
false
;
packet_
-
>
codec
=
kVideoCodecVP9
;
packet_
-
>
video_header
.
codec
=
kRtpVideoVp9
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
flexible_mode
=
false
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
spatial_idx
=
0
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
beginning_of_frame
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
end_of_frame
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
tl0_pic_idx
=
200
;
packet_
-
>
seqNum
=
65486
;
packet_
-
>
timestamp
=
6000
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
picture_id
=
6
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_idx
=
2
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
=
true
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
re
)
)
;
packet_
-
>
seqNum
=
65487
;
packet_
-
>
timestamp
=
9000
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
picture_id
=
7
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_idx
=
1
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
=
true
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
re
)
)
;
packet_
-
>
seqNum
=
65485
;
packet_
-
>
timestamp
=
3000
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
width
=
352
;
packet_
-
>
height
=
288
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
picture_id
=
5
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_idx
=
0
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
=
false
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
ss_data_available
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
gof
.
SetGofInfoVP9
(
kTemporalStructureMode3
)
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
re
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
3000U
frame_out
-
>
TimeStamp
(
)
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
EXPECT_EQ
(
0
frame_out
-
>
CodecSpecific
(
)
-
>
codecSpecific
.
VP9
.
temporal_idx
)
;
EXPECT_FALSE
(
frame_out
-
>
CodecSpecific
(
)
-
>
codecSpecific
.
VP9
.
temporal_up_switch
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
6000U
frame_out
-
>
TimeStamp
(
)
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out
-
>
FrameType
(
)
)
;
EXPECT_EQ
(
2
frame_out
-
>
CodecSpecific
(
)
-
>
codecSpecific
.
VP9
.
temporal_idx
)
;
EXPECT_TRUE
(
frame_out
-
>
CodecSpecific
(
)
-
>
codecSpecific
.
VP9
.
temporal_up_switch
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
9000U
frame_out
-
>
TimeStamp
(
)
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out
-
>
FrameType
(
)
)
;
EXPECT_EQ
(
1
frame_out
-
>
CodecSpecific
(
)
-
>
codecSpecific
.
VP9
.
temporal_idx
)
;
EXPECT_TRUE
(
frame_out
-
>
CodecSpecific
(
)
-
>
codecSpecific
.
VP9
.
temporal_up_switch
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
ReorderedVp9SsData_2Tl2SLayers
)
{
bool
re
=
false
;
packet_
-
>
codec
=
kVideoCodecVP9
;
packet_
-
>
video_header
.
codec
=
kRtpVideoVp9
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
flexible_mode
=
false
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
beginning_of_frame
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
end_of_frame
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
tl0_pic_idx
=
200
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
65486
;
packet_
-
>
timestamp
=
6000
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
spatial_idx
=
0
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
picture_id
=
6
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_idx
=
1
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
=
true
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
re
)
)
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
65487
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
spatial_idx
=
1
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
picture_id
=
6
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_idx
=
1
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
=
true
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
re
)
)
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
65485
;
packet_
-
>
timestamp
=
3000
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
spatial_idx
=
1
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
picture_id
=
5
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_idx
=
0
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
re
)
)
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
65484
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
width
=
352
;
packet_
-
>
height
=
288
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
spatial_idx
=
0
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
picture_id
=
5
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_idx
=
0
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
temporal_up_switch
=
false
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
ss_data_available
=
true
;
packet_
-
>
video_header
.
codecHeader
.
VP9
.
gof
.
SetGofInfoVP9
(
kTemporalStructureMode2
)
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
re
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
3000U
frame_out
-
>
TimeStamp
(
)
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
EXPECT_EQ
(
0
frame_out
-
>
CodecSpecific
(
)
-
>
codecSpecific
.
VP9
.
temporal_idx
)
;
EXPECT_FALSE
(
frame_out
-
>
CodecSpecific
(
)
-
>
codecSpecific
.
VP9
.
temporal_up_switch
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
6000U
frame_out
-
>
TimeStamp
(
)
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out
-
>
FrameType
(
)
)
;
EXPECT_EQ
(
1
frame_out
-
>
CodecSpecific
(
)
-
>
codecSpecific
.
VP9
.
temporal_idx
)
;
EXPECT_TRUE
(
frame_out
-
>
CodecSpecific
(
)
-
>
codecSpecific
.
VP9
.
temporal_up_switch
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
H264InsertStartCode
)
{
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
insertStartCode
=
true
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
size_
*
2
+
4
*
2
true
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
SpsAndPpsHandling
)
{
jitter_buffer_
-
>
SetDecodeErrorMode
(
kNoErrors
)
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
codec
=
kVideoCodecH264
;
packet_
-
>
video_header
.
codec
=
kRtpVideoH264
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalu_type
=
H264
:
:
NaluType
:
:
kIdr
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
type
=
H264
:
:
NaluType
:
:
kIdr
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
sps_id
=
-
1
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
pps_id
=
0
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus_length
=
1
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
nullptr
DecodeCompleteFrame
(
)
)
;
timestamp_
+
=
3000
;
packet_
-
>
timestamp
=
timestamp_
;
+
+
seq_num_
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
codec
=
kVideoCodecH264
;
packet_
-
>
video_header
.
codec
=
kRtpVideoH264
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalu_type
=
H264
:
:
NaluType
:
:
kStapA
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
type
=
H264
:
:
NaluType
:
:
kSps
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
sps_id
=
0
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
pps_id
=
-
1
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
1
]
.
type
=
H264
:
:
NaluType
:
:
kPps
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
1
]
.
sps_id
=
0
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
1
]
.
pps_id
=
0
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus_length
=
2
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
+
+
seq_num_
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
codec
=
kVideoCodecH264
;
packet_
-
>
video_header
.
codec
=
kRtpVideoH264
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalu_type
=
H264
:
:
NaluType
:
:
kIdr
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
type
=
H264
:
:
NaluType
:
:
kIdr
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
sps_id
=
-
1
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
pps_id
=
0
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus_length
=
1
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
ASSERT_NE
(
nullptr
frame_out
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
timestamp_
+
=
3000
;
packet_
-
>
timestamp
=
timestamp_
;
+
+
seq_num_
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
codec
=
kVideoCodecH264
;
packet_
-
>
video_header
.
codec
=
kRtpVideoH264
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalu_type
=
H264
:
:
NaluType
:
:
kSlice
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
type
=
H264
:
:
NaluType
:
:
kSlice
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
sps_id
=
-
1
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus
[
0
]
.
pps_id
=
0
;
packet_
-
>
video_header
.
codecHeader
.
H264
.
nalus_length
=
1
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
ASSERT_NE
(
nullptr
frame_out
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
PacketLossWithSelectiveErrorsThresholdCheck
)
{
jitter_buffer_
-
>
SetDecodeErrorMode
(
kSelectiveErrors
)
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
uint32_t
timestamp
=
0
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_FALSE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
packet_
-
>
is_first_packet_in_frame
=
false
;
for
(
int
i
=
1
;
i
<
9
;
+
+
i
)
{
packet_
-
>
seqNum
+
+
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_FALSE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
}
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
+
+
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
10
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
+
=
100
;
packet_
-
>
timestamp
+
=
33
*
90
*
8
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_FALSE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
packet_
-
>
seqNum
-
=
99
;
packet_
-
>
timestamp
-
=
33
*
90
*
7
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_TRUE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
packet_
-
>
is_first_packet_in_frame
=
false
;
for
(
int
i
=
1
;
i
<
8
;
+
+
i
)
{
packet_
-
>
seqNum
+
+
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_TRUE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
}
packet_
-
>
seqNum
+
+
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_TRUE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
frame_out
=
DecodeIncompleteFrame
(
)
;
ASSERT_FALSE
(
NULL
=
=
frame_out
)
;
CheckOutFrame
(
frame_out
9
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
+
+
;
EXPECT_EQ
(
kOldPacket
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
}
TEST_F
(
TestBasicJitterBuffer
PacketLossWithSelectiveErrorsIncompleteKey
)
{
jitter_buffer_
-
>
SetDecodeErrorMode
(
kSelectiveErrors
)
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
+
=
100
;
packet_
-
>
timestamp
+
=
33
*
90
*
8
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
uint32_t
timestamp
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_FALSE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
seqNum
-
=
99
;
packet_
-
>
timestamp
-
=
33
*
90
*
7
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_FALSE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
packet_
-
>
is_first_packet_in_frame
=
false
;
for
(
int
i
=
1
;
i
<
5
;
+
+
i
)
{
packet_
-
>
seqNum
+
+
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_FALSE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
}
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
+
+
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
6
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
PacketLossWithSelectiveErrorsMissingFirstPacket
)
{
jitter_buffer_
-
>
SetDecodeErrorMode
(
kSelectiveErrors
)
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
+
=
100
;
packet_
-
>
timestamp
+
=
33
*
90
*
8
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
uint32_t
timestamp
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_FALSE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
packet_
-
>
seqNum
-
=
98
;
packet_
-
>
timestamp
-
=
33
*
90
*
7
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_FALSE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
for
(
int
i
=
0
;
i
<
5
;
+
+
i
)
{
packet_
-
>
seqNum
+
+
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_FALSE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
}
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
seqNum
-
=
6
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_TRUE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
timestamp
)
)
;
frame_out
=
DecodeIncompleteFrame
(
)
;
CheckOutFrame
(
frame_out
7
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
DiscontinuousStreamWhenDecodingWithErrors
)
{
jitter_buffer_
-
>
SetDecodeErrorMode
(
kWithErrors
)
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
uint32_t
next_timestamp
;
VCMEncodedFrame
*
frame
=
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
;
EXPECT_NE
(
frame
nullptr
)
;
EXPECT_EQ
(
packet_
-
>
timestamp
frame
-
>
TimeStamp
(
)
)
;
frame
=
jitter_buffer_
-
>
ExtractAndSetDecode
(
frame
-
>
TimeStamp
(
)
)
;
EXPECT_TRUE
(
frame
!
=
NULL
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame
)
;
timestamp_
+
=
2
*
33
*
90
;
seq_num_
+
=
2
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
timestamp_
+
=
33
*
90
;
seq_num_
+
=
2
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
jitter_buffer_
-
>
NextCompleteFrame
(
0
)
nullptr
)
;
EXPECT_TRUE
(
jitter_buffer_
-
>
NextMaybeIncompleteTimestamp
(
&
next_timestamp
)
)
;
EXPECT_EQ
(
packet_
-
>
timestamp
-
33
*
90
next_timestamp
)
;
}
TEST_F
(
TestBasicJitterBuffer
PacketLoss
)
{
jitter_buffer_
-
>
SetDecodeErrorMode
(
kWithErrors
)
;
seq_num_
=
0xffff
-
4
;
seq_num_
+
+
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
completeNALU
=
kNaluStart
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
for
(
int
i
=
0
;
i
<
11
;
+
+
i
)
{
webrtc
:
:
FrameType
frametype
=
kVideoFrameDelta
;
seq_num_
+
+
;
timestamp_
+
=
33
*
90
;
packet_
-
>
frameType
=
frametype
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
completeNALU
=
kNaluStart
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
seq_num_
+
=
2
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
completeNALU
=
kNaluEnd
;
EXPECT_EQ
(
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
kDecodableSession
)
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
completeNALU
=
kNaluEnd
;
packet_
-
>
frameType
=
kEmptyFrame
;
EXPECT_EQ
(
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
kDecodableSession
)
;
frame_out
=
DecodeIncompleteFrame
(
)
;
if
(
i
<
10
)
{
CheckOutFrame
(
frame_out
size_
false
)
;
if
(
i
=
=
0
)
{
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
}
else
{
EXPECT_EQ
(
frametype
frame_out
-
>
FrameType
(
)
)
;
}
EXPECT_FALSE
(
frame_out
-
>
Complete
(
)
)
;
EXPECT_FALSE
(
frame_out
-
>
MissingFrame
(
)
)
;
}
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
timestamp_
-
=
33
*
90
;
packet_
-
>
timestamp
=
timestamp_
-
1000
;
EXPECT_EQ
(
kOldPacket
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
packet_
-
>
timestamp
=
timestamp_
-
500
;
EXPECT_EQ
(
kOldPacket
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
packet_
-
>
timestamp
=
timestamp_
-
100
;
EXPECT_EQ
(
kOldPacket
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_EQ
(
3
jitter_buffer_
-
>
num_discarded_packets
(
)
)
;
jitter_buffer_
-
>
Flush
(
)
;
EXPECT_EQ
(
3
jitter_buffer_
-
>
num_discarded_packets
(
)
)
;
}
TEST_F
(
TestBasicJitterBuffer
DeltaFrame100PacketsWithSeqNumWrap
)
{
seq_num_
=
0xfff0
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
int
loop
=
0
;
do
{
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
loop
+
+
;
}
while
(
loop
<
98
)
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
100
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
PacketReorderingReverseWithNegSeqNumWrap
)
{
seq_num_
=
10
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
int
loop
=
0
;
do
{
seq_num_
-
-
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
loop
+
+
;
}
while
(
loop
<
98
)
;
seq_num_
-
-
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
100
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
TestInsertOldFrame
)
{
seq_num_
=
2
;
timestamp_
=
3000
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
seqNum
=
seq_num_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
3000u
frame_out
-
>
TimeStamp
(
)
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
seq_num_
-
-
;
timestamp_
=
2000
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
EXPECT_EQ
(
kOldPacket
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
}
TEST_F
(
TestBasicJitterBuffer
TestInsertOldFrameWithSeqNumWrap
)
{
seq_num_
=
2
;
timestamp_
=
3000
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
timestamp_
frame_out
-
>
TimeStamp
(
)
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
seq_num_
-
-
;
timestamp_
=
0xffffff00
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
EXPECT_EQ
(
kOldPacket
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
}
TEST_F
(
TestBasicJitterBuffer
TimestampWrap
)
{
timestamp_
=
0xffffff00
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
2
*
size_
false
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
seq_num_
+
+
;
timestamp_
+
=
33
*
90
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
2
*
size_
false
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
2FrameWithTimestampWrap
)
{
timestamp_
=
0xffffff00
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
timestamp
=
timestamp_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
seq_num_
+
+
;
timestamp_
=
2700
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
0xffffff00
frame_out
-
>
TimeStamp
(
)
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
VCMEncodedFrame
*
frame_out2
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
2700u
frame_out2
-
>
TimeStamp
(
)
)
;
CheckOutFrame
(
frame_out2
size_
false
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out2
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out2
)
;
}
TEST_F
(
TestBasicJitterBuffer
Insert2FramesReOrderedWithTimestampWrap
)
{
seq_num_
=
2
;
timestamp_
=
2700
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
seq_num_
-
-
;
timestamp_
=
0xffffff00
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
0xffffff00
frame_out
-
>
TimeStamp
(
)
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
VCMEncodedFrame
*
frame_out2
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
2700u
frame_out2
-
>
TimeStamp
(
)
)
;
CheckOutFrame
(
frame_out2
size_
false
)
;
EXPECT_EQ
(
kVideoFrameDelta
frame_out2
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out2
)
;
}
TEST_F
(
TestBasicJitterBuffer
DeltaFrameWithMoreThanMaxNumberOfPackets
)
{
int
loop
=
0
;
bool
firstPacket
=
true
;
bool
retransmitted
=
false
;
do
{
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
if
(
firstPacket
)
{
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
firstPacket
=
false
;
}
else
{
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
}
loop
+
+
;
}
while
(
loop
<
kMaxPacketsInSession
)
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
EXPECT_EQ
(
kSizeError
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
EXPECT_TRUE
(
NULL
=
=
DecodeCompleteFrame
(
)
)
;
}
TEST_F
(
TestBasicJitterBuffer
ExceedNumOfFrameWithSeqNumWrap
)
{
jitter_buffer_
-
>
SetNackMode
(
kNack
-
1
-
1
)
;
jitter_buffer_
-
>
SetNackSettings
(
kMaxNumberOfFrames
kMaxNumberOfFrames
0
)
;
int
loop
=
0
;
seq_num_
=
65485
;
uint32_t
first_key_frame_timestamp
=
0
;
bool
retransmitted
=
false
;
do
{
timestamp_
+
=
33
*
90
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
if
(
loop
=
=
50
)
{
first_key_frame_timestamp
=
packet_
-
>
timestamp
;
packet_
-
>
frameType
=
kVideoFrameKey
;
}
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
loop
+
+
;
}
while
(
loop
<
kMaxNumberOfFrames
)
;
timestamp_
+
=
33
*
90
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
EXPECT_EQ
(
kFlushIndicator
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_EQ
(
first_key_frame_timestamp
frame_out
-
>
TimeStamp
(
)
)
;
CheckOutFrame
(
frame_out
size_
false
)
;
EXPECT_EQ
(
kVideoFrameKey
frame_out
-
>
FrameType
(
)
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
EmptyLastFrame
)
{
jitter_buffer_
-
>
SetDecodeErrorMode
(
kWithErrors
)
;
seq_num_
=
3
;
int
maxSize
=
1000
;
bool
retransmitted
=
false
;
for
(
int
i
=
0
;
i
<
maxSize
+
10
;
i
+
+
)
{
timestamp_
+
=
33
*
90
;
seq_num_
+
+
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
false
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
frameType
=
kEmptyFrame
;
EXPECT_EQ
(
kNoError
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
testFrame
=
DecodeIncompleteFrame
(
)
;
if
(
testFrame
!
=
NULL
)
{
EXPECT_TRUE
(
testFrame
-
>
TimeStamp
(
)
<
timestamp_
)
;
jitter_buffer_
-
>
ReleaseFrame
(
testFrame
)
;
}
}
}
TEST_F
(
TestBasicJitterBuffer
H264IncompleteNalu
)
{
jitter_buffer_
-
>
SetNackMode
(
kNoNack
-
1
-
1
)
;
jitter_buffer_
-
>
SetDecodeErrorMode
(
kWithErrors
)
;
+
+
seq_num_
;
timestamp_
+
=
33
*
90
;
int
insertedLength
=
0
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
completeNALU
=
kNaluStart
;
packet_
-
>
markerBit
=
false
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
seq_num_
+
=
2
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
completeNALU
=
kNaluIncomplete
;
packet_
-
>
markerBit
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
seq_num_
+
+
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
completeNALU
=
kNaluEnd
;
packet_
-
>
markerBit
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
seq_num_
+
+
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
completeNALU
=
kNaluComplete
;
packet_
-
>
markerBit
=
true
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
packet_
-
>
seqNum
=
1
;
packet_
-
>
timestamp
=
timestamp_
+
33
*
90
*
10
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
completeNALU
=
kNaluStart
;
packet_
-
>
markerBit
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeIncompleteFrame
(
)
;
CheckOutFrame
(
frame_out
packet_
-
>
sizeBytes
*
2
false
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
seq_num_
+
=
2
;
timestamp_
+
=
33
*
90
;
insertedLength
=
0
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
completeNALU
=
kNaluEnd
;
packet_
-
>
markerBit
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
insertedLength
+
=
packet_
-
>
sizeBytes
;
seq_num_
-
-
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
completeNALU
=
kNaluStart
;
packet_
-
>
markerBit
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
insertedLength
+
=
packet_
-
>
sizeBytes
;
seq_num_
+
=
3
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
completeNALU
=
kNaluComplete
;
packet_
-
>
markerBit
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
insertedLength
+
=
packet_
-
>
sizeBytes
;
seq_num_
+
+
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
completeNALU
=
kNaluStart
;
packet_
-
>
markerBit
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
insertedLength
+
=
packet_
-
>
sizeBytes
;
seq_num_
+
=
2
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
completeNALU
=
kNaluEnd
;
packet_
-
>
markerBit
=
true
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeIncompleteFrame
(
)
;
CheckOutFrame
(
frame_out
insertedLength
false
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
seq_num_
+
+
;
timestamp_
+
=
33
*
90
;
WebRtcRTPHeader
rtpHeader
;
memset
(
&
rtpHeader
0
sizeof
(
rtpHeader
)
)
;
VCMPacket
emptypacket
(
data_
0
rtpHeader
)
;
emptypacket
.
seqNum
=
seq_num_
;
emptypacket
.
timestamp
=
timestamp_
;
emptypacket
.
frameType
=
kVideoFrameKey
;
emptypacket
.
is_first_packet_in_frame
=
true
;
emptypacket
.
completeNALU
=
kNaluComplete
;
emptypacket
.
markerBit
=
true
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
emptypacket
&
retransmitted
)
)
;
frame_out
=
DecodeIncompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
!
=
NULL
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
seq_num_
+
+
;
timestamp_
+
=
33
*
90
;
packet_
-
>
seqNum
=
seq_num_
;
packet_
-
>
timestamp
=
timestamp_
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
completeNALU
=
kNaluComplete
;
packet_
-
>
markerBit
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
seq_num_
+
+
;
emptypacket
.
seqNum
=
seq_num_
;
emptypacket
.
timestamp
=
timestamp_
;
emptypacket
.
frameType
=
kVideoFrameKey
;
emptypacket
.
is_first_packet_in_frame
=
true
;
emptypacket
.
completeNALU
=
kNaluComplete
;
emptypacket
.
markerBit
=
true
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
emptypacket
&
retransmitted
)
)
;
frame_out
=
DecodeCompleteFrame
(
)
;
CheckOutFrame
(
frame_out
packet_
-
>
sizeBytes
false
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestBasicJitterBuffer
NextFrameWhenIncomplete
)
{
jitter_buffer_
-
>
SetDecodeErrorMode
(
kWithErrors
)
;
packet_
-
>
frameType
=
kVideoFrameKey
;
packet_
-
>
is_first_packet_in_frame
=
true
;
packet_
-
>
markerBit
=
true
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
VCMEncodedFrame
*
frame_out
=
DecodeCompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
!
=
NULL
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
packet_
-
>
seqNum
+
=
2
;
packet_
-
>
timestamp
+
=
33
*
90
;
packet_
-
>
frameType
=
kVideoFrameDelta
;
packet_
-
>
is_first_packet_in_frame
=
false
;
packet_
-
>
markerBit
=
false
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeIncompleteFrame
(
)
;
EXPECT_TRUE
(
frame_out
=
=
NULL
)
;
packet_
-
>
seqNum
+
=
2
;
packet_
-
>
timestamp
+
=
33
*
90
;
packet_
-
>
is_first_packet_in_frame
=
true
;
EXPECT_EQ
(
kDecodableSession
jitter_buffer_
-
>
InsertPacket
(
*
packet_
&
retransmitted
)
)
;
frame_out
=
DecodeIncompleteFrame
(
)
;
CheckOutFrame
(
frame_out
packet_
-
>
sizeBytes
false
)
;
jitter_buffer_
-
>
ReleaseFrame
(
frame_out
)
;
}
TEST_F
(
TestRunningJitterBuffer
Full
)
{
jitter_buffer_
-
>
SetNackMode
(
kNack
-
1
-
1
)
;
jitter_buffer_
-
>
SetNackSettings
(
kMaxNumberOfFrames
kMaxNumberOfFrames
0
)
;
EXPECT_GE
(
InsertFrame
(
kVideoFrameKey
)
kNoError
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
DropFrame
(
1
)
;
EXPECT_GE
(
InsertFrames
(
kMaxNumberOfFrames
kVideoFrameDelta
)
kNoError
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
EXPECT_EQ
(
kFlushIndicator
InsertFrame
(
kVideoFrameDelta
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
}
TEST_F
(
TestRunningJitterBuffer
EmptyPackets
)
{
stream_generator_
-
>
GenerateFrame
(
kVideoFrameKey
3
3
clock_
-
>
TimeInMilliseconds
(
)
)
;
bool
request_key_frame
=
false
;
EXPECT_EQ
(
kNoError
InsertPacketAndPop
(
4
)
)
;
EXPECT_FALSE
(
request_key_frame
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
0
)
)
;
EXPECT_FALSE
(
request_key_frame
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
0
)
)
;
EXPECT_FALSE
(
request_key_frame
)
;
EXPECT_EQ
(
kCompleteSession
InsertPacketAndPop
(
0
)
)
;
EXPECT_FALSE
(
request_key_frame
)
;
EXPECT_EQ
(
kCompleteSession
InsertPacketAndPop
(
0
)
)
;
EXPECT_FALSE
(
request_key_frame
)
;
}
TEST_F
(
TestRunningJitterBuffer
StatisticsTest
)
{
FrameCounts
frame_stats
(
jitter_buffer_
-
>
FrameStatistics
(
)
)
;
EXPECT_EQ
(
0
frame_stats
.
delta_frames
)
;
EXPECT_EQ
(
0
frame_stats
.
key_frames
)
;
uint32_t
framerate
=
0
;
uint32_t
bitrate
=
0
;
jitter_buffer_
-
>
IncomingRateStatistics
(
&
framerate
&
bitrate
)
;
EXPECT_EQ
(
0u
framerate
)
;
EXPECT_EQ
(
0u
bitrate
)
;
InsertFrame
(
kVideoFrameKey
)
;
InsertFrame
(
kVideoFrameDelta
)
;
InsertFrame
(
kVideoFrameDelta
)
;
InsertFrame
(
kVideoFrameKey
)
;
InsertFrame
(
kVideoFrameDelta
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
frame_stats
=
jitter_buffer_
-
>
FrameStatistics
(
)
;
EXPECT_EQ
(
3
frame_stats
.
delta_frames
)
;
EXPECT_EQ
(
2
frame_stats
.
key_frames
)
;
for
(
int
i
=
0
;
i
<
20
;
+
+
i
)
{
InsertFrame
(
kVideoFrameDelta
)
;
}
jitter_buffer_
-
>
IncomingRateStatistics
(
&
framerate
&
bitrate
)
;
EXPECT_EQ
(
kDefaultFrameRate
/
2u
framerate
)
;
EXPECT_EQ
(
kDefaultBitrateKbps
bitrate
)
;
for
(
int
i
=
0
;
i
<
25
;
+
+
i
)
{
InsertFrame
(
kVideoFrameDelta
)
;
}
jitter_buffer_
-
>
IncomingRateStatistics
(
&
framerate
&
bitrate
)
;
EXPECT_EQ
(
kDefaultFrameRate
framerate
)
;
EXPECT_EQ
(
kDefaultBitrateKbps
bitrate
)
;
}
TEST_F
(
TestRunningJitterBuffer
SkipToKeyFrame
)
{
EXPECT_GE
(
InsertFrames
(
5
kVideoFrameDelta
)
kNoError
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
InsertFrame
(
kVideoFrameKey
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
}
TEST_F
(
TestRunningJitterBuffer
DontSkipToKeyFrameIfDecodable
)
{
InsertFrame
(
kVideoFrameKey
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
const
int
kNumDeltaFrames
=
5
;
EXPECT_GE
(
InsertFrames
(
kNumDeltaFrames
kVideoFrameDelta
)
kNoError
)
;
InsertFrame
(
kVideoFrameKey
)
;
for
(
int
i
=
0
;
i
<
kNumDeltaFrames
+
1
;
+
+
i
)
{
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
}
}
TEST_F
(
TestRunningJitterBuffer
KeyDeltaKeyDelta
)
{
InsertFrame
(
kVideoFrameKey
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
const
int
kNumDeltaFrames
=
5
;
EXPECT_GE
(
InsertFrames
(
kNumDeltaFrames
kVideoFrameDelta
)
kNoError
)
;
InsertFrame
(
kVideoFrameKey
)
;
EXPECT_GE
(
InsertFrames
(
kNumDeltaFrames
kVideoFrameDelta
)
kNoError
)
;
InsertFrame
(
kVideoFrameKey
)
;
for
(
int
i
=
0
;
i
<
2
*
(
kNumDeltaFrames
+
1
)
;
+
+
i
)
{
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
}
}
TEST_F
(
TestRunningJitterBuffer
TwoPacketsNonContinuous
)
{
InsertFrame
(
kVideoFrameKey
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
stream_generator_
-
>
GenerateFrame
(
kVideoFrameDelta
1
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
clock_
-
>
AdvanceTimeMilliseconds
(
kDefaultFramePeriodMs
)
;
stream_generator_
-
>
GenerateFrame
(
kVideoFrameDelta
2
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
1
)
)
;
EXPECT_EQ
(
kCompleteSession
InsertPacketAndPop
(
1
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
EXPECT_EQ
(
kCompleteSession
InsertPacketAndPop
(
0
)
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
}
TEST_F
(
TestJitterBufferNack
EmptyPackets
)
{
jitter_buffer_
-
>
SetNackMode
(
kNack
media_optimization
:
:
kLowRttNackMs
-
1
)
;
EXPECT_GE
(
InsertFrames
(
kMaxNumberOfFrames
kEmptyFrame
)
kNoError
)
;
InsertFrame
(
kVideoFrameKey
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
}
TEST_F
(
TestJitterBufferNack
NackTooOldPackets
)
{
EXPECT_GE
(
InsertFrame
(
kVideoFrameKey
)
kNoError
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
DropFrame
(
1
)
;
EXPECT_EQ
(
kFlushIndicator
InsertFrames
(
oldest_packet_to_nack_
+
1
kVideoFrameDelta
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
bool
request_key_frame
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
request_key_frame
)
;
EXPECT_FALSE
(
request_key_frame
)
;
EXPECT_EQ
(
0u
nack_list
.
size
(
)
)
;
EXPECT_GE
(
InsertFrame
(
kVideoFrameDelta
)
kNoError
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
EXPECT_FALSE
(
DecodeIncompleteFrame
(
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
EXPECT_GE
(
InsertFrame
(
kVideoFrameKey
)
kNoError
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
}
TEST_F
(
TestJitterBufferNack
NackLargeJitterBuffer
)
{
EXPECT_GE
(
InsertFrame
(
kVideoFrameKey
)
kNoError
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
EXPECT_GE
(
InsertFrames
(
oldest_packet_to_nack_
kVideoFrameDelta
)
kNoError
)
;
bool
request_key_frame
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
request_key_frame
)
;
EXPECT_FALSE
(
request_key_frame
)
;
EXPECT_EQ
(
0u
nack_list
.
size
(
)
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
}
TEST_F
(
TestJitterBufferNack
NackListFull
)
{
EXPECT_GE
(
InsertFrame
(
kVideoFrameKey
)
kNoError
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
DropFrame
(
max_nack_list_size_
+
1
)
;
EXPECT_EQ
(
kFlushIndicator
InsertFrame
(
kVideoFrameDelta
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
bool
request_key_frame
=
false
;
jitter_buffer_
-
>
GetNackList
(
&
request_key_frame
)
;
EXPECT_FALSE
(
request_key_frame
)
;
EXPECT_GE
(
InsertFrame
(
kVideoFrameDelta
)
kNoError
)
;
jitter_buffer_
-
>
GetNackList
(
&
request_key_frame
)
;
EXPECT_TRUE
(
request_key_frame
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
EXPECT_FALSE
(
DecodeIncompleteFrame
(
)
)
;
EXPECT_GE
(
InsertFrame
(
kVideoFrameKey
)
kNoError
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
}
TEST_F
(
TestJitterBufferNack
NoNackListReturnedBeforeFirstDecode
)
{
DropFrame
(
10
)
;
EXPECT_GE
(
InsertFrame
(
kVideoFrameDelta
)
kNoError
)
;
bool
request_key_frame
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
request_key_frame
)
;
EXPECT_EQ
(
0u
nack_list
.
size
(
)
)
;
EXPECT_TRUE
(
request_key_frame
)
;
}
TEST_F
(
TestJitterBufferNack
NackListBuiltBeforeFirstDecode
)
{
stream_generator_
-
>
Init
(
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
InsertFrame
(
kVideoFrameKey
)
;
stream_generator_
-
>
GenerateFrame
(
kVideoFrameDelta
2
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
stream_generator_
-
>
NextPacket
(
NULL
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
0
)
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
bool
extended
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
extended
)
;
EXPECT_EQ
(
1u
nack_list
.
size
(
)
)
;
}
TEST_F
(
TestJitterBufferNack
VerifyRetransmittedFlag
)
{
stream_generator_
-
>
Init
(
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
stream_generator_
-
>
GenerateFrame
(
kVideoFrameKey
3
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
VCMPacket
packet
;
stream_generator_
-
>
PopPacket
(
&
packet
0
)
;
bool
retransmitted
=
false
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
packet
&
retransmitted
)
)
;
EXPECT_FALSE
(
retransmitted
)
;
stream_generator_
-
>
PopPacket
(
&
packet
1
)
;
EXPECT_EQ
(
kIncomplete
jitter_buffer_
-
>
InsertPacket
(
packet
&
retransmitted
)
)
;
EXPECT_FALSE
(
retransmitted
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
bool
extended
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
extended
)
;
uint16_t
seq_num
;
EXPECT_EQ
(
1u
nack_list
.
size
(
)
)
;
seq_num
=
nack_list
[
0
]
;
stream_generator_
-
>
PopPacket
(
&
packet
0
)
;
EXPECT_EQ
(
packet
.
seqNum
seq_num
)
;
EXPECT_EQ
(
kCompleteSession
jitter_buffer_
-
>
InsertPacket
(
packet
&
retransmitted
)
)
;
EXPECT_TRUE
(
retransmitted
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
}
TEST_F
(
TestJitterBufferNack
UseNackToRecoverFirstKeyFrame
)
{
stream_generator_
-
>
Init
(
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
stream_generator_
-
>
GenerateFrame
(
kVideoFrameKey
3
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
0
)
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
1
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
bool
extended
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
extended
)
;
uint16_t
seq_num
;
ASSERT_EQ
(
1u
nack_list
.
size
(
)
)
;
seq_num
=
nack_list
[
0
]
;
VCMPacket
packet
;
stream_generator_
-
>
GetPacket
(
&
packet
0
)
;
EXPECT_EQ
(
packet
.
seqNum
seq_num
)
;
}
TEST_F
(
TestJitterBufferNack
UseNackToRecoverFirstKeyFrameSecondInQueue
)
{
VCMPacket
packet
;
stream_generator_
-
>
Init
(
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
stream_generator_
-
>
GenerateFrame
(
kVideoFrameDelta
3
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
0
)
)
;
ASSERT_TRUE
(
stream_generator_
-
>
PopPacket
(
&
packet
0
)
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
0
)
)
;
stream_generator_
-
>
GenerateFrame
(
kVideoFrameKey
3
0
clock_
-
>
TimeInMilliseconds
(
)
+
10
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
0
)
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
1
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
bool
extended
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
extended
)
;
uint16_t
seq_num
;
ASSERT_EQ
(
1u
nack_list
.
size
(
)
)
;
seq_num
=
nack_list
[
0
]
;
stream_generator_
-
>
GetPacket
(
&
packet
0
)
;
EXPECT_EQ
(
packet
.
seqNum
seq_num
)
;
}
TEST_F
(
TestJitterBufferNack
NormalOperation
)
{
EXPECT_EQ
(
kNack
jitter_buffer_
-
>
nack_mode
(
)
)
;
jitter_buffer_
-
>
SetDecodeErrorMode
(
kWithErrors
)
;
EXPECT_GE
(
InsertFrame
(
kVideoFrameKey
)
kNoError
)
;
EXPECT_TRUE
(
DecodeIncompleteFrame
(
)
)
;
stream_generator_
-
>
GenerateFrame
(
kVideoFrameKey
100
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
clock_
-
>
AdvanceTimeMilliseconds
(
kDefaultFramePeriodMs
)
;
EXPECT_EQ
(
kDecodableSession
InsertPacketAndPop
(
0
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
while
(
stream_generator_
-
>
PacketsRemaining
(
)
>
1
)
{
if
(
stream_generator_
-
>
NextSequenceNumber
(
)
%
10
!
=
0
)
{
EXPECT_EQ
(
kDecodableSession
InsertPacketAndPop
(
0
)
)
;
}
else
{
stream_generator_
-
>
NextPacket
(
NULL
)
;
}
}
EXPECT_EQ
(
kDecodableSession
InsertPacketAndPop
(
0
)
)
;
EXPECT_EQ
(
0
stream_generator_
-
>
PacketsRemaining
(
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
EXPECT_FALSE
(
DecodeIncompleteFrame
(
)
)
;
bool
request_key_frame
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
request_key_frame
)
;
const
size_t
kExpectedNackSize
=
9
;
ASSERT_EQ
(
kExpectedNackSize
nack_list
.
size
(
)
)
;
for
(
size_t
i
=
0
;
i
<
nack_list
.
size
(
)
;
+
+
i
)
EXPECT_EQ
(
(
1
+
i
)
*
10
nack_list
[
i
]
)
;
}
TEST_F
(
TestJitterBufferNack
NormalOperationWrap
)
{
bool
request_key_frame
=
false
;
stream_generator_
-
>
Init
(
65532
clock_
-
>
TimeInMilliseconds
(
)
)
;
InsertFrame
(
kVideoFrameKey
)
;
EXPECT_FALSE
(
request_key_frame
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
stream_generator_
-
>
GenerateFrame
(
kVideoFrameDelta
100
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
0
)
)
;
while
(
stream_generator_
-
>
PacketsRemaining
(
)
>
1
)
{
if
(
stream_generator_
-
>
NextSequenceNumber
(
)
%
10
!
=
0
)
{
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
0
)
)
;
EXPECT_FALSE
(
request_key_frame
)
;
}
else
{
stream_generator_
-
>
NextPacket
(
NULL
)
;
}
}
EXPECT_EQ
(
kIncomplete
InsertPacketAndPop
(
0
)
)
;
EXPECT_FALSE
(
request_key_frame
)
;
EXPECT_EQ
(
0
stream_generator_
-
>
PacketsRemaining
(
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
EXPECT_FALSE
(
DecodeCompleteFrame
(
)
)
;
bool
extended
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
extended
)
;
const
size_t
kExpectedNackSize
=
10
;
ASSERT_EQ
(
kExpectedNackSize
nack_list
.
size
(
)
)
;
for
(
size_t
i
=
0
;
i
<
nack_list
.
size
(
)
;
+
+
i
)
EXPECT_EQ
(
i
*
10
nack_list
[
i
]
)
;
}
TEST_F
(
TestJitterBufferNack
NormalOperationWrap2
)
{
bool
request_key_frame
=
false
;
stream_generator_
-
>
Init
(
65532
clock_
-
>
TimeInMilliseconds
(
)
)
;
InsertFrame
(
kVideoFrameKey
)
;
EXPECT_FALSE
(
request_key_frame
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
stream_generator_
-
>
GenerateFrame
(
kVideoFrameDelta
1
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
clock_
-
>
AdvanceTimeMilliseconds
(
kDefaultFramePeriodMs
)
;
for
(
int
i
=
0
;
i
<
5
;
+
+
i
)
{
if
(
stream_generator_
-
>
NextSequenceNumber
(
)
!
=
65535
)
{
EXPECT_EQ
(
kCompleteSession
InsertPacketAndPop
(
0
)
)
;
EXPECT_FALSE
(
request_key_frame
)
;
}
else
{
stream_generator_
-
>
NextPacket
(
NULL
)
;
}
stream_generator_
-
>
GenerateFrame
(
kVideoFrameDelta
1
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
clock_
-
>
AdvanceTimeMilliseconds
(
kDefaultFramePeriodMs
)
;
}
EXPECT_EQ
(
kCompleteSession
InsertPacketAndPop
(
0
)
)
;
EXPECT_FALSE
(
request_key_frame
)
;
bool
extended
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
extended
)
;
ASSERT_EQ
(
1u
nack_list
.
size
(
)
)
;
EXPECT_EQ
(
65535
nack_list
[
0
]
)
;
}
TEST_F
(
TestJitterBufferNack
ResetByFutureKeyFrameDoesntError
)
{
stream_generator_
-
>
Init
(
0
clock_
-
>
TimeInMilliseconds
(
)
)
;
InsertFrame
(
kVideoFrameKey
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
bool
extended
=
false
;
std
:
:
vector
<
uint16_t
>
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
extended
)
;
EXPECT_EQ
(
0u
nack_list
.
size
(
)
)
;
stream_generator_
-
>
Init
(
10000
clock_
-
>
TimeInMilliseconds
(
)
)
;
clock_
-
>
AdvanceTimeMilliseconds
(
kDefaultFramePeriodMs
)
;
InsertFrame
(
kVideoFrameKey
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
extended
)
;
EXPECT_EQ
(
0u
nack_list
.
size
(
)
)
;
clock_
-
>
AdvanceTimeMilliseconds
(
kDefaultFramePeriodMs
)
;
InsertFrame
(
kVideoFrameDelta
)
;
EXPECT_TRUE
(
DecodeCompleteFrame
(
)
)
;
nack_list
=
jitter_buffer_
-
>
GetNackList
(
&
extended
)
;
EXPECT_EQ
(
0u
nack_list
.
size
(
)
)
;
}
}
