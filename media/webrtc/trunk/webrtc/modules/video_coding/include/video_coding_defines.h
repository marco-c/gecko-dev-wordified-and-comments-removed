#
ifndef
MODULES_VIDEO_CODING_INCLUDE_VIDEO_CODING_DEFINES_H_
#
define
MODULES_VIDEO_CODING_INCLUDE_VIDEO_CODING_DEFINES_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
common_video
/
include
/
video_frame
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
#
define
VCM_FRAME_NOT_READY
3
#
define
VCM_MISSING_CALLBACK
1
#
define
VCM_OK
0
#
define
VCM_GENERAL_ERROR
-
1
#
define
VCM_LEVEL_EXCEEDED
-
2
#
define
VCM_MEMORY
-
3
#
define
VCM_PARAMETER_ERROR
-
4
#
define
VCM_UNKNOWN_PAYLOAD
-
5
#
define
VCM_CODEC_ERROR
-
6
#
define
VCM_UNINITIALIZED
-
7
#
define
VCM_NO_CODEC_REGISTERED
-
8
#
define
VCM_JITTER_BUFFER_ERROR
-
9
#
define
VCM_OLD_PACKET_ERROR
-
10
#
define
VCM_NO_FRAME_DECODED
-
11
#
define
VCM_NOT_IMPLEMENTED
-
20
enum
{
kDefaultTimingFramesDelayMs
=
200
kDefaultOutlierFrameSizePercent
=
250
kMaxEncodeStartTimeListSize
=
50
}
;
enum
VCMVideoProtection
{
kProtectionNone
kProtectionNack
kProtectionFEC
kProtectionNackFEC
}
;
enum
VCMTemporalDecimation
{
kBitrateOverUseDecimation
}
;
struct
VCMFrameCount
{
uint32_t
numKeyFrames
;
uint32_t
numDeltaFrames
;
}
;
class
VCMReceiveCallback
{
public
:
virtual
int32_t
FrameToRender
(
VideoFrame
&
videoFrame
rtc
:
:
Optional
<
uint8_t
>
qp
VideoContentType
content_type
)
=
0
;
virtual
int32_t
ReceivedDecodedReferenceFrame
(
const
uint64_t
pictureId
)
{
return
-
1
;
}
virtual
void
OnIncomingPayloadType
(
int
payload_type
)
{
}
virtual
void
OnDecoderImplementationName
(
const
char
*
implementation_name
)
{
}
protected
:
virtual
~
VCMReceiveCallback
(
)
{
}
}
;
class
VCMReceiveStatisticsCallback
{
public
:
virtual
void
OnReceiveRatesUpdated
(
uint32_t
bitRate
uint32_t
frameRate
)
=
0
;
virtual
void
OnCompleteFrame
(
bool
is_keyframe
size_t
size_bytes
VideoContentType
content_type
)
=
0
;
virtual
void
OnDiscardedPacketsUpdated
(
int
discarded_packets
)
=
0
;
virtual
void
OnFrameCountsUpdated
(
const
FrameCounts
&
frame_counts
)
=
0
;
virtual
void
OnFrameBufferTimingsUpdated
(
int
decode_ms
int
max_decode_ms
int
current_delay_ms
int
target_delay_ms
int
jitter_buffer_ms
int
min_playout_delay_ms
int
render_delay_ms
)
=
0
;
virtual
void
OnTimingFrameInfoUpdated
(
const
TimingFrameInfo
&
info
)
=
0
;
protected
:
virtual
~
VCMReceiveStatisticsCallback
(
)
{
}
}
;
class
VCMProtectionCallback
{
public
:
virtual
int
ProtectionRequest
(
const
FecProtectionParams
*
delta_params
const
FecProtectionParams
*
key_params
uint32_t
*
sent_video_rate_bps
uint32_t
*
sent_nack_rate_bps
uint32_t
*
sent_fec_rate_bps
)
=
0
;
protected
:
virtual
~
VCMProtectionCallback
(
)
{
}
}
;
class
VCMFrameTypeCallback
{
public
:
virtual
int32_t
RequestKeyFrame
(
)
=
0
;
protected
:
virtual
~
VCMFrameTypeCallback
(
)
{
}
}
;
class
VCMPacketRequestCallback
{
public
:
virtual
int32_t
ResendPackets
(
const
uint16_t
*
sequenceNumbers
uint16_t
length
)
=
0
;
protected
:
virtual
~
VCMPacketRequestCallback
(
)
{
}
}
;
class
NackSender
{
public
:
virtual
void
SendNack
(
const
std
:
:
vector
<
uint16_t
>
&
sequence_numbers
)
=
0
;
protected
:
virtual
~
NackSender
(
)
{
}
}
;
class
KeyFrameRequestSender
{
public
:
virtual
void
RequestKeyFrame
(
)
=
0
;
protected
:
virtual
~
KeyFrameRequestSender
(
)
{
}
}
;
}
#
endif
