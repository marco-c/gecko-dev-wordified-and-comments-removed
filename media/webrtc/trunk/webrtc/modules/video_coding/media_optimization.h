#
ifndef
MODULES_VIDEO_CODING_MEDIA_OPTIMIZATION_H_
#
define
MODULES_VIDEO_CODING_MEDIA_OPTIMIZATION_H_
#
include
<
memory
>
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_coding
.
h
"
#
include
"
modules
/
video_coding
/
media_opt_util
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
namespace
webrtc
{
class
Clock
;
class
FrameDropper
;
namespace
media_optimization
{
class
MediaOptimization
{
public
:
explicit
MediaOptimization
(
Clock
*
clock
)
;
~
MediaOptimization
(
)
;
void
Reset
(
)
;
void
SetEncodingData
(
int32_t
max_bit_rate
uint32_t
bit_rate
uint32_t
max_frame_rate
)
;
uint32_t
SetTargetRates
(
uint32_t
target_bitrate
)
;
void
EnableFrameDropper
(
bool
enable
)
;
bool
DropFrame
(
)
;
void
UpdateWithEncodedData
(
const
EncodedImage
&
encoded_image
)
;
uint32_t
InputFrameRate
(
)
;
private
:
enum
{
kFrameCountHistorySize
=
90
}
;
void
UpdateIncomingFrameRate
(
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
void
ProcessIncomingFrameRate
(
int64_t
now
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
uint32_t
InputFrameRateInternal
(
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
rtc
:
:
CriticalSection
crit_sect_
;
Clock
*
const
clock_
RTC_GUARDED_BY
(
crit_sect_
)
;
int32_t
max_bit_rate_
RTC_GUARDED_BY
(
crit_sect_
)
;
float
max_frame_rate_
RTC_GUARDED_BY
(
crit_sect_
)
;
std
:
:
unique_ptr
<
FrameDropper
>
frame_dropper_
RTC_GUARDED_BY
(
crit_sect_
)
;
float
incoming_frame_rate_
RTC_GUARDED_BY
(
crit_sect_
)
;
int64_t
incoming_frame_times_
[
kFrameCountHistorySize
]
RTC_GUARDED_BY
(
crit_sect_
)
;
}
;
}
}
#
endif
