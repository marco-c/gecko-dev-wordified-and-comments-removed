#
include
"
modules
/
video_coding
/
codecs
/
test
/
videoprocessor_integrationtest
.
h
"
#
include
<
vector
>
#
include
"
test
/
testsupport
/
fileutils
.
h
"
namespace
webrtc
{
namespace
test
{
#
if
defined
(
WEBRTC_USE_H264
)
namespace
{
const
bool
kResilienceOn
=
true
;
const
int
kCifWidth
=
352
;
const
int
kCifHeight
=
288
;
const
int
kNumFrames
=
100
;
const
std
:
:
nullptr_t
kNoVisualizationParams
=
nullptr
;
}
class
VideoProcessorIntegrationTestOpenH264
:
public
VideoProcessorIntegrationTest
{
protected
:
VideoProcessorIntegrationTestOpenH264
(
)
{
config_
.
filename
=
"
foreman_cif
"
;
config_
.
input_filename
=
ResourcePath
(
config_
.
filename
"
yuv
"
)
;
config_
.
output_filename
=
TempFilename
(
OutputPath
(
)
"
videoprocessor_integrationtest_libvpx
"
)
;
config_
.
num_frames
=
kNumFrames
;
config_
.
networking_config
.
packet_loss_probability
=
0
.
0
;
config_
.
use_single_core
=
true
;
config_
.
hw_encoder
=
false
;
config_
.
hw_decoder
=
false
;
config_
.
encoded_frame_checker
=
&
h264_keyframe_checker_
;
}
}
;
TEST_F
(
VideoProcessorIntegrationTestOpenH264
Process0PercentPacketLoss
)
{
config_
.
SetCodecSettings
(
kVideoCodecH264
1
false
false
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
500
30
kNumFrames
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
2
60
20
10
20
0
1
}
}
;
QualityThresholds
quality_thresholds
(
35
.
0
25
.
0
0
.
93
0
.
70
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
TEST_F
(
VideoProcessorIntegrationTestOpenH264
ProcessNoLossSingleNalUnit
)
{
config_
.
h264_codec_settings
.
packetization_mode
=
H264PacketizationMode
:
:
SingleNalUnit
;
config_
.
networking_config
.
max_payload_size_in_bytes
=
500
;
config_
.
SetCodecSettings
(
kVideoCodecH264
1
false
false
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
500
30
kNumFrames
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
2
60
30
10
20
0
1
}
}
;
QualityThresholds
quality_thresholds
(
35
.
0
25
.
0
0
.
93
0
.
70
)
;
BitstreamThresholds
bs_thresholds
(
config_
.
networking_config
.
max_payload_size_in_bytes
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
&
bs_thresholds
kNoVisualizationParams
)
;
}
#
endif
}
}
