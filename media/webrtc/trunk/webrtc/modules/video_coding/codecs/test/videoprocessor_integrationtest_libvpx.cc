#
include
"
modules
/
video_coding
/
codecs
/
test
/
videoprocessor_integrationtest
.
h
"
#
include
<
vector
>
#
include
"
modules
/
video_coding
/
codecs
/
test
/
test_config
.
h
"
#
include
"
rtc_base
/
ptr_util
.
h
"
#
include
"
test
/
testsupport
/
fileutils
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
{
const
bool
kResilienceOn
=
true
;
const
int
kCifWidth
=
352
;
const
int
kCifHeight
=
288
;
#
if
!
defined
(
WEBRTC_IOS
)
const
int
kNumFramesShort
=
100
;
#
endif
const
int
kNumFramesLong
=
300
;
const
std
:
:
nullptr_t
kNoVisualizationParams
=
nullptr
;
}
class
VideoProcessorIntegrationTestLibvpx
:
public
VideoProcessorIntegrationTest
{
protected
:
VideoProcessorIntegrationTestLibvpx
(
)
{
config_
.
filename
=
"
foreman_cif
"
;
config_
.
input_filename
=
ResourcePath
(
config_
.
filename
"
yuv
"
)
;
config_
.
output_filename
=
TempFilename
(
OutputPath
(
)
"
videoprocessor_integrationtest_libvpx
"
)
;
config_
.
num_frames
=
kNumFramesLong
;
config_
.
networking_config
.
packet_loss_probability
=
0
.
0
;
config_
.
use_single_core
=
true
;
config_
.
hw_encoder
=
false
;
config_
.
hw_decoder
=
false
;
config_
.
encoded_frame_checker
=
&
qp_frame_checker_
;
}
private
:
const
class
QpFrameChecker
:
public
TestConfig
:
:
EncodedFrameChecker
{
public
:
void
CheckEncodedFrame
(
webrtc
:
:
VideoCodecType
codec
const
EncodedImage
&
encoded_frame
)
const
override
{
int
qp
;
if
(
codec
=
=
kVideoCodecVP8
)
{
EXPECT_TRUE
(
vp8
:
:
GetQp
(
encoded_frame
.
_buffer
encoded_frame
.
_length
&
qp
)
)
;
}
else
if
(
codec
=
=
kVideoCodecVP9
)
{
EXPECT_TRUE
(
vp9
:
:
GetQp
(
encoded_frame
.
_buffer
encoded_frame
.
_length
&
qp
)
)
;
}
else
{
RTC_NOTREACHED
(
)
;
}
EXPECT_EQ
(
encoded_frame
.
qp_
qp
)
<
<
"
Encoder
QP
!
=
parsed
bitstream
QP
.
"
;
}
}
qp_frame_checker_
;
}
;
#
if
!
defined
(
WEBRTC_IOS
)
#
if
!
defined
(
RTC_DISABLE_VP9
)
TEST_F
(
VideoProcessorIntegrationTestLibvpx
Process0PercentPacketLossVP9
)
{
config_
.
SetCodecSettings
(
kVideoCodecVP9
1
false
false
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
config_
.
num_frames
=
kNumFramesShort
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
500
30
kNumFramesShort
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
0
40
20
10
20
0
1
}
}
;
QualityThresholds
quality_thresholds
(
37
.
0
36
.
0
0
.
93
0
.
92
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
TEST_F
(
VideoProcessorIntegrationTestLibvpx
Process5PercentPacketLossVP9
)
{
config_
.
networking_config
.
packet_loss_probability
=
0
.
05f
;
config_
.
num_frames
=
kNumFramesShort
;
config_
.
SetCodecSettings
(
kVideoCodecVP9
1
false
false
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
500
30
kNumFramesShort
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
0
40
20
10
20
0
1
}
}
;
QualityThresholds
quality_thresholds
(
17
.
0
14
.
0
0
.
45
0
.
36
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
TEST_F
(
VideoProcessorIntegrationTestLibvpx
ProcessNoLossChangeBitRateVP9
)
{
config_
.
SetCodecSettings
(
kVideoCodecVP9
1
false
false
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
200
30
100
}
{
700
30
200
}
{
500
30
kNumFramesLong
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
0
35
20
20
35
0
1
}
{
2
0
20
20
60
0
0
}
{
0
0
25
20
40
0
0
}
}
;
QualityThresholds
quality_thresholds
(
35
.
5
30
.
0
0
.
90
0
.
85
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
TEST_F
(
VideoProcessorIntegrationTestLibvpx
ProcessNoLossChangeFrameRateFrameDropVP9
)
{
config_
.
SetCodecSettings
(
kVideoCodecVP9
1
false
false
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
100
24
100
}
{
100
15
200
}
{
100
10
kNumFramesLong
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
45
50
95
15
45
0
1
}
{
20
0
50
10
30
0
0
}
{
5
0
30
5
25
0
0
}
}
;
QualityThresholds
quality_thresholds
(
31
.
5
18
.
0
0
.
80
0
.
43
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
TEST_F
(
VideoProcessorIntegrationTestLibvpx
ProcessNoLossDenoiserOnVP9
)
{
config_
.
SetCodecSettings
(
kVideoCodecVP9
1
false
true
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
config_
.
num_frames
=
kNumFramesShort
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
500
30
kNumFramesShort
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
0
40
20
10
20
0
1
}
}
;
QualityThresholds
quality_thresholds
(
36
.
8
35
.
8
0
.
92
0
.
91
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
TEST_F
(
VideoProcessorIntegrationTestLibvpx
DISABLED_ProcessNoLossSpatialResizeFrameDropVP9
)
{
config_
.
SetCodecSettings
(
kVideoCodecVP9
1
false
false
true
true
kResilienceOn
kCifWidth
kCifHeight
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
50
30
kNumFramesLong
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
228
70
160
15
80
1
1
}
}
;
QualityThresholds
quality_thresholds
(
24
.
0
13
.
0
0
.
65
0
.
37
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
#
endif
TEST_F
(
VideoProcessorIntegrationTestLibvpx
ProcessZeroPacketLoss
)
{
config_
.
SetCodecSettings
(
kVideoCodecVP8
1
false
true
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
config_
.
num_frames
=
kNumFramesShort
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
500
30
kNumFramesShort
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
0
40
20
10
15
0
1
}
}
;
QualityThresholds
quality_thresholds
(
34
.
95
33
.
0
0
.
90
0
.
89
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
TEST_F
(
VideoProcessorIntegrationTestLibvpx
Process5PercentPacketLoss
)
{
config_
.
networking_config
.
packet_loss_probability
=
0
.
05f
;
config_
.
SetCodecSettings
(
kVideoCodecVP8
1
false
true
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
config_
.
num_frames
=
kNumFramesShort
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
500
30
kNumFramesShort
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
0
40
20
10
15
0
1
}
}
;
QualityThresholds
quality_thresholds
(
20
.
0
16
.
0
0
.
60
0
.
40
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
TEST_F
(
VideoProcessorIntegrationTestLibvpx
Process10PercentPacketLoss
)
{
config_
.
networking_config
.
packet_loss_probability
=
0
.
1f
;
config_
.
SetCodecSettings
(
kVideoCodecVP8
1
false
true
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
config_
.
num_frames
=
kNumFramesShort
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
500
30
kNumFramesShort
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
0
40
20
10
15
0
1
}
}
;
QualityThresholds
quality_thresholds
(
19
.
0
16
.
0
0
.
50
0
.
35
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
#
endif
#
if
defined
(
WEBRTC_ANDROID
)
|
|
defined
(
WEBRTC_IOS
)
#
define
MAYBE_ProcessNoLossChangeBitRateVP8
\
DISABLED_ProcessNoLossChangeBitRateVP8
#
else
#
define
MAYBE_ProcessNoLossChangeBitRateVP8
ProcessNoLossChangeBitRateVP8
#
endif
TEST_F
(
VideoProcessorIntegrationTestLibvpx
MAYBE_ProcessNoLossChangeBitRateVP8
)
{
config_
.
SetCodecSettings
(
kVideoCodecVP8
1
false
true
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
200
30
100
}
{
800
30
200
}
{
500
30
kNumFramesLong
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
0
45
20
10
15
0
1
}
{
0
0
25
20
10
0
0
}
{
0
0
25
15
10
0
0
}
}
;
QualityThresholds
quality_thresholds
(
34
.
0
32
.
0
0
.
85
0
.
80
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
#
if
defined
(
WEBRTC_ANDROID
)
|
|
defined
(
WEBRTC_IOS
)
#
define
MAYBE_ProcessNoLossChangeFrameRateFrameDropVP8
\
DISABLED_ProcessNoLossChangeFrameRateFrameDropVP8
#
else
#
define
MAYBE_ProcessNoLossChangeFrameRateFrameDropVP8
\
ProcessNoLossChangeFrameRateFrameDropVP8
#
endif
TEST_F
(
VideoProcessorIntegrationTestLibvpx
MAYBE_ProcessNoLossChangeFrameRateFrameDropVP8
)
{
config_
.
SetCodecSettings
(
kVideoCodecVP8
1
false
true
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
80
24
100
}
{
80
15
200
}
{
80
10
kNumFramesLong
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
40
20
75
15
60
0
1
}
{
10
0
25
10
35
0
0
}
{
0
0
20
10
15
0
0
}
}
;
QualityThresholds
quality_thresholds
(
31
.
0
22
.
0
0
.
80
0
.
65
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
#
if
defined
(
WEBRTC_ANDROID
)
|
|
defined
(
WEBRTC_IOS
)
#
define
MAYBE_ProcessNoLossTemporalLayersVP8
\
DISABLED_ProcessNoLossTemporalLayersVP8
#
else
#
define
MAYBE_ProcessNoLossTemporalLayersVP8
ProcessNoLossTemporalLayersVP8
#
endif
TEST_F
(
VideoProcessorIntegrationTestLibvpx
MAYBE_ProcessNoLossTemporalLayersVP8
)
{
config_
.
SetCodecSettings
(
kVideoCodecVP8
3
false
true
true
false
kResilienceOn
kCifWidth
kCifHeight
)
;
std
:
:
vector
<
RateProfile
>
rate_profiles
=
{
{
200
30
150
}
{
400
30
kNumFramesLong
+
1
}
}
;
std
:
:
vector
<
RateControlThresholds
>
rc_thresholds
=
{
{
0
20
30
10
10
0
1
}
{
0
0
30
15
10
0
0
}
}
;
QualityThresholds
quality_thresholds
(
32
.
5
30
.
0
0
.
85
0
.
80
)
;
ProcessFramesAndMaybeVerify
(
rate_profiles
&
rc_thresholds
&
quality_thresholds
nullptr
kNoVisualizationParams
)
;
}
}
}
