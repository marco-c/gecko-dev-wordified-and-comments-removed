#
ifndef
MODULES_VIDEO_CODING_CODECS_TEST_PACKET_MANIPULATOR_H_
#
define
MODULES_VIDEO_CODING_CODECS_TEST_PACKET_MANIPULATOR_H_
#
include
<
stdlib
.
h
>
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
test
/
testsupport
/
packet_reader
.
h
"
namespace
webrtc
{
namespace
test
{
enum
PacketLossMode
{
kUniform
kBurst
}
;
struct
NetworkingConfig
{
NetworkingConfig
(
)
:
packet_size_in_bytes
(
1500
)
max_payload_size_in_bytes
(
1440
)
packet_loss_mode
(
kUniform
)
packet_loss_probability
(
0
.
0
)
packet_loss_burst_length
(
1
)
{
}
size_t
packet_size_in_bytes
;
size_t
max_payload_size_in_bytes
;
PacketLossMode
packet_loss_mode
;
double
packet_loss_probability
;
int
packet_loss_burst_length
;
}
;
class
PacketManipulator
{
public
:
virtual
~
PacketManipulator
(
)
{
}
virtual
int
ManipulatePackets
(
webrtc
:
:
EncodedImage
*
encoded_image
)
=
0
;
}
;
class
PacketManipulatorImpl
:
public
PacketManipulator
{
public
:
PacketManipulatorImpl
(
PacketReader
*
packet_reader
const
NetworkingConfig
&
config
bool
verbose
)
;
~
PacketManipulatorImpl
(
)
=
default
;
int
ManipulatePackets
(
webrtc
:
:
EncodedImage
*
encoded_image
)
override
;
virtual
void
InitializeRandomSeed
(
unsigned
int
seed
)
;
protected
:
virtual
double
RandomUniform
(
)
;
private
:
PacketReader
*
const
packet_reader_
;
const
NetworkingConfig
&
config_
;
const
bool
verbose_
;
int
active_burst_packets_
;
rtc
:
:
CriticalSection
critsect_
;
unsigned
int
random_seed_
;
}
;
}
}
#
endif
