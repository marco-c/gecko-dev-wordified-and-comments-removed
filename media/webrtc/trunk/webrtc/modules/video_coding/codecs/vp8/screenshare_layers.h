#
ifndef
WEBRTC_MODULES_VIDEO_CODING_CODECS_VP8_SCREENSHARE_LAYERS_H_
#
define
WEBRTC_MODULES_VIDEO_CODING_CODECS_VP8_SCREENSHARE_LAYERS_H_
#
include
<
list
>
#
include
"
vpx
/
vpx_encoder
.
h
"
#
include
"
webrtc
/
base
/
timeutils
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
codecs
/
vp8
/
temporal_layers
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
utility
/
frame_dropper
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
struct
CodecSpecificInfoVP8
;
class
ScreenshareLayers
:
public
TemporalLayers
{
public
:
static
const
double
kMaxTL0FpsReduction
;
static
const
double
kAcceptableTargetOvershoot
;
static
const
int
kTl0Flags
;
static
const
int
kTl1Flags
;
static
const
int
kTl1SyncFlags
;
ScreenshareLayers
(
int
num_temporal_layers
uint8_t
initial_tl0_pic_idx
)
;
virtual
~
ScreenshareLayers
(
)
{
}
int
EncodeFlags
(
uint32_t
timestamp
)
override
;
bool
ConfigureBitrates
(
int
bitrate_kbps
int
max_bitrate_kbps
int
framerate
vpx_codec_enc_cfg_t
*
cfg
)
override
;
void
PopulateCodecSpecific
(
bool
base_layer_sync
CodecSpecificInfoVP8
*
vp8_info
uint32_t
timestamp
)
override
;
void
FrameEncoded
(
unsigned
int
size
uint32_t
timestamp
int
qp
)
override
;
int
CurrentLayerId
(
)
const
override
;
bool
UpdateConfiguration
(
vpx_codec_enc_cfg_t
*
cfg
)
override
;
private
:
bool
TimeToSync
(
int64_t
timestamp
)
const
;
int
number_of_temporal_layers_
;
bool
last_base_layer_sync_
;
uint8_t
tl0_pic_idx_
;
int
active_layer_
;
int64_t
last_timestamp_
;
int64_t
last_sync_timestamp_
;
rtc
:
:
TimestampWrapAroundHandler
time_wrap_handler_
;
int
min_qp_
;
int
max_qp_
;
uint32_t
max_debt_bytes_
;
int
frame_rate_
;
static
const
int
kMaxNumTemporalLayers
=
2
;
struct
TemporalLayer
{
TemporalLayer
(
)
:
state
(
State
:
:
kNormal
)
enhanced_max_qp
(
-
1
)
last_qp
(
-
1
)
debt_bytes_
(
0
)
target_rate_kbps_
(
0
)
{
}
enum
class
State
{
kNormal
kDropped
kReencoded
kQualityBoost
}
state
;
int
enhanced_max_qp
;
int
last_qp
;
uint32_t
debt_bytes_
;
uint32_t
target_rate_kbps_
;
void
UpdateDebt
(
int64_t
delta_ms
)
;
}
layers_
[
kMaxNumTemporalLayers
]
;
}
;
}
#
endif
