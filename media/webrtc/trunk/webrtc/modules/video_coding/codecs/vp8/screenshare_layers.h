#
ifndef
MODULES_VIDEO_CODING_CODECS_VP8_SCREENSHARE_LAYERS_H_
#
define
MODULES_VIDEO_CODING_CODECS_VP8_SCREENSHARE_LAYERS_H_
#
include
<
vector
>
#
include
"
modules
/
video_coding
/
codecs
/
vp8
/
temporal_layers
.
h
"
#
include
"
modules
/
video_coding
/
utility
/
frame_dropper
.
h
"
#
include
"
rtc_base
/
rate_statistics
.
h
"
#
include
"
rtc_base
/
timeutils
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
struct
CodecSpecificInfoVP8
;
class
Clock
;
class
ScreenshareLayers
:
public
TemporalLayers
{
public
:
static
const
double
kMaxTL0FpsReduction
;
static
const
double
kAcceptableTargetOvershoot
;
static
const
int
kMaxFrameIntervalMs
;
ScreenshareLayers
(
int
num_temporal_layers
uint8_t
initial_tl0_pic_idx
Clock
*
clock
)
;
virtual
~
ScreenshareLayers
(
)
;
TemporalLayers
:
:
FrameConfig
UpdateLayerConfig
(
uint32_t
timestamp
)
override
;
std
:
:
vector
<
uint32_t
>
OnRatesUpdated
(
int
bitrate_kbps
int
max_bitrate_kbps
int
framerate
)
override
;
bool
UpdateConfiguration
(
vpx_codec_enc_cfg_t
*
cfg
)
override
;
void
PopulateCodecSpecific
(
bool
base_layer_sync
const
TemporalLayers
:
:
FrameConfig
&
tl_config
CodecSpecificInfoVP8
*
vp8_info
uint32_t
timestamp
)
override
;
void
FrameEncoded
(
unsigned
int
size
int
qp
)
override
;
uint8_t
Tl0PicIdx
(
)
const
override
;
private
:
enum
class
TemporalLayerState
:
int
{
kDrop
kTl0
kTl1
kTl1Sync
}
;
bool
TimeToSync
(
int64_t
timestamp
)
const
;
uint32_t
GetCodecTargetBitrateKbps
(
)
const
;
Clock
*
const
clock_
;
int
number_of_temporal_layers_
;
bool
last_base_layer_sync_
;
uint8_t
tl0_pic_idx_
;
int
active_layer_
;
int64_t
last_timestamp_
;
int64_t
last_sync_timestamp_
;
int64_t
last_emitted_tl0_timestamp_
;
rtc
:
:
TimestampWrapAroundHandler
time_wrap_handler_
;
int
min_qp_
;
int
max_qp_
;
uint32_t
max_debt_bytes_
;
rtc
:
:
Optional
<
uint32_t
>
target_framerate_
;
rtc
:
:
Optional
<
uint32_t
>
capture_framerate_
;
RateStatistics
encode_framerate_
;
bool
bitrate_updated_
;
static
constexpr
int
kMaxNumTemporalLayers
=
2
;
struct
TemporalLayer
{
TemporalLayer
(
)
:
state
(
State
:
:
kNormal
)
enhanced_max_qp
(
-
1
)
last_qp
(
-
1
)
debt_bytes_
(
0
)
target_rate_kbps_
(
0
)
{
}
enum
class
State
{
kNormal
kDropped
kReencoded
kQualityBoost
}
state
;
int
enhanced_max_qp
;
int
last_qp
;
uint32_t
debt_bytes_
;
uint32_t
target_rate_kbps_
;
void
UpdateDebt
(
int64_t
delta_ms
)
;
}
layers_
[
kMaxNumTemporalLayers
]
;
void
UpdateHistograms
(
)
;
struct
Stats
{
int64_t
first_frame_time_ms_
=
-
1
;
int64_t
num_tl0_frames_
=
0
;
int64_t
num_tl1_frames_
=
0
;
int64_t
num_dropped_frames_
=
0
;
int64_t
num_overshoots_
=
0
;
int64_t
tl0_qp_sum_
=
0
;
int64_t
tl1_qp_sum_
=
0
;
int64_t
tl0_target_bitrate_sum_
=
0
;
int64_t
tl1_target_bitrate_sum_
=
0
;
}
stats_
;
}
;
}
#
endif
