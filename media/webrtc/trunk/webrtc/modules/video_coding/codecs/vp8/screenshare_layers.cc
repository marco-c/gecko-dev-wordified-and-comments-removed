#
include
"
webrtc
/
modules
/
video_coding
/
codecs
/
vp8
/
screenshare_layers
.
h
"
#
include
<
stdlib
.
h
>
#
include
"
vpx
/
vpx_encoder
.
h
"
#
include
"
vpx
/
vp8cx
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
codecs
/
interface
/
video_codec_interface
.
h
"
namespace
webrtc
{
enum
{
kOneSecond90Khz
=
90000
}
;
const
double
ScreenshareLayers
:
:
kMaxTL0FpsReduction
=
2
.
5
;
const
double
ScreenshareLayers
:
:
kAcceptableTargetOvershoot
=
2
.
0
;
ScreenshareLayers
:
:
ScreenshareLayers
(
int
num_temporal_layers
uint8_t
initial_tl0_pic_idx
FrameDropper
*
tl0_frame_dropper
FrameDropper
*
tl1_frame_dropper
)
:
tl0_frame_dropper_
(
tl0_frame_dropper
)
tl1_frame_dropper_
(
tl1_frame_dropper
)
number_of_temporal_layers_
(
num_temporal_layers
)
last_base_layer_sync_
(
false
)
tl0_pic_idx_
(
initial_tl0_pic_idx
)
active_layer_
(
0
)
framerate_
(
5
)
last_sync_timestamp_
(
-
1
)
{
assert
(
num_temporal_layers
>
0
)
;
assert
(
num_temporal_layers
<
=
2
)
;
assert
(
tl0_frame_dropper
&
&
tl1_frame_dropper
)
;
}
int
ScreenshareLayers
:
:
CurrentLayerId
(
)
const
{
return
0
;
}
int
ScreenshareLayers
:
:
EncodeFlags
(
uint32_t
timestamp
)
{
if
(
number_of_temporal_layers_
<
=
1
)
{
return
0
;
}
CalculateFramerate
(
timestamp
)
;
int
flags
=
0
;
if
(
tl0_frame_dropper_
-
>
DropFrame
(
)
)
{
if
(
tl1_frame_dropper_
-
>
DropFrame
(
)
)
{
flags
=
-
1
;
}
else
{
active_layer_
=
1
;
if
(
TimeToSync
(
timestamp
)
)
{
last_sync_timestamp_
=
timestamp
;
flags
=
VP8_EFLAG_NO_REF_ARF
;
flags
|
=
VP8_EFLAG_NO_REF_GF
;
flags
|
=
VP8_EFLAG_NO_UPD_ARF
;
flags
|
=
VP8_EFLAG_NO_UPD_LAST
;
}
else
{
flags
=
VP8_EFLAG_NO_REF_ARF
;
flags
|
=
VP8_EFLAG_NO_UPD_ARF
;
flags
|
=
VP8_EFLAG_NO_UPD_LAST
;
}
}
}
else
{
active_layer_
=
0
;
flags
=
VP8_EFLAG_NO_UPD_GF
;
flags
|
=
VP8_EFLAG_NO_UPD_ARF
;
flags
|
=
VP8_EFLAG_NO_REF_GF
;
flags
|
=
VP8_EFLAG_NO_REF_ARF
;
}
tl0_frame_dropper_
-
>
Leak
(
framerate_
)
;
tl1_frame_dropper_
-
>
Leak
(
framerate_
)
;
return
flags
;
}
bool
ScreenshareLayers
:
:
ConfigureBitrates
(
int
bitrate_kbit
int
max_bitrate_kbit
int
framerate
vpx_codec_enc_cfg_t
*
cfg
)
{
if
(
framerate
>
0
)
framerate_
=
framerate
;
tl0_frame_dropper_
-
>
SetRates
(
bitrate_kbit
framerate_
)
;
tl1_frame_dropper_
-
>
SetRates
(
max_bitrate_kbit
framerate_
)
;
if
(
cfg
!
=
nullptr
)
{
double
target_bitrate
=
std
:
:
min
(
bitrate_kbit
*
kMaxTL0FpsReduction
max_bitrate_kbit
/
kAcceptableTargetOvershoot
)
;
cfg
-
>
rc_target_bitrate
=
std
:
:
max
(
static_cast
<
unsigned
int
>
(
bitrate_kbit
)
static_cast
<
unsigned
int
>
(
target_bitrate
+
0
.
5
)
)
;
}
return
true
;
}
void
ScreenshareLayers
:
:
FrameEncoded
(
unsigned
int
size
uint32_t
timestamp
)
{
if
(
active_layer_
=
=
0
)
{
tl0_frame_dropper_
-
>
Fill
(
size
true
)
;
}
tl1_frame_dropper_
-
>
Fill
(
size
true
)
;
}
void
ScreenshareLayers
:
:
PopulateCodecSpecific
(
bool
base_layer_sync
CodecSpecificInfoVP8
*
vp8_info
uint32_t
timestamp
)
{
if
(
number_of_temporal_layers_
=
=
1
)
{
vp8_info
-
>
temporalIdx
=
kNoTemporalIdx
;
vp8_info
-
>
layerSync
=
false
;
vp8_info
-
>
tl0PicIdx
=
kNoTl0PicIdx
;
}
else
{
vp8_info
-
>
temporalIdx
=
active_layer_
;
if
(
base_layer_sync
)
{
vp8_info
-
>
temporalIdx
=
0
;
last_sync_timestamp_
=
timestamp
;
}
else
if
(
last_base_layer_sync_
&
&
vp8_info
-
>
temporalIdx
!
=
0
)
{
last_sync_timestamp_
=
timestamp
;
}
vp8_info
-
>
layerSync
=
(
last_sync_timestamp_
=
=
timestamp
)
;
if
(
vp8_info
-
>
temporalIdx
=
=
0
)
{
tl0_pic_idx_
+
+
;
}
last_base_layer_sync_
=
base_layer_sync
;
vp8_info
-
>
tl0PicIdx
=
tl0_pic_idx_
;
}
}
bool
ScreenshareLayers
:
:
TimeToSync
(
uint32_t
timestamp
)
const
{
const
uint32_t
timestamp_diff
=
timestamp
-
last_sync_timestamp_
;
return
last_sync_timestamp_
<
0
|
|
timestamp_diff
>
kOneSecond90Khz
;
}
void
ScreenshareLayers
:
:
CalculateFramerate
(
uint32_t
timestamp
)
{
timestamp_list_
.
push_front
(
timestamp
)
;
uint32_t
timestamp_diff
=
timestamp
-
timestamp_list_
.
back
(
)
;
while
(
timestamp_diff
>
kOneSecond90Khz
)
{
timestamp_list_
.
pop_back
(
)
;
timestamp_diff
=
timestamp
-
timestamp_list_
.
back
(
)
;
}
framerate_
=
timestamp_list_
.
size
(
)
;
if
(
timestamp_diff
>
0
)
{
framerate_
=
(
kOneSecond90Khz
*
(
timestamp_list_
.
size
(
)
-
1
)
+
timestamp_diff
/
2
)
/
timestamp_diff
;
}
}
}
