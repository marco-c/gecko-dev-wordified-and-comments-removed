#
ifndef
MODULES_VIDEO_CODING_CODECS_STEREO_INCLUDE_STEREO_DECODER_ADAPTER_H_
#
define
MODULES_VIDEO_CODING_CODECS_STEREO_INCLUDE_STEREO_DECODER_ADAPTER_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
video_codecs
/
video_decoder
.
h
"
#
include
"
api
/
video_codecs
/
video_decoder_factory
.
h
"
#
include
"
modules
/
video_coding
/
codecs
/
stereo
/
include
/
stereo_encoder_adapter
.
h
"
namespace
webrtc
{
class
StereoDecoderAdapter
:
public
VideoDecoder
{
public
:
explicit
StereoDecoderAdapter
(
VideoDecoderFactory
*
factory
)
;
virtual
~
StereoDecoderAdapter
(
)
;
int32_t
InitDecode
(
const
VideoCodec
*
codec_settings
int32_t
number_of_cores
)
override
;
int32_t
Decode
(
const
EncodedImage
&
input_image
bool
missing_frames
const
RTPFragmentationHeader
*
fragmentation
const
CodecSpecificInfo
*
codec_specific_info
int64_t
render_time_ms
)
override
;
int32_t
RegisterDecodeCompleteCallback
(
DecodedImageCallback
*
callback
)
override
;
int32_t
Release
(
)
override
;
void
Decoded
(
AlphaCodecStream
stream_idx
VideoFrame
*
decoded_image
rtc
:
:
Optional
<
int32_t
>
decode_time_ms
rtc
:
:
Optional
<
uint8_t
>
qp
)
;
private
:
class
AdapterDecodedImageCallback
;
struct
DecodedImageData
;
void
MergeAlphaImages
(
VideoFrame
*
decoded_image
const
rtc
:
:
Optional
<
int32_t
>
&
decode_time_ms
const
rtc
:
:
Optional
<
uint8_t
>
&
qp
VideoFrame
*
stereo_decoded_image
const
rtc
:
:
Optional
<
int32_t
>
&
stereo_decode_time_ms
const
rtc
:
:
Optional
<
uint8_t
>
&
stereo_qp
)
;
VideoDecoderFactory
*
const
factory_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
VideoDecoder
>
>
decoders_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
AdapterDecodedImageCallback
>
>
adapter_callbacks_
;
DecodedImageCallback
*
decoded_complete_callback_
;
std
:
:
map
<
uint32_t
DecodedImageData
>
decoded_data_
;
}
;
}
#
endif
