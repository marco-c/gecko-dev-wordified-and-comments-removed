#
ifndef
WEBRTC_MODULES_VIDEO_CODING_CODECS_I420_INCLUDE_I420_H_
#
define
WEBRTC_MODULES_VIDEO_CODING_CODECS_I420_INCLUDE_I420_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
I420Encoder
:
public
VideoEncoder
{
public
:
I420Encoder
(
)
;
virtual
~
I420Encoder
(
)
;
int
InitEncode
(
const
VideoCodec
*
codecSettings
int
size_t
)
override
;
int
Encode
(
const
VideoFrame
&
inputImage
const
CodecSpecificInfo
*
const
std
:
:
vector
<
FrameType
>
*
)
override
;
int
RegisterEncodeCompleteCallback
(
EncodedImageCallback
*
callback
)
override
;
int
Release
(
)
override
;
int
SetChannelParameters
(
uint32_t
int64_t
)
override
{
return
WEBRTC_VIDEO_CODEC_OK
;
}
private
:
static
uint8_t
*
InsertHeader
(
uint8_t
*
buffer
uint16_t
width
uint16_t
height
)
;
bool
_inited
;
EncodedImage
_encodedImage
;
EncodedImageCallback
*
_encodedCompleteCallback
;
}
;
class
I420Decoder
:
public
VideoDecoder
{
public
:
I420Decoder
(
)
;
virtual
~
I420Decoder
(
)
;
int
InitDecode
(
const
VideoCodec
*
codecSettings
int
)
override
;
int
Decode
(
const
EncodedImage
&
inputImage
bool
missingFrames
const
RTPFragmentationHeader
*
const
CodecSpecificInfo
*
int64_t
)
override
;
int
RegisterDecodeCompleteCallback
(
DecodedImageCallback
*
callback
)
override
;
int
Release
(
)
override
;
private
:
static
const
uint8_t
*
ExtractHeader
(
const
uint8_t
*
buffer
uint16_t
*
width
uint16_t
*
height
)
;
int
_width
;
int
_height
;
bool
_inited
;
DecodedImageCallback
*
_decodeCompleteCallback
;
}
;
}
#
endif
