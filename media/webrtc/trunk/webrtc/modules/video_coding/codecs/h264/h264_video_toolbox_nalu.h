#
ifndef
WEBRTC_MODULES_VIDEO_CODING_CODECS_H264_H264_VIDEO_TOOLBOX_NALU_H_
#
define
WEBRTC_MODULES_VIDEO_CODING_CODECS_H264_H264_VIDEO_TOOLBOX_NALU_H_
#
include
"
webrtc
/
modules
/
video_coding
/
codecs
/
h264
/
include
/
h264
.
h
"
#
if
defined
(
WEBRTC_VIDEO_TOOLBOX_SUPPORTED
)
#
include
<
CoreMedia
/
CoreMedia
.
h
>
#
include
"
webrtc
/
base
/
buffer
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
namespace
webrtc
{
bool
H264CMSampleBufferToAnnexBBuffer
(
CMSampleBufferRef
avcc_sample_buffer
bool
is_keyframe
rtc
:
:
Buffer
*
annexb_buffer
webrtc
:
:
RTPFragmentationHeader
*
*
out_header
)
;
bool
H264AnnexBBufferToCMSampleBuffer
(
const
uint8_t
*
annexb_buffer
size_t
annexb_buffer_size
CMVideoFormatDescriptionRef
video_format
CMSampleBufferRef
*
out_sample_buffer
)
;
class
AnnexBBufferReader
final
{
public
:
AnnexBBufferReader
(
const
uint8_t
*
annexb_buffer
size_t
length
)
;
~
AnnexBBufferReader
(
)
{
}
AnnexBBufferReader
(
const
AnnexBBufferReader
&
other
)
=
delete
;
void
operator
=
(
const
AnnexBBufferReader
&
other
)
=
delete
;
bool
ReadNalu
(
const
uint8_t
*
*
out_nalu
size_t
*
out_length
)
;
size_t
BytesRemaining
(
)
const
;
private
:
size_t
FindNextNaluHeader
(
const
uint8_t
*
start
size_t
length
size_t
offset
)
const
;
const
uint8_t
*
const
start_
;
size_t
offset_
;
size_t
next_offset_
;
const
size_t
length_
;
}
;
class
AvccBufferWriter
final
{
public
:
AvccBufferWriter
(
uint8_t
*
const
avcc_buffer
size_t
length
)
;
~
AvccBufferWriter
(
)
{
}
AvccBufferWriter
(
const
AvccBufferWriter
&
other
)
=
delete
;
void
operator
=
(
const
AvccBufferWriter
&
other
)
=
delete
;
bool
WriteNalu
(
const
uint8_t
*
data
size_t
data_size
)
;
size_t
BytesRemaining
(
)
const
;
private
:
uint8_t
*
const
start_
;
size_t
offset_
;
const
size_t
length_
;
}
;
}
#
endif
#
endif
