#
include
<
limits
>
#
include
<
memory
>
#
include
"
vpx
/
vp8cx
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
codecs
/
vp9
/
screenshare_layers
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
codecs
/
vp9
/
vp9_impl
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
clock
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
namespace
webrtc
{
typedef
VP9EncoderImpl
:
:
SuperFrameRefSettings
Settings
;
const
uint32_t
kTickFrequency
=
90000
;
class
ScreenshareLayerTestVP9
:
public
:
:
testing
:
:
Test
{
protected
:
ScreenshareLayerTestVP9
(
)
:
clock_
(
0
)
{
}
virtual
~
ScreenshareLayerTestVP9
(
)
{
}
void
InitScreenshareLayers
(
int
layers
)
{
layers_
.
reset
(
new
ScreenshareLayersVP9
(
layers
)
)
;
}
void
ConfigureBitrateForLayer
(
int
kbps
uint8_t
layer_id
)
{
layers_
-
>
ConfigureBitrate
(
kbps
layer_id
)
;
}
void
AdvanceTime
(
int64_t
milliseconds
)
{
clock_
.
AdvanceTimeMilliseconds
(
milliseconds
)
;
}
void
AddKilobitsToLayer
(
int
kilobits
uint8_t
layer_id
)
{
layers_
-
>
LayerFrameEncoded
(
kilobits
*
1000
/
8
layer_id
)
;
}
void
EqualRefsForLayer
(
const
Settings
&
actual
uint8_t
layer_id
)
{
EXPECT_EQ
(
expected_
.
layer
[
layer_id
]
.
upd_buf
actual
.
layer
[
layer_id
]
.
upd_buf
)
;
EXPECT_EQ
(
expected_
.
layer
[
layer_id
]
.
ref_buf1
actual
.
layer
[
layer_id
]
.
ref_buf1
)
;
EXPECT_EQ
(
expected_
.
layer
[
layer_id
]
.
ref_buf2
actual
.
layer
[
layer_id
]
.
ref_buf2
)
;
EXPECT_EQ
(
expected_
.
layer
[
layer_id
]
.
ref_buf3
actual
.
layer
[
layer_id
]
.
ref_buf3
)
;
}
void
EqualRefs
(
const
Settings
&
actual
)
{
for
(
unsigned
int
layer_id
=
0
;
layer_id
<
kMaxVp9NumberOfSpatialLayers
;
+
+
layer_id
)
{
EqualRefsForLayer
(
actual
layer_id
)
;
}
}
void
EqualStartStopKeyframe
(
const
Settings
&
actual
)
{
EXPECT_EQ
(
expected_
.
start_layer
actual
.
start_layer
)
;
EXPECT_EQ
(
expected_
.
stop_layer
actual
.
stop_layer
)
;
EXPECT_EQ
(
expected_
.
is_keyframe
actual
.
is_keyframe
)
;
}
void
EqualToExpected
(
)
{
uint32_t
frame_timestamp_
=
clock_
.
TimeInMilliseconds
(
)
*
(
kTickFrequency
/
1000
)
;
Settings
actual
=
layers_
-
>
GetSuperFrameSettings
(
frame_timestamp_
expected_
.
is_keyframe
)
;
EqualRefs
(
actual
)
;
EqualStartStopKeyframe
(
actual
)
;
}
Settings
expected_
;
SimulatedClock
clock_
;
std
:
:
unique_ptr
<
ScreenshareLayersVP9
>
layers_
;
}
;
TEST_F
(
ScreenshareLayerTestVP9
NoRefsOnKeyFrame
)
{
const
int
kNumLayers
=
kMaxVp9NumberOfSpatialLayers
;
InitScreenshareLayers
(
kNumLayers
)
;
expected_
.
start_layer
=
0
;
expected_
.
stop_layer
=
kNumLayers
-
1
;
for
(
int
l
=
0
;
l
<
kNumLayers
;
+
+
l
)
{
expected_
.
layer
[
l
]
.
upd_buf
=
l
;
}
expected_
.
is_keyframe
=
true
;
EqualToExpected
(
)
;
for
(
int
l
=
0
;
l
<
kNumLayers
;
+
+
l
)
{
expected_
.
layer
[
l
]
.
ref_buf1
=
l
;
}
expected_
.
is_keyframe
=
false
;
EqualToExpected
(
)
;
}
TEST_F
(
ScreenshareLayerTestVP9
DontAccumelateAvailableBitsOverTime
)
{
InitScreenshareLayers
(
2
)
;
ConfigureBitrateForLayer
(
100
0
)
;
expected_
.
layer
[
0
]
.
upd_buf
=
0
;
expected_
.
layer
[
0
]
.
ref_buf1
=
0
;
expected_
.
layer
[
1
]
.
upd_buf
=
1
;
expected_
.
layer
[
1
]
.
ref_buf1
=
1
;
expected_
.
start_layer
=
0
;
expected_
.
stop_layer
=
1
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
AdvanceTime
(
200
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
10
0
)
;
}
AdvanceTime
(
200
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
301
0
)
;
expected_
.
start_layer
=
1
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
AdvanceTime
(
200
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
40
1
)
;
}
}
TEST_F
(
ScreenshareLayerTestVP9
AccumelateUsedBitsOverLayers
)
{
const
int
kNumLayers
=
kMaxVp9NumberOfSpatialLayers
;
InitScreenshareLayers
(
kNumLayers
)
;
for
(
int
l
=
0
;
l
<
kNumLayers
-
1
;
+
+
l
)
ConfigureBitrateForLayer
(
100
l
)
;
for
(
int
l
=
0
;
l
<
kNumLayers
;
+
+
l
)
{
expected_
.
layer
[
l
]
.
upd_buf
=
l
;
expected_
.
layer
[
l
]
.
ref_buf1
=
l
;
}
expected_
.
start_layer
=
0
;
expected_
.
stop_layer
=
kNumLayers
-
1
;
EqualToExpected
(
)
;
for
(
int
layer
=
0
;
layer
<
kNumLayers
-
1
;
+
+
layer
)
{
expected_
.
start_layer
=
layer
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
101
layer
)
;
}
}
TEST_F
(
ScreenshareLayerTestVP9
2LayerBitrate
)
{
InitScreenshareLayers
(
2
)
;
ConfigureBitrateForLayer
(
100
0
)
;
expected_
.
layer
[
0
]
.
upd_buf
=
0
;
expected_
.
layer
[
1
]
.
upd_buf
=
1
;
expected_
.
layer
[
0
]
.
ref_buf1
=
-
1
;
expected_
.
layer
[
1
]
.
ref_buf1
=
-
1
;
expected_
.
start_layer
=
0
;
expected_
.
stop_layer
=
1
;
expected_
.
is_keyframe
=
true
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
100
0
)
;
expected_
.
layer
[
0
]
.
ref_buf1
=
0
;
expected_
.
layer
[
1
]
.
ref_buf1
=
1
;
expected_
.
is_keyframe
=
false
;
AdvanceTime
(
199
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
100
0
)
;
expected_
.
start_layer
=
1
;
for
(
int
frame
=
0
;
frame
<
3
;
+
+
frame
)
{
AdvanceTime
(
200
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
100
1
)
;
}
AdvanceTime
(
199
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
100
1
)
;
expected_
.
start_layer
=
0
;
AdvanceTime
(
2
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
100
0
)
;
expected_
.
layer
[
0
]
.
ref_buf1
=
-
1
;
expected_
.
layer
[
1
]
.
ref_buf1
=
-
1
;
expected_
.
is_keyframe
=
true
;
AdvanceTime
(
499
)
;
EqualToExpected
(
)
;
expected_
.
layer
[
0
]
.
ref_buf1
=
0
;
expected_
.
layer
[
1
]
.
ref_buf1
=
1
;
expected_
.
start_layer
=
1
;
expected_
.
is_keyframe
=
false
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
100
0
)
;
expected_
.
is_keyframe
=
false
;
AdvanceTime
(
1499
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
100
1
)
;
expected_
.
start_layer
=
0
;
AdvanceTime
(
2
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
100
0
)
;
}
TEST_F
(
ScreenshareLayerTestVP9
3LayerBitrate
)
{
InitScreenshareLayers
(
3
)
;
ConfigureBitrateForLayer
(
100
0
)
;
ConfigureBitrateForLayer
(
100
1
)
;
for
(
int
l
=
0
;
l
<
3
;
+
+
l
)
{
expected_
.
layer
[
l
]
.
upd_buf
=
l
;
expected_
.
layer
[
l
]
.
ref_buf1
=
l
;
}
expected_
.
start_layer
=
0
;
expected_
.
stop_layer
=
2
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
105
0
)
;
AddKilobitsToLayer
(
30
1
)
;
AdvanceTime
(
199
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
105
0
)
;
AddKilobitsToLayer
(
30
1
)
;
expected_
.
start_layer
=
1
;
AdvanceTime
(
200
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
130
1
)
;
expected_
.
start_layer
=
2
;
AdvanceTime
(
200
)
;
EqualToExpected
(
)
;
AdvanceTime
(
399
)
;
EqualToExpected
(
)
;
expected_
.
start_layer
=
1
;
AdvanceTime
(
2
)
;
EqualToExpected
(
)
;
AdvanceTime
(
99
)
;
EqualToExpected
(
)
;
expected_
.
start_layer
=
0
;
AdvanceTime
(
2
)
;
EqualToExpected
(
)
;
AdvanceTime
(
99
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
200
1
)
;
expected_
.
is_keyframe
=
true
;
for
(
int
l
=
0
;
l
<
3
;
+
+
l
)
expected_
.
layer
[
l
]
.
ref_buf1
=
-
1
;
AdvanceTime
(
200
)
;
EqualToExpected
(
)
;
expected_
.
is_keyframe
=
false
;
expected_
.
start_layer
=
2
;
for
(
int
l
=
0
;
l
<
3
;
+
+
l
)
expected_
.
layer
[
l
]
.
ref_buf1
=
l
;
AdvanceTime
(
200
)
;
EqualToExpected
(
)
;
}
TEST_F
(
ScreenshareLayerTestVP9
TimestampWrap
)
{
InitScreenshareLayers
(
2
)
;
ConfigureBitrateForLayer
(
100
0
)
;
expected_
.
layer
[
0
]
.
upd_buf
=
0
;
expected_
.
layer
[
0
]
.
ref_buf1
=
0
;
expected_
.
layer
[
1
]
.
upd_buf
=
1
;
expected_
.
layer
[
1
]
.
ref_buf1
=
1
;
expected_
.
start_layer
=
0
;
expected_
.
stop_layer
=
1
;
AdvanceTime
(
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
/
(
kTickFrequency
/
1000
)
)
;
EqualToExpected
(
)
;
AddKilobitsToLayer
(
200
0
)
;
expected_
.
start_layer
=
1
;
AdvanceTime
(
1
)
;
EqualToExpected
(
)
;
}
}
