#
include
<
algorithm
>
#
include
"
webrtc
/
modules
/
video_coding
/
codecs
/
vp9
/
screenshare_layers
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
namespace
webrtc
{
ScreenshareLayersVP9
:
:
ScreenshareLayersVP9
(
uint8_t
num_layers
)
:
num_layers_
(
num_layers
)
start_layer_
(
0
)
last_timestamp_
(
0
)
timestamp_initialized_
(
false
)
{
DCHECK_GT
(
num_layers
0
)
;
DCHECK_LE
(
num_layers
kMaxVp9NumberOfSpatialLayers
)
;
memset
(
bits_used_
0
sizeof
(
bits_used_
)
)
;
memset
(
threshold_kbps_
0
sizeof
(
threshold_kbps_
)
)
;
}
uint8_t
ScreenshareLayersVP9
:
:
GetStartLayer
(
)
const
{
return
start_layer_
;
}
void
ScreenshareLayersVP9
:
:
ConfigureBitrate
(
int
threshold_kbps
uint8_t
layer_id
)
{
DCHECK_LT
(
layer_id
num_layers_
-
1
)
;
threshold_kbps_
[
layer_id
]
=
threshold_kbps
;
}
void
ScreenshareLayersVP9
:
:
LayerFrameEncoded
(
unsigned
int
size_bytes
uint8_t
layer_id
)
{
DCHECK_LT
(
layer_id
num_layers_
)
;
bits_used_
[
layer_id
]
+
=
size_bytes
*
8
;
}
VP9EncoderImpl
:
:
SuperFrameRefSettings
ScreenshareLayersVP9
:
:
GetSuperFrameSettings
(
uint32_t
timestamp
bool
is_keyframe
)
{
VP9EncoderImpl
:
:
SuperFrameRefSettings
settings
;
if
(
!
timestamp_initialized_
)
{
last_timestamp_
=
timestamp
;
timestamp_initialized_
=
true
;
}
float
time_diff
=
(
timestamp
-
last_timestamp_
)
/
90
.
f
;
float
total_bits_used
=
0
;
float
total_threshold_kbps
=
0
;
start_layer_
=
0
;
for
(
int
layer_id
=
0
;
layer_id
<
num_layers_
-
1
;
+
+
layer_id
)
{
bits_used_
[
layer_id
]
=
std
:
:
max
(
0
.
f
bits_used_
[
layer_id
]
-
time_diff
*
threshold_kbps_
[
layer_id
]
)
;
total_bits_used
+
=
bits_used_
[
layer_id
]
;
total_threshold_kbps
+
=
threshold_kbps_
[
layer_id
]
;
if
(
!
is_keyframe
)
{
settings
.
layer
[
layer_id
]
.
ref_buf1
=
layer_id
;
if
(
total_bits_used
>
total_threshold_kbps
*
1000
)
start_layer_
=
layer_id
+
1
;
}
settings
.
layer
[
layer_id
]
.
upd_buf
=
layer_id
;
}
if
(
!
is_keyframe
)
settings
.
layer
[
num_layers_
-
1
]
.
ref_buf1
=
num_layers_
-
1
;
settings
.
layer
[
num_layers_
-
1
]
.
upd_buf
=
num_layers_
-
1
;
settings
.
is_keyframe
=
is_keyframe
;
settings
.
start_layer
=
start_layer_
;
settings
.
stop_layer
=
num_layers_
-
1
;
last_timestamp_
=
timestamp
;
return
settings
;
}
}
