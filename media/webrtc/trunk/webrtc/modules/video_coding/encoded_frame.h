#
ifndef
MODULES_VIDEO_CODING_ENCODED_FRAME_H_
#
define
MODULES_VIDEO_CODING_ENCODED_FRAME_H_
#
include
<
vector
>
#
include
"
common_types
.
h
"
#
include
"
common_video
/
include
/
video_frame
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_codec_interface
.
h
"
#
include
"
modules
/
video_coding
/
include
/
video_coding_defines
.
h
"
namespace
webrtc
{
class
VCMEncodedFrame
:
protected
EncodedImage
{
public
:
VCMEncodedFrame
(
)
;
explicit
VCMEncodedFrame
(
const
webrtc
:
:
EncodedImage
&
rhs
)
;
VCMEncodedFrame
(
const
VCMEncodedFrame
&
rhs
)
;
~
VCMEncodedFrame
(
)
;
void
Free
(
)
;
void
SetRenderTime
(
const
int64_t
renderTimeMs
)
{
_renderTimeMs
=
renderTimeMs
;
}
void
SetEncodedSize
(
uint32_t
width
uint32_t
height
)
{
_encodedWidth
=
width
;
_encodedHeight
=
height
;
}
void
SetPlayoutDelay
(
PlayoutDelay
playout_delay
)
{
playout_delay_
=
playout_delay
;
}
const
webrtc
:
:
EncodedImage
&
EncodedImage
(
)
const
{
return
static_cast
<
const
webrtc
:
:
EncodedImage
&
>
(
*
this
)
;
}
const
uint8_t
*
Buffer
(
)
const
{
return
_buffer
;
}
size_t
Length
(
)
const
{
return
_length
;
}
uint32_t
TimeStamp
(
)
const
{
return
_timeStamp
;
}
int64_t
RenderTimeMs
(
)
const
{
return
_renderTimeMs
;
}
webrtc
:
:
FrameType
FrameType
(
)
const
{
return
_frameType
;
}
VideoRotation
rotation
(
)
const
{
return
rotation_
;
}
VideoContentType
contentType
(
)
const
{
return
content_type_
;
}
EncodedImage
:
:
Timing
video_timing
(
)
const
{
return
timing_
;
}
bool
Complete
(
)
const
{
return
_completeFrame
;
}
bool
MissingFrame
(
)
const
{
return
_missingFrame
;
}
uint8_t
PayloadType
(
)
const
{
return
_payloadType
;
}
const
CodecSpecificInfo
*
CodecSpecific
(
)
const
{
return
&
_codecSpecificInfo
;
}
protected
:
void
VerifyAndAllocate
(
size_t
minimumSize
)
;
void
Reset
(
)
;
void
CopyCodecSpecific
(
const
RTPVideoHeader
*
header
)
;
int64_t
_renderTimeMs
;
uint8_t
_payloadType
;
bool
_missingFrame
;
CodecSpecificInfo
_codecSpecificInfo
;
webrtc
:
:
VideoCodecType
_codec
;
bool
_rotation_set
;
}
;
}
#
endif
