#
ifndef
WEBRTC_MODULES_VIDEO_CODING_PACKET_BUFFER_H_
#
define
WEBRTC_MODULES_VIDEO_CODING_PACKET_BUFFER_H_
#
include
<
vector
>
#
include
<
memory
>
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
packet
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
rtp_frame_reference_finder
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
sequence_number_util
.
h
"
namespace
webrtc
{
class
Clock
;
namespace
video_coding
{
class
FrameObject
;
class
RtpFrameObject
;
class
OnReceivedFrameCallback
{
public
:
virtual
~
OnReceivedFrameCallback
(
)
{
}
virtual
void
OnReceivedFrame
(
std
:
:
unique_ptr
<
RtpFrameObject
>
frame
)
=
0
;
}
;
class
PacketBuffer
{
public
:
static
rtc
:
:
scoped_refptr
<
PacketBuffer
>
Create
(
Clock
*
clock
size_t
start_buffer_size
size_t
max_buffer_size
OnReceivedFrameCallback
*
frame_callback
)
;
virtual
~
PacketBuffer
(
)
;
virtual
bool
InsertPacket
(
VCMPacket
*
packet
)
;
void
ClearTo
(
uint16_t
seq_num
)
;
void
Clear
(
)
;
int
AddRef
(
)
const
;
int
Release
(
)
const
;
protected
:
PacketBuffer
(
Clock
*
clock
size_t
start_buffer_size
size_t
max_buffer_size
OnReceivedFrameCallback
*
frame_callback
)
;
private
:
friend
RtpFrameObject
;
struct
ContinuityInfo
{
uint16_t
seq_num
=
0
;
bool
frame_begin
=
false
;
bool
frame_end
=
false
;
bool
used
=
false
;
bool
continuous
=
false
;
bool
frame_created
=
false
;
}
;
Clock
*
const
clock_
;
bool
ExpandBufferSize
(
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
bool
PotentialNewFrame
(
uint16_t
seq_num
)
const
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
std
:
:
vector
<
std
:
:
unique_ptr
<
RtpFrameObject
>
>
FindFrames
(
uint16_t
seq_num
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
virtual
bool
GetBitstream
(
const
RtpFrameObject
&
frame
uint8_t
*
destination
)
;
virtual
VCMPacket
*
GetPacket
(
uint16_t
seq_num
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
virtual
void
ReturnFrame
(
RtpFrameObject
*
frame
)
;
rtc
:
:
CriticalSection
crit_
;
size_t
size_
GUARDED_BY
(
crit_
)
;
const
size_t
max_size_
;
uint16_t
first_seq_num_
GUARDED_BY
(
crit_
)
;
bool
first_packet_received_
GUARDED_BY
(
crit_
)
;
bool
is_cleared_to_first_seq_num_
GUARDED_BY
(
crit_
)
;
std
:
:
vector
<
VCMPacket
>
data_buffer_
GUARDED_BY
(
crit_
)
;
std
:
:
vector
<
ContinuityInfo
>
sequence_buffer_
GUARDED_BY
(
crit_
)
;
OnReceivedFrameCallback
*
const
received_frame_callback_
;
mutable
volatile
int
ref_count_
=
0
;
}
;
}
}
#
endif
