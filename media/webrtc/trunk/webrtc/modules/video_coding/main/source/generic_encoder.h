#
ifndef
WEBRTC_MODULES_VIDEO_CODING_GENERIC_ENCODER_H_
#
define
WEBRTC_MODULES_VIDEO_CODING_GENERIC_ENCODER_H_
#
include
"
webrtc
/
modules
/
video_coding
/
codecs
/
interface
/
video_codec_interface
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
main
/
interface
/
video_coding_defines
.
h
"
#
include
<
stdio
.
h
>
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
namespace
webrtc
{
class
CriticalSectionWrapper
;
namespace
media_optimization
{
class
MediaOptimization
;
}
class
VCMEncodedFrameCallback
:
public
EncodedImageCallback
{
public
:
VCMEncodedFrameCallback
(
EncodedImageCallback
*
post_encode_callback
)
;
virtual
~
VCMEncodedFrameCallback
(
)
;
int32_t
Encoded
(
const
EncodedImage
&
encodedImage
const
CodecSpecificInfo
*
codecSpecificInfo
=
NULL
const
RTPFragmentationHeader
*
fragmentationHeader
=
NULL
)
;
int32_t
SetTransportCallback
(
VCMPacketizationCallback
*
transport
)
;
void
SetMediaOpt
(
media_optimization
:
:
MediaOptimization
*
mediaOpt
)
;
void
SetPayloadType
(
uint8_t
payloadType
)
{
_payloadType
=
payloadType
;
}
;
void
SetInternalSource
(
bool
internalSource
)
{
_internalSource
=
internalSource
;
}
;
void
SetRotation
(
VideoRotation
rotation
)
{
_rotation
=
rotation
;
}
private
:
VCMPacketizationCallback
*
_sendCallback
;
media_optimization
:
:
MediaOptimization
*
_mediaOpt
;
uint8_t
_payloadType
;
bool
_internalSource
;
VideoRotation
_rotation
;
EncodedImageCallback
*
post_encode_callback_
;
#
ifdef
DEBUG_ENCODER_BIT_STREAM
FILE
*
_bitStreamAfterEncoder
;
#
endif
}
;
class
VCMGenericEncoder
{
friend
class
VCMCodecDataBase
;
public
:
VCMGenericEncoder
(
VideoEncoder
*
encoder
VideoEncoderRateObserver
*
rate_observer
bool
internalSource
)
;
~
VCMGenericEncoder
(
)
;
int32_t
Release
(
)
;
int32_t
InitEncode
(
const
VideoCodec
*
settings
int32_t
numberOfCores
size_t
maxPayloadSize
)
;
int32_t
Encode
(
const
I420VideoFrame
&
inputFrame
const
CodecSpecificInfo
*
codecSpecificInfo
const
std
:
:
vector
<
FrameType
>
&
frameTypes
)
;
int32_t
SetRates
(
uint32_t
target_bitrate
uint32_t
frameRate
)
;
int32_t
SetChannelParameters
(
int32_t
packetLoss
int64_t
rtt
)
;
int32_t
CodecConfigParameters
(
uint8_t
*
buffer
int32_t
size
)
;
int32_t
RegisterEncodeCallback
(
VCMEncodedFrameCallback
*
VCMencodedFrameCallback
)
;
uint32_t
BitRate
(
)
const
;
uint32_t
FrameRate
(
)
const
;
int32_t
SetPeriodicKeyFrames
(
bool
enable
)
;
int32_t
RequestFrame
(
const
std
:
:
vector
<
FrameType
>
&
frame_types
)
;
bool
InternalSource
(
)
const
;
private
:
VideoEncoder
*
const
encoder_
;
VideoEncoderRateObserver
*
const
rate_observer_
;
VCMEncodedFrameCallback
*
vcm_encoded_frame_callback_
;
uint32_t
bit_rate_
;
uint32_t
frame_rate_
;
const
bool
internal_source_
;
mutable
rtc
:
:
CriticalSection
rates_lock_
;
VideoRotation
rotation_
;
}
;
}
#
endif
