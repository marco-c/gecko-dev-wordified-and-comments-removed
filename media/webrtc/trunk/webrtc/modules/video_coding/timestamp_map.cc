#
include
<
assert
.
h
>
#
include
<
stdlib
.
h
>
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
video_coding
/
timestamp_map
.
h
"
namespace
webrtc
{
VCMTimestampMap
:
:
VCMTimestampMap
(
size_t
capacity
)
:
ring_buffer_
(
new
TimestampDataTuple
[
capacity
]
)
capacity_
(
capacity
)
next_add_idx_
(
0
)
next_pop_idx_
(
0
)
{
}
VCMTimestampMap
:
:
~
VCMTimestampMap
(
)
{
}
void
VCMTimestampMap
:
:
Add
(
uint32_t
timestamp
VCMFrameInformation
*
data
)
{
ring_buffer_
[
next_add_idx_
]
.
timestamp
=
timestamp
;
ring_buffer_
[
next_add_idx_
]
.
data
=
data
;
next_add_idx_
=
(
next_add_idx_
+
1
)
%
capacity_
;
if
(
next_add_idx_
=
=
next_pop_idx_
)
{
next_pop_idx_
=
(
next_pop_idx_
+
1
)
%
capacity_
;
}
}
VCMFrameInformation
*
VCMTimestampMap
:
:
Pop
(
uint32_t
timestamp
)
{
while
(
!
IsEmpty
(
)
)
{
if
(
ring_buffer_
[
next_pop_idx_
]
.
timestamp
=
=
timestamp
)
{
VCMFrameInformation
*
data
=
ring_buffer_
[
next_pop_idx_
]
.
data
;
ring_buffer_
[
next_pop_idx_
]
.
data
=
nullptr
;
next_pop_idx_
=
(
next_pop_idx_
+
1
)
%
capacity_
;
return
data
;
}
else
if
(
IsNewerTimestamp
(
ring_buffer_
[
next_pop_idx_
]
.
timestamp
timestamp
)
)
{
return
nullptr
;
}
next_pop_idx_
=
(
next_pop_idx_
+
1
)
%
capacity_
;
}
return
nullptr
;
}
bool
VCMTimestampMap
:
:
IsEmpty
(
)
const
{
return
(
next_add_idx_
=
=
next_pop_idx_
)
;
}
}
