#
ifndef
WEBRTC_MODULES_VIDEO_CODING_FRAME_OBJECT_H_
#
define
WEBRTC_MODULES_VIDEO_CODING_FRAME_OBJECT_H_
#
include
"
webrtc
/
base
/
optional
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
encoded_frame
.
h
"
namespace
webrtc
{
namespace
video_coding
{
class
FrameObject
:
public
webrtc
:
:
VCMEncodedFrame
{
public
:
static
const
uint8_t
kMaxFrameReferences
=
5
;
FrameObject
(
)
;
virtual
~
FrameObject
(
)
{
}
virtual
bool
GetBitstream
(
uint8_t
*
destination
)
const
=
0
;
virtual
uint32_t
Timestamp
(
)
const
=
0
;
virtual
int64_t
ReceivedTime
(
)
const
=
0
;
virtual
int64_t
RenderTime
(
)
const
=
0
;
size_t
size
(
)
{
return
_length
;
}
uint16_t
picture_id
;
uint8_t
spatial_layer
;
uint32_t
timestamp
;
size_t
num_references
;
uint16_t
references
[
kMaxFrameReferences
]
;
bool
inter_layer_predicted
;
}
;
class
PacketBuffer
;
class
RtpFrameObject
:
public
FrameObject
{
public
:
RtpFrameObject
(
PacketBuffer
*
packet_buffer
uint16_t
first_seq_num
uint16_t
last_seq_num
size_t
frame_size
int
times_nacked
int64_t
received_time
)
;
~
RtpFrameObject
(
)
;
uint16_t
first_seq_num
(
)
const
;
uint16_t
last_seq_num
(
)
const
;
int
times_nacked
(
)
const
;
enum
FrameType
frame_type
(
)
const
;
VideoCodecType
codec_type
(
)
const
;
bool
GetBitstream
(
uint8_t
*
destination
)
const
override
;
uint32_t
Timestamp
(
)
const
override
;
int64_t
ReceivedTime
(
)
const
override
;
int64_t
RenderTime
(
)
const
override
;
rtc
:
:
Optional
<
RTPVideoTypeHeader
>
GetCodecHeader
(
)
const
;
private
:
rtc
:
:
scoped_refptr
<
PacketBuffer
>
packet_buffer_
;
enum
FrameType
frame_type_
;
VideoCodecType
codec_type_
;
uint16_t
first_seq_num_
;
uint16_t
last_seq_num_
;
uint32_t
timestamp_
;
int64_t
received_time_
;
int
times_nacked_
;
}
;
}
}
#
endif
