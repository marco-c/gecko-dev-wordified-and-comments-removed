#
ifndef
WEBRTC_MODULES_VIDEO_CODING_RECEIVER_H_
#
define
WEBRTC_MODULES_VIDEO_CODING_RECEIVER_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
webrtc
/
modules
/
video_coding
/
jitter_buffer
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
packet
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
timing
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
critical_section_wrapper
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
include
/
video_coding
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
include
/
video_coding_defines
.
h
"
namespace
webrtc
{
class
Clock
;
class
VCMEncodedFrame
;
class
VCMReceiver
{
public
:
VCMReceiver
(
VCMTiming
*
timing
Clock
*
clock
EventFactory
*
event_factory
)
;
VCMReceiver
(
VCMTiming
*
timing
Clock
*
clock
EventFactory
*
event_factory
NackSender
*
nack_sender
KeyFrameRequestSender
*
keyframe_request_sender
)
;
VCMReceiver
(
VCMTiming
*
timing
Clock
*
clock
std
:
:
unique_ptr
<
EventWrapper
>
receiver_event
std
:
:
unique_ptr
<
EventWrapper
>
jitter_buffer_event
)
;
VCMReceiver
(
VCMTiming
*
timing
Clock
*
clock
std
:
:
unique_ptr
<
EventWrapper
>
receiver_event
std
:
:
unique_ptr
<
EventWrapper
>
jitter_buffer_event
NackSender
*
nack_sender
KeyFrameRequestSender
*
keyframe_request_sender
)
;
~
VCMReceiver
(
)
;
void
Reset
(
)
;
void
UpdateRtt
(
int64_t
rtt
)
;
int32_t
InsertPacket
(
const
VCMPacket
&
packet
)
;
VCMEncodedFrame
*
FrameForDecoding
(
uint16_t
max_wait_time_ms
bool
prefer_late_decoding
)
;
void
ReleaseFrame
(
VCMEncodedFrame
*
frame
)
;
void
ReceiveStatistics
(
uint32_t
*
bitrate
uint32_t
*
framerate
)
;
uint32_t
DiscardedPackets
(
)
const
;
void
SetNackMode
(
VCMNackMode
nackMode
int64_t
low_rtt_nack_threshold_ms
int64_t
high_rtt_nack_threshold_ms
)
;
void
SetNackSettings
(
size_t
max_nack_list_size
int
max_packet_age_to_nack
int
max_incomplete_time_ms
)
;
VCMNackMode
NackMode
(
)
const
;
std
:
:
vector
<
uint16_t
>
NackList
(
bool
*
request_key_frame
)
;
VideoReceiveState
ReceiveState
(
)
const
;
int
SetMinReceiverDelay
(
int
desired_delay_ms
)
;
void
SetDecodeErrorMode
(
VCMDecodeErrorMode
decode_error_mode
)
;
VCMDecodeErrorMode
DecodeErrorMode
(
)
const
;
void
RegisterStatsCallback
(
VCMReceiveStatisticsCallback
*
callback
)
;
void
TriggerDecoderShutdown
(
)
;
private
:
void
UpdateReceiveState
(
const
VCMEncodedFrame
&
frame
)
;
CriticalSectionWrapper
*
crit_sect_
;
Clock
*
const
clock_
;
VCMJitterBuffer
jitter_buffer_
;
VCMTiming
*
timing_
;
std
:
:
unique_ptr
<
EventWrapper
>
render_wait_event_
;
VideoReceiveState
receiveState_
;
int
max_video_delay_ms_
;
}
;
}
#
endif
