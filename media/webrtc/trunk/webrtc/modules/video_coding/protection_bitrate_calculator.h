#
ifndef
WEBRTC_MODULES_VIDEO_CODING_PROTECTION_BITRATE_CALCULATOR_H_
#
define
WEBRTC_MODULES_VIDEO_CODING_PROTECTION_BITRATE_CALCULATOR_H_
#
include
<
list
>
#
include
<
memory
>
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
include
/
video_coding
.
h
"
#
include
"
webrtc
/
modules
/
video_coding
/
media_opt_util
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
ProtectionBitrateCalculator
{
public
:
ProtectionBitrateCalculator
(
Clock
*
clock
VCMProtectionCallback
*
protection_callback
)
;
~
ProtectionBitrateCalculator
(
)
;
void
SetProtectionMethod
(
bool
enable_fec
bool
enable_nack
)
;
void
SetEncodingData
(
size_t
width
size_t
height
size_t
num_temporal_layers
size_t
max_payload_size
)
;
uint32_t
SetTargetRates
(
uint32_t
estimated_bitrate_bps
int
actual_framerate
uint8_t
fraction_lost
int64_t
round_trip_time_ms
)
;
void
UpdateWithEncodedData
(
const
EncodedImage
&
encoded_image
)
;
private
:
struct
EncodedFrameSample
;
enum
{
kBitrateAverageWinMs
=
1000
}
;
Clock
*
const
clock_
;
VCMProtectionCallback
*
const
protection_callback_
;
rtc
:
:
CriticalSection
crit_sect_
;
std
:
:
unique_ptr
<
media_optimization
:
:
VCMLossProtectionLogic
>
loss_prot_logic_
GUARDED_BY
(
crit_sect_
)
;
size_t
max_payload_size_
GUARDED_BY
(
crit_sect_
)
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
ProtectionBitrateCalculator
)
;
}
;
}
#
endif
