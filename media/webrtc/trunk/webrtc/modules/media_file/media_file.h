#
ifndef
MODULES_MEDIA_FILE_MEDIA_FILE_H_
#
define
MODULES_MEDIA_FILE_MEDIA_FILE_H_
#
include
"
common_types
.
h
"
#
include
"
modules
/
include
/
module
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
media_file
/
media_file_defines
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
MediaFile
:
public
Module
{
public
:
static
MediaFile
*
CreateMediaFile
(
const
int32_t
id
)
;
static
void
DestroyMediaFile
(
MediaFile
*
module
)
;
virtual
int32_t
PlayoutAudioData
(
int8_t
*
audioBuffer
size_t
&
dataLengthInBytes
)
=
0
;
virtual
int32_t
PlayoutStereoData
(
int8_t
*
audioBufferLeft
int8_t
*
audioBufferRight
size_t
&
dataLengthInBytes
)
=
0
;
virtual
int32_t
StartPlayingAudioFile
(
const
char
*
fileName
const
uint32_t
notificationTimeMs
=
0
const
bool
loop
=
false
const
FileFormats
format
=
kFileFormatPcm16kHzFile
const
CodecInst
*
codecInst
=
NULL
const
uint32_t
startPointMs
=
0
const
uint32_t
stopPointMs
=
0
)
=
0
;
virtual
int32_t
StartPlayingAudioStream
(
InStream
&
stream
const
uint32_t
notificationTimeMs
=
0
const
FileFormats
format
=
kFileFormatPcm16kHzFile
const
CodecInst
*
codecInst
=
NULL
const
uint32_t
startPointMs
=
0
const
uint32_t
stopPointMs
=
0
)
=
0
;
virtual
int32_t
StopPlaying
(
)
=
0
;
virtual
bool
IsPlaying
(
)
=
0
;
virtual
int32_t
PlayoutPositionMs
(
uint32_t
&
durationMs
)
const
=
0
;
virtual
int32_t
IncomingAudioData
(
const
int8_t
*
audioBuffer
const
size_t
bufferLength
)
=
0
;
virtual
int32_t
StartRecordingAudioFile
(
const
char
*
fileName
const
FileFormats
format
const
CodecInst
&
codecInst
const
uint32_t
notificationTimeMs
=
0
const
uint32_t
maxSizeBytes
=
0
)
=
0
;
virtual
int32_t
StartRecordingAudioStream
(
OutStream
&
stream
const
FileFormats
format
const
CodecInst
&
codecInst
const
uint32_t
notificationTimeMs
=
0
)
=
0
;
virtual
int32_t
StopRecording
(
)
=
0
;
virtual
bool
IsRecording
(
)
=
0
;
virtual
int32_t
RecordDurationMs
(
uint32_t
&
durationMs
)
=
0
;
virtual
bool
IsStereo
(
)
=
0
;
virtual
int32_t
SetModuleFileCallback
(
FileCallback
*
callback
)
=
0
;
virtual
int32_t
FileDurationMs
(
const
char
*
fileName
uint32_t
&
durationMs
const
FileFormats
format
const
uint32_t
freqInHz
=
16000
)
=
0
;
virtual
int32_t
codec_info
(
CodecInst
&
codecInst
)
const
=
0
;
protected
:
MediaFile
(
)
{
}
virtual
~
MediaFile
(
)
{
}
}
;
}
#
endif
