#
ifndef
MODULES_PACING_PACKET_QUEUE2_H_
#
define
MODULES_PACING_PACKET_QUEUE2_H_
#
include
<
map
>
#
include
<
queue
>
#
include
<
set
>
#
include
"
modules
/
pacing
/
packet_queue
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
namespace
webrtc
{
class
PacketQueue2
:
public
PacketQueue
{
public
:
explicit
PacketQueue2
(
const
Clock
*
clock
)
;
~
PacketQueue2
(
)
override
;
using
Packet
=
PacketQueue
:
:
Packet
;
void
Push
(
const
Packet
&
packet
)
override
;
const
Packet
&
BeginPop
(
)
override
;
void
CancelPop
(
const
Packet
&
packet
)
override
;
void
FinalizePop
(
const
Packet
&
packet
)
override
;
bool
Empty
(
)
const
override
;
size_t
SizeInPackets
(
)
const
override
;
uint64_t
SizeInBytes
(
)
const
override
;
int64_t
OldestEnqueueTimeMs
(
)
const
override
;
int64_t
AverageQueueTimeMs
(
)
const
override
;
void
UpdateQueueTime
(
int64_t
timestamp_ms
)
override
;
void
SetPauseState
(
bool
paused
int64_t
timestamp_ms
)
override
;
struct
StreamPrioKey
{
StreamPrioKey
(
)
=
default
;
StreamPrioKey
(
RtpPacketSender
:
:
Priority
priority
int64_t
bytes
)
:
priority
(
priority
)
bytes
(
bytes
)
{
}
bool
operator
<
(
const
StreamPrioKey
&
other
)
const
{
if
(
priority
!
=
other
.
priority
)
return
priority
<
other
.
priority
;
return
bytes
>
other
.
bytes
;
}
const
RtpPacketSender
:
:
Priority
priority
;
const
size_t
bytes
;
}
;
struct
Stream
{
Stream
(
)
;
virtual
~
Stream
(
)
;
size_t
bytes
;
uint32_t
ssrc
;
std
:
:
priority_queue
<
Packet
>
packet_queue
;
std
:
:
multimap
<
StreamPrioKey
uint32_t
>
:
:
iterator
priority_it
;
}
;
private
:
static
constexpr
size_t
kMaxLeadingBytes
=
1400
;
Stream
*
GetHighestPriorityStream
(
)
;
bool
IsSsrcScheduled
(
uint32_t
ssrc
)
const
;
const
Clock
*
const
clock_
;
int64_t
time_last_updated_
;
rtc
:
:
Optional
<
Packet
>
pop_packet_
;
rtc
:
:
Optional
<
Stream
*
>
pop_stream_
;
bool
paused_
=
false
;
size_t
size_packets_
=
0
;
size_t
size_bytes_
=
0
;
size_t
max_bytes_
=
kMaxLeadingBytes
;
int64_t
queue_time_sum_ms_
=
0
;
int64_t
pause_time_sum_ms_
=
0
;
std
:
:
multimap
<
StreamPrioKey
uint32_t
>
stream_priorities_
;
std
:
:
map
<
uint32_t
Stream
>
streams_
;
std
:
:
multiset
<
int64_t
>
enqueue_times_
;
}
;
}
#
endif
