#
ifndef
WEBRTC_MODULES_PACING_PACED_SENDER_H_
#
define
WEBRTC_MODULES_PACING_PACED_SENDER_H_
#
include
<
list
>
#
include
<
set
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
BitrateProber
;
class
Clock
;
class
CriticalSectionWrapper
;
namespace
paced_sender
{
class
IntervalBudget
;
struct
Packet
;
class
PacketQueue
;
}
class
PacedSender
:
public
Module
public
RtpPacketSender
{
public
:
class
Callback
{
public
:
virtual
bool
TimeToSendPacket
(
uint32_t
ssrc
uint16_t
sequence_number
int64_t
capture_time_ms
bool
retransmission
)
=
0
;
virtual
size_t
TimeToSendPadding
(
size_t
bytes
)
=
0
;
protected
:
virtual
~
Callback
(
)
{
}
}
;
static
const
int64_t
kMaxQueueLengthMs
;
static
const
int
kDefaultInitialPaceKbps
=
2000
;
static
const
float
kDefaultPaceMultiplier
;
static
const
size_t
kMinProbePacketSize
=
200
;
PacedSender
(
Clock
*
clock
Callback
*
callback
int
bitrate_kbps
int
max_bitrate_kbps
int
min_bitrate_kbps
)
;
virtual
~
PacedSender
(
)
;
void
Pause
(
)
;
void
Resume
(
)
;
void
SetProbingEnabled
(
bool
enabled
)
;
void
UpdateBitrate
(
int
bitrate_kbps
int
max_bitrate_kbps
int
min_bitrate_kbps
)
;
void
InsertPacket
(
RtpPacketSender
:
:
Priority
priority
uint32_t
ssrc
uint16_t
sequence_number
int64_t
capture_time_ms
size_t
bytes
bool
retransmission
)
override
;
virtual
int64_t
QueueInMs
(
)
const
;
virtual
size_t
QueueSizePackets
(
)
const
;
virtual
int64_t
ExpectedQueueTimeMs
(
)
const
;
virtual
int64_t
AverageQueueTimeMs
(
)
;
int64_t
TimeUntilNextProcess
(
)
override
;
int32_t
Process
(
)
override
;
private
:
void
UpdateBytesPerInterval
(
int64_t
delta_time_in_ms
)
EXCLUSIVE_LOCKS_REQUIRED
(
critsect_
)
;
bool
SendPacket
(
const
paced_sender
:
:
Packet
&
packet
)
EXCLUSIVE_LOCKS_REQUIRED
(
critsect_
)
;
void
SendPadding
(
size_t
padding_needed
)
EXCLUSIVE_LOCKS_REQUIRED
(
critsect_
)
;
Clock
*
const
clock_
;
Callback
*
const
callback_
;
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
critsect_
;
bool
paused_
GUARDED_BY
(
critsect_
)
;
bool
probing_enabled_
;
rtc
:
:
scoped_ptr
<
paced_sender
:
:
IntervalBudget
>
media_budget_
GUARDED_BY
(
critsect_
)
;
rtc
:
:
scoped_ptr
<
paced_sender
:
:
IntervalBudget
>
padding_budget_
GUARDED_BY
(
critsect_
)
;
rtc
:
:
scoped_ptr
<
BitrateProber
>
prober_
GUARDED_BY
(
critsect_
)
;
int
bitrate_bps_
GUARDED_BY
(
critsect_
)
;
int
max_bitrate_kbps_
GUARDED_BY
(
critsect_
)
;
int64_t
time_last_update_us_
GUARDED_BY
(
critsect_
)
;
rtc
:
:
scoped_ptr
<
paced_sender
:
:
PacketQueue
>
packets_
GUARDED_BY
(
critsect_
)
;
uint64_t
packet_counter_
;
}
;
}
#
endif
