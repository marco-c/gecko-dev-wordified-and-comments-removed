#
include
"
webrtc
/
modules
/
pacing
/
alr_detector
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
namespace
{
constexpr
int
kMeasurementPeriodMs
=
500
;
constexpr
int
kAlrStartUsagePercent
=
30
;
constexpr
int
kAlrEndUsagePercent
=
50
;
}
namespace
webrtc
{
AlrDetector
:
:
AlrDetector
(
)
:
rate_
(
kMeasurementPeriodMs
RateStatistics
:
:
kBpsScale
)
{
}
AlrDetector
:
:
~
AlrDetector
(
)
{
}
void
AlrDetector
:
:
OnBytesSent
(
size_t
bytes_sent
int64_t
now_ms
)
{
RTC_DCHECK
(
estimated_bitrate_bps_
)
;
rate_
.
Update
(
bytes_sent
now_ms
)
;
rtc
:
:
Optional
<
uint32_t
>
rate
=
rate_
.
Rate
(
now_ms
)
;
if
(
!
rate
)
return
;
int
percentage
=
static_cast
<
int
>
(
*
rate
)
*
100
/
estimated_bitrate_bps_
;
if
(
percentage
<
kAlrStartUsagePercent
&
&
!
alr_started_time_ms_
)
{
alr_started_time_ms_
=
rtc
:
:
Optional
<
int64_t
>
(
now_ms
)
;
}
else
if
(
percentage
>
kAlrEndUsagePercent
&
&
alr_started_time_ms_
)
{
alr_started_time_ms_
=
rtc
:
:
Optional
<
int64_t
>
(
)
;
}
}
void
AlrDetector
:
:
SetEstimatedBitrate
(
int
bitrate_bps
)
{
RTC_DCHECK
(
bitrate_bps
)
;
estimated_bitrate_bps_
=
bitrate_bps
;
}
rtc
:
:
Optional
<
int64_t
>
AlrDetector
:
:
GetApplicationLimitedRegionStartTime
(
)
const
{
return
alr_started_time_ms_
;
}
}
