#
ifndef
MODULES_PACING_PACKET_ROUTER_H_
#
define
MODULES_PACING_PACKET_ROUTER_H_
#
include
<
list
>
#
include
<
vector
>
#
include
"
common_types
.
h
"
#
include
"
modules
/
pacing
/
paced_sender
.
h
"
#
include
"
modules
/
remote_bitrate_estimator
/
include
/
remote_bitrate_estimator
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
rtc_base
/
race_checker
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
RtpRtcp
;
namespace
rtcp
{
class
TransportFeedback
;
}
class
PacketRouter
:
public
PacedSender
:
:
PacketSender
public
TransportSequenceNumberAllocator
public
RemoteBitrateObserver
public
TransportFeedbackSenderInterface
{
public
:
PacketRouter
(
)
;
~
PacketRouter
(
)
override
;
RTC_DEPRECATED
void
AddRtpModule
(
RtpRtcp
*
rtp_module
)
{
AddReceiveRtpModule
(
rtp_module
)
;
}
RTC_DEPRECATED
void
RemoveRtpModule
(
RtpRtcp
*
rtp_module
)
{
RemoveReceiveRtpModule
(
rtp_module
)
;
}
void
AddSendRtpModule
(
RtpRtcp
*
rtp_module
bool
remb_candidate
)
;
void
RemoveSendRtpModule
(
RtpRtcp
*
rtp_module
)
;
RTC_DEPRECATED
void
AddSendRtpModule
(
RtpRtcp
*
rtp_module
)
{
AddSendRtpModule
(
rtp_module
true
)
;
}
void
AddReceiveRtpModule
(
RtpRtcp
*
rtp_module
bool
remb_candidate
)
;
void
RemoveReceiveRtpModule
(
RtpRtcp
*
rtp_module
)
;
RTC_DEPRECATED
void
AddReceiveRtpModule
(
RtpRtcp
*
rtp_module
)
{
AddReceiveRtpModule
(
rtp_module
true
)
;
}
bool
TimeToSendPacket
(
uint32_t
ssrc
uint16_t
sequence_number
int64_t
capture_timestamp
bool
retransmission
const
PacedPacketInfo
&
packet_info
)
override
;
size_t
TimeToSendPadding
(
size_t
bytes
const
PacedPacketInfo
&
packet_info
)
override
;
void
SetTransportWideSequenceNumber
(
uint16_t
sequence_number
)
;
uint16_t
AllocateSequenceNumber
(
)
override
;
void
OnReceiveBitrateChanged
(
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
uint32_t
bitrate_bps
)
override
;
void
SetMaxDesiredReceiveBitrate
(
uint32_t
bitrate_bps
)
;
virtual
bool
SendRemb
(
uint32_t
bitrate_bps
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
)
;
bool
SendTransportFeedback
(
rtcp
:
:
TransportFeedback
*
packet
)
override
;
private
:
void
AddRembModuleCandidate
(
RtpRtcp
*
candidate_module
bool
sender
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
modules_crit_
)
;
void
MaybeRemoveRembModuleCandidate
(
RtpRtcp
*
candidate_module
bool
sender
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
modules_crit_
)
;
void
UnsetActiveRembModule
(
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
modules_crit_
)
;
void
DetermineActiveRembModule
(
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
modules_crit_
)
;
rtc
:
:
RaceChecker
pacer_race_
;
rtc
:
:
CriticalSection
modules_crit_
;
std
:
:
list
<
RtpRtcp
*
>
rtp_send_modules_
RTC_GUARDED_BY
(
modules_crit_
)
;
std
:
:
vector
<
RtpRtcp
*
>
rtp_receive_modules_
RTC_GUARDED_BY
(
modules_crit_
)
;
rtc
:
:
CriticalSection
remb_crit_
;
int64_t
last_remb_time_ms_
RTC_GUARDED_BY
(
remb_crit_
)
;
uint32_t
last_send_bitrate_bps_
RTC_GUARDED_BY
(
remb_crit_
)
;
uint32_t
bitrate_bps_
RTC_GUARDED_BY
(
remb_crit_
)
;
uint32_t
max_bitrate_bps_
RTC_GUARDED_BY
(
remb_crit_
)
;
std
:
:
vector
<
RtpRtcp
*
>
sender_remb_candidates_
RTC_GUARDED_BY
(
modules_crit_
)
;
std
:
:
vector
<
RtpRtcp
*
>
receiver_remb_candidates_
RTC_GUARDED_BY
(
modules_crit_
)
;
RtpRtcp
*
active_remb_module_
RTC_GUARDED_BY
(
modules_crit_
)
;
volatile
int
transport_seq_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
PacketRouter
)
;
}
;
}
#
endif
