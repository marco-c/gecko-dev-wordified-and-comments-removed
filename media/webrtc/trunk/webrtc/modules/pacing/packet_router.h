#
ifndef
WEBRTC_MODULES_PACING_PACKET_ROUTER_H_
#
define
WEBRTC_MODULES_PACING_PACKET_ROUTER_H_
#
include
<
list
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
modules
/
pacing
/
paced_sender
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
namespace
webrtc
{
class
RtpRtcp
;
namespace
rtcp
{
class
TransportFeedback
;
}
class
PacketRouter
:
public
PacedSender
:
:
PacketSender
public
TransportSequenceNumberAllocator
{
public
:
PacketRouter
(
)
;
virtual
~
PacketRouter
(
)
;
void
AddRtpModule
(
RtpRtcp
*
rtp_module
)
;
void
RemoveRtpModule
(
RtpRtcp
*
rtp_module
)
;
bool
TimeToSendPacket
(
uint32_t
ssrc
uint16_t
sequence_number
int64_t
capture_timestamp
bool
retransmission
int
probe_cluster_id
)
override
;
size_t
TimeToSendPadding
(
size_t
bytes
int
probe_cluster_id
)
override
;
void
SetTransportWideSequenceNumber
(
uint16_t
sequence_number
)
;
uint16_t
AllocateSequenceNumber
(
)
override
;
virtual
bool
SendFeedback
(
rtcp
:
:
TransportFeedback
*
packet
)
;
private
:
rtc
:
:
ThreadChecker
pacer_thread_checker_
;
rtc
:
:
CriticalSection
modules_crit_
;
std
:
:
list
<
RtpRtcp
*
>
rtp_modules_
GUARDED_BY
(
modules_crit_
)
;
volatile
int
transport_seq_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
PacketRouter
)
;
}
;
}
#
endif
