#
include
"
webrtc
/
modules
/
congestion_controller
/
probe_bitrate_estimator
.
h
"
#
include
<
algorithm
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
namespace
{
constexpr
int
kMinNumProbesValidCluster
=
4
;
constexpr
float
kValidRatio
=
2
.
0f
;
constexpr
int
kMaxClusterHistoryMs
=
1000
;
constexpr
int
kMaxProbeIntervalMs
=
1000
;
}
namespace
webrtc
{
ProbeBitrateEstimator
:
:
ProbeBitrateEstimator
(
)
{
}
int
ProbeBitrateEstimator
:
:
HandleProbeAndEstimateBitrate
(
const
PacketInfo
&
packet_info
)
{
RTC_DCHECK_NE
(
packet_info
.
probe_cluster_id
PacketInfo
:
:
kNotAProbe
)
;
EraseOldClusters
(
packet_info
.
arrival_time_ms
-
kMaxClusterHistoryMs
)
;
int
payload_size_bits
=
packet_info
.
payload_size
*
8
;
AggregatedCluster
*
cluster
=
&
clusters_
[
packet_info
.
probe_cluster_id
]
;
if
(
packet_info
.
send_time_ms
<
cluster
-
>
first_send_ms
)
{
cluster
-
>
first_send_ms
=
packet_info
.
send_time_ms
;
}
if
(
packet_info
.
send_time_ms
>
cluster
-
>
last_send_ms
)
{
cluster
-
>
last_send_ms
=
packet_info
.
send_time_ms
;
cluster
-
>
size_last_send
=
payload_size_bits
;
}
if
(
packet_info
.
arrival_time_ms
<
cluster
-
>
first_receive_ms
)
{
cluster
-
>
first_receive_ms
=
packet_info
.
arrival_time_ms
;
cluster
-
>
size_first_receive
=
payload_size_bits
;
}
if
(
packet_info
.
arrival_time_ms
>
cluster
-
>
last_receive_ms
)
{
cluster
-
>
last_receive_ms
=
packet_info
.
arrival_time_ms
;
}
cluster
-
>
size_total
+
=
payload_size_bits
;
cluster
-
>
num_probes
+
=
1
;
if
(
cluster
-
>
num_probes
<
kMinNumProbesValidCluster
)
return
-
1
;
float
send_interval_ms
=
cluster
-
>
last_send_ms
-
cluster
-
>
first_send_ms
;
float
receive_interval_ms
=
cluster
-
>
last_receive_ms
-
cluster
-
>
first_receive_ms
;
if
(
send_interval_ms
<
=
0
|
|
send_interval_ms
>
kMaxProbeIntervalMs
|
|
receive_interval_ms
<
=
0
|
|
receive_interval_ms
>
kMaxProbeIntervalMs
)
{
LOG
(
LS_INFO
)
<
<
"
Probing
unsuccessful
invalid
send
/
receive
interval
"
<
<
"
[
cluster
id
:
"
<
<
packet_info
.
probe_cluster_id
<
<
"
]
[
send
interval
:
"
<
<
send_interval_ms
<
<
"
ms
]
"
<
<
"
[
receive
interval
:
"
<
<
receive_interval_ms
<
<
"
ms
]
"
;
return
-
1
;
}
RTC_DCHECK_GT
(
cluster
-
>
size_total
cluster
-
>
size_last_send
)
;
float
send_size
=
cluster
-
>
size_total
-
cluster
-
>
size_last_send
;
float
send_bps
=
send_size
/
send_interval_ms
*
1000
;
RTC_DCHECK_GT
(
cluster
-
>
size_total
cluster
-
>
size_first_receive
)
;
float
receive_size
=
cluster
-
>
size_total
-
cluster
-
>
size_first_receive
;
float
receive_bps
=
receive_size
/
receive_interval_ms
*
1000
;
float
ratio
=
receive_bps
/
send_bps
;
if
(
ratio
>
kValidRatio
)
{
LOG
(
LS_INFO
)
<
<
"
Probing
unsuccessful
receive
/
send
ratio
too
high
"
<
<
"
[
cluster
id
:
"
<
<
packet_info
.
probe_cluster_id
<
<
"
]
[
send
:
"
<
<
send_size
<
<
"
bytes
/
"
<
<
send_interval_ms
<
<
"
ms
=
"
<
<
send_bps
/
1000
<
<
"
kb
/
s
]
"
<
<
"
[
receive
:
"
<
<
receive_size
<
<
"
bytes
/
"
<
<
receive_interval_ms
<
<
"
ms
=
"
<
<
receive_bps
/
1000
<
<
"
kb
/
s
]
"
<
<
"
[
ratio
:
"
<
<
receive_bps
/
1000
<
<
"
/
"
<
<
send_bps
/
1000
<
<
"
=
"
<
<
ratio
<
<
"
>
kValidRatio
(
"
<
<
kValidRatio
<
<
"
)
]
"
;
return
-
1
;
}
LOG
(
LS_INFO
)
<
<
"
Probing
successful
"
<
<
"
[
cluster
id
:
"
<
<
packet_info
.
probe_cluster_id
<
<
"
]
[
send
:
"
<
<
send_size
<
<
"
bytes
/
"
<
<
send_interval_ms
<
<
"
ms
=
"
<
<
send_bps
/
1000
<
<
"
kb
/
s
]
"
<
<
"
[
receive
:
"
<
<
receive_size
<
<
"
bytes
/
"
<
<
receive_interval_ms
<
<
"
ms
=
"
<
<
receive_bps
/
1000
<
<
"
kb
/
s
]
"
;
return
std
:
:
min
(
send_bps
receive_bps
)
;
}
void
ProbeBitrateEstimator
:
:
EraseOldClusters
(
int64_t
timestamp_ms
)
{
for
(
auto
it
=
clusters_
.
begin
(
)
;
it
!
=
clusters_
.
end
(
)
;
)
{
if
(
it
-
>
second
.
last_receive_ms
<
timestamp_ms
)
{
it
=
clusters_
.
erase
(
it
)
;
}
else
{
+
+
it
;
}
}
}
}
