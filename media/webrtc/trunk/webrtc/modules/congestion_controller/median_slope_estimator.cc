#
include
"
webrtc
/
modules
/
congestion_controller
/
median_slope_estimator
.
h
"
#
include
<
algorithm
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
include
/
bwe_defines
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
test
/
bwe_test_logging
.
h
"
namespace
webrtc
{
constexpr
unsigned
int
kDeltaCounterMax
=
1000
;
MedianSlopeEstimator
:
:
MedianSlopeEstimator
(
size_t
window_size
double
threshold_gain
)
:
window_size_
(
window_size
)
threshold_gain_
(
threshold_gain
)
num_of_deltas_
(
0
)
accumulated_delay_
(
0
)
delay_hist_
(
)
median_filter_
(
0
.
5
)
trendline_
(
0
)
{
}
MedianSlopeEstimator
:
:
~
MedianSlopeEstimator
(
)
{
}
void
MedianSlopeEstimator
:
:
Update
(
double
recv_delta_ms
double
send_delta_ms
int64_t
arrival_time_ms
)
{
const
double
delta_ms
=
recv_delta_ms
-
send_delta_ms
;
+
+
num_of_deltas_
;
if
(
num_of_deltas_
>
kDeltaCounterMax
)
num_of_deltas_
=
kDeltaCounterMax
;
accumulated_delay_
+
=
delta_ms
;
BWE_TEST_LOGGING_PLOT
(
1
"
accumulated_delay_ms
"
arrival_time_ms
accumulated_delay_
)
;
if
(
delay_hist_
.
size
(
)
=
=
window_size_
)
{
for
(
double
slope
:
delay_hist_
.
front
(
)
.
slopes
)
{
const
bool
success
=
median_filter_
.
Erase
(
slope
)
;
RTC_CHECK
(
success
)
;
}
delay_hist_
.
pop_front
(
)
;
}
for
(
auto
&
old_delay
:
delay_hist_
)
{
if
(
arrival_time_ms
-
old_delay
.
time
!
=
0
)
{
double
slope
=
(
accumulated_delay_
-
old_delay
.
delay
)
/
static_cast
<
double
>
(
arrival_time_ms
-
old_delay
.
time
)
;
median_filter_
.
Insert
(
slope
)
;
old_delay
.
slopes
.
push_back
(
slope
)
;
}
}
delay_hist_
.
emplace_back
(
arrival_time_ms
accumulated_delay_
window_size_
-
1
)
;
if
(
delay_hist_
.
size
(
)
=
=
window_size_
)
trendline_
=
median_filter_
.
GetPercentileValue
(
)
;
BWE_TEST_LOGGING_PLOT
(
1
"
trendline_slope
"
arrival_time_ms
trendline_
)
;
}
}
