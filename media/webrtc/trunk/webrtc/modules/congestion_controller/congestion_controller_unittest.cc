#
include
"
webrtc
/
logging
/
rtc_event_log
/
mock
/
mock_rtc_event_log
.
h
"
#
include
"
webrtc
/
modules
/
bitrate_controller
/
include
/
bitrate_controller
.
h
"
#
include
"
webrtc
/
modules
/
congestion_controller
/
include
/
congestion_controller
.
h
"
#
include
"
webrtc
/
modules
/
congestion_controller
/
include
/
mock
/
mock_congestion_controller
.
h
"
#
include
"
webrtc
/
modules
/
pacing
/
mock
/
mock_paced_sender
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
include
/
bwe_defines
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
include
/
mock
/
mock_remote_bitrate_observer
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
clock
.
h
"
#
include
"
webrtc
/
test
/
gmock
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
using
testing
:
:
_
;
using
testing
:
:
AtLeast
;
using
testing
:
:
NiceMock
;
using
testing
:
:
Return
;
using
testing
:
:
SaveArg
;
using
testing
:
:
StrictMock
;
namespace
{
uint32_t
AbsSendTime
(
int64_t
t
int64_t
denom
)
{
return
(
(
(
t
<
<
18
)
+
(
denom
>
>
1
)
)
/
denom
)
&
0x00fffffful
;
}
}
namespace
webrtc
{
namespace
test
{
class
CongestionControllerTest
:
public
:
:
testing
:
:
Test
{
protected
:
CongestionControllerTest
(
)
:
clock_
(
123456
)
{
}
~
CongestionControllerTest
(
)
override
{
}
void
SetUp
(
)
override
{
pacer_
=
new
NiceMock
<
MockPacedSender
>
(
)
;
std
:
:
unique_ptr
<
PacedSender
>
pacer
(
pacer_
)
;
controller_
.
reset
(
new
CongestionController
(
&
clock_
&
observer_
&
remote_bitrate_observer_
&
event_log_
&
packet_router_
std
:
:
move
(
pacer
)
)
)
;
bandwidth_observer_
.
reset
(
controller_
-
>
GetBitrateController
(
)
-
>
CreateRtcpBandwidthObserver
(
)
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
kInitialBitrateBps
_
_
_
)
)
;
EXPECT_CALL
(
*
pacer_
SetEstimatedBitrate
(
kInitialBitrateBps
)
)
;
controller_
-
>
SetBweBitrates
(
0
kInitialBitrateBps
5
*
kInitialBitrateBps
)
;
}
SimulatedClock
clock_
;
StrictMock
<
MockCongestionObserver
>
observer_
;
NiceMock
<
MockPacedSender
>
*
pacer_
;
NiceMock
<
MockRemoteBitrateObserver
>
remote_bitrate_observer_
;
NiceMock
<
MockRtcEventLog
>
event_log_
;
std
:
:
unique_ptr
<
RtcpBandwidthObserver
>
bandwidth_observer_
;
PacketRouter
packet_router_
;
std
:
:
unique_ptr
<
CongestionController
>
controller_
;
const
uint32_t
kInitialBitrateBps
=
60000
;
}
;
TEST_F
(
CongestionControllerTest
OnNetworkChanged
)
{
clock_
.
AdvanceTimeMilliseconds
(
25
)
;
controller_
-
>
Process
(
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
kInitialBitrateBps
*
2
_
_
_
)
)
;
EXPECT_CALL
(
*
pacer_
SetEstimatedBitrate
(
kInitialBitrateBps
*
2
)
)
;
bandwidth_observer_
-
>
OnReceivedEstimatedBitrate
(
kInitialBitrateBps
*
2
)
;
clock_
.
AdvanceTimeMilliseconds
(
25
)
;
controller_
-
>
Process
(
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
kInitialBitrateBps
_
_
_
)
)
;
EXPECT_CALL
(
*
pacer_
SetEstimatedBitrate
(
kInitialBitrateBps
)
)
;
bandwidth_observer_
-
>
OnReceivedEstimatedBitrate
(
kInitialBitrateBps
)
;
clock_
.
AdvanceTimeMilliseconds
(
25
)
;
controller_
-
>
Process
(
)
;
}
TEST_F
(
CongestionControllerTest
OnSendQueueFull
)
{
EXPECT_CALL
(
*
pacer_
ExpectedQueueTimeMs
(
)
)
.
WillOnce
(
Return
(
PacedSender
:
:
kMaxQueueLengthMs
+
1
)
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
0
_
_
_
)
)
;
controller_
-
>
Process
(
)
;
EXPECT_CALL
(
*
pacer_
ExpectedQueueTimeMs
(
)
)
.
WillOnce
(
Return
(
PacedSender
:
:
kMaxQueueLengthMs
-
1
)
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
kInitialBitrateBps
_
_
_
)
)
;
controller_
-
>
Process
(
)
;
}
TEST_F
(
CongestionControllerTest
OnSendQueueFullAndEstimateChange
)
{
EXPECT_CALL
(
*
pacer_
ExpectedQueueTimeMs
(
)
)
.
WillOnce
(
Return
(
PacedSender
:
:
kMaxQueueLengthMs
+
1
)
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
0
_
_
_
)
)
;
controller_
-
>
Process
(
)
;
bandwidth_observer_
-
>
OnReceivedEstimatedBitrate
(
kInitialBitrateBps
*
2
)
;
EXPECT_CALL
(
*
pacer_
ExpectedQueueTimeMs
(
)
)
.
WillOnce
(
Return
(
PacedSender
:
:
kMaxQueueLengthMs
+
1
)
)
;
EXPECT_CALL
(
*
pacer_
SetEstimatedBitrate
(
kInitialBitrateBps
*
2
)
)
;
clock_
.
AdvanceTimeMilliseconds
(
25
)
;
controller_
-
>
Process
(
)
;
EXPECT_CALL
(
*
pacer_
ExpectedQueueTimeMs
(
)
)
.
WillOnce
(
Return
(
PacedSender
:
:
kMaxQueueLengthMs
-
1
)
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
kInitialBitrateBps
*
2
_
_
_
)
)
;
clock_
.
AdvanceTimeMilliseconds
(
25
)
;
controller_
-
>
Process
(
)
;
}
TEST_F
(
CongestionControllerTest
SignalNetworkState
)
{
EXPECT_CALL
(
observer_
OnNetworkChanged
(
0
_
_
_
)
)
;
controller_
-
>
SignalNetworkState
(
kNetworkDown
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
kInitialBitrateBps
_
_
_
)
)
;
controller_
-
>
SignalNetworkState
(
kNetworkUp
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
0
_
_
_
)
)
;
controller_
-
>
SignalNetworkState
(
kNetworkDown
)
;
}
TEST_F
(
CongestionControllerTest
ResetBweAndBitrates
)
{
int
new_bitrate
=
200000
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
new_bitrate
_
_
_
)
)
;
EXPECT_CALL
(
*
pacer_
SetEstimatedBitrate
(
new_bitrate
)
)
;
controller_
-
>
ResetBweAndBitrates
(
new_bitrate
-
1
-
1
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
congestion_controller
:
:
GetMinBitrateBps
(
)
_
_
_
)
)
;
EXPECT_CALL
(
*
pacer_
SetEstimatedBitrate
(
congestion_controller
:
:
GetMinBitrateBps
(
)
)
)
;
controller_
-
>
ResetBweAndBitrates
(
-
1
-
1
-
1
)
;
}
TEST_F
(
CongestionControllerTest
SignalNetworkStateAndQueueIsFullAndEstimateChange
)
{
EXPECT_CALL
(
*
pacer_
ExpectedQueueTimeMs
(
)
)
.
WillRepeatedly
(
Return
(
PacedSender
:
:
kMaxQueueLengthMs
+
1
)
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
0
_
_
_
)
)
;
controller_
-
>
Process
(
)
;
controller_
-
>
SignalNetworkState
(
kNetworkDown
)
;
controller_
-
>
Process
(
)
;
controller_
-
>
SignalNetworkState
(
kNetworkUp
)
;
controller_
-
>
Process
(
)
;
EXPECT_CALL
(
*
pacer_
SetEstimatedBitrate
(
kInitialBitrateBps
*
2
)
)
;
bandwidth_observer_
-
>
OnReceivedEstimatedBitrate
(
kInitialBitrateBps
*
2
)
;
clock_
.
AdvanceTimeMilliseconds
(
25
)
;
controller_
-
>
Process
(
)
;
EXPECT_CALL
(
*
pacer_
ExpectedQueueTimeMs
(
)
)
.
WillOnce
(
Return
(
PacedSender
:
:
kMaxQueueLengthMs
-
1
)
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
kInitialBitrateBps
*
2
_
_
_
)
)
;
controller_
-
>
Process
(
)
;
}
TEST_F
(
CongestionControllerTest
GetPacerQueuingDelayMs
)
{
EXPECT_CALL
(
observer_
OnNetworkChanged
(
_
_
_
_
)
)
.
Times
(
AtLeast
(
1
)
)
;
const
int64_t
kQueueTimeMs
=
123
;
EXPECT_CALL
(
*
pacer_
QueueInMs
(
)
)
.
WillRepeatedly
(
Return
(
kQueueTimeMs
)
)
;
EXPECT_EQ
(
kQueueTimeMs
controller_
-
>
GetPacerQueuingDelayMs
(
)
)
;
controller_
-
>
SignalNetworkState
(
kNetworkDown
)
;
EXPECT_EQ
(
0
controller_
-
>
GetPacerQueuingDelayMs
(
)
)
;
controller_
-
>
SignalNetworkState
(
kNetworkUp
)
;
EXPECT_EQ
(
kQueueTimeMs
controller_
-
>
GetPacerQueuingDelayMs
(
)
)
;
}
TEST_F
(
CongestionControllerTest
GetProbingInterval
)
{
clock_
.
AdvanceTimeMilliseconds
(
25
)
;
controller_
-
>
Process
(
)
;
EXPECT_CALL
(
observer_
OnNetworkChanged
(
_
_
_
testing
:
:
Ne
(
0
)
)
)
;
EXPECT_CALL
(
*
pacer_
SetEstimatedBitrate
(
_
)
)
;
bandwidth_observer_
-
>
OnReceivedEstimatedBitrate
(
kInitialBitrateBps
*
2
)
;
clock_
.
AdvanceTimeMilliseconds
(
25
)
;
controller_
-
>
Process
(
)
;
}
TEST_F
(
CongestionControllerTest
OnReceivedPacketWithAbsSendTime
)
{
NiceMock
<
MockCongestionObserver
>
observer
;
StrictMock
<
MockRemoteBitrateObserver
>
remote_bitrate_observer
;
std
:
:
unique_ptr
<
PacedSender
>
pacer
(
new
NiceMock
<
MockPacedSender
>
(
)
)
;
controller_
.
reset
(
new
CongestionController
(
&
clock_
&
observer
&
remote_bitrate_observer
&
event_log_
&
packet_router_
std
:
:
move
(
pacer
)
)
)
;
size_t
payload_size
=
1000
;
RTPHeader
header
;
header
.
ssrc
=
0x11eb21c
;
header
.
extension
.
hasAbsoluteSendTime
=
true
;
std
:
:
vector
<
unsigned
int
>
ssrcs
;
EXPECT_CALL
(
remote_bitrate_observer
OnReceiveBitrateChanged
(
_
_
)
)
.
WillRepeatedly
(
SaveArg
<
0
>
(
&
ssrcs
)
)
;
for
(
int
i
=
0
;
i
<
10
;
+
+
i
)
{
clock_
.
AdvanceTimeMilliseconds
(
(
1000
*
payload_size
)
/
kInitialBitrateBps
)
;
int64_t
now_ms
=
clock_
.
TimeInMilliseconds
(
)
;
header
.
extension
.
absoluteSendTime
=
AbsSendTime
(
now_ms
1000
)
;
controller_
-
>
OnReceivedPacket
(
now_ms
payload_size
header
)
;
}
ASSERT_EQ
(
1u
ssrcs
.
size
(
)
)
;
EXPECT_EQ
(
header
.
ssrc
ssrcs
[
0
]
)
;
}
}
}
