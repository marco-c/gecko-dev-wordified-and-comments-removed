#
include
"
modules
/
congestion_controller
/
probe_controller
.
h
"
#
include
<
algorithm
>
#
include
<
initializer_list
>
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
numerics
/
safe_conversions
.
h
"
#
include
"
system_wrappers
/
include
/
field_trial
.
h
"
#
include
"
system_wrappers
/
include
/
metrics
.
h
"
namespace
webrtc
{
namespace
{
constexpr
int64_t
kMaxWaitingTimeForProbingResultMs
=
1000
;
constexpr
int
kExponentialProbingDisabled
=
0
;
constexpr
int64_t
kDefaultMaxProbingBitrateBps
=
5000000
;
constexpr
int64_t
kAlrPeriodicProbingIntervalMs
=
5000
;
constexpr
int
kRepeatedProbeMinPercentage
=
70
;
constexpr
double
kBitrateDropThreshold
=
0
.
66
;
constexpr
int
kBitrateDropTimeoutMs
=
5000
;
constexpr
double
kProbeFractionAfterDrop
=
0
.
85
;
constexpr
int
kAlrEndedTimeoutMs
=
3000
;
constexpr
int64_t
kMinTimeBetweenAlrProbesMs
=
5000
;
constexpr
double
kProbeUncertainty
=
0
.
05
;
constexpr
char
kBweRapidRecoveryExperiment
[
]
=
"
WebRTC
-
BweRapidRecoveryExperiment
"
;
}
ProbeController
:
:
ProbeController
(
PacedSender
*
pacer
const
Clock
*
clock
)
:
pacer_
(
pacer
)
clock_
(
clock
)
enable_periodic_alr_probing_
(
false
)
{
Reset
(
)
;
in_rapid_recovery_experiment_
=
webrtc
:
:
field_trial
:
:
FindFullName
(
kBweRapidRecoveryExperiment
)
=
=
"
Enabled
"
;
}
void
ProbeController
:
:
SetBitrates
(
int64_t
min_bitrate_bps
int64_t
start_bitrate_bps
int64_t
max_bitrate_bps
)
{
rtc
:
:
CritScope
cs
(
&
critsect_
)
;
if
(
start_bitrate_bps
>
0
)
{
start_bitrate_bps_
=
start_bitrate_bps
;
estimated_bitrate_bps_
=
start_bitrate_bps
;
}
else
if
(
start_bitrate_bps_
=
=
0
)
{
start_bitrate_bps_
=
min_bitrate_bps
;
}
int64_t
old_max_bitrate_bps
=
max_bitrate_bps_
;
max_bitrate_bps_
=
max_bitrate_bps
;
switch
(
state_
)
{
case
State
:
:
kInit
:
if
(
network_state_
=
=
kNetworkUp
)
InitiateExponentialProbing
(
)
;
break
;
case
State
:
:
kWaitingForProbingResult
:
break
;
case
State
:
:
kProbingComplete
:
if
(
estimated_bitrate_bps_
!
=
0
&
&
old_max_bitrate_bps
<
max_bitrate_bps_
&
&
estimated_bitrate_bps_
<
max_bitrate_bps_
)
{
mid_call_probing_succcess_threshold_
=
std
:
:
min
(
estimated_bitrate_bps_
*
1
.
2
max_bitrate_bps_
*
0
.
9
)
;
mid_call_probing_waiting_for_result_
=
true
;
mid_call_probing_bitrate_bps_
=
max_bitrate_bps_
;
RTC_HISTOGRAM_COUNTS_10000
(
"
WebRTC
.
BWE
.
MidCallProbing
.
Initiated
"
max_bitrate_bps_
/
1000
)
;
InitiateProbing
(
clock_
-
>
TimeInMilliseconds
(
)
{
max_bitrate_bps
}
false
)
;
}
break
;
}
}
void
ProbeController
:
:
OnNetworkStateChanged
(
NetworkState
network_state
)
{
rtc
:
:
CritScope
cs
(
&
critsect_
)
;
network_state_
=
network_state
;
if
(
network_state_
=
=
kNetworkUp
&
&
state_
=
=
State
:
:
kInit
)
InitiateExponentialProbing
(
)
;
}
void
ProbeController
:
:
InitiateExponentialProbing
(
)
{
RTC_DCHECK
(
network_state_
=
=
kNetworkUp
)
;
RTC_DCHECK
(
state_
=
=
State
:
:
kInit
)
;
RTC_DCHECK_GT
(
start_bitrate_bps_
0
)
;
InitiateProbing
(
clock_
-
>
TimeInMilliseconds
(
)
{
3
*
start_bitrate_bps_
6
*
start_bitrate_bps_
}
true
)
;
}
void
ProbeController
:
:
SetEstimatedBitrate
(
int64_t
bitrate_bps
)
{
rtc
:
:
CritScope
cs
(
&
critsect_
)
;
int64_t
now_ms
=
clock_
-
>
TimeInMilliseconds
(
)
;
if
(
mid_call_probing_waiting_for_result_
&
&
bitrate_bps
>
=
mid_call_probing_succcess_threshold_
)
{
RTC_HISTOGRAM_COUNTS_10000
(
"
WebRTC
.
BWE
.
MidCallProbing
.
Success
"
mid_call_probing_bitrate_bps_
/
1000
)
;
RTC_HISTOGRAM_COUNTS_10000
(
"
WebRTC
.
BWE
.
MidCallProbing
.
ProbedKbps
"
bitrate_bps
/
1000
)
;
mid_call_probing_waiting_for_result_
=
false
;
}
if
(
state_
=
=
State
:
:
kWaitingForProbingResult
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
Measured
bitrate
:
"
<
<
bitrate_bps
<
<
"
Minimum
to
probe
further
:
"
<
<
min_bitrate_to_probe_further_bps_
;
if
(
min_bitrate_to_probe_further_bps_
!
=
kExponentialProbingDisabled
&
&
bitrate_bps
>
min_bitrate_to_probe_further_bps_
)
{
InitiateProbing
(
now_ms
{
2
*
bitrate_bps
}
true
)
;
}
}
if
(
bitrate_bps
<
kBitrateDropThreshold
*
estimated_bitrate_bps_
)
{
time_of_last_large_drop_ms_
=
now_ms
;
bitrate_before_last_large_drop_bps_
=
estimated_bitrate_bps_
;
}
estimated_bitrate_bps_
=
bitrate_bps
;
}
void
ProbeController
:
:
EnablePeriodicAlrProbing
(
bool
enable
)
{
rtc
:
:
CritScope
cs
(
&
critsect_
)
;
enable_periodic_alr_probing_
=
enable
;
}
void
ProbeController
:
:
SetAlrEndedTimeMs
(
int64_t
alr_end_time_ms
)
{
rtc
:
:
CritScope
cs
(
&
critsect_
)
;
alr_end_time_ms_
.
emplace
(
alr_end_time_ms
)
;
}
void
ProbeController
:
:
RequestProbe
(
)
{
int64_t
now_ms
=
clock_
-
>
TimeInMilliseconds
(
)
;
rtc
:
:
CritScope
cs
(
&
critsect_
)
;
bool
in_alr
=
pacer_
-
>
GetApplicationLimitedRegionStartTime
(
)
.
has_value
(
)
;
bool
alr_ended_recently
=
(
alr_end_time_ms_
.
has_value
(
)
&
&
now_ms
-
alr_end_time_ms_
.
value
(
)
<
kAlrEndedTimeoutMs
)
;
if
(
in_alr
|
|
alr_ended_recently
|
|
in_rapid_recovery_experiment_
)
{
if
(
state_
=
=
State
:
:
kProbingComplete
)
{
uint32_t
suggested_probe_bps
=
kProbeFractionAfterDrop
*
bitrate_before_last_large_drop_bps_
;
uint32_t
min_expected_probe_result_bps
=
(
1
-
kProbeUncertainty
)
*
suggested_probe_bps
;
int64_t
time_since_drop_ms
=
now_ms
-
time_of_last_large_drop_ms_
;
int64_t
time_since_probe_ms
=
now_ms
-
last_bwe_drop_probing_time_ms_
;
if
(
min_expected_probe_result_bps
>
estimated_bitrate_bps_
&
&
time_since_drop_ms
<
kBitrateDropTimeoutMs
&
&
time_since_probe_ms
>
kMinTimeBetweenAlrProbesMs
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
Detected
big
bandwidth
drop
start
probing
.
"
;
RTC_HISTOGRAM_COUNTS_10000
(
"
WebRTC
.
BWE
.
BweDropProbingIntervalInS
"
(
now_ms
-
last_bwe_drop_probing_time_ms_
)
/
1000
)
;
InitiateProbing
(
now_ms
{
suggested_probe_bps
}
false
)
;
last_bwe_drop_probing_time_ms_
=
now_ms
;
}
}
}
}
void
ProbeController
:
:
Reset
(
)
{
rtc
:
:
CritScope
cs
(
&
critsect_
)
;
network_state_
=
kNetworkUp
;
state_
=
State
:
:
kInit
;
min_bitrate_to_probe_further_bps_
=
kExponentialProbingDisabled
;
time_last_probing_initiated_ms_
=
0
;
estimated_bitrate_bps_
=
0
;
start_bitrate_bps_
=
0
;
max_bitrate_bps_
=
0
;
int64_t
now_ms
=
clock_
-
>
TimeInMilliseconds
(
)
;
last_bwe_drop_probing_time_ms_
=
now_ms
;
alr_end_time_ms_
.
reset
(
)
;
mid_call_probing_waiting_for_result_
=
false
;
time_of_last_large_drop_ms_
=
now_ms
;
bitrate_before_last_large_drop_bps_
=
0
;
}
void
ProbeController
:
:
Process
(
)
{
rtc
:
:
CritScope
cs
(
&
critsect_
)
;
int64_t
now_ms
=
clock_
-
>
TimeInMilliseconds
(
)
;
if
(
now_ms
-
time_last_probing_initiated_ms_
>
kMaxWaitingTimeForProbingResultMs
)
{
mid_call_probing_waiting_for_result_
=
false
;
if
(
state_
=
=
State
:
:
kWaitingForProbingResult
)
{
RTC_LOG
(
LS_INFO
)
<
<
"
kWaitingForProbingResult
:
timeout
"
;
state_
=
State
:
:
kProbingComplete
;
min_bitrate_to_probe_further_bps_
=
kExponentialProbingDisabled
;
}
}
if
(
state_
!
=
State
:
:
kProbingComplete
|
|
!
enable_periodic_alr_probing_
)
return
;
rtc
:
:
Optional
<
int64_t
>
alr_start_time
=
pacer_
-
>
GetApplicationLimitedRegionStartTime
(
)
;
if
(
alr_start_time
&
&
estimated_bitrate_bps_
>
0
)
{
int64_t
next_probe_time_ms
=
std
:
:
max
(
*
alr_start_time
time_last_probing_initiated_ms_
)
+
kAlrPeriodicProbingIntervalMs
;
if
(
now_ms
>
=
next_probe_time_ms
)
{
InitiateProbing
(
now_ms
{
estimated_bitrate_bps_
*
2
}
true
)
;
}
}
}
void
ProbeController
:
:
InitiateProbing
(
int64_t
now_ms
std
:
:
initializer_list
<
int64_t
>
bitrates_to_probe
bool
probe_further
)
{
for
(
int64_t
bitrate
:
bitrates_to_probe
)
{
RTC_DCHECK_GT
(
bitrate
0
)
;
int64_t
max_probe_bitrate_bps
=
max_bitrate_bps_
>
0
?
max_bitrate_bps_
:
kDefaultMaxProbingBitrateBps
;
if
(
bitrate
>
max_probe_bitrate_bps
)
{
bitrate
=
max_probe_bitrate_bps
;
probe_further
=
false
;
}
pacer_
-
>
CreateProbeCluster
(
rtc
:
:
dchecked_cast
<
int
>
(
bitrate
)
)
;
}
time_last_probing_initiated_ms_
=
now_ms
;
if
(
probe_further
)
{
state_
=
State
:
:
kWaitingForProbingResult
;
min_bitrate_to_probe_further_bps_
=
(
*
(
bitrates_to_probe
.
end
(
)
-
1
)
)
*
kRepeatedProbeMinPercentage
/
100
;
}
else
{
state_
=
State
:
:
kProbingComplete
;
min_bitrate_to_probe_further_bps_
=
kExponentialProbingDisabled
;
}
}
}
