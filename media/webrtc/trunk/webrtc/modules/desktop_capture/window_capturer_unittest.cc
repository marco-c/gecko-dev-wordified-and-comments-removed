#
include
<
memory
>
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_frame
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_region
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
logging
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
namespace
webrtc
{
class
WindowCapturerTest
:
public
testing
:
:
Test
public
DesktopCapturer
:
:
Callback
{
public
:
void
SetUp
(
)
override
{
capturer_
=
DesktopCapturer
:
:
CreateWindowCapturer
(
DesktopCaptureOptions
:
:
CreateDefault
(
)
)
;
}
void
TearDown
(
)
override
{
}
void
OnCaptureResult
(
DesktopCapturer
:
:
Result
result
std
:
:
unique_ptr
<
DesktopFrame
>
frame
)
override
{
frame_
=
std
:
:
move
(
frame
)
;
}
protected
:
std
:
:
unique_ptr
<
DesktopCapturer
>
capturer_
;
std
:
:
unique_ptr
<
DesktopFrame
>
frame_
;
}
;
TEST_F
(
WindowCapturerTest
Enumerate
)
{
DesktopCapturer
:
:
SourceList
sources
;
EXPECT_TRUE
(
capturer_
-
>
GetSourceList
(
&
sources
)
)
;
for
(
auto
it
=
sources
.
begin
(
)
;
it
!
=
sources
.
end
(
)
;
+
+
it
)
{
EXPECT_FALSE
(
it
-
>
title
.
empty
(
)
)
;
}
}
TEST_F
(
WindowCapturerTest
Capture
)
{
DesktopCapturer
:
:
SourceList
sources
;
capturer_
-
>
Start
(
this
)
;
EXPECT_TRUE
(
capturer_
-
>
GetSourceList
(
&
sources
)
)
;
for
(
auto
it
=
sources
.
begin
(
)
;
it
!
=
sources
.
end
(
)
;
+
+
it
)
{
frame_
.
reset
(
)
;
if
(
capturer_
-
>
SelectSource
(
it
-
>
id
)
)
{
capturer_
-
>
CaptureFrame
(
)
;
}
if
(
!
frame_
.
get
(
)
)
{
DesktopCapturer
:
:
SourceList
new_list
;
EXPECT_TRUE
(
capturer_
-
>
GetSourceList
(
&
new_list
)
)
;
for
(
auto
new_list_it
=
new_list
.
begin
(
)
;
new_list_it
!
=
new_list
.
end
(
)
;
+
+
new_list_it
)
{
EXPECT_FALSE
(
it
-
>
id
=
=
new_list_it
-
>
id
)
;
}
continue
;
}
EXPECT_GT
(
frame_
-
>
size
(
)
.
width
(
)
0
)
;
EXPECT_GT
(
frame_
-
>
size
(
)
.
height
(
)
0
)
;
}
}
}
