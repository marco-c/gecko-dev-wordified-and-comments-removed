#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
screen_capturer_win_magnifier
.
h
"
#
include
<
utility
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
timeutils
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_frame
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_frame_win
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_region
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
mouse_cursor
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
cursor
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
desktop
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
screen_capture_utils
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
logging
.
h
"
namespace
webrtc
{
static
LPCTSTR
kMagnifierHostClass
=
L
"
ScreenCapturerWinMagnifierHost
"
;
static
LPCTSTR
kHostWindowName
=
L
"
MagnifierHost
"
;
static
LPCTSTR
kMagnifierWindowClass
=
L
"
Magnifier
"
;
static
LPCTSTR
kMagnifierWindowName
=
L
"
MagnifierWindow
"
;
Atomic32
ScreenCapturerWinMagnifier
:
:
tls_index_
(
TLS_OUT_OF_INDEXES
)
;
ScreenCapturerWinMagnifier
:
:
ScreenCapturerWinMagnifier
(
std
:
:
unique_ptr
<
DesktopCapturer
>
fallback_capturer
)
:
fallback_capturer_
(
std
:
:
move
(
fallback_capturer
)
)
{
}
ScreenCapturerWinMagnifier
:
:
~
ScreenCapturerWinMagnifier
(
)
{
if
(
host_window_
)
DestroyWindow
(
host_window_
)
;
if
(
magnifier_initialized_
)
mag_uninitialize_func_
(
)
;
if
(
mag_lib_handle_
)
FreeLibrary
(
mag_lib_handle_
)
;
if
(
desktop_dc_
)
ReleaseDC
(
NULL
desktop_dc_
)
;
}
void
ScreenCapturerWinMagnifier
:
:
Start
(
Callback
*
callback
)
{
RTC_DCHECK
(
!
callback_
)
;
RTC_DCHECK
(
callback
)
;
callback_
=
callback
;
if
(
!
InitializeMagnifier
(
)
)
{
LOG_F
(
LS_WARNING
)
<
<
"
Switching
to
fallback
screen
capturer
becuase
"
"
magnifier
initialization
failed
.
"
;
StartFallbackCapturer
(
)
;
}
}
void
ScreenCapturerWinMagnifier
:
:
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
{
shared_memory_factory_
=
std
:
:
move
(
shared_memory_factory
)
;
}
void
ScreenCapturerWinMagnifier
:
:
CaptureFrame
(
)
{
if
(
!
magnifier_initialized_
|
|
!
magnifier_capture_succeeded_
|
|
GetSystemMetrics
(
SM_CMONITORS
)
!
=
1
)
{
LOG_F
(
LS_WARNING
)
<
<
"
Switching
to
the
fallback
screen
capturer
because
"
"
initialization
or
last
capture
attempt
failed
or
"
"
execute
on
multi
-
screen
system
.
"
;
StartFallbackCapturer
(
)
;
fallback_capturer_
-
>
CaptureFrame
(
)
;
return
;
}
int64_t
capture_start_time_nanos
=
rtc
:
:
TimeNanos
(
)
;
std
:
:
unique_ptr
<
Desktop
>
input_desktop
(
Desktop
:
:
GetInputDesktop
(
)
)
;
if
(
input_desktop
.
get
(
)
!
=
NULL
&
&
!
desktop_
.
IsSame
(
*
input_desktop
)
)
{
if
(
desktop_dc_
)
{
ReleaseDC
(
NULL
desktop_dc_
)
;
desktop_dc_
=
NULL
;
}
desktop_
.
SetThreadDesktop
(
input_desktop
.
release
(
)
)
;
}
DesktopRect
rect
=
GetScreenRect
(
current_screen_id_
current_device_key_
)
;
queue_
.
MoveToNextFrame
(
)
;
CreateCurrentFrameIfNecessary
(
rect
.
size
(
)
)
;
if
(
!
CaptureImage
(
rect
)
)
{
LOG_F
(
LS_WARNING
)
<
<
"
Switching
to
the
fallback
screen
capturer
because
"
"
last
capture
attempt
failed
.
"
;
StartFallbackCapturer
(
)
;
fallback_capturer_
-
>
CaptureFrame
(
)
;
return
;
}
std
:
:
unique_ptr
<
DesktopFrame
>
frame
=
queue_
.
current_frame
(
)
-
>
Share
(
)
;
frame
-
>
set_dpi
(
DesktopVector
(
GetDeviceCaps
(
desktop_dc_
LOGPIXELSX
)
GetDeviceCaps
(
desktop_dc_
LOGPIXELSY
)
)
)
;
frame
-
>
mutable_updated_region
(
)
-
>
SetRect
(
DesktopRect
:
:
MakeSize
(
frame
-
>
size
(
)
)
)
;
frame
-
>
set_capture_time_ms
(
(
rtc
:
:
TimeNanos
(
)
-
capture_start_time_nanos
)
/
rtc
:
:
kNumNanosecsPerMillisec
)
;
callback_
-
>
OnCaptureResult
(
Result
:
:
SUCCESS
std
:
:
move
(
frame
)
)
;
}
bool
ScreenCapturerWinMagnifier
:
:
GetSourceList
(
SourceList
*
sources
)
{
return
webrtc
:
:
GetScreenList
(
sources
)
;
}
bool
ScreenCapturerWinMagnifier
:
:
SelectSource
(
SourceId
id
)
{
bool
valid
=
IsScreenValid
(
id
&
current_device_key_
)
;
if
(
valid
)
current_screen_id_
=
id
;
if
(
fallback_capturer_started_
)
fallback_capturer_
-
>
SelectSource
(
id
)
;
return
valid
;
}
void
ScreenCapturerWinMagnifier
:
:
SetExcludedWindow
(
WindowId
excluded_window
)
{
excluded_window_
=
(
HWND
)
excluded_window
;
if
(
excluded_window_
&
&
magnifier_initialized_
)
{
set_window_filter_list_func_
(
magnifier_window_
MW_FILTERMODE_EXCLUDE
1
&
excluded_window_
)
;
}
}
bool
ScreenCapturerWinMagnifier
:
:
CaptureImage
(
const
DesktopRect
&
rect
)
{
RTC_DCHECK
(
magnifier_initialized_
)
;
BOOL
result
=
SetWindowPos
(
magnifier_window_
NULL
rect
.
left
(
)
rect
.
top
(
)
rect
.
width
(
)
rect
.
height
(
)
0
)
;
if
(
!
result
)
{
LOG_F
(
LS_WARNING
)
<
<
"
Failed
to
call
SetWindowPos
:
"
<
<
GetLastError
(
)
<
<
"
.
Rect
=
{
"
<
<
rect
.
left
(
)
<
<
"
"
<
<
rect
.
top
(
)
<
<
"
"
<
<
rect
.
right
(
)
<
<
"
"
<
<
rect
.
bottom
(
)
<
<
"
}
"
;
return
false
;
}
magnifier_capture_succeeded_
=
false
;
RECT
native_rect
=
{
rect
.
left
(
)
rect
.
top
(
)
rect
.
right
(
)
rect
.
bottom
(
)
}
;
RTC_DCHECK
(
tls_index_
.
Value
(
)
!
=
static_cast
<
int32_t
>
(
TLS_OUT_OF_INDEXES
)
)
;
TlsSetValue
(
tls_index_
.
Value
(
)
this
)
;
result
=
set_window_source_func_
(
magnifier_window_
native_rect
)
;
if
(
!
result
)
{
LOG_F
(
LS_WARNING
)
<
<
"
Failed
to
call
MagSetWindowSource
:
"
<
<
GetLastError
(
)
<
<
"
.
Rect
=
{
"
<
<
rect
.
left
(
)
<
<
"
"
<
<
rect
.
top
(
)
<
<
"
"
<
<
rect
.
right
(
)
<
<
"
"
<
<
rect
.
bottom
(
)
<
<
"
}
"
;
return
false
;
}
return
magnifier_capture_succeeded_
;
}
BOOL
ScreenCapturerWinMagnifier
:
:
OnMagImageScalingCallback
(
HWND
hwnd
void
*
srcdata
MAGIMAGEHEADER
srcheader
void
*
destdata
MAGIMAGEHEADER
destheader
RECT
unclipped
RECT
clipped
HRGN
dirty
)
{
RTC_DCHECK
(
tls_index_
.
Value
(
)
!
=
static_cast
<
int32_t
>
(
TLS_OUT_OF_INDEXES
)
)
;
ScreenCapturerWinMagnifier
*
owner
=
reinterpret_cast
<
ScreenCapturerWinMagnifier
*
>
(
TlsGetValue
(
tls_index_
.
Value
(
)
)
)
;
TlsSetValue
(
tls_index_
.
Value
(
)
nullptr
)
;
owner
-
>
OnCaptured
(
srcdata
srcheader
)
;
return
TRUE
;
}
bool
ScreenCapturerWinMagnifier
:
:
InitializeMagnifier
(
)
{
RTC_DCHECK
(
!
magnifier_initialized_
)
;
desktop_dc_
=
GetDC
(
nullptr
)
;
mag_lib_handle_
=
LoadLibrary
(
L
"
Magnification
.
dll
"
)
;
if
(
!
mag_lib_handle_
)
return
false
;
mag_initialize_func_
=
reinterpret_cast
<
MagInitializeFunc
>
(
GetProcAddress
(
mag_lib_handle_
"
MagInitialize
"
)
)
;
mag_uninitialize_func_
=
reinterpret_cast
<
MagUninitializeFunc
>
(
GetProcAddress
(
mag_lib_handle_
"
MagUninitialize
"
)
)
;
set_window_source_func_
=
reinterpret_cast
<
MagSetWindowSourceFunc
>
(
GetProcAddress
(
mag_lib_handle_
"
MagSetWindowSource
"
)
)
;
set_window_filter_list_func_
=
reinterpret_cast
<
MagSetWindowFilterListFunc
>
(
GetProcAddress
(
mag_lib_handle_
"
MagSetWindowFilterList
"
)
)
;
set_image_scaling_callback_func_
=
reinterpret_cast
<
MagSetImageScalingCallbackFunc
>
(
GetProcAddress
(
mag_lib_handle_
"
MagSetImageScalingCallback
"
)
)
;
if
(
!
mag_initialize_func_
|
|
!
mag_uninitialize_func_
|
|
!
set_window_source_func_
|
|
!
set_window_filter_list_func_
|
|
!
set_image_scaling_callback_func_
)
{
LOG_F
(
LS_WARNING
)
<
<
"
Failed
to
initialize
ScreenCapturerWinMagnifier
:
"
<
<
"
library
functions
missing
.
"
;
return
false
;
}
BOOL
result
=
mag_initialize_func_
(
)
;
if
(
!
result
)
{
LOG_F
(
LS_WARNING
)
<
<
"
Failed
to
initialize
ScreenCapturerWinMagnifier
:
"
<
<
"
error
from
MagInitialize
"
<
<
GetLastError
(
)
;
return
false
;
}
HMODULE
hInstance
=
nullptr
;
result
=
GetModuleHandleExA
(
GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS
|
GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
reinterpret_cast
<
char
*
>
(
&
DefWindowProc
)
&
hInstance
)
;
if
(
!
result
)
{
mag_uninitialize_func_
(
)
;
LOG_F
(
LS_WARNING
)
<
<
"
Failed
to
initialize
ScreenCapturerWinMagnifier
:
"
<
<
"
error
from
GetModulehandleExA
"
<
<
GetLastError
(
)
;
return
false
;
}
WNDCLASSEX
wcex
=
{
}
;
wcex
.
cbSize
=
sizeof
(
WNDCLASSEX
)
;
wcex
.
lpfnWndProc
=
&
DefWindowProc
;
wcex
.
hInstance
=
hInstance
;
wcex
.
hCursor
=
LoadCursor
(
nullptr
IDC_ARROW
)
;
wcex
.
lpszClassName
=
kMagnifierHostClass
;
RegisterClassEx
(
&
wcex
)
;
host_window_
=
CreateWindowEx
(
WS_EX_LAYERED
kMagnifierHostClass
kHostWindowName
0
0
0
0
0
nullptr
nullptr
hInstance
nullptr
)
;
if
(
!
host_window_
)
{
mag_uninitialize_func_
(
)
;
LOG_F
(
LS_WARNING
)
<
<
"
Failed
to
initialize
ScreenCapturerWinMagnifier
:
"
<
<
"
error
from
creating
host
window
"
<
<
GetLastError
(
)
;
return
false
;
}
magnifier_window_
=
CreateWindow
(
kMagnifierWindowClass
kMagnifierWindowName
WS_CHILD
|
WS_VISIBLE
0
0
0
0
host_window_
nullptr
hInstance
nullptr
)
;
if
(
!
magnifier_window_
)
{
mag_uninitialize_func_
(
)
;
LOG_F
(
LS_WARNING
)
<
<
"
Failed
to
initialize
ScreenCapturerWinMagnifier
:
"
<
<
"
error
from
creating
magnifier
window
"
<
<
GetLastError
(
)
;
return
false
;
}
ShowWindow
(
host_window_
SW_HIDE
)
;
result
=
set_image_scaling_callback_func_
(
magnifier_window_
&
ScreenCapturerWinMagnifier
:
:
OnMagImageScalingCallback
)
;
if
(
!
result
)
{
mag_uninitialize_func_
(
)
;
LOG_F
(
LS_WARNING
)
<
<
"
Failed
to
initialize
ScreenCapturerWinMagnifier
:
"
<
<
"
error
from
MagSetImageScalingCallback
"
<
<
GetLastError
(
)
;
return
false
;
}
if
(
excluded_window_
)
{
result
=
set_window_filter_list_func_
(
magnifier_window_
MW_FILTERMODE_EXCLUDE
1
&
excluded_window_
)
;
if
(
!
result
)
{
mag_uninitialize_func_
(
)
;
LOG_F
(
LS_WARNING
)
<
<
"
Failed
to
initialize
ScreenCapturerWinMagnifier
:
"
<
<
"
error
from
MagSetWindowFilterList
"
<
<
GetLastError
(
)
;
return
false
;
}
}
if
(
tls_index_
.
Value
(
)
=
=
static_cast
<
int32_t
>
(
TLS_OUT_OF_INDEXES
)
)
{
DWORD
new_tls_index
=
TlsAlloc
(
)
;
if
(
!
tls_index_
.
CompareExchange
(
new_tls_index
TLS_OUT_OF_INDEXES
)
)
TlsFree
(
new_tls_index
)
;
}
magnifier_initialized_
=
true
;
return
true
;
}
void
ScreenCapturerWinMagnifier
:
:
OnCaptured
(
void
*
data
const
MAGIMAGEHEADER
&
header
)
{
DesktopFrame
*
current_frame
=
queue_
.
current_frame
(
)
;
int
captured_bytes_per_pixel
=
header
.
cbSize
/
header
.
width
/
header
.
height
;
if
(
header
.
format
!
=
GUID_WICPixelFormat32bppRGBA
|
|
header
.
width
!
=
static_cast
<
UINT
>
(
current_frame
-
>
size
(
)
.
width
(
)
)
|
|
header
.
height
!
=
static_cast
<
UINT
>
(
current_frame
-
>
size
(
)
.
height
(
)
)
|
|
header
.
stride
!
=
static_cast
<
UINT
>
(
current_frame
-
>
stride
(
)
)
|
|
captured_bytes_per_pixel
!
=
DesktopFrame
:
:
kBytesPerPixel
)
{
LOG_F
(
LS_WARNING
)
<
<
"
Output
format
does
not
match
the
captured
format
:
"
<
<
"
width
=
"
<
<
header
.
width
<
<
"
"
<
<
"
height
=
"
<
<
header
.
height
<
<
"
"
<
<
"
stride
=
"
<
<
header
.
stride
<
<
"
"
<
<
"
bpp
=
"
<
<
captured_bytes_per_pixel
<
<
"
"
<
<
"
pixel
format
RGBA
?
"
<
<
(
header
.
format
=
=
GUID_WICPixelFormat32bppRGBA
)
<
<
"
.
"
;
return
;
}
current_frame
-
>
CopyPixelsFrom
(
reinterpret_cast
<
uint8_t
*
>
(
data
)
header
.
stride
DesktopRect
:
:
MakeXYWH
(
0
0
header
.
width
header
.
height
)
)
;
magnifier_capture_succeeded_
=
true
;
}
void
ScreenCapturerWinMagnifier
:
:
CreateCurrentFrameIfNecessary
(
const
DesktopSize
&
size
)
{
if
(
!
queue_
.
current_frame
(
)
|
|
!
queue_
.
current_frame
(
)
-
>
size
(
)
.
equals
(
size
)
)
{
std
:
:
unique_ptr
<
DesktopFrame
>
frame
=
shared_memory_factory_
?
SharedMemoryDesktopFrame
:
:
Create
(
size
shared_memory_factory_
.
get
(
)
)
:
std
:
:
unique_ptr
<
DesktopFrame
>
(
new
BasicDesktopFrame
(
size
)
)
;
queue_
.
ReplaceCurrentFrame
(
SharedDesktopFrame
:
:
Wrap
(
std
:
:
move
(
frame
)
)
)
;
}
}
void
ScreenCapturerWinMagnifier
:
:
StartFallbackCapturer
(
)
{
RTC_DCHECK
(
fallback_capturer_
)
;
if
(
!
fallback_capturer_started_
)
{
fallback_capturer_started_
=
true
;
fallback_capturer_
-
>
Start
(
callback_
)
;
fallback_capturer_
-
>
SelectSource
(
current_screen_id_
)
;
}
}
}
