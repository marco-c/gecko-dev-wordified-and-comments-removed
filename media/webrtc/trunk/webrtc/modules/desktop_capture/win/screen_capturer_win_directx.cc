#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
screen_capturer_win_directx
.
h
"
#
include
<
utility
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
base
/
timeutils
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_frame
.
h
"
namespace
webrtc
{
using
Microsoft
:
:
WRL
:
:
ComPtr
;
bool
ScreenCapturerWinDirectx
:
:
IsSupported
(
)
{
return
DxgiDuplicatorController
:
:
Instance
(
)
-
>
IsSupported
(
)
;
}
bool
ScreenCapturerWinDirectx
:
:
RetrieveD3dInfo
(
D3dInfo
*
info
)
{
return
DxgiDuplicatorController
:
:
Instance
(
)
-
>
RetrieveD3dInfo
(
info
)
;
}
ScreenCapturerWinDirectx
:
:
ScreenCapturerWinDirectx
(
const
DesktopCaptureOptions
&
options
)
:
callback_
(
nullptr
)
{
}
ScreenCapturerWinDirectx
:
:
~
ScreenCapturerWinDirectx
(
)
{
}
void
ScreenCapturerWinDirectx
:
:
Start
(
Callback
*
callback
)
{
RTC_DCHECK
(
!
callback_
)
;
RTC_DCHECK
(
callback
)
;
callback_
=
callback
;
}
void
ScreenCapturerWinDirectx
:
:
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
{
shared_memory_factory_
=
std
:
:
move
(
shared_memory_factory
)
;
}
DesktopSize
ScreenCapturerWinDirectx
:
:
SelectedDesktopSize
(
)
const
{
if
(
current_screen_id_
=
=
kFullDesktopScreenId
)
{
return
DxgiDuplicatorController
:
:
Instance
(
)
-
>
desktop_size
(
)
;
}
return
DxgiDuplicatorController
:
:
Instance
(
)
-
>
ScreenRect
(
current_screen_id_
)
.
size
(
)
;
}
void
ScreenCapturerWinDirectx
:
:
CaptureFrame
(
)
{
RTC_DCHECK
(
callback_
)
;
int64_t
capture_start_time_nanos
=
rtc
:
:
TimeNanos
(
)
;
frames_
.
MoveToNextFrame
(
)
;
if
(
!
frames_
.
current_frame
(
)
)
{
std
:
:
unique_ptr
<
DesktopFrame
>
new_frame
;
if
(
shared_memory_factory_
)
{
new_frame
=
SharedMemoryDesktopFrame
:
:
Create
(
SelectedDesktopSize
(
)
shared_memory_factory_
.
get
(
)
)
;
}
else
{
new_frame
.
reset
(
new
BasicDesktopFrame
(
SelectedDesktopSize
(
)
)
)
;
}
if
(
!
new_frame
)
{
LOG
(
LS_ERROR
)
<
<
"
Failed
to
allocate
a
new
DesktopFrame
.
"
;
callback_
-
>
OnCaptureResult
(
Result
:
:
ERROR_PERMANENT
nullptr
)
;
return
;
}
frames_
.
ReplaceCurrentFrame
(
SharedDesktopFrame
:
:
Wrap
(
std
:
:
move
(
new_frame
)
)
)
;
}
if
(
current_screen_id_
=
=
kFullDesktopScreenId
)
{
if
(
!
DxgiDuplicatorController
:
:
Instance
(
)
-
>
Duplicate
(
&
context_
frames_
.
current_frame
(
)
)
)
{
frames_
.
Reset
(
)
;
callback_
-
>
OnCaptureResult
(
Result
:
:
ERROR_TEMPORARY
nullptr
)
;
return
;
}
}
else
{
if
(
!
DxgiDuplicatorController
:
:
Instance
(
)
-
>
DuplicateMonitor
(
&
context_
current_screen_id_
frames_
.
current_frame
(
)
)
)
{
frames_
.
Reset
(
)
;
if
(
current_screen_id_
>
=
DxgiDuplicatorController
:
:
Instance
(
)
-
>
ScreenCount
(
)
)
{
callback_
-
>
OnCaptureResult
(
Result
:
:
ERROR_PERMANENT
nullptr
)
;
}
else
{
callback_
-
>
OnCaptureResult
(
Result
:
:
ERROR_TEMPORARY
nullptr
)
;
}
return
;
}
}
std
:
:
unique_ptr
<
DesktopFrame
>
result
=
frames_
.
current_frame
(
)
-
>
Share
(
)
;
result
-
>
set_capture_time_ms
(
(
rtc
:
:
TimeNanos
(
)
-
capture_start_time_nanos
)
/
rtc
:
:
kNumNanosecsPerMillisec
)
;
callback_
-
>
OnCaptureResult
(
Result
:
:
SUCCESS
std
:
:
move
(
result
)
)
;
}
bool
ScreenCapturerWinDirectx
:
:
GetSourceList
(
SourceList
*
sources
)
{
int
screen_count
=
DxgiDuplicatorController
:
:
Instance
(
)
-
>
ScreenCount
(
)
;
for
(
int
i
=
0
;
i
<
screen_count
;
i
+
+
)
{
sources
-
>
push_back
(
{
i
}
)
;
}
return
true
;
}
bool
ScreenCapturerWinDirectx
:
:
SelectSource
(
SourceId
id
)
{
if
(
id
=
=
current_screen_id_
)
{
return
true
;
}
if
(
id
=
=
kFullDesktopScreenId
)
{
current_screen_id_
=
id
;
return
true
;
}
int
screen_count
=
DxgiDuplicatorController
:
:
Instance
(
)
-
>
ScreenCount
(
)
;
if
(
id
>
=
0
&
&
id
<
screen_count
)
{
current_screen_id_
=
id
;
return
true
;
}
return
false
;
}
}
