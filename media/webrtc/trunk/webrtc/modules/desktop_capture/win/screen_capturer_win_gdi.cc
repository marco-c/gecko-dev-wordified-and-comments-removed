#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
screen_capturer_win_gdi
.
h
"
#
include
<
utility
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
base
/
timeutils
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_frame
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_frame_win
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_region
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
mouse_cursor
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
cursor
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
desktop
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
screen_capture_utils
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
logging
.
h
"
namespace
webrtc
{
namespace
{
const
UINT
DWM_EC_DISABLECOMPOSITION
=
0
;
const
UINT
DWM_EC_ENABLECOMPOSITION
=
1
;
const
wchar_t
kDwmapiLibraryName
[
]
=
L
"
dwmapi
.
dll
"
;
}
ScreenCapturerWinGdi
:
:
ScreenCapturerWinGdi
(
const
DesktopCaptureOptions
&
options
)
{
if
(
options
.
disable_effects
(
)
)
{
if
(
!
dwmapi_library_
)
dwmapi_library_
=
LoadLibrary
(
kDwmapiLibraryName
)
;
if
(
dwmapi_library_
)
{
composition_func_
=
reinterpret_cast
<
DwmEnableCompositionFunc
>
(
GetProcAddress
(
dwmapi_library_
"
DwmEnableComposition
"
)
)
;
}
}
}
ScreenCapturerWinGdi
:
:
~
ScreenCapturerWinGdi
(
)
{
if
(
desktop_dc_
)
ReleaseDC
(
NULL
desktop_dc_
)
;
if
(
memory_dc_
)
DeleteDC
(
memory_dc_
)
;
if
(
composition_func_
)
(
*
composition_func_
)
(
DWM_EC_ENABLECOMPOSITION
)
;
if
(
dwmapi_library_
)
FreeLibrary
(
dwmapi_library_
)
;
}
void
ScreenCapturerWinGdi
:
:
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
{
shared_memory_factory_
=
std
:
:
move
(
shared_memory_factory
)
;
}
void
ScreenCapturerWinGdi
:
:
CaptureFrame
(
)
{
int64_t
capture_start_time_nanos
=
rtc
:
:
TimeNanos
(
)
;
queue_
.
MoveToNextFrame
(
)
;
RTC_DCHECK
(
!
queue_
.
current_frame
(
)
|
|
!
queue_
.
current_frame
(
)
-
>
IsShared
(
)
)
;
PrepareCaptureResources
(
)
;
if
(
!
CaptureImage
(
)
)
{
callback_
-
>
OnCaptureResult
(
Result
:
:
ERROR_TEMPORARY
nullptr
)
;
return
;
}
std
:
:
unique_ptr
<
DesktopFrame
>
frame
=
queue_
.
current_frame
(
)
-
>
Share
(
)
;
frame
-
>
set_dpi
(
DesktopVector
(
GetDeviceCaps
(
desktop_dc_
LOGPIXELSX
)
GetDeviceCaps
(
desktop_dc_
LOGPIXELSY
)
)
)
;
frame
-
>
mutable_updated_region
(
)
-
>
SetRect
(
DesktopRect
:
:
MakeSize
(
frame
-
>
size
(
)
)
)
;
frame
-
>
set_capture_time_ms
(
(
rtc
:
:
TimeNanos
(
)
-
capture_start_time_nanos
)
/
rtc
:
:
kNumNanosecsPerMillisec
)
;
callback_
-
>
OnCaptureResult
(
Result
:
:
SUCCESS
std
:
:
move
(
frame
)
)
;
}
bool
ScreenCapturerWinGdi
:
:
GetSourceList
(
SourceList
*
sources
)
{
return
webrtc
:
:
GetScreenList
(
sources
)
;
}
bool
ScreenCapturerWinGdi
:
:
SelectSource
(
SourceId
id
)
{
bool
valid
=
IsScreenValid
(
id
&
current_device_key_
)
;
if
(
valid
)
current_screen_id_
=
id
;
return
valid
;
}
void
ScreenCapturerWinGdi
:
:
Start
(
Callback
*
callback
)
{
RTC_DCHECK
(
!
callback_
)
;
RTC_DCHECK
(
callback
)
;
callback_
=
callback
;
if
(
composition_func_
)
(
*
composition_func_
)
(
DWM_EC_DISABLECOMPOSITION
)
;
}
void
ScreenCapturerWinGdi
:
:
PrepareCaptureResources
(
)
{
std
:
:
unique_ptr
<
Desktop
>
input_desktop
(
Desktop
:
:
GetInputDesktop
(
)
)
;
if
(
input_desktop
&
&
!
desktop_
.
IsSame
(
*
input_desktop
)
)
{
if
(
desktop_dc_
)
{
ReleaseDC
(
NULL
desktop_dc_
)
;
desktop_dc_
=
nullptr
;
}
if
(
memory_dc_
)
{
DeleteDC
(
memory_dc_
)
;
memory_dc_
=
nullptr
;
}
desktop_
.
SetThreadDesktop
(
input_desktop
.
release
(
)
)
;
if
(
composition_func_
)
{
(
*
composition_func_
)
(
DWM_EC_DISABLECOMPOSITION
)
;
}
}
DesktopRect
screen_rect
(
DesktopRect
:
:
MakeXYWH
(
GetSystemMetrics
(
SM_XVIRTUALSCREEN
)
GetSystemMetrics
(
SM_YVIRTUALSCREEN
)
GetSystemMetrics
(
SM_CXVIRTUALSCREEN
)
GetSystemMetrics
(
SM_CYVIRTUALSCREEN
)
)
)
;
if
(
!
screen_rect
.
equals
(
desktop_dc_rect_
)
)
{
if
(
desktop_dc_
)
{
ReleaseDC
(
NULL
desktop_dc_
)
;
desktop_dc_
=
nullptr
;
}
if
(
memory_dc_
)
{
DeleteDC
(
memory_dc_
)
;
memory_dc_
=
nullptr
;
}
desktop_dc_rect_
=
DesktopRect
(
)
;
}
if
(
!
desktop_dc_
)
{
RTC_DCHECK
(
!
memory_dc_
)
;
desktop_dc_
=
GetDC
(
nullptr
)
;
RTC_CHECK
(
desktop_dc_
)
;
memory_dc_
=
CreateCompatibleDC
(
desktop_dc_
)
;
RTC_CHECK
(
memory_dc_
)
;
desktop_dc_rect_
=
screen_rect
;
queue_
.
Reset
(
)
;
}
}
bool
ScreenCapturerWinGdi
:
:
CaptureImage
(
)
{
DesktopRect
screen_rect
=
GetScreenRect
(
current_screen_id_
current_device_key_
)
;
if
(
screen_rect
.
is_empty
(
)
)
return
false
;
DesktopSize
size
=
screen_rect
.
size
(
)
;
if
(
!
queue_
.
current_frame
(
)
|
|
!
queue_
.
current_frame
(
)
-
>
size
(
)
.
equals
(
screen_rect
.
size
(
)
)
)
{
RTC_DCHECK
(
desktop_dc_
)
;
RTC_DCHECK
(
memory_dc_
)
;
std
:
:
unique_ptr
<
DesktopFrame
>
buffer
=
DesktopFrameWin
:
:
Create
(
size
shared_memory_factory_
.
get
(
)
desktop_dc_
)
;
if
(
!
buffer
)
return
false
;
queue_
.
ReplaceCurrentFrame
(
SharedDesktopFrame
:
:
Wrap
(
std
:
:
move
(
buffer
)
)
)
;
}
DesktopFrameWin
*
current
=
static_cast
<
DesktopFrameWin
*
>
(
queue_
.
current_frame
(
)
-
>
GetUnderlyingFrame
(
)
)
;
HGDIOBJ
previous_object
=
SelectObject
(
memory_dc_
current
-
>
bitmap
(
)
)
;
if
(
!
previous_object
|
|
previous_object
=
=
HGDI_ERROR
)
{
return
false
;
}
bool
result
=
(
BitBlt
(
memory_dc_
0
0
screen_rect
.
width
(
)
screen_rect
.
height
(
)
desktop_dc_
screen_rect
.
left
(
)
screen_rect
.
top
(
)
SRCCOPY
|
CAPTUREBLT
)
!
=
FALSE
)
;
if
(
!
result
)
{
LOG_GLE
(
LS_WARNING
)
<
<
"
BitBlt
failed
"
;
}
SelectObject
(
memory_dc_
previous_object
)
;
return
result
;
}
}
