#
ifndef
WEBRTC_MODULES_DESKTOP_CAPTURE_WIN_SCREEN_CAPTURER_WIN_DIRECTX_H_
#
define
WEBRTC_MODULES_DESKTOP_CAPTURE_WIN_SCREEN_CAPTURER_WIN_DIRECTX_H_
#
include
<
D3DCommon
.
h
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_region
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
screen_capture_frame_queue
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
shared_desktop_frame
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
dxgi_duplicator_controller
.
h
"
namespace
webrtc
{
class
ScreenCapturerWinDirectx
:
public
DesktopCapturer
{
public
:
using
D3dInfo
=
DxgiDuplicatorController
:
:
D3dInfo
;
static
bool
IsSupported
(
)
;
static
bool
RetrieveD3dInfo
(
D3dInfo
*
info
)
;
explicit
ScreenCapturerWinDirectx
(
const
DesktopCaptureOptions
&
options
)
;
~
ScreenCapturerWinDirectx
(
)
override
;
void
Start
(
Callback
*
callback
)
override
;
void
Stop
(
)
override
;
void
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
override
;
void
CaptureFrame
(
)
override
;
bool
GetSourceList
(
SourceList
*
sources
)
override
;
bool
SelectSource
(
SourceId
id
)
override
;
private
:
DesktopSize
SelectedDesktopSize
(
)
const
;
ScreenCaptureFrameQueue
<
SharedDesktopFrame
>
frames_
;
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory_
;
Callback
*
callback_
=
nullptr
;
DxgiDuplicatorController
:
:
Context
context_
;
SourceId
current_screen_id_
=
kFullDesktopScreenId
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
ScreenCapturerWinDirectx
)
;
}
;
}
#
endif
