#
ifndef
WEBRTC_MODULES_DESKTOP_CAPTURE_WIN_DXGI_DUPLICATOR_CONTROLLER_H_
#
define
WEBRTC_MODULES_DESKTOP_CAPTURE_WIN_DXGI_DUPLICATOR_CONTROLLER_H_
#
include
<
D3DCommon
.
h
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_geometry
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_region
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
shared_desktop_frame
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
d3d_device
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
dxgi_adapter_duplicator
.
h
"
namespace
webrtc
{
class
DxgiDuplicatorController
{
public
:
class
Context
{
public
:
Context
(
)
;
~
Context
(
)
;
private
:
friend
class
DxgiDuplicatorController
;
int
identity_
=
0
;
std
:
:
vector
<
DxgiAdapterDuplicator
:
:
Context
>
contexts_
;
}
;
struct
D3dInfo
{
D3D_FEATURE_LEVEL
min_feature_level
;
D3D_FEATURE_LEVEL
max_feature_level
;
}
;
static
DxgiDuplicatorController
*
Instance
(
)
;
~
DxgiDuplicatorController
(
)
;
bool
IsSupported
(
)
;
bool
RetrieveD3dInfo
(
D3dInfo
*
info
)
;
bool
Duplicate
(
Context
*
context
SharedDesktopFrame
*
target
)
;
bool
DuplicateMonitor
(
Context
*
context
int
monitor_id
SharedDesktopFrame
*
target
)
;
DesktopVector
dpi
(
)
;
DesktopRect
desktop_rect
(
)
;
DesktopSize
desktop_size
(
)
;
DesktopRect
ScreenRect
(
int
id
)
;
int
ScreenCount
(
)
;
private
:
friend
class
Context
;
DxgiDuplicatorController
(
)
;
void
Unregister
(
const
Context
*
const
context
)
;
bool
Initialize
(
)
;
bool
DoInitialize
(
)
;
void
Deinitialize
(
)
;
bool
ContextExpired
(
const
Context
*
const
context
)
const
;
void
Setup
(
Context
*
context
)
;
bool
DoDuplicate
(
Context
*
context
int
monitor_id
SharedDesktopFrame
*
target
)
;
rtc
:
:
CriticalSection
lock_
;
int
identity_
=
0
;
DesktopRect
desktop_rect_
;
DesktopVector
dpi_
;
std
:
:
vector
<
DxgiAdapterDuplicator
>
duplicators_
;
D3dInfo
d3d_info_
;
}
;
}
#
endif
