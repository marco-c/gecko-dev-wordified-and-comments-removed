#
ifndef
WEBRTC_MODULES_DESKTOP_CAPTURE_WIN_DXGI_ADAPTER_DUPLICATOR_H_
#
define
WEBRTC_MODULES_DESKTOP_CAPTURE_WIN_DXGI_ADAPTER_DUPLICATOR_H_
#
include
<
wrl
/
client
.
h
>
#
include
<
vector
>
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_geometry
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_region
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
shared_desktop_frame
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
d3d_device
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
win
/
dxgi_output_duplicator
.
h
"
namespace
webrtc
{
class
DxgiAdapterDuplicator
{
public
:
struct
Context
{
Context
(
)
;
Context
(
const
Context
&
other
)
;
~
Context
(
)
;
std
:
:
vector
<
DxgiOutputDuplicator
:
:
Context
>
contexts
;
}
;
explicit
DxgiAdapterDuplicator
(
const
D3dDevice
&
device
)
;
DxgiAdapterDuplicator
(
DxgiAdapterDuplicator
&
&
other
)
;
~
DxgiAdapterDuplicator
(
)
;
bool
Initialize
(
)
;
bool
Duplicate
(
Context
*
context
SharedDesktopFrame
*
target
)
;
bool
DuplicateMonitor
(
Context
*
context
int
monitor_id
SharedDesktopFrame
*
target
)
;
DesktopRect
desktop_rect
(
)
const
{
return
desktop_rect_
;
}
DesktopRect
ScreenRect
(
int
id
)
const
;
int
screen_count
(
)
const
{
return
static_cast
<
int
>
(
duplicators_
.
size
(
)
)
;
}
private
:
friend
class
DxgiDuplicatorController
;
bool
DoInitialize
(
)
;
void
Setup
(
Context
*
context
)
;
void
Unregister
(
const
Context
*
const
context
)
;
const
D3dDevice
device_
;
std
:
:
vector
<
DxgiOutputDuplicator
>
duplicators_
;
DesktopRect
desktop_rect_
;
}
;
}
#
endif
