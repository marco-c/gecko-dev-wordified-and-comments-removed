#
ifndef
MODULES_DESKTOP_CAPTURE_LINUX_MOUSE_CURSOR_MONITOR_X11_H_
#
define
MODULES_DESKTOP_CAPTURE_LINUX_MOUSE_CURSOR_MONITOR_X11_H_
#
include
<
X11
/
Xlib
.
h
>
#
include
<
memory
>
#
include
"
modules
/
desktop_capture
/
linux
/
shared_x_display
.
h
"
#
include
"
modules
/
desktop_capture
/
mouse_cursor_monitor
.
h
"
namespace
webrtc
{
class
MouseCursorMonitorX11
:
public
MouseCursorMonitor
public
SharedXDisplay
:
:
XEventHandler
{
public
:
MouseCursorMonitorX11
(
const
DesktopCaptureOptions
&
options
Window
window
Window
inner_window
)
;
~
MouseCursorMonitorX11
(
)
override
;
static
MouseCursorMonitor
*
CreateForWindow
(
const
DesktopCaptureOptions
&
options
WindowId
window
)
;
static
MouseCursorMonitor
*
CreateForScreen
(
const
DesktopCaptureOptions
&
options
ScreenId
screen
)
;
static
std
:
:
unique_ptr
<
MouseCursorMonitor
>
Create
(
const
DesktopCaptureOptions
&
options
)
;
void
Init
(
Callback
*
callback
Mode
mode
)
override
;
void
Capture
(
)
override
;
private
:
bool
HandleXEvent
(
const
XEvent
&
event
)
override
;
Display
*
display
(
)
{
return
x_display_
-
>
display
(
)
;
}
void
CaptureCursor
(
)
;
rtc
:
:
scoped_refptr
<
SharedXDisplay
>
x_display_
;
Callback
*
callback_
;
Mode
mode_
;
Window
window_
;
Window
inner_window_
;
bool
have_xfixes_
;
int
xfixes_event_base_
;
int
xfixes_error_base_
;
std
:
:
unique_ptr
<
MouseCursor
>
cursor_shape_
;
}
;
}
#
endif
