#
include
"
webrtc
/
modules
/
desktop_capture
/
fake_desktop_capturer
.
h
"
#
include
<
utility
>
namespace
webrtc
{
FakeDesktopCapturer
:
:
FakeDesktopCapturer
(
)
:
callback_
(
nullptr
)
result_
(
DesktopCapturer
:
:
Result
:
:
SUCCESS
)
generator_
(
nullptr
)
{
}
FakeDesktopCapturer
:
:
~
FakeDesktopCapturer
(
)
=
default
;
void
FakeDesktopCapturer
:
:
set_result
(
DesktopCapturer
:
:
Result
result
)
{
result_
=
result
;
}
void
FakeDesktopCapturer
:
:
set_frame_generator
(
DesktopFrameGenerator
*
generator
)
{
generator_
=
generator
;
}
void
FakeDesktopCapturer
:
:
Start
(
DesktopCapturer
:
:
Callback
*
callback
)
{
callback_
=
callback
;
}
void
FakeDesktopCapturer
:
:
CaptureFrame
(
)
{
if
(
generator_
)
{
std
:
:
unique_ptr
<
DesktopFrame
>
frame
(
generator_
-
>
GetNextFrame
(
shared_memory_factory_
.
get
(
)
)
)
;
if
(
frame
)
{
callback_
-
>
OnCaptureResult
(
result_
std
:
:
move
(
frame
)
)
;
}
else
{
callback_
-
>
OnCaptureResult
(
DesktopCapturer
:
:
Result
:
:
ERROR_TEMPORARY
nullptr
)
;
}
return
;
}
callback_
-
>
OnCaptureResult
(
DesktopCapturer
:
:
Result
:
:
ERROR_PERMANENT
nullptr
)
;
}
void
FakeDesktopCapturer
:
:
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
{
shared_memory_factory_
=
std
:
:
move
(
shared_memory_factory
)
;
}
bool
FakeDesktopCapturer
:
:
GetSourceList
(
DesktopCapturer
:
:
SourceList
*
sources
)
{
sources
-
>
push_back
(
{
kWindowId
"
A
-
Fake
-
DesktopCapturer
-
Window
"
}
)
;
sources
-
>
push_back
(
{
kScreenId
}
)
;
return
true
;
}
bool
FakeDesktopCapturer
:
:
SelectSource
(
DesktopCapturer
:
:
SourceId
id
)
{
return
id
=
=
kWindowId
|
|
id
=
=
kScreenId
|
|
id
=
=
kFullDesktopScreenId
;
}
}
