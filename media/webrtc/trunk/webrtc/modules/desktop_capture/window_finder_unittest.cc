#
include
"
modules
/
desktop_capture
/
window_finder
.
h
"
#
include
<
stdint
.
h
>
#
include
<
memory
>
#
include
"
modules
/
desktop_capture
/
desktop_geometry
.
h
"
#
include
"
modules
/
desktop_capture
/
screen_drawer
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
test
/
gtest
.
h
"
#
if
defined
(
USE_X11
)
#
include
"
modules
/
desktop_capture
/
x11
/
shared_x_display
.
h
"
#
include
"
modules
/
desktop_capture
/
x11
/
x_atom_cache
.
h
"
#
include
"
rtc_base
/
ptr_util
.
h
"
#
endif
#
if
defined
(
WEBRTC_WIN
)
#
include
<
windows
.
h
>
#
include
"
modules
/
desktop_capture
/
window_finder_win
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
window_capture_utils
.
h
"
#
endif
namespace
webrtc
{
namespace
{
#
if
defined
(
WEBRTC_WIN
)
TEST
(
WindowFinderTest
FindConsoleWindow
)
{
std
:
:
unique_ptr
<
ScreenDrawer
>
drawer
=
ScreenDrawer
:
:
Create
(
)
;
const
int
kMaxSize
=
10000
;
system
(
"
mode
1000
1000
"
)
;
const
HWND
console_window
=
GetConsoleWindow
(
)
;
ShowWindow
(
console_window
SW_MAXIMIZE
)
;
MoveWindow
(
console_window
0
0
kMaxSize
kMaxSize
true
)
;
SetWindowPos
(
console_window
HWND_TOPMOST
0
0
0
0
SWP_NOMOVE
|
SWP_NOSIZE
)
;
BringWindowToTop
(
console_window
)
;
WindowFinderWin
finder
;
for
(
int
i
=
0
;
i
<
kMaxSize
;
i
+
+
)
{
const
DesktopVector
spot
(
i
i
)
;
const
HWND
id
=
reinterpret_cast
<
HWND
>
(
finder
.
GetWindowUnderPoint
(
spot
)
)
;
if
(
id
=
=
console_window
)
{
return
;
}
}
FAIL
(
)
;
}
#
else
TEST
(
WindowFinderTest
FindDrawerWindow
)
{
WindowFinder
:
:
Options
options
;
#
if
defined
(
USE_X11
)
std
:
:
unique_ptr
<
XAtomCache
>
cache
;
const
auto
shared_x_display
=
SharedXDisplay
:
:
CreateDefault
(
)
;
if
(
shared_x_display
)
{
cache
=
rtc
:
:
MakeUnique
<
XAtomCache
>
(
shared_x_display
-
>
display
(
)
)
;
options
.
cache
=
cache
.
get
(
)
;
}
#
endif
std
:
:
unique_ptr
<
WindowFinder
>
finder
=
WindowFinder
:
:
Create
(
options
)
;
if
(
!
finder
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
No
WindowFinder
implementation
for
current
platform
.
"
;
return
;
}
std
:
:
unique_ptr
<
ScreenDrawer
>
drawer
=
ScreenDrawer
:
:
Create
(
)
;
if
(
!
drawer
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
No
ScreenDrawer
implementation
for
current
platform
.
"
;
return
;
}
if
(
drawer
-
>
window_id
(
)
=
=
kNullWindowId
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
ScreenDrawer
implementation
for
current
platform
does
"
"
create
a
window
.
"
;
return
;
}
const
DesktopRect
region
=
drawer
-
>
DrawableRegion
(
)
;
if
(
region
.
is_empty
(
)
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
ScreenDrawer
:
:
DrawableRegion
(
)
is
too
small
for
the
"
"
WindowFinderTest
.
"
;
return
;
}
for
(
int
i
=
0
;
i
<
region
.
width
(
)
;
i
+
+
)
{
const
DesktopVector
spot
(
region
.
left
(
)
+
i
region
.
top
(
)
+
i
*
region
.
height
(
)
/
region
.
width
(
)
)
;
const
WindowId
id
=
finder
-
>
GetWindowUnderPoint
(
spot
)
;
if
(
id
=
=
drawer
-
>
window_id
(
)
)
{
return
;
}
}
FAIL
(
)
;
}
#
endif
TEST
(
WindowFinderTest
ShouldReturnNullWindowIfSpotIsOutOfScreen
)
{
WindowFinder
:
:
Options
options
;
#
if
defined
(
USE_X11
)
std
:
:
unique_ptr
<
XAtomCache
>
cache
;
const
auto
shared_x_display
=
SharedXDisplay
:
:
CreateDefault
(
)
;
if
(
shared_x_display
)
{
cache
=
rtc
:
:
MakeUnique
<
XAtomCache
>
(
shared_x_display
-
>
display
(
)
)
;
options
.
cache
=
cache
.
get
(
)
;
}
#
endif
std
:
:
unique_ptr
<
WindowFinder
>
finder
=
WindowFinder
:
:
Create
(
options
)
;
if
(
!
finder
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
No
WindowFinder
implementation
for
current
platform
.
"
;
return
;
}
ASSERT_EQ
(
kNullWindowId
finder
-
>
GetWindowUnderPoint
(
DesktopVector
(
INT16_MAX
INT16_MAX
)
)
)
;
ASSERT_EQ
(
kNullWindowId
finder
-
>
GetWindowUnderPoint
(
DesktopVector
(
INT16_MAX
INT16_MIN
)
)
)
;
ASSERT_EQ
(
kNullWindowId
finder
-
>
GetWindowUnderPoint
(
DesktopVector
(
INT16_MIN
INT16_MAX
)
)
)
;
ASSERT_EQ
(
kNullWindowId
finder
-
>
GetWindowUnderPoint
(
DesktopVector
(
INT16_MIN
INT16_MIN
)
)
)
;
}
}
}
