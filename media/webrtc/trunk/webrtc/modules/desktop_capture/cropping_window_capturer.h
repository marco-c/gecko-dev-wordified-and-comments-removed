#
ifndef
WEBRTC_MODULES_DESKTOP_CAPTURE_CROPPING_WINDOW_CAPTURER_H_
#
define
WEBRTC_MODULES_DESKTOP_CAPTURE_CROPPING_WINDOW_CAPTURER_H_
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
screen_capturer
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
window_capturer
.
h
"
namespace
webrtc
{
class
CroppingWindowCapturer
:
public
WindowCapturer
public
DesktopCapturer
:
:
Callback
{
public
:
static
WindowCapturer
*
Create
(
const
DesktopCaptureOptions
&
options
)
;
virtual
~
CroppingWindowCapturer
(
)
;
void
Start
(
DesktopCapturer
:
:
Callback
*
callback
)
override
;
void
Stop
(
)
override
;
void
Capture
(
const
DesktopRegion
&
region
)
override
;
void
SetExcludedWindow
(
WindowId
window
)
override
;
bool
GetWindowList
(
WindowList
*
windows
)
override
;
bool
SelectWindow
(
WindowId
id
)
override
;
bool
BringSelectedWindowToFront
(
)
override
;
SharedMemory
*
CreateSharedMemory
(
size_t
size
)
override
;
void
OnCaptureCompleted
(
DesktopFrame
*
frame
)
override
;
protected
:
explicit
CroppingWindowCapturer
(
const
DesktopCaptureOptions
&
options
)
;
virtual
bool
ShouldUseScreenCapturer
(
)
=
0
;
virtual
DesktopRect
GetWindowRectInVirtualScreen
(
)
=
0
;
WindowId
selected_window
(
)
const
{
return
selected_window_
;
}
WindowId
excluded_window
(
)
const
{
return
excluded_window_
;
}
private
:
DesktopCaptureOptions
options_
;
DesktopCapturer
:
:
Callback
*
callback_
;
rtc
:
:
scoped_ptr
<
WindowCapturer
>
window_capturer_
;
rtc
:
:
scoped_ptr
<
ScreenCapturer
>
screen_capturer_
;
WindowId
selected_window_
;
WindowId
excluded_window_
;
}
;
}
#
endif
