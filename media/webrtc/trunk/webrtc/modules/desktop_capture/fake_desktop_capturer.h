#
ifndef
WEBRTC_MODULES_DESKTOP_CAPTURE_FAKE_DESKTOP_CAPTURER_H_
#
define
WEBRTC_MODULES_DESKTOP_CAPTURE_FAKE_DESKTOP_CAPTURER_H_
#
include
<
memory
>
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_capture_types
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_frame_generator
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
shared_memory
.
h
"
namespace
webrtc
{
class
FakeDesktopCapturer
:
public
DesktopCapturer
{
public
:
FakeDesktopCapturer
(
)
;
~
FakeDesktopCapturer
(
)
override
;
void
set_result
(
DesktopCapturer
:
:
Result
result
)
;
void
set_frame_generator
(
DesktopFrameGenerator
*
generator
)
;
void
Start
(
DesktopCapturer
:
:
Callback
*
callback
)
override
;
void
CaptureFrame
(
)
override
;
void
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
override
;
bool
GetSourceList
(
DesktopCapturer
:
:
SourceList
*
sources
)
override
;
bool
SelectSource
(
DesktopCapturer
:
:
SourceId
id
)
override
;
private
:
static
constexpr
DesktopCapturer
:
:
SourceId
kWindowId
=
1378277495
;
static
constexpr
DesktopCapturer
:
:
SourceId
kScreenId
=
1378277496
;
DesktopCapturer
:
:
Callback
*
callback_
;
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory_
;
DesktopCapturer
:
:
Result
result_
;
DesktopFrameGenerator
*
generator_
;
}
;
}
#
endif
