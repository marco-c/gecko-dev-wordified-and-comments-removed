#
ifndef
WEBRTC_MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURE_OPTIONS_H_
#
define
WEBRTC_MODULES_DESKTOP_CAPTURE_DESKTOP_CAPTURE_OPTIONS_H_
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
if
defined
(
USE_X11
)
#
include
"
webrtc
/
modules
/
desktop_capture
/
x11
/
shared_x_display
.
h
"
#
endif
#
if
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_IOS
)
#
include
"
webrtc
/
modules
/
desktop_capture
/
mac
/
desktop_configuration_monitor
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
mac
/
full_screen_chrome_window_detector
.
h
"
#
endif
namespace
webrtc
{
class
DesktopCaptureOptions
{
public
:
static
DesktopCaptureOptions
CreateDefault
(
)
;
DesktopCaptureOptions
(
)
;
DesktopCaptureOptions
(
const
DesktopCaptureOptions
&
options
)
;
DesktopCaptureOptions
(
DesktopCaptureOptions
&
&
options
)
;
~
DesktopCaptureOptions
(
)
;
DesktopCaptureOptions
&
operator
=
(
const
DesktopCaptureOptions
&
options
)
;
DesktopCaptureOptions
&
operator
=
(
DesktopCaptureOptions
&
&
options
)
;
#
if
defined
(
USE_X11
)
SharedXDisplay
*
x_display
(
)
const
{
return
x_display_
;
}
void
set_x_display
(
rtc
:
:
scoped_refptr
<
SharedXDisplay
>
x_display
)
{
x_display_
=
x_display
;
}
#
endif
#
if
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_IOS
)
DesktopConfigurationMonitor
*
configuration_monitor
(
)
const
{
return
configuration_monitor_
;
}
void
set_configuration_monitor
(
rtc
:
:
scoped_refptr
<
DesktopConfigurationMonitor
>
m
)
{
configuration_monitor_
=
m
;
}
FullScreenChromeWindowDetector
*
full_screen_chrome_window_detector
(
)
const
{
return
full_screen_window_detector_
;
}
void
set_full_screen_chrome_window_detector
(
rtc
:
:
scoped_refptr
<
FullScreenChromeWindowDetector
>
detector
)
{
full_screen_window_detector_
=
detector
;
}
#
endif
bool
use_update_notifications
(
)
const
{
return
use_update_notifications_
;
}
void
set_use_update_notifications
(
bool
use_update_notifications
)
{
use_update_notifications_
=
use_update_notifications
;
}
bool
disable_effects
(
)
const
{
return
disable_effects_
;
}
void
set_disable_effects
(
bool
disable_effects
)
{
disable_effects_
=
disable_effects
;
}
bool
detect_updated_region
(
)
const
{
return
detect_updated_region_
;
}
void
set_detect_updated_region
(
bool
detect_updated_region
)
{
detect_updated_region_
=
detect_updated_region
;
}
#
if
defined
(
WEBRTC_WIN
)
bool
allow_use_magnification_api
(
)
const
{
return
allow_use_magnification_api_
;
}
void
set_allow_use_magnification_api
(
bool
allow
)
{
allow_use_magnification_api_
=
allow
;
}
bool
allow_directx_capturer
(
)
const
{
return
allow_directx_capturer_
;
}
void
set_allow_directx_capturer
(
bool
enabled
)
{
allow_directx_capturer_
=
enabled
;
}
#
endif
private
:
#
if
defined
(
USE_X11
)
rtc
:
:
scoped_refptr
<
SharedXDisplay
>
x_display_
;
#
endif
#
if
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_IOS
)
rtc
:
:
scoped_refptr
<
DesktopConfigurationMonitor
>
configuration_monitor_
;
rtc
:
:
scoped_refptr
<
FullScreenChromeWindowDetector
>
full_screen_window_detector_
;
#
endif
#
if
defined
(
WEBRTC_WIN
)
bool
allow_use_magnification_api_
=
false
;
bool
allow_directx_capturer_
=
false
;
#
endif
#
if
defined
(
USE_X11
)
bool
use_update_notifications_
=
false
;
#
else
bool
use_update_notifications_
=
true
;
#
endif
bool
disable_effects_
=
true
;
bool
detect_updated_region_
=
false
;
}
;
}
#
endif
