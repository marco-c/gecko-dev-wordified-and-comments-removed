#
include
"
webrtc
/
modules
/
desktop_capture
/
mac
/
window_list_utils
.
h
"
#
include
<
ApplicationServices
/
ApplicationServices
.
h
>
#
include
"
webrtc
/
base
/
macutils
.
h
"
namespace
webrtc
{
bool
GetWindowList
(
DesktopCapturer
:
:
SourceList
*
windows
bool
ignore_minimized
)
{
CFArrayRef
window_array
=
CGWindowListCopyWindowInfo
(
kCGWindowListOptionOnScreenOnly
|
kCGWindowListExcludeDesktopElements
kCGNullWindowID
)
;
if
(
!
window_array
)
return
false
;
MacDesktopConfiguration
desktop_config
;
if
(
ignore_minimized
)
{
desktop_config
=
MacDesktopConfiguration
:
:
GetCurrent
(
MacDesktopConfiguration
:
:
TopLeftOrigin
)
;
}
CFIndex
count
=
CFArrayGetCount
(
window_array
)
;
for
(
CFIndex
i
=
0
;
i
<
count
;
+
+
i
)
{
CFDictionaryRef
window
=
reinterpret_cast
<
CFDictionaryRef
>
(
CFArrayGetValueAtIndex
(
window_array
i
)
)
;
CFStringRef
window_title
=
reinterpret_cast
<
CFStringRef
>
(
CFDictionaryGetValue
(
window
kCGWindowName
)
)
;
CFNumberRef
window_id
=
reinterpret_cast
<
CFNumberRef
>
(
CFDictionaryGetValue
(
window
kCGWindowNumber
)
)
;
CFNumberRef
window_layer
=
reinterpret_cast
<
CFNumberRef
>
(
CFDictionaryGetValue
(
window
kCGWindowLayer
)
)
;
if
(
window_title
&
&
window_id
&
&
window_layer
)
{
int
layer
;
CFNumberGetValue
(
window_layer
kCFNumberIntType
&
layer
)
;
if
(
layer
!
=
0
)
continue
;
int
id
;
CFNumberGetValue
(
window_id
kCFNumberIntType
&
id
)
;
if
(
ignore_minimized
&
&
IsWindowMinimized
(
id
)
&
&
!
IsWindowFullScreen
(
desktop_config
window
)
)
{
continue
;
}
DesktopCapturer
:
:
Source
window
;
window
.
id
=
id
;
if
(
!
rtc
:
:
ToUtf8
(
window_title
&
(
window
.
title
)
)
|
|
window
.
title
.
empty
(
)
)
{
continue
;
}
windows
-
>
push_back
(
window
)
;
}
}
CFRelease
(
window_array
)
;
return
true
;
}
bool
IsWindowFullScreen
(
const
MacDesktopConfiguration
&
desktop_config
CFDictionaryRef
window
)
{
bool
fullscreen
=
false
;
CFDictionaryRef
bounds_ref
=
reinterpret_cast
<
CFDictionaryRef
>
(
CFDictionaryGetValue
(
window
kCGWindowBounds
)
)
;
CGRect
bounds
;
if
(
bounds_ref
&
&
CGRectMakeWithDictionaryRepresentation
(
bounds_ref
&
bounds
)
)
{
for
(
MacDisplayConfigurations
:
:
const_iterator
it
=
desktop_config
.
displays
.
begin
(
)
;
it
!
=
desktop_config
.
displays
.
end
(
)
;
+
+
it
)
{
if
(
it
-
>
bounds
.
equals
(
DesktopRect
:
:
MakeXYWH
(
bounds
.
origin
.
x
bounds
.
origin
.
y
bounds
.
size
.
width
bounds
.
size
.
height
)
)
)
{
fullscreen
=
true
;
break
;
}
}
}
return
fullscreen
;
}
bool
IsWindowMinimized
(
CGWindowID
id
)
{
CFArrayRef
window_id_array
=
CFArrayCreate
(
NULL
reinterpret_cast
<
const
void
*
*
>
(
&
id
)
1
NULL
)
;
CFArrayRef
window_array
=
CGWindowListCreateDescriptionFromArray
(
window_id_array
)
;
bool
minimized
=
false
;
if
(
window_array
&
&
CFArrayGetCount
(
window_array
)
)
{
CFDictionaryRef
window
=
reinterpret_cast
<
CFDictionaryRef
>
(
CFArrayGetValueAtIndex
(
window_array
0
)
)
;
CFBooleanRef
on_screen
=
reinterpret_cast
<
CFBooleanRef
>
(
CFDictionaryGetValue
(
window
kCGWindowIsOnscreen
)
)
;
minimized
=
!
on_screen
;
}
CFRelease
(
window_id_array
)
;
CFRelease
(
window_array
)
;
return
minimized
;
}
}
