#
ifndef
WEBRTC_MODULES_DESKTOP_CAPTURE_DESKTOP_AND_CURSOR_COMPOSER_H_
#
define
WEBRTC_MODULES_DESKTOP_CAPTURE_DESKTOP_AND_CURSOR_COMPOSER_H_
#
include
<
memory
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
webrtc
/
modules
/
desktop_capture
/
mouse_cursor_monitor
.
h
"
namespace
webrtc
{
class
DesktopAndCursorComposer
:
public
DesktopCapturer
public
DesktopCapturer
:
:
Callback
public
MouseCursorMonitor
:
:
Callback
{
public
:
DesktopAndCursorComposer
(
DesktopCapturer
*
desktop_capturer
MouseCursorMonitor
*
mouse_monitor
)
;
~
DesktopAndCursorComposer
(
)
override
;
void
Start
(
DesktopCapturer
:
:
Callback
*
callback
)
override
;
void
Stop
(
)
override
;
void
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
override
;
void
CaptureFrame
(
)
override
;
void
SetExcludedWindow
(
WindowId
window
)
override
;
bool
FocusOnSelectedSource
(
)
override
;
private
:
void
OnCaptureResult
(
DesktopCapturer
:
:
Result
result
std
:
:
unique_ptr
<
DesktopFrame
>
frame
)
override
;
void
OnMouseCursor
(
MouseCursor
*
cursor
)
override
;
void
OnMouseCursorPosition
(
MouseCursorMonitor
:
:
CursorState
state
const
DesktopVector
&
position
)
override
;
std
:
:
unique_ptr
<
DesktopCapturer
>
desktop_capturer_
;
std
:
:
unique_ptr
<
MouseCursorMonitor
>
mouse_monitor_
;
DesktopCapturer
:
:
Callback
*
callback_
;
std
:
:
unique_ptr
<
MouseCursor
>
cursor_
;
MouseCursorMonitor
:
:
CursorState
cursor_state_
;
DesktopVector
cursor_position_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
DesktopAndCursorComposer
)
;
}
;
}
#
endif
