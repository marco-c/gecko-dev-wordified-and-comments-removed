#
include
<
memory
>
#
include
<
utility
>
#
include
"
modules
/
desktop_capture
/
blank_detector_desktop_capturer_wrapper
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
modules
/
desktop_capture
/
fallback_desktop_capturer_wrapper
.
h
"
#
include
"
modules
/
desktop_capture
/
rgba_color
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
screen_capturer_win_directx
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
screen_capturer_win_gdi
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
screen_capturer_win_magnifier
.
h
"
namespace
webrtc
{
namespace
{
std
:
:
unique_ptr
<
DesktopCapturer
>
CreateScreenCapturerWinDirectx
(
)
{
std
:
:
unique_ptr
<
DesktopCapturer
>
capturer
(
new
ScreenCapturerWinDirectx
(
)
)
;
capturer
.
reset
(
new
BlankDetectorDesktopCapturerWrapper
(
std
:
:
move
(
capturer
)
RgbaColor
(
0
0
0
0
)
)
)
;
return
capturer
;
}
}
std
:
:
unique_ptr
<
DesktopCapturer
>
DesktopCapturer
:
:
CreateRawScreenCapturer
(
const
DesktopCaptureOptions
&
options
)
{
std
:
:
unique_ptr
<
DesktopCapturer
>
capturer
(
new
ScreenCapturerWinGdi
(
options
)
)
;
#
ifdef
CAPTURE_ALLOW_DIRECTX
if
(
options
.
allow_directx_capturer
(
)
)
{
auto
dxgi_duplicator_controller
=
DxgiDuplicatorController
:
:
Instance
(
)
;
if
(
ScreenCapturerWinDirectx
:
:
IsSupported
(
)
)
{
capturer
.
reset
(
new
FallbackDesktopCapturerWrapper
(
CreateScreenCapturerWinDirectx
(
)
std
:
:
move
(
capturer
)
)
)
;
}
}
#
endif
if
(
options
.
allow_use_magnification_api
(
)
)
{
capturer
.
reset
(
new
FallbackDesktopCapturerWrapper
(
std
:
:
unique_ptr
<
DesktopCapturer
>
(
new
ScreenCapturerWinMagnifier
(
)
)
std
:
:
move
(
capturer
)
)
)
;
}
return
capturer
;
}
}
