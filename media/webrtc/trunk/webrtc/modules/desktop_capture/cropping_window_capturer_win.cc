#
include
"
modules
/
desktop_capture
/
cropping_window_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
screen_capture_utils
.
h
"
#
include
"
modules
/
desktop_capture
/
win
/
window_capture_utils
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
win32
.
h
"
namespace
webrtc
{
namespace
{
struct
TopWindowVerifierContext
{
TopWindowVerifierContext
(
HWND
selected_window
HWND
excluded_window
DesktopRect
selected_window_rect
)
:
selected_window
(
selected_window
)
excluded_window
(
excluded_window
)
selected_window_rect
(
selected_window_rect
)
is_top_window
(
false
)
{
RTC_DCHECK_NE
(
selected_window
excluded_window
)
;
}
const
HWND
selected_window
;
const
HWND
excluded_window
;
const
DesktopRect
selected_window_rect
;
bool
is_top_window
;
}
;
BOOL
CALLBACK
TopWindowVerifier
(
HWND
hwnd
LPARAM
param
)
{
TopWindowVerifierContext
*
context
=
reinterpret_cast
<
TopWindowVerifierContext
*
>
(
param
)
;
if
(
hwnd
=
=
context
-
>
selected_window
)
{
context
-
>
is_top_window
=
true
;
return
FALSE
;
}
if
(
hwnd
=
=
context
-
>
excluded_window
)
{
return
TRUE
;
}
if
(
IsIconic
(
hwnd
)
|
|
!
IsWindowVisible
(
hwnd
)
)
{
return
TRUE
;
}
if
(
GetAncestor
(
hwnd
GA_ROOT
)
=
=
context
-
>
selected_window
)
{
return
TRUE
;
}
const
size_t
kTitleLength
=
32
;
WCHAR
window_title
[
kTitleLength
]
;
GetWindowText
(
hwnd
window_title
kTitleLength
)
;
if
(
wcsnlen_s
(
window_title
kTitleLength
)
=
=
0
)
{
DWORD
enumerated_window_process_id
;
DWORD
selected_window_process_id
;
GetWindowThreadProcessId
(
hwnd
&
enumerated_window_process_id
)
;
GetWindowThreadProcessId
(
context
-
>
selected_window
&
selected_window_process_id
)
;
if
(
selected_window_process_id
=
=
enumerated_window_process_id
)
{
return
TRUE
;
}
}
DesktopRect
content_rect
;
if
(
!
GetWindowContentRect
(
hwnd
&
content_rect
)
)
{
context
-
>
is_top_window
=
false
;
return
FALSE
;
}
content_rect
.
IntersectWith
(
context
-
>
selected_window_rect
)
;
if
(
!
content_rect
.
is_empty
(
)
)
{
context
-
>
is_top_window
=
false
;
return
FALSE
;
}
return
TRUE
;
}
class
CroppingWindowCapturerWin
:
public
CroppingWindowCapturer
{
public
:
CroppingWindowCapturerWin
(
const
DesktopCaptureOptions
&
options
)
:
CroppingWindowCapturer
(
options
)
{
}
private
:
bool
ShouldUseScreenCapturer
(
)
override
;
DesktopRect
GetWindowRectInVirtualScreen
(
)
override
;
DesktopRect
window_region_rect_
;
AeroChecker
aero_checker_
;
}
;
bool
CroppingWindowCapturerWin
:
:
ShouldUseScreenCapturer
(
)
{
if
(
!
rtc
:
:
IsWindows8OrLater
(
)
&
&
aero_checker_
.
IsAeroEnabled
(
)
)
{
return
false
;
}
const
HWND
selected
=
reinterpret_cast
<
HWND
>
(
selected_window
(
)
)
;
if
(
IsIconic
(
selected
)
|
|
!
IsWindowVisible
(
selected
)
)
{
return
false
;
}
const
LONG
window_ex_style
=
GetWindowLong
(
selected
GWL_EXSTYLE
)
;
if
(
window_ex_style
&
WS_EX_LAYERED
)
{
COLORREF
color_ref_key
=
0
;
BYTE
alpha
=
0
;
DWORD
flags
=
0
;
if
(
!
GetLayeredWindowAttributes
(
selected
&
color_ref_key
&
alpha
&
flags
)
)
return
false
;
if
(
(
flags
&
LWA_COLORKEY
)
|
|
(
(
flags
&
LWA_ALPHA
)
&
&
(
alpha
<
255
)
)
)
{
return
false
;
}
}
if
(
!
GetWindowRect
(
selected
&
window_region_rect_
)
)
{
return
false
;
}
DesktopRect
content_rect
;
if
(
!
GetWindowContentRect
(
selected
&
content_rect
)
)
{
return
false
;
}
DesktopRect
region_rect
;
const
int
region_type
=
GetWindowRegionTypeWithBoundary
(
selected
&
region_rect
)
;
if
(
region_type
=
=
COMPLEXREGION
|
|
region_type
=
=
NULLREGION
)
{
return
false
;
}
if
(
region_type
=
=
SIMPLEREGION
)
{
region_rect
.
Translate
(
window_region_rect_
.
left
(
)
window_region_rect_
.
top
(
)
)
;
window_region_rect_
.
IntersectWith
(
region_rect
)
;
content_rect
.
IntersectWith
(
region_rect
)
;
}
if
(
!
GetFullscreenRect
(
)
.
ContainsRect
(
content_rect
)
)
{
return
false
;
}
TopWindowVerifierContext
context
(
selected
reinterpret_cast
<
HWND
>
(
excluded_window
(
)
)
content_rect
)
;
const
LPARAM
enum_param
=
reinterpret_cast
<
LPARAM
>
(
&
context
)
;
EnumWindows
(
&
TopWindowVerifier
enum_param
)
;
if
(
!
context
.
is_top_window
)
{
return
false
;
}
EnumChildWindows
(
selected
&
TopWindowVerifier
enum_param
)
;
return
context
.
is_top_window
;
}
DesktopRect
CroppingWindowCapturerWin
:
:
GetWindowRectInVirtualScreen
(
)
{
DesktopRect
window_rect
;
HWND
hwnd
=
reinterpret_cast
<
HWND
>
(
selected_window
(
)
)
;
if
(
!
GetCroppedWindowRect
(
hwnd
&
window_rect
nullptr
)
)
{
RTC_LOG
(
LS_WARNING
)
<
<
"
Failed
to
get
window
info
:
"
<
<
GetLastError
(
)
;
return
window_rect
;
}
window_rect
.
IntersectWith
(
window_region_rect_
)
;
DesktopRect
screen_rect
(
GetFullscreenRect
(
)
)
;
window_rect
.
IntersectWith
(
screen_rect
)
;
window_rect
.
Translate
(
-
screen_rect
.
left
(
)
-
screen_rect
.
top
(
)
)
;
return
window_rect
;
}
}
std
:
:
unique_ptr
<
DesktopCapturer
>
CroppingWindowCapturer
:
:
CreateCapturer
(
const
DesktopCaptureOptions
&
options
)
{
return
std
:
:
unique_ptr
<
DesktopCapturer
>
(
new
CroppingWindowCapturerWin
(
options
)
)
;
}
}
