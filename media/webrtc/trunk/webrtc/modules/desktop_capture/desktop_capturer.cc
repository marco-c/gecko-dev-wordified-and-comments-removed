#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capture_options
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_capturer_differ_wrapper
.
h
"
namespace
webrtc
{
DesktopCapturer
:
:
~
DesktopCapturer
(
)
=
default
;
void
DesktopCapturer
:
:
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
{
}
void
DesktopCapturer
:
:
SetExcludedWindow
(
WindowId
window
)
{
}
bool
DesktopCapturer
:
:
GetSourceList
(
SourceList
*
sources
)
{
return
true
;
}
bool
DesktopCapturer
:
:
SelectSource
(
SourceId
id
)
{
return
false
;
}
bool
DesktopCapturer
:
:
FocusOnSelectedSource
(
)
{
return
false
;
}
bool
DesktopCapturer
:
:
IsOccluded
(
const
DesktopVector
&
pos
)
{
return
false
;
}
std
:
:
unique_ptr
<
DesktopCapturer
>
DesktopCapturer
:
:
CreateWindowCapturer
(
const
DesktopCaptureOptions
&
options
)
{
std
:
:
unique_ptr
<
DesktopCapturer
>
capturer
=
CreateRawWindowCapturer
(
options
)
;
if
(
capturer
&
&
options
.
detect_updated_region
(
)
)
{
capturer
.
reset
(
new
DesktopCapturerDifferWrapper
(
std
:
:
move
(
capturer
)
)
)
;
}
return
capturer
;
}
std
:
:
unique_ptr
<
DesktopCapturer
>
DesktopCapturer
:
:
CreateScreenCapturer
(
const
DesktopCaptureOptions
&
options
)
{
std
:
:
unique_ptr
<
DesktopCapturer
>
capturer
=
CreateRawScreenCapturer
(
options
)
;
if
(
capturer
&
&
options
.
detect_updated_region
(
)
)
{
capturer
.
reset
(
new
DesktopCapturerDifferWrapper
(
std
:
:
move
(
capturer
)
)
)
;
}
return
capturer
;
}
}
