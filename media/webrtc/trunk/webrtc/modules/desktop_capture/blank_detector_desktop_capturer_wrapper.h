#
ifndef
MODULES_DESKTOP_CAPTURE_BLANK_DETECTOR_DESKTOP_CAPTURER_WRAPPER_H_
#
define
MODULES_DESKTOP_CAPTURE_BLANK_DETECTOR_DESKTOP_CAPTURER_WRAPPER_H_
#
include
<
memory
>
#
include
"
modules
/
desktop_capture
/
desktop_capturer
.
h
"
#
include
"
modules
/
desktop_capture
/
rgba_color
.
h
"
namespace
webrtc
{
class
BlankDetectorDesktopCapturerWrapper
final
:
public
DesktopCapturer
public
DesktopCapturer
:
:
Callback
{
public
:
BlankDetectorDesktopCapturerWrapper
(
std
:
:
unique_ptr
<
DesktopCapturer
>
capturer
RgbaColor
blank_pixel
)
;
~
BlankDetectorDesktopCapturerWrapper
(
)
override
;
void
Start
(
DesktopCapturer
:
:
Callback
*
callback
)
override
;
void
SetSharedMemoryFactory
(
std
:
:
unique_ptr
<
SharedMemoryFactory
>
shared_memory_factory
)
override
;
void
CaptureFrame
(
)
override
;
void
SetExcludedWindow
(
WindowId
window
)
override
;
bool
GetSourceList
(
SourceList
*
sources
)
override
;
bool
SelectSource
(
SourceId
id
)
override
;
bool
FocusOnSelectedSource
(
)
override
;
private
:
void
OnCaptureResult
(
Result
result
std
:
:
unique_ptr
<
DesktopFrame
>
frame
)
override
;
bool
IsBlankFrame
(
const
DesktopFrame
&
frame
)
const
;
bool
IsBlankPixel
(
const
DesktopFrame
&
frame
int
x
int
y
)
const
;
const
std
:
:
unique_ptr
<
DesktopCapturer
>
capturer_
;
const
RgbaColor
blank_pixel_
;
bool
non_blank_frame_received_
=
false
;
bool
last_frame_is_blank_
=
false
;
bool
is_first_frame_
=
true
;
DesktopCapturer
:
:
Callback
*
callback_
=
nullptr
;
}
;
}
#
endif
