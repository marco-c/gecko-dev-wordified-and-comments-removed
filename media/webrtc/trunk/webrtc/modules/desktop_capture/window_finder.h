#
ifndef
MODULES_DESKTOP_CAPTURE_WINDOW_FINDER_H_
#
define
MODULES_DESKTOP_CAPTURE_WINDOW_FINDER_H_
#
include
<
memory
>
#
include
"
modules
/
desktop_capture
/
desktop_capture_types
.
h
"
#
include
"
modules
/
desktop_capture
/
desktop_geometry
.
h
"
#
include
"
rtc_base
/
scoped_ref_ptr
.
h
"
#
if
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_IOS
)
#
include
"
modules
/
desktop_capture
/
mac
/
desktop_configuration_monitor
.
h
"
#
endif
namespace
webrtc
{
#
if
defined
(
USE_X11
)
class
XAtomCache
;
#
endif
class
WindowFinder
{
public
:
WindowFinder
(
)
=
default
;
virtual
~
WindowFinder
(
)
=
default
;
virtual
WindowId
GetWindowUnderPoint
(
DesktopVector
point
)
=
0
;
struct
Options
final
{
Options
(
)
;
~
Options
(
)
;
Options
(
const
Options
&
other
)
;
Options
(
Options
&
&
other
)
;
#
if
defined
(
USE_X11
)
XAtomCache
*
cache
=
nullptr
;
#
endif
#
if
defined
(
WEBRTC_MAC
)
&
&
!
defined
(
WEBRTC_IOS
)
rtc
:
:
scoped_refptr
<
DesktopConfigurationMonitor
>
configuration_monitor
;
#
endif
}
;
static
std
:
:
unique_ptr
<
WindowFinder
>
Create
(
const
Options
&
options
)
;
}
;
}
#
endif
