#
include
"
modules
/
desktop_capture
/
rgba_color
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
namespace
{
bool
AlphaEquals
(
uint8_t
i
uint8_t
j
)
{
return
i
=
=
j
|
|
(
(
i
=
=
0
|
|
i
=
=
255
)
&
&
(
j
=
=
0
|
|
j
=
=
255
)
)
;
}
}
RgbaColor
:
:
RgbaColor
(
uint8_t
blue
uint8_t
green
uint8_t
red
uint8_t
alpha
)
{
this
-
>
blue
=
blue
;
this
-
>
green
=
green
;
this
-
>
red
=
red
;
this
-
>
alpha
=
alpha
;
}
RgbaColor
:
:
RgbaColor
(
uint8_t
blue
uint8_t
green
uint8_t
red
)
:
RgbaColor
(
blue
green
red
0xff
)
{
}
RgbaColor
:
:
RgbaColor
(
const
uint8_t
*
bgra
)
:
RgbaColor
(
bgra
[
0
]
bgra
[
1
]
bgra
[
2
]
bgra
[
3
]
)
{
}
RgbaColor
:
:
RgbaColor
(
uint32_t
bgra
)
:
RgbaColor
(
reinterpret_cast
<
uint8_t
*
>
(
&
bgra
)
)
{
}
bool
RgbaColor
:
:
operator
=
=
(
const
RgbaColor
&
right
)
const
{
return
blue
=
=
right
.
blue
&
&
green
=
=
right
.
green
&
&
red
=
=
right
.
red
&
&
AlphaEquals
(
alpha
right
.
alpha
)
;
}
bool
RgbaColor
:
:
operator
!
=
(
const
RgbaColor
&
right
)
const
{
return
!
(
*
this
=
=
right
)
;
}
uint32_t
RgbaColor
:
:
ToUInt32
(
)
const
{
#
if
defined
(
WEBRTC_ARCH_LITTLE_ENDIAN
)
return
blue
|
(
green
<
<
8
)
|
(
red
<
<
16
)
|
(
alpha
<
<
24
)
;
#
else
return
(
blue
<
<
24
)
|
(
green
<
<
16
)
|
(
red
<
<
8
)
|
alpha
;
#
endif
}
}
