#
include
"
webrtc
/
modules
/
audio_coding
/
test
/
TestRedFec
.
h
"
#
include
<
assert
.
h
>
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
audio_format_conversion
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
include
/
audio_coding_module_typedefs
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
test
/
utility
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
trace
.
h
"
#
include
"
webrtc
/
test
/
testsupport
/
fileutils
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
#
ifdef
SUPPORT_RED_WB
#
undef
SUPPORT_RED_WB
#
endif
#
ifdef
SUPPORT_RED_SWB
#
undef
SUPPORT_RED_SWB
#
endif
#
ifdef
SUPPORT_RED_FB
#
undef
SUPPORT_RED_FB
#
endif
namespace
webrtc
{
namespace
{
const
char
kNameL16
[
]
=
"
L16
"
;
const
char
kNamePCMU
[
]
=
"
PCMU
"
;
const
char
kNameCN
[
]
=
"
CN
"
;
const
char
kNameRED
[
]
=
"
RED
"
;
#
ifdef
WEBRTC_CODEC_G722
const
char
kNameISAC
[
]
=
"
ISAC
"
;
const
char
kNameG722
[
]
=
"
G722
"
;
const
char
kNameOPUS
[
]
=
"
opus
"
;
#
endif
}
TestRedFec
:
:
TestRedFec
(
)
:
_acmA
(
AudioCodingModule
:
:
Create
(
0
)
)
_acmB
(
AudioCodingModule
:
:
Create
(
1
)
)
_channelA2B
(
NULL
)
_testCntr
(
0
)
{
}
TestRedFec
:
:
~
TestRedFec
(
)
{
if
(
_channelA2B
!
=
NULL
)
{
delete
_channelA2B
;
_channelA2B
=
NULL
;
}
}
void
TestRedFec
:
:
Perform
(
)
{
const
std
:
:
string
file_name
=
webrtc
:
:
test
:
:
ResourcePath
(
"
audio_coding
/
testfile32kHz
"
"
pcm
"
)
;
_inFileA
.
Open
(
file_name
32000
"
rb
"
)
;
ASSERT_EQ
(
0
_acmA
-
>
InitializeReceiver
(
)
)
;
ASSERT_EQ
(
0
_acmB
-
>
InitializeReceiver
(
)
)
;
uint8_t
numEncoders
=
_acmA
-
>
NumberOfCodecs
(
)
;
CodecInst
myCodecParam
;
for
(
uint8_t
n
=
0
;
n
<
numEncoders
;
n
+
+
)
{
EXPECT_EQ
(
0
_acmB
-
>
Codec
(
n
&
myCodecParam
)
)
;
if
(
!
strcmp
(
myCodecParam
.
plname
"
opus
"
)
)
{
myCodecParam
.
channels
=
1
;
}
EXPECT_EQ
(
true
_acmB
-
>
RegisterReceiveCodec
(
myCodecParam
.
pltype
CodecInstToSdp
(
myCodecParam
)
)
)
;
}
_channelA2B
=
new
Channel
;
_acmA
-
>
RegisterTransportCallback
(
_channelA2B
)
;
_channelA2B
-
>
RegisterReceiverACM
(
_acmB
.
get
(
)
)
;
EXPECT_EQ
(
0
RegisterSendCodec
(
'
A
'
kNameL16
8000
)
)
;
EXPECT_EQ
(
0
RegisterSendCodec
(
'
A
'
kNameCN
8000
)
)
;
EXPECT_EQ
(
0
RegisterSendCodec
(
'
A
'
kNameRED
)
)
;
EXPECT_EQ
(
0
SetVAD
(
true
true
VADAggr
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
OpenOutFile
(
_testCntr
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
RegisterSendCodec
(
'
A
'
kNamePCMU
8000
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
OpenOutFile
(
_testCntr
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
#
ifndef
WEBRTC_CODEC_G722
EXPECT_TRUE
(
false
)
;
printf
(
"
G722
needs
to
be
activated
to
run
this
test
\
n
"
)
;
return
;
#
else
EXPECT_EQ
(
0
RegisterSendCodec
(
'
A
'
kNameG722
16000
)
)
;
EXPECT_EQ
(
0
RegisterSendCodec
(
'
A
'
kNameCN
16000
)
)
;
#
ifdef
SUPPORT_RED_WB
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
EXPECT_EQ
(
0
SetVAD
(
true
true
VADAggr
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
false
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
#
ifdef
SUPPORT_RED_WB
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_EQ
(
-
1
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
Run
(
)
;
_outFileB
.
Close
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
16000
)
;
#
ifdef
SUPPORT_RED_WB
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
EXPECT_EQ
(
0
SetVAD
(
true
true
VADVeryAggr
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
false
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
#
ifdef
SUPPORT_RED_WB
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_EQ
(
-
1
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
32000
)
;
#
if
defined
(
SUPPORT_RED_SWB
)
&
&
defined
(
SUPPORT_RED_WB
)
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
EXPECT_EQ
(
0
SetVAD
(
true
true
VADVeryAggr
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
false
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
#
ifdef
SUPPORT_RED_SWB
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_EQ
(
-
1
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
32000
)
;
EXPECT_EQ
(
0
SetVAD
(
false
false
VADNormal
)
)
;
#
if
defined
(
SUPPORT_RED_SWB
)
&
&
defined
(
SUPPORT_RED_WB
)
OpenOutFile
(
_testCntr
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
16000
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
32000
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
16000
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
#
else
EXPECT_EQ
(
-
1
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
_channelA2B
-
>
SetFECTestWithPacketLoss
(
true
)
;
EXPECT_EQ
(
0
RegisterSendCodec
(
'
A
'
kNameG722
)
)
;
EXPECT_EQ
(
0
RegisterSendCodec
(
'
A
'
kNameCN
16000
)
)
;
#
if
defined
(
SUPPORT_RED_WB
)
&
&
defined
(
SUPPORT_RED_SWB
)
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
EXPECT_EQ
(
0
SetVAD
(
true
true
VADAggr
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
false
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
#
ifdef
SUPPORT_RED_WB
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_EQ
(
-
1
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
16000
)
;
#
ifdef
SUPPORT_RED_WB
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
EXPECT_EQ
(
0
SetVAD
(
true
true
VADVeryAggr
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
false
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
#
ifdef
SUPPORT_RED_WB
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_EQ
(
-
1
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
32000
)
;
#
if
defined
(
SUPPORT_RED_SWB
)
&
&
defined
(
SUPPORT_RED_WB
)
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
EXPECT_EQ
(
0
SetVAD
(
true
true
VADVeryAggr
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
false
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
ifdef
SUPPORT_RED_SWB
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_EQ
(
-
1
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
OpenOutFile
(
_testCntr
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
32000
)
;
EXPECT_EQ
(
0
SetVAD
(
false
false
VADNormal
)
)
;
#
if
defined
(
SUPPORT_RED_SWB
)
&
&
defined
(
SUPPORT_RED_WB
)
OpenOutFile
(
_testCntr
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
16000
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
32000
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
16000
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
_outFileB
.
Close
(
)
;
#
else
EXPECT_EQ
(
-
1
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
#
ifndef
WEBRTC_CODEC_OPUS
EXPECT_TRUE
(
false
)
;
printf
(
"
Opus
needs
to
be
activated
to
run
this
test
\
n
"
)
;
return
;
#
endif
RegisterSendCodec
(
'
A
'
kNameOPUS
48000
)
;
#
if
defined
(
SUPPORT_RED_FB
)
&
&
defined
(
SUPPORT_RED_SWB
)
&
&
\
defined
(
SUPPORT_RED_WB
)
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
EXPECT_EQ
(
0
_acmA
-
>
SetPacketLossRate
(
25
)
)
;
#
ifdef
SUPPORT_RED_FB
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
EXPECT_EQ
(
-
1
_acmA
-
>
SetCodecFEC
(
true
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
false
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetCodecFEC
(
true
)
)
;
EXPECT_EQ
(
-
1
_acmA
-
>
SetREDStatus
(
true
)
)
;
#
else
EXPECT_EQ
(
-
1
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetCodecFEC
(
true
)
)
;
#
endif
EXPECT_TRUE
(
_acmA
-
>
CodecFEC
(
)
)
;
OpenOutFile
(
_testCntr
)
;
Run
(
)
;
RegisterSendCodec
(
'
A
'
kNameL16
8000
)
;
EXPECT_EQ
(
0
SetVAD
(
false
false
VADNormal
)
)
;
EXPECT_FALSE
(
_acmA
-
>
CodecFEC
(
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
true
)
)
;
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
Run
(
)
;
RegisterSendCodec
(
'
A
'
kNameOPUS
48000
)
;
#
ifdef
SUPPORT_RED_FB
EXPECT_TRUE
(
_acmA
-
>
REDStatus
(
)
)
;
#
else
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
#
endif
EXPECT_EQ
(
0
_acmA
-
>
SetREDStatus
(
false
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetCodecFEC
(
false
)
)
;
Run
(
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetCodecFEC
(
true
)
)
;
_outFileB
.
Close
(
)
;
RegisterSendCodec
(
'
A
'
kNameG722
16000
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
EXPECT_EQ
(
-
1
_acmA
-
>
SetCodecFEC
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
CodecFEC
(
)
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
16000
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
EXPECT_EQ
(
-
1
_acmA
-
>
SetCodecFEC
(
true
)
)
;
EXPECT_FALSE
(
_acmA
-
>
CodecFEC
(
)
)
;
RegisterSendCodec
(
'
A
'
kNameG722
16000
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetCodecFEC
(
false
)
)
;
EXPECT_FALSE
(
_acmA
-
>
CodecFEC
(
)
)
;
RegisterSendCodec
(
'
A
'
kNameISAC
16000
)
;
EXPECT_FALSE
(
_acmA
-
>
REDStatus
(
)
)
;
EXPECT_EQ
(
0
_acmA
-
>
SetCodecFEC
(
false
)
)
;
EXPECT_FALSE
(
_acmA
-
>
CodecFEC
(
)
)
;
#
endif
}
int32_t
TestRedFec
:
:
SetVAD
(
bool
enableDTX
bool
enableVAD
ACMVADMode
vadMode
)
{
return
_acmA
-
>
SetVAD
(
enableDTX
enableVAD
vadMode
)
;
}
int16_t
TestRedFec
:
:
RegisterSendCodec
(
char
side
const
char
*
codecName
int32_t
samplingFreqHz
)
{
std
:
:
cout
<
<
std
:
:
flush
;
AudioCodingModule
*
myACM
;
switch
(
side
)
{
case
'
A
'
:
{
myACM
=
_acmA
.
get
(
)
;
break
;
}
case
'
B
'
:
{
myACM
=
_acmB
.
get
(
)
;
break
;
}
default
:
return
-
1
;
}
if
(
myACM
=
=
NULL
)
{
assert
(
false
)
;
return
-
1
;
}
CodecInst
myCodecParam
;
EXPECT_GT
(
AudioCodingModule
:
:
Codec
(
codecName
&
myCodecParam
samplingFreqHz
1
)
-
1
)
;
EXPECT_GT
(
myACM
-
>
RegisterSendCodec
(
myCodecParam
)
-
1
)
;
return
0
;
}
void
TestRedFec
:
:
Run
(
)
{
AudioFrame
audioFrame
;
int32_t
outFreqHzB
=
_outFileB
.
SamplingFrequency
(
)
;
_inFileA
.
SetNum10MsBlocksToRead
(
50
)
;
_inFileA
.
FastForward
(
100
)
;
while
(
!
_inFileA
.
EndOfFile
(
)
)
{
EXPECT_GT
(
_inFileA
.
Read10MsData
(
audioFrame
)
0
)
;
EXPECT_GE
(
_acmA
-
>
Add10MsData
(
audioFrame
)
0
)
;
bool
muted
;
EXPECT_EQ
(
0
_acmB
-
>
PlayoutData10Ms
(
outFreqHzB
&
audioFrame
&
muted
)
)
;
ASSERT_FALSE
(
muted
)
;
_outFileB
.
Write10MsData
(
audioFrame
.
data_
audioFrame
.
samples_per_channel_
)
;
}
_inFileA
.
Rewind
(
)
;
}
void
TestRedFec
:
:
OpenOutFile
(
int16_t
test_number
)
{
std
:
:
string
file_name
;
std
:
:
stringstream
file_stream
;
file_stream
<
<
webrtc
:
:
test
:
:
OutputPath
(
)
;
file_stream
<
<
"
TestRedFec_outFile_
"
;
file_stream
<
<
test_number
<
<
"
.
pcm
"
;
file_name
=
file_stream
.
str
(
)
;
_outFileB
.
Open
(
file_name
16000
"
wb
"
)
;
}
}
