#
ifndef
MODULES_AUDIO_CODING_TEST_TESTVADDTX_H_
#
define
MODULES_AUDIO_CODING_TEST_TESTVADDTX_H_
#
include
<
memory
>
#
include
"
common_types
.
h
"
#
include
"
modules
/
audio_coding
/
include
/
audio_coding_module
.
h
"
#
include
"
modules
/
audio_coding
/
include
/
audio_coding_module_typedefs
.
h
"
#
include
"
modules
/
audio_coding
/
test
/
ACMTest
.
h
"
#
include
"
modules
/
audio_coding
/
test
/
Channel
.
h
"
namespace
webrtc
{
class
ActivityMonitor
:
public
ACMVADCallback
{
public
:
ActivityMonitor
(
)
;
int32_t
InFrameType
(
FrameType
frame_type
)
;
void
PrintStatistics
(
)
;
void
ResetStatistics
(
)
;
void
GetStatistics
(
uint32_t
*
stats
)
;
private
:
uint32_t
counter_
[
5
]
;
}
;
class
TestVadDtx
:
public
ACMTest
{
public
:
static
const
int
kOutputFreqHz
=
16000
;
TestVadDtx
(
)
;
virtual
void
Perform
(
)
=
0
;
protected
:
void
RegisterCodec
(
CodecInst
codec_param
)
;
void
Run
(
std
:
:
string
in_filename
int
frequency
int
channels
std
:
:
string
out_filename
bool
append
const
int
*
expects
)
;
std
:
:
unique_ptr
<
AudioCodingModule
>
acm_send_
;
std
:
:
unique_ptr
<
AudioCodingModule
>
acm_receive_
;
std
:
:
unique_ptr
<
Channel
>
channel_
;
std
:
:
unique_ptr
<
ActivityMonitor
>
monitor_
;
uint32_t
time_stamp_
=
0x12345678
;
}
;
class
TestWebRtcVadDtx
final
:
public
TestVadDtx
{
public
:
TestWebRtcVadDtx
(
)
;
void
Perform
(
)
override
;
private
:
void
RunTestCases
(
)
;
void
Test
(
bool
new_outfile
)
;
void
SetVAD
(
bool
enable_dtx
bool
enable_vad
ACMVADMode
vad_mode
)
;
bool
vad_enabled_
;
bool
dtx_enabled_
;
int
output_file_num_
;
}
;
class
TestOpusDtx
final
:
public
TestVadDtx
{
public
:
void
Perform
(
)
override
;
}
;
}
#
endif
