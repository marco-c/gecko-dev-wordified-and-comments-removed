#
ifndef
MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_FEC_CONTROLLER_PLR_BASED_H_
#
define
MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_FEC_CONTROLLER_PLR_BASED_H_
#
include
<
memory
>
#
include
"
common_audio
/
smoothing_filter
.
h
"
#
include
"
modules
/
audio_coding
/
audio_network_adaptor
/
controller
.
h
"
#
include
"
modules
/
audio_coding
/
audio_network_adaptor
/
util
/
threshold_curve
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
webrtc
{
class
FecControllerPlrBased
final
:
public
Controller
{
public
:
struct
Config
{
Config
(
bool
initial_fec_enabled
const
ThresholdCurve
&
fec_enabling_threshold
const
ThresholdCurve
&
fec_disabling_threshold
int
time_constant_ms
)
;
bool
initial_fec_enabled
;
ThresholdCurve
fec_enabling_threshold
;
ThresholdCurve
fec_disabling_threshold
;
int
time_constant_ms
;
}
;
FecControllerPlrBased
(
const
Config
&
config
std
:
:
unique_ptr
<
SmoothingFilter
>
smoothing_filter
)
;
explicit
FecControllerPlrBased
(
const
Config
&
config
)
;
~
FecControllerPlrBased
(
)
override
;
void
UpdateNetworkMetrics
(
const
NetworkMetrics
&
network_metrics
)
override
;
void
MakeDecision
(
AudioEncoderRuntimeConfig
*
config
)
override
;
private
:
bool
FecEnablingDecision
(
const
rtc
:
:
Optional
<
float
>
&
packet_loss
)
const
;
bool
FecDisablingDecision
(
const
rtc
:
:
Optional
<
float
>
&
packet_loss
)
const
;
const
Config
config_
;
bool
fec_enabled_
;
rtc
:
:
Optional
<
int
>
uplink_bandwidth_bps_
;
const
std
:
:
unique_ptr
<
SmoothingFilter
>
packet_loss_smoother_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
FecControllerPlrBased
)
;
}
;
}
#
endif
