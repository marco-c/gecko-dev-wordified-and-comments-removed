#
include
<
memory
>
#
include
<
utility
>
#
include
"
webrtc
/
modules
/
audio_coding
/
audio_network_adaptor
/
frame_length_controller
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
constexpr
float
kFlIncreasingPacketLossFraction
=
0
.
04f
;
constexpr
float
kFlDecreasingPacketLossFraction
=
0
.
05f
;
constexpr
int
kFl20msTo60msBandwidthBps
=
22000
;
constexpr
int
kFl60msTo20msBandwidthBps
=
88000
;
constexpr
int
kMediumBandwidthBps
=
(
kFl60msTo20msBandwidthBps
+
kFl20msTo60msBandwidthBps
)
/
2
;
constexpr
float
kMediumPacketLossFraction
=
(
kFlDecreasingPacketLossFraction
+
kFlIncreasingPacketLossFraction
)
/
2
;
std
:
:
unique_ptr
<
FrameLengthController
>
CreateController
(
const
std
:
:
vector
<
int
>
&
encoder_frame_lengths_ms
int
initial_frame_length_ms
)
{
std
:
:
unique_ptr
<
FrameLengthController
>
controller
(
new
FrameLengthController
(
FrameLengthController
:
:
Config
(
encoder_frame_lengths_ms
initial_frame_length_ms
kFlIncreasingPacketLossFraction
kFlDecreasingPacketLossFraction
kFl20msTo60msBandwidthBps
kFl60msTo20msBandwidthBps
)
)
)
;
return
controller
;
}
void
CheckDecision
(
FrameLengthController
*
controller
const
rtc
:
:
Optional
<
int
>
&
uplink_bandwidth_bps
const
rtc
:
:
Optional
<
float
>
&
uplink_packet_loss_fraction
const
rtc
:
:
Optional
<
bool
>
&
enable_fec
int
expected_frame_length_ms
)
{
Controller
:
:
NetworkMetrics
metrics
;
metrics
.
uplink_bandwidth_bps
=
uplink_bandwidth_bps
;
metrics
.
uplink_packet_loss_fraction
=
uplink_packet_loss_fraction
;
AudioNetworkAdaptor
:
:
EncoderRuntimeConfig
config
;
config
.
enable_fec
=
enable_fec
;
controller
-
>
MakeDecision
(
metrics
&
config
)
;
EXPECT_EQ
(
rtc
:
:
Optional
<
int
>
(
expected_frame_length_ms
)
config
.
frame_length_ms
)
;
}
}
TEST
(
FrameLengthControllerTest
DecreaseTo20MsOnHighUplinkBandwidth
)
{
auto
controller
=
CreateController
(
{
20
60
}
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl60msTo20msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
)
rtc
:
:
Optional
<
bool
>
(
)
20
)
;
}
TEST
(
FrameLengthControllerTest
DecreaseTo20MsOnHighUplinkPacketLossFraction
)
{
auto
controller
=
CreateController
(
{
20
60
}
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
)
rtc
:
:
Optional
<
float
>
(
kFlDecreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
20
)
;
}
TEST
(
FrameLengthControllerTest
DecreaseTo20MsWhenFecIsOn
)
{
auto
controller
=
CreateController
(
{
20
60
}
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
)
rtc
:
:
Optional
<
float
>
(
)
rtc
:
:
Optional
<
bool
>
(
true
)
20
)
;
}
TEST
(
FrameLengthControllerTest
Maintain60MsIf20MsNotInReceiverFrameLengthRange
)
{
auto
controller
=
CreateController
(
{
60
}
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
)
rtc
:
:
Optional
<
float
>
(
)
rtc
:
:
Optional
<
bool
>
(
true
)
60
)
;
}
TEST
(
FrameLengthControllerTest
Maintain60MsOnMultipleConditions
)
{
auto
controller
=
CreateController
(
{
20
60
}
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kMediumBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kMediumPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
60
)
;
}
TEST
(
FrameLengthControllerTest
IncreaseTo60MsOnMultipleConditions
)
{
auto
controller
=
CreateController
(
{
20
60
}
20
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl20msTo60msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
60
)
;
}
TEST
(
FrameLengthControllerTest
Maintain20MsIf60MsNotInReceiverFrameLengthRange
)
{
auto
controller
=
CreateController
(
{
20
}
20
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl20msTo60msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
20
)
;
}
TEST
(
FrameLengthControllerTest
Maintain20MsOnMediumUplinkBandwidth
)
{
auto
controller
=
CreateController
(
{
20
60
}
20
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kMediumBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
20
)
;
}
TEST
(
FrameLengthControllerTest
Maintain20MsOnMediumUplinkPacketLossFraction
)
{
auto
controller
=
CreateController
(
{
20
60
}
20
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl20msTo60msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kMediumPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
20
)
;
}
TEST
(
FrameLengthControllerTest
Maintain20MsWhenFecIsOn
)
{
auto
controller
=
CreateController
(
{
20
60
}
20
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl20msTo60msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
true
)
20
)
;
}
namespace
{
constexpr
int
kFl60msTo120msBandwidthBps
=
18000
;
constexpr
int
kFl120msTo60msBandwidthBps
=
72000
;
}
class
FrameLengthControllerForTest
{
public
:
FrameLengthControllerForTest
(
const
std
:
:
vector
<
int
>
&
encoder_frame_lengths_ms
int
initial_frame_length_ms
)
:
frame_length_controller_
(
FrameLengthController
:
:
Config
(
encoder_frame_lengths_ms
initial_frame_length_ms
kFlIncreasingPacketLossFraction
kFlDecreasingPacketLossFraction
kFl20msTo60msBandwidthBps
kFl60msTo20msBandwidthBps
)
)
{
frame_length_controller_
.
frame_length_change_criteria_
.
insert
(
std
:
:
make_pair
(
FrameLengthController
:
:
FrameLengthChange
(
60
120
)
kFl60msTo120msBandwidthBps
)
)
;
frame_length_controller_
.
frame_length_change_criteria_
.
insert
(
std
:
:
make_pair
(
FrameLengthController
:
:
FrameLengthChange
(
120
60
)
kFl120msTo60msBandwidthBps
)
)
;
}
FrameLengthController
*
get
(
)
{
return
&
frame_length_controller_
;
}
private
:
FrameLengthController
frame_length_controller_
;
}
;
TEST
(
FrameLengthControllerTest
From120MsTo20MsOnHighUplinkBandwidth
)
{
FrameLengthControllerForTest
controller
(
{
20
60
120
}
120
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl60msTo20msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
)
rtc
:
:
Optional
<
bool
>
(
)
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl60msTo20msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
)
rtc
:
:
Optional
<
bool
>
(
)
20
)
;
}
TEST
(
FrameLengthControllerTest
From120MsTo20MsOnHighUplinkPacketLossFraction
)
{
FrameLengthControllerForTest
controller
(
{
20
60
120
}
120
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
)
rtc
:
:
Optional
<
float
>
(
kFlDecreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
)
rtc
:
:
Optional
<
float
>
(
kFlDecreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
20
)
;
}
TEST
(
FrameLengthControllerTest
From120MsTo20MsWhenFecIsOn
)
{
FrameLengthControllerForTest
controller
(
{
20
60
120
}
120
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
)
rtc
:
:
Optional
<
float
>
(
)
rtc
:
:
Optional
<
bool
>
(
true
)
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
)
rtc
:
:
Optional
<
float
>
(
)
rtc
:
:
Optional
<
bool
>
(
true
)
20
)
;
}
TEST
(
FrameLengthControllerTest
From20MsTo120MsOnMultipleConditions
)
{
FrameLengthControllerForTest
controller
(
{
20
60
120
}
20
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl60msTo120msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl60msTo120msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
120
)
;
}
TEST
(
FrameLengthControllerTest
Stall60MsIf120MsNotInReceiverFrameLengthRange
)
{
FrameLengthControllerForTest
controller
(
{
20
60
}
20
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl60msTo120msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl60msTo120msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
60
)
;
}
TEST
(
FrameLengthControllerTest
CheckBehaviorOnChangingNetworkMetrics
)
{
FrameLengthControllerForTest
controller
(
{
20
60
120
}
20
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kMediumBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
20
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl20msTo60msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl60msTo120msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kMediumPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl60msTo120msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
120
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kFl120msTo60msBandwidthBps
)
rtc
:
:
Optional
<
float
>
(
kFlIncreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
60
)
;
CheckDecision
(
controller
.
get
(
)
rtc
:
:
Optional
<
int
>
(
kMediumPacketLossFraction
)
rtc
:
:
Optional
<
float
>
(
kFlDecreasingPacketLossFraction
)
rtc
:
:
Optional
<
bool
>
(
)
20
)
;
}
}
