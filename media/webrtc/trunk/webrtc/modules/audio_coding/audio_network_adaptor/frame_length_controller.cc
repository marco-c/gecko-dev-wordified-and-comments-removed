#
include
"
webrtc
/
modules
/
audio_coding
/
audio_network_adaptor
/
frame_length_controller
.
h
"
#
include
<
utility
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
namespace
webrtc
{
FrameLengthController
:
:
Config
:
:
Config
(
const
std
:
:
vector
<
int
>
&
encoder_frame_lengths_ms
int
initial_frame_length_ms
float
fl_increasing_packet_loss_fraction
float
fl_decreasing_packet_loss_fraction
int
fl_20ms_to_60ms_bandwidth_bps
int
fl_60ms_to_20ms_bandwidth_bps
)
:
encoder_frame_lengths_ms
(
encoder_frame_lengths_ms
)
initial_frame_length_ms
(
initial_frame_length_ms
)
fl_increasing_packet_loss_fraction
(
fl_increasing_packet_loss_fraction
)
fl_decreasing_packet_loss_fraction
(
fl_decreasing_packet_loss_fraction
)
fl_20ms_to_60ms_bandwidth_bps
(
fl_20ms_to_60ms_bandwidth_bps
)
fl_60ms_to_20ms_bandwidth_bps
(
fl_60ms_to_20ms_bandwidth_bps
)
{
}
FrameLengthController
:
:
Config
:
:
Config
(
const
Config
&
other
)
=
default
;
FrameLengthController
:
:
Config
:
:
~
Config
(
)
=
default
;
FrameLengthController
:
:
FrameLengthController
(
const
Config
&
config
)
:
config_
(
config
)
{
frame_length_ms_
=
std
:
:
find
(
config_
.
encoder_frame_lengths_ms
.
begin
(
)
config_
.
encoder_frame_lengths_ms
.
end
(
)
config_
.
initial_frame_length_ms
)
;
RTC_DCHECK
(
frame_length_ms_
!
=
config_
.
encoder_frame_lengths_ms
.
end
(
)
)
;
frame_length_change_criteria_
.
insert
(
std
:
:
make_pair
(
FrameLengthChange
(
20
60
)
config_
.
fl_20ms_to_60ms_bandwidth_bps
)
)
;
frame_length_change_criteria_
.
insert
(
std
:
:
make_pair
(
FrameLengthChange
(
60
20
)
config_
.
fl_60ms_to_20ms_bandwidth_bps
)
)
;
}
FrameLengthController
:
:
~
FrameLengthController
(
)
=
default
;
void
FrameLengthController
:
:
MakeDecision
(
const
NetworkMetrics
&
metrics
AudioNetworkAdaptor
:
:
EncoderRuntimeConfig
*
config
)
{
RTC_DCHECK
(
!
config
-
>
frame_length_ms
)
;
if
(
FrameLengthIncreasingDecision
(
metrics
*
config
)
)
{
+
+
frame_length_ms_
;
}
else
if
(
FrameLengthDecreasingDecision
(
metrics
*
config
)
)
{
-
-
frame_length_ms_
;
}
config
-
>
frame_length_ms
=
rtc
:
:
Optional
<
int
>
(
*
frame_length_ms_
)
;
}
FrameLengthController
:
:
FrameLengthChange
:
:
FrameLengthChange
(
int
from_frame_length_ms
int
to_frame_length_ms
)
:
from_frame_length_ms
(
from_frame_length_ms
)
to_frame_length_ms
(
to_frame_length_ms
)
{
}
FrameLengthController
:
:
FrameLengthChange
:
:
~
FrameLengthChange
(
)
=
default
;
bool
FrameLengthController
:
:
FrameLengthChange
:
:
operator
<
(
const
FrameLengthChange
&
rhs
)
const
{
return
from_frame_length_ms
<
rhs
.
from_frame_length_ms
|
|
(
from_frame_length_ms
=
=
rhs
.
from_frame_length_ms
&
&
to_frame_length_ms
<
rhs
.
to_frame_length_ms
)
;
}
bool
FrameLengthController
:
:
FrameLengthIncreasingDecision
(
const
NetworkMetrics
&
metrics
const
AudioNetworkAdaptor
:
:
EncoderRuntimeConfig
&
config
)
const
{
auto
longer_frame_length_ms
=
std
:
:
next
(
frame_length_ms_
)
;
if
(
longer_frame_length_ms
=
=
config_
.
encoder_frame_lengths_ms
.
end
(
)
)
return
false
;
auto
increase_threshold
=
frame_length_change_criteria_
.
find
(
FrameLengthChange
(
*
frame_length_ms_
*
longer_frame_length_ms
)
)
;
if
(
increase_threshold
=
=
frame_length_change_criteria_
.
end
(
)
)
return
false
;
return
(
metrics
.
uplink_bandwidth_bps
&
&
*
metrics
.
uplink_bandwidth_bps
<
=
increase_threshold
-
>
second
)
&
&
(
metrics
.
uplink_packet_loss_fraction
&
&
*
metrics
.
uplink_packet_loss_fraction
<
=
config_
.
fl_increasing_packet_loss_fraction
)
&
&
!
config
.
enable_fec
.
value_or
(
false
)
;
}
bool
FrameLengthController
:
:
FrameLengthDecreasingDecision
(
const
NetworkMetrics
&
metrics
const
AudioNetworkAdaptor
:
:
EncoderRuntimeConfig
&
config
)
const
{
if
(
frame_length_ms_
=
=
config_
.
encoder_frame_lengths_ms
.
begin
(
)
)
return
false
;
auto
shorter_frame_length_ms
=
std
:
:
prev
(
frame_length_ms_
)
;
auto
decrease_threshold
=
frame_length_change_criteria_
.
find
(
FrameLengthChange
(
*
frame_length_ms_
*
shorter_frame_length_ms
)
)
;
if
(
decrease_threshold
=
=
frame_length_change_criteria_
.
end
(
)
)
return
false
;
return
(
metrics
.
uplink_bandwidth_bps
&
&
*
metrics
.
uplink_bandwidth_bps
>
=
decrease_threshold
-
>
second
)
|
|
(
metrics
.
uplink_packet_loss_fraction
&
&
*
metrics
.
uplink_packet_loss_fraction
>
=
config_
.
fl_decreasing_packet_loss_fraction
)
|
|
config
.
enable_fec
.
value_or
(
false
)
;
}
}
