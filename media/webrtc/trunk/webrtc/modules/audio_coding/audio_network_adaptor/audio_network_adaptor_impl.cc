#
include
"
webrtc
/
modules
/
audio_coding
/
audio_network_adaptor
/
audio_network_adaptor_impl
.
h
"
#
include
<
utility
>
namespace
webrtc
{
AudioNetworkAdaptorImpl
:
:
Config
:
:
Config
(
)
:
event_log
(
nullptr
)
clock
(
nullptr
)
{
}
;
AudioNetworkAdaptorImpl
:
:
Config
:
:
~
Config
(
)
=
default
;
AudioNetworkAdaptorImpl
:
:
AudioNetworkAdaptorImpl
(
const
Config
&
config
std
:
:
unique_ptr
<
ControllerManager
>
controller_manager
std
:
:
unique_ptr
<
DebugDumpWriter
>
debug_dump_writer
)
:
config_
(
config
)
controller_manager_
(
std
:
:
move
(
controller_manager
)
)
debug_dump_writer_
(
std
:
:
move
(
debug_dump_writer
)
)
{
RTC_DCHECK
(
controller_manager_
)
;
}
AudioNetworkAdaptorImpl
:
:
~
AudioNetworkAdaptorImpl
(
)
=
default
;
void
AudioNetworkAdaptorImpl
:
:
SetUplinkBandwidth
(
int
uplink_bandwidth_bps
)
{
last_metrics_
.
uplink_bandwidth_bps
=
rtc
:
:
Optional
<
int
>
(
uplink_bandwidth_bps
)
;
DumpNetworkMetrics
(
)
;
}
void
AudioNetworkAdaptorImpl
:
:
SetUplinkPacketLossFraction
(
float
uplink_packet_loss_fraction
)
{
last_metrics_
.
uplink_packet_loss_fraction
=
rtc
:
:
Optional
<
float
>
(
uplink_packet_loss_fraction
)
;
DumpNetworkMetrics
(
)
;
}
void
AudioNetworkAdaptorImpl
:
:
SetRtt
(
int
rtt_ms
)
{
last_metrics_
.
rtt_ms
=
rtc
:
:
Optional
<
int
>
(
rtt_ms
)
;
DumpNetworkMetrics
(
)
;
}
void
AudioNetworkAdaptorImpl
:
:
SetTargetAudioBitrate
(
int
target_audio_bitrate_bps
)
{
last_metrics_
.
target_audio_bitrate_bps
=
rtc
:
:
Optional
<
int
>
(
target_audio_bitrate_bps
)
;
DumpNetworkMetrics
(
)
;
}
void
AudioNetworkAdaptorImpl
:
:
SetOverhead
(
size_t
overhead_bytes_per_packet
)
{
last_metrics_
.
overhead_bytes_per_packet
=
rtc
:
:
Optional
<
size_t
>
(
overhead_bytes_per_packet
)
;
DumpNetworkMetrics
(
)
;
}
AudioNetworkAdaptor
:
:
EncoderRuntimeConfig
AudioNetworkAdaptorImpl
:
:
GetEncoderRuntimeConfig
(
)
{
EncoderRuntimeConfig
config
;
for
(
auto
&
controller
:
controller_manager_
-
>
GetSortedControllers
(
last_metrics_
)
)
controller
-
>
MakeDecision
(
last_metrics_
&
config
)
;
if
(
debug_dump_writer_
)
debug_dump_writer_
-
>
DumpEncoderRuntimeConfig
(
config
config_
.
clock
-
>
TimeInMilliseconds
(
)
)
;
return
config
;
}
void
AudioNetworkAdaptorImpl
:
:
StartDebugDump
(
FILE
*
file_handle
)
{
debug_dump_writer_
=
DebugDumpWriter
:
:
Create
(
file_handle
)
;
}
void
AudioNetworkAdaptorImpl
:
:
StopDebugDump
(
)
{
debug_dump_writer_
.
reset
(
nullptr
)
;
}
void
AudioNetworkAdaptorImpl
:
:
DumpNetworkMetrics
(
)
{
if
(
debug_dump_writer_
)
debug_dump_writer_
-
>
DumpNetworkMetrics
(
last_metrics_
config_
.
clock
-
>
TimeInMilliseconds
(
)
)
;
}
}
