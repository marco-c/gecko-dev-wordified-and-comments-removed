#
include
"
webrtc
/
modules
/
audio_coding
/
audio_network_adaptor
/
bitrate_controller
.
h
"
#
include
<
algorithm
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
field_trial
.
h
"
namespace
webrtc
{
namespace
audio_network_adaptor
{
BitrateController
:
:
Config
:
:
Config
(
int
initial_bitrate_bps
int
initial_frame_length_ms
)
:
initial_bitrate_bps
(
initial_bitrate_bps
)
initial_frame_length_ms
(
initial_frame_length_ms
)
{
}
BitrateController
:
:
Config
:
:
~
Config
(
)
=
default
;
BitrateController
:
:
BitrateController
(
const
Config
&
config
)
:
config_
(
config
)
bitrate_bps_
(
config_
.
initial_bitrate_bps
)
frame_length_ms_
(
config_
.
initial_frame_length_ms
)
{
RTC_DCHECK_GT
(
bitrate_bps_
0
)
;
RTC_DCHECK_GT
(
frame_length_ms_
0
)
;
}
void
BitrateController
:
:
MakeDecision
(
const
NetworkMetrics
&
metrics
AudioNetworkAdaptor
:
:
EncoderRuntimeConfig
*
config
)
{
RTC_DCHECK
(
!
config
-
>
bitrate_bps
)
;
if
(
metrics
.
target_audio_bitrate_bps
&
&
metrics
.
overhead_bytes_per_packet
)
{
RTC_DCHECK_EQ
(
"
Enabled
"
webrtc
:
:
field_trial
:
:
FindFullName
(
"
WebRTC
-
SendSideBwe
-
WithOverhead
"
)
)
;
if
(
config
-
>
frame_length_ms
)
frame_length_ms_
=
*
config
-
>
frame_length_ms
;
int
overhead_rate_bps
=
*
metrics
.
overhead_bytes_per_packet
*
8
*
1000
/
frame_length_ms_
;
bitrate_bps_
=
std
:
:
max
(
0
*
metrics
.
target_audio_bitrate_bps
-
overhead_rate_bps
)
;
}
config
-
>
bitrate_bps
=
rtc
:
:
Optional
<
int
>
(
bitrate_bps_
)
;
}
}
}
