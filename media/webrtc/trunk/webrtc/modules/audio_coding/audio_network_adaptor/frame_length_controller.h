#
ifndef
WEBRTC_MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_FRAME_LENGTH_CONTROLLER_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_FRAME_LENGTH_CONTROLLER_H_
#
include
<
map
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
audio_network_adaptor
/
controller
.
h
"
namespace
webrtc
{
class
FrameLengthController
final
:
public
Controller
{
public
:
struct
Config
{
Config
(
const
std
:
:
vector
<
int
>
&
encoder_frame_lengths_ms
int
initial_frame_length_ms
float
fl_increasing_packet_loss_fraction
float
fl_decreasing_packet_loss_fraction
int
fl_20ms_to_60ms_bandwidth_bps
int
fl_60ms_to_20ms_bandwidth_bps
)
;
Config
(
const
Config
&
other
)
;
~
Config
(
)
;
std
:
:
vector
<
int
>
encoder_frame_lengths_ms
;
int
initial_frame_length_ms
;
float
fl_increasing_packet_loss_fraction
;
float
fl_decreasing_packet_loss_fraction
;
int
fl_20ms_to_60ms_bandwidth_bps
;
int
fl_60ms_to_20ms_bandwidth_bps
;
}
;
explicit
FrameLengthController
(
const
Config
&
config
)
;
~
FrameLengthController
(
)
override
;
void
MakeDecision
(
const
NetworkMetrics
&
metrics
AudioNetworkAdaptor
:
:
EncoderRuntimeConfig
*
config
)
override
;
private
:
friend
class
FrameLengthControllerForTest
;
struct
FrameLengthChange
{
FrameLengthChange
(
int
from_frame_length_ms
int
to_frame_length_ms
)
;
~
FrameLengthChange
(
)
;
bool
operator
<
(
const
FrameLengthChange
&
rhs
)
const
;
int
from_frame_length_ms
;
int
to_frame_length_ms
;
}
;
bool
FrameLengthIncreasingDecision
(
const
NetworkMetrics
&
metrics
const
AudioNetworkAdaptor
:
:
EncoderRuntimeConfig
&
config
)
const
;
bool
FrameLengthDecreasingDecision
(
const
NetworkMetrics
&
metrics
const
AudioNetworkAdaptor
:
:
EncoderRuntimeConfig
&
config
)
const
;
const
Config
config_
;
std
:
:
vector
<
int
>
:
:
const_iterator
frame_length_ms_
;
std
:
:
map
<
FrameLengthChange
int
>
frame_length_change_criteria_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
FrameLengthController
)
;
}
;
}
#
endif
