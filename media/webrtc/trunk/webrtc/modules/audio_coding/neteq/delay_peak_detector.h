#
ifndef
MODULES_AUDIO_CODING_NETEQ_DELAY_PEAK_DETECTOR_H_
#
define
MODULES_AUDIO_CODING_NETEQ_DELAY_PEAK_DETECTOR_H_
#
include
<
string
.
h
>
#
include
<
list
>
#
include
<
memory
>
#
include
"
modules
/
audio_coding
/
neteq
/
tick_timer
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
webrtc
{
class
DelayPeakDetector
{
public
:
DelayPeakDetector
(
const
TickTimer
*
tick_timer
)
;
virtual
~
DelayPeakDetector
(
)
;
virtual
void
Reset
(
)
;
virtual
void
SetPacketAudioLength
(
int
length_ms
)
;
virtual
bool
peak_found
(
)
;
virtual
int
MaxPeakHeight
(
)
const
;
virtual
uint64_t
MaxPeakPeriod
(
)
const
;
virtual
bool
Update
(
int
inter_arrival_time
int
target_level
)
;
private
:
static
const
size_t
kMaxNumPeaks
=
8
;
static
const
size_t
kMinPeaksToTrigger
=
2
;
static
const
int
kPeakHeightMs
=
78
;
static
const
int
kMaxPeakPeriodMs
=
10000
;
typedef
struct
{
uint64_t
period_ms
;
int
peak_height_packets
;
}
Peak
;
bool
CheckPeakConditions
(
)
;
std
:
:
list
<
Peak
>
peak_history_
;
bool
peak_found_
;
int
peak_detection_threshold_
;
const
TickTimer
*
tick_timer_
;
std
:
:
unique_ptr
<
TickTimer
:
:
Stopwatch
>
peak_period_stopwatch_
;
const
bool
frame_length_change_experiment_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
DelayPeakDetector
)
;
}
;
}
#
endif
