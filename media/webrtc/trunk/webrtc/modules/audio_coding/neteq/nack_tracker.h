#
ifndef
MODULES_AUDIO_CODING_NETEQ_NACK_TRACKER_H_
#
define
MODULES_AUDIO_CODING_NETEQ_NACK_TRACKER_H_
#
include
<
vector
>
#
include
<
map
>
#
include
"
modules
/
audio_coding
/
include
/
audio_coding_module_typedefs
.
h
"
#
include
"
rtc_base
/
gtest_prod_util
.
h
"
namespace
webrtc
{
class
NackTracker
{
public
:
static
const
size_t
kNackListSizeLimit
=
500
;
static
NackTracker
*
Create
(
int
nack_threshold_packets
)
;
~
NackTracker
(
)
;
void
SetMaxNackListSize
(
size_t
max_nack_list_size
)
;
void
UpdateSampleRate
(
int
sample_rate_hz
)
;
void
UpdateLastDecodedPacket
(
uint16_t
sequence_number
uint32_t
timestamp
)
;
void
UpdateLastReceivedPacket
(
uint16_t
sequence_number
uint32_t
timestamp
)
;
std
:
:
vector
<
uint16_t
>
GetNackList
(
int64_t
round_trip_time_ms
)
const
;
void
Reset
(
)
;
private
:
FRIEND_TEST_ALL_PREFIXES
(
NackTrackerTest
EstimateTimestampAndTimeToPlay
)
;
struct
NackElement
{
NackElement
(
int64_t
initial_time_to_play_ms
uint32_t
initial_timestamp
bool
missing
)
:
time_to_play_ms
(
initial_time_to_play_ms
)
estimated_timestamp
(
initial_timestamp
)
is_missing
(
missing
)
{
}
int64_t
time_to_play_ms
;
uint32_t
estimated_timestamp
;
bool
is_missing
;
}
;
class
NackListCompare
{
public
:
bool
operator
(
)
(
uint16_t
sequence_number_old
uint16_t
sequence_number_new
)
const
{
return
IsNewerSequenceNumber
(
sequence_number_new
sequence_number_old
)
;
}
}
;
typedef
std
:
:
map
<
uint16_t
NackElement
NackListCompare
>
NackList
;
explicit
NackTracker
(
int
nack_threshold_packets
)
;
NackList
GetNackList
(
)
const
;
void
AddToList
(
uint16_t
sequence_number_current_received_rtp
)
;
void
UpdateEstimatedPlayoutTimeBy10ms
(
)
;
void
UpdateSamplesPerPacket
(
uint16_t
sequence_number_current_received_rtp
uint32_t
timestamp_current_received_rtp
)
;
void
UpdateList
(
uint16_t
sequence_number_current_received_rtp
)
;
void
ChangeFromLateToMissing
(
uint16_t
sequence_number_current_received_rtp
)
;
void
LimitNackListSize
(
)
;
uint32_t
EstimateTimestamp
(
uint16_t
sequence_number
)
;
int64_t
TimeToPlay
(
uint32_t
timestamp
)
const
;
const
int
nack_threshold_packets_
;
uint16_t
sequence_num_last_received_rtp_
;
uint32_t
timestamp_last_received_rtp_
;
bool
any_rtp_received_
;
uint16_t
sequence_num_last_decoded_rtp_
;
uint32_t
timestamp_last_decoded_rtp_
;
bool
any_rtp_decoded_
;
int
sample_rate_khz_
;
int
samples_per_packet_
;
NackList
nack_list_
;
size_t
max_nack_list_size_
;
}
;
}
#
endif
