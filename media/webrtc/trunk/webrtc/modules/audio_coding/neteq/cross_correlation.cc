#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
cross_correlation
.
h
"
#
include
<
cstdlib
>
#
include
<
limits
>
#
include
"
webrtc
/
common_audio
/
signal_processing
/
include
/
signal_processing_library
.
h
"
namespace
webrtc
{
int
CrossCorrelationWithAutoShift
(
const
int16_t
*
sequence_1
const
int16_t
*
sequence_2
size_t
sequence_1_length
size_t
cross_correlation_length
int
cross_correlation_step
int32_t
*
cross_correlation
)
{
const
int16_t
max_1
=
WebRtcSpl_MaxAbsValueW16
(
sequence_1
sequence_1_length
)
;
const
int
sequence_2_shift
=
cross_correlation_step
*
(
static_cast
<
int
>
(
cross_correlation_length
)
-
1
)
;
const
int16_t
*
sequence_2_start
=
sequence_2_shift
>
=
0
?
sequence_2
:
sequence_2
+
sequence_2_shift
;
const
size_t
sequence_2_length
=
sequence_1_length
+
std
:
:
abs
(
sequence_2_shift
)
;
const
int16_t
max_2
=
WebRtcSpl_MaxAbsValueW16
(
sequence_2_start
sequence_2_length
)
;
const
int32_t
factor
=
(
max_1
*
max_2
)
/
(
std
:
:
numeric_limits
<
int32_t
>
:
:
max
(
)
/
static_cast
<
int32_t
>
(
sequence_1_length
)
)
;
const
int
scaling
=
factor
=
=
0
?
0
:
31
-
WebRtcSpl_NormW32
(
factor
)
;
WebRtcSpl_CrossCorrelation
(
cross_correlation
sequence_1
sequence_2
sequence_1_length
cross_correlation_length
scaling
cross_correlation_step
)
;
return
scaling
;
}
}
