#
include
<
memory
>
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
builtin_audio_decoder_factory
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
mock
/
mock_external_decoder_pcm16b
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
tools
/
input_audio_file
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
tools
/
neteq_external_decoder_test
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
tools
/
rtp_generator
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
#
include
"
webrtc
/
test
/
gmock
.
h
"
#
include
"
webrtc
/
test
/
testsupport
/
fileutils
.
h
"
namespace
webrtc
{
using
:
:
testing
:
:
_
;
using
:
:
testing
:
:
Return
;
class
NetEqExternalDecoderUnitTest
:
public
test
:
:
NetEqExternalDecoderTest
{
protected
:
static
const
int
kFrameSizeMs
=
10
;
NetEqExternalDecoderUnitTest
(
NetEqDecoder
codec
int
sample_rate_hz
MockExternalPcm16B
*
decoder
)
:
NetEqExternalDecoderTest
(
codec
sample_rate_hz
decoder
)
external_decoder_
(
decoder
)
samples_per_ms_
(
sample_rate_hz
/
1000
)
frame_size_samples_
(
kFrameSizeMs
*
samples_per_ms_
)
rtp_generator_
(
new
test
:
:
RtpGenerator
(
samples_per_ms_
)
)
input_
(
new
int16_t
[
frame_size_samples_
]
)
encoded_
(
new
uint8_t
[
2
*
frame_size_samples_
]
)
payload_size_bytes_
(
0
)
last_send_time_
(
0
)
last_arrival_time_
(
0
)
{
EXPECT_CALL
(
*
external_decoder_
Die
(
)
)
.
Times
(
0
)
;
Init
(
)
;
const
std
:
:
string
file_name
=
webrtc
:
:
test
:
:
ResourcePath
(
"
audio_coding
/
testfile32kHz
"
"
pcm
"
)
;
input_file_
.
reset
(
new
test
:
:
InputAudioFile
(
file_name
)
)
;
}
virtual
~
NetEqExternalDecoderUnitTest
(
)
{
delete
[
]
input_
;
delete
[
]
encoded_
;
EXPECT_CALL
(
*
external_decoder_
Die
(
)
)
.
Times
(
1
)
;
}
virtual
void
GetAndVerifyOutput
(
)
=
0
;
virtual
int
NumExpectedDecodeCalls
(
int
num_loops
)
=
0
;
int
GetNewPacket
(
)
{
if
(
!
input_file_
-
>
Read
(
frame_size_samples_
input_
)
)
{
return
-
1
;
}
payload_size_bytes_
=
WebRtcPcm16b_Encode
(
input_
frame_size_samples_
encoded_
)
;
int
next_send_time
=
rtp_generator_
-
>
GetRtpHeader
(
kPayloadType
frame_size_samples_
&
rtp_header_
)
;
return
next_send_time
;
}
virtual
bool
Lost
(
)
{
return
false
;
}
int
GetArrivalTime
(
int
send_time
)
{
int
arrival_time
=
last_arrival_time_
+
(
send_time
-
last_send_time_
)
;
last_send_time_
=
send_time
;
last_arrival_time_
=
arrival_time
;
return
arrival_time
;
}
void
RunTest
(
int
num_loops
)
{
uint32_t
next_send_time
;
uint32_t
next_arrival_time
;
do
{
next_send_time
=
GetNewPacket
(
)
;
next_arrival_time
=
GetArrivalTime
(
next_send_time
)
;
}
while
(
Lost
(
)
)
;
EXPECT_CALL
(
*
external_decoder_
DecodeInternal
(
_
payload_size_bytes_
1000
*
samples_per_ms_
_
_
)
)
.
Times
(
NumExpectedDecodeCalls
(
num_loops
)
)
;
uint32_t
time_now
=
0
;
for
(
int
k
=
0
;
k
<
num_loops
;
+
+
k
)
{
while
(
time_now
>
=
next_arrival_time
)
{
InsertPacket
(
rtp_header_
rtc
:
:
ArrayView
<
const
uint8_t
>
(
encoded_
payload_size_bytes_
)
next_arrival_time
)
;
do
{
next_send_time
=
GetNewPacket
(
)
;
next_arrival_time
=
GetArrivalTime
(
next_send_time
)
;
}
while
(
Lost
(
)
)
;
}
std
:
:
ostringstream
ss
;
ss
<
<
"
Lap
number
"
<
<
k
<
<
"
.
"
;
SCOPED_TRACE
(
ss
.
str
(
)
)
;
ASSERT_NO_FATAL_FAILURE
(
GetAndVerifyOutput
(
)
)
;
time_now
+
=
kOutputLengthMs
;
}
}
void
InsertPacket
(
WebRtcRTPHeader
rtp_header
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
uint32_t
receive_timestamp
)
override
{
EXPECT_CALL
(
*
external_decoder_
IncomingPacket
(
_
payload
.
size
(
)
rtp_header
.
header
.
sequenceNumber
rtp_header
.
header
.
timestamp
receive_timestamp
)
)
;
NetEqExternalDecoderTest
:
:
InsertPacket
(
rtp_header
payload
receive_timestamp
)
;
}
MockExternalPcm16B
*
external_decoder
(
)
{
return
external_decoder_
.
get
(
)
;
}
void
ResetRtpGenerator
(
test
:
:
RtpGenerator
*
rtp_generator
)
{
rtp_generator_
.
reset
(
rtp_generator
)
;
}
int
samples_per_ms
(
)
const
{
return
samples_per_ms_
;
}
private
:
std
:
:
unique_ptr
<
MockExternalPcm16B
>
external_decoder_
;
int
samples_per_ms_
;
size_t
frame_size_samples_
;
std
:
:
unique_ptr
<
test
:
:
RtpGenerator
>
rtp_generator_
;
int16_t
*
input_
;
uint8_t
*
encoded_
;
size_t
payload_size_bytes_
;
uint32_t
last_send_time_
;
uint32_t
last_arrival_time_
;
std
:
:
unique_ptr
<
test
:
:
InputAudioFile
>
input_file_
;
WebRtcRTPHeader
rtp_header_
;
}
;
class
NetEqExternalVsInternalDecoderTest
:
public
NetEqExternalDecoderUnitTest
public
:
:
testing
:
:
Test
{
protected
:
static
const
size_t
kMaxBlockSize
=
480
;
NetEqExternalVsInternalDecoderTest
(
)
:
NetEqExternalDecoderUnitTest
(
NetEqDecoder
:
:
kDecoderPCM16Bswb32kHz
32000
new
MockExternalPcm16B
(
32000
)
)
sample_rate_hz_
(
32000
)
{
NetEq
:
:
Config
config
;
config
.
sample_rate_hz
=
sample_rate_hz_
;
neteq_internal_
.
reset
(
NetEq
:
:
Create
(
config
CreateBuiltinAudioDecoderFactory
(
)
)
)
;
}
void
SetUp
(
)
override
{
ASSERT_EQ
(
true
neteq_internal_
-
>
RegisterPayloadType
(
kPayloadType
SdpAudioFormat
(
"
L16
"
32000
1
)
)
)
;
}
void
GetAndVerifyOutput
(
)
override
{
bool
muted
;
EXPECT_EQ
(
NetEq
:
:
kOK
neteq_internal_
-
>
GetAudio
(
&
output_internal_
&
muted
)
)
;
ASSERT_FALSE
(
muted
)
;
EXPECT_EQ
(
1u
output_internal_
.
num_channels_
)
;
EXPECT_EQ
(
static_cast
<
size_t
>
(
kOutputLengthMs
*
sample_rate_hz_
/
1000
)
output_internal_
.
samples_per_channel_
)
;
GetOutputAudio
(
&
output_
)
;
for
(
size_t
i
=
0
;
i
<
output_
.
samples_per_channel_
;
+
+
i
)
{
ASSERT_EQ
(
output_
.
data_
[
i
]
output_internal_
.
data_
[
i
]
)
<
<
"
Diff
in
sample
"
<
<
i
<
<
"
.
"
;
}
}
void
InsertPacket
(
WebRtcRTPHeader
rtp_header
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
uint32_t
receive_timestamp
)
override
{
ASSERT_EQ
(
NetEq
:
:
kOK
neteq_internal_
-
>
InsertPacket
(
rtp_header
payload
receive_timestamp
)
)
;
NetEqExternalDecoderUnitTest
:
:
InsertPacket
(
rtp_header
payload
receive_timestamp
)
;
}
int
NumExpectedDecodeCalls
(
int
num_loops
)
override
{
return
num_loops
;
}
private
:
int
sample_rate_hz_
;
std
:
:
unique_ptr
<
NetEq
>
neteq_internal_
;
AudioFrame
output_internal_
;
AudioFrame
output_
;
}
;
TEST_F
(
NetEqExternalVsInternalDecoderTest
RunTest
)
{
RunTest
(
100
)
;
}
class
LargeTimestampJumpTest
:
public
NetEqExternalDecoderUnitTest
public
:
:
testing
:
:
Test
{
protected
:
static
const
size_t
kMaxBlockSize
=
480
;
enum
TestStates
{
kInitialPhase
kNormalPhase
kExpandPhase
kFadedExpandPhase
kRecovered
}
;
LargeTimestampJumpTest
(
)
:
NetEqExternalDecoderUnitTest
(
NetEqDecoder
:
:
kDecoderPCM16B
8000
new
MockExternalPcm16B
(
8000
)
)
test_state_
(
kInitialPhase
)
{
EXPECT_CALL
(
*
external_decoder
(
)
HasDecodePlc
(
)
)
.
WillRepeatedly
(
Return
(
false
)
)
;
}
virtual
void
UpdateState
(
AudioFrame
:
:
SpeechType
output_type
)
{
switch
(
test_state_
)
{
case
kInitialPhase
:
{
if
(
output_type
=
=
AudioFrame
:
:
kNormalSpeech
)
{
test_state_
=
kNormalPhase
;
}
break
;
}
case
kNormalPhase
:
{
if
(
output_type
=
=
AudioFrame
:
:
kPLC
)
{
test_state_
=
kExpandPhase
;
}
break
;
}
case
kExpandPhase
:
{
if
(
output_type
=
=
AudioFrame
:
:
kPLCCNG
)
{
test_state_
=
kFadedExpandPhase
;
}
else
if
(
output_type
=
=
AudioFrame
:
:
kNormalSpeech
)
{
test_state_
=
kRecovered
;
}
break
;
}
case
kFadedExpandPhase
:
{
if
(
output_type
=
=
AudioFrame
:
:
kNormalSpeech
)
{
test_state_
=
kRecovered
;
}
break
;
}
case
kRecovered
:
{
break
;
}
}
}
void
GetAndVerifyOutput
(
)
override
{
AudioFrame
output
;
GetOutputAudio
(
&
output
)
;
UpdateState
(
output
.
speech_type_
)
;
if
(
test_state_
=
=
kExpandPhase
|
|
test_state_
=
=
kFadedExpandPhase
)
{
return
;
}
ASSERT_EQ
(
1u
output
.
num_channels_
)
;
for
(
size_t
i
=
0
;
i
<
output
.
samples_per_channel_
;
+
+
i
)
{
if
(
output
.
data_
[
i
]
!
=
0
)
return
;
}
EXPECT_TRUE
(
false
)
<
<
"
Expected
at
least
one
non
-
zero
sample
in
each
output
block
.
"
;
}
int
NumExpectedDecodeCalls
(
int
num_loops
)
override
{
return
num_loops
-
2
;
}
TestStates
test_state_
;
}
;
TEST_F
(
LargeTimestampJumpTest
JumpLongerThanHalfRange
)
{
static
const
uint16_t
kStartSeqeunceNumber
=
42076
;
static
const
uint32_t
kStartTimestamp
=
2880
;
static
const
uint32_t
kJumpFromTimestamp
=
7200
;
static
const
uint32_t
kJumpToTimestamp
=
2869342376
;
static_assert
(
kJumpFromTimestamp
<
kJumpToTimestamp
"
timestamp
jump
should
not
result
in
wrap
"
)
;
static_assert
(
static_cast
<
uint32_t
>
(
kJumpToTimestamp
-
kJumpFromTimestamp
)
>
0x7FFFFFFF
"
jump
should
be
larger
than
half
range
"
)
;
ResetRtpGenerator
(
new
test
:
:
TimestampJumpRtpGenerator
(
samples_per_ms
(
)
kStartSeqeunceNumber
kStartTimestamp
kJumpFromTimestamp
kJumpToTimestamp
)
)
;
RunTest
(
130
)
;
EXPECT_EQ
(
kRecovered
test_state_
)
;
}
TEST_F
(
LargeTimestampJumpTest
JumpLongerThanHalfRangeAndWrap
)
{
static
const
uint16_t
kStartSeqeunceNumber
=
42076
;
static
const
uint32_t
kStartTimestamp
=
3221223116
;
static
const
uint32_t
kJumpFromTimestamp
=
3221223216
;
static
const
uint32_t
kJumpToTimestamp
=
1073744278
;
static_assert
(
kJumpToTimestamp
<
kJumpFromTimestamp
"
timestamp
jump
should
result
in
wrap
"
)
;
static_assert
(
static_cast
<
uint32_t
>
(
kJumpToTimestamp
-
kJumpFromTimestamp
)
>
0x7FFFFFFF
"
jump
should
be
larger
than
half
range
"
)
;
ResetRtpGenerator
(
new
test
:
:
TimestampJumpRtpGenerator
(
samples_per_ms
(
)
kStartSeqeunceNumber
kStartTimestamp
kJumpFromTimestamp
kJumpToTimestamp
)
)
;
RunTest
(
130
)
;
EXPECT_EQ
(
kRecovered
test_state_
)
;
}
class
ShortTimestampJumpTest
:
public
LargeTimestampJumpTest
{
protected
:
void
UpdateState
(
AudioFrame
:
:
SpeechType
output_type
)
override
{
switch
(
test_state_
)
{
case
kInitialPhase
:
{
if
(
output_type
=
=
AudioFrame
:
:
kNormalSpeech
)
{
test_state_
=
kNormalPhase
;
}
break
;
}
case
kNormalPhase
:
{
if
(
output_type
=
=
AudioFrame
:
:
kPLC
)
{
test_state_
=
kExpandPhase
;
}
break
;
}
case
kExpandPhase
:
{
if
(
output_type
=
=
AudioFrame
:
:
kNormalSpeech
)
{
test_state_
=
kRecovered
;
}
break
;
}
case
kRecovered
:
{
break
;
}
default
:
{
FAIL
(
)
;
}
}
}
int
NumExpectedDecodeCalls
(
int
num_loops
)
override
{
return
num_loops
-
2
;
}
}
;
TEST_F
(
ShortTimestampJumpTest
JumpShorterThanHalfRange
)
{
static
const
uint16_t
kStartSeqeunceNumber
=
42076
;
static
const
uint32_t
kStartTimestamp
=
4711
;
static
const
uint32_t
kJumpFromTimestamp
=
4811
;
static
const
uint32_t
kJumpToTimestamp
=
2147483747
;
static_assert
(
kJumpFromTimestamp
<
kJumpToTimestamp
"
timestamp
jump
should
not
result
in
wrap
"
)
;
static_assert
(
static_cast
<
uint32_t
>
(
kJumpToTimestamp
-
kJumpFromTimestamp
)
<
0x7FFFFFFF
"
jump
should
be
smaller
than
half
range
"
)
;
ResetRtpGenerator
(
new
test
:
:
TimestampJumpRtpGenerator
(
samples_per_ms
(
)
kStartSeqeunceNumber
kStartTimestamp
kJumpFromTimestamp
kJumpToTimestamp
)
)
;
RunTest
(
130
)
;
EXPECT_EQ
(
kRecovered
test_state_
)
;
}
TEST_F
(
ShortTimestampJumpTest
JumpShorterThanHalfRangeAndWrap
)
{
static
const
uint16_t
kStartSeqeunceNumber
=
42076
;
static
const
uint32_t
kStartTimestamp
=
3221227827
;
static
const
uint32_t
kJumpFromTimestamp
=
3221227927
;
static
const
uint32_t
kJumpToTimestamp
=
1073739567
;
static_assert
(
kJumpToTimestamp
<
kJumpFromTimestamp
"
timestamp
jump
should
result
in
wrap
"
)
;
static_assert
(
static_cast
<
uint32_t
>
(
kJumpToTimestamp
-
kJumpFromTimestamp
)
<
0x7FFFFFFF
"
jump
should
be
smaller
than
half
range
"
)
;
ResetRtpGenerator
(
new
test
:
:
TimestampJumpRtpGenerator
(
samples_per_ms
(
)
kStartSeqeunceNumber
kStartTimestamp
kJumpFromTimestamp
kJumpToTimestamp
)
)
;
RunTest
(
130
)
;
EXPECT_EQ
(
kRecovered
test_state_
)
;
}
}
