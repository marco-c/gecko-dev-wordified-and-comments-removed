#
ifndef
WEBRTC_MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_REPLACEMENT_INPUT_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_REPLACEMENT_INPUT_H_
#
include
<
memory
>
#
include
<
set
>
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
tools
/
neteq_input
.
h
"
namespace
webrtc
{
namespace
test
{
class
NetEqReplacementInput
:
public
NetEqInput
{
public
:
NetEqReplacementInput
(
std
:
:
unique_ptr
<
NetEqInput
>
source
uint8_t
replacement_payload_type
const
std
:
:
set
<
uint8_t
>
&
comfort_noise_types
const
std
:
:
set
<
uint8_t
>
&
forbidden_types
)
;
rtc
:
:
Optional
<
int64_t
>
NextPacketTime
(
)
const
override
;
rtc
:
:
Optional
<
int64_t
>
NextOutputEventTime
(
)
const
override
;
std
:
:
unique_ptr
<
PacketData
>
PopPacket
(
)
override
;
void
AdvanceOutputEvent
(
)
override
;
bool
ended
(
)
const
override
;
rtc
:
:
Optional
<
RTPHeader
>
NextHeader
(
)
const
override
;
private
:
void
ReplacePacket
(
)
;
std
:
:
unique_ptr
<
NetEqInput
>
source_
;
const
uint8_t
replacement_payload_type_
;
const
std
:
:
set
<
uint8_t
>
comfort_noise_types_
;
const
std
:
:
set
<
uint8_t
>
forbidden_types_
;
std
:
:
unique_ptr
<
PacketData
>
packet_
;
uint32_t
last_frame_size_timestamps_
=
960
;
}
;
}
}
#
endif
