#
ifndef
MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_QUALITY_TEST_H_
#
define
MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_QUALITY_TEST_H_
#
include
<
fstream
>
#
include
<
memory
>
#
include
"
common_types
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
include
/
neteq
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
tools
/
audio_sink
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
tools
/
input_audio_file
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
tools
/
rtp_generator
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
rtc_base
/
flags
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
namespace
test
{
class
LossModel
{
public
:
virtual
~
LossModel
(
)
{
}
;
virtual
bool
Lost
(
)
=
0
;
}
;
class
NoLoss
:
public
LossModel
{
public
:
bool
Lost
(
)
override
;
}
;
class
UniformLoss
:
public
LossModel
{
public
:
UniformLoss
(
double
loss_rate
)
;
bool
Lost
(
)
override
;
void
set_loss_rate
(
double
loss_rate
)
{
loss_rate_
=
loss_rate
;
}
private
:
double
loss_rate_
;
}
;
class
GilbertElliotLoss
:
public
LossModel
{
public
:
GilbertElliotLoss
(
double
prob_trans_11
double
prob_trans_01
)
;
~
GilbertElliotLoss
(
)
override
;
bool
Lost
(
)
override
;
private
:
double
prob_trans_11_
;
double
prob_trans_01_
;
bool
lost_last_
;
std
:
:
unique_ptr
<
UniformLoss
>
uniform_loss_model_
;
}
;
class
NetEqQualityTest
:
public
:
:
testing
:
:
Test
{
protected
:
NetEqQualityTest
(
int
block_duration_ms
int
in_sampling_khz
int
out_sampling_khz
NetEqDecoder
decoder_type
)
;
~
NetEqQualityTest
(
)
override
;
void
SetUp
(
)
override
;
virtual
int
EncodeBlock
(
int16_t
*
in_data
size_t
block_size_samples
rtc
:
:
Buffer
*
payload
size_t
max_bytes
)
=
0
;
bool
PacketLost
(
)
;
int
DecodeBlock
(
)
;
int
Transmit
(
)
;
void
Simulate
(
)
;
std
:
:
ofstream
&
Log
(
)
;
NetEqDecoder
decoder_type_
;
const
size_t
channels_
;
private
:
int
decoded_time_ms_
;
int
decodable_time_ms_
;
double
drift_factor_
;
int
packet_loss_rate_
;
const
int
block_duration_ms_
;
const
int
in_sampling_khz_
;
const
int
out_sampling_khz_
;
const
size_t
in_size_samples_
;
size_t
payload_size_bytes_
;
size_t
max_payload_bytes_
;
std
:
:
unique_ptr
<
InputAudioFile
>
in_file_
;
std
:
:
unique_ptr
<
AudioSink
>
output_
;
std
:
:
ofstream
log_file_
;
std
:
:
unique_ptr
<
RtpGenerator
>
rtp_generator_
;
std
:
:
unique_ptr
<
NetEq
>
neteq_
;
std
:
:
unique_ptr
<
LossModel
>
loss_model_
;
std
:
:
unique_ptr
<
int16_t
[
]
>
in_data_
;
rtc
:
:
Buffer
payload_
;
AudioFrame
out_frame_
;
RTPHeader
rtp_header_
;
size_t
total_payload_size_bytes_
;
}
;
}
}
#
endif
