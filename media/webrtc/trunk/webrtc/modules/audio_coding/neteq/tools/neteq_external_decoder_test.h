#
ifndef
MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_EXTERNAL_DECODER_TEST_H_
#
define
MODULES_AUDIO_CODING_NETEQ_TOOLS_NETEQ_EXTERNAL_DECODER_TEST_H_
#
include
<
memory
>
#
include
<
string
>
#
include
"
api
/
audio_codecs
/
audio_decoder
.
h
"
#
include
"
common_types
.
h
"
#
include
"
modules
/
audio_coding
/
neteq
/
include
/
neteq
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
namespace
webrtc
{
namespace
test
{
class
NetEqExternalDecoderTest
{
protected
:
static
const
uint8_t
kPayloadType
=
95
;
static
const
int
kOutputLengthMs
=
10
;
NetEqExternalDecoderTest
(
NetEqDecoder
codec
int
sample_rate_hz
AudioDecoder
*
decoder
)
;
virtual
~
NetEqExternalDecoderTest
(
)
{
}
void
Init
(
)
;
virtual
void
InsertPacket
(
RTPHeader
rtp_header
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
uint32_t
receive_timestamp
)
;
void
GetOutputAudio
(
AudioFrame
*
output
)
;
NetEq
*
neteq
(
)
{
return
neteq_
.
get
(
)
;
}
private
:
NetEqDecoder
codec_
;
std
:
:
string
name_
=
"
dummy
name
"
;
AudioDecoder
*
decoder_
;
int
sample_rate_hz_
;
size_t
channels_
;
std
:
:
unique_ptr
<
NetEq
>
neteq_
;
}
;
}
}
#
endif
