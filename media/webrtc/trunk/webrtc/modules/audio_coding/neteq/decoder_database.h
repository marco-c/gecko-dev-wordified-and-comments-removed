#
ifndef
WEBRTC_MODULES_AUDIO_CODING_NETEQ_DECODER_DATABASE_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_NETEQ_DECODER_DATABASE_H_
#
include
<
map
>
#
include
<
string
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
audio_decoder_impl
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
packet
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
DecoderDatabase
{
public
:
enum
DatabaseReturnCodes
{
kOK
=
0
kInvalidRtpPayloadType
=
-
1
kCodecNotSupported
=
-
2
kInvalidSampleRate
=
-
3
kDecoderExists
=
-
4
kDecoderNotFound
=
-
5
kInvalidPointer
=
-
6
}
;
struct
DecoderInfo
{
DecoderInfo
(
)
=
default
;
DecoderInfo
(
NetEqDecoder
ct
int
fs
AudioDecoder
*
dec
bool
ext
)
:
DecoderInfo
(
ct
"
"
fs
dec
ext
)
{
}
DecoderInfo
(
NetEqDecoder
ct
const
std
:
:
string
&
nm
int
fs
AudioDecoder
*
dec
bool
ext
)
:
codec_type
(
ct
)
name
(
nm
)
fs_hz
(
fs
)
rtp_sample_rate_hz
(
fs
)
decoder
(
dec
)
external
(
ext
)
{
}
~
DecoderInfo
(
)
;
NetEqDecoder
codec_type
=
NetEqDecoder
:
:
kDecoderArbitrary
;
std
:
:
string
name
;
int
fs_hz
=
8000
;
int
rtp_sample_rate_hz
=
8000
;
AudioDecoder
*
decoder
=
nullptr
;
bool
external
=
false
;
}
;
static
const
uint8_t
kRtpPayloadTypeError
=
0xFF
;
DecoderDatabase
(
)
;
virtual
~
DecoderDatabase
(
)
;
virtual
bool
Empty
(
)
const
;
virtual
int
Size
(
)
const
;
virtual
void
Reset
(
)
;
virtual
int
RegisterPayload
(
uint8_t
rtp_payload_type
NetEqDecoder
codec_type
const
std
:
:
string
&
name
)
;
virtual
int
InsertExternal
(
uint8_t
rtp_payload_type
NetEqDecoder
codec_type
const
std
:
:
string
&
codec_name
int
fs_hz
AudioDecoder
*
decoder
)
;
virtual
int
Remove
(
uint8_t
rtp_payload_type
)
;
virtual
const
DecoderInfo
*
GetDecoderInfo
(
uint8_t
rtp_payload_type
)
const
;
virtual
uint8_t
GetRtpPayloadType
(
NetEqDecoder
codec_type
)
const
;
virtual
AudioDecoder
*
GetDecoder
(
uint8_t
rtp_payload_type
)
;
virtual
bool
IsType
(
uint8_t
rtp_payload_type
NetEqDecoder
codec_type
)
const
;
virtual
bool
IsComfortNoise
(
uint8_t
rtp_payload_type
)
const
;
virtual
bool
IsDtmf
(
uint8_t
rtp_payload_type
)
const
;
virtual
bool
IsRed
(
uint8_t
rtp_payload_type
)
const
;
virtual
int
SetActiveDecoder
(
uint8_t
rtp_payload_type
bool
*
new_decoder
)
;
virtual
AudioDecoder
*
GetActiveDecoder
(
)
;
virtual
int
SetActiveCngDecoder
(
uint8_t
rtp_payload_type
)
;
virtual
AudioDecoder
*
GetActiveCngDecoder
(
)
;
virtual
int
CheckPayloadTypes
(
const
PacketList
&
packet_list
)
const
;
private
:
typedef
std
:
:
map
<
uint8_t
DecoderInfo
>
DecoderMap
;
DecoderMap
decoders_
;
int
active_decoder_
;
int
active_cng_decoder_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
DecoderDatabase
)
;
}
;
}
#
endif
