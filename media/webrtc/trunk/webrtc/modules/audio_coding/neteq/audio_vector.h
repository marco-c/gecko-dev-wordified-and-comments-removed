#
ifndef
WEBRTC_MODULES_AUDIO_CODING_NETEQ_AUDIO_VECTOR_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_NETEQ_AUDIO_VECTOR_H_
#
include
<
string
.
h
>
#
include
<
memory
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
AudioVector
{
public
:
AudioVector
(
)
;
explicit
AudioVector
(
size_t
initial_size
)
;
virtual
~
AudioVector
(
)
;
virtual
void
Clear
(
)
;
virtual
void
CopyTo
(
AudioVector
*
copy_to
)
const
;
virtual
void
CopyTo
(
size_t
length
size_t
position
int16_t
*
copy_to
)
const
;
virtual
void
PushFront
(
const
AudioVector
&
prepend_this
)
;
virtual
void
PushFront
(
const
int16_t
*
prepend_this
size_t
length
)
;
virtual
void
PushBack
(
const
AudioVector
&
append_this
)
;
virtual
void
PushBack
(
const
AudioVector
&
append_this
size_t
length
size_t
position
)
;
virtual
void
PushBack
(
const
int16_t
*
append_this
size_t
length
)
;
virtual
void
PopFront
(
size_t
length
)
;
virtual
void
PopBack
(
size_t
length
)
;
virtual
void
Extend
(
size_t
extra_length
)
;
virtual
void
InsertAt
(
const
int16_t
*
insert_this
size_t
length
size_t
position
)
;
virtual
void
InsertZerosAt
(
size_t
length
size_t
position
)
;
virtual
void
OverwriteAt
(
const
AudioVector
&
insert_this
size_t
length
size_t
position
)
;
virtual
void
OverwriteAt
(
const
int16_t
*
insert_this
size_t
length
size_t
position
)
;
virtual
void
CrossFade
(
const
AudioVector
&
append_this
size_t
fade_length
)
;
virtual
size_t
Size
(
)
const
;
virtual
bool
Empty
(
)
const
;
const
int16_t
&
operator
[
]
(
size_t
index
)
const
;
int16_t
&
operator
[
]
(
size_t
index
)
;
private
:
static
const
size_t
kDefaultInitialSize
=
10
;
void
Reserve
(
size_t
n
)
;
void
InsertByPushBack
(
const
int16_t
*
insert_this
size_t
length
size_t
position
)
;
void
InsertByPushFront
(
const
int16_t
*
insert_this
size_t
length
size_t
position
)
;
void
InsertZerosByPushBack
(
size_t
length
size_t
position
)
;
void
InsertZerosByPushFront
(
size_t
length
size_t
position
)
;
std
:
:
unique_ptr
<
int16_t
[
]
>
array_
;
size_t
capacity_
;
size_t
begin_index_
;
size_t
end_index_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
AudioVector
)
;
}
;
}
#
endif
