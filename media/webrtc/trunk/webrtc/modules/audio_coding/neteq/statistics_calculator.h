#
ifndef
WEBRTC_MODULES_AUDIO_CODING_NETEQ_STATISTICS_CALCULATOR_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_NETEQ_STATISTICS_CALCULATOR_H_
#
include
<
deque
>
#
include
<
string
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
include
/
neteq
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
DecisionLogic
;
class
DelayManager
;
class
StatisticsCalculator
{
public
:
StatisticsCalculator
(
)
;
virtual
~
StatisticsCalculator
(
)
;
void
Reset
(
)
;
void
ResetMcu
(
)
;
void
ExpandedVoiceSamples
(
size_t
num_samples
)
;
void
ExpandedNoiseSamples
(
size_t
num_samples
)
;
void
PreemptiveExpandedSamples
(
size_t
num_samples
)
;
void
AcceleratedSamples
(
size_t
num_samples
)
;
void
AddZeros
(
size_t
num_samples
)
;
void
PacketsDiscarded
(
size_t
num_packets
)
;
void
LostSamples
(
size_t
num_samples
)
;
void
IncreaseCounter
(
size_t
num_samples
int
fs_hz
)
;
void
StoreWaitingTime
(
int
waiting_time_ms
)
;
void
SecondaryDecodedSamples
(
int
num_samples
)
;
virtual
void
LogDelayedPacketOutageEvent
(
int
outage_duration_ms
)
;
void
GetNetworkStatistics
(
int
fs_hz
size_t
num_samples_in_buffers
size_t
samples_per_packet
const
DelayManager
&
delay_manager
const
DecisionLogic
&
decision_logic
NetEqNetworkStatistics
*
stats
)
;
private
:
static
const
int
kMaxReportPeriod
=
60
;
static
const
size_t
kLenWaitingTimes
=
100
;
class
PeriodicUmaLogger
{
public
:
PeriodicUmaLogger
(
const
std
:
:
string
&
uma_name
int
report_interval_ms
int
max_value
)
;
virtual
~
PeriodicUmaLogger
(
)
;
void
AdvanceClock
(
int
step_ms
)
;
protected
:
void
LogToUma
(
int
value
)
const
;
virtual
int
Metric
(
)
const
=
0
;
virtual
void
Reset
(
)
=
0
;
const
std
:
:
string
uma_name_
;
const
int
report_interval_ms_
;
const
int
max_value_
;
int
timer_
=
0
;
}
;
class
PeriodicUmaCount
final
:
public
PeriodicUmaLogger
{
public
:
PeriodicUmaCount
(
const
std
:
:
string
&
uma_name
int
report_interval_ms
int
max_value
)
;
~
PeriodicUmaCount
(
)
override
;
void
RegisterSample
(
)
;
protected
:
int
Metric
(
)
const
override
;
void
Reset
(
)
override
;
private
:
int
counter_
=
0
;
}
;
class
PeriodicUmaAverage
final
:
public
PeriodicUmaLogger
{
public
:
PeriodicUmaAverage
(
const
std
:
:
string
&
uma_name
int
report_interval_ms
int
max_value
)
;
~
PeriodicUmaAverage
(
)
override
;
void
RegisterSample
(
int
value
)
;
protected
:
int
Metric
(
)
const
override
;
void
Reset
(
)
override
;
private
:
double
sum_
=
0
.
0
;
int
counter_
=
0
;
}
;
static
uint16_t
CalculateQ14Ratio
(
size_t
numerator
uint32_t
denominator
)
;
size_t
preemptive_samples_
;
size_t
accelerate_samples_
;
size_t
added_zero_samples_
;
size_t
expanded_speech_samples_
;
size_t
expanded_noise_samples_
;
size_t
discarded_packets_
;
size_t
lost_timestamps_
;
uint32_t
timestamps_since_last_report_
;
std
:
:
deque
<
int
>
waiting_times_
;
uint32_t
secondary_decoded_samples_
;
PeriodicUmaCount
delayed_packet_outage_counter_
;
PeriodicUmaAverage
excess_buffer_delay_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
StatisticsCalculator
)
;
}
;
}
#
endif
