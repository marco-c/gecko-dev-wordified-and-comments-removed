#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
normal
.
h
"
#
include
<
string
.
h
>
#
include
<
algorithm
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
common_audio
/
signal_processing
/
include
/
signal_processing_library
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
audio_decoder
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
audio_multi_vector
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
background_noise
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
decoder_database
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
expand
.
h
"
namespace
webrtc
{
int
Normal
:
:
Process
(
const
int16_t
*
input
size_t
length
Modes
last_mode
int16_t
*
external_mute_factor_array
AudioMultiVector
*
output
)
{
if
(
length
=
=
0
)
{
output
-
>
Clear
(
)
;
return
static_cast
<
int
>
(
length
)
;
}
RTC_DCHECK
(
output
-
>
Empty
(
)
)
;
if
(
length
%
output
-
>
Channels
(
)
!
=
0
)
{
output
-
>
Clear
(
)
;
return
0
;
}
output
-
>
PushBackInterleaved
(
input
length
)
;
const
int
fs_mult
=
fs_hz_
/
8000
;
RTC_DCHECK_GT
(
fs_mult
0
)
;
const
int
fs_shift
=
30
-
WebRtcSpl_NormW32
(
fs_mult
)
;
if
(
last_mode
=
=
kModeExpand
)
{
expand_
-
>
SetParametersForNormalAfterExpand
(
)
;
AudioMultiVector
expanded
(
output
-
>
Channels
(
)
)
;
expand_
-
>
Process
(
&
expanded
)
;
expand_
-
>
Reset
(
)
;
size_t
length_per_channel
=
length
/
output
-
>
Channels
(
)
;
std
:
:
unique_ptr
<
int16_t
[
]
>
signal
(
new
int16_t
[
length_per_channel
]
)
;
for
(
size_t
channel_ix
=
0
;
channel_ix
<
output
-
>
Channels
(
)
;
+
+
channel_ix
)
{
external_mute_factor_array
[
channel_ix
]
=
static_cast
<
int16_t
>
(
(
external_mute_factor_array
[
channel_ix
]
*
expand_
-
>
MuteFactor
(
channel_ix
)
)
>
>
14
)
;
(
*
output
)
[
channel_ix
]
.
CopyTo
(
length_per_channel
0
signal
.
get
(
)
)
;
int16_t
decoded_max
=
WebRtcSpl_MaxAbsValueW16
(
signal
.
get
(
)
length_per_channel
)
;
size_t
energy_length
=
std
:
:
min
(
static_cast
<
size_t
>
(
fs_mult
*
64
)
length_per_channel
)
;
int
scaling
=
6
+
fs_shift
-
WebRtcSpl_NormW32
(
decoded_max
*
decoded_max
)
;
scaling
=
std
:
:
max
(
scaling
0
)
;
int32_t
energy
=
WebRtcSpl_DotProductWithScale
(
signal
.
get
(
)
signal
.
get
(
)
energy_length
scaling
)
;
int32_t
scaled_energy_length
=
static_cast
<
int32_t
>
(
energy_length
>
>
scaling
)
;
if
(
scaled_energy_length
>
0
)
{
energy
=
energy
/
scaled_energy_length
;
}
else
{
energy
=
0
;
}
int
mute_factor
;
if
(
(
energy
!
=
0
)
&
&
(
energy
>
background_noise_
.
Energy
(
channel_ix
)
)
)
{
scaling
=
WebRtcSpl_NormW32
(
energy
)
-
16
;
int32_t
bgn_energy
=
WEBRTC_SPL_SHIFT_W32
(
background_noise_
.
Energy
(
channel_ix
)
scaling
+
14
)
;
int16_t
energy_scaled
=
static_cast
<
int16_t
>
(
WEBRTC_SPL_SHIFT_W32
(
energy
scaling
)
)
;
int32_t
ratio
=
WebRtcSpl_DivW32W16
(
bgn_energy
energy_scaled
)
;
mute_factor
=
WebRtcSpl_SqrtFloor
(
ratio
<
<
14
)
;
}
else
{
mute_factor
=
16384
;
}
if
(
mute_factor
>
external_mute_factor_array
[
channel_ix
]
)
{
external_mute_factor_array
[
channel_ix
]
=
static_cast
<
int16_t
>
(
std
:
:
min
(
mute_factor
16384
)
)
;
}
int
increment
=
64
/
fs_mult
;
for
(
size_t
i
=
0
;
i
<
length_per_channel
;
i
+
+
)
{
RTC_DCHECK_LT
(
channel_ix
output
-
>
Channels
(
)
)
;
RTC_DCHECK_LT
(
i
output
-
>
Size
(
)
)
;
int32_t
scaled_signal
=
(
*
output
)
[
channel_ix
]
[
i
]
*
external_mute_factor_array
[
channel_ix
]
;
(
*
output
)
[
channel_ix
]
[
i
]
=
static_cast
<
int16_t
>
(
(
scaled_signal
+
8192
)
>
>
14
)
;
external_mute_factor_array
[
channel_ix
]
=
static_cast
<
int16_t
>
(
std
:
:
min
(
external_mute_factor_array
[
channel_ix
]
+
increment
16384
)
)
;
}
RTC_DCHECK_LT
(
fs_shift
3
)
;
increment
=
4
>
>
fs_shift
;
int
fraction
=
increment
;
const
size_t
interp_len_samples
=
std
:
:
min
(
static_cast
<
size_t
>
(
8
*
fs_mult
)
output
-
>
Size
(
)
)
;
for
(
size_t
i
=
0
;
i
<
interp_len_samples
;
+
+
i
)
{
RTC_DCHECK_LT
(
channel_ix
output
-
>
Channels
(
)
)
;
RTC_DCHECK_LT
(
i
output
-
>
Size
(
)
)
;
(
*
output
)
[
channel_ix
]
[
i
]
=
static_cast
<
int16_t
>
(
(
fraction
*
(
*
output
)
[
channel_ix
]
[
i
]
+
(
32
-
fraction
)
*
expanded
[
channel_ix
]
[
i
]
+
8
)
>
>
5
)
;
fraction
+
=
increment
;
}
}
}
else
if
(
last_mode
=
=
kModeRfc3389Cng
)
{
RTC_DCHECK_EQ
(
output
-
>
Channels
(
)
1
)
;
static
const
size_t
kCngLength
=
48
;
RTC_DCHECK_LE
(
8
*
fs_mult
kCngLength
)
;
int16_t
cng_output
[
kCngLength
]
;
external_mute_factor_array
[
0
]
=
16384
;
ComfortNoiseDecoder
*
cng_decoder
=
decoder_database_
-
>
GetActiveCngDecoder
(
)
;
if
(
cng_decoder
)
{
if
(
!
cng_decoder
-
>
Generate
(
cng_output
0
)
)
{
memset
(
cng_output
0
sizeof
(
cng_output
)
)
;
}
}
else
{
(
*
output
)
[
0
]
.
CopyTo
(
fs_mult
*
8
0
cng_output
)
;
}
RTC_DCHECK_LT
(
fs_shift
3
)
;
int16_t
increment
=
4
>
>
fs_shift
;
int16_t
fraction
=
increment
;
for
(
size_t
i
=
0
;
i
<
static_cast
<
size_t
>
(
8
*
fs_mult
)
;
i
+
+
)
{
(
*
output
)
[
0
]
[
i
]
=
(
fraction
*
(
*
output
)
[
0
]
[
i
]
+
(
32
-
fraction
)
*
cng_output
[
i
]
+
8
)
>
>
5
;
fraction
+
=
increment
;
}
}
else
if
(
external_mute_factor_array
[
0
]
<
16384
)
{
int
increment
=
64
/
fs_mult
;
size_t
length_per_channel
=
length
/
output
-
>
Channels
(
)
;
for
(
size_t
i
=
0
;
i
<
length_per_channel
;
i
+
+
)
{
for
(
size_t
channel_ix
=
0
;
channel_ix
<
output
-
>
Channels
(
)
;
+
+
channel_ix
)
{
RTC_DCHECK_LT
(
channel_ix
output
-
>
Channels
(
)
)
;
RTC_DCHECK_LT
(
i
output
-
>
Size
(
)
)
;
int32_t
scaled_signal
=
(
*
output
)
[
channel_ix
]
[
i
]
*
external_mute_factor_array
[
channel_ix
]
;
(
*
output
)
[
channel_ix
]
[
i
]
=
static_cast
<
int16_t
>
(
(
scaled_signal
+
8192
)
>
>
14
)
;
external_mute_factor_array
[
channel_ix
]
=
static_cast
<
int16_t
>
(
std
:
:
min
(
16384
external_mute_factor_array
[
channel_ix
]
+
increment
)
)
;
}
}
}
return
static_cast
<
int
>
(
length
)
;
}
}
