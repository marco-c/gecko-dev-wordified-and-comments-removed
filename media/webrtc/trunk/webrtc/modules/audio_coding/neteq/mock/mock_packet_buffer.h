#
ifndef
MODULES_AUDIO_CODING_NETEQ_MOCK_MOCK_PACKET_BUFFER_H_
#
define
MODULES_AUDIO_CODING_NETEQ_MOCK_MOCK_PACKET_BUFFER_H_
#
include
"
modules
/
audio_coding
/
neteq
/
packet_buffer
.
h
"
#
include
"
test
/
gmock
.
h
"
namespace
webrtc
{
class
MockPacketBuffer
:
public
PacketBuffer
{
public
:
MockPacketBuffer
(
size_t
max_number_of_packets
const
TickTimer
*
tick_timer
)
:
PacketBuffer
(
max_number_of_packets
tick_timer
)
{
}
virtual
~
MockPacketBuffer
(
)
{
Die
(
)
;
}
MOCK_METHOD0
(
Die
void
(
)
)
;
MOCK_METHOD0
(
Flush
void
(
)
)
;
MOCK_CONST_METHOD0
(
Empty
bool
(
)
)
;
int
InsertPacket
(
Packet
&
&
packet
StatisticsCalculator
*
stats
)
{
return
InsertPacketWrapped
(
&
packet
stats
)
;
}
MOCK_METHOD2
(
InsertPacketWrapped
int
(
Packet
*
packet
StatisticsCalculator
*
stats
)
)
;
MOCK_METHOD5
(
InsertPacketList
int
(
PacketList
*
packet_list
const
DecoderDatabase
&
decoder_database
rtc
:
:
Optional
<
uint8_t
>
*
current_rtp_payload_type
rtc
:
:
Optional
<
uint8_t
>
*
current_cng_rtp_payload_type
StatisticsCalculator
*
stats
)
)
;
MOCK_CONST_METHOD1
(
NextTimestamp
int
(
uint32_t
*
next_timestamp
)
)
;
MOCK_CONST_METHOD2
(
NextHigherTimestamp
int
(
uint32_t
timestamp
uint32_t
*
next_timestamp
)
)
;
MOCK_CONST_METHOD0
(
PeekNextPacket
const
Packet
*
(
)
)
;
MOCK_METHOD0
(
GetNextPacket
rtc
:
:
Optional
<
Packet
>
(
)
)
;
MOCK_METHOD1
(
DiscardNextPacket
int
(
StatisticsCalculator
*
stats
)
)
;
MOCK_METHOD3
(
DiscardOldPackets
void
(
uint32_t
timestamp_limit
uint32_t
horizon_samples
StatisticsCalculator
*
stats
)
)
;
MOCK_METHOD2
(
DiscardAllOldPackets
void
(
uint32_t
timestamp_limit
StatisticsCalculator
*
stats
)
)
;
MOCK_CONST_METHOD0
(
NumPacketsInBuffer
size_t
(
)
)
;
MOCK_METHOD1
(
IncrementWaitingTimes
void
(
int
)
)
;
MOCK_CONST_METHOD0
(
current_memory_bytes
int
(
)
)
;
}
;
}
#
endif
