#
ifndef
WEBRTC_MODULES_AUDIO_CODING_NETEQ_NETEQ_IMPL_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_NETEQ_NETEQ_IMPL_H_
#
include
<
string
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
audio_multi_vector
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
defines
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
include
/
neteq
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
packet
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
random_vector
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
rtcp
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
statistics_calculator
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
Accelerate
;
class
BackgroundNoise
;
class
BufferLevelFilter
;
class
ComfortNoise
;
class
CriticalSectionWrapper
;
class
DecisionLogic
;
class
DecoderDatabase
;
class
DelayManager
;
class
DelayPeakDetector
;
class
DtmfBuffer
;
class
DtmfToneGenerator
;
class
Expand
;
class
Merge
;
class
Nack
;
class
Normal
;
class
PacketBuffer
;
class
PayloadSplitter
;
class
PostDecodeVad
;
class
PreemptiveExpand
;
class
RandomVector
;
class
SyncBuffer
;
class
TimestampScaler
;
struct
AccelerateFactory
;
struct
DtmfEvent
;
struct
ExpandFactory
;
struct
PreemptiveExpandFactory
;
class
NetEqImpl
:
public
webrtc
:
:
NetEq
{
public
:
NetEqImpl
(
const
NetEq
:
:
Config
&
config
BufferLevelFilter
*
buffer_level_filter
DecoderDatabase
*
decoder_database
DelayManager
*
delay_manager
DelayPeakDetector
*
delay_peak_detector
DtmfBuffer
*
dtmf_buffer
DtmfToneGenerator
*
dtmf_tone_generator
PacketBuffer
*
packet_buffer
PayloadSplitter
*
payload_splitter
TimestampScaler
*
timestamp_scaler
AccelerateFactory
*
accelerate_factory
ExpandFactory
*
expand_factory
PreemptiveExpandFactory
*
preemptive_expand_factory
bool
create_components
=
true
)
;
~
NetEqImpl
(
)
override
;
int
InsertPacket
(
const
WebRtcRTPHeader
&
rtp_header
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
uint32_t
receive_timestamp
)
override
;
int
InsertSyncPacket
(
const
WebRtcRTPHeader
&
rtp_header
uint32_t
receive_timestamp
)
override
;
int
GetAudio
(
size_t
max_length
int16_t
*
output_audio
size_t
*
samples_per_channel
size_t
*
num_channels
NetEqOutputType
*
type
)
override
;
int
RegisterPayloadType
(
NetEqDecoder
codec
const
std
:
:
string
&
codec_name
uint8_t
rtp_payload_type
)
override
;
int
RegisterExternalDecoder
(
AudioDecoder
*
decoder
NetEqDecoder
codec
const
std
:
:
string
&
codec_name
uint8_t
rtp_payload_type
int
sample_rate_hz
)
override
;
int
RemovePayloadType
(
uint8_t
rtp_payload_type
)
override
;
bool
SetMinimumDelay
(
int
delay_ms
)
override
;
bool
SetMaximumDelay
(
int
delay_ms
)
override
;
int
LeastRequiredDelayMs
(
)
const
override
;
int
SetTargetDelay
(
)
override
;
int
TargetDelay
(
)
override
;
int
CurrentDelayMs
(
)
const
override
;
void
SetPlayoutMode
(
NetEqPlayoutMode
mode
)
override
;
NetEqPlayoutMode
PlayoutMode
(
)
const
override
;
int
NetworkStatistics
(
NetEqNetworkStatistics
*
stats
)
override
;
void
GetRtcpStatistics
(
RtcpStatistics
*
stats
)
override
;
void
GetRtcpStatisticsNoReset
(
RtcpStatistics
*
stats
)
override
;
void
EnableVad
(
)
override
;
void
DisableVad
(
)
override
;
bool
GetPlayoutTimestamp
(
uint32_t
*
timestamp
)
override
;
int
last_output_sample_rate_hz
(
)
const
override
;
int
SetTargetNumberOfChannels
(
)
override
;
int
SetTargetSampleRate
(
)
override
;
int
LastError
(
)
const
override
;
int
LastDecoderError
(
)
override
;
void
FlushBuffers
(
)
override
;
void
PacketBufferStatistics
(
int
*
current_num_packets
int
*
max_num_packets
)
const
override
;
void
EnableNack
(
size_t
max_nack_list_size
)
override
;
void
DisableNack
(
)
override
;
std
:
:
vector
<
uint16_t
>
GetNackList
(
int64_t
round_trip_time_ms
)
const
override
;
const
SyncBuffer
*
sync_buffer_for_test
(
)
const
;
protected
:
static
const
int
kOutputSizeMs
=
10
;
static
const
size_t
kMaxFrameSize
=
2880
;
static
const
size_t
kSyncBufferSize
=
2
*
kMaxFrameSize
;
int
InsertPacketInternal
(
const
WebRtcRTPHeader
&
rtp_header
rtc
:
:
ArrayView
<
const
uint8_t
>
payload
uint32_t
receive_timestamp
bool
is_sync_packet
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
GetAudioInternal
(
size_t
max_length
int16_t
*
output
size_t
*
samples_per_channel
size_t
*
num_channels
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
GetDecision
(
Operations
*
operation
PacketList
*
packet_list
DtmfEvent
*
dtmf_event
bool
*
play_dtmf
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
Decode
(
PacketList
*
packet_list
Operations
*
operation
int
*
decoded_length
AudioDecoder
:
:
SpeechType
*
speech_type
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
DecodeCng
(
AudioDecoder
*
decoder
int
*
decoded_length
AudioDecoder
:
:
SpeechType
*
speech_type
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
DecodeLoop
(
PacketList
*
packet_list
const
Operations
&
operation
AudioDecoder
*
decoder
int
*
decoded_length
AudioDecoder
:
:
SpeechType
*
speech_type
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
void
DoNormal
(
const
int16_t
*
decoded_buffer
size_t
decoded_length
AudioDecoder
:
:
SpeechType
speech_type
bool
play_dtmf
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
void
DoMerge
(
int16_t
*
decoded_buffer
size_t
decoded_length
AudioDecoder
:
:
SpeechType
speech_type
bool
play_dtmf
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
DoExpand
(
bool
play_dtmf
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
DoAccelerate
(
int16_t
*
decoded_buffer
size_t
decoded_length
AudioDecoder
:
:
SpeechType
speech_type
bool
play_dtmf
bool
fast_accelerate
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
DoPreemptiveExpand
(
int16_t
*
decoded_buffer
size_t
decoded_length
AudioDecoder
:
:
SpeechType
speech_type
bool
play_dtmf
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
DoRfc3389Cng
(
PacketList
*
packet_list
bool
play_dtmf
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
void
DoCodecInternalCng
(
const
int16_t
*
decoded_buffer
size_t
decoded_length
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
DoDtmf
(
const
DtmfEvent
&
dtmf_event
bool
*
play_dtmf
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
void
DoAlternativePlc
(
bool
increase_timestamp
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
DtmfOverdub
(
const
DtmfEvent
&
dtmf_event
size_t
num_channels
int16_t
*
output
)
const
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
int
ExtractPackets
(
size_t
required_samples
PacketList
*
packet_list
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
void
SetSampleRateAndChannels
(
int
fs_hz
size_t
channels
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
NetEqOutputType
LastOutputType
(
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
virtual
void
UpdatePlcComponents
(
int
fs_hz
size_t
channels
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
virtual
void
CreateDecisionLogic
(
)
EXCLUSIVE_LOCKS_REQUIRED
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
crit_sect_
;
const
rtc
:
:
scoped_ptr
<
BufferLevelFilter
>
buffer_level_filter_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
DecoderDatabase
>
decoder_database_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
DelayManager
>
delay_manager_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
DelayPeakDetector
>
delay_peak_detector_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
DtmfBuffer
>
dtmf_buffer_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
DtmfToneGenerator
>
dtmf_tone_generator_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
PacketBuffer
>
packet_buffer_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
PayloadSplitter
>
payload_splitter_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
TimestampScaler
>
timestamp_scaler_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
PostDecodeVad
>
vad_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
ExpandFactory
>
expand_factory_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
AccelerateFactory
>
accelerate_factory_
GUARDED_BY
(
crit_sect_
)
;
const
rtc
:
:
scoped_ptr
<
PreemptiveExpandFactory
>
preemptive_expand_factory_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
BackgroundNoise
>
background_noise_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
DecisionLogic
>
decision_logic_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
AudioMultiVector
>
algorithm_buffer_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
SyncBuffer
>
sync_buffer_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
Expand
>
expand_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
Normal
>
normal_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
Merge
>
merge_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
Accelerate
>
accelerate_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
PreemptiveExpand
>
preemptive_expand_
GUARDED_BY
(
crit_sect_
)
;
RandomVector
random_vector_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
ComfortNoise
>
comfort_noise_
GUARDED_BY
(
crit_sect_
)
;
Rtcp
rtcp_
GUARDED_BY
(
crit_sect_
)
;
StatisticsCalculator
stats_
GUARDED_BY
(
crit_sect_
)
;
int
fs_hz_
GUARDED_BY
(
crit_sect_
)
;
int
fs_mult_
GUARDED_BY
(
crit_sect_
)
;
int
last_output_sample_rate_hz_
GUARDED_BY
(
crit_sect_
)
;
size_t
output_size_samples_
GUARDED_BY
(
crit_sect_
)
;
size_t
decoder_frame_length_
GUARDED_BY
(
crit_sect_
)
;
Modes
last_mode_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
int16_t
[
]
>
mute_factor_array_
GUARDED_BY
(
crit_sect_
)
;
size_t
decoded_buffer_length_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
int16_t
[
]
>
decoded_buffer_
GUARDED_BY
(
crit_sect_
)
;
uint32_t
playout_timestamp_
GUARDED_BY
(
crit_sect_
)
;
bool
new_codec_
GUARDED_BY
(
crit_sect_
)
;
uint32_t
timestamp_
GUARDED_BY
(
crit_sect_
)
;
bool
reset_decoder_
GUARDED_BY
(
crit_sect_
)
;
uint8_t
current_rtp_payload_type_
GUARDED_BY
(
crit_sect_
)
;
uint8_t
current_cng_rtp_payload_type_
GUARDED_BY
(
crit_sect_
)
;
uint32_t
ssrc_
GUARDED_BY
(
crit_sect_
)
;
bool
first_packet_
GUARDED_BY
(
crit_sect_
)
;
int
error_code_
GUARDED_BY
(
crit_sect_
)
;
int
decoder_error_code_
GUARDED_BY
(
crit_sect_
)
;
const
BackgroundNoiseMode
background_noise_mode_
GUARDED_BY
(
crit_sect_
)
;
NetEqPlayoutMode
playout_mode_
GUARDED_BY
(
crit_sect_
)
;
bool
enable_fast_accelerate_
GUARDED_BY
(
crit_sect_
)
;
rtc
:
:
scoped_ptr
<
Nack
>
nack_
GUARDED_BY
(
crit_sect_
)
;
bool
nack_enabled_
GUARDED_BY
(
crit_sect_
)
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
NetEqImpl
)
;
}
;
}
#
endif
