#
include
<
memory
>
#
include
"
webrtc
/
modules
/
audio_coding
/
acm2
/
codec_manager
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
acm2
/
rent_a_codec
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
mock
/
mock_audio_encoder
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
acm2
{
using
:
:
testing
:
:
Return
;
namespace
{
std
:
:
unique_ptr
<
MockAudioEncoder
>
CreateMockEncoder
(
)
{
auto
enc
=
std
:
:
unique_ptr
<
MockAudioEncoder
>
(
new
MockAudioEncoder
)
;
EXPECT_CALL
(
*
enc
SampleRateHz
(
)
)
.
WillRepeatedly
(
Return
(
8000
)
)
;
EXPECT_CALL
(
*
enc
NumChannels
(
)
)
.
WillRepeatedly
(
Return
(
1
)
)
;
EXPECT_CALL
(
*
enc
Max10MsFramesInAPacket
(
)
)
.
WillRepeatedly
(
Return
(
1
)
)
;
EXPECT_CALL
(
*
enc
Die
(
)
)
;
return
enc
;
}
}
TEST
(
CodecManagerTest
ExternalEncoderFec
)
{
auto
enc0
=
CreateMockEncoder
(
)
;
auto
enc1
=
CreateMockEncoder
(
)
;
auto
enc2
=
CreateMockEncoder
(
)
;
{
:
:
testing
:
:
InSequence
s
;
EXPECT_CALL
(
*
enc0
SetFec
(
false
)
)
.
WillOnce
(
Return
(
true
)
)
;
EXPECT_CALL
(
*
enc1
SetFec
(
true
)
)
.
WillOnce
(
Return
(
true
)
)
;
EXPECT_CALL
(
*
enc2
SetFec
(
true
)
)
.
WillOnce
(
Return
(
false
)
)
;
}
CodecManager
cm
;
RentACodec
rac
;
EXPECT_FALSE
(
cm
.
GetStackParams
(
)
-
>
use_codec_fec
)
;
cm
.
GetStackParams
(
)
-
>
speech_encoder
=
std
:
:
move
(
enc0
)
;
EXPECT_TRUE
(
rac
.
RentEncoderStack
(
cm
.
GetStackParams
(
)
)
)
;
EXPECT_FALSE
(
cm
.
GetStackParams
(
)
-
>
use_codec_fec
)
;
EXPECT_EQ
(
true
cm
.
SetCodecFEC
(
true
)
)
;
EXPECT_TRUE
(
cm
.
GetStackParams
(
)
-
>
use_codec_fec
)
;
cm
.
GetStackParams
(
)
-
>
speech_encoder
=
std
:
:
move
(
enc1
)
;
EXPECT_TRUE
(
rac
.
RentEncoderStack
(
cm
.
GetStackParams
(
)
)
)
;
EXPECT_TRUE
(
cm
.
GetStackParams
(
)
-
>
use_codec_fec
)
;
cm
.
GetStackParams
(
)
-
>
speech_encoder
=
std
:
:
move
(
enc2
)
;
EXPECT_TRUE
(
rac
.
RentEncoderStack
(
cm
.
GetStackParams
(
)
)
)
;
EXPECT_FALSE
(
cm
.
GetStackParams
(
)
-
>
use_codec_fec
)
;
}
}
}
