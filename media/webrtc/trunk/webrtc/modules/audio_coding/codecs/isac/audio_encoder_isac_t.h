#
ifndef
WEBRTC_MODULES_AUDIO_CODING_CODECS_ISAC_AUDIO_ENCODER_ISAC_T_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_CODECS_ISAC_AUDIO_ENCODER_ISAC_T_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
audio_decoder
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
audio_encoder
.
h
"
namespace
webrtc
{
class
CriticalSectionWrapper
;
template
<
typename
T
>
class
AudioEncoderDecoderIsacT
:
public
AudioEncoder
public
AudioDecoder
{
public
:
struct
Config
{
Config
(
)
;
bool
IsOk
(
)
const
;
int
payload_type
;
int
sample_rate_hz
;
int
frame_size_ms
;
int
bit_rate
;
int
max_bit_rate
;
int
max_payload_size_bytes
;
}
;
struct
ConfigAdaptive
{
ConfigAdaptive
(
)
;
bool
IsOk
(
)
const
;
int
payload_type
;
int
sample_rate_hz
;
int
initial_frame_size_ms
;
int
initial_bit_rate
;
int
max_bit_rate
;
bool
enforce_frame_size
;
int
max_payload_size_bytes
;
}
;
explicit
AudioEncoderDecoderIsacT
(
const
Config
&
config
)
;
explicit
AudioEncoderDecoderIsacT
(
const
ConfigAdaptive
&
config
)
;
~
AudioEncoderDecoderIsacT
(
)
override
;
int
SampleRateHz
(
)
const
override
;
int
NumChannels
(
)
const
override
;
size_t
MaxEncodedBytes
(
)
const
override
;
int
Num10MsFramesInNextPacket
(
)
const
override
;
int
Max10MsFramesInAPacket
(
)
const
override
;
bool
HasDecodePlc
(
)
const
override
;
int
DecodePlc
(
int
num_frames
int16_t
*
decoded
)
override
;
int
Init
(
)
override
;
int
IncomingPacket
(
const
uint8_t
*
payload
size_t
payload_len
uint16_t
rtp_sequence_number
uint32_t
rtp_timestamp
uint32_t
arrival_timestamp
)
override
;
int
ErrorCode
(
)
override
;
size_t
Channels
(
)
const
override
{
return
1
;
}
protected
:
EncodedInfo
EncodeInternal
(
uint32_t
rtp_timestamp
const
int16_t
*
audio
size_t
max_encoded_bytes
uint8_t
*
encoded
)
override
;
int
DecodeInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
override
;
private
:
static
const
size_t
kSufficientEncodeBufferSizeBytes
=
400
;
const
int
payload_type_
;
const
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
state_lock_
;
typename
T
:
:
instance_type
*
isac_state_
GUARDED_BY
(
state_lock_
)
;
int
decoder_sample_rate_hz_
GUARDED_BY
(
state_lock_
)
;
const
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
lock_
;
bool
packet_in_progress_
GUARDED_BY
(
lock_
)
;
uint32_t
packet_timestamp_
GUARDED_BY
(
lock_
)
;
uint32_t
last_encoded_timestamp_
GUARDED_BY
(
lock_
)
;
DISALLOW_COPY_AND_ASSIGN
(
AudioEncoderDecoderIsacT
)
;
}
;
}
#
endif
