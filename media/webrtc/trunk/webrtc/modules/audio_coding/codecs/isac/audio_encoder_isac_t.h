#
ifndef
WEBRTC_MODULES_AUDIO_CODING_CODECS_ISAC_AUDIO_ENCODER_ISAC_T_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_CODECS_ISAC_AUDIO_ENCODER_ISAC_T_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
scoped_ref_ptr
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
audio_encoder
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
isac
/
locked_bandwidth_info
.
h
"
namespace
webrtc
{
struct
CodecInst
;
template
<
typename
T
>
class
AudioEncoderIsacT
final
:
public
AudioEncoder
{
public
:
struct
Config
{
bool
IsOk
(
)
const
;
rtc
:
:
scoped_refptr
<
LockedIsacBandwidthInfo
>
bwinfo
;
int
payload_type
=
103
;
int
sample_rate_hz
=
16000
;
int
frame_size_ms
=
30
;
int
bit_rate
=
kDefaultBitRate
;
int
max_payload_size_bytes
=
-
1
;
int
max_bit_rate
=
-
1
;
bool
adaptive_mode
=
false
;
bool
enforce_frame_size
=
false
;
}
;
explicit
AudioEncoderIsacT
(
const
Config
&
config
)
;
explicit
AudioEncoderIsacT
(
const
CodecInst
&
codec_inst
const
rtc
:
:
scoped_refptr
<
LockedIsacBandwidthInfo
>
&
bwinfo
)
;
~
AudioEncoderIsacT
(
)
override
;
int
SampleRateHz
(
)
const
override
;
size_t
NumChannels
(
)
const
override
;
size_t
Num10MsFramesInNextPacket
(
)
const
override
;
size_t
Max10MsFramesInAPacket
(
)
const
override
;
int
GetTargetBitrate
(
)
const
override
;
EncodedInfo
EncodeImpl
(
uint32_t
rtp_timestamp
rtc
:
:
ArrayView
<
const
int16_t
>
audio
rtc
:
:
Buffer
*
encoded
)
override
;
void
Reset
(
)
override
;
private
:
static
const
size_t
kSufficientEncodeBufferSizeBytes
=
400
;
static
const
int
kDefaultBitRate
=
32000
;
void
RecreateEncoderInstance
(
const
Config
&
config
)
;
Config
config_
;
typename
T
:
:
instance_type
*
isac_state_
=
nullptr
;
rtc
:
:
scoped_refptr
<
LockedIsacBandwidthInfo
>
bwinfo_
;
bool
packet_in_progress_
=
false
;
uint32_t
packet_timestamp_
;
uint32_t
last_encoded_timestamp_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
AudioEncoderIsacT
)
;
}
;
}
#
endif
