#
ifndef
WEBRTC_MODULES_AUDIO_CODING_CODECS_AUDIO_DECODER_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_CODECS_AUDIO_DECODER_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
array_view
.
h
"
#
include
"
webrtc
/
base
/
buffer
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
optional
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
AudioDecoder
{
public
:
enum
SpeechType
{
kSpeech
=
1
kComfortNoise
=
2
}
;
enum
{
kNotImplemented
=
-
2
}
;
AudioDecoder
(
)
=
default
;
virtual
~
AudioDecoder
(
)
=
default
;
class
EncodedAudioFrame
{
public
:
struct
DecodeResult
{
size_t
num_decoded_samples
;
SpeechType
speech_type
;
}
;
virtual
~
EncodedAudioFrame
(
)
=
default
;
virtual
size_t
Duration
(
)
const
=
0
;
virtual
rtc
:
:
Optional
<
DecodeResult
>
Decode
(
rtc
:
:
ArrayView
<
int16_t
>
decoded
)
const
=
0
;
}
;
struct
ParseResult
{
ParseResult
(
)
;
ParseResult
(
uint32_t
timestamp
int
priority
std
:
:
unique_ptr
<
EncodedAudioFrame
>
frame
)
;
ParseResult
(
ParseResult
&
&
b
)
;
~
ParseResult
(
)
;
ParseResult
&
operator
=
(
ParseResult
&
&
b
)
;
uint32_t
timestamp
;
int
priority
;
std
:
:
unique_ptr
<
EncodedAudioFrame
>
frame
;
}
;
virtual
std
:
:
vector
<
ParseResult
>
ParsePayload
(
rtc
:
:
Buffer
&
&
payload
uint32_t
timestamp
)
;
int
Decode
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
size_t
max_decoded_bytes
int16_t
*
decoded
SpeechType
*
speech_type
)
;
int
DecodeRedundant
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
size_t
max_decoded_bytes
int16_t
*
decoded
SpeechType
*
speech_type
)
;
virtual
bool
HasDecodePlc
(
)
const
;
virtual
size_t
DecodePlc
(
size_t
num_frames
int16_t
*
decoded
)
;
virtual
void
Reset
(
)
=
0
;
virtual
int
IncomingPacket
(
const
uint8_t
*
payload
size_t
payload_len
uint16_t
rtp_sequence_number
uint32_t
rtp_timestamp
uint32_t
arrival_timestamp
)
;
virtual
int
ErrorCode
(
)
;
virtual
int
PacketDuration
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
;
virtual
int
PacketDurationRedundant
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
;
virtual
bool
PacketHasFec
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
;
virtual
int
SampleRateHz
(
)
const
=
0
;
virtual
size_t
Channels
(
)
const
=
0
;
protected
:
static
SpeechType
ConvertSpeechType
(
int16_t
type
)
;
virtual
int
DecodeInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
=
0
;
virtual
int
DecodeRedundantInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
AudioDecoder
)
;
}
;
}
#
endif
