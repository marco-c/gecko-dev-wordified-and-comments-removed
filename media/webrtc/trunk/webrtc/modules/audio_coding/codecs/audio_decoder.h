#
ifndef
WEBRTC_MODULES_AUDIO_CODING_NETEQ_INTERFACE_AUDIO_DECODER_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_NETEQ_INTERFACE_AUDIO_DECODER_H_
#
include
<
stdlib
.
h
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
cng
/
include
/
webrtc_cng
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
AudioDecoder
{
public
:
enum
SpeechType
{
kSpeech
=
1
kComfortNoise
=
2
}
;
enum
{
kNotImplemented
=
-
2
}
;
AudioDecoder
(
)
=
default
;
virtual
~
AudioDecoder
(
)
=
default
;
virtual
int
Decode
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
size_t
max_decoded_bytes
int16_t
*
decoded
SpeechType
*
speech_type
)
;
virtual
int
DecodeRedundant
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
size_t
max_decoded_bytes
int16_t
*
decoded
SpeechType
*
speech_type
)
;
virtual
bool
HasDecodePlc
(
)
const
;
virtual
int
DecodePlc
(
int
num_frames
int16_t
*
decoded
)
;
virtual
int
Init
(
)
=
0
;
virtual
int
IncomingPacket
(
const
uint8_t
*
payload
size_t
payload_len
uint16_t
rtp_sequence_number
uint32_t
rtp_timestamp
uint32_t
arrival_timestamp
)
;
virtual
int
ErrorCode
(
)
;
virtual
int
PacketDuration
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
;
virtual
int
PacketDurationRedundant
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
;
virtual
bool
PacketHasFec
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
;
virtual
CNG_dec_inst
*
CngDecoderInstance
(
)
;
virtual
size_t
Channels
(
)
const
=
0
;
protected
:
static
SpeechType
ConvertSpeechType
(
int16_t
type
)
;
virtual
int
DecodeInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
;
virtual
int
DecodeRedundantInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
;
private
:
DISALLOW_COPY_AND_ASSIGN
(
AudioDecoder
)
;
}
;
}
#
endif
