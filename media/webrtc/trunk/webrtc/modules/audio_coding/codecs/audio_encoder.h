#
ifndef
WEBRTC_MODULES_AUDIO_CODING_CODECS_AUDIO_ENCODER_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_CODECS_AUDIO_ENCODER_H_
#
include
<
algorithm
>
#
include
<
vector
>
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
AudioEncoder
{
public
:
struct
EncodedInfoLeaf
{
EncodedInfoLeaf
(
)
:
encoded_bytes
(
0
)
encoded_timestamp
(
0
)
payload_type
(
0
)
send_even_if_empty
(
false
)
speech
(
true
)
{
}
size_t
encoded_bytes
;
uint32_t
encoded_timestamp
;
int
payload_type
;
bool
send_even_if_empty
;
bool
speech
;
}
;
struct
EncodedInfo
:
public
EncodedInfoLeaf
{
EncodedInfo
(
)
;
~
EncodedInfo
(
)
;
std
:
:
vector
<
EncodedInfoLeaf
>
redundant
;
}
;
virtual
~
AudioEncoder
(
)
{
}
EncodedInfo
Encode
(
uint32_t
rtp_timestamp
const
int16_t
*
audio
size_t
num_samples_per_channel
size_t
max_encoded_bytes
uint8_t
*
encoded
)
;
virtual
int
SampleRateHz
(
)
const
=
0
;
virtual
int
NumChannels
(
)
const
=
0
;
virtual
size_t
MaxEncodedBytes
(
)
const
=
0
;
virtual
int
RtpTimestampRateHz
(
)
const
;
virtual
int
Num10MsFramesInNextPacket
(
)
const
=
0
;
virtual
int
Max10MsFramesInAPacket
(
)
const
=
0
;
virtual
void
SetTargetBitrate
(
int
bits_per_second
)
{
}
virtual
void
SetProjectedPacketLossRate
(
double
fraction
)
{
}
protected
:
virtual
EncodedInfo
EncodeInternal
(
uint32_t
rtp_timestamp
const
int16_t
*
audio
size_t
max_encoded_bytes
uint8_t
*
encoded
)
=
0
;
}
;
}
#
endif
