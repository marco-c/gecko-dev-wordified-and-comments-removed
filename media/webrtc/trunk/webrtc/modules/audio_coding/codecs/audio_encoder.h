#
ifndef
WEBRTC_MODULES_AUDIO_CODING_CODECS_AUDIO_ENCODER_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_CODECS_AUDIO_ENCODER_H_
#
include
<
algorithm
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
array_view
.
h
"
#
include
"
webrtc
/
base
/
buffer
.
h
"
#
include
"
webrtc
/
base
/
deprecation
.
h
"
#
include
"
webrtc
/
base
/
optional
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
Clock
;
class
RtcEventLog
;
class
AudioEncoder
{
public
:
enum
class
CodecType
{
kOther
=
0
kOpus
=
1
kIsac
=
2
kPcmA
=
3
kPcmU
=
4
kG722
=
5
kIlbc
=
6
kMaxLoggedAudioCodecTypes
}
;
struct
EncodedInfoLeaf
{
size_t
encoded_bytes
=
0
;
uint32_t
encoded_timestamp
=
0
;
int
payload_type
=
0
;
bool
send_even_if_empty
=
false
;
bool
speech
=
true
;
CodecType
encoder_type
=
CodecType
:
:
kOther
;
}
;
struct
EncodedInfo
:
public
EncodedInfoLeaf
{
EncodedInfo
(
)
;
EncodedInfo
(
const
EncodedInfo
&
)
;
EncodedInfo
(
EncodedInfo
&
&
)
;
~
EncodedInfo
(
)
;
EncodedInfo
&
operator
=
(
const
EncodedInfo
&
)
;
EncodedInfo
&
operator
=
(
EncodedInfo
&
&
)
;
std
:
:
vector
<
EncodedInfoLeaf
>
redundant
;
}
;
virtual
~
AudioEncoder
(
)
=
default
;
virtual
int
SampleRateHz
(
)
const
=
0
;
virtual
size_t
NumChannels
(
)
const
=
0
;
virtual
int
RtpTimestampRateHz
(
)
const
;
virtual
size_t
Num10MsFramesInNextPacket
(
)
const
=
0
;
virtual
size_t
Max10MsFramesInAPacket
(
)
const
=
0
;
virtual
int
GetTargetBitrate
(
)
const
=
0
;
EncodedInfo
Encode
(
uint32_t
rtp_timestamp
rtc
:
:
ArrayView
<
const
int16_t
>
audio
rtc
:
:
Buffer
*
encoded
)
;
virtual
void
Reset
(
)
=
0
;
virtual
bool
SetFec
(
bool
enable
)
;
virtual
bool
SetDtx
(
bool
enable
)
;
virtual
bool
GetDtx
(
)
const
;
enum
class
Application
{
kSpeech
kAudio
}
;
virtual
bool
SetApplication
(
Application
application
)
;
virtual
void
SetMaxPlaybackRate
(
int
frequency_hz
)
;
RTC_DEPRECATED
virtual
void
SetTargetBitrate
(
int
target_bps
)
;
virtual
rtc
:
:
ArrayView
<
std
:
:
unique_ptr
<
AudioEncoder
>
>
ReclaimContainedEncoders
(
)
;
virtual
bool
EnableAudioNetworkAdaptor
(
const
std
:
:
string
&
config_string
RtcEventLog
*
event_log
const
Clock
*
clock
)
;
virtual
void
DisableAudioNetworkAdaptor
(
)
;
virtual
void
OnReceivedUplinkPacketLossFraction
(
float
uplink_packet_loss_fraction
)
;
virtual
void
OnReceivedTargetAudioBitrate
(
int
target_bps
)
;
virtual
void
OnReceivedUplinkBandwidth
(
int
target_audio_bitrate_bps
rtc
:
:
Optional
<
int64_t
>
probing_interval_ms
)
;
virtual
void
OnReceivedRtt
(
int
rtt_ms
)
;
virtual
void
OnReceivedOverhead
(
size_t
overhead_bytes_per_packet
)
;
virtual
void
SetReceiverFrameLengthRange
(
int
min_frame_length_ms
int
max_frame_length_ms
)
;
protected
:
virtual
EncodedInfo
EncodeImpl
(
uint32_t
rtp_timestamp
rtc
:
:
ArrayView
<
const
int16_t
>
audio
rtc
:
:
Buffer
*
encoded
)
=
0
;
}
;
}
#
endif
