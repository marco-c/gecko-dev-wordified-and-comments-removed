#
ifndef
WEBRTC_MODULES_AUDIO_CODING_CODECS_AUDIO_ENCODER_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_CODECS_AUDIO_ENCODER_H_
#
include
<
algorithm
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
array_view
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
AudioEncoder
{
public
:
struct
EncodedInfoLeaf
{
size_t
encoded_bytes
=
0
;
uint32_t
encoded_timestamp
=
0
;
int
payload_type
=
0
;
bool
send_even_if_empty
=
false
;
bool
speech
=
true
;
}
;
struct
EncodedInfo
:
public
EncodedInfoLeaf
{
EncodedInfo
(
)
;
~
EncodedInfo
(
)
;
std
:
:
vector
<
EncodedInfoLeaf
>
redundant
;
}
;
virtual
~
AudioEncoder
(
)
=
default
;
virtual
size_t
MaxEncodedBytes
(
)
const
=
0
;
virtual
int
SampleRateHz
(
)
const
=
0
;
virtual
size_t
NumChannels
(
)
const
=
0
;
virtual
int
RtpTimestampRateHz
(
)
const
;
virtual
size_t
Num10MsFramesInNextPacket
(
)
const
=
0
;
virtual
size_t
Max10MsFramesInAPacket
(
)
const
=
0
;
virtual
int
GetTargetBitrate
(
)
const
=
0
;
EncodedInfo
Encode
(
uint32_t
rtp_timestamp
rtc
:
:
ArrayView
<
const
int16_t
>
audio
size_t
max_encoded_bytes
uint8_t
*
encoded
)
;
virtual
EncodedInfo
EncodeInternal
(
uint32_t
rtp_timestamp
rtc
:
:
ArrayView
<
const
int16_t
>
audio
size_t
max_encoded_bytes
uint8_t
*
encoded
)
=
0
;
virtual
void
Reset
(
)
=
0
;
virtual
bool
SetFec
(
bool
enable
)
;
virtual
bool
SetDtx
(
bool
enable
)
;
enum
class
Application
{
kSpeech
kAudio
}
;
virtual
bool
SetApplication
(
Application
application
)
;
virtual
void
SetMaxPlaybackRate
(
int
frequency_hz
)
;
virtual
void
SetProjectedPacketLossRate
(
double
fraction
)
;
virtual
void
SetTargetBitrate
(
int
target_bps
)
;
}
;
}
#
endif
