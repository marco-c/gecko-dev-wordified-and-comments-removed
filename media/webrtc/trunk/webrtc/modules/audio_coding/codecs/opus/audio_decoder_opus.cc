#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
opus
/
audio_decoder_opus
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
namespace
webrtc
{
AudioDecoderOpus
:
:
AudioDecoderOpus
(
size_t
num_channels
)
:
channels_
(
num_channels
)
{
RTC_DCHECK
(
num_channels
=
=
1
|
|
num_channels
=
=
2
)
;
WebRtcOpus_DecoderCreate
(
&
dec_state_
channels_
)
;
WebRtcOpus_DecoderInit
(
dec_state_
)
;
}
AudioDecoderOpus
:
:
~
AudioDecoderOpus
(
)
{
WebRtcOpus_DecoderFree
(
dec_state_
)
;
}
int
AudioDecoderOpus
:
:
DecodeInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
{
RTC_DCHECK_EQ
(
sample_rate_hz
48000
)
;
int16_t
temp_type
=
1
;
int
ret
=
WebRtcOpus_Decode
(
dec_state_
encoded
encoded_len
decoded
&
temp_type
)
;
if
(
ret
>
0
)
ret
*
=
static_cast
<
int
>
(
channels_
)
;
*
speech_type
=
ConvertSpeechType
(
temp_type
)
;
return
ret
;
}
int
AudioDecoderOpus
:
:
DecodeRedundantInternal
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
int16_t
*
decoded
SpeechType
*
speech_type
)
{
if
(
!
PacketHasFec
(
encoded
encoded_len
)
)
{
return
DecodeInternal
(
encoded
encoded_len
sample_rate_hz
decoded
speech_type
)
;
}
RTC_DCHECK_EQ
(
sample_rate_hz
48000
)
;
int16_t
temp_type
=
1
;
int
ret
=
WebRtcOpus_DecodeFec
(
dec_state_
encoded
encoded_len
decoded
&
temp_type
)
;
if
(
ret
>
0
)
ret
*
=
static_cast
<
int
>
(
channels_
)
;
*
speech_type
=
ConvertSpeechType
(
temp_type
)
;
return
ret
;
}
void
AudioDecoderOpus
:
:
Reset
(
)
{
WebRtcOpus_DecoderInit
(
dec_state_
)
;
}
int
AudioDecoderOpus
:
:
PacketDuration
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
{
return
WebRtcOpus_DurationEst
(
dec_state_
encoded
encoded_len
)
;
}
int
AudioDecoderOpus
:
:
PacketDurationRedundant
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
{
if
(
!
PacketHasFec
(
encoded
encoded_len
)
)
{
return
PacketDuration
(
encoded
encoded_len
)
;
}
return
WebRtcOpus_FecDurationEst
(
encoded
encoded_len
)
;
}
bool
AudioDecoderOpus
:
:
PacketHasFec
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
{
int
fec
;
fec
=
WebRtcOpus_PacketHasFec
(
encoded
encoded_len
)
;
return
(
fec
=
=
1
)
;
}
size_t
AudioDecoderOpus
:
:
Channels
(
)
const
{
return
channels_
;
}
}
