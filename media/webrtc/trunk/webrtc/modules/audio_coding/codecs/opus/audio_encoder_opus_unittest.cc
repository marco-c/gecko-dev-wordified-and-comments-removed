#
include
"
testing
/
gtest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
opus
/
audio_encoder_opus
.
h
"
namespace
webrtc
{
namespace
{
const
CodecInst
kOpusSettings
=
{
105
"
opus
"
48000
960
1
32000
}
;
}
class
AudioEncoderOpusTest
:
public
:
:
testing
:
:
Test
{
protected
:
void
CreateCodec
(
int
num_channels
)
{
codec_inst_
.
channels
=
num_channels
;
encoder_
.
reset
(
new
AudioEncoderOpus
(
codec_inst_
)
)
;
auto
expected_app
=
num_channels
=
=
1
?
AudioEncoderOpus
:
:
kVoip
:
AudioEncoderOpus
:
:
kAudio
;
EXPECT_EQ
(
expected_app
encoder_
-
>
application
(
)
)
;
}
CodecInst
codec_inst_
=
kOpusSettings
;
rtc
:
:
scoped_ptr
<
AudioEncoderOpus
>
encoder_
;
}
;
TEST_F
(
AudioEncoderOpusTest
DefaultApplicationModeMono
)
{
CreateCodec
(
1
)
;
}
TEST_F
(
AudioEncoderOpusTest
DefaultApplicationModeStereo
)
{
CreateCodec
(
2
)
;
}
TEST_F
(
AudioEncoderOpusTest
ChangeApplicationMode
)
{
CreateCodec
(
2
)
;
EXPECT_TRUE
(
encoder_
-
>
SetApplication
(
AudioEncoder
:
:
Application
:
:
kSpeech
)
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kVoip
encoder_
-
>
application
(
)
)
;
}
TEST_F
(
AudioEncoderOpusTest
ResetWontChangeApplicationMode
)
{
CreateCodec
(
2
)
;
encoder_
-
>
Reset
(
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kAudio
encoder_
-
>
application
(
)
)
;
EXPECT_TRUE
(
encoder_
-
>
SetApplication
(
AudioEncoder
:
:
Application
:
:
kSpeech
)
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kVoip
encoder_
-
>
application
(
)
)
;
encoder_
-
>
Reset
(
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kVoip
encoder_
-
>
application
(
)
)
;
}
TEST_F
(
AudioEncoderOpusTest
ToggleDtx
)
{
CreateCodec
(
2
)
;
EXPECT_TRUE
(
encoder_
-
>
SetDtx
(
true
)
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kAudio
encoder_
-
>
application
(
)
)
;
EXPECT_TRUE
(
encoder_
-
>
SetDtx
(
false
)
)
;
}
TEST_F
(
AudioEncoderOpusTest
SetBitrate
)
{
CreateCodec
(
1
)
;
const
int
kMinBitrateBps
=
500
;
const
int
kMaxBitrateBps
=
512000
;
encoder_
-
>
SetTargetBitrate
(
kMinBitrateBps
-
1
)
;
EXPECT_EQ
(
kMinBitrateBps
encoder_
-
>
GetTargetBitrate
(
)
)
;
encoder_
-
>
SetTargetBitrate
(
kMaxBitrateBps
+
1
)
;
EXPECT_EQ
(
kMaxBitrateBps
encoder_
-
>
GetTargetBitrate
(
)
)
;
encoder_
-
>
SetTargetBitrate
(
kMinBitrateBps
)
;
EXPECT_EQ
(
kMinBitrateBps
encoder_
-
>
GetTargetBitrate
(
)
)
;
encoder_
-
>
SetTargetBitrate
(
kMaxBitrateBps
)
;
EXPECT_EQ
(
kMaxBitrateBps
encoder_
-
>
GetTargetBitrate
(
)
)
;
for
(
int
rate
=
1000
;
rate
<
=
32000
;
rate
+
=
1000
)
{
encoder_
-
>
SetTargetBitrate
(
rate
)
;
EXPECT_EQ
(
rate
encoder_
-
>
GetTargetBitrate
(
)
)
;
}
}
namespace
{
std
:
:
vector
<
double
>
IntervalSteps
(
double
a
double
b
size_t
n
)
{
RTC_DCHECK_GT
(
n
1u
)
;
const
double
step
=
(
b
-
a
)
/
(
n
-
1
)
;
std
:
:
vector
<
double
>
points
;
for
(
size_t
i
=
0
;
i
<
n
;
+
+
i
)
points
.
push_back
(
a
+
i
*
step
)
;
return
points
;
}
void
TestSetPacketLossRate
(
AudioEncoderOpus
*
encoder
const
std
:
:
vector
<
double
>
&
losses
double
expected_return
)
{
for
(
double
loss
:
losses
)
{
encoder
-
>
SetProjectedPacketLossRate
(
loss
)
;
EXPECT_DOUBLE_EQ
(
expected_return
encoder
-
>
packet_loss_rate
(
)
)
;
}
}
}
TEST_F
(
AudioEncoderOpusTest
PacketLossRateOptimized
)
{
CreateCodec
(
1
)
;
auto
I
=
[
]
(
double
a
double
b
)
{
return
IntervalSteps
(
a
b
10
)
;
}
;
const
double
eps
=
1e
-
15
;
TestSetPacketLossRate
(
encoder_
.
get
(
)
I
(
0
.
00
0
.
01
-
eps
)
0
.
00
)
;
TestSetPacketLossRate
(
encoder_
.
get
(
)
I
(
0
.
01
+
eps
0
.
06
-
eps
)
0
.
01
)
;
TestSetPacketLossRate
(
encoder_
.
get
(
)
I
(
0
.
06
+
eps
0
.
11
-
eps
)
0
.
05
)
;
TestSetPacketLossRate
(
encoder_
.
get
(
)
I
(
0
.
11
+
eps
0
.
22
-
eps
)
0
.
10
)
;
TestSetPacketLossRate
(
encoder_
.
get
(
)
I
(
0
.
22
+
eps
1
.
00
)
0
.
20
)
;
TestSetPacketLossRate
(
encoder_
.
get
(
)
I
(
1
.
00
0
.
18
+
eps
)
0
.
20
)
;
TestSetPacketLossRate
(
encoder_
.
get
(
)
I
(
0
.
18
-
eps
0
.
09
+
eps
)
0
.
10
)
;
TestSetPacketLossRate
(
encoder_
.
get
(
)
I
(
0
.
09
-
eps
0
.
04
+
eps
)
0
.
05
)
;
TestSetPacketLossRate
(
encoder_
.
get
(
)
I
(
0
.
04
-
eps
0
.
01
+
eps
)
0
.
01
)
;
TestSetPacketLossRate
(
encoder_
.
get
(
)
I
(
0
.
01
-
eps
0
.
00
)
0
.
00
)
;
}
}
