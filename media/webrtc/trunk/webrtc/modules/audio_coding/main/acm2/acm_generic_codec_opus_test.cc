#
include
"
testing
/
gtest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
opus
/
interface
/
audio_encoder_opus
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
main
/
acm2
/
acm_generic_codec
.
h
"
namespace
webrtc
{
namespace
acm2
{
#
ifdef
WEBRTC_CODEC_OPUS
namespace
{
const
CodecInst
kDefaultOpusCodecInst
=
{
105
"
opus
"
48000
960
1
32000
}
;
const
int
kCngPt
=
255
;
const
int
kRedPt
=
255
;
}
class
AcmGenericCodecOpusTest
:
public
:
:
testing
:
:
Test
{
protected
:
AcmGenericCodecOpusTest
(
)
{
acm_codec_params_
=
{
kDefaultOpusCodecInst
false
false
VADNormal
}
;
}
void
CreateCodec
(
)
{
codec_wrapper_
.
reset
(
new
ACMGenericCodec
(
acm_codec_params_
.
codec_inst
kCngPt
kCngPt
kCngPt
kCngPt
false
kRedPt
)
)
;
ASSERT_TRUE
(
codec_wrapper_
)
;
ASSERT_EQ
(
0
codec_wrapper_
-
>
InitEncoder
(
&
acm_codec_params_
true
)
)
;
}
const
AudioEncoderOpus
*
GetAudioEncoderOpus
(
)
{
const
AudioEncoderOpus
*
ptr
=
static_cast
<
const
AudioEncoderOpus
*
>
(
codec_wrapper_
-
>
GetAudioEncoder
(
)
)
;
EXPECT_NE
(
nullptr
ptr
)
;
return
ptr
;
}
WebRtcACMCodecParams
acm_codec_params_
;
rtc
:
:
scoped_ptr
<
ACMGenericCodec
>
codec_wrapper_
;
}
;
TEST_F
(
AcmGenericCodecOpusTest
DefaultApplicationModeMono
)
{
acm_codec_params_
.
codec_inst
.
channels
=
1
;
CreateCodec
(
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kVoip
GetAudioEncoderOpus
(
)
-
>
application
(
)
)
;
}
TEST_F
(
AcmGenericCodecOpusTest
DefaultApplicationModeStereo
)
{
acm_codec_params_
.
codec_inst
.
channels
=
2
;
CreateCodec
(
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kAudio
GetAudioEncoderOpus
(
)
-
>
application
(
)
)
;
}
TEST_F
(
AcmGenericCodecOpusTest
ChangeApplicationMode
)
{
acm_codec_params_
.
codec_inst
.
channels
=
2
;
CreateCodec
(
)
;
const
AudioEncoderOpus
*
opus_ptr
=
GetAudioEncoderOpus
(
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kAudio
opus_ptr
-
>
application
(
)
)
;
EXPECT_EQ
(
0
codec_wrapper_
-
>
SetOpusApplication
(
kVoip
false
)
)
;
EXPECT_NE
(
opus_ptr
GetAudioEncoderOpus
(
)
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kVoip
GetAudioEncoderOpus
(
)
-
>
application
(
)
)
;
}
TEST_F
(
AcmGenericCodecOpusTest
ResetWontChangeApplicationMode
)
{
acm_codec_params_
.
codec_inst
.
channels
=
2
;
CreateCodec
(
)
;
const
AudioEncoderOpus
*
opus_ptr
=
GetAudioEncoderOpus
(
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kAudio
opus_ptr
-
>
application
(
)
)
;
ASSERT_EQ
(
0
codec_wrapper_
-
>
InitEncoder
(
&
acm_codec_params_
false
)
)
;
EXPECT_NE
(
opus_ptr
GetAudioEncoderOpus
(
)
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kAudio
GetAudioEncoderOpus
(
)
-
>
application
(
)
)
;
EXPECT_EQ
(
0
codec_wrapper_
-
>
SetOpusApplication
(
kVoip
false
)
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kVoip
GetAudioEncoderOpus
(
)
-
>
application
(
)
)
;
opus_ptr
=
GetAudioEncoderOpus
(
)
;
ASSERT_EQ
(
0
codec_wrapper_
-
>
InitEncoder
(
&
acm_codec_params_
false
)
)
;
EXPECT_NE
(
opus_ptr
GetAudioEncoderOpus
(
)
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kVoip
GetAudioEncoderOpus
(
)
-
>
application
(
)
)
;
}
TEST_F
(
AcmGenericCodecOpusTest
ToggleDtx
)
{
acm_codec_params_
.
codec_inst
.
channels
=
2
;
CreateCodec
(
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kAudio
GetAudioEncoderOpus
(
)
-
>
application
(
)
)
;
EXPECT_EQ
(
-
1
codec_wrapper_
-
>
EnableOpusDtx
(
false
)
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kAudio
GetAudioEncoderOpus
(
)
-
>
application
(
)
)
;
EXPECT_EQ
(
0
codec_wrapper_
-
>
EnableOpusDtx
(
true
)
)
;
EXPECT_EQ
(
AudioEncoderOpus
:
:
kVoip
GetAudioEncoderOpus
(
)
-
>
application
(
)
)
;
EXPECT_EQ
(
-
1
codec_wrapper_
-
>
SetOpusApplication
(
kAudio
false
)
)
;
EXPECT_TRUE
(
GetAudioEncoderOpus
(
)
-
>
dtx_enabled
(
)
)
;
EXPECT_EQ
(
0
codec_wrapper_
-
>
SetOpusApplication
(
kAudio
true
)
)
;
EXPECT_FALSE
(
GetAudioEncoderOpus
(
)
-
>
dtx_enabled
(
)
)
;
EXPECT_EQ
(
0
codec_wrapper_
-
>
SetOpusApplication
(
kVoip
true
)
)
;
EXPECT_FALSE
(
GetAudioEncoderOpus
(
)
-
>
dtx_enabled
(
)
)
;
EXPECT_EQ
(
0
codec_wrapper_
-
>
EnableOpusDtx
(
false
)
)
;
EXPECT_EQ
(
0
codec_wrapper_
-
>
DisableOpusDtx
(
)
)
;
EXPECT_EQ
(
0
codec_wrapper_
-
>
SetOpusApplication
(
kAudio
false
)
)
;
}
#
endif
}
}
