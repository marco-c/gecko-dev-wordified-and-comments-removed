#
ifndef
WEBRTC_MODULES_AUDIO_CODING_MAIN_ACM2_AUDIO_CODING_MODULE_IMPL_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_MAIN_ACM2_AUDIO_CODING_MODULE_IMPL_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
engine_configurations
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
main
/
acm2
/
acm_codec_database
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
main
/
acm2
/
acm_receiver
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
main
/
acm2
/
acm_resampler
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
main
/
acm2
/
codec_manager
.
h
"
namespace
webrtc
{
class
CriticalSectionWrapper
;
class
AudioCodingImpl
;
namespace
acm2
{
class
ACMDTMFDetection
;
class
ACMGenericCodec
;
class
AudioCodingModuleImpl
:
public
AudioCodingModule
{
public
:
friend
webrtc
:
:
AudioCodingImpl
;
explicit
AudioCodingModuleImpl
(
const
AudioCodingModule
:
:
Config
&
config
)
;
~
AudioCodingModuleImpl
(
)
;
int
ResetEncoder
(
)
override
;
int
RegisterSendCodec
(
const
CodecInst
&
send_codec
)
override
;
int
SendCodec
(
CodecInst
*
current_codec
)
const
override
;
int
SendFrequency
(
)
const
override
;
int
SendBitrate
(
)
const
override
;
int
SetReceivedEstimatedBandwidth
(
int
bw
)
override
;
int
RegisterTransportCallback
(
AudioPacketizationCallback
*
transport
)
override
;
int
Add10MsData
(
const
AudioFrame
&
audio_frame
)
override
;
int
SetREDStatus
(
bool
enable_red
)
override
;
bool
REDStatus
(
)
const
override
;
int
SetCodecFEC
(
bool
enabled_codec_fec
)
override
;
bool
CodecFEC
(
)
const
override
;
int
SetPacketLossRate
(
int
loss_rate
)
override
;
int
SetVAD
(
bool
enable_dtx
=
true
bool
enable_vad
=
false
ACMVADMode
mode
=
VADNormal
)
override
;
int
VAD
(
bool
*
dtx_enabled
bool
*
vad_enabled
ACMVADMode
*
mode
)
const
override
;
int
RegisterVADCallback
(
ACMVADCallback
*
vad_callback
)
override
;
int
InitializeReceiver
(
)
override
;
int
ResetDecoder
(
)
override
;
int
ReceiveFrequency
(
)
const
override
;
int
PlayoutFrequency
(
)
const
override
;
int
RegisterReceiveCodec
(
const
CodecInst
&
receive_codec
)
override
;
int
ReceiveCodec
(
CodecInst
*
current_codec
)
const
override
;
int
RegisterDecoder
(
int
acm_codec_id
uint8_t
payload_type
int
channels
AudioDecoder
*
audio_decoder
)
;
int
IncomingPacket
(
const
uint8_t
*
incoming_payload
const
size_t
payload_length
const
WebRtcRTPHeader
&
rtp_info
)
override
;
int
IncomingPayload
(
const
uint8_t
*
incoming_payload
const
size_t
payload_length
uint8_t
payload_type
uint32_t
timestamp
)
override
;
int
SetMinimumPlayoutDelay
(
int
time_ms
)
override
;
int
SetMaximumPlayoutDelay
(
int
time_ms
)
override
;
int
LeastRequiredDelayMs
(
)
const
override
;
int
SetInitialPlayoutDelay
(
int
delay_ms
)
override
;
int
SetDtmfPlayoutStatus
(
bool
enable
)
override
{
return
0
;
}
bool
DtmfPlayoutStatus
(
)
const
override
{
return
true
;
}
int
DecoderEstimatedBandwidth
(
)
const
override
;
int
SetPlayoutMode
(
AudioPlayoutMode
mode
)
override
;
AudioPlayoutMode
PlayoutMode
(
)
const
override
;
int
PlayoutTimestamp
(
uint32_t
*
timestamp
)
override
;
int
PlayoutData10Ms
(
int
desired_freq_hz
AudioFrame
*
audio_frame
)
override
;
int
GetNetworkStatistics
(
NetworkStatistics
*
statistics
)
override
;
int
REDPayloadISAC
(
int
isac_rate
int
isac_bw_estimate
uint8_t
*
payload
int16_t
*
length_bytes
)
;
int
ReplaceInternalDTXWithWebRtc
(
bool
use_webrtc_dtx
)
override
;
int
IsInternalDTXReplacedWithWebRtc
(
bool
*
uses_webrtc_dtx
)
override
;
int
SetISACMaxRate
(
int
max_bit_per_sec
)
override
;
int
SetISACMaxPayloadSize
(
int
max_size_bytes
)
override
;
int
ConfigISACBandwidthEstimator
(
int
frame_size_ms
int
rate_bit_per_sec
bool
enforce_frame_size
=
false
)
override
;
int
SetOpusApplication
(
OpusApplicationMode
application
bool
disable_dtx_if_needed
)
override
;
int
SetOpusMaxPlaybackRate
(
int
frequency_hz
)
override
;
int
EnableOpusDtx
(
bool
force_voip
)
override
;
int
DisableOpusDtx
(
)
override
;
int
UnregisterReceiveCodec
(
uint8_t
payload_type
)
override
;
int
EnableNack
(
size_t
max_nack_list_size
)
override
;
void
DisableNack
(
)
override
;
std
:
:
vector
<
uint16_t
>
GetNackList
(
int64_t
round_trip_time_ms
)
const
override
;
void
GetDecodingCallStatistics
(
AudioDecodingCallStats
*
stats
)
const
override
;
private
:
struct
InputData
{
uint32_t
input_timestamp
;
const
int16_t
*
audio
;
uint16_t
length_per_channel
;
uint8_t
audio_channel
;
int16_t
buffer
[
WEBRTC_10MS_PCM_AUDIO
]
;
}
;
int
Add10MsDataInternal
(
const
AudioFrame
&
audio_frame
InputData
*
input_data
)
;
int
Encode
(
const
InputData
&
input_data
)
;
int
InitializeReceiverSafe
(
)
EXCLUSIVE_LOCKS_REQUIRED
(
acm_crit_sect_
)
;
bool
HaveValidEncoder
(
const
char
*
caller_name
)
const
EXCLUSIVE_LOCKS_REQUIRED
(
acm_crit_sect_
)
;
int
PreprocessToAddData
(
const
AudioFrame
&
in_frame
const
AudioFrame
*
*
ptr_out
)
EXCLUSIVE_LOCKS_REQUIRED
(
acm_crit_sect_
)
;
int
UpdateUponReceivingCodec
(
int
index
)
;
CriticalSectionWrapper
*
acm_crit_sect_
;
int
id_
;
uint32_t
expected_codec_ts_
GUARDED_BY
(
acm_crit_sect_
)
;
uint32_t
expected_in_ts_
GUARDED_BY
(
acm_crit_sect_
)
;
ACMResampler
resampler_
GUARDED_BY
(
acm_crit_sect_
)
;
AcmReceiver
receiver_
;
CodecManager
codec_manager_
GUARDED_BY
(
acm_crit_sect_
)
;
uint8_t
previous_pltype_
GUARDED_BY
(
acm_crit_sect_
)
;
WebRtcRTPHeader
*
aux_rtp_header_
;
bool
receiver_initialized_
GUARDED_BY
(
acm_crit_sect_
)
;
AudioFrame
preprocess_frame_
GUARDED_BY
(
acm_crit_sect_
)
;
bool
first_10ms_data_
GUARDED_BY
(
acm_crit_sect_
)
;
bool
first_frame_
GUARDED_BY
(
acm_crit_sect_
)
;
uint32_t
last_timestamp_
GUARDED_BY
(
acm_crit_sect_
)
;
uint32_t
last_rtp_timestamp_
GUARDED_BY
(
acm_crit_sect_
)
;
CriticalSectionWrapper
*
callback_crit_sect_
;
AudioPacketizationCallback
*
packetization_callback_
GUARDED_BY
(
callback_crit_sect_
)
;
ACMVADCallback
*
vad_callback_
GUARDED_BY
(
callback_crit_sect_
)
;
}
;
}
class
AudioCodingImpl
:
public
AudioCoding
{
public
:
AudioCodingImpl
(
const
Config
&
config
)
{
AudioCodingModule
:
:
Config
config_old
=
config
.
ToOldConfig
(
)
;
acm_old_
.
reset
(
new
acm2
:
:
AudioCodingModuleImpl
(
config_old
)
)
;
acm_old_
-
>
RegisterTransportCallback
(
config
.
transport
)
;
acm_old_
-
>
RegisterVADCallback
(
config
.
vad_callback
)
;
acm_old_
-
>
SetDtmfPlayoutStatus
(
config
.
play_dtmf
)
;
if
(
config
.
initial_playout_delay_ms
>
0
)
{
acm_old_
-
>
SetInitialPlayoutDelay
(
config
.
initial_playout_delay_ms
)
;
}
playout_frequency_hz_
=
config
.
playout_frequency_hz
;
}
~
AudioCodingImpl
(
)
override
{
}
;
bool
RegisterSendCodec
(
AudioEncoder
*
send_codec
)
override
;
bool
RegisterSendCodec
(
int
encoder_type
uint8_t
payload_type
int
frame_size_samples
=
0
)
override
;
const
AudioEncoder
*
GetSenderInfo
(
)
const
override
;
const
CodecInst
*
GetSenderCodecInst
(
)
override
;
int
Add10MsAudio
(
const
AudioFrame
&
audio_frame
)
override
;
const
ReceiverInfo
*
GetReceiverInfo
(
)
const
override
;
bool
RegisterReceiveCodec
(
AudioDecoder
*
receive_codec
)
override
;
bool
RegisterReceiveCodec
(
int
decoder_type
uint8_t
payload_type
)
override
;
bool
InsertPacket
(
const
uint8_t
*
incoming_payload
size_t
payload_len_bytes
const
WebRtcRTPHeader
&
rtp_info
)
override
;
bool
InsertPayload
(
const
uint8_t
*
incoming_payload
size_t
payload_len_byte
uint8_t
payload_type
uint32_t
timestamp
)
override
;
bool
SetMinimumPlayoutDelay
(
int
time_ms
)
override
;
bool
SetMaximumPlayoutDelay
(
int
time_ms
)
override
;
int
LeastRequiredDelayMs
(
)
const
override
;
bool
PlayoutTimestamp
(
uint32_t
*
timestamp
)
override
;
bool
Get10MsAudio
(
AudioFrame
*
audio_frame
)
override
;
bool
GetNetworkStatistics
(
NetworkStatistics
*
network_statistics
)
override
;
bool
EnableNack
(
size_t
max_nack_list_size
)
override
;
void
DisableNack
(
)
override
;
bool
SetVad
(
bool
enable_dtx
bool
enable_vad
ACMVADMode
vad_mode
)
override
;
std
:
:
vector
<
uint16_t
>
GetNackList
(
int
round_trip_time_ms
)
const
override
;
void
GetDecodingCallStatistics
(
AudioDecodingCallStats
*
call_stats
)
const
override
;
private
:
static
bool
MapCodecTypeToParameters
(
int
codec_type
std
:
:
string
*
codec_name
int
*
sample_rate_hz
int
*
channels
)
;
int
playout_frequency_hz_
;
rtc
:
:
scoped_ptr
<
acm2
:
:
AudioCodingModuleImpl
>
acm_old_
;
CodecInst
current_send_codec_
;
}
;
}
#
endif
