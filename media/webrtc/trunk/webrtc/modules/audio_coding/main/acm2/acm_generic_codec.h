#
ifndef
WEBRTC_MODULES_AUDIO_CODING_MAIN_ACM2_ACM_GENERIC_CODEC_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_MAIN_ACM2_ACM_GENERIC_CODEC_H_
#
include
<
map
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
base
/
thread_annotations
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
main
/
interface
/
audio_coding_module_typedefs
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
audio_decoder
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
codecs
/
audio_encoder
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
main
/
acm2
/
acm_common_defs
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
neteq
/
interface
/
neteq
.
h
"
#
include
"
webrtc
/
system_wrappers
/
interface
/
critical_section_wrapper
.
h
"
#
include
"
webrtc
/
system_wrappers
/
interface
/
rw_lock_wrapper
.
h
"
#
include
"
webrtc
/
system_wrappers
/
interface
/
trace
.
h
"
#
define
MAX_FRAME_SIZE_10MSEC
6
struct
WebRtcVadInst
;
struct
WebRtcCngEncInst
;
namespace
webrtc
{
struct
WebRtcACMCodecParams
;
struct
CodecInst
;
class
CriticalSectionWrapper
;
namespace
acm2
{
class
AcmReceiver
;
class
AudioDecoderProxy
final
:
public
AudioDecoder
{
public
:
AudioDecoderProxy
(
)
;
void
SetDecoder
(
AudioDecoder
*
decoder
)
;
bool
IsSet
(
)
const
;
int
Decode
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
size_t
max_decoded_bytes
int16_t
*
decoded
SpeechType
*
speech_type
)
override
;
int
DecodeRedundant
(
const
uint8_t
*
encoded
size_t
encoded_len
int
sample_rate_hz
size_t
max_decoded_bytes
int16_t
*
decoded
SpeechType
*
speech_type
)
override
;
bool
HasDecodePlc
(
)
const
override
;
int
DecodePlc
(
int
num_frames
int16_t
*
decoded
)
override
;
int
Init
(
)
override
;
int
IncomingPacket
(
const
uint8_t
*
payload
size_t
payload_len
uint16_t
rtp_sequence_number
uint32_t
rtp_timestamp
uint32_t
arrival_timestamp
)
override
;
int
ErrorCode
(
)
override
;
int
PacketDuration
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
override
;
int
PacketDurationRedundant
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
override
;
bool
PacketHasFec
(
const
uint8_t
*
encoded
size_t
encoded_len
)
const
override
;
CNG_dec_inst
*
CngDecoderInstance
(
)
override
;
size_t
Channels
(
)
const
override
;
private
:
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
decoder_lock_
;
AudioDecoder
*
decoder_
GUARDED_BY
(
decoder_lock_
)
;
}
;
class
ACMGenericCodec
{
public
:
ACMGenericCodec
(
const
CodecInst
&
codec_inst
int
cng_pt_nb
int
cng_pt_wb
int
cng_pt_swb
int
cng_pt_fb
bool
enable_red
int
red_pt_nb
)
;
~
ACMGenericCodec
(
)
;
ACMGenericCodec
*
CreateInstance
(
)
;
bool
EncoderInitialized
(
)
;
int16_t
EncoderParams
(
WebRtcACMCodecParams
*
enc_params
)
const
;
int16_t
InitEncoder
(
WebRtcACMCodecParams
*
codec_params
bool
force_initialization
)
;
uint32_t
NoMissedSamples
(
)
const
;
void
ResetNoMissedSamples
(
)
;
int16_t
SetBitRate
(
const
int32_t
bitrate_bps
)
;
uint32_t
EarliestTimestamp
(
)
const
;
int16_t
SetVAD
(
bool
*
enable_dtx
bool
*
enable_vad
ACMVADMode
*
mode
)
;
void
SetCngPt
(
int
sample_rate_hz
int
payload_type
)
;
void
SetRedPt
(
int
sample_rate_hz
int
payload_type
)
;
int16_t
UpdateEncoderSampFreq
(
uint16_t
samp_freq_hz
)
;
int16_t
EncoderSampFreq
(
uint16_t
*
samp_freq_hz
)
;
int32_t
SetISACMaxPayloadSize
(
const
uint16_t
max_payload_len_bytes
)
;
int32_t
SetISACMaxRate
(
const
uint32_t
max_rate_bps
)
;
int
SetOpusApplication
(
OpusApplicationMode
application
bool
disable_dtx_if_needed
)
;
int
SetOpusMaxPlaybackRate
(
int
)
;
int
EnableOpusDtx
(
bool
force_voip
)
;
int
DisableOpusDtx
(
)
;
bool
HasFrameToEncode
(
)
const
;
AudioDecoder
*
Decoder
(
)
;
bool
HasInternalFEC
(
)
const
{
return
has_internal_fec_
;
}
int
SetFEC
(
bool
enable_fec
)
;
int
SetPacketLossRate
(
int
)
;
int
SetCopyRed
(
bool
enable
)
;
AudioEncoder
*
GetAudioEncoder
(
)
;
const
AudioEncoder
*
GetAudioEncoder
(
)
const
;
private
:
bool
has_internal_fec_
;
bool
copy_red_enabled_
;
void
ResetAudioEncoder
(
)
;
OpusApplicationMode
GetOpusApplication
(
int
num_channels
bool
enable_dtx
)
const
;
rtc
:
:
scoped_ptr
<
AudioEncoder
>
audio_encoder_
;
rtc
:
:
scoped_ptr
<
AudioEncoder
>
cng_encoder_
;
rtc
:
:
scoped_ptr
<
AudioEncoder
>
red_encoder_
;
AudioEncoder
*
encoder_
;
AudioDecoderProxy
decoder_proxy_
;
WebRtcACMCodecParams
acm_codec_params_
;
int
bitrate_bps_
;
bool
fec_enabled_
;
int
loss_rate_
;
int
max_playback_rate_hz_
;
int
max_payload_size_bytes_
;
int
max_rate_bps_
;
bool
opus_dtx_enabled_
;
bool
is_opus_
;
bool
is_isac_
;
std
:
:
map
<
int
int
>
cng_pt_
;
std
:
:
map
<
int
int
>
red_pt_
;
OpusApplicationMode
opus_application_
;
bool
opus_application_set_
;
}
;
}
}
#
endif
