#
ifndef
WEBRTC_MODULES_AUDIO_CODING_MAIN_ACM2_CODEC_MANAGER_H_
#
define
WEBRTC_MODULES_AUDIO_CODING_MAIN_ACM2_CODEC_MANAGER_H_
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
main
/
acm2
/
acm_codec_database
.
h
"
#
include
"
webrtc
/
modules
/
audio_coding
/
main
/
interface
/
audio_coding_module_typedefs
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
namespace
webrtc
{
class
AudioDecoder
;
namespace
acm2
{
class
ACMGenericCodec
;
class
AudioCodingModuleImpl
;
class
CodecManager
final
{
public
:
explicit
CodecManager
(
AudioCodingModuleImpl
*
acm
)
;
~
CodecManager
(
)
;
int
RegisterSendCodec
(
const
CodecInst
&
send_codec
)
;
int
SendCodec
(
CodecInst
*
current_codec
)
const
;
int
RegisterReceiveCodec
(
const
CodecInst
&
receive_codec
)
;
bool
SetCopyRed
(
bool
enable
)
;
int
SetVAD
(
bool
enable_dtx
bool
enable_vad
ACMVADMode
mode
)
;
void
VAD
(
bool
*
dtx_enabled
bool
*
vad_enabled
ACMVADMode
*
mode
)
const
;
int
SetCodecFEC
(
bool
enable_codec_fec
)
;
bool
stereo_send
(
)
const
{
return
stereo_send_
;
}
bool
red_enabled
(
)
const
{
return
red_enabled_
;
}
bool
codec_fec_enabled
(
)
const
{
return
codec_fec_enabled_
;
}
ACMGenericCodec
*
current_encoder
(
)
{
return
current_encoder_
;
}
const
ACMGenericCodec
*
current_encoder
(
)
const
{
return
current_encoder_
;
}
private
:
void
SetCngPayloadType
(
int
sample_rate_hz
int
payload_type
)
;
void
SetRedPayloadType
(
int
sample_rate_hz
int
payload_type
)
;
int
GetAudioDecoder
(
const
CodecInst
&
codec
int
codec_id
int
mirror_id
AudioDecoder
*
*
decoder
)
;
AudioCodingModuleImpl
*
acm_
;
rtc
:
:
ThreadChecker
thread_checker_
;
uint8_t
cng_nb_pltype_
;
uint8_t
cng_wb_pltype_
;
uint8_t
cng_swb_pltype_
;
uint8_t
cng_fb_pltype_
;
uint8_t
red_nb_pltype_
;
bool
stereo_send_
;
bool
vad_enabled_
;
bool
dtx_enabled_
;
ACMVADMode
vad_mode_
;
ACMGenericCodec
*
current_encoder_
;
CodecInst
send_codec_inst_
;
bool
red_enabled_
;
bool
codec_fec_enabled_
;
ACMGenericCodec
*
codecs_
[
ACMCodecDB
:
:
kMaxNumCodecs
]
;
int
mirror_codec_idx_
[
ACMCodecDB
:
:
kMaxNumCodecs
]
;
DISALLOW_COPY_AND_ASSIGN
(
CodecManager
)
;
}
;
}
}
#
endif
