#
ifndef
MODULES_BITRATE_CONTROLLER_SEND_SIDE_BANDWIDTH_ESTIMATION_H_
#
define
MODULES_BITRATE_CONTROLLER_SEND_SIDE_BANDWIDTH_ESTIMATION_H_
#
include
<
deque
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
namespace
webrtc
{
class
RtcEventLog
;
class
SendSideBandwidthEstimation
{
public
:
SendSideBandwidthEstimation
(
)
=
delete
;
explicit
SendSideBandwidthEstimation
(
RtcEventLog
*
event_log
)
;
virtual
~
SendSideBandwidthEstimation
(
)
;
void
CurrentEstimate
(
int
*
bitrate
uint8_t
*
loss
int64_t
*
rtt
)
const
;
void
UpdateEstimate
(
int64_t
now_ms
)
;
void
UpdateReceiverEstimate
(
int64_t
now_ms
uint32_t
bandwidth
)
;
void
UpdateDelayBasedEstimate
(
int64_t
now_ms
uint32_t
bitrate_bps
)
;
void
UpdateReceiverBlock
(
uint8_t
fraction_loss
int64_t
rtt
int
number_of_packets
int64_t
now_ms
)
;
void
SetBitrates
(
int
send_bitrate
int
min_bitrate
int
max_bitrate
)
;
void
SetSendBitrate
(
int
bitrate
)
;
void
SetMinMaxBitrate
(
int
min_bitrate
int
max_bitrate
)
;
int
GetMinBitrate
(
)
const
;
private
:
enum
UmaState
{
kNoUpdate
kFirstDone
kDone
}
;
bool
IsInStartPhase
(
int64_t
now_ms
)
const
;
void
UpdateUmaStats
(
int64_t
now_ms
int64_t
rtt
int
lost_packets
)
;
void
UpdateMinHistory
(
int64_t
now_ms
)
;
void
CapBitrateToThresholds
(
int64_t
now_ms
uint32_t
bitrate_bps
)
;
std
:
:
deque
<
std
:
:
pair
<
int64_t
uint32_t
>
>
min_bitrate_history_
;
int
lost_packets_since_last_loss_update_Q8_
;
int
expected_packets_since_last_loss_update_
;
uint32_t
current_bitrate_bps_
;
uint32_t
min_bitrate_configured_
;
uint32_t
max_bitrate_configured_
;
int64_t
last_low_bitrate_log_ms_
;
bool
has_decreased_since_last_fraction_loss_
;
int64_t
last_feedback_ms_
;
int64_t
last_packet_report_ms_
;
int64_t
last_timeout_ms_
;
uint8_t
last_fraction_loss_
;
uint8_t
last_logged_fraction_loss_
;
int64_t
last_round_trip_time_ms_
;
uint32_t
bwe_incoming_
;
uint32_t
delay_based_bitrate_bps_
;
int64_t
time_last_decrease_ms_
;
int64_t
first_report_time_ms_
;
int
initially_lost_packets_
;
int
bitrate_at_2_seconds_kbps_
;
UmaState
uma_update_state_
;
std
:
:
vector
<
bool
>
rampup_uma_stats_updated_
;
RtcEventLog
*
event_log_
;
int64_t
last_rtc_event_log_ms_
;
bool
in_timeout_experiment_
;
float
low_loss_threshold_
;
float
high_loss_threshold_
;
uint32_t
bitrate_threshold_bps_
;
}
;
}
#
endif
