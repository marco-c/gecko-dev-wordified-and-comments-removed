#
ifndef
MODULES_VIDEO_CAPTURE_VIDEO_CAPTURE_DEFINES_H_
#
define
MODULES_VIDEO_CAPTURE_VIDEO_CAPTURE_DEFINES_H_
#
include
"
api
/
video
/
video_frame
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
#
ifndef
NULL
#
define
NULL
0
#
endif
enum
{
kVideoCaptureUniqueNameLength
=
1024
}
;
enum
{
kVideoCaptureDeviceNameLength
=
256
}
;
enum
{
kVideoCaptureProductIdLength
=
128
}
;
struct
VideoCaptureCapability
{
int32_t
width
;
int32_t
height
;
int32_t
maxFPS
;
VideoType
videoType
;
bool
interlaced
;
VideoCaptureCapability
(
)
{
width
=
0
;
height
=
0
;
maxFPS
=
0
;
videoType
=
VideoType
:
:
kUnknown
;
interlaced
=
false
;
}
;
bool
operator
!
=
(
const
VideoCaptureCapability
&
other
)
const
{
if
(
width
!
=
other
.
width
)
return
true
;
if
(
height
!
=
other
.
height
)
return
true
;
if
(
maxFPS
!
=
other
.
maxFPS
)
return
true
;
if
(
videoType
!
=
other
.
videoType
)
return
true
;
if
(
interlaced
!
=
other
.
interlaced
)
return
true
;
return
false
;
}
bool
operator
=
=
(
const
VideoCaptureCapability
&
other
)
const
{
return
!
operator
!
=
(
other
)
;
}
}
;
class
VideoCaptureExternal
{
public
:
virtual
int32_t
IncomingFrame
(
uint8_t
*
videoFrame
size_t
videoFrameLength
const
VideoCaptureCapability
&
frameInfo
int64_t
captureTime
=
0
)
=
0
;
protected
:
~
VideoCaptureExternal
(
)
{
}
}
;
class
VideoCaptureDataCallback
{
public
:
virtual
void
OnIncomingCapturedFrame
(
const
int32_t
id
const
VideoFrame
&
videoFrame
)
=
0
;
virtual
void
OnCaptureDelayChanged
(
const
int32_t
id
const
int32_t
delay
)
=
0
;
protected
:
virtual
~
VideoCaptureDataCallback
(
)
{
}
}
;
}
#
endif
