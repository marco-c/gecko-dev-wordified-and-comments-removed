#
ifndef
WEBRTC_MODULES_VIDEO_CAPTURE_MAIN_SOURCE_MAC_AVFOUNDATION_VIDEO_CAPTURE_AVFOUNDATION_INFO_H_
#
define
WEBRTC_MODULES_VIDEO_CAPTURE_MAIN_SOURCE_MAC_AVFOUNDATION_VIDEO_CAPTURE_AVFOUNDATION_INFO_H_
#
include
"
webrtc
/
modules
/
video_capture
/
device_info_impl
.
h
"
#
include
"
webrtc
/
modules
/
video_capture
/
mac
/
avfoundation
/
video_capture_avfoundation_utility
.
h
"
#
include
"
webrtc
/
modules
/
video_capture
/
video_capture_impl
.
h
"
class
VideoCaptureMacAVFoundationInfoObjC
;
namespace
webrtc
{
namespace
videocapturemodule
{
class
VideoCaptureMacAVFoundationInfo
:
public
DeviceInfoImpl
{
public
:
VideoCaptureMacAVFoundationInfo
(
const
int32_t
id
)
;
virtual
~
VideoCaptureMacAVFoundationInfo
(
)
;
int32_t
Init
(
)
;
virtual
uint32_t
NumberOfDevices
(
)
;
virtual
int32_t
GetDeviceName
(
uint32_t
deviceNumber
char
*
deviceNameUTF8
uint32_t
deviceNameLength
char
*
deviceUniqueIdUTF8
uint32_t
deviceUniqueIdUTF8Length
char
*
productUniqueIdUTF8
=
0
uint32_t
productUniqueIdUTF8Length
=
0
pid_t
*
pid
=
0
)
;
virtual
int32_t
NumberOfCapabilities
(
const
char
*
deviceUniqueIdUTF8
)
;
virtual
int32_t
GetCapability
(
const
char
*
deviceUniqueIdUTF8
const
uint32_t
deviceCapabilityNumber
VideoCaptureCapability
&
capability
)
;
virtual
int32_t
DisplayCaptureSettingsDialogBox
(
const
char
*
deviceUniqueIdUTF8
const
char
*
dialogTitleUTF8
void
*
parentWindow
uint32_t
positionX
uint32_t
positionY
)
;
protected
:
virtual
int32_t
CreateCapabilityMap
(
const
char
*
deviceUniqueIdUTF8
)
;
VideoCaptureMacAVFoundationInfoObjC
*
_captureInfo
;
}
;
}
}
#
endif
