#
include
"
webrtc
/
common_video
/
libyuv
/
include
/
scaler
.
h
"
#
include
"
webrtc
/
common_video
/
libyuv
/
include
/
webrtc_libyuv
.
h
"
#
include
"
webrtc
/
modules
/
video_processing
/
video_denoiser
.
h
"
namespace
webrtc
{
VideoDenoiser
:
:
VideoDenoiser
(
bool
runtime_cpu_detection
)
:
width_
(
0
)
height_
(
0
)
filter_
(
DenoiserFilter
:
:
Create
(
runtime_cpu_detection
)
)
{
}
void
VideoDenoiser
:
:
TrailingReduction
(
int
mb_rows
int
mb_cols
const
uint8_t
*
y_src
int
stride_y
uint8_t
*
y_dst
)
{
for
(
int
mb_row
=
1
;
mb_row
<
mb_rows
-
1
;
+
+
mb_row
)
{
for
(
int
mb_col
=
1
;
mb_col
<
mb_cols
-
1
;
+
+
mb_col
)
{
int
mb_index
=
mb_row
*
mb_cols
+
mb_col
;
uint8_t
*
mb_dst
=
y_dst
+
(
mb_row
<
<
4
)
*
stride_y
+
(
mb_col
<
<
4
)
;
const
uint8_t
*
mb_src
=
y_src
+
(
mb_row
<
<
4
)
*
stride_y
+
(
mb_col
<
<
4
)
;
if
(
metrics_
[
mb_index
]
.
is_skin
)
{
if
(
metrics_
[
mb_index
]
.
denoise
&
&
metrics_
[
mb_index
+
1
]
.
denoise
+
metrics_
[
mb_index
-
1
]
.
denoise
+
metrics_
[
mb_index
+
mb_cols
]
.
denoise
+
metrics_
[
mb_index
-
mb_cols
]
.
denoise
<
=
2
)
{
metrics_
[
mb_index
]
.
denoise
=
0
;
filter_
-
>
CopyMem16x16
(
mb_src
stride_y
mb_dst
stride_y
)
;
}
}
else
if
(
metrics_
[
mb_index
]
.
denoise
&
&
metrics_
[
mb_index
+
1
]
.
denoise
+
metrics_
[
mb_index
-
1
]
.
denoise
+
metrics_
[
mb_index
+
mb_cols
+
1
]
.
denoise
+
metrics_
[
mb_index
+
mb_cols
-
1
]
.
denoise
+
metrics_
[
mb_index
-
mb_cols
+
1
]
.
denoise
+
metrics_
[
mb_index
-
mb_cols
-
1
]
.
denoise
+
metrics_
[
mb_index
+
mb_cols
]
.
denoise
+
metrics_
[
mb_index
-
mb_cols
]
.
denoise
<
=
7
)
{
filter_
-
>
CopyMem16x16
(
mb_src
stride_y
mb_dst
stride_y
)
;
}
}
}
}
void
VideoDenoiser
:
:
DenoiseFrame
(
const
VideoFrame
&
frame
VideoFrame
*
denoised_frame
)
{
int
stride_y
=
frame
.
stride
(
kYPlane
)
;
int
stride_u
=
frame
.
stride
(
kUPlane
)
;
int
stride_v
=
frame
.
stride
(
kVPlane
)
;
if
(
width_
!
=
frame
.
width
(
)
|
|
height_
!
=
frame
.
height
(
)
)
{
width_
=
frame
.
width
(
)
;
height_
=
frame
.
height
(
)
;
denoised_frame
-
>
CreateFrame
(
frame
.
buffer
(
kYPlane
)
frame
.
buffer
(
kUPlane
)
frame
.
buffer
(
kVPlane
)
width_
height_
stride_y
stride_u
stride_v
)
;
denoised_frame
-
>
set_timestamp
(
frame
.
timestamp
(
)
)
;
denoised_frame
-
>
set_render_time_ms
(
frame
.
render_time_ms
(
)
)
;
return
;
}
int
mb_cols
=
width_
>
>
4
;
int
mb_rows
=
height_
>
>
4
;
if
(
metrics_
.
get
(
)
=
=
nullptr
)
metrics_
.
reset
(
new
DenoiseMetrics
[
mb_cols
*
mb_rows
]
(
)
)
;
uint8_t
*
y_dst
=
denoised_frame
-
>
buffer
(
kYPlane
)
;
uint8_t
*
u_dst
=
denoised_frame
-
>
buffer
(
kUPlane
)
;
uint8_t
*
v_dst
=
denoised_frame
-
>
buffer
(
kVPlane
)
;
const
uint8_t
*
y_src
=
frame
.
buffer
(
kYPlane
)
;
const
uint8_t
*
u_src
=
frame
.
buffer
(
kUPlane
)
;
const
uint8_t
*
v_src
=
frame
.
buffer
(
kVPlane
)
;
uint8_t
y_tmp
[
16
*
16
]
=
{
0
}
;
for
(
int
mb_row
=
0
;
mb_row
<
mb_rows
;
+
+
mb_row
)
{
for
(
int
mb_col
=
0
;
mb_col
<
mb_cols
;
+
+
mb_col
)
{
const
uint8_t
*
mb_src
=
y_src
+
(
mb_row
<
<
4
)
*
stride_y
+
(
mb_col
<
<
4
)
;
uint8_t
*
mb_dst
=
y_dst
+
(
mb_row
<
<
4
)
*
stride_y
+
(
mb_col
<
<
4
)
;
int
mb_index
=
mb_row
*
mb_cols
+
mb_col
;
if
(
filter_
-
>
MbDenoise
(
mb_dst
stride_y
y_tmp
16
mb_src
stride_y
0
1
)
=
=
FILTER_BLOCK
)
{
uint32_t
thr_var
=
0
;
metrics_
[
mb_index
]
.
var
=
filter_
-
>
Variance16x8
(
mb_dst
stride_y
y_tmp
16
&
metrics_
[
mb_index
]
.
sad
)
;
metrics_
[
mb_index
]
.
is_skin
=
MbHasSkinColor
(
y_src
u_src
v_src
stride_y
stride_u
stride_v
mb_row
mb_col
)
;
thr_var
=
metrics_
[
mb_index
]
.
is_skin
?
128
:
12
*
128
;
if
(
metrics_
[
mb_index
]
.
var
>
thr_var
)
{
metrics_
[
mb_index
]
.
denoise
=
0
;
filter_
-
>
CopyMem16x16
(
mb_src
stride_y
mb_dst
stride_y
)
;
}
else
{
metrics_
[
mb_index
]
.
denoise
=
1
;
filter_
-
>
CopyMem16x16
(
y_tmp
16
mb_dst
stride_y
)
;
}
}
else
{
metrics_
[
mb_index
]
.
denoise
=
0
;
filter_
-
>
CopyMem16x16
(
mb_src
stride_y
mb_dst
stride_y
)
;
}
const
uint8_t
*
mb_src_u
=
u_src
+
(
mb_row
<
<
3
)
*
stride_u
+
(
mb_col
<
<
3
)
;
const
uint8_t
*
mb_src_v
=
v_src
+
(
mb_row
<
<
3
)
*
stride_v
+
(
mb_col
<
<
3
)
;
uint8_t
*
mb_dst_u
=
u_dst
+
(
mb_row
<
<
3
)
*
stride_u
+
(
mb_col
<
<
3
)
;
uint8_t
*
mb_dst_v
=
v_dst
+
(
mb_row
<
<
3
)
*
stride_v
+
(
mb_col
<
<
3
)
;
filter_
-
>
CopyMem8x8
(
mb_src_u
stride_u
mb_dst_u
stride_u
)
;
filter_
-
>
CopyMem8x8
(
mb_src_v
stride_v
mb_dst_v
stride_v
)
;
}
}
TrailingReduction
(
mb_rows
mb_cols
y_src
stride_y
y_dst
)
;
denoised_frame
-
>
set_timestamp
(
frame
.
timestamp
(
)
)
;
denoised_frame
-
>
set_render_time_ms
(
frame
.
render_time_ms
(
)
)
;
return
;
}
}
