#
ifndef
WEBRTC_MODULES_VIDEO_PROCESSING_FRAME_PREPROCESSOR_H_
#
define
WEBRTC_MODULES_VIDEO_PROCESSING_FRAME_PREPROCESSOR_H_
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
modules
/
video_processing
/
include
/
video_processing
.
h
"
#
include
"
webrtc
/
modules
/
video_processing
/
content_analysis
.
h
"
#
include
"
webrtc
/
modules
/
video_processing
/
spatial_resampler
.
h
"
#
include
"
webrtc
/
modules
/
video_processing
/
video_decimator
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
#
include
"
webrtc
/
video_frame
.
h
"
namespace
webrtc
{
class
VideoDenoiser
;
class
VPMFramePreprocessor
{
public
:
VPMFramePreprocessor
(
)
;
~
VPMFramePreprocessor
(
)
;
void
Reset
(
)
;
void
EnableTemporalDecimation
(
bool
enable
)
;
void
SetInputFrameResampleMode
(
VideoFrameResampling
resampling_mode
)
;
void
EnableContentAnalysis
(
bool
enable
)
;
int32_t
SetTargetResolution
(
uint32_t
width
uint32_t
height
uint32_t
frame_rate
)
;
void
SetTargetFramerate
(
int
frame_rate
)
;
void
UpdateIncomingframe_rate
(
)
;
int32_t
updateIncomingFrameSize
(
uint32_t
width
uint32_t
height
)
;
uint32_t
GetDecimatedFrameRate
(
)
;
uint32_t
GetDecimatedWidth
(
)
const
;
uint32_t
GetDecimatedHeight
(
)
const
;
void
EnableDenosing
(
bool
enable
)
;
const
VideoFrame
*
PreprocessFrame
(
const
VideoFrame
&
frame
)
;
VideoContentMetrics
*
GetContentMetrics
(
)
const
;
private
:
enum
{
kSkipFrameCA
=
2
}
;
VideoContentMetrics
*
content_metrics_
;
VideoFrame
denoised_frame_
;
VideoFrame
resampled_frame_
;
VPMSpatialResampler
*
spatial_resampler_
;
VPMContentAnalysis
*
ca_
;
VPMVideoDecimator
*
vd_
;
rtc
:
:
scoped_ptr
<
VideoDenoiser
>
denoiser_
;
bool
enable_ca_
;
uint32_t
frame_cnt_
;
}
;
}
#
endif
