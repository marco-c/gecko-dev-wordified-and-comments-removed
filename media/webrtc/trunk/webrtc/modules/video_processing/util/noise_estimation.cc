#
include
"
webrtc
/
modules
/
video_processing
/
util
/
noise_estimation
.
h
"
#
if
DISPLAYNEON
#
include
<
android
/
log
.
h
>
#
endif
namespace
webrtc
{
void
NoiseEstimation
:
:
Init
(
int
width
int
height
CpuType
cpu_type
)
{
int
mb_cols
=
width
>
>
4
;
int
mb_rows
=
height
>
>
4
;
consec_low_var_
.
reset
(
new
uint32_t
[
mb_cols
*
mb_rows
]
(
)
)
;
width_
=
width
;
height_
=
height
;
mb_cols_
=
width_
>
>
4
;
mb_rows_
=
height_
>
>
4
;
cpu_type_
=
cpu_type
;
}
void
NoiseEstimation
:
:
GetNoise
(
int
mb_index
uint32_t
var
uint32_t
luma
)
{
consec_low_var_
[
mb_index
]
+
+
;
num_static_block_
+
+
;
if
(
consec_low_var_
[
mb_index
]
>
=
kConsecLowVarFrame
&
&
(
luma
>
>
6
)
<
kAverageLumaMax
&
&
(
luma
>
>
6
)
>
kAverageLumaMin
)
{
int
nor_var
=
var
/
(
luma
>
>
10
)
;
noise_var_
+
=
nor_var
>
kBlockSelectionVarMax
?
kBlockSelectionVarMax
:
nor_var
;
num_noisy_block_
+
+
;
}
}
void
NoiseEstimation
:
:
ResetConsecLowVar
(
int
mb_index
)
{
consec_low_var_
[
mb_index
]
=
0
;
}
void
NoiseEstimation
:
:
UpdateNoiseLevel
(
)
{
if
(
num_static_block_
<
(
0
.
65
*
mb_cols_
*
mb_rows_
/
NOISE_SUBSAMPLE_INTERVAL
)
|
|
!
num_noisy_block_
)
{
#
if
DISPLAY
printf
(
"
Not
enough
samples
.
%
d
\
n
"
num_static_block_
)
;
#
elif
DISPLAYNEON
__android_log_print
(
ANDROID_LOG_DEBUG
"
DISPLAY
"
"
Not
enough
samples
.
%
d
\
n
"
num_static_block_
)
;
#
endif
noise_var_
=
0
;
noise_var_accum_
=
0
;
num_noisy_block_
=
0
;
num_static_block_
=
0
;
return
;
}
else
{
#
if
DISPLAY
printf
(
"
%
d
%
d
fraction
=
%
.
3f
\
n
"
num_static_block_
mb_cols_
*
mb_rows_
/
NOISE_SUBSAMPLE_INTERVAL
percent_static_block_
)
;
#
elif
DISPLAYNEON
__android_log_print
(
ANDROID_LOG_DEBUG
"
DISPLAY
"
"
%
d
%
d
fraction
=
%
.
3f
\
n
"
num_static_block_
mb_cols_
*
mb_rows_
/
NOISE_SUBSAMPLE_INTERVAL
percent_static_block_
)
;
#
endif
noise_var_
/
=
num_noisy_block_
;
percent_static_block_
=
static_cast
<
double
>
(
num_static_block_
)
/
(
mb_cols_
*
mb_rows_
/
NOISE_SUBSAMPLE_INTERVAL
)
;
num_noisy_block_
=
0
;
num_static_block_
=
0
;
}
if
(
noise_var_accum_
=
=
0
)
{
noise_var_accum_
=
noise_var_
;
}
else
{
noise_var_accum_
=
(
noise_var_accum_
*
15
+
noise_var_
)
/
16
;
}
#
if
DISPLAY
printf
(
"
noise_var_accum_
=
%
.
1f
noise_var_
=
%
d
.
\
n
"
noise_var_accum_
noise_var_
)
;
#
elif
DISPLAYNEON
__android_log_print
(
ANDROID_LOG_DEBUG
"
DISPLAY
"
"
noise_var_accum_
=
%
.
1f
noise_var_
=
%
d
.
\
n
"
noise_var_accum_
noise_var_
)
;
#
endif
noise_var_
=
0
;
}
uint8_t
NoiseEstimation
:
:
GetNoiseLevel
(
)
{
int
noise_thr
=
cpu_type_
?
kNoiseThreshold
:
kNoiseThresholdNeon
;
UpdateNoiseLevel
(
)
;
if
(
noise_var_accum_
>
noise_thr
)
{
return
1
;
}
return
0
;
}
}
