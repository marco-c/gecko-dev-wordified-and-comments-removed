#
ifndef
MODULES_VIDEO_PROCESSING_UTIL_NOISE_ESTIMATION_H_
#
define
MODULES_VIDEO_PROCESSING_UTIL_NOISE_ESTIMATION_H_
#
include
<
memory
>
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
video_processing
/
util
/
denoiser_filter
.
h
"
namespace
webrtc
{
#
define
DISPLAY
0
/
/
Rectangle
diagnostics
#
define
DISPLAYNEON
0
/
/
Rectangle
diagnostics
on
NEON
const
int
kNoiseThreshold
=
150
;
const
int
kNoiseThresholdNeon
=
70
;
const
int
kConsecLowVarFrame
=
6
;
const
int
kAverageLumaMin
=
20
;
const
int
kAverageLumaMax
=
220
;
const
int
kBlockSelectionVarMax
=
kNoiseThreshold
<
<
1
;
#
define
NOISE_SUBSAMPLE_INTERVAL
41
class
NoiseEstimation
{
public
:
void
Init
(
int
width
int
height
CpuType
cpu_type
)
;
void
GetNoise
(
int
mb_index
uint32_t
var
uint32_t
luma
)
;
void
ResetConsecLowVar
(
int
mb_index
)
;
void
UpdateNoiseLevel
(
)
;
uint8_t
GetNoiseLevel
(
)
;
private
:
int
width_
;
int
height_
;
int
mb_rows_
;
int
mb_cols_
;
int
num_noisy_block_
;
int
num_static_block_
;
CpuType
cpu_type_
;
uint32_t
noise_var_
;
double
noise_var_accum_
;
double
percent_static_block_
;
std
:
:
unique_ptr
<
uint32_t
[
]
>
consec_low_var_
;
}
;
}
#
endif
