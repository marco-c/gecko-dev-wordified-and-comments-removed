#
ifndef
WEBRTC_MODULES_REMOTE_BITRATE_ESTIMATOR_TEST_PACKET_RECEIVER_H_
#
define
WEBRTC_MODULES_REMOTE_BITRATE_ESTIMATOR_TEST_PACKET_RECEIVER_H_
#
include
<
string
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
test
/
bwe
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
test
/
bwe_test_framework
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
test
/
metric_recorder
.
h
"
namespace
webrtc
{
namespace
testing
{
namespace
bwe
{
class
PacketReceiver
:
public
PacketProcessor
{
public
:
PacketReceiver
(
PacketProcessorListener
*
listener
int
flow_id
BandwidthEstimatorType
bwe_type
bool
plot_delay
bool
plot_bwe
)
;
PacketReceiver
(
PacketProcessorListener
*
listener
int
flow_id
BandwidthEstimatorType
bwe_type
bool
plot_delay
bool
plot_bwe
MetricRecorder
*
metric_recorder
)
;
~
PacketReceiver
(
)
;
void
RunFor
(
int64_t
time_ms
Packets
*
in_out
)
override
;
void
LogStats
(
)
;
Stats
<
double
>
GetDelayStats
(
)
const
;
float
GlobalPacketLoss
(
)
;
protected
:
void
UpdateMetrics
(
int64_t
arrival_time_ms
int64_t
send_time_ms
size_t
payload_size
)
;
Stats
<
double
>
delay_stats_
;
rtc
:
:
scoped_ptr
<
BweReceiver
>
bwe_receiver_
;
private
:
void
PlotDelay
(
int64_t
arrival_time_ms
int64_t
send_time_ms
)
;
MetricRecorder
*
metric_recorder_
;
bool
plot_delay_
;
int64_t
last_delay_plot_ms_
;
std
:
:
string
delay_prefix_
;
BandwidthEstimatorType
bwe_type_
;
RTC_DISALLOW_IMPLICIT_CONSTRUCTORS
(
PacketReceiver
)
;
}
;
}
}
}
#
endif
