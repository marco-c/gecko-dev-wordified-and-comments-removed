#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
test
/
bwe_test_framework
.
h
"
#
include
<
numeric
>
#
include
"
testing
/
gtest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
test
/
packet
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
test
/
packet_sender
.
h
"
#
include
"
webrtc
/
test
/
testsupport
/
fileutils
.
h
"
namespace
webrtc
{
namespace
testing
{
namespace
bwe
{
static
bool
IsSequenceNumberSorted
(
const
Packets
&
packets
)
{
PacketsConstIt
last_it
=
packets
.
begin
(
)
;
for
(
PacketsConstIt
it
=
last_it
;
it
!
=
packets
.
end
(
)
;
+
+
it
)
{
const
MediaPacket
*
packet
=
static_cast
<
const
MediaPacket
*
>
(
*
it
)
;
const
MediaPacket
*
last_packet
=
static_cast
<
const
MediaPacket
*
>
(
*
last_it
)
;
if
(
IsNewerSequenceNumber
(
last_packet
-
>
header
(
)
.
sequenceNumber
packet
-
>
header
(
)
.
sequenceNumber
)
)
{
return
false
;
}
last_it
=
it
;
}
return
true
;
}
TEST
(
BweTestFramework_PacketTest
IsTimeSorted
)
{
Packets
packets
;
EXPECT_TRUE
(
IsTimeSorted
(
packets
)
)
;
packets
.
push_back
(
new
MediaPacket
(
100
0
)
)
;
EXPECT_TRUE
(
IsTimeSorted
(
packets
)
)
;
packets
.
push_back
(
new
MediaPacket
(
110
0
)
)
;
EXPECT_TRUE
(
IsTimeSorted
(
packets
)
)
;
packets
.
push_back
(
new
MediaPacket
(
100
0
)
)
;
EXPECT_FALSE
(
IsTimeSorted
(
packets
)
)
;
delete
packets
.
back
(
)
;
packets
.
pop_back
(
)
;
packets
.
push_back
(
new
MediaPacket
(
120
0
)
)
;
EXPECT_TRUE
(
IsTimeSorted
(
packets
)
)
;
for
(
auto
*
packet
:
packets
)
delete
packet
;
}
TEST
(
BweTestFramework_PacketTest
IsSequenceNumberSorted
)
{
Packets
packets
;
EXPECT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
packets
.
push_back
(
new
MediaPacket
(
0
100
)
)
;
EXPECT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
packets
.
push_back
(
new
MediaPacket
(
0
110
)
)
;
EXPECT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
packets
.
push_back
(
new
MediaPacket
(
0
100
)
)
;
EXPECT_FALSE
(
IsSequenceNumberSorted
(
packets
)
)
;
delete
packets
.
back
(
)
;
packets
.
pop_back
(
)
;
packets
.
push_back
(
new
MediaPacket
(
0
120
)
)
;
EXPECT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
for
(
auto
*
packet
:
packets
)
delete
packet
;
}
TEST
(
BweTestFramework_StatsTest
Mean
)
{
Stats
<
int32_t
>
stats
;
EXPECT_EQ
(
0
stats
.
GetMean
(
)
)
;
stats
.
Push
(
1
)
;
stats
.
Push
(
3
)
;
EXPECT_EQ
(
2
stats
.
GetMean
(
)
)
;
stats
.
Push
(
-
3
)
;
EXPECT_EQ
(
0
stats
.
GetMean
(
)
)
;
}
TEST
(
BweTestFramework_StatsTest
Variance
)
{
Stats
<
int32_t
>
stats
;
EXPECT_EQ
(
0
stats
.
GetVariance
(
)
)
;
stats
.
Push
(
1
)
;
stats
.
Push
(
3
)
;
EXPECT_EQ
(
1
stats
.
GetVariance
(
)
)
;
stats
.
Push
(
-
4
)
;
EXPECT_EQ
(
8
stats
.
GetVariance
(
)
)
;
}
TEST
(
BweTestFramework_StatsTest
StdDev
)
{
Stats
<
int32_t
>
stats
;
EXPECT_EQ
(
0
stats
.
GetStdDev
(
)
)
;
stats
.
Push
(
1
)
;
stats
.
Push
(
3
)
;
EXPECT_EQ
(
1
stats
.
GetStdDev
(
)
)
;
stats
.
Push
(
-
4
)
;
EXPECT_EQ
(
2
stats
.
GetStdDev
(
)
)
;
}
TEST
(
BweTestFramework_StatsTest
MinMax
)
{
Stats
<
int32_t
>
stats
;
EXPECT_EQ
(
0
stats
.
GetMin
(
)
)
;
EXPECT_EQ
(
0
stats
.
GetMax
(
)
)
;
stats
.
Push
(
1
)
;
EXPECT_EQ
(
1
stats
.
GetMin
(
)
)
;
EXPECT_EQ
(
1
stats
.
GetMax
(
)
)
;
stats
.
Push
(
3
)
;
EXPECT_EQ
(
1
stats
.
GetMin
(
)
)
;
EXPECT_EQ
(
3
stats
.
GetMax
(
)
)
;
stats
.
Push
(
-
4
)
;
EXPECT_EQ
(
-
4
stats
.
GetMin
(
)
)
;
EXPECT_EQ
(
3
stats
.
GetMax
(
)
)
;
}
class
BweTestFramework_RateCounterFilterTest
:
public
:
:
testing
:
:
Test
{
public
:
BweTestFramework_RateCounterFilterTest
(
)
:
filter_
(
NULL
0
"
"
"
"
)
now_ms_
(
0
)
{
}
virtual
~
BweTestFramework_RateCounterFilterTest
(
)
{
}
protected
:
void
TestRateCounter
(
int64_t
run_for_ms
uint32_t
payload_bits
uint32_t
expected_pps
uint32_t
expected_bps
)
{
Packets
packets
;
RTPHeader
header
;
for
(
int64_t
i
=
0
;
i
<
run_for_ms
;
i
+
=
10
now_ms_
+
=
10
)
{
packets
.
push_back
(
new
MediaPacket
(
0
now_ms_
*
1000
payload_bits
/
8
header
)
)
;
}
filter_
.
RunFor
(
run_for_ms
&
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
EXPECT_EQ
(
expected_pps
filter_
.
packets_per_second
(
)
)
;
EXPECT_EQ
(
expected_bps
filter_
.
bits_per_second
(
)
)
;
for
(
auto
*
packet
:
packets
)
delete
packet
;
}
private
:
RateCounterFilter
filter_
;
int64_t
now_ms_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
BweTestFramework_RateCounterFilterTest
)
;
}
;
TEST_F
(
BweTestFramework_RateCounterFilterTest
Short
)
{
TestRateCounter
(
100
800
10
8000
)
;
}
TEST_F
(
BweTestFramework_RateCounterFilterTest
Medium
)
{
TestRateCounter
(
100
800
10
8000
)
;
TestRateCounter
(
900
800
100
80000
)
;
}
TEST_F
(
BweTestFramework_RateCounterFilterTest
Long
)
{
TestRateCounter
(
100
800
10
8000
)
;
TestRateCounter
(
900
800
100
80000
)
;
TestRateCounter
(
1000
400
100
40000
)
;
TestRateCounter
(
500
0
100
20000
)
;
TestRateCounter
(
500
0
100
0
)
;
TestRateCounter
(
500
200
100
10000
)
;
}
static
void
TestLossFilter
(
float
loss_percent
bool
zero_tolerance
)
{
LossFilter
filter
(
NULL
0
)
;
filter
.
SetLoss
(
loss_percent
)
;
Packets
:
:
size_type
sent_packets
=
0
;
Packets
:
:
size_type
remaining_packets
=
0
;
{
Packets
packets
;
sent_packets
+
=
packets
.
size
(
)
;
filter
.
RunFor
(
0
&
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
remaining_packets
+
=
packets
.
size
(
)
;
EXPECT_EQ
(
0u
sent_packets
)
;
EXPECT_EQ
(
0u
remaining_packets
)
;
for
(
auto
*
packet
:
packets
)
delete
packet
;
}
for
(
int
i
=
0
;
i
<
2225
;
+
+
i
)
{
Packets
packets
;
for
(
int
j
=
0
;
j
<
i
%
10
;
+
+
j
)
packets
.
push_back
(
new
MediaPacket
(
i
i
)
)
;
sent_packets
+
=
packets
.
size
(
)
;
filter
.
RunFor
(
0
&
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
remaining_packets
+
=
packets
.
size
(
)
;
for
(
auto
*
packet
:
packets
)
delete
packet
;
}
float
loss_fraction
=
0
.
01f
*
(
100
.
0f
-
loss_percent
)
;
Packets
:
:
size_type
expected_packets
=
loss_fraction
*
sent_packets
;
if
(
zero_tolerance
)
{
EXPECT_EQ
(
expected_packets
remaining_packets
)
;
}
else
{
EXPECT_NEAR
(
expected_packets
remaining_packets
100
)
;
}
}
TEST
(
BweTestFramework_LossFilterTest
Loss0
)
{
TestLossFilter
(
0
.
0f
true
)
;
}
TEST
(
BweTestFramework_LossFilterTest
Loss10
)
{
TestLossFilter
(
10
.
0f
false
)
;
}
TEST
(
BweTestFramework_LossFilterTest
Loss50
)
{
TestLossFilter
(
50
.
0f
false
)
;
}
TEST
(
BweTestFramework_LossFilterTest
Loss100
)
{
TestLossFilter
(
100
.
0f
true
)
;
}
class
BweTestFramework_DelayFilterTest
:
public
:
:
testing
:
:
Test
{
public
:
BweTestFramework_DelayFilterTest
(
)
:
filter_
(
NULL
0
)
now_ms_
(
0
)
sequence_number_
(
0
)
{
}
virtual
~
BweTestFramework_DelayFilterTest
(
)
{
for
(
auto
*
packet
:
accumulated_packets_
)
delete
packet
;
}
protected
:
void
TestDelayFilter
(
int64_t
run_for_ms
uint32_t
in_packets
uint32_t
out_packets
)
{
Packets
packets
;
for
(
uint32_t
i
=
0
;
i
<
in_packets
;
+
+
i
)
{
packets
.
push_back
(
new
MediaPacket
(
now_ms_
*
1000
+
(
sequence_number_
>
>
4
)
sequence_number_
)
)
;
sequence_number_
+
+
;
}
filter_
.
RunFor
(
run_for_ms
&
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
for
(
PacketsConstIt
it
=
packets
.
begin
(
)
;
it
!
=
packets
.
end
(
)
;
+
+
it
)
{
EXPECT_LE
(
now_ms_
*
1000
(
*
it
)
-
>
send_time_us
(
)
)
;
}
EXPECT_EQ
(
out_packets
packets
.
size
(
)
)
;
accumulated_packets_
.
splice
(
accumulated_packets_
.
end
(
)
packets
)
;
now_ms_
+
=
run_for_ms
;
}
void
TestDelayFilter
(
int64_t
delay_ms
)
{
filter_
.
SetOneWayDelayMs
(
delay_ms
)
;
TestDelayFilter
(
1
0
0
)
;
TestDelayFilter
(
0
1
1
)
;
TestDelayFilter
(
delay_ms
0
0
)
;
for
(
int
i
=
0
;
i
<
delay_ms
;
+
+
i
)
{
filter_
.
SetOneWayDelayMs
(
i
)
;
TestDelayFilter
(
1
10
10
)
;
}
TestDelayFilter
(
0
0
0
)
;
TestDelayFilter
(
delay_ms
0
0
)
;
TestDelayFilter
(
delay_ms
0
0
)
;
for
(
int
i
=
1
;
i
<
delay_ms
+
1
;
+
+
i
)
{
filter_
.
SetOneWayDelayMs
(
i
)
;
TestDelayFilter
(
1
5
5
)
;
}
TestDelayFilter
(
0
0
0
)
;
filter_
.
SetOneWayDelayMs
(
2
*
delay_ms
)
;
TestDelayFilter
(
1
0
0
)
;
TestDelayFilter
(
delay_ms
13
13
)
;
TestDelayFilter
(
delay_ms
0
0
)
;
TestDelayFilter
(
delay_ms
0
0
)
;
for
(
int
i
=
0
;
i
<
2
*
delay_ms
;
+
+
i
)
{
filter_
.
SetOneWayDelayMs
(
2
*
delay_ms
-
i
-
1
)
;
TestDelayFilter
(
1
5
5
)
;
}
TestDelayFilter
(
0
0
0
)
;
filter_
.
SetOneWayDelayMs
(
0
)
;
TestDelayFilter
(
0
7
7
)
;
ASSERT_TRUE
(
IsTimeSorted
(
accumulated_packets_
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
accumulated_packets_
)
)
;
}
DelayFilter
filter_
;
Packets
accumulated_packets_
;
private
:
int64_t
now_ms_
;
uint16_t
sequence_number_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
BweTestFramework_DelayFilterTest
)
;
}
;
TEST_F
(
BweTestFramework_DelayFilterTest
Delay0
)
{
TestDelayFilter
(
1
0
0
)
;
TestDelayFilter
(
1
10
10
)
;
TestDelayFilter
(
1
0
0
)
;
filter_
.
SetOneWayDelayMs
(
0
)
;
TestDelayFilter
(
1
5
5
)
;
TestDelayFilter
(
1
0
0
)
;
}
TEST_F
(
BweTestFramework_DelayFilterTest
Delay1
)
{
TestDelayFilter
(
1
)
;
}
TEST_F
(
BweTestFramework_DelayFilterTest
Delay2
)
{
TestDelayFilter
(
2
)
;
}
TEST_F
(
BweTestFramework_DelayFilterTest
Delay20
)
{
TestDelayFilter
(
20
)
;
}
TEST_F
(
BweTestFramework_DelayFilterTest
Delay100
)
{
TestDelayFilter
(
100
)
;
}
TEST_F
(
BweTestFramework_DelayFilterTest
JumpToZeroDelay
)
{
DelayFilter
delay
(
NULL
0
)
;
Packets
acc
;
Packets
packets
;
delay
.
SetOneWayDelayMs
(
100
.
0f
)
;
for
(
uint32_t
i
=
0
;
i
<
10
;
+
+
i
)
{
packets
.
push_back
(
new
MediaPacket
(
i
*
100
i
)
)
;
}
delay
.
RunFor
(
1000
&
packets
)
;
acc
.
splice
(
acc
.
end
(
)
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
acc
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
acc
)
)
;
delay
.
SetOneWayDelayMs
(
0
.
0f
)
;
for
(
uint32_t
i
=
10
;
i
<
50
;
+
+
i
)
{
packets
.
push_back
(
new
MediaPacket
(
i
*
100
i
)
)
;
}
delay
.
RunFor
(
1000
&
packets
)
;
acc
.
splice
(
acc
.
end
(
)
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
acc
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
acc
)
)
;
for
(
auto
*
packet
:
acc
)
delete
packet
;
}
TEST_F
(
BweTestFramework_DelayFilterTest
IncreasingDelay
)
{
for
(
int
i
=
1
;
i
<
50
;
i
+
=
4
)
{
TestDelayFilter
(
i
)
;
}
filter_
.
SetOneWayDelayMs
(
100
)
;
TestDelayFilter
(
1
20
20
)
;
TestDelayFilter
(
2
0
0
)
;
TestDelayFilter
(
99
20
20
)
;
filter_
.
SetOneWayDelayMs
(
0
)
;
TestDelayFilter
(
1
100
100
)
;
TestDelayFilter
(
23010
0
0
)
;
ASSERT_TRUE
(
IsTimeSorted
(
accumulated_packets_
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
accumulated_packets_
)
)
;
}
static
void
TestJitterFilter
(
int64_t
max_jitter_ms
)
{
JitterFilter
filter
(
NULL
0
)
;
filter
.
SetMaxJitter
(
max_jitter_ms
)
;
int64_t
now_ms
=
0
;
uint16_t
sequence_number
=
0
;
Packets
original
;
Packets
jittered
;
for
(
uint32_t
i
=
0
;
i
<
1000
;
+
+
i
)
{
Packets
packets
;
for
(
uint32_t
j
=
0
;
j
<
i
%
100
;
+
+
j
)
{
packets
.
push_back
(
new
MediaPacket
(
now_ms
*
1000
sequence_number
)
)
;
original
.
push_back
(
new
MediaPacket
(
now_ms
*
1000
sequence_number
)
)
;
+
+
sequence_number
;
now_ms
+
=
5
*
max_jitter_ms
;
}
filter
.
RunFor
(
max_jitter_ms
&
packets
)
;
jittered
.
splice
(
jittered
.
end
(
)
packets
)
;
}
ASSERT_TRUE
(
IsTimeSorted
(
original
)
)
;
ASSERT_TRUE
(
IsTimeSorted
(
jittered
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
original
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
jittered
)
)
;
EXPECT_EQ
(
original
.
size
(
)
jittered
.
size
(
)
)
;
Stats
<
double
>
jitter_us
;
int64_t
max_jitter_obtained_us
=
0
;
for
(
PacketsIt
it1
=
original
.
begin
(
)
it2
=
jittered
.
begin
(
)
;
it1
!
=
original
.
end
(
)
&
&
it2
!
=
jittered
.
end
(
)
;
+
+
it1
+
+
it2
)
{
const
MediaPacket
*
packet1
=
static_cast
<
const
MediaPacket
*
>
(
*
it1
)
;
const
MediaPacket
*
packet2
=
static_cast
<
const
MediaPacket
*
>
(
*
it2
)
;
EXPECT_EQ
(
packet1
-
>
header
(
)
.
sequenceNumber
packet2
-
>
header
(
)
.
sequenceNumber
)
;
max_jitter_obtained_us
=
std
:
:
max
(
max_jitter_obtained_us
packet2
-
>
send_time_us
(
)
-
packet1
-
>
send_time_us
(
)
)
;
jitter_us
.
Push
(
packet2
-
>
send_time_us
(
)
-
packet1
-
>
send_time_us
(
)
)
;
}
EXPECT_NEAR
(
filter
.
MeanUs
(
)
jitter_us
.
GetMean
(
)
max_jitter_ms
*
1000
.
0
*
0
.
01
)
;
EXPECT_NEAR
(
max_jitter_ms
*
1000
.
0
max_jitter_obtained_us
max_jitter_ms
*
1000
.
0
*
0
.
01
)
;
for
(
auto
*
packet
:
original
)
delete
packet
;
for
(
auto
*
packet
:
jittered
)
delete
packet
;
}
TEST
(
BweTestFramework_JitterFilterTest
Jitter0
)
{
TestJitterFilter
(
0
)
;
}
TEST
(
BweTestFramework_JitterFilterTest
Jitter1
)
{
TestJitterFilter
(
1
)
;
}
TEST
(
BweTestFramework_JitterFilterTest
Jitter5
)
{
TestJitterFilter
(
5
)
;
}
TEST
(
BweTestFramework_JitterFilterTest
Jitter10
)
{
TestJitterFilter
(
10
)
;
}
TEST
(
BweTestFramework_JitterFilterTest
Jitter1031
)
{
TestJitterFilter
(
1031
)
;
}
static
void
TestReorderFilter
(
uint16_t
reorder_percent
)
{
const
uint16_t
kPacketCount
=
10000
;
Packets
packets
;
int64_t
now_ms
=
0
;
uint16_t
sequence_number
=
1
;
for
(
uint16_t
i
=
0
;
i
<
kPacketCount
;
+
+
i
now_ms
+
=
10
)
{
packets
.
push_back
(
new
MediaPacket
(
now_ms
*
1000
sequence_number
+
+
)
)
;
}
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
ReorderFilter
filter
(
NULL
0
)
;
filter
.
SetReorder
(
reorder_percent
)
;
filter
.
RunFor
(
now_ms
&
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
uint16_t
distance
=
0
;
uint16_t
last_sequence_number
=
0
;
for
(
auto
*
packet
:
packets
)
{
const
MediaPacket
*
media_packet
=
static_cast
<
const
MediaPacket
*
>
(
packet
)
;
uint16_t
sequence_number
=
media_packet
-
>
header
(
)
.
sequenceNumber
;
if
(
sequence_number
<
last_sequence_number
)
{
distance
+
=
last_sequence_number
-
sequence_number
;
}
last_sequence_number
=
sequence_number
;
}
double
p
=
static_cast
<
double
>
(
reorder_percent
)
/
100
;
double
mean
=
p
*
(
kPacketCount
-
1
)
;
double
std_deviation
=
sqrt
(
(
kPacketCount
-
1
)
*
p
*
(
1
-
p
)
)
;
EXPECT_NEAR
(
mean
distance
3
*
std_deviation
)
;
for
(
auto
*
packet
:
packets
)
delete
packet
;
}
TEST
(
BweTestFramework_ReorderFilterTest
Reorder0
)
{
TestReorderFilter
(
0
)
;
}
TEST
(
BweTestFramework_ReorderFilterTest
Reorder10
)
{
TestReorderFilter
(
10
)
;
}
TEST
(
BweTestFramework_ReorderFilterTest
Reorder20
)
{
TestReorderFilter
(
20
)
;
}
TEST
(
BweTestFramework_ReorderFilterTest
Reorder50
)
{
TestReorderFilter
(
50
)
;
}
TEST
(
BweTestFramework_ReorderFilterTest
Reorder70
)
{
TestReorderFilter
(
70
)
;
}
TEST
(
BweTestFramework_ReorderFilterTest
Reorder100
)
{
TestReorderFilter
(
100
.
0
)
;
}
class
BweTestFramework_ChokeFilterTest
:
public
:
:
testing
:
:
Test
{
public
:
BweTestFramework_ChokeFilterTest
(
)
:
now_ms_
(
0
)
sequence_number_
(
0
)
output_packets_
(
)
send_times_us_
(
)
{
}
virtual
~
BweTestFramework_ChokeFilterTest
(
)
{
for
(
auto
*
packet
:
output_packets_
)
delete
packet
;
}
protected
:
void
TestChoke
(
PacketProcessor
*
filter
int64_t
run_for_ms
uint32_t
packets_to_generate
size_t
expected_kbit_transmitted
)
{
Packets
packets
;
RTPHeader
header
;
for
(
uint32_t
i
=
0
;
i
<
packets_to_generate
;
+
+
i
)
{
int64_t
send_time_ms
=
now_ms_
+
(
i
*
run_for_ms
)
/
packets_to_generate
;
header
.
sequenceNumber
=
sequence_number_
+
+
;
packets
.
push_back
(
new
MediaPacket
(
0
send_time_ms
*
1000
125
header
)
)
;
send_times_us_
.
push_back
(
send_time_ms
*
1000
)
;
}
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
filter
-
>
RunFor
(
run_for_ms
&
packets
)
;
now_ms_
+
=
run_for_ms
;
output_packets_
.
splice
(
output_packets_
.
end
(
)
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
output_packets_
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
output_packets_
)
)
;
size_t
bytes_transmitted
=
0
;
while
(
!
output_packets_
.
empty
(
)
)
{
const
Packet
*
packet
=
output_packets_
.
front
(
)
;
if
(
packet
-
>
send_time_us
(
)
>
now_ms_
*
1000
)
{
break
;
}
bytes_transmitted
+
=
packet
-
>
payload_size
(
)
;
delete
output_packets_
.
front
(
)
;
output_packets_
.
pop_front
(
)
;
}
EXPECT_EQ
(
expected_kbit_transmitted
(
bytes_transmitted
*
8
+
500
)
/
1000
)
;
}
void
CheckMaxDelay
(
int64_t
max_delay_ms
)
{
for
(
const
auto
*
packet
:
output_packets_
)
{
const
MediaPacket
*
media_packet
=
static_cast
<
const
MediaPacket
*
>
(
packet
)
;
int64_t
delay_us
=
media_packet
-
>
send_time_us
(
)
-
send_times_us_
[
media_packet
-
>
header
(
)
.
sequenceNumber
]
;
EXPECT_GE
(
max_delay_ms
*
1000
delay_us
)
;
}
}
private
:
int64_t
now_ms_
;
uint16_t
sequence_number_
;
Packets
output_packets_
;
std
:
:
vector
<
int64_t
>
send_times_us_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
BweTestFramework_ChokeFilterTest
)
;
}
;
TEST_F
(
BweTestFramework_ChokeFilterTest
NoQueue
)
{
const
int
kCapacityKbps
=
10
;
const
size_t
kPacketSizeBytes
=
125
;
const
int64_t
kExpectedSendTimeUs
=
(
kPacketSizeBytes
*
8
*
1000
+
kCapacityKbps
/
2
)
/
kCapacityKbps
;
uint16_t
sequence_number
=
0
;
int64_t
send_time_us
=
0
;
ChokeFilter
filter
(
NULL
0
)
;
filter
.
set_capacity_kbps
(
10
)
;
Packets
packets
;
RTPHeader
header
;
for
(
int
i
=
0
;
i
<
2
;
+
+
i
)
{
header
.
sequenceNumber
=
sequence_number
+
+
;
packets
.
push_back
(
new
MediaPacket
(
0
send_time_us
kPacketSizeBytes
header
)
)
;
send_time_us
+
=
kExpectedSendTimeUs
+
1000
;
}
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
filter
.
RunFor
(
2
*
kExpectedSendTimeUs
+
1000
&
packets
)
;
EXPECT_EQ
(
kExpectedSendTimeUs
packets
.
front
(
)
-
>
send_time_us
(
)
)
;
delete
packets
.
front
(
)
;
packets
.
pop_front
(
)
;
EXPECT_EQ
(
2
*
kExpectedSendTimeUs
+
1000
packets
.
front
(
)
-
>
send_time_us
(
)
)
;
delete
packets
.
front
(
)
;
packets
.
pop_front
(
)
;
}
TEST_F
(
BweTestFramework_ChokeFilterTest
Short
)
{
ChokeFilter
filter
(
NULL
0
)
;
filter
.
set_capacity_kbps
(
10
)
;
TestChoke
(
&
filter
100
100
1
)
;
}
TEST_F
(
BweTestFramework_ChokeFilterTest
Medium
)
{
ChokeFilter
filter
(
NULL
0
)
;
filter
.
set_capacity_kbps
(
10
)
;
TestChoke
(
&
filter
100
10
1
)
;
TestChoke
(
&
filter
100
0
1
)
;
TestChoke
(
&
filter
800
0
8
)
;
TestChoke
(
&
filter
1000
0
0
)
;
}
TEST_F
(
BweTestFramework_ChokeFilterTest
Long
)
{
ChokeFilter
filter
(
NULL
0
)
;
filter
.
set_capacity_kbps
(
10
)
;
TestChoke
(
&
filter
100
100
1
)
;
TestChoke
(
&
filter
100
0
1
)
;
TestChoke
(
&
filter
800
0
8
)
;
filter
.
set_capacity_kbps
(
100
)
;
TestChoke
(
&
filter
9000
0
90
)
;
TestChoke
(
&
filter
100
20
10
)
;
TestChoke
(
&
filter
200
10
20
)
;
filter
.
set_capacity_kbps
(
10
)
;
TestChoke
(
&
filter
1000
0
0
)
;
}
TEST_F
(
BweTestFramework_ChokeFilterTest
MaxDelay
)
{
ChokeFilter
filter
(
NULL
0
)
;
filter
.
set_capacity_kbps
(
10
)
;
filter
.
set_max_delay_ms
(
500
)
;
TestChoke
(
&
filter
100
100
1
)
;
CheckMaxDelay
(
500
)
;
TestChoke
(
&
filter
400
0
4
)
;
TestChoke
(
&
filter
9500
0
0
)
;
filter
.
set_max_delay_ms
(
100
)
;
TestChoke
(
&
filter
100
50
1
)
;
CheckMaxDelay
(
100
)
;
TestChoke
(
&
filter
9900
0
0
)
;
filter
.
set_capacity_kbps
(
10
)
;
filter
.
set_max_delay_ms
(
0
)
;
TestChoke
(
&
filter
100
100
1
)
;
TestChoke
(
&
filter
9900
0
99
)
;
}
TEST_F
(
BweTestFramework_ChokeFilterTest
ShortTrace
)
{
TraceBasedDeliveryFilter
filter
(
NULL
0
)
;
ASSERT_TRUE
(
filter
.
Init
(
test
:
:
ResourcePath
(
"
synthetic
-
trace
"
"
rx
"
)
)
)
;
TestChoke
(
&
filter
100
100
6
)
;
}
TEST_F
(
BweTestFramework_ChokeFilterTest
ShortTraceTwoWraps
)
{
TraceBasedDeliveryFilter
filter
(
NULL
0
)
;
ASSERT_TRUE
(
filter
.
Init
(
test
:
:
ResourcePath
(
"
synthetic
-
trace
"
"
rx
"
)
)
)
;
TestChoke
(
&
filter
280
100
19
)
;
}
TEST_F
(
BweTestFramework_ChokeFilterTest
ShortTraceMaxDelay
)
{
TraceBasedDeliveryFilter
filter
(
NULL
0
)
;
filter
.
set_max_delay_ms
(
25
)
;
ASSERT_TRUE
(
filter
.
Init
(
test
:
:
ResourcePath
(
"
synthetic
-
trace
"
"
rx
"
)
)
)
;
TestChoke
(
&
filter
110
20
9
)
;
CheckMaxDelay
(
25
)
;
TestChoke
(
&
filter
25
1
1
)
;
}
void
TestVideoSender
(
VideoSender
*
sender
int64_t
run_for_ms
uint32_t
expected_packets
uint32_t
expected_payload_size
size_t
expected_total_payload_size
)
{
assert
(
sender
)
;
Packets
packets
;
sender
-
>
RunFor
(
run_for_ms
&
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
EXPECT_EQ
(
expected_packets
packets
.
size
(
)
)
;
int64_t
send_time_us
=
-
1
;
size_t
total_payload_size
=
0
;
uint32_t
absolute_send_time
=
0
;
uint32_t
absolute_send_time_wraps
=
0
;
uint32_t
rtp_timestamp
=
0
;
uint32_t
rtp_timestamp_wraps
=
0
;
for
(
const
auto
*
packet
:
packets
)
{
const
MediaPacket
*
media_packet
=
static_cast
<
const
MediaPacket
*
>
(
packet
)
;
EXPECT_LE
(
send_time_us
media_packet
-
>
send_time_us
(
)
)
;
send_time_us
=
media_packet
-
>
send_time_us
(
)
;
if
(
sender
-
>
source
(
)
-
>
max_payload_size_bytes
(
)
!
=
media_packet
-
>
payload_size
(
)
)
{
EXPECT_EQ
(
expected_payload_size
media_packet
-
>
payload_size
(
)
)
;
}
total_payload_size
+
=
media_packet
-
>
payload_size
(
)
;
if
(
absolute_send_time
>
media_packet
-
>
header
(
)
.
extension
.
absoluteSendTime
)
{
absolute_send_time_wraps
+
+
;
}
absolute_send_time
=
media_packet
-
>
header
(
)
.
extension
.
absoluteSendTime
;
if
(
rtp_timestamp
>
media_packet
-
>
header
(
)
.
timestamp
)
{
rtp_timestamp_wraps
+
+
;
}
rtp_timestamp
=
media_packet
-
>
header
(
)
.
timestamp
;
}
EXPECT_EQ
(
expected_total_payload_size
total_payload_size
)
;
EXPECT_GE
(
1u
absolute_send_time_wraps
)
;
EXPECT_GE
(
1u
rtp_timestamp_wraps
)
;
for
(
auto
*
packet
:
packets
)
delete
packet
;
}
TEST
(
BweTestFramework_VideoSenderTest
Fps1Kbps80_1s
)
{
VideoSource
source
(
0
1
.
0f
80
0x1234
0
)
;
VideoSender
sender
(
NULL
&
source
kNullEstimator
)
;
EXPECT_EQ
(
80000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
1
9
400
10000
)
;
TestVideoSender
(
&
sender
997
0
0
0
)
;
TestVideoSender
(
&
sender
3
9
400
10000
)
;
TestVideoSender
(
&
sender
997
0
0
0
)
;
TestVideoSender
(
&
sender
3
9
400
10000
)
;
TestVideoSender
(
&
sender
997
0
0
0
)
;
}
TEST
(
BweTestFramework_VideoSenderTest
Fps1Kbps80_1s_Offset
)
{
VideoSource
source
(
0
1
.
0f
80
0x1234
500
)
;
VideoSender
sender
(
NULL
&
source
kNullEstimator
)
;
EXPECT_EQ
(
80000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
498
0
0
0
)
;
TestVideoSender
(
&
sender
3
9
400
10000
)
;
TestVideoSender
(
&
sender
997
0
0
0
)
;
TestVideoSender
(
&
sender
3
9
400
10000
)
;
TestVideoSender
(
&
sender
997
0
0
0
)
;
TestVideoSender
(
&
sender
3
9
400
10000
)
;
TestVideoSender
(
&
sender
997
0
0
0
)
;
}
TEST
(
BweTestFramework_VideoSenderTest
Fps50Kpbs80_11s
)
{
VideoSource
source
(
0
50
.
0f
80
0x1234
0
)
;
VideoSender
sender
(
NULL
&
source
kNullEstimator
)
;
EXPECT_EQ
(
80000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
9981
500
200
100000
)
;
TestVideoSender
(
&
sender
17
0
0
0
)
;
TestVideoSender
(
&
sender
3
1
200
200
)
;
TestVideoSender
(
&
sender
981
49
200
9800
)
;
TestVideoSender
(
&
sender
17
0
0
0
)
;
}
TEST
(
BweTestFramework_VideoSenderTest
Fps20Kpbs120_1s
)
{
VideoSource
source
(
0
20
.
0f
120
0x1234
0
)
;
VideoSender
sender
(
NULL
&
source
kNullEstimator
)
;
EXPECT_EQ
(
120000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
451
10
750
7500
)
;
TestVideoSender
(
&
sender
47
0
0
0
)
;
TestVideoSender
(
&
sender
3
1
750
750
)
;
TestVideoSender
(
&
sender
450
9
750
6750
)
;
TestVideoSender
(
&
sender
47
0
0
0
)
;
}
TEST
(
BweTestFramework_VideoSenderTest
Fps25Kbps820_20s
)
{
VideoSource
source
(
0
25
.
0f
820
0x1234
0
)
;
VideoSender
sender
(
NULL
&
source
kNullEstimator
)
;
EXPECT_EQ
(
820000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
9961
1000
500
1025000
)
;
TestVideoSender
(
&
sender
37
0
0
0
)
;
TestVideoSender
(
&
sender
9963
1000
500
1025000
)
;
TestVideoSender
(
&
sender
37
0
0
0
)
;
TestVideoSender
(
&
sender
3
4
500
4100
)
;
TestVideoSender
(
&
sender
37
0
0
0
)
;
}
TEST
(
BweTestFramework_VideoSenderTest
TestAppendInOrder
)
{
VideoSource
source1
(
0
1
.
0f
80
0x1234
250
)
;
VideoSender
sender1
(
NULL
&
source1
kNullEstimator
)
;
EXPECT_EQ
(
80000u
source1
.
bits_per_second
(
)
)
;
Packets
packets
;
sender1
.
RunFor
(
999
&
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
EXPECT_EQ
(
9u
packets
.
size
(
)
)
;
sender1
.
RunFor
(
1000
&
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
ASSERT_TRUE
(
IsSequenceNumberSorted
(
packets
)
)
;
EXPECT_EQ
(
18u
packets
.
size
(
)
)
;
VideoSource
source2
(
0
2
.
0f
160
0x2234
150
)
;
VideoSender
sender2
(
NULL
&
source2
kNullEstimator
)
;
EXPECT_EQ
(
160000u
source2
.
bits_per_second
(
)
)
;
sender2
.
RunFor
(
999
&
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
EXPECT_EQ
(
36u
packets
.
size
(
)
)
;
sender2
.
RunFor
(
1000
&
packets
)
;
ASSERT_TRUE
(
IsTimeSorted
(
packets
)
)
;
EXPECT_EQ
(
54u
packets
.
size
(
)
)
;
for
(
auto
*
packet
:
packets
)
delete
packet
;
}
TEST
(
BweTestFramework_VideoSenderTest
FeedbackIneffective
)
{
VideoSource
source
(
0
25
.
0f
820
0x1234
0
)
;
VideoSender
sender
(
NULL
&
source
kNullEstimator
)
;
EXPECT_EQ
(
820000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
9961
1000
500
1025000
)
;
RembFeedback
*
feedback
=
new
RembFeedback
(
0
0
0
512000
RTCPReportBlock
(
)
)
;
Packets
packets
;
packets
.
push_back
(
feedback
)
;
sender
.
RunFor
(
0
&
packets
)
;
EXPECT_EQ
(
820000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
10000
1000
500
1025000
)
;
}
TEST
(
BweTestFramework_AdaptiveVideoSenderTest
FeedbackChangesBitrate
)
{
AdaptiveVideoSource
source
(
0
25
.
0f
820
0x1234
0
)
;
VideoSender
sender
(
NULL
&
source
kRembEstimator
)
;
EXPECT_EQ
(
820000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
9961
1000
500
1025000
)
;
RembFeedback
*
feedback
=
new
RembFeedback
(
0
0
0
512000
RTCPReportBlock
(
)
)
;
Packets
packets
;
packets
.
push_back
(
feedback
)
;
sender
.
RunFor
(
0
&
packets
)
;
EXPECT_EQ
(
512000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
10000
750
160
640000
)
;
feedback
=
new
RembFeedback
(
0
0
0
820000
RTCPReportBlock
(
)
)
;
packets
.
push_back
(
feedback
)
;
sender
.
RunFor
(
10000
&
packets
)
;
EXPECT_EQ
(
820000u
source
.
bits_per_second
(
)
)
;
for
(
auto
*
packet
:
packets
)
delete
packet
;
}
TEST
(
BweTestFramework_AdaptiveVideoSenderTest
Paced_FeedbackChangesBitrate
)
{
AdaptiveVideoSource
source
(
0
25
.
0f
820
0x1234
0
)
;
PacedVideoSender
sender
(
NULL
&
source
kRembEstimator
)
;
EXPECT_EQ
(
820000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
9998
1000
500
1025000
)
;
RembFeedback
*
feedback
=
new
RembFeedback
(
0
1
0
512000
RTCPReportBlock
(
)
)
;
Packets
packets
;
packets
.
push_back
(
feedback
)
;
sender
.
RunFor
(
10000
&
packets
)
;
ASSERT_EQ
(
512000u
source
.
bits_per_second
(
)
)
;
TestVideoSender
(
&
sender
10000
750
160
640000
)
;
feedback
=
new
RembFeedback
(
0
0
0
820000
RTCPReportBlock
(
)
)
;
packets
.
push_back
(
feedback
)
;
sender
.
RunFor
(
10000
&
packets
)
;
EXPECT_EQ
(
820000u
source
.
bits_per_second
(
)
)
;
for
(
auto
*
packet
:
packets
)
delete
packet
;
}
}
}
}
