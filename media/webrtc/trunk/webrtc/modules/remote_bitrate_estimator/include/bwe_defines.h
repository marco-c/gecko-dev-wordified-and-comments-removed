#
ifndef
MODULES_REMOTE_BITRATE_ESTIMATOR_INCLUDE_BWE_DEFINES_H_
#
define
MODULES_REMOTE_BITRATE_ESTIMATOR_INCLUDE_BWE_DEFINES_H_
#
include
"
api
/
optional
.
h
"
#
include
"
typedefs
.
h
"
#
define
BWE_MAX
(
a
b
)
(
(
a
)
>
(
b
)
?
(
a
)
:
(
b
)
)
#
define
BWE_MIN
(
a
b
)
(
(
a
)
<
(
b
)
?
(
a
)
:
(
b
)
)
namespace
webrtc
{
namespace
congestion_controller
{
int
GetMinBitrateBps
(
)
;
}
static
const
int64_t
kBitrateWindowMs
=
1000
;
extern
const
char
kBweTypeHistogram
[
]
;
enum
BweNames
{
kReceiverNoExtension
=
0
kReceiverTOffset
=
1
kReceiverAbsSendTime
=
2
kSendSideTransportSeqNum
=
3
kBweNamesMax
=
4
}
;
enum
class
BandwidthUsage
{
kBwNormal
=
0
kBwUnderusing
=
1
kBwOverusing
=
2
kLast
}
;
enum
RateControlState
{
kRcHold
kRcIncrease
kRcDecrease
}
;
enum
RateControlRegion
{
kRcNearMax
kRcAboveMax
kRcMaxUnknown
}
;
struct
RateControlInput
{
RateControlInput
(
BandwidthUsage
bw_state
const
rtc
:
:
Optional
<
uint32_t
>
&
incoming_bitrate
double
noise_var
)
;
~
RateControlInput
(
)
;
BandwidthUsage
bw_state
;
rtc
:
:
Optional
<
uint32_t
>
incoming_bitrate
;
double
noise_var
;
}
;
}
#
endif
