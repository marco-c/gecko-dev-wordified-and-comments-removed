#
ifndef
WEBRTC_MODULES_REMOTE_BITRATE_ESTIMATOR_INCLUDE_REMOTE_BITRATE_ESTIMATOR_H_
#
define
WEBRTC_MODULES_REMOTE_BITRATE_ESTIMATOR_INCLUDE_REMOTE_BITRATE_ESTIMATOR_H_
#
include
<
map
>
#
include
<
vector
>
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
Clock
;
class
RemoteBitrateObserver
{
public
:
virtual
void
OnReceiveBitrateChanged
(
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
uint32_t
bitrate
)
=
0
;
virtual
void
OnProbeBitrate
(
uint32_t
bitrate
)
{
}
virtual
~
RemoteBitrateObserver
(
)
{
}
}
;
struct
ReceiveBandwidthEstimatorStats
{
}
;
class
RemoteBitrateEstimator
:
public
CallStatsObserver
public
Module
{
public
:
virtual
~
RemoteBitrateEstimator
(
)
{
}
virtual
void
IncomingPacketFeedbackVector
(
const
std
:
:
vector
<
PacketInfo
>
&
packet_feedback_vector
)
{
assert
(
false
)
;
}
virtual
void
IncomingPacket
(
int64_t
arrival_time_ms
size_t
payload_size
const
RTPHeader
&
header
)
=
0
;
virtual
void
RemoveStream
(
uint32_t
ssrc
)
=
0
;
virtual
bool
LatestEstimate
(
std
:
:
vector
<
uint32_t
>
*
ssrcs
uint32_t
*
bitrate_bps
)
const
=
0
;
virtual
bool
GetStats
(
ReceiveBandwidthEstimatorStats
*
output
)
const
{
return
false
;
}
virtual
void
SetMinBitrate
(
int
min_bitrate_bps
)
=
0
;
protected
:
static
const
int64_t
kProcessIntervalMs
=
500
;
static
const
int64_t
kStreamTimeOutMs
=
2000
;
}
;
}
#
endif
