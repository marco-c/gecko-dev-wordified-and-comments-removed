#
ifndef
WEBRTC_MODULES_REMOTE_BITRATE_ESTIMATOR_AIMD_RATE_CONTROL_H_
#
define
WEBRTC_MODULES_REMOTE_BITRATE_ESTIMATOR_AIMD_RATE_CONTROL_H_
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
include
/
bwe_defines
.
h
"
#
include
"
webrtc
/
modules
/
remote_bitrate_estimator
/
remote_rate_control
.
h
"
namespace
webrtc
{
class
AimdRateControl
:
public
RemoteRateControl
{
public
:
explicit
AimdRateControl
(
uint32_t
min_bitrate_bps
)
;
virtual
~
AimdRateControl
(
)
{
}
bool
ValidEstimate
(
)
const
override
;
RateControlType
GetControlType
(
)
const
override
;
uint32_t
GetMinBitrate
(
)
const
override
;
int64_t
GetFeedbackInterval
(
)
const
override
;
bool
TimeToReduceFurther
(
int64_t
time_now
uint32_t
incoming_bitrate_bps
)
const
override
;
uint32_t
LatestEstimate
(
)
const
override
;
uint32_t
UpdateBandwidthEstimate
(
int64_t
now_ms
)
override
;
void
SetRtt
(
int64_t
rtt
)
override
;
RateControlRegion
Update
(
const
RateControlInput
*
input
int64_t
now_ms
)
override
;
void
SetEstimate
(
int
bitrate_bps
int64_t
now_ms
)
override
;
private
:
uint32_t
ChangeBitrate
(
uint32_t
current_bit_rate
uint32_t
incoming_bit_rate
int64_t
now_ms
)
;
uint32_t
MultiplicativeRateIncrease
(
int64_t
now_ms
int64_t
last_ms
uint32_t
current_bitrate_bps
)
const
;
uint32_t
AdditiveRateIncrease
(
int64_t
now_ms
int64_t
last_ms
int64_t
response_time_ms
)
const
;
void
UpdateChangePeriod
(
int64_t
now_ms
)
;
void
UpdateMaxBitRateEstimate
(
float
incoming_bit_rate_kbps
)
;
void
ChangeState
(
const
RateControlInput
&
input
int64_t
now_ms
)
;
void
ChangeState
(
RateControlState
new_state
)
;
void
ChangeRegion
(
RateControlRegion
region
)
;
uint32_t
min_configured_bitrate_bps_
;
uint32_t
max_configured_bitrate_bps_
;
uint32_t
current_bitrate_bps_
;
uint32_t
max_hold_rate_bps_
;
float
avg_max_bitrate_kbps_
;
float
var_max_bitrate_kbps_
;
RateControlState
rate_control_state_
;
RateControlState
came_from_state_
;
RateControlRegion
rate_control_region_
;
int64_t
time_last_bitrate_change_
;
RateControlInput
current_input_
;
bool
updated_
;
int64_t
time_first_incoming_estimate_
;
bool
bitrate_is_initialized_
;
float
beta_
;
int64_t
rtt_
;
int64_t
time_of_last_log_
;
DISALLOW_IMPLICIT_CONSTRUCTORS
(
AimdRateControl
)
;
}
;
}
#
endif
