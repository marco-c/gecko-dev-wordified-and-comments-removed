#
ifndef
MODULES_RTP_RTCP_TEST_TESTAPI_TEST_API_H_
#
define
MODULES_RTP_RTCP_TEST_TESTAPI_TEST_API_H_
#
include
"
api
/
call
/
transport
.
h
"
#
include
"
common_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
receive_statistics
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_header_parser
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_payload_registry
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_receiver
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
class
LoopBackTransport
:
public
Transport
{
public
:
LoopBackTransport
(
)
:
count_
(
0
)
packet_loss_
(
0
)
rtp_payload_registry_
(
NULL
)
rtp_receiver_
(
NULL
)
rtp_rtcp_module_
(
NULL
)
{
}
void
SetSendModule
(
RtpRtcp
*
rtp_rtcp_module
RTPPayloadRegistry
*
payload_registry
RtpReceiver
*
receiver
ReceiveStatistics
*
receive_statistics
)
;
void
DropEveryNthPacket
(
int
n
)
;
bool
SendRtp
(
const
uint8_t
*
data
size_t
len
const
PacketOptions
&
options
)
override
;
bool
SendRtcp
(
const
uint8_t
*
data
size_t
len
)
override
;
private
:
int
count_
;
int
packet_loss_
;
ReceiveStatistics
*
receive_statistics_
;
RTPPayloadRegistry
*
rtp_payload_registry_
;
RtpReceiver
*
rtp_receiver_
;
RtpRtcp
*
rtp_rtcp_module_
;
}
;
class
TestRtpReceiver
:
public
RtpData
{
public
:
int32_t
OnReceivedPayloadData
(
const
uint8_t
*
payload_data
size_t
payload_size
const
webrtc
:
:
WebRtcRTPHeader
*
rtp_header
)
override
;
const
uint8_t
*
payload_data
(
)
const
{
return
payload_data_
;
}
size_t
payload_size
(
)
const
{
return
payload_size_
;
}
webrtc
:
:
WebRtcRTPHeader
rtp_header
(
)
const
{
return
rtp_header_
;
}
private
:
uint8_t
payload_data_
[
1500
]
;
size_t
payload_size_
;
webrtc
:
:
WebRtcRTPHeader
rtp_header_
;
}
;
}
#
endif
