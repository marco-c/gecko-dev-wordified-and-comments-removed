#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
h264_sps_parser
.
h
"
#
include
"
testing
/
gtest
/
include
/
gtest
/
gtest
.
h
"
#
include
"
webrtc
/
base
/
arraysize
.
h
"
#
include
"
webrtc
/
base
/
bitbuffer
.
h
"
namespace
webrtc
{
static
const
size_t
kSpsBufferMaxSize
=
256
;
void
GenerateFakeSps
(
uint16_t
width
uint16_t
height
uint8_t
buffer
[
]
)
{
uint8_t
rbsp
[
kSpsBufferMaxSize
]
=
{
0
}
;
rtc
:
:
BitBufferWriter
writer
(
rbsp
kSpsBufferMaxSize
)
;
writer
.
WriteUInt8
(
0
)
;
writer
.
WriteUInt8
(
0
)
;
writer
.
WriteUInt8
(
0x3u
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteBits
(
0
1
)
;
uint16_t
width_in_mbs_minus1
=
(
width
+
15
)
/
16
-
1
;
uint16_t
height_in_map_units_minus1
=
(
(
height
+
15
)
/
16
-
1
)
/
2
;
writer
.
WriteExponentialGolomb
(
width_in_mbs_minus1
)
;
writer
.
WriteExponentialGolomb
(
height_in_map_units_minus1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
0
1
)
;
writer
.
WriteBits
(
1
1
)
;
writer
.
WriteExponentialGolomb
(
(
(
16
-
(
width
%
16
)
)
%
16
)
/
2
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
writer
.
WriteExponentialGolomb
(
(
(
16
-
(
height
%
16
)
)
%
16
)
/
2
)
;
writer
.
WriteExponentialGolomb
(
0
)
;
size_t
byte_count
bit_offset
;
writer
.
GetCurrentOffset
(
&
byte_count
&
bit_offset
)
;
if
(
bit_offset
>
0
)
{
byte_count
+
+
;
}
for
(
size_t
i
=
0
;
i
<
byte_count
;
)
{
if
(
i
<
byte_count
-
3
&
&
rbsp
[
i
]
=
=
0
&
&
rbsp
[
i
+
1
]
=
=
0
)
{
*
buffer
+
+
=
rbsp
[
i
]
;
*
buffer
+
+
=
rbsp
[
i
+
1
]
;
*
buffer
+
+
=
0x3u
;
i
+
=
2
;
}
else
{
*
buffer
+
+
=
rbsp
[
i
]
;
+
+
i
;
}
}
}
TEST
(
H264SpsParserTest
TestSampleSPSHdLandscape
)
{
const
uint8_t
buffer
[
]
=
{
0x7A
0x00
0x1F
0xBC
0xD9
0x40
0x50
0x05
0xBA
0x10
0x00
0x00
0x03
0x00
0xC0
0x00
0x00
0x2A
0xE0
0xF1
0x83
0x19
0x60
}
;
H264SpsParser
parser
=
H264SpsParser
(
buffer
arraysize
(
buffer
)
)
;
EXPECT_TRUE
(
parser
.
Parse
(
)
)
;
EXPECT_EQ
(
1280u
parser
.
width
(
)
)
;
EXPECT_EQ
(
720u
parser
.
height
(
)
)
;
}
TEST
(
H264SpsParserTest
TestSampleSPSVgaLandscape
)
{
const
uint8_t
buffer
[
]
=
{
0x7A
0x00
0x1E
0xBC
0xD9
0x40
0xA0
0x2F
0xF8
0x98
0x40
0x00
0x00
0x03
0x01
0x80
0x00
0x00
0x56
0x83
0xC5
0x8B
0x65
0x80
}
;
H264SpsParser
parser
=
H264SpsParser
(
buffer
arraysize
(
buffer
)
)
;
EXPECT_TRUE
(
parser
.
Parse
(
)
)
;
EXPECT_EQ
(
640u
parser
.
width
(
)
)
;
EXPECT_EQ
(
360u
parser
.
height
(
)
)
;
}
TEST
(
H264SpsParserTest
TestSampleSPSWeirdResolution
)
{
const
uint8_t
buffer
[
]
=
{
0x7A
0x00
0x0D
0xBC
0xD9
0x43
0x43
0x3E
0x5E
0x10
0x00
0x00
0x03
0x00
0x60
0x00
0x00
0x15
0xA0
0xF1
0x42
0x99
0x60
}
;
H264SpsParser
parser
=
H264SpsParser
(
buffer
arraysize
(
buffer
)
)
;
EXPECT_TRUE
(
parser
.
Parse
(
)
)
;
EXPECT_EQ
(
200u
parser
.
width
(
)
)
;
EXPECT_EQ
(
400u
parser
.
height
(
)
)
;
}
TEST
(
H264SpsParserTest
TestSyntheticSPSQvgaLandscape
)
{
uint8_t
buffer
[
kSpsBufferMaxSize
]
=
{
0
}
;
GenerateFakeSps
(
320u
180u
buffer
)
;
H264SpsParser
parser
=
H264SpsParser
(
buffer
arraysize
(
buffer
)
)
;
EXPECT_TRUE
(
parser
.
Parse
(
)
)
;
EXPECT_EQ
(
320u
parser
.
width
(
)
)
;
EXPECT_EQ
(
180u
parser
.
height
(
)
)
;
}
TEST
(
H264SpsParserTest
TestSyntheticSPSWeirdResolution
)
{
uint8_t
buffer
[
kSpsBufferMaxSize
]
=
{
0
}
;
GenerateFakeSps
(
156u
122u
buffer
)
;
H264SpsParser
parser
=
H264SpsParser
(
buffer
arraysize
(
buffer
)
)
;
EXPECT_TRUE
(
parser
.
Parse
(
)
)
;
EXPECT_EQ
(
156u
parser
.
width
(
)
)
;
EXPECT_EQ
(
122u
parser
.
height
(
)
)
;
}
}
