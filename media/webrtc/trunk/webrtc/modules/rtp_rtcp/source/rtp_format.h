#
ifndef
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_H_
#
define
MODULES_RTP_RTCP_SOURCE_RTP_FORMAT_H_
#
include
<
string
>
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
webrtc
{
class
RtpPacketToSend
;
class
RtpPacketizer
{
public
:
static
RtpPacketizer
*
Create
(
RtpVideoCodecTypes
type
size_t
max_payload_len
size_t
last_packet_reduction_len
const
RTPVideoTypeHeader
*
rtp_type_header
FrameType
frame_type
)
;
virtual
~
RtpPacketizer
(
)
{
}
virtual
size_t
SetPayloadData
(
const
uint8_t
*
payload_data
size_t
payload_size
const
RTPFragmentationHeader
*
fragmentation
)
=
0
;
virtual
bool
NextPacket
(
RtpPacketToSend
*
packet
)
=
0
;
virtual
std
:
:
string
ToString
(
)
=
0
;
}
;
class
RtpDepacketizer
{
public
:
struct
ParsedPayload
{
const
uint8_t
*
payload
;
size_t
payload_length
;
FrameType
frame_type
;
RTPTypeHeader
type
;
}
;
static
RtpDepacketizer
*
Create
(
RtpVideoCodecTypes
type
)
;
virtual
~
RtpDepacketizer
(
)
{
}
virtual
bool
Parse
(
ParsedPayload
*
parsed_payload
const
uint8_t
*
payload_data
size_t
payload_data_length
)
=
0
;
}
;
}
#
endif
