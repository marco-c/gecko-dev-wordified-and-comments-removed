#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_utility
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_header_extension_map
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtp_header_extensions
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
namespace
webrtc
{
namespace
{
using
:
:
testing
:
:
ElementsAreArray
;
using
:
:
testing
:
:
make_tuple
;
const
int8_t
kPayloadType
=
100
;
const
uint32_t
kSsrc
=
0x12345678
;
const
uint16_t
kSeqNum
=
88
;
const
uint32_t
kTimestamp
=
0x65431278
;
}
TEST
(
RtpHeaderParser
ParseMinimum
)
{
const
uint8_t
kPacket
[
]
=
{
0x80
kPayloadType
0x00
kSeqNum
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
}
;
RtpUtility
:
:
RtpHeaderParser
parser
(
kPacket
sizeof
(
kPacket
)
)
;
RTPHeader
header
;
EXPECT_TRUE
(
parser
.
Parse
(
&
header
nullptr
)
)
;
EXPECT_EQ
(
kPayloadType
header
.
payloadType
)
;
EXPECT_EQ
(
kSeqNum
header
.
sequenceNumber
)
;
EXPECT_EQ
(
kTimestamp
header
.
timestamp
)
;
EXPECT_EQ
(
kSsrc
header
.
ssrc
)
;
EXPECT_EQ
(
0u
header
.
paddingLength
)
;
EXPECT_EQ
(
sizeof
(
kPacket
)
header
.
headerLength
)
;
}
TEST
(
RtpHeaderParser
ParseWithExtension
)
{
const
uint8_t
kPacket
[
]
=
{
0x90
kPayloadType
0x00
kSeqNum
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x01
0x12
0x01
0x56
0xce
}
;
RtpHeaderExtensionMap
extensions
;
extensions
.
Register
<
TransmissionOffset
>
(
1
)
;
RtpUtility
:
:
RtpHeaderParser
parser
(
kPacket
sizeof
(
kPacket
)
)
;
RTPHeader
header
;
EXPECT_TRUE
(
parser
.
Parse
(
&
header
&
extensions
)
)
;
EXPECT_EQ
(
kPayloadType
header
.
payloadType
)
;
EXPECT_EQ
(
kSeqNum
header
.
sequenceNumber
)
;
EXPECT_EQ
(
kTimestamp
header
.
timestamp
)
;
EXPECT_EQ
(
kSsrc
header
.
ssrc
)
;
ASSERT_TRUE
(
header
.
extension
.
hasTransmissionTimeOffset
)
;
EXPECT_EQ
(
0x156ce
header
.
extension
.
transmissionTimeOffset
)
;
}
TEST
(
RtpHeaderParser
ParseWithInvalidSizedExtension
)
{
const
size_t
kPayloadSize
=
7
;
const
uint8_t
kPacket
[
]
=
{
0x90
kPayloadType
0x00
kSeqNum
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x02
0x16
'
e
'
'
x
'
'
t
'
'
d
'
'
a
'
'
t
'
'
a
'
'
p
'
'
a
'
'
y
'
'
l
'
'
o
'
'
a
'
'
d
'
}
;
RtpHeaderExtensionMap
extensions
;
extensions
.
Register
<
TransmissionOffset
>
(
1
)
;
RtpUtility
:
:
RtpHeaderParser
parser
(
kPacket
sizeof
(
kPacket
)
)
;
RTPHeader
header
;
EXPECT_TRUE
(
parser
.
Parse
(
&
header
&
extensions
)
)
;
EXPECT_FALSE
(
header
.
extension
.
hasTransmissionTimeOffset
)
;
EXPECT_THAT
(
sizeof
(
kPacket
)
-
kPayloadSize
header
.
headerLength
)
;
}
TEST
(
RtpHeaderParser
ParseWithExtensionPadding
)
{
const
uint8_t
kPacket
[
]
=
{
0x90
kPayloadType
0x00
kSeqNum
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x02
0x02
0x12
0x1a
0xda
0x03
0x0f
0x00
0x03
}
;
RtpHeaderExtensionMap
extensions
;
extensions
.
Register
<
TransmissionOffset
>
(
1
)
;
RtpUtility
:
:
RtpHeaderParser
parser
(
kPacket
sizeof
(
kPacket
)
)
;
RTPHeader
header
;
EXPECT_TRUE
(
parser
.
Parse
(
&
header
&
extensions
)
)
;
EXPECT_TRUE
(
header
.
extension
.
hasTransmissionTimeOffset
)
;
EXPECT_EQ
(
0x1ada03
header
.
extension
.
transmissionTimeOffset
)
;
EXPECT_EQ
(
sizeof
(
kPacket
)
header
.
headerLength
)
;
}
TEST
(
RtpHeaderParser
ParseWithOverSizedExtension
)
{
const
uint8_t
kPacket
[
]
=
{
0x90
kPayloadType
0x00
kSeqNum
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x01
0x00
0x12
0xda
0x1a
}
;
RtpHeaderExtensionMap
extensions
;
extensions
.
Register
<
TransmissionOffset
>
(
1
)
;
RtpUtility
:
:
RtpHeaderParser
parser
(
kPacket
sizeof
(
kPacket
)
)
;
RTPHeader
header
;
EXPECT_TRUE
(
parser
.
Parse
(
&
header
&
extensions
)
)
;
EXPECT_FALSE
(
header
.
extension
.
hasTransmissionTimeOffset
)
;
EXPECT_EQ
(
sizeof
(
kPacket
)
header
.
headerLength
)
;
}
TEST
(
RtpHeaderParser
ParseAll8Extensions
)
{
const
uint8_t
kAudioLevel
=
0x5a
;
const
uint8_t
kPacket
[
]
=
{
0x90
kPayloadType
0x00
kSeqNum
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x08
0x40
0x80
|
kAudioLevel
0x22
0x01
0x56
0xce
0x62
0x12
0x34
0x56
0x72
0x7f
0x01
0x10
0x81
0xce
0xab
0xa0
0x03
0xb2
0x12
0x48
0x76
0xc2
'
r
'
'
t
'
'
x
'
0xd5
'
s
'
'
t
'
'
r
'
'
e
'
'
a
'
'
m
'
0x00
0x00
}
;
ASSERT_EQ
(
sizeof
(
kPacket
)
%
4
0u
)
;
RtpHeaderExtensionMap
extensions
;
extensions
.
Register
<
TransmissionOffset
>
(
2
)
;
extensions
.
Register
<
AudioLevel
>
(
4
)
;
extensions
.
Register
<
AbsoluteSendTime
>
(
6
)
;
extensions
.
Register
<
CsrcAudioLevel
>
(
7
)
;
extensions
.
Register
<
TransportSequenceNumber
>
(
8
)
;
extensions
.
Register
<
VideoOrientation
>
(
0xa
)
;
extensions
.
Register
<
PlayoutDelayLimits
>
(
0xb
)
;
extensions
.
Register
<
RtpStreamId
>
(
0xc
)
;
extensions
.
Register
<
RepairedRtpStreamId
>
(
0xd
)
;
RtpUtility
:
:
RtpHeaderParser
parser
(
kPacket
sizeof
(
kPacket
)
)
;
RTPHeader
header
;
EXPECT_TRUE
(
parser
.
Parse
(
&
header
&
extensions
)
)
;
EXPECT_TRUE
(
header
.
extension
.
hasTransmissionTimeOffset
)
;
EXPECT_EQ
(
0x156ce
header
.
extension
.
transmissionTimeOffset
)
;
EXPECT_TRUE
(
header
.
extension
.
hasAudioLevel
)
;
EXPECT_TRUE
(
header
.
extension
.
voiceActivity
)
;
EXPECT_EQ
(
kAudioLevel
header
.
extension
.
audioLevel
)
;
EXPECT_TRUE
(
header
.
extension
.
hasAbsoluteSendTime
)
;
EXPECT_EQ
(
0x123456U
header
.
extension
.
absoluteSendTime
)
;
EXPECT_TRUE
(
header
.
extension
.
hasTransportSequenceNumber
)
;
EXPECT_EQ
(
0xceab
header
.
extension
.
transportSequenceNumber
)
;
EXPECT_TRUE
(
header
.
extension
.
hasVideoRotation
)
;
EXPECT_EQ
(
kVideoRotation_270
header
.
extension
.
videoRotation
)
;
EXPECT_EQ
(
0x124
*
PlayoutDelayLimits
:
:
kGranularityMs
header
.
extension
.
playout_delay
.
min_ms
)
;
EXPECT_EQ
(
0x876
*
PlayoutDelayLimits
:
:
kGranularityMs
header
.
extension
.
playout_delay
.
max_ms
)
;
EXPECT_EQ
(
header
.
extension
.
stream_id
StreamId
(
"
rtx
"
)
)
;
EXPECT_EQ
(
header
.
extension
.
repaired_stream_id
StreamId
(
"
stream
"
)
)
;
EXPECT_EQ
(
header
.
extension
.
csrcAudioLevels
.
numAudioLevels
3
)
;
EXPECT_EQ
(
header
.
extension
.
csrcAudioLevels
.
arrOfAudioLevels
[
0
]
0x7f
)
;
EXPECT_EQ
(
header
.
extension
.
csrcAudioLevels
.
arrOfAudioLevels
[
1
]
0x01
)
;
EXPECT_EQ
(
header
.
extension
.
csrcAudioLevels
.
arrOfAudioLevels
[
2
]
0x10
)
;
}
TEST
(
RtpHeaderParser
ParseMalformedRsidExtensions
)
{
const
uint8_t
kPacket
[
]
=
{
0x90
kPayloadType
0x00
kSeqNum
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x03
0xc2
'
\
0
'
'
t
'
'
x
'
0xd5
'
s
'
'
t
'
'
r
'
'
\
0
'
'
a
'
'
m
'
0x00
}
;
ASSERT_EQ
(
sizeof
(
kPacket
)
%
4
0u
)
;
RtpHeaderExtensionMap
extensions
;
extensions
.
Register
<
RtpStreamId
>
(
0xc
)
;
extensions
.
Register
<
RepairedRtpStreamId
>
(
0xd
)
;
RtpUtility
:
:
RtpHeaderParser
parser
(
kPacket
sizeof
(
kPacket
)
)
;
RTPHeader
header
;
EXPECT_TRUE
(
parser
.
Parse
(
&
header
&
extensions
)
)
;
EXPECT_TRUE
(
header
.
extension
.
stream_id
.
empty
(
)
)
;
EXPECT_EQ
(
header
.
extension
.
repaired_stream_id
StreamId
(
"
str
"
)
)
;
}
TEST
(
RtpHeaderParser
ParseWithCsrcsExtensionAndPadding
)
{
const
uint8_t
kPacketPaddingSize
=
8
;
const
uint32_t
kCsrcs
[
]
=
{
0x34567890
0x32435465
}
;
const
size_t
kPayloadSize
=
7
;
const
uint8_t
kPacket
[
]
=
{
0xb2
kPayloadType
0x00
kSeqNum
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0x34
0x56
0x78
0x90
0x32
0x43
0x54
0x65
0xbe
0xde
0x00
0x01
0x12
0x00
0x56
0xce
'
p
'
'
a
'
'
y
'
'
l
'
'
o
'
'
a
'
'
d
'
'
p
'
'
a
'
'
d
'
'
d
'
'
i
'
'
n
'
'
g
'
kPacketPaddingSize
}
;
RtpHeaderExtensionMap
extensions
;
extensions
.
Register
<
TransmissionOffset
>
(
1
)
;
RtpUtility
:
:
RtpHeaderParser
parser
(
kPacket
sizeof
(
kPacket
)
)
;
RTPHeader
header
;
EXPECT_TRUE
(
parser
.
Parse
(
&
header
&
extensions
)
)
;
EXPECT_EQ
(
kPayloadType
header
.
payloadType
)
;
EXPECT_EQ
(
kSeqNum
header
.
sequenceNumber
)
;
EXPECT_EQ
(
kTimestamp
header
.
timestamp
)
;
EXPECT_EQ
(
kSsrc
header
.
ssrc
)
;
EXPECT_THAT
(
make_tuple
(
header
.
arrOfCSRCs
header
.
numCSRCs
)
ElementsAreArray
(
kCsrcs
)
)
;
EXPECT_EQ
(
kPacketPaddingSize
header
.
paddingLength
)
;
EXPECT_THAT
(
sizeof
(
kPacket
)
-
kPayloadSize
-
kPacketPaddingSize
header
.
headerLength
)
;
EXPECT_TRUE
(
header
.
extension
.
hasTransmissionTimeOffset
)
;
EXPECT_EQ
(
0x56ce
header
.
extension
.
transmissionTimeOffset
)
;
}
}
