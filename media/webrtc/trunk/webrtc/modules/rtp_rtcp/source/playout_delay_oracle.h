#
ifndef
MODULES_RTP_RTCP_SOURCE_PLAYOUT_DELAY_ORACLE_H_
#
define
MODULES_RTP_RTCP_SOURCE_PLAYOUT_DELAY_ORACLE_H_
#
include
<
stdint
.
h
>
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
webrtc
{
class
PlayoutDelayOracle
{
public
:
PlayoutDelayOracle
(
)
;
~
PlayoutDelayOracle
(
)
;
bool
send_playout_delay
(
)
const
{
rtc
:
:
CritScope
lock
(
&
crit_sect_
)
;
return
send_playout_delay_
;
}
PlayoutDelay
playout_delay
(
)
const
{
rtc
:
:
CritScope
lock
(
&
crit_sect_
)
;
return
playout_delay_
;
}
void
UpdateRequest
(
uint32_t
ssrc
PlayoutDelay
playout_delay
uint16_t
seq_num
)
;
void
OnReceivedRtcpReportBlocks
(
const
ReportBlockList
&
report_blocks
)
;
private
:
rtc
:
:
CriticalSection
crit_sect_
;
int64_t
high_sequence_number_
RTC_GUARDED_BY
(
crit_sect_
)
;
bool
send_playout_delay_
RTC_GUARDED_BY
(
crit_sect_
)
;
uint32_t
ssrc_
RTC_GUARDED_BY
(
crit_sect_
)
;
SequenceNumberUnwrapper
unwrapper_
RTC_GUARDED_BY
(
crit_sect_
)
;
PlayoutDelay
playout_delay_
RTC_GUARDED_BY
(
crit_sect_
)
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
PlayoutDelayOracle
)
;
}
;
}
#
endif
