#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
receiver_report
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
byte_io
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
common_header
.
h
"
namespace
webrtc
{
namespace
rtcp
{
constexpr
uint8_t
ReceiverReport
:
:
kPacketType
;
bool
ReceiverReport
:
:
Parse
(
const
CommonHeader
&
packet
)
{
RTC_DCHECK_EQ
(
packet
.
type
(
)
kPacketType
)
;
const
uint8_t
report_blocks_count
=
packet
.
count
(
)
;
if
(
packet
.
payload_size_bytes
(
)
<
kRrBaseLength
+
report_blocks_count
*
ReportBlock
:
:
kLength
)
{
LOG
(
LS_WARNING
)
<
<
"
Packet
is
too
small
to
contain
all
the
data
.
"
;
return
false
;
}
sender_ssrc_
=
ByteReader
<
uint32_t
>
:
:
ReadBigEndian
(
packet
.
payload
(
)
)
;
const
uint8_t
*
next_report_block
=
packet
.
payload
(
)
+
kRrBaseLength
;
report_blocks_
.
resize
(
report_blocks_count
)
;
for
(
ReportBlock
&
block
:
report_blocks_
)
{
block
.
Parse
(
next_report_block
ReportBlock
:
:
kLength
)
;
next_report_block
+
=
ReportBlock
:
:
kLength
;
}
RTC_DCHECK_LE
(
next_report_block
-
packet
.
payload
(
)
static_cast
<
ptrdiff_t
>
(
packet
.
payload_size_bytes
(
)
)
)
;
return
true
;
}
bool
ReceiverReport
:
:
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
RtcpPacket
:
:
PacketReadyCallback
*
callback
)
const
{
while
(
*
index
+
BlockLength
(
)
>
max_length
)
{
if
(
!
OnBufferFull
(
packet
index
callback
)
)
return
false
;
}
CreateHeader
(
report_blocks_
.
size
(
)
kPacketType
HeaderLength
(
)
packet
index
)
;
ByteWriter
<
uint32_t
>
:
:
WriteBigEndian
(
packet
+
*
index
sender_ssrc_
)
;
*
index
+
=
kRrBaseLength
;
for
(
const
ReportBlock
&
block
:
report_blocks_
)
{
block
.
Create
(
packet
+
*
index
)
;
*
index
+
=
ReportBlock
:
:
kLength
;
}
return
true
;
}
bool
ReceiverReport
:
:
AddReportBlock
(
const
ReportBlock
&
block
)
{
if
(
report_blocks_
.
size
(
)
>
=
kMaxNumberOfReportBlocks
)
{
LOG
(
LS_WARNING
)
<
<
"
Max
report
blocks
reached
.
"
;
return
false
;
}
report_blocks_
.
push_back
(
block
)
;
return
true
;
}
}
}
