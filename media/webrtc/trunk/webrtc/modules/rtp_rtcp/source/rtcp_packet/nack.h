#
ifndef
WEBRTC_MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_NACK_H_
#
define
WEBRTC_MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_NACK_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
basictypes
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
rtpfb
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
CommonHeader
;
class
Nack
:
public
Rtpfb
{
public
:
static
constexpr
uint8_t
kFeedbackMessageType
=
1
;
Nack
(
)
;
~
Nack
(
)
override
;
bool
Parse
(
const
CommonHeader
&
packet
)
;
void
SetPacketIds
(
const
uint16_t
*
nack_list
size_t
length
)
;
const
std
:
:
vector
<
uint16_t
>
&
packet_ids
(
)
const
{
return
packet_ids_
;
}
protected
:
bool
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
RtcpPacket
:
:
PacketReadyCallback
*
callback
)
const
override
;
size_t
BlockLength
(
)
const
override
;
private
:
static
constexpr
size_t
kNackItemLength
=
4
;
struct
PackedNack
{
uint16_t
first_pid
;
uint16_t
bitmask
;
}
;
void
Pack
(
)
;
void
Unpack
(
)
;
std
:
:
vector
<
PackedNack
>
packed_
;
std
:
:
vector
<
uint16_t
>
packet_ids_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
Nack
)
;
}
;
}
}
#
endif
