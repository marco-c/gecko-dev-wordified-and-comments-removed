#
ifndef
WEBRTC_MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_APP_H_
#
define
WEBRTC_MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_APP_H_
#
include
"
webrtc
/
base
/
buffer
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_utility
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
App
:
public
RtcpPacket
{
public
:
static
const
uint8_t
kPacketType
=
204
;
static
const
size_t
kMaxDataSize
=
IP_PACKET_SIZE
-
12
-
28
;
App
(
)
:
sub_type_
(
0
)
ssrc_
(
0
)
name_
(
0
)
{
}
virtual
~
App
(
)
{
}
bool
Parse
(
const
RTCPUtility
:
:
RtcpCommonHeader
&
header
const
uint8_t
*
payload
)
;
void
From
(
uint32_t
ssrc
)
{
ssrc_
=
ssrc
;
}
void
WithSubType
(
uint8_t
subtype
)
;
void
WithName
(
uint32_t
name
)
{
name_
=
name
;
}
void
WithData
(
const
uint8_t
*
data
size_t
data_length
)
;
uint8_t
sub_type
(
)
const
{
return
sub_type_
;
}
uint32_t
ssrc
(
)
const
{
return
ssrc_
;
}
uint32_t
name
(
)
const
{
return
name_
;
}
size_t
data_size
(
)
const
{
return
data_
.
size
(
)
;
}
const
uint8_t
*
data
(
)
const
{
return
data_
.
data
(
)
;
}
protected
:
bool
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
RtcpPacket
:
:
PacketReadyCallback
*
callback
)
const
override
;
private
:
size_t
BlockLength
(
)
const
override
{
return
12
+
data_
.
size
(
)
;
}
uint8_t
sub_type_
;
uint32_t
ssrc_
;
uint32_t
name_
;
rtc
:
:
Buffer
data_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
App
)
;
}
;
}
}
#
endif
