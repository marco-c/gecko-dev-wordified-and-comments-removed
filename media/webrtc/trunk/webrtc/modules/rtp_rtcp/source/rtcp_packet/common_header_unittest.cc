#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
common_header
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
using
webrtc
:
:
rtcp
:
:
CommonHeader
;
namespace
webrtc
{
namespace
{
const
size_t
kHeaderSizeBytes
=
4
;
}
TEST
(
RtcpCommonHeaderTest
TooSmallBuffer
)
{
uint8_t
buffer
[
]
=
{
0x80
0x00
0x00
0x00
}
;
CommonHeader
header
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
0
)
)
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
1
)
)
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
2
)
)
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
3
)
)
;
EXPECT_TRUE
(
header
.
Parse
(
buffer
4
)
)
;
}
TEST
(
RtcpCommonHeaderTest
Version
)
{
uint8_t
buffer
[
]
=
{
0x00
0x00
0x00
0x00
}
;
CommonHeader
header
;
buffer
[
0
]
=
0
<
<
6
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
)
)
;
buffer
[
0
]
=
1
<
<
6
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
)
)
;
buffer
[
0
]
=
2
<
<
6
;
EXPECT_TRUE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
)
)
;
buffer
[
0
]
=
3
<
<
6
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
)
)
;
}
TEST
(
RtcpCommonHeaderTest
PacketSize
)
{
uint8_t
buffer
[
]
=
{
0x80
0x00
0x00
0x02
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
}
;
CommonHeader
header
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
-
1
)
)
;
EXPECT_TRUE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
)
)
;
EXPECT_EQ
(
8u
header
.
payload_size_bytes
(
)
)
;
EXPECT_EQ
(
buffer
+
sizeof
(
buffer
)
header
.
NextPacket
(
)
)
;
}
TEST
(
RtcpCommonHeaderTest
PaddingAndPayloadSize
)
{
uint8_t
buffer
[
]
=
{
0xa0
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
0x00
}
;
CommonHeader
header
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
4
)
)
;
buffer
[
3
]
=
2
;
const
size_t
kPayloadSizeBytes
=
buffer
[
3
]
*
4
;
const
size_t
kPaddingAddress
=
kHeaderSizeBytes
+
kPayloadSizeBytes
-
1
;
buffer
[
kPaddingAddress
]
=
kPayloadSizeBytes
+
1
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
)
)
;
buffer
[
kPaddingAddress
]
=
0
;
EXPECT_FALSE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
)
)
;
buffer
[
kPaddingAddress
]
=
kPayloadSizeBytes
;
EXPECT_TRUE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
)
)
;
EXPECT_EQ
(
0u
header
.
payload_size_bytes
(
)
)
;
EXPECT_EQ
(
buffer
+
sizeof
(
buffer
)
header
.
NextPacket
(
)
)
;
EXPECT_EQ
(
header
.
payload
(
)
buffer
+
kHeaderSizeBytes
)
;
buffer
[
kPaddingAddress
]
=
kPayloadSizeBytes
-
1
;
EXPECT_TRUE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
)
)
;
EXPECT_EQ
(
1u
header
.
payload_size_bytes
(
)
)
;
EXPECT_EQ
(
buffer
+
sizeof
(
buffer
)
header
.
NextPacket
(
)
)
;
}
TEST
(
RtcpCommonHeaderTest
FormatAndPayloadType
)
{
uint8_t
buffer
[
]
=
{
0x9e
0xab
0x00
0x00
}
;
CommonHeader
header
;
EXPECT_TRUE
(
header
.
Parse
(
buffer
sizeof
(
buffer
)
)
)
;
EXPECT_EQ
(
header
.
count
(
)
0x1e
)
;
EXPECT_EQ
(
header
.
fmt
(
)
0x1e
)
;
EXPECT_EQ
(
header
.
type
(
)
0xab
)
;
EXPECT_EQ
(
header
.
payload_size_bytes
(
)
0u
)
;
EXPECT_EQ
(
header
.
payload
(
)
buffer
+
kHeaderSizeBytes
)
;
}
}
