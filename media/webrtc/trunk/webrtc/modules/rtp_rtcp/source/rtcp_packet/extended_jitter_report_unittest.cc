#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
extended_jitter_report
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
rtcp_packet_parser
.
h
"
using
testing
:
:
ElementsAre
;
using
testing
:
:
IsEmpty
;
using
webrtc
:
:
rtcp
:
:
ExtendedJitterReport
;
namespace
webrtc
{
namespace
{
constexpr
uint32_t
kJitter1
=
0x11121314
;
constexpr
uint32_t
kJitter2
=
0x22242628
;
}
TEST
(
RtcpPacketExtendedJitterReportTest
CreateAndParseWithoutItems
)
{
ExtendedJitterReport
ij
;
rtc
:
:
Buffer
raw
=
ij
.
Build
(
)
;
ExtendedJitterReport
parsed
;
EXPECT_TRUE
(
test
:
:
ParseSinglePacket
(
raw
&
parsed
)
)
;
EXPECT_THAT
(
parsed
.
jitter_values
(
)
IsEmpty
(
)
)
;
}
TEST
(
RtcpPacketExtendedJitterReportTest
CreateAndParseWithOneItem
)
{
ExtendedJitterReport
ij
;
EXPECT_TRUE
(
ij
.
SetJitterValues
(
{
kJitter1
}
)
)
;
rtc
:
:
Buffer
raw
=
ij
.
Build
(
)
;
ExtendedJitterReport
parsed
;
EXPECT_TRUE
(
test
:
:
ParseSinglePacket
(
raw
&
parsed
)
)
;
EXPECT_THAT
(
parsed
.
jitter_values
(
)
ElementsAre
(
kJitter1
)
)
;
}
TEST
(
RtcpPacketExtendedJitterReportTest
CreateAndParseWithTwoItems
)
{
ExtendedJitterReport
ij
;
EXPECT_TRUE
(
ij
.
SetJitterValues
(
{
kJitter1
kJitter2
}
)
)
;
rtc
:
:
Buffer
raw
=
ij
.
Build
(
)
;
ExtendedJitterReport
parsed
;
EXPECT_TRUE
(
test
:
:
ParseSinglePacket
(
raw
&
parsed
)
)
;
EXPECT_THAT
(
parsed
.
jitter_values
(
)
ElementsAre
(
kJitter1
kJitter2
)
)
;
}
TEST
(
RtcpPacketExtendedJitterReportTest
CreateWithTooManyItems
)
{
ExtendedJitterReport
ij
;
const
int
kMaxItems
=
ExtendedJitterReport
:
:
kMaxNumberOfJitterValues
;
EXPECT_FALSE
(
ij
.
SetJitterValues
(
std
:
:
vector
<
uint32_t
>
(
kMaxItems
+
1
kJitter1
)
)
)
;
EXPECT_TRUE
(
ij
.
SetJitterValues
(
std
:
:
vector
<
uint32_t
>
(
kMaxItems
kJitter1
)
)
)
;
}
TEST
(
RtcpPacketExtendedJitterReportTest
ParseFailsWithTooManyItems
)
{
ExtendedJitterReport
ij
;
ij
.
SetJitterValues
(
{
kJitter1
}
)
;
rtc
:
:
Buffer
raw
=
ij
.
Build
(
)
;
raw
[
0
]
+
+
;
ExtendedJitterReport
parsed
;
EXPECT_FALSE
(
test
:
:
ParseSinglePacket
(
raw
&
parsed
)
)
;
}
}
