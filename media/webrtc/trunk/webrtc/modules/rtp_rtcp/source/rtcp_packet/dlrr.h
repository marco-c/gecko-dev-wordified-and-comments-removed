#
ifndef
WEBRTC_MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_DLRR_H_
#
define
WEBRTC_MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_DLRR_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
basictypes
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
Dlrr
{
public
:
struct
SubBlock
{
uint32_t
ssrc
;
uint32_t
last_rr
;
uint32_t
delay_since_last_rr
;
}
;
static
const
uint8_t
kBlockType
=
5
;
static
const
size_t
kMaxNumberOfDlrrItems
=
100
;
Dlrr
(
)
{
}
Dlrr
(
const
Dlrr
&
other
)
=
default
;
~
Dlrr
(
)
{
}
Dlrr
&
operator
=
(
const
Dlrr
&
other
)
=
default
;
bool
Parse
(
const
uint8_t
*
buffer
uint16_t
block_length_32bits
)
;
size_t
BlockLength
(
)
const
;
void
Create
(
uint8_t
*
buffer
)
const
;
bool
WithDlrrItem
(
uint32_t
ssrc
uint32_t
last_rr
uint32_t
delay_last_rr
)
;
const
std
:
:
vector
<
SubBlock
>
&
sub_blocks
(
)
const
{
return
sub_blocks_
;
}
private
:
static
const
size_t
kBlockHeaderLength
=
4
;
static
const
size_t
kSubBlockLength
=
12
;
std
:
:
vector
<
SubBlock
>
sub_blocks_
;
}
;
}
}
#
endif
