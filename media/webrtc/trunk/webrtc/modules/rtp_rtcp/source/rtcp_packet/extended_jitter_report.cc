#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
extended_jitter_report
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
byte_io
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_utility
.
h
"
using
webrtc
:
:
RTCPUtility
:
:
RtcpCommonHeader
;
namespace
webrtc
{
namespace
rtcp
{
bool
ExtendedJitterReport
:
:
Parse
(
const
RtcpCommonHeader
&
header
const
uint8_t
*
payload
)
{
RTC_DCHECK
(
header
.
packet_type
=
=
kPacketType
)
;
const
uint8_t
jitters_count
=
header
.
count_or_format
;
const
size_t
kJitterSizeBytes
=
4u
;
if
(
header
.
payload_size_bytes
<
jitters_count
*
kJitterSizeBytes
)
{
LOG
(
LS_WARNING
)
<
<
"
Packet
is
too
small
to
contain
all
the
jitter
.
"
;
return
false
;
}
inter_arrival_jitters_
.
resize
(
jitters_count
)
;
for
(
size_t
index
=
0
;
index
<
jitters_count
;
+
+
index
)
{
inter_arrival_jitters_
[
index
]
=
ByteReader
<
uint32_t
>
:
:
ReadBigEndian
(
&
payload
[
index
*
kJitterSizeBytes
]
)
;
}
return
true
;
}
bool
ExtendedJitterReport
:
:
WithJitter
(
uint32_t
jitter
)
{
if
(
inter_arrival_jitters_
.
size
(
)
>
=
kMaxNumberOfJitters
)
{
LOG
(
LS_WARNING
)
<
<
"
Max
inter
-
arrival
jitter
items
reached
.
"
;
return
false
;
}
inter_arrival_jitters_
.
push_back
(
jitter
)
;
return
true
;
}
bool
ExtendedJitterReport
:
:
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
RtcpPacket
:
:
PacketReadyCallback
*
callback
)
const
{
while
(
*
index
+
BlockLength
(
)
>
max_length
)
{
if
(
!
OnBufferFull
(
packet
index
callback
)
)
return
false
;
}
const
size_t
index_end
=
*
index
+
BlockLength
(
)
;
size_t
length
=
inter_arrival_jitters_
.
size
(
)
;
CreateHeader
(
length
kPacketType
length
packet
index
)
;
for
(
uint32_t
jitter
:
inter_arrival_jitters_
)
{
ByteWriter
<
uint32_t
>
:
:
WriteBigEndian
(
packet
+
*
index
jitter
)
;
*
index
+
=
sizeof
(
uint32_t
)
;
}
RTC_DCHECK_EQ
(
index_end
*
index
)
;
return
true
;
}
}
}
