#
ifndef
WEBRTC_MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_TMMBN_H_
#
define
WEBRTC_MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_TMMBN_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
basictypes
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_utility
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
Tmmbn
:
public
RtcpPacket
{
public
:
Tmmbn
(
)
:
RtcpPacket
(
)
{
memset
(
&
tmmbn_
0
sizeof
(
tmmbn_
)
)
;
}
virtual
~
Tmmbn
(
)
{
}
void
From
(
uint32_t
ssrc
)
{
tmmbn_
.
SenderSSRC
=
ssrc
;
}
bool
WithTmmbr
(
uint32_t
ssrc
uint32_t
bitrate_kbps
uint16_t
overhead
)
;
protected
:
bool
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
RtcpPacket
:
:
PacketReadyCallback
*
callback
)
const
override
;
private
:
static
const
int
kMaxNumberOfTmmbrs
=
50
;
size_t
BlockLength
(
)
const
{
const
size_t
kFciLen
=
8
;
return
kCommonFbFmtLength
+
kFciLen
*
tmmbn_items_
.
size
(
)
;
}
RTCPUtility
:
:
RTCPPacketRTPFBTMMBN
tmmbn_
;
std
:
:
vector
<
RTCPUtility
:
:
RTCPPacketRTPFBTMMBRItem
>
tmmbn_items_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
Tmmbn
)
;
}
;
}
}
#
endif
