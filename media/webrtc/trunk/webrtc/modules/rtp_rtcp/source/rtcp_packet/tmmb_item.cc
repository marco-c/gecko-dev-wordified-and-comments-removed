#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
tmmb_item
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
logging
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
byte_io
.
h
"
namespace
webrtc
{
namespace
rtcp
{
TmmbItem
:
:
TmmbItem
(
uint32_t
ssrc
uint64_t
bitrate_bps
uint16_t
overhead
)
:
ssrc_
(
ssrc
)
bitrate_bps_
(
bitrate_bps
)
packet_overhead_
(
overhead
)
{
RTC_DCHECK_LE
(
overhead
0x1ffu
)
;
}
bool
TmmbItem
:
:
Parse
(
const
uint8_t
*
buffer
)
{
ssrc_
=
ByteReader
<
uint32_t
>
:
:
ReadBigEndian
(
&
buffer
[
0
]
)
;
uint32_t
compact
=
ByteReader
<
uint32_t
>
:
:
ReadBigEndian
(
&
buffer
[
4
]
)
;
uint8_t
exponent
=
compact
>
>
26
;
uint64_t
mantissa
=
(
compact
>
>
9
)
&
0x1ffff
;
uint16_t
overhead
=
compact
&
0x1ff
;
bitrate_bps_
=
(
mantissa
<
<
exponent
)
;
bool
shift_overflow
=
(
bitrate_bps_
>
>
exponent
)
!
=
mantissa
;
if
(
shift_overflow
)
{
LOG
(
LS_ERROR
)
<
<
"
Invalid
tmmb
bitrate
value
:
"
<
<
mantissa
<
<
"
*
2
^
"
<
<
static_cast
<
int
>
(
exponent
)
;
return
false
;
}
packet_overhead_
=
overhead
;
return
true
;
}
void
TmmbItem
:
:
Create
(
uint8_t
*
buffer
)
const
{
constexpr
uint64_t
kMaxMantissa
=
0x1ffff
;
uint64_t
mantissa
=
bitrate_bps_
;
uint32_t
exponent
=
0
;
while
(
mantissa
>
kMaxMantissa
)
{
mantissa
>
>
=
1
;
+
+
exponent
;
}
ByteWriter
<
uint32_t
>
:
:
WriteBigEndian
(
&
buffer
[
0
]
ssrc_
)
;
uint32_t
compact
=
(
exponent
<
<
26
)
|
(
mantissa
<
<
9
)
|
packet_overhead_
;
ByteWriter
<
uint32_t
>
:
:
WriteBigEndian
(
&
buffer
[
4
]
compact
)
;
}
void
TmmbItem
:
:
set_packet_overhead
(
uint16_t
overhead
)
{
RTC_DCHECK_LE
(
overhead
0x1ffu
)
;
packet_overhead_
=
overhead
;
}
}
}
