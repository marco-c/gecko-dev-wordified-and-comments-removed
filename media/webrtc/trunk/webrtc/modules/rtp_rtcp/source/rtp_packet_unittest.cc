#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_packet_received
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_packet_to_send
.
h
"
#
include
"
webrtc
/
base
/
random
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_header_extension
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_header_extensions
.
h
"
#
include
"
webrtc
/
test
/
gmock
.
h
"
#
include
"
webrtc
/
test
/
gtest
.
h
"
using
testing
:
:
ElementsAreArray
;
using
testing
:
:
make_tuple
;
namespace
webrtc
{
namespace
{
constexpr
int8_t
kPayloadType
=
100
;
constexpr
uint32_t
kSsrc
=
0x12345678
;
constexpr
uint16_t
kSeqNum
=
0x1234
;
constexpr
uint8_t
kSeqNumFirstByte
=
kSeqNum
>
>
8
;
constexpr
uint8_t
kSeqNumSecondByte
=
kSeqNum
&
0xff
;
constexpr
uint32_t
kTimestamp
=
0x65431278
;
constexpr
uint8_t
kTransmissionOffsetExtensionId
=
1
;
constexpr
uint8_t
kAudioLevelExtensionId
=
9
;
constexpr
uint8_t
kRtpStreamIdExtensionId
=
0xa
;
constexpr
int32_t
kTimeOffset
=
0x56ce
;
constexpr
bool
kVoiceActive
=
true
;
constexpr
uint8_t
kAudioLevel
=
0x5a
;
constexpr
char
kStreamId
[
]
=
"
streamid
"
;
constexpr
size_t
kMaxPaddingSize
=
224u
;
constexpr
uint8_t
kMinimumPacket
[
]
=
{
0x80
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
}
;
constexpr
uint8_t
kPacketWithTO
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x01
0x12
0x00
0x56
0xce
}
;
constexpr
uint8_t
kPacketWithTOAndAL
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x02
0x12
0x00
0x56
0xce
0x90
0x80
|
kAudioLevel
0x00
0x00
}
;
constexpr
uint8_t
kPacketWithRsid
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x03
0xa7
'
s
'
'
t
'
'
r
'
'
e
'
'
a
'
'
m
'
'
i
'
'
d
'
0x00
0x00
0x00
}
;
constexpr
uint8_t
kMIdExtensionId
=
0xb
;
constexpr
char
kMId
[
]
=
"
midval
"
;
constexpr
uint8_t
kPacketWithMid
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x02
0xb5
'
m
'
'
i
'
'
d
'
'
v
'
'
a
'
'
l
'
0x00
}
;
constexpr
uint8_t
kCsrcAudioLevelExtensionId
=
0xc
;
constexpr
uint8_t
kCsrcAudioLevelsSize
=
4
;
constexpr
uint8_t
kCsrcAudioLevels
[
]
=
{
0x7f
0x00
0x10
0x08
}
;
constexpr
uint8_t
kPacketWithCsrcAudioLevels
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x02
(
kCsrcAudioLevelExtensionId
<
<
4
)
|
(
kCsrcAudioLevelsSize
-
1
)
0x7f
0x00
0x10
0x08
0x00
0x00
0x00
}
;
constexpr
uint32_t
kCsrcs
[
]
=
{
0x34567890
0x32435465
}
;
constexpr
uint8_t
kPayload
[
]
=
{
'
p
'
'
a
'
'
y
'
'
l
'
'
o
'
'
a
'
'
d
'
}
;
constexpr
uint8_t
kPacketPaddingSize
=
8
;
constexpr
uint8_t
kPacket
[
]
=
{
0xb2
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0x34
0x56
0x78
0x90
0x32
0x43
0x54
0x65
0xbe
0xde
0x00
0x01
0x12
0x00
0x56
0xce
'
p
'
'
a
'
'
y
'
'
l
'
'
o
'
'
a
'
'
d
'
'
p
'
'
a
'
'
d
'
'
d
'
'
i
'
'
n
'
'
g
'
kPacketPaddingSize
}
;
constexpr
uint8_t
kPacketWithInvalidExtension
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x02
(
kTransmissionOffsetExtensionId
<
<
4
)
|
6
'
e
'
'
x
'
'
t
'
'
d
'
'
a
'
'
t
'
'
a
'
'
p
'
'
a
'
'
y
'
'
l
'
'
o
'
'
a
'
'
d
'
}
;
}
TEST
(
RtpPacketTest
CreateMinimum
)
{
RtpPacketToSend
packet
(
nullptr
)
;
packet
.
SetPayloadType
(
kPayloadType
)
;
packet
.
SetSequenceNumber
(
kSeqNum
)
;
packet
.
SetTimestamp
(
kTimestamp
)
;
packet
.
SetSsrc
(
kSsrc
)
;
EXPECT_THAT
(
kMinimumPacket
ElementsAreArray
(
packet
.
data
(
)
packet
.
size
(
)
)
)
;
}
TEST
(
RtpPacketTest
CreateWithExtension
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
(
kRtpExtensionTransmissionTimeOffset
kTransmissionOffsetExtensionId
)
;
RtpPacketToSend
packet
(
&
extensions
)
;
packet
.
SetPayloadType
(
kPayloadType
)
;
packet
.
SetSequenceNumber
(
kSeqNum
)
;
packet
.
SetTimestamp
(
kTimestamp
)
;
packet
.
SetSsrc
(
kSsrc
)
;
packet
.
SetExtension
<
TransmissionOffset
>
(
kTimeOffset
)
;
EXPECT_THAT
(
kPacketWithTO
ElementsAreArray
(
packet
.
data
(
)
packet
.
size
(
)
)
)
;
}
TEST
(
RtpPacketTest
CreateWith2Extensions
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
(
kRtpExtensionTransmissionTimeOffset
kTransmissionOffsetExtensionId
)
;
extensions
.
Register
(
kRtpExtensionAudioLevel
kAudioLevelExtensionId
)
;
RtpPacketToSend
packet
(
&
extensions
)
;
packet
.
SetPayloadType
(
kPayloadType
)
;
packet
.
SetSequenceNumber
(
kSeqNum
)
;
packet
.
SetTimestamp
(
kTimestamp
)
;
packet
.
SetSsrc
(
kSsrc
)
;
packet
.
SetExtension
<
TransmissionOffset
>
(
kTimeOffset
)
;
packet
.
SetExtension
<
AudioLevel
>
(
kVoiceActive
kAudioLevel
)
;
EXPECT_THAT
(
kPacketWithTOAndAL
ElementsAreArray
(
packet
.
data
(
)
packet
.
size
(
)
)
)
;
}
TEST
(
RtpPacketTest
CreateWithDynamicSizedExtensions
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
<
RtpStreamId
>
(
kRtpStreamIdExtensionId
)
;
RtpPacketToSend
packet
(
&
extensions
)
;
packet
.
SetPayloadType
(
kPayloadType
)
;
packet
.
SetSequenceNumber
(
kSeqNum
)
;
packet
.
SetTimestamp
(
kTimestamp
)
;
packet
.
SetSsrc
(
kSsrc
)
;
packet
.
SetExtension
<
RtpStreamId
>
(
kStreamId
)
;
EXPECT_THAT
(
kPacketWithRsid
ElementsAreArray
(
packet
.
data
(
)
packet
.
size
(
)
)
)
;
}
TEST
(
RtpPacketTest
CreateWithDynamicSizedExtensionMid
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
<
RtpStreamId
>
(
kMIdExtensionId
)
;
RtpPacketToSend
packet
(
&
extensions
)
;
packet
.
SetPayloadType
(
kPayloadType
)
;
packet
.
SetSequenceNumber
(
kSeqNum
)
;
packet
.
SetTimestamp
(
kTimestamp
)
;
packet
.
SetSsrc
(
kSsrc
)
;
packet
.
SetExtension
<
RtpStreamId
>
(
kMId
)
;
EXPECT_THAT
(
kPacketWithMid
ElementsAreArray
(
packet
.
data
(
)
packet
.
size
(
)
)
)
;
}
TEST
(
RtpPacketTest
CreateWithDynamicSizedExtensionCsrcAudioLevel
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
<
CsrcAudioLevel
>
(
kCsrcAudioLevelExtensionId
)
;
RtpPacketToSend
packet
(
&
extensions
)
;
packet
.
SetPayloadType
(
kPayloadType
)
;
packet
.
SetSequenceNumber
(
kSeqNum
)
;
packet
.
SetTimestamp
(
kTimestamp
)
;
packet
.
SetSsrc
(
kSsrc
)
;
CsrcAudioLevelList
levels
;
levels
.
numAudioLevels
=
kCsrcAudioLevelsSize
;
for
(
uint8_t
i
=
0
;
i
<
kCsrcAudioLevelsSize
;
i
+
+
)
{
levels
.
arrOfAudioLevels
[
i
]
=
kCsrcAudioLevels
[
i
]
;
}
packet
.
SetExtension
<
CsrcAudioLevel
>
(
levels
)
;
EXPECT_THAT
(
kPacketWithCsrcAudioLevels
ElementsAreArray
(
packet
.
data
(
)
packet
.
size
(
)
)
)
;
}
TEST
(
RtpPacketTest
TryToCreateWithEmptyRsid
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
<
RtpStreamId
>
(
kRtpStreamIdExtensionId
)
;
RtpPacketToSend
packet
(
&
extensions
)
;
EXPECT_FALSE
(
packet
.
SetExtension
<
RtpStreamId
>
(
"
"
)
)
;
}
TEST
(
RtpPacketTest
TryToCreateWithLongRsid
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
constexpr
char
kLongStreamId
[
]
=
"
LoooooooooongRsid
"
;
ASSERT_EQ
(
strlen
(
kLongStreamId
)
17u
)
;
extensions
.
Register
<
RtpStreamId
>
(
kRtpStreamIdExtensionId
)
;
RtpPacketToSend
packet
(
&
extensions
)
;
EXPECT_FALSE
(
packet
.
SetExtension
<
RtpStreamId
>
(
kLongStreamId
)
)
;
}
TEST
(
RtpPacketTest
CreateWithExtensionsWithoutManager
)
{
RtpPacketToSend
packet
(
nullptr
)
;
packet
.
SetPayloadType
(
kPayloadType
)
;
packet
.
SetSequenceNumber
(
kSeqNum
)
;
packet
.
SetTimestamp
(
kTimestamp
)
;
packet
.
SetSsrc
(
kSsrc
)
;
auto
raw
=
packet
.
AllocateRawExtension
(
kTransmissionOffsetExtensionId
TransmissionOffset
:
:
kValueSizeBytes
)
;
EXPECT_EQ
(
raw
.
size
(
)
TransmissionOffset
:
:
kValueSizeBytes
)
;
TransmissionOffset
:
:
Write
(
raw
.
data
(
)
kTimeOffset
)
;
raw
=
packet
.
AllocateRawExtension
(
kAudioLevelExtensionId
AudioLevel
:
:
kValueSizeBytes
)
;
EXPECT_EQ
(
raw
.
size
(
)
AudioLevel
:
:
kValueSizeBytes
)
;
AudioLevel
:
:
Write
(
raw
.
data
(
)
kVoiceActive
kAudioLevel
)
;
EXPECT_THAT
(
kPacketWithTOAndAL
ElementsAreArray
(
packet
.
data
(
)
packet
.
size
(
)
)
)
;
}
TEST
(
RtpPacketTest
CreateWithMaxSizeHeaderExtension
)
{
const
size_t
kMaxExtensionSize
=
16
;
const
int
kId
=
1
;
const
uint8_t
kValue
[
16
]
=
"
123456789abcdef
"
;
RtpPacketToSend
packet
(
nullptr
)
;
packet
.
SetRawExtension
(
kId
kValue
)
;
EXPECT_TRUE
(
packet
.
AllocateRawExtension
(
kId
kMaxExtensionSize
-
1
)
.
empty
(
)
)
;
packet
.
SetPayloadSize
(
42
)
;
EXPECT_EQ
(
packet
.
AllocateRawExtension
(
kId
kMaxExtensionSize
)
.
size
(
)
kMaxExtensionSize
)
;
EXPECT_TRUE
(
packet
.
AllocateRawExtension
(
kId
+
1
kMaxExtensionSize
)
.
empty
(
)
)
;
RtpPacketReceived
parsed
;
EXPECT_TRUE
(
parsed
.
Parse
(
packet
.
Buffer
(
)
)
)
;
auto
read_raw
=
parsed
.
GetRawExtension
(
kId
)
;
EXPECT_THAT
(
read_raw
ElementsAreArray
(
kValue
kMaxExtensionSize
)
)
;
}
TEST
(
RtpPacketTest
SetReservedExtensionsAfterPayload
)
{
const
size_t
kPayloadSize
=
4
;
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
(
kRtpExtensionTransmissionTimeOffset
kTransmissionOffsetExtensionId
)
;
extensions
.
Register
(
kRtpExtensionAudioLevel
kAudioLevelExtensionId
)
;
RtpPacketToSend
packet
(
&
extensions
)
;
EXPECT_TRUE
(
packet
.
ReserveExtension
<
TransmissionOffset
>
(
)
)
;
packet
.
SetPayloadSize
(
kPayloadSize
)
;
EXPECT_FALSE
(
packet
.
SetExtension
<
AudioLevel
>
(
kVoiceActive
kAudioLevel
)
)
;
EXPECT_TRUE
(
packet
.
SetExtension
<
TransmissionOffset
>
(
kTimeOffset
)
)
;
}
TEST
(
RtpPacketTest
CreatePurePadding
)
{
const
size_t
kPaddingSize
=
kMaxPaddingSize
-
1
;
RtpPacketToSend
packet
(
nullptr
12
+
kPaddingSize
)
;
packet
.
SetPayloadType
(
kPayloadType
)
;
packet
.
SetSequenceNumber
(
kSeqNum
)
;
packet
.
SetTimestamp
(
kTimestamp
)
;
packet
.
SetSsrc
(
kSsrc
)
;
Random
random
(
0x123456789
)
;
EXPECT_LT
(
packet
.
size
(
)
packet
.
capacity
(
)
)
;
EXPECT_FALSE
(
packet
.
SetPadding
(
kPaddingSize
+
1
&
random
)
)
;
EXPECT_TRUE
(
packet
.
SetPadding
(
kPaddingSize
&
random
)
)
;
EXPECT_EQ
(
packet
.
size
(
)
packet
.
capacity
(
)
)
;
}
TEST
(
RtpPacketTest
CreateUnalignedPadding
)
{
const
size_t
kPayloadSize
=
3
;
RtpPacketToSend
packet
(
nullptr
12
+
kPayloadSize
+
kMaxPaddingSize
)
;
packet
.
SetPayloadType
(
kPayloadType
)
;
packet
.
SetSequenceNumber
(
kSeqNum
)
;
packet
.
SetTimestamp
(
kTimestamp
)
;
packet
.
SetSsrc
(
kSsrc
)
;
packet
.
SetPayloadSize
(
kPayloadSize
)
;
Random
r
(
0x123456789
)
;
EXPECT_LT
(
packet
.
size
(
)
packet
.
capacity
(
)
)
;
EXPECT_TRUE
(
packet
.
SetPadding
(
kMaxPaddingSize
&
r
)
)
;
EXPECT_EQ
(
packet
.
size
(
)
packet
.
capacity
(
)
)
;
}
TEST
(
RtpPacketTest
ParseMinimum
)
{
RtpPacketReceived
packet
;
EXPECT_TRUE
(
packet
.
Parse
(
kMinimumPacket
sizeof
(
kMinimumPacket
)
)
)
;
EXPECT_EQ
(
kPayloadType
packet
.
PayloadType
(
)
)
;
EXPECT_EQ
(
kSeqNum
packet
.
SequenceNumber
(
)
)
;
EXPECT_EQ
(
kTimestamp
packet
.
Timestamp
(
)
)
;
EXPECT_EQ
(
kSsrc
packet
.
Ssrc
(
)
)
;
EXPECT_EQ
(
0u
packet
.
padding_size
(
)
)
;
EXPECT_EQ
(
0u
packet
.
payload_size
(
)
)
;
}
TEST
(
RtpPacketTest
ParseBuffer
)
{
rtc
:
:
CopyOnWriteBuffer
unparsed
(
kMinimumPacket
)
;
const
uint8_t
*
raw
=
unparsed
.
data
(
)
;
RtpPacketReceived
packet
;
EXPECT_TRUE
(
packet
.
Parse
(
std
:
:
move
(
unparsed
)
)
)
;
EXPECT_EQ
(
raw
packet
.
data
(
)
)
;
EXPECT_EQ
(
kSeqNum
packet
.
SequenceNumber
(
)
)
;
EXPECT_EQ
(
kTimestamp
packet
.
Timestamp
(
)
)
;
EXPECT_EQ
(
kSsrc
packet
.
Ssrc
(
)
)
;
EXPECT_EQ
(
0u
packet
.
padding_size
(
)
)
;
EXPECT_EQ
(
0u
packet
.
payload_size
(
)
)
;
}
TEST
(
RtpPacketTest
ParseWithExtension
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
(
kRtpExtensionTransmissionTimeOffset
kTransmissionOffsetExtensionId
)
;
RtpPacketReceived
packet
(
&
extensions
)
;
EXPECT_TRUE
(
packet
.
Parse
(
kPacketWithTO
sizeof
(
kPacketWithTO
)
)
)
;
EXPECT_EQ
(
kPayloadType
packet
.
PayloadType
(
)
)
;
EXPECT_EQ
(
kSeqNum
packet
.
SequenceNumber
(
)
)
;
EXPECT_EQ
(
kTimestamp
packet
.
Timestamp
(
)
)
;
EXPECT_EQ
(
kSsrc
packet
.
Ssrc
(
)
)
;
int32_t
time_offset
;
EXPECT_TRUE
(
packet
.
GetExtension
<
TransmissionOffset
>
(
&
time_offset
)
)
;
EXPECT_EQ
(
kTimeOffset
time_offset
)
;
EXPECT_EQ
(
0u
packet
.
payload_size
(
)
)
;
EXPECT_EQ
(
0u
packet
.
padding_size
(
)
)
;
}
TEST
(
RtpPacketTest
ParseWithInvalidSizedExtension
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
(
kRtpExtensionTransmissionTimeOffset
kTransmissionOffsetExtensionId
)
;
RtpPacketReceived
packet
(
&
extensions
)
;
EXPECT_TRUE
(
packet
.
Parse
(
kPacketWithInvalidExtension
sizeof
(
kPacketWithInvalidExtension
)
)
)
;
int32_t
time_offset
;
EXPECT_FALSE
(
packet
.
GetExtension
<
TransmissionOffset
>
(
&
time_offset
)
)
;
EXPECT_THAT
(
packet
.
payload
(
)
ElementsAreArray
(
kPayload
)
)
;
}
TEST
(
RtpPacketTest
ParseWithOverSizedExtension
)
{
const
uint8_t
bad_packet
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x01
0x00
0x12
0xda
0x1a
}
;
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
(
TransmissionOffset
:
:
kId
1
)
;
RtpPacketReceived
packet
(
&
extensions
)
;
EXPECT_TRUE
(
packet
.
Parse
(
bad_packet
sizeof
(
bad_packet
)
)
)
;
int32_t
time_offset
;
EXPECT_FALSE
(
packet
.
GetExtension
<
TransmissionOffset
>
(
&
time_offset
)
)
;
}
TEST
(
RtpPacketTest
ParseWith2Extensions
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
(
kRtpExtensionTransmissionTimeOffset
kTransmissionOffsetExtensionId
)
;
extensions
.
Register
(
kRtpExtensionAudioLevel
kAudioLevelExtensionId
)
;
RtpPacketReceived
packet
(
&
extensions
)
;
EXPECT_TRUE
(
packet
.
Parse
(
kPacketWithTOAndAL
sizeof
(
kPacketWithTOAndAL
)
)
)
;
int32_t
time_offset
;
EXPECT_TRUE
(
packet
.
GetExtension
<
TransmissionOffset
>
(
&
time_offset
)
)
;
EXPECT_EQ
(
kTimeOffset
time_offset
)
;
bool
voice_active
;
uint8_t
audio_level
;
EXPECT_TRUE
(
packet
.
GetExtension
<
AudioLevel
>
(
&
voice_active
&
audio_level
)
)
;
EXPECT_EQ
(
kVoiceActive
voice_active
)
;
EXPECT_EQ
(
kAudioLevel
audio_level
)
;
}
TEST
(
RtpPacketTest
ParseWithAllFeatures
)
{
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
(
kRtpExtensionTransmissionTimeOffset
kTransmissionOffsetExtensionId
)
;
RtpPacketReceived
packet
(
&
extensions
)
;
EXPECT_TRUE
(
packet
.
Parse
(
kPacket
sizeof
(
kPacket
)
)
)
;
EXPECT_EQ
(
kPayloadType
packet
.
PayloadType
(
)
)
;
EXPECT_EQ
(
kSeqNum
packet
.
SequenceNumber
(
)
)
;
EXPECT_EQ
(
kTimestamp
packet
.
Timestamp
(
)
)
;
EXPECT_EQ
(
kSsrc
packet
.
Ssrc
(
)
)
;
EXPECT_THAT
(
packet
.
Csrcs
(
)
ElementsAreArray
(
kCsrcs
)
)
;
EXPECT_THAT
(
packet
.
payload
(
)
ElementsAreArray
(
kPayload
)
)
;
EXPECT_EQ
(
kPacketPaddingSize
packet
.
padding_size
(
)
)
;
int32_t
time_offset
;
EXPECT_TRUE
(
packet
.
GetExtension
<
TransmissionOffset
>
(
&
time_offset
)
)
;
}
TEST
(
RtpPacketTest
ParseWithExtensionDelayed
)
{
RtpPacketReceived
packet
;
EXPECT_TRUE
(
packet
.
Parse
(
kPacketWithTO
sizeof
(
kPacketWithTO
)
)
)
;
EXPECT_EQ
(
kPayloadType
packet
.
PayloadType
(
)
)
;
EXPECT_EQ
(
kSeqNum
packet
.
SequenceNumber
(
)
)
;
EXPECT_EQ
(
kTimestamp
packet
.
Timestamp
(
)
)
;
EXPECT_EQ
(
kSsrc
packet
.
Ssrc
(
)
)
;
RtpPacketToSend
:
:
ExtensionManager
extensions
;
extensions
.
Register
(
kRtpExtensionTransmissionTimeOffset
kTransmissionOffsetExtensionId
)
;
int32_t
time_offset
;
EXPECT_FALSE
(
packet
.
GetExtension
<
TransmissionOffset
>
(
&
time_offset
)
)
;
packet
.
IdentifyExtensions
(
extensions
)
;
EXPECT_TRUE
(
packet
.
GetExtension
<
TransmissionOffset
>
(
&
time_offset
)
)
;
EXPECT_EQ
(
kTimeOffset
time_offset
)
;
EXPECT_EQ
(
0u
packet
.
payload_size
(
)
)
;
EXPECT_EQ
(
0u
packet
.
padding_size
(
)
)
;
}
TEST
(
RtpPacketTest
ParseWithoutExtensionManager
)
{
RtpPacketReceived
packet
;
EXPECT_TRUE
(
packet
.
Parse
(
kPacketWithTO
sizeof
(
kPacketWithTO
)
)
)
;
EXPECT_FALSE
(
packet
.
HasRawExtension
(
kAudioLevelExtensionId
)
)
;
EXPECT_TRUE
(
packet
.
GetRawExtension
(
kAudioLevelExtensionId
)
.
empty
(
)
)
;
EXPECT_TRUE
(
packet
.
HasRawExtension
(
kTransmissionOffsetExtensionId
)
)
;
int32_t
time_offset
=
0
;
auto
raw_extension
=
packet
.
GetRawExtension
(
kTransmissionOffsetExtensionId
)
;
EXPECT_EQ
(
raw_extension
.
size
(
)
TransmissionOffset
:
:
kValueSizeBytes
)
;
EXPECT_TRUE
(
TransmissionOffset
:
:
Parse
(
raw_extension
&
time_offset
)
)
;
EXPECT_EQ
(
time_offset
kTimeOffset
)
;
}
TEST
(
RtpPacketTest
ParseDynamicSizeExtension
)
{
const
uint8_t
kPacket1
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x02
0x21
'
H
'
'
D
'
0x12
'
r
'
'
t
'
'
x
'
0x00
}
;
const
uint8_t
kPacket2
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x79
0xbe
0xde
0x00
0x01
0x11
'
H
'
'
D
'
0x00
}
;
const
uint8_t
kPacket3
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x04
0x21
'
H
'
'
D
'
0x12
'
r
'
'
t
'
'
x
'
0x35
'
m
'
'
i
'
'
d
'
'
v
'
'
a
'
'
l
'
0x00
0x00
}
;
const
uint8_t
kPacket4
[
]
=
{
0x90
kPayloadType
kSeqNumFirstByte
kSeqNumSecondByte
0x65
0x43
0x12
0x78
0x12
0x34
0x56
0x78
0xbe
0xde
0x00
0x05
0x21
'
H
'
'
D
'
0x12
'
r
'
'
t
'
'
x
'
0x35
'
m
'
'
i
'
'
d
'
'
v
'
'
a
'
'
l
'
0x43
0x01
0x10
0x00
0x7f
0x00
}
;
RtpPacketReceived
:
:
ExtensionManager
extensions
;
extensions
.
Register
<
RtpStreamId
>
(
1
)
;
extensions
.
Register
<
RepairedRtpStreamId
>
(
2
)
;
extensions
.
Register
<
MId
>
(
3
)
;
extensions
.
Register
<
CsrcAudioLevel
>
(
4
)
;
RtpPacketReceived
packet
(
&
extensions
)
;
ASSERT_TRUE
(
packet
.
Parse
(
kPacket1
sizeof
(
kPacket1
)
)
)
;
std
:
:
string
rsid
;
EXPECT_TRUE
(
packet
.
GetExtension
<
RtpStreamId
>
(
&
rsid
)
)
;
EXPECT_EQ
(
rsid
"
rtx
"
)
;
std
:
:
string
repaired_rsid
;
EXPECT_TRUE
(
packet
.
GetExtension
<
RepairedRtpStreamId
>
(
&
repaired_rsid
)
)
;
EXPECT_EQ
(
repaired_rsid
"
HD
"
)
;
ASSERT_TRUE
(
packet
.
Parse
(
kPacket2
sizeof
(
kPacket2
)
)
)
;
EXPECT_TRUE
(
packet
.
GetExtension
<
RtpStreamId
>
(
&
rsid
)
)
;
EXPECT_EQ
(
rsid
"
HD
"
)
;
EXPECT_FALSE
(
packet
.
GetExtension
<
RepairedRtpStreamId
>
(
&
repaired_rsid
)
)
;
ASSERT_TRUE
(
packet
.
Parse
(
kPacket3
sizeof
(
kPacket3
)
)
)
;
EXPECT_TRUE
(
packet
.
GetExtension
<
RtpStreamId
>
(
&
rsid
)
)
;
EXPECT_EQ
(
rsid
"
rtx
"
)
;
EXPECT_TRUE
(
packet
.
GetExtension
<
RepairedRtpStreamId
>
(
&
repaired_rsid
)
)
;
EXPECT_EQ
(
repaired_rsid
"
HD
"
)
;
std
:
:
string
mid
;
EXPECT_TRUE
(
packet
.
GetExtension
<
MId
>
(
&
mid
)
)
;
EXPECT_EQ
(
mid
"
midval
"
)
;
ASSERT_TRUE
(
packet
.
Parse
(
kPacket4
sizeof
(
kPacket4
)
)
)
;
EXPECT_TRUE
(
packet
.
GetExtension
<
RtpStreamId
>
(
&
rsid
)
)
;
EXPECT_EQ
(
rsid
"
rtx
"
)
;
EXPECT_TRUE
(
packet
.
GetExtension
<
RepairedRtpStreamId
>
(
&
repaired_rsid
)
)
;
EXPECT_EQ
(
repaired_rsid
"
HD
"
)
;
EXPECT_TRUE
(
packet
.
GetExtension
<
MId
>
(
&
mid
)
)
;
EXPECT_EQ
(
mid
"
midval
"
)
;
CsrcAudioLevelList
csrcAudioLevels
;
EXPECT_TRUE
(
packet
.
GetExtension
<
CsrcAudioLevel
>
(
&
csrcAudioLevels
)
)
;
EXPECT_EQ
(
csrcAudioLevels
.
numAudioLevels
4
)
;
EXPECT_EQ
(
csrcAudioLevels
.
arrOfAudioLevels
[
0
]
0x01
)
;
EXPECT_EQ
(
csrcAudioLevels
.
arrOfAudioLevels
[
1
]
0x10
)
;
EXPECT_EQ
(
csrcAudioLevels
.
arrOfAudioLevels
[
2
]
0x00
)
;
EXPECT_EQ
(
csrcAudioLevels
.
arrOfAudioLevels
[
3
]
0x7f
)
;
}
TEST
(
RtpPacketTest
RawExtensionFunctionsAcceptZeroIdAndReturnFalse
)
{
RtpPacketReceived
:
:
ExtensionManager
extensions
;
RtpPacketReceived
packet
(
&
extensions
)
;
const
int
kInvalidId
=
extensions
.
GetId
(
TransmissionOffset
:
:
kId
)
;
ASSERT_EQ
(
kInvalidId
0
)
;
ASSERT_TRUE
(
packet
.
Parse
(
kPacket
sizeof
(
kPacket
)
)
)
;
EXPECT_FALSE
(
packet
.
HasRawExtension
(
kInvalidId
)
)
;
EXPECT_THAT
(
packet
.
GetRawExtension
(
kInvalidId
)
testing
:
:
IsEmpty
(
)
)
;
const
uint8_t
kExtension
[
]
=
{
'
e
'
'
x
'
'
t
'
}
;
EXPECT_FALSE
(
packet
.
SetRawExtension
(
kInvalidId
kExtension
)
)
;
EXPECT_THAT
(
packet
.
AllocateRawExtension
(
kInvalidId
3
)
testing
:
:
IsEmpty
(
)
)
;
}
}
