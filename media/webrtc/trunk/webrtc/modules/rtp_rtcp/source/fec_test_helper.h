#
ifndef
MODULES_RTP_RTCP_SOURCE_FEC_TEST_HELPER_H_
#
define
MODULES_RTP_RTCP_SOURCE_FEC_TEST_HELPER_H_
#
include
<
memory
>
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
forward_error_correction
.
h
"
#
include
"
rtc_base
/
basictypes
.
h
"
#
include
"
rtc_base
/
random
.
h
"
namespace
webrtc
{
namespace
test
{
namespace
fec
{
struct
AugmentedPacket
:
public
ForwardErrorCorrection
:
:
Packet
{
WebRtcRTPHeader
header
;
}
;
class
MediaPacketGenerator
{
public
:
MediaPacketGenerator
(
uint32_t
min_packet_size
uint32_t
max_packet_size
uint32_t
ssrc
Random
*
random
)
:
min_packet_size_
(
min_packet_size
)
max_packet_size_
(
max_packet_size
)
ssrc_
(
ssrc
)
random_
(
random
)
{
}
ForwardErrorCorrection
:
:
PacketList
ConstructMediaPackets
(
int
num_media_packets
uint16_t
start_seq_num
)
;
ForwardErrorCorrection
:
:
PacketList
ConstructMediaPackets
(
int
num_media_packets
)
;
uint16_t
GetNextSeqNum
(
)
;
private
:
uint32_t
min_packet_size_
;
uint32_t
max_packet_size_
;
uint32_t
ssrc_
;
Random
*
random_
;
ForwardErrorCorrection
:
:
PacketList
media_packets_
;
uint16_t
next_seq_num_
;
}
;
class
AugmentedPacketGenerator
{
public
:
explicit
AugmentedPacketGenerator
(
uint32_t
ssrc
)
;
void
NewFrame
(
size_t
num_packets
)
;
uint16_t
NextPacketSeqNum
(
)
;
std
:
:
unique_ptr
<
AugmentedPacket
>
NextPacket
(
size_t
offset
size_t
length
)
;
protected
:
static
void
WriteRtpHeader
(
const
RTPHeader
&
header
uint8_t
*
data
)
;
size_t
num_packets_
;
private
:
uint32_t
ssrc_
;
uint16_t
seq_num_
;
uint32_t
timestamp_
;
}
;
class
FlexfecPacketGenerator
:
public
AugmentedPacketGenerator
{
public
:
FlexfecPacketGenerator
(
uint32_t
media_ssrc
uint32_t
flexfec_ssrc
)
;
std
:
:
unique_ptr
<
AugmentedPacket
>
BuildFlexfecPacket
(
const
ForwardErrorCorrection
:
:
Packet
&
packet
)
;
private
:
uint32_t
flexfec_ssrc_
;
uint16_t
flexfec_seq_num_
;
uint32_t
flexfec_timestamp_
;
}
;
class
UlpfecPacketGenerator
:
public
AugmentedPacketGenerator
{
public
:
explicit
UlpfecPacketGenerator
(
uint32_t
ssrc
)
;
static
std
:
:
unique_ptr
<
AugmentedPacket
>
BuildMediaRedPacket
(
const
AugmentedPacket
&
packet
)
;
std
:
:
unique_ptr
<
AugmentedPacket
>
BuildUlpfecRedPacket
(
const
ForwardErrorCorrection
:
:
Packet
&
packet
)
;
private
:
static
void
SetRedHeader
(
uint8_t
payload_type
size_t
header_length
AugmentedPacket
*
red_packet
)
;
}
;
}
}
}
#
endif
