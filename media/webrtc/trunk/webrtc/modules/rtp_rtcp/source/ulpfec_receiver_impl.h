#
ifndef
MODULES_RTP_RTCP_SOURCE_ULPFEC_RECEIVER_IMPL_H_
#
define
MODULES_RTP_RTCP_SOURCE_ULPFEC_RECEIVER_IMPL_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
ulpfec_receiver
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
forward_error_correction
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
UlpfecReceiverImpl
:
public
UlpfecReceiver
{
public
:
explicit
UlpfecReceiverImpl
(
uint32_t
ssrc
RecoveredPacketReceiver
*
callback
)
;
virtual
~
UlpfecReceiverImpl
(
)
;
int32_t
AddReceivedRedPacket
(
const
RTPHeader
&
rtp_header
const
uint8_t
*
incoming_rtp_packet
size_t
packet_length
uint8_t
ulpfec_payload_type
)
override
;
int32_t
ProcessReceivedFec
(
)
override
;
FecPacketCounter
GetPacketCounter
(
)
const
override
;
private
:
const
uint32_t
ssrc_
;
rtc
:
:
CriticalSection
crit_sect_
;
RecoveredPacketReceiver
*
recovered_packet_callback_
;
std
:
:
unique_ptr
<
ForwardErrorCorrection
>
fec_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
ForwardErrorCorrection
:
:
ReceivedPacket
>
>
received_packets_
;
ForwardErrorCorrection
:
:
RecoveredPacketList
recovered_packets_
;
FecPacketCounter
packet_counter_
;
}
;
}
#
endif
