#
ifndef
WEBRTC_MODULES_RTP_RTCP_SOURCE_VP8_PARTITION_AGGREGATOR_H_
#
define
WEBRTC_MODULES_RTP_RTCP_SOURCE_VP8_PARTITION_AGGREGATOR_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
PartitionTreeNode
{
public
:
PartitionTreeNode
(
PartitionTreeNode
*
parent
const
size_t
*
size_vector
size_t
num_partitions
size_t
this_size
)
;
static
PartitionTreeNode
*
CreateRootNode
(
const
size_t
*
size_vector
size_t
num_partitions
)
;
~
PartitionTreeNode
(
)
;
int
Cost
(
size_t
penalty
)
;
bool
CreateChildren
(
size_t
max_size
)
;
size_t
NumPackets
(
)
;
PartitionTreeNode
*
GetOptimalNode
(
size_t
max_size
size_t
penalty
)
;
void
set_max_parent_size
(
int
size
)
{
max_parent_size_
=
size
;
}
void
set_min_parent_size
(
int
size
)
{
min_parent_size_
=
size
;
}
PartitionTreeNode
*
parent
(
)
const
{
return
parent_
;
}
PartitionTreeNode
*
left_child
(
)
const
{
return
children_
[
kLeftChild
]
;
}
PartitionTreeNode
*
right_child
(
)
const
{
return
children_
[
kRightChild
]
;
}
size_t
this_size
(
)
const
{
return
this_size_
;
}
bool
packet_start
(
)
const
{
return
packet_start_
;
}
private
:
enum
Children
{
kLeftChild
=
0
kRightChild
=
1
}
;
int
this_size_int
(
)
const
{
return
static_cast
<
int
>
(
this_size_
)
;
}
void
set_packet_start
(
bool
value
)
{
packet_start_
=
value
;
}
PartitionTreeNode
*
parent_
;
PartitionTreeNode
*
children_
[
2
]
;
size_t
this_size_
;
const
size_t
*
size_vector_
;
size_t
num_partitions_
;
int
max_parent_size_
;
int
min_parent_size_
;
bool
packet_start_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
PartitionTreeNode
)
;
}
;
class
Vp8PartitionAggregator
{
public
:
typedef
std
:
:
vector
<
size_t
>
ConfigVec
;
Vp8PartitionAggregator
(
const
RTPFragmentationHeader
&
fragmentation
size_t
first_partition_idx
size_t
last_partition_idx
)
;
~
Vp8PartitionAggregator
(
)
;
void
SetPriorMinMax
(
int
min_size
int
max_size
)
;
ConfigVec
FindOptimalConfiguration
(
size_t
max_size
size_t
penalty
)
;
void
CalcMinMax
(
const
ConfigVec
&
config
int
*
min_size
int
*
max_size
)
const
;
static
size_t
CalcNumberOfFragments
(
size_t
large_partition_size
size_t
max_payload_size
size_t
penalty
int
min_size
int
max_size
)
;
private
:
PartitionTreeNode
*
root_
;
size_t
num_partitions_
;
size_t
*
size_vector_
;
size_t
largest_partition_size_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
Vp8PartitionAggregator
)
;
}
;
}
#
endif
