#
ifndef
WEBRTC_MODULES_RTP_RTCP_SOURCE_H264_BITSTREAM_PARSER_H_
#
define
WEBRTC_MODULES_RTP_RTCP_SOURCE_H264_BITSTREAM_PARSER_H_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
namespace
rtc
{
class
BitBuffer
;
}
namespace
webrtc
{
class
H264BitstreamParser
{
public
:
void
ParseBitstream
(
const
uint8_t
*
bitstream
size_t
length
)
;
bool
GetLastSliceQp
(
int
*
qp
)
const
;
private
:
struct
SpsState
{
SpsState
(
)
;
uint32_t
delta_pic_order_always_zero_flag
=
0
;
uint32_t
separate_colour_plane_flag
=
0
;
uint32_t
frame_mbs_only_flag
=
0
;
uint32_t
log2_max_frame_num_minus4
=
0
;
uint32_t
log2_max_pic_order_cnt_lsb_minus4
=
0
;
uint32_t
pic_order_cnt_type
=
0
;
}
;
struct
PpsState
{
PpsState
(
)
;
bool
bottom_field_pic_order_in_frame_present_flag
=
false
;
bool
weighted_pred_flag
=
false
;
uint32_t
weighted_bipred_idc
=
false
;
uint32_t
redundant_pic_cnt_present_flag
=
0
;
int
pic_init_qp_minus26
=
0
;
}
;
void
ParseSlice
(
const
uint8_t
*
slice
size_t
length
)
;
bool
ParseSpsNalu
(
const
uint8_t
*
sps_nalu
size_t
length
)
;
bool
ParsePpsNalu
(
const
uint8_t
*
pps_nalu
size_t
length
)
;
bool
ParseNonParameterSetNalu
(
const
uint8_t
*
source
size_t
source_length
uint8_t
nalu_type
)
;
bool
sps_parsed_
=
false
;
SpsState
sps_
;
bool
pps_parsed_
=
false
;
PpsState
pps_
;
bool
last_slice_qp_delta_parsed_
=
false
;
int32_t
last_slice_qp_delta_
=
0
;
}
;
}
#
endif
