#
ifndef
WEBRTC_MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_H_
#
define
WEBRTC_MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_H_
#
include
"
webrtc
/
base
/
basictypes
.
h
"
#
include
"
webrtc
/
base
/
buffer
.
h
"
namespace
webrtc
{
namespace
rtcp
{
class
RtcpPacket
{
public
:
class
PacketReadyCallback
{
public
:
virtual
void
OnPacketReady
(
uint8_t
*
data
size_t
length
)
=
0
;
protected
:
PacketReadyCallback
(
)
{
}
virtual
~
PacketReadyCallback
(
)
{
}
}
;
virtual
~
RtcpPacket
(
)
{
}
rtc
:
:
Buffer
Build
(
)
const
;
bool
BuildExternalBuffer
(
uint8_t
*
buffer
size_t
max_length
PacketReadyCallback
*
callback
)
const
;
virtual
size_t
BlockLength
(
)
const
=
0
;
virtual
bool
Create
(
uint8_t
*
packet
size_t
*
index
size_t
max_length
PacketReadyCallback
*
callback
)
const
=
0
;
protected
:
static
constexpr
size_t
kHeaderLength
=
4
;
RtcpPacket
(
)
{
}
static
void
CreateHeader
(
uint8_t
count_or_format
uint8_t
packet_type
size_t
block_length
uint8_t
*
buffer
size_t
*
pos
)
;
bool
OnBufferFull
(
uint8_t
*
packet
size_t
*
index
PacketReadyCallback
*
callback
)
const
;
size_t
HeaderLength
(
)
const
;
}
;
}
}
#
endif
