#
ifndef
MODULES_RTP_RTCP_INCLUDE_RECEIVE_STATISTICS_H_
#
define
MODULES_RTP_RTCP_INCLUDE_RECEIVE_STATISTICS_H_
#
include
<
map
>
#
include
<
vector
>
#
include
"
modules
/
include
/
module
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
modules
/
rtp_rtcp
/
source
/
rtcp_packet
/
report_block
.
h
"
#
include
"
typedefs
.
h
"
namespace
webrtc
{
class
Clock
;
class
ReceiveStatisticsProvider
{
public
:
virtual
~
ReceiveStatisticsProvider
(
)
=
default
;
virtual
std
:
:
vector
<
rtcp
:
:
ReportBlock
>
RtcpReportBlocks
(
size_t
max_blocks
)
=
0
;
}
;
class
StreamStatistician
{
public
:
virtual
~
StreamStatistician
(
)
;
virtual
bool
GetStatistics
(
RtcpStatistics
*
statistics
bool
reset
)
=
0
;
virtual
void
GetDataCounters
(
size_t
*
bytes_received
uint32_t
*
packets_received
)
const
=
0
;
virtual
void
GetReceiveStreamDataCounters
(
StreamDataCounters
*
data_counters
)
const
=
0
;
virtual
uint32_t
BitrateReceived
(
)
const
=
0
;
virtual
bool
IsRetransmitOfOldPacket
(
const
RTPHeader
&
header
int64_t
min_rtt
)
const
=
0
;
virtual
bool
IsPacketInOrder
(
uint16_t
sequence_number
)
const
=
0
;
}
;
class
ReceiveStatistics
:
public
ReceiveStatisticsProvider
{
public
:
~
ReceiveStatistics
(
)
override
=
default
;
static
ReceiveStatistics
*
Create
(
Clock
*
clock
)
;
virtual
void
IncomingPacket
(
const
RTPHeader
&
rtp_header
size_t
packet_length
bool
retransmitted
)
=
0
;
virtual
void
FecPacketReceived
(
const
RTPHeader
&
header
size_t
packet_length
)
=
0
;
virtual
StreamStatistician
*
GetStatistician
(
uint32_t
ssrc
)
const
=
0
;
virtual
void
SetMaxReorderingThreshold
(
int
max_reordering_threshold
)
=
0
;
virtual
void
RegisterRtcpStatisticsCallback
(
RtcpStatisticsCallback
*
callback
)
=
0
;
virtual
void
RegisterRtpStatisticsCallback
(
StreamDataCountersCallback
*
callback
)
=
0
;
}
;
}
#
endif
