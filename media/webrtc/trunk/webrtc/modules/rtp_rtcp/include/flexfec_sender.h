#
ifndef
WEBRTC_MODULES_RTP_RTCP_INCLUDE_FLEXFEC_SENDER_H_
#
define
WEBRTC_MODULES_RTP_RTCP_INCLUDE_FLEXFEC_SENDER_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
basictypes
.
h
"
#
include
"
webrtc
/
base
/
random
.
h
"
#
include
"
webrtc
/
base
/
sequenced_task_checker
.
h
"
#
include
"
webrtc
/
config
.
h
"
#
include
"
webrtc
/
modules
/
include
/
module_common_types
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
flexfec_sender
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_header_extension
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtp_packet_to_send
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
ulpfec_generator
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
clock
.
h
"
namespace
webrtc
{
class
RtpPacketToSend
;
class
FlexfecSender
{
public
:
FlexfecSender
(
int
payload_type
uint32_t
ssrc
uint32_t
protected_media_ssrc
const
std
:
:
vector
<
RtpExtension
>
&
rtp_header_extensions
rtc
:
:
ArrayView
<
const
RtpExtensionSize
>
extension_sizes
Clock
*
clock
)
;
~
FlexfecSender
(
)
;
uint32_t
ssrc
(
)
const
{
return
ssrc_
;
}
void
SetFecParameters
(
const
FecProtectionParams
&
params
)
;
bool
AddRtpPacketAndGenerateFec
(
const
RtpPacketToSend
&
packet
)
;
bool
FecAvailable
(
)
const
;
std
:
:
vector
<
std
:
:
unique_ptr
<
RtpPacketToSend
>
>
GetFecPackets
(
)
;
size_t
MaxPacketOverhead
(
)
const
;
private
:
Clock
*
const
clock_
;
Random
random_
;
int64_t
last_generated_packet_ms_
;
const
int
payload_type_
;
const
uint32_t
timestamp_offset_
;
const
uint32_t
ssrc_
;
const
uint32_t
protected_media_ssrc_
;
uint16_t
seq_num_
;
UlpfecGenerator
ulpfec_generator_
;
const
RtpHeaderExtensionMap
rtp_header_extension_map_
;
const
size_t
header_extensions_size_
;
}
;
}
#
endif
