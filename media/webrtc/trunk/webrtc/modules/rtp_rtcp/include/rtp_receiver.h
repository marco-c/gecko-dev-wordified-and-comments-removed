#
ifndef
WEBRTC_MODULES_RTP_RTCP_INCLUDE_RTP_RECEIVER_H_
#
define
WEBRTC_MODULES_RTP_RTCP_INCLUDE_RTP_RECEIVER_H_
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
struct
CodecInst
;
class
RTPPayloadRegistry
;
class
VideoCodec
;
class
TelephoneEventHandler
{
public
:
virtual
~
TelephoneEventHandler
(
)
{
}
virtual
void
SetTelephoneEventForwardToDecoder
(
bool
forward_to_decoder
)
=
0
;
virtual
bool
TelephoneEventForwardToDecoder
(
)
const
=
0
;
virtual
bool
TelephoneEventPayloadType
(
const
int8_t
payload_type
)
const
=
0
;
}
;
class
RtpReceiver
{
public
:
static
RtpReceiver
*
CreateVideoReceiver
(
Clock
*
clock
RtpData
*
incoming_payload_callback
RtpFeedback
*
incoming_messages_callback
RTPPayloadRegistry
*
rtp_payload_registry
)
;
static
RtpReceiver
*
CreateAudioReceiver
(
Clock
*
clock
RtpData
*
incoming_payload_callback
RtpFeedback
*
incoming_messages_callback
RTPPayloadRegistry
*
rtp_payload_registry
)
;
virtual
~
RtpReceiver
(
)
{
}
virtual
TelephoneEventHandler
*
GetTelephoneEventHandler
(
)
=
0
;
virtual
int32_t
RegisterReceivePayload
(
const
CodecInst
&
audio_codec
)
=
0
;
virtual
int32_t
RegisterReceivePayload
(
const
VideoCodec
&
video_codec
)
=
0
;
virtual
int32_t
DeRegisterReceivePayload
(
const
int8_t
payload_type
)
=
0
;
virtual
bool
IncomingRtpPacket
(
const
RTPHeader
&
rtp_header
const
uint8_t
*
payload
size_t
payload_length
PayloadUnion
payload_specific
bool
in_order
)
=
0
;
virtual
bool
Timestamp
(
uint32_t
*
timestamp
)
const
=
0
;
virtual
bool
LastReceivedTimeMs
(
int64_t
*
receive_time_ms
)
const
=
0
;
virtual
uint32_t
SSRC
(
)
const
=
0
;
virtual
int32_t
CSRCs
(
uint32_t
array_of_csrc
[
kRtpCsrcSize
]
)
const
=
0
;
virtual
int32_t
Energy
(
uint8_t
array_of_energy
[
kRtpCsrcSize
]
)
const
=
0
;
}
;
}
#
endif
