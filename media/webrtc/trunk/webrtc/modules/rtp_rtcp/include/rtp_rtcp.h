#
ifndef
MODULES_RTP_RTCP_INCLUDE_RTP_RTCP_H_
#
define
MODULES_RTP_RTCP_INCLUDE_RTP_RTCP_H_
#
include
<
set
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
api
/
optional
.
h
"
#
include
"
common_types
.
h
"
#
include
"
modules
/
include
/
module
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
flexfec_sender
.
h
"
#
include
"
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
rtc_base
/
deprecation
.
h
"
namespace
webrtc
{
class
OverheadObserver
;
class
RateLimiter
;
class
ReceiveStatisticsProvider
;
class
RemoteBitrateEstimator
;
class
RtcEventLog
;
class
RtpReceiver
;
class
Transport
;
class
VideoBitrateAllocationObserver
;
RTPExtensionType
StringToRtpExtensionType
(
const
std
:
:
string
&
extension
)
;
namespace
rtcp
{
class
TransportFeedback
;
}
class
RtpRtcp
:
public
Module
{
public
:
struct
Configuration
{
Configuration
(
)
;
bool
audio
=
false
;
bool
receiver_only
=
false
;
Clock
*
clock
=
nullptr
;
ReceiveStatisticsProvider
*
receive_statistics
=
nullptr
;
Transport
*
outgoing_transport
=
nullptr
;
RtcpIntraFrameObserver
*
intra_frame_callback
=
nullptr
;
RtcpBandwidthObserver
*
bandwidth_callback
=
nullptr
;
TransportFeedbackObserver
*
transport_feedback_callback
=
nullptr
;
VideoBitrateAllocationObserver
*
bitrate_allocation_observer
=
nullptr
;
RtcpRttStats
*
rtt_stats
=
nullptr
;
RtcpPacketTypeCounterObserver
*
rtcp_packet_type_counter_observer
=
nullptr
;
RemoteBitrateEstimator
*
remote_bitrate_estimator
=
nullptr
;
RtpPacketSender
*
paced_sender
=
nullptr
;
FlexfecSender
*
flexfec_sender
=
nullptr
;
TransportSequenceNumberAllocator
*
transport_sequence_number_allocator
=
nullptr
;
BitrateStatisticsObserver
*
send_bitrate_observer
=
nullptr
;
FrameCountObserver
*
send_frame_count_observer
=
nullptr
;
SendSideDelayObserver
*
send_side_delay_observer
=
nullptr
;
RtcEventLog
*
event_log
=
nullptr
;
SendPacketObserver
*
send_packet_observer
=
nullptr
;
RateLimiter
*
retransmission_rate_limiter
=
nullptr
;
OverheadObserver
*
overhead_observer
=
nullptr
;
RtpKeepAliveConfig
keepalive_config
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
Configuration
)
;
}
;
static
RtpRtcp
*
CreateRtpRtcp
(
const
RtpRtcp
:
:
Configuration
&
configuration
)
;
virtual
void
IncomingRtcpPacket
(
const
uint8_t
*
incoming_packet
size_t
incoming_packet_length
)
=
0
;
virtual
void
SetRemoteSSRC
(
uint32_t
ssrc
)
=
0
;
virtual
void
SetMaxRtpPacketSize
(
size_t
size
)
=
0
;
virtual
size_t
MaxRtpPacketSize
(
)
const
=
0
;
virtual
int32_t
RegisterSendPayload
(
const
CodecInst
&
voice_codec
)
=
0
;
virtual
int32_t
RegisterSendPayload
(
const
VideoCodec
&
video_codec
)
=
0
;
virtual
void
RegisterVideoSendPayload
(
int
payload_type
const
char
*
payload_name
)
=
0
;
virtual
int32_t
DeRegisterSendPayload
(
int8_t
payload_type
)
=
0
;
virtual
int32_t
RegisterSendRtpHeaderExtension
(
RTPExtensionType
type
uint8_t
id
)
=
0
;
virtual
int32_t
DeregisterSendRtpHeaderExtension
(
RTPExtensionType
type
)
=
0
;
virtual
bool
HasBweExtensions
(
)
const
=
0
;
virtual
uint32_t
StartTimestamp
(
)
const
=
0
;
virtual
void
SetStartTimestamp
(
uint32_t
timestamp
)
=
0
;
virtual
uint16_t
SequenceNumber
(
)
const
=
0
;
virtual
void
SetSequenceNumber
(
uint16_t
seq
)
=
0
;
virtual
void
SetRtpState
(
const
RtpState
&
rtp_state
)
=
0
;
virtual
void
SetRtxState
(
const
RtpState
&
rtp_state
)
=
0
;
virtual
RtpState
GetRtpState
(
)
const
=
0
;
virtual
RtpState
GetRtxState
(
)
const
=
0
;
virtual
uint32_t
SSRC
(
)
const
=
0
;
virtual
int32_t
SetRID
(
const
char
*
rid
)
=
0
;
virtual
int32_t
SetMID
(
const
char
*
mid
)
=
0
;
virtual
void
SetSSRC
(
uint32_t
ssrc
)
=
0
;
virtual
void
SetCsrcs
(
const
std
:
:
vector
<
uint32_t
>
&
csrcs
)
=
0
;
virtual
void
SetRtxSendStatus
(
int
modes
)
=
0
;
virtual
int
RtxSendStatus
(
)
const
=
0
;
virtual
void
SetRtxSsrc
(
uint32_t
ssrc
)
=
0
;
virtual
void
SetRtxSendPayloadType
(
int
payload_type
int
associated_payload_type
)
=
0
;
virtual
rtc
:
:
Optional
<
uint32_t
>
FlexfecSsrc
(
)
const
=
0
;
virtual
int32_t
SetSendingStatus
(
bool
sending
)
=
0
;
virtual
bool
Sending
(
)
const
=
0
;
virtual
void
SetSendingMediaStatus
(
bool
sending
)
=
0
;
virtual
bool
SendingMedia
(
)
const
=
0
;
virtual
void
BitrateSent
(
uint32_t
*
total_rate
uint32_t
*
video_rate
uint32_t
*
fec_rate
uint32_t
*
nack_rate
)
const
=
0
;
virtual
bool
SendOutgoingData
(
FrameType
frame_type
int8_t
payload_type
uint32_t
timestamp
int64_t
capture_time_ms
const
uint8_t
*
payload_data
size_t
payload_size
const
RTPFragmentationHeader
*
fragmentation
const
RTPVideoHeader
*
rtp_video_header
uint32_t
*
transport_frame_id_out
)
=
0
;
virtual
bool
TimeToSendPacket
(
uint32_t
ssrc
uint16_t
sequence_number
int64_t
capture_time_ms
bool
retransmission
const
PacedPacketInfo
&
pacing_info
)
=
0
;
virtual
size_t
TimeToSendPadding
(
size_t
bytes
const
PacedPacketInfo
&
pacing_info
)
=
0
;
virtual
void
RegisterSendChannelRtpStatisticsCallback
(
StreamDataCountersCallback
*
callback
)
=
0
;
virtual
StreamDataCountersCallback
*
GetSendChannelRtpStatisticsCallback
(
)
const
=
0
;
virtual
RtcpMode
RTCP
(
)
const
=
0
;
virtual
void
SetRTCPStatus
(
RtcpMode
method
)
=
0
;
virtual
int32_t
SetCNAME
(
const
char
*
cname
)
=
0
;
virtual
int32_t
RemoteCNAME
(
uint32_t
remote_ssrc
char
cname
[
RTCP_CNAME_SIZE
]
)
const
=
0
;
virtual
int32_t
RemoteNTP
(
uint32_t
*
received_ntp_secs
uint32_t
*
received_ntp_frac
uint32_t
*
rtcp_arrival_time_secs
uint32_t
*
rtcp_arrival_time_frac
uint32_t
*
rtcp_timestamp
)
const
=
0
;
virtual
int32_t
AddMixedCNAME
(
uint32_t
ssrc
const
char
*
cname
)
=
0
;
virtual
int32_t
RemoveMixedCNAME
(
uint32_t
ssrc
)
=
0
;
virtual
int32_t
RTT
(
uint32_t
remote_ssrc
int64_t
*
rtt
int64_t
*
avg_rtt
int64_t
*
min_rtt
int64_t
*
max_rtt
)
const
=
0
;
virtual
int32_t
SendRTCP
(
RTCPPacketType
rtcp_packet_type
)
=
0
;
virtual
int32_t
SendCompoundRTCP
(
const
std
:
:
set
<
RTCPPacketType
>
&
rtcp_packet_types
)
=
0
;
virtual
int32_t
DataCountersRTP
(
size_t
*
bytes_sent
uint32_t
*
packets_sent
)
const
=
0
;
virtual
void
GetSendStreamDataCounters
(
StreamDataCounters
*
rtp_counters
StreamDataCounters
*
rtx_counters
)
const
=
0
;
virtual
void
GetRtpPacketLossStats
(
bool
outgoing
uint32_t
ssrc
struct
RtpPacketLossStats
*
loss_stats
)
const
=
0
;
virtual
int32_t
RemoteRTCPStat
(
std
:
:
vector
<
RTCPReportBlock
>
*
receive_blocks
)
const
=
0
;
virtual
int32_t
SetRTCPApplicationSpecificData
(
uint8_t
sub_type
uint32_t
name
const
uint8_t
*
data
uint16_t
length
)
=
0
;
virtual
int32_t
SetRTCPVoIPMetrics
(
const
RTCPVoIPMetric
*
VoIPMetric
)
=
0
;
virtual
void
SetRtcpXrRrtrStatus
(
bool
enable
)
=
0
;
virtual
bool
RtcpXrRrtrStatus
(
)
const
=
0
;
virtual
void
SetRemb
(
uint32_t
bitrate_bps
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
)
=
0
;
virtual
void
UnsetRemb
(
)
=
0
;
virtual
bool
TMMBR
(
)
const
=
0
;
virtual
void
SetTMMBRStatus
(
bool
enable
)
=
0
;
virtual
int
SelectiveRetransmissions
(
)
const
=
0
;
virtual
int
SetSelectiveRetransmissions
(
uint8_t
settings
)
=
0
;
virtual
int32_t
SendNACK
(
const
uint16_t
*
nack_list
uint16_t
size
)
=
0
;
virtual
void
SendNack
(
const
std
:
:
vector
<
uint16_t
>
&
sequence_numbers
)
=
0
;
virtual
void
SetStorePacketsStatus
(
bool
enable
uint16_t
numberToStore
)
=
0
;
virtual
bool
StorePackets
(
)
const
=
0
;
virtual
void
RegisterRtcpStatisticsCallback
(
RtcpStatisticsCallback
*
callback
)
=
0
;
virtual
RtcpStatisticsCallback
*
GetRtcpStatisticsCallback
(
)
=
0
;
virtual
bool
SendFeedbackPacket
(
const
rtcp
:
:
TransportFeedback
&
packet
)
=
0
;
virtual
void
SetVideoBitrateAllocation
(
const
BitrateAllocation
&
bitrate
)
=
0
;
virtual
int32_t
SendTelephoneEventOutband
(
uint8_t
key
uint16_t
time_ms
uint8_t
level
)
=
0
;
virtual
int32_t
SetAudioLevel
(
uint8_t
level_dbov
)
=
0
;
virtual
void
SetUlpfecConfig
(
int
red_payload_type
int
ulpfec_payload_type
)
=
0
;
virtual
bool
SetFecParameters
(
const
FecProtectionParams
&
delta_params
const
FecProtectionParams
&
key_params
)
=
0
;
RTC_DEPRECATED
int32_t
SetFecParameters
(
const
FecProtectionParams
*
delta_params
const
FecProtectionParams
*
key_params
)
;
virtual
int32_t
SetKeyFrameRequestMethod
(
KeyFrameRequestMethod
method
)
=
0
;
virtual
int32_t
RequestKeyFrame
(
)
=
0
;
}
;
}
#
endif
