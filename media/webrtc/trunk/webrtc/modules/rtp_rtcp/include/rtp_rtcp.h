#
ifndef
WEBRTC_MODULES_RTP_RTCP_INCLUDE_RTP_RTCP_H_
#
define
WEBRTC_MODULES_RTP_RTCP_INCLUDE_RTP_RTCP_H_
#
include
<
set
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
webrtc
/
modules
/
include
/
module
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
namespace
webrtc
{
class
ReceiveStatistics
;
class
RemoteBitrateEstimator
;
class
RtpReceiver
;
class
Transport
;
namespace
rtcp
{
class
TransportFeedback
;
}
class
RtpRtcp
:
public
Module
{
public
:
struct
Configuration
{
Configuration
(
)
;
bool
audio
;
bool
receiver_only
;
Clock
*
clock
;
ReceiveStatistics
*
receive_statistics
;
Transport
*
outgoing_transport
;
RtcpIntraFrameObserver
*
intra_frame_callback
;
RtcpBandwidthObserver
*
bandwidth_callback
;
TransportFeedbackObserver
*
transport_feedback_callback
;
RtcpRttStats
*
rtt_stats
;
RtcpPacketTypeCounterObserver
*
rtcp_packet_type_counter_observer
;
RtpAudioFeedback
*
audio_messages
;
RemoteBitrateEstimator
*
remote_bitrate_estimator
;
RtpPacketSender
*
paced_sender
;
TransportSequenceNumberAllocator
*
transport_sequence_number_allocator
;
BitrateStatisticsObserver
*
send_bitrate_observer
;
FrameCountObserver
*
send_frame_count_observer
;
SendSideDelayObserver
*
send_side_delay_observer
;
}
;
static
RtpRtcp
*
CreateRtpRtcp
(
const
RtpRtcp
:
:
Configuration
&
configuration
)
;
virtual
int32_t
IncomingRtcpPacket
(
const
uint8_t
*
incoming_packet
size_t
incoming_packet_length
)
=
0
;
virtual
void
SetRemoteSSRC
(
uint32_t
ssrc
)
=
0
;
virtual
int32_t
SetMaxTransferUnit
(
uint16_t
size
)
=
0
;
virtual
int32_t
SetTransportOverhead
(
bool
TCP
bool
IPV6
uint8_t
authenticationOverhead
=
0
)
=
0
;
virtual
uint16_t
MaxPayloadLength
(
)
const
=
0
;
virtual
uint16_t
MaxDataPayloadLength
(
)
const
=
0
;
virtual
int32_t
RegisterSendPayload
(
const
CodecInst
&
voiceCodec
)
=
0
;
virtual
int32_t
RegisterSendPayload
(
const
VideoCodec
&
videoCodec
)
=
0
;
virtual
int32_t
DeRegisterSendPayload
(
int8_t
payloadType
)
=
0
;
virtual
int32_t
RegisterSendRtpHeaderExtension
(
RTPExtensionType
type
uint8_t
id
)
=
0
;
virtual
int32_t
DeregisterSendRtpHeaderExtension
(
RTPExtensionType
type
)
=
0
;
virtual
uint32_t
StartTimestamp
(
)
const
=
0
;
virtual
void
SetStartTimestamp
(
uint32_t
timestamp
)
=
0
;
virtual
uint16_t
SequenceNumber
(
)
const
=
0
;
virtual
void
SetSequenceNumber
(
uint16_t
seq
)
=
0
;
virtual
bool
SetRtpStateForSsrc
(
uint32_t
ssrc
const
RtpState
&
rtp_state
)
=
0
;
virtual
bool
GetRtpStateForSsrc
(
uint32_t
ssrc
RtpState
*
rtp_state
)
=
0
;
virtual
uint32_t
SSRC
(
)
const
=
0
;
virtual
void
SetSSRC
(
uint32_t
ssrc
)
=
0
;
virtual
int32_t
SetRID
(
const
char
*
rid
)
=
0
;
virtual
void
SetCsrcs
(
const
std
:
:
vector
<
uint32_t
>
&
csrcs
)
=
0
;
virtual
void
SetRtxSendStatus
(
int
modes
)
=
0
;
virtual
int
RtxSendStatus
(
)
const
=
0
;
virtual
void
SetRtxSsrc
(
uint32_t
ssrc
)
=
0
;
virtual
void
SetRtxSendPayloadType
(
int
payload_type
int
associated_payload_type
)
=
0
;
virtual
std
:
:
pair
<
int
int
>
RtxSendPayloadType
(
)
const
=
0
;
virtual
int32_t
SetSendingStatus
(
bool
sending
)
=
0
;
virtual
bool
Sending
(
)
const
=
0
;
virtual
void
SetSendingMediaStatus
(
bool
sending
)
=
0
;
virtual
bool
SendingMedia
(
)
const
=
0
;
virtual
void
BitrateSent
(
uint32_t
*
totalRate
uint32_t
*
videoRate
uint32_t
*
fecRate
uint32_t
*
nackRate
)
const
=
0
;
virtual
int32_t
SendOutgoingData
(
FrameType
frameType
int8_t
payloadType
uint32_t
timeStamp
int64_t
capture_time_ms
const
uint8_t
*
payloadData
size_t
payloadSize
const
RTPFragmentationHeader
*
fragmentation
=
NULL
const
RTPVideoHeader
*
rtpVideoHdr
=
NULL
)
=
0
;
virtual
bool
TimeToSendPacket
(
uint32_t
ssrc
uint16_t
sequence_number
int64_t
capture_time_ms
bool
retransmission
)
=
0
;
virtual
size_t
TimeToSendPadding
(
size_t
bytes
)
=
0
;
virtual
void
RegisterSendChannelRtpStatisticsCallback
(
StreamDataCountersCallback
*
callback
)
=
0
;
virtual
StreamDataCountersCallback
*
GetSendChannelRtpStatisticsCallback
(
)
const
=
0
;
virtual
RtcpMode
RTCP
(
)
const
=
0
;
virtual
void
SetRTCPStatus
(
RtcpMode
method
)
=
0
;
virtual
int32_t
SetCNAME
(
const
char
*
c_name
)
=
0
;
virtual
int32_t
RemoteCNAME
(
uint32_t
remoteSSRC
char
cName
[
RTCP_CNAME_SIZE
]
)
const
=
0
;
virtual
int32_t
RemoteNTP
(
uint32_t
*
ReceivedNTPsecs
uint32_t
*
ReceivedNTPfrac
uint32_t
*
RTCPArrivalTimeSecs
uint32_t
*
RTCPArrivalTimeFrac
uint32_t
*
rtcp_timestamp
)
const
=
0
;
virtual
int32_t
AddMixedCNAME
(
uint32_t
SSRC
const
char
*
c_name
)
=
0
;
virtual
int32_t
RemoveMixedCNAME
(
uint32_t
SSRC
)
=
0
;
virtual
int32_t
RTT
(
uint32_t
remoteSSRC
int64_t
*
RTT
int64_t
*
avgRTT
int64_t
*
minRTT
int64_t
*
maxRTT
)
const
=
0
;
virtual
int32_t
GetReportBlockInfo
(
const
uint32_t
remote_ssrc
uint32_t
*
ntp_high
uint32_t
*
ntp_low
uint32_t
*
packets_received
uint64_t
*
octets_received
)
const
=
0
;
virtual
int32_t
SendRTCP
(
RTCPPacketType
rtcpPacketType
)
=
0
;
virtual
int32_t
SendCompoundRTCP
(
const
std
:
:
set
<
RTCPPacketType
>
&
rtcpPacketTypes
)
=
0
;
virtual
int32_t
SendRTCPReferencePictureSelection
(
const
uint64_t
pictureID
)
=
0
;
virtual
int32_t
SendRTCPSliceLossIndication
(
uint8_t
pictureID
)
=
0
;
virtual
int32_t
DataCountersRTP
(
size_t
*
bytesSent
uint32_t
*
packetsSent
)
const
=
0
;
virtual
void
GetSendStreamDataCounters
(
StreamDataCounters
*
rtp_counters
StreamDataCounters
*
rtx_counters
)
const
=
0
;
virtual
void
GetRtpPacketLossStats
(
bool
outgoing
uint32_t
ssrc
struct
RtpPacketLossStats
*
loss_stats
)
const
=
0
;
virtual
int32_t
RemoteRTCPStat
(
RTCPSenderInfo
*
senderInfo
)
=
0
;
virtual
int32_t
RemoteRTCPStat
(
std
:
:
vector
<
RTCPReportBlock
>
*
receiveBlocks
)
const
=
0
;
virtual
int32_t
SetRTCPApplicationSpecificData
(
uint8_t
subType
uint32_t
name
const
uint8_t
*
data
uint16_t
length
)
=
0
;
virtual
int32_t
SetRTCPVoIPMetrics
(
const
RTCPVoIPMetric
*
VoIPMetric
)
=
0
;
virtual
void
SetRtcpXrRrtrStatus
(
bool
enable
)
=
0
;
virtual
bool
RtcpXrRrtrStatus
(
)
const
=
0
;
virtual
bool
REMB
(
)
const
=
0
;
virtual
void
SetREMBStatus
(
bool
enable
)
=
0
;
virtual
void
SetREMBData
(
uint32_t
bitrate
const
std
:
:
vector
<
uint32_t
>
&
ssrcs
)
=
0
;
virtual
bool
TMMBR
(
)
const
=
0
;
virtual
void
SetTMMBRStatus
(
bool
enable
)
=
0
;
virtual
int
SelectiveRetransmissions
(
)
const
=
0
;
virtual
int
SetSelectiveRetransmissions
(
uint8_t
settings
)
=
0
;
virtual
int32_t
SendNACK
(
const
uint16_t
*
nackList
uint16_t
size
)
=
0
;
virtual
void
SetStorePacketsStatus
(
bool
enable
uint16_t
numberToStore
)
=
0
;
virtual
bool
StorePackets
(
)
const
=
0
;
virtual
void
RegisterRtcpStatisticsCallback
(
RtcpStatisticsCallback
*
callback
)
=
0
;
virtual
RtcpStatisticsCallback
*
GetRtcpStatisticsCallback
(
)
=
0
;
virtual
bool
SendFeedbackPacket
(
const
rtcp
:
:
TransportFeedback
&
packet
)
=
0
;
virtual
int32_t
SetAudioPacketSize
(
uint16_t
packetSizeSamples
)
=
0
;
virtual
int32_t
SendTelephoneEventOutband
(
uint8_t
key
uint16_t
time_ms
uint8_t
level
)
=
0
;
virtual
int32_t
SetSendREDPayloadType
(
int8_t
payloadType
)
=
0
;
int32_t
SendREDPayloadType
(
int8_t
&
payloadType
)
const
{
return
SendREDPayloadType
(
&
payloadType
)
;
}
virtual
int32_t
SendREDPayloadType
(
int8_t
*
payload_type
)
const
=
0
;
virtual
int32_t
SetAudioLevel
(
uint8_t
level_dBov
)
=
0
;
virtual
void
SetTargetSendBitrate
(
uint32_t
bitrate_bps
)
=
0
;
virtual
void
SetGenericFECStatus
(
bool
enable
uint8_t
payload_type_red
uint8_t
payload_type_fec
)
=
0
;
void
GenericFECStatus
(
bool
&
enable
uint8_t
&
payloadTypeRED
uint8_t
&
payloadTypeFEC
)
{
GenericFECStatus
(
&
enable
&
payloadTypeRED
&
payloadTypeFEC
)
;
}
virtual
void
GenericFECStatus
(
bool
*
enable
uint8_t
*
payload_type_red
uint8_t
*
payload_type_fec
)
=
0
;
virtual
int32_t
SetFecParameters
(
const
FecProtectionParams
*
delta_params
const
FecProtectionParams
*
key_params
)
=
0
;
virtual
int32_t
SetKeyFrameRequestMethod
(
KeyFrameRequestMethod
method
)
=
0
;
virtual
int32_t
RequestKeyFrame
(
)
=
0
;
}
;
}
#
endif
