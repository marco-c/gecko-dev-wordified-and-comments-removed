#
ifndef
WEBRTC_MODULES_AUDIO_PROCESSING_SPLITTING_FILTER_H_
#
define
WEBRTC_MODULES_AUDIO_PROCESSING_SPLITTING_FILTER_H_
#
include
<
string
.
h
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
common_audio
/
resampler
/
push_sinc_resampler
.
h
"
#
include
"
webrtc
/
system_wrappers
/
interface
/
scoped_vector
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
IFChannelBuffer
;
enum
{
kSamplesPer8kHzChannel
=
80
kSamplesPer16kHzChannel
=
160
kSamplesPer32kHzChannel
=
320
kSamplesPer48kHzChannel
=
480
kSamplesPer64kHzChannel
=
640
}
;
struct
TwoBandsStates
{
TwoBandsStates
(
)
{
memset
(
analysis_state1
0
sizeof
(
analysis_state1
)
)
;
memset
(
analysis_state2
0
sizeof
(
analysis_state2
)
)
;
memset
(
synthesis_state1
0
sizeof
(
synthesis_state1
)
)
;
memset
(
synthesis_state2
0
sizeof
(
synthesis_state2
)
)
;
}
static
const
int
kStateSize
=
6
;
int
analysis_state1
[
kStateSize
]
;
int
analysis_state2
[
kStateSize
]
;
int
synthesis_state1
[
kStateSize
]
;
int
synthesis_state2
[
kStateSize
]
;
}
;
class
SplittingFilter
{
public
:
SplittingFilter
(
int
channels
)
;
void
Analysis
(
const
IFChannelBuffer
*
data
IFChannelBuffer
*
bands
)
;
void
Synthesis
(
const
IFChannelBuffer
*
bands
IFChannelBuffer
*
data
)
;
private
:
void
TwoBandsAnalysis
(
const
IFChannelBuffer
*
data
IFChannelBuffer
*
bands
)
;
void
TwoBandsSynthesis
(
const
IFChannelBuffer
*
bands
IFChannelBuffer
*
data
)
;
void
ThreeBandsAnalysis
(
const
IFChannelBuffer
*
data
IFChannelBuffer
*
bands
)
;
void
ThreeBandsSynthesis
(
const
IFChannelBuffer
*
bands
IFChannelBuffer
*
data
)
;
void
InitBuffers
(
)
;
int
channels_
;
rtc
:
:
scoped_ptr
<
TwoBandsStates
[
]
>
two_bands_states_
;
rtc
:
:
scoped_ptr
<
TwoBandsStates
[
]
>
band1_states_
;
rtc
:
:
scoped_ptr
<
TwoBandsStates
[
]
>
band2_states_
;
ScopedVector
<
PushSincResampler
>
analysis_resamplers_
;
ScopedVector
<
PushSincResampler
>
synthesis_resamplers_
;
rtc
:
:
scoped_ptr
<
int16_t
[
]
>
int_buffer_
;
}
;
}
#
endif
