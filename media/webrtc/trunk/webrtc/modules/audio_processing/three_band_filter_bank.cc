#
define
_USE_MATH_DEFINES
#
include
"
webrtc
/
modules
/
audio_processing
/
three_band_filter_bank
.
h
"
#
include
<
cmath
>
#
include
"
webrtc
/
base
/
checks
.
h
"
namespace
webrtc
{
namespace
{
const
size_t
kNumBands
=
3
;
const
size_t
kSparsity
=
4
;
const
size_t
kNumCoeffs
=
4
;
const
float
kLowpassCoeffs
[
kNumBands
*
kSparsity
]
[
kNumCoeffs
]
=
{
{
-
0
.
00047749f
-
0
.
00496888f
+
0
.
16547118f
+
0
.
00425496f
}
{
-
0
.
00173287f
-
0
.
01585778f
+
0
.
14989004f
+
0
.
00994113f
}
{
-
0
.
00304815f
-
0
.
02536082f
+
0
.
12154542f
+
0
.
01157993f
}
{
-
0
.
00383509f
-
0
.
02982767f
+
0
.
08543175f
+
0
.
00983212f
}
{
-
0
.
00346946f
-
0
.
02587886f
+
0
.
04760441f
+
0
.
00607594f
}
{
-
0
.
00154717f
-
0
.
01136076f
+
0
.
01387458f
+
0
.
00186353f
}
{
+
0
.
00186353f
+
0
.
01387458f
-
0
.
01136076f
-
0
.
00154717f
}
{
+
0
.
00607594f
+
0
.
04760441f
-
0
.
02587886f
-
0
.
00346946f
}
{
+
0
.
00983212f
+
0
.
08543175f
-
0
.
02982767f
-
0
.
00383509f
}
{
+
0
.
01157993f
+
0
.
12154542f
-
0
.
02536082f
-
0
.
00304815f
}
{
+
0
.
00994113f
+
0
.
14989004f
-
0
.
01585778f
-
0
.
00173287f
}
{
+
0
.
00425496f
+
0
.
16547118f
-
0
.
00496888f
-
0
.
00047749f
}
}
;
void
Downsample
(
const
float
*
in
size_t
split_length
size_t
offset
float
*
out
)
{
for
(
size_t
i
=
0
;
i
<
split_length
;
+
+
i
)
{
out
[
i
]
=
in
[
kNumBands
*
i
+
offset
]
;
}
}
void
Upsample
(
const
float
*
in
size_t
split_length
size_t
offset
float
*
out
)
{
for
(
size_t
i
=
0
;
i
<
split_length
;
+
+
i
)
{
out
[
kNumBands
*
i
+
offset
]
+
=
kNumBands
*
in
[
i
]
;
}
}
}
ThreeBandFilterBank
:
:
ThreeBandFilterBank
(
size_t
length
)
:
in_buffer_
(
rtc
:
:
CheckedDivExact
(
length
kNumBands
)
)
out_buffer_
(
in_buffer_
.
size
(
)
)
{
for
(
size_t
i
=
0
;
i
<
kSparsity
;
+
+
i
)
{
for
(
size_t
j
=
0
;
j
<
kNumBands
;
+
+
j
)
{
analysis_filters_
.
push_back
(
std
:
:
unique_ptr
<
SparseFIRFilter
>
(
new
SparseFIRFilter
(
kLowpassCoeffs
[
i
*
kNumBands
+
j
]
kNumCoeffs
kSparsity
i
)
)
)
;
synthesis_filters_
.
push_back
(
std
:
:
unique_ptr
<
SparseFIRFilter
>
(
new
SparseFIRFilter
(
kLowpassCoeffs
[
i
*
kNumBands
+
j
]
kNumCoeffs
kSparsity
i
)
)
)
;
}
}
dct_modulation_
.
resize
(
kNumBands
*
kSparsity
)
;
for
(
size_t
i
=
0
;
i
<
dct_modulation_
.
size
(
)
;
+
+
i
)
{
dct_modulation_
[
i
]
.
resize
(
kNumBands
)
;
for
(
size_t
j
=
0
;
j
<
kNumBands
;
+
+
j
)
{
dct_modulation_
[
i
]
[
j
]
=
2
.
f
*
cos
(
2
.
f
*
M_PI
*
i
*
(
2
.
f
*
j
+
1
.
f
)
/
dct_modulation_
.
size
(
)
)
;
}
}
}
ThreeBandFilterBank
:
:
~
ThreeBandFilterBank
(
)
=
default
;
void
ThreeBandFilterBank
:
:
Analysis
(
const
float
*
in
size_t
length
float
*
const
*
out
)
{
RTC_CHECK_EQ
(
in_buffer_
.
size
(
)
rtc
:
:
CheckedDivExact
(
length
kNumBands
)
)
;
for
(
size_t
i
=
0
;
i
<
kNumBands
;
+
+
i
)
{
memset
(
out
[
i
]
0
in_buffer_
.
size
(
)
*
sizeof
(
*
out
[
i
]
)
)
;
}
for
(
size_t
i
=
0
;
i
<
kNumBands
;
+
+
i
)
{
Downsample
(
in
in_buffer_
.
size
(
)
kNumBands
-
i
-
1
&
in_buffer_
[
0
]
)
;
for
(
size_t
j
=
0
;
j
<
kSparsity
;
+
+
j
)
{
const
size_t
offset
=
i
+
j
*
kNumBands
;
analysis_filters_
[
offset
]
-
>
Filter
(
&
in_buffer_
[
0
]
in_buffer_
.
size
(
)
&
out_buffer_
[
0
]
)
;
DownModulate
(
&
out_buffer_
[
0
]
out_buffer_
.
size
(
)
offset
out
)
;
}
}
}
void
ThreeBandFilterBank
:
:
Synthesis
(
const
float
*
const
*
in
size_t
split_length
float
*
out
)
{
RTC_CHECK_EQ
(
in_buffer_
.
size
(
)
split_length
)
;
memset
(
out
0
kNumBands
*
in_buffer_
.
size
(
)
*
sizeof
(
*
out
)
)
;
for
(
size_t
i
=
0
;
i
<
kNumBands
;
+
+
i
)
{
for
(
size_t
j
=
0
;
j
<
kSparsity
;
+
+
j
)
{
const
size_t
offset
=
i
+
j
*
kNumBands
;
UpModulate
(
in
in_buffer_
.
size
(
)
offset
&
in_buffer_
[
0
]
)
;
synthesis_filters_
[
offset
]
-
>
Filter
(
&
in_buffer_
[
0
]
in_buffer_
.
size
(
)
&
out_buffer_
[
0
]
)
;
Upsample
(
&
out_buffer_
[
0
]
out_buffer_
.
size
(
)
i
out
)
;
}
}
}
void
ThreeBandFilterBank
:
:
DownModulate
(
const
float
*
in
size_t
split_length
size_t
offset
float
*
const
*
out
)
{
for
(
size_t
i
=
0
;
i
<
kNumBands
;
+
+
i
)
{
for
(
size_t
j
=
0
;
j
<
split_length
;
+
+
j
)
{
out
[
i
]
[
j
]
+
=
dct_modulation_
[
offset
]
[
i
]
*
in
[
j
]
;
}
}
}
void
ThreeBandFilterBank
:
:
UpModulate
(
const
float
*
const
*
in
size_t
split_length
size_t
offset
float
*
out
)
{
memset
(
out
0
split_length
*
sizeof
(
*
out
)
)
;
for
(
size_t
i
=
0
;
i
<
kNumBands
;
+
+
i
)
{
for
(
size_t
j
=
0
;
j
<
split_length
;
+
+
j
)
{
out
[
j
]
+
=
dct_modulation_
[
offset
]
[
i
]
*
in
[
i
]
[
j
]
;
}
}
}
}
