#
ifndef
MODULES_AUDIO_PROCESSING_INTELLIGIBILITY_INTELLIGIBILITY_UTILS_H_
#
define
MODULES_AUDIO_PROCESSING_INTELLIGIBILITY_INTELLIGIBILITY_UTILS_H_
#
include
<
complex
>
#
include
<
vector
>
namespace
webrtc
{
namespace
intelligibility
{
template
<
typename
T
>
class
PowerEstimator
{
public
:
PowerEstimator
(
size_t
freqs
float
decay
)
;
void
Step
(
const
T
*
data
)
;
const
std
:
:
vector
<
float
>
&
power
(
)
{
return
power_
;
}
;
private
:
std
:
:
vector
<
float
>
power_
;
const
float
decay_
;
}
;
class
GainApplier
{
public
:
GainApplier
(
size_t
freqs
float
relative_change_limit
)
;
~
GainApplier
(
)
;
void
Apply
(
const
std
:
:
complex
<
float
>
*
in_block
std
:
:
complex
<
float
>
*
out_block
)
;
float
*
target
(
)
{
return
target_
.
data
(
)
;
}
private
:
const
size_t
num_freqs_
;
const
float
relative_change_limit_
;
std
:
:
vector
<
float
>
target_
;
std
:
:
vector
<
float
>
current_
;
}
;
class
DelayBuffer
{
public
:
DelayBuffer
(
size_t
delay
size_t
num_channels
)
;
~
DelayBuffer
(
)
;
void
Delay
(
float
*
const
*
data
size_t
length
)
;
private
:
std
:
:
vector
<
std
:
:
vector
<
float
>
>
buffer_
;
size_t
read_index_
;
}
;
}
}
#
endif
