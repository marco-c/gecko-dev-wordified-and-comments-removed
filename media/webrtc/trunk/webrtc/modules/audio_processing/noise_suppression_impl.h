#
ifndef
MODULES_AUDIO_PROCESSING_NOISE_SUPPRESSION_IMPL_H_
#
define
MODULES_AUDIO_PROCESSING_NOISE_SUPPRESSION_IMPL_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
namespace
webrtc
{
class
AudioBuffer
;
class
NoiseSuppressionImpl
:
public
NoiseSuppression
{
public
:
explicit
NoiseSuppressionImpl
(
rtc
:
:
CriticalSection
*
crit
)
;
~
NoiseSuppressionImpl
(
)
override
;
void
Initialize
(
size_t
channels
int
sample_rate_hz
)
;
void
AnalyzeCaptureAudio
(
AudioBuffer
*
audio
)
;
void
ProcessCaptureAudio
(
AudioBuffer
*
audio
)
;
int
Enable
(
bool
enable
)
override
;
bool
is_enabled
(
)
const
override
;
int
set_level
(
Level
level
)
override
;
Level
level
(
)
const
override
;
float
speech_probability
(
)
const
override
;
std
:
:
vector
<
float
>
NoiseEstimate
(
)
override
;
static
size_t
num_noise_bins
(
)
;
private
:
class
Suppressor
;
rtc
:
:
CriticalSection
*
const
crit_
;
bool
enabled_
RTC_GUARDED_BY
(
crit_
)
=
false
;
Level
level_
RTC_GUARDED_BY
(
crit_
)
=
kModerate
;
size_t
channels_
RTC_GUARDED_BY
(
crit_
)
=
0
;
int
sample_rate_hz_
RTC_GUARDED_BY
(
crit_
)
=
0
;
std
:
:
vector
<
std
:
:
unique_ptr
<
Suppressor
>
>
suppressors_
RTC_GUARDED_BY
(
crit_
)
;
RTC_DISALLOW_IMPLICIT_CONSTRUCTORS
(
NoiseSuppressionImpl
)
;
}
;
}
#
endif
