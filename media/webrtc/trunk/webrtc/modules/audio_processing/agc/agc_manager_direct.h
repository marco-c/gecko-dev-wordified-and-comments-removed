#
ifndef
MODULES_AUDIO_PROCESSING_AGC_AGC_MANAGER_DIRECT_H_
#
define
MODULES_AUDIO_PROCESSING_AGC_AGC_MANAGER_DIRECT_H_
#
include
<
memory
>
#
include
"
modules
/
audio_processing
/
agc
/
agc
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
webrtc
{
class
AudioFrame
;
class
DebugFile
;
class
GainControl
;
class
VolumeCallbacks
{
public
:
virtual
~
VolumeCallbacks
(
)
{
}
virtual
void
SetMicVolume
(
int
volume
)
=
0
;
virtual
int
GetMicVolume
(
)
=
0
;
}
;
class
AgcManagerDirect
final
{
public
:
AgcManagerDirect
(
GainControl
*
gctrl
VolumeCallbacks
*
volume_callbacks
int
startup_min_level
int
clipped_level_min
)
;
AgcManagerDirect
(
Agc
*
agc
GainControl
*
gctrl
VolumeCallbacks
*
volume_callbacks
int
startup_min_level
int
clipped_level_min
)
;
~
AgcManagerDirect
(
)
;
int
Initialize
(
)
;
void
AnalyzePreProcess
(
int16_t
*
audio
int
num_channels
size_t
samples_per_channel
)
;
void
Process
(
const
int16_t
*
audio
size_t
length
int
sample_rate_hz
)
;
void
SetCaptureMuted
(
bool
muted
)
;
bool
capture_muted
(
)
{
return
capture_muted_
;
}
float
voice_probability
(
)
;
private
:
void
SetLevel
(
int
new_level
)
;
void
SetMaxLevel
(
int
level
)
;
int
CheckVolumeAndReset
(
)
;
void
UpdateGain
(
)
;
void
UpdateCompressor
(
)
;
std
:
:
unique_ptr
<
Agc
>
agc_
;
GainControl
*
gctrl_
;
VolumeCallbacks
*
volume_callbacks_
;
int
frames_since_clipped_
;
int
level_
;
int
max_level_
;
int
max_compression_gain_
;
int
target_compression_
;
int
compression_
;
float
compression_accumulator_
;
bool
capture_muted_
;
bool
check_volume_on_next_process_
;
bool
startup_
;
int
startup_min_level_
;
const
int
clipped_level_min_
;
std
:
:
unique_ptr
<
DebugFile
>
file_preproc_
;
std
:
:
unique_ptr
<
DebugFile
>
file_postproc_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
AgcManagerDirect
)
;
}
;
}
#
endif
