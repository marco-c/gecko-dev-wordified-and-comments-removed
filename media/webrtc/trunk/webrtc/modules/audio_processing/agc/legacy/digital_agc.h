#
ifndef
MODULES_AUDIO_PROCESSING_AGC_LEGACY_DIGITAL_AGC_H_
#
define
MODULES_AUDIO_PROCESSING_AGC_LEGACY_DIGITAL_AGC_H_
#
ifdef
WEBRTC_AGC_DEBUG_DUMP
#
include
<
stdio
.
h
>
#
endif
#
include
"
common_audio
/
signal_processing
/
include
/
signal_processing_library
.
h
"
#
include
"
typedefs
.
h
"
#
define
AGC_MUL32
(
A
B
)
(
(
(
B
)
>
>
13
)
*
(
A
)
+
(
(
(
0x00001FFF
&
(
B
)
)
*
(
A
)
)
>
>
13
)
)
#
define
AGC_SCALEDIFF32
(
A
B
C
)
\
(
(
C
)
+
(
(
B
)
>
>
16
)
*
(
A
)
+
(
(
(
0x0000FFFF
&
(
B
)
)
*
(
A
)
)
>
>
16
)
)
typedef
struct
{
int32_t
downState
[
8
]
;
int16_t
HPstate
;
int16_t
counter
;
int16_t
logRatio
;
int16_t
meanLongTerm
;
int32_t
varianceLongTerm
;
int16_t
stdLongTerm
;
int16_t
meanShortTerm
;
int32_t
varianceShortTerm
;
int16_t
stdShortTerm
;
}
AgcVad
;
typedef
struct
{
int32_t
capacitorSlow
;
int32_t
capacitorFast
;
int32_t
gain
;
int32_t
gainTable
[
32
]
;
int16_t
gatePrevious
;
int16_t
agcMode
;
AgcVad
vadNearend
;
AgcVad
vadFarend
;
#
ifdef
WEBRTC_AGC_DEBUG_DUMP
FILE
*
logFile
;
int
frameCounter
;
#
endif
}
DigitalAgc
;
int32_t
WebRtcAgc_InitDigital
(
DigitalAgc
*
digitalAgcInst
int16_t
agcMode
)
;
int32_t
WebRtcAgc_ProcessDigital
(
DigitalAgc
*
digitalAgcInst
const
int16_t
*
const
*
inNear
size_t
num_bands
int16_t
*
const
*
out
uint32_t
FS
int16_t
lowLevelSignal
)
;
int32_t
WebRtcAgc_AddFarendToDigital
(
DigitalAgc
*
digitalAgcInst
const
int16_t
*
inFar
size_t
nrSamples
)
;
void
WebRtcAgc_InitVad
(
AgcVad
*
vadInst
)
;
int16_t
WebRtcAgc_ProcessVad
(
AgcVad
*
vadInst
const
int16_t
*
in
size_t
nrSamples
)
;
int32_t
WebRtcAgc_CalculateGainTable
(
int32_t
*
gainTable
int16_t
compressionGaindB
int16_t
targetLevelDbfs
uint8_t
limiterEnable
int16_t
analogTarget
)
;
#
endif
