#
ifndef
MODULES_AUDIO_PROCESSING_NS_MAIN_SOURCE_NSX_CORE_H_
#
define
MODULES_AUDIO_PROCESSING_NS_MAIN_SOURCE_NSX_CORE_H_
#
ifdef
NS_FILEDEBUG
#
include
<
stdio
.
h
>
#
endif
#
include
"
common_audio
/
signal_processing
/
include
/
signal_processing_library
.
h
"
#
include
"
modules
/
audio_processing
/
ns
/
nsx_defines
.
h
"
#
include
"
typedefs
.
h
"
typedef
struct
NoiseSuppressionFixedC_
{
uint32_t
fs
;
const
int16_t
*
window
;
int16_t
analysisBuffer
[
ANAL_BLOCKL_MAX
]
;
int16_t
synthesisBuffer
[
ANAL_BLOCKL_MAX
]
;
uint16_t
noiseSupFilter
[
HALF_ANAL_BLOCKL
]
;
uint16_t
overdrive
;
uint16_t
denoiseBound
;
const
int16_t
*
factor2Table
;
int16_t
noiseEstLogQuantile
[
SIMULT
*
HALF_ANAL_BLOCKL
]
;
int16_t
noiseEstDensity
[
SIMULT
*
HALF_ANAL_BLOCKL
]
;
int16_t
noiseEstCounter
[
SIMULT
]
;
int16_t
noiseEstQuantile
[
HALF_ANAL_BLOCKL
]
;
size_t
anaLen
;
size_t
anaLen2
;
size_t
magnLen
;
int
aggrMode
;
int
stages
;
int
initFlag
;
int
gainMap
;
int32_t
maxLrt
;
int32_t
minLrt
;
int32_t
logLrtTimeAvgW32
[
HALF_ANAL_BLOCKL
]
;
int32_t
featureLogLrt
;
int32_t
thresholdLogLrt
;
int16_t
weightLogLrt
;
uint32_t
featureSpecDiff
;
uint32_t
thresholdSpecDiff
;
int16_t
weightSpecDiff
;
uint32_t
featureSpecFlat
;
uint32_t
thresholdSpecFlat
;
int16_t
weightSpecFlat
;
int32_t
avgMagnPause
[
HALF_ANAL_BLOCKL
]
;
uint32_t
magnEnergy
;
uint32_t
sumMagn
;
uint32_t
curAvgMagnEnergy
;
uint32_t
timeAvgMagnEnergy
;
uint32_t
timeAvgMagnEnergyTmp
;
uint32_t
whiteNoiseLevel
;
uint32_t
initMagnEst
[
HALF_ANAL_BLOCKL
]
;
int32_t
pinkNoiseNumerator
;
int32_t
pinkNoiseExp
;
int
minNorm
;
int
zeroInputSignal
;
uint32_t
prevNoiseU32
[
HALF_ANAL_BLOCKL
]
;
uint16_t
prevMagnU16
[
HALF_ANAL_BLOCKL
]
;
int16_t
priorNonSpeechProb
;
int
blockIndex
;
int
modelUpdate
;
int
cntThresUpdate
;
int16_t
histLrt
[
HIST_PAR_EST
]
;
int16_t
histSpecFlat
[
HIST_PAR_EST
]
;
int16_t
histSpecDiff
[
HIST_PAR_EST
]
;
int16_t
dataBufHBFX
[
NUM_HIGH_BANDS_MAX
]
[
ANAL_BLOCKL_MAX
]
;
int
qNoise
;
int
prevQNoise
;
int
prevQMagn
;
size_t
blockLen10ms
;
int16_t
real
[
ANAL_BLOCKL_MAX
]
;
int16_t
imag
[
ANAL_BLOCKL_MAX
]
;
int32_t
energyIn
;
int
scaleEnergyIn
;
int
normData
;
struct
RealFFT
*
real_fft
;
}
NoiseSuppressionFixedC
;
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
int32_t
WebRtcNsx_InitCore
(
NoiseSuppressionFixedC
*
inst
uint32_t
fs
)
;
int
WebRtcNsx_set_policy_core
(
NoiseSuppressionFixedC
*
inst
int
mode
)
;
void
WebRtcNsx_ProcessCore
(
NoiseSuppressionFixedC
*
inst
const
short
*
const
*
inFrame
int
num_bands
short
*
const
*
outFrame
)
;
typedef
void
(
*
NoiseEstimation
)
(
NoiseSuppressionFixedC
*
inst
uint16_t
*
magn
uint32_t
*
noise
int16_t
*
q_noise
)
;
extern
NoiseEstimation
WebRtcNsx_NoiseEstimation
;
typedef
void
(
*
PrepareSpectrum
)
(
NoiseSuppressionFixedC
*
inst
int16_t
*
freq_buff
)
;
extern
PrepareSpectrum
WebRtcNsx_PrepareSpectrum
;
typedef
void
(
*
SynthesisUpdate
)
(
NoiseSuppressionFixedC
*
inst
int16_t
*
out_frame
int16_t
gain_factor
)
;
extern
SynthesisUpdate
WebRtcNsx_SynthesisUpdate
;
typedef
void
(
*
AnalysisUpdate
)
(
NoiseSuppressionFixedC
*
inst
int16_t
*
out
int16_t
*
new_speech
)
;
extern
AnalysisUpdate
WebRtcNsx_AnalysisUpdate
;
typedef
void
(
*
Denormalize
)
(
NoiseSuppressionFixedC
*
inst
int16_t
*
in
int
factor
)
;
extern
Denormalize
WebRtcNsx_Denormalize
;
typedef
void
(
*
NormalizeRealBuffer
)
(
NoiseSuppressionFixedC
*
inst
const
int16_t
*
in
int16_t
*
out
)
;
extern
NormalizeRealBuffer
WebRtcNsx_NormalizeRealBuffer
;
void
WebRtcNsx_SpeechNoiseProb
(
NoiseSuppressionFixedC
*
inst
uint16_t
*
nonSpeechProbFinal
uint32_t
*
priorLocSnr
uint32_t
*
postLocSnr
)
;
#
if
defined
(
WEBRTC_HAS_NEON
)
void
WebRtcNsx_NoiseEstimationNeon
(
NoiseSuppressionFixedC
*
inst
uint16_t
*
magn
uint32_t
*
noise
int16_t
*
q_noise
)
;
void
WebRtcNsx_SynthesisUpdateNeon
(
NoiseSuppressionFixedC
*
inst
int16_t
*
out_frame
int16_t
gain_factor
)
;
void
WebRtcNsx_AnalysisUpdateNeon
(
NoiseSuppressionFixedC
*
inst
int16_t
*
out
int16_t
*
new_speech
)
;
void
WebRtcNsx_PrepareSpectrumNeon
(
NoiseSuppressionFixedC
*
inst
int16_t
*
freq_buff
)
;
#
endif
#
if
defined
(
MIPS32_LE
)
void
WebRtcNsx_SynthesisUpdate_mips
(
NoiseSuppressionFixedC
*
inst
int16_t
*
out_frame
int16_t
gain_factor
)
;
void
WebRtcNsx_AnalysisUpdate_mips
(
NoiseSuppressionFixedC
*
inst
int16_t
*
out
int16_t
*
new_speech
)
;
void
WebRtcNsx_PrepareSpectrum_mips
(
NoiseSuppressionFixedC
*
inst
int16_t
*
freq_buff
)
;
void
WebRtcNsx_NormalizeRealBuffer_mips
(
NoiseSuppressionFixedC
*
inst
const
int16_t
*
in
int16_t
*
out
)
;
#
if
defined
(
MIPS_DSP_R1_LE
)
void
WebRtcNsx_Denormalize_mips
(
NoiseSuppressionFixedC
*
inst
int16_t
*
in
int
factor
)
;
#
endif
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
