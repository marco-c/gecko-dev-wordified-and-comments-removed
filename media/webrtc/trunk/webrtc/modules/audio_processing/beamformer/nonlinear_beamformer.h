#
ifndef
WEBRTC_MODULES_AUDIO_PROCESSING_BEAMFORMER_NONLINEAR_BEAMFORMER_H_
#
define
WEBRTC_MODULES_AUDIO_PROCESSING_BEAMFORMER_NONLINEAR_BEAMFORMER_H_
#
include
<
vector
>
#
include
"
webrtc
/
common_audio
/
lapped_transform
.
h
"
#
include
"
webrtc
/
common_audio
/
channel_buffer
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
beamformer
/
array_util
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
beamformer
/
beamformer
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
beamformer
/
complex_matrix
.
h
"
namespace
webrtc
{
class
NonlinearBeamformer
:
public
Beamformer
<
float
>
public
LappedTransform
:
:
Callback
{
public
:
explicit
NonlinearBeamformer
(
const
std
:
:
vector
<
Point
>
&
array_geometry
)
;
void
Initialize
(
int
chunk_size_ms
int
sample_rate_hz
)
override
;
void
ProcessChunk
(
const
ChannelBuffer
<
float
>
&
input
ChannelBuffer
<
float
>
*
output
)
override
;
bool
is_target_present
(
)
override
{
return
is_target_present_
;
}
protected
:
void
ProcessAudioBlock
(
const
complex
<
float
>
*
const
*
input
int
num_input_channels
int
num_freq_bins
int
num_output_channels
complex
<
float
>
*
const
*
output
)
override
;
private
:
typedef
Matrix
<
float
>
MatrixF
;
typedef
ComplexMatrix
<
float
>
ComplexMatrixF
;
typedef
complex
<
float
>
complex_f
;
void
InitDelaySumMasks
(
)
;
void
InitTargetCovMats
(
)
;
void
InitInterfCovMats
(
)
;
float
CalculatePostfilterMask
(
const
ComplexMatrixF
&
interf_cov_mat
float
rpsiw
float
ratio_rxiw_rxim
float
rmxi_r
float
mask_threshold
)
;
void
ApplyMaskSmoothing
(
)
;
void
ApplyLowFrequencyCorrection
(
)
;
void
ApplyHighFrequencyCorrection
(
)
;
void
ApplyMasks
(
const
complex_f
*
const
*
input
complex_f
*
const
*
output
)
;
void
EstimateTargetPresence
(
)
;
static
const
int
kFftSize
=
256
;
static
const
int
kNumFreqBins
=
kFftSize
/
2
+
1
;
int
chunk_length_
;
rtc
:
:
scoped_ptr
<
LappedTransform
>
lapped_transform_
;
float
window_
[
kFftSize
]
;
const
int
num_input_channels_
;
int
sample_rate_hz_
;
const
std
:
:
vector
<
Point
>
array_geometry_
;
int
low_average_start_bin_
;
int
low_average_end_bin_
;
int
high_average_start_bin_
;
int
high_average_end_bin_
;
float
postfilter_mask_
[
kNumFreqBins
]
;
float
new_mask_
[
kNumFreqBins
]
;
ComplexMatrixF
delay_sum_masks_
[
kNumFreqBins
]
;
ComplexMatrixF
normalized_delay_sum_masks_
[
kNumFreqBins
]
;
ComplexMatrixF
target_cov_mats_
[
kNumFreqBins
]
;
ComplexMatrixF
interf_cov_mats_
[
kNumFreqBins
]
;
ComplexMatrixF
reflected_interf_cov_mats_
[
kNumFreqBins
]
;
float
mask_thresholds_
[
kNumFreqBins
]
;
float
wave_numbers_
[
kNumFreqBins
]
;
float
rxiws_
[
kNumFreqBins
]
;
float
rpsiws_
[
kNumFreqBins
]
;
float
reflected_rpsiws_
[
kNumFreqBins
]
;
ComplexMatrixF
eig_m_
;
float
high_pass_postfilter_mask_
;
bool
is_target_present_
;
int
hold_target_blocks_
;
int
interference_blocks_count_
;
}
;
}
#
endif
