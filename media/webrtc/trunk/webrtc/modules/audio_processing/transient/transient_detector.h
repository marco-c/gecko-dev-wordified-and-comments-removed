#
ifndef
WEBRTC_MODULES_AUDIO_PROCESSING_TRANSIENT_TRANSIENT_DETECTOR_H_
#
define
WEBRTC_MODULES_AUDIO_PROCESSING_TRANSIENT_TRANSIENT_DETECTOR_H_
#
include
<
deque
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
transient
/
moving_moments
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
transient
/
wpd_tree
.
h
"
namespace
webrtc
{
class
TransientDetector
{
public
:
TransientDetector
(
int
sample_rate_hz
)
;
~
TransientDetector
(
)
;
float
Detect
(
const
float
*
data
size_t
data_length
const
float
*
reference_data
size_t
reference_length
)
;
bool
using_reference
(
)
{
return
using_reference_
;
}
private
:
float
ReferenceDetectionValue
(
const
float
*
data
size_t
length
)
;
static
const
size_t
kLevels
=
3
;
static
const
size_t
kLeaves
=
1
<
<
kLevels
;
size_t
samples_per_chunk_
;
rtc
:
:
scoped_ptr
<
WPDTree
>
wpd_tree_
;
size_t
tree_leaves_data_length_
;
rtc
:
:
scoped_ptr
<
MovingMoments
>
moving_moments_
[
kLeaves
]
;
rtc
:
:
scoped_ptr
<
float
[
]
>
first_moments_
;
rtc
:
:
scoped_ptr
<
float
[
]
>
second_moments_
;
float
last_first_moment_
[
kLeaves
]
;
float
last_second_moment_
[
kLeaves
]
;
std
:
:
deque
<
float
>
previous_results_
;
int
chunks_at_startup_left_to_delete_
;
float
reference_energy_
;
bool
using_reference_
;
}
;
}
#
endif
