#
ifndef
WEBRTC_MODULES_AUDIO_PROCESSING_TRANSIENT_TRANSIENT_SUPPRESSOR_H_
#
define
WEBRTC_MODULES_AUDIO_PROCESSING_TRANSIENT_TRANSIENT_SUPPRESSOR_H_
#
include
<
deque
>
#
include
<
set
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
test
/
testsupport
/
gtest_prod_util
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
TransientDetector
;
class
TransientSuppressor
{
public
:
TransientSuppressor
(
)
;
~
TransientSuppressor
(
)
;
int
Initialize
(
int
sample_rate_hz
int
detector_rate_hz
int
num_channels
)
;
int
Suppress
(
float
*
data
size_t
data_length
int
num_channels
const
float
*
detection_data
size_t
detection_length
const
float
*
reference_data
size_t
reference_length
float
voice_probability
bool
key_pressed
)
;
private
:
FRIEND_TEST_ALL_PREFIXES
(
TransientSuppressorTest
TypingDetectionLogicWorksAsExpectedForMono
)
;
void
Suppress
(
float
*
in_ptr
float
*
spectral_mean
float
*
out_ptr
)
;
void
UpdateKeypress
(
bool
key_pressed
)
;
void
UpdateRestoration
(
float
voice_probability
)
;
void
UpdateBuffers
(
float
*
data
)
;
void
HardRestoration
(
float
*
spectral_mean
)
;
void
SoftRestoration
(
float
*
spectral_mean
)
;
rtc
:
:
scoped_ptr
<
TransientDetector
>
detector_
;
size_t
data_length_
;
size_t
detection_length_
;
size_t
analysis_length_
;
size_t
buffer_delay_
;
size_t
complex_analysis_length_
;
int
num_channels_
;
rtc
:
:
scoped_ptr
<
float
[
]
>
in_buffer_
;
rtc
:
:
scoped_ptr
<
float
[
]
>
detection_buffer_
;
rtc
:
:
scoped_ptr
<
float
[
]
>
out_buffer_
;
rtc
:
:
scoped_ptr
<
int
[
]
>
ip_
;
rtc
:
:
scoped_ptr
<
float
[
]
>
wfft_
;
rtc
:
:
scoped_ptr
<
float
[
]
>
spectral_mean_
;
rtc
:
:
scoped_ptr
<
float
[
]
>
fft_buffer_
;
rtc
:
:
scoped_ptr
<
float
[
]
>
magnitudes_
;
const
float
*
window_
;
rtc
:
:
scoped_ptr
<
float
[
]
>
mean_factor_
;
float
detector_smoothed_
;
int
keypress_counter_
;
int
chunks_since_keypress_
;
bool
detection_enabled_
;
bool
suppression_enabled_
;
bool
use_hard_restoration_
;
int
chunks_since_voice_change_
;
uint32_t
seed_
;
bool
using_reference_
;
}
;
}
#
endif
