#
include
"
modules
/
audio_processing
/
audio_processing_impl
.
h
"
#
include
"
modules
/
audio_processing
/
test
/
test_utils
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
test
/
gmock
.
h
"
#
include
"
test
/
gtest
.
h
"
using
:
:
testing
:
:
Invoke
;
namespace
webrtc
{
namespace
{
class
MockInitialize
:
public
AudioProcessingImpl
{
public
:
explicit
MockInitialize
(
const
webrtc
:
:
Config
&
config
)
:
AudioProcessingImpl
(
config
)
{
}
MOCK_METHOD0
(
InitializeLocked
int
(
)
)
;
int
RealInitializeLocked
(
)
RTC_NO_THREAD_SAFETY_ANALYSIS
{
return
AudioProcessingImpl
:
:
InitializeLocked
(
)
;
}
MOCK_CONST_METHOD0
(
AddRef
void
(
)
)
;
MOCK_CONST_METHOD0
(
Release
rtc
:
:
RefCountReleaseStatus
(
)
)
;
}
;
}
TEST
(
AudioProcessingImplTest
AudioParameterChangeTriggersInit
)
{
webrtc
:
:
Config
config
;
MockInitialize
mock
(
config
)
;
ON_CALL
(
mock
InitializeLocked
(
)
)
.
WillByDefault
(
Invoke
(
&
mock
&
MockInitialize
:
:
RealInitializeLocked
)
)
;
EXPECT_CALL
(
mock
InitializeLocked
(
)
)
.
Times
(
1
)
;
mock
.
Initialize
(
)
;
AudioFrame
frame
;
frame
.
num_channels_
=
1
;
SetFrameSampleRate
(
&
frame
16000
)
;
EXPECT_CALL
(
mock
InitializeLocked
(
)
)
.
Times
(
0
)
;
EXPECT_NOERR
(
mock
.
ProcessStream
(
&
frame
)
)
;
EXPECT_NOERR
(
mock
.
ProcessReverseStream
(
&
frame
)
)
;
SetFrameSampleRate
(
&
frame
32000
)
;
EXPECT_CALL
(
mock
InitializeLocked
(
)
)
.
Times
(
1
)
;
EXPECT_NOERR
(
mock
.
ProcessStream
(
&
frame
)
)
;
frame
.
num_channels_
=
2
;
EXPECT_CALL
(
mock
InitializeLocked
(
)
)
.
Times
(
2
)
;
EXPECT_NOERR
(
mock
.
ProcessStream
(
&
frame
)
)
;
frame
.
num_channels_
=
2
;
EXPECT_NOERR
(
mock
.
ProcessReverseStream
(
&
frame
)
)
;
SetFrameSampleRate
(
&
frame
16000
)
;
EXPECT_CALL
(
mock
InitializeLocked
(
)
)
.
Times
(
1
)
;
EXPECT_NOERR
(
mock
.
ProcessReverseStream
(
&
frame
)
)
;
}
}
