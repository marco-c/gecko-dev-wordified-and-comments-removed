#
ifndef
WEBRTC_MODULES_AUDIO_PROCESSING_RESIDUAL_ECHO_DETECTOR_H_
#
define
WEBRTC_MODULES_AUDIO_PROCESSING_RESIDUAL_ECHO_DETECTOR_H_
#
include
<
vector
>
#
include
"
webrtc
/
base
/
array_view
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
echo_detector
/
circular_buffer
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
echo_detector
/
mean_variance_estimator
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
echo_detector
/
moving_max
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
echo_detector
/
normalized_covariance_estimator
.
h
"
namespace
webrtc
{
class
AudioBuffer
;
class
EchoDetector
;
class
ResidualEchoDetector
{
public
:
ResidualEchoDetector
(
)
;
~
ResidualEchoDetector
(
)
;
void
AnalyzeRenderAudio
(
rtc
:
:
ArrayView
<
const
float
>
render_audio
)
;
void
AnalyzeCaptureAudio
(
rtc
:
:
ArrayView
<
const
float
>
capture_audio
)
;
void
Initialize
(
)
;
void
SetReliabilityForTest
(
float
value
)
{
reliability_
=
value
;
}
static
void
PackRenderAudioBuffer
(
AudioBuffer
*
audio
std
:
:
vector
<
float
>
*
packed_buffer
)
;
float
echo_likelihood
(
)
const
{
return
echo_likelihood_
;
}
float
echo_likelihood_recent_max
(
)
const
{
return
recent_likelihood_max_
.
max
(
)
;
}
private
:
bool
first_process_call_
=
true
;
CircularBuffer
render_buffer_
;
size_t
frames_since_zero_buffer_size_
=
0
;
std
:
:
vector
<
float
>
render_power_
;
std
:
:
vector
<
float
>
render_power_mean_
;
std
:
:
vector
<
float
>
render_power_std_dev_
;
std
:
:
vector
<
NormalizedCovarianceEstimator
>
covariances_
;
size_t
next_insertion_index_
=
0
;
MeanVarianceEstimator
render_statistics_
;
MeanVarianceEstimator
capture_statistics_
;
float
echo_likelihood_
=
0
.
f
;
float
reliability_
=
0
.
f
;
MovingMax
recent_likelihood_max_
;
}
;
}
#
endif
