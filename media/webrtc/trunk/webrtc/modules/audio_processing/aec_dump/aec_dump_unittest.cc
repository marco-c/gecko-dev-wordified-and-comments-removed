#
include
<
utility
>
#
include
"
modules
/
audio_processing
/
aec_dump
/
aec_dump_factory
.
h
"
#
include
"
modules
/
include
/
module_common_types
.
h
"
#
include
"
rtc_base
/
task_queue
.
h
"
#
include
"
test
/
gtest
.
h
"
#
include
"
test
/
testsupport
/
fileutils
.
h
"
TEST
(
AecDumper
APICallsDoNotCrash
)
{
rtc
:
:
TaskQueue
file_writer_queue
(
"
file_writer_queue
"
)
;
const
std
:
:
string
filename
=
webrtc
:
:
test
:
:
TempFilename
(
webrtc
:
:
test
:
:
OutputPath
(
)
"
aec_dump
"
)
;
{
std
:
:
unique_ptr
<
webrtc
:
:
AecDump
>
aec_dump
=
webrtc
:
:
AecDumpFactory
:
:
Create
(
filename
-
1
&
file_writer_queue
)
;
const
webrtc
:
:
AudioFrame
frame
;
aec_dump
-
>
WriteRenderStreamMessage
(
frame
)
;
aec_dump
-
>
AddCaptureStreamInput
(
frame
)
;
aec_dump
-
>
AddCaptureStreamOutput
(
frame
)
;
aec_dump
-
>
WriteCaptureStreamMessage
(
)
;
webrtc
:
:
InternalAPMConfig
apm_config
;
aec_dump
-
>
WriteConfig
(
apm_config
)
;
webrtc
:
:
InternalAPMStreamsConfig
streams_config
;
aec_dump
-
>
WriteInitMessage
(
streams_config
)
;
}
ASSERT_EQ
(
0
remove
(
filename
.
c_str
(
)
)
)
;
}
TEST
(
AecDumper
WriteToFile
)
{
rtc
:
:
TaskQueue
file_writer_queue
(
"
file_writer_queue
"
)
;
const
std
:
:
string
filename
=
webrtc
:
:
test
:
:
TempFilename
(
webrtc
:
:
test
:
:
OutputPath
(
)
"
aec_dump
"
)
;
{
std
:
:
unique_ptr
<
webrtc
:
:
AecDump
>
aec_dump
=
webrtc
:
:
AecDumpFactory
:
:
Create
(
filename
-
1
&
file_writer_queue
)
;
const
webrtc
:
:
AudioFrame
frame
;
aec_dump
-
>
WriteRenderStreamMessage
(
frame
)
;
}
FILE
*
fid
=
fopen
(
filename
.
c_str
(
)
"
r
"
)
;
ASSERT_TRUE
(
fid
!
=
NULL
)
;
ASSERT_EQ
(
0
fclose
(
fid
)
)
;
ASSERT_EQ
(
0
remove
(
filename
.
c_str
(
)
)
)
;
}
