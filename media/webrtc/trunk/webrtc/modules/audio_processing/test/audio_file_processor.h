#
ifndef
WEBRTC_MODULES_AUDIO_PROCESSING_TEST_AUDIO_FILE_PROCESSOR_H_
#
define
WEBRTC_MODULES_AUDIO_PROCESSING_TEST_AUDIO_FILE_PROCESSOR_H_
#
include
<
algorithm
>
#
include
<
limits
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
common_audio
/
channel_buffer
.
h
"
#
include
"
webrtc
/
common_audio
/
wav_file
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
test
/
test_utils
.
h
"
#
include
"
webrtc
/
system_wrappers
/
include
/
tick_util
.
h
"
#
ifdef
WEBRTC_ANDROID_PLATFORM_BUILD
#
include
"
external
/
webrtc
/
webrtc
/
modules
/
audio_processing
/
debug
.
pb
.
h
"
#
else
#
include
"
webrtc
/
audio_processing
/
debug
.
pb
.
h
"
#
endif
namespace
webrtc
{
struct
TickIntervalStats
{
TickIntervalStats
(
)
:
min
(
std
:
:
numeric_limits
<
int64_t
>
:
:
max
(
)
)
{
}
TickInterval
sum
;
TickInterval
max
;
TickInterval
min
;
}
;
class
AudioFileProcessor
{
public
:
static
const
int
kChunksPerSecond
=
1000
/
AudioProcessing
:
:
kChunkSizeMs
;
virtual
~
AudioFileProcessor
(
)
{
}
virtual
bool
ProcessChunk
(
)
=
0
;
const
TickIntervalStats
&
proc_time
(
)
const
{
return
proc_time_
;
}
protected
:
class
ScopedTimer
{
public
:
explicit
ScopedTimer
(
TickIntervalStats
*
proc_time
)
:
proc_time_
(
proc_time
)
start_time_
(
TickTime
:
:
Now
(
)
)
{
}
~
ScopedTimer
(
)
{
TickInterval
interval
=
TickTime
:
:
Now
(
)
-
start_time_
;
proc_time_
-
>
sum
+
=
interval
;
proc_time_
-
>
max
=
std
:
:
max
(
proc_time_
-
>
max
interval
)
;
proc_time_
-
>
min
=
std
:
:
min
(
proc_time_
-
>
min
interval
)
;
}
private
:
TickIntervalStats
*
const
proc_time_
;
TickTime
start_time_
;
}
;
TickIntervalStats
*
mutable_proc_time
(
)
{
return
&
proc_time_
;
}
private
:
TickIntervalStats
proc_time_
;
}
;
class
WavFileProcessor
final
:
public
AudioFileProcessor
{
public
:
WavFileProcessor
(
rtc
:
:
scoped_ptr
<
AudioProcessing
>
ap
rtc
:
:
scoped_ptr
<
WavReader
>
in_file
rtc
:
:
scoped_ptr
<
WavWriter
>
out_file
)
;
virtual
~
WavFileProcessor
(
)
{
}
bool
ProcessChunk
(
)
override
;
private
:
rtc
:
:
scoped_ptr
<
AudioProcessing
>
ap_
;
ChannelBuffer
<
float
>
in_buf_
;
ChannelBuffer
<
float
>
out_buf_
;
const
StreamConfig
input_config_
;
const
StreamConfig
output_config_
;
ChannelBufferWavReader
buffer_reader_
;
ChannelBufferWavWriter
buffer_writer_
;
}
;
class
AecDumpFileProcessor
final
:
public
AudioFileProcessor
{
public
:
AecDumpFileProcessor
(
rtc
:
:
scoped_ptr
<
AudioProcessing
>
ap
FILE
*
dump_file
rtc
:
:
scoped_ptr
<
WavWriter
>
out_file
)
;
virtual
~
AecDumpFileProcessor
(
)
;
bool
ProcessChunk
(
)
override
;
private
:
void
HandleMessage
(
const
webrtc
:
:
audioproc
:
:
Init
&
msg
)
;
void
HandleMessage
(
const
webrtc
:
:
audioproc
:
:
Stream
&
msg
)
;
void
HandleMessage
(
const
webrtc
:
:
audioproc
:
:
ReverseStream
&
msg
)
;
rtc
:
:
scoped_ptr
<
AudioProcessing
>
ap_
;
FILE
*
dump_file_
;
rtc
:
:
scoped_ptr
<
ChannelBuffer
<
float
>
>
in_buf_
;
rtc
:
:
scoped_ptr
<
ChannelBuffer
<
float
>
>
reverse_buf_
;
ChannelBuffer
<
float
>
out_buf_
;
StreamConfig
input_config_
;
StreamConfig
reverse_config_
;
const
StreamConfig
output_config_
;
ChannelBufferWavWriter
buffer_writer_
;
}
;
}
#
endif
