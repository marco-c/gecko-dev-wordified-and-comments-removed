#
ifndef
MODULES_AUDIO_PROCESSING_AEC3_RENDER_BUFFER_H_
#
define
MODULES_AUDIO_PROCESSING_AEC3_RENDER_BUFFER_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
aec3_fft
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
fft_data
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
webrtc
{
class
RenderBuffer
{
public
:
RenderBuffer
(
Aec3Optimization
optimization
size_t
num_bands
size_t
size
const
std
:
:
vector
<
size_t
>
num_ffts_for_spectral_sums
)
;
~
RenderBuffer
(
)
;
void
Clear
(
)
;
void
Insert
(
const
std
:
:
vector
<
std
:
:
vector
<
float
>
>
&
block
)
;
const
std
:
:
vector
<
std
:
:
vector
<
float
>
>
&
MostRecentBlock
(
)
const
{
return
last_block_
;
}
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
&
Spectrum
(
size_t
buffer_offset_ffts
)
const
{
return
spectrum_buffer_
[
(
position_
+
buffer_offset_ffts
)
%
fft_buffer_
.
size
(
)
]
;
}
const
std
:
:
array
<
float
kFftLengthBy2Plus1
>
&
SpectralSum
(
size_t
num_ffts
)
const
{
RTC_DCHECK_EQ
(
spectral_sums_length_
num_ffts
)
;
return
spectral_sums_
[
0
]
;
}
rtc
:
:
ArrayView
<
const
FftData
>
Buffer
(
)
const
{
return
fft_buffer_
;
}
size_t
Position
(
)
const
{
return
position_
;
}
private
:
const
Aec3Optimization
optimization_
;
std
:
:
vector
<
FftData
>
fft_buffer_
;
std
:
:
vector
<
std
:
:
array
<
float
kFftLengthBy2Plus1
>
>
spectrum_buffer_
;
size_t
spectral_sums_length_
;
std
:
:
vector
<
std
:
:
array
<
float
kFftLengthBy2Plus1
>
>
spectral_sums_
;
size_t
position_
=
0
;
std
:
:
vector
<
std
:
:
vector
<
float
>
>
last_block_
;
const
Aec3Fft
fft_
;
RTC_DISALLOW_IMPLICIT_CONSTRUCTORS
(
RenderBuffer
)
;
}
;
}
#
endif
