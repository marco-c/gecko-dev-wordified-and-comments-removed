#
ifndef
WEBRTC_MODULES_AUDIO_PROCESSING_AEC3_ECHO_CANCELLER3_H_
#
define
WEBRTC_MODULES_AUDIO_PROCESSING_AEC3_ECHO_CANCELLER3_H_
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
race_checker
.
h
"
#
include
"
webrtc
/
base
/
swap_queue
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
aec3
/
block_framer
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
aec3
/
block_processor
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
aec3
/
cascaded_biquad_filter
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
aec3
/
frame_blocker
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
audio_buffer
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
include
/
audio_processing
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
logging
/
apm_data_dumper
.
h
"
namespace
webrtc
{
class
Aec3RenderQueueItemVerifier
{
public
:
explicit
Aec3RenderQueueItemVerifier
(
size_t
num_bands
size_t
frame_length
)
:
num_bands_
(
num_bands
)
frame_length_
(
frame_length
)
{
}
bool
operator
(
)
(
const
std
:
:
vector
<
std
:
:
vector
<
float
>
>
&
v
)
const
{
if
(
v
.
size
(
)
!
=
num_bands_
)
{
return
false
;
}
for
(
const
auto
&
v_k
:
v
)
{
if
(
v_k
.
size
(
)
!
=
frame_length_
)
{
return
false
;
}
}
return
true
;
}
private
:
const
size_t
num_bands_
;
const
size_t
frame_length_
;
}
;
class
EchoCanceller3
{
public
:
EchoCanceller3
(
int
sample_rate_hz
bool
use_highpass_filter
)
;
EchoCanceller3
(
int
sample_rate_hz
bool
use_highpass_filter
std
:
:
unique_ptr
<
BlockProcessor
>
block_processor
)
;
~
EchoCanceller3
(
)
;
bool
AnalyzeRender
(
AudioBuffer
*
farend
)
;
void
AnalyzeCapture
(
AudioBuffer
*
capture
)
;
void
ProcessCapture
(
AudioBuffer
*
capture
bool
known_echo_path_change
)
;
void
ReportEchoLeakage
(
bool
leakage_detected
)
{
RTC_DCHECK_RUNS_SERIALIZED
(
&
capture_race_checker_
)
;
block_processor_
-
>
ReportEchoLeakage
(
leakage_detected
)
;
}
static
bool
Validate
(
const
AudioProcessing
:
:
Config
:
:
EchoCanceller3
&
config
)
;
static
std
:
:
string
ToString
(
const
AudioProcessing
:
:
Config
:
:
EchoCanceller3
&
config
)
;
private
:
class
RenderWriter
;
bool
EmptyRenderQueue
(
)
;
rtc
:
:
RaceChecker
capture_race_checker_
;
rtc
:
:
RaceChecker
render_race_checker_
;
std
:
:
unique_ptr
<
RenderWriter
>
render_writer_
GUARDED_BY
(
render_race_checker_
)
;
static
int
instance_count_
;
std
:
:
unique_ptr
<
ApmDataDumper
>
data_dumper_
;
const
int
sample_rate_hz_
;
const
int
num_bands_
;
const
size_t
frame_length_
;
BlockFramer
output_framer_
GUARDED_BY
(
capture_race_checker_
)
;
FrameBlocker
capture_blocker_
GUARDED_BY
(
capture_race_checker_
)
;
FrameBlocker
render_blocker_
GUARDED_BY
(
capture_race_checker_
)
;
SwapQueue
<
std
:
:
vector
<
std
:
:
vector
<
float
>
>
Aec3RenderQueueItemVerifier
>
render_transfer_queue_
;
std
:
:
unique_ptr
<
BlockProcessor
>
block_processor_
GUARDED_BY
(
capture_race_checker_
)
;
std
:
:
vector
<
std
:
:
vector
<
float
>
>
render_queue_output_frame_
GUARDED_BY
(
capture_race_checker_
)
;
std
:
:
unique_ptr
<
CascadedBiQuadFilter
>
capture_highpass_filter_
GUARDED_BY
(
capture_race_checker_
)
;
bool
saturated_microphone_signal_
GUARDED_BY
(
capture_race_checker_
)
=
false
;
std
:
:
vector
<
std
:
:
vector
<
float
>
>
block_
GUARDED_BY
(
capture_race_checker_
)
;
std
:
:
vector
<
rtc
:
:
ArrayView
<
float
>
>
sub_frame_view_
GUARDED_BY
(
capture_race_checker_
)
;
RTC_DISALLOW_IMPLICIT_CONSTRUCTORS
(
EchoCanceller3
)
;
}
;
}
#
endif
