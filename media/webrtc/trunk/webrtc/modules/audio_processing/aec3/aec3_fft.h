#
ifndef
MODULES_AUDIO_PROCESSING_AEC3_AEC3_FFT_H_
#
define
MODULES_AUDIO_PROCESSING_AEC3_AEC3_FFT_H_
#
include
<
array
>
#
include
"
api
/
array_view
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
aec3_common
.
h
"
#
include
"
modules
/
audio_processing
/
aec3
/
fft_data
.
h
"
#
include
"
modules
/
audio_processing
/
utility
/
ooura_fft
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
webrtc
{
class
Aec3Fft
{
public
:
Aec3Fft
(
)
=
default
;
void
Fft
(
std
:
:
array
<
float
kFftLength
>
*
x
FftData
*
X
)
const
{
RTC_DCHECK
(
x
)
;
RTC_DCHECK
(
X
)
;
ooura_fft_
.
Fft
(
x
-
>
data
(
)
)
;
X
-
>
CopyFromPackedArray
(
*
x
)
;
}
void
Ifft
(
const
FftData
&
X
std
:
:
array
<
float
kFftLength
>
*
x
)
const
{
RTC_DCHECK
(
x
)
;
X
.
CopyToPackedArray
(
x
)
;
ooura_fft_
.
InverseFft
(
x
-
>
data
(
)
)
;
}
void
ZeroPaddedFft
(
rtc
:
:
ArrayView
<
const
float
>
x
FftData
*
X
)
const
;
void
PaddedFft
(
rtc
:
:
ArrayView
<
const
float
>
x
rtc
:
:
ArrayView
<
float
>
x_old
FftData
*
X
)
const
;
private
:
const
OouraFft
ooura_fft_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
Aec3Fft
)
;
}
;
}
#
endif
