#
ifndef
WEBRTC_MODULES_AUDIO_PROCESSING_AEC_AEC_CORE_INTERNAL_H_
#
define
WEBRTC_MODULES_AUDIO_PROCESSING_AEC_AEC_CORE_INTERNAL_H_
#
include
"
webrtc
/
common_audio
/
ring_buffer
.
h
"
#
include
"
webrtc
/
common_audio
/
wav_file
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
aec
/
aec_common
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
aec
/
aec_core
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
enum
{
kExtendedNumPartitions
=
32
}
;
static
const
int
kNormalNumPartitions
=
12
;
enum
{
kLookaheadBlocks
=
15
}
;
enum
{
kHistorySizeBlocks
=
125
}
;
static
const
float
kExtendedMu
=
0
.
4f
;
static
const
float
kExtendedErrorThreshold
=
1
.
0e
-
6f
;
typedef
struct
PowerLevel
{
float
sfrsum
;
int
sfrcounter
;
float
framelevel
;
float
frsum
;
int
frcounter
;
float
minlevel
;
float
averagelevel
;
}
PowerLevel
;
struct
AecCore
{
int
farBufWritePos
farBufReadPos
;
int
knownDelay
;
int
inSamples
outSamples
;
int
delayEstCtr
;
RingBuffer
*
nearFrBuf
;
RingBuffer
*
outFrBuf
;
RingBuffer
*
nearFrBufH
[
NUM_HIGH_BANDS_MAX
]
;
RingBuffer
*
outFrBufH
[
NUM_HIGH_BANDS_MAX
]
;
float
dBuf
[
PART_LEN2
]
;
float
eBuf
[
PART_LEN2
]
;
float
dBufH
[
NUM_HIGH_BANDS_MAX
]
[
PART_LEN2
]
;
float
xPow
[
PART_LEN1
]
;
float
dPow
[
PART_LEN1
]
;
float
dMinPow
[
PART_LEN1
]
;
float
dInitMinPow
[
PART_LEN1
]
;
float
*
noisePow
;
float
xfBuf
[
2
]
[
kExtendedNumPartitions
*
PART_LEN1
]
;
float
wfBuf
[
2
]
[
kExtendedNumPartitions
*
PART_LEN1
]
;
complex_t
sde
[
PART_LEN1
]
;
complex_t
sxd
[
PART_LEN1
]
;
complex_t
xfwBuf
[
kExtendedNumPartitions
*
PART_LEN1
]
;
float
sx
[
PART_LEN1
]
sd
[
PART_LEN1
]
se
[
PART_LEN1
]
;
float
hNs
[
PART_LEN1
]
;
float
hNlFbMin
hNlFbLocalMin
;
float
hNlXdAvgMin
;
int
hNlNewMin
hNlMinCtr
;
float
overDrive
overDriveSm
;
int
nlp_mode
;
float
outBuf
[
PART_LEN
]
;
int
delayIdx
;
short
stNearState
echoState
;
short
divergeState
;
int
xfBufBlockPos
;
RingBuffer
*
far_time_buf
;
int
system_delay
;
int
mult
;
int
sampFreq
;
size_t
num_bands
;
uint32_t
seed
;
float
normal_mu
;
float
normal_error_threshold
;
int
noiseEstCtr
;
PowerLevel
farlevel
;
PowerLevel
nearlevel
;
PowerLevel
linoutlevel
;
PowerLevel
nlpoutlevel
;
int
metricsMode
;
int
stateCounter
;
Stats
erl
;
Stats
erle
;
Stats
aNlp
;
Stats
rerl
;
int
freq_avg_ic
;
int
flag_Hband_cn
;
float
cn_scale_Hband
;
int
delay_metrics_delivered
;
int
delay_histogram
[
kHistorySizeBlocks
]
;
int
num_delay_values
;
int
delay_median
;
int
delay_std
;
float
fraction_poor_delays
;
int
delay_logging_enabled
;
void
*
delay_estimator_farend
;
void
*
delay_estimator
;
int
signal_delay_correction
;
int
previous_delay
;
int
delay_correction_count
;
int
shift_offset
;
float
delay_quality_threshold
;
int
frame_count
;
int
delay_agnostic_enabled
;
int
extended_filter_enabled
;
int
num_partitions
;
int
extreme_filter_divergence
;
#
ifdef
WEBRTC_AEC_DEBUG_DUMP
int
instance_index
;
int
debug_dump_count
;
rtc_WavWriter
*
farFile
;
rtc_WavWriter
*
nearFile
;
rtc_WavWriter
*
outFile
;
rtc_WavWriter
*
outLinearFile
;
FILE
*
e_fft_file
;
#
endif
}
;
typedef
void
(
*
WebRtcAecFilterFar
)
(
int
num_partitions
int
x_fft_buf_block_pos
float
x_fft_buf
[
2
]
[
kExtendedNumPartitions
*
PART_LEN1
]
float
h_fft_buf
[
2
]
[
kExtendedNumPartitions
*
PART_LEN1
]
float
y_fft
[
2
]
[
PART_LEN1
]
)
;
extern
WebRtcAecFilterFar
WebRtcAec_FilterFar
;
typedef
void
(
*
WebRtcAecScaleErrorSignal
)
(
int
extended_filter_enabled
float
normal_mu
float
normal_error_threshold
float
x_pow
[
PART_LEN1
]
float
ef
[
2
]
[
PART_LEN1
]
)
;
extern
WebRtcAecScaleErrorSignal
WebRtcAec_ScaleErrorSignal
;
typedef
void
(
*
WebRtcAecFilterAdaptation
)
(
int
num_partitions
int
x_fft_buf_block_pos
float
x_fft_buf
[
2
]
[
kExtendedNumPartitions
*
PART_LEN1
]
float
e_fft
[
2
]
[
PART_LEN1
]
float
h_fft_buf
[
2
]
[
kExtendedNumPartitions
*
PART_LEN1
]
)
;
extern
WebRtcAecFilterAdaptation
WebRtcAec_FilterAdaptation
;
typedef
void
(
*
WebRtcAecOverdriveAndSuppress
)
(
AecCore
*
aec
float
hNl
[
PART_LEN1
]
const
float
hNlFb
float
efw
[
2
]
[
PART_LEN1
]
)
;
extern
WebRtcAecOverdriveAndSuppress
WebRtcAec_OverdriveAndSuppress
;
typedef
void
(
*
WebRtcAecComfortNoise
)
(
AecCore
*
aec
float
efw
[
2
]
[
PART_LEN1
]
float
comfortNoiseHband
[
2
]
[
PART_LEN1
]
const
float
*
noisePow
const
float
*
lambda
)
;
extern
WebRtcAecComfortNoise
WebRtcAec_ComfortNoise
;
typedef
void
(
*
WebRtcAecSubBandCoherence
)
(
AecCore
*
aec
float
efw
[
2
]
[
PART_LEN1
]
float
dfw
[
2
]
[
PART_LEN1
]
float
xfw
[
2
]
[
PART_LEN1
]
float
*
fft
float
*
cohde
float
*
cohxd
int
*
extreme_filter_divergence
)
;
extern
WebRtcAecSubBandCoherence
WebRtcAec_SubbandCoherence
;
typedef
int
(
*
WebRtcAecPartitionDelay
)
(
const
AecCore
*
aec
)
;
extern
WebRtcAecPartitionDelay
WebRtcAec_PartitionDelay
;
typedef
void
(
*
WebRtcAecStoreAsComplex
)
(
const
float
*
data
float
data_complex
[
2
]
[
PART_LEN1
]
)
;
extern
WebRtcAecStoreAsComplex
WebRtcAec_StoreAsComplex
;
typedef
void
(
*
WebRtcAecWindowData
)
(
float
*
x_windowed
const
float
*
x
)
;
extern
WebRtcAecWindowData
WebRtcAec_WindowData
;
#
endif
