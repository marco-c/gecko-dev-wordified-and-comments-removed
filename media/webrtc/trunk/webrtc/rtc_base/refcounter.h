#
ifndef
RTC_BASE_REFCOUNTER_H_
#
define
RTC_BASE_REFCOUNTER_H_
#
include
"
rtc_base
/
atomicops
.
h
"
#
include
"
rtc_base
/
refcount
.
h
"
namespace
webrtc
{
namespace
webrtc_impl
{
class
RefCounter
{
public
:
explicit
RefCounter
(
int
ref_count
)
:
ref_count_
(
ref_count
)
{
}
RefCounter
(
)
=
delete
;
void
IncRef
(
)
{
rtc
:
:
AtomicOps
:
:
Increment
(
&
ref_count_
)
;
}
rtc
:
:
RefCountReleaseStatus
DecRef
(
)
{
return
(
rtc
:
:
AtomicOps
:
:
Decrement
(
&
ref_count_
)
=
=
0
)
?
rtc
:
:
RefCountReleaseStatus
:
:
kDroppedLastRef
:
rtc
:
:
RefCountReleaseStatus
:
:
kOtherRefsRemained
;
}
bool
HasOneRef
(
)
const
{
return
rtc
:
:
AtomicOps
:
:
AcquireLoad
(
&
ref_count_
)
=
=
1
;
}
private
:
volatile
int
ref_count_
;
}
;
}
}
#
endif
