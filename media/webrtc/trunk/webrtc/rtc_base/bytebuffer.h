#
ifndef
RTC_BASE_BYTEBUFFER_H_
#
define
RTC_BASE_BYTEBUFFER_H_
#
include
<
string
>
#
include
"
rtc_base
/
basictypes
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
namespace
rtc
{
class
ByteBuffer
{
public
:
enum
ByteOrder
{
ORDER_NETWORK
=
0
ORDER_HOST
}
;
explicit
ByteBuffer
(
ByteOrder
byte_order
)
:
byte_order_
(
byte_order
)
{
}
ByteOrder
Order
(
)
const
{
return
byte_order_
;
}
private
:
ByteOrder
byte_order_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
ByteBuffer
)
;
}
;
class
ByteBufferWriter
:
public
ByteBuffer
{
public
:
ByteBufferWriter
(
)
;
explicit
ByteBufferWriter
(
ByteOrder
byte_order
)
;
ByteBufferWriter
(
const
char
*
bytes
size_t
len
)
;
ByteBufferWriter
(
const
char
*
bytes
size_t
len
ByteOrder
byte_order
)
;
~
ByteBufferWriter
(
)
;
const
char
*
Data
(
)
const
{
return
bytes_
;
}
size_t
Length
(
)
const
{
return
end_
;
}
size_t
Capacity
(
)
const
{
return
size_
;
}
void
WriteUInt8
(
uint8_t
val
)
;
void
WriteUInt16
(
uint16_t
val
)
;
void
WriteUInt24
(
uint32_t
val
)
;
void
WriteUInt32
(
uint32_t
val
)
;
void
WriteUInt64
(
uint64_t
val
)
;
void
WriteUVarint
(
uint64_t
val
)
;
void
WriteString
(
const
std
:
:
string
&
val
)
;
void
WriteBytes
(
const
char
*
val
size_t
len
)
;
char
*
ReserveWriteBuffer
(
size_t
len
)
;
void
Resize
(
size_t
size
)
;
void
Clear
(
)
;
private
:
void
Construct
(
const
char
*
bytes
size_t
size
)
;
char
*
bytes_
;
size_t
size_
;
size_t
end_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
ByteBufferWriter
)
;
}
;
class
ByteBufferReader
:
public
ByteBuffer
{
public
:
ByteBufferReader
(
const
char
*
bytes
size_t
len
)
;
ByteBufferReader
(
const
char
*
bytes
size_t
len
ByteOrder
byte_order
)
;
explicit
ByteBufferReader
(
const
char
*
bytes
)
;
explicit
ByteBufferReader
(
const
Buffer
&
buf
)
;
explicit
ByteBufferReader
(
const
ByteBufferWriter
&
buf
)
;
const
char
*
Data
(
)
const
{
return
bytes_
+
start_
;
}
size_t
Length
(
)
const
{
return
end_
-
start_
;
}
bool
ReadUInt8
(
uint8_t
*
val
)
;
bool
ReadUInt16
(
uint16_t
*
val
)
;
bool
ReadUInt24
(
uint32_t
*
val
)
;
bool
ReadUInt32
(
uint32_t
*
val
)
;
bool
ReadUInt64
(
uint64_t
*
val
)
;
bool
ReadUVarint
(
uint64_t
*
val
)
;
bool
ReadBytes
(
char
*
val
size_t
len
)
;
bool
ReadString
(
std
:
:
string
*
val
size_t
len
)
;
bool
Consume
(
size_t
size
)
;
private
:
void
Construct
(
const
char
*
bytes
size_t
size
)
;
const
char
*
bytes_
;
size_t
size_
;
size_t
start_
;
size_t
end_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
ByteBufferReader
)
;
}
;
}
#
endif
