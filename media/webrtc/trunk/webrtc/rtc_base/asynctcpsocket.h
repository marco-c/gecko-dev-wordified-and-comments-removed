#
ifndef
RTC_BASE_ASYNCTCPSOCKET_H_
#
define
RTC_BASE_ASYNCTCPSOCKET_H_
#
include
<
memory
>
#
include
"
rtc_base
/
asyncpacketsocket
.
h
"
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
rtc_base
/
socketfactory
.
h
"
namespace
rtc
{
class
AsyncTCPSocketBase
:
public
AsyncPacketSocket
{
public
:
AsyncTCPSocketBase
(
AsyncSocket
*
socket
bool
listen
size_t
max_packet_size
)
;
~
AsyncTCPSocketBase
(
)
override
;
int
Send
(
const
void
*
pv
size_t
cb
const
rtc
:
:
PacketOptions
&
options
)
override
=
0
;
virtual
void
ProcessInput
(
char
*
data
size_t
*
len
)
=
0
;
virtual
void
HandleIncomingConnection
(
AsyncSocket
*
socket
)
=
0
;
SocketAddress
GetLocalAddress
(
)
const
override
;
SocketAddress
GetRemoteAddress
(
)
const
override
;
int
SendTo
(
const
void
*
pv
size_t
cb
const
SocketAddress
&
addr
const
rtc
:
:
PacketOptions
&
options
)
override
;
int
Close
(
)
override
;
State
GetState
(
)
const
override
;
int
GetOption
(
Socket
:
:
Option
opt
int
*
value
)
override
;
int
SetOption
(
Socket
:
:
Option
opt
int
value
)
override
;
int
GetError
(
)
const
override
;
void
SetError
(
int
error
)
override
;
protected
:
static
AsyncSocket
*
ConnectSocket
(
AsyncSocket
*
socket
const
SocketAddress
&
bind_address
const
SocketAddress
&
remote_address
)
;
virtual
int
SendRaw
(
const
void
*
pv
size_t
cb
)
;
int
FlushOutBuffer
(
)
;
void
AppendToOutBuffer
(
const
void
*
pv
size_t
cb
)
;
bool
IsOutBufferEmpty
(
)
const
{
return
outbuf_
.
size
(
)
=
=
0
;
}
void
ClearOutBuffer
(
)
{
outbuf_
.
Clear
(
)
;
}
private
:
void
OnConnectEvent
(
AsyncSocket
*
socket
)
;
void
OnReadEvent
(
AsyncSocket
*
socket
)
;
void
OnWriteEvent
(
AsyncSocket
*
socket
)
;
void
OnCloseEvent
(
AsyncSocket
*
socket
int
error
)
;
std
:
:
unique_ptr
<
AsyncSocket
>
socket_
;
bool
listen_
;
Buffer
inbuf_
;
Buffer
outbuf_
;
size_t
max_insize_
;
size_t
max_outsize_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
AsyncTCPSocketBase
)
;
}
;
class
AsyncTCPSocket
:
public
AsyncTCPSocketBase
{
public
:
static
AsyncTCPSocket
*
Create
(
AsyncSocket
*
socket
const
SocketAddress
&
bind_address
const
SocketAddress
&
remote_address
)
;
AsyncTCPSocket
(
AsyncSocket
*
socket
bool
listen
)
;
~
AsyncTCPSocket
(
)
override
{
}
int
Send
(
const
void
*
pv
size_t
cb
const
rtc
:
:
PacketOptions
&
options
)
override
;
void
ProcessInput
(
char
*
data
size_t
*
len
)
override
;
void
HandleIncomingConnection
(
AsyncSocket
*
socket
)
override
;
private
:
RTC_DISALLOW_COPY_AND_ASSIGN
(
AsyncTCPSocket
)
;
}
;
}
#
endif
