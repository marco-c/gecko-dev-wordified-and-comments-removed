#
ifndef
RTC_BASE_OPENSSLADAPTER_H_
#
define
RTC_BASE_OPENSSLADAPTER_H_
#
include
<
map
>
#
include
<
string
>
#
include
"
rtc_base
/
buffer
.
h
"
#
include
"
rtc_base
/
messagehandler
.
h
"
#
include
"
rtc_base
/
messagequeue
.
h
"
#
include
"
rtc_base
/
opensslidentity
.
h
"
#
include
"
rtc_base
/
ssladapter
.
h
"
typedef
struct
ssl_st
SSL
;
typedef
struct
ssl_ctx_st
SSL_CTX
;
typedef
struct
x509_store_ctx_st
X509_STORE_CTX
;
typedef
struct
ssl_session_st
SSL_SESSION
;
namespace
rtc
{
class
OpenSSLAdapterFactory
;
class
OpenSSLAdapter
:
public
SSLAdapter
public
MessageHandler
{
public
:
static
bool
InitializeSSL
(
VerificationCallback
callback
)
;
static
bool
InitializeSSLThread
(
)
;
static
bool
CleanupSSL
(
)
;
explicit
OpenSSLAdapter
(
AsyncSocket
*
socket
OpenSSLAdapterFactory
*
factory
=
nullptr
)
;
~
OpenSSLAdapter
(
)
override
;
void
SetIgnoreBadCert
(
bool
ignore
)
override
;
void
SetAlpnProtocols
(
const
std
:
:
vector
<
std
:
:
string
>
&
protos
)
override
;
void
SetEllipticCurves
(
const
std
:
:
vector
<
std
:
:
string
>
&
curves
)
override
;
void
SetMode
(
SSLMode
mode
)
override
;
void
SetIdentity
(
SSLIdentity
*
identity
)
override
;
void
SetRole
(
SSLRole
role
)
override
;
AsyncSocket
*
Accept
(
SocketAddress
*
paddr
)
override
;
int
StartSSL
(
const
char
*
hostname
bool
restartable
)
override
;
int
Send
(
const
void
*
pv
size_t
cb
)
override
;
int
SendTo
(
const
void
*
pv
size_t
cb
const
SocketAddress
&
addr
)
override
;
int
Recv
(
void
*
pv
size_t
cb
int64_t
*
timestamp
)
override
;
int
RecvFrom
(
void
*
pv
size_t
cb
SocketAddress
*
paddr
int64_t
*
timestamp
)
override
;
int
Close
(
)
override
;
ConnState
GetState
(
)
const
override
;
bool
IsResumedSession
(
)
override
;
static
SSL_CTX
*
CreateContext
(
SSLMode
mode
bool
enable_cache
)
;
protected
:
void
OnConnectEvent
(
AsyncSocket
*
socket
)
override
;
void
OnReadEvent
(
AsyncSocket
*
socket
)
override
;
void
OnWriteEvent
(
AsyncSocket
*
socket
)
override
;
void
OnCloseEvent
(
AsyncSocket
*
socket
int
err
)
override
;
private
:
enum
SSLState
{
SSL_NONE
SSL_WAIT
SSL_CONNECTING
SSL_CONNECTED
SSL_ERROR
}
;
enum
{
MSG_TIMEOUT
}
;
int
BeginSSL
(
)
;
int
ContinueSSL
(
)
;
void
Error
(
const
char
*
context
int
err
bool
signal
=
true
)
;
void
Cleanup
(
)
;
int
DoSslWrite
(
const
void
*
pv
size_t
cb
int
*
error
)
;
void
OnMessage
(
Message
*
msg
)
override
;
static
bool
VerifyServerName
(
SSL
*
ssl
const
char
*
host
bool
ignore_bad_cert
)
;
bool
SSLPostConnectionCheck
(
SSL
*
ssl
const
char
*
host
)
;
#
if
!
defined
(
NDEBUG
)
static
void
SSLInfoCallback
(
const
SSL
*
ssl
int
where
int
ret
)
;
#
endif
static
int
SSLVerifyCallback
(
int
ok
X509_STORE_CTX
*
store
)
;
static
VerificationCallback
custom_verify_callback_
;
friend
class
OpenSSLStreamAdapter
;
static
int
NewSSLSessionCallback
(
SSL
*
ssl
SSL_SESSION
*
session
)
;
static
bool
ConfigureTrustedRootCertificates
(
SSL_CTX
*
ctx
)
;
OpenSSLAdapterFactory
*
factory_
;
SSLState
state_
;
std
:
:
unique_ptr
<
OpenSSLIdentity
>
identity_
;
SSLRole
role_
;
bool
ssl_read_needs_write_
;
bool
ssl_write_needs_read_
;
bool
restartable_
;
Buffer
pending_data_
;
SSL
*
ssl_
;
SSL_CTX
*
ssl_ctx_
;
std
:
:
string
ssl_host_name_
;
SSLMode
ssl_mode_
;
bool
ignore_bad_cert_
;
std
:
:
vector
<
std
:
:
string
>
alpn_protocols_
;
std
:
:
vector
<
std
:
:
string
>
elliptic_curves_
;
bool
custom_verification_succeeded_
;
}
;
std
:
:
string
TransformAlpnProtocols
(
const
std
:
:
vector
<
std
:
:
string
>
&
protos
)
;
class
OpenSSLAdapterFactory
:
public
SSLAdapterFactory
{
public
:
OpenSSLAdapterFactory
(
)
;
~
OpenSSLAdapterFactory
(
)
override
;
void
SetMode
(
SSLMode
mode
)
override
;
OpenSSLAdapter
*
CreateAdapter
(
AsyncSocket
*
socket
)
override
;
static
OpenSSLAdapterFactory
*
Create
(
)
;
private
:
SSL_CTX
*
ssl_ctx
(
)
{
return
ssl_ctx_
;
}
SSL_SESSION
*
LookupSession
(
const
std
:
:
string
&
hostname
)
;
void
AddSession
(
const
std
:
:
string
&
hostname
SSL_SESSION
*
session
)
;
friend
class
OpenSSLAdapter
;
SSLMode
ssl_mode_
;
SSL_CTX
*
ssl_ctx_
;
std
:
:
map
<
std
:
:
string
SSL_SESSION
*
>
sessions_
;
}
;
}
#
endif
