#
include
"
rtc_base
/
fileutils
.
h
"
#
include
"
rtc_base
/
arraysize
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
pathutils
.
h
"
#
include
"
rtc_base
/
stringutils
.
h
"
#
if
defined
(
WEBRTC_WIN
)
#
include
"
rtc_base
/
win32filesystem
.
h
"
#
else
#
include
"
rtc_base
/
unixfilesystem
.
h
"
#
endif
#
if
!
defined
(
WEBRTC_WIN
)
#
define
MAX_PATH
260
#
endif
namespace
rtc
{
DirectoryIterator
:
:
DirectoryIterator
(
)
#
ifdef
WEBRTC_WIN
:
handle_
(
INVALID_HANDLE_VALUE
)
{
#
else
:
dir_
(
nullptr
)
dirent_
(
nullptr
)
{
#
endif
}
DirectoryIterator
:
:
~
DirectoryIterator
(
)
{
#
if
defined
(
WEBRTC_WIN
)
if
(
handle_
!
=
INVALID_HANDLE_VALUE
)
:
:
FindClose
(
handle_
)
;
#
else
if
(
dir_
)
closedir
(
dir_
)
;
#
endif
}
bool
DirectoryIterator
:
:
Iterate
(
const
Pathname
&
dir
)
{
directory_
=
dir
.
pathname
(
)
;
#
if
defined
(
WEBRTC_WIN
)
if
(
handle_
!
=
INVALID_HANDLE_VALUE
)
:
:
FindClose
(
handle_
)
;
std
:
:
string
d
=
dir
.
pathname
(
)
+
'
*
'
;
handle_
=
:
:
FindFirstFile
(
ToUtf16
(
d
)
.
c_str
(
)
&
data_
)
;
if
(
handle_
=
=
INVALID_HANDLE_VALUE
)
return
false
;
#
else
if
(
dir_
!
=
nullptr
)
closedir
(
dir_
)
;
dir_
=
:
:
opendir
(
directory_
.
c_str
(
)
)
;
if
(
dir_
=
=
nullptr
)
return
false
;
dirent_
=
readdir
(
dir_
)
;
if
(
dirent_
=
=
nullptr
)
return
false
;
if
(
:
:
stat
(
std
:
:
string
(
directory_
+
Name
(
)
)
.
c_str
(
)
&
stat_
)
!
=
0
)
return
false
;
#
endif
return
true
;
}
bool
DirectoryIterator
:
:
Next
(
)
{
#
if
defined
(
WEBRTC_WIN
)
return
:
:
FindNextFile
(
handle_
&
data_
)
=
=
TRUE
;
#
else
dirent_
=
:
:
readdir
(
dir_
)
;
if
(
dirent_
=
=
nullptr
)
return
false
;
return
:
:
stat
(
std
:
:
string
(
directory_
+
Name
(
)
)
.
c_str
(
)
&
stat_
)
=
=
0
;
#
endif
}
bool
DirectoryIterator
:
:
IsDirectory
(
)
const
{
#
if
defined
(
WEBRTC_WIN
)
return
(
data_
.
dwFileAttributes
&
FILE_ATTRIBUTE_DIRECTORY
)
!
=
FALSE
;
#
else
return
S_ISDIR
(
stat_
.
st_mode
)
;
#
endif
}
std
:
:
string
DirectoryIterator
:
:
Name
(
)
const
{
#
if
defined
(
WEBRTC_WIN
)
return
ToUtf8
(
data_
.
cFileName
)
;
#
else
RTC_DCHECK
(
dirent_
)
;
return
dirent_
-
>
d_name
;
#
endif
}
FilesystemInterface
*
Filesystem
:
:
default_filesystem_
=
nullptr
;
FilesystemInterface
*
Filesystem
:
:
EnsureDefaultFilesystem
(
)
{
if
(
!
default_filesystem_
)
{
#
if
defined
(
WEBRTC_WIN
)
default_filesystem_
=
new
Win32Filesystem
(
)
;
#
else
default_filesystem_
=
new
UnixFilesystem
(
)
;
#
endif
}
return
default_filesystem_
;
}
}
