#
ifndef
RTC_BASE_ASYNCINVOKER_INL_H_
#
define
RTC_BASE_ASYNCINVOKER_INL_H_
#
include
"
rtc_base
/
bind
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
rtc_base
/
event
.
h
"
#
include
"
rtc_base
/
messagehandler
.
h
"
#
include
"
rtc_base
/
refcountedobject
.
h
"
#
include
"
rtc_base
/
scoped_ref_ptr
.
h
"
#
include
"
rtc_base
/
sigslot
.
h
"
#
include
"
rtc_base
/
thread
.
h
"
#
include
"
rtc_base
/
thread_annotations
.
h
"
namespace
rtc
{
class
AsyncInvoker
;
class
AsyncClosure
{
public
:
explicit
AsyncClosure
(
AsyncInvoker
*
invoker
)
;
virtual
~
AsyncClosure
(
)
;
virtual
void
Execute
(
)
=
0
;
protected
:
AsyncInvoker
*
invoker_
;
scoped_refptr
<
RefCountedObject
<
Event
>
>
invocation_complete_
;
}
;
template
<
class
FunctorT
>
class
FireAndForgetAsyncClosure
:
public
AsyncClosure
{
public
:
explicit
FireAndForgetAsyncClosure
(
AsyncInvoker
*
invoker
const
FunctorT
&
functor
)
:
AsyncClosure
(
invoker
)
functor_
(
functor
)
{
}
virtual
void
Execute
(
)
{
functor_
(
)
;
}
private
:
FunctorT
functor_
;
}
;
}
#
endif
