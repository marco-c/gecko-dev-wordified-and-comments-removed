#
include
"
rtc_base
/
nethelpers
.
h
"
#
include
<
memory
>
#
if
defined
(
WEBRTC_WIN
)
#
include
<
ws2spi
.
h
>
#
include
<
ws2tcpip
.
h
>
#
include
"
rtc_base
/
win32
.
h
"
#
endif
#
if
defined
(
WEBRTC_POSIX
)
&
&
!
defined
(
__native_client__
)
#
if
defined
(
WEBRTC_ANDROID
)
#
include
"
rtc_base
/
ifaddrs
-
android
.
h
"
#
else
#
include
<
ifaddrs
.
h
>
#
endif
#
endif
#
include
"
rtc_base
/
byteorder
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
#
include
"
rtc_base
/
logging
.
h
"
#
include
"
rtc_base
/
signalthread
.
h
"
namespace
rtc
{
int
ResolveHostname
(
const
std
:
:
string
&
hostname
int
family
std
:
:
vector
<
IPAddress
>
*
addresses
)
{
#
ifdef
__native_client__
RTC_NOTREACHED
(
)
;
RTC_LOG
(
LS_WARNING
)
<
<
"
ResolveHostname
(
)
is
not
implemented
for
NaCl
"
;
return
-
1
;
#
else
if
(
!
addresses
)
{
return
-
1
;
}
addresses
-
>
clear
(
)
;
struct
addrinfo
*
result
=
nullptr
;
struct
addrinfo
hints
=
{
0
}
;
hints
.
ai_family
=
family
;
hints
.
ai_flags
=
AI_ADDRCONFIG
;
int
ret
=
getaddrinfo
(
hostname
.
c_str
(
)
nullptr
&
hints
&
result
)
;
if
(
ret
!
=
0
)
{
return
ret
;
}
struct
addrinfo
*
cursor
=
result
;
for
(
;
cursor
;
cursor
=
cursor
-
>
ai_next
)
{
if
(
family
=
=
AF_UNSPEC
|
|
cursor
-
>
ai_family
=
=
family
)
{
IPAddress
ip
;
if
(
IPFromAddrInfo
(
cursor
&
ip
)
)
{
addresses
-
>
push_back
(
ip
)
;
}
}
}
freeaddrinfo
(
result
)
;
return
0
;
#
endif
}
AsyncResolver
:
:
AsyncResolver
(
)
:
SignalThread
(
false
)
error_
(
-
1
)
{
}
AsyncResolver
:
:
~
AsyncResolver
(
)
=
default
;
void
AsyncResolver
:
:
Start
(
const
SocketAddress
&
addr
)
{
addr_
=
addr
;
SignalThread
:
:
Start
(
)
;
}
bool
AsyncResolver
:
:
GetResolvedAddress
(
int
family
SocketAddress
*
addr
)
const
{
if
(
error_
!
=
0
|
|
addresses_
.
empty
(
)
)
return
false
;
*
addr
=
addr_
;
for
(
size_t
i
=
0
;
i
<
addresses_
.
size
(
)
;
+
+
i
)
{
if
(
family
=
=
addresses_
[
i
]
.
family
(
)
)
{
addr
-
>
SetResolvedIP
(
addresses_
[
i
]
)
;
return
true
;
}
}
return
false
;
}
int
AsyncResolver
:
:
GetError
(
)
const
{
return
error_
;
}
void
AsyncResolver
:
:
Destroy
(
bool
wait
)
{
SignalThread
:
:
Destroy
(
wait
)
;
}
void
AsyncResolver
:
:
DoWork
(
)
{
error_
=
ResolveHostname
(
addr_
.
hostname
(
)
.
c_str
(
)
addr_
.
family
(
)
&
addresses_
)
;
}
void
AsyncResolver
:
:
OnWorkDone
(
)
{
SignalDone
(
this
)
;
}
const
char
*
inet_ntop
(
int
af
const
void
*
src
char
*
dst
socklen_t
size
)
{
#
if
defined
(
WEBRTC_WIN
)
return
win32_inet_ntop
(
af
src
dst
size
)
;
#
else
return
:
:
inet_ntop
(
af
src
dst
size
)
;
#
endif
}
int
inet_pton
(
int
af
const
char
*
src
void
*
dst
)
{
#
if
defined
(
WEBRTC_WIN
)
return
win32_inet_pton
(
af
src
dst
)
;
#
else
return
:
:
inet_pton
(
af
src
dst
)
;
#
endif
}
bool
HasIPv4Enabled
(
)
{
#
if
defined
(
WEBRTC_POSIX
)
&
&
!
defined
(
__native_client__
)
bool
has_ipv4
=
false
;
struct
ifaddrs
*
ifa
;
if
(
getifaddrs
(
&
ifa
)
<
0
)
{
return
false
;
}
for
(
struct
ifaddrs
*
cur
=
ifa
;
cur
!
=
nullptr
;
cur
=
cur
-
>
ifa_next
)
{
if
(
cur
-
>
ifa_addr
-
>
sa_family
=
=
AF_INET
)
{
has_ipv4
=
true
;
break
;
}
}
freeifaddrs
(
ifa
)
;
return
has_ipv4
;
#
else
return
true
;
#
endif
}
bool
HasIPv6Enabled
(
)
{
#
if
defined
(
WEBRTC_WIN
)
if
(
IsWindowsVistaOrLater
(
)
)
{
return
true
;
}
if
(
!
IsWindowsXpOrLater
(
)
)
{
return
false
;
}
DWORD
protbuff_size
=
4096
;
std
:
:
unique_ptr
<
char
[
]
>
protocols
;
LPWSAPROTOCOL_INFOW
protocol_infos
=
nullptr
;
int
requested_protocols
[
2
]
=
{
AF_INET6
0
}
;
int
err
=
0
;
int
ret
=
0
;
do
{
protocols
.
reset
(
new
char
[
protbuff_size
]
)
;
protocol_infos
=
reinterpret_cast
<
LPWSAPROTOCOL_INFOW
>
(
protocols
.
get
(
)
)
;
ret
=
WSCEnumProtocols
(
requested_protocols
protocol_infos
&
protbuff_size
&
err
)
;
}
while
(
ret
=
=
SOCKET_ERROR
&
&
err
=
=
WSAENOBUFS
)
;
if
(
ret
=
=
SOCKET_ERROR
)
{
return
false
;
}
for
(
int
i
=
0
;
i
<
ret
;
+
+
i
)
{
if
(
protocol_infos
[
i
]
.
iAddressFamily
=
=
AF_INET6
)
{
return
true
;
}
}
return
false
;
#
elif
defined
(
WEBRTC_POSIX
)
&
&
!
defined
(
__native_client__
)
bool
has_ipv6
=
false
;
struct
ifaddrs
*
ifa
;
if
(
getifaddrs
(
&
ifa
)
<
0
)
{
return
false
;
}
for
(
struct
ifaddrs
*
cur
=
ifa
;
cur
!
=
nullptr
;
cur
=
cur
-
>
ifa_next
)
{
if
(
cur
-
>
ifa_addr
-
>
sa_family
=
=
AF_INET6
)
{
has_ipv6
=
true
;
break
;
}
}
freeifaddrs
(
ifa
)
;
return
has_ipv6
;
#
else
return
true
;
#
endif
}
}
