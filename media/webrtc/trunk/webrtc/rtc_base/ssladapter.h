#
ifndef
RTC_BASE_SSLADAPTER_H_
#
define
RTC_BASE_SSLADAPTER_H_
#
include
"
rtc_base
/
asyncsocket
.
h
"
#
include
"
rtc_base
/
sslstreamadapter
.
h
"
namespace
rtc
{
class
SSLAdapter
;
class
SSLAdapterFactory
{
public
:
virtual
~
SSLAdapterFactory
(
)
{
}
virtual
void
SetMode
(
SSLMode
mode
)
=
0
;
virtual
SSLAdapter
*
CreateAdapter
(
AsyncSocket
*
socket
)
=
0
;
static
SSLAdapterFactory
*
Create
(
)
;
}
;
class
SSLAdapter
:
public
AsyncSocketAdapter
{
public
:
explicit
SSLAdapter
(
AsyncSocket
*
socket
)
:
AsyncSocketAdapter
(
socket
)
{
}
virtual
void
SetIgnoreBadCert
(
bool
ignore
)
=
0
;
virtual
void
SetAlpnProtocols
(
const
std
:
:
vector
<
std
:
:
string
>
&
protos
)
=
0
;
virtual
void
SetEllipticCurves
(
const
std
:
:
vector
<
std
:
:
string
>
&
curves
)
=
0
;
virtual
void
SetMode
(
SSLMode
mode
)
=
0
;
virtual
void
SetIdentity
(
SSLIdentity
*
identity
)
=
0
;
virtual
void
SetRole
(
SSLRole
role
)
=
0
;
virtual
int
StartSSL
(
const
char
*
hostname
bool
restartable
=
false
)
=
0
;
virtual
bool
IsResumedSession
(
)
=
0
;
static
SSLAdapter
*
Create
(
AsyncSocket
*
socket
)
;
}
;
typedef
bool
(
*
VerificationCallback
)
(
void
*
cert
)
;
bool
InitializeSSL
(
VerificationCallback
callback
=
nullptr
)
;
bool
InitializeSSLThread
(
)
;
bool
CleanupSSL
(
)
;
}
#
endif
