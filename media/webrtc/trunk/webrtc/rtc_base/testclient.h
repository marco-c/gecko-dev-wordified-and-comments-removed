#
ifndef
RTC_BASE_TESTCLIENT_H_
#
define
RTC_BASE_TESTCLIENT_H_
#
include
<
memory
>
#
include
<
vector
>
#
include
"
rtc_base
/
asyncudpsocket
.
h
"
#
include
"
rtc_base
/
constructormagic
.
h
"
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
rtc_base
/
fakeclock
.
h
"
namespace
rtc
{
class
TestClient
:
public
sigslot
:
:
has_slots
<
>
{
public
:
struct
Packet
{
Packet
(
const
SocketAddress
&
a
const
char
*
b
size_t
s
const
PacketTime
&
packet_time
)
;
Packet
(
const
Packet
&
p
)
;
virtual
~
Packet
(
)
;
SocketAddress
addr
;
char
*
buf
;
size_t
size
;
PacketTime
packet_time
;
}
;
static
const
int
kTimeoutMs
=
5000
;
explicit
TestClient
(
std
:
:
unique_ptr
<
AsyncPacketSocket
>
socket
)
;
TestClient
(
std
:
:
unique_ptr
<
AsyncPacketSocket
>
socket
FakeClock
*
fake_clock
)
;
~
TestClient
(
)
override
;
SocketAddress
address
(
)
const
{
return
socket_
-
>
GetLocalAddress
(
)
;
}
SocketAddress
remote_address
(
)
const
{
return
socket_
-
>
GetRemoteAddress
(
)
;
}
bool
CheckConnState
(
AsyncPacketSocket
:
:
State
state
)
;
bool
CheckConnected
(
)
{
return
CheckConnState
(
AsyncPacketSocket
:
:
STATE_CONNECTED
)
;
}
int
Send
(
const
char
*
buf
size_t
size
)
;
int
SendTo
(
const
char
*
buf
size_t
size
const
SocketAddress
&
dest
)
;
std
:
:
unique_ptr
<
Packet
>
NextPacket
(
int
timeout_ms
)
;
bool
CheckNextPacket
(
const
char
*
buf
size_t
len
SocketAddress
*
addr
)
;
bool
CheckNoPacket
(
)
;
int
GetError
(
)
;
int
SetOption
(
Socket
:
:
Option
opt
int
value
)
;
bool
ready_to_send
(
)
const
{
return
ready_to_send_count
(
)
>
0
;
}
int
ready_to_send_count
(
)
const
{
return
ready_to_send_count_
;
}
private
:
static
const
int
kNoPacketTimeoutMs
=
1000
;
Socket
:
:
ConnState
GetState
(
)
;
void
OnPacket
(
AsyncPacketSocket
*
socket
const
char
*
buf
size_t
len
const
SocketAddress
&
remote_addr
const
PacketTime
&
packet_time
)
;
void
OnReadyToSend
(
AsyncPacketSocket
*
socket
)
;
bool
CheckTimestamp
(
int64_t
packet_timestamp
)
;
void
AdvanceTime
(
int
ms
)
;
FakeClock
*
fake_clock_
=
nullptr
;
CriticalSection
crit_
;
std
:
:
unique_ptr
<
AsyncPacketSocket
>
socket_
;
std
:
:
vector
<
std
:
:
unique_ptr
<
Packet
>
>
packets_
;
int
ready_to_send_count_
=
0
;
int64_t
prev_packet_timestamp_
;
RTC_DISALLOW_COPY_AND_ASSIGN
(
TestClient
)
;
}
;
}
#
endif
