#
include
"
rtc_base
/
bufferqueue
.
h
"
#
include
"
rtc_base
/
gunit
.
h
"
namespace
rtc
{
TEST
(
BufferQueueTest
TestAll
)
{
const
size_t
kSize
=
16
;
const
char
in
[
kSize
*
2
+
1
]
=
"
0123456789ABCDEFGHIJKLMNOPQRSTUV
"
;
char
out
[
kSize
*
2
]
;
size_t
bytes
;
BufferQueue
queue1
(
1
kSize
)
;
BufferQueue
queue2
(
2
kSize
)
;
EXPECT_EQ
(
0u
queue1
.
size
(
)
)
;
EXPECT_FALSE
(
queue1
.
ReadFront
(
out
kSize
&
bytes
)
)
;
EXPECT_TRUE
(
queue1
.
WriteBack
(
in
kSize
&
bytes
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
1u
queue1
.
size
(
)
)
;
EXPECT_FALSE
(
queue1
.
WriteBack
(
in
kSize
&
bytes
)
)
;
EXPECT_EQ
(
1u
queue1
.
size
(
)
)
;
EXPECT_TRUE
(
queue1
.
ReadFront
(
out
kSize
&
bytes
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
)
)
;
EXPECT_FALSE
(
queue1
.
ReadFront
(
out
kSize
&
bytes
)
)
;
EXPECT_EQ
(
0u
queue1
.
size
(
)
)
;
EXPECT_TRUE
(
queue1
.
WriteBack
(
in
kSize
&
bytes
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
1u
queue1
.
size
(
)
)
;
EXPECT_TRUE
(
queue1
.
ReadFront
(
out
kSize
*
2
&
bytes
)
)
;
EXPECT_EQ
(
kSize
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
)
)
;
EXPECT_EQ
(
0u
queue1
.
size
(
)
)
;
EXPECT_TRUE
(
queue2
.
WriteBack
(
in
kSize
/
2
&
bytes
)
)
;
EXPECT_EQ
(
1u
queue2
.
size
(
)
)
;
EXPECT_TRUE
(
queue2
.
WriteBack
(
in
+
kSize
/
2
kSize
/
2
&
bytes
)
)
;
EXPECT_EQ
(
2u
queue2
.
size
(
)
)
;
EXPECT_TRUE
(
queue2
.
ReadFront
(
out
kSize
&
bytes
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
/
2
)
)
;
EXPECT_EQ
(
1u
queue2
.
size
(
)
)
;
EXPECT_TRUE
(
queue2
.
ReadFront
(
out
kSize
&
bytes
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
+
kSize
/
2
out
kSize
/
2
)
)
;
EXPECT_EQ
(
0u
queue2
.
size
(
)
)
;
EXPECT_TRUE
(
queue2
.
WriteBack
(
in
kSize
/
2
&
bytes
)
)
;
EXPECT_EQ
(
1u
queue2
.
size
(
)
)
;
EXPECT_TRUE
(
queue2
.
WriteBack
(
in
+
kSize
/
2
kSize
/
2
&
bytes
)
)
;
EXPECT_EQ
(
2u
queue2
.
size
(
)
)
;
EXPECT_TRUE
(
queue2
.
ReadFront
(
out
kSize
/
4
&
bytes
)
)
;
EXPECT_EQ
(
kSize
/
4
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
out
kSize
/
4
)
)
;
EXPECT_EQ
(
1u
queue2
.
size
(
)
)
;
EXPECT_TRUE
(
queue2
.
ReadFront
(
out
kSize
&
bytes
)
)
;
EXPECT_EQ
(
kSize
/
2
bytes
)
;
EXPECT_EQ
(
0
memcmp
(
in
+
kSize
/
2
out
kSize
/
2
)
)
;
EXPECT_EQ
(
0u
queue2
.
size
(
)
)
;
}
}
