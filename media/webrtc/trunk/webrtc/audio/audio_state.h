#
ifndef
WEBRTC_AUDIO_AUDIO_STATE_H_
#
define
WEBRTC_AUDIO_AUDIO_STATE_H_
#
include
"
webrtc
/
audio
/
audio_transport_proxy
.
h
"
#
include
"
webrtc
/
audio
/
scoped_voe_interface
.
h
"
#
include
"
webrtc
/
base
/
constructormagic
.
h
"
#
include
"
webrtc
/
base
/
criticalsection
.
h
"
#
include
"
webrtc
/
base
/
thread_checker
.
h
"
#
include
"
webrtc
/
call
/
audio_state
.
h
"
#
include
"
webrtc
/
voice_engine
/
include
/
voe_base
.
h
"
namespace
webrtc
{
namespace
internal
{
class
AudioState
final
:
public
webrtc
:
:
AudioState
public
webrtc
:
:
VoiceEngineObserver
{
public
:
explicit
AudioState
(
const
AudioState
:
:
Config
&
config
)
;
~
AudioState
(
)
override
;
VoiceEngine
*
voice_engine
(
)
;
rtc
:
:
scoped_refptr
<
AudioMixer
>
mixer
(
)
;
bool
typing_noise_detected
(
)
const
;
private
:
int
AddRef
(
)
const
override
;
int
Release
(
)
const
override
;
void
CallbackOnError
(
int
channel_id
int
err_code
)
override
;
rtc
:
:
ThreadChecker
thread_checker_
;
rtc
:
:
ThreadChecker
process_thread_checker_
;
const
webrtc
:
:
AudioState
:
:
Config
config_
;
ScopedVoEInterface
<
VoEBase
>
voe_base_
;
rtc
:
:
CriticalSection
crit_sect_
;
bool
typing_noise_detected_
GUARDED_BY
(
crit_sect_
)
=
false
;
mutable
volatile
int
ref_count_
=
0
;
AudioTransportProxy
audio_transport_proxy_
;
RTC_DISALLOW_IMPLICIT_CONSTRUCTORS
(
AudioState
)
;
}
;
}
}
#
endif
