#
ifndef
WEBRTC_TOOLS_AGC_AGC_MANAGER_H_
#
define
WEBRTC_TOOLS_AGC_AGC_MANAGER_H_
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
modules
/
audio_processing
/
agc
/
agc_manager_direct
.
h
"
namespace
webrtc
{
class
Agc
;
class
AudioProcessing
;
class
CriticalSectionWrapper
;
class
MediaCallback
;
class
PreprocCallback
;
class
VoEExternalMedia
;
class
VoEVolumeControl
;
class
VoiceEngine
;
class
VolumeCallbacks
;
class
AgcManager
{
public
:
explicit
AgcManager
(
VoiceEngine
*
voe
)
;
AgcManager
(
VoEExternalMedia
*
media
VoEVolumeControl
*
volume
Agc
*
agc
AudioProcessing
*
audioproc
)
;
virtual
~
AgcManager
(
)
;
virtual
int
Enable
(
bool
enable
)
;
virtual
bool
enabled
(
)
const
{
return
enabled_
;
}
virtual
void
CaptureDeviceChanged
(
)
;
virtual
void
SetCaptureMuted
(
bool
muted
)
;
virtual
bool
capture_muted
(
)
const
{
return
direct_
-
>
capture_muted
(
)
;
}
protected
:
AgcManager
(
)
;
private
:
int
DeregisterCallbacks
(
)
;
int
CheckVolumeAndReset
(
)
;
VoEExternalMedia
*
media_
;
rtc
:
:
scoped_ptr
<
VolumeCallbacks
>
volume_callbacks_
;
rtc
:
:
scoped_ptr
<
CriticalSectionWrapper
>
crit_
;
rtc
:
:
scoped_ptr
<
AudioProcessing
>
audioproc_
;
rtc
:
:
scoped_ptr
<
AgcManagerDirect
>
direct_
;
rtc
:
:
scoped_ptr
<
MediaCallback
>
media_callback_
;
rtc
:
:
scoped_ptr
<
PreprocCallback
>
preproc_callback_
;
bool
enabled_
;
bool
initialized_
;
}
;
}
#
endif
