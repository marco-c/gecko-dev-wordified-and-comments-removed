#
ifndef
WEBRTC_TOOLS_EVENT_LOG_VISUALIZER_ANALYZER_H_
#
define
WEBRTC_TOOLS_EVENT_LOG_VISUALIZER_ANALYZER_H_
#
include
<
map
>
#
include
<
memory
>
#
include
<
set
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
#
include
"
webrtc
/
logging
/
rtc_event_log
/
rtc_event_log_parser
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
include
/
rtp_rtcp_defines
.
h
"
#
include
"
webrtc
/
modules
/
rtp_rtcp
/
source
/
rtcp_packet
.
h
"
#
include
"
webrtc
/
tools
/
event_log_visualizer
/
plot_base
.
h
"
namespace
webrtc
{
namespace
plotting
{
struct
LoggedRtpPacket
{
LoggedRtpPacket
(
uint64_t
timestamp
RTPHeader
header
size_t
total_length
)
:
timestamp
(
timestamp
)
header
(
header
)
total_length
(
total_length
)
{
}
uint64_t
timestamp
;
RTPHeader
header
;
size_t
total_length
;
}
;
struct
LoggedRtcpPacket
{
LoggedRtcpPacket
(
uint64_t
timestamp
RTCPPacketType
rtcp_type
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
rtcp_packet
)
:
timestamp
(
timestamp
)
type
(
rtcp_type
)
packet
(
std
:
:
move
(
rtcp_packet
)
)
{
}
uint64_t
timestamp
;
RTCPPacketType
type
;
std
:
:
unique_ptr
<
rtcp
:
:
RtcpPacket
>
packet
;
}
;
struct
BwePacketLossEvent
{
uint64_t
timestamp
;
int32_t
new_bitrate
;
uint8_t
fraction_loss
;
int32_t
expected_packets
;
}
;
class
EventLogAnalyzer
{
public
:
explicit
EventLogAnalyzer
(
const
ParsedRtcEventLog
&
log
)
;
void
CreatePacketGraph
(
PacketDirection
desired_direction
Plot
*
plot
)
;
void
CreateAccumulatedPacketsGraph
(
PacketDirection
desired_direction
Plot
*
plot
)
;
void
CreatePlayoutGraph
(
Plot
*
plot
)
;
void
CreateAudioLevelGraph
(
Plot
*
plot
)
;
void
CreateSequenceNumberGraph
(
Plot
*
plot
)
;
void
CreateIncomingPacketLossGraph
(
Plot
*
plot
)
;
void
CreateDelayChangeGraph
(
Plot
*
plot
)
;
void
CreateAccumulatedDelayChangeGraph
(
Plot
*
plot
)
;
void
CreateFractionLossGraph
(
Plot
*
plot
)
;
void
CreateTotalBitrateGraph
(
PacketDirection
desired_direction
Plot
*
plot
)
;
void
CreateStreamBitrateGraph
(
PacketDirection
desired_direction
Plot
*
plot
)
;
void
CreateBweSimulationGraph
(
Plot
*
plot
)
;
void
CreateNetworkDelayFeedbackGraph
(
Plot
*
plot
)
;
std
:
:
vector
<
std
:
:
pair
<
int64_t
int64_t
>
>
GetFrameTimestamps
(
)
const
;
private
:
class
StreamId
{
public
:
StreamId
(
uint32_t
ssrc
webrtc
:
:
PacketDirection
direction
)
:
ssrc_
(
ssrc
)
direction_
(
direction
)
{
}
bool
operator
<
(
const
StreamId
&
other
)
const
{
return
std
:
:
tie
(
ssrc_
direction_
)
<
std
:
:
tie
(
other
.
ssrc_
other
.
direction_
)
;
}
bool
operator
=
=
(
const
StreamId
&
other
)
const
{
return
std
:
:
tie
(
ssrc_
direction_
)
=
=
std
:
:
tie
(
other
.
ssrc_
other
.
direction_
)
;
}
uint32_t
GetSsrc
(
)
const
{
return
ssrc_
;
}
webrtc
:
:
PacketDirection
GetDirection
(
)
const
{
return
direction_
;
}
private
:
uint32_t
ssrc_
;
webrtc
:
:
PacketDirection
direction_
;
}
;
template
<
typename
T
>
void
CreateAccumulatedPacketsTimeSeries
(
PacketDirection
desired_direction
Plot
*
plot
const
std
:
:
map
<
StreamId
std
:
:
vector
<
T
>
>
&
packets
const
std
:
:
string
&
label_prefix
)
;
bool
IsRtxSsrc
(
StreamId
stream_id
)
const
;
bool
IsVideoSsrc
(
StreamId
stream_id
)
const
;
bool
IsAudioSsrc
(
StreamId
stream_id
)
const
;
std
:
:
string
GetStreamName
(
StreamId
)
const
;
const
ParsedRtcEventLog
&
parsed_log_
;
std
:
:
vector
<
uint32_t
>
desired_ssrc_
;
std
:
:
set
<
StreamId
>
rtx_ssrcs_
;
std
:
:
set
<
StreamId
>
video_ssrcs_
;
std
:
:
set
<
StreamId
>
audio_ssrcs_
;
std
:
:
map
<
StreamId
std
:
:
vector
<
LoggedRtpPacket
>
>
rtp_packets_
;
std
:
:
map
<
StreamId
std
:
:
vector
<
LoggedRtcpPacket
>
>
rtcp_packets_
;
std
:
:
vector
<
BwePacketLossEvent
>
bwe_loss_updates_
;
uint64_t
window_duration_
;
uint64_t
step_
;
uint64_t
begin_time_
;
uint64_t
end_time_
;
float
call_duration_s_
;
}
;
}
}
#
endif
