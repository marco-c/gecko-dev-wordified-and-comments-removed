#
ifndef
WEBRTC_TOOLS_EVENT_LOG_VISUALIZER_PLOT_BASE_H_
#
define
WEBRTC_TOOLS_EVENT_LOG_VISUALIZER_PLOT_BASE_H_
#
include
<
memory
>
#
include
<
string
>
#
include
<
utility
>
#
include
<
vector
>
namespace
webrtc
{
namespace
plotting
{
enum
PlotStyle
{
LINE_GRAPH
LINE_DOT_GRAPH
BAR_GRAPH
}
;
struct
TimeSeriesPoint
{
TimeSeriesPoint
(
float
x
float
y
)
:
x
(
x
)
y
(
y
)
{
}
float
x
;
float
y
;
}
;
struct
TimeSeries
{
TimeSeries
(
)
=
default
;
TimeSeries
(
TimeSeries
&
&
other
)
:
label
(
std
:
:
move
(
other
.
label
)
)
style
(
other
.
style
)
points
(
std
:
:
move
(
other
.
points
)
)
{
}
TimeSeries
&
operator
=
(
TimeSeries
&
&
other
)
{
label
=
std
:
:
move
(
other
.
label
)
;
style
=
other
.
style
;
points
=
std
:
:
move
(
other
.
points
)
;
return
*
this
;
}
std
:
:
string
label
;
PlotStyle
style
;
std
:
:
vector
<
TimeSeriesPoint
>
points
;
}
;
class
Plot
{
public
:
virtual
~
Plot
(
)
{
}
virtual
void
Draw
(
)
=
0
;
void
SetXAxis
(
float
min_value
float
max_value
std
:
:
string
label
float
left_margin
=
0
float
right_margin
=
0
)
;
void
SetSuggestedXAxis
(
float
min_value
float
max_value
std
:
:
string
label
float
left_margin
=
0
float
right_margin
=
0
)
;
void
SetYAxis
(
float
min_value
float
max_value
std
:
:
string
label
float
bottom_margin
=
0
float
top_margin
=
0
)
;
void
SetSuggestedYAxis
(
float
min_value
float
max_value
std
:
:
string
label
float
bottom_margin
=
0
float
top_margin
=
0
)
;
void
SetTitle
(
std
:
:
string
title
)
;
std
:
:
vector
<
TimeSeries
>
series_list_
;
protected
:
float
xaxis_min_
;
float
xaxis_max_
;
std
:
:
string
xaxis_label_
;
float
yaxis_min_
;
float
yaxis_max_
;
std
:
:
string
yaxis_label_
;
std
:
:
string
title_
;
}
;
class
PlotCollection
{
public
:
virtual
~
PlotCollection
(
)
{
}
virtual
void
Draw
(
)
=
0
;
virtual
Plot
*
AppendNewPlot
(
)
=
0
;
protected
:
std
:
:
vector
<
std
:
:
unique_ptr
<
Plot
>
>
plots_
;
}
;
}
}
#
endif
