#
include
"
common_video
/
include
/
video_frame
.
h
"
#
include
<
string
.
h
>
#
include
<
algorithm
>
#
include
"
rtc_base
/
bind
.
h
"
#
include
"
rtc_base
/
checks
.
h
"
namespace
webrtc
{
const
size_t
EncodedImage
:
:
kBufferPaddingBytesH264
=
8
;
size_t
EncodedImage
:
:
GetBufferPaddingBytes
(
VideoCodecType
codec_type
)
{
switch
(
codec_type
)
{
case
kVideoCodecVP8
:
case
kVideoCodecVP9
:
return
0
;
case
kVideoCodecH264
:
return
kBufferPaddingBytesH264
;
case
kVideoCodecI420
:
case
kVideoCodecRED
:
case
kVideoCodecULPFEC
:
case
kVideoCodecFlexfec
:
case
kVideoCodecGeneric
:
case
kVideoCodecUnknown
:
return
0
;
}
RTC_NOTREACHED
(
)
;
return
0
;
}
EncodedImage
:
:
EncodedImage
(
)
:
EncodedImage
(
nullptr
0
0
)
{
}
EncodedImage
:
:
EncodedImage
(
uint8_t
*
buffer
size_t
length
size_t
size
)
:
_buffer
(
buffer
)
_length
(
length
)
_size
(
size
)
{
}
void
EncodedImage
:
:
SetEncodeTime
(
int64_t
encode_start_ms
int64_t
encode_finish_ms
)
{
timing_
.
encode_start_ms
=
encode_start_ms
;
timing_
.
encode_finish_ms
=
encode_finish_ms
;
}
}
