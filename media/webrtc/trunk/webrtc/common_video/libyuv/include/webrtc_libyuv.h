#
ifndef
WEBRTC_COMMON_VIDEO_LIBYUV_INCLUDE_WEBRTC_LIBYUV_H_
#
define
WEBRTC_COMMON_VIDEO_LIBYUV_INCLUDE_WEBRTC_LIBYUV_H_
#
include
<
stdio
.
h
>
#
include
<
vector
>
#
include
"
webrtc
/
api
/
video
/
video_frame
.
h
"
#
include
"
webrtc
/
common_types
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
I420Buffer
;
enum
VideoType
{
kUnknown
kI420
kIYUV
kRGB24
kABGR
kARGB
kARGB4444
kRGB565
kARGB1555
kYUY2
kYV12
kUYVY
kMJPG
kNV21
kNV12
kBGRA
}
;
const
double
kPerfectPSNR
=
48
.
0f
;
VideoType
RawVideoTypeToCommonVideoVideoType
(
RawVideoType
type
)
;
size_t
CalcBufferSize
(
VideoType
type
int
width
int
height
)
;
int
PrintVideoFrame
(
const
VideoFrame
&
frame
FILE
*
file
)
;
int
PrintVideoFrame
(
const
VideoFrameBuffer
&
frame
FILE
*
file
)
;
int
ExtractBuffer
(
const
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
&
input_frame
size_t
size
uint8_t
*
buffer
)
;
int
ExtractBuffer
(
const
VideoFrame
&
input_frame
size_t
size
uint8_t
*
buffer
)
;
int
ConvertToI420
(
VideoType
src_video_type
const
uint8_t
*
src_frame
int
crop_x
int
crop_y
int
src_width
int
src_height
size_t
sample_size
VideoRotation
rotation
I420Buffer
*
dst_buffer
)
;
int
ConvertFromI420
(
const
VideoFrame
&
src_frame
VideoType
dst_video_type
int
dst_sample_size
uint8_t
*
dst_frame
)
;
double
I420PSNR
(
const
VideoFrame
*
ref_frame
const
VideoFrame
*
test_frame
)
;
double
I420PSNR
(
const
VideoFrameBuffer
&
ref_buffer
const
VideoFrameBuffer
&
test_buffer
)
;
double
I420SSIM
(
const
VideoFrame
*
ref_frame
const
VideoFrame
*
test_frame
)
;
double
I420SSIM
(
const
VideoFrameBuffer
&
ref_buffer
const
VideoFrameBuffer
&
test_buffer
)
;
void
NV12Scale
(
std
:
:
vector
<
uint8_t
>
*
tmp_buffer
const
uint8_t
*
src_y
int
src_stride_y
const
uint8_t
*
src_uv
int
src_stride_uv
int
src_width
int
src_height
uint8_t
*
dst_y
int
dst_stride_y
uint8_t
*
dst_uv
int
dst_stride_uv
int
dst_width
int
dst_height
)
;
class
NV12ToI420Scaler
{
public
:
void
NV12ToI420Scale
(
const
uint8_t
*
src_y
int
src_stride_y
const
uint8_t
*
src_uv
int
src_stride_uv
int
src_width
int
src_height
uint8_t
*
dst_y
int
dst_stride_y
uint8_t
*
dst_u
int
dst_stride_u
uint8_t
*
dst_v
int
dst_stride_v
int
dst_width
int
dst_height
)
;
private
:
std
:
:
vector
<
uint8_t
>
tmp_uv_planes_
;
}
;
}
#
endif
