#
include
"
webrtc
/
common_video
/
h264
/
h264_common
.
h
"
namespace
webrtc
{
namespace
H264
{
const
uint8_t
kNaluTypeMask
=
0x1F
;
std
:
:
vector
<
NaluIndex
>
FindNaluIndices
(
const
uint8_t
*
buffer
size_t
buffer_size
)
{
std
:
:
vector
<
NaluIndex
>
sequences
;
if
(
buffer_size
<
kNaluShortStartSequenceSize
)
return
sequences
;
const
size_t
end
=
buffer_size
-
kNaluShortStartSequenceSize
;
for
(
size_t
i
=
0
;
i
<
end
;
)
{
if
(
buffer
[
i
+
2
]
>
1
)
{
i
+
=
3
;
}
else
if
(
buffer
[
i
+
2
]
=
=
1
&
&
buffer
[
i
+
1
]
=
=
0
&
&
buffer
[
i
]
=
=
0
)
{
NaluIndex
index
=
{
i
i
+
3
0
}
;
if
(
index
.
start_offset
>
0
&
&
buffer
[
index
.
start_offset
-
1
]
=
=
0
)
-
-
index
.
start_offset
;
auto
it
=
sequences
.
rbegin
(
)
;
if
(
it
!
=
sequences
.
rend
(
)
)
it
-
>
payload_size
=
index
.
start_offset
-
it
-
>
payload_start_offset
;
sequences
.
push_back
(
index
)
;
i
+
=
3
;
}
else
{
+
+
i
;
}
}
auto
it
=
sequences
.
rbegin
(
)
;
if
(
it
!
=
sequences
.
rend
(
)
)
it
-
>
payload_size
=
buffer_size
-
it
-
>
payload_start_offset
;
return
sequences
;
}
NaluType
ParseNaluType
(
uint8_t
data
)
{
return
static_cast
<
NaluType
>
(
data
&
kNaluTypeMask
)
;
}
std
:
:
unique_ptr
<
rtc
:
:
Buffer
>
ParseRbsp
(
const
uint8_t
*
data
size_t
length
)
{
std
:
:
unique_ptr
<
rtc
:
:
Buffer
>
rbsp_buffer
(
new
rtc
:
:
Buffer
(
0
length
)
)
;
const
char
*
sps_bytes
=
reinterpret_cast
<
const
char
*
>
(
data
)
;
for
(
size_t
i
=
0
;
i
<
length
;
)
{
if
(
length
-
i
>
=
3
&
&
data
[
i
]
=
=
0
&
&
data
[
i
+
1
]
=
=
0
&
&
data
[
i
+
2
]
=
=
3
)
{
rbsp_buffer
-
>
AppendData
(
sps_bytes
+
i
2
)
;
i
+
=
3
;
}
else
{
rbsp_buffer
-
>
AppendData
(
sps_bytes
[
i
]
)
;
+
+
i
;
}
}
return
rbsp_buffer
;
}
void
WriteRbsp
(
const
uint8_t
*
bytes
size_t
length
rtc
:
:
Buffer
*
destination
)
{
static
const
uint8_t
kZerosInStartSequence
=
2
;
static
const
uint8_t
kEmulationByte
=
0x03u
;
size_t
num_consecutive_zeros
=
0
;
destination
-
>
EnsureCapacity
(
destination
-
>
size
(
)
+
length
)
;
for
(
size_t
i
=
0
;
i
<
length
;
+
+
i
)
{
uint8_t
byte
=
bytes
[
i
]
;
if
(
byte
<
=
kEmulationByte
&
&
num_consecutive_zeros
>
=
kZerosInStartSequence
)
{
destination
-
>
AppendData
(
kEmulationByte
)
;
num_consecutive_zeros
=
0
;
}
destination
-
>
AppendData
(
byte
)
;
if
(
byte
=
=
0
)
{
+
+
num_consecutive_zeros
;
}
else
{
num_consecutive_zeros
=
0
;
}
}
}
}
}
