#
include
"
webrtc
/
common_video
/
interface
/
i420_buffer_pool
.
h
"
#
include
"
webrtc
/
base
/
checks
.
h
"
namespace
{
class
PooledI420Buffer
:
public
webrtc
:
:
VideoFrameBuffer
{
public
:
explicit
PooledI420Buffer
(
const
rtc
:
:
scoped_refptr
<
webrtc
:
:
I420Buffer
>
&
buffer
)
:
buffer_
(
buffer
)
{
}
private
:
~
PooledI420Buffer
(
)
override
{
}
int
width
(
)
const
override
{
return
buffer_
-
>
width
(
)
;
}
int
height
(
)
const
override
{
return
buffer_
-
>
height
(
)
;
}
const
uint8_t
*
data
(
webrtc
:
:
PlaneType
type
)
const
override
{
const
webrtc
:
:
I420Buffer
*
cbuffer
=
buffer_
.
get
(
)
;
return
cbuffer
-
>
data
(
type
)
;
}
uint8_t
*
data
(
webrtc
:
:
PlaneType
type
)
{
DCHECK
(
HasOneRef
(
)
)
;
const
webrtc
:
:
I420Buffer
*
cbuffer
=
buffer_
.
get
(
)
;
return
const_cast
<
uint8_t
*
>
(
cbuffer
-
>
data
(
type
)
)
;
}
int
stride
(
webrtc
:
:
PlaneType
type
)
const
override
{
return
buffer_
-
>
stride
(
type
)
;
}
rtc
:
:
scoped_refptr
<
webrtc
:
:
NativeHandle
>
native_handle
(
)
const
override
{
return
nullptr
;
}
friend
class
rtc
:
:
RefCountedObject
<
PooledI420Buffer
>
;
rtc
:
:
scoped_refptr
<
webrtc
:
:
I420Buffer
>
buffer_
;
}
;
}
namespace
webrtc
{
I420BufferPool
:
:
I420BufferPool
(
)
{
Release
(
)
;
}
void
I420BufferPool
:
:
Release
(
)
{
thread_checker_
.
DetachFromThread
(
)
;
buffers_
.
clear
(
)
;
}
rtc
:
:
scoped_refptr
<
VideoFrameBuffer
>
I420BufferPool
:
:
CreateBuffer
(
int
width
int
height
)
{
DCHECK
(
thread_checker_
.
CalledOnValidThread
(
)
)
;
for
(
auto
it
=
buffers_
.
begin
(
)
;
it
!
=
buffers_
.
end
(
)
;
)
{
if
(
(
*
it
)
-
>
width
(
)
!
=
width
|
|
(
*
it
)
-
>
height
(
)
!
=
height
)
it
=
buffers_
.
erase
(
it
)
;
else
+
+
it
;
}
for
(
const
rtc
:
:
scoped_refptr
<
I420Buffer
>
&
buffer
:
buffers_
)
{
if
(
buffer
-
>
HasOneRef
(
)
)
return
new
rtc
:
:
RefCountedObject
<
PooledI420Buffer
>
(
buffer
)
;
}
buffers_
.
push_back
(
new
rtc
:
:
RefCountedObject
<
I420Buffer
>
(
width
height
)
)
;
return
new
rtc
:
:
RefCountedObject
<
PooledI420Buffer
>
(
buffers_
.
back
(
)
)
;
}
}
