#
ifndef
COMMON_VIDEO_INCLUDE_BITRATE_ADJUSTER_H_
#
define
COMMON_VIDEO_INCLUDE_BITRATE_ADJUSTER_H_
#
include
<
functional
>
#
include
"
rtc_base
/
criticalsection
.
h
"
#
include
"
rtc_base
/
rate_statistics
.
h
"
namespace
webrtc
{
class
Clock
;
class
BitrateAdjuster
{
public
:
BitrateAdjuster
(
Clock
*
clock
float
min_adjusted_bitrate_pct
float
max_adjusted_bitrate_pct
)
;
virtual
~
BitrateAdjuster
(
)
{
}
static
const
uint32_t
kBitrateUpdateIntervalMs
;
static
const
uint32_t
kBitrateUpdateFrameInterval
;
static
const
float
kBitrateTolerancePct
;
static
const
float
kBytesPerMsToBitsPerSecond
;
void
SetTargetBitrateBps
(
uint32_t
bitrate_bps
)
;
uint32_t
GetTargetBitrateBps
(
)
const
;
uint32_t
GetAdjustedBitrateBps
(
)
const
;
rtc
:
:
Optional
<
uint32_t
>
GetEstimatedBitrateBps
(
)
;
void
Update
(
size_t
frame_size
)
;
private
:
bool
IsWithinTolerance
(
uint32_t
bitrate_bps
uint32_t
target_bitrate_bps
)
;
uint32_t
GetMinAdjustedBitrateBps
(
)
const
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
uint32_t
GetMaxAdjustedBitrateBps
(
)
const
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
void
Reset
(
)
;
void
UpdateBitrate
(
uint32_t
current_time_ms
)
RTC_EXCLUSIVE_LOCKS_REQUIRED
(
crit_
)
;
rtc
:
:
CriticalSection
crit_
;
Clock
*
const
clock_
;
const
float
min_adjusted_bitrate_pct_
;
const
float
max_adjusted_bitrate_pct_
;
volatile
uint32_t
target_bitrate_bps_
RTC_GUARDED_BY
(
crit_
)
;
volatile
uint32_t
adjusted_bitrate_bps_
RTC_GUARDED_BY
(
crit_
)
;
volatile
uint32_t
last_adjusted_target_bitrate_bps_
RTC_GUARDED_BY
(
crit_
)
;
RateStatistics
bitrate_tracker_
RTC_GUARDED_BY
(
crit_
)
;
uint32_t
last_bitrate_update_time_ms_
RTC_GUARDED_BY
(
crit_
)
;
uint32_t
frames_since_last_update_
RTC_GUARDED_BY
(
crit_
)
;
}
;
}
#
endif
