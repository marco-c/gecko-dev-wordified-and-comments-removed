#
ifndef
WEBRTC_INTERNAL_BEAMFORMER_BLOCKER_H_
#
define
WEBRTC_INTERNAL_BEAMFORMER_BLOCKER_H_
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
common_audio
/
audio_ring_buffer
.
h
"
#
include
"
webrtc
/
common_audio
/
channel_buffer
.
h
"
namespace
webrtc
{
class
BlockerCallback
{
public
:
virtual
~
BlockerCallback
(
)
{
}
virtual
void
ProcessBlock
(
const
float
*
const
*
input
size_t
num_frames
size_t
num_input_channels
size_t
num_output_channels
float
*
const
*
output
)
=
0
;
}
;
class
Blocker
{
public
:
Blocker
(
size_t
chunk_size
size_t
block_size
size_t
num_input_channels
size_t
num_output_channels
const
float
*
window
size_t
shift_amount
BlockerCallback
*
callback
)
;
void
ProcessChunk
(
const
float
*
const
*
input
size_t
chunk_size
size_t
num_input_channels
size_t
num_output_channels
float
*
const
*
output
)
;
private
:
const
size_t
chunk_size_
;
const
size_t
block_size_
;
const
size_t
num_input_channels_
;
const
size_t
num_output_channels_
;
const
size_t
initial_delay_
;
size_t
frame_offset_
;
AudioRingBuffer
input_buffer_
;
ChannelBuffer
<
float
>
output_buffer_
;
ChannelBuffer
<
float
>
input_block_
;
ChannelBuffer
<
float
>
output_block_
;
rtc
:
:
scoped_ptr
<
float
[
]
>
window_
;
size_t
shift_amount_
;
BlockerCallback
*
callback_
;
}
;
}
#
endif
