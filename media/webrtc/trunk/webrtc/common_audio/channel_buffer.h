#
ifndef
WEBRTC_MODULES_AUDIO_PROCESSING_CHANNEL_BUFFER_H_
#
define
WEBRTC_MODULES_AUDIO_PROCESSING_CHANNEL_BUFFER_H_
#
include
<
string
.
h
>
#
include
"
webrtc
/
base
/
checks
.
h
"
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
common_audio
/
include
/
audio_util
.
h
"
#
include
"
webrtc
/
test
/
testsupport
/
gtest_prod_util
.
h
"
namespace
webrtc
{
template
<
typename
T
>
class
ChannelBuffer
{
public
:
ChannelBuffer
(
int
num_frames
int
num_channels
int
num_bands
=
1
)
:
data_
(
new
T
[
num_frames
*
num_channels
]
(
)
)
channels_
(
new
T
*
[
num_channels
*
num_bands
]
)
bands_
(
new
T
*
[
num_channels
*
num_bands
]
)
num_frames_
(
num_frames
)
num_frames_per_band_
(
num_frames
/
num_bands
)
num_channels_
(
num_channels
)
num_bands_
(
num_bands
)
{
for
(
int
i
=
0
;
i
<
num_channels_
;
+
+
i
)
{
for
(
int
j
=
0
;
j
<
num_bands_
;
+
+
j
)
{
channels_
[
j
*
num_channels_
+
i
]
=
&
data_
[
i
*
num_frames_
+
j
*
num_frames_per_band_
]
;
bands_
[
i
*
num_bands_
+
j
]
=
channels_
[
j
*
num_channels_
+
i
]
;
}
}
}
T
*
const
*
channels
(
)
{
return
channels
(
0
)
;
}
const
T
*
const
*
channels
(
)
const
{
return
channels
(
0
)
;
}
const
T
*
const
*
channels
(
int
band
)
const
{
DCHECK_LT
(
band
num_bands_
)
;
DCHECK_GE
(
band
0
)
;
return
&
channels_
[
band
*
num_channels_
]
;
}
T
*
const
*
channels
(
int
band
)
{
const
ChannelBuffer
<
T
>
*
t
=
this
;
return
const_cast
<
T
*
const
*
>
(
t
-
>
channels
(
band
)
)
;
}
const
T
*
const
*
bands
(
int
channel
)
const
{
DCHECK_LT
(
channel
num_channels_
)
;
DCHECK_GE
(
channel
0
)
;
return
&
bands_
[
channel
*
num_bands_
]
;
}
T
*
const
*
bands
(
int
channel
)
{
const
ChannelBuffer
<
T
>
*
t
=
this
;
return
const_cast
<
T
*
const
*
>
(
t
-
>
bands
(
channel
)
)
;
}
const
T
*
const
*
Slice
(
T
*
*
slice
int
start_frame
)
const
{
DCHECK_LT
(
start_frame
num_frames_
)
;
for
(
int
i
=
0
;
i
<
num_channels_
;
+
+
i
)
slice
[
i
]
=
&
channels_
[
i
]
[
start_frame
]
;
return
slice
;
}
T
*
*
Slice
(
T
*
*
slice
int
start_frame
)
{
const
ChannelBuffer
<
T
>
*
t
=
this
;
return
const_cast
<
T
*
*
>
(
t
-
>
Slice
(
slice
start_frame
)
)
;
}
int
num_frames
(
)
const
{
return
num_frames_
;
}
int
num_frames_per_band
(
)
const
{
return
num_frames_per_band_
;
}
int
num_channels
(
)
const
{
return
num_channels_
;
}
int
num_bands
(
)
const
{
return
num_bands_
;
}
size_t
size
(
)
const
{
return
num_frames_
*
num_channels_
;
}
void
SetDataForTesting
(
const
T
*
data
size_t
size
)
{
CHECK_EQ
(
size
this
-
>
size
(
)
)
;
memcpy
(
data_
.
get
(
)
data
size
*
sizeof
(
*
data
)
)
;
}
private
:
rtc
:
:
scoped_ptr
<
T
[
]
>
data_
;
rtc
:
:
scoped_ptr
<
T
*
[
]
>
channels_
;
rtc
:
:
scoped_ptr
<
T
*
[
]
>
bands_
;
const
int
num_frames_
;
const
int
num_frames_per_band_
;
const
int
num_channels_
;
const
int
num_bands_
;
}
;
class
IFChannelBuffer
{
public
:
IFChannelBuffer
(
int
num_frames
int
num_channels
int
num_bands
=
1
)
;
ChannelBuffer
<
int16_t
>
*
ibuf
(
)
;
ChannelBuffer
<
float
>
*
fbuf
(
)
;
const
ChannelBuffer
<
int16_t
>
*
ibuf_const
(
)
const
;
const
ChannelBuffer
<
float
>
*
fbuf_const
(
)
const
;
int
num_frames
(
)
const
{
return
ibuf_
.
num_frames
(
)
;
}
int
num_frames_per_band
(
)
const
{
return
ibuf_
.
num_frames_per_band
(
)
;
}
int
num_channels
(
)
const
{
return
ibuf_
.
num_channels
(
)
;
}
int
num_bands
(
)
const
{
return
ibuf_
.
num_bands
(
)
;
}
private
:
void
RefreshF
(
)
const
;
void
RefreshI
(
)
const
;
mutable
bool
ivalid_
;
mutable
ChannelBuffer
<
int16_t
>
ibuf_
;
mutable
bool
fvalid_
;
mutable
ChannelBuffer
<
float
>
fbuf_
;
}
;
}
#
endif
