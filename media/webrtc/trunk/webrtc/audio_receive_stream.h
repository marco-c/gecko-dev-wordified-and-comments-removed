#
ifndef
WEBRTC_AUDIO_RECEIVE_STREAM_H_
#
define
WEBRTC_AUDIO_RECEIVE_STREAM_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
webrtc
/
base
/
scoped_ptr
.
h
"
#
include
"
webrtc
/
config
.
h
"
#
include
"
webrtc
/
stream
.
h
"
#
include
"
webrtc
/
transport
.
h
"
#
include
"
webrtc
/
typedefs
.
h
"
namespace
webrtc
{
class
AudioDecoder
;
class
AudioSinkInterface
;
class
AudioReceiveStream
:
public
ReceiveStream
{
public
:
struct
Stats
{
uint32_t
remote_ssrc
=
0
;
int64_t
bytes_rcvd
=
0
;
uint32_t
packets_rcvd
=
0
;
uint32_t
packets_lost
=
0
;
float
fraction_lost
=
0
.
0f
;
std
:
:
string
codec_name
;
uint32_t
ext_seqnum
=
0
;
uint32_t
jitter_ms
=
0
;
uint32_t
jitter_buffer_ms
=
0
;
uint32_t
jitter_buffer_preferred_ms
=
0
;
uint32_t
delay_estimate_ms
=
0
;
int32_t
audio_level
=
-
1
;
float
expand_rate
=
0
.
0f
;
float
speech_expand_rate
=
0
.
0f
;
float
secondary_decoded_rate
=
0
.
0f
;
float
accelerate_rate
=
0
.
0f
;
float
preemptive_expand_rate
=
0
.
0f
;
int32_t
decoding_calls_to_silence_generator
=
0
;
int32_t
decoding_calls_to_neteq
=
0
;
int32_t
decoding_normal
=
0
;
int32_t
decoding_plc
=
0
;
int32_t
decoding_cng
=
0
;
int32_t
decoding_plc_cng
=
0
;
int64_t
capture_start_ntp_time_ms
=
0
;
}
;
struct
Config
{
std
:
:
string
ToString
(
)
const
;
struct
Rtp
{
std
:
:
string
ToString
(
)
const
;
uint32_t
remote_ssrc
=
0
;
uint32_t
local_ssrc
=
0
;
bool
transport_cc
=
false
;
std
:
:
vector
<
RtpExtension
>
extensions
;
}
rtp
;
Transport
*
receive_transport
=
nullptr
;
Transport
*
rtcp_send_transport
=
nullptr
;
int
voe_channel_id
=
-
1
;
std
:
:
string
sync_group
;
std
:
:
map
<
uint8_t
AudioDecoder
*
>
decoder_map
;
bool
combined_audio_video_bwe
=
false
;
}
;
virtual
Stats
GetStats
(
)
const
=
0
;
virtual
void
SetSink
(
rtc
:
:
scoped_ptr
<
AudioSinkInterface
>
sink
)
=
0
;
}
;
}
#
endif
