"
"
"
Test
that
RelativePath
(
s
d
)
doesn
'
t
return
a
path
starting
with
'
.
.
'
when
s
is
textually
below
d
but
is
also
a
symlink
to
a
file
that
is
not
below
d
.
Returning
.
.
in
this
case
would
break
the
Ninja
generator
in
such
a
case
because
it
computes
output
directories
by
concatenating
paths
and
concat
'
ing
a
path
starting
with
.
.
can
unexpectedly
erase
other
parts
of
the
path
.
It
'
s
difficult
to
test
this
directly
since
the
test
harness
assumes
toplevel_dir
is
the
root
of
the
repository
but
this
test
should
at
least
verify
that
the
required
behavior
doesn
'
t
change
.
"
"
"
import
TestGyp
import
os
import
sys
import
tempfile
if
sys
.
platform
!
=
'
win32
'
:
  
test
=
TestGyp
.
TestGyp
(
)
  
with
tempfile
.
NamedTemporaryFile
(
)
as
gyp_file
:
    
with
tempfile
.
NamedTemporaryFile
(
)
as
c_file
:
      
with
open
(
'
hello
.
gyp
'
)
as
orig_gyp_file
:
        
gyp_file
.
write
(
orig_gyp_file
.
read
(
)
)
        
gyp_file
.
flush
(
)
      
with
open
(
'
hello
.
c
'
)
as
orig_c_file
:
        
c_file
.
write
(
orig_c_file
.
read
(
)
)
        
c_file
.
flush
(
)
      
if
os
.
path
.
getsize
(
gyp_file
.
name
)
=
=
0
:
        
raise
OSError
(
"
Copy
to
temporary
file
didn
'
t
work
.
"
)
      
symlink_gyp
=
test
.
built_file_path
(
'
symlink_hello
.
gyp
'
)
      
symlink_c
=
test
.
built_file_path
(
'
symlink_hello
.
c
'
)
      
outdir
=
os
.
path
.
dirname
(
symlink_gyp
)
      
try
:
        
os
.
makedirs
(
outdir
)
      
except
OSError
:
        
if
not
os
.
path
.
isdir
(
outdir
)
:
          
raise
      
os
.
symlink
(
gyp_file
.
name
symlink_gyp
)
      
os
.
symlink
(
c_file
.
name
symlink_c
)
      
test
.
run_gyp
(
symlink_gyp
chdir
=
outdir
)
      
test
.
build
(
symlink_gyp
chdir
=
outdir
)
      
test
.
run_built_executable
(
'
symlink_hello
'
stdout
=
"
Hello
world
!
\
n
"
                                
chdir
=
outdir
)
      
test
.
pass_test
(
)
