"
"
"
Verifies
that
the
user
can
override
the
compiler
and
linker
using
CC
/
CXX
/
NM
/
READELF
environment
variables
.
"
"
"
import
TestGyp
import
os
import
copy
import
sys
here
=
os
.
path
.
dirname
(
os
.
path
.
abspath
(
__file__
)
)
if
sys
.
platform
=
=
'
win32
'
:
  
sys
.
exit
(
0
)
for
key
in
[
'
CC
'
'
CXX
'
'
LINK
'
'
CC_host
'
'
CXX_host
'
'
LINK_host
'
            
'
NM_target
'
'
READELF_target
'
]
:
  
if
key
in
os
.
environ
:
    
del
os
.
environ
[
key
]
def
CheckCompiler
(
test
gypfile
check_for
run_gyp
)
:
  
if
run_gyp
:
    
test
.
run_gyp
(
gypfile
)
  
test
.
build
(
gypfile
)
  
test
.
must_contain_all_lines
(
test
.
stdout
(
)
check_for
)
test
=
TestGyp
.
TestGyp
(
formats
=
[
'
ninja
'
]
)
test
.
formats
=
[
'
ninja
-
my_flavor
'
if
f
=
=
'
ninja
'
else
f
for
f
in
test
.
formats
]
def
TestTargetOverideSharedLib
(
)
:
  
expected
=
[
'
my_cc
.
py
'
'
my_cxx
.
py
'
'
FOO
'
]
  
env
=
{
'
CC
'
:
'
python
%
s
/
my_cc
.
py
FOO
'
%
here
         
'
CXX
'
:
'
python
%
s
/
my_cxx
.
py
FOO
'
%
here
         
'
NM
'
:
'
python
%
s
/
my_nm
.
py
'
%
here
         
'
READELF
'
:
'
python
%
s
/
my_readelf
.
py
'
%
here
}
  
with
TestGyp
.
LocalEnv
(
env
)
:
    
CheckCompiler
(
test
'
compiler
-
shared
-
lib
.
gyp
'
expected
True
)
    
test
.
must_contain
(
test
.
built_file_path
(
'
RAN_MY_NM
'
)
'
RAN_MY_NM
'
)
    
test
.
must_contain
(
test
.
built_file_path
(
'
RAN_MY_READELF
'
)
'
RAN_MY_READELF
'
)
    
test
.
unlink
(
test
.
built_file_path
(
'
RAN_MY_NM
'
)
)
    
test
.
unlink
(
test
.
built_file_path
(
'
RAN_MY_READELF
'
)
)
  
CheckCompiler
(
test
'
compiler
-
shared
-
lib
.
gyp
'
expected
False
)
  
test
.
must_contain
(
test
.
built_file_path
(
'
RAN_MY_NM
'
)
'
RAN_MY_NM
'
)
  
test
.
must_contain
(
test
.
built_file_path
(
'
RAN_MY_READELF
'
)
'
RAN_MY_READELF
'
)
TestTargetOverideSharedLib
(
)
test
.
pass_test
(
)
