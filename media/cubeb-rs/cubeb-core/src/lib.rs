#
[
macro_use
]
extern
crate
bitflags
;
pub
mod
ffi
;
pub
mod
binding
;
mod
error
;
mod
util
;
use
binding
:
:
Binding
;
pub
use
error
:
:
Error
;
use
std
:
:
{
marker
ptr
str
}
;
use
util
:
:
opt_bytes
;
#
[
derive
(
PartialEq
Eq
Clone
Debug
Copy
)
]
pub
enum
SampleFormat
{
S16LE
S16BE
S16NE
Float32LE
Float32BE
Float32NE
}
impl
From
<
ffi
:
:
cubeb_sample_format
>
for
SampleFormat
{
fn
from
(
x
:
ffi
:
:
cubeb_sample_format
)
-
>
SampleFormat
{
match
x
{
ffi
:
:
CUBEB_SAMPLE_S16LE
=
>
SampleFormat
:
:
S16LE
ffi
:
:
CUBEB_SAMPLE_S16BE
=
>
SampleFormat
:
:
S16BE
ffi
:
:
CUBEB_SAMPLE_FLOAT32LE
=
>
SampleFormat
:
:
Float32LE
ffi
:
:
CUBEB_SAMPLE_FLOAT32BE
=
>
SampleFormat
:
:
Float32BE
_
=
>
SampleFormat
:
:
S16NE
}
}
}
#
[
derive
(
PartialEq
Eq
Clone
Debug
Copy
)
]
pub
struct
DeviceId
{
raw
:
ffi
:
:
cubeb_devid
}
impl
Binding
for
DeviceId
{
type
Raw
=
ffi
:
:
cubeb_devid
;
unsafe
fn
from_raw
(
raw
:
Self
:
:
Raw
)
-
>
DeviceId
{
DeviceId
{
raw
:
raw
}
}
fn
raw
(
&
self
)
-
>
Self
:
:
Raw
{
self
.
raw
}
}
impl
Default
for
DeviceId
{
fn
default
(
)
-
>
Self
{
DeviceId
{
raw
:
ptr
:
:
null
(
)
}
}
}
#
[
derive
(
PartialEq
Eq
Clone
Debug
Copy
PartialOrd
Ord
)
]
pub
enum
LogLevel
{
Disabled
Normal
Verbose
}
#
[
derive
(
PartialEq
Eq
Clone
Debug
Copy
)
]
pub
enum
ChannelLayout
{
Undefined
DualMono
DualMonoLfe
Mono
MonoLfe
Stereo
StereoLfe
Layout3F
Layout3FLfe
Layout2F1
Layout2F1Lfe
Layout3F1
Layout3F1Lfe
Layout2F2
Layout2F2Lfe
Layout3F2
Layout3F2Lfe
Layout3F3RLfe
Layout3F4Lfe
}
impl
From
<
ffi
:
:
cubeb_channel_layout
>
for
ChannelLayout
{
fn
from
(
x
:
ffi
:
:
cubeb_channel_layout
)
-
>
ChannelLayout
{
match
x
{
ffi
:
:
CUBEB_LAYOUT_UNDEFINED
=
>
ChannelLayout
:
:
Undefined
ffi
:
:
CUBEB_LAYOUT_DUAL_MONO
=
>
ChannelLayout
:
:
DualMono
ffi
:
:
CUBEB_LAYOUT_DUAL_MONO_LFE
=
>
ChannelLayout
:
:
DualMonoLfe
ffi
:
:
CUBEB_LAYOUT_MONO
=
>
ChannelLayout
:
:
Mono
ffi
:
:
CUBEB_LAYOUT_MONO_LFE
=
>
ChannelLayout
:
:
MonoLfe
ffi
:
:
CUBEB_LAYOUT_STEREO
=
>
ChannelLayout
:
:
Stereo
ffi
:
:
CUBEB_LAYOUT_STEREO_LFE
=
>
ChannelLayout
:
:
StereoLfe
ffi
:
:
CUBEB_LAYOUT_3F
=
>
ChannelLayout
:
:
Layout3F
ffi
:
:
CUBEB_LAYOUT_3F_LFE
=
>
ChannelLayout
:
:
Layout3FLfe
ffi
:
:
CUBEB_LAYOUT_2F1
=
>
ChannelLayout
:
:
Layout2F1
ffi
:
:
CUBEB_LAYOUT_2F1_LFE
=
>
ChannelLayout
:
:
Layout2F1Lfe
ffi
:
:
CUBEB_LAYOUT_3F1
=
>
ChannelLayout
:
:
Layout3F1
ffi
:
:
CUBEB_LAYOUT_3F1_LFE
=
>
ChannelLayout
:
:
Layout3F1Lfe
ffi
:
:
CUBEB_LAYOUT_2F2
=
>
ChannelLayout
:
:
Layout2F2
ffi
:
:
CUBEB_LAYOUT_2F2_LFE
=
>
ChannelLayout
:
:
Layout2F2Lfe
ffi
:
:
CUBEB_LAYOUT_3F2
=
>
ChannelLayout
:
:
Layout3F2
ffi
:
:
CUBEB_LAYOUT_3F2_LFE
=
>
ChannelLayout
:
:
Layout3F2Lfe
ffi
:
:
CUBEB_LAYOUT_3F3R_LFE
=
>
ChannelLayout
:
:
Layout3F3RLfe
ffi
:
:
CUBEB_LAYOUT_3F4_LFE
=
>
ChannelLayout
:
:
Layout3F4Lfe
_
=
>
ChannelLayout
:
:
Undefined
}
}
}
#
[
derive
(
Clone
Copy
)
]
pub
struct
StreamParams
{
raw
:
ffi
:
:
cubeb_stream_params
}
impl
StreamParams
{
pub
fn
format
(
&
self
)
-
>
SampleFormat
{
macro_rules
!
check
(
(
(
raw
:
ident
=
>
real
:
ident
)
*
)
=
>
(
(
if
self
.
raw
.
format
=
=
ffi
:
:
raw
{
SampleFormat
:
:
real
}
)
else
*
else
{
panic
!
(
"
unknown
sample
format
:
{
}
"
self
.
raw
.
format
)
}
)
)
;
check
!
(
CUBEB_SAMPLE_S16LE
=
>
S16LE
CUBEB_SAMPLE_S16BE
=
>
S16BE
CUBEB_SAMPLE_FLOAT32LE
=
>
Float32LE
CUBEB_SAMPLE_FLOAT32BE
=
>
Float32BE
)
}
pub
fn
rate
(
&
self
)
-
>
u32
{
self
.
raw
.
rate
as
u32
}
pub
fn
channels
(
&
self
)
-
>
u32
{
self
.
raw
.
channels
as
u32
}
pub
fn
layout
(
&
self
)
-
>
ChannelLayout
{
macro_rules
!
check
(
(
(
raw
:
ident
=
>
real
:
ident
)
*
)
=
>
(
(
if
self
.
raw
.
layout
=
=
ffi
:
:
raw
{
ChannelLayout
:
:
real
}
)
else
*
else
{
panic
!
(
"
unknown
channel
layout
:
{
}
"
self
.
raw
.
layout
)
}
)
)
;
check
!
(
CUBEB_LAYOUT_UNDEFINED
=
>
Undefined
CUBEB_LAYOUT_DUAL_MONO
=
>
DualMono
CUBEB_LAYOUT_DUAL_MONO_LFE
=
>
DualMonoLfe
CUBEB_LAYOUT_MONO
=
>
Mono
CUBEB_LAYOUT_MONO_LFE
=
>
MonoLfe
CUBEB_LAYOUT_STEREO
=
>
Stereo
CUBEB_LAYOUT_STEREO_LFE
=
>
StereoLfe
CUBEB_LAYOUT_3F
=
>
Layout3F
CUBEB_LAYOUT_3F_LFE
=
>
Layout3FLfe
CUBEB_LAYOUT_2F1
=
>
Layout2F1
CUBEB_LAYOUT_2F1_LFE
=
>
Layout2F1Lfe
CUBEB_LAYOUT_3F1
=
>
Layout3F1
CUBEB_LAYOUT_3F1_LFE
=
>
Layout3F1Lfe
CUBEB_LAYOUT_2F2
=
>
Layout2F2
CUBEB_LAYOUT_2F2_LFE
=
>
Layout2F2Lfe
CUBEB_LAYOUT_3F2
=
>
Layout3F2
CUBEB_LAYOUT_3F2_LFE
=
>
Layout3F2Lfe
CUBEB_LAYOUT_3F3R_LFE
=
>
Layout3F3RLfe
CUBEB_LAYOUT_3F4_LFE
=
>
Layout3F4Lfe
)
}
}
impl
Binding
for
StreamParams
{
type
Raw
=
*
const
ffi
:
:
cubeb_stream_params
;
unsafe
fn
from_raw
(
raw
:
*
const
ffi
:
:
cubeb_stream_params
)
-
>
Self
{
Self
{
raw
:
*
raw
}
}
fn
raw
(
&
self
)
-
>
Self
:
:
Raw
{
&
self
.
raw
as
Self
:
:
Raw
}
}
#
[
derive
(
Copy
Clone
Debug
)
]
pub
struct
Device
<
'
a
>
{
raw
:
*
const
ffi
:
:
cubeb_device
_marker
:
marker
:
:
PhantomData
<
&
'
a
ffi
:
:
cubeb_device
>
}
impl
<
'
a
>
Device
<
'
a
>
{
pub
fn
output_name
(
&
self
)
-
>
Option
<
&
str
>
{
self
.
output_name_bytes
(
)
.
map
(
|
b
|
str
:
:
from_utf8
(
b
)
.
unwrap
(
)
)
}
pub
fn
output_name_bytes
(
&
self
)
-
>
Option
<
&
[
u8
]
>
{
unsafe
{
opt_bytes
(
self
(
*
self
.
raw
)
.
output_name
)
}
}
pub
fn
input_name
(
&
self
)
-
>
Option
<
&
str
>
{
self
.
input_name_bytes
(
)
.
map
(
|
b
|
str
:
:
from_utf8
(
b
)
.
unwrap
(
)
)
}
pub
fn
input_name_bytes
(
&
self
)
-
>
Option
<
&
[
u8
]
>
{
unsafe
{
opt_bytes
(
self
(
*
self
.
raw
)
.
input_name
)
}
}
}
impl
<
'
a
>
Binding
for
Device
<
'
a
>
{
type
Raw
=
*
const
ffi
:
:
cubeb_device
;
unsafe
fn
from_raw
(
raw
:
*
const
ffi
:
:
cubeb_device
)
-
>
Device
<
'
a
>
{
Device
{
raw
:
raw
_marker
:
marker
:
:
PhantomData
}
}
fn
raw
(
&
self
)
-
>
*
const
ffi
:
:
cubeb_device
{
self
.
raw
}
}
#
[
derive
(
PartialEq
Eq
Clone
Debug
Copy
)
]
pub
enum
State
{
Started
Stopped
Drained
Error
}
#
[
derive
(
PartialEq
Eq
Clone
Debug
Copy
)
]
pub
enum
ErrorCode
{
Error
InvalidFormat
InvalidParameter
NotSupported
DeviceUnavailable
}
bitflags
!
{
pub
struct
DeviceType
:
ffi
:
:
cubeb_device_type
{
const
DEVICE_TYPE_UNKNOWN
=
ffi
:
:
CUBEB_DEVICE_TYPE_UNKNOWN
as
_
;
const
DEVICE_TYPE_INPUT
=
ffi
:
:
CUBEB_DEVICE_TYPE_INPUT
as
_
;
const
DEVICE_TYPE_OUTPUT
=
ffi
:
:
CUBEB_DEVICE_TYPE_OUTPUT
as
_
;
}
}
#
[
derive
(
PartialEq
Eq
Clone
Debug
Copy
)
]
pub
enum
DeviceState
{
Disabled
Unplugged
Enabled
}
bitflags
!
{
pub
struct
DeviceFormat
:
ffi
:
:
cubeb_device_fmt
{
const
DEVICE_FMT_S16LE
=
ffi
:
:
CUBEB_DEVICE_FMT_S16LE
;
const
DEVICE_FMT_S16BE
=
ffi
:
:
CUBEB_DEVICE_FMT_S16BE
;
const
DEVICE_FMT_F32LE
=
ffi
:
:
CUBEB_DEVICE_FMT_F32LE
;
const
DEVICE_FMT_F32BE
=
ffi
:
:
CUBEB_DEVICE_FMT_F32BE
;
}
}
bitflags
!
{
pub
struct
DevicePref
:
ffi
:
:
cubeb_device_pref
{
const
DEVICE_PREF_NONE
=
ffi
:
:
CUBEB_DEVICE_PREF_NONE
;
const
DEVICE_PREF_MULTIMEDIA
=
ffi
:
:
CUBEB_DEVICE_PREF_MULTIMEDIA
;
const
DEVICE_PREF_VOICE
=
ffi
:
:
CUBEB_DEVICE_PREF_VOICE
;
const
DEVICE_PREF_NOTIFICATION
=
ffi
:
:
CUBEB_DEVICE_PREF_NOTIFICATION
;
const
DEVICE_PREF_ALL
=
ffi
:
:
CUBEB_DEVICE_PREF_ALL
;
}
}
pub
struct
DeviceInfo
{
raw
:
ffi
:
:
cubeb_device_info
}
impl
DeviceInfo
{
pub
fn
raw
(
&
self
)
-
>
&
ffi
:
:
cubeb_device_info
{
&
self
.
raw
}
pub
fn
devid
(
&
self
)
-
>
DeviceId
{
unsafe
{
Binding
:
:
from_raw
(
self
.
raw
.
devid
)
}
}
pub
fn
device_id
(
&
self
)
-
>
Option
<
&
str
>
{
self
.
device_id_bytes
(
)
.
and_then
(
|
s
|
str
:
:
from_utf8
(
s
)
.
ok
(
)
)
}
pub
fn
device_id_bytes
(
&
self
)
-
>
Option
<
&
[
u8
]
>
{
unsafe
{
opt_bytes
(
self
self
.
raw
.
device_id
)
}
}
pub
fn
friendly_name
(
&
self
)
-
>
Option
<
&
str
>
{
self
.
friendly_name_bytes
(
)
.
and_then
(
|
s
|
str
:
:
from_utf8
(
s
)
.
ok
(
)
)
}
pub
fn
friendly_name_bytes
(
&
self
)
-
>
Option
<
&
[
u8
]
>
{
unsafe
{
opt_bytes
(
self
self
.
raw
.
friendly_name
)
}
}
pub
fn
group_id
(
&
self
)
-
>
Option
<
&
str
>
{
self
.
group_id_bytes
(
)
.
and_then
(
|
s
|
str
:
:
from_utf8
(
s
)
.
ok
(
)
)
}
pub
fn
group_id_bytes
(
&
self
)
-
>
Option
<
&
[
u8
]
>
{
unsafe
{
opt_bytes
(
self
self
.
raw
.
group_id
)
}
}
pub
fn
vendor_name
(
&
self
)
-
>
Option
<
&
str
>
{
self
.
vendor_name_bytes
(
)
.
and_then
(
|
s
|
str
:
:
from_utf8
(
s
)
.
ok
(
)
)
}
pub
fn
vendor_name_bytes
(
&
self
)
-
>
Option
<
&
[
u8
]
>
{
unsafe
{
opt_bytes
(
self
self
.
raw
.
vendor_name
)
}
}
pub
fn
device_type
(
&
self
)
-
>
DeviceType
{
DeviceType
:
:
from_bits_truncate
(
self
.
raw
.
device_type
)
}
pub
fn
state
(
&
self
)
-
>
DeviceState
{
let
state
=
self
.
raw
.
state
;
macro_rules
!
check
(
(
(
raw
:
ident
=
>
real
:
ident
)
*
)
=
>
(
(
if
state
=
=
ffi
:
:
raw
{
DeviceState
:
:
real
}
)
else
*
else
{
panic
!
(
"
unknown
device
state
:
{
}
"
state
)
}
)
)
;
check
!
(
CUBEB_DEVICE_STATE_DISABLED
=
>
Disabled
CUBEB_DEVICE_STATE_UNPLUGGED
=
>
Unplugged
CUBEB_DEVICE_STATE_ENABLED
=
>
Enabled
)
}
pub
fn
preferred
(
&
self
)
-
>
DevicePref
{
DevicePref
:
:
from_bits
(
self
.
raw
.
preferred
)
.
unwrap
(
)
}
pub
fn
format
(
&
self
)
-
>
DeviceFormat
{
DeviceFormat
:
:
from_bits
(
self
.
raw
.
format
)
.
unwrap
(
)
}
pub
fn
default_format
(
&
self
)
-
>
DeviceFormat
{
DeviceFormat
:
:
from_bits
(
self
.
raw
.
default_format
)
.
unwrap
(
)
}
pub
fn
max_channels
(
&
self
)
-
>
u32
{
self
.
raw
.
max_channels
}
pub
fn
default_rate
(
&
self
)
-
>
u32
{
self
.
raw
.
default_rate
}
pub
fn
max_rate
(
&
self
)
-
>
u32
{
self
.
raw
.
max_rate
}
pub
fn
min_rate
(
&
self
)
-
>
u32
{
self
.
raw
.
min_rate
}
pub
fn
latency_lo
(
&
self
)
-
>
u32
{
self
.
raw
.
latency_lo
}
pub
fn
latency_hi
(
&
self
)
-
>
u32
{
self
.
raw
.
latency_hi
}
}
pub
type
Result
<
T
>
=
:
:
std
:
:
result
:
:
Result
<
T
Error
>
;
#
[
cfg
(
test
)
]
mod
tests
{
use
binding
:
:
Binding
;
use
std
:
:
mem
;
#
[
test
]
fn
stream_params_raw_channels
(
)
{
let
mut
raw
:
super
:
:
ffi
:
:
cubeb_stream_params
=
unsafe
{
mem
:
:
zeroed
(
)
}
;
raw
.
channels
=
2
;
let
params
=
unsafe
{
super
:
:
StreamParams
:
:
from_raw
(
&
raw
as
*
const
_
)
}
;
assert_eq
!
(
params
.
channels
(
)
2
)
;
}
#
[
test
]
fn
stream_params_raw_format
(
)
{
let
mut
raw
:
super
:
:
ffi
:
:
cubeb_stream_params
=
unsafe
{
mem
:
:
zeroed
(
)
}
;
macro_rules
!
check
(
(
(
raw
:
ident
=
>
real
:
ident
)
*
)
=
>
(
(
raw
.
format
=
super
:
:
ffi
:
:
raw
;
let
params
=
unsafe
{
super
:
:
StreamParams
:
:
from_raw
(
&
raw
as
*
const
_
)
}
;
assert_eq
!
(
params
.
format
(
)
super
:
:
SampleFormat
:
:
real
)
;
)
*
)
)
;
check
!
(
CUBEB_SAMPLE_S16LE
=
>
S16LE
CUBEB_SAMPLE_S16BE
=
>
S16BE
CUBEB_SAMPLE_FLOAT32LE
=
>
Float32LE
CUBEB_SAMPLE_FLOAT32BE
=
>
Float32BE
)
;
}
#
[
test
]
fn
stream_params_raw_format_native_endian
(
)
{
let
mut
raw
:
super
:
:
ffi
:
:
cubeb_stream_params
=
unsafe
{
mem
:
:
zeroed
(
)
}
;
raw
.
format
=
super
:
:
ffi
:
:
CUBEB_SAMPLE_S16NE
;
let
params
=
unsafe
{
super
:
:
StreamParams
:
:
from_raw
(
&
raw
as
*
const
_
)
}
;
assert_eq
!
(
params
.
format
(
)
if
cfg
!
(
target_endian
=
"
little
"
)
{
super
:
:
SampleFormat
:
:
S16LE
}
else
{
super
:
:
SampleFormat
:
:
S16BE
}
)
;
raw
.
format
=
super
:
:
ffi
:
:
CUBEB_SAMPLE_FLOAT32NE
;
let
params
=
unsafe
{
super
:
:
StreamParams
:
:
from_raw
(
&
raw
as
*
const
_
)
}
;
assert_eq
!
(
params
.
format
(
)
if
cfg
!
(
target_endian
=
"
little
"
)
{
super
:
:
SampleFormat
:
:
Float32LE
}
else
{
super
:
:
SampleFormat
:
:
Float32BE
}
)
;
}
#
[
test
]
fn
stream_params_raw_layout
(
)
{
let
mut
raw
:
super
:
:
ffi
:
:
cubeb_stream_params
=
unsafe
{
mem
:
:
zeroed
(
)
}
;
macro_rules
!
check
(
(
(
raw
:
ident
=
>
real
:
ident
)
*
)
=
>
(
(
raw
.
layout
=
super
:
:
ffi
:
:
raw
;
let
params
=
unsafe
{
super
:
:
StreamParams
:
:
from_raw
(
&
raw
as
*
const
_
)
}
;
assert_eq
!
(
params
.
layout
(
)
super
:
:
ChannelLayout
:
:
real
)
;
)
*
)
)
;
check
!
(
CUBEB_LAYOUT_UNDEFINED
=
>
Undefined
CUBEB_LAYOUT_DUAL_MONO
=
>
DualMono
CUBEB_LAYOUT_DUAL_MONO_LFE
=
>
DualMonoLfe
CUBEB_LAYOUT_MONO
=
>
Mono
CUBEB_LAYOUT_MONO_LFE
=
>
MonoLfe
CUBEB_LAYOUT_STEREO
=
>
Stereo
CUBEB_LAYOUT_STEREO_LFE
=
>
StereoLfe
CUBEB_LAYOUT_3F
=
>
Layout3F
CUBEB_LAYOUT_3F_LFE
=
>
Layout3FLfe
CUBEB_LAYOUT_2F1
=
>
Layout2F1
CUBEB_LAYOUT_2F1_LFE
=
>
Layout2F1Lfe
CUBEB_LAYOUT_3F1
=
>
Layout3F1
CUBEB_LAYOUT_3F1_LFE
=
>
Layout3F1Lfe
CUBEB_LAYOUT_2F2
=
>
Layout2F2
CUBEB_LAYOUT_2F2_LFE
=
>
Layout2F2Lfe
CUBEB_LAYOUT_3F2
=
>
Layout3F2
CUBEB_LAYOUT_3F2_LFE
=
>
Layout3F2Lfe
CUBEB_LAYOUT_3F3R_LFE
=
>
Layout3F3RLfe
CUBEB_LAYOUT_3F4_LFE
=
>
Layout3F4Lfe
)
;
}
#
[
test
]
fn
stream_params_raw_rate
(
)
{
let
mut
raw
:
super
:
:
ffi
:
:
cubeb_stream_params
=
unsafe
{
mem
:
:
zeroed
(
)
}
;
raw
.
rate
=
44100
;
let
params
=
unsafe
{
super
:
:
StreamParams
:
:
from_raw
(
&
raw
as
*
const
_
)
}
;
assert_eq
!
(
params
.
rate
(
)
44100
)
;
}
}
