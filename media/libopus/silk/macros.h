#
ifndef
SILK_MACROS_H
#
define
SILK_MACROS_H
#
ifdef
HAVE_CONFIG_H
#
include
"
config
.
h
"
#
endif
#
include
"
opus_types
.
h
"
#
include
"
opus_defines
.
h
"
#
if
OPUS_GNUC_PREREQ
(
3
0
)
#
define
opus_likely
(
x
)
(
__builtin_expect
(
!
!
(
x
)
1
)
)
#
define
opus_unlikely
(
x
)
(
__builtin_expect
(
!
!
(
x
)
0
)
)
#
else
#
define
opus_likely
(
x
)
(
!
!
(
x
)
)
#
define
opus_unlikely
(
x
)
(
!
!
(
x
)
)
#
endif
#
define
OPUS_FAST_INT64
(
defined
(
__x86_64__
)
|
|
defined
(
__LP64__
)
|
|
defined
(
_WIN64
)
)
#
if
OPUS_FAST_INT64
#
define
silk_SMULWB
(
a32
b32
)
(
(
(
a32
)
*
(
opus_int64
)
(
(
opus_int16
)
(
b32
)
)
)
>
>
16
)
#
else
#
define
silk_SMULWB
(
a32
b32
)
(
(
(
(
a32
)
>
>
16
)
*
(
opus_int32
)
(
(
opus_int16
)
(
b32
)
)
)
+
(
(
(
(
a32
)
&
0x0000FFFF
)
*
(
opus_int32
)
(
(
opus_int16
)
(
b32
)
)
)
>
>
16
)
)
#
endif
#
if
OPUS_FAST_INT64
#
define
silk_SMLAWB
(
a32
b32
c32
)
(
(
a32
)
+
(
(
(
b32
)
*
(
opus_int64
)
(
(
opus_int16
)
(
c32
)
)
)
>
>
16
)
)
#
else
#
define
silk_SMLAWB
(
a32
b32
c32
)
(
(
a32
)
+
(
(
(
(
b32
)
>
>
16
)
*
(
opus_int32
)
(
(
opus_int16
)
(
c32
)
)
)
+
(
(
(
(
b32
)
&
0x0000FFFF
)
*
(
opus_int32
)
(
(
opus_int16
)
(
c32
)
)
)
>
>
16
)
)
)
#
endif
#
define
silk_SMULWT
(
a32
b32
)
(
(
(
a32
)
>
>
16
)
*
(
(
b32
)
>
>
16
)
+
(
(
(
(
a32
)
&
0x0000FFFF
)
*
(
(
b32
)
>
>
16
)
)
>
>
16
)
)
#
if
OPUS_FAST_INT64
#
define
silk_SMLAWT
(
a32
b32
c32
)
(
(
a32
)
+
(
(
(
b32
)
*
(
(
opus_int64
)
(
c32
)
>
>
16
)
)
>
>
16
)
)
#
else
#
define
silk_SMLAWT
(
a32
b32
c32
)
(
(
a32
)
+
(
(
(
b32
)
>
>
16
)
*
(
(
c32
)
>
>
16
)
)
+
(
(
(
(
b32
)
&
0x0000FFFF
)
*
(
(
c32
)
>
>
16
)
)
>
>
16
)
)
#
endif
#
define
silk_SMULBB
(
a32
b32
)
(
(
opus_int32
)
(
(
opus_int16
)
(
a32
)
)
*
(
opus_int32
)
(
(
opus_int16
)
(
b32
)
)
)
#
define
silk_SMLABB
(
a32
b32
c32
)
(
(
a32
)
+
(
(
opus_int32
)
(
(
opus_int16
)
(
b32
)
)
)
*
(
opus_int32
)
(
(
opus_int16
)
(
c32
)
)
)
#
define
silk_SMULBT
(
a32
b32
)
(
(
opus_int32
)
(
(
opus_int16
)
(
a32
)
)
*
(
(
b32
)
>
>
16
)
)
#
define
silk_SMLABT
(
a32
b32
c32
)
(
(
a32
)
+
(
(
opus_int32
)
(
(
opus_int16
)
(
b32
)
)
)
*
(
(
c32
)
>
>
16
)
)
#
define
silk_SMLAL
(
a64
b32
c32
)
(
silk_ADD64
(
(
a64
)
(
(
opus_int64
)
(
b32
)
*
(
opus_int64
)
(
c32
)
)
)
)
#
if
OPUS_FAST_INT64
#
define
silk_SMULWW
(
a32
b32
)
(
(
(
opus_int64
)
(
a32
)
*
(
b32
)
)
>
>
16
)
#
else
#
define
silk_SMULWW
(
a32
b32
)
silk_MLA
(
silk_SMULWB
(
(
a32
)
(
b32
)
)
(
a32
)
silk_RSHIFT_ROUND
(
(
b32
)
16
)
)
#
endif
#
if
OPUS_FAST_INT64
#
define
silk_SMLAWW
(
a32
b32
c32
)
(
(
a32
)
+
(
(
(
opus_int64
)
(
b32
)
*
(
c32
)
)
>
>
16
)
)
#
else
#
define
silk_SMLAWW
(
a32
b32
c32
)
silk_MLA
(
silk_SMLAWB
(
(
a32
)
(
b32
)
(
c32
)
)
(
b32
)
silk_RSHIFT_ROUND
(
(
c32
)
16
)
)
#
endif
#
define
silk_ADD_SAT32
(
a
b
)
(
(
(
(
opus_uint32
)
(
a
)
+
(
opus_uint32
)
(
b
)
)
&
0x80000000
)
=
=
0
?
\
(
(
(
(
a
)
&
(
b
)
)
&
0x80000000
)
!
=
0
?
silk_int32_MIN
:
(
a
)
+
(
b
)
)
:
\
(
(
(
(
a
)
|
(
b
)
)
&
0x80000000
)
=
=
0
?
silk_int32_MAX
:
(
a
)
+
(
b
)
)
)
#
define
silk_SUB_SAT32
(
a
b
)
(
(
(
(
opus_uint32
)
(
a
)
-
(
opus_uint32
)
(
b
)
)
&
0x80000000
)
=
=
0
?
\
(
(
(
a
)
&
(
(
b
)
^
0x80000000
)
&
0x80000000
)
?
silk_int32_MIN
:
(
a
)
-
(
b
)
)
:
\
(
(
(
(
a
)
^
0x80000000
)
&
(
b
)
&
0x80000000
)
?
silk_int32_MAX
:
(
a
)
-
(
b
)
)
)
#
if
defined
(
MIPSr1_ASM
)
#
include
"
mips
/
macros_mipsr1
.
h
"
#
endif
#
include
"
ecintrin
.
h
"
#
ifndef
OVERRIDE_silk_CLZ16
static
OPUS_INLINE
opus_int32
silk_CLZ16
(
opus_int16
in16
)
{
return
32
-
EC_ILOG
(
in16
<
<
16
|
0x8000
)
;
}
#
endif
#
ifndef
OVERRIDE_silk_CLZ32
static
OPUS_INLINE
opus_int32
silk_CLZ32
(
opus_int32
in32
)
{
return
in32
?
32
-
EC_ILOG
(
in32
)
:
32
;
}
#
endif
#
define
matrix_ptr
(
Matrix_base_adr
row
column
N
)
\
(
*
(
(
Matrix_base_adr
)
+
(
(
row
)
*
(
N
)
+
(
column
)
)
)
)
#
define
matrix_adr
(
Matrix_base_adr
row
column
N
)
\
(
(
Matrix_base_adr
)
+
(
(
row
)
*
(
N
)
+
(
column
)
)
)
#
ifndef
matrix_c_ptr
#
define
matrix_c_ptr
(
Matrix_base_adr
row
column
M
)
\
(
*
(
(
Matrix_base_adr
)
+
(
(
row
)
+
(
M
)
*
(
column
)
)
)
)
#
endif
#
ifdef
OPUS_ARM_INLINE_ASM
#
include
"
arm
/
macros_armv4
.
h
"
#
endif
#
ifdef
OPUS_ARM_INLINE_EDSP
#
include
"
arm
/
macros_armv5e
.
h
"
#
endif
#
endif
