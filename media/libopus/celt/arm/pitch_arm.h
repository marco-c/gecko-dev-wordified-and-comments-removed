#
if
!
defined
(
PITCH_ARM_H
)
#
define
PITCH_ARM_H
#
include
"
armcpu
.
h
"
#
if
defined
(
FIXED_POINT
)
#
if
defined
(
OPUS_ARM_MAY_HAVE_NEON
)
opus_val32
celt_pitch_xcorr_neon
(
const
opus_val16
*
_x
const
opus_val16
*
_y
opus_val32
*
xcorr
int
len
int
max_pitch
)
;
#
endif
#
if
defined
(
OPUS_ARM_MAY_HAVE_MEDIA
)
#
define
celt_pitch_xcorr_media
MAY_HAVE_EDSP
(
celt_pitch_xcorr
)
#
endif
#
if
defined
(
OPUS_ARM_MAY_HAVE_EDSP
)
opus_val32
celt_pitch_xcorr_edsp
(
const
opus_val16
*
_x
const
opus_val16
*
_y
opus_val32
*
xcorr
int
len
int
max_pitch
)
;
#
endif
#
if
defined
(
OPUS_HAVE_RTCD
)
&
&
\
(
(
defined
(
OPUS_ARM_MAY_HAVE_NEON
)
&
&
!
defined
(
OPUS_ARM_PRESUME_NEON
)
)
|
|
\
(
defined
(
OPUS_ARM_MAY_HAVE_MEDIA
)
&
&
!
defined
(
OPUS_ARM_PRESUME_MEDIA
)
)
|
|
\
(
defined
(
OPUS_ARM_MAY_HAVE_EDSP
)
&
&
!
defined
(
OPUS_ARM_PRESUME_EDSP
)
)
)
extern
opus_val32
(
*
const
CELT_PITCH_XCORR_IMPL
[
OPUS_ARCHMASK
+
1
]
)
(
const
opus_val16
*
const
opus_val16
*
opus_val32
*
int
int
)
;
#
define
OVERRIDE_PITCH_XCORR
(
1
)
#
define
celt_pitch_xcorr
(
_x
_y
xcorr
len
max_pitch
arch
)
\
(
(
*
CELT_PITCH_XCORR_IMPL
[
(
arch
)
&
OPUS_ARCHMASK
]
)
(
_x
_y
\
xcorr
len
max_pitch
)
)
#
elif
defined
(
OPUS_ARM_PRESUME_EDSP
)
|
|
\
defined
(
OPUS_ARM_PRESUME_MEDIA
)
|
|
\
defined
(
OPUS_ARM_PRESUME_NEON
)
#
define
OVERRIDE_PITCH_XCORR
(
1
)
#
define
celt_pitch_xcorr
(
_x
_y
xcorr
len
max_pitch
arch
)
\
(
(
void
)
(
arch
)
PRESUME_NEON
(
celt_pitch_xcorr
)
(
_x
_y
xcorr
len
max_pitch
)
)
#
endif
#
if
defined
(
OPUS_ARM_MAY_HAVE_NEON_INTR
)
void
xcorr_kernel_neon_fixed
(
const
opus_val16
*
x
const
opus_val16
*
y
opus_val32
sum
[
4
]
int
len
)
;
#
endif
#
if
defined
(
OPUS_HAVE_RTCD
)
&
&
\
(
defined
(
OPUS_ARM_MAY_HAVE_NEON_INTR
)
&
&
!
defined
(
OPUS_ARM_PRESUME_NEON_INTR
)
)
extern
void
(
*
const
XCORR_KERNEL_IMPL
[
OPUS_ARCHMASK
+
1
]
)
(
const
opus_val16
*
x
const
opus_val16
*
y
opus_val32
sum
[
4
]
int
len
)
;
#
define
OVERRIDE_XCORR_KERNEL
(
1
)
#
define
xcorr_kernel
(
x
y
sum
len
arch
)
\
(
(
*
XCORR_KERNEL_IMPL
[
(
arch
)
&
OPUS_ARCHMASK
]
)
(
x
y
sum
len
)
)
#
elif
defined
(
OPUS_ARM_PRESUME_NEON_INTR
)
#
define
OVERRIDE_XCORR_KERNEL
(
1
)
#
define
xcorr_kernel
(
x
y
sum
len
arch
)
\
(
(
void
)
arch
xcorr_kernel_neon_fixed
(
x
y
sum
len
)
)
#
endif
#
else
#
if
defined
(
OPUS_ARM_MAY_HAVE_NEON_INTR
)
void
celt_pitch_xcorr_float_neon
(
const
opus_val16
*
_x
const
opus_val16
*
_y
opus_val32
*
xcorr
int
len
int
max_pitch
)
;
#
endif
#
if
defined
(
OPUS_HAVE_RTCD
)
&
&
\
(
defined
(
OPUS_ARM_MAY_HAVE_NEON_INTR
)
&
&
!
defined
(
OPUS_ARM_PRESUME_NEON_INTR
)
)
extern
void
(
*
const
CELT_PITCH_XCORR_IMPL
[
OPUS_ARCHMASK
+
1
]
)
(
const
opus_val16
*
const
opus_val16
*
opus_val32
*
int
int
)
;
#
define
OVERRIDE_PITCH_XCORR
(
1
)
#
define
celt_pitch_xcorr
(
_x
_y
xcorr
len
max_pitch
arch
)
\
(
(
*
CELT_PITCH_XCORR_IMPL
[
(
arch
)
&
OPUS_ARCHMASK
]
)
(
_x
_y
\
xcorr
len
max_pitch
)
)
#
elif
defined
(
OPUS_ARM_PRESUME_NEON_INTR
)
#
define
OVERRIDE_PITCH_XCORR
(
1
)
#
define
celt_pitch_xcorr
(
_x
_y
xcorr
len
max_pitch
arch
)
\
(
(
void
)
(
arch
)
celt_pitch_xcorr_float_neon
(
_x
_y
xcorr
len
max_pitch
)
)
#
endif
#
endif
#
endif
