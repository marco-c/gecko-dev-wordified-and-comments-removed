#
ifndef
VPX_VP8_ENCODER_MCOMP_H_
#
define
VPX_VP8_ENCODER_MCOMP_H_
#
include
"
block
.
h
"
#
include
"
vpx_dsp
/
variance
.
h
"
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
define
MAX_MVSEARCH_STEPS
8
#
define
MAX_FULL_PEL_VAL
(
(
1
<
<
(
MAX_MVSEARCH_STEPS
)
)
-
1
)
#
define
MAX_FIRST_STEP
(
1
<
<
(
MAX_MVSEARCH_STEPS
-
1
)
)
int
vp8_mv_bit_cost
(
int_mv
*
mv
int_mv
*
ref
int
*
mvcost
[
2
]
int
Weight
)
;
void
vp8_init_dsmotion_compensation
(
MACROBLOCK
*
x
int
stride
)
;
void
vp8_init3smotion_compensation
(
MACROBLOCK
*
x
int
stride
)
;
int
vp8_hex_search
(
MACROBLOCK
*
x
BLOCK
*
b
BLOCKD
*
d
int_mv
*
ref_mv
int_mv
*
best_mv
int
search_param
int
sad_per_bit
const
vp8_variance_fn_ptr_t
*
vfp
int
*
mvsadcost
[
2
]
int_mv
*
center_mv
)
;
typedef
int
(
fractional_mv_step_fp
)
(
MACROBLOCK
*
x
BLOCK
*
b
BLOCKD
*
d
int_mv
*
bestmv
int_mv
*
ref_mv
int
error_per_bit
const
vp8_variance_fn_ptr_t
*
vfp
int
*
mvcost
[
2
]
int
*
distortion
unsigned
int
*
sse
)
;
fractional_mv_step_fp
vp8_find_best_sub_pixel_step_iteratively
;
fractional_mv_step_fp
vp8_find_best_sub_pixel_step
;
fractional_mv_step_fp
vp8_find_best_half_pixel_step
;
fractional_mv_step_fp
vp8_skip_fractional_mv_step
;
typedef
int
(
*
vp8_full_search_fn_t
)
(
MACROBLOCK
*
x
BLOCK
*
b
BLOCKD
*
d
int_mv
*
ref_mv
int
sad_per_bit
int
distance
vp8_variance_fn_ptr_t
*
fn_ptr
int
*
mvcost
[
2
]
int_mv
*
center_mv
)
;
typedef
int
(
*
vp8_refining_search_fn_t
)
(
MACROBLOCK
*
x
BLOCK
*
b
BLOCKD
*
d
int_mv
*
ref_mv
int
sad_per_bit
int
distance
vp8_variance_fn_ptr_t
*
fn_ptr
int
*
mvcost
[
2
]
int_mv
*
center_mv
)
;
typedef
int
(
*
vp8_diamond_search_fn_t
)
(
MACROBLOCK
*
x
BLOCK
*
b
BLOCKD
*
d
int_mv
*
ref_mv
int_mv
*
best_mv
int
search_param
int
sad_per_bit
int
*
num00
vp8_variance_fn_ptr_t
*
fn_ptr
int
*
mvcost
[
2
]
int_mv
*
center_mv
)
;
#
ifdef
__cplusplus
}
#
endif
#
endif
