#
ifndef
VPX_VPX_VPX_EXT_RATECTRL_H_
#
define
VPX_VPX_VPX_EXT_RATECTRL_H_
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
#
include
"
.
/
vpx_integer
.
h
"
#
define
VPX_EXT_RATECTRL_ABI_VERSION
(
1
)
typedef
void
*
vpx_rc_model_t
;
typedef
struct
vpx_rc_encodeframe_decision
{
int
q_index
;
int
max_frame_size
;
}
vpx_rc_encodeframe_decision_t
;
typedef
struct
vpx_rc_encodeframe_info
{
int
frame_type
;
int
show_index
;
int
coding_index
;
int
gop_index
;
int
ref_frame_coding_indexes
[
3
]
;
int
ref_frame_valid_list
[
3
]
;
}
vpx_rc_encodeframe_info_t
;
typedef
struct
vpx_rc_encodeframe_result
{
int64_t
sse
;
int64_t
bit_count
;
int64_t
pixel_count
;
int
actual_encoding_qindex
;
}
vpx_rc_encodeframe_result_t
;
typedef
enum
vpx_rc_status
{
VPX_RC_OK
=
0
VPX_RC_ERROR
=
1
}
vpx_rc_status_t
;
typedef
struct
vpx_rc_frame_stats
{
double
frame
;
double
weight
;
double
intra_error
;
double
coded_error
;
double
sr_coded_error
;
double
frame_noise_energy
;
double
pcnt_inter
;
double
pcnt_motion
;
double
pcnt_second_ref
;
double
pcnt_neutral
;
double
pcnt_intra_low
;
double
pcnt_intra_high
;
double
intra_skip_pct
;
double
intra_smooth_pct
;
double
inactive_zone_rows
;
double
inactive_zone_cols
;
double
MVr
;
double
mvr_abs
;
double
MVc
;
double
mvc_abs
;
double
MVrv
;
double
MVcv
;
double
mv_in_out_count
;
double
duration
;
double
count
;
}
vpx_rc_frame_stats_t
;
typedef
struct
vpx_rc_firstpass_stats
{
vpx_rc_frame_stats_t
*
frame_stats
;
int
num_frames
;
}
vpx_rc_firstpass_stats_t
;
typedef
struct
vpx_rc_config
{
int
frame_width
;
int
frame_height
;
int
show_frame_count
;
int
target_bitrate_kbps
;
int
frame_rate_num
;
int
frame_rate_den
;
}
vpx_rc_config_t
;
typedef
vpx_rc_status_t
(
*
vpx_rc_create_model_cb_fn_t
)
(
void
*
priv
const
vpx_rc_config_t
*
ratectrl_config
vpx_rc_model_t
*
rate_ctrl_model_pt
)
;
typedef
vpx_rc_status_t
(
*
vpx_rc_send_firstpass_stats_cb_fn_t
)
(
vpx_rc_model_t
rate_ctrl_model
const
vpx_rc_firstpass_stats_t
*
first_pass_stats
)
;
typedef
vpx_rc_status_t
(
*
vpx_rc_get_encodeframe_decision_cb_fn_t
)
(
vpx_rc_model_t
rate_ctrl_model
const
vpx_rc_encodeframe_info_t
*
encode_frame_info
vpx_rc_encodeframe_decision_t
*
frame_decision
)
;
typedef
vpx_rc_status_t
(
*
vpx_rc_update_encodeframe_result_cb_fn_t
)
(
vpx_rc_model_t
rate_ctrl_model
const
vpx_rc_encodeframe_result_t
*
encode_frame_result
)
;
typedef
vpx_rc_status_t
(
*
vpx_rc_delete_model_cb_fn_t
)
(
vpx_rc_model_t
rate_ctrl_model
)
;
typedef
struct
vpx_rc_funcs
{
vpx_rc_create_model_cb_fn_t
create_model
;
vpx_rc_send_firstpass_stats_cb_fn_t
send_firstpass_stats
;
vpx_rc_get_encodeframe_decision_cb_fn_t
get_encodeframe_decision
;
vpx_rc_update_encodeframe_result_cb_fn_t
update_encodeframe_result
;
vpx_rc_delete_model_cb_fn_t
delete_model
;
void
*
priv
;
}
vpx_rc_funcs_t
;
#
ifdef
__cplusplus
}
#
endif
#
endif
