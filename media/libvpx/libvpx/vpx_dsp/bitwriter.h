#
ifndef
VPX_VPX_DSP_BITWRITER_H_
#
define
VPX_VPX_DSP_BITWRITER_H_
#
include
<
stdio
.
h
>
#
include
"
vpx_ports
/
compiler_attributes
.
h
"
#
include
"
vpx_ports
/
mem
.
h
"
#
include
"
vpx_dsp
/
prob
.
h
"
#
if
CONFIG_BITSTREAM_DEBUG
#
include
"
vpx_util
/
vpx_debug_util
.
h
"
#
endif
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
typedef
struct
vpx_writer
{
unsigned
int
lowvalue
;
unsigned
int
range
;
int
count
;
unsigned
int
pos
;
uint8_t
*
buffer
;
}
vpx_writer
;
void
vpx_start_encode
(
vpx_writer
*
br
uint8_t
*
source
)
;
void
vpx_stop_encode
(
vpx_writer
*
br
)
;
static
INLINE
VPX_NO_UNSIGNED_SHIFT_CHECK
void
vpx_write
(
vpx_writer
*
br
int
bit
int
probability
)
{
unsigned
int
split
;
int
count
=
br
-
>
count
;
unsigned
int
range
=
br
-
>
range
;
unsigned
int
lowvalue
=
br
-
>
lowvalue
;
int
shift
;
#
if
CONFIG_BITSTREAM_DEBUG
bitstream_queue_push
(
bit
probability
)
;
#
endif
split
=
1
+
(
(
(
range
-
1
)
*
probability
)
>
>
8
)
;
range
=
split
;
if
(
bit
)
{
lowvalue
+
=
split
;
range
=
br
-
>
range
-
split
;
}
shift
=
vpx_norm
[
range
]
;
range
<
<
=
shift
;
count
+
=
shift
;
if
(
count
>
=
0
)
{
int
offset
=
shift
-
count
;
if
(
(
lowvalue
<
<
(
offset
-
1
)
)
&
0x80000000
)
{
int
x
=
br
-
>
pos
-
1
;
while
(
x
>
=
0
&
&
br
-
>
buffer
[
x
]
=
=
0xff
)
{
br
-
>
buffer
[
x
]
=
0
;
x
-
-
;
}
br
-
>
buffer
[
x
]
+
=
1
;
}
br
-
>
buffer
[
br
-
>
pos
+
+
]
=
(
lowvalue
>
>
(
24
-
offset
)
)
&
0xff
;
lowvalue
<
<
=
offset
;
shift
=
count
;
lowvalue
&
=
0xffffff
;
count
-
=
8
;
}
lowvalue
<
<
=
shift
;
br
-
>
count
=
count
;
br
-
>
lowvalue
=
lowvalue
;
br
-
>
range
=
range
;
}
static
INLINE
void
vpx_write_bit
(
vpx_writer
*
w
int
bit
)
{
vpx_write
(
w
bit
128
)
;
}
static
INLINE
void
vpx_write_literal
(
vpx_writer
*
w
int
data
int
bits
)
{
int
bit
;
for
(
bit
=
bits
-
1
;
bit
>
=
0
;
bit
-
-
)
vpx_write_bit
(
w
1
&
(
data
>
>
bit
)
)
;
}
#
define
vpx_write_prob
(
w
v
)
vpx_write_literal
(
(
w
)
(
v
)
8
)
#
ifdef
__cplusplus
}
#
endif
#
endif
