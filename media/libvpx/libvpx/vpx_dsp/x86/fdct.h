#
ifndef
VPX_DSP_X86_FDCT_H_
#
define
VPX_DSP_X86_FDCT_H_
#
include
<
xmmintrin
.
h
>
#
include
"
.
/
vpx_config
.
h
"
#
include
"
vpx
/
vpx_integer
.
h
"
#
include
"
vpx_dsp
/
vpx_dsp_common
.
h
"
static
INLINE
__m128i
load_tran_low
(
const
tran_low_t
*
a
)
{
#
if
CONFIG_VP9_HIGHBITDEPTH
return
_mm_setr_epi16
(
(
int16_t
)
a
[
0
]
(
int16_t
)
a
[
1
]
(
int16_t
)
a
[
2
]
(
int16_t
)
a
[
3
]
(
int16_t
)
a
[
4
]
(
int16_t
)
a
[
5
]
(
int16_t
)
a
[
6
]
(
int16_t
)
a
[
7
]
)
;
#
else
return
_mm_load_si128
(
(
const
__m128i
*
)
a
)
;
#
endif
}
static
INLINE
void
store_tran_low
(
__m128i
a
tran_low_t
*
b
)
{
#
if
CONFIG_VP9_HIGHBITDEPTH
const
__m128i
one
=
_mm_set1_epi16
(
1
)
;
const
__m128i
a_hi
=
_mm_mulhi_epi16
(
a
one
)
;
const
__m128i
a_lo
=
_mm_mullo_epi16
(
a
one
)
;
const
__m128i
a_1
=
_mm_unpacklo_epi16
(
a_lo
a_hi
)
;
const
__m128i
a_2
=
_mm_unpackhi_epi16
(
a_lo
a_hi
)
;
_mm_store_si128
(
(
__m128i
*
)
(
b
)
a_1
)
;
_mm_store_si128
(
(
__m128i
*
)
(
b
+
4
)
a_2
)
;
#
else
_mm_store_si128
(
(
__m128i
*
)
(
b
)
a
)
;
#
endif
}
static
INLINE
void
store_zero_tran_low
(
tran_low_t
*
a
)
{
const
__m128i
zero
=
_mm_setzero_si128
(
)
;
#
if
CONFIG_VP9_HIGHBITDEPTH
_mm_store_si128
(
(
__m128i
*
)
(
a
)
zero
)
;
_mm_store_si128
(
(
__m128i
*
)
(
a
+
4
)
zero
)
;
#
else
_mm_store_si128
(
(
__m128i
*
)
(
a
)
zero
)
;
#
endif
}
#
endif
