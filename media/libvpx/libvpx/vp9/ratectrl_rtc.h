#
ifndef
VPX_VP9_RATECTRL_RTC_H_
#
define
VPX_VP9_RATECTRL_RTC_H_
#
include
<
cstdint
>
#
include
<
cstring
>
#
include
<
limits
>
#
include
<
memory
>
#
include
"
vpx
/
vpx_encoder
.
h
"
#
include
"
vpx
/
internal
/
vpx_ratectrl_rtc
.
h
"
struct
VP9_COMP
;
namespace
libvpx
{
struct
VP9RateControlRtcConfig
:
public
VpxRateControlRtcConfig
{
VP9RateControlRtcConfig
(
)
{
memset
(
layer_target_bitrate
0
sizeof
(
layer_target_bitrate
)
)
;
memset
(
ts_rate_decimator
0
sizeof
(
ts_rate_decimator
)
)
;
scaling_factor_num
[
0
]
=
1
;
scaling_factor_den
[
0
]
=
1
;
max_quantizers
[
0
]
=
max_quantizer
;
min_quantizers
[
0
]
=
min_quantizer
;
}
int
ss_number_layers
=
1
;
int
max_quantizers
[
VPX_MAX_LAYERS
]
=
{
}
;
int
min_quantizers
[
VPX_MAX_LAYERS
]
=
{
}
;
int
scaling_factor_num
[
VPX_SS_MAX_LAYERS
]
=
{
}
;
int
scaling_factor_den
[
VPX_SS_MAX_LAYERS
]
=
{
}
;
int
max_consec_drop
=
std
:
:
numeric_limits
<
int
>
:
:
max
(
)
;
}
;
struct
VP9FrameParamsQpRTC
{
RcFrameType
frame_type
;
int
spatial_layer_id
;
int
temporal_layer_id
;
}
;
struct
VP9SegmentationData
{
const
uint8_t
*
segmentation_map
;
size_t
segmentation_map_size
;
const
int
*
delta_q
;
size_t
delta_q_size
;
}
;
class
VP9RateControlRTC
{
public
:
static
std
:
:
unique_ptr
<
VP9RateControlRTC
>
Create
(
const
VP9RateControlRtcConfig
&
cfg
)
;
~
VP9RateControlRTC
(
)
;
bool
UpdateRateControl
(
const
VP9RateControlRtcConfig
&
rc_cfg
)
;
int
GetQP
(
)
const
;
int
GetLoopfilterLevel
(
)
const
;
bool
GetSegmentationData
(
VP9SegmentationData
*
segmentation_data
)
const
;
FrameDropDecision
ComputeQP
(
const
VP9FrameParamsQpRTC
&
frame_params
)
;
void
PostEncodeUpdate
(
uint64_t
encoded_frame_size
const
VP9FrameParamsQpRTC
&
frame_params
)
;
private
:
VP9RateControlRTC
(
)
=
default
;
bool
InitRateControl
(
const
VP9RateControlRtcConfig
&
cfg
)
;
struct
VP9_COMP
*
cpi_
=
nullptr
;
}
;
}
#
endif
