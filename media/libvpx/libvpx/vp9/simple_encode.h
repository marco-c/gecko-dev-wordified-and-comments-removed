#
ifndef
VPX_VP9_SIMPLE_ENCODE_H_
#
define
VPX_VP9_SIMPLE_ENCODE_H_
#
include
<
cstddef
>
#
include
<
cstdint
>
#
include
<
cstdio
>
#
include
<
memory
>
#
include
<
vector
>
namespace
vp9
{
enum
FrameType
{
kKeyFrame
=
0
kInterFrame
kAlternateReference
}
;
struct
EncodeFrameResult
{
int
show_idx
;
FrameType
frame_type
;
size_t
coding_data_bit_size
;
size_t
coding_data_byte_size
;
std
:
:
unique_ptr
<
unsigned
char
[
]
>
coding_data
;
double
psnr
;
uint64_t
sse
;
int
quantize_index
;
}
;
class
SimpleEncode
{
public
:
SimpleEncode
(
int
frame_width
int
frame_height
int
frame_rate_num
int
frame_rate_den
int
target_bitrate
int
num_frames
const
char
*
infile_path
)
;
~
SimpleEncode
(
)
;
SimpleEncode
(
SimpleEncode
&
)
=
delete
;
SimpleEncode
&
operator
=
(
const
SimpleEncode
&
)
=
delete
;
void
ComputeFirstPassStats
(
)
;
std
:
:
vector
<
std
:
:
vector
<
double
>
>
ObserveFirstPassStats
(
)
;
void
StartEncode
(
)
;
void
EndEncode
(
)
;
int
GetKeyFrameGroupSize
(
int
key_frame_index
)
const
;
void
EncodeFrame
(
EncodeFrameResult
*
encode_frame_result
)
;
void
EncodeFrameWithQuantizeIndex
(
EncodeFrameResult
*
encode_frame_result
int
quantize_index
)
;
int
GetCodingFrameNum
(
)
const
;
private
:
class
EncodeImpl
;
int
frame_width_
;
int
frame_height_
;
int
frame_rate_num_
;
int
frame_rate_den_
;
int
target_bitrate_
;
int
num_frames_
;
std
:
:
FILE
*
file_
;
std
:
:
unique_ptr
<
EncodeImpl
>
impl_ptr_
;
}
;
}
#
endif
