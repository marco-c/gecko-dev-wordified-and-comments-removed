#
include
<
climits
>
#
include
<
vector
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
test
/
codec_factory
.
h
"
#
include
"
test
/
encode_test_driver
.
h
"
#
include
"
test
/
i420_video_source
.
h
"
#
include
"
test
/
util
.
h
"
#
include
"
vpx_config
.
h
"
namespace
{
class
BordersTest
:
public
:
:
libvpx_test
:
:
EncoderTest
public
:
:
libvpx_test
:
:
CodecTestWithParam
<
libvpx_test
:
:
TestMode
>
{
protected
:
BordersTest
(
)
:
EncoderTest
(
GET_PARAM
(
0
)
)
{
}
~
BordersTest
(
)
override
=
default
;
void
SetUp
(
)
override
{
InitializeConfig
(
)
;
SetMode
(
GET_PARAM
(
1
)
)
;
}
void
PreEncodeFrameHook
(
:
:
libvpx_test
:
:
VideoSource
*
video
:
:
libvpx_test
:
:
Encoder
*
encoder
)
override
{
if
(
video
-
>
frame
(
)
=
=
0
)
{
encoder
-
>
Control
(
VP8E_SET_CPUUSED
1
)
;
encoder
-
>
Control
(
VP8E_SET_ENABLEAUTOALTREF
1
)
;
encoder
-
>
Control
(
VP8E_SET_ARNR_MAXFRAMES
7
)
;
encoder
-
>
Control
(
VP8E_SET_ARNR_STRENGTH
5
)
;
encoder
-
>
Control
(
VP8E_SET_ARNR_TYPE
3
)
;
}
}
void
FramePktHook
(
const
vpx_codec_cx_pkt_t
*
pkt
)
override
{
if
(
pkt
-
>
data
.
frame
.
flags
&
VPX_FRAME_IS_KEY
)
{
}
}
}
;
TEST_P
(
BordersTest
TestEncodeHighBitrate
)
{
cfg_
.
g_lag_in_frames
=
25
;
cfg_
.
rc_2pass_vbr_minsection_pct
=
5
;
cfg_
.
rc_2pass_vbr_maxsection_pct
=
2000
;
cfg_
.
rc_target_bitrate
=
2000
;
cfg_
.
rc_max_quantizer
=
10
;
:
:
libvpx_test
:
:
I420VideoSource
video
(
"
hantro_odd
.
yuv
"
208
144
30
1
0
40
)
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
}
TEST_P
(
BordersTest
TestLowBitrate
)
{
cfg_
.
g_lag_in_frames
=
25
;
cfg_
.
rc_2pass_vbr_minsection_pct
=
5
;
cfg_
.
rc_2pass_vbr_maxsection_pct
=
2000
;
cfg_
.
rc_target_bitrate
=
200
;
cfg_
.
rc_min_quantizer
=
40
;
:
:
libvpx_test
:
:
I420VideoSource
video
(
"
hantro_odd
.
yuv
"
208
144
30
1
0
40
)
;
ASSERT_NO_FATAL_FAILURE
(
RunLoop
(
&
video
)
)
;
}
#
if
CONFIG_REALTIME_ONLY
VP9_INSTANTIATE_TEST_SUITE
(
BordersTest
:
:
testing
:
:
Values
(
:
:
libvpx_test
:
:
kRealTime
)
)
;
#
else
VP9_INSTANTIATE_TEST_SUITE
(
BordersTest
:
:
testing
:
:
Values
(
:
:
libvpx_test
:
:
kTwoPassGood
)
)
;
#
endif
}
