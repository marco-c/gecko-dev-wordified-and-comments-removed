#
include
"
.
/
vpx_config
.
h
"
#
include
"
.
/
vp8_rtcd
.
h
"
#
include
"
third_party
/
googletest
/
src
/
include
/
gtest
/
gtest
.
h
"
#
include
"
test
/
buffer
.
h
"
#
include
"
test
/
clear_system_state
.
h
"
#
include
"
test
/
register_state_check
.
h
"
#
include
"
vpx
/
vpx_integer
.
h
"
typedef
void
(
*
IdctFunc
)
(
int16_t
*
input
unsigned
char
*
pred_ptr
int
pred_stride
unsigned
char
*
dst_ptr
int
dst_stride
)
;
namespace
{
using
libvpx_test
:
:
Buffer
;
class
IDCTTest
:
public
:
:
testing
:
:
TestWithParam
<
IdctFunc
>
{
protected
:
virtual
void
SetUp
(
)
{
UUT
=
GetParam
(
)
;
input
=
new
Buffer
<
int16_t
>
(
4
4
0
)
;
ASSERT_TRUE
(
input
!
=
NULL
)
;
ASSERT_TRUE
(
input
-
>
Init
(
)
)
;
predict
=
new
Buffer
<
uint8_t
>
(
4
4
3
)
;
ASSERT_TRUE
(
predict
!
=
NULL
)
;
ASSERT_TRUE
(
predict
-
>
Init
(
)
)
;
output
=
new
Buffer
<
uint8_t
>
(
4
4
3
)
;
ASSERT_TRUE
(
output
!
=
NULL
)
;
ASSERT_TRUE
(
output
-
>
Init
(
)
)
;
}
virtual
void
TearDown
(
)
{
delete
input
;
delete
predict
;
delete
output
;
libvpx_test
:
:
ClearSystemState
(
)
;
}
IdctFunc
UUT
;
Buffer
<
int16_t
>
*
input
;
Buffer
<
uint8_t
>
*
predict
;
Buffer
<
uint8_t
>
*
output
;
}
;
TEST_P
(
IDCTTest
TestAllZeros
)
{
input
-
>
Set
(
0
)
;
predict
-
>
Set
(
0
)
;
output
-
>
Set
(
0
)
;
ASM_REGISTER_STATE_CHECK
(
UUT
(
input
-
>
TopLeftPixel
(
)
predict
-
>
TopLeftPixel
(
)
predict
-
>
stride
(
)
output
-
>
TopLeftPixel
(
)
output
-
>
stride
(
)
)
)
;
ASSERT_TRUE
(
input
-
>
CheckValues
(
0
)
)
;
ASSERT_TRUE
(
input
-
>
CheckPadding
(
)
)
;
ASSERT_TRUE
(
output
-
>
CheckValues
(
0
)
)
;
ASSERT_TRUE
(
output
-
>
CheckPadding
(
)
)
;
}
TEST_P
(
IDCTTest
TestAllOnes
)
{
input
-
>
Set
(
0
)
;
input
-
>
TopLeftPixel
(
)
[
0
]
=
4
;
predict
-
>
Set
(
0
)
;
output
-
>
Set
(
0
)
;
ASM_REGISTER_STATE_CHECK
(
UUT
(
input
-
>
TopLeftPixel
(
)
predict
-
>
TopLeftPixel
(
)
predict
-
>
stride
(
)
output
-
>
TopLeftPixel
(
)
output
-
>
stride
(
)
)
)
;
ASSERT_TRUE
(
output
-
>
CheckValues
(
1
)
)
;
ASSERT_TRUE
(
output
-
>
CheckPadding
(
)
)
;
}
TEST_P
(
IDCTTest
TestAddOne
)
{
input
-
>
Set
(
0
)
;
input
-
>
TopLeftPixel
(
)
[
0
]
=
4
;
output
-
>
Set
(
0
)
;
uint8_t
*
pred
=
predict
-
>
TopLeftPixel
(
)
;
for
(
int
y
=
0
;
y
<
4
;
+
+
y
)
{
for
(
int
x
=
0
;
x
<
4
;
+
+
x
)
{
pred
[
y
*
predict
-
>
stride
(
)
+
x
]
=
y
*
4
+
x
;
}
}
ASM_REGISTER_STATE_CHECK
(
UUT
(
input
-
>
TopLeftPixel
(
)
predict
-
>
TopLeftPixel
(
)
predict
-
>
stride
(
)
output
-
>
TopLeftPixel
(
)
output
-
>
stride
(
)
)
)
;
uint8_t
const
*
out
=
output
-
>
TopLeftPixel
(
)
;
for
(
int
y
=
0
;
y
<
4
;
+
+
y
)
{
for
(
int
x
=
0
;
x
<
4
;
+
+
x
)
{
EXPECT_EQ
(
1
+
y
*
4
+
x
out
[
y
*
output
-
>
stride
(
)
+
x
]
)
;
}
}
if
(
HasFailure
(
)
)
{
output
-
>
DumpBuffer
(
)
;
}
ASSERT_TRUE
(
output
-
>
CheckPadding
(
)
)
;
}
TEST_P
(
IDCTTest
TestWithData
)
{
predict
-
>
Set
(
0
)
;
int16_t
*
in
=
input
-
>
TopLeftPixel
(
)
;
for
(
int
y
=
0
;
y
<
4
;
+
+
y
)
{
for
(
int
x
=
0
;
x
<
4
;
+
+
x
)
{
in
[
y
*
input
-
>
stride
(
)
+
x
]
=
y
*
4
+
x
;
}
}
ASM_REGISTER_STATE_CHECK
(
UUT
(
input
-
>
TopLeftPixel
(
)
predict
-
>
TopLeftPixel
(
)
predict
-
>
stride
(
)
output
-
>
TopLeftPixel
(
)
output
-
>
stride
(
)
)
)
;
uint8_t
*
out
=
output
-
>
TopLeftPixel
(
)
;
for
(
int
y
=
0
;
y
<
4
;
+
+
y
)
{
for
(
int
x
=
0
;
x
<
4
;
+
+
x
)
{
switch
(
y
*
4
+
x
)
{
case
0
:
EXPECT_EQ
(
11
out
[
y
*
output
-
>
stride
(
)
+
x
]
)
;
break
;
case
2
:
case
5
:
case
8
:
EXPECT_EQ
(
3
out
[
y
*
output
-
>
stride
(
)
+
x
]
)
;
break
;
case
10
:
EXPECT_EQ
(
1
out
[
y
*
output
-
>
stride
(
)
+
x
]
)
;
break
;
default
:
EXPECT_EQ
(
0
out
[
y
*
output
-
>
stride
(
)
+
x
]
)
;
}
}
}
if
(
HasFailure
(
)
)
{
output
-
>
DumpBuffer
(
)
;
}
ASSERT_TRUE
(
output
-
>
CheckPadding
(
)
)
;
}
INSTANTIATE_TEST_CASE_P
(
C
IDCTTest
:
:
testing
:
:
Values
(
vp8_short_idct4x4llm_c
)
)
;
#
if
HAVE_NEON
INSTANTIATE_TEST_CASE_P
(
NEON
IDCTTest
:
:
testing
:
:
Values
(
vp8_short_idct4x4llm_neon
)
)
;
#
endif
#
if
HAVE_MMX
INSTANTIATE_TEST_CASE_P
(
MMX
IDCTTest
:
:
testing
:
:
Values
(
vp8_short_idct4x4llm_mmx
)
)
;
#
endif
#
if
HAVE_MSA
INSTANTIATE_TEST_CASE_P
(
MSA
IDCTTest
:
:
testing
:
:
Values
(
vp8_short_idct4x4llm_msa
)
)
;
#
endif
#
if
HAVE_MMI
INSTANTIATE_TEST_CASE_P
(
MMI
IDCTTest
:
:
testing
:
:
Values
(
vp8_short_idct4x4llm_mmi
)
)
;
#
endif
}
