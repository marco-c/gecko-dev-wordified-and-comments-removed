#
ifndef
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_
#
define
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_
#
include
"
gtest
/
gtest
-
matchers
.
h
"
#
include
"
gtest
/
internal
/
gtest
-
internal
.
h
"
#
include
<
stdio
.
h
>
#
include
<
memory
>
namespace
testing
{
namespace
internal
{
GTEST_DECLARE_string_
(
internal_run_death_test
)
;
const
char
kDeathTestStyleFlag
[
]
=
"
death_test_style
"
;
const
char
kDeathTestUseFork
[
]
=
"
death_test_use_fork
"
;
const
char
kInternalRunDeathTestFlag
[
]
=
"
internal_run_death_test
"
;
#
if
GTEST_HAS_DEATH_TEST
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(
4251
\
)
class
GTEST_API_
DeathTest
{
public
:
static
bool
Create
(
const
char
*
statement
Matcher
<
const
std
:
:
string
&
>
matcher
const
char
*
file
int
line
DeathTest
*
*
test
)
;
DeathTest
(
)
;
virtual
~
DeathTest
(
)
{
}
class
ReturnSentinel
{
public
:
explicit
ReturnSentinel
(
DeathTest
*
test
)
:
test_
(
test
)
{
}
~
ReturnSentinel
(
)
{
test_
-
>
Abort
(
TEST_ENCOUNTERED_RETURN_STATEMENT
)
;
}
private
:
DeathTest
*
const
test_
;
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
ReturnSentinel
)
;
}
GTEST_ATTRIBUTE_UNUSED_
;
enum
TestRole
{
OVERSEE_TEST
EXECUTE_TEST
}
;
enum
AbortReason
{
TEST_ENCOUNTERED_RETURN_STATEMENT
TEST_THREW_EXCEPTION
TEST_DID_NOT_DIE
}
;
virtual
TestRole
AssumeRole
(
)
=
0
;
virtual
int
Wait
(
)
=
0
;
virtual
bool
Passed
(
bool
exit_status_ok
)
=
0
;
virtual
void
Abort
(
AbortReason
reason
)
=
0
;
static
const
char
*
LastMessage
(
)
;
static
void
set_last_death_test_message
(
const
std
:
:
string
&
message
)
;
private
:
static
std
:
:
string
last_death_test_message_
;
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
DeathTest
)
;
}
;
GTEST_DISABLE_MSC_WARNINGS_POP_
(
)
class
DeathTestFactory
{
public
:
virtual
~
DeathTestFactory
(
)
{
}
virtual
bool
Create
(
const
char
*
statement
Matcher
<
const
std
:
:
string
&
>
matcher
const
char
*
file
int
line
DeathTest
*
*
test
)
=
0
;
}
;
class
DefaultDeathTestFactory
:
public
DeathTestFactory
{
public
:
bool
Create
(
const
char
*
statement
Matcher
<
const
std
:
:
string
&
>
matcher
const
char
*
file
int
line
DeathTest
*
*
test
)
override
;
}
;
GTEST_API_
bool
ExitedUnsuccessfully
(
int
exit_status
)
;
inline
Matcher
<
const
:
:
std
:
:
string
&
>
MakeDeathTestMatcher
(
:
:
testing
:
:
internal
:
:
RE
regex
)
{
return
ContainsRegex
(
regex
.
pattern
(
)
)
;
}
inline
Matcher
<
const
:
:
std
:
:
string
&
>
MakeDeathTestMatcher
(
const
char
*
regex
)
{
return
ContainsRegex
(
regex
)
;
}
inline
Matcher
<
const
:
:
std
:
:
string
&
>
MakeDeathTestMatcher
(
const
:
:
std
:
:
string
&
regex
)
{
return
ContainsRegex
(
regex
)
;
}
inline
Matcher
<
const
:
:
std
:
:
string
&
>
MakeDeathTestMatcher
(
Matcher
<
const
:
:
std
:
:
string
&
>
matcher
)
{
return
matcher
;
}
#
if
GTEST_HAS_EXCEPTIONS
#
define
GTEST_EXECUTE_DEATH_TEST_STATEMENT_
(
statement
death_test
)
\
try
{
\
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
statement
)
;
\
}
catch
(
const
:
:
std
:
:
exception
&
gtest_exception
)
{
\
fprintf
(
\
stderr
\
"
\
n
%
s
:
Caught
std
:
:
exception
-
derived
exception
escaping
the
"
\
"
death
test
statement
.
Exception
message
:
%
s
\
n
"
\
:
:
testing
:
:
internal
:
:
FormatFileLocation
(
__FILE__
__LINE__
)
.
c_str
(
)
\
gtest_exception
.
what
(
)
)
;
\
fflush
(
stderr
)
;
\
death_test
-
>
Abort
(
:
:
testing
:
:
internal
:
:
DeathTest
:
:
TEST_THREW_EXCEPTION
)
;
\
}
catch
(
.
.
.
)
{
\
death_test
-
>
Abort
(
:
:
testing
:
:
internal
:
:
DeathTest
:
:
TEST_THREW_EXCEPTION
)
;
\
}
#
else
#
define
GTEST_EXECUTE_DEATH_TEST_STATEMENT_
(
statement
death_test
)
\
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
statement
)
#
endif
#
define
GTEST_DEATH_TEST_
(
statement
predicate
regex_or_matcher
fail
)
\
GTEST_AMBIGUOUS_ELSE_BLOCKER_
\
if
(
:
:
testing
:
:
internal
:
:
AlwaysTrue
(
)
)
{
\
:
:
testing
:
:
internal
:
:
DeathTest
*
gtest_dt
;
\
if
(
!
:
:
testing
:
:
internal
:
:
DeathTest
:
:
Create
(
\
#
statement
\
:
:
testing
:
:
internal
:
:
MakeDeathTestMatcher
(
regex_or_matcher
)
\
__FILE__
__LINE__
&
gtest_dt
)
)
{
\
goto
GTEST_CONCAT_TOKEN_
(
gtest_label_
__LINE__
)
;
\
}
\
if
(
gtest_dt
!
=
nullptr
)
{
\
std
:
:
unique_ptr
<
:
:
testing
:
:
internal
:
:
DeathTest
>
gtest_dt_ptr
(
gtest_dt
)
;
\
switch
(
gtest_dt
-
>
AssumeRole
(
)
)
{
\
case
:
:
testing
:
:
internal
:
:
DeathTest
:
:
OVERSEE_TEST
:
\
if
(
!
gtest_dt
-
>
Passed
(
predicate
(
gtest_dt
-
>
Wait
(
)
)
)
)
{
\
goto
GTEST_CONCAT_TOKEN_
(
gtest_label_
__LINE__
)
;
\
}
\
break
;
\
case
:
:
testing
:
:
internal
:
:
DeathTest
:
:
EXECUTE_TEST
:
{
\
:
:
testing
:
:
internal
:
:
DeathTest
:
:
ReturnSentinel
gtest_sentinel
(
\
gtest_dt
)
;
\
GTEST_EXECUTE_DEATH_TEST_STATEMENT_
(
statement
gtest_dt
)
;
\
gtest_dt
-
>
Abort
(
:
:
testing
:
:
internal
:
:
DeathTest
:
:
TEST_DID_NOT_DIE
)
;
\
break
;
\
}
\
default
:
\
break
;
\
}
\
}
\
}
else
\
GTEST_CONCAT_TOKEN_
(
gtest_label_
__LINE__
)
\
:
fail
(
:
:
testing
:
:
internal
:
:
DeathTest
:
:
LastMessage
(
)
)
#
define
GTEST_EXECUTE_STATEMENT_
(
statement
regex_or_matcher
)
\
GTEST_AMBIGUOUS_ELSE_BLOCKER_
\
if
(
:
:
testing
:
:
internal
:
:
AlwaysTrue
(
)
)
{
\
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
statement
)
;
\
}
else
if
(
!
:
:
testing
:
:
internal
:
:
AlwaysTrue
(
)
)
{
\
:
:
testing
:
:
internal
:
:
MakeDeathTestMatcher
(
regex_or_matcher
)
;
\
}
else
\
:
:
testing
:
:
Message
(
)
class
InternalRunDeathTestFlag
{
public
:
InternalRunDeathTestFlag
(
const
std
:
:
string
&
a_file
int
a_line
int
an_index
int
a_write_fd
)
:
file_
(
a_file
)
line_
(
a_line
)
index_
(
an_index
)
write_fd_
(
a_write_fd
)
{
}
~
InternalRunDeathTestFlag
(
)
{
if
(
write_fd_
>
=
0
)
posix
:
:
Close
(
write_fd_
)
;
}
const
std
:
:
string
&
file
(
)
const
{
return
file_
;
}
int
line
(
)
const
{
return
line_
;
}
int
index
(
)
const
{
return
index_
;
}
int
write_fd
(
)
const
{
return
write_fd_
;
}
private
:
std
:
:
string
file_
;
int
line_
;
int
index_
;
int
write_fd_
;
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
InternalRunDeathTestFlag
)
;
}
;
InternalRunDeathTestFlag
*
ParseInternalRunDeathTestFlag
(
)
;
#
endif
}
}
#
endif
