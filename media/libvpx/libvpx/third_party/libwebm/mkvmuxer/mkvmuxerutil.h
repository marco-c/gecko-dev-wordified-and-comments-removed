#
ifndef
MKVMUXER_MKVMUXERUTIL_H_
#
define
MKVMUXER_MKVMUXERUTIL_H_
#
include
<
stdint
.
h
>
namespace
mkvmuxer
{
class
Cluster
;
class
Frame
;
class
IMkvWriter
;
const
uint64_t
kEbmlUnknownValue
=
0x01FFFFFFFFFFFFFFULL
;
const
int64_t
kMaxBlockTimecode
=
0x07FFFLL
;
int32_t
SerializeInt
(
IMkvWriter
*
writer
int64_t
value
int32_t
size
)
;
int32_t
GetUIntSize
(
uint64_t
value
)
;
int32_t
GetIntSize
(
int64_t
value
)
;
int32_t
GetCodedUIntSize
(
uint64_t
value
)
;
uint64_t
EbmlMasterElementSize
(
uint64_t
type
uint64_t
value
)
;
uint64_t
EbmlElementSize
(
uint64_t
type
int64_t
value
)
;
uint64_t
EbmlElementSize
(
uint64_t
type
uint64_t
value
)
;
uint64_t
EbmlElementSize
(
uint64_t
type
float
value
)
;
uint64_t
EbmlElementSize
(
uint64_t
type
const
char
*
value
)
;
uint64_t
EbmlElementSize
(
uint64_t
type
const
uint8_t
*
value
uint64_t
size
)
;
uint64_t
EbmlDateElementSize
(
uint64_t
type
)
;
uint64_t
EbmlElementSize
(
uint64_t
type
uint64_t
value
uint64_t
fixed_size
)
;
int32_t
WriteUInt
(
IMkvWriter
*
writer
uint64_t
value
)
;
int32_t
WriteUIntSize
(
IMkvWriter
*
writer
uint64_t
value
int32_t
size
)
;
bool
WriteEbmlMasterElement
(
IMkvWriter
*
writer
uint64_t
value
uint64_t
size
)
;
int32_t
WriteID
(
IMkvWriter
*
writer
uint64_t
type
)
;
bool
WriteEbmlElement
(
IMkvWriter
*
writer
uint64_t
type
uint64_t
value
)
;
bool
WriteEbmlElement
(
IMkvWriter
*
writer
uint64_t
type
int64_t
value
)
;
bool
WriteEbmlElement
(
IMkvWriter
*
writer
uint64_t
type
float
value
)
;
bool
WriteEbmlElement
(
IMkvWriter
*
writer
uint64_t
type
const
char
*
value
)
;
bool
WriteEbmlElement
(
IMkvWriter
*
writer
uint64_t
type
const
uint8_t
*
value
uint64_t
size
)
;
bool
WriteEbmlDateElement
(
IMkvWriter
*
writer
uint64_t
type
int64_t
value
)
;
bool
WriteEbmlElement
(
IMkvWriter
*
writer
uint64_t
type
uint64_t
value
uint64_t
fixed_size
)
;
uint64_t
WriteFrame
(
IMkvWriter
*
writer
const
Frame
*
const
frame
Cluster
*
cluster
)
;
uint64_t
WriteVoidElement
(
IMkvWriter
*
writer
uint64_t
size
)
;
void
GetVersion
(
int32_t
*
major
int32_t
*
minor
int32_t
*
build
int32_t
*
revision
)
;
uint64_t
MakeUID
(
unsigned
int
*
seed
)
;
}
#
endif
