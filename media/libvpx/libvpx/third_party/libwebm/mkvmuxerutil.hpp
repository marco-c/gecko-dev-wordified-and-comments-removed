#
ifndef
MKVMUXERUTIL_HPP
#
define
MKVMUXERUTIL_HPP
#
include
"
mkvmuxertypes
.
hpp
"
namespace
mkvmuxer
{
class
IMkvWriter
;
const
uint64
kEbmlUnknownValue
=
0x01FFFFFFFFFFFFFFULL
;
const
int64
kMaxBlockTimecode
=
0x07FFFLL
;
int32
SerializeInt
(
IMkvWriter
*
writer
int64
value
int32
size
)
;
int32
GetUIntSize
(
uint64
value
)
;
int32
GetCodedUIntSize
(
uint64
value
)
;
uint64
EbmlMasterElementSize
(
uint64
type
uint64
value
)
;
uint64
EbmlElementSize
(
uint64
type
int64
value
)
;
uint64
EbmlElementSize
(
uint64
type
uint64
value
)
;
uint64
EbmlElementSize
(
uint64
type
float
value
)
;
uint64
EbmlElementSize
(
uint64
type
const
char
*
value
)
;
uint64
EbmlElementSize
(
uint64
type
const
uint8
*
value
uint64
size
)
;
uint64
EbmlDateElementSize
(
uint64
type
int64
value
)
;
int32
WriteUInt
(
IMkvWriter
*
writer
uint64
value
)
;
int32
WriteUIntSize
(
IMkvWriter
*
writer
uint64
value
int32
size
)
;
bool
WriteEbmlMasterElement
(
IMkvWriter
*
writer
uint64
value
uint64
size
)
;
int32
WriteID
(
IMkvWriter
*
writer
uint64
type
)
;
bool
WriteEbmlElement
(
IMkvWriter
*
writer
uint64
type
uint64
value
)
;
bool
WriteEbmlElement
(
IMkvWriter
*
writer
uint64
type
float
value
)
;
bool
WriteEbmlElement
(
IMkvWriter
*
writer
uint64
type
const
char
*
value
)
;
bool
WriteEbmlElement
(
IMkvWriter
*
writer
uint64
type
const
uint8
*
value
uint64
size
)
;
bool
WriteEbmlDateElement
(
IMkvWriter
*
writer
uint64
type
int64
value
)
;
uint64
WriteSimpleBlock
(
IMkvWriter
*
writer
const
uint8
*
data
uint64
length
uint64
track_number
int64
timecode
uint64
is_key
)
;
uint64
WriteMetadataBlock
(
IMkvWriter
*
writer
const
uint8
*
data
uint64
length
uint64
track_number
int64
timecode
uint64
duration_timecode
)
;
uint64
WriteBlockWithAdditional
(
IMkvWriter
*
writer
const
uint8
*
data
uint64
length
const
uint8
*
additional
uint64
additional_length
uint64
add_id
uint64
track_number
int64
timecode
uint64
is_key
)
;
uint64
WriteBlockWithDiscardPadding
(
IMkvWriter
*
writer
const
uint8
*
data
uint64
length
int64
discard_padding
uint64
track_number
int64
timecode
uint64
is_key
)
;
uint64
WriteVoidElement
(
IMkvWriter
*
writer
uint64
size
)
;
void
GetVersion
(
int32
*
major
int32
*
minor
int32
*
build
int32
*
revision
)
;
uint64
MakeUID
(
unsigned
int
*
seed
)
;
}
#
endif
