#
ifndef
MKVMUXER_HPP
#
define
MKVMUXER_HPP
#
include
"
mkvmuxertypes
.
hpp
"
namespace
mkvparser
{
class
IMkvReader
;
}
namespace
mkvmuxer
{
class
MkvWriter
;
class
Segment
;
class
IMkvWriter
{
public
:
virtual
int32
Write
(
const
void
*
buf
uint32
len
)
=
0
;
virtual
int64
Position
(
)
const
=
0
;
virtual
int32
Position
(
int64
position
)
=
0
;
virtual
bool
Seekable
(
)
const
=
0
;
virtual
void
ElementStartNotify
(
uint64
element_id
int64
position
)
=
0
;
protected
:
IMkvWriter
(
)
;
virtual
~
IMkvWriter
(
)
;
private
:
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
IMkvWriter
)
;
}
;
bool
WriteEbmlHeader
(
IMkvWriter
*
writer
)
;
bool
ChunkedCopy
(
mkvparser
:
:
IMkvReader
*
source
IMkvWriter
*
dst
int64
start
int64
size
)
;
class
Frame
{
public
:
Frame
(
)
;
~
Frame
(
)
;
bool
Init
(
const
uint8
*
frame
uint64
length
)
;
bool
AddAdditionalData
(
const
uint8
*
additional
uint64
length
uint64
add_id
)
;
uint64
add_id
(
)
const
{
return
add_id_
;
}
const
uint8
*
additional
(
)
const
{
return
additional_
;
}
uint64
additional_length
(
)
const
{
return
additional_length_
;
}
void
set_duration
(
uint64
duration
)
{
duration_
=
duration
;
}
uint64
duration
(
)
const
{
return
duration_
;
}
const
uint8
*
frame
(
)
const
{
return
frame_
;
}
void
set_is_key
(
bool
key
)
{
is_key_
=
key
;
}
bool
is_key
(
)
const
{
return
is_key_
;
}
uint64
length
(
)
const
{
return
length_
;
}
void
set_track_number
(
uint64
track_number
)
{
track_number_
=
track_number
;
}
uint64
track_number
(
)
const
{
return
track_number_
;
}
void
set_timestamp
(
uint64
timestamp
)
{
timestamp_
=
timestamp
;
}
uint64
timestamp
(
)
const
{
return
timestamp_
;
}
void
set_discard_padding
(
uint64
discard_padding
)
{
discard_padding_
=
discard_padding
;
}
uint64
discard_padding
(
)
const
{
return
discard_padding_
;
}
private
:
uint64
add_id_
;
uint8
*
additional_
;
uint64
additional_length_
;
uint64
duration_
;
uint8
*
frame_
;
bool
is_key_
;
uint64
length_
;
uint64
track_number_
;
uint64
timestamp_
;
int64
discard_padding_
;
}
;
class
CuePoint
{
public
:
CuePoint
(
)
;
~
CuePoint
(
)
;
uint64
Size
(
)
const
;
bool
Write
(
IMkvWriter
*
writer
)
const
;
void
set_time
(
uint64
time
)
{
time_
=
time
;
}
uint64
time
(
)
const
{
return
time_
;
}
void
set_track
(
uint64
track
)
{
track_
=
track
;
}
uint64
track
(
)
const
{
return
track_
;
}
void
set_cluster_pos
(
uint64
cluster_pos
)
{
cluster_pos_
=
cluster_pos
;
}
uint64
cluster_pos
(
)
const
{
return
cluster_pos_
;
}
void
set_block_number
(
uint64
block_number
)
{
block_number_
=
block_number
;
}
uint64
block_number
(
)
const
{
return
block_number_
;
}
void
set_output_block_number
(
bool
output_block_number
)
{
output_block_number_
=
output_block_number
;
}
bool
output_block_number
(
)
const
{
return
output_block_number_
;
}
private
:
uint64
PayloadSize
(
)
const
;
uint64
time_
;
uint64
track_
;
uint64
cluster_pos_
;
uint64
block_number_
;
bool
output_block_number_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
CuePoint
)
;
}
;
class
Cues
{
public
:
Cues
(
)
;
~
Cues
(
)
;
bool
AddCue
(
CuePoint
*
cue
)
;
CuePoint
*
GetCueByIndex
(
int32
index
)
const
;
uint64
Size
(
)
;
bool
Write
(
IMkvWriter
*
writer
)
const
;
int32
cue_entries_size
(
)
const
{
return
cue_entries_size_
;
}
void
set_output_block_number
(
bool
output_block_number
)
{
output_block_number_
=
output_block_number
;
}
bool
output_block_number
(
)
const
{
return
output_block_number_
;
}
private
:
int32
cue_entries_capacity_
;
int32
cue_entries_size_
;
CuePoint
*
*
cue_entries_
;
bool
output_block_number_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
Cues
)
;
}
;
class
ContentEncAESSettings
{
public
:
enum
{
kCTR
=
1
}
;
ContentEncAESSettings
(
)
;
~
ContentEncAESSettings
(
)
{
}
uint64
Size
(
)
const
;
bool
Write
(
IMkvWriter
*
writer
)
const
;
uint64
cipher_mode
(
)
const
{
return
cipher_mode_
;
}
private
:
uint64
PayloadSize
(
)
const
;
uint64
cipher_mode_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
ContentEncAESSettings
)
;
}
;
class
ContentEncoding
{
public
:
ContentEncoding
(
)
;
~
ContentEncoding
(
)
;
bool
SetEncryptionID
(
const
uint8
*
id
uint64
length
)
;
uint64
Size
(
)
const
;
bool
Write
(
IMkvWriter
*
writer
)
const
;
uint64
enc_algo
(
)
const
{
return
enc_algo_
;
}
uint64
encoding_order
(
)
const
{
return
encoding_order_
;
}
uint64
encoding_scope
(
)
const
{
return
encoding_scope_
;
}
uint64
encoding_type
(
)
const
{
return
encoding_type_
;
}
ContentEncAESSettings
*
enc_aes_settings
(
)
{
return
&
enc_aes_settings_
;
}
private
:
uint64
EncodingSize
(
uint64
compresion_size
uint64
encryption_size
)
const
;
uint64
EncryptionSize
(
)
const
;
uint64
enc_algo_
;
uint8
*
enc_key_id_
;
uint64
encoding_order_
;
uint64
encoding_scope_
;
uint64
encoding_type_
;
ContentEncAESSettings
enc_aes_settings_
;
uint64
enc_key_id_length_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
ContentEncoding
)
;
}
;
class
Track
{
public
:
explicit
Track
(
unsigned
int
*
seed
)
;
virtual
~
Track
(
)
;
virtual
bool
AddContentEncoding
(
)
;
ContentEncoding
*
GetContentEncodingByIndex
(
uint32
index
)
const
;
virtual
uint64
PayloadSize
(
)
const
;
virtual
uint64
Size
(
)
const
;
virtual
bool
Write
(
IMkvWriter
*
writer
)
const
;
bool
SetCodecPrivate
(
const
uint8
*
codec_private
uint64
length
)
;
void
set_codec_id
(
const
char
*
codec_id
)
;
const
char
*
codec_id
(
)
const
{
return
codec_id_
;
}
const
uint8
*
codec_private
(
)
const
{
return
codec_private_
;
}
void
set_language
(
const
char
*
language
)
;
const
char
*
language
(
)
const
{
return
language_
;
}
void
set_max_block_additional_id
(
uint64
max_block_additional_id
)
{
max_block_additional_id_
=
max_block_additional_id
;
}
uint64
max_block_additional_id
(
)
const
{
return
max_block_additional_id_
;
}
void
set_name
(
const
char
*
name
)
;
const
char
*
name
(
)
const
{
return
name_
;
}
void
set_number
(
uint64
number
)
{
number_
=
number
;
}
uint64
number
(
)
const
{
return
number_
;
}
void
set_type
(
uint64
type
)
{
type_
=
type
;
}
uint64
type
(
)
const
{
return
type_
;
}
void
set_uid
(
uint64
uid
)
{
uid_
=
uid
;
}
uint64
uid
(
)
const
{
return
uid_
;
}
void
set_codec_delay
(
uint64
codec_delay
)
{
codec_delay_
=
codec_delay
;
}
uint64
codec_delay
(
)
const
{
return
codec_delay_
;
}
void
set_seek_pre_roll
(
uint64
seek_pre_roll
)
{
seek_pre_roll_
=
seek_pre_roll
;
}
uint64
seek_pre_roll
(
)
const
{
return
seek_pre_roll_
;
}
void
set_default_duration
(
uint64
default_duration
)
{
default_duration_
=
default_duration
;
}
uint64
default_duration
(
)
const
{
return
default_duration_
;
}
uint64
codec_private_length
(
)
const
{
return
codec_private_length_
;
}
uint32
content_encoding_entries_size
(
)
const
{
return
content_encoding_entries_size_
;
}
private
:
char
*
codec_id_
;
uint8
*
codec_private_
;
char
*
language_
;
uint64
max_block_additional_id_
;
char
*
name_
;
uint64
number_
;
uint64
type_
;
uint64
uid_
;
uint64
codec_delay_
;
uint64
seek_pre_roll_
;
uint64
default_duration_
;
uint64
codec_private_length_
;
ContentEncoding
*
*
content_encoding_entries_
;
uint32
content_encoding_entries_size_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
Track
)
;
}
;
class
VideoTrack
:
public
Track
{
public
:
enum
StereoMode
{
kMono
=
0
kSideBySideLeftIsFirst
=
1
kTopBottomRightIsFirst
=
2
kTopBottomLeftIsFirst
=
3
kSideBySideRightIsFirst
=
11
}
;
enum
AlphaMode
{
kNoAlpha
=
0
kAlpha
=
1
}
;
explicit
VideoTrack
(
unsigned
int
*
seed
)
;
virtual
~
VideoTrack
(
)
;
virtual
uint64
PayloadSize
(
)
const
;
virtual
bool
Write
(
IMkvWriter
*
writer
)
const
;
bool
SetStereoMode
(
uint64
stereo_mode
)
;
bool
SetAlphaMode
(
uint64
alpha_mode
)
;
void
set_display_height
(
uint64
height
)
{
display_height_
=
height
;
}
uint64
display_height
(
)
const
{
return
display_height_
;
}
void
set_display_width
(
uint64
width
)
{
display_width_
=
width
;
}
uint64
display_width
(
)
const
{
return
display_width_
;
}
void
set_frame_rate
(
double
frame_rate
)
{
frame_rate_
=
frame_rate
;
}
double
frame_rate
(
)
const
{
return
frame_rate_
;
}
void
set_height
(
uint64
height
)
{
height_
=
height
;
}
uint64
height
(
)
const
{
return
height_
;
}
uint64
stereo_mode
(
)
{
return
stereo_mode_
;
}
uint64
alpha_mode
(
)
{
return
alpha_mode_
;
}
void
set_width
(
uint64
width
)
{
width_
=
width
;
}
uint64
width
(
)
const
{
return
width_
;
}
private
:
uint64
VideoPayloadSize
(
)
const
;
uint64
display_height_
;
uint64
display_width_
;
double
frame_rate_
;
uint64
height_
;
uint64
stereo_mode_
;
uint64
alpha_mode_
;
uint64
width_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
VideoTrack
)
;
}
;
class
AudioTrack
:
public
Track
{
public
:
explicit
AudioTrack
(
unsigned
int
*
seed
)
;
virtual
~
AudioTrack
(
)
;
virtual
uint64
PayloadSize
(
)
const
;
virtual
bool
Write
(
IMkvWriter
*
writer
)
const
;
void
set_bit_depth
(
uint64
bit_depth
)
{
bit_depth_
=
bit_depth
;
}
uint64
bit_depth
(
)
const
{
return
bit_depth_
;
}
void
set_channels
(
uint64
channels
)
{
channels_
=
channels
;
}
uint64
channels
(
)
const
{
return
channels_
;
}
void
set_sample_rate
(
double
sample_rate
)
{
sample_rate_
=
sample_rate
;
}
double
sample_rate
(
)
const
{
return
sample_rate_
;
}
private
:
uint64
bit_depth_
;
uint64
channels_
;
double
sample_rate_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
AudioTrack
)
;
}
;
class
Tracks
{
public
:
enum
{
kVideo
=
0x1
kAudio
=
0x2
}
;
static
const
char
kOpusCodecId
[
]
;
static
const
char
kVorbisCodecId
[
]
;
static
const
char
kVp8CodecId
[
]
;
static
const
char
kVp9CodecId
[
]
;
Tracks
(
)
;
~
Tracks
(
)
;
bool
AddTrack
(
Track
*
track
int32
number
)
;
const
Track
*
GetTrackByIndex
(
uint32
idx
)
const
;
Track
*
GetTrackByNumber
(
uint64
track_number
)
const
;
bool
TrackIsAudio
(
uint64
track_number
)
const
;
bool
TrackIsVideo
(
uint64
track_number
)
const
;
bool
Write
(
IMkvWriter
*
writer
)
const
;
uint32
track_entries_size
(
)
const
{
return
track_entries_size_
;
}
private
:
Track
*
*
track_entries_
;
uint32
track_entries_size_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
Tracks
)
;
}
;
class
Chapter
{
public
:
bool
set_id
(
const
char
*
id
)
;
void
set_time
(
const
Segment
&
segment
uint64
start_time_ns
uint64
end_time_ns
)
;
void
set_uid
(
const
uint64
uid
)
{
uid_
=
uid
;
}
bool
add_string
(
const
char
*
title
const
char
*
language
const
char
*
country
)
;
private
:
friend
class
Chapters
;
class
Display
{
public
:
void
Init
(
)
;
void
Clear
(
)
;
bool
set_title
(
const
char
*
title
)
;
bool
set_language
(
const
char
*
language
)
;
bool
set_country
(
const
char
*
country
)
;
uint64
WriteDisplay
(
IMkvWriter
*
writer
)
const
;
private
:
char
*
title_
;
char
*
language_
;
char
*
country_
;
}
;
Chapter
(
)
;
~
Chapter
(
)
;
void
Init
(
unsigned
int
*
seed
)
;
void
ShallowCopy
(
Chapter
*
dst
)
const
;
void
Clear
(
)
;
bool
ExpandDisplaysArray
(
)
;
uint64
WriteAtom
(
IMkvWriter
*
writer
)
const
;
char
*
id_
;
uint64
start_timecode_
;
uint64
end_timecode_
;
uint64
uid_
;
Display
*
displays_
;
int
displays_size_
;
int
displays_count_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
Chapter
)
;
}
;
class
Chapters
{
public
:
Chapters
(
)
;
~
Chapters
(
)
;
Chapter
*
AddChapter
(
unsigned
int
*
seed
)
;
int
Count
(
)
const
;
bool
Write
(
IMkvWriter
*
writer
)
const
;
private
:
bool
ExpandChaptersArray
(
)
;
uint64
WriteEdition
(
IMkvWriter
*
writer
)
const
;
int
chapters_size_
;
int
chapters_count_
;
Chapter
*
chapters_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
Chapters
)
;
}
;
class
Cluster
{
public
:
Cluster
(
uint64
timecode
int64
cues_pos
)
;
~
Cluster
(
)
;
bool
Init
(
IMkvWriter
*
ptr_writer
)
;
bool
AddFrame
(
const
uint8
*
frame
uint64
length
uint64
track_number
uint64
timecode
bool
is_key
)
;
bool
AddFrameWithAdditional
(
const
uint8
*
frame
uint64
length
const
uint8
*
additional
uint64
additional_length
uint64
add_id
uint64
track_number
uint64
abs_timecode
bool
is_key
)
;
bool
AddFrameWithDiscardPadding
(
const
uint8
*
frame
uint64
length
int64
discard_padding
uint64
track_number
uint64
abs_timecode
bool
is_key
)
;
bool
AddMetadata
(
const
uint8
*
frame
uint64
length
uint64
track_number
uint64
timecode
uint64
duration
)
;
void
AddPayloadSize
(
uint64
size
)
;
bool
Finalize
(
)
;
uint64
Size
(
)
const
;
int64
size_position
(
)
const
{
return
size_position_
;
}
int32
blocks_added
(
)
const
{
return
blocks_added_
;
}
uint64
payload_size
(
)
const
{
return
payload_size_
;
}
int64
position_for_cues
(
)
const
{
return
position_for_cues_
;
}
uint64
timecode
(
)
const
{
return
timecode_
;
}
private
:
typedef
uint64
(
*
WriteBlock
)
(
IMkvWriter
*
writer
const
uint8
*
data
uint64
length
uint64
track_number
int64
timecode
uint64
generic_arg
)
;
typedef
uint64
(
*
WriteBlockAdditional
)
(
IMkvWriter
*
writer
const
uint8
*
data
uint64
length
const
uint8
*
additional
uint64
add_id
uint64
additional_length
uint64
track_number
int64
timecode
uint64
is_key
)
;
typedef
uint64
(
*
WriteBlockDiscardPadding
)
(
IMkvWriter
*
writer
const
uint8
*
data
uint64
length
int64
discard_padding
uint64
track_number
int64
timecode
uint64
is_key
)
;
template
<
typename
Type
>
bool
PreWriteBlock
(
Type
*
write_function
)
;
void
PostWriteBlock
(
uint64
element_size
)
;
bool
IsValidTrackNumber
(
uint64
track_number
)
const
;
int64
GetRelativeTimecode
(
int64
abs_timecode
)
const
;
bool
DoWriteBlock
(
const
uint8
*
frame
uint64
length
uint64
track_number
uint64
absolute_timecode
uint64
generic_arg
WriteBlock
write_block
)
;
bool
DoWriteBlockWithAdditional
(
const
uint8
*
frame
uint64
length
const
uint8
*
additional
uint64
additional_length
uint64
add_id
uint64
track_number
uint64
absolute_timecode
uint64
generic_arg
WriteBlockAdditional
write_block
)
;
bool
DoWriteBlockWithDiscardPadding
(
const
uint8
*
frame
uint64
length
int64
discard_padding
uint64
track_number
uint64
absolute_timecode
uint64
generic_arg
WriteBlockDiscardPadding
write_block
)
;
bool
WriteClusterHeader
(
)
;
int32
blocks_added_
;
bool
finalized_
;
bool
header_written_
;
uint64
payload_size_
;
const
int64
position_for_cues_
;
int64
size_position_
;
const
uint64
timecode_
;
IMkvWriter
*
writer_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
Cluster
)
;
}
;
class
SeekHead
{
public
:
SeekHead
(
)
;
~
SeekHead
(
)
;
bool
AddSeekEntry
(
uint32
id
uint64
pos
)
;
bool
Finalize
(
IMkvWriter
*
writer
)
const
;
uint32
GetId
(
int
index
)
const
;
uint64
GetPosition
(
int
index
)
const
;
bool
SetSeekEntry
(
int
index
uint32
id
uint64
position
)
;
bool
Write
(
IMkvWriter
*
writer
)
;
const
static
int32
kSeekEntryCount
=
5
;
private
:
uint64
MaxEntrySize
(
)
const
;
uint32
seek_entry_id_
[
kSeekEntryCount
]
;
uint64
seek_entry_pos_
[
kSeekEntryCount
]
;
int64
start_pos_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
SeekHead
)
;
}
;
class
SegmentInfo
{
public
:
SegmentInfo
(
)
;
~
SegmentInfo
(
)
;
bool
Finalize
(
IMkvWriter
*
writer
)
const
;
bool
Init
(
)
;
bool
Write
(
IMkvWriter
*
writer
)
;
void
set_duration
(
double
duration
)
{
duration_
=
duration
;
}
double
duration
(
)
const
{
return
duration_
;
}
void
set_muxing_app
(
const
char
*
app
)
;
const
char
*
muxing_app
(
)
const
{
return
muxing_app_
;
}
void
set_timecode_scale
(
uint64
scale
)
{
timecode_scale_
=
scale
;
}
uint64
timecode_scale
(
)
const
{
return
timecode_scale_
;
}
void
set_writing_app
(
const
char
*
app
)
;
const
char
*
writing_app
(
)
const
{
return
writing_app_
;
}
void
set_date_utc
(
int64
date_utc
)
{
date_utc_
=
date_utc
;
}
int64
date_utc
(
)
const
{
return
date_utc_
;
}
private
:
double
duration_
;
char
*
muxing_app_
;
uint64
timecode_scale_
;
char
*
writing_app_
;
int64
date_utc_
;
int64
duration_pos_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
SegmentInfo
)
;
}
;
class
Segment
{
public
:
enum
Mode
{
kLive
=
0x1
kFile
=
0x2
}
;
enum
CuesPosition
{
kAfterClusters
=
0x0
kBeforeClusters
=
0x1
}
;
const
static
uint64
kDefaultMaxClusterDuration
=
30000000000ULL
;
Segment
(
)
;
~
Segment
(
)
;
bool
Init
(
IMkvWriter
*
ptr_writer
)
;
Track
*
AddTrack
(
int32
number
)
;
uint64
AddAudioTrack
(
int32
sample_rate
int32
channels
int32
number
)
;
Chapter
*
AddChapter
(
)
;
bool
AddCuePoint
(
uint64
timestamp
uint64
track
)
;
bool
AddFrame
(
const
uint8
*
frame
uint64
length
uint64
track_number
uint64
timestamp_ns
bool
is_key
)
;
bool
AddMetadata
(
const
uint8
*
frame
uint64
length
uint64
track_number
uint64
timestamp_ns
uint64
duration_ns
)
;
bool
AddFrameWithAdditional
(
const
uint8
*
frame
uint64
length
const
uint8
*
additional
uint64
additional_length
uint64
add_id
uint64
track_number
uint64
timestamp
bool
is_key
)
;
bool
AddFrameWithDiscardPadding
(
const
uint8
*
frame
uint64
length
int64
discard_padding
uint64
track_number
uint64
timestamp
bool
is_key
)
;
bool
AddGenericFrame
(
const
Frame
*
frame
)
;
uint64
AddVideoTrack
(
int32
width
int32
height
int32
number
)
;
bool
CopyAndMoveCuesBeforeClusters
(
mkvparser
:
:
IMkvReader
*
reader
IMkvWriter
*
writer
)
;
bool
CuesTrack
(
uint64
track_number
)
;
void
ForceNewClusterOnNextFrame
(
)
;
bool
Finalize
(
)
;
Cues
*
GetCues
(
)
{
return
&
cues_
;
}
const
SegmentInfo
*
GetSegmentInfo
(
)
const
{
return
&
segment_info_
;
}
SegmentInfo
*
GetSegmentInfo
(
)
{
return
&
segment_info_
;
}
Track
*
GetTrackByNumber
(
uint64
track_number
)
const
;
void
OutputCues
(
bool
output_cues
)
;
bool
SetChunking
(
bool
chunking
const
char
*
filename
)
;
bool
chunking
(
)
const
{
return
chunking_
;
}
uint64
cues_track
(
)
const
{
return
cues_track_
;
}
void
set_max_cluster_duration
(
uint64
max_cluster_duration
)
{
max_cluster_duration_
=
max_cluster_duration
;
}
uint64
max_cluster_duration
(
)
const
{
return
max_cluster_duration_
;
}
void
set_max_cluster_size
(
uint64
max_cluster_size
)
{
max_cluster_size_
=
max_cluster_size
;
}
uint64
max_cluster_size
(
)
const
{
return
max_cluster_size_
;
}
void
set_mode
(
Mode
mode
)
{
mode_
=
mode
;
}
Mode
mode
(
)
const
{
return
mode_
;
}
CuesPosition
cues_position
(
)
const
{
return
cues_position_
;
}
bool
output_cues
(
)
const
{
return
output_cues_
;
}
const
SegmentInfo
*
segment_info
(
)
const
{
return
&
segment_info_
;
}
private
:
bool
CheckHeaderInfo
(
)
;
bool
UpdateChunkName
(
const
char
*
ext
char
*
*
name
)
const
;
int64
MaxOffset
(
)
;
bool
QueueFrame
(
Frame
*
frame
)
;
int
WriteFramesAll
(
)
;
bool
WriteFramesLessThan
(
uint64
timestamp
)
;
bool
WriteSegmentHeader
(
)
;
int
TestFrame
(
uint64
track_num
uint64
timestamp_ns
bool
key
)
const
;
bool
MakeNewCluster
(
uint64
timestamp_ns
)
;
bool
DoNewClusterProcessing
(
uint64
track_num
uint64
timestamp_ns
bool
key
)
;
void
MoveCuesBeforeClusters
(
)
;
void
MoveCuesBeforeClustersHelper
(
uint64
diff
int
index
uint64
*
cue_size
)
;
unsigned
int
seed_
;
Cues
cues_
;
SeekHead
seek_head_
;
SegmentInfo
segment_info_
;
Tracks
tracks_
;
Chapters
chapters_
;
int
chunk_count_
;
char
*
chunk_name_
;
MkvWriter
*
chunk_writer_cluster_
;
MkvWriter
*
chunk_writer_cues_
;
MkvWriter
*
chunk_writer_header_
;
bool
chunking_
;
char
*
chunking_base_name_
;
int64
cluster_end_offset_
;
Cluster
*
*
cluster_list_
;
int32
cluster_list_capacity_
;
int32
cluster_list_size_
;
CuesPosition
cues_position_
;
uint64
cues_track_
;
bool
force_new_cluster_
;
Frame
*
*
frames_
;
int32
frames_capacity_
;
int32
frames_size_
;
bool
has_video_
;
bool
header_written_
;
uint64
last_block_duration_
;
uint64
last_timestamp_
;
uint64
max_cluster_duration_
;
uint64
max_cluster_size_
;
Mode
mode_
;
bool
new_cuepoint_
;
bool
output_cues_
;
int64
payload_pos_
;
int64
size_position_
;
IMkvWriter
*
writer_cluster_
;
IMkvWriter
*
writer_cues_
;
IMkvWriter
*
writer_header_
;
LIBWEBM_DISALLOW_COPY_AND_ASSIGN
(
Segment
)
;
}
;
}
#
endif
