with
Files
(
'
*
'
)
:
BUG_COMPONENT
=
(
'
Core
'
'
Audio
/
Video
'
)
include
(
'
sources
.
mozbuild
'
)
if
CONFIG
[
'
VPX_USE_YASM
'
]
:
USE_YASM
=
True
if
CONFIG
[
'
CPU_ARCH
'
]
=
=
'
x86_64
'
:
EXPORTS
.
vpx
+
=
files
[
'
X64_EXPORTS
'
]
SOURCES
+
=
files
[
'
X64_SOURCES
'
]
if
CONFIG
[
'
OS_TARGET
'
]
=
=
'
WINNT
'
:
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
libvpx
/
config
/
win
/
x64
/
'
%
TOPSRCDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
/
win
/
x64
/
'
]
elif
CONFIG
[
'
OS_TARGET
'
]
=
=
'
Darwin
'
:
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
libvpx
/
config
/
mac
/
x64
/
'
%
TOPSRCDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
/
mac
/
x64
/
'
]
else
:
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
libvpx
/
config
/
linux
/
x64
/
'
%
TOPSRCDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
/
linux
/
x64
/
'
]
elif
CONFIG
[
'
CPU_ARCH
'
]
=
=
'
x86
'
:
EXPORTS
.
vpx
+
=
files
[
'
IA32_EXPORTS
'
]
SOURCES
+
=
files
[
'
IA32_SOURCES
'
]
if
CONFIG
[
'
OS_TARGET
'
]
=
=
'
WINNT
'
:
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
libvpx
/
config
/
win
/
ia32
/
'
%
TOPSRCDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
/
win
/
ia32
/
'
]
elif
CONFIG
[
'
OS_TARGET
'
]
=
=
'
Darwin
'
:
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
libvpx
/
config
/
mac
/
ia32
/
'
%
TOPSRCDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
/
mac
/
ia32
/
'
]
else
:
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
libvpx
/
config
/
linux
/
ia32
/
'
%
TOPSRCDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
/
linux
/
ia32
/
'
]
elif
CONFIG
[
'
CPU_ARCH
'
]
=
=
'
arm
'
:
EXPORTS
.
vpx
+
=
files
[
'
ARM_EXPORTS
'
]
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
libvpx
/
config
/
linux
/
arm
/
'
%
TOPSRCDIR
'
-
I
%
s
/
libvpx
'
%
OBJDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
/
linux
/
arm
/
'
]
arm_asm_files
=
files
[
'
ARM_SOURCES
'
]
if
CONFIG
[
'
GNU_AS
'
]
:
SOURCES
+
=
sorted
(
[
"
!
%
s
.
S
"
%
f
if
f
.
endswith
(
'
.
asm
'
)
else
f
for
f
in
arm_asm_files
]
)
else
:
SOURCES
+
=
sorted
(
arm_asm_files
)
for
f
in
SOURCES
:
if
f
.
endswith
(
'
.
c
'
)
and
'
neon
'
in
f
:
SOURCES
[
f
]
.
flags
+
=
CONFIG
[
'
VPX_ASFLAGS
'
]
if
CONFIG
[
'
OS_TARGET
'
]
=
=
'
Android
'
:
LOCAL_INCLUDES
+
=
[
'
%
%
%
s
/
sources
/
android
/
cpufeatures
'
%
CONFIG
[
'
ANDROID_NDK
'
]
]
if
CONFIG
[
'
CC_TYPE
'
]
=
=
'
clang
'
:
ASFLAGS
+
=
[
'
-
no
-
integrated
-
as
'
]
elif
CONFIG
[
'
CPU_ARCH
'
]
=
=
'
aarch64
'
and
CONFIG
[
'
OS_TARGET
'
]
=
=
'
WINNT
'
:
EXPORTS
.
vpx
+
=
files
[
'
ARM64_EXPORTS
'
]
SOURCES
+
=
files
[
'
ARM64_SOURCES
'
]
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
libvpx
/
config
/
win
/
aarch64
/
'
%
TOPSRCDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
/
win
/
aarch64
/
'
]
elif
CONFIG
[
'
CPU_ARCH
'
]
=
=
'
aarch64
'
:
EXPORTS
.
vpx
+
=
files
[
'
ARM64_EXPORTS
'
]
SOURCES
+
=
files
[
'
ARM64_SOURCES
'
]
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
libvpx
/
config
/
linux
/
arm64
/
'
%
TOPSRCDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
/
linux
/
arm64
/
'
]
else
:
EXPORTS
.
vpx
+
=
files
[
'
GENERIC_EXPORTS
'
]
SOURCES
+
=
files
[
'
GENERIC_SOURCES
'
]
ASFLAGS
+
=
[
'
-
I
%
s
/
media
/
libvpx
/
config
/
generic
/
'
%
TOPSRCDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
/
generic
/
'
]
AllowCompilerWarnings
(
)
FINAL_LIBRARY
=
'
gkmedias
'
DEFINES
[
'
HAVE_CONFIG_H
'
]
=
'
vpx_config
.
h
'
if
CONFIG
[
'
OS_TARGET
'
]
=
=
'
Android
'
:
DEFINES
[
'
__linux__
'
]
=
True
SOURCES
+
=
[
'
%
%
%
s
/
sources
/
android
/
cpufeatures
/
cpu
-
features
.
c
'
%
CONFIG
[
'
ANDROID_NDK
'
]
]
for
f
in
SOURCES
:
if
f
.
endswith
(
'
.
c
'
)
:
if
'
mmx
.
c
'
in
f
:
SOURCES
[
f
]
.
flags
+
=
[
'
-
mmmx
'
]
if
'
sse2
.
c
'
in
f
:
SOURCES
[
f
]
.
flags
+
=
CONFIG
[
'
SSE2_FLAGS
'
]
if
'
ssse3
.
c
'
in
f
:
SOURCES
[
f
]
.
flags
+
=
[
'
-
mssse3
'
]
if
'
sse4
.
c
'
in
f
:
SOURCES
[
f
]
.
flags
+
=
[
'
-
msse4
.
1
'
]
if
'
avx
.
c
'
in
f
:
SOURCES
[
f
]
.
flags
+
=
[
'
-
mavx
'
]
if
'
avx2
.
c
'
in
f
:
SOURCES
[
f
]
.
flags
+
=
[
'
-
mavx2
'
]
CFLAGS
+
=
[
'
-
Wno
-
sign
-
compare
'
'
-
Wno
-
unused
-
function
'
]
if
CONFIG
[
'
CC_TYPE
'
]
in
(
'
clang
'
'
clang
-
cl
'
)
:
CFLAGS
+
=
[
'
-
Wno
-
unreachable
-
code
'
'
-
Wno
-
unneeded
-
internal
-
declaration
'
]
ASFLAGS
+
=
CONFIG
[
'
VPX_ASFLAGS
'
]
ASFLAGS
+
=
[
'
-
I
.
/
'
'
-
I
%
s
/
media
/
libvpx
/
libvpx
/
'
%
TOPSRCDIR
]
LOCAL_INCLUDES
+
=
[
'
/
media
/
libvpx
/
config
'
'
/
media
/
libvpx
/
libvpx
'
]
if
CONFIG
[
'
OS_TARGET
'
]
=
=
'
Android
'
:
ASFLAGS
+
=
[
'
-
D__ANDROID__
'
]
