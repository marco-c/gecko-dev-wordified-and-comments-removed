#
ifndef
INCLUDE_LIBYUV_COMPARE_ROW_H_
#
define
INCLUDE_LIBYUV_COMPARE_ROW_H_
#
include
"
libyuv
/
basic_types
.
h
"
#
include
"
libyuv
/
cpu_support
.
h
"
#
ifdef
__cplusplus
namespace
libyuv
{
extern
"
C
"
{
#
endif
#
if
!
defined
(
LIBYUV_DISABLE_X86
)
&
&
\
(
(
defined
(
__x86_64__
)
&
&
!
defined
(
LIBYUV_ENABLE_ROWWIN
)
)
|
|
\
defined
(
__i386__
)
|
|
defined
(
_M_IX86
)
)
#
define
HAS_HASHDJB2_SSE41
#
define
HAS_SUMSQUAREERROR_SSE2
#
define
HAS_HAMMINGDISTANCE_SSE42
#
endif
#
if
!
defined
(
LIBYUV_DISABLE_X86
)
&
&
defined
(
_M_IX86
)
&
&
defined
(
_MSC_VER
)
&
&
\
!
defined
(
__clang__
)
&
&
\
(
defined
(
VISUALC_HAS_AVX2
)
|
|
defined
(
CLANG_HAS_AVX2
)
)
#
define
HAS_HASHDJB2_AVX2
#
define
HAS_SUMSQUAREERROR_AVX2
#
endif
#
if
!
defined
(
LIBYUV_DISABLE_X86
)
&
&
\
(
defined
(
__x86_64__
)
|
|
defined
(
__i386__
)
)
&
&
\
!
defined
(
LIBYUV_ENABLE_ROWWIN
)
#
define
HAS_HAMMINGDISTANCE_SSSE3
#
endif
#
if
!
defined
(
LIBYUV_DISABLE_X86
)
&
&
defined
(
CLANG_HAS_AVX2
)
&
&
\
(
defined
(
__x86_64__
)
|
|
defined
(
__i386__
)
)
&
&
\
!
defined
(
LIBYUV_ENABLE_ROWWIN
)
#
define
HAS_HAMMINGDISTANCE_AVX2
#
endif
#
if
!
defined
(
LIBYUV_DISABLE_NEON
)
&
&
\
(
defined
(
__ARM_NEON__
)
|
|
defined
(
LIBYUV_NEON
)
|
|
defined
(
__aarch64__
)
)
#
define
HAS_HAMMINGDISTANCE_NEON
#
define
HAS_SUMSQUAREERROR_NEON
#
endif
#
if
!
defined
(
LIBYUV_DISABLE_NEON
)
&
&
defined
(
__aarch64__
)
#
define
HAS_HASHDJB2_NEON
#
define
HAS_HAMMINGDISTANCE_NEON_DOTPROD
#
define
HAS_SUMSQUAREERROR_NEON_DOTPROD
#
endif
#
if
!
defined
(
LIBYUV_DISABLE_MSA
)
&
&
defined
(
__mips_msa
)
#
define
HAS_HAMMINGDISTANCE_MSA
#
define
HAS_SUMSQUAREERROR_MSA
#
endif
uint32_t
HammingDistance_C
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
HammingDistance_SSE42
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
HammingDistance_SSSE3
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
HammingDistance_AVX2
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
HammingDistance_NEON
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
HammingDistance_NEON_DotProd
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
HammingDistance_MSA
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
SumSquareError_C
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
SumSquareError_SSE2
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
SumSquareError_AVX2
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
SumSquareError_NEON
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
SumSquareError_NEON_DotProd
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
SumSquareError_MSA
(
const
uint8_t
*
src_a
const
uint8_t
*
src_b
int
count
)
;
uint32_t
HashDjb2_C
(
const
uint8_t
*
src
int
count
uint32_t
seed
)
;
uint32_t
HashDjb2_SSE41
(
const
uint8_t
*
src
int
count
uint32_t
seed
)
;
uint32_t
HashDjb2_AVX2
(
const
uint8_t
*
src
int
count
uint32_t
seed
)
;
uint32_t
HashDjb2_NEON
(
const
uint8_t
*
src
int
count
uint32_t
seed
)
;
#
ifdef
__cplusplus
}
}
#
endif
#
endif
