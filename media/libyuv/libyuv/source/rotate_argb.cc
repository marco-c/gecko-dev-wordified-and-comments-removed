#
include
"
libyuv
/
rotate
.
h
"
#
include
"
libyuv
/
convert
.
h
"
#
include
"
libyuv
/
cpu_id
.
h
"
#
include
"
libyuv
/
planar_functions
.
h
"
#
include
"
libyuv
/
row
.
h
"
#
include
"
libyuv
/
scale_row
.
h
"
#
ifdef
__cplusplus
namespace
libyuv
{
extern
"
C
"
{
#
endif
static
void
ARGBTranspose
(
const
uint8_t
*
src_argb
int
src_stride_argb
uint8_t
*
dst_argb
int
dst_stride_argb
int
width
int
height
)
{
int
i
;
int
src_pixel_step
=
src_stride_argb
>
>
2
;
void
(
*
ScaleARGBRowDownEven
)
(
const
uint8_t
*
src_argb
ptrdiff_t
src_stride_argb
int
src_step
uint8_t
*
dst_argb
int
dst_width
)
=
ScaleARGBRowDownEven_C
;
#
if
defined
(
HAS_SCALEARGBROWDOWNEVEN_SSE2
)
if
(
TestCpuFlag
(
kCpuHasSSE2
)
)
{
ScaleARGBRowDownEven
=
ScaleARGBRowDownEven_Any_SSE2
;
if
(
IS_ALIGNED
(
height
4
)
)
{
ScaleARGBRowDownEven
=
ScaleARGBRowDownEven_SSE2
;
}
}
#
endif
#
if
defined
(
HAS_SCALEARGBROWDOWNEVEN_NEON
)
if
(
TestCpuFlag
(
kCpuHasNEON
)
)
{
ScaleARGBRowDownEven
=
ScaleARGBRowDownEven_Any_NEON
;
if
(
IS_ALIGNED
(
height
4
)
)
{
ScaleARGBRowDownEven
=
ScaleARGBRowDownEven_NEON
;
}
}
#
endif
#
if
defined
(
HAS_SCALEARGBROWDOWNEVEN_MSA
)
if
(
TestCpuFlag
(
kCpuHasMSA
)
)
{
ScaleARGBRowDownEven
=
ScaleARGBRowDownEven_Any_MSA
;
if
(
IS_ALIGNED
(
height
4
)
)
{
ScaleARGBRowDownEven
=
ScaleARGBRowDownEven_MSA
;
}
}
#
endif
for
(
i
=
0
;
i
<
width
;
+
+
i
)
{
ScaleARGBRowDownEven
(
src_argb
0
src_pixel_step
dst_argb
height
)
;
dst_argb
+
=
dst_stride_argb
;
src_argb
+
=
4
;
}
}
void
ARGBRotate90
(
const
uint8_t
*
src_argb
int
src_stride_argb
uint8_t
*
dst_argb
int
dst_stride_argb
int
width
int
height
)
{
src_argb
+
=
src_stride_argb
*
(
height
-
1
)
;
src_stride_argb
=
-
src_stride_argb
;
ARGBTranspose
(
src_argb
src_stride_argb
dst_argb
dst_stride_argb
width
height
)
;
}
void
ARGBRotate270
(
const
uint8_t
*
src_argb
int
src_stride_argb
uint8_t
*
dst_argb
int
dst_stride_argb
int
width
int
height
)
{
dst_argb
+
=
dst_stride_argb
*
(
width
-
1
)
;
dst_stride_argb
=
-
dst_stride_argb
;
ARGBTranspose
(
src_argb
src_stride_argb
dst_argb
dst_stride_argb
width
height
)
;
}
void
ARGBRotate180
(
const
uint8_t
*
src_argb
int
src_stride_argb
uint8_t
*
dst_argb
int
dst_stride_argb
int
width
int
height
)
{
align_buffer_64
(
row
width
*
4
)
;
const
uint8_t
*
src_bot
=
src_argb
+
src_stride_argb
*
(
height
-
1
)
;
uint8_t
*
dst_bot
=
dst_argb
+
dst_stride_argb
*
(
height
-
1
)
;
int
half_height
=
(
height
+
1
)
>
>
1
;
int
y
;
void
(
*
ARGBMirrorRow
)
(
const
uint8_t
*
src_argb
uint8_t
*
dst_argb
int
width
)
=
ARGBMirrorRow_C
;
void
(
*
CopyRow
)
(
const
uint8_t
*
src_argb
uint8_t
*
dst_argb
int
width
)
=
CopyRow_C
;
#
if
defined
(
HAS_ARGBMIRRORROW_NEON
)
if
(
TestCpuFlag
(
kCpuHasNEON
)
)
{
ARGBMirrorRow
=
ARGBMirrorRow_Any_NEON
;
if
(
IS_ALIGNED
(
width
4
)
)
{
ARGBMirrorRow
=
ARGBMirrorRow_NEON
;
}
}
#
endif
#
if
defined
(
HAS_ARGBMIRRORROW_SSE2
)
if
(
TestCpuFlag
(
kCpuHasSSE2
)
)
{
ARGBMirrorRow
=
ARGBMirrorRow_Any_SSE2
;
if
(
IS_ALIGNED
(
width
4
)
)
{
ARGBMirrorRow
=
ARGBMirrorRow_SSE2
;
}
}
#
endif
#
if
defined
(
HAS_ARGBMIRRORROW_AVX2
)
if
(
TestCpuFlag
(
kCpuHasAVX2
)
)
{
ARGBMirrorRow
=
ARGBMirrorRow_Any_AVX2
;
if
(
IS_ALIGNED
(
width
8
)
)
{
ARGBMirrorRow
=
ARGBMirrorRow_AVX2
;
}
}
#
endif
#
if
defined
(
HAS_ARGBMIRRORROW_MSA
)
if
(
TestCpuFlag
(
kCpuHasMSA
)
)
{
ARGBMirrorRow
=
ARGBMirrorRow_Any_MSA
;
if
(
IS_ALIGNED
(
width
16
)
)
{
ARGBMirrorRow
=
ARGBMirrorRow_MSA
;
}
}
#
endif
#
if
defined
(
HAS_COPYROW_SSE2
)
if
(
TestCpuFlag
(
kCpuHasSSE2
)
)
{
CopyRow
=
IS_ALIGNED
(
width
*
4
32
)
?
CopyRow_SSE2
:
CopyRow_Any_SSE2
;
}
#
endif
#
if
defined
(
HAS_COPYROW_AVX
)
if
(
TestCpuFlag
(
kCpuHasAVX
)
)
{
CopyRow
=
IS_ALIGNED
(
width
*
4
64
)
?
CopyRow_AVX
:
CopyRow_Any_AVX
;
}
#
endif
#
if
defined
(
HAS_COPYROW_ERMS
)
if
(
TestCpuFlag
(
kCpuHasERMS
)
)
{
CopyRow
=
CopyRow_ERMS
;
}
#
endif
#
if
defined
(
HAS_COPYROW_NEON
)
if
(
TestCpuFlag
(
kCpuHasNEON
)
)
{
CopyRow
=
IS_ALIGNED
(
width
*
4
32
)
?
CopyRow_NEON
:
CopyRow_Any_NEON
;
}
#
endif
for
(
y
=
0
;
y
<
half_height
;
+
+
y
)
{
ARGBMirrorRow
(
src_argb
row
width
)
;
ARGBMirrorRow
(
src_bot
dst_argb
width
)
;
CopyRow
(
row
dst_bot
width
*
4
)
;
src_argb
+
=
src_stride_argb
;
dst_argb
+
=
dst_stride_argb
;
src_bot
-
=
src_stride_argb
;
dst_bot
-
=
dst_stride_argb
;
}
free_aligned_buffer_64
(
row
)
;
}
LIBYUV_API
int
ARGBRotate
(
const
uint8_t
*
src_argb
int
src_stride_argb
uint8_t
*
dst_argb
int
dst_stride_argb
int
width
int
height
enum
RotationMode
mode
)
{
if
(
!
src_argb
|
|
width
<
=
0
|
|
height
=
=
0
|
|
!
dst_argb
)
{
return
-
1
;
}
if
(
height
<
0
)
{
height
=
-
height
;
src_argb
=
src_argb
+
(
height
-
1
)
*
src_stride_argb
;
src_stride_argb
=
-
src_stride_argb
;
}
switch
(
mode
)
{
case
kRotate0
:
return
ARGBCopy
(
src_argb
src_stride_argb
dst_argb
dst_stride_argb
width
height
)
;
case
kRotate90
:
ARGBRotate90
(
src_argb
src_stride_argb
dst_argb
dst_stride_argb
width
height
)
;
return
0
;
case
kRotate270
:
ARGBRotate270
(
src_argb
src_stride_argb
dst_argb
dst_stride_argb
width
height
)
;
return
0
;
case
kRotate180
:
ARGBRotate180
(
src_argb
src_stride_argb
dst_argb
dst_stride_argb
width
height
)
;
return
0
;
default
:
break
;
}
return
-
1
;
}
#
ifdef
__cplusplus
}
}
#
endif
