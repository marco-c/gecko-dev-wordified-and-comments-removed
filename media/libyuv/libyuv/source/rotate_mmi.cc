#
include
"
libyuv
/
rotate_row
.
h
"
#
include
"
libyuv
/
row
.
h
"
#
ifdef
__cplusplus
namespace
libyuv
{
extern
"
C
"
{
#
endif
#
if
!
defined
(
LIBYUV_DISABLE_MMI
)
&
&
defined
(
_MIPS_ARCH_LOONGSON3A
)
void
TransposeWx8_MMI
(
const
uint8_t
*
src
int
src_stride
uint8_t
*
dst
int
dst_stride
int
width
)
{
uint64_t
tmp0
tmp1
tmp2
tmp3
tmp4
tmp5
tmp6
;
uint64_t
tmp7
tmp8
tmp9
tmp10
tmp11
tmp12
tmp13
;
uint8_t
*
src_tmp
=
nullptr
;
__asm__
volatile
(
"
1
:
\
n
\
t
"
"
ldc1
%
[
tmp12
]
0x00
(
%
[
src
]
)
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp13
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
punpcklbh
%
[
tmp0
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpckhbh
%
[
tmp1
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp12
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp13
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
punpcklbh
%
[
tmp2
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpckhbh
%
[
tmp3
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpcklhw
%
[
tmp4
]
%
[
tmp0
]
%
[
tmp2
]
\
n
\
t
"
"
punpckhhw
%
[
tmp5
]
%
[
tmp0
]
%
[
tmp2
]
\
n
\
t
"
"
punpcklhw
%
[
tmp6
]
%
[
tmp1
]
%
[
tmp3
]
\
n
\
t
"
"
punpckhhw
%
[
tmp7
]
%
[
tmp1
]
%
[
tmp3
]
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp12
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp13
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
punpcklbh
%
[
tmp0
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpckhbh
%
[
tmp1
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp12
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp13
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
punpcklbh
%
[
tmp2
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpckhbh
%
[
tmp3
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpcklhw
%
[
tmp8
]
%
[
tmp0
]
%
[
tmp2
]
\
n
\
t
"
"
punpckhhw
%
[
tmp9
]
%
[
tmp0
]
%
[
tmp2
]
\
n
\
t
"
"
punpcklhw
%
[
tmp10
]
%
[
tmp1
]
%
[
tmp3
]
\
n
\
t
"
"
punpckhhw
%
[
tmp11
]
%
[
tmp1
]
%
[
tmp3
]
\
n
\
t
"
"
punpcklwd
%
[
tmp0
]
%
[
tmp4
]
%
[
tmp8
]
\
n
\
t
"
"
punpckhwd
%
[
tmp1
]
%
[
tmp4
]
%
[
tmp8
]
\
n
\
t
"
"
gssdlc1
%
[
tmp0
]
0x07
(
%
[
dst
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp0
]
0x00
(
%
[
dst
]
)
\
n
\
t
"
"
dadd
%
[
dst
]
%
[
dst
]
%
[
dst_stride
]
\
n
\
t
"
"
gssdlc1
%
[
tmp1
]
0x07
(
%
[
dst
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp1
]
0x00
(
%
[
dst
]
)
\
n
\
t
"
"
punpcklwd
%
[
tmp0
]
%
[
tmp5
]
%
[
tmp9
]
\
n
\
t
"
"
punpckhwd
%
[
tmp1
]
%
[
tmp5
]
%
[
tmp9
]
\
n
\
t
"
"
dadd
%
[
dst
]
%
[
dst
]
%
[
dst_stride
]
\
n
\
t
"
"
gssdlc1
%
[
tmp0
]
0x07
(
%
[
dst
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp0
]
0x00
(
%
[
dst
]
)
\
n
\
t
"
"
dadd
%
[
dst
]
%
[
dst
]
%
[
dst_stride
]
\
n
\
t
"
"
gssdlc1
%
[
tmp1
]
0x07
(
%
[
dst
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp1
]
0x00
(
%
[
dst
]
)
\
n
\
t
"
"
punpcklwd
%
[
tmp0
]
%
[
tmp6
]
%
[
tmp10
]
\
n
\
t
"
"
punpckhwd
%
[
tmp1
]
%
[
tmp6
]
%
[
tmp10
]
\
n
\
t
"
"
dadd
%
[
dst
]
%
[
dst
]
%
[
dst_stride
]
\
n
\
t
"
"
gssdlc1
%
[
tmp0
]
0x07
(
%
[
dst
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp0
]
0x00
(
%
[
dst
]
)
\
n
\
t
"
"
dadd
%
[
dst
]
%
[
dst
]
%
[
dst_stride
]
\
n
\
t
"
"
gssdlc1
%
[
tmp1
]
0x07
(
%
[
dst
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp1
]
0x00
(
%
[
dst
]
)
\
n
\
t
"
"
punpcklwd
%
[
tmp0
]
%
[
tmp7
]
%
[
tmp11
]
\
n
\
t
"
"
punpckhwd
%
[
tmp1
]
%
[
tmp7
]
%
[
tmp11
]
\
n
\
t
"
"
dadd
%
[
dst
]
%
[
dst
]
%
[
dst_stride
]
\
n
\
t
"
"
gssdlc1
%
[
tmp0
]
0x07
(
%
[
dst
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp0
]
0x00
(
%
[
dst
]
)
\
n
\
t
"
"
dadd
%
[
dst
]
%
[
dst
]
%
[
dst_stride
]
\
n
\
t
"
"
gssdlc1
%
[
tmp1
]
0x07
(
%
[
dst
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp1
]
0x00
(
%
[
dst
]
)
\
n
\
t
"
"
dadd
%
[
dst
]
%
[
dst
]
%
[
dst_stride
]
\
n
\
t
"
"
daddi
%
[
src
]
%
[
src
]
0x08
\
n
\
t
"
"
daddi
%
[
width
]
%
[
width
]
-
0x08
\
n
\
t
"
"
bnez
%
[
width
]
1b
\
n
\
t
"
:
[
tmp0
]
"
=
&
f
"
(
tmp0
)
[
tmp1
]
"
=
&
f
"
(
tmp1
)
[
tmp2
]
"
=
&
f
"
(
tmp2
)
[
tmp3
]
"
=
&
f
"
(
tmp3
)
[
tmp4
]
"
=
&
f
"
(
tmp4
)
[
tmp5
]
"
=
&
f
"
(
tmp5
)
[
tmp6
]
"
=
&
f
"
(
tmp6
)
[
tmp7
]
"
=
&
f
"
(
tmp7
)
[
tmp8
]
"
=
&
f
"
(
tmp8
)
[
tmp9
]
"
=
&
f
"
(
tmp9
)
[
tmp10
]
"
=
&
f
"
(
tmp10
)
[
tmp11
]
"
=
&
f
"
(
tmp11
)
[
tmp12
]
"
=
&
f
"
(
tmp12
)
[
tmp13
]
"
=
&
f
"
(
tmp13
)
[
dst
]
"
+
&
r
"
(
dst
)
[
src_tmp
]
"
+
&
r
"
(
src_tmp
)
:
[
src
]
"
r
"
(
src
)
[
width
]
"
r
"
(
width
)
[
src_stride
]
"
r
"
(
src_stride
)
[
dst_stride
]
"
r
"
(
dst_stride
)
:
"
memory
"
)
;
}
void
TransposeUVWx8_MMI
(
const
uint8_t
*
src
int
src_stride
uint8_t
*
dst_a
int
dst_stride_a
uint8_t
*
dst_b
int
dst_stride_b
int
width
)
{
uint64_t
tmp0
tmp1
tmp2
tmp3
tmp4
tmp5
tmp6
;
uint64_t
tmp7
tmp8
tmp9
tmp10
tmp11
tmp12
tmp13
;
uint8_t
*
src_tmp
=
nullptr
;
__asm__
volatile
(
"
1
:
\
n
\
t
"
"
ldc1
%
[
tmp12
]
0x00
(
%
[
src
]
)
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp13
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
punpcklbh
%
[
tmp0
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpckhbh
%
[
tmp1
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp12
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp13
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
punpcklbh
%
[
tmp2
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpckhbh
%
[
tmp3
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpcklhw
%
[
tmp4
]
%
[
tmp0
]
%
[
tmp2
]
\
n
\
t
"
"
punpckhhw
%
[
tmp5
]
%
[
tmp0
]
%
[
tmp2
]
\
n
\
t
"
"
punpcklhw
%
[
tmp6
]
%
[
tmp1
]
%
[
tmp3
]
\
n
\
t
"
"
punpckhhw
%
[
tmp7
]
%
[
tmp1
]
%
[
tmp3
]
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp12
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp13
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
punpcklbh
%
[
tmp0
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpckhbh
%
[
tmp1
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp12
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
dadd
%
[
src_tmp
]
%
[
src_tmp
]
%
[
src_stride
]
\
n
\
t
"
"
ldc1
%
[
tmp13
]
0x00
(
%
[
src_tmp
]
)
\
n
\
t
"
"
punpcklbh
%
[
tmp2
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpckhbh
%
[
tmp3
]
%
[
tmp12
]
%
[
tmp13
]
\
n
\
t
"
"
punpcklhw
%
[
tmp8
]
%
[
tmp0
]
%
[
tmp2
]
\
n
\
t
"
"
punpckhhw
%
[
tmp9
]
%
[
tmp0
]
%
[
tmp2
]
\
n
\
t
"
"
punpcklhw
%
[
tmp10
]
%
[
tmp1
]
%
[
tmp3
]
\
n
\
t
"
"
punpckhhw
%
[
tmp11
]
%
[
tmp1
]
%
[
tmp3
]
\
n
\
t
"
"
punpcklwd
%
[
tmp0
]
%
[
tmp4
]
%
[
tmp8
]
\
n
\
t
"
"
punpckhwd
%
[
tmp1
]
%
[
tmp4
]
%
[
tmp8
]
\
n
\
t
"
"
gssdlc1
%
[
tmp0
]
0x07
(
%
[
dst_a
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp0
]
0x00
(
%
[
dst_a
]
)
\
n
\
t
"
"
gssdlc1
%
[
tmp1
]
0x07
(
%
[
dst_b
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp1
]
0x00
(
%
[
dst_b
]
)
\
n
\
t
"
"
punpcklwd
%
[
tmp0
]
%
[
tmp5
]
%
[
tmp9
]
\
n
\
t
"
"
punpckhwd
%
[
tmp1
]
%
[
tmp5
]
%
[
tmp9
]
\
n
\
t
"
"
dadd
%
[
dst_a
]
%
[
dst_a
]
%
[
dst_stride_a
]
\
n
\
t
"
"
gssdlc1
%
[
tmp0
]
0x07
(
%
[
dst_a
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp0
]
0x00
(
%
[
dst_a
]
)
\
n
\
t
"
"
dadd
%
[
dst_b
]
%
[
dst_b
]
%
[
dst_stride_b
]
\
n
\
t
"
"
gssdlc1
%
[
tmp1
]
0x07
(
%
[
dst_b
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp1
]
0x00
(
%
[
dst_b
]
)
\
n
\
t
"
"
punpcklwd
%
[
tmp0
]
%
[
tmp6
]
%
[
tmp10
]
\
n
\
t
"
"
punpckhwd
%
[
tmp1
]
%
[
tmp6
]
%
[
tmp10
]
\
n
\
t
"
"
dadd
%
[
dst_a
]
%
[
dst_a
]
%
[
dst_stride_a
]
\
n
\
t
"
"
gssdlc1
%
[
tmp0
]
0x07
(
%
[
dst_a
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp0
]
0x00
(
%
[
dst_a
]
)
\
n
\
t
"
"
dadd
%
[
dst_b
]
%
[
dst_b
]
%
[
dst_stride_b
]
\
n
\
t
"
"
gssdlc1
%
[
tmp1
]
0x07
(
%
[
dst_b
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp1
]
0x00
(
%
[
dst_b
]
)
\
n
\
t
"
"
punpcklwd
%
[
tmp0
]
%
[
tmp7
]
%
[
tmp11
]
\
n
\
t
"
"
punpckhwd
%
[
tmp1
]
%
[
tmp7
]
%
[
tmp11
]
\
n
\
t
"
"
dadd
%
[
dst_a
]
%
[
dst_a
]
%
[
dst_stride_a
]
\
n
\
t
"
"
gssdlc1
%
[
tmp0
]
0x07
(
%
[
dst_a
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp0
]
0x00
(
%
[
dst_a
]
)
\
n
\
t
"
"
dadd
%
[
dst_b
]
%
[
dst_b
]
%
[
dst_stride_b
]
\
n
\
t
"
"
gssdlc1
%
[
tmp1
]
0x07
(
%
[
dst_b
]
)
\
n
\
t
"
"
gssdrc1
%
[
tmp1
]
0x00
(
%
[
dst_b
]
)
\
n
\
t
"
"
dadd
%
[
dst_a
]
%
[
dst_a
]
%
[
dst_stride_a
]
\
n
\
t
"
"
dadd
%
[
dst_b
]
%
[
dst_b
]
%
[
dst_stride_b
]
\
n
\
t
"
"
daddiu
%
[
src
]
%
[
src
]
0x08
\
n
\
t
"
"
daddi
%
[
width
]
%
[
width
]
-
0x04
\
n
\
t
"
"
bnez
%
[
width
]
1b
\
n
\
t
"
:
[
tmp0
]
"
=
&
f
"
(
tmp0
)
[
tmp1
]
"
=
&
f
"
(
tmp1
)
[
tmp2
]
"
=
&
f
"
(
tmp2
)
[
tmp3
]
"
=
&
f
"
(
tmp3
)
[
tmp4
]
"
=
&
f
"
(
tmp4
)
[
tmp5
]
"
=
&
f
"
(
tmp5
)
[
tmp6
]
"
=
&
f
"
(
tmp6
)
[
tmp7
]
"
=
&
f
"
(
tmp7
)
[
tmp8
]
"
=
&
f
"
(
tmp8
)
[
tmp9
]
"
=
&
f
"
(
tmp9
)
[
tmp10
]
"
=
&
f
"
(
tmp10
)
[
tmp11
]
"
=
&
f
"
(
tmp11
)
[
tmp12
]
"
=
&
f
"
(
tmp12
)
[
tmp13
]
"
=
&
f
"
(
tmp13
)
[
dst_a
]
"
+
&
r
"
(
dst_a
)
[
dst_b
]
"
+
&
r
"
(
dst_b
)
[
src_tmp
]
"
+
&
r
"
(
src_tmp
)
:
[
src
]
"
r
"
(
src
)
[
width
]
"
r
"
(
width
)
[
dst_stride_a
]
"
r
"
(
dst_stride_a
)
[
dst_stride_b
]
"
r
"
(
dst_stride_b
)
[
src_stride
]
"
r
"
(
src_stride
)
:
"
memory
"
)
;
}
#
endif
#
ifdef
__cplusplus
}
}
#
endif
