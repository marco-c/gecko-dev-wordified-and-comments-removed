#
include
"
libyuv
/
mjpeg_decoder
.
h
"
#
include
<
string
.
h
>
#
ifdef
__cplusplus
namespace
libyuv
{
extern
"
C
"
{
#
endif
static
LIBYUV_BOOL
ScanEOI
(
const
uint8_t
*
src_mjpg
size_t
src_size_mjpg
)
{
if
(
src_size_mjpg
>
=
2
)
{
const
uint8_t
*
end
=
src_mjpg
+
src_size_mjpg
-
1
;
const
uint8_t
*
it
=
src_mjpg
;
while
(
it
<
end
)
{
it
=
(
const
uint8_t
*
)
(
memchr
(
it
0xff
end
-
it
)
)
;
if
(
it
=
=
NULL
)
{
break
;
}
if
(
it
[
1
]
=
=
0xd9
)
{
return
LIBYUV_TRUE
;
}
+
+
it
;
}
}
return
LIBYUV_FALSE
;
}
LIBYUV_BOOL
ValidateJpeg
(
const
uint8_t
*
src_mjpg
size_t
src_size_mjpg
)
{
const
size_t
kMaxJpegSize
=
0x7fffffffull
;
const
size_t
kBackSearchSize
=
1024
;
if
(
src_size_mjpg
<
64
|
|
src_size_mjpg
>
kMaxJpegSize
|
|
!
src_mjpg
)
{
return
LIBYUV_FALSE
;
}
if
(
src_mjpg
[
0
]
!
=
0xff
|
|
src_mjpg
[
1
]
!
=
0xd8
|
|
src_mjpg
[
2
]
!
=
0xff
)
{
return
LIBYUV_FALSE
;
}
if
(
src_size_mjpg
>
kBackSearchSize
)
{
if
(
ScanEOI
(
src_mjpg
+
src_size_mjpg
-
kBackSearchSize
kBackSearchSize
)
)
{
return
LIBYUV_TRUE
;
}
src_size_mjpg
=
src_size_mjpg
-
kBackSearchSize
+
1
;
}
return
ScanEOI
(
src_mjpg
+
2
src_size_mjpg
-
2
)
;
}
#
ifdef
__cplusplus
}
}
#
endif
