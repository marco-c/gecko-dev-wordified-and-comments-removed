#
ifndef
dtls_identity_h__
#
define
dtls_identity_h__
#
include
<
string
>
#
include
"
m_cpp_utils
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ScopedNSSTypes
.
h
"
#
include
"
sslt
.
h
"
namespace
mozilla
{
class
DtlsIdentity
final
{
public
:
DtlsIdentity
(
UniqueSECKEYPrivateKey
privkey
UniqueCERTCertificate
cert
SSLKEAType
authType
)
:
private_key_
(
Move
(
privkey
)
)
cert_
(
Move
(
cert
)
)
auth_type_
(
authType
)
{
}
static
RefPtr
<
DtlsIdentity
>
Generate
(
)
;
const
UniqueCERTCertificate
&
cert
(
)
const
{
return
cert_
;
}
const
UniqueSECKEYPrivateKey
&
privkey
(
)
const
{
return
private_key_
;
}
SSLKEAType
auth_type
(
)
const
{
return
auth_type_
;
}
nsresult
ComputeFingerprint
(
const
std
:
:
string
algorithm
uint8_t
*
digest
size_t
size
size_t
*
digest_length
)
const
;
static
nsresult
ComputeFingerprint
(
const
UniqueCERTCertificate
&
cert
const
std
:
:
string
algorithm
uint8_t
*
digest
size_t
size
size_t
*
digest_length
)
;
static
const
std
:
:
string
DEFAULT_HASH_ALGORITHM
;
enum
{
HASH_ALGORITHM_MAX_LENGTH
=
64
}
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
DtlsIdentity
)
private
:
~
DtlsIdentity
(
)
{
}
DISALLOW_COPY_ASSIGN
(
DtlsIdentity
)
;
UniqueSECKEYPrivateKey
private_key_
;
UniqueCERTCertificate
cert_
;
SSLKEAType
auth_type_
;
}
;
}
#
endif
