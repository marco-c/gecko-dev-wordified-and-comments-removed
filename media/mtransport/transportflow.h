#
ifndef
transportflow_h__
#
define
transportflow_h__
#
include
<
deque
>
#
include
<
string
>
#
include
"
nscore
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
transportlayer
.
h
"
#
include
"
m_cpp_utils
.
h
"
#
include
"
nsAutoPtr
.
h
"
namespace
mozilla
{
class
TransportFlow
final
:
public
nsISupports
{
public
:
TransportFlow
(
)
:
id_
(
"
(
anonymous
)
"
)
layers_
(
new
std
:
:
deque
<
TransportLayer
*
>
)
{
}
explicit
TransportFlow
(
const
std
:
:
string
id
)
:
id_
(
id
)
layers_
(
new
std
:
:
deque
<
TransportLayer
*
>
)
{
}
const
std
:
:
string
&
id
(
)
const
{
return
id_
;
}
void
PushLayer
(
TransportLayer
*
layer
)
;
TransportLayer
*
GetLayer
(
const
std
:
:
string
&
id
)
const
;
NS_DECL_THREADSAFE_ISUPPORTS
private
:
~
TransportFlow
(
)
;
DISALLOW_COPY_ASSIGN
(
TransportFlow
)
;
void
CheckThread
(
)
const
{
if
(
!
CheckThreadInt
(
)
)
MOZ_CRASH
(
)
;
}
bool
CheckThreadInt
(
)
const
{
bool
on
;
if
(
!
target_
)
return
true
;
if
(
NS_FAILED
(
target_
-
>
IsOnCurrentThread
(
&
on
)
)
)
return
false
;
return
on
;
}
void
EnsureSameThread
(
TransportLayer
*
layer
)
;
static
void
DestroyFinal
(
nsAutoPtr
<
std
:
:
deque
<
TransportLayer
*
>
>
layers
)
;
static
void
ClearLayers
(
std
:
:
deque
<
TransportLayer
*
>
*
layers
)
;
std
:
:
string
id_
;
UniquePtr
<
std
:
:
deque
<
TransportLayer
*
>
>
layers_
;
nsCOMPtr
<
nsIEventTarget
>
target_
;
}
;
}
#
endif
