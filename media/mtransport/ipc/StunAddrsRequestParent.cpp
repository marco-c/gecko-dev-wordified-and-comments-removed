#
include
"
StunAddrsRequestParent
.
h
"
#
include
"
.
.
/
runnable_utils
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
mtransport
/
nricectx
.
h
"
#
include
"
mtransport
/
nricemediastream
.
h
"
#
include
"
mtransport
/
nricestunaddr
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
net
{
StunAddrsRequestParent
:
:
StunAddrsRequestParent
(
)
{
NS_GetMainThread
(
getter_AddRefs
(
mMainThread
)
)
;
nsresult
res
;
mSTSThread
=
do_GetService
(
NS_SOCKETTRANSPORTSERVICE_CONTRACTID
&
res
)
;
MOZ_ASSERT
(
mSTSThread
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StunAddrsRequestParent
:
:
RecvGetStunAddrs
(
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
RUN_ON_THREAD
(
mSTSThread
WrapRunnable
(
this
&
StunAddrsRequestParent
:
:
GetStunAddrs_s
)
NS_DISPATCH_NORMAL
)
;
return
IPC_OK
(
)
;
}
void
StunAddrsRequestParent
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
}
void
StunAddrsRequestParent
:
:
GetStunAddrs_s
(
)
{
ASSERT_ON_THREAD
(
mSTSThread
)
;
NrIceStunAddrArray
addrs
=
NrIceCtx
:
:
GetStunAddrs
(
)
;
RUN_ON_THREAD
(
mMainThread
WrapRunnable
(
this
&
StunAddrsRequestParent
:
:
SendStunAddrs_m
std
:
:
move
(
addrs
)
)
NS_DISPATCH_NORMAL
)
;
}
void
StunAddrsRequestParent
:
:
SendStunAddrs_m
(
const
NrIceStunAddrArray
&
addrs
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
Unused
<
<
SendOnStunAddrsAvailable
(
addrs
)
;
}
NS_IMPL_ADDREF
(
StunAddrsRequestParent
)
NS_IMPL_RELEASE
(
StunAddrsRequestParent
)
}
}
