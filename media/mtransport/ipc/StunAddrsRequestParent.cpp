#
include
"
StunAddrsRequestParent
.
h
"
#
include
"
.
.
/
runnable_utils
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
mtransport
/
nricectx
.
h
"
#
include
"
mtransport
/
nricemediastream
.
h
"
#
include
"
mtransport
/
nricestunaddr
.
h
"
#
include
"
.
.
/
mdns_service
/
mdns_service
.
h
"
using
namespace
mozilla
:
:
ipc
;
namespace
mozilla
{
namespace
net
{
StunAddrsRequestParent
:
:
StunAddrsRequestParent
(
)
:
mIPCClosed
(
false
)
{
NS_GetMainThread
(
getter_AddRefs
(
mMainThread
)
)
;
nsresult
res
;
mSTSThread
=
do_GetService
(
NS_SOCKETTRANSPORTSERVICE_CONTRACTID
&
res
)
;
MOZ_ASSERT
(
mSTSThread
)
;
if
(
!
mSharedMDNSService
)
{
mSharedMDNSService
=
new
MDNSServiceWrapper
;
}
}
StunAddrsRequestParent
:
:
~
StunAddrsRequestParent
(
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mSharedMDNSService
)
{
mSharedMDNSService
=
nullptr
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
StunAddrsRequestParent
:
:
RecvGetStunAddrs
(
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mIPCClosed
)
{
return
IPC_OK
(
)
;
}
RUN_ON_THREAD
(
mSTSThread
WrapRunnable
(
RefPtr
<
StunAddrsRequestParent
>
(
this
)
&
StunAddrsRequestParent
:
:
GetStunAddrs_s
)
NS_DISPATCH_NORMAL
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StunAddrsRequestParent
:
:
RecvRegisterMDNSHostname
(
const
nsCString
&
aHostname
const
nsCString
&
aAddress
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mIPCClosed
)
{
return
IPC_OK
(
)
;
}
mSharedMDNSService
-
>
RegisterHostname
(
aHostname
.
BeginReading
(
)
aAddress
.
BeginReading
(
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StunAddrsRequestParent
:
:
RecvUnregisterMDNSHostname
(
const
nsCString
&
aHostname
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mIPCClosed
)
{
return
IPC_OK
(
)
;
}
mSharedMDNSService
-
>
UnregisterHostname
(
aHostname
.
BeginReading
(
)
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
StunAddrsRequestParent
:
:
Recv__delete__
(
)
{
mIPCClosed
=
true
;
return
IPC_OK
(
)
;
}
void
StunAddrsRequestParent
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
mIPCClosed
=
true
;
}
void
StunAddrsRequestParent
:
:
GetStunAddrs_s
(
)
{
ASSERT_ON_THREAD
(
mSTSThread
)
;
NrIceStunAddrArray
addrs
=
NrIceCtx
:
:
GetStunAddrs
(
)
;
if
(
mIPCClosed
)
{
return
;
}
RUN_ON_THREAD
(
mMainThread
WrapRunnable
(
RefPtr
<
StunAddrsRequestParent
>
(
this
)
&
StunAddrsRequestParent
:
:
SendStunAddrs_m
std
:
:
move
(
addrs
)
)
NS_DISPATCH_NORMAL
)
;
}
void
StunAddrsRequestParent
:
:
SendStunAddrs_m
(
const
NrIceStunAddrArray
&
addrs
)
{
ASSERT_ON_THREAD
(
mMainThread
)
;
if
(
mIPCClosed
)
{
return
;
}
Unused
<
<
SendOnStunAddrsAvailable
(
addrs
)
;
}
StaticRefPtr
<
StunAddrsRequestParent
:
:
MDNSServiceWrapper
>
StunAddrsRequestParent
:
:
mSharedMDNSService
;
NS_IMPL_ADDREF
(
StunAddrsRequestParent
)
NS_IMPL_RELEASE
(
StunAddrsRequestParent
)
void
StunAddrsRequestParent
:
:
MDNSServiceWrapper
:
:
RegisterHostname
(
const
char
*
hostname
const
char
*
address
)
{
StartIfRequired
(
)
;
if
(
mMDNSService
)
{
mdns_service_register_hostname
(
mMDNSService
hostname
address
)
;
}
}
void
StunAddrsRequestParent
:
:
MDNSServiceWrapper
:
:
UnregisterHostname
(
const
char
*
hostname
)
{
StartIfRequired
(
)
;
if
(
mMDNSService
)
{
mdns_service_unregister_hostname
(
mMDNSService
hostname
)
;
}
}
StunAddrsRequestParent
:
:
MDNSServiceWrapper
:
:
~
MDNSServiceWrapper
(
)
{
if
(
mMDNSService
)
{
mdns_service_stop
(
mMDNSService
)
;
mMDNSService
=
nullptr
;
}
}
void
StunAddrsRequestParent
:
:
MDNSServiceWrapper
:
:
StartIfRequired
(
)
{
if
(
!
mMDNSService
)
{
mMDNSService
=
mdns_service_start
(
)
;
}
}
NS_IMPL_ADDREF
(
StunAddrsRequestParent
:
:
MDNSServiceWrapper
)
NS_IMPL_RELEASE
(
StunAddrsRequestParent
:
:
MDNSServiceWrapper
)
}
}
