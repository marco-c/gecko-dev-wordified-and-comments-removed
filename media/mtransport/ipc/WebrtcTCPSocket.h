#
ifndef
webrtc_tcp_socket_h__
#
define
webrtc_tcp_socket_h__
#
include
<
list
>
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIAsyncInputStream
.
h
"
#
include
"
nsIAsyncOutputStream
.
h
"
#
include
"
nsIAuthPromptProvider
.
h
"
#
include
"
nsIHttpChannelInternal
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
dom
/
PContentChild
.
h
"
#
include
"
nsIProtocolProxyCallback
.
h
"
#
include
"
mtransport
/
nr_socket_proxy_config
.
h
"
class
nsISocketTransport
;
namespace
mozilla
{
namespace
net
{
class
WebrtcTCPSocketCallback
;
class
WebrtcTCPData
;
class
WebrtcTCPSocket
:
public
nsIHttpUpgradeListener
public
nsIStreamListener
public
nsIInputStreamCallback
public
nsIOutputStreamCallback
public
nsIInterfaceRequestor
public
nsIAuthPromptProvider
public
nsIProtocolProxyCallback
{
public
:
NS_DECL_NSIHTTPUPGRADELISTENER
NS_DECL_NSIINPUTSTREAMCALLBACK
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSIOUTPUTSTREAMCALLBACK
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_THREADSAFE_ISUPPORTS
NS_FORWARD_SAFE_NSIAUTHPROMPTPROVIDER
(
mAuthProvider
)
NS_DECL_NSIPROTOCOLPROXYCALLBACK
explicit
WebrtcTCPSocket
(
WebrtcTCPSocketCallback
*
aCallbacks
)
;
void
SetTabId
(
dom
:
:
TabId
aTabId
)
;
nsresult
Open
(
const
nsCString
&
aHost
const
int
&
aPort
const
net
:
:
LoadInfoArgs
&
aArgs
const
nsCString
&
aAlpn
NrSocketProxyConfig
:
:
ProxyPolicy
aProxyPolicy
)
;
nsresult
Write
(
nsTArray
<
uint8_t
>
&
&
aBytes
)
;
nsresult
Close
(
)
;
size_t
CountUnwrittenBytes
(
)
const
;
protected
:
virtual
~
WebrtcTCPSocket
(
)
;
virtual
void
InvokeOnClose
(
nsresult
aReason
)
;
virtual
void
InvokeOnConnected
(
)
;
virtual
void
InvokeOnRead
(
nsTArray
<
uint8_t
>
&
&
aReadData
)
;
RefPtr
<
WebrtcTCPSocketCallback
>
mProxyCallbacks
;
private
:
bool
mClosed
;
bool
mOpened
;
nsCOMPtr
<
nsIURI
>
mURI
;
net
:
:
LoadInfoArgs
mLoadInfoArgs
;
nsCString
mAlpn
;
bool
mSsl
=
false
;
bool
mForceProxy
=
false
;
nsresult
DoProxyConfigLookup
(
)
;
nsresult
OpenWithHttpProxy
(
)
;
nsresult
OpenWithoutHttpProxy
(
nsIProxyInfo
*
aSocksProxyInfo
)
;
nsresult
FinishOpen
(
)
;
void
EnqueueWrite_s
(
nsTArray
<
uint8_t
>
&
&
aWriteData
)
;
void
CloseWithReason
(
nsresult
aReason
)
;
size_t
mWriteOffset
;
std
:
:
list
<
WebrtcTCPData
>
mWriteQueue
;
nsCOMPtr
<
nsIAuthPromptProvider
>
mAuthProvider
;
nsCOMPtr
<
nsISocketTransport
>
mTransport
;
nsCOMPtr
<
nsIAsyncInputStream
>
mSocketIn
;
nsCOMPtr
<
nsIAsyncOutputStream
>
mSocketOut
;
nsCOMPtr
<
nsIEventTarget
>
mMainThread
;
nsCOMPtr
<
nsIEventTarget
>
mSocketThread
;
}
;
}
}
#
endif
