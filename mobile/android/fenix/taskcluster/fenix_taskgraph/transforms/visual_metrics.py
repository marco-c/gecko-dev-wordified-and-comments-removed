"
"
"
Generate
labels
for
tasks
without
names
consistently
.
Uses
attributes
from
primary
-
dependency
.
"
"
"
from
__future__
import
absolute_import
print_function
unicode_literals
import
os
from
taskgraph
.
transforms
.
base
import
TransformSequence
transforms
=
TransformSequence
(
)
SYMBOL
=
"
{
groupSymbol
}
(
{
symbol
}
-
vismet
)
"
LABEL
=
"
test
-
vismet
-
{
platform
}
-
{
label
}
"
transforms
.
add
def
make_label
(
config
jobs
)
:
    
"
"
"
Generate
a
sane
label
for
a
new
task
constructed
from
a
dependency
    
Using
attributes
from
the
dependent
job
and
the
current
task
kind
"
"
"
    
for
job
in
jobs
:
        
dep_job
=
job
[
'
primary
-
dependency
'
]
        
attr
=
dep_job
.
attributes
.
get
        
if
attr
(
'
locale
'
job
.
get
(
'
locale
'
)
)
:
            
template
=
"
{
kind
}
-
{
locale
}
-
{
build_platform
}
/
{
build_type
}
"
        
elif
attr
(
'
l10n_chunk
'
)
:
            
template
=
"
{
kind
}
-
{
build_platform
}
-
{
l10n_chunk
}
/
{
build_type
}
"
        
elif
config
.
kind
.
startswith
(
"
release
-
eme
-
free
"
)
or
\
                
config
.
kind
.
startswith
(
"
release
-
partner
-
repack
"
)
:
            
suffix
=
job
.
get
(
"
extra
"
{
}
)
.
get
(
"
repack_suffix
"
None
)
or
\
                     
job
.
get
(
"
extra
"
{
}
)
.
get
(
"
repack_id
"
None
)
            
template
=
"
{
kind
}
-
{
build_platform
}
"
            
if
suffix
:
                
template
+
=
"
-
{
}
"
.
format
(
suffix
.
replace
(
'
/
'
'
-
'
)
)
        
else
:
            
template
=
"
{
kind
}
-
{
build_platform
}
/
{
build_type
}
"
        
job
[
'
label
'
]
=
template
.
format
(
            
kind
=
config
.
kind
            
build_platform
=
attr
(
'
build_platform
'
)
            
build_type
=
attr
(
'
build_type
'
)
            
locale
=
attr
(
'
locale
'
job
.
get
(
'
locale
'
'
'
)
)
            
l10n_chunk
=
attr
(
'
l10n_chunk
'
'
'
)
        
)
        
yield
job
transforms
.
add
def
run_visual_metrics
(
config
jobs
)
:
    
for
job
in
jobs
:
        
dep_job
=
job
.
pop
(
'
primary
-
dependency
'
None
)
        
if
dep_job
is
not
None
:
            
platform
=
dep_job
.
task
[
'
extra
'
]
[
'
treeherder
-
platform
'
]
            
job
[
'
dependencies
'
]
=
{
dep_job
.
label
:
dep_job
.
label
}
            
job
[
'
fetches
'
]
[
dep_job
.
label
]
=
[
{
                
'
artifact
'
:
'
browsertime
-
results
.
tgz
'
                
'
extract
'
:
True
            
}
]
            
job
.
setdefault
(
'
attributes
'
{
}
)
            
job
[
'
attributes
'
]
[
'
artifact_prefix
'
]
=
'
public
/
test_info
'
            
job
[
'
label
'
]
=
LABEL
.
format
(
platform
=
platform
label
=
dep_job
.
label
)
            
treeherder_info
=
dict
(
dep_job
.
task
[
'
extra
'
]
[
'
treeherder
'
]
)
            
job
[
'
treeherder
'
]
[
'
platform
'
]
=
platform
            
job
[
'
treeherder
'
]
[
'
symbol
'
]
=
SYMBOL
.
format
(
                
groupSymbol
=
treeherder_info
[
'
groupSymbol
'
]
                
symbol
=
treeherder_info
[
'
symbol
'
]
            
)
            
attributes
=
dict
(
dep_job
.
attributes
)
            
job
[
'
run
-
on
-
projects
'
]
=
attributes
[
'
run_on_projects
'
]
            
job
[
'
run
-
on
-
tasks
-
for
'
]
=
attributes
.
get
(
'
run_on_tasks_for
'
[
]
)
            
del
job
[
'
dependent
-
tasks
'
]
            
yield
job
