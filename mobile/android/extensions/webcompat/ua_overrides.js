const
UAOverrides
=
{
universal
:
[
{
matches
:
[
"
*
:
/
/
webcompat
-
addon
-
testcases
.
schub
.
io
/
*
"
]
uaTransformer
:
(
originalUA
)
=
>
{
let
prefix
=
originalUA
.
substr
(
0
originalUA
.
indexOf
(
"
)
"
)
+
1
)
;
return
{
prefix
}
AppleWebKit
/
537
.
36
(
KHTML
like
Gecko
)
Chrome
/
54
.
0
.
2840
.
98
Safari
/
537
.
36
;
}
}
]
desktop
:
[
]
android
:
[
{
matches
:
[
"
*
:
/
/
m
.
imgur
.
com
/
*
"
]
uaTransformer
:
(
originalUA
)
=
>
{
let
prefix
=
originalUA
.
substr
(
0
originalUA
.
indexOf
(
"
)
"
)
+
1
)
;
return
prefix
+
"
AppleWebKit
/
537
.
36
(
KHTML
like
Gecko
)
Chrome
/
68
.
0
.
3440
.
85
Mobile
Safari
/
537
.
36
"
;
}
}
{
matches
:
[
"
*
:
/
/
sites
.
google
.
com
/
*
"
]
uaTransformer
:
(
originalUA
)
=
>
{
return
originalUA
+
"
Chrome
/
68
.
0
.
3440
.
85
Mobile
Safari
/
537
.
366
"
;
}
}
{
matches
:
[
"
*
:
/
/
tieba
.
baidu
.
com
/
*
"
"
*
:
/
/
tiebac
.
baidu
.
com
/
*
"
]
uaTransformer
:
(
originalUA
)
=
>
{
return
originalUA
+
"
AppleWebKit
/
537
.
36
(
KHTML
like
Gecko
)
"
;
}
}
]
}
;
let
activeListeners
=
[
]
;
function
buildAndRegisterListener
(
matches
transformer
)
{
let
listener
=
(
details
)
=
>
{
for
(
var
header
of
details
.
requestHeaders
)
{
if
(
header
.
name
.
toLowerCase
(
)
=
=
=
"
user
-
agent
"
)
{
header
.
value
=
transformer
(
header
.
value
)
;
}
}
return
{
requestHeaders
:
details
.
requestHeaders
}
;
}
;
browser
.
webRequest
.
onBeforeSendHeaders
.
addListener
(
listener
{
urls
:
matches
}
[
"
blocking
"
"
requestHeaders
"
]
)
;
activeListeners
.
push
(
listener
)
;
}
async
function
registerUAOverrides
(
)
{
let
platform
=
"
desktop
"
;
let
platformInfo
=
await
browser
.
runtime
.
getPlatformInfo
(
)
;
if
(
platformInfo
.
os
=
=
"
android
"
)
{
platform
=
"
android
"
;
}
let
targetOverrides
=
UAOverrides
.
universal
.
concat
(
UAOverrides
[
platform
]
)
;
targetOverrides
.
forEach
(
(
override
)
=
>
{
buildAndRegisterListener
(
override
.
matches
override
.
uaTransformer
)
;
}
)
;
}
function
unregisterUAOverrides
(
)
{
activeListeners
.
forEach
(
(
listener
)
=
>
{
browser
.
webRequest
.
onBeforeSendHeaders
.
removeListener
(
listener
)
;
}
)
;
activeListeners
=
[
]
;
}
const
OVERRIDE_PREF
=
"
perform_ua_overrides
"
;
function
checkOverridePref
(
)
{
browser
.
aboutConfigPrefs
.
getPref
(
OVERRIDE_PREF
)
.
then
(
value
=
>
{
if
(
value
=
=
=
undefined
)
{
browser
.
aboutConfigPrefs
.
setPref
(
OVERRIDE_PREF
true
)
;
}
else
if
(
value
=
=
=
false
)
{
unregisterUAOverrides
(
)
;
}
else
{
registerUAOverrides
(
)
;
}
}
)
;
}
browser
.
aboutConfigPrefs
.
onPrefChange
.
addListener
(
checkOverridePref
OVERRIDE_PREF
)
;
checkOverridePref
(
)
;
