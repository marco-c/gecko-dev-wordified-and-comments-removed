"
use
strict
"
;
const
{
Management
:
{
global
:
{
windowTracker
}
}
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Extension
.
jsm
"
null
)
;
function
getNativeWindow
(
)
{
return
windowTracker
.
topWindow
.
NativeWindow
;
}
const
clickHandlers
=
new
ExtensionCommon
.
EventEmitter
(
)
;
const
menuItem
=
getNativeWindow
(
)
.
menu
.
add
(
{
name
:
"
Report
site
issue
"
callback
:
(
)
=
>
{
clickHandlers
.
emit
(
"
click
"
)
;
}
enabled
:
false
visible
:
false
}
)
;
this
.
nativeMenu
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
return
{
nativeMenu
:
{
onClicked
:
new
ExtensionCommon
.
EventManager
(
{
context
name
:
"
nativeMenu
.
onClicked
"
register
:
(
fire
)
=
>
{
const
callback
=
(
)
=
>
{
fire
.
async
(
)
.
catch
(
(
)
=
>
{
}
)
;
}
;
clickHandlers
.
on
(
"
click
"
callback
)
;
return
(
)
=
>
{
clickHandlers
.
off
(
"
click
"
callback
)
;
}
;
}
}
)
.
api
(
)
async
disable
(
)
{
getNativeWindow
(
)
.
menu
.
update
(
menuItem
{
enabled
:
false
}
)
;
}
async
enable
(
)
{
getNativeWindow
(
)
.
menu
.
update
(
menuItem
{
enabled
:
true
}
)
;
}
async
hide
(
)
{
getNativeWindow
(
)
.
menu
.
update
(
menuItem
{
visible
:
false
}
)
;
}
async
show
(
)
{
getNativeWindow
(
)
.
menu
.
update
(
menuItem
{
visible
:
true
}
)
;
}
async
setLabel
(
label
)
{
getNativeWindow
(
)
.
menu
.
update
(
menuItem
{
name
:
label
}
)
;
}
}
}
;
}
}
;
