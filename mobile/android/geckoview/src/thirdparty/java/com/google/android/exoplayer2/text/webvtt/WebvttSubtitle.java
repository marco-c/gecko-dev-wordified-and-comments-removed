package
com
.
google
.
android
.
exoplayer2
.
text
.
webvtt
;
import
android
.
text
.
SpannableStringBuilder
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
Cue
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
Subtitle
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
final
class
WebvttSubtitle
implements
Subtitle
{
private
final
List
<
WebvttCue
>
cues
;
private
final
int
numCues
;
private
final
long
[
]
cueTimesUs
;
private
final
long
[
]
sortedCueTimesUs
;
public
WebvttSubtitle
(
List
<
WebvttCue
>
cues
)
{
this
.
cues
=
cues
;
numCues
=
cues
.
size
(
)
;
cueTimesUs
=
new
long
[
2
*
numCues
]
;
for
(
int
cueIndex
=
0
;
cueIndex
<
numCues
;
cueIndex
+
+
)
{
WebvttCue
cue
=
cues
.
get
(
cueIndex
)
;
int
arrayIndex
=
cueIndex
*
2
;
cueTimesUs
[
arrayIndex
]
=
cue
.
startTime
;
cueTimesUs
[
arrayIndex
+
1
]
=
cue
.
endTime
;
}
sortedCueTimesUs
=
Arrays
.
copyOf
(
cueTimesUs
cueTimesUs
.
length
)
;
Arrays
.
sort
(
sortedCueTimesUs
)
;
}
Override
public
int
getNextEventTimeIndex
(
long
timeUs
)
{
int
index
=
Util
.
binarySearchCeil
(
sortedCueTimesUs
timeUs
false
false
)
;
return
index
<
sortedCueTimesUs
.
length
?
index
:
C
.
INDEX_UNSET
;
}
Override
public
int
getEventTimeCount
(
)
{
return
sortedCueTimesUs
.
length
;
}
Override
public
long
getEventTime
(
int
index
)
{
Assertions
.
checkArgument
(
index
>
=
0
)
;
Assertions
.
checkArgument
(
index
<
sortedCueTimesUs
.
length
)
;
return
sortedCueTimesUs
[
index
]
;
}
Override
public
List
<
Cue
>
getCues
(
long
timeUs
)
{
ArrayList
<
Cue
>
list
=
null
;
WebvttCue
firstNormalCue
=
null
;
SpannableStringBuilder
normalCueTextBuilder
=
null
;
for
(
int
i
=
0
;
i
<
numCues
;
i
+
+
)
{
if
(
(
cueTimesUs
[
i
*
2
]
<
=
timeUs
)
&
&
(
timeUs
<
cueTimesUs
[
i
*
2
+
1
]
)
)
{
if
(
list
=
=
null
)
{
list
=
new
ArrayList
<
>
(
)
;
}
WebvttCue
cue
=
cues
.
get
(
i
)
;
if
(
cue
.
isNormalCue
(
)
)
{
if
(
firstNormalCue
=
=
null
)
{
firstNormalCue
=
cue
;
}
else
if
(
normalCueTextBuilder
=
=
null
)
{
normalCueTextBuilder
=
new
SpannableStringBuilder
(
)
;
normalCueTextBuilder
.
append
(
firstNormalCue
.
text
)
.
append
(
"
\
n
"
)
.
append
(
cue
.
text
)
;
}
else
{
normalCueTextBuilder
.
append
(
"
\
n
"
)
.
append
(
cue
.
text
)
;
}
}
else
{
list
.
add
(
cue
)
;
}
}
}
if
(
normalCueTextBuilder
!
=
null
)
{
list
.
add
(
new
WebvttCue
(
normalCueTextBuilder
)
)
;
}
else
if
(
firstNormalCue
!
=
null
)
{
list
.
add
(
firstNormalCue
)
;
}
if
(
list
!
=
null
)
{
return
list
;
}
else
{
return
Collections
.
emptyList
(
)
;
}
}
}
