package
com
.
google
.
android
.
exoplayer2
.
text
.
webvtt
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
SubtitleDecoderException
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
java
.
util
.
regex
.
Matcher
;
import
java
.
util
.
regex
.
Pattern
;
public
final
class
WebvttParserUtil
{
private
static
final
Pattern
COMMENT
=
Pattern
.
compile
(
"
^
NOTE
(
(
\
u0020
|
\
u0009
)
.
*
)
?
"
)
;
private
static
final
Pattern
HEADER
=
Pattern
.
compile
(
"
^
\
uFEFF
?
WEBVTT
(
(
\
u0020
|
\
u0009
)
.
*
)
?
"
)
;
private
WebvttParserUtil
(
)
{
}
public
static
void
validateWebvttHeaderLine
(
ParsableByteArray
input
)
throws
SubtitleDecoderException
{
String
line
=
input
.
readLine
(
)
;
if
(
line
=
=
null
|
|
!
HEADER
.
matcher
(
line
)
.
matches
(
)
)
{
throw
new
SubtitleDecoderException
(
"
Expected
WEBVTT
.
Got
"
+
line
)
;
}
}
public
static
long
parseTimestampUs
(
String
timestamp
)
throws
NumberFormatException
{
long
value
=
0
;
String
[
]
parts
=
timestamp
.
split
(
"
\
\
.
"
2
)
;
String
[
]
subparts
=
parts
[
0
]
.
split
(
"
:
"
)
;
for
(
String
subpart
:
subparts
)
{
value
=
value
*
60
+
Long
.
parseLong
(
subpart
)
;
}
return
(
value
*
1000
+
Long
.
parseLong
(
parts
[
1
]
)
)
*
1000
;
}
public
static
float
parsePercentage
(
String
s
)
throws
NumberFormatException
{
if
(
!
s
.
endsWith
(
"
%
"
)
)
{
throw
new
NumberFormatException
(
"
Percentages
must
end
with
%
"
)
;
}
return
Float
.
parseFloat
(
s
.
substring
(
0
s
.
length
(
)
-
1
)
)
/
100
;
}
public
static
Matcher
findNextCueHeader
(
ParsableByteArray
input
)
{
String
line
;
while
(
(
line
=
input
.
readLine
(
)
)
!
=
null
)
{
if
(
COMMENT
.
matcher
(
line
)
.
matches
(
)
)
{
while
(
(
line
=
input
.
readLine
(
)
)
!
=
null
&
&
!
line
.
isEmpty
(
)
)
{
}
}
else
{
Matcher
cueHeaderMatcher
=
WebvttCueParser
.
CUE_HEADER_PATTERN
.
matcher
(
line
)
;
if
(
cueHeaderMatcher
.
matches
(
)
)
{
return
cueHeaderMatcher
;
}
}
}
return
null
;
}
}
