package
com
.
google
.
android
.
exoplayer2
.
upstream
;
import
android
.
support
.
annotation
.
IntDef
;
import
android
.
text
.
TextUtils
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Predicate
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
public
interface
HttpDataSource
extends
DataSource
{
interface
Factory
extends
DataSource
.
Factory
{
Override
HttpDataSource
createDataSource
(
)
;
RequestProperties
getDefaultRequestProperties
(
)
;
Deprecated
void
setDefaultRequestProperty
(
String
name
String
value
)
;
Deprecated
void
clearDefaultRequestProperty
(
String
name
)
;
Deprecated
void
clearAllDefaultRequestProperties
(
)
;
}
final
class
RequestProperties
{
private
final
Map
<
String
String
>
requestProperties
;
private
Map
<
String
String
>
requestPropertiesSnapshot
;
public
RequestProperties
(
)
{
requestProperties
=
new
HashMap
<
>
(
)
;
}
public
synchronized
void
set
(
String
name
String
value
)
{
requestPropertiesSnapshot
=
null
;
requestProperties
.
put
(
name
value
)
;
}
public
synchronized
void
set
(
Map
<
String
String
>
properties
)
{
requestPropertiesSnapshot
=
null
;
requestProperties
.
putAll
(
properties
)
;
}
public
synchronized
void
clearAndSet
(
Map
<
String
String
>
properties
)
{
requestPropertiesSnapshot
=
null
;
requestProperties
.
clear
(
)
;
requestProperties
.
putAll
(
properties
)
;
}
public
synchronized
void
remove
(
String
name
)
{
requestPropertiesSnapshot
=
null
;
requestProperties
.
remove
(
name
)
;
}
public
synchronized
void
clear
(
)
{
requestPropertiesSnapshot
=
null
;
requestProperties
.
clear
(
)
;
}
public
synchronized
Map
<
String
String
>
getSnapshot
(
)
{
if
(
requestPropertiesSnapshot
=
=
null
)
{
requestPropertiesSnapshot
=
Collections
.
unmodifiableMap
(
new
HashMap
<
>
(
requestProperties
)
)
;
}
return
requestPropertiesSnapshot
;
}
}
abstract
class
BaseFactory
implements
Factory
{
private
final
RequestProperties
defaultRequestProperties
;
public
BaseFactory
(
)
{
defaultRequestProperties
=
new
RequestProperties
(
)
;
}
Override
public
final
HttpDataSource
createDataSource
(
)
{
return
createDataSourceInternal
(
defaultRequestProperties
)
;
}
Override
public
final
RequestProperties
getDefaultRequestProperties
(
)
{
return
defaultRequestProperties
;
}
Deprecated
Override
public
final
void
setDefaultRequestProperty
(
String
name
String
value
)
{
defaultRequestProperties
.
set
(
name
value
)
;
}
Deprecated
Override
public
final
void
clearDefaultRequestProperty
(
String
name
)
{
defaultRequestProperties
.
remove
(
name
)
;
}
Deprecated
Override
public
final
void
clearAllDefaultRequestProperties
(
)
{
defaultRequestProperties
.
clear
(
)
;
}
protected
abstract
HttpDataSource
createDataSourceInternal
(
RequestProperties
defaultRequestProperties
)
;
}
Predicate
<
String
>
REJECT_PAYWALL_TYPES
=
new
Predicate
<
String
>
(
)
{
Override
public
boolean
evaluate
(
String
contentType
)
{
contentType
=
Util
.
toLowerInvariant
(
contentType
)
;
return
!
TextUtils
.
isEmpty
(
contentType
)
&
&
(
!
contentType
.
contains
(
"
text
"
)
|
|
contentType
.
contains
(
"
text
/
vtt
"
)
)
&
&
!
contentType
.
contains
(
"
html
"
)
&
&
!
contentType
.
contains
(
"
xml
"
)
;
}
}
;
class
HttpDataSourceException
extends
IOException
{
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
TYPE_OPEN
TYPE_READ
TYPE_CLOSE
}
)
public
interface
Type
{
}
public
static
final
int
TYPE_OPEN
=
1
;
public
static
final
int
TYPE_READ
=
2
;
public
static
final
int
TYPE_CLOSE
=
3
;
Type
public
final
int
type
;
public
final
DataSpec
dataSpec
;
public
HttpDataSourceException
(
DataSpec
dataSpec
Type
int
type
)
{
super
(
)
;
this
.
dataSpec
=
dataSpec
;
this
.
type
=
type
;
}
public
HttpDataSourceException
(
String
message
DataSpec
dataSpec
Type
int
type
)
{
super
(
message
)
;
this
.
dataSpec
=
dataSpec
;
this
.
type
=
type
;
}
public
HttpDataSourceException
(
IOException
cause
DataSpec
dataSpec
Type
int
type
)
{
super
(
cause
)
;
this
.
dataSpec
=
dataSpec
;
this
.
type
=
type
;
}
public
HttpDataSourceException
(
String
message
IOException
cause
DataSpec
dataSpec
Type
int
type
)
{
super
(
message
cause
)
;
this
.
dataSpec
=
dataSpec
;
this
.
type
=
type
;
}
}
final
class
InvalidContentTypeException
extends
HttpDataSourceException
{
public
final
String
contentType
;
public
InvalidContentTypeException
(
String
contentType
DataSpec
dataSpec
)
{
super
(
"
Invalid
content
type
:
"
+
contentType
dataSpec
TYPE_OPEN
)
;
this
.
contentType
=
contentType
;
}
}
final
class
InvalidResponseCodeException
extends
HttpDataSourceException
{
public
final
int
responseCode
;
public
final
Map
<
String
List
<
String
>
>
headerFields
;
public
InvalidResponseCodeException
(
int
responseCode
Map
<
String
List
<
String
>
>
headerFields
DataSpec
dataSpec
)
{
super
(
"
Response
code
:
"
+
responseCode
dataSpec
TYPE_OPEN
)
;
this
.
responseCode
=
responseCode
;
this
.
headerFields
=
headerFields
;
}
}
Override
long
open
(
DataSpec
dataSpec
)
throws
HttpDataSourceException
;
Override
void
close
(
)
throws
HttpDataSourceException
;
Override
int
read
(
byte
[
]
buffer
int
offset
int
readLength
)
throws
HttpDataSourceException
;
void
setRequestProperty
(
String
name
String
value
)
;
void
clearRequestProperty
(
String
name
)
;
void
clearAllRequestProperties
(
)
;
Map
<
String
List
<
String
>
>
getResponseHeaders
(
)
;
}
