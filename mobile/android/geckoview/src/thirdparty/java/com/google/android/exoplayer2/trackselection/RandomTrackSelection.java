package
com
.
google
.
android
.
exoplayer2
.
trackselection
;
import
android
.
os
.
SystemClock
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
TrackGroup
;
import
java
.
util
.
Random
;
public
final
class
RandomTrackSelection
extends
BaseTrackSelection
{
public
static
final
class
Factory
implements
TrackSelection
.
Factory
{
private
final
Random
random
;
public
Factory
(
)
{
random
=
new
Random
(
)
;
}
public
Factory
(
int
seed
)
{
random
=
new
Random
(
seed
)
;
}
Override
public
RandomTrackSelection
createTrackSelection
(
TrackGroup
group
int
.
.
.
tracks
)
{
return
new
RandomTrackSelection
(
group
tracks
random
)
;
}
}
private
final
Random
random
;
private
int
selectedIndex
;
public
RandomTrackSelection
(
TrackGroup
group
int
.
.
.
tracks
)
{
super
(
group
tracks
)
;
random
=
new
Random
(
)
;
selectedIndex
=
random
.
nextInt
(
length
)
;
}
public
RandomTrackSelection
(
TrackGroup
group
int
[
]
tracks
long
seed
)
{
this
(
group
tracks
new
Random
(
seed
)
)
;
}
public
RandomTrackSelection
(
TrackGroup
group
int
[
]
tracks
Random
random
)
{
super
(
group
tracks
)
;
this
.
random
=
random
;
selectedIndex
=
random
.
nextInt
(
length
)
;
}
Override
public
void
updateSelectedTrack
(
long
bufferedDurationUs
)
{
long
nowMs
=
SystemClock
.
elapsedRealtime
(
)
;
int
nonBlacklistedFormatCount
=
0
;
for
(
int
i
=
0
;
i
<
length
;
i
+
+
)
{
if
(
!
isBlacklisted
(
i
nowMs
)
)
{
nonBlacklistedFormatCount
+
+
;
}
}
selectedIndex
=
random
.
nextInt
(
nonBlacklistedFormatCount
)
;
if
(
nonBlacklistedFormatCount
!
=
length
)
{
nonBlacklistedFormatCount
=
0
;
for
(
int
i
=
0
;
i
<
length
;
i
+
+
)
{
if
(
!
isBlacklisted
(
i
nowMs
)
&
&
selectedIndex
=
=
nonBlacklistedFormatCount
+
+
)
{
selectedIndex
=
i
;
return
;
}
}
}
}
Override
public
int
getSelectedIndex
(
)
{
return
selectedIndex
;
}
Override
public
int
getSelectionReason
(
)
{
return
C
.
SELECTION_REASON_ADAPTIVE
;
}
Override
public
Object
getSelectionData
(
)
{
return
null
;
}
}
