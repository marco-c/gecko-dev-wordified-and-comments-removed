package
com
.
google
.
android
.
exoplayer2
.
text
.
ttml
;
import
android
.
text
.
Spannable
;
import
android
.
text
.
SpannableStringBuilder
;
import
android
.
text
.
Spanned
;
import
android
.
text
.
style
.
AbsoluteSizeSpan
;
import
android
.
text
.
style
.
AlignmentSpan
;
import
android
.
text
.
style
.
BackgroundColorSpan
;
import
android
.
text
.
style
.
ForegroundColorSpan
;
import
android
.
text
.
style
.
RelativeSizeSpan
;
import
android
.
text
.
style
.
StrikethroughSpan
;
import
android
.
text
.
style
.
StyleSpan
;
import
android
.
text
.
style
.
TypefaceSpan
;
import
android
.
text
.
style
.
UnderlineSpan
;
import
java
.
util
.
Map
;
final
class
TtmlRenderUtil
{
public
static
TtmlStyle
resolveStyle
(
TtmlStyle
style
String
[
]
styleIds
Map
<
String
TtmlStyle
>
globalStyles
)
{
if
(
style
=
=
null
&
&
styleIds
=
=
null
)
{
return
null
;
}
else
if
(
style
=
=
null
&
&
styleIds
.
length
=
=
1
)
{
return
globalStyles
.
get
(
styleIds
[
0
]
)
;
}
else
if
(
style
=
=
null
&
&
styleIds
.
length
>
1
)
{
TtmlStyle
chainedStyle
=
new
TtmlStyle
(
)
;
for
(
String
id
:
styleIds
)
{
chainedStyle
.
chain
(
globalStyles
.
get
(
id
)
)
;
}
return
chainedStyle
;
}
else
if
(
style
!
=
null
&
&
styleIds
!
=
null
&
&
styleIds
.
length
=
=
1
)
{
return
style
.
chain
(
globalStyles
.
get
(
styleIds
[
0
]
)
)
;
}
else
if
(
style
!
=
null
&
&
styleIds
!
=
null
&
&
styleIds
.
length
>
1
)
{
for
(
String
id
:
styleIds
)
{
style
.
chain
(
globalStyles
.
get
(
id
)
)
;
}
return
style
;
}
return
style
;
}
public
static
void
applyStylesToSpan
(
SpannableStringBuilder
builder
int
start
int
end
TtmlStyle
style
)
{
if
(
style
.
getStyle
(
)
!
=
TtmlStyle
.
UNSPECIFIED
)
{
builder
.
setSpan
(
new
StyleSpan
(
style
.
getStyle
(
)
)
start
end
Spanned
.
SPAN_EXCLUSIVE_EXCLUSIVE
)
;
}
if
(
style
.
isLinethrough
(
)
)
{
builder
.
setSpan
(
new
StrikethroughSpan
(
)
start
end
Spanned
.
SPAN_EXCLUSIVE_EXCLUSIVE
)
;
}
if
(
style
.
isUnderline
(
)
)
{
builder
.
setSpan
(
new
UnderlineSpan
(
)
start
end
Spanned
.
SPAN_EXCLUSIVE_EXCLUSIVE
)
;
}
if
(
style
.
hasFontColor
(
)
)
{
builder
.
setSpan
(
new
ForegroundColorSpan
(
style
.
getFontColor
(
)
)
start
end
Spannable
.
SPAN_EXCLUSIVE_EXCLUSIVE
)
;
}
if
(
style
.
hasBackgroundColor
(
)
)
{
builder
.
setSpan
(
new
BackgroundColorSpan
(
style
.
getBackgroundColor
(
)
)
start
end
Spannable
.
SPAN_EXCLUSIVE_EXCLUSIVE
)
;
}
if
(
style
.
getFontFamily
(
)
!
=
null
)
{
builder
.
setSpan
(
new
TypefaceSpan
(
style
.
getFontFamily
(
)
)
start
end
Spanned
.
SPAN_EXCLUSIVE_EXCLUSIVE
)
;
}
if
(
style
.
getTextAlign
(
)
!
=
null
)
{
builder
.
setSpan
(
new
AlignmentSpan
.
Standard
(
style
.
getTextAlign
(
)
)
start
end
Spanned
.
SPAN_EXCLUSIVE_EXCLUSIVE
)
;
}
switch
(
style
.
getFontSizeUnit
(
)
)
{
case
TtmlStyle
.
FONT_SIZE_UNIT_PIXEL
:
builder
.
setSpan
(
new
AbsoluteSizeSpan
(
(
int
)
style
.
getFontSize
(
)
true
)
start
end
Spanned
.
SPAN_EXCLUSIVE_EXCLUSIVE
)
;
break
;
case
TtmlStyle
.
FONT_SIZE_UNIT_EM
:
builder
.
setSpan
(
new
RelativeSizeSpan
(
style
.
getFontSize
(
)
)
start
end
Spanned
.
SPAN_EXCLUSIVE_EXCLUSIVE
)
;
break
;
case
TtmlStyle
.
FONT_SIZE_UNIT_PERCENT
:
builder
.
setSpan
(
new
RelativeSizeSpan
(
style
.
getFontSize
(
)
/
100
)
start
end
Spanned
.
SPAN_EXCLUSIVE_EXCLUSIVE
)
;
break
;
case
TtmlStyle
.
UNSPECIFIED
:
break
;
}
}
static
void
endParagraph
(
SpannableStringBuilder
builder
)
{
int
position
=
builder
.
length
(
)
-
1
;
while
(
position
>
=
0
&
&
builder
.
charAt
(
position
)
=
=
'
'
)
{
position
-
-
;
}
if
(
position
>
=
0
&
&
builder
.
charAt
(
position
)
!
=
'
\
n
'
)
{
builder
.
append
(
'
\
n
'
)
;
}
}
static
String
applyTextElementSpacePolicy
(
String
in
)
{
String
out
=
in
.
replaceAll
(
"
\
r
\
n
"
"
\
n
"
)
;
out
=
out
.
replaceAll
(
"
*
\
n
*
"
"
\
n
"
)
;
out
=
out
.
replaceAll
(
"
\
n
"
"
"
)
;
out
=
out
.
replaceAll
(
"
[
\
t
\
\
x0B
\
f
\
r
]
+
"
"
"
)
;
return
out
;
}
private
TtmlRenderUtil
(
)
{
}
}
