package
com
.
google
.
android
.
exoplayer2
.
extractor
.
ogg
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
final
class
VorbisBitArray
{
public
final
byte
[
]
data
;
private
final
int
limit
;
private
int
byteOffset
;
private
int
bitOffset
;
public
VorbisBitArray
(
byte
[
]
data
)
{
this
(
data
data
.
length
)
;
}
public
VorbisBitArray
(
byte
[
]
data
int
limit
)
{
this
.
data
=
data
;
this
.
limit
=
limit
*
8
;
}
public
void
reset
(
)
{
byteOffset
=
0
;
bitOffset
=
0
;
}
public
boolean
readBit
(
)
{
return
readBits
(
1
)
=
=
1
;
}
public
int
readBits
(
int
numBits
)
{
Assertions
.
checkState
(
getPosition
(
)
+
numBits
<
=
limit
)
;
if
(
numBits
=
=
0
)
{
return
0
;
}
int
result
=
0
;
int
bitCount
=
0
;
if
(
bitOffset
!
=
0
)
{
bitCount
=
Math
.
min
(
numBits
8
-
bitOffset
)
;
int
mask
=
0xFF
>
>
>
(
8
-
bitCount
)
;
result
=
(
data
[
byteOffset
]
>
>
>
bitOffset
)
&
mask
;
bitOffset
+
=
bitCount
;
if
(
bitOffset
=
=
8
)
{
byteOffset
+
+
;
bitOffset
=
0
;
}
}
if
(
numBits
-
bitCount
>
7
)
{
int
numBytes
=
(
numBits
-
bitCount
)
/
8
;
for
(
int
i
=
0
;
i
<
numBytes
;
i
+
+
)
{
result
|
=
(
data
[
byteOffset
+
+
]
&
0xFFL
)
<
<
bitCount
;
bitCount
+
=
8
;
}
}
if
(
numBits
>
bitCount
)
{
int
bitsOnNextByte
=
numBits
-
bitCount
;
int
mask
=
0xFF
>
>
>
(
8
-
bitsOnNextByte
)
;
result
|
=
(
data
[
byteOffset
]
&
mask
)
<
<
bitCount
;
bitOffset
+
=
bitsOnNextByte
;
}
return
result
;
}
public
void
skipBits
(
int
numberOfBits
)
{
Assertions
.
checkState
(
getPosition
(
)
+
numberOfBits
<
=
limit
)
;
byteOffset
+
=
numberOfBits
/
8
;
bitOffset
+
=
numberOfBits
%
8
;
if
(
bitOffset
>
7
)
{
byteOffset
+
+
;
bitOffset
-
=
8
;
}
}
public
int
getPosition
(
)
{
return
byteOffset
*
8
+
bitOffset
;
}
public
void
setPosition
(
int
position
)
{
Assertions
.
checkArgument
(
position
<
limit
&
&
position
>
=
0
)
;
byteOffset
=
position
/
8
;
bitOffset
=
position
-
(
byteOffset
*
8
)
;
}
public
int
bitsLeft
(
)
{
return
limit
-
getPosition
(
)
;
}
public
int
limit
(
)
{
return
limit
;
}
}
