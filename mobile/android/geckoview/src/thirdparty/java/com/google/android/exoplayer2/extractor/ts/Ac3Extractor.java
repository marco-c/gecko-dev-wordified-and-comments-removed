package
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
com
.
google
.
android
.
exoplayer2
.
audio
.
Ac3Util
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
Extractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorInput
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorOutput
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorsFactory
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
PositionHolder
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
SeekMap
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
.
TsPayloadReader
.
TrackIdGenerator
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
public
final
class
Ac3Extractor
implements
Extractor
{
public
static
final
ExtractorsFactory
FACTORY
=
new
ExtractorsFactory
(
)
{
Override
public
Extractor
[
]
createExtractors
(
)
{
return
new
Extractor
[
]
{
new
Ac3Extractor
(
)
}
;
}
}
;
private
static
final
int
MAX_SNIFF_BYTES
=
8
*
1024
;
private
static
final
int
AC3_SYNC_WORD
=
0x0B77
;
private
static
final
int
MAX_SYNC_FRAME_SIZE
=
2786
;
private
static
final
int
ID3_TAG
=
Util
.
getIntegerCodeForString
(
"
ID3
"
)
;
private
final
long
firstSampleTimestampUs
;
private
final
ParsableByteArray
sampleData
;
private
Ac3Reader
reader
;
private
boolean
startedPacket
;
public
Ac3Extractor
(
)
{
this
(
0
)
;
}
public
Ac3Extractor
(
long
firstSampleTimestampUs
)
{
this
.
firstSampleTimestampUs
=
firstSampleTimestampUs
;
sampleData
=
new
ParsableByteArray
(
MAX_SYNC_FRAME_SIZE
)
;
}
Override
public
boolean
sniff
(
ExtractorInput
input
)
throws
IOException
InterruptedException
{
ParsableByteArray
scratch
=
new
ParsableByteArray
(
10
)
;
int
startPosition
=
0
;
while
(
true
)
{
input
.
peekFully
(
scratch
.
data
0
10
)
;
scratch
.
setPosition
(
0
)
;
if
(
scratch
.
readUnsignedInt24
(
)
!
=
ID3_TAG
)
{
break
;
}
scratch
.
skipBytes
(
3
)
;
int
length
=
scratch
.
readSynchSafeInt
(
)
;
startPosition
+
=
10
+
length
;
input
.
advancePeekPosition
(
length
)
;
}
input
.
resetPeekPosition
(
)
;
input
.
advancePeekPosition
(
startPosition
)
;
int
headerPosition
=
startPosition
;
int
validFramesCount
=
0
;
while
(
true
)
{
input
.
peekFully
(
scratch
.
data
0
5
)
;
scratch
.
setPosition
(
0
)
;
int
syncBytes
=
scratch
.
readUnsignedShort
(
)
;
if
(
syncBytes
!
=
AC3_SYNC_WORD
)
{
validFramesCount
=
0
;
input
.
resetPeekPosition
(
)
;
if
(
+
+
headerPosition
-
startPosition
>
=
MAX_SNIFF_BYTES
)
{
return
false
;
}
input
.
advancePeekPosition
(
headerPosition
)
;
}
else
{
if
(
+
+
validFramesCount
>
=
4
)
{
return
true
;
}
int
frameSize
=
Ac3Util
.
parseAc3SyncframeSize
(
scratch
.
data
)
;
if
(
frameSize
=
=
C
.
LENGTH_UNSET
)
{
return
false
;
}
input
.
advancePeekPosition
(
frameSize
-
5
)
;
}
}
}
Override
public
void
init
(
ExtractorOutput
output
)
{
reader
=
new
Ac3Reader
(
)
;
reader
.
createTracks
(
output
new
TrackIdGenerator
(
0
1
)
)
;
output
.
endTracks
(
)
;
output
.
seekMap
(
new
SeekMap
.
Unseekable
(
C
.
TIME_UNSET
)
)
;
}
Override
public
void
seek
(
long
position
long
timeUs
)
{
startedPacket
=
false
;
reader
.
seek
(
)
;
}
Override
public
void
release
(
)
{
}
Override
public
int
read
(
ExtractorInput
input
PositionHolder
seekPosition
)
throws
IOException
InterruptedException
{
int
bytesRead
=
input
.
read
(
sampleData
.
data
0
MAX_SYNC_FRAME_SIZE
)
;
if
(
bytesRead
=
=
C
.
RESULT_END_OF_INPUT
)
{
return
RESULT_END_OF_INPUT
;
}
sampleData
.
setPosition
(
0
)
;
sampleData
.
setLimit
(
bytesRead
)
;
if
(
!
startedPacket
)
{
reader
.
packetStarted
(
firstSampleTimestampUs
true
)
;
startedPacket
=
true
;
}
reader
.
consume
(
sampleData
)
;
return
RESULT_CONTINUE
;
}
}
