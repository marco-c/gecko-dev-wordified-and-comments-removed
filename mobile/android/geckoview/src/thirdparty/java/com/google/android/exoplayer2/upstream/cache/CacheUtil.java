package
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
;
import
android
.
net
.
Uri
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSpec
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
PriorityTaskManager
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
import
java
.
util
.
NavigableSet
;
public
final
class
CacheUtil
{
public
static
class
CachingCounters
{
public
long
alreadyCachedBytes
;
public
long
downloadedBytes
;
}
public
static
String
generateKey
(
Uri
uri
)
{
return
uri
.
toString
(
)
;
}
public
static
String
getKey
(
DataSpec
dataSpec
)
{
return
dataSpec
.
key
!
=
null
?
dataSpec
.
key
:
generateKey
(
dataSpec
.
uri
)
;
}
public
static
CachingCounters
getCached
(
DataSpec
dataSpec
Cache
cache
CachingCounters
counters
)
{
try
{
return
internalCache
(
dataSpec
cache
null
null
null
0
counters
)
;
}
catch
(
IOException
|
InterruptedException
e
)
{
throw
new
IllegalStateException
(
e
)
;
}
}
public
static
CachingCounters
cache
(
DataSpec
dataSpec
Cache
cache
CacheDataSource
dataSource
byte
[
]
buffer
PriorityTaskManager
priorityTaskManager
int
priority
CachingCounters
counters
)
throws
IOException
InterruptedException
{
Assertions
.
checkNotNull
(
dataSource
)
;
Assertions
.
checkNotNull
(
buffer
)
;
return
internalCache
(
dataSpec
cache
dataSource
buffer
priorityTaskManager
priority
counters
)
;
}
private
static
CachingCounters
internalCache
(
DataSpec
dataSpec
Cache
cache
CacheDataSource
dataSource
byte
[
]
buffer
PriorityTaskManager
priorityTaskManager
int
priority
CachingCounters
counters
)
throws
IOException
InterruptedException
{
long
start
=
dataSpec
.
position
;
long
left
=
dataSpec
.
length
;
String
key
=
getKey
(
dataSpec
)
;
if
(
left
=
=
C
.
LENGTH_UNSET
)
{
left
=
cache
.
getContentLength
(
key
)
;
if
(
left
=
=
C
.
LENGTH_UNSET
)
{
left
=
Long
.
MAX_VALUE
;
}
}
if
(
counters
=
=
null
)
{
counters
=
new
CachingCounters
(
)
;
}
else
{
counters
.
alreadyCachedBytes
=
0
;
counters
.
downloadedBytes
=
0
;
}
while
(
left
>
0
)
{
long
blockLength
=
cache
.
getCachedBytes
(
key
start
left
)
;
if
(
blockLength
>
0
)
{
counters
.
alreadyCachedBytes
+
=
blockLength
;
}
else
{
blockLength
=
-
blockLength
;
if
(
dataSource
!
=
null
&
&
buffer
!
=
null
)
{
DataSpec
subDataSpec
=
new
DataSpec
(
dataSpec
.
uri
start
blockLength
=
=
Long
.
MAX_VALUE
?
C
.
LENGTH_UNSET
:
blockLength
key
)
;
long
read
=
readAndDiscard
(
subDataSpec
dataSource
buffer
priorityTaskManager
priority
)
;
counters
.
downloadedBytes
+
=
read
;
if
(
read
<
blockLength
)
{
break
;
}
}
else
if
(
blockLength
=
=
Long
.
MAX_VALUE
)
{
counters
.
downloadedBytes
=
C
.
LENGTH_UNSET
;
break
;
}
else
{
counters
.
downloadedBytes
+
=
blockLength
;
}
}
start
+
=
blockLength
;
if
(
left
!
=
Long
.
MAX_VALUE
)
{
left
-
=
blockLength
;
}
}
return
counters
;
}
private
static
long
readAndDiscard
(
DataSpec
dataSpec
DataSource
dataSource
byte
[
]
buffer
PriorityTaskManager
priorityTaskManager
int
priority
)
throws
IOException
InterruptedException
{
while
(
true
)
{
if
(
priorityTaskManager
!
=
null
)
{
priorityTaskManager
.
proceed
(
priority
)
;
}
try
{
dataSource
.
open
(
dataSpec
)
;
long
totalRead
=
0
;
while
(
true
)
{
if
(
Thread
.
interrupted
(
)
)
{
throw
new
InterruptedException
(
)
;
}
int
read
=
dataSource
.
read
(
buffer
0
buffer
.
length
)
;
if
(
read
=
=
C
.
RESULT_END_OF_INPUT
)
{
return
totalRead
;
}
totalRead
+
=
read
;
}
}
catch
(
PriorityTaskManager
.
PriorityTooLowException
exception
)
{
}
finally
{
Util
.
closeQuietly
(
dataSource
)
;
}
}
}
public
static
void
remove
(
Cache
cache
String
key
)
{
NavigableSet
<
CacheSpan
>
cachedSpans
=
cache
.
getCachedSpans
(
key
)
;
if
(
cachedSpans
=
=
null
)
{
return
;
}
for
(
CacheSpan
cachedSpan
:
cachedSpans
)
{
try
{
cache
.
removeSpan
(
cachedSpan
)
;
}
catch
(
Cache
.
CacheException
e
)
{
}
}
}
private
CacheUtil
(
)
{
}
}
