package
com
.
google
.
android
.
exoplayer2
.
source
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Handler
;
import
com
.
google
.
android
.
exoplayer2
.
ExoPlayer
;
import
com
.
google
.
android
.
exoplayer2
.
Format
;
import
com
.
google
.
android
.
exoplayer2
.
Timeline
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
Allocator
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
io
.
IOException
;
public
final
class
SingleSampleMediaSource
implements
MediaSource
{
public
interface
EventListener
{
void
onLoadError
(
int
sourceId
IOException
e
)
;
}
public
static
final
int
DEFAULT_MIN_LOADABLE_RETRY_COUNT
=
3
;
private
final
Uri
uri
;
private
final
DataSource
.
Factory
dataSourceFactory
;
private
final
Format
format
;
private
final
int
minLoadableRetryCount
;
private
final
Handler
eventHandler
;
private
final
EventListener
eventListener
;
private
final
int
eventSourceId
;
private
final
Timeline
timeline
;
public
SingleSampleMediaSource
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
Format
format
long
durationUs
)
{
this
(
uri
dataSourceFactory
format
durationUs
DEFAULT_MIN_LOADABLE_RETRY_COUNT
)
;
}
public
SingleSampleMediaSource
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
Format
format
long
durationUs
int
minLoadableRetryCount
)
{
this
(
uri
dataSourceFactory
format
durationUs
minLoadableRetryCount
null
null
0
)
;
}
public
SingleSampleMediaSource
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
Format
format
long
durationUs
int
minLoadableRetryCount
Handler
eventHandler
EventListener
eventListener
int
eventSourceId
)
{
this
.
uri
=
uri
;
this
.
dataSourceFactory
=
dataSourceFactory
;
this
.
format
=
format
;
this
.
minLoadableRetryCount
=
minLoadableRetryCount
;
this
.
eventHandler
=
eventHandler
;
this
.
eventListener
=
eventListener
;
this
.
eventSourceId
=
eventSourceId
;
timeline
=
new
SinglePeriodTimeline
(
durationUs
true
)
;
}
Override
public
void
prepareSource
(
ExoPlayer
player
boolean
isTopLevelSource
Listener
listener
)
{
listener
.
onSourceInfoRefreshed
(
timeline
null
)
;
}
Override
public
void
maybeThrowSourceInfoRefreshError
(
)
throws
IOException
{
}
Override
public
MediaPeriod
createPeriod
(
int
index
Allocator
allocator
long
positionUs
)
{
Assertions
.
checkArgument
(
index
=
=
0
)
;
return
new
SingleSampleMediaPeriod
(
uri
dataSourceFactory
format
minLoadableRetryCount
eventHandler
eventListener
eventSourceId
)
;
}
Override
public
void
releasePeriod
(
MediaPeriod
mediaPeriod
)
{
(
(
SingleSampleMediaPeriod
)
mediaPeriod
)
.
release
(
)
;
}
Override
public
void
releaseSource
(
)
{
}
}
