package
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
playlist
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Handler
;
import
android
.
os
.
SystemClock
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
com
.
google
.
android
.
exoplayer2
.
ParserException
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
AdaptiveMediaSourceEventListener
.
EventDispatcher
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
chunk
.
ChunkedTrackBlacklistUtil
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
HlsDataSourceFactory
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
playlist
.
HlsMasterPlaylist
.
HlsUrl
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
playlist
.
HlsMediaPlaylist
.
Segment
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
Loader
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
ParsingLoadable
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
UriUtil
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
IdentityHashMap
;
import
java
.
util
.
List
;
public
final
class
HlsPlaylistTracker
implements
Loader
.
Callback
<
ParsingLoadable
<
HlsPlaylist
>
>
{
public
interface
PrimaryPlaylistListener
{
void
onPrimaryPlaylistRefreshed
(
HlsMediaPlaylist
mediaPlaylist
)
;
}
public
interface
PlaylistEventListener
{
void
onPlaylistChanged
(
)
;
void
onPlaylistBlacklisted
(
HlsUrl
url
long
blacklistDurationMs
)
;
}
private
static
final
long
PRIMARY_URL_KEEPALIVE_MS
=
15000
;
private
final
Uri
initialPlaylistUri
;
private
final
HlsDataSourceFactory
dataSourceFactory
;
private
final
HlsPlaylistParser
playlistParser
;
private
final
int
minRetryCount
;
private
final
IdentityHashMap
<
HlsUrl
MediaPlaylistBundle
>
playlistBundles
;
private
final
Handler
playlistRefreshHandler
;
private
final
PrimaryPlaylistListener
primaryPlaylistListener
;
private
final
List
<
PlaylistEventListener
>
listeners
;
private
final
Loader
initialPlaylistLoader
;
private
final
EventDispatcher
eventDispatcher
;
private
HlsMasterPlaylist
masterPlaylist
;
private
HlsUrl
primaryHlsUrl
;
private
HlsMediaPlaylist
primaryUrlSnapshot
;
private
boolean
isLive
;
public
HlsPlaylistTracker
(
Uri
initialPlaylistUri
HlsDataSourceFactory
dataSourceFactory
EventDispatcher
eventDispatcher
int
minRetryCount
PrimaryPlaylistListener
primaryPlaylistListener
)
{
this
.
initialPlaylistUri
=
initialPlaylistUri
;
this
.
dataSourceFactory
=
dataSourceFactory
;
this
.
eventDispatcher
=
eventDispatcher
;
this
.
minRetryCount
=
minRetryCount
;
this
.
primaryPlaylistListener
=
primaryPlaylistListener
;
listeners
=
new
ArrayList
<
>
(
)
;
initialPlaylistLoader
=
new
Loader
(
"
HlsPlaylistTracker
:
MasterPlaylist
"
)
;
playlistParser
=
new
HlsPlaylistParser
(
)
;
playlistBundles
=
new
IdentityHashMap
<
>
(
)
;
playlistRefreshHandler
=
new
Handler
(
)
;
}
public
void
addListener
(
PlaylistEventListener
listener
)
{
listeners
.
add
(
listener
)
;
}
public
void
removeListener
(
PlaylistEventListener
listener
)
{
listeners
.
remove
(
listener
)
;
}
public
void
start
(
)
{
ParsingLoadable
<
HlsPlaylist
>
masterPlaylistLoadable
=
new
ParsingLoadable
<
>
(
dataSourceFactory
.
createDataSource
(
C
.
DATA_TYPE_MANIFEST
)
initialPlaylistUri
C
.
DATA_TYPE_MANIFEST
playlistParser
)
;
initialPlaylistLoader
.
startLoading
(
masterPlaylistLoadable
this
minRetryCount
)
;
}
public
HlsMasterPlaylist
getMasterPlaylist
(
)
{
return
masterPlaylist
;
}
public
HlsMediaPlaylist
getPlaylistSnapshot
(
HlsUrl
url
)
{
HlsMediaPlaylist
snapshot
=
playlistBundles
.
get
(
url
)
.
getPlaylistSnapshot
(
)
;
if
(
snapshot
!
=
null
)
{
maybeSetPrimaryUrl
(
url
)
;
}
return
snapshot
;
}
public
boolean
isSnapshotValid
(
HlsUrl
url
)
{
return
playlistBundles
.
get
(
url
)
.
isSnapshotValid
(
)
;
}
public
void
release
(
)
{
initialPlaylistLoader
.
release
(
)
;
for
(
MediaPlaylistBundle
bundle
:
playlistBundles
.
values
(
)
)
{
bundle
.
release
(
)
;
}
playlistRefreshHandler
.
removeCallbacksAndMessages
(
null
)
;
playlistBundles
.
clear
(
)
;
}
public
void
maybeThrowPlaylistRefreshError
(
)
throws
IOException
{
initialPlaylistLoader
.
maybeThrowError
(
)
;
if
(
primaryHlsUrl
!
=
null
)
{
playlistBundles
.
get
(
primaryHlsUrl
)
.
mediaPlaylistLoader
.
maybeThrowError
(
)
;
}
}
public
void
refreshPlaylist
(
HlsUrl
url
)
{
playlistBundles
.
get
(
url
)
.
loadPlaylist
(
)
;
}
public
boolean
isLive
(
)
{
return
isLive
;
}
Override
public
void
onLoadCompleted
(
ParsingLoadable
<
HlsPlaylist
>
loadable
long
elapsedRealtimeMs
long
loadDurationMs
)
{
HlsPlaylist
result
=
loadable
.
getResult
(
)
;
HlsMasterPlaylist
masterPlaylist
;
boolean
isMediaPlaylist
=
result
instanceof
HlsMediaPlaylist
;
if
(
isMediaPlaylist
)
{
masterPlaylist
=
HlsMasterPlaylist
.
createSingleVariantMasterPlaylist
(
result
.
baseUri
)
;
}
else
{
masterPlaylist
=
(
HlsMasterPlaylist
)
result
;
}
this
.
masterPlaylist
=
masterPlaylist
;
primaryHlsUrl
=
masterPlaylist
.
variants
.
get
(
0
)
;
ArrayList
<
HlsUrl
>
urls
=
new
ArrayList
<
>
(
)
;
urls
.
addAll
(
masterPlaylist
.
variants
)
;
urls
.
addAll
(
masterPlaylist
.
audios
)
;
urls
.
addAll
(
masterPlaylist
.
subtitles
)
;
createBundles
(
urls
)
;
MediaPlaylistBundle
primaryBundle
=
playlistBundles
.
get
(
primaryHlsUrl
)
;
if
(
isMediaPlaylist
)
{
primaryBundle
.
processLoadedPlaylist
(
(
HlsMediaPlaylist
)
result
)
;
}
else
{
primaryBundle
.
loadPlaylist
(
)
;
}
eventDispatcher
.
loadCompleted
(
loadable
.
dataSpec
C
.
DATA_TYPE_MANIFEST
elapsedRealtimeMs
loadDurationMs
loadable
.
bytesLoaded
(
)
)
;
}
Override
public
void
onLoadCanceled
(
ParsingLoadable
<
HlsPlaylist
>
loadable
long
elapsedRealtimeMs
long
loadDurationMs
boolean
released
)
{
eventDispatcher
.
loadCanceled
(
loadable
.
dataSpec
C
.
DATA_TYPE_MANIFEST
elapsedRealtimeMs
loadDurationMs
loadable
.
bytesLoaded
(
)
)
;
}
Override
public
int
onLoadError
(
ParsingLoadable
<
HlsPlaylist
>
loadable
long
elapsedRealtimeMs
long
loadDurationMs
IOException
error
)
{
boolean
isFatal
=
error
instanceof
ParserException
;
eventDispatcher
.
loadError
(
loadable
.
dataSpec
C
.
DATA_TYPE_MANIFEST
elapsedRealtimeMs
loadDurationMs
loadable
.
bytesLoaded
(
)
error
isFatal
)
;
return
isFatal
?
Loader
.
DONT_RETRY_FATAL
:
Loader
.
RETRY
;
}
private
boolean
maybeSelectNewPrimaryUrl
(
)
{
List
<
HlsUrl
>
variants
=
masterPlaylist
.
variants
;
int
variantsSize
=
variants
.
size
(
)
;
long
currentTimeMs
=
SystemClock
.
elapsedRealtime
(
)
;
for
(
int
i
=
0
;
i
<
variantsSize
;
i
+
+
)
{
MediaPlaylistBundle
bundle
=
playlistBundles
.
get
(
variants
.
get
(
i
)
)
;
if
(
currentTimeMs
>
bundle
.
blacklistUntilMs
)
{
primaryHlsUrl
=
bundle
.
playlistUrl
;
bundle
.
loadPlaylist
(
)
;
return
true
;
}
}
return
false
;
}
private
void
maybeSetPrimaryUrl
(
HlsUrl
url
)
{
if
(
!
masterPlaylist
.
variants
.
contains
(
url
)
|
|
(
primaryUrlSnapshot
!
=
null
&
&
primaryUrlSnapshot
.
hasEndTag
)
)
{
return
;
}
MediaPlaylistBundle
currentPrimaryBundle
=
playlistBundles
.
get
(
primaryHlsUrl
)
;
long
primarySnapshotAccessAgeMs
=
currentPrimaryBundle
.
lastSnapshotAccessTimeMs
-
SystemClock
.
elapsedRealtime
(
)
;
if
(
primarySnapshotAccessAgeMs
>
PRIMARY_URL_KEEPALIVE_MS
)
{
primaryHlsUrl
=
url
;
playlistBundles
.
get
(
primaryHlsUrl
)
.
loadPlaylist
(
)
;
}
}
private
void
createBundles
(
List
<
HlsUrl
>
urls
)
{
int
listSize
=
urls
.
size
(
)
;
long
currentTimeMs
=
SystemClock
.
elapsedRealtime
(
)
;
for
(
int
i
=
0
;
i
<
listSize
;
i
+
+
)
{
HlsUrl
url
=
urls
.
get
(
i
)
;
MediaPlaylistBundle
bundle
=
new
MediaPlaylistBundle
(
url
currentTimeMs
)
;
playlistBundles
.
put
(
url
bundle
)
;
}
}
private
boolean
onPlaylistUpdated
(
HlsUrl
url
HlsMediaPlaylist
newSnapshot
)
{
if
(
url
=
=
primaryHlsUrl
)
{
if
(
primaryUrlSnapshot
=
=
null
)
{
isLive
=
!
newSnapshot
.
hasEndTag
;
}
primaryUrlSnapshot
=
newSnapshot
;
primaryPlaylistListener
.
onPrimaryPlaylistRefreshed
(
newSnapshot
)
;
}
int
listenersSize
=
listeners
.
size
(
)
;
for
(
int
i
=
0
;
i
<
listenersSize
;
i
+
+
)
{
listeners
.
get
(
i
)
.
onPlaylistChanged
(
)
;
}
return
url
=
=
primaryHlsUrl
&
&
!
newSnapshot
.
hasEndTag
;
}
private
void
notifyPlaylistBlacklisting
(
HlsUrl
url
long
blacklistMs
)
{
int
listenersSize
=
listeners
.
size
(
)
;
for
(
int
i
=
0
;
i
<
listenersSize
;
i
+
+
)
{
listeners
.
get
(
i
)
.
onPlaylistBlacklisted
(
url
blacklistMs
)
;
}
}
private
HlsMediaPlaylist
getLatestPlaylistSnapshot
(
HlsMediaPlaylist
oldPlaylist
HlsMediaPlaylist
loadedPlaylist
)
{
if
(
!
loadedPlaylist
.
isNewerThan
(
oldPlaylist
)
)
{
if
(
loadedPlaylist
.
hasEndTag
)
{
return
oldPlaylist
.
copyWithEndTag
(
)
;
}
else
{
return
oldPlaylist
;
}
}
long
startTimeUs
=
getLoadedPlaylistStartTimeUs
(
oldPlaylist
loadedPlaylist
)
;
int
discontinuitySequence
=
getLoadedPlaylistDiscontinuitySequence
(
oldPlaylist
loadedPlaylist
)
;
return
loadedPlaylist
.
copyWith
(
startTimeUs
discontinuitySequence
)
;
}
private
long
getLoadedPlaylistStartTimeUs
(
HlsMediaPlaylist
oldPlaylist
HlsMediaPlaylist
loadedPlaylist
)
{
if
(
loadedPlaylist
.
hasProgramDateTime
)
{
return
loadedPlaylist
.
startTimeUs
;
}
long
primarySnapshotStartTimeUs
=
primaryUrlSnapshot
!
=
null
?
primaryUrlSnapshot
.
startTimeUs
:
0
;
if
(
oldPlaylist
=
=
null
)
{
return
primarySnapshotStartTimeUs
;
}
int
oldPlaylistSize
=
oldPlaylist
.
segments
.
size
(
)
;
Segment
firstOldOverlappingSegment
=
getFirstOldOverlappingSegment
(
oldPlaylist
loadedPlaylist
)
;
if
(
firstOldOverlappingSegment
!
=
null
)
{
return
oldPlaylist
.
startTimeUs
+
firstOldOverlappingSegment
.
relativeStartTimeUs
;
}
else
if
(
oldPlaylistSize
=
=
loadedPlaylist
.
mediaSequence
-
oldPlaylist
.
mediaSequence
)
{
return
oldPlaylist
.
getEndTimeUs
(
)
;
}
else
{
return
primarySnapshotStartTimeUs
;
}
}
private
int
getLoadedPlaylistDiscontinuitySequence
(
HlsMediaPlaylist
oldPlaylist
HlsMediaPlaylist
loadedPlaylist
)
{
if
(
loadedPlaylist
.
hasDiscontinuitySequence
)
{
return
loadedPlaylist
.
discontinuitySequence
;
}
int
primaryUrlDiscontinuitySequence
=
primaryUrlSnapshot
!
=
null
?
primaryUrlSnapshot
.
discontinuitySequence
:
0
;
if
(
oldPlaylist
=
=
null
)
{
return
primaryUrlDiscontinuitySequence
;
}
Segment
firstOldOverlappingSegment
=
getFirstOldOverlappingSegment
(
oldPlaylist
loadedPlaylist
)
;
if
(
firstOldOverlappingSegment
!
=
null
)
{
return
oldPlaylist
.
discontinuitySequence
+
firstOldOverlappingSegment
.
relativeDiscontinuitySequence
-
loadedPlaylist
.
segments
.
get
(
0
)
.
relativeDiscontinuitySequence
;
}
return
primaryUrlDiscontinuitySequence
;
}
private
static
Segment
getFirstOldOverlappingSegment
(
HlsMediaPlaylist
oldPlaylist
HlsMediaPlaylist
loadedPlaylist
)
{
int
mediaSequenceOffset
=
loadedPlaylist
.
mediaSequence
-
oldPlaylist
.
mediaSequence
;
List
<
Segment
>
oldSegments
=
oldPlaylist
.
segments
;
return
mediaSequenceOffset
<
oldSegments
.
size
(
)
?
oldSegments
.
get
(
mediaSequenceOffset
)
:
null
;
}
private
final
class
MediaPlaylistBundle
implements
Loader
.
Callback
<
ParsingLoadable
<
HlsPlaylist
>
>
Runnable
{
private
final
HlsUrl
playlistUrl
;
private
final
Loader
mediaPlaylistLoader
;
private
final
ParsingLoadable
<
HlsPlaylist
>
mediaPlaylistLoadable
;
private
HlsMediaPlaylist
playlistSnapshot
;
private
long
lastSnapshotLoadMs
;
private
long
lastSnapshotAccessTimeMs
;
private
long
blacklistUntilMs
;
private
boolean
pendingRefresh
;
public
MediaPlaylistBundle
(
HlsUrl
playlistUrl
long
initialLastSnapshotAccessTimeMs
)
{
this
.
playlistUrl
=
playlistUrl
;
lastSnapshotAccessTimeMs
=
initialLastSnapshotAccessTimeMs
;
mediaPlaylistLoader
=
new
Loader
(
"
HlsPlaylistTracker
:
MediaPlaylist
"
)
;
mediaPlaylistLoadable
=
new
ParsingLoadable
<
>
(
dataSourceFactory
.
createDataSource
(
C
.
DATA_TYPE_MANIFEST
)
UriUtil
.
resolveToUri
(
masterPlaylist
.
baseUri
playlistUrl
.
url
)
C
.
DATA_TYPE_MANIFEST
playlistParser
)
;
}
public
HlsMediaPlaylist
getPlaylistSnapshot
(
)
{
lastSnapshotAccessTimeMs
=
SystemClock
.
elapsedRealtime
(
)
;
return
playlistSnapshot
;
}
public
boolean
isSnapshotValid
(
)
{
if
(
playlistSnapshot
=
=
null
)
{
return
false
;
}
long
currentTimeMs
=
SystemClock
.
elapsedRealtime
(
)
;
long
snapshotValidityDurationMs
=
Math
.
max
(
30000
C
.
usToMs
(
playlistSnapshot
.
durationUs
)
)
;
return
playlistSnapshot
.
hasEndTag
|
|
playlistSnapshot
.
playlistType
=
=
HlsMediaPlaylist
.
PLAYLIST_TYPE_EVENT
|
|
playlistSnapshot
.
playlistType
=
=
HlsMediaPlaylist
.
PLAYLIST_TYPE_VOD
|
|
lastSnapshotLoadMs
+
snapshotValidityDurationMs
>
currentTimeMs
;
}
public
void
release
(
)
{
mediaPlaylistLoader
.
release
(
)
;
}
public
void
loadPlaylist
(
)
{
blacklistUntilMs
=
0
;
if
(
!
pendingRefresh
&
&
!
mediaPlaylistLoader
.
isLoading
(
)
)
{
mediaPlaylistLoader
.
startLoading
(
mediaPlaylistLoadable
this
minRetryCount
)
;
}
}
Override
public
void
onLoadCompleted
(
ParsingLoadable
<
HlsPlaylist
>
loadable
long
elapsedRealtimeMs
long
loadDurationMs
)
{
HlsPlaylist
result
=
loadable
.
getResult
(
)
;
if
(
result
instanceof
HlsMediaPlaylist
)
{
processLoadedPlaylist
(
(
HlsMediaPlaylist
)
result
)
;
eventDispatcher
.
loadCompleted
(
loadable
.
dataSpec
C
.
DATA_TYPE_MANIFEST
elapsedRealtimeMs
loadDurationMs
loadable
.
bytesLoaded
(
)
)
;
}
else
{
onLoadError
(
loadable
elapsedRealtimeMs
loadDurationMs
new
ParserException
(
"
Loaded
playlist
has
unexpected
type
.
"
)
)
;
}
}
Override
public
void
onLoadCanceled
(
ParsingLoadable
<
HlsPlaylist
>
loadable
long
elapsedRealtimeMs
long
loadDurationMs
boolean
released
)
{
eventDispatcher
.
loadCanceled
(
loadable
.
dataSpec
C
.
DATA_TYPE_MANIFEST
elapsedRealtimeMs
loadDurationMs
loadable
.
bytesLoaded
(
)
)
;
}
Override
public
int
onLoadError
(
ParsingLoadable
<
HlsPlaylist
>
loadable
long
elapsedRealtimeMs
long
loadDurationMs
IOException
error
)
{
boolean
isFatal
=
error
instanceof
ParserException
;
eventDispatcher
.
loadError
(
loadable
.
dataSpec
C
.
DATA_TYPE_MANIFEST
elapsedRealtimeMs
loadDurationMs
loadable
.
bytesLoaded
(
)
error
isFatal
)
;
if
(
isFatal
)
{
return
Loader
.
DONT_RETRY_FATAL
;
}
boolean
shouldRetry
=
true
;
if
(
ChunkedTrackBlacklistUtil
.
shouldBlacklist
(
error
)
)
{
blacklistUntilMs
=
SystemClock
.
elapsedRealtime
(
)
+
ChunkedTrackBlacklistUtil
.
DEFAULT_TRACK_BLACKLIST_MS
;
notifyPlaylistBlacklisting
(
playlistUrl
ChunkedTrackBlacklistUtil
.
DEFAULT_TRACK_BLACKLIST_MS
)
;
shouldRetry
=
primaryHlsUrl
=
=
playlistUrl
&
&
!
maybeSelectNewPrimaryUrl
(
)
;
}
return
shouldRetry
?
Loader
.
RETRY
:
Loader
.
DONT_RETRY
;
}
Override
public
void
run
(
)
{
pendingRefresh
=
false
;
loadPlaylist
(
)
;
}
private
void
processLoadedPlaylist
(
HlsMediaPlaylist
loadedPlaylist
)
{
HlsMediaPlaylist
oldPlaylist
=
playlistSnapshot
;
lastSnapshotLoadMs
=
SystemClock
.
elapsedRealtime
(
)
;
playlistSnapshot
=
getLatestPlaylistSnapshot
(
oldPlaylist
loadedPlaylist
)
;
long
refreshDelayUs
=
C
.
TIME_UNSET
;
if
(
playlistSnapshot
!
=
oldPlaylist
)
{
if
(
onPlaylistUpdated
(
playlistUrl
playlistSnapshot
)
)
{
refreshDelayUs
=
playlistSnapshot
.
targetDurationUs
;
}
}
else
if
(
!
playlistSnapshot
.
hasEndTag
)
{
refreshDelayUs
=
playlistSnapshot
.
targetDurationUs
/
2
;
}
if
(
refreshDelayUs
!
=
C
.
TIME_UNSET
)
{
pendingRefresh
=
playlistRefreshHandler
.
postDelayed
(
this
C
.
usToMs
(
refreshDelayUs
)
)
;
}
}
}
}
