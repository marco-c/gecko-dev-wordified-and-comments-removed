package
com
.
google
.
android
.
exoplayer2
;
import
android
.
support
.
annotation
.
Nullable
;
import
com
.
google
.
android
.
exoplayer2
.
audio
.
MediaCodecAudioRenderer
;
import
com
.
google
.
android
.
exoplayer2
.
metadata
.
MetadataRenderer
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
ConcatenatingMediaSource
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
ExtractorMediaSource
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
MergingMediaSource
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
SingleSampleMediaSource
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
TrackGroupArray
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
TextRenderer
;
import
com
.
google
.
android
.
exoplayer2
.
trackselection
.
DefaultTrackSelector
;
import
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelectionArray
;
import
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelector
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
com
.
google
.
android
.
exoplayer2
.
video
.
MediaCodecVideoRenderer
;
public
interface
ExoPlayer
{
interface
EventListener
{
void
onTimelineChanged
(
Timeline
timeline
Object
manifest
)
;
void
onTracksChanged
(
TrackGroupArray
trackGroups
TrackSelectionArray
trackSelections
)
;
void
onLoadingChanged
(
boolean
isLoading
)
;
void
onPlayerStateChanged
(
boolean
playWhenReady
int
playbackState
)
;
void
onPlayerError
(
ExoPlaybackException
error
)
;
void
onPositionDiscontinuity
(
)
;
void
onPlaybackParametersChanged
(
PlaybackParameters
playbackParameters
)
;
}
interface
ExoPlayerComponent
{
void
handleMessage
(
int
messageType
Object
message
)
throws
ExoPlaybackException
;
}
final
class
ExoPlayerMessage
{
public
final
ExoPlayerComponent
target
;
public
final
int
messageType
;
public
final
Object
message
;
public
ExoPlayerMessage
(
ExoPlayerComponent
target
int
messageType
Object
message
)
{
this
.
target
=
target
;
this
.
messageType
=
messageType
;
this
.
message
=
message
;
}
}
int
STATE_IDLE
=
1
;
int
STATE_BUFFERING
=
2
;
int
STATE_READY
=
3
;
int
STATE_ENDED
=
4
;
void
addListener
(
EventListener
listener
)
;
void
removeListener
(
EventListener
listener
)
;
int
getPlaybackState
(
)
;
void
prepare
(
MediaSource
mediaSource
)
;
void
prepare
(
MediaSource
mediaSource
boolean
resetPosition
boolean
resetState
)
;
void
setPlayWhenReady
(
boolean
playWhenReady
)
;
boolean
getPlayWhenReady
(
)
;
boolean
isLoading
(
)
;
void
seekToDefaultPosition
(
)
;
void
seekToDefaultPosition
(
int
windowIndex
)
;
void
seekTo
(
long
positionMs
)
;
void
seekTo
(
int
windowIndex
long
positionMs
)
;
void
setPlaybackParameters
(
Nullable
PlaybackParameters
playbackParameters
)
;
PlaybackParameters
getPlaybackParameters
(
)
;
void
stop
(
)
;
void
release
(
)
;
void
sendMessages
(
ExoPlayerMessage
.
.
.
messages
)
;
void
blockingSendMessages
(
ExoPlayerMessage
.
.
.
messages
)
;
int
getRendererCount
(
)
;
int
getRendererType
(
int
index
)
;
TrackGroupArray
getCurrentTrackGroups
(
)
;
TrackSelectionArray
getCurrentTrackSelections
(
)
;
Object
getCurrentManifest
(
)
;
Timeline
getCurrentTimeline
(
)
;
int
getCurrentPeriodIndex
(
)
;
int
getCurrentWindowIndex
(
)
;
long
getDuration
(
)
;
long
getCurrentPosition
(
)
;
long
getBufferedPosition
(
)
;
int
getBufferedPercentage
(
)
;
boolean
isCurrentWindowDynamic
(
)
;
boolean
isCurrentWindowSeekable
(
)
;
}
