package
com
.
google
.
android
.
exoplayer2
.
extractor
.
mp4
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorInput
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
java
.
io
.
IOException
;
final
class
TrackFragment
{
public
DefaultSampleValues
header
;
public
long
atomPosition
;
public
long
dataPosition
;
public
long
auxiliaryDataPosition
;
public
int
trunCount
;
public
int
sampleCount
;
public
long
[
]
trunDataPosition
;
public
int
[
]
trunLength
;
public
int
[
]
sampleSizeTable
;
public
int
[
]
sampleCompositionTimeOffsetTable
;
public
long
[
]
sampleDecodingTimeTable
;
public
boolean
[
]
sampleIsSyncFrameTable
;
public
boolean
definesEncryptionData
;
public
boolean
[
]
sampleHasSubsampleEncryptionTable
;
public
TrackEncryptionBox
trackEncryptionBox
;
public
int
sampleEncryptionDataLength
;
public
ParsableByteArray
sampleEncryptionData
;
public
boolean
sampleEncryptionDataNeedsFill
;
public
long
nextFragmentDecodeTime
;
public
void
reset
(
)
{
trunCount
=
0
;
nextFragmentDecodeTime
=
0
;
definesEncryptionData
=
false
;
sampleEncryptionDataNeedsFill
=
false
;
trackEncryptionBox
=
null
;
}
public
void
initTables
(
int
trunCount
int
sampleCount
)
{
this
.
trunCount
=
trunCount
;
this
.
sampleCount
=
sampleCount
;
if
(
trunLength
=
=
null
|
|
trunLength
.
length
<
trunCount
)
{
trunDataPosition
=
new
long
[
trunCount
]
;
trunLength
=
new
int
[
trunCount
]
;
}
if
(
sampleSizeTable
=
=
null
|
|
sampleSizeTable
.
length
<
sampleCount
)
{
int
tableSize
=
(
sampleCount
*
125
)
/
100
;
sampleSizeTable
=
new
int
[
tableSize
]
;
sampleCompositionTimeOffsetTable
=
new
int
[
tableSize
]
;
sampleDecodingTimeTable
=
new
long
[
tableSize
]
;
sampleIsSyncFrameTable
=
new
boolean
[
tableSize
]
;
sampleHasSubsampleEncryptionTable
=
new
boolean
[
tableSize
]
;
}
}
public
void
initEncryptionData
(
int
length
)
{
if
(
sampleEncryptionData
=
=
null
|
|
sampleEncryptionData
.
limit
(
)
<
length
)
{
sampleEncryptionData
=
new
ParsableByteArray
(
length
)
;
}
sampleEncryptionDataLength
=
length
;
definesEncryptionData
=
true
;
sampleEncryptionDataNeedsFill
=
true
;
}
public
void
fillEncryptionData
(
ExtractorInput
input
)
throws
IOException
InterruptedException
{
input
.
readFully
(
sampleEncryptionData
.
data
0
sampleEncryptionDataLength
)
;
sampleEncryptionData
.
setPosition
(
0
)
;
sampleEncryptionDataNeedsFill
=
false
;
}
public
void
fillEncryptionData
(
ParsableByteArray
source
)
{
source
.
readBytes
(
sampleEncryptionData
.
data
0
sampleEncryptionDataLength
)
;
sampleEncryptionData
.
setPosition
(
0
)
;
sampleEncryptionDataNeedsFill
=
false
;
}
public
long
getSamplePresentationTime
(
int
index
)
{
return
sampleDecodingTimeTable
[
index
]
+
sampleCompositionTimeOffsetTable
[
index
]
;
}
}
