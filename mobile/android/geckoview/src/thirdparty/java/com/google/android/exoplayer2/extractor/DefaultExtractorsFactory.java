package
com
.
google
.
android
.
exoplayer2
.
extractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
flv
.
FlvExtractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
mkv
.
MatroskaExtractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
mp3
.
Mp3Extractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
mp4
.
FragmentedMp4Extractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
mp4
.
Mp4Extractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ogg
.
OggExtractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
.
Ac3Extractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
.
AdtsExtractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
.
DefaultTsPayloadReaderFactory
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
.
PsExtractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
.
TsExtractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
wav
.
WavExtractor
;
import
java
.
lang
.
reflect
.
Constructor
;
public
final
class
DefaultExtractorsFactory
implements
ExtractorsFactory
{
private
static
final
Constructor
<
?
extends
Extractor
>
FLAC_EXTRACTOR_CONSTRUCTOR
;
static
{
Constructor
<
?
extends
Extractor
>
flacExtractorConstructor
=
null
;
try
{
flacExtractorConstructor
=
Class
.
forName
(
"
com
.
google
.
android
.
exoplayer2
.
ext
.
flac
.
FlacExtractor
"
)
.
asSubclass
(
Extractor
.
class
)
.
getConstructor
(
)
;
}
catch
(
ClassNotFoundException
e
)
{
}
catch
(
NoSuchMethodException
e
)
{
}
FLAC_EXTRACTOR_CONSTRUCTOR
=
flacExtractorConstructor
;
}
private
MatroskaExtractor
.
Flags
int
matroskaFlags
;
private
FragmentedMp4Extractor
.
Flags
int
fragmentedMp4Flags
;
private
Mp3Extractor
.
Flags
int
mp3Flags
;
private
DefaultTsPayloadReaderFactory
.
Flags
int
tsFlags
;
public
synchronized
DefaultExtractorsFactory
setMatroskaExtractorFlags
(
MatroskaExtractor
.
Flags
int
flags
)
{
this
.
matroskaFlags
=
flags
;
return
this
;
}
public
synchronized
DefaultExtractorsFactory
setFragmentedMp4ExtractorFlags
(
FragmentedMp4Extractor
.
Flags
int
flags
)
{
this
.
fragmentedMp4Flags
=
flags
;
return
this
;
}
public
synchronized
DefaultExtractorsFactory
setMp3ExtractorFlags
(
Mp3Extractor
.
Flags
int
flags
)
{
mp3Flags
=
flags
;
return
this
;
}
public
synchronized
DefaultExtractorsFactory
setTsExtractorFlags
(
DefaultTsPayloadReaderFactory
.
Flags
int
flags
)
{
tsFlags
=
flags
;
return
this
;
}
Override
public
synchronized
Extractor
[
]
createExtractors
(
)
{
Extractor
[
]
extractors
=
new
Extractor
[
FLAC_EXTRACTOR_CONSTRUCTOR
=
=
null
?
11
:
12
]
;
extractors
[
0
]
=
new
MatroskaExtractor
(
matroskaFlags
)
;
extractors
[
1
]
=
new
FragmentedMp4Extractor
(
fragmentedMp4Flags
)
;
extractors
[
2
]
=
new
Mp4Extractor
(
)
;
extractors
[
3
]
=
new
Mp3Extractor
(
mp3Flags
)
;
extractors
[
4
]
=
new
AdtsExtractor
(
)
;
extractors
[
5
]
=
new
Ac3Extractor
(
)
;
extractors
[
6
]
=
new
TsExtractor
(
tsFlags
)
;
extractors
[
7
]
=
new
FlvExtractor
(
)
;
extractors
[
8
]
=
new
OggExtractor
(
)
;
extractors
[
9
]
=
new
PsExtractor
(
)
;
extractors
[
10
]
=
new
WavExtractor
(
)
;
if
(
FLAC_EXTRACTOR_CONSTRUCTOR
!
=
null
)
{
try
{
extractors
[
11
]
=
FLAC_EXTRACTOR_CONSTRUCTOR
.
newInstance
(
)
;
}
catch
(
Exception
e
)
{
throw
new
IllegalStateException
(
"
Unexpected
error
creating
FLAC
extractor
"
e
)
;
}
}
return
extractors
;
}
}
