package
com
.
google
.
android
.
exoplayer2
.
source
.
chunk
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
com
.
google
.
android
.
exoplayer2
.
Format
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
DefaultExtractorInput
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
Extractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorInput
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSpec
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
public
final
class
InitializationChunk
extends
Chunk
{
private
final
ChunkExtractorWrapper
extractorWrapper
;
private
volatile
int
bytesLoaded
;
private
volatile
boolean
loadCanceled
;
public
InitializationChunk
(
DataSource
dataSource
DataSpec
dataSpec
Format
trackFormat
int
trackSelectionReason
Object
trackSelectionData
ChunkExtractorWrapper
extractorWrapper
)
{
super
(
dataSource
dataSpec
C
.
DATA_TYPE_MEDIA_INITIALIZATION
trackFormat
trackSelectionReason
trackSelectionData
C
.
TIME_UNSET
C
.
TIME_UNSET
)
;
this
.
extractorWrapper
=
extractorWrapper
;
}
Override
public
long
bytesLoaded
(
)
{
return
bytesLoaded
;
}
Override
public
void
cancelLoad
(
)
{
loadCanceled
=
true
;
}
Override
public
boolean
isLoadCanceled
(
)
{
return
loadCanceled
;
}
SuppressWarnings
(
"
NonAtomicVolatileUpdate
"
)
Override
public
void
load
(
)
throws
IOException
InterruptedException
{
DataSpec
loadDataSpec
=
Util
.
getRemainderDataSpec
(
dataSpec
bytesLoaded
)
;
try
{
ExtractorInput
input
=
new
DefaultExtractorInput
(
dataSource
loadDataSpec
.
absoluteStreamPosition
dataSource
.
open
(
loadDataSpec
)
)
;
if
(
bytesLoaded
=
=
0
)
{
extractorWrapper
.
init
(
null
)
;
}
try
{
Extractor
extractor
=
extractorWrapper
.
extractor
;
int
result
=
Extractor
.
RESULT_CONTINUE
;
while
(
result
=
=
Extractor
.
RESULT_CONTINUE
&
&
!
loadCanceled
)
{
result
=
extractor
.
read
(
input
null
)
;
}
Assertions
.
checkState
(
result
!
=
Extractor
.
RESULT_SEEK
)
;
}
finally
{
bytesLoaded
=
(
int
)
(
input
.
getPosition
(
)
-
dataSpec
.
absoluteStreamPosition
)
;
}
}
finally
{
Util
.
closeQuietly
(
dataSource
)
;
}
}
}
