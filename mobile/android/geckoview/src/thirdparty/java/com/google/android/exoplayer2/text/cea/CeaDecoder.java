package
com
.
google
.
android
.
exoplayer2
.
text
.
cea
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
com
.
google
.
android
.
exoplayer2
.
Format
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
Subtitle
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
SubtitleDecoder
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
SubtitleDecoderException
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
SubtitleInputBuffer
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
SubtitleOutputBuffer
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
util
.
LinkedList
;
import
java
.
util
.
TreeSet
;
abstract
class
CeaDecoder
implements
SubtitleDecoder
{
private
static
final
int
NUM_INPUT_BUFFERS
=
10
;
private
static
final
int
NUM_OUTPUT_BUFFERS
=
2
;
private
final
LinkedList
<
SubtitleInputBuffer
>
availableInputBuffers
;
private
final
LinkedList
<
SubtitleOutputBuffer
>
availableOutputBuffers
;
private
final
TreeSet
<
SubtitleInputBuffer
>
queuedInputBuffers
;
private
SubtitleInputBuffer
dequeuedInputBuffer
;
private
long
playbackPositionUs
;
public
CeaDecoder
(
)
{
availableInputBuffers
=
new
LinkedList
<
>
(
)
;
for
(
int
i
=
0
;
i
<
NUM_INPUT_BUFFERS
;
i
+
+
)
{
availableInputBuffers
.
add
(
new
SubtitleInputBuffer
(
)
)
;
}
availableOutputBuffers
=
new
LinkedList
<
>
(
)
;
for
(
int
i
=
0
;
i
<
NUM_OUTPUT_BUFFERS
;
i
+
+
)
{
availableOutputBuffers
.
add
(
new
CeaOutputBuffer
(
this
)
)
;
}
queuedInputBuffers
=
new
TreeSet
<
>
(
)
;
}
Override
public
abstract
String
getName
(
)
;
Override
public
void
setPositionUs
(
long
positionUs
)
{
playbackPositionUs
=
positionUs
;
}
Override
public
SubtitleInputBuffer
dequeueInputBuffer
(
)
throws
SubtitleDecoderException
{
Assertions
.
checkState
(
dequeuedInputBuffer
=
=
null
)
;
if
(
availableInputBuffers
.
isEmpty
(
)
)
{
return
null
;
}
dequeuedInputBuffer
=
availableInputBuffers
.
pollFirst
(
)
;
return
dequeuedInputBuffer
;
}
Override
public
void
queueInputBuffer
(
SubtitleInputBuffer
inputBuffer
)
throws
SubtitleDecoderException
{
Assertions
.
checkArgument
(
inputBuffer
!
=
null
)
;
Assertions
.
checkArgument
(
inputBuffer
=
=
dequeuedInputBuffer
)
;
if
(
inputBuffer
.
isDecodeOnly
(
)
)
{
releaseInputBuffer
(
inputBuffer
)
;
}
else
{
queuedInputBuffers
.
add
(
inputBuffer
)
;
}
dequeuedInputBuffer
=
null
;
}
Override
public
SubtitleOutputBuffer
dequeueOutputBuffer
(
)
throws
SubtitleDecoderException
{
if
(
availableOutputBuffers
.
isEmpty
(
)
)
{
return
null
;
}
while
(
!
queuedInputBuffers
.
isEmpty
(
)
&
&
queuedInputBuffers
.
first
(
)
.
timeUs
<
=
playbackPositionUs
)
{
SubtitleInputBuffer
inputBuffer
=
queuedInputBuffers
.
pollFirst
(
)
;
if
(
inputBuffer
.
isEndOfStream
(
)
)
{
SubtitleOutputBuffer
outputBuffer
=
availableOutputBuffers
.
pollFirst
(
)
;
outputBuffer
.
addFlag
(
C
.
BUFFER_FLAG_END_OF_STREAM
)
;
releaseInputBuffer
(
inputBuffer
)
;
return
outputBuffer
;
}
decode
(
inputBuffer
)
;
if
(
isNewSubtitleDataAvailable
(
)
)
{
Subtitle
subtitle
=
createSubtitle
(
)
;
if
(
!
inputBuffer
.
isDecodeOnly
(
)
)
{
SubtitleOutputBuffer
outputBuffer
=
availableOutputBuffers
.
pollFirst
(
)
;
outputBuffer
.
setContent
(
inputBuffer
.
timeUs
subtitle
Format
.
OFFSET_SAMPLE_RELATIVE
)
;
releaseInputBuffer
(
inputBuffer
)
;
return
outputBuffer
;
}
}
releaseInputBuffer
(
inputBuffer
)
;
}
return
null
;
}
private
void
releaseInputBuffer
(
SubtitleInputBuffer
inputBuffer
)
{
inputBuffer
.
clear
(
)
;
availableInputBuffers
.
add
(
inputBuffer
)
;
}
protected
void
releaseOutputBuffer
(
SubtitleOutputBuffer
outputBuffer
)
{
outputBuffer
.
clear
(
)
;
availableOutputBuffers
.
add
(
outputBuffer
)
;
}
Override
public
void
flush
(
)
{
playbackPositionUs
=
0
;
while
(
!
queuedInputBuffers
.
isEmpty
(
)
)
{
releaseInputBuffer
(
queuedInputBuffers
.
pollFirst
(
)
)
;
}
if
(
dequeuedInputBuffer
!
=
null
)
{
releaseInputBuffer
(
dequeuedInputBuffer
)
;
dequeuedInputBuffer
=
null
;
}
}
Override
public
void
release
(
)
{
}
protected
abstract
boolean
isNewSubtitleDataAvailable
(
)
;
protected
abstract
Subtitle
createSubtitle
(
)
;
protected
abstract
void
decode
(
SubtitleInputBuffer
inputBuffer
)
;
}
