package
com
.
google
.
android
.
exoplayer2
.
trackselection
;
import
android
.
os
.
SystemClock
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
com
.
google
.
android
.
exoplayer2
.
Format
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
TrackGroup
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
chunk
.
MediaChunk
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Comparator
;
import
java
.
util
.
List
;
public
abstract
class
BaseTrackSelection
implements
TrackSelection
{
protected
final
TrackGroup
group
;
protected
final
int
length
;
protected
final
int
[
]
tracks
;
private
final
Format
[
]
formats
;
private
final
long
[
]
blacklistUntilTimes
;
private
int
hashCode
;
public
BaseTrackSelection
(
TrackGroup
group
int
.
.
.
tracks
)
{
Assertions
.
checkState
(
tracks
.
length
>
0
)
;
this
.
group
=
Assertions
.
checkNotNull
(
group
)
;
this
.
length
=
tracks
.
length
;
formats
=
new
Format
[
length
]
;
for
(
int
i
=
0
;
i
<
tracks
.
length
;
i
+
+
)
{
formats
[
i
]
=
group
.
getFormat
(
tracks
[
i
]
)
;
}
Arrays
.
sort
(
formats
new
DecreasingBandwidthComparator
(
)
)
;
this
.
tracks
=
new
int
[
length
]
;
for
(
int
i
=
0
;
i
<
length
;
i
+
+
)
{
this
.
tracks
[
i
]
=
group
.
indexOf
(
formats
[
i
]
)
;
}
blacklistUntilTimes
=
new
long
[
length
]
;
}
Override
public
final
TrackGroup
getTrackGroup
(
)
{
return
group
;
}
Override
public
final
int
length
(
)
{
return
tracks
.
length
;
}
Override
public
final
Format
getFormat
(
int
index
)
{
return
formats
[
index
]
;
}
Override
public
final
int
getIndexInTrackGroup
(
int
index
)
{
return
tracks
[
index
]
;
}
Override
public
final
int
indexOf
(
Format
format
)
{
for
(
int
i
=
0
;
i
<
length
;
i
+
+
)
{
if
(
formats
[
i
]
=
=
format
)
{
return
i
;
}
}
return
C
.
INDEX_UNSET
;
}
Override
public
final
int
indexOf
(
int
indexInTrackGroup
)
{
for
(
int
i
=
0
;
i
<
length
;
i
+
+
)
{
if
(
tracks
[
i
]
=
=
indexInTrackGroup
)
{
return
i
;
}
}
return
C
.
INDEX_UNSET
;
}
Override
public
final
Format
getSelectedFormat
(
)
{
return
formats
[
getSelectedIndex
(
)
]
;
}
Override
public
final
int
getSelectedIndexInTrackGroup
(
)
{
return
tracks
[
getSelectedIndex
(
)
]
;
}
Override
public
int
evaluateQueueSize
(
long
playbackPositionUs
List
<
?
extends
MediaChunk
>
queue
)
{
return
queue
.
size
(
)
;
}
Override
public
final
boolean
blacklist
(
int
index
long
blacklistDurationMs
)
{
long
nowMs
=
SystemClock
.
elapsedRealtime
(
)
;
boolean
canBlacklist
=
isBlacklisted
(
index
nowMs
)
;
for
(
int
i
=
0
;
i
<
length
&
&
!
canBlacklist
;
i
+
+
)
{
canBlacklist
=
i
!
=
index
&
&
!
isBlacklisted
(
i
nowMs
)
;
}
if
(
!
canBlacklist
)
{
return
false
;
}
blacklistUntilTimes
[
index
]
=
Math
.
max
(
blacklistUntilTimes
[
index
]
nowMs
+
blacklistDurationMs
)
;
return
true
;
}
protected
final
boolean
isBlacklisted
(
int
index
long
nowMs
)
{
return
blacklistUntilTimes
[
index
]
>
nowMs
;
}
Override
public
int
hashCode
(
)
{
if
(
hashCode
=
=
0
)
{
hashCode
=
31
*
System
.
identityHashCode
(
group
)
+
Arrays
.
hashCode
(
tracks
)
;
}
return
hashCode
;
}
Override
public
boolean
equals
(
Object
obj
)
{
if
(
this
=
=
obj
)
{
return
true
;
}
if
(
obj
=
=
null
|
|
getClass
(
)
!
=
obj
.
getClass
(
)
)
{
return
false
;
}
BaseTrackSelection
other
=
(
BaseTrackSelection
)
obj
;
return
group
=
=
other
.
group
&
&
Arrays
.
equals
(
tracks
other
.
tracks
)
;
}
private
static
final
class
DecreasingBandwidthComparator
implements
Comparator
<
Format
>
{
Override
public
int
compare
(
Format
a
Format
b
)
{
return
b
.
bitrate
-
a
.
bitrate
;
}
}
}
