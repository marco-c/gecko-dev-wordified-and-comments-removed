package
com
.
google
.
android
.
exoplayer2
.
upstream
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
AssetManager
;
import
android
.
net
.
Uri
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
java
.
io
.
EOFException
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
public
final
class
AssetDataSource
implements
DataSource
{
public
static
final
class
AssetDataSourceException
extends
IOException
{
public
AssetDataSourceException
(
IOException
cause
)
{
super
(
cause
)
;
}
}
private
final
AssetManager
assetManager
;
private
final
TransferListener
<
?
super
AssetDataSource
>
listener
;
private
Uri
uri
;
private
InputStream
inputStream
;
private
long
bytesRemaining
;
private
boolean
opened
;
public
AssetDataSource
(
Context
context
)
{
this
(
context
null
)
;
}
public
AssetDataSource
(
Context
context
TransferListener
<
?
super
AssetDataSource
>
listener
)
{
this
.
assetManager
=
context
.
getAssets
(
)
;
this
.
listener
=
listener
;
}
Override
public
long
open
(
DataSpec
dataSpec
)
throws
AssetDataSourceException
{
try
{
uri
=
dataSpec
.
uri
;
String
path
=
uri
.
getPath
(
)
;
if
(
path
.
startsWith
(
"
/
android_asset
/
"
)
)
{
path
=
path
.
substring
(
15
)
;
}
else
if
(
path
.
startsWith
(
"
/
"
)
)
{
path
=
path
.
substring
(
1
)
;
}
inputStream
=
assetManager
.
open
(
path
AssetManager
.
ACCESS_RANDOM
)
;
long
skipped
=
inputStream
.
skip
(
dataSpec
.
position
)
;
if
(
skipped
<
dataSpec
.
position
)
{
throw
new
EOFException
(
)
;
}
if
(
dataSpec
.
length
!
=
C
.
LENGTH_UNSET
)
{
bytesRemaining
=
dataSpec
.
length
;
}
else
{
bytesRemaining
=
inputStream
.
available
(
)
;
if
(
bytesRemaining
=
=
Integer
.
MAX_VALUE
)
{
bytesRemaining
=
C
.
LENGTH_UNSET
;
}
}
}
catch
(
IOException
e
)
{
throw
new
AssetDataSourceException
(
e
)
;
}
opened
=
true
;
if
(
listener
!
=
null
)
{
listener
.
onTransferStart
(
this
dataSpec
)
;
}
return
bytesRemaining
;
}
Override
public
int
read
(
byte
[
]
buffer
int
offset
int
readLength
)
throws
AssetDataSourceException
{
if
(
readLength
=
=
0
)
{
return
0
;
}
else
if
(
bytesRemaining
=
=
0
)
{
return
C
.
RESULT_END_OF_INPUT
;
}
int
bytesRead
;
try
{
int
bytesToRead
=
bytesRemaining
=
=
C
.
LENGTH_UNSET
?
readLength
:
(
int
)
Math
.
min
(
bytesRemaining
readLength
)
;
bytesRead
=
inputStream
.
read
(
buffer
offset
bytesToRead
)
;
}
catch
(
IOException
e
)
{
throw
new
AssetDataSourceException
(
e
)
;
}
if
(
bytesRead
=
=
-
1
)
{
if
(
bytesRemaining
!
=
C
.
LENGTH_UNSET
)
{
throw
new
AssetDataSourceException
(
new
EOFException
(
)
)
;
}
return
C
.
RESULT_END_OF_INPUT
;
}
if
(
bytesRemaining
!
=
C
.
LENGTH_UNSET
)
{
bytesRemaining
-
=
bytesRead
;
}
if
(
listener
!
=
null
)
{
listener
.
onBytesTransferred
(
this
bytesRead
)
;
}
return
bytesRead
;
}
Override
public
Uri
getUri
(
)
{
return
uri
;
}
Override
public
void
close
(
)
throws
AssetDataSourceException
{
uri
=
null
;
try
{
if
(
inputStream
!
=
null
)
{
inputStream
.
close
(
)
;
}
}
catch
(
IOException
e
)
{
throw
new
AssetDataSourceException
(
e
)
;
}
finally
{
inputStream
=
null
;
if
(
opened
)
{
opened
=
false
;
if
(
listener
!
=
null
)
{
listener
.
onTransferEnd
(
this
)
;
}
}
}
}
}
