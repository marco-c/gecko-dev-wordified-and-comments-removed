package
com
.
google
.
android
.
exoplayer2
;
import
android
.
annotation
.
TargetApi
;
import
android
.
content
.
Context
;
import
android
.
media
.
AudioFormat
;
import
android
.
media
.
AudioManager
;
import
android
.
media
.
MediaCodec
;
import
android
.
media
.
MediaFormat
;
import
android
.
support
.
annotation
.
IntDef
;
import
android
.
view
.
Surface
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
UUID
;
public
final
class
C
{
private
C
(
)
{
}
public
static
final
long
TIME_END_OF_SOURCE
=
Long
.
MIN_VALUE
;
public
static
final
long
TIME_UNSET
=
Long
.
MIN_VALUE
+
1
;
public
static
final
int
INDEX_UNSET
=
-
1
;
public
static
final
int
POSITION_UNSET
=
-
1
;
public
static
final
int
LENGTH_UNSET
=
-
1
;
public
static
final
long
MICROS_PER_SECOND
=
1000000L
;
public
static
final
long
NANOS_PER_SECOND
=
1000000000L
;
public
static
final
String
UTF8_NAME
=
"
UTF
-
8
"
;
public
static
final
String
UTF16_NAME
=
"
UTF
-
16
"
;
public
static
final
String
SERIF_NAME
=
"
serif
"
;
public
static
final
String
SANS_SERIF_NAME
=
"
sans
-
serif
"
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
CRYPTO_MODE_UNENCRYPTED
CRYPTO_MODE_AES_CTR
CRYPTO_MODE_AES_CBC
}
)
public
interface
CryptoMode
{
}
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
CRYPTO_MODE_UNENCRYPTED
=
MediaCodec
.
CRYPTO_MODE_UNENCRYPTED
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
CRYPTO_MODE_AES_CTR
=
MediaCodec
.
CRYPTO_MODE_AES_CTR
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
CRYPTO_MODE_AES_CBC
=
MediaCodec
.
CRYPTO_MODE_AES_CBC
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
AUDIO_SESSION_ID_UNSET
=
AudioManager
.
AUDIO_SESSION_ID_GENERATE
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
Format
.
NO_VALUE
ENCODING_INVALID
ENCODING_PCM_8BIT
ENCODING_PCM_16BIT
ENCODING_PCM_24BIT
ENCODING_PCM_32BIT
ENCODING_AC3
ENCODING_E_AC3
ENCODING_DTS
ENCODING_DTS_HD
}
)
public
interface
Encoding
{
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
Format
.
NO_VALUE
ENCODING_INVALID
ENCODING_PCM_8BIT
ENCODING_PCM_16BIT
ENCODING_PCM_24BIT
ENCODING_PCM_32BIT
}
)
public
interface
PcmEncoding
{
}
public
static
final
int
ENCODING_INVALID
=
AudioFormat
.
ENCODING_INVALID
;
public
static
final
int
ENCODING_PCM_8BIT
=
AudioFormat
.
ENCODING_PCM_8BIT
;
public
static
final
int
ENCODING_PCM_16BIT
=
AudioFormat
.
ENCODING_PCM_16BIT
;
public
static
final
int
ENCODING_PCM_24BIT
=
0x80000000
;
public
static
final
int
ENCODING_PCM_32BIT
=
0x40000000
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
ENCODING_AC3
=
AudioFormat
.
ENCODING_AC3
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
ENCODING_E_AC3
=
AudioFormat
.
ENCODING_E_AC3
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
ENCODING_DTS
=
AudioFormat
.
ENCODING_DTS
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
ENCODING_DTS_HD
=
AudioFormat
.
ENCODING_DTS_HD
;
SuppressWarnings
(
{
"
InlinedApi
"
"
deprecation
"
}
)
public
static
final
int
CHANNEL_OUT_7POINT1_SURROUND
=
Util
.
SDK_INT
<
23
?
AudioFormat
.
CHANNEL_OUT_7POINT1
:
AudioFormat
.
CHANNEL_OUT_7POINT1_SURROUND
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
STREAM_TYPE_ALARM
STREAM_TYPE_MUSIC
STREAM_TYPE_NOTIFICATION
STREAM_TYPE_RING
STREAM_TYPE_SYSTEM
STREAM_TYPE_VOICE_CALL
}
)
public
interface
StreamType
{
}
public
static
final
int
STREAM_TYPE_ALARM
=
AudioManager
.
STREAM_ALARM
;
public
static
final
int
STREAM_TYPE_MUSIC
=
AudioManager
.
STREAM_MUSIC
;
public
static
final
int
STREAM_TYPE_NOTIFICATION
=
AudioManager
.
STREAM_NOTIFICATION
;
public
static
final
int
STREAM_TYPE_RING
=
AudioManager
.
STREAM_RING
;
public
static
final
int
STREAM_TYPE_SYSTEM
=
AudioManager
.
STREAM_SYSTEM
;
public
static
final
int
STREAM_TYPE_VOICE_CALL
=
AudioManager
.
STREAM_VOICE_CALL
;
public
static
final
int
STREAM_TYPE_DEFAULT
=
STREAM_TYPE_MUSIC
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
flag
=
true
value
=
{
BUFFER_FLAG_KEY_FRAME
BUFFER_FLAG_END_OF_STREAM
BUFFER_FLAG_ENCRYPTED
BUFFER_FLAG_DECODE_ONLY
}
)
public
interface
BufferFlags
{
}
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
BUFFER_FLAG_KEY_FRAME
=
MediaCodec
.
BUFFER_FLAG_KEY_FRAME
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
BUFFER_FLAG_END_OF_STREAM
=
MediaCodec
.
BUFFER_FLAG_END_OF_STREAM
;
public
static
final
int
BUFFER_FLAG_ENCRYPTED
=
0x40000000
;
public
static
final
int
BUFFER_FLAG_DECODE_ONLY
=
0x80000000
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
value
=
{
VIDEO_SCALING_MODE_SCALE_TO_FIT
VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING
}
)
public
interface
VideoScalingMode
{
}
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
VIDEO_SCALING_MODE_SCALE_TO_FIT
=
MediaCodec
.
VIDEO_SCALING_MODE_SCALE_TO_FIT
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING
=
MediaCodec
.
VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING
;
public
static
final
int
VIDEO_SCALING_MODE_DEFAULT
=
VIDEO_SCALING_MODE_SCALE_TO_FIT
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
flag
=
true
value
=
{
SELECTION_FLAG_DEFAULT
SELECTION_FLAG_FORCED
SELECTION_FLAG_AUTOSELECT
}
)
public
interface
SelectionFlags
{
}
public
static
final
int
SELECTION_FLAG_DEFAULT
=
1
;
public
static
final
int
SELECTION_FLAG_FORCED
=
2
;
public
static
final
int
SELECTION_FLAG_AUTOSELECT
=
4
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
TYPE_DASH
TYPE_SS
TYPE_HLS
TYPE_OTHER
}
)
public
interface
ContentType
{
}
public
static
final
int
TYPE_DASH
=
0
;
public
static
final
int
TYPE_SS
=
1
;
public
static
final
int
TYPE_HLS
=
2
;
public
static
final
int
TYPE_OTHER
=
3
;
public
static
final
int
RESULT_END_OF_INPUT
=
-
1
;
public
static
final
int
RESULT_MAX_LENGTH_EXCEEDED
=
-
2
;
public
static
final
int
RESULT_NOTHING_READ
=
-
3
;
public
static
final
int
RESULT_BUFFER_READ
=
-
4
;
public
static
final
int
RESULT_FORMAT_READ
=
-
5
;
public
static
final
int
DATA_TYPE_UNKNOWN
=
0
;
public
static
final
int
DATA_TYPE_MEDIA
=
1
;
public
static
final
int
DATA_TYPE_MEDIA_INITIALIZATION
=
2
;
public
static
final
int
DATA_TYPE_DRM
=
3
;
public
static
final
int
DATA_TYPE_MANIFEST
=
4
;
public
static
final
int
DATA_TYPE_TIME_SYNCHRONIZATION
=
5
;
public
static
final
int
DATA_TYPE_CUSTOM_BASE
=
10000
;
public
static
final
int
TRACK_TYPE_UNKNOWN
=
-
1
;
public
static
final
int
TRACK_TYPE_DEFAULT
=
0
;
public
static
final
int
TRACK_TYPE_AUDIO
=
1
;
public
static
final
int
TRACK_TYPE_VIDEO
=
2
;
public
static
final
int
TRACK_TYPE_TEXT
=
3
;
public
static
final
int
TRACK_TYPE_METADATA
=
4
;
public
static
final
int
TRACK_TYPE_CUSTOM_BASE
=
10000
;
public
static
final
int
SELECTION_REASON_UNKNOWN
=
0
;
public
static
final
int
SELECTION_REASON_INITIAL
=
1
;
public
static
final
int
SELECTION_REASON_MANUAL
=
2
;
public
static
final
int
SELECTION_REASON_ADAPTIVE
=
3
;
public
static
final
int
SELECTION_REASON_TRICK_PLAY
=
4
;
public
static
final
int
SELECTION_REASON_CUSTOM_BASE
=
10000
;
public
static
final
int
DEFAULT_BUFFER_SEGMENT_SIZE
=
64
*
1024
;
public
static
final
int
DEFAULT_VIDEO_BUFFER_SIZE
=
200
*
DEFAULT_BUFFER_SEGMENT_SIZE
;
public
static
final
int
DEFAULT_AUDIO_BUFFER_SIZE
=
54
*
DEFAULT_BUFFER_SEGMENT_SIZE
;
public
static
final
int
DEFAULT_TEXT_BUFFER_SIZE
=
2
*
DEFAULT_BUFFER_SEGMENT_SIZE
;
public
static
final
int
DEFAULT_METADATA_BUFFER_SIZE
=
2
*
DEFAULT_BUFFER_SEGMENT_SIZE
;
public
static
final
int
DEFAULT_MUXED_BUFFER_SIZE
=
DEFAULT_VIDEO_BUFFER_SIZE
+
DEFAULT_AUDIO_BUFFER_SIZE
+
DEFAULT_TEXT_BUFFER_SIZE
;
public
static
final
UUID
UUID_NIL
=
new
UUID
(
0L
0L
)
;
public
static
final
UUID
CLEARKEY_UUID
=
new
UUID
(
0x1077EFECC0B24D02L
0xACE33C1E52E2FB4BL
)
;
public
static
final
UUID
WIDEVINE_UUID
=
new
UUID
(
0xEDEF8BA979D64ACEL
0xA3C827DCD51D21EDL
)
;
public
static
final
UUID
PLAYREADY_UUID
=
new
UUID
(
0x9A04F07998404286L
0xAB92E65BE0885F95L
)
;
public
static
final
int
MSG_SET_SURFACE
=
1
;
public
static
final
int
MSG_SET_VOLUME
=
2
;
public
static
final
int
MSG_SET_STREAM_TYPE
=
3
;
public
static
final
int
MSG_SET_SCALING_MODE
=
4
;
public
static
final
int
MSG_CUSTOM_BASE
=
10000
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
Format
.
NO_VALUE
STEREO_MODE_MONO
STEREO_MODE_TOP_BOTTOM
STEREO_MODE_LEFT_RIGHT
STEREO_MODE_STEREO_MESH
}
)
public
interface
StereoMode
{
}
public
static
final
int
STEREO_MODE_MONO
=
0
;
public
static
final
int
STEREO_MODE_TOP_BOTTOM
=
1
;
public
static
final
int
STEREO_MODE_LEFT_RIGHT
=
2
;
public
static
final
int
STEREO_MODE_STEREO_MESH
=
3
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
Format
.
NO_VALUE
COLOR_SPACE_BT709
COLOR_SPACE_BT601
COLOR_SPACE_BT2020
}
)
public
interface
ColorSpace
{
}
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
COLOR_SPACE_BT709
=
MediaFormat
.
COLOR_STANDARD_BT709
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
COLOR_SPACE_BT601
=
MediaFormat
.
COLOR_STANDARD_BT601_PAL
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
COLOR_SPACE_BT2020
=
MediaFormat
.
COLOR_STANDARD_BT2020
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
Format
.
NO_VALUE
COLOR_TRANSFER_SDR
COLOR_TRANSFER_ST2084
COLOR_TRANSFER_HLG
}
)
public
interface
ColorTransfer
{
}
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
COLOR_TRANSFER_SDR
=
MediaFormat
.
COLOR_TRANSFER_SDR_VIDEO
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
COLOR_TRANSFER_ST2084
=
MediaFormat
.
COLOR_TRANSFER_ST2084
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
COLOR_TRANSFER_HLG
=
MediaFormat
.
COLOR_TRANSFER_HLG
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
Format
.
NO_VALUE
COLOR_RANGE_LIMITED
COLOR_RANGE_FULL
}
)
public
interface
ColorRange
{
}
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
COLOR_RANGE_LIMITED
=
MediaFormat
.
COLOR_RANGE_LIMITED
;
SuppressWarnings
(
"
InlinedApi
"
)
public
static
final
int
COLOR_RANGE_FULL
=
MediaFormat
.
COLOR_RANGE_FULL
;
public
static
final
int
PRIORITY_PLAYBACK
=
0
;
public
static
final
int
PRIORITY_DOWNLOAD
=
PRIORITY_PLAYBACK
-
1000
;
public
static
long
usToMs
(
long
timeUs
)
{
return
timeUs
=
=
TIME_UNSET
?
TIME_UNSET
:
(
timeUs
/
1000
)
;
}
public
static
long
msToUs
(
long
timeMs
)
{
return
timeMs
=
=
TIME_UNSET
?
TIME_UNSET
:
(
timeMs
*
1000
)
;
}
TargetApi
(
21
)
public
static
int
generateAudioSessionIdV21
(
Context
context
)
{
return
(
(
AudioManager
)
context
.
getSystemService
(
Context
.
AUDIO_SERVICE
)
)
.
generateAudioSessionId
(
)
;
}
}
