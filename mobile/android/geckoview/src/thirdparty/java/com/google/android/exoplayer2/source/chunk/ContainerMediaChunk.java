package
com
.
google
.
android
.
exoplayer2
.
source
.
chunk
;
import
com
.
google
.
android
.
exoplayer2
.
Format
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
DefaultExtractorInput
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
Extractor
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorInput
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSpec
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
public
class
ContainerMediaChunk
extends
BaseMediaChunk
{
private
final
int
chunkCount
;
private
final
long
sampleOffsetUs
;
private
final
ChunkExtractorWrapper
extractorWrapper
;
private
volatile
int
bytesLoaded
;
private
volatile
boolean
loadCanceled
;
private
volatile
boolean
loadCompleted
;
public
ContainerMediaChunk
(
DataSource
dataSource
DataSpec
dataSpec
Format
trackFormat
int
trackSelectionReason
Object
trackSelectionData
long
startTimeUs
long
endTimeUs
int
chunkIndex
int
chunkCount
long
sampleOffsetUs
ChunkExtractorWrapper
extractorWrapper
)
{
super
(
dataSource
dataSpec
trackFormat
trackSelectionReason
trackSelectionData
startTimeUs
endTimeUs
chunkIndex
)
;
this
.
chunkCount
=
chunkCount
;
this
.
sampleOffsetUs
=
sampleOffsetUs
;
this
.
extractorWrapper
=
extractorWrapper
;
}
Override
public
int
getNextChunkIndex
(
)
{
return
chunkIndex
+
chunkCount
;
}
Override
public
boolean
isLoadCompleted
(
)
{
return
loadCompleted
;
}
Override
public
final
long
bytesLoaded
(
)
{
return
bytesLoaded
;
}
Override
public
final
void
cancelLoad
(
)
{
loadCanceled
=
true
;
}
Override
public
final
boolean
isLoadCanceled
(
)
{
return
loadCanceled
;
}
SuppressWarnings
(
"
NonAtomicVolatileUpdate
"
)
Override
public
final
void
load
(
)
throws
IOException
InterruptedException
{
DataSpec
loadDataSpec
=
Util
.
getRemainderDataSpec
(
dataSpec
bytesLoaded
)
;
try
{
ExtractorInput
input
=
new
DefaultExtractorInput
(
dataSource
loadDataSpec
.
absoluteStreamPosition
dataSource
.
open
(
loadDataSpec
)
)
;
if
(
bytesLoaded
=
=
0
)
{
BaseMediaChunkOutput
output
=
getOutput
(
)
;
output
.
setSampleOffsetUs
(
sampleOffsetUs
)
;
extractorWrapper
.
init
(
output
)
;
}
try
{
Extractor
extractor
=
extractorWrapper
.
extractor
;
int
result
=
Extractor
.
RESULT_CONTINUE
;
while
(
result
=
=
Extractor
.
RESULT_CONTINUE
&
&
!
loadCanceled
)
{
result
=
extractor
.
read
(
input
null
)
;
}
Assertions
.
checkState
(
result
!
=
Extractor
.
RESULT_SEEK
)
;
}
finally
{
bytesLoaded
=
(
int
)
(
input
.
getPosition
(
)
-
dataSpec
.
absoluteStreamPosition
)
;
}
}
finally
{
Util
.
closeQuietly
(
dataSource
)
;
}
loadCompleted
=
true
;
}
}
