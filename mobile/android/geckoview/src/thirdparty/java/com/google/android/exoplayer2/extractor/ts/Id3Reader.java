package
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
;
import
android
.
util
.
Log
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
com
.
google
.
android
.
exoplayer2
.
Format
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorOutput
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
TrackOutput
;
import
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
.
TsPayloadReader
.
TrackIdGenerator
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
MimeTypes
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
public
final
class
Id3Reader
implements
ElementaryStreamReader
{
private
static
final
String
TAG
=
"
Id3Reader
"
;
private
static
final
int
ID3_HEADER_SIZE
=
10
;
private
final
ParsableByteArray
id3Header
;
private
TrackOutput
output
;
private
boolean
writingSample
;
private
long
sampleTimeUs
;
private
int
sampleSize
;
private
int
sampleBytesRead
;
public
Id3Reader
(
)
{
id3Header
=
new
ParsableByteArray
(
ID3_HEADER_SIZE
)
;
}
Override
public
void
seek
(
)
{
writingSample
=
false
;
}
Override
public
void
createTracks
(
ExtractorOutput
extractorOutput
TrackIdGenerator
idGenerator
)
{
idGenerator
.
generateNewId
(
)
;
output
=
extractorOutput
.
track
(
idGenerator
.
getTrackId
(
)
C
.
TRACK_TYPE_METADATA
)
;
output
.
format
(
Format
.
createSampleFormat
(
idGenerator
.
getFormatId
(
)
MimeTypes
.
APPLICATION_ID3
null
Format
.
NO_VALUE
null
)
)
;
}
Override
public
void
packetStarted
(
long
pesTimeUs
boolean
dataAlignmentIndicator
)
{
if
(
!
dataAlignmentIndicator
)
{
return
;
}
writingSample
=
true
;
sampleTimeUs
=
pesTimeUs
;
sampleSize
=
0
;
sampleBytesRead
=
0
;
}
Override
public
void
consume
(
ParsableByteArray
data
)
{
if
(
!
writingSample
)
{
return
;
}
int
bytesAvailable
=
data
.
bytesLeft
(
)
;
if
(
sampleBytesRead
<
ID3_HEADER_SIZE
)
{
int
headerBytesAvailable
=
Math
.
min
(
bytesAvailable
ID3_HEADER_SIZE
-
sampleBytesRead
)
;
System
.
arraycopy
(
data
.
data
data
.
getPosition
(
)
id3Header
.
data
sampleBytesRead
headerBytesAvailable
)
;
if
(
sampleBytesRead
+
headerBytesAvailable
=
=
ID3_HEADER_SIZE
)
{
id3Header
.
setPosition
(
0
)
;
if
(
'
I
'
!
=
id3Header
.
readUnsignedByte
(
)
|
|
'
D
'
!
=
id3Header
.
readUnsignedByte
(
)
|
|
'
3
'
!
=
id3Header
.
readUnsignedByte
(
)
)
{
Log
.
w
(
TAG
"
Discarding
invalid
ID3
tag
"
)
;
writingSample
=
false
;
return
;
}
id3Header
.
skipBytes
(
3
)
;
sampleSize
=
ID3_HEADER_SIZE
+
id3Header
.
readSynchSafeInt
(
)
;
}
}
int
bytesToWrite
=
Math
.
min
(
bytesAvailable
sampleSize
-
sampleBytesRead
)
;
output
.
sampleData
(
data
bytesToWrite
)
;
sampleBytesRead
+
=
bytesToWrite
;
}
Override
public
void
packetFinished
(
)
{
if
(
!
writingSample
|
|
sampleSize
=
=
0
|
|
sampleBytesRead
!
=
sampleSize
)
{
return
;
}
output
.
sampleMetadata
(
sampleTimeUs
C
.
BUFFER_FLAG_KEY_FRAME
sampleSize
0
null
)
;
writingSample
=
false
;
}
}
