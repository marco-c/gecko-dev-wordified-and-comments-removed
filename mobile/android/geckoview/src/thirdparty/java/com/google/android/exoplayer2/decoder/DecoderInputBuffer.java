package
com
.
google
.
android
.
exoplayer2
.
decoder
;
import
android
.
support
.
annotation
.
IntDef
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
nio
.
ByteBuffer
;
public
class
DecoderInputBuffer
extends
Buffer
{
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
BUFFER_REPLACEMENT_MODE_DISABLED
BUFFER_REPLACEMENT_MODE_NORMAL
BUFFER_REPLACEMENT_MODE_DIRECT
}
)
public
interface
BufferReplacementMode
{
}
public
static
final
int
BUFFER_REPLACEMENT_MODE_DISABLED
=
0
;
public
static
final
int
BUFFER_REPLACEMENT_MODE_NORMAL
=
1
;
public
static
final
int
BUFFER_REPLACEMENT_MODE_DIRECT
=
2
;
public
final
CryptoInfo
cryptoInfo
;
public
ByteBuffer
data
;
public
long
timeUs
;
BufferReplacementMode
private
final
int
bufferReplacementMode
;
public
static
DecoderInputBuffer
newFlagsOnlyInstance
(
)
{
return
new
DecoderInputBuffer
(
BUFFER_REPLACEMENT_MODE_DISABLED
)
;
}
public
DecoderInputBuffer
(
BufferReplacementMode
int
bufferReplacementMode
)
{
this
.
cryptoInfo
=
new
CryptoInfo
(
)
;
this
.
bufferReplacementMode
=
bufferReplacementMode
;
}
public
void
ensureSpaceForWrite
(
int
length
)
throws
IllegalStateException
{
if
(
data
=
=
null
)
{
data
=
createReplacementByteBuffer
(
length
)
;
return
;
}
int
capacity
=
data
.
capacity
(
)
;
int
position
=
data
.
position
(
)
;
int
requiredCapacity
=
position
+
length
;
if
(
capacity
>
=
requiredCapacity
)
{
return
;
}
ByteBuffer
newData
=
createReplacementByteBuffer
(
requiredCapacity
)
;
if
(
position
>
0
)
{
data
.
position
(
0
)
;
data
.
limit
(
position
)
;
newData
.
put
(
data
)
;
}
data
=
newData
;
}
public
final
boolean
isFlagsOnly
(
)
{
return
data
=
=
null
&
&
bufferReplacementMode
=
=
BUFFER_REPLACEMENT_MODE_DISABLED
;
}
public
final
boolean
isEncrypted
(
)
{
return
getFlag
(
C
.
BUFFER_FLAG_ENCRYPTED
)
;
}
public
final
void
flip
(
)
{
data
.
flip
(
)
;
}
Override
public
void
clear
(
)
{
super
.
clear
(
)
;
if
(
data
!
=
null
)
{
data
.
clear
(
)
;
}
}
private
ByteBuffer
createReplacementByteBuffer
(
int
requiredCapacity
)
{
if
(
bufferReplacementMode
=
=
BUFFER_REPLACEMENT_MODE_NORMAL
)
{
return
ByteBuffer
.
allocate
(
requiredCapacity
)
;
}
else
if
(
bufferReplacementMode
=
=
BUFFER_REPLACEMENT_MODE_DIRECT
)
{
return
ByteBuffer
.
allocateDirect
(
requiredCapacity
)
;
}
else
{
int
currentCapacity
=
data
=
=
null
?
0
:
data
.
capacity
(
)
;
throw
new
IllegalStateException
(
"
Buffer
too
small
(
"
+
currentCapacity
+
"
<
"
+
requiredCapacity
+
"
)
"
)
;
}
}
}
