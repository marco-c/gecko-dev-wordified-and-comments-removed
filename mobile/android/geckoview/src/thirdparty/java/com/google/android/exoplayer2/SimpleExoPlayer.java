package
com
.
google
.
android
.
exoplayer2
;
import
android
.
annotation
.
TargetApi
;
import
android
.
graphics
.
SurfaceTexture
;
import
android
.
media
.
MediaCodec
;
import
android
.
media
.
PlaybackParams
;
import
android
.
os
.
Handler
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
util
.
Log
;
import
android
.
view
.
Surface
;
import
android
.
view
.
SurfaceHolder
;
import
android
.
view
.
SurfaceView
;
import
android
.
view
.
TextureView
;
import
com
.
google
.
android
.
exoplayer2
.
audio
.
AudioRendererEventListener
;
import
com
.
google
.
android
.
exoplayer2
.
decoder
.
DecoderCounters
;
import
com
.
google
.
android
.
exoplayer2
.
metadata
.
Metadata
;
import
com
.
google
.
android
.
exoplayer2
.
metadata
.
MetadataRenderer
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
;
import
com
.
google
.
android
.
exoplayer2
.
source
.
TrackGroupArray
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
Cue
;
import
com
.
google
.
android
.
exoplayer2
.
text
.
TextRenderer
;
import
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelectionArray
;
import
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelector
;
import
com
.
google
.
android
.
exoplayer2
.
video
.
VideoRendererEventListener
;
import
java
.
util
.
List
;
TargetApi
(
16
)
public
class
SimpleExoPlayer
implements
ExoPlayer
{
public
interface
VideoListener
{
void
onVideoSizeChanged
(
int
width
int
height
int
unappliedRotationDegrees
float
pixelWidthHeightRatio
)
;
void
onRenderedFirstFrame
(
)
;
}
private
static
final
String
TAG
=
"
SimpleExoPlayer
"
;
protected
final
Renderer
[
]
renderers
;
private
final
ExoPlayer
player
;
private
final
ComponentListener
componentListener
;
private
final
int
videoRendererCount
;
private
final
int
audioRendererCount
;
private
Format
videoFormat
;
private
Format
audioFormat
;
private
Surface
surface
;
private
boolean
ownsSurface
;
C
.
VideoScalingMode
private
int
videoScalingMode
;
private
SurfaceHolder
surfaceHolder
;
private
TextureView
textureView
;
private
TextRenderer
.
Output
textOutput
;
private
MetadataRenderer
.
Output
metadataOutput
;
private
VideoListener
videoListener
;
private
AudioRendererEventListener
audioDebugListener
;
private
VideoRendererEventListener
videoDebugListener
;
private
DecoderCounters
videoDecoderCounters
;
private
DecoderCounters
audioDecoderCounters
;
private
int
audioSessionId
;
C
.
StreamType
private
int
audioStreamType
;
private
float
audioVolume
;
protected
SimpleExoPlayer
(
RenderersFactory
renderersFactory
TrackSelector
trackSelector
LoadControl
loadControl
)
{
componentListener
=
new
ComponentListener
(
)
;
renderers
=
renderersFactory
.
createRenderers
(
new
Handler
(
)
componentListener
componentListener
componentListener
componentListener
)
;
int
videoRendererCount
=
0
;
int
audioRendererCount
=
0
;
for
(
Renderer
renderer
:
renderers
)
{
switch
(
renderer
.
getTrackType
(
)
)
{
case
C
.
TRACK_TYPE_VIDEO
:
videoRendererCount
+
+
;
break
;
case
C
.
TRACK_TYPE_AUDIO
:
audioRendererCount
+
+
;
break
;
}
}
this
.
videoRendererCount
=
videoRendererCount
;
this
.
audioRendererCount
=
audioRendererCount
;
audioVolume
=
1
;
audioSessionId
=
C
.
AUDIO_SESSION_ID_UNSET
;
audioStreamType
=
C
.
STREAM_TYPE_DEFAULT
;
videoScalingMode
=
C
.
VIDEO_SCALING_MODE_DEFAULT
;
player
=
new
ExoPlayerImpl
(
renderers
trackSelector
loadControl
)
;
}
public
void
setVideoScalingMode
(
C
.
VideoScalingMode
int
videoScalingMode
)
{
this
.
videoScalingMode
=
videoScalingMode
;
ExoPlayerMessage
[
]
messages
=
new
ExoPlayerMessage
[
videoRendererCount
]
;
int
count
=
0
;
for
(
Renderer
renderer
:
renderers
)
{
if
(
renderer
.
getTrackType
(
)
=
=
C
.
TRACK_TYPE_VIDEO
)
{
messages
[
count
+
+
]
=
new
ExoPlayerMessage
(
renderer
C
.
MSG_SET_SCALING_MODE
videoScalingMode
)
;
}
}
player
.
sendMessages
(
messages
)
;
}
public
C
.
VideoScalingMode
int
getVideoScalingMode
(
)
{
return
videoScalingMode
;
}
public
void
clearVideoSurface
(
)
{
setVideoSurface
(
null
)
;
}
public
void
setVideoSurface
(
Surface
surface
)
{
removeSurfaceCallbacks
(
)
;
setVideoSurfaceInternal
(
surface
false
)
;
}
public
void
clearVideoSurface
(
Surface
surface
)
{
if
(
surface
!
=
null
&
&
surface
=
=
this
.
surface
)
{
setVideoSurface
(
null
)
;
}
}
public
void
setVideoSurfaceHolder
(
SurfaceHolder
surfaceHolder
)
{
removeSurfaceCallbacks
(
)
;
this
.
surfaceHolder
=
surfaceHolder
;
if
(
surfaceHolder
=
=
null
)
{
setVideoSurfaceInternal
(
null
false
)
;
}
else
{
setVideoSurfaceInternal
(
surfaceHolder
.
getSurface
(
)
false
)
;
surfaceHolder
.
addCallback
(
componentListener
)
;
}
}
public
void
clearVideoSurfaceHolder
(
SurfaceHolder
surfaceHolder
)
{
if
(
surfaceHolder
!
=
null
&
&
surfaceHolder
=
=
this
.
surfaceHolder
)
{
setVideoSurfaceHolder
(
null
)
;
}
}
public
void
setVideoSurfaceView
(
SurfaceView
surfaceView
)
{
setVideoSurfaceHolder
(
surfaceView
=
=
null
?
null
:
surfaceView
.
getHolder
(
)
)
;
}
public
void
clearVideoSurfaceView
(
SurfaceView
surfaceView
)
{
clearVideoSurfaceHolder
(
surfaceView
=
=
null
?
null
:
surfaceView
.
getHolder
(
)
)
;
}
public
void
setVideoTextureView
(
TextureView
textureView
)
{
removeSurfaceCallbacks
(
)
;
this
.
textureView
=
textureView
;
if
(
textureView
=
=
null
)
{
setVideoSurfaceInternal
(
null
true
)
;
}
else
{
if
(
textureView
.
getSurfaceTextureListener
(
)
!
=
null
)
{
Log
.
w
(
TAG
"
Replacing
existing
SurfaceTextureListener
.
"
)
;
}
SurfaceTexture
surfaceTexture
=
textureView
.
getSurfaceTexture
(
)
;
setVideoSurfaceInternal
(
surfaceTexture
=
=
null
?
null
:
new
Surface
(
surfaceTexture
)
true
)
;
textureView
.
setSurfaceTextureListener
(
componentListener
)
;
}
}
public
void
clearVideoTextureView
(
TextureView
textureView
)
{
if
(
textureView
!
=
null
&
&
textureView
=
=
this
.
textureView
)
{
setVideoTextureView
(
null
)
;
}
}
public
void
setAudioStreamType
(
C
.
StreamType
int
audioStreamType
)
{
this
.
audioStreamType
=
audioStreamType
;
ExoPlayerMessage
[
]
messages
=
new
ExoPlayerMessage
[
audioRendererCount
]
;
int
count
=
0
;
for
(
Renderer
renderer
:
renderers
)
{
if
(
renderer
.
getTrackType
(
)
=
=
C
.
TRACK_TYPE_AUDIO
)
{
messages
[
count
+
+
]
=
new
ExoPlayerMessage
(
renderer
C
.
MSG_SET_STREAM_TYPE
audioStreamType
)
;
}
}
player
.
sendMessages
(
messages
)
;
}
public
C
.
StreamType
int
getAudioStreamType
(
)
{
return
audioStreamType
;
}
public
void
setVolume
(
float
audioVolume
)
{
this
.
audioVolume
=
audioVolume
;
ExoPlayerMessage
[
]
messages
=
new
ExoPlayerMessage
[
audioRendererCount
]
;
int
count
=
0
;
for
(
Renderer
renderer
:
renderers
)
{
if
(
renderer
.
getTrackType
(
)
=
=
C
.
TRACK_TYPE_AUDIO
)
{
messages
[
count
+
+
]
=
new
ExoPlayerMessage
(
renderer
C
.
MSG_SET_VOLUME
audioVolume
)
;
}
}
player
.
sendMessages
(
messages
)
;
}
public
float
getVolume
(
)
{
return
audioVolume
;
}
Deprecated
TargetApi
(
23
)
public
void
setPlaybackParams
(
Nullable
PlaybackParams
params
)
{
PlaybackParameters
playbackParameters
;
if
(
params
!
=
null
)
{
params
.
allowDefaults
(
)
;
playbackParameters
=
new
PlaybackParameters
(
params
.
getSpeed
(
)
params
.
getPitch
(
)
)
;
}
else
{
playbackParameters
=
null
;
}
setPlaybackParameters
(
playbackParameters
)
;
}
public
Format
getVideoFormat
(
)
{
return
videoFormat
;
}
public
Format
getAudioFormat
(
)
{
return
audioFormat
;
}
public
int
getAudioSessionId
(
)
{
return
audioSessionId
;
}
public
DecoderCounters
getVideoDecoderCounters
(
)
{
return
videoDecoderCounters
;
}
public
DecoderCounters
getAudioDecoderCounters
(
)
{
return
audioDecoderCounters
;
}
public
void
setVideoListener
(
VideoListener
listener
)
{
videoListener
=
listener
;
}
public
void
clearVideoListener
(
VideoListener
listener
)
{
if
(
videoListener
=
=
listener
)
{
videoListener
=
null
;
}
}
public
void
setTextOutput
(
TextRenderer
.
Output
output
)
{
textOutput
=
output
;
}
public
void
clearTextOutput
(
TextRenderer
.
Output
output
)
{
if
(
textOutput
=
=
output
)
{
textOutput
=
null
;
}
}
public
void
setMetadataOutput
(
MetadataRenderer
.
Output
output
)
{
metadataOutput
=
output
;
}
public
void
clearMetadataOutput
(
MetadataRenderer
.
Output
output
)
{
if
(
metadataOutput
=
=
output
)
{
metadataOutput
=
null
;
}
}
public
void
setVideoDebugListener
(
VideoRendererEventListener
listener
)
{
videoDebugListener
=
listener
;
}
public
void
setAudioDebugListener
(
AudioRendererEventListener
listener
)
{
audioDebugListener
=
listener
;
}
Override
public
void
addListener
(
EventListener
listener
)
{
player
.
addListener
(
listener
)
;
}
Override
public
void
removeListener
(
EventListener
listener
)
{
player
.
removeListener
(
listener
)
;
}
Override
public
int
getPlaybackState
(
)
{
return
player
.
getPlaybackState
(
)
;
}
Override
public
void
prepare
(
MediaSource
mediaSource
)
{
player
.
prepare
(
mediaSource
)
;
}
Override
public
void
prepare
(
MediaSource
mediaSource
boolean
resetPosition
boolean
resetState
)
{
player
.
prepare
(
mediaSource
resetPosition
resetState
)
;
}
Override
public
void
setPlayWhenReady
(
boolean
playWhenReady
)
{
player
.
setPlayWhenReady
(
playWhenReady
)
;
}
Override
public
boolean
getPlayWhenReady
(
)
{
return
player
.
getPlayWhenReady
(
)
;
}
Override
public
boolean
isLoading
(
)
{
return
player
.
isLoading
(
)
;
}
Override
public
void
seekToDefaultPosition
(
)
{
player
.
seekToDefaultPosition
(
)
;
}
Override
public
void
seekToDefaultPosition
(
int
windowIndex
)
{
player
.
seekToDefaultPosition
(
windowIndex
)
;
}
Override
public
void
seekTo
(
long
positionMs
)
{
player
.
seekTo
(
positionMs
)
;
}
Override
public
void
seekTo
(
int
windowIndex
long
positionMs
)
{
player
.
seekTo
(
windowIndex
positionMs
)
;
}
Override
public
void
setPlaybackParameters
(
PlaybackParameters
playbackParameters
)
{
player
.
setPlaybackParameters
(
playbackParameters
)
;
}
Override
public
PlaybackParameters
getPlaybackParameters
(
)
{
return
player
.
getPlaybackParameters
(
)
;
}
Override
public
void
stop
(
)
{
player
.
stop
(
)
;
}
Override
public
void
release
(
)
{
player
.
release
(
)
;
removeSurfaceCallbacks
(
)
;
if
(
surface
!
=
null
)
{
if
(
ownsSurface
)
{
surface
.
release
(
)
;
}
surface
=
null
;
}
}
Override
public
void
sendMessages
(
ExoPlayerMessage
.
.
.
messages
)
{
player
.
sendMessages
(
messages
)
;
}
Override
public
void
blockingSendMessages
(
ExoPlayerMessage
.
.
.
messages
)
{
player
.
blockingSendMessages
(
messages
)
;
}
Override
public
int
getRendererCount
(
)
{
return
player
.
getRendererCount
(
)
;
}
Override
public
int
getRendererType
(
int
index
)
{
return
player
.
getRendererType
(
index
)
;
}
Override
public
TrackGroupArray
getCurrentTrackGroups
(
)
{
return
player
.
getCurrentTrackGroups
(
)
;
}
Override
public
TrackSelectionArray
getCurrentTrackSelections
(
)
{
return
player
.
getCurrentTrackSelections
(
)
;
}
Override
public
Timeline
getCurrentTimeline
(
)
{
return
player
.
getCurrentTimeline
(
)
;
}
Override
public
Object
getCurrentManifest
(
)
{
return
player
.
getCurrentManifest
(
)
;
}
Override
public
int
getCurrentPeriodIndex
(
)
{
return
player
.
getCurrentPeriodIndex
(
)
;
}
Override
public
int
getCurrentWindowIndex
(
)
{
return
player
.
getCurrentWindowIndex
(
)
;
}
Override
public
long
getDuration
(
)
{
return
player
.
getDuration
(
)
;
}
Override
public
long
getCurrentPosition
(
)
{
return
player
.
getCurrentPosition
(
)
;
}
Override
public
long
getBufferedPosition
(
)
{
return
player
.
getBufferedPosition
(
)
;
}
Override
public
int
getBufferedPercentage
(
)
{
return
player
.
getBufferedPercentage
(
)
;
}
Override
public
boolean
isCurrentWindowDynamic
(
)
{
return
player
.
isCurrentWindowDynamic
(
)
;
}
Override
public
boolean
isCurrentWindowSeekable
(
)
{
return
player
.
isCurrentWindowSeekable
(
)
;
}
private
void
removeSurfaceCallbacks
(
)
{
if
(
textureView
!
=
null
)
{
if
(
textureView
.
getSurfaceTextureListener
(
)
!
=
componentListener
)
{
Log
.
w
(
TAG
"
SurfaceTextureListener
already
unset
or
replaced
.
"
)
;
}
else
{
textureView
.
setSurfaceTextureListener
(
null
)
;
}
textureView
=
null
;
}
if
(
surfaceHolder
!
=
null
)
{
surfaceHolder
.
removeCallback
(
componentListener
)
;
surfaceHolder
=
null
;
}
}
private
void
setVideoSurfaceInternal
(
Surface
surface
boolean
ownsSurface
)
{
ExoPlayerMessage
[
]
messages
=
new
ExoPlayerMessage
[
videoRendererCount
]
;
int
count
=
0
;
for
(
Renderer
renderer
:
renderers
)
{
if
(
renderer
.
getTrackType
(
)
=
=
C
.
TRACK_TYPE_VIDEO
)
{
messages
[
count
+
+
]
=
new
ExoPlayerMessage
(
renderer
C
.
MSG_SET_SURFACE
surface
)
;
}
}
if
(
this
.
surface
!
=
null
&
&
this
.
surface
!
=
surface
)
{
if
(
this
.
ownsSurface
)
{
this
.
surface
.
release
(
)
;
}
player
.
blockingSendMessages
(
messages
)
;
}
else
{
player
.
sendMessages
(
messages
)
;
}
this
.
surface
=
surface
;
this
.
ownsSurface
=
ownsSurface
;
}
private
final
class
ComponentListener
implements
VideoRendererEventListener
AudioRendererEventListener
TextRenderer
.
Output
MetadataRenderer
.
Output
SurfaceHolder
.
Callback
TextureView
.
SurfaceTextureListener
{
Override
public
void
onVideoEnabled
(
DecoderCounters
counters
)
{
videoDecoderCounters
=
counters
;
if
(
videoDebugListener
!
=
null
)
{
videoDebugListener
.
onVideoEnabled
(
counters
)
;
}
}
Override
public
void
onVideoDecoderInitialized
(
String
decoderName
long
initializedTimestampMs
long
initializationDurationMs
)
{
if
(
videoDebugListener
!
=
null
)
{
videoDebugListener
.
onVideoDecoderInitialized
(
decoderName
initializedTimestampMs
initializationDurationMs
)
;
}
}
Override
public
void
onVideoInputFormatChanged
(
Format
format
)
{
videoFormat
=
format
;
if
(
videoDebugListener
!
=
null
)
{
videoDebugListener
.
onVideoInputFormatChanged
(
format
)
;
}
}
Override
public
void
onDroppedFrames
(
int
count
long
elapsed
)
{
if
(
videoDebugListener
!
=
null
)
{
videoDebugListener
.
onDroppedFrames
(
count
elapsed
)
;
}
}
Override
public
void
onVideoSizeChanged
(
int
width
int
height
int
unappliedRotationDegrees
float
pixelWidthHeightRatio
)
{
if
(
videoListener
!
=
null
)
{
videoListener
.
onVideoSizeChanged
(
width
height
unappliedRotationDegrees
pixelWidthHeightRatio
)
;
}
if
(
videoDebugListener
!
=
null
)
{
videoDebugListener
.
onVideoSizeChanged
(
width
height
unappliedRotationDegrees
pixelWidthHeightRatio
)
;
}
}
Override
public
void
onRenderedFirstFrame
(
Surface
surface
)
{
if
(
videoListener
!
=
null
&
&
SimpleExoPlayer
.
this
.
surface
=
=
surface
)
{
videoListener
.
onRenderedFirstFrame
(
)
;
}
if
(
videoDebugListener
!
=
null
)
{
videoDebugListener
.
onRenderedFirstFrame
(
surface
)
;
}
}
Override
public
void
onVideoDisabled
(
DecoderCounters
counters
)
{
if
(
videoDebugListener
!
=
null
)
{
videoDebugListener
.
onVideoDisabled
(
counters
)
;
}
videoFormat
=
null
;
videoDecoderCounters
=
null
;
}
Override
public
void
onAudioEnabled
(
DecoderCounters
counters
)
{
audioDecoderCounters
=
counters
;
if
(
audioDebugListener
!
=
null
)
{
audioDebugListener
.
onAudioEnabled
(
counters
)
;
}
}
Override
public
void
onAudioSessionId
(
int
sessionId
)
{
audioSessionId
=
sessionId
;
if
(
audioDebugListener
!
=
null
)
{
audioDebugListener
.
onAudioSessionId
(
sessionId
)
;
}
}
Override
public
void
onAudioDecoderInitialized
(
String
decoderName
long
initializedTimestampMs
long
initializationDurationMs
)
{
if
(
audioDebugListener
!
=
null
)
{
audioDebugListener
.
onAudioDecoderInitialized
(
decoderName
initializedTimestampMs
initializationDurationMs
)
;
}
}
Override
public
void
onAudioInputFormatChanged
(
Format
format
)
{
audioFormat
=
format
;
if
(
audioDebugListener
!
=
null
)
{
audioDebugListener
.
onAudioInputFormatChanged
(
format
)
;
}
}
Override
public
void
onAudioTrackUnderrun
(
int
bufferSize
long
bufferSizeMs
long
elapsedSinceLastFeedMs
)
{
if
(
audioDebugListener
!
=
null
)
{
audioDebugListener
.
onAudioTrackUnderrun
(
bufferSize
bufferSizeMs
elapsedSinceLastFeedMs
)
;
}
}
Override
public
void
onAudioDisabled
(
DecoderCounters
counters
)
{
if
(
audioDebugListener
!
=
null
)
{
audioDebugListener
.
onAudioDisabled
(
counters
)
;
}
audioFormat
=
null
;
audioDecoderCounters
=
null
;
audioSessionId
=
C
.
AUDIO_SESSION_ID_UNSET
;
}
Override
public
void
onCues
(
List
<
Cue
>
cues
)
{
if
(
textOutput
!
=
null
)
{
textOutput
.
onCues
(
cues
)
;
}
}
Override
public
void
onMetadata
(
Metadata
metadata
)
{
if
(
metadataOutput
!
=
null
)
{
metadataOutput
.
onMetadata
(
metadata
)
;
}
}
Override
public
void
surfaceCreated
(
SurfaceHolder
holder
)
{
setVideoSurfaceInternal
(
holder
.
getSurface
(
)
false
)
;
}
Override
public
void
surfaceChanged
(
SurfaceHolder
holder
int
format
int
width
int
height
)
{
}
Override
public
void
surfaceDestroyed
(
SurfaceHolder
holder
)
{
setVideoSurfaceInternal
(
null
false
)
;
}
Override
public
void
onSurfaceTextureAvailable
(
SurfaceTexture
surfaceTexture
int
width
int
height
)
{
setVideoSurfaceInternal
(
new
Surface
(
surfaceTexture
)
true
)
;
}
Override
public
void
onSurfaceTextureSizeChanged
(
SurfaceTexture
surfaceTexture
int
width
int
height
)
{
}
Override
public
boolean
onSurfaceTextureDestroyed
(
SurfaceTexture
surfaceTexture
)
{
setVideoSurfaceInternal
(
null
true
)
;
return
true
;
}
Override
public
void
onSurfaceTextureUpdated
(
SurfaceTexture
surfaceTexture
)
{
}
}
}
