package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
;
import
android
.
content
.
Context
;
import
android
.
os
.
Looper
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
VisibleForTesting
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
analytics
.
AnalyticsCollector
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
.
MediaCodecAudioRenderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
MetadataRenderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
ClippingMediaSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
ConcatenatingMediaSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
LoopingMediaSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MergingMediaSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
ProgressiveMediaSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
SingleSampleMediaSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
text
.
TextRenderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
DefaultTrackSelector
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelector
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
BandwidthMeter
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DefaultBandwidthMeter
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Clock
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
video
.
MediaCodecVideoRenderer
;
public
interface
ExoPlayer
extends
Player
{
final
class
Builder
{
private
final
Renderer
[
]
renderers
;
private
Clock
clock
;
private
TrackSelector
trackSelector
;
private
LoadControl
loadControl
;
private
BandwidthMeter
bandwidthMeter
;
private
Looper
looper
;
private
AnalyticsCollector
analyticsCollector
;
private
boolean
useLazyPreparation
;
private
boolean
buildCalled
;
public
Builder
(
Context
context
Renderer
.
.
.
renderers
)
{
this
(
renderers
new
DefaultTrackSelector
(
context
)
new
DefaultLoadControl
(
)
DefaultBandwidthMeter
.
getSingletonInstance
(
context
)
Util
.
getLooper
(
)
new
AnalyticsCollector
(
Clock
.
DEFAULT
)
true
Clock
.
DEFAULT
)
;
}
public
Builder
(
Renderer
[
]
renderers
TrackSelector
trackSelector
LoadControl
loadControl
BandwidthMeter
bandwidthMeter
Looper
looper
AnalyticsCollector
analyticsCollector
boolean
useLazyPreparation
Clock
clock
)
{
Assertions
.
checkArgument
(
renderers
.
length
>
0
)
;
this
.
renderers
=
renderers
;
this
.
trackSelector
=
trackSelector
;
this
.
loadControl
=
loadControl
;
this
.
bandwidthMeter
=
bandwidthMeter
;
this
.
looper
=
looper
;
this
.
analyticsCollector
=
analyticsCollector
;
this
.
useLazyPreparation
=
useLazyPreparation
;
this
.
clock
=
clock
;
}
public
Builder
setTrackSelector
(
TrackSelector
trackSelector
)
{
Assertions
.
checkState
(
!
buildCalled
)
;
this
.
trackSelector
=
trackSelector
;
return
this
;
}
public
Builder
setLoadControl
(
LoadControl
loadControl
)
{
Assertions
.
checkState
(
!
buildCalled
)
;
this
.
loadControl
=
loadControl
;
return
this
;
}
public
Builder
setBandwidthMeter
(
BandwidthMeter
bandwidthMeter
)
{
Assertions
.
checkState
(
!
buildCalled
)
;
this
.
bandwidthMeter
=
bandwidthMeter
;
return
this
;
}
public
Builder
setLooper
(
Looper
looper
)
{
Assertions
.
checkState
(
!
buildCalled
)
;
this
.
looper
=
looper
;
return
this
;
}
public
Builder
setAnalyticsCollector
(
AnalyticsCollector
analyticsCollector
)
{
Assertions
.
checkState
(
!
buildCalled
)
;
this
.
analyticsCollector
=
analyticsCollector
;
return
this
;
}
public
Builder
setUseLazyPreparation
(
boolean
useLazyPreparation
)
{
Assertions
.
checkState
(
!
buildCalled
)
;
this
.
useLazyPreparation
=
useLazyPreparation
;
return
this
;
}
VisibleForTesting
public
Builder
setClock
(
Clock
clock
)
{
Assertions
.
checkState
(
!
buildCalled
)
;
this
.
clock
=
clock
;
return
this
;
}
public
ExoPlayer
build
(
)
{
Assertions
.
checkState
(
!
buildCalled
)
;
buildCalled
=
true
;
return
new
ExoPlayerImpl
(
renderers
trackSelector
loadControl
bandwidthMeter
clock
looper
)
;
}
}
Looper
getPlaybackLooper
(
)
;
void
retry
(
)
;
void
prepare
(
MediaSource
mediaSource
)
;
void
prepare
(
MediaSource
mediaSource
boolean
resetPosition
boolean
resetState
)
;
PlayerMessage
createMessage
(
PlayerMessage
.
Target
target
)
;
void
setSeekParameters
(
Nullable
SeekParameters
seekParameters
)
;
SeekParameters
getSeekParameters
(
)
;
void
setForegroundMode
(
boolean
foregroundMode
)
;
}
