package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
Metadata
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
id3
.
Id3Decoder
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
java
.
io
.
EOFException
;
import
java
.
io
.
IOException
;
public
final
class
Id3Peeker
{
private
final
ParsableByteArray
scratch
;
public
Id3Peeker
(
)
{
scratch
=
new
ParsableByteArray
(
Id3Decoder
.
ID3_HEADER_LENGTH
)
;
}
Nullable
public
Metadata
peekId3Data
(
ExtractorInput
input
Nullable
Id3Decoder
.
FramePredicate
id3FramePredicate
)
throws
IOException
InterruptedException
{
int
peekedId3Bytes
=
0
;
Metadata
metadata
=
null
;
while
(
true
)
{
try
{
input
.
peekFully
(
scratch
.
data
0
Id3Decoder
.
ID3_HEADER_LENGTH
)
;
}
catch
(
EOFException
e
)
{
break
;
}
scratch
.
setPosition
(
0
)
;
if
(
scratch
.
readUnsignedInt24
(
)
!
=
Id3Decoder
.
ID3_TAG
)
{
break
;
}
scratch
.
skipBytes
(
3
)
;
int
framesLength
=
scratch
.
readSynchSafeInt
(
)
;
int
tagLength
=
Id3Decoder
.
ID3_HEADER_LENGTH
+
framesLength
;
if
(
metadata
=
=
null
)
{
byte
[
]
id3Data
=
new
byte
[
tagLength
]
;
System
.
arraycopy
(
scratch
.
data
0
id3Data
0
Id3Decoder
.
ID3_HEADER_LENGTH
)
;
input
.
peekFully
(
id3Data
Id3Decoder
.
ID3_HEADER_LENGTH
framesLength
)
;
metadata
=
new
Id3Decoder
(
id3FramePredicate
)
.
decode
(
id3Data
tagLength
)
;
}
else
{
input
.
advancePeekPosition
(
framesLength
)
;
}
peekedId3Bytes
+
=
tagLength
;
}
input
.
resetPeekPosition
(
)
;
input
.
advancePeekPosition
(
peekedId3Bytes
)
;
return
metadata
;
}
}
