package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
util
.
Arrays
;
public
final
class
ChunkIndex
implements
SeekMap
{
public
final
int
length
;
public
final
int
[
]
sizes
;
public
final
long
[
]
offsets
;
public
final
long
[
]
durationsUs
;
public
final
long
[
]
timesUs
;
private
final
long
durationUs
;
public
ChunkIndex
(
int
[
]
sizes
long
[
]
offsets
long
[
]
durationsUs
long
[
]
timesUs
)
{
this
.
sizes
=
sizes
;
this
.
offsets
=
offsets
;
this
.
durationsUs
=
durationsUs
;
this
.
timesUs
=
timesUs
;
length
=
sizes
.
length
;
if
(
length
>
0
)
{
durationUs
=
durationsUs
[
length
-
1
]
+
timesUs
[
length
-
1
]
;
}
else
{
durationUs
=
0
;
}
}
public
int
getChunkIndex
(
long
timeUs
)
{
return
Util
.
binarySearchFloor
(
timesUs
timeUs
true
true
)
;
}
Override
public
boolean
isSeekable
(
)
{
return
true
;
}
Override
public
long
getDurationUs
(
)
{
return
durationUs
;
}
Override
public
SeekPoints
getSeekPoints
(
long
timeUs
)
{
int
chunkIndex
=
getChunkIndex
(
timeUs
)
;
SeekPoint
seekPoint
=
new
SeekPoint
(
timesUs
[
chunkIndex
]
offsets
[
chunkIndex
]
)
;
if
(
seekPoint
.
timeUs
>
=
timeUs
|
|
chunkIndex
=
=
length
-
1
)
{
return
new
SeekPoints
(
seekPoint
)
;
}
else
{
SeekPoint
nextSeekPoint
=
new
SeekPoint
(
timesUs
[
chunkIndex
+
1
]
offsets
[
chunkIndex
+
1
]
)
;
return
new
SeekPoints
(
seekPoint
nextSeekPoint
)
;
}
}
Override
public
String
toString
(
)
{
return
"
ChunkIndex
(
"
+
"
length
=
"
+
length
+
"
sizes
=
"
+
Arrays
.
toString
(
sizes
)
+
"
offsets
=
"
+
Arrays
.
toString
(
offsets
)
+
"
timeUs
=
"
+
Arrays
.
toString
(
timesUs
)
+
"
durationsUs
=
"
+
Arrays
.
toString
(
durationsUs
)
+
"
)
"
;
}
}
