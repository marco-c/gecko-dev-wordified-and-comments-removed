package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
;
import
android
.
net
.
Uri
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
io
.
IOException
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
public
final
class
TeeDataSource
implements
DataSource
{
private
final
DataSource
upstream
;
private
final
DataSink
dataSink
;
private
boolean
dataSinkNeedsClosing
;
private
long
bytesRemaining
;
public
TeeDataSource
(
DataSource
upstream
DataSink
dataSink
)
{
this
.
upstream
=
Assertions
.
checkNotNull
(
upstream
)
;
this
.
dataSink
=
Assertions
.
checkNotNull
(
dataSink
)
;
}
Override
public
void
addTransferListener
(
TransferListener
transferListener
)
{
upstream
.
addTransferListener
(
transferListener
)
;
}
Override
public
long
open
(
DataSpec
dataSpec
)
throws
IOException
{
bytesRemaining
=
upstream
.
open
(
dataSpec
)
;
if
(
bytesRemaining
=
=
0
)
{
return
0
;
}
if
(
dataSpec
.
length
=
=
C
.
LENGTH_UNSET
&
&
bytesRemaining
!
=
C
.
LENGTH_UNSET
)
{
dataSpec
=
dataSpec
.
subrange
(
0
bytesRemaining
)
;
}
dataSinkNeedsClosing
=
true
;
dataSink
.
open
(
dataSpec
)
;
return
bytesRemaining
;
}
Override
public
int
read
(
byte
[
]
buffer
int
offset
int
max
)
throws
IOException
{
if
(
bytesRemaining
=
=
0
)
{
return
C
.
RESULT_END_OF_INPUT
;
}
int
bytesRead
=
upstream
.
read
(
buffer
offset
max
)
;
if
(
bytesRead
>
0
)
{
dataSink
.
write
(
buffer
offset
bytesRead
)
;
if
(
bytesRemaining
!
=
C
.
LENGTH_UNSET
)
{
bytesRemaining
-
=
bytesRead
;
}
}
return
bytesRead
;
}
Override
Nullable
public
Uri
getUri
(
)
{
return
upstream
.
getUri
(
)
;
}
Override
public
Map
<
String
List
<
String
>
>
getResponseHeaders
(
)
{
return
upstream
.
getResponseHeaders
(
)
;
}
Override
public
void
close
(
)
throws
IOException
{
try
{
upstream
.
close
(
)
;
}
finally
{
if
(
dataSinkNeedsClosing
)
{
dataSinkNeedsClosing
=
false
;
dataSink
.
close
(
)
;
}
}
}
}
