package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
;
import
androidx
.
annotation
.
NonNull
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
public
final
class
DataSourceInputStream
extends
InputStream
{
private
final
DataSource
dataSource
;
private
final
DataSpec
dataSpec
;
private
final
byte
[
]
singleByteArray
;
private
boolean
opened
=
false
;
private
boolean
closed
=
false
;
private
long
totalBytesRead
;
public
DataSourceInputStream
(
DataSource
dataSource
DataSpec
dataSpec
)
{
this
.
dataSource
=
dataSource
;
this
.
dataSpec
=
dataSpec
;
singleByteArray
=
new
byte
[
1
]
;
}
public
long
bytesRead
(
)
{
return
totalBytesRead
;
}
public
void
open
(
)
throws
IOException
{
checkOpened
(
)
;
}
Override
public
int
read
(
)
throws
IOException
{
int
length
=
read
(
singleByteArray
)
;
return
length
=
=
-
1
?
-
1
:
(
singleByteArray
[
0
]
&
0xFF
)
;
}
Override
public
int
read
(
NonNull
byte
[
]
buffer
)
throws
IOException
{
return
read
(
buffer
0
buffer
.
length
)
;
}
Override
public
int
read
(
NonNull
byte
[
]
buffer
int
offset
int
length
)
throws
IOException
{
Assertions
.
checkState
(
!
closed
)
;
checkOpened
(
)
;
int
bytesRead
=
dataSource
.
read
(
buffer
offset
length
)
;
if
(
bytesRead
=
=
C
.
RESULT_END_OF_INPUT
)
{
return
-
1
;
}
else
{
totalBytesRead
+
=
bytesRead
;
return
bytesRead
;
}
}
Override
public
void
close
(
)
throws
IOException
{
if
(
!
closed
)
{
dataSource
.
close
(
)
;
closed
=
true
;
}
}
private
void
checkOpened
(
)
throws
IOException
{
if
(
!
opened
)
{
dataSource
.
open
(
dataSpec
)
;
opened
=
true
;
}
}
}
