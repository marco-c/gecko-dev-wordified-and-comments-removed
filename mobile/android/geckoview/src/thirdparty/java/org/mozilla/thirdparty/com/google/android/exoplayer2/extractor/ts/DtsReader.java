package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
.
DtsUtil
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
TrackOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
.
TsPayloadReader
.
TrackIdGenerator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
public
final
class
DtsReader
implements
ElementaryStreamReader
{
private
static
final
int
STATE_FINDING_SYNC
=
0
;
private
static
final
int
STATE_READING_HEADER
=
1
;
private
static
final
int
STATE_READING_SAMPLE
=
2
;
private
static
final
int
HEADER_SIZE
=
15
;
private
static
final
int
SYNC_VALUE
=
0x7FFE8001
;
private
static
final
int
SYNC_VALUE_SIZE
=
4
;
private
final
ParsableByteArray
headerScratchBytes
;
private
final
String
language
;
private
String
formatId
;
private
TrackOutput
output
;
private
int
state
;
private
int
bytesRead
;
private
int
syncBytes
;
private
long
sampleDurationUs
;
private
Format
format
;
private
int
sampleSize
;
private
long
timeUs
;
public
DtsReader
(
String
language
)
{
headerScratchBytes
=
new
ParsableByteArray
(
new
byte
[
HEADER_SIZE
]
)
;
headerScratchBytes
.
data
[
0
]
=
(
byte
)
(
(
SYNC_VALUE
>
>
24
)
&
0xFF
)
;
headerScratchBytes
.
data
[
1
]
=
(
byte
)
(
(
SYNC_VALUE
>
>
16
)
&
0xFF
)
;
headerScratchBytes
.
data
[
2
]
=
(
byte
)
(
(
SYNC_VALUE
>
>
8
)
&
0xFF
)
;
headerScratchBytes
.
data
[
3
]
=
(
byte
)
(
SYNC_VALUE
&
0xFF
)
;
state
=
STATE_FINDING_SYNC
;
this
.
language
=
language
;
}
Override
public
void
seek
(
)
{
state
=
STATE_FINDING_SYNC
;
bytesRead
=
0
;
syncBytes
=
0
;
}
Override
public
void
createTracks
(
ExtractorOutput
extractorOutput
TrackIdGenerator
idGenerator
)
{
idGenerator
.
generateNewId
(
)
;
formatId
=
idGenerator
.
getFormatId
(
)
;
output
=
extractorOutput
.
track
(
idGenerator
.
getTrackId
(
)
C
.
TRACK_TYPE_AUDIO
)
;
}
Override
public
void
packetStarted
(
long
pesTimeUs
boolean
dataAlignmentIndicator
)
{
timeUs
=
pesTimeUs
;
}
Override
public
void
consume
(
ParsableByteArray
data
)
{
while
(
data
.
bytesLeft
(
)
>
0
)
{
switch
(
state
)
{
case
STATE_FINDING_SYNC
:
if
(
skipToNextSync
(
data
)
)
{
bytesRead
=
SYNC_VALUE_SIZE
;
state
=
STATE_READING_HEADER
;
}
break
;
case
STATE_READING_HEADER
:
if
(
continueRead
(
data
headerScratchBytes
.
data
HEADER_SIZE
)
)
{
parseHeader
(
)
;
headerScratchBytes
.
setPosition
(
0
)
;
output
.
sampleData
(
headerScratchBytes
HEADER_SIZE
)
;
state
=
STATE_READING_SAMPLE
;
}
break
;
case
STATE_READING_SAMPLE
:
int
bytesToRead
=
Math
.
min
(
data
.
bytesLeft
(
)
sampleSize
-
bytesRead
)
;
output
.
sampleData
(
data
bytesToRead
)
;
bytesRead
+
=
bytesToRead
;
if
(
bytesRead
=
=
sampleSize
)
{
output
.
sampleMetadata
(
timeUs
C
.
BUFFER_FLAG_KEY_FRAME
sampleSize
0
null
)
;
timeUs
+
=
sampleDurationUs
;
state
=
STATE_FINDING_SYNC
;
}
break
;
}
}
}
Override
public
void
packetFinished
(
)
{
}
private
boolean
continueRead
(
ParsableByteArray
source
byte
[
]
target
int
targetLength
)
{
int
bytesToRead
=
Math
.
min
(
source
.
bytesLeft
(
)
targetLength
-
bytesRead
)
;
source
.
readBytes
(
target
bytesRead
bytesToRead
)
;
bytesRead
+
=
bytesToRead
;
return
bytesRead
=
=
targetLength
;
}
private
boolean
skipToNextSync
(
ParsableByteArray
pesBuffer
)
{
while
(
pesBuffer
.
bytesLeft
(
)
>
0
)
{
syncBytes
<
<
=
8
;
syncBytes
|
=
pesBuffer
.
readUnsignedByte
(
)
;
if
(
syncBytes
=
=
SYNC_VALUE
)
{
syncBytes
=
0
;
return
true
;
}
}
return
false
;
}
private
void
parseHeader
(
)
{
byte
[
]
frameData
=
headerScratchBytes
.
data
;
if
(
format
=
=
null
)
{
format
=
DtsUtil
.
parseDtsFormat
(
frameData
formatId
language
null
)
;
output
.
format
(
format
)
;
}
sampleSize
=
DtsUtil
.
getDtsFrameSize
(
frameData
)
;
sampleDurationUs
=
(
int
)
(
C
.
MICROS_PER_SECOND
*
DtsUtil
.
parseDtsAudioSampleCount
(
frameData
)
/
format
.
sampleRate
)
;
}
}
