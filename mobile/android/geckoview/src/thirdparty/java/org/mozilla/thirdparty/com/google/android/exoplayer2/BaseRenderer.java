package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
decoder
.
DecoderInputBuffer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
SampleStream
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
MediaClock
;
import
java
.
io
.
IOException
;
public
abstract
class
BaseRenderer
implements
Renderer
RendererCapabilities
{
private
final
int
trackType
;
private
RendererConfiguration
configuration
;
private
int
index
;
private
int
state
;
private
SampleStream
stream
;
private
long
streamOffsetUs
;
private
boolean
readEndOfStream
;
private
boolean
streamIsFinal
;
public
BaseRenderer
(
int
trackType
)
{
this
.
trackType
=
trackType
;
readEndOfStream
=
true
;
}
Override
public
final
int
getTrackType
(
)
{
return
trackType
;
}
Override
public
final
RendererCapabilities
getCapabilities
(
)
{
return
this
;
}
Override
public
final
void
setIndex
(
int
index
)
{
this
.
index
=
index
;
}
Override
public
MediaClock
getMediaClock
(
)
{
return
null
;
}
Override
public
final
int
getState
(
)
{
return
state
;
}
Override
public
final
void
enable
(
RendererConfiguration
configuration
Format
[
]
formats
SampleStream
stream
long
positionUs
boolean
joining
long
offsetUs
)
throws
ExoPlaybackException
{
Assertions
.
checkState
(
state
=
=
STATE_DISABLED
)
;
this
.
configuration
=
configuration
;
state
=
STATE_ENABLED
;
onEnabled
(
joining
)
;
replaceStream
(
formats
stream
offsetUs
)
;
onPositionReset
(
positionUs
joining
)
;
}
Override
public
final
void
start
(
)
throws
ExoPlaybackException
{
Assertions
.
checkState
(
state
=
=
STATE_ENABLED
)
;
state
=
STATE_STARTED
;
onStarted
(
)
;
}
Override
public
final
void
replaceStream
(
Format
[
]
formats
SampleStream
stream
long
offsetUs
)
throws
ExoPlaybackException
{
Assertions
.
checkState
(
!
streamIsFinal
)
;
this
.
stream
=
stream
;
readEndOfStream
=
false
;
streamOffsetUs
=
offsetUs
;
onStreamChanged
(
formats
)
;
}
Override
public
final
SampleStream
getStream
(
)
{
return
stream
;
}
Override
public
final
boolean
hasReadStreamToEnd
(
)
{
return
readEndOfStream
;
}
Override
public
final
void
setCurrentStreamFinal
(
)
{
streamIsFinal
=
true
;
}
Override
public
final
boolean
isCurrentStreamFinal
(
)
{
return
streamIsFinal
;
}
Override
public
final
void
maybeThrowStreamError
(
)
throws
IOException
{
stream
.
maybeThrowError
(
)
;
}
Override
public
final
void
resetPosition
(
long
positionUs
)
throws
ExoPlaybackException
{
streamIsFinal
=
false
;
readEndOfStream
=
false
;
onPositionReset
(
positionUs
false
)
;
}
Override
public
final
void
stop
(
)
throws
ExoPlaybackException
{
Assertions
.
checkState
(
state
=
=
STATE_STARTED
)
;
state
=
STATE_ENABLED
;
onStopped
(
)
;
}
Override
public
final
void
disable
(
)
{
Assertions
.
checkState
(
state
=
=
STATE_ENABLED
)
;
state
=
STATE_DISABLED
;
onDisabled
(
)
;
stream
=
null
;
streamIsFinal
=
false
;
}
Override
public
int
supportsMixedMimeTypeAdaptation
(
)
throws
ExoPlaybackException
{
return
ADAPTIVE_NOT_SUPPORTED
;
}
Override
public
void
handleMessage
(
int
what
Object
object
)
throws
ExoPlaybackException
{
}
protected
void
onEnabled
(
boolean
joining
)
throws
ExoPlaybackException
{
}
protected
void
onStreamChanged
(
Format
[
]
formats
)
throws
ExoPlaybackException
{
}
protected
void
onPositionReset
(
long
positionUs
boolean
joining
)
throws
ExoPlaybackException
{
}
protected
void
onStarted
(
)
throws
ExoPlaybackException
{
}
protected
void
onStopped
(
)
throws
ExoPlaybackException
{
}
protected
void
onDisabled
(
)
{
}
protected
final
RendererConfiguration
getConfiguration
(
)
{
return
configuration
;
}
protected
final
int
getIndex
(
)
{
return
index
;
}
protected
final
int
readSource
(
FormatHolder
formatHolder
DecoderInputBuffer
buffer
boolean
formatRequired
)
{
int
result
=
stream
.
readData
(
formatHolder
buffer
formatRequired
)
;
if
(
result
=
=
C
.
RESULT_BUFFER_READ
)
{
if
(
buffer
.
isEndOfStream
(
)
)
{
readEndOfStream
=
true
;
return
streamIsFinal
?
C
.
RESULT_BUFFER_READ
:
C
.
RESULT_NOTHING_READ
;
}
buffer
.
timeUs
+
=
streamOffsetUs
;
}
else
if
(
result
=
=
C
.
RESULT_FORMAT_READ
)
{
Format
format
=
formatHolder
.
format
;
if
(
format
.
subsampleOffsetUs
!
=
Format
.
OFFSET_SAMPLE_RELATIVE
)
{
format
=
format
.
copyWithSubsampleOffsetUs
(
format
.
subsampleOffsetUs
+
streamOffsetUs
)
;
formatHolder
.
format
=
format
;
}
}
return
result
;
}
protected
void
skipSource
(
long
positionUs
)
{
stream
.
skipData
(
positionUs
-
streamOffsetUs
)
;
}
protected
final
boolean
isSourceReady
(
)
{
return
readEndOfStream
?
streamIsFinal
:
stream
.
isReady
(
)
;
}
}
