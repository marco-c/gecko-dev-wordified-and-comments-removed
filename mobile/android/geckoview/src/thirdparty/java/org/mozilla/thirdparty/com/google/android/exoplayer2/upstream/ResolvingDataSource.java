package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
;
import
android
.
net
.
Uri
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
io
.
IOException
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
public
final
class
ResolvingDataSource
implements
DataSource
{
public
interface
Resolver
{
DataSpec
resolveDataSpec
(
DataSpec
dataSpec
)
throws
IOException
;
default
Uri
resolveReportedUri
(
Uri
uri
)
{
return
uri
;
}
}
public
static
final
class
Factory
implements
DataSource
.
Factory
{
private
final
DataSource
.
Factory
upstreamFactory
;
private
final
Resolver
resolver
;
public
Factory
(
DataSource
.
Factory
upstreamFactory
Resolver
resolver
)
{
this
.
upstreamFactory
=
upstreamFactory
;
this
.
resolver
=
resolver
;
}
Override
public
ResolvingDataSource
createDataSource
(
)
{
return
new
ResolvingDataSource
(
upstreamFactory
.
createDataSource
(
)
resolver
)
;
}
}
private
final
DataSource
upstreamDataSource
;
private
final
Resolver
resolver
;
private
boolean
upstreamOpened
;
public
ResolvingDataSource
(
DataSource
upstreamDataSource
Resolver
resolver
)
{
this
.
upstreamDataSource
=
upstreamDataSource
;
this
.
resolver
=
resolver
;
}
Override
public
void
addTransferListener
(
TransferListener
transferListener
)
{
upstreamDataSource
.
addTransferListener
(
transferListener
)
;
}
Override
public
long
open
(
DataSpec
dataSpec
)
throws
IOException
{
DataSpec
resolvedDataSpec
=
resolver
.
resolveDataSpec
(
dataSpec
)
;
upstreamOpened
=
true
;
return
upstreamDataSource
.
open
(
resolvedDataSpec
)
;
}
Override
public
int
read
(
byte
[
]
buffer
int
offset
int
readLength
)
throws
IOException
{
return
upstreamDataSource
.
read
(
buffer
offset
readLength
)
;
}
Nullable
Override
public
Uri
getUri
(
)
{
Uri
reportedUri
=
upstreamDataSource
.
getUri
(
)
;
return
reportedUri
=
=
null
?
null
:
resolver
.
resolveReportedUri
(
reportedUri
)
;
}
Override
public
Map
<
String
List
<
String
>
>
getResponseHeaders
(
)
{
return
upstreamDataSource
.
getResponseHeaders
(
)
;
}
Override
public
void
close
(
)
throws
IOException
{
if
(
upstreamOpened
)
{
upstreamOpened
=
false
;
upstreamDataSource
.
close
(
)
;
}
}
}
