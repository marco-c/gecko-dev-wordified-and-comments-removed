package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
android
.
net
.
Uri
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
DrmSession
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
DrmSessionManager
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
DefaultExtractorsFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
Extractor
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorsFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
Allocator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DefaultLoadErrorHandlingPolicy
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
LoadErrorHandlingPolicy
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
TransferListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
io
.
IOException
;
public
final
class
ProgressiveMediaSource
extends
BaseMediaSource
implements
ProgressiveMediaPeriod
.
Listener
{
public
static
final
class
Factory
implements
MediaSourceFactory
{
private
final
DataSource
.
Factory
dataSourceFactory
;
private
ExtractorsFactory
extractorsFactory
;
Nullable
private
String
customCacheKey
;
Nullable
private
Object
tag
;
private
DrmSessionManager
<
?
>
drmSessionManager
;
private
LoadErrorHandlingPolicy
loadErrorHandlingPolicy
;
private
int
continueLoadingCheckIntervalBytes
;
private
boolean
isCreateCalled
;
public
Factory
(
DataSource
.
Factory
dataSourceFactory
)
{
this
(
dataSourceFactory
new
DefaultExtractorsFactory
(
)
)
;
}
public
Factory
(
DataSource
.
Factory
dataSourceFactory
ExtractorsFactory
extractorsFactory
)
{
this
.
dataSourceFactory
=
dataSourceFactory
;
this
.
extractorsFactory
=
extractorsFactory
;
drmSessionManager
=
DrmSessionManager
.
getDummyDrmSessionManager
(
)
;
loadErrorHandlingPolicy
=
new
DefaultLoadErrorHandlingPolicy
(
)
;
continueLoadingCheckIntervalBytes
=
DEFAULT_LOADING_CHECK_INTERVAL_BYTES
;
}
Deprecated
public
Factory
setExtractorsFactory
(
ExtractorsFactory
extractorsFactory
)
{
Assertions
.
checkState
(
!
isCreateCalled
)
;
this
.
extractorsFactory
=
extractorsFactory
;
return
this
;
}
public
Factory
setCustomCacheKey
(
Nullable
String
customCacheKey
)
{
Assertions
.
checkState
(
!
isCreateCalled
)
;
this
.
customCacheKey
=
customCacheKey
;
return
this
;
}
public
Factory
setTag
(
Object
tag
)
{
Assertions
.
checkState
(
!
isCreateCalled
)
;
this
.
tag
=
tag
;
return
this
;
}
public
Factory
setLoadErrorHandlingPolicy
(
LoadErrorHandlingPolicy
loadErrorHandlingPolicy
)
{
Assertions
.
checkState
(
!
isCreateCalled
)
;
this
.
loadErrorHandlingPolicy
=
loadErrorHandlingPolicy
;
return
this
;
}
public
Factory
setContinueLoadingCheckIntervalBytes
(
int
continueLoadingCheckIntervalBytes
)
{
Assertions
.
checkState
(
!
isCreateCalled
)
;
this
.
continueLoadingCheckIntervalBytes
=
continueLoadingCheckIntervalBytes
;
return
this
;
}
Override
public
Factory
setDrmSessionManager
(
DrmSessionManager
<
?
>
drmSessionManager
)
{
Assertions
.
checkState
(
!
isCreateCalled
)
;
this
.
drmSessionManager
=
drmSessionManager
;
return
this
;
}
Override
public
ProgressiveMediaSource
createMediaSource
(
Uri
uri
)
{
isCreateCalled
=
true
;
return
new
ProgressiveMediaSource
(
uri
dataSourceFactory
extractorsFactory
drmSessionManager
loadErrorHandlingPolicy
customCacheKey
continueLoadingCheckIntervalBytes
tag
)
;
}
Override
public
int
[
]
getSupportedTypes
(
)
{
return
new
int
[
]
{
C
.
TYPE_OTHER
}
;
}
}
public
static
final
int
DEFAULT_LOADING_CHECK_INTERVAL_BYTES
=
1024
*
1024
;
private
final
Uri
uri
;
private
final
DataSource
.
Factory
dataSourceFactory
;
private
final
ExtractorsFactory
extractorsFactory
;
private
final
DrmSessionManager
<
?
>
drmSessionManager
;
private
final
LoadErrorHandlingPolicy
loadableLoadErrorHandlingPolicy
;
Nullable
private
final
String
customCacheKey
;
private
final
int
continueLoadingCheckIntervalBytes
;
Nullable
private
final
Object
tag
;
private
long
timelineDurationUs
;
private
boolean
timelineIsSeekable
;
private
boolean
timelineIsLive
;
Nullable
private
TransferListener
transferListener
;
ProgressiveMediaSource
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
ExtractorsFactory
extractorsFactory
DrmSessionManager
<
?
>
drmSessionManager
LoadErrorHandlingPolicy
loadableLoadErrorHandlingPolicy
Nullable
String
customCacheKey
int
continueLoadingCheckIntervalBytes
Nullable
Object
tag
)
{
this
.
uri
=
uri
;
this
.
dataSourceFactory
=
dataSourceFactory
;
this
.
extractorsFactory
=
extractorsFactory
;
this
.
drmSessionManager
=
drmSessionManager
;
this
.
loadableLoadErrorHandlingPolicy
=
loadableLoadErrorHandlingPolicy
;
this
.
customCacheKey
=
customCacheKey
;
this
.
continueLoadingCheckIntervalBytes
=
continueLoadingCheckIntervalBytes
;
this
.
timelineDurationUs
=
C
.
TIME_UNSET
;
this
.
tag
=
tag
;
}
Override
Nullable
public
Object
getTag
(
)
{
return
tag
;
}
Override
protected
void
prepareSourceInternal
(
Nullable
TransferListener
mediaTransferListener
)
{
transferListener
=
mediaTransferListener
;
drmSessionManager
.
prepare
(
)
;
notifySourceInfoRefreshed
(
timelineDurationUs
timelineIsSeekable
timelineIsLive
)
;
}
Override
public
void
maybeThrowSourceInfoRefreshError
(
)
throws
IOException
{
}
Override
public
MediaPeriod
createPeriod
(
MediaPeriodId
id
Allocator
allocator
long
startPositionUs
)
{
DataSource
dataSource
=
dataSourceFactory
.
createDataSource
(
)
;
if
(
transferListener
!
=
null
)
{
dataSource
.
addTransferListener
(
transferListener
)
;
}
return
new
ProgressiveMediaPeriod
(
uri
dataSource
extractorsFactory
.
createExtractors
(
)
drmSessionManager
loadableLoadErrorHandlingPolicy
createEventDispatcher
(
id
)
this
allocator
customCacheKey
continueLoadingCheckIntervalBytes
)
;
}
Override
public
void
releasePeriod
(
MediaPeriod
mediaPeriod
)
{
(
(
ProgressiveMediaPeriod
)
mediaPeriod
)
.
release
(
)
;
}
Override
protected
void
releaseSourceInternal
(
)
{
drmSessionManager
.
release
(
)
;
}
Override
public
void
onSourceInfoRefreshed
(
long
durationUs
boolean
isSeekable
boolean
isLive
)
{
durationUs
=
durationUs
=
=
C
.
TIME_UNSET
?
timelineDurationUs
:
durationUs
;
if
(
timelineDurationUs
=
=
durationUs
&
&
timelineIsSeekable
=
=
isSeekable
&
&
timelineIsLive
=
=
isLive
)
{
return
;
}
notifySourceInfoRefreshed
(
durationUs
isSeekable
isLive
)
;
}
private
void
notifySourceInfoRefreshed
(
long
durationUs
boolean
isSeekable
boolean
isLive
)
{
timelineDurationUs
=
durationUs
;
timelineIsSeekable
=
isSeekable
;
timelineIsLive
=
isLive
;
refreshSourceInfo
(
new
SinglePeriodTimeline
(
timelineDurationUs
timelineIsSeekable
false
timelineIsLive
null
tag
)
)
;
}
}
