package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
video
;
import
static
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
EGLSurfaceTexture
.
SECURE_MODE_NONE
;
import
static
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
EGLSurfaceTexture
.
SECURE_MODE_PROTECTED_PBUFFER
;
import
static
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
EGLSurfaceTexture
.
SECURE_MODE_SURFACELESS_CONTEXT
;
import
android
.
annotation
.
TargetApi
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
SurfaceTexture
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Handler
.
Callback
;
import
android
.
os
.
HandlerThread
;
import
android
.
os
.
Message
;
import
android
.
view
.
Surface
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
EGLSurfaceTexture
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
EGLSurfaceTexture
.
SecureMode
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
GlUtil
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Log
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
org
.
checkerframework
.
checker
.
nullness
.
qual
.
MonotonicNonNull
;
TargetApi
(
17
)
public
final
class
DummySurface
extends
Surface
{
private
static
final
String
TAG
=
"
DummySurface
"
;
public
final
boolean
secure
;
private
static
SecureMode
int
secureMode
;
private
static
boolean
secureModeInitialized
;
private
final
DummySurfaceThread
thread
;
private
boolean
threadReleased
;
public
static
synchronized
boolean
isSecureSupported
(
Context
context
)
{
if
(
!
secureModeInitialized
)
{
secureMode
=
getSecureMode
(
context
)
;
secureModeInitialized
=
true
;
}
return
secureMode
!
=
SECURE_MODE_NONE
;
}
public
static
DummySurface
newInstanceV17
(
Context
context
boolean
secure
)
{
assertApiLevel17OrHigher
(
)
;
Assertions
.
checkState
(
!
secure
|
|
isSecureSupported
(
context
)
)
;
DummySurfaceThread
thread
=
new
DummySurfaceThread
(
)
;
return
thread
.
init
(
secure
?
secureMode
:
SECURE_MODE_NONE
)
;
}
private
DummySurface
(
DummySurfaceThread
thread
SurfaceTexture
surfaceTexture
boolean
secure
)
{
super
(
surfaceTexture
)
;
this
.
thread
=
thread
;
this
.
secure
=
secure
;
}
Override
public
void
release
(
)
{
super
.
release
(
)
;
synchronized
(
thread
)
{
if
(
!
threadReleased
)
{
thread
.
release
(
)
;
threadReleased
=
true
;
}
}
}
private
static
void
assertApiLevel17OrHigher
(
)
{
if
(
Util
.
SDK_INT
<
17
)
{
throw
new
UnsupportedOperationException
(
"
Unsupported
prior
to
API
level
17
"
)
;
}
}
SecureMode
private
static
int
getSecureMode
(
Context
context
)
{
if
(
GlUtil
.
isProtectedContentExtensionSupported
(
context
)
)
{
if
(
GlUtil
.
isSurfacelessContextExtensionSupported
(
)
)
{
return
SECURE_MODE_SURFACELESS_CONTEXT
;
}
else
{
return
SECURE_MODE_PROTECTED_PBUFFER
;
}
}
else
{
return
SECURE_MODE_NONE
;
}
}
private
static
class
DummySurfaceThread
extends
HandlerThread
implements
Callback
{
private
static
final
int
MSG_INIT
=
1
;
private
static
final
int
MSG_RELEASE
=
2
;
private
MonotonicNonNull
EGLSurfaceTexture
eglSurfaceTexture
;
private
MonotonicNonNull
Handler
handler
;
Nullable
private
Error
initError
;
Nullable
private
RuntimeException
initException
;
Nullable
private
DummySurface
surface
;
public
DummySurfaceThread
(
)
{
super
(
"
dummySurface
"
)
;
}
public
DummySurface
init
(
SecureMode
int
secureMode
)
{
start
(
)
;
handler
=
new
Handler
(
getLooper
(
)
this
)
;
eglSurfaceTexture
=
new
EGLSurfaceTexture
(
handler
)
;
boolean
wasInterrupted
=
false
;
synchronized
(
this
)
{
handler
.
obtainMessage
(
MSG_INIT
secureMode
0
)
.
sendToTarget
(
)
;
while
(
surface
=
=
null
&
&
initException
=
=
null
&
&
initError
=
=
null
)
{
try
{
wait
(
)
;
}
catch
(
InterruptedException
e
)
{
wasInterrupted
=
true
;
}
}
}
if
(
wasInterrupted
)
{
Thread
.
currentThread
(
)
.
interrupt
(
)
;
}
if
(
initException
!
=
null
)
{
throw
initException
;
}
else
if
(
initError
!
=
null
)
{
throw
initError
;
}
else
{
return
Assertions
.
checkNotNull
(
surface
)
;
}
}
public
void
release
(
)
{
Assertions
.
checkNotNull
(
handler
)
;
handler
.
sendEmptyMessage
(
MSG_RELEASE
)
;
}
Override
public
boolean
handleMessage
(
Message
msg
)
{
switch
(
msg
.
what
)
{
case
MSG_INIT
:
try
{
initInternal
(
msg
.
arg1
)
;
}
catch
(
RuntimeException
e
)
{
Log
.
e
(
TAG
"
Failed
to
initialize
dummy
surface
"
e
)
;
initException
=
e
;
}
catch
(
Error
e
)
{
Log
.
e
(
TAG
"
Failed
to
initialize
dummy
surface
"
e
)
;
initError
=
e
;
}
finally
{
synchronized
(
this
)
{
notify
(
)
;
}
}
return
true
;
case
MSG_RELEASE
:
try
{
releaseInternal
(
)
;
}
catch
(
Throwable
e
)
{
Log
.
e
(
TAG
"
Failed
to
release
dummy
surface
"
e
)
;
}
finally
{
quit
(
)
;
}
return
true
;
default
:
return
true
;
}
}
private
void
initInternal
(
SecureMode
int
secureMode
)
{
Assertions
.
checkNotNull
(
eglSurfaceTexture
)
;
eglSurfaceTexture
.
init
(
secureMode
)
;
this
.
surface
=
new
DummySurface
(
this
eglSurfaceTexture
.
getSurfaceTexture
(
)
secureMode
!
=
SECURE_MODE_NONE
)
;
}
private
void
releaseInternal
(
)
{
Assertions
.
checkNotNull
(
eglSurfaceTexture
)
;
eglSurfaceTexture
.
release
(
)
;
}
}
}
