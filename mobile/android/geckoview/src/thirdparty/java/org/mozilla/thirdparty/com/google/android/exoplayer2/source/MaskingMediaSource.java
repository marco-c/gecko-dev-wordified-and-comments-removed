package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
android
.
util
.
Pair
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
.
Window
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSourceEventListener
.
EventDispatcher
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
Allocator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
TransferListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
public
final
class
MaskingMediaSource
extends
CompositeMediaSource
<
Void
>
{
private
final
MediaSource
mediaSource
;
private
final
boolean
useLazyPreparation
;
private
final
Timeline
.
Window
window
;
private
final
Timeline
.
Period
period
;
private
MaskingTimeline
timeline
;
Nullable
private
MaskingMediaPeriod
unpreparedMaskingMediaPeriod
;
Nullable
private
EventDispatcher
unpreparedMaskingMediaPeriodEventDispatcher
;
private
boolean
hasStartedPreparing
;
private
boolean
isPrepared
;
public
MaskingMediaSource
(
MediaSource
mediaSource
boolean
useLazyPreparation
)
{
this
.
mediaSource
=
mediaSource
;
this
.
useLazyPreparation
=
useLazyPreparation
;
window
=
new
Timeline
.
Window
(
)
;
period
=
new
Timeline
.
Period
(
)
;
timeline
=
MaskingTimeline
.
createWithDummyTimeline
(
mediaSource
.
getTag
(
)
)
;
}
public
Timeline
getTimeline
(
)
{
return
timeline
;
}
Override
public
void
prepareSourceInternal
(
Nullable
TransferListener
mediaTransferListener
)
{
super
.
prepareSourceInternal
(
mediaTransferListener
)
;
if
(
!
useLazyPreparation
)
{
hasStartedPreparing
=
true
;
prepareChildSource
(
null
mediaSource
)
;
}
}
Nullable
Override
public
Object
getTag
(
)
{
return
mediaSource
.
getTag
(
)
;
}
Override
SuppressWarnings
(
"
MissingSuperCall
"
)
public
void
maybeThrowSourceInfoRefreshError
(
)
throws
IOException
{
}
Override
public
MaskingMediaPeriod
createPeriod
(
MediaPeriodId
id
Allocator
allocator
long
startPositionUs
)
{
MaskingMediaPeriod
mediaPeriod
=
new
MaskingMediaPeriod
(
mediaSource
id
allocator
startPositionUs
)
;
if
(
isPrepared
)
{
MediaPeriodId
idInSource
=
id
.
copyWithPeriodUid
(
getInternalPeriodUid
(
id
.
periodUid
)
)
;
mediaPeriod
.
createPeriod
(
idInSource
)
;
}
else
{
unpreparedMaskingMediaPeriod
=
mediaPeriod
;
unpreparedMaskingMediaPeriodEventDispatcher
=
createEventDispatcher
(
0
id
0
)
;
unpreparedMaskingMediaPeriodEventDispatcher
.
mediaPeriodCreated
(
)
;
if
(
!
hasStartedPreparing
)
{
hasStartedPreparing
=
true
;
prepareChildSource
(
null
mediaSource
)
;
}
}
return
mediaPeriod
;
}
Override
public
void
releasePeriod
(
MediaPeriod
mediaPeriod
)
{
(
(
MaskingMediaPeriod
)
mediaPeriod
)
.
releasePeriod
(
)
;
if
(
mediaPeriod
=
=
unpreparedMaskingMediaPeriod
)
{
Assertions
.
checkNotNull
(
unpreparedMaskingMediaPeriodEventDispatcher
)
.
mediaPeriodReleased
(
)
;
unpreparedMaskingMediaPeriodEventDispatcher
=
null
;
unpreparedMaskingMediaPeriod
=
null
;
}
}
Override
public
void
releaseSourceInternal
(
)
{
isPrepared
=
false
;
hasStartedPreparing
=
false
;
super
.
releaseSourceInternal
(
)
;
}
Override
protected
void
onChildSourceInfoRefreshed
(
Void
id
MediaSource
mediaSource
Timeline
newTimeline
)
{
if
(
isPrepared
)
{
timeline
=
timeline
.
cloneWithUpdatedTimeline
(
newTimeline
)
;
}
else
if
(
newTimeline
.
isEmpty
(
)
)
{
timeline
=
MaskingTimeline
.
createWithRealTimeline
(
newTimeline
Window
.
SINGLE_WINDOW_UID
MaskingTimeline
.
DUMMY_EXTERNAL_PERIOD_UID
)
;
}
else
{
newTimeline
.
getWindow
(
0
window
)
;
long
windowStartPositionUs
=
window
.
getDefaultPositionUs
(
)
;
if
(
unpreparedMaskingMediaPeriod
!
=
null
)
{
long
periodPreparePositionUs
=
unpreparedMaskingMediaPeriod
.
getPreparePositionUs
(
)
;
if
(
periodPreparePositionUs
!
=
0
)
{
windowStartPositionUs
=
periodPreparePositionUs
;
}
}
Object
windowUid
=
window
.
uid
;
Pair
<
Object
Long
>
periodPosition
=
newTimeline
.
getPeriodPosition
(
window
period
0
windowStartPositionUs
)
;
Object
periodUid
=
periodPosition
.
first
;
long
periodPositionUs
=
periodPosition
.
second
;
timeline
=
MaskingTimeline
.
createWithRealTimeline
(
newTimeline
windowUid
periodUid
)
;
if
(
unpreparedMaskingMediaPeriod
!
=
null
)
{
MaskingMediaPeriod
maskingPeriod
=
unpreparedMaskingMediaPeriod
;
maskingPeriod
.
overridePreparePositionUs
(
periodPositionUs
)
;
MediaPeriodId
idInSource
=
maskingPeriod
.
id
.
copyWithPeriodUid
(
getInternalPeriodUid
(
maskingPeriod
.
id
.
periodUid
)
)
;
maskingPeriod
.
createPeriod
(
idInSource
)
;
}
}
isPrepared
=
true
;
refreshSourceInfo
(
this
.
timeline
)
;
}
Nullable
Override
protected
MediaPeriodId
getMediaPeriodIdForChildMediaPeriodId
(
Void
id
MediaPeriodId
mediaPeriodId
)
{
return
mediaPeriodId
.
copyWithPeriodUid
(
getExternalPeriodUid
(
mediaPeriodId
.
periodUid
)
)
;
}
Override
protected
boolean
shouldDispatchCreateOrReleaseEvent
(
MediaPeriodId
mediaPeriodId
)
{
return
unpreparedMaskingMediaPeriod
=
=
null
|
|
!
mediaPeriodId
.
equals
(
unpreparedMaskingMediaPeriod
.
id
)
;
}
private
Object
getInternalPeriodUid
(
Object
externalPeriodUid
)
{
return
externalPeriodUid
.
equals
(
MaskingTimeline
.
DUMMY_EXTERNAL_PERIOD_UID
)
?
timeline
.
replacedInternalPeriodUid
:
externalPeriodUid
;
}
private
Object
getExternalPeriodUid
(
Object
internalPeriodUid
)
{
return
timeline
.
replacedInternalPeriodUid
.
equals
(
internalPeriodUid
)
?
MaskingTimeline
.
DUMMY_EXTERNAL_PERIOD_UID
:
internalPeriodUid
;
}
private
static
final
class
MaskingTimeline
extends
ForwardingTimeline
{
public
static
final
Object
DUMMY_EXTERNAL_PERIOD_UID
=
new
Object
(
)
;
private
final
Object
replacedInternalWindowUid
;
private
final
Object
replacedInternalPeriodUid
;
public
static
MaskingTimeline
createWithDummyTimeline
(
Nullable
Object
windowTag
)
{
return
new
MaskingTimeline
(
new
DummyTimeline
(
windowTag
)
Window
.
SINGLE_WINDOW_UID
DUMMY_EXTERNAL_PERIOD_UID
)
;
}
public
static
MaskingTimeline
createWithRealTimeline
(
Timeline
timeline
Object
firstWindowUid
Object
firstPeriodUid
)
{
return
new
MaskingTimeline
(
timeline
firstWindowUid
firstPeriodUid
)
;
}
private
MaskingTimeline
(
Timeline
timeline
Object
replacedInternalWindowUid
Object
replacedInternalPeriodUid
)
{
super
(
timeline
)
;
this
.
replacedInternalWindowUid
=
replacedInternalWindowUid
;
this
.
replacedInternalPeriodUid
=
replacedInternalPeriodUid
;
}
public
MaskingTimeline
cloneWithUpdatedTimeline
(
Timeline
timeline
)
{
return
new
MaskingTimeline
(
timeline
replacedInternalWindowUid
replacedInternalPeriodUid
)
;
}
public
Timeline
getTimeline
(
)
{
return
timeline
;
}
Override
public
Window
getWindow
(
int
windowIndex
Window
window
long
defaultPositionProjectionUs
)
{
timeline
.
getWindow
(
windowIndex
window
defaultPositionProjectionUs
)
;
if
(
Util
.
areEqual
(
window
.
uid
replacedInternalWindowUid
)
)
{
window
.
uid
=
Window
.
SINGLE_WINDOW_UID
;
}
return
window
;
}
Override
public
Period
getPeriod
(
int
periodIndex
Period
period
boolean
setIds
)
{
timeline
.
getPeriod
(
periodIndex
period
setIds
)
;
if
(
Util
.
areEqual
(
period
.
uid
replacedInternalPeriodUid
)
)
{
period
.
uid
=
DUMMY_EXTERNAL_PERIOD_UID
;
}
return
period
;
}
Override
public
int
getIndexOfPeriod
(
Object
uid
)
{
return
timeline
.
getIndexOfPeriod
(
DUMMY_EXTERNAL_PERIOD_UID
.
equals
(
uid
)
?
replacedInternalPeriodUid
:
uid
)
;
}
Override
public
Object
getUidOfPeriod
(
int
periodIndex
)
{
Object
uid
=
timeline
.
getUidOfPeriod
(
periodIndex
)
;
return
Util
.
areEqual
(
uid
replacedInternalPeriodUid
)
?
DUMMY_EXTERNAL_PERIOD_UID
:
uid
;
}
}
private
static
final
class
DummyTimeline
extends
Timeline
{
Nullable
private
final
Object
tag
;
public
DummyTimeline
(
Nullable
Object
tag
)
{
this
.
tag
=
tag
;
}
Override
public
int
getWindowCount
(
)
{
return
1
;
}
Override
public
Window
getWindow
(
int
windowIndex
Window
window
long
defaultPositionProjectionUs
)
{
return
window
.
set
(
Window
.
SINGLE_WINDOW_UID
tag
null
C
.
TIME_UNSET
C
.
TIME_UNSET
false
true
false
0
C
.
TIME_UNSET
0
0
0
)
;
}
Override
public
int
getPeriodCount
(
)
{
return
1
;
}
Override
public
Period
getPeriod
(
int
periodIndex
Period
period
boolean
setIds
)
{
return
period
.
set
(
0
MaskingTimeline
.
DUMMY_EXTERNAL_PERIOD_UID
0
C
.
TIME_UNSET
0
)
;
}
Override
public
int
getIndexOfPeriod
(
Object
uid
)
{
return
uid
=
=
MaskingTimeline
.
DUMMY_EXTERNAL_PERIOD_UID
?
0
:
C
.
INDEX_UNSET
;
}
Override
public
Object
getUidOfPeriod
(
int
periodIndex
)
{
return
MaskingTimeline
.
DUMMY_EXTERNAL_PERIOD_UID
;
}
}
}
