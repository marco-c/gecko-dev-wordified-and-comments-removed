package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
text
.
subrip
;
import
android
.
text
.
Html
;
import
android
.
text
.
Spanned
;
import
android
.
text
.
TextUtils
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
text
.
Cue
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
text
.
SimpleSubtitleDecoder
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
text
.
Subtitle
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Log
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
LongArray
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
regex
.
Matcher
;
import
java
.
util
.
regex
.
Pattern
;
public
final
class
SubripDecoder
extends
SimpleSubtitleDecoder
{
private
static
final
float
START_FRACTION
=
0
.
08f
;
private
static
final
float
END_FRACTION
=
1
-
START_FRACTION
;
private
static
final
float
MID_FRACTION
=
0
.
5f
;
private
static
final
String
TAG
=
"
SubripDecoder
"
;
private
static
final
String
SUBRIP_TIMECODE
=
"
(
?
:
(
\
\
d
+
)
:
)
?
(
\
\
d
+
)
:
(
\
\
d
+
)
(
?
:
(
\
\
d
+
)
)
?
"
;
private
static
final
Pattern
SUBRIP_TIMING_LINE
=
Pattern
.
compile
(
"
\
\
s
*
(
"
+
SUBRIP_TIMECODE
+
"
)
\
\
s
*
-
-
>
\
\
s
*
(
"
+
SUBRIP_TIMECODE
+
"
)
\
\
s
*
"
)
;
private
static
final
Pattern
SUBRIP_TAG_PATTERN
=
Pattern
.
compile
(
"
\
\
{
\
\
\
\
.
*
?
\
\
}
"
)
;
private
static
final
String
SUBRIP_ALIGNMENT_TAG
=
"
\
\
{
\
\
\
\
an
[
1
-
9
]
\
\
}
"
;
private
static
final
String
ALIGN_BOTTOM_LEFT
=
"
{
\
\
an1
}
"
;
private
static
final
String
ALIGN_BOTTOM_MID
=
"
{
\
\
an2
}
"
;
private
static
final
String
ALIGN_BOTTOM_RIGHT
=
"
{
\
\
an3
}
"
;
private
static
final
String
ALIGN_MID_LEFT
=
"
{
\
\
an4
}
"
;
private
static
final
String
ALIGN_MID_MID
=
"
{
\
\
an5
}
"
;
private
static
final
String
ALIGN_MID_RIGHT
=
"
{
\
\
an6
}
"
;
private
static
final
String
ALIGN_TOP_LEFT
=
"
{
\
\
an7
}
"
;
private
static
final
String
ALIGN_TOP_MID
=
"
{
\
\
an8
}
"
;
private
static
final
String
ALIGN_TOP_RIGHT
=
"
{
\
\
an9
}
"
;
private
final
StringBuilder
textBuilder
;
private
final
ArrayList
<
String
>
tags
;
public
SubripDecoder
(
)
{
super
(
"
SubripDecoder
"
)
;
textBuilder
=
new
StringBuilder
(
)
;
tags
=
new
ArrayList
<
>
(
)
;
}
Override
protected
Subtitle
decode
(
byte
[
]
bytes
int
length
boolean
reset
)
{
ArrayList
<
Cue
>
cues
=
new
ArrayList
<
>
(
)
;
LongArray
cueTimesUs
=
new
LongArray
(
)
;
ParsableByteArray
subripData
=
new
ParsableByteArray
(
bytes
length
)
;
Nullable
String
currentLine
;
while
(
(
currentLine
=
subripData
.
readLine
(
)
)
!
=
null
)
{
if
(
currentLine
.
length
(
)
=
=
0
)
{
continue
;
}
try
{
Integer
.
parseInt
(
currentLine
)
;
}
catch
(
NumberFormatException
e
)
{
Log
.
w
(
TAG
"
Skipping
invalid
index
:
"
+
currentLine
)
;
continue
;
}
currentLine
=
subripData
.
readLine
(
)
;
if
(
currentLine
=
=
null
)
{
Log
.
w
(
TAG
"
Unexpected
end
"
)
;
break
;
}
Matcher
matcher
=
SUBRIP_TIMING_LINE
.
matcher
(
currentLine
)
;
if
(
matcher
.
matches
(
)
)
{
cueTimesUs
.
add
(
parseTimecode
(
matcher
1
)
)
;
cueTimesUs
.
add
(
parseTimecode
(
matcher
6
)
)
;
}
else
{
Log
.
w
(
TAG
"
Skipping
invalid
timing
:
"
+
currentLine
)
;
continue
;
}
textBuilder
.
setLength
(
0
)
;
tags
.
clear
(
)
;
currentLine
=
subripData
.
readLine
(
)
;
while
(
!
TextUtils
.
isEmpty
(
currentLine
)
)
{
if
(
textBuilder
.
length
(
)
>
0
)
{
textBuilder
.
append
(
"
<
br
>
"
)
;
}
textBuilder
.
append
(
processLine
(
currentLine
tags
)
)
;
currentLine
=
subripData
.
readLine
(
)
;
}
Spanned
text
=
Html
.
fromHtml
(
textBuilder
.
toString
(
)
)
;
Nullable
String
alignmentTag
=
null
;
for
(
int
i
=
0
;
i
<
tags
.
size
(
)
;
i
+
+
)
{
String
tag
=
tags
.
get
(
i
)
;
if
(
tag
.
matches
(
SUBRIP_ALIGNMENT_TAG
)
)
{
alignmentTag
=
tag
;
break
;
}
}
cues
.
add
(
buildCue
(
text
alignmentTag
)
)
;
cues
.
add
(
Cue
.
EMPTY
)
;
}
Cue
[
]
cuesArray
=
new
Cue
[
cues
.
size
(
)
]
;
cues
.
toArray
(
cuesArray
)
;
long
[
]
cueTimesUsArray
=
cueTimesUs
.
toArray
(
)
;
return
new
SubripSubtitle
(
cuesArray
cueTimesUsArray
)
;
}
private
String
processLine
(
String
line
ArrayList
<
String
>
tags
)
{
line
=
line
.
trim
(
)
;
int
removedCharacterCount
=
0
;
StringBuilder
processedLine
=
new
StringBuilder
(
line
)
;
Matcher
matcher
=
SUBRIP_TAG_PATTERN
.
matcher
(
line
)
;
while
(
matcher
.
find
(
)
)
{
String
tag
=
matcher
.
group
(
)
;
tags
.
add
(
tag
)
;
int
start
=
matcher
.
start
(
)
-
removedCharacterCount
;
int
tagLength
=
tag
.
length
(
)
;
processedLine
.
replace
(
start
start
+
tagLength
"
"
)
;
removedCharacterCount
+
=
tagLength
;
}
return
processedLine
.
toString
(
)
;
}
private
Cue
buildCue
(
Spanned
text
Nullable
String
alignmentTag
)
{
if
(
alignmentTag
=
=
null
)
{
return
new
Cue
(
text
)
;
}
Cue
.
AnchorType
int
positionAnchor
;
switch
(
alignmentTag
)
{
case
ALIGN_BOTTOM_LEFT
:
case
ALIGN_MID_LEFT
:
case
ALIGN_TOP_LEFT
:
positionAnchor
=
Cue
.
ANCHOR_TYPE_START
;
break
;
case
ALIGN_BOTTOM_RIGHT
:
case
ALIGN_MID_RIGHT
:
case
ALIGN_TOP_RIGHT
:
positionAnchor
=
Cue
.
ANCHOR_TYPE_END
;
break
;
case
ALIGN_BOTTOM_MID
:
case
ALIGN_MID_MID
:
case
ALIGN_TOP_MID
:
default
:
positionAnchor
=
Cue
.
ANCHOR_TYPE_MIDDLE
;
break
;
}
Cue
.
AnchorType
int
lineAnchor
;
switch
(
alignmentTag
)
{
case
ALIGN_BOTTOM_LEFT
:
case
ALIGN_BOTTOM_MID
:
case
ALIGN_BOTTOM_RIGHT
:
lineAnchor
=
Cue
.
ANCHOR_TYPE_END
;
break
;
case
ALIGN_TOP_LEFT
:
case
ALIGN_TOP_MID
:
case
ALIGN_TOP_RIGHT
:
lineAnchor
=
Cue
.
ANCHOR_TYPE_START
;
break
;
case
ALIGN_MID_LEFT
:
case
ALIGN_MID_MID
:
case
ALIGN_MID_RIGHT
:
default
:
lineAnchor
=
Cue
.
ANCHOR_TYPE_MIDDLE
;
break
;
}
return
new
Cue
(
text
null
getFractionalPositionForAnchorType
(
lineAnchor
)
Cue
.
LINE_TYPE_FRACTION
lineAnchor
getFractionalPositionForAnchorType
(
positionAnchor
)
positionAnchor
Cue
.
DIMEN_UNSET
)
;
}
private
static
long
parseTimecode
(
Matcher
matcher
int
groupOffset
)
{
Nullable
String
hours
=
matcher
.
group
(
groupOffset
+
1
)
;
long
timestampMs
=
hours
!
=
null
?
Long
.
parseLong
(
hours
)
*
60
*
60
*
1000
:
0
;
timestampMs
+
=
Long
.
parseLong
(
matcher
.
group
(
groupOffset
+
2
)
)
*
60
*
1000
;
timestampMs
+
=
Long
.
parseLong
(
matcher
.
group
(
groupOffset
+
3
)
)
*
1000
;
Nullable
String
millis
=
matcher
.
group
(
groupOffset
+
4
)
;
if
(
millis
!
=
null
)
{
timestampMs
+
=
Long
.
parseLong
(
millis
)
;
}
return
timestampMs
*
1000
;
}
static
float
getFractionalPositionForAnchorType
(
Cue
.
AnchorType
int
anchorType
)
{
switch
(
anchorType
)
{
case
Cue
.
ANCHOR_TYPE_START
:
return
SubripDecoder
.
START_FRACTION
;
case
Cue
.
ANCHOR_TYPE_MIDDLE
:
return
SubripDecoder
.
MID_FRACTION
;
case
Cue
.
ANCHOR_TYPE_END
:
return
SubripDecoder
.
END_FRACTION
;
case
Cue
.
TYPE_UNSET
:
default
:
throw
new
IllegalArgumentException
(
)
;
}
}
}
