package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
android
.
net
.
Uri
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSpec
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
TransferListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
java
.
io
.
IOException
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
final
class
IcyDataSource
implements
DataSource
{
public
interface
Listener
{
void
onIcyMetadata
(
ParsableByteArray
metadata
)
;
}
private
final
DataSource
upstream
;
private
final
int
metadataIntervalBytes
;
private
final
Listener
listener
;
private
final
byte
[
]
metadataLengthByteHolder
;
private
int
bytesUntilMetadata
;
public
IcyDataSource
(
DataSource
upstream
int
metadataIntervalBytes
Listener
listener
)
{
Assertions
.
checkArgument
(
metadataIntervalBytes
>
0
)
;
this
.
upstream
=
upstream
;
this
.
metadataIntervalBytes
=
metadataIntervalBytes
;
this
.
listener
=
listener
;
metadataLengthByteHolder
=
new
byte
[
1
]
;
bytesUntilMetadata
=
metadataIntervalBytes
;
}
Override
public
void
addTransferListener
(
TransferListener
transferListener
)
{
upstream
.
addTransferListener
(
transferListener
)
;
}
Override
public
long
open
(
DataSpec
dataSpec
)
throws
IOException
{
throw
new
UnsupportedOperationException
(
)
;
}
Override
public
int
read
(
byte
[
]
buffer
int
offset
int
readLength
)
throws
IOException
{
if
(
bytesUntilMetadata
=
=
0
)
{
if
(
readMetadata
(
)
)
{
bytesUntilMetadata
=
metadataIntervalBytes
;
}
else
{
return
C
.
RESULT_END_OF_INPUT
;
}
}
int
bytesRead
=
upstream
.
read
(
buffer
offset
Math
.
min
(
bytesUntilMetadata
readLength
)
)
;
if
(
bytesRead
!
=
C
.
RESULT_END_OF_INPUT
)
{
bytesUntilMetadata
-
=
bytesRead
;
}
return
bytesRead
;
}
Nullable
Override
public
Uri
getUri
(
)
{
return
upstream
.
getUri
(
)
;
}
Override
public
Map
<
String
List
<
String
>
>
getResponseHeaders
(
)
{
return
upstream
.
getResponseHeaders
(
)
;
}
Override
public
void
close
(
)
throws
IOException
{
throw
new
UnsupportedOperationException
(
)
;
}
private
boolean
readMetadata
(
)
throws
IOException
{
int
bytesRead
=
upstream
.
read
(
metadataLengthByteHolder
0
1
)
;
if
(
bytesRead
=
=
C
.
RESULT_END_OF_INPUT
)
{
return
false
;
}
int
metadataLength
=
(
metadataLengthByteHolder
[
0
]
&
0xFF
)
<
<
4
;
if
(
metadataLength
=
=
0
)
{
return
true
;
}
int
offset
=
0
;
int
lengthRemaining
=
metadataLength
;
byte
[
]
metadata
=
new
byte
[
metadataLength
]
;
while
(
lengthRemaining
>
0
)
{
bytesRead
=
upstream
.
read
(
metadata
offset
lengthRemaining
)
;
if
(
bytesRead
=
=
C
.
RESULT_END_OF_INPUT
)
{
return
false
;
}
offset
+
=
bytesRead
;
lengthRemaining
-
=
bytesRead
;
}
while
(
metadataLength
>
0
&
&
metadata
[
metadataLength
-
1
]
=
=
0
)
{
metadataLength
-
-
;
}
if
(
metadataLength
>
0
)
{
listener
.
onIcyMetadata
(
new
ParsableByteArray
(
metadata
metadataLength
)
)
;
}
return
true
;
}
}
