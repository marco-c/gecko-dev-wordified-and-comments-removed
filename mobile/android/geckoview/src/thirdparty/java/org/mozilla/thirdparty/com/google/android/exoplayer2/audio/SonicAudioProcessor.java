package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
.
Encoding
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
nio
.
ByteOrder
;
import
java
.
nio
.
ShortBuffer
;
public
final
class
SonicAudioProcessor
implements
AudioProcessor
{
public
static
final
float
MAXIMUM_SPEED
=
8
.
0f
;
public
static
final
float
MINIMUM_SPEED
=
0
.
1f
;
public
static
final
float
MAXIMUM_PITCH
=
8
.
0f
;
public
static
final
float
MINIMUM_PITCH
=
0
.
1f
;
private
static
final
float
CLOSE_THRESHOLD
=
0
.
01f
;
private
int
channelCount
;
private
int
sampleRateHz
;
private
Sonic
sonic
;
private
float
speed
;
private
float
pitch
;
private
ByteBuffer
buffer
;
private
ShortBuffer
shortBuffer
;
private
ByteBuffer
outputBuffer
;
private
long
inputBytes
;
private
long
outputBytes
;
private
boolean
inputEnded
;
public
SonicAudioProcessor
(
)
{
speed
=
1f
;
pitch
=
1f
;
channelCount
=
Format
.
NO_VALUE
;
sampleRateHz
=
Format
.
NO_VALUE
;
buffer
=
EMPTY_BUFFER
;
shortBuffer
=
buffer
.
asShortBuffer
(
)
;
outputBuffer
=
EMPTY_BUFFER
;
}
public
float
setSpeed
(
float
speed
)
{
this
.
speed
=
Util
.
constrainValue
(
speed
MINIMUM_SPEED
MAXIMUM_SPEED
)
;
return
this
.
speed
;
}
public
float
setPitch
(
float
pitch
)
{
this
.
pitch
=
Util
.
constrainValue
(
pitch
MINIMUM_PITCH
MAXIMUM_PITCH
)
;
return
pitch
;
}
public
long
getInputByteCount
(
)
{
return
inputBytes
;
}
public
long
getOutputByteCount
(
)
{
return
outputBytes
;
}
Override
public
boolean
configure
(
int
sampleRateHz
int
channelCount
Encoding
int
encoding
)
throws
UnhandledFormatException
{
if
(
encoding
!
=
C
.
ENCODING_PCM_16BIT
)
{
throw
new
UnhandledFormatException
(
sampleRateHz
channelCount
encoding
)
;
}
if
(
this
.
sampleRateHz
=
=
sampleRateHz
&
&
this
.
channelCount
=
=
channelCount
)
{
return
false
;
}
this
.
sampleRateHz
=
sampleRateHz
;
this
.
channelCount
=
channelCount
;
return
true
;
}
Override
public
boolean
isActive
(
)
{
return
Math
.
abs
(
speed
-
1f
)
>
=
CLOSE_THRESHOLD
|
|
Math
.
abs
(
pitch
-
1f
)
>
=
CLOSE_THRESHOLD
;
}
Override
public
int
getOutputChannelCount
(
)
{
return
channelCount
;
}
Override
public
int
getOutputEncoding
(
)
{
return
C
.
ENCODING_PCM_16BIT
;
}
Override
public
void
queueInput
(
ByteBuffer
inputBuffer
)
{
if
(
inputBuffer
.
hasRemaining
(
)
)
{
ShortBuffer
shortBuffer
=
inputBuffer
.
asShortBuffer
(
)
;
int
inputSize
=
inputBuffer
.
remaining
(
)
;
inputBytes
+
=
inputSize
;
sonic
.
queueInput
(
shortBuffer
)
;
inputBuffer
.
position
(
inputBuffer
.
position
(
)
+
inputSize
)
;
}
int
outputSize
=
sonic
.
getSamplesAvailable
(
)
*
channelCount
*
2
;
if
(
outputSize
>
0
)
{
if
(
buffer
.
capacity
(
)
<
outputSize
)
{
buffer
=
ByteBuffer
.
allocateDirect
(
outputSize
)
.
order
(
ByteOrder
.
nativeOrder
(
)
)
;
shortBuffer
=
buffer
.
asShortBuffer
(
)
;
}
else
{
buffer
.
clear
(
)
;
shortBuffer
.
clear
(
)
;
}
sonic
.
getOutput
(
shortBuffer
)
;
outputBytes
+
=
outputSize
;
buffer
.
limit
(
outputSize
)
;
outputBuffer
=
buffer
;
}
}
Override
public
void
queueEndOfStream
(
)
{
sonic
.
queueEndOfStream
(
)
;
inputEnded
=
true
;
}
Override
public
ByteBuffer
getOutput
(
)
{
ByteBuffer
outputBuffer
=
this
.
outputBuffer
;
this
.
outputBuffer
=
EMPTY_BUFFER
;
return
outputBuffer
;
}
Override
public
boolean
isEnded
(
)
{
return
inputEnded
&
&
(
sonic
=
=
null
|
|
sonic
.
getSamplesAvailable
(
)
=
=
0
)
;
}
Override
public
void
flush
(
)
{
sonic
=
new
Sonic
(
sampleRateHz
channelCount
)
;
sonic
.
setSpeed
(
speed
)
;
sonic
.
setPitch
(
pitch
)
;
outputBuffer
=
EMPTY_BUFFER
;
inputBytes
=
0
;
outputBytes
=
0
;
inputEnded
=
false
;
}
Override
public
void
reset
(
)
{
sonic
=
null
;
buffer
=
EMPTY_BUFFER
;
shortBuffer
=
buffer
.
asShortBuffer
(
)
;
outputBuffer
=
EMPTY_BUFFER
;
channelCount
=
Format
.
NO_VALUE
;
sampleRateHz
=
Format
.
NO_VALUE
;
inputBytes
=
0
;
outputBytes
=
0
;
inputEnded
=
false
;
}
}
