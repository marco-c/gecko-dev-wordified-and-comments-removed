package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSink
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
.
Factory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
FileDataSourceFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
CacheDataSource
.
EventListener
;
public
final
class
CacheDataSourceFactory
implements
DataSource
.
Factory
{
private
final
Cache
cache
;
private
final
DataSource
.
Factory
upstreamFactory
;
private
final
DataSource
.
Factory
cacheReadDataSourceFactory
;
private
final
DataSink
.
Factory
cacheWriteDataSinkFactory
;
private
final
int
flags
;
private
final
EventListener
eventListener
;
public
CacheDataSourceFactory
(
Cache
cache
DataSource
.
Factory
upstreamFactory
int
flags
)
{
this
(
cache
upstreamFactory
flags
CacheDataSource
.
DEFAULT_MAX_CACHE_FILE_SIZE
)
;
}
public
CacheDataSourceFactory
(
Cache
cache
DataSource
.
Factory
upstreamFactory
int
flags
long
maxCacheFileSize
)
{
this
(
cache
upstreamFactory
new
FileDataSourceFactory
(
)
new
CacheDataSinkFactory
(
cache
maxCacheFileSize
)
flags
null
)
;
}
public
CacheDataSourceFactory
(
Cache
cache
Factory
upstreamFactory
Factory
cacheReadDataSourceFactory
DataSink
.
Factory
cacheWriteDataSinkFactory
int
flags
EventListener
eventListener
)
{
this
.
cache
=
cache
;
this
.
upstreamFactory
=
upstreamFactory
;
this
.
cacheReadDataSourceFactory
=
cacheReadDataSourceFactory
;
this
.
cacheWriteDataSinkFactory
=
cacheWriteDataSinkFactory
;
this
.
flags
=
flags
;
this
.
eventListener
=
eventListener
;
}
Override
public
CacheDataSource
createDataSource
(
)
{
return
new
CacheDataSource
(
cache
upstreamFactory
.
createDataSource
(
)
cacheReadDataSourceFactory
.
createDataSource
(
)
cacheWriteDataSinkFactory
!
=
null
?
cacheWriteDataSinkFactory
.
createDataSink
(
)
:
null
flags
eventListener
)
;
}
}
