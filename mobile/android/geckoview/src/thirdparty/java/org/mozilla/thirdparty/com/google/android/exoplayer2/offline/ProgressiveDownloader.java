package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
;
import
android
.
net
.
Uri
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSpec
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
Cache
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
CacheDataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
CacheKeyFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
CacheUtil
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
PriorityTaskManager
;
import
java
.
io
.
IOException
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicBoolean
;
public
final
class
ProgressiveDownloader
implements
Downloader
{
private
static
final
int
BUFFER_SIZE_BYTES
=
128
*
1024
;
private
final
DataSpec
dataSpec
;
private
final
Cache
cache
;
private
final
CacheDataSource
dataSource
;
private
final
CacheKeyFactory
cacheKeyFactory
;
private
final
PriorityTaskManager
priorityTaskManager
;
private
final
AtomicBoolean
isCanceled
;
public
ProgressiveDownloader
(
Uri
uri
Nullable
String
customCacheKey
DownloaderConstructorHelper
constructorHelper
)
{
this
.
dataSpec
=
new
DataSpec
(
uri
0
C
.
LENGTH_UNSET
customCacheKey
DataSpec
.
FLAG_ALLOW_CACHE_FRAGMENTATION
)
;
this
.
cache
=
constructorHelper
.
getCache
(
)
;
this
.
dataSource
=
constructorHelper
.
createCacheDataSource
(
)
;
this
.
cacheKeyFactory
=
constructorHelper
.
getCacheKeyFactory
(
)
;
this
.
priorityTaskManager
=
constructorHelper
.
getPriorityTaskManager
(
)
;
isCanceled
=
new
AtomicBoolean
(
)
;
}
Override
public
void
download
(
Nullable
ProgressListener
progressListener
)
throws
InterruptedException
IOException
{
priorityTaskManager
.
add
(
C
.
PRIORITY_DOWNLOAD
)
;
try
{
CacheUtil
.
cache
(
dataSpec
cache
cacheKeyFactory
dataSource
new
byte
[
BUFFER_SIZE_BYTES
]
priorityTaskManager
C
.
PRIORITY_DOWNLOAD
progressListener
=
=
null
?
null
:
new
ProgressForwarder
(
progressListener
)
isCanceled
true
)
;
}
finally
{
priorityTaskManager
.
remove
(
C
.
PRIORITY_DOWNLOAD
)
;
}
}
Override
public
void
cancel
(
)
{
isCanceled
.
set
(
true
)
;
}
Override
public
void
remove
(
)
{
CacheUtil
.
remove
(
dataSpec
cache
cacheKeyFactory
)
;
}
private
static
final
class
ProgressForwarder
implements
CacheUtil
.
ProgressListener
{
private
final
ProgressListener
progessListener
;
public
ProgressForwarder
(
ProgressListener
progressListener
)
{
this
.
progessListener
=
progressListener
;
}
Override
public
void
onProgress
(
long
contentLength
long
bytesCached
long
newBytesCached
)
{
float
percentDownloaded
=
contentLength
=
=
C
.
LENGTH_UNSET
|
|
contentLength
=
=
0
?
C
.
PERCENTAGE_UNSET
:
(
(
bytesCached
*
100f
)
/
contentLength
)
;
progessListener
.
onProgress
(
contentLength
bytesCached
percentDownloaded
)
;
}
}
}
