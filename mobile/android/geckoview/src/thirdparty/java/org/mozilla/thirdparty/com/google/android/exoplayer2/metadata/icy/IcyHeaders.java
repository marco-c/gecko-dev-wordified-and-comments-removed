package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
icy
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
Metadata
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Log
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
public
final
class
IcyHeaders
implements
Metadata
.
Entry
{
public
static
final
String
REQUEST_HEADER_ENABLE_METADATA_NAME
=
"
Icy
-
MetaData
"
;
public
static
final
String
REQUEST_HEADER_ENABLE_METADATA_VALUE
=
"
1
"
;
private
static
final
String
TAG
=
"
IcyHeaders
"
;
private
static
final
String
RESPONSE_HEADER_BITRATE
=
"
icy
-
br
"
;
private
static
final
String
RESPONSE_HEADER_GENRE
=
"
icy
-
genre
"
;
private
static
final
String
RESPONSE_HEADER_NAME
=
"
icy
-
name
"
;
private
static
final
String
RESPONSE_HEADER_URL
=
"
icy
-
url
"
;
private
static
final
String
RESPONSE_HEADER_PUB
=
"
icy
-
pub
"
;
private
static
final
String
RESPONSE_HEADER_METADATA_INTERVAL
=
"
icy
-
metaint
"
;
Nullable
public
static
IcyHeaders
parse
(
Map
<
String
List
<
String
>
>
responseHeaders
)
{
boolean
icyHeadersPresent
=
false
;
int
bitrate
=
Format
.
NO_VALUE
;
String
genre
=
null
;
String
name
=
null
;
String
url
=
null
;
boolean
isPublic
=
false
;
int
metadataInterval
=
C
.
LENGTH_UNSET
;
List
<
String
>
headers
=
responseHeaders
.
get
(
RESPONSE_HEADER_BITRATE
)
;
if
(
headers
!
=
null
)
{
String
bitrateHeader
=
headers
.
get
(
0
)
;
try
{
bitrate
=
Integer
.
parseInt
(
bitrateHeader
)
*
1000
;
if
(
bitrate
>
0
)
{
icyHeadersPresent
=
true
;
}
else
{
Log
.
w
(
TAG
"
Invalid
bitrate
:
"
+
bitrateHeader
)
;
bitrate
=
Format
.
NO_VALUE
;
}
}
catch
(
NumberFormatException
e
)
{
Log
.
w
(
TAG
"
Invalid
bitrate
header
:
"
+
bitrateHeader
)
;
}
}
headers
=
responseHeaders
.
get
(
RESPONSE_HEADER_GENRE
)
;
if
(
headers
!
=
null
)
{
genre
=
headers
.
get
(
0
)
;
icyHeadersPresent
=
true
;
}
headers
=
responseHeaders
.
get
(
RESPONSE_HEADER_NAME
)
;
if
(
headers
!
=
null
)
{
name
=
headers
.
get
(
0
)
;
icyHeadersPresent
=
true
;
}
headers
=
responseHeaders
.
get
(
RESPONSE_HEADER_URL
)
;
if
(
headers
!
=
null
)
{
url
=
headers
.
get
(
0
)
;
icyHeadersPresent
=
true
;
}
headers
=
responseHeaders
.
get
(
RESPONSE_HEADER_PUB
)
;
if
(
headers
!
=
null
)
{
isPublic
=
headers
.
get
(
0
)
.
equals
(
"
1
"
)
;
icyHeadersPresent
=
true
;
}
headers
=
responseHeaders
.
get
(
RESPONSE_HEADER_METADATA_INTERVAL
)
;
if
(
headers
!
=
null
)
{
String
metadataIntervalHeader
=
headers
.
get
(
0
)
;
try
{
metadataInterval
=
Integer
.
parseInt
(
metadataIntervalHeader
)
;
if
(
metadataInterval
>
0
)
{
icyHeadersPresent
=
true
;
}
else
{
Log
.
w
(
TAG
"
Invalid
metadata
interval
:
"
+
metadataIntervalHeader
)
;
metadataInterval
=
C
.
LENGTH_UNSET
;
}
}
catch
(
NumberFormatException
e
)
{
Log
.
w
(
TAG
"
Invalid
metadata
interval
:
"
+
metadataIntervalHeader
)
;
}
}
return
icyHeadersPresent
?
new
IcyHeaders
(
bitrate
genre
name
url
isPublic
metadataInterval
)
:
null
;
}
public
final
int
bitrate
;
Nullable
public
final
String
genre
;
Nullable
public
final
String
name
;
Nullable
public
final
String
url
;
public
final
boolean
isPublic
;
public
final
int
metadataInterval
;
public
IcyHeaders
(
int
bitrate
Nullable
String
genre
Nullable
String
name
Nullable
String
url
boolean
isPublic
int
metadataInterval
)
{
Assertions
.
checkArgument
(
metadataInterval
=
=
C
.
LENGTH_UNSET
|
|
metadataInterval
>
0
)
;
this
.
bitrate
=
bitrate
;
this
.
genre
=
genre
;
this
.
name
=
name
;
this
.
url
=
url
;
this
.
isPublic
=
isPublic
;
this
.
metadataInterval
=
metadataInterval
;
}
IcyHeaders
(
Parcel
in
)
{
bitrate
=
in
.
readInt
(
)
;
genre
=
in
.
readString
(
)
;
name
=
in
.
readString
(
)
;
url
=
in
.
readString
(
)
;
isPublic
=
Util
.
readBoolean
(
in
)
;
metadataInterval
=
in
.
readInt
(
)
;
}
Override
public
boolean
equals
(
Nullable
Object
obj
)
{
if
(
this
=
=
obj
)
{
return
true
;
}
if
(
obj
=
=
null
|
|
getClass
(
)
!
=
obj
.
getClass
(
)
)
{
return
false
;
}
IcyHeaders
other
=
(
IcyHeaders
)
obj
;
return
bitrate
=
=
other
.
bitrate
&
&
Util
.
areEqual
(
genre
other
.
genre
)
&
&
Util
.
areEqual
(
name
other
.
name
)
&
&
Util
.
areEqual
(
url
other
.
url
)
&
&
isPublic
=
=
other
.
isPublic
&
&
metadataInterval
=
=
other
.
metadataInterval
;
}
Override
public
int
hashCode
(
)
{
int
result
=
17
;
result
=
31
*
result
+
bitrate
;
result
=
31
*
result
+
(
genre
!
=
null
?
genre
.
hashCode
(
)
:
0
)
;
result
=
31
*
result
+
(
name
!
=
null
?
name
.
hashCode
(
)
:
0
)
;
result
=
31
*
result
+
(
url
!
=
null
?
url
.
hashCode
(
)
:
0
)
;
result
=
31
*
result
+
(
isPublic
?
1
:
0
)
;
result
=
31
*
result
+
metadataInterval
;
return
result
;
}
Override
public
String
toString
(
)
{
return
"
IcyHeaders
:
name
=
\
"
"
+
name
+
"
\
"
genre
=
\
"
"
+
genre
+
"
\
"
bitrate
=
"
+
bitrate
+
"
metadataInterval
=
"
+
metadataInterval
;
}
Override
public
void
writeToParcel
(
Parcel
dest
int
flags
)
{
dest
.
writeInt
(
bitrate
)
;
dest
.
writeString
(
genre
)
;
dest
.
writeString
(
name
)
;
dest
.
writeString
(
url
)
;
Util
.
writeBoolean
(
dest
isPublic
)
;
dest
.
writeInt
(
metadataInterval
)
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
public
static
final
Parcelable
.
Creator
<
IcyHeaders
>
CREATOR
=
new
Parcelable
.
Creator
<
IcyHeaders
>
(
)
{
Override
public
IcyHeaders
createFromParcel
(
Parcel
in
)
{
return
new
IcyHeaders
(
in
)
;
}
Override
public
IcyHeaders
[
]
newArray
(
int
size
)
{
return
new
IcyHeaders
[
size
]
;
}
}
;
}
