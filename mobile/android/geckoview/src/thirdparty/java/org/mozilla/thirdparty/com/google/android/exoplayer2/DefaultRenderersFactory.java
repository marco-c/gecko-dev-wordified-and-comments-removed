package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
;
import
android
.
content
.
Context
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Looper
;
import
android
.
support
.
annotation
.
IntDef
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
.
AudioCapabilities
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
.
AudioProcessor
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
.
AudioRendererEventListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
.
MediaCodecAudioRenderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
DrmSessionManager
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
FrameworkMediaCrypto
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
mediacodec
.
MediaCodecSelector
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
MetadataRenderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
text
.
TextRenderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelector
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
video
.
MediaCodecVideoRenderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
video
.
VideoRendererEventListener
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
lang
.
reflect
.
Constructor
;
import
java
.
util
.
ArrayList
;
public
class
DefaultRenderersFactory
implements
RenderersFactory
{
public
static
final
long
DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS
=
5000
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
EXTENSION_RENDERER_MODE_OFF
EXTENSION_RENDERER_MODE_ON
EXTENSION_RENDERER_MODE_PREFER
}
)
public
interface
ExtensionRendererMode
{
}
public
static
final
int
EXTENSION_RENDERER_MODE_OFF
=
0
;
public
static
final
int
EXTENSION_RENDERER_MODE_ON
=
1
;
public
static
final
int
EXTENSION_RENDERER_MODE_PREFER
=
2
;
private
static
final
String
TAG
=
"
DefaultRenderersFactory
"
;
protected
static
final
int
MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY
=
50
;
private
final
Context
context
;
private
final
DrmSessionManager
<
FrameworkMediaCrypto
>
drmSessionManager
;
private
final
ExtensionRendererMode
int
extensionRendererMode
;
private
final
long
allowedVideoJoiningTimeMs
;
public
DefaultRenderersFactory
(
Context
context
)
{
this
(
context
null
)
;
}
public
DefaultRenderersFactory
(
Context
context
DrmSessionManager
<
FrameworkMediaCrypto
>
drmSessionManager
)
{
this
(
context
drmSessionManager
EXTENSION_RENDERER_MODE_OFF
)
;
}
public
DefaultRenderersFactory
(
Context
context
DrmSessionManager
<
FrameworkMediaCrypto
>
drmSessionManager
ExtensionRendererMode
int
extensionRendererMode
)
{
this
(
context
drmSessionManager
extensionRendererMode
DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS
)
;
}
public
DefaultRenderersFactory
(
Context
context
DrmSessionManager
<
FrameworkMediaCrypto
>
drmSessionManager
ExtensionRendererMode
int
extensionRendererMode
long
allowedVideoJoiningTimeMs
)
{
this
.
context
=
context
;
this
.
drmSessionManager
=
drmSessionManager
;
this
.
extensionRendererMode
=
extensionRendererMode
;
this
.
allowedVideoJoiningTimeMs
=
allowedVideoJoiningTimeMs
;
}
Override
public
Renderer
[
]
createRenderers
(
Handler
eventHandler
VideoRendererEventListener
videoRendererEventListener
AudioRendererEventListener
audioRendererEventListener
TextRenderer
.
Output
textRendererOutput
MetadataRenderer
.
Output
metadataRendererOutput
)
{
ArrayList
<
Renderer
>
renderersList
=
new
ArrayList
<
>
(
)
;
buildVideoRenderers
(
context
drmSessionManager
allowedVideoJoiningTimeMs
eventHandler
videoRendererEventListener
extensionRendererMode
renderersList
)
;
buildAudioRenderers
(
context
drmSessionManager
buildAudioProcessors
(
)
eventHandler
audioRendererEventListener
extensionRendererMode
renderersList
)
;
buildTextRenderers
(
context
textRendererOutput
eventHandler
.
getLooper
(
)
extensionRendererMode
renderersList
)
;
buildMetadataRenderers
(
context
metadataRendererOutput
eventHandler
.
getLooper
(
)
extensionRendererMode
renderersList
)
;
buildMiscellaneousRenderers
(
context
eventHandler
extensionRendererMode
renderersList
)
;
return
renderersList
.
toArray
(
new
Renderer
[
renderersList
.
size
(
)
]
)
;
}
protected
void
buildVideoRenderers
(
Context
context
DrmSessionManager
<
FrameworkMediaCrypto
>
drmSessionManager
long
allowedVideoJoiningTimeMs
Handler
eventHandler
VideoRendererEventListener
eventListener
ExtensionRendererMode
int
extensionRendererMode
ArrayList
<
Renderer
>
out
)
{
out
.
add
(
new
MediaCodecVideoRenderer
(
context
MediaCodecSelector
.
DEFAULT
allowedVideoJoiningTimeMs
drmSessionManager
false
eventHandler
eventListener
MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY
)
)
;
if
(
extensionRendererMode
=
=
EXTENSION_RENDERER_MODE_OFF
)
{
return
;
}
int
extensionRendererIndex
=
out
.
size
(
)
;
if
(
extensionRendererMode
=
=
EXTENSION_RENDERER_MODE_PREFER
)
{
extensionRendererIndex
-
-
;
}
try
{
Class
<
?
>
clazz
=
Class
.
forName
(
"
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ext
.
vp9
.
LibvpxVideoRenderer
"
)
;
Constructor
<
?
>
constructor
=
clazz
.
getConstructor
(
boolean
.
class
long
.
class
Handler
.
class
VideoRendererEventListener
.
class
int
.
class
)
;
Renderer
renderer
=
(
Renderer
)
constructor
.
newInstance
(
true
allowedVideoJoiningTimeMs
eventHandler
eventListener
MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY
)
;
out
.
add
(
extensionRendererIndex
+
+
renderer
)
;
Log
.
i
(
TAG
"
Loaded
LibvpxVideoRenderer
.
"
)
;
}
catch
(
ClassNotFoundException
e
)
{
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
e
)
;
}
}
protected
void
buildAudioRenderers
(
Context
context
DrmSessionManager
<
FrameworkMediaCrypto
>
drmSessionManager
AudioProcessor
[
]
audioProcessors
Handler
eventHandler
AudioRendererEventListener
eventListener
ExtensionRendererMode
int
extensionRendererMode
ArrayList
<
Renderer
>
out
)
{
out
.
add
(
new
MediaCodecAudioRenderer
(
MediaCodecSelector
.
DEFAULT
drmSessionManager
true
eventHandler
eventListener
AudioCapabilities
.
getCapabilities
(
context
)
audioProcessors
)
)
;
if
(
extensionRendererMode
=
=
EXTENSION_RENDERER_MODE_OFF
)
{
return
;
}
int
extensionRendererIndex
=
out
.
size
(
)
;
if
(
extensionRendererMode
=
=
EXTENSION_RENDERER_MODE_PREFER
)
{
extensionRendererIndex
-
-
;
}
try
{
Class
<
?
>
clazz
=
Class
.
forName
(
"
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ext
.
opus
.
LibopusAudioRenderer
"
)
;
Constructor
<
?
>
constructor
=
clazz
.
getConstructor
(
Handler
.
class
AudioRendererEventListener
.
class
AudioProcessor
[
]
.
class
)
;
Renderer
renderer
=
(
Renderer
)
constructor
.
newInstance
(
eventHandler
eventListener
audioProcessors
)
;
out
.
add
(
extensionRendererIndex
+
+
renderer
)
;
Log
.
i
(
TAG
"
Loaded
LibopusAudioRenderer
.
"
)
;
}
catch
(
ClassNotFoundException
e
)
{
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
e
)
;
}
try
{
Class
<
?
>
clazz
=
Class
.
forName
(
"
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ext
.
flac
.
LibflacAudioRenderer
"
)
;
Constructor
<
?
>
constructor
=
clazz
.
getConstructor
(
Handler
.
class
AudioRendererEventListener
.
class
AudioProcessor
[
]
.
class
)
;
Renderer
renderer
=
(
Renderer
)
constructor
.
newInstance
(
eventHandler
eventListener
audioProcessors
)
;
out
.
add
(
extensionRendererIndex
+
+
renderer
)
;
Log
.
i
(
TAG
"
Loaded
LibflacAudioRenderer
.
"
)
;
}
catch
(
ClassNotFoundException
e
)
{
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
e
)
;
}
try
{
Class
<
?
>
clazz
=
Class
.
forName
(
"
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ext
.
ffmpeg
.
FfmpegAudioRenderer
"
)
;
Constructor
<
?
>
constructor
=
clazz
.
getConstructor
(
Handler
.
class
AudioRendererEventListener
.
class
AudioProcessor
[
]
.
class
)
;
Renderer
renderer
=
(
Renderer
)
constructor
.
newInstance
(
eventHandler
eventListener
audioProcessors
)
;
out
.
add
(
extensionRendererIndex
+
+
renderer
)
;
Log
.
i
(
TAG
"
Loaded
FfmpegAudioRenderer
.
"
)
;
}
catch
(
ClassNotFoundException
e
)
{
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
e
)
;
}
}
protected
void
buildTextRenderers
(
Context
context
TextRenderer
.
Output
output
Looper
outputLooper
ExtensionRendererMode
int
extensionRendererMode
ArrayList
<
Renderer
>
out
)
{
out
.
add
(
new
TextRenderer
(
output
outputLooper
)
)
;
}
protected
void
buildMetadataRenderers
(
Context
context
MetadataRenderer
.
Output
output
Looper
outputLooper
ExtensionRendererMode
int
extensionRendererMode
ArrayList
<
Renderer
>
out
)
{
out
.
add
(
new
MetadataRenderer
(
output
outputLooper
)
)
;
}
protected
void
buildMiscellaneousRenderers
(
Context
context
Handler
eventHandler
ExtensionRendererMode
int
extensionRendererMode
ArrayList
<
Renderer
>
out
)
{
}
protected
AudioProcessor
[
]
buildAudioProcessors
(
)
{
return
new
AudioProcessor
[
0
]
;
}
}
