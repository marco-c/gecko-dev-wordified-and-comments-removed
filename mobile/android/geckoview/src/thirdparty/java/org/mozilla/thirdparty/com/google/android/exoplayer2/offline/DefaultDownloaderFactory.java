package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
;
import
android
.
net
.
Uri
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
lang
.
reflect
.
Constructor
;
import
java
.
util
.
List
;
public
class
DefaultDownloaderFactory
implements
DownloaderFactory
{
Nullable
private
static
final
Constructor
<
?
extends
Downloader
>
DASH_DOWNLOADER_CONSTRUCTOR
;
Nullable
private
static
final
Constructor
<
?
extends
Downloader
>
HLS_DOWNLOADER_CONSTRUCTOR
;
Nullable
private
static
final
Constructor
<
?
extends
Downloader
>
SS_DOWNLOADER_CONSTRUCTOR
;
static
{
Constructor
<
?
extends
Downloader
>
dashDownloaderConstructor
=
null
;
try
{
dashDownloaderConstructor
=
getDownloaderConstructor
(
Class
.
forName
(
"
com
.
google
.
android
.
exoplayer2
.
source
.
dash
.
offline
.
DashDownloader
"
)
)
;
}
catch
(
ClassNotFoundException
e
)
{
}
DASH_DOWNLOADER_CONSTRUCTOR
=
dashDownloaderConstructor
;
Constructor
<
?
extends
Downloader
>
hlsDownloaderConstructor
=
null
;
try
{
hlsDownloaderConstructor
=
getDownloaderConstructor
(
Class
.
forName
(
"
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
offline
.
HlsDownloader
"
)
)
;
}
catch
(
ClassNotFoundException
e
)
{
}
HLS_DOWNLOADER_CONSTRUCTOR
=
hlsDownloaderConstructor
;
Constructor
<
?
extends
Downloader
>
ssDownloaderConstructor
=
null
;
try
{
ssDownloaderConstructor
=
getDownloaderConstructor
(
Class
.
forName
(
"
com
.
google
.
android
.
exoplayer2
.
source
.
smoothstreaming
.
offline
.
SsDownloader
"
)
)
;
}
catch
(
ClassNotFoundException
e
)
{
}
SS_DOWNLOADER_CONSTRUCTOR
=
ssDownloaderConstructor
;
}
private
final
DownloaderConstructorHelper
downloaderConstructorHelper
;
public
DefaultDownloaderFactory
(
DownloaderConstructorHelper
downloaderConstructorHelper
)
{
this
.
downloaderConstructorHelper
=
downloaderConstructorHelper
;
}
Override
public
Downloader
createDownloader
(
DownloadRequest
request
)
{
switch
(
request
.
type
)
{
case
DownloadRequest
.
TYPE_PROGRESSIVE
:
return
new
ProgressiveDownloader
(
request
.
uri
request
.
customCacheKey
downloaderConstructorHelper
)
;
case
DownloadRequest
.
TYPE_DASH
:
return
createDownloader
(
request
DASH_DOWNLOADER_CONSTRUCTOR
)
;
case
DownloadRequest
.
TYPE_HLS
:
return
createDownloader
(
request
HLS_DOWNLOADER_CONSTRUCTOR
)
;
case
DownloadRequest
.
TYPE_SS
:
return
createDownloader
(
request
SS_DOWNLOADER_CONSTRUCTOR
)
;
default
:
throw
new
IllegalArgumentException
(
"
Unsupported
type
:
"
+
request
.
type
)
;
}
}
private
Downloader
createDownloader
(
DownloadRequest
request
Nullable
Constructor
<
?
extends
Downloader
>
constructor
)
{
if
(
constructor
=
=
null
)
{
throw
new
IllegalStateException
(
"
Module
missing
for
:
"
+
request
.
type
)
;
}
try
{
return
constructor
.
newInstance
(
request
.
uri
request
.
streamKeys
downloaderConstructorHelper
)
;
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
"
Failed
to
instantiate
downloader
for
:
"
+
request
.
type
e
)
;
}
}
private
static
Constructor
<
?
extends
Downloader
>
getDownloaderConstructor
(
Class
<
?
>
clazz
)
{
try
{
return
clazz
.
asSubclass
(
Downloader
.
class
)
.
getConstructor
(
Uri
.
class
List
.
class
DownloaderConstructorHelper
.
class
)
;
}
catch
(
NoSuchMethodException
e
)
{
throw
new
RuntimeException
(
"
Downloader
constructor
missing
"
e
)
;
}
}
}
