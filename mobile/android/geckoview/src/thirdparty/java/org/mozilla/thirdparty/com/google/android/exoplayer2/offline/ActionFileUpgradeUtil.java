package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
;
import
static
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
.
Download
.
STATE_QUEUED
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
WorkerThread
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
public
final
class
ActionFileUpgradeUtil
{
public
interface
DownloadIdProvider
{
String
getId
(
DownloadRequest
downloadRequest
)
;
}
private
ActionFileUpgradeUtil
(
)
{
}
WorkerThread
SuppressWarnings
(
"
deprecation
"
)
public
static
void
upgradeAndDelete
(
File
actionFilePath
Nullable
DownloadIdProvider
downloadIdProvider
DefaultDownloadIndex
downloadIndex
boolean
deleteOnFailure
boolean
addNewDownloadsAsCompleted
)
throws
IOException
{
ActionFile
actionFile
=
new
ActionFile
(
actionFilePath
)
;
if
(
actionFile
.
exists
(
)
)
{
boolean
success
=
false
;
try
{
long
nowMs
=
System
.
currentTimeMillis
(
)
;
for
(
DownloadRequest
request
:
actionFile
.
load
(
)
)
{
if
(
downloadIdProvider
!
=
null
)
{
request
=
request
.
copyWithId
(
downloadIdProvider
.
getId
(
request
)
)
;
}
mergeRequest
(
request
downloadIndex
addNewDownloadsAsCompleted
nowMs
)
;
}
success
=
true
;
}
finally
{
if
(
success
|
|
deleteOnFailure
)
{
actionFile
.
delete
(
)
;
}
}
}
}
static
void
mergeRequest
(
DownloadRequest
request
DefaultDownloadIndex
downloadIndex
boolean
addNewDownloadAsCompleted
long
nowMs
)
throws
IOException
{
Nullable
Download
download
=
downloadIndex
.
getDownload
(
request
.
id
)
;
if
(
download
!
=
null
)
{
download
=
DownloadManager
.
mergeRequest
(
download
request
download
.
stopReason
nowMs
)
;
}
else
{
download
=
new
Download
(
request
addNewDownloadAsCompleted
?
Download
.
STATE_COMPLETED
:
STATE_QUEUED
nowMs
nowMs
C
.
LENGTH_UNSET
Download
.
STOP_REASON_NONE
Download
.
FAILURE_REASON_NONE
)
;
}
downloadIndex
.
putDownload
(
download
)
;
}
}
