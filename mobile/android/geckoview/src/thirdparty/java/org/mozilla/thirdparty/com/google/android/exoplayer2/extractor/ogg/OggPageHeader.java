package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ogg
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ParserException
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorInput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
EOFException
;
import
java
.
io
.
IOException
;
final
class
OggPageHeader
{
public
static
final
int
EMPTY_PAGE_HEADER_SIZE
=
27
;
public
static
final
int
MAX_SEGMENT_COUNT
=
255
;
public
static
final
int
MAX_PAGE_PAYLOAD
=
255
*
255
;
public
static
final
int
MAX_PAGE_SIZE
=
EMPTY_PAGE_HEADER_SIZE
+
MAX_SEGMENT_COUNT
+
MAX_PAGE_PAYLOAD
;
private
static
final
int
TYPE_OGGS
=
Util
.
getIntegerCodeForString
(
"
OggS
"
)
;
public
int
revision
;
public
int
type
;
public
long
granulePosition
;
public
long
streamSerialNumber
;
public
long
pageSequenceNumber
;
public
long
pageChecksum
;
public
int
pageSegmentCount
;
public
int
headerSize
;
public
int
bodySize
;
public
final
int
[
]
laces
=
new
int
[
MAX_SEGMENT_COUNT
]
;
private
final
ParsableByteArray
scratch
=
new
ParsableByteArray
(
MAX_SEGMENT_COUNT
)
;
public
void
reset
(
)
{
revision
=
0
;
type
=
0
;
granulePosition
=
0
;
streamSerialNumber
=
0
;
pageSequenceNumber
=
0
;
pageChecksum
=
0
;
pageSegmentCount
=
0
;
headerSize
=
0
;
bodySize
=
0
;
}
public
boolean
populate
(
ExtractorInput
input
boolean
quiet
)
throws
IOException
InterruptedException
{
scratch
.
reset
(
)
;
reset
(
)
;
boolean
hasEnoughBytes
=
input
.
getLength
(
)
=
=
C
.
LENGTH_UNSET
|
|
input
.
getLength
(
)
-
input
.
getPeekPosition
(
)
>
=
EMPTY_PAGE_HEADER_SIZE
;
if
(
!
hasEnoughBytes
|
|
!
input
.
peekFully
(
scratch
.
data
0
EMPTY_PAGE_HEADER_SIZE
true
)
)
{
if
(
quiet
)
{
return
false
;
}
else
{
throw
new
EOFException
(
)
;
}
}
if
(
scratch
.
readUnsignedInt
(
)
!
=
TYPE_OGGS
)
{
if
(
quiet
)
{
return
false
;
}
else
{
throw
new
ParserException
(
"
expected
OggS
capture
pattern
at
begin
of
page
"
)
;
}
}
revision
=
scratch
.
readUnsignedByte
(
)
;
if
(
revision
!
=
0x00
)
{
if
(
quiet
)
{
return
false
;
}
else
{
throw
new
ParserException
(
"
unsupported
bit
stream
revision
"
)
;
}
}
type
=
scratch
.
readUnsignedByte
(
)
;
granulePosition
=
scratch
.
readLittleEndianLong
(
)
;
streamSerialNumber
=
scratch
.
readLittleEndianUnsignedInt
(
)
;
pageSequenceNumber
=
scratch
.
readLittleEndianUnsignedInt
(
)
;
pageChecksum
=
scratch
.
readLittleEndianUnsignedInt
(
)
;
pageSegmentCount
=
scratch
.
readUnsignedByte
(
)
;
headerSize
=
EMPTY_PAGE_HEADER_SIZE
+
pageSegmentCount
;
scratch
.
reset
(
)
;
input
.
peekFully
(
scratch
.
data
0
pageSegmentCount
)
;
for
(
int
i
=
0
;
i
<
pageSegmentCount
;
i
+
+
)
{
laces
[
i
]
=
scratch
.
readUnsignedByte
(
)
;
bodySize
+
=
laces
[
i
]
;
}
return
true
;
}
}
