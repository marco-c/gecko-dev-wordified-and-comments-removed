package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
android
.
util
.
Log
;
import
android
.
util
.
Pair
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ExoPlayer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
Allocator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
io
.
IOException
;
public
final
class
LoopingMediaSource
implements
MediaSource
{
public
static
final
int
MAX_EXPOSED_PERIODS
=
157680000
;
private
static
final
String
TAG
=
"
LoopingMediaSource
"
;
private
final
MediaSource
childSource
;
private
final
int
loopCount
;
private
int
childPeriodCount
;
public
LoopingMediaSource
(
MediaSource
childSource
)
{
this
(
childSource
Integer
.
MAX_VALUE
)
;
}
public
LoopingMediaSource
(
MediaSource
childSource
int
loopCount
)
{
Assertions
.
checkArgument
(
loopCount
>
0
)
;
this
.
childSource
=
childSource
;
this
.
loopCount
=
loopCount
;
}
Override
public
void
prepareSource
(
ExoPlayer
player
boolean
isTopLevelSource
final
Listener
listener
)
{
childSource
.
prepareSource
(
player
false
new
Listener
(
)
{
Override
public
void
onSourceInfoRefreshed
(
Timeline
timeline
Object
manifest
)
{
childPeriodCount
=
timeline
.
getPeriodCount
(
)
;
listener
.
onSourceInfoRefreshed
(
new
LoopingTimeline
(
timeline
loopCount
)
manifest
)
;
}
}
)
;
}
Override
public
void
maybeThrowSourceInfoRefreshError
(
)
throws
IOException
{
childSource
.
maybeThrowSourceInfoRefreshError
(
)
;
}
Override
public
MediaPeriod
createPeriod
(
int
index
Allocator
allocator
long
positionUs
)
{
return
childSource
.
createPeriod
(
index
%
childPeriodCount
allocator
positionUs
)
;
}
Override
public
void
releasePeriod
(
MediaPeriod
mediaPeriod
)
{
childSource
.
releasePeriod
(
mediaPeriod
)
;
}
Override
public
void
releaseSource
(
)
{
childSource
.
releaseSource
(
)
;
}
private
static
final
class
LoopingTimeline
extends
Timeline
{
private
final
Timeline
childTimeline
;
private
final
int
childPeriodCount
;
private
final
int
childWindowCount
;
private
final
int
loopCount
;
public
LoopingTimeline
(
Timeline
childTimeline
int
loopCount
)
{
this
.
childTimeline
=
childTimeline
;
childPeriodCount
=
childTimeline
.
getPeriodCount
(
)
;
childWindowCount
=
childTimeline
.
getWindowCount
(
)
;
int
maxLoopCount
=
MAX_EXPOSED_PERIODS
/
childPeriodCount
;
if
(
loopCount
>
maxLoopCount
)
{
if
(
loopCount
!
=
Integer
.
MAX_VALUE
)
{
Log
.
w
(
TAG
"
Capped
loops
to
avoid
overflow
:
"
+
loopCount
+
"
-
>
"
+
maxLoopCount
)
;
}
this
.
loopCount
=
maxLoopCount
;
}
else
{
this
.
loopCount
=
loopCount
;
}
}
Override
public
int
getWindowCount
(
)
{
return
childWindowCount
*
loopCount
;
}
Override
public
Window
getWindow
(
int
windowIndex
Window
window
boolean
setIds
long
defaultPositionProjectionUs
)
{
childTimeline
.
getWindow
(
windowIndex
%
childWindowCount
window
setIds
defaultPositionProjectionUs
)
;
int
periodIndexOffset
=
(
windowIndex
/
childWindowCount
)
*
childPeriodCount
;
window
.
firstPeriodIndex
+
=
periodIndexOffset
;
window
.
lastPeriodIndex
+
=
periodIndexOffset
;
return
window
;
}
Override
public
int
getPeriodCount
(
)
{
return
childPeriodCount
*
loopCount
;
}
Override
public
Period
getPeriod
(
int
periodIndex
Period
period
boolean
setIds
)
{
childTimeline
.
getPeriod
(
periodIndex
%
childPeriodCount
period
setIds
)
;
int
loopCount
=
(
periodIndex
/
childPeriodCount
)
;
period
.
windowIndex
+
=
loopCount
*
childWindowCount
;
if
(
setIds
)
{
period
.
uid
=
Pair
.
create
(
loopCount
period
.
uid
)
;
}
return
period
;
}
Override
public
int
getIndexOfPeriod
(
Object
uid
)
{
if
(
!
(
uid
instanceof
Pair
)
)
{
return
C
.
INDEX_UNSET
;
}
Pair
<
?
?
>
loopCountAndChildUid
=
(
Pair
<
?
?
>
)
uid
;
if
(
!
(
loopCountAndChildUid
.
first
instanceof
Integer
)
)
{
return
C
.
INDEX_UNSET
;
}
int
loopCount
=
(
Integer
)
loopCountAndChildUid
.
first
;
int
periodIndexOffset
=
loopCount
*
childPeriodCount
;
return
childTimeline
.
getIndexOfPeriod
(
loopCountAndChildUid
.
second
)
+
periodIndexOffset
;
}
}
}
