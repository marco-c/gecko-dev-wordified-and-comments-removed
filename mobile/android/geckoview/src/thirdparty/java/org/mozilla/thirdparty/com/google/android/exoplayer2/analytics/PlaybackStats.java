package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
analytics
;
import
android
.
os
.
SystemClock
;
import
android
.
util
.
Pair
;
import
androidx
.
annotation
.
IntDef
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
analytics
.
AnalyticsListener
.
EventTime
;
import
java
.
lang
.
annotation
.
Documented
;
import
java
.
lang
.
annotation
.
ElementType
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
lang
.
annotation
.
Target
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
import
org
.
checkerframework
.
checker
.
nullness
.
compatqual
.
NullableType
;
public
final
class
PlaybackStats
{
Documented
Retention
(
RetentionPolicy
.
SOURCE
)
Target
(
{
ElementType
.
TYPE_PARAMETER
ElementType
.
TYPE_USE
}
)
IntDef
(
{
PLAYBACK_STATE_NOT_STARTED
PLAYBACK_STATE_JOINING_BACKGROUND
PLAYBACK_STATE_JOINING_FOREGROUND
PLAYBACK_STATE_PLAYING
PLAYBACK_STATE_PAUSED
PLAYBACK_STATE_SEEKING
PLAYBACK_STATE_BUFFERING
PLAYBACK_STATE_PAUSED_BUFFERING
PLAYBACK_STATE_SEEK_BUFFERING
PLAYBACK_STATE_SUPPRESSED
PLAYBACK_STATE_SUPPRESSED_BUFFERING
PLAYBACK_STATE_ENDED
PLAYBACK_STATE_STOPPED
PLAYBACK_STATE_FAILED
PLAYBACK_STATE_INTERRUPTED_BY_AD
PLAYBACK_STATE_ABANDONED
}
)
interface
PlaybackState
{
}
public
static
final
int
PLAYBACK_STATE_NOT_STARTED
=
0
;
public
static
final
int
PLAYBACK_STATE_JOINING_BACKGROUND
=
1
;
public
static
final
int
PLAYBACK_STATE_JOINING_FOREGROUND
=
2
;
public
static
final
int
PLAYBACK_STATE_PLAYING
=
3
;
public
static
final
int
PLAYBACK_STATE_PAUSED
=
4
;
public
static
final
int
PLAYBACK_STATE_SEEKING
=
5
;
public
static
final
int
PLAYBACK_STATE_BUFFERING
=
6
;
public
static
final
int
PLAYBACK_STATE_PAUSED_BUFFERING
=
7
;
public
static
final
int
PLAYBACK_STATE_SEEK_BUFFERING
=
8
;
public
static
final
int
PLAYBACK_STATE_SUPPRESSED
=
9
;
public
static
final
int
PLAYBACK_STATE_SUPPRESSED_BUFFERING
=
10
;
public
static
final
int
PLAYBACK_STATE_ENDED
=
11
;
public
static
final
int
PLAYBACK_STATE_STOPPED
=
12
;
public
static
final
int
PLAYBACK_STATE_FAILED
=
13
;
public
static
final
int
PLAYBACK_STATE_INTERRUPTED_BY_AD
=
14
;
public
static
final
int
PLAYBACK_STATE_ABANDONED
=
15
;
static
final
int
PLAYBACK_STATE_COUNT
=
16
;
public
static
final
PlaybackStats
EMPTY
=
merge
(
)
;
public
static
PlaybackStats
merge
(
PlaybackStats
.
.
.
playbackStats
)
{
int
playbackCount
=
0
;
long
[
]
playbackStateDurationsMs
=
new
long
[
PLAYBACK_STATE_COUNT
]
;
long
firstReportedTimeMs
=
C
.
TIME_UNSET
;
int
foregroundPlaybackCount
=
0
;
int
abandonedBeforeReadyCount
=
0
;
int
endedCount
=
0
;
int
backgroundJoiningCount
=
0
;
long
totalValidJoinTimeMs
=
C
.
TIME_UNSET
;
int
validJoinTimeCount
=
0
;
int
totalPauseCount
=
0
;
int
totalPauseBufferCount
=
0
;
int
totalSeekCount
=
0
;
int
totalRebufferCount
=
0
;
long
maxRebufferTimeMs
=
C
.
TIME_UNSET
;
int
adPlaybackCount
=
0
;
long
totalVideoFormatHeightTimeMs
=
0
;
long
totalVideoFormatHeightTimeProduct
=
0
;
long
totalVideoFormatBitrateTimeMs
=
0
;
long
totalVideoFormatBitrateTimeProduct
=
0
;
long
totalAudioFormatTimeMs
=
0
;
long
totalAudioFormatBitrateTimeProduct
=
0
;
int
initialVideoFormatHeightCount
=
0
;
int
initialVideoFormatBitrateCount
=
0
;
int
totalInitialVideoFormatHeight
=
C
.
LENGTH_UNSET
;
long
totalInitialVideoFormatBitrate
=
C
.
LENGTH_UNSET
;
int
initialAudioFormatBitrateCount
=
0
;
long
totalInitialAudioFormatBitrate
=
C
.
LENGTH_UNSET
;
long
totalBandwidthTimeMs
=
0
;
long
totalBandwidthBytes
=
0
;
long
totalDroppedFrames
=
0
;
long
totalAudioUnderruns
=
0
;
int
fatalErrorPlaybackCount
=
0
;
int
fatalErrorCount
=
0
;
int
nonFatalErrorCount
=
0
;
for
(
PlaybackStats
stats
:
playbackStats
)
{
playbackCount
+
=
stats
.
playbackCount
;
for
(
int
i
=
0
;
i
<
PLAYBACK_STATE_COUNT
;
i
+
+
)
{
playbackStateDurationsMs
[
i
]
+
=
stats
.
playbackStateDurationsMs
[
i
]
;
}
if
(
firstReportedTimeMs
=
=
C
.
TIME_UNSET
)
{
firstReportedTimeMs
=
stats
.
firstReportedTimeMs
;
}
else
if
(
stats
.
firstReportedTimeMs
!
=
C
.
TIME_UNSET
)
{
firstReportedTimeMs
=
Math
.
min
(
firstReportedTimeMs
stats
.
firstReportedTimeMs
)
;
}
foregroundPlaybackCount
+
=
stats
.
foregroundPlaybackCount
;
abandonedBeforeReadyCount
+
=
stats
.
abandonedBeforeReadyCount
;
endedCount
+
=
stats
.
endedCount
;
backgroundJoiningCount
+
=
stats
.
backgroundJoiningCount
;
if
(
totalValidJoinTimeMs
=
=
C
.
TIME_UNSET
)
{
totalValidJoinTimeMs
=
stats
.
totalValidJoinTimeMs
;
}
else
if
(
stats
.
totalValidJoinTimeMs
!
=
C
.
TIME_UNSET
)
{
totalValidJoinTimeMs
+
=
stats
.
totalValidJoinTimeMs
;
}
validJoinTimeCount
+
=
stats
.
validJoinTimeCount
;
totalPauseCount
+
=
stats
.
totalPauseCount
;
totalPauseBufferCount
+
=
stats
.
totalPauseBufferCount
;
totalSeekCount
+
=
stats
.
totalSeekCount
;
totalRebufferCount
+
=
stats
.
totalRebufferCount
;
if
(
maxRebufferTimeMs
=
=
C
.
TIME_UNSET
)
{
maxRebufferTimeMs
=
stats
.
maxRebufferTimeMs
;
}
else
if
(
stats
.
maxRebufferTimeMs
!
=
C
.
TIME_UNSET
)
{
maxRebufferTimeMs
=
Math
.
max
(
maxRebufferTimeMs
stats
.
maxRebufferTimeMs
)
;
}
adPlaybackCount
+
=
stats
.
adPlaybackCount
;
totalVideoFormatHeightTimeMs
+
=
stats
.
totalVideoFormatHeightTimeMs
;
totalVideoFormatHeightTimeProduct
+
=
stats
.
totalVideoFormatHeightTimeProduct
;
totalVideoFormatBitrateTimeMs
+
=
stats
.
totalVideoFormatBitrateTimeMs
;
totalVideoFormatBitrateTimeProduct
+
=
stats
.
totalVideoFormatBitrateTimeProduct
;
totalAudioFormatTimeMs
+
=
stats
.
totalAudioFormatTimeMs
;
totalAudioFormatBitrateTimeProduct
+
=
stats
.
totalAudioFormatBitrateTimeProduct
;
initialVideoFormatHeightCount
+
=
stats
.
initialVideoFormatHeightCount
;
initialVideoFormatBitrateCount
+
=
stats
.
initialVideoFormatBitrateCount
;
if
(
totalInitialVideoFormatHeight
=
=
C
.
LENGTH_UNSET
)
{
totalInitialVideoFormatHeight
=
stats
.
totalInitialVideoFormatHeight
;
}
else
if
(
stats
.
totalInitialVideoFormatHeight
!
=
C
.
LENGTH_UNSET
)
{
totalInitialVideoFormatHeight
+
=
stats
.
totalInitialVideoFormatHeight
;
}
if
(
totalInitialVideoFormatBitrate
=
=
C
.
LENGTH_UNSET
)
{
totalInitialVideoFormatBitrate
=
stats
.
totalInitialVideoFormatBitrate
;
}
else
if
(
stats
.
totalInitialVideoFormatBitrate
!
=
C
.
LENGTH_UNSET
)
{
totalInitialVideoFormatBitrate
+
=
stats
.
totalInitialVideoFormatBitrate
;
}
initialAudioFormatBitrateCount
+
=
stats
.
initialAudioFormatBitrateCount
;
if
(
totalInitialAudioFormatBitrate
=
=
C
.
LENGTH_UNSET
)
{
totalInitialAudioFormatBitrate
=
stats
.
totalInitialAudioFormatBitrate
;
}
else
if
(
stats
.
totalInitialAudioFormatBitrate
!
=
C
.
LENGTH_UNSET
)
{
totalInitialAudioFormatBitrate
+
=
stats
.
totalInitialAudioFormatBitrate
;
}
totalBandwidthTimeMs
+
=
stats
.
totalBandwidthTimeMs
;
totalBandwidthBytes
+
=
stats
.
totalBandwidthBytes
;
totalDroppedFrames
+
=
stats
.
totalDroppedFrames
;
totalAudioUnderruns
+
=
stats
.
totalAudioUnderruns
;
fatalErrorPlaybackCount
+
=
stats
.
fatalErrorPlaybackCount
;
fatalErrorCount
+
=
stats
.
fatalErrorCount
;
nonFatalErrorCount
+
=
stats
.
nonFatalErrorCount
;
}
return
new
PlaybackStats
(
playbackCount
playbackStateDurationsMs
Collections
.
emptyList
(
)
Collections
.
emptyList
(
)
firstReportedTimeMs
foregroundPlaybackCount
abandonedBeforeReadyCount
endedCount
backgroundJoiningCount
totalValidJoinTimeMs
validJoinTimeCount
totalPauseCount
totalPauseBufferCount
totalSeekCount
totalRebufferCount
maxRebufferTimeMs
adPlaybackCount
Collections
.
emptyList
(
)
Collections
.
emptyList
(
)
totalVideoFormatHeightTimeMs
totalVideoFormatHeightTimeProduct
totalVideoFormatBitrateTimeMs
totalVideoFormatBitrateTimeProduct
totalAudioFormatTimeMs
totalAudioFormatBitrateTimeProduct
initialVideoFormatHeightCount
initialVideoFormatBitrateCount
totalInitialVideoFormatHeight
totalInitialVideoFormatBitrate
initialAudioFormatBitrateCount
totalInitialAudioFormatBitrate
totalBandwidthTimeMs
totalBandwidthBytes
totalDroppedFrames
totalAudioUnderruns
fatalErrorPlaybackCount
fatalErrorCount
nonFatalErrorCount
Collections
.
emptyList
(
)
Collections
.
emptyList
(
)
)
;
}
public
final
int
playbackCount
;
public
final
List
<
Pair
<
EventTime
PlaybackState
Integer
>
>
playbackStateHistory
;
public
final
List
<
long
[
]
>
mediaTimeHistory
;
public
final
long
firstReportedTimeMs
;
public
final
int
foregroundPlaybackCount
;
public
final
int
abandonedBeforeReadyCount
;
public
final
int
endedCount
;
public
final
int
backgroundJoiningCount
;
public
final
long
totalValidJoinTimeMs
;
public
final
int
validJoinTimeCount
;
public
final
int
totalPauseCount
;
public
final
int
totalPauseBufferCount
;
public
final
int
totalSeekCount
;
public
final
int
totalRebufferCount
;
public
final
long
maxRebufferTimeMs
;
public
final
int
adPlaybackCount
;
public
final
List
<
Pair
<
EventTime
NullableType
Format
>
>
videoFormatHistory
;
public
final
List
<
Pair
<
EventTime
NullableType
Format
>
>
audioFormatHistory
;
public
final
long
totalVideoFormatHeightTimeMs
;
public
final
long
totalVideoFormatHeightTimeProduct
;
public
final
long
totalVideoFormatBitrateTimeMs
;
public
final
long
totalVideoFormatBitrateTimeProduct
;
public
final
long
totalAudioFormatTimeMs
;
public
final
long
totalAudioFormatBitrateTimeProduct
;
public
final
int
initialVideoFormatHeightCount
;
public
final
int
initialVideoFormatBitrateCount
;
public
final
int
totalInitialVideoFormatHeight
;
public
final
long
totalInitialVideoFormatBitrate
;
public
final
int
initialAudioFormatBitrateCount
;
public
final
long
totalInitialAudioFormatBitrate
;
public
final
long
totalBandwidthTimeMs
;
public
final
long
totalBandwidthBytes
;
public
final
long
totalDroppedFrames
;
public
final
long
totalAudioUnderruns
;
public
final
int
fatalErrorPlaybackCount
;
public
final
int
fatalErrorCount
;
public
final
int
nonFatalErrorCount
;
public
final
List
<
Pair
<
EventTime
Exception
>
>
fatalErrorHistory
;
public
final
List
<
Pair
<
EventTime
Exception
>
>
nonFatalErrorHistory
;
private
final
long
[
]
playbackStateDurationsMs
;
PlaybackStats
(
int
playbackCount
long
[
]
playbackStateDurationsMs
List
<
Pair
<
EventTime
PlaybackState
Integer
>
>
playbackStateHistory
List
<
long
[
]
>
mediaTimeHistory
long
firstReportedTimeMs
int
foregroundPlaybackCount
int
abandonedBeforeReadyCount
int
endedCount
int
backgroundJoiningCount
long
totalValidJoinTimeMs
int
validJoinTimeCount
int
totalPauseCount
int
totalPauseBufferCount
int
totalSeekCount
int
totalRebufferCount
long
maxRebufferTimeMs
int
adPlaybackCount
List
<
Pair
<
EventTime
NullableType
Format
>
>
videoFormatHistory
List
<
Pair
<
EventTime
NullableType
Format
>
>
audioFormatHistory
long
totalVideoFormatHeightTimeMs
long
totalVideoFormatHeightTimeProduct
long
totalVideoFormatBitrateTimeMs
long
totalVideoFormatBitrateTimeProduct
long
totalAudioFormatTimeMs
long
totalAudioFormatBitrateTimeProduct
int
initialVideoFormatHeightCount
int
initialVideoFormatBitrateCount
int
totalInitialVideoFormatHeight
long
totalInitialVideoFormatBitrate
int
initialAudioFormatBitrateCount
long
totalInitialAudioFormatBitrate
long
totalBandwidthTimeMs
long
totalBandwidthBytes
long
totalDroppedFrames
long
totalAudioUnderruns
int
fatalErrorPlaybackCount
int
fatalErrorCount
int
nonFatalErrorCount
List
<
Pair
<
EventTime
Exception
>
>
fatalErrorHistory
List
<
Pair
<
EventTime
Exception
>
>
nonFatalErrorHistory
)
{
this
.
playbackCount
=
playbackCount
;
this
.
playbackStateDurationsMs
=
playbackStateDurationsMs
;
this
.
playbackStateHistory
=
Collections
.
unmodifiableList
(
playbackStateHistory
)
;
this
.
mediaTimeHistory
=
Collections
.
unmodifiableList
(
mediaTimeHistory
)
;
this
.
firstReportedTimeMs
=
firstReportedTimeMs
;
this
.
foregroundPlaybackCount
=
foregroundPlaybackCount
;
this
.
abandonedBeforeReadyCount
=
abandonedBeforeReadyCount
;
this
.
endedCount
=
endedCount
;
this
.
backgroundJoiningCount
=
backgroundJoiningCount
;
this
.
totalValidJoinTimeMs
=
totalValidJoinTimeMs
;
this
.
validJoinTimeCount
=
validJoinTimeCount
;
this
.
totalPauseCount
=
totalPauseCount
;
this
.
totalPauseBufferCount
=
totalPauseBufferCount
;
this
.
totalSeekCount
=
totalSeekCount
;
this
.
totalRebufferCount
=
totalRebufferCount
;
this
.
maxRebufferTimeMs
=
maxRebufferTimeMs
;
this
.
adPlaybackCount
=
adPlaybackCount
;
this
.
videoFormatHistory
=
Collections
.
unmodifiableList
(
videoFormatHistory
)
;
this
.
audioFormatHistory
=
Collections
.
unmodifiableList
(
audioFormatHistory
)
;
this
.
totalVideoFormatHeightTimeMs
=
totalVideoFormatHeightTimeMs
;
this
.
totalVideoFormatHeightTimeProduct
=
totalVideoFormatHeightTimeProduct
;
this
.
totalVideoFormatBitrateTimeMs
=
totalVideoFormatBitrateTimeMs
;
this
.
totalVideoFormatBitrateTimeProduct
=
totalVideoFormatBitrateTimeProduct
;
this
.
totalAudioFormatTimeMs
=
totalAudioFormatTimeMs
;
this
.
totalAudioFormatBitrateTimeProduct
=
totalAudioFormatBitrateTimeProduct
;
this
.
initialVideoFormatHeightCount
=
initialVideoFormatHeightCount
;
this
.
initialVideoFormatBitrateCount
=
initialVideoFormatBitrateCount
;
this
.
totalInitialVideoFormatHeight
=
totalInitialVideoFormatHeight
;
this
.
totalInitialVideoFormatBitrate
=
totalInitialVideoFormatBitrate
;
this
.
initialAudioFormatBitrateCount
=
initialAudioFormatBitrateCount
;
this
.
totalInitialAudioFormatBitrate
=
totalInitialAudioFormatBitrate
;
this
.
totalBandwidthTimeMs
=
totalBandwidthTimeMs
;
this
.
totalBandwidthBytes
=
totalBandwidthBytes
;
this
.
totalDroppedFrames
=
totalDroppedFrames
;
this
.
totalAudioUnderruns
=
totalAudioUnderruns
;
this
.
fatalErrorPlaybackCount
=
fatalErrorPlaybackCount
;
this
.
fatalErrorCount
=
fatalErrorCount
;
this
.
nonFatalErrorCount
=
nonFatalErrorCount
;
this
.
fatalErrorHistory
=
Collections
.
unmodifiableList
(
fatalErrorHistory
)
;
this
.
nonFatalErrorHistory
=
Collections
.
unmodifiableList
(
nonFatalErrorHistory
)
;
}
public
long
getPlaybackStateDurationMs
(
PlaybackState
int
playbackState
)
{
return
playbackStateDurationsMs
[
playbackState
]
;
}
public
PlaybackState
int
getPlaybackStateAtTime
(
long
realtimeMs
)
{
PlaybackState
int
state
=
PLAYBACK_STATE_NOT_STARTED
;
for
(
Pair
<
EventTime
PlaybackState
Integer
>
timeAndState
:
playbackStateHistory
)
{
if
(
timeAndState
.
first
.
realtimeMs
>
realtimeMs
)
{
break
;
}
state
=
timeAndState
.
second
;
}
return
state
;
}
public
long
getMediaTimeMsAtRealtimeMs
(
long
realtimeMs
)
{
if
(
mediaTimeHistory
.
isEmpty
(
)
)
{
return
C
.
TIME_UNSET
;
}
int
nextIndex
=
0
;
while
(
nextIndex
<
mediaTimeHistory
.
size
(
)
&
&
mediaTimeHistory
.
get
(
nextIndex
)
[
0
]
<
=
realtimeMs
)
{
nextIndex
+
+
;
}
if
(
nextIndex
=
=
0
)
{
return
mediaTimeHistory
.
get
(
0
)
[
1
]
;
}
if
(
nextIndex
=
=
mediaTimeHistory
.
size
(
)
)
{
return
mediaTimeHistory
.
get
(
mediaTimeHistory
.
size
(
)
-
1
)
[
1
]
;
}
long
prevRealtimeMs
=
mediaTimeHistory
.
get
(
nextIndex
-
1
)
[
0
]
;
long
prevMediaTimeMs
=
mediaTimeHistory
.
get
(
nextIndex
-
1
)
[
1
]
;
long
nextRealtimeMs
=
mediaTimeHistory
.
get
(
nextIndex
)
[
0
]
;
long
nextMediaTimeMs
=
mediaTimeHistory
.
get
(
nextIndex
)
[
1
]
;
long
realtimeDurationMs
=
nextRealtimeMs
-
prevRealtimeMs
;
if
(
realtimeDurationMs
=
=
0
)
{
return
prevMediaTimeMs
;
}
float
fraction
=
(
float
)
(
realtimeMs
-
prevRealtimeMs
)
/
realtimeDurationMs
;
return
prevMediaTimeMs
+
(
long
)
(
(
nextMediaTimeMs
-
prevMediaTimeMs
)
*
fraction
)
;
}
public
long
getMeanJoinTimeMs
(
)
{
return
validJoinTimeCount
=
=
0
?
C
.
TIME_UNSET
:
totalValidJoinTimeMs
/
validJoinTimeCount
;
}
public
long
getTotalJoinTimeMs
(
)
{
return
getPlaybackStateDurationMs
(
PLAYBACK_STATE_JOINING_FOREGROUND
)
;
}
public
long
getTotalPlayTimeMs
(
)
{
return
getPlaybackStateDurationMs
(
PLAYBACK_STATE_PLAYING
)
;
}
public
long
getMeanPlayTimeMs
(
)
{
return
foregroundPlaybackCount
=
=
0
?
C
.
TIME_UNSET
:
getTotalPlayTimeMs
(
)
/
foregroundPlaybackCount
;
}
public
long
getTotalPausedTimeMs
(
)
{
return
getPlaybackStateDurationMs
(
PLAYBACK_STATE_PAUSED
)
+
getPlaybackStateDurationMs
(
PLAYBACK_STATE_PAUSED_BUFFERING
)
;
}
public
long
getMeanPausedTimeMs
(
)
{
return
foregroundPlaybackCount
=
=
0
?
C
.
TIME_UNSET
:
getTotalPausedTimeMs
(
)
/
foregroundPlaybackCount
;
}
public
long
getTotalRebufferTimeMs
(
)
{
return
getPlaybackStateDurationMs
(
PLAYBACK_STATE_BUFFERING
)
;
}
public
long
getMeanRebufferTimeMs
(
)
{
return
foregroundPlaybackCount
=
=
0
?
C
.
TIME_UNSET
:
getTotalRebufferTimeMs
(
)
/
foregroundPlaybackCount
;
}
public
long
getMeanSingleRebufferTimeMs
(
)
{
return
totalRebufferCount
=
=
0
?
C
.
TIME_UNSET
:
(
getPlaybackStateDurationMs
(
PLAYBACK_STATE_BUFFERING
)
+
getPlaybackStateDurationMs
(
PLAYBACK_STATE_PAUSED_BUFFERING
)
)
/
totalRebufferCount
;
}
public
long
getTotalSeekTimeMs
(
)
{
return
getPlaybackStateDurationMs
(
PLAYBACK_STATE_SEEKING
)
+
getPlaybackStateDurationMs
(
PLAYBACK_STATE_SEEK_BUFFERING
)
;
}
public
long
getMeanSeekTimeMs
(
)
{
return
foregroundPlaybackCount
=
=
0
?
C
.
TIME_UNSET
:
getTotalSeekTimeMs
(
)
/
foregroundPlaybackCount
;
}
public
long
getMeanSingleSeekTimeMs
(
)
{
return
totalSeekCount
=
=
0
?
C
.
TIME_UNSET
:
getTotalSeekTimeMs
(
)
/
totalSeekCount
;
}
public
long
getTotalWaitTimeMs
(
)
{
return
getPlaybackStateDurationMs
(
PLAYBACK_STATE_JOINING_FOREGROUND
)
+
getPlaybackStateDurationMs
(
PLAYBACK_STATE_BUFFERING
)
+
getPlaybackStateDurationMs
(
PLAYBACK_STATE_SEEKING
)
+
getPlaybackStateDurationMs
(
PLAYBACK_STATE_SEEK_BUFFERING
)
;
}
public
long
getMeanWaitTimeMs
(
)
{
return
foregroundPlaybackCount
=
=
0
?
C
.
TIME_UNSET
:
getTotalWaitTimeMs
(
)
/
foregroundPlaybackCount
;
}
public
long
getTotalPlayAndWaitTimeMs
(
)
{
return
getTotalPlayTimeMs
(
)
+
getTotalWaitTimeMs
(
)
;
}
public
long
getMeanPlayAndWaitTimeMs
(
)
{
return
foregroundPlaybackCount
=
=
0
?
C
.
TIME_UNSET
:
getTotalPlayAndWaitTimeMs
(
)
/
foregroundPlaybackCount
;
}
public
long
getTotalElapsedTimeMs
(
)
{
long
totalTimeMs
=
0
;
for
(
int
i
=
0
;
i
<
PLAYBACK_STATE_COUNT
;
i
+
+
)
{
totalTimeMs
+
=
playbackStateDurationsMs
[
i
]
;
}
return
totalTimeMs
;
}
public
long
getMeanElapsedTimeMs
(
)
{
return
playbackCount
=
=
0
?
C
.
TIME_UNSET
:
getTotalElapsedTimeMs
(
)
/
playbackCount
;
}
public
float
getAbandonedBeforeReadyRatio
(
)
{
int
foregroundAbandonedBeforeReady
=
abandonedBeforeReadyCount
-
(
playbackCount
-
foregroundPlaybackCount
)
;
return
foregroundPlaybackCount
=
=
0
?
0f
:
(
float
)
foregroundAbandonedBeforeReady
/
foregroundPlaybackCount
;
}
public
float
getEndedRatio
(
)
{
return
foregroundPlaybackCount
=
=
0
?
0f
:
(
float
)
endedCount
/
foregroundPlaybackCount
;
}
public
float
getMeanPauseCount
(
)
{
return
foregroundPlaybackCount
=
=
0
?
0f
:
(
float
)
totalPauseCount
/
foregroundPlaybackCount
;
}
public
float
getMeanPauseBufferCount
(
)
{
return
foregroundPlaybackCount
=
=
0
?
0f
:
(
float
)
totalPauseBufferCount
/
foregroundPlaybackCount
;
}
public
float
getMeanSeekCount
(
)
{
return
foregroundPlaybackCount
=
=
0
?
0f
:
(
float
)
totalSeekCount
/
foregroundPlaybackCount
;
}
public
float
getMeanRebufferCount
(
)
{
return
foregroundPlaybackCount
=
=
0
?
0f
:
(
float
)
totalRebufferCount
/
foregroundPlaybackCount
;
}
public
float
getWaitTimeRatio
(
)
{
long
playAndWaitTimeMs
=
getTotalPlayAndWaitTimeMs
(
)
;
return
playAndWaitTimeMs
=
=
0
?
0f
:
(
float
)
getTotalWaitTimeMs
(
)
/
playAndWaitTimeMs
;
}
public
float
getJoinTimeRatio
(
)
{
long
playAndWaitTimeMs
=
getTotalPlayAndWaitTimeMs
(
)
;
return
playAndWaitTimeMs
=
=
0
?
0f
:
(
float
)
getTotalJoinTimeMs
(
)
/
playAndWaitTimeMs
;
}
public
float
getRebufferTimeRatio
(
)
{
long
playAndWaitTimeMs
=
getTotalPlayAndWaitTimeMs
(
)
;
return
playAndWaitTimeMs
=
=
0
?
0f
:
(
float
)
getTotalRebufferTimeMs
(
)
/
playAndWaitTimeMs
;
}
public
float
getSeekTimeRatio
(
)
{
long
playAndWaitTimeMs
=
getTotalPlayAndWaitTimeMs
(
)
;
return
playAndWaitTimeMs
=
=
0
?
0f
:
(
float
)
getTotalSeekTimeMs
(
)
/
playAndWaitTimeMs
;
}
public
float
getRebufferRate
(
)
{
long
playTimeMs
=
getTotalPlayTimeMs
(
)
;
return
playTimeMs
=
=
0
?
0f
:
1000f
*
totalRebufferCount
/
playTimeMs
;
}
public
float
getMeanTimeBetweenRebuffers
(
)
{
return
1f
/
getRebufferRate
(
)
;
}
public
int
getMeanInitialVideoFormatHeight
(
)
{
return
initialVideoFormatHeightCount
=
=
0
?
C
.
LENGTH_UNSET
:
totalInitialVideoFormatHeight
/
initialVideoFormatHeightCount
;
}
public
int
getMeanInitialVideoFormatBitrate
(
)
{
return
initialVideoFormatBitrateCount
=
=
0
?
C
.
LENGTH_UNSET
:
(
int
)
(
totalInitialVideoFormatBitrate
/
initialVideoFormatBitrateCount
)
;
}
public
int
getMeanInitialAudioFormatBitrate
(
)
{
return
initialAudioFormatBitrateCount
=
=
0
?
C
.
LENGTH_UNSET
:
(
int
)
(
totalInitialAudioFormatBitrate
/
initialAudioFormatBitrateCount
)
;
}
public
int
getMeanVideoFormatHeight
(
)
{
return
totalVideoFormatHeightTimeMs
=
=
0
?
C
.
LENGTH_UNSET
:
(
int
)
(
totalVideoFormatHeightTimeProduct
/
totalVideoFormatHeightTimeMs
)
;
}
public
int
getMeanVideoFormatBitrate
(
)
{
return
totalVideoFormatBitrateTimeMs
=
=
0
?
C
.
LENGTH_UNSET
:
(
int
)
(
totalVideoFormatBitrateTimeProduct
/
totalVideoFormatBitrateTimeMs
)
;
}
public
int
getMeanAudioFormatBitrate
(
)
{
return
totalAudioFormatTimeMs
=
=
0
?
C
.
LENGTH_UNSET
:
(
int
)
(
totalAudioFormatBitrateTimeProduct
/
totalAudioFormatTimeMs
)
;
}
public
int
getMeanBandwidth
(
)
{
return
totalBandwidthTimeMs
=
=
0
?
C
.
LENGTH_UNSET
:
(
int
)
(
totalBandwidthBytes
*
8000
/
totalBandwidthTimeMs
)
;
}
public
float
getDroppedFramesRate
(
)
{
long
playTimeMs
=
getTotalPlayTimeMs
(
)
;
return
playTimeMs
=
=
0
?
0f
:
1000f
*
totalDroppedFrames
/
playTimeMs
;
}
public
float
getAudioUnderrunRate
(
)
{
long
playTimeMs
=
getTotalPlayTimeMs
(
)
;
return
playTimeMs
=
=
0
?
0f
:
1000f
*
totalAudioUnderruns
/
playTimeMs
;
}
public
float
getFatalErrorRatio
(
)
{
return
foregroundPlaybackCount
=
=
0
?
0f
:
(
float
)
fatalErrorPlaybackCount
/
foregroundPlaybackCount
;
}
public
float
getFatalErrorRate
(
)
{
long
playTimeMs
=
getTotalPlayTimeMs
(
)
;
return
playTimeMs
=
=
0
?
0f
:
1000f
*
fatalErrorCount
/
playTimeMs
;
}
public
float
getMeanTimeBetweenFatalErrors
(
)
{
return
1f
/
getFatalErrorRate
(
)
;
}
public
float
getMeanNonFatalErrorCount
(
)
{
return
foregroundPlaybackCount
=
=
0
?
0f
:
(
float
)
nonFatalErrorCount
/
foregroundPlaybackCount
;
}
public
float
getNonFatalErrorRate
(
)
{
long
playTimeMs
=
getTotalPlayTimeMs
(
)
;
return
playTimeMs
=
=
0
?
0f
:
1000f
*
nonFatalErrorCount
/
playTimeMs
;
}
public
float
getMeanTimeBetweenNonFatalErrors
(
)
{
return
1f
/
getNonFatalErrorRate
(
)
;
}
}
