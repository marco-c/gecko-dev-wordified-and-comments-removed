package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
java
.
nio
.
ByteBuffer
;
final
class
ResamplingAudioProcessor
extends
BaseAudioProcessor
{
Override
public
AudioFormat
onConfigure
(
AudioFormat
inputAudioFormat
)
throws
UnhandledAudioFormatException
{
C
.
PcmEncoding
int
encoding
=
inputAudioFormat
.
encoding
;
if
(
encoding
!
=
C
.
ENCODING_PCM_8BIT
&
&
encoding
!
=
C
.
ENCODING_PCM_16BIT
&
&
encoding
!
=
C
.
ENCODING_PCM_16BIT_BIG_ENDIAN
&
&
encoding
!
=
C
.
ENCODING_PCM_24BIT
&
&
encoding
!
=
C
.
ENCODING_PCM_32BIT
&
&
encoding
!
=
C
.
ENCODING_PCM_FLOAT
)
{
throw
new
UnhandledAudioFormatException
(
inputAudioFormat
)
;
}
return
encoding
!
=
C
.
ENCODING_PCM_16BIT
?
new
AudioFormat
(
inputAudioFormat
.
sampleRate
inputAudioFormat
.
channelCount
C
.
ENCODING_PCM_16BIT
)
:
AudioFormat
.
NOT_SET
;
}
Override
public
void
queueInput
(
ByteBuffer
inputBuffer
)
{
int
position
=
inputBuffer
.
position
(
)
;
int
limit
=
inputBuffer
.
limit
(
)
;
int
size
=
limit
-
position
;
int
resampledSize
;
switch
(
inputAudioFormat
.
encoding
)
{
case
C
.
ENCODING_PCM_8BIT
:
resampledSize
=
size
*
2
;
break
;
case
C
.
ENCODING_PCM_16BIT_BIG_ENDIAN
:
resampledSize
=
size
;
break
;
case
C
.
ENCODING_PCM_24BIT
:
resampledSize
=
(
size
/
3
)
*
2
;
break
;
case
C
.
ENCODING_PCM_32BIT
:
case
C
.
ENCODING_PCM_FLOAT
:
resampledSize
=
size
/
2
;
break
;
case
C
.
ENCODING_PCM_16BIT
:
case
C
.
ENCODING_INVALID
:
case
Format
.
NO_VALUE
:
default
:
throw
new
IllegalStateException
(
)
;
}
ByteBuffer
buffer
=
replaceOutputBuffer
(
resampledSize
)
;
switch
(
inputAudioFormat
.
encoding
)
{
case
C
.
ENCODING_PCM_8BIT
:
for
(
int
i
=
position
;
i
<
limit
;
i
+
+
)
{
buffer
.
put
(
(
byte
)
0
)
;
buffer
.
put
(
(
byte
)
(
(
inputBuffer
.
get
(
i
)
&
0xFF
)
-
128
)
)
;
}
break
;
case
C
.
ENCODING_PCM_16BIT_BIG_ENDIAN
:
for
(
int
i
=
position
;
i
<
limit
;
i
+
=
2
)
{
buffer
.
put
(
inputBuffer
.
get
(
i
+
1
)
)
;
buffer
.
put
(
inputBuffer
.
get
(
i
)
)
;
}
break
;
case
C
.
ENCODING_PCM_24BIT
:
for
(
int
i
=
position
;
i
<
limit
;
i
+
=
3
)
{
buffer
.
put
(
inputBuffer
.
get
(
i
+
1
)
)
;
buffer
.
put
(
inputBuffer
.
get
(
i
+
2
)
)
;
}
break
;
case
C
.
ENCODING_PCM_32BIT
:
for
(
int
i
=
position
;
i
<
limit
;
i
+
=
4
)
{
buffer
.
put
(
inputBuffer
.
get
(
i
+
2
)
)
;
buffer
.
put
(
inputBuffer
.
get
(
i
+
3
)
)
;
}
break
;
case
C
.
ENCODING_PCM_FLOAT
:
for
(
int
i
=
position
;
i
<
limit
;
i
+
=
4
)
{
short
value
=
(
short
)
(
inputBuffer
.
getFloat
(
i
)
*
Short
.
MAX_VALUE
)
;
buffer
.
put
(
(
byte
)
(
value
&
0xFF
)
)
;
buffer
.
put
(
(
byte
)
(
(
value
>
>
8
)
&
0xFF
)
)
;
}
break
;
case
C
.
ENCODING_PCM_16BIT
:
case
C
.
ENCODING_INVALID
:
case
Format
.
NO_VALUE
:
default
:
throw
new
IllegalStateException
(
)
;
}
inputBuffer
.
position
(
inputBuffer
.
limit
(
)
)
;
buffer
.
flip
(
)
;
}
}
