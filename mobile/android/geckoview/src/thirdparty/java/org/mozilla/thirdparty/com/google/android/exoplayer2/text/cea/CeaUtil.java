package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
text
.
cea
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
TrackOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
public
final
class
CeaUtil
{
private
static
final
String
TAG
=
"
CeaUtil
"
;
private
static
final
int
PAYLOAD_TYPE_CC
=
4
;
private
static
final
int
COUNTRY_CODE
=
0xB5
;
private
static
final
int
PROVIDER_CODE
=
0x31
;
private
static
final
int
USER_ID
=
0x47413934
;
private
static
final
int
USER_DATA_TYPE_CODE
=
0x3
;
public
static
void
consume
(
long
presentationTimeUs
ParsableByteArray
seiBuffer
TrackOutput
[
]
outputs
)
{
while
(
seiBuffer
.
bytesLeft
(
)
>
1
)
{
int
payloadType
=
readNon255TerminatedValue
(
seiBuffer
)
;
int
payloadSize
=
readNon255TerminatedValue
(
seiBuffer
)
;
if
(
payloadSize
=
=
-
1
|
|
payloadSize
>
seiBuffer
.
bytesLeft
(
)
)
{
Log
.
w
(
TAG
"
Skipping
remainder
of
malformed
SEI
NAL
unit
.
"
)
;
seiBuffer
.
setPosition
(
seiBuffer
.
limit
(
)
)
;
}
else
if
(
isSeiMessageCea608
(
payloadType
payloadSize
seiBuffer
)
)
{
seiBuffer
.
skipBytes
(
8
)
;
int
ccCount
=
seiBuffer
.
readUnsignedByte
(
)
&
0x1F
;
seiBuffer
.
skipBytes
(
1
)
;
int
sampleLength
=
ccCount
*
3
;
int
sampleStartPosition
=
seiBuffer
.
getPosition
(
)
;
for
(
TrackOutput
output
:
outputs
)
{
seiBuffer
.
setPosition
(
sampleStartPosition
)
;
output
.
sampleData
(
seiBuffer
sampleLength
)
;
output
.
sampleMetadata
(
presentationTimeUs
C
.
BUFFER_FLAG_KEY_FRAME
sampleLength
0
null
)
;
}
seiBuffer
.
skipBytes
(
payloadSize
-
(
10
+
ccCount
*
3
)
)
;
}
else
{
seiBuffer
.
skipBytes
(
payloadSize
)
;
}
}
}
private
static
int
readNon255TerminatedValue
(
ParsableByteArray
buffer
)
{
int
b
;
int
value
=
0
;
do
{
if
(
buffer
.
bytesLeft
(
)
=
=
0
)
{
return
-
1
;
}
b
=
buffer
.
readUnsignedByte
(
)
;
value
+
=
b
;
}
while
(
b
=
=
0xFF
)
;
return
value
;
}
private
static
boolean
isSeiMessageCea608
(
int
payloadType
int
payloadLength
ParsableByteArray
payload
)
{
if
(
payloadType
!
=
PAYLOAD_TYPE_CC
|
|
payloadLength
<
8
)
{
return
false
;
}
int
startPosition
=
payload
.
getPosition
(
)
;
int
countryCode
=
payload
.
readUnsignedByte
(
)
;
int
providerCode
=
payload
.
readUnsignedShort
(
)
;
int
userIdentifier
=
payload
.
readInt
(
)
;
int
userDataTypeCode
=
payload
.
readUnsignedByte
(
)
;
payload
.
setPosition
(
startPosition
)
;
return
countryCode
=
=
COUNTRY_CODE
&
&
providerCode
=
=
PROVIDER_CODE
&
&
userIdentifier
=
=
USER_ID
&
&
userDataTypeCode
=
=
USER_DATA_TYPE_CODE
;
}
private
CeaUtil
(
)
{
}
}
