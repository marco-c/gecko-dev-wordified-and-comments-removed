package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
playlist
;
import
android
.
net
.
Uri
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSourceEventListener
.
EventDispatcher
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
HlsDataSourceFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
LoadErrorHandlingPolicy
;
import
java
.
io
.
IOException
;
public
interface
HlsPlaylistTracker
{
interface
Factory
{
HlsPlaylistTracker
createTracker
(
HlsDataSourceFactory
dataSourceFactory
LoadErrorHandlingPolicy
loadErrorHandlingPolicy
HlsPlaylistParserFactory
playlistParserFactory
)
;
}
interface
PrimaryPlaylistListener
{
void
onPrimaryPlaylistRefreshed
(
HlsMediaPlaylist
mediaPlaylist
)
;
}
interface
PlaylistEventListener
{
void
onPlaylistChanged
(
)
;
boolean
onPlaylistError
(
Uri
url
long
blacklistDurationMs
)
;
}
final
class
PlaylistStuckException
extends
IOException
{
public
final
Uri
url
;
public
PlaylistStuckException
(
Uri
url
)
{
this
.
url
=
url
;
}
}
final
class
PlaylistResetException
extends
IOException
{
public
final
Uri
url
;
public
PlaylistResetException
(
Uri
url
)
{
this
.
url
=
url
;
}
}
void
start
(
Uri
initialPlaylistUri
EventDispatcher
eventDispatcher
PrimaryPlaylistListener
listener
)
;
void
stop
(
)
;
void
addListener
(
PlaylistEventListener
listener
)
;
void
removeListener
(
PlaylistEventListener
listener
)
;
Nullable
HlsMasterPlaylist
getMasterPlaylist
(
)
;
Nullable
HlsMediaPlaylist
getPlaylistSnapshot
(
Uri
url
boolean
isForPlayback
)
;
long
getInitialStartTimeUs
(
)
;
boolean
isSnapshotValid
(
Uri
url
)
;
void
maybeThrowPrimaryPlaylistRefreshError
(
)
throws
IOException
;
void
maybeThrowPlaylistRefreshError
(
Uri
url
)
throws
IOException
;
void
refreshPlaylist
(
Uri
url
)
;
boolean
isLive
(
)
;
}
