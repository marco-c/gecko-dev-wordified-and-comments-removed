package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Looper
;
import
android
.
os
.
SystemClock
;
import
androidx
.
annotation
.
CheckResult
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Player
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
.
MediaPeriodId
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSpec
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
concurrent
.
CopyOnWriteArrayList
;
public
interface
MediaSourceEventListener
{
final
class
LoadEventInfo
{
public
final
DataSpec
dataSpec
;
public
final
Uri
uri
;
public
final
Map
<
String
List
<
String
>
>
responseHeaders
;
public
final
long
elapsedRealtimeMs
;
public
final
long
loadDurationMs
;
public
final
long
bytesLoaded
;
public
LoadEventInfo
(
DataSpec
dataSpec
Uri
uri
Map
<
String
List
<
String
>
>
responseHeaders
long
elapsedRealtimeMs
long
loadDurationMs
long
bytesLoaded
)
{
this
.
dataSpec
=
dataSpec
;
this
.
uri
=
uri
;
this
.
responseHeaders
=
responseHeaders
;
this
.
elapsedRealtimeMs
=
elapsedRealtimeMs
;
this
.
loadDurationMs
=
loadDurationMs
;
this
.
bytesLoaded
=
bytesLoaded
;
}
}
final
class
MediaLoadData
{
public
final
int
dataType
;
public
final
int
trackType
;
Nullable
public
final
Format
trackFormat
;
public
final
int
trackSelectionReason
;
Nullable
public
final
Object
trackSelectionData
;
public
final
long
mediaStartTimeMs
;
public
final
long
mediaEndTimeMs
;
public
MediaLoadData
(
int
dataType
int
trackType
Nullable
Format
trackFormat
int
trackSelectionReason
Nullable
Object
trackSelectionData
long
mediaStartTimeMs
long
mediaEndTimeMs
)
{
this
.
dataType
=
dataType
;
this
.
trackType
=
trackType
;
this
.
trackFormat
=
trackFormat
;
this
.
trackSelectionReason
=
trackSelectionReason
;
this
.
trackSelectionData
=
trackSelectionData
;
this
.
mediaStartTimeMs
=
mediaStartTimeMs
;
this
.
mediaEndTimeMs
=
mediaEndTimeMs
;
}
}
default
void
onMediaPeriodCreated
(
int
windowIndex
MediaPeriodId
mediaPeriodId
)
{
}
default
void
onMediaPeriodReleased
(
int
windowIndex
MediaPeriodId
mediaPeriodId
)
{
}
default
void
onLoadStarted
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
)
{
}
default
void
onLoadCompleted
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
)
{
}
default
void
onLoadCanceled
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
)
{
}
default
void
onLoadError
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
IOException
error
boolean
wasCanceled
)
{
}
default
void
onReadingStarted
(
int
windowIndex
MediaPeriodId
mediaPeriodId
)
{
}
default
void
onUpstreamDiscarded
(
int
windowIndex
MediaPeriodId
mediaPeriodId
MediaLoadData
mediaLoadData
)
{
}
default
void
onDownstreamFormatChanged
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
MediaLoadData
mediaLoadData
)
{
}
final
class
EventDispatcher
{
public
final
int
windowIndex
;
Nullable
public
final
MediaPeriodId
mediaPeriodId
;
private
final
CopyOnWriteArrayList
<
ListenerAndHandler
>
listenerAndHandlers
;
private
final
long
mediaTimeOffsetMs
;
public
EventDispatcher
(
)
{
this
(
new
CopyOnWriteArrayList
<
>
(
)
0
null
0
)
;
}
private
EventDispatcher
(
CopyOnWriteArrayList
<
ListenerAndHandler
>
listenerAndHandlers
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
long
mediaTimeOffsetMs
)
{
this
.
listenerAndHandlers
=
listenerAndHandlers
;
this
.
windowIndex
=
windowIndex
;
this
.
mediaPeriodId
=
mediaPeriodId
;
this
.
mediaTimeOffsetMs
=
mediaTimeOffsetMs
;
}
CheckResult
public
EventDispatcher
withParameters
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
long
mediaTimeOffsetMs
)
{
return
new
EventDispatcher
(
listenerAndHandlers
windowIndex
mediaPeriodId
mediaTimeOffsetMs
)
;
}
public
void
addEventListener
(
Handler
handler
MediaSourceEventListener
eventListener
)
{
Assertions
.
checkArgument
(
handler
!
=
null
&
&
eventListener
!
=
null
)
;
listenerAndHandlers
.
add
(
new
ListenerAndHandler
(
handler
eventListener
)
)
;
}
public
void
removeEventListener
(
MediaSourceEventListener
eventListener
)
{
for
(
ListenerAndHandler
listenerAndHandler
:
listenerAndHandlers
)
{
if
(
listenerAndHandler
.
listener
=
=
eventListener
)
{
listenerAndHandlers
.
remove
(
listenerAndHandler
)
;
}
}
}
public
void
mediaPeriodCreated
(
)
{
MediaPeriodId
mediaPeriodId
=
Assertions
.
checkNotNull
(
this
.
mediaPeriodId
)
;
for
(
ListenerAndHandler
listenerAndHandler
:
listenerAndHandlers
)
{
final
MediaSourceEventListener
listener
=
listenerAndHandler
.
listener
;
postOrRun
(
listenerAndHandler
.
handler
(
)
-
>
listener
.
onMediaPeriodCreated
(
windowIndex
mediaPeriodId
)
)
;
}
}
public
void
mediaPeriodReleased
(
)
{
MediaPeriodId
mediaPeriodId
=
Assertions
.
checkNotNull
(
this
.
mediaPeriodId
)
;
for
(
ListenerAndHandler
listenerAndHandler
:
listenerAndHandlers
)
{
final
MediaSourceEventListener
listener
=
listenerAndHandler
.
listener
;
postOrRun
(
listenerAndHandler
.
handler
(
)
-
>
listener
.
onMediaPeriodReleased
(
windowIndex
mediaPeriodId
)
)
;
}
}
public
void
loadStarted
(
DataSpec
dataSpec
int
dataType
long
elapsedRealtimeMs
)
{
loadStarted
(
dataSpec
dataType
C
.
TRACK_TYPE_UNKNOWN
null
C
.
SELECTION_REASON_UNKNOWN
null
C
.
TIME_UNSET
C
.
TIME_UNSET
elapsedRealtimeMs
)
;
}
public
void
loadStarted
(
DataSpec
dataSpec
int
dataType
int
trackType
Nullable
Format
trackFormat
int
trackSelectionReason
Nullable
Object
trackSelectionData
long
mediaStartTimeUs
long
mediaEndTimeUs
long
elapsedRealtimeMs
)
{
loadStarted
(
new
LoadEventInfo
(
dataSpec
dataSpec
.
uri
Collections
.
emptyMap
(
)
elapsedRealtimeMs
0
0
)
new
MediaLoadData
(
dataType
trackType
trackFormat
trackSelectionReason
trackSelectionData
adjustMediaTime
(
mediaStartTimeUs
)
adjustMediaTime
(
mediaEndTimeUs
)
)
)
;
}
public
void
loadStarted
(
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
)
{
for
(
ListenerAndHandler
listenerAndHandler
:
listenerAndHandlers
)
{
final
MediaSourceEventListener
listener
=
listenerAndHandler
.
listener
;
postOrRun
(
listenerAndHandler
.
handler
(
)
-
>
listener
.
onLoadStarted
(
windowIndex
mediaPeriodId
loadEventInfo
mediaLoadData
)
)
;
}
}
public
void
loadCompleted
(
DataSpec
dataSpec
Uri
uri
Map
<
String
List
<
String
>
>
responseHeaders
int
dataType
long
elapsedRealtimeMs
long
loadDurationMs
long
bytesLoaded
)
{
loadCompleted
(
dataSpec
uri
responseHeaders
dataType
C
.
TRACK_TYPE_UNKNOWN
null
C
.
SELECTION_REASON_UNKNOWN
null
C
.
TIME_UNSET
C
.
TIME_UNSET
elapsedRealtimeMs
loadDurationMs
bytesLoaded
)
;
}
public
void
loadCompleted
(
DataSpec
dataSpec
Uri
uri
Map
<
String
List
<
String
>
>
responseHeaders
int
dataType
int
trackType
Nullable
Format
trackFormat
int
trackSelectionReason
Nullable
Object
trackSelectionData
long
mediaStartTimeUs
long
mediaEndTimeUs
long
elapsedRealtimeMs
long
loadDurationMs
long
bytesLoaded
)
{
loadCompleted
(
new
LoadEventInfo
(
dataSpec
uri
responseHeaders
elapsedRealtimeMs
loadDurationMs
bytesLoaded
)
new
MediaLoadData
(
dataType
trackType
trackFormat
trackSelectionReason
trackSelectionData
adjustMediaTime
(
mediaStartTimeUs
)
adjustMediaTime
(
mediaEndTimeUs
)
)
)
;
}
public
void
loadCompleted
(
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
)
{
for
(
ListenerAndHandler
listenerAndHandler
:
listenerAndHandlers
)
{
final
MediaSourceEventListener
listener
=
listenerAndHandler
.
listener
;
postOrRun
(
listenerAndHandler
.
handler
(
)
-
>
listener
.
onLoadCompleted
(
windowIndex
mediaPeriodId
loadEventInfo
mediaLoadData
)
)
;
}
}
public
void
loadCanceled
(
DataSpec
dataSpec
Uri
uri
Map
<
String
List
<
String
>
>
responseHeaders
int
dataType
long
elapsedRealtimeMs
long
loadDurationMs
long
bytesLoaded
)
{
loadCanceled
(
dataSpec
uri
responseHeaders
dataType
C
.
TRACK_TYPE_UNKNOWN
null
C
.
SELECTION_REASON_UNKNOWN
null
C
.
TIME_UNSET
C
.
TIME_UNSET
elapsedRealtimeMs
loadDurationMs
bytesLoaded
)
;
}
public
void
loadCanceled
(
DataSpec
dataSpec
Uri
uri
Map
<
String
List
<
String
>
>
responseHeaders
int
dataType
int
trackType
Nullable
Format
trackFormat
int
trackSelectionReason
Nullable
Object
trackSelectionData
long
mediaStartTimeUs
long
mediaEndTimeUs
long
elapsedRealtimeMs
long
loadDurationMs
long
bytesLoaded
)
{
loadCanceled
(
new
LoadEventInfo
(
dataSpec
uri
responseHeaders
elapsedRealtimeMs
loadDurationMs
bytesLoaded
)
new
MediaLoadData
(
dataType
trackType
trackFormat
trackSelectionReason
trackSelectionData
adjustMediaTime
(
mediaStartTimeUs
)
adjustMediaTime
(
mediaEndTimeUs
)
)
)
;
}
public
void
loadCanceled
(
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
)
{
for
(
ListenerAndHandler
listenerAndHandler
:
listenerAndHandlers
)
{
MediaSourceEventListener
listener
=
listenerAndHandler
.
listener
;
postOrRun
(
listenerAndHandler
.
handler
(
)
-
>
listener
.
onLoadCanceled
(
windowIndex
mediaPeriodId
loadEventInfo
mediaLoadData
)
)
;
}
}
public
void
loadError
(
DataSpec
dataSpec
Uri
uri
Map
<
String
List
<
String
>
>
responseHeaders
int
dataType
long
elapsedRealtimeMs
long
loadDurationMs
long
bytesLoaded
IOException
error
boolean
wasCanceled
)
{
loadError
(
dataSpec
uri
responseHeaders
dataType
C
.
TRACK_TYPE_UNKNOWN
null
C
.
SELECTION_REASON_UNKNOWN
null
C
.
TIME_UNSET
C
.
TIME_UNSET
elapsedRealtimeMs
loadDurationMs
bytesLoaded
error
wasCanceled
)
;
}
public
void
loadError
(
DataSpec
dataSpec
Uri
uri
Map
<
String
List
<
String
>
>
responseHeaders
int
dataType
int
trackType
Nullable
Format
trackFormat
int
trackSelectionReason
Nullable
Object
trackSelectionData
long
mediaStartTimeUs
long
mediaEndTimeUs
long
elapsedRealtimeMs
long
loadDurationMs
long
bytesLoaded
IOException
error
boolean
wasCanceled
)
{
loadError
(
new
LoadEventInfo
(
dataSpec
uri
responseHeaders
elapsedRealtimeMs
loadDurationMs
bytesLoaded
)
new
MediaLoadData
(
dataType
trackType
trackFormat
trackSelectionReason
trackSelectionData
adjustMediaTime
(
mediaStartTimeUs
)
adjustMediaTime
(
mediaEndTimeUs
)
)
error
wasCanceled
)
;
}
public
void
loadError
(
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
IOException
error
boolean
wasCanceled
)
{
for
(
ListenerAndHandler
listenerAndHandler
:
listenerAndHandlers
)
{
final
MediaSourceEventListener
listener
=
listenerAndHandler
.
listener
;
postOrRun
(
listenerAndHandler
.
handler
(
)
-
>
listener
.
onLoadError
(
windowIndex
mediaPeriodId
loadEventInfo
mediaLoadData
error
wasCanceled
)
)
;
}
}
public
void
readingStarted
(
)
{
MediaPeriodId
mediaPeriodId
=
Assertions
.
checkNotNull
(
this
.
mediaPeriodId
)
;
for
(
ListenerAndHandler
listenerAndHandler
:
listenerAndHandlers
)
{
final
MediaSourceEventListener
listener
=
listenerAndHandler
.
listener
;
postOrRun
(
listenerAndHandler
.
handler
(
)
-
>
listener
.
onReadingStarted
(
windowIndex
mediaPeriodId
)
)
;
}
}
public
void
upstreamDiscarded
(
int
trackType
long
mediaStartTimeUs
long
mediaEndTimeUs
)
{
upstreamDiscarded
(
new
MediaLoadData
(
C
.
DATA_TYPE_MEDIA
trackType
null
C
.
SELECTION_REASON_ADAPTIVE
null
adjustMediaTime
(
mediaStartTimeUs
)
adjustMediaTime
(
mediaEndTimeUs
)
)
)
;
}
public
void
upstreamDiscarded
(
MediaLoadData
mediaLoadData
)
{
MediaPeriodId
mediaPeriodId
=
Assertions
.
checkNotNull
(
this
.
mediaPeriodId
)
;
for
(
ListenerAndHandler
listenerAndHandler
:
listenerAndHandlers
)
{
final
MediaSourceEventListener
listener
=
listenerAndHandler
.
listener
;
postOrRun
(
listenerAndHandler
.
handler
(
)
-
>
listener
.
onUpstreamDiscarded
(
windowIndex
mediaPeriodId
mediaLoadData
)
)
;
}
}
public
void
downstreamFormatChanged
(
int
trackType
Nullable
Format
trackFormat
int
trackSelectionReason
Nullable
Object
trackSelectionData
long
mediaTimeUs
)
{
downstreamFormatChanged
(
new
MediaLoadData
(
C
.
DATA_TYPE_MEDIA
trackType
trackFormat
trackSelectionReason
trackSelectionData
adjustMediaTime
(
mediaTimeUs
)
C
.
TIME_UNSET
)
)
;
}
public
void
downstreamFormatChanged
(
MediaLoadData
mediaLoadData
)
{
for
(
ListenerAndHandler
listenerAndHandler
:
listenerAndHandlers
)
{
final
MediaSourceEventListener
listener
=
listenerAndHandler
.
listener
;
postOrRun
(
listenerAndHandler
.
handler
(
)
-
>
listener
.
onDownstreamFormatChanged
(
windowIndex
mediaPeriodId
mediaLoadData
)
)
;
}
}
private
long
adjustMediaTime
(
long
mediaTimeUs
)
{
long
mediaTimeMs
=
C
.
usToMs
(
mediaTimeUs
)
;
return
mediaTimeMs
=
=
C
.
TIME_UNSET
?
C
.
TIME_UNSET
:
mediaTimeOffsetMs
+
mediaTimeMs
;
}
private
void
postOrRun
(
Handler
handler
Runnable
runnable
)
{
if
(
handler
.
getLooper
(
)
=
=
Looper
.
myLooper
(
)
)
{
runnable
.
run
(
)
;
}
else
{
handler
.
post
(
runnable
)
;
}
}
private
static
final
class
ListenerAndHandler
{
public
final
Handler
handler
;
public
final
MediaSourceEventListener
listener
;
public
ListenerAndHandler
(
Handler
handler
MediaSourceEventListener
listener
)
{
this
.
handler
=
handler
;
this
.
listener
=
listener
;
}
}
}
}
