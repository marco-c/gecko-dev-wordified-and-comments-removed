package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
;
import
android
.
annotation
.
TargetApi
;
import
android
.
net
.
Uri
;
import
android
.
text
.
TextUtils
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
ExoMediaDrm
.
KeyRequest
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
ExoMediaDrm
.
ProvisionRequest
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSourceInputStream
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSpec
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
HttpDataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
HttpDataSource
.
InvalidResponseCodeException
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
UUID
;
TargetApi
(
18
)
public
final
class
HttpMediaDrmCallback
implements
MediaDrmCallback
{
private
static
final
int
MAX_MANUAL_REDIRECTS
=
5
;
private
final
HttpDataSource
.
Factory
dataSourceFactory
;
private
final
String
defaultLicenseUrl
;
private
final
boolean
forceDefaultLicenseUrl
;
private
final
Map
<
String
String
>
keyRequestProperties
;
public
HttpMediaDrmCallback
(
String
defaultLicenseUrl
HttpDataSource
.
Factory
dataSourceFactory
)
{
this
(
defaultLicenseUrl
false
dataSourceFactory
)
;
}
public
HttpMediaDrmCallback
(
String
defaultLicenseUrl
boolean
forceDefaultLicenseUrl
HttpDataSource
.
Factory
dataSourceFactory
)
{
this
.
dataSourceFactory
=
dataSourceFactory
;
this
.
defaultLicenseUrl
=
defaultLicenseUrl
;
this
.
forceDefaultLicenseUrl
=
forceDefaultLicenseUrl
;
this
.
keyRequestProperties
=
new
HashMap
<
>
(
)
;
}
public
void
setKeyRequestProperty
(
String
name
String
value
)
{
Assertions
.
checkNotNull
(
name
)
;
Assertions
.
checkNotNull
(
value
)
;
synchronized
(
keyRequestProperties
)
{
keyRequestProperties
.
put
(
name
value
)
;
}
}
public
void
clearKeyRequestProperty
(
String
name
)
{
Assertions
.
checkNotNull
(
name
)
;
synchronized
(
keyRequestProperties
)
{
keyRequestProperties
.
remove
(
name
)
;
}
}
public
void
clearAllKeyRequestProperties
(
)
{
synchronized
(
keyRequestProperties
)
{
keyRequestProperties
.
clear
(
)
;
}
}
Override
public
byte
[
]
executeProvisionRequest
(
UUID
uuid
ProvisionRequest
request
)
throws
IOException
{
String
url
=
request
.
getDefaultUrl
(
)
+
"
&
signedRequest
=
"
+
Util
.
fromUtf8Bytes
(
request
.
getData
(
)
)
;
return
executePost
(
dataSourceFactory
url
null
null
)
;
}
Override
public
byte
[
]
executeKeyRequest
(
UUID
uuid
KeyRequest
request
)
throws
Exception
{
String
url
=
request
.
getLicenseServerUrl
(
)
;
if
(
forceDefaultLicenseUrl
|
|
TextUtils
.
isEmpty
(
url
)
)
{
url
=
defaultLicenseUrl
;
}
Map
<
String
String
>
requestProperties
=
new
HashMap
<
>
(
)
;
String
contentType
=
C
.
PLAYREADY_UUID
.
equals
(
uuid
)
?
"
text
/
xml
"
:
(
C
.
CLEARKEY_UUID
.
equals
(
uuid
)
?
"
application
/
json
"
:
"
application
/
octet
-
stream
"
)
;
requestProperties
.
put
(
"
Content
-
Type
"
contentType
)
;
if
(
C
.
PLAYREADY_UUID
.
equals
(
uuid
)
)
{
requestProperties
.
put
(
"
SOAPAction
"
"
http
:
/
/
schemas
.
microsoft
.
com
/
DRM
/
2007
/
03
/
protocols
/
AcquireLicense
"
)
;
}
synchronized
(
keyRequestProperties
)
{
requestProperties
.
putAll
(
keyRequestProperties
)
;
}
return
executePost
(
dataSourceFactory
url
request
.
getData
(
)
requestProperties
)
;
}
private
static
byte
[
]
executePost
(
HttpDataSource
.
Factory
dataSourceFactory
String
url
Nullable
byte
[
]
httpBody
Nullable
Map
<
String
String
>
requestProperties
)
throws
IOException
{
HttpDataSource
dataSource
=
dataSourceFactory
.
createDataSource
(
)
;
if
(
requestProperties
!
=
null
)
{
for
(
Map
.
Entry
<
String
String
>
requestProperty
:
requestProperties
.
entrySet
(
)
)
{
dataSource
.
setRequestProperty
(
requestProperty
.
getKey
(
)
requestProperty
.
getValue
(
)
)
;
}
}
int
manualRedirectCount
=
0
;
while
(
true
)
{
DataSpec
dataSpec
=
new
DataSpec
(
Uri
.
parse
(
url
)
DataSpec
.
HTTP_METHOD_POST
httpBody
0
0
C
.
LENGTH_UNSET
null
DataSpec
.
FLAG_ALLOW_GZIP
)
;
DataSourceInputStream
inputStream
=
new
DataSourceInputStream
(
dataSource
dataSpec
)
;
try
{
return
Util
.
toByteArray
(
inputStream
)
;
}
catch
(
InvalidResponseCodeException
e
)
{
boolean
manuallyRedirect
=
(
e
.
responseCode
=
=
307
|
|
e
.
responseCode
=
=
308
)
&
&
manualRedirectCount
+
+
<
MAX_MANUAL_REDIRECTS
;
String
redirectUrl
=
manuallyRedirect
?
getRedirectUrl
(
e
)
:
null
;
if
(
redirectUrl
=
=
null
)
{
throw
e
;
}
url
=
redirectUrl
;
}
finally
{
Util
.
closeQuietly
(
inputStream
)
;
}
}
}
private
static
Nullable
String
getRedirectUrl
(
InvalidResponseCodeException
exception
)
{
Map
<
String
List
<
String
>
>
headerFields
=
exception
.
headerFields
;
if
(
headerFields
!
=
null
)
{
List
<
String
>
locationHeaders
=
headerFields
.
get
(
"
Location
"
)
;
if
(
locationHeaders
!
=
null
&
&
!
locationHeaders
.
isEmpty
(
)
)
{
return
locationHeaders
.
get
(
0
)
;
}
}
return
null
;
}
}
