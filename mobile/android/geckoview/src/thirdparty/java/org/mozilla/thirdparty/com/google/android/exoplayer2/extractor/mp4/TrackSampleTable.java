package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
mp4
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
final
class
TrackSampleTable
{
public
final
int
sampleCount
;
public
final
long
[
]
offsets
;
public
final
int
[
]
sizes
;
public
final
int
maximumSize
;
public
final
long
[
]
timestampsUs
;
public
final
int
[
]
flags
;
public
TrackSampleTable
(
long
[
]
offsets
int
[
]
sizes
int
maximumSize
long
[
]
timestampsUs
int
[
]
flags
)
{
Assertions
.
checkArgument
(
sizes
.
length
=
=
timestampsUs
.
length
)
;
Assertions
.
checkArgument
(
offsets
.
length
=
=
timestampsUs
.
length
)
;
Assertions
.
checkArgument
(
flags
.
length
=
=
timestampsUs
.
length
)
;
this
.
offsets
=
offsets
;
this
.
sizes
=
sizes
;
this
.
maximumSize
=
maximumSize
;
this
.
timestampsUs
=
timestampsUs
;
this
.
flags
=
flags
;
sampleCount
=
offsets
.
length
;
}
public
int
getIndexOfEarlierOrEqualSynchronizationSample
(
long
timeUs
)
{
int
startIndex
=
Util
.
binarySearchFloor
(
timestampsUs
timeUs
true
false
)
;
for
(
int
i
=
startIndex
;
i
>
=
0
;
i
-
-
)
{
if
(
(
flags
[
i
]
&
C
.
BUFFER_FLAG_KEY_FRAME
)
!
=
0
)
{
return
i
;
}
}
return
C
.
INDEX_UNSET
;
}
public
int
getIndexOfLaterOrEqualSynchronizationSample
(
long
timeUs
)
{
int
startIndex
=
Util
.
binarySearchCeil
(
timestampsUs
timeUs
true
false
)
;
for
(
int
i
=
startIndex
;
i
<
timestampsUs
.
length
;
i
+
+
)
{
if
(
(
flags
[
i
]
&
C
.
BUFFER_FLAG_KEY_FRAME
)
!
=
0
)
{
return
i
;
}
}
return
C
.
INDEX_UNSET
;
}
}
