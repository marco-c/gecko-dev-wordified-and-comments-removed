package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
;
import
android
.
content
.
Context
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Handler
;
import
android
.
os
.
HandlerThread
;
import
android
.
os
.
Message
;
import
android
.
util
.
SparseIntArray
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ExoPlaybackException
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
RendererCapabilities
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
RenderersFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
DrmSessionManager
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
FrameworkMediaCrypto
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaPeriod
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
.
MediaPeriodId
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
.
MediaSourceCaller
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSourceFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
ProgressiveMediaSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
TrackGroup
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
TrackGroupArray
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
chunk
.
MediaChunk
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
chunk
.
MediaChunkIterator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
BaseTrackSelection
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
DefaultTrackSelector
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
DefaultTrackSelector
.
Parameters
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
DefaultTrackSelector
.
SelectionOverride
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
MappingTrackSelector
.
MappedTrackInfo
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelection
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelectorResult
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
Allocator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
BandwidthMeter
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
.
Factory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DefaultAllocator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
TransferListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
import
java
.
lang
.
reflect
.
Constructor
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
import
org
.
checkerframework
.
checker
.
nullness
.
compatqual
.
NullableType
;
import
org
.
checkerframework
.
checker
.
nullness
.
qual
.
EnsuresNonNull
;
import
org
.
checkerframework
.
checker
.
nullness
.
qual
.
MonotonicNonNull
;
import
org
.
checkerframework
.
checker
.
nullness
.
qual
.
RequiresNonNull
;
public
final
class
DownloadHelper
{
public
static
final
Parameters
DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT
=
Parameters
.
DEFAULT_WITHOUT_CONTEXT
.
buildUpon
(
)
.
setForceHighestSupportedBitrate
(
true
)
.
build
(
)
;
Deprecated
public
static
final
Parameters
DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_VIEWPORT
=
DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT
;
Deprecated
public
static
final
DefaultTrackSelector
.
Parameters
DEFAULT_TRACK_SELECTOR_PARAMETERS
=
DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT
;
public
static
DefaultTrackSelector
.
Parameters
getDefaultTrackSelectorParameters
(
Context
context
)
{
return
Parameters
.
getDefaults
(
context
)
.
buildUpon
(
)
.
setForceHighestSupportedBitrate
(
true
)
.
build
(
)
;
}
public
interface
Callback
{
void
onPrepared
(
DownloadHelper
helper
)
;
void
onPrepareError
(
DownloadHelper
helper
IOException
e
)
;
}
public
static
class
LiveContentUnsupportedException
extends
IOException
{
}
Nullable
private
static
final
Constructor
<
?
extends
MediaSourceFactory
>
DASH_FACTORY_CONSTRUCTOR
=
getConstructor
(
"
com
.
google
.
android
.
exoplayer2
.
source
.
dash
.
DashMediaSource
Factory
"
)
;
Nullable
private
static
final
Constructor
<
?
extends
MediaSourceFactory
>
SS_FACTORY_CONSTRUCTOR
=
getConstructor
(
"
com
.
google
.
android
.
exoplayer2
.
source
.
smoothstreaming
.
SsMediaSource
Factory
"
)
;
Nullable
private
static
final
Constructor
<
?
extends
MediaSourceFactory
>
HLS_FACTORY_CONSTRUCTOR
=
getConstructor
(
"
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
HlsMediaSource
Factory
"
)
;
Deprecated
SuppressWarnings
(
"
deprecation
"
)
public
static
DownloadHelper
forProgressive
(
Uri
uri
)
{
return
forProgressive
(
uri
null
)
;
}
public
static
DownloadHelper
forProgressive
(
Context
context
Uri
uri
)
{
return
forProgressive
(
context
uri
null
)
;
}
Deprecated
public
static
DownloadHelper
forProgressive
(
Uri
uri
Nullable
String
cacheKey
)
{
return
new
DownloadHelper
(
DownloadRequest
.
TYPE_PROGRESSIVE
uri
cacheKey
null
DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_VIEWPORT
new
RendererCapabilities
[
0
]
)
;
}
public
static
DownloadHelper
forProgressive
(
Context
context
Uri
uri
Nullable
String
cacheKey
)
{
return
new
DownloadHelper
(
DownloadRequest
.
TYPE_PROGRESSIVE
uri
cacheKey
null
getDefaultTrackSelectorParameters
(
context
)
new
RendererCapabilities
[
0
]
)
;
}
Deprecated
public
static
DownloadHelper
forDash
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
RenderersFactory
renderersFactory
)
{
return
forDash
(
uri
dataSourceFactory
renderersFactory
null
DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_VIEWPORT
)
;
}
public
static
DownloadHelper
forDash
(
Context
context
Uri
uri
DataSource
.
Factory
dataSourceFactory
RenderersFactory
renderersFactory
)
{
return
forDash
(
uri
dataSourceFactory
renderersFactory
null
getDefaultTrackSelectorParameters
(
context
)
)
;
}
public
static
DownloadHelper
forDash
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
RenderersFactory
renderersFactory
Nullable
DrmSessionManager
<
FrameworkMediaCrypto
>
drmSessionManager
DefaultTrackSelector
.
Parameters
trackSelectorParameters
)
{
return
new
DownloadHelper
(
DownloadRequest
.
TYPE_DASH
uri
null
createMediaSourceInternal
(
DASH_FACTORY_CONSTRUCTOR
uri
dataSourceFactory
drmSessionManager
null
)
trackSelectorParameters
Util
.
getRendererCapabilities
(
renderersFactory
)
)
;
}
Deprecated
public
static
DownloadHelper
forHls
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
RenderersFactory
renderersFactory
)
{
return
forHls
(
uri
dataSourceFactory
renderersFactory
null
DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_VIEWPORT
)
;
}
public
static
DownloadHelper
forHls
(
Context
context
Uri
uri
DataSource
.
Factory
dataSourceFactory
RenderersFactory
renderersFactory
)
{
return
forHls
(
uri
dataSourceFactory
renderersFactory
null
getDefaultTrackSelectorParameters
(
context
)
)
;
}
public
static
DownloadHelper
forHls
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
RenderersFactory
renderersFactory
Nullable
DrmSessionManager
<
FrameworkMediaCrypto
>
drmSessionManager
DefaultTrackSelector
.
Parameters
trackSelectorParameters
)
{
return
new
DownloadHelper
(
DownloadRequest
.
TYPE_HLS
uri
null
createMediaSourceInternal
(
HLS_FACTORY_CONSTRUCTOR
uri
dataSourceFactory
drmSessionManager
null
)
trackSelectorParameters
Util
.
getRendererCapabilities
(
renderersFactory
)
)
;
}
Deprecated
public
static
DownloadHelper
forSmoothStreaming
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
RenderersFactory
renderersFactory
)
{
return
forSmoothStreaming
(
uri
dataSourceFactory
renderersFactory
null
DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_VIEWPORT
)
;
}
public
static
DownloadHelper
forSmoothStreaming
(
Context
context
Uri
uri
DataSource
.
Factory
dataSourceFactory
RenderersFactory
renderersFactory
)
{
return
forSmoothStreaming
(
uri
dataSourceFactory
renderersFactory
null
getDefaultTrackSelectorParameters
(
context
)
)
;
}
public
static
DownloadHelper
forSmoothStreaming
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
RenderersFactory
renderersFactory
Nullable
DrmSessionManager
<
FrameworkMediaCrypto
>
drmSessionManager
DefaultTrackSelector
.
Parameters
trackSelectorParameters
)
{
return
new
DownloadHelper
(
DownloadRequest
.
TYPE_SS
uri
null
createMediaSourceInternal
(
SS_FACTORY_CONSTRUCTOR
uri
dataSourceFactory
drmSessionManager
null
)
trackSelectorParameters
Util
.
getRendererCapabilities
(
renderersFactory
)
)
;
}
public
static
MediaSource
createMediaSource
(
DownloadRequest
downloadRequest
DataSource
.
Factory
dataSourceFactory
)
{
return
createMediaSource
(
downloadRequest
dataSourceFactory
null
)
;
}
public
static
MediaSource
createMediaSource
(
DownloadRequest
downloadRequest
DataSource
.
Factory
dataSourceFactory
Nullable
DrmSessionManager
<
?
>
drmSessionManager
)
{
Nullable
Constructor
<
?
extends
MediaSourceFactory
>
constructor
;
switch
(
downloadRequest
.
type
)
{
case
DownloadRequest
.
TYPE_DASH
:
constructor
=
DASH_FACTORY_CONSTRUCTOR
;
break
;
case
DownloadRequest
.
TYPE_SS
:
constructor
=
SS_FACTORY_CONSTRUCTOR
;
break
;
case
DownloadRequest
.
TYPE_HLS
:
constructor
=
HLS_FACTORY_CONSTRUCTOR
;
break
;
case
DownloadRequest
.
TYPE_PROGRESSIVE
:
return
new
ProgressiveMediaSource
.
Factory
(
dataSourceFactory
)
.
setCustomCacheKey
(
downloadRequest
.
customCacheKey
)
.
createMediaSource
(
downloadRequest
.
uri
)
;
default
:
throw
new
IllegalStateException
(
"
Unsupported
type
:
"
+
downloadRequest
.
type
)
;
}
return
createMediaSourceInternal
(
constructor
downloadRequest
.
uri
dataSourceFactory
drmSessionManager
downloadRequest
.
streamKeys
)
;
}
private
final
String
downloadType
;
private
final
Uri
uri
;
Nullable
private
final
String
cacheKey
;
Nullable
private
final
MediaSource
mediaSource
;
private
final
DefaultTrackSelector
trackSelector
;
private
final
RendererCapabilities
[
]
rendererCapabilities
;
private
final
SparseIntArray
scratchSet
;
private
final
Handler
callbackHandler
;
private
final
Timeline
.
Window
window
;
private
boolean
isPreparedWithMedia
;
private
MonotonicNonNull
Callback
callback
;
private
MonotonicNonNull
MediaPreparer
mediaPreparer
;
private
TrackGroupArray
MonotonicNonNull
[
]
trackGroupArrays
;
private
MappedTrackInfo
MonotonicNonNull
[
]
mappedTrackInfos
;
private
List
<
TrackSelection
>
MonotonicNonNull
[
]
[
]
trackSelectionsByPeriodAndRenderer
;
private
List
<
TrackSelection
>
MonotonicNonNull
[
]
[
]
immutableTrackSelectionsByPeriodAndRenderer
;
public
DownloadHelper
(
String
downloadType
Uri
uri
Nullable
String
cacheKey
Nullable
MediaSource
mediaSource
DefaultTrackSelector
.
Parameters
trackSelectorParameters
RendererCapabilities
[
]
rendererCapabilities
)
{
this
.
downloadType
=
downloadType
;
this
.
uri
=
uri
;
this
.
cacheKey
=
cacheKey
;
this
.
mediaSource
=
mediaSource
;
this
.
trackSelector
=
new
DefaultTrackSelector
(
trackSelectorParameters
new
DownloadTrackSelection
.
Factory
(
)
)
;
this
.
rendererCapabilities
=
rendererCapabilities
;
this
.
scratchSet
=
new
SparseIntArray
(
)
;
trackSelector
.
init
(
(
)
-
>
{
}
new
DummyBandwidthMeter
(
)
)
;
callbackHandler
=
new
Handler
(
Util
.
getLooper
(
)
)
;
window
=
new
Timeline
.
Window
(
)
;
}
public
void
prepare
(
Callback
callback
)
{
Assertions
.
checkState
(
this
.
callback
=
=
null
)
;
this
.
callback
=
callback
;
if
(
mediaSource
!
=
null
)
{
mediaPreparer
=
new
MediaPreparer
(
mediaSource
this
)
;
}
else
{
callbackHandler
.
post
(
(
)
-
>
callback
.
onPrepared
(
this
)
)
;
}
}
public
void
release
(
)
{
if
(
mediaPreparer
!
=
null
)
{
mediaPreparer
.
release
(
)
;
}
}
Nullable
public
Object
getManifest
(
)
{
if
(
mediaSource
=
=
null
)
{
return
null
;
}
assertPreparedWithMedia
(
)
;
return
mediaPreparer
.
timeline
.
getWindowCount
(
)
>
0
?
mediaPreparer
.
timeline
.
getWindow
(
0
window
)
.
manifest
:
null
;
}
public
int
getPeriodCount
(
)
{
if
(
mediaSource
=
=
null
)
{
return
0
;
}
assertPreparedWithMedia
(
)
;
return
trackGroupArrays
.
length
;
}
public
TrackGroupArray
getTrackGroups
(
int
periodIndex
)
{
assertPreparedWithMedia
(
)
;
return
trackGroupArrays
[
periodIndex
]
;
}
public
MappedTrackInfo
getMappedTrackInfo
(
int
periodIndex
)
{
assertPreparedWithMedia
(
)
;
return
mappedTrackInfos
[
periodIndex
]
;
}
public
List
<
TrackSelection
>
getTrackSelections
(
int
periodIndex
int
rendererIndex
)
{
assertPreparedWithMedia
(
)
;
return
immutableTrackSelectionsByPeriodAndRenderer
[
periodIndex
]
[
rendererIndex
]
;
}
public
void
clearTrackSelections
(
int
periodIndex
)
{
assertPreparedWithMedia
(
)
;
for
(
int
i
=
0
;
i
<
rendererCapabilities
.
length
;
i
+
+
)
{
trackSelectionsByPeriodAndRenderer
[
periodIndex
]
[
i
]
.
clear
(
)
;
}
}
public
void
replaceTrackSelections
(
int
periodIndex
DefaultTrackSelector
.
Parameters
trackSelectorParameters
)
{
clearTrackSelections
(
periodIndex
)
;
addTrackSelection
(
periodIndex
trackSelectorParameters
)
;
}
public
void
addTrackSelection
(
int
periodIndex
DefaultTrackSelector
.
Parameters
trackSelectorParameters
)
{
assertPreparedWithMedia
(
)
;
trackSelector
.
setParameters
(
trackSelectorParameters
)
;
runTrackSelection
(
periodIndex
)
;
}
public
void
addAudioLanguagesToSelection
(
String
.
.
.
languages
)
{
assertPreparedWithMedia
(
)
;
for
(
int
periodIndex
=
0
;
periodIndex
<
mappedTrackInfos
.
length
;
periodIndex
+
+
)
{
DefaultTrackSelector
.
ParametersBuilder
parametersBuilder
=
DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT
.
buildUpon
(
)
;
MappedTrackInfo
mappedTrackInfo
=
mappedTrackInfos
[
periodIndex
]
;
int
rendererCount
=
mappedTrackInfo
.
getRendererCount
(
)
;
for
(
int
rendererIndex
=
0
;
rendererIndex
<
rendererCount
;
rendererIndex
+
+
)
{
if
(
mappedTrackInfo
.
getRendererType
(
rendererIndex
)
!
=
C
.
TRACK_TYPE_AUDIO
)
{
parametersBuilder
.
setRendererDisabled
(
rendererIndex
true
)
;
}
}
for
(
String
language
:
languages
)
{
parametersBuilder
.
setPreferredAudioLanguage
(
language
)
;
addTrackSelection
(
periodIndex
parametersBuilder
.
build
(
)
)
;
}
}
}
public
void
addTextLanguagesToSelection
(
boolean
selectUndeterminedTextLanguage
String
.
.
.
languages
)
{
assertPreparedWithMedia
(
)
;
for
(
int
periodIndex
=
0
;
periodIndex
<
mappedTrackInfos
.
length
;
periodIndex
+
+
)
{
DefaultTrackSelector
.
ParametersBuilder
parametersBuilder
=
DEFAULT_TRACK_SELECTOR_PARAMETERS_WITHOUT_CONTEXT
.
buildUpon
(
)
;
MappedTrackInfo
mappedTrackInfo
=
mappedTrackInfos
[
periodIndex
]
;
int
rendererCount
=
mappedTrackInfo
.
getRendererCount
(
)
;
for
(
int
rendererIndex
=
0
;
rendererIndex
<
rendererCount
;
rendererIndex
+
+
)
{
if
(
mappedTrackInfo
.
getRendererType
(
rendererIndex
)
!
=
C
.
TRACK_TYPE_TEXT
)
{
parametersBuilder
.
setRendererDisabled
(
rendererIndex
true
)
;
}
}
parametersBuilder
.
setSelectUndeterminedTextLanguage
(
selectUndeterminedTextLanguage
)
;
for
(
String
language
:
languages
)
{
parametersBuilder
.
setPreferredTextLanguage
(
language
)
;
addTrackSelection
(
periodIndex
parametersBuilder
.
build
(
)
)
;
}
}
}
public
void
addTrackSelectionForSingleRenderer
(
int
periodIndex
int
rendererIndex
DefaultTrackSelector
.
Parameters
trackSelectorParameters
List
<
SelectionOverride
>
overrides
)
{
assertPreparedWithMedia
(
)
;
DefaultTrackSelector
.
ParametersBuilder
builder
=
trackSelectorParameters
.
buildUpon
(
)
;
for
(
int
i
=
0
;
i
<
mappedTrackInfos
[
periodIndex
]
.
getRendererCount
(
)
;
i
+
+
)
{
builder
.
setRendererDisabled
(
i
i
!
=
rendererIndex
)
;
}
if
(
overrides
.
isEmpty
(
)
)
{
addTrackSelection
(
periodIndex
builder
.
build
(
)
)
;
}
else
{
TrackGroupArray
trackGroupArray
=
mappedTrackInfos
[
periodIndex
]
.
getTrackGroups
(
rendererIndex
)
;
for
(
int
i
=
0
;
i
<
overrides
.
size
(
)
;
i
+
+
)
{
builder
.
setSelectionOverride
(
rendererIndex
trackGroupArray
overrides
.
get
(
i
)
)
;
addTrackSelection
(
periodIndex
builder
.
build
(
)
)
;
}
}
}
public
DownloadRequest
getDownloadRequest
(
Nullable
byte
[
]
data
)
{
return
getDownloadRequest
(
uri
.
toString
(
)
data
)
;
}
public
DownloadRequest
getDownloadRequest
(
String
id
Nullable
byte
[
]
data
)
{
if
(
mediaSource
=
=
null
)
{
return
new
DownloadRequest
(
id
downloadType
uri
Collections
.
emptyList
(
)
cacheKey
data
)
;
}
assertPreparedWithMedia
(
)
;
List
<
StreamKey
>
streamKeys
=
new
ArrayList
<
>
(
)
;
List
<
TrackSelection
>
allSelections
=
new
ArrayList
<
>
(
)
;
int
periodCount
=
trackSelectionsByPeriodAndRenderer
.
length
;
for
(
int
periodIndex
=
0
;
periodIndex
<
periodCount
;
periodIndex
+
+
)
{
allSelections
.
clear
(
)
;
int
rendererCount
=
trackSelectionsByPeriodAndRenderer
[
periodIndex
]
.
length
;
for
(
int
rendererIndex
=
0
;
rendererIndex
<
rendererCount
;
rendererIndex
+
+
)
{
allSelections
.
addAll
(
trackSelectionsByPeriodAndRenderer
[
periodIndex
]
[
rendererIndex
]
)
;
}
streamKeys
.
addAll
(
mediaPreparer
.
mediaPeriods
[
periodIndex
]
.
getStreamKeys
(
allSelections
)
)
;
}
return
new
DownloadRequest
(
id
downloadType
uri
streamKeys
cacheKey
data
)
;
}
SuppressWarnings
(
"
unchecked
"
)
private
void
onMediaPrepared
(
)
{
Assertions
.
checkNotNull
(
mediaPreparer
)
;
Assertions
.
checkNotNull
(
mediaPreparer
.
mediaPeriods
)
;
Assertions
.
checkNotNull
(
mediaPreparer
.
timeline
)
;
int
periodCount
=
mediaPreparer
.
mediaPeriods
.
length
;
int
rendererCount
=
rendererCapabilities
.
length
;
trackSelectionsByPeriodAndRenderer
=
(
List
<
TrackSelection
>
[
]
[
]
)
new
List
<
?
>
[
periodCount
]
[
rendererCount
]
;
immutableTrackSelectionsByPeriodAndRenderer
=
(
List
<
TrackSelection
>
[
]
[
]
)
new
List
<
?
>
[
periodCount
]
[
rendererCount
]
;
for
(
int
i
=
0
;
i
<
periodCount
;
i
+
+
)
{
for
(
int
j
=
0
;
j
<
rendererCount
;
j
+
+
)
{
trackSelectionsByPeriodAndRenderer
[
i
]
[
j
]
=
new
ArrayList
<
>
(
)
;
immutableTrackSelectionsByPeriodAndRenderer
[
i
]
[
j
]
=
Collections
.
unmodifiableList
(
trackSelectionsByPeriodAndRenderer
[
i
]
[
j
]
)
;
}
}
trackGroupArrays
=
new
TrackGroupArray
[
periodCount
]
;
mappedTrackInfos
=
new
MappedTrackInfo
[
periodCount
]
;
for
(
int
i
=
0
;
i
<
periodCount
;
i
+
+
)
{
trackGroupArrays
[
i
]
=
mediaPreparer
.
mediaPeriods
[
i
]
.
getTrackGroups
(
)
;
TrackSelectorResult
trackSelectorResult
=
runTrackSelection
(
i
)
;
trackSelector
.
onSelectionActivated
(
trackSelectorResult
.
info
)
;
mappedTrackInfos
[
i
]
=
Assertions
.
checkNotNull
(
trackSelector
.
getCurrentMappedTrackInfo
(
)
)
;
}
setPreparedWithMedia
(
)
;
Assertions
.
checkNotNull
(
callbackHandler
)
.
post
(
(
)
-
>
Assertions
.
checkNotNull
(
callback
)
.
onPrepared
(
this
)
)
;
}
private
void
onMediaPreparationFailed
(
IOException
error
)
{
Assertions
.
checkNotNull
(
callbackHandler
)
.
post
(
(
)
-
>
Assertions
.
checkNotNull
(
callback
)
.
onPrepareError
(
this
error
)
)
;
}
RequiresNonNull
(
{
"
trackGroupArrays
"
"
mappedTrackInfos
"
"
trackSelectionsByPeriodAndRenderer
"
"
immutableTrackSelectionsByPeriodAndRenderer
"
"
mediaPreparer
"
"
mediaPreparer
.
timeline
"
"
mediaPreparer
.
mediaPeriods
"
}
)
private
void
setPreparedWithMedia
(
)
{
isPreparedWithMedia
=
true
;
}
EnsuresNonNull
(
{
"
trackGroupArrays
"
"
mappedTrackInfos
"
"
trackSelectionsByPeriodAndRenderer
"
"
immutableTrackSelectionsByPeriodAndRenderer
"
"
mediaPreparer
"
"
mediaPreparer
.
timeline
"
"
mediaPreparer
.
mediaPeriods
"
}
)
SuppressWarnings
(
"
nullness
:
contracts
.
postcondition
.
not
.
satisfied
"
)
private
void
assertPreparedWithMedia
(
)
{
Assertions
.
checkState
(
isPreparedWithMedia
)
;
}
SuppressWarnings
(
"
ReferenceEquality
"
)
RequiresNonNull
(
{
"
trackGroupArrays
"
"
trackSelectionsByPeriodAndRenderer
"
"
mediaPreparer
"
"
mediaPreparer
.
timeline
"
}
)
private
TrackSelectorResult
runTrackSelection
(
int
periodIndex
)
{
try
{
TrackSelectorResult
trackSelectorResult
=
trackSelector
.
selectTracks
(
rendererCapabilities
trackGroupArrays
[
periodIndex
]
new
MediaPeriodId
(
mediaPreparer
.
timeline
.
getUidOfPeriod
(
periodIndex
)
)
mediaPreparer
.
timeline
)
;
for
(
int
i
=
0
;
i
<
trackSelectorResult
.
length
;
i
+
+
)
{
Nullable
TrackSelection
newSelection
=
trackSelectorResult
.
selections
.
get
(
i
)
;
if
(
newSelection
=
=
null
)
{
continue
;
}
List
<
TrackSelection
>
existingSelectionList
=
trackSelectionsByPeriodAndRenderer
[
periodIndex
]
[
i
]
;
boolean
mergedWithExistingSelection
=
false
;
for
(
int
j
=
0
;
j
<
existingSelectionList
.
size
(
)
;
j
+
+
)
{
TrackSelection
existingSelection
=
existingSelectionList
.
get
(
j
)
;
if
(
existingSelection
.
getTrackGroup
(
)
=
=
newSelection
.
getTrackGroup
(
)
)
{
scratchSet
.
clear
(
)
;
for
(
int
k
=
0
;
k
<
existingSelection
.
length
(
)
;
k
+
+
)
{
scratchSet
.
put
(
existingSelection
.
getIndexInTrackGroup
(
k
)
0
)
;
}
for
(
int
k
=
0
;
k
<
newSelection
.
length
(
)
;
k
+
+
)
{
scratchSet
.
put
(
newSelection
.
getIndexInTrackGroup
(
k
)
0
)
;
}
int
[
]
mergedTracks
=
new
int
[
scratchSet
.
size
(
)
]
;
for
(
int
k
=
0
;
k
<
scratchSet
.
size
(
)
;
k
+
+
)
{
mergedTracks
[
k
]
=
scratchSet
.
keyAt
(
k
)
;
}
existingSelectionList
.
set
(
j
new
DownloadTrackSelection
(
existingSelection
.
getTrackGroup
(
)
mergedTracks
)
)
;
mergedWithExistingSelection
=
true
;
break
;
}
}
if
(
!
mergedWithExistingSelection
)
{
existingSelectionList
.
add
(
newSelection
)
;
}
}
return
trackSelectorResult
;
}
catch
(
ExoPlaybackException
e
)
{
throw
new
UnsupportedOperationException
(
e
)
;
}
}
Nullable
private
static
Constructor
<
?
extends
MediaSourceFactory
>
getConstructor
(
String
className
)
{
try
{
Class
<
?
extends
MediaSourceFactory
>
factoryClazz
=
Class
.
forName
(
className
)
.
asSubclass
(
MediaSourceFactory
.
class
)
;
return
factoryClazz
.
getConstructor
(
Factory
.
class
)
;
}
catch
(
ClassNotFoundException
e
)
{
return
null
;
}
catch
(
NoSuchMethodException
e
)
{
throw
new
IllegalStateException
(
e
)
;
}
}
private
static
MediaSource
createMediaSourceInternal
(
Nullable
Constructor
<
?
extends
MediaSourceFactory
>
constructor
Uri
uri
Factory
dataSourceFactory
Nullable
DrmSessionManager
<
?
>
drmSessionManager
Nullable
List
<
StreamKey
>
streamKeys
)
{
if
(
constructor
=
=
null
)
{
throw
new
IllegalStateException
(
"
Module
missing
to
create
media
source
.
"
)
;
}
try
{
MediaSourceFactory
factory
=
constructor
.
newInstance
(
dataSourceFactory
)
;
if
(
drmSessionManager
!
=
null
)
{
factory
.
setDrmSessionManager
(
drmSessionManager
)
;
}
if
(
streamKeys
!
=
null
)
{
factory
.
setStreamKeys
(
streamKeys
)
;
}
return
Assertions
.
checkNotNull
(
factory
.
createMediaSource
(
uri
)
)
;
}
catch
(
Exception
e
)
{
throw
new
IllegalStateException
(
"
Failed
to
instantiate
media
source
.
"
e
)
;
}
}
private
static
final
class
MediaPreparer
implements
MediaSourceCaller
MediaPeriod
.
Callback
Handler
.
Callback
{
private
static
final
int
MESSAGE_PREPARE_SOURCE
=
0
;
private
static
final
int
MESSAGE_CHECK_FOR_FAILURE
=
1
;
private
static
final
int
MESSAGE_CONTINUE_LOADING
=
2
;
private
static
final
int
MESSAGE_RELEASE
=
3
;
private
static
final
int
DOWNLOAD_HELPER_CALLBACK_MESSAGE_PREPARED
=
0
;
private
static
final
int
DOWNLOAD_HELPER_CALLBACK_MESSAGE_FAILED
=
1
;
private
final
MediaSource
mediaSource
;
private
final
DownloadHelper
downloadHelper
;
private
final
Allocator
allocator
;
private
final
ArrayList
<
MediaPeriod
>
pendingMediaPeriods
;
private
final
Handler
downloadHelperHandler
;
private
final
HandlerThread
mediaSourceThread
;
private
final
Handler
mediaSourceHandler
;
public
MonotonicNonNull
Timeline
timeline
;
public
MediaPeriod
MonotonicNonNull
[
]
mediaPeriods
;
private
boolean
released
;
public
MediaPreparer
(
MediaSource
mediaSource
DownloadHelper
downloadHelper
)
{
this
.
mediaSource
=
mediaSource
;
this
.
downloadHelper
=
downloadHelper
;
allocator
=
new
DefaultAllocator
(
true
C
.
DEFAULT_BUFFER_SEGMENT_SIZE
)
;
pendingMediaPeriods
=
new
ArrayList
<
>
(
)
;
SuppressWarnings
(
"
methodref
.
receiver
.
bound
.
invalid
"
)
Handler
downloadThreadHandler
=
Util
.
createHandler
(
this
:
:
handleDownloadHelperCallbackMessage
)
;
this
.
downloadHelperHandler
=
downloadThreadHandler
;
mediaSourceThread
=
new
HandlerThread
(
"
DownloadHelper
"
)
;
mediaSourceThread
.
start
(
)
;
mediaSourceHandler
=
Util
.
createHandler
(
mediaSourceThread
.
getLooper
(
)
this
)
;
mediaSourceHandler
.
sendEmptyMessage
(
MESSAGE_PREPARE_SOURCE
)
;
}
public
void
release
(
)
{
if
(
released
)
{
return
;
}
released
=
true
;
mediaSourceHandler
.
sendEmptyMessage
(
MESSAGE_RELEASE
)
;
}
Override
public
boolean
handleMessage
(
Message
msg
)
{
switch
(
msg
.
what
)
{
case
MESSAGE_PREPARE_SOURCE
:
mediaSource
.
prepareSource
(
this
null
)
;
mediaSourceHandler
.
sendEmptyMessage
(
MESSAGE_CHECK_FOR_FAILURE
)
;
return
true
;
case
MESSAGE_CHECK_FOR_FAILURE
:
try
{
if
(
mediaPeriods
=
=
null
)
{
mediaSource
.
maybeThrowSourceInfoRefreshError
(
)
;
}
else
{
for
(
int
i
=
0
;
i
<
pendingMediaPeriods
.
size
(
)
;
i
+
+
)
{
pendingMediaPeriods
.
get
(
i
)
.
maybeThrowPrepareError
(
)
;
}
}
mediaSourceHandler
.
sendEmptyMessageDelayed
(
MESSAGE_CHECK_FOR_FAILURE
100
)
;
}
catch
(
IOException
e
)
{
downloadHelperHandler
.
obtainMessage
(
DOWNLOAD_HELPER_CALLBACK_MESSAGE_FAILED
e
)
.
sendToTarget
(
)
;
}
return
true
;
case
MESSAGE_CONTINUE_LOADING
:
MediaPeriod
mediaPeriod
=
(
MediaPeriod
)
msg
.
obj
;
if
(
pendingMediaPeriods
.
contains
(
mediaPeriod
)
)
{
mediaPeriod
.
continueLoading
(
0
)
;
}
return
true
;
case
MESSAGE_RELEASE
:
if
(
mediaPeriods
!
=
null
)
{
for
(
MediaPeriod
period
:
mediaPeriods
)
{
mediaSource
.
releasePeriod
(
period
)
;
}
}
mediaSource
.
releaseSource
(
this
)
;
mediaSourceHandler
.
removeCallbacksAndMessages
(
null
)
;
mediaSourceThread
.
quit
(
)
;
return
true
;
default
:
return
false
;
}
}
Override
public
void
onSourceInfoRefreshed
(
MediaSource
source
Timeline
timeline
)
{
if
(
this
.
timeline
!
=
null
)
{
return
;
}
if
(
timeline
.
getWindow
(
0
new
Timeline
.
Window
(
)
)
.
isLive
)
{
downloadHelperHandler
.
obtainMessage
(
DOWNLOAD_HELPER_CALLBACK_MESSAGE_FAILED
new
LiveContentUnsupportedException
(
)
)
.
sendToTarget
(
)
;
return
;
}
this
.
timeline
=
timeline
;
mediaPeriods
=
new
MediaPeriod
[
timeline
.
getPeriodCount
(
)
]
;
for
(
int
i
=
0
;
i
<
mediaPeriods
.
length
;
i
+
+
)
{
MediaPeriod
mediaPeriod
=
mediaSource
.
createPeriod
(
new
MediaPeriodId
(
timeline
.
getUidOfPeriod
(
i
)
)
allocator
0
)
;
mediaPeriods
[
i
]
=
mediaPeriod
;
pendingMediaPeriods
.
add
(
mediaPeriod
)
;
}
for
(
MediaPeriod
mediaPeriod
:
mediaPeriods
)
{
mediaPeriod
.
prepare
(
this
0
)
;
}
}
Override
public
void
onPrepared
(
MediaPeriod
mediaPeriod
)
{
pendingMediaPeriods
.
remove
(
mediaPeriod
)
;
if
(
pendingMediaPeriods
.
isEmpty
(
)
)
{
mediaSourceHandler
.
removeMessages
(
MESSAGE_CHECK_FOR_FAILURE
)
;
downloadHelperHandler
.
sendEmptyMessage
(
DOWNLOAD_HELPER_CALLBACK_MESSAGE_PREPARED
)
;
}
}
Override
public
void
onContinueLoadingRequested
(
MediaPeriod
mediaPeriod
)
{
if
(
pendingMediaPeriods
.
contains
(
mediaPeriod
)
)
{
mediaSourceHandler
.
obtainMessage
(
MESSAGE_CONTINUE_LOADING
mediaPeriod
)
.
sendToTarget
(
)
;
}
}
private
boolean
handleDownloadHelperCallbackMessage
(
Message
msg
)
{
if
(
released
)
{
return
false
;
}
switch
(
msg
.
what
)
{
case
DOWNLOAD_HELPER_CALLBACK_MESSAGE_PREPARED
:
downloadHelper
.
onMediaPrepared
(
)
;
return
true
;
case
DOWNLOAD_HELPER_CALLBACK_MESSAGE_FAILED
:
release
(
)
;
downloadHelper
.
onMediaPreparationFailed
(
(
IOException
)
Util
.
castNonNull
(
msg
.
obj
)
)
;
return
true
;
default
:
return
false
;
}
}
}
private
static
final
class
DownloadTrackSelection
extends
BaseTrackSelection
{
private
static
final
class
Factory
implements
TrackSelection
.
Factory
{
Override
public
NullableType
TrackSelection
[
]
createTrackSelections
(
NullableType
Definition
[
]
definitions
BandwidthMeter
bandwidthMeter
)
{
NullableType
TrackSelection
[
]
selections
=
new
TrackSelection
[
definitions
.
length
]
;
for
(
int
i
=
0
;
i
<
definitions
.
length
;
i
+
+
)
{
selections
[
i
]
=
definitions
[
i
]
=
=
null
?
null
:
new
DownloadTrackSelection
(
definitions
[
i
]
.
group
definitions
[
i
]
.
tracks
)
;
}
return
selections
;
}
}
public
DownloadTrackSelection
(
TrackGroup
trackGroup
int
[
]
tracks
)
{
super
(
trackGroup
tracks
)
;
}
Override
public
int
getSelectedIndex
(
)
{
return
0
;
}
Override
public
int
getSelectionReason
(
)
{
return
C
.
SELECTION_REASON_UNKNOWN
;
}
Nullable
Override
public
Object
getSelectionData
(
)
{
return
null
;
}
Override
public
void
updateSelectedTrack
(
long
playbackPositionUs
long
bufferedDurationUs
long
availableDurationUs
List
<
?
extends
MediaChunk
>
queue
MediaChunkIterator
[
]
mediaChunkIterators
)
{
}
}
private
static
final
class
DummyBandwidthMeter
implements
BandwidthMeter
{
Override
public
long
getBitrateEstimate
(
)
{
return
0
;
}
Nullable
Override
public
TransferListener
getTransferListener
(
)
{
return
null
;
}
Override
public
void
addEventListener
(
Handler
eventHandler
EventListener
eventListener
)
{
}
Override
public
void
removeEventListener
(
EventListener
eventListener
)
{
}
}
}
