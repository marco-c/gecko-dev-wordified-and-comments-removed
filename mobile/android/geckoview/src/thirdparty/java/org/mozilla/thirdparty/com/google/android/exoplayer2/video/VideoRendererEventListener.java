package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
video
;
import
static
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
.
castNonNull
;
import
android
.
os
.
Handler
;
import
android
.
os
.
SystemClock
;
import
android
.
view
.
Surface
;
import
android
.
view
.
TextureView
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Renderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
decoder
.
DecoderCounters
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
public
interface
VideoRendererEventListener
{
default
void
onVideoEnabled
(
DecoderCounters
counters
)
{
}
default
void
onVideoDecoderInitialized
(
String
decoderName
long
initializedTimestampMs
long
initializationDurationMs
)
{
}
default
void
onVideoInputFormatChanged
(
Format
format
)
{
}
default
void
onDroppedFrames
(
int
count
long
elapsedMs
)
{
}
default
void
onVideoSizeChanged
(
int
width
int
height
int
unappliedRotationDegrees
float
pixelWidthHeightRatio
)
{
}
default
void
onRenderedFirstFrame
(
Nullable
Surface
surface
)
{
}
default
void
onVideoDisabled
(
DecoderCounters
counters
)
{
}
final
class
EventDispatcher
{
Nullable
private
final
Handler
handler
;
Nullable
private
final
VideoRendererEventListener
listener
;
public
EventDispatcher
(
Nullable
Handler
handler
Nullable
VideoRendererEventListener
listener
)
{
this
.
handler
=
listener
!
=
null
?
Assertions
.
checkNotNull
(
handler
)
:
null
;
this
.
listener
=
listener
;
}
public
void
enabled
(
DecoderCounters
decoderCounters
)
{
if
(
handler
!
=
null
)
{
handler
.
post
(
(
)
-
>
castNonNull
(
listener
)
.
onVideoEnabled
(
decoderCounters
)
)
;
}
}
public
void
decoderInitialized
(
String
decoderName
long
initializedTimestampMs
long
initializationDurationMs
)
{
if
(
handler
!
=
null
)
{
handler
.
post
(
(
)
-
>
castNonNull
(
listener
)
.
onVideoDecoderInitialized
(
decoderName
initializedTimestampMs
initializationDurationMs
)
)
;
}
}
public
void
inputFormatChanged
(
Format
format
)
{
if
(
handler
!
=
null
)
{
handler
.
post
(
(
)
-
>
castNonNull
(
listener
)
.
onVideoInputFormatChanged
(
format
)
)
;
}
}
public
void
droppedFrames
(
int
droppedFrameCount
long
elapsedMs
)
{
if
(
handler
!
=
null
)
{
handler
.
post
(
(
)
-
>
castNonNull
(
listener
)
.
onDroppedFrames
(
droppedFrameCount
elapsedMs
)
)
;
}
}
public
void
videoSizeChanged
(
int
width
int
height
final
int
unappliedRotationDegrees
final
float
pixelWidthHeightRatio
)
{
if
(
handler
!
=
null
)
{
handler
.
post
(
(
)
-
>
castNonNull
(
listener
)
.
onVideoSizeChanged
(
width
height
unappliedRotationDegrees
pixelWidthHeightRatio
)
)
;
}
}
public
void
renderedFirstFrame
(
Nullable
Surface
surface
)
{
if
(
handler
!
=
null
)
{
handler
.
post
(
(
)
-
>
castNonNull
(
listener
)
.
onRenderedFirstFrame
(
surface
)
)
;
}
}
public
void
disabled
(
DecoderCounters
counters
)
{
counters
.
ensureUpdated
(
)
;
if
(
handler
!
=
null
)
{
handler
.
post
(
(
)
-
>
{
counters
.
ensureUpdated
(
)
;
castNonNull
(
listener
)
.
onVideoDisabled
(
counters
)
;
}
)
;
}
}
}
}
