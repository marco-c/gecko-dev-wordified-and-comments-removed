package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
emsg
;
import
static
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
.
castNonNull
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
VisibleForTesting
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
Metadata
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
MimeTypes
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
util
.
Arrays
;
public
final
class
EventMessage
implements
Metadata
.
Entry
{
VisibleForTesting
public
static
final
String
ID3_SCHEME_ID_AOM
=
"
https
:
/
/
aomedia
.
org
/
emsg
/
ID3
"
;
private
static
final
String
ID3_SCHEME_ID_APPLE
=
"
https
:
/
/
developer
.
apple
.
com
/
streaming
/
emsg
-
id3
"
;
VisibleForTesting
public
static
final
String
SCTE35_SCHEME_ID
=
"
urn
:
scte
:
scte35
:
2014
:
bin
"
;
private
static
final
Format
ID3_FORMAT
=
Format
.
createSampleFormat
(
null
MimeTypes
.
APPLICATION_ID3
Format
.
OFFSET_SAMPLE_RELATIVE
)
;
private
static
final
Format
SCTE35_FORMAT
=
Format
.
createSampleFormat
(
null
MimeTypes
.
APPLICATION_SCTE35
Format
.
OFFSET_SAMPLE_RELATIVE
)
;
public
final
String
schemeIdUri
;
public
final
String
value
;
public
final
long
durationMs
;
public
final
long
id
;
public
final
byte
[
]
messageData
;
private
int
hashCode
;
public
EventMessage
(
String
schemeIdUri
String
value
long
durationMs
long
id
byte
[
]
messageData
)
{
this
.
schemeIdUri
=
schemeIdUri
;
this
.
value
=
value
;
this
.
durationMs
=
durationMs
;
this
.
id
=
id
;
this
.
messageData
=
messageData
;
}
EventMessage
(
Parcel
in
)
{
schemeIdUri
=
castNonNull
(
in
.
readString
(
)
)
;
value
=
castNonNull
(
in
.
readString
(
)
)
;
durationMs
=
in
.
readLong
(
)
;
id
=
in
.
readLong
(
)
;
messageData
=
castNonNull
(
in
.
createByteArray
(
)
)
;
}
Override
Nullable
public
Format
getWrappedMetadataFormat
(
)
{
switch
(
schemeIdUri
)
{
case
ID3_SCHEME_ID_AOM
:
case
ID3_SCHEME_ID_APPLE
:
return
ID3_FORMAT
;
case
SCTE35_SCHEME_ID
:
return
SCTE35_FORMAT
;
default
:
return
null
;
}
}
Override
Nullable
public
byte
[
]
getWrappedMetadataBytes
(
)
{
return
getWrappedMetadataFormat
(
)
!
=
null
?
messageData
:
null
;
}
Override
public
int
hashCode
(
)
{
if
(
hashCode
=
=
0
)
{
int
result
=
17
;
result
=
31
*
result
+
(
schemeIdUri
!
=
null
?
schemeIdUri
.
hashCode
(
)
:
0
)
;
result
=
31
*
result
+
(
value
!
=
null
?
value
.
hashCode
(
)
:
0
)
;
result
=
31
*
result
+
(
int
)
(
durationMs
^
(
durationMs
>
>
>
32
)
)
;
result
=
31
*
result
+
(
int
)
(
id
^
(
id
>
>
>
32
)
)
;
result
=
31
*
result
+
Arrays
.
hashCode
(
messageData
)
;
hashCode
=
result
;
}
return
hashCode
;
}
Override
public
boolean
equals
(
Nullable
Object
obj
)
{
if
(
this
=
=
obj
)
{
return
true
;
}
if
(
obj
=
=
null
|
|
getClass
(
)
!
=
obj
.
getClass
(
)
)
{
return
false
;
}
EventMessage
other
=
(
EventMessage
)
obj
;
return
durationMs
=
=
other
.
durationMs
&
&
id
=
=
other
.
id
&
&
Util
.
areEqual
(
schemeIdUri
other
.
schemeIdUri
)
&
&
Util
.
areEqual
(
value
other
.
value
)
&
&
Arrays
.
equals
(
messageData
other
.
messageData
)
;
}
Override
public
String
toString
(
)
{
return
"
EMSG
:
scheme
=
"
+
schemeIdUri
+
"
id
=
"
+
id
+
"
durationMs
=
"
+
durationMs
+
"
value
=
"
+
value
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
Parcel
dest
int
flags
)
{
dest
.
writeString
(
schemeIdUri
)
;
dest
.
writeString
(
value
)
;
dest
.
writeLong
(
durationMs
)
;
dest
.
writeLong
(
id
)
;
dest
.
writeByteArray
(
messageData
)
;
}
public
static
final
Parcelable
.
Creator
<
EventMessage
>
CREATOR
=
new
Parcelable
.
Creator
<
EventMessage
>
(
)
{
Override
public
EventMessage
createFromParcel
(
Parcel
in
)
{
return
new
EventMessage
(
in
)
;
}
Override
public
EventMessage
[
]
newArray
(
int
size
)
{
return
new
EventMessage
[
size
]
;
}
}
;
}
