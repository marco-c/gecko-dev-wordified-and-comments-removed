package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
;
import
android
.
media
.
MediaDrmException
;
import
android
.
os
.
PersistableBundle
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
RequiresApi
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
RequiresApi
(
18
)
public
final
class
DummyExoMediaDrm
<
T
extends
ExoMediaCrypto
>
implements
ExoMediaDrm
<
T
>
{
SuppressWarnings
(
"
unchecked
"
)
public
static
<
T
extends
ExoMediaCrypto
>
DummyExoMediaDrm
<
T
>
getInstance
(
)
{
return
(
DummyExoMediaDrm
<
T
>
)
new
DummyExoMediaDrm
<
>
(
)
;
}
Override
public
void
setOnEventListener
(
OnEventListener
<
?
super
T
>
listener
)
{
}
Override
public
void
setOnKeyStatusChangeListener
(
OnKeyStatusChangeListener
<
?
super
T
>
listener
)
{
}
Override
public
byte
[
]
openSession
(
)
throws
MediaDrmException
{
throw
new
MediaDrmException
(
"
Attempting
to
open
a
session
using
a
dummy
ExoMediaDrm
.
"
)
;
}
Override
public
void
closeSession
(
byte
[
]
sessionId
)
{
}
Override
public
KeyRequest
getKeyRequest
(
byte
[
]
scope
Nullable
List
<
DrmInitData
.
SchemeData
>
schemeDatas
int
keyType
Nullable
HashMap
<
String
String
>
optionalParameters
)
{
throw
new
IllegalStateException
(
)
;
}
Nullable
Override
public
byte
[
]
provideKeyResponse
(
byte
[
]
scope
byte
[
]
response
)
{
throw
new
IllegalStateException
(
)
;
}
Override
public
ProvisionRequest
getProvisionRequest
(
)
{
throw
new
IllegalStateException
(
)
;
}
Override
public
void
provideProvisionResponse
(
byte
[
]
response
)
{
throw
new
IllegalStateException
(
)
;
}
Override
public
Map
<
String
String
>
queryKeyStatus
(
byte
[
]
sessionId
)
{
throw
new
IllegalStateException
(
)
;
}
Override
public
void
acquire
(
)
{
}
Override
public
void
release
(
)
{
}
Override
public
void
restoreKeys
(
byte
[
]
sessionId
byte
[
]
keySetId
)
{
throw
new
IllegalStateException
(
)
;
}
Override
Nullable
public
PersistableBundle
getMetrics
(
)
{
return
null
;
}
Override
public
String
getPropertyString
(
String
propertyName
)
{
return
"
"
;
}
Override
public
byte
[
]
getPropertyByteArray
(
String
propertyName
)
{
return
Util
.
EMPTY_BYTE_ARRAY
;
}
Override
public
void
setPropertyString
(
String
propertyName
String
value
)
{
}
Override
public
void
setPropertyByteArray
(
String
propertyName
byte
[
]
value
)
{
}
Override
public
T
createMediaCrypto
(
byte
[
]
sessionId
)
{
throw
new
IllegalStateException
(
)
;
}
Override
Nullable
public
Class
<
T
>
getExoMediaCryptoType
(
)
{
return
null
;
}
}
