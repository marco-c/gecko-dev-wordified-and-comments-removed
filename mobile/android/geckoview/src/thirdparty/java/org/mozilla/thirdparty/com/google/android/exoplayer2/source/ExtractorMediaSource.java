package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Handler
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ExoPlayer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
DefaultExtractorsFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
Extractor
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorsFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
Allocator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
io
.
IOException
;
public
final
class
ExtractorMediaSource
implements
MediaSource
MediaSource
.
Listener
{
public
interface
EventListener
{
void
onLoadError
(
IOException
error
)
;
}
public
static
final
int
DEFAULT_MIN_LOADABLE_RETRY_COUNT_ON_DEMAND
=
3
;
public
static
final
int
DEFAULT_MIN_LOADABLE_RETRY_COUNT_LIVE
=
6
;
public
static
final
int
MIN_RETRY_COUNT_DEFAULT_FOR_MEDIA
=
-
1
;
private
final
Uri
uri
;
private
final
DataSource
.
Factory
dataSourceFactory
;
private
final
ExtractorsFactory
extractorsFactory
;
private
final
int
minLoadableRetryCount
;
private
final
Handler
eventHandler
;
private
final
EventListener
eventListener
;
private
final
Timeline
.
Period
period
;
private
final
String
customCacheKey
;
private
MediaSource
.
Listener
sourceListener
;
private
Timeline
timeline
;
private
boolean
timelineHasDuration
;
public
ExtractorMediaSource
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
ExtractorsFactory
extractorsFactory
Handler
eventHandler
EventListener
eventListener
)
{
this
(
uri
dataSourceFactory
extractorsFactory
MIN_RETRY_COUNT_DEFAULT_FOR_MEDIA
eventHandler
eventListener
null
)
;
}
public
ExtractorMediaSource
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
ExtractorsFactory
extractorsFactory
Handler
eventHandler
EventListener
eventListener
String
customCacheKey
)
{
this
(
uri
dataSourceFactory
extractorsFactory
MIN_RETRY_COUNT_DEFAULT_FOR_MEDIA
eventHandler
eventListener
customCacheKey
)
;
}
public
ExtractorMediaSource
(
Uri
uri
DataSource
.
Factory
dataSourceFactory
ExtractorsFactory
extractorsFactory
int
minLoadableRetryCount
Handler
eventHandler
EventListener
eventListener
String
customCacheKey
)
{
this
.
uri
=
uri
;
this
.
dataSourceFactory
=
dataSourceFactory
;
this
.
extractorsFactory
=
extractorsFactory
;
this
.
minLoadableRetryCount
=
minLoadableRetryCount
;
this
.
eventHandler
=
eventHandler
;
this
.
eventListener
=
eventListener
;
this
.
customCacheKey
=
customCacheKey
;
period
=
new
Timeline
.
Period
(
)
;
}
Override
public
void
prepareSource
(
ExoPlayer
player
boolean
isTopLevelSource
Listener
listener
)
{
sourceListener
=
listener
;
timeline
=
new
SinglePeriodTimeline
(
C
.
TIME_UNSET
false
)
;
listener
.
onSourceInfoRefreshed
(
timeline
null
)
;
}
Override
public
void
maybeThrowSourceInfoRefreshError
(
)
throws
IOException
{
}
Override
public
MediaPeriod
createPeriod
(
int
index
Allocator
allocator
long
positionUs
)
{
Assertions
.
checkArgument
(
index
=
=
0
)
;
return
new
ExtractorMediaPeriod
(
uri
dataSourceFactory
.
createDataSource
(
)
extractorsFactory
.
createExtractors
(
)
minLoadableRetryCount
eventHandler
eventListener
this
allocator
customCacheKey
)
;
}
Override
public
void
releasePeriod
(
MediaPeriod
mediaPeriod
)
{
(
(
ExtractorMediaPeriod
)
mediaPeriod
)
.
release
(
)
;
}
Override
public
void
releaseSource
(
)
{
sourceListener
=
null
;
}
Override
public
void
onSourceInfoRefreshed
(
Timeline
newTimeline
Object
manifest
)
{
long
newTimelineDurationUs
=
newTimeline
.
getPeriod
(
0
period
)
.
getDurationUs
(
)
;
boolean
newTimelineHasDuration
=
newTimelineDurationUs
!
=
C
.
TIME_UNSET
;
if
(
timelineHasDuration
&
&
!
newTimelineHasDuration
)
{
return
;
}
timeline
=
newTimeline
;
timelineHasDuration
=
newTimelineHasDuration
;
sourceListener
.
onSourceInfoRefreshed
(
timeline
null
)
;
}
}
