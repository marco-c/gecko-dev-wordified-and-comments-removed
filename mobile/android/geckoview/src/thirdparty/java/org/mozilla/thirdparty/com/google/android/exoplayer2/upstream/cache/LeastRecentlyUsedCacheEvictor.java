package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
Cache
.
CacheException
;
import
java
.
util
.
TreeSet
;
public
final
class
LeastRecentlyUsedCacheEvictor
implements
CacheEvictor
{
private
final
long
maxBytes
;
private
final
TreeSet
<
CacheSpan
>
leastRecentlyUsed
;
private
long
currentSize
;
public
LeastRecentlyUsedCacheEvictor
(
long
maxBytes
)
{
this
.
maxBytes
=
maxBytes
;
this
.
leastRecentlyUsed
=
new
TreeSet
<
>
(
LeastRecentlyUsedCacheEvictor
:
:
compare
)
;
}
Override
public
boolean
requiresCacheSpanTouches
(
)
{
return
true
;
}
Override
public
void
onCacheInitialized
(
)
{
}
Override
public
void
onStartFile
(
Cache
cache
String
key
long
position
long
length
)
{
if
(
length
!
=
C
.
LENGTH_UNSET
)
{
evictCache
(
cache
length
)
;
}
}
Override
public
void
onSpanAdded
(
Cache
cache
CacheSpan
span
)
{
leastRecentlyUsed
.
add
(
span
)
;
currentSize
+
=
span
.
length
;
evictCache
(
cache
0
)
;
}
Override
public
void
onSpanRemoved
(
Cache
cache
CacheSpan
span
)
{
leastRecentlyUsed
.
remove
(
span
)
;
currentSize
-
=
span
.
length
;
}
Override
public
void
onSpanTouched
(
Cache
cache
CacheSpan
oldSpan
CacheSpan
newSpan
)
{
onSpanRemoved
(
cache
oldSpan
)
;
onSpanAdded
(
cache
newSpan
)
;
}
private
void
evictCache
(
Cache
cache
long
requiredSpace
)
{
while
(
currentSize
+
requiredSpace
>
maxBytes
&
&
!
leastRecentlyUsed
.
isEmpty
(
)
)
{
try
{
cache
.
removeSpan
(
leastRecentlyUsed
.
first
(
)
)
;
}
catch
(
CacheException
e
)
{
}
}
}
private
static
int
compare
(
CacheSpan
lhs
CacheSpan
rhs
)
{
long
lastTouchTimestampDelta
=
lhs
.
lastTouchTimestamp
-
rhs
.
lastTouchTimestamp
;
if
(
lastTouchTimestampDelta
=
=
0
)
{
return
lhs
.
compareTo
(
rhs
)
;
}
return
lhs
.
lastTouchTimestamp
<
rhs
.
lastTouchTimestamp
?
-
1
:
1
;
}
}
