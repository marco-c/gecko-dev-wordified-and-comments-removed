package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
TrackOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
.
TsPayloadReader
.
TrackIdGenerator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
text
.
cea
.
CeaUtil
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
MimeTypes
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
java
.
util
.
List
;
public
final
class
SeiReader
{
private
final
List
<
Format
>
closedCaptionFormats
;
private
final
TrackOutput
[
]
outputs
;
public
SeiReader
(
List
<
Format
>
closedCaptionFormats
)
{
this
.
closedCaptionFormats
=
closedCaptionFormats
;
outputs
=
new
TrackOutput
[
closedCaptionFormats
.
size
(
)
]
;
}
public
void
createTracks
(
ExtractorOutput
extractorOutput
TrackIdGenerator
idGenerator
)
{
for
(
int
i
=
0
;
i
<
outputs
.
length
;
i
+
+
)
{
idGenerator
.
generateNewId
(
)
;
TrackOutput
output
=
extractorOutput
.
track
(
idGenerator
.
getTrackId
(
)
C
.
TRACK_TYPE_TEXT
)
;
Format
channelFormat
=
closedCaptionFormats
.
get
(
i
)
;
String
channelMimeType
=
channelFormat
.
sampleMimeType
;
Assertions
.
checkArgument
(
MimeTypes
.
APPLICATION_CEA608
.
equals
(
channelMimeType
)
|
|
MimeTypes
.
APPLICATION_CEA708
.
equals
(
channelMimeType
)
"
Invalid
closed
caption
mime
type
provided
:
"
+
channelMimeType
)
;
String
formatId
=
channelFormat
.
id
!
=
null
?
channelFormat
.
id
:
idGenerator
.
getFormatId
(
)
;
output
.
format
(
Format
.
createTextSampleFormat
(
formatId
channelMimeType
null
Format
.
NO_VALUE
channelFormat
.
selectionFlags
channelFormat
.
language
channelFormat
.
accessibilityChannel
null
Format
.
OFFSET_SAMPLE_RELATIVE
channelFormat
.
initializationData
)
)
;
outputs
[
i
]
=
output
;
}
}
public
void
consume
(
long
pesTimeUs
ParsableByteArray
seiBuffer
)
{
CeaUtil
.
consume
(
pesTimeUs
seiBuffer
outputs
)
;
}
}
