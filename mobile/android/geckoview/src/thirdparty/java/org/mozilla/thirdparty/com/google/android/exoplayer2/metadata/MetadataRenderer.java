package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
;
import
static
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
.
castNonNull
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Handler
.
Callback
;
import
android
.
os
.
Looper
;
import
android
.
os
.
Message
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
BaseRenderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
FormatHolder
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
RendererCapabilities
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
List
;
import
org
.
checkerframework
.
checker
.
nullness
.
compatqual
.
NullableType
;
public
final
class
MetadataRenderer
extends
BaseRenderer
implements
Callback
{
private
static
final
int
MSG_INVOKE_RENDERER
=
0
;
private
static
final
int
MAX_PENDING_METADATA_COUNT
=
5
;
private
final
MetadataDecoderFactory
decoderFactory
;
private
final
MetadataOutput
output
;
Nullable
private
final
Handler
outputHandler
;
private
final
MetadataInputBuffer
buffer
;
private
final
NullableType
Metadata
[
]
pendingMetadata
;
private
final
long
[
]
pendingMetadataTimestamps
;
private
int
pendingMetadataIndex
;
private
int
pendingMetadataCount
;
Nullable
private
MetadataDecoder
decoder
;
private
boolean
inputStreamEnded
;
private
long
subsampleOffsetUs
;
public
MetadataRenderer
(
MetadataOutput
output
Nullable
Looper
outputLooper
)
{
this
(
output
outputLooper
MetadataDecoderFactory
.
DEFAULT
)
;
}
public
MetadataRenderer
(
MetadataOutput
output
Nullable
Looper
outputLooper
MetadataDecoderFactory
decoderFactory
)
{
super
(
C
.
TRACK_TYPE_METADATA
)
;
this
.
output
=
Assertions
.
checkNotNull
(
output
)
;
this
.
outputHandler
=
outputLooper
=
=
null
?
null
:
Util
.
createHandler
(
outputLooper
this
)
;
this
.
decoderFactory
=
Assertions
.
checkNotNull
(
decoderFactory
)
;
buffer
=
new
MetadataInputBuffer
(
)
;
pendingMetadata
=
new
Metadata
[
MAX_PENDING_METADATA_COUNT
]
;
pendingMetadataTimestamps
=
new
long
[
MAX_PENDING_METADATA_COUNT
]
;
}
Override
Capabilities
public
int
supportsFormat
(
Format
format
)
{
if
(
decoderFactory
.
supportsFormat
(
format
)
)
{
return
RendererCapabilities
.
create
(
supportsFormatDrm
(
null
format
.
drmInitData
)
?
FORMAT_HANDLED
:
FORMAT_UNSUPPORTED_DRM
)
;
}
else
{
return
RendererCapabilities
.
create
(
FORMAT_UNSUPPORTED_TYPE
)
;
}
}
Override
protected
void
onStreamChanged
(
Format
[
]
formats
long
offsetUs
)
{
decoder
=
decoderFactory
.
createDecoder
(
formats
[
0
]
)
;
}
Override
protected
void
onPositionReset
(
long
positionUs
boolean
joining
)
{
flushPendingMetadata
(
)
;
inputStreamEnded
=
false
;
}
Override
public
void
render
(
long
positionUs
long
elapsedRealtimeUs
)
{
if
(
!
inputStreamEnded
&
&
pendingMetadataCount
<
MAX_PENDING_METADATA_COUNT
)
{
buffer
.
clear
(
)
;
FormatHolder
formatHolder
=
getFormatHolder
(
)
;
int
result
=
readSource
(
formatHolder
buffer
false
)
;
if
(
result
=
=
C
.
RESULT_BUFFER_READ
)
{
if
(
buffer
.
isEndOfStream
(
)
)
{
inputStreamEnded
=
true
;
}
else
if
(
buffer
.
isDecodeOnly
(
)
)
{
}
else
{
buffer
.
subsampleOffsetUs
=
subsampleOffsetUs
;
buffer
.
flip
(
)
;
Nullable
Metadata
metadata
=
castNonNull
(
decoder
)
.
decode
(
buffer
)
;
if
(
metadata
!
=
null
)
{
List
<
Metadata
.
Entry
>
entries
=
new
ArrayList
<
>
(
metadata
.
length
(
)
)
;
decodeWrappedMetadata
(
metadata
entries
)
;
if
(
!
entries
.
isEmpty
(
)
)
{
Metadata
expandedMetadata
=
new
Metadata
(
entries
)
;
int
index
=
(
pendingMetadataIndex
+
pendingMetadataCount
)
%
MAX_PENDING_METADATA_COUNT
;
pendingMetadata
[
index
]
=
expandedMetadata
;
pendingMetadataTimestamps
[
index
]
=
buffer
.
timeUs
;
pendingMetadataCount
+
+
;
}
}
}
}
else
if
(
result
=
=
C
.
RESULT_FORMAT_READ
)
{
subsampleOffsetUs
=
Assertions
.
checkNotNull
(
formatHolder
.
format
)
.
subsampleOffsetUs
;
}
}
if
(
pendingMetadataCount
>
0
&
&
pendingMetadataTimestamps
[
pendingMetadataIndex
]
<
=
positionUs
)
{
Metadata
metadata
=
castNonNull
(
pendingMetadata
[
pendingMetadataIndex
]
)
;
invokeRenderer
(
metadata
)
;
pendingMetadata
[
pendingMetadataIndex
]
=
null
;
pendingMetadataIndex
=
(
pendingMetadataIndex
+
1
)
%
MAX_PENDING_METADATA_COUNT
;
pendingMetadataCount
-
-
;
}
}
private
void
decodeWrappedMetadata
(
Metadata
metadata
List
<
Metadata
.
Entry
>
decodedEntries
)
{
for
(
int
i
=
0
;
i
<
metadata
.
length
(
)
;
i
+
+
)
{
Nullable
Format
wrappedMetadataFormat
=
metadata
.
get
(
i
)
.
getWrappedMetadataFormat
(
)
;
if
(
wrappedMetadataFormat
!
=
null
&
&
decoderFactory
.
supportsFormat
(
wrappedMetadataFormat
)
)
{
MetadataDecoder
wrappedMetadataDecoder
=
decoderFactory
.
createDecoder
(
wrappedMetadataFormat
)
;
byte
[
]
wrappedMetadataBytes
=
Assertions
.
checkNotNull
(
metadata
.
get
(
i
)
.
getWrappedMetadataBytes
(
)
)
;
buffer
.
clear
(
)
;
buffer
.
ensureSpaceForWrite
(
wrappedMetadataBytes
.
length
)
;
castNonNull
(
buffer
.
data
)
.
put
(
wrappedMetadataBytes
)
;
buffer
.
flip
(
)
;
Nullable
Metadata
innerMetadata
=
wrappedMetadataDecoder
.
decode
(
buffer
)
;
if
(
innerMetadata
!
=
null
)
{
decodeWrappedMetadata
(
innerMetadata
decodedEntries
)
;
}
}
else
{
decodedEntries
.
add
(
metadata
.
get
(
i
)
)
;
}
}
}
Override
protected
void
onDisabled
(
)
{
flushPendingMetadata
(
)
;
decoder
=
null
;
}
Override
public
boolean
isEnded
(
)
{
return
inputStreamEnded
;
}
Override
public
boolean
isReady
(
)
{
return
true
;
}
private
void
invokeRenderer
(
Metadata
metadata
)
{
if
(
outputHandler
!
=
null
)
{
outputHandler
.
obtainMessage
(
MSG_INVOKE_RENDERER
metadata
)
.
sendToTarget
(
)
;
}
else
{
invokeRendererInternal
(
metadata
)
;
}
}
private
void
flushPendingMetadata
(
)
{
Arrays
.
fill
(
pendingMetadata
null
)
;
pendingMetadataIndex
=
0
;
pendingMetadataCount
=
0
;
}
Override
public
boolean
handleMessage
(
Message
msg
)
{
switch
(
msg
.
what
)
{
case
MSG_INVOKE_RENDERER
:
invokeRendererInternal
(
(
Metadata
)
msg
.
obj
)
;
return
true
;
default
:
throw
new
IllegalStateException
(
)
;
}
}
private
void
invokeRendererInternal
(
Metadata
metadata
)
{
output
.
onMetadata
(
metadata
)
;
}
}
