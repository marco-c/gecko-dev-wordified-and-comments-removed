package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Collections
;
import
java
.
util
.
PriorityQueue
;
public
final
class
PriorityTaskManager
{
public
static
class
PriorityTooLowException
extends
IOException
{
public
PriorityTooLowException
(
int
priority
int
highestPriority
)
{
super
(
"
Priority
too
low
[
priority
=
"
+
priority
+
"
highest
=
"
+
highestPriority
+
"
]
"
)
;
}
}
private
final
Object
lock
=
new
Object
(
)
;
private
final
PriorityQueue
<
Integer
>
queue
;
private
int
highestPriority
;
public
PriorityTaskManager
(
)
{
queue
=
new
PriorityQueue
<
>
(
10
Collections
.
reverseOrder
(
)
)
;
highestPriority
=
Integer
.
MIN_VALUE
;
}
public
void
add
(
int
priority
)
{
synchronized
(
lock
)
{
queue
.
add
(
priority
)
;
highestPriority
=
Math
.
max
(
highestPriority
priority
)
;
}
}
public
void
proceed
(
int
priority
)
throws
InterruptedException
{
synchronized
(
lock
)
{
while
(
highestPriority
!
=
priority
)
{
lock
.
wait
(
)
;
}
}
}
public
boolean
proceedNonBlocking
(
int
priority
)
{
synchronized
(
lock
)
{
return
highestPriority
=
=
priority
;
}
}
public
void
proceedOrThrow
(
int
priority
)
throws
PriorityTooLowException
{
synchronized
(
lock
)
{
if
(
highestPriority
!
=
priority
)
{
throw
new
PriorityTooLowException
(
priority
highestPriority
)
;
}
}
}
public
void
remove
(
int
priority
)
{
synchronized
(
lock
)
{
queue
.
remove
(
priority
)
;
highestPriority
=
queue
.
isEmpty
(
)
?
Integer
.
MIN_VALUE
:
queue
.
peek
(
)
;
lock
.
notifyAll
(
)
;
}
}
}
