package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
;
import
android
.
content
.
ContentValues
;
import
android
.
database
.
Cursor
;
import
android
.
database
.
SQLException
;
import
android
.
database
.
sqlite
.
SQLiteDatabase
;
import
androidx
.
annotation
.
WorkerThread
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
database
.
DatabaseIOException
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
database
.
DatabaseProvider
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
database
.
VersionTable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
import
org
.
checkerframework
.
checker
.
nullness
.
qual
.
MonotonicNonNull
;
final
class
CacheFileMetadataIndex
{
private
static
final
String
TABLE_PREFIX
=
DatabaseProvider
.
TABLE_PREFIX
+
"
CacheFileMetadata
"
;
private
static
final
int
TABLE_VERSION
=
1
;
private
static
final
String
COLUMN_NAME
=
"
name
"
;
private
static
final
String
COLUMN_LENGTH
=
"
length
"
;
private
static
final
String
COLUMN_LAST_TOUCH_TIMESTAMP
=
"
last_touch_timestamp
"
;
private
static
final
int
COLUMN_INDEX_NAME
=
0
;
private
static
final
int
COLUMN_INDEX_LENGTH
=
1
;
private
static
final
int
COLUMN_INDEX_LAST_TOUCH_TIMESTAMP
=
2
;
private
static
final
String
WHERE_NAME_EQUALS
=
COLUMN_NAME
+
"
=
?
"
;
private
static
final
String
[
]
COLUMNS
=
new
String
[
]
{
COLUMN_NAME
COLUMN_LENGTH
COLUMN_LAST_TOUCH_TIMESTAMP
}
;
private
static
final
String
TABLE_SCHEMA
=
"
(
"
+
COLUMN_NAME
+
"
TEXT
PRIMARY
KEY
NOT
NULL
"
+
COLUMN_LENGTH
+
"
INTEGER
NOT
NULL
"
+
COLUMN_LAST_TOUCH_TIMESTAMP
+
"
INTEGER
NOT
NULL
)
"
;
private
final
DatabaseProvider
databaseProvider
;
private
MonotonicNonNull
String
tableName
;
WorkerThread
public
static
void
delete
(
DatabaseProvider
databaseProvider
long
uid
)
throws
DatabaseIOException
{
String
hexUid
=
Long
.
toHexString
(
uid
)
;
try
{
String
tableName
=
getTableName
(
hexUid
)
;
SQLiteDatabase
writableDatabase
=
databaseProvider
.
getWritableDatabase
(
)
;
writableDatabase
.
beginTransactionNonExclusive
(
)
;
try
{
VersionTable
.
removeVersion
(
writableDatabase
VersionTable
.
FEATURE_CACHE_FILE_METADATA
hexUid
)
;
dropTable
(
writableDatabase
tableName
)
;
writableDatabase
.
setTransactionSuccessful
(
)
;
}
finally
{
writableDatabase
.
endTransaction
(
)
;
}
}
catch
(
SQLException
e
)
{
throw
new
DatabaseIOException
(
e
)
;
}
}
public
CacheFileMetadataIndex
(
DatabaseProvider
databaseProvider
)
{
this
.
databaseProvider
=
databaseProvider
;
}
WorkerThread
public
void
initialize
(
long
uid
)
throws
DatabaseIOException
{
try
{
String
hexUid
=
Long
.
toHexString
(
uid
)
;
tableName
=
getTableName
(
hexUid
)
;
SQLiteDatabase
readableDatabase
=
databaseProvider
.
getReadableDatabase
(
)
;
int
version
=
VersionTable
.
getVersion
(
readableDatabase
VersionTable
.
FEATURE_CACHE_FILE_METADATA
hexUid
)
;
if
(
version
!
=
TABLE_VERSION
)
{
SQLiteDatabase
writableDatabase
=
databaseProvider
.
getWritableDatabase
(
)
;
writableDatabase
.
beginTransactionNonExclusive
(
)
;
try
{
VersionTable
.
setVersion
(
writableDatabase
VersionTable
.
FEATURE_CACHE_FILE_METADATA
hexUid
TABLE_VERSION
)
;
dropTable
(
writableDatabase
tableName
)
;
writableDatabase
.
execSQL
(
"
CREATE
TABLE
"
+
tableName
+
"
"
+
TABLE_SCHEMA
)
;
writableDatabase
.
setTransactionSuccessful
(
)
;
}
finally
{
writableDatabase
.
endTransaction
(
)
;
}
}
}
catch
(
SQLException
e
)
{
throw
new
DatabaseIOException
(
e
)
;
}
}
WorkerThread
public
Map
<
String
CacheFileMetadata
>
getAll
(
)
throws
DatabaseIOException
{
try
(
Cursor
cursor
=
getCursor
(
)
)
{
Map
<
String
CacheFileMetadata
>
fileMetadata
=
new
HashMap
<
>
(
cursor
.
getCount
(
)
)
;
while
(
cursor
.
moveToNext
(
)
)
{
String
name
=
cursor
.
getString
(
COLUMN_INDEX_NAME
)
;
long
length
=
cursor
.
getLong
(
COLUMN_INDEX_LENGTH
)
;
long
lastTouchTimestamp
=
cursor
.
getLong
(
COLUMN_INDEX_LAST_TOUCH_TIMESTAMP
)
;
fileMetadata
.
put
(
name
new
CacheFileMetadata
(
length
lastTouchTimestamp
)
)
;
}
return
fileMetadata
;
}
catch
(
SQLException
e
)
{
throw
new
DatabaseIOException
(
e
)
;
}
}
WorkerThread
public
void
set
(
String
name
long
length
long
lastTouchTimestamp
)
throws
DatabaseIOException
{
Assertions
.
checkNotNull
(
tableName
)
;
try
{
SQLiteDatabase
writableDatabase
=
databaseProvider
.
getWritableDatabase
(
)
;
ContentValues
values
=
new
ContentValues
(
)
;
values
.
put
(
COLUMN_NAME
name
)
;
values
.
put
(
COLUMN_LENGTH
length
)
;
values
.
put
(
COLUMN_LAST_TOUCH_TIMESTAMP
lastTouchTimestamp
)
;
writableDatabase
.
replaceOrThrow
(
tableName
null
values
)
;
}
catch
(
SQLException
e
)
{
throw
new
DatabaseIOException
(
e
)
;
}
}
WorkerThread
public
void
remove
(
String
name
)
throws
DatabaseIOException
{
Assertions
.
checkNotNull
(
tableName
)
;
try
{
SQLiteDatabase
writableDatabase
=
databaseProvider
.
getWritableDatabase
(
)
;
writableDatabase
.
delete
(
tableName
WHERE_NAME_EQUALS
new
String
[
]
{
name
}
)
;
}
catch
(
SQLException
e
)
{
throw
new
DatabaseIOException
(
e
)
;
}
}
WorkerThread
public
void
removeAll
(
Set
<
String
>
names
)
throws
DatabaseIOException
{
Assertions
.
checkNotNull
(
tableName
)
;
try
{
SQLiteDatabase
writableDatabase
=
databaseProvider
.
getWritableDatabase
(
)
;
writableDatabase
.
beginTransactionNonExclusive
(
)
;
try
{
for
(
String
name
:
names
)
{
writableDatabase
.
delete
(
tableName
WHERE_NAME_EQUALS
new
String
[
]
{
name
}
)
;
}
writableDatabase
.
setTransactionSuccessful
(
)
;
}
finally
{
writableDatabase
.
endTransaction
(
)
;
}
}
catch
(
SQLException
e
)
{
throw
new
DatabaseIOException
(
e
)
;
}
}
private
Cursor
getCursor
(
)
{
Assertions
.
checkNotNull
(
tableName
)
;
return
databaseProvider
.
getReadableDatabase
(
)
.
query
(
tableName
COLUMNS
null
null
null
null
null
)
;
}
private
static
void
dropTable
(
SQLiteDatabase
writableDatabase
String
tableName
)
{
writableDatabase
.
execSQL
(
"
DROP
TABLE
IF
EXISTS
"
+
tableName
)
;
}
private
static
String
getTableName
(
String
hexUid
)
{
return
TABLE_PREFIX
+
hexUid
;
}
}
