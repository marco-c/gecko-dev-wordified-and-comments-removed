package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
android
.
text
.
TextUtils
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
DrmInitData
.
SchemeData
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Comparator
;
import
java
.
util
.
List
;
import
java
.
util
.
UUID
;
public
final
class
DrmInitData
implements
Comparator
<
SchemeData
>
Parcelable
{
public
static
Nullable
DrmInitData
createSessionCreationData
(
Nullable
DrmInitData
manifestData
Nullable
DrmInitData
mediaData
)
{
ArrayList
<
SchemeData
>
result
=
new
ArrayList
<
>
(
)
;
String
schemeType
=
null
;
if
(
manifestData
!
=
null
)
{
schemeType
=
manifestData
.
schemeType
;
for
(
SchemeData
data
:
manifestData
.
schemeDatas
)
{
if
(
data
.
hasData
(
)
)
{
result
.
add
(
data
)
;
}
}
}
if
(
mediaData
!
=
null
)
{
if
(
schemeType
=
=
null
)
{
schemeType
=
mediaData
.
schemeType
;
}
int
manifestDatasCount
=
result
.
size
(
)
;
for
(
SchemeData
data
:
mediaData
.
schemeDatas
)
{
if
(
data
.
hasData
(
)
&
&
!
containsSchemeDataWithUuid
(
result
manifestDatasCount
data
.
uuid
)
)
{
result
.
add
(
data
)
;
}
}
}
return
result
.
isEmpty
(
)
?
null
:
new
DrmInitData
(
schemeType
result
)
;
}
private
final
SchemeData
[
]
schemeDatas
;
private
int
hashCode
;
Nullable
public
final
String
schemeType
;
public
final
int
schemeDataCount
;
public
DrmInitData
(
List
<
SchemeData
>
schemeDatas
)
{
this
(
null
false
schemeDatas
.
toArray
(
new
SchemeData
[
0
]
)
)
;
}
public
DrmInitData
(
Nullable
String
schemeType
List
<
SchemeData
>
schemeDatas
)
{
this
(
schemeType
false
schemeDatas
.
toArray
(
new
SchemeData
[
0
]
)
)
;
}
public
DrmInitData
(
SchemeData
.
.
.
schemeDatas
)
{
this
(
null
schemeDatas
)
;
}
public
DrmInitData
(
Nullable
String
schemeType
SchemeData
.
.
.
schemeDatas
)
{
this
(
schemeType
true
schemeDatas
)
;
}
private
DrmInitData
(
Nullable
String
schemeType
boolean
cloneSchemeDatas
SchemeData
.
.
.
schemeDatas
)
{
this
.
schemeType
=
schemeType
;
if
(
cloneSchemeDatas
)
{
schemeDatas
=
schemeDatas
.
clone
(
)
;
}
this
.
schemeDatas
=
schemeDatas
;
schemeDataCount
=
schemeDatas
.
length
;
Arrays
.
sort
(
this
.
schemeDatas
this
)
;
}
DrmInitData
(
Parcel
in
)
{
schemeType
=
in
.
readString
(
)
;
schemeDatas
=
Util
.
castNonNull
(
in
.
createTypedArray
(
SchemeData
.
CREATOR
)
)
;
schemeDataCount
=
schemeDatas
.
length
;
}
Deprecated
Nullable
public
SchemeData
get
(
UUID
uuid
)
{
for
(
SchemeData
schemeData
:
schemeDatas
)
{
if
(
schemeData
.
matches
(
uuid
)
)
{
return
schemeData
;
}
}
return
null
;
}
public
SchemeData
get
(
int
index
)
{
return
schemeDatas
[
index
]
;
}
public
DrmInitData
copyWithSchemeType
(
Nullable
String
schemeType
)
{
if
(
Util
.
areEqual
(
this
.
schemeType
schemeType
)
)
{
return
this
;
}
return
new
DrmInitData
(
schemeType
false
schemeDatas
)
;
}
public
DrmInitData
merge
(
DrmInitData
drmInitData
)
{
Assertions
.
checkState
(
schemeType
=
=
null
|
|
drmInitData
.
schemeType
=
=
null
|
|
TextUtils
.
equals
(
schemeType
drmInitData
.
schemeType
)
)
;
String
mergedSchemeType
=
schemeType
!
=
null
?
this
.
schemeType
:
drmInitData
.
schemeType
;
SchemeData
[
]
mergedSchemeDatas
=
Util
.
nullSafeArrayConcatenation
(
schemeDatas
drmInitData
.
schemeDatas
)
;
return
new
DrmInitData
(
mergedSchemeType
mergedSchemeDatas
)
;
}
Override
public
int
hashCode
(
)
{
if
(
hashCode
=
=
0
)
{
int
result
=
(
schemeType
=
=
null
?
0
:
schemeType
.
hashCode
(
)
)
;
result
=
31
*
result
+
Arrays
.
hashCode
(
schemeDatas
)
;
hashCode
=
result
;
}
return
hashCode
;
}
Override
public
boolean
equals
(
Nullable
Object
obj
)
{
if
(
this
=
=
obj
)
{
return
true
;
}
if
(
obj
=
=
null
|
|
getClass
(
)
!
=
obj
.
getClass
(
)
)
{
return
false
;
}
DrmInitData
other
=
(
DrmInitData
)
obj
;
return
Util
.
areEqual
(
schemeType
other
.
schemeType
)
&
&
Arrays
.
equals
(
schemeDatas
other
.
schemeDatas
)
;
}
Override
public
int
compare
(
SchemeData
first
SchemeData
second
)
{
return
C
.
UUID_NIL
.
equals
(
first
.
uuid
)
?
(
C
.
UUID_NIL
.
equals
(
second
.
uuid
)
?
0
:
1
)
:
first
.
uuid
.
compareTo
(
second
.
uuid
)
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
Parcel
dest
int
flags
)
{
dest
.
writeString
(
schemeType
)
;
dest
.
writeTypedArray
(
schemeDatas
0
)
;
}
public
static
final
Parcelable
.
Creator
<
DrmInitData
>
CREATOR
=
new
Parcelable
.
Creator
<
DrmInitData
>
(
)
{
Override
public
DrmInitData
createFromParcel
(
Parcel
in
)
{
return
new
DrmInitData
(
in
)
;
}
Override
public
DrmInitData
[
]
newArray
(
int
size
)
{
return
new
DrmInitData
[
size
]
;
}
}
;
private
static
boolean
containsSchemeDataWithUuid
(
ArrayList
<
SchemeData
>
datas
int
limit
UUID
uuid
)
{
for
(
int
i
=
0
;
i
<
limit
;
i
+
+
)
{
if
(
datas
.
get
(
i
)
.
uuid
.
equals
(
uuid
)
)
{
return
true
;
}
}
return
false
;
}
public
static
final
class
SchemeData
implements
Parcelable
{
private
int
hashCode
;
private
final
UUID
uuid
;
Nullable
public
final
String
licenseServerUrl
;
public
final
String
mimeType
;
Nullable
public
final
byte
[
]
data
;
public
SchemeData
(
UUID
uuid
String
mimeType
Nullable
byte
[
]
data
)
{
this
(
uuid
null
mimeType
data
)
;
}
public
SchemeData
(
UUID
uuid
Nullable
String
licenseServerUrl
String
mimeType
Nullable
byte
[
]
data
)
{
this
.
uuid
=
Assertions
.
checkNotNull
(
uuid
)
;
this
.
licenseServerUrl
=
licenseServerUrl
;
this
.
mimeType
=
Assertions
.
checkNotNull
(
mimeType
)
;
this
.
data
=
data
;
}
SchemeData
(
Parcel
in
)
{
uuid
=
new
UUID
(
in
.
readLong
(
)
in
.
readLong
(
)
)
;
licenseServerUrl
=
in
.
readString
(
)
;
mimeType
=
Util
.
castNonNull
(
in
.
readString
(
)
)
;
data
=
in
.
createByteArray
(
)
;
}
public
boolean
matches
(
UUID
schemeUuid
)
{
return
C
.
UUID_NIL
.
equals
(
uuid
)
|
|
schemeUuid
.
equals
(
uuid
)
;
}
public
boolean
canReplace
(
SchemeData
other
)
{
return
hasData
(
)
&
&
!
other
.
hasData
(
)
&
&
matches
(
other
.
uuid
)
;
}
public
boolean
hasData
(
)
{
return
data
!
=
null
;
}
public
SchemeData
copyWithData
(
Nullable
byte
[
]
data
)
{
return
new
SchemeData
(
uuid
licenseServerUrl
mimeType
data
)
;
}
Override
public
boolean
equals
(
Nullable
Object
obj
)
{
if
(
!
(
obj
instanceof
SchemeData
)
)
{
return
false
;
}
if
(
obj
=
=
this
)
{
return
true
;
}
SchemeData
other
=
(
SchemeData
)
obj
;
return
Util
.
areEqual
(
licenseServerUrl
other
.
licenseServerUrl
)
&
&
Util
.
areEqual
(
mimeType
other
.
mimeType
)
&
&
Util
.
areEqual
(
uuid
other
.
uuid
)
&
&
Arrays
.
equals
(
data
other
.
data
)
;
}
Override
public
int
hashCode
(
)
{
if
(
hashCode
=
=
0
)
{
int
result
=
uuid
.
hashCode
(
)
;
result
=
31
*
result
+
(
licenseServerUrl
=
=
null
?
0
:
licenseServerUrl
.
hashCode
(
)
)
;
result
=
31
*
result
+
mimeType
.
hashCode
(
)
;
result
=
31
*
result
+
Arrays
.
hashCode
(
data
)
;
hashCode
=
result
;
}
return
hashCode
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
Parcel
dest
int
flags
)
{
dest
.
writeLong
(
uuid
.
getMostSignificantBits
(
)
)
;
dest
.
writeLong
(
uuid
.
getLeastSignificantBits
(
)
)
;
dest
.
writeString
(
licenseServerUrl
)
;
dest
.
writeString
(
mimeType
)
;
dest
.
writeByteArray
(
data
)
;
}
public
static
final
Parcelable
.
Creator
<
SchemeData
>
CREATOR
=
new
Parcelable
.
Creator
<
SchemeData
>
(
)
{
Override
public
SchemeData
createFromParcel
(
Parcel
in
)
{
return
new
SchemeData
(
in
)
;
}
Override
public
SchemeData
[
]
newArray
(
int
size
)
{
return
new
SchemeData
[
size
]
;
}
}
;
}
}
