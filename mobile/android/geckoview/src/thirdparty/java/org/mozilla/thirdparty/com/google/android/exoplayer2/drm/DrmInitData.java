package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
DrmInitData
.
SchemeData
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Comparator
;
import
java
.
util
.
List
;
import
java
.
util
.
UUID
;
public
final
class
DrmInitData
implements
Comparator
<
SchemeData
>
Parcelable
{
private
final
SchemeData
[
]
schemeDatas
;
private
int
hashCode
;
public
final
int
schemeDataCount
;
public
DrmInitData
(
List
<
SchemeData
>
schemeDatas
)
{
this
(
false
schemeDatas
.
toArray
(
new
SchemeData
[
schemeDatas
.
size
(
)
]
)
)
;
}
public
DrmInitData
(
SchemeData
.
.
.
schemeDatas
)
{
this
(
true
schemeDatas
)
;
}
private
DrmInitData
(
boolean
cloneSchemeDatas
SchemeData
.
.
.
schemeDatas
)
{
if
(
cloneSchemeDatas
)
{
schemeDatas
=
schemeDatas
.
clone
(
)
;
}
Arrays
.
sort
(
schemeDatas
this
)
;
for
(
int
i
=
1
;
i
<
schemeDatas
.
length
;
i
+
+
)
{
if
(
schemeDatas
[
i
-
1
]
.
uuid
.
equals
(
schemeDatas
[
i
]
.
uuid
)
)
{
throw
new
IllegalArgumentException
(
"
Duplicate
data
for
uuid
:
"
+
schemeDatas
[
i
]
.
uuid
)
;
}
}
this
.
schemeDatas
=
schemeDatas
;
schemeDataCount
=
schemeDatas
.
length
;
}
DrmInitData
(
Parcel
in
)
{
schemeDatas
=
in
.
createTypedArray
(
SchemeData
.
CREATOR
)
;
schemeDataCount
=
schemeDatas
.
length
;
}
public
SchemeData
get
(
UUID
uuid
)
{
for
(
SchemeData
schemeData
:
schemeDatas
)
{
if
(
schemeData
.
matches
(
uuid
)
)
{
return
schemeData
;
}
}
return
null
;
}
public
SchemeData
get
(
int
index
)
{
return
schemeDatas
[
index
]
;
}
Override
public
int
hashCode
(
)
{
if
(
hashCode
=
=
0
)
{
hashCode
=
Arrays
.
hashCode
(
schemeDatas
)
;
}
return
hashCode
;
}
Override
public
boolean
equals
(
Object
obj
)
{
if
(
this
=
=
obj
)
{
return
true
;
}
if
(
obj
=
=
null
|
|
getClass
(
)
!
=
obj
.
getClass
(
)
)
{
return
false
;
}
return
Arrays
.
equals
(
schemeDatas
(
(
DrmInitData
)
obj
)
.
schemeDatas
)
;
}
Override
public
int
compare
(
SchemeData
first
SchemeData
second
)
{
return
C
.
UUID_NIL
.
equals
(
first
.
uuid
)
?
(
C
.
UUID_NIL
.
equals
(
second
.
uuid
)
?
0
:
1
)
:
first
.
uuid
.
compareTo
(
second
.
uuid
)
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
Parcel
dest
int
flags
)
{
dest
.
writeTypedArray
(
schemeDatas
0
)
;
}
public
static
final
Parcelable
.
Creator
<
DrmInitData
>
CREATOR
=
new
Parcelable
.
Creator
<
DrmInitData
>
(
)
{
Override
public
DrmInitData
createFromParcel
(
Parcel
in
)
{
return
new
DrmInitData
(
in
)
;
}
Override
public
DrmInitData
[
]
newArray
(
int
size
)
{
return
new
DrmInitData
[
size
]
;
}
}
;
public
static
final
class
SchemeData
implements
Parcelable
{
private
int
hashCode
;
private
final
UUID
uuid
;
public
final
String
mimeType
;
public
final
byte
[
]
data
;
public
final
boolean
requiresSecureDecryption
;
public
SchemeData
(
UUID
uuid
String
mimeType
byte
[
]
data
)
{
this
(
uuid
mimeType
data
false
)
;
}
public
SchemeData
(
UUID
uuid
String
mimeType
byte
[
]
data
boolean
requiresSecureDecryption
)
{
this
.
uuid
=
Assertions
.
checkNotNull
(
uuid
)
;
this
.
mimeType
=
Assertions
.
checkNotNull
(
mimeType
)
;
this
.
data
=
Assertions
.
checkNotNull
(
data
)
;
this
.
requiresSecureDecryption
=
requiresSecureDecryption
;
}
SchemeData
(
Parcel
in
)
{
uuid
=
new
UUID
(
in
.
readLong
(
)
in
.
readLong
(
)
)
;
mimeType
=
in
.
readString
(
)
;
data
=
in
.
createByteArray
(
)
;
requiresSecureDecryption
=
in
.
readByte
(
)
!
=
0
;
}
public
boolean
matches
(
UUID
schemeUuid
)
{
return
C
.
UUID_NIL
.
equals
(
uuid
)
|
|
schemeUuid
.
equals
(
uuid
)
;
}
Override
public
boolean
equals
(
Object
obj
)
{
if
(
!
(
obj
instanceof
SchemeData
)
)
{
return
false
;
}
if
(
obj
=
=
this
)
{
return
true
;
}
SchemeData
other
=
(
SchemeData
)
obj
;
return
mimeType
.
equals
(
other
.
mimeType
)
&
&
Util
.
areEqual
(
uuid
other
.
uuid
)
&
&
Arrays
.
equals
(
data
other
.
data
)
;
}
Override
public
int
hashCode
(
)
{
if
(
hashCode
=
=
0
)
{
int
result
=
uuid
.
hashCode
(
)
;
result
=
31
*
result
+
mimeType
.
hashCode
(
)
;
result
=
31
*
result
+
Arrays
.
hashCode
(
data
)
;
hashCode
=
result
;
}
return
hashCode
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
Parcel
dest
int
flags
)
{
dest
.
writeLong
(
uuid
.
getMostSignificantBits
(
)
)
;
dest
.
writeLong
(
uuid
.
getLeastSignificantBits
(
)
)
;
dest
.
writeString
(
mimeType
)
;
dest
.
writeByteArray
(
data
)
;
dest
.
writeByte
(
(
byte
)
(
requiresSecureDecryption
?
1
:
0
)
)
;
}
SuppressWarnings
(
"
hiding
"
)
public
static
final
Parcelable
.
Creator
<
SchemeData
>
CREATOR
=
new
Parcelable
.
Creator
<
SchemeData
>
(
)
{
Override
public
SchemeData
createFromParcel
(
Parcel
in
)
{
return
new
SchemeData
(
in
)
;
}
Override
public
SchemeData
[
]
newArray
(
int
size
)
{
return
new
SchemeData
[
size
]
;
}
}
;
}
}
