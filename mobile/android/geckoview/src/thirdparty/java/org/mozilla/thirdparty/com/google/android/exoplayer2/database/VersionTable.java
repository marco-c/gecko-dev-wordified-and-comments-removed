package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
database
;
import
android
.
content
.
ContentValues
;
import
android
.
database
.
Cursor
;
import
android
.
database
.
DatabaseUtils
;
import
android
.
database
.
SQLException
;
import
android
.
database
.
sqlite
.
SQLiteDatabase
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
VisibleForTesting
;
import
java
.
lang
.
annotation
.
Documented
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
public
final
class
VersionTable
{
public
static
final
int
VERSION_UNSET
=
-
1
;
public
static
final
int
FEATURE_OFFLINE
=
0
;
public
static
final
int
FEATURE_CACHE_CONTENT_METADATA
=
1
;
public
static
final
int
FEATURE_CACHE_FILE_METADATA
=
2
;
private
static
final
String
TABLE_NAME
=
DatabaseProvider
.
TABLE_PREFIX
+
"
Versions
"
;
private
static
final
String
COLUMN_FEATURE
=
"
feature
"
;
private
static
final
String
COLUMN_INSTANCE_UID
=
"
instance_uid
"
;
private
static
final
String
COLUMN_VERSION
=
"
version
"
;
private
static
final
String
WHERE_FEATURE_AND_INSTANCE_UID_EQUALS
=
COLUMN_FEATURE
+
"
=
?
AND
"
+
COLUMN_INSTANCE_UID
+
"
=
?
"
;
private
static
final
String
PRIMARY_KEY
=
"
PRIMARY
KEY
(
"
+
COLUMN_FEATURE
+
"
"
+
COLUMN_INSTANCE_UID
+
"
)
"
;
private
static
final
String
SQL_CREATE_TABLE_IF_NOT_EXISTS
=
"
CREATE
TABLE
IF
NOT
EXISTS
"
+
TABLE_NAME
+
"
(
"
+
COLUMN_FEATURE
+
"
INTEGER
NOT
NULL
"
+
COLUMN_INSTANCE_UID
+
"
TEXT
NOT
NULL
"
+
COLUMN_VERSION
+
"
INTEGER
NOT
NULL
"
+
PRIMARY_KEY
+
"
)
"
;
Documented
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
FEATURE_OFFLINE
FEATURE_CACHE_CONTENT_METADATA
FEATURE_CACHE_FILE_METADATA
}
)
private
interface
Feature
{
}
private
VersionTable
(
)
{
}
public
static
void
setVersion
(
SQLiteDatabase
writableDatabase
Feature
int
feature
String
instanceUid
int
version
)
throws
DatabaseIOException
{
try
{
writableDatabase
.
execSQL
(
SQL_CREATE_TABLE_IF_NOT_EXISTS
)
;
ContentValues
values
=
new
ContentValues
(
)
;
values
.
put
(
COLUMN_FEATURE
feature
)
;
values
.
put
(
COLUMN_INSTANCE_UID
instanceUid
)
;
values
.
put
(
COLUMN_VERSION
version
)
;
writableDatabase
.
replaceOrThrow
(
TABLE_NAME
null
values
)
;
}
catch
(
SQLException
e
)
{
throw
new
DatabaseIOException
(
e
)
;
}
}
public
static
void
removeVersion
(
SQLiteDatabase
writableDatabase
Feature
int
feature
String
instanceUid
)
throws
DatabaseIOException
{
try
{
if
(
!
tableExists
(
writableDatabase
TABLE_NAME
)
)
{
return
;
}
writableDatabase
.
delete
(
TABLE_NAME
WHERE_FEATURE_AND_INSTANCE_UID_EQUALS
featureAndInstanceUidArguments
(
feature
instanceUid
)
)
;
}
catch
(
SQLException
e
)
{
throw
new
DatabaseIOException
(
e
)
;
}
}
public
static
int
getVersion
(
SQLiteDatabase
database
Feature
int
feature
String
instanceUid
)
throws
DatabaseIOException
{
try
{
if
(
!
tableExists
(
database
TABLE_NAME
)
)
{
return
VERSION_UNSET
;
}
try
(
Cursor
cursor
=
database
.
query
(
TABLE_NAME
new
String
[
]
{
COLUMN_VERSION
}
WHERE_FEATURE_AND_INSTANCE_UID_EQUALS
featureAndInstanceUidArguments
(
feature
instanceUid
)
null
null
null
)
)
{
if
(
cursor
.
getCount
(
)
=
=
0
)
{
return
VERSION_UNSET
;
}
cursor
.
moveToNext
(
)
;
return
cursor
.
getInt
(
0
)
;
}
}
catch
(
SQLException
e
)
{
throw
new
DatabaseIOException
(
e
)
;
}
}
VisibleForTesting
static
boolean
tableExists
(
SQLiteDatabase
readableDatabase
String
tableName
)
{
long
count
=
DatabaseUtils
.
queryNumEntries
(
readableDatabase
"
sqlite_master
"
"
tbl_name
=
?
"
new
String
[
]
{
tableName
}
)
;
return
count
>
0
;
}
private
static
String
[
]
featureAndInstanceUidArguments
(
int
feature
String
instance
)
{
return
new
String
[
]
{
Integer
.
toString
(
feature
)
instance
}
;
}
}
