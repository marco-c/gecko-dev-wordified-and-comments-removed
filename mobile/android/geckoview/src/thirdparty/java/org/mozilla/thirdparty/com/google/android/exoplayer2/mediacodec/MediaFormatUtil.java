package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
mediacodec
;
import
android
.
media
.
MediaFormat
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
video
.
ColorInfo
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
util
.
List
;
public
final
class
MediaFormatUtil
{
private
MediaFormatUtil
(
)
{
}
public
static
void
setString
(
MediaFormat
format
String
key
String
value
)
{
format
.
setString
(
key
value
)
;
}
public
static
void
setCsdBuffers
(
MediaFormat
format
List
<
byte
[
]
>
csdBuffers
)
{
for
(
int
i
=
0
;
i
<
csdBuffers
.
size
(
)
;
i
+
+
)
{
format
.
setByteBuffer
(
"
csd
-
"
+
i
ByteBuffer
.
wrap
(
csdBuffers
.
get
(
i
)
)
)
;
}
}
public
static
void
maybeSetInteger
(
MediaFormat
format
String
key
int
value
)
{
if
(
value
!
=
Format
.
NO_VALUE
)
{
format
.
setInteger
(
key
value
)
;
}
}
public
static
void
maybeSetFloat
(
MediaFormat
format
String
key
float
value
)
{
if
(
value
!
=
Format
.
NO_VALUE
)
{
format
.
setFloat
(
key
value
)
;
}
}
public
static
void
maybeSetByteBuffer
(
MediaFormat
format
String
key
Nullable
byte
[
]
value
)
{
if
(
value
!
=
null
)
{
format
.
setByteBuffer
(
key
ByteBuffer
.
wrap
(
value
)
)
;
}
}
SuppressWarnings
(
"
InlinedApi
"
)
public
static
void
maybeSetColorInfo
(
MediaFormat
format
Nullable
ColorInfo
colorInfo
)
{
if
(
colorInfo
!
=
null
)
{
maybeSetInteger
(
format
MediaFormat
.
KEY_COLOR_TRANSFER
colorInfo
.
colorTransfer
)
;
maybeSetInteger
(
format
MediaFormat
.
KEY_COLOR_STANDARD
colorInfo
.
colorSpace
)
;
maybeSetInteger
(
format
MediaFormat
.
KEY_COLOR_RANGE
colorInfo
.
colorRange
)
;
maybeSetByteBuffer
(
format
MediaFormat
.
KEY_HDR_STATIC_INFO
colorInfo
.
hdrStaticInfo
)
;
}
}
}
