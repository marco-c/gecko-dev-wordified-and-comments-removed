package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
android
.
os
.
Handler
;
import
androidx
.
annotation
.
CallSuper
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
TransferListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
import
java
.
util
.
HashMap
;
public
abstract
class
CompositeMediaSource
<
T
>
extends
BaseMediaSource
{
private
final
HashMap
<
T
MediaSourceAndListener
>
childSources
;
Nullable
private
Handler
eventHandler
;
Nullable
private
TransferListener
mediaTransferListener
;
protected
CompositeMediaSource
(
)
{
childSources
=
new
HashMap
<
>
(
)
;
}
Override
CallSuper
protected
void
prepareSourceInternal
(
Nullable
TransferListener
mediaTransferListener
)
{
this
.
mediaTransferListener
=
mediaTransferListener
;
eventHandler
=
new
Handler
(
)
;
}
Override
CallSuper
public
void
maybeThrowSourceInfoRefreshError
(
)
throws
IOException
{
for
(
MediaSourceAndListener
childSource
:
childSources
.
values
(
)
)
{
childSource
.
mediaSource
.
maybeThrowSourceInfoRefreshError
(
)
;
}
}
Override
CallSuper
protected
void
enableInternal
(
)
{
for
(
MediaSourceAndListener
childSource
:
childSources
.
values
(
)
)
{
childSource
.
mediaSource
.
enable
(
childSource
.
caller
)
;
}
}
Override
CallSuper
protected
void
disableInternal
(
)
{
for
(
MediaSourceAndListener
childSource
:
childSources
.
values
(
)
)
{
childSource
.
mediaSource
.
disable
(
childSource
.
caller
)
;
}
}
Override
CallSuper
protected
void
releaseSourceInternal
(
)
{
for
(
MediaSourceAndListener
childSource
:
childSources
.
values
(
)
)
{
childSource
.
mediaSource
.
releaseSource
(
childSource
.
caller
)
;
childSource
.
mediaSource
.
removeEventListener
(
childSource
.
eventListener
)
;
}
childSources
.
clear
(
)
;
}
protected
abstract
void
onChildSourceInfoRefreshed
(
T
id
MediaSource
mediaSource
Timeline
timeline
)
;
protected
final
void
prepareChildSource
(
final
T
id
MediaSource
mediaSource
)
{
Assertions
.
checkArgument
(
!
childSources
.
containsKey
(
id
)
)
;
MediaSourceCaller
caller
=
(
source
timeline
)
-
>
onChildSourceInfoRefreshed
(
id
source
timeline
)
;
MediaSourceEventListener
eventListener
=
new
ForwardingEventListener
(
id
)
;
childSources
.
put
(
id
new
MediaSourceAndListener
(
mediaSource
caller
eventListener
)
)
;
mediaSource
.
addEventListener
(
Assertions
.
checkNotNull
(
eventHandler
)
eventListener
)
;
mediaSource
.
prepareSource
(
caller
mediaTransferListener
)
;
if
(
!
isEnabled
(
)
)
{
mediaSource
.
disable
(
caller
)
;
}
}
protected
final
void
enableChildSource
(
final
T
id
)
{
MediaSourceAndListener
enabledChild
=
Assertions
.
checkNotNull
(
childSources
.
get
(
id
)
)
;
enabledChild
.
mediaSource
.
enable
(
enabledChild
.
caller
)
;
}
protected
final
void
disableChildSource
(
final
T
id
)
{
MediaSourceAndListener
disabledChild
=
Assertions
.
checkNotNull
(
childSources
.
get
(
id
)
)
;
disabledChild
.
mediaSource
.
disable
(
disabledChild
.
caller
)
;
}
protected
final
void
releaseChildSource
(
T
id
)
{
MediaSourceAndListener
removedChild
=
Assertions
.
checkNotNull
(
childSources
.
remove
(
id
)
)
;
removedChild
.
mediaSource
.
releaseSource
(
removedChild
.
caller
)
;
removedChild
.
mediaSource
.
removeEventListener
(
removedChild
.
eventListener
)
;
}
protected
int
getWindowIndexForChildWindowIndex
(
T
id
int
windowIndex
)
{
return
windowIndex
;
}
protected
Nullable
MediaPeriodId
getMediaPeriodIdForChildMediaPeriodId
(
T
id
MediaPeriodId
mediaPeriodId
)
{
return
mediaPeriodId
;
}
protected
long
getMediaTimeForChildMediaTime
(
Nullable
T
id
long
mediaTimeMs
)
{
return
mediaTimeMs
;
}
protected
boolean
shouldDispatchCreateOrReleaseEvent
(
MediaPeriodId
mediaPeriodId
)
{
return
true
;
}
private
static
final
class
MediaSourceAndListener
{
public
final
MediaSource
mediaSource
;
public
final
MediaSourceCaller
caller
;
public
final
MediaSourceEventListener
eventListener
;
public
MediaSourceAndListener
(
MediaSource
mediaSource
MediaSourceCaller
caller
MediaSourceEventListener
eventListener
)
{
this
.
mediaSource
=
mediaSource
;
this
.
caller
=
caller
;
this
.
eventListener
=
eventListener
;
}
}
private
final
class
ForwardingEventListener
implements
MediaSourceEventListener
{
private
final
T
id
;
private
EventDispatcher
eventDispatcher
;
public
ForwardingEventListener
(
T
id
)
{
this
.
eventDispatcher
=
createEventDispatcher
(
null
)
;
this
.
id
=
id
;
}
Override
public
void
onMediaPeriodCreated
(
int
windowIndex
MediaPeriodId
mediaPeriodId
)
{
if
(
maybeUpdateEventDispatcher
(
windowIndex
mediaPeriodId
)
)
{
if
(
shouldDispatchCreateOrReleaseEvent
(
Assertions
.
checkNotNull
(
eventDispatcher
.
mediaPeriodId
)
)
)
{
eventDispatcher
.
mediaPeriodCreated
(
)
;
}
}
}
Override
public
void
onMediaPeriodReleased
(
int
windowIndex
MediaPeriodId
mediaPeriodId
)
{
if
(
maybeUpdateEventDispatcher
(
windowIndex
mediaPeriodId
)
)
{
if
(
shouldDispatchCreateOrReleaseEvent
(
Assertions
.
checkNotNull
(
eventDispatcher
.
mediaPeriodId
)
)
)
{
eventDispatcher
.
mediaPeriodReleased
(
)
;
}
}
}
Override
public
void
onLoadStarted
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventData
MediaLoadData
mediaLoadData
)
{
if
(
maybeUpdateEventDispatcher
(
windowIndex
mediaPeriodId
)
)
{
eventDispatcher
.
loadStarted
(
loadEventData
maybeUpdateMediaLoadData
(
mediaLoadData
)
)
;
}
}
Override
public
void
onLoadCompleted
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventData
MediaLoadData
mediaLoadData
)
{
if
(
maybeUpdateEventDispatcher
(
windowIndex
mediaPeriodId
)
)
{
eventDispatcher
.
loadCompleted
(
loadEventData
maybeUpdateMediaLoadData
(
mediaLoadData
)
)
;
}
}
Override
public
void
onLoadCanceled
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventData
MediaLoadData
mediaLoadData
)
{
if
(
maybeUpdateEventDispatcher
(
windowIndex
mediaPeriodId
)
)
{
eventDispatcher
.
loadCanceled
(
loadEventData
maybeUpdateMediaLoadData
(
mediaLoadData
)
)
;
}
}
Override
public
void
onLoadError
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventData
MediaLoadData
mediaLoadData
IOException
error
boolean
wasCanceled
)
{
if
(
maybeUpdateEventDispatcher
(
windowIndex
mediaPeriodId
)
)
{
eventDispatcher
.
loadError
(
loadEventData
maybeUpdateMediaLoadData
(
mediaLoadData
)
error
wasCanceled
)
;
}
}
Override
public
void
onReadingStarted
(
int
windowIndex
MediaPeriodId
mediaPeriodId
)
{
if
(
maybeUpdateEventDispatcher
(
windowIndex
mediaPeriodId
)
)
{
eventDispatcher
.
readingStarted
(
)
;
}
}
Override
public
void
onUpstreamDiscarded
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
MediaLoadData
mediaLoadData
)
{
if
(
maybeUpdateEventDispatcher
(
windowIndex
mediaPeriodId
)
)
{
eventDispatcher
.
upstreamDiscarded
(
maybeUpdateMediaLoadData
(
mediaLoadData
)
)
;
}
}
Override
public
void
onDownstreamFormatChanged
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
MediaLoadData
mediaLoadData
)
{
if
(
maybeUpdateEventDispatcher
(
windowIndex
mediaPeriodId
)
)
{
eventDispatcher
.
downstreamFormatChanged
(
maybeUpdateMediaLoadData
(
mediaLoadData
)
)
;
}
}
private
boolean
maybeUpdateEventDispatcher
(
int
childWindowIndex
Nullable
MediaPeriodId
childMediaPeriodId
)
{
MediaPeriodId
mediaPeriodId
=
null
;
if
(
childMediaPeriodId
!
=
null
)
{
mediaPeriodId
=
getMediaPeriodIdForChildMediaPeriodId
(
id
childMediaPeriodId
)
;
if
(
mediaPeriodId
=
=
null
)
{
return
false
;
}
}
int
windowIndex
=
getWindowIndexForChildWindowIndex
(
id
childWindowIndex
)
;
if
(
eventDispatcher
.
windowIndex
!
=
windowIndex
|
|
!
Util
.
areEqual
(
eventDispatcher
.
mediaPeriodId
mediaPeriodId
)
)
{
eventDispatcher
=
createEventDispatcher
(
windowIndex
mediaPeriodId
0
)
;
}
return
true
;
}
private
MediaLoadData
maybeUpdateMediaLoadData
(
MediaLoadData
mediaLoadData
)
{
long
mediaStartTimeMs
=
getMediaTimeForChildMediaTime
(
id
mediaLoadData
.
mediaStartTimeMs
)
;
long
mediaEndTimeMs
=
getMediaTimeForChildMediaTime
(
id
mediaLoadData
.
mediaEndTimeMs
)
;
if
(
mediaStartTimeMs
=
=
mediaLoadData
.
mediaStartTimeMs
&
&
mediaEndTimeMs
=
=
mediaLoadData
.
mediaEndTimeMs
)
{
return
mediaLoadData
;
}
return
new
MediaLoadData
(
mediaLoadData
.
dataType
mediaLoadData
.
trackType
mediaLoadData
.
trackFormat
mediaLoadData
.
trackSelectionReason
mediaLoadData
.
trackSelectionData
mediaStartTimeMs
mediaEndTimeMs
)
;
}
}
}
