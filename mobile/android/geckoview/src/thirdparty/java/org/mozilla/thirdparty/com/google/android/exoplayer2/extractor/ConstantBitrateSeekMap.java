package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
public
class
ConstantBitrateSeekMap
implements
SeekMap
{
private
final
long
inputLength
;
private
final
long
firstFrameBytePosition
;
private
final
int
frameSize
;
private
final
long
dataSize
;
private
final
int
bitrate
;
private
final
long
durationUs
;
public
ConstantBitrateSeekMap
(
long
inputLength
long
firstFrameBytePosition
int
bitrate
int
frameSize
)
{
this
.
inputLength
=
inputLength
;
this
.
firstFrameBytePosition
=
firstFrameBytePosition
;
this
.
frameSize
=
frameSize
=
=
C
.
LENGTH_UNSET
?
1
:
frameSize
;
this
.
bitrate
=
bitrate
;
if
(
inputLength
=
=
C
.
LENGTH_UNSET
)
{
dataSize
=
C
.
LENGTH_UNSET
;
durationUs
=
C
.
TIME_UNSET
;
}
else
{
dataSize
=
inputLength
-
firstFrameBytePosition
;
durationUs
=
getTimeUsAtPosition
(
inputLength
firstFrameBytePosition
bitrate
)
;
}
}
Override
public
boolean
isSeekable
(
)
{
return
dataSize
!
=
C
.
LENGTH_UNSET
;
}
Override
public
SeekPoints
getSeekPoints
(
long
timeUs
)
{
if
(
dataSize
=
=
C
.
LENGTH_UNSET
)
{
return
new
SeekPoints
(
new
SeekPoint
(
0
firstFrameBytePosition
)
)
;
}
long
seekFramePosition
=
getFramePositionForTimeUs
(
timeUs
)
;
long
seekTimeUs
=
getTimeUsAtPosition
(
seekFramePosition
)
;
SeekPoint
seekPoint
=
new
SeekPoint
(
seekTimeUs
seekFramePosition
)
;
if
(
seekTimeUs
>
=
timeUs
|
|
seekFramePosition
+
frameSize
>
=
inputLength
)
{
return
new
SeekPoints
(
seekPoint
)
;
}
else
{
long
secondSeekPosition
=
seekFramePosition
+
frameSize
;
long
secondSeekTimeUs
=
getTimeUsAtPosition
(
secondSeekPosition
)
;
SeekPoint
secondSeekPoint
=
new
SeekPoint
(
secondSeekTimeUs
secondSeekPosition
)
;
return
new
SeekPoints
(
seekPoint
secondSeekPoint
)
;
}
}
Override
public
long
getDurationUs
(
)
{
return
durationUs
;
}
public
long
getTimeUsAtPosition
(
long
position
)
{
return
getTimeUsAtPosition
(
position
firstFrameBytePosition
bitrate
)
;
}
private
static
long
getTimeUsAtPosition
(
long
position
long
firstFrameBytePosition
int
bitrate
)
{
return
Math
.
max
(
0
position
-
firstFrameBytePosition
)
*
C
.
BITS_PER_BYTE
*
C
.
MICROS_PER_SECOND
/
bitrate
;
}
private
long
getFramePositionForTimeUs
(
long
timeUs
)
{
long
positionOffset
=
(
timeUs
*
bitrate
)
/
(
C
.
MICROS_PER_SECOND
*
C
.
BITS_PER_BYTE
)
;
positionOffset
=
(
positionOffset
/
frameSize
)
*
frameSize
;
positionOffset
=
Util
.
constrainValue
(
positionOffset
0
dataSize
-
frameSize
)
;
return
firstFrameBytePosition
+
positionOffset
;
}
}
