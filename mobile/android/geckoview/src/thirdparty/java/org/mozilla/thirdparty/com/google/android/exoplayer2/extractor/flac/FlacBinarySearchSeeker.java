package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
flac
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
BinarySearchSeeker
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorInput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
FlacFrameReader
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
FlacFrameReader
.
SampleNumberHolder
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
SeekMap
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
FlacConstants
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
FlacStreamMetadata
;
import
java
.
io
.
IOException
;
final
class
FlacBinarySearchSeeker
extends
BinarySearchSeeker
{
public
FlacBinarySearchSeeker
(
FlacStreamMetadata
flacStreamMetadata
int
frameStartMarker
long
firstFramePosition
long
inputLength
)
{
super
(
flacStreamMetadata
:
:
getSampleNumber
new
FlacTimestampSeeker
(
flacStreamMetadata
frameStartMarker
)
flacStreamMetadata
.
getDurationUs
(
)
0
flacStreamMetadata
.
totalSamples
firstFramePosition
inputLength
flacStreamMetadata
.
getApproxBytesPerFrame
(
)
Math
.
max
(
FlacConstants
.
MIN_FRAME_HEADER_SIZE
flacStreamMetadata
.
minFrameSize
)
)
;
}
private
static
final
class
FlacTimestampSeeker
implements
TimestampSeeker
{
private
final
FlacStreamMetadata
flacStreamMetadata
;
private
final
int
frameStartMarker
;
private
final
SampleNumberHolder
sampleNumberHolder
;
private
FlacTimestampSeeker
(
FlacStreamMetadata
flacStreamMetadata
int
frameStartMarker
)
{
this
.
flacStreamMetadata
=
flacStreamMetadata
;
this
.
frameStartMarker
=
frameStartMarker
;
sampleNumberHolder
=
new
SampleNumberHolder
(
)
;
}
Override
public
TimestampSearchResult
searchForTimestamp
(
ExtractorInput
input
long
targetSampleNumber
)
throws
IOException
InterruptedException
{
long
searchPosition
=
input
.
getPosition
(
)
;
long
leftFrameFirstSampleNumber
=
findNextFrame
(
input
)
;
long
leftFramePosition
=
input
.
getPeekPosition
(
)
;
input
.
advancePeekPosition
(
Math
.
max
(
FlacConstants
.
MIN_FRAME_HEADER_SIZE
flacStreamMetadata
.
minFrameSize
)
)
;
long
rightFrameFirstSampleNumber
=
findNextFrame
(
input
)
;
long
rightFramePosition
=
input
.
getPeekPosition
(
)
;
if
(
leftFrameFirstSampleNumber
<
=
targetSampleNumber
&
&
rightFrameFirstSampleNumber
>
targetSampleNumber
)
{
return
TimestampSearchResult
.
targetFoundResult
(
leftFramePosition
)
;
}
else
if
(
rightFrameFirstSampleNumber
<
=
targetSampleNumber
)
{
return
TimestampSearchResult
.
underestimatedResult
(
rightFrameFirstSampleNumber
rightFramePosition
)
;
}
else
{
return
TimestampSearchResult
.
overestimatedResult
(
leftFrameFirstSampleNumber
searchPosition
)
;
}
}
private
long
findNextFrame
(
ExtractorInput
input
)
throws
IOException
InterruptedException
{
while
(
input
.
getPeekPosition
(
)
<
input
.
getLength
(
)
-
FlacConstants
.
MIN_FRAME_HEADER_SIZE
&
&
!
FlacFrameReader
.
checkFrameHeaderFromPeek
(
input
flacStreamMetadata
frameStartMarker
sampleNumberHolder
)
)
{
input
.
advancePeekPosition
(
1
)
;
}
if
(
input
.
getPeekPosition
(
)
>
=
input
.
getLength
(
)
-
FlacConstants
.
MIN_FRAME_HEADER_SIZE
)
{
input
.
advancePeekPosition
(
(
int
)
(
input
.
getLength
(
)
-
input
.
getPeekPosition
(
)
)
)
;
return
flacStreamMetadata
.
totalSamples
;
}
return
sampleNumberHolder
.
sampleNumber
;
}
}
}
