package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
scte35
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
Metadata
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
MetadataDecoder
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
MetadataInputBuffer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableBitArray
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
TimestampAdjuster
;
import
java
.
nio
.
ByteBuffer
;
import
org
.
checkerframework
.
checker
.
nullness
.
qual
.
MonotonicNonNull
;
public
final
class
SpliceInfoDecoder
implements
MetadataDecoder
{
private
static
final
int
TYPE_SPLICE_NULL
=
0x00
;
private
static
final
int
TYPE_SPLICE_SCHEDULE
=
0x04
;
private
static
final
int
TYPE_SPLICE_INSERT
=
0x05
;
private
static
final
int
TYPE_TIME_SIGNAL
=
0x06
;
private
static
final
int
TYPE_PRIVATE_COMMAND
=
0xFF
;
private
final
ParsableByteArray
sectionData
;
private
final
ParsableBitArray
sectionHeader
;
MonotonicNonNull
private
TimestampAdjuster
timestampAdjuster
;
public
SpliceInfoDecoder
(
)
{
sectionData
=
new
ParsableByteArray
(
)
;
sectionHeader
=
new
ParsableBitArray
(
)
;
}
SuppressWarnings
(
"
ByteBufferBackingArray
"
)
Override
public
Metadata
decode
(
MetadataInputBuffer
inputBuffer
)
{
ByteBuffer
buffer
=
Assertions
.
checkNotNull
(
inputBuffer
.
data
)
;
if
(
timestampAdjuster
=
=
null
|
|
inputBuffer
.
subsampleOffsetUs
!
=
timestampAdjuster
.
getTimestampOffsetUs
(
)
)
{
timestampAdjuster
=
new
TimestampAdjuster
(
inputBuffer
.
timeUs
)
;
timestampAdjuster
.
adjustSampleTimestamp
(
inputBuffer
.
timeUs
-
inputBuffer
.
subsampleOffsetUs
)
;
}
byte
[
]
data
=
buffer
.
array
(
)
;
int
size
=
buffer
.
limit
(
)
;
sectionData
.
reset
(
data
size
)
;
sectionHeader
.
reset
(
data
size
)
;
sectionHeader
.
skipBits
(
39
)
;
long
ptsAdjustment
=
sectionHeader
.
readBits
(
1
)
;
ptsAdjustment
=
(
ptsAdjustment
<
<
32
)
|
sectionHeader
.
readBits
(
32
)
;
sectionHeader
.
skipBits
(
20
)
;
int
spliceCommandLength
=
sectionHeader
.
readBits
(
12
)
;
int
spliceCommandType
=
sectionHeader
.
readBits
(
8
)
;
Nullable
SpliceCommand
command
=
null
;
sectionData
.
skipBytes
(
14
)
;
switch
(
spliceCommandType
)
{
case
TYPE_SPLICE_NULL
:
command
=
new
SpliceNullCommand
(
)
;
break
;
case
TYPE_SPLICE_SCHEDULE
:
command
=
SpliceScheduleCommand
.
parseFromSection
(
sectionData
)
;
break
;
case
TYPE_SPLICE_INSERT
:
command
=
SpliceInsertCommand
.
parseFromSection
(
sectionData
ptsAdjustment
timestampAdjuster
)
;
break
;
case
TYPE_TIME_SIGNAL
:
command
=
TimeSignalCommand
.
parseFromSection
(
sectionData
ptsAdjustment
timestampAdjuster
)
;
break
;
case
TYPE_PRIVATE_COMMAND
:
command
=
PrivateCommand
.
parseFromSection
(
sectionData
spliceCommandLength
ptsAdjustment
)
;
break
;
default
:
break
;
}
return
command
=
=
null
?
new
Metadata
(
)
:
new
Metadata
(
command
)
;
}
}
