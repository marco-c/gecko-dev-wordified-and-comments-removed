package
org
.
mozilla
.
gecko
.
media
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
mozglue
.
JNIObject
;
public
class
GeckoHlsResourceWrapper
{
private
static
final
String
LOGTAG
=
"
GeckoHlsResourceWrapper
"
;
private
static
final
boolean
DEBUG
=
false
;
private
GeckoHlsPlayer
mPlayer
=
null
;
private
boolean
mDestroy
=
false
;
public
static
class
HlsResourceCallbacks
extends
JNIObject
implements
GeckoHlsPlayer
.
ResourceCallbacks
{
WrapForJNI
(
calledFrom
=
"
gecko
"
)
HlsResourceCallbacks
(
)
{
}
Override
WrapForJNI
(
dispatchTo
=
"
gecko
"
)
public
native
void
onDataArrived
(
)
;
Override
WrapForJNI
(
dispatchTo
=
"
gecko
"
)
public
native
void
onError
(
int
errorCode
)
;
Override
protected
void
disposeNative
(
)
{
throw
new
UnsupportedOperationException
(
)
;
}
}
private
GeckoHlsResourceWrapper
(
String
url
GeckoHlsPlayer
.
ResourceCallbacks
callback
)
{
if
(
DEBUG
)
Log
.
d
(
LOGTAG
"
GeckoHlsResourceWrapper
created
with
url
=
"
+
url
)
;
assertTrue
(
callback
!
=
null
)
;
mPlayer
=
new
GeckoHlsPlayer
(
)
;
mPlayer
.
addResourceWrapperCallbackListener
(
callback
)
;
mPlayer
.
init
(
url
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
public
static
GeckoHlsResourceWrapper
create
(
String
url
GeckoHlsPlayer
.
ResourceCallbacks
callback
)
{
return
new
GeckoHlsResourceWrapper
(
url
callback
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
public
GeckoHlsPlayer
GetPlayer
(
)
{
assertTrue
(
!
mDestroy
)
;
assertTrue
(
mPlayer
!
=
null
)
;
return
mPlayer
;
}
private
static
void
assertTrue
(
boolean
condition
)
{
if
(
DEBUG
&
&
!
condition
)
{
throw
new
AssertionError
(
"
Expected
condition
to
be
true
"
)
;
}
}
WrapForJNI
private
void
destroy
(
)
{
if
(
DEBUG
)
Log
.
d
(
LOGTAG
"
destroy
!
!
Native
object
is
destroyed
.
"
)
;
if
(
mDestroy
)
{
return
;
}
mDestroy
=
true
;
if
(
mPlayer
!
=
null
)
{
mPlayer
.
release
(
)
;
mPlayer
=
null
;
}
}
}
