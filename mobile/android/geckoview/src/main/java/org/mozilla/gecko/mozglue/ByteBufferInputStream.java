package
org
.
mozilla
.
gecko
.
mozglue
;
import
java
.
io
.
InputStream
;
import
java
.
nio
.
ByteBuffer
;
class
ByteBufferInputStream
extends
InputStream
{
protected
ByteBuffer
mBuf
;
private
final
NativeReference
mNativeRef
;
protected
ByteBufferInputStream
(
final
ByteBuffer
buffer
final
NativeReference
ref
)
{
mBuf
=
buffer
;
mNativeRef
=
ref
;
}
Override
public
int
available
(
)
{
return
mBuf
.
remaining
(
)
;
}
Override
public
void
close
(
)
{
}
Override
public
int
read
(
)
{
if
(
!
mBuf
.
hasRemaining
(
)
|
|
mNativeRef
.
isReleased
(
)
)
{
return
-
1
;
}
return
mBuf
.
get
(
)
&
0xff
;
}
Override
public
int
read
(
final
byte
[
]
buffer
final
int
offset
final
int
length
)
{
if
(
!
mBuf
.
hasRemaining
(
)
|
|
mNativeRef
.
isReleased
(
)
)
{
return
-
1
;
}
final
int
remainingLength
=
Math
.
min
(
length
mBuf
.
remaining
(
)
)
;
mBuf
.
get
(
buffer
offset
remainingLength
)
;
return
length
;
}
Override
public
long
skip
(
final
long
byteCount
)
{
if
(
byteCount
<
0
|
|
mNativeRef
.
isReleased
(
)
)
{
return
0
;
}
final
long
remainingByteCount
=
Math
.
min
(
byteCount
mBuf
.
remaining
(
)
)
;
mBuf
.
position
(
mBuf
.
position
(
)
+
(
int
)
remainingByteCount
)
;
return
remainingByteCount
;
}
}
