package
org
.
mozilla
.
geckoview
;
import
android
.
annotation
.
SuppressLint
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
io
.
ByteArrayInputStream
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
security
.
cert
.
CertificateException
;
import
java
.
security
.
cert
.
CertificateFactory
;
import
java
.
security
.
cert
.
X509Certificate
;
import
java
.
util
.
Arrays
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
util
.
XPCOMError
;
AnyThread
public
class
WebRequestError
extends
Exception
{
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
ERROR_CATEGORY_UNKNOWN
ERROR_CATEGORY_SECURITY
ERROR_CATEGORY_NETWORK
ERROR_CATEGORY_CONTENT
ERROR_CATEGORY_URI
ERROR_CATEGORY_PROXY
ERROR_CATEGORY_SAFEBROWSING
}
)
public
interface
ErrorCategory
{
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
ERROR_UNKNOWN
ERROR_SECURITY_SSL
ERROR_SECURITY_BAD_CERT
ERROR_NET_RESET
ERROR_NET_INTERRUPT
ERROR_NET_TIMEOUT
ERROR_CONNECTION_REFUSED
ERROR_UNKNOWN_PROTOCOL
ERROR_UNKNOWN_HOST
ERROR_UNKNOWN_SOCKET_TYPE
ERROR_UNKNOWN_PROXY_HOST
ERROR_MALFORMED_URI
ERROR_REDIRECT_LOOP
ERROR_SAFEBROWSING_PHISHING_URI
ERROR_SAFEBROWSING_MALWARE_URI
ERROR_SAFEBROWSING_UNWANTED_URI
ERROR_SAFEBROWSING_HARMFUL_URI
ERROR_CONTENT_CRASHED
ERROR_OFFLINE
ERROR_PORT_BLOCKED
ERROR_PROXY_CONNECTION_REFUSED
ERROR_FILE_NOT_FOUND
ERROR_FILE_ACCESS_DENIED
ERROR_INVALID_CONTENT_ENCODING
ERROR_UNSAFE_CONTENT_TYPE
ERROR_CORRUPTED_CONTENT
ERROR_DATA_URI_TOO_LONG
ERROR_HTTPS_ONLY
ERROR_BAD_HSTS_CERT
}
)
public
interface
Error
{
}
public
static
final
int
ERROR_CATEGORY_UNKNOWN
=
0x1
;
public
static
final
int
ERROR_CATEGORY_SECURITY
=
0x2
;
public
static
final
int
ERROR_CATEGORY_NETWORK
=
0x3
;
public
static
final
int
ERROR_CATEGORY_CONTENT
=
0x4
;
public
static
final
int
ERROR_CATEGORY_URI
=
0x5
;
public
static
final
int
ERROR_CATEGORY_PROXY
=
0x6
;
public
static
final
int
ERROR_CATEGORY_SAFEBROWSING
=
0x7
;
public
static
final
int
ERROR_UNKNOWN
=
0x11
;
public
static
final
int
ERROR_SECURITY_SSL
=
0x22
;
public
static
final
int
ERROR_SECURITY_BAD_CERT
=
0x32
;
public
static
final
int
ERROR_NET_INTERRUPT
=
0x23
;
public
static
final
int
ERROR_NET_TIMEOUT
=
0x33
;
public
static
final
int
ERROR_CONNECTION_REFUSED
=
0x43
;
public
static
final
int
ERROR_UNKNOWN_SOCKET_TYPE
=
0x53
;
public
static
final
int
ERROR_REDIRECT_LOOP
=
0x63
;
public
static
final
int
ERROR_OFFLINE
=
0x73
;
public
static
final
int
ERROR_PORT_BLOCKED
=
0x83
;
public
static
final
int
ERROR_NET_RESET
=
0x93
;
public
static
final
int
ERROR_HTTPS_ONLY
=
0xA3
;
public
static
final
int
ERROR_BAD_HSTS_CERT
=
0xB3
;
public
static
final
int
ERROR_UNSAFE_CONTENT_TYPE
=
0x24
;
public
static
final
int
ERROR_CORRUPTED_CONTENT
=
0x34
;
public
static
final
int
ERROR_CONTENT_CRASHED
=
0x44
;
public
static
final
int
ERROR_INVALID_CONTENT_ENCODING
=
0x54
;
public
static
final
int
ERROR_UNKNOWN_HOST
=
0x25
;
public
static
final
int
ERROR_MALFORMED_URI
=
0x35
;
public
static
final
int
ERROR_UNKNOWN_PROTOCOL
=
0x45
;
public
static
final
int
ERROR_FILE_NOT_FOUND
=
0x55
;
public
static
final
int
ERROR_FILE_ACCESS_DENIED
=
0x65
;
public
static
final
int
ERROR_DATA_URI_TOO_LONG
=
0x75
;
public
static
final
int
ERROR_PROXY_CONNECTION_REFUSED
=
0x26
;
public
static
final
int
ERROR_UNKNOWN_PROXY_HOST
=
0x36
;
public
static
final
int
ERROR_SAFEBROWSING_MALWARE_URI
=
0x27
;
public
static
final
int
ERROR_SAFEBROWSING_UNWANTED_URI
=
0x37
;
public
static
final
int
ERROR_SAFEBROWSING_HARMFUL_URI
=
0x47
;
public
static
final
int
ERROR_SAFEBROWSING_PHISHING_URI
=
0x57
;
public
final
int
code
;
public
final
int
category
;
public
final
Nullable
X509Certificate
certificate
;
public
WebRequestError
(
final
Error
int
code
final
ErrorCategory
int
category
)
{
this
(
code
category
null
)
;
}
public
WebRequestError
(
final
Error
int
code
final
ErrorCategory
int
category
final
X509Certificate
certificate
)
{
super
(
String
.
format
(
"
Request
failed
error
=
0x
%
x
category
=
0x
%
x
"
code
category
)
)
;
this
.
code
=
code
;
this
.
category
=
category
;
this
.
certificate
=
certificate
;
}
Override
public
boolean
equals
(
final
Object
other
)
{
if
(
!
(
other
instanceof
WebRequestError
)
)
{
return
false
;
}
final
WebRequestError
otherError
=
(
WebRequestError
)
other
;
return
otherError
.
code
=
=
this
.
code
&
&
otherError
.
category
=
=
this
.
category
;
}
Override
public
int
hashCode
(
)
{
return
Arrays
.
hashCode
(
new
Object
[
]
{
category
code
}
)
;
}
WrapForJNI
static
WebRequestError
fromGeckoError
(
final
long
geckoError
final
int
geckoErrorModule
final
int
geckoErrorClass
final
byte
[
]
certificateBytes
)
{
assert
geckoErrorModule
=
=
XPCOMError
.
getErrorModule
(
geckoError
)
;
final
int
code
=
convertGeckoError
(
geckoError
geckoErrorClass
)
;
final
int
category
=
getErrorCategory
(
XPCOMError
.
getErrorModule
(
geckoError
)
code
)
;
X509Certificate
certificate
=
null
;
if
(
certificateBytes
!
=
null
)
{
try
{
final
CertificateFactory
factory
=
CertificateFactory
.
getInstance
(
"
X
.
509
"
)
;
certificate
=
(
X509Certificate
)
factory
.
generateCertificate
(
new
ByteArrayInputStream
(
certificateBytes
)
)
;
}
catch
(
final
CertificateException
e
)
{
throw
new
IllegalArgumentException
(
"
Unable
to
parse
DER
certificate
"
)
;
}
}
return
new
WebRequestError
(
code
category
certificate
)
;
}
SuppressLint
(
"
WrongConstant
"
)
WrapForJNI
static
ErrorCategory
int
getErrorCategory
(
final
long
errorModule
final
Error
int
error
)
{
if
(
errorModule
=
=
XPCOMError
.
NS_ERROR_MODULE_SECURITY
)
{
return
ERROR_CATEGORY_SECURITY
;
}
return
error
&
0xF
;
}
WrapForJNI
static
Error
int
convertGeckoError
(
final
long
geckoError
final
int
geckoErrorClass
)
{
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_PHISHING_URI
)
{
return
ERROR_SAFEBROWSING_PHISHING_URI
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_MALWARE_URI
)
{
return
ERROR_SAFEBROWSING_MALWARE_URI
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_UNWANTED_URI
)
{
return
ERROR_SAFEBROWSING_UNWANTED_URI
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_HARMFUL_URI
)
{
return
ERROR_SAFEBROWSING_HARMFUL_URI
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_CONTENT_CRASHED
)
{
return
ERROR_CONTENT_CRASHED
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_INVALID_CONTENT_ENCODING
)
{
return
ERROR_INVALID_CONTENT_ENCODING
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_UNSAFE_CONTENT_TYPE
)
{
return
ERROR_UNSAFE_CONTENT_TYPE
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_CORRUPTED_CONTENT
)
{
return
ERROR_CORRUPTED_CONTENT
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_NET_RESET
)
{
return
ERROR_NET_RESET
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_NET_RESET
)
{
return
ERROR_NET_INTERRUPT
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_NET_TIMEOUT
)
{
return
ERROR_NET_TIMEOUT
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_CONNECTION_REFUSED
)
{
return
ERROR_CONNECTION_REFUSED
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_UNKNOWN_SOCKET_TYPE
)
{
return
ERROR_UNKNOWN_SOCKET_TYPE
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_REDIRECT_LOOP
)
{
return
ERROR_REDIRECT_LOOP
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_HTTPS_ONLY
)
{
return
ERROR_HTTPS_ONLY
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_BAD_HSTS_CERT
)
{
return
ERROR_BAD_HSTS_CERT
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_OFFLINE
)
{
return
ERROR_OFFLINE
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_PORT_ACCESS_NOT_ALLOWED
)
{
return
ERROR_PORT_BLOCKED
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_UNKNOWN_PROTOCOL
)
{
return
ERROR_UNKNOWN_PROTOCOL
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_UNKNOWN_HOST
)
{
return
ERROR_UNKNOWN_HOST
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_MALFORMED_URI
)
{
return
ERROR_MALFORMED_URI
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_FILE_NOT_FOUND
)
{
return
ERROR_FILE_NOT_FOUND
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_FILE_ACCESS_DENIED
)
{
return
ERROR_FILE_ACCESS_DENIED
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_UNKNOWN_PROXY_HOST
)
{
return
ERROR_UNKNOWN_PROXY_HOST
;
}
if
(
geckoError
=
=
XPCOMError
.
NS_ERROR_PROXY_CONNECTION_REFUSED
)
{
return
ERROR_PROXY_CONNECTION_REFUSED
;
}
if
(
XPCOMError
.
getErrorModule
(
geckoError
)
=
=
XPCOMError
.
NS_ERROR_MODULE_SECURITY
)
{
if
(
geckoErrorClass
=
=
1
)
{
return
ERROR_SECURITY_SSL
;
}
if
(
geckoErrorClass
=
=
2
)
{
return
ERROR_SECURITY_BAD_CERT
;
}
}
return
ERROR_UNKNOWN
;
}
}
