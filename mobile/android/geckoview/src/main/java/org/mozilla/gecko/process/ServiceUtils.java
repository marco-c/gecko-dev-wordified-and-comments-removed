package
org
.
mozilla
.
gecko
.
process
;
import
org
.
mozilla
.
gecko
.
util
.
ContextUtils
;
import
android
.
content
.
ComponentName
;
import
android
.
content
.
Context
;
import
android
.
content
.
pm
.
PackageManager
;
import
android
.
content
.
pm
.
ServiceInfo
;
import
android
.
support
.
annotation
.
NonNull
;
final
class
ServiceUtils
{
private
static
final
String
DEFAULT_ISOLATED_CONTENT_SERVICE_NAME_SUFFIX
=
"
0
"
;
private
ServiceUtils
(
)
{
}
private
static
StringBuilder
startSvcName
(
NonNull
final
GeckoProcessType
type
)
{
final
StringBuilder
builder
=
new
StringBuilder
(
GeckoChildProcessServices
.
class
.
getName
(
)
)
;
builder
.
append
(
"
"
)
.
append
(
type
)
;
return
builder
;
}
public
static
String
buildSvcName
(
NonNull
final
GeckoProcessType
type
final
String
.
.
.
suffixes
)
{
final
StringBuilder
builder
=
startSvcName
(
type
)
;
for
(
final
String
suffix
:
suffixes
)
{
builder
.
append
(
suffix
)
;
}
return
builder
.
toString
(
)
;
}
public
static
String
buildIsolatedSvcName
(
NonNull
final
GeckoProcessType
type
)
{
if
(
type
=
=
GeckoProcessType
.
CONTENT
)
{
return
buildSvcName
(
type
DEFAULT_ISOLATED_CONTENT_SERVICE_NAME_SUFFIX
)
;
}
return
buildSvcName
(
type
)
;
}
private
static
String
buildSvcNamePrefix
(
NonNull
final
GeckoProcessType
type
)
{
return
startSvcName
(
type
)
.
toString
(
)
;
}
public
static
int
getServiceFlags
(
NonNull
final
Context
context
NonNull
final
GeckoProcessType
type
)
{
final
ComponentName
component
=
new
ComponentName
(
context
buildIsolatedSvcName
(
type
)
)
;
final
PackageManager
pkgMgr
=
context
.
getPackageManager
(
)
;
try
{
final
ServiceInfo
svcInfo
=
pkgMgr
.
getServiceInfo
(
component
0
)
;
return
svcInfo
.
flags
;
}
catch
(
PackageManager
.
NameNotFoundException
e
)
{
throw
new
RuntimeException
(
e
)
;
}
}
private
static
ServiceInfo
[
]
getServiceList
(
NonNull
final
Context
context
)
{
return
ContextUtils
.
getCurrentPackageInfo
(
context
PackageManager
.
GET_SERVICES
)
.
services
;
}
public
static
int
getServiceCount
(
NonNull
final
Context
context
NonNull
final
GeckoProcessType
type
)
{
final
ServiceInfo
[
]
svcList
=
getServiceList
(
context
)
;
final
String
serviceNamePrefix
=
buildSvcNamePrefix
(
type
)
;
int
result
=
0
;
for
(
final
ServiceInfo
svc
:
svcList
)
{
final
String
svcName
=
svc
.
name
;
if
(
svcName
.
startsWith
(
serviceNamePrefix
)
&
&
(
svcName
.
length
(
)
=
=
serviceNamePrefix
.
length
(
)
|
|
Character
.
isDigit
(
svcName
.
codePointAt
(
serviceNamePrefix
.
length
(
)
)
)
)
)
{
+
+
result
;
}
}
if
(
result
<
=
0
)
{
throw
new
RuntimeException
(
"
Could
not
count
"
+
serviceNamePrefix
+
"
services
in
manifest
"
)
;
}
return
result
;
}
}
