package
org
.
mozilla
.
geckoview
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
android
.
support
.
annotation
.
AnyThread
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
v4
.
util
.
ArrayMap
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
util
.
Collections
;
import
java
.
util
.
Map
;
WrapForJNI
AnyThread
public
abstract
class
WebMessage
{
public
final
NonNull
String
uri
;
public
final
NonNull
Map
<
String
String
>
headers
;
protected
WebMessage
(
final
NonNull
Builder
builder
)
{
uri
=
builder
.
mUri
;
headers
=
Collections
.
unmodifiableMap
(
builder
.
mHeaders
)
;
}
private
String
[
]
getHeaderKeys
(
)
{
String
[
]
keys
=
new
String
[
headers
.
size
(
)
]
;
headers
.
keySet
(
)
.
toArray
(
keys
)
;
return
keys
;
}
private
String
[
]
getHeaderValues
(
)
{
String
[
]
values
=
new
String
[
headers
.
size
(
)
]
;
headers
.
values
(
)
.
toArray
(
values
)
;
return
values
;
}
AnyThread
public
static
abstract
class
Builder
{
String
mUri
;
Map
<
String
String
>
mHeaders
=
new
ArrayMap
<
>
(
)
;
ByteBuffer
mBody
;
Builder
(
final
NonNull
String
uri
)
{
uri
(
uri
)
;
}
public
NonNull
Builder
uri
(
final
NonNull
String
uri
)
{
mUri
=
uri
;
return
this
;
}
public
NonNull
Builder
header
(
final
NonNull
String
key
final
NonNull
String
value
)
{
mHeaders
.
put
(
key
value
)
;
return
this
;
}
public
NonNull
Builder
addHeader
(
final
NonNull
String
key
final
NonNull
String
value
)
{
final
String
existingValue
=
mHeaders
.
get
(
key
)
;
if
(
existingValue
!
=
null
)
{
final
StringBuilder
builder
=
new
StringBuilder
(
existingValue
)
;
builder
.
append
(
"
"
)
;
builder
.
append
(
value
)
;
mHeaders
.
put
(
key
builder
.
toString
(
)
)
;
}
else
{
mHeaders
.
put
(
key
value
)
;
}
return
this
;
}
}
}
