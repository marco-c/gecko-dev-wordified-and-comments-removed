package
org
.
mozilla
.
gecko
.
util
;
import
android
.
content
.
ContentUris
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Build
;
import
android
.
os
.
Environment
;
import
android
.
provider
.
DocumentsContract
;
import
android
.
provider
.
MediaStore
;
import
androidx
.
annotation
.
Nullable
;
import
android
.
text
.
TextUtils
;
import
java
.
io
.
File
;
public
class
ContentUriUtils
{
public
static
Nullable
String
getOriginalFilePathFromUri
(
final
Context
context
final
Uri
uri
)
{
if
(
Build
.
VERSION
.
SDK_INT
>
=
19
&
&
DocumentsContract
.
isDocumentUri
(
context
uri
)
)
{
if
(
isExternalStorageDocument
(
uri
)
)
{
final
String
docId
=
DocumentsContract
.
getDocumentId
(
uri
)
;
final
String
[
]
split
=
docId
.
split
(
"
:
"
)
;
final
String
type
=
split
[
0
]
;
final
String
docPath
=
split
[
1
]
;
final
String
rootPath
;
if
(
"
primary
"
.
equalsIgnoreCase
(
type
)
)
{
rootPath
=
Environment
.
getExternalStorageDirectory
(
)
.
getAbsolutePath
(
)
;
}
else
{
rootPath
=
FileUtils
.
getExternalStoragePath
(
context
type
)
;
}
return
!
TextUtils
.
isEmpty
(
rootPath
)
?
rootPath
+
"
/
"
+
docPath
:
null
;
}
else
if
(
isDownloadsDocument
(
uri
)
)
{
final
String
id
=
DocumentsContract
.
getDocumentId
(
uri
)
;
if
(
!
TextUtils
.
isEmpty
(
id
)
)
{
if
(
id
.
startsWith
(
"
raw
:
"
)
)
{
return
id
.
replaceFirst
(
"
raw
:
"
"
"
)
;
}
try
{
final
Uri
contentUri
=
ContentUris
.
withAppendedId
(
Uri
.
parse
(
"
content
:
/
/
downloads
/
public_downloads
"
)
Long
.
valueOf
(
id
)
)
;
return
getDataColumn
(
context
contentUri
null
null
)
;
}
catch
(
final
NumberFormatException
e
)
{
return
null
;
}
}
}
else
if
(
isMediaDocument
(
uri
)
)
{
final
String
docId
=
DocumentsContract
.
getDocumentId
(
uri
)
;
final
String
[
]
split
=
docId
.
split
(
"
:
"
)
;
final
String
type
=
split
[
0
]
;
Uri
contentUri
=
null
;
if
(
"
image
"
.
equals
(
type
)
)
{
contentUri
=
MediaStore
.
Images
.
Media
.
EXTERNAL_CONTENT_URI
;
}
else
if
(
"
video
"
.
equals
(
type
)
)
{
contentUri
=
MediaStore
.
Video
.
Media
.
EXTERNAL_CONTENT_URI
;
}
else
if
(
"
audio
"
.
equals
(
type
)
)
{
contentUri
=
MediaStore
.
Audio
.
Media
.
EXTERNAL_CONTENT_URI
;
}
final
String
selection
=
"
_id
=
?
"
;
final
String
[
]
selectionArgs
=
new
String
[
]
{
split
[
1
]
}
;
return
getDataColumn
(
context
contentUri
selection
selectionArgs
)
;
}
}
else
if
(
"
content
"
.
equalsIgnoreCase
(
uri
.
getScheme
(
)
)
)
{
if
(
isGooglePhotosUri
(
uri
)
)
return
uri
.
getLastPathSegment
(
)
;
return
getDataColumn
(
context
uri
null
null
)
;
}
else
if
(
"
file
"
.
equalsIgnoreCase
(
uri
.
getScheme
(
)
)
)
{
return
uri
.
getPath
(
)
;
}
return
null
;
}
public
static
Nullable
String
getTempFilePathFromContentUri
(
final
Context
context
final
Uri
contentUri
)
{
final
String
fileName
=
FileUtils
.
getFileNameFromContentUri
(
context
contentUri
)
;
final
File
folder
=
new
File
(
context
.
getCacheDir
(
)
FileUtils
.
CONTENT_TEMP_DIRECTORY
)
;
boolean
success
=
true
;
if
(
!
folder
.
exists
(
)
)
{
success
=
folder
.
mkdirs
(
)
;
}
if
(
!
TextUtils
.
isEmpty
(
fileName
)
&
&
success
)
{
final
File
copyFile
=
new
File
(
folder
.
getPath
(
)
fileName
)
;
FileUtils
.
copy
(
context
contentUri
copyFile
)
;
return
copyFile
.
getAbsolutePath
(
)
;
}
return
null
;
}
private
static
String
getDataColumn
(
final
Context
context
final
Uri
uri
final
String
selection
final
String
[
]
selectionArgs
)
{
final
String
column
=
"
_data
"
;
final
String
[
]
projection
=
{
column
}
;
try
(
final
Cursor
cursor
=
context
.
getContentResolver
(
)
.
query
(
uri
projection
selection
selectionArgs
null
)
)
{
if
(
cursor
!
=
null
&
&
cursor
.
moveToFirst
(
)
)
{
final
int
column_index
=
cursor
.
getColumnIndex
(
column
)
;
return
column_index
>
=
0
?
cursor
.
getString
(
column_index
)
:
null
;
}
}
return
null
;
}
public
static
boolean
isExternalStorageDocument
(
final
Uri
uri
)
{
return
"
com
.
android
.
externalstorage
.
documents
"
.
equals
(
uri
.
getAuthority
(
)
)
;
}
public
static
boolean
isDownloadsDocument
(
final
Uri
uri
)
{
return
"
com
.
android
.
providers
.
downloads
.
documents
"
.
equals
(
uri
.
getAuthority
(
)
)
;
}
public
static
boolean
isMediaDocument
(
final
Uri
uri
)
{
return
"
com
.
android
.
providers
.
media
.
documents
"
.
equals
(
uri
.
getAuthority
(
)
)
;
}
public
static
boolean
isGooglePhotosUri
(
final
Uri
uri
)
{
return
"
com
.
google
.
android
.
apps
.
photos
.
content
"
.
equals
(
uri
.
getAuthority
(
)
)
;
}
}
