package
org
.
mozilla
.
geckoview
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
ParcelFormatException
;
import
android
.
os
.
Parcelable
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
UiThread
;
import
androidx
.
core
.
os
.
ParcelCompat
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Objects
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
public
class
WebNotification
implements
Parcelable
{
public
final
Nullable
String
title
;
public
final
NonNull
String
tag
;
private
final
Nullable
String
mCookie
;
public
final
Nullable
String
text
;
public
final
Nullable
String
imageUrl
;
public
final
Nullable
String
textDirection
;
public
final
Nullable
String
lang
;
public
final
boolean
requireInteraction
;
public
final
Nullable
String
source
;
public
final
boolean
silent
;
public
final
boolean
privateBrowsing
;
public
final
NonNull
int
[
]
vibrate
;
public
final
NonNull
WebNotificationAction
[
]
actions
;
WrapForJNI
WebNotification
(
Nullable
final
String
title
NonNull
final
String
tag
Nullable
final
String
cookie
Nullable
final
String
text
Nullable
final
String
imageUrl
Nullable
final
String
textDirection
Nullable
final
String
lang
final
boolean
requireInteraction
NonNull
final
String
source
final
boolean
silent
final
boolean
privateBrowsing
NonNull
final
int
[
]
vibrate
NonNull
final
Object
[
]
actions
)
{
this
.
tag
=
tag
;
this
.
mCookie
=
cookie
;
this
.
title
=
title
;
this
.
text
=
text
;
this
.
imageUrl
=
imageUrl
;
this
.
textDirection
=
textDirection
;
this
.
lang
=
lang
;
this
.
requireInteraction
=
requireInteraction
;
this
.
source
=
source
.
isEmpty
(
)
?
null
:
source
;
this
.
silent
=
silent
;
this
.
vibrate
=
vibrate
;
this
.
privateBrowsing
=
privateBrowsing
;
this
.
actions
=
Arrays
.
copyOf
(
actions
actions
.
length
WebNotificationAction
[
]
.
class
)
;
}
UiThread
public
void
click
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
GeckoAppShell
.
onNotificationClick
(
tag
null
)
;
}
UiThread
public
void
click
(
final
NonNull
String
action
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
GeckoAppShell
.
onNotificationClick
(
tag
action
)
;
}
UiThread
public
void
dismiss
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
GeckoAppShell
.
onNotificationClose
(
tag
)
;
}
private
static
final
int
VERSION
=
2
;
private
static
final
int
IMAGE_URL_LENGTH_MAX
=
150
;
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
final
Parcel
dest
final
int
flags
)
{
dest
.
writeInt
(
VERSION
)
;
dest
.
writeString
(
title
)
;
dest
.
writeString
(
tag
)
;
dest
.
writeString
(
mCookie
)
;
dest
.
writeString
(
text
)
;
if
(
imageUrl
!
=
null
&
&
imageUrl
.
length
(
)
<
IMAGE_URL_LENGTH_MAX
)
{
dest
.
writeString
(
imageUrl
)
;
}
else
{
dest
.
writeString
(
"
"
)
;
}
dest
.
writeString
(
textDirection
)
;
dest
.
writeString
(
lang
)
;
dest
.
writeInt
(
requireInteraction
?
1
:
0
)
;
dest
.
writeString
(
source
)
;
dest
.
writeInt
(
silent
?
1
:
0
)
;
dest
.
writeInt
(
privateBrowsing
?
1
:
0
)
;
dest
.
writeIntArray
(
vibrate
)
;
dest
.
writeParcelableArray
(
actions
0
)
;
}
private
WebNotification
(
final
Parcel
in
)
{
final
int
version
=
in
.
readInt
(
)
;
if
(
version
!
=
1
&
&
version
!
=
2
)
{
throw
new
ParcelFormatException
(
"
Mismatched
version
:
"
+
version
+
"
expected
:
"
+
VERSION
)
;
}
title
=
in
.
readString
(
)
;
tag
=
Objects
.
requireNonNull
(
in
.
readString
(
)
)
;
mCookie
=
in
.
readString
(
)
;
text
=
in
.
readString
(
)
;
imageUrl
=
in
.
readString
(
)
;
textDirection
=
in
.
readString
(
)
;
lang
=
in
.
readString
(
)
;
requireInteraction
=
in
.
readInt
(
)
=
=
1
;
source
=
in
.
readString
(
)
;
silent
=
in
.
readInt
(
)
=
=
1
;
privateBrowsing
=
in
.
readInt
(
)
=
=
1
;
vibrate
=
Objects
.
requireNonNull
(
in
.
createIntArray
(
)
)
;
if
(
version
=
=
1
)
{
actions
=
new
WebNotificationAction
[
0
]
;
return
;
}
final
Parcelable
[
]
actionParcels
=
Objects
.
requireNonNull
(
ParcelCompat
.
readParcelableArrayTyped
(
in
WebNotificationAction
.
class
.
getClassLoader
(
)
WebNotificationAction
.
class
)
)
;
actions
=
Arrays
.
copyOf
(
actionParcels
actionParcels
.
length
WebNotificationAction
[
]
.
class
)
;
}
public
static
final
Creator
<
WebNotification
>
CREATOR
=
new
Creator
<
>
(
)
{
Override
public
WebNotification
createFromParcel
(
final
Parcel
in
)
{
return
new
WebNotification
(
in
)
;
}
Override
public
WebNotification
[
]
newArray
(
final
int
size
)
{
return
new
WebNotification
[
size
]
;
}
}
;
}
