package
org
.
mozilla
.
gecko
.
gfx
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
nio
.
IntBuffer
;
import
org
.
mozilla
.
gecko
.
AndroidGamepadManager
;
import
org
.
mozilla
.
gecko
.
annotation
.
RobocopTarget
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
GeckoThread
;
import
org
.
mozilla
.
gecko
.
mozglue
.
JNIObject
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
Canvas
;
import
android
.
graphics
.
Color
;
import
android
.
graphics
.
Matrix
;
import
android
.
graphics
.
Point
;
import
android
.
graphics
.
PointF
;
import
android
.
graphics
.
Rect
;
import
android
.
graphics
.
SurfaceTexture
;
import
android
.
support
.
v4
.
util
.
SimpleArrayMap
;
import
android
.
util
.
AttributeSet
;
import
android
.
util
.
Log
;
import
android
.
view
.
KeyEvent
;
import
android
.
view
.
MotionEvent
;
import
android
.
view
.
SurfaceHolder
;
import
android
.
view
.
SurfaceView
;
import
android
.
view
.
TextureView
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewGroup
;
import
android
.
view
.
InputDevice
;
import
android
.
view
.
accessibility
.
AccessibilityManager
;
import
android
.
widget
.
FrameLayout
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
LayerView
extends
FrameLayout
{
private
static
final
String
LOGTAG
=
"
GeckoLayerView
"
;
private
static
AccessibilityManager
sAccessibilityManager
;
private
GeckoLayerClient
mLayerClient
;
private
PanZoomController
mPanZoomController
;
private
DynamicToolbarAnimator
mToolbarAnimator
;
private
FullScreenState
mFullScreenState
;
private
Listener
mListener
;
private
final
Overscroll
mOverscroll
;
private
int
mDefaultClearColor
=
Color
.
WHITE
;
GetPixelsResult
mGetPixelsResult
;
private
final
List
<
DrawListener
>
mDrawListeners
;
final
static
int
STATIC_TOOLBAR_NEEDS_UPDATE
=
0
;
final
static
int
STATIC_TOOLBAR_READY
=
1
;
final
static
int
TOOLBAR_HIDDEN
=
2
;
final
static
int
TOOLBAR_VISIBLE
=
3
;
final
static
int
TOOLBAR_SHOW
=
4
;
final
static
int
FIRST_PAINT
=
5
;
final
static
int
REQUEST_SHOW_TOOLBAR_IMMEDIATELY
=
6
;
final
static
int
REQUEST_SHOW_TOOLBAR_ANIMATED
=
7
;
final
static
int
REQUEST_HIDE_TOOLBAR_IMMEDIATELY
=
8
;
final
static
int
REQUEST_HIDE_TOOLBAR_ANIMATED
=
9
;
final
static
int
LAYERS_UPDATED
=
10
;
final
static
int
TOOLBAR_SNAPSHOT_FAILED
=
11
;
final
static
int
COMPOSITOR_CONTROLLER_OPEN
=
20
;
private
void
postCompositorMessage
(
final
int
message
)
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
mCompositor
.
sendToolbarAnimatorMessage
(
message
)
;
}
}
)
;
}
boolean
isCompositorReady
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
return
mCompositor
!
=
null
&
&
mCompositor
.
isReady
(
)
;
}
void
handleToolbarAnimatorMessage
(
int
message
)
{
switch
(
message
)
{
case
STATIC_TOOLBAR_NEEDS_UPDATE
:
Bitmap
bm
=
mToolbarAnimator
.
getBitmapOfToolbarChrome
(
)
;
if
(
bm
=
=
null
)
{
postCompositorMessage
(
TOOLBAR_SNAPSHOT_FAILED
)
;
break
;
}
final
int
width
=
bm
.
getWidth
(
)
;
final
int
height
=
bm
.
getHeight
(
)
;
int
[
]
pixels
=
new
int
[
bm
.
getByteCount
(
)
/
4
]
;
try
{
bm
.
getPixels
(
pixels
0
width
0
0
width
height
)
;
mCompositor
.
sendToolbarPixelsToCompositor
(
width
height
pixels
)
;
}
catch
(
Exception
e
)
{
Log
.
e
(
LOGTAG
"
Caught
exception
while
getting
toolbar
pixels
from
Bitmap
:
"
+
e
.
toString
(
)
)
;
}
break
;
case
STATIC_TOOLBAR_READY
:
mToolbarAnimator
.
onToggleChrome
(
false
)
;
mListener
.
surfaceChanged
(
)
;
postCompositorMessage
(
TOOLBAR_HIDDEN
)
;
break
;
case
TOOLBAR_SHOW
:
mToolbarAnimator
.
onToggleChrome
(
true
)
;
mListener
.
surfaceChanged
(
)
;
postCompositorMessage
(
TOOLBAR_VISIBLE
)
;
break
;
case
FIRST_PAINT
:
setSurfaceBackgroundColor
(
Color
.
TRANSPARENT
)
;
break
;
case
LAYERS_UPDATED
:
for
(
DrawListener
listener
:
mDrawListeners
)
{
listener
.
drawFinished
(
)
;
}
break
;
case
COMPOSITOR_CONTROLLER_OPEN
:
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
mCompositor
.
setDefaultClearColor
(
mDefaultClearColor
)
;
mCompositor
.
enableLayerUpdateNotifications
(
!
mDrawListeners
.
isEmpty
(
)
)
;
mToolbarAnimator
.
updateCompositor
(
)
;
}
}
)
;
break
;
default
:
Log
.
e
(
LOGTAG
"
Unhandled
Toolbar
Animator
Message
:
"
+
message
)
;
break
;
}
}
private
LayerSession
.
Compositor
mCompositor
;
public
LayerView
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
mFullScreenState
=
FullScreenState
.
NONE
;
mOverscroll
=
new
OverscrollEdgeEffect
(
this
)
;
mDrawListeners
=
new
ArrayList
<
DrawListener
>
(
)
;
}
public
LayerView
(
Context
context
)
{
this
(
context
null
)
;
}
public
void
initializeView
(
)
{
mLayerClient
=
new
GeckoLayerClient
(
this
)
;
if
(
mOverscroll
!
=
null
)
{
mLayerClient
.
setOverscrollHandler
(
mOverscroll
)
;
}
mPanZoomController
=
mLayerClient
.
getPanZoomController
(
)
;
mToolbarAnimator
=
mLayerClient
.
getDynamicToolbarAnimator
(
)
;
}
public
void
setIsLongpressEnabled
(
final
boolean
isLongpressEnabled
)
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
mPanZoomController
.
setIsLongpressEnabled
(
isLongpressEnabled
)
;
}
}
)
;
}
private
static
Point
getEventRadius
(
MotionEvent
event
)
{
return
new
Point
(
(
int
)
event
.
getToolMajor
(
)
/
2
(
int
)
event
.
getToolMinor
(
)
/
2
)
;
}
public
void
destroy
(
)
{
if
(
mLayerClient
!
=
null
)
{
mLayerClient
.
destroy
(
)
;
}
}
Override
public
void
dispatchDraw
(
final
Canvas
canvas
)
{
super
.
dispatchDraw
(
canvas
)
;
if
(
mLayerClient
!
=
null
&
&
mOverscroll
!
=
null
)
{
mOverscroll
.
draw
(
canvas
getViewportMetrics
(
)
)
;
}
}
Override
public
boolean
onTouchEvent
(
MotionEvent
event
)
{
if
(
event
.
getActionMasked
(
)
=
=
MotionEvent
.
ACTION_DOWN
)
{
requestFocus
(
)
;
}
if
(
!
isCompositorReady
(
)
)
{
return
true
;
}
if
(
mPanZoomController
!
=
null
&
&
mPanZoomController
.
onTouchEvent
(
event
)
)
{
return
true
;
}
return
false
;
}
private
boolean
isAccessibilityEnabled
(
)
{
if
(
sAccessibilityManager
=
=
null
)
{
sAccessibilityManager
=
(
AccessibilityManager
)
getContext
(
)
.
getSystemService
(
Context
.
ACCESSIBILITY_SERVICE
)
;
}
return
sAccessibilityManager
.
isEnabled
(
)
&
&
sAccessibilityManager
.
isTouchExplorationEnabled
(
)
;
}
Override
public
boolean
onHoverEvent
(
MotionEvent
event
)
{
if
(
event
.
getSource
(
)
=
=
InputDevice
.
SOURCE_TOUCHSCREEN
&
&
!
isAccessibilityEnabled
(
)
)
{
return
false
;
}
if
(
!
isCompositorReady
(
)
)
{
return
true
;
}
else
if
(
mPanZoomController
!
=
null
&
&
mPanZoomController
.
onMotionEvent
(
event
)
)
{
return
true
;
}
return
false
;
}
Override
public
boolean
onGenericMotionEvent
(
MotionEvent
event
)
{
if
(
AndroidGamepadManager
.
handleMotionEvent
(
event
)
)
{
return
true
;
}
if
(
!
isCompositorReady
(
)
)
{
return
true
;
}
if
(
mPanZoomController
!
=
null
&
&
mPanZoomController
.
onMotionEvent
(
event
)
)
{
return
true
;
}
return
false
;
}
GeckoLayerClient
getLayerClient
(
)
{
return
mLayerClient
;
}
public
PanZoomController
getPanZoomController
(
)
{
return
mPanZoomController
;
}
public
DynamicToolbarAnimator
getDynamicToolbarAnimator
(
)
{
return
mToolbarAnimator
;
}
public
ImmutableViewportMetrics
getViewportMetrics
(
)
{
return
mLayerClient
.
getViewportMetrics
(
)
;
}
public
void
setSurfaceBackgroundColor
(
int
newColor
)
{
}
public
interface
GetPixelsResult
{
public
void
onPixelsResult
(
int
width
int
height
IntBuffer
pixels
)
;
}
RobocopTarget
public
void
getPixels
(
final
GetPixelsResult
getPixelsResult
)
{
if
(
!
ThreadUtils
.
isOnUiThread
(
)
)
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
getPixels
(
getPixelsResult
)
;
}
}
)
;
return
;
}
if
(
isCompositorReady
(
)
)
{
mGetPixelsResult
=
getPixelsResult
;
mCompositor
.
requestScreenPixels
(
)
;
}
else
{
getPixelsResult
.
onPixelsResult
(
0
0
null
)
;
}
}
void
recvScreenPixels
(
int
width
int
height
int
[
]
pixels
)
{
if
(
mGetPixelsResult
!
=
null
)
{
mGetPixelsResult
.
onPixelsResult
(
width
height
IntBuffer
.
wrap
(
pixels
)
)
;
mGetPixelsResult
=
null
;
}
}
public
void
setListener
(
Listener
listener
)
{
mListener
=
listener
;
}
Listener
getListener
(
)
{
return
mListener
;
}
protected
void
attachCompositor
(
final
LayerSession
session
)
{
mCompositor
=
session
.
mCompositor
;
mCompositor
.
layerView
=
this
;
mToolbarAnimator
.
notifyCompositorCreated
(
mCompositor
)
;
final
NativePanZoomController
npzc
=
(
NativePanZoomController
)
mPanZoomController
;
if
(
GeckoThread
.
isStateAtLeast
(
GeckoThread
.
State
.
PROFILE_READY
)
)
{
mCompositor
.
attachToJava
(
mLayerClient
npzc
)
;
}
else
{
GeckoThread
.
queueNativeCallUntil
(
GeckoThread
.
State
.
PROFILE_READY
mCompositor
"
attachToJava
"
GeckoLayerClient
.
class
mLayerClient
NativePanZoomController
.
class
npzc
)
;
}
}
WrapForJNI
(
calledFrom
=
"
ui
"
)
private
Object
getCompositor
(
)
{
return
isCompositorReady
(
)
?
mCompositor
:
null
;
}
void
onSizeChanged
(
int
width
int
height
)
{
if
(
mListener
!
=
null
)
{
mListener
.
surfaceChanged
(
)
;
}
if
(
mOverscroll
!
=
null
)
{
mOverscroll
.
setSize
(
width
height
)
;
}
}
public
interface
Listener
{
void
surfaceChanged
(
)
;
}
RobocopTarget
public
void
addDrawListener
(
final
DrawListener
listener
)
{
if
(
!
ThreadUtils
.
isOnUiThread
(
)
)
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
addDrawListener
(
listener
)
;
}
}
)
;
return
;
}
boolean
wasEmpty
=
mDrawListeners
.
isEmpty
(
)
;
mDrawListeners
.
add
(
listener
)
;
if
(
isCompositorReady
(
)
&
&
wasEmpty
)
{
mCompositor
.
enableLayerUpdateNotifications
(
true
)
;
}
}
RobocopTarget
public
void
removeDrawListener
(
final
DrawListener
listener
)
{
if
(
!
ThreadUtils
.
isOnUiThread
(
)
)
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
removeDrawListener
(
listener
)
;
}
}
)
;
return
;
}
boolean
notEmpty
=
mDrawListeners
.
isEmpty
(
)
;
mDrawListeners
.
remove
(
listener
)
;
if
(
isCompositorReady
(
)
&
&
notEmpty
&
&
mDrawListeners
.
isEmpty
(
)
)
{
mCompositor
.
enableLayerUpdateNotifications
(
false
)
;
}
}
void
clearDrawListeners
(
)
{
mDrawListeners
.
clear
(
)
;
}
RobocopTarget
public
static
interface
DrawListener
{
public
void
drawFinished
(
)
;
}
public
float
getZoomFactor
(
)
{
return
getLayerClient
(
)
.
getViewportMetrics
(
)
.
zoomFactor
;
}
public
void
setFullScreenState
(
FullScreenState
state
)
{
mFullScreenState
=
state
;
}
public
boolean
isFullScreen
(
)
{
return
mFullScreenState
!
=
FullScreenState
.
NONE
;
}
public
void
setMaxToolbarHeight
(
int
maxHeight
)
{
mToolbarAnimator
.
setMaxToolbarHeight
(
maxHeight
)
;
}
public
int
getCurrentToolbarHeight
(
)
{
return
mToolbarAnimator
.
getCurrentToolbarHeight
(
)
;
}
public
void
setClearColor
(
final
int
color
)
{
if
(
!
ThreadUtils
.
isOnUiThread
(
)
)
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
setClearColor
(
color
)
;
}
}
)
;
return
;
}
mDefaultClearColor
=
color
;
if
(
isCompositorReady
(
)
)
{
mCompositor
.
setDefaultClearColor
(
mDefaultClearColor
)
;
}
}
public
boolean
isIMEEnabled
(
)
{
return
false
;
}
}
