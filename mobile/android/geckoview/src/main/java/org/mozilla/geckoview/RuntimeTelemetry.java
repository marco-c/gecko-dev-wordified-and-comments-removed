package
org
.
mozilla
.
geckoview
;
import
android
.
support
.
annotation
.
AnyThread
;
import
android
.
support
.
annotation
.
NonNull
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
mozglue
.
JNIObject
;
import
org
.
mozilla
.
gecko
.
GeckoThread
;
public
final
class
RuntimeTelemetry
{
private
final
EventDispatcher
mEventDispatcher
;
RuntimeTelemetry
(
final
NonNull
GeckoRuntime
runtime
)
{
mEventDispatcher
=
EventDispatcher
.
getInstance
(
)
;
}
AnyThread
public
NonNull
GeckoResult
<
JSONObject
>
getSnapshots
(
final
boolean
clear
)
{
final
GeckoBundle
msg
=
new
GeckoBundle
(
1
)
;
msg
.
putBoolean
(
"
clear
"
clear
)
;
final
CallbackResult
<
JSONObject
>
result
=
new
CallbackResult
<
JSONObject
>
(
)
{
Override
public
void
sendSuccess
(
final
Object
value
)
{
try
{
complete
(
(
(
GeckoBundle
)
value
)
.
toJSONObject
(
)
)
;
}
catch
(
JSONException
ex
)
{
completeExceptionally
(
ex
)
;
}
}
}
;
mEventDispatcher
.
dispatch
(
"
GeckoView
:
TelemetrySnapshots
"
msg
result
)
;
return
result
;
}
public
static
class
Metric
<
T
>
{
public
final
NonNull
String
name
;
public
final
NonNull
T
value
;
Metric
(
final
String
name
final
T
value
)
{
this
.
name
=
name
;
this
.
value
=
value
;
}
Override
public
String
toString
(
)
{
return
"
name
:
"
+
name
+
"
value
:
"
+
value
;
}
protected
Metric
(
)
{
name
=
null
;
value
=
null
;
}
}
public
static
class
Histogram
extends
Metric
<
long
[
]
>
{
public
final
boolean
isCategorical
;
Histogram
(
final
boolean
isCategorical
final
String
name
final
long
[
]
value
)
{
super
(
name
value
)
;
this
.
isCategorical
=
isCategorical
;
}
protected
Histogram
(
)
{
super
(
null
null
)
;
isCategorical
=
false
;
}
}
public
interface
Delegate
{
AnyThread
default
void
onHistogram
(
final
NonNull
Histogram
metric
)
{
}
AnyThread
default
void
onBooleanScalar
(
final
NonNull
Metric
<
Boolean
>
metric
)
{
}
AnyThread
default
void
onLongScalar
(
final
NonNull
Metric
<
Long
>
metric
)
{
}
AnyThread
default
void
onStringScalar
(
final
NonNull
Metric
<
String
>
metric
)
{
}
}
final
static
class
Proxy
extends
JNIObject
{
private
final
Delegate
mDelegate
;
public
Proxy
(
final
NonNull
Delegate
delegate
)
{
mDelegate
=
delegate
;
attach
(
)
;
}
public
void
attach
(
)
{
if
(
GeckoThread
.
isRunning
(
)
)
{
registerDelegateProxy
(
this
)
;
}
else
{
GeckoThread
.
queueNativeCall
(
Proxy
.
class
"
registerDelegateProxy
"
Proxy
.
class
this
)
;
}
}
public
NonNull
Delegate
getDelegate
(
)
{
return
mDelegate
;
}
WrapForJNI
(
dispatchTo
=
"
gecko
"
)
private
static
native
void
registerDelegateProxy
(
Proxy
proxy
)
;
WrapForJNI
(
calledFrom
=
"
gecko
"
)
void
dispatchHistogram
(
final
boolean
isCategorical
final
String
name
final
long
[
]
values
)
{
if
(
mDelegate
=
=
null
)
{
return
;
}
mDelegate
.
onHistogram
(
new
Histogram
(
isCategorical
name
values
)
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
void
dispatchStringScalar
(
final
String
name
final
String
value
)
{
if
(
mDelegate
=
=
null
)
{
return
;
}
mDelegate
.
onStringScalar
(
new
Metric
<
>
(
name
value
)
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
void
dispatchBooleanScalar
(
final
String
name
final
boolean
value
)
{
if
(
mDelegate
=
=
null
)
{
return
;
}
mDelegate
.
onBooleanScalar
(
new
Metric
<
>
(
name
value
)
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
void
dispatchLongScalar
(
final
String
name
final
long
value
)
{
if
(
mDelegate
=
=
null
)
{
return
;
}
mDelegate
.
onLongScalar
(
new
Metric
<
>
(
name
value
)
)
;
}
Override
protected
void
disposeNative
(
)
{
throw
new
UnsupportedOperationException
(
)
;
}
}
}
