package
org
.
mozilla
.
geckoview
;
import
android
.
util
.
Log
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
Objects
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
public
class
GeckoPreferenceController
{
private
static
final
String
LOGTAG
=
"
GeckoPreference
"
;
private
static
final
boolean
DEBUG
=
false
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
PREF_TYPE_INVALID
PREF_TYPE_STRING
PREF_TYPE_INT
PREF_TYPE_BOOL
}
)
public
interface
PrefType
{
}
public
static
final
int
PREF_TYPE_INVALID
=
0
;
public
static
final
int
PREF_TYPE_STRING
=
32
;
public
static
final
int
PREF_TYPE_INT
=
64
;
public
static
final
int
PREF_TYPE_BOOL
=
128
;
AnyThread
static
NonNull
String
toTypeString
(
PrefType
final
int
prefType
)
{
switch
(
prefType
)
{
case
PREF_TYPE_INVALID
:
return
"
PREF_INVALID
"
;
case
PREF_TYPE_STRING
:
return
"
PREF_STRING
"
;
case
PREF_TYPE_INT
:
return
"
PREF_INT
"
;
case
PREF_TYPE_BOOL
:
return
"
PREF_BOOL
"
;
default
:
return
"
UNKNOWN
"
;
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
PREF_BRANCH_USER
PREF_BRANCH_DEFAULT
}
)
public
interface
PrefBranch
{
}
public
static
final
int
PREF_BRANCH_USER
=
0
;
public
static
final
int
PREF_BRANCH_DEFAULT
=
1
;
AnyThread
static
NonNull
String
toBranchString
(
PrefBranch
final
int
prefBranch
)
{
switch
(
prefBranch
)
{
case
PREF_BRANCH_USER
:
return
"
user
"
;
case
PREF_BRANCH_DEFAULT
:
return
"
default
"
;
default
:
Log
.
w
(
LOGTAG
"
Tried
to
convert
an
unknown
pref
branch
of
"
+
prefBranch
+
"
!
"
)
;
return
"
default
"
;
}
}
public
static
class
GeckoPreference
<
T
>
{
public
final
NonNull
String
pref
;
public
final
PrefType
int
type
;
public
final
Nullable
T
defaultValue
;
public
final
Nullable
T
userValue
;
AnyThread
public
Nullable
T
getValue
(
)
{
if
(
userValue
!
=
null
)
{
return
userValue
;
}
return
defaultValue
;
}
AnyThread
public
boolean
getHasUserChangedValue
(
)
{
return
userValue
!
=
null
;
}
GeckoPreference
(
NonNull
final
String
pref
PrefType
final
int
type
Nullable
final
T
defaultValue
Nullable
final
T
userValue
)
{
this
.
pref
=
pref
;
this
.
type
=
type
;
this
.
defaultValue
=
defaultValue
;
this
.
userValue
=
userValue
;
}
NonNull
Override
public
String
toString
(
)
{
final
StringBuilder
builder
=
new
StringBuilder
(
"
GeckoPreference
{
"
)
;
builder
.
append
(
"
pref
=
"
)
.
append
(
pref
)
.
append
(
"
type
=
"
)
.
append
(
toTypeString
(
type
)
)
.
append
(
"
defaultValue
=
"
)
.
append
(
Objects
.
toString
(
defaultValue
"
null
"
)
)
.
append
(
"
userValue
=
"
)
.
append
(
Objects
.
toString
(
userValue
"
null
"
)
)
.
append
(
"
}
"
)
;
return
builder
.
toString
(
)
;
}
static
Nullable
GeckoPreference
<
?
>
fromBundle
(
Nullable
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
Log
.
w
(
LOGTAG
"
Bundle
is
null
when
attempting
to
deserialize
a
GeckoPreference
.
"
)
;
return
null
;
}
try
{
final
String
pref
=
bundle
.
getString
(
"
pref
"
"
"
)
;
if
(
pref
.
isEmpty
(
)
)
{
Log
.
w
(
LOGTAG
"
Deserialized
an
empty
preference
name
.
"
)
;
return
null
;
}
final
int
type
=
bundle
.
getInt
(
"
type
"
0
)
;
switch
(
type
)
{
case
PREF_TYPE_INVALID
:
{
return
new
GeckoPreference
<
Object
>
(
pref
type
null
null
)
;
}
case
PREF_TYPE_STRING
:
{
final
String
defaultValue
=
bundle
.
getString
(
"
defaultValue
"
)
;
final
String
userValue
=
bundle
.
getString
(
"
userValue
"
)
;
return
new
GeckoPreference
<
String
>
(
pref
type
defaultValue
userValue
)
;
}
case
PREF_TYPE_BOOL
:
{
final
Boolean
defaultValue
=
bundle
.
getBooleanObject
(
"
defaultValue
"
)
;
final
Boolean
userValue
=
bundle
.
getBooleanObject
(
"
userValue
"
)
;
return
new
GeckoPreference
<
Boolean
>
(
pref
type
defaultValue
userValue
)
;
}
case
PREF_TYPE_INT
:
{
final
Integer
defaultValue
=
bundle
.
getInteger
(
"
defaultValue
"
)
;
final
Integer
userValue
=
bundle
.
getInteger
(
"
userValue
"
)
;
return
new
GeckoPreference
<
Integer
>
(
pref
type
defaultValue
userValue
)
;
}
default
:
{
Log
.
w
(
LOGTAG
"
Deserialized
an
unexpected
preference
type
of
"
+
type
+
"
.
"
)
;
return
null
;
}
}
}
catch
(
final
Exception
e
)
{
Log
.
w
(
LOGTAG
"
Could
not
deserialize
GeckoPreference
object
:
"
+
e
)
;
return
null
;
}
}
}
}
