package
org
.
mozilla
.
geckoview
;
import
android
.
graphics
.
Bitmap
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
view
.
Surface
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
public
class
GeckoDisplay
{
private
final
GeckoSession
mSession
;
protected
GeckoDisplay
(
final
GeckoSession
session
)
{
mSession
=
session
;
}
UiThread
public
void
surfaceChanged
(
NonNull
final
Surface
surface
final
int
width
final
int
height
)
{
surfaceChanged
(
surface
0
0
width
height
)
;
}
UiThread
public
void
surfaceChanged
(
NonNull
final
Surface
surface
final
int
left
final
int
top
final
int
width
final
int
height
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
(
left
<
0
)
|
|
(
top
<
0
)
)
{
throw
new
IllegalArgumentException
(
"
Parameters
can
not
be
negative
.
"
)
;
}
if
(
mSession
.
getDisplay
(
)
=
=
this
)
{
mSession
.
onSurfaceChanged
(
surface
left
top
width
height
)
;
}
}
UiThread
public
void
surfaceDestroyed
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
mSession
.
getDisplay
(
)
=
=
this
)
{
mSession
.
onSurfaceDestroyed
(
)
;
}
}
UiThread
public
void
screenOriginChanged
(
final
int
left
final
int
top
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
mSession
.
getDisplay
(
)
=
=
this
)
{
mSession
.
onScreenOriginChanged
(
left
top
)
;
}
}
UiThread
public
boolean
shouldPinOnScreen
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
return
mSession
.
getDisplay
(
)
=
=
this
&
&
mSession
.
shouldPinOnScreen
(
)
;
}
UiThread
public
NonNull
GeckoResult
<
Bitmap
>
capturePixels
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
!
mSession
.
isCompositorReady
(
)
)
{
return
GeckoResult
.
fromException
(
new
IllegalStateException
(
"
Compositor
must
be
ready
before
pixels
can
be
captured
"
)
)
;
}
GeckoResult
<
Bitmap
>
result
=
new
GeckoResult
<
>
(
)
;
mSession
.
mCompositor
.
requestScreenPixels
(
result
)
;
return
result
;
}
}
