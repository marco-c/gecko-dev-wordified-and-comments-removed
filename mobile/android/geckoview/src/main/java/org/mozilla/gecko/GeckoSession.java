package
org
.
mozilla
.
gecko
;
import
java
.
net
.
URLConnection
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
gfx
.
LayerSession
;
import
org
.
mozilla
.
gecko
.
mozglue
.
JNIObject
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
Resources
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Binder
;
import
android
.
os
.
IBinder
;
import
android
.
os
.
IInterface
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
android
.
os
.
SystemClock
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
util
.
AttributeSet
;
import
android
.
util
.
DisplayMetrics
;
import
android
.
util
.
Log
;
public
class
GeckoSession
extends
LayerSession
implements
Parcelable
{
private
static
final
String
LOGTAG
=
"
GeckoSession
"
;
private
static
final
boolean
DEBUG
=
false
;
enum
State
implements
NativeQueue
.
State
{
INITIAL
(
0
)
READY
(
1
)
;
private
final
int
mRank
;
private
State
(
int
rank
)
{
mRank
=
rank
;
}
Override
public
boolean
is
(
final
NativeQueue
.
State
other
)
{
return
this
=
=
other
;
}
Override
public
boolean
isAtLeast
(
final
NativeQueue
.
State
other
)
{
return
(
other
instanceof
State
)
&
&
mRank
>
=
(
(
State
)
other
)
.
mRank
;
}
}
private
final
NativeQueue
mNativeQueue
=
new
NativeQueue
(
State
.
INITIAL
State
.
READY
)
;
private
final
EventDispatcher
mEventDispatcher
=
new
EventDispatcher
(
mNativeQueue
)
;
private
final
TextInputController
mTextInput
=
new
TextInputController
(
this
mNativeQueue
)
;
private
final
GeckoSessionHandler
<
ContentListener
>
mContentHandler
=
new
GeckoSessionHandler
<
ContentListener
>
(
"
GeckoViewContent
"
this
new
String
[
]
{
"
GeckoView
:
ContextMenu
"
"
GeckoView
:
DOMTitleChanged
"
"
GeckoView
:
DOMWindowFocus
"
"
GeckoView
:
FullScreenEnter
"
"
GeckoView
:
FullScreenExit
"
}
)
{
Override
public
void
handleMessage
(
final
ContentListener
listener
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
"
GeckoView
:
ContextMenu
"
.
equals
(
event
)
)
{
listener
.
onContextMenu
(
GeckoSession
.
this
message
.
getInt
(
"
screenX
"
)
message
.
getInt
(
"
screenY
"
)
message
.
getString
(
"
uri
"
)
message
.
getString
(
"
elementSrc
"
)
)
;
}
else
if
(
"
GeckoView
:
DOMTitleChanged
"
.
equals
(
event
)
)
{
listener
.
onTitleChange
(
GeckoSession
.
this
message
.
getString
(
"
title
"
)
)
;
}
else
if
(
"
GeckoView
:
DOMWindowFocus
"
.
equals
(
event
)
)
{
listener
.
onFocusRequest
(
GeckoSession
.
this
)
;
}
else
if
(
"
GeckoView
:
FullScreenEnter
"
.
equals
(
event
)
)
{
listener
.
onFullScreen
(
GeckoSession
.
this
true
)
;
}
else
if
(
"
GeckoView
:
FullScreenExit
"
.
equals
(
event
)
)
{
listener
.
onFullScreen
(
GeckoSession
.
this
false
)
;
}
}
}
;
private
final
GeckoSessionHandler
<
NavigationListener
>
mNavigationHandler
=
new
GeckoSessionHandler
<
NavigationListener
>
(
"
GeckoViewNavigation
"
this
new
String
[
]
{
"
GeckoView
:
LocationChange
"
"
GeckoView
:
OnLoadUri
"
}
)
{
Override
public
void
handleMessage
(
final
NavigationListener
listener
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
"
GeckoView
:
LocationChange
"
.
equals
(
event
)
)
{
listener
.
onLocationChange
(
GeckoSession
.
this
message
.
getString
(
"
uri
"
)
)
;
listener
.
onCanGoBack
(
GeckoSession
.
this
message
.
getBoolean
(
"
canGoBack
"
)
)
;
listener
.
onCanGoForward
(
GeckoSession
.
this
message
.
getBoolean
(
"
canGoForward
"
)
)
;
}
else
if
(
"
GeckoView
:
OnLoadUri
"
.
equals
(
event
)
)
{
final
String
uri
=
message
.
getString
(
"
uri
"
)
;
final
NavigationListener
.
TargetWindow
where
=
NavigationListener
.
TargetWindow
.
forGeckoValue
(
message
.
getInt
(
"
where
"
)
)
;
final
boolean
result
=
listener
.
onLoadUri
(
GeckoSession
.
this
uri
where
)
;
callback
.
sendSuccess
(
result
)
;
}
}
}
;
private
final
GeckoSessionHandler
<
ProgressListener
>
mProgressHandler
=
new
GeckoSessionHandler
<
ProgressListener
>
(
"
GeckoViewProgress
"
this
new
String
[
]
{
"
GeckoView
:
PageStart
"
"
GeckoView
:
PageStop
"
"
GeckoView
:
SecurityChanged
"
}
)
{
Override
public
void
handleMessage
(
final
ProgressListener
listener
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
"
GeckoView
:
PageStart
"
.
equals
(
event
)
)
{
listener
.
onPageStart
(
GeckoSession
.
this
message
.
getString
(
"
uri
"
)
)
;
}
else
if
(
"
GeckoView
:
PageStop
"
.
equals
(
event
)
)
{
listener
.
onPageStop
(
GeckoSession
.
this
message
.
getBoolean
(
"
success
"
)
)
;
}
else
if
(
"
GeckoView
:
SecurityChanged
"
.
equals
(
event
)
)
{
final
GeckoBundle
identity
=
message
.
getBundle
(
"
identity
"
)
;
listener
.
onSecurityChange
(
GeckoSession
.
this
new
ProgressListener
.
SecurityInformation
(
identity
)
)
;
}
}
}
;
private
final
GeckoSessionHandler
<
ScrollListener
>
mScrollHandler
=
new
GeckoSessionHandler
<
ScrollListener
>
(
"
GeckoViewScroll
"
this
new
String
[
]
{
"
GeckoView
:
ScrollChanged
"
}
)
{
Override
public
void
handleMessage
(
final
ScrollListener
listener
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
"
GeckoView
:
ScrollChanged
"
.
equals
(
event
)
)
{
listener
.
onScrollChanged
(
GeckoSession
.
this
message
.
getInt
(
"
scrollX
"
)
message
.
getInt
(
"
scrollY
"
)
)
;
}
}
}
;
private
final
GeckoSessionHandler
<
TrackingProtectionDelegate
>
mTrackingProtectionHandler
=
new
GeckoSessionHandler
<
TrackingProtectionDelegate
>
(
"
GeckoViewTrackingProtection
"
this
new
String
[
]
{
"
GeckoView
:
TrackingProtectionBlocked
"
}
)
{
Override
public
void
handleMessage
(
final
TrackingProtectionDelegate
delegate
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
"
GeckoView
:
TrackingProtectionBlocked
"
.
equals
(
event
)
)
{
final
String
uri
=
message
.
getString
(
"
src
"
)
;
final
String
matchedList
=
message
.
getString
(
"
matchedList
"
)
;
delegate
.
onTrackerBlocked
(
GeckoSession
.
this
uri
TrackingProtection
.
listToCategory
(
matchedList
)
)
;
}
}
}
;
private
final
GeckoSessionHandler
<
PermissionDelegate
>
mPermissionHandler
=
new
GeckoSessionHandler
<
PermissionDelegate
>
(
"
GeckoViewPermission
"
this
new
String
[
]
{
"
GeckoView
:
AndroidPermission
"
"
GeckoView
:
ContentPermission
"
"
GeckoView
:
MediaPermission
"
}
true
)
{
Override
public
void
handleMessage
(
final
PermissionDelegate
listener
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
listener
=
=
null
)
{
callback
.
sendSuccess
(
false
)
;
return
;
}
if
(
"
GeckoView
:
AndroidPermission
"
.
equals
(
event
)
)
{
listener
.
requestAndroidPermissions
(
GeckoSession
.
this
message
.
getStringArray
(
"
perms
"
)
new
PermissionCallback
(
"
android
"
callback
)
)
;
}
else
if
(
"
GeckoView
:
ContentPermission
"
.
equals
(
event
)
)
{
final
String
type
=
message
.
getString
(
"
perm
"
)
;
listener
.
requestContentPermission
(
GeckoSession
.
this
message
.
getString
(
"
uri
"
)
type
message
.
getString
(
"
access
"
)
new
PermissionCallback
(
type
callback
)
)
;
}
else
if
(
"
GeckoView
:
MediaPermission
"
.
equals
(
event
)
)
{
listener
.
requestMediaPermission
(
GeckoSession
.
this
message
.
getString
(
"
uri
"
)
message
.
getBundleArray
(
"
video
"
)
message
.
getBundleArray
(
"
audio
"
)
new
PermissionCallback
(
"
media
"
callback
)
)
;
}
}
}
;
private
static
class
PermissionCallback
implements
PermissionDelegate
.
Callback
PermissionDelegate
.
MediaCallback
{
private
final
String
mType
;
private
EventCallback
mCallback
;
public
PermissionCallback
(
final
String
type
final
EventCallback
callback
)
{
mType
=
type
;
mCallback
=
callback
;
}
private
void
submit
(
final
Object
response
)
{
if
(
mCallback
!
=
null
)
{
mCallback
.
sendSuccess
(
response
)
;
mCallback
=
null
;
}
}
Override
public
void
grant
(
)
{
if
(
"
media
"
.
equals
(
mType
)
)
{
throw
new
UnsupportedOperationException
(
)
;
}
submit
(
true
)
;
}
Override
public
void
reject
(
)
{
submit
(
false
)
;
}
Override
public
void
grant
(
final
String
video
final
String
audio
)
{
if
(
!
"
media
"
.
equals
(
mType
)
)
{
throw
new
UnsupportedOperationException
(
)
;
}
final
GeckoBundle
response
=
new
GeckoBundle
(
2
)
;
response
.
putString
(
"
video
"
video
)
;
response
.
putString
(
"
audio
"
audio
)
;
submit
(
response
)
;
}
Override
public
void
grant
(
final
GeckoBundle
video
final
GeckoBundle
audio
)
{
grant
(
video
!
=
null
?
video
.
getString
(
"
id
"
)
:
null
audio
!
=
null
?
audio
.
getString
(
"
id
"
)
:
null
)
;
}
}
public
PermissionDelegate
getPermissionDelegate
(
)
{
return
mPermissionHandler
.
getListener
(
)
;
}
public
void
setPermissionDelegate
(
final
PermissionDelegate
delegate
)
{
mPermissionHandler
.
setListener
(
delegate
this
)
;
}
private
PromptDelegate
mPromptDelegate
;
private
final
Listener
mListener
=
new
Listener
(
)
;
protected
static
final
class
Window
extends
JNIObject
implements
IInterface
{
private
NativeQueue
mNativeQueue
;
private
Binder
mBinder
;
public
Window
(
final
NativeQueue
nativeQueue
)
{
mNativeQueue
=
nativeQueue
;
}
Override
public
Binder
asBinder
(
)
{
if
(
mBinder
=
=
null
)
{
mBinder
=
new
Binder
(
)
;
mBinder
.
attachInterface
(
this
Window
.
class
.
getName
(
)
)
;
}
return
mBinder
;
}
WrapForJNI
(
dispatchTo
=
"
proxy
"
)
public
static
native
void
open
(
Window
instance
Compositor
compositor
EventDispatcher
dispatcher
GeckoBundle
settings
String
chromeUri
int
screenId
boolean
privateMode
)
;
Override
protected
void
disposeNative
(
)
{
asBinder
(
)
.
attachInterface
(
null
Window
.
class
.
getName
(
)
)
;
synchronized
(
this
)
{
mNativeQueue
.
reset
(
State
.
INITIAL
)
;
}
if
(
GeckoThread
.
isStateAtLeast
(
GeckoThread
.
State
.
PROFILE_READY
)
)
{
nativeDisposeNative
(
)
;
}
else
{
GeckoThread
.
queueNativeCallUntil
(
GeckoThread
.
State
.
PROFILE_READY
this
"
nativeDisposeNative
"
)
;
}
}
WrapForJNI
(
dispatchTo
=
"
proxy
"
stubName
=
"
DisposeNative
"
)
private
native
void
nativeDisposeNative
(
)
;
WrapForJNI
(
dispatchTo
=
"
proxy
"
)
public
native
void
close
(
)
;
WrapForJNI
(
dispatchTo
=
"
proxy
"
)
public
native
void
transfer
(
Compositor
compositor
EventDispatcher
dispatcher
GeckoBundle
settings
)
;
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
synchronized
void
onTransfer
(
final
EventDispatcher
dispatcher
)
{
final
NativeQueue
nativeQueue
=
dispatcher
.
getNativeQueue
(
)
;
if
(
mNativeQueue
!
=
nativeQueue
)
{
nativeQueue
.
setState
(
mNativeQueue
.
getState
(
)
)
;
mNativeQueue
.
reset
(
State
.
INITIAL
)
;
mNativeQueue
=
nativeQueue
;
}
}
WrapForJNI
(
dispatchTo
=
"
proxy
"
)
public
native
void
attachEditable
(
IGeckoEditableParent
parent
GeckoEditableChild
child
)
;
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
synchronized
void
onReady
(
)
{
if
(
mNativeQueue
.
checkAndSetState
(
State
.
INITIAL
State
.
READY
)
)
{
Log
.
i
(
LOGTAG
"
zerdatime
"
+
SystemClock
.
elapsedRealtime
(
)
+
"
-
chrome
startup
finished
"
)
;
}
}
}
private
class
Listener
implements
BundleEventListener
{
void
registerListeners
(
)
{
getEventDispatcher
(
)
.
registerUiThreadListener
(
this
"
GeckoView
:
Prompt
"
null
)
;
}
Override
public
void
handleMessage
(
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
handleMessage
:
event
=
"
+
event
)
;
}
if
(
"
GeckoView
:
Prompt
"
.
equals
(
event
)
)
{
handlePromptEvent
(
GeckoSession
.
this
message
callback
)
;
}
}
}
protected
Window
mWindow
;
private
GeckoSessionSettings
mSettings
;
public
GeckoSession
(
)
{
this
(
null
)
;
}
public
GeckoSession
(
final
GeckoSessionSettings
settings
)
{
if
(
settings
=
=
null
)
{
mSettings
=
new
GeckoSessionSettings
(
this
)
;
}
else
{
mSettings
=
new
GeckoSessionSettings
(
settings
this
)
;
}
mListener
.
registerListeners
(
)
;
}
private
void
transferFrom
(
final
Window
window
final
GeckoSessionSettings
settings
)
{
if
(
isOpen
(
)
)
{
throw
new
IllegalStateException
(
"
Session
is
open
"
)
;
}
mWindow
=
window
;
mSettings
=
new
GeckoSessionSettings
(
settings
this
)
;
if
(
mWindow
!
=
null
)
{
if
(
GeckoThread
.
isStateAtLeast
(
GeckoThread
.
State
.
PROFILE_READY
)
)
{
mWindow
.
transfer
(
mCompositor
mEventDispatcher
mSettings
.
asBundle
(
)
)
;
}
else
{
GeckoThread
.
queueNativeCallUntil
(
GeckoThread
.
State
.
PROFILE_READY
mWindow
"
transfer
"
Compositor
.
class
mCompositor
EventDispatcher
.
class
mEventDispatcher
GeckoBundle
.
class
mSettings
.
asBundle
(
)
)
;
}
}
onWindowChanged
(
)
;
}
void
transferFrom
(
final
GeckoSession
session
)
{
transferFrom
(
session
.
mWindow
session
.
mSettings
)
;
session
.
mWindow
=
null
;
session
.
onWindowChanged
(
)
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
Parcel
out
int
flags
)
{
out
.
writeStrongInterface
(
mWindow
)
;
out
.
writeParcelable
(
mSettings
flags
)
;
}
public
void
readFromParcel
(
final
Parcel
source
)
{
final
IBinder
binder
=
source
.
readStrongBinder
(
)
;
final
IInterface
ifce
=
(
binder
!
=
null
)
?
binder
.
queryLocalInterface
(
Window
.
class
.
getName
(
)
)
:
null
;
final
Window
window
=
(
ifce
instanceof
Window
)
?
(
Window
)
ifce
:
null
;
final
GeckoSessionSettings
settings
=
source
.
readParcelable
(
getClass
(
)
.
getClassLoader
(
)
)
;
transferFrom
(
window
settings
)
;
}
public
static
final
Creator
<
GeckoSession
>
CREATOR
=
new
Creator
<
GeckoSession
>
(
)
{
Override
public
GeckoSession
createFromParcel
(
final
Parcel
in
)
{
final
GeckoSession
session
=
new
GeckoSession
(
)
;
session
.
readFromParcel
(
in
)
;
return
session
;
}
Override
public
GeckoSession
[
]
newArray
(
final
int
size
)
{
return
new
GeckoSession
[
size
]
;
}
}
;
public
static
void
preload
(
final
Context
context
)
{
preload
(
context
null
false
)
;
}
public
static
void
preload
(
final
Context
context
final
String
geckoArgs
final
boolean
multiprocess
)
{
final
Context
appContext
=
context
.
getApplicationContext
(
)
;
if
(
GeckoAppShell
.
getApplicationContext
(
)
=
=
null
)
{
GeckoAppShell
.
setApplicationContext
(
appContext
)
;
}
final
int
flags
=
multiprocess
?
GeckoThread
.
FLAG_PRELOAD_CHILD
:
0
;
if
(
GeckoThread
.
initMainProcess
(
null
geckoArgs
flags
)
)
{
GeckoThread
.
launch
(
)
;
}
}
public
boolean
isOpen
(
)
{
return
mWindow
!
=
null
;
}
public
void
openWindow
(
final
Context
appContext
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
isOpen
(
)
)
{
throw
new
IllegalStateException
(
"
Session
is
open
"
)
;
}
if
(
!
GeckoThread
.
isLaunched
(
)
)
{
final
boolean
multiprocess
=
mSettings
.
getBoolean
(
GeckoSessionSettings
.
USE_MULTIPROCESS
)
;
preload
(
appContext
null
multiprocess
)
;
}
final
String
chromeUri
=
mSettings
.
getString
(
GeckoSessionSettings
.
CHROME_URI
)
;
final
int
screenId
=
mSettings
.
getInt
(
GeckoSessionSettings
.
SCREEN_ID
)
;
final
boolean
isPrivate
=
mSettings
.
getBoolean
(
GeckoSessionSettings
.
USE_PRIVATE_MODE
)
;
mWindow
=
new
Window
(
mNativeQueue
)
;
if
(
GeckoThread
.
isStateAtLeast
(
GeckoThread
.
State
.
PROFILE_READY
)
)
{
Window
.
open
(
mWindow
mCompositor
mEventDispatcher
mSettings
.
asBundle
(
)
chromeUri
screenId
isPrivate
)
;
}
else
{
GeckoThread
.
queueNativeCallUntil
(
GeckoThread
.
State
.
PROFILE_READY
Window
.
class
"
open
"
Window
.
class
mWindow
Compositor
.
class
mCompositor
EventDispatcher
.
class
mEventDispatcher
GeckoBundle
.
class
mSettings
.
asBundle
(
)
String
.
class
chromeUri
screenId
isPrivate
)
;
}
onWindowChanged
(
)
;
}
public
void
closeWindow
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
!
isOpen
(
)
)
{
throw
new
IllegalStateException
(
"
Session
is
not
open
"
)
;
}
if
(
GeckoThread
.
isStateAtLeast
(
GeckoThread
.
State
.
PROFILE_READY
)
)
{
mWindow
.
close
(
)
;
}
else
{
GeckoThread
.
queueNativeCallUntil
(
GeckoThread
.
State
.
PROFILE_READY
mWindow
"
close
"
)
;
}
mWindow
.
disposeNative
(
)
;
mWindow
=
null
;
onWindowChanged
(
)
;
}
private
void
onWindowChanged
(
)
{
if
(
mWindow
!
=
null
)
{
mTextInput
.
onWindowChanged
(
mWindow
)
;
}
}
public
NonNull
TextInputController
getTextInputController
(
)
{
return
mTextInput
;
}
public
void
loadUri
(
String
uri
)
{
final
GeckoBundle
msg
=
new
GeckoBundle
(
)
;
msg
.
putString
(
"
uri
"
uri
)
;
mEventDispatcher
.
dispatch
(
"
GeckoView
:
LoadUri
"
msg
)
;
}
public
void
loadUri
(
Uri
uri
)
{
loadUri
(
uri
.
toString
(
)
)
;
}
public
void
reload
(
)
{
mEventDispatcher
.
dispatch
(
"
GeckoView
:
Reload
"
null
)
;
}
public
void
stop
(
)
{
mEventDispatcher
.
dispatch
(
"
GeckoView
:
Stop
"
null
)
;
}
public
void
goBack
(
)
{
mEventDispatcher
.
dispatch
(
"
GeckoView
:
GoBack
"
null
)
;
}
public
void
goForward
(
)
{
mEventDispatcher
.
dispatch
(
"
GeckoView
:
GoForward
"
null
)
;
}
public
void
setActive
(
boolean
active
)
{
final
GeckoBundle
msg
=
new
GeckoBundle
(
)
;
msg
.
putBoolean
(
"
active
"
active
)
;
mEventDispatcher
.
dispatch
(
"
GeckoView
:
SetActive
"
msg
)
;
}
public
GeckoSessionSettings
getSettings
(
)
{
return
mSettings
;
}
public
void
importScript
(
final
String
url
)
{
if
(
url
.
startsWith
(
"
resource
:
/
/
android
/
assets
/
"
)
)
{
final
GeckoBundle
data
=
new
GeckoBundle
(
1
)
;
data
.
putString
(
"
scriptURL
"
url
)
;
getEventDispatcher
(
)
.
dispatch
(
"
GeckoView
:
ImportScript
"
data
)
;
return
;
}
throw
new
IllegalArgumentException
(
"
Must
import
script
from
'
resources
:
/
/
android
/
assets
/
'
location
.
"
)
;
}
public
void
exitFullScreen
(
)
{
mEventDispatcher
.
dispatch
(
"
GeckoViewContent
:
ExitFullScreen
"
null
)
;
}
public
void
setContentListener
(
ContentListener
listener
)
{
mContentHandler
.
setListener
(
listener
this
)
;
}
public
ContentListener
getContentListener
(
)
{
return
mContentHandler
.
getListener
(
)
;
}
public
void
setProgressListener
(
ProgressListener
listener
)
{
mProgressHandler
.
setListener
(
listener
this
)
;
}
public
ProgressListener
getProgressListener
(
)
{
return
mProgressHandler
.
getListener
(
)
;
}
public
void
setNavigationListener
(
NavigationListener
listener
)
{
mNavigationHandler
.
setListener
(
listener
this
)
;
}
public
NavigationListener
getNavigationListener
(
)
{
return
mNavigationHandler
.
getListener
(
)
;
}
public
void
setScrollListener
(
ScrollListener
listener
)
{
mScrollHandler
.
setListener
(
listener
this
)
;
}
public
void
setTrackingProtectionDelegate
(
TrackingProtectionDelegate
delegate
)
{
mTrackingProtectionHandler
.
setListener
(
delegate
this
)
;
}
public
TrackingProtectionDelegate
getTrackingProtectionDelegate
(
)
{
return
mTrackingProtectionHandler
.
getListener
(
)
;
}
public
void
setPromptDelegate
(
PromptDelegate
delegate
)
{
mPromptDelegate
=
delegate
;
}
public
PromptDelegate
getPromptDelegate
(
)
{
return
mPromptDelegate
;
}
private
static
class
PromptCallback
implements
PromptDelegate
.
AlertCallback
PromptDelegate
.
ButtonCallback
PromptDelegate
.
TextCallback
PromptDelegate
.
AuthCallback
PromptDelegate
.
ChoiceCallback
PromptDelegate
.
FileCallback
{
private
final
String
mType
;
private
final
String
mMode
;
private
final
boolean
mHasCheckbox
;
private
final
String
mCheckboxMessage
;
private
EventCallback
mCallback
;
private
boolean
mCheckboxValue
;
private
GeckoBundle
mResult
;
public
PromptCallback
(
final
String
type
final
String
mode
final
GeckoBundle
message
final
EventCallback
callback
)
{
mType
=
type
;
mMode
=
mode
;
mCallback
=
callback
;
mHasCheckbox
=
message
.
getBoolean
(
"
hasCheck
"
)
;
mCheckboxMessage
=
message
.
getString
(
"
checkMsg
"
)
;
mCheckboxValue
=
message
.
getBoolean
(
"
checkValue
"
)
;
}
private
GeckoBundle
ensureResult
(
)
{
if
(
mResult
=
=
null
)
{
mResult
=
new
GeckoBundle
(
2
)
;
}
return
mResult
;
}
private
void
submit
(
)
{
if
(
mHasCheckbox
)
{
ensureResult
(
)
.
putBoolean
(
"
checkValue
"
mCheckboxValue
)
;
}
if
(
mCallback
!
=
null
)
{
mCallback
.
sendSuccess
(
mResult
)
;
mCallback
=
null
;
}
}
Override
public
void
dismiss
(
)
{
mResult
=
null
;
submit
(
)
;
}
Override
public
boolean
hasCheckbox
(
)
{
return
mHasCheckbox
;
}
Override
public
String
getCheckboxMessage
(
)
{
return
mCheckboxMessage
;
}
Override
public
boolean
getCheckboxValue
(
)
{
return
mCheckboxValue
;
}
Override
public
void
setCheckboxValue
(
final
boolean
value
)
{
mCheckboxValue
=
value
;
}
Override
public
void
confirm
(
final
int
value
)
{
if
(
"
button
"
.
equals
(
mType
)
)
{
ensureResult
(
)
.
putInt
(
"
button
"
value
)
;
}
else
{
throw
new
UnsupportedOperationException
(
)
;
}
submit
(
)
;
}
Override
public
void
confirm
(
final
String
value
)
{
if
(
"
text
"
.
equals
(
mType
)
|
|
"
color
"
.
equals
(
mType
)
|
|
"
datetime
"
.
equals
(
mType
)
)
{
ensureResult
(
)
.
putString
(
mType
value
)
;
}
else
if
(
"
auth
"
.
equals
(
mType
)
)
{
if
(
!
"
password
"
.
equals
(
mMode
)
)
{
throw
new
IllegalArgumentException
(
)
;
}
ensureResult
(
)
.
putString
(
"
password
"
value
)
;
}
else
if
(
"
choice
"
.
equals
(
mType
)
)
{
confirm
(
new
String
[
]
{
value
}
)
;
return
;
}
else
{
throw
new
UnsupportedOperationException
(
)
;
}
submit
(
)
;
}
Override
public
void
confirm
(
final
String
username
final
String
password
)
{
if
(
"
auth
"
.
equals
(
mType
)
)
{
if
(
!
"
auth
"
.
equals
(
mMode
)
)
{
throw
new
IllegalArgumentException
(
)
;
}
ensureResult
(
)
.
putString
(
"
username
"
username
)
;
ensureResult
(
)
.
putString
(
"
password
"
password
)
;
}
else
{
throw
new
UnsupportedOperationException
(
)
;
}
submit
(
)
;
}
Override
public
void
confirm
(
final
String
[
]
values
)
{
if
(
(
"
menu
"
.
equals
(
mMode
)
|
|
"
single
"
.
equals
(
mMode
)
)
&
&
(
values
=
=
null
|
|
values
.
length
!
=
1
)
)
{
throw
new
IllegalArgumentException
(
)
;
}
if
(
"
choice
"
.
equals
(
mType
)
)
{
ensureResult
(
)
.
putStringArray
(
"
choices
"
values
)
;
}
else
{
throw
new
UnsupportedOperationException
(
)
;
}
submit
(
)
;
}
Override
public
void
confirm
(
GeckoBundle
item
)
{
if
(
"
choice
"
.
equals
(
mType
)
)
{
confirm
(
item
=
=
null
?
null
:
item
.
getString
(
"
id
"
)
)
;
return
;
}
else
{
throw
new
UnsupportedOperationException
(
)
;
}
}
Override
public
void
confirm
(
GeckoBundle
[
]
items
)
{
if
(
(
"
menu
"
.
equals
(
mMode
)
|
|
"
single
"
.
equals
(
mMode
)
)
&
&
(
items
=
=
null
|
|
items
.
length
!
=
1
)
)
{
throw
new
IllegalArgumentException
(
)
;
}
if
(
"
choice
"
.
equals
(
mType
)
)
{
if
(
items
=
=
null
)
{
confirm
(
(
String
[
]
)
null
)
;
return
;
}
final
String
[
]
ids
=
new
String
[
items
.
length
]
;
for
(
int
i
=
0
;
i
<
ids
.
length
;
i
+
+
)
{
ids
[
i
]
=
(
items
[
i
]
=
=
null
)
?
null
:
items
[
i
]
.
getString
(
"
id
"
)
;
}
confirm
(
ids
)
;
return
;
}
else
{
throw
new
UnsupportedOperationException
(
)
;
}
}
Override
public
void
confirm
(
final
Context
context
final
Uri
uri
)
{
if
(
"
file
"
.
equals
(
mType
)
)
{
confirm
(
context
uri
=
=
null
?
null
:
new
Uri
[
]
{
uri
}
)
;
return
;
}
else
{
throw
new
UnsupportedOperationException
(
)
;
}
}
private
static
String
getFile
(
final
Context
context
final
Uri
uri
)
{
if
(
uri
=
=
null
)
{
return
null
;
}
if
(
"
file
"
.
equals
(
uri
.
getScheme
(
)
)
)
{
return
uri
.
getPath
(
)
;
}
final
ContentResolver
cr
=
context
.
getContentResolver
(
)
;
final
Cursor
cur
=
cr
.
query
(
uri
new
String
[
]
{
"
_data
"
}
null
null
null
)
;
if
(
cur
=
=
null
)
{
return
null
;
}
try
{
final
int
idx
=
cur
.
getColumnIndex
(
"
_data
"
)
;
if
(
idx
<
0
|
|
!
cur
.
moveToFirst
(
)
)
{
return
null
;
}
do
{
try
{
final
String
path
=
cur
.
getString
(
idx
)
;
if
(
path
!
=
null
&
&
!
path
.
isEmpty
(
)
)
{
return
path
;
}
}
catch
(
final
Exception
e
)
{
}
}
while
(
cur
.
moveToNext
(
)
)
;
}
finally
{
cur
.
close
(
)
;
}
return
null
;
}
Override
public
void
confirm
(
final
Context
context
final
Uri
[
]
uris
)
{
if
(
"
single
"
.
equals
(
mMode
)
&
&
(
uris
=
=
null
|
|
uris
.
length
!
=
1
)
)
{
throw
new
IllegalArgumentException
(
)
;
}
if
(
"
file
"
.
equals
(
mType
)
)
{
final
String
[
]
paths
=
new
String
[
uris
!
=
null
?
uris
.
length
:
0
]
;
for
(
int
i
=
0
;
i
<
paths
.
length
;
i
+
+
)
{
paths
[
i
]
=
getFile
(
context
uris
[
i
]
)
;
if
(
paths
[
i
]
=
=
null
)
{
Log
.
e
(
LOGTAG
"
Only
file
URI
is
supported
:
"
+
uris
[
i
]
)
;
}
}
ensureResult
(
)
.
putStringArray
(
"
files
"
paths
)
;
}
else
{
throw
new
UnsupportedOperationException
(
)
;
}
submit
(
)
;
}
}
static
void
handlePromptEvent
(
final
GeckoSession
session
final
GeckoBundle
message
final
EventCallback
callback
)
{
final
PromptDelegate
delegate
=
session
.
getPromptDelegate
(
)
;
if
(
delegate
=
=
null
)
{
callback
.
sendSuccess
(
null
)
;
return
;
}
final
String
type
=
message
.
getString
(
"
type
"
)
;
final
String
mode
=
message
.
getString
(
"
mode
"
)
;
final
PromptCallback
cb
=
new
PromptCallback
(
type
mode
message
callback
)
;
final
String
title
=
message
.
getString
(
"
title
"
)
;
final
String
msg
=
message
.
getString
(
"
msg
"
)
;
switch
(
type
)
{
case
"
alert
"
:
{
delegate
.
alert
(
session
title
msg
cb
)
;
break
;
}
case
"
button
"
:
{
final
String
[
]
btnTitle
=
message
.
getStringArray
(
"
btnTitle
"
)
;
final
String
[
]
btnCustomTitle
=
message
.
getStringArray
(
"
btnCustomTitle
"
)
;
for
(
int
i
=
0
;
i
<
btnCustomTitle
.
length
;
i
+
+
)
{
final
int
resId
;
if
(
"
ok
"
.
equals
(
btnTitle
[
i
]
)
)
{
resId
=
android
.
R
.
string
.
ok
;
}
else
if
(
"
cancel
"
.
equals
(
btnTitle
[
i
]
)
)
{
resId
=
android
.
R
.
string
.
cancel
;
}
else
if
(
"
yes
"
.
equals
(
btnTitle
[
i
]
)
)
{
resId
=
android
.
R
.
string
.
yes
;
}
else
if
(
"
no
"
.
equals
(
btnTitle
[
i
]
)
)
{
resId
=
android
.
R
.
string
.
no
;
}
else
{
continue
;
}
btnCustomTitle
[
i
]
=
Resources
.
getSystem
(
)
.
getString
(
resId
)
;
}
delegate
.
promptForButton
(
session
title
msg
btnCustomTitle
cb
)
;
break
;
}
case
"
text
"
:
{
delegate
.
promptForText
(
session
title
msg
message
.
getString
(
"
value
"
)
cb
)
;
break
;
}
case
"
auth
"
:
{
delegate
.
promptForAuth
(
session
title
msg
message
.
getBundle
(
"
options
"
)
cb
)
;
break
;
}
case
"
choice
"
:
{
final
int
intMode
;
if
(
"
menu
"
.
equals
(
mode
)
)
{
intMode
=
PromptDelegate
.
CHOICE_TYPE_MENU
;
}
else
if
(
"
single
"
.
equals
(
mode
)
)
{
intMode
=
PromptDelegate
.
CHOICE_TYPE_SINGLE
;
}
else
if
(
"
multiple
"
.
equals
(
mode
)
)
{
intMode
=
PromptDelegate
.
CHOICE_TYPE_MULTIPLE
;
}
else
{
callback
.
sendError
(
"
Invalid
mode
"
)
;
return
;
}
delegate
.
promptForChoice
(
session
title
msg
intMode
message
.
getBundleArray
(
"
choices
"
)
cb
)
;
break
;
}
case
"
color
"
:
{
delegate
.
promptForColor
(
session
title
message
.
getString
(
"
value
"
)
cb
)
;
break
;
}
case
"
datetime
"
:
{
final
int
intMode
;
if
(
"
date
"
.
equals
(
mode
)
)
{
intMode
=
PromptDelegate
.
DATETIME_TYPE_DATE
;
}
else
if
(
"
month
"
.
equals
(
mode
)
)
{
intMode
=
PromptDelegate
.
DATETIME_TYPE_MONTH
;
}
else
if
(
"
week
"
.
equals
(
mode
)
)
{
intMode
=
PromptDelegate
.
DATETIME_TYPE_WEEK
;
}
else
if
(
"
time
"
.
equals
(
mode
)
)
{
intMode
=
PromptDelegate
.
DATETIME_TYPE_TIME
;
}
else
if
(
"
datetime
-
local
"
.
equals
(
mode
)
)
{
intMode
=
PromptDelegate
.
DATETIME_TYPE_DATETIME_LOCAL
;
}
else
{
callback
.
sendError
(
"
Invalid
mode
"
)
;
return
;
}
delegate
.
promptForDateTime
(
session
title
intMode
message
.
getString
(
"
value
"
)
message
.
getString
(
"
min
"
)
message
.
getString
(
"
max
"
)
cb
)
;
break
;
}
case
"
file
"
:
{
final
int
intMode
;
if
(
"
single
"
.
equals
(
mode
)
)
{
intMode
=
PromptDelegate
.
FILE_TYPE_SINGLE
;
}
else
if
(
"
multiple
"
.
equals
(
mode
)
)
{
intMode
=
PromptDelegate
.
FILE_TYPE_MULTIPLE
;
}
else
{
callback
.
sendError
(
"
Invalid
mode
"
)
;
return
;
}
String
[
]
mimeTypes
=
message
.
getStringArray
(
"
mimeTypes
"
)
;
final
String
[
]
extensions
=
message
.
getStringArray
(
"
extension
"
)
;
if
(
extensions
!
=
null
)
{
final
ArrayList
<
String
>
combined
=
new
ArrayList
<
>
(
mimeTypes
.
length
+
extensions
.
length
)
;
combined
.
addAll
(
Arrays
.
asList
(
mimeTypes
)
)
;
for
(
final
String
extension
:
extensions
)
{
final
String
mimeType
=
URLConnection
.
guessContentTypeFromName
(
extension
)
;
if
(
mimeType
!
=
null
)
{
combined
.
add
(
mimeType
)
;
}
}
mimeTypes
=
combined
.
toArray
(
new
String
[
combined
.
size
(
)
]
)
;
}
delegate
.
promptForFile
(
session
title
intMode
mimeTypes
cb
)
;
break
;
}
default
:
{
callback
.
sendError
(
"
Invalid
type
"
)
;
break
;
}
}
}
public
EventDispatcher
getEventDispatcher
(
)
{
return
mEventDispatcher
;
}
public
interface
ProgressListener
{
public
class
SecurityInformation
{
public
static
final
int
SECURITY_MODE_UNKNOWN
=
0
;
public
static
final
int
SECURITY_MODE_IDENTIFIED
=
1
;
public
static
final
int
SECURITY_MODE_VERIFIED
=
2
;
public
static
final
int
CONTENT_UNKNOWN
=
0
;
public
static
final
int
CONTENT_BLOCKED
=
1
;
public
static
final
int
CONTENT_LOADED
=
2
;
public
final
boolean
isSecure
;
public
final
boolean
isException
;
public
final
String
origin
;
public
final
String
host
;
public
final
String
organization
;
public
final
String
subjectName
;
public
final
String
issuerCommonName
;
public
final
String
issuerOrganization
;
public
final
int
securityMode
;
public
final
int
mixedModePassive
;
public
final
int
mixedModeActive
;
public
final
int
trackingMode
;
SecurityInformation
(
GeckoBundle
identityData
)
{
final
GeckoBundle
mode
=
identityData
.
getBundle
(
"
mode
"
)
;
mixedModePassive
=
mode
.
getInt
(
"
mixed_display
"
)
;
mixedModeActive
=
mode
.
getInt
(
"
mixed_active
"
)
;
trackingMode
=
mode
.
getInt
(
"
tracking
"
)
;
securityMode
=
mode
.
getInt
(
"
identity
"
)
;
isSecure
=
identityData
.
getBoolean
(
"
secure
"
)
;
isException
=
identityData
.
getBoolean
(
"
securityException
"
)
;
origin
=
identityData
.
getString
(
"
origin
"
)
;
host
=
identityData
.
getString
(
"
host
"
)
;
organization
=
identityData
.
getString
(
"
organization
"
)
;
subjectName
=
identityData
.
getString
(
"
subjectName
"
)
;
issuerCommonName
=
identityData
.
getString
(
"
issuerCommonName
"
)
;
issuerOrganization
=
identityData
.
getString
(
"
issuerOrganization
"
)
;
}
}
void
onPageStart
(
GeckoSession
session
String
url
)
;
void
onPageStop
(
GeckoSession
session
boolean
success
)
;
void
onSecurityChange
(
GeckoSession
session
SecurityInformation
securityInfo
)
;
}
public
interface
ContentListener
{
void
onTitleChange
(
GeckoSession
session
String
title
)
;
void
onFocusRequest
(
GeckoSession
session
)
;
void
onFullScreen
(
GeckoSession
session
boolean
fullScreen
)
;
void
onContextMenu
(
GeckoSession
session
int
screenX
int
screenY
String
uri
String
elementSrc
)
;
}
public
interface
NavigationListener
{
void
onLocationChange
(
GeckoSession
session
String
url
)
;
void
onCanGoBack
(
GeckoSession
session
boolean
canGoBack
)
;
void
onCanGoForward
(
GeckoSession
session
boolean
canGoForward
)
;
enum
TargetWindow
{
DEFAULT
(
0
)
CURRENT
(
1
)
NEW
(
2
)
;
private
static
final
TargetWindow
[
]
sValues
=
TargetWindow
.
values
(
)
;
private
int
mValue
;
private
TargetWindow
(
int
value
)
{
mValue
=
value
;
}
public
static
TargetWindow
forValue
(
int
value
)
{
return
sValues
[
value
]
;
}
public
static
TargetWindow
forGeckoValue
(
int
value
)
{
final
TargetWindow
[
]
sMap
=
{
DEFAULT
CURRENT
NEW
NEW
NEW
}
;
return
sMap
[
value
]
;
}
}
enum
LoadUriResult
{
HANDLED
(
0
)
LOAD_IN_FRAME
(
1
)
;
private
int
mValue
;
private
LoadUriResult
(
int
value
)
{
mValue
=
value
;
}
}
boolean
onLoadUri
(
GeckoSession
session
String
uri
TargetWindow
where
)
;
}
public
interface
PromptDelegate
{
interface
AlertCallback
{
void
dismiss
(
)
;
boolean
hasCheckbox
(
)
;
String
getCheckboxMessage
(
)
;
boolean
getCheckboxValue
(
)
;
void
setCheckboxValue
(
boolean
value
)
;
}
void
alert
(
GeckoSession
session
String
title
String
msg
AlertCallback
callback
)
;
interface
ButtonCallback
extends
AlertCallback
{
void
confirm
(
int
button
)
;
}
static
final
int
BUTTON_TYPE_POSITIVE
=
0
;
static
final
int
BUTTON_TYPE_NEUTRAL
=
1
;
static
final
int
BUTTON_TYPE_NEGATIVE
=
2
;
void
promptForButton
(
GeckoSession
session
String
title
String
msg
String
[
]
btnMsg
ButtonCallback
callback
)
;
interface
TextCallback
extends
AlertCallback
{
void
confirm
(
String
text
)
;
}
void
promptForText
(
GeckoSession
session
String
title
String
msg
String
value
TextCallback
callback
)
;
interface
AuthCallback
extends
AlertCallback
{
void
confirm
(
String
password
)
;
void
confirm
(
String
username
String
password
)
;
}
static
final
int
AUTH_FLAG_HOST
=
1
;
static
final
int
AUTH_FLAG_PROXY
=
2
;
static
final
int
AUTH_FLAG_ONLY_PASSWORD
=
8
;
static
final
int
AUTH_FLAG_PREVIOUS_FAILED
=
16
;
static
final
int
AUTH_FLAG_CROSS_ORIGIN_SUB_RESOURCE
=
32
;
static
final
int
AUTH_LEVEL_NONE
=
0
;
static
final
int
AUTH_LEVEL_PW_ENCRYPTED
=
1
;
static
final
int
AUTH_LEVEL_SECURE
=
2
;
void
promptForAuth
(
GeckoSession
session
String
title
String
msg
GeckoBundle
options
AuthCallback
callback
)
;
interface
ChoiceCallback
extends
AlertCallback
{
void
confirm
(
String
id
)
;
void
confirm
(
String
[
]
ids
)
;
void
confirm
(
GeckoBundle
item
)
;
void
confirm
(
GeckoBundle
[
]
items
)
;
}
static
final
int
CHOICE_TYPE_MENU
=
1
;
static
final
int
CHOICE_TYPE_SINGLE
=
2
;
static
final
int
CHOICE_TYPE_MULTIPLE
=
3
;
void
promptForChoice
(
GeckoSession
session
String
title
String
msg
int
type
GeckoBundle
[
]
choices
ChoiceCallback
callback
)
;
void
promptForColor
(
GeckoSession
session
String
title
String
value
TextCallback
callback
)
;
static
final
int
DATETIME_TYPE_DATE
=
1
;
static
final
int
DATETIME_TYPE_MONTH
=
2
;
static
final
int
DATETIME_TYPE_WEEK
=
3
;
static
final
int
DATETIME_TYPE_TIME
=
4
;
static
final
int
DATETIME_TYPE_DATETIME_LOCAL
=
5
;
void
promptForDateTime
(
GeckoSession
session
String
title
int
type
String
value
String
min
String
max
TextCallback
callback
)
;
interface
FileCallback
extends
AlertCallback
{
void
confirm
(
Context
context
Uri
uri
)
;
void
confirm
(
Context
context
Uri
[
]
uris
)
;
}
static
final
int
FILE_TYPE_SINGLE
=
1
;
static
final
int
FILE_TYPE_MULTIPLE
=
2
;
void
promptForFile
(
GeckoSession
session
String
title
int
type
String
[
]
mimeTypes
FileCallback
callback
)
;
}
public
interface
ScrollListener
{
public
void
onScrollChanged
(
GeckoSession
session
int
scrollX
int
scrollY
)
;
}
private
final
TrackingProtection
mTrackingProtection
=
new
TrackingProtection
(
this
)
;
public
interface
TrackingProtectionDelegate
{
static
final
int
CATEGORY_AD
=
1
<
<
0
;
static
final
int
CATEGORY_ANALYTIC
=
1
<
<
1
;
static
final
int
CATEGORY_SOCIAL
=
1
<
<
2
;
static
final
int
CATEGORY_CONTENT
=
1
<
<
3
;
void
onTrackerBlocked
(
GeckoSession
session
String
uri
int
categories
)
;
}
public
void
enableTrackingProtection
(
int
categories
)
{
mTrackingProtection
.
enable
(
categories
)
;
}
public
void
disableTrackingProtection
(
)
{
mTrackingProtection
.
disable
(
)
;
}
public
interface
PermissionDelegate
{
interface
Callback
{
void
grant
(
)
;
void
reject
(
)
;
}
void
requestAndroidPermissions
(
GeckoSession
session
String
[
]
permissions
Callback
callback
)
;
void
requestContentPermission
(
GeckoSession
session
String
uri
String
type
String
access
Callback
callback
)
;
interface
MediaCallback
{
void
grant
(
final
String
video
final
String
audio
)
;
void
grant
(
final
GeckoBundle
video
final
GeckoBundle
audio
)
;
void
reject
(
)
;
}
void
requestMediaPermission
(
GeckoSession
session
String
uri
GeckoBundle
[
]
video
GeckoBundle
[
]
audio
MediaCallback
callback
)
;
}
}
