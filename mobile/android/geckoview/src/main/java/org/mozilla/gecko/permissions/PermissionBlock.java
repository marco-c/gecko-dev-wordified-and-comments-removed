package
org
.
mozilla
.
gecko
.
permissions
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
app
.
Activity
;
import
android
.
content
.
Context
;
import
android
.
support
.
annotation
.
NonNull
;
public
class
PermissionBlock
{
private
final
PermissionsHelper
mHelper
;
private
Context
mContext
;
private
String
[
]
mPermissions
;
private
boolean
mOnUiThread
;
private
boolean
mOnBackgroundThread
;
private
Runnable
mOnPermissionsGranted
;
private
Runnable
mOnPermissionsDenied
;
private
boolean
mDoNotPrompt
;
PermissionBlock
(
final
Context
context
final
PermissionsHelper
helper
)
{
mContext
=
context
;
mHelper
=
helper
;
}
public
PermissionBlock
withPermissions
(
final
NonNull
String
.
.
.
permissions
)
{
mPermissions
=
permissions
;
return
this
;
}
public
PermissionBlock
onUIThread
(
)
{
mOnUiThread
=
true
;
return
this
;
}
public
PermissionBlock
onBackgroundThread
(
)
{
mOnBackgroundThread
=
true
;
return
this
;
}
public
PermissionBlock
doNotPrompt
(
)
{
mDoNotPrompt
=
true
;
return
this
;
}
public
PermissionBlock
doNotPromptIf
(
final
boolean
condition
)
{
if
(
condition
)
{
doNotPrompt
(
)
;
}
return
this
;
}
public
void
run
(
)
{
run
(
null
)
;
}
public
void
run
(
final
Runnable
onPermissionsGranted
)
{
if
(
!
mDoNotPrompt
&
&
!
(
mContext
instanceof
Activity
)
)
{
throw
new
IllegalStateException
(
"
You
need
to
either
specify
doNotPrompt
(
)
or
pass
in
an
Activity
context
"
)
;
}
mOnPermissionsGranted
=
onPermissionsGranted
;
if
(
hasPermissions
(
mContext
)
)
{
onPermissionsGranted
(
)
;
}
else
if
(
mDoNotPrompt
)
{
onPermissionsDenied
(
)
;
}
else
{
Permissions
.
prompt
(
(
Activity
)
mContext
this
)
;
}
mContext
=
null
;
}
public
PermissionBlock
andFallback
(
final
NonNull
Runnable
onPermissionsDenied
)
{
mOnPermissionsDenied
=
onPermissionsDenied
;
return
this
;
}
void
onPermissionsGranted
(
)
{
executeRunnable
(
mOnPermissionsGranted
)
;
}
void
onPermissionsDenied
(
)
{
executeRunnable
(
mOnPermissionsDenied
)
;
}
private
void
executeRunnable
(
final
Runnable
runnable
)
{
if
(
runnable
=
=
null
)
{
return
;
}
if
(
mOnUiThread
&
&
mOnBackgroundThread
)
{
throw
new
IllegalStateException
(
"
Cannot
run
callback
on
more
than
one
thread
"
)
;
}
if
(
mOnUiThread
&
&
!
ThreadUtils
.
isOnUiThread
(
)
)
{
ThreadUtils
.
runOnUiThread
(
runnable
)
;
}
else
if
(
mOnBackgroundThread
&
&
!
ThreadUtils
.
isOnBackgroundThread
(
)
)
{
ThreadUtils
.
postToBackgroundThread
(
runnable
)
;
}
else
{
runnable
.
run
(
)
;
}
}
String
[
]
getPermissions
(
)
{
return
mPermissions
;
}
boolean
hasPermissions
(
final
Context
context
)
{
return
mHelper
.
hasPermissions
(
context
mPermissions
)
;
}
}
