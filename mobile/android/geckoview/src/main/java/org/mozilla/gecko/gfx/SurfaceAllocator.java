package
org
.
mozilla
.
gecko
.
gfx
;
import
android
.
os
.
IBinder
;
import
android
.
os
.
RemoteException
;
import
android
.
util
.
Log
;
import
android
.
util
.
SparseArray
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
process
.
GeckoProcessManager
;
import
org
.
mozilla
.
gecko
.
process
.
GeckoServiceChildProcess
;
final
class
SurfaceAllocator
{
private
static
final
String
LOGTAG
=
"
SurfaceAllocator
"
;
private
static
ISurfaceAllocator
sAllocator
;
private
static
final
SparseArray
<
GeckoSurface
>
sSurfaces
=
new
SparseArray
<
GeckoSurface
>
(
)
;
private
static
synchronized
void
ensureConnection
(
)
{
if
(
sAllocator
!
=
null
)
{
return
;
}
try
{
if
(
GeckoAppShell
.
isParentProcess
(
)
)
{
sAllocator
=
GeckoProcessManager
.
getInstance
(
)
.
getSurfaceAllocator
(
)
;
}
else
{
sAllocator
=
GeckoServiceChildProcess
.
getSurfaceAllocator
(
)
;
}
if
(
sAllocator
=
=
null
)
{
Log
.
w
(
LOGTAG
"
Failed
to
connect
to
RemoteSurfaceAllocator
"
)
;
return
;
}
sAllocator
.
asBinder
(
)
.
linkToDeath
(
new
IBinder
.
DeathRecipient
(
)
{
Override
public
void
binderDied
(
)
{
Log
.
w
(
LOGTAG
"
RemoteSurfaceAllocator
died
"
)
;
synchronized
(
SurfaceAllocator
.
class
)
{
for
(
int
i
=
0
;
i
<
sSurfaces
.
size
(
)
;
i
+
+
)
{
sSurfaces
.
valueAt
(
i
)
.
release
(
)
;
}
sSurfaces
.
clear
(
)
;
sAllocator
=
null
;
}
}
}
0
)
;
}
catch
(
final
RemoteException
e
)
{
Log
.
w
(
LOGTAG
"
Failed
to
connect
to
RemoteSurfaceAllocator
"
e
)
;
sAllocator
=
null
;
}
}
WrapForJNI
public
static
synchronized
GeckoSurface
acquireSurface
(
final
int
width
final
int
height
final
boolean
singleBufferMode
)
{
try
{
ensureConnection
(
)
;
if
(
sAllocator
=
=
null
)
{
Log
.
w
(
LOGTAG
"
Failed
to
acquire
GeckoSurface
:
not
connected
"
)
;
return
null
;
}
if
(
singleBufferMode
&
&
!
GeckoSurfaceTexture
.
isSingleBufferSupported
(
)
)
{
return
null
;
}
final
GeckoSurface
surface
=
sAllocator
.
acquireSurface
(
width
height
singleBufferMode
)
;
if
(
surface
=
=
null
)
{
Log
.
w
(
LOGTAG
"
Failed
to
acquire
GeckoSurface
:
RemoteSurfaceAllocator
returned
null
"
)
;
return
null
;
}
sSurfaces
.
put
(
surface
.
getHandle
(
)
surface
)
;
if
(
!
surface
.
inProcess
(
)
)
{
sAllocator
.
configureSync
(
surface
.
initSyncSurface
(
width
height
)
)
;
}
return
surface
;
}
catch
(
final
RemoteException
e
)
{
Log
.
w
(
LOGTAG
"
Failed
to
acquire
GeckoSurface
"
e
)
;
return
null
;
}
}
WrapForJNI
public
static
synchronized
void
disposeSurface
(
final
GeckoSurface
surface
)
{
if
(
surface
.
isReleased
(
)
)
{
return
;
}
sSurfaces
.
remove
(
surface
.
getHandle
(
)
)
;
surface
.
release
(
)
;
if
(
sAllocator
=
=
null
)
{
return
;
}
try
{
if
(
sAllocator
!
=
null
)
{
sAllocator
.
releaseSurface
(
surface
.
getHandle
(
)
)
;
}
}
catch
(
final
RemoteException
e
)
{
Log
.
w
(
LOGTAG
"
Failed
to
release
surface
texture
"
e
)
;
}
}
public
static
synchronized
void
sync
(
final
int
upstream
)
{
try
{
if
(
sAllocator
!
=
null
)
{
sAllocator
.
sync
(
upstream
)
;
}
}
catch
(
final
RemoteException
e
)
{
Log
.
w
(
LOGTAG
"
Failed
to
sync
texture
"
e
)
;
}
}
}
