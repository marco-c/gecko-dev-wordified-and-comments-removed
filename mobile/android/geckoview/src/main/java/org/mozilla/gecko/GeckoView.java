package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
gfx
.
GeckoDisplay
;
import
org
.
mozilla
.
gecko
.
gfx
.
LayerView
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Color
;
import
android
.
graphics
.
Rect
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
KeyEvent
;
import
android
.
view
.
SurfaceHolder
;
import
android
.
view
.
SurfaceView
;
import
android
.
view
.
ViewGroup
;
import
android
.
view
.
inputmethod
.
EditorInfo
;
import
android
.
view
.
inputmethod
.
InputConnection
;
import
android
.
view
.
inputmethod
.
InputMethodManager
;
public
class
GeckoView
extends
LayerView
{
private
static
final
String
LOGTAG
=
"
GeckoView
"
;
private
static
final
boolean
DEBUG
=
false
;
private
final
Display
mDisplay
=
new
Display
(
)
;
protected
GeckoSession
mSession
;
private
boolean
mStateSaved
;
protected
SurfaceView
mSurfaceView
;
private
InputConnectionListener
mInputConnectionListener
;
private
boolean
mIsResettingFocus
;
private
static
class
SavedState
extends
BaseSavedState
{
public
final
GeckoSession
session
;
public
SavedState
(
final
Parcelable
superState
final
GeckoSession
session
)
{
super
(
superState
)
;
this
.
session
=
session
;
}
SavedState
(
final
Parcel
in
)
{
super
(
in
)
;
session
=
in
.
readParcelable
(
getClass
(
)
.
getClassLoader
(
)
)
;
}
Override
public
void
writeToParcel
(
final
Parcel
dest
final
int
flags
)
{
super
.
writeToParcel
(
dest
flags
)
;
dest
.
writeParcelable
(
session
flags
)
;
}
public
static
final
Creator
<
SavedState
>
CREATOR
=
new
Creator
<
SavedState
>
(
)
{
Override
public
SavedState
createFromParcel
(
final
Parcel
in
)
{
return
new
SavedState
(
in
)
;
}
Override
public
SavedState
[
]
newArray
(
final
int
size
)
{
return
new
SavedState
[
size
]
;
}
}
;
}
private
class
Display
implements
GeckoDisplay
SurfaceHolder
.
Callback
{
private
Listener
mListener
;
private
boolean
mValid
;
Override
public
Listener
getListener
(
)
{
return
mListener
;
}
Override
public
void
setListener
(
final
Listener
listener
)
{
if
(
mValid
&
&
mListener
!
=
null
)
{
mListener
.
surfaceDestroyed
(
)
;
}
mListener
=
listener
;
if
(
!
mValid
|
|
listener
=
=
null
)
{
return
;
}
if
(
GeckoView
.
this
.
mSurfaceView
!
=
null
)
{
final
SurfaceHolder
holder
=
GeckoView
.
this
.
mSurfaceView
.
getHolder
(
)
;
final
Rect
frame
=
holder
.
getSurfaceFrame
(
)
;
listener
.
surfaceChanged
(
holder
.
getSurface
(
)
frame
.
right
frame
.
bottom
)
;
}
}
Override
public
void
surfaceCreated
(
final
SurfaceHolder
holder
)
{
}
Override
public
void
surfaceChanged
(
final
SurfaceHolder
holder
final
int
format
final
int
width
final
int
height
)
{
if
(
mListener
!
=
null
)
{
mListener
.
surfaceChanged
(
holder
.
getSurface
(
)
width
height
)
;
}
mValid
=
true
;
}
Override
public
void
surfaceDestroyed
(
final
SurfaceHolder
holder
)
{
if
(
mListener
!
=
null
)
{
mListener
.
surfaceDestroyed
(
)
;
}
mValid
=
false
;
}
}
public
GeckoView
(
final
Context
context
)
{
super
(
context
)
;
init
(
)
;
}
public
GeckoView
(
final
Context
context
final
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
init
(
)
;
}
private
void
init
(
)
{
initializeView
(
)
;
setFocusable
(
true
)
;
setFocusableInTouchMode
(
true
)
;
setDescendantFocusability
(
FOCUS_BLOCK_DESCENDANTS
)
;
setWillNotCacheDrawing
(
false
)
;
mSurfaceView
=
new
SurfaceView
(
getContext
(
)
)
;
mSurfaceView
.
setBackgroundColor
(
Color
.
WHITE
)
;
addView
(
mSurfaceView
new
ViewGroup
.
LayoutParams
(
ViewGroup
.
LayoutParams
.
MATCH_PARENT
ViewGroup
.
LayoutParams
.
MATCH_PARENT
)
)
;
mSurfaceView
.
getHolder
(
)
.
addCallback
(
mDisplay
)
;
}
Override
public
void
setSurfaceBackgroundColor
(
final
int
newColor
)
{
if
(
mSurfaceView
!
=
null
)
{
mSurfaceView
.
setBackgroundColor
(
newColor
)
;
}
}
public
void
setSession
(
final
GeckoSession
session
)
{
if
(
mSession
!
=
null
&
&
mSession
.
isOpen
(
)
)
{
throw
new
IllegalStateException
(
"
Current
session
is
open
"
)
;
}
if
(
mSession
!
=
null
)
{
mSession
.
removeDisplay
(
mDisplay
)
;
}
if
(
session
!
=
null
)
{
session
.
addDisplay
(
mDisplay
)
;
}
mSession
=
session
;
}
public
GeckoSession
getSession
(
)
{
return
mSession
;
}
public
EventDispatcher
getEventDispatcher
(
)
{
return
mSession
.
getEventDispatcher
(
)
;
}
public
GeckoSessionSettings
getSettings
(
)
{
return
mSession
.
getSettings
(
)
;
}
Override
public
void
onAttachedToWindow
(
)
{
if
(
mSession
=
=
null
)
{
setSession
(
new
GeckoSession
(
)
)
;
}
if
(
!
mSession
.
isOpen
(
)
)
{
mSession
.
openWindow
(
getContext
(
)
.
getApplicationContext
(
)
)
;
}
mSession
.
attachView
(
this
)
;
attachCompositor
(
mSession
)
;
super
.
onAttachedToWindow
(
)
;
}
Override
public
void
onDetachedFromWindow
(
)
{
super
.
onDetachedFromWindow
(
)
;
super
.
destroy
(
)
;
if
(
mStateSaved
)
{
return
;
}
if
(
mSession
!
=
null
&
&
mSession
.
isOpen
(
)
)
{
mSession
.
closeWindow
(
)
;
}
}
Override
protected
Parcelable
onSaveInstanceState
(
)
{
mStateSaved
=
true
;
return
new
SavedState
(
super
.
onSaveInstanceState
(
)
mSession
)
;
}
Override
protected
void
onRestoreInstanceState
(
final
Parcelable
state
)
{
mStateSaved
=
false
;
if
(
!
(
state
instanceof
SavedState
)
)
{
super
.
onRestoreInstanceState
(
state
)
;
return
;
}
final
SavedState
ss
=
(
SavedState
)
state
;
super
.
onRestoreInstanceState
(
ss
.
getSuperState
(
)
)
;
if
(
mSession
=
=
null
)
{
setSession
(
ss
.
session
)
;
}
else
if
(
ss
.
session
!
=
null
)
{
mSession
.
transferFrom
(
ss
.
session
)
;
}
}
void
setInputConnectionListener
(
final
InputConnectionListener
icl
)
{
mInputConnectionListener
=
icl
;
}
Override
public
void
onFocusChanged
(
boolean
gainFocus
int
direction
Rect
previouslyFocusedRect
)
{
super
.
onFocusChanged
(
gainFocus
direction
previouslyFocusedRect
)
;
if
(
!
gainFocus
|
|
mIsResettingFocus
)
{
return
;
}
post
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
if
(
!
isFocused
(
)
)
{
return
;
}
final
InputMethodManager
imm
=
InputMethods
.
getInputMethodManager
(
getContext
(
)
)
;
if
(
!
imm
.
isActive
(
GeckoView
.
this
)
)
{
mIsResettingFocus
=
true
;
clearFocus
(
)
;
requestFocus
(
)
;
mIsResettingFocus
=
false
;
}
}
}
)
;
}
Override
public
Handler
getHandler
(
)
{
if
(
mInputConnectionListener
!
=
null
)
{
return
mInputConnectionListener
.
getHandler
(
super
.
getHandler
(
)
)
;
}
return
super
.
getHandler
(
)
;
}
Override
public
InputConnection
onCreateInputConnection
(
EditorInfo
outAttrs
)
{
if
(
mInputConnectionListener
!
=
null
)
{
return
mInputConnectionListener
.
onCreateInputConnection
(
outAttrs
)
;
}
return
null
;
}
Override
public
boolean
onKeyPreIme
(
int
keyCode
KeyEvent
event
)
{
if
(
super
.
onKeyPreIme
(
keyCode
event
)
)
{
return
true
;
}
return
mInputConnectionListener
!
=
null
&
&
mInputConnectionListener
.
onKeyPreIme
(
keyCode
event
)
;
}
Override
public
boolean
onKeyUp
(
int
keyCode
KeyEvent
event
)
{
if
(
super
.
onKeyUp
(
keyCode
event
)
)
{
return
true
;
}
return
mInputConnectionListener
!
=
null
&
&
mInputConnectionListener
.
onKeyUp
(
keyCode
event
)
;
}
Override
public
boolean
onKeyDown
(
int
keyCode
KeyEvent
event
)
{
if
(
super
.
onKeyDown
(
keyCode
event
)
)
{
return
true
;
}
return
mInputConnectionListener
!
=
null
&
&
mInputConnectionListener
.
onKeyDown
(
keyCode
event
)
;
}
Override
public
boolean
onKeyLongPress
(
int
keyCode
KeyEvent
event
)
{
if
(
super
.
onKeyLongPress
(
keyCode
event
)
)
{
return
true
;
}
return
mInputConnectionListener
!
=
null
&
&
mInputConnectionListener
.
onKeyLongPress
(
keyCode
event
)
;
}
Override
public
boolean
onKeyMultiple
(
int
keyCode
int
repeatCount
KeyEvent
event
)
{
if
(
super
.
onKeyMultiple
(
keyCode
repeatCount
event
)
)
{
return
true
;
}
return
mInputConnectionListener
!
=
null
&
&
mInputConnectionListener
.
onKeyMultiple
(
keyCode
repeatCount
event
)
;
}
Override
public
boolean
isIMEEnabled
(
)
{
return
mInputConnectionListener
!
=
null
&
&
mInputConnectionListener
.
isIMEEnabled
(
)
;
}
}
