package
org
.
mozilla
.
geckoview
;
import
android
.
support
.
annotation
.
IntDef
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
util
.
Log
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
java
.
lang
.
ref
.
WeakReference
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
java
.
util
.
UUID
;
public
class
WebExtension
{
public
final
NonNull
String
location
;
public
final
NonNull
String
id
;
public
final
boolean
allowContentMessaging
;
final
NonNull
Map
<
String
MessageDelegate
>
messageDelegates
;
private
final
static
String
LOGTAG
=
"
WebExtension
"
;
public
WebExtension
(
final
NonNull
String
location
final
NonNull
String
id
final
boolean
allowContentMessaging
)
{
this
.
location
=
location
;
this
.
id
=
id
;
this
.
allowContentMessaging
=
allowContentMessaging
;
this
.
messageDelegates
=
new
HashMap
<
>
(
)
;
}
public
WebExtension
(
final
NonNull
String
location
)
{
this
(
location
"
{
"
+
UUID
.
randomUUID
(
)
.
toString
(
)
+
"
}
"
false
)
;
}
UiThread
public
void
setMessageDelegate
(
final
Nullable
MessageDelegate
messageDelegate
final
NonNull
String
nativeApp
)
{
if
(
messageDelegate
=
=
null
)
{
messageDelegates
.
remove
(
nativeApp
)
;
return
;
}
messageDelegates
.
put
(
nativeApp
messageDelegate
)
;
}
UiThread
public
interface
MessageDelegate
{
Nullable
default
GeckoResult
<
Object
>
onMessage
(
final
NonNull
Object
message
final
NonNull
MessageSender
sender
)
{
return
null
;
}
Nullable
default
void
onConnect
(
final
NonNull
Port
port
)
{
}
}
UiThread
public
interface
PortDelegate
{
default
void
onPortMessage
(
final
NonNull
Object
message
final
NonNull
Port
port
)
{
}
NonNull
default
void
onDisconnect
(
final
NonNull
Port
port
)
{
}
}
UiThread
public
static
class
Port
{
final
long
id
;
PortDelegate
delegate
;
boolean
disconnected
=
false
;
final
WeakReference
<
DisconnectDelegate
>
disconnectDelegate
;
public
NonNull
final
MessageSender
sender
;
public
NonNull
final
String
name
;
interface
DisconnectDelegate
{
void
onDisconnectFromApp
(
Port
port
)
;
}
protected
Port
(
)
{
this
.
id
=
-
1
;
this
.
delegate
=
null
;
this
.
disconnectDelegate
=
null
;
this
.
sender
=
null
;
this
.
name
=
null
;
}
Port
(
final
String
name
final
long
id
final
MessageSender
sender
final
DisconnectDelegate
disconnectDelegate
)
{
this
.
id
=
id
;
this
.
delegate
=
NULL_PORT_DELEGATE
;
this
.
disconnectDelegate
=
new
WeakReference
<
>
(
disconnectDelegate
)
;
this
.
sender
=
sender
;
this
.
name
=
name
;
}
public
void
postMessage
(
final
NonNull
JSONObject
message
)
{
GeckoBundle
args
=
new
GeckoBundle
(
2
)
;
args
.
putLong
(
"
portId
"
id
)
;
try
{
args
.
putBundle
(
"
message
"
GeckoBundle
.
fromJSONObject
(
message
)
)
;
}
catch
(
JSONException
ex
)
{
throw
new
RuntimeException
(
ex
)
;
}
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
WebExtension
:
PortMessageFromApp
"
args
)
;
}
public
void
disconnect
(
)
{
if
(
this
.
disconnected
)
{
return
;
}
DisconnectDelegate
disconnectDelegate
=
this
.
disconnectDelegate
.
get
(
)
;
if
(
disconnectDelegate
!
=
null
)
{
disconnectDelegate
.
onDisconnectFromApp
(
this
)
;
}
GeckoBundle
args
=
new
GeckoBundle
(
1
)
;
args
.
putLong
(
"
portId
"
id
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
WebExtension
:
PortDisconnect
"
args
)
;
this
.
disconnected
=
true
;
}
public
void
setDelegate
(
final
Nullable
PortDelegate
delegate
)
{
if
(
delegate
!
=
null
)
{
this
.
delegate
=
delegate
;
}
else
{
this
.
delegate
=
NULL_PORT_DELEGATE
;
}
}
}
static
final
WebExtension
.
PortDelegate
NULL_PORT_DELEGATE
=
new
WebExtension
.
PortDelegate
(
)
{
Override
public
void
onPortMessage
(
final
NonNull
Object
message
final
NonNull
Port
port
)
{
Log
.
d
(
LOGTAG
"
Unhandled
message
from
"
+
port
.
sender
.
webExtension
.
id
+
"
:
"
+
message
.
toString
(
)
)
;
}
NonNull
Override
public
void
onDisconnect
(
final
NonNull
Port
port
)
{
Log
.
d
(
LOGTAG
"
Unhandled
disconnect
from
"
+
port
.
sender
.
webExtension
.
id
)
;
}
}
;
UiThread
public
static
class
MessageSender
{
public
final
NonNull
WebExtension
webExtension
;
public
final
Nullable
GeckoSession
session
;
IntDef
(
{
ENV_TYPE_UNKNOWN
ENV_TYPE_EXTENSION
ENV_TYPE_CONTENT_SCRIPT
}
)
interface
EnvType
{
}
static
final
int
ENV_TYPE_UNKNOWN
=
0
;
public
static
final
int
ENV_TYPE_EXTENSION
=
1
;
public
static
final
int
ENV_TYPE_CONTENT_SCRIPT
=
2
;
public
final
EnvType
int
environmentType
;
public
final
NonNull
String
url
;
final
boolean
isTopLevel
;
MessageSender
(
final
NonNull
WebExtension
webExtension
final
Nullable
GeckoSession
session
final
Nullable
String
url
final
EnvType
int
environmentType
final
boolean
isTopLevel
)
{
this
.
webExtension
=
webExtension
;
this
.
session
=
session
;
this
.
isTopLevel
=
isTopLevel
;
this
.
url
=
url
;
this
.
environmentType
=
environmentType
;
}
protected
MessageSender
(
)
{
this
.
webExtension
=
null
;
this
.
session
=
null
;
this
.
isTopLevel
=
false
;
this
.
url
=
null
;
this
.
environmentType
=
ENV_TYPE_UNKNOWN
;
}
public
boolean
isTopLevel
(
)
{
return
this
.
isTopLevel
;
}
}
private
static
final
MessageDelegate
NULL_MESSAGE_DELEGATE
=
new
MessageDelegate
(
)
{
Override
public
GeckoResult
<
Object
>
onMessage
(
final
NonNull
Object
message
final
NonNull
MessageSender
sender
)
{
Log
.
d
(
LOGTAG
"
Unhandled
message
from
"
+
sender
.
webExtension
.
id
+
"
:
"
+
message
.
toString
(
)
)
;
return
null
;
}
Override
public
void
onConnect
(
final
NonNull
Port
port
)
{
Log
.
d
(
LOGTAG
"
Unhandled
connect
request
from
"
+
port
.
sender
.
webExtension
.
id
)
;
}
}
;
}
