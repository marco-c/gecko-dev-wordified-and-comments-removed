package
org
.
mozilla
.
gecko
.
util
;
import
org
.
mozilla
.
gecko
.
annotation
.
RobocopTarget
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
json
.
JSONArray
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
android
.
support
.
v4
.
util
.
SimpleArrayMap
;
import
java
.
lang
.
reflect
.
Array
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Set
;
RobocopTarget
public
final
class
GeckoBundle
{
private
static
final
String
LOGTAG
=
"
GeckoBundle
"
;
private
static
final
boolean
DEBUG
=
false
;
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
static
final
boolean
[
]
EMPTY_BOOLEAN_ARRAY
=
new
boolean
[
0
]
;
private
static
final
int
[
]
EMPTY_INT_ARRAY
=
new
int
[
0
]
;
private
static
final
double
[
]
EMPTY_DOUBLE_ARRAY
=
new
double
[
0
]
;
private
static
final
String
[
]
EMPTY_STRING_ARRAY
=
new
String
[
0
]
;
private
static
final
GeckoBundle
[
]
EMPTY_BUNDLE_ARRAY
=
new
GeckoBundle
[
0
]
;
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
static
Object
box
(
boolean
b
)
{
return
b
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
static
Object
box
(
int
i
)
{
return
i
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
static
Object
box
(
double
d
)
{
return
d
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
static
boolean
unboxBoolean
(
Boolean
b
)
{
return
b
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
static
int
unboxInteger
(
Integer
i
)
{
return
i
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
static
double
unboxDouble
(
Double
d
)
{
return
d
;
}
private
SimpleArrayMap
<
String
Object
>
mMap
;
public
GeckoBundle
(
)
{
mMap
=
new
SimpleArrayMap
<
>
(
)
;
}
public
GeckoBundle
(
final
int
capacity
)
{
mMap
=
new
SimpleArrayMap
<
>
(
capacity
)
;
}
public
GeckoBundle
(
final
GeckoBundle
bundle
)
{
mMap
=
new
SimpleArrayMap
<
>
(
bundle
.
mMap
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
GeckoBundle
(
final
String
[
]
keys
final
Object
[
]
values
)
{
final
int
len
=
keys
.
length
;
mMap
=
new
SimpleArrayMap
<
>
(
len
)
;
for
(
int
i
=
0
;
i
<
len
;
i
+
+
)
{
mMap
.
put
(
keys
[
i
]
values
[
i
]
)
;
}
}
public
void
clear
(
)
{
mMap
.
clear
(
)
;
}
public
boolean
containsKey
(
final
String
key
)
{
return
mMap
.
containsKey
(
key
)
&
&
mMap
.
get
(
key
)
!
=
null
;
}
public
Object
get
(
final
String
key
)
{
return
mMap
.
get
(
key
)
;
}
public
boolean
getBoolean
(
final
String
key
final
boolean
defaultValue
)
{
final
Object
value
=
mMap
.
get
(
key
)
;
return
value
=
=
null
?
defaultValue
:
(
Boolean
)
value
;
}
public
boolean
getBoolean
(
final
String
key
)
{
return
getBoolean
(
key
false
)
;
}
public
boolean
[
]
getBooleanArray
(
final
String
key
)
{
final
Object
value
=
mMap
.
get
(
key
)
;
return
value
=
=
null
?
null
:
Array
.
getLength
(
value
)
=
=
0
?
EMPTY_BOOLEAN_ARRAY
:
(
boolean
[
]
)
value
;
}
public
double
getDouble
(
final
String
key
final
double
defaultValue
)
{
final
Object
value
=
mMap
.
get
(
key
)
;
return
value
=
=
null
?
defaultValue
:
(
(
Number
)
value
)
.
doubleValue
(
)
;
}
public
double
getDouble
(
final
String
key
)
{
return
getDouble
(
key
0
.
0
)
;
}
private
double
[
]
getDoubleArray
(
final
int
[
]
array
)
{
final
int
len
=
array
.
length
;
final
double
[
]
ret
=
new
double
[
len
]
;
for
(
int
i
=
0
;
i
<
len
;
i
+
+
)
{
ret
[
i
]
=
(
double
)
array
[
i
]
;
}
return
ret
;
}
public
double
[
]
getDoubleArray
(
final
String
key
)
{
final
Object
value
=
mMap
.
get
(
key
)
;
return
value
=
=
null
?
null
:
Array
.
getLength
(
value
)
=
=
0
?
EMPTY_DOUBLE_ARRAY
:
value
instanceof
int
[
]
?
getDoubleArray
(
(
int
[
]
)
value
)
:
(
double
[
]
)
value
;
}
public
int
getInt
(
final
String
key
final
int
defaultValue
)
{
final
Object
value
=
mMap
.
get
(
key
)
;
return
value
=
=
null
?
defaultValue
:
(
(
Number
)
value
)
.
intValue
(
)
;
}
public
int
getInt
(
final
String
key
)
{
return
getInt
(
key
0
)
;
}
private
int
[
]
getIntArray
(
final
double
[
]
array
)
{
final
int
len
=
array
.
length
;
final
int
[
]
ret
=
new
int
[
len
]
;
for
(
int
i
=
0
;
i
<
len
;
i
+
+
)
{
ret
[
i
]
=
(
int
)
array
[
i
]
;
}
return
ret
;
}
public
int
[
]
getIntArray
(
final
String
key
)
{
final
Object
value
=
mMap
.
get
(
key
)
;
return
value
=
=
null
?
null
:
Array
.
getLength
(
value
)
=
=
0
?
EMPTY_INT_ARRAY
:
value
instanceof
double
[
]
?
getIntArray
(
(
double
[
]
)
value
)
:
(
int
[
]
)
value
;
}
public
String
getString
(
final
String
key
final
String
defaultValue
)
{
final
Object
value
=
mMap
.
get
(
key
)
;
return
value
=
=
null
?
defaultValue
:
(
String
)
value
;
}
public
String
getString
(
final
String
key
)
{
return
getString
(
key
null
)
;
}
private
int
getNullArrayLength
(
final
Object
array
)
{
final
int
len
=
Array
.
getLength
(
array
)
;
for
(
int
i
=
0
;
i
<
len
;
i
+
+
)
{
if
(
Array
.
get
(
array
i
)
!
=
null
)
{
throw
new
ClassCastException
(
"
Cannot
cast
array
type
"
)
;
}
}
return
len
;
}
public
String
[
]
getStringArray
(
final
String
key
)
{
final
Object
value
=
mMap
.
get
(
key
)
;
return
value
=
=
null
?
null
:
Array
.
getLength
(
value
)
=
=
0
?
EMPTY_STRING_ARRAY
:
!
(
value
instanceof
String
[
]
)
?
new
String
[
getNullArrayLength
(
value
)
]
:
(
String
[
]
)
value
;
}
public
GeckoBundle
getBundle
(
final
String
key
)
{
return
(
GeckoBundle
)
mMap
.
get
(
key
)
;
}
public
GeckoBundle
[
]
getBundleArray
(
final
String
key
)
{
final
Object
value
=
mMap
.
get
(
key
)
;
return
value
=
=
null
?
null
:
Array
.
getLength
(
value
)
=
=
0
?
EMPTY_BUNDLE_ARRAY
:
!
(
value
instanceof
GeckoBundle
[
]
)
?
new
GeckoBundle
[
getNullArrayLength
(
value
)
]
:
(
GeckoBundle
[
]
)
value
;
}
public
boolean
isEmpty
(
)
{
return
mMap
.
isEmpty
(
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
public
String
[
]
keys
(
)
{
final
int
len
=
mMap
.
size
(
)
;
final
String
[
]
ret
=
new
String
[
len
]
;
for
(
int
i
=
0
;
i
<
len
;
i
+
+
)
{
ret
[
i
]
=
mMap
.
keyAt
(
i
)
;
}
return
ret
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
Object
[
]
values
(
)
{
final
int
len
=
mMap
.
size
(
)
;
final
Object
[
]
ret
=
new
Object
[
len
]
;
for
(
int
i
=
0
;
i
<
len
;
i
+
+
)
{
ret
[
i
]
=
mMap
.
valueAt
(
i
)
;
}
return
ret
;
}
public
void
put
(
final
String
key
final
Object
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putBoolean
(
final
String
key
final
boolean
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putBooleanArray
(
final
String
key
final
boolean
[
]
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putBooleanArray
(
final
String
key
final
Boolean
[
]
value
)
{
if
(
value
=
=
null
)
{
mMap
.
put
(
key
null
)
;
return
;
}
final
boolean
[
]
array
=
new
boolean
[
value
.
length
]
;
for
(
int
i
=
0
;
i
<
value
.
length
;
i
+
+
)
{
array
[
i
]
=
value
[
i
]
;
}
mMap
.
put
(
key
array
)
;
}
public
void
putBooleanArray
(
final
String
key
final
Collection
<
Boolean
>
value
)
{
if
(
value
=
=
null
)
{
mMap
.
put
(
key
null
)
;
return
;
}
final
boolean
[
]
array
=
new
boolean
[
value
.
size
(
)
]
;
int
i
=
0
;
for
(
final
Boolean
element
:
value
)
{
array
[
i
+
+
]
=
element
;
}
mMap
.
put
(
key
array
)
;
}
public
void
putDouble
(
final
String
key
final
double
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putDoubleArray
(
final
String
key
final
double
[
]
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putDoubleArray
(
final
String
key
final
Double
[
]
value
)
{
if
(
value
=
=
null
)
{
mMap
.
put
(
key
null
)
;
return
;
}
final
double
[
]
array
=
new
double
[
value
.
length
]
;
for
(
int
i
=
0
;
i
<
value
.
length
;
i
+
+
)
{
array
[
i
]
=
value
[
i
]
;
}
mMap
.
put
(
key
array
)
;
}
public
void
putDoubleArray
(
final
String
key
final
Collection
<
Double
>
value
)
{
if
(
value
=
=
null
)
{
mMap
.
put
(
key
null
)
;
return
;
}
final
double
[
]
array
=
new
double
[
value
.
size
(
)
]
;
int
i
=
0
;
for
(
final
Double
element
:
value
)
{
array
[
i
+
+
]
=
element
;
}
mMap
.
put
(
key
array
)
;
}
public
void
putInt
(
final
String
key
final
int
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putIntArray
(
final
String
key
final
int
[
]
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putIntArray
(
final
String
key
final
Integer
[
]
value
)
{
if
(
value
=
=
null
)
{
mMap
.
put
(
key
null
)
;
return
;
}
final
int
[
]
array
=
new
int
[
value
.
length
]
;
for
(
int
i
=
0
;
i
<
value
.
length
;
i
+
+
)
{
array
[
i
]
=
value
[
i
]
;
}
mMap
.
put
(
key
array
)
;
}
public
void
putIntArray
(
final
String
key
final
Collection
<
Integer
>
value
)
{
if
(
value
=
=
null
)
{
mMap
.
put
(
key
null
)
;
return
;
}
final
int
[
]
array
=
new
int
[
value
.
size
(
)
]
;
int
i
=
0
;
for
(
final
Integer
element
:
value
)
{
array
[
i
+
+
]
=
element
;
}
mMap
.
put
(
key
array
)
;
}
public
void
putString
(
final
String
key
final
String
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putStringArray
(
final
String
key
final
String
[
]
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putStringArray
(
final
String
key
final
Collection
<
String
>
value
)
{
if
(
value
=
=
null
)
{
mMap
.
put
(
key
null
)
;
return
;
}
final
String
[
]
array
=
new
String
[
value
.
size
(
)
]
;
int
i
=
0
;
for
(
final
String
element
:
value
)
{
array
[
i
+
+
]
=
element
;
}
mMap
.
put
(
key
array
)
;
}
public
void
putBundle
(
final
String
key
final
GeckoBundle
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putBundleArray
(
final
String
key
final
GeckoBundle
[
]
value
)
{
mMap
.
put
(
key
value
)
;
}
public
void
putBundleArray
(
final
String
key
final
Collection
<
GeckoBundle
>
value
)
{
if
(
value
=
=
null
)
{
mMap
.
put
(
key
null
)
;
return
;
}
final
GeckoBundle
[
]
array
=
new
GeckoBundle
[
value
.
size
(
)
]
;
int
i
=
0
;
for
(
final
GeckoBundle
element
:
value
)
{
array
[
i
+
+
]
=
element
;
}
mMap
.
put
(
key
array
)
;
}
public
void
remove
(
final
String
key
)
{
mMap
.
remove
(
key
)
;
}
public
int
size
(
)
{
return
mMap
.
size
(
)
;
}
private
static
Object
fromJSONValue
(
Object
value
)
throws
JSONException
{
if
(
value
instanceof
JSONObject
|
|
value
=
=
JSONObject
.
NULL
)
{
return
fromJSONObject
(
(
JSONObject
)
value
)
;
}
if
(
value
instanceof
JSONArray
)
{
final
JSONArray
array
=
(
JSONArray
)
value
;
final
int
len
=
array
.
length
(
)
;
if
(
len
=
=
0
)
{
return
EMPTY_BOOLEAN_ARRAY
;
}
Object
out
=
null
;
for
(
int
i
=
0
;
i
<
len
;
i
+
+
)
{
final
Object
element
=
fromJSONValue
(
array
.
opt
(
i
)
)
;
if
(
element
=
=
null
)
{
continue
;
}
if
(
out
=
=
null
)
{
Class
<
?
>
type
=
element
.
getClass
(
)
;
if
(
type
=
=
Boolean
.
class
)
{
type
=
boolean
.
class
;
}
else
if
(
type
=
=
Integer
.
class
)
{
type
=
int
.
class
;
}
else
if
(
type
=
=
Double
.
class
)
{
type
=
double
.
class
;
}
out
=
Array
.
newInstance
(
type
len
)
;
}
Array
.
set
(
out
i
element
)
;
}
if
(
out
=
=
null
)
{
return
new
String
[
len
]
;
}
return
out
;
}
if
(
value
instanceof
Boolean
)
{
return
value
;
}
if
(
value
instanceof
Byte
|
|
value
instanceof
Short
|
|
value
instanceof
Integer
)
{
return
(
(
Number
)
value
)
.
intValue
(
)
;
}
if
(
value
instanceof
Float
|
|
value
instanceof
Double
|
|
value
instanceof
Long
)
{
return
(
(
Number
)
value
)
.
doubleValue
(
)
;
}
return
value
!
=
null
?
value
.
toString
(
)
:
null
;
}
public
static
GeckoBundle
fromJSONObject
(
final
JSONObject
obj
)
throws
JSONException
{
if
(
obj
=
=
null
|
|
obj
=
=
JSONObject
.
NULL
)
{
return
null
;
}
final
String
[
]
keys
=
new
String
[
obj
.
length
(
)
]
;
final
Object
[
]
values
=
new
Object
[
obj
.
length
(
)
]
;
final
Iterator
<
String
>
iter
=
obj
.
keys
(
)
;
for
(
int
i
=
0
;
iter
.
hasNext
(
)
;
i
+
+
)
{
final
String
key
=
iter
.
next
(
)
;
keys
[
i
]
=
key
;
values
[
i
]
=
fromJSONValue
(
obj
.
opt
(
key
)
)
;
}
return
new
GeckoBundle
(
keys
values
)
;
}
}
