package
org
.
mozilla
.
geckoview
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
android
.
util
.
Log
;
abstract
class
GeckoSessionHandler
<
Delegate
>
implements
BundleEventListener
{
private
static
final
String
LOGTAG
=
"
GeckoSessionHandler
"
;
private
static
final
boolean
DEBUG
=
false
;
private
final
String
mModuleName
;
private
final
String
[
]
mEvents
;
private
Delegate
mDelegate
;
private
boolean
mRegisteredListeners
;
GeckoSessionHandler
(
final
String
module
final
GeckoSession
session
final
String
[
]
events
)
{
session
.
handlersCount
+
+
;
mModuleName
=
module
;
mEvents
=
events
;
}
public
Delegate
getDelegate
(
)
{
return
mDelegate
;
}
public
void
setDelegate
(
final
Delegate
delegate
final
GeckoSession
session
)
{
if
(
mDelegate
=
=
delegate
)
{
return
;
}
mDelegate
=
delegate
;
if
(
!
mRegisteredListeners
&
&
delegate
!
=
null
)
{
session
.
getEventDispatcher
(
)
.
registerUiThreadListener
(
this
mEvents
)
;
mRegisteredListeners
=
true
;
}
if
(
!
session
.
isOpen
(
)
)
{
return
;
}
final
GeckoBundle
msg
=
new
GeckoBundle
(
2
)
;
msg
.
putString
(
"
module
"
mModuleName
)
;
msg
.
putBoolean
(
"
enabled
"
isEnabled
(
)
)
;
session
.
getEventDispatcher
(
)
.
dispatch
(
"
GeckoView
:
UpdateModuleState
"
msg
)
;
}
public
String
getName
(
)
{
return
mModuleName
;
}
public
boolean
isEnabled
(
)
{
return
mDelegate
!
=
null
;
}
Override
public
void
handleMessage
(
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
mModuleName
+
"
handleMessage
:
event
=
"
+
event
)
;
}
if
(
mDelegate
!
=
null
)
{
handleMessage
(
mDelegate
event
message
callback
)
;
}
else
if
(
callback
!
=
null
)
{
callback
.
sendError
(
"
No
delegate
registered
"
)
;
}
}
protected
abstract
void
handleMessage
(
final
Delegate
delegate
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
;
}
