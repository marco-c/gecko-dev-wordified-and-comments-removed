package
org
.
mozilla
.
geckoview
;
import
android
.
util
.
Log
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
UiThread
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
public
class
CrashPullController
{
private
static
final
String
LOGTAG
=
"
CrashPull
"
;
public
interface
Delegate
{
UiThread
default
void
onCrashPull
(
NonNull
final
String
[
]
crashIDs
)
{
}
}
static
final
class
CrashPullProxy
implements
BundleEventListener
{
private
static
final
String
CRASH_PULL_EVENT
=
"
GeckoView
:
RemoteSettingsCrashPull
"
;
public
CrashPullProxy
(
)
{
}
private
Nullable
Delegate
mDelegate
;
public
synchronized
void
setDelegate
(
final
Nullable
Delegate
delegate
)
{
if
(
mDelegate
=
=
delegate
)
{
return
;
}
if
(
mDelegate
!
=
null
)
{
unregisterListener
(
)
;
}
mDelegate
=
delegate
;
if
(
mDelegate
!
=
null
)
{
registerListener
(
)
;
}
}
public
synchronized
Nullable
Delegate
getDelegate
(
)
{
return
mDelegate
;
}
private
void
registerListener
(
)
{
Log
.
d
(
LOGTAG
"
registerListener
"
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
CrashPullController
.
Delegate
:
Attached
"
null
)
;
EventDispatcher
.
getInstance
(
)
.
registerUiThreadListener
(
this
CRASH_PULL_EVENT
)
;
}
private
void
unregisterListener
(
)
{
Log
.
d
(
LOGTAG
"
unregisterListener
"
)
;
EventDispatcher
.
getInstance
(
)
.
unregisterUiThreadListener
(
this
CRASH_PULL_EVENT
)
;
}
Override
public
synchronized
void
handleMessage
(
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
Log
.
d
(
LOGTAG
"
handleMessage
"
+
event
)
;
if
(
mDelegate
=
=
null
)
{
if
(
callback
!
=
null
)
{
callback
.
sendError
(
"
No
delegate
attached
"
)
;
}
return
;
}
if
(
CRASH_PULL_EVENT
.
equals
(
event
)
)
{
final
String
[
]
crashIDs
=
message
.
getStringArray
(
"
crashIDs
"
)
;
Log
.
d
(
LOGTAG
"
Adding
crashIDs
:
"
+
crashIDs
)
;
if
(
crashIDs
!
=
null
)
{
mDelegate
.
onCrashPull
(
crashIDs
)
;
}
}
}
}
}
