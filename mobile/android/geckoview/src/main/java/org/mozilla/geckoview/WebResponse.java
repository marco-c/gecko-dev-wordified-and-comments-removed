package
org
.
mozilla
.
geckoview
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
android
.
support
.
annotation
.
AnyThread
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
InputStream
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
nio
.
charset
.
Charset
;
import
java
.
util
.
concurrent
.
ExecutorService
;
import
java
.
util
.
concurrent
.
Executors
;
WrapForJNI
AnyThread
public
class
WebResponse
extends
WebMessage
{
private
static
final
ExecutorService
sExecutorService
=
Executors
.
newCachedThreadPool
(
)
;
private
static
final
int
BUFSIZE
=
8192
;
public
final
int
statusCode
;
public
final
boolean
redirected
;
public
final
Nullable
InputStream
body
;
protected
WebResponse
(
final
NonNull
Builder
builder
)
{
super
(
builder
)
;
this
.
statusCode
=
builder
.
mStatusCode
;
this
.
redirected
=
builder
.
mRedirected
;
this
.
body
=
builder
.
mBody
;
}
public
NonNull
GeckoResult
<
byte
[
]
>
byteArray
(
)
{
if
(
body
=
=
null
)
{
return
GeckoResult
.
fromValue
(
new
byte
[
0
]
)
;
}
final
GeckoResult
<
byte
[
]
>
result
=
new
GeckoResult
<
>
(
)
;
sExecutorService
.
submit
(
(
)
-
>
{
final
ByteArrayOutputStream
os
=
new
ByteArrayOutputStream
(
)
;
final
byte
buf
[
]
=
new
byte
[
BUFSIZE
]
;
int
count
;
try
{
while
(
(
count
=
body
.
read
(
buf
)
)
>
0
)
{
os
.
write
(
buf
0
count
)
;
}
os
.
flush
(
)
;
result
.
complete
(
os
.
toByteArray
(
)
)
;
}
catch
(
Exception
e
)
{
result
.
completeExceptionally
(
e
)
;
}
}
)
;
return
result
;
}
public
NonNull
GeckoResult
<
String
>
text
(
)
{
final
GeckoResult
<
String
>
result
=
new
GeckoResult
<
>
(
)
;
sExecutorService
.
submit
(
(
)
-
>
{
try
{
final
ByteBuffer
bytes
=
ByteBuffer
.
wrap
(
byteArray
(
)
.
poll
(
)
)
;
result
.
complete
(
Charset
.
forName
(
"
UTF
-
8
"
)
.
decode
(
bytes
)
.
toString
(
)
)
;
}
catch
(
Throwable
t
)
{
result
.
completeExceptionally
(
t
)
;
}
}
)
;
return
result
;
}
public
NonNull
GeckoResult
<
JSONObject
>
json
(
)
{
final
GeckoResult
<
JSONObject
>
result
=
new
GeckoResult
<
>
(
)
;
sExecutorService
.
submit
(
(
)
-
>
{
try
{
result
.
complete
(
new
JSONObject
(
text
(
)
.
poll
(
)
)
)
;
}
catch
(
Throwable
t
)
{
result
.
completeExceptionally
(
t
)
;
}
}
)
;
return
result
;
}
WrapForJNI
AnyThread
public
static
class
Builder
extends
WebMessage
.
Builder
{
int
mStatusCode
;
boolean
mRedirected
;
InputStream
mBody
;
public
Builder
(
final
NonNull
String
uri
)
{
super
(
uri
)
;
}
Override
public
NonNull
Builder
uri
(
final
NonNull
String
uri
)
{
super
.
uri
(
uri
)
;
return
this
;
}
Override
public
NonNull
Builder
header
(
final
NonNull
String
key
final
NonNull
String
value
)
{
super
.
header
(
key
value
)
;
return
this
;
}
Override
public
NonNull
Builder
addHeader
(
final
NonNull
String
key
final
NonNull
String
value
)
{
super
.
addHeader
(
key
value
)
;
return
this
;
}
public
NonNull
Builder
body
(
final
NonNull
InputStream
stream
)
{
mBody
=
stream
;
return
this
;
}
public
NonNull
Builder
statusCode
(
int
code
)
{
mStatusCode
=
code
;
return
this
;
}
public
NonNull
Builder
redirected
(
final
boolean
redirected
)
{
mRedirected
=
redirected
;
return
this
;
}
public
NonNull
WebResponse
build
(
)
{
return
new
WebResponse
(
this
)
;
}
}
}
