package
org
.
mozilla
.
gecko
.
process
;
import
android
.
content
.
ComponentCallbacks2
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
util
.
Log
;
import
androidx
.
annotation
.
NonNull
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
public
class
MemoryController
implements
ComponentCallbacks2
{
private
static
final
String
LOGTAG
=
"
MemoryController
"
;
private
long
mLastLowMemoryNotificationTime
=
0
;
private
static
final
long
LOW_MEMORY_ONGOING_RESET_TIME_MS
=
10000
;
private
static
final
int
LOW
=
0
;
private
static
final
int
MODERATE
=
1
;
private
static
final
int
CRITICAL
=
2
;
private
int
memoryLevelFromTrim
(
final
int
level
)
{
if
(
level
>
=
ComponentCallbacks2
.
TRIM_MEMORY_COMPLETE
|
|
level
=
=
ComponentCallbacks2
.
TRIM_MEMORY_RUNNING_CRITICAL
)
{
return
CRITICAL
;
}
else
if
(
level
>
=
ComponentCallbacks2
.
TRIM_MEMORY_BACKGROUND
)
{
return
MODERATE
;
}
return
LOW
;
}
public
void
onTrimMemory
(
final
int
level
)
{
Log
.
i
(
LOGTAG
"
onTrimMemory
(
"
+
level
+
"
)
"
)
;
onMemoryNotification
(
memoryLevelFromTrim
(
level
)
)
;
}
Override
public
void
onConfigurationChanged
(
final
NonNull
Configuration
newConfig
)
{
}
public
void
onLowMemory
(
)
{
Log
.
i
(
LOGTAG
"
onLowMemory
"
)
;
onMemoryNotification
(
CRITICAL
)
;
}
private
void
onMemoryNotification
(
final
int
level
)
{
if
(
level
=
=
LOW
)
{
return
;
}
final
String
observerArg
;
final
long
currentNotificationTime
=
System
.
currentTimeMillis
(
)
;
if
(
level
=
=
CRITICAL
|
|
(
currentNotificationTime
-
mLastLowMemoryNotificationTime
)
>
=
LOW_MEMORY_ONGOING_RESET_TIME_MS
)
{
observerArg
=
"
low
-
memory
"
;
mLastLowMemoryNotificationTime
=
currentNotificationTime
;
}
else
{
observerArg
=
"
low
-
memory
-
ongoing
"
;
}
GeckoAppShell
.
notifyObservers
(
"
memory
-
pressure
"
observerArg
)
;
}
}
