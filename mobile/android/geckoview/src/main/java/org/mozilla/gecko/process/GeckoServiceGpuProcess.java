package
org
.
mozilla
.
gecko
.
process
;
import
android
.
os
.
Binder
;
import
android
.
util
.
SparseArray
;
import
android
.
view
.
Surface
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
gfx
.
ICompositorSurfaceManager
;
public
class
GeckoServiceGpuProcess
extends
GeckoServiceChildProcess
{
private
static
final
String
LOGTAG
=
"
ServiceGpuProcess
"
;
private
static
final
class
GpuProcessBinder
extends
GeckoServiceChildProcess
.
ChildProcessBinder
{
Override
public
ICompositorSurfaceManager
getCompositorSurfaceManager
(
)
{
return
RemoteCompositorSurfaceManager
.
getInstance
(
)
;
}
}
Override
protected
Binder
createBinder
(
)
{
return
new
GpuProcessBinder
(
)
;
}
public
static
final
class
RemoteCompositorSurfaceManager
extends
ICompositorSurfaceManager
.
Stub
{
private
static
RemoteCompositorSurfaceManager
mInstance
;
WrapForJNI
private
static
synchronized
RemoteCompositorSurfaceManager
getInstance
(
)
{
if
(
mInstance
=
=
null
)
{
mInstance
=
new
RemoteCompositorSurfaceManager
(
)
;
}
return
mInstance
;
}
private
final
SparseArray
<
Surface
>
mSurfaces
=
new
SparseArray
<
Surface
>
(
)
;
Override
public
synchronized
void
onSurfaceChanged
(
final
int
widgetId
final
Surface
surface
)
{
if
(
surface
!
=
null
)
{
mSurfaces
.
put
(
widgetId
surface
)
;
}
else
{
mSurfaces
.
remove
(
widgetId
)
;
}
}
WrapForJNI
public
synchronized
Surface
getCompositorSurface
(
final
int
widgetId
)
{
return
mSurfaces
.
get
(
widgetId
)
;
}
}
}
