package
org
.
mozilla
.
geckoview
;
import
android
.
util
.
Log
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
StringDef
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
List
;
import
java
.
util
.
Objects
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
public
class
TranslationsController
{
private
static
final
boolean
DEBUG
=
false
;
private
static
final
String
LOGTAG
=
"
TranslationsController
"
;
public
static
class
RuntimeTranslation
{
private
static
final
String
ENGINE_SUPPORTED_EVENT
=
"
GeckoView
:
Translations
:
IsTranslationEngineSupported
"
;
private
static
final
String
PREFERRED_LANGUAGES_EVENT
=
"
GeckoView
:
Translations
:
PreferredLanguages
"
;
private
static
final
String
MANAGE_MODEL_EVENT
=
"
GeckoView
:
Translations
:
ManageModel
"
;
private
static
final
String
TRANSLATION_INFORMATION_EVENT
=
"
GeckoView
:
Translations
:
TranslationInformation
"
;
private
static
final
String
MODEL_INFORMATION_EVENT
=
"
GeckoView
:
Translations
:
ModelInformation
"
;
AnyThread
public
static
NonNull
GeckoResult
<
Boolean
>
isTranslationsEngineSupported
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Requesting
if
the
translations
engine
supports
the
device
.
"
)
;
}
return
EventDispatcher
.
getInstance
(
)
.
queryBoolean
(
ENGINE_SUPPORTED_EVENT
)
;
}
AnyThread
public
static
NonNull
GeckoResult
<
List
<
String
>
>
preferredLanguages
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Requesting
the
user
'
s
preferred
languages
.
"
)
;
}
return
EventDispatcher
.
getInstance
(
)
.
queryBundle
(
PREFERRED_LANGUAGES_EVENT
)
.
map
(
bundle
-
>
{
try
{
final
String
[
]
languages
=
bundle
.
getStringArray
(
"
preferredLanguages
"
)
;
if
(
languages
!
=
null
)
{
return
Arrays
.
asList
(
languages
)
;
}
}
catch
(
final
Exception
e
)
{
Log
.
w
(
LOGTAG
"
Could
not
deserialize
preferredLanguages
:
"
+
e
)
;
return
null
;
}
return
null
;
}
)
;
}
AnyThread
public
static
NonNull
GeckoResult
<
Void
>
manageLanguageModel
(
final
NonNull
ModelManagementOptions
options
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Requesting
management
of
the
language
model
.
"
)
;
}
return
EventDispatcher
.
getInstance
(
)
.
queryVoid
(
MANAGE_MODEL_EVENT
options
.
toBundle
(
)
)
;
}
AnyThread
public
static
NonNull
GeckoResult
<
TranslationSupport
>
listSupportedLanguages
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Requesting
information
on
the
language
options
.
"
)
;
}
return
EventDispatcher
.
getInstance
(
)
.
queryBundle
(
TRANSLATION_INFORMATION_EVENT
)
.
map
(
bundle
-
>
{
return
TranslationSupport
.
fromBundle
(
bundle
)
;
}
)
;
}
AnyThread
public
static
NonNull
GeckoResult
<
Long
>
checkPairDownloadSize
(
NonNull
final
String
fromLanguage
NonNull
final
String
toLanguage
)
{
final
GeckoResult
<
Long
>
result
=
new
GeckoResult
<
>
(
)
;
result
.
completeExceptionally
(
new
UnsupportedOperationException
(
"
Will
be
implemented
in
Bug
1854691
.
"
)
)
;
return
result
;
}
AnyThread
public
static
NonNull
GeckoResult
<
Long
>
checkPairDownloadSize
(
NonNull
final
SessionTranslation
.
TranslationPair
pair
)
{
return
checkPairDownloadSize
(
pair
.
fromLanguage
pair
.
toLanguage
)
;
}
AnyThread
public
static
NonNull
GeckoResult
<
List
<
LanguageModel
>
>
listModelDownloadStates
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Requesting
information
on
the
language
model
.
"
)
;
}
return
EventDispatcher
.
getInstance
(
)
.
queryBundle
(
MODEL_INFORMATION_EVENT
)
.
map
(
bundle
-
>
{
try
{
final
GeckoBundle
[
]
models
=
bundle
.
getBundleArray
(
"
models
"
)
;
if
(
models
!
=
null
)
{
final
List
<
LanguageModel
>
list
=
new
ArrayList
<
>
(
)
;
for
(
final
var
item
:
models
)
{
list
.
add
(
LanguageModel
.
fromBundle
(
item
)
)
;
}
return
list
;
}
}
catch
(
final
Exception
e
)
{
Log
.
d
(
LOGTAG
"
Could
not
deserialize
the
model
states
.
"
)
;
return
null
;
}
return
null
;
}
)
;
}
AnyThread
public
static
class
ModelManagementOptions
{
public
final
Nullable
String
language
;
public
final
NonNull
ModelOperation
String
operation
;
public
final
NonNull
OperationLevel
String
operationLevel
;
protected
ModelManagementOptions
(
final
NonNull
RuntimeTranslation
.
ModelManagementOptions
.
Builder
builder
)
{
this
.
language
=
builder
.
mLanguage
;
this
.
operation
=
builder
.
mOperation
;
this
.
operationLevel
=
builder
.
mOperationLevel
;
}
NonNull
GeckoBundle
toBundle
(
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
2
)
;
if
(
language
!
=
null
)
{
bundle
.
putString
(
"
language
"
language
)
;
}
bundle
.
putString
(
"
operation
"
operation
.
toString
(
)
)
;
bundle
.
putString
(
"
operationLevel
"
operationLevel
.
toString
(
)
)
;
return
bundle
;
}
AnyThread
public
static
class
Builder
{
String
mLanguage
=
null
;
ModelOperation
String
mOperation
;
OperationLevel
String
mOperationLevel
=
ALL
;
public
NonNull
RuntimeTranslation
.
ModelManagementOptions
.
Builder
languageToManage
(
final
NonNull
String
language
)
{
mLanguage
=
language
;
return
this
;
}
public
NonNull
RuntimeTranslation
.
ModelManagementOptions
.
Builder
operation
(
final
NonNull
ModelOperation
String
operation
)
{
mOperation
=
operation
;
return
this
;
}
public
NonNull
RuntimeTranslation
.
ModelManagementOptions
.
Builder
operationLevel
(
final
NonNull
OperationLevel
String
operationLevel
)
{
mOperationLevel
=
operationLevel
;
return
this
;
}
AnyThread
public
NonNull
ModelManagementOptions
build
(
)
{
return
new
ModelManagementOptions
(
this
)
;
}
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
StringDef
(
value
=
{
DOWNLOAD
DELETE
}
)
public
interface
ModelOperation
{
}
public
static
final
String
DOWNLOAD
=
"
download
"
;
public
static
final
String
DELETE
=
"
delete
"
;
Retention
(
RetentionPolicy
.
SOURCE
)
StringDef
(
value
=
{
LANGUAGE
CACHE
ALL
}
)
public
interface
OperationLevel
{
}
public
static
final
String
LANGUAGE
=
"
language
"
;
public
static
final
String
CACHE
=
"
cache
"
;
public
static
final
String
ALL
=
"
all
"
;
public
static
class
TranslationSupport
{
public
final
Nullable
List
<
Language
>
fromLanguages
;
public
final
Nullable
List
<
Language
>
toLanguages
;
public
TranslationSupport
(
Nullable
final
List
<
Language
>
fromLanguages
Nullable
final
List
<
Language
>
toLanguages
)
{
this
.
fromLanguages
=
fromLanguages
;
this
.
toLanguages
=
toLanguages
;
}
Override
public
String
toString
(
)
{
return
"
TranslationSupport
{
"
+
"
fromLanguages
=
"
+
fromLanguages
+
"
toLanguages
=
"
+
toLanguages
+
'
}
'
;
}
static
Nullable
TranslationSupport
fromBundle
(
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
return
null
;
}
final
List
<
Language
>
fromLanguages
=
new
ArrayList
<
>
(
)
;
final
List
<
Language
>
toLanguages
=
new
ArrayList
<
>
(
)
;
try
{
final
GeckoBundle
[
]
fromBundle
=
bundle
.
getBundleArray
(
"
fromLanguages
"
)
;
for
(
final
var
item
:
fromBundle
)
{
final
var
result
=
Language
.
fromBundle
(
item
)
;
if
(
result
!
=
null
)
{
fromLanguages
.
add
(
result
)
;
}
}
final
GeckoBundle
[
]
toBundle
=
bundle
.
getBundleArray
(
"
toLanguages
"
)
;
for
(
final
var
item
:
toBundle
)
{
final
var
result
=
Language
.
fromBundle
(
item
)
;
if
(
result
!
=
null
)
{
toLanguages
.
add
(
result
)
;
}
}
}
catch
(
final
Exception
e
)
{
Log
.
w
(
LOGTAG
"
An
issue
occurred
while
deserializing
translation
support
information
:
"
+
e
)
;
}
return
new
TranslationSupport
(
fromLanguages
toLanguages
)
;
}
}
public
static
class
LanguageModel
{
public
final
Nullable
Language
language
;
public
final
NonNull
Boolean
isDownloaded
;
public
final
long
size
;
public
LanguageModel
(
Nullable
final
Language
language
final
Boolean
isDownloaded
final
long
size
)
{
this
.
language
=
language
;
this
.
isDownloaded
=
isDownloaded
;
this
.
size
=
size
;
}
Override
public
String
toString
(
)
{
return
"
LanguageModel
{
"
+
"
language
=
"
+
language
+
"
isDownloaded
=
"
+
isDownloaded
+
"
size
=
"
+
size
+
'
}
'
;
}
static
Nullable
LanguageModel
fromBundle
(
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
return
null
;
}
try
{
final
var
language
=
Language
.
fromBundle
(
bundle
)
;
final
var
isDownloaded
=
bundle
.
getBoolean
(
"
isDownloaded
"
)
;
final
var
size
=
bundle
.
getLong
(
"
size
"
)
;
return
new
LanguageModel
(
language
isDownloaded
size
)
;
}
catch
(
final
Exception
e
)
{
Log
.
w
(
LOGTAG
"
Could
not
deserialize
LanguageModel
object
:
"
+
e
)
;
return
null
;
}
}
}
}
public
static
class
SessionTranslation
{
private
static
final
String
TRANSLATE_EVENT
=
"
GeckoView
:
Translations
:
Translate
"
;
private
static
final
String
RESTORE_PAGE_EVENT
=
"
GeckoView
:
Translations
:
RestorePage
"
;
private
static
final
String
ON_OFFER_EVENT
=
"
GeckoView
:
Translations
:
Offer
"
;
private
static
final
String
ON_STATE_CHANGE_EVENT
=
"
GeckoView
:
Translations
:
StateChange
"
;
private
final
GeckoSession
mSession
;
private
final
SessionTranslation
.
Handler
mHandler
;
public
SessionTranslation
(
final
GeckoSession
session
)
{
mSession
=
session
;
mHandler
=
new
SessionTranslation
.
Handler
(
mSession
)
;
}
AnyThread
public
NonNull
Handler
getHandler
(
)
{
return
mHandler
;
}
AnyThread
public
NonNull
GeckoResult
<
Void
>
translate
(
NonNull
final
String
fromLanguage
NonNull
final
String
toLanguage
Nullable
final
TranslationOptions
options
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Translate
page
requested
-
fromLanguage
:
"
+
fromLanguage
+
"
toLanguage
:
"
+
toLanguage
+
"
options
:
"
+
options
)
;
}
final
GeckoBundle
bundle
=
new
GeckoBundle
(
2
)
;
bundle
.
putString
(
"
fromLanguage
"
fromLanguage
)
;
bundle
.
putString
(
"
toLanguage
"
toLanguage
)
;
return
mSession
.
getEventDispatcher
(
)
.
queryVoid
(
TRANSLATE_EVENT
bundle
)
;
}
AnyThread
public
NonNull
GeckoResult
<
Void
>
translate
(
NonNull
final
TranslationPair
translationPair
Nullable
final
TranslationOptions
options
)
{
return
translate
(
translationPair
.
fromLanguage
translationPair
.
toLanguage
options
)
;
}
AnyThread
public
NonNull
GeckoResult
<
Void
>
restoreOriginalPage
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Restore
translated
page
requested
"
)
;
}
return
mSession
.
getEventDispatcher
(
)
.
queryVoid
(
RESTORE_PAGE_EVENT
)
;
}
AnyThread
public
static
class
TranslationOptions
{
public
final
NonNull
boolean
downloadModel
;
protected
TranslationOptions
(
final
NonNull
Builder
builder
)
{
this
.
downloadModel
=
builder
.
mDownloadModel
;
}
AnyThread
public
static
class
Builder
{
boolean
mDownloadModel
=
true
;
public
NonNull
Builder
downloadModel
(
final
NonNull
boolean
downloadModel
)
{
mDownloadModel
=
downloadModel
;
return
this
;
}
AnyThread
public
NonNull
TranslationOptions
build
(
)
{
return
new
TranslationOptions
(
this
)
;
}
}
}
AnyThread
public
interface
Delegate
{
default
void
onOfferTranslate
(
NonNull
final
GeckoSession
session
)
{
}
default
void
onExpectedTranslate
(
NonNull
final
GeckoSession
session
)
{
}
default
void
onTranslationStateChange
(
NonNull
final
GeckoSession
session
Nullable
TranslationState
translationState
)
{
}
}
public
static
class
TranslationPair
{
public
final
Nullable
String
fromLanguage
;
public
final
Nullable
String
toLanguage
;
public
TranslationPair
(
Nullable
final
String
fromLanguage
Nullable
final
String
toLanguage
)
{
this
.
fromLanguage
=
fromLanguage
;
this
.
toLanguage
=
toLanguage
;
}
Override
public
String
toString
(
)
{
return
"
TranslationPair
{
"
+
"
fromLanguage
=
'
"
+
fromLanguage
+
'
\
'
'
+
"
toLanguage
=
'
"
+
toLanguage
+
'
\
'
'
+
'
}
'
;
}
static
Nullable
TranslationPair
fromBundle
(
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
return
null
;
}
return
new
TranslationPair
(
bundle
.
getString
(
"
fromLanguage
"
)
bundle
.
getString
(
"
toLanguage
"
)
)
;
}
}
public
static
class
DetectedLanguages
{
public
final
Nullable
String
userLangTag
;
public
final
NonNull
Boolean
isDocLangTagSupported
;
public
final
Nullable
String
docLangTag
;
public
DetectedLanguages
(
Nullable
final
String
userLangTag
NonNull
final
Boolean
isDocLangTagSupported
Nullable
final
String
docLangTag
)
{
this
.
userLangTag
=
userLangTag
;
this
.
isDocLangTagSupported
=
isDocLangTagSupported
;
this
.
docLangTag
=
docLangTag
;
}
Override
public
String
toString
(
)
{
return
"
DetectedLanguages
{
"
+
"
userLangTag
=
'
"
+
userLangTag
+
'
\
'
'
+
"
isDocLangTagSupported
=
"
+
isDocLangTagSupported
+
"
docLangTag
=
'
"
+
docLangTag
+
'
\
'
'
+
'
}
'
;
}
static
Nullable
DetectedLanguages
fromBundle
(
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
return
null
;
}
return
new
DetectedLanguages
(
bundle
.
getString
(
"
userLangTag
"
)
bundle
.
getBoolean
(
"
isDocLangTagSupported
"
false
)
bundle
.
getString
(
"
docLangTag
"
)
)
;
}
}
public
static
class
TranslationState
{
public
final
Nullable
TranslationPair
requestedTranslationPair
;
public
final
Nullable
String
error
;
public
final
Nullable
DetectedLanguages
detectedLanguages
;
public
final
NonNull
Boolean
isEngineReady
;
public
TranslationState
(
final
Nullable
TranslationPair
requestedTranslationPair
final
Nullable
String
error
final
Nullable
DetectedLanguages
detectedLanguages
final
NonNull
Boolean
isEngineReady
)
{
this
.
requestedTranslationPair
=
requestedTranslationPair
;
this
.
error
=
error
;
this
.
detectedLanguages
=
detectedLanguages
;
this
.
isEngineReady
=
isEngineReady
;
}
Override
public
String
toString
(
)
{
return
"
TranslationState
{
"
+
"
requestedTranslationPair
=
"
+
requestedTranslationPair
+
"
error
=
'
"
+
error
+
'
\
'
'
+
"
detectedLanguages
=
"
+
detectedLanguages
+
"
isEngineReady
=
"
+
isEngineReady
+
'
}
'
;
}
static
Nullable
TranslationState
fromBundle
(
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
return
null
;
}
return
new
TranslationState
(
TranslationPair
.
fromBundle
(
bundle
.
getBundle
(
"
requestedTranslationPair
"
)
)
bundle
.
getString
(
"
error
"
)
DetectedLanguages
.
fromBundle
(
bundle
.
getBundle
(
"
detectedLanguages
"
)
)
bundle
.
getBoolean
(
"
isEngineReady
"
false
)
)
;
}
}
static
class
Handler
extends
GeckoSessionHandler
<
SessionTranslation
.
Delegate
>
{
private
final
GeckoSession
mSession
;
private
Handler
(
final
GeckoSession
session
)
{
super
(
"
GeckoViewTranslations
"
session
new
String
[
]
{
ON_OFFER_EVENT
ON_STATE_CHANGE_EVENT
}
)
;
mSession
=
session
;
}
Override
public
void
handleMessage
(
final
Delegate
delegate
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
handleMessage
"
+
event
)
;
}
if
(
delegate
=
=
null
)
{
Log
.
w
(
LOGTAG
"
The
translations
session
delegate
is
not
set
.
"
)
;
return
;
}
if
(
ON_OFFER_EVENT
.
equals
(
event
)
)
{
delegate
.
onOfferTranslate
(
mSession
)
;
return
;
}
else
if
(
ON_STATE_CHANGE_EVENT
.
equals
(
event
)
)
{
final
GeckoBundle
data
=
message
.
getBundle
(
"
data
"
)
;
final
TranslationState
translationState
=
TranslationState
.
fromBundle
(
data
)
;
delegate
.
onTranslationStateChange
(
mSession
translationState
)
;
if
(
translationState
!
=
null
&
&
translationState
.
detectedLanguages
!
=
null
&
&
translationState
.
detectedLanguages
.
docLangTag
!
=
null
&
&
translationState
.
detectedLanguages
.
userLangTag
!
=
null
&
&
translationState
.
detectedLanguages
.
isDocLangTagSupported
)
{
TranslationsController
.
RuntimeTranslation
.
isTranslationsEngineSupported
(
)
.
then
(
(
GeckoResult
.
OnValueListener
<
Boolean
Void
>
)
value
-
>
{
if
(
value
)
{
delegate
.
onExpectedTranslate
(
mSession
)
;
}
return
null
;
}
)
;
return
;
}
}
}
}
}
public
static
class
Language
implements
Comparable
<
Language
>
{
public
final
NonNull
String
code
;
public
final
Nullable
String
localizedDisplayName
;
public
Language
(
NonNull
final
String
code
Nullable
final
String
localizedDisplayName
)
{
this
.
code
=
code
;
this
.
localizedDisplayName
=
localizedDisplayName
;
}
Override
public
String
toString
(
)
{
if
(
localizedDisplayName
!
=
null
)
{
return
localizedDisplayName
;
}
return
code
;
}
Override
AnyThread
public
int
compareTo
(
Nullable
final
Language
otherLanguage
)
{
return
this
.
localizedDisplayName
.
compareTo
(
otherLanguage
.
localizedDisplayName
)
;
}
Override
public
boolean
equals
(
Nullable
final
Object
otherLanguage
)
{
if
(
otherLanguage
instanceof
Language
)
{
return
this
.
code
.
equals
(
(
(
Language
)
otherLanguage
)
.
code
)
;
}
return
false
;
}
Override
public
int
hashCode
(
)
{
return
Objects
.
hash
(
code
)
;
}
static
Nullable
Language
fromBundle
(
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
return
null
;
}
try
{
final
String
code
=
bundle
.
getString
(
"
langTag
"
"
"
)
;
if
(
code
.
equals
(
"
"
)
)
{
Log
.
w
(
LOGTAG
"
Deserialized
an
empty
language
code
.
"
)
;
}
return
new
Language
(
code
bundle
.
getString
(
"
displayName
"
)
)
;
}
catch
(
final
Exception
e
)
{
Log
.
w
(
LOGTAG
"
Could
not
deserialize
language
object
:
"
+
e
)
;
return
null
;
}
}
}
}
