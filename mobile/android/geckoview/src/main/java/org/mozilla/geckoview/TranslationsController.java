package
org
.
mozilla
.
geckoview
;
import
android
.
util
.
Log
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
public
class
TranslationsController
{
private
static
final
boolean
DEBUG
=
false
;
private
static
final
String
LOGTAG
=
"
TranslationsController
"
;
public
static
class
SessionTranslation
{
private
static
final
String
TRANSLATE_EVENT
=
"
GeckoView
:
Translations
:
Translate
"
;
private
static
final
String
RESTORE_PAGE_EVENT
=
"
GeckoView
:
Translations
:
RestorePage
"
;
private
static
final
String
ON_OFFER_EVENT
=
"
GeckoView
:
Translations
:
Offer
"
;
private
static
final
String
ON_STATE_CHANGE_EVENT
=
"
GeckoView
:
Translations
:
StateChange
"
;
private
final
GeckoSession
mSession
;
private
final
SessionTranslation
.
Handler
mHandler
;
public
SessionTranslation
(
final
GeckoSession
session
)
{
mSession
=
session
;
mHandler
=
new
SessionTranslation
.
Handler
(
mSession
)
;
}
AnyThread
public
NonNull
Handler
getHandler
(
)
{
return
mHandler
;
}
AnyThread
public
NonNull
GeckoResult
<
Void
>
translate
(
NonNull
final
String
fromLanguage
NonNull
final
String
toLanguage
Nullable
final
TranslationOptions
options
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Translate
page
requested
-
fromLanguage
:
"
+
fromLanguage
+
"
toLanguage
:
"
+
toLanguage
+
"
options
:
"
+
options
)
;
}
final
GeckoBundle
bundle
=
new
GeckoBundle
(
2
)
;
bundle
.
putString
(
"
fromLanguage
"
fromLanguage
)
;
bundle
.
putString
(
"
toLanguage
"
toLanguage
)
;
return
mSession
.
getEventDispatcher
(
)
.
queryVoid
(
TRANSLATE_EVENT
bundle
)
;
}
AnyThread
public
NonNull
GeckoResult
<
Void
>
translate
(
NonNull
final
TranslationPair
translationPair
Nullable
final
TranslationOptions
options
)
{
return
translate
(
translationPair
.
fromLanguage
translationPair
.
toLanguage
options
)
;
}
AnyThread
public
NonNull
GeckoResult
<
Void
>
restoreOriginalPage
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Restore
translated
page
requested
"
)
;
}
return
mSession
.
getEventDispatcher
(
)
.
queryVoid
(
RESTORE_PAGE_EVENT
)
;
}
AnyThread
public
static
class
TranslationOptions
{
public
final
NonNull
boolean
downloadModel
;
protected
TranslationOptions
(
final
NonNull
Builder
builder
)
{
this
.
downloadModel
=
builder
.
mDownloadModel
;
}
AnyThread
public
static
class
Builder
{
boolean
mDownloadModel
=
true
;
public
NonNull
Builder
downloadModel
(
final
NonNull
boolean
downloadModel
)
{
mDownloadModel
=
downloadModel
;
return
this
;
}
AnyThread
public
NonNull
TranslationOptions
build
(
)
{
return
new
TranslationOptions
(
this
)
;
}
}
}
AnyThread
public
interface
Delegate
{
default
void
onOfferTranslate
(
NonNull
final
GeckoSession
session
)
{
}
default
void
onExpectedTranslate
(
NonNull
final
GeckoSession
session
)
{
}
default
void
onTranslationStateChange
(
NonNull
final
GeckoSession
session
Nullable
TranslationState
translationState
)
{
}
}
public
static
class
TranslationPair
{
public
final
Nullable
String
fromLanguage
;
public
final
Nullable
String
toLanguage
;
public
TranslationPair
(
Nullable
final
String
fromLanguage
Nullable
final
String
toLanguage
)
{
this
.
fromLanguage
=
fromLanguage
;
this
.
toLanguage
=
toLanguage
;
}
Override
public
String
toString
(
)
{
return
"
TranslationPair
{
"
+
"
fromLanguage
=
'
"
+
fromLanguage
+
'
\
'
'
+
"
toLanguage
=
'
"
+
toLanguage
+
'
\
'
'
+
'
}
'
;
}
static
Nullable
TranslationPair
fromBundle
(
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
return
null
;
}
return
new
TranslationPair
(
bundle
.
getString
(
"
fromLanguage
"
)
bundle
.
getString
(
"
toLanguage
"
)
)
;
}
}
public
static
class
DetectedLanguages
{
public
final
Nullable
String
userLangTag
;
public
final
NonNull
Boolean
isDocLangTagSupported
;
public
final
Nullable
String
docLangTag
;
public
DetectedLanguages
(
Nullable
final
String
userLangTag
NonNull
final
Boolean
isDocLangTagSupported
Nullable
final
String
docLangTag
)
{
this
.
userLangTag
=
userLangTag
;
this
.
isDocLangTagSupported
=
isDocLangTagSupported
;
this
.
docLangTag
=
docLangTag
;
}
Override
public
String
toString
(
)
{
return
"
DetectedLanguages
{
"
+
"
userLangTag
=
'
"
+
userLangTag
+
'
\
'
'
+
"
isDocLangTagSupported
=
"
+
isDocLangTagSupported
+
"
docLangTag
=
'
"
+
docLangTag
+
'
\
'
'
+
'
}
'
;
}
static
Nullable
DetectedLanguages
fromBundle
(
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
return
null
;
}
return
new
DetectedLanguages
(
bundle
.
getString
(
"
userLangTag
"
)
bundle
.
getBoolean
(
"
isDocLangTagSupported
"
false
)
bundle
.
getString
(
"
docLangTag
"
)
)
;
}
}
public
static
class
TranslationState
{
public
final
Nullable
TranslationPair
requestedTranslationPair
;
public
final
Nullable
String
error
;
public
final
Nullable
DetectedLanguages
detectedLanguages
;
public
final
NonNull
Boolean
isEngineReady
;
public
TranslationState
(
final
Nullable
TranslationPair
requestedTranslationPair
final
Nullable
String
error
final
Nullable
DetectedLanguages
detectedLanguages
final
NonNull
Boolean
isEngineReady
)
{
this
.
requestedTranslationPair
=
requestedTranslationPair
;
this
.
error
=
error
;
this
.
detectedLanguages
=
detectedLanguages
;
this
.
isEngineReady
=
isEngineReady
;
}
Override
public
String
toString
(
)
{
return
"
TranslationState
{
"
+
"
requestedTranslationPair
=
"
+
requestedTranslationPair
+
"
error
=
'
"
+
error
+
'
\
'
'
+
"
detectedLanguages
=
"
+
detectedLanguages
+
"
isEngineReady
=
"
+
isEngineReady
+
'
}
'
;
}
static
Nullable
TranslationState
fromBundle
(
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
return
null
;
}
return
new
TranslationState
(
TranslationPair
.
fromBundle
(
bundle
.
getBundle
(
"
requestedTranslationPair
"
)
)
bundle
.
getString
(
"
error
"
)
DetectedLanguages
.
fromBundle
(
bundle
.
getBundle
(
"
detectedLanguages
"
)
)
bundle
.
getBoolean
(
"
isEngineReady
"
false
)
)
;
}
}
static
class
Handler
extends
GeckoSessionHandler
<
SessionTranslation
.
Delegate
>
{
private
final
GeckoSession
mSession
;
private
Handler
(
final
GeckoSession
session
)
{
super
(
"
GeckoViewTranslations
"
session
new
String
[
]
{
ON_OFFER_EVENT
ON_STATE_CHANGE_EVENT
}
)
;
mSession
=
session
;
}
Override
public
void
handleMessage
(
final
Delegate
delegate
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
handleMessage
"
+
event
)
;
}
if
(
delegate
=
=
null
)
{
Log
.
w
(
LOGTAG
"
The
translations
session
delegate
is
not
set
.
"
)
;
return
;
}
if
(
ON_OFFER_EVENT
.
equals
(
event
)
)
{
delegate
.
onOfferTranslate
(
mSession
)
;
return
;
}
else
if
(
ON_STATE_CHANGE_EVENT
.
equals
(
event
)
)
{
final
GeckoBundle
data
=
message
.
getBundle
(
"
data
"
)
;
final
TranslationState
translationState
=
TranslationState
.
fromBundle
(
data
)
;
delegate
.
onTranslationStateChange
(
mSession
translationState
)
;
if
(
translationState
!
=
null
&
&
translationState
.
detectedLanguages
!
=
null
&
&
translationState
.
detectedLanguages
.
docLangTag
!
=
null
&
&
translationState
.
detectedLanguages
.
userLangTag
!
=
null
&
&
translationState
.
detectedLanguages
.
isDocLangTagSupported
)
{
delegate
.
onExpectedTranslate
(
mSession
)
;
}
return
;
}
}
}
}
}
