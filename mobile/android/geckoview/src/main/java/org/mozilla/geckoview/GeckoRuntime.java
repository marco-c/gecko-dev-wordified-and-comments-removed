package
org
.
mozilla
.
geckoview
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
android
.
content
.
Context
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
GeckoScreenOrientation
;
import
org
.
mozilla
.
gecko
.
GeckoThread
;
import
org
.
mozilla
.
gecko
.
PrefsHelper
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
java
.
io
.
File
;
public
final
class
GeckoRuntime
implements
Parcelable
{
public
static
final
String
PREF_CRASH_REPORTING_JOB_ID
=
"
PrefGeckoCrashReportingJobId
"
;
private
static
final
String
LOGTAG
=
"
GeckoRuntime
"
;
private
static
final
boolean
DEBUG
=
false
;
private
static
GeckoRuntime
sDefaultRuntime
;
public
static
synchronized
NonNull
GeckoRuntime
getDefault
(
final
NonNull
Context
context
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
getDefault
"
)
;
}
if
(
sDefaultRuntime
=
=
null
)
{
sDefaultRuntime
=
new
GeckoRuntime
(
)
;
sDefaultRuntime
.
attachTo
(
context
)
;
sDefaultRuntime
.
init
(
context
new
GeckoRuntimeSettings
(
)
)
;
}
return
sDefaultRuntime
;
}
private
GeckoRuntimeSettings
mSettings
;
private
Delegate
mDelegate
;
private
RuntimeTelemetry
mTelemetry
;
public
void
attachTo
(
final
NonNull
Context
context
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
attachTo
"
+
context
.
getApplicationContext
(
)
)
;
}
final
Context
appContext
=
context
.
getApplicationContext
(
)
;
if
(
!
appContext
.
equals
(
GeckoAppShell
.
getApplicationContext
(
)
)
)
{
GeckoAppShell
.
setApplicationContext
(
appContext
)
;
}
}
private
final
BundleEventListener
mEventListener
=
new
BundleEventListener
(
)
{
Override
public
void
handleMessage
(
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
"
Gecko
:
Exited
"
.
equals
(
event
)
&
&
mDelegate
!
=
null
)
{
mDelegate
.
onShutdown
(
)
;
EventDispatcher
.
getInstance
(
)
.
unregisterUiThreadListener
(
mEventListener
"
Gecko
:
Exited
"
)
;
}
}
}
;
boolean
init
(
final
NonNull
Context
context
final
NonNull
GeckoRuntimeSettings
settings
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
init
"
)
;
}
int
flags
=
0
;
if
(
settings
.
getUseContentProcessHint
(
)
)
{
flags
|
=
GeckoThread
.
FLAG_PRELOAD_CHILD
;
}
if
(
settings
.
getPauseForDebuggerEnabled
(
)
)
{
flags
|
=
GeckoThread
.
FLAG_DEBUGGING
;
}
GeckoAppShell
.
setDisplayDensityOverride
(
settings
.
getDisplayDensityOverride
(
)
)
;
GeckoAppShell
.
setDisplayDpiOverride
(
settings
.
getDisplayDpiOverride
(
)
)
;
GeckoAppShell
.
setScreenSizeOverride
(
settings
.
getScreenSizeOverride
(
)
)
;
final
int
crashReportingJobId
=
settings
.
getCrashReportingServiceJobId
(
)
;
settings
.
getExtras
(
)
.
putInt
(
GeckoRuntimeSettings
.
EXTRA_CRASH_REPORTING_JOB_ID
crashReportingJobId
)
;
if
(
!
GeckoThread
.
initMainProcess
(
null
settings
.
getArguments
(
)
settings
.
getExtras
(
)
flags
)
)
{
Log
.
w
(
LOGTAG
"
init
failed
(
could
not
initiate
GeckoThread
)
"
)
;
return
false
;
}
if
(
!
GeckoThread
.
launch
(
)
)
{
Log
.
w
(
LOGTAG
"
init
failed
(
GeckoThread
already
launched
)
"
)
;
return
false
;
}
mSettings
=
settings
;
EventDispatcher
.
getInstance
(
)
.
registerUiThreadListener
(
mEventListener
"
Gecko
:
Exited
"
)
;
mSettings
.
runtime
=
this
;
mSettings
.
flush
(
)
;
GeckoAppShell
.
getApplicationContext
(
)
.
getSystemService
(
Context
.
CLIPBOARD_SERVICE
)
;
return
true
;
}
public
static
NonNull
GeckoRuntime
create
(
final
NonNull
Context
context
)
{
return
create
(
context
new
GeckoRuntimeSettings
(
)
)
;
}
public
static
NonNull
GeckoRuntime
create
(
final
NonNull
Context
context
final
NonNull
GeckoRuntimeSettings
settings
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
create
"
+
context
)
;
}
final
GeckoRuntime
runtime
=
new
GeckoRuntime
(
)
;
runtime
.
attachTo
(
context
)
;
if
(
!
runtime
.
init
(
context
settings
)
)
{
throw
new
IllegalStateException
(
"
Failed
to
initialize
GeckoRuntime
"
)
;
}
return
runtime
;
}
public
void
shutdown
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
shutdown
"
)
;
}
GeckoThread
.
forceQuit
(
)
;
}
public
interface
Delegate
{
void
onShutdown
(
)
;
}
public
void
setDelegate
(
final
Delegate
delegate
)
{
mDelegate
=
delegate
;
}
public
Nullable
Delegate
getDelegate
(
)
{
return
mDelegate
;
}
public
GeckoRuntimeSettings
getSettings
(
)
{
return
mSettings
;
}
void
setPref
(
final
String
name
final
Object
value
boolean
override
)
{
if
(
override
|
|
!
GeckoAppShell
.
isFennec
(
)
)
{
PrefsHelper
.
setPref
(
name
value
false
)
;
}
}
public
RuntimeTelemetry
getTelemetry
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
mTelemetry
=
=
null
)
{
mTelemetry
=
new
RuntimeTelemetry
(
this
)
;
}
return
mTelemetry
;
}
NonNull
public
File
getProfileDir
(
)
{
return
GeckoThread
.
getActiveProfile
(
)
.
getDir
(
)
;
}
public
void
orientationChanged
(
)
{
GeckoScreenOrientation
.
getInstance
(
)
.
update
(
)
;
}
public
void
orientationChanged
(
int
newOrientation
)
{
GeckoScreenOrientation
.
getInstance
(
)
.
update
(
newOrientation
)
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
Parcel
out
int
flags
)
{
out
.
writeParcelable
(
mSettings
flags
)
;
}
public
void
readFromParcel
(
final
Parcel
source
)
{
mSettings
=
source
.
readParcelable
(
getClass
(
)
.
getClassLoader
(
)
)
;
}
public
static
final
Parcelable
.
Creator
<
GeckoRuntime
>
CREATOR
=
new
Parcelable
.
Creator
<
GeckoRuntime
>
(
)
{
Override
public
GeckoRuntime
createFromParcel
(
final
Parcel
in
)
{
final
GeckoRuntime
runtime
=
new
GeckoRuntime
(
)
;
runtime
.
readFromParcel
(
in
)
;
return
runtime
;
}
Override
public
GeckoRuntime
[
]
newArray
(
final
int
size
)
{
return
new
GeckoRuntime
[
size
]
;
}
}
;
}
