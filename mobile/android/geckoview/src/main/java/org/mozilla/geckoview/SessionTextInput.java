package
org
.
mozilla
.
geckoview
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
GeckoEditableChild
;
import
org
.
mozilla
.
gecko
.
IGeckoEditableParent
;
import
org
.
mozilla
.
gecko
.
NativeQueue
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
graphics
.
RectF
;
import
android
.
os
.
Handler
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
text
.
Editable
;
import
android
.
view
.
KeyEvent
;
import
android
.
view
.
View
;
import
android
.
view
.
inputmethod
.
EditorInfo
;
import
android
.
view
.
inputmethod
.
InputConnection
;
public
final
class
SessionTextInput
{
interface
InputConnectionClient
{
View
getView
(
)
;
Handler
getHandler
(
Handler
defHandler
)
;
InputConnection
onCreateInputConnection
(
EditorInfo
attrs
)
;
boolean
isInputActive
(
)
;
void
setShowSoftInputOnFocus
(
boolean
showSoftInputOnFocus
)
;
}
interface
EditableClient
{
WrapForJNI
final
int
ONE_SHOT
=
1
;
WrapForJNI
final
int
START_MONITOR
=
2
;
WrapForJNI
final
int
END_MONITOR
=
3
;
void
sendKeyEvent
(
Nullable
View
view
boolean
inputActive
int
action
NonNull
KeyEvent
event
)
;
Editable
getEditable
(
)
;
void
setBatchMode
(
boolean
isBatchMode
)
;
Handler
setInputConnectionHandler
(
NonNull
Handler
handler
)
;
void
postToInputConnection
(
NonNull
Runnable
runnable
)
;
void
requestCursorUpdates
(
int
requestMode
)
;
}
interface
EditableListener
{
WrapForJNI
final
int
NOTIFY_IME_OF_TOKEN
=
-
3
;
WrapForJNI
final
int
NOTIFY_IME_OPEN_VKB
=
-
2
;
WrapForJNI
final
int
NOTIFY_IME_REPLY_EVENT
=
-
1
;
WrapForJNI
final
int
NOTIFY_IME_OF_FOCUS
=
1
;
WrapForJNI
final
int
NOTIFY_IME_OF_BLUR
=
2
;
WrapForJNI
final
int
NOTIFY_IME_TO_COMMIT_COMPOSITION
=
8
;
WrapForJNI
final
int
NOTIFY_IME_TO_CANCEL_COMPOSITION
=
9
;
final
int
IME_STATE_DISABLED
=
0
;
final
int
IME_STATE_ENABLED
=
1
;
final
int
IME_STATE_PASSWORD
=
2
;
WrapForJNI
final
int
IME_FLAG_PRIVATE_BROWSING
=
1
;
WrapForJNI
final
int
IME_FLAG_USER_ACTION
=
2
;
void
notifyIME
(
int
type
)
;
void
notifyIMEContext
(
int
state
String
typeHint
String
modeHint
String
actionHint
int
flag
)
;
void
onSelectionChange
(
)
;
void
onTextChange
(
)
;
void
onDefaultKeyEvent
(
KeyEvent
event
)
;
void
updateCompositionRects
(
final
RectF
[
]
aRects
)
;
}
private
final
GeckoSession
mSession
;
private
final
NativeQueue
mQueue
;
private
final
GeckoEditable
mEditable
=
new
GeckoEditable
(
)
;
private
final
GeckoEditableChild
mEditableChild
=
new
GeckoEditableChild
(
mEditable
)
;
private
boolean
mShowSoftInputOnFocus
=
true
;
private
InputConnectionClient
mInputConnection
;
SessionTextInput
(
final
NonNull
GeckoSession
session
final
NonNull
NativeQueue
queue
)
{
mSession
=
session
;
mQueue
=
queue
;
mEditable
.
setDefaultEditableChild
(
mEditableChild
)
;
}
void
onWindowChanged
(
final
GeckoSession
.
Window
window
)
{
if
(
mQueue
.
isReady
(
)
)
{
window
.
attachEditable
(
mEditable
mEditableChild
)
;
}
else
{
mQueue
.
queueUntilReady
(
window
"
attachEditable
"
IGeckoEditableParent
.
class
mEditable
GeckoEditableChild
.
class
mEditableChild
)
;
}
}
public
synchronized
NonNull
Handler
getHandler
(
final
NonNull
Handler
defHandler
)
{
if
(
mInputConnection
!
=
null
)
{
return
mInputConnection
.
getHandler
(
defHandler
)
;
}
return
defHandler
;
}
public
Nullable
View
getView
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
return
mInputConnection
!
=
null
?
mInputConnection
.
getView
(
)
:
null
;
}
public
synchronized
void
setView
(
final
Nullable
View
view
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
view
=
=
null
)
{
mInputConnection
=
null
;
}
else
if
(
mInputConnection
=
=
null
|
|
mInputConnection
.
getView
(
)
!
=
view
)
{
mInputConnection
=
GeckoInputConnection
.
create
(
mSession
view
mEditable
)
;
mInputConnection
.
setShowSoftInputOnFocus
(
mShowSoftInputOnFocus
)
;
}
mEditable
.
setListener
(
(
EditableListener
)
mInputConnection
)
;
}
public
synchronized
Nullable
InputConnection
onCreateInputConnection
(
final
NonNull
EditorInfo
attrs
)
{
if
(
!
mQueue
.
isReady
(
)
|
|
mInputConnection
=
=
null
)
{
return
null
;
}
return
mInputConnection
.
onCreateInputConnection
(
attrs
)
;
}
public
boolean
onKeyPreIme
(
final
int
keyCode
final
NonNull
KeyEvent
event
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
return
mEditable
.
onKeyPreIme
(
getView
(
)
isInputActive
(
)
keyCode
event
)
;
}
public
boolean
onKeyDown
(
final
int
keyCode
final
NonNull
KeyEvent
event
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
return
mEditable
.
onKeyDown
(
getView
(
)
isInputActive
(
)
keyCode
event
)
;
}
public
boolean
onKeyUp
(
final
int
keyCode
final
NonNull
KeyEvent
event
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
return
mEditable
.
onKeyUp
(
getView
(
)
isInputActive
(
)
keyCode
event
)
;
}
public
boolean
onKeyLongPress
(
final
int
keyCode
final
NonNull
KeyEvent
event
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
return
mEditable
.
onKeyLongPress
(
getView
(
)
isInputActive
(
)
keyCode
event
)
;
}
public
boolean
onKeyMultiple
(
final
int
keyCode
final
int
repeatCount
final
NonNull
KeyEvent
event
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
return
mEditable
.
onKeyMultiple
(
getView
(
)
isInputActive
(
)
keyCode
repeatCount
event
)
;
}
public
boolean
isInputActive
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
return
mInputConnection
!
=
null
&
&
mInputConnection
.
isInputActive
(
)
;
}
public
void
setShowSoftInputOnFocus
(
final
boolean
showSoftInputOnFocus
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
mShowSoftInputOnFocus
=
showSoftInputOnFocus
;
if
(
mInputConnection
!
=
null
)
{
mInputConnection
.
setShowSoftInputOnFocus
(
showSoftInputOnFocus
)
;
}
}
public
boolean
getShowSoftInputOnFocus
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
return
mShowSoftInputOnFocus
;
}
}
