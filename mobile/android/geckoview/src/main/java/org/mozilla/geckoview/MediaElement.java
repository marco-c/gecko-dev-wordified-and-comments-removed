package
org
.
mozilla
.
geckoview
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
UiThread
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
Locale
;
Deprecated
DeprecationSchedule
(
version
=
91
id
=
"
media
-
element
"
)
AnyThread
public
class
MediaElement
{
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
MEDIA_STATE_PLAY
MEDIA_STATE_PLAYING
MEDIA_STATE_PAUSE
MEDIA_STATE_ENDED
MEDIA_STATE_SEEKING
MEDIA_STATE_SEEKED
MEDIA_STATE_STALLED
MEDIA_STATE_SUSPEND
MEDIA_STATE_WAITING
MEDIA_STATE_ABORT
MEDIA_STATE_EMPTIED
}
)
interface
MediaStateFlags
{
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
MEDIA_READY_STATE_HAVE_NOTHING
MEDIA_READY_STATE_HAVE_METADATA
MEDIA_READY_STATE_HAVE_CURRENT_DATA
MEDIA_READY_STATE_HAVE_FUTURE_DATA
MEDIA_READY_STATE_HAVE_ENOUGH_DATA
}
)
interface
ReadyStateFlags
{
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
MEDIA_ERROR_NETWORK_NO_SOURCE
MEDIA_ERROR_ABORTED
MEDIA_ERROR_NETWORK
MEDIA_ERROR_DECODE
MEDIA_ERROR_SRC_NOT_SUPPORTED
}
)
interface
MediaErrorFlags
{
}
public
static
final
int
MEDIA_STATE_PLAY
=
0
;
public
static
final
int
MEDIA_STATE_PLAYING
=
1
;
public
static
final
int
MEDIA_STATE_PAUSE
=
2
;
public
static
final
int
MEDIA_STATE_ENDED
=
3
;
public
static
final
int
MEDIA_STATE_SEEKING
=
4
;
public
static
final
int
MEDIA_STATE_SEEKED
=
5
;
public
static
final
int
MEDIA_STATE_STALLED
=
6
;
public
static
final
int
MEDIA_STATE_SUSPEND
=
7
;
public
static
final
int
MEDIA_STATE_WAITING
=
8
;
public
static
final
int
MEDIA_STATE_ABORT
=
9
;
public
static
final
int
MEDIA_STATE_EMPTIED
=
10
;
public
static
final
int
MEDIA_READY_STATE_HAVE_NOTHING
=
0
;
public
static
final
int
MEDIA_READY_STATE_HAVE_METADATA
=
1
;
public
static
final
int
MEDIA_READY_STATE_HAVE_CURRENT_DATA
=
2
;
public
static
final
int
MEDIA_READY_STATE_HAVE_FUTURE_DATA
=
3
;
public
static
final
int
MEDIA_READY_STATE_HAVE_ENOUGH_DATA
=
4
;
public
static
final
int
MEDIA_ERROR_NETWORK_NO_SOURCE
=
0
;
public
static
final
int
MEDIA_ERROR_ABORTED
=
1
;
public
static
final
int
MEDIA_ERROR_NETWORK
=
2
;
public
static
final
int
MEDIA_ERROR_DECODE
=
3
;
public
static
final
int
MEDIA_ERROR_SRC_NOT_SUPPORTED
=
4
;
public
static
class
Metadata
{
public
final
Nullable
String
currentSource
;
public
final
double
duration
;
public
final
long
width
;
public
final
long
height
;
public
final
boolean
isSeekable
;
public
final
int
audioTrackCount
;
public
final
int
videoTrackCount
;
Metadata
(
final
GeckoBundle
bundle
)
{
currentSource
=
bundle
.
getString
(
"
src
"
"
"
)
;
duration
=
bundle
.
getDouble
(
"
duration
"
0
)
;
width
=
bundle
.
getLong
(
"
width
"
0
)
;
height
=
bundle
.
getLong
(
"
height
"
0
)
;
isSeekable
=
bundle
.
getBoolean
(
"
seekable
"
false
)
;
audioTrackCount
=
bundle
.
getInt
(
"
audioTrackCount
"
0
)
;
videoTrackCount
=
bundle
.
getInt
(
"
videoTrackCount
"
0
)
;
}
protected
Metadata
(
)
{
currentSource
=
"
"
;
duration
=
0
;
width
=
0
;
height
=
0
;
isSeekable
=
false
;
audioTrackCount
=
0
;
videoTrackCount
=
0
;
}
}
public
static
class
LoadProgressInfo
{
public
class
TimeRange
{
protected
TimeRange
(
final
double
start
final
double
end
)
{
this
.
start
=
start
;
this
.
end
=
end
;
}
public
final
double
start
;
public
final
double
end
;
}
public
final
long
loadedBytes
;
public
final
long
totalBytes
;
public
final
Nullable
TimeRange
[
]
buffered
;
LoadProgressInfo
(
final
GeckoBundle
bundle
)
{
loadedBytes
=
bundle
.
getLong
(
"
loadedBytes
"
-
1
)
;
totalBytes
=
bundle
.
getLong
(
"
loadedBytes
"
-
1
)
;
final
double
[
]
starts
=
bundle
.
getDoubleArray
(
"
timeRangeStarts
"
)
;
final
double
[
]
ends
=
bundle
.
getDoubleArray
(
"
timeRangeEnds
"
)
;
if
(
starts
=
=
null
|
|
ends
=
=
null
)
{
buffered
=
null
;
return
;
}
if
(
starts
.
length
!
=
ends
.
length
)
{
throw
new
AssertionError
(
"
timeRangeStarts
and
timeRangeEnds
length
do
not
match
"
)
;
}
buffered
=
new
TimeRange
[
starts
.
length
]
;
for
(
int
i
=
0
;
i
<
starts
.
length
;
+
+
i
)
{
buffered
[
i
]
=
new
TimeRange
(
starts
[
i
]
ends
[
i
]
)
;
}
}
protected
LoadProgressInfo
(
)
{
loadedBytes
=
0
;
totalBytes
=
0
;
buffered
=
null
;
}
}
public
interface
Delegate
{
UiThread
default
void
onPlaybackStateChange
(
NonNull
final
MediaElement
mediaElement
MediaStateFlags
final
int
mediaState
)
{
}
UiThread
default
void
onReadyStateChange
(
NonNull
final
MediaElement
mediaElement
ReadyStateFlags
final
int
readyState
)
{
}
UiThread
default
void
onMetadataChange
(
NonNull
final
MediaElement
mediaElement
NonNull
final
Metadata
metaData
)
{
}
UiThread
default
void
onLoadProgress
(
NonNull
final
MediaElement
mediaElement
NonNull
final
LoadProgressInfo
progressInfo
)
{
}
UiThread
default
void
onVolumeChange
(
NonNull
final
MediaElement
mediaElement
final
double
volume
final
boolean
muted
)
{
}
UiThread
default
void
onTimeChange
(
NonNull
final
MediaElement
mediaElement
final
double
time
)
{
}
UiThread
default
void
onPlaybackRateChange
(
NonNull
final
MediaElement
mediaElement
final
double
rate
)
{
}
UiThread
default
void
onFullscreenChange
(
NonNull
final
MediaElement
mediaElement
final
boolean
fullscreen
)
{
}
UiThread
default
void
onError
(
NonNull
final
MediaElement
mediaElement
MediaErrorFlags
final
int
errorCode
)
{
}
}
long
getVideoId
(
)
{
return
mVideoId
;
}
public
Nullable
MediaElement
.
Delegate
getDelegate
(
)
{
return
mDelegate
;
}
public
void
setDelegate
(
final
Nullable
MediaElement
.
Delegate
delegate
)
{
if
(
mDelegate
=
=
delegate
)
{
return
;
}
final
MediaElement
.
Delegate
oldDelegate
=
mDelegate
;
mDelegate
=
delegate
;
if
(
oldDelegate
!
=
null
&
&
mDelegate
=
=
null
)
{
mSession
.
getEventDispatcher
(
)
.
dispatch
(
"
GeckoView
:
MediaUnobserve
"
createMessage
(
)
)
;
mSession
.
getMediaElements
(
)
.
remove
(
mVideoId
)
;
}
else
if
(
oldDelegate
=
=
null
)
{
mSession
.
getMediaElements
(
)
.
put
(
mVideoId
this
)
;
mSession
.
getEventDispatcher
(
)
.
dispatch
(
"
GeckoView
:
MediaObserve
"
createMessage
(
)
)
;
}
}
public
void
pause
(
)
{
mSession
.
getEventDispatcher
(
)
.
dispatch
(
"
GeckoView
:
MediaPause
"
createMessage
(
)
)
;
}
public
void
play
(
)
{
mSession
.
getEventDispatcher
(
)
.
dispatch
(
"
GeckoView
:
MediaPlay
"
createMessage
(
)
)
;
}
public
void
seek
(
final
double
time
)
{
final
GeckoBundle
message
=
createMessage
(
)
;
message
.
putDouble
(
"
time
"
time
)
;
mSession
.
getEventDispatcher
(
)
.
dispatch
(
"
GeckoView
:
MediaSeek
"
message
)
;
}
public
void
setVolume
(
final
double
volume
)
{
final
GeckoBundle
message
=
createMessage
(
)
;
message
.
putDouble
(
"
volume
"
volume
)
;
mSession
.
getEventDispatcher
(
)
.
dispatch
(
"
GeckoView
:
MediaSetVolume
"
message
)
;
}
public
void
setMuted
(
final
boolean
muted
)
{
final
GeckoBundle
message
=
createMessage
(
)
;
message
.
putBoolean
(
"
muted
"
muted
)
;
mSession
.
getEventDispatcher
(
)
.
dispatch
(
"
GeckoView
:
MediaSetMuted
"
message
)
;
}
public
void
setPlaybackRate
(
final
double
playbackRate
)
{
final
GeckoBundle
message
=
createMessage
(
)
;
message
.
putDouble
(
"
playbackRate
"
playbackRate
)
;
mSession
.
getEventDispatcher
(
)
.
dispatch
(
"
GeckoView
:
MediaSetPlaybackRate
"
message
)
;
}
UiThread
void
notifyPlaybackStateChange
(
final
String
event
)
{
MediaStateFlags
final
int
state
;
switch
(
event
.
toLowerCase
(
Locale
.
ROOT
)
)
{
case
"
play
"
:
state
=
MEDIA_STATE_PLAY
;
break
;
case
"
playing
"
:
state
=
MEDIA_STATE_PLAYING
;
break
;
case
"
pause
"
:
state
=
MEDIA_STATE_PAUSE
;
break
;
case
"
ended
"
:
state
=
MEDIA_STATE_ENDED
;
break
;
case
"
seeking
"
:
state
=
MEDIA_STATE_SEEKING
;
break
;
case
"
seeked
"
:
state
=
MEDIA_STATE_SEEKED
;
break
;
case
"
stalled
"
:
state
=
MEDIA_STATE_STALLED
;
break
;
case
"
suspend
"
:
state
=
MEDIA_STATE_SUSPEND
;
break
;
case
"
waiting
"
:
state
=
MEDIA_STATE_WAITING
;
break
;
case
"
abort
"
:
state
=
MEDIA_STATE_ABORT
;
break
;
case
"
emptied
"
:
state
=
MEDIA_STATE_EMPTIED
;
break
;
default
:
throw
new
UnsupportedOperationException
(
event
+
"
HTMLMediaElement
event
not
implemented
"
)
;
}
if
(
mDelegate
!
=
null
)
{
mDelegate
.
onPlaybackStateChange
(
this
state
)
;
}
}
UiThread
void
notifyReadyStateChange
(
final
int
readyState
)
{
if
(
mDelegate
!
=
null
)
{
mDelegate
.
onReadyStateChange
(
this
readyState
)
;
}
}
UiThread
void
notifyLoadProgress
(
final
GeckoBundle
message
)
{
if
(
mDelegate
!
=
null
)
{
mDelegate
.
onLoadProgress
(
this
new
LoadProgressInfo
(
message
)
)
;
}
}
UiThread
void
notifyTimeChange
(
final
double
currentTime
)
{
if
(
mDelegate
!
=
null
)
{
mDelegate
.
onTimeChange
(
this
currentTime
)
;
}
}
UiThread
void
notifyVolumeChange
(
final
double
volume
final
boolean
muted
)
{
if
(
mDelegate
!
=
null
)
{
mDelegate
.
onVolumeChange
(
this
volume
muted
)
;
}
}
UiThread
void
notifyPlaybackRateChange
(
final
double
rate
)
{
if
(
mDelegate
!
=
null
)
{
mDelegate
.
onPlaybackRateChange
(
this
rate
)
;
}
}
UiThread
void
notifyMetadataChange
(
final
GeckoBundle
message
)
{
if
(
mDelegate
!
=
null
)
{
mDelegate
.
onMetadataChange
(
this
new
Metadata
(
message
)
)
;
}
}
UiThread
void
notifyFullscreenChange
(
final
boolean
fullscreen
)
{
if
(
mDelegate
!
=
null
)
{
mDelegate
.
onFullscreenChange
(
this
fullscreen
)
;
}
}
UiThread
void
notifyError
(
final
int
aCode
)
{
if
(
mDelegate
!
=
null
)
{
mDelegate
.
onError
(
this
aCode
)
;
}
}
private
GeckoBundle
createMessage
(
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
)
;
bundle
.
putLong
(
"
id
"
mVideoId
)
;
return
bundle
;
}
MediaElement
(
final
long
videoId
final
GeckoSession
session
)
{
mVideoId
=
videoId
;
mSession
=
session
;
}
final
protected
NonNull
GeckoSession
mSession
;
final
protected
long
mVideoId
;
protected
Nullable
MediaElement
.
Delegate
mDelegate
;
}
