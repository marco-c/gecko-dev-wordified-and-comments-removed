package
org
.
mozilla
.
geckoview
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
android
.
support
.
annotation
.
AnyThread
;
import
android
.
support
.
annotation
.
IntDef
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
UiThread
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
AnyThread
public
class
ContentBlocking
{
AnyThread
public
static
class
Settings
extends
RuntimeSettings
{
AnyThread
public
static
class
Builder
extends
RuntimeSettings
.
Builder
<
Settings
>
{
Override
protected
NonNull
Settings
newSettings
(
final
Settings
settings
)
{
return
new
Settings
(
settings
)
;
}
public
NonNull
Builder
categories
(
final
Category
int
cat
)
{
getSettings
(
)
.
setCategories
(
cat
)
;
return
this
;
}
public
NonNull
Builder
cookieBehavior
(
final
CookieBehavior
int
behavior
)
{
getSettings
(
)
.
setCookieBehavior
(
behavior
)
;
return
this
;
}
public
NonNull
Builder
cookieLifetime
(
final
CookieLifetime
int
lifetime
)
{
getSettings
(
)
.
setCookieLifetime
(
lifetime
)
;
return
this
;
}
}
final
Pref
<
String
>
mAt
=
new
Pref
<
String
>
(
"
urlclassifier
.
trackingTable
"
ContentBlocking
.
catToAtPref
(
AT_TEST
|
AT_ANALYTIC
|
AT_SOCIAL
|
AT_AD
)
)
;
final
Pref
<
Boolean
>
mCm
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
cryptomining
.
enabled
"
false
)
;
final
Pref
<
String
>
mCmList
=
new
Pref
<
String
>
(
"
urlclassifier
.
features
.
cryptomining
.
blacklistTables
"
ContentBlocking
.
catToCmListPref
(
NONE
)
)
;
final
Pref
<
Boolean
>
mSbMalware
=
new
Pref
<
Boolean
>
(
"
browser
.
safebrowsing
.
malware
.
enabled
"
true
)
;
final
Pref
<
Boolean
>
mSbPhishing
=
new
Pref
<
Boolean
>
(
"
browser
.
safebrowsing
.
phishing
.
enabled
"
true
)
;
final
Pref
<
Integer
>
mCookieBehavior
=
new
Pref
<
Integer
>
(
"
network
.
cookie
.
cookieBehavior
"
COOKIE_ACCEPT_ALL
)
;
final
Pref
<
Integer
>
mCookieLifetime
=
new
Pref
<
Integer
>
(
"
network
.
cookie
.
lifetimePolicy
"
COOKIE_LIFETIME_NORMAL
)
;
Settings
(
)
{
this
(
null
)
;
}
Settings
(
final
Nullable
Settings
settings
)
{
this
(
null
settings
)
;
}
Settings
(
final
Nullable
RuntimeSettings
parent
final
Nullable
Settings
settings
)
{
super
(
parent
)
;
if
(
settings
!
=
null
)
{
updateSettings
(
settings
)
;
}
}
private
void
updateSettings
(
final
NonNull
Settings
settings
)
{
updatePrefs
(
settings
)
;
}
public
NonNull
Settings
setCategories
(
final
Category
int
cat
)
{
mAt
.
commit
(
ContentBlocking
.
catToAtPref
(
cat
)
)
;
mCm
.
commit
(
ContentBlocking
.
catToCmPref
(
cat
)
)
;
mCmList
.
commit
(
ContentBlocking
.
catToCmListPref
(
cat
)
)
;
mSbMalware
.
commit
(
ContentBlocking
.
catToSbMalware
(
cat
)
)
;
mSbPhishing
.
commit
(
ContentBlocking
.
catToSbPhishing
(
cat
)
)
;
return
this
;
}
public
Category
int
getCategories
(
)
{
return
ContentBlocking
.
atListToCat
(
mAt
.
get
(
)
)
|
ContentBlocking
.
cmListToCat
(
mCmList
.
get
(
)
)
|
ContentBlocking
.
sbMalwareToCat
(
mSbMalware
.
get
(
)
)
|
ContentBlocking
.
sbPhishingToCat
(
mSbPhishing
.
get
(
)
)
;
}
public
CookieBehavior
int
getCookieBehavior
(
)
{
return
mCookieBehavior
.
get
(
)
;
}
public
NonNull
Settings
setCookieBehavior
(
final
CookieBehavior
int
behavior
)
{
mCookieBehavior
.
commit
(
behavior
)
;
return
this
;
}
public
CookieBehavior
int
getCookieLifetime
(
)
{
return
mCookieLifetime
.
get
(
)
;
}
public
NonNull
Settings
setCookieLifetime
(
final
CookieLifetime
int
lifetime
)
{
mCookieLifetime
.
commit
(
lifetime
)
;
return
this
;
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
flag
=
true
value
=
{
NONE
AT_AD
AT_ANALYTIC
AT_SOCIAL
AT_CONTENT
AT_ALL
AT_TEST
AT_CRYPTOMINING
SB_MALWARE
SB_UNWANTED
SB_HARMFUL
SB_PHISHING
}
)
interface
Category
{
}
public
static
final
int
NONE
=
0
;
public
static
final
int
AT_AD
=
1
<
<
1
;
public
static
final
int
AT_ANALYTIC
=
1
<
<
2
;
public
static
final
int
AT_SOCIAL
=
1
<
<
3
;
public
static
final
int
AT_CONTENT
=
1
<
<
4
;
public
static
final
int
AT_TEST
=
1
<
<
5
;
public
static
final
int
AT_CRYPTOMINING
=
1
<
<
6
;
public
static
final
int
AT_ALL
=
AT_AD
|
AT_ANALYTIC
|
AT_SOCIAL
|
AT_CONTENT
|
AT_TEST
|
AT_CRYPTOMINING
;
public
static
final
int
SB_MALWARE
=
1
<
<
10
;
public
static
final
int
SB_UNWANTED
=
1
<
<
11
;
public
static
final
int
SB_HARMFUL
=
1
<
<
12
;
public
static
final
int
SB_PHISHING
=
1
<
<
13
;
public
static
final
int
SB_ALL
=
SB_MALWARE
|
SB_UNWANTED
|
SB_HARMFUL
|
SB_PHISHING
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
COOKIE_ACCEPT_ALL
COOKIE_ACCEPT_FIRST_PARTY
COOKIE_ACCEPT_NONE
COOKIE_ACCEPT_VISITED
COOKIE_ACCEPT_NON_TRACKERS
}
)
interface
CookieBehavior
{
}
public
static
final
int
COOKIE_ACCEPT_ALL
=
0
;
public
static
final
int
COOKIE_ACCEPT_FIRST_PARTY
=
1
;
public
static
final
int
COOKIE_ACCEPT_NONE
=
2
;
public
static
final
int
COOKIE_ACCEPT_VISITED
=
3
;
public
static
final
int
COOKIE_ACCEPT_NON_TRACKERS
=
4
;
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
COOKIE_LIFETIME_NORMAL
COOKIE_LIFETIME_RUNTIME
COOKIE_LIFETIME_DAYS
}
)
interface
CookieLifetime
{
}
public
static
final
int
COOKIE_LIFETIME_NORMAL
=
0
;
public
static
final
int
COOKIE_LIFETIME_RUNTIME
=
2
;
public
static
final
int
COOKIE_LIFETIME_DAYS
=
3
;
public
static
class
BlockEvent
{
public
final
NonNull
String
uri
;
public
final
Category
int
categories
;
public
BlockEvent
(
NonNull
final
String
uri
Category
final
int
categories
)
{
this
.
uri
=
uri
;
this
.
categories
=
categories
;
}
static
BlockEvent
fromBundle
(
NonNull
final
GeckoBundle
bundle
)
{
final
String
uri
=
bundle
.
getString
(
"
uri
"
)
;
final
String
matchedList
=
bundle
.
getString
(
"
matchedList
"
)
;
final
long
error
=
bundle
.
getLong
(
"
error
"
0L
)
;
Category
int
cats
=
NONE
;
if
(
matchedList
!
=
null
)
{
cats
=
ContentBlocking
.
atListToCat
(
matchedList
)
|
ContentBlocking
.
cmListToCat
(
matchedList
)
;
}
else
if
(
error
!
=
0L
)
{
cats
=
ContentBlocking
.
errorToCat
(
error
)
;
}
return
new
BlockEvent
(
uri
cats
)
;
}
}
public
interface
Delegate
{
UiThread
default
void
onContentBlocked
(
NonNull
GeckoSession
session
NonNull
BlockEvent
event
)
{
}
}
private
static
final
String
TEST
=
"
test
-
track
-
simple
"
;
private
static
final
String
AD
=
"
ads
-
track
-
digest256
"
;
private
static
final
String
ANALYTIC
=
"
analytics
-
track
-
digest256
"
;
private
static
final
String
SOCIAL
=
"
social
-
track
-
digest256
"
;
private
static
final
String
CONTENT
=
"
content
-
track
-
digest256
"
;
private
static
final
String
CRYPTOMINING
=
"
base
-
cryptomining
-
track
-
digest256
"
;
static
Category
int
sbMalwareToCat
(
final
boolean
enabled
)
{
return
enabled
?
(
SB_MALWARE
|
SB_UNWANTED
|
SB_HARMFUL
)
:
NONE
;
}
static
Category
int
sbPhishingToCat
(
final
boolean
enabled
)
{
return
enabled
?
SB_PHISHING
:
NONE
;
}
static
boolean
catToSbMalware
(
Category
final
int
cat
)
{
return
(
cat
&
(
SB_MALWARE
|
SB_UNWANTED
|
SB_HARMFUL
)
)
!
=
0
;
}
static
boolean
catToSbPhishing
(
Category
final
int
cat
)
{
return
(
cat
&
SB_PHISHING
)
!
=
0
;
}
static
String
catToAtPref
(
Category
final
int
cat
)
{
StringBuilder
builder
=
new
StringBuilder
(
)
;
if
(
(
cat
&
AT_TEST
)
!
=
0
)
{
builder
.
append
(
TEST
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AT_AD
)
!
=
0
)
{
builder
.
append
(
AD
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AT_ANALYTIC
)
!
=
0
)
{
builder
.
append
(
ANALYTIC
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AT_SOCIAL
)
!
=
0
)
{
builder
.
append
(
SOCIAL
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AT_CONTENT
)
!
=
0
)
{
builder
.
append
(
CONTENT
)
.
append
(
'
'
)
;
}
if
(
builder
.
length
(
)
=
=
0
)
{
return
"
"
;
}
return
builder
.
substring
(
0
builder
.
length
(
)
-
1
)
;
}
static
boolean
catToCmPref
(
Category
int
cat
)
{
return
(
cat
&
AT_CRYPTOMINING
)
!
=
0
;
}
static
String
catToCmListPref
(
Category
int
cat
)
{
StringBuilder
builder
=
new
StringBuilder
(
)
;
if
(
(
cat
&
AT_CRYPTOMINING
)
!
=
0
)
{
builder
.
append
(
CRYPTOMINING
)
;
}
return
builder
.
toString
(
)
;
}
static
Category
int
atListToCat
(
final
String
list
)
{
int
cat
=
0
;
if
(
list
.
indexOf
(
TEST
)
!
=
-
1
)
{
cat
|
=
AT_TEST
;
}
if
(
list
.
indexOf
(
AD
)
!
=
-
1
)
{
cat
|
=
AT_AD
;
}
if
(
list
.
indexOf
(
ANALYTIC
)
!
=
-
1
)
{
cat
|
=
AT_ANALYTIC
;
}
if
(
list
.
indexOf
(
SOCIAL
)
!
=
-
1
)
{
cat
|
=
AT_SOCIAL
;
}
if
(
list
.
indexOf
(
CONTENT
)
!
=
-
1
)
{
cat
|
=
AT_CONTENT
;
}
return
cat
;
}
static
Category
int
cmListToCat
(
final
String
list
)
{
int
cat
=
0
;
if
(
list
.
indexOf
(
CRYPTOMINING
)
!
=
-
1
)
{
cat
|
=
AT_CRYPTOMINING
;
}
return
cat
;
}
static
Category
int
errorToCat
(
final
long
error
)
{
if
(
error
=
=
0x805D001FL
)
{
return
SB_PHISHING
;
}
if
(
error
=
=
0x805D001EL
)
{
return
SB_MALWARE
;
}
if
(
error
=
=
0x805D0023L
)
{
return
SB_UNWANTED
;
}
if
(
error
=
=
0x805D0026L
)
{
return
SB_HARMFUL
;
}
return
NONE
;
}
}
