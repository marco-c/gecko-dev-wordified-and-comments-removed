package
org
.
mozilla
.
geckoview
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
android
.
os
.
Parcelable
;
import
android
.
os
.
Parcel
;
import
android
.
support
.
annotation
.
AnyThread
;
import
android
.
support
.
annotation
.
IntDef
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
text
.
TextUtils
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
AnyThread
public
class
ContentBlocking
{
AnyThread
public
static
class
Settings
extends
RuntimeSettings
{
AnyThread
public
static
class
Builder
extends
RuntimeSettings
.
Builder
<
Settings
>
{
Override
protected
NonNull
Settings
newSettings
(
final
Nullable
Settings
settings
)
{
return
new
Settings
(
settings
)
;
}
public
NonNull
Builder
antiTracking
(
final
CBAntiTracking
int
cat
)
{
getSettings
(
)
.
setAntiTracking
(
cat
)
;
return
this
;
}
public
NonNull
Builder
safeBrowsing
(
final
CBSafeBrowsing
int
cat
)
{
getSettings
(
)
.
setSafeBrowsing
(
cat
)
;
return
this
;
}
public
NonNull
Builder
cookieBehavior
(
final
CBCookieBehavior
int
behavior
)
{
getSettings
(
)
.
setCookieBehavior
(
behavior
)
;
return
this
;
}
public
NonNull
Builder
cookieLifetime
(
final
CBCookieLifetime
int
lifetime
)
{
getSettings
(
)
.
setCookieLifetime
(
lifetime
)
;
return
this
;
}
public
NonNull
Builder
enhancedTrackingProtectionLevel
(
final
CBEtpLevel
int
level
)
{
getSettings
(
)
.
setEnhancedTrackingProtectionLevel
(
level
)
;
return
this
;
}
}
final
Pref
<
String
>
mAt
=
new
Pref
<
String
>
(
"
urlclassifier
.
trackingTable
"
ContentBlocking
.
catToAtPref
(
AntiTracking
.
DEFAULT
)
)
;
final
Pref
<
Boolean
>
mCm
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
cryptomining
.
enabled
"
false
)
;
final
Pref
<
String
>
mCmList
=
new
Pref
<
String
>
(
"
urlclassifier
.
features
.
cryptomining
.
blacklistTables
"
ContentBlocking
.
catToCmListPref
(
AntiTracking
.
NONE
)
)
;
final
Pref
<
Boolean
>
mFp
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
fingerprinting
.
enabled
"
false
)
;
final
Pref
<
String
>
mFpList
=
new
Pref
<
String
>
(
"
urlclassifier
.
features
.
fingerprinting
.
blacklistTables
"
ContentBlocking
.
catToFpListPref
(
AntiTracking
.
NONE
)
)
;
final
Pref
<
Boolean
>
mSt
=
new
Pref
<
Boolean
>
(
"
privacy
.
socialtracking
.
block_cookies
.
enabled
"
false
)
;
final
Pref
<
Boolean
>
mStStrict
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
socialtracking
.
enabled
"
false
)
;
final
Pref
<
String
>
mStList
=
new
Pref
<
String
>
(
"
urlclassifier
.
features
.
socialtracking
.
annotate
.
blacklistTables
"
ContentBlocking
.
catToStListPref
(
AntiTracking
.
NONE
)
)
;
final
Pref
<
Boolean
>
mSbMalware
=
new
Pref
<
Boolean
>
(
"
browser
.
safebrowsing
.
malware
.
enabled
"
true
)
;
final
Pref
<
Boolean
>
mSbPhishing
=
new
Pref
<
Boolean
>
(
"
browser
.
safebrowsing
.
phishing
.
enabled
"
true
)
;
final
Pref
<
Integer
>
mCookieBehavior
=
new
Pref
<
Integer
>
(
"
network
.
cookie
.
cookieBehavior
"
CookieBehavior
.
ACCEPT_NON_TRACKERS
)
;
final
Pref
<
Integer
>
mCookieLifetime
=
new
Pref
<
Integer
>
(
"
network
.
cookie
.
lifetimePolicy
"
CookieLifetime
.
NORMAL
)
;
final
Pref
<
Boolean
>
mEtpEnabled
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
annotate_channels
"
false
)
;
final
Pref
<
Boolean
>
mEtpStrict
=
new
Pref
<
Boolean
>
(
"
privacy
.
annotate_channels
.
strict_list
.
enabled
"
false
)
;
Settings
(
)
{
this
(
null
)
;
}
Settings
(
final
Nullable
Settings
settings
)
{
this
(
null
settings
)
;
}
Settings
(
final
Nullable
RuntimeSettings
parent
final
Nullable
Settings
settings
)
{
super
(
parent
)
;
if
(
settings
!
=
null
)
{
updateSettings
(
settings
)
;
}
}
private
void
updateSettings
(
final
NonNull
Settings
settings
)
{
updatePrefs
(
settings
)
;
}
public
NonNull
Settings
setAntiTracking
(
final
CBAntiTracking
int
cat
)
{
mAt
.
commit
(
ContentBlocking
.
catToAtPref
(
cat
)
)
;
mCm
.
commit
(
ContentBlocking
.
catToCmPref
(
cat
)
)
;
mCmList
.
commit
(
ContentBlocking
.
catToCmListPref
(
cat
)
)
;
mFp
.
commit
(
ContentBlocking
.
catToFpPref
(
cat
)
)
;
mFpList
.
commit
(
ContentBlocking
.
catToFpListPref
(
cat
)
)
;
mSt
.
commit
(
ContentBlocking
.
catToStPref
(
cat
)
)
;
mStList
.
commit
(
ContentBlocking
.
catToStListPref
(
cat
)
)
;
return
this
;
}
public
NonNull
Settings
setEnhancedTrackingProtectionLevel
(
final
CBEtpLevel
int
level
)
{
mEtpEnabled
.
commit
(
level
=
=
ContentBlocking
.
EtpLevel
.
DEFAULT
|
|
level
=
=
ContentBlocking
.
EtpLevel
.
STRICT
)
;
mEtpStrict
.
commit
(
level
=
=
ContentBlocking
.
EtpLevel
.
STRICT
)
;
return
this
;
}
public
NonNull
Settings
setStrictSocialTrackingProtection
(
final
boolean
enabled
)
{
mStStrict
.
commit
(
enabled
)
;
return
this
;
}
public
NonNull
Settings
setSafeBrowsing
(
final
CBSafeBrowsing
int
cat
)
{
mSbMalware
.
commit
(
ContentBlocking
.
catToSbMalware
(
cat
)
)
;
mSbPhishing
.
commit
(
ContentBlocking
.
catToSbPhishing
(
cat
)
)
;
return
this
;
}
public
CBAntiTracking
int
getAntiTrackingCategories
(
)
{
return
ContentBlocking
.
atListToAtCat
(
mAt
.
get
(
)
)
|
ContentBlocking
.
cmListToAtCat
(
mCmList
.
get
(
)
)
|
ContentBlocking
.
fpListToAtCat
(
mFpList
.
get
(
)
)
|
ContentBlocking
.
stListToAtCat
(
mStList
.
get
(
)
)
;
}
public
CBEtpLevel
int
getEnhancedTrackingProtectionLevel
(
)
{
if
(
mEtpStrict
.
get
(
)
)
{
return
ContentBlocking
.
EtpLevel
.
STRICT
;
}
else
if
(
mEtpEnabled
.
get
(
)
)
{
return
ContentBlocking
.
EtpLevel
.
DEFAULT
;
}
return
ContentBlocking
.
EtpLevel
.
NONE
;
}
public
CBAntiTracking
int
getSafeBrowsingCategories
(
)
{
return
ContentBlocking
.
sbMalwareToSbCat
(
mSbMalware
.
get
(
)
)
|
ContentBlocking
.
sbPhishingToSbCat
(
mSbPhishing
.
get
(
)
)
;
}
public
CBCookieBehavior
int
getCookieBehavior
(
)
{
return
mCookieBehavior
.
get
(
)
;
}
public
NonNull
Settings
setCookieBehavior
(
final
CBCookieBehavior
int
behavior
)
{
mCookieBehavior
.
commit
(
behavior
)
;
return
this
;
}
public
CBCookieLifetime
int
getCookieLifetime
(
)
{
return
mCookieLifetime
.
get
(
)
;
}
public
NonNull
Settings
setCookieLifetime
(
final
CBCookieLifetime
int
lifetime
)
{
mCookieLifetime
.
commit
(
lifetime
)
;
return
this
;
}
public
static
final
Parcelable
.
Creator
<
Settings
>
CREATOR
=
new
Parcelable
.
Creator
<
Settings
>
(
)
{
Override
public
Settings
createFromParcel
(
final
Parcel
in
)
{
final
Settings
settings
=
new
Settings
(
)
;
settings
.
readFromParcel
(
in
)
;
return
settings
;
}
Override
public
Settings
[
]
newArray
(
final
int
size
)
{
return
new
Settings
[
size
]
;
}
}
;
}
public
static
class
AntiTracking
{
public
static
final
int
NONE
=
0
;
public
static
final
int
AD
=
1
<
<
1
;
public
static
final
int
ANALYTIC
=
1
<
<
2
;
public
static
final
int
SOCIAL
=
1
<
<
3
;
public
static
final
int
CONTENT
=
1
<
<
4
;
public
static
final
int
TEST
=
1
<
<
5
;
public
static
final
int
CRYPTOMINING
=
1
<
<
6
;
public
static
final
int
FINGERPRINTING
=
1
<
<
7
;
public
static
final
int
STP
=
1
<
<
8
;
public
static
final
int
DEFAULT
=
AD
|
ANALYTIC
|
SOCIAL
|
TEST
;
public
static
final
int
STRICT
=
DEFAULT
|
CONTENT
|
CRYPTOMINING
|
FINGERPRINTING
;
protected
AntiTracking
(
)
{
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
flag
=
true
value
=
{
AntiTracking
.
AD
AntiTracking
.
ANALYTIC
AntiTracking
.
SOCIAL
AntiTracking
.
CONTENT
AntiTracking
.
TEST
AntiTracking
.
CRYPTOMINING
AntiTracking
.
FINGERPRINTING
AntiTracking
.
DEFAULT
AntiTracking
.
STRICT
AntiTracking
.
STP
AntiTracking
.
NONE
}
)
interface
CBAntiTracking
{
}
public
static
class
SafeBrowsing
{
public
static
final
int
NONE
=
0
;
public
static
final
int
MALWARE
=
1
<
<
10
;
public
static
final
int
UNWANTED
=
1
<
<
11
;
public
static
final
int
HARMFUL
=
1
<
<
12
;
public
static
final
int
PHISHING
=
1
<
<
13
;
public
static
final
int
DEFAULT
=
MALWARE
|
UNWANTED
|
HARMFUL
|
PHISHING
;
protected
SafeBrowsing
(
)
{
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
flag
=
true
value
=
{
SafeBrowsing
.
MALWARE
SafeBrowsing
.
UNWANTED
SafeBrowsing
.
HARMFUL
SafeBrowsing
.
PHISHING
SafeBrowsing
.
DEFAULT
SafeBrowsing
.
NONE
}
)
interface
CBSafeBrowsing
{
}
public
static
class
CookieBehavior
{
public
static
final
int
ACCEPT_ALL
=
0
;
public
static
final
int
ACCEPT_FIRST_PARTY
=
1
;
public
static
final
int
ACCEPT_NONE
=
2
;
public
static
final
int
ACCEPT_VISITED
=
3
;
public
static
final
int
ACCEPT_NON_TRACKERS
=
4
;
public
static
final
int
ACCEPT_FIRST_PARTY_AND_ISOLATE_OTHERS
=
5
;
protected
CookieBehavior
(
)
{
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
CookieBehavior
.
ACCEPT_ALL
CookieBehavior
.
ACCEPT_FIRST_PARTY
CookieBehavior
.
ACCEPT_NONE
CookieBehavior
.
ACCEPT_VISITED
CookieBehavior
.
ACCEPT_NON_TRACKERS
}
)
interface
CBCookieBehavior
{
}
public
static
class
CookieLifetime
{
public
static
final
int
NORMAL
=
0
;
public
static
final
int
RUNTIME
=
2
;
public
static
final
int
DAYS
=
3
;
protected
CookieLifetime
(
)
{
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
CookieLifetime
.
NORMAL
CookieLifetime
.
RUNTIME
CookieLifetime
.
DAYS
}
)
interface
CBCookieLifetime
{
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
EtpLevel
.
NONE
EtpLevel
.
DEFAULT
EtpLevel
.
STRICT
}
)
interface
CBEtpLevel
{
}
public
static
class
EtpLevel
{
public
static
final
int
NONE
=
0
;
public
static
final
int
DEFAULT
=
1
;
public
static
final
int
STRICT
=
2
;
}
public
static
class
BlockEvent
{
public
final
NonNull
String
uri
;
private
final
CBAntiTracking
int
mAntiTrackingCat
;
private
final
CBSafeBrowsing
int
mSafeBrowsingCat
;
private
final
CBCookieBehavior
int
mCookieBehaviorCat
;
private
final
boolean
mIsBlocking
;
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
BlockEvent
(
NonNull
final
String
uri
final
CBAntiTracking
int
atCat
final
CBSafeBrowsing
int
sbCat
final
CBCookieBehavior
int
cbCat
final
boolean
isBlocking
)
{
this
.
uri
=
uri
;
this
.
mAntiTrackingCat
=
atCat
;
this
.
mSafeBrowsingCat
=
sbCat
;
this
.
mCookieBehaviorCat
=
cbCat
;
this
.
mIsBlocking
=
isBlocking
;
}
UiThread
public
CBAntiTracking
int
getAntiTrackingCategory
(
)
{
return
mAntiTrackingCat
;
}
UiThread
public
CBSafeBrowsing
int
getSafeBrowsingCategory
(
)
{
return
mSafeBrowsingCat
;
}
UiThread
public
CBCookieBehavior
int
getCookieBehaviorCategory
(
)
{
return
mCookieBehaviorCat
;
}
static
BlockEvent
fromBundle
(
NonNull
final
GeckoBundle
bundle
)
{
final
String
uri
=
bundle
.
getString
(
"
uri
"
)
;
final
String
blockedList
=
bundle
.
getString
(
"
blockedList
"
)
;
final
String
loadedList
=
TextUtils
.
join
(
"
"
bundle
.
getStringArray
(
"
loadedLists
"
)
)
;
final
long
error
=
bundle
.
getLong
(
"
error
"
0L
)
;
final
long
category
=
bundle
.
getLong
(
"
category
"
0L
)
;
final
String
matchedList
=
blockedList
!
=
null
?
blockedList
:
loadedList
;
final
boolean
blocking
=
loadedList
.
isEmpty
(
)
&
&
(
blockedList
!
=
null
|
|
error
!
=
0L
|
|
ContentBlocking
.
isBlockingGeckoCbCat
(
category
)
)
;
return
new
BlockEvent
(
uri
ContentBlocking
.
atListToAtCat
(
matchedList
)
|
ContentBlocking
.
cmListToAtCat
(
matchedList
)
|
ContentBlocking
.
fpListToAtCat
(
matchedList
)
|
ContentBlocking
.
stListToAtCat
(
matchedList
)
ContentBlocking
.
errorToSbCat
(
error
)
ContentBlocking
.
geckoCatToCbCat
(
category
)
blocking
)
;
}
UiThread
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
boolean
isBlocking
(
)
{
return
mIsBlocking
;
}
}
public
interface
Delegate
{
UiThread
default
void
onContentBlocked
(
NonNull
GeckoSession
session
NonNull
BlockEvent
event
)
{
}
UiThread
default
void
onContentLoaded
(
NonNull
GeckoSession
session
NonNull
BlockEvent
event
)
{
}
}
private
static
final
String
TEST
=
"
moztest
-
track
-
simple
"
;
private
static
final
String
AD
=
"
ads
-
track
-
digest256
"
;
private
static
final
String
ANALYTIC
=
"
analytics
-
track
-
digest256
"
;
private
static
final
String
SOCIAL
=
"
social
-
track
-
digest256
"
;
private
static
final
String
CONTENT
=
"
content
-
track
-
digest256
"
;
private
static
final
String
CRYPTOMINING
=
"
base
-
cryptomining
-
track
-
digest256
"
;
private
static
final
String
FINGERPRINTING
=
"
base
-
fingerprinting
-
track
-
digest256
"
;
private
static
final
String
STP
=
"
social
-
tracking
-
protection
-
facebook
-
digest256
social
-
tracking
-
protection
-
linkedin
-
digest256
social
-
tracking
-
protection
-
twitter
-
digest256
"
;
static
CBSafeBrowsing
int
sbMalwareToSbCat
(
final
boolean
enabled
)
{
return
enabled
?
(
SafeBrowsing
.
MALWARE
|
SafeBrowsing
.
UNWANTED
|
SafeBrowsing
.
HARMFUL
)
:
SafeBrowsing
.
NONE
;
}
static
CBSafeBrowsing
int
sbPhishingToSbCat
(
final
boolean
enabled
)
{
return
enabled
?
SafeBrowsing
.
PHISHING
:
SafeBrowsing
.
NONE
;
}
static
boolean
catToSbMalware
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
(
SafeBrowsing
.
MALWARE
|
SafeBrowsing
.
UNWANTED
|
SafeBrowsing
.
HARMFUL
)
)
!
=
0
;
}
static
boolean
catToSbPhishing
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
SafeBrowsing
.
PHISHING
)
!
=
0
;
}
static
String
catToAtPref
(
CBAntiTracking
final
int
cat
)
{
StringBuilder
builder
=
new
StringBuilder
(
)
;
if
(
(
cat
&
AntiTracking
.
TEST
)
!
=
0
)
{
builder
.
append
(
TEST
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AntiTracking
.
AD
)
!
=
0
)
{
builder
.
append
(
AD
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AntiTracking
.
ANALYTIC
)
!
=
0
)
{
builder
.
append
(
ANALYTIC
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AntiTracking
.
SOCIAL
)
!
=
0
)
{
builder
.
append
(
SOCIAL
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AntiTracking
.
CONTENT
)
!
=
0
)
{
builder
.
append
(
CONTENT
)
.
append
(
'
'
)
;
}
if
(
builder
.
length
(
)
=
=
0
)
{
return
"
"
;
}
return
builder
.
substring
(
0
builder
.
length
(
)
-
1
)
;
}
static
boolean
catToCmPref
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
AntiTracking
.
CRYPTOMINING
)
!
=
0
;
}
static
String
catToCmListPref
(
CBAntiTracking
final
int
cat
)
{
StringBuilder
builder
=
new
StringBuilder
(
)
;
if
(
(
cat
&
AntiTracking
.
CRYPTOMINING
)
!
=
0
)
{
builder
.
append
(
CRYPTOMINING
)
;
}
return
builder
.
toString
(
)
;
}
static
boolean
catToFpPref
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
AntiTracking
.
FINGERPRINTING
)
!
=
0
;
}
static
String
catToFpListPref
(
CBAntiTracking
final
int
cat
)
{
StringBuilder
builder
=
new
StringBuilder
(
)
;
if
(
(
cat
&
AntiTracking
.
FINGERPRINTING
)
!
=
0
)
{
builder
.
append
(
FINGERPRINTING
)
;
}
return
builder
.
toString
(
)
;
}
static
CBAntiTracking
int
fpListToAtCat
(
final
String
list
)
{
int
cat
=
AntiTracking
.
NONE
;
if
(
list
=
=
null
)
{
return
cat
;
}
if
(
list
.
indexOf
(
FINGERPRINTING
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
FINGERPRINTING
;
}
return
cat
;
}
static
boolean
catToStPref
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
AntiTracking
.
STP
)
!
=
0
;
}
static
String
catToStListPref
(
CBAntiTracking
final
int
cat
)
{
StringBuilder
builder
=
new
StringBuilder
(
)
;
if
(
(
cat
&
AntiTracking
.
STP
)
!
=
0
)
{
builder
.
append
(
STP
)
.
append
(
"
"
)
;
}
if
(
builder
.
length
(
)
=
=
0
)
{
return
"
"
;
}
return
builder
.
substring
(
0
builder
.
length
(
)
-
1
)
;
}
static
CBAntiTracking
int
atListToAtCat
(
final
String
list
)
{
int
cat
=
AntiTracking
.
NONE
;
if
(
list
=
=
null
)
{
return
cat
;
}
if
(
list
.
indexOf
(
TEST
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
TEST
;
}
if
(
list
.
indexOf
(
AD
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
AD
;
}
if
(
list
.
indexOf
(
ANALYTIC
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
ANALYTIC
;
}
if
(
list
.
indexOf
(
SOCIAL
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
SOCIAL
;
}
if
(
list
.
indexOf
(
CONTENT
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
CONTENT
;
}
return
cat
;
}
static
CBAntiTracking
int
cmListToAtCat
(
final
String
list
)
{
int
cat
=
AntiTracking
.
NONE
;
if
(
list
=
=
null
)
{
return
cat
;
}
if
(
list
.
indexOf
(
CRYPTOMINING
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
CRYPTOMINING
;
}
return
cat
;
}
static
CBAntiTracking
int
stListToAtCat
(
final
String
list
)
{
int
cat
=
AntiTracking
.
NONE
;
if
(
list
=
=
null
)
{
return
cat
;
}
if
(
list
.
indexOf
(
STP
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
STP
;
}
return
cat
;
}
static
CBSafeBrowsing
int
errorToSbCat
(
final
long
error
)
{
if
(
error
=
=
0x805D001FL
)
{
return
SafeBrowsing
.
PHISHING
;
}
if
(
error
=
=
0x805D001EL
)
{
return
SafeBrowsing
.
MALWARE
;
}
if
(
error
=
=
0x805D0023L
)
{
return
SafeBrowsing
.
UNWANTED
;
}
if
(
error
=
=
0x805D0026L
)
{
return
SafeBrowsing
.
HARMFUL
;
}
return
SafeBrowsing
.
NONE
;
}
private
static
final
long
STATE_COOKIES_LOADED
=
0x8000L
;
private
static
final
long
STATE_COOKIES_LOADED_TRACKER
=
0x40000L
;
private
static
final
long
STATE_COOKIES_LOADED_SOCIALTRACKER
=
0x80000L
;
private
static
final
long
STATE_COOKIES_BLOCKED_TRACKER
=
0x20000000L
;
private
static
final
long
STATE_COOKIES_BLOCKED_SOCIALTRACKER
=
0x01000000L
;
private
static
final
long
STATE_COOKIES_BLOCKED_ALL
=
0x40000000L
;
private
static
final
long
STATE_COOKIES_BLOCKED_FOREIGN
=
0x80L
;
static
boolean
isBlockingGeckoCbCat
(
final
long
geckoCat
)
{
return
(
geckoCat
&
(
STATE_COOKIES_BLOCKED_TRACKER
|
STATE_COOKIES_BLOCKED_SOCIALTRACKER
|
STATE_COOKIES_BLOCKED_ALL
|
STATE_COOKIES_BLOCKED_FOREIGN
)
)
!
=
0
;
}
static
CBCookieBehavior
int
geckoCatToCbCat
(
final
long
geckoCat
)
{
if
(
(
geckoCat
&
STATE_COOKIES_LOADED
)
!
=
0
)
{
return
CookieBehavior
.
ACCEPT_NONE
;
}
if
(
(
geckoCat
&
STATE_COOKIES_BLOCKED_FOREIGN
)
!
=
0
)
{
return
CookieBehavior
.
ACCEPT_FIRST_PARTY
;
}
if
(
(
geckoCat
&
(
STATE_COOKIES_BLOCKED_TRACKER
|
STATE_COOKIES_BLOCKED_SOCIALTRACKER
|
STATE_COOKIES_LOADED_TRACKER
|
STATE_COOKIES_LOADED_SOCIALTRACKER
)
)
!
=
0
)
{
return
CookieBehavior
.
ACCEPT_NON_TRACKERS
;
}
if
(
(
geckoCat
&
STATE_COOKIES_BLOCKED_ALL
)
!
=
0
)
{
return
CookieBehavior
.
ACCEPT_NONE
;
}
return
CookieBehavior
.
ACCEPT_ALL
;
}
}
