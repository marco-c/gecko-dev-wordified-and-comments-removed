package
org
.
mozilla
.
geckoview
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
android
.
text
.
TextUtils
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
UiThread
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
AnyThread
public
class
ContentBlocking
{
public
static
final
SafeBrowsingProvider
GOOGLE_LEGACY_SAFE_BROWSING_PROVIDER
=
SafeBrowsingProvider
.
withName
(
"
google
"
)
.
version
(
"
2
.
2
"
)
.
lists
(
"
goog
-
badbinurl
-
shavar
"
"
goog
-
downloadwhite
-
digest256
"
"
goog
-
phish
-
shavar
"
"
googpub
-
phish
-
shavar
"
"
goog
-
malware
-
shavar
"
"
goog
-
unwanted
-
shavar
"
)
.
updateUrl
(
"
https
:
/
/
safebrowsing
.
google
.
com
/
safebrowsing
/
downloads
?
client
=
SAFEBROWSING_ID
&
appver
=
%
MAJOR_VERSION
%
&
pver
=
2
.
2
&
key
=
%
GOOGLE_SAFEBROWSING_API_KEY
%
"
)
.
getHashUrl
(
"
https
:
/
/
safebrowsing
.
google
.
com
/
safebrowsing
/
gethash
?
client
=
SAFEBROWSING_ID
&
appver
=
%
MAJOR_VERSION
%
&
pver
=
2
.
2
"
)
.
reportUrl
(
"
https
:
/
/
safebrowsing
.
google
.
com
/
safebrowsing
/
diagnostic
?
site
=
"
)
.
reportPhishingMistakeUrl
(
"
https
:
/
/
%
LOCALE
%
.
phish
-
error
.
mozilla
.
com
/
?
url
=
"
)
.
reportMalwareMistakeUrl
(
"
https
:
/
/
%
LOCALE
%
.
malware
-
error
.
mozilla
.
com
/
?
url
=
"
)
.
advisoryUrl
(
"
https
:
/
/
developers
.
google
.
com
/
safe
-
browsing
/
v4
/
advisory
"
)
.
advisoryName
(
"
Google
Safe
Browsing
"
)
.
build
(
)
;
public
static
final
SafeBrowsingProvider
GOOGLE_SAFE_BROWSING_PROVIDER
=
SafeBrowsingProvider
.
withName
(
"
google4
"
)
.
version
(
"
4
"
)
.
lists
(
"
goog
-
badbinurl
-
proto
"
"
goog
-
downloadwhite
-
proto
"
"
goog
-
phish
-
proto
"
"
googpub
-
phish
-
proto
"
"
goog
-
malware
-
proto
"
"
goog
-
unwanted
-
proto
"
"
goog
-
harmful
-
proto
"
)
.
updateUrl
(
"
https
:
/
/
safebrowsing
.
googleapis
.
com
/
v4
/
threatListUpdates
:
fetch
?
ct
=
application
/
x
-
protobuf
&
key
=
%
GOOGLE_SAFEBROWSING_API_KEY
%
&
httpMethod
=
POST
"
)
.
getHashUrl
(
"
https
:
/
/
safebrowsing
.
googleapis
.
com
/
v4
/
fullHashes
:
find
?
ct
=
application
/
x
-
protobuf
&
key
=
%
GOOGLE_SAFEBROWSING_API_KEY
%
&
httpMethod
=
POST
"
)
.
reportUrl
(
"
https
:
/
/
safebrowsing
.
google
.
com
/
safebrowsing
/
diagnostic
?
site
=
"
)
.
reportPhishingMistakeUrl
(
"
https
:
/
/
%
LOCALE
%
.
phish
-
error
.
mozilla
.
com
/
?
url
=
"
)
.
reportMalwareMistakeUrl
(
"
https
:
/
/
%
LOCALE
%
.
malware
-
error
.
mozilla
.
com
/
?
url
=
"
)
.
advisoryUrl
(
"
https
:
/
/
developers
.
google
.
com
/
safe
-
browsing
/
v4
/
advisory
"
)
.
advisoryName
(
"
Google
Safe
Browsing
"
)
.
dataSharingUrl
(
"
https
:
/
/
safebrowsing
.
googleapis
.
com
/
v4
/
threatHits
?
ct
=
application
/
x
-
protobuf
&
key
=
%
GOOGLE_SAFEBROWSING_API_KEY
%
&
httpMethod
=
POST
"
)
.
dataSharingEnabled
(
false
)
.
build
(
)
;
protected
ContentBlocking
(
)
{
}
AnyThread
public
static
class
Settings
extends
RuntimeSettings
{
private
final
Map
<
String
SafeBrowsingProvider
>
mSafeBrowsingProviders
=
new
HashMap
<
>
(
)
;
private
static
final
SafeBrowsingProvider
[
]
DEFAULT_PROVIDERS
=
{
ContentBlocking
.
GOOGLE_LEGACY_SAFE_BROWSING_PROVIDER
ContentBlocking
.
GOOGLE_SAFE_BROWSING_PROVIDER
}
;
AnyThread
public
static
class
Builder
extends
RuntimeSettings
.
Builder
<
Settings
>
{
Override
protected
NonNull
Settings
newSettings
(
final
Nullable
Settings
settings
)
{
return
new
Settings
(
settings
)
;
}
public
NonNull
Builder
safeBrowsingProviders
(
final
NonNull
SafeBrowsingProvider
.
.
.
providers
)
{
getSettings
(
)
.
setSafeBrowsingProviders
(
providers
)
;
return
this
;
}
public
NonNull
Builder
safeBrowsingPhishingTable
(
final
NonNull
String
[
]
safeBrowsingPhishingTable
)
{
getSettings
(
)
.
setSafeBrowsingPhishingTable
(
safeBrowsingPhishingTable
)
;
return
this
;
}
public
NonNull
Builder
safeBrowsingMalwareTable
(
final
NonNull
String
[
]
safeBrowsingMalwareTable
)
{
getSettings
(
)
.
setSafeBrowsingMalwareTable
(
safeBrowsingMalwareTable
)
;
return
this
;
}
public
NonNull
Builder
antiTracking
(
final
CBAntiTracking
int
cat
)
{
getSettings
(
)
.
setAntiTracking
(
cat
)
;
return
this
;
}
public
NonNull
Builder
safeBrowsing
(
final
CBSafeBrowsing
int
cat
)
{
getSettings
(
)
.
setSafeBrowsing
(
cat
)
;
return
this
;
}
public
NonNull
Builder
cookieBehavior
(
final
CBCookieBehavior
int
behavior
)
{
getSettings
(
)
.
setCookieBehavior
(
behavior
)
;
return
this
;
}
public
NonNull
Builder
cookieBehaviorPrivateMode
(
final
CBCookieBehavior
int
behavior
)
{
getSettings
(
)
.
setCookieBehaviorPrivateMode
(
behavior
)
;
return
this
;
}
public
NonNull
Builder
enhancedTrackingProtectionLevel
(
final
CBEtpLevel
int
level
)
{
getSettings
(
)
.
setEnhancedTrackingProtectionLevel
(
level
)
;
return
this
;
}
public
NonNull
Builder
emailTrackerBlockingPrivateMode
(
final
boolean
enabled
)
{
getSettings
(
)
.
setEmailTrackerBlockingPrivateBrowsing
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
strictSocialTrackingProtection
(
final
boolean
enabled
)
{
getSettings
(
)
.
setStrictSocialTrackingProtection
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
cookiePurging
(
final
boolean
enabled
)
{
getSettings
(
)
.
setCookiePurging
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
cookieBannerHandlingMode
(
final
CBCookieBannerMode
int
mode
)
{
getSettings
(
)
.
setCookieBannerMode
(
mode
)
;
return
this
;
}
public
NonNull
Builder
cookieBannerGlobalRulesEnabled
(
final
boolean
enabled
)
{
getSettings
(
)
.
setCookieBannerGlobalRulesEnabled
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
cookieBannerGlobalRulesSubFramesEnabled
(
final
boolean
enabled
)
{
getSettings
(
)
.
setCookieBannerGlobalRulesSubFramesEnabled
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
queryParameterStrippingEnabled
(
final
boolean
enabled
)
{
getSettings
(
)
.
setQueryParameterStrippingEnabled
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
queryParameterStrippingPrivateBrowsingEnabled
(
final
boolean
enabled
)
{
getSettings
(
)
.
setQueryParameterStrippingPrivateBrowsingEnabled
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
queryParameterStrippingAllowList
(
final
NonNull
String
.
.
.
list
)
{
getSettings
(
)
.
setQueryParameterStrippingAllowList
(
list
)
;
return
this
;
}
public
NonNull
Builder
queryParameterStrippingStripList
(
final
NonNull
String
.
.
.
list
)
{
getSettings
(
)
.
setQueryParameterStrippingStripList
(
list
)
;
return
this
;
}
public
NonNull
Builder
cookieBannerHandlingModePrivateBrowsing
(
final
CBCookieBannerMode
int
mode
)
{
getSettings
(
)
.
setCookieBannerModePrivateBrowsing
(
mode
)
;
return
this
;
}
public
NonNull
Builder
cookieBannerHandlingDetectOnlyMode
(
final
boolean
enabled
)
{
getSettings
(
)
.
setCookieBannerDetectOnlyMode
(
enabled
)
;
return
this
;
}
}
final
Pref
<
String
>
mAt
=
new
Pref
<
String
>
(
"
urlclassifier
.
trackingTable
"
ContentBlocking
.
catToAtPref
(
AntiTracking
.
DEFAULT
)
)
;
final
Pref
<
Boolean
>
mCm
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
cryptomining
.
enabled
"
false
)
;
final
Pref
<
String
>
mCmList
=
new
Pref
<
String
>
(
"
urlclassifier
.
features
.
cryptomining
.
blacklistTables
"
ContentBlocking
.
catToCmListPref
(
AntiTracking
.
NONE
)
)
;
final
Pref
<
Boolean
>
mFp
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
fingerprinting
.
enabled
"
false
)
;
final
Pref
<
String
>
mFpList
=
new
Pref
<
String
>
(
"
urlclassifier
.
features
.
fingerprinting
.
blacklistTables
"
ContentBlocking
.
catToFpListPref
(
AntiTracking
.
NONE
)
)
;
final
Pref
<
Boolean
>
mSt
=
new
Pref
<
Boolean
>
(
"
privacy
.
socialtracking
.
block_cookies
.
enabled
"
false
)
;
final
Pref
<
Boolean
>
mStStrict
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
socialtracking
.
enabled
"
false
)
;
final
Pref
<
String
>
mStList
=
new
Pref
<
String
>
(
"
urlclassifier
.
features
.
socialtracking
.
annotate
.
blacklistTables
"
ContentBlocking
.
catToPref
(
AntiTracking
.
NONE
AntiTracking
.
STP
STP
)
)
;
final
Pref
<
Boolean
>
mSbMalware
=
new
Pref
<
Boolean
>
(
"
browser
.
safebrowsing
.
malware
.
enabled
"
true
)
;
final
Pref
<
Boolean
>
mSbPhishing
=
new
Pref
<
Boolean
>
(
"
browser
.
safebrowsing
.
phishing
.
enabled
"
true
)
;
final
Pref
<
Integer
>
mCookieBehavior
=
new
Pref
<
Integer
>
(
"
network
.
cookie
.
cookieBehavior
"
CookieBehavior
.
ACCEPT_NON_TRACKERS
)
;
final
Pref
<
Integer
>
mCookieBehaviorPrivateMode
=
new
Pref
<
Integer
>
(
"
network
.
cookie
.
cookieBehavior
.
pbmode
"
CookieBehavior
.
ACCEPT_NON_TRACKERS
)
;
final
Pref
<
Boolean
>
mCookiePurging
=
new
Pref
<
Boolean
>
(
"
privacy
.
purge_trackers
.
enabled
"
false
)
;
final
Pref
<
Boolean
>
mEtpEnabled
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
annotate_channels
"
false
)
;
final
Pref
<
Boolean
>
mEtpStrict
=
new
Pref
<
Boolean
>
(
"
privacy
.
annotate_channels
.
strict_list
.
enabled
"
false
)
;
final
Pref
<
Integer
>
mCbhMode
=
new
Pref
<
Integer
>
(
"
cookiebanners
.
service
.
mode
"
CookieBannerMode
.
COOKIE_BANNER_MODE_DISABLED
)
;
final
Pref
<
Integer
>
mCbhModePrivateBrowsing
=
new
Pref
<
Integer
>
(
"
cookiebanners
.
service
.
mode
.
privateBrowsing
"
CookieBannerMode
.
COOKIE_BANNER_MODE_REJECT
)
;
final
Pref
<
Boolean
>
mChbDetectOnlyMode
=
new
Pref
<
Boolean
>
(
"
cookiebanners
.
service
.
detectOnly
"
false
)
;
final
Pref
<
Boolean
>
mCbhGlobalRulesEnabled
=
new
Pref
<
Boolean
>
(
"
cookiebanners
.
service
.
enableGlobalRules
"
false
)
;
final
Pref
<
Boolean
>
mCbhGlobalRulesSubFramesEnabled
=
new
Pref
<
Boolean
>
(
"
cookiebanners
.
service
.
enableGlobalRules
.
subFrames
"
false
)
;
final
Pref
<
Boolean
>
mQueryParameterStrippingEnabled
=
new
Pref
<
Boolean
>
(
"
privacy
.
query_stripping
.
enabled
"
false
)
;
final
Pref
<
Boolean
>
mQueryParameterStrippingPrivateBrowsingEnabled
=
new
Pref
<
Boolean
>
(
"
privacy
.
query_stripping
.
enabled
.
pbmode
"
false
)
;
final
Pref
<
String
>
mQueryParameterStrippingAllowList
=
new
Pref
<
>
(
"
privacy
.
query_stripping
.
allow_list
"
"
"
)
;
final
Pref
<
String
>
mQueryParameterStrippingStripList
=
new
Pref
<
>
(
"
privacy
.
query_stripping
.
strip_list
"
"
"
)
;
final
Pref
<
Boolean
>
mEtb
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
emailtracking
.
enabled
"
false
)
;
final
Pref
<
Boolean
>
mEtbPrivateBrowsing
=
new
Pref
<
Boolean
>
(
"
privacy
.
trackingprotection
.
emailtracking
.
pbmode
.
enabled
"
false
)
;
final
Pref
<
String
>
mEtbList
=
new
Pref
<
String
>
(
"
urlclassifier
.
features
.
emailtracking
.
blocklistTables
"
ContentBlocking
.
catToPref
(
AntiTracking
.
NONE
AntiTracking
.
EMAIL
EMAIL
)
)
;
final
Pref
<
String
>
mSafeBrowsingMalwareTable
=
new
Pref
<
>
(
"
urlclassifier
.
malwareTable
"
ContentBlocking
.
listsToPref
(
"
goog
-
malware
-
proto
"
"
goog
-
unwanted
-
proto
"
"
moztest
-
harmful
-
simple
"
"
moztest
-
malware
-
simple
"
"
moztest
-
unwanted
-
simple
"
)
)
;
final
Pref
<
String
>
mSafeBrowsingPhishingTable
=
new
Pref
<
>
(
"
urlclassifier
.
phishTable
"
ContentBlocking
.
listsToPref
(
BuildConfig
.
MOZILLA_OFFICIAL
?
"
goog
-
phish
-
proto
"
:
"
googpub
-
phish
-
proto
"
"
moztest
-
phish
-
simple
"
)
)
;
Settings
(
)
{
this
(
null
)
;
}
Settings
(
final
Nullable
Settings
settings
)
{
this
(
null
settings
)
;
}
Settings
(
final
Nullable
RuntimeSettings
parent
final
Nullable
Settings
settings
)
{
super
(
parent
)
;
if
(
settings
!
=
null
)
{
updatePrefs
(
settings
)
;
}
else
{
setSafeBrowsingProviders
(
DEFAULT_PROVIDERS
)
;
}
}
Override
protected
void
updatePrefs
(
final
NonNull
RuntimeSettings
settings
)
{
super
.
updatePrefs
(
settings
)
;
final
ContentBlocking
.
Settings
source
=
(
ContentBlocking
.
Settings
)
settings
;
for
(
final
SafeBrowsingProvider
provider
:
source
.
mSafeBrowsingProviders
.
values
(
)
)
{
mSafeBrowsingProviders
.
put
(
provider
.
getName
(
)
new
SafeBrowsingProvider
(
this
provider
)
)
;
}
}
public
NonNull
Collection
<
SafeBrowsingProvider
>
getSafeBrowsingProviders
(
)
{
return
Collections
.
unmodifiableCollection
(
mSafeBrowsingProviders
.
values
(
)
)
;
}
public
NonNull
Settings
setSafeBrowsingProviders
(
final
NonNull
SafeBrowsingProvider
.
.
.
providers
)
{
mSafeBrowsingProviders
.
clear
(
)
;
for
(
final
SafeBrowsingProvider
provider
:
providers
)
{
mSafeBrowsingProviders
.
put
(
provider
.
getName
(
)
new
SafeBrowsingProvider
(
this
provider
)
)
;
}
return
this
;
}
public
NonNull
String
[
]
getSafeBrowsingPhishingTable
(
)
{
return
ContentBlocking
.
prefToLists
(
mSafeBrowsingPhishingTable
.
get
(
)
)
;
}
public
NonNull
Settings
setSafeBrowsingPhishingTable
(
final
NonNull
String
.
.
.
table
)
{
mSafeBrowsingPhishingTable
.
commit
(
ContentBlocking
.
listsToPref
(
table
)
)
;
return
this
;
}
public
NonNull
String
[
]
getSafeBrowsingMalwareTable
(
)
{
return
ContentBlocking
.
prefToLists
(
mSafeBrowsingMalwareTable
.
get
(
)
)
;
}
public
NonNull
Settings
setQueryParameterStrippingAllowList
(
final
NonNull
String
.
.
.
list
)
{
mQueryParameterStrippingAllowList
.
commit
(
ContentBlocking
.
listsToPref
(
list
)
)
;
return
this
;
}
public
NonNull
String
[
]
getQueryParameterStrippingAllowList
(
)
{
return
ContentBlocking
.
prefToLists
(
mQueryParameterStrippingAllowList
.
get
(
)
)
;
}
public
NonNull
Settings
setQueryParameterStrippingStripList
(
final
NonNull
String
.
.
.
list
)
{
mQueryParameterStrippingStripList
.
commit
(
ContentBlocking
.
listsToPref
(
list
)
)
;
return
this
;
}
public
NonNull
String
[
]
getQueryParameterStrippingStripList
(
)
{
return
ContentBlocking
.
prefToLists
(
mQueryParameterStrippingStripList
.
get
(
)
)
;
}
public
NonNull
Settings
setSafeBrowsingMalwareTable
(
final
NonNull
String
.
.
.
table
)
{
mSafeBrowsingMalwareTable
.
commit
(
ContentBlocking
.
listsToPref
(
table
)
)
;
return
this
;
}
public
NonNull
Settings
setAntiTracking
(
final
CBAntiTracking
int
cat
)
{
mAt
.
commit
(
ContentBlocking
.
catToAtPref
(
cat
)
)
;
mCm
.
commit
(
ContentBlocking
.
catToCmPref
(
cat
)
)
;
mCmList
.
commit
(
ContentBlocking
.
catToCmListPref
(
cat
)
)
;
mFp
.
commit
(
ContentBlocking
.
catToFpPref
(
cat
)
)
;
mFpList
.
commit
(
ContentBlocking
.
catToFpListPref
(
cat
)
)
;
mSt
.
commit
(
ContentBlocking
.
catToStPref
(
cat
)
)
;
mStList
.
commit
(
ContentBlocking
.
catToPref
(
cat
AntiTracking
.
STP
STP
)
)
;
mEtb
.
commit
(
ContentBlocking
.
catToEtbPref
(
cat
)
)
;
mEtbList
.
commit
(
ContentBlocking
.
catToPref
(
cat
AntiTracking
.
EMAIL
EMAIL
)
)
;
return
this
;
}
public
NonNull
Settings
setEnhancedTrackingProtectionLevel
(
final
CBEtpLevel
int
level
)
{
mEtpEnabled
.
commit
(
level
=
=
ContentBlocking
.
EtpLevel
.
DEFAULT
|
|
level
=
=
ContentBlocking
.
EtpLevel
.
STRICT
)
;
mEtpStrict
.
commit
(
level
=
=
ContentBlocking
.
EtpLevel
.
STRICT
)
;
return
this
;
}
public
NonNull
Settings
setStrictSocialTrackingProtection
(
final
boolean
enabled
)
{
mStStrict
.
commit
(
enabled
)
;
return
this
;
}
public
NonNull
Settings
setSafeBrowsing
(
final
CBSafeBrowsing
int
cat
)
{
mSbMalware
.
commit
(
ContentBlocking
.
catToSbMalware
(
cat
)
)
;
mSbPhishing
.
commit
(
ContentBlocking
.
catToSbPhishing
(
cat
)
)
;
return
this
;
}
public
CBAntiTracking
int
getAntiTrackingCategories
(
)
{
return
ContentBlocking
.
atListToAtCat
(
mAt
.
get
(
)
)
|
ContentBlocking
.
cmListToAtCat
(
mCmList
.
get
(
)
)
|
ContentBlocking
.
fpListToAtCat
(
mFpList
.
get
(
)
)
|
ContentBlocking
.
stListToAtCat
(
mStList
.
get
(
)
)
|
ContentBlocking
.
etbListToAtCat
(
mEtbList
.
get
(
)
)
;
}
public
CBEtpLevel
int
getEnhancedTrackingProtectionLevel
(
)
{
if
(
mEtpStrict
.
get
(
)
)
{
return
ContentBlocking
.
EtpLevel
.
STRICT
;
}
else
if
(
mEtpEnabled
.
get
(
)
)
{
return
ContentBlocking
.
EtpLevel
.
DEFAULT
;
}
return
ContentBlocking
.
EtpLevel
.
NONE
;
}
public
boolean
getStrictSocialTrackingProtection
(
)
{
return
mStStrict
.
get
(
)
;
}
public
CBSafeBrowsing
int
getSafeBrowsingCategories
(
)
{
return
ContentBlocking
.
sbMalwareToSbCat
(
mSbMalware
.
get
(
)
)
|
ContentBlocking
.
sbPhishingToSbCat
(
mSbPhishing
.
get
(
)
)
;
}
SuppressLint
(
"
WrongConstant
"
)
public
CBCookieBehavior
int
getCookieBehavior
(
)
{
return
mCookieBehavior
.
get
(
)
;
}
public
NonNull
Settings
setCookieBehavior
(
final
CBCookieBehavior
int
behavior
)
{
mCookieBehavior
.
commit
(
behavior
)
;
return
this
;
}
SuppressLint
(
"
WrongConstant
"
)
public
CBCookieBehavior
int
getCookieBehaviorPrivateMode
(
)
{
return
mCookieBehaviorPrivateMode
.
get
(
)
;
}
public
NonNull
Settings
setCookieBehaviorPrivateMode
(
final
CBCookieBehavior
int
behavior
)
{
mCookieBehaviorPrivateMode
.
commit
(
behavior
)
;
return
this
;
}
public
boolean
getCookiePurging
(
)
{
return
mCookiePurging
.
get
(
)
;
}
public
NonNull
Settings
setCookiePurging
(
final
boolean
enabled
)
{
mCookiePurging
.
commit
(
enabled
)
;
return
this
;
}
public
NonNull
Settings
setCookieBannerMode
(
final
CBCookieBannerMode
int
mode
)
{
mCbhMode
.
commit
(
mode
)
;
return
this
;
}
public
NonNull
Settings
setCookieBannerDetectOnlyMode
(
final
boolean
enabled
)
{
mChbDetectOnlyMode
.
commit
(
enabled
)
;
return
this
;
}
public
NonNull
Settings
setCookieBannerGlobalRulesEnabled
(
final
boolean
enabled
)
{
mCbhGlobalRulesEnabled
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getCookieBannerGlobalRulesEnabled
(
)
{
return
mCbhGlobalRulesEnabled
.
get
(
)
;
}
public
NonNull
Settings
setCookieBannerGlobalRulesSubFramesEnabled
(
final
boolean
enabled
)
{
mCbhGlobalRulesSubFramesEnabled
.
commit
(
enabled
)
;
return
this
;
}
public
NonNull
Boolean
getEmailTrackerBlockingPrivateBrowsingEnabled
(
)
{
return
mEtbPrivateBrowsing
.
get
(
)
;
}
public
NonNull
Settings
setEmailTrackerBlockingPrivateBrowsing
(
final
boolean
enabled
)
{
mEtbPrivateBrowsing
.
commit
(
enabled
)
;
return
this
;
}
public
NonNull
Settings
setQueryParameterStrippingEnabled
(
final
boolean
enabled
)
{
mQueryParameterStrippingEnabled
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getQueryParameterStrippingEnabled
(
)
{
return
mQueryParameterStrippingEnabled
.
get
(
)
;
}
public
NonNull
Settings
setQueryParameterStrippingPrivateBrowsingEnabled
(
final
boolean
enabled
)
{
mQueryParameterStrippingPrivateBrowsingEnabled
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getQueryParameterStrippingPrivateBrowsingEnabled
(
)
{
return
mQueryParameterStrippingPrivateBrowsingEnabled
.
get
(
)
;
}
public
boolean
getCookieBannerGlobalRulesSubFramesEnabled
(
)
{
return
mCbhGlobalRulesSubFramesEnabled
.
get
(
)
;
}
public
boolean
getCookieBannerDetectOnlyMode
(
)
{
return
mChbDetectOnlyMode
.
get
(
)
;
}
SuppressLint
(
"
WrongConstant
"
)
public
CBCookieBannerMode
int
getCookieBannerMode
(
)
{
return
mCbhMode
.
get
(
)
;
}
public
NonNull
Settings
setCookieBannerModePrivateBrowsing
(
final
CBCookieBannerMode
int
mode
)
{
mCbhModePrivateBrowsing
.
commit
(
mode
)
;
return
this
;
}
SuppressLint
(
"
WrongConstant
"
)
public
CBCookieBannerMode
int
getCookieBannerModePrivateBrowsing
(
)
{
return
mCbhModePrivateBrowsing
.
get
(
)
;
}
public
static
final
Parcelable
.
Creator
<
Settings
>
CREATOR
=
new
Parcelable
.
Creator
<
Settings
>
(
)
{
Override
public
Settings
createFromParcel
(
final
Parcel
in
)
{
final
Settings
settings
=
new
Settings
(
)
;
settings
.
readFromParcel
(
in
)
;
return
settings
;
}
Override
public
Settings
[
]
newArray
(
final
int
size
)
{
return
new
Settings
[
size
]
;
}
}
;
}
AnyThread
public
static
class
SafeBrowsingProvider
extends
RuntimeSettings
{
private
static
final
String
ROOT
=
"
browser
.
safebrowsing
.
provider
.
"
;
private
final
String
mName
;
final
Pref
<
String
>
mVersion
;
final
Pref
<
String
>
mLists
;
final
Pref
<
String
>
mUpdateUrl
;
final
Pref
<
String
>
mGetHashUrl
;
final
Pref
<
String
>
mReportUrl
;
final
Pref
<
String
>
mReportPhishingMistakeUrl
;
final
Pref
<
String
>
mReportMalwareMistakeUrl
;
final
Pref
<
String
>
mAdvisoryUrl
;
final
Pref
<
String
>
mAdvisoryName
;
final
Pref
<
String
>
mDataSharingUrl
;
final
Pref
<
Boolean
>
mDataSharingEnabled
;
NonNull
public
static
Builder
withName
(
final
NonNull
String
name
)
{
if
(
"
mozilla
"
.
equals
(
name
)
)
{
throw
new
IllegalArgumentException
(
"
The
'
mozilla
'
name
is
reserved
for
internal
use
.
"
)
;
}
return
new
Builder
(
name
)
;
}
NonNull
public
static
Builder
from
(
final
NonNull
SafeBrowsingProvider
provider
)
{
return
new
Builder
(
provider
)
;
}
AnyThread
public
static
class
Builder
{
final
SafeBrowsingProvider
mProvider
;
private
Builder
(
final
String
name
)
{
mProvider
=
new
SafeBrowsingProvider
(
name
)
;
}
private
Builder
(
final
SafeBrowsingProvider
source
)
{
mProvider
=
new
SafeBrowsingProvider
(
source
)
;
}
public
NonNull
Builder
version
(
final
NonNull
String
version
)
{
mProvider
.
mVersion
.
set
(
version
)
;
return
this
;
}
public
NonNull
Builder
lists
(
final
NonNull
String
.
.
.
lists
)
{
mProvider
.
mLists
.
set
(
ContentBlocking
.
listsToPref
(
lists
)
)
;
return
this
;
}
public
NonNull
Builder
updateUrl
(
final
NonNull
String
updateUrl
)
{
mProvider
.
mUpdateUrl
.
set
(
updateUrl
)
;
return
this
;
}
public
NonNull
Builder
getHashUrl
(
final
NonNull
String
getHashUrl
)
{
mProvider
.
mGetHashUrl
.
set
(
getHashUrl
)
;
return
this
;
}
public
NonNull
Builder
reportUrl
(
final
NonNull
String
reportUrl
)
{
mProvider
.
mReportUrl
.
set
(
reportUrl
)
;
return
this
;
}
public
NonNull
Builder
reportPhishingMistakeUrl
(
final
NonNull
String
reportPhishingMistakeUrl
)
{
mProvider
.
mReportPhishingMistakeUrl
.
set
(
reportPhishingMistakeUrl
)
;
return
this
;
}
public
NonNull
Builder
reportMalwareMistakeUrl
(
final
NonNull
String
reportMalwareMistakeUrl
)
{
mProvider
.
mReportMalwareMistakeUrl
.
set
(
reportMalwareMistakeUrl
)
;
return
this
;
}
public
NonNull
Builder
advisoryUrl
(
final
NonNull
String
advisoryUrl
)
{
mProvider
.
mAdvisoryUrl
.
set
(
advisoryUrl
)
;
return
this
;
}
public
NonNull
Builder
advisoryName
(
final
NonNull
String
advisoryName
)
{
mProvider
.
mAdvisoryName
.
set
(
advisoryName
)
;
return
this
;
}
public
NonNull
Builder
dataSharingUrl
(
final
NonNull
String
dataSharingUrl
)
{
mProvider
.
mDataSharingUrl
.
set
(
dataSharingUrl
)
;
return
this
;
}
public
NonNull
Builder
dataSharingEnabled
(
final
boolean
dataSharingEnabled
)
{
mProvider
.
mDataSharingEnabled
.
set
(
dataSharingEnabled
)
;
return
this
;
}
public
NonNull
SafeBrowsingProvider
build
(
)
{
return
new
SafeBrowsingProvider
(
mProvider
)
;
}
}
SafeBrowsingProvider
(
final
SafeBrowsingProvider
source
)
{
this
(
null
null
source
)
;
}
SafeBrowsingProvider
(
final
RuntimeSettings
parent
final
SafeBrowsingProvider
source
)
{
this
(
null
parent
source
)
;
}
SafeBrowsingProvider
(
final
String
name
)
{
this
(
name
null
null
)
;
}
SafeBrowsingProvider
(
final
String
name
final
RuntimeSettings
parent
final
SafeBrowsingProvider
source
)
{
super
(
parent
)
;
if
(
name
!
=
null
)
{
mName
=
name
;
}
else
if
(
source
!
=
null
)
{
mName
=
source
.
mName
;
}
else
{
throw
new
IllegalArgumentException
(
"
Either
name
or
source
must
be
non
-
null
"
)
;
}
mVersion
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
pver
"
null
)
;
mLists
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
lists
"
null
)
;
mUpdateUrl
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
updateURL
"
null
)
;
mGetHashUrl
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
gethashURL
"
null
)
;
mReportUrl
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
reportURL
"
null
)
;
mReportPhishingMistakeUrl
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
reportPhishMistakeURL
"
null
)
;
mReportMalwareMistakeUrl
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
reportMalwareMistakeURL
"
null
)
;
mAdvisoryUrl
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
advisoryURL
"
null
)
;
mAdvisoryName
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
advisoryName
"
null
)
;
mDataSharingUrl
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
dataSharingURL
"
null
)
;
mDataSharingEnabled
=
new
Pref
<
>
(
ROOT
+
mName
+
"
.
dataSharing
.
enabled
"
false
)
;
if
(
source
!
=
null
)
{
updatePrefs
(
source
)
;
}
}
public
NonNull
String
getName
(
)
{
return
mName
;
}
public
Nullable
String
getVersion
(
)
{
return
mVersion
.
get
(
)
;
}
public
NonNull
String
[
]
getLists
(
)
{
return
ContentBlocking
.
prefToLists
(
mLists
.
get
(
)
)
;
}
public
Nullable
String
getUpdateUrl
(
)
{
return
mUpdateUrl
.
get
(
)
;
}
public
Nullable
String
getGetHashUrl
(
)
{
return
mGetHashUrl
.
get
(
)
;
}
public
Nullable
String
getReportUrl
(
)
{
return
mReportUrl
.
get
(
)
;
}
public
Nullable
String
getReportPhishingMistakeUrl
(
)
{
return
mReportPhishingMistakeUrl
.
get
(
)
;
}
public
Nullable
String
getReportMalwareMistakeUrl
(
)
{
return
mReportMalwareMistakeUrl
.
get
(
)
;
}
public
Nullable
String
getAdvisoryUrl
(
)
{
return
mAdvisoryUrl
.
get
(
)
;
}
public
Nullable
String
getAdvisoryName
(
)
{
return
mAdvisoryName
.
get
(
)
;
}
public
Nullable
String
getDataSharingUrl
(
)
{
return
mDataSharingUrl
.
get
(
)
;
}
public
Nullable
Boolean
getDataSharingEnabled
(
)
{
return
mDataSharingEnabled
.
get
(
)
;
}
Override
AnyThread
public
void
writeToParcel
(
final
Parcel
out
final
int
flags
)
{
out
.
writeValue
(
mName
)
;
super
.
writeToParcel
(
out
flags
)
;
}
public
static
final
Parcelable
.
Creator
<
SafeBrowsingProvider
>
CREATOR
=
new
Parcelable
.
Creator
<
SafeBrowsingProvider
>
(
)
{
Override
public
SafeBrowsingProvider
createFromParcel
(
final
Parcel
source
)
{
final
String
name
=
(
String
)
source
.
readValue
(
getClass
(
)
.
getClassLoader
(
)
)
;
final
SafeBrowsingProvider
settings
=
new
SafeBrowsingProvider
(
name
)
;
settings
.
readFromParcel
(
source
)
;
return
settings
;
}
Override
public
SafeBrowsingProvider
[
]
newArray
(
final
int
size
)
{
return
new
SafeBrowsingProvider
[
size
]
;
}
}
;
}
private
static
String
listsToPref
(
final
String
.
.
.
lists
)
{
final
StringBuilder
prefBuilder
=
new
StringBuilder
(
)
;
for
(
final
String
list
:
lists
)
{
if
(
list
.
contains
(
"
"
)
)
{
throw
new
IllegalArgumentException
(
"
List
name
cannot
contain
'
'
character
.
"
)
;
}
prefBuilder
.
append
(
list
)
;
prefBuilder
.
append
(
"
"
)
;
}
if
(
lists
.
length
>
0
)
{
prefBuilder
.
setLength
(
prefBuilder
.
length
(
)
-
1
)
;
}
return
prefBuilder
.
toString
(
)
;
}
private
static
String
[
]
prefToLists
(
final
String
pref
)
{
return
pref
!
=
null
?
pref
.
split
(
"
"
)
:
new
String
[
]
{
}
;
}
public
static
class
AntiTracking
{
public
static
final
int
NONE
=
0
;
public
static
final
int
AD
=
1
<
<
1
;
public
static
final
int
ANALYTIC
=
1
<
<
2
;
public
static
final
int
SOCIAL
=
1
<
<
3
;
public
static
final
int
CONTENT
=
1
<
<
4
;
public
static
final
int
TEST
=
1
<
<
5
;
public
static
final
int
CRYPTOMINING
=
1
<
<
6
;
public
static
final
int
FINGERPRINTING
=
1
<
<
7
;
public
static
final
int
STP
=
1
<
<
8
;
public
static
final
int
EMAIL
=
1
<
<
9
;
public
static
final
int
DEFAULT
=
AD
|
ANALYTIC
|
SOCIAL
|
TEST
;
public
static
final
int
STRICT
=
DEFAULT
|
CONTENT
|
CRYPTOMINING
|
FINGERPRINTING
|
EMAIL
;
protected
AntiTracking
(
)
{
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
flag
=
true
value
=
{
AntiTracking
.
AD
AntiTracking
.
ANALYTIC
AntiTracking
.
SOCIAL
AntiTracking
.
CONTENT
AntiTracking
.
TEST
AntiTracking
.
CRYPTOMINING
AntiTracking
.
FINGERPRINTING
AntiTracking
.
DEFAULT
AntiTracking
.
STRICT
AntiTracking
.
STP
AntiTracking
.
EMAIL
AntiTracking
.
NONE
}
)
public
interface
CBAntiTracking
{
}
public
static
class
SafeBrowsing
{
public
static
final
int
NONE
=
0
;
public
static
final
int
MALWARE
=
1
<
<
10
;
public
static
final
int
UNWANTED
=
1
<
<
11
;
public
static
final
int
HARMFUL
=
1
<
<
12
;
public
static
final
int
PHISHING
=
1
<
<
13
;
public
static
final
int
DEFAULT
=
MALWARE
|
UNWANTED
|
HARMFUL
|
PHISHING
;
protected
SafeBrowsing
(
)
{
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
flag
=
true
value
=
{
SafeBrowsing
.
MALWARE
SafeBrowsing
.
UNWANTED
SafeBrowsing
.
HARMFUL
SafeBrowsing
.
PHISHING
SafeBrowsing
.
DEFAULT
SafeBrowsing
.
NONE
}
)
public
interface
CBSafeBrowsing
{
}
public
static
class
CookieBehavior
{
public
static
final
int
ACCEPT_ALL
=
0
;
public
static
final
int
ACCEPT_FIRST_PARTY
=
1
;
public
static
final
int
ACCEPT_NONE
=
2
;
public
static
final
int
ACCEPT_VISITED
=
3
;
public
static
final
int
ACCEPT_NON_TRACKERS
=
4
;
public
static
final
int
ACCEPT_FIRST_PARTY_AND_ISOLATE_OTHERS
=
5
;
protected
CookieBehavior
(
)
{
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
CookieBehavior
.
ACCEPT_ALL
CookieBehavior
.
ACCEPT_FIRST_PARTY
CookieBehavior
.
ACCEPT_NONE
CookieBehavior
.
ACCEPT_VISITED
CookieBehavior
.
ACCEPT_NON_TRACKERS
}
)
public
interface
CBCookieBehavior
{
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
EtpLevel
.
NONE
EtpLevel
.
DEFAULT
EtpLevel
.
STRICT
}
)
public
interface
CBEtpLevel
{
}
public
static
class
EtpLevel
{
public
static
final
int
NONE
=
0
;
public
static
final
int
DEFAULT
=
1
;
public
static
final
int
STRICT
=
2
;
}
public
static
class
BlockEvent
{
public
final
NonNull
String
uri
;
private
final
CBAntiTracking
int
mAntiTrackingCat
;
private
final
CBSafeBrowsing
int
mSafeBrowsingCat
;
private
final
CBCookieBehavior
int
mCookieBehaviorCat
;
private
final
boolean
mIsBlocking
;
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
BlockEvent
(
NonNull
final
String
uri
final
CBAntiTracking
int
atCat
final
CBSafeBrowsing
int
sbCat
final
CBCookieBehavior
int
cbCat
final
boolean
isBlocking
)
{
this
.
uri
=
uri
;
this
.
mAntiTrackingCat
=
atCat
;
this
.
mSafeBrowsingCat
=
sbCat
;
this
.
mCookieBehaviorCat
=
cbCat
;
this
.
mIsBlocking
=
isBlocking
;
}
UiThread
public
CBAntiTracking
int
getAntiTrackingCategory
(
)
{
return
mAntiTrackingCat
;
}
UiThread
public
CBSafeBrowsing
int
getSafeBrowsingCategory
(
)
{
return
mSafeBrowsingCat
;
}
UiThread
public
CBCookieBehavior
int
getCookieBehaviorCategory
(
)
{
return
mCookieBehaviorCat
;
}
static
BlockEvent
fromBundle
(
NonNull
final
GeckoBundle
bundle
)
{
final
String
uri
=
bundle
.
getString
(
"
uri
"
)
;
final
String
blockedList
=
bundle
.
getString
(
"
blockedList
"
)
;
final
String
loadedList
=
TextUtils
.
join
(
"
"
bundle
.
getStringArray
(
"
loadedLists
"
)
)
;
final
long
error
=
bundle
.
getLong
(
"
error
"
0L
)
;
final
long
category
=
bundle
.
getLong
(
"
category
"
0L
)
;
final
String
matchedList
=
blockedList
!
=
null
?
blockedList
:
loadedList
;
final
boolean
blocking
=
(
blockedList
!
=
null
|
|
error
!
=
0L
|
|
ContentBlocking
.
isBlockingGeckoCbCat
(
category
)
)
;
return
new
BlockEvent
(
uri
ContentBlocking
.
atListToAtCat
(
matchedList
)
|
ContentBlocking
.
cmListToAtCat
(
matchedList
)
|
ContentBlocking
.
fpListToAtCat
(
matchedList
)
|
ContentBlocking
.
stListToAtCat
(
matchedList
)
|
ContentBlocking
.
etbListToAtCat
(
matchedList
)
ContentBlocking
.
errorToSbCat
(
error
)
ContentBlocking
.
geckoCatToCbCat
(
category
)
blocking
)
;
}
UiThread
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
boolean
isBlocking
(
)
{
return
mIsBlocking
;
}
}
public
interface
Delegate
{
UiThread
default
void
onContentBlocked
(
NonNull
final
GeckoSession
session
NonNull
final
BlockEvent
event
)
{
}
UiThread
default
void
onContentLoaded
(
NonNull
final
GeckoSession
session
NonNull
final
BlockEvent
event
)
{
}
}
private
static
final
String
TEST
=
"
moztest
-
track
-
simple
"
;
private
static
final
String
AD
=
"
ads
-
track
-
digest256
"
;
private
static
final
String
ANALYTIC
=
"
analytics
-
track
-
digest256
"
;
private
static
final
String
SOCIAL
=
"
social
-
track
-
digest256
"
;
private
static
final
String
CONTENT
=
"
content
-
track
-
digest256
"
;
private
static
final
String
CRYPTOMINING
=
"
base
-
cryptomining
-
track
-
digest256
"
;
private
static
final
String
FINGERPRINTING
=
"
base
-
fingerprinting
-
track
-
digest256
"
;
private
static
final
String
STP
=
"
social
-
tracking
-
protection
-
facebook
-
digest256
social
-
tracking
-
protection
-
linkedin
-
digest256
social
-
tracking
-
protection
-
twitter
-
digest256
"
;
private
static
final
String
EMAIL
=
"
base
-
email
-
track
-
digest256
"
;
static
CBSafeBrowsing
int
sbMalwareToSbCat
(
final
boolean
enabled
)
{
return
enabled
?
(
SafeBrowsing
.
MALWARE
|
SafeBrowsing
.
UNWANTED
|
SafeBrowsing
.
HARMFUL
)
:
SafeBrowsing
.
NONE
;
}
static
CBSafeBrowsing
int
sbPhishingToSbCat
(
final
boolean
enabled
)
{
return
enabled
?
SafeBrowsing
.
PHISHING
:
SafeBrowsing
.
NONE
;
}
static
boolean
catToSbMalware
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
(
SafeBrowsing
.
MALWARE
|
SafeBrowsing
.
UNWANTED
|
SafeBrowsing
.
HARMFUL
)
)
!
=
0
;
}
static
boolean
catToSbPhishing
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
SafeBrowsing
.
PHISHING
)
!
=
0
;
}
static
String
catToAtPref
(
CBAntiTracking
final
int
cat
)
{
final
StringBuilder
builder
=
new
StringBuilder
(
)
;
if
(
(
cat
&
AntiTracking
.
TEST
)
!
=
0
)
{
builder
.
append
(
TEST
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AntiTracking
.
AD
)
!
=
0
)
{
builder
.
append
(
AD
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AntiTracking
.
ANALYTIC
)
!
=
0
)
{
builder
.
append
(
ANALYTIC
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AntiTracking
.
SOCIAL
)
!
=
0
)
{
builder
.
append
(
SOCIAL
)
.
append
(
'
'
)
;
}
if
(
(
cat
&
AntiTracking
.
CONTENT
)
!
=
0
)
{
builder
.
append
(
CONTENT
)
.
append
(
'
'
)
;
}
if
(
builder
.
length
(
)
=
=
0
)
{
return
"
"
;
}
return
builder
.
substring
(
0
builder
.
length
(
)
-
1
)
;
}
static
boolean
catToCmPref
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
AntiTracking
.
CRYPTOMINING
)
!
=
0
;
}
static
String
catToCmListPref
(
CBAntiTracking
final
int
cat
)
{
final
StringBuilder
builder
=
new
StringBuilder
(
)
;
if
(
(
cat
&
AntiTracking
.
CRYPTOMINING
)
!
=
0
)
{
builder
.
append
(
CRYPTOMINING
)
;
}
return
builder
.
toString
(
)
;
}
static
boolean
catToFpPref
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
AntiTracking
.
FINGERPRINTING
)
!
=
0
;
}
static
String
catToFpListPref
(
CBAntiTracking
final
int
cat
)
{
final
StringBuilder
builder
=
new
StringBuilder
(
)
;
if
(
(
cat
&
AntiTracking
.
FINGERPRINTING
)
!
=
0
)
{
builder
.
append
(
FINGERPRINTING
)
;
}
return
builder
.
toString
(
)
;
}
static
CBAntiTracking
int
fpListToAtCat
(
final
String
list
)
{
int
cat
=
AntiTracking
.
NONE
;
if
(
list
=
=
null
)
{
return
cat
;
}
if
(
list
.
indexOf
(
FINGERPRINTING
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
FINGERPRINTING
;
}
return
cat
;
}
static
boolean
catToStPref
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
AntiTracking
.
STP
)
!
=
0
;
}
static
boolean
catToEtbPref
(
CBAntiTracking
final
int
cat
)
{
return
(
cat
&
AntiTracking
.
EMAIL
)
!
=
0
;
}
static
String
catToPref
(
CBAntiTracking
final
int
cat
final
int
tbCat
final
String
catPrefString
)
{
if
(
(
cat
&
tbCat
)
!
=
0
)
{
return
catPrefString
;
}
else
{
return
"
"
;
}
}
static
CBAntiTracking
int
atListToAtCat
(
final
String
list
)
{
int
cat
=
AntiTracking
.
NONE
;
if
(
list
=
=
null
)
{
return
cat
;
}
if
(
list
.
indexOf
(
TEST
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
TEST
;
}
if
(
list
.
indexOf
(
AD
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
AD
;
}
if
(
list
.
indexOf
(
ANALYTIC
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
ANALYTIC
;
}
if
(
list
.
indexOf
(
SOCIAL
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
SOCIAL
;
}
if
(
list
.
indexOf
(
CONTENT
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
CONTENT
;
}
return
cat
;
}
static
CBAntiTracking
int
cmListToAtCat
(
final
String
list
)
{
int
cat
=
AntiTracking
.
NONE
;
if
(
list
=
=
null
)
{
return
cat
;
}
if
(
list
.
indexOf
(
CRYPTOMINING
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
CRYPTOMINING
;
}
return
cat
;
}
static
CBAntiTracking
int
stListToAtCat
(
final
String
list
)
{
int
cat
=
AntiTracking
.
NONE
;
if
(
list
=
=
null
)
{
return
cat
;
}
if
(
list
.
indexOf
(
STP
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
STP
;
}
return
cat
;
}
static
CBAntiTracking
int
etbListToAtCat
(
final
String
list
)
{
int
cat
=
AntiTracking
.
NONE
;
if
(
list
=
=
null
)
{
return
cat
;
}
if
(
list
.
indexOf
(
EMAIL
)
!
=
-
1
)
{
cat
|
=
AntiTracking
.
EMAIL
;
}
return
cat
;
}
static
CBSafeBrowsing
int
errorToSbCat
(
final
long
error
)
{
if
(
error
=
=
0x805D001FL
)
{
return
SafeBrowsing
.
PHISHING
;
}
if
(
error
=
=
0x805D001EL
)
{
return
SafeBrowsing
.
MALWARE
;
}
if
(
error
=
=
0x805D0023L
)
{
return
SafeBrowsing
.
UNWANTED
;
}
if
(
error
=
=
0x805D0026L
)
{
return
SafeBrowsing
.
HARMFUL
;
}
return
SafeBrowsing
.
NONE
;
}
private
static
final
long
STATE_COOKIES_LOADED
=
0x8000L
;
private
static
final
long
STATE_COOKIES_LOADED_TRACKER
=
0x40000L
;
private
static
final
long
STATE_COOKIES_LOADED_SOCIALTRACKER
=
0x80000L
;
private
static
final
long
STATE_COOKIES_BLOCKED_TRACKER
=
0x20000000L
;
private
static
final
long
STATE_COOKIES_BLOCKED_SOCIALTRACKER
=
0x01000000L
;
private
static
final
long
STATE_COOKIES_BLOCKED_ALL
=
0x40000000L
;
private
static
final
long
STATE_COOKIES_BLOCKED_FOREIGN
=
0x80L
;
static
boolean
isBlockingGeckoCbCat
(
final
long
geckoCat
)
{
return
(
geckoCat
&
(
STATE_COOKIES_BLOCKED_TRACKER
|
STATE_COOKIES_BLOCKED_SOCIALTRACKER
|
STATE_COOKIES_BLOCKED_ALL
|
STATE_COOKIES_BLOCKED_FOREIGN
)
)
!
=
0
;
}
static
CBCookieBehavior
int
geckoCatToCbCat
(
final
long
geckoCat
)
{
if
(
(
geckoCat
&
STATE_COOKIES_LOADED
)
!
=
0
)
{
return
CookieBehavior
.
ACCEPT_NONE
;
}
if
(
(
geckoCat
&
STATE_COOKIES_BLOCKED_FOREIGN
)
!
=
0
)
{
return
CookieBehavior
.
ACCEPT_FIRST_PARTY
;
}
if
(
(
geckoCat
&
(
STATE_COOKIES_BLOCKED_TRACKER
|
STATE_COOKIES_BLOCKED_SOCIALTRACKER
|
STATE_COOKIES_LOADED_TRACKER
|
STATE_COOKIES_LOADED_SOCIALTRACKER
)
)
!
=
0
)
{
return
CookieBehavior
.
ACCEPT_NON_TRACKERS
;
}
if
(
(
geckoCat
&
STATE_COOKIES_BLOCKED_ALL
)
!
=
0
)
{
return
CookieBehavior
.
ACCEPT_NONE
;
}
return
CookieBehavior
.
ACCEPT_ALL
;
}
public
static
class
CookieBannerMode
{
public
static
final
int
COOKIE_BANNER_MODE_DISABLED
=
0
;
public
static
final
int
COOKIE_BANNER_MODE_REJECT
=
1
;
public
static
final
int
COOKIE_BANNER_MODE_REJECT_OR_ACCEPT
=
2
;
protected
CookieBannerMode
(
)
{
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
CookieBannerMode
.
COOKIE_BANNER_MODE_DISABLED
CookieBannerMode
.
COOKIE_BANNER_MODE_REJECT
CookieBannerMode
.
COOKIE_BANNER_MODE_REJECT_OR_ACCEPT
}
)
public
interface
CBCookieBannerMode
{
}
}
