package
org
.
mozilla
.
geckoview
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
UiThread
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
AnyThread
public
class
ContentBlockingController
{
private
static
final
String
LOGTAG
=
"
GeckoContentBlocking
"
;
public
static
class
Event
{
public
static
final
int
BLOCKED_TRACKING_CONTENT
=
0x00001000
;
public
static
final
int
LOADED_LEVEL_1_TRACKING_CONTENT
=
0x00002000
;
public
static
final
int
LOADED_LEVEL_2_TRACKING_CONTENT
=
0x00100000
;
public
static
final
int
BLOCKED_FINGERPRINTING_CONTENT
=
0x00000040
;
public
static
final
int
LOADED_FINGERPRINTING_CONTENT
=
0x00000400
;
public
static
final
int
BLOCKED_CRYPTOMINING_CONTENT
=
0x00000800
;
public
static
final
int
LOADED_CRYPTOMINING_CONTENT
=
0x00200000
;
public
static
final
int
BLOCKED_UNSAFE_CONTENT
=
0x00004000
;
public
static
final
int
COOKIES_LOADED
=
0x00008000
;
public
static
final
int
COOKIES_LOADED_TRACKER
=
0x00040000
;
public
static
final
int
COOKIES_LOADED_SOCIALTRACKER
=
0x00080000
;
public
static
final
int
COOKIES_BLOCKED_BY_PERMISSION
=
0x10000000
;
public
static
final
int
COOKIES_BLOCKED_TRACKER
=
0x20000000
;
public
static
final
int
COOKIES_BLOCKED_SOCIALTRACKER
=
0x01000000
;
public
static
final
int
COOKIES_BLOCKED_ALL
=
0x40000000
;
public
static
final
int
COOKIES_PARTITIONED_FOREIGN
=
0x80000000
;
public
static
final
int
COOKIES_BLOCKED_FOREIGN
=
0x00000080
;
public
static
final
int
BLOCKED_SOCIALTRACKING_CONTENT
=
0x00010000
;
public
static
final
int
LOADED_SOCIALTRACKING_CONTENT
=
0x00020000
;
public
static
final
int
REPLACED_TRACKING_CONTENT
=
0x00000010
;
public
static
final
int
ALLOWED_TRACKING_CONTENT
=
0x00000020
;
protected
Event
(
)
{
}
}
AnyThread
public
static
class
LogEntry
{
public
static
class
BlockingData
{
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
Event
.
BLOCKED_TRACKING_CONTENT
Event
.
LOADED_LEVEL_1_TRACKING_CONTENT
Event
.
LOADED_LEVEL_2_TRACKING_CONTENT
Event
.
BLOCKED_FINGERPRINTING_CONTENT
Event
.
LOADED_FINGERPRINTING_CONTENT
Event
.
BLOCKED_CRYPTOMINING_CONTENT
Event
.
LOADED_CRYPTOMINING_CONTENT
Event
.
BLOCKED_UNSAFE_CONTENT
Event
.
COOKIES_LOADED
Event
.
COOKIES_LOADED_TRACKER
Event
.
COOKIES_LOADED_SOCIALTRACKER
Event
.
COOKIES_BLOCKED_BY_PERMISSION
Event
.
COOKIES_BLOCKED_TRACKER
Event
.
COOKIES_BLOCKED_SOCIALTRACKER
Event
.
COOKIES_BLOCKED_ALL
Event
.
COOKIES_PARTITIONED_FOREIGN
Event
.
COOKIES_BLOCKED_FOREIGN
Event
.
BLOCKED_SOCIALTRACKING_CONTENT
Event
.
LOADED_SOCIALTRACKING_CONTENT
Event
.
REPLACED_TRACKING_CONTENT
}
)
interface
LogEvent
{
}
public
final
LogEvent
int
category
;
public
final
boolean
blocked
;
public
final
int
count
;
BlockingData
(
final
NonNull
GeckoBundle
bundle
)
{
category
=
bundle
.
getInt
(
"
category
"
)
;
blocked
=
bundle
.
getBoolean
(
"
blocked
"
)
;
count
=
bundle
.
getInt
(
"
count
"
)
;
}
protected
BlockingData
(
)
{
category
=
Event
.
BLOCKED_TRACKING_CONTENT
;
blocked
=
false
;
count
=
0
;
}
}
public
final
NonNull
String
origin
;
public
final
NonNull
List
<
BlockingData
>
blockingData
;
LogEntry
(
final
NonNull
GeckoBundle
bundle
)
{
origin
=
bundle
.
getString
(
"
origin
"
)
;
final
GeckoBundle
[
]
data
=
bundle
.
getBundleArray
(
"
blockData
"
)
;
final
ArrayList
<
BlockingData
>
dataArray
=
new
ArrayList
<
BlockingData
>
(
data
.
length
)
;
for
(
final
GeckoBundle
b
:
data
)
{
dataArray
.
add
(
new
BlockingData
(
b
)
)
;
}
blockingData
=
Collections
.
unmodifiableList
(
dataArray
)
;
}
protected
LogEntry
(
)
{
origin
=
null
;
blockingData
=
null
;
}
}
private
List
<
LogEntry
>
logFromBundle
(
final
GeckoBundle
value
)
{
final
GeckoBundle
[
]
bundles
=
value
.
getBundleArray
(
"
log
"
)
;
final
ArrayList
<
LogEntry
>
logArray
=
new
ArrayList
<
>
(
bundles
.
length
)
;
for
(
final
GeckoBundle
b
:
bundles
)
{
logArray
.
add
(
new
LogEntry
(
b
)
)
;
}
return
Collections
.
unmodifiableList
(
logArray
)
;
}
UiThread
public
NonNull
GeckoResult
<
List
<
LogEntry
>
>
getLog
(
final
NonNull
GeckoSession
session
)
{
return
session
.
getEventDispatcher
(
)
.
queryBundle
(
"
ContentBlocking
:
RequestLog
"
)
.
map
(
this
:
:
logFromBundle
)
;
}
}
