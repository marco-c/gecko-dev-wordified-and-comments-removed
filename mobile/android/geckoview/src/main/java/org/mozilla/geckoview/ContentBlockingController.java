package
org
.
mozilla
.
geckoview
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
android
.
support
.
annotation
.
AnyThread
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
util
.
Log
;
AnyThread
public
class
ContentBlockingController
{
private
static
final
String
LOGTAG
=
"
GeckoContentBlockingController
"
;
AnyThread
public
class
ExceptionList
{
private
final
NonNull
GeckoBundle
mBundle
;
ExceptionList
(
final
NonNull
GeckoBundle
bundle
)
{
mBundle
=
new
GeckoBundle
(
bundle
)
;
}
public
NonNull
String
[
]
getUris
(
)
{
return
mBundle
.
getStringArray
(
"
uris
"
)
;
}
Override
public
Nullable
String
toString
(
)
{
String
res
;
try
{
res
=
mBundle
.
toJSONObject
(
)
.
toString
(
)
;
}
catch
(
JSONException
e
)
{
Log
.
e
(
LOGTAG
"
Could
not
convert
session
state
to
string
.
"
)
;
res
=
null
;
}
return
res
;
}
public
NonNull
JSONObject
toJson
(
)
throws
JSONException
{
return
mBundle
.
toJSONObject
(
)
;
}
public
ExceptionList
(
final
NonNull
String
savedList
)
throws
JSONException
{
mBundle
=
GeckoBundle
.
fromJSONObject
(
new
JSONObject
(
savedList
)
)
;
}
public
ExceptionList
(
final
NonNull
JSONObject
savedList
)
throws
JSONException
{
mBundle
=
GeckoBundle
.
fromJSONObject
(
savedList
)
;
}
GeckoBundle
getBundle
(
)
{
return
mBundle
;
}
}
UiThread
public
void
addException
(
final
NonNull
GeckoSession
session
)
{
final
GeckoBundle
msg
=
new
GeckoBundle
(
1
)
;
msg
.
putString
(
"
sessionId
"
session
.
getId
(
)
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
ContentBlocking
:
AddException
"
msg
)
;
}
UiThread
public
void
removeException
(
final
NonNull
GeckoSession
session
)
{
final
GeckoBundle
msg
=
new
GeckoBundle
(
1
)
;
msg
.
putString
(
"
sessionId
"
session
.
getId
(
)
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
ContentBlocking
:
RemoveException
"
msg
)
;
}
UiThread
public
NonNull
GeckoResult
<
Boolean
>
checkException
(
final
NonNull
GeckoSession
session
)
{
final
CallbackResult
<
Boolean
>
result
=
new
CallbackResult
<
Boolean
>
(
)
{
Override
public
void
sendSuccess
(
final
Object
value
)
{
complete
(
(
Boolean
)
value
)
;
}
}
;
final
GeckoBundle
msg
=
new
GeckoBundle
(
1
)
;
msg
.
putString
(
"
sessionId
"
session
.
getId
(
)
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
ContentBlocking
:
CheckException
"
msg
result
)
;
return
result
;
}
UiThread
public
NonNull
GeckoResult
<
ExceptionList
>
saveExceptionList
(
)
{
final
CallbackResult
<
ExceptionList
>
result
=
new
CallbackResult
<
ExceptionList
>
(
)
{
Override
public
void
sendSuccess
(
final
Object
value
)
{
complete
(
new
ExceptionList
(
(
GeckoBundle
)
value
)
)
;
}
}
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
ContentBlocking
:
SaveList
"
null
result
)
;
return
result
;
}
UiThread
public
void
restoreExceptionList
(
final
NonNull
ExceptionList
list
)
{
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
ContentBlocking
:
RestoreList
"
list
.
getBundle
(
)
)
;
}
UiThread
public
void
clearExceptionList
(
)
{
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
ContentBlocking
:
ClearList
"
null
)
;
}
}
