package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
org
.
mozilla
.
geckoview
.
GeckoRuntimeSettings
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
database
.
ContentObserver
;
import
android
.
net
.
Uri
;
import
android
.
provider
.
Settings
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
util
.
Log
;
public
final
class
GeckoFontScaleListener
extends
ContentObserver
{
private
static
final
String
LOGTAG
=
"
GeckoFontScaleListener
"
;
private
static
final
float
DEFAULT_FONT_SCALE
=
1
.
0f
;
SuppressLint
(
"
StaticFieldLeak
"
)
private
static
final
GeckoFontScaleListener
sInstance
=
new
GeckoFontScaleListener
(
)
;
private
Context
mApplicationContext
;
private
GeckoRuntimeSettings
mSettings
;
private
boolean
mAttached
;
private
boolean
mEnabled
;
private
boolean
mRunning
;
private
float
mPrevGeckoFontScale
;
private
boolean
mPrevFontInflationState
;
public
static
GeckoFontScaleListener
getInstance
(
)
{
return
sInstance
;
}
private
GeckoFontScaleListener
(
)
{
super
(
ThreadUtils
.
getUiHandler
(
)
)
;
}
public
void
attachToContext
(
final
Context
context
final
GeckoRuntimeSettings
settings
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
mAttached
)
{
Log
.
w
(
LOGTAG
"
Already
attached
!
"
)
;
return
;
}
mAttached
=
true
;
mSettings
=
settings
;
mApplicationContext
=
context
.
getApplicationContext
(
)
;
onEnabledChange
(
)
;
}
public
void
detachFromContext
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
!
mAttached
)
{
Log
.
w
(
LOGTAG
"
Already
detached
!
"
)
;
return
;
}
stop
(
)
;
mApplicationContext
=
null
;
mSettings
=
null
;
mAttached
=
false
;
}
public
void
setEnabled
(
boolean
enabled
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
mEnabled
=
enabled
;
onEnabledChange
(
)
;
}
public
boolean
getEnabled
(
)
{
return
mEnabled
;
}
private
void
onEnabledChange
(
)
{
if
(
!
mAttached
)
{
return
;
}
if
(
mEnabled
)
{
start
(
)
;
}
else
{
stop
(
)
;
}
}
private
void
start
(
)
{
if
(
mRunning
)
{
return
;
}
mPrevGeckoFontScale
=
mSettings
.
getFontSizeFactor
(
)
;
mPrevFontInflationState
=
mSettings
.
getFontInflationEnabled
(
)
;
ContentResolver
contentResolver
=
mApplicationContext
.
getContentResolver
(
)
;
Uri
fontSizeSetting
=
Settings
.
System
.
getUriFor
(
Settings
.
System
.
FONT_SCALE
)
;
contentResolver
.
registerContentObserver
(
fontSizeSetting
false
this
)
;
onSystemFontScaleChange
(
contentResolver
false
)
;
mRunning
=
true
;
}
private
void
stop
(
)
{
if
(
!
mRunning
)
{
return
;
}
ContentResolver
contentResolver
=
mApplicationContext
.
getContentResolver
(
)
;
contentResolver
.
unregisterContentObserver
(
this
)
;
onSystemFontScaleChange
(
contentResolver
true
)
;
mRunning
=
false
;
}
private
void
onSystemFontScaleChange
(
final
ContentResolver
contentResolver
boolean
stopping
)
{
float
fontScale
;
boolean
fontInflationEnabled
;
if
(
!
stopping
)
{
fontScale
=
Settings
.
System
.
getFloat
(
contentResolver
Settings
.
System
.
FONT_SCALE
DEFAULT_FONT_SCALE
)
;
fontInflationEnabled
=
true
;
}
else
{
fontScale
=
mPrevGeckoFontScale
;
fontInflationEnabled
=
mPrevFontInflationState
;
}
mSettings
.
setFontInflationEnabled
(
fontInflationEnabled
)
;
mSettings
.
setFontSizeFactor
(
fontScale
)
;
}
UiThread
Override
public
void
onChange
(
boolean
selfChange
)
{
onSystemFontScaleChange
(
mApplicationContext
.
getContentResolver
(
)
false
)
;
}
}
