package
org
.
mozilla
.
geckoview
;
import
android
.
util
.
Log
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
AnyThread
public
final
class
SessionPdfFileSaver
{
private
static
final
String
LOGTAG
=
"
GeckoPdfFileSaver
"
;
private
final
GeckoSession
mSession
;
SessionPdfFileSaver
(
NonNull
final
GeckoSession
session
)
{
mSession
=
session
;
}
NonNull
public
GeckoResult
<
WebResponse
>
save
(
)
{
final
GeckoResult
<
WebResponse
>
geckoResult
=
new
GeckoResult
<
>
(
)
;
mSession
.
getEventDispatcher
(
)
.
queryBundle
(
"
GeckoView
:
PDFSave
"
null
)
.
map
(
response
-
>
{
geckoResult
.
completeFrom
(
SessionPdfFileSaver
.
createResponse
(
mSession
response
.
getString
(
"
url
"
)
response
.
getString
(
"
filename
"
)
response
.
getString
(
"
originalUrl
"
)
true
false
)
)
;
return
null
;
}
)
;
return
geckoResult
;
}
public
static
Nullable
GeckoResult
<
WebResponse
>
createResponse
(
NonNull
final
GeckoSession
session
NonNull
final
String
url
NonNull
final
String
filename
NonNull
final
String
originalUrl
final
boolean
skipConfirmation
final
boolean
requestExternalApp
)
{
try
{
final
GeckoWebExecutor
executor
=
new
GeckoWebExecutor
(
session
.
getRuntime
(
)
)
;
final
WebRequest
request
=
new
WebRequest
(
url
)
;
return
executor
.
fetch
(
request
)
.
then
(
new
GeckoResult
.
OnValueListener
<
WebResponse
WebResponse
>
(
)
{
Override
public
GeckoResult
<
WebResponse
>
onValue
(
final
WebResponse
response
)
{
final
int
statusCode
=
response
.
statusCode
!
=
0
?
response
.
statusCode
:
200
;
return
GeckoResult
.
fromValue
(
new
WebResponse
.
Builder
(
originalUrl
)
.
statusCode
(
statusCode
)
.
body
(
response
.
body
)
.
skipConfirmation
(
skipConfirmation
)
.
requestExternalApp
(
requestExternalApp
)
.
addHeader
(
"
Content
-
Type
"
"
application
/
pdf
"
)
.
addHeader
(
"
Content
-
Disposition
"
"
attachment
;
filename
=
\
"
"
+
filename
+
"
\
"
"
)
.
build
(
)
)
;
}
}
)
;
}
catch
(
final
Exception
e
)
{
Log
.
d
(
LOGTAG
e
.
getMessage
(
)
)
;
return
null
;
}
}
}
