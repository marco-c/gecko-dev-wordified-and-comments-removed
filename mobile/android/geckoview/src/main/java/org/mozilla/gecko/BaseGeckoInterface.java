package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
util
.
ActivityUtils
;
import
org
.
mozilla
.
gecko
.
util
.
HardwareUtils
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
app
.
Activity
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
RectF
;
import
android
.
hardware
.
SensorEventListener
;
import
android
.
location
.
LocationListener
;
import
android
.
view
.
View
;
import
android
.
widget
.
AbsoluteLayout
;
public
class
BaseGeckoInterface
implements
GeckoAppShell
.
GeckoInterface
{
private
final
Context
mContext
;
private
GeckoProfile
mProfile
;
private
final
EventDispatcher
eventDispatcher
;
public
BaseGeckoInterface
(
Context
context
)
{
mContext
=
context
;
eventDispatcher
=
new
EventDispatcher
(
)
;
}
Override
public
EventDispatcher
getAppEventDispatcher
(
)
{
return
eventDispatcher
;
}
Override
public
GeckoProfile
getProfile
(
)
{
if
(
mProfile
=
=
null
)
{
mProfile
=
GeckoProfile
.
get
(
mContext
)
;
}
return
mProfile
;
}
Override
public
Activity
getActivity
(
)
{
return
(
Activity
)
mContext
;
}
Override
public
String
getDefaultUAString
(
)
{
return
HardwareUtils
.
isTablet
(
)
?
AppConstants
.
USER_AGENT_FENNEC_TABLET
:
AppConstants
.
USER_AGENT_FENNEC_MOBILE
;
}
Override
public
void
doRestart
(
)
{
}
Override
public
void
setFullScreen
(
final
boolean
fullscreen
)
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
ActivityUtils
.
setFullScreen
(
getActivity
(
)
fullscreen
)
;
}
}
)
;
}
Override
public
void
addPluginView
(
final
View
view
)
{
}
Override
public
void
removePluginView
(
final
View
view
)
{
}
Override
public
void
enableOrientationListener
(
)
{
}
Override
public
void
disableOrientationListener
(
)
{
}
Override
public
void
addAppStateListener
(
GeckoAppShell
.
AppStateListener
listener
)
{
}
Override
public
void
removeAppStateListener
(
GeckoAppShell
.
AppStateListener
listener
)
{
}
Override
public
void
notifyWakeLockChanged
(
String
topic
String
state
)
{
}
Override
public
boolean
areTabsShown
(
)
{
return
false
;
}
Override
public
AbsoluteLayout
getPluginContainer
(
)
{
return
null
;
}
Override
public
void
notifyCheckUpdateResult
(
String
result
)
{
GeckoAppShell
.
notifyObservers
(
"
Update
:
CheckResult
"
result
)
;
}
Override
public
void
invalidateOptionsMenu
(
)
{
}
Override
public
void
createShortcut
(
String
title
String
URI
)
{
}
Override
public
void
checkUriVisited
(
String
uri
)
{
}
Override
public
void
markUriVisited
(
final
String
uri
)
{
}
Override
public
void
setUriTitle
(
final
String
uri
final
String
title
)
{
}
Override
public
void
setAccessibilityEnabled
(
boolean
enabled
)
{
}
Override
public
boolean
openUriExternal
(
String
targetURI
String
mimeType
String
packageName
String
className
String
action
String
title
)
{
return
false
;
}
Override
public
String
[
]
getHandlersForMimeType
(
String
mimeType
String
action
)
{
return
new
String
[
]
{
}
;
}
Override
public
String
[
]
getHandlersForURL
(
String
url
String
action
)
{
return
new
String
[
]
{
}
;
}
Override
public
String
getDefaultChromeURI
(
)
{
return
"
chrome
:
/
/
browser
/
content
/
geckoview
.
xul
"
;
}
}
