package
org
.
mozilla
.
geckoview
;
import
android
.
support
.
annotation
.
AnyThread
;
import
android
.
support
.
annotation
.
IntDef
;
import
android
.
support
.
annotation
.
NonNull
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
net
.
InetAddress
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
util
.
List
;
import
org
.
mozilla
.
gecko
.
GeckoThread
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
AnyThread
public
class
GeckoWebExecutor
{
private
final
GeckoRuntime
mRuntime
;
WrapForJNI
(
dispatchTo
=
"
gecko
"
stubName
=
"
Fetch
"
)
private
static
native
void
nativeFetch
(
WebRequest
request
int
flags
GeckoResult
<
WebResponse
>
result
)
;
WrapForJNI
(
dispatchTo
=
"
gecko
"
stubName
=
"
Resolve
"
)
private
static
native
void
nativeResolve
(
String
host
GeckoResult
<
InetAddress
[
]
>
result
)
;
WrapForJNI
(
calledFrom
=
"
gecko
"
exceptionMode
=
"
nsresult
"
)
private
static
ByteBuffer
createByteBuffer
(
int
capacity
)
{
return
ByteBuffer
.
allocateDirect
(
capacity
)
;
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
FETCH_FLAGS_NONE
FETCH_FLAGS_ANONYMOUS
}
)
public
interface
FetchFlags
{
}
;
public
static
final
int
FETCH_FLAGS_NONE
=
0
;
WrapForJNI
public
static
final
int
FETCH_FLAGS_ANONYMOUS
=
1
;
public
GeckoWebExecutor
(
final
NonNull
GeckoRuntime
runtime
)
{
mRuntime
=
runtime
;
}
public
NonNull
GeckoResult
<
WebResponse
>
fetch
(
final
NonNull
WebRequest
request
)
{
return
fetch
(
request
FETCH_FLAGS_NONE
)
;
}
public
NonNull
GeckoResult
<
WebResponse
>
fetch
(
final
NonNull
WebRequest
request
final
FetchFlags
int
flags
)
{
if
(
request
.
body
!
=
null
&
&
!
request
.
body
.
isDirect
(
)
)
{
throw
new
IllegalArgumentException
(
"
Request
body
must
be
a
direct
ByteBuffer
"
)
;
}
if
(
request
.
cacheMode
<
WebRequest
.
CACHE_MODE_FIRST
|
|
request
.
cacheMode
>
WebRequest
.
CACHE_MODE_LAST
)
{
throw
new
IllegalArgumentException
(
"
Unknown
cache
mode
"
)
;
}
if
(
!
request
.
uri
.
toLowerCase
(
)
.
startsWith
(
"
http
"
)
)
{
throw
new
IllegalArgumentException
(
"
URI
scheme
must
be
http
or
https
"
)
;
}
final
GeckoResult
<
WebResponse
>
result
=
new
GeckoResult
<
>
(
)
;
if
(
GeckoThread
.
isStateAtLeast
(
GeckoThread
.
State
.
PROFILE_READY
)
)
{
nativeFetch
(
request
flags
result
)
;
}
else
{
GeckoThread
.
queueNativeCallUntil
(
GeckoThread
.
State
.
PROFILE_READY
this
"
nativeFetch
"
WebRequest
.
class
request
flags
GeckoResult
.
class
result
)
;
}
return
result
;
}
public
GeckoResult
<
InetAddress
[
]
>
resolve
(
final
NonNull
String
host
)
{
final
GeckoResult
<
InetAddress
[
]
>
result
=
new
GeckoResult
<
>
(
)
;
if
(
GeckoThread
.
isStateAtLeast
(
GeckoThread
.
State
.
PROFILE_READY
)
)
{
nativeResolve
(
host
result
)
;
}
else
{
GeckoThread
.
queueNativeCallUntil
(
GeckoThread
.
State
.
PROFILE_READY
this
"
nativeResolve
"
String
.
class
host
GeckoResult
.
class
result
)
;
}
return
result
;
}
public
void
speculativeConnect
(
final
NonNull
String
uri
)
{
GeckoThread
.
speculativeConnect
(
uri
)
;
}
}
