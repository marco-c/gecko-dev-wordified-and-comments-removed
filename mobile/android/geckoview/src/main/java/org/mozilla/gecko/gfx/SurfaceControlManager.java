package
org
.
mozilla
.
gecko
.
gfx
;
import
android
.
os
.
Build
;
import
android
.
view
.
Surface
;
import
android
.
view
.
SurfaceControl
;
import
androidx
.
annotation
.
RequiresApi
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
Map
;
import
java
.
util
.
WeakHashMap
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
public
class
SurfaceControlManager
{
private
static
final
String
LOGTAG
=
"
SurfaceControlManager
"
;
private
static
final
SurfaceControlManager
sInstance
=
new
SurfaceControlManager
(
)
;
private
WeakHashMap
<
SurfaceControl
SurfaceControl
>
mChildSurfaceControls
=
new
WeakHashMap
<
>
(
)
;
WrapForJNI
public
static
SurfaceControlManager
getInstance
(
)
{
return
sInstance
;
}
RequiresApi
(
api
=
Build
.
VERSION_CODES
.
Q
)
WrapForJNI
(
exceptionMode
=
"
abort
"
)
public
synchronized
Surface
getChildSurface
(
final
SurfaceControl
parent
final
int
width
final
int
height
)
{
SurfaceControl
child
=
mChildSurfaceControls
.
get
(
parent
)
;
if
(
child
=
=
null
)
{
final
Iterator
<
Map
.
Entry
<
SurfaceControl
SurfaceControl
>
>
it
=
mChildSurfaceControls
.
entrySet
(
)
.
iterator
(
)
;
while
(
it
.
hasNext
(
)
)
{
final
Map
.
Entry
<
SurfaceControl
SurfaceControl
>
entry
=
it
.
next
(
)
;
if
(
!
entry
.
getKey
(
)
.
isValid
(
)
)
{
it
.
remove
(
)
;
}
}
child
=
new
SurfaceControl
.
Builder
(
)
.
setParent
(
parent
)
.
setName
(
"
GeckoSurface
"
)
.
build
(
)
;
mChildSurfaceControls
.
put
(
parent
child
)
;
}
new
SurfaceControl
.
Transaction
(
)
.
setVisibility
(
child
true
)
.
setBufferSize
(
child
width
height
)
.
apply
(
)
;
return
new
Surface
(
child
)
;
}
RequiresApi
(
api
=
Build
.
VERSION_CODES
.
Q
)
WrapForJNI
(
exceptionMode
=
"
abort
"
)
public
synchronized
void
hideChildSurface
(
final
SurfaceControl
parent
)
{
final
SurfaceControl
child
=
mChildSurfaceControls
.
get
(
parent
)
;
if
(
child
!
=
null
)
{
new
SurfaceControl
.
Transaction
(
)
.
setVisibility
(
child
false
)
.
apply
(
)
;
}
}
RequiresApi
(
api
=
Build
.
VERSION_CODES
.
Q
)
WrapForJNI
(
exceptionMode
=
"
abort
"
)
public
synchronized
void
showChildSurface
(
final
SurfaceControl
parent
)
{
final
SurfaceControl
child
=
mChildSurfaceControls
.
get
(
parent
)
;
if
(
child
!
=
null
)
{
new
SurfaceControl
.
Transaction
(
)
.
setVisibility
(
child
true
)
.
apply
(
)
;
}
}
RequiresApi
(
api
=
Build
.
VERSION_CODES
.
Q
)
WrapForJNI
(
exceptionMode
=
"
abort
"
)
public
synchronized
void
onGpuProcessLoss
(
)
{
for
(
final
SurfaceControl
child
:
mChildSurfaceControls
.
values
(
)
)
{
child
.
release
(
)
;
}
mChildSurfaceControls
.
clear
(
)
;
}
}
