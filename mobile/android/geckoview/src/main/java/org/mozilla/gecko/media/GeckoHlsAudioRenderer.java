package
org
.
mozilla
.
gecko
.
media
;
import
android
.
media
.
MediaCodec
;
import
android
.
media
.
MediaCodec
.
BufferInfo
;
import
android
.
media
.
MediaCodec
.
CryptoInfo
;
import
android
.
os
.
Build
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
geckoview
.
BuildConfig
;
import
com
.
google
.
android
.
exoplayer2
.
C
;
import
com
.
google
.
android
.
exoplayer2
.
Format
;
import
com
.
google
.
android
.
exoplayer2
.
RendererCapabilities
;
import
com
.
google
.
android
.
exoplayer2
.
decoder
.
DecoderInputBuffer
;
import
com
.
google
.
android
.
exoplayer2
.
mediacodec
.
MediaCodecInfo
;
import
com
.
google
.
android
.
exoplayer2
.
mediacodec
.
MediaCodecSelector
;
import
com
.
google
.
android
.
exoplayer2
.
mediacodec
.
MediaCodecUtil
;
import
com
.
google
.
android
.
exoplayer2
.
util
.
MimeTypes
;
import
java
.
nio
.
ByteBuffer
;
public
class
GeckoHlsAudioRenderer
extends
GeckoHlsRendererBase
{
public
GeckoHlsAudioRenderer
(
GeckoHlsPlayer
.
ComponentEventDispatcher
eventDispatcher
)
{
super
(
C
.
TRACK_TYPE_AUDIO
eventDispatcher
)
;
assertTrue
(
Build
.
VERSION
.
SDK_INT
>
=
16
)
;
LOGTAG
=
getClass
(
)
.
getSimpleName
(
)
;
DEBUG
=
BuildConfig
.
NIGHTLY_BUILD
|
|
BuildConfig
.
DEBUG_BUILD
;
;
}
Override
public
final
int
supportsFormat
(
Format
format
)
{
String
mimeType
=
format
.
sampleMimeType
;
if
(
!
MimeTypes
.
isAudio
(
mimeType
)
)
{
return
RendererCapabilities
.
FORMAT_UNSUPPORTED_TYPE
;
}
MediaCodecInfo
decoderInfo
=
null
;
try
{
MediaCodecSelector
mediaCodecSelector
=
MediaCodecSelector
.
DEFAULT
;
decoderInfo
=
mediaCodecSelector
.
getDecoderInfo
(
mimeType
false
)
;
}
catch
(
MediaCodecUtil
.
DecoderQueryException
e
)
{
Log
.
e
(
LOGTAG
e
.
getMessage
(
)
)
;
}
if
(
decoderInfo
=
=
null
)
{
return
RendererCapabilities
.
FORMAT_UNSUPPORTED_SUBTYPE
;
}
boolean
decoderCapable
=
(
Build
.
VERSION
.
SDK_INT
<
21
)
|
|
(
(
format
.
sampleRate
=
=
Format
.
NO_VALUE
|
|
decoderInfo
.
isAudioSampleRateSupportedV21
(
format
.
sampleRate
)
)
&
&
(
format
.
channelCount
=
=
Format
.
NO_VALUE
|
|
decoderInfo
.
isAudioChannelCountSupportedV21
(
format
.
channelCount
)
)
)
;
int
formatSupport
=
decoderCapable
?
RendererCapabilities
.
FORMAT_HANDLED
:
RendererCapabilities
.
FORMAT_EXCEEDS_CAPABILITIES
;
return
RendererCapabilities
.
ADAPTIVE_NOT_SEAMLESS
|
formatSupport
;
}
Override
protected
final
void
createInputBuffer
(
)
{
mInputBuffer
=
null
;
}
Override
protected
void
resetRenderer
(
)
{
mInputBuffer
=
null
;
mInitialized
=
false
;
}
Override
protected
void
handleReconfiguration
(
DecoderInputBuffer
bufferForRead
)
{
}
Override
protected
void
handleFormatRead
(
DecoderInputBuffer
bufferForRead
)
{
onInputFormatChanged
(
mFormatHolder
.
format
)
;
}
Override
protected
void
handleEndOfStream
(
DecoderInputBuffer
bufferForRead
)
{
mInputStreamEnded
=
true
;
mDemuxedInputSamples
.
offer
(
GeckoHLSSample
.
EOS
)
;
}
Override
protected
void
handleSamplePreparation
(
DecoderInputBuffer
bufferForRead
)
{
int
size
=
bufferForRead
.
data
.
limit
(
)
;
byte
[
]
realData
=
new
byte
[
size
]
;
bufferForRead
.
data
.
get
(
realData
0
size
)
;
ByteBuffer
buffer
=
ByteBuffer
.
wrap
(
realData
)
;
mInputBuffer
=
bufferForRead
.
data
;
mInputBuffer
.
clear
(
)
;
CryptoInfo
cryptoInfo
=
bufferForRead
.
isEncrypted
(
)
?
bufferForRead
.
cryptoInfo
.
getFrameworkCryptoInfoV16
(
)
:
null
;
BufferInfo
bufferInfo
=
new
BufferInfo
(
)
;
int
flags
=
0
;
flags
|
=
bufferForRead
.
isKeyFrame
(
)
?
MediaCodec
.
BUFFER_FLAG_KEY_FRAME
:
0
;
flags
|
=
bufferForRead
.
isEndOfStream
(
)
?
MediaCodec
.
BUFFER_FLAG_END_OF_STREAM
:
0
;
bufferInfo
.
set
(
0
size
bufferForRead
.
timeUs
flags
)
;
assertTrue
(
mFormats
.
size
(
)
>
=
0
)
;
GeckoHLSSample
sample
=
GeckoHLSSample
.
create
(
buffer
bufferInfo
cryptoInfo
mFormats
.
size
(
)
-
1
)
;
mDemuxedInputSamples
.
offer
(
sample
)
;
if
(
BuildConfig
.
DEBUG_BUILD
)
{
Log
.
d
(
LOGTAG
"
Demuxed
sample
PTS
:
"
+
sample
.
info
.
presentationTimeUs
+
"
duration
:
"
+
sample
.
duration
+
"
formatIndex
(
"
+
sample
.
formatIndex
+
"
)
queue
size
:
"
+
mDemuxedInputSamples
.
size
(
)
)
;
}
}
Override
protected
boolean
clearInputSamplesQueue
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
clearInputSamplesQueue
"
)
;
}
mDemuxedInputSamples
.
clear
(
)
;
return
true
;
}
Override
protected
void
notifyPlayerInputFormatChanged
(
Format
newFormat
)
{
mPlayerEventDispatcher
.
onAudioInputFormatChanged
(
newFormat
)
;
}
}
