package
org
.
mozilla
.
geckoview
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
UiThread
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
public
class
Autocomplete
{
private
static
final
String
LOGTAG
=
"
Autocomplete
"
;
private
static
final
boolean
DEBUG
=
false
;
protected
Autocomplete
(
)
{
}
public
static
class
LoginEntry
{
private
static
final
String
GUID_KEY
=
"
guid
"
;
private
static
final
String
ORIGIN_KEY
=
"
origin
"
;
private
static
final
String
FORM_ACTION_ORIGIN_KEY
=
"
formActionOrigin
"
;
private
static
final
String
HTTP_REALM_KEY
=
"
httpRealm
"
;
private
static
final
String
USERNAME_KEY
=
"
username
"
;
private
static
final
String
PASSWORD_KEY
=
"
password
"
;
public
final
Nullable
String
guid
;
public
final
NonNull
String
origin
;
public
final
Nullable
String
formActionOrigin
;
public
final
Nullable
String
httpRealm
;
public
final
NonNull
String
username
;
public
final
NonNull
String
password
;
AnyThread
protected
LoginEntry
(
)
{
guid
=
null
;
origin
=
"
"
;
formActionOrigin
=
null
;
httpRealm
=
null
;
username
=
"
"
;
password
=
"
"
;
}
AnyThread
LoginEntry
(
final
NonNull
GeckoBundle
bundle
)
{
guid
=
bundle
.
getString
(
GUID_KEY
)
;
origin
=
bundle
.
getString
(
ORIGIN_KEY
)
;
formActionOrigin
=
bundle
.
getString
(
FORM_ACTION_ORIGIN_KEY
)
;
httpRealm
=
bundle
.
getString
(
HTTP_REALM_KEY
)
;
username
=
bundle
.
getString
(
USERNAME_KEY
"
"
)
;
password
=
bundle
.
getString
(
PASSWORD_KEY
"
"
)
;
}
Override
AnyThread
public
String
toString
(
)
{
StringBuilder
builder
=
new
StringBuilder
(
"
LoginEntry
{
"
)
;
builder
.
append
(
"
guid
=
"
)
.
append
(
guid
)
.
append
(
"
origin
=
"
)
.
append
(
origin
)
.
append
(
"
formActionOrigin
=
"
)
.
append
(
formActionOrigin
)
.
append
(
"
httpRealm
=
"
)
.
append
(
httpRealm
)
.
append
(
"
username
=
"
)
.
append
(
username
)
.
append
(
"
password
=
"
)
.
append
(
password
)
.
append
(
"
}
"
)
;
return
builder
.
toString
(
)
;
}
AnyThread
NonNull
GeckoBundle
toBundle
(
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
6
)
;
bundle
.
putString
(
GUID_KEY
guid
)
;
bundle
.
putString
(
ORIGIN_KEY
origin
)
;
bundle
.
putString
(
FORM_ACTION_ORIGIN_KEY
formActionOrigin
)
;
bundle
.
putString
(
HTTP_REALM_KEY
httpRealm
)
;
bundle
.
putString
(
USERNAME_KEY
username
)
;
bundle
.
putString
(
PASSWORD_KEY
password
)
;
return
bundle
;
}
public
static
class
Builder
{
private
final
GeckoBundle
mBundle
;
AnyThread
Builder
(
final
NonNull
GeckoBundle
bundle
)
{
mBundle
=
new
GeckoBundle
(
bundle
)
;
}
AnyThread
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
Builder
(
)
{
mBundle
=
new
GeckoBundle
(
6
)
;
}
AnyThread
public
NonNull
LoginEntry
build
(
)
{
return
new
LoginEntry
(
mBundle
)
;
}
AnyThread
public
NonNull
Builder
guid
(
final
Nullable
String
guid
)
{
mBundle
.
putString
(
GUID_KEY
guid
)
;
return
this
;
}
AnyThread
public
NonNull
Builder
origin
(
final
NonNull
String
origin
)
{
mBundle
.
putString
(
ORIGIN_KEY
origin
)
;
return
this
;
}
AnyThread
public
NonNull
Builder
formActionOrigin
(
final
Nullable
String
formActionOrigin
)
{
mBundle
.
putString
(
FORM_ACTION_ORIGIN_KEY
formActionOrigin
)
;
return
this
;
}
AnyThread
public
NonNull
Builder
httpRealm
(
final
Nullable
String
httpRealm
)
{
mBundle
.
putString
(
HTTP_REALM_KEY
httpRealm
)
;
return
this
;
}
AnyThread
public
NonNull
Builder
username
(
final
NonNull
String
username
)
{
mBundle
.
putString
(
USERNAME_KEY
username
)
;
return
this
;
}
AnyThread
public
NonNull
Builder
password
(
final
NonNull
String
password
)
{
mBundle
.
putString
(
PASSWORD_KEY
password
)
;
return
this
;
}
}
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
flag
=
true
value
=
{
UsedField
.
PASSWORD
}
)
interface
LSUsedField
{
}
public
static
class
UsedField
{
public
static
final
int
PASSWORD
=
1
;
protected
UsedField
(
)
{
}
}
public
interface
LoginStorageDelegate
{
UiThread
default
Nullable
GeckoResult
<
LoginEntry
[
]
>
onLoginFetch
(
NonNull
String
domain
)
{
return
null
;
}
UiThread
default
void
onLoginSave
(
NonNull
LoginEntry
login
)
{
}
UiThread
default
void
onLoginUsed
(
NonNull
LoginEntry
login
LSUsedField
int
usedFields
)
{
}
}
public
abstract
static
class
Option
<
T
>
{
static
final
String
VALUE_KEY
=
"
value
"
;
static
final
String
HINT_KEY
=
"
hint
"
;
public
final
NonNull
T
value
;
public
final
int
hint
;
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
Option
(
final
NonNull
T
value
final
int
hint
)
{
this
.
value
=
value
;
this
.
hint
=
hint
;
}
AnyThread
abstract
NonNull
GeckoBundle
toBundle
(
)
;
}
public
abstract
static
class
SaveOption
<
T
>
extends
Option
<
T
>
{
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
SaveOption
(
final
NonNull
T
value
final
int
hint
)
{
super
(
value
hint
)
;
}
}
public
abstract
static
class
SelectOption
<
T
>
extends
Option
<
T
>
{
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
SelectOption
(
final
NonNull
T
value
final
int
hint
)
{
super
(
value
hint
)
;
}
Override
public
String
toString
(
)
{
final
StringBuilder
builder
=
new
StringBuilder
(
"
SelectOption
{
"
)
;
builder
.
append
(
"
value
=
"
)
.
append
(
value
)
.
append
(
"
"
)
.
append
(
"
hint
=
"
)
.
append
(
hint
)
.
append
(
"
}
"
)
;
return
builder
.
toString
(
)
;
}
}
public
static
class
LoginSaveOption
extends
SaveOption
<
LoginEntry
>
{
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
flag
=
true
value
=
{
Hint
.
NONE
Hint
.
GENERATED
Hint
.
LOW_CONFIDENCE
}
)
interface
LoginSaveHint
{
}
public
static
class
Hint
{
public
static
final
int
NONE
=
0
;
public
static
final
int
GENERATED
=
1
<
<
0
;
public
static
final
int
LOW_CONFIDENCE
=
1
<
<
1
;
protected
Hint
(
)
{
}
}
LoginSaveOption
(
final
NonNull
LoginEntry
value
final
LoginSaveHint
int
hint
)
{
super
(
value
hint
)
;
}
public
LoginSaveOption
(
final
NonNull
LoginEntry
value
)
{
this
(
value
Hint
.
NONE
)
;
}
Override
NonNull
GeckoBundle
toBundle
(
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
2
)
;
bundle
.
putBundle
(
VALUE_KEY
value
.
toBundle
(
)
)
;
bundle
.
putInt
(
HINT_KEY
hint
)
;
return
bundle
;
}
}
public
static
class
LoginSelectOption
extends
SelectOption
<
LoginEntry
>
{
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
flag
=
true
value
=
{
Hint
.
NONE
Hint
.
GENERATED
Hint
.
INSECURE_FORM
Hint
.
DUPLICATE_USERNAME
Hint
.
MATCHING_ORIGIN
}
)
interface
LoginSelectHint
{
}
public
static
class
Hint
{
public
static
final
int
NONE
=
0
;
public
static
final
int
GENERATED
=
1
<
<
0
;
public
static
final
int
INSECURE_FORM
=
1
<
<
1
;
public
static
final
int
DUPLICATE_USERNAME
=
1
<
<
2
;
public
static
final
int
MATCHING_ORIGIN
=
1
<
<
3
;
}
LoginSelectOption
(
final
NonNull
LoginEntry
value
final
LoginSelectHint
int
hint
)
{
super
(
value
hint
)
;
}
public
LoginSelectOption
(
final
NonNull
LoginEntry
value
)
{
this
(
value
Hint
.
NONE
)
;
}
static
NonNull
LoginSelectOption
fromBundle
(
final
NonNull
GeckoBundle
bundle
)
{
final
int
hint
=
bundle
.
getInt
(
"
hint
"
)
;
final
LoginEntry
value
=
new
LoginEntry
(
bundle
.
getBundle
(
"
value
"
)
)
;
return
new
LoginSelectOption
(
value
hint
)
;
}
Override
NonNull
GeckoBundle
toBundle
(
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
2
)
;
bundle
.
putBundle
(
VALUE_KEY
value
.
toBundle
(
)
)
;
bundle
.
putInt
(
HINT_KEY
hint
)
;
return
bundle
;
}
}
final
static
class
LoginStorageProxy
implements
BundleEventListener
{
private
static
final
String
LOGTAG
=
"
LoginStorageProxy
"
;
private
static
final
String
FETCH_LOGIN_EVENT
=
"
GeckoView
:
Autocomplete
:
Fetch
:
Login
"
;
private
static
final
String
SAVE_LOGIN_EVENT
=
"
GeckoView
:
Autocomplete
:
Save
:
Login
"
;
private
static
final
String
USED_LOGIN_EVENT
=
"
GeckoView
:
Autocomplete
:
Used
:
Login
"
;
private
Nullable
LoginStorageDelegate
mDelegate
;
public
LoginStorageProxy
(
)
{
}
private
void
registerListener
(
)
{
EventDispatcher
.
getInstance
(
)
.
registerUiThreadListener
(
this
FETCH_LOGIN_EVENT
SAVE_LOGIN_EVENT
USED_LOGIN_EVENT
)
;
}
private
void
unregisterListener
(
)
{
EventDispatcher
.
getInstance
(
)
.
unregisterUiThreadListener
(
this
FETCH_LOGIN_EVENT
SAVE_LOGIN_EVENT
USED_LOGIN_EVENT
)
;
}
public
synchronized
void
setDelegate
(
final
Nullable
LoginStorageDelegate
delegate
)
{
if
(
mDelegate
=
=
null
&
&
delegate
!
=
null
)
{
registerListener
(
)
;
}
else
if
(
mDelegate
!
=
null
&
&
delegate
=
=
null
)
{
unregisterListener
(
)
;
}
mDelegate
=
delegate
;
}
public
synchronized
Nullable
LoginStorageDelegate
getDelegate
(
)
{
return
mDelegate
;
}
Override
public
synchronized
void
handleMessage
(
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
handleMessage
"
+
event
)
;
}
if
(
mDelegate
=
=
null
)
{
if
(
callback
!
=
null
)
{
callback
.
sendError
(
"
No
LoginStorageDelegate
attached
"
)
;
}
return
;
}
if
(
FETCH_LOGIN_EVENT
.
equals
(
event
)
)
{
final
String
domain
=
message
.
getString
(
"
domain
"
)
;
final
GeckoResult
<
Autocomplete
.
LoginEntry
[
]
>
result
=
mDelegate
.
onLoginFetch
(
domain
)
;
if
(
result
=
=
null
)
{
callback
.
sendSuccess
(
new
GeckoBundle
[
0
]
)
;
return
;
}
callback
.
resolveTo
(
result
.
map
(
logins
-
>
{
if
(
logins
=
=
null
)
{
return
new
GeckoBundle
[
0
]
;
}
final
GeckoBundle
[
]
loginBundles
=
new
GeckoBundle
[
logins
.
length
]
;
for
(
int
i
=
0
;
i
<
logins
.
length
;
+
+
i
)
{
loginBundles
[
i
]
=
logins
[
i
]
.
toBundle
(
)
;
}
return
loginBundles
;
}
)
)
;
}
else
if
(
SAVE_LOGIN_EVENT
.
equals
(
event
)
)
{
final
GeckoBundle
loginBundle
=
message
.
getBundle
(
"
login
"
)
;
final
LoginEntry
login
=
new
LoginEntry
(
loginBundle
)
;
mDelegate
.
onLoginSave
(
login
)
;
}
else
if
(
USED_LOGIN_EVENT
.
equals
(
event
)
)
{
final
GeckoBundle
loginBundle
=
message
.
getBundle
(
"
login
"
)
;
final
LoginEntry
login
=
new
LoginEntry
(
loginBundle
)
;
final
int
fields
=
message
.
getInt
(
"
usedFields
"
)
;
mDelegate
.
onLoginUsed
(
login
fields
)
;
}
}
}
}
