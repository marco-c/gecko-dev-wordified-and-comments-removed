package
org
.
mozilla
.
geckoview
;
import
android
.
util
.
Log
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
LongDef
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
math
.
BigInteger
;
import
java
.
nio
.
charset
.
Charset
;
import
java
.
util
.
List
;
import
java
.
util
.
Locale
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
geckoview
.
GeckoSession
.
PermissionDelegate
.
ContentPermission
;
public
final
class
StorageController
{
private
static
final
String
LOGTAG
=
"
StorageController
"
;
public
static
class
ClearFlags
{
public
static
final
long
COOKIES
=
1
<
<
0
;
public
static
final
long
NETWORK_CACHE
=
1
<
<
1
;
public
static
final
long
IMAGE_CACHE
=
1
<
<
2
;
public
static
final
long
DOM_STORAGES
=
1
<
<
4
;
public
static
final
long
AUTH_SESSIONS
=
1
<
<
5
;
public
static
final
long
PERMISSIONS
=
1
<
<
6
;
public
static
final
long
ALL_CACHES
=
NETWORK_CACHE
|
IMAGE_CACHE
;
public
static
final
long
SITE_SETTINGS
=
1
<
<
7
|
PERMISSIONS
;
public
static
final
long
SITE_DATA
=
1
<
<
8
|
COOKIES
|
DOM_STORAGES
|
ALL_CACHES
|
PERMISSIONS
|
SITE_SETTINGS
;
public
static
final
long
ALL
=
1
<
<
9
;
}
Retention
(
RetentionPolicy
.
SOURCE
)
LongDef
(
flag
=
true
value
=
{
ClearFlags
.
COOKIES
ClearFlags
.
NETWORK_CACHE
ClearFlags
.
IMAGE_CACHE
ClearFlags
.
DOM_STORAGES
ClearFlags
.
AUTH_SESSIONS
ClearFlags
.
PERMISSIONS
ClearFlags
.
ALL_CACHES
ClearFlags
.
SITE_SETTINGS
ClearFlags
.
SITE_DATA
ClearFlags
.
ALL
}
)
public
interface
StorageControllerClearFlags
{
}
AnyThread
public
NonNull
GeckoResult
<
Void
>
clearData
(
final
StorageControllerClearFlags
long
flags
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
1
)
;
bundle
.
putLong
(
"
flags
"
flags
)
;
return
EventDispatcher
.
getInstance
(
)
.
queryVoid
(
"
GeckoView
:
ClearData
"
bundle
)
;
}
AnyThread
public
NonNull
GeckoResult
<
Void
>
clearDataFromHost
(
final
NonNull
String
host
final
StorageControllerClearFlags
long
flags
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
2
)
;
bundle
.
putString
(
"
host
"
host
)
;
bundle
.
putLong
(
"
flags
"
flags
)
;
return
EventDispatcher
.
getInstance
(
)
.
queryVoid
(
"
GeckoView
:
ClearHostData
"
bundle
)
;
}
AnyThread
public
NonNull
GeckoResult
<
Void
>
clearDataFromBaseDomain
(
final
NonNull
String
baseDomain
final
StorageControllerClearFlags
long
flags
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
2
)
;
bundle
.
putString
(
"
baseDomain
"
baseDomain
)
;
bundle
.
putLong
(
"
flags
"
flags
)
;
return
EventDispatcher
.
getInstance
(
)
.
queryVoid
(
"
GeckoView
:
ClearBaseDomainData
"
bundle
)
;
}
AnyThread
public
void
clearDataForSessionContext
(
final
NonNull
String
contextId
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
1
)
;
bundle
.
putString
(
"
contextId
"
createSafeSessionContextId
(
contextId
)
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
ClearSessionContextData
"
bundle
)
;
}
static
Nullable
String
createSafeSessionContextId
(
final
Nullable
String
contextId
)
{
if
(
contextId
=
=
null
)
{
return
null
;
}
if
(
contextId
.
isEmpty
(
)
)
{
return
"
gvctxempty
"
;
}
return
String
.
format
(
"
gvctx
%
x
"
new
BigInteger
(
contextId
.
getBytes
(
)
)
)
.
toLowerCase
(
Locale
.
ROOT
)
;
}
static
Nullable
String
retrieveUnsafeSessionContextId
(
final
Nullable
String
contextId
)
{
if
(
contextId
=
=
null
|
|
contextId
.
isEmpty
(
)
)
{
return
null
;
}
if
(
"
gvctxempty
"
.
equals
(
contextId
)
)
{
return
"
"
;
}
final
byte
[
]
bytes
=
new
BigInteger
(
contextId
.
substring
(
5
)
16
)
.
toByteArray
(
)
;
return
new
String
(
bytes
Charset
.
forName
(
"
UTF
-
8
"
)
)
;
}
AnyThread
public
NonNull
GeckoResult
<
List
<
ContentPermission
>
>
getAllPermissions
(
)
{
return
EventDispatcher
.
getInstance
(
)
.
queryBundle
(
"
GeckoView
:
GetAllPermissions
"
)
.
map
(
bundle
-
>
{
final
GeckoBundle
[
]
permsArray
=
bundle
.
getBundleArray
(
"
permissions
"
)
;
return
ContentPermission
.
fromBundleArray
(
permsArray
)
;
}
)
;
}
AnyThread
public
NonNull
GeckoResult
<
List
<
ContentPermission
>
>
getPermissions
(
final
NonNull
String
uri
)
{
return
getPermissions
(
uri
null
false
)
;
}
AnyThread
public
NonNull
GeckoResult
<
List
<
ContentPermission
>
>
getPermissions
(
final
NonNull
String
uri
final
boolean
privateMode
)
{
return
getPermissions
(
uri
null
privateMode
)
;
}
AnyThread
public
NonNull
GeckoResult
<
List
<
ContentPermission
>
>
getPermissions
(
final
NonNull
String
uri
final
Nullable
String
contextId
final
boolean
privateMode
)
{
final
GeckoBundle
msg
=
new
GeckoBundle
(
2
)
;
final
int
privateBrowsingId
=
(
privateMode
)
?
1
:
0
;
msg
.
putString
(
"
uri
"
uri
)
;
msg
.
putString
(
"
contextId
"
createSafeSessionContextId
(
contextId
)
)
;
msg
.
putInt
(
"
privateBrowsingId
"
privateBrowsingId
)
;
return
EventDispatcher
.
getInstance
(
)
.
queryBundle
(
"
GeckoView
:
GetPermissionsByURI
"
msg
)
.
map
(
bundle
-
>
{
final
GeckoBundle
[
]
permsArray
=
bundle
.
getBundleArray
(
"
permissions
"
)
;
return
ContentPermission
.
fromBundleArray
(
permsArray
)
;
}
)
;
}
AnyThread
public
void
setPermission
(
final
NonNull
ContentPermission
perm
final
ContentPermission
.
Value
int
value
)
{
setPermissionInternal
(
perm
value
false
)
;
}
AnyThread
public
void
setPrivateBrowsingPermanentPermission
(
final
NonNull
ContentPermission
perm
final
ContentPermission
.
Value
int
value
)
{
setPermissionInternal
(
perm
value
true
)
;
}
private
void
setPermissionInternal
(
final
NonNull
ContentPermission
perm
final
ContentPermission
.
Value
int
value
final
boolean
allowPermanentPrivateBrowsing
)
{
if
(
perm
.
permission
=
=
GeckoSession
.
PermissionDelegate
.
PERMISSION_TRACKING
&
&
value
=
=
ContentPermission
.
VALUE_PROMPT
)
{
Log
.
w
(
LOGTAG
"
Cannot
set
a
tracking
permission
to
VALUE_PROMPT
aborting
.
"
)
;
return
;
}
final
GeckoBundle
msg
=
perm
.
toGeckoBundle
(
)
;
msg
.
putInt
(
"
newValue
"
value
)
;
msg
.
putBoolean
(
"
allowPermanentPrivateBrowsing
"
allowPermanentPrivateBrowsing
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
SetPermission
"
msg
)
;
}
AnyThread
public
void
setCookieBannerModeForDomain
(
final
NonNull
String
uri
final
ContentBlocking
.
CBCookieBannerMode
int
mode
final
boolean
isPrivateBrowsing
)
{
final
GeckoBundle
data
=
new
GeckoBundle
(
3
)
;
data
.
putString
(
"
uri
"
uri
)
;
data
.
putInt
(
"
mode
"
mode
)
;
data
.
putBoolean
(
"
isPrivateBrowsing
"
isPrivateBrowsing
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
SetCookieBannerModeForDomain
"
data
)
;
}
AnyThread
public
void
removeCookieBannerModeForDomain
(
final
NonNull
String
uri
final
boolean
isPrivateBrowsing
)
{
final
GeckoBundle
data
=
new
GeckoBundle
(
3
)
;
data
.
putString
(
"
uri
"
uri
)
;
data
.
putBoolean
(
"
isPrivateBrowsing
"
isPrivateBrowsing
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
RemoveCookieBannerModeForDomain
"
data
)
;
}
AnyThread
public
NonNull
ContentBlocking
.
CBCookieBannerMode
GeckoResult
<
Integer
>
getCookieBannerModeForDomain
(
final
NonNull
String
uri
final
boolean
isPrivateBrowsing
)
{
final
GeckoBundle
data
=
new
GeckoBundle
(
2
)
;
data
.
putString
(
"
uri
"
uri
)
;
data
.
putBoolean
(
"
isPrivateBrowsing
"
isPrivateBrowsing
)
;
return
EventDispatcher
.
getInstance
(
)
.
queryBundle
(
"
GeckoView
:
GetCookieBannerModeForDomain
"
data
)
.
map
(
StorageController
:
:
cookieBannerModeFromBundle
StorageController
:
:
fromQueryException
)
;
}
private
static
ContentBlocking
.
CBCookieBannerMode
int
cookieBannerModeFromBundle
(
final
GeckoBundle
bundle
)
throws
Exception
{
if
(
bundle
=
=
null
)
{
throw
new
Exception
(
"
Unable
to
parse
cookie
banner
mode
"
)
;
}
return
bundle
.
getInt
(
"
mode
"
)
;
}
private
static
Throwable
fromQueryException
(
final
Throwable
exception
)
{
final
EventDispatcher
.
QueryException
queryException
=
(
EventDispatcher
.
QueryException
)
exception
;
final
Object
response
=
queryException
.
data
;
return
new
Exception
(
response
.
toString
(
)
)
;
}
}
