package
org
.
mozilla
.
gecko
;
import
android
.
app
.
ActivityManager
;
import
android
.
app
.
ActivityManager
.
MemoryInfo
;
import
android
.
content
.
Context
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
util
.
StrictModeContext
;
import
java
.
io
.
File
;
import
java
.
io
.
FileFilter
;
import
java
.
util
.
regex
.
Pattern
;
public
final
class
SysInfo
{
private
static
final
String
LOG_TAG
=
"
GeckoSysInfo
"
;
private
static
final
int
MEMINFO_BUFFER_SIZE_BYTES
=
256
;
private
static
volatile
int
cpuCount
=
-
1
;
private
static
volatile
int
totalRAM
=
-
1
;
SuppressWarnings
(
"
try
"
)
public
static
int
getCPUCount
(
)
{
if
(
cpuCount
>
0
)
{
return
cpuCount
;
}
try
(
final
StrictModeContext
unused
=
StrictModeContext
.
allowDiskReads
(
)
)
{
return
readCPUCount
(
)
;
}
}
private
static
int
readCPUCount
(
)
{
class
CpuFilter
implements
FileFilter
{
Override
public
boolean
accept
(
final
File
pathname
)
{
return
Pattern
.
matches
(
"
cpu
[
0
-
9
]
+
"
pathname
.
getName
(
)
)
;
}
}
try
{
final
File
dir
=
new
File
(
"
/
sys
/
devices
/
system
/
cpu
/
"
)
;
return
cpuCount
=
dir
.
listFiles
(
new
CpuFilter
(
)
)
.
length
;
}
catch
(
final
Exception
e
)
{
Log
.
w
(
LOG_TAG
"
Assuming
1
CPU
;
got
exception
.
"
e
)
;
return
cpuCount
=
1
;
}
}
public
static
int
getMemSize
(
final
Context
context
)
{
if
(
totalRAM
>
=
0
)
{
return
totalRAM
;
}
final
MemoryInfo
memInfo
=
new
MemoryInfo
(
)
;
final
ActivityManager
am
=
(
ActivityManager
)
context
.
getSystemService
(
Context
.
ACTIVITY_SERVICE
)
;
am
.
getMemoryInfo
(
memInfo
)
;
totalRAM
=
(
int
)
(
memInfo
.
totalMem
/
(
1024
*
1024
)
)
;
Log
.
d
(
LOG_TAG
"
System
memory
:
"
+
totalRAM
+
"
MB
.
"
)
;
return
totalRAM
;
}
public
static
int
getVersion
(
)
{
return
android
.
os
.
Build
.
VERSION
.
SDK_INT
;
}
public
static
String
getReleaseVersion
(
)
{
return
android
.
os
.
Build
.
VERSION
.
RELEASE
;
}
public
static
String
getKernelVersion
(
)
{
return
System
.
getProperty
(
"
os
.
version
"
"
"
)
;
}
public
static
String
getManufacturer
(
)
{
return
android
.
os
.
Build
.
MANUFACTURER
;
}
public
static
String
getDevice
(
)
{
return
android
.
os
.
Build
.
MODEL
;
}
public
static
String
getHardware
(
)
{
return
android
.
os
.
Build
.
HARDWARE
;
}
public
static
String
getName
(
)
{
return
"
Android
"
;
}
public
static
String
getArchABI
(
)
{
return
android
.
os
.
Build
.
CPU_ABI
;
}
}
