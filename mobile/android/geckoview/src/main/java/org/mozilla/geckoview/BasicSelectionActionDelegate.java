package
org
.
mozilla
.
geckoview
;
import
android
.
annotation
.
TargetApi
;
import
android
.
app
.
Activity
;
import
android
.
graphics
.
Matrix
;
import
android
.
graphics
.
Rect
;
import
android
.
graphics
.
RectF
;
import
android
.
os
.
Build
;
import
android
.
view
.
ActionMode
;
import
android
.
view
.
Menu
;
import
android
.
view
.
MenuItem
;
import
android
.
view
.
View
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
List
;
public
class
BasicSelectionActionDelegate
implements
ActionMode
.
Callback
GeckoSession
.
SelectionActionDelegate
{
private
static
final
String
LOGTAG
=
"
GeckoBasicSelectionAction
"
;
private
static
final
String
[
]
FLOATING_TOOLBAR_ACTIONS
=
new
String
[
]
{
ACTION_CUT
ACTION_COPY
ACTION_PASTE
ACTION_SELECT_ALL
}
;
private
static
final
String
[
]
FIXED_TOOLBAR_ACTIONS
=
new
String
[
]
{
ACTION_PASTE
ACTION_COPY
ACTION_CUT
ACTION_SELECT_ALL
}
;
protected
final
Activity
mActivity
;
protected
final
boolean
mUseFloatingToolbar
;
protected
final
Matrix
mTempMatrix
=
new
Matrix
(
)
;
protected
final
RectF
mTempRect
=
new
RectF
(
)
;
protected
ActionMode
mActionMode
;
protected
GeckoSession
mSession
;
protected
Selection
mSelection
;
protected
List
<
String
>
mActions
;
protected
GeckoSession
.
Response
<
String
>
mResponse
;
TargetApi
(
Build
.
VERSION_CODES
.
M
)
private
class
Callback2Wrapper
extends
ActionMode
.
Callback2
{
Override
public
boolean
onCreateActionMode
(
final
ActionMode
actionMode
final
Menu
menu
)
{
return
BasicSelectionActionDelegate
.
this
.
onCreateActionMode
(
actionMode
menu
)
;
}
Override
public
boolean
onPrepareActionMode
(
final
ActionMode
actionMode
final
Menu
menu
)
{
return
BasicSelectionActionDelegate
.
this
.
onPrepareActionMode
(
actionMode
menu
)
;
}
Override
public
boolean
onActionItemClicked
(
final
ActionMode
actionMode
final
MenuItem
menuItem
)
{
return
BasicSelectionActionDelegate
.
this
.
onActionItemClicked
(
actionMode
menuItem
)
;
}
Override
public
void
onDestroyActionMode
(
final
ActionMode
actionMode
)
{
BasicSelectionActionDelegate
.
this
.
onDestroyActionMode
(
actionMode
)
;
}
Override
public
void
onGetContentRect
(
final
ActionMode
mode
final
View
view
final
Rect
outRect
)
{
super
.
onGetContentRect
(
mode
view
outRect
)
;
BasicSelectionActionDelegate
.
this
.
onGetContentRect
(
mode
view
outRect
)
;
}
}
public
BasicSelectionActionDelegate
(
final
Activity
activity
)
{
this
(
activity
Build
.
VERSION
.
SDK_INT
>
=
23
)
;
}
public
BasicSelectionActionDelegate
(
final
Activity
activity
final
boolean
useFloatingToolbar
)
{
mActivity
=
activity
;
mUseFloatingToolbar
=
useFloatingToolbar
;
}
protected
String
[
]
getAllActions
(
)
{
return
mUseFloatingToolbar
?
FLOATING_TOOLBAR_ACTIONS
:
FIXED_TOOLBAR_ACTIONS
;
}
protected
boolean
isActionAvailable
(
final
String
id
)
{
return
mActions
.
contains
(
id
)
;
}
protected
void
prepareAction
(
final
String
id
final
MenuItem
item
)
{
switch
(
id
)
{
case
ACTION_CUT
:
item
.
setTitle
(
android
.
R
.
string
.
cut
)
;
break
;
case
ACTION_COPY
:
item
.
setTitle
(
android
.
R
.
string
.
copy
)
;
break
;
case
ACTION_PASTE
:
item
.
setTitle
(
android
.
R
.
string
.
paste
)
;
break
;
case
ACTION_SELECT_ALL
:
item
.
setTitle
(
android
.
R
.
string
.
selectAll
)
;
break
;
}
}
protected
boolean
performAction
(
final
String
id
)
{
mResponse
.
respond
(
id
)
;
if
(
ACTION_COPY
.
equals
(
id
)
)
{
if
(
isActionAvailable
(
ACTION_COLLAPSE_TO_END
)
)
{
mResponse
.
respond
(
ACTION_COLLAPSE_TO_END
)
;
}
else
{
mResponse
.
respond
(
ACTION_UNSELECT
)
;
}
}
return
true
;
}
Override
public
boolean
onCreateActionMode
(
final
ActionMode
actionMode
final
Menu
menu
)
{
final
String
[
]
allActions
=
getAllActions
(
)
;
for
(
final
String
actionId
:
allActions
)
{
if
(
isActionAvailable
(
actionId
)
)
{
return
true
;
}
}
return
false
;
}
Override
public
boolean
onPrepareActionMode
(
final
ActionMode
actionMode
final
Menu
menu
)
{
final
String
[
]
allActions
=
getAllActions
(
)
;
boolean
changed
=
false
;
for
(
int
menuId
=
0
;
menuId
<
allActions
.
length
;
menuId
+
+
)
{
final
String
actionId
=
allActions
[
menuId
]
;
if
(
isActionAvailable
(
actionId
)
)
{
if
(
menu
.
findItem
(
menuId
)
=
=
null
)
{
prepareAction
(
actionId
menu
.
add
(
Menu
.
NONE
menuId
menuId
"
"
)
)
;
changed
=
true
;
}
}
else
if
(
menu
.
findItem
(
menuId
)
!
=
null
)
{
menu
.
removeItem
(
menuId
)
;
changed
=
true
;
}
}
return
changed
;
}
Override
public
boolean
onActionItemClicked
(
final
ActionMode
actionMode
final
MenuItem
menuItem
)
{
final
String
[
]
allActions
=
getAllActions
(
)
;
return
performAction
(
allActions
[
menuItem
.
getItemId
(
)
]
)
;
}
Override
public
void
onDestroyActionMode
(
final
ActionMode
actionMode
)
{
mSession
=
null
;
mSelection
=
null
;
mActions
=
null
;
mResponse
=
null
;
mActionMode
=
null
;
}
public
void
onGetContentRect
(
final
ActionMode
mode
final
View
view
final
Rect
outRect
)
{
if
(
mSelection
.
clientRect
=
=
null
)
{
return
;
}
mSession
.
getClientToScreenMatrix
(
mTempMatrix
)
;
mTempMatrix
.
mapRect
(
mTempRect
mSelection
.
clientRect
)
;
mTempRect
.
roundOut
(
outRect
)
;
}
TargetApi
(
Build
.
VERSION_CODES
.
M
)
Override
public
void
onShowActionRequest
(
final
GeckoSession
session
final
Selection
selection
final
String
[
]
actions
final
GeckoSession
.
Response
<
String
>
response
)
{
mSession
=
session
;
mSelection
=
selection
;
mActions
=
Arrays
.
asList
(
actions
)
;
mResponse
=
response
;
if
(
mActionMode
!
=
null
)
{
if
(
actions
.
length
>
0
)
{
mActionMode
.
invalidate
(
)
;
}
else
{
mActionMode
.
finish
(
)
;
}
return
;
}
if
(
mUseFloatingToolbar
)
{
mActionMode
=
mActivity
.
startActionMode
(
new
Callback2Wrapper
(
)
ActionMode
.
TYPE_FLOATING
)
;
}
else
{
mActionMode
=
mActivity
.
startActionMode
(
this
)
;
}
}
Override
public
void
onHideAction
(
GeckoSession
session
int
reason
)
{
if
(
mActionMode
=
=
null
)
{
return
;
}
switch
(
reason
)
{
case
HIDE_REASON_ACTIVE_SCROLL
:
case
HIDE_REASON_ACTIVE_SELECTION
:
case
HIDE_REASON_INVISIBLE_SELECTION
:
if
(
mUseFloatingToolbar
)
{
mActionMode
.
finish
(
)
;
}
break
;
case
HIDE_REASON_NO_SELECTION
:
mActionMode
.
finish
(
)
;
break
;
}
}
}
