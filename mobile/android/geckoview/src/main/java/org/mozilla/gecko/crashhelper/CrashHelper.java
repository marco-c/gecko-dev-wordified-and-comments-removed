package
org
.
mozilla
.
gecko
.
crashhelper
;
import
android
.
app
.
Service
;
import
android
.
content
.
ComponentName
;
import
android
.
content
.
Intent
;
import
android
.
content
.
ServiceConnection
;
import
android
.
os
.
Binder
;
import
android
.
os
.
DeadObjectException
;
import
android
.
os
.
IBinder
;
import
android
.
os
.
Process
;
import
android
.
os
.
RemoteException
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
mozglue
.
GeckoLoader
;
import
org
.
mozilla
.
geckoview
.
BuildConfig
;
public
final
class
CrashHelper
extends
Service
{
private
static
final
String
LOGTAG
=
"
GeckoCrashHelper
"
;
private
static
final
boolean
DEBUG
=
!
BuildConfig
.
MOZILLA_OFFICIAL
;
private
final
Binder
mBinder
=
new
CrashHelperBinder
(
)
;
private
static
boolean
sNativeLibLoaded
;
Override
public
synchronized
void
onCreate
(
)
{
if
(
!
sNativeLibLoaded
)
{
GeckoLoader
.
doLoadLibrary
(
this
"
crashhelper
"
)
;
sNativeLibLoaded
=
true
;
}
}
private
static
class
CrashHelperBinder
extends
ICrashHelper
.
Stub
{
Override
public
boolean
start
(
final
int
clientPid
)
{
CrashHelper
.
crash_generator
(
clientPid
)
;
return
false
;
}
}
Override
public
IBinder
onBind
(
final
Intent
intent
)
{
if
(
intent
=
=
null
)
{
Log
.
d
(
LOGTAG
"
Intent
is
empty
crash
helper
will
not
start
"
)
;
return
null
;
}
return
mBinder
;
}
public
static
ServiceConnection
createConnection
(
)
{
final
ServiceConnection
connection
=
new
ServiceConnection
(
)
{
Override
public
void
onServiceConnected
(
final
ComponentName
name
final
IBinder
service
)
{
final
ICrashHelper
helper
=
ICrashHelper
.
Stub
.
asInterface
(
service
)
;
try
{
helper
.
start
(
Process
.
myPid
(
)
)
;
}
catch
(
final
DeadObjectException
e
)
{
return
;
}
catch
(
final
RemoteException
e
)
{
throw
new
RuntimeException
(
e
)
;
}
}
Override
public
void
onServiceDisconnected
(
final
ComponentName
name
)
{
}
}
;
return
connection
;
}
protected
static
native
void
crash_generator
(
int
clientPid
)
;
}
