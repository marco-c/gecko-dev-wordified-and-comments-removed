package
org
.
mozilla
.
geckoview
;
import
android
.
support
.
annotation
.
AnyThread
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
util
.
Log
;
import
org
.
json
.
JSONException
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
MultiMap
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
public
class
WebExtensionController
{
private
final
static
String
LOGTAG
=
"
WebExtension
"
;
private
PromptDelegate
mPromptDelegate
;
private
final
WebExtension
.
Listener
mListener
;
private
final
MultiMap
<
Long
Message
>
mPendingPortMessages
;
private
final
MultiMap
<
String
Message
>
mPendingMessages
;
private
static
class
Message
{
final
GeckoBundle
bundle
;
final
EventCallback
callback
;
final
String
event
;
final
GeckoSession
session
;
public
Message
(
final
String
event
final
GeckoBundle
bundle
final
EventCallback
callback
final
GeckoSession
session
)
{
this
.
bundle
=
bundle
;
this
.
callback
=
callback
;
this
.
event
=
event
;
this
.
session
=
session
;
}
}
private
static
class
ExtensionStore
{
final
private
Map
<
String
WebExtension
>
mData
=
new
HashMap
<
>
(
)
;
public
GeckoResult
<
WebExtension
>
get
(
final
String
id
)
{
final
WebExtension
extension
=
mData
.
get
(
id
)
;
if
(
extension
=
=
null
)
{
final
WebExtensionResult
result
=
new
WebExtensionResult
(
"
extension
"
)
;
final
GeckoBundle
bundle
=
new
GeckoBundle
(
1
)
;
bundle
.
putString
(
"
extensionId
"
id
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
WebExtension
:
Get
"
bundle
result
)
;
return
result
.
then
(
ext
-
>
{
mData
.
put
(
ext
.
id
ext
)
;
return
GeckoResult
.
fromValue
(
ext
)
;
}
)
;
}
return
GeckoResult
.
fromValue
(
extension
)
;
}
public
void
remove
(
final
String
id
)
{
mData
.
remove
(
id
)
;
}
public
void
update
(
final
String
id
final
WebExtension
extension
)
{
mData
.
put
(
id
extension
)
;
}
}
private
ExtensionStore
mExtensions
=
new
ExtensionStore
(
)
;
private
Map
<
Long
WebExtension
.
Port
>
mPorts
=
new
HashMap
<
>
(
)
;
private
Internals
mInternals
=
new
Internals
(
)
;
private
class
Internals
implements
BundleEventListener
WebExtension
.
Port
.
Observer
{
Override
public
void
handleMessage
(
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
WebExtensionController
.
this
.
handleMessage
(
event
message
callback
null
)
;
}
Override
public
void
onDisconnectFromApp
(
final
WebExtension
.
Port
port
)
{
mPorts
.
remove
(
port
.
id
)
;
}
Override
public
void
onDelegateAttached
(
final
WebExtension
.
Port
port
)
{
if
(
port
.
delegate
=
=
null
)
{
return
;
}
for
(
final
Message
message
:
mPendingPortMessages
.
get
(
port
.
id
)
)
{
WebExtensionController
.
this
.
portMessage
(
message
)
;
}
mPendingPortMessages
.
remove
(
port
.
id
)
;
}
}
private
class
DelegateController
implements
WebExtension
.
DelegateController
{
private
WebExtension
mExtension
;
public
DelegateController
(
final
WebExtension
extension
)
{
mExtension
=
extension
;
}
Override
public
void
onMessageDelegate
(
final
String
nativeApp
final
WebExtension
.
MessageDelegate
delegate
)
{
mListener
.
setMessageDelegate
(
mExtension
delegate
nativeApp
)
;
if
(
delegate
=
=
null
)
{
return
;
}
for
(
final
Message
message
:
mPendingMessages
.
get
(
mExtension
.
id
)
)
{
WebExtensionController
.
this
.
handleMessage
(
message
.
event
message
.
bundle
message
.
callback
message
.
session
)
;
}
mPendingMessages
.
remove
(
mExtension
.
id
)
;
}
Override
public
void
onActionDelegate
(
final
WebExtension
.
ActionDelegate
delegate
)
{
mListener
.
setActionDelegate
(
mExtension
delegate
)
;
}
Override
public
WebExtension
.
ActionDelegate
getActionDelegate
(
)
{
return
mListener
.
getActionDelegate
(
mExtension
)
;
}
}
DelegateController
delegateFor
(
final
WebExtension
extension
)
{
return
new
DelegateController
(
extension
)
;
}
public
interface
TabDelegate
{
UiThread
Nullable
default
GeckoResult
<
GeckoSession
>
onNewTab
(
Nullable
WebExtension
source
Nullable
String
uri
)
{
return
null
;
}
UiThread
NonNull
default
GeckoResult
<
AllowOrDeny
>
onCloseTab
(
Nullable
WebExtension
source
NonNull
GeckoSession
session
)
{
return
GeckoResult
.
DENY
;
}
}
UiThread
public
Nullable
TabDelegate
getTabDelegate
(
)
{
return
mListener
.
getTabDelegate
(
)
;
}
UiThread
public
void
setTabDelegate
(
final
Nullable
TabDelegate
delegate
)
{
mListener
.
setTabDelegate
(
delegate
)
;
}
UiThread
public
interface
PromptDelegate
{
Nullable
default
GeckoResult
<
AllowOrDeny
>
onInstallPrompt
(
final
NonNull
WebExtension
extension
)
{
return
null
;
}
}
UiThread
Nullable
public
PromptDelegate
getPromptDelegate
(
)
{
return
mPromptDelegate
;
}
UiThread
public
void
setPromptDelegate
(
final
Nullable
PromptDelegate
delegate
)
{
if
(
delegate
=
=
null
&
&
mPromptDelegate
!
=
null
)
{
EventDispatcher
.
getInstance
(
)
.
unregisterUiThreadListener
(
mInternals
"
GeckoView
:
WebExtension
:
InstallPrompt
"
"
GeckoView
:
WebExtension
:
UpdatePrompt
"
"
GeckoView
:
WebExtension
:
OptionalPrompt
"
)
;
}
else
if
(
delegate
!
=
null
&
&
mPromptDelegate
=
=
null
)
{
EventDispatcher
.
getInstance
(
)
.
registerUiThreadListener
(
mInternals
"
GeckoView
:
WebExtension
:
InstallPrompt
"
"
GeckoView
:
WebExtension
:
UpdatePrompt
"
"
GeckoView
:
WebExtension
:
OptionalPrompt
"
)
;
}
mPromptDelegate
=
delegate
;
}
private
static
class
WebExtensionResult
extends
GeckoResult
<
WebExtension
>
implements
EventCallback
{
private
final
String
mFieldName
;
public
WebExtensionResult
(
final
String
fieldName
)
{
mFieldName
=
fieldName
;
}
Override
public
void
sendSuccess
(
final
Object
response
)
{
final
GeckoBundle
bundle
=
(
GeckoBundle
)
response
;
complete
(
new
WebExtension
(
bundle
.
getBundle
(
mFieldName
)
)
)
;
}
Override
public
void
sendError
(
final
Object
response
)
{
if
(
response
instanceof
GeckoBundle
&
&
(
(
GeckoBundle
)
response
)
.
containsKey
(
"
installError
"
)
)
{
final
GeckoBundle
bundle
=
(
GeckoBundle
)
response
;
final
int
errorCode
=
bundle
.
getInt
(
"
installError
"
)
;
completeExceptionally
(
new
WebExtension
.
InstallException
(
errorCode
)
)
;
}
else
{
completeExceptionally
(
new
Exception
(
response
.
toString
(
)
)
)
;
}
}
}
NonNull
AnyThread
public
GeckoResult
<
WebExtension
>
install
(
final
NonNull
String
uri
)
{
final
WebExtensionResult
result
=
new
WebExtensionResult
(
"
extension
"
)
;
final
GeckoBundle
bundle
=
new
GeckoBundle
(
1
)
;
bundle
.
putString
(
"
locationUri
"
uri
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
WebExtension
:
Install
"
bundle
result
)
;
return
result
.
then
(
extension
-
>
{
registerWebExtension
(
extension
)
;
return
GeckoResult
.
fromValue
(
extension
)
;
}
)
;
}
GeckoResult
<
WebExtension
>
installBuiltIn
(
final
String
uri
)
{
final
WebExtensionResult
result
=
new
WebExtensionResult
(
"
extension
"
)
;
final
GeckoBundle
bundle
=
new
GeckoBundle
(
1
)
;
bundle
.
putString
(
"
locationUri
"
uri
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
WebExtension
:
InstallBuiltIn
"
bundle
result
)
;
return
result
.
then
(
extension
-
>
{
registerWebExtension
(
extension
)
;
return
GeckoResult
.
fromValue
(
extension
)
;
}
)
;
}
NonNull
AnyThread
public
GeckoResult
<
Void
>
uninstall
(
final
NonNull
WebExtension
extension
)
{
final
CallbackResult
<
Void
>
result
=
new
CallbackResult
<
Void
>
(
)
{
Override
public
void
sendSuccess
(
final
Object
response
)
{
complete
(
null
)
;
}
}
;
unregisterWebExtension
(
extension
)
;
final
GeckoBundle
bundle
=
new
GeckoBundle
(
1
)
;
bundle
.
putString
(
"
webExtensionId
"
extension
.
id
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
WebExtension
:
Uninstall
"
bundle
result
)
;
return
result
;
}
GeckoResult
<
WebExtension
>
enable
(
final
WebExtension
extension
)
{
final
WebExtensionResult
result
=
new
WebExtensionResult
(
"
extension
"
)
;
final
GeckoBundle
bundle
=
new
GeckoBundle
(
1
)
;
bundle
.
putString
(
"
webExtensionId
"
extension
.
id
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
WebExtension
:
Enable
"
bundle
result
)
;
return
result
.
then
(
newExtension
-
>
{
registerWebExtension
(
newExtension
)
;
return
GeckoResult
.
fromValue
(
newExtension
)
;
}
)
;
}
GeckoResult
<
WebExtension
>
disable
(
final
WebExtension
extension
)
{
final
WebExtensionResult
result
=
new
WebExtensionResult
(
"
extension
"
)
;
final
GeckoBundle
bundle
=
new
GeckoBundle
(
1
)
;
bundle
.
putString
(
"
webExtensionId
"
extension
.
id
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
WebExtension
:
Disable
"
bundle
result
)
;
return
result
.
then
(
newExtension
-
>
{
registerWebExtension
(
newExtension
)
;
return
GeckoResult
.
fromValue
(
newExtension
)
;
}
)
;
}
AnyThread
NonNull
public
GeckoResult
<
List
<
WebExtension
>
>
list
(
)
{
final
CallbackResult
<
List
<
WebExtension
>
>
result
=
new
CallbackResult
<
List
<
WebExtension
>
>
(
)
{
Override
public
void
sendSuccess
(
final
Object
response
)
{
final
GeckoBundle
[
]
bundles
=
(
(
GeckoBundle
)
response
)
.
getBundleArray
(
"
extensions
"
)
;
final
List
<
WebExtension
>
list
=
new
ArrayList
<
>
(
bundles
.
length
)
;
for
(
GeckoBundle
bundle
:
bundles
)
{
final
WebExtension
extension
=
new
WebExtension
(
bundle
)
;
registerWebExtension
(
extension
)
;
list
.
add
(
extension
)
;
}
complete
(
list
)
;
}
}
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
WebExtension
:
List
"
null
result
)
;
return
result
;
}
GeckoResult
<
WebExtension
>
update
(
final
WebExtension
extension
)
{
final
WebExtensionResult
result
=
new
WebExtensionResult
(
"
extension
"
)
;
final
GeckoBundle
bundle
=
new
GeckoBundle
(
1
)
;
bundle
.
putString
(
"
webExtensionId
"
extension
.
id
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
WebExtension
:
Update
"
bundle
result
)
;
return
result
.
then
(
newExtension
-
>
{
registerWebExtension
(
newExtension
)
;
return
GeckoResult
.
fromValue
(
newExtension
)
;
}
)
;
}
WebExtensionController
(
final
GeckoRuntime
runtime
)
{
mListener
=
new
WebExtension
.
Listener
(
runtime
)
;
mPendingPortMessages
=
new
MultiMap
<
>
(
)
;
mPendingMessages
=
new
MultiMap
<
>
(
)
;
}
void
registerWebExtension
(
final
WebExtension
webExtension
)
{
webExtension
.
setDelegateController
(
new
DelegateController
(
webExtension
)
)
;
mExtensions
.
update
(
webExtension
.
id
webExtension
)
;
}
void
handleMessage
(
final
String
event
final
GeckoBundle
bundle
final
EventCallback
callback
final
GeckoSession
session
)
{
final
Message
message
=
new
Message
(
event
bundle
callback
session
)
;
if
(
"
GeckoView
:
WebExtension
:
Disconnect
"
.
equals
(
event
)
)
{
disconnect
(
bundle
.
getLong
(
"
portId
"
-
1
)
callback
)
;
return
;
}
else
if
(
"
GeckoView
:
WebExtension
:
PortMessage
"
.
equals
(
event
)
)
{
portMessage
(
message
)
;
return
;
}
else
if
(
"
GeckoView
:
BrowserAction
:
Update
"
.
equals
(
event
)
)
{
actionUpdate
(
bundle
session
WebExtension
.
Action
.
TYPE_BROWSER_ACTION
)
;
return
;
}
else
if
(
"
GeckoView
:
PageAction
:
Update
"
.
equals
(
event
)
)
{
actionUpdate
(
bundle
session
WebExtension
.
Action
.
TYPE_PAGE_ACTION
)
;
return
;
}
else
if
(
"
GeckoView
:
BrowserAction
:
OpenPopup
"
.
equals
(
event
)
)
{
openPopup
(
bundle
session
WebExtension
.
Action
.
TYPE_BROWSER_ACTION
)
;
return
;
}
else
if
(
"
GeckoView
:
PageAction
:
OpenPopup
"
.
equals
(
event
)
)
{
openPopup
(
bundle
session
WebExtension
.
Action
.
TYPE_PAGE_ACTION
)
;
return
;
}
else
if
(
"
GeckoView
:
WebExtension
:
InstallPrompt
"
.
equals
(
event
)
)
{
installPrompt
(
bundle
callback
)
;
return
;
}
final
String
nativeApp
=
bundle
.
getString
(
"
nativeApp
"
)
;
if
(
nativeApp
=
=
null
)
{
if
(
BuildConfig
.
DEBUG
)
{
throw
new
RuntimeException
(
"
Missing
required
nativeApp
message
parameter
.
"
)
;
}
callback
.
sendError
(
"
Missing
nativeApp
parameter
.
"
)
;
return
;
}
final
GeckoBundle
senderBundle
=
bundle
.
getBundle
(
"
sender
"
)
;
final
String
extensionId
=
senderBundle
.
getString
(
"
extensionId
"
)
;
mExtensions
.
get
(
extensionId
)
.
accept
(
extension
-
>
{
final
WebExtension
.
MessageSender
sender
=
fromBundle
(
extension
senderBundle
session
)
;
if
(
sender
=
=
null
)
{
if
(
callback
!
=
null
)
{
if
(
BuildConfig
.
DEBUG
)
{
try
{
Log
.
e
(
LOGTAG
"
Could
not
find
recipient
for
message
:
"
+
bundle
.
toJSONObject
(
)
)
;
}
catch
(
JSONException
ex
)
{
}
}
callback
.
sendError
(
"
Could
not
find
recipient
for
"
+
bundle
.
getBundle
(
"
sender
"
)
)
;
}
return
;
}
if
(
"
GeckoView
:
WebExtension
:
Connect
"
.
equals
(
event
)
)
{
connect
(
nativeApp
bundle
.
getLong
(
"
portId
"
-
1
)
message
sender
)
;
}
else
if
(
"
GeckoView
:
WebExtension
:
Message
"
.
equals
(
event
)
)
{
message
(
nativeApp
message
sender
)
;
}
}
)
;
}
private
void
installPrompt
(
final
GeckoBundle
message
final
EventCallback
callback
)
{
final
GeckoBundle
extensionBundle
=
message
.
getBundle
(
"
extension
"
)
;
if
(
extensionBundle
=
=
null
|
|
!
extensionBundle
.
containsKey
(
"
webExtensionId
"
)
|
|
!
extensionBundle
.
containsKey
(
"
locationURI
"
)
)
{
if
(
BuildConfig
.
DEBUG
)
{
throw
new
RuntimeException
(
"
Missing
webExtensionId
or
locationURI
"
)
;
}
Log
.
e
(
LOGTAG
"
Missing
webExtensionId
or
locationURI
"
)
;
return
;
}
final
WebExtension
extension
=
new
WebExtension
(
extensionBundle
)
;
extension
.
setDelegateController
(
new
DelegateController
(
extension
)
)
;
if
(
mPromptDelegate
=
=
null
)
{
Log
.
e
(
LOGTAG
"
Tried
to
install
extension
"
+
extension
.
id
+
"
but
no
delegate
is
registered
"
)
;
return
;
}
final
GeckoResult
<
AllowOrDeny
>
promptResponse
=
mPromptDelegate
.
onInstallPrompt
(
extension
)
;
if
(
promptResponse
=
=
null
)
{
return
;
}
promptResponse
.
accept
(
allowOrDeny
-
>
{
GeckoBundle
response
=
new
GeckoBundle
(
1
)
;
if
(
AllowOrDeny
.
ALLOW
.
equals
(
allowOrDeny
)
)
{
response
.
putBoolean
(
"
allow
"
true
)
;
}
else
{
response
.
putBoolean
(
"
allow
"
false
)
;
}
callback
.
sendSuccess
(
response
)
;
}
)
;
}
void
newTab
(
final
GeckoBundle
message
final
EventCallback
callback
final
TabDelegate
delegate
)
{
mExtensions
.
get
(
message
.
getString
(
"
extensionId
"
)
)
.
then
(
extension
-
>
delegate
.
onNewTab
(
extension
message
.
getString
(
"
uri
"
)
)
)
.
accept
(
session
-
>
{
if
(
session
=
=
null
)
{
callback
.
sendSuccess
(
null
)
;
return
;
}
if
(
session
.
isOpen
(
)
)
{
throw
new
IllegalArgumentException
(
"
Must
use
an
unopened
GeckoSession
instance
"
)
;
}
session
.
open
(
mListener
.
runtime
)
;
callback
.
sendSuccess
(
session
.
getId
(
)
)
;
}
)
;
}
void
closeTab
(
final
GeckoBundle
message
final
EventCallback
callback
final
TabDelegate
delegate
final
GeckoSession
session
)
{
mExtensions
.
get
(
message
.
getString
(
"
extensionId
"
)
)
.
then
(
extension
-
>
delegate
.
onCloseTab
(
extension
session
)
exception
-
>
delegate
.
onCloseTab
(
null
session
)
)
.
accept
(
value
-
>
{
if
(
value
=
=
AllowOrDeny
.
ALLOW
)
{
callback
.
sendSuccess
(
null
)
;
}
else
{
callback
.
sendError
(
null
)
;
}
}
)
;
}
void
unregisterWebExtension
(
final
WebExtension
webExtension
)
{
mExtensions
.
remove
(
webExtension
.
id
)
;
webExtension
.
setDelegateController
(
null
)
;
Iterator
<
Map
.
Entry
<
Long
WebExtension
.
Port
>
>
it
=
mPorts
.
entrySet
(
)
.
iterator
(
)
;
while
(
it
.
hasNext
(
)
)
{
WebExtension
.
Port
port
=
it
.
next
(
)
.
getValue
(
)
;
if
(
port
.
sender
.
webExtension
.
equals
(
webExtension
)
)
{
it
.
remove
(
)
;
}
}
}
private
WebExtension
.
MessageSender
fromBundle
(
final
WebExtension
extension
final
GeckoBundle
sender
final
GeckoSession
session
)
{
if
(
extension
=
=
null
)
{
return
null
;
}
final
String
envType
=
sender
.
getString
(
"
envType
"
)
;
WebExtension
.
MessageSender
.
EnvType
int
environmentType
;
if
(
"
content_child
"
.
equals
(
envType
)
)
{
environmentType
=
WebExtension
.
MessageSender
.
ENV_TYPE_CONTENT_SCRIPT
;
}
else
if
(
"
addon_child
"
.
equals
(
envType
)
)
{
environmentType
=
WebExtension
.
MessageSender
.
ENV_TYPE_EXTENSION
;
}
else
{
environmentType
=
WebExtension
.
MessageSender
.
ENV_TYPE_UNKNOWN
;
}
if
(
environmentType
=
=
WebExtension
.
MessageSender
.
ENV_TYPE_UNKNOWN
)
{
if
(
BuildConfig
.
DEBUG
)
{
throw
new
RuntimeException
(
"
Missing
or
unknown
envType
.
"
)
;
}
return
null
;
}
final
String
url
=
sender
.
getString
(
"
url
"
)
;
boolean
isTopLevel
;
if
(
session
=
=
null
)
{
isTopLevel
=
true
;
}
else
{
if
(
!
sender
.
containsKey
(
"
frameId
"
)
|
|
!
sender
.
containsKey
(
"
url
"
)
|
|
sender
.
getInt
(
"
frameId
"
-
1
)
=
=
-
1
)
{
if
(
BuildConfig
.
DEBUG
)
{
throw
new
RuntimeException
(
"
Missing
sender
information
.
"
)
;
}
return
null
;
}
isTopLevel
=
sender
.
getInt
(
"
frameId
"
-
1
)
=
=
0
;
}
return
new
WebExtension
.
MessageSender
(
extension
session
url
environmentType
isTopLevel
)
;
}
private
void
disconnect
(
final
long
portId
final
EventCallback
callback
)
{
final
WebExtension
.
Port
port
=
mPorts
.
get
(
portId
)
;
if
(
port
=
=
null
)
{
Log
.
d
(
LOGTAG
"
Could
not
find
recipient
for
port
"
+
portId
)
;
return
;
}
if
(
port
.
delegate
!
=
null
)
{
port
.
delegate
.
onDisconnect
(
port
)
;
}
mPorts
.
remove
(
portId
)
;
if
(
callback
!
=
null
)
{
callback
.
sendSuccess
(
true
)
;
}
}
private
WebExtension
.
MessageDelegate
getDelegate
(
final
String
nativeApp
final
WebExtension
.
MessageSender
sender
final
EventCallback
callback
)
{
if
(
(
sender
.
webExtension
.
flags
&
WebExtension
.
Flags
.
ALLOW_CONTENT_MESSAGING
)
=
=
0
&
&
sender
.
environmentType
=
=
WebExtension
.
MessageSender
.
ENV_TYPE_CONTENT_SCRIPT
)
{
callback
.
sendError
(
"
This
NativeApp
can
'
t
receive
messages
from
Content
Scripts
.
"
)
;
return
null
;
}
WebExtension
.
MessageDelegate
delegate
=
null
;
if
(
sender
.
session
!
=
null
)
{
delegate
=
sender
.
session
.
getMessageDelegate
(
sender
.
webExtension
nativeApp
)
;
}
else
if
(
sender
.
environmentType
=
=
WebExtension
.
MessageSender
.
ENV_TYPE_EXTENSION
)
{
delegate
=
mListener
.
getMessageDelegate
(
sender
.
webExtension
nativeApp
)
;
}
if
(
delegate
=
=
null
)
{
callback
.
sendError
(
"
Native
app
not
found
or
this
WebExtension
does
not
have
permissions
.
"
)
;
return
null
;
}
return
delegate
;
}
private
void
connect
(
final
String
nativeApp
final
long
portId
final
Message
message
final
WebExtension
.
MessageSender
sender
)
{
if
(
portId
=
=
-
1
)
{
message
.
callback
.
sendError
(
"
Missing
portId
.
"
)
;
return
;
}
final
WebExtension
.
Port
port
=
new
WebExtension
.
Port
(
nativeApp
portId
sender
mInternals
)
;
mPorts
.
put
(
port
.
id
port
)
;
final
WebExtension
.
MessageDelegate
delegate
=
getDelegate
(
nativeApp
sender
message
.
callback
)
;
if
(
delegate
=
=
null
)
{
mPendingMessages
.
add
(
sender
.
webExtension
.
id
message
)
;
return
;
}
delegate
.
onConnect
(
port
)
;
message
.
callback
.
sendSuccess
(
true
)
;
}
private
void
portMessage
(
final
Message
message
)
{
final
GeckoBundle
bundle
=
message
.
bundle
;
final
long
portId
=
bundle
.
getLong
(
"
portId
"
-
1
)
;
final
WebExtension
.
Port
port
=
mPorts
.
get
(
portId
)
;
if
(
port
=
=
null
)
{
if
(
BuildConfig
.
DEBUG
)
{
try
{
Log
.
e
(
LOGTAG
"
Could
not
find
recipient
for
message
:
"
+
bundle
.
toJSONObject
(
)
)
;
}
catch
(
JSONException
ex
)
{
}
}
mPendingPortMessages
.
add
(
portId
message
)
;
return
;
}
final
Object
content
;
try
{
content
=
bundle
.
toJSONObject
(
)
.
get
(
"
data
"
)
;
}
catch
(
JSONException
ex
)
{
message
.
callback
.
sendError
(
ex
)
;
return
;
}
if
(
port
.
delegate
=
=
null
)
{
mPendingPortMessages
.
add
(
portId
message
)
;
return
;
}
port
.
delegate
.
onPortMessage
(
content
port
)
;
message
.
callback
.
sendSuccess
(
null
)
;
}
private
void
message
(
final
String
nativeApp
final
Message
message
final
WebExtension
.
MessageSender
sender
)
{
final
EventCallback
callback
=
message
.
callback
;
final
Object
content
;
try
{
content
=
message
.
bundle
.
toJSONObject
(
)
.
get
(
"
data
"
)
;
}
catch
(
JSONException
ex
)
{
callback
.
sendError
(
ex
)
;
return
;
}
final
WebExtension
.
MessageDelegate
delegate
=
getDelegate
(
nativeApp
sender
callback
)
;
if
(
delegate
=
=
null
)
{
mPendingMessages
.
add
(
sender
.
webExtension
.
id
message
)
;
return
;
}
final
GeckoResult
<
Object
>
response
=
delegate
.
onMessage
(
nativeApp
content
sender
)
;
if
(
response
=
=
null
)
{
callback
.
sendSuccess
(
null
)
;
return
;
}
response
.
accept
(
value
-
>
callback
.
sendSuccess
(
value
)
exception
-
>
callback
.
sendError
(
exception
)
)
;
}
private
GeckoResult
<
WebExtension
>
extensionFromBundle
(
final
GeckoBundle
message
)
{
final
String
extensionId
=
message
.
getString
(
"
extensionId
"
)
;
return
mExtensions
.
get
(
extensionId
)
;
}
private
void
openPopup
(
final
GeckoBundle
message
final
GeckoSession
session
final
WebExtension
.
Action
.
ActionType
int
actionType
)
{
extensionFromBundle
(
message
)
.
accept
(
extension
-
>
{
if
(
extension
=
=
null
)
{
return
;
}
final
WebExtension
.
Action
action
=
new
WebExtension
.
Action
(
actionType
message
.
getBundle
(
"
action
"
)
extension
)
;
final
WebExtension
.
ActionDelegate
delegate
=
actionDelegateFor
(
extension
session
)
;
if
(
delegate
=
=
null
)
{
return
;
}
final
GeckoResult
<
GeckoSession
>
popup
=
delegate
.
onOpenPopup
(
extension
action
)
;
action
.
openPopup
(
popup
)
;
}
)
;
}
private
WebExtension
.
ActionDelegate
actionDelegateFor
(
final
WebExtension
extension
final
GeckoSession
session
)
{
if
(
session
=
=
null
)
{
return
mListener
.
getActionDelegate
(
extension
)
;
}
return
session
.
getWebExtensionActionDelegate
(
extension
)
;
}
private
void
actionUpdate
(
final
GeckoBundle
message
final
GeckoSession
session
final
WebExtension
.
Action
.
ActionType
int
actionType
)
{
extensionFromBundle
(
message
)
.
accept
(
extension
-
>
{
if
(
extension
=
=
null
)
{
return
;
}
final
WebExtension
.
ActionDelegate
delegate
=
actionDelegateFor
(
extension
session
)
;
if
(
delegate
=
=
null
)
{
return
;
}
final
WebExtension
.
Action
action
=
new
WebExtension
.
Action
(
actionType
message
.
getBundle
(
"
action
"
)
extension
)
;
if
(
actionType
=
=
WebExtension
.
Action
.
TYPE_BROWSER_ACTION
)
{
delegate
.
onBrowserAction
(
extension
session
action
)
;
}
else
if
(
actionType
=
=
WebExtension
.
Action
.
TYPE_PAGE_ACTION
)
{
delegate
.
onPageAction
(
extension
session
action
)
;
}
}
)
;
}
}
