package
org
.
mozilla
.
geckoview
;
import
android
.
util
.
Pair
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
List
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
geckoview
.
GeckoSession
.
FinderDisplayFlags
;
import
org
.
mozilla
.
geckoview
.
GeckoSession
.
FinderFindFlags
;
import
org
.
mozilla
.
geckoview
.
GeckoSession
.
FinderResult
;
AnyThread
public
final
class
SessionFinder
{
private
static
final
String
LOGTAG
=
"
GeckoSessionFinder
"
;
private
static
final
List
<
Pair
<
Integer
String
>
>
sFlagNames
=
Arrays
.
asList
(
new
Pair
<
>
(
GeckoSession
.
FINDER_FIND_FORWARD
"
forward
"
)
new
Pair
<
>
(
GeckoSession
.
FINDER_FIND_BACKWARDS
"
backwards
"
)
new
Pair
<
>
(
GeckoSession
.
FINDER_FIND_LINKS_ONLY
"
linksOnly
"
)
new
Pair
<
>
(
GeckoSession
.
FINDER_FIND_MATCH_CASE
"
matchCase
"
)
new
Pair
<
>
(
GeckoSession
.
FINDER_FIND_WHOLE_WORD
"
wholeWord
"
)
)
;
private
static
void
addFlagsToBundle
(
FinderFindFlags
final
int
flags
NonNull
final
GeckoBundle
bundle
)
{
for
(
final
Pair
<
Integer
String
>
name
:
sFlagNames
)
{
if
(
(
flags
&
name
.
first
)
!
=
0
)
{
bundle
.
putBoolean
(
name
.
second
true
)
;
}
}
}
static
int
getFlagsFromBundle
(
Nullable
final
GeckoBundle
bundle
)
{
if
(
bundle
=
=
null
)
{
return
0
;
}
int
flags
=
0
;
for
(
final
Pair
<
Integer
String
>
name
:
sFlagNames
)
{
if
(
bundle
.
getBoolean
(
name
.
second
)
)
{
flags
|
=
name
.
first
;
}
}
return
flags
;
}
private
final
EventDispatcher
mDispatcher
;
FinderDisplayFlags
private
int
mDisplayFlags
;
SessionFinder
(
NonNull
final
EventDispatcher
dispatcher
)
{
mDispatcher
=
dispatcher
;
setDisplayFlags
(
0
)
;
}
NonNull
public
GeckoResult
<
FinderResult
>
find
(
Nullable
final
String
searchString
FinderFindFlags
final
int
flags
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
sFlagNames
.
size
(
)
+
1
)
;
bundle
.
putString
(
"
searchString
"
searchString
)
;
addFlagsToBundle
(
flags
bundle
)
;
return
mDispatcher
.
queryBundle
(
"
GeckoView
:
FindInPage
"
bundle
)
.
map
(
response
-
>
new
FinderResult
(
response
)
)
;
}
public
void
clear
(
)
{
mDispatcher
.
dispatch
(
"
GeckoView
:
ClearMatches
"
null
)
;
}
FinderDisplayFlags
public
int
getDisplayFlags
(
)
{
return
mDisplayFlags
;
}
public
void
setDisplayFlags
(
FinderDisplayFlags
final
int
flags
)
{
mDisplayFlags
=
flags
;
final
GeckoBundle
bundle
=
new
GeckoBundle
(
3
)
;
bundle
.
putBoolean
(
"
highlightAll
"
(
flags
&
GeckoSession
.
FINDER_DISPLAY_HIGHLIGHT_ALL
)
!
=
0
)
;
bundle
.
putBoolean
(
"
dimPage
"
(
flags
&
GeckoSession
.
FINDER_DISPLAY_DIM_PAGE
)
!
=
0
)
;
bundle
.
putBoolean
(
"
drawOutline
"
(
flags
&
GeckoSession
.
FINDER_DISPLAY_DRAW_LINK_OUTLINE
)
!
=
0
)
;
mDispatcher
.
dispatch
(
"
GeckoView
:
DisplayMatches
"
bundle
)
;
}
}
