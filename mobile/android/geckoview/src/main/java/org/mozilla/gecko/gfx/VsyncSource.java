package
org
.
mozilla
.
gecko
.
gfx
;
import
android
.
content
.
Context
;
import
android
.
hardware
.
display
.
DisplayManager
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Looper
;
import
android
.
view
.
Choreographer
;
import
android
.
view
.
Display
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
final
class
VsyncSource
implements
Choreographer
.
FrameCallback
{
private
static
final
String
LOGTAG
=
"
GeckoVsyncSource
"
;
WrapForJNI
private
static
final
VsyncSource
INSTANCE
=
new
VsyncSource
(
)
;
Choreographer
mChoreographer
;
private
volatile
boolean
mObservingVsync
;
private
VsyncSource
(
)
{
final
Object
lock
=
new
Object
(
)
;
Handler
mainHandler
=
new
Handler
(
Looper
.
getMainLooper
(
)
)
;
mainHandler
.
post
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
synchronized
(
lock
)
{
mChoreographer
=
Choreographer
.
getInstance
(
)
;
lock
.
notifyAll
(
)
;
}
}
}
)
;
synchronized
(
lock
)
{
while
(
mChoreographer
=
=
null
)
{
try
{
lock
.
wait
(
)
;
}
catch
(
final
InterruptedException
e
)
{
}
}
}
}
WrapForJNI
(
stubName
=
"
NotifyVsync
"
)
private
static
native
void
nativeNotifyVsync
(
)
;
public
void
doFrame
(
long
frameTimeNanos
)
{
if
(
mObservingVsync
)
{
mChoreographer
.
postFrameCallback
(
this
)
;
nativeNotifyVsync
(
)
;
}
}
WrapForJNI
public
synchronized
boolean
observeVsync
(
boolean
enable
)
{
if
(
mObservingVsync
!
=
enable
)
{
mObservingVsync
=
enable
;
if
(
enable
)
{
mChoreographer
.
postFrameCallback
(
this
)
;
}
else
{
mChoreographer
.
removeFrameCallback
(
this
)
;
}
}
return
mObservingVsync
;
}
WrapForJNI
public
float
getRefreshRate
(
)
{
DisplayManager
dm
=
(
DisplayManager
)
GeckoAppShell
.
getApplicationContext
(
)
.
getSystemService
(
Context
.
DISPLAY_SERVICE
)
;
return
dm
.
getDisplay
(
Display
.
DEFAULT_DISPLAY
)
.
getRefreshRate
(
)
;
}
}
