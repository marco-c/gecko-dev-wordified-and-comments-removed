package
org
.
mozilla
.
gecko
.
gfx
;
import
android
.
content
.
Context
;
import
android
.
hardware
.
display
.
DisplayManager
;
import
android
.
os
.
HandlerThread
;
import
android
.
os
.
Process
;
import
android
.
util
.
Log
;
import
android
.
view
.
Choreographer
;
import
android
.
view
.
Display
;
import
java
.
util
.
concurrent
.
CountDownLatch
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
mozglue
.
JNIObject
;
public
final
class
VsyncSource
extends
JNIObject
implements
Choreographer
.
FrameCallback
{
private
static
final
String
LOGTAG
=
"
GeckoVsyncSource
"
;
public
static
final
boolean
SUPPORT_VSYNC
=
android
.
os
.
Build
.
VERSION
.
SDK_INT
>
=
android
.
os
.
Build
.
VERSION_CODES
.
KITKAT
;
private
static
VsyncSource
sInstance
;
private
Choreographer
mChoreographer
;
private
CountDownLatch
mInitLatch
=
new
CountDownLatch
(
1
)
;
private
volatile
boolean
mObservingVsync
;
WrapForJNI
public
static
boolean
isVsyncSupported
(
)
{
return
SUPPORT_VSYNC
;
}
WrapForJNI
public
static
synchronized
VsyncSource
getInstance
(
)
{
if
(
!
SUPPORT_VSYNC
)
{
Log
.
w
(
LOGTAG
"
HW
vsync
avaiable
only
for
KK
and
later
.
"
)
;
return
null
;
}
if
(
sInstance
=
=
null
)
{
sInstance
=
new
VsyncSource
(
)
;
HandlerThread
thread
=
new
HandlerThread
(
LOGTAG
Process
.
THREAD_PRIORITY_DISPLAY
)
{
protected
void
onLooperPrepared
(
)
{
sInstance
.
mChoreographer
=
Choreographer
.
getInstance
(
)
;
sInstance
.
mInitLatch
.
countDown
(
)
;
}
}
;
thread
.
start
(
)
;
try
{
sInstance
.
mInitLatch
.
await
(
)
;
}
catch
(
InterruptedException
e
)
{
}
}
return
sInstance
;
}
private
VsyncSource
(
)
{
}
WrapForJNI
(
stubName
=
"
NotifyVsync
"
)
private
static
native
void
nativeNotifyVsync
(
)
;
Override
protected
native
void
disposeNative
(
)
;
public
void
doFrame
(
long
frameTimeNanos
)
{
if
(
mObservingVsync
)
{
mChoreographer
.
postFrameCallback
(
this
)
;
nativeNotifyVsync
(
)
;
}
}
WrapForJNI
public
synchronized
boolean
observeVsync
(
boolean
enable
)
{
if
(
mObservingVsync
!
=
enable
)
{
mObservingVsync
=
enable
;
if
(
enable
)
{
mChoreographer
.
postFrameCallback
(
this
)
;
}
else
{
mChoreographer
.
removeFrameCallback
(
this
)
;
}
}
return
mObservingVsync
;
}
WrapForJNI
public
float
getRefreshRate
(
)
{
DisplayManager
dm
=
(
DisplayManager
)
GeckoAppShell
.
getApplicationContext
(
)
.
getSystemService
(
Context
.
DISPLAY_SERVICE
)
;
return
dm
.
getDisplay
(
Display
.
DEFAULT_DISPLAY
)
.
getRefreshRate
(
)
;
}
}
