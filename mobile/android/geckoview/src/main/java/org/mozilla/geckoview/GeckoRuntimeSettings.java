package
org
.
mozilla
.
geckoview
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
android
.
graphics
.
Rect
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
android
.
support
.
annotation
.
IntDef
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
org
.
mozilla
.
geckoview
.
GeckoSession
.
TrackingProtectionDelegate
;
public
final
class
GeckoRuntimeSettings
implements
Parcelable
{
public
static
final
String
EXTRA_CRASH_REPORTING_JOB_ID
=
"
crashReporterJobId
"
;
public
static
final
class
Builder
{
private
final
GeckoRuntimeSettings
mSettings
;
public
Builder
(
)
{
mSettings
=
new
GeckoRuntimeSettings
(
)
;
}
public
Builder
(
final
GeckoRuntimeSettings
settings
)
{
mSettings
=
new
GeckoRuntimeSettings
(
settings
)
;
}
public
NonNull
GeckoRuntimeSettings
build
(
)
{
return
new
GeckoRuntimeSettings
(
mSettings
)
;
}
public
NonNull
Builder
useContentProcessHint
(
final
boolean
use
)
{
mSettings
.
mUseContentProcess
=
use
;
return
this
;
}
public
NonNull
Builder
arguments
(
final
NonNull
String
[
]
args
)
{
if
(
args
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Arguments
must
not
be
null
"
)
;
}
mSettings
.
mArgs
=
args
;
return
this
;
}
public
NonNull
Builder
extras
(
final
NonNull
Bundle
extras
)
{
if
(
extras
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Extras
must
not
be
null
"
)
;
}
mSettings
.
mExtras
=
extras
;
return
this
;
}
public
NonNull
Builder
javaScriptEnabled
(
final
boolean
flag
)
{
mSettings
.
mJavaScript
.
set
(
flag
)
;
return
this
;
}
public
NonNull
Builder
remoteDebuggingEnabled
(
final
boolean
enabled
)
{
mSettings
.
mRemoteDebugging
.
set
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
webFontsEnabled
(
final
boolean
flag
)
{
mSettings
.
mWebFonts
.
set
(
flag
)
;
return
this
;
}
public
NonNull
Builder
nativeCrashReportingEnabled
(
final
boolean
enabled
)
{
mSettings
.
mNativeCrashReporting
=
enabled
;
return
this
;
}
public
NonNull
Builder
javaCrashReportingEnabled
(
final
boolean
enabled
)
{
mSettings
.
mJavaCrashReporting
=
enabled
;
return
this
;
}
public
NonNull
Builder
crashReportingJobId
(
final
int
id
)
{
mSettings
.
mCrashReportingJobId
=
id
;
return
this
;
}
public
NonNull
Builder
pauseForDebugger
(
boolean
enabled
)
{
mSettings
.
mDebugPause
=
enabled
;
return
this
;
}
public
NonNull
Builder
cookieBehavior
(
CookieBehavior
int
behavior
)
{
mSettings
.
mCookieBehavior
.
set
(
behavior
)
;
return
this
;
}
public
NonNull
Builder
cookieLifetime
(
CookieLifetime
int
lifetime
)
{
mSettings
.
mCookieLifetime
.
set
(
lifetime
)
;
return
this
;
}
public
NonNull
Builder
trackingProtectionCategories
(
TrackingProtectionDelegate
.
Category
int
categories
)
{
mSettings
.
mTrackingProtection
.
set
(
TrackingProtection
.
buildPrefValue
(
categories
)
)
;
return
this
;
}
public
NonNull
Builder
consoleOutput
(
boolean
enabled
)
{
mSettings
.
mConsoleOutput
.
set
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
displayDensityOverride
(
float
density
)
{
mSettings
.
mDisplayDensityOverride
=
density
;
return
this
;
}
public
NonNull
Builder
blockMalware
(
boolean
enabled
)
{
mSettings
.
mSafebrowsingMalware
.
set
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
blockPhishing
(
boolean
enabled
)
{
mSettings
.
mSafebrowsingPhishing
.
set
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
displayDpiOverride
(
int
dpi
)
{
mSettings
.
mDisplayDpiOverride
=
dpi
;
return
this
;
}
public
NonNull
Builder
screenSizeOverride
(
int
width
int
height
)
{
mSettings
.
mScreenWidthOverride
=
width
;
mSettings
.
mScreenHeightOverride
=
height
;
return
this
;
}
}
GeckoRuntime
runtime
;
boolean
mUseContentProcess
;
String
[
]
mArgs
;
Bundle
mExtras
;
int
prefCount
;
private
class
Pref
<
T
>
{
public
final
String
name
;
public
final
T
defaultValue
;
private
T
mValue
;
private
boolean
mIsSet
;
public
Pref
(
final
String
name
final
T
defaultValue
)
{
GeckoRuntimeSettings
.
this
.
prefCount
+
+
;
this
.
name
=
name
;
this
.
defaultValue
=
defaultValue
;
mValue
=
defaultValue
;
}
public
void
set
(
T
newValue
)
{
mValue
=
newValue
;
mIsSet
=
true
;
flush
(
)
;
}
public
T
get
(
)
{
return
mValue
;
}
public
void
flush
(
)
{
if
(
GeckoRuntimeSettings
.
this
.
runtime
!
=
null
)
{
GeckoRuntimeSettings
.
this
.
runtime
.
setPref
(
name
mValue
mIsSet
)
;
}
}
}
Pref
<
Boolean
>
mJavaScript
=
new
Pref
<
Boolean
>
(
"
javascript
.
enabled
"
true
)
;
Pref
<
Boolean
>
mRemoteDebugging
=
new
Pref
<
Boolean
>
(
"
devtools
.
debugger
.
remote
-
enabled
"
false
)
;
Pref
<
Boolean
>
mWebFonts
=
new
Pref
<
Boolean
>
(
"
browser
.
display
.
use_document_fonts
"
true
)
;
Pref
<
Integer
>
mCookieBehavior
=
new
Pref
<
Integer
>
(
"
network
.
cookie
.
cookieBehavior
"
COOKIE_ACCEPT_ALL
)
;
Pref
<
Integer
>
mCookieLifetime
=
new
Pref
<
Integer
>
(
"
network
.
cookie
.
lifetimePolicy
"
COOKIE_LIFETIME_NORMAL
)
;
Pref
<
String
>
mTrackingProtection
=
new
Pref
<
String
>
(
"
urlclassifier
.
trackingTable
"
TrackingProtection
.
buildPrefValue
(
TrackingProtectionDelegate
.
CATEGORY_TEST
|
TrackingProtectionDelegate
.
CATEGORY_ANALYTIC
|
TrackingProtectionDelegate
.
CATEGORY_SOCIAL
|
TrackingProtectionDelegate
.
CATEGORY_AD
)
)
;
Pref
<
Boolean
>
mConsoleOutput
=
new
Pref
<
Boolean
>
(
"
geckoview
.
console
.
enabled
"
false
)
;
Pref
<
Boolean
>
mSafebrowsingMalware
=
new
Pref
<
Boolean
>
(
"
browser
.
safebrowsing
.
malware
.
enabled
"
true
)
;
Pref
<
Boolean
>
mSafebrowsingPhishing
=
new
Pref
<
Boolean
>
(
"
browser
.
safebrowsing
.
phishing
.
enabled
"
true
)
;
boolean
mNativeCrashReporting
;
boolean
mJavaCrashReporting
;
int
mCrashReportingJobId
;
boolean
mDebugPause
;
float
mDisplayDensityOverride
=
-
1
.
0f
;
int
mDisplayDpiOverride
;
int
mScreenWidthOverride
;
int
mScreenHeightOverride
;
private
final
Pref
<
?
>
[
]
mPrefs
=
new
Pref
<
?
>
[
]
{
mCookieBehavior
mCookieLifetime
mConsoleOutput
mJavaScript
mRemoteDebugging
mSafebrowsingMalware
mSafebrowsingPhishing
mTrackingProtection
mWebFonts
}
;
GeckoRuntimeSettings
(
)
{
this
(
null
)
;
}
GeckoRuntimeSettings
(
final
Nullable
GeckoRuntimeSettings
settings
)
{
if
(
BuildConfig
.
DEBUG
&
&
prefCount
!
=
mPrefs
.
length
)
{
throw
new
AssertionError
(
"
Add
new
pref
to
prefs
list
"
)
;
}
if
(
settings
=
=
null
)
{
mArgs
=
new
String
[
0
]
;
mExtras
=
new
Bundle
(
)
;
return
;
}
mUseContentProcess
=
settings
.
getUseContentProcessHint
(
)
;
mArgs
=
settings
.
getArguments
(
)
.
clone
(
)
;
mExtras
=
new
Bundle
(
settings
.
getExtras
(
)
)
;
for
(
int
i
=
0
;
i
<
mPrefs
.
length
;
i
+
+
)
{
if
(
!
settings
.
mPrefs
[
i
]
.
mIsSet
)
{
continue
;
}
SuppressWarnings
(
"
unchecked
"
)
final
Pref
<
Object
>
uncheckedPref
=
(
Pref
<
Object
>
)
mPrefs
[
i
]
;
uncheckedPref
.
set
(
settings
.
mPrefs
[
i
]
.
get
(
)
)
;
}
mNativeCrashReporting
=
settings
.
mNativeCrashReporting
;
mJavaCrashReporting
=
settings
.
mJavaCrashReporting
;
mCrashReportingJobId
=
settings
.
mCrashReportingJobId
;
mDebugPause
=
settings
.
mDebugPause
;
mDisplayDensityOverride
=
settings
.
mDisplayDensityOverride
;
mDisplayDpiOverride
=
settings
.
mDisplayDpiOverride
;
mScreenWidthOverride
=
settings
.
mScreenWidthOverride
;
mScreenHeightOverride
=
settings
.
mScreenHeightOverride
;
}
void
flush
(
)
{
for
(
final
Pref
<
?
>
pref
:
mPrefs
)
{
pref
.
flush
(
)
;
}
}
public
boolean
getUseContentProcessHint
(
)
{
return
mUseContentProcess
;
}
public
String
[
]
getArguments
(
)
{
return
mArgs
;
}
public
Bundle
getExtras
(
)
{
return
mExtras
;
}
public
boolean
getJavaScriptEnabled
(
)
{
return
mJavaScript
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setJavaScriptEnabled
(
final
boolean
flag
)
{
mJavaScript
.
set
(
flag
)
;
return
this
;
}
public
boolean
getRemoteDebuggingEnabled
(
)
{
return
mRemoteDebugging
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setRemoteDebuggingEnabled
(
final
boolean
enabled
)
{
mRemoteDebugging
.
set
(
enabled
)
;
return
this
;
}
public
boolean
getWebFontsEnabled
(
)
{
return
mWebFonts
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setWebFontsEnabled
(
final
boolean
flag
)
{
mWebFonts
.
set
(
flag
)
;
return
this
;
}
public
boolean
getNativeCrashReportingEnabled
(
)
{
return
mNativeCrashReporting
;
}
public
boolean
getJavaCrashReportingEnabled
(
)
{
return
mJavaCrashReporting
;
}
public
int
getCrashReportingServiceJobId
(
)
{
return
mCrashReportingJobId
;
}
public
boolean
getPauseForDebuggerEnabled
(
)
{
return
mDebugPause
;
}
public
Float
getDisplayDensityOverride
(
)
{
if
(
mDisplayDensityOverride
>
0
.
0f
)
{
return
mDisplayDensityOverride
;
}
return
null
;
}
public
Integer
getDisplayDpiOverride
(
)
{
if
(
mDisplayDpiOverride
>
0
)
{
return
mDisplayDpiOverride
;
}
return
null
;
}
public
Rect
getScreenSizeOverride
(
)
{
if
(
(
mScreenWidthOverride
>
0
)
&
&
(
mScreenHeightOverride
>
0
)
)
{
return
new
Rect
(
0
0
mScreenWidthOverride
mScreenHeightOverride
)
;
}
return
null
;
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
COOKIE_ACCEPT_ALL
COOKIE_ACCEPT_FIRST_PARTY
COOKIE_ACCEPT_NONE
COOKIE_ACCEPT_VISITED
}
)
interface
CookieBehavior
{
}
public
static
final
int
COOKIE_ACCEPT_ALL
=
0
;
public
static
final
int
COOKIE_ACCEPT_FIRST_PARTY
=
1
;
public
static
final
int
COOKIE_ACCEPT_NONE
=
2
;
public
static
final
int
COOKIE_ACCEPT_VISITED
=
3
;
public
CookieBehavior
int
getCookieBehavior
(
)
{
return
mCookieBehavior
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setCookieBehavior
(
CookieBehavior
int
behavior
)
{
mCookieBehavior
.
set
(
behavior
)
;
return
this
;
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
COOKIE_LIFETIME_NORMAL
COOKIE_LIFETIME_RUNTIME
COOKIE_LIFETIME_DAYS
}
)
interface
CookieLifetime
{
}
public
static
final
int
COOKIE_LIFETIME_NORMAL
=
0
;
public
static
final
int
COOKIE_LIFETIME_RUNTIME
=
2
;
public
static
final
int
COOKIE_LIFETIME_DAYS
=
3
;
public
CookieBehavior
int
getCookieLifetime
(
)
{
return
mCookieLifetime
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setCookieLifetime
(
CookieLifetime
int
lifetime
)
{
mCookieLifetime
.
set
(
lifetime
)
;
return
this
;
}
public
TrackingProtectionDelegate
.
Category
int
getTrackingProtectionCategories
(
)
{
return
TrackingProtection
.
listToCategory
(
mTrackingProtection
.
get
(
)
)
;
}
public
NonNull
GeckoRuntimeSettings
setTrackingProtectionCategories
(
TrackingProtectionDelegate
.
Category
int
categories
)
{
mTrackingProtection
.
set
(
TrackingProtection
.
buildPrefValue
(
categories
)
)
;
return
this
;
}
public
NonNull
GeckoRuntimeSettings
setConsoleOutputEnabled
(
boolean
enabled
)
{
mConsoleOutput
.
set
(
enabled
)
;
return
this
;
}
public
boolean
getConsoleOutputEnabled
(
)
{
return
mConsoleOutput
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setBlockMalware
(
boolean
enabled
)
{
mSafebrowsingMalware
.
set
(
enabled
)
;
return
this
;
}
public
boolean
getBlockMalware
(
)
{
return
mSafebrowsingMalware
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setBlockPhishing
(
boolean
enabled
)
{
mSafebrowsingPhishing
.
set
(
enabled
)
;
return
this
;
}
public
boolean
getBlockPhishing
(
)
{
return
mSafebrowsingPhishing
.
get
(
)
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
Parcel
out
int
flags
)
{
ParcelableUtils
.
writeBoolean
(
out
mUseContentProcess
)
;
out
.
writeStringArray
(
mArgs
)
;
mExtras
.
writeToParcel
(
out
flags
)
;
for
(
final
Pref
<
?
>
pref
:
mPrefs
)
{
out
.
writeValue
(
pref
.
get
(
)
)
;
}
ParcelableUtils
.
writeBoolean
(
out
mNativeCrashReporting
)
;
ParcelableUtils
.
writeBoolean
(
out
mJavaCrashReporting
)
;
out
.
writeInt
(
mCrashReportingJobId
)
;
ParcelableUtils
.
writeBoolean
(
out
mDebugPause
)
;
out
.
writeFloat
(
mDisplayDensityOverride
)
;
out
.
writeInt
(
mDisplayDpiOverride
)
;
out
.
writeInt
(
mScreenWidthOverride
)
;
out
.
writeInt
(
mScreenHeightOverride
)
;
}
public
void
readFromParcel
(
final
Parcel
source
)
{
mUseContentProcess
=
ParcelableUtils
.
readBoolean
(
source
)
;
mArgs
=
source
.
createStringArray
(
)
;
mExtras
.
readFromParcel
(
source
)
;
for
(
final
Pref
<
?
>
pref
:
mPrefs
)
{
SuppressWarnings
(
"
unchecked
"
)
final
Pref
<
Object
>
uncheckedPref
=
(
Pref
<
Object
>
)
pref
;
uncheckedPref
.
set
(
source
.
readValue
(
getClass
(
)
.
getClassLoader
(
)
)
)
;
}
mNativeCrashReporting
=
ParcelableUtils
.
readBoolean
(
source
)
;
mJavaCrashReporting
=
ParcelableUtils
.
readBoolean
(
source
)
;
mCrashReportingJobId
=
source
.
readInt
(
)
;
mDebugPause
=
ParcelableUtils
.
readBoolean
(
source
)
;
mDisplayDensityOverride
=
source
.
readFloat
(
)
;
mDisplayDpiOverride
=
source
.
readInt
(
)
;
mScreenWidthOverride
=
source
.
readInt
(
)
;
mScreenHeightOverride
=
source
.
readInt
(
)
;
}
public
static
final
Parcelable
.
Creator
<
GeckoRuntimeSettings
>
CREATOR
=
new
Parcelable
.
Creator
<
GeckoRuntimeSettings
>
(
)
{
Override
public
GeckoRuntimeSettings
createFromParcel
(
final
Parcel
in
)
{
final
GeckoRuntimeSettings
settings
=
new
GeckoRuntimeSettings
(
)
;
settings
.
readFromParcel
(
in
)
;
return
settings
;
}
Override
public
GeckoRuntimeSettings
[
]
newArray
(
final
int
size
)
{
return
new
GeckoRuntimeSettings
[
size
]
;
}
}
;
}
