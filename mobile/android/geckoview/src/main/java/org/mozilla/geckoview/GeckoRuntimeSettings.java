package
org
.
mozilla
.
geckoview
;
import
static
android
.
os
.
Build
.
VERSION
;
import
android
.
app
.
Service
;
import
android
.
graphics
.
Rect
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
LocaleList
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
Log
;
import
androidx
.
annotation
.
AnyThread
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
LinkedHashMap
;
import
java
.
util
.
Locale
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
GeckoSystemStateListener
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
util
.
LocaleUtils
;
AnyThread
public
final
class
GeckoRuntimeSettings
extends
RuntimeSettings
{
private
static
final
String
LOGTAG
=
"
GeckoRuntimeSettings
"
;
AnyThread
public
static
final
class
Builder
extends
RuntimeSettings
.
Builder
<
GeckoRuntimeSettings
>
{
Override
protected
NonNull
GeckoRuntimeSettings
newSettings
(
final
Nullable
GeckoRuntimeSettings
settings
)
{
return
new
GeckoRuntimeSettings
(
settings
)
;
}
public
NonNull
Builder
arguments
(
final
NonNull
String
[
]
args
)
{
if
(
args
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Arguments
must
not
be
null
"
)
;
}
getSettings
(
)
.
mArgs
=
args
;
return
this
;
}
public
NonNull
Builder
extras
(
final
NonNull
Bundle
extras
)
{
if
(
extras
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Extras
must
not
be
null
"
)
;
}
getSettings
(
)
.
mExtras
=
extras
;
return
this
;
}
public
NonNull
Builder
configFilePath
(
final
Nullable
String
configFilePath
)
{
getSettings
(
)
.
mConfigFilePath
=
configFilePath
;
return
this
;
}
public
NonNull
Builder
extensionsProcessEnabled
(
final
boolean
flag
)
{
getSettings
(
)
.
mExtensionsProcess
.
set
(
flag
)
;
return
this
;
}
public
NonNull
Builder
extensionsProcessCrashThreshold
(
final
NonNull
Integer
crashThreshold
)
{
getSettings
(
)
.
mExtensionsProcessCrashThreshold
.
set
(
crashThreshold
)
;
return
this
;
}
public
NonNull
Builder
extensionsProcessCrashTimeframe
(
final
NonNull
Long
timeframeMs
)
{
getSettings
(
)
.
mExtensionsProcessCrashTimeframe
.
set
(
timeframeMs
)
;
return
this
;
}
public
NonNull
Builder
javaScriptEnabled
(
final
boolean
flag
)
{
getSettings
(
)
.
mJavaScript
.
set
(
flag
)
;
return
this
;
}
public
NonNull
Builder
globalPrivacyControlEnabled
(
final
boolean
enabled
)
{
getSettings
(
)
.
setGlobalPrivacyControl
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
remoteDebuggingEnabled
(
final
boolean
enabled
)
{
getSettings
(
)
.
mRemoteDebugging
.
set
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
webFontsEnabled
(
final
boolean
flag
)
{
getSettings
(
)
.
mWebFonts
.
set
(
flag
?
1
:
0
)
;
return
this
;
}
public
NonNull
Builder
pauseForDebugger
(
final
boolean
enabled
)
{
getSettings
(
)
.
mDebugPause
=
enabled
;
return
this
;
}
public
NonNull
Builder
useMaxScreenDepth
(
final
boolean
enable
)
{
getSettings
(
)
.
mUseMaxScreenDepth
=
enable
;
return
this
;
}
public
NonNull
Builder
webManifest
(
final
boolean
enabled
)
{
getSettings
(
)
.
mWebManifest
.
set
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
consoleOutput
(
final
boolean
enabled
)
{
getSettings
(
)
.
mConsoleOutput
.
set
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
automaticFontSizeAdjustment
(
final
boolean
enabled
)
{
getSettings
(
)
.
setAutomaticFontSizeAdjustment
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
fontSizeFactor
(
final
float
fontSizeFactor
)
{
getSettings
(
)
.
setFontSizeFactor
(
fontSizeFactor
)
;
return
this
;
}
public
NonNull
Builder
enterpriseRootsEnabled
(
final
boolean
enabled
)
{
getSettings
(
)
.
setEnterpriseRootsEnabled
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
fontInflation
(
final
boolean
enabled
)
{
getSettings
(
)
.
setFontInflationEnabled
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
displayDensityOverride
(
final
float
density
)
{
getSettings
(
)
.
mDisplayDensityOverride
=
density
;
return
this
;
}
public
NonNull
Builder
displayDpiOverride
(
final
int
dpi
)
{
getSettings
(
)
.
mDisplayDpiOverride
=
dpi
;
return
this
;
}
public
NonNull
Builder
screenSizeOverride
(
final
int
width
final
int
height
)
{
getSettings
(
)
.
mScreenWidthOverride
=
width
;
getSettings
(
)
.
mScreenHeightOverride
=
height
;
return
this
;
}
public
NonNull
Builder
loginAutofillEnabled
(
final
boolean
enabled
)
{
getSettings
(
)
.
setLoginAutofillEnabled
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
translationsOfferPopup
(
final
boolean
enabled
)
{
getSettings
(
)
.
setTranslationsOfferPopup
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
disableShip
(
final
boolean
value
)
{
getSettings
(
)
.
mDisableShip
.
set
(
value
)
;
return
this
;
}
public
NonNull
Builder
crashHandler
(
final
Nullable
Class
<
?
extends
Service
>
handler
)
{
getSettings
(
)
.
mCrashHandler
=
handler
;
return
this
;
}
public
NonNull
Builder
locales
(
final
Nullable
String
[
]
requestedLocales
)
{
getSettings
(
)
.
mRequestedLocales
=
requestedLocales
;
return
this
;
}
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
NonNull
Builder
contentBlocking
(
final
NonNull
ContentBlocking
.
Settings
cb
)
{
getSettings
(
)
.
mContentBlocking
=
cb
;
return
this
;
}
public
NonNull
Builder
preferredColorScheme
(
final
ColorScheme
int
scheme
)
{
getSettings
(
)
.
setPreferredColorScheme
(
scheme
)
;
return
this
;
}
public
NonNull
Builder
inputAutoZoomEnabled
(
final
boolean
flag
)
{
getSettings
(
)
.
mInputAutoZoom
.
set
(
flag
)
;
return
this
;
}
public
NonNull
Builder
doubleTapZoomingEnabled
(
final
boolean
flag
)
{
getSettings
(
)
.
mDoubleTapZooming
.
set
(
flag
)
;
return
this
;
}
public
NonNull
Builder
glMsaaLevel
(
final
int
level
)
{
getSettings
(
)
.
mGlMsaaLevel
.
set
(
level
)
;
return
this
;
}
AnyThread
public
NonNull
Builder
experimentDelegate
(
final
Nullable
ExperimentDelegate
delegate
)
{
getSettings
(
)
.
mExperimentDelegate
=
delegate
;
return
this
;
}
public
NonNull
Builder
debugLogging
(
final
boolean
enable
)
{
getSettings
(
)
.
mDevToolsConsoleToLogcat
.
set
(
enable
)
;
getSettings
(
)
.
mConsoleServiceToLogcat
.
set
(
enable
)
;
getSettings
(
)
.
mGeckoViewLogLevel
.
set
(
enable
?
"
Debug
"
:
"
Fatal
"
)
;
return
this
;
}
public
NonNull
Builder
aboutConfigEnabled
(
final
boolean
flag
)
{
getSettings
(
)
.
mAboutConfig
.
set
(
flag
)
;
return
this
;
}
public
NonNull
Builder
forceUserScalableEnabled
(
final
boolean
flag
)
{
getSettings
(
)
.
mForceUserScalable
.
set
(
flag
)
;
return
this
;
}
public
NonNull
Builder
allowInsecureConnections
(
final
HttpsOnlyMode
int
level
)
{
getSettings
(
)
.
setAllowInsecureConnections
(
level
)
;
return
this
;
}
public
NonNull
Builder
extensionsWebAPIEnabled
(
final
boolean
flag
)
{
getSettings
(
)
.
mExtensionsWebAPIEnabled
.
set
(
flag
)
;
return
this
;
}
public
NonNull
Builder
trustedRecursiveResolverMode
(
final
TrustedRecursiveResolverMode
int
mode
)
{
getSettings
(
)
.
setTrustedRecursiveResolverMode
(
mode
)
;
return
this
;
}
public
NonNull
Builder
trustedRecursiveResolverUri
(
final
NonNull
String
uri
)
{
getSettings
(
)
.
setTrustedRecursiveResolverUri
(
uri
)
;
return
this
;
}
public
NonNull
Builder
largeKeepaliveFactor
(
final
int
factor
)
{
getSettings
(
)
.
setLargeKeepaliveFactor
(
factor
)
;
return
this
;
}
}
private
GeckoRuntime
mRuntime
;
String
[
]
mArgs
;
Bundle
mExtras
;
String
mConfigFilePath
;
ContentBlocking
.
Settings
mContentBlocking
;
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
NonNull
ContentBlocking
.
Settings
getContentBlocking
(
)
{
return
mContentBlocking
;
}
final
Pref
<
Boolean
>
mWebManifest
=
new
Pref
<
Boolean
>
(
"
dom
.
manifest
.
enabled
"
true
)
;
final
Pref
<
Boolean
>
mJavaScript
=
new
Pref
<
Boolean
>
(
"
javascript
.
enabled
"
true
)
;
final
Pref
<
Boolean
>
mRemoteDebugging
=
new
Pref
<
Boolean
>
(
"
devtools
.
debugger
.
remote
-
enabled
"
false
)
;
final
Pref
<
Integer
>
mWebFonts
=
new
Pref
<
Integer
>
(
"
browser
.
display
.
use_document_fonts
"
1
)
;
final
Pref
<
Boolean
>
mConsoleOutput
=
new
Pref
<
Boolean
>
(
"
geckoview
.
console
.
enabled
"
false
)
;
float
mFontSizeFactor
=
1f
;
final
Pref
<
Boolean
>
mEnterpriseRootsEnabled
=
new
Pref
<
>
(
"
security
.
enterprise_roots
.
enabled
"
false
)
;
final
Pref
<
Integer
>
mFontInflationMinTwips
=
new
Pref
<
>
(
"
font
.
size
.
inflation
.
minTwips
"
0
)
;
final
Pref
<
Boolean
>
mInputAutoZoom
=
new
Pref
<
>
(
"
formhelper
.
autozoom
"
true
)
;
final
Pref
<
Boolean
>
mDoubleTapZooming
=
new
Pref
<
>
(
"
apz
.
allow_double_tap_zooming
"
true
)
;
final
Pref
<
Integer
>
mGlMsaaLevel
=
new
Pref
<
>
(
"
webgl
.
msaa
-
samples
"
4
)
;
final
Pref
<
String
>
mGeckoViewLogLevel
=
new
Pref
<
>
(
"
geckoview
.
logging
"
BuildConfig
.
DEBUG_BUILD
?
"
Debug
"
:
"
Warn
"
)
;
final
Pref
<
Boolean
>
mConsoleServiceToLogcat
=
new
Pref
<
>
(
"
consoleservice
.
logcat
"
true
)
;
final
Pref
<
Boolean
>
mDevToolsConsoleToLogcat
=
new
Pref
<
>
(
"
devtools
.
console
.
stdout
.
chrome
"
true
)
;
final
Pref
<
Boolean
>
mAboutConfig
=
new
Pref
<
>
(
"
general
.
aboutConfig
.
enable
"
false
)
;
final
Pref
<
Boolean
>
mForceUserScalable
=
new
Pref
<
>
(
"
browser
.
ui
.
zoom
.
force
-
user
-
scalable
"
false
)
;
final
PrefWithoutDefault
<
Integer
>
mWebContentIsolationStrategy
=
new
PrefWithoutDefault
<
>
(
"
fission
.
webContentIsolationStrategy
"
)
;
final
Pref
<
Boolean
>
mAutofillLogins
=
new
Pref
<
Boolean
>
(
"
signon
.
autofillForms
"
true
)
;
final
Pref
<
Boolean
>
mAutomaticallyOfferPopup
=
new
Pref
<
Boolean
>
(
"
browser
.
translations
.
automaticallyPopup
"
true
)
;
final
Pref
<
Boolean
>
mHttpsOnly
=
new
Pref
<
Boolean
>
(
"
dom
.
security
.
https_only_mode
"
false
)
;
final
Pref
<
Boolean
>
mHttpsOnlyPrivateMode
=
new
Pref
<
Boolean
>
(
"
dom
.
security
.
https_only_mode_pbm
"
false
)
;
final
PrefWithoutDefault
<
Integer
>
mTrustedRecursiveResolverMode
=
new
PrefWithoutDefault
<
>
(
"
network
.
trr
.
mode
"
)
;
final
PrefWithoutDefault
<
String
>
mTrustedRecursiveResolverUri
=
new
PrefWithoutDefault
<
>
(
"
network
.
trr
.
uri
"
)
;
final
PrefWithoutDefault
<
Integer
>
mLargeKeepalivefactor
=
new
PrefWithoutDefault
<
>
(
"
network
.
http
.
largeKeepaliveFactor
"
)
;
final
Pref
<
Integer
>
mProcessCount
=
new
Pref
<
>
(
"
dom
.
ipc
.
processCount
"
2
)
;
final
Pref
<
Boolean
>
mExtensionsWebAPIEnabled
=
new
Pref
<
>
(
"
extensions
.
webapi
.
enabled
"
false
)
;
final
PrefWithoutDefault
<
Boolean
>
mExtensionsProcess
=
new
PrefWithoutDefault
<
Boolean
>
(
"
extensions
.
webextensions
.
remote
"
)
;
final
PrefWithoutDefault
<
Long
>
mExtensionsProcessCrashTimeframe
=
new
PrefWithoutDefault
<
Long
>
(
"
extensions
.
webextensions
.
crash
.
timeframe
"
)
;
final
PrefWithoutDefault
<
Integer
>
mExtensionsProcessCrashThreshold
=
new
PrefWithoutDefault
<
Integer
>
(
"
extensions
.
webextensions
.
crash
.
threshold
"
)
;
final
Pref
<
Boolean
>
mGlobalPrivacyControlEnabled
=
new
Pref
<
Boolean
>
(
"
privacy
.
globalprivacycontrol
.
enabled
"
false
)
;
final
Pref
<
Boolean
>
mGlobalPrivacyControlEnabledPrivateMode
=
new
Pref
<
Boolean
>
(
"
privacy
.
globalprivacycontrol
.
pbmode
.
enabled
"
true
)
;
final
Pref
<
Boolean
>
mGlobalPrivacyControlFunctionalityEnabled
=
new
Pref
<
Boolean
>
(
"
privacy
.
globalprivacycontrol
.
functionality
.
enabled
"
true
)
;
final
Pref
<
Boolean
>
mFingerprintingProtection
=
new
Pref
<
Boolean
>
(
"
privacy
.
fingerprintingProtection
"
false
)
;
final
Pref
<
Boolean
>
mFingerprintingProtectionPrivateMode
=
new
Pref
<
Boolean
>
(
"
privacy
.
fingerprintingProtection
.
pbmode
"
true
)
;
final
Pref
<
String
>
mFingerprintingProtectionOverrides
=
new
Pref
<
>
(
"
privacy
.
fingerprintingProtection
.
overrides
"
"
"
)
;
final
Pref
<
Boolean
>
mFdlibmMathEnabled
=
new
Pref
<
Boolean
>
(
"
javascript
.
options
.
use_fdlibm_for_sin_cos_tan
"
false
)
;
final
Pref
<
Integer
>
mUserCharacteristicPingCurrentVersion
=
new
Pref
<
>
(
"
toolkit
.
telemetry
.
user_characteristics_ping
.
current_version
"
0
)
;
PrefWithoutDefault
<
Boolean
>
mDisableShip
=
new
PrefWithoutDefault
<
Boolean
>
(
"
fission
.
disableSessionHistoryInParent
"
)
;
int
mPreferredColorScheme
=
COLOR_SCHEME_SYSTEM
;
boolean
mForceEnableAccessibility
;
boolean
mDebugPause
;
boolean
mUseMaxScreenDepth
;
float
mDisplayDensityOverride
=
-
1
.
0f
;
int
mDisplayDpiOverride
;
int
mScreenWidthOverride
;
int
mScreenHeightOverride
;
Class
<
?
extends
Service
>
mCrashHandler
;
String
[
]
mRequestedLocales
;
ExperimentDelegate
mExperimentDelegate
;
void
attachTo
(
final
NonNull
GeckoRuntime
runtime
)
{
mRuntime
=
runtime
;
commit
(
)
;
}
Override
public
Nullable
GeckoRuntime
getRuntime
(
)
{
return
mRuntime
;
}
GeckoRuntimeSettings
(
)
{
this
(
null
)
;
}
GeckoRuntimeSettings
(
final
Nullable
GeckoRuntimeSettings
settings
)
{
super
(
null
)
;
if
(
settings
=
=
null
)
{
mArgs
=
new
String
[
0
]
;
mExtras
=
new
Bundle
(
)
;
mContentBlocking
=
new
ContentBlocking
.
Settings
(
this
null
)
;
return
;
}
updateSettings
(
settings
)
;
}
private
void
updateSettings
(
final
NonNull
GeckoRuntimeSettings
settings
)
{
updatePrefs
(
settings
)
;
mArgs
=
settings
.
getArguments
(
)
.
clone
(
)
;
mExtras
=
new
Bundle
(
settings
.
getExtras
(
)
)
;
mContentBlocking
=
new
ContentBlocking
.
Settings
(
this
settings
.
mContentBlocking
)
;
mForceEnableAccessibility
=
settings
.
mForceEnableAccessibility
;
mDebugPause
=
settings
.
mDebugPause
;
mUseMaxScreenDepth
=
settings
.
mUseMaxScreenDepth
;
mDisplayDensityOverride
=
settings
.
mDisplayDensityOverride
;
mDisplayDpiOverride
=
settings
.
mDisplayDpiOverride
;
mScreenWidthOverride
=
settings
.
mScreenWidthOverride
;
mScreenHeightOverride
=
settings
.
mScreenHeightOverride
;
mCrashHandler
=
settings
.
mCrashHandler
;
mRequestedLocales
=
settings
.
mRequestedLocales
;
mConfigFilePath
=
settings
.
mConfigFilePath
;
mExperimentDelegate
=
settings
.
mExperimentDelegate
;
}
void
commit
(
)
{
commitLocales
(
)
;
commitResetPrefs
(
)
;
}
public
NonNull
String
[
]
getArguments
(
)
{
return
mArgs
;
}
public
NonNull
Bundle
getExtras
(
)
{
return
mExtras
;
}
public
Nullable
String
getConfigFilePath
(
)
{
return
mConfigFilePath
;
}
public
boolean
getJavaScriptEnabled
(
)
{
return
mJavaScript
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setJavaScriptEnabled
(
final
boolean
flag
)
{
mJavaScript
.
commit
(
flag
)
;
return
this
;
}
public
NonNull
GeckoRuntimeSettings
setGlobalPrivacyControl
(
final
boolean
enabled
)
{
mGlobalPrivacyControlEnabled
.
commit
(
enabled
)
;
mGlobalPrivacyControlEnabledPrivateMode
.
commit
(
true
)
;
mGlobalPrivacyControlFunctionalityEnabled
.
commit
(
true
)
;
return
this
;
}
public
NonNull
GeckoRuntimeSettings
setFingerprintingProtection
(
final
boolean
enabled
)
{
mFingerprintingProtection
.
commit
(
enabled
)
;
return
this
;
}
public
NonNull
GeckoRuntimeSettings
setFingerprintingProtectionPrivateBrowsing
(
final
boolean
enabled
)
{
mFingerprintingProtectionPrivateMode
.
commit
(
enabled
)
;
return
this
;
}
public
NonNull
GeckoRuntimeSettings
setFingerprintingProtectionOverrides
(
NonNull
final
String
overrides
)
{
mFingerprintingProtectionOverrides
.
commit
(
overrides
)
;
return
this
;
}
public
NonNull
GeckoRuntimeSettings
setFdlibmMathEnabled
(
final
boolean
enabled
)
{
mFdlibmMathEnabled
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getFingerprintingProtection
(
)
{
return
mFingerprintingProtection
.
get
(
)
;
}
public
boolean
getFingerprintingProtectionPrivateBrowsing
(
)
{
return
mFingerprintingProtectionPrivateMode
.
get
(
)
;
}
public
NonNull
String
getFingerprintingProtectionOverrides
(
)
{
return
mFingerprintingProtectionOverrides
.
get
(
)
;
}
public
boolean
getFdlibmMathEnabled
(
)
{
return
mFdlibmMathEnabled
.
get
(
)
;
}
public
Nullable
Boolean
getExtensionsProcessEnabled
(
)
{
return
mExtensionsProcess
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setExtensionsProcessEnabled
(
final
boolean
flag
)
{
mExtensionsProcess
.
commit
(
flag
)
;
return
this
;
}
public
Nullable
Integer
getExtensionsProcessCrashThreshold
(
)
{
return
mExtensionsProcessCrashThreshold
.
get
(
)
;
}
public
Nullable
Long
getExtensionsProcessCrashTimeframe
(
)
{
return
mExtensionsProcessCrashTimeframe
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setExtensionsProcessCrashThreshold
(
final
NonNull
Integer
crashThreshold
)
{
mExtensionsProcessCrashThreshold
.
commit
(
crashThreshold
)
;
return
this
;
}
public
NonNull
GeckoRuntimeSettings
setExtensionsProcessCrashTimeframe
(
final
NonNull
Long
timeframeMs
)
{
mExtensionsProcessCrashTimeframe
.
commit
(
timeframeMs
)
;
return
this
;
}
public
boolean
getRemoteDebuggingEnabled
(
)
{
return
mRemoteDebugging
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setRemoteDebuggingEnabled
(
final
boolean
enabled
)
{
mRemoteDebugging
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getWebFontsEnabled
(
)
{
return
mWebFonts
.
get
(
)
!
=
0
;
}
public
NonNull
GeckoRuntimeSettings
setWebFontsEnabled
(
final
boolean
flag
)
{
mWebFonts
.
commit
(
flag
?
1
:
0
)
;
return
this
;
}
public
boolean
getPauseForDebuggerEnabled
(
)
{
return
mDebugPause
;
}
public
boolean
getForceEnableAccessibility
(
)
{
return
mForceEnableAccessibility
;
}
public
NonNull
GeckoRuntimeSettings
setForceEnableAccessibility
(
final
boolean
value
)
{
mForceEnableAccessibility
=
value
;
SessionAccessibility
.
setForceEnabled
(
value
)
;
return
this
;
}
public
boolean
getUseMaxScreenDepth
(
)
{
return
mUseMaxScreenDepth
;
}
public
Nullable
Float
getDisplayDensityOverride
(
)
{
if
(
mDisplayDensityOverride
>
0
.
0f
)
{
return
mDisplayDensityOverride
;
}
return
null
;
}
public
Nullable
Integer
getDisplayDpiOverride
(
)
{
if
(
mDisplayDpiOverride
>
0
)
{
return
mDisplayDpiOverride
;
}
return
null
;
}
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
Nullable
Class
<
?
extends
Service
>
getCrashHandler
(
)
{
return
mCrashHandler
;
}
public
Nullable
Rect
getScreenSizeOverride
(
)
{
if
(
(
mScreenWidthOverride
>
0
)
&
&
(
mScreenHeightOverride
>
0
)
)
{
return
new
Rect
(
0
0
mScreenWidthOverride
mScreenHeightOverride
)
;
}
return
null
;
}
public
Nullable
String
[
]
getLocales
(
)
{
return
mRequestedLocales
;
}
public
void
setLocales
(
final
Nullable
String
[
]
requestedLocales
)
{
mRequestedLocales
=
requestedLocales
;
commitLocales
(
)
;
}
public
boolean
getExtensionsWebAPIEnabled
(
)
{
return
mExtensionsWebAPIEnabled
.
get
(
)
;
}
public
boolean
getGlobalPrivacyControl
(
)
{
return
mGlobalPrivacyControlEnabled
.
get
(
)
;
}
public
boolean
getGlobalPrivacyControlPrivateMode
(
)
{
return
mGlobalPrivacyControlEnabledPrivateMode
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setExtensionsWebAPIEnabled
(
final
boolean
flag
)
{
mExtensionsWebAPIEnabled
.
commit
(
flag
)
;
return
this
;
}
private
void
commitLocales
(
)
{
final
GeckoBundle
data
=
new
GeckoBundle
(
1
)
;
data
.
putStringArray
(
"
requestedLocales
"
mRequestedLocales
)
;
data
.
putString
(
"
acceptLanguages
"
computeAcceptLanguages
(
)
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
SetLocale
"
data
)
;
}
private
String
computeAcceptLanguages
(
)
{
final
LinkedHashMap
<
String
String
>
locales
=
new
LinkedHashMap
<
>
(
)
;
if
(
mRequestedLocales
!
=
null
)
{
for
(
final
String
locale
:
mRequestedLocales
)
{
locales
.
put
(
locale
.
toLowerCase
(
Locale
.
ROOT
)
locale
)
;
}
}
for
(
final
String
locale
:
getSystemLocalesForAcceptLanguage
(
)
)
{
final
String
localeLowerCase
=
locale
.
toLowerCase
(
Locale
.
ROOT
)
;
if
(
!
locales
.
containsKey
(
localeLowerCase
)
)
{
locales
.
put
(
localeLowerCase
locale
)
;
}
}
return
TextUtils
.
join
(
"
"
locales
.
values
(
)
)
;
}
private
static
String
[
]
getSystemLocalesForAcceptLanguage
(
)
{
if
(
VERSION
.
SDK_INT
>
=
24
)
{
final
LocaleList
localeList
=
LocaleList
.
getDefault
(
)
;
final
String
[
]
locales
=
new
String
[
localeList
.
size
(
)
]
;
for
(
int
i
=
0
;
i
<
localeList
.
size
(
)
;
i
+
+
)
{
locales
[
i
]
=
LocaleUtils
.
getLanguageTagForAcceptLanguage
(
localeList
.
get
(
i
)
)
;
}
return
locales
;
}
final
String
[
]
locales
=
new
String
[
1
]
;
final
Locale
locale
=
Locale
.
getDefault
(
)
;
locales
[
0
]
=
LocaleUtils
.
getLanguageTagForAcceptLanguage
(
locale
)
;
return
locales
;
}
public
NonNull
GeckoRuntimeSettings
setWebManifestEnabled
(
final
boolean
enabled
)
{
mWebManifest
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getWebManifestEnabled
(
)
{
return
mWebManifest
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setConsoleOutputEnabled
(
final
boolean
enabled
)
{
mConsoleOutput
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getConsoleOutputEnabled
(
)
{
return
mConsoleOutput
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setAutomaticFontSizeAdjustment
(
final
boolean
enabled
)
{
GeckoFontScaleListener
.
getInstance
(
)
.
setEnabled
(
enabled
)
;
return
this
;
}
public
boolean
getAutomaticFontSizeAdjustment
(
)
{
return
GeckoFontScaleListener
.
getInstance
(
)
.
getEnabled
(
)
;
}
private
static
final
int
FONT_INFLATION_BASE_VALUE
=
120
;
public
NonNull
GeckoRuntimeSettings
setFontSizeFactor
(
final
float
fontSizeFactor
)
{
if
(
getAutomaticFontSizeAdjustment
(
)
)
{
throw
new
IllegalStateException
(
"
Not
allowed
when
automatic
font
size
adjustment
is
enabled
"
)
;
}
return
setFontSizeFactorInternal
(
fontSizeFactor
)
;
}
public
NonNull
GeckoRuntimeSettings
setEnterpriseRootsEnabled
(
final
boolean
enabled
)
{
mEnterpriseRootsEnabled
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getEnterpriseRootsEnabled
(
)
{
return
mEnterpriseRootsEnabled
.
get
(
)
;
}
private
static
final
float
DEFAULT_FONT_SIZE_FACTOR
=
1f
;
private
float
sanitizeFontSizeFactor
(
final
float
fontSizeFactor
)
{
if
(
fontSizeFactor
<
0
)
{
if
(
BuildConfig
.
DEBUG_BUILD
)
{
throw
new
IllegalArgumentException
(
"
fontSizeFactor
cannot
be
<
0
"
)
;
}
else
{
Log
.
e
(
LOGTAG
"
fontSizeFactor
cannot
be
<
0
"
)
;
return
DEFAULT_FONT_SIZE_FACTOR
;
}
}
return
fontSizeFactor
;
}
NonNull
GeckoRuntimeSettings
setFontSizeFactorInternal
(
final
float
fontSizeFactor
)
{
final
float
newFactor
=
sanitizeFontSizeFactor
(
fontSizeFactor
)
;
if
(
mFontSizeFactor
=
=
newFactor
)
{
return
this
;
}
mFontSizeFactor
=
newFactor
;
if
(
getFontInflationEnabled
(
)
)
{
final
int
scaledFontInflation
=
Math
.
round
(
FONT_INFLATION_BASE_VALUE
*
newFactor
)
;
mFontInflationMinTwips
.
commit
(
scaledFontInflation
)
;
}
GeckoSystemStateListener
.
onDeviceChanged
(
)
;
return
this
;
}
public
float
getFontSizeFactor
(
)
{
return
mFontSizeFactor
;
}
public
NonNull
GeckoRuntimeSettings
setFontInflationEnabled
(
final
boolean
enabled
)
{
final
int
minTwips
=
enabled
?
Math
.
round
(
FONT_INFLATION_BASE_VALUE
*
getFontSizeFactor
(
)
)
:
0
;
mFontInflationMinTwips
.
commit
(
minTwips
)
;
return
this
;
}
public
boolean
getFontInflationEnabled
(
)
{
return
mFontInflationMinTwips
.
get
(
)
>
0
;
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
COLOR_SCHEME_LIGHT
COLOR_SCHEME_DARK
COLOR_SCHEME_SYSTEM
}
)
public
interface
ColorScheme
{
}
public
static
final
int
COLOR_SCHEME_LIGHT
=
0
;
public
static
final
int
COLOR_SCHEME_DARK
=
1
;
public
static
final
int
COLOR_SCHEME_SYSTEM
=
-
1
;
public
ColorScheme
int
getPreferredColorScheme
(
)
{
return
mPreferredColorScheme
;
}
public
NonNull
GeckoRuntimeSettings
setPreferredColorScheme
(
final
ColorScheme
int
scheme
)
{
if
(
mPreferredColorScheme
!
=
scheme
)
{
mPreferredColorScheme
=
scheme
;
GeckoSystemStateListener
.
onDeviceChanged
(
)
;
}
return
this
;
}
public
boolean
getInputAutoZoomEnabled
(
)
{
return
mInputAutoZoom
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setInputAutoZoomEnabled
(
final
boolean
flag
)
{
mInputAutoZoom
.
commit
(
flag
)
;
return
this
;
}
public
boolean
getDoubleTapZoomingEnabled
(
)
{
return
mDoubleTapZooming
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setDoubleTapZoomingEnabled
(
final
boolean
flag
)
{
mDoubleTapZooming
.
commit
(
flag
)
;
return
this
;
}
public
int
getGlMsaaLevel
(
)
{
return
mGlMsaaLevel
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setGlMsaaLevel
(
final
int
level
)
{
mGlMsaaLevel
.
commit
(
level
)
;
return
this
;
}
AnyThread
public
Nullable
ExperimentDelegate
getExperimentDelegate
(
)
{
return
mExperimentDelegate
;
}
public
boolean
getAboutConfigEnabled
(
)
{
return
mAboutConfig
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setAboutConfigEnabled
(
final
boolean
flag
)
{
mAboutConfig
.
commit
(
flag
)
;
return
this
;
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
STRATEGY_ISOLATE_NOTHING
STRATEGY_ISOLATE_EVERYTHING
STRATEGY_ISOLATE_HIGH_VALUE
}
)
public
interface
WebContentIsolationStrategy
{
}
;
public
static
final
int
STRATEGY_ISOLATE_NOTHING
=
0
;
public
static
final
int
STRATEGY_ISOLATE_EVERYTHING
=
1
;
public
static
final
int
STRATEGY_ISOLATE_HIGH_VALUE
=
2
;
public
Nullable
Integer
getWebContentIsolationStrategy
(
)
{
return
mWebContentIsolationStrategy
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setWebContentIsolationStrategy
(
final
NonNull
WebContentIsolationStrategy
Integer
strategy
)
{
mWebContentIsolationStrategy
.
commit
(
strategy
)
;
return
this
;
}
public
boolean
getForceUserScalableEnabled
(
)
{
return
mForceUserScalable
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setForceUserScalableEnabled
(
final
boolean
flag
)
{
mForceUserScalable
.
commit
(
flag
)
;
return
this
;
}
public
boolean
getLoginAutofillEnabled
(
)
{
return
mAutofillLogins
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setTranslationsOfferPopup
(
final
boolean
enabled
)
{
mAutomaticallyOfferPopup
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getTranslationsOfferPopup
(
)
{
return
mAutomaticallyOfferPopup
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setLoginAutofillEnabled
(
final
boolean
enabled
)
{
mAutofillLogins
.
commit
(
enabled
)
;
return
this
;
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
ALLOW_ALL
HTTPS_ONLY_PRIVATE
HTTPS_ONLY
}
)
public
interface
HttpsOnlyMode
{
}
public
static
final
int
ALLOW_ALL
=
0
;
public
static
final
int
HTTPS_ONLY_PRIVATE
=
1
;
public
static
final
int
HTTPS_ONLY
=
2
;
public
HttpsOnlyMode
int
getAllowInsecureConnections
(
)
{
final
boolean
httpsOnly
=
mHttpsOnly
.
get
(
)
;
final
boolean
httpsOnlyPrivate
=
mHttpsOnlyPrivateMode
.
get
(
)
;
if
(
httpsOnly
)
{
return
HTTPS_ONLY
;
}
else
if
(
httpsOnlyPrivate
)
{
return
HTTPS_ONLY_PRIVATE
;
}
return
ALLOW_ALL
;
}
public
NonNull
GeckoRuntimeSettings
setAllowInsecureConnections
(
final
HttpsOnlyMode
int
level
)
{
switch
(
level
)
{
case
ALLOW_ALL
:
mHttpsOnly
.
commit
(
false
)
;
mHttpsOnlyPrivateMode
.
commit
(
false
)
;
break
;
case
HTTPS_ONLY_PRIVATE
:
mHttpsOnly
.
commit
(
false
)
;
mHttpsOnlyPrivateMode
.
commit
(
true
)
;
break
;
case
HTTPS_ONLY
:
mHttpsOnly
.
commit
(
true
)
;
mHttpsOnlyPrivateMode
.
commit
(
false
)
;
break
;
default
:
throw
new
IllegalArgumentException
(
"
Invalid
setting
for
setAllowInsecureConnections
"
)
;
}
return
this
;
}
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
TRR_MODE_OFF
TRR_MODE_FIRST
TRR_MODE_ONLY
TRR_MODE_DISABLED
}
)
public
interface
TrustedRecursiveResolverMode
{
}
public
static
final
int
TRR_MODE_OFF
=
0
;
public
static
final
int
TRR_MODE_FIRST
=
2
;
public
static
final
int
TRR_MODE_ONLY
=
3
;
public
static
final
int
TRR_MODE_DISABLED
=
5
;
public
TrustedRecursiveResolverMode
int
getTrustedRecusiveResolverMode
(
)
{
final
int
mode
=
mTrustedRecursiveResolverMode
.
get
(
)
;
switch
(
mode
)
{
case
2
:
return
TRR_MODE_FIRST
;
case
3
:
return
TRR_MODE_ONLY
;
case
5
:
return
TRR_MODE_DISABLED
;
default
:
case
0
:
return
TRR_MODE_OFF
;
}
}
public
NonNull
int
getLargeKeepaliveFactor
(
)
{
return
mLargeKeepalivefactor
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setTrustedRecursiveResolverMode
(
final
TrustedRecursiveResolverMode
int
mode
)
{
switch
(
mode
)
{
case
TRR_MODE_OFF
:
case
TRR_MODE_FIRST
:
case
TRR_MODE_ONLY
:
case
TRR_MODE_DISABLED
:
mTrustedRecursiveResolverMode
.
commit
(
mode
)
;
break
;
default
:
throw
new
IllegalArgumentException
(
"
Invalid
setting
for
setTrustedRecursiveResolverMode
"
)
;
}
return
this
;
}
private
static
final
int
DEFAULT_LARGE_KEEPALIVE_FACTOR
=
1
;
private
int
sanitizeLargeKeepaliveFactor
(
final
int
factor
)
{
if
(
factor
<
1
|
|
factor
>
10
)
{
if
(
BuildConfig
.
DEBUG_BUILD
)
{
throw
new
IllegalArgumentException
(
"
largeKeepaliveFactor
must
be
between
1
to
10
inclusive
"
)
;
}
else
{
Log
.
e
(
LOGTAG
"
largeKeepaliveFactor
must
be
between
1
to
10
inclusive
"
)
;
return
DEFAULT_LARGE_KEEPALIVE_FACTOR
;
}
}
return
factor
;
}
public
NonNull
GeckoRuntimeSettings
setLargeKeepaliveFactor
(
final
int
factor
)
{
final
int
newFactor
=
sanitizeLargeKeepaliveFactor
(
factor
)
;
mLargeKeepalivefactor
.
commit
(
newFactor
)
;
return
this
;
}
public
NonNull
String
getTrustedRecursiveResolverUri
(
)
{
return
mTrustedRecursiveResolverUri
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setTrustedRecursiveResolverUri
(
final
NonNull
String
uri
)
{
mTrustedRecursiveResolverUri
.
commit
(
uri
)
;
return
this
;
}
public
NonNull
int
getUserCharacteristicPingCurrentVersion
(
)
{
return
mUserCharacteristicPingCurrentVersion
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setUserCharacteristicPingCurrentVersion
(
final
int
version
)
{
mUserCharacteristicPingCurrentVersion
.
commit
(
version
)
;
return
this
;
}
public
Nullable
Boolean
getDisableShip
(
)
{
return
mDisableShip
.
get
(
)
;
}
NonNull
GeckoRuntimeSettings
setProcessCount
(
final
int
processCount
)
{
mProcessCount
.
commit
(
processCount
)
;
return
this
;
}
Override
public
void
writeToParcel
(
final
Parcel
out
final
int
flags
)
{
super
.
writeToParcel
(
out
flags
)
;
out
.
writeStringArray
(
mArgs
)
;
mExtras
.
writeToParcel
(
out
flags
)
;
ParcelableUtils
.
writeBoolean
(
out
mForceEnableAccessibility
)
;
ParcelableUtils
.
writeBoolean
(
out
mDebugPause
)
;
ParcelableUtils
.
writeBoolean
(
out
mUseMaxScreenDepth
)
;
out
.
writeFloat
(
mDisplayDensityOverride
)
;
out
.
writeInt
(
mDisplayDpiOverride
)
;
out
.
writeInt
(
mScreenWidthOverride
)
;
out
.
writeInt
(
mScreenHeightOverride
)
;
out
.
writeString
(
mCrashHandler
!
=
null
?
mCrashHandler
.
getName
(
)
:
null
)
;
out
.
writeStringArray
(
mRequestedLocales
)
;
out
.
writeString
(
mConfigFilePath
)
;
}
SuppressWarnings
(
"
checkstyle
:
javadocmethod
"
)
public
void
readFromParcel
(
final
NonNull
Parcel
source
)
{
super
.
readFromParcel
(
source
)
;
mArgs
=
source
.
createStringArray
(
)
;
mExtras
.
readFromParcel
(
source
)
;
mForceEnableAccessibility
=
ParcelableUtils
.
readBoolean
(
source
)
;
mDebugPause
=
ParcelableUtils
.
readBoolean
(
source
)
;
mUseMaxScreenDepth
=
ParcelableUtils
.
readBoolean
(
source
)
;
mDisplayDensityOverride
=
source
.
readFloat
(
)
;
mDisplayDpiOverride
=
source
.
readInt
(
)
;
mScreenWidthOverride
=
source
.
readInt
(
)
;
mScreenHeightOverride
=
source
.
readInt
(
)
;
final
String
crashHandlerName
=
source
.
readString
(
)
;
if
(
crashHandlerName
!
=
null
)
{
try
{
SuppressWarnings
(
"
unchecked
"
)
final
Class
<
?
extends
Service
>
handler
=
(
Class
<
?
extends
Service
>
)
Class
.
forName
(
crashHandlerName
)
;
mCrashHandler
=
handler
;
}
catch
(
final
ClassNotFoundException
e
)
{
}
}
mRequestedLocales
=
source
.
createStringArray
(
)
;
mConfigFilePath
=
source
.
readString
(
)
;
}
public
static
final
Parcelable
.
Creator
<
GeckoRuntimeSettings
>
CREATOR
=
new
Parcelable
.
Creator
<
GeckoRuntimeSettings
>
(
)
{
Override
public
GeckoRuntimeSettings
createFromParcel
(
final
Parcel
in
)
{
final
GeckoRuntimeSettings
settings
=
new
GeckoRuntimeSettings
(
)
;
settings
.
readFromParcel
(
in
)
;
return
settings
;
}
Override
public
GeckoRuntimeSettings
[
]
newArray
(
final
int
size
)
{
return
new
GeckoRuntimeSettings
[
size
]
;
}
}
;
}
