package
org
.
mozilla
.
geckoview
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
android
.
app
.
Service
;
import
android
.
graphics
.
Rect
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
android
.
support
.
annotation
.
AnyThread
;
import
android
.
support
.
annotation
.
IntDef
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
AnyThread
public
final
class
GeckoRuntimeSettings
extends
RuntimeSettings
{
AnyThread
public
static
final
class
Builder
extends
RuntimeSettings
.
Builder
<
GeckoRuntimeSettings
>
{
Override
protected
NonNull
GeckoRuntimeSettings
newSettings
(
final
GeckoRuntimeSettings
settings
)
{
return
new
GeckoRuntimeSettings
(
settings
)
;
}
public
NonNull
Builder
useContentProcessHint
(
final
boolean
use
)
{
getSettings
(
)
.
mUseContentProcess
=
use
;
return
this
;
}
public
NonNull
Builder
arguments
(
final
NonNull
String
[
]
args
)
{
if
(
args
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Arguments
must
not
be
null
"
)
;
}
getSettings
(
)
.
mArgs
=
args
;
return
this
;
}
public
NonNull
Builder
extras
(
final
NonNull
Bundle
extras
)
{
if
(
extras
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Extras
must
not
be
null
"
)
;
}
getSettings
(
)
.
mExtras
=
extras
;
return
this
;
}
public
NonNull
Builder
javaScriptEnabled
(
final
boolean
flag
)
{
getSettings
(
)
.
mJavaScript
.
set
(
flag
)
;
return
this
;
}
public
NonNull
Builder
remoteDebuggingEnabled
(
final
boolean
enabled
)
{
getSettings
(
)
.
mRemoteDebugging
.
set
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
webFontsEnabled
(
final
boolean
flag
)
{
getSettings
(
)
.
mWebFonts
.
set
(
flag
?
1
:
0
)
;
return
this
;
}
public
NonNull
Builder
pauseForDebugger
(
boolean
enabled
)
{
getSettings
(
)
.
mDebugPause
=
enabled
;
return
this
;
}
public
NonNull
Builder
useMaxScreenDepth
(
boolean
enable
)
{
getSettings
(
)
.
mUseMaxScreenDepth
=
enable
;
return
this
;
}
public
NonNull
Builder
consoleOutput
(
boolean
enabled
)
{
getSettings
(
)
.
mConsoleOutput
.
set
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
automaticFontSizeAdjustment
(
boolean
enabled
)
{
getSettings
(
)
.
setAutomaticFontSizeAdjustment
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
fontSizeFactor
(
float
fontSizeFactor
)
{
getSettings
(
)
.
setFontSizeFactor
(
fontSizeFactor
)
;
return
this
;
}
public
NonNull
Builder
fontInflation
(
boolean
enabled
)
{
getSettings
(
)
.
setFontInflationEnabled
(
enabled
)
;
return
this
;
}
public
NonNull
Builder
displayDensityOverride
(
float
density
)
{
getSettings
(
)
.
mDisplayDensityOverride
=
density
;
return
this
;
}
public
NonNull
Builder
displayDpiOverride
(
int
dpi
)
{
getSettings
(
)
.
mDisplayDpiOverride
=
dpi
;
return
this
;
}
public
NonNull
Builder
screenSizeOverride
(
int
width
int
height
)
{
getSettings
(
)
.
mScreenWidthOverride
=
width
;
getSettings
(
)
.
mScreenHeightOverride
=
height
;
return
this
;
}
public
NonNull
Builder
crashHandler
(
final
Class
<
?
extends
Service
>
handler
)
{
getSettings
(
)
.
mCrashHandler
=
handler
;
return
this
;
}
public
NonNull
Builder
locales
(
String
[
]
requestedLocales
)
{
getSettings
(
)
.
mRequestedLocales
=
requestedLocales
;
return
this
;
}
public
NonNull
Builder
contentBlocking
(
final
NonNull
ContentBlocking
.
Settings
cb
)
{
getSettings
(
)
.
mContentBlocking
=
cb
;
return
this
;
}
}
private
GeckoRuntime
mRuntime
;
boolean
mUseContentProcess
;
String
[
]
mArgs
;
Bundle
mExtras
;
ContentBlocking
.
Settings
mContentBlocking
;
public
NonNull
ContentBlocking
.
Settings
getContentBlocking
(
)
{
return
mContentBlocking
;
}
final
Pref
<
Boolean
>
mJavaScript
=
new
Pref
<
Boolean
>
(
"
javascript
.
enabled
"
true
)
;
final
Pref
<
Boolean
>
mRemoteDebugging
=
new
Pref
<
Boolean
>
(
"
devtools
.
debugger
.
remote
-
enabled
"
false
)
;
final
Pref
<
Integer
>
mWebFonts
=
new
Pref
<
Integer
>
(
"
browser
.
display
.
use_document_fonts
"
1
)
;
final
Pref
<
Boolean
>
mConsoleOutput
=
new
Pref
<
Boolean
>
(
"
geckoview
.
console
.
enabled
"
false
)
;
final
Pref
<
Integer
>
mFontSizeFactor
=
new
Pref
<
>
(
"
font
.
size
.
systemFontScale
"
100
)
;
final
Pref
<
Integer
>
mFontInflationMinTwips
=
new
Pref
<
>
(
"
font
.
size
.
inflation
.
minTwips
"
0
)
;
boolean
mDebugPause
;
boolean
mUseMaxScreenDepth
;
float
mDisplayDensityOverride
=
-
1
.
0f
;
int
mDisplayDpiOverride
;
int
mScreenWidthOverride
;
int
mScreenHeightOverride
;
Class
<
?
extends
Service
>
mCrashHandler
;
String
[
]
mRequestedLocales
;
void
attachTo
(
final
NonNull
GeckoRuntime
runtime
)
{
mRuntime
=
runtime
;
commit
(
)
;
}
Override
public
Nullable
GeckoRuntime
getRuntime
(
)
{
return
mRuntime
;
}
GeckoRuntimeSettings
(
)
{
this
(
null
)
;
}
GeckoRuntimeSettings
(
final
Nullable
GeckoRuntimeSettings
settings
)
{
super
(
null
)
;
if
(
settings
=
=
null
)
{
mArgs
=
new
String
[
0
]
;
mExtras
=
new
Bundle
(
)
;
mContentBlocking
=
new
ContentBlocking
.
Settings
(
this
null
)
;
return
;
}
updateSettings
(
settings
)
;
}
private
void
updateSettings
(
final
NonNull
GeckoRuntimeSettings
settings
)
{
updatePrefs
(
settings
)
;
mUseContentProcess
=
settings
.
getUseContentProcessHint
(
)
;
mArgs
=
settings
.
getArguments
(
)
.
clone
(
)
;
mExtras
=
new
Bundle
(
settings
.
getExtras
(
)
)
;
mContentBlocking
=
new
ContentBlocking
.
Settings
(
this
settings
.
mContentBlocking
)
;
mDebugPause
=
settings
.
mDebugPause
;
mUseMaxScreenDepth
=
settings
.
mUseMaxScreenDepth
;
mDisplayDensityOverride
=
settings
.
mDisplayDensityOverride
;
mDisplayDpiOverride
=
settings
.
mDisplayDpiOverride
;
mScreenWidthOverride
=
settings
.
mScreenWidthOverride
;
mScreenHeightOverride
=
settings
.
mScreenHeightOverride
;
mCrashHandler
=
settings
.
mCrashHandler
;
mRequestedLocales
=
settings
.
mRequestedLocales
;
}
void
commit
(
)
{
commitLocales
(
)
;
commitResetPrefs
(
)
;
}
public
boolean
getUseContentProcessHint
(
)
{
return
mUseContentProcess
;
}
public
NonNull
String
[
]
getArguments
(
)
{
return
mArgs
;
}
public
NonNull
Bundle
getExtras
(
)
{
return
mExtras
;
}
public
boolean
getJavaScriptEnabled
(
)
{
return
mJavaScript
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setJavaScriptEnabled
(
final
boolean
flag
)
{
mJavaScript
.
commit
(
flag
)
;
return
this
;
}
public
boolean
getRemoteDebuggingEnabled
(
)
{
return
mRemoteDebugging
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setRemoteDebuggingEnabled
(
final
boolean
enabled
)
{
mRemoteDebugging
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getWebFontsEnabled
(
)
{
return
mWebFonts
.
get
(
)
!
=
0
?
true
:
false
;
}
public
NonNull
GeckoRuntimeSettings
setWebFontsEnabled
(
final
boolean
flag
)
{
mWebFonts
.
commit
(
flag
?
1
:
0
)
;
return
this
;
}
public
boolean
getPauseForDebuggerEnabled
(
)
{
return
mDebugPause
;
}
public
boolean
getUseMaxScreenDepth
(
)
{
return
mUseMaxScreenDepth
;
}
public
Nullable
Float
getDisplayDensityOverride
(
)
{
if
(
mDisplayDensityOverride
>
0
.
0f
)
{
return
mDisplayDensityOverride
;
}
return
null
;
}
public
Nullable
Integer
getDisplayDpiOverride
(
)
{
if
(
mDisplayDpiOverride
>
0
)
{
return
mDisplayDpiOverride
;
}
return
null
;
}
public
Nullable
Class
<
?
extends
Service
>
getCrashHandler
(
)
{
return
mCrashHandler
;
}
public
Nullable
Rect
getScreenSizeOverride
(
)
{
if
(
(
mScreenWidthOverride
>
0
)
&
&
(
mScreenHeightOverride
>
0
)
)
{
return
new
Rect
(
0
0
mScreenWidthOverride
mScreenHeightOverride
)
;
}
return
null
;
}
public
Nullable
String
[
]
getLocales
(
)
{
return
mRequestedLocales
;
}
public
void
setLocales
(
Nullable
String
[
]
requestedLocales
)
{
mRequestedLocales
=
requestedLocales
;
commitLocales
(
)
;
}
private
void
commitLocales
(
)
{
if
(
mRequestedLocales
=
=
null
)
{
return
;
}
final
GeckoBundle
data
=
new
GeckoBundle
(
1
)
;
data
.
putStringArray
(
"
requestedLocales
"
mRequestedLocales
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
GeckoView
:
SetLocale
"
data
)
;
}
public
NonNull
GeckoRuntimeSettings
setConsoleOutputEnabled
(
boolean
enabled
)
{
mConsoleOutput
.
commit
(
enabled
)
;
return
this
;
}
public
boolean
getConsoleOutputEnabled
(
)
{
return
mConsoleOutput
.
get
(
)
;
}
public
NonNull
GeckoRuntimeSettings
setAutomaticFontSizeAdjustment
(
boolean
enabled
)
{
GeckoFontScaleListener
.
getInstance
(
)
.
setEnabled
(
enabled
)
;
return
this
;
}
public
boolean
getAutomaticFontSizeAdjustment
(
)
{
return
GeckoFontScaleListener
.
getInstance
(
)
.
getEnabled
(
)
;
}
private
static
int
FONT_INFLATION_BASE_VALUE
=
120
;
public
NonNull
GeckoRuntimeSettings
setFontSizeFactor
(
float
fontSizeFactor
)
{
if
(
getAutomaticFontSizeAdjustment
(
)
)
{
throw
new
IllegalStateException
(
"
Not
allowed
when
automatic
font
size
adjustment
is
enabled
"
)
;
}
return
setFontSizeFactorInternal
(
fontSizeFactor
)
;
}
NonNull
GeckoRuntimeSettings
setFontSizeFactorInternal
(
float
fontSizeFactor
)
{
if
(
fontSizeFactor
<
0
)
{
throw
new
IllegalArgumentException
(
"
fontSizeFactor
cannot
be
<
0
"
)
;
}
final
int
fontSizePercentage
=
Math
.
round
(
fontSizeFactor
*
100
)
;
mFontSizeFactor
.
commit
(
Math
.
round
(
fontSizePercentage
)
)
;
if
(
getFontInflationEnabled
(
)
)
{
final
int
scaledFontInflation
=
Math
.
round
(
FONT_INFLATION_BASE_VALUE
*
fontSizeFactor
)
;
mFontInflationMinTwips
.
commit
(
scaledFontInflation
)
;
}
return
this
;
}
public
float
getFontSizeFactor
(
)
{
return
mFontSizeFactor
.
get
(
)
/
100f
;
}
public
NonNull
GeckoRuntimeSettings
setFontInflationEnabled
(
boolean
enabled
)
{
if
(
getAutomaticFontSizeAdjustment
(
)
)
{
throw
new
IllegalStateException
(
"
Not
allowed
when
automatic
font
size
adjustment
is
enabled
"
)
;
}
return
setFontInflationEnabledInternal
(
enabled
)
;
}
NonNull
GeckoRuntimeSettings
setFontInflationEnabledInternal
(
boolean
enabled
)
{
final
int
minTwips
=
enabled
?
Math
.
round
(
FONT_INFLATION_BASE_VALUE
*
getFontSizeFactor
(
)
)
:
0
;
mFontInflationMinTwips
.
commit
(
minTwips
)
;
return
this
;
}
public
boolean
getFontInflationEnabled
(
)
{
return
mFontInflationMinTwips
.
get
(
)
>
0
;
}
Override
public
void
writeToParcel
(
Parcel
out
int
flags
)
{
super
.
writeToParcel
(
out
flags
)
;
ParcelableUtils
.
writeBoolean
(
out
mUseContentProcess
)
;
out
.
writeStringArray
(
mArgs
)
;
mExtras
.
writeToParcel
(
out
flags
)
;
ParcelableUtils
.
writeBoolean
(
out
mDebugPause
)
;
ParcelableUtils
.
writeBoolean
(
out
mUseMaxScreenDepth
)
;
out
.
writeFloat
(
mDisplayDensityOverride
)
;
out
.
writeInt
(
mDisplayDpiOverride
)
;
out
.
writeInt
(
mScreenWidthOverride
)
;
out
.
writeInt
(
mScreenHeightOverride
)
;
out
.
writeString
(
mCrashHandler
!
=
null
?
mCrashHandler
.
getName
(
)
:
null
)
;
out
.
writeStringArray
(
mRequestedLocales
)
;
}
public
void
readFromParcel
(
final
NonNull
Parcel
source
)
{
super
.
readFromParcel
(
source
)
;
mUseContentProcess
=
ParcelableUtils
.
readBoolean
(
source
)
;
mArgs
=
source
.
createStringArray
(
)
;
mExtras
.
readFromParcel
(
source
)
;
mDebugPause
=
ParcelableUtils
.
readBoolean
(
source
)
;
mUseMaxScreenDepth
=
ParcelableUtils
.
readBoolean
(
source
)
;
mDisplayDensityOverride
=
source
.
readFloat
(
)
;
mDisplayDpiOverride
=
source
.
readInt
(
)
;
mScreenWidthOverride
=
source
.
readInt
(
)
;
mScreenHeightOverride
=
source
.
readInt
(
)
;
final
String
crashHandlerName
=
source
.
readString
(
)
;
if
(
crashHandlerName
!
=
null
)
{
try
{
SuppressWarnings
(
"
unchecked
"
)
final
Class
<
?
extends
Service
>
handler
=
(
Class
<
?
extends
Service
>
)
Class
.
forName
(
crashHandlerName
)
;
mCrashHandler
=
handler
;
}
catch
(
ClassNotFoundException
e
)
{
}
}
mRequestedLocales
=
source
.
createStringArray
(
)
;
}
public
static
final
Parcelable
.
Creator
<
GeckoRuntimeSettings
>
CREATOR
=
new
Parcelable
.
Creator
<
GeckoRuntimeSettings
>
(
)
{
Override
public
GeckoRuntimeSettings
createFromParcel
(
final
Parcel
in
)
{
final
GeckoRuntimeSettings
settings
=
new
GeckoRuntimeSettings
(
)
;
settings
.
readFromParcel
(
in
)
;
return
settings
;
}
Override
public
GeckoRuntimeSettings
[
]
newArray
(
final
int
size
)
{
return
new
GeckoRuntimeSettings
[
size
]
;
}
}
;
}
