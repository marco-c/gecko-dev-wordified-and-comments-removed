package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
android
.
util
.
Log
;
public
final
class
GeckoViewSettings
{
private
static
final
String
LOGTAG
=
"
GeckoViewSettings
"
;
private
static
final
boolean
DEBUG
=
false
;
private
static
class
Key
<
T
>
{
private
final
String
text
;
public
Key
(
final
String
text
)
{
this
.
text
=
text
;
}
}
public
enum
DisplayMode
{
BROWSER
(
0
)
MINIMAL_UI
(
1
)
STANDALONE
(
2
)
FULLSCREEN
(
3
)
;
private
final
int
mMode
;
DisplayMode
(
int
mode
)
{
mMode
=
mode
;
}
public
int
value
(
)
{
return
mMode
;
}
}
public
static
final
Key
<
Boolean
>
USE_TRACKING_PROTECTION
=
new
Key
<
Boolean
>
(
"
useTrackingProtection
"
)
;
public
static
final
Key
<
Boolean
>
USE_PRIVATE_MODE
=
new
Key
<
Boolean
>
(
"
usePrivateMode
"
)
;
public
static
final
Key
<
Boolean
>
USE_MULTIPROCESS
=
new
Key
<
Boolean
>
(
"
useMultiprocess
"
)
;
public
static
final
Key
<
Integer
>
DISPLAY_MODE
=
new
Key
<
Integer
>
(
"
displayMode
"
)
;
public
static
final
Key
<
Boolean
>
USE_REMOTE_DEBUGGER
=
new
Key
<
Boolean
>
(
"
useRemoteDebugger
"
)
;
private
final
EventDispatcher
mEventDispatcher
;
private
final
GeckoBundle
mBundle
;
public
GeckoViewSettings
(
)
{
this
(
null
)
;
}
GeckoViewSettings
(
EventDispatcher
eventDispatcher
)
{
mEventDispatcher
=
eventDispatcher
;
mBundle
=
new
GeckoBundle
(
)
;
setBoolean
(
USE_TRACKING_PROTECTION
false
)
;
setBoolean
(
USE_PRIVATE_MODE
false
)
;
setBoolean
(
USE_MULTIPROCESS
true
)
;
setInt
(
DISPLAY_MODE
DisplayMode
.
BROWSER
.
value
(
)
)
;
setBoolean
(
USE_REMOTE_DEBUGGER
false
)
;
}
GeckoViewSettings
(
GeckoViewSettings
settings
EventDispatcher
eventDispatcher
)
{
mBundle
=
new
GeckoBundle
(
settings
.
mBundle
)
;
mEventDispatcher
=
eventDispatcher
;
}
public
void
setBoolean
(
final
Key
<
Boolean
>
key
boolean
value
)
{
synchronized
(
mBundle
)
{
final
Object
old
=
mBundle
.
get
(
key
.
text
)
;
if
(
old
!
=
null
&
&
old
.
equals
(
value
)
)
{
return
;
}
mBundle
.
putBoolean
(
key
.
text
value
)
;
}
dispatchUpdate
(
)
;
}
public
boolean
getBoolean
(
final
Key
<
Boolean
>
key
)
{
synchronized
(
mBundle
)
{
return
mBundle
.
getBoolean
(
key
.
text
)
;
}
}
public
void
setInt
(
final
Key
<
Integer
>
key
int
value
)
{
synchronized
(
mBundle
)
{
final
Object
old
=
mBundle
.
get
(
key
.
text
)
;
if
(
old
!
=
null
&
&
old
.
equals
(
value
)
)
{
return
;
}
mBundle
.
putInt
(
key
.
text
value
)
;
}
dispatchUpdate
(
)
;
}
public
int
getInt
(
final
Key
<
Integer
>
key
)
{
synchronized
(
mBundle
)
{
return
mBundle
.
getInt
(
key
.
text
)
;
}
}
GeckoBundle
asBundle
(
)
{
return
mBundle
;
}
private
void
dispatchUpdate
(
)
{
if
(
mEventDispatcher
!
=
null
)
{
mEventDispatcher
.
dispatch
(
"
GeckoView
:
UpdateSettings
"
null
)
;
}
}
}
