package
org
.
mozilla
.
geckoview
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
android
.
support
.
annotation
.
AnyThread
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
java
.
util
.
Arrays
;
public
class
WebPushSubscription
implements
Parcelable
{
private
static
final
int
P256_PUBLIC_KEY_LENGTH
=
65
;
NonNull
public
final
String
scope
;
NonNull
public
final
String
endpoint
;
Nullable
public
final
byte
[
]
appServerKey
;
NonNull
public
final
byte
[
]
browserPublicKey
;
NonNull
public
final
byte
[
]
authSecret
;
public
WebPushSubscription
(
final
NonNull
String
scope
final
NonNull
String
endpoint
final
Nullable
byte
[
]
appServerKey
final
NonNull
byte
[
]
browserPublicKey
final
NonNull
byte
[
]
authSecret
)
{
this
.
scope
=
scope
;
this
.
endpoint
=
endpoint
;
this
.
appServerKey
=
appServerKey
;
this
.
browserPublicKey
=
browserPublicKey
;
this
.
authSecret
=
authSecret
;
if
(
appServerKey
!
=
null
)
{
if
(
appServerKey
.
length
!
=
P256_PUBLIC_KEY_LENGTH
)
{
throw
new
IllegalArgumentException
(
String
.
format
(
"
appServerKey
should
be
%
d
bytes
"
P256_PUBLIC_KEY_LENGTH
)
)
;
}
if
(
Arrays
.
equals
(
appServerKey
browserPublicKey
)
)
{
throw
new
IllegalArgumentException
(
"
appServerKey
and
browserPublicKey
must
differ
"
)
;
}
}
if
(
browserPublicKey
.
length
!
=
P256_PUBLIC_KEY_LENGTH
)
{
throw
new
IllegalArgumentException
(
String
.
format
(
"
browserPublicKey
should
be
%
d
bytes
"
P256_PUBLIC_KEY_LENGTH
)
)
;
}
if
(
authSecret
.
length
!
=
16
)
{
throw
new
IllegalArgumentException
(
"
authSecret
must
be
128
bits
"
)
;
}
}
private
WebPushSubscription
(
final
Parcel
in
)
{
this
.
scope
=
in
.
readString
(
)
;
this
.
endpoint
=
in
.
readString
(
)
;
if
(
ParcelableUtils
.
readBoolean
(
in
)
)
{
this
.
appServerKey
=
new
byte
[
P256_PUBLIC_KEY_LENGTH
]
;
in
.
readByteArray
(
this
.
appServerKey
)
;
}
else
{
appServerKey
=
null
;
}
this
.
browserPublicKey
=
new
byte
[
P256_PUBLIC_KEY_LENGTH
]
;
in
.
readByteArray
(
this
.
browserPublicKey
)
;
this
.
authSecret
=
new
byte
[
16
]
;
in
.
readByteArray
(
this
.
authSecret
)
;
}
GeckoBundle
toBundle
(
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
5
)
;
bundle
.
putString
(
"
scope
"
scope
)
;
bundle
.
putString
(
"
endpoint
"
endpoint
)
;
if
(
appServerKey
!
=
null
)
{
bundle
.
putString
(
"
appServerKey
"
Base64Utils
.
encode
(
appServerKey
)
)
;
}
bundle
.
putString
(
"
browserPublicKey
"
Base64Utils
.
encode
(
browserPublicKey
)
)
;
bundle
.
putString
(
"
authSecret
"
Base64Utils
.
encode
(
authSecret
)
)
;
return
bundle
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
final
Parcel
out
final
int
flags
)
{
out
.
writeString
(
scope
)
;
out
.
writeString
(
endpoint
)
;
ParcelableUtils
.
writeBoolean
(
out
appServerKey
!
=
null
)
;
if
(
appServerKey
!
=
null
)
{
out
.
writeByteArray
(
appServerKey
)
;
}
out
.
writeByteArray
(
browserPublicKey
)
;
out
.
writeByteArray
(
authSecret
)
;
}
public
static
final
Parcelable
.
Creator
<
WebPushSubscription
>
CREATOR
=
new
Parcelable
.
Creator
<
WebPushSubscription
>
(
)
{
Override
AnyThread
public
WebPushSubscription
createFromParcel
(
final
Parcel
parcel
)
{
return
new
WebPushSubscription
(
parcel
)
;
}
Override
AnyThread
public
WebPushSubscription
[
]
newArray
(
final
int
size
)
{
return
new
WebPushSubscription
[
size
]
;
}
}
;
}
