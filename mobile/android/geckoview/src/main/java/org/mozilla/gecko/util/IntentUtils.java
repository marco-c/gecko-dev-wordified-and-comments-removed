package
org
.
mozilla
.
gecko
.
util
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Build
;
import
android
.
os
.
Environment
;
import
android
.
provider
.
DocumentsContract
;
import
android
.
util
.
Log
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
net
.
URISyntaxException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Locale
;
public
class
IntentUtils
{
private
static
final
String
LOGTAG
=
"
IntentUtils
"
;
private
static
final
boolean
DEBUG
=
false
;
private
static
final
String
EXTERNAL_STORAGE_PROVIDER_AUTHORITY
=
"
com
.
android
.
externalstorage
.
documents
"
;
private
static
final
int
DOCURI_MAX_DEPTH
=
5
;
private
IntentUtils
(
)
{
}
private
static
Uri
normalizeUriScheme
(
final
Uri
uri
)
{
final
String
scheme
=
uri
.
getScheme
(
)
;
if
(
scheme
=
=
null
)
{
return
uri
;
}
final
String
lower
=
scheme
.
toLowerCase
(
Locale
.
ROOT
)
;
if
(
lower
.
equals
(
scheme
)
)
{
return
uri
;
}
return
uri
.
buildUpon
(
)
.
scheme
(
lower
)
.
build
(
)
;
}
public
static
Uri
normalizeUri
(
final
String
aUri
)
{
return
normalizeUriScheme
(
aUri
.
indexOf
(
'
:
'
)
>
=
0
?
Uri
.
parse
(
aUri
)
:
new
Uri
.
Builder
(
)
.
scheme
(
aUri
)
.
build
(
)
)
;
}
public
static
boolean
isUriSafeForScheme
(
final
String
aUri
)
{
return
isUriSafeForScheme
(
normalizeUri
(
aUri
)
)
;
}
public
static
boolean
isUriSafeForScheme
(
final
Uri
aUri
)
{
final
String
scheme
=
aUri
.
getScheme
(
)
;
if
(
"
tel
"
.
equals
(
scheme
)
|
|
"
sms
"
.
equals
(
scheme
)
)
{
final
String
number
=
aUri
.
getSchemeSpecificPart
(
)
;
if
(
number
.
contains
(
"
#
"
)
|
|
number
.
contains
(
"
*
"
)
|
|
aUri
.
getFragment
(
)
!
=
null
)
{
return
false
;
}
}
if
(
(
"
intent
"
.
equals
(
scheme
)
|
|
"
android
-
app
"
.
equals
(
scheme
)
)
)
{
return
getSafeIntent
(
aUri
)
!
=
null
;
}
if
(
"
fido
"
.
equals
(
scheme
)
)
{
return
false
;
}
return
true
;
}
public
static
Intent
getSafeIntent
(
final
Uri
aUri
)
{
final
Intent
intent
;
try
{
intent
=
Intent
.
parseUri
(
aUri
.
toString
(
)
0
)
;
}
catch
(
final
URISyntaxException
e
)
{
return
null
;
}
final
Uri
data
=
intent
.
getData
(
)
;
if
(
data
!
=
null
&
&
"
file
"
.
equals
(
normalizeUriScheme
(
data
)
.
getScheme
(
)
)
)
{
return
null
;
}
intent
.
addCategory
(
Intent
.
CATEGORY_BROWSABLE
)
;
intent
.
setComponent
(
null
)
;
nullIntentSelector
(
intent
)
;
return
intent
;
}
private
static
void
nullIntentSelector
(
final
Intent
intent
)
{
intent
.
setSelector
(
null
)
;
}
public
static
String
resolveContentUri
(
final
Context
context
final
Uri
uri
)
{
final
ContentResolver
cr
=
context
.
getContentResolver
(
)
;
try
(
final
Cursor
cur
=
cr
.
query
(
uri
new
String
[
]
{
"
_data
"
}
null
null
null
)
)
{
final
int
idx
=
cur
.
getColumnIndex
(
"
_data
"
)
;
if
(
idx
<
0
|
|
!
cur
.
moveToFirst
(
)
)
{
return
null
;
}
do
{
try
{
final
String
path
=
cur
.
getString
(
idx
)
;
if
(
path
!
=
null
&
&
!
path
.
isEmpty
(
)
)
{
return
path
;
}
}
catch
(
final
Exception
e
)
{
}
}
while
(
cur
.
moveToNext
(
)
)
;
}
catch
(
final
UnsupportedOperationException
e
)
{
Log
.
e
(
LOGTAG
"
Failed
to
query
child
documents
"
e
)
;
}
if
(
DEBUG
)
{
Log
.
e
(
LOGTAG
"
Failed
to
resolve
uri
.
uri
=
"
+
uri
.
toString
(
)
)
;
}
return
null
;
}
public
static
String
resolveTreeUri
(
final
Context
context
final
Uri
uri
)
{
final
Uri
docDirUri
=
DocumentsContract
.
buildDocumentUriUsingTree
(
uri
DocumentsContract
.
getTreeDocumentId
(
uri
)
)
;
return
resolveDocumentUri
(
context
docDirUri
)
;
}
public
static
String
resolveDocumentUri
(
final
Context
context
final
Uri
uri
)
{
if
(
EXTERNAL_STORAGE_PROVIDER_AUTHORITY
.
equals
(
uri
.
getAuthority
(
)
)
)
{
final
String
docId
=
DocumentsContract
.
getDocumentId
(
uri
)
;
final
String
[
]
split
=
docId
.
split
(
"
:
"
)
;
if
(
split
[
0
]
.
equals
(
"
primary
"
)
)
{
final
StringBuilder
sb
=
new
StringBuilder
(
Environment
.
getExternalStorageDirectory
(
)
.
toString
(
)
)
;
if
(
split
.
length
>
1
)
{
sb
.
append
(
"
/
"
)
.
append
(
split
[
1
]
)
;
}
return
sb
.
toString
(
)
;
}
if
(
Build
.
VERSION
.
SDK_INT
>
=
Build
.
VERSION_CODES
.
R
)
{
final
StringBuilder
sb
=
new
StringBuilder
(
Environment
.
getStorageDirectory
(
)
.
toString
(
)
)
;
sb
.
append
(
"
/
"
)
.
append
(
split
[
0
]
)
;
if
(
split
.
length
>
1
)
{
sb
.
append
(
"
/
"
)
.
append
(
split
[
1
]
)
;
}
return
sb
.
toString
(
)
;
}
}
if
(
DEBUG
)
{
Log
.
e
(
LOGTAG
"
Failed
to
resolve
uri
.
uri
=
"
+
uri
.
toString
(
)
)
;
}
return
null
;
}
public
static
class
ContentMetaData
{
ContentMetaData
(
Nullable
final
String
filePath
NonNull
final
Uri
uri
NonNull
final
String
displayName
NonNull
final
String
mimeType
final
long
lastModified
)
{
if
(
filePath
=
=
null
)
{
this
.
filePath
=
"
"
;
}
else
{
this
.
filePath
=
filePath
;
}
this
.
uri
=
uri
;
this
.
displayName
=
displayName
;
this
.
mimeType
=
mimeType
;
this
.
lastModified
=
lastModified
;
}
public
NonNull
GeckoBundle
toGeckoBundle
(
)
{
final
GeckoBundle
bundle
=
new
GeckoBundle
(
)
;
bundle
.
putString
(
"
filePath
"
this
.
filePath
)
;
bundle
.
putString
(
"
uri
"
this
.
uri
.
toString
(
)
)
;
bundle
.
putString
(
"
name
"
this
.
displayName
)
;
bundle
.
putString
(
"
type
"
this
.
mimeType
)
;
bundle
.
putLong
(
"
lastModified
"
this
.
lastModified
)
;
return
bundle
;
}
Override
public
String
toString
(
)
{
final
StringBuilder
sb
=
new
StringBuilder
(
)
;
if
(
this
.
filePath
!
=
"
"
)
{
sb
.
append
(
"
filePath
=
"
)
.
append
(
this
.
filePath
)
.
append
(
"
"
)
;
}
sb
.
append
(
"
uri
=
"
)
.
append
(
this
.
uri
)
.
append
(
"
displayName
=
"
)
.
append
(
this
.
displayName
)
.
append
(
"
mimeType
=
"
)
.
append
(
this
.
mimeType
)
.
append
(
"
lastModified
=
"
)
.
append
(
this
.
lastModified
)
;
return
sb
.
toString
(
)
;
}
public
NonNull
final
String
filePath
;
public
NonNull
final
Uri
uri
;
public
NonNull
final
String
displayName
;
public
NonNull
final
String
mimeType
;
public
final
long
lastModified
;
}
private
static
void
queryTreeDocumentUri
(
final
Context
context
final
Uri
uri
final
int
currentDepth
final
ArrayList
<
ContentMetaData
>
children
)
{
if
(
currentDepth
>
DOCURI_MAX_DEPTH
)
{
Log
.
e
(
LOGTAG
"
Failed
to
query
child
documents
due
to
deep
depth
"
)
;
return
;
}
final
ContentResolver
cr
=
context
.
getContentResolver
(
)
;
final
String
[
]
columns
=
new
String
[
]
{
DocumentsContract
.
Document
.
COLUMN_DOCUMENT_ID
DocumentsContract
.
Document
.
COLUMN_DISPLAY_NAME
DocumentsContract
.
Document
.
COLUMN_MIME_TYPE
DocumentsContract
.
Document
.
COLUMN_LAST_MODIFIED
}
;
try
(
Cursor
cursor
=
cr
.
query
(
uri
columns
null
null
null
)
)
{
while
(
cursor
.
moveToNext
(
)
)
{
if
(
cursor
.
isNull
(
0
)
)
{
continue
;
}
final
String
docId
=
cursor
.
getString
(
0
)
;
final
String
mimeType
=
cursor
.
isNull
(
2
)
?
"
"
:
cursor
.
getString
(
2
)
;
final
boolean
isDirectory
=
DocumentsContract
.
Document
.
MIME_TYPE_DIR
.
equals
(
mimeType
)
;
if
(
isDirectory
)
{
final
Uri
childUri
=
DocumentsContract
.
buildChildDocumentsUriUsingTree
(
uri
docId
)
;
queryTreeDocumentUri
(
context
childUri
currentDepth
+
1
children
)
;
continue
;
}
final
Uri
docUri
=
DocumentsContract
.
buildDocumentUriUsingTree
(
uri
docId
)
;
final
String
displayName
=
cursor
.
isNull
(
1
)
?
"
"
:
cursor
.
getString
(
1
)
;
final
long
lastModified
=
cursor
.
isNull
(
3
)
?
0
:
cursor
.
getLong
(
3
)
;
final
String
filePath
=
resolveDocumentUri
(
context
docUri
)
;
children
.
add
(
new
ContentMetaData
(
filePath
docUri
displayName
mimeType
lastModified
)
)
;
}
}
catch
(
final
UnsupportedOperationException
e
)
{
Log
.
e
(
LOGTAG
"
Failed
to
query
child
documents
"
e
)
;
}
}
public
static
NonNull
ArrayList
<
ContentMetaData
>
traverseTreeUri
(
final
Context
context
final
Uri
uri
)
{
final
Uri
queryUri
=
DocumentsContract
.
buildChildDocumentsUriUsingTree
(
uri
DocumentsContract
.
getTreeDocumentId
(
uri
)
)
;
final
ArrayList
<
ContentMetaData
>
children
=
new
ArrayList
<
ContentMetaData
>
(
)
;
queryTreeDocumentUri
(
context
queryUri
0
children
)
;
if
(
DEBUG
)
{
for
(
final
ContentMetaData
data
:
children
)
{
Log
.
d
(
LOGTAG
data
.
toString
(
)
)
;
}
}
return
children
;
}
}
