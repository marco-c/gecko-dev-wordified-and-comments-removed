package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
annotation
.
RobocopTarget
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
mozglue
.
GeckoLoader
;
import
org
.
mozilla
.
gecko
.
util
.
FileUtils
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
content
.
res
.
Resources
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Looper
;
import
android
.
os
.
Message
;
import
android
.
os
.
MessageQueue
;
import
android
.
os
.
SystemClock
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
Log
;
import
java
.
io
.
File
;
import
java
.
io
.
FilenameFilter
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Locale
;
import
java
.
util
.
StringTokenizer
;
public
class
GeckoThread
extends
Thread
{
private
static
final
String
LOGTAG
=
"
GeckoThread
"
;
public
enum
State
implements
NativeQueue
.
State
{
WrapForJNI
INITIAL
(
0
)
WrapForJNI
LAUNCHED
(
1
)
WrapForJNI
MOZGLUE_READY
(
2
)
WrapForJNI
LIBS_READY
(
3
)
WrapForJNI
JNI_READY
(
4
)
WrapForJNI
PROFILE_READY
(
5
)
WrapForJNI
RUNNING
(
6
)
WrapForJNI
EXITING
(
3
)
WrapForJNI
EXITED
(
0
)
;
private
final
int
rank
;
private
State
(
int
rank
)
{
this
.
rank
=
rank
;
}
Override
public
boolean
is
(
final
NativeQueue
.
State
other
)
{
return
this
=
=
other
;
}
Override
public
boolean
isAtLeast
(
final
NativeQueue
.
State
other
)
{
if
(
other
instanceof
State
)
{
return
this
.
rank
>
=
(
(
State
)
other
)
.
rank
;
}
return
false
;
}
}
private
static
final
NativeQueue
sNativeQueue
=
new
NativeQueue
(
State
.
INITIAL
State
.
RUNNING
)
;
static
NativeQueue
getNativeQueue
(
)
{
return
sNativeQueue
;
}
public
static
final
State
MIN_STATE
=
State
.
INITIAL
;
public
static
final
State
MAX_STATE
=
State
.
EXITED
;
private
static
final
Runnable
UI_THREAD_CALLBACK
=
new
Runnable
(
)
{
Override
public
void
run
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
long
nextDelay
=
runUiThreadCallback
(
)
;
if
(
nextDelay
>
=
0
)
{
ThreadUtils
.
getUiHandler
(
)
.
postDelayed
(
this
nextDelay
)
;
}
}
}
;
private
static
final
GeckoThread
INSTANCE
=
new
GeckoThread
(
)
;
WrapForJNI
private
static
final
ClassLoader
clsLoader
=
GeckoThread
.
class
.
getClassLoader
(
)
;
WrapForJNI
private
static
MessageQueue
msgQueue
;
private
boolean
mInitialized
;
private
String
[
]
mArgs
;
private
GeckoProfile
mProfile
;
private
String
mExtraArgs
;
private
boolean
mDebugging
;
private
int
mCrashFileDescriptor
=
-
1
;
private
int
mIPCFileDescriptor
=
-
1
;
GeckoThread
(
)
{
setName
(
"
Gecko
"
)
;
}
WrapForJNI
private
static
boolean
isChildProcess
(
)
{
return
INSTANCE
.
mIPCFileDescriptor
!
=
-
1
;
}
private
synchronized
boolean
init
(
final
GeckoProfile
profile
final
String
[
]
args
final
String
extraArgs
final
boolean
debugging
final
int
crashFd
final
int
ipcFd
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
mInitialized
)
{
return
false
;
}
mProfile
=
profile
;
mArgs
=
args
;
mExtraArgs
=
extraArgs
;
mDebugging
=
debugging
;
mCrashFileDescriptor
=
crashFd
;
mIPCFileDescriptor
=
ipcFd
;
mInitialized
=
true
;
notifyAll
(
)
;
return
true
;
}
public
static
boolean
initMainProcess
(
final
GeckoProfile
profile
final
String
extraArgs
final
boolean
debugging
)
{
return
INSTANCE
.
init
(
profile
null
extraArgs
debugging
-
1
-
1
)
;
}
public
static
boolean
initChildProcess
(
final
String
[
]
args
final
int
crashFd
final
int
ipcFd
)
{
return
INSTANCE
.
init
(
null
args
null
false
crashFd
ipcFd
)
;
}
private
static
boolean
canUseProfile
(
final
Context
context
final
GeckoProfile
profile
final
String
profileName
final
File
profileDir
)
{
if
(
profileDir
!
=
null
&
&
!
profileDir
.
isDirectory
(
)
)
{
return
false
;
}
if
(
profile
=
=
null
)
{
return
GeckoProfile
.
shouldUseGuestMode
(
context
)
=
=
GeckoProfile
.
isGuestProfile
(
context
profileName
profileDir
)
;
}
try
{
return
profileDir
=
=
null
?
profileName
.
equals
(
profile
.
getName
(
)
)
:
profile
.
getDir
(
)
.
getCanonicalPath
(
)
.
equals
(
profileDir
.
getCanonicalPath
(
)
)
;
}
catch
(
final
IOException
e
)
{
Log
.
e
(
LOGTAG
"
Cannot
compare
profile
"
+
profileName
)
;
return
false
;
}
}
public
static
boolean
canUseProfile
(
final
String
profileName
final
File
profileDir
)
{
if
(
profileName
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Null
profile
name
"
)
;
}
return
canUseProfile
(
GeckoAppShell
.
getApplicationContext
(
)
getActiveProfile
(
)
profileName
profileDir
)
;
}
public
static
boolean
initMainProcessWithProfile
(
final
String
profileName
final
File
profileDir
)
{
if
(
profileName
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Null
profile
name
"
)
;
}
final
Context
context
=
GeckoAppShell
.
getApplicationContext
(
)
;
final
GeckoProfile
profile
=
getActiveProfile
(
)
;
if
(
!
canUseProfile
(
context
profile
profileName
profileDir
)
)
{
return
false
;
}
if
(
profile
!
=
null
)
{
return
true
;
}
return
initMainProcess
(
GeckoProfile
.
get
(
context
profileName
profileDir
)
null
false
)
;
}
public
static
boolean
launch
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
checkAndSetState
(
State
.
INITIAL
State
.
LAUNCHED
)
)
{
INSTANCE
.
start
(
)
;
return
true
;
}
return
false
;
}
public
static
boolean
isLaunched
(
)
{
return
!
isState
(
State
.
INITIAL
)
;
}
RobocopTarget
public
static
boolean
isRunning
(
)
{
return
isState
(
State
.
RUNNING
)
;
}
private
static
void
loadGeckoLibs
(
final
Context
context
final
String
resourcePath
)
{
GeckoLoader
.
loadSQLiteLibs
(
context
resourcePath
)
;
GeckoLoader
.
loadNSSLibs
(
context
resourcePath
)
;
GeckoLoader
.
loadGeckoLibs
(
context
resourcePath
)
;
}
private
static
void
initGeckoEnvironment
(
)
{
final
Context
context
=
GeckoAppShell
.
getApplicationContext
(
)
;
GeckoLoader
.
loadMozGlue
(
context
)
;
setState
(
State
.
MOZGLUE_READY
)
;
final
Locale
locale
=
Locale
.
getDefault
(
)
;
final
Resources
res
=
context
.
getResources
(
)
;
if
(
locale
.
toString
(
)
.
equalsIgnoreCase
(
"
zh_hk
"
)
)
{
final
Locale
mappedLocale
=
Locale
.
TRADITIONAL_CHINESE
;
Locale
.
setDefault
(
mappedLocale
)
;
Configuration
config
=
res
.
getConfiguration
(
)
;
config
.
locale
=
mappedLocale
;
res
.
updateConfiguration
(
config
null
)
;
}
String
[
]
pluginDirs
=
null
;
try
{
pluginDirs
=
GeckoAppShell
.
getPluginDirectories
(
)
;
}
catch
(
Exception
e
)
{
Log
.
w
(
LOGTAG
"
Caught
exception
getting
plugin
dirs
.
"
e
)
;
}
final
String
resourcePath
=
context
.
getPackageResourcePath
(
)
;
GeckoLoader
.
setupGeckoEnvironment
(
context
pluginDirs
context
.
getFilesDir
(
)
.
getPath
(
)
)
;
try
{
loadGeckoLibs
(
context
resourcePath
)
;
}
catch
(
final
Exception
e
)
{
Log
.
w
(
LOGTAG
"
Clearing
cache
after
load
libs
exception
"
e
)
;
FileUtils
.
delTree
(
GeckoLoader
.
getCacheDir
(
context
)
new
FileUtils
.
FilenameRegexFilter
(
"
.
*
\
\
.
so
(
?
:
\
\
.
crc
)
?
"
)
true
)
;
loadGeckoLibs
(
context
resourcePath
)
;
}
setState
(
State
.
LIBS_READY
)
;
}
private
String
[
]
getMainProcessArgs
(
)
{
final
Context
context
=
GeckoAppShell
.
getApplicationContext
(
)
;
final
ArrayList
<
String
>
args
=
new
ArrayList
<
String
>
(
)
;
args
.
add
(
context
.
getPackageName
(
)
)
;
args
.
add
(
"
-
greomni
"
)
;
args
.
add
(
context
.
getPackageResourcePath
(
)
)
;
final
GeckoProfile
profile
=
getProfile
(
)
;
if
(
profile
.
isCustomProfile
(
)
)
{
args
.
add
(
"
-
profile
"
)
;
args
.
add
(
profile
.
getDir
(
)
.
getAbsolutePath
(
)
)
;
}
else
{
profile
.
getDir
(
)
;
args
.
add
(
"
-
P
"
)
;
args
.
add
(
profile
.
getName
(
)
)
;
}
if
(
mExtraArgs
!
=
null
)
{
final
StringTokenizer
st
=
new
StringTokenizer
(
mExtraArgs
)
;
while
(
st
.
hasMoreTokens
(
)
)
{
final
String
token
=
st
.
nextToken
(
)
;
if
(
"
-
P
"
.
equals
(
token
)
|
|
"
-
profile
"
.
equals
(
token
)
)
{
if
(
st
.
hasMoreTokens
(
)
)
{
st
.
nextToken
(
)
;
}
continue
;
}
args
.
add
(
token
)
;
}
}
final
GeckoAppShell
.
GeckoInterface
gi
=
GeckoAppShell
.
getGeckoInterface
(
)
;
if
(
gi
=
=
null
|
|
!
gi
.
isOfficial
(
)
)
{
Log
.
w
(
LOGTAG
"
STARTUP
PERFORMANCE
WARNING
:
un
-
official
build
:
purging
the
"
+
"
startup
(
JavaScript
)
caches
.
"
)
;
args
.
add
(
"
-
purgecaches
"
)
;
}
return
args
.
toArray
(
new
String
[
args
.
size
(
)
]
)
;
}
public
static
GeckoProfile
getActiveProfile
(
)
{
return
INSTANCE
.
getProfile
(
)
;
}
public
synchronized
GeckoProfile
getProfile
(
)
{
if
(
!
mInitialized
)
{
return
null
;
}
if
(
isChildProcess
(
)
)
{
throw
new
UnsupportedOperationException
(
"
Cannot
access
profile
from
child
process
"
)
;
}
if
(
mProfile
=
=
null
)
{
final
Context
context
=
GeckoAppShell
.
getApplicationContext
(
)
;
mProfile
=
GeckoProfile
.
initFromArgs
(
context
mExtraArgs
)
;
}
return
mProfile
;
}
Override
public
void
run
(
)
{
Log
.
i
(
LOGTAG
"
preparing
to
run
Gecko
"
)
;
Looper
.
prepare
(
)
;
GeckoThread
.
msgQueue
=
Looper
.
myQueue
(
)
;
ThreadUtils
.
sGeckoThread
=
this
;
ThreadUtils
.
sGeckoHandler
=
new
Handler
(
)
;
final
MessageQueue
.
IdleHandler
idleHandler
=
new
MessageQueue
.
IdleHandler
(
)
{
Override
public
boolean
queueIdle
(
)
{
final
Handler
geckoHandler
=
ThreadUtils
.
sGeckoHandler
;
Message
idleMsg
=
Message
.
obtain
(
geckoHandler
)
;
idleMsg
.
obj
=
geckoHandler
;
geckoHandler
.
sendMessageAtFrontOfQueue
(
idleMsg
)
;
return
true
;
}
}
;
Looper
.
myQueue
(
)
.
addIdleHandler
(
idleHandler
)
;
initGeckoEnvironment
(
)
;
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
registerUiThread
(
)
;
}
}
)
;
synchronized
(
this
)
{
while
(
!
mInitialized
)
{
try
{
wait
(
)
;
}
catch
(
final
InterruptedException
e
)
{
}
}
}
final
String
[
]
args
=
isChildProcess
(
)
?
mArgs
:
getMainProcessArgs
(
)
;
if
(
mDebugging
)
{
try
{
Thread
.
sleep
(
5
*
1000
)
;
}
catch
(
final
InterruptedException
e
)
{
}
}
Log
.
w
(
LOGTAG
"
zerdatime
"
+
SystemClock
.
uptimeMillis
(
)
+
"
-
runGecko
"
)
;
final
GeckoAppShell
.
GeckoInterface
gi
=
GeckoAppShell
.
getGeckoInterface
(
)
;
if
(
gi
=
=
null
|
|
!
gi
.
isOfficial
(
)
)
{
Log
.
i
(
LOGTAG
"
RunGecko
-
args
=
"
+
TextUtils
.
join
(
"
"
args
)
)
;
}
GeckoLoader
.
nativeRun
(
args
mCrashFileDescriptor
mIPCFileDescriptor
)
;
setState
(
State
.
EXITED
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
Gecko
:
Exited
"
null
)
;
Looper
.
myQueue
(
)
.
removeIdleHandler
(
idleHandler
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
static
boolean
pumpMessageLoop
(
final
Message
msg
)
{
final
Handler
geckoHandler
=
ThreadUtils
.
sGeckoHandler
;
if
(
msg
.
obj
=
=
geckoHandler
&
&
msg
.
getTarget
(
)
=
=
geckoHandler
)
{
return
false
;
}
if
(
msg
.
getTarget
(
)
=
=
null
)
{
Looper
.
myLooper
(
)
.
quit
(
)
;
}
else
{
msg
.
getTarget
(
)
.
dispatchMessage
(
msg
)
;
}
return
true
;
}
public
static
boolean
isState
(
final
State
state
)
{
return
sNativeQueue
.
getState
(
)
.
is
(
state
)
;
}
public
static
boolean
isStateAtLeast
(
final
State
state
)
{
return
sNativeQueue
.
getState
(
)
.
isAtLeast
(
state
)
;
}
public
static
boolean
isStateAtMost
(
final
State
state
)
{
return
state
.
isAtLeast
(
sNativeQueue
.
getState
(
)
)
;
}
public
static
boolean
isStateBetween
(
final
State
minState
final
State
maxState
)
{
return
isStateAtLeast
(
minState
)
&
&
isStateAtMost
(
maxState
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
static
void
setState
(
final
State
newState
)
{
sNativeQueue
.
setState
(
newState
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
private
static
boolean
checkAndSetState
(
final
State
expectedState
final
State
newState
)
{
return
sNativeQueue
.
checkAndSetState
(
expectedState
newState
)
;
}
WrapForJNI
(
stubName
=
"
SpeculativeConnect
"
)
private
static
native
void
speculativeConnectNative
(
String
uri
)
;
public
static
void
speculativeConnect
(
final
String
uri
)
{
queueNativeCallUntil
(
State
.
PROFILE_READY
GeckoThread
.
class
"
speculativeConnectNative
"
uri
)
;
}
WrapForJNI
RobocopTarget
public
static
native
void
waitOnGecko
(
)
;
WrapForJNI
(
stubName
=
"
OnPause
"
dispatchTo
=
"
gecko
"
)
private
static
native
void
nativeOnPause
(
)
;
public
static
void
onPause
(
)
{
if
(
isStateAtLeast
(
State
.
PROFILE_READY
)
)
{
nativeOnPause
(
)
;
}
else
{
queueNativeCallUntil
(
State
.
PROFILE_READY
GeckoThread
.
class
"
nativeOnPause
"
)
;
}
}
WrapForJNI
(
stubName
=
"
OnResume
"
dispatchTo
=
"
gecko
"
)
private
static
native
void
nativeOnResume
(
)
;
public
static
void
onResume
(
)
{
if
(
isStateAtLeast
(
State
.
PROFILE_READY
)
)
{
nativeOnResume
(
)
;
}
else
{
queueNativeCallUntil
(
State
.
PROFILE_READY
GeckoThread
.
class
"
nativeOnResume
"
)
;
}
}
WrapForJNI
(
stubName
=
"
CreateServices
"
dispatchTo
=
"
gecko
"
)
private
static
native
void
nativeCreateServices
(
String
category
String
data
)
;
public
static
void
createServices
(
final
String
category
final
String
data
)
{
if
(
isStateAtLeast
(
State
.
PROFILE_READY
)
)
{
nativeCreateServices
(
category
data
)
;
}
else
{
queueNativeCallUntil
(
State
.
PROFILE_READY
GeckoThread
.
class
"
nativeCreateServices
"
String
.
class
category
String
.
class
data
)
;
}
}
static
native
void
registerUiThread
(
)
;
WrapForJNI
(
calledFrom
=
"
ui
"
)
static
native
long
runUiThreadCallback
(
)
;
WrapForJNI
private
static
void
requestUiThreadCallback
(
long
delay
)
{
ThreadUtils
.
getUiHandler
(
)
.
postDelayed
(
UI_THREAD_CALLBACK
delay
)
;
}
public
static
void
queueNativeCall
(
final
Class
<
?
>
cls
final
String
methodName
final
Object
.
.
.
args
)
{
sNativeQueue
.
queueUntilReady
(
cls
methodName
args
)
;
}
public
static
void
queueNativeCall
(
final
Object
obj
final
String
methodName
final
Object
.
.
.
args
)
{
sNativeQueue
.
queueUntilReady
(
obj
methodName
args
)
;
}
public
static
void
queueNativeCallUntil
(
final
State
state
final
Object
obj
final
String
methodName
final
Object
.
.
.
args
)
{
sNativeQueue
.
queueUntil
(
state
obj
methodName
args
)
;
}
public
static
void
queueNativeCallUntil
(
final
State
state
final
Class
<
?
>
cls
final
String
methodName
final
Object
.
.
.
args
)
{
sNativeQueue
.
queueUntil
(
state
cls
methodName
args
)
;
}
}
