package
org
.
mozilla
.
geckoview
.
test
.
rdp
;
import
android
.
support
.
annotation
.
NonNull
;
import
org
.
json
.
JSONArray
;
import
org
.
json
.
JSONObject
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Set
;
public
final
class
Promises
extends
Actor
{
private
final
ReplyParser
<
Promise
[
]
>
PROMISE_LIST_PARSER
=
new
ReplyParser
<
Promise
[
]
>
(
)
{
Override
public
boolean
canParse
(
NonNull
JSONObject
packet
)
{
return
packet
.
has
(
"
promises
"
)
;
}
Override
public
NonNull
Promise
[
]
parse
(
NonNull
JSONObject
packet
)
{
return
getPromisesFromArray
(
packet
.
optJSONArray
(
"
promises
"
)
true
)
;
}
}
;
private
final
Set
<
Promise
>
mPromises
=
new
HashSet
<
>
(
)
;
Promises
(
final
RDPConnection
connection
final
String
name
)
{
super
(
connection
name
)
;
attach
(
)
;
}
private
void
attach
(
)
{
sendPacket
(
"
{
\
"
type
\
"
:
\
"
attach
\
"
}
"
JSON_PARSER
)
.
get
(
)
;
}
public
void
detach
(
)
{
for
(
final
Promise
promise
:
mPromises
)
{
promise
.
release
(
)
;
}
sendPacket
(
"
{
\
"
type
\
"
:
\
"
detach
\
"
}
"
JSON_PARSER
)
.
get
(
)
;
}
Promise
[
]
getPromisesFromArray
(
final
NonNull
JSONArray
array
final
boolean
canCreate
)
{
final
Promise
[
]
promises
=
new
Promise
[
array
.
length
(
)
]
;
for
(
int
i
=
0
;
i
<
promises
.
length
;
i
+
+
)
{
final
JSONObject
grip
=
array
.
optJSONObject
(
i
)
;
final
Promise
promise
=
(
Promise
)
connection
.
getActor
(
grip
)
;
if
(
promise
!
=
null
)
{
promise
.
setPromiseState
(
grip
)
;
promises
[
i
]
=
promise
;
}
else
if
(
canCreate
)
{
promises
[
i
]
=
new
Promise
(
connection
grip
)
;
}
}
return
promises
;
}
public
NonNull
Promise
[
]
listPromises
(
)
{
final
Promise
[
]
promises
=
sendPacket
(
"
{
\
"
type
\
"
:
\
"
listPromises
\
"
}
"
PROMISE_LIST_PARSER
)
.
get
(
)
;
mPromises
.
addAll
(
Arrays
.
asList
(
promises
)
)
;
return
promises
;
}
Override
protected
void
onPacket
(
final
NonNull
JSONObject
packet
)
{
final
String
type
=
packet
.
optString
(
"
type
"
null
)
;
if
(
"
new
-
promises
"
.
equals
(
type
)
)
{
}
else
if
(
"
promises
-
settled
"
.
equals
(
type
)
)
{
getPromisesFromArray
(
packet
.
optJSONArray
(
"
data
"
)
false
)
;
}
else
{
super
.
onPacket
(
packet
)
;
}
}
}
