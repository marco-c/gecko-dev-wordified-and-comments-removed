package
org
.
mozilla
.
geckoview
.
test
.
rdp
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
org
.
json
.
JSONObject
;
public
final
class
Promise
extends
Grip
{
private
JSONObject
mGrip
;
private
String
mState
;
private
Object
mValue
;
private
Object
mReason
;
Promise
(
final
NonNull
RDPConnection
connection
final
NonNull
JSONObject
grip
)
{
super
(
connection
grip
)
;
setPromiseState
(
grip
)
;
}
void
setPromiseState
(
final
NonNull
JSONObject
grip
)
{
mGrip
=
grip
;
final
JSONObject
state
=
grip
.
optJSONObject
(
"
promiseState
"
)
;
mState
=
state
.
optString
(
"
state
"
)
;
if
(
isFulfilled
(
)
)
{
mValue
=
Grip
.
unpack
(
connection
state
.
opt
(
"
value
"
)
)
;
}
else
if
(
isRejected
(
)
)
{
mReason
=
Grip
.
unpack
(
connection
state
.
opt
(
"
reason
"
)
)
;
}
}
public
boolean
isPending
(
)
{
return
"
pending
"
.
equals
(
mState
)
;
}
public
boolean
isFulfilled
(
)
{
return
"
fulfilled
"
.
equals
(
mState
)
;
}
public
Nullable
Object
getValue
(
)
{
return
mValue
;
}
public
boolean
isRejected
(
)
{
return
"
rejected
"
.
equals
(
mState
)
;
}
public
Nullable
Object
getReason
(
)
{
return
mReason
;
}
public
Nullable
Object
getProperty
(
final
NonNull
String
name
)
{
final
JSONObject
preview
=
mGrip
.
optJSONObject
(
"
preview
"
)
;
if
(
preview
=
=
null
)
{
return
null
;
}
final
JSONObject
ownProperties
=
preview
.
optJSONObject
(
"
ownProperties
"
)
;
if
(
ownProperties
=
=
null
)
{
return
null
;
}
final
JSONObject
prop
=
ownProperties
.
optJSONObject
(
name
)
;
if
(
prop
=
=
null
)
{
return
null
;
}
return
Grip
.
unpack
(
connection
prop
.
opt
(
"
value
"
)
)
;
}
Override
public
String
toString
(
)
{
return
"
[
Promise
(
"
+
mState
+
"
)
]
"
+
(
isFulfilled
(
)
?
"
(
"
+
mValue
+
'
)
'
:
"
"
)
+
(
isRejected
(
)
?
"
(
"
+
mReason
+
'
)
'
:
"
"
)
;
}
}
