package
org
.
mozilla
.
geckoview
.
test
import
android
.
content
.
Context
import
androidx
.
test
.
ext
.
junit
.
rules
.
ActivityScenarioRule
import
androidx
.
test
.
ext
.
junit
.
runners
.
AndroidJUnit4
import
androidx
.
test
.
filters
.
LargeTest
import
org
.
junit
.
After
import
org
.
junit
.
Assert
.
assertTrue
import
org
.
junit
.
Before
import
org
.
junit
.
Rule
import
org
.
junit
.
Test
import
org
.
junit
.
rules
.
RuleChain
import
org
.
junit
.
runner
.
RunWith
import
org
.
mozilla
.
geckoview
.
Autofill
import
org
.
mozilla
.
geckoview
.
GeckoSession
import
org
.
mozilla
.
geckoview
.
GeckoSession
.
PrintDelegate
import
org
.
mozilla
.
geckoview
.
GeckoView
.
ActivityContextDelegate
import
org
.
mozilla
.
geckoview
.
test
.
rule
.
GeckoSessionTestRule
.
AssertCalled
import
org
.
mozilla
.
geckoview
.
test
.
rule
.
GeckoSessionTestRule
.
NullDelegate
import
kotlin
.
math
.
roundToInt
RunWith
(
AndroidJUnit4
:
:
class
)
LargeTest
class
PrintDelegateTest
:
BaseSessionTest
(
)
{
private
val
activityRule
=
ActivityScenarioRule
(
GeckoViewTestActivity
:
:
class
.
java
)
private
var
deviceHeight
=
0
private
var
deviceWidth
=
0
private
var
scaledHeight
=
0
private
var
scaledWidth
=
12
get
:
Rule
override
val
rules
:
RuleChain
=
RuleChain
.
outerRule
(
activityRule
)
.
around
(
sessionRule
)
Before
fun
setup
(
)
{
activityRule
.
scenario
.
onActivity
{
class
PrintTestActivityDelegate
:
ActivityContextDelegate
{
override
fun
getActivityContext
(
)
:
Context
{
return
it
}
}
it
.
view
.
setSession
(
mainSession
)
it
.
view
.
activityContextDelegate
=
PrintTestActivityDelegate
(
)
deviceHeight
=
it
.
resources
.
displayMetrics
.
heightPixels
deviceWidth
=
it
.
resources
.
displayMetrics
.
widthPixels
scaledHeight
=
(
scaledWidth
*
(
deviceHeight
/
deviceWidth
.
toDouble
(
)
)
)
.
roundToInt
(
)
}
}
After
fun
cleanup
(
)
{
activityRule
.
scenario
.
onActivity
{
it
.
view
.
releaseSession
(
)
}
}
NullDelegate
(
Autofill
.
Delegate
:
:
class
)
Test
fun
printDelegateTest
(
)
{
activityRule
.
scenario
.
onActivity
{
var
delegateCalled
=
0
sessionRule
.
delegateUntilTestEnd
(
object
:
PrintDelegate
{
AssertCalled
(
count
=
1
)
override
fun
onPrint
(
session
:
GeckoSession
)
{
delegateCalled
+
+
}
}
)
mainSession
.
loadTestPath
(
COLOR_ORANGE_BACKGROUND_HTML_PATH
)
mainSession
.
waitForPageStop
(
)
mainSession
.
printPageContent
(
)
assertTrue
(
"
Android
print
delegate
called
once
.
"
delegateCalled
=
=
1
)
}
}
}
