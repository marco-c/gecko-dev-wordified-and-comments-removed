package
org
.
mozilla
.
geckoview
.
test
import
android
.
os
.
Handler
import
android
.
os
.
Looper
import
android
.
provider
.
Settings
import
android
.
text
.
format
.
DateFormat
import
androidx
.
test
.
ext
.
junit
.
rules
.
ActivityScenarioRule
import
androidx
.
test
.
ext
.
junit
.
runners
.
AndroidJUnit4
import
androidx
.
test
.
filters
.
MediumTest
import
androidx
.
test
.
platform
.
app
.
InstrumentationRegistry
import
org
.
hamcrest
.
Matchers
.
*
import
org
.
junit
.
After
import
org
.
junit
.
Before
import
org
.
junit
.
Rule
import
org
.
junit
.
Test
import
org
.
junit
.
rules
.
RuleChain
import
org
.
junit
.
runner
.
RunWith
import
org
.
mozilla
.
gecko
.
GeckoAppShell
import
org
.
mozilla
.
geckoview
.
Autofill
import
org
.
mozilla
.
geckoview
.
GeckoSession
import
org
.
mozilla
.
geckoview
.
test
.
rule
.
GeckoSessionTestRule
RunWith
(
AndroidJUnit4
:
:
class
)
MediumTest
class
GeckoAppShellTest
:
BaseSessionTest
(
)
{
private
val
activityRule
=
ActivityScenarioRule
(
GeckoViewTestActivity
:
:
class
.
java
)
private
val
context
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
targetContext
private
var
prior24HourSetting
=
true
get
:
Rule
override
val
rules
:
RuleChain
=
RuleChain
.
outerRule
(
activityRule
)
.
around
(
sessionRule
)
Before
fun
setup
(
)
{
activityRule
.
scenario
.
onActivity
{
prior24HourSetting
=
DateFormat
.
is24HourFormat
(
context
)
it
.
view
.
setSession
(
sessionRule
.
session
)
}
}
After
fun
cleanup
(
)
{
activityRule
.
scenario
.
onActivity
{
setAndroid24HourTimeFormat
(
prior24HourSetting
)
it
.
view
.
releaseSession
(
)
}
}
private
fun
setAndroid24HourTimeFormat
(
timeFormat
:
Boolean
)
{
val
setting
=
if
(
timeFormat
)
"
24
"
else
"
12
"
Settings
.
System
.
putString
(
context
.
contentResolver
Settings
.
System
.
TIME_12_24
setting
)
}
private
fun
goHomeAndReturnWithPageLoad
(
)
{
Handler
(
Looper
.
getMainLooper
(
)
)
.
postDelayed
(
{
sessionRule
.
requestActivityToForeground
(
context
)
mainSession
.
loadTestPath
(
HELLO_HTML_PATH
)
mainSession
.
waitForPageStop
(
)
}
1500
)
sessionRule
.
simulatePressHome
(
context
)
}
GeckoSessionTestRule
.
NullDelegate
(
Autofill
.
Delegate
:
:
class
)
Test
fun
testChange24HourClockSettings
(
)
{
activityRule
.
scenario
.
onActivity
{
var
onLoadRequestCount
=
0
setAndroid24HourTimeFormat
(
true
)
goHomeAndReturnWithPageLoad
(
)
mainSession
.
waitUntilCalled
(
object
:
GeckoSession
.
ContentDelegate
GeckoSession
.
NavigationDelegate
{
GeckoSessionTestRule
.
AssertCalled
(
count
=
2
)
override
fun
onLocationChange
(
session
:
GeckoSession
url
:
String
?
perms
:
MutableList
<
GeckoSession
.
PermissionDelegate
.
ContentPermission
>
hasUserGesture
:
Boolean
)
{
if
(
onLoadRequestCount
=
=
0
)
{
assertThat
(
"
Should
use
a
24
hour
clock
.
"
GeckoAppShell
.
getIs24HourFormat
(
)
equalTo
(
true
)
)
onLoadRequestCount
+
+
setAndroid24HourTimeFormat
(
false
)
goHomeAndReturnWithPageLoad
(
)
}
else
{
assertThat
(
"
Should
use
a
12
hour
clock
.
"
GeckoAppShell
.
getIs24HourFormat
(
)
equalTo
(
false
)
)
}
}
}
)
}
}
}
