"
use
strict
"
;
const
{
E10SUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
sys
.
mjs
"
)
;
const
{
Preferences
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
Preferences
.
sys
.
mjs
"
)
;
Cu
.
importGlobalProperties
(
[
"
PathUtils
"
]
)
;
this
.
test
=
class
extends
ExtensionAPI
{
onStartup
(
)
{
ChromeUtils
.
registerWindowActor
(
"
TestSupport
"
{
child
:
{
moduleURI
:
"
resource
:
/
/
android
/
assets
/
web_extensions
/
test
-
support
/
TestSupportChild
.
jsm
"
}
allFrames
:
true
}
)
;
ChromeUtils
.
registerProcessActor
(
"
TestSupportProcess
"
{
child
:
{
moduleURI
:
"
resource
:
/
/
android
/
assets
/
web_extensions
/
test
-
support
/
TestSupportProcessChild
.
jsm
"
}
}
)
;
}
onShutdown
(
isAppShutdown
)
{
if
(
isAppShutdown
)
{
return
;
}
ChromeUtils
.
unregisterWindowActor
(
"
TestSupport
"
)
;
ChromeUtils
.
unregisterProcessActor
(
"
TestSupportProcess
"
)
;
}
getAPI
(
context
)
{
function
windowActor
(
tabId
)
{
const
tab
=
context
.
extension
.
tabManager
.
get
(
tabId
)
;
const
{
browsingContext
}
=
tab
.
browser
;
return
browsingContext
.
currentWindowGlobal
.
getActor
(
"
TestSupport
"
)
;
}
return
{
test
:
{
async
setPrefs
(
oldPrefs
newPrefs
)
{
Object
.
assign
(
oldPrefs
.
.
.
Object
.
keys
(
newPrefs
)
.
filter
(
key
=
>
!
(
key
in
oldPrefs
)
)
.
map
(
key
=
>
(
{
[
key
]
:
Preferences
.
get
(
key
null
)
}
)
)
)
;
Preferences
.
set
(
newPrefs
)
;
return
oldPrefs
;
}
async
restorePrefs
(
oldPrefs
)
{
for
(
const
[
name
value
]
of
Object
.
entries
(
oldPrefs
)
)
{
if
(
value
=
=
=
null
)
{
Preferences
.
reset
(
name
)
;
}
else
{
Preferences
.
set
(
name
value
)
;
}
}
}
async
getPrefs
(
prefs
)
{
return
Preferences
.
get
(
prefs
)
;
}
async
getLinkColor
(
tabId
selector
)
{
return
windowActor
(
tabId
)
.
sendQuery
(
"
GetLinkColor
"
{
selector
}
)
;
}
async
getRequestedLocales
(
)
{
return
Services
.
locale
.
requestedLocales
;
}
async
getPidForTab
(
tabId
)
{
const
tab
=
context
.
extension
.
tabManager
.
get
(
tabId
)
;
const
pids
=
E10SUtils
.
getBrowserPids
(
tab
.
browser
)
;
return
pids
[
0
]
;
}
async
getAllBrowserPids
(
)
{
const
pids
=
[
]
;
const
processes
=
ChromeUtils
.
getAllDOMProcesses
(
)
;
for
(
const
process
of
processes
)
{
if
(
process
.
remoteType
&
&
process
.
remoteType
.
startsWith
(
"
web
"
)
)
{
pids
.
push
(
process
.
osPid
)
;
}
}
return
pids
;
}
async
killContentProcess
(
pid
)
{
const
procs
=
ChromeUtils
.
getAllDOMProcesses
(
)
;
for
(
const
proc
of
procs
)
{
if
(
pid
=
=
=
proc
.
osPid
)
{
proc
.
getActor
(
"
TestSupportProcess
"
)
.
sendAsyncMessage
(
"
KillContentProcess
"
)
;
}
}
}
async
addHistogram
(
id
value
)
{
return
Services
.
telemetry
.
getHistogramById
(
id
)
.
add
(
value
)
;
}
removeAllCertOverrides
(
)
{
const
overrideService
=
Cc
[
"
mozilla
.
org
/
security
/
certoverride
;
1
"
]
.
getService
(
Ci
.
nsICertOverrideService
)
;
overrideService
.
clearAllOverrides
(
)
;
}
async
setScalar
(
id
value
)
{
return
Services
.
telemetry
.
scalarSet
(
id
value
)
;
}
async
setResolutionAndScaleTo
(
tabId
resolution
)
{
return
windowActor
(
tabId
)
.
sendQuery
(
"
SetResolutionAndScaleTo
"
{
resolution
}
)
;
}
async
getActive
(
tabId
)
{
const
tab
=
context
.
extension
.
tabManager
.
get
(
tabId
)
;
return
tab
.
browser
.
docShellIsActive
;
}
async
getProfilePath
(
)
{
return
PathUtils
.
profileDir
;
}
async
flushApzRepaints
(
tabId
)
{
await
windowActor
(
tabId
)
.
sendQuery
(
"
FlushApzRepaints
"
)
;
}
async
promiseAllPaintsDone
(
tabId
)
{
await
windowActor
(
tabId
)
.
sendQuery
(
"
PromiseAllPaintsDone
"
)
;
}
async
usingGpuProcess
(
)
{
const
gfxInfo
=
Cc
[
"
mozilla
.
org
/
gfx
/
info
;
1
"
]
.
getService
(
Ci
.
nsIGfxInfo
)
;
return
gfxInfo
.
usingGPUProcess
;
}
async
killGpuProcess
(
)
{
const
gfxInfo
=
Cc
[
"
mozilla
.
org
/
gfx
/
info
;
1
"
]
.
getService
(
Ci
.
nsIGfxInfo
)
;
return
gfxInfo
.
killGPUProcessForTests
(
)
;
}
async
crashGpuProcess
(
)
{
const
gfxInfo
=
Cc
[
"
mozilla
.
org
/
gfx
/
info
;
1
"
]
.
getService
(
Ci
.
nsIGfxInfo
)
;
return
gfxInfo
.
crashGPUProcessForTests
(
)
;
}
async
clearHSTSState
(
)
{
const
sss
=
Cc
[
"
mozilla
.
org
/
ssservice
;
1
"
]
.
getService
(
Ci
.
nsISiteSecurityService
)
;
return
sss
.
clearAll
(
)
;
}
}
}
;
}
}
;
