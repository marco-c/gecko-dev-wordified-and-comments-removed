"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
AppUiTestDelegate
"
]
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventDispatcher
:
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
mobileWindowTracker
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewWebExtension
.
jsm
"
GeckoViewTabBridge
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewTab
.
jsm
"
}
)
;
const
TEST_SUPPORT_EXTENSION_ID
=
"
test
-
runner
-
support
tests
.
mozilla
.
org
"
;
class
Delegate
{
_sendMessageToApp
(
data
)
{
const
message
=
{
type
:
"
GeckoView
:
WebExtension
:
Message
"
sender
:
{
envType
:
"
addon_child
"
url
:
"
test
-
runner
-
support
:
/
/
/
"
extensionId
:
TEST_SUPPORT_EXTENSION_ID
}
data
nativeApp
:
"
test
-
runner
-
support
"
}
;
return
EventDispatcher
.
instance
.
sendRequestForResult
(
message
)
;
}
clickPageAction
(
window
extensionId
)
{
return
this
.
_sendMessageToApp
(
{
type
:
"
clickPageAction
"
extensionId
}
)
;
}
clickBrowserAction
(
window
extensionId
)
{
return
this
.
_sendMessageToApp
(
{
type
:
"
clickBrowserAction
"
extensionId
}
)
;
}
closePageAction
(
window
extensionId
)
{
return
this
.
_sendMessageToApp
(
{
type
:
"
closePageAction
"
extensionId
}
)
;
}
closeBrowserAction
(
window
extensionId
)
{
return
this
.
_sendMessageToApp
(
{
type
:
"
closeBrowserAction
"
extensionId
}
)
;
}
awaitExtensionPanel
(
window
extensionId
)
{
return
this
.
_sendMessageToApp
(
{
type
:
"
awaitExtensionPanel
"
extensionId
}
)
;
}
async
removeTab
(
tab
)
{
const
window
=
tab
.
browser
.
ownerGlobal
;
await
GeckoViewTabBridge
.
closeTab
(
{
window
extensionId
:
TEST_SUPPORT_EXTENSION_ID
}
)
;
}
async
openNewForegroundTab
(
window
url
waitForLoad
=
true
)
{
const
tab
=
await
GeckoViewTabBridge
.
createNewTab
(
{
extensionId
:
TEST_SUPPORT_EXTENSION_ID
createProperties
:
{
url
active
:
true
}
}
)
;
const
{
browser
}
=
tab
;
const
triggeringPrincipal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
Services
.
io
.
newURI
(
url
)
{
}
)
;
browser
.
loadURI
(
url
{
flags
:
Ci
.
nsIWebNavigation
.
LOAD_FLAGS_NONE
triggeringPrincipal
}
)
;
const
newWindow
=
browser
.
ownerGlobal
;
mobileWindowTracker
.
setTabActive
(
newWindow
true
)
;
if
(
!
waitForLoad
)
{
return
tab
;
}
return
new
Promise
(
resolve
=
>
{
const
listener
=
ev
=
>
{
const
{
browsingContext
internalURL
}
=
ev
.
detail
;
if
(
!
internalURL
|
|
internalURL
=
=
"
about
:
blank
"
)
{
return
;
}
if
(
browsingContext
!
=
=
browsingContext
.
top
)
{
return
;
}
resolve
(
tab
)
;
browser
.
removeEventListener
(
"
AppTestDelegate
:
load
"
listener
true
)
;
}
;
browser
.
addEventListener
(
"
AppTestDelegate
:
load
"
listener
true
)
;
}
)
;
}
}
var
AppUiTestDelegate
=
new
Delegate
(
)
;
