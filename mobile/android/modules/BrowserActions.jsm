"
use
strict
"
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
this
.
EXPORTED_SYMBOLS
=
[
"
BrowserActions
"
]
;
var
BrowserActions
=
{
_browserActions
:
{
}
_initialized
:
false
_maybeRegisterListeners
(
)
{
if
(
!
this
.
_initialized
&
&
Object
.
keys
(
this
.
_browserActions
)
.
length
)
{
this
.
_initialized
=
true
;
EventDispatcher
.
instance
.
registerListener
(
this
"
Menu
:
Clicked
"
)
;
}
}
_maybeUnregisterListeners
:
function
(
)
{
if
(
this
.
_initialized
&
&
!
Object
.
keys
(
this
.
_browserActions
)
.
length
)
{
this
.
_initialized
=
false
;
EventDispatcher
.
instance
.
unregisterListener
(
this
"
Menu
:
Clicked
"
)
;
}
}
onEvent
(
event
data
)
{
if
(
event
!
=
=
"
Menu
:
Clicked
"
)
{
throw
new
Error
(
Expected
"
Menu
:
Clicked
"
event
-
received
"
{
event
}
"
instead
)
;
}
let
browserAction
=
this
.
_browserActions
[
data
.
item
]
;
if
(
!
browserAction
)
{
throw
new
Error
(
No
browser
action
found
with
id
{
data
.
item
}
)
;
}
browserAction
.
onClicked
(
)
;
}
register
(
browserAction
)
{
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Menu
:
Add
"
id
:
browserAction
.
id
name
:
browserAction
.
name
}
)
;
this
.
_browserActions
[
browserAction
.
id
]
=
browserAction
;
this
.
_maybeRegisterListeners
(
)
;
}
isShown
:
function
(
id
)
{
return
!
!
this
.
_browserActions
[
id
]
;
}
synthesizeClick
:
function
(
id
)
{
let
browserAction
=
this
.
_browserActions
[
id
]
;
if
(
!
browserAction
)
{
throw
new
Error
(
No
browser
action
found
with
id
{
id
}
)
;
}
browserAction
.
onClicked
(
)
;
}
unregister
(
id
)
{
let
browserAction
=
this
.
_browserActions
[
id
]
;
if
(
!
browserAction
)
{
throw
new
Error
(
No
BrowserAction
with
ID
{
id
}
was
found
)
;
}
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Menu
:
Remove
"
id
}
)
;
delete
this
.
_browserActions
[
id
]
;
this
.
_maybeUnregisterListeners
(
)
;
}
}
