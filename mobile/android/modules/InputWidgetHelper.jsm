"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
InputWidgetHelper
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Prompt
:
"
resource
:
/
/
gre
/
modules
/
Prompt
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
var
InputWidgetHelper
=
{
_uiBusy
:
false
strings
:
function
(
)
{
if
(
!
this
.
_strings
)
{
this
.
_strings
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
browser
.
properties
"
)
;
}
return
this
.
_strings
;
}
handleEvent
:
function
(
aEvent
)
{
this
.
handleClick
(
aEvent
.
composedTarget
)
;
}
handleClick
:
function
(
aTarget
)
{
if
(
this
.
_uiBusy
|
|
!
this
.
hasInputWidget
(
aTarget
)
|
|
this
.
_isDisabledElement
(
aTarget
)
)
{
return
;
}
this
.
_uiBusy
=
true
;
this
.
show
(
aTarget
)
;
this
.
_uiBusy
=
false
;
}
show
:
function
(
aElement
)
{
let
type
=
aElement
.
type
;
new
Prompt
(
{
window
:
aElement
.
ownerGlobal
title
:
this
.
strings
(
)
.
GetStringFromName
(
"
inputWidgetHelper
.
"
+
type
)
buttons
:
[
this
.
strings
(
)
.
GetStringFromName
(
"
inputWidgetHelper
.
set
"
)
this
.
strings
(
)
.
GetStringFromName
(
"
inputWidgetHelper
.
clear
"
)
this
.
strings
(
)
.
GetStringFromName
(
"
inputWidgetHelper
.
cancel
"
)
]
}
)
.
addDatePicker
(
{
value
:
aElement
.
value
type
:
type
step
:
this
.
_getInputTimeStep
(
aElement
)
min
:
aElement
.
min
max
:
aElement
.
max
}
)
.
show
(
data
=
>
{
let
changed
=
false
;
if
(
data
.
button
=
=
-
1
)
{
return
;
}
if
(
data
.
button
=
=
1
)
{
if
(
aElement
.
value
!
=
"
"
)
{
aElement
.
value
=
"
"
;
changed
=
true
;
}
}
else
if
(
data
.
button
=
=
0
)
{
if
(
aElement
.
value
!
=
data
[
type
]
)
{
aElement
.
value
=
data
[
type
+
"
0
"
]
;
changed
=
true
;
}
}
if
(
changed
)
{
this
.
fireOnChange
(
aElement
)
;
}
}
)
;
}
hasInputWidget
:
function
(
aElement
)
{
let
win
=
aElement
.
ownerGlobal
;
if
(
!
(
aElement
instanceof
win
.
HTMLInputElement
)
)
{
return
false
;
}
let
type
=
aElement
.
type
;
if
(
type
=
=
"
date
"
|
|
type
=
=
"
datetime
-
local
"
|
|
type
=
=
"
week
"
|
|
type
=
=
"
month
"
|
|
type
=
=
"
time
"
)
{
return
true
;
}
return
false
;
}
fireOnChange
:
function
(
aElement
)
{
let
win
=
aElement
.
ownerGlobal
;
win
.
setTimeout
(
function
(
)
{
aElement
.
dispatchEvent
(
new
win
.
Event
(
"
input
"
{
bubbles
:
true
}
)
)
;
aElement
.
dispatchEvent
(
new
win
.
Event
(
"
change
"
{
bubbles
:
true
}
)
)
;
}
0
)
;
}
_isDisabledElement
:
function
(
aElement
)
{
let
currentElement
=
aElement
;
while
(
currentElement
)
{
if
(
currentElement
.
disabled
)
{
return
true
;
}
currentElement
=
currentElement
.
parentElement
;
}
return
false
;
}
_getInputTimeStep
:
function
(
aElement
)
{
try
{
let
tmpInput
=
aElement
.
ownerDocument
.
createElement
(
"
input
"
)
;
tmpInput
.
type
=
aElement
.
type
;
tmpInput
.
step
=
aElement
.
step
;
tmpInput
.
stepUp
(
)
;
return
tmpInput
.
valueAsNumber
|
|
0
;
}
catch
(
e
)
{
return
0
;
}
}
}
;
