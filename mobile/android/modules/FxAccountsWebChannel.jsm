this
.
EXPORTED_SYMBOLS
=
[
"
EnsureFxAccountsWebChannel
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Accounts
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Notifications
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Prompt
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
WebChannel
.
jsm
"
)
;
const
log
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AndroidLog
.
jsm
"
{
}
)
.
AndroidLog
.
bind
(
"
FxAccounts
"
)
;
const
WEBCHANNEL_ID
=
"
account_updates
"
;
const
COMMAND_LOADED
=
"
fxaccounts
:
loaded
"
;
const
COMMAND_CAN_LINK_ACCOUNT
=
"
fxaccounts
:
can_link_account
"
;
const
COMMAND_LOGIN
=
"
fxaccounts
:
login
"
;
const
COMMAND_CHANGE_PASSWORD
=
"
fxaccounts
:
change_password
"
;
this
.
FxAccountsWebChannel
=
function
(
options
)
{
if
(
!
options
)
{
throw
new
Error
(
"
Missing
configuration
options
"
)
;
}
if
(
!
options
[
"
content_uri
"
]
)
{
throw
new
Error
(
"
Missing
'
content_uri
'
option
"
)
;
}
this
.
_contentUri
=
options
.
content_uri
;
if
(
!
options
[
"
channel_id
"
]
)
{
throw
new
Error
(
"
Missing
'
channel_id
'
option
"
)
;
}
this
.
_webChannelId
=
options
.
channel_id
;
this
.
_setupChannel
(
)
;
}
;
this
.
FxAccountsWebChannel
.
prototype
=
{
_channel
:
null
_webChannelId
:
null
_webChannelOrigin
:
null
tearDown
(
)
{
this
.
_channel
.
stopListening
(
)
;
this
.
_channel
=
null
;
this
.
_channelCallback
=
null
;
}
_setupChannel
(
)
{
try
{
this
.
_webChannelOrigin
=
Services
.
io
.
newURI
(
this
.
_contentUri
null
null
)
;
this
.
_registerChannel
(
)
;
}
catch
(
e
)
{
log
.
e
(
e
)
;
throw
e
;
}
}
_registerChannel
(
)
{
let
listener
=
(
webChannelId
message
sendingContext
)
=
>
{
if
(
message
)
{
let
command
=
message
.
command
;
let
data
=
message
.
data
;
log
.
d
(
"
FxAccountsWebChannel
message
received
command
:
"
+
command
)
;
let
respond
=
(
data
)
=
>
{
let
response
=
{
command
:
command
messageId
:
message
.
messageId
data
:
data
}
;
log
.
d
(
"
Sending
response
to
command
:
"
+
command
)
;
this
.
_channel
.
send
(
response
sendingContext
)
;
}
;
switch
(
command
)
{
case
COMMAND_LOADED
:
let
mm
=
sendingContext
.
browser
.
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIContentFrameMessageManager
)
;
mm
.
sendAsyncMessage
(
COMMAND_LOADED
)
;
break
;
case
COMMAND_CAN_LINK_ACCOUNT
:
respond
(
{
ok
:
true
}
)
;
break
;
case
COMMAND_LOGIN
:
Accounts
.
getFirefoxAccount
(
)
.
then
(
account
=
>
{
if
(
!
account
)
{
return
Accounts
.
createFirefoxAccountFromJSON
(
data
)
.
then
(
success
=
>
{
if
(
!
success
)
{
throw
new
Error
(
"
Could
not
create
Firefox
Account
!
"
)
;
}
return
success
;
}
)
;
}
else
{
return
Accounts
.
updateFirefoxAccountFromJSON
(
data
)
.
then
(
success
=
>
{
if
(
!
success
)
{
throw
new
Error
(
"
Could
not
update
Firefox
Account
!
"
)
;
}
return
success
;
}
)
;
}
}
)
.
then
(
success
=
>
{
if
(
!
success
)
{
throw
new
Error
(
"
Could
not
create
or
update
Firefox
Account
!
"
)
;
}
log
.
i
(
"
Created
or
updated
Firefox
Account
.
"
)
;
}
)
.
catch
(
e
=
>
{
log
.
e
(
e
.
toString
(
)
)
;
}
)
;
break
;
case
COMMAND_CHANGE_PASSWORD
:
Accounts
.
getFirefoxAccount
(
)
.
then
(
account
=
>
{
if
(
!
account
)
{
throw
new
Error
(
"
Can
'
t
change
password
of
non
-
existent
Firefox
Account
!
"
)
;
}
return
Accounts
.
updateFirefoxAccountFromJSON
(
data
)
;
}
)
.
then
(
success
=
>
{
if
(
!
success
)
{
throw
new
Error
(
"
Could
not
change
Firefox
Account
password
!
"
)
;
}
log
.
i
(
"
Changed
Firefox
Account
password
.
"
)
;
}
)
.
catch
(
e
=
>
{
log
.
e
(
e
.
toString
(
)
)
;
}
)
;
break
;
default
:
log
.
w
(
"
Ignoring
unrecognized
FxAccountsWebChannel
command
:
"
+
JSON
.
stringify
(
command
)
)
;
break
;
}
}
}
;
this
.
_channelCallback
=
listener
;
this
.
_channel
=
new
WebChannel
(
this
.
_webChannelId
this
.
_webChannelOrigin
)
;
this
.
_channel
.
listen
(
listener
)
;
log
.
d
(
"
FxAccountsWebChannel
registered
:
"
+
this
.
_webChannelId
+
"
with
origin
"
+
this
.
_webChannelOrigin
.
prePath
)
;
}
}
;
let
singleton
;
this
.
EnsureFxAccountsWebChannel
=
function
(
)
{
if
(
!
singleton
)
{
let
contentUri
=
Services
.
urlFormatter
.
formatURLPref
(
"
identity
.
fxaccounts
.
remote
.
webchannel
.
uri
"
)
;
singleton
=
new
this
.
FxAccountsWebChannel
(
{
content_uri
:
contentUri
channel_id
:
WEBCHANNEL_ID
}
)
;
}
}
;
