"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
Cu
.
importGlobalProperties
(
[
"
XMLHttpRequest
"
]
)
;
var
EXPORTED_SYMBOLS
=
[
"
SSLExceptions
"
]
;
function
SSLExceptions
(
)
{
this
.
_overrideService
=
Cc
[
"
mozilla
.
org
/
security
/
certoverride
;
1
"
]
.
getService
(
Ci
.
nsICertOverrideService
)
;
}
SSLExceptions
.
prototype
=
{
_overrideService
:
null
_sslStatus
:
null
getInterface
:
function
SSLE_getInterface
(
aIID
)
{
return
this
.
QueryInterface
(
aIID
)
;
}
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIBadCertListener2
"
]
)
notifyCertProblem
:
function
SSLE_notifyCertProblem
(
socketInfo
sslStatus
targetHost
)
{
this
.
_sslStatus
=
sslStatus
.
QueryInterface
(
Ci
.
nsISSLStatus
)
;
return
true
;
}
_checkCert
:
function
SSLE_checkCert
(
aURI
)
{
this
.
_sslStatus
=
null
;
let
req
=
new
XMLHttpRequest
(
)
;
try
{
if
(
aURI
)
{
req
.
open
(
"
GET
"
aURI
.
prePath
false
)
;
req
.
channel
.
notificationCallbacks
=
this
;
req
.
send
(
null
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
"
Attempted
to
connect
to
a
site
with
a
bad
certificate
in
the
add
exception
dialog
.
"
+
"
This
results
in
a
(
mostly
harmless
)
exception
being
thrown
.
"
+
"
Logged
for
information
purposes
only
:
"
+
e
)
;
}
return
this
.
_sslStatus
;
}
_addOverride
:
function
SSLE_addOverride
(
aURI
aWindow
aTemporary
)
{
let
SSLStatus
=
this
.
_checkCert
(
aURI
)
;
let
certificate
=
SSLStatus
.
serverCert
;
let
flags
=
0
;
if
(
PrivateBrowsingUtils
.
isWindowPrivate
(
aWindow
)
)
{
aTemporary
=
true
;
}
if
(
SSLStatus
.
isUntrusted
)
flags
|
=
this
.
_overrideService
.
ERROR_UNTRUSTED
;
if
(
SSLStatus
.
isDomainMismatch
)
flags
|
=
this
.
_overrideService
.
ERROR_MISMATCH
;
if
(
SSLStatus
.
isNotValidAtThisTime
)
flags
|
=
this
.
_overrideService
.
ERROR_TIME
;
this
.
_overrideService
.
rememberValidityOverride
(
aURI
.
asciiHost
aURI
.
port
certificate
flags
aTemporary
)
;
}
addPermanentException
:
function
SSLE_addPermanentException
(
aURI
aWindow
)
{
this
.
_addOverride
(
aURI
aWindow
false
)
;
}
addTemporaryException
:
function
SSLE_addTemporaryException
(
aURI
aWindow
)
{
this
.
_addOverride
(
aURI
aWindow
true
)
;
}
}
;
