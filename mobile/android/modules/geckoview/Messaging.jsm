"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
EventDispatcher
"
]
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
UUIDGen
"
"
mozilla
.
org
/
uuid
-
generator
;
1
"
"
nsIUUIDGenerator
"
)
;
const
IS_PARENT_PROCESS
=
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
;
function
DispatcherDelegate
(
aDispatcher
aMessageManager
)
{
this
.
_dispatcher
=
aDispatcher
;
this
.
_messageManager
=
aMessageManager
;
}
DispatcherDelegate
.
prototype
=
{
registerListener
:
function
(
listener
events
)
{
if
(
!
this
.
_dispatcher
)
{
throw
new
Error
(
"
Can
only
listen
in
parent
process
"
)
;
}
this
.
_dispatcher
.
registerListener
(
listener
events
)
;
}
unregisterListener
:
function
(
listener
events
)
{
if
(
!
this
.
_dispatcher
)
{
throw
new
Error
(
"
Can
only
listen
in
parent
process
"
)
;
}
this
.
_dispatcher
.
unregisterListener
(
listener
events
)
;
}
dispatch
:
function
(
event
data
callback
)
{
if
(
this
.
_dispatcher
)
{
this
.
_dispatcher
.
dispatch
(
event
data
callback
)
;
return
;
}
let
mm
=
this
.
_messageManager
|
|
Services
.
cpmm
;
let
forwardData
=
{
global
:
!
this
.
_messageManager
event
:
event
data
:
data
}
;
if
(
callback
)
{
forwardData
.
uuid
=
UUIDGen
.
generateUUID
(
)
.
toString
(
)
;
mm
.
addMessageListener
(
"
GeckoView
:
MessagingReply
"
function
listener
(
msg
)
{
if
(
msg
.
data
.
uuid
=
=
=
forwardData
.
uuid
)
{
mm
.
removeMessageListener
(
msg
.
name
listener
)
;
if
(
msg
.
data
.
type
=
=
=
"
success
"
)
{
callback
.
onSuccess
(
msg
.
data
.
response
)
;
}
else
if
(
msg
.
data
.
type
=
=
=
"
error
"
)
{
callback
.
onError
(
msg
.
data
.
response
)
;
}
else
{
throw
new
Error
(
"
invalid
reply
type
"
)
;
}
}
}
)
;
}
mm
.
sendAsyncMessage
(
"
GeckoView
:
Messaging
"
forwardData
)
;
}
sendRequest
:
function
(
msg
callback
)
{
let
type
=
msg
.
type
;
msg
.
type
=
undefined
;
this
.
dispatch
(
type
msg
callback
)
;
}
sendRequestForResult
:
function
(
msg
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
type
=
msg
.
type
;
msg
.
type
=
undefined
;
this
.
dispatch
(
type
msg
{
onSuccess
:
resolve
onError
:
reject
}
)
;
}
)
;
}
}
;
var
EventDispatcher
=
{
instance
:
new
DispatcherDelegate
(
IS_PARENT_PROCESS
?
Services
.
androidBridge
:
undefined
)
for
:
function
(
aWindow
)
{
let
view
=
aWindow
&
&
aWindow
.
arguments
&
&
aWindow
.
arguments
[
0
]
&
&
aWindow
.
arguments
[
0
]
.
QueryInterface
(
Ci
.
nsIAndroidView
)
;
if
(
!
view
)
{
let
mm
=
!
IS_PARENT_PROCESS
&
&
aWindow
&
&
aWindow
.
messageManager
;
if
(
!
mm
)
{
throw
new
Error
(
"
window
is
not
a
GeckoView
-
connected
window
and
does
"
+
"
not
have
a
message
manager
"
)
;
}
return
this
.
forMessageManager
(
mm
)
;
}
return
new
DispatcherDelegate
(
view
)
;
}
forMessageManager
:
function
(
aMessageManager
)
{
return
new
DispatcherDelegate
(
null
aMessageManager
)
;
}
receiveMessage
:
function
(
aMsg
)
{
let
callback
;
if
(
aMsg
.
data
.
uuid
)
{
let
reply
=
(
type
response
)
=
>
{
let
mm
=
aMsg
.
data
.
global
?
aMsg
.
target
:
aMsg
.
target
.
messageManager
;
mm
.
sendAsyncMessage
(
"
GeckoView
:
MessagingReply
"
{
type
:
type
response
:
response
uuid
:
aMsg
.
data
.
uuid
}
)
;
}
;
callback
=
{
onSuccess
:
response
=
>
reply
(
"
success
"
response
)
onError
:
error
=
>
reply
(
"
error
"
error
)
}
;
}
if
(
aMsg
.
data
.
global
)
{
this
.
instance
.
dispatch
(
aMsg
.
data
.
event
aMsg
.
data
.
data
.
callback
)
;
return
;
}
let
win
=
aMsg
.
target
.
ownerGlobal
;
let
dispatcher
=
win
.
WindowEventDispatcher
|
|
this
.
for
(
win
)
;
dispatcher
.
dispatch
(
aMsg
.
data
.
event
aMsg
.
data
.
data
callback
)
;
}
}
;
if
(
IS_PARENT_PROCESS
)
{
Services
.
mm
.
addMessageListener
(
"
GeckoView
:
Messaging
"
EventDispatcher
)
;
Services
.
ppmm
.
addMessageListener
(
"
GeckoView
:
Messaging
"
EventDispatcher
)
;
}
