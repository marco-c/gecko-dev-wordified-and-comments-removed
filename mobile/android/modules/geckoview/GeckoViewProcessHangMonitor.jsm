"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewProcessHangMonitor
"
]
;
const
{
GeckoViewModule
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewModule
.
sys
.
mjs
"
)
;
class
GeckoViewProcessHangMonitor
extends
GeckoViewModule
{
constructor
(
aModuleInfo
)
{
super
(
aModuleInfo
)
;
this
.
_activeReports
=
new
Set
(
)
;
this
.
_pausedReports
=
new
Map
(
)
;
this
.
_nextIndex
=
0
;
this
.
_reportIndex
=
new
Map
(
)
;
this
.
_reportLookupIndex
=
new
Map
(
)
;
}
onInit
(
)
{
debug
onInit
;
Services
.
obs
.
addObserver
(
this
"
process
-
hang
-
report
"
)
;
Services
.
obs
.
addObserver
(
this
"
clear
-
hang
-
report
"
)
;
}
onDestroy
(
)
{
debug
onDestroy
;
Services
.
obs
.
removeObserver
(
this
"
process
-
hang
-
report
"
)
;
Services
.
obs
.
removeObserver
(
this
"
clear
-
hang
-
report
"
)
;
}
onEnable
(
)
{
debug
onEnable
;
this
.
registerListener
(
[
"
GeckoView
:
HangReportStop
"
"
GeckoView
:
HangReportWait
"
]
)
;
}
onDisable
(
)
{
debug
onDisable
;
this
.
unregisterListener
(
)
;
}
onEvent
(
aEvent
aData
aCallback
)
{
debug
onEvent
:
event
=
{
aEvent
}
data
=
{
aData
}
;
if
(
this
.
_reportIndex
.
has
(
aData
.
hangId
)
)
{
const
report
=
this
.
_reportIndex
.
get
(
aData
.
hangId
)
;
switch
(
aEvent
)
{
case
"
GeckoView
:
HangReportStop
"
:
this
.
stopHang
(
report
)
;
break
;
case
"
GeckoView
:
HangReportWait
"
:
this
.
pauseHang
(
report
)
;
break
;
}
}
else
{
debug
Report
not
found
:
reportIndex
=
{
this
.
_reportIndex
}
;
}
}
observe
(
aSubject
aTopic
aData
)
{
debug
observe
(
aTopic
=
{
aTopic
}
)
;
aSubject
.
QueryInterface
(
Ci
.
nsIHangReport
)
;
if
(
!
aSubject
.
isReportForBrowserOrChildren
(
this
.
browser
.
frameLoader
)
)
{
return
;
}
switch
(
aTopic
)
{
case
"
process
-
hang
-
report
"
:
{
this
.
reportHang
(
aSubject
)
;
break
;
}
case
"
clear
-
hang
-
report
"
:
{
this
.
clearHang
(
aSubject
)
;
break
;
}
}
}
get
WAIT_EXPIRATION_TIME
(
)
{
try
{
return
Services
.
prefs
.
getIntPref
(
"
browser
.
hangNotification
.
waitPeriod
"
)
;
}
catch
(
ex
)
{
return
10000
;
}
}
stopHang
(
report
)
{
report
.
terminateScript
(
)
;
}
pauseHang
(
report
)
{
this
.
_activeReports
.
delete
(
report
)
;
const
timer
=
this
.
window
.
setTimeout
(
(
)
=
>
{
for
(
const
[
stashedReport
otherTimer
]
of
this
.
_pausedReports
)
{
if
(
otherTimer
=
=
=
timer
)
{
this
.
_pausedReports
.
delete
(
stashedReport
)
;
this
.
_activeReports
.
add
(
report
)
;
break
;
}
}
}
this
.
WAIT_EXPIRATION_TIME
)
;
this
.
_pausedReports
.
set
(
report
timer
)
;
}
notifyReport
(
report
)
{
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
HangReport
"
hangId
:
this
.
_reportLookupIndex
.
get
(
report
)
scriptFileName
:
report
.
scriptFileName
}
)
;
}
reportHang
(
report
)
{
if
(
!
this
.
enabled
)
{
this
.
stopHang
(
report
)
;
return
;
}
if
(
this
.
_activeReports
.
has
(
report
)
)
{
this
.
notifyReport
(
report
)
;
return
;
}
if
(
this
.
_pausedReports
.
has
(
report
)
)
{
return
;
}
const
index
=
this
.
_nextIndex
+
+
;
this
.
_reportLookupIndex
.
set
(
report
index
)
;
this
.
_reportIndex
.
set
(
index
report
)
;
this
.
_activeReports
.
add
(
report
)
;
this
.
notifyReport
(
report
)
;
}
clearHang
(
report
)
{
this
.
_activeReports
.
delete
(
report
)
;
const
timer
=
this
.
_pausedReports
.
get
(
report
)
;
if
(
timer
)
{
this
.
window
.
clearTimeout
(
timer
)
;
}
this
.
_pausedReports
.
delete
(
report
)
;
if
(
this
.
_reportLookupIndex
.
has
(
report
)
)
{
const
index
=
this
.
_reportLookupIndex
.
get
(
report
)
;
this
.
_reportIndex
.
delete
(
index
)
;
}
this
.
_reportLookupIndex
.
delete
(
report
)
;
report
.
userCanceled
(
)
;
}
}
const
{
debug
warn
}
=
GeckoViewProcessHangMonitor
.
initLogging
(
"
GeckoViewProcessHangMonitor
"
)
;
