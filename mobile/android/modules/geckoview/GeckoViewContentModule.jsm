"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewContentModule
"
]
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
)
;
GeckoViewUtils
.
initLogging
(
"
GeckoView
.
Module
.
[
C
]
"
this
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
EventDispatcher
"
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
class
GeckoViewContentModule
{
static
initLogging
(
aModuleName
)
{
this
.
_moduleName
=
aModuleName
;
const
tag
=
aModuleName
.
replace
(
"
GeckoView
"
"
GeckoView
.
"
)
+
"
.
[
C
]
"
;
return
GeckoViewUtils
.
initLogging
(
tag
{
}
)
;
}
static
create
(
aGlobal
aModuleName
)
{
return
new
this
(
aModuleName
|
|
this
.
_moduleName
aGlobal
)
;
}
constructor
(
aModuleName
aMessageManager
)
{
this
.
moduleName
=
aModuleName
;
this
.
messageManager
=
aMessageManager
;
this
.
eventDispatcher
=
EventDispatcher
.
forMessageManager
(
aMessageManager
)
;
this
.
messageManager
.
addMessageListener
(
"
GeckoView
:
UpdateSettings
"
aMsg
=
>
{
this
.
settings
=
aMsg
.
data
;
this
.
onSettingsUpdate
(
)
;
}
)
;
this
.
messageManager
.
addMessageListener
(
"
GeckoView
:
Register
"
aMsg
=
>
{
if
(
aMsg
.
data
.
module
=
=
this
.
moduleName
)
{
this
.
settings
=
aMsg
.
data
.
settings
;
this
.
onEnable
(
)
;
this
.
messageManager
.
sendAsyncMessage
(
"
GeckoView
:
ContentRegistered
"
{
module
:
this
.
moduleName
}
)
;
}
}
)
;
this
.
messageManager
.
addMessageListener
(
"
GeckoView
:
Unregister
"
aMsg
=
>
{
if
(
aMsg
.
data
.
module
=
=
this
.
moduleName
)
{
this
.
onDisable
(
)
;
}
}
)
;
this
.
onInit
(
)
;
}
onInit
(
)
{
}
onSettingsUpdate
(
)
{
}
onEnable
(
)
{
}
onDisable
(
)
{
}
}
