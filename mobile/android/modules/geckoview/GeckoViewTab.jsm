"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewTab
"
"
GeckoViewTabBridge
"
]
;
const
{
GeckoViewModule
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewModule
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventDispatcher
:
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
mobileWindowTracker
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewWebExtension
.
jsm
"
}
)
;
class
Tab
{
constructor
(
id
browser
)
{
this
.
id
=
id
;
this
.
browser
=
browser
;
this
.
active
=
false
;
}
getActive
(
)
{
return
this
.
active
;
}
}
class
BrowserAppShim
{
constructor
(
window
)
{
const
tabId
=
GeckoViewTabBridge
.
windowIdToTabId
(
window
.
windowUtils
.
outerWindowID
)
;
this
.
selectedBrowser
=
window
.
browser
;
this
.
selectedTab
=
new
Tab
(
tabId
this
.
selectedBrowser
)
;
this
.
tabs
=
[
this
.
selectedTab
]
;
}
getTabForId
(
aId
)
{
return
this
.
selectedTab
;
}
getTabForBrowser
(
aBrowser
)
{
return
this
.
selectedTab
;
}
getTabForWindow
(
aWindow
)
{
return
this
.
selectedTab
;
}
getTabForDocument
(
aDocument
)
{
return
this
.
selectedTab
;
}
getBrowserForOuterWindowID
(
aID
)
{
return
this
.
selectedBrowser
;
}
getBrowserForDocument
(
aDocument
)
{
return
this
.
selectedBrowser
;
}
static
getBrowserApp
(
window
)
{
let
{
BrowserApp
}
=
window
;
if
(
!
BrowserApp
)
{
BrowserApp
=
window
.
gBrowser
=
window
.
BrowserApp
=
new
BrowserAppShim
(
window
)
;
}
return
BrowserApp
;
}
}
const
TAB_ID_BASE
=
10000
;
const
GeckoViewTabBridge
=
{
windowIdToTabId
(
windowId
)
{
return
TAB_ID_BASE
+
windowId
;
}
tabIdToWindowId
(
tabId
)
{
return
tabId
-
TAB_ID_BASE
;
}
async
createNewTab
(
{
extensionId
createProperties
}
=
{
}
)
{
const
sessionId
=
await
EventDispatcher
.
instance
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
WebExtension
:
NewTab
"
extensionId
createProperties
}
)
;
if
(
!
sessionId
)
{
throw
new
Error
(
"
Cannot
create
new
tab
"
)
;
}
const
window
=
await
new
Promise
(
resolve
=
>
{
const
handler
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
geckoview
-
window
-
created
"
&
&
aSubject
.
name
=
=
=
sessionId
)
{
Services
.
obs
.
removeObserver
(
handler
"
geckoview
-
window
-
created
"
)
;
resolve
(
aSubject
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
handler
"
geckoview
-
window
-
created
"
)
;
}
)
;
return
BrowserAppShim
.
getBrowserApp
(
window
)
.
selectedTab
;
}
async
closeTab
(
{
window
extensionId
}
=
{
}
)
{
await
window
.
WindowEventDispatcher
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
WebExtension
:
CloseTab
"
extensionId
}
)
;
}
async
updateTab
(
{
window
extensionId
updateProperties
}
=
{
}
)
{
await
window
.
WindowEventDispatcher
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
WebExtension
:
UpdateTab
"
extensionId
updateProperties
}
)
;
}
}
;
class
GeckoViewTab
extends
GeckoViewModule
{
onInit
(
)
{
BrowserAppShim
.
getBrowserApp
(
this
.
window
)
;
this
.
registerListener
(
[
"
GeckoView
:
WebExtension
:
SetTabActive
"
]
)
;
}
onEvent
(
aEvent
aData
aCallback
)
{
debug
onEvent
:
event
=
{
aEvent
}
data
=
{
aData
}
;
switch
(
aEvent
)
{
case
"
GeckoView
:
WebExtension
:
SetTabActive
"
:
{
const
{
active
}
=
aData
;
mobileWindowTracker
.
setTabActive
(
this
.
window
active
)
;
break
;
}
}
}
}
const
{
debug
warn
}
=
GeckoViewTab
.
initLogging
(
"
GeckoViewTab
"
)
;
