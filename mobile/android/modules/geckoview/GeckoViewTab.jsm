"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewTab
"
"
GeckoViewTabBridge
"
]
;
const
{
GeckoViewModule
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewModule
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
ExtensionUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
jsm
"
)
;
const
{
ExtensionError
}
=
ExtensionUtils
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
EventDispatcher
:
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
mobileWindowTracker
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewWebExtension
.
jsm
"
}
)
;
class
Tab
{
constructor
(
window
)
{
this
.
id
=
GeckoViewTabBridge
.
windowIdToTabId
(
window
.
docShell
.
outerWindowID
)
;
this
.
browser
=
window
.
browser
;
this
.
active
=
false
;
}
get
linkedBrowser
(
)
{
return
this
.
browser
;
}
getActive
(
)
{
return
this
.
active
;
}
get
userContextId
(
)
{
return
this
.
browser
.
ownerGlobal
.
moduleManager
.
settings
.
unsafeSessionContextId
;
}
}
const
TAB_ID_BASE
=
10000
;
const
GeckoViewTabBridge
=
{
windowIdToTabId
(
windowId
)
{
return
TAB_ID_BASE
+
windowId
;
}
tabIdToWindowId
(
tabId
)
{
return
tabId
-
TAB_ID_BASE
;
}
async
openOptionsPage
(
extensionId
)
{
debug
openOptionsPage
for
extensionId
{
extensionId
}
;
try
{
await
lazy
.
EventDispatcher
.
instance
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
WebExtension
:
OpenOptionsPage
"
extensionId
}
)
;
}
catch
(
errorMessage
)
{
throw
new
ExtensionError
(
"
runtime
.
openOptionsPage
is
not
supported
"
)
;
}
}
async
createNewTab
(
{
extensionId
createProperties
}
=
{
}
)
{
debug
createNewTab
;
const
newSessionId
=
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
.
slice
(
1
-
1
)
.
replace
(
/
-
/
g
"
"
)
;
const
windowPromise
=
new
Promise
(
resolve
=
>
{
const
handler
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
=
"
geckoview
-
window
-
created
"
&
&
aSubject
.
name
=
=
=
newSessionId
)
{
Services
.
obs
.
removeObserver
(
handler
"
geckoview
-
window
-
created
"
)
;
resolve
(
aSubject
)
;
}
}
}
;
Services
.
obs
.
addObserver
(
handler
"
geckoview
-
window
-
created
"
)
;
}
)
;
let
didOpenSession
=
false
;
try
{
didOpenSession
=
await
lazy
.
EventDispatcher
.
instance
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
WebExtension
:
NewTab
"
extensionId
createProperties
newSessionId
}
)
;
}
catch
(
errorMessage
)
{
throw
new
ExtensionError
(
"
tabs
.
create
is
not
supported
"
)
;
}
if
(
!
didOpenSession
)
{
throw
new
ExtensionError
(
"
Cannot
create
new
tab
"
)
;
}
const
window
=
await
windowPromise
;
if
(
!
window
.
tab
)
{
window
.
tab
=
new
Tab
(
window
)
;
}
return
window
.
tab
;
}
async
closeTab
(
{
window
extensionId
}
=
{
}
)
{
try
{
await
window
.
WindowEventDispatcher
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
WebExtension
:
CloseTab
"
extensionId
}
)
;
}
catch
(
errorMessage
)
{
throw
new
ExtensionError
(
errorMessage
)
;
}
}
async
updateTab
(
{
window
extensionId
updateProperties
}
=
{
}
)
{
try
{
await
window
.
WindowEventDispatcher
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
WebExtension
:
UpdateTab
"
extensionId
updateProperties
}
)
;
}
catch
(
errorMessage
)
{
throw
new
ExtensionError
(
errorMessage
)
;
}
}
}
;
class
GeckoViewTab
extends
GeckoViewModule
{
onInit
(
)
{
const
{
window
}
=
this
;
if
(
!
window
.
tab
)
{
window
.
tab
=
new
Tab
(
window
)
;
}
this
.
registerListener
(
[
"
GeckoView
:
WebExtension
:
SetTabActive
"
]
)
;
}
onEvent
(
aEvent
aData
aCallback
)
{
debug
onEvent
:
event
=
{
aEvent
}
data
=
{
aData
}
;
switch
(
aEvent
)
{
case
"
GeckoView
:
WebExtension
:
SetTabActive
"
:
{
const
{
active
}
=
aData
;
lazy
.
mobileWindowTracker
.
setTabActive
(
this
.
window
active
)
;
break
;
}
}
}
}
const
{
debug
warn
}
=
GeckoViewTab
.
initLogging
(
"
GeckoViewTab
"
)
;
