"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
GeckoViewSettings
"
]
;
const
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewModule
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
SafeBrowsing
"
"
resource
:
/
/
gre
/
modules
/
SafeBrowsing
.
jsm
"
)
;
var
dump
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AndroidLog
.
jsm
"
{
}
)
.
AndroidLog
.
d
.
bind
(
null
"
ViewSettings
"
)
;
function
debug
(
aMsg
)
{
}
class
GeckoViewSettings
extends
GeckoViewModule
{
init
(
)
{
this
.
_isSafeBrowsingInit
=
false
;
this
.
_useTrackingProtection
=
false
;
this
.
useMultiprocess
=
!
!
this
.
settings
.
useMultiprocess
;
}
onSettingsUpdate
(
)
{
debug
(
"
onSettingsUpdate
:
"
+
JSON
.
stringify
(
this
.
settings
)
)
;
this
.
useTrackingProtection
=
!
!
this
.
settings
.
useTrackingProtection
;
}
get
useTrackingProtection
(
)
{
return
this
.
_useTrackingProtection
;
}
set
useTrackingProtection
(
aUse
)
{
if
(
aUse
&
&
!
this
.
_isSafeBrowsingInit
)
{
SafeBrowsing
.
init
(
)
;
this
.
_isSafeBrowsingInit
=
true
;
}
if
(
aUse
!
=
this
.
_useTrackingProtection
)
{
this
.
messageManager
.
loadFrameScript
(
"
data
:
"
+
"
docShell
.
useTrackingProtection
=
"
+
aUse
true
)
;
this
.
_useTrackingProtection
=
aUse
;
}
}
get
useMultiprocess
(
)
{
return
this
.
browser
.
getAttribute
(
"
remote
"
)
=
=
"
true
"
;
}
set
useMultiprocess
(
aUse
)
{
if
(
aUse
=
=
this
.
useMultiprocess
)
{
return
;
}
let
parentNode
=
this
.
browser
.
parentNode
;
parentNode
.
removeChild
(
this
.
browser
)
;
if
(
aUse
)
{
this
.
browser
.
setAttribute
(
"
remote
"
"
true
"
)
;
}
else
{
this
.
browser
.
removeAttribute
(
"
remote
"
)
;
}
parentNode
.
appendChild
(
this
.
browser
)
;
}
}
