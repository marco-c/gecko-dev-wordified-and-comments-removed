"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
ChildCrashHandler
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
GeckoViewUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
EventDispatcher
:
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
OS
:
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
}
)
;
const
{
debug
warn
}
=
GeckoViewUtils
.
initLogging
(
"
ChildCrashHandler
"
)
;
function
getDir
(
name
)
{
const
uAppDataPath
=
Services
.
dirsvc
.
get
(
"
UAppData
"
Ci
.
nsIFile
)
.
path
;
return
lazy
.
OS
.
Path
.
join
(
uAppDataPath
"
Crash
Reports
"
name
)
;
}
function
getPendingMinidump
(
id
)
{
const
pendingDir
=
getDir
(
"
pending
"
)
;
return
[
"
.
dmp
"
"
.
extra
"
]
.
map
(
suffix
=
>
{
return
lazy
.
OS
.
Path
.
join
(
pendingDir
{
id
}
{
suffix
}
)
;
}
)
;
}
var
ChildCrashHandler
=
{
observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
!
=
=
"
ipc
:
content
-
shutdown
"
&
&
aTopic
!
=
=
"
compositor
:
process
-
aborted
"
)
{
return
;
}
aSubject
.
QueryInterface
(
Ci
.
nsIPropertyBag2
)
;
const
disableReporting
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
.
get
(
"
MOZ_CRASHREPORTER_NO_REPORT
"
)
;
if
(
!
aSubject
.
get
(
"
abnormal
"
)
|
|
!
AppConstants
.
MOZ_CRASHREPORTER
|
|
disableReporting
)
{
return
;
}
const
dumpID
=
aSubject
.
get
(
"
dumpID
"
)
;
if
(
!
dumpID
)
{
Services
.
telemetry
.
getHistogramById
(
"
FX_CONTENT_CRASH_DUMP_UNAVAILABLE
"
)
.
add
(
1
)
;
return
;
}
debug
Notifying
child
process
crash
dump
ID
{
dumpID
}
;
const
[
minidumpPath
extrasPath
]
=
getPendingMinidump
(
dumpID
)
;
const
processType
=
aTopic
=
=
=
"
compositor
:
process
-
aborted
"
?
"
BACKGROUND_CHILD
"
:
"
FOREGROUND_CHILD
"
;
lazy
.
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
GeckoView
:
ChildCrashReport
"
minidumpPath
extrasPath
success
:
true
fatal
:
false
processType
}
)
;
}
}
;
