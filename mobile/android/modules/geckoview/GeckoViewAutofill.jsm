"
use
strict
"
;
const
{
GeckoViewUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
sys
.
mjs
"
)
;
var
EXPORTED_SYMBOLS
=
[
"
gAutofillManager
"
]
;
class
Autofill
{
constructor
(
sessionId
eventDispatcher
)
{
this
.
eventDispatcher
=
eventDispatcher
;
this
.
sessionId
=
sessionId
;
}
start
(
)
{
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
StartAutofill
"
sessionId
:
this
.
sessionId
}
)
;
}
add
(
node
)
{
return
this
.
eventDispatcher
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
AddAutofill
"
node
}
)
;
}
focus
(
node
)
{
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
OnAutofillFocus
"
node
}
)
;
}
update
(
node
)
{
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
UpdateAutofill
"
node
}
)
;
}
commit
(
node
)
{
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
CommitAutofill
"
node
}
)
;
}
clear
(
)
{
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
ClearAutofill
"
}
)
;
}
}
class
AutofillManager
{
sessions
=
new
Set
(
)
;
autofill
=
null
;
ensure
(
sessionId
eventDispatcher
)
{
if
(
!
this
.
sessions
.
has
(
sessionId
)
)
{
this
.
autofill
=
new
Autofill
(
sessionId
eventDispatcher
)
;
this
.
sessions
.
add
(
sessionId
)
;
this
.
autofill
.
start
(
)
;
}
if
(
sessionId
!
=
=
this
.
autofill
.
sessionId
)
{
return
null
;
}
return
this
.
autofill
;
}
get
(
sessionId
)
{
if
(
!
this
.
autofill
|
|
sessionId
!
=
=
this
.
autofill
.
sessionId
)
{
warn
Disregarding
old
session
{
sessionId
}
;
return
null
;
}
return
this
.
autofill
;
}
delete
(
sessionId
)
{
this
.
sessions
.
delete
(
sessionId
)
;
if
(
!
this
.
autofill
|
|
sessionId
!
=
=
this
.
autofill
.
sessionId
)
{
return
;
}
this
.
autofill
.
clear
(
)
;
this
.
autofill
=
null
;
}
}
var
gAutofillManager
=
new
AutofillManager
(
)
;
const
{
debug
warn
}
=
GeckoViewUtils
.
initLogging
(
"
Autofill
"
)
;
