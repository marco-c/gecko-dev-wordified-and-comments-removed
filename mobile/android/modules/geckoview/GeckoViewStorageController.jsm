"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewStorageController
"
]
;
const
{
GeckoViewUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
)
;
const
{
PrincipalsCollector
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
PrincipalsCollector
.
jsm
"
)
;
const
{
E10SUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
sys
.
mjs
"
)
;
const
{
debug
warn
}
=
GeckoViewUtils
.
initLogging
(
"
GeckoViewStorageController
"
)
;
const
ClearFlags
=
[
[
1
<
<
0
Ci
.
nsIClearDataService
.
CLEAR_COOKIES
|
Ci
.
nsIClearDataService
.
CLEAR_MEDIA_DEVICES
]
[
1
<
<
1
Ci
.
nsIClearDataService
.
CLEAR_NETWORK_CACHE
]
[
1
<
<
2
Ci
.
nsIClearDataService
.
CLEAR_IMAGE_CACHE
]
[
1
<
<
3
Ci
.
nsIClearDataService
.
CLEAR_HISTORY
|
Ci
.
nsIClearDataService
.
CLEAR_SESSION_HISTORY
]
[
1
<
<
4
Ci
.
nsIClearDataService
.
CLEAR_DOM_QUOTA
|
Ci
.
nsIClearDataService
.
CLEAR_DOM_PUSH_NOTIFICATIONS
|
Ci
.
nsIClearDataService
.
CLEAR_REPORTS
]
[
1
<
<
5
Ci
.
nsIClearDataService
.
CLEAR_AUTH_TOKENS
|
Ci
.
nsIClearDataService
.
CLEAR_AUTH_CACHE
]
[
1
<
<
6
Ci
.
nsIClearDataService
.
CLEAR_PERMISSIONS
]
[
1
<
<
7
Ci
.
nsIClearDataService
.
CLEAR_CONTENT_PREFERENCES
|
Ci
.
nsIClearDataService
.
CLEAR_DOM_PUSH_NOTIFICATIONS
|
Ci
.
nsIClearDataService
.
CLEAR_CLIENT_AUTH_REMEMBER_SERVICE
]
[
1
<
<
8
Ci
.
nsIClearDataService
.
CLEAR_EME
Ci
.
nsIClearDataService
.
CLEAR_HSTS
]
[
1
<
<
9
Ci
.
nsIClearDataService
.
CLEAR_ALL
]
]
;
function
convertFlags
(
aJavaFlags
)
{
const
flags
=
ClearFlags
.
filter
(
cf
=
>
{
return
cf
[
0
]
&
aJavaFlags
;
}
)
.
reduce
(
(
acc
cf
)
=
>
{
return
acc
|
cf
[
1
]
;
}
0
)
;
return
flags
;
}
const
GeckoViewStorageController
=
{
onEvent
(
aEvent
aData
aCallback
)
{
debug
onEvent
{
aEvent
}
{
aData
}
;
switch
(
aEvent
)
{
case
"
GeckoView
:
ClearData
"
:
{
this
.
clearData
(
aData
.
flags
aCallback
)
;
break
;
}
case
"
GeckoView
:
ClearSessionContextData
"
:
{
this
.
clearSessionContextData
(
aData
.
contextId
)
;
break
;
}
case
"
GeckoView
:
ClearHostData
"
:
{
this
.
clearHostData
(
aData
.
host
aData
.
flags
aCallback
)
;
break
;
}
case
"
GeckoView
:
ClearBaseDomainData
"
:
{
this
.
clearBaseDomainData
(
aData
.
baseDomain
aData
.
flags
aCallback
)
;
break
;
}
case
"
GeckoView
:
GetAllPermissions
"
:
{
const
rawPerms
=
Services
.
perms
.
all
;
const
permissions
=
rawPerms
.
map
(
p
=
>
{
return
{
uri
:
Services
.
io
.
createExposableURI
(
p
.
principal
.
URI
)
.
displaySpec
principal
:
E10SUtils
.
serializePrincipal
(
p
.
principal
)
perm
:
p
.
type
value
:
p
.
capability
contextId
:
p
.
principal
.
originAttributes
.
geckoViewSessionContextId
privateMode
:
p
.
principal
.
privateBrowsingId
!
=
0
}
;
}
)
;
aCallback
.
onSuccess
(
{
permissions
}
)
;
break
;
}
case
"
GeckoView
:
GetPermissionsByURI
"
:
{
const
uri
=
Services
.
io
.
newURI
(
aData
.
uri
)
;
const
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
aData
.
contextId
?
{
geckoViewSessionContextId
:
aData
.
contextId
}
:
{
}
)
;
const
rawPerms
=
Services
.
perms
.
getAllForPrincipal
(
principal
)
;
const
permissions
=
rawPerms
.
map
(
p
=
>
{
return
{
uri
:
Services
.
io
.
createExposableURI
(
p
.
principal
.
URI
)
.
displaySpec
principal
:
E10SUtils
.
serializePrincipal
(
p
.
principal
)
perm
:
p
.
type
value
:
p
.
capability
contextId
:
p
.
principal
.
originAttributes
.
geckoViewSessionContextId
privateMode
:
p
.
principal
.
privateBrowsingId
!
=
0
}
;
}
)
;
aCallback
.
onSuccess
(
{
permissions
}
)
;
break
;
}
case
"
GeckoView
:
SetPermission
"
:
{
const
principal
=
E10SUtils
.
deserializePrincipal
(
aData
.
principal
)
;
let
key
=
aData
.
perm
;
if
(
key
=
=
"
storage
-
access
"
)
{
key
=
"
3rdPartyStorage
^
"
+
aData
.
thirdPartyOrigin
;
}
if
(
aData
.
allowPermanentPrivateBrowsing
)
{
Services
.
perms
.
addFromPrincipalAndPersistInPrivateBrowsing
(
principal
key
aData
.
newValue
)
;
}
else
{
Services
.
perms
.
addFromPrincipal
(
principal
key
aData
.
newValue
Ci
.
nsIPermissionManager
.
EXPIRE_NEVER
)
;
}
break
;
}
case
"
GeckoView
:
SetPermissionByURI
"
:
{
const
uri
=
Services
.
io
.
newURI
(
aData
.
uri
)
;
const
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipal
(
uri
{
geckoViewSessionContextId
:
aData
.
contextId
?
?
undefined
privateBrowsingId
:
aData
.
privateId
}
)
;
Services
.
perms
.
addFromPrincipal
(
principal
aData
.
perm
aData
.
newValue
Ci
.
nsIPermissionManager
.
EXPIRE_NEVER
)
;
break
;
}
}
}
async
clearData
(
aFlags
aCallback
)
{
const
flags
=
convertFlags
(
aFlags
)
;
if
(
flags
&
Ci
.
nsIClearDataService
.
CLEAR_HISTORY
)
{
const
principalsCollector
=
new
PrincipalsCollector
(
)
;
const
principals
=
await
principalsCollector
.
getAllPrincipals
(
)
;
await
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteUserInteractionForClearingHistory
(
principals
0
resolve
)
;
}
)
;
}
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteData
(
flags
resolve
)
;
}
)
.
then
(
resultFlags
=
>
{
aCallback
.
onSuccess
(
)
;
}
)
;
}
clearHostData
(
aHost
aFlags
aCallback
)
{
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteDataFromHost
(
aHost
true
convertFlags
(
aFlags
)
resolve
)
;
}
)
.
then
(
resultFlags
=
>
{
aCallback
.
onSuccess
(
)
;
}
)
;
}
clearBaseDomainData
(
aBaseDomain
aFlags
aCallback
)
{
new
Promise
(
resolve
=
>
{
Services
.
clearData
.
deleteDataFromBaseDomain
(
aBaseDomain
true
convertFlags
(
aFlags
)
resolve
)
;
}
)
.
then
(
resultFlags
=
>
{
aCallback
.
onSuccess
(
)
;
}
)
;
}
clearSessionContextData
(
aContextId
)
{
const
pattern
=
{
geckoViewSessionContextId
:
aContextId
}
;
debug
clearSessionContextData
{
pattern
}
;
Services
.
clearData
.
deleteDataFromOriginAttributesPattern
(
pattern
)
;
Services
.
qms
.
clearStoragesForOriginAttributesPattern
(
JSON
.
stringify
(
pattern
)
)
;
}
}
;
