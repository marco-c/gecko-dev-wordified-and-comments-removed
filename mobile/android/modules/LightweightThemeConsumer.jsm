var
EXPORTED_SYMBOLS
=
[
"
LightweightThemeConsumer
"
]
;
var
Cc
=
Components
.
classes
;
var
Ci
=
Components
.
interfaces
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LightweightThemeManager
.
jsm
"
)
;
Components
.
utils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
EventDispatcher
"
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
function
LightweightThemeConsumer
(
aDocument
)
{
this
.
_doc
=
aDocument
;
Services
.
obs
.
addObserver
(
this
"
lightweight
-
theme
-
styling
-
update
"
)
;
Services
.
obs
.
addObserver
(
this
"
lightweight
-
theme
-
apply
"
)
;
this
.
_update
(
LightweightThemeManager
.
currentThemeForDisplay
)
;
}
LightweightThemeConsumer
.
prototype
=
{
observe
:
function
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
lightweight
-
theme
-
styling
-
update
"
)
this
.
_update
(
JSON
.
parse
(
aData
)
)
;
else
if
(
aTopic
=
=
"
lightweight
-
theme
-
apply
"
)
this
.
_update
(
LightweightThemeManager
.
currentThemeForDisplay
)
;
}
destroy
:
function
(
)
{
Services
.
obs
.
removeObserver
(
this
"
lightweight
-
theme
-
styling
-
update
"
)
;
Services
.
obs
.
removeObserver
(
this
"
lightweight
-
theme
-
apply
"
)
;
this
.
_doc
=
null
;
}
_update
:
function
(
aData
)
{
if
(
!
aData
)
aData
=
{
headerURL
:
"
"
footerURL
:
"
"
textcolor
:
"
"
accentcolor
:
"
"
}
;
let
active
=
!
!
aData
.
headerURL
;
let
msg
=
active
?
{
type
:
"
LightweightTheme
:
Update
"
data
:
aData
}
:
{
type
:
"
LightweightTheme
:
Disable
"
}
;
EventDispatcher
.
instance
.
sendRequest
(
msg
)
;
}
}
;
