"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
Snackbars
"
]
;
ChromeUtils
.
defineModuleGetter
(
this
"
EventDispatcher
"
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
const
LENGTH_INDEFINITE
=
-
2
;
const
LENGTH_LONG
=
0
;
const
LENGTH_SHORT
=
-
1
;
var
Snackbars
=
{
LENGTH_INDEFINITE
:
LENGTH_INDEFINITE
LENGTH_LONG
:
LENGTH_LONG
LENGTH_SHORT
:
LENGTH_SHORT
show
:
function
(
aMessage
aDuration
aOptions
)
{
if
(
typeof
aDuration
=
=
=
"
string
"
)
{
[
aDuration
aOptions
]
=
migrateToastIfNeeded
(
aDuration
aOptions
)
;
}
let
msg
=
{
type
:
"
Snackbar
:
Show
"
message
:
aMessage
duration
:
aDuration
}
;
if
(
aOptions
&
&
aOptions
.
backgroundColor
)
{
msg
.
backgroundColor
=
aOptions
.
backgroundColor
;
}
if
(
aOptions
&
&
aOptions
.
action
)
{
msg
.
action
=
{
}
;
if
(
aOptions
.
action
.
label
)
{
msg
.
action
.
label
=
aOptions
.
action
.
label
;
}
EventDispatcher
.
instance
.
sendRequestForResult
(
msg
)
.
then
(
result
=
>
aOptions
.
action
.
callback
(
)
)
.
catch
(
result
=
>
{
if
(
aOptions
.
action
.
rejection
)
{
aOptions
.
action
.
rejection
(
result
)
;
}
else
if
(
result
=
=
=
null
)
{
}
else
{
Cu
.
reportError
(
result
)
;
}
}
)
;
}
else
{
EventDispatcher
.
instance
.
sendRequest
(
msg
)
;
}
}
}
;
function
migrateToastIfNeeded
(
aDuration
aOptions
)
{
let
duration
;
if
(
aDuration
=
=
=
"
long
"
)
{
duration
=
LENGTH_LONG
;
}
else
{
duration
=
LENGTH_SHORT
;
}
let
options
=
{
}
;
if
(
aOptions
&
&
aOptions
.
button
)
{
options
.
action
=
{
label
:
aOptions
.
button
.
label
callback
:
(
)
=
>
aOptions
.
button
.
callback
(
)
}
;
}
return
[
duration
options
]
;
}
