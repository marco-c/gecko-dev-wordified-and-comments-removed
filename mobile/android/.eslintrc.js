"
use
strict
"
;
module
.
exports
=
{
rules
:
{
"
complexity
"
:
[
"
error
"
31
]
"
consistent
-
return
"
:
"
off
"
"
no
-
empty
"
:
"
off
"
"
no
-
nested
-
ternary
"
:
"
off
"
"
no
-
new
-
object
"
:
"
off
"
"
no
-
octal
"
:
"
off
"
"
no
-
redeclare
"
:
"
off
"
"
no
-
useless
-
call
"
:
"
off
"
"
no
-
useless
-
concat
"
:
"
off
"
"
object
-
shorthand
"
:
"
off
"
}
"
overrides
"
:
[
{
files
:
[
"
chrome
/
*
*
"
"
components
/
extensions
/
*
*
"
"
modules
/
WebsiteMetadata
.
jsm
"
"
tests
/
browser
/
robocop
/
*
*
"
]
rules
:
{
"
no
-
unused
-
vars
"
:
"
off
"
"
no
-
undef
"
:
"
off
"
}
}
{
files
:
[
"
chrome
/
geckoview
/
*
*
"
"
components
/
geckoview
/
*
*
"
"
modules
/
geckoview
/
*
*
"
]
rules
:
{
"
no
-
restricted
-
syntax
"
:
[
"
error
"
{
"
selector
"
:
CallExpression
>
\
Identifier
.
callee
[
name
=
/
^
debug
|
^
warn
/
]
"
message
"
:
"
Use
debug
and
warn
with
template
literals
e
.
g
.
debug
foo
;
"
}
{
"
selector
"
:
BinaryExpression
[
operator
=
'
+
'
]
>
\
TaggedTemplateExpression
.
left
>
\
Identifier
.
tag
[
name
=
/
^
debug
|
^
warn
/
]
"
message
"
:
"
Use
only
one
template
literal
with
debug
/
warn
instead
of
concatenating
multiple
expressions
\
n
"
+
"
e
.
g
.
(
debug
foo
{
42
}
bar
)
instead
of
(
debug
foo
+
42
+
bar
)
"
}
{
"
selector
"
:
TaggedTemplateExpression
[
tag
.
type
=
'
Identifier
'
]
[
tag
.
name
=
/
^
debug
|
^
warn
/
]
>
\
TemplateLiteral
.
quasi
CallExpression
>
\
MemberExpression
.
callee
[
object
.
type
=
'
Identifier
'
]
[
object
.
name
=
'
JSON
'
]
>
\
Identifier
.
property
[
name
=
'
stringify
'
]
"
message
"
:
"
Don
'
t
call
JSON
.
stringify
within
debug
/
warn
literals
\
n
"
+
"
e
.
g
.
(
debug
foo
=
{
foo
}
)
instead
of
(
debug
foo
=
{
JSON
.
stringify
(
foo
)
}
)
"
}
]
}
}
]
}
;
