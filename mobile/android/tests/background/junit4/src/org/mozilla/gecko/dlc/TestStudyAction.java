package
org
.
mozilla
.
gecko
.
dlc
;
import
android
.
content
.
Context
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
gecko
.
background
.
testhelpers
.
TestRunner
;
import
org
.
mozilla
.
gecko
.
dlc
.
catalog
.
DownloadContent
;
import
org
.
mozilla
.
gecko
.
dlc
.
catalog
.
DownloadContentCatalog
;
import
org
.
robolectric
.
RuntimeEnvironment
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Collections
;
import
static
org
.
mockito
.
Mockito
.
any
;
import
static
org
.
mockito
.
Mockito
.
mock
;
import
static
org
.
mockito
.
Mockito
.
never
;
import
static
org
.
mockito
.
Mockito
.
spy
;
import
static
org
.
mockito
.
Mockito
.
verify
;
import
static
org
.
mockito
.
Mockito
.
when
;
RunWith
(
TestRunner
.
class
)
public
class
TestStudyAction
{
Test
public
void
testPerformWithEmptyCatalog
(
)
{
DownloadContentCatalog
catalog
=
mock
(
DownloadContentCatalog
.
class
)
;
when
(
catalog
.
getContentWithoutState
(
)
)
.
thenReturn
(
new
ArrayList
<
DownloadContent
>
(
)
)
;
StudyAction
action
=
spy
(
new
StudyAction
(
)
)
;
action
.
perform
(
RuntimeEnvironment
.
application
catalog
)
;
verify
(
catalog
)
.
getContentWithoutState
(
)
;
verify
(
catalog
never
(
)
)
.
markAsDownloaded
(
any
(
DownloadContent
.
class
)
)
;
verify
(
action
never
(
)
)
.
startDownloads
(
any
(
Context
.
class
)
)
;
}
Test
public
void
testPerformWithNewContent
(
)
{
DownloadContent
content1
=
new
DownloadContent
.
Builder
(
)
.
setType
(
DownloadContent
.
TYPE_ASSET_ARCHIVE
)
.
setKind
(
DownloadContent
.
KIND_FONT
)
.
build
(
)
;
DownloadContent
content2
=
new
DownloadContent
.
Builder
(
)
.
setType
(
DownloadContent
.
TYPE_ASSET_ARCHIVE
)
.
setKind
(
DownloadContent
.
KIND_FONT
)
.
build
(
)
;
DownloadContentCatalog
catalog
=
mock
(
DownloadContentCatalog
.
class
)
;
when
(
catalog
.
getContentWithoutState
(
)
)
.
thenReturn
(
Arrays
.
asList
(
content1
content2
)
)
;
StudyAction
action
=
spy
(
new
StudyAction
(
)
)
;
action
.
perform
(
RuntimeEnvironment
.
application
catalog
)
;
verify
(
catalog
)
.
scheduleDownload
(
content1
)
;
verify
(
catalog
)
.
scheduleDownload
(
content2
)
;
}
Test
public
void
testStartingDownloadsAfterScheduling
(
)
{
DownloadContentCatalog
catalog
=
mock
(
DownloadContentCatalog
.
class
)
;
when
(
catalog
.
hasScheduledDownloads
(
)
)
.
thenReturn
(
true
)
;
StudyAction
action
=
spy
(
new
StudyAction
(
)
)
;
action
.
perform
(
RuntimeEnvironment
.
application
catalog
)
;
verify
(
action
)
.
startDownloads
(
any
(
Context
.
class
)
)
;
}
Test
public
void
testPerformWithUnknownContent
(
)
{
DownloadContent
content
=
new
DownloadContent
.
Builder
(
)
.
setType
(
"
Unknown
-
Type
"
)
.
setKind
(
"
Unknown
-
Kind
"
)
.
build
(
)
;
DownloadContentCatalog
catalog
=
mock
(
DownloadContentCatalog
.
class
)
;
when
(
catalog
.
getContentWithoutState
(
)
)
.
thenReturn
(
Collections
.
singletonList
(
content
)
)
;
StudyAction
action
=
spy
(
new
StudyAction
(
)
)
;
action
.
perform
(
RuntimeEnvironment
.
application
catalog
)
;
verify
(
catalog
never
(
)
)
.
scheduleDownload
(
content
)
;
}
}
