package
org
.
mozilla
.
gecko
.
media
;
import
android
.
content
.
Intent
;
import
junit
.
framework
.
Assert
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mockito
.
internal
.
util
.
reflection
.
Whitebox
;
import
org
.
mozilla
.
gecko
.
Tab
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
org
.
mozilla
.
gecko
.
background
.
testhelpers
.
TestRunner
;
import
org
.
mozilla
.
gecko
.
media
.
MediaControlService
.
State
;
import
org
.
robolectric
.
Robolectric
;
import
java
.
lang
.
ref
.
WeakReference
;
import
static
org
.
mockito
.
Mockito
.
doReturn
;
import
static
org
.
mockito
.
Mockito
.
mock
;
import
static
org
.
mockito
.
Mockito
.
spy
;
RunWith
(
TestRunner
.
class
)
public
class
TestMediaControlService
{
private
MediaControlService
mSpyService
;
private
Tab
mMockTab
;
Before
public
void
setUp
(
)
{
MediaControlService
service
=
Robolectric
.
buildService
(
MediaControlService
.
class
)
.
get
(
)
;
mSpyService
=
spy
(
service
)
;
mMockTab
=
mock
(
Tab
.
class
)
;
Whitebox
.
setInternalState
(
mSpyService
"
mInitialize
"
true
)
;
}
Test
public
void
testTabPlayingMedia
(
)
throws
Exception
{
Whitebox
.
setInternalState
(
mSpyService
"
mTabReference
"
new
WeakReference
<
>
(
mMockTab
)
)
;
doReturn
(
true
)
.
when
(
mMockTab
)
.
isMediaPlaying
(
)
;
mSpyService
.
onTabChanged
(
mMockTab
Tabs
.
TabEvents
.
MEDIA_PLAYING_CHANGE
"
"
)
;
State
state
=
(
State
)
Whitebox
.
getInternalState
(
mSpyService
"
mMediaState
"
)
;
Assert
.
assertEquals
(
state
State
.
PLAYING
)
;
}
Test
public
void
testTabNotPlayingMedia
(
)
throws
Exception
{
Whitebox
.
setInternalState
(
mSpyService
"
mTabReference
"
new
WeakReference
<
>
(
mMockTab
)
)
;
doReturn
(
false
)
.
when
(
mMockTab
)
.
isMediaPlaying
(
)
;
mSpyService
.
onTabChanged
(
mMockTab
Tabs
.
TabEvents
.
MEDIA_PLAYING_CHANGE
"
"
)
;
State
state
=
(
State
)
Whitebox
.
getInternalState
(
mSpyService
"
mMediaState
"
)
;
Assert
.
assertEquals
(
state
State
.
STOPPED
)
;
}
Test
public
void
testIntentForPlayingState
(
)
throws
Exception
{
Intent
intent
=
mSpyService
.
createIntentUponState
(
State
.
PLAYING
)
;
Assert
.
assertEquals
(
intent
.
getAction
(
)
MediaControlService
.
ACTION_PAUSE
)
;
}
Test
public
void
testIntentForPausedState
(
)
throws
Exception
{
Intent
intent
=
mSpyService
.
createIntentUponState
(
State
.
PAUSED
)
;
Assert
.
assertEquals
(
intent
.
getAction
(
)
MediaControlService
.
ACTION_RESUME
)
;
}
}
