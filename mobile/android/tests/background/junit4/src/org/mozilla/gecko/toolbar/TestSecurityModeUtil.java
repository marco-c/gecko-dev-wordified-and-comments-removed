package
org
.
mozilla
.
gecko
.
toolbar
;
import
org
.
junit
.
Assert
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
.
MixedMode
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
.
SecurityMode
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
.
TrackingMode
;
import
org
.
mozilla
.
gecko
.
background
.
testhelpers
.
TestRunner
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
mockito
.
Mockito
.
doReturn
;
import
static
org
.
mockito
.
Mockito
.
spy
;
import
static
org
.
mozilla
.
gecko
.
toolbar
.
SecurityModeUtil
.
IconType
;
import
static
org
.
mozilla
.
gecko
.
toolbar
.
SecurityModeUtil
.
resolve
;
RunWith
(
TestRunner
.
class
)
public
class
TestSecurityModeUtil
{
private
SiteIdentity
identity
;
Before
public
void
setUp
(
)
{
identity
=
spy
(
new
SiteIdentity
(
)
)
;
}
Test
public
void
testNoSiteIdentity
(
)
{
assertEquals
(
IconType
.
UNKNOWN
resolve
(
null
)
)
;
assertEquals
(
IconType
.
SEARCH
resolve
(
null
"
about
:
home
"
)
)
;
assertEquals
(
IconType
.
UNKNOWN
resolve
(
null
"
about
:
firefox
"
)
)
;
assertEquals
(
IconType
.
UNKNOWN
resolve
(
null
"
https
:
/
/
mozilla
.
com
"
)
)
;
}
Test
public
void
testSecurityException
(
)
{
doReturn
(
true
)
.
when
(
identity
)
.
isSecurityException
(
)
;
doReturn
(
SecurityMode
.
UNKNOWN
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
SEARCH
resolve
(
identity
"
about
:
home
"
)
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
)
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
"
https
:
/
/
mozilla
.
com
"
)
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
"
about
:
firefox
"
)
)
;
doReturn
(
SecurityMode
.
CHROMEUI
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
"
about
:
firefox
"
)
)
;
doReturn
(
TrackingMode
.
TRACKING_CONTENT_BLOCKED
)
.
when
(
identity
)
.
getTrackingMode
(
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
)
)
;
doReturn
(
TrackingMode
.
TRACKING_CONTENT_LOADED
)
.
when
(
identity
)
.
getTrackingMode
(
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
)
)
;
doReturn
(
MixedMode
.
LOADED
)
.
when
(
identity
)
.
getMixedModeDisplay
(
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
)
)
;
doReturn
(
MixedMode
.
BLOCKED
)
.
when
(
identity
)
.
getMixedModeDisplay
(
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
)
)
;
doReturn
(
MixedMode
.
LOADED
)
.
when
(
identity
)
.
getMixedModeActive
(
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
)
)
;
doReturn
(
MixedMode
.
BLOCKED
)
.
when
(
identity
)
.
getMixedModeActive
(
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
)
)
;
}
Test
public
void
testTrackingContentLoaded
(
)
{
doReturn
(
false
)
.
when
(
identity
)
.
isSecurityException
(
)
;
doReturn
(
TrackingMode
.
TRACKING_CONTENT_LOADED
)
.
when
(
identity
)
.
getTrackingMode
(
)
;
doReturn
(
SecurityMode
.
UNKNOWN
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
SEARCH
resolve
(
identity
"
about
:
home
"
)
)
;
assertEquals
(
IconType
.
TRACKING_CONTENT_LOADED
resolve
(
identity
)
)
;
assertEquals
(
IconType
.
TRACKING_CONTENT_LOADED
resolve
(
identity
"
https
:
/
/
mozilla
.
com
"
)
)
;
doReturn
(
SecurityMode
.
CHROMEUI
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
TRACKING_CONTENT_LOADED
resolve
(
identity
)
)
;
doReturn
(
SecurityMode
.
VERIFIED
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
TRACKING_CONTENT_LOADED
resolve
(
identity
)
)
;
doReturn
(
SecurityMode
.
IDENTIFIED
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
TRACKING_CONTENT_LOADED
resolve
(
identity
)
)
;
}
Test
public
void
testTrackingContentBlocked
(
)
{
doReturn
(
false
)
.
when
(
identity
)
.
isSecurityException
(
)
;
doReturn
(
TrackingMode
.
TRACKING_CONTENT_BLOCKED
)
.
when
(
identity
)
.
getTrackingMode
(
)
;
doReturn
(
SecurityMode
.
UNKNOWN
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
SEARCH
resolve
(
identity
"
about
:
home
"
)
)
;
assertEquals
(
IconType
.
TRACKING_CONTENT_BLOCKED
resolve
(
identity
)
)
;
doReturn
(
SecurityMode
.
CHROMEUI
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
TRACKING_CONTENT_BLOCKED
resolve
(
identity
)
)
;
doReturn
(
SecurityMode
.
VERIFIED
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
TRACKING_CONTENT_BLOCKED
resolve
(
identity
)
)
;
doReturn
(
SecurityMode
.
IDENTIFIED
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
TRACKING_CONTENT_BLOCKED
resolve
(
identity
)
)
;
}
Test
public
void
testMixedMode
(
)
{
doReturn
(
false
)
.
when
(
identity
)
.
isSecurityException
(
)
;
doReturn
(
TrackingMode
.
UNKNOWN
)
.
when
(
identity
)
.
getTrackingMode
(
)
;
doReturn
(
MixedMode
.
LOADED
)
.
when
(
identity
)
.
getMixedModeActive
(
)
;
doReturn
(
MixedMode
.
LOADED
)
.
when
(
identity
)
.
getMixedModeDisplay
(
)
;
doReturn
(
SecurityMode
.
UNKNOWN
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
SEARCH
resolve
(
identity
"
about
:
home
"
)
)
;
assertEquals
(
IconType
.
LOCK_INSECURE
resolve
(
identity
)
)
;
doReturn
(
MixedMode
.
LOADED
)
.
when
(
identity
)
.
getMixedModeActive
(
)
;
doReturn
(
MixedMode
.
BLOCKED
)
.
when
(
identity
)
.
getMixedModeDisplay
(
)
;
assertEquals
(
IconType
.
LOCK_INSECURE
resolve
(
identity
)
)
;
doReturn
(
MixedMode
.
BLOCKED
)
.
when
(
identity
)
.
getMixedModeActive
(
)
;
doReturn
(
MixedMode
.
LOADED
)
.
when
(
identity
)
.
getMixedModeDisplay
(
)
;
assertEquals
(
IconType
.
WARNING
resolve
(
identity
)
)
;
}
Test
public
void
testSecurityMode
(
)
{
doReturn
(
false
)
.
when
(
identity
)
.
isSecurityException
(
)
;
doReturn
(
TrackingMode
.
UNKNOWN
)
.
when
(
identity
)
.
getTrackingMode
(
)
;
doReturn
(
MixedMode
.
BLOCKED
)
.
when
(
identity
)
.
getMixedModeActive
(
)
;
doReturn
(
MixedMode
.
BLOCKED
)
.
when
(
identity
)
.
getMixedModeDisplay
(
)
;
doReturn
(
SecurityMode
.
UNKNOWN
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
SEARCH
resolve
(
identity
"
about
:
home
"
)
)
;
doReturn
(
SecurityMode
.
CHROMEUI
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
DEFAULT
resolve
(
identity
)
)
;
doReturn
(
SecurityMode
.
VERIFIED
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
LOCK_SECURE
resolve
(
identity
)
)
;
doReturn
(
SecurityMode
.
IDENTIFIED
)
.
when
(
identity
)
.
getSecurityMode
(
)
;
assertEquals
(
IconType
.
LOCK_SECURE
resolve
(
identity
)
)
;
}
Test
public
void
testIsTrackingProtectionEnabled
(
)
{
Assert
.
assertFalse
(
SecurityModeUtil
.
isTrackingProtectionEnabled
(
null
)
)
;
doReturn
(
TrackingMode
.
UNKNOWN
)
.
when
(
identity
)
.
getTrackingMode
(
)
;
Assert
.
assertFalse
(
SecurityModeUtil
.
isTrackingProtectionEnabled
(
identity
)
)
;
doReturn
(
TrackingMode
.
TRACKING_CONTENT_LOADED
)
.
when
(
identity
)
.
getTrackingMode
(
)
;
Assert
.
assertFalse
(
SecurityModeUtil
.
isTrackingProtectionEnabled
(
identity
)
)
;
doReturn
(
TrackingMode
.
TRACKING_CONTENT_BLOCKED
)
.
when
(
identity
)
.
getTrackingMode
(
)
;
Assert
.
assertTrue
(
SecurityModeUtil
.
isTrackingProtectionEnabled
(
identity
)
)
;
}
}
