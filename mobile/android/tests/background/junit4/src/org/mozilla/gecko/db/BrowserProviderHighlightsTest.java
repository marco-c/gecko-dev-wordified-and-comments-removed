package
org
.
mozilla
.
gecko
.
db
;
import
android
.
content
.
ContentProviderClient
;
import
android
.
content
.
ContentValues
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
android
.
os
.
RemoteException
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Assert
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
gecko
.
background
.
testhelpers
.
TestRunner
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
android
.
BrowserContractHelpers
;
import
org
.
mozilla
.
gecko
.
sync
.
setup
.
Constants
;
import
java
.
util
.
UUID
;
import
java
.
util
.
concurrent
.
TimeUnit
;
import
static
org
.
mozilla
.
gecko
.
db
.
BrowserContract
.
PARAM_PROFILE
;
RunWith
(
TestRunner
.
class
)
public
class
BrowserProviderHighlightsTest
extends
BrowserProviderHistoryVisitsTestBase
{
private
ContentProviderClient
highlightsClient
;
private
ContentProviderClient
bookmarksClient
;
private
Uri
highlightsTestUri
;
private
Uri
bookmarksTestUri
;
Before
public
void
setUp
(
)
throws
Exception
{
super
.
setUp
(
)
;
final
Uri
highlightsClientUri
=
BrowserContract
.
Highlights
.
CONTENT_URI
.
buildUpon
(
)
.
appendQueryParameter
(
PARAM_PROFILE
Constants
.
DEFAULT_PROFILE
)
.
build
(
)
;
highlightsClient
=
contentResolver
.
acquireContentProviderClient
(
highlightsClientUri
)
;
bookmarksClient
=
contentResolver
.
acquireContentProviderClient
(
BrowserContractHelpers
.
BOOKMARKS_CONTENT_URI
)
;
highlightsTestUri
=
testUri
(
BrowserContract
.
Highlights
.
CONTENT_URI
)
;
bookmarksTestUri
=
testUri
(
BrowserContract
.
Bookmarks
.
CONTENT_URI
)
;
}
After
public
void
tearDown
(
)
{
highlightsClient
.
release
(
)
;
bookmarksClient
.
release
(
)
;
super
.
tearDown
(
)
;
}
Test
public
void
testEmptyDatabase
(
)
throws
Exception
{
final
Cursor
cursor
=
highlightsClient
.
query
(
highlightsTestUri
null
null
null
null
)
;
Assert
.
assertNotNull
(
cursor
)
;
Assert
.
assertEquals
(
0
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
}
Test
public
void
testOnlyRecentHistory
(
)
throws
Exception
{
final
long
now
=
System
.
currentTimeMillis
(
)
;
final
long
fiveMinutesAgo
=
now
-
1000
*
60
*
5
;
final
long
twentyMinutes
=
now
-
1000
*
60
*
20
;
insertHistoryItem
(
createUniqueUrl
(
)
createGUID
(
)
now
1
createUniqueTitle
(
)
)
;
insertHistoryItem
(
createUniqueUrl
(
)
createGUID
(
)
fiveMinutesAgo
1
createUniqueTitle
(
)
)
;
insertHistoryItem
(
createUniqueUrl
(
)
createGUID
(
)
twentyMinutes
1
createUniqueTitle
(
)
)
;
final
Cursor
cursor
=
highlightsClient
.
query
(
highlightsTestUri
null
null
null
null
)
;
Assert
.
assertNotNull
(
cursor
)
;
Assert
.
assertEquals
(
0
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
}
Test
public
void
testHighlightsArePickedFromHistory
(
)
throws
Exception
{
final
String
url1
=
createUniqueUrl
(
)
;
final
String
url2
=
createUniqueUrl
(
)
;
final
String
title1
=
createUniqueTitle
(
)
;
final
String
title2
=
createUniqueTitle
(
)
;
final
long
oneHourAgo
=
System
.
currentTimeMillis
(
)
-
1000
*
60
*
60
;
final
long
fiveDaysAgo
=
System
.
currentTimeMillis
(
)
-
1000
*
60
*
60
*
24
*
5
;
insertHistoryItem
(
url1
createGUID
(
)
oneHourAgo
1
title1
)
;
insertHistoryItem
(
url2
createGUID
(
)
fiveDaysAgo
1
title2
)
;
final
Cursor
cursor
=
highlightsClient
.
query
(
highlightsTestUri
null
null
null
null
)
;
Assert
.
assertNotNull
(
cursor
)
;
Assert
.
assertEquals
(
2
cursor
.
getCount
(
)
)
;
assertCursorContainsEntry
(
cursor
url1
title1
)
;
assertCursorContainsEntry
(
cursor
url2
title2
)
;
cursor
.
close
(
)
;
}
Test
public
void
testOftenVisitedPagesAreNotPicked
(
)
throws
Exception
{
final
String
url1
=
createUniqueUrl
(
)
;
final
String
title1
=
createUniqueTitle
(
)
;
final
long
oneHourAgo
=
System
.
currentTimeMillis
(
)
-
1000
*
60
*
60
;
final
long
fiveDaysAgo
=
System
.
currentTimeMillis
(
)
-
1000
*
60
*
60
*
24
*
5
;
insertHistoryItem
(
url1
createGUID
(
)
oneHourAgo
2
title1
)
;
insertHistoryItem
(
createUniqueUrl
(
)
createGUID
(
)
fiveDaysAgo
25
createUniqueTitle
(
)
)
;
final
Cursor
cursor
=
highlightsClient
.
query
(
highlightsTestUri
null
null
null
null
)
;
Assert
.
assertNotNull
(
cursor
)
;
Assert
.
assertEquals
(
1
cursor
.
getCount
(
)
)
;
cursor
.
moveToNext
(
)
;
assertCursor
(
cursor
url1
title1
)
;
cursor
.
close
(
)
;
}
Test
public
void
testHistoryWithoutTitlesIsNotPicked
(
)
throws
Exception
{
final
String
url1
=
createUniqueUrl
(
)
;
final
String
url2
=
createUniqueUrl
(
)
;
final
String
title1
=
"
"
;
final
String
title2
=
createUniqueTitle
(
)
;
final
long
oneHourAgo
=
System
.
currentTimeMillis
(
)
-
1000
*
60
*
60
;
final
long
fiveDaysAgo
=
System
.
currentTimeMillis
(
)
-
1000
*
60
*
60
*
24
*
5
;
insertHistoryItem
(
url1
createGUID
(
)
oneHourAgo
1
title1
)
;
insertHistoryItem
(
url2
createGUID
(
)
fiveDaysAgo
1
title2
)
;
final
Cursor
cursor
=
highlightsClient
.
query
(
highlightsTestUri
null
null
null
null
)
;
Assert
.
assertNotNull
(
cursor
)
;
Assert
.
assertEquals
(
1
cursor
.
getCount
(
)
)
;
cursor
.
moveToNext
(
)
;
assertCursor
(
cursor
url2
title2
)
;
cursor
.
close
(
)
;
}
Test
public
void
testPickingBookmarkForHighlights
(
)
throws
Exception
{
final
long
oneHourAgo
=
System
.
currentTimeMillis
(
)
-
1000
*
60
*
60
;
final
long
fiveDaysAgo
=
System
.
currentTimeMillis
(
)
-
1000
*
60
*
60
*
24
*
5
;
final
String
url1
=
createUniqueUrl
(
)
;
final
String
url2
=
createUniqueUrl
(
)
;
final
String
title1
=
createUniqueTitle
(
)
;
final
String
title2
=
createUniqueTitle
(
)
;
insertBookmarkItem
(
url1
title1
oneHourAgo
)
;
insertBookmarkItem
(
url2
title2
fiveDaysAgo
)
;
final
Cursor
cursor
=
highlightsClient
.
query
(
highlightsTestUri
null
null
null
null
)
;
Assert
.
assertNotNull
(
cursor
)
;
Assert
.
assertEquals
(
1
cursor
.
getCount
(
)
)
;
cursor
.
moveToNext
(
)
;
assertCursor
(
cursor
url1
title1
)
;
cursor
.
close
(
)
;
}
Test
public
void
testOftenVisitedBookmarksWillNotBePicked
(
)
throws
Exception
{
final
String
url
=
createUniqueUrl
(
)
;
final
long
oneHourAgo
=
System
.
currentTimeMillis
(
)
-
1000
*
60
*
60
;
insertBookmarkItem
(
url
createUniqueTitle
(
)
oneHourAgo
)
;
insertHistoryItem
(
url
createGUID
(
)
oneHourAgo
25
createUniqueTitle
(
)
)
;
final
Cursor
cursor
=
highlightsClient
.
query
(
highlightsTestUri
null
null
null
null
)
;
Assert
.
assertNotNull
(
cursor
)
;
Assert
.
assertEquals
(
0
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
}
Test
public
void
testSameUrlIsNotPickedFromHistoryAndBookmarks
(
)
throws
Exception
{
final
String
url
=
createUniqueUrl
(
)
;
final
long
oneHourAgo
=
System
.
currentTimeMillis
(
)
-
1000
*
60
*
60
;
insertBookmarkItem
(
url
createUniqueTitle
(
)
oneHourAgo
)
;
insertHistoryItem
(
url
createGUID
(
)
oneHourAgo
2
createUniqueTitle
(
)
)
;
final
Cursor
cursor
=
highlightsClient
.
query
(
highlightsTestUri
null
null
null
null
)
;
Assert
.
assertNotNull
(
cursor
)
;
Assert
.
assertEquals
(
1
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
}
Test
public
void
testVeryOldBookmarksAreNotSelected
(
)
throws
Exception
{
final
long
oneWeekAgo
=
System
.
currentTimeMillis
(
)
-
TimeUnit
.
DAYS
.
toMillis
(
7
)
;
final
long
oneMonthAgo
=
System
.
currentTimeMillis
(
)
-
TimeUnit
.
DAYS
.
toMillis
(
31
)
;
final
long
oneYearAgo
=
System
.
currentTimeMillis
(
)
-
TimeUnit
.
DAYS
.
toMillis
(
365
)
;
insertBookmarkItem
(
createUniqueUrl
(
)
createUniqueTitle
(
)
oneWeekAgo
)
;
insertBookmarkItem
(
createUniqueUrl
(
)
createUniqueTitle
(
)
oneMonthAgo
)
;
insertBookmarkItem
(
createUniqueUrl
(
)
createUniqueTitle
(
)
oneYearAgo
)
;
final
Cursor
cursor
=
highlightsClient
.
query
(
highlightsTestUri
null
null
null
null
)
;
Assert
.
assertNotNull
(
cursor
)
;
Assert
.
assertEquals
(
0
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
}
private
void
insertBookmarkItem
(
String
url
String
title
long
createdAt
)
throws
RemoteException
{
ContentValues
values
=
new
ContentValues
(
)
;
values
.
put
(
BrowserContract
.
Bookmarks
.
URL
url
)
;
values
.
put
(
BrowserContract
.
Bookmarks
.
TITLE
title
)
;
values
.
put
(
BrowserContract
.
Bookmarks
.
PARENT
0
)
;
values
.
put
(
BrowserContract
.
Bookmarks
.
TYPE
BrowserContract
.
Bookmarks
.
TYPE_BOOKMARK
)
;
values
.
put
(
BrowserContract
.
Bookmarks
.
DATE_CREATED
createdAt
)
;
bookmarksClient
.
insert
(
bookmarksTestUri
values
)
;
}
private
void
assertCursor
(
Cursor
cursor
String
url
String
title
)
{
final
String
actualTitle
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Combined
.
TITLE
)
)
;
Assert
.
assertEquals
(
title
actualTitle
)
;
final
String
actualUrl
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Combined
.
URL
)
)
;
Assert
.
assertEquals
(
url
actualUrl
)
;
}
private
void
assertCursorContainsEntry
(
Cursor
cursor
String
url
String
title
)
{
cursor
.
moveToFirst
(
)
;
do
{
final
String
actualTitle
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Combined
.
TITLE
)
)
;
final
String
actualUrl
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Combined
.
URL
)
)
;
if
(
actualTitle
.
equals
(
title
)
&
&
actualUrl
.
equals
(
url
)
)
{
return
;
}
}
while
(
cursor
.
moveToNext
(
)
)
;
Assert
.
fail
(
"
Could
not
find
entry
title
=
"
+
title
+
"
url
=
"
+
url
)
;
}
private
String
createUniqueUrl
(
)
{
return
new
Uri
.
Builder
(
)
.
scheme
(
"
https
"
)
.
authority
(
UUID
.
randomUUID
(
)
.
toString
(
)
+
"
.
example
.
org
"
)
.
appendPath
(
UUID
.
randomUUID
(
)
.
toString
(
)
)
.
appendPath
(
UUID
.
randomUUID
(
)
.
toString
(
)
)
.
build
(
)
.
toString
(
)
;
}
private
String
createUniqueTitle
(
)
{
return
"
Title
"
+
UUID
.
randomUUID
(
)
.
toString
(
)
;
}
private
String
createGUID
(
)
{
return
UUID
.
randomUUID
(
)
.
toString
(
)
;
}
}
