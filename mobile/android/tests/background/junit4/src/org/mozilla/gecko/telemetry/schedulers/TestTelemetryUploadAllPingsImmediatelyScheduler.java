package
org
.
mozilla
.
gecko
.
telemetry
.
schedulers
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mockito
.
ArgumentCaptor
;
import
org
.
mozilla
.
gecko
.
background
.
testhelpers
.
TestRunner
;
import
org
.
mozilla
.
gecko
.
telemetry
.
TelemetryUploadService
;
import
org
.
mozilla
.
gecko
.
telemetry
.
stores
.
TelemetryPingStore
;
import
static
junit
.
framework
.
Assert
.
*
;
import
static
org
.
mockito
.
Mockito
.
*
;
RunWith
(
TestRunner
.
class
)
public
class
TestTelemetryUploadAllPingsImmediatelyScheduler
{
private
TelemetryUploadAllPingsImmediatelyScheduler
testScheduler
;
private
TelemetryPingStore
testStore
;
Before
public
void
setUp
(
)
{
testScheduler
=
new
TelemetryUploadAllPingsImmediatelyScheduler
(
)
;
testStore
=
mock
(
TelemetryPingStore
.
class
)
;
}
Test
public
void
testReadyToUpload
(
)
{
assertTrue
(
"
Scheduler
is
always
ready
to
upload
"
testScheduler
.
isReadyToUpload
(
testStore
)
)
;
}
Test
public
void
testScheduleUpload
(
)
{
final
Context
context
=
mock
(
Context
.
class
)
;
testScheduler
.
scheduleUpload
(
context
testStore
)
;
final
ArgumentCaptor
<
Intent
>
intentCaptor
=
ArgumentCaptor
.
forClass
(
Intent
.
class
)
;
verify
(
context
)
.
startService
(
intentCaptor
.
capture
(
)
)
;
final
Intent
actualIntent
=
intentCaptor
.
getValue
(
)
;
assertEquals
(
"
Intent
action
is
upload
"
TelemetryUploadService
.
ACTION_UPLOAD
actualIntent
.
getAction
(
)
)
;
assertTrue
(
"
Intent
contains
store
"
actualIntent
.
hasExtra
(
TelemetryUploadService
.
EXTRA_STORE
)
)
;
assertEquals
(
"
Intent
class
target
is
upload
service
"
TelemetryUploadService
.
class
.
getName
(
)
actualIntent
.
getComponent
(
)
.
getClassName
(
)
)
;
}
}
