package
org
.
mozilla
.
gecko
.
home
;
import
android
.
content
.
Context
;
import
android
.
util
.
Pair
;
import
android
.
util
.
SparseArray
;
import
org
.
json
.
JSONArray
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
gecko
.
background
.
testhelpers
.
TestRunner
;
import
org
.
mozilla
.
gecko
.
home
.
HomeConfig
.
PanelConfig
;
import
org
.
mozilla
.
gecko
.
home
.
HomeConfig
.
PanelType
;
import
org
.
robolectric
.
RuntimeEnvironment
;
import
java
.
util
.
EnumSet
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Set
;
import
static
org
.
junit
.
Assert
.
*
;
RunWith
(
TestRunner
.
class
)
public
class
TestHomeConfigPrefsBackendMigration
{
final
SparseArray
<
Pair
<
PanelType
[
]
PanelType
[
]
>
>
migrationConstellations
=
new
SparseArray
<
>
(
)
;
{
migrationConstellations
.
put
(
6
new
Pair
<
>
(
new
PanelType
[
]
{
PanelType
.
TOP_SITES
PanelType
.
BOOKMARKS
PanelType
.
COMBINED_HISTORY
PanelType
.
DEPRECATED_RECENT_TABS
}
new
PanelType
[
]
{
PanelType
.
TOP_SITES
PanelType
.
BOOKMARKS
PanelType
.
COMBINED_HISTORY
PanelType
.
COMBINED_HISTORY
}
)
)
;
migrationConstellations
.
put
(
7
new
Pair
<
>
(
new
PanelType
[
]
{
PanelType
.
TOP_SITES
PanelType
.
BOOKMARKS
PanelType
.
COMBINED_HISTORY
}
new
PanelType
[
]
{
PanelType
.
TOP_SITES
PanelType
.
BOOKMARKS
PanelType
.
COMBINED_HISTORY
}
)
)
;
migrationConstellations
.
put
(
8
new
Pair
<
>
(
new
PanelType
[
]
{
PanelType
.
TOP_SITES
PanelType
.
BOOKMARKS
PanelType
.
COMBINED_HISTORY
}
new
PanelType
[
]
{
}
)
)
;
}
private
JSONArray
createConfigsForList
(
Context
context
PanelType
[
]
panels
int
defaultIndex
)
throws
JSONException
{
if
(
defaultIndex
<
0
|
|
defaultIndex
>
=
panels
.
length
)
{
throw
new
IllegalArgumentException
(
"
defaultIndex
must
point
to
panel
in
the
array
"
)
;
}
final
JSONArray
jsonPanels
=
new
JSONArray
(
)
;
for
(
int
i
=
0
;
i
<
panels
.
length
;
i
+
+
)
{
final
PanelType
panel
=
panels
[
i
]
;
final
PanelConfig
config
;
if
(
i
=
=
defaultIndex
)
{
config
=
HomeConfig
.
createBuiltinPanelConfig
(
context
panel
EnumSet
.
of
(
PanelConfig
.
Flags
.
DEFAULT_PANEL
)
)
;
}
else
{
config
=
HomeConfig
.
createBuiltinPanelConfig
(
context
panel
)
;
}
jsonPanels
.
put
(
config
.
toJSON
(
)
)
;
}
return
jsonPanels
;
}
private
PanelType
getDefaultPanel
(
final
JSONArray
jsonPanels
)
throws
JSONException
{
assertTrue
(
"
panel
list
must
not
be
empty
"
jsonPanels
.
length
(
)
>
0
)
;
for
(
int
i
=
0
;
i
<
jsonPanels
.
length
(
)
;
i
+
+
)
{
final
JSONObject
jsonPanelConfig
=
jsonPanels
.
getJSONObject
(
i
)
;
final
PanelConfig
panelConfig
=
new
PanelConfig
(
jsonPanelConfig
)
;
if
(
panelConfig
.
isDefault
(
)
)
{
return
panelConfig
.
getType
(
)
;
}
}
return
null
;
}
private
void
checkListContainsExpectedPanels
(
JSONArray
jsonPanels
PanelType
[
]
expected
)
throws
JSONException
{
final
Set
<
PanelType
>
expectedSet
=
new
HashSet
<
>
(
)
;
for
(
PanelType
panelType
:
expected
)
{
expectedSet
.
add
(
panelType
)
;
}
for
(
int
i
=
0
;
i
<
jsonPanels
.
length
(
)
;
i
+
+
)
{
final
JSONObject
jsonPanelConfig
=
jsonPanels
.
getJSONObject
(
i
)
;
final
PanelType
panelType
=
new
PanelConfig
(
jsonPanelConfig
)
.
getType
(
)
;
assertTrue
(
"
Unexpected
panel
of
type
"
+
panelType
.
name
(
)
+
"
found
in
list
"
expectedSet
.
contains
(
panelType
)
)
;
expectedSet
.
remove
(
panelType
)
;
}
assertEquals
(
"
Expected
panels
not
contained
in
list
"
0
expectedSet
.
size
(
)
)
;
}
Test
public
void
testMigrationRetainsDefaultAfter6
(
)
throws
JSONException
{
final
Context
context
=
RuntimeEnvironment
.
application
;
final
Pair
<
PanelType
[
]
PanelType
[
]
>
finalConstellation
=
migrationConstellations
.
get
(
HomeConfigPrefsBackend
.
VERSION
)
;
assertNotNull
(
"
It
looks
like
you
added
a
HomeConfig
migration
please
add
an
appropriate
entry
to
migrationConstellations
"
finalConstellation
)
;
final
int
firstTestedVersion
=
HomeConfigPrefsBackend
.
VERSION
-
(
migrationConstellations
.
size
(
)
-
1
)
;
for
(
int
testVersion
=
HomeConfigPrefsBackend
.
VERSION
-
1
;
testVersion
>
=
firstTestedVersion
;
testVersion
-
-
)
{
final
Pair
<
PanelType
[
]
PanelType
[
]
>
currentConstellation
=
migrationConstellations
.
get
(
testVersion
)
;
assertNotNull
(
"
No
constellation
for
version
"
+
testVersion
+
"
-
you
must
provide
a
constellation
for
every
version
upgrade
in
the
list
"
currentConstellation
)
;
final
PanelType
[
]
inputList
=
currentConstellation
.
first
;
final
PanelType
[
]
expectedDefaults
=
currentConstellation
.
second
;
for
(
int
i
=
0
;
i
<
inputList
.
length
;
i
+
+
)
{
JSONArray
jsonPanels
=
createConfigsForList
(
context
inputList
i
)
;
jsonPanels
=
HomeConfigPrefsBackend
.
migratePrefsFromVersionToVersion
(
context
testVersion
testVersion
+
1
jsonPanels
null
)
;
final
PanelType
oldDefaultPanelType
=
inputList
[
i
]
;
final
PanelType
expectedNewDefaultPanelType
=
expectedDefaults
[
i
]
;
final
PanelType
newDefaultPanelType
=
getDefaultPanel
(
jsonPanels
)
;
assertNotNull
(
"
No
default
panel
set
when
migrating
from
"
+
testVersion
+
"
to
"
+
testVersion
+
1
+
"
with
previous
default
as
"
+
oldDefaultPanelType
.
name
(
)
newDefaultPanelType
)
;
assertEquals
(
"
Migration
changed
to
unexpected
default
panel
-
migrating
from
"
+
oldDefaultPanelType
.
name
(
)
+
"
expected
"
+
expectedNewDefaultPanelType
.
name
(
)
+
"
but
got
"
+
newDefaultPanelType
.
name
(
)
newDefaultPanelType
expectedNewDefaultPanelType
)
;
final
PanelType
[
]
expectedOutputList
=
migrationConstellations
.
get
(
testVersion
+
1
)
.
first
;
assertEquals
(
"
Number
of
panels
after
migration
doesn
'
t
match
expected
count
"
jsonPanels
.
length
(
)
expectedOutputList
.
length
)
;
checkListContainsExpectedPanels
(
jsonPanels
expectedOutputList
)
;
}
}
}
}
