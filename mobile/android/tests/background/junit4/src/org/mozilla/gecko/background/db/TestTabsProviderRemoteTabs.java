package
org
.
mozilla
.
gecko
.
background
.
db
;
import
android
.
content
.
ContentProviderClient
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
ContentValues
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Assert
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
gecko
.
GeckoProfile
;
import
org
.
mozilla
.
gecko
.
background
.
testhelpers
.
TestRunner
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
LocalTabsAccessor
;
import
org
.
mozilla
.
gecko
.
db
.
RemoteClient
;
import
org
.
mozilla
.
gecko
.
db
.
TabsProvider
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
android
.
BrowserContractHelpers
;
import
org
.
robolectric
.
RuntimeEnvironment
;
import
org
.
robolectric
.
internal
.
runtime
.
RuntimeAdapter
;
import
org
.
robolectric
.
shadows
.
ShadowContentResolver
;
import
java
.
util
.
List
;
RunWith
(
TestRunner
.
class
)
public
class
TestTabsProviderRemoteTabs
{
private
static
final
long
ONE_DAY_IN_MILLISECONDS
=
1000
*
60
*
60
*
24
;
private
static
final
long
ONE_WEEK_IN_MILLISECONDS
=
7
*
ONE_DAY_IN_MILLISECONDS
;
private
static
final
long
THREE_WEEKS_IN_MILLISECONDS
=
3
*
ONE_WEEK_IN_MILLISECONDS
;
private
static
final
String
CLIENT_LOCAL_NAME
=
"
our
local
"
;
private
static
final
String
CLIENT_REMOTE1_NAME
=
"
The
remote1
"
;
private
static
final
String
CLIENT_REMOTE2_NAME
=
"
another
remote2
"
;
protected
TabsProvider
provider
;
Before
public
void
setUp
(
)
{
provider
=
new
TabsProvider
(
)
;
provider
.
onCreate
(
)
;
ShadowContentResolver
.
registerProvider
(
BrowserContract
.
TABS_AUTHORITY
new
DelegatingTestContentProvider
(
provider
)
)
;
}
After
public
void
tearDown
(
)
throws
Exception
{
provider
.
shutdown
(
)
;
provider
=
null
;
}
protected
ContentProviderClient
getClientsClient
(
)
{
final
ShadowContentResolver
cr
=
new
ShadowContentResolver
(
)
;
return
cr
.
acquireContentProviderClient
(
BrowserContractHelpers
.
CLIENTS_CONTENT_URI
)
;
}
Test
public
void
testGetClientsWithoutTabsNoStaleSortedFromCursor
(
)
throws
Exception
{
final
Uri
uri
=
BrowserContractHelpers
.
CLIENTS_CONTENT_URI
;
final
ContentProviderClient
cpc
=
getClientsClient
(
)
;
final
LocalTabsAccessor
accessor
=
new
LocalTabsAccessor
(
"
test
"
)
;
try
{
cpc
.
delete
(
uri
null
null
)
;
Cursor
allClients
=
cpc
.
query
(
uri
null
null
null
null
)
;
try
{
Assert
.
assertEquals
(
0
allClients
.
getCount
(
)
)
;
}
finally
{
allClients
.
close
(
)
;
}
final
long
now
=
System
.
currentTimeMillis
(
)
;
final
ContentValues
local
=
new
ContentValues
(
)
;
local
.
put
(
BrowserContract
.
Clients
.
NAME
CLIENT_LOCAL_NAME
)
;
local
.
put
(
BrowserContract
.
Clients
.
LAST_MODIFIED
now
+
1
)
;
final
ContentValues
remote1
=
new
ContentValues
(
)
;
remote1
.
put
(
BrowserContract
.
Clients
.
GUID
"
guid1
"
)
;
remote1
.
put
(
BrowserContract
.
Clients
.
NAME
CLIENT_REMOTE1_NAME
)
;
remote1
.
put
(
BrowserContract
.
Clients
.
LAST_MODIFIED
now
+
2
)
;
final
ContentValues
remote2
=
new
ContentValues
(
)
;
remote2
.
put
(
BrowserContract
.
Clients
.
GUID
"
guid2
"
)
;
remote2
.
put
(
BrowserContract
.
Clients
.
NAME
CLIENT_REMOTE2_NAME
)
;
remote2
.
put
(
BrowserContract
.
Clients
.
LAST_MODIFIED
now
+
3
)
;
ContentValues
[
]
values
=
new
ContentValues
[
]
{
local
remote1
remote2
}
;
int
inserted
=
cpc
.
bulkInsert
(
uri
values
)
;
Assert
.
assertEquals
(
3
inserted
)
;
allClients
=
cpc
.
query
(
BrowserContract
.
Clients
.
CONTENT_NO_STALE_SORTED_URI
null
null
null
null
)
;
try
{
CursorDumper
.
dumpCursor
(
allClients
)
;
Assert
.
assertEquals
(
3
allClients
.
getCount
(
)
)
;
final
List
<
RemoteClient
>
clients
=
accessor
.
getClientsWithoutTabsNoStaleSortedFromCursor
(
allClients
)
;
Assert
.
assertEquals
(
3
clients
.
size
(
)
)
;
for
(
RemoteClient
client
:
clients
)
{
Assert
.
assertNotNull
(
client
.
tabs
)
;
Assert
.
assertEquals
(
0
client
.
tabs
.
size
(
)
)
;
}
Assert
.
assertEquals
(
CLIENT_REMOTE2_NAME
clients
.
get
(
0
)
.
name
)
;
Assert
.
assertEquals
(
CLIENT_LOCAL_NAME
clients
.
get
(
1
)
.
name
)
;
Assert
.
assertEquals
(
CLIENT_REMOTE1_NAME
clients
.
get
(
2
)
.
name
)
;
}
finally
{
allClients
.
close
(
)
;
}
final
ContentValues
remoteTab1
=
new
ContentValues
(
)
;
remoteTab1
.
put
(
BrowserContract
.
Tabs
.
CLIENT_GUID
"
guid1
"
)
;
remoteTab1
.
put
(
BrowserContract
.
Tabs
.
TITLE
"
title1
"
)
;
remoteTab1
.
put
(
BrowserContract
.
Tabs
.
URL
"
http
:
/
/
test
.
com
/
test1
"
)
;
remoteTab1
.
put
(
BrowserContract
.
Tabs
.
HISTORY
"
[
\
"
http
:
/
/
test
.
com
/
test1
\
"
]
"
)
;
remoteTab1
.
put
(
BrowserContract
.
Tabs
.
LAST_USED
now
)
;
remoteTab1
.
put
(
BrowserContract
.
Tabs
.
POSITION
0
)
;
final
ContentValues
remoteTab2
=
new
ContentValues
(
)
;
remoteTab2
.
put
(
BrowserContract
.
Tabs
.
CLIENT_GUID
"
guid1
"
)
;
remoteTab2
.
put
(
BrowserContract
.
Tabs
.
TITLE
"
title2
"
)
;
remoteTab2
.
put
(
BrowserContract
.
Tabs
.
URL
"
http
:
/
/
test
.
com
/
test2
"
)
;
remoteTab2
.
put
(
BrowserContract
.
Tabs
.
HISTORY
"
[
\
"
http
:
/
/
test
.
com
/
test2
\
"
]
"
)
;
remoteTab2
.
put
(
BrowserContract
.
Tabs
.
LAST_USED
now
+
5
)
;
remoteTab2
.
put
(
BrowserContract
.
Tabs
.
POSITION
1
)
;
values
=
new
ContentValues
[
]
{
remoteTab1
remoteTab2
}
;
inserted
=
cpc
.
bulkInsert
(
BrowserContract
.
Tabs
.
CONTENT_URI
values
)
;
Assert
.
assertEquals
(
2
inserted
)
;
allClients
=
cpc
.
query
(
BrowserContract
.
Clients
.
CONTENT_NO_STALE_SORTED_URI
null
BrowserContract
.
Clients
.
GUID
+
"
IS
NOT
NULL
"
null
null
)
;
try
{
CursorDumper
.
dumpCursor
(
allClients
)
;
Assert
.
assertEquals
(
2
allClients
.
getCount
(
)
)
;
final
List
<
RemoteClient
>
clients
=
accessor
.
getClientsWithoutTabsNoStaleSortedFromCursor
(
allClients
)
;
Assert
.
assertEquals
(
2
clients
.
size
(
)
)
;
for
(
RemoteClient
client
:
clients
)
{
Assert
.
assertNotNull
(
client
.
guid
)
;
Assert
.
assertNotNull
(
client
.
tabs
)
;
Assert
.
assertEquals
(
0
client
.
tabs
.
size
(
)
)
;
}
Assert
.
assertEquals
(
CLIENT_REMOTE2_NAME
clients
.
get
(
0
)
.
name
)
;
Assert
.
assertEquals
(
CLIENT_REMOTE1_NAME
clients
.
get
(
1
)
.
name
)
;
}
finally
{
allClients
.
close
(
)
;
}
}
finally
{
cpc
.
release
(
)
;
}
}
Test
public
void
testGetRecentRemoteClientsUpToOneWeekOld
(
)
throws
Exception
{
final
Uri
uri
=
BrowserContractHelpers
.
CLIENTS_CONTENT_URI
;
final
ContentProviderClient
cpc
=
getClientsClient
(
)
;
final
LocalTabsAccessor
accessor
=
new
LocalTabsAccessor
(
"
test
"
)
;
final
Context
context
=
RuntimeEnvironment
.
application
.
getApplicationContext
(
)
;
try
{
cpc
.
delete
(
uri
null
null
)
;
final
Cursor
allClients
=
cpc
.
query
(
uri
null
null
null
null
)
;
try
{
Assert
.
assertEquals
(
0
allClients
.
getCount
(
)
)
;
}
finally
{
allClients
.
close
(
)
;
}
final
long
now
=
System
.
currentTimeMillis
(
)
;
final
ContentValues
local
=
new
ContentValues
(
)
;
local
.
put
(
BrowserContract
.
Clients
.
NAME
"
local
"
)
;
local
.
put
(
BrowserContract
.
Clients
.
LAST_MODIFIED
now
+
1
)
;
final
ContentValues
remote1
=
new
ContentValues
(
)
;
remote1
.
put
(
BrowserContract
.
Clients
.
GUID
"
guid1
"
)
;
remote1
.
put
(
BrowserContract
.
Clients
.
NAME
"
remote1
"
)
;
remote1
.
put
(
BrowserContract
.
Clients
.
LAST_MODIFIED
now
+
2
)
;
final
ContentValues
remote2
=
new
ContentValues
(
)
;
remote2
.
put
(
BrowserContract
.
Clients
.
GUID
"
guid2
"
)
;
remote2
.
put
(
BrowserContract
.
Clients
.
NAME
"
remote2
"
)
;
remote2
.
put
(
BrowserContract
.
Clients
.
LAST_MODIFIED
now
-
ONE_WEEK_IN_MILLISECONDS
+
ONE_DAY_IN_MILLISECONDS
)
;
final
ContentValues
remote3
=
new
ContentValues
(
)
;
remote3
.
put
(
BrowserContract
.
Clients
.
GUID
"
guid21
"
)
;
remote3
.
put
(
BrowserContract
.
Clients
.
NAME
"
remote2
"
)
;
remote3
.
put
(
BrowserContract
.
Clients
.
LAST_MODIFIED
now
-
THREE_WEEKS_IN_MILLISECONDS
-
ONE_DAY_IN_MILLISECONDS
)
;
final
ContentValues
remote4
=
new
ContentValues
(
)
;
remote4
.
put
(
BrowserContract
.
Clients
.
GUID
"
guid22
"
)
;
remote4
.
put
(
BrowserContract
.
Clients
.
NAME
"
remote2
"
)
;
remote4
.
put
(
BrowserContract
.
Clients
.
LAST_MODIFIED
now
-
THREE_WEEKS_IN_MILLISECONDS
+
ONE_DAY_IN_MILLISECONDS
)
;
final
ContentValues
remote5
=
new
ContentValues
(
)
;
remote5
.
put
(
BrowserContract
.
Clients
.
GUID
"
guid3
"
)
;
remote5
.
put
(
BrowserContract
.
Clients
.
NAME
"
remote3
"
)
;
remote5
.
put
(
BrowserContract
.
Clients
.
LAST_MODIFIED
now
-
ONE_WEEK_IN_MILLISECONDS
)
;
ContentValues
[
]
values
=
new
ContentValues
[
]
{
local
remote1
remote2
remote3
remote4
remote5
}
;
int
inserted
=
cpc
.
bulkInsert
(
uri
values
)
;
Assert
.
assertEquals
(
values
.
length
inserted
)
;
final
Cursor
remoteClients
=
accessor
.
getRemoteClientsNoStaleSorted
(
context
)
;
try
{
CursorDumper
.
dumpCursor
(
remoteClients
)
;
Assert
.
assertEquals
(
3
remoteClients
.
getCount
(
)
)
;
List
<
RemoteClient
>
recentRemoteClientsList
=
accessor
.
getClientsWithoutTabsNoStaleSortedFromCursor
(
remoteClients
)
;
Assert
.
assertEquals
(
3
recentRemoteClientsList
.
size
(
)
)
;
Assert
.
assertEquals
(
"
remote1
"
recentRemoteClientsList
.
get
(
0
)
.
name
)
;
Assert
.
assertEquals
(
"
guid1
"
recentRemoteClientsList
.
get
(
0
)
.
guid
)
;
Assert
.
assertEquals
(
"
remote2
"
recentRemoteClientsList
.
get
(
1
)
.
name
)
;
Assert
.
assertEquals
(
"
guid2
"
recentRemoteClientsList
.
get
(
1
)
.
guid
)
;
Assert
.
assertEquals
(
"
remote3
"
recentRemoteClientsList
.
get
(
2
)
.
name
)
;
Assert
.
assertEquals
(
"
guid3
"
recentRemoteClientsList
.
get
(
2
)
.
guid
)
;
}
finally
{
remoteClients
.
close
(
)
;
}
}
finally
{
cpc
.
release
(
)
;
}
}
}
