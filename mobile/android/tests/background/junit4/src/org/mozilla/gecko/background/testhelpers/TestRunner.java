package
org
.
mozilla
.
gecko
.
background
.
testhelpers
;
import
org
.
junit
.
runners
.
model
.
InitializationError
;
import
org
.
robolectric
.
RobolectricGradleTestRunner
;
import
org
.
robolectric
.
annotation
.
Config
;
import
org
.
robolectric
.
manifest
.
AndroidManifest
;
import
org
.
robolectric
.
res
.
FileFsFile
;
import
org
.
robolectric
.
res
.
FsFile
;
import
org
.
robolectric
.
util
.
Logger
;
import
org
.
robolectric
.
util
.
ReflectionHelpers
;
public
class
TestRunner
extends
RobolectricGradleTestRunner
{
private
FsFile
buildFolder
;
public
TestRunner
(
Class
<
?
>
klass
)
throws
InitializationError
{
super
(
klass
)
;
}
Override
protected
AndroidManifest
getAppManifest
(
Config
config
)
{
if
(
config
.
constants
(
)
=
=
Void
.
class
)
{
Logger
.
error
(
"
Field
'
constants
'
not
specified
in
Config
annotation
"
)
;
Logger
.
error
(
"
This
is
required
when
using
RobolectricGradleTestRunner
!
"
)
;
throw
new
RuntimeException
(
"
No
'
constants
'
field
in
Config
annotation
!
"
)
;
}
buildFolder
=
FileFsFile
.
from
(
getBuildDir
(
config
)
)
.
join
(
"
intermediates
"
)
;
final
String
type
=
getType
(
config
)
;
final
String
flavor
=
getFlavor
(
config
)
;
final
String
packageName
=
getPackageName
(
config
)
;
final
FsFile
assets
=
buildFolder
.
join
(
"
assets
"
flavor
type
)
;
;
final
FsFile
manifest
=
buildFolder
.
join
(
"
manifests
"
"
full
"
flavor
type
"
AndroidManifest
.
xml
"
)
;
final
FsFile
res
;
if
(
buildFolder
.
join
(
"
res
"
"
merged
"
)
.
exists
(
)
)
{
res
=
buildFolder
.
join
(
"
res
"
"
merged
"
flavor
type
)
;
}
else
if
(
buildFolder
.
join
(
"
res
"
)
.
exists
(
)
)
{
res
=
buildFolder
.
join
(
"
res
"
flavor
type
)
;
}
else
{
throw
new
IllegalStateException
(
"
No
resource
folder
found
"
)
;
}
Logger
.
debug
(
"
Robolectric
assets
directory
:
"
+
assets
.
getPath
(
)
)
;
Logger
.
debug
(
"
Robolectric
res
directory
:
"
+
res
.
getPath
(
)
)
;
Logger
.
debug
(
"
Robolectric
manifest
path
:
"
+
manifest
.
getPath
(
)
)
;
Logger
.
debug
(
"
Robolectric
package
name
:
"
+
packageName
)
;
return
new
AndroidManifest
(
manifest
res
assets
packageName
)
;
}
private
static
String
getType
(
Config
config
)
{
try
{
return
ReflectionHelpers
.
getStaticField
(
config
.
constants
(
)
"
BUILD_TYPE
"
)
;
}
catch
(
Throwable
e
)
{
return
null
;
}
}
private
static
String
getFlavor
(
Config
config
)
{
try
{
return
ReflectionHelpers
.
getStaticField
(
config
.
constants
(
)
"
FLAVOR
"
)
;
}
catch
(
Throwable
e
)
{
return
null
;
}
}
private
static
String
getPackageName
(
Config
config
)
{
try
{
final
String
packageName
=
config
.
packageName
(
)
;
if
(
packageName
!
=
null
&
&
!
packageName
.
isEmpty
(
)
)
{
return
packageName
;
}
else
{
return
ReflectionHelpers
.
getStaticField
(
config
.
constants
(
)
"
APPLICATION_ID
"
)
;
}
}
catch
(
Throwable
e
)
{
return
null
;
}
}
private
String
getBuildDir
(
Config
config
)
{
try
{
return
ReflectionHelpers
.
getStaticField
(
config
.
constants
(
)
"
BUILD_DIR
"
)
;
}
catch
(
Throwable
e
)
{
return
null
;
}
}
}
