package
org
.
mozilla
.
gecko
.
activitystream
.
homepanel
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
gecko
.
background
.
testhelpers
.
TestRunner
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
List
;
import
java
.
util
.
Locale
;
import
static
android
.
R
.
attr
.
tag
;
import
static
junit
.
framework
.
Assert
.
*
;
RunWith
(
TestRunner
.
class
)
public
class
TestActivityStreamConfiguration
{
Test
public
void
testIsPocketEnabledByLocaleInnerForWhitelistedLocaleTags
(
)
throws
Exception
{
for
(
final
String
tag
:
ActivityStreamConfiguration
.
pocketEnabledLocaleTags
)
{
final
Locale
whitelistedLocale
=
getLocaleFromLanguageTag
(
tag
)
;
assertTrue
(
"
Expected
Pocket
enabled
for
locale
:
"
+
tag
ActivityStreamConfiguration
.
isPocketEnabledByLocaleInner
(
whitelistedLocale
)
)
;
}
}
Test
public
void
testIsPocketEnabledByLocaleInnerForNonWhitelistedLocaleTags
(
)
throws
Exception
{
final
String
nonWhitelistedLocaleTag
=
"
sbp
-
TZ
"
;
if
(
Arrays
.
binarySearch
(
ActivityStreamConfiguration
.
pocketEnabledLocaleTags
nonWhitelistedLocaleTag
)
>
=
0
)
{
throw
new
IllegalStateException
(
"
Precondition
failed
:
locale
"
+
nonWhitelistedLocaleTag
+
"
has
been
"
+
"
added
to
whitelisted
locales
.
Please
choose
a
new
tag
.
"
)
;
}
final
Locale
nonWhitelistedLocale
=
getLocaleFromLanguageTag
(
nonWhitelistedLocaleTag
)
;
assertFalse
(
"
Expected
Pocket
disabled
for
locale
:
"
+
nonWhitelistedLocaleTag
ActivityStreamConfiguration
.
isPocketEnabledByLocaleInner
(
nonWhitelistedLocale
)
)
;
}
Test
public
void
testIsPocketEnabledByLocaleInnerEnglishVariant
(
)
throws
Exception
{
final
Locale
enGBVariant
=
new
Locale
(
"
en
"
"
gb
"
"
oxendict
"
)
;
assertFalse
(
"
Expected
Pocket
disabled
for
locale
:
"
+
enGBVariant
.
toLanguageTag
(
)
ActivityStreamConfiguration
.
isPocketEnabledByLocaleInner
(
enGBVariant
)
)
;
}
private
Locale
getLocaleFromLanguageTag
(
final
String
tag
)
{
final
String
[
]
split
=
tag
.
split
(
"
-
"
)
;
if
(
split
.
length
=
=
1
)
{
return
new
Locale
(
split
[
0
]
)
;
}
else
{
return
new
Locale
(
split
[
0
]
split
[
1
]
)
;
}
}
}
