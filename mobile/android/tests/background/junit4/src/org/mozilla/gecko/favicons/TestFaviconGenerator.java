package
org
.
mozilla
.
gecko
.
favicons
;
import
android
.
graphics
.
Bitmap
;
import
org
.
junit
.
Assert
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
background
.
testhelpers
.
TestRunner
;
import
org
.
robolectric
.
RuntimeEnvironment
;
RunWith
(
TestRunner
.
class
)
public
class
TestFaviconGenerator
{
Test
public
void
testRepresentativeCharacter
(
)
{
Assert
.
assertEquals
(
"
M
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
https
:
/
/
mozilla
.
org
"
)
)
;
Assert
.
assertEquals
(
"
W
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
http
:
/
/
wikipedia
.
org
"
)
)
;
Assert
.
assertEquals
(
"
P
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
http
:
/
/
plus
.
google
.
com
"
)
)
;
Assert
.
assertEquals
(
"
E
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
https
:
/
/
en
.
m
.
wikipedia
.
org
/
wiki
/
Main_Page
"
)
)
;
Assert
.
assertEquals
(
"
T
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
http
:
/
/
www
.
theverge
.
com
"
)
)
;
Assert
.
assertEquals
(
"
F
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
https
:
/
/
m
.
facebook
.
com
"
)
)
;
Assert
.
assertEquals
(
"
T
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
https
:
/
/
mobile
.
twitter
.
com
"
)
)
;
Assert
.
assertEquals
(
"
?
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
file
:
/
/
/
"
)
)
;
Assert
.
assertEquals
(
"
S
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
file
:
/
/
/
system
/
"
)
)
;
Assert
.
assertEquals
(
"
P
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
ftp
:
/
/
people
.
mozilla
.
org
/
test
"
)
)
;
Assert
.
assertEquals
(
"
?
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
"
)
)
;
Assert
.
assertEquals
(
"
?
"
FaviconGenerator
.
getRepresentativeCharacter
(
null
)
)
;
Assert
.
assertEquals
(
"
Z
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
zZz
"
)
)
;
Assert
.
assertEquals
(
"
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
lkfdpou3rkjaslfdk
asdfo8
"
)
)
;
Assert
.
assertEquals
(
"
?
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
_
*
+
*
'
#
#
"
)
)
;
Assert
.
assertEquals
(
"
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
\
\
_
(
)
_
/
"
)
)
;
Assert
.
assertEquals
(
"
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
_
Look
of
Disapproval
"
)
)
;
Assert
.
assertEquals
(
"
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
http
:
/
/
www
.
tzend
.
de
"
)
)
;
Assert
.
assertEquals
(
"
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
http
:
/
/
.
com
"
)
)
;
Assert
.
assertEquals
(
"
C
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
http
:
/
/
.
com
"
)
)
;
Assert
.
assertEquals
(
"
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
http
:
/
/
.
de
"
)
)
;
Assert
.
assertEquals
(
"
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
http
:
/
/
.
com
/
"
)
)
;
Assert
.
assertEquals
(
"
X
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
http
:
/
/
xn
-
-
tzend
-
fra
.
de
"
)
)
;
Assert
.
assertEquals
(
"
X
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
http
:
/
/
xn
-
-
V8jxj3d1dzdz08w
.
com
"
)
)
;
Assert
.
assertEquals
(
"
1
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
https
:
/
/
www
.
1and1
.
com
/
"
)
)
;
Assert
.
assertEquals
(
"
1
"
FaviconGenerator
.
getRepresentativeCharacter
(
"
https
:
/
/
192
.
168
.
0
.
1
"
)
)
;
}
Test
public
void
testPickColor
(
)
{
final
int
color
=
FaviconGenerator
.
pickColor
(
"
http
:
/
/
m
.
facebook
.
com
"
)
;
for
(
int
i
=
0
;
i
<
100
;
i
+
+
)
{
Assert
.
assertEquals
(
color
FaviconGenerator
.
pickColor
(
"
http
:
/
/
m
.
facebook
.
com
"
)
)
;
}
Assert
.
assertEquals
(
color
FaviconGenerator
.
pickColor
(
"
https
:
/
/
m
.
facebook
.
com
"
)
)
;
Assert
.
assertEquals
(
color
FaviconGenerator
.
pickColor
(
"
http
:
/
/
facebook
.
com
"
)
)
;
Assert
.
assertEquals
(
color
FaviconGenerator
.
pickColor
(
"
http
:
/
/
www
.
facebook
.
com
"
)
)
;
Assert
.
assertEquals
(
color
FaviconGenerator
.
pickColor
(
"
http
:
/
/
www
.
facebook
.
com
/
foo
/
bar
/
foobar
?
mobile
=
1
"
)
)
;
}
Test
public
void
testGeneratingFavicon
(
)
{
final
FaviconGenerator
.
IconWithColor
iconWithColor
=
FaviconGenerator
.
generate
(
RuntimeEnvironment
.
application
"
http
:
/
/
m
.
facebook
.
com
"
)
;
final
Bitmap
bitmap
=
iconWithColor
.
bitmap
;
Assert
.
assertNotNull
(
bitmap
)
;
final
int
size
=
RuntimeEnvironment
.
application
.
getResources
(
)
.
getDimensionPixelSize
(
R
.
dimen
.
favicon_bg
)
;
Assert
.
assertEquals
(
size
bitmap
.
getWidth
(
)
)
;
Assert
.
assertEquals
(
size
bitmap
.
getHeight
(
)
)
;
Assert
.
assertEquals
(
Bitmap
.
Config
.
ARGB_8888
bitmap
.
getConfig
(
)
)
;
}
}
