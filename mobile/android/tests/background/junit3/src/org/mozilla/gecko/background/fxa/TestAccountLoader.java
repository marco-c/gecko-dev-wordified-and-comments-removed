package
org
.
mozilla
.
gecko
.
background
.
fxa
;
import
android
.
accounts
.
Account
;
import
android
.
content
.
Context
;
import
android
.
content
.
Loader
;
import
android
.
os
.
AsyncTask
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Looper
;
import
android
.
os
.
Message
;
import
org
.
mozilla
.
gecko
.
background
.
sync
.
AndroidSyncTestCaseWithAccounts
;
import
org
.
mozilla
.
gecko
.
fxa
.
AccountLoader
;
import
org
.
mozilla
.
gecko
.
fxa
.
FirefoxAccounts
;
import
org
.
mozilla
.
gecko
.
fxa
.
FxAccountConstants
;
import
org
.
mozilla
.
gecko
.
fxa
.
authenticator
.
AndroidFxAccount
;
import
org
.
mozilla
.
gecko
.
fxa
.
login
.
Separated
;
import
org
.
mozilla
.
gecko
.
fxa
.
login
.
State
;
import
java
.
io
.
UnsupportedEncodingException
;
import
java
.
net
.
URISyntaxException
;
import
java
.
security
.
GeneralSecurityException
;
import
java
.
util
.
concurrent
.
ArrayBlockingQueue
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicReference
;
public
class
TestAccountLoader
extends
AndroidSyncTestCaseWithAccounts
{
private
static
final
String
TEST_USERNAME
=
"
testAccount
mozilla
.
com
"
;
private
static
final
String
TEST_ACCOUNTTYPE
=
FxAccountConstants
.
ACCOUNT_TYPE
;
private
static
final
String
TEST_SYNCKEY
=
"
testSyncKey
"
;
private
static
final
String
TEST_SYNCPASSWORD
=
"
testSyncPassword
"
;
private
static
final
String
TEST_TOKEN_SERVER_URI
=
"
testTokenServerURI
"
;
private
static
final
String
TEST_PROFILE_SERVER_URI
=
"
testProfileServerURI
"
;
private
static
final
String
TEST_AUTH_SERVER_URI
=
"
testAuthServerURI
"
;
private
static
final
String
TEST_PROFILE
=
"
testProfile
"
;
public
TestAccountLoader
(
)
{
super
(
TEST_ACCOUNTTYPE
TEST_USERNAME
)
;
}
static
{
new
AsyncTask
<
Void
Void
Void
>
(
)
{
Override
protected
Void
doInBackground
(
Void
.
.
.
args
)
{
return
null
;
}
Override
protected
void
onPostExecute
(
Void
result
)
{
}
}
;
}
public
<
T
>
T
getLoaderResultSynchronously
(
final
Loader
<
T
>
loader
)
{
final
ArrayBlockingQueue
<
AtomicReference
<
T
>
>
queue
=
new
ArrayBlockingQueue
<
AtomicReference
<
T
>
>
(
1
)
;
final
Loader
.
OnLoadCompleteListener
<
T
>
listener
=
new
Loader
.
OnLoadCompleteListener
<
T
>
(
)
{
Override
public
void
onLoadComplete
(
Loader
<
T
>
completedLoader
T
data
)
{
completedLoader
.
unregisterListener
(
this
)
;
completedLoader
.
stopLoading
(
)
;
completedLoader
.
reset
(
)
;
queue
.
add
(
new
AtomicReference
<
T
>
(
data
)
)
;
}
}
;
final
Handler
mainThreadHandler
=
new
Handler
(
Looper
.
getMainLooper
(
)
)
{
Override
public
void
handleMessage
(
Message
msg
)
{
loader
.
registerListener
(
0
listener
)
;
loader
.
startLoading
(
)
;
}
}
;
mainThreadHandler
.
sendEmptyMessage
(
0
)
;
T
result
;
while
(
true
)
{
try
{
result
=
queue
.
take
(
)
.
get
(
)
;
break
;
}
catch
(
InterruptedException
e
)
{
throw
new
RuntimeException
(
"
waiting
thread
interrupted
"
e
)
;
}
}
return
result
;
}
public
void
testInitialLoad
(
)
throws
UnsupportedEncodingException
GeneralSecurityException
URISyntaxException
{
final
Context
context
=
getApplicationContext
(
)
;
final
AccountLoader
loader
=
new
AccountLoader
(
context
)
;
final
boolean
firefoxAccountsExist
=
FirefoxAccounts
.
firefoxAccountsExist
(
context
)
;
if
(
firefoxAccountsExist
)
{
assertFirefoxAccount
(
getLoaderResultSynchronously
(
(
Loader
<
Account
>
)
loader
)
)
;
return
;
}
final
State
state
=
new
Separated
(
TEST_USERNAME
"
uid
"
false
)
;
final
AndroidFxAccount
account
=
AndroidFxAccount
.
addAndroidAccount
(
context
"
uid
"
TEST_USERNAME
TEST_PROFILE
TEST_AUTH_SERVER_URI
TEST_TOKEN_SERVER_URI
TEST_PROFILE_SERVER_URI
state
AndroidSyncTestCaseWithAccounts
.
TEST_SYNC_AUTOMATICALLY_MAP_WITH_ALL_AUTHORITIES_DISABLED
)
;
assertNotNull
(
account
)
;
assertFirefoxAccount
(
getLoaderResultSynchronously
(
(
Loader
<
Account
>
)
loader
)
)
;
}
protected
void
assertFirefoxAccount
(
Account
account
)
{
assertNotNull
(
account
)
;
assertEquals
(
FxAccountConstants
.
ACCOUNT_TYPE
account
.
type
)
;
}
}
