"
use
strict
"
;
var
{
classes
:
Cc
interfaces
:
Ci
utils
:
Cu
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Geometry
.
jsm
"
)
;
const
ACCESSIBLECARET_PREF
=
"
layout
.
accessiblecaret
.
enabled
"
;
const
BASE_TEST_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
tests
/
robocop
/
testAccessibleCarets
.
html
"
;
const
DESIGNMODE_TEST_URL
=
"
http
:
/
/
mochi
.
test
:
8888
/
tests
/
robocop
/
testAccessibleCarets2
.
html
"
;
const
TAB_CHANGE_EVENT
=
"
testAccessibleCarets
:
TabChange
"
;
const
TAB_STOP_EVENT
=
"
STOP
"
;
const
gChromeWin
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
const
gActionBarHandler
=
Cc
[
"
mozilla
.
org
/
browser
/
browser
-
clh
;
1
"
]
.
getService
(
)
.
wrappedJSObject
.
ActionBarHandler
;
function
do_promiseTabChangeEvent
(
tabId
eventType
)
{
return
new
Promise
(
resolve
=
>
{
EventDispatcher
.
instance
.
registerListener
(
function
listener
(
event
message
callback
)
{
if
(
message
.
event
=
=
=
eventType
&
&
message
.
tabId
=
=
=
tabId
)
{
EventDispatcher
.
instance
.
unregisterListener
(
listener
TAB_CHANGE_EVENT
)
;
resolve
(
)
;
}
}
TAB_CHANGE_EVENT
)
;
}
)
;
}
function
isInputOrTextarea
(
element
)
{
return
(
(
element
instanceof
Ci
.
nsIDOMHTMLInputElement
)
|
|
(
element
.
localName
=
=
=
"
textarea
"
&
&
element
.
namespaceURI
=
=
=
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
)
)
;
}
function
elementSelection
(
element
)
{
return
(
isInputOrTextarea
(
element
)
)
?
element
.
editor
.
selection
:
element
.
ownerGlobal
.
getSelection
(
)
;
}
function
selectElementChar
(
doc
element
char
)
{
if
(
isInputOrTextarea
(
element
)
)
{
element
.
setSelectionRange
(
char
char
+
1
)
;
return
;
}
let
range
=
doc
.
createRange
(
)
;
range
.
setStart
(
element
.
firstChild
char
)
;
range
.
setEnd
(
element
.
firstChild
char
+
1
)
;
let
selection
=
elementSelection
(
element
)
;
selection
.
removeAllRanges
(
)
;
selection
.
addRange
(
range
)
;
}
function
getCharPressPoint
(
doc
element
char
expected
)
{
selectElementChar
(
doc
element
char
)
;
let
selection
=
elementSelection
(
element
)
;
is
(
selection
.
toString
(
)
expected
"
Selected
char
should
match
expected
char
.
"
)
;
let
rect
=
selection
.
getRangeAt
(
0
)
.
getBoundingClientRect
(
)
;
let
r
=
new
Point
(
rect
.
left
+
(
rect
.
width
/
2
)
rect
.
bottom
-
(
rect
.
height
/
3
)
)
;
return
r
;
}
function
getLongPressResult
(
browser
midPoint
)
{
let
domWinUtils
=
browser
.
contentWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
domWinUtils
.
sendTouchEventToWindow
(
"
touchstart
"
[
0
]
[
midPoint
.
x
]
[
midPoint
.
y
]
[
1
]
[
1
]
[
0
]
[
1
]
1
0
)
;
domWinUtils
.
sendMouseEventToWindow
(
"
mouselongtap
"
midPoint
.
x
midPoint
.
y
0
1
0
)
;
domWinUtils
.
sendTouchEventToWindow
(
"
touchend
"
[
0
]
[
midPoint
.
x
]
[
midPoint
.
y
]
[
1
]
[
1
]
[
0
]
[
1
]
1
0
)
;
return
{
focusedElement
:
gActionBarHandler
.
_targetElement
text
:
gActionBarHandler
.
_getSelectedText
(
)
selectionID
:
gActionBarHandler
.
_selectionID
}
;
}
function
UIhasActionByID
(
expectedActionID
)
{
let
actions
=
gActionBarHandler
.
_actionBarActions
;
return
actions
.
some
(
action
=
>
{
return
action
.
id
=
=
=
expectedActionID
;
}
)
;
}
function
closeSelectionUI
(
)
{
gChromeWin
.
WindowEventDispatcher
.
dispatch
(
"
TextSelection
:
End
"
{
selectionID
:
gActionBarHandler
.
_selectionID
}
)
;
}
add_task
(
function
*
testAccessibleCarets
(
)
{
let
BrowserApp
=
gChromeWin
.
BrowserApp
;
yield
do_promiseTabChangeEvent
(
BrowserApp
.
selectedTab
.
id
TAB_STOP_EVENT
)
;
Services
.
prefs
.
setBoolPref
(
ACCESSIBLECARET_PREF
true
)
;
let
browser
=
BrowserApp
.
addTab
(
BASE_TEST_URL
)
.
browser
;
let
tab
=
BrowserApp
.
getTabForBrowser
(
browser
)
;
yield
do_promiseTabChangeEvent
(
tab
.
id
TAB_STOP_EVENT
)
;
do_register_cleanup
(
function
cleanup
(
)
{
BrowserApp
.
closeTab
(
tab
)
;
Services
.
prefs
.
clearUserPref
(
ACCESSIBLECARET_PREF
)
;
}
)
;
let
doc
=
browser
.
contentDocument
;
let
ce_LTR_elem
=
doc
.
getElementById
(
"
LTRcontenteditable
"
)
;
let
tc_LTR_elem
=
doc
.
getElementById
(
"
LTRtextContent
"
)
;
let
i_LTR_elem
=
doc
.
getElementById
(
"
LTRinput
"
)
;
let
ta_LTR_elem
=
doc
.
getElementById
(
"
LTRtextarea
"
)
;
let
ce_RTL_elem
=
doc
.
getElementById
(
"
RTLcontenteditable
"
)
;
let
tc_RTL_elem
=
doc
.
getElementById
(
"
RTLtextContent
"
)
;
let
i_RTL_elem
=
doc
.
getElementById
(
"
RTLinput
"
)
;
let
ta_RTL_elem
=
doc
.
getElementById
(
"
RTLtextarea
"
)
;
let
ip_LTR_elem
=
doc
.
getElementById
(
"
LTRphone
"
)
;
let
ip_RTL_elem
=
doc
.
getElementById
(
"
RTLphone
"
)
;
let
bug1265750_elem
=
doc
.
getElementById
(
"
bug1265750
"
)
;
let
bug1338445_elem1
=
doc
.
getElementById
(
"
bug1338445
-
1
"
)
;
let
bug1338445_elem2
=
doc
.
getElementById
(
"
bug1338445
-
2
"
)
;
let
ce_LTR_midPoint
=
getCharPressPoint
(
doc
ce_LTR_elem
0
"
F
"
)
;
let
tc_LTR_midPoint
=
getCharPressPoint
(
doc
tc_LTR_elem
0
"
O
"
)
;
let
i_LTR_midPoint
=
getCharPressPoint
(
doc
i_LTR_elem
0
"
T
"
)
;
let
ta_LTR_midPoint
=
getCharPressPoint
(
doc
ta_LTR_elem
0
"
W
"
)
;
let
ce_RTL_midPoint
=
getCharPressPoint
(
doc
ce_RTL_elem
0
"
"
)
;
let
tc_RTL_midPoint
=
getCharPressPoint
(
doc
tc_RTL_elem
0
"
"
)
;
let
i_RTL_midPoint
=
getCharPressPoint
(
doc
i_RTL_elem
0
"
"
)
;
let
ta_RTL_midPoint
=
getCharPressPoint
(
doc
ta_RTL_elem
0
"
"
)
;
let
ip_LTR_midPoint
=
getCharPressPoint
(
doc
ip_LTR_elem
8
"
2
"
)
;
let
ip_RTL_midPoint
=
getCharPressPoint
(
doc
ip_RTL_elem
9
"
2
"
)
;
let
bug1265750_midPoint
=
getCharPressPoint
(
doc
bug1265750_elem
2
"
7
"
)
;
let
bug1338445_midPoint1
=
getCharPressPoint
(
doc
bug1338445_elem1
3
"
3
"
)
;
let
bug1338445_midPoint2
=
getCharPressPoint
(
doc
bug1338445_elem2
1
"
3
"
)
;
let
result
=
getLongPressResult
(
browser
ce_LTR_midPoint
)
;
is
(
result
.
focusedElement
ce_LTR_elem
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
Find
"
"
Selected
text
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
tc_LTR_midPoint
)
;
is
(
result
.
focusedElement
null
"
No
focused
element
is
expected
.
"
)
;
is
(
result
.
text
"
Open
"
"
Selected
text
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
i_LTR_midPoint
)
;
is
(
result
.
focusedElement
i_LTR_elem
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
Type
"
"
Selected
text
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
ta_LTR_midPoint
)
;
is
(
result
.
focusedElement
ta_LTR_elem
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
Words
"
"
Selected
text
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
ip_LTR_midPoint
)
;
is
(
result
.
focusedElement
ip_LTR_elem
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
09876543210
.
-
.
)
(
wp
#
*
103410341
"
"
Selected
phone
number
should
match
expected
text
.
"
)
;
is
(
result
.
text
.
length
30
"
Selected
phone
number
length
should
match
expected
maximum
.
"
)
;
result
=
getLongPressResult
(
browser
bug1265750_midPoint
)
;
is
(
result
.
focusedElement
null
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
3
45
678
90
"
"
Selected
phone
number
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
bug1338445_midPoint1
)
;
is
(
result
.
focusedElement
null
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
012345p
"
"
Selected
phone
number
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
bug1338445_midPoint2
)
;
is
(
result
.
focusedElement
null
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
p34
"
"
Selected
phone
number
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
ce_RTL_midPoint
)
;
is
(
result
.
focusedElement
ce_RTL_elem
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
"
"
Selected
text
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
tc_RTL_midPoint
)
;
is
(
result
.
focusedElement
null
"
No
focused
element
is
expected
.
"
)
;
is
(
result
.
text
"
"
"
Selected
text
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
i_RTL_midPoint
)
;
is
(
result
.
focusedElement
i_RTL_elem
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
"
"
Selected
text
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
ta_RTL_midPoint
)
;
is
(
result
.
focusedElement
ta_RTL_elem
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
"
"
Selected
text
should
match
expected
text
.
"
)
;
result
=
getLongPressResult
(
browser
ip_RTL_midPoint
)
;
is
(
result
.
focusedElement
ip_RTL_elem
"
Focused
element
should
match
expected
.
"
)
;
is
(
result
.
text
"
+
972
3
7347514
"
"
Selected
phone
number
should
match
expected
text
.
"
)
;
closeSelectionUI
(
)
;
ok
(
true
"
Finished
testAccessibleCarets
tests
.
"
)
;
}
)
;
add_task
(
function
*
testAccessibleCarets_designMode
(
)
{
let
BrowserApp
=
gChromeWin
.
BrowserApp
;
Cc
[
"
mozilla
.
org
/
widget
/
clipboardhelper
;
1
"
]
.
getService
(
Ci
.
nsIClipboardHelper
)
.
copyString
(
"
somethingMagical
"
)
;
let
browser
=
BrowserApp
.
addTab
(
DESIGNMODE_TEST_URL
)
.
browser
;
let
tab
=
BrowserApp
.
getTabForBrowser
(
browser
{
selected
:
true
}
)
;
yield
do_promiseTabChangeEvent
(
tab
.
id
TAB_STOP_EVENT
)
;
let
doc
=
browser
.
contentDocument
;
let
tc_LTR_elem
=
doc
.
getElementById
(
"
LTRtextContent
"
)
;
let
tc_RTL_elem
=
doc
.
getElementById
(
"
RTLtextContent
"
)
;
let
tc_LTR_midPoint
=
getCharPressPoint
(
doc
tc_LTR_elem
5
"
x
"
)
;
let
tc_RTL_midPoint
=
getCharPressPoint
(
doc
tc_RTL_elem
9
"
"
)
;
let
flavors
=
[
"
text
/
unicode
"
]
;
let
clipboardHasText
=
Services
.
clipboard
.
hasDataMatchingFlavors
(
flavors
flavors
.
length
Ci
.
nsIClipboard
.
kGlobalClipboard
)
;
is
(
clipboardHasText
true
"
There
should
now
be
paste
-
able
text
in
the
clipboard
.
"
)
;
[
"
on
"
"
off
"
]
.
forEach
(
designMode
=
>
{
doc
.
designMode
=
designMode
;
let
result
=
getLongPressResult
(
browser
tc_LTR_midPoint
)
;
is
(
result
.
focusedElement
null
"
No
focused
element
is
expected
.
"
)
;
is
(
result
.
text
"
existence
"
"
Selected
text
should
match
expected
text
.
"
)
;
is
(
UIhasActionByID
(
"
cut_action
"
)
(
designMode
=
=
=
"
on
"
)
"
CUT
action
UI
Visibility
should
match
designMode
state
.
"
)
;
is
(
UIhasActionByID
(
"
paste_action
"
)
(
designMode
=
=
=
"
on
"
)
"
PASTE
action
UI
Visibility
should
match
designMode
state
.
"
)
;
result
=
getLongPressResult
(
browser
tc_RTL_midPoint
)
;
is
(
result
.
focusedElement
null
"
No
focused
element
is
expected
.
"
)
;
is
(
result
.
text
"
"
"
Selected
text
should
match
expected
text
.
"
)
;
is
(
UIhasActionByID
(
"
cut_action
"
)
(
designMode
=
=
=
"
on
"
)
"
CUT
action
UI
Visibility
should
match
designMode
state
.
"
)
;
is
(
UIhasActionByID
(
"
paste_action
"
)
(
designMode
=
=
=
"
on
"
)
"
PASTE
action
UI
Visibility
should
match
designMode
state
.
"
)
;
}
)
;
closeSelectionUI
(
)
;
ok
(
true
"
Finished
testAccessibleCarets_designMode
tests
.
"
)
;
}
)
;
run_next_test
(
)
;
