package
org
.
mozilla
.
gecko
.
tests
;
import
static
org
.
mozilla
.
gecko
.
tests
.
helpers
.
AssertionHelper
.
fFail
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
NativeEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
NativeJSObject
;
public
class
testSnackbarAPI
extends
JavascriptTest
implements
NativeEventListener
{
private
static
final
int
SNACKBAR_LENGTH_INDEFINITE
=
-
2
;
public
testSnackbarAPI
(
)
{
super
(
"
testSnackbarAPI
.
js
"
)
;
}
Override
public
void
handleMessage
(
String
event
NativeJSObject
message
EventCallback
callback
)
{
mAsserter
.
is
(
event
"
Snackbar
:
Show
"
"
Received
Snackbar
:
Show
event
"
)
;
try
{
mAsserter
.
is
(
message
.
getString
(
"
message
"
)
"
This
is
a
Snackbar
"
"
Snackbar
message
"
)
;
mAsserter
.
is
(
message
.
getInt
(
"
duration
"
)
SNACKBAR_LENGTH_INDEFINITE
"
Snackbar
duration
"
)
;
NativeJSObject
action
=
message
.
getObject
(
"
action
"
)
;
mAsserter
.
is
(
action
.
getString
(
"
label
"
)
"
Click
me
"
"
Snackbar
action
label
"
)
;
}
catch
(
Exception
e
)
{
fFail
(
"
Event
does
not
contain
expected
data
:
"
+
e
.
getMessage
(
)
)
;
}
}
Override
public
void
setUp
(
)
throws
Exception
{
super
.
setUp
(
)
;
EventDispatcher
.
getInstance
(
)
.
registerGeckoThreadListener
(
this
"
Snackbar
:
Show
"
)
;
}
Override
public
void
tearDown
(
)
throws
Exception
{
super
.
tearDown
(
)
;
EventDispatcher
.
getInstance
(
)
.
unregisterGeckoThreadListener
(
this
"
Snackbar
:
Show
"
)
;
}
}
