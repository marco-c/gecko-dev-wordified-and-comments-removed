package
org
.
mozilla
.
gecko
.
tests
;
import
android
.
media
.
AudioManager
;
import
org
.
mozilla
.
gecko
.
Tab
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
org
.
mozilla
.
gecko
.
media
.
GeckoMediaControlAgent
;
public
class
testMediaControl
extends
MediaPlaybackTest
{
public
void
testMediaControl
(
)
{
info
(
"
-
ensure
the
test
is
running
on
correct
Android
version
-
"
)
;
checkAndroidVersionForMediaControlTest
(
)
;
info
(
"
-
wait
for
gecko
ready
-
"
)
;
blockForGeckoReady
(
)
;
info
(
"
-
run
test
:
testBasicBehaviors
-
"
)
;
testBasicBehaviors
(
)
;
info
(
"
-
run
test
:
testNavigateOutThePage
-
"
)
;
testNavigateOutThePage
(
)
;
info
(
"
-
run
test
:
testAudioFocusChanged
-
"
)
;
testAudioFocusChanged
(
)
;
info
(
"
-
run
test
:
testSwitchTab
-
"
)
;
testSwitchTab
(
)
;
info
(
"
-
run
test
:
testCloseTab
-
"
)
;
testCloseTab
(
)
;
info
(
"
-
run
test
:
testResumeMediaFromPage
-
"
)
;
testResumeMediaFromPage
(
)
;
info
(
"
-
run
test
:
testAdjustMediaVolumeOrMuted
-
"
)
;
testAdjustMediaVolumeOrMuted
(
)
;
info
(
"
-
run
test
:
testMediaWithSilentAudioTrack
-
"
)
;
testMediaWithSilentAudioTrack
(
)
;
info
(
"
-
run
test
:
testMediaWithoutAudioTrack
-
"
)
;
testMediaWithoutAudioTrack
(
)
;
info
(
"
-
run
test
:
testAudioCompetingForMediaWithSilentAudioTrack
-
"
)
;
testAudioCompetingForMediaWithSilentAudioTrack
(
)
;
info
(
"
-
run
test
:
testAudioCompetingForMediaWithoutAudioTrack
-
"
)
;
testAudioCompetingForMediaWithoutAudioTrack
(
)
;
}
private
void
testBasicBehaviors
(
)
{
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_LOOP_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
check
whether
media
starts
playing
-
"
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
simulate
media
control
pause
-
"
)
;
notifyMediaControlAgent
(
GeckoMediaControlAgent
.
ACTION_PAUSE
)
;
checkIfMediaPlayingSuccess
(
false
)
;
info
(
"
-
simulate
media
control
resume
-
"
)
;
notifyMediaControlAgent
(
GeckoMediaControlAgent
.
ACTION_RESUME
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
simulate
media
control
stop
-
"
)
;
notifyMediaControlAgent
(
GeckoMediaControlAgent
.
ACTION_STOP
)
;
checkIfMediaPlayingSuccess
(
false
true
)
;
info
(
"
-
close
tab
-
"
)
;
closeAllTabs
(
)
;
}
private
void
testNavigateOutThePage
(
)
{
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_LOOP_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
check
whether
media
starts
playing
-
"
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
navigate
out
the
present
page
-
"
)
;
final
String
BLANK_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_BLANK_PAGE_01_URL
)
;
loadUrlAndWait
(
BLANK_URL
)
;
checkIfMediaPlayingSuccess
(
false
true
)
;
info
(
"
-
close
tab
-
"
)
;
closeAllTabs
(
)
;
info
(
"
-
run
next
test
:
testAudioFocusChanged
-
"
)
;
testAudioFocusChanged
(
)
;
}
private
void
testAudioFocusChanged
(
)
{
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_LOOP_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
check
whether
media
starts
playing
-
"
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
simulate
lose
audio
focus
transiently
-
"
)
;
getAudioFocusAgent
(
)
.
changeAudioFocus
(
AudioManager
.
AUDIOFOCUS_LOSS_TRANSIENT
)
;
checkIfMediaPlayingSuccess
(
false
)
;
info
(
"
-
simulate
gain
audio
focus
again
-
"
)
;
getAudioFocusAgent
(
)
.
changeAudioFocus
(
AudioManager
.
AUDIOFOCUS_GAIN
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
simulate
lose
audio
focus
-
"
)
;
getAudioFocusAgent
(
)
.
changeAudioFocus
(
AudioManager
.
AUDIOFOCUS_LOSS
)
;
checkIfMediaPlayingSuccess
(
false
)
;
info
(
"
-
close
tab
-
"
)
;
closeAllTabs
(
)
;
}
private
void
testSwitchTab
(
)
{
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_LOOP_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
check
whether
media
starts
playing
-
"
)
;
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
switch
to
the
another
tab
-
"
)
;
final
String
BLANK_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_BLANK_PAGE_01_URL
)
;
addTab
(
BLANK_URL
)
;
info
(
"
-
the
media
control
shouldn
'
t
be
changed
and
display
the
info
of
audible
tab
-
"
)
;
checkMediaNotificationStates
(
tab
true
)
;
info
(
"
-
close
tab
-
"
)
;
closeAllTabs
(
)
;
}
private
void
testCloseTab
(
)
{
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_LOOP_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
check
whether
media
starts
playing
-
"
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
close
audible
tab
-
"
)
;
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
Tabs
.
getInstance
(
)
.
closeTab
(
tab
)
;
info
(
"
-
media
control
should
disappear
-
"
)
;
waitUntilNotificationUIChanged
(
)
;
checkIfMediaNotificationBeCleared
(
)
;
info
(
"
-
close
tab
-
"
)
;
closeAllTabs
(
)
;
}
private
void
testResumeMediaFromPage
(
)
{
info
(
"
-
create
JSBridge
-
"
)
;
createJSBridge
(
)
;
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_JS_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
play
media
-
"
)
;
getJS
(
)
.
syncCall
(
"
play_audio
"
)
;
info
(
"
-
check
whether
media
starts
playing
-
"
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
simulate
media
control
pause
-
"
)
;
notifyMediaControlAgent
(
GeckoMediaControlAgent
.
ACTION_PAUSE
)
;
checkIfMediaPlayingSuccess
(
false
)
;
info
(
"
-
resume
media
from
page
-
"
)
;
getJS
(
)
.
syncCall
(
"
play_audio
"
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
pause
media
from
page
-
"
)
;
getJS
(
)
.
syncCall
(
"
pause_audio
"
)
;
checkIfMediaPlayingSuccess
(
false
true
)
;
info
(
"
-
close
tab
-
"
)
;
closeAllTabs
(
)
;
info
(
"
-
destroy
JSBridge
-
"
)
;
destroyJSBridge
(
)
;
}
private
void
testAdjustMediaVolumeOrMuted
(
)
{
info
(
"
-
create
JSBridge
-
"
)
;
createJSBridge
(
)
;
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_JS_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
play
media
-
"
)
;
getJS
(
)
.
syncCall
(
"
play_audio
"
)
;
info
(
"
-
check
whether
media
starts
playing
-
"
)
;
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
change
media
'
s
volume
to
0
.
0
-
"
)
;
getJS
(
)
.
syncCall
(
"
adjust_audio_volume
"
0
.
0
)
;
checkMediaNotificationStates
(
tab
true
)
;
info
(
"
-
change
media
'
s
volume
to
1
.
0
-
"
)
;
getJS
(
)
.
syncCall
(
"
adjust_audio_volume
"
1
.
0
)
;
checkMediaNotificationStates
(
tab
true
)
;
info
(
"
-
mute
media
-
"
)
;
getJS
(
)
.
syncCall
(
"
adjust_audio_muted
"
true
)
;
checkMediaNotificationStates
(
tab
true
)
;
info
(
"
-
unmute
media
-
"
)
;
getJS
(
)
.
syncCall
(
"
adjust_audio_muted
"
false
)
;
checkMediaNotificationStates
(
tab
true
)
;
info
(
"
-
pause
media
-
"
)
;
getJS
(
)
.
syncCall
(
"
pause_audio
"
)
;
checkIfMediaPlayingSuccess
(
false
true
)
;
info
(
"
-
close
tab
-
"
)
;
closeAllTabs
(
)
;
info
(
"
-
destroy
JSBridge
-
"
)
;
destroyJSBridge
(
)
;
}
private
void
testMediaWithSilentAudioTrack
(
)
{
info
(
"
-
create
JSBridge
-
"
)
;
createJSBridge
(
)
;
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_JS_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
play
media
with
silent
audio
track
-
"
)
;
getJS
(
)
.
syncCall
(
"
play_media_with_silent_audio_track
"
)
;
info
(
"
-
check
whether
media
starts
playing
-
"
)
;
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
checkTabMediaPlayingState
(
tab
true
)
;
info
(
"
-
media
control
should
be
displayed
-
"
)
;
checkMediaNotificationStatesAfterChanged
(
tab
true
)
;
info
(
"
-
pause
media
with
silent
audio
track
-
"
)
;
getJS
(
)
.
syncCall
(
"
pause_media_with_silent_audio_track
"
)
;
info
(
"
-
media
control
should
disappear
-
"
)
;
checkMediaNotificationStatesAfterChanged
(
tab
false
true
)
;
info
(
"
-
close
tab
-
"
)
;
closeAllTabs
(
)
;
info
(
"
-
destroy
JSBridge
-
"
)
;
destroyJSBridge
(
)
;
}
private
void
testMediaWithoutAudioTrack
(
)
{
info
(
"
-
create
JSBridge
-
"
)
;
createJSBridge
(
)
;
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_JS_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
play
media
-
"
)
;
getJS
(
)
.
syncCall
(
"
play_media_without_audio_track
"
)
;
info
(
"
-
should
not
show
control
-
"
)
;
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
checkTabMediaPlayingState
(
tab
false
)
;
checkIfMediaNotificationBeCleared
(
)
;
info
(
"
-
should
not
show
control
-
"
)
;
checkTabMediaPlayingState
(
tab
false
)
;
checkIfMediaNotificationBeCleared
(
)
;
info
(
"
-
should
not
show
control
-
"
)
;
checkTabMediaPlayingState
(
tab
false
)
;
checkIfMediaNotificationBeCleared
(
)
;
info
(
"
-
should
not
show
control
-
"
)
;
checkTabMediaPlayingState
(
tab
false
)
;
checkIfMediaNotificationBeCleared
(
)
;
info
(
"
-
should
not
show
control
-
"
)
;
checkTabMediaPlayingState
(
tab
false
)
;
checkIfMediaNotificationBeCleared
(
)
;
info
(
"
-
pause
media
-
"
)
;
getJS
(
)
.
syncCall
(
"
pause_media_without_audio_track
"
)
;
info
(
"
-
close
tab
-
"
)
;
closeAllTabs
(
)
;
info
(
"
-
destroy
JSBridge
-
"
)
;
destroyJSBridge
(
)
;
}
private
void
testAudioCompetingForMediaWithSilentAudioTrack
(
)
{
info
(
"
-
create
JSBridge
-
"
)
;
createJSBridge
(
)
;
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_LOOP_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
check
whether
media
starts
playing
-
"
)
;
final
Tab
audibleTab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
switch
to
the
another
tab
-
"
)
;
final
String
MEDIA_JS_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_JS_URL
)
;
addTab
(
MEDIA_JS_URL
)
;
info
(
"
-
play
silent
media
from
new
tab
-
"
)
;
getJS
(
)
.
syncCall
(
"
play_media_with_silent_audio_track
"
)
;
info
(
"
-
wait
until
silent
media
starts
playing
-
"
)
;
Tab
silentTab
=
Tabs
.
getInstance
(
)
.
getFirstTabForUrl
(
MEDIA_JS_URL
)
;
checkTabMediaPlayingState
(
silentTab
true
)
;
info
(
"
-
audible
tab
should
be
stopped
because
of
audio
competing
-
"
)
;
checkTabMediaPlayingState
(
audibleTab
false
)
;
checkTabAudioPlayingState
(
audibleTab
false
)
;
info
(
"
-
should
show
media
control
for
silent
tab
-
"
)
;
checkMediaNotificationStatesAfterChanged
(
silentTab
true
)
;
info
(
"
-
pause
silent
media
-
"
)
;
getJS
(
)
.
syncCall
(
"
play_media_with_silent_audio_track
"
)
;
info
(
"
-
close
tabs
-
"
)
;
closeAllTabs
(
)
;
info
(
"
-
destroy
JSBridge
-
"
)
;
destroyJSBridge
(
)
;
}
private
void
testAudioCompetingForMediaWithoutAudioTrack
(
)
{
info
(
"
-
create
JSBridge
-
"
)
;
createJSBridge
(
)
;
info
(
"
-
load
URL
-
"
)
;
final
String
MEDIA_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_LOOP_URL
)
;
loadUrlAndWait
(
MEDIA_URL
)
;
info
(
"
-
check
whether
media
starts
playing
-
"
)
;
final
Tab
audibleTab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
checkIfMediaPlayingSuccess
(
true
)
;
info
(
"
-
switch
to
the
another
tab
-
"
)
;
final
String
MEDIA_JS_URL
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_MEDIA_PLAYBACK_JS_URL
)
;
addTab
(
MEDIA_JS_URL
)
;
info
(
"
-
play
silent
media
from
new
tab
-
"
)
;
getJS
(
)
.
syncCall
(
"
play_media_without_audio_track
"
)
;
info
(
"
-
audible
tab
should
still
be
playing
and
show
media
control
-
"
)
;
checkTabMediaPlayingState
(
audibleTab
true
)
;
checkTabAudioPlayingState
(
audibleTab
true
)
;
checkMediaNotificationStates
(
audibleTab
true
)
;
info
(
"
-
audible
tab
should
still
be
playing
and
show
media
control
-
"
)
;
checkTabMediaPlayingState
(
audibleTab
true
)
;
checkTabAudioPlayingState
(
audibleTab
true
)
;
checkMediaNotificationStates
(
audibleTab
true
)
;
info
(
"
-
audible
tab
should
still
be
playing
and
show
media
control
-
"
)
;
checkTabMediaPlayingState
(
audibleTab
true
)
;
checkTabAudioPlayingState
(
audibleTab
true
)
;
checkMediaNotificationStates
(
audibleTab
true
)
;
info
(
"
-
pause
sielent
media
-
"
)
;
getJS
(
)
.
syncCall
(
"
pause_media_without_audio_track
"
)
;
info
(
"
-
close
tabs
-
"
)
;
closeAllTabs
(
)
;
info
(
"
-
destroy
JSBridge
-
"
)
;
destroyJSBridge
(
)
;
}
}
