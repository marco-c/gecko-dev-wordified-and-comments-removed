package
org
.
mozilla
.
gecko
.
tests
;
import
org
.
mozilla
.
gecko
.
Actions
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Tab
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
org
.
mozilla
.
gecko
.
media
.
AudioFocusAgent
;
import
org
.
mozilla
.
gecko
.
media
.
AudioFocusAgent
.
State
;
import
org
.
mozilla
.
gecko
.
media
.
MediaControlService
;
import
android
.
content
.
Intent
;
import
android
.
content
.
Context
;
import
android
.
app
.
Notification
;
import
android
.
app
.
NotificationManager
;
import
android
.
os
.
Build
;
import
android
.
service
.
notification
.
StatusBarNotification
;
import
com
.
robotium
.
solo
.
Condition
;
abstract
class
MediaPlaybackTest
extends
BaseTest
{
private
Context
mContext
;
private
int
mPrevIcon
=
0
;
private
boolean
mPrevTabAudioPlaying
=
false
;
protected
final
void
info
(
String
msg
)
{
mAsserter
.
dumpLog
(
msg
)
;
}
protected
final
Context
getContext
(
)
{
if
(
mContext
=
=
null
)
{
mContext
=
getInstrumentation
(
)
.
getTargetContext
(
)
;
}
return
mContext
;
}
protected
final
void
waitUntilNotificationUIChanged
(
)
{
if
(
!
isAvailableToCheckNotification
(
)
)
{
return
;
}
waitForCondition
(
new
Condition
(
)
{
Override
public
boolean
isSatisfied
(
)
{
NotificationManager
notificationManager
=
(
NotificationManager
)
getContext
(
)
.
getSystemService
(
Context
.
NOTIFICATION_SERVICE
)
;
StatusBarNotification
[
]
sbns
=
notificationManager
.
getActiveNotifications
(
)
;
if
(
sbns
.
length
=
=
1
&
&
sbns
[
0
]
.
getNotification
(
)
.
actions
.
length
=
=
1
)
{
if
(
sbns
[
0
]
.
getNotification
(
)
.
actions
[
0
]
.
icon
!
=
mPrevIcon
)
{
mPrevIcon
=
sbns
[
0
]
.
getNotification
(
)
.
actions
[
0
]
.
icon
;
return
true
;
}
}
else
if
(
mPrevIcon
!
=
0
&
&
sbns
.
length
=
=
0
)
{
mPrevIcon
=
0
;
return
true
;
}
return
false
;
}
}
MAX_WAIT_MS
)
;
}
protected
final
void
waitUntilTabAudioPlayingStateChanged
(
)
{
waitForCondition
(
new
Condition
(
)
{
Override
public
boolean
isSatisfied
(
)
{
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
if
(
tab
.
isAudioPlaying
(
)
!
=
mPrevTabAudioPlaying
)
{
mPrevTabAudioPlaying
=
tab
.
isAudioPlaying
(
)
;
return
true
;
}
return
false
;
}
}
MAX_WAIT_MS
)
;
}
protected
final
void
notifyMediaControlService
(
String
action
)
{
Intent
intent
=
new
Intent
(
getContext
(
)
MediaControlService
.
class
)
;
intent
.
setAction
(
action
)
;
getContext
(
)
.
startService
(
intent
)
;
}
protected
final
void
checkIfMediaPlayingSuccess
(
boolean
isTabPlaying
)
{
checkIfMediaPlayingSuccess
(
isTabPlaying
false
)
;
}
protected
final
void
checkIfMediaPlayingSuccess
(
boolean
isTabPlaying
boolean
clearNotification
)
{
checkAudioFocusStateAfterChanged
(
isTabPlaying
)
;
checkMediaNotificationStatesAfterChanged
(
isTabPlaying
clearNotification
)
;
}
protected
final
void
checkMediaNotificationStatesAfterChanged
(
boolean
isTabPlaying
boolean
clearNotification
)
{
waitUntilNotificationUIChanged
(
)
;
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
mAsserter
.
ok
(
isTabPlaying
=
=
tab
.
isMediaPlaying
(
)
"
Checking
the
media
playing
state
of
tab
isTabPlaying
=
"
+
isTabPlaying
"
Tab
'
s
media
playing
state
is
correct
.
"
)
;
if
(
clearNotification
)
{
checkIfMediaNotificationBeCleared
(
)
;
}
else
{
checkMediaNotificationStates
(
isTabPlaying
)
;
}
}
protected
final
void
checkMediaNotificationStates
(
boolean
isTabPlaying
)
{
if
(
!
isAvailableToCheckNotification
(
)
)
{
return
;
}
NotificationManager
notificationManager
=
(
NotificationManager
)
getContext
(
)
.
getSystemService
(
Context
.
NOTIFICATION_SERVICE
)
;
StatusBarNotification
[
]
sbns
=
notificationManager
.
getActiveNotifications
(
)
;
mAsserter
.
is
(
sbns
.
length
1
"
Should
only
have
one
notification
in
system
'
s
status
bar
.
"
)
;
Notification
notification
=
sbns
[
0
]
.
getNotification
(
)
;
mAsserter
.
is
(
notification
.
actions
.
length
1
"
Only
has
one
action
in
notification
.
"
)
;
mAsserter
.
is
(
notification
.
actions
[
0
]
.
title
getContext
(
)
.
getString
(
isTabPlaying
?
R
.
string
.
media_pause
:
R
.
string
.
media_play
)
"
Action
has
correct
title
.
"
)
;
mAsserter
.
is
(
notification
.
actions
[
0
]
.
icon
isTabPlaying
?
R
.
drawable
.
ic_media_pause
:
R
.
drawable
.
ic_media_play
"
Action
has
correct
icon
.
"
)
;
}
protected
final
void
checkIfMediaNotificationBeCleared
(
)
{
if
(
!
isAvailableToCheckNotification
(
)
)
{
return
;
}
NotificationManager
notificationManager
=
(
NotificationManager
)
getContext
(
)
.
getSystemService
(
Context
.
NOTIFICATION_SERVICE
)
;
StatusBarNotification
[
]
sbns
=
notificationManager
.
getActiveNotifications
(
)
;
mAsserter
.
is
(
sbns
.
length
0
"
Should
not
have
notification
in
system
'
s
status
bar
.
"
)
;
}
protected
final
void
checkAudioFocusStateAfterChanged
(
boolean
isTabPlaying
)
{
waitUntilTabAudioPlayingStateChanged
(
)
;
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
mAsserter
.
ok
(
isTabPlaying
=
=
tab
.
isAudioPlaying
(
)
"
Checking
the
audio
playing
state
of
tab
isTabPlaying
=
"
+
isTabPlaying
"
Tab
'
s
audio
playing
state
is
correct
.
"
)
;
if
(
isTabPlaying
)
{
mAsserter
.
is
(
AudioFocusAgent
.
getInstance
(
)
.
getAudioFocusState
(
)
State
.
OWN_FOCUS
"
Audio
focus
state
is
correct
.
"
)
;
}
else
{
boolean
isLostFocus
=
AudioFocusAgent
.
getInstance
(
)
.
getAudioFocusState
(
)
.
equals
(
State
.
LOST_FOCUS
)
|
|
AudioFocusAgent
.
getInstance
(
)
.
getAudioFocusState
(
)
.
equals
(
State
.
LOST_FOCUS_TRANSIENT
)
;
mAsserter
.
ok
(
isLostFocus
"
Checking
the
audio
focus
when
the
tab
is
not
playing
"
"
Audio
focus
state
is
correct
.
"
)
;
}
}
protected
final
AudioFocusAgent
getAudioFocusAgent
(
)
{
return
AudioFocusAgent
.
getInstance
(
)
;
}
protected
final
void
requestAudioFocus
(
)
{
getAudioFocusAgent
(
)
.
notifyStartedPlaying
(
)
;
if
(
getAudioFocusAgent
(
)
.
getAudioFocusState
(
)
=
=
State
.
OWN_FOCUS
)
{
return
;
}
waitForCondition
(
new
Condition
(
)
{
Override
public
boolean
isSatisfied
(
)
{
getAudioFocusAgent
(
)
.
notifyStartedPlaying
(
)
;
return
getAudioFocusAgent
(
)
.
getAudioFocusState
(
)
=
=
State
.
OWN_FOCUS
;
}
}
MAX_WAIT_MS
)
;
}
protected
final
void
checkAndroidVersionForMediaControlTest
(
)
{
mAsserter
.
ok
(
isAvailableToCheckNotification
(
)
"
Checking
the
android
version
for
media
control
testing
"
"
The
API
to
check
system
notification
is
only
available
after
version
23
.
"
)
;
}
protected
final
boolean
isAvailableToCheckNotification
(
)
{
return
Build
.
VERSION
.
SDK_INT
>
=
23
;
}
}
