package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
android
.
database
.
Cursor
;
public
interface
Actions
{
public
enum
SpecialKey
{
DOWN
UP
LEFT
RIGHT
ENTER
MENU
DELETE
}
public
interface
EventExpecter
{
public
void
blockForEvent
(
)
;
public
void
blockForEvent
(
long
millis
boolean
failOnTimeout
)
;
public
String
blockForEventData
(
)
;
public
GeckoBundle
blockForBundle
(
)
;
public
String
blockForEventDataWithTimeout
(
long
millis
)
;
public
GeckoBundle
blockForBundleWithTimeout
(
long
millis
)
;
public
boolean
eventReceived
(
)
;
public
void
unregisterListener
(
)
;
}
public
interface
RepeatedEventExpecter
extends
EventExpecter
{
public
void
blockUntilClear
(
long
millis
)
;
}
public
enum
EventType
{
JSON
GECKO
UI
BACKGROUND
}
void
sendGeckoEvent
(
String
geckoEvent
String
data
)
;
void
sendGlobalEvent
(
String
event
GeckoBundle
data
)
;
void
sendWindowEvent
(
String
event
GeckoBundle
data
)
;
public
interface
PrefWaiter
{
boolean
isFinished
(
)
;
void
waitForFinish
(
)
;
void
waitForFinish
(
long
timeoutMillis
boolean
failOnTimeout
)
;
}
public
abstract
static
class
PrefHandlerBase
implements
PrefsHelper
.
PrefHandler
{
Assert
asserter
;
Override
public
void
prefValue
(
String
pref
boolean
value
)
{
asserter
.
ok
(
false
"
Unexpected
pref
callback
"
"
"
)
;
}
Override
public
void
prefValue
(
String
pref
int
value
)
{
asserter
.
ok
(
false
"
Unexpected
pref
callback
"
"
"
)
;
}
Override
public
void
prefValue
(
String
pref
String
value
)
{
asserter
.
ok
(
false
"
Unexpected
pref
callback
"
"
"
)
;
}
Override
public
void
finish
(
)
{
}
}
PrefWaiter
getPrefs
(
String
[
]
prefNames
PrefHandlerBase
handler
)
;
void
setPref
(
String
pref
Object
value
boolean
flush
)
;
PrefWaiter
addPrefsObserver
(
String
[
]
prefNames
PrefHandlerBase
handler
)
;
void
removePrefsObserver
(
PrefWaiter
handler
)
;
RepeatedEventExpecter
expectGeckoEvent
(
String
geckoEvent
)
;
RepeatedEventExpecter
expectGlobalEvent
(
EventType
type
String
event
)
;
RepeatedEventExpecter
expectWindowEvent
(
EventType
type
String
event
)
;
RepeatedEventExpecter
expectPaint
(
)
;
void
sendKeys
(
String
keysToSend
)
;
void
sendSpecialKey
(
SpecialKey
key
)
;
void
sendKeyCode
(
int
keyCode
)
;
void
drag
(
int
startingX
int
endingX
int
startingY
int
endingY
)
;
public
Cursor
querySql
(
String
dbPath
String
sql
)
;
}
