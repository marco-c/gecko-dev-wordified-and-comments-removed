package
org
.
mozilla
.
gecko
.
tests
;
import
static
org
.
mozilla
.
gecko
.
tests
.
helpers
.
AssertionHelper
.
*
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
GeckoProfile
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
public
class
testUnifiedTelemetryClientId
extends
JavascriptBridgeTest
{
private
static
final
String
TEST_JS
=
"
testUnifiedTelemetryClientId
.
js
"
;
private
static
final
String
CLIENT_ID_PATH
=
"
datareporting
/
state
.
json
"
;
private
GeckoProfile
profile
;
private
File
profileDir
;
private
File
[
]
filesToDeleteOnReset
;
public
void
setUp
(
)
throws
Exception
{
super
.
setUp
(
)
;
profile
=
getTestProfile
(
)
;
profileDir
=
profile
.
getDir
(
)
;
filesToDeleteOnReset
=
new
File
[
]
{
getClientIdFile
(
)
}
;
}
public
void
tearDown
(
)
throws
Exception
{
deleteClientIDFiles
(
)
;
super
.
tearDown
(
)
;
}
private
void
deleteClientIDFiles
(
)
{
Log
.
d
(
LOGTAG
"
deleteClientIDFiles
:
begin
"
)
;
for
(
final
File
file
:
filesToDeleteOnReset
)
{
file
.
delete
(
)
;
fAssertFalse
(
"
Deleted
file
in
reset
does
not
exist
"
file
.
exists
(
)
)
;
}
Log
.
d
(
LOGTAG
"
deleteClientIDFiles
:
end
"
)
;
}
public
void
testUnifiedTelemetryClientId
(
)
throws
Exception
{
blockForReadyAndLoadJS
(
TEST_JS
)
;
fAssertTrue
(
"
Profile
directory
exists
"
profileDir
.
exists
(
)
)
;
deleteClientIDFiles
(
)
;
primeJsClientIdCache
(
)
;
deleteClientIDFiles
(
)
;
testJavaCreatesClientId
(
)
;
deleteClientIDFiles
(
)
;
testJsCreatesClientId
(
)
;
deleteClientIDFiles
(
)
;
getJS
(
)
.
syncCall
(
"
endTest
"
)
;
}
private
void
testJavaCreatesClientId
(
)
throws
Exception
{
Log
.
d
(
LOGTAG
"
testJavaCreatesClientId
:
start
"
)
;
fAssertFalse
(
"
Client
id
file
does
not
exist
yet
"
getClientIdFile
(
)
.
exists
(
)
)
;
final
String
clientIdFromJava
=
getClientIdFromJava
(
)
;
resetJSCache
(
)
;
final
String
clientIdFromJS
=
getClientIdFromJS
(
)
;
final
String
clientIdFromJavaAgain
=
getClientIdFromJava
(
)
;
fAssertTrue
(
"
Client
ID
from
Java
equals
ID
from
JS
"
clientIdFromJava
.
equals
(
clientIdFromJS
)
|
|
clientIdFromJavaAgain
.
equals
(
clientIdFromJS
)
)
;
final
String
clientIdFromJSCache
=
getClientIdFromJS
(
)
;
resetJSCache
(
)
;
final
String
clientIdFromJSFileAgain
=
getClientIdFromJS
(
)
;
fAssertEquals
(
"
Same
client
ID
retrieved
from
JS
cache
"
clientIdFromJavaAgain
clientIdFromJSCache
)
;
fAssertEquals
(
"
Same
client
ID
retrieved
from
JS
file
"
clientIdFromJavaAgain
clientIdFromJSFileAgain
)
;
}
private
void
testJsCreatesClientId
(
)
throws
Exception
{
Log
.
d
(
LOGTAG
"
testJsCreatesClientId
:
start
"
)
;
fAssertFalse
(
"
Client
id
file
does
not
exist
yet
"
getClientIdFile
(
)
.
exists
(
)
)
;
resetJSCache
(
)
;
final
String
clientIdFromJS
=
getClientIdFromJS
(
)
;
final
String
clientIdFromJava
=
getClientIdFromJava
(
)
;
fAssertEquals
(
"
Client
ID
from
JS
equals
ID
from
Java
"
clientIdFromJS
clientIdFromJava
)
;
final
String
clientIdFromJSCache
=
getClientIdFromJS
(
)
;
final
String
clientIdFromJavaAgain
=
getClientIdFromJava
(
)
;
resetJSCache
(
)
;
final
String
clientIdFromJSFileAgain
=
getClientIdFromJS
(
)
;
fAssertEquals
(
"
Same
client
ID
retrieved
from
JS
cache
"
clientIdFromJS
clientIdFromJSCache
)
;
fAssertEquals
(
"
Same
client
ID
retrieved
from
JS
file
"
clientIdFromJS
clientIdFromJSFileAgain
)
;
fAssertEquals
(
"
Same
client
ID
retrieved
from
Java
"
clientIdFromJS
clientIdFromJavaAgain
)
;
}
private
String
getClientIdFromJava
(
)
throws
IOException
{
final
String
clientId
=
profile
.
getClientId
(
)
;
fAssertNotNull
(
"
Returned
client
ID
is
not
null
"
clientId
)
;
fAssertTrue
(
"
Client
ID
file
exists
after
getClientId
call
"
getClientIdFile
(
)
.
exists
(
)
)
;
return
clientId
;
}
private
String
getClientIdFromJS
(
)
{
return
getBlockingFromJsString
(
"
clientId
"
)
;
}
private
void
primeJsClientIdCache
(
)
{
getClientIdFromJS
(
)
;
}
private
void
resetJSCache
(
)
{
getBlockingFromJsString
(
"
reset
"
)
;
}
private
File
getClientIdFile
(
)
{
return
new
File
(
profileDir
CLIENT_ID_PATH
)
;
}
}
