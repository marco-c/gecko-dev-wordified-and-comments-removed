package
org
.
mozilla
.
gecko
.
tests
.
components
;
import
android
.
app
.
Instrumentation
;
import
android
.
support
.
v7
.
widget
.
RecyclerView
;
import
android
.
view
.
View
;
import
android
.
widget
.
Checkable
;
import
org
.
mozilla
.
gecko
.
tests
.
UITestContext
;
import
org
.
mozilla
.
gecko
.
tests
.
helpers
.
RobotiumHelper
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
static
org
.
mozilla
.
gecko
.
tests
.
helpers
.
AssertionHelper
.
fAssertEquals
;
import
static
org
.
mozilla
.
gecko
.
tests
.
helpers
.
AssertionHelper
.
fAssertNotNull
;
import
static
org
.
mozilla
.
gecko
.
tests
.
helpers
.
AssertionHelper
.
fAssertTrue
;
public
abstract
class
TabsPresenterComponent
extends
BaseComponent
{
public
TabsPresenterComponent
(
final
UITestContext
testContext
)
{
super
(
testContext
)
;
}
public
void
assertSelectedTabIndexIs
(
int
tabIndex
)
{
final
RecyclerView
tabsLayout
=
getPresenter
(
)
;
fAssertTrue
(
"
The
tab
at
tabIndex
"
+
tabIndex
+
"
is
visible
"
tabIndex
>
=
0
&
&
tabIndex
<
tabsLayout
.
getChildCount
(
)
)
;
final
Checkable
tabView
=
(
Checkable
)
tabsLayout
.
getChildAt
(
tabIndex
)
;
fAssertTrue
(
"
The
tab
at
tabIndex
"
+
tabIndex
+
"
is
selected
"
tabView
.
isChecked
(
)
)
;
}
public
void
assertTabCountIs
(
int
count
)
{
fAssertEquals
(
"
The
tab
count
is
"
+
count
count
getTabCount
(
)
)
;
}
public
abstract
void
clickNewTabButton
(
)
;
public
int
getTabCount
(
)
{
return
getPresenter
(
)
.
getAdapter
(
)
.
getItemCount
(
)
;
}
public
View
getTabViewAt
(
int
index
)
{
final
RecyclerView
presenter
=
getPresenter
(
)
;
fAssertTrue
(
"
The
tab
at
index
"
+
index
+
"
is
visible
"
index
>
=
0
&
&
index
<
presenter
.
getChildCount
(
)
)
;
return
presenter
.
getChildAt
(
index
)
;
}
public
List
<
Integer
>
getVisibleTabIdsInOrder
(
)
{
final
ArrayList
<
Integer
>
tabIds
=
new
ArrayList
<
>
(
)
;
addVisibleTabIdsToList
(
tabIds
)
;
return
tabIds
;
}
public
void
moveTab
(
int
from
int
to
)
{
final
View
fromTab
=
getTabViewAt
(
from
)
;
final
View
toTab
=
getTabViewAt
(
to
)
;
RobotiumHelper
.
longPressDragView
(
fromTab
toTab
true
)
;
}
protected
RecyclerView
getPresenter
(
)
{
final
RecyclerView
tabsPresenter
=
maybeGetPresenter
(
)
;
fAssertNotNull
(
"
Tabs
presenter
is
not
null
"
tabsPresenter
)
;
return
tabsPresenter
;
}
protected
abstract
void
addVisibleTabIdsToList
(
List
<
Integer
>
idList
)
;
protected
abstract
RecyclerView
maybeGetPresenter
(
)
;
}
