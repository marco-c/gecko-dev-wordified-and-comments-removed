package
org
.
mozilla
.
gecko
.
tests
;
import
static
org
.
mozilla
.
gecko
.
tests
.
helpers
.
AssertionHelper
.
*
;
import
org
.
mozilla
.
gecko
.
tests
.
helpers
.
GeckoHelper
;
import
org
.
mozilla
.
gecko
.
tests
.
helpers
.
JavascriptBridge
;
import
org
.
mozilla
.
gecko
.
tests
.
helpers
.
NavigationHelper
;
public
class
JavascriptBridgeTest
extends
UITest
{
private
static
final
long
WAIT_GET_FROM_JS_MILLIS
=
20000
;
private
JavascriptBridge
js
;
private
boolean
isAsyncValueSet
;
private
String
asyncValueStr
;
Override
public
void
setUp
(
)
throws
Exception
{
super
.
setUp
(
)
;
js
=
new
JavascriptBridge
(
this
)
;
}
Override
public
void
tearDown
(
)
throws
Exception
{
js
.
disconnect
(
)
;
super
.
tearDown
(
)
;
}
public
JavascriptBridge
getJS
(
)
{
return
js
;
}
protected
void
blockForReadyAndLoadJS
(
final
String
jsFilename
)
{
NavigationHelper
.
enterAndLoadUrl
(
mStringHelper
.
getHarnessUrlForJavascript
(
jsFilename
)
)
;
}
public
String
getBlockingFromJsString
(
final
String
varName
)
{
isAsyncValueSet
=
false
;
final
String
fnSuffix
=
capitalize
(
varName
)
;
getJS
(
)
.
syncCall
(
"
getAsync
"
+
fnSuffix
)
;
final
long
timeoutMillis
=
System
.
currentTimeMillis
(
)
+
WAIT_GET_FROM_JS_MILLIS
;
do
{
getJS
(
)
.
syncCall
(
"
pollGetAsync
"
+
fnSuffix
)
;
if
(
isAsyncValueSet
)
{
break
;
}
if
(
System
.
currentTimeMillis
(
)
>
timeoutMillis
)
{
fFail
(
"
Retrieving
"
+
varName
+
"
from
JS
has
timed
out
"
)
;
}
try
{
Thread
.
sleep
(
500
0
)
;
}
catch
(
final
InterruptedException
e
)
{
}
}
while
(
true
)
;
return
asyncValueStr
;
}
public
void
blockingFromJsResponseString
(
final
boolean
isValueSet
final
String
value
)
{
this
.
isAsyncValueSet
=
isValueSet
;
this
.
asyncValueStr
=
value
;
}
private
String
capitalize
(
final
String
str
)
{
return
str
.
substring
(
0
1
)
.
toUpperCase
(
)
+
str
.
substring
(
1
)
;
}
}
