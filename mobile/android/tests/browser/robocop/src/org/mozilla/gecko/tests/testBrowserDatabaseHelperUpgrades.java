package
org
.
mozilla
.
gecko
.
tests
;
import
static
org
.
mozilla
.
gecko
.
tests
.
helpers
.
AssertionHelper
.
*
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserDatabaseHelper
;
import
java
.
io
.
BufferedInputStream
;
import
java
.
io
.
BufferedOutputStream
;
import
java
.
io
.
File
;
import
java
.
io
.
FileNotFoundException
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
util
.
ArrayList
;
public
class
testBrowserDatabaseHelperUpgrades
extends
UITest
{
private
static
final
int
TEST_FROM_VERSION
=
27
;
private
ArrayList
<
File
>
temporaryDbFiles
;
Override
public
void
setUp
(
)
throws
Exception
{
super
.
setUp
(
)
;
temporaryDbFiles
=
new
ArrayList
<
>
(
)
;
}
Override
public
void
tearDown
(
)
throws
Exception
{
super
.
tearDown
(
)
;
for
(
final
File
dbFile
:
temporaryDbFiles
)
{
dbFile
.
delete
(
)
;
}
}
public
void
test
(
)
throws
IOException
{
for
(
int
i
=
TEST_FROM_VERSION
;
i
<
BrowserDatabaseHelper
.
DATABASE_VERSION
;
+
+
i
)
{
Log
.
d
(
LOGTAG
"
Testing
upgrade
from
version
:
"
+
i
)
;
final
String
tempDbPath
=
copyDatabase
(
i
)
;
final
BrowserDatabaseHelper
dbHelperToUpgrade
=
new
BrowserDatabaseHelper
(
getActivity
(
)
tempDbPath
)
;
fAssertEquals
(
"
DB
helper
should
upgrade
to
latest
version
"
BrowserDatabaseHelper
.
DATABASE_VERSION
dbHelperToUpgrade
.
getWritableDatabase
(
)
.
getVersion
(
)
)
;
}
}
private
String
copyDatabase
(
final
int
version
)
throws
IOException
{
final
InputStream
inputStream
=
openDbFromAssets
(
version
)
;
try
{
final
File
dbDestination
=
File
.
createTempFile
(
"
temporaryDB
-
v
"
+
version
+
"
_
"
"
db
"
)
;
temporaryDbFiles
.
add
(
dbDestination
)
;
Log
.
d
(
LOGTAG
"
Moving
DB
from
assets
to
"
+
dbDestination
.
getPath
(
)
)
;
final
OutputStream
outputStream
=
new
BufferedOutputStream
(
new
FileOutputStream
(
dbDestination
)
)
;
try
{
final
byte
[
]
buffer
=
new
byte
[
1024
]
;
int
len
;
while
(
(
len
=
inputStream
.
read
(
buffer
)
)
>
0
)
{
outputStream
.
write
(
buffer
0
len
)
;
}
outputStream
.
flush
(
)
;
}
finally
{
outputStream
.
close
(
)
;
}
return
dbDestination
.
getPath
(
)
;
}
finally
{
inputStream
.
close
(
)
;
}
}
private
InputStream
openDbFromAssets
(
final
int
version
)
throws
IOException
{
final
String
dbAssetPath
=
String
.
format
(
"
browser_db_upgrade
"
+
File
.
separator
+
String
.
format
(
"
v
%
d
.
db
"
version
)
)
;
Log
.
d
(
LOGTAG
"
Opening
DB
from
assets
:
"
+
dbAssetPath
)
;
try
{
return
new
BufferedInputStream
(
getInstrumentation
(
)
.
getContext
(
)
.
getAssets
(
)
.
open
(
dbAssetPath
)
)
;
}
catch
(
final
FileNotFoundException
e
)
{
throw
new
IllegalStateException
(
"
If
you
'
re
upgrading
the
browser
.
db
version
"
+
"
you
need
to
provide
an
old
version
of
the
database
for
this
test
!
See
the
javadoc
.
"
e
)
;
}
}
}
