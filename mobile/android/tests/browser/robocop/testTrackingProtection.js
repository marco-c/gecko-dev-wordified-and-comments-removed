"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
EventDispatcher
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
const
DTSCBN_PREF
=
"
dom
.
testing
.
sync
-
content
-
blocking
-
notifications
"
;
function
promiseLoadEvent
(
browser
url
eventType
=
"
load
"
runBeforeLoad
)
{
return
new
Promise
(
(
resolve
reject
)
=
>
{
do_print
(
"
Wait
browser
event
:
"
+
eventType
)
;
function
handle
(
event
)
{
if
(
event
.
target
!
=
browser
.
contentDocument
|
|
event
.
target
.
location
.
href
=
=
"
about
:
blank
"
|
|
(
url
&
&
event
.
target
.
location
.
href
!
=
url
)
)
{
do_print
(
"
Skipping
spurious
'
"
+
eventType
+
"
'
event
"
+
"
for
"
+
event
.
target
.
location
.
href
)
;
return
;
}
browser
.
removeEventListener
(
eventType
handle
true
)
;
do_print
(
"
Browser
event
received
:
"
+
eventType
)
;
resolve
(
event
)
;
}
browser
.
addEventListener
(
eventType
handle
true
)
;
if
(
runBeforeLoad
)
{
runBeforeLoad
(
)
;
}
if
(
url
)
{
browser
.
loadURI
(
url
)
;
}
}
)
;
}
var
TABLE
=
"
urlclassifier
.
trackingTable
"
;
function
doUpdate
(
)
{
var
testData
=
"
tracking
.
example
.
com
/
"
;
var
testUpdate
=
"
n
:
1000
\
ni
:
test
-
track
-
simple
\
nad
:
1
\
n
"
+
"
a
:
524
:
32
:
"
+
testData
.
length
+
"
\
n
"
+
testData
;
let
dbService
=
Cc
[
"
mozilla
.
org
/
url
-
classifier
/
dbservice
;
1
"
]
.
getService
(
Ci
.
nsIUrlClassifierDBService
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
let
listener
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIUrlClassifierUpdateObserver
]
)
updateUrlRequested
:
function
(
url
)
{
}
streamFinished
:
function
(
status
)
{
}
updateError
:
function
(
errorCode
)
{
ok
(
false
"
Couldn
'
t
update
classifier
.
"
)
;
resolve
(
)
;
}
updateSuccess
:
function
(
requestedTimeout
)
{
resolve
(
)
;
}
}
;
dbService
.
beginUpdate
(
listener
"
test
-
track
-
simple
"
"
"
)
;
dbService
.
beginStream
(
"
"
"
"
)
;
dbService
.
updateStream
(
testUpdate
)
;
dbService
.
finishStream
(
)
;
dbService
.
finishUpdate
(
)
;
}
)
;
}
var
BrowserApp
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
.
BrowserApp
;
add_task
(
async
function
test_tracking_pb
(
)
{
Services
.
prefs
.
setBoolPref
(
DTSCBN_PREF
true
)
;
let
browser
=
BrowserApp
.
addTab
(
"
about
:
blank
"
{
selected
:
true
parentId
:
BrowserApp
.
selectedTab
.
id
isPrivate
:
true
}
)
.
browser
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
browser
.
addEventListener
(
"
load
"
function
(
event
)
{
Services
.
tm
.
dispatchToMainThread
(
resolve
)
;
}
{
capture
:
true
once
:
true
}
)
;
}
)
;
Services
.
prefs
.
setCharPref
(
TABLE
"
test
-
track
-
simple
"
)
;
await
doUpdate
(
)
;
await
promiseLoadEvent
(
browser
"
http
:
/
/
tracking
.
example
.
org
/
tests
/
robocop
/
tracking_good
.
html
"
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Test
:
Expected
"
expected
:
"
unknown
"
}
)
;
await
promiseLoadEvent
(
browser
"
http
:
/
/
tracking
.
example
.
org
/
tests
/
robocop
/
tracking_bad
.
html
"
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Test
:
Expected
"
expected
:
"
tracking_content_blocked
"
}
)
;
await
promiseLoadEvent
(
browser
undefined
undefined
(
)
=
>
{
EventDispatcher
.
instance
.
dispatch
(
"
Session
:
Reload
"
{
allowContent
:
true
contentType
:
"
tracking
"
}
)
;
}
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Test
:
Expected
"
expected
:
"
tracking_content_loaded
"
}
)
;
await
promiseLoadEvent
(
browser
undefined
undefined
(
)
=
>
{
EventDispatcher
.
instance
.
dispatch
(
"
Session
:
Reload
"
{
allowContent
:
false
contentType
:
"
tracking
"
}
)
;
}
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Test
:
Expected
"
expected
:
"
tracking_content_blocked
"
}
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
false
)
;
await
promiseLoadEvent
(
browser
"
http
:
/
/
tracking
.
example
.
org
/
tests
/
robocop
/
tracking_bad
.
html
"
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Test
:
Expected
"
expected
:
"
unknown
"
}
)
;
await
promiseLoadEvent
(
browser
"
http
:
/
/
tracking
.
example
.
org
/
tests
/
robocop
/
tracking_good
.
html
"
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Test
:
Expected
"
expected
:
"
unknown
"
}
)
;
Services
.
prefs
.
clearUserPref
(
"
privacy
.
trackingprotection
.
pbmode
.
enabled
"
)
;
}
)
;
add_task
(
async
function
test_tracking_not_pb
(
)
{
let
browser
=
BrowserApp
.
addTab
(
"
about
:
blank
"
{
selected
:
true
}
)
.
browser
;
await
new
Promise
(
(
resolve
reject
)
=
>
{
browser
.
addEventListener
(
"
load
"
function
(
event
)
{
Services
.
tm
.
dispatchToMainThread
(
resolve
)
;
}
{
capture
:
true
once
:
true
}
)
;
}
)
;
await
promiseLoadEvent
(
browser
"
http
:
/
/
tracking
.
example
.
org
/
tests
/
robocop
/
tracking_good
.
html
"
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Test
:
Expected
"
expected
:
"
unknown
"
}
)
;
await
promiseLoadEvent
(
browser
"
http
:
/
/
tracking
.
example
.
org
/
tests
/
robocop
/
tracking_bad
.
html
"
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Test
:
Expected
"
expected
:
"
unknown
"
}
)
;
Services
.
prefs
.
setBoolPref
(
"
privacy
.
trackingprotection
.
enabled
"
true
)
;
await
promiseLoadEvent
(
browser
"
http
:
/
/
tracking
.
example
.
org
/
tests
/
robocop
/
tracking_bad
.
html
"
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Test
:
Expected
"
expected
:
"
tracking_content_blocked
"
}
)
;
}
)
;
add_task
(
async
function
cleanup
(
)
{
Services
.
prefs
.
clearUserPref
(
DTSCBN_PREF
)
;
}
)
;
run_next_test
(
)
;
