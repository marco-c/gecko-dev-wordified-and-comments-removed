package
org
.
mozilla
.
gecko
.
tests
;
import
org
.
mozilla
.
gecko
.
R
;
import
com
.
jayway
.
android
.
robotium
.
solo
.
Condition
;
import
android
.
view
.
View
;
import
android
.
widget
.
ImageView
;
public
class
testClearPrivateData
extends
PixelTest
{
private
final
int
TEST_WAIT_MS
=
10000
;
public
void
testClearPrivateData
(
)
{
blockForGeckoReady
(
)
;
clearHistory
(
)
;
clearSiteSettings
(
)
;
clearPassword
(
)
;
}
private
void
clearHistory
(
)
{
String
blank1
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_BLANK_PAGE_01_URL
)
;
String
blank2
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_BLANK_PAGE_02_URL
)
;
String
title
=
mStringHelper
.
ROBOCOP_BLANK_PAGE_01_TITLE
;
loadUrlAndWait
(
blank1
)
;
verifyUrlBarTitle
(
blank1
)
;
mDatabaseHelper
.
addMobileBookmark
(
mStringHelper
.
ROBOCOP_BLANK_PAGE_02_TITLE
blank2
)
;
verifyHistoryCount
(
1
)
;
checkDevice
(
title
blank1
)
;
verifyHistoryCount
(
0
)
;
mAsserter
.
ok
(
mDatabaseHelper
.
isBookmark
(
blank2
)
"
Checking
that
bookmarks
have
not
been
removed
"
"
User
made
bookmarks
were
not
removed
with
private
data
"
)
;
}
private
void
verifyHistoryCount
(
final
int
expectedCount
)
{
boolean
match
=
waitForCondition
(
new
Condition
(
)
{
Override
public
boolean
isSatisfied
(
)
{
return
mDatabaseHelper
.
getBrowserDBUrls
(
DatabaseHelper
.
BrowserDataType
.
HISTORY
)
.
size
(
)
=
=
expectedCount
;
}
}
TEST_WAIT_MS
)
;
mAsserter
.
ok
(
match
"
Checking
that
the
number
of
history
items
is
correct
"
String
.
valueOf
(
expectedCount
)
+
"
history
items
present
in
the
database
"
)
;
}
public
void
clearSiteSettings
(
)
{
String
titleGeolocation
=
mStringHelper
.
ROBOCOP_GEOLOCATION_TITLE
;
String
url
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_GEOLOCATION_URL
)
;
loadCheckDismiss
(
mStringHelper
.
GEO_ALLOW
url
mStringHelper
.
GEO_MESSAGE
)
;
checkOption
(
mStringHelper
.
GEO_ALLOW
mStringHelper
.
CLEAR
)
;
loadCheckDismiss
(
mStringHelper
.
GEO_DENY
url
mStringHelper
.
GEO_MESSAGE
)
;
checkOption
(
mStringHelper
.
GEO_DENY
mStringHelper
.
CANCEL
)
;
checkDevice
(
titleGeolocation
url
)
;
}
public
void
clearPassword
(
)
{
String
passwordStrings
[
]
=
{
mStringHelper
.
LOGIN_MESSAGE
mStringHelper
.
LOGIN_ALLOW
mStringHelper
.
LOGIN_DENY
}
;
String
title
=
mStringHelper
.
ROBOCOP_BLANK_PAGE_01_TITLE
;
String
loginUrl
=
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_LOGIN_01_URL
)
;
loadCheckDismiss
(
passwordStrings
[
1
]
loginUrl
passwordStrings
[
0
]
)
;
checkOption
(
mStringHelper
.
CONTEXT_MENU_SITE_SETTINGS_SAVE_PASSWORD
mStringHelper
.
CLEAR
)
;
loadCheckDismiss
(
passwordStrings
[
2
]
loginUrl
passwordStrings
[
0
]
)
;
checkDevice
(
title
getAbsoluteUrl
(
mStringHelper
.
ROBOCOP_BLANK_PAGE_01_URL
)
)
;
}
public
void
checkDevice
(
final
String
title
final
String
url
)
{
clearPrivateData
(
)
;
if
(
mDevice
.
type
.
equals
(
"
phone
"
)
)
{
mSolo
.
goBack
(
)
;
mAsserter
.
ok
(
waitForText
(
mStringHelper
.
PRIVACY_SECTION_LABEL
)
"
waiting
to
perform
one
back
"
"
one
back
"
)
;
}
mSolo
.
goBack
(
)
;
verifyUrlBarTitle
(
url
)
;
}
public
void
loadCheckDismiss
(
String
option
String
url
String
message
)
{
loadUrlAndWait
(
url
)
;
waitForText
(
message
)
;
mAsserter
.
is
(
mSolo
.
searchText
(
message
)
true
"
Doorhanger
:
"
+
message
+
"
has
been
displayed
"
)
;
mSolo
.
clickOnButton
(
option
)
;
mAsserter
.
is
(
mSolo
.
searchText
(
message
)
false
"
Doorhanger
:
"
+
message
+
"
has
been
hidden
"
)
;
}
public
void
checkOption
(
String
option
String
button
)
{
if
(
mDevice
.
version
.
equals
(
"
2
.
x
"
)
)
{
final
View
toolbarView
=
mSolo
.
getView
(
R
.
id
.
browser_toolbar
)
;
mSolo
.
clickLongOnView
(
toolbarView
)
;
mAsserter
.
ok
(
waitForText
(
mStringHelper
.
CONTEXT_MENU_ITEMS_IN_URL_BAR
[
2
]
)
"
Waiting
for
the
pop
-
up
to
open
"
"
Pop
up
was
opened
"
)
;
}
else
{
openSiteSecurityDoorHanger
(
)
;
mAsserter
.
ok
(
waitForText
(
mStringHelper
.
CONTEXT_MENU_ITEMS_IN_URL_BAR
[
2
]
)
"
Waiting
for
the
submenu
to
open
for
"
+
option
+
"
on
"
+
button
"
Submenu
was
opened
"
)
;
}
mSolo
.
clickOnText
(
mStringHelper
.
CONTEXT_MENU_ITEMS_IN_URL_BAR
[
2
]
)
;
mAsserter
.
ok
(
waitForText
(
option
)
"
Verify
that
the
option
:
"
+
option
+
"
is
in
the
list
"
"
The
option
is
in
the
list
.
There
are
settings
to
clear
"
)
;
mSolo
.
clickOnButton
(
button
)
;
}
private
void
openSiteSecurityDoorHanger
(
)
{
mSolo
.
waitForCondition
(
new
Condition
(
)
{
Override
public
boolean
isSatisfied
(
)
{
ImageView
btn
=
(
ImageView
)
mSolo
.
getView
(
R
.
id
.
favicon
)
;
mSolo
.
clickOnView
(
btn
)
;
return
true
;
}
}
TEST_WAIT_MS
)
;
}
}
