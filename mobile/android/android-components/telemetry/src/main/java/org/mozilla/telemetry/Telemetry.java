package
org
.
mozilla
.
telemetry
;
import
android
.
support
.
annotation
.
RestrictTo
;
import
org
.
mozilla
.
telemetry
.
config
.
TelemetryConfiguration
;
import
org
.
mozilla
.
telemetry
.
net
.
TelemetryClient
;
import
org
.
mozilla
.
telemetry
.
ping
.
TelemetryCorePingBuilder
;
import
org
.
mozilla
.
telemetry
.
ping
.
TelemetryPing
;
import
org
.
mozilla
.
telemetry
.
ping
.
TelemetryPingBuilder
;
import
org
.
mozilla
.
telemetry
.
schedule
.
TelemetryScheduler
;
import
org
.
mozilla
.
telemetry
.
storage
.
TelemetryStorage
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
Telemetry
{
private
final
TelemetryConfiguration
configuration
;
private
final
TelemetryStorage
storage
;
private
final
TelemetryClient
client
;
private
final
TelemetryScheduler
scheduler
;
private
final
Map
<
String
TelemetryPingBuilder
>
pingBuilders
;
public
Telemetry
(
TelemetryConfiguration
configuration
TelemetryStorage
storage
TelemetryClient
client
TelemetryScheduler
scheduler
)
{
this
.
configuration
=
configuration
;
this
.
storage
=
storage
;
this
.
client
=
client
;
this
.
scheduler
=
scheduler
;
pingBuilders
=
new
HashMap
<
>
(
)
;
}
public
Telemetry
addPingBuilder
(
TelemetryPingBuilder
builder
)
{
pingBuilders
.
put
(
builder
.
getType
(
)
builder
)
;
return
this
;
}
public
void
queuePing
(
String
pingType
)
{
if
(
!
configuration
.
isCollectionEnabled
(
)
)
{
return
;
}
final
TelemetryPingBuilder
pingBuilder
=
pingBuilders
.
get
(
pingType
)
;
if
(
!
pingBuilder
.
canBuild
(
)
)
{
return
;
}
final
TelemetryPing
ping
=
pingBuilder
.
build
(
)
;
storage
.
store
(
ping
)
;
}
public
TelemetryPingBuilder
getBuilder
(
String
pingType
)
{
return
pingBuilders
.
get
(
pingType
)
;
}
public
void
scheduleUpload
(
String
pingType
)
{
if
(
!
configuration
.
isUploadEnabled
(
)
)
{
return
;
}
if
(
storage
.
countStoredPings
(
pingType
)
=
=
0
)
{
return
;
}
scheduler
.
scheduleUpload
(
configuration
pingType
)
;
}
public
void
recordSessionStart
(
)
{
if
(
!
configuration
.
isCollectionEnabled
(
)
)
{
return
;
}
if
(
!
pingBuilders
.
containsKey
(
TelemetryCorePingBuilder
.
TYPE
)
)
{
throw
new
IllegalStateException
(
"
This
configuration
does
not
contain
a
core
ping
builder
"
)
;
}
final
TelemetryCorePingBuilder
builder
=
(
TelemetryCorePingBuilder
)
pingBuilders
.
get
(
TelemetryCorePingBuilder
.
TYPE
)
;
builder
.
getSessionDurationMeasurement
(
)
.
recordSessionStart
(
)
;
builder
.
getSessionCountMeasurement
(
)
.
countSession
(
)
;
}
public
void
recordSessionEnd
(
)
{
if
(
!
configuration
.
isCollectionEnabled
(
)
)
{
return
;
}
if
(
!
pingBuilders
.
containsKey
(
TelemetryCorePingBuilder
.
TYPE
)
)
{
throw
new
IllegalStateException
(
"
This
configuration
does
not
contain
a
core
ping
builder
"
)
;
}
final
TelemetryCorePingBuilder
builder
=
(
TelemetryCorePingBuilder
)
pingBuilders
.
get
(
TelemetryCorePingBuilder
.
TYPE
)
;
builder
.
getSessionDurationMeasurement
(
)
.
recordSessionEnd
(
)
;
}
RestrictTo
(
RestrictTo
.
Scope
.
LIBRARY
)
public
TelemetryClient
getClient
(
)
{
return
client
;
}
RestrictTo
(
RestrictTo
.
Scope
.
LIBRARY
)
public
TelemetryStorage
getStorage
(
)
{
return
storage
;
}
RestrictTo
(
RestrictTo
.
Scope
.
LIBRARY
)
public
TelemetryConfiguration
getConfiguration
(
)
{
return
configuration
;
}
}
