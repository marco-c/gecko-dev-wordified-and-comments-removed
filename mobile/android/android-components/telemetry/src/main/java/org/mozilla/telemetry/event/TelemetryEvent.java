package
org
.
mozilla
.
telemetry
.
event
;
import
android
.
os
.
SystemClock
;
import
android
.
support
.
annotation
.
CheckResult
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
RestrictTo
;
import
org
.
json
.
JSONArray
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
telemetry
.
TelemetryHolder
;
import
org
.
mozilla
.
telemetry
.
ping
.
TelemetryEventPingBuilder
;
import
java
.
util
.
Map
;
public
class
TelemetryEvent
{
private
static
final
long
startTime
=
SystemClock
.
elapsedRealtime
(
)
;
CheckResult
public
static
TelemetryEvent
create
(
NonNull
String
category
NonNull
String
method
Nullable
String
object
)
{
final
TelemetryEvent
event
=
new
TelemetryEvent
(
)
;
event
.
category
=
category
;
event
.
method
=
method
;
event
.
object
=
object
;
return
event
;
}
public
static
TelemetryEvent
create
(
NonNull
String
category
NonNull
String
method
Nullable
String
object
String
value
)
{
final
TelemetryEvent
event
=
new
TelemetryEvent
(
)
;
event
.
category
=
category
;
event
.
method
=
method
;
event
.
object
=
object
;
event
.
value
=
value
;
return
event
;
}
CheckResult
public
static
TelemetryEvent
create
(
NonNull
String
category
NonNull
String
method
Nullable
String
object
String
value
Map
<
String
Object
>
extras
)
{
final
TelemetryEvent
event
=
new
TelemetryEvent
(
)
;
event
.
category
=
category
;
event
.
method
=
method
;
event
.
object
=
object
;
event
.
value
=
value
;
event
.
extras
=
extras
;
return
event
;
}
private
long
timestamp
;
private
String
category
;
private
String
method
;
private
String
object
;
private
Nullable
String
value
;
private
Nullable
Map
<
String
Object
>
extras
;
private
TelemetryEvent
(
)
{
timestamp
=
SystemClock
.
elapsedRealtime
(
)
-
startTime
;
}
public
Thread
queue
(
)
{
final
TelemetryEventPingBuilder
builder
=
(
TelemetryEventPingBuilder
)
TelemetryHolder
.
get
(
)
.
getBuilder
(
TelemetryEventPingBuilder
.
TYPE
)
;
return
builder
.
getEventsMeasurement
(
)
.
add
(
this
)
;
}
RestrictTo
(
RestrictTo
.
Scope
.
LIBRARY
)
public
String
toJSON
(
)
{
final
JSONArray
array
=
new
JSONArray
(
)
;
array
.
put
(
timestamp
)
;
array
.
put
(
category
)
;
array
.
put
(
method
)
;
array
.
put
(
object
)
;
if
(
value
!
=
null
)
{
array
.
put
(
value
)
;
}
if
(
extras
!
=
null
)
{
if
(
value
=
=
null
)
{
array
.
put
(
null
)
;
}
array
.
put
(
new
JSONObject
(
extras
)
)
;
}
return
array
.
toString
(
)
;
}
}
