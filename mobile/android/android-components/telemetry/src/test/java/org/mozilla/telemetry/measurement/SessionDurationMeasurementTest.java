package
org
.
mozilla
.
telemetry
.
measurement
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
telemetry
.
config
.
TelemetryConfiguration
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
org
.
robolectric
.
RuntimeEnvironment
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
junit
.
Assert
.
assertNotNull
;
import
static
org
.
junit
.
Assert
.
assertTrue
;
import
static
org
.
mockito
.
Mockito
.
doReturn
;
import
static
org
.
mockito
.
Mockito
.
spy
;
RunWith
(
RobolectricTestRunner
.
class
)
public
class
SessionDurationMeasurementTest
{
Test
public
void
testDefaultIsZero
(
)
{
final
TelemetryConfiguration
configuration
=
new
TelemetryConfiguration
(
RuntimeEnvironment
.
application
)
;
final
SessionDurationMeasurement
measurement
=
new
SessionDurationMeasurement
(
configuration
)
;
final
Object
value
=
measurement
.
flush
(
)
;
assertNotNull
(
value
)
;
assertTrue
(
value
instanceof
Long
)
;
final
long
duration
=
(
Long
)
value
;
assertEquals
(
0
duration
)
;
assertEquals
(
0
(
long
)
measurement
.
flush
(
)
)
;
}
Test
public
void
testRecordingSessionStartAndEnd
(
)
{
final
TelemetryConfiguration
configuration
=
new
TelemetryConfiguration
(
RuntimeEnvironment
.
application
)
;
final
SessionDurationMeasurement
measurement
=
spy
(
new
SessionDurationMeasurement
(
configuration
)
)
;
doReturn
(
1337000000L
)
.
doReturn
(
5337000000L
)
.
when
(
measurement
)
.
getSystemTimeNano
(
)
;
assertEquals
(
0
(
long
)
measurement
.
flush
(
)
)
;
measurement
.
recordSessionStart
(
)
;
assertEquals
(
0
(
long
)
measurement
.
flush
(
)
)
;
measurement
.
recordSessionEnd
(
)
;
assertEquals
(
4
(
long
)
measurement
.
flush
(
)
)
;
assertEquals
(
0
(
long
)
measurement
.
flush
(
)
)
;
}
Test
public
void
testMultipleSessionsAreSummedUp
(
)
{
final
TelemetryConfiguration
configuration
=
new
TelemetryConfiguration
(
RuntimeEnvironment
.
application
)
;
final
SessionDurationMeasurement
measurement
=
spy
(
new
SessionDurationMeasurement
(
configuration
)
)
;
doReturn
(
1337000000L
)
.
doReturn
(
5337000000L
)
.
doReturn
(
8337000000L
)
.
doReturn
(
10337000000L
)
.
when
(
measurement
)
.
getSystemTimeNano
(
)
;
assertEquals
(
0
(
long
)
measurement
.
flush
(
)
)
;
measurement
.
recordSessionStart
(
)
;
measurement
.
recordSessionEnd
(
)
;
measurement
.
recordSessionStart
(
)
;
measurement
.
recordSessionEnd
(
)
;
assertEquals
(
6
(
long
)
measurement
.
flush
(
)
)
;
assertEquals
(
0
(
long
)
measurement
.
flush
(
)
)
;
}
Test
(
expected
=
IllegalStateException
.
class
)
public
void
testStartingAlreadyStartedSessionThrowsException
(
)
{
final
TelemetryConfiguration
configuration
=
new
TelemetryConfiguration
(
RuntimeEnvironment
.
application
)
;
final
SessionDurationMeasurement
measurement
=
new
SessionDurationMeasurement
(
configuration
)
;
measurement
.
recordSessionStart
(
)
;
measurement
.
recordSessionStart
(
)
;
}
Test
(
expected
=
IllegalStateException
.
class
)
public
void
testStoppingAlreadyStoppedSessionThrowsException
(
)
{
final
TelemetryConfiguration
configuration
=
new
TelemetryConfiguration
(
RuntimeEnvironment
.
application
)
;
final
SessionDurationMeasurement
measurement
=
new
SessionDurationMeasurement
(
configuration
)
;
measurement
.
recordSessionStart
(
)
;
measurement
.
recordSessionEnd
(
)
;
measurement
.
recordSessionEnd
(
)
;
}
Test
(
expected
=
IllegalStateException
.
class
)
public
void
testStoppingNeverStartedSessionThrowsException
(
)
{
final
TelemetryConfiguration
configuration
=
new
TelemetryConfiguration
(
RuntimeEnvironment
.
application
)
;
final
SessionDurationMeasurement
measurement
=
new
SessionDurationMeasurement
(
configuration
)
;
measurement
.
recordSessionEnd
(
)
;
}
}
