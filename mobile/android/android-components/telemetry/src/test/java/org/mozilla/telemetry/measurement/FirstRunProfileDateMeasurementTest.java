package
org
.
mozilla
.
telemetry
.
measurement
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
telemetry
.
config
.
TelemetryConfiguration
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
org
.
robolectric
.
RuntimeEnvironment
;
import
static
org
.
junit
.
Assert
.
*
;
import
static
org
.
mockito
.
Mockito
.
doReturn
;
import
static
org
.
mockito
.
Mockito
.
spy
;
RunWith
(
RobolectricTestRunner
.
class
)
public
class
FirstRunProfileDateMeasurementTest
{
Test
public
void
testDefaultValue
(
)
{
final
TelemetryConfiguration
configuration
=
new
TelemetryConfiguration
(
RuntimeEnvironment
.
application
)
;
final
FirstRunProfileDateMeasurement
measurement
=
new
FirstRunProfileDateMeasurement
(
configuration
)
;
final
Object
value
=
measurement
.
flush
(
)
;
assertNotNull
(
value
)
;
assertTrue
(
value
instanceof
Long
)
;
final
long
profileCreationInDays
=
(
long
)
value
;
assertTrue
(
profileCreationInDays
>
17261
)
;
assertTrue
(
profileCreationInDays
<
System
.
currentTimeMillis
(
)
)
;
}
Test
public
void
testCalculation
(
)
{
final
TelemetryConfiguration
configuration
=
new
TelemetryConfiguration
(
RuntimeEnvironment
.
application
)
;
final
FirstRunProfileDateMeasurement
measurement
=
spy
(
new
FirstRunProfileDateMeasurement
(
configuration
)
)
;
doReturn
(
1491487779305L
)
.
when
(
measurement
)
.
now
(
)
;
assertEquals
(
17262L
measurement
.
flush
(
)
)
;
}
Test
public
void
testFallback
(
)
{
final
TelemetryConfiguration
configuration
=
new
TelemetryConfiguration
(
RuntimeEnvironment
.
application
)
;
final
FirstRunProfileDateMeasurement
measurement
=
spy
(
new
FirstRunProfileDateMeasurement
(
configuration
)
)
;
configuration
.
getSharedPreferences
(
)
.
edit
(
)
.
clear
(
)
.
apply
(
)
;
final
Object
value
=
measurement
.
flush
(
)
;
assertNotNull
(
value
)
;
assertTrue
(
value
instanceof
Long
)
;
final
long
profileCreationInDays
=
(
long
)
value
;
assertTrue
(
profileCreationInDays
>
17261
)
;
assertTrue
(
profileCreationInDays
<
System
.
currentTimeMillis
(
)
)
;
}
}
