from
pathlib
import
Path
import
os
import
time
import
hashlib
import
argparse
import
re
import
subprocess
def
fatal_err
(
msg
)
:
    
print
(
f
"
\
033
[
31mError
:
{
msg
}
\
033
[
0m
"
)
    
exit
(
1
)
def
run_cmd_checked
(
*
args
*
*
kwargs
)
:
    
"
"
"
Run
a
command
throwing
an
exception
if
it
exits
with
non
-
zero
status
.
"
"
"
    
kwargs
[
"
check
"
]
=
True
    
return
subprocess
.
run
(
*
args
*
*
kwargs
)
def
find_project_root
(
)
:
    
"
"
"
Find
the
absolute
path
of
the
project
repository
root
.
"
"
"
    
cur_dir
=
Path
(
__file__
)
.
parent
    
while
not
Path
(
cur_dir
"
LICENSE
"
)
.
exists
(
)
:
        
cur_dir
=
cur_dir
.
parent
    
return
cur_dir
.
absolute
(
)
LAST_CONTENTS_HASH_FILE
=
"
.
lastAutoPublishContentsHash
"
GITIGNORED_FILES_THAT_AFFECT_THE_BUILD
=
[
"
local
.
properties
"
]
parser
=
argparse
.
ArgumentParser
(
description
=
"
Publish
android
packages
to
local
maven
repo
but
only
if
changed
since
last
publish
"
)
parser
.
parse_args
(
)
root_dir
=
find_project_root
(
)
if
str
(
root_dir
)
!
=
os
.
path
.
abspath
(
os
.
curdir
)
:
    
fatal_err
(
f
"
This
only
works
if
run
from
the
repo
root
(
{
root_dir
!
r
}
!
=
{
os
.
path
.
abspath
(
os
.
curdir
)
!
r
}
)
"
)
contents_hash
=
hashlib
.
sha256
(
)
contents_hash
.
update
(
    
run_cmd_checked
(
[
"
git
"
"
rev
-
parse
"
"
HEAD
"
]
capture_output
=
True
)
.
stdout
)
contents_hash
.
update
(
b
"
\
x00
"
)
changes
=
run_cmd_checked
(
[
"
git
"
"
status
"
"
-
v
"
"
-
v
"
]
capture_output
=
True
)
.
stdout
contents_hash
.
update
(
changes
)
contents_hash
.
update
(
b
"
\
x00
"
)
untracked_files
=
[
]
changes_lines
=
iter
(
ln
.
strip
(
)
for
ln
in
changes
.
split
(
b
"
\
n
"
)
)
try
:
    
ln
=
next
(
changes_lines
)
    
while
not
ln
.
startswith
(
b
"
Untracked
files
:
"
)
:
        
ln
=
next
(
changes_lines
)
    
ln
=
next
(
changes_lines
)
    
ln
=
next
(
changes_lines
)
    
while
ln
:
        
untracked_files
.
append
(
ln
)
        
ln
=
next
(
changes_lines
)
except
StopIteration
:
    
pass
untracked_files
.
extend
(
GITIGNORED_FILES_THAT_AFFECT_THE_BUILD
)
for
nm
in
untracked_files
:
    
with
open
(
nm
"
rb
"
)
as
f
:
        
contents_hash
.
update
(
f
.
read
(
)
)
    
contents_hash
.
update
(
b
"
\
x00
"
)
contents_hash
.
update
(
b
"
\
x00
"
)
contents_hash
=
contents_hash
.
hexdigest
(
)
last_contents_hash
=
"
"
try
:
    
with
open
(
LAST_CONTENTS_HASH_FILE
)
as
f
:
        
last_contents_hash
=
f
.
read
(
)
.
strip
(
)
except
FileNotFoundError
:
    
pass
if
contents_hash
=
=
last_contents_hash
:
    
print
(
"
Contents
have
not
changed
no
need
to
publish
"
)
else
:
    
print
(
"
Contents
have
changed
publishing
"
)
    
run_cmd_checked
(
[
"
.
/
gradlew
"
"
publishToMavenLocal
"
f
"
-
Plocal
=
{
time
.
time_ns
(
)
}
"
]
)
    
with
open
(
LAST_CONTENTS_HASH_FILE
"
w
"
)
as
f
:
        
f
.
write
(
contents_hash
)
        
f
.
write
(
"
\
n
"
)
