from
__future__
import
print_function
unicode_literals
import
logging
import
os
import
re
import
subprocess
from
collections
import
defaultdict
from
copy
import
deepcopy
from
taskgraph
.
loader
.
transform
import
loader
as
base_loader
from
taskgraph
.
util
.
memoize
import
memoize
from
taskgraph
.
util
.
taskcluster
import
get_session
from
taskgraph
.
util
.
templates
import
merge
from
.
.
files_changes
import
get_files_changed_pr
get_files_changed_push
from
.
.
build_config
import
get_components
logger
=
logging
.
getLogger
(
__name__
)
_GIT_ZERO_HASHES
=
(
    
"
0000000000000000000000000000000000000000
"
    
"
0000000000000000000000000000000000000000000000000000000000000000
"
)
ALL_COMPONENTS
=
object
(
)
def
get_components_changed
(
files_changed
)
:
    
"
"
"
Translate
a
list
of
files
changed
into
a
list
of
components
.
Eg
:
        
[
            
"
components
/
service
/
sync
-
logins
/
src
/
main
/
java
/
mozilla
/
components
/
service
/
sync
/
logins
/
GeckoLoginStorageDelegate
.
kt
"
            
"
components
/
service
/
sync
-
logins
/
src
/
test
/
java
/
mozilla
/
components
/
service
/
sync
/
logins
/
GeckoLoginStorageDelegateTest
.
kt
"
        
]
        
-
>
        
{
service
-
sync
-
logins
}
    
"
"
"
    
return
set
(
[
"
-
"
.
join
(
f
.
split
(
"
/
"
)
[
1
:
3
]
)
for
f
in
files_changed
if
f
.
startswith
(
"
components
"
)
]
)
cached_deps
=
{
}
def
get_upstream_deps_for_components
(
components
)
:
    
"
"
"
Return
the
full
list
of
local
upstream
dependencies
of
a
component
.
"
"
"
    
deps
=
set
(
)
    
cmd
=
[
"
.
/
gradlew
"
]
    
for
c
in
sorted
(
components
)
:
        
cmd
.
extend
(
[
"
%
s
:
dependencies
"
%
c
"
-
-
configuration
"
"
implementation
"
]
)
    
current_component
=
None
    
for
line
in
subprocess
.
check_output
(
cmd
)
.
splitlines
(
)
:
        
if
line
.
startswith
(
"
Project
"
)
:
            
if
deps
:
                
logger
.
info
(
"
Found
direct
upstream
dependencies
for
component
'
%
s
'
:
%
s
"
%
(
current_component
sorted
(
deps
)
)
)
            
else
:
                
logger
.
info
(
"
No
direct
upstream
dependencies
found
for
component
'
%
s
'
"
%
current_component
)
            
yield
current_component
deps
            
deps
=
set
(
)
            
current_component
=
line
.
split
(
"
:
"
)
[
1
]
        
if
line
.
startswith
(
"
+
-
-
-
project
"
)
:
            
deps
.
add
(
line
.
split
(
"
"
)
[
2
]
)
    
if
deps
:
        
logger
.
info
(
"
Found
direct
upstream
dependencies
for
component
'
%
s
'
:
%
s
"
%
(
current_component
sorted
(
deps
)
)
)
    
else
:
        
logger
.
info
(
"
No
direct
upstream
dependencies
found
for
component
'
%
s
'
"
%
current_component
)
    
yield
current_component
deps
def
get_affected_components
(
files_changed
files_affecting_components
upstream_component_dependencies
downstream_component_dependencies
)
:
    
affected_components
=
set
(
)
    
for
c
in
get_components_changed
(
files_changed
)
:
        
affected_components
.
add
(
c
)
    
for
pattern
components
in
files_affecting_components
.
items
(
)
:
        
if
any
(
[
re
.
match
(
pattern
f
)
for
f
in
files_changed
]
)
:
            
if
components
=
=
"
all
-
components
"
:
                
return
ALL_COMPONENTS
            
affected_components
.
update
(
components
)
    
for
c
in
affected_components
.
copy
(
)
:
        
if
upstream_component_dependencies
[
c
]
:
            
logger
.
info
(
"
Adding
direct
upstream
dependencies
for
'
%
s
'
:
%
s
"
%
(
c
"
"
.
join
(
sorted
(
upstream_component_dependencies
[
c
]
)
)
)
)
            
affected_components
.
update
(
upstream_component_dependencies
[
c
]
)
        
if
downstream_component_dependencies
[
c
]
:
            
logger
.
info
(
"
Adding
direct
downstream
dependencies
for
'
%
s
'
:
%
s
"
%
(
c
"
"
.
join
(
sorted
(
downstream_component_dependencies
[
c
]
)
)
)
)
            
affected_components
.
update
(
downstream_component_dependencies
[
c
]
)
    
return
affected_components
def
loader
(
kind
path
config
params
loaded_tasks
)
:
    
files_changed
=
[
]
    
affected_components
=
ALL_COMPONENTS
    
upstream_component_dependencies
=
defaultdict
(
set
)
    
downstream_component_dependencies
=
defaultdict
(
set
)
    
for
component
deps
in
get_upstream_deps_for_components
(
[
c
[
"
name
"
]
for
c
in
get_components
(
)
]
)
:
        
upstream_component_dependencies
[
component
]
=
deps
        
for
d
in
deps
:
            
downstream_component_dependencies
[
d
]
.
add
(
component
)
    
if
params
[
"
tasks_for
"
]
=
=
"
github
-
pull
-
request
"
:
        
logger
.
info
(
"
Processing
pull
request
%
s
"
%
params
[
"
pull_request_number
"
]
)
        
files_changed
=
get_files_changed_pr
(
params
[
"
base_repository
"
]
params
[
"
pull_request_number
"
]
)
        
affected_components
=
get_affected_components
(
files_changed
config
.
get
(
"
files
-
affecting
-
components
"
)
upstream_component_dependencies
downstream_component_dependencies
)
    
elif
params
[
"
tasks_for
"
]
=
=
"
github
-
push
"
:
        
if
params
[
"
base_rev
"
]
in
_GIT_ZERO_HASHES
:
            
logger
.
warn
(
"
base_rev
is
a
zero
hash
meaning
there
is
no
previous
push
.
Building
every
component
.
.
.
"
)
        
else
:
            
logger
.
info
(
"
Processing
push
for
commit
range
%
s
-
>
%
s
"
%
(
params
[
"
base_rev
"
]
params
[
"
head_rev
"
]
)
)
            
files_changed
=
get_files_changed_push
(
params
[
"
base_repository
"
]
params
[
"
base_rev
"
]
params
[
"
head_rev
"
]
)
            
affected_components
=
get_affected_components
(
files_changed
config
.
get
(
"
files
-
affecting
-
components
"
)
upstream_component_dependencies
downstream_component_dependencies
)
    
logger
.
info
(
"
Files
changed
:
%
s
"
%
"
"
.
join
(
files_changed
)
)
    
if
affected_components
is
ALL_COMPONENTS
:
        
logger
.
info
(
"
Affected
components
:
ALL
"
)
    
else
:
        
logger
.
info
(
"
Affected
components
:
%
s
"
%
"
"
.
join
(
sorted
(
affected_components
)
)
)
    
not_for_components
=
config
.
get
(
"
not
-
for
-
components
"
[
]
)
    
jobs
=
{
        
'
{
}
{
}
'
.
format
(
            
'
'
if
build_type
=
=
'
regular
'
else
build_type
+
'
-
'
            
component
[
'
name
'
]
        
)
:
{
            
'
attributes
'
:
{
                
'
build
-
type
'
:
build_type
                
'
component
'
:
component
[
'
name
'
]
            
}
        
}
        
for
component
in
get_components
(
)
        
for
build_type
in
(
'
regular
'
'
nightly
'
'
release
'
)
        
if
(
            
(
affected_components
is
ALL_COMPONENTS
or
component
[
'
name
'
]
in
affected_components
)
            
and
component
[
'
name
'
]
not
in
not_for_components
            
and
(
component
[
'
shouldPublish
'
]
or
build_type
=
=
'
regular
'
)
        
)
    
}
    
overridden_jobs
=
{
k
:
v
for
k
v
in
config
.
pop
(
'
overriden
-
jobs
'
{
}
)
.
items
(
)
if
affected_components
is
ALL_COMPONENTS
or
k
in
jobs
.
keys
(
)
}
    
jobs
=
merge
(
jobs
overridden_jobs
)
    
config
[
'
jobs
'
]
=
jobs
    
return
base_loader
(
kind
path
config
params
loaded_tasks
)
