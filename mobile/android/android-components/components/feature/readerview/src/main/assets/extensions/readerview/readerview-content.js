const
supportedProtocols
=
[
"
http
:
"
"
https
:
"
]
;
const
blockedHosts
=
[
"
amazon
.
com
"
"
github
.
com
"
"
mail
.
google
.
com
"
"
pinterest
.
com
"
"
reddit
.
com
"
"
twitter
.
com
"
"
youtube
.
com
"
]
;
function
isReaderable
(
)
{
if
(
!
supportedProtocols
.
includes
(
location
.
protocol
)
)
{
return
false
;
}
if
(
blockedHosts
.
some
(
blockedHost
=
>
location
.
hostname
.
endsWith
(
blockedHost
)
)
)
{
return
false
;
}
if
(
location
.
pathname
=
=
"
/
"
)
{
return
false
;
}
return
isProbablyReaderable
(
document
_isNodeVisible
)
;
}
function
_isNodeVisible
(
node
)
{
return
node
.
clientHeight
>
0
&
&
node
.
clientWidth
>
0
;
}
function
connectNativePort
(
)
{
let
port
=
browser
.
runtime
.
connectNative
(
"
mozacReaderview
"
)
;
port
.
onMessage
.
addListener
(
message
=
>
{
switch
(
message
.
action
)
{
case
"
cachePage
"
:
{
let
serializedDoc
=
new
XMLSerializer
(
)
.
serializeToString
(
document
)
;
browser
.
runtime
.
sendMessage
(
{
action
:
"
addSerializedDoc
"
doc
:
serializedDoc
id
:
message
.
id
}
)
;
break
;
}
case
"
checkReaderState
"
:
port
.
postMessage
(
{
type
:
"
checkReaderState
"
baseUrl
:
browser
.
runtime
.
getURL
(
"
/
"
)
readerable
:
isReaderable
(
)
}
)
;
break
;
default
:
console
.
error
(
Received
unsupported
action
{
message
.
action
}
)
;
}
}
)
;
return
port
;
}
let
port
=
connectNativePort
(
)
;
window
.
addEventListener
(
"
pageshow
"
_event
=
>
{
port
=
port
!
=
null
?
port
:
connectNativePort
(
)
;
}
)
;
window
.
addEventListener
(
"
pagehide
"
_event
=
>
{
port
.
disconnect
(
)
;
port
=
null
;
}
)
;
