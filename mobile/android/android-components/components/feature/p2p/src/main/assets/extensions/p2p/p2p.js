let
port
=
browser
.
runtime
.
connectNative
(
"
mozacP2P
"
)
;
port
.
onMessage
.
addListener
(
(
message
)
=
>
{
switch
(
message
.
action
)
{
case
'
get_html
'
:
inlinePics
(
)
;
captureCss
(
)
;
break
;
default
:
console
.
log
(
"
I
do
not
know
how
to
handle
this
action
:
{
message
.
action
}
"
)
}
}
)
;
function
sendResponse
(
)
{
port
.
postMessage
(
window
.
document
.
documentElement
.
innerHTML
)
;
}
function
inlinePics
(
)
{
var
images
=
window
.
document
.
getElementsByTagName
(
'
img
'
)
;
for
(
var
canvas
context
image
i
=
0
;
i
<
images
.
length
;
i
+
+
)
{
image
=
images
[
i
]
;
if
(
image
.
src
.
toLowerCase
(
)
.
startsWith
(
"
data
"
)
)
{
continue
;
}
try
{
canvas
=
window
.
document
.
createElement
(
'
canvas
'
)
;
context
=
canvas
.
getContext
(
'
2d
'
)
;
canvas
.
width
=
image
.
offsetWidth
;
canvas
.
height
=
image
.
offsetHeight
;
context
.
drawImage
(
image
0
0
)
;
image
.
src
=
canvas
.
toDataURL
(
'
image
/
png
'
.
5
)
;
}
catch
(
error
)
{
console
.
error
(
"
Error
transforming
"
+
image
.
src
+
"
:
"
+
error
)
}
}
}
const
copyStyleSheet
=
(
sheet
)
=
>
{
const
{
disabled
href
title
type
}
=
sheet
return
{
disabled
href
title
type
}
}
function
insertStyle
(
styles
)
{
if
(
styles
)
{
var
css
=
document
.
createElement
(
'
style
'
)
;
css
.
type
=
"
text
/
css
"
;
if
(
css
.
styleSheet
)
{
css
.
styleSheet
.
cssText
=
styles
;
}
else
{
css
.
appendChild
(
document
.
createTextNode
(
styles
)
)
;
}
window
.
document
.
getElementsByTagName
(
'
head
'
)
[
0
]
.
appendChild
(
css
)
;
}
}
function
captureCss
(
)
{
var
cssrules
=
"
"
;
var
sheets
=
document
.
styleSheets
;
var
outstandingReqs
=
0
;
var
head
=
window
.
document
.
getElementsByTagName
(
'
head
'
)
[
0
]
;
if
(
!
head
)
{
sendResponse
(
)
;
}
for
(
var
i
=
0
;
i
<
sheets
.
length
;
i
+
+
)
{
if
(
!
sheets
[
i
]
.
disabled
&
&
sheets
[
i
]
.
href
!
=
null
)
{
sheets
[
i
]
.
crossorigin
=
"
anonymous
"
;
var
sheet
=
copyStyleSheet
(
sheets
[
i
]
)
;
if
(
sheet
.
rules
=
=
null
)
{
try
{
var
xhr
=
new
XMLHttpRequest
(
)
;
xhr
.
onreadystatechange
=
function
(
)
{
if
(
this
.
readyState
=
=
XMLHttpRequest
.
DONE
)
{
insertStyle
(
this
.
responseText
)
;
if
(
-
-
outstandingReqs
=
=
0
)
{
sendResponse
(
)
;
outstandingReqs
-
-
;
}
}
}
;
xhr
.
open
(
'
GET
'
sheet
.
href
)
;
outstandingReqs
+
+
;
xhr
.
send
(
)
;
}
catch
(
e
)
{
console
.
error
(
e
)
;
}
}
else
{
for
(
var
j
=
0
;
j
<
sheet
.
rules
.
length
;
j
+
+
)
{
insertStyle
(
sheets
[
i
]
.
rules
[
j
]
.
cssText
)
;
}
}
}
}
window
.
document
.
querySelectorAll
(
'
link
[
rel
=
"
stylesheet
"
]
'
)
.
forEach
(
e
=
>
e
.
parentNode
.
removeChild
(
e
)
)
;
if
(
outstandingReqs
=
=
0
)
{
sendResponse
(
)
;
}
}
port
.
onDisconnect
.
addListener
(
(
p
)
=
>
{
if
(
p
.
error
)
{
console
.
log
(
"
Wah
!
Disconnected
due
to
an
error
:
{
p
.
error
.
message
}
"
)
;
}
}
)
;
window
.
addEventListener
(
"
unload
"
(
event
)
=
>
{
port
.
disconnect
(
)
}
false
)
;
