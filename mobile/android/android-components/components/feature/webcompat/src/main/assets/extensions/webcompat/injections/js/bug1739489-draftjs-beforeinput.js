"
use
strict
"
;
console
.
info
(
"
textInput
event
has
been
remapped
to
beforeinput
for
compatibility
reasons
.
See
https
:
/
/
bugzilla
.
mozilla
.
org
/
show_bug
.
cgi
?
id
=
1739489
for
details
.
"
)
;
window
.
wrappedJSObject
.
TextEvent
=
window
.
wrappedJSObject
.
InputEvent
;
const
{
CustomEvent
Event
EventTarget
}
=
window
.
wrappedJSObject
;
var
Remapped
=
[
[
CustomEvent
"
constructor
"
]
[
Event
"
constructor
"
]
[
Event
"
initEvent
"
]
[
EventTarget
"
addEventListener
"
]
[
EventTarget
"
removeEventListener
"
]
]
;
for
(
const
[
obj
name
]
of
Remapped
)
{
const
{
prototype
}
=
obj
;
const
orig
=
prototype
[
name
]
;
Object
.
defineProperty
(
prototype
name
{
value
:
exportFunction
(
function
(
type
b
c
d
)
{
if
(
type
?
.
toLowerCase
(
)
=
=
=
"
textinput
"
)
{
type
=
"
beforeinput
"
;
}
return
orig
.
call
(
this
type
b
c
d
)
;
}
window
)
}
)
;
}
if
(
location
.
host
=
=
=
"
www
.
reddit
.
com
"
)
{
(
function
(
)
{
const
EditorCSS
=
"
.
public
-
DraftEditor
-
content
[
contenteditable
=
true
]
"
;
let
obsEditor
obsStart
obsText
obsKey
observer
;
const
obsConfig
=
{
characterData
:
true
childList
:
true
subtree
:
true
}
;
const
obsHandler
=
(
)
=
>
{
observer
.
disconnect
(
)
;
const
finalTextNode
=
obsEditor
.
querySelector
(
[
data
-
offset
-
key
=
"
{
obsKey
}
"
]
[
data
-
text
=
'
true
'
]
)
.
firstChild
;
const
end
=
obsStart
+
obsText
.
length
;
window
.
getSelection
(
)
.
setBaseAndExtent
(
finalTextNode
end
finalTextNode
end
)
;
}
;
observer
=
new
MutationObserver
(
obsHandler
)
;
document
.
documentElement
.
addEventListener
(
"
beforeinput
"
e
=
>
{
if
(
e
.
inputType
!
=
"
insertFromPaste
"
)
{
return
;
}
const
{
target
}
=
e
;
obsEditor
=
target
.
closest
(
EditorCSS
)
;
if
(
!
obsEditor
)
{
return
;
}
const
items
=
e
?
.
dataTransfer
.
items
;
for
(
let
item
of
items
)
{
if
(
item
.
type
=
=
=
"
text
/
plain
"
)
{
e
.
preventDefault
(
)
;
item
.
getAsString
(
text
=
>
{
obsText
=
text
;
const
sel
=
window
.
getSelection
(
)
;
obsStart
=
sel
.
anchorOffset
;
let
anchor
=
sel
.
anchorNode
;
if
(
!
anchor
.
closest
)
{
anchor
=
anchor
.
parentElement
;
}
anchor
=
anchor
.
closest
(
"
[
data
-
offset
-
key
]
"
)
;
obsKey
=
anchor
.
getAttribute
(
"
data
-
offset
-
key
"
)
;
observer
.
observe
(
obsEditor
obsConfig
)
;
target
.
dispatchEvent
(
new
InputEvent
(
"
beforeinput
"
{
inputType
:
"
insertText
"
data
:
text
bubbles
:
true
cancelable
:
true
}
)
)
;
obsEditor
.
blur
(
)
;
}
)
;
break
;
}
}
}
true
)
;
}
)
(
)
;
}
