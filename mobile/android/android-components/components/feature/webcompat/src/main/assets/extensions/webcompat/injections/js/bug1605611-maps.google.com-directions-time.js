"
use
strict
"
;
document
.
addEventListener
(
"
DOMContentLoaded
"
(
)
=
>
{
for
(
const
elem
of
document
.
querySelectorAll
(
"
.
ml
-
directions
-
time
[
disabled
]
"
)
)
{
elem
.
disabled
=
false
;
}
const
moOptions
=
{
attributeFilter
:
[
"
disabled
"
]
attributes
:
true
subtree
:
true
}
;
const
mo
=
new
MutationObserver
(
function
(
records
)
{
let
restore
=
false
;
for
(
const
{
target
}
of
records
)
{
if
(
target
.
classList
.
contains
(
"
ml
-
directions
-
time
"
)
)
{
if
(
!
restore
)
{
restore
=
true
;
mo
.
disconnect
(
)
;
}
target
.
disabled
=
false
;
}
}
if
(
restore
)
{
mo
.
observe
(
document
.
body
moOptions
)
;
}
}
)
;
mo
.
observe
(
document
.
body
moOptions
)
;
}
)
;
const
originalValueAsNumberGetter
=
Object
.
getOwnPropertyDescriptor
(
HTMLInputElement
.
prototype
.
wrappedJSObject
"
valueAsNumber
"
)
.
get
;
Object
.
defineProperty
(
HTMLInputElement
.
prototype
.
wrappedJSObject
"
valueAsNumber
"
{
configurable
:
true
enumerable
:
true
get
:
originalValueAsNumberGetter
set
:
exportFunction
(
function
(
v
)
{
if
(
this
.
type
=
=
=
"
datetime
-
local
"
&
&
v
)
{
const
d
=
new
Date
(
v
)
;
d
.
setSeconds
(
0
)
;
d
.
setMilliseconds
(
0
)
;
v
=
d
.
getTime
(
)
;
}
this
.
valueAsNumber
=
v
;
}
window
)
}
)
;
document
.
addEventListener
(
"
focusin
"
(
{
target
}
)
=
>
{
if
(
target
.
id
=
=
=
"
ml
-
route
-
options
-
time
-
selector
-
time
-
input
"
)
{
target
.
blur
(
)
;
}
}
)
;
