"
use
strict
"
;
class
UAOverrides
{
constructor
(
availableOverrides
)
{
this
.
OVERRIDE_PREF
=
"
perform_ua_overrides
"
;
this
.
_overridesEnabled
=
true
;
this
.
_availableOverrides
=
availableOverrides
;
this
.
_activeListeners
=
new
Map
(
)
;
}
bindAboutCompatBroker
(
broker
)
{
this
.
_aboutCompatBroker
=
broker
;
}
bootup
(
)
{
browser
.
aboutConfigPrefs
.
onPrefChange
.
addListener
(
(
)
=
>
{
this
.
checkOverridePref
(
)
;
}
this
.
OVERRIDE_PREF
)
;
this
.
checkOverridePref
(
)
;
}
checkOverridePref
(
)
{
browser
.
aboutConfigPrefs
.
getPref
(
this
.
OVERRIDE_PREF
)
.
then
(
value
=
>
{
if
(
value
=
=
=
undefined
)
{
browser
.
aboutConfigPrefs
.
setPref
(
this
.
OVERRIDE_PREF
true
)
;
}
else
if
(
value
=
=
=
false
)
{
this
.
unregisterUAOverrides
(
)
;
}
else
{
this
.
registerUAOverrides
(
)
;
}
}
)
;
}
getAvailableOverrides
(
)
{
return
this
.
_availableOverrides
;
}
isEnabled
(
)
{
return
this
.
_overridesEnabled
;
}
enableOverride
(
override
)
{
if
(
override
.
active
)
{
return
;
}
const
{
blocks
matches
uaTransformer
}
=
override
.
config
;
const
listener
=
details
=
>
{
if
(
!
override
.
config
.
experiment
|
|
override
.
permanentPrefEnabled
=
=
=
true
)
{
for
(
const
header
of
details
.
requestHeaders
)
{
if
(
header
.
name
.
toLowerCase
(
)
=
=
=
"
user
-
agent
"
)
{
let
isMobileWithDesktopMode
=
override
.
currentPlatform
=
=
"
android
"
&
&
header
.
value
.
includes
(
"
X11
;
Linux
x86_64
"
)
;
if
(
!
isMobileWithDesktopMode
)
{
header
.
value
=
uaTransformer
(
header
.
value
)
;
}
}
}
}
return
{
requestHeaders
:
details
.
requestHeaders
}
;
}
;
browser
.
webRequest
.
onBeforeSendHeaders
.
addListener
(
listener
{
urls
:
matches
}
[
"
blocking
"
"
requestHeaders
"
]
)
;
const
listeners
=
{
onBeforeSendHeaders
:
listener
}
;
if
(
blocks
)
{
const
blistener
=
(
)
=
>
{
return
{
cancel
:
true
}
;
}
;
browser
.
webRequest
.
onBeforeRequest
.
addListener
(
blistener
{
urls
:
blocks
}
[
"
blocking
"
]
)
;
listeners
.
onBeforeRequest
=
blistener
;
}
this
.
_activeListeners
.
set
(
override
listeners
)
;
override
.
active
=
true
;
}
onOverrideConfigChanged
(
override
)
{
override
.
hidden
=
override
.
config
.
hidden
;
if
(
override
.
permanentPrefEnabled
!
=
=
undefined
)
{
override
.
hidden
=
!
override
.
permanentPrefEnabled
;
}
let
shouldBeActive
=
true
;
if
(
override
.
permanentPrefEnabled
=
=
=
false
)
{
shouldBeActive
=
false
;
}
if
(
override
.
config
.
experiment
&
&
override
.
permanentPrefEnabled
!
=
=
true
)
{
shouldBeActive
=
false
;
}
if
(
shouldBeActive
)
{
this
.
enableOverride
(
override
)
;
}
else
{
this
.
disableOverride
(
override
)
;
}
if
(
this
.
_overridesEnabled
)
{
this
.
_aboutCompatBroker
.
portsToAboutCompatTabs
.
broadcast
(
{
overridesChanged
:
this
.
_aboutCompatBroker
.
filterOverrides
(
this
.
_availableOverrides
)
}
)
;
}
}
async
registerUAOverrides
(
)
{
const
platformMatches
=
[
"
all
"
]
;
let
platformInfo
=
await
browser
.
runtime
.
getPlatformInfo
(
)
;
platformMatches
.
push
(
platformInfo
.
os
=
=
"
android
"
?
"
android
"
:
"
desktop
"
)
;
for
(
const
override
of
this
.
_availableOverrides
)
{
if
(
platformMatches
.
includes
(
override
.
platform
)
)
{
override
.
availableOnPlatform
=
true
;
override
.
currentPlatform
=
platformInfo
.
os
;
const
pref
=
override
.
config
.
permanentPref
;
override
.
permanentPrefEnabled
=
pref
&
&
(
await
browser
.
aboutConfigPrefs
.
getPref
(
pref
)
)
;
if
(
pref
)
{
const
checkOverridePref
=
(
)
=
>
{
browser
.
aboutConfigPrefs
.
getPref
(
pref
)
.
then
(
value
=
>
{
override
.
permanentPrefEnabled
=
value
;
this
.
onOverrideConfigChanged
(
override
)
;
}
)
;
}
;
browser
.
aboutConfigPrefs
.
onPrefChange
.
addListener
(
checkOverridePref
pref
)
;
}
this
.
onOverrideConfigChanged
(
override
)
;
}
}
this
.
_overridesEnabled
=
true
;
this
.
_aboutCompatBroker
.
portsToAboutCompatTabs
.
broadcast
(
{
overridesChanged
:
this
.
_aboutCompatBroker
.
filterOverrides
(
this
.
_availableOverrides
)
}
)
;
}
unregisterUAOverrides
(
)
{
for
(
const
override
of
this
.
_availableOverrides
)
{
this
.
disableOverride
(
override
)
;
}
this
.
_overridesEnabled
=
false
;
this
.
_aboutCompatBroker
.
portsToAboutCompatTabs
.
broadcast
(
{
overridesChanged
:
false
}
)
;
}
disableOverride
(
override
)
{
if
(
!
override
.
active
)
{
return
;
}
const
listeners
=
this
.
_activeListeners
.
get
(
override
)
;
for
(
const
[
name
listener
]
of
Object
.
entries
(
listeners
)
)
{
browser
.
webRequest
[
name
]
.
removeListener
(
listener
)
;
}
override
.
active
=
false
;
this
.
_activeListeners
.
delete
(
override
)
;
}
}
module
.
exports
=
UAOverrides
;
