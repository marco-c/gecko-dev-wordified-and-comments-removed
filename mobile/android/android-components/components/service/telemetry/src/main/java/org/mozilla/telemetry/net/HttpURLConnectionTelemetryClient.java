package
org
.
mozilla
.
telemetry
.
net
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
telemetry
.
config
.
TelemetryConfiguration
;
import
org
.
mozilla
.
telemetry
.
util
.
IOUtils
;
import
java
.
io
.
BufferedWriter
;
import
java
.
io
.
IOException
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
OutputStreamWriter
;
import
java
.
net
.
HttpURLConnection
;
import
java
.
net
.
MalformedURLException
;
import
java
.
net
.
URL
;
import
java
.
text
.
SimpleDateFormat
;
import
java
.
util
.
Calendar
;
import
java
.
util
.
Locale
;
import
java
.
util
.
TimeZone
;
import
mozilla
.
components
.
support
.
base
.
log
.
logger
.
Logger
;
public
class
HttpURLConnectionTelemetryClient
implements
TelemetryClient
{
private
Logger
logger
=
new
Logger
(
"
telemetry
/
client
"
)
;
Override
public
boolean
uploadPing
(
TelemetryConfiguration
configuration
String
path
String
serializedPing
)
{
HttpURLConnection
connection
=
null
;
try
{
connection
=
openConnectionConnection
(
configuration
.
getServerEndpoint
(
)
path
)
;
connection
.
setConnectTimeout
(
configuration
.
getConnectTimeout
(
)
)
;
connection
.
setReadTimeout
(
configuration
.
getReadTimeout
(
)
)
;
connection
.
setRequestProperty
(
"
Content
-
Type
"
"
application
/
json
;
charset
=
utf
-
8
"
)
;
connection
.
setRequestProperty
(
"
User
-
Agent
"
configuration
.
getUserAgent
(
)
)
;
connection
.
setRequestProperty
(
"
Date
"
createDateHeaderValue
(
)
)
;
connection
.
setRequestMethod
(
"
POST
"
)
;
connection
.
setDoOutput
(
true
)
;
int
responseCode
=
upload
(
connection
serializedPing
)
;
logger
.
debug
(
"
Ping
upload
:
"
+
responseCode
null
)
;
if
(
responseCode
>
=
200
&
&
responseCode
<
=
299
)
{
return
true
;
}
else
if
(
responseCode
>
=
400
&
&
responseCode
<
=
499
)
{
logger
.
error
(
"
Server
returned
client
error
code
:
"
+
responseCode
null
)
;
return
true
;
}
else
{
logger
.
warn
(
"
Server
returned
response
code
:
"
+
responseCode
null
)
;
return
false
;
}
}
catch
(
MalformedURLException
e
)
{
logger
.
error
(
"
Could
not
upload
telemetry
due
to
malformed
URL
"
e
)
;
return
true
;
}
catch
(
IOException
e
)
{
logger
.
warn
(
"
IOException
while
uploading
ping
"
e
)
;
return
false
;
}
finally
{
if
(
connection
!
=
null
)
{
connection
.
disconnect
(
)
;
}
}
}
VisibleForTesting
int
upload
(
HttpURLConnection
connection
String
serializedPing
)
throws
IOException
{
OutputStream
stream
=
null
;
try
{
final
BufferedWriter
writer
=
new
BufferedWriter
(
new
OutputStreamWriter
(
stream
=
connection
.
getOutputStream
(
)
)
)
;
writer
.
write
(
serializedPing
)
;
writer
.
flush
(
)
;
writer
.
close
(
)
;
return
connection
.
getResponseCode
(
)
;
}
catch
(
ArrayIndexOutOfBoundsException
e
)
{
throw
new
IOException
(
e
)
;
}
finally
{
IOUtils
.
safeClose
(
stream
)
;
}
}
VisibleForTesting
HttpURLConnection
openConnectionConnection
(
String
endpoint
String
path
)
throws
IOException
{
final
URL
url
=
new
URL
(
endpoint
+
path
)
;
return
(
HttpURLConnection
)
url
.
openConnection
(
)
;
}
VisibleForTesting
String
createDateHeaderValue
(
)
{
final
Calendar
calendar
=
Calendar
.
getInstance
(
)
;
final
SimpleDateFormat
dateFormat
=
new
SimpleDateFormat
(
"
EEE
dd
MMM
yyyy
HH
:
mm
:
ss
z
"
Locale
.
US
)
;
dateFormat
.
setTimeZone
(
TimeZone
.
getTimeZone
(
"
GMT
"
)
)
;
return
dateFormat
.
format
(
calendar
.
getTime
(
)
)
;
}
}
