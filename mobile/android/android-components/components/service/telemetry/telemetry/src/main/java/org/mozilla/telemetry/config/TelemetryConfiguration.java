package
org
.
mozilla
.
telemetry
.
config
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
org
.
mozilla
.
telemetry
.
measurement
.
SettingsMeasurement
;
import
org
.
mozilla
.
telemetry
.
util
.
ContextUtils
;
import
java
.
io
.
File
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Set
;
public
class
TelemetryConfiguration
{
private
static
final
String
DEFAULT_DATA_DIRECTORY
=
"
telemetry
"
;
private
static
final
String
DEFAULT_SHARED_PREFERENCE
=
"
telemetry_preferences
"
;
private
static
final
String
DEFAULT_ENDPOINT
=
"
https
:
/
/
incoming
.
telemetry
.
mozilla
.
org
"
;
private
static
final
String
DEFAULT_USER_AGENT
=
"
Telemetry
/
1
.
0
(
Android
)
"
;
private
static
final
long
DEFAULT_INITAL_BACKOFF_FOR_UPLOAD
=
30000
;
private
static
final
int
DEFAULT_CONNECT_TIMEOUT
=
10000
;
private
static
final
int
DEFAULT_READ_TIMEOUT
=
30000
;
private
static
final
int
DEFAULT_MINIMUM_EVENTS_FOR_UPLOAD
=
3
;
private
static
final
String
DEFAULT_UPDATE_CHANNEL
=
"
unknown
"
;
private
static
final
int
DEFAULT_MAXIMUM_NUMBER_OF_PINGS_PER_EVENT
=
500
;
private
static
final
int
DEFAULT_MAXIMUM_PINGS_PER_TYPE
=
40
;
private
static
final
int
DEFAULT_MAXIMUM_PING_UPLOADS_PER_DAY
=
100
;
private
static
final
long
classLoadTimestampMillis
=
System
.
currentTimeMillis
(
)
;
private
final
Context
context
;
private
String
appName
;
private
String
appVersion
;
private
String
buildId
;
private
String
updateChannel
;
private
boolean
collectionEnabled
;
private
boolean
uploadEnabled
;
private
String
serverEndpoint
;
private
File
dataDirectory
;
private
Set
<
String
>
telemetryPreferences
;
private
long
initialBackoffForUpload
;
private
int
connectTimeout
;
private
int
readTimeout
;
private
String
userAgent
;
private
int
minimumEventsForUpload
;
private
int
maximumNumberOfEventsPerPing
;
private
int
maximumNumberOfPingsPerType
;
private
int
maximumNumberOfPingUploadsPerDay
;
private
SettingsMeasurement
.
SettingsProvider
settingsProvider
;
public
TelemetryConfiguration
(
Context
context
)
{
this
.
context
=
context
.
getApplicationContext
(
)
;
this
.
telemetryPreferences
=
Collections
.
emptySet
(
)
;
setAppName
(
ContextUtils
.
getAppName
(
context
)
)
;
setAppVersion
(
ContextUtils
.
getVersionName
(
context
)
)
;
setBuildId
(
String
.
valueOf
(
ContextUtils
.
getVersionCode
(
context
)
)
)
;
setUpdateChannel
(
DEFAULT_UPDATE_CHANNEL
)
;
setDataDirectory
(
new
File
(
context
.
getApplicationInfo
(
)
.
dataDir
DEFAULT_DATA_DIRECTORY
)
)
;
setServerEndpoint
(
DEFAULT_ENDPOINT
)
;
setInitialBackoffForUpload
(
DEFAULT_INITAL_BACKOFF_FOR_UPLOAD
)
;
setConnectTimeout
(
DEFAULT_CONNECT_TIMEOUT
)
;
setReadTimeout
(
DEFAULT_READ_TIMEOUT
)
;
setUserAgent
(
DEFAULT_USER_AGENT
)
;
setMinimumEventsForUpload
(
DEFAULT_MINIMUM_EVENTS_FOR_UPLOAD
)
;
setCollectionEnabled
(
true
)
;
setUploadEnabled
(
true
)
;
setMaximumNumberOfEventsPerPing
(
DEFAULT_MAXIMUM_NUMBER_OF_PINGS_PER_EVENT
)
;
setMaximumNumberOfPingsPerType
(
DEFAULT_MAXIMUM_PINGS_PER_TYPE
)
;
setMaximumNumberOfPingUploadsPerDay
(
DEFAULT_MAXIMUM_PING_UPLOADS_PER_DAY
)
;
setSettingsProvider
(
new
SettingsMeasurement
.
SharedPreferenceSettingsProvider
(
)
)
;
}
public
Context
getContext
(
)
{
return
context
;
}
public
TelemetryConfiguration
setDataDirectory
(
File
dataDirectory
)
{
if
(
!
dataDirectory
.
exists
(
)
&
&
!
dataDirectory
.
mkdirs
(
)
)
{
throw
new
IllegalStateException
(
"
Telemetry
data
directory
does
not
exist
and
can
'
t
be
created
:
"
+
dataDirectory
.
getAbsolutePath
(
)
)
;
}
if
(
!
dataDirectory
.
isDirectory
(
)
|
|
!
dataDirectory
.
canWrite
(
)
)
{
throw
new
IllegalStateException
(
"
Telemetry
data
directory
is
not
writeable
directory
"
+
dataDirectory
.
getAbsolutePath
(
)
)
;
}
this
.
dataDirectory
=
dataDirectory
;
return
this
;
}
public
File
getDataDirectory
(
)
{
return
dataDirectory
;
}
public
TelemetryConfiguration
setServerEndpoint
(
String
endpoint
)
{
this
.
serverEndpoint
=
endpoint
;
return
this
;
}
public
String
getServerEndpoint
(
)
{
return
serverEndpoint
;
}
public
SharedPreferences
getSharedPreferences
(
)
{
return
context
.
getSharedPreferences
(
DEFAULT_SHARED_PREFERENCE
Context
.
MODE_PRIVATE
)
;
}
public
TelemetryConfiguration
setPreferencesImportantForTelemetry
(
String
.
.
.
preferences
)
{
Set
<
String
>
set
=
new
HashSet
<
>
(
)
;
Collections
.
addAll
(
set
preferences
)
;
this
.
telemetryPreferences
=
set
;
return
this
;
}
public
Set
<
String
>
getPreferencesImportantForTelemetry
(
)
{
return
telemetryPreferences
;
}
public
long
getInitialBackoffForUpload
(
)
{
return
initialBackoffForUpload
;
}
public
TelemetryConfiguration
setInitialBackoffForUpload
(
long
initialBackoffForUpload
)
{
this
.
initialBackoffForUpload
=
initialBackoffForUpload
;
return
this
;
}
public
int
getConnectTimeout
(
)
{
return
connectTimeout
;
}
public
int
getReadTimeout
(
)
{
return
readTimeout
;
}
public
TelemetryConfiguration
setConnectTimeout
(
int
connectTimeout
)
{
this
.
connectTimeout
=
connectTimeout
;
return
this
;
}
public
TelemetryConfiguration
setReadTimeout
(
int
readTimeout
)
{
this
.
readTimeout
=
readTimeout
;
return
this
;
}
public
String
getUserAgent
(
)
{
return
userAgent
;
}
public
TelemetryConfiguration
setUserAgent
(
String
userAgent
)
{
this
.
userAgent
=
userAgent
;
return
this
;
}
public
int
getMinimumEventsForUpload
(
)
{
return
minimumEventsForUpload
;
}
public
TelemetryConfiguration
setMinimumEventsForUpload
(
int
minimumEventsForUpload
)
{
if
(
minimumEventsForUpload
<
=
0
)
{
throw
new
IllegalArgumentException
(
"
minimumEventsForUpload
needs
to
be
>
=
1
"
)
;
}
this
.
minimumEventsForUpload
=
minimumEventsForUpload
;
return
this
;
}
public
boolean
isCollectionEnabled
(
)
{
return
collectionEnabled
;
}
public
TelemetryConfiguration
setCollectionEnabled
(
boolean
collectionEnabled
)
{
this
.
collectionEnabled
=
collectionEnabled
;
return
this
;
}
public
TelemetryConfiguration
setUploadEnabled
(
boolean
uploadEnabled
)
{
this
.
uploadEnabled
=
uploadEnabled
;
return
this
;
}
public
boolean
isUploadEnabled
(
)
{
return
uploadEnabled
;
}
public
String
getAppName
(
)
{
return
appName
;
}
public
TelemetryConfiguration
setAppName
(
String
appName
)
{
this
.
appName
=
appName
;
return
this
;
}
public
TelemetryConfiguration
setUpdateChannel
(
String
updateChannel
)
{
this
.
updateChannel
=
updateChannel
;
return
this
;
}
public
String
getUpdateChannel
(
)
{
return
updateChannel
;
}
public
String
getAppVersion
(
)
{
return
appVersion
;
}
public
TelemetryConfiguration
setAppVersion
(
String
appVersion
)
{
this
.
appVersion
=
appVersion
;
return
this
;
}
public
String
getBuildId
(
)
{
return
buildId
;
}
public
TelemetryConfiguration
setBuildId
(
String
buildId
)
{
this
.
buildId
=
buildId
;
return
this
;
}
public
TelemetryConfiguration
setMaximumNumberOfEventsPerPing
(
int
maximumNumberOfEventsPerPing
)
{
this
.
maximumNumberOfEventsPerPing
=
maximumNumberOfEventsPerPing
;
return
this
;
}
public
int
getMaximumNumberOfEventsPerPing
(
)
{
return
maximumNumberOfEventsPerPing
;
}
public
TelemetryConfiguration
setMaximumNumberOfPingsPerType
(
int
maximumNumberOfPingsPerType
)
{
this
.
maximumNumberOfPingsPerType
=
maximumNumberOfPingsPerType
;
return
this
;
}
public
int
getMaximumNumberOfPingsPerType
(
)
{
return
maximumNumberOfPingsPerType
;
}
public
int
getMaximumNumberOfPingUploadsPerDay
(
)
{
return
maximumNumberOfPingUploadsPerDay
;
}
public
TelemetryConfiguration
setMaximumNumberOfPingUploadsPerDay
(
int
maximumNumberOfPingUploadsPerDay
)
{
this
.
maximumNumberOfPingUploadsPerDay
=
maximumNumberOfPingUploadsPerDay
;
return
this
;
}
public
SettingsMeasurement
.
SettingsProvider
getSettingsProvider
(
)
{
return
settingsProvider
;
}
public
TelemetryConfiguration
setSettingsProvider
(
SettingsMeasurement
.
SettingsProvider
settingsProvider
)
{
this
.
settingsProvider
=
settingsProvider
;
return
this
;
}
public
long
getClassLoadTimestampMillis
(
)
{
return
classLoadTimestampMillis
;
}
}
