function
parseQuery
(
queryString
)
{
if
(
queryString
[
0
]
=
=
=
'
?
'
)
{
queryString
=
queryString
.
substr
(
1
)
;
}
const
query
=
Object
.
fromEntries
(
new
URLSearchParams
(
queryString
)
.
entries
(
)
)
;
injectValues
(
query
)
updateShowSSL
(
query
)
}
;
function
injectValues
(
queryMap
)
{
document
.
title
=
queryMap
.
title
document
.
getElementById
(
'
errorTitleText
'
)
.
innerHTML
=
queryMap
.
title
document
.
getElementById
(
'
errorShortDesc
'
)
.
innerHTML
=
queryMap
.
description
document
.
getElementById
(
'
errorTryAgain
'
)
.
innerHTML
=
queryMap
.
button
document
.
getElementById
(
'
advancedButton
'
)
.
innerHTML
=
queryMap
.
badCertAdvanced
document
.
getElementById
(
'
badCertTechnicalInfo
'
)
.
innerHTML
=
queryMap
.
badCertTechInfo
document
.
getElementById
(
'
advancedPanelBackButton
'
)
.
innerHTML
=
queryMap
.
badCertGoBack
document
.
getElementById
(
'
advancedPanelAcceptButton
'
)
.
innerHTML
=
queryMap
.
badCertAcceptTemporary
const
errorImage
=
document
.
getElementById
(
'
errorImage
'
)
if
(
!
queryMap
.
image
)
{
errorImage
.
remove
(
)
}
else
{
errorImage
.
src
=
"
resource
:
/
/
android
/
assets
/
"
+
queryMap
.
image
}
}
var
advancedVisible
=
false
;
function
updateShowSSL
(
queryMap
)
{
const
showSSL
=
queryMap
.
showSSL
if
(
typeof
document
.
addCertException
=
=
=
"
undefined
"
)
{
document
.
getElementById
(
'
advancedButton
'
)
.
style
.
display
=
'
none
'
;
}
else
{
if
(
showSSL
)
{
document
.
getElementById
(
'
advancedButton
'
)
.
style
.
display
=
'
block
'
;
}
else
{
document
.
getElementById
(
'
advancedButton
'
)
.
style
.
display
=
'
none
'
;
}
}
}
function
toggleAdvanced
(
)
{
if
(
advancedVisible
)
{
document
.
getElementById
(
'
badCertAdvancedPanel
'
)
.
style
.
display
=
'
none
'
;
}
else
{
document
.
getElementById
(
'
badCertAdvancedPanel
'
)
.
style
.
display
=
'
block
'
;
}
advancedVisible
=
!
advancedVisible
;
}
async
function
acceptAndContinue
(
temporary
)
{
try
{
await
document
.
addCertException
(
temporary
)
;
location
.
reload
(
)
;
}
catch
(
error
)
{
console
.
error
(
"
Unexpected
error
:
"
+
error
)
}
}
parseQuery
(
document
.
documentURI
)
;
