package
org
.
mozilla
.
apilint
;
import
org
.
gradle
.
api
.
tasks
.
Exec
;
import
org
.
gradle
.
api
.
tasks
.
Input
;
import
org
.
gradle
.
api
.
tasks
.
TaskAction
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
nio
.
file
.
Files
;
import
java
.
nio
.
file
.
Paths
;
import
java
.
nio
.
file
.
StandardCopyOption
;
import
java
.
util
.
List
;
abstract
public
class
PythonExec
extends
Exec
{
String
mScriptPath
;
String
mPythonCommand
=
"
python3
"
;
TaskAction
public
void
exec
(
)
{
List
<
String
>
args
=
getArgs
(
)
;
File
tempFile
=
copyResourceToTemp
(
mScriptPath
)
;
try
{
commandLine
(
mPythonCommand
tempFile
)
;
args
(
args
)
;
super
.
exec
(
)
;
}
finally
{
tempFile
.
delete
(
)
;
}
}
public
void
setPythonCommand
(
String
pythonCommand
)
{
mPythonCommand
=
pythonCommand
;
}
Input
public
String
getPythonCommand
(
)
{
return
mPythonCommand
;
}
public
void
setScriptPath
(
String
scriptPath
)
{
mScriptPath
=
scriptPath
;
}
Input
public
String
getScriptPath
(
)
{
return
mScriptPath
;
}
private
File
copyResourceToTemp
(
String
resource
)
{
return
copyResourceToTemp
(
resource
"
script
-
"
"
.
py
"
)
;
}
private
File
copyResourceToTemp
(
String
resource
String
prefix
String
suffix
)
{
File
tempFile
=
null
;
try
{
InputStream
script
=
getClass
(
)
.
getClassLoader
(
)
.
getResourceAsStream
(
resource
)
;
tempFile
=
File
.
createTempFile
(
prefix
suffix
)
;
Files
.
copy
(
script
Paths
.
get
(
tempFile
.
getAbsolutePath
(
)
)
StandardCopyOption
.
REPLACE_EXISTING
)
;
return
tempFile
;
}
catch
(
IOException
ex
)
{
if
(
tempFile
!
=
null
)
{
tempFile
.
delete
(
)
;
}
throw
new
RuntimeException
(
ex
)
;
}
}
}
