package
com
.
google
.
android
.
mms
.
pdu
;
import
com
.
google
.
android
.
mms
.
ContentType
;
import
com
.
google
.
android
.
mms
.
InvalidHeaderValueException
;
import
com
.
google
.
android
.
mms
.
MmsException
;
import
com
.
google
.
android
.
mms
.
util
.
PduCache
;
import
com
.
google
.
android
.
mms
.
util
.
PduCacheEntry
;
import
com
.
google
.
android
.
mms
.
util
.
SqliteWrapper
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
ContentUris
;
import
android
.
content
.
ContentValues
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
android
.
database
.
DatabaseUtils
;
import
android
.
database
.
sqlite
.
SQLiteException
;
import
android
.
net
.
Uri
;
import
android
.
provider
.
MediaStore
;
import
android
.
provider
.
Telephony
;
import
android
.
provider
.
Telephony
.
Mms
;
import
android
.
provider
.
Telephony
.
MmsSms
;
import
android
.
provider
.
Telephony
.
Threads
;
import
android
.
provider
.
Telephony
.
Mms
.
Addr
;
import
android
.
provider
.
Telephony
.
Mms
.
Part
;
import
android
.
provider
.
Telephony
.
MmsSms
.
PendingMessages
;
import
android
.
telephony
.
PhoneNumberUtils
;
import
android
.
telephony
.
TelephonyManager
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
Log
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
File
;
import
java
.
io
.
FileNotFoundException
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
UnsupportedEncodingException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
import
java
.
util
.
Map
.
Entry
;
import
com
.
google
.
android
.
mms
.
pdu
.
EncodedStringValue
;
public
class
PduPersister
{
private
static
final
String
TAG
=
"
PduPersister
"
;
private
static
final
boolean
DEBUG
=
false
;
private
static
final
boolean
LOCAL_LOGV
=
false
;
private
static
final
long
DUMMY_THREAD_ID
=
Long
.
MAX_VALUE
;
public
static
final
int
PROC_STATUS_TRANSIENT_FAILURE
=
1
;
public
static
final
int
PROC_STATUS_PERMANENTLY_FAILURE
=
2
;
public
static
final
int
PROC_STATUS_COMPLETED
=
3
;
private
static
PduPersister
sPersister
;
private
static
final
PduCache
PDU_CACHE_INSTANCE
;
private
static
final
int
[
]
ADDRESS_FIELDS
=
new
int
[
]
{
PduHeaders
.
BCC
PduHeaders
.
CC
PduHeaders
.
FROM
PduHeaders
.
TO
}
;
private
static
final
String
[
]
PDU_PROJECTION
=
new
String
[
]
{
Mms
.
_ID
Mms
.
MESSAGE_BOX
Mms
.
THREAD_ID
Mms
.
RETRIEVE_TEXT
Mms
.
SUBJECT
Mms
.
CONTENT_LOCATION
Mms
.
CONTENT_TYPE
Mms
.
MESSAGE_CLASS
Mms
.
MESSAGE_ID
Mms
.
RESPONSE_TEXT
Mms
.
TRANSACTION_ID
Mms
.
CONTENT_CLASS
Mms
.
DELIVERY_REPORT
Mms
.
MESSAGE_TYPE
Mms
.
MMS_VERSION
Mms
.
PRIORITY
Mms
.
READ_REPORT
Mms
.
READ_STATUS
Mms
.
REPORT_ALLOWED
Mms
.
RETRIEVE_STATUS
Mms
.
STATUS
Mms
.
DATE
Mms
.
DELIVERY_TIME
Mms
.
EXPIRY
Mms
.
MESSAGE_SIZE
Mms
.
SUBJECT_CHARSET
Mms
.
RETRIEVE_TEXT_CHARSET
}
;
private
static
final
int
PDU_COLUMN_ID
=
0
;
private
static
final
int
PDU_COLUMN_MESSAGE_BOX
=
1
;
private
static
final
int
PDU_COLUMN_THREAD_ID
=
2
;
private
static
final
int
PDU_COLUMN_RETRIEVE_TEXT
=
3
;
private
static
final
int
PDU_COLUMN_SUBJECT
=
4
;
private
static
final
int
PDU_COLUMN_CONTENT_LOCATION
=
5
;
private
static
final
int
PDU_COLUMN_CONTENT_TYPE
=
6
;
private
static
final
int
PDU_COLUMN_MESSAGE_CLASS
=
7
;
private
static
final
int
PDU_COLUMN_MESSAGE_ID
=
8
;
private
static
final
int
PDU_COLUMN_RESPONSE_TEXT
=
9
;
private
static
final
int
PDU_COLUMN_TRANSACTION_ID
=
10
;
private
static
final
int
PDU_COLUMN_CONTENT_CLASS
=
11
;
private
static
final
int
PDU_COLUMN_DELIVERY_REPORT
=
12
;
private
static
final
int
PDU_COLUMN_MESSAGE_TYPE
=
13
;
private
static
final
int
PDU_COLUMN_MMS_VERSION
=
14
;
private
static
final
int
PDU_COLUMN_PRIORITY
=
15
;
private
static
final
int
PDU_COLUMN_READ_REPORT
=
16
;
private
static
final
int
PDU_COLUMN_READ_STATUS
=
17
;
private
static
final
int
PDU_COLUMN_REPORT_ALLOWED
=
18
;
private
static
final
int
PDU_COLUMN_RETRIEVE_STATUS
=
19
;
private
static
final
int
PDU_COLUMN_STATUS
=
20
;
private
static
final
int
PDU_COLUMN_DATE
=
21
;
private
static
final
int
PDU_COLUMN_DELIVERY_TIME
=
22
;
private
static
final
int
PDU_COLUMN_EXPIRY
=
23
;
private
static
final
int
PDU_COLUMN_MESSAGE_SIZE
=
24
;
private
static
final
int
PDU_COLUMN_SUBJECT_CHARSET
=
25
;
private
static
final
int
PDU_COLUMN_RETRIEVE_TEXT_CHARSET
=
26
;
private
static
final
String
[
]
PART_PROJECTION
=
new
String
[
]
{
Part
.
_ID
Part
.
CHARSET
Part
.
CONTENT_DISPOSITION
Part
.
CONTENT_ID
Part
.
CONTENT_LOCATION
Part
.
CONTENT_TYPE
Part
.
FILENAME
Part
.
NAME
Part
.
TEXT
}
;
private
static
final
int
PART_COLUMN_ID
=
0
;
private
static
final
int
PART_COLUMN_CHARSET
=
1
;
private
static
final
int
PART_COLUMN_CONTENT_DISPOSITION
=
2
;
private
static
final
int
PART_COLUMN_CONTENT_ID
=
3
;
private
static
final
int
PART_COLUMN_CONTENT_LOCATION
=
4
;
private
static
final
int
PART_COLUMN_CONTENT_TYPE
=
5
;
private
static
final
int
PART_COLUMN_FILENAME
=
6
;
private
static
final
int
PART_COLUMN_NAME
=
7
;
private
static
final
int
PART_COLUMN_TEXT
=
8
;
private
static
final
HashMap
<
Uri
Integer
>
MESSAGE_BOX_MAP
;
private
static
final
HashMap
<
Integer
Integer
>
CHARSET_COLUMN_INDEX_MAP
;
private
static
final
HashMap
<
Integer
Integer
>
ENCODED_STRING_COLUMN_INDEX_MAP
;
private
static
final
HashMap
<
Integer
Integer
>
TEXT_STRING_COLUMN_INDEX_MAP
;
private
static
final
HashMap
<
Integer
Integer
>
OCTET_COLUMN_INDEX_MAP
;
private
static
final
HashMap
<
Integer
Integer
>
LONG_COLUMN_INDEX_MAP
;
private
static
final
HashMap
<
Integer
String
>
CHARSET_COLUMN_NAME_MAP
;
private
static
final
HashMap
<
Integer
String
>
ENCODED_STRING_COLUMN_NAME_MAP
;
private
static
final
HashMap
<
Integer
String
>
TEXT_STRING_COLUMN_NAME_MAP
;
private
static
final
HashMap
<
Integer
String
>
OCTET_COLUMN_NAME_MAP
;
private
static
final
HashMap
<
Integer
String
>
LONG_COLUMN_NAME_MAP
;
static
{
MESSAGE_BOX_MAP
=
new
HashMap
<
Uri
Integer
>
(
)
;
MESSAGE_BOX_MAP
.
put
(
Mms
.
Inbox
.
CONTENT_URI
Mms
.
MESSAGE_BOX_INBOX
)
;
MESSAGE_BOX_MAP
.
put
(
Mms
.
Sent
.
CONTENT_URI
Mms
.
MESSAGE_BOX_SENT
)
;
MESSAGE_BOX_MAP
.
put
(
Mms
.
Draft
.
CONTENT_URI
Mms
.
MESSAGE_BOX_DRAFTS
)
;
MESSAGE_BOX_MAP
.
put
(
Mms
.
Outbox
.
CONTENT_URI
Mms
.
MESSAGE_BOX_OUTBOX
)
;
CHARSET_COLUMN_INDEX_MAP
=
new
HashMap
<
Integer
Integer
>
(
)
;
CHARSET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
SUBJECT
PDU_COLUMN_SUBJECT_CHARSET
)
;
CHARSET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
RETRIEVE_TEXT
PDU_COLUMN_RETRIEVE_TEXT_CHARSET
)
;
CHARSET_COLUMN_NAME_MAP
=
new
HashMap
<
Integer
String
>
(
)
;
CHARSET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
SUBJECT
Mms
.
SUBJECT_CHARSET
)
;
CHARSET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
RETRIEVE_TEXT
Mms
.
RETRIEVE_TEXT_CHARSET
)
;
ENCODED_STRING_COLUMN_INDEX_MAP
=
new
HashMap
<
Integer
Integer
>
(
)
;
ENCODED_STRING_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
RETRIEVE_TEXT
PDU_COLUMN_RETRIEVE_TEXT
)
;
ENCODED_STRING_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
SUBJECT
PDU_COLUMN_SUBJECT
)
;
ENCODED_STRING_COLUMN_NAME_MAP
=
new
HashMap
<
Integer
String
>
(
)
;
ENCODED_STRING_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
RETRIEVE_TEXT
Mms
.
RETRIEVE_TEXT
)
;
ENCODED_STRING_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
SUBJECT
Mms
.
SUBJECT
)
;
TEXT_STRING_COLUMN_INDEX_MAP
=
new
HashMap
<
Integer
Integer
>
(
)
;
TEXT_STRING_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
CONTENT_LOCATION
PDU_COLUMN_CONTENT_LOCATION
)
;
TEXT_STRING_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
CONTENT_TYPE
PDU_COLUMN_CONTENT_TYPE
)
;
TEXT_STRING_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
MESSAGE_CLASS
PDU_COLUMN_MESSAGE_CLASS
)
;
TEXT_STRING_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
MESSAGE_ID
PDU_COLUMN_MESSAGE_ID
)
;
TEXT_STRING_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
RESPONSE_TEXT
PDU_COLUMN_RESPONSE_TEXT
)
;
TEXT_STRING_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
TRANSACTION_ID
PDU_COLUMN_TRANSACTION_ID
)
;
TEXT_STRING_COLUMN_NAME_MAP
=
new
HashMap
<
Integer
String
>
(
)
;
TEXT_STRING_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
CONTENT_LOCATION
Mms
.
CONTENT_LOCATION
)
;
TEXT_STRING_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
CONTENT_TYPE
Mms
.
CONTENT_TYPE
)
;
TEXT_STRING_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
MESSAGE_CLASS
Mms
.
MESSAGE_CLASS
)
;
TEXT_STRING_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
MESSAGE_ID
Mms
.
MESSAGE_ID
)
;
TEXT_STRING_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
RESPONSE_TEXT
Mms
.
RESPONSE_TEXT
)
;
TEXT_STRING_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
TRANSACTION_ID
Mms
.
TRANSACTION_ID
)
;
OCTET_COLUMN_INDEX_MAP
=
new
HashMap
<
Integer
Integer
>
(
)
;
OCTET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
CONTENT_CLASS
PDU_COLUMN_CONTENT_CLASS
)
;
OCTET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
DELIVERY_REPORT
PDU_COLUMN_DELIVERY_REPORT
)
;
OCTET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
MESSAGE_TYPE
PDU_COLUMN_MESSAGE_TYPE
)
;
OCTET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
MMS_VERSION
PDU_COLUMN_MMS_VERSION
)
;
OCTET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
PRIORITY
PDU_COLUMN_PRIORITY
)
;
OCTET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
READ_REPORT
PDU_COLUMN_READ_REPORT
)
;
OCTET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
READ_STATUS
PDU_COLUMN_READ_STATUS
)
;
OCTET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
REPORT_ALLOWED
PDU_COLUMN_REPORT_ALLOWED
)
;
OCTET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
RETRIEVE_STATUS
PDU_COLUMN_RETRIEVE_STATUS
)
;
OCTET_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
STATUS
PDU_COLUMN_STATUS
)
;
OCTET_COLUMN_NAME_MAP
=
new
HashMap
<
Integer
String
>
(
)
;
OCTET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
CONTENT_CLASS
Mms
.
CONTENT_CLASS
)
;
OCTET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
DELIVERY_REPORT
Mms
.
DELIVERY_REPORT
)
;
OCTET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
MESSAGE_TYPE
Mms
.
MESSAGE_TYPE
)
;
OCTET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
MMS_VERSION
Mms
.
MMS_VERSION
)
;
OCTET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
PRIORITY
Mms
.
PRIORITY
)
;
OCTET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
READ_REPORT
Mms
.
READ_REPORT
)
;
OCTET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
READ_STATUS
Mms
.
READ_STATUS
)
;
OCTET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
REPORT_ALLOWED
Mms
.
REPORT_ALLOWED
)
;
OCTET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
RETRIEVE_STATUS
Mms
.
RETRIEVE_STATUS
)
;
OCTET_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
STATUS
Mms
.
STATUS
)
;
LONG_COLUMN_INDEX_MAP
=
new
HashMap
<
Integer
Integer
>
(
)
;
LONG_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
DATE
PDU_COLUMN_DATE
)
;
LONG_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
DELIVERY_TIME
PDU_COLUMN_DELIVERY_TIME
)
;
LONG_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
EXPIRY
PDU_COLUMN_EXPIRY
)
;
LONG_COLUMN_INDEX_MAP
.
put
(
PduHeaders
.
MESSAGE_SIZE
PDU_COLUMN_MESSAGE_SIZE
)
;
LONG_COLUMN_NAME_MAP
=
new
HashMap
<
Integer
String
>
(
)
;
LONG_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
DATE
Mms
.
DATE
)
;
LONG_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
DELIVERY_TIME
Mms
.
DELIVERY_TIME
)
;
LONG_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
EXPIRY
Mms
.
EXPIRY
)
;
LONG_COLUMN_NAME_MAP
.
put
(
PduHeaders
.
MESSAGE_SIZE
Mms
.
MESSAGE_SIZE
)
;
PDU_CACHE_INSTANCE
=
PduCache
.
getInstance
(
)
;
}
private
final
Context
mContext
;
private
final
ContentResolver
mContentResolver
;
private
final
TelephonyManager
mTelephonyManager
;
private
PduPersister
(
Context
context
)
{
mContext
=
context
;
mContentResolver
=
context
.
getContentResolver
(
)
;
mTelephonyManager
=
(
TelephonyManager
)
context
.
getSystemService
(
Context
.
TELEPHONY_SERVICE
)
;
}
public
static
PduPersister
getPduPersister
(
Context
context
)
{
if
(
(
sPersister
=
=
null
)
)
{
sPersister
=
new
PduPersister
(
context
)
;
}
else
if
(
!
context
.
equals
(
sPersister
.
mContext
)
)
{
sPersister
=
new
PduPersister
(
context
)
;
}
return
sPersister
;
}
private
void
setEncodedStringValueToHeaders
(
Cursor
c
int
columnIndex
PduHeaders
headers
int
mapColumn
)
{
String
s
=
c
.
getString
(
columnIndex
)
;
if
(
(
s
!
=
null
)
&
&
(
s
.
length
(
)
>
0
)
)
{
int
charsetColumnIndex
=
CHARSET_COLUMN_INDEX_MAP
.
get
(
mapColumn
)
;
int
charset
=
c
.
getInt
(
charsetColumnIndex
)
;
EncodedStringValue
value
=
new
EncodedStringValue
(
charset
getBytes
(
s
)
)
;
headers
.
setEncodedStringValue
(
value
mapColumn
)
;
}
}
private
void
setTextStringToHeaders
(
Cursor
c
int
columnIndex
PduHeaders
headers
int
mapColumn
)
{
String
s
=
c
.
getString
(
columnIndex
)
;
if
(
s
!
=
null
)
{
headers
.
setTextString
(
getBytes
(
s
)
mapColumn
)
;
}
}
private
void
setOctetToHeaders
(
Cursor
c
int
columnIndex
PduHeaders
headers
int
mapColumn
)
throws
InvalidHeaderValueException
{
if
(
!
c
.
isNull
(
columnIndex
)
)
{
int
b
=
c
.
getInt
(
columnIndex
)
;
headers
.
setOctet
(
b
mapColumn
)
;
}
}
private
void
setLongToHeaders
(
Cursor
c
int
columnIndex
PduHeaders
headers
int
mapColumn
)
{
if
(
!
c
.
isNull
(
columnIndex
)
)
{
long
l
=
c
.
getLong
(
columnIndex
)
;
headers
.
setLongInteger
(
l
mapColumn
)
;
}
}
private
Integer
getIntegerFromPartColumn
(
Cursor
c
int
columnIndex
)
{
if
(
!
c
.
isNull
(
columnIndex
)
)
{
return
c
.
getInt
(
columnIndex
)
;
}
return
null
;
}
private
byte
[
]
getByteArrayFromPartColumn
(
Cursor
c
int
columnIndex
)
{
if
(
!
c
.
isNull
(
columnIndex
)
)
{
return
getBytes
(
c
.
getString
(
columnIndex
)
)
;
}
return
null
;
}
private
PduPart
[
]
loadParts
(
long
msgId
)
throws
MmsException
{
Cursor
c
=
SqliteWrapper
.
query
(
mContext
mContentResolver
Uri
.
parse
(
"
content
:
/
/
mms
/
"
+
msgId
+
"
/
part
"
)
PART_PROJECTION
null
null
null
)
;
PduPart
[
]
parts
=
null
;
try
{
if
(
(
c
=
=
null
)
|
|
(
c
.
getCount
(
)
=
=
0
)
)
{
if
(
LOCAL_LOGV
)
{
Log
.
v
(
TAG
"
loadParts
(
"
+
msgId
+
"
)
:
no
part
to
load
.
"
)
;
}
return
null
;
}
int
partCount
=
c
.
getCount
(
)
;
int
partIdx
=
0
;
parts
=
new
PduPart
[
partCount
]
;
while
(
c
.
moveToNext
(
)
)
{
PduPart
part
=
new
PduPart
(
)
;
Integer
charset
=
getIntegerFromPartColumn
(
c
PART_COLUMN_CHARSET
)
;
if
(
charset
!
=
null
)
{
part
.
setCharset
(
charset
)
;
}
byte
[
]
contentDisposition
=
getByteArrayFromPartColumn
(
c
PART_COLUMN_CONTENT_DISPOSITION
)
;
if
(
contentDisposition
!
=
null
)
{
part
.
setContentDisposition
(
contentDisposition
)
;
}
byte
[
]
contentId
=
getByteArrayFromPartColumn
(
c
PART_COLUMN_CONTENT_ID
)
;
if
(
contentId
!
=
null
)
{
part
.
setContentId
(
contentId
)
;
}
byte
[
]
contentLocation
=
getByteArrayFromPartColumn
(
c
PART_COLUMN_CONTENT_LOCATION
)
;
if
(
contentLocation
!
=
null
)
{
part
.
setContentLocation
(
contentLocation
)
;
}
byte
[
]
contentType
=
getByteArrayFromPartColumn
(
c
PART_COLUMN_CONTENT_TYPE
)
;
if
(
contentType
!
=
null
)
{
part
.
setContentType
(
contentType
)
;
}
else
{
throw
new
MmsException
(
"
Content
-
Type
must
be
set
.
"
)
;
}
byte
[
]
fileName
=
getByteArrayFromPartColumn
(
c
PART_COLUMN_FILENAME
)
;
if
(
fileName
!
=
null
)
{
part
.
setFilename
(
fileName
)
;
}
byte
[
]
name
=
getByteArrayFromPartColumn
(
c
PART_COLUMN_NAME
)
;
if
(
name
!
=
null
)
{
part
.
setName
(
name
)
;
}
long
partId
=
c
.
getLong
(
PART_COLUMN_ID
)
;
Uri
partURI
=
Uri
.
parse
(
"
content
:
/
/
mms
/
part
/
"
+
partId
)
;
part
.
setDataUri
(
partURI
)
;
String
type
=
toIsoString
(
contentType
)
;
if
(
!
ContentType
.
isImageType
(
type
)
&
&
!
ContentType
.
isAudioType
(
type
)
&
&
!
ContentType
.
isVideoType
(
type
)
)
{
ByteArrayOutputStream
baos
=
new
ByteArrayOutputStream
(
)
;
InputStream
is
=
null
;
if
(
ContentType
.
TEXT_PLAIN
.
equals
(
type
)
|
|
ContentType
.
APP_SMIL
.
equals
(
type
)
|
|
ContentType
.
TEXT_HTML
.
equals
(
type
)
)
{
String
text
=
c
.
getString
(
PART_COLUMN_TEXT
)
;
byte
[
]
blob
=
new
EncodedStringValue
(
text
!
=
null
?
text
:
"
"
)
.
getTextString
(
)
;
baos
.
write
(
blob
0
blob
.
length
)
;
}
else
{
try
{
is
=
mContentResolver
.
openInputStream
(
partURI
)
;
byte
[
]
buffer
=
new
byte
[
256
]
;
int
len
=
is
.
read
(
buffer
)
;
while
(
len
>
=
0
)
{
baos
.
write
(
buffer
0
len
)
;
len
=
is
.
read
(
buffer
)
;
}
}
catch
(
IOException
e
)
{
Log
.
e
(
TAG
"
Failed
to
load
part
data
"
e
)
;
c
.
close
(
)
;
throw
new
MmsException
(
e
)
;
}
finally
{
if
(
is
!
=
null
)
{
try
{
is
.
close
(
)
;
}
catch
(
IOException
e
)
{
Log
.
e
(
TAG
"
Failed
to
close
stream
"
e
)
;
}
}
}
}
part
.
setData
(
baos
.
toByteArray
(
)
)
;
}
parts
[
partIdx
+
+
]
=
part
;
}
}
finally
{
if
(
c
!
=
null
)
{
c
.
close
(
)
;
}
}
return
parts
;
}
private
void
loadAddress
(
long
msgId
PduHeaders
headers
)
{
Cursor
c
=
SqliteWrapper
.
query
(
mContext
mContentResolver
Uri
.
parse
(
"
content
:
/
/
mms
/
"
+
msgId
+
"
/
addr
"
)
new
String
[
]
{
Addr
.
ADDRESS
Addr
.
CHARSET
Addr
.
TYPE
}
null
null
null
)
;
if
(
c
!
=
null
)
{
try
{
while
(
c
.
moveToNext
(
)
)
{
String
addr
=
c
.
getString
(
0
)
;
if
(
!
TextUtils
.
isEmpty
(
addr
)
)
{
int
addrType
=
c
.
getInt
(
2
)
;
switch
(
addrType
)
{
case
PduHeaders
.
FROM
:
headers
.
setEncodedStringValue
(
new
EncodedStringValue
(
c
.
getInt
(
1
)
getBytes
(
addr
)
)
addrType
)
;
break
;
case
PduHeaders
.
TO
:
case
PduHeaders
.
CC
:
case
PduHeaders
.
BCC
:
headers
.
appendEncodedStringValue
(
new
EncodedStringValue
(
c
.
getInt
(
1
)
getBytes
(
addr
)
)
addrType
)
;
break
;
default
:
Log
.
e
(
TAG
"
Unknown
address
type
:
"
+
addrType
)
;
break
;
}
}
}
}
finally
{
c
.
close
(
)
;
}
}
}
public
GenericPdu
load
(
Uri
uri
)
throws
MmsException
{
GenericPdu
pdu
=
null
;
PduCacheEntry
cacheEntry
=
null
;
int
msgBox
=
0
;
long
threadId
=
-
1
;
try
{
synchronized
(
PDU_CACHE_INSTANCE
)
{
if
(
PDU_CACHE_INSTANCE
.
isUpdating
(
uri
)
)
{
if
(
LOCAL_LOGV
)
{
Log
.
v
(
TAG
"
load
:
"
+
uri
+
"
blocked
by
isUpdating
(
)
"
)
;
}
try
{
PDU_CACHE_INSTANCE
.
wait
(
)
;
}
catch
(
InterruptedException
e
)
{
Log
.
e
(
TAG
"
load
:
"
e
)
;
}
cacheEntry
=
PDU_CACHE_INSTANCE
.
get
(
uri
)
;
if
(
cacheEntry
!
=
null
)
{
return
cacheEntry
.
getPdu
(
)
;
}
}
PDU_CACHE_INSTANCE
.
setUpdating
(
uri
true
)
;
}
Cursor
c
=
SqliteWrapper
.
query
(
mContext
mContentResolver
uri
PDU_PROJECTION
null
null
null
)
;
PduHeaders
headers
=
new
PduHeaders
(
)
;
Set
<
Entry
<
Integer
Integer
>
>
set
;
long
msgId
=
ContentUris
.
parseId
(
uri
)
;
try
{
if
(
(
c
=
=
null
)
|
|
(
c
.
getCount
(
)
!
=
1
)
|
|
!
c
.
moveToFirst
(
)
)
{
throw
new
MmsException
(
"
Bad
uri
:
"
+
uri
)
;
}
msgBox
=
c
.
getInt
(
PDU_COLUMN_MESSAGE_BOX
)
;
threadId
=
c
.
getLong
(
PDU_COLUMN_THREAD_ID
)
;
set
=
ENCODED_STRING_COLUMN_INDEX_MAP
.
entrySet
(
)
;
for
(
Entry
<
Integer
Integer
>
e
:
set
)
{
setEncodedStringValueToHeaders
(
c
e
.
getValue
(
)
headers
e
.
getKey
(
)
)
;
}
set
=
TEXT_STRING_COLUMN_INDEX_MAP
.
entrySet
(
)
;
for
(
Entry
<
Integer
Integer
>
e
:
set
)
{
setTextStringToHeaders
(
c
e
.
getValue
(
)
headers
e
.
getKey
(
)
)
;
}
set
=
OCTET_COLUMN_INDEX_MAP
.
entrySet
(
)
;
for
(
Entry
<
Integer
Integer
>
e
:
set
)
{
setOctetToHeaders
(
c
e
.
getValue
(
)
headers
e
.
getKey
(
)
)
;
}
set
=
LONG_COLUMN_INDEX_MAP
.
entrySet
(
)
;
for
(
Entry
<
Integer
Integer
>
e
:
set
)
{
setLongToHeaders
(
c
e
.
getValue
(
)
headers
e
.
getKey
(
)
)
;
}
}
finally
{
if
(
c
!
=
null
)
{
c
.
close
(
)
;
}
}
if
(
msgId
=
=
-
1L
)
{
throw
new
MmsException
(
"
Error
!
ID
of
the
message
:
-
1
.
"
)
;
}
loadAddress
(
msgId
headers
)
;
int
msgType
=
headers
.
getOctet
(
PduHeaders
.
MESSAGE_TYPE
)
;
PduBody
body
=
new
PduBody
(
)
;
if
(
(
msgType
=
=
PduHeaders
.
MESSAGE_TYPE_RETRIEVE_CONF
)
|
|
(
msgType
=
=
PduHeaders
.
MESSAGE_TYPE_SEND_REQ
)
)
{
PduPart
[
]
parts
=
loadParts
(
msgId
)
;
if
(
parts
!
=
null
)
{
int
partsNum
=
parts
.
length
;
for
(
int
i
=
0
;
i
<
partsNum
;
i
+
+
)
{
body
.
addPart
(
parts
[
i
]
)
;
}
}
}
switch
(
msgType
)
{
case
PduHeaders
.
MESSAGE_TYPE_NOTIFICATION_IND
:
pdu
=
new
NotificationInd
(
headers
)
;
break
;
case
PduHeaders
.
MESSAGE_TYPE_DELIVERY_IND
:
pdu
=
new
DeliveryInd
(
headers
)
;
break
;
case
PduHeaders
.
MESSAGE_TYPE_READ_ORIG_IND
:
pdu
=
new
ReadOrigInd
(
headers
)
;
break
;
case
PduHeaders
.
MESSAGE_TYPE_RETRIEVE_CONF
:
pdu
=
new
RetrieveConf
(
headers
body
)
;
break
;
case
PduHeaders
.
MESSAGE_TYPE_SEND_REQ
:
pdu
=
new
SendReq
(
headers
body
)
;
break
;
case
PduHeaders
.
MESSAGE_TYPE_ACKNOWLEDGE_IND
:
pdu
=
new
AcknowledgeInd
(
headers
)
;
break
;
case
PduHeaders
.
MESSAGE_TYPE_NOTIFYRESP_IND
:
pdu
=
new
NotifyRespInd
(
headers
)
;
break
;
case
PduHeaders
.
MESSAGE_TYPE_READ_REC_IND
:
pdu
=
new
ReadRecInd
(
headers
)
;
break
;
case
PduHeaders
.
MESSAGE_TYPE_SEND_CONF
:
case
PduHeaders
.
MESSAGE_TYPE_FORWARD_REQ
:
case
PduHeaders
.
MESSAGE_TYPE_FORWARD_CONF
:
case
PduHeaders
.
MESSAGE_TYPE_MBOX_STORE_REQ
:
case
PduHeaders
.
MESSAGE_TYPE_MBOX_STORE_CONF
:
case
PduHeaders
.
MESSAGE_TYPE_MBOX_VIEW_REQ
:
case
PduHeaders
.
MESSAGE_TYPE_MBOX_VIEW_CONF
:
case
PduHeaders
.
MESSAGE_TYPE_MBOX_UPLOAD_REQ
:
case
PduHeaders
.
MESSAGE_TYPE_MBOX_UPLOAD_CONF
:
case
PduHeaders
.
MESSAGE_TYPE_MBOX_DELETE_REQ
:
case
PduHeaders
.
MESSAGE_TYPE_MBOX_DELETE_CONF
:
case
PduHeaders
.
MESSAGE_TYPE_MBOX_DESCR
:
case
PduHeaders
.
MESSAGE_TYPE_DELETE_REQ
:
case
PduHeaders
.
MESSAGE_TYPE_DELETE_CONF
:
case
PduHeaders
.
MESSAGE_TYPE_CANCEL_REQ
:
case
PduHeaders
.
MESSAGE_TYPE_CANCEL_CONF
:
throw
new
MmsException
(
"
Unsupported
PDU
type
:
"
+
Integer
.
toHexString
(
msgType
)
)
;
default
:
throw
new
MmsException
(
"
Unrecognized
PDU
type
:
"
+
Integer
.
toHexString
(
msgType
)
)
;
}
}
finally
{
synchronized
(
PDU_CACHE_INSTANCE
)
{
if
(
pdu
!
=
null
)
{
assert
(
PDU_CACHE_INSTANCE
.
get
(
uri
)
=
=
null
)
;
cacheEntry
=
new
PduCacheEntry
(
pdu
msgBox
threadId
)
;
PDU_CACHE_INSTANCE
.
put
(
uri
cacheEntry
)
;
}
PDU_CACHE_INSTANCE
.
setUpdating
(
uri
false
)
;
PDU_CACHE_INSTANCE
.
notifyAll
(
)
;
}
}
return
pdu
;
}
private
void
persistAddress
(
long
msgId
int
type
EncodedStringValue
[
]
array
)
{
ContentValues
values
=
new
ContentValues
(
3
)
;
for
(
EncodedStringValue
addr
:
array
)
{
values
.
clear
(
)
;
values
.
put
(
Addr
.
ADDRESS
toIsoString
(
addr
.
getTextString
(
)
)
)
;
values
.
put
(
Addr
.
CHARSET
addr
.
getCharacterSet
(
)
)
;
values
.
put
(
Addr
.
TYPE
type
)
;
Uri
uri
=
Uri
.
parse
(
"
content
:
/
/
mms
/
"
+
msgId
+
"
/
addr
"
)
;
SqliteWrapper
.
insert
(
mContext
mContentResolver
uri
values
)
;
}
}
private
static
String
getPartContentType
(
PduPart
part
)
{
return
part
.
getContentType
(
)
=
=
null
?
null
:
toIsoString
(
part
.
getContentType
(
)
)
;
}
public
Uri
persistPart
(
PduPart
part
long
msgId
HashMap
<
Uri
InputStream
>
preOpenedFiles
)
throws
MmsException
{
Uri
uri
=
Uri
.
parse
(
"
content
:
/
/
mms
/
"
+
msgId
+
"
/
part
"
)
;
ContentValues
values
=
new
ContentValues
(
8
)
;
int
charset
=
part
.
getCharset
(
)
;
if
(
charset
!
=
0
)
{
values
.
put
(
Part
.
CHARSET
charset
)
;
}
String
contentType
=
getPartContentType
(
part
)
;
if
(
contentType
!
=
null
)
{
if
(
ContentType
.
IMAGE_JPG
.
equals
(
contentType
)
)
{
contentType
=
ContentType
.
IMAGE_JPEG
;
}
values
.
put
(
Part
.
CONTENT_TYPE
contentType
)
;
if
(
ContentType
.
APP_SMIL
.
equals
(
contentType
)
)
{
values
.
put
(
Part
.
SEQ
-
1
)
;
}
}
else
{
throw
new
MmsException
(
"
MIME
type
of
the
part
must
be
set
.
"
)
;
}
if
(
part
.
getFilename
(
)
!
=
null
)
{
String
fileName
=
new
String
(
part
.
getFilename
(
)
)
;
values
.
put
(
Part
.
FILENAME
fileName
)
;
}
if
(
part
.
getName
(
)
!
=
null
)
{
String
name
=
new
String
(
part
.
getName
(
)
)
;
values
.
put
(
Part
.
NAME
name
)
;
}
Object
value
=
null
;
if
(
part
.
getContentDisposition
(
)
!
=
null
)
{
value
=
toIsoString
(
part
.
getContentDisposition
(
)
)
;
values
.
put
(
Part
.
CONTENT_DISPOSITION
(
String
)
value
)
;
}
if
(
part
.
getContentId
(
)
!
=
null
)
{
value
=
toIsoString
(
part
.
getContentId
(
)
)
;
values
.
put
(
Part
.
CONTENT_ID
(
String
)
value
)
;
}
if
(
part
.
getContentLocation
(
)
!
=
null
)
{
value
=
toIsoString
(
part
.
getContentLocation
(
)
)
;
values
.
put
(
Part
.
CONTENT_LOCATION
(
String
)
value
)
;
}
Uri
res
=
SqliteWrapper
.
insert
(
mContext
mContentResolver
uri
values
)
;
if
(
res
=
=
null
)
{
throw
new
MmsException
(
"
Failed
to
persist
part
return
null
.
"
)
;
}
persistData
(
part
res
contentType
preOpenedFiles
)
;
part
.
setDataUri
(
res
)
;
return
res
;
}
private
void
persistData
(
PduPart
part
Uri
uri
String
contentType
HashMap
<
Uri
InputStream
>
preOpenedFiles
)
throws
MmsException
{
OutputStream
os
=
null
;
InputStream
is
=
null
;
Uri
dataUri
=
null
;
String
path
=
null
;
try
{
byte
[
]
data
=
part
.
getData
(
)
;
if
(
ContentType
.
TEXT_PLAIN
.
equals
(
contentType
)
|
|
ContentType
.
APP_SMIL
.
equals
(
contentType
)
|
|
ContentType
.
TEXT_HTML
.
equals
(
contentType
)
)
{
ContentValues
cv
=
new
ContentValues
(
)
;
if
(
data
=
=
null
)
{
data
=
new
String
(
"
"
)
.
getBytes
(
CharacterSets
.
DEFAULT_CHARSET_NAME
)
;
}
cv
.
put
(
Telephony
.
Mms
.
Part
.
TEXT
new
EncodedStringValue
(
data
)
.
getString
(
)
)
;
if
(
mContentResolver
.
update
(
uri
cv
null
null
)
!
=
1
)
{
throw
new
MmsException
(
"
unable
to
update
"
+
uri
.
toString
(
)
)
;
}
}
else
{
os
=
mContentResolver
.
openOutputStream
(
uri
)
;
if
(
data
=
=
null
)
{
dataUri
=
part
.
getDataUri
(
)
;
if
(
(
dataUri
=
=
null
)
|
|
(
dataUri
=
=
uri
)
)
{
Log
.
w
(
TAG
"
Can
'
t
find
data
for
this
part
.
"
)
;
return
;
}
if
(
preOpenedFiles
!
=
null
&
&
preOpenedFiles
.
containsKey
(
dataUri
)
)
{
is
=
preOpenedFiles
.
get
(
dataUri
)
;
}
if
(
is
=
=
null
)
{
is
=
mContentResolver
.
openInputStream
(
dataUri
)
;
}
if
(
LOCAL_LOGV
)
{
Log
.
v
(
TAG
"
Saving
data
to
:
"
+
uri
)
;
}
byte
[
]
buffer
=
new
byte
[
8192
]
;
for
(
int
len
=
0
;
(
len
=
is
.
read
(
buffer
)
)
!
=
-
1
;
)
{
os
.
write
(
buffer
0
len
)
;
}
}
else
{
if
(
LOCAL_LOGV
)
{
Log
.
v
(
TAG
"
Saving
data
to
:
"
+
uri
)
;
}
os
.
write
(
data
)
;
}
}
}
catch
(
FileNotFoundException
e
)
{
Log
.
e
(
TAG
"
Failed
to
open
Input
/
Output
stream
.
"
e
)
;
throw
new
MmsException
(
e
)
;
}
catch
(
IOException
e
)
{
Log
.
e
(
TAG
"
Failed
to
read
/
write
data
.
"
e
)
;
throw
new
MmsException
(
e
)
;
}
finally
{
if
(
os
!
=
null
)
{
try
{
os
.
close
(
)
;
}
catch
(
IOException
e
)
{
Log
.
e
(
TAG
"
IOException
while
closing
:
"
+
os
e
)
;
}
}
if
(
is
!
=
null
)
{
try
{
is
.
close
(
)
;
}
catch
(
IOException
e
)
{
Log
.
e
(
TAG
"
IOException
while
closing
:
"
+
is
e
)
;
}
}
}
}
static
public
String
convertUriToPath
(
Context
context
Uri
uri
)
{
String
path
=
null
;
if
(
null
!
=
uri
)
{
String
scheme
=
uri
.
getScheme
(
)
;
if
(
null
=
=
scheme
|
|
scheme
.
equals
(
"
"
)
|
|
scheme
.
equals
(
ContentResolver
.
SCHEME_FILE
)
)
{
path
=
uri
.
getPath
(
)
;
}
else
if
(
scheme
.
equals
(
"
http
"
)
)
{
path
=
uri
.
toString
(
)
;
}
else
if
(
scheme
.
equals
(
ContentResolver
.
SCHEME_CONTENT
)
)
{
String
[
]
projection
=
new
String
[
]
{
MediaStore
.
MediaColumns
.
DATA
}
;
Cursor
cursor
=
null
;
try
{
cursor
=
context
.
getContentResolver
(
)
.
query
(
uri
projection
null
null
null
)
;
if
(
null
=
=
cursor
|
|
0
=
=
cursor
.
getCount
(
)
|
|
!
cursor
.
moveToFirst
(
)
)
{
throw
new
IllegalArgumentException
(
"
Given
Uri
could
not
be
found
"
+
"
in
media
store
"
)
;
}
int
pathIndex
=
cursor
.
getColumnIndexOrThrow
(
MediaStore
.
MediaColumns
.
DATA
)
;
path
=
cursor
.
getString
(
pathIndex
)
;
}
catch
(
SQLiteException
e
)
{
throw
new
IllegalArgumentException
(
"
Given
Uri
is
not
formatted
in
a
way
"
+
"
so
that
it
can
be
found
in
media
store
.
"
)
;
}
finally
{
if
(
null
!
=
cursor
)
{
cursor
.
close
(
)
;
}
}
}
else
{
throw
new
IllegalArgumentException
(
"
Given
Uri
scheme
is
not
supported
"
)
;
}
}
return
path
;
}
private
void
updateAddress
(
long
msgId
int
type
EncodedStringValue
[
]
array
)
{
SqliteWrapper
.
delete
(
mContext
mContentResolver
Uri
.
parse
(
"
content
:
/
/
mms
/
"
+
msgId
+
"
/
addr
"
)
Addr
.
TYPE
+
"
=
"
+
type
null
)
;
persistAddress
(
msgId
type
array
)
;
}
public
void
updateHeaders
(
Uri
uri
SendReq
sendReq
)
{
synchronized
(
PDU_CACHE_INSTANCE
)
{
if
(
PDU_CACHE_INSTANCE
.
isUpdating
(
uri
)
)
{
if
(
LOCAL_LOGV
)
{
Log
.
v
(
TAG
"
updateHeaders
:
"
+
uri
+
"
blocked
by
isUpdating
(
)
"
)
;
}
try
{
PDU_CACHE_INSTANCE
.
wait
(
)
;
}
catch
(
InterruptedException
e
)
{
Log
.
e
(
TAG
"
updateHeaders
:
"
e
)
;
}
}
}
PDU_CACHE_INSTANCE
.
purge
(
uri
)
;
ContentValues
values
=
new
ContentValues
(
10
)
;
byte
[
]
contentType
=
sendReq
.
getContentType
(
)
;
if
(
contentType
!
=
null
)
{
values
.
put
(
Mms
.
CONTENT_TYPE
toIsoString
(
contentType
)
)
;
}
long
date
=
sendReq
.
getDate
(
)
;
if
(
date
!
=
-
1
)
{
values
.
put
(
Mms
.
DATE
date
)
;
}
int
deliveryReport
=
sendReq
.
getDeliveryReport
(
)
;
if
(
deliveryReport
!
=
0
)
{
values
.
put
(
Mms
.
DELIVERY_REPORT
deliveryReport
)
;
}
long
expiry
=
sendReq
.
getExpiry
(
)
;
if
(
expiry
!
=
-
1
)
{
values
.
put
(
Mms
.
EXPIRY
expiry
)
;
}
byte
[
]
msgClass
=
sendReq
.
getMessageClass
(
)
;
if
(
msgClass
!
=
null
)
{
values
.
put
(
Mms
.
MESSAGE_CLASS
toIsoString
(
msgClass
)
)
;
}
int
priority
=
sendReq
.
getPriority
(
)
;
if
(
priority
!
=
0
)
{
values
.
put
(
Mms
.
PRIORITY
priority
)
;
}
int
readReport
=
sendReq
.
getReadReport
(
)
;
if
(
readReport
!
=
0
)
{
values
.
put
(
Mms
.
READ_REPORT
readReport
)
;
}
byte
[
]
transId
=
sendReq
.
getTransactionId
(
)
;
if
(
transId
!
=
null
)
{
values
.
put
(
Mms
.
TRANSACTION_ID
toIsoString
(
transId
)
)
;
}
EncodedStringValue
subject
=
sendReq
.
getSubject
(
)
;
if
(
subject
!
=
null
)
{
values
.
put
(
Mms
.
SUBJECT
toIsoString
(
subject
.
getTextString
(
)
)
)
;
values
.
put
(
Mms
.
SUBJECT_CHARSET
subject
.
getCharacterSet
(
)
)
;
}
else
{
values
.
put
(
Mms
.
SUBJECT
"
"
)
;
}
long
messageSize
=
sendReq
.
getMessageSize
(
)
;
if
(
messageSize
>
0
)
{
values
.
put
(
Mms
.
MESSAGE_SIZE
messageSize
)
;
}
PduHeaders
headers
=
sendReq
.
getPduHeaders
(
)
;
HashSet
<
String
>
recipients
=
new
HashSet
<
String
>
(
)
;
for
(
int
addrType
:
ADDRESS_FIELDS
)
{
EncodedStringValue
[
]
array
=
null
;
if
(
addrType
=
=
PduHeaders
.
FROM
)
{
EncodedStringValue
v
=
headers
.
getEncodedStringValue
(
addrType
)
;
if
(
v
!
=
null
)
{
array
=
new
EncodedStringValue
[
1
]
;
array
[
0
]
=
v
;
}
}
else
{
array
=
headers
.
getEncodedStringValues
(
addrType
)
;
}
if
(
array
!
=
null
)
{
long
msgId
=
ContentUris
.
parseId
(
uri
)
;
updateAddress
(
msgId
addrType
array
)
;
if
(
addrType
=
=
PduHeaders
.
TO
)
{
for
(
EncodedStringValue
v
:
array
)
{
if
(
v
!
=
null
)
{
recipients
.
add
(
v
.
getString
(
)
)
;
}
}
}
}
}
if
(
!
recipients
.
isEmpty
(
)
)
{
long
threadId
=
Threads
.
getOrCreateThreadId
(
mContext
recipients
)
;
values
.
put
(
Mms
.
THREAD_ID
threadId
)
;
}
SqliteWrapper
.
update
(
mContext
mContentResolver
uri
values
null
null
)
;
}
private
void
updatePart
(
Uri
uri
PduPart
part
HashMap
<
Uri
InputStream
>
preOpenedFiles
)
throws
MmsException
{
ContentValues
values
=
new
ContentValues
(
7
)
;
int
charset
=
part
.
getCharset
(
)
;
if
(
charset
!
=
0
)
{
values
.
put
(
Part
.
CHARSET
charset
)
;
}
String
contentType
=
null
;
if
(
part
.
getContentType
(
)
!
=
null
)
{
contentType
=
toIsoString
(
part
.
getContentType
(
)
)
;
values
.
put
(
Part
.
CONTENT_TYPE
contentType
)
;
}
else
{
throw
new
MmsException
(
"
MIME
type
of
the
part
must
be
set
.
"
)
;
}
if
(
part
.
getFilename
(
)
!
=
null
)
{
String
fileName
=
new
String
(
part
.
getFilename
(
)
)
;
values
.
put
(
Part
.
FILENAME
fileName
)
;
}
if
(
part
.
getName
(
)
!
=
null
)
{
String
name
=
new
String
(
part
.
getName
(
)
)
;
values
.
put
(
Part
.
NAME
name
)
;
}
Object
value
=
null
;
if
(
part
.
getContentDisposition
(
)
!
=
null
)
{
value
=
toIsoString
(
part
.
getContentDisposition
(
)
)
;
values
.
put
(
Part
.
CONTENT_DISPOSITION
(
String
)
value
)
;
}
if
(
part
.
getContentId
(
)
!
=
null
)
{
value
=
toIsoString
(
part
.
getContentId
(
)
)
;
values
.
put
(
Part
.
CONTENT_ID
(
String
)
value
)
;
}
if
(
part
.
getContentLocation
(
)
!
=
null
)
{
value
=
toIsoString
(
part
.
getContentLocation
(
)
)
;
values
.
put
(
Part
.
CONTENT_LOCATION
(
String
)
value
)
;
}
SqliteWrapper
.
update
(
mContext
mContentResolver
uri
values
null
null
)
;
if
(
(
part
.
getData
(
)
!
=
null
)
|
|
(
uri
!
=
part
.
getDataUri
(
)
)
)
{
persistData
(
part
uri
contentType
preOpenedFiles
)
;
}
}
public
void
updateParts
(
Uri
uri
PduBody
body
HashMap
<
Uri
InputStream
>
preOpenedFiles
)
throws
MmsException
{
try
{
PduCacheEntry
cacheEntry
;
synchronized
(
PDU_CACHE_INSTANCE
)
{
if
(
PDU_CACHE_INSTANCE
.
isUpdating
(
uri
)
)
{
if
(
LOCAL_LOGV
)
{
Log
.
v
(
TAG
"
updateParts
:
"
+
uri
+
"
blocked
by
isUpdating
(
)
"
)
;
}
try
{
PDU_CACHE_INSTANCE
.
wait
(
)
;
}
catch
(
InterruptedException
e
)
{
Log
.
e
(
TAG
"
updateParts
:
"
e
)
;
}
cacheEntry
=
PDU_CACHE_INSTANCE
.
get
(
uri
)
;
if
(
cacheEntry
!
=
null
)
{
(
(
MultimediaMessagePdu
)
cacheEntry
.
getPdu
(
)
)
.
setBody
(
body
)
;
}
}
PDU_CACHE_INSTANCE
.
setUpdating
(
uri
true
)
;
}
ArrayList
<
PduPart
>
toBeCreated
=
new
ArrayList
<
PduPart
>
(
)
;
HashMap
<
Uri
PduPart
>
toBeUpdated
=
new
HashMap
<
Uri
PduPart
>
(
)
;
int
partsNum
=
body
.
getPartsNum
(
)
;
StringBuilder
filter
=
new
StringBuilder
(
)
.
append
(
'
(
'
)
;
for
(
int
i
=
0
;
i
<
partsNum
;
i
+
+
)
{
PduPart
part
=
body
.
getPart
(
i
)
;
Uri
partUri
=
part
.
getDataUri
(
)
;
if
(
(
partUri
=
=
null
)
|
|
!
partUri
.
getAuthority
(
)
.
startsWith
(
"
mms
"
)
)
{
toBeCreated
.
add
(
part
)
;
}
else
{
toBeUpdated
.
put
(
partUri
part
)
;
if
(
filter
.
length
(
)
>
1
)
{
filter
.
append
(
"
AND
"
)
;
}
filter
.
append
(
Part
.
_ID
)
;
filter
.
append
(
"
!
=
"
)
;
DatabaseUtils
.
appendEscapedSQLString
(
filter
partUri
.
getLastPathSegment
(
)
)
;
}
}
filter
.
append
(
'
)
'
)
;
long
msgId
=
ContentUris
.
parseId
(
uri
)
;
SqliteWrapper
.
delete
(
mContext
mContentResolver
Uri
.
parse
(
Mms
.
CONTENT_URI
+
"
/
"
+
msgId
+
"
/
part
"
)
filter
.
length
(
)
>
2
?
filter
.
toString
(
)
:
null
null
)
;
for
(
PduPart
part
:
toBeCreated
)
{
persistPart
(
part
msgId
preOpenedFiles
)
;
}
for
(
Map
.
Entry
<
Uri
PduPart
>
e
:
toBeUpdated
.
entrySet
(
)
)
{
updatePart
(
e
.
getKey
(
)
e
.
getValue
(
)
preOpenedFiles
)
;
}
}
finally
{
synchronized
(
PDU_CACHE_INSTANCE
)
{
PDU_CACHE_INSTANCE
.
setUpdating
(
uri
false
)
;
PDU_CACHE_INSTANCE
.
notifyAll
(
)
;
}
}
}
public
Uri
persist
(
GenericPdu
pdu
Uri
uri
boolean
createThreadId
boolean
groupMmsEnabled
HashMap
<
Uri
InputStream
>
preOpenedFiles
)
throws
MmsException
{
if
(
uri
=
=
null
)
{
throw
new
MmsException
(
"
Uri
may
not
be
null
.
"
)
;
}
long
msgId
=
-
1
;
try
{
msgId
=
ContentUris
.
parseId
(
uri
)
;
}
catch
(
NumberFormatException
e
)
{
}
boolean
existingUri
=
msgId
!
=
-
1
;
if
(
!
existingUri
&
&
MESSAGE_BOX_MAP
.
get
(
uri
)
=
=
null
)
{
throw
new
MmsException
(
"
Bad
destination
must
be
one
of
"
+
"
content
:
/
/
mms
/
inbox
content
:
/
/
mms
/
sent
"
+
"
content
:
/
/
mms
/
drafts
content
:
/
/
mms
/
outbox
"
+
"
content
:
/
/
mms
/
temp
.
"
)
;
}
synchronized
(
PDU_CACHE_INSTANCE
)
{
if
(
PDU_CACHE_INSTANCE
.
isUpdating
(
uri
)
)
{
if
(
LOCAL_LOGV
)
{
Log
.
v
(
TAG
"
persist
:
"
+
uri
+
"
blocked
by
isUpdating
(
)
"
)
;
}
try
{
PDU_CACHE_INSTANCE
.
wait
(
)
;
}
catch
(
InterruptedException
e
)
{
Log
.
e
(
TAG
"
persist1
:
"
e
)
;
}
}
}
PDU_CACHE_INSTANCE
.
purge
(
uri
)
;
PduHeaders
header
=
pdu
.
getPduHeaders
(
)
;
PduBody
body
=
null
;
ContentValues
values
=
new
ContentValues
(
)
;
Set
<
Entry
<
Integer
String
>
>
set
;
set
=
ENCODED_STRING_COLUMN_NAME_MAP
.
entrySet
(
)
;
for
(
Entry
<
Integer
String
>
e
:
set
)
{
int
field
=
e
.
getKey
(
)
;
EncodedStringValue
encodedString
=
header
.
getEncodedStringValue
(
field
)
;
if
(
encodedString
!
=
null
)
{
String
charsetColumn
=
CHARSET_COLUMN_NAME_MAP
.
get
(
field
)
;
values
.
put
(
e
.
getValue
(
)
toIsoString
(
encodedString
.
getTextString
(
)
)
)
;
values
.
put
(
charsetColumn
encodedString
.
getCharacterSet
(
)
)
;
}
}
set
=
TEXT_STRING_COLUMN_NAME_MAP
.
entrySet
(
)
;
for
(
Entry
<
Integer
String
>
e
:
set
)
{
byte
[
]
text
=
header
.
getTextString
(
e
.
getKey
(
)
)
;
if
(
text
!
=
null
)
{
values
.
put
(
e
.
getValue
(
)
toIsoString
(
text
)
)
;
}
}
set
=
OCTET_COLUMN_NAME_MAP
.
entrySet
(
)
;
for
(
Entry
<
Integer
String
>
e
:
set
)
{
int
b
=
header
.
getOctet
(
e
.
getKey
(
)
)
;
if
(
b
!
=
0
)
{
values
.
put
(
e
.
getValue
(
)
b
)
;
}
}
set
=
LONG_COLUMN_NAME_MAP
.
entrySet
(
)
;
for
(
Entry
<
Integer
String
>
e
:
set
)
{
long
l
=
header
.
getLongInteger
(
e
.
getKey
(
)
)
;
if
(
l
!
=
-
1L
)
{
values
.
put
(
e
.
getValue
(
)
l
)
;
}
}
HashMap
<
Integer
EncodedStringValue
[
]
>
addressMap
=
new
HashMap
<
Integer
EncodedStringValue
[
]
>
(
ADDRESS_FIELDS
.
length
)
;
for
(
int
addrType
:
ADDRESS_FIELDS
)
{
EncodedStringValue
[
]
array
=
null
;
if
(
addrType
=
=
PduHeaders
.
FROM
)
{
EncodedStringValue
v
=
header
.
getEncodedStringValue
(
addrType
)
;
if
(
v
!
=
null
)
{
array
=
new
EncodedStringValue
[
1
]
;
array
[
0
]
=
v
;
}
}
else
{
array
=
header
.
getEncodedStringValues
(
addrType
)
;
}
addressMap
.
put
(
addrType
array
)
;
}
HashSet
<
String
>
recipients
=
new
HashSet
<
String
>
(
)
;
int
msgType
=
pdu
.
getMessageType
(
)
;
if
(
(
msgType
=
=
PduHeaders
.
MESSAGE_TYPE_NOTIFICATION_IND
)
|
|
(
msgType
=
=
PduHeaders
.
MESSAGE_TYPE_RETRIEVE_CONF
)
|
|
(
msgType
=
=
PduHeaders
.
MESSAGE_TYPE_SEND_REQ
)
)
{
switch
(
msgType
)
{
case
PduHeaders
.
MESSAGE_TYPE_NOTIFICATION_IND
:
case
PduHeaders
.
MESSAGE_TYPE_RETRIEVE_CONF
:
loadRecipients
(
PduHeaders
.
FROM
recipients
addressMap
false
)
;
if
(
groupMmsEnabled
)
{
loadRecipients
(
PduHeaders
.
TO
recipients
addressMap
true
)
;
loadRecipients
(
PduHeaders
.
CC
recipients
addressMap
true
)
;
}
break
;
case
PduHeaders
.
MESSAGE_TYPE_SEND_REQ
:
loadRecipients
(
PduHeaders
.
TO
recipients
addressMap
false
)
;
break
;
}
long
threadId
=
0
;
if
(
createThreadId
&
&
!
recipients
.
isEmpty
(
)
)
{
threadId
=
Threads
.
getOrCreateThreadId
(
mContext
recipients
)
;
}
values
.
put
(
Mms
.
THREAD_ID
threadId
)
;
}
long
dummyId
=
System
.
currentTimeMillis
(
)
;
boolean
textOnly
=
true
;
int
messageSize
=
0
;
if
(
pdu
instanceof
MultimediaMessagePdu
)
{
body
=
(
(
MultimediaMessagePdu
)
pdu
)
.
getBody
(
)
;
if
(
body
!
=
null
)
{
int
partsNum
=
body
.
getPartsNum
(
)
;
if
(
partsNum
>
2
)
{
textOnly
=
false
;
}
for
(
int
i
=
0
;
i
<
partsNum
;
i
+
+
)
{
PduPart
part
=
body
.
getPart
(
i
)
;
messageSize
+
=
part
.
getDataLength
(
)
;
persistPart
(
part
dummyId
preOpenedFiles
)
;
String
contentType
=
getPartContentType
(
part
)
;
if
(
contentType
!
=
null
&
&
!
ContentType
.
APP_SMIL
.
equals
(
contentType
)
&
&
!
ContentType
.
TEXT_PLAIN
.
equals
(
contentType
)
)
{
textOnly
=
false
;
}
}
}
}
values
.
put
(
Mms
.
TEXT_ONLY
textOnly
?
1
:
0
)
;
if
(
values
.
getAsInteger
(
Mms
.
MESSAGE_SIZE
)
=
=
null
)
{
values
.
put
(
Mms
.
MESSAGE_SIZE
messageSize
)
;
}
Uri
res
=
null
;
if
(
existingUri
)
{
res
=
uri
;
SqliteWrapper
.
update
(
mContext
mContentResolver
res
values
null
null
)
;
}
else
{
res
=
SqliteWrapper
.
insert
(
mContext
mContentResolver
uri
values
)
;
if
(
res
=
=
null
)
{
throw
new
MmsException
(
"
persist
(
)
failed
:
return
null
.
"
)
;
}
msgId
=
ContentUris
.
parseId
(
res
)
;
}
values
=
new
ContentValues
(
1
)
;
values
.
put
(
Part
.
MSG_ID
msgId
)
;
SqliteWrapper
.
update
(
mContext
mContentResolver
Uri
.
parse
(
"
content
:
/
/
mms
/
"
+
dummyId
+
"
/
part
"
)
values
null
null
)
;
if
(
!
existingUri
)
{
res
=
Uri
.
parse
(
uri
+
"
/
"
+
msgId
)
;
}
for
(
int
addrType
:
ADDRESS_FIELDS
)
{
EncodedStringValue
[
]
array
=
addressMap
.
get
(
addrType
)
;
if
(
array
!
=
null
)
{
persistAddress
(
msgId
addrType
array
)
;
}
}
return
res
;
}
private
void
loadRecipients
(
int
addressType
HashSet
<
String
>
recipients
HashMap
<
Integer
EncodedStringValue
[
]
>
addressMap
boolean
excludeMyNumber
)
{
EncodedStringValue
[
]
array
=
addressMap
.
get
(
addressType
)
;
if
(
array
=
=
null
)
{
return
;
}
if
(
excludeMyNumber
&
&
array
.
length
=
=
1
)
{
return
;
}
String
myNumber
=
excludeMyNumber
?
mTelephonyManager
.
getLine1Number
(
)
:
null
;
for
(
EncodedStringValue
v
:
array
)
{
if
(
v
!
=
null
)
{
String
number
=
v
.
getString
(
)
;
if
(
(
myNumber
=
=
null
|
|
!
PhoneNumberUtils
.
compare
(
number
myNumber
)
)
&
&
!
recipients
.
contains
(
number
)
)
{
recipients
.
add
(
number
)
;
}
}
}
}
public
Uri
move
(
Uri
from
Uri
to
)
throws
MmsException
{
long
msgId
=
ContentUris
.
parseId
(
from
)
;
if
(
msgId
=
=
-
1L
)
{
throw
new
MmsException
(
"
Error
!
ID
of
the
message
:
-
1
.
"
)
;
}
Integer
msgBox
=
MESSAGE_BOX_MAP
.
get
(
to
)
;
if
(
msgBox
=
=
null
)
{
throw
new
MmsException
(
"
Bad
destination
must
be
one
of
"
+
"
content
:
/
/
mms
/
inbox
content
:
/
/
mms
/
sent
"
+
"
content
:
/
/
mms
/
drafts
content
:
/
/
mms
/
outbox
"
+
"
content
:
/
/
mms
/
temp
.
"
)
;
}
ContentValues
values
=
new
ContentValues
(
1
)
;
values
.
put
(
Mms
.
MESSAGE_BOX
msgBox
)
;
SqliteWrapper
.
update
(
mContext
mContentResolver
from
values
null
null
)
;
return
ContentUris
.
withAppendedId
(
to
msgId
)
;
}
public
static
String
toIsoString
(
byte
[
]
bytes
)
{
try
{
return
new
String
(
bytes
CharacterSets
.
MIMENAME_ISO_8859_1
)
;
}
catch
(
UnsupportedEncodingException
e
)
{
Log
.
e
(
TAG
"
ISO_8859_1
must
be
supported
!
"
e
)
;
return
"
"
;
}
}
public
static
byte
[
]
getBytes
(
String
data
)
{
try
{
return
data
.
getBytes
(
CharacterSets
.
MIMENAME_ISO_8859_1
)
;
}
catch
(
UnsupportedEncodingException
e
)
{
Log
.
e
(
TAG
"
ISO_8859_1
must
be
supported
!
"
e
)
;
return
new
byte
[
0
]
;
}
}
public
Cursor
getPendingMessages
(
long
dueTime
)
{
Uri
.
Builder
uriBuilder
=
PendingMessages
.
CONTENT_URI
.
buildUpon
(
)
;
uriBuilder
.
appendQueryParameter
(
"
protocol
"
"
mms
"
)
;
String
selection
=
PendingMessages
.
ERROR_TYPE
+
"
<
?
"
+
"
AND
"
+
PendingMessages
.
DUE_TIME
+
"
<
=
?
"
;
String
[
]
selectionArgs
=
new
String
[
]
{
String
.
valueOf
(
MmsSms
.
ERR_TYPE_GENERIC_PERMANENT
)
String
.
valueOf
(
dueTime
)
}
;
return
SqliteWrapper
.
query
(
mContext
mContentResolver
uriBuilder
.
build
(
)
null
selection
selectionArgs
PendingMessages
.
DUE_TIME
)
;
}
}
