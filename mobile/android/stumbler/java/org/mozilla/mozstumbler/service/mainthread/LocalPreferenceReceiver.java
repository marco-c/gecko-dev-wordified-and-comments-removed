package
org
.
mozilla
.
mozstumbler
.
service
.
mainthread
;
import
android
.
content
.
BroadcastReceiver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
mozstumbler
.
service
.
AppGlobals
;
import
org
.
mozilla
.
mozstumbler
.
service
.
stumblerthread
.
StumblerService
;
public
class
LocalPreferenceReceiver
extends
BroadcastReceiver
{
static
final
String
LOG_TAG
=
"
PassiveStumbler
"
;
Override
public
void
onReceive
(
Context
context
Intent
intent
)
{
if
(
intent
=
=
null
)
{
return
;
}
AppGlobals
.
isDebug
=
Log
.
isLoggable
(
LOG_TAG
Log
.
DEBUG
)
;
StumblerService
.
sFirefoxStumblingEnabled
.
set
(
intent
.
getBooleanExtra
(
"
enabled
"
false
)
)
;
if
(
!
StumblerService
.
sFirefoxStumblingEnabled
.
get
(
)
)
{
Log
.
d
(
LOG_TAG
"
Stopping
StumblerService
|
isDebug
:
"
+
AppGlobals
.
isDebug
)
;
context
.
stopService
(
new
Intent
(
context
StumblerService
.
class
)
)
;
context
.
sendBroadcast
(
new
Intent
(
AppGlobals
.
ACTION_TEST_SETTING_DISABLED
)
)
;
return
;
}
context
.
sendBroadcast
(
new
Intent
(
AppGlobals
.
ACTION_TEST_SETTING_ENABLED
)
)
;
Log
.
d
(
LOG_TAG
"
Sending
passive
start
message
|
isDebug
:
"
+
AppGlobals
.
isDebug
)
;
final
Intent
startServiceIntent
=
new
Intent
(
context
StumblerService
.
class
)
;
startServiceIntent
.
putExtra
(
StumblerService
.
ACTION_START_PASSIVE
true
)
;
startServiceIntent
.
putExtra
(
StumblerService
.
ACTION_EXTRA_MOZ_API_KEY
intent
.
getStringExtra
(
"
moz_mozilla_api_key
"
)
)
;
startServiceIntent
.
putExtra
(
StumblerService
.
ACTION_EXTRA_USER_AGENT
intent
.
getStringExtra
(
"
user_agent
"
)
)
;
context
.
startService
(
startServiceIntent
)
;
}
}
