package
org
.
mozilla
.
gecko
.
db
;
import
android
.
content
.
ContentProviderClient
;
import
android
.
content
.
ContentValues
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
RemoteException
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
org
.
robolectric
.
shadows
.
ShadowContentResolver
;
import
static
org
.
junit
.
Assert
.
*
;
RunWith
(
RobolectricTestRunner
.
class
)
public
class
BrowserProviderHistoryTest
extends
BrowserProviderHistoryVisitsTestBase
{
private
ContentProviderClient
thumbnailClient
;
private
Uri
thumbnailTestUri
;
private
Uri
expireHistoryNormalUri
;
private
Uri
expireHistoryAggressiveUri
;
private
static
final
long
THREE_MONTHS
=
1000L
*
60L
*
60L
*
24L
*
30L
*
3L
;
Before
Override
public
void
setUp
(
)
throws
Exception
{
super
.
setUp
(
)
;
final
ShadowContentResolver
cr
=
new
ShadowContentResolver
(
)
;
thumbnailClient
=
cr
.
acquireContentProviderClient
(
BrowserContract
.
Thumbnails
.
CONTENT_URI
)
;
thumbnailTestUri
=
testUri
(
BrowserContract
.
Thumbnails
.
CONTENT_URI
)
;
expireHistoryNormalUri
=
testUri
(
BrowserContract
.
History
.
CONTENT_OLD_URI
)
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_EXPIRE_PRIORITY
BrowserContract
.
ExpirePriority
.
NORMAL
.
toString
(
)
)
.
build
(
)
;
expireHistoryAggressiveUri
=
testUri
(
BrowserContract
.
History
.
CONTENT_OLD_URI
)
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_EXPIRE_PRIORITY
BrowserContract
.
ExpirePriority
.
AGGRESSIVE
.
toString
(
)
)
.
build
(
)
;
}
After
Override
public
void
tearDown
(
)
{
thumbnailClient
.
release
(
)
;
super
.
tearDown
(
)
;
}
Test
public
void
testHistoryExpirationAggressiveNew
(
)
throws
Exception
{
final
int
historyItemsCount
=
3000
;
insertHistory
(
historyItemsCount
System
.
currentTimeMillis
(
)
)
;
historyClient
.
delete
(
expireHistoryAggressiveUri
null
null
)
;
assertRowCount
(
historyClient
historyTestUri
500
)
;
assertRowCount
(
thumbnailClient
thumbnailTestUri
15
)
;
}
Test
public
void
testHistoryExpirationNormalNew
(
)
throws
Exception
{
final
int
historyItemsCount
=
3000
;
insertHistory
(
historyItemsCount
System
.
currentTimeMillis
(
)
)
;
historyClient
.
delete
(
expireHistoryNormalUri
null
null
)
;
assertRowCount
(
historyClient
historyTestUri
3000
)
;
assertRowCount
(
thumbnailClient
thumbnailTestUri
15
)
;
}
Test
public
void
testHistoryExpirationAggressiveOld
(
)
throws
Exception
{
final
int
historyItemsCount
=
3000
;
insertHistory
(
historyItemsCount
System
.
currentTimeMillis
(
)
-
THREE_MONTHS
)
;
historyClient
.
delete
(
expireHistoryAggressiveUri
null
null
)
;
assertRowCount
(
historyClient
historyTestUri
500
)
;
assertRowCount
(
thumbnailClient
thumbnailTestUri
15
)
;
}
Test
public
void
testHistoryExpirationNormalOld
(
)
throws
Exception
{
final
int
historyItemsCount
=
3000
;
insertHistory
(
historyItemsCount
System
.
currentTimeMillis
(
)
-
THREE_MONTHS
)
;
historyClient
.
delete
(
expireHistoryNormalUri
null
null
)
;
assertRowCount
(
historyClient
historyTestUri
2000
)
;
assertRowCount
(
thumbnailClient
thumbnailTestUri
15
)
;
}
Test
public
void
testHistoryVisitAggregates
(
)
throws
Exception
{
final
long
baseDate
=
System
.
currentTimeMillis
(
)
;
final
String
url
=
"
https
:
/
/
www
.
mozilla
.
org
"
;
final
Uri
historyIncrementVisitsUri
=
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INSERT_IF_NEEDED
"
true
"
)
.
build
(
)
;
insertHistoryItem
(
url
null
baseDate
null
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
0
0
0
0
0
)
;
final
String
url2
=
"
https
:
/
/
www
.
eff
.
org
"
;
insertHistoryItem
(
url2
null
baseDate
17
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url2
}
17
0
0
0
0
)
;
final
String
url3
=
"
https
:
/
/
www
.
torproject
.
org
"
;
final
ContentValues
cv
=
new
ContentValues
(
)
;
cv
.
put
(
BrowserContract
.
History
.
URL
url3
)
;
cv
.
put
(
BrowserContract
.
History
.
VISITS
13
)
;
cv
.
put
(
BrowserContract
.
History
.
DATE_LAST_VISITED
baseDate
)
;
historyClient
.
update
(
historyIncrementVisitsUri
cv
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url3
}
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url3
}
13
13
baseDate
0
0
)
;
cv
.
clear
(
)
;
cv
.
put
(
BrowserContract
.
History
.
TITLE
"
New
title
"
)
;
historyClient
.
update
(
historyTestUri
cv
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
0
0
0
0
0
)
;
final
long
lastVisited
=
System
.
currentTimeMillis
(
)
;
cv
.
clear
(
)
;
cv
.
put
(
BrowserContract
.
History
.
DATE_LAST_VISITED
lastVisited
)
;
historyClient
.
update
(
historyIncrementVisitsUri
cv
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
1
1
lastVisited
0
0
)
;
final
long
lastVisited2
=
System
.
currentTimeMillis
(
)
;
cv
.
clear
(
)
;
cv
.
put
(
BrowserContract
.
History
.
DATE_LAST_VISITED
lastVisited2
)
;
cv
.
put
(
BrowserContract
.
History
.
VISITS
10
)
;
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
cv
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
2
2
lastVisited2
0
0
)
;
final
long
lastVisited3
=
System
.
currentTimeMillis
(
)
;
cv
.
clear
(
)
;
cv
.
put
(
BrowserContract
.
History
.
LOCAL_DATE_LAST_VISITED
lastVisited3
)
;
cv
.
put
(
BrowserContract
.
History
.
LOCAL_VISITS
19
)
;
cv
.
put
(
BrowserContract
.
History
.
REMOTE_DATE_LAST_VISITED
lastVisited3
-
100
)
;
cv
.
put
(
BrowserContract
.
History
.
REMOTE_VISITS
3
)
;
historyClient
.
update
(
historyTestUri
cv
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
2
19
lastVisited3
3
lastVisited3
-
100
)
;
cv
.
clear
(
)
;
cv
.
put
(
BrowserContract
.
History
.
REMOTE_VISITS
5
)
;
historyClient
.
update
(
historyTestUri
cv
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
2
19
lastVisited3
5
lastVisited3
-
100
)
;
final
Uri
historyIncrementRemoteAggregateUri
=
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_REMOTE_AGGREGATES
"
true
"
)
.
build
(
)
;
cv
.
clear
(
)
;
cv
.
put
(
BrowserContract
.
History
.
REMOTE_DATE_LAST_VISITED
lastVisited3
)
;
cv
.
put
(
BrowserContract
.
History
.
REMOTE_VISITS
3
)
;
historyClient
.
update
(
historyIncrementRemoteAggregateUri
cv
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
2
19
lastVisited3
8
lastVisited3
)
;
cv
.
clear
(
)
;
try
{
historyClient
.
update
(
historyIncrementRemoteAggregateUri
cv
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
)
;
assertTrue
(
"
Expected
to
throw
IllegalArgumentException
"
false
)
;
}
catch
(
IllegalArgumentException
e
)
{
assertTrue
(
true
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
2
19
lastVisited3
8
lastVisited3
)
;
}
}
private
void
assertHistoryValuesForGuidsFromSync
(
int
expectedCount
String
title
String
url
Long
remoteLastVisited
Integer
visits
)
throws
RemoteException
{
final
Cursor
c
=
historyClient
.
query
(
historyTestUri
new
String
[
]
{
BrowserContract
.
History
.
TITLE
BrowserContract
.
History
.
VISITS
BrowserContract
.
History
.
URL
BrowserContract
.
History
.
LOCAL_VISITS
BrowserContract
.
History
.
REMOTE_VISITS
BrowserContract
.
History
.
LOCAL_DATE_LAST_VISITED
BrowserContract
.
History
.
REMOTE_DATE_LAST_VISITED
BrowserContract
.
History
.
DATE_CREATED
BrowserContract
.
History
.
DATE_MODIFIED
}
null
null
BrowserContract
.
History
.
_ID
+
"
DESC
"
)
;
final
long
reasonablyRecentTimestamp
=
System
.
currentTimeMillis
(
)
-
1000L
*
60L
*
60L
*
24L
*
30L
*
3L
;
assertNotNull
(
c
)
;
assertEquals
(
expectedCount
c
.
getCount
(
)
)
;
try
{
final
int
titleCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
TITLE
)
;
final
int
urlCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
URL
)
;
final
int
visitsCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
VISITS
)
;
final
int
localVisitsCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
LOCAL_VISITS
)
;
final
int
remoteVisitsCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
REMOTE_VISITS
)
;
final
int
localDateLastVisitedCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
LOCAL_DATE_LAST_VISITED
)
;
final
int
remoteDateLastVisitedCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
REMOTE_DATE_LAST_VISITED
)
;
final
int
dateCreatedCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
DATE_CREATED
)
;
final
int
dateModifiedCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
DATE_MODIFIED
)
;
while
(
c
.
moveToNext
(
)
)
{
assertEquals
(
title
c
.
getString
(
titleCol
)
)
;
assertEquals
(
url
c
.
getString
(
urlCol
)
)
;
assertEquals
(
0
c
.
getInt
(
localVisitsCol
)
)
;
assertEquals
(
0
c
.
getLong
(
localDateLastVisitedCol
)
)
;
if
(
remoteLastVisited
=
=
null
)
{
assertEquals
(
0
c
.
getInt
(
remoteDateLastVisitedCol
)
)
;
}
else
{
assertEquals
(
remoteLastVisited
(
Long
)
c
.
getLong
(
remoteDateLastVisitedCol
)
)
;
assertEquals
(
visits
(
Integer
)
c
.
getInt
(
remoteVisitsCol
)
)
;
assertEquals
(
visits
(
Integer
)
c
.
getInt
(
visitsCol
)
)
;
}
assertFalse
(
c
.
isNull
(
dateCreatedCol
)
)
;
assertFalse
(
c
.
isNull
(
dateModifiedCol
)
)
;
final
long
createdTimestamp
=
c
.
getLong
(
dateCreatedCol
)
;
final
long
modifiedTimestamp
=
c
.
getLong
(
dateModifiedCol
)
;
assertTrue
(
createdTimestamp
+
"
must
be
greater
than
"
+
reasonablyRecentTimestamp
reasonablyRecentTimestamp
<
createdTimestamp
)
;
assertTrue
(
modifiedTimestamp
+
"
must
be
greater
than
"
+
reasonablyRecentTimestamp
reasonablyRecentTimestamp
<
c
.
getLong
(
dateModifiedCol
)
)
;
}
}
finally
{
c
.
close
(
)
;
}
}
Test
public
void
testBulkHistoryInsert
(
)
throws
Exception
{
Bundle
result
;
String
historyTestUriArg
=
historyTestUri
.
toString
(
)
;
try
{
historyClient
.
call
(
BrowserContract
.
METHOD_INSERT_HISTORY_WITH_VISITS_FROM_SYNC
historyTestUriArg
new
Bundle
(
)
)
;
fail
(
)
;
}
catch
(
IllegalArgumentException
e
)
{
}
final
Bundle
data
=
new
Bundle
(
)
;
Bundle
[
]
recordBundles
=
new
Bundle
[
0
]
;
data
.
putSerializable
(
BrowserContract
.
METHOD_PARAM_DATA
recordBundles
)
;
result
=
historyClient
.
call
(
BrowserContract
.
METHOD_INSERT_HISTORY_WITH_VISITS_FROM_SYNC
historyTestUriArg
data
)
;
assertNotNull
(
result
)
;
assertNull
(
result
.
getSerializable
(
BrowserContract
.
METHOD_RESULT
)
)
;
assertRowCount
(
historyClient
historyTestUri
0
)
;
recordBundles
=
new
Bundle
[
3
]
;
for
(
int
i
=
0
;
i
<
3
;
i
+
+
)
{
final
Bundle
bundle
=
new
Bundle
(
)
;
bundle
.
putParcelable
(
BrowserContract
.
METHOD_PARAM_OBJECT
buildHistoryCV
(
"
guid
"
+
i
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
"
10L
10L
10
)
)
;
bundle
.
putSerializable
(
BrowserContract
.
History
.
VISITS
buildHistoryVisitsCVs
(
10
"
guid
"
+
i
1L
3
false
)
)
;
recordBundles
[
i
]
=
bundle
;
}
data
.
putSerializable
(
BrowserContract
.
METHOD_PARAM_DATA
recordBundles
)
;
result
=
historyClient
.
call
(
BrowserContract
.
METHOD_INSERT_HISTORY_WITH_VISITS_FROM_SYNC
historyTestUriArg
data
)
;
assertNotNull
(
result
)
;
assertNull
(
result
.
getSerializable
(
BrowserContract
.
METHOD_RESULT
)
)
;
assertRowCount
(
historyClient
historyTestUri
3
)
;
assertRowCount
(
visitsClient
visitsTestUri
30
)
;
assertHistoryValuesForGuidsFromSync
(
3
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
"
10L
10
)
;
recordBundles
=
new
Bundle
[
3
]
;
final
Bundle
bundle
=
new
Bundle
(
)
;
bundle
.
putParcelable
(
BrowserContract
.
METHOD_PARAM_OBJECT
buildHistoryCV
(
"
guid4
"
null
"
https
:
/
/
www
.
mozilla
.
org
/
1
"
null
null
null
)
)
;
bundle
.
putSerializable
(
BrowserContract
.
History
.
VISITS
new
ContentValues
[
0
]
)
;
recordBundles
[
0
]
=
bundle
;
final
Bundle
bundle2
=
new
Bundle
(
)
;
bundle2
.
putParcelable
(
BrowserContract
.
METHOD_PARAM_OBJECT
buildHistoryCV
(
"
guid5
"
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
2
"
null
null
null
)
)
;
bundle2
.
putSerializable
(
BrowserContract
.
History
.
VISITS
new
ContentValues
[
0
]
)
;
recordBundles
[
1
]
=
bundle2
;
final
Bundle
bundle3
=
new
Bundle
(
)
;
bundle3
.
putParcelable
(
BrowserContract
.
METHOD_PARAM_OBJECT
buildHistoryCV
(
"
guid6
"
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
3
"
5L
5L
5
)
)
;
bundle3
.
putSerializable
(
BrowserContract
.
History
.
VISITS
buildHistoryVisitsCVs
(
5
"
guid6
"
1L
2
false
)
)
;
recordBundles
[
2
]
=
bundle3
;
data
.
putSerializable
(
BrowserContract
.
METHOD_PARAM_DATA
recordBundles
)
;
result
=
historyClient
.
call
(
BrowserContract
.
METHOD_INSERT_HISTORY_WITH_VISITS_FROM_SYNC
historyTestUriArg
data
)
;
assertNotNull
(
result
)
;
assertNull
(
result
.
getSerializable
(
BrowserContract
.
METHOD_RESULT
)
)
;
assertRowCount
(
historyClient
historyTestUri
6
)
;
assertRowCount
(
visitsClient
visitsTestUri
35
)
;
assertHistoryAggregates
(
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
/
3
"
}
5
0
0
5
5
)
;
}
Test
public
void
testBulkHistoryInsertWithoutVisits
(
)
throws
Exception
{
final
Bundle
data
=
new
Bundle
(
)
;
final
int
insertedRecordCount
=
10
;
Bundle
[
]
recordBundles
=
new
Bundle
[
insertedRecordCount
]
;
for
(
int
i
=
0
;
i
<
insertedRecordCount
;
i
+
+
)
{
final
Bundle
bundle
=
new
Bundle
(
)
;
bundle
.
putParcelable
(
BrowserContract
.
METHOD_PARAM_OBJECT
buildHistoryCV
(
"
guid
"
+
i
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
"
null
null
null
)
)
;
bundle
.
putSerializable
(
BrowserContract
.
History
.
VISITS
new
ContentValues
[
0
]
)
;
recordBundles
[
i
]
=
bundle
;
}
data
.
putSerializable
(
BrowserContract
.
METHOD_PARAM_DATA
recordBundles
)
;
Bundle
result
=
historyClient
.
call
(
BrowserContract
.
METHOD_INSERT_HISTORY_WITH_VISITS_FROM_SYNC
historyTestUri
.
toString
(
)
data
)
;
assertNotNull
(
result
)
;
assertNull
(
result
.
getSerializable
(
BrowserContract
.
METHOD_RESULT
)
)
;
assertRowCount
(
historyClient
historyTestUri
insertedRecordCount
)
;
assertRowCount
(
visitsClient
visitsTestUri
0
)
;
assertHistoryValuesForGuidsFromSync
(
insertedRecordCount
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
"
null
null
)
;
}
Test
public
void
testBullkHistoryInsertThenNormalExpire
(
)
throws
Exception
{
final
Bundle
data
=
new
Bundle
(
)
;
final
int
insertedRecordCount
=
3000
;
Bundle
[
]
recordBundles
=
new
Bundle
[
insertedRecordCount
]
;
for
(
int
i
=
0
;
i
<
insertedRecordCount
;
i
+
+
)
{
final
Bundle
bundle
=
new
Bundle
(
)
;
bundle
.
putParcelable
(
BrowserContract
.
METHOD_PARAM_OBJECT
buildHistoryCV
(
"
guid
"
+
i
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
"
10L
10L
10
)
)
;
bundle
.
putSerializable
(
BrowserContract
.
History
.
VISITS
buildHistoryVisitsCVs
(
10
"
guid
"
+
i
1L
3
false
)
)
;
recordBundles
[
i
]
=
bundle
;
}
data
.
putSerializable
(
BrowserContract
.
METHOD_PARAM_DATA
recordBundles
)
;
Bundle
result
=
historyClient
.
call
(
BrowserContract
.
METHOD_INSERT_HISTORY_WITH_VISITS_FROM_SYNC
historyTestUri
.
toString
(
)
data
)
;
assertNotNull
(
result
)
;
assertNull
(
result
.
getSerializable
(
BrowserContract
.
METHOD_RESULT
)
)
;
assertRowCount
(
historyClient
historyTestUri
insertedRecordCount
)
;
assertRowCount
(
visitsClient
visitsTestUri
insertedRecordCount
*
10
)
;
assertHistoryValuesForGuidsFromSync
(
insertedRecordCount
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
"
10L
10
)
;
long
twoMonthsAgo
=
System
.
currentTimeMillis
(
)
-
1000L
*
60
*
60
*
12
*
60
;
ContentValues
cv
=
new
ContentValues
(
)
;
cv
.
put
(
BrowserContract
.
History
.
DATE_CREATED
twoMonthsAgo
)
;
cv
.
put
(
BrowserContract
.
History
.
DATE_MODIFIED
twoMonthsAgo
)
;
assertEquals
(
insertedRecordCount
historyClient
.
update
(
historyTestUri
cv
null
null
)
)
;
historyClient
.
delete
(
expireHistoryNormalUri
null
null
)
;
assertHistoryValuesForGuidsFromSync
(
2000
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
"
10L
10
)
;
assertRowCount
(
visitsClient
visitsTestUri
2000
*
10
)
;
}
Test
public
void
testBullkHistoryInsertThenAggressiveExpire
(
)
throws
Exception
{
final
Bundle
data
=
new
Bundle
(
)
;
final
int
insertedRecordCount
=
1000
;
Bundle
[
]
recordBundles
=
new
Bundle
[
insertedRecordCount
]
;
for
(
int
i
=
0
;
i
<
insertedRecordCount
;
i
+
+
)
{
final
Bundle
bundle
=
new
Bundle
(
)
;
bundle
.
putParcelable
(
BrowserContract
.
METHOD_PARAM_OBJECT
buildHistoryCV
(
"
guid
"
+
i
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
"
10L
10L
10
)
)
;
bundle
.
putSerializable
(
BrowserContract
.
History
.
VISITS
buildHistoryVisitsCVs
(
10
"
guid
"
+
i
1L
3
false
)
)
;
recordBundles
[
i
]
=
bundle
;
}
data
.
putSerializable
(
BrowserContract
.
METHOD_PARAM_DATA
recordBundles
)
;
Bundle
result
=
historyClient
.
call
(
BrowserContract
.
METHOD_INSERT_HISTORY_WITH_VISITS_FROM_SYNC
historyTestUri
.
toString
(
)
data
)
;
assertNotNull
(
result
)
;
assertNull
(
result
.
getSerializable
(
BrowserContract
.
METHOD_RESULT
)
)
;
assertRowCount
(
historyClient
historyTestUri
insertedRecordCount
)
;
assertRowCount
(
visitsClient
visitsTestUri
insertedRecordCount
*
10
)
;
assertHistoryValuesForGuidsFromSync
(
insertedRecordCount
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
"
10L
10
)
;
historyClient
.
delete
(
expireHistoryAggressiveUri
null
null
)
;
assertHistoryValuesForGuidsFromSync
(
500
"
Test
"
"
https
:
/
/
www
.
mozilla
.
org
/
"
10L
10
)
;
assertRowCount
(
visitsClient
visitsTestUri
500
*
10
)
;
}
private
ContentValues
[
]
buildHistoryVisitsCVs
(
int
numberOfVisits
String
guid
long
baseDate
int
visitType
boolean
isLocal
)
{
final
ContentValues
[
]
visits
=
new
ContentValues
[
numberOfVisits
]
;
for
(
int
i
=
0
;
i
<
numberOfVisits
;
i
+
+
)
{
final
ContentValues
visit
=
new
ContentValues
(
)
;
visit
.
put
(
BrowserContract
.
Visits
.
HISTORY_GUID
guid
)
;
visit
.
put
(
BrowserContract
.
Visits
.
DATE_VISITED
baseDate
+
i
)
;
visit
.
put
(
BrowserContract
.
Visits
.
VISIT_TYPE
visitType
)
;
visit
.
put
(
BrowserContract
.
Visits
.
IS_LOCAL
isLocal
?
BrowserContract
.
Visits
.
VISIT_IS_LOCAL
:
BrowserContract
.
Visits
.
VISIT_IS_REMOTE
)
;
visits
[
i
]
=
visit
;
}
return
visits
;
}
private
ContentValues
buildHistoryCV
(
String
guid
String
title
String
url
Long
lastVisited
Long
remoteLastVisited
Integer
visits
)
{
ContentValues
cv
=
new
ContentValues
(
)
;
cv
.
put
(
BrowserContract
.
History
.
GUID
guid
)
;
if
(
title
!
=
null
)
{
cv
.
put
(
BrowserContract
.
History
.
TITLE
title
)
;
}
cv
.
put
(
BrowserContract
.
History
.
URL
url
)
;
if
(
lastVisited
!
=
null
)
{
cv
.
put
(
BrowserContract
.
History
.
DATE_LAST_VISITED
lastVisited
)
;
}
if
(
remoteLastVisited
!
=
null
)
{
cv
.
put
(
BrowserContract
.
History
.
REMOTE_DATE_LAST_VISITED
remoteLastVisited
)
;
}
if
(
visits
!
=
null
)
{
cv
.
put
(
BrowserContract
.
History
.
VISITS
visits
)
;
cv
.
put
(
BrowserContract
.
History
.
REMOTE_VISITS
visits
)
;
}
return
cv
;
}
private
void
assertHistoryAggregates
(
String
selection
String
[
]
selectionArg
int
visits
int
localVisits
long
localLastVisited
int
remoteVisits
long
remoteLastVisited
)
throws
Exception
{
final
Cursor
c
=
historyClient
.
query
(
historyTestUri
new
String
[
]
{
BrowserContract
.
History
.
VISITS
BrowserContract
.
History
.
LOCAL_VISITS
BrowserContract
.
History
.
REMOTE_VISITS
BrowserContract
.
History
.
LOCAL_DATE_LAST_VISITED
BrowserContract
.
History
.
REMOTE_DATE_LAST_VISITED
}
selection
selectionArg
null
)
;
assertNotNull
(
c
)
;
try
{
assertTrue
(
c
.
moveToFirst
(
)
)
;
final
int
visitsCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
VISITS
)
;
final
int
localVisitsCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
LOCAL_VISITS
)
;
final
int
remoteVisitsCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
REMOTE_VISITS
)
;
final
int
localDateLastVisitedCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
LOCAL_DATE_LAST_VISITED
)
;
final
int
remoteDateLastVisitedCol
=
c
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
REMOTE_DATE_LAST_VISITED
)
;
assertEquals
(
visits
c
.
getInt
(
visitsCol
)
)
;
assertEquals
(
localVisits
c
.
getInt
(
localVisitsCol
)
)
;
assertEquals
(
localLastVisited
c
.
getLong
(
localDateLastVisitedCol
)
)
;
assertEquals
(
remoteVisits
c
.
getInt
(
remoteVisitsCol
)
)
;
assertEquals
(
remoteLastVisited
c
.
getLong
(
remoteDateLastVisitedCol
)
)
;
}
finally
{
c
.
close
(
)
;
}
}
private
void
insertHistory
(
int
count
long
baseTime
)
throws
RemoteException
{
Uri
incrementUri
=
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
;
for
(
int
i
=
0
;
i
<
count
;
i
+
+
)
{
final
String
url
=
"
https
:
/
/
www
.
mozilla
"
+
i
+
"
.
org
"
;
insertHistoryItem
(
url
"
testGUID
"
+
i
baseTime
-
i
null
)
;
if
(
i
%
3
=
=
0
)
{
assertEquals
(
1
historyClient
.
update
(
incrementUri
new
ContentValues
(
)
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
)
)
;
}
ContentValues
cv
=
new
ContentValues
(
)
;
cv
.
put
(
BrowserContract
.
History
.
DATE_CREATED
baseTime
-
i
)
;
cv
.
put
(
BrowserContract
.
History
.
DATE_MODIFIED
baseTime
-
i
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
cv
BrowserContract
.
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
"
+
i
+
"
.
org
"
}
)
)
;
}
ContentValues
[
]
thumbs
=
new
ContentValues
[
count
]
;
for
(
int
i
=
0
;
i
<
count
;
i
+
+
)
{
thumbs
[
i
]
=
new
ContentValues
(
)
;
thumbs
[
i
]
.
put
(
BrowserContract
.
Thumbnails
.
DATA
i
)
;
thumbs
[
i
]
.
put
(
BrowserContract
.
Thumbnails
.
URL
"
https
:
/
/
www
.
mozilla
"
+
i
+
"
.
org
"
)
;
}
assertEquals
(
count
thumbnailClient
.
bulkInsert
(
thumbnailTestUri
thumbs
)
)
;
}
private
void
assertRowCount
(
final
ContentProviderClient
client
final
Uri
uri
final
int
count
)
throws
RemoteException
{
final
Cursor
c
=
client
.
query
(
uri
null
null
null
null
)
;
assertNotNull
(
c
)
;
try
{
assertEquals
(
count
c
.
getCount
(
)
)
;
}
finally
{
c
.
close
(
)
;
}
}
}
