package
org
.
mozilla
.
gecko
.
db
;
import
android
.
content
.
ContentValues
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
.
History
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
static
org
.
junit
.
Assert
.
*
;
RunWith
(
RobolectricTestRunner
.
class
)
public
class
BrowserProviderHistoryVisitsTest
extends
BrowserProviderHistoryVisitsTestBase
{
Test
public
void
testUpdateNoVisit
(
)
throws
Exception
{
insertHistoryItem
(
"
https
:
/
/
www
.
mozilla
.
org
"
"
testGUID
"
)
;
Cursor
cursor
=
visitsClient
.
query
(
visitsTestUri
null
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
0
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
ContentValues
historyUpdate
=
new
ContentValues
(
)
;
historyUpdate
.
put
(
History
.
TITLE
"
Mozilla
!
"
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
historyUpdate
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
cursor
=
visitsClient
.
query
(
visitsTestUri
null
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
0
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
ContentValues
historyToInsert
=
new
ContentValues
(
)
;
historyToInsert
.
put
(
History
.
URL
"
https
:
/
/
www
.
eff
.
org
"
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INSERT_IF_NEEDED
"
true
"
)
.
build
(
)
historyToInsert
null
null
)
)
;
cursor
=
visitsClient
.
query
(
visitsTestUri
null
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
0
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
}
Test
public
void
testUpdateMultipleHistoryIncrementVisit
(
)
throws
Exception
{
insertHistoryItem
(
"
https
:
/
/
www
.
mozilla
.
org
"
"
testGUID
"
)
;
insertHistoryItem
(
"
https
:
/
/
www
.
mozilla
.
org
"
"
testGUID2
"
)
;
assertEquals
(
2
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
new
ContentValues
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
Cursor
cursor
=
visitsClient
.
query
(
visitsTestUri
new
String
[
]
{
BrowserContract
.
Visits
.
HISTORY_GUID
}
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
2
cursor
.
getCount
(
)
)
;
assertTrue
(
cursor
.
moveToFirst
(
)
)
;
String
guid1
=
cursor
.
getString
(
cursor
.
getColumnIndex
(
BrowserContract
.
Visits
.
HISTORY_GUID
)
)
;
cursor
.
moveToNext
(
)
;
String
guid2
=
cursor
.
getString
(
cursor
.
getColumnIndex
(
BrowserContract
.
Visits
.
HISTORY_GUID
)
)
;
cursor
.
close
(
)
;
assertNotEquals
(
guid1
guid2
)
;
assertTrue
(
guid1
.
equals
(
"
testGUID
"
)
|
|
guid1
.
equals
(
"
testGUID2
"
)
)
;
}
Test
public
void
testUpdateHistoryIncrementVisit
(
)
throws
Exception
{
insertHistoryItem
(
"
https
:
/
/
www
.
mozilla
.
org
"
"
testGUID
"
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
new
ContentValues
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
Cursor
cursor
=
visitsClient
.
query
(
visitsTestUri
new
String
[
]
{
BrowserContract
.
Visits
.
HISTORY_GUID
}
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
1
cursor
.
getCount
(
)
)
;
assertTrue
(
cursor
.
moveToFirst
(
)
)
;
assertEquals
(
"
testGUID
"
cursor
.
getString
(
cursor
.
getColumnIndex
(
BrowserContract
.
Visits
.
HISTORY_GUID
)
)
)
;
cursor
.
close
(
)
;
ContentValues
historyItem
=
new
ContentValues
(
)
;
historyItem
.
put
(
History
.
URL
"
https
:
/
/
www
.
eff
.
org
"
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INSERT_IF_NEEDED
"
true
"
)
.
build
(
)
historyItem
null
null
)
)
;
cursor
=
historyClient
.
query
(
historyTestUri
new
String
[
]
{
History
.
GUID
}
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
eff
.
org
"
}
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
1
cursor
.
getCount
(
)
)
;
assertTrue
(
cursor
.
moveToFirst
(
)
)
;
String
insertedGUID
=
cursor
.
getString
(
cursor
.
getColumnIndex
(
History
.
GUID
)
)
;
cursor
.
close
(
)
;
cursor
=
visitsClient
.
query
(
visitsTestUri
new
String
[
]
{
BrowserContract
.
Visits
.
HISTORY_GUID
}
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
2
cursor
.
getCount
(
)
)
;
assertTrue
(
cursor
.
moveToFirst
(
)
)
;
assertEquals
(
insertedGUID
cursor
.
getString
(
cursor
.
getColumnIndex
(
BrowserContract
.
Visits
.
HISTORY_GUID
)
)
)
;
cursor
.
close
(
)
;
}
Test
public
void
testTimestampConversionOnInsertion
(
)
throws
Exception
{
insertHistoryItem
(
"
https
:
/
/
www
.
mozilla
.
org
"
"
testGUID
"
)
;
Long
lastVisited
=
System
.
currentTimeMillis
(
)
;
ContentValues
updatedVisitedTime
=
new
ContentValues
(
)
;
updatedVisitedTime
.
put
(
History
.
DATE_LAST_VISITED
lastVisited
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
updatedVisitedTime
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
Cursor
cursor
=
visitsClient
.
query
(
visitsTestUri
new
String
[
]
{
BrowserContract
.
Visits
.
DATE_VISITED
}
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
1
cursor
.
getCount
(
)
)
;
assertTrue
(
cursor
.
moveToFirst
(
)
)
;
assertEquals
(
lastVisited
*
1000
cursor
.
getLong
(
cursor
.
getColumnIndex
(
BrowserContract
.
Visits
.
DATE_VISITED
)
)
)
;
cursor
.
close
(
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
new
ContentValues
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
cursor
=
visitsClient
.
query
(
visitsTestUri
new
String
[
]
{
BrowserContract
.
Visits
.
DATE_VISITED
}
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
2
cursor
.
getCount
(
)
)
;
assertTrue
(
cursor
.
moveToFirst
(
)
)
;
assertTrue
(
lastVisited
*
1000
<
cursor
.
getLong
(
cursor
.
getColumnIndex
(
BrowserContract
.
Visits
.
DATE_VISITED
)
)
)
;
cursor
.
close
(
)
;
}
Test
public
void
testDeletingLotsOfHistory
(
)
throws
Exception
{
Uri
incrementUri
=
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
;
for
(
int
i
=
0
;
i
<
2100
;
i
+
+
)
{
final
String
url
=
"
https
:
/
/
www
.
mozilla
"
+
i
+
"
.
org
"
;
insertHistoryItem
(
url
"
testGUID
"
+
i
)
;
assertEquals
(
1
historyClient
.
update
(
incrementUri
new
ContentValues
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
url
}
)
)
;
}
Cursor
cursor
=
visitsClient
.
query
(
visitsTestUri
null
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
2100
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
assertEquals
(
2100
historyClient
.
delete
(
historyTestUri
null
null
)
)
;
cursor
=
visitsClient
.
query
(
visitsTestUri
null
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
0
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
}
Test
public
void
testDeletingHistory
(
)
throws
Exception
{
insertHistoryItem
(
"
https
:
/
/
www
.
mozilla
.
org
"
"
testGUID
"
)
;
insertHistoryItem
(
"
https
:
/
/
www
.
eff
.
org
"
"
testGUID2
"
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
new
ContentValues
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
new
ContentValues
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
new
ContentValues
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
eff
.
org
"
}
)
)
;
Cursor
cursor
=
visitsClient
.
query
(
visitsTestUri
null
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
3
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
assertEquals
(
1
historyClient
.
delete
(
historyTestUri
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
cursor
=
visitsClient
.
query
(
visitsTestUri
null
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
1
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
ContentValues
moz
=
new
ContentValues
(
)
;
moz
.
put
(
History
.
URL
"
https
:
/
/
www
.
mozilla
.
org
"
)
;
moz
.
put
(
History
.
GUID
"
testGUID3
"
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INSERT_IF_NEEDED
"
true
"
)
.
build
(
)
moz
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INSERT_IF_NEEDED
"
true
"
)
.
build
(
)
new
ContentValues
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
eff
.
org
"
}
)
)
;
assertEquals
(
1
historyClient
.
delete
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_IS_SYNC
"
true
"
)
.
build
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
eff
.
org
"
}
)
)
;
cursor
=
visitsClient
.
query
(
visitsTestUri
new
String
[
]
{
BrowserContract
.
Visits
.
HISTORY_GUID
}
null
null
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
1
cursor
.
getCount
(
)
)
;
assertTrue
(
cursor
.
moveToFirst
(
)
)
;
assertEquals
(
"
testGUID3
"
cursor
.
getString
(
cursor
.
getColumnIndex
(
BrowserContract
.
Visits
.
HISTORY_GUID
)
)
)
;
cursor
.
close
(
)
;
}
Test
public
void
testHistoryGUIDUpdate
(
)
throws
Exception
{
insertHistoryItem
(
"
https
:
/
/
www
.
mozilla
.
org
"
"
testGUID
"
)
;
insertHistoryItem
(
"
https
:
/
/
www
.
eff
.
org
"
"
testGUID2
"
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
new
ContentValues
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INCREMENT_VISITS
"
true
"
)
.
build
(
)
new
ContentValues
(
)
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
ContentValues
newGuid
=
new
ContentValues
(
)
;
newGuid
.
put
(
History
.
GUID
"
testGUIDNew
"
)
;
assertEquals
(
1
historyClient
.
update
(
historyTestUri
newGuid
History
.
URL
+
"
=
?
"
new
String
[
]
{
"
https
:
/
/
www
.
mozilla
.
org
"
}
)
)
;
Cursor
cursor
=
visitsClient
.
query
(
visitsTestUri
null
BrowserContract
.
Visits
.
HISTORY_GUID
+
"
=
?
"
new
String
[
]
{
"
testGUIDNew
"
}
null
)
;
assertNotNull
(
cursor
)
;
assertEquals
(
2
cursor
.
getCount
(
)
)
;
cursor
.
close
(
)
;
}
}
