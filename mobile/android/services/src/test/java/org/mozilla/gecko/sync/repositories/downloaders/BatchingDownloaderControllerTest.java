package
org
.
mozilla
.
gecko
.
sync
.
repositories
.
downloaders
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
gecko
.
sync
.
InfoCollections
;
import
org
.
mozilla
.
gecko
.
sync
.
InfoConfiguration
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
Server15RepositorySession
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
static
org
.
junit
.
Assert
.
*
;
RunWith
(
RobolectricTestRunner
.
class
)
public
class
BatchingDownloaderControllerTest
{
private
BatchingDownloaderTest
.
MockSever15Repository
serverRepository
;
private
Server15RepositorySession
repositorySession
;
private
BatchingDownloaderTest
.
MockSessionFetchRecordsDelegate
sessionFetchRecordsDelegate
;
private
BatchingDownloaderTest
.
MockDownloader
mockDownloader
;
private
BatchingDownloaderTest
.
CountingShadowRepositoryState
repositoryStateProvider
;
Before
public
void
setUp
(
)
throws
Exception
{
sessionFetchRecordsDelegate
=
new
BatchingDownloaderTest
.
MockSessionFetchRecordsDelegate
(
)
;
serverRepository
=
new
BatchingDownloaderTest
.
MockSever15Repository
(
"
dummyCollection
"
"
http
:
/
/
dummy
.
url
/
"
null
new
InfoCollections
(
)
new
InfoConfiguration
(
)
)
;
repositorySession
=
new
Server15RepositorySession
(
serverRepository
)
;
repositoryStateProvider
=
new
BatchingDownloaderTest
.
CountingShadowRepositoryState
(
)
;
mockDownloader
=
new
BatchingDownloaderTest
.
MockDownloader
(
repositorySession
true
true
repositoryStateProvider
)
;
}
Test
public
void
resumeFetchSinceIfPossible
(
)
throws
Exception
{
assertTrue
(
BatchingDownloaderController
.
setInitialResumeContextAndCommit
(
repositoryStateProvider
"
offset1
"
2L
"
oldest
"
)
)
;
BatchingDownloaderController
.
resumeFetchSinceIfPossible
(
mockDownloader
repositoryStateProvider
sessionFetchRecordsDelegate
3L
25L
"
oldest
"
)
;
assertEquals
(
"
offset1
"
mockDownloader
.
offset
)
;
assertEquals
(
2L
mockDownloader
.
newer
)
;
assertEquals
(
"
oldest
"
mockDownloader
.
sort
)
;
assertTrue
(
BatchingDownloaderController
.
updateResumeContextAndCommit
(
repositoryStateProvider
"
offset2
"
)
)
;
BatchingDownloaderController
.
resumeFetchSinceIfPossible
(
mockDownloader
repositoryStateProvider
sessionFetchRecordsDelegate
1L
25L
"
newest
"
)
;
assertEquals
(
null
mockDownloader
.
offset
)
;
assertEquals
(
1L
mockDownloader
.
newer
)
;
assertEquals
(
"
newest
"
mockDownloader
.
sort
)
;
assertTrue
(
BatchingDownloaderController
.
updateResumeContextAndCommit
(
repositoryStateProvider
"
offset3
"
)
)
;
BatchingDownloaderController
.
resumeFetchSinceIfPossible
(
mockDownloader
repositoryStateProvider
sessionFetchRecordsDelegate
3L
50L
"
oldest
"
)
;
assertEquals
(
"
offset3
"
mockDownloader
.
offset
)
;
assertEquals
(
"
oldest
"
mockDownloader
.
sort
)
;
assertEquals
(
2L
mockDownloader
.
newer
)
;
}
Test
public
void
testInitialSetAndUpdateOfContext
(
)
throws
Exception
{
assertFalse
(
BatchingDownloaderController
.
isResumeContextSet
(
repositoryStateProvider
)
)
;
try
{
assertFalse
(
BatchingDownloaderController
.
updateResumeContextAndCommit
(
repositoryStateProvider
"
offset2
"
)
)
;
fail
(
)
;
}
catch
(
IllegalStateException
e
)
{
}
assertTrue
(
BatchingDownloaderController
.
setInitialResumeContextAndCommit
(
repositoryStateProvider
"
offset1
"
1L
"
newest
"
)
)
;
assertTrue
(
BatchingDownloaderController
.
isResumeContextSet
(
repositoryStateProvider
)
)
;
try
{
assertFalse
(
BatchingDownloaderController
.
setInitialResumeContextAndCommit
(
repositoryStateProvider
"
offset1
"
1L
"
newest
"
)
)
;
fail
(
)
;
}
catch
(
IllegalStateException
e
)
{
}
assertTrue
(
BatchingDownloaderController
.
updateResumeContextAndCommit
(
repositoryStateProvider
"
offset2
"
)
)
;
}
}
