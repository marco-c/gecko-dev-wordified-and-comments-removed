package
org
.
mozilla
.
gecko
.
fxa
.
devices
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mockito
.
Mock
;
import
org
.
mockito
.
MockitoAnnotations
;
import
org
.
mozilla
.
gecko
.
background
.
testhelpers
.
TestRunner
;
import
org
.
mozilla
.
gecko
.
fxa
.
authenticator
.
AndroidFxAccount
;
import
static
org
.
junit
.
Assert
.
assertFalse
;
import
static
org
.
junit
.
Assert
.
assertTrue
;
import
static
org
.
mockito
.
Mockito
.
when
;
RunWith
(
TestRunner
.
class
)
public
class
TestFxAccountDeviceRegistrator
{
Mock
AndroidFxAccount
fxAccount
;
Before
public
void
init
(
)
{
MockitoAnnotations
.
initMocks
(
this
)
;
}
Test
public
void
shouldRegister
(
)
{
when
(
fxAccount
.
getDevicePushRegistrationError
(
)
)
.
thenReturn
(
0L
)
;
when
(
fxAccount
.
getDevicePushRegistrationErrorTime
(
)
)
.
thenReturn
(
0L
)
;
when
(
fxAccount
.
getDeviceRegistrationVersion
(
)
)
.
thenReturn
(
FxAccountDeviceRegistrator
.
DEVICE_REGISTRATION_VERSION
)
;
when
(
fxAccount
.
getDeviceId
(
)
)
.
thenReturn
(
"
bogusdeviceid
"
)
;
assertFalse
(
FxAccountDeviceRegistrator
.
shouldRegister
(
fxAccount
)
)
;
when
(
fxAccount
.
getDeviceRegistrationVersion
(
)
)
.
thenReturn
(
FxAccountDeviceRegistrator
.
DEVICE_REGISTRATION_VERSION
)
;
when
(
fxAccount
.
getDeviceId
(
)
)
.
thenReturn
(
null
)
;
assertTrue
(
FxAccountDeviceRegistrator
.
shouldRegister
(
fxAccount
)
)
;
when
(
fxAccount
.
getDeviceRegistrationVersion
(
)
)
.
thenReturn
(
0
)
;
when
(
fxAccount
.
getDeviceId
(
)
)
.
thenReturn
(
"
bogusid
"
)
;
assertTrue
(
FxAccountDeviceRegistrator
.
shouldRegister
(
fxAccount
)
)
;
when
(
fxAccount
.
getDeviceRegistrationVersion
(
)
)
.
thenReturn
(
FxAccountDeviceRegistrator
.
DEVICE_REGISTRATION_VERSION
-
1
)
;
assertTrue
(
FxAccountDeviceRegistrator
.
shouldRegister
(
fxAccount
)
)
;
when
(
fxAccount
.
getDeviceRegistrationVersion
(
)
)
.
thenReturn
(
FxAccountDeviceRegistrator
.
DEVICE_REGISTRATION_VERSION
)
;
when
(
fxAccount
.
getDevicePushRegistrationError
(
)
)
.
thenReturn
(
FxAccountDeviceRegistrator
.
ERROR_GCM_DISABLED
)
;
when
(
fxAccount
.
getDevicePushRegistrationErrorTime
(
)
)
.
thenReturn
(
System
.
currentTimeMillis
(
)
-
FxAccountDeviceRegistrator
.
RETRY_TIME_AFTER_GCM_DISABLED_ERROR
-
1
)
;
assertTrue
(
FxAccountDeviceRegistrator
.
shouldRegister
(
fxAccount
)
)
;
when
(
fxAccount
.
getDevicePushRegistrationErrorTime
(
)
)
.
thenReturn
(
System
.
currentTimeMillis
(
)
)
;
assertFalse
(
FxAccountDeviceRegistrator
.
shouldRegister
(
fxAccount
)
)
;
when
(
fxAccount
.
getDevicePushRegistrationError
(
)
)
.
thenReturn
(
12345L
)
;
assertFalse
(
FxAccountDeviceRegistrator
.
shouldRegister
(
fxAccount
)
)
;
}
Test
public
void
shouldRenewRegistration
(
)
{
when
(
fxAccount
.
getDeviceRegistrationTimestamp
(
)
)
.
thenReturn
(
System
.
currentTimeMillis
(
)
-
FxAccountDeviceRegistrator
.
TIME_BETWEEN_CHANNEL_REGISTRATION_IN_MILLIS
-
1
*
24
*
60
*
60
*
1000L
)
;
when
(
fxAccount
.
getDeviceRegistrationTimestamp
(
)
)
.
thenReturn
(
System
.
currentTimeMillis
(
)
-
1
*
24
*
60
*
60
*
1000L
)
;
}
}
