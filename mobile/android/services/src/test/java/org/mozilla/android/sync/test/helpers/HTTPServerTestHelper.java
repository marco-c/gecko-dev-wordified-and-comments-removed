package
org
.
mozilla
.
android
.
sync
.
test
.
helpers
;
import
org
.
mozilla
.
gecko
.
background
.
common
.
log
.
Logger
;
import
org
.
mozilla
.
gecko
.
sync
.
net
.
BaseResource
;
import
org
.
mozilla
.
gecko
.
sync
.
net
.
BaseResourceDelegate
;
import
org
.
simpleframework
.
http
.
core
.
ContainerSocketProcessor
;
import
org
.
simpleframework
.
transport
.
connect
.
Connection
;
import
org
.
simpleframework
.
transport
.
connect
.
SocketConnection
;
import
java
.
io
.
IOException
;
import
java
.
net
.
InetSocketAddress
;
import
java
.
net
.
SocketAddress
;
import
java
.
util
.
IdentityHashMap
;
import
java
.
util
.
Map
;
import
static
org
.
junit
.
Assert
.
fail
;
public
class
HTTPServerTestHelper
{
private
static
final
String
LOG_TAG
=
"
HTTPServerTestHelper
"
;
public
static
Integer
testPort
=
null
;
public
static
final
String
LOCAL_HTTP_PORT_PROPERTY
=
"
android
.
sync
.
local
.
http
.
port
"
;
public
static
final
int
LOCAL_HTTP_PORT_DEFAULT
=
15125
;
public
final
int
port
;
public
Connection
connection
;
public
MockServer
server
;
public
HTTPServerTestHelper
(
)
{
this
.
port
=
getTestPort
(
)
;
}
protected
HTTPServerTestHelper
(
int
port
)
{
this
.
port
=
port
;
}
protected
synchronized
static
void
ensureTestPort
(
)
{
if
(
testPort
!
=
null
)
{
return
;
}
String
value
=
System
.
getProperty
(
LOCAL_HTTP_PORT_PROPERTY
)
;
if
(
value
!
=
null
)
{
try
{
testPort
=
Integer
.
valueOf
(
value
)
;
}
catch
(
NumberFormatException
e
)
{
Logger
.
warn
(
LOG_TAG
"
Got
exception
parsing
local
test
port
;
ignoring
.
"
e
)
;
}
}
if
(
testPort
=
=
null
)
{
testPort
=
Integer
.
valueOf
(
LOCAL_HTTP_PORT_DEFAULT
)
;
}
}
public
synchronized
static
int
getTestPort
(
)
{
if
(
testPort
=
=
null
)
{
ensureTestPort
(
)
;
}
return
testPort
.
intValue
(
)
;
}
public
static
class
HTTPServerStartedError
extends
Error
{
private
static
final
long
serialVersionUID
=
-
6778447718799087274L
;
public
final
HTTPServerTestHelper
httpServer
;
public
HTTPServerStartedError
(
HTTPServerTestHelper
httpServer
)
{
this
.
httpServer
=
httpServer
;
}
}
public
static
class
HTTPServerAlreadyRunningError
extends
Error
{
private
static
final
long
serialVersionUID
=
-
6778447718799087275L
;
public
HTTPServerAlreadyRunningError
(
Throwable
e
)
{
super
(
e
)
;
}
}
protected
static
Map
<
Connection
HTTPServerStartedError
>
runningServers
=
new
IdentityHashMap
<
Connection
HTTPServerStartedError
>
(
)
;
protected
synchronized
static
void
throwIfServerAlreadyRunning
(
)
{
for
(
HTTPServerStartedError
value
:
runningServers
.
values
(
)
)
{
throw
new
HTTPServerAlreadyRunningError
(
value
)
;
}
}
protected
synchronized
static
void
registerServerAsRunning
(
HTTPServerTestHelper
httpServer
)
{
if
(
httpServer
=
=
null
|
|
httpServer
.
connection
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
HTTPServerTestHelper
or
connection
was
null
;
perhaps
server
has
not
been
started
?
"
)
;
}
HTTPServerStartedError
old
=
runningServers
.
put
(
httpServer
.
connection
new
HTTPServerStartedError
(
httpServer
)
)
;
if
(
old
!
=
null
)
{
throw
old
;
}
}
protected
synchronized
static
void
unregisterServerAsRunning
(
HTTPServerTestHelper
httpServer
)
{
if
(
httpServer
=
=
null
|
|
httpServer
.
connection
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
HTTPServerTestHelper
or
connection
was
null
;
perhaps
server
has
not
been
started
?
"
)
;
}
runningServers
.
remove
(
httpServer
.
connection
)
;
}
public
MockServer
startHTTPServer
(
MockServer
server
boolean
allowMultipleServers
)
{
BaseResource
.
rewriteLocalhost
=
false
;
BaseResourceDelegate
.
connectionTimeoutInMillis
=
1000
;
if
(
!
allowMultipleServers
)
{
throwIfServerAlreadyRunning
(
)
;
}
try
{
this
.
server
=
server
;
connection
=
new
SocketConnection
(
new
ContainerSocketProcessor
(
server
)
)
;
SocketAddress
address
=
new
InetSocketAddress
(
port
)
;
connection
.
connect
(
address
)
;
registerServerAsRunning
(
this
)
;
Logger
.
info
(
LOG_TAG
"
Started
HTTP
server
on
port
"
+
port
+
"
.
"
)
;
}
catch
(
IOException
ex
)
{
Logger
.
error
(
LOG_TAG
"
Error
starting
HTTP
server
on
port
"
+
port
+
"
.
"
ex
)
;
fail
(
ex
.
toString
(
)
)
;
}
return
server
;
}
public
MockServer
startHTTPServer
(
MockServer
server
)
{
return
startHTTPServer
(
server
false
)
;
}
public
MockServer
startHTTPServer
(
)
{
return
startHTTPServer
(
new
MockServer
(
)
)
;
}
public
void
stopHTTPServer
(
)
{
try
{
if
(
connection
!
=
null
)
{
unregisterServerAsRunning
(
this
)
;
connection
.
close
(
)
;
}
server
=
null
;
connection
=
null
;
Logger
.
info
(
LOG_TAG
"
Stopped
HTTP
server
on
port
"
+
port
+
"
.
"
)
;
Logger
.
debug
(
LOG_TAG
"
Closing
connection
pool
.
.
.
"
)
;
BaseResource
.
shutdownConnectionManager
(
)
;
}
catch
(
IOException
ex
)
{
Logger
.
error
(
LOG_TAG
"
Error
stopping
HTTP
server
on
port
"
+
port
+
"
.
"
ex
)
;
fail
(
ex
.
toString
(
)
)
;
}
}
}
