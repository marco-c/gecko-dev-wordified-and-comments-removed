package
org
.
mozilla
.
gecko
.
fxa
.
activities
;
import
android
.
accounts
.
Account
;
import
android
.
content
.
BroadcastReceiver
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
IntentFilter
;
import
android
.
content
.
SharedPreferences
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
Handler
;
import
android
.
preference
.
CheckBoxPreference
;
import
android
.
preference
.
EditTextPreference
;
import
android
.
preference
.
Preference
;
import
android
.
preference
.
Preference
.
OnPreferenceChangeListener
;
import
android
.
preference
.
Preference
.
OnPreferenceClickListener
;
import
android
.
preference
.
PreferenceCategory
;
import
android
.
preference
.
PreferenceScreen
;
import
android
.
support
.
v4
.
content
.
LocalBroadcastManager
;
import
android
.
text
.
TextUtils
;
import
android
.
text
.
format
.
DateUtils
;
import
com
.
squareup
.
picasso
.
Picasso
;
import
com
.
squareup
.
picasso
.
Target
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
background
.
common
.
log
.
Logger
;
import
org
.
mozilla
.
gecko
.
background
.
fxa
.
FxAccountUtils
;
import
org
.
mozilla
.
gecko
.
background
.
preferences
.
PreferenceFragment
;
import
org
.
mozilla
.
gecko
.
fxa
.
FxAccountConstants
;
import
org
.
mozilla
.
gecko
.
fxa
.
SyncStatusListener
;
import
org
.
mozilla
.
gecko
.
fxa
.
authenticator
.
AndroidFxAccount
;
import
org
.
mozilla
.
gecko
.
fxa
.
login
.
Married
;
import
org
.
mozilla
.
gecko
.
fxa
.
login
.
State
;
import
org
.
mozilla
.
gecko
.
fxa
.
sync
.
FxAccountSyncStatusHelper
;
import
org
.
mozilla
.
gecko
.
sync
.
ExtendedJSONObject
;
import
org
.
mozilla
.
gecko
.
sync
.
SharedPreferencesClientsDataDelegate
;
import
org
.
mozilla
.
gecko
.
sync
.
SyncConfiguration
;
import
org
.
mozilla
.
gecko
.
sync
.
setup
.
activities
.
ActivityUtils
;
import
org
.
mozilla
.
gecko
.
util
.
HardwareUtils
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
java
.
util
.
Calendar
;
import
java
.
util
.
Date
;
import
java
.
util
.
GregorianCalendar
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
public
class
FxAccountStatusFragment
extends
PreferenceFragment
implements
OnPreferenceClickListener
OnPreferenceChangeListener
{
private
static
final
String
LOG_TAG
=
FxAccountStatusFragment
.
class
.
getSimpleName
(
)
;
private
static
final
Date
EARLIEST_VALID_SYNCED_DATE
;
static
{
final
Calendar
c
=
GregorianCalendar
.
getInstance
(
)
;
c
.
set
(
2000
Calendar
.
JANUARY
1
0
0
0
)
;
EARLIEST_VALID_SYNCED_DATE
=
c
.
getTime
(
)
;
}
private
static
final
long
DELAY_IN_MILLISECONDS_BEFORE_REQUESTING_SYNC
=
5
*
1000
;
private
static
final
long
LAST_SYNCED_TIME_UPDATE_INTERVAL_IN_MILLISECONDS
=
60
*
1000
;
private
static
final
long
PROFILE_FETCH_RETRY_INTERVAL_IN_MILLISECONDS
=
60
*
1000
;
private
static
final
String
[
]
STAGES_TO_SYNC_ON_DEVICE_NAME_CHANGE
=
new
String
[
]
{
"
clients
"
}
;
protected
PreferenceCategory
additionalSettingsCategory
;
protected
PreferenceCategory
errorStatesCategory
;
protected
Preference
profilePreference
;
protected
Preference
authServerPreference
;
protected
Preference
removeAccountPreference
;
protected
Preference
needsPasswordPreference
;
protected
Preference
needsUpgradePreference
;
protected
Preference
needsVerificationPreference
;
protected
Preference
needsMasterSyncAutomaticallyEnabledPreference
;
protected
Preference
needsFinishMigratingPreference
;
protected
CheckBoxPreference
bookmarksPreference
;
protected
CheckBoxPreference
historyPreference
;
protected
CheckBoxPreference
tabsPreference
;
protected
CheckBoxPreference
passwordsPreference
;
protected
EditTextPreference
deviceNamePreference
;
protected
Preference
syncServerPreference
;
protected
Preference
syncNowPreference
;
protected
volatile
AndroidFxAccount
fxAccount
;
protected
volatile
SharedPreferencesClientsDataDelegate
clientsDataDelegate
;
protected
Handler
handler
;
protected
Runnable
requestSyncRunnable
;
protected
Runnable
lastSyncedTimeUpdateRunnable
;
protected
FxAccountProfileInformationReceiver
accountProfileInformationReceiver
;
protected
final
InnerSyncStatusDelegate
syncStatusDelegate
=
new
InnerSyncStatusDelegate
(
)
;
private
Target
profileAvatarTarget
;
protected
Preference
ensureFindPreference
(
String
key
)
{
Preference
preference
=
findPreference
(
key
)
;
if
(
preference
=
=
null
)
{
throw
new
IllegalStateException
(
"
Could
not
find
preference
with
key
:
"
+
key
)
;
}
return
preference
;
}
Override
public
void
onCreate
(
Bundle
savedInstanceState
)
{
super
.
onCreate
(
savedInstanceState
)
;
HardwareUtils
.
init
(
getActivity
(
)
)
;
addPreferences
(
)
;
}
protected
void
addPreferences
(
)
{
addPreferencesFromResource
(
R
.
xml
.
fxaccount_status_prefscreen
)
;
errorStatesCategory
=
(
PreferenceCategory
)
ensureFindPreference
(
"
error_state
"
)
;
additionalSettingsCategory
=
(
PreferenceCategory
)
ensureFindPreference
(
"
additional_settings
"
)
;
profilePreference
=
ensureFindPreference
(
"
profile
"
)
;
authServerPreference
=
ensureFindPreference
(
"
auth_server
"
)
;
removeAccountPreference
=
ensureFindPreference
(
"
remove_account
"
)
;
needsPasswordPreference
=
ensureFindPreference
(
"
needs_credentials
"
)
;
needsUpgradePreference
=
ensureFindPreference
(
"
needs_upgrade
"
)
;
needsVerificationPreference
=
ensureFindPreference
(
"
needs_verification
"
)
;
needsMasterSyncAutomaticallyEnabledPreference
=
ensureFindPreference
(
"
needs_master_sync_automatically_enabled
"
)
;
needsFinishMigratingPreference
=
ensureFindPreference
(
"
needs_finish_migrating
"
)
;
bookmarksPreference
=
(
CheckBoxPreference
)
ensureFindPreference
(
"
bookmarks
"
)
;
historyPreference
=
(
CheckBoxPreference
)
ensureFindPreference
(
"
history
"
)
;
tabsPreference
=
(
CheckBoxPreference
)
ensureFindPreference
(
"
tabs
"
)
;
passwordsPreference
=
(
CheckBoxPreference
)
ensureFindPreference
(
"
passwords
"
)
;
profilePreference
.
setOnPreferenceClickListener
(
this
)
;
removeAccountPreference
.
setOnPreferenceClickListener
(
this
)
;
needsPasswordPreference
.
setOnPreferenceClickListener
(
this
)
;
needsVerificationPreference
.
setOnPreferenceClickListener
(
this
)
;
needsFinishMigratingPreference
.
setOnPreferenceClickListener
(
this
)
;
bookmarksPreference
.
setOnPreferenceClickListener
(
this
)
;
historyPreference
.
setOnPreferenceClickListener
(
this
)
;
tabsPreference
.
setOnPreferenceClickListener
(
this
)
;
passwordsPreference
.
setOnPreferenceClickListener
(
this
)
;
deviceNamePreference
=
(
EditTextPreference
)
ensureFindPreference
(
"
device_name
"
)
;
deviceNamePreference
.
setOnPreferenceChangeListener
(
this
)
;
syncServerPreference
=
ensureFindPreference
(
"
sync_server
"
)
;
syncNowPreference
=
ensureFindPreference
(
"
sync_now
"
)
;
syncNowPreference
.
setEnabled
(
true
)
;
syncNowPreference
.
setOnPreferenceClickListener
(
this
)
;
if
(
!
FxAccountUtils
.
LOG_PERSONAL_INFORMATION
)
{
removeDebugButtons
(
)
;
}
else
{
connectDebugButtons
(
)
;
}
updateAdditionalPreferences
(
)
;
ensureFindPreference
(
"
linktos
"
)
.
setOnPreferenceClickListener
(
this
)
;
ensureFindPreference
(
"
linkprivacy
"
)
.
setOnPreferenceClickListener
(
this
)
;
}
Override
public
void
onResume
(
)
{
super
.
onResume
(
)
;
}
Override
public
boolean
onPreferenceClick
(
Preference
preference
)
{
if
(
preference
=
=
profilePreference
)
{
ActivityUtils
.
openURLInFennec
(
getActivity
(
)
.
getApplicationContext
(
)
"
about
:
accounts
?
action
=
manage
"
)
;
return
true
;
}
if
(
preference
=
=
removeAccountPreference
)
{
FxAccountStatusActivity
.
maybeDeleteAndroidAccount
(
getActivity
(
)
fxAccount
.
getAndroidAccount
(
)
null
)
;
return
true
;
}
if
(
preference
=
=
needsPasswordPreference
)
{
final
Intent
intent
=
new
Intent
(
FxAccountConstants
.
ACTION_FXA_UPDATE_CREDENTIALS
)
;
intent
.
putExtra
(
FxAccountWebFlowActivity
.
EXTRA_ENDPOINT
FxAccountConstants
.
ENDPOINT_PREFERENCES
)
;
intent
.
setFlags
(
Intent
.
FLAG_ACTIVITY_NO_ANIMATION
)
;
startActivity
(
intent
)
;
return
true
;
}
if
(
preference
=
=
needsFinishMigratingPreference
)
{
final
Intent
intent
=
new
Intent
(
FxAccountConstants
.
ACTION_FXA_FINISH_MIGRATING
)
;
intent
.
putExtra
(
FxAccountWebFlowActivity
.
EXTRA_ENDPOINT
FxAccountConstants
.
ENDPOINT_PREFERENCES
)
;
intent
.
setFlags
(
Intent
.
FLAG_ACTIVITY_NO_ANIMATION
)
;
startActivity
(
intent
)
;
return
true
;
}
if
(
preference
=
=
needsVerificationPreference
)
{
final
Intent
intent
=
new
Intent
(
FxAccountConstants
.
ACTION_FXA_CONFIRM_ACCOUNT
)
;
intent
.
setFlags
(
Intent
.
FLAG_ACTIVITY_NO_ANIMATION
)
;
intent
.
putExtra
(
FxAccountWebFlowActivity
.
EXTRA_ENDPOINT
FxAccountConstants
.
ENDPOINT_PREFERENCES
)
;
startActivity
(
intent
)
;
return
true
;
}
if
(
preference
=
=
bookmarksPreference
|
|
preference
=
=
historyPreference
|
|
preference
=
=
passwordsPreference
|
|
preference
=
=
tabsPreference
)
{
saveEngineSelections
(
)
;
return
true
;
}
if
(
preference
=
=
syncNowPreference
)
{
if
(
fxAccount
!
=
null
)
{
fxAccount
.
requestImmediateSync
(
null
null
true
)
;
}
return
true
;
}
if
(
TextUtils
.
equals
(
"
linktos
"
preference
.
getKey
(
)
)
)
{
ActivityUtils
.
openURLInFennec
(
getActivity
(
)
.
getApplicationContext
(
)
getResources
(
)
.
getString
(
R
.
string
.
fxaccount_link_tos
)
)
;
return
true
;
}
if
(
TextUtils
.
equals
(
"
linkprivacy
"
preference
.
getKey
(
)
)
)
{
ActivityUtils
.
openURLInFennec
(
getActivity
(
)
.
getApplicationContext
(
)
getResources
(
)
.
getString
(
R
.
string
.
fxaccount_link_pn
)
)
;
return
true
;
}
return
false
;
}
protected
void
setCheckboxesEnabled
(
boolean
enabled
)
{
bookmarksPreference
.
setEnabled
(
enabled
)
;
historyPreference
.
setEnabled
(
enabled
)
;
tabsPreference
.
setEnabled
(
enabled
)
;
passwordsPreference
.
setEnabled
(
enabled
)
;
deviceNamePreference
.
setEnabled
(
enabled
)
;
syncNowPreference
.
setEnabled
(
enabled
)
;
}
protected
void
showOnlyOneErrorPreference
(
Preference
errorPreferenceToShow
)
{
final
PreferenceScreen
statusScreen
=
(
PreferenceScreen
)
ensureFindPreference
(
"
status_screen
"
)
;
final
boolean
showShowErrorState
=
errorPreferenceToShow
!
=
null
;
final
boolean
currentlyShowingErrorState
=
null
!
=
findPreference
(
errorStatesCategory
.
getKey
(
)
)
;
if
(
currentlyShowingErrorState
!
=
showShowErrorState
)
{
if
(
showShowErrorState
)
{
statusScreen
.
addPreference
(
errorStatesCategory
)
;
}
else
{
statusScreen
.
removePreference
(
errorStatesCategory
)
;
}
}
if
(
!
showShowErrorState
)
{
return
;
}
final
Preference
[
]
errorPreferences
=
new
Preference
[
]
{
this
.
needsPasswordPreference
this
.
needsUpgradePreference
this
.
needsVerificationPreference
this
.
needsMasterSyncAutomaticallyEnabledPreference
this
.
needsFinishMigratingPreference
}
;
for
(
Preference
errorPreference
:
errorPreferences
)
{
final
boolean
currentlyShown
=
null
!
=
errorStatesCategory
.
findPreference
(
errorPreference
.
getKey
(
)
)
;
final
boolean
shouldBeShown
=
errorPreference
=
=
errorPreferenceToShow
;
if
(
currentlyShown
=
=
shouldBeShown
)
{
continue
;
}
if
(
shouldBeShown
)
{
errorStatesCategory
.
addPreference
(
errorPreference
)
;
}
else
{
errorStatesCategory
.
removePreference
(
errorPreference
)
;
}
}
}
protected
void
showNeedsPassword
(
)
{
showOnlyOneErrorPreference
(
needsPasswordPreference
)
;
setCheckboxesEnabled
(
false
)
;
}
protected
void
showNeedsUpgrade
(
)
{
showOnlyOneErrorPreference
(
needsUpgradePreference
)
;
setCheckboxesEnabled
(
false
)
;
}
protected
void
showNeedsVerification
(
)
{
showOnlyOneErrorPreference
(
needsVerificationPreference
)
;
setCheckboxesEnabled
(
false
)
;
}
protected
void
showNeedsMasterSyncAutomaticallyEnabled
(
)
{
needsMasterSyncAutomaticallyEnabledPreference
.
setTitle
(
AppConstants
.
Versions
.
preLollipop
?
R
.
string
.
fxaccount_status_needs_master_sync_automatically_enabled
:
R
.
string
.
fxaccount_status_needs_master_sync_automatically_enabled_v21
)
;
showOnlyOneErrorPreference
(
needsMasterSyncAutomaticallyEnabledPreference
)
;
setCheckboxesEnabled
(
false
)
;
}
protected
void
showNeedsFinishMigrating
(
)
{
showOnlyOneErrorPreference
(
needsFinishMigratingPreference
)
;
setCheckboxesEnabled
(
false
)
;
}
protected
void
showConnected
(
)
{
showOnlyOneErrorPreference
(
null
)
;
setCheckboxesEnabled
(
true
)
;
}
private
class
InnerSyncStatusDelegate
implements
SyncStatusListener
{
final
Runnable
refreshRunnable
=
new
Runnable
(
)
{
Override
public
void
run
(
)
{
refresh
(
)
;
}
}
;
Override
public
Context
getContext
(
)
{
return
FxAccountStatusFragment
.
this
.
getActivity
(
)
;
}
Override
public
Account
getAccount
(
)
{
return
fxAccount
.
getAndroidAccount
(
)
;
}
Override
public
void
onSyncStarted
(
)
{
if
(
fxAccount
=
=
null
)
{
return
;
}
Logger
.
info
(
LOG_TAG
"
Got
sync
started
message
;
refreshing
.
"
)
;
getActivity
(
)
.
runOnUiThread
(
refreshRunnable
)
;
}
Override
public
void
onSyncFinished
(
)
{
if
(
fxAccount
=
=
null
)
{
return
;
}
Logger
.
info
(
LOG_TAG
"
Got
sync
finished
message
;
refreshing
.
"
)
;
getActivity
(
)
.
runOnUiThread
(
refreshRunnable
)
;
}
}
public
void
refresh
(
AndroidFxAccount
fxAccount
)
{
if
(
fxAccount
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
fxAccount
must
not
be
null
"
)
;
}
this
.
fxAccount
=
fxAccount
;
try
{
this
.
clientsDataDelegate
=
new
SharedPreferencesClientsDataDelegate
(
fxAccount
.
getSyncPrefs
(
)
getActivity
(
)
.
getApplicationContext
(
)
)
;
}
catch
(
Exception
e
)
{
Logger
.
error
(
LOG_TAG
"
Got
exception
fetching
Sync
prefs
associated
to
Firefox
Account
;
aborting
.
"
e
)
;
throw
new
IllegalStateException
(
e
)
;
}
handler
=
new
Handler
(
)
;
requestSyncRunnable
=
new
RequestSyncRunnable
(
)
;
lastSyncedTimeUpdateRunnable
=
new
LastSyncTimeUpdateRunnable
(
)
;
FxAccountSyncStatusHelper
.
getInstance
(
)
.
startObserving
(
syncStatusDelegate
)
;
final
IntentFilter
intentFilter
=
new
IntentFilter
(
)
;
intentFilter
.
addAction
(
FxAccountConstants
.
ACCOUNT_PROFILE_JSON_UPDATED_ACTION
)
;
accountProfileInformationReceiver
=
new
FxAccountProfileInformationReceiver
(
)
;
LocalBroadcastManager
.
getInstance
(
getActivity
(
)
)
.
registerReceiver
(
accountProfileInformationReceiver
intentFilter
)
;
refresh
(
)
;
}
Override
public
void
onPause
(
)
{
super
.
onPause
(
)
;
FxAccountSyncStatusHelper
.
getInstance
(
)
.
stopObserving
(
syncStatusDelegate
)
;
if
(
lastSyncedTimeUpdateRunnable
!
=
null
)
{
handler
.
removeCallbacks
(
lastSyncedTimeUpdateRunnable
)
;
}
if
(
accountProfileInformationReceiver
!
=
null
)
{
LocalBroadcastManager
.
getInstance
(
getActivity
(
)
)
.
unregisterReceiver
(
accountProfileInformationReceiver
)
;
}
if
(
profileAvatarTarget
!
=
null
)
{
Picasso
.
with
(
getActivity
(
)
)
.
cancelRequest
(
profileAvatarTarget
)
;
profileAvatarTarget
=
null
;
}
}
protected
void
hardRefresh
(
)
{
final
PreferenceScreen
statusScreen
=
(
PreferenceScreen
)
ensureFindPreference
(
"
status_screen
"
)
;
statusScreen
.
removeAll
(
)
;
addPreferences
(
)
;
refresh
(
)
;
}
protected
void
refresh
(
)
{
if
(
fxAccount
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
fxAccount
must
not
be
null
"
)
;
}
final
float
cornerRadius
=
getResources
(
)
.
getDimension
(
R
.
dimen
.
fxaccount_profile_image_width
)
/
2
;
profileAvatarTarget
=
new
PicassoPreferenceIconTarget
(
getResources
(
)
profilePreference
cornerRadius
)
;
updateProfileInformation
(
)
;
updateAdditionalPreferences
(
)
;
try
{
State
state
=
fxAccount
.
getState
(
)
;
switch
(
state
.
getNeededAction
(
)
)
{
case
NeedsUpgrade
:
showNeedsUpgrade
(
)
;
break
;
case
NeedsPassword
:
showNeedsPassword
(
)
;
break
;
case
NeedsVerification
:
showNeedsVerification
(
)
;
break
;
case
NeedsFinishMigrating
:
showNeedsFinishMigrating
(
)
;
break
;
case
None
:
showConnected
(
)
;
break
;
}
final
boolean
masterSyncAutomatically
=
ContentResolver
.
getMasterSyncAutomatically
(
)
;
if
(
!
masterSyncAutomatically
)
{
showNeedsMasterSyncAutomaticallyEnabled
(
)
;
return
;
}
}
finally
{
updateSelectedEngines
(
)
;
}
final
String
clientName
=
clientsDataDelegate
.
getClientName
(
)
;
deviceNamePreference
.
setSummary
(
clientName
)
;
deviceNamePreference
.
setText
(
clientName
)
;
updateSyncNowPreference
(
)
;
}
private
String
getLastSyncedString
(
final
long
startTime
)
{
if
(
new
Date
(
startTime
)
.
before
(
EARLIEST_VALID_SYNCED_DATE
)
)
{
return
getActivity
(
)
.
getString
(
R
.
string
.
fxaccount_status_never_synced
)
;
}
final
CharSequence
relativeTimeSpanString
=
DateUtils
.
getRelativeTimeSpanString
(
startTime
)
;
return
getActivity
(
)
.
getResources
(
)
.
getString
(
R
.
string
.
fxaccount_status_last_synced
relativeTimeSpanString
)
;
}
protected
void
updateSyncNowPreference
(
)
{
final
boolean
currentlySyncing
=
fxAccount
.
isCurrentlySyncing
(
)
;
syncNowPreference
.
setEnabled
(
!
currentlySyncing
)
;
if
(
currentlySyncing
)
{
syncNowPreference
.
setTitle
(
R
.
string
.
fxaccount_status_syncing
)
;
}
else
{
syncNowPreference
.
setTitle
(
R
.
string
.
fxaccount_status_sync_now
)
;
}
scheduleAndUpdateLastSyncedTime
(
)
;
}
private
void
updateProfileInformation
(
)
{
final
ExtendedJSONObject
profileJSON
=
fxAccount
.
getProfileJSON
(
)
;
if
(
profileJSON
=
=
null
)
{
profilePreference
.
setTitle
(
fxAccount
.
getEmail
(
)
)
;
return
;
}
updateProfileInformation
(
profileJSON
)
;
}
protected
void
updateProfileInformation
(
final
ExtendedJSONObject
profileJSON
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
FxAccountUtils
.
pii
(
LOG_TAG
"
Profile
JSON
is
:
"
+
profileJSON
.
toJSONString
(
)
)
;
final
String
userName
=
profileJSON
.
getString
(
FxAccountConstants
.
KEY_PROFILE_JSON_USERNAME
)
;
if
(
!
TextUtils
.
isEmpty
(
userName
)
)
{
profilePreference
.
setTitle
(
userName
)
;
profilePreference
.
setSummary
(
fxAccount
.
getEmail
(
)
)
;
}
else
{
profilePreference
.
setTitle
(
fxAccount
.
getEmail
(
)
)
;
}
final
String
avatarURI
=
profileJSON
.
getString
(
FxAccountConstants
.
KEY_PROFILE_JSON_AVATAR
)
;
if
(
TextUtils
.
isEmpty
(
avatarURI
)
)
{
Logger
.
info
(
LOG_TAG
"
AvatarURI
is
empty
skipping
profile
image
fetch
.
"
)
;
return
;
}
Picasso
.
with
(
getActivity
(
)
)
.
load
(
avatarURI
)
.
centerInside
(
)
.
resizeDimen
(
R
.
dimen
.
fxaccount_profile_image_width
R
.
dimen
.
fxaccount_profile_image_height
)
.
placeholder
(
R
.
drawable
.
sync_avatar_default
)
.
error
(
R
.
drawable
.
sync_avatar_default
)
.
into
(
profileAvatarTarget
)
;
}
private
void
scheduleAndUpdateLastSyncedTime
(
)
{
final
String
lastSynced
=
getLastSyncedString
(
fxAccount
.
getLastSyncedTimestamp
(
)
)
;
syncNowPreference
.
setSummary
(
lastSynced
)
;
handler
.
postDelayed
(
lastSyncedTimeUpdateRunnable
LAST_SYNCED_TIME_UPDATE_INTERVAL_IN_MILLISECONDS
)
;
}
private
void
updateAdditionalPreferences
(
)
{
if
(
fxAccount
=
=
null
)
{
return
;
}
final
String
authServer
=
fxAccount
.
getAccountServerURI
(
)
;
final
String
syncServer
=
fxAccount
.
getTokenServerURI
(
)
;
final
boolean
inDebugMode
=
FxAccountUtils
.
LOG_PERSONAL_INFORMATION
;
final
boolean
authServerCustomized
=
!
FxAccountConstants
.
DEFAULT_AUTH_SERVER_ENDPOINT
.
equals
(
authServer
)
;
final
boolean
syncServerCustomized
=
!
FxAccountConstants
.
DEFAULT_TOKEN_SERVER_ENDPOINT
.
equals
(
syncServer
)
;
final
boolean
shouldBeShown
=
inDebugMode
|
|
authServerCustomized
|
|
syncServerCustomized
;
final
boolean
additionalSettingsCategoryCurrentlyShown
=
null
!
=
findPreference
(
additionalSettingsCategory
.
getKey
(
)
)
;
if
(
shouldBeShown
!
=
additionalSettingsCategoryCurrentlyShown
)
{
final
PreferenceScreen
statusScreen
=
(
PreferenceScreen
)
ensureFindPreference
(
"
status_screen
"
)
;
if
(
shouldBeShown
)
{
statusScreen
.
addPreference
(
additionalSettingsCategory
)
;
}
else
{
statusScreen
.
removePreference
(
additionalSettingsCategory
)
;
return
;
}
}
final
boolean
showAuthServerPref
=
authServerCustomized
|
|
inDebugMode
;
final
boolean
authServerPrefCurrentlyShown
=
null
!
=
findPreference
(
authServerPreference
.
getKey
(
)
)
;
if
(
authServerPrefCurrentlyShown
!
=
showAuthServerPref
)
{
if
(
showAuthServerPref
)
{
additionalSettingsCategory
.
addPreference
(
authServerPreference
)
;
}
else
{
additionalSettingsCategory
.
removePreference
(
authServerPreference
)
;
}
}
authServerPreference
.
setSummary
(
authServer
)
;
final
boolean
showSyncServerPref
=
syncServerCustomized
|
|
inDebugMode
;
final
boolean
syncServerPrefCurrentlyShown
=
null
!
=
findPreference
(
syncServerPreference
.
getKey
(
)
)
;
if
(
syncServerPrefCurrentlyShown
!
=
showSyncServerPref
)
{
if
(
showSyncServerPref
)
{
additionalSettingsCategory
.
addPreference
(
syncServerPreference
)
;
}
else
{
additionalSettingsCategory
.
removePreference
(
syncServerPreference
)
;
}
}
syncServerPreference
.
setSummary
(
syncServer
)
;
}
protected
void
updateSelectedEngines
(
)
{
try
{
SharedPreferences
syncPrefs
=
fxAccount
.
getSyncPrefs
(
)
;
Map
<
String
Boolean
>
engines
=
SyncConfiguration
.
getUserSelectedEngines
(
syncPrefs
)
;
if
(
engines
!
=
null
)
{
bookmarksPreference
.
setChecked
(
engines
.
containsKey
(
"
bookmarks
"
)
&
&
engines
.
get
(
"
bookmarks
"
)
)
;
historyPreference
.
setChecked
(
engines
.
containsKey
(
"
history
"
)
&
&
engines
.
get
(
"
history
"
)
)
;
passwordsPreference
.
setChecked
(
engines
.
containsKey
(
"
passwords
"
)
&
&
engines
.
get
(
"
passwords
"
)
)
;
tabsPreference
.
setChecked
(
engines
.
containsKey
(
"
tabs
"
)
&
&
engines
.
get
(
"
tabs
"
)
)
;
return
;
}
Set
<
String
>
enabledNames
=
SyncConfiguration
.
getEnabledEngineNames
(
syncPrefs
)
;
if
(
enabledNames
!
=
null
)
{
bookmarksPreference
.
setChecked
(
enabledNames
.
contains
(
"
bookmarks
"
)
)
;
historyPreference
.
setChecked
(
enabledNames
.
contains
(
"
history
"
)
)
;
passwordsPreference
.
setChecked
(
enabledNames
.
contains
(
"
passwords
"
)
)
;
tabsPreference
.
setChecked
(
enabledNames
.
contains
(
"
tabs
"
)
)
;
return
;
}
bookmarksPreference
.
setChecked
(
true
)
;
historyPreference
.
setChecked
(
true
)
;
passwordsPreference
.
setChecked
(
true
)
;
tabsPreference
.
setChecked
(
true
)
;
setCheckboxesEnabled
(
false
)
;
}
catch
(
Exception
e
)
{
Logger
.
warn
(
LOG_TAG
"
Got
exception
getting
engines
to
select
;
ignoring
.
"
e
)
;
return
;
}
}
protected
void
saveEngineSelections
(
)
{
final
Map
<
String
Boolean
>
engineSelections
=
new
HashMap
<
String
Boolean
>
(
)
;
engineSelections
.
put
(
"
bookmarks
"
bookmarksPreference
.
isChecked
(
)
)
;
engineSelections
.
put
(
"
history
"
historyPreference
.
isChecked
(
)
)
;
engineSelections
.
put
(
"
passwords
"
passwordsPreference
.
isChecked
(
)
)
;
engineSelections
.
put
(
"
tabs
"
tabsPreference
.
isChecked
(
)
)
;
new
Thread
(
new
PersistEngineSelectionsRunnable
(
engineSelections
)
)
.
start
(
)
;
}
protected
void
requestDelayedSync
(
)
{
Logger
.
info
(
LOG_TAG
"
Posting
a
delayed
request
for
a
sync
sometime
soon
.
"
)
;
handler
.
removeCallbacks
(
requestSyncRunnable
)
;
handler
.
postDelayed
(
requestSyncRunnable
DELAY_IN_MILLISECONDS_BEFORE_REQUESTING_SYNC
)
;
}
protected
void
removeDebugButtons
(
)
{
final
PreferenceScreen
statusScreen
=
(
PreferenceScreen
)
ensureFindPreference
(
"
status_screen
"
)
;
final
PreferenceCategory
debugCategory
=
(
PreferenceCategory
)
ensureFindPreference
(
"
debug_category
"
)
;
statusScreen
.
removePreference
(
debugCategory
)
;
}
protected
class
PersistEngineSelectionsRunnable
implements
Runnable
{
private
final
Map
<
String
Boolean
>
engineSelections
;
protected
PersistEngineSelectionsRunnable
(
Map
<
String
Boolean
>
engineSelections
)
{
this
.
engineSelections
=
engineSelections
;
}
Override
public
void
run
(
)
{
try
{
AndroidFxAccount
fxAccount
=
FxAccountStatusFragment
.
this
.
fxAccount
;
if
(
fxAccount
=
=
null
)
{
return
;
}
Logger
.
info
(
LOG_TAG
"
Persisting
engine
selections
:
"
+
engineSelections
.
toString
(
)
)
;
SyncConfiguration
.
storeSelectedEnginesToPrefs
(
fxAccount
.
getSyncPrefs
(
)
engineSelections
)
;
requestDelayedSync
(
)
;
}
catch
(
Exception
e
)
{
Logger
.
warn
(
LOG_TAG
"
Got
exception
persisting
selected
engines
;
ignoring
.
"
e
)
;
return
;
}
}
}
protected
class
RequestSyncRunnable
implements
Runnable
{
Override
public
void
run
(
)
{
AndroidFxAccount
fxAccount
=
FxAccountStatusFragment
.
this
.
fxAccount
;
if
(
fxAccount
=
=
null
)
{
return
;
}
Logger
.
info
(
LOG_TAG
"
Requesting
a
sync
sometime
soon
.
"
)
;
fxAccount
.
requestEventualSync
(
null
null
)
;
}
}
protected
class
LastSyncTimeUpdateRunnable
implements
Runnable
{
Override
public
void
run
(
)
{
scheduleAndUpdateLastSyncedTime
(
)
;
}
}
public
class
FxAccountProfileInformationReceiver
extends
BroadcastReceiver
{
Override
public
void
onReceive
(
Context
context
Intent
intent
)
{
if
(
!
intent
.
getAction
(
)
.
equals
(
FxAccountConstants
.
ACCOUNT_PROFILE_JSON_UPDATED_ACTION
)
)
{
return
;
}
Logger
.
info
(
LOG_TAG
"
Profile
avatar
cache
update
action
broadcast
received
.
"
)
;
getActivity
(
)
.
runOnUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
updateProfileInformation
(
)
;
}
}
)
;
}
}
protected
class
DebugPreferenceClickListener
implements
OnPreferenceClickListener
{
Override
public
boolean
onPreferenceClick
(
Preference
preference
)
{
final
String
key
=
preference
.
getKey
(
)
;
if
(
"
debug_refresh
"
.
equals
(
key
)
)
{
Logger
.
info
(
LOG_TAG
"
Refreshing
.
"
)
;
refresh
(
)
;
}
else
if
(
"
debug_dump
"
.
equals
(
key
)
)
{
fxAccount
.
dump
(
)
;
}
else
if
(
"
debug_force_sync
"
.
equals
(
key
)
)
{
Logger
.
info
(
LOG_TAG
"
Force
syncing
.
"
)
;
fxAccount
.
requestImmediateSync
(
null
null
true
)
;
}
else
if
(
"
debug_forget_certificate
"
.
equals
(
key
)
)
{
State
state
=
fxAccount
.
getState
(
)
;
try
{
Married
married
=
(
Married
)
state
;
Logger
.
info
(
LOG_TAG
"
Moving
to
Cohabiting
state
:
Forgetting
certificate
.
"
)
;
fxAccount
.
setState
(
married
.
makeCohabitingState
(
)
)
;
refresh
(
)
;
}
catch
(
ClassCastException
e
)
{
Logger
.
info
(
LOG_TAG
"
Not
in
Married
state
;
can
'
t
forget
certificate
.
"
)
;
}
}
else
if
(
"
debug_invalidate_certificate
"
.
equals
(
key
)
)
{
State
state
=
fxAccount
.
getState
(
)
;
try
{
Married
married
=
(
Married
)
state
;
Logger
.
info
(
LOG_TAG
"
Invalidating
certificate
.
"
)
;
fxAccount
.
setState
(
married
.
makeCohabitingState
(
)
.
withCertificate
(
"
INVALID
CERTIFICATE
"
)
)
;
refresh
(
)
;
}
catch
(
ClassCastException
e
)
{
Logger
.
info
(
LOG_TAG
"
Not
in
Married
state
;
can
'
t
invalidate
certificate
.
"
)
;
}
}
else
if
(
"
debug_require_password
"
.
equals
(
key
)
)
{
Logger
.
info
(
LOG_TAG
"
Moving
to
Separated
state
:
Forgetting
password
.
"
)
;
State
state
=
fxAccount
.
getState
(
)
;
fxAccount
.
setState
(
state
.
makeSeparatedState
(
)
)
;
refresh
(
)
;
}
else
if
(
"
debug_require_upgrade
"
.
equals
(
key
)
)
{
Logger
.
info
(
LOG_TAG
"
Moving
to
Doghouse
state
:
Requiring
upgrade
.
"
)
;
State
state
=
fxAccount
.
getState
(
)
;
fxAccount
.
setState
(
state
.
makeDoghouseState
(
)
)
;
refresh
(
)
;
}
else
if
(
"
debug_migrated_from_sync11
"
.
equals
(
key
)
)
{
Logger
.
info
(
LOG_TAG
"
Moving
to
MigratedFromSync11
state
:
Requiring
password
.
"
)
;
State
state
=
fxAccount
.
getState
(
)
;
fxAccount
.
setState
(
state
.
makeMigratedFromSync11State
(
null
)
)
;
refresh
(
)
;
}
else
if
(
"
debug_make_account_stage
"
.
equals
(
key
)
)
{
Logger
.
info
(
LOG_TAG
"
Moving
Account
endpoints
in
place
to
stage
.
Deleting
Sync
and
RL
prefs
and
requiring
password
.
"
)
;
fxAccount
.
unsafeTransitionToStageEndpoints
(
)
;
refresh
(
)
;
}
else
if
(
"
debug_make_account_default
"
.
equals
(
key
)
)
{
Logger
.
info
(
LOG_TAG
"
Moving
Account
endpoints
in
place
to
default
(
production
)
.
Deleting
Sync
and
RL
prefs
and
requiring
password
.
"
)
;
fxAccount
.
unsafeTransitionToDefaultEndpoints
(
)
;
refresh
(
)
;
}
else
{
return
false
;
}
return
true
;
}
}
protected
void
connectDebugButtons
(
)
{
final
OnPreferenceClickListener
listener
=
new
DebugPreferenceClickListener
(
)
;
final
PreferenceCategory
debugCategory
=
(
PreferenceCategory
)
ensureFindPreference
(
"
debug_category
"
)
;
debugCategory
.
setTitle
(
debugCategory
.
getKey
(
)
)
;
for
(
int
i
=
0
;
i
<
debugCategory
.
getPreferenceCount
(
)
;
i
+
+
)
{
final
Preference
button
=
debugCategory
.
getPreference
(
i
)
;
button
.
setTitle
(
button
.
getKey
(
)
)
;
button
.
setOnPreferenceClickListener
(
listener
)
;
}
}
Override
public
boolean
onPreferenceChange
(
Preference
preference
Object
newValue
)
{
if
(
preference
=
=
deviceNamePreference
)
{
String
newClientName
=
(
String
)
newValue
;
if
(
TextUtils
.
isEmpty
(
newClientName
)
)
{
newClientName
=
clientsDataDelegate
.
getDefaultClientName
(
)
;
}
final
long
now
=
System
.
currentTimeMillis
(
)
;
clientsDataDelegate
.
setClientName
(
newClientName
now
)
;
fxAccount
.
requestImmediateSync
(
STAGES_TO_SYNC_ON_DEVICE_NAME_CHANGE
null
true
)
;
hardRefresh
(
)
;
return
true
;
}
return
true
;
}
}
