package
org
.
mozilla
.
gecko
.
sync
.
repositories
.
android
;
import
android
.
content
.
ContentProviderClient
;
import
android
.
content
.
ContentValues
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
android
.
os
.
RemoteException
;
import
android
.
support
.
annotation
.
NonNull
;
import
org
.
json
.
simple
.
JSONArray
;
import
org
.
json
.
simple
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
.
Visits
;
public
class
VisitsHelper
{
public
static
final
boolean
DEFAULT_IS_LOCAL_VALUE
=
false
;
public
static
final
String
SYNC_TYPE_KEY
=
"
type
"
;
public
static
final
String
SYNC_DATE_KEY
=
"
date
"
;
public
static
ContentValues
[
]
getVisitsContentValues
(
NonNull
String
guid
NonNull
JSONArray
visits
)
{
final
ContentValues
[
]
visitsToStore
=
new
ContentValues
[
visits
.
size
(
)
]
;
final
int
visitCount
=
visits
.
size
(
)
;
if
(
visitCount
=
=
0
)
{
return
visitsToStore
;
}
for
(
int
i
=
0
;
i
<
visitCount
;
i
+
+
)
{
visitsToStore
[
i
]
=
getVisitContentValues
(
guid
(
JSONObject
)
visits
.
get
(
i
)
DEFAULT_IS_LOCAL_VALUE
)
;
}
return
visitsToStore
;
}
public
static
JSONArray
getRecentHistoryVisitsForGUID
(
NonNull
ContentProviderClient
contentClient
NonNull
String
guid
int
limit
)
throws
RemoteException
{
final
JSONArray
visits
=
new
JSONArray
(
)
;
final
Cursor
cursor
=
contentClient
.
query
(
visitsUriWithLimit
(
limit
)
new
String
[
]
{
Visits
.
VISIT_TYPE
Visits
.
DATE_VISITED
}
Visits
.
HISTORY_GUID
+
"
=
?
"
new
String
[
]
{
guid
}
null
)
;
if
(
cursor
=
=
null
)
{
return
visits
;
}
try
{
if
(
!
cursor
.
moveToFirst
(
)
)
{
return
visits
;
}
final
int
dateVisitedCol
=
cursor
.
getColumnIndexOrThrow
(
Visits
.
DATE_VISITED
)
;
final
int
visitTypeCol
=
cursor
.
getColumnIndexOrThrow
(
Visits
.
VISIT_TYPE
)
;
while
(
!
cursor
.
isAfterLast
(
)
)
{
insertTupleIntoVisitsUnchecked
(
visits
cursor
.
getLong
(
visitTypeCol
)
cursor
.
getLong
(
dateVisitedCol
)
)
;
cursor
.
moveToNext
(
)
;
}
}
finally
{
cursor
.
close
(
)
;
}
return
visits
;
}
public
static
ContentValues
getVisitContentValues
(
NonNull
String
guid
NonNull
JSONObject
visit
boolean
isLocal
)
{
if
(
!
visit
.
containsKey
(
SYNC_DATE_KEY
)
|
|
!
visit
.
containsKey
(
SYNC_TYPE_KEY
)
)
{
throw
new
IllegalArgumentException
(
"
Visit
missing
required
keys
"
)
;
}
final
ContentValues
cv
=
new
ContentValues
(
)
;
cv
.
put
(
Visits
.
HISTORY_GUID
guid
)
;
cv
.
put
(
Visits
.
IS_LOCAL
isLocal
?
Visits
.
VISIT_IS_LOCAL
:
Visits
.
VISIT_IS_REMOTE
)
;
cv
.
put
(
Visits
.
VISIT_TYPE
(
Long
)
visit
.
get
(
SYNC_TYPE_KEY
)
)
;
cv
.
put
(
Visits
.
DATE_VISITED
(
Long
)
visit
.
get
(
SYNC_DATE_KEY
)
)
;
return
cv
;
}
SuppressWarnings
(
"
unchecked
"
)
private
static
void
insertTupleIntoVisitsUnchecked
(
NonNull
final
JSONArray
visits
NonNull
Long
type
NonNull
Long
date
)
{
final
JSONObject
visit
=
new
JSONObject
(
)
;
visit
.
put
(
SYNC_TYPE_KEY
type
)
;
visit
.
put
(
SYNC_DATE_KEY
date
)
;
visits
.
add
(
visit
)
;
}
private
static
Uri
visitsUriWithLimit
(
int
limit
)
{
return
BrowserContractHelpers
.
VISITS_CONTENT_URI
.
buildUpon
(
)
.
appendQueryParameter
(
"
limit
"
Integer
.
toString
(
limit
)
)
.
build
(
)
;
}
}
