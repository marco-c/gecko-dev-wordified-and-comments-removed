package
org
.
mozilla
.
gecko
.
sync
.
stage
;
import
org
.
mozilla
.
gecko
.
sync
.
ExtendedJSONObject
;
import
org
.
mozilla
.
gecko
.
sync
.
InfoConfiguration
;
import
org
.
mozilla
.
gecko
.
sync
.
JSONRecordFetcher
;
import
org
.
mozilla
.
gecko
.
sync
.
delegates
.
JSONRecordFetchDelegate
;
import
org
.
mozilla
.
gecko
.
sync
.
net
.
AuthHeaderProvider
;
import
org
.
mozilla
.
gecko
.
sync
.
net
.
SyncStorageResponse
;
public
class
FetchInfoConfigurationStage
extends
AbstractNonRepositorySyncStage
{
private
final
String
configurationURL
;
private
final
AuthHeaderProvider
authHeaderProvider
;
public
FetchInfoConfigurationStage
(
final
String
configurationURL
final
AuthHeaderProvider
authHeaderProvider
)
{
super
(
)
;
this
.
configurationURL
=
configurationURL
;
this
.
authHeaderProvider
=
authHeaderProvider
;
}
public
class
StageInfoConfigurationDelegate
implements
JSONRecordFetchDelegate
{
Override
public
void
handleSuccess
(
final
ExtendedJSONObject
result
)
{
session
.
config
.
infoConfiguration
=
new
InfoConfiguration
(
result
)
;
session
.
advance
(
)
;
}
Override
public
void
handleFailure
(
final
SyncStorageResponse
response
)
{
if
(
response
.
getStatusCode
(
)
!
=
404
)
{
session
.
handleHTTPError
(
response
"
Failure
fetching
info
/
configuration
"
)
;
return
;
}
session
.
config
.
infoConfiguration
=
new
InfoConfiguration
(
)
;
session
.
advance
(
)
;
}
Override
public
void
handleError
(
final
Exception
e
)
{
session
.
abort
(
e
"
Failure
fetching
info
/
configuration
"
)
;
}
}
Override
public
void
execute
(
)
{
final
StageInfoConfigurationDelegate
delegate
=
new
StageInfoConfigurationDelegate
(
)
;
final
JSONRecordFetcher
fetcher
=
new
JSONRecordFetcher
(
configurationURL
authHeaderProvider
)
;
fetcher
.
fetch
(
delegate
)
;
}
}
