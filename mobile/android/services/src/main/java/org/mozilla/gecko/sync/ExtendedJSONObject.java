package
org
.
mozilla
.
gecko
.
sync
;
import
org
.
json
.
simple
.
JSONArray
;
import
org
.
json
.
simple
.
JSONObject
;
import
org
.
json
.
simple
.
parser
.
JSONParser
;
import
org
.
json
.
simple
.
parser
.
ParseException
;
import
org
.
mozilla
.
apache
.
commons
.
codec
.
binary
.
Base64
;
import
org
.
mozilla
.
gecko
.
sync
.
UnexpectedJSONException
.
BadRequiredFieldJSONException
;
import
java
.
io
.
IOException
;
import
java
.
io
.
Reader
;
import
java
.
io
.
StringReader
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Map
.
Entry
;
import
java
.
util
.
Set
;
public
class
ExtendedJSONObject
implements
Cloneable
{
public
JSONObject
object
;
protected
static
JSONParser
getJSONParser
(
)
{
return
new
JSONParser
(
)
;
}
protected
static
Object
parseRaw
(
Reader
in
)
throws
ParseException
IOException
{
try
{
return
getJSONParser
(
)
.
parse
(
in
)
;
}
catch
(
Error
e
)
{
throw
new
ParseException
(
ParseException
.
ERROR_UNEXPECTED_EXCEPTION
e
)
;
}
}
protected
static
Object
parseRaw
(
String
input
)
throws
ParseException
{
try
{
return
getJSONParser
(
)
.
parse
(
input
)
;
}
catch
(
Error
e
)
{
throw
new
ParseException
(
ParseException
.
ERROR_UNEXPECTED_EXCEPTION
e
)
;
}
}
public
static
JSONArray
parseJSONArray
(
Reader
in
)
throws
IOException
ParseException
NonArrayJSONException
{
Object
o
=
parseRaw
(
in
)
;
if
(
o
=
=
null
)
{
return
null
;
}
if
(
o
instanceof
JSONArray
)
{
return
(
JSONArray
)
o
;
}
throw
new
NonArrayJSONException
(
"
value
must
be
a
JSON
array
"
)
;
}
public
static
JSONArray
parseJSONArray
(
String
jsonString
)
throws
IOException
NonArrayJSONException
{
Object
o
=
null
;
try
{
o
=
parseRaw
(
jsonString
)
;
}
catch
(
ParseException
e
)
{
throw
new
NonArrayJSONException
(
e
)
;
}
if
(
o
=
=
null
)
{
return
null
;
}
if
(
o
instanceof
JSONArray
)
{
return
(
JSONArray
)
o
;
}
throw
new
NonArrayJSONException
(
"
value
must
be
a
JSON
array
"
)
;
}
public
static
ExtendedJSONObject
parseUTF8AsJSONObject
(
byte
[
]
in
)
throws
NonObjectJSONException
IOException
{
return
new
ExtendedJSONObject
(
new
String
(
in
"
UTF
-
8
"
)
)
;
}
public
ExtendedJSONObject
(
)
{
this
.
object
=
new
JSONObject
(
)
;
}
public
ExtendedJSONObject
(
JSONObject
o
)
{
this
.
object
=
o
;
}
public
ExtendedJSONObject
(
Reader
in
)
throws
IOException
NonObjectJSONException
{
if
(
in
=
=
null
)
{
this
.
object
=
new
JSONObject
(
)
;
return
;
}
Object
obj
=
null
;
try
{
obj
=
parseRaw
(
in
)
;
}
catch
(
ParseException
e
)
{
throw
new
NonObjectJSONException
(
e
)
;
}
if
(
obj
instanceof
JSONObject
)
{
this
.
object
=
(
(
JSONObject
)
obj
)
;
}
else
{
throw
new
NonObjectJSONException
(
"
value
must
be
a
JSON
object
"
)
;
}
}
public
ExtendedJSONObject
(
String
jsonString
)
throws
IOException
NonObjectJSONException
{
this
(
jsonString
=
=
null
?
null
:
new
StringReader
(
jsonString
)
)
;
}
Override
public
ExtendedJSONObject
clone
(
)
throws
CloneNotSupportedException
{
return
new
ExtendedJSONObject
(
(
JSONObject
)
this
.
object
.
clone
(
)
)
;
}
public
Object
get
(
String
key
)
{
return
this
.
object
.
get
(
key
)
;
}
public
long
getLong
(
String
key
long
def
)
{
if
(
!
object
.
containsKey
(
key
)
)
{
return
def
;
}
Long
val
=
getLong
(
key
)
;
if
(
val
=
=
null
)
{
return
def
;
}
return
val
.
longValue
(
)
;
}
public
Long
getLong
(
String
key
)
{
return
(
Long
)
this
.
get
(
key
)
;
}
public
String
getString
(
String
key
)
{
return
(
String
)
this
.
get
(
key
)
;
}
public
Boolean
getBoolean
(
String
key
)
{
return
(
Boolean
)
this
.
get
(
key
)
;
}
public
Integer
getIntegerSafely
(
String
key
)
throws
NumberFormatException
{
Object
val
=
this
.
object
.
get
(
key
)
;
if
(
val
=
=
null
)
{
return
null
;
}
if
(
val
instanceof
Integer
)
{
return
(
Integer
)
val
;
}
if
(
val
instanceof
Long
)
{
return
(
(
Long
)
val
)
.
intValue
(
)
;
}
if
(
val
instanceof
String
)
{
return
Integer
.
parseInt
(
(
String
)
val
10
)
;
}
throw
new
NumberFormatException
(
"
Expecting
Integer
got
"
+
val
.
getClass
(
)
)
;
}
public
Long
getTimestamp
(
String
key
)
{
Object
val
=
this
.
object
.
get
(
key
)
;
if
(
val
instanceof
Double
)
{
double
millis
=
(
(
Double
)
val
)
*
1000
;
return
Double
.
valueOf
(
millis
)
.
longValue
(
)
;
}
if
(
val
instanceof
Float
)
{
double
millis
=
(
(
Float
)
val
)
.
doubleValue
(
)
*
1000
;
return
Double
.
valueOf
(
millis
)
.
longValue
(
)
;
}
if
(
val
instanceof
Number
)
{
return
(
(
Number
)
val
)
.
longValue
(
)
*
1000
;
}
return
null
;
}
public
boolean
containsKey
(
String
key
)
{
return
this
.
object
.
containsKey
(
key
)
;
}
public
String
toJSONString
(
)
{
return
this
.
object
.
toJSONString
(
)
;
}
Override
public
String
toString
(
)
{
return
this
.
object
.
toString
(
)
;
}
protected
void
putRaw
(
String
key
Object
value
)
{
Map
<
String
Object
>
map
=
this
.
object
;
map
.
put
(
key
value
)
;
}
public
void
put
(
String
key
String
value
)
{
this
.
putRaw
(
key
value
)
;
}
public
void
put
(
String
key
boolean
value
)
{
this
.
putRaw
(
key
value
)
;
}
public
void
put
(
String
key
long
value
)
{
this
.
putRaw
(
key
value
)
;
}
public
void
put
(
String
key
int
value
)
{
this
.
putRaw
(
key
value
)
;
}
public
void
put
(
String
key
ExtendedJSONObject
value
)
{
this
.
putRaw
(
key
value
)
;
}
public
void
put
(
String
key
JSONArray
value
)
{
this
.
putRaw
(
key
value
)
;
}
SuppressWarnings
(
"
unchecked
"
)
public
void
putArray
(
String
key
List
<
String
>
value
)
{
final
JSONArray
jsonArray
=
new
JSONArray
(
)
;
jsonArray
.
addAll
(
value
)
;
this
.
putRaw
(
key
jsonArray
)
;
}
public
boolean
remove
(
String
key
)
{
Object
res
=
this
.
object
.
remove
(
key
)
;
return
(
res
!
=
null
)
;
}
public
ExtendedJSONObject
getObject
(
String
key
)
throws
NonObjectJSONException
{
Object
o
=
this
.
object
.
get
(
key
)
;
if
(
o
=
=
null
)
{
return
null
;
}
if
(
o
instanceof
ExtendedJSONObject
)
{
return
(
ExtendedJSONObject
)
o
;
}
if
(
o
instanceof
JSONObject
)
{
return
new
ExtendedJSONObject
(
(
JSONObject
)
o
)
;
}
throw
new
NonObjectJSONException
(
"
value
must
be
a
JSON
object
for
key
:
"
+
key
)
;
}
SuppressWarnings
(
"
unchecked
"
)
public
Set
<
Entry
<
String
Object
>
>
entrySet
(
)
{
return
this
.
object
.
entrySet
(
)
;
}
SuppressWarnings
(
"
unchecked
"
)
public
Set
<
String
>
keySet
(
)
{
return
this
.
object
.
keySet
(
)
;
}
public
org
.
json
.
simple
.
JSONArray
getArray
(
String
key
)
throws
NonArrayJSONException
{
Object
o
=
this
.
object
.
get
(
key
)
;
if
(
o
=
=
null
)
{
return
null
;
}
if
(
o
instanceof
JSONArray
)
{
return
(
JSONArray
)
o
;
}
throw
new
NonArrayJSONException
(
"
key
must
be
a
JSON
array
:
"
+
key
)
;
}
public
int
size
(
)
{
return
this
.
object
.
size
(
)
;
}
Override
public
int
hashCode
(
)
{
if
(
this
.
object
=
=
null
)
{
return
getClass
(
)
.
hashCode
(
)
;
}
return
this
.
object
.
hashCode
(
)
^
getClass
(
)
.
hashCode
(
)
;
}
Override
public
boolean
equals
(
Object
o
)
{
if
(
!
(
o
instanceof
ExtendedJSONObject
)
)
{
return
false
;
}
if
(
o
=
=
this
)
{
return
true
;
}
ExtendedJSONObject
other
=
(
ExtendedJSONObject
)
o
;
if
(
this
.
object
=
=
null
)
{
return
other
.
object
=
=
null
;
}
return
this
.
object
.
equals
(
other
.
object
)
;
}
public
void
throwIfFieldsMissingOrMisTyped
(
String
[
]
requiredFields
Class
<
?
>
requiredFieldClass
)
throws
BadRequiredFieldJSONException
{
for
(
String
k
:
requiredFields
)
{
Object
value
=
get
(
k
)
;
if
(
value
=
=
null
)
{
throw
new
BadRequiredFieldJSONException
(
"
Expected
key
not
present
in
result
:
"
+
k
)
;
}
if
(
requiredFieldClass
!
=
null
&
&
!
(
requiredFieldClass
.
isInstance
(
value
)
)
)
{
throw
new
BadRequiredFieldJSONException
(
"
Value
for
key
not
an
instance
of
"
+
requiredFieldClass
+
"
:
"
+
k
)
;
}
}
}
public
byte
[
]
getByteArrayBase64
(
String
key
)
{
String
s
=
(
String
)
this
.
object
.
get
(
key
)
;
if
(
s
=
=
null
)
{
return
null
;
}
return
Base64
.
decodeBase64
(
s
)
;
}
public
byte
[
]
getByteArrayHex
(
String
key
)
{
String
s
=
(
String
)
this
.
object
.
get
(
key
)
;
if
(
s
=
=
null
)
{
return
null
;
}
return
Utils
.
hex2Byte
(
s
)
;
}
}
