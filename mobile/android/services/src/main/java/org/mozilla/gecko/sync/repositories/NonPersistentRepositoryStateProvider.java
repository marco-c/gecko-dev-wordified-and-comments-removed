package
org
.
mozilla
.
gecko
.
sync
.
repositories
;
import
android
.
support
.
annotation
.
Nullable
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
NonPersistentRepositoryStateProvider
implements
RepositoryStateProvider
{
private
static
final
int
INITIAL_CAPACITY
=
2
;
private
final
Map
<
String
Object
>
nonCommittedValuesMap
=
Collections
.
synchronizedMap
(
new
HashMap
<
String
Object
>
(
INITIAL_CAPACITY
)
)
;
private
volatile
Map
<
String
Object
>
committedValuesMap
=
new
HashMap
<
>
(
INITIAL_CAPACITY
)
;
Override
public
boolean
isPersistent
(
)
{
return
false
;
}
Override
public
boolean
commit
(
)
{
committedValuesMap
=
new
HashMap
<
>
(
nonCommittedValuesMap
)
;
return
true
;
}
Override
public
NonPersistentRepositoryStateProvider
clear
(
String
key
)
{
nonCommittedValuesMap
.
remove
(
key
)
;
return
this
;
}
Override
public
NonPersistentRepositoryStateProvider
setString
(
String
key
String
value
)
{
nonCommittedValuesMap
.
put
(
key
value
)
;
return
this
;
}
Nullable
Override
public
String
getString
(
String
key
)
{
return
(
String
)
committedValuesMap
.
get
(
key
)
;
}
Override
public
NonPersistentRepositoryStateProvider
setLong
(
String
key
Long
value
)
{
nonCommittedValuesMap
.
put
(
key
value
)
;
return
this
;
}
Nullable
Override
public
Long
getLong
(
String
key
)
{
return
(
Long
)
committedValuesMap
.
get
(
key
)
;
}
Override
public
boolean
resetAndCommit
(
)
{
nonCommittedValuesMap
.
clear
(
)
;
return
commit
(
)
;
}
}
