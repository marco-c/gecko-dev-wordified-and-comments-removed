package
org
.
mozilla
.
gecko
.
fxa
;
import
android
.
accounts
.
Account
;
import
android
.
content
.
Context
;
import
org
.
mozilla
.
gecko
.
background
.
common
.
log
.
Logger
;
import
org
.
mozilla
.
gecko
.
fxa
.
authenticator
.
AndroidFxAccount
;
import
org
.
mozilla
.
gecko
.
fxa
.
login
.
Separated
;
import
org
.
mozilla
.
gecko
.
fxa
.
login
.
State
;
import
org
.
mozilla
.
gecko
.
fxa
.
sync
.
FxAccountNotificationManager
;
import
org
.
mozilla
.
gecko
.
fxa
.
sync
.
FxAccountSyncAdapter
;
import
org
.
mozilla
.
gecko
.
sync
.
ThreadPool
;
import
java
.
io
.
File
;
import
java
.
util
.
concurrent
.
CountDownLatch
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicBoolean
;
public
class
FirefoxAccountsUtils
{
private
static
final
String
LOG_TAG
=
"
FirefoxAccountUtils
"
;
private
enum
PickleFileState
{
UNDETERMINED
PRESENT
ABSENT
}
static
synchronized
void
optionallySeparateAccountsDuringFirstRun
(
Context
context
Account
[
]
accounts
)
{
final
String
firstRunSessionUUID
=
EnvironmentUtils
.
firstRunUUID
(
context
)
;
if
(
firstRunSessionUUID
=
=
null
)
{
Logger
.
debug
(
LOG_TAG
"
Skipping
first
run
account
separation
checks
.
"
)
;
return
;
}
for
(
Account
account
:
accounts
)
{
final
AndroidFxAccount
fxAccount
=
new
AndroidFxAccount
(
context
account
)
;
final
String
currentAccountFirstRunScope
=
fxAccount
.
getUserData
(
AndroidFxAccount
.
ACCOUNT_KEY_FIRST_RUN_SCOPE
)
;
if
(
firstRunSessionUUID
.
equals
(
currentAccountFirstRunScope
)
)
{
Logger
.
debug
(
LOG_TAG
"
Account
was
created
during
current
first
run
;
not
separating
.
"
)
;
return
;
}
Logger
.
info
(
LOG_TAG
"
Separating
account
during
first
run
.
"
)
;
separateAccountAndShowNotification
(
context
fxAccount
)
;
}
}
public
static
synchronized
boolean
separateAccountIfPickleFileAbsent
(
Context
context
AndroidFxAccount
fxAccount
)
{
final
PickleFileState
pickleFileState
=
queryPickleFileState
(
context
)
;
final
boolean
pickleFilePresent
;
switch
(
pickleFileState
)
{
case
PRESENT
:
pickleFilePresent
=
true
;
break
;
case
UNDETERMINED
:
case
ABSENT
:
pickleFilePresent
=
false
;
break
;
default
:
throw
new
IllegalStateException
(
"
Unexpected
pickle
file
state
:
"
+
pickleFileState
)
;
}
if
(
pickleFilePresent
)
{
Logger
.
info
(
LOG_TAG
"
Pickle
file
present
;
leaving
account
in
its
current
state
.
"
)
;
return
false
;
}
Logger
.
info
(
LOG_TAG
"
Pickle
file
absent
;
separating
the
account
.
"
)
;
separateAccountAndShowNotification
(
context
fxAccount
)
;
return
true
;
}
private
static
void
separateAccountAndShowNotification
(
final
Context
context
final
AndroidFxAccount
fxAccount
)
{
final
State
currentState
=
fxAccount
.
getState
(
)
;
if
(
!
(
currentState
instanceof
Separated
)
)
{
fxAccount
.
setState
(
new
Separated
(
fxAccount
.
getEmail
(
)
currentState
.
uid
currentState
.
verified
)
)
;
}
final
FxAccountNotificationManager
notificationManager
=
new
FxAccountNotificationManager
(
FxAccountSyncAdapter
.
NOTIFICATION_ID
)
;
notificationManager
.
update
(
context
fxAccount
)
;
}
private
static
PickleFileState
queryPickleFileState
(
final
Context
context
)
{
final
CountDownLatch
latch
=
new
CountDownLatch
(
1
)
;
final
AtomicBoolean
fileExists
=
new
AtomicBoolean
(
false
)
;
ThreadPool
.
run
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
final
File
file
=
context
.
getFileStreamPath
(
FxAccountConstants
.
ACCOUNT_PICKLE_FILENAME
)
;
fileExists
.
set
(
file
.
exists
(
)
)
;
}
finally
{
latch
.
countDown
(
)
;
}
}
}
)
;
try
{
latch
.
await
(
)
;
}
catch
(
InterruptedException
e
)
{
Logger
.
warn
(
LOG_TAG
"
Interrupted
while
querying
pickle
file
state
"
)
;
return
PickleFileState
.
UNDETERMINED
;
}
if
(
fileExists
.
get
(
)
)
{
return
PickleFileState
.
PRESENT
;
}
return
PickleFileState
.
ABSENT
;
}
}
