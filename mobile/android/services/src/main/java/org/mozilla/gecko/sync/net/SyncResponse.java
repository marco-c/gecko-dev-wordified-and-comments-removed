package
org
.
mozilla
.
gecko
.
sync
.
net
;
import
android
.
support
.
annotation
.
Nullable
;
import
org
.
mozilla
.
gecko
.
sync
.
Utils
;
import
ch
.
boye
.
httpclientandroidlib
.
HttpResponse
;
public
class
SyncResponse
extends
MozResponse
{
public
static
final
String
X_WEAVE_BACKOFF
=
"
x
-
weave
-
backoff
"
;
public
static
final
String
X_BACKOFF
=
"
x
-
backoff
"
;
public
static
final
String
X_LAST_MODIFIED
=
"
x
-
last
-
modified
"
;
public
static
final
String
X_WEAVE_TIMESTAMP
=
"
x
-
weave
-
timestamp
"
;
public
static
final
String
X_WEAVE_RECORDS
=
"
x
-
weave
-
records
"
;
public
static
final
String
X_WEAVE_QUOTA_REMAINING
=
"
x
-
weave
-
quota
-
remaining
"
;
public
static
final
String
X_WEAVE_ALERT
=
"
x
-
weave
-
alert
"
;
public
static
final
String
X_WEAVE_NEXT_OFFSET
=
"
x
-
weave
-
next
-
offset
"
;
public
SyncResponse
(
HttpResponse
res
)
{
super
(
res
)
;
}
public
int
weaveBackoffInSeconds
(
)
throws
NumberFormatException
{
return
this
.
getIntegerHeader
(
X_WEAVE_BACKOFF
)
;
}
public
int
xBackoffInSeconds
(
)
throws
NumberFormatException
{
return
this
.
getIntegerHeader
(
X_BACKOFF
)
;
}
public
int
totalBackoffInSeconds
(
boolean
includeRetryAfter
)
{
int
retryAfterInSeconds
=
-
1
;
if
(
includeRetryAfter
)
{
try
{
retryAfterInSeconds
=
retryAfterInSeconds
(
)
;
}
catch
(
NumberFormatException
e
)
{
}
}
int
weaveBackoffInSeconds
=
-
1
;
try
{
weaveBackoffInSeconds
=
weaveBackoffInSeconds
(
)
;
}
catch
(
NumberFormatException
e
)
{
}
int
backoffInSeconds
=
-
1
;
try
{
backoffInSeconds
=
xBackoffInSeconds
(
)
;
}
catch
(
NumberFormatException
e
)
{
}
int
totalBackoff
=
Math
.
max
(
retryAfterInSeconds
Math
.
max
(
backoffInSeconds
weaveBackoffInSeconds
)
)
;
if
(
totalBackoff
<
0
)
{
return
-
1
;
}
else
{
return
totalBackoff
;
}
}
public
long
totalBackoffInMilliseconds
(
)
{
long
totalBackoff
=
totalBackoffInSeconds
(
true
)
;
if
(
totalBackoff
<
0
)
{
return
-
1
;
}
else
{
return
1000
*
totalBackoff
;
}
}
public
long
normalizedWeaveTimestamp
(
)
{
return
normalizedTimestampForHeader
(
X_WEAVE_TIMESTAMP
)
;
}
public
long
normalizedTimestampForHeader
(
String
header
)
{
if
(
!
this
.
hasHeader
(
header
)
)
{
return
-
1
;
}
return
Utils
.
decimalSecondsToMilliseconds
(
this
.
response
.
getFirstHeader
(
header
)
.
getValue
(
)
)
;
}
public
int
weaveRecords
(
)
throws
NumberFormatException
{
return
this
.
getIntegerHeader
(
X_WEAVE_RECORDS
)
;
}
public
int
weaveQuotaRemaining
(
)
throws
NumberFormatException
{
return
this
.
getIntegerHeader
(
X_WEAVE_QUOTA_REMAINING
)
;
}
public
String
weaveAlert
(
)
{
return
this
.
getNonMissingHeader
(
X_WEAVE_ALERT
)
;
}
public
String
weaveOffset
(
)
{
return
this
.
getNonMissingHeader
(
X_WEAVE_NEXT_OFFSET
)
;
}
Nullable
public
String
lastModified
(
)
{
return
this
.
getNonMissingHeader
(
X_LAST_MODIFIED
)
;
}
}
