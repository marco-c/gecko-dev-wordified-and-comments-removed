package
org
.
mozilla
.
gecko
.
sync
.
validation
;
import
org
.
json
.
simple
.
JSONArray
;
import
org
.
json
.
simple
.
JSONObject
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
public
class
BookmarkValidationResults
extends
ValidationResults
{
public
static
class
ParentChildPair
{
public
String
parent
;
public
String
child
;
public
ParentChildPair
(
String
parentID
String
childID
)
{
this
.
parent
=
parentID
;
this
.
child
=
childID
;
}
Override
public
boolean
equals
(
Object
o
)
{
if
(
this
=
=
o
)
{
return
true
;
}
if
(
o
=
=
null
|
|
getClass
(
)
!
=
o
.
getClass
(
)
)
{
return
false
;
}
ParentChildPair
that
=
(
ParentChildPair
)
o
;
if
(
!
parent
.
equals
(
that
.
parent
)
)
{
return
false
;
}
return
child
.
equals
(
that
.
child
)
;
}
Override
public
int
hashCode
(
)
{
int
result
=
parent
.
hashCode
(
)
;
result
=
31
*
result
+
child
.
hashCode
(
)
;
return
result
;
}
}
public
boolean
rootOnServer
=
false
;
public
List
<
ParentChildPair
>
missingChildren
=
new
ArrayList
<
>
(
)
;
public
List
<
ParentChildPair
>
deletedChildren
=
new
ArrayList
<
>
(
)
;
public
List
<
ParentChildPair
>
deletedParents
=
new
ArrayList
<
>
(
)
;
public
List
<
ParentChildPair
>
orphans
=
new
ArrayList
<
>
(
)
;
public
List
<
ParentChildPair
>
duplicateChildren
=
new
ArrayList
<
>
(
)
;
public
List
<
ParentChildPair
>
parentNotFolder
=
new
ArrayList
<
>
(
)
;
public
Set
<
ParentChildPair
>
parentChildMismatches
=
new
HashSet
<
>
(
)
;
public
Map
<
String
List
<
String
>
>
multipleParents
=
new
HashMap
<
>
(
)
;
public
Set
<
String
>
clientMissing
=
new
HashSet
<
>
(
)
;
public
Set
<
String
>
serverMissing
=
new
HashSet
<
>
(
)
;
public
Set
<
String
>
serverDeleted
=
new
HashSet
<
>
(
)
;
public
Set
<
String
>
structuralDifferenceChildGUIDs
=
new
HashSet
<
>
(
)
;
public
Set
<
String
>
structuralDifferenceParentIDs
=
new
HashSet
<
>
(
)
;
public
Set
<
String
>
differences
=
new
HashSet
<
>
(
)
;
private
static
void
addProp
(
Map
<
String
Integer
>
m
String
propName
int
count
)
{
if
(
count
!
=
0
)
{
m
.
put
(
propName
count
)
;
}
}
public
Map
<
String
Integer
>
summarizeResults
(
)
{
Map
<
String
Integer
>
m
=
new
HashMap
<
>
(
)
;
if
(
rootOnServer
)
{
addProp
(
m
"
rootOnServer
"
1
)
;
}
addProp
(
m
"
parentChildMismatches
"
parentChildMismatches
.
size
(
)
)
;
addProp
(
m
"
missingChildren
"
missingChildren
.
size
(
)
)
;
addProp
(
m
"
deletedChildren
"
deletedChildren
.
size
(
)
)
;
addProp
(
m
"
deletedParents
"
deletedParents
.
size
(
)
)
;
addProp
(
m
"
multipleParents
"
multipleParents
.
size
(
)
)
;
addProp
(
m
"
orphans
"
orphans
.
size
(
)
)
;
addProp
(
m
"
duplicateChildren
"
duplicateChildren
.
size
(
)
)
;
addProp
(
m
"
parentNotFolder
"
parentNotFolder
.
size
(
)
)
;
addProp
(
m
"
clientMissing
"
clientMissing
.
size
(
)
)
;
addProp
(
m
"
serverMissing
"
serverMissing
.
size
(
)
)
;
addProp
(
m
"
serverDeleted
"
serverDeleted
.
size
(
)
)
;
addProp
(
m
"
sdiff
:
childGUIDs
"
structuralDifferenceChildGUIDs
.
size
(
)
)
;
addProp
(
m
"
sdiff
:
parentid
"
structuralDifferenceParentIDs
.
size
(
)
)
;
addProp
(
m
"
structuralDifferences
"
structuralDifferenceParentIDs
.
size
(
)
+
structuralDifferenceChildGUIDs
.
size
(
)
)
;
addProp
(
m
"
differences
"
differences
.
size
(
)
)
;
return
m
;
}
}
