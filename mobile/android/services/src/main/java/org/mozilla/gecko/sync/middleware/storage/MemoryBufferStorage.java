package
org
.
mozilla
.
gecko
.
sync
.
middleware
.
storage
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
domain
.
Record
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
MemoryBufferStorage
implements
BufferStorage
{
private
final
Map
<
String
Record
>
recordBuffer
=
Collections
.
synchronizedMap
(
new
HashMap
<
String
Record
>
(
)
)
;
Override
public
boolean
isPersistent
(
)
{
return
false
;
}
Override
public
Collection
<
Record
>
all
(
)
{
synchronized
(
recordBuffer
)
{
return
new
ArrayList
<
>
(
recordBuffer
.
values
(
)
)
;
}
}
Override
public
void
addOrReplace
(
Record
record
)
{
recordBuffer
.
put
(
record
.
guid
record
)
;
}
Override
public
void
flush
(
)
{
}
Override
public
void
clear
(
)
{
recordBuffer
.
clear
(
)
;
}
Override
public
long
latestModifiedTimestamp
(
)
{
long
lastModified
=
0
;
synchronized
(
recordBuffer
)
{
if
(
recordBuffer
.
size
(
)
=
=
0
)
{
return
lastModified
;
}
for
(
Record
record
:
recordBuffer
.
values
(
)
)
{
if
(
record
.
lastModified
>
lastModified
)
{
lastModified
=
record
.
lastModified
;
}
}
}
return
lastModified
;
}
}
