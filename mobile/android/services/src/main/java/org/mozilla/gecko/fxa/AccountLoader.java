package
org
.
mozilla
.
gecko
.
fxa
;
import
org
.
mozilla
.
gecko
.
fxa
.
authenticator
.
AndroidFxAccount
;
import
android
.
accounts
.
Account
;
import
android
.
accounts
.
AccountManager
;
import
android
.
content
.
BroadcastReceiver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
IntentFilter
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Looper
;
import
android
.
content
.
AsyncTaskLoader
;
import
android
.
support
.
v4
.
content
.
LocalBroadcastManager
;
import
java
.
lang
.
ref
.
WeakReference
;
public
class
AccountLoader
extends
AsyncTaskLoader
<
Account
>
{
protected
Account
account
=
null
;
protected
BroadcastReceiver
broadcastReceiver
=
null
;
private
final
BroadcastReceiverRunnable
broadcastReceiverRunnable
=
new
BroadcastReceiverRunnable
(
this
)
;
public
AccountLoader
(
final
Context
context
)
{
super
(
context
)
;
}
Override
public
Account
loadInBackground
(
)
{
return
FirefoxAccounts
.
getFirefoxAccount
(
getContext
(
)
)
;
}
Override
public
void
deliverResult
(
Account
data
)
{
if
(
isReset
(
)
)
{
releaseResources
(
data
)
;
return
;
}
Account
oldData
=
account
;
account
=
data
;
if
(
isStarted
(
)
)
{
super
.
deliverResult
(
data
)
;
}
if
(
oldData
!
=
null
&
&
oldData
!
=
data
)
{
releaseResources
(
oldData
)
;
}
}
Override
protected
void
onStartLoading
(
)
{
if
(
account
!
=
null
)
{
deliverResult
(
account
)
;
}
if
(
broadcastReceiver
=
=
null
)
{
broadcastReceiver
=
makeNewObserver
(
)
;
registerLocalObserver
(
getContext
(
)
broadcastReceiver
)
;
registerSystemObserver
(
getContext
(
)
broadcastReceiver
)
;
}
if
(
takeContentChanged
(
)
|
|
account
=
=
null
)
{
forceLoad
(
)
;
}
}
Override
protected
void
onStopLoading
(
)
{
cancelLoad
(
)
;
}
Override
protected
void
onReset
(
)
{
stopLoading
(
)
;
if
(
account
!
=
null
)
{
releaseResources
(
account
)
;
account
=
null
;
}
if
(
broadcastReceiver
!
=
null
)
{
final
BroadcastReceiver
observer
=
broadcastReceiver
;
broadcastReceiver
=
null
;
unregisterObserver
(
getContext
(
)
observer
)
;
}
}
Override
public
void
onCanceled
(
final
Account
data
)
{
super
.
onCanceled
(
data
)
;
releaseResources
(
data
)
;
}
protected
BroadcastReceiver
makeNewObserver
(
)
{
return
new
BroadcastReceiver
(
)
{
Override
public
void
onReceive
(
Context
context
Intent
intent
)
{
if
(
Looper
.
myLooper
(
)
=
=
Looper
.
getMainLooper
(
)
)
{
onContentChanged
(
)
;
return
;
}
final
Handler
mainHandler
=
new
Handler
(
Looper
.
getMainLooper
(
)
)
;
mainHandler
.
post
(
broadcastReceiverRunnable
)
;
}
}
;
}
private
static
class
BroadcastReceiverRunnable
implements
Runnable
{
private
final
WeakReference
<
AccountLoader
>
accountLoaderWeakReference
;
public
BroadcastReceiverRunnable
(
final
AccountLoader
accountLoader
)
{
accountLoaderWeakReference
=
new
WeakReference
<
>
(
accountLoader
)
;
}
Override
public
void
run
(
)
{
final
AccountLoader
accountLoader
=
accountLoaderWeakReference
.
get
(
)
;
if
(
accountLoader
!
=
null
)
{
accountLoader
.
onContentChanged
(
)
;
}
}
}
private
void
releaseResources
(
Account
data
)
{
}
protected
static
void
registerLocalObserver
(
final
Context
context
final
BroadcastReceiver
observer
)
{
final
IntentFilter
intentFilter
=
new
IntentFilter
(
)
;
intentFilter
.
addAction
(
FxAccountConstants
.
ACCOUNT_STATE_CHANGED_ACTION
)
;
intentFilter
.
addAction
(
FxAccountConstants
.
ACCOUNT_PROFILE_JSON_UPDATED_ACTION
)
;
LocalBroadcastManager
.
getInstance
(
context
)
.
registerReceiver
(
observer
intentFilter
)
;
}
protected
static
void
registerSystemObserver
(
final
Context
context
final
BroadcastReceiver
observer
)
{
context
.
registerReceiver
(
observer
new
IntentFilter
(
AccountManager
.
LOGIN_ACCOUNTS_CHANGED_ACTION
)
null
null
)
;
}
protected
static
void
unregisterObserver
(
final
Context
context
final
BroadcastReceiver
observer
)
{
LocalBroadcastManager
.
getInstance
(
context
)
.
unregisterReceiver
(
observer
)
;
context
.
unregisterReceiver
(
observer
)
;
}
}
