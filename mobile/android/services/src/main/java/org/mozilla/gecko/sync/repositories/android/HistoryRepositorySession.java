package
org
.
mozilla
.
gecko
.
sync
.
repositories
.
android
;
import
org
.
mozilla
.
gecko
.
background
.
common
.
log
.
Logger
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
InactiveSessionException
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
InvalidSessionTransitionException
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
NoStoreDelegateException
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
ProfileDatabaseException
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
Repository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
StoreTrackingRepositorySession
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
delegates
.
RepositorySessionBeginDelegate
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
delegates
.
RepositorySessionFetchRecordsDelegate
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
delegates
.
RepositorySessionFinishDelegate
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
delegates
.
RepositorySessionWipeDelegate
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
domain
.
Record
;
import
android
.
content
.
Context
;
public
class
HistoryRepositorySession
extends
StoreTrackingRepositorySession
{
public
static
final
String
LOG_TAG
=
"
ABHistoryRepoSess
"
;
private
final
HistoryDataAccessor
dbHelper
;
private
final
HistorySessionHelper
sessionHelper
;
private
int
storeCount
=
0
;
public
HistoryRepositorySession
(
Repository
repository
Context
context
)
{
super
(
repository
)
;
dbHelper
=
new
HistoryDataAccessor
(
context
)
;
sessionHelper
=
new
HistorySessionHelper
(
this
dbHelper
)
;
}
Override
public
void
begin
(
RepositorySessionBeginDelegate
delegate
)
throws
InvalidSessionTransitionException
{
try
{
dbHelper
.
delete
(
BrowserContract
.
History
.
GUID
+
"
IS
NULL
"
null
)
;
}
catch
(
Exception
e
)
{
}
RepositorySessionBeginDelegate
deferredDelegate
=
delegate
.
deferredBeginDelegate
(
delegateQueue
)
;
super
.
sharedBegin
(
)
;
try
{
sessionHelper
.
checkDatabase
(
)
;
}
catch
(
ProfileDatabaseException
e
)
{
Logger
.
error
(
LOG_TAG
"
ProfileDatabaseException
from
begin
.
Fennec
must
be
launched
once
until
this
error
is
fixed
"
)
;
deferredDelegate
.
onBeginFailed
(
e
)
;
return
;
}
catch
(
Exception
e
)
{
deferredDelegate
.
onBeginFailed
(
e
)
;
return
;
}
storeTracker
=
createStoreTracker
(
)
;
deferredDelegate
.
onBeginSucceeded
(
this
)
;
}
Override
public
void
fetchModified
(
RepositorySessionFetchRecordsDelegate
delegate
)
{
this
.
fetchSince
(
getLastSyncTimestamp
(
)
delegate
)
;
}
Override
public
void
fetch
(
String
[
]
guids
RepositorySessionFetchRecordsDelegate
delegate
)
throws
InactiveSessionException
{
executeDelegateCommand
(
sessionHelper
.
getFetchRunnable
(
guids
now
(
)
null
delegate
)
)
;
}
Override
public
void
fetchAll
(
RepositorySessionFetchRecordsDelegate
delegate
)
{
this
.
fetchSince
(
-
1
delegate
)
;
}
private
void
fetchSince
(
long
timestamp
RepositorySessionFetchRecordsDelegate
delegate
)
{
if
(
this
.
storeTracker
=
=
null
)
{
throw
new
IllegalStateException
(
"
Store
tracker
not
yet
initialized
!
"
)
;
}
Logger
.
debug
(
LOG_TAG
"
Running
fetchSince
(
"
+
timestamp
+
"
)
.
"
)
;
delegateQueue
.
execute
(
sessionHelper
.
getFetchSinceRunnable
(
timestamp
now
(
)
this
.
storeTracker
.
getFilter
(
)
delegate
)
)
;
}
Override
public
void
store
(
Record
record
)
throws
NoStoreDelegateException
{
if
(
storeDelegate
=
=
null
)
{
throw
new
NoStoreDelegateException
(
)
;
}
if
(
record
=
=
null
)
{
Logger
.
error
(
LOG_TAG
"
Record
sent
to
store
was
null
"
)
;
throw
new
IllegalArgumentException
(
"
Null
record
passed
to
AndroidBrowserRepositorySession
.
store
(
)
.
"
)
;
}
storeCount
+
=
1
;
Logger
.
debug
(
LOG_TAG
"
Storing
record
with
GUID
"
+
record
.
guid
+
"
(
stored
"
+
storeCount
+
"
records
this
session
)
.
"
)
;
storeWorkQueue
.
execute
(
sessionHelper
.
getStoreRunnable
(
record
storeDelegate
)
)
;
}
Override
public
void
wipe
(
RepositorySessionWipeDelegate
delegate
)
{
Runnable
command
=
sessionHelper
.
getWipeRunnable
(
delegate
)
;
storeWorkQueue
.
execute
(
command
)
;
}
Override
public
void
storeIncomplete
(
)
{
storeWorkQueue
.
execute
(
sessionHelper
.
getStoreIncompleteRunnable
(
storeDelegate
)
)
;
}
Override
public
void
storeDone
(
)
{
storeWorkQueue
.
execute
(
sessionHelper
.
getStoreDoneRunnable
(
storeDelegate
)
)
;
storeWorkQueue
.
execute
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
storeDelegate
.
onStoreCompleted
(
now
(
)
)
;
}
}
)
;
}
Override
public
void
finish
(
RepositorySessionFinishDelegate
delegate
)
throws
InactiveSessionException
{
sessionHelper
.
finish
(
)
;
super
.
finish
(
delegate
)
;
}
}
