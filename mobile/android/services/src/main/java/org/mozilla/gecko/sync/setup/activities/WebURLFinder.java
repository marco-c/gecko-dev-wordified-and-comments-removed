package
org
.
mozilla
.
gecko
.
sync
.
setup
.
activities
;
import
java
.
net
.
URI
;
import
java
.
net
.
URISyntaxException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
LinkedList
;
import
java
.
util
.
List
;
import
java
.
util
.
regex
.
Matcher
;
import
java
.
util
.
regex
.
Pattern
;
public
class
WebURLFinder
{
public
static
final
String
GOOD_IRI_CHAR
=
"
a
-
zA
-
Z0
-
9
\
u00A0
-
\
uD7FF
\
uF900
-
\
uFDCF
\
uFDF0
-
\
uFFEF
"
;
public
static
final
String
GOOD_GTLD_CHAR
=
"
a
-
zA
-
Z
\
u00A0
-
\
uD7FF
\
uF900
-
\
uFDCF
\
uFDF0
-
\
uFFEF
"
;
public
static
final
String
IRI
=
"
[
"
+
GOOD_IRI_CHAR
+
"
]
(
[
"
+
GOOD_IRI_CHAR
+
"
\
\
-
]
{
0
61
}
[
"
+
GOOD_IRI_CHAR
+
"
]
)
{
0
1
}
"
;
public
static
final
String
GTLD
=
"
[
"
+
GOOD_GTLD_CHAR
+
"
]
{
2
63
}
"
;
public
static
final
String
HOST_NAME
=
"
(
"
+
IRI
+
"
\
\
.
)
+
"
+
GTLD
;
public
static
final
Pattern
IP_ADDRESS
=
Pattern
.
compile
(
"
(
(
25
[
0
-
5
]
|
2
[
0
-
4
]
[
0
-
9
]
|
[
0
-
1
]
[
0
-
9
]
{
2
}
|
[
1
-
9
]
[
0
-
9
]
|
[
1
-
9
]
)
\
\
.
(
25
[
0
-
5
]
|
2
[
0
-
4
]
"
+
"
[
0
-
9
]
|
[
0
-
1
]
[
0
-
9
]
{
2
}
|
[
1
-
9
]
[
0
-
9
]
|
[
1
-
9
]
|
0
)
\
\
.
(
25
[
0
-
5
]
|
2
[
0
-
4
]
[
0
-
9
]
|
[
0
-
1
]
"
+
"
[
0
-
9
]
{
2
}
|
[
1
-
9
]
[
0
-
9
]
|
[
1
-
9
]
|
0
)
\
\
.
(
25
[
0
-
5
]
|
2
[
0
-
4
]
[
0
-
9
]
|
[
0
-
1
]
[
0
-
9
]
{
2
}
"
+
"
|
[
1
-
9
]
[
0
-
9
]
|
[
0
-
9
]
)
)
"
)
;
public
static
final
Pattern
DOMAIN_NAME
=
Pattern
.
compile
(
"
(
"
+
HOST_NAME
+
"
|
"
+
IP_ADDRESS
+
"
)
"
)
;
public
static
final
Pattern
WEB_URL
=
Pattern
.
compile
(
"
(
(
?
:
(
http
|
https
|
Http
|
Https
|
rtsp
|
Rtsp
)
:
\
\
/
\
\
/
(
?
:
(
?
:
[
a
-
zA
-
Z0
-
9
\
\
\
\
-
\
\
_
\
\
.
\
\
+
\
\
!
\
\
*
\
\
'
\
\
(
\
\
)
"
+
"
\
\
\
\
;
\
\
?
\
\
&
\
\
=
]
|
(
?
:
\
\
%
[
a
-
fA
-
F0
-
9
]
{
2
}
)
)
{
1
64
}
(
?
:
\
\
:
(
?
:
[
a
-
zA
-
Z0
-
9
\
\
\
\
-
\
\
_
"
+
"
\
\
.
\
\
+
\
\
!
\
\
*
\
\
'
\
\
(
\
\
)
\
\
\
\
;
\
\
?
\
\
&
\
\
=
]
|
(
?
:
\
\
%
[
a
-
fA
-
F0
-
9
]
{
2
}
)
)
{
1
25
}
)
?
\
\
)
?
)
?
"
+
"
(
?
:
"
+
DOMAIN_NAME
+
"
)
"
+
"
(
?
:
\
\
:
\
\
d
{
1
5
}
)
?
)
"
+
"
(
\
\
/
(
?
:
(
?
:
[
"
+
GOOD_IRI_CHAR
+
"
\
\
;
\
\
/
\
\
?
\
\
:
\
\
\
\
&
\
\
=
\
\
#
\
\
~
"
+
"
\
\
-
\
\
.
\
\
+
\
\
!
\
\
*
\
\
'
\
\
(
\
\
)
\
\
\
\
_
]
)
|
(
?
:
\
\
%
[
a
-
fA
-
F0
-
9
]
{
2
}
)
)
*
)
?
"
+
"
(
?
:
\
\
b
|
)
"
)
;
public
final
List
<
String
>
candidates
;
public
WebURLFinder
(
String
string
)
{
if
(
string
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
string
must
not
be
null
"
)
;
}
this
.
candidates
=
candidateWebURLs
(
string
)
;
}
public
WebURLFinder
(
List
<
String
>
strings
)
{
if
(
strings
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
strings
must
not
be
null
"
)
;
}
this
.
candidates
=
candidateWebURLs
(
strings
)
;
}
public
static
boolean
isWebURL
(
String
string
)
{
try
{
new
URI
(
string
)
;
}
catch
(
Exception
e
)
{
return
false
;
}
if
(
android
.
webkit
.
URLUtil
.
isFileUrl
(
string
)
|
|
android
.
webkit
.
URLUtil
.
isJavaScriptUrl
(
string
)
)
{
return
false
;
}
return
true
;
}
public
String
bestWebURL
(
)
{
String
firstWebURLWithScheme
=
firstWebURLWithScheme
(
)
;
if
(
firstWebURLWithScheme
!
=
null
)
{
return
firstWebURLWithScheme
;
}
return
firstWebURLWithoutScheme
(
)
;
}
protected
static
List
<
String
>
candidateWebURLs
(
Collection
<
String
>
strings
)
{
List
<
String
>
candidates
=
new
ArrayList
<
String
>
(
)
;
for
(
String
string
:
strings
)
{
if
(
string
=
=
null
)
{
continue
;
}
candidates
.
addAll
(
candidateWebURLs
(
string
)
)
;
}
return
candidates
;
}
protected
static
List
<
String
>
candidateWebURLs
(
String
string
)
{
Matcher
matcher
=
WEB_URL
.
matcher
(
string
)
;
List
<
String
>
matches
=
new
LinkedList
<
String
>
(
)
;
while
(
matcher
.
find
(
)
)
{
if
(
!
isWebURL
(
matcher
.
group
(
)
)
)
{
continue
;
}
if
(
matcher
.
start
(
)
>
0
&
&
(
string
.
charAt
(
matcher
.
start
(
)
-
1
)
=
=
'
'
)
)
{
continue
;
}
matches
.
add
(
matcher
.
group
(
)
)
;
}
return
matches
;
}
protected
String
firstWebURLWithScheme
(
)
{
for
(
String
match
:
candidates
)
{
try
{
if
(
new
URI
(
match
)
.
getScheme
(
)
!
=
null
)
{
return
match
;
}
}
catch
(
URISyntaxException
e
)
{
continue
;
}
}
return
null
;
}
protected
String
firstWebURLWithoutScheme
(
)
{
if
(
!
candidates
.
isEmpty
(
)
)
{
return
candidates
.
get
(
0
)
;
}
return
null
;
}
}
