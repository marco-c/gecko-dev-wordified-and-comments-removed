package
org
.
mozilla
.
gecko
.
sync
.
repositories
;
import
java
.
net
.
URISyntaxException
;
import
org
.
mozilla
.
gecko
.
sync
.
InfoCollections
;
import
org
.
mozilla
.
gecko
.
sync
.
InfoConfiguration
;
import
org
.
mozilla
.
gecko
.
sync
.
net
.
AuthHeaderProvider
;
import
org
.
mozilla
.
gecko
.
sync
.
stage
.
ServerSyncStage
;
public
class
ConfigurableServer15Repository
extends
Server15Repository
{
private
final
String
sortOrder
;
private
final
long
batchLimit
;
private
final
ServerSyncStage
.
MultipleBatches
multipleBatches
;
private
final
ServerSyncStage
.
HighWaterMark
highWaterMark
;
public
ConfigurableServer15Repository
(
String
collection
long
syncDeadline
String
storageURL
AuthHeaderProvider
authHeaderProvider
InfoCollections
infoCollections
InfoConfiguration
infoConfiguration
long
batchLimit
String
sort
ServerSyncStage
.
MultipleBatches
multipleBatches
ServerSyncStage
.
HighWaterMark
highWaterMark
RepositoryStateProvider
stateProvider
)
throws
URISyntaxException
{
super
(
collection
syncDeadline
storageURL
authHeaderProvider
infoCollections
infoConfiguration
stateProvider
)
;
this
.
batchLimit
=
batchLimit
;
this
.
sortOrder
=
sort
;
this
.
multipleBatches
=
multipleBatches
;
this
.
highWaterMark
=
highWaterMark
;
if
(
!
stateProvider
.
isPersistent
(
)
&
&
highWaterMark
.
equals
(
ServerSyncStage
.
HighWaterMark
.
Enabled
)
)
{
throw
new
IllegalArgumentException
(
"
Can
not
use
H
.
W
.
M
.
with
NonPersistentRepositoryStateProvider
"
)
;
}
}
Override
public
String
getSortOrder
(
)
{
return
sortOrder
;
}
Override
public
Long
getBatchLimit
(
)
{
return
batchLimit
;
}
Override
public
boolean
getAllowMultipleBatches
(
)
{
return
multipleBatches
.
equals
(
ServerSyncStage
.
MultipleBatches
.
Enabled
)
;
}
Override
public
boolean
getAllowHighWaterMark
(
)
{
return
highWaterMark
.
equals
(
ServerSyncStage
.
HighWaterMark
.
Enabled
)
;
}
}
