package
org
.
mozilla
.
gecko
.
sync
.
stage
;
import
org
.
mozilla
.
gecko
.
sync
.
MetaGlobalException
;
import
org
.
mozilla
.
gecko
.
sync
.
NonObjectJSONException
;
import
org
.
mozilla
.
gecko
.
sync
.
SynchronizerConfiguration
;
import
org
.
mozilla
.
gecko
.
sync
.
middleware
.
BufferingMiddlewareRepository
;
import
org
.
mozilla
.
gecko
.
sync
.
middleware
.
storage
.
MemoryBufferStorage
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
ConfigurableServer15Repository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
NonPersistentRepositoryStateProvider
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
PersistentRepositoryStateProvider
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
Repository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
RepositoryStateProvider
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
android
.
AndroidBrowserHistoryRepository
;
import
java
.
io
.
IOException
;
import
java
.
net
.
URISyntaxException
;
public
class
AndroidBrowserRecentHistoryServerSyncStage
extends
AndroidBrowserHistoryServerSyncStage
{
protected
static
final
String
LOG_TAG
=
"
RecentHistoryStage
"
;
private
static
final
int
HISTORY_BATCH_LIMIT
=
50
;
private
static
final
String
BUNDLE_NAME
=
"
recentHistory
.
"
;
private
static
final
String
HISTORY_SORT
=
"
newest
"
;
Override
public
String
bundlePrefix
(
)
{
return
BUNDLE_NAME
;
}
Override
protected
RepositoryStateProvider
getRepositoryStateProvider
(
)
{
return
new
NonPersistentRepositoryStateProvider
(
)
;
}
Override
protected
MultipleBatches
getAllowedMultipleBatches
(
)
{
return
MultipleBatches
.
Disabled
;
}
Override
protected
HighWaterMark
getAllowedToUseHighWaterMark
(
)
{
return
HighWaterMark
.
Disabled
;
}
Override
protected
Repository
getLocalRepository
(
)
{
return
new
BufferingMiddlewareRepository
(
session
.
getSyncDeadline
(
)
new
MemoryBufferStorage
(
)
new
AndroidBrowserHistoryRepository
(
)
)
;
}
Override
protected
Repository
getRemoteRepository
(
)
throws
URISyntaxException
{
return
new
ConfigurableServer15Repository
(
getCollection
(
)
session
.
getSyncDeadline
(
)
session
.
config
.
storageURL
(
)
session
.
getAuthHeaderProvider
(
)
session
.
config
.
infoCollections
session
.
config
.
infoConfiguration
HISTORY_BATCH_LIMIT
HISTORY_SORT
getAllowedMultipleBatches
(
)
getAllowedToUseHighWaterMark
(
)
getRepositoryStateProvider
(
)
)
;
}
Override
public
boolean
isEnabled
(
)
throws
MetaGlobalException
{
final
boolean
historyStageEnabled
=
super
.
isEnabled
(
)
;
if
(
!
historyStageEnabled
)
{
return
false
;
}
if
(
session
.
config
=
=
null
)
{
return
false
;
}
final
SynchronizerConfiguration
synchronizerConfiguration
;
try
{
synchronizerConfiguration
=
new
SynchronizerConfiguration
(
session
.
config
.
getBranch
(
getCollection
(
)
+
"
.
"
)
)
;
}
catch
(
IOException
|
NonObjectJSONException
e
)
{
return
false
;
}
return
synchronizerConfiguration
.
localBundle
.
getTimestamp
(
)
=
=
-
1
;
}
}
