package
org
.
mozilla
.
gecko
.
sync
.
stage
;
import
java
.
net
.
URISyntaxException
;
import
org
.
mozilla
.
gecko
.
sync
.
CryptoRecord
;
import
org
.
mozilla
.
gecko
.
sync
.
middleware
.
BufferingMiddlewareRepository
;
import
org
.
mozilla
.
gecko
.
sync
.
middleware
.
storage
.
MemoryBufferStorage
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
ConfigurableServer15Repository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
RecordFactory
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
Repository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
android
.
FormHistoryRepositorySession
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
domain
.
FormHistoryRecord
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
domain
.
Record
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
domain
.
VersionConstants
;
public
class
FormHistoryServerSyncStage
extends
ServerSyncStage
{
private
static
final
String
FORM_HISTORY_SORT
=
"
oldest
"
;
private
static
final
long
FORM_HISTORY_BATCH_LIMIT
=
5000
;
Override
protected
String
getCollection
(
)
{
return
"
forms
"
;
}
Override
protected
String
getEngineName
(
)
{
return
"
forms
"
;
}
Override
public
Integer
getStorageVersion
(
)
{
return
VersionConstants
.
FORMS_ENGINE_VERSION
;
}
Override
protected
Repository
getRemoteRepository
(
)
throws
URISyntaxException
{
String
collection
=
getCollection
(
)
;
return
new
ConfigurableServer15Repository
(
collection
session
.
getSyncDeadline
(
)
session
.
config
.
storageURL
(
)
session
.
getAuthHeaderProvider
(
)
session
.
config
.
infoCollections
session
.
config
.
infoConfiguration
FORM_HISTORY_BATCH_LIMIT
FORM_HISTORY_SORT
true
)
;
}
Override
protected
Repository
getLocalRepository
(
)
{
return
new
BufferingMiddlewareRepository
(
session
.
getSyncDeadline
(
)
new
MemoryBufferStorage
(
)
new
FormHistoryRepositorySession
.
FormHistoryRepository
(
)
)
;
}
public
class
FormHistoryRecordFactory
extends
RecordFactory
{
Override
public
Record
createRecord
(
Record
record
)
{
FormHistoryRecord
r
=
new
FormHistoryRecord
(
)
;
r
.
initFromEnvelope
(
(
CryptoRecord
)
record
)
;
return
r
;
}
}
Override
protected
RecordFactory
getRecordFactory
(
)
{
return
new
FormHistoryRecordFactory
(
)
;
}
}
