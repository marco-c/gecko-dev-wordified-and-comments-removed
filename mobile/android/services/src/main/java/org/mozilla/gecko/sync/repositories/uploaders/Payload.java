package
org
.
mozilla
.
gecko
.
sync
.
repositories
.
uploaders
;
import
android
.
support
.
annotation
.
CheckResult
;
import
java
.
util
.
ArrayList
;
public
class
Payload
extends
BufferSizeTracker
{
private
final
ArrayList
<
byte
[
]
>
recordsBuffer
=
new
ArrayList
<
>
(
)
;
private
final
ArrayList
<
String
>
recordGuidsBuffer
=
new
ArrayList
<
>
(
)
;
public
Payload
(
Object
payloadLock
long
maxBytes
long
maxRecords
)
{
super
(
payloadLock
maxBytes
maxRecords
)
;
}
Override
protected
boolean
addAndEstimateIfFull
(
long
recordDelta
)
{
throw
new
UnsupportedOperationException
(
)
;
}
CheckResult
protected
boolean
addAndEstimateIfFull
(
long
recordDelta
byte
[
]
recordBytes
String
guid
)
{
synchronized
(
accessLock
)
{
recordsBuffer
.
add
(
recordBytes
)
;
recordGuidsBuffer
.
add
(
guid
)
;
return
super
.
addAndEstimateIfFull
(
recordDelta
)
;
}
}
protected
ArrayList
<
byte
[
]
>
getRecordsBuffer
(
)
{
synchronized
(
accessLock
)
{
return
new
ArrayList
<
>
(
recordsBuffer
)
;
}
}
protected
ArrayList
<
String
>
getRecordGuidsBuffer
(
)
{
synchronized
(
accessLock
)
{
return
new
ArrayList
<
>
(
recordGuidsBuffer
)
;
}
}
protected
boolean
isEmpty
(
)
{
synchronized
(
accessLock
)
{
return
recordsBuffer
.
isEmpty
(
)
;
}
}
Payload
nextPayload
(
)
{
return
new
Payload
(
accessLock
maxBytes
maxRecords
)
;
}
}
