package
org
.
mozilla
.
gecko
.
sync
.
stage
;
import
java
.
net
.
URISyntaxException
;
import
org
.
mozilla
.
gecko
.
sync
.
MetaGlobalException
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
ConfigurableServer15Repository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
PersistentRepositoryStateProvider
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
RecordFactory
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
Repository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
RepositoryStateProvider
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
android
.
HistoryRepository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
domain
.
HistoryRecordFactory
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
domain
.
VersionConstants
;
public
class
HistoryServerSyncStage
extends
ServerSyncStage
{
protected
static
final
String
LOG_TAG
=
"
HistoryStage
"
;
private
static
final
String
HISTORY_SORT
=
"
oldest
"
;
private
static
final
long
HISTORY_BATCH_LIMIT
=
500
;
Override
protected
String
getCollection
(
)
{
return
"
history
"
;
}
Override
protected
String
getEngineName
(
)
{
return
"
history
"
;
}
Override
public
Integer
getStorageVersion
(
)
{
return
VersionConstants
.
HISTORY_ENGINE_VERSION
;
}
Override
protected
Repository
getLocalRepository
(
)
{
return
new
HistoryRepository
(
)
;
}
Override
protected
RepositoryStateProvider
getRepositoryStateProvider
(
)
{
return
new
PersistentRepositoryStateProvider
(
session
.
config
.
getBranch
(
statePreferencesPrefix
(
)
)
)
;
}
Override
protected
HighWaterMark
getAllowedToUseHighWaterMark
(
)
{
return
HighWaterMark
.
Enabled
;
}
Override
protected
MultipleBatches
getAllowedMultipleBatches
(
)
{
return
MultipleBatches
.
Enabled
;
}
Override
protected
Repository
getRemoteRepository
(
)
throws
URISyntaxException
{
return
new
ConfigurableServer15Repository
(
getCollection
(
)
session
.
getSyncDeadline
(
)
session
.
config
.
storageURL
(
)
session
.
getAuthHeaderProvider
(
)
session
.
config
.
infoCollections
session
.
config
.
infoConfiguration
HISTORY_BATCH_LIMIT
HISTORY_SORT
getAllowedMultipleBatches
(
)
getAllowedToUseHighWaterMark
(
)
getRepositoryStateProvider
(
)
false
false
)
;
}
Override
protected
RecordFactory
getRecordFactory
(
)
{
return
new
HistoryRecordFactory
(
)
;
}
Override
protected
boolean
isEnabled
(
)
throws
MetaGlobalException
{
if
(
session
=
=
null
|
|
session
.
getContext
(
)
=
=
null
)
{
return
false
;
}
return
super
.
isEnabled
(
)
;
}
}
