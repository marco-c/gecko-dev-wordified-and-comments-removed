package
org
.
mozilla
.
gecko
.
sync
.
stage
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
android
.
os
.
SystemClock
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
sync
.
MetaGlobalException
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
ConfigurableServer15Repository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
RecordFactory
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
Repository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
android
.
BookmarksValidationRepository
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
android
.
BrowserContractHelpers
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
domain
.
BookmarkRecordFactory
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
domain
.
VersionConstants
;
import
org
.
mozilla
.
gecko
.
sync
.
telemetry
.
TelemetryCollector
;
import
org
.
mozilla
.
gecko
.
sync
.
telemetry
.
TelemetryStageCollector
;
import
java
.
net
.
URISyntaxException
;
import
java
.
util
.
concurrent
.
TimeUnit
;
public
class
ValidateBookmarksSyncStage
extends
ServerSyncStage
{
protected
static
final
String
LOG_TAG
=
"
ValidateBookmarksStage
"
;
private
static
final
String
BOOKMARKS_SORT
=
"
oldest
"
;
private
static
final
long
BOOKMARKS_BATCH_LIMIT
=
5000
;
private
static
final
long
MAX_BOOKMARKS_COUNT
=
1000
;
private
static
final
double
VALIDATION_PROBABILITY
=
0
.
1
;
private
static
final
long
TIME_REQUIRED_TO_VALIDATE
=
TimeUnit
.
MINUTES
.
toMillis
(
2
)
;
private
static
final
long
VALIDATION_INTERVAL
=
TimeUnit
.
DAYS
.
toMillis
(
1
)
;
Override
protected
String
getCollection
(
)
{
return
"
bookmarks
"
;
}
Override
protected
String
getEngineName
(
)
{
return
"
bookmarks
"
;
}
Override
public
Integer
getStorageVersion
(
)
{
return
VersionConstants
.
BOOKMARKS_ENGINE_VERSION
;
}
Override
protected
HighWaterMark
getAllowedToUseHighWaterMark
(
)
{
return
HighWaterMark
.
Disabled
;
}
Override
protected
MultipleBatches
getAllowedMultipleBatches
(
)
{
return
MultipleBatches
.
Enabled
;
}
Override
protected
Repository
getRemoteRepository
(
)
throws
URISyntaxException
{
return
new
ConfigurableServer15Repository
(
getCollection
(
)
session
.
getSyncDeadline
(
)
session
.
config
.
storageURL
(
)
session
.
getAuthHeaderProvider
(
)
session
.
config
.
infoCollections
session
.
config
.
infoConfiguration
BOOKMARKS_BATCH_LIMIT
BOOKMARKS_SORT
getAllowedMultipleBatches
(
)
getAllowedToUseHighWaterMark
(
)
getRepositoryStateProvider
(
)
true
false
)
;
}
Override
protected
Repository
getLocalRepository
(
)
{
TelemetryStageCollector
bookmarkCollector
=
this
.
telemetryStageCollector
.
getSyncCollector
(
)
.
collectorFor
(
"
bookmarks
"
)
;
return
new
BookmarksValidationRepository
(
session
.
getClientsDelegate
(
)
bookmarkCollector
)
;
}
Override
protected
RecordFactory
getRecordFactory
(
)
{
return
new
BookmarkRecordFactory
(
)
;
}
private
long
getLocalBookmarkRecordCount
(
)
{
final
Context
context
=
session
.
getContext
(
)
;
final
Cursor
cursor
=
context
.
getContentResolver
(
)
.
query
(
BrowserContractHelpers
.
BOOKMARKS_CONTENT_URI
new
String
[
]
{
BrowserContract
.
Bookmarks
.
_ID
}
null
null
null
)
;
if
(
cursor
=
=
null
)
{
return
-
1
;
}
try
{
return
cursor
.
getCount
(
)
;
}
finally
{
cursor
.
close
(
)
;
}
}
private
boolean
shouldValidate
(
)
{
if
(
!
AppConstants
.
NIGHTLY_BUILD
)
{
return
false
;
}
final
long
consideredValidationLast
=
session
.
config
.
getLastValidationCheckTimestamp
(
)
;
final
long
now
=
System
.
currentTimeMillis
(
)
;
if
(
now
-
consideredValidationLast
<
VALIDATION_INTERVAL
)
{
return
false
;
}
session
.
config
.
persistLastValidationCheckTimestamp
(
now
)
;
if
(
Math
.
random
(
)
>
VALIDATION_PROBABILITY
)
{
return
false
;
}
final
long
timeToSyncDeadline
=
session
.
getSyncDeadline
(
)
-
SystemClock
.
elapsedRealtime
(
)
;
if
(
timeToSyncDeadline
<
TIME_REQUIRED_TO_VALIDATE
)
{
return
false
;
}
TelemetryCollector
syncCollector
=
telemetryStageCollector
.
getSyncCollector
(
)
;
if
(
!
syncCollector
.
hasCollectorFor
(
"
bookmarks
"
)
)
{
return
false
;
}
TelemetryStageCollector
stageCollector
=
syncCollector
.
collectorFor
(
"
bookmarks
"
)
;
if
(
stageCollector
.
error
!
=
null
)
{
return
false
;
}
long
count
=
getLocalBookmarkRecordCount
(
)
;
if
(
count
<
0
|
|
count
>
MAX_BOOKMARKS_COUNT
)
{
return
false
;
}
return
true
;
}
Override
protected
boolean
isEnabled
(
)
throws
MetaGlobalException
{
if
(
session
=
=
null
|
|
session
.
getContext
(
)
=
=
null
)
{
return
false
;
}
return
super
.
isEnabled
(
)
&
&
shouldValidate
(
)
;
}
}
