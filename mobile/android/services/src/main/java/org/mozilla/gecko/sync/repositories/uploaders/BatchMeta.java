package
org
.
mozilla
.
gecko
.
sync
.
repositories
.
uploaders
;
import
android
.
support
.
annotation
.
CheckResult
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
org
.
mozilla
.
gecko
.
background
.
common
.
log
.
Logger
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
uploaders
.
BatchingUploader
.
TokenModifiedException
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
uploaders
.
BatchingUploader
.
LastModifiedChangedUnexpectedly
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
uploaders
.
BatchingUploader
.
LastModifiedDidNotChange
;
public
class
BatchMeta
extends
BufferSizeTracker
{
private
static
final
String
LOG_TAG
=
"
BatchMeta
"
;
private
Long
lastModified
;
private
String
token
;
private
boolean
isUnlimited
=
false
;
private
final
List
<
String
>
successRecordGuids
=
new
ArrayList
<
>
(
)
;
private
boolean
needsCommit
=
false
;
protected
final
Long
collectionLastModified
;
public
BatchMeta
(
NonNull
Object
payloadLock
long
maxBytes
long
maxRecords
Nullable
Long
collectionLastModified
)
{
super
(
payloadLock
maxBytes
maxRecords
)
;
this
.
collectionLastModified
=
collectionLastModified
;
}
protected
void
setIsUnlimited
(
boolean
isUnlimited
)
{
synchronized
(
accessLock
)
{
this
.
isUnlimited
=
isUnlimited
;
}
}
Override
protected
boolean
canFit
(
long
recordDeltaByteCount
)
{
synchronized
(
accessLock
)
{
return
isUnlimited
|
|
super
.
canFit
(
recordDeltaByteCount
)
;
}
}
Override
CheckResult
protected
boolean
addAndEstimateIfFull
(
long
recordDeltaByteCount
)
{
synchronized
(
accessLock
)
{
needsCommit
=
true
;
boolean
isFull
=
super
.
addAndEstimateIfFull
(
recordDeltaByteCount
)
;
return
!
isUnlimited
&
&
isFull
;
}
}
protected
boolean
needToCommit
(
)
{
synchronized
(
accessLock
)
{
return
needsCommit
;
}
}
protected
synchronized
String
getToken
(
)
{
return
token
;
}
protected
synchronized
void
setToken
(
final
String
newToken
boolean
isCommit
)
throws
TokenModifiedException
{
if
(
token
=
=
null
)
{
token
=
newToken
;
return
;
}
if
(
isCommit
)
{
if
(
newToken
!
=
null
)
{
throw
new
TokenModifiedException
(
)
;
}
else
{
token
=
null
;
}
return
;
}
if
(
!
token
.
equals
(
newToken
)
)
{
throw
new
TokenModifiedException
(
)
;
}
}
protected
synchronized
Long
getLastModified
(
)
{
if
(
lastModified
=
=
null
)
{
return
collectionLastModified
;
}
return
lastModified
;
}
protected
synchronized
void
setLastModified
(
final
Long
newLastModified
final
boolean
expectedToChange
)
throws
LastModifiedChangedUnexpectedly
LastModifiedDidNotChange
{
if
(
lastModified
=
=
null
)
{
lastModified
=
newLastModified
;
return
;
}
if
(
!
expectedToChange
&
&
!
lastModified
.
equals
(
newLastModified
)
)
{
Logger
.
debug
(
LOG_TAG
"
Last
-
Modified
timestamp
changed
when
we
didn
'
t
expect
it
"
)
;
throw
new
LastModifiedChangedUnexpectedly
(
)
;
}
else
if
(
expectedToChange
&
&
lastModified
.
equals
(
newLastModified
)
)
{
Logger
.
debug
(
LOG_TAG
"
Last
-
Modified
timestamp
did
not
change
when
we
expected
it
to
"
)
;
throw
new
LastModifiedDidNotChange
(
)
;
}
else
{
lastModified
=
newLastModified
;
}
}
protected
ArrayList
<
String
>
getSuccessRecordGuids
(
)
{
synchronized
(
accessLock
)
{
return
new
ArrayList
<
>
(
this
.
successRecordGuids
)
;
}
}
protected
void
recordSucceeded
(
final
String
recordGuid
)
{
if
(
recordGuid
=
=
null
)
{
throw
new
IllegalStateException
(
)
;
}
synchronized
(
accessLock
)
{
successRecordGuids
.
add
(
recordGuid
)
;
}
}
Override
protected
boolean
canFitRecordByteDelta
(
long
byteDelta
long
recordCount
long
byteCount
)
{
return
isUnlimited
|
|
super
.
canFitRecordByteDelta
(
byteDelta
recordCount
byteCount
)
;
}
Override
protected
void
reset
(
)
{
synchronized
(
accessLock
)
{
super
.
reset
(
)
;
token
=
null
;
lastModified
=
null
;
successRecordGuids
.
clear
(
)
;
needsCommit
=
false
;
}
}
}
