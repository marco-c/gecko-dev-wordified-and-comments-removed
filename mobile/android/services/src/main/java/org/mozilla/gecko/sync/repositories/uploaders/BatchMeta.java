package
org
.
mozilla
.
gecko
.
sync
.
repositories
.
uploaders
;
import
android
.
support
.
annotation
.
Nullable
;
import
org
.
mozilla
.
gecko
.
background
.
common
.
log
.
Logger
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
import
java
.
util
.
concurrent
.
ConcurrentLinkedQueue
;
public
class
BatchMeta
{
private
static
final
String
LOG_TAG
=
"
BatchMeta
"
;
private
volatile
Boolean
inBatchingMode
;
Nullable
private
volatile
Long
lastModified
;
private
volatile
String
token
;
private
final
ConcurrentLinkedQueue
<
String
>
successRecordGuids
=
new
ConcurrentLinkedQueue
<
>
(
)
;
BatchMeta
(
Nullable
Long
initialLastModified
Boolean
initialInBatchingMode
)
{
lastModified
=
initialLastModified
;
inBatchingMode
=
initialInBatchingMode
;
}
String
[
]
getSuccessRecordGuids
(
)
{
final
String
[
]
guids
=
new
String
[
this
.
successRecordGuids
.
size
(
)
]
;
this
.
successRecordGuids
.
toArray
(
guids
)
;
return
guids
;
}
void
recordSucceeded
(
final
String
recordGuid
)
{
if
(
recordGuid
=
=
null
)
{
throw
new
IllegalStateException
(
"
Record
guid
is
unexpectedly
null
"
)
;
}
successRecordGuids
.
add
(
recordGuid
)
;
}
void
clearSuccessRecordGuids
(
)
{
successRecordGuids
.
clear
(
)
;
}
void
setInBatchingMode
(
boolean
inBatchingMode
)
{
this
.
inBatchingMode
=
inBatchingMode
;
}
Boolean
getInBatchingMode
(
)
{
return
inBatchingMode
;
}
Nullable
protected
Long
getLastModified
(
)
{
return
lastModified
;
}
void
setLastModified
(
final
Long
newLastModified
final
boolean
expectedToChange
)
throws
BatchingUploader
.
LastModifiedChangedUnexpectedly
BatchingUploader
.
LastModifiedDidNotChange
{
if
(
lastModified
=
=
null
)
{
lastModified
=
newLastModified
;
return
;
}
if
(
!
expectedToChange
&
&
!
lastModified
.
equals
(
newLastModified
)
)
{
Logger
.
debug
(
LOG_TAG
"
Last
-
Modified
timestamp
changed
when
we
didn
'
t
expect
it
"
)
;
throw
new
BatchingUploader
.
LastModifiedChangedUnexpectedly
(
)
;
}
else
if
(
expectedToChange
&
&
lastModified
.
equals
(
newLastModified
)
)
{
Logger
.
debug
(
LOG_TAG
"
Last
-
Modified
timestamp
did
not
change
when
we
expected
it
to
"
)
;
throw
new
BatchingUploader
.
LastModifiedDidNotChange
(
)
;
}
else
{
lastModified
=
newLastModified
;
}
}
Nullable
protected
String
getToken
(
)
{
return
token
;
}
void
setToken
(
final
String
newToken
boolean
isCommit
)
throws
BatchingUploader
.
TokenModifiedException
{
if
(
token
=
=
null
)
{
token
=
newToken
;
return
;
}
if
(
isCommit
)
{
if
(
newToken
!
=
null
)
{
throw
new
BatchingUploader
.
TokenModifiedException
(
)
;
}
else
{
token
=
null
;
}
return
;
}
if
(
!
token
.
equals
(
newToken
)
)
{
throw
new
BatchingUploader
.
TokenModifiedException
(
)
;
}
}
BatchMeta
nextBatchMeta
(
)
{
return
new
BatchMeta
(
lastModified
inBatchingMode
)
;
}
}
