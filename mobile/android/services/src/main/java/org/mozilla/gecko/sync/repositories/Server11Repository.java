package
org
.
mozilla
.
gecko
.
sync
.
repositories
;
import
java
.
net
.
URI
;
import
java
.
net
.
URISyntaxException
;
import
org
.
mozilla
.
gecko
.
sync
.
InfoCollections
;
import
org
.
mozilla
.
gecko
.
sync
.
InfoConfiguration
;
import
org
.
mozilla
.
gecko
.
sync
.
net
.
AuthHeaderProvider
;
import
org
.
mozilla
.
gecko
.
sync
.
repositories
.
delegates
.
RepositorySessionCreationDelegate
;
import
android
.
content
.
Context
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
public
class
Server11Repository
extends
Repository
{
public
final
AuthHeaderProvider
authHeaderProvider
;
final
long
syncDeadline
;
final
URI
collectionURI
;
protected
final
String
collection
;
protected
final
InfoCollections
infoCollections
;
private
final
InfoConfiguration
infoConfiguration
;
private
final
static
String
DEFAULT_SORT_ORDER
=
"
oldest
"
;
private
final
static
long
DEFAULT_BATCH_LIMIT
=
100
;
public
Server11Repository
(
NonNull
String
collection
NonNull
String
storageURL
AuthHeaderProvider
authHeaderProvider
NonNull
InfoCollections
infoCollections
NonNull
InfoConfiguration
infoConfiguration
)
throws
URISyntaxException
{
if
(
collection
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
collection
must
not
be
null
"
)
;
}
if
(
storageURL
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
storageURL
must
not
be
null
"
)
;
}
if
(
infoCollections
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
infoCollections
must
not
be
null
"
)
;
}
this
.
collection
=
collection
;
this
.
collectionURI
=
new
URI
(
storageURL
+
(
storageURL
.
endsWith
(
"
/
"
)
?
collection
:
"
/
"
+
collection
)
)
;
this
.
authHeaderProvider
=
authHeaderProvider
;
this
.
infoCollections
=
infoCollections
;
this
.
infoConfiguration
=
infoConfiguration
;
}
Override
public
void
createSession
(
RepositorySessionCreationDelegate
delegate
Context
context
)
{
delegate
.
onSessionCreated
(
new
Server11RepositorySession
(
this
)
)
;
}
public
URI
collectionURI
(
)
{
return
this
.
collectionURI
;
}
boolean
updateNeeded
(
long
lastSyncTimestamp
)
{
return
infoCollections
.
updateNeeded
(
collection
lastSyncTimestamp
)
;
}
Nullable
Long
getCollectionLastModified
(
)
{
return
infoCollections
.
getTimestamp
(
collection
)
;
}
public
InfoConfiguration
getInfoConfiguration
(
)
{
return
infoConfiguration
;
}
public
String
getSortOrder
(
)
{
return
DEFAULT_SORT_ORDER
;
}
public
Long
getBatchLimit
(
)
{
return
DEFAULT_BATCH_LIMIT
;
}
public
boolean
getAllowMultipleBatches
(
)
{
return
true
;
}
}
