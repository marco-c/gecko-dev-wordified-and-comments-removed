package
org
.
mozilla
.
gecko
.
fxa
;
import
java
.
io
.
File
;
import
java
.
util
.
concurrent
.
CountDownLatch
;
import
org
.
mozilla
.
gecko
.
background
.
common
.
log
.
Logger
;
import
org
.
mozilla
.
gecko
.
fxa
.
authenticator
.
AccountPickler
;
import
org
.
mozilla
.
gecko
.
fxa
.
authenticator
.
AndroidFxAccount
;
import
org
.
mozilla
.
gecko
.
fxa
.
login
.
State
;
import
org
.
mozilla
.
gecko
.
fxa
.
sync
.
FxAccountSyncStatusHelper
;
import
org
.
mozilla
.
gecko
.
sync
.
ThreadPool
;
import
org
.
mozilla
.
gecko
.
sync
.
Utils
;
import
android
.
accounts
.
Account
;
import
android
.
accounts
.
AccountManager
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
os
.
Bundle
;
public
class
FirefoxAccounts
{
private
static
final
String
LOG_TAG
=
FirefoxAccounts
.
class
.
getSimpleName
(
)
;
public
static
boolean
firefoxAccountsExist
(
final
Context
context
)
{
return
getFirefoxAccounts
(
context
)
.
length
>
0
;
}
public
static
Account
[
]
getFirefoxAccounts
(
final
Context
context
)
{
final
Account
[
]
accounts
=
AccountManager
.
get
(
context
)
.
getAccountsByType
(
FxAccountConstants
.
ACCOUNT_TYPE
)
;
if
(
accounts
.
length
>
0
)
{
return
accounts
;
}
final
Account
pickledAccount
=
getPickledAccount
(
context
)
;
return
(
pickledAccount
!
=
null
)
?
new
Account
[
]
{
pickledAccount
}
:
new
Account
[
0
]
;
}
private
static
Account
getPickledAccount
(
final
Context
context
)
{
final
CountDownLatch
latch
=
new
CountDownLatch
(
1
)
;
final
Account
[
]
accounts
=
new
Account
[
1
]
;
ThreadPool
.
run
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
final
File
file
=
context
.
getFileStreamPath
(
FxAccountConstants
.
ACCOUNT_PICKLE_FILENAME
)
;
if
(
!
file
.
exists
(
)
)
{
accounts
[
0
]
=
null
;
return
;
}
final
AndroidFxAccount
fxAccount
=
AccountPickler
.
unpickle
(
context
FxAccountConstants
.
ACCOUNT_PICKLE_FILENAME
)
;
accounts
[
0
]
=
fxAccount
!
=
null
?
fxAccount
.
getAndroidAccount
(
)
:
null
;
}
finally
{
latch
.
countDown
(
)
;
}
}
}
)
;
try
{
latch
.
await
(
)
;
}
catch
(
InterruptedException
e
)
{
Logger
.
warn
(
LOG_TAG
"
Foreground
thread
unexpectedly
interrupted
while
getting
pickled
account
"
e
)
;
return
null
;
}
return
accounts
[
0
]
;
}
public
static
Account
getFirefoxAccount
(
final
Context
context
)
{
Account
[
]
accounts
=
getFirefoxAccounts
(
context
)
;
if
(
accounts
.
length
>
0
)
{
return
accounts
[
0
]
;
}
return
null
;
}
public
static
State
getFirefoxAccountState
(
final
Context
context
)
{
final
Account
account
=
getFirefoxAccount
(
context
)
;
if
(
account
=
=
null
)
{
return
null
;
}
final
AndroidFxAccount
fxAccount
=
new
AndroidFxAccount
(
context
account
)
;
try
{
return
fxAccount
.
getState
(
)
;
}
catch
(
final
Exception
ex
)
{
Logger
.
warn
(
LOG_TAG
"
Could
not
get
FX
account
state
.
"
ex
)
;
return
null
;
}
}
public
static
String
getFirefoxAccountEmail
(
final
Context
context
)
{
final
Account
account
=
getFirefoxAccount
(
context
)
;
if
(
account
=
=
null
)
{
return
null
;
}
return
account
.
name
;
}
public
static
void
logSyncOptions
(
Bundle
syncOptions
)
{
final
boolean
scheduleNow
=
syncOptions
.
getBoolean
(
ContentResolver
.
SYNC_EXTRAS_IGNORE_BACKOFF
false
)
;
Logger
.
info
(
LOG_TAG
"
Sync
options
-
-
scheduling
now
:
"
+
scheduleNow
)
;
}
public
static
void
requestImmediateSync
(
final
Account
account
String
[
]
stagesToSync
String
[
]
stagesToSkip
boolean
ignoreSettings
)
{
final
Bundle
syncOptions
=
new
Bundle
(
)
;
if
(
ignoreSettings
)
{
syncOptions
.
putBoolean
(
ContentResolver
.
SYNC_EXTRAS_IGNORE_SETTINGS
true
)
;
}
syncOptions
.
putBoolean
(
ContentResolver
.
SYNC_EXTRAS_IGNORE_BACKOFF
true
)
;
syncOptions
.
putBoolean
(
ContentResolver
.
SYNC_EXTRAS_EXPEDITED
true
)
;
requestSync
(
account
syncOptions
stagesToSync
stagesToSkip
)
;
}
public
static
void
requestEventualSync
(
final
Account
account
String
[
]
stagesToSync
String
[
]
stagesToSkip
)
{
requestSync
(
account
Bundle
.
EMPTY
stagesToSync
stagesToSkip
)
;
}
protected
static
void
requestSync
(
final
Account
account
final
Bundle
syncOptions
String
[
]
stagesToSync
String
[
]
stagesToSkip
)
{
if
(
account
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
account
must
not
be
null
"
)
;
}
if
(
syncOptions
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
syncOptions
must
not
be
null
"
)
;
}
Utils
.
putStageNamesToSync
(
syncOptions
stagesToSync
stagesToSkip
)
;
Logger
.
info
(
LOG_TAG
"
Requesting
sync
.
"
)
;
logSyncOptions
(
syncOptions
)
;
ThreadPool
.
run
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
for
(
String
authority
:
AndroidFxAccount
.
DEFAULT_AUTHORITIES_TO_SYNC_AUTOMATICALLY_MAP
.
keySet
(
)
)
{
ContentResolver
.
requestSync
(
account
authority
syncOptions
)
;
}
}
}
)
;
}
public
static
void
addSyncStatusListener
(
SyncStatusListener
syncStatusListener
)
{
FxAccountSyncStatusHelper
.
getInstance
(
)
.
startObserving
(
syncStatusListener
)
;
}
public
static
void
removeSyncStatusListener
(
SyncStatusListener
syncStatusListener
)
{
FxAccountSyncStatusHelper
.
getInstance
(
)
.
stopObserving
(
syncStatusListener
)
;
}
}
