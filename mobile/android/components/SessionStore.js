"
use
strict
"
;
const
{
AppConstants
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
EventDispatcher
:
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
OS
:
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
PrivacyFilter
:
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
PrivacyFilter
.
jsm
"
PrivateBrowsingUtils
:
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
SessionHistory
:
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
SessionHistory
.
jsm
"
SharedPreferences
:
"
resource
:
/
/
gre
/
modules
/
SharedPreferences
.
jsm
"
Utils
:
"
resource
:
/
/
gre
/
modules
/
sessionstore
/
Utils
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Log
"
"
resource
:
/
/
gre
/
modules
/
AndroidLog
.
jsm
"
"
AndroidLog
"
)
;
function
dump
(
a
)
{
Services
.
console
.
logStringMessage
(
a
)
;
}
let
loggingEnabled
=
false
;
function
log
(
a
)
{
if
(
!
loggingEnabled
)
{
return
;
}
Log
.
d
(
"
SessionStore
"
a
)
;
}
const
INVALID_TAB_ID
=
-
1
;
const
INVALID_TAB_INDEX
=
-
1
;
const
STATE_STOPPED
=
0
;
const
STATE_RUNNING
=
1
;
const
STATE_QUITTING
=
-
1
;
const
STATE_QUITTING_FLUSHED
=
-
2
;
const
PREFS_RESTORE_FROM_CRASH
=
"
browser
.
sessionstore
.
resume_from_crash
"
;
const
PREFS_MAX_CRASH_RESUMES
=
"
browser
.
sessionstore
.
max_resumed_crashes
"
;
const
PREFS_MAX_TABS_UNDO
=
"
browser
.
sessionstore
.
max_tabs_undo
"
;
const
MINIMUM_SAVE_DELAY
=
2000
;
const
SAVE_INTERVAL_PRIVATE_TABS
=
500
;
function
SessionStore
(
)
{
}
function
sendEvent
(
browser
event
)
{
let
evt
=
new
Event
(
event
{
"
bubbles
"
:
true
"
cancelable
"
:
false
}
)
;
browser
.
dispatchEvent
(
evt
)
;
}
SessionStore
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
8c1f07d6
-
cba3
-
4226
-
a315
-
8bd43d67d032
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsISessionStore
Ci
.
nsIObserver
Ci
.
nsISupportsWeakReference
]
)
_windows
:
{
}
_lastSaveTime
:
0
_lastQueuedSaveTime
:
0
_lastBackupTime
:
0
_interval
:
10000
_backupInterval
:
120000
_maxTabsUndo
:
5
_pendingWrite
:
0
_pendingWritePrivateOnly
:
0
_scrollSavePending
:
null
_formdataSavePending
:
null
_writeInProgress
:
false
_sessionDataIsGood
:
false
_lastClosedTabIndex
:
INVALID_TAB_INDEX
_notifyClosedTabs
:
false
_keepAsZombieTabId
:
INVALID_TAB_ID
init
(
)
{
loggingEnabled
=
Services
.
prefs
.
getBoolPref
(
"
browser
.
sessionstore
.
debug_logging
"
)
;
this
.
_sessionFile
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
this
.
_sessionFileBackup
=
this
.
_sessionFile
.
clone
(
)
;
this
.
_sessionFilePrevious
=
this
.
_sessionFile
.
clone
(
)
;
this
.
_sessionFileTemp
=
this
.
_sessionFile
.
clone
(
)
;
this
.
_sessionFile
.
append
(
"
sessionstore
.
js
"
)
;
this
.
_sessionFileBackup
.
append
(
"
sessionstore
.
bak
"
)
;
this
.
_sessionFilePrevious
.
append
(
"
sessionstore
.
old
"
)
;
this
.
_sessionFileTemp
.
append
(
this
.
_sessionFile
.
leafName
+
"
.
tmp
"
)
;
this
.
_loadState
=
STATE_STOPPED
;
this
.
_startupRestoreFinished
=
false
;
this
.
_interval
=
Services
.
prefs
.
getIntPref
(
"
browser
.
sessionstore
.
interval
"
)
;
this
.
_backupInterval
=
Services
.
prefs
.
getIntPref
(
"
browser
.
sessionstore
.
backupInterval
"
)
;
this
.
_updateMaxTabsUndo
(
)
;
Services
.
prefs
.
addObserver
(
PREFS_MAX_TABS_UNDO
(
)
=
>
{
this
.
_updateMaxTabsUndo
(
)
;
}
)
;
SharedPreferences
.
forApp
(
)
.
setBoolPref
(
PREFS_RESTORE_FROM_CRASH
Services
.
prefs
.
getBoolPref
(
PREFS_RESTORE_FROM_CRASH
)
)
;
SharedPreferences
.
forApp
(
)
.
setIntPref
(
PREFS_MAX_CRASH_RESUMES
Services
.
prefs
.
getIntPref
(
PREFS_MAX_CRASH_RESUMES
)
)
;
}
_updateMaxTabsUndo
(
)
{
this
.
_maxTabsUndo
=
Services
.
prefs
.
getIntPref
(
PREFS_MAX_TABS_UNDO
)
;
if
(
this
.
_maxTabsUndo
=
=
0
)
{
this
.
_forgetClosedTabs
(
)
;
}
}
_purgeHistory
(
topic
)
{
log
(
topic
)
;
this
.
_clearDisk
(
)
;
this
.
_forgetClosedTabs
(
)
;
if
(
topic
=
=
"
browser
:
purge
-
session
-
history
"
)
{
this
.
_forEachBrowserWindow
(
(
window
)
=
>
{
let
tabs
=
window
.
BrowserApp
.
tabs
;
for
(
let
i
=
0
;
i
<
tabs
.
length
;
i
+
+
)
{
let
data
=
tabs
[
i
]
.
browser
.
__SS_data
;
let
sHistory
=
data
.
entries
;
sHistory
.
push
(
sHistory
[
data
.
index
-
1
]
)
;
sHistory
.
splice
(
0
sHistory
.
length
-
1
)
;
data
.
index
=
1
;
}
}
)
;
}
if
(
this
.
_loadState
=
=
STATE_RUNNING
)
{
this
.
saveState
(
)
;
}
else
if
(
this
.
_loadState
<
=
STATE_QUITTING
)
{
this
.
saveStateDelayed
(
)
;
if
(
this
.
_loadState
=
=
STATE_QUITTING_FLUSHED
)
{
this
.
flushPendingState
(
)
;
}
}
Services
.
obs
.
notifyObservers
(
null
"
sessionstore
-
state
-
purge
-
complete
"
)
;
if
(
this
.
_notifyClosedTabs
)
{
this
.
_sendClosedTabsToJava
(
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
)
;
}
}
_clearDisk
(
)
{
this
.
_sessionDataIsGood
=
false
;
this
.
_lastBackupTime
=
0
;
if
(
this
.
_loadState
>
STATE_QUITTING
)
{
OS
.
File
.
remove
(
this
.
_sessionFile
.
path
)
;
OS
.
File
.
remove
(
this
.
_sessionFileBackup
.
path
)
;
OS
.
File
.
remove
(
this
.
_sessionFilePrevious
.
path
)
;
OS
.
File
.
remove
(
this
.
_sessionFileTemp
.
path
)
;
}
else
{
if
(
this
.
_sessionFile
.
exists
(
)
)
{
this
.
_sessionFile
.
remove
(
false
)
;
}
if
(
this
.
_sessionFileBackup
.
exists
(
)
)
{
this
.
_sessionFileBackup
.
remove
(
false
)
;
}
if
(
this
.
_sessionFilePrevious
.
exists
(
)
)
{
this
.
_sessionFilePrevious
.
remove
(
false
)
;
}
if
(
this
.
_sessionFileTemp
.
exists
(
)
)
{
this
.
_sessionFileTemp
.
remove
(
false
)
;
}
}
}
_forgetClosedTabs
(
)
{
for
(
let
win
of
Object
.
values
(
this
.
_windows
)
)
{
win
.
closedTabs
=
[
]
;
}
this
.
_lastClosedTabIndex
=
INVALID_TAB_INDEX
;
}
onEvent
(
event
data
callback
)
{
switch
(
event
)
{
case
"
ClosedTabs
:
StartNotifications
"
:
this
.
_notifyClosedTabs
=
true
;
log
(
"
ClosedTabs
:
StartNotifications
"
)
;
this
.
_sendClosedTabsToJava
(
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
)
;
break
;
case
"
ClosedTabs
:
StopNotifications
"
:
this
.
_notifyClosedTabs
=
false
;
log
(
"
ClosedTabs
:
StopNotifications
"
)
;
break
;
case
"
Session
:
FlushTabs
"
:
log
(
"
Session
:
FlushTabs
"
)
;
if
(
!
this
.
_loadState
=
=
STATE_RUNNING
|
|
!
this
.
flushPendingState
(
)
)
{
let
window
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
window
)
{
window
.
WindowEventDispatcher
.
sendRequest
(
{
type
:
"
PrivateBrowsing
:
Data
"
noChange
:
true
}
)
;
}
}
break
;
case
"
Session
:
Restore
"
:
{
EventDispatcher
.
instance
.
unregisterListener
(
this
"
Session
:
Restore
"
)
;
if
(
data
)
{
let
window
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
let
restoreCleanup
=
(
aSubject
aTopic
aData
)
=
>
{
Services
.
obs
.
removeObserver
(
restoreCleanup
"
sessionstore
-
windows
-
restored
"
)
;
if
(
window
.
BrowserApp
.
tabs
.
length
=
=
0
)
{
window
.
BrowserApp
.
addTab
(
"
about
:
home
"
{
selected
:
true
}
)
;
}
this
.
_startupRestoreFinished
=
true
;
log
(
"
startupRestoreFinished
=
true
(
through
notification
)
"
)
;
}
;
Services
.
obs
.
addObserver
(
restoreCleanup
"
sessionstore
-
windows
-
restored
"
)
;
this
.
restoreLastSession
(
data
.
sessionString
)
;
}
else
{
this
.
_startupRestoreFinished
=
true
;
log
(
"
startupRestoreFinished
=
true
"
)
;
Services
.
obs
.
notifyObservers
(
null
"
sessionstore
-
windows
-
restored
"
)
;
}
break
;
}
case
"
Session
:
RestoreRecentTabs
"
:
this
.
_restoreTabs
(
data
)
;
break
;
case
"
Tab
:
KeepZombified
"
:
{
if
(
data
.
nextSelectedTabId
>
=
0
)
{
this
.
_keepAsZombieTabId
=
data
.
nextSelectedTabId
;
log
(
"
Tab
:
KeepZombified
"
+
data
.
nextSelectedTabId
)
;
}
break
;
}
case
"
Tabs
:
OpenMultiple
"
:
{
this
.
_openTabs
(
data
)
;
if
(
data
.
shouldNotifyTabsOpenedToJava
)
{
let
window
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
window
.
WindowEventDispatcher
.
sendRequest
(
{
type
:
"
Tabs
:
TabsOpened
"
}
)
;
}
break
;
}
}
}
observe
(
aSubject
aTopic
aData
)
{
let
observerService
=
Services
.
obs
;
switch
(
aTopic
)
{
case
"
app
-
startup
"
:
EventDispatcher
.
instance
.
registerListener
(
this
[
"
ClosedTabs
:
StartNotifications
"
"
ClosedTabs
:
StopNotifications
"
"
Session
:
FlushTabs
"
"
Session
:
Restore
"
"
Session
:
RestoreRecentTabs
"
"
Tab
:
KeepZombified
"
"
Tabs
:
OpenMultiple
"
]
)
;
observerService
.
addObserver
(
this
"
final
-
ui
-
startup
"
true
)
;
observerService
.
addObserver
(
this
"
domwindowopened
"
true
)
;
observerService
.
addObserver
(
this
"
domwindowclosed
"
true
)
;
observerService
.
addObserver
(
this
"
browser
:
purge
-
session
-
history
"
true
)
;
observerService
.
addObserver
(
this
"
browser
:
purge
-
session
-
tabs
"
true
)
;
observerService
.
addObserver
(
this
"
quit
-
application
-
requested
"
true
)
;
observerService
.
addObserver
(
this
"
quit
-
application
-
proceeding
"
true
)
;
observerService
.
addObserver
(
this
"
quit
-
application
"
true
)
;
observerService
.
addObserver
(
this
"
Session
:
NotifyLocationChange
"
true
)
;
observerService
.
addObserver
(
this
"
Content
:
HistoryChange
"
true
)
;
observerService
.
addObserver
(
this
"
application
-
foreground
"
true
)
;
observerService
.
addObserver
(
this
"
last
-
pb
-
context
-
exited
"
true
)
;
break
;
case
"
final
-
ui
-
startup
"
:
observerService
.
removeObserver
(
this
"
final
-
ui
-
startup
"
)
;
this
.
init
(
)
;
break
;
case
"
domwindowopened
"
:
{
let
window
=
aSubject
;
window
.
addEventListener
(
"
load
"
(
)
=
>
{
this
.
onWindowOpen
(
window
)
;
}
{
once
:
true
}
)
;
break
;
}
case
"
domwindowclosed
"
:
this
.
onWindowClose
(
aSubject
)
;
break
;
case
"
quit
-
application
-
requested
"
:
log
(
"
quit
-
application
-
requested
"
)
;
if
(
this
.
_pendingWrite
)
{
this
.
_forEachBrowserWindow
(
(
aWindow
)
=
>
{
this
.
_collectWindowData
(
aWindow
)
;
}
)
;
}
break
;
case
"
quit
-
application
-
proceeding
"
:
log
(
"
quit
-
application
-
proceeding
"
)
;
this
.
_loadState
=
STATE_QUITTING
;
break
;
case
"
quit
-
application
"
:
log
(
"
quit
-
application
"
)
;
observerService
.
removeObserver
(
this
"
domwindowopened
"
)
;
observerService
.
removeObserver
(
this
"
domwindowclosed
"
)
;
observerService
.
removeObserver
(
this
"
quit
-
application
-
requested
"
)
;
observerService
.
removeObserver
(
this
"
quit
-
application
-
proceeding
"
)
;
observerService
.
removeObserver
(
this
"
quit
-
application
"
)
;
this
.
flushPendingState
(
)
;
this
.
_loadState
=
STATE_QUITTING_FLUSHED
;
break
;
case
"
browser
:
purge
-
session
-
tabs
"
:
case
"
browser
:
purge
-
session
-
history
"
:
this
.
_purgeHistory
(
aTopic
)
;
break
;
case
"
timer
-
callback
"
:
if
(
this
.
_loadState
=
=
STATE_RUNNING
)
{
this
.
_saveTimer
=
null
;
log
(
"
timer
-
callback
pendingWrite
=
"
+
this
.
_pendingWritePrivateOnly
+
"
/
"
+
this
.
_pendingWrite
)
;
if
(
this
.
_pendingWrite
)
{
this
.
_saveState
(
true
)
;
}
}
break
;
case
"
Session
:
NotifyLocationChange
"
:
{
let
browser
=
aSubject
;
if
(
browser
.
__SS_restoreReloadPending
&
&
this
.
_startupRestoreFinished
)
{
delete
browser
.
__SS_restoreReloadPending
;
log
(
"
remove
restoreReloadPending
"
)
;
}
if
(
browser
.
__SS_restoreDataOnLocationChange
)
{
delete
browser
.
__SS_restoreDataOnLocationChange
;
this
.
_restoreZoom
(
browser
.
__SS_data
.
scrolldata
browser
)
;
}
break
;
}
case
"
Content
:
HistoryChange
"
:
{
let
browser
=
aSubject
;
let
window
=
browser
.
ownerGlobal
;
log
(
"
Content
:
HistoryChange
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
if
(
!
browser
.
__SS_restore
&
&
!
browser
.
__SS_restoreReloadPending
)
{
if
(
browser
.
__SS_historyChange
)
{
window
.
clearTimeout
(
browser
.
__SS_historyChange
)
;
}
browser
.
__SS_historyChange
=
window
.
setTimeout
(
(
)
=
>
{
delete
browser
.
__SS_historyChange
;
this
.
onTabLoad
(
window
browser
)
;
}
0
)
;
}
break
;
}
case
"
application
-
foreground
"
:
log
(
"
application
-
foreground
"
)
;
let
window
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
window
&
&
window
.
BrowserApp
)
{
let
tab
=
window
.
BrowserApp
.
selectedTab
;
if
(
tab
)
{
this
.
restoreZombieTab
(
tab
)
;
}
}
break
;
case
"
last
-
pb
-
context
-
exited
"
:
for
(
let
window
of
Object
.
values
(
this
.
_windows
)
)
{
window
.
closedTabs
=
window
.
closedTabs
.
filter
(
tab
=
>
!
tab
.
isPrivate
)
;
}
this
.
_lastClosedTabIndex
=
INVALID_TAB_INDEX
;
break
;
}
}
handleEvent
(
aEvent
)
{
let
window
=
aEvent
.
currentTarget
.
ownerGlobal
;
switch
(
aEvent
.
type
)
{
case
"
TabOpen
"
:
{
let
browser
=
aEvent
.
target
;
log
(
"
TabOpen
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
this
.
onTabAdd
(
window
browser
)
;
break
;
}
case
"
TabClose
"
:
{
let
browser
=
aEvent
.
target
;
log
(
"
TabClose
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
this
.
onTabClose
(
window
browser
aEvent
.
detail
)
;
this
.
onTabRemove
(
window
browser
)
;
break
;
}
case
"
TabPreZombify
"
:
{
let
browser
=
aEvent
.
target
;
log
(
"
TabPreZombify
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
this
.
onTabRemove
(
window
browser
true
)
;
break
;
}
case
"
TabPostZombify
"
:
{
let
browser
=
aEvent
.
target
;
log
(
"
TabPostZombify
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
this
.
onTabAdd
(
window
browser
true
)
;
break
;
}
case
"
TabSelect
"
:
{
let
browser
=
aEvent
.
target
;
log
(
"
TabSelect
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
this
.
onTabSelect
(
window
browser
)
;
break
;
}
case
"
TabMove
"
:
{
let
browser
=
aEvent
.
target
;
log
(
"
TabMove
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
this
.
onTabMove
(
)
;
break
;
}
case
"
DOMTitleChanged
"
:
{
let
browser
=
aEvent
.
currentTarget
;
log
(
"
DOMTitleChanged
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
this
.
onTabLoad
(
window
browser
)
;
break
;
}
case
"
load
"
:
{
let
browser
=
aEvent
.
currentTarget
;
if
(
browser
.
contentDocument
!
=
=
aEvent
.
originalTarget
)
{
return
;
}
log
(
"
load
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
if
(
browser
.
__SS_restoreDataOnLoad
)
{
delete
browser
.
__SS_restoreDataOnLoad
;
this
.
_restoreTextData
(
browser
.
__SS_data
.
formdata
browser
)
;
}
break
;
}
case
"
pageshow
"
:
case
"
AboutReaderContentReady
"
:
{
let
browser
=
aEvent
.
currentTarget
;
if
(
browser
.
contentDocument
!
=
=
aEvent
.
originalTarget
)
{
return
;
}
if
(
browser
.
currentURI
.
spec
.
startsWith
(
"
about
:
reader
"
)
&
&
!
browser
.
contentDocument
.
body
.
classList
.
contains
(
"
loaded
"
)
)
{
return
;
}
log
(
aEvent
.
type
+
"
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
if
(
browser
.
__SS_restoreDataOnPageshow
)
{
delete
browser
.
__SS_restoreDataOnPageshow
;
this
.
_restoreScrollPosition
(
browser
.
__SS_data
.
scrolldata
browser
)
;
}
else
{
this
.
onTabScroll
(
window
browser
)
;
}
break
;
}
case
"
input
"
:
case
"
DOMAutoComplete
"
:
{
let
browser
=
aEvent
.
currentTarget
;
if
(
loggingEnabled
)
{
log
(
"
TabInput
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
}
if
(
!
this
.
_formdataSavePending
)
{
this
.
_formdataSavePending
=
window
.
setTimeout
(
(
)
=
>
{
this
.
_formdataSavePending
=
null
;
this
.
onTabInput
(
window
browser
)
;
}
2000
)
;
}
break
;
}
case
"
mozvisualresize
"
:
case
"
mozvisualscroll
"
:
{
let
browser
=
aEvent
.
currentTarget
;
if
(
loggingEnabled
)
{
log
(
aEvent
.
type
+
"
for
tab
"
+
window
.
BrowserApp
.
getTabForBrowser
(
browser
)
.
id
)
;
}
if
(
!
this
.
_scrollSavePending
)
{
this
.
_scrollSavePending
=
window
.
setTimeout
(
(
)
=
>
{
this
.
_scrollSavePending
=
null
;
this
.
onTabScroll
(
window
browser
)
;
}
500
)
;
}
break
;
}
}
}
onWindowOpen
(
aWindow
)
{
if
(
aWindow
&
&
aWindow
.
__SSID
&
&
this
.
_windows
[
aWindow
.
__SSID
]
)
{
return
;
}
if
(
aWindow
.
document
.
documentElement
.
getAttribute
(
"
windowtype
"
)
!
=
"
navigator
:
browser
"
|
|
this
.
_loadState
<
=
STATE_QUITTING
)
{
return
;
}
aWindow
.
__SSID
=
"
window
"
+
Date
.
now
(
)
;
this
.
_windows
[
aWindow
.
__SSID
]
=
{
tabs
:
[
]
selectedTabId
:
INVALID_TAB_ID
closedTabs
:
[
]
}
;
if
(
this
.
_loadState
=
=
STATE_STOPPED
)
{
this
.
_loadState
=
STATE_RUNNING
;
this
.
_lastSaveTime
=
Date
.
now
(
)
;
}
let
tabs
=
aWindow
.
BrowserApp
.
tabs
;
for
(
let
i
=
0
;
i
<
tabs
.
length
;
i
+
+
)
this
.
onTabAdd
(
aWindow
tabs
[
i
]
.
browser
true
)
;
let
browsers
=
aWindow
.
document
.
getElementById
(
"
browsers
"
)
;
browsers
.
addEventListener
(
"
TabOpen
"
this
true
)
;
browsers
.
addEventListener
(
"
TabClose
"
this
true
)
;
browsers
.
addEventListener
(
"
TabSelect
"
this
true
)
;
browsers
.
addEventListener
(
"
TabMove
"
this
true
)
;
browsers
.
addEventListener
(
"
TabPreZombify
"
this
true
)
;
browsers
.
addEventListener
(
"
TabPostZombify
"
this
true
)
;
}
onWindowClose
(
aWindow
)
{
if
(
!
aWindow
.
__SSID
|
|
!
this
.
_windows
[
aWindow
.
__SSID
]
)
{
return
;
}
let
browsers
=
aWindow
.
document
.
getElementById
(
"
browsers
"
)
;
browsers
.
removeEventListener
(
"
TabOpen
"
this
true
)
;
browsers
.
removeEventListener
(
"
TabClose
"
this
true
)
;
browsers
.
removeEventListener
(
"
TabSelect
"
this
true
)
;
browsers
.
removeEventListener
(
"
TabMove
"
this
true
)
;
browsers
.
removeEventListener
(
"
TabPreZombify
"
this
true
)
;
browsers
.
removeEventListener
(
"
TabPostZombify
"
this
true
)
;
if
(
this
.
_loadState
=
=
STATE_RUNNING
)
{
this
.
_collectWindowData
(
aWindow
)
;
delete
this
.
_windows
[
aWindow
.
__SSID
]
;
this
.
saveStateDelayed
(
)
;
}
let
tabs
=
aWindow
.
BrowserApp
.
tabs
;
for
(
let
i
=
0
;
i
<
tabs
.
length
;
i
+
+
)
this
.
onTabRemove
(
aWindow
tabs
[
i
]
.
browser
true
)
;
delete
aWindow
.
__SSID
;
}
onTabAdd
(
aWindow
aBrowser
aNoNotification
)
{
aBrowser
.
addEventListener
(
"
DOMTitleChanged
"
this
true
)
;
aBrowser
.
addEventListener
(
"
load
"
this
true
)
;
aBrowser
.
addEventListener
(
"
pageshow
"
this
true
)
;
aBrowser
.
addEventListener
(
"
AboutReaderContentReady
"
this
true
)
;
aBrowser
.
addEventListener
(
"
input
"
this
true
)
;
aBrowser
.
addEventListener
(
"
DOMAutoComplete
"
this
true
)
;
aBrowser
.
addEventListener
(
"
mozvisualscroll
"
this
{
capture
:
true
mozSystemGroup
:
true
}
)
;
aBrowser
.
addEventListener
(
"
mozvisualresize
"
this
{
capture
:
true
mozSystemGroup
:
true
}
)
;
log
(
"
onTabAdd
(
)
ran
for
tab
"
+
aWindow
.
BrowserApp
.
getTabForBrowser
(
aBrowser
)
.
id
+
"
aNoNotification
=
"
+
aNoNotification
)
;
if
(
!
aNoNotification
)
{
if
(
this
.
_loadState
=
=
STATE_QUITTING
)
{
this
.
_forEachBrowserWindow
(
(
aWindow
)
=
>
{
this
.
_collectWindowData
(
aWindow
)
;
}
)
;
}
this
.
saveStateDelayed
(
)
;
}
this
.
_updateCrashReportURL
(
aWindow
)
;
}
onTabRemove
(
aWindow
aBrowser
aNoNotification
)
{
aBrowser
.
removeEventListener
(
"
DOMTitleChanged
"
this
true
)
;
aBrowser
.
removeEventListener
(
"
load
"
this
true
)
;
aBrowser
.
removeEventListener
(
"
pageshow
"
this
true
)
;
aBrowser
.
removeEventListener
(
"
AboutReaderContentReady
"
this
true
)
;
aBrowser
.
removeEventListener
(
"
input
"
this
true
)
;
aBrowser
.
removeEventListener
(
"
DOMAutoComplete
"
this
true
)
;
aBrowser
.
removeEventListener
(
"
mozvisualscroll
"
this
{
capture
:
true
mozSystemGroup
:
true
}
)
;
aBrowser
.
removeEventListener
(
"
mozvisualresize
"
this
{
capture
:
true
mozSystemGroup
:
true
}
)
;
if
(
aBrowser
.
__SS_historyChange
)
{
aWindow
.
clearTimeout
(
aBrowser
.
__SS_historyChange
)
;
delete
aBrowser
.
__SS_historyChange
;
}
delete
aBrowser
.
__SS_data
;
log
(
"
onTabRemove
(
)
ran
for
tab
"
+
aWindow
.
BrowserApp
.
getTabForBrowser
(
aBrowser
)
.
id
+
"
aNoNotification
=
"
+
aNoNotification
)
;
if
(
!
aNoNotification
)
{
let
isPrivate
=
PrivateBrowsingUtils
.
isBrowserPrivate
(
aBrowser
)
;
this
.
saveStateDelayed
(
isPrivate
)
;
}
}
onTabClose
(
aWindow
aBrowser
aTabIndex
)
{
if
(
this
.
_formdataSavePending
)
{
this
.
onTabInput
(
aWindow
aBrowser
)
;
}
if
(
this
.
_scrollSavePending
)
{
this
.
onTabScroll
(
aWindow
aBrowser
)
;
}
let
data
=
aBrowser
.
__SS_data
;
let
tab
=
aWindow
.
BrowserApp
.
getTabForId
(
data
.
tabId
)
;
if
(
this
.
_maxTabsUndo
=
=
0
|
|
this
.
_sessionDataIsEmpty
(
data
)
)
{
this
.
_lastClosedTabIndex
=
INVALID_TAB_INDEX
;
return
;
}
if
(
aWindow
.
BrowserApp
.
tabs
.
length
>
0
)
{
data
.
extData
=
aBrowser
.
__SS_extdata
|
|
{
}
;
this
.
_windows
[
aWindow
.
__SSID
]
.
closedTabs
.
unshift
(
data
)
;
let
length
=
this
.
_windows
[
aWindow
.
__SSID
]
.
closedTabs
.
length
;
if
(
length
>
this
.
_maxTabsUndo
)
{
this
.
_windows
[
aWindow
.
__SSID
]
.
closedTabs
.
splice
(
this
.
_maxTabsUndo
length
-
this
.
_maxTabsUndo
)
;
}
this
.
_lastClosedTabIndex
=
aTabIndex
;
if
(
this
.
_notifyClosedTabs
)
{
this
.
_sendClosedTabsToJava
(
aWindow
)
;
}
log
(
"
onTabClose
(
)
ran
for
tab
"
+
tab
.
id
)
;
sendEvent
(
aBrowser
"
SSTabCloseProcessed
"
)
;
}
}
_sessionDataIsEmpty
(
aData
)
{
if
(
!
aData
|
|
!
aData
.
entries
|
|
aData
.
entries
.
length
=
=
0
)
{
return
true
;
}
let
entries
=
aData
.
entries
;
return
(
entries
.
length
=
=
1
&
&
(
entries
[
0
]
.
url
=
=
"
about
:
home
"
|
|
entries
[
0
]
.
url
=
=
"
about
:
privatebrowsing
"
)
)
;
}
onTabLoad
(
aWindow
aBrowser
)
{
if
(
aBrowser
.
__SS_restore
|
|
!
this
.
_startupRestoreFinished
|
|
aBrowser
.
__SS_restoreReloadPending
)
{
return
;
}
if
(
!
aBrowser
.
canGoBack
&
&
aBrowser
.
currentURI
.
spec
=
=
"
about
:
blank
"
)
{
return
;
}
let
data
=
SessionHistory
.
collect
(
aBrowser
.
docShell
)
;
if
(
!
data
.
index
)
{
return
;
}
let
formdata
;
let
scrolldata
;
if
(
aBrowser
.
__SS_data
)
{
formdata
=
aBrowser
.
__SS_data
.
formdata
;
scrolldata
=
aBrowser
.
__SS_data
.
scrolldata
;
}
delete
aBrowser
.
__SS_data
;
this
.
_collectTabData
(
aWindow
aBrowser
data
)
;
if
(
aBrowser
.
__SS_restoreDataOnLoad
|
|
aBrowser
.
__SS_restoreDataOnPageshow
)
{
aBrowser
.
__SS_data
.
formdata
=
formdata
;
aBrowser
.
__SS_data
.
scrolldata
=
scrolldata
;
}
else
{
this
.
onTabInput
(
aWindow
aBrowser
)
;
this
.
onTabScroll
(
aWindow
aBrowser
)
;
}
log
(
"
onTabLoad
(
)
ran
for
tab
"
+
aWindow
.
BrowserApp
.
getTabForBrowser
(
aBrowser
)
.
id
)
;
sendEvent
(
aBrowser
"
SSTabDataUpdated
"
)
;
this
.
saveStateDelayed
(
)
;
this
.
_updateCrashReportURL
(
aWindow
)
;
}
onTabSelect
(
aWindow
aBrowser
)
{
if
(
this
.
_loadState
!
=
STATE_RUNNING
)
{
return
;
}
let
tab
=
aWindow
.
BrowserApp
.
getTabForBrowser
(
aBrowser
)
;
let
tabId
=
tab
.
id
;
this
.
_windows
[
aWindow
.
__SSID
]
.
selectedTabId
=
tabId
;
if
(
tabId
!
=
this
.
_keepAsZombieTabId
)
{
this
.
restoreZombieTab
(
tab
)
;
}
else
{
log
(
"
keeping
as
zombie
tab
"
+
tabId
)
;
}
this
.
_keepAsZombieTabId
=
INVALID_TAB_ID
;
log
(
"
onTabSelect
(
)
ran
for
tab
"
+
tabId
)
;
this
.
saveStateDelayed
(
)
;
this
.
_updateCrashReportURL
(
aWindow
)
;
if
(
this
.
_notifyClosedTabs
)
{
this
.
_sendClosedTabsToJava
(
aWindow
)
;
}
}
restoreZombieTab
(
aTab
)
{
if
(
!
aTab
.
browser
.
__SS_restore
)
{
return
;
}
let
browser
=
aTab
.
browser
;
let
data
=
browser
.
__SS_data
;
this
.
_restoreTab
(
data
browser
)
;
delete
browser
.
__SS_restore
;
browser
.
removeAttribute
(
"
pending
"
)
;
log
(
"
restoring
zombie
tab
"
+
aTab
.
id
)
;
}
onTabMove
(
)
{
if
(
this
.
_loadState
!
=
STATE_RUNNING
)
{
return
;
}
this
.
_lastClosedTabIndex
=
INVALID_TAB_INDEX
;
this
.
saveStateDelayed
(
)
;
}
onTabInput
(
aWindow
aBrowser
)
{
if
(
this
.
_formdataSavePending
)
{
aWindow
.
clearTimeout
(
this
.
_formdataSavePending
)
;
this
.
_formdataSavePending
=
null
;
log
(
"
onTabInput
(
)
clearing
pending
timeout
"
)
;
}
if
(
aBrowser
.
__SS_restore
|
|
!
this
.
_startupRestoreFinished
|
|
aBrowser
.
__SS_restoreReloadPending
)
{
sendEvent
(
aBrowser
"
SSTabInputCaptured
"
)
;
return
;
}
let
data
=
aBrowser
.
__SS_data
;
if
(
!
data
|
|
data
.
entries
.
length
=
=
0
)
{
sendEvent
(
aBrowser
"
SSTabInputCaptured
"
)
;
return
;
}
let
content
=
aBrowser
.
contentWindow
;
let
formdata
=
SessionStoreUtils
.
collectFormData
(
content
)
;
formdata
=
PrivacyFilter
.
filterFormData
(
formdata
|
|
{
}
)
;
if
(
formdata
&
&
Object
.
keys
(
formdata
)
.
length
)
{
data
.
formdata
=
formdata
;
log
(
"
onTabInput
(
)
ran
for
tab
"
+
aWindow
.
BrowserApp
.
getTabForBrowser
(
aBrowser
)
.
id
)
;
this
.
saveStateDelayed
(
)
;
}
sendEvent
(
aBrowser
"
SSTabInputCaptured
"
)
;
}
onTabScroll
(
aWindow
aBrowser
)
{
if
(
this
.
_scrollSavePending
)
{
aWindow
.
clearTimeout
(
this
.
_scrollSavePending
)
;
this
.
_scrollSavePending
=
null
;
log
(
"
onTabScroll
(
)
clearing
pending
timeout
"
)
;
}
if
(
aBrowser
.
__SS_restore
|
|
!
this
.
_startupRestoreFinished
|
|
aBrowser
.
__SS_restoreReloadPending
)
{
return
;
}
let
data
=
aBrowser
.
__SS_data
;
if
(
!
data
|
|
data
.
entries
.
length
=
=
0
)
{
return
;
}
if
(
aBrowser
.
__SS_restoreDataOnLoad
|
|
aBrowser
.
__SS_restoreDataOnPageshow
)
{
return
;
}
let
content
=
aBrowser
.
contentWindow
;
let
scrolldata
=
SessionStoreUtils
.
collectScrollPosition
(
content
)
;
scrolldata
=
scrolldata
|
|
{
}
;
let
zoom
=
1
;
zoom
=
content
.
windowUtils
.
getResolution
(
)
;
scrolldata
.
zoom
=
{
}
;
scrolldata
.
zoom
.
resolution
=
zoom
;
log
(
"
onTabScroll
(
)
zoom
level
:
"
+
zoom
)
;
scrolldata
.
zoom
.
displaySize
=
this
.
_getContentViewerSize
(
content
)
;
log
(
"
onTabScroll
(
)
displayWidth
:
"
+
scrolldata
.
zoom
.
displaySize
.
width
)
;
data
.
scrolldata
=
scrolldata
;
log
(
"
onTabScroll
(
)
ran
for
tab
"
+
aWindow
.
BrowserApp
.
getTabForBrowser
(
aBrowser
)
.
id
)
;
sendEvent
(
aBrowser
"
SSTabScrollCaptured
"
)
;
this
.
saveStateDelayed
(
)
;
}
_getContentViewerSize
(
aWindow
)
{
let
displaySize
=
{
}
;
let
width
=
{
}
height
=
{
}
;
aWindow
.
windowUtils
.
getContentViewerSize
(
width
height
)
;
displaySize
.
width
=
width
.
value
;
displaySize
.
height
=
height
.
value
;
return
displaySize
;
}
saveStateDelayed
(
aPrivateTabsOnly
=
false
)
{
this
.
_pendingWrite
+
+
;
if
(
aPrivateTabsOnly
)
{
this
.
_pendingWritePrivateOnly
+
+
;
}
log
(
"
incrementing
_pendingWrite
to
"
+
this
.
_pendingWritePrivateOnly
+
"
/
"
+
this
.
_pendingWrite
)
;
if
(
!
this
.
_saveTimer
)
{
let
currentDelay
=
this
.
_lastSaveTime
+
this
.
_interval
-
Date
.
now
(
)
;
let
delay
=
aPrivateTabsOnly
?
SAVE_INTERVAL_PRIVATE_TABS
:
Math
.
max
(
currentDelay
MINIMUM_SAVE_DELAY
)
;
if
(
delay
>
0
)
{
this
.
_createTimer
(
delay
)
;
}
else
{
log
(
"
saveStateDelayed
(
)
no
delay
"
)
;
this
.
saveState
(
)
;
}
}
else
if
(
aPrivateTabsOnly
&
&
this
.
_saveTimer
.
delay
-
(
Date
.
now
(
)
-
this
.
_lastQueuedSaveTime
)
>
SAVE_INTERVAL_PRIVATE_TABS
)
{
this
.
_killTimer
(
)
;
this
.
_createTimer
(
SAVE_INTERVAL_PRIVATE_TABS
)
;
}
else
{
log
(
"
saveStateDelayed
(
)
timer
already
running
taking
no
action
"
)
;
}
}
saveState
(
aPrivateTabsOnly
=
false
)
{
this
.
_pendingWrite
+
+
;
if
(
aPrivateTabsOnly
)
{
this
.
_pendingWritePrivateOnly
+
+
;
}
log
(
"
saveState
(
)
incrementing
_pendingWrite
to
"
+
this
.
_pendingWritePrivateOnly
+
"
/
"
+
this
.
_pendingWrite
)
;
this
.
_saveState
(
true
)
;
}
flushPendingState
(
)
{
log
(
"
flushPendingState
(
)
_pendingWrite
=
"
+
this
.
_pendingWrite
)
;
if
(
this
.
_pendingWrite
)
{
this
.
_saveState
(
false
)
;
return
true
;
}
return
false
;
}
_createTimer
(
aDelay
)
{
this
.
_lastQueuedSaveTime
=
Date
.
now
(
)
;
this
.
_saveTimer
=
Cc
[
"
mozilla
.
org
/
timer
;
1
"
]
.
createInstance
(
Ci
.
nsITimer
)
;
this
.
_saveTimer
.
init
(
this
aDelay
Ci
.
nsITimer
.
TYPE_ONE_SHOT
)
;
log
(
"
saveTimer
delay
=
"
+
aDelay
)
;
}
_killTimer
(
)
{
if
(
this
.
_saveTimer
)
{
this
.
_saveTimer
.
cancel
(
)
;
this
.
_saveTimer
=
null
;
log
(
"
killed
queued
saveTimer
"
)
;
}
}
_saveState
(
aAsync
)
{
log
(
"
_saveState
(
aAsync
=
"
+
aAsync
+
"
)
"
)
;
this
.
_killTimer
(
)
;
if
(
!
this
.
_writeInProgress
&
&
Date
.
now
(
)
-
this
.
_lastBackupTime
>
this
.
_backupInterval
&
&
this
.
_sessionDataIsGood
&
&
this
.
_sessionFile
.
exists
(
)
)
{
if
(
this
.
_sessionFileBackup
.
exists
(
)
)
{
this
.
_sessionFileBackup
.
remove
(
false
)
;
}
log
(
"
_saveState
(
)
backing
up
session
data
"
)
;
this
.
_sessionFile
.
copyTo
(
null
this
.
_sessionFileBackup
.
leafName
)
;
this
.
_lastBackupTime
=
Date
.
now
(
)
;
}
let
data
=
this
.
_getCurrentState
(
)
;
let
normalData
=
{
windows
:
[
]
}
;
let
privateData
=
{
windows
:
[
]
}
;
log
(
"
_saveState
(
)
current
state
collected
"
)
;
for
(
let
winIndex
=
0
;
winIndex
<
data
.
windows
.
length
;
+
+
winIndex
)
{
let
win
=
data
.
windows
[
winIndex
]
;
let
normalWin
=
{
}
;
for
(
let
prop
in
win
)
{
normalWin
[
prop
]
=
data
[
prop
]
;
}
delete
normalWin
.
selectedTabId
;
normalWin
.
tabs
=
[
]
;
normalWin
.
closedTabs
=
win
.
closedTabs
.
filter
(
tab
=
>
!
tab
.
isPrivate
)
;
normalData
.
windows
.
push
(
normalWin
)
;
privateData
.
windows
.
push
(
{
tabs
:
[
]
}
)
;
for
(
let
i
=
0
;
i
<
win
.
tabs
.
length
;
+
+
i
)
{
let
tab
=
win
.
tabs
[
i
]
;
let
savedWin
=
tab
.
isPrivate
?
privateData
.
windows
[
winIndex
]
:
normalData
.
windows
[
winIndex
]
;
savedWin
.
tabs
.
push
(
tab
)
;
if
(
win
.
selectedTabId
=
=
=
tab
.
tabId
)
{
savedWin
.
selected
=
savedWin
.
tabs
.
length
;
}
}
}
let
window
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
window
)
{
window
.
WindowEventDispatcher
.
sendRequest
(
{
type
:
"
PrivateBrowsing
:
Data
"
session
:
(
privateData
.
windows
.
length
>
0
&
&
privateData
.
windows
[
0
]
.
tabs
.
length
>
0
)
?
JSON
.
stringify
(
privateData
)
:
null
}
)
;
}
if
(
this
.
_pendingWrite
=
=
=
this
.
_pendingWritePrivateOnly
)
{
this
.
_pendingWrite
=
0
;
this
.
_pendingWritePrivateOnly
=
0
;
this
.
_lastSaveTime
=
Date
.
now
(
)
;
return
;
}
if
(
normalData
.
windows
[
0
]
&
&
normalData
.
windows
[
0
]
.
tabs
)
{
log
(
"
_saveState
(
)
writing
normal
data
"
+
normalData
.
windows
[
0
]
.
tabs
.
length
+
"
tabs
in
window
[
0
]
"
)
;
}
else
{
log
(
"
_saveState
(
)
writing
empty
normal
data
"
)
;
}
this
.
_writeFile
(
this
.
_sessionFile
this
.
_sessionFileTemp
normalData
aAsync
)
;
this
.
_lastSaveTime
=
Date
.
now
(
)
;
}
_getCurrentState
(
)
{
this
.
_forEachBrowserWindow
(
(
aWindow
)
=
>
{
this
.
_collectWindowData
(
aWindow
)
;
}
)
;
let
data
=
{
windows
:
[
]
}
;
for
(
let
index
in
this
.
_windows
)
{
data
.
windows
.
push
(
this
.
_windows
[
index
]
)
;
}
return
data
;
}
_collectTabData
(
aWindow
aBrowser
aHistory
)
{
if
(
aBrowser
.
__SS_restore
)
{
return
;
}
let
tabData
=
{
}
;
let
tab
=
aWindow
.
BrowserApp
.
getTabForBrowser
(
aBrowser
)
;
tabData
.
entries
=
aHistory
.
entries
;
tabData
.
index
=
aHistory
.
index
;
tabData
.
attributes
=
{
image
:
aBrowser
.
mIconURL
}
;
tabData
.
desktopMode
=
tab
.
desktopMode
;
tabData
.
isPrivate
=
PrivateBrowsingUtils
.
isBrowserPrivate
(
aBrowser
)
;
tabData
.
tabId
=
tab
.
id
;
tabData
.
parentId
=
tab
.
parentId
;
aBrowser
.
__SS_data
=
tabData
;
}
_collectWindowData
(
aWindow
)
{
if
(
!
aWindow
.
__SSID
|
|
!
this
.
_windows
[
aWindow
.
__SSID
]
)
{
return
;
}
let
winData
=
this
.
_windows
[
aWindow
.
__SSID
]
;
winData
.
tabs
=
[
]
;
let
selectedTab
=
aWindow
.
BrowserApp
.
selectedTab
;
if
(
selectedTab
!
=
null
)
{
winData
.
selectedTabId
=
selectedTab
.
id
;
}
let
tabs
=
aWindow
.
BrowserApp
.
tabs
;
for
(
let
i
=
0
;
i
<
tabs
.
length
;
i
+
+
)
{
let
browser
=
tabs
[
i
]
.
browser
;
if
(
browser
.
__SS_data
)
{
let
tabData
=
browser
.
__SS_data
;
if
(
browser
.
__SS_extdata
)
{
tabData
.
extData
=
browser
.
__SS_extdata
;
}
winData
.
tabs
.
push
(
tabData
)
;
}
}
}
_forEachBrowserWindow
(
aFunc
)
{
for
(
let
window
of
Services
.
wm
.
getEnumerator
(
"
navigator
:
browser
"
)
)
{
if
(
window
.
__SSID
&
&
!
window
.
closed
)
{
aFunc
.
call
(
this
window
)
;
}
}
}
_writeFile
(
aFile
aFileTemp
aData
aAsync
)
{
TelemetryStopwatch
.
start
(
"
FX_SESSION_RESTORE_SERIALIZE_DATA_MS
"
)
;
let
state
=
JSON
.
stringify
(
aData
)
;
TelemetryStopwatch
.
finish
(
"
FX_SESSION_RESTORE_SERIALIZE_DATA_MS
"
)
;
let
buffer
=
new
TextEncoder
(
)
.
encode
(
state
)
;
Services
.
telemetry
.
getHistogramById
(
"
FX_SESSION_RESTORE_FILE_SIZE_BYTES
"
)
.
add
(
buffer
.
byteLength
)
;
Services
.
obs
.
notifyObservers
(
null
"
sessionstore
-
state
-
write
"
)
;
let
startWriteMs
=
Cu
.
now
(
)
;
log
(
"
_writeFile
(
aAsync
=
"
+
aAsync
+
"
)
_pendingWrite
=
"
+
this
.
_pendingWrite
)
;
this
.
_writeInProgress
=
true
;
let
pendingWrite
=
this
.
_pendingWrite
;
this
.
_write
(
aFile
aFileTemp
buffer
aAsync
)
.
then
(
(
)
=
>
{
let
stopWriteMs
=
Cu
.
now
(
)
;
if
(
pendingWrite
=
=
=
this
.
_pendingWrite
)
{
this
.
_pendingWrite
=
0
;
this
.
_pendingWritePrivateOnly
=
0
;
this
.
_writeInProgress
=
false
;
}
log
(
"
_writeFile
(
)
_write
(
)
returned
_pendingWrite
=
"
+
this
.
_pendingWrite
)
;
Services
.
telemetry
.
getHistogramById
(
"
FX_SESSION_RESTORE_WRITE_FILE_MS
"
)
.
add
(
Math
.
round
(
stopWriteMs
-
startWriteMs
)
)
;
Services
.
obs
.
notifyObservers
(
null
"
sessionstore
-
state
-
write
-
complete
"
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
Session
:
DataWritten
"
}
)
;
this
.
_sessionDataIsGood
=
true
;
}
)
;
}
_write
(
aFile
aFileTemp
aBuffer
aAsync
)
{
if
(
aAsync
)
{
log
(
"
_write
(
)
writing
asynchronously
"
)
;
return
OS
.
File
.
writeAtomic
(
aFile
.
path
aBuffer
{
tmpPath
:
aFileTemp
.
path
}
)
;
}
let
bytes
=
String
.
fromCharCode
.
apply
(
null
new
Uint16Array
(
aBuffer
)
)
;
let
stream
=
Cc
[
"
mozilla
.
org
/
network
/
file
-
output
-
stream
;
1
"
]
.
createInstance
(
Ci
.
nsIFileOutputStream
)
;
stream
.
init
(
aFileTemp
0x02
|
0x08
|
0x20
0o666
0
)
;
stream
.
write
(
bytes
bytes
.
length
)
;
stream
.
close
(
)
;
aFileTemp
.
renameTo
(
null
aFile
.
leafName
)
;
log
(
"
_write
(
)
writing
synchronously
"
)
;
return
Promise
.
resolve
(
)
;
}
_updateCrashReportURL
(
aWindow
)
{
if
(
!
AppConstants
.
MOZ_CRASHREPORTER
)
{
return
;
}
if
(
!
aWindow
.
BrowserApp
.
selectedBrowser
)
{
return
;
}
try
{
let
currentURI
=
aWindow
.
BrowserApp
.
selectedBrowser
.
currentURI
;
try
{
currentURI
=
currentURI
.
mutate
(
)
.
setUserPass
(
"
"
)
.
finalize
(
)
;
}
catch
(
ex
)
{
}
Services
.
appinfo
.
annotateCrashReport
(
"
URL
"
currentURI
.
spec
)
;
}
catch
(
ex
)
{
if
(
ex
.
result
!
=
Cr
.
NS_ERROR_NOT_INITIALIZED
)
{
Cu
.
reportError
(
"
SessionStore
:
"
+
ex
)
;
}
}
}
_openTabs
(
aData
)
{
let
window
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
for
(
let
i
=
0
;
i
<
aData
.
urls
.
length
;
i
+
+
)
{
let
url
=
aData
.
urls
[
i
]
;
let
selected
=
(
i
=
=
aData
.
urls
.
length
-
1
)
;
let
params
=
{
selected
delayLoad
:
!
selected
isPrivate
:
false
desktopMode
:
false
}
;
window
.
BrowserApp
.
addTab
(
url
params
)
;
}
}
_restoreTabs
(
aData
)
{
let
window
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
let
tabIds
=
[
]
;
for
(
let
i
=
0
;
i
<
aData
.
tabs
.
length
;
i
+
+
)
{
let
tabData
=
JSON
.
parse
(
aData
.
tabs
[
i
]
)
;
let
activeSHEntry
=
tabData
.
entries
[
tabData
.
index
-
1
]
;
let
selected
=
(
i
=
=
aData
.
tabs
.
length
-
1
)
;
let
delayLoad
=
!
selected
;
if
(
tabData
.
tabId
)
{
tabIds
.
push
(
tabData
.
tabId
)
;
}
let
params
=
{
title
:
activeSHEntry
.
title
selected
delayLoad
isPrivate
:
tabData
.
isPrivate
desktopMode
:
tabData
.
desktopMode
cancelEditMode
:
selected
parentId
:
tabData
.
parentId
}
;
let
tab
=
window
.
BrowserApp
.
addTab
(
activeSHEntry
.
url
params
)
;
tab
.
browser
.
__SS_data
=
tabData
;
tab
.
browser
.
__SS_extdata
=
tabData
.
extData
;
if
(
!
delayLoad
)
{
this
.
_restoreTab
(
tabData
tab
.
browser
)
;
}
}
this
.
_removeClosedTabs
(
window
tabIds
)
;
}
_restoreTab
(
aTabData
aBrowser
)
{
if
(
!
aTabData
|
|
aTabData
.
entries
.
length
=
=
0
)
{
Cu
.
reportError
(
"
SessionStore
.
js
:
Error
trying
to
restore
tab
with
empty
tabdata
"
)
;
return
;
}
this
.
_restoreHistory
(
aBrowser
.
docShell
aTabData
)
;
aBrowser
.
__SS_restoreDataOnLocationChange
=
true
;
aBrowser
.
__SS_restoreDataOnLoad
=
true
;
aBrowser
.
__SS_restoreDataOnPageshow
=
true
;
}
_restoreHistory
(
aDocShell
aTabData
)
{
let
history
=
SessionHistory
.
restore
(
aDocShell
aTabData
)
;
try
{
history
.
QueryInterface
(
Ci
.
nsISHistory
)
.
reloadCurrentEntry
(
)
;
}
catch
(
e
)
{
}
}
_restoreTextData
(
aFormData
aBrowser
)
{
if
(
aFormData
)
{
log
(
"
_restoreTextData
(
)
"
)
;
Utils
.
restoreFrameTreeData
(
aBrowser
.
contentWindow
aFormData
(
frame
data
)
=
>
{
return
SessionStoreUtils
.
restoreFormData
(
frame
.
document
data
)
;
}
)
;
}
}
_restoreZoom
(
aScrollData
aBrowser
)
{
if
(
aScrollData
&
&
aScrollData
.
zoom
&
&
aScrollData
.
zoom
.
displaySize
)
{
log
(
"
_restoreZoom
(
)
resolution
:
"
+
aScrollData
.
zoom
.
resolution
+
"
old
displayWidth
:
"
+
aScrollData
.
zoom
.
displaySize
.
width
)
;
let
utils
=
aBrowser
.
contentWindow
.
windowUtils
;
utils
.
setRestoreResolution
(
aScrollData
.
zoom
.
resolution
aScrollData
.
zoom
.
displaySize
.
width
aScrollData
.
zoom
.
displaySize
.
height
)
;
}
}
_restoreScrollPosition
(
aScrollData
aBrowser
)
{
if
(
aScrollData
)
{
log
(
"
_restoreScrollPosition
(
)
"
)
;
Utils
.
restoreFrameTreeData
(
aBrowser
.
contentWindow
aScrollData
(
frame
data
)
=
>
{
if
(
data
.
scroll
)
{
SessionStoreUtils
.
restoreScrollPosition
(
frame
data
)
;
}
}
)
;
}
}
getBrowserState
(
)
{
return
this
.
_getCurrentState
(
)
;
}
_restoreWindow
(
aData
)
{
let
state
;
try
{
state
=
JSON
.
parse
(
aData
)
;
}
catch
(
e
)
{
throw
new
Error
(
"
Invalid
session
JSON
:
"
+
aData
)
;
}
if
(
!
state
|
|
state
.
windows
.
length
=
=
0
|
|
!
state
.
windows
[
0
]
.
tabs
|
|
state
.
windows
[
0
]
.
tabs
.
length
=
=
0
)
{
throw
new
Error
(
"
Invalid
session
JSON
:
"
+
aData
)
;
}
let
window
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
let
tabs
=
state
.
windows
[
0
]
.
tabs
;
for
(
let
i
=
0
;
i
<
tabs
.
length
;
i
+
+
)
{
let
tabData
=
tabs
[
i
]
;
let
tab
=
window
.
BrowserApp
.
getTabForId
(
tabData
.
tabId
)
;
if
(
tab
=
=
null
)
{
delete
tabData
.
tabId
;
continue
;
}
let
parentId
=
tabData
.
parentId
;
if
(
parentId
>
INVALID_TAB_ID
)
{
tab
.
parentId
=
parentId
;
}
tab
.
browser
.
__SS_data
=
tabData
;
tab
.
browser
.
__SS_extdata
=
tabData
.
extData
;
if
(
window
.
BrowserApp
.
selectedTab
=
=
tab
)
{
tab
.
browser
.
__SS_restoreReloadPending
=
true
;
this
.
_restoreTab
(
tabData
tab
.
browser
)
;
this
.
_startupRestoreFinished
=
true
;
log
(
"
startupRestoreFinished
=
true
"
)
;
delete
tab
.
browser
.
__SS_restore
;
tab
.
browser
.
removeAttribute
(
"
pending
"
)
;
this
.
_windows
[
window
.
__SSID
]
.
selectedTabId
=
tab
.
id
;
}
else
{
tab
.
browser
.
__SS_restore
=
true
;
tab
.
browser
.
setAttribute
(
"
pending
"
"
true
"
)
;
}
}
if
(
state
.
windows
[
0
]
.
closedTabs
&
&
this
.
_maxTabsUndo
>
0
)
{
this
.
_windows
[
window
.
__SSID
]
.
closedTabs
=
state
.
windows
[
0
]
.
closedTabs
;
log
(
"
_restoreWindow
(
)
loaded
"
+
state
.
windows
[
0
]
.
closedTabs
.
length
+
"
closed
tabs
"
)
;
}
}
getClosedTabCount
(
aWindow
)
{
if
(
!
aWindow
|
|
!
aWindow
.
__SSID
|
|
!
this
.
_windows
[
aWindow
.
__SSID
]
)
{
return
0
;
}
return
this
.
_windows
[
aWindow
.
__SSID
]
.
closedTabs
.
length
;
}
getClosedTabs
(
aWindow
)
{
if
(
!
aWindow
.
__SSID
)
{
throw
new
Error
(
Components
.
returnCode
=
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
return
this
.
_windows
[
aWindow
.
__SSID
]
.
closedTabs
;
}
undoCloseTab
(
aWindow
aCloseTabData
)
{
if
(
!
aWindow
.
__SSID
)
{
throw
new
Error
(
Components
.
returnCode
=
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
if
(
aCloseTabData
.
tabId
)
{
let
tabId
=
[
aCloseTabData
.
tabId
]
;
this
.
_removeClosedTabs
(
aWindow
tabId
)
;
}
let
params
=
{
selected
:
true
isPrivate
:
aCloseTabData
.
isPrivate
desktopMode
:
aCloseTabData
.
desktopMode
tabIndex
:
this
.
_lastClosedTabIndex
parentId
:
aCloseTabData
.
parentId
}
;
let
tab
=
aWindow
.
BrowserApp
.
addTab
(
aCloseTabData
.
entries
[
aCloseTabData
.
index
-
1
]
.
url
params
)
;
tab
.
browser
.
__SS_data
=
aCloseTabData
;
tab
.
browser
.
__SS_extdata
=
aCloseTabData
.
extData
;
this
.
_restoreTab
(
aCloseTabData
tab
.
browser
)
;
this
.
_lastClosedTabIndex
=
INVALID_TAB_INDEX
;
return
tab
.
browser
;
}
_removeClosedTabs
(
aWindow
aTabIds
)
{
if
(
!
aTabIds
|
|
aTabIds
.
length
=
=
0
)
{
return
;
}
if
(
!
aWindow
|
|
!
aWindow
.
__SSID
)
{
return
;
}
const
window
=
this
.
_windows
[
aWindow
.
__SSID
]
;
let
closedTabs
=
window
.
closedTabs
;
if
(
!
closedTabs
)
{
return
;
}
const
prevClosedTabCount
=
closedTabs
.
length
;
closedTabs
=
closedTabs
.
filter
(
closedTab
=
>
!
closedTab
.
tabId
|
|
!
aTabIds
.
includes
(
closedTab
.
tabId
)
)
;
window
.
closedTabs
=
closedTabs
;
if
(
this
.
_notifyClosedTabs
&
&
closedTabs
.
length
!
=
prevClosedTabCount
)
{
this
.
_sendClosedTabsToJava
(
aWindow
)
;
}
}
get
canUndoLastCloseTab
(
)
{
return
this
.
_lastClosedTabIndex
>
INVALID_TAB_INDEX
;
}
_sendClosedTabsToJava
(
aWindow
)
{
if
(
this
.
_loadState
<
=
STATE_QUITTING
)
{
return
;
}
if
(
!
aWindow
.
__SSID
)
{
throw
new
Error
(
Components
.
returnCode
=
Cr
.
NS_ERROR_INVALID_ARG
)
;
}
let
closedTabs
=
this
.
_windows
[
aWindow
.
__SSID
]
.
closedTabs
;
let
isPrivate
=
PrivateBrowsingUtils
.
isBrowserPrivate
(
aWindow
.
BrowserApp
.
selectedBrowser
)
;
let
tabs
=
closedTabs
.
filter
(
tab
=
>
tab
.
isPrivate
=
=
isPrivate
)
.
map
(
function
(
tab
)
{
let
entry
=
tab
.
entries
[
tab
.
index
-
1
]
;
return
{
url
:
entry
.
url
title
:
entry
.
title
|
|
"
"
data
:
JSON
.
stringify
(
tab
)
}
;
}
)
;
log
(
"
sending
"
+
tabs
.
length
+
"
closed
tabs
to
Java
"
)
;
EventDispatcher
.
instance
.
sendRequest
(
{
type
:
"
ClosedTabs
:
Data
"
tabs
:
tabs
}
)
;
}
getTabValue
(
aTab
aKey
)
{
let
browser
=
aTab
.
browser
;
let
data
=
browser
.
__SS_extdata
|
|
{
}
;
return
data
[
aKey
]
|
|
"
"
;
}
setTabValue
(
aTab
aKey
aStringValue
)
{
let
browser
=
aTab
.
browser
;
if
(
!
browser
.
__SS_extdata
)
{
browser
.
__SS_extdata
=
{
}
;
}
browser
.
__SS_extdata
[
aKey
]
=
aStringValue
;
this
.
saveStateDelayed
(
)
;
}
deleteTabValue
(
aTab
aKey
)
{
let
browser
=
aTab
.
browser
;
if
(
browser
.
__SS_extdata
&
&
aKey
in
browser
.
__SS_extdata
)
{
delete
browser
.
__SS_extdata
[
aKey
]
;
this
.
saveStateDelayed
(
)
;
}
}
restoreLastSession
(
aSessionString
)
{
let
notifyMessage
=
"
"
;
try
{
this
.
_restoreWindow
(
aSessionString
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
"
SessionStore
:
"
+
e
)
;
notifyMessage
=
"
fail
"
;
}
Services
.
obs
.
notifyObservers
(
null
"
sessionstore
-
windows
-
restored
"
notifyMessage
)
;
}
removeWindow
(
aWindow
)
{
if
(
!
aWindow
|
|
!
aWindow
.
__SSID
|
|
!
this
.
_windows
[
aWindow
.
__SSID
]
)
{
return
;
}
delete
this
.
_windows
[
aWindow
.
__SSID
]
;
delete
aWindow
.
__SSID
;
if
(
this
.
_loadState
=
=
STATE_RUNNING
)
{
this
.
saveState
(
)
;
}
else
if
(
this
.
_loadState
<
=
STATE_QUITTING
)
{
this
.
saveStateDelayed
(
)
;
}
}
setLoadState
(
aState
)
{
this
.
flushPendingState
(
)
;
this
.
_loadState
=
aState
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
SessionStore
]
)
;
