const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
const
Cr
=
Components
.
results
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
PROMPT_DISPLAYED
=
0
;
const
PROMPT_ADD
=
1
;
const
PROMPT_NOTNOW
=
2
;
const
PROMPT_NEVER
=
3
;
const
PROMPT_UPDATE
=
1
;
function
LoginManagerPrompter
(
)
{
}
LoginManagerPrompter
.
prototype
=
{
classID
:
Components
.
ID
(
"
97d12931
-
abe2
-
11df
-
94e2
-
0800200c9a66
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsILoginManagerPrompter
]
)
_factory
:
null
_window
:
null
_debug
:
false
__pwmgr
:
null
get
_pwmgr
(
)
{
if
(
!
this
.
__pwmgr
)
this
.
__pwmgr
=
Cc
[
"
mozilla
.
org
/
login
-
manager
;
1
"
]
.
getService
(
Ci
.
nsILoginManager
)
;
return
this
.
__pwmgr
;
}
__promptService
:
null
get
_promptService
(
)
{
if
(
!
this
.
__promptService
)
this
.
__promptService
=
Cc
[
"
mozilla
.
org
/
embedcomp
/
prompt
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPromptService2
)
;
return
this
.
__promptService
;
}
__strBundle
:
null
get
_strBundle
(
)
{
if
(
!
this
.
__strBundle
)
{
let
bunService
=
Cc
[
"
mozilla
.
org
/
intl
/
stringbundle
;
1
"
]
.
getService
(
Ci
.
nsIStringBundleService
)
;
this
.
__strBundle
=
{
pwmgr
:
bunService
.
createBundle
(
"
chrome
:
/
/
passwordmgr
/
locale
/
passwordmgr
.
properties
"
)
brand
:
bunService
.
createBundle
(
"
chrome
:
/
/
branding
/
locale
/
brand
.
properties
"
)
}
;
if
(
!
this
.
__strBundle
)
throw
"
String
bundle
for
Login
Manager
not
present
!
"
;
}
return
this
.
__strBundle
;
}
__ellipsis
:
null
get
_ellipsis
(
)
{
if
(
!
this
.
__ellipsis
)
{
this
.
__ellipsis
=
"
\
u2026
"
;
try
{
this
.
__ellipsis
=
Services
.
prefs
.
getComplexValue
(
"
intl
.
ellipsis
"
Ci
.
nsIPrefLocalizedString
)
.
data
;
}
catch
(
e
)
{
}
}
return
this
.
__ellipsis
;
}
log
:
function
(
message
)
{
if
(
!
this
.
_debug
)
return
;
dump
(
"
Pwmgr
Prompter
:
"
+
message
+
"
\
n
"
)
;
Services
.
console
.
logStringMessage
(
"
Pwmgr
Prompter
:
"
+
message
)
;
}
init
:
function
(
aWindow
aFactory
)
{
this
.
_chromeWindow
=
this
.
_getChromeWindow
(
aWindow
)
.
wrappedJSObject
;
this
.
_factory
=
aFactory
|
|
null
;
this
.
_browser
=
null
;
var
prefBranch
=
Services
.
prefs
.
getBranch
(
"
signon
.
"
)
;
this
.
_debug
=
prefBranch
.
getBoolPref
(
"
debug
"
)
;
this
.
log
(
"
=
=
=
=
=
initialized
=
=
=
=
=
"
)
;
}
set
browser
(
aBrowser
)
{
this
.
_browser
=
aBrowser
;
}
set
opener
(
aOpener
)
{
}
promptToSavePassword
:
function
(
aLogin
)
{
this
.
_showSaveLoginNotification
(
aLogin
)
;
Services
.
telemetry
.
getHistogramById
(
"
PWMGR_PROMPT_REMEMBER_ACTION
"
)
.
add
(
PROMPT_DISPLAYED
)
;
Services
.
obs
.
notifyObservers
(
aLogin
"
passwordmgr
-
prompt
-
save
"
null
)
;
}
_showLoginNotification
:
function
(
aBody
aButtons
aUsername
aPassword
)
{
let
tabID
=
this
.
_chromeWindow
.
BrowserApp
.
getTabForBrowser
(
this
.
_browser
)
.
id
;
let
actionText
=
{
text
:
aUsername
type
:
"
EDIT
"
bundle
:
{
username
:
aUsername
password
:
aPassword
}
}
;
let
options
=
{
persistWhileVisible
:
true
timeout
:
Date
.
now
(
)
+
10000
actionText
:
actionText
}
var
nativeWindow
=
this
.
_getNativeWindow
(
)
;
if
(
nativeWindow
)
nativeWindow
.
doorhanger
.
show
(
aBody
"
password
"
aButtons
tabID
options
"
LOGIN
"
)
;
}
_showSaveLoginNotification
:
function
(
aLogin
)
{
let
brandShortName
=
this
.
_strBundle
.
brand
.
GetStringFromName
(
"
brandShortName
"
)
;
let
notificationText
=
this
.
_getLocalizedString
(
"
saveLogin
"
[
brandShortName
]
)
;
let
username
=
aLogin
.
username
?
this
.
_sanitizeUsername
(
aLogin
.
username
)
:
"
"
;
var
pwmgr
=
this
.
_pwmgr
;
let
promptHistogram
=
Services
.
telemetry
.
getHistogramById
(
"
PWMGR_PROMPT_REMEMBER_ACTION
"
)
;
var
buttons
=
[
{
label
:
this
.
_getLocalizedString
(
"
neverButton
"
)
callback
:
function
(
)
{
promptHistogram
.
add
(
PROMPT_NEVER
)
;
pwmgr
.
setLoginSavingEnabled
(
aLogin
.
hostname
false
)
;
}
}
{
label
:
this
.
_getLocalizedString
(
"
rememberButton
"
)
callback
:
function
(
checked
response
)
{
if
(
response
)
{
aLogin
.
username
=
response
[
"
username
"
]
|
|
aLogin
.
username
;
aLogin
.
password
=
response
[
"
password
"
]
|
|
aLogin
.
password
;
}
pwmgr
.
addLogin
(
aLogin
)
;
promptHistogram
.
add
(
PROMPT_ADD
)
;
}
positive
:
true
}
]
;
this
.
_showLoginNotification
(
notificationText
buttons
aLogin
.
username
aLogin
.
password
)
;
}
promptToChangePassword
:
function
(
aOldLogin
aNewLogin
)
{
this
.
_showChangeLoginNotification
(
aOldLogin
aNewLogin
.
password
)
;
Services
.
telemetry
.
getHistogramById
(
"
PWMGR_PROMPT_UPDATE_ACTION
"
)
.
add
(
PROMPT_DISPLAYED
)
;
let
oldGUID
=
aOldLogin
.
QueryInterface
(
Ci
.
nsILoginMetaInfo
)
.
guid
;
Services
.
obs
.
notifyObservers
(
aNewLogin
"
passwordmgr
-
prompt
-
change
"
oldGUID
)
;
}
_showChangeLoginNotification
:
function
(
aOldLogin
aNewPassword
)
{
var
notificationText
;
if
(
aOldLogin
.
username
)
{
let
displayUser
=
this
.
_sanitizeUsername
(
aOldLogin
.
username
)
;
notificationText
=
this
.
_getLocalizedString
(
"
updatePassword
"
[
displayUser
]
)
;
}
else
{
notificationText
=
this
.
_getLocalizedString
(
"
updatePasswordNoUser
"
)
;
}
var
self
=
this
;
let
promptHistogram
=
Services
.
telemetry
.
getHistogramById
(
"
PWMGR_PROMPT_UPDATE_ACTION
"
)
;
var
buttons
=
[
{
label
:
this
.
_getLocalizedString
(
"
dontUpdateButton
"
)
callback
:
function
(
)
{
promptHistogram
.
add
(
PROMPT_NOTNOW
)
;
}
}
{
label
:
this
.
_getLocalizedString
(
"
updateButton
"
)
callback
:
function
(
checked
response
)
{
let
password
=
response
?
response
[
"
password
"
]
:
aNewPassword
;
self
.
_updateLogin
(
aOldLogin
password
)
;
promptHistogram
.
add
(
PROMPT_UPDATE
)
;
}
positive
:
true
}
]
;
this
.
_showLoginNotification
(
notificationText
buttons
aOldLogin
.
username
aNewPassword
)
;
}
promptToChangePasswordWithUsernames
:
function
(
logins
count
aNewLogin
)
{
const
buttonFlags
=
Ci
.
nsIPrompt
.
STD_YES_NO_BUTTONS
;
var
usernames
=
logins
.
map
(
l
=
>
l
.
username
)
;
var
dialogText
=
this
.
_getLocalizedString
(
"
userSelectText
"
)
;
var
dialogTitle
=
this
.
_getLocalizedString
(
"
passwordChangeTitle
"
)
;
var
selectedIndex
=
{
value
:
null
}
;
var
ok
=
this
.
_promptService
.
select
(
null
dialogTitle
dialogText
usernames
.
length
usernames
selectedIndex
)
;
if
(
ok
)
{
let
selectedLogin
=
logins
[
selectedIndex
.
value
]
;
this
.
log
(
"
Updating
password
for
user
"
+
selectedLogin
.
username
)
;
this
.
_updateLogin
(
selectedLogin
aNewLogin
.
password
)
;
}
}
_updateLogin
:
function
(
login
newPassword
)
{
var
now
=
Date
.
now
(
)
;
var
propBag
=
Cc
[
"
mozilla
.
org
/
hash
-
property
-
bag
;
1
"
]
.
createInstance
(
Ci
.
nsIWritablePropertyBag
)
;
if
(
newPassword
)
{
propBag
.
setProperty
(
"
password
"
newPassword
)
;
propBag
.
setProperty
(
"
timePasswordChanged
"
now
)
;
}
propBag
.
setProperty
(
"
timeLastUsed
"
now
)
;
propBag
.
setProperty
(
"
timesUsedIncrement
"
1
)
;
this
.
_pwmgr
.
modifyLogin
(
login
propBag
)
;
}
_getChromeWindow
:
function
(
aWindow
)
{
if
(
aWindow
instanceof
Ci
.
nsIDOMChromeWindow
)
return
aWindow
;
var
chromeWin
=
aWindow
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIWebNavigation
)
.
QueryInterface
(
Ci
.
nsIDocShell
)
.
chromeEventHandler
.
ownerGlobal
;
return
chromeWin
;
}
_getNativeWindow
:
function
(
)
{
let
nativeWindow
=
null
;
try
{
let
chromeWin
=
this
.
_chromeWindow
;
if
(
chromeWin
.
NativeWindow
)
{
nativeWindow
=
chromeWin
.
NativeWindow
;
}
else
{
Cu
.
reportError
(
"
NativeWindow
not
available
on
window
"
)
;
}
}
catch
(
e
)
{
Cu
.
reportError
(
"
No
NativeWindow
available
:
"
+
e
)
;
}
return
nativeWindow
;
}
_getLocalizedString
:
function
(
key
formatArgs
)
{
if
(
formatArgs
)
return
this
.
_strBundle
.
pwmgr
.
formatStringFromName
(
key
formatArgs
formatArgs
.
length
)
;
else
return
this
.
_strBundle
.
pwmgr
.
GetStringFromName
(
key
)
;
}
_sanitizeUsername
:
function
(
username
)
{
if
(
username
.
length
>
30
)
{
username
=
username
.
substring
(
0
30
)
;
username
+
=
this
.
_ellipsis
;
}
return
username
.
replace
(
/
[
'
"
]
/
g
"
"
)
;
}
}
;
var
component
=
[
LoginManagerPrompter
]
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
component
)
;
