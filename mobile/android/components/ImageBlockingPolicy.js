const
{
classes
:
Cc
interfaces
:
Ci
manager
:
Cm
utils
:
Cu
results
:
Cr
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Timer
.
jsm
"
)
;
let
PLACEHOLDER_IMG
=
"
chrome
:
/
/
browser
/
skin
/
images
/
placeholder_image
.
svg
"
;
function
ImageBlockingPolicy
(
)
{
}
ImageBlockingPolicy
.
prototype
=
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIContentPolicy
]
)
classDescription
:
"
Click
-
To
-
Play
Image
"
classID
:
Components
.
ID
(
"
{
f55f77f9
-
d33d
-
4759
-
82fc
-
60db3ee0bb91
}
"
)
contractID
:
"
mozilla
.
org
/
browser
/
blockimages
-
policy
;
1
"
xpcom_categories
:
[
{
category
:
"
content
-
policy
"
service
:
true
}
]
shouldLoad
:
function
(
contentType
contentLocation
requestOrigin
node
mimeTypeGuess
extra
)
{
if
(
!
getEnabled
(
)
)
{
return
Ci
.
nsIContentPolicy
.
ACCEPT
;
}
if
(
contentType
=
=
=
Ci
.
nsIContentPolicy
.
TYPE_IMAGE
|
|
contentType
=
=
=
Ci
.
nsIContentPolicy
.
TYPE_IMAGESET
)
{
if
(
!
contentLocation
.
schemeIs
(
"
http
"
)
&
&
!
contentLocation
.
schemeIs
(
"
https
"
)
)
{
return
Ci
.
nsIContentPolicy
.
ACCEPT
;
}
if
(
node
instanceof
Ci
.
nsIDOMHTMLImageElement
)
{
if
(
node
.
getAttribute
(
"
data
-
ctv
-
show
"
)
=
=
"
true
"
)
{
return
Ci
.
nsIContentPolicy
.
ACCEPT
;
}
setTimeout
(
(
)
=
>
{
node
.
setAttribute
(
"
data
-
ctv
-
src
"
contentLocation
.
spec
)
;
node
.
setAttribute
(
"
src
"
PLACEHOLDER_IMG
)
;
node
.
removeAttribute
(
"
srcset
"
)
;
}
0
)
;
}
return
Ci
.
nsIContentPolicy
.
REJECT
;
}
return
Ci
.
nsIContentPolicy
.
ACCEPT
;
}
shouldProcess
:
function
(
contentType
contentLocation
requestOrigin
node
mimeTypeGuess
extra
)
{
return
Ci
.
nsIContentPolicy
.
ACCEPT
;
}
}
;
function
getEnabled
(
)
{
return
Services
.
prefs
.
getBoolPref
(
"
browser
.
image_blocking
.
enabled
"
)
;
}
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
ImageBlockingPolicy
]
)
;
