const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
RuntimePermissions
"
"
resource
:
/
/
gre
/
modules
/
RuntimePermissions
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
DoorHanger
"
"
resource
:
/
/
gre
/
modules
/
Prompt
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
PrivateBrowsingUtils
"
"
resource
:
/
/
gre
/
modules
/
PrivateBrowsingUtils
.
jsm
"
)
;
const
kEntities
=
{
contacts
:
"
contacts
"
"
desktop
-
notification
"
:
"
desktopNotification2
"
geolocation
:
"
geolocation
"
}
;
function
ContentPermissionPrompt
(
)
{
}
ContentPermissionPrompt
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
C6E8C44D
-
9F39
-
4AF7
-
BCC0
-
76E38A8310F5
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIContentPermissionPrompt
]
)
handleExistingPermission
:
function
handleExistingPermission
(
request
type
callback
)
{
let
result
=
Services
.
perms
.
testExactPermissionFromPrincipal
(
request
.
principal
type
)
;
if
(
result
=
=
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
{
callback
(
true
)
;
return
true
;
}
if
(
result
=
=
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
{
callback
(
false
)
;
return
true
;
}
return
false
;
}
getChromeWindow
:
function
getChromeWindow
(
aWindow
)
{
let
chromeWin
=
aWindow
.
docShell
.
rootTreeItem
.
domWindow
.
QueryInterface
(
Ci
.
nsIDOMChromeWindow
)
;
return
chromeWin
;
}
getChromeForRequest
:
function
getChromeForRequest
(
request
)
{
if
(
request
.
window
)
{
let
requestingWindow
=
request
.
window
.
top
;
return
this
.
getChromeWindow
(
requestingWindow
)
.
wrappedJSObject
;
}
return
request
.
element
.
ownerGlobal
;
}
prompt
:
function
(
request
)
{
let
types
=
request
.
types
.
QueryInterface
(
Ci
.
nsIArray
)
;
if
(
types
.
length
!
=
1
)
{
request
.
cancel
(
)
;
return
;
}
let
perm
=
types
.
queryElementAt
(
0
Ci
.
nsIContentPermissionType
)
;
let
callback
=
allow
=
>
{
if
(
!
allow
)
{
request
.
cancel
(
)
;
return
;
}
if
(
perm
.
type
=
=
=
"
geolocation
"
)
{
RuntimePermissions
.
waitForPermissions
(
RuntimePermissions
.
ACCESS_FINE_LOCATION
)
.
then
(
granted
=
>
{
(
granted
?
request
.
allow
:
request
.
cancel
)
(
)
;
}
)
;
return
;
}
request
.
allow
(
)
;
}
;
let
isPrivate
=
PrivateBrowsingUtils
.
isWindowPrivate
(
request
.
window
.
ownerGlobal
)
;
if
(
this
.
handleExistingPermission
(
request
perm
.
type
callback
)
)
{
return
;
}
if
(
perm
.
type
=
=
=
"
desktop
-
notification
"
&
&
Services
.
prefs
.
getBoolPref
(
"
dom
.
webnotifications
.
requireuserinteraction
"
false
)
&
&
!
request
.
isHandlingUserInput
)
{
request
.
cancel
(
)
;
return
;
}
let
browserBundle
=
Services
.
strings
.
createBundle
(
"
chrome
:
/
/
browser
/
locale
/
browser
.
properties
"
)
;
let
entityName
=
kEntities
[
perm
.
type
]
;
let
buttons
=
[
{
label
:
browserBundle
.
GetStringFromName
(
entityName
+
"
.
dontAllow
"
)
callback
:
function
(
aChecked
)
{
if
(
aChecked
|
|
entityName
=
=
"
desktopNotification2
"
)
{
Services
.
perms
.
addFromPrincipal
(
request
.
principal
perm
.
type
Ci
.
nsIPermissionManager
.
DENY_ACTION
)
;
}
callback
(
false
)
;
}
}
{
label
:
browserBundle
.
GetStringFromName
(
entityName
+
"
.
allow
"
)
callback
:
function
(
aChecked
)
{
let
isPermanent
=
aChecked
|
|
entityName
=
=
"
desktopNotification2
"
;
if
(
!
isPrivate
&
&
isPermanent
)
{
Services
.
perms
.
addFromPrincipal
(
request
.
principal
perm
.
type
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
}
else
if
(
isPrivate
&
&
isPermanent
)
{
Services
.
perms
.
addFromPrincipal
(
request
.
principal
perm
.
type
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
Ci
.
nsIPermissionManager
.
EXPIRE_SESSION
)
;
}
callback
(
true
)
;
}
positive
:
true
}
]
;
let
chromeWin
=
this
.
getChromeForRequest
(
request
)
;
let
requestor
=
chromeWin
.
BrowserApp
&
&
chromeWin
.
BrowserApp
.
manifest
?
"
'
"
+
chromeWin
.
BrowserApp
.
manifest
.
name
+
"
'
"
:
request
.
principal
.
URI
.
host
;
let
message
=
browserBundle
.
formatStringFromName
(
entityName
+
"
.
ask
"
[
requestor
]
)
;
let
options
;
if
(
entityName
=
=
"
desktopNotification2
"
)
{
options
=
{
link
:
{
label
:
browserBundle
.
GetStringFromName
(
"
doorhanger
.
learnMore
"
)
url
:
"
https
:
/
/
www
.
mozilla
.
org
/
firefox
/
push
/
"
}
}
;
}
else
if
(
!
isPrivate
)
{
options
=
{
checkbox
:
browserBundle
.
GetStringFromName
(
entityName
+
"
.
dontAskAgain
"
)
}
;
}
else
{
options
=
{
}
;
}
options
.
defaultCallback
=
(
)
=
>
{
callback
(
false
)
;
}
;
DoorHanger
.
show
(
request
.
window
|
|
request
.
element
.
ownerGlobal
message
entityName
+
request
.
principal
.
URI
.
host
buttons
options
entityName
.
toUpperCase
(
)
)
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
ContentPermissionPrompt
]
)
;
