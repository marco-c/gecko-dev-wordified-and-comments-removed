const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonManagerPrivate
"
"
resource
:
/
/
gre
/
modules
/
AddonManager
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
AddonRepository
"
"
resource
:
/
/
gre
/
modules
/
addons
/
AddonRepository
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
OS
"
"
resource
:
/
/
gre
/
modules
/
osfile
.
jsm
"
)
;
function
getPref
(
func
preference
defaultValue
)
{
try
{
return
Services
.
prefs
[
func
]
(
preference
)
;
}
catch
(
e
)
{
}
return
defaultValue
;
}
const
PREF_ADDON_UPDATE_ENABLED
=
"
extensions
.
autoupdate
.
enabled
"
;
var
gNeedsRestart
=
false
;
function
AddonUpdateService
(
)
{
}
AddonUpdateService
.
prototype
=
{
classDescription
:
"
Add
-
on
auto
-
update
management
"
classID
:
Components
.
ID
(
"
{
93c8824c
-
9b87
-
45ae
-
bc90
-
5b82a1e4d877
}
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsITimerCallback
]
)
notify
:
function
aus_notify
(
aTimer
)
{
if
(
aTimer
&
&
!
getPref
(
"
getBoolPref
"
PREF_ADDON_UPDATE_ENABLED
true
)
)
return
;
if
(
gNeedsRestart
)
return
;
AddonManagerPrivate
.
backgroundUpdateCheck
(
)
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
AddonUpdateService
]
)
;
