const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
EventDispatcher
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
function
ContentDispatchChooser
(
)
{
}
ContentDispatchChooser
.
prototype
=
{
classID
:
Components
.
ID
(
"
5a072a22
-
1e66
-
4100
-
afc1
-
07aed8b62fc5
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIContentDispatchChooser
]
)
get
protoSvc
(
)
{
if
(
!
this
.
_protoSvc
)
{
this
.
_protoSvc
=
Cc
[
"
mozilla
.
org
/
uriloader
/
external
-
protocol
-
service
;
1
"
]
.
getService
(
Ci
.
nsIExternalProtocolService
)
;
}
return
this
.
_protoSvc
;
}
_getChromeWin
:
function
getChromeWin
(
)
{
try
{
return
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
}
catch
(
e
)
{
throw
Cr
.
NS_ERROR_FAILURE
;
}
}
_closeBlankWindow
:
function
(
aWindow
)
{
if
(
!
aWindow
|
|
aWindow
.
history
.
length
)
{
return
;
}
if
(
!
aWindow
.
location
.
href
|
|
aWindow
.
location
.
href
=
=
=
"
about
:
blank
"
)
{
aWindow
.
close
(
)
;
}
}
ask
:
function
ask
(
aHandler
aWindowContext
aURI
aReason
)
{
let
window
=
null
;
try
{
if
(
aWindowContext
)
window
=
aWindowContext
.
getInterface
(
Ci
.
nsIDOMWindow
)
;
}
catch
(
e
)
{
}
if
(
!
aURI
.
schemeIs
(
"
content
"
)
)
{
aHandler
=
this
.
protoSvc
.
getProtocolHandlerInfoFromOS
(
aURI
.
spec
{
}
)
;
if
(
aHandler
.
possibleApplicationHandlers
.
length
>
1
)
{
aHandler
.
launchWithURI
(
aURI
aWindowContext
)
;
this
.
_closeBlankWindow
(
window
)
;
return
;
}
}
let
win
=
this
.
_getChromeWin
(
)
;
if
(
!
win
)
{
return
;
}
let
msg
=
{
type
:
"
Intent
:
OpenNoHandler
"
uri
:
aURI
.
spec
}
;
EventDispatcher
.
instance
.
sendRequestForResult
(
msg
)
.
then
(
(
)
=
>
{
this
.
_closeBlankWindow
(
window
)
;
}
(
data
)
=
>
{
if
(
data
.
isFallback
)
{
window
.
location
.
href
=
data
.
uri
;
return
;
}
let
dwu
=
window
.
windowUtils
;
let
millis
=
dwu
.
millisSinceLastUserInput
;
if
(
millis
<
0
|
|
millis
>
=
1000
)
{
window
.
docShell
.
displayLoadError
(
Cr
.
NS_ERROR_UNKNOWN_PROTOCOL
aURI
null
)
;
}
else
{
this
.
_closeBlankWindow
(
window
)
;
}
}
)
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
ContentDispatchChooser
]
)
;
