ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
AppConstants
:
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
EventDispatcher
:
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
FileUtils
:
"
resource
:
/
/
gre
/
modules
/
FileUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
const
NS_APP_CACHE_PARENT_DIR
=
"
cachePDir
"
;
const
NS_APP_DISTRIBUTION_SEARCH_DIR_LIST
=
"
SrchPluginsDistDL
"
;
const
NS_XPCOM_CURRENT_PROCESS_DIR
=
"
XCurProcD
"
;
const
XRE_APP_DISTRIBUTION_DIR
=
"
XREAppDist
"
;
const
XRE_UPDATE_ROOT_DIR
=
"
UpdRootD
"
;
const
ENVVAR_UPDATE_DIR
=
"
UPDATES_DIRECTORY
"
;
const
WEBAPPS_DIR
=
"
webappsDir
"
;
const
SYSTEM_DIST_PATH
=
/
system
/
{
AppConstants
.
ANDROID_PACKAGE_NAME
}
/
distribution
;
function
DirectoryProvider
(
)
{
}
DirectoryProvider
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
ef0f7a87
-
c1ee
-
45a8
-
8d67
-
26f586e46a4b
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIDirectoryServiceProvider
Ci
.
nsIDirectoryServiceProvider2
]
)
getFile
:
function
(
prop
persistent
)
{
if
(
prop
=
=
NS_APP_CACHE_PARENT_DIR
)
{
let
profile
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
return
profile
;
}
else
if
(
prop
=
=
WEBAPPS_DIR
)
{
let
profile
=
Services
.
dirsvc
.
get
(
"
ProfD
"
Ci
.
nsIFile
)
;
return
profile
.
parent
;
}
else
if
(
prop
=
=
XRE_APP_DISTRIBUTION_DIR
)
{
let
distributionDirectories
=
this
.
_getDistributionDirectories
(
)
;
for
(
let
i
=
0
;
i
<
distributionDirectories
.
length
;
i
+
+
)
{
if
(
distributionDirectories
[
i
]
.
exists
(
)
)
{
return
distributionDirectories
[
i
]
;
}
}
return
FileUtils
.
getDir
(
NS_XPCOM_CURRENT_PROCESS_DIR
[
"
distribution
"
]
false
)
;
}
else
if
(
prop
=
=
XRE_UPDATE_ROOT_DIR
)
{
let
env
=
Cc
[
"
mozilla
.
org
/
process
/
environment
;
1
"
]
.
getService
(
Ci
.
nsIEnvironment
)
;
if
(
env
.
exists
(
ENVVAR_UPDATE_DIR
)
)
{
let
path
=
env
.
get
(
ENVVAR_UPDATE_DIR
)
;
if
(
path
)
{
return
new
FileUtils
.
File
(
path
)
;
}
}
return
new
FileUtils
.
File
(
env
.
get
(
"
DOWNLOADS_DIRECTORY
"
)
)
;
}
return
null
;
}
_appendDistroSearchDirs
:
function
(
array
)
{
let
distro
=
this
.
getFile
(
XRE_APP_DISTRIBUTION_DIR
)
;
if
(
!
distro
.
exists
(
)
)
return
;
let
searchPlugins
=
distro
.
clone
(
)
;
searchPlugins
.
append
(
"
searchplugins
"
)
;
if
(
!
searchPlugins
.
exists
(
)
)
return
;
let
commonPlugins
=
searchPlugins
.
clone
(
)
;
commonPlugins
.
append
(
"
common
"
)
;
if
(
commonPlugins
.
exists
(
)
)
array
.
push
(
commonPlugins
)
;
let
localePlugins
=
searchPlugins
.
clone
(
)
;
localePlugins
.
append
(
"
locale
"
)
;
if
(
!
localePlugins
.
exists
(
)
)
return
;
let
curLocale
=
"
"
;
let
reqLocales
=
Services
.
locale
.
getRequestedLocales
(
)
;
if
(
reqLocales
.
length
>
0
)
{
curLocale
=
reqLocales
[
0
]
;
}
if
(
curLocale
)
{
let
curLocalePlugins
=
localePlugins
.
clone
(
)
;
curLocalePlugins
.
append
(
curLocale
)
;
if
(
curLocalePlugins
.
exists
(
)
)
{
array
.
push
(
curLocalePlugins
)
;
return
;
}
}
try
{
let
defLocale
=
Services
.
prefs
.
getCharPref
(
"
distribution
.
searchplugins
.
defaultLocale
"
)
;
let
defLocalePlugins
=
localePlugins
.
clone
(
)
;
defLocalePlugins
.
append
(
defLocale
)
;
if
(
defLocalePlugins
.
exists
(
)
)
array
.
push
(
defLocalePlugins
)
;
}
catch
(
e
)
{
}
}
getFiles
:
function
(
prop
)
{
if
(
prop
!
=
NS_APP_DISTRIBUTION_SEARCH_DIR_LIST
)
return
null
;
let
result
=
[
]
;
this
.
_appendDistroSearchDirs
(
result
)
;
return
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsISimpleEnumerator
]
)
hasMoreElements
:
function
(
)
{
return
result
.
length
>
0
;
}
getNext
:
function
(
)
{
return
result
.
shift
(
)
;
}
}
;
}
_getDistributionDirectories
:
function
(
)
{
let
directories
=
[
]
;
EventDispatcher
.
instance
.
dispatch
(
"
Distribution
:
GetDirectories
"
null
{
onSuccess
:
response
=
>
directories
=
response
.
map
(
dir
=
>
new
FileUtils
.
File
(
dir
)
)
}
)
;
return
directories
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
DirectoryProvider
]
)
;
