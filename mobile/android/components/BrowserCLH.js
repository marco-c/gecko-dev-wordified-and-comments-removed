const
Cc
=
Components
.
classes
;
const
Ci
=
Components
.
interfaces
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
dump
(
a
)
{
Cc
[
"
mozilla
.
org
/
consoleservice
;
1
"
]
.
getService
(
Ci
.
nsIConsoleService
)
.
logStringMessage
(
a
)
;
}
function
resolveURIInternal
(
aCmdLine
aArgument
)
{
let
uri
=
aCmdLine
.
resolveURI
(
aArgument
)
;
if
(
uri
)
return
uri
;
try
{
let
urifixup
=
Cc
[
"
mozilla
.
org
/
docshell
/
urifixup
;
1
"
]
.
getService
(
Ci
.
nsIURIFixup
)
;
uri
=
urifixup
.
createFixupURI
(
aArgument
0
)
;
}
catch
(
e
)
{
Cu
.
reportError
(
e
)
;
}
return
uri
;
}
function
BrowserCLH
(
)
{
}
BrowserCLH
.
prototype
=
{
handle
:
function
fs_handle
(
aCmdLine
)
{
let
openURL
=
"
about
:
home
"
;
let
pinned
=
false
;
try
{
openURL
=
aCmdLine
.
handleFlagWithParam
(
"
url
"
false
)
;
}
catch
(
e
)
{
}
if
(
!
openURL
)
{
return
;
}
try
{
pinned
=
aCmdLine
.
handleFlag
(
"
bookmark
"
false
)
;
}
catch
(
e
)
{
}
try
{
let
uri
=
resolveURIInternal
(
aCmdLine
openURL
)
;
if
(
!
uri
)
return
;
let
browserWin
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
browserWin
)
{
let
whereFlags
=
pinned
?
Ci
.
nsIBrowserDOMWindow
.
OPEN_SWITCHTAB
:
Ci
.
nsIBrowserDOMWindow
.
OPEN_NEWTAB
;
browserWin
.
browserDOMWindow
.
openURI
(
uri
null
whereFlags
Ci
.
nsIBrowserDOMWindow
.
OPEN_EXTERNAL
)
;
}
aCmdLine
.
preventDefault
=
true
;
}
catch
(
x
)
{
dump
(
"
BrowserCLH
.
handle
:
"
+
x
)
;
}
}
setResourceSubstitutions
:
function
(
)
{
let
registry
=
Cc
[
"
mozilla
.
org
/
chrome
/
chrome
-
registry
;
1
"
]
.
getService
(
Ci
[
"
nsIChromeRegistry
"
]
)
;
let
url
=
registry
.
convertChromeURL
(
Services
.
io
.
newURI
(
"
chrome
:
/
/
browser
/
content
/
aboutHome
.
xhtml
"
null
null
)
)
.
spec
;
url
=
url
.
substring
(
4
url
.
indexOf
(
"
!
/
"
)
+
2
)
;
let
protocolHandler
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
protocolHandler
.
setSubstitution
(
"
android
"
Services
.
io
.
newURI
(
url
null
null
)
)
;
}
observe
:
function
(
subject
topic
data
)
{
switch
(
topic
)
{
case
"
app
-
startup
"
:
this
.
setResourceSubstitutions
(
)
;
break
;
}
}
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsICommandLineHandler
Ci
.
nsIObserver
]
)
classID
:
Components
.
ID
(
"
{
be623d20
-
d305
-
11de
-
8a39
-
0800200c9a66
}
"
)
}
;
var
components
=
[
BrowserCLH
]
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
components
)
;
