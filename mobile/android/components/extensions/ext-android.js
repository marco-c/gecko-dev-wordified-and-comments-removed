"
use
strict
"
;
const
getSender
=
(
extension
target
sender
)
=
>
{
let
tabId
=
-
1
;
if
(
"
tabId
"
in
sender
)
{
tabId
=
sender
.
tabId
;
delete
sender
.
tabId
;
}
else
if
(
ChromeUtils
.
getClassName
(
target
)
=
=
"
XULFrameElement
"
)
{
tabId
=
tabTracker
.
getBrowserData
(
target
)
.
tabId
;
}
if
(
tabId
!
=
null
&
&
tabId
>
=
0
)
{
let
tab
=
extension
.
tabManager
.
get
(
tabId
null
)
;
if
(
tab
)
{
sender
.
tab
=
tab
.
convert
(
)
;
}
}
}
;
global
.
tabGetSender
=
getSender
;
extensions
.
on
(
"
page
-
shutdown
"
(
type
context
)
=
>
{
if
(
context
.
viewType
=
=
"
tab
"
)
{
if
(
context
.
extension
.
id
!
=
=
context
.
xulBrowser
.
contentPrincipal
.
addonId
)
{
return
;
}
const
window
=
context
.
xulBrowser
.
ownerGlobal
;
let
{
BrowserApp
}
=
window
;
if
(
BrowserApp
)
{
let
nativeTab
=
BrowserApp
.
getTabForBrowser
(
context
.
xulBrowser
)
;
if
(
nativeTab
)
{
GeckoViewTabBridge
.
closeTab
(
{
window
extensionId
:
context
.
extension
.
id
}
)
;
}
}
}
}
)
;
global
.
openOptionsPage
=
extension
=
>
{
let
window
=
windowTracker
.
topWindow
;
if
(
!
window
)
{
return
Promise
.
reject
(
{
message
:
"
No
browser
window
available
"
}
)
;
}
let
{
BrowserApp
}
=
window
;
if
(
extension
.
manifest
.
options_ui
.
open_in_tab
)
{
BrowserApp
.
selectOrAddTab
(
extension
.
manifest
.
options_ui
.
page
{
selected
:
true
parentId
:
BrowserApp
.
selectedTab
.
id
}
)
;
}
else
{
BrowserApp
.
openAddonManager
(
{
addonId
:
extension
.
id
}
)
;
}
return
Promise
.
resolve
(
)
;
}
;
extensions
.
registerModules
(
{
browserAction
:
{
url
:
"
chrome
:
/
/
geckoview
/
content
/
ext
-
browserAction
.
js
"
schema
:
"
chrome
:
/
/
extensions
/
content
/
schemas
/
browser_action
.
json
"
scopes
:
[
"
addon_parent
"
]
manifest
:
[
"
browser_action
"
]
paths
:
[
[
"
browserAction
"
]
]
}
browsingData
:
{
url
:
"
chrome
:
/
/
geckoview
/
content
/
ext
-
browsingData
.
js
"
schema
:
"
chrome
:
/
/
geckoview
/
content
/
schemas
/
browsing_data
.
json
"
scopes
:
[
"
addon_parent
"
]
manifest
:
[
"
browsing_data
"
]
paths
:
[
[
"
browsingData
"
]
]
}
pageAction
:
{
url
:
"
chrome
:
/
/
geckoview
/
content
/
ext
-
pageAction
.
js
"
schema
:
"
chrome
:
/
/
extensions
/
content
/
schemas
/
page_action
.
json
"
scopes
:
[
"
addon_parent
"
]
manifest
:
[
"
page_action
"
]
paths
:
[
[
"
pageAction
"
]
]
}
tabs
:
{
url
:
"
chrome
:
/
/
geckoview
/
content
/
ext
-
tabs
.
js
"
schema
:
"
chrome
:
/
/
geckoview
/
content
/
schemas
/
tabs
.
json
"
scopes
:
[
"
addon_parent
"
]
paths
:
[
[
"
tabs
"
]
]
}
geckoViewAddons
:
{
schema
:
"
chrome
:
/
/
geckoview
/
content
/
schemas
/
gecko_view_addons
.
json
"
}
}
)
;
