"
use
strict
"
;
const
EXPORTED_SYMBOLS
=
[
"
BrowsingDataDelegate
"
]
;
const
{
ExtensionUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
ExtensionUtils
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
EventDispatcher
:
"
resource
:
/
/
gre
/
modules
/
Messaging
.
sys
.
mjs
"
}
)
;
const
{
ExtensionError
}
=
ExtensionUtils
;
class
BrowsingDataDelegate
{
constructor
(
extension
)
{
this
.
extension
=
extension
;
}
async
sendRequestForResult
(
type
data
)
{
try
{
const
result
=
await
lazy
.
EventDispatcher
.
instance
.
sendRequestForResult
(
{
type
extensionId
:
this
.
extension
.
id
.
.
.
data
}
)
;
return
result
;
}
catch
(
errorMessage
)
{
throw
new
ExtensionError
(
errorMessage
)
;
}
}
async
settings
(
)
{
return
this
.
sendRequestForResult
(
"
GeckoView
:
BrowsingData
:
GetSettings
"
)
;
}
async
sendClear
(
dataType
options
)
{
const
{
since
}
=
options
;
return
this
.
sendRequestForResult
(
"
GeckoView
:
BrowsingData
:
Clear
"
{
dataType
since
}
)
;
}
handleRemoval
(
dataType
options
)
{
switch
(
dataType
)
{
case
"
downloads
"
:
case
"
formData
"
:
case
"
history
"
:
case
"
passwords
"
:
return
this
.
sendClear
(
dataType
options
)
;
default
:
return
undefined
;
}
}
}
