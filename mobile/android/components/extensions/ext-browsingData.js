"
use
strict
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Task
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
Services
"
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
SharedPreferences
"
"
resource
:
/
/
gre
/
modules
/
SharedPreferences
.
jsm
"
)
;
let
clearCookies
=
async
function
(
options
)
{
if
(
options
.
originTypes
&
&
(
options
.
originTypes
.
protectedWeb
|
|
options
.
originTypes
.
extension
)
)
{
return
Promise
.
reject
(
{
message
:
"
Firefox
does
not
support
protectedWeb
or
extension
as
originTypes
.
"
}
)
;
}
let
cookieMgr
=
Services
.
cookies
;
let
yieldCounter
=
0
;
const
YIELD_PERIOD
=
10
;
if
(
options
.
since
)
{
let
since
=
options
.
since
*
1000
;
let
cookiesEnum
=
cookieMgr
.
enumerator
;
while
(
cookiesEnum
.
hasMoreElements
(
)
)
{
let
cookie
=
cookiesEnum
.
getNext
(
)
.
QueryInterface
(
Ci
.
nsICookie2
)
;
if
(
cookie
.
creationTime
>
=
since
)
{
cookieMgr
.
remove
(
cookie
.
host
cookie
.
name
cookie
.
path
false
cookie
.
originAttributes
)
;
if
(
+
+
yieldCounter
%
YIELD_PERIOD
=
=
0
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
}
}
}
}
else
{
cookieMgr
.
removeAll
(
)
;
}
}
;
this
.
browsingData
=
class
extends
ExtensionAPI
{
getAPI
(
context
)
{
return
{
browsingData
:
{
settings
(
)
{
const
PREF_DOMAIN
=
"
android
.
not_a_preference
.
privacy
.
clear
"
;
const
PREF_KEY_PREFIX
=
"
private
.
data
.
"
;
const
PREF_LIST
=
[
"
cache
"
"
history
"
"
formdata
"
"
cookies_sessions
"
"
downloadFiles
"
]
;
let
dataTrue
=
SharedPreferences
.
forProfile
(
)
.
getSetPref
(
PREF_DOMAIN
)
;
let
name
;
let
dataToRemove
=
{
}
;
let
dataRemovalPermitted
=
{
}
;
for
(
let
item
of
PREF_LIST
)
{
switch
(
item
)
{
case
"
formdata
"
:
name
=
"
formData
"
;
break
;
case
"
cookies_sessions
"
:
name
=
"
cookies
"
;
break
;
case
"
downloadFiles
"
:
name
=
"
downloads
"
;
break
;
default
:
name
=
item
;
}
dataToRemove
[
name
]
=
dataTrue
.
includes
(
{
PREF_KEY_PREFIX
}
{
item
}
)
;
dataRemovalPermitted
[
name
]
=
true
;
}
return
Promise
.
resolve
(
{
options
:
{
since
:
0
}
dataToRemove
dataRemovalPermitted
}
)
;
}
removeCookies
(
options
)
{
return
clearCookies
(
options
)
;
}
}
}
;
}
}
;
