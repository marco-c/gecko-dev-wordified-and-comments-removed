"
use
strict
"
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
)
;
GeckoViewUtils
.
initLogging
(
"
GeckoView
.
ExternalAppService
"
this
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
EventDispatcher
"
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
)
;
function
ExternalAppService
(
)
{
this
.
wrappedJSObject
=
this
;
}
ExternalAppService
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
a89eeec6
-
6608
-
42ee
-
a4f8
-
04d425992f45
}
"
)
QueryInterface
:
ChromeUtils
.
generateQI
(
[
Ci
.
nsIExternalHelperAppService
]
)
doContent
(
mimeType
request
context
forceSave
)
{
const
channel
=
request
.
QueryInterface
(
Ci
.
nsIChannel
)
;
debug
doContent
:
uri
=
{
channel
.
URI
.
displaySpec
}
contentType
=
{
channel
.
contentType
}
;
let
filename
=
null
;
try
{
filename
=
channel
.
contentDispositionFilename
;
}
catch
(
e
)
{
}
GeckoViewUtils
.
getDispatcherForWindow
(
context
)
.
sendRequest
(
{
type
:
"
GeckoView
:
ExternalResponse
"
uri
:
channel
.
URI
.
displaySpec
contentType
:
channel
.
contentType
contentLength
:
channel
.
contentLength
filename
:
filename
}
)
;
request
.
cancel
(
Cr
.
NS_ERROR_ABORT
)
;
Components
.
returnCode
=
Cr
.
NS_ERROR_ABORT
;
}
applyDecodingForExtension
(
ext
encoding
)
{
debug
applyDecodingForExtension
:
extension
=
{
ext
}
encoding
=
{
encoding
}
;
return
true
;
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
ExternalAppService
]
)
;
