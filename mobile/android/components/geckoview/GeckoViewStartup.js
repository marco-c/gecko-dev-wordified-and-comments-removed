ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
GeckoViewUtils
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
function
GeckoViewStartup
(
)
{
}
GeckoViewStartup
.
prototype
=
{
classID
:
Components
.
ID
(
"
{
8e993c34
-
fdd6
-
432c
-
967e
-
f995d888777f
}
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIObserver
]
)
setResourceSubstitutions
:
function
(
)
{
let
registry
=
Cc
[
"
mozilla
.
org
/
chrome
/
chrome
-
registry
;
1
"
]
.
getService
(
Ci
.
nsIChromeRegistry
)
;
let
url
=
registry
.
convertChromeURL
(
Services
.
io
.
newURI
(
"
chrome
:
/
/
geckoview
/
content
/
geckoview
.
js
"
)
)
.
spec
;
url
=
url
.
substring
(
4
url
.
indexOf
(
"
!
/
"
)
+
2
)
;
let
protocolHandler
=
Services
.
io
.
getProtocolHandler
(
"
resource
"
)
.
QueryInterface
(
Ci
.
nsIResProtocolHandler
)
;
protocolHandler
.
setSubstitution
(
"
android
"
Services
.
io
.
newURI
(
url
)
)
;
}
observe
:
function
(
aSubject
aTopic
aData
)
{
switch
(
aTopic
)
{
case
"
app
-
startup
"
:
{
Services
.
obs
.
addObserver
(
this
"
chrome
-
document
-
global
-
created
"
)
;
Services
.
obs
.
addObserver
(
this
"
content
-
document
-
global
-
created
"
)
;
GeckoViewUtils
.
addLazyGetter
(
this
"
GeckoViewPermission
"
{
service
:
"
mozilla
.
org
/
content
-
permission
/
prompt
;
1
"
observers
:
[
"
getUserMedia
:
ask
-
device
-
permission
"
"
getUserMedia
:
request
"
"
PeerConnection
:
request
"
]
}
)
;
if
(
Services
.
appinfo
.
processType
=
=
Services
.
appinfo
.
PROCESS_TYPE_DEFAULT
)
{
this
.
setResourceSubstitutions
(
)
;
}
else
{
GeckoViewUtils
.
addLazyGetter
(
this
"
GeckoViewPrompt
"
{
service
:
"
mozilla
.
org
/
prompter
;
1
"
}
)
;
}
break
;
}
case
"
profile
-
after
-
change
"
:
{
GeckoViewUtils
.
addLazyGetter
(
this
"
ContentPrefServiceParent
"
{
module
:
"
resource
:
/
/
gre
/
modules
/
ContentPrefServiceParent
.
jsm
"
init
:
cpsp
=
>
cpsp
.
alwaysInit
(
)
ppmm
:
[
"
ContentPrefs
:
FunctionCall
"
"
ContentPrefs
:
AddObserverForName
"
"
ContentPrefs
:
RemoveObserverForName
"
]
}
)
;
GeckoViewUtils
.
addLazyGetter
(
this
"
GeckoViewPrompt
"
{
service
:
"
mozilla
.
org
/
prompter
;
1
"
mm
:
[
"
GeckoView
:
Prompt
"
]
}
)
;
break
;
}
case
"
chrome
-
document
-
global
-
created
"
:
case
"
content
-
document
-
global
-
created
"
:
{
let
win
=
GeckoViewUtils
.
getChromeWindow
(
aSubject
)
;
if
(
win
!
=
=
aSubject
)
{
return
;
}
GeckoViewUtils
.
addLazyEventListener
(
win
[
"
click
"
"
contextmenu
"
]
{
handler
:
_
=
>
this
.
GeckoViewPrompt
options
:
{
capture
:
false
mozSystemGroup
:
true
}
}
)
;
break
;
}
}
}
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
GeckoViewStartup
]
)
;
