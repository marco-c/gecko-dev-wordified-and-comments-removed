#
ifndef
GECKOVIEWHISTORY_H
#
define
GECKOVIEWHISTORY_H
#
include
"
mozilla
/
BaseHistory
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
nsINamed
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
class
nsIWidget
;
namespace
mozilla
{
namespace
dom
{
class
Document
;
}
}
struct
VisitedURI
{
nsCOMPtr
<
nsIURI
>
mURI
;
bool
mVisited
=
false
;
}
;
class
GeckoViewHistory
final
:
public
mozilla
:
:
BaseHistory
public
nsITimerCallback
public
nsINamed
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSITIMERCALLBACK
NS_DECL_NSINAMED
NS_IMETHOD
VisitURI
(
nsIWidget
*
nsIURI
*
nsIURI
*
aLastVisitedURI
uint32_t
aFlags
)
final
;
NS_IMETHOD
SetURITitle
(
nsIURI
*
const
nsAString
&
)
final
;
mozilla
:
:
Result
<
mozilla
:
:
Ok
nsresult
>
StartVisitedQuery
(
nsIURI
*
)
final
;
void
CancelVisitedQueryIfPossible
(
nsIURI
*
)
final
;
static
already_AddRefed
<
GeckoViewHistory
>
GetSingleton
(
)
;
GeckoViewHistory
(
)
;
void
QueryVisitedState
(
nsIWidget
*
aWidget
const
nsTArray
<
nsCOMPtr
<
nsIURI
>
>
&
aURIs
)
;
void
HandleVisitedState
(
const
nsTArray
<
VisitedURI
>
&
aVisitedURIs
)
;
private
:
virtual
~
GeckoViewHistory
(
)
;
void
QueryVisitedStateInContentProcess
(
)
;
void
QueryVisitedStateInParentProcess
(
)
;
static
mozilla
:
:
StaticRefPtr
<
GeckoViewHistory
>
sHistory
;
nsTHashtable
<
nsURIHashKey
>
mNewURIs
;
nsCOMPtr
<
nsITimer
>
mQueryVisitedStateTimer
;
bool
mQueryVisitedStateTimerPending
=
false
;
}
;
#
endif
