#
ifndef
GeckoViewStreamListener_h__
#
define
GeckoViewStreamListener_h__
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
mozilla
/
widget
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
java
/
GeckoInputStreamNatives
.
h
"
#
include
"
mozilla
/
java
/
WebResponseWrappers
.
h
"
#
include
"
JavaBuiltins
.
h
"
namespace
mozilla
{
class
GeckoViewStreamListener
:
public
nsIStreamListener
public
nsIInterfaceRequestor
public
nsIChannelEventSink
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSICHANNELEVENTSINK
explicit
GeckoViewStreamListener
(
)
{
}
static
std
:
:
tuple
<
jni
:
:
ByteArray
:
:
LocalRef
java
:
:
sdk
:
:
Boolean
:
:
LocalRef
>
CertificateFromChannel
(
nsIChannel
*
aChannel
)
;
protected
:
virtual
~
GeckoViewStreamListener
(
)
{
}
java
:
:
GeckoInputStream
:
:
GlobalRef
mStream
;
java
:
:
GeckoInputStream
:
:
Support
:
:
GlobalRef
mSupport
;
void
InitializeStreamSupport
(
nsIRequest
*
aRequest
)
;
static
nsresult
WriteSegment
(
nsIInputStream
*
aInputStream
void
*
aClosure
const
char
*
aFromSegment
uint32_t
aToOffset
uint32_t
aCount
uint32_t
*
aWriteCount
)
;
virtual
nsresult
HandleWebResponse
(
nsIRequest
*
aRequest
)
;
virtual
void
SendWebResponse
(
java
:
:
WebResponse
:
:
Param
aResponse
)
=
0
;
virtual
void
CompleteWithError
(
nsresult
aStatus
nsIChannel
*
aChannel
)
=
0
;
}
;
}
#
endif
