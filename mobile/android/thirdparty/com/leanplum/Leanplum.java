package
com
.
leanplum
;
import
android
.
app
.
Activity
;
import
android
.
app
.
NotificationManager
;
import
android
.
app
.
PendingIntent
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
location
.
Location
;
import
android
.
os
.
AsyncTask
;
import
android
.
support
.
v4
.
app
.
NotificationCompat
;
import
android
.
text
.
TextUtils
;
import
com
.
leanplum
.
ActionContext
.
ContextualValues
;
import
com
.
leanplum
.
callbacks
.
ActionCallback
;
import
com
.
leanplum
.
callbacks
.
RegisterDeviceCallback
;
import
com
.
leanplum
.
callbacks
.
RegisterDeviceFinishedCallback
;
import
com
.
leanplum
.
callbacks
.
StartCallback
;
import
com
.
leanplum
.
callbacks
.
VariablesChangedCallback
;
import
com
.
leanplum
.
internal
.
Constants
;
import
com
.
leanplum
.
internal
.
FileManager
;
import
com
.
leanplum
.
internal
.
JsonConverter
;
import
com
.
leanplum
.
internal
.
LeanplumEventDataManager
;
import
com
.
leanplum
.
internal
.
LeanplumInternal
;
import
com
.
leanplum
.
internal
.
LeanplumMessageMatchFilter
;
import
com
.
leanplum
.
internal
.
LeanplumUIEditorWrapper
;
import
com
.
leanplum
.
internal
.
Log
;
import
com
.
leanplum
.
internal
.
OsHandler
;
import
com
.
leanplum
.
internal
.
Registration
;
import
com
.
leanplum
.
internal
.
Request
;
import
com
.
leanplum
.
internal
.
Util
;
import
com
.
leanplum
.
internal
.
Util
.
DeviceIdInfo
;
import
com
.
leanplum
.
internal
.
VarCache
;
import
com
.
leanplum
.
messagetemplates
.
MessageTemplates
;
import
com
.
leanplum
.
utils
.
BuildUtil
;
import
com
.
leanplum
.
utils
.
SharedPreferencesUtil
;
import
org
.
json
.
JSONArray
;
import
org
.
json
.
JSONObject
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Date
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
TimeZone
;
import
java
.
util
.
concurrent
.
Executors
;
import
java
.
util
.
concurrent
.
ScheduledExecutorService
;
import
java
.
util
.
concurrent
.
TimeUnit
;
public
class
Leanplum
{
public
static
final
int
ACTION_KIND_MESSAGE
=
1
;
public
static
final
int
ACTION_KIND_ACTION
=
1
<
<
1
;
public
static
final
String
PURCHASE_EVENT_NAME
=
"
Purchase
"
;
private
static
final
ArrayList
<
StartCallback
>
startHandlers
=
new
ArrayList
<
>
(
)
;
private
static
final
ArrayList
<
VariablesChangedCallback
>
variablesChangedHandlers
=
new
ArrayList
<
>
(
)
;
private
static
final
ArrayList
<
VariablesChangedCallback
>
noDownloadsHandlers
=
new
ArrayList
<
>
(
)
;
private
static
final
ArrayList
<
VariablesChangedCallback
>
onceNoDownloadsHandlers
=
new
ArrayList
<
>
(
)
;
private
static
final
Object
heartbeatLock
=
new
Object
(
)
;
private
static
RegisterDeviceCallback
registerDeviceHandler
;
private
static
RegisterDeviceFinishedCallback
registerDeviceFinishedHandler
;
private
static
LeanplumDeviceIdMode
deviceIdMode
=
LeanplumDeviceIdMode
.
MD5_MAC_ADDRESS
;
private
static
String
customDeviceId
;
private
static
boolean
userSpecifiedDeviceId
;
private
static
boolean
initializedMessageTemplates
=
false
;
private
static
boolean
locationCollectionEnabled
=
true
;
private
static
ScheduledExecutorService
heartbeatExecutor
;
private
static
Context
context
;
private
static
Runnable
pushStartCallback
;
private
Leanplum
(
)
{
}
public
static
void
setApiConnectionSettings
(
String
hostName
String
servletName
boolean
ssl
)
{
if
(
TextUtils
.
isEmpty
(
hostName
)
)
{
Log
.
e
(
"
setApiConnectionSettings
-
Empty
hostname
parameter
provided
.
"
)
;
return
;
}
if
(
TextUtils
.
isEmpty
(
servletName
)
)
{
Log
.
e
(
"
setApiConnectionSettings
-
Empty
servletName
parameter
provided
.
"
)
;
return
;
}
Constants
.
API_HOST_NAME
=
hostName
;
Constants
.
API_SERVLET
=
servletName
;
Constants
.
API_SSL
=
ssl
;
}
public
static
void
setSocketConnectionSettings
(
String
hostName
int
port
)
{
if
(
TextUtils
.
isEmpty
(
hostName
)
)
{
Log
.
e
(
"
setSocketConnectionSettings
-
Empty
hostName
parameter
provided
.
"
)
;
return
;
}
if
(
port
<
1
|
|
port
>
65535
)
{
Log
.
e
(
"
setSocketConnectionSettings
-
Invalid
port
parameter
provided
.
"
)
;
return
;
}
Constants
.
SOCKET_HOST
=
hostName
;
Constants
.
SOCKET_PORT
=
port
;
}
public
static
void
setFileHashingEnabledInDevelopmentMode
(
boolean
enabled
)
{
Constants
.
hashFilesToDetermineModifications
=
enabled
;
}
public
static
void
setFileUploadingEnabledInDevelopmentMode
(
boolean
enabled
)
{
Constants
.
enableFileUploadingInDevelopmentMode
=
enabled
;
}
public
static
void
enableVerboseLoggingInDevelopmentMode
(
)
{
Constants
.
enableVerboseLoggingInDevelopmentMode
=
true
;
}
public
static
void
setNetworkTimeout
(
int
seconds
int
downloadSeconds
)
{
if
(
seconds
<
0
)
{
Log
.
e
(
"
setNetworkTimeout
-
Invalid
seconds
parameter
provided
.
"
)
;
return
;
}
if
(
downloadSeconds
<
0
)
{
Log
.
e
(
"
setNetworkTimeout
-
Invalid
downloadSeconds
parameter
provided
.
"
)
;
return
;
}
Constants
.
NETWORK_TIMEOUT_SECONDS
=
seconds
;
Constants
.
NETWORK_TIMEOUT_SECONDS_FOR_DOWNLOADS
=
downloadSeconds
;
}
public
static
void
setCanDownloadContentMidSessionInProductionMode
(
boolean
value
)
{
Constants
.
canDownloadContentMidSessionInProduction
=
value
;
}
public
static
void
setAppIdForDevelopmentMode
(
String
appId
String
accessKey
)
{
if
(
TextUtils
.
isEmpty
(
appId
)
)
{
Log
.
e
(
"
setAppIdForDevelopmentMode
-
Empty
appId
parameter
provided
.
"
)
;
return
;
}
if
(
TextUtils
.
isEmpty
(
accessKey
)
)
{
Log
.
e
(
"
setAppIdForDevelopmentMode
-
Empty
accessKey
parameter
provided
.
"
)
;
return
;
}
Constants
.
isDevelopmentModeEnabled
=
true
;
Request
.
setAppId
(
appId
accessKey
)
;
}
public
static
void
setAppIdForProductionMode
(
String
appId
String
accessKey
)
{
if
(
TextUtils
.
isEmpty
(
appId
)
)
{
Log
.
e
(
"
setAppIdForProductionMode
-
Empty
appId
parameter
provided
.
"
)
;
return
;
}
if
(
TextUtils
.
isEmpty
(
accessKey
)
)
{
Log
.
e
(
"
setAppIdForProductionMode
-
Empty
accessKey
parameter
provided
.
"
)
;
return
;
}
Constants
.
isDevelopmentModeEnabled
=
false
;
Request
.
setAppId
(
appId
accessKey
)
;
}
public
static
void
trackAllAppScreens
(
)
{
LeanplumInternal
.
enableAutomaticScreenTracking
(
)
;
}
public
static
boolean
isScreenTrackingEnabled
(
)
{
return
LeanplumInternal
.
getIsScreenTrackingEnabled
(
)
;
}
public
static
boolean
isInterfaceEditingEnabled
(
)
{
return
LeanplumUIEditorWrapper
.
isUIEditorAvailable
(
)
;
}
public
static
void
setDeviceIdMode
(
LeanplumDeviceIdMode
mode
)
{
if
(
mode
=
=
null
)
{
Log
.
e
(
"
setDeviceIdMode
-
Invalid
mode
parameter
provided
.
"
)
;
return
;
}
deviceIdMode
=
mode
;
userSpecifiedDeviceId
=
true
;
}
public
static
void
setDeviceId
(
String
deviceId
)
{
if
(
TextUtils
.
isEmpty
(
deviceId
)
)
{
Log
.
w
(
"
setDeviceId
-
Empty
deviceId
parameter
provided
.
"
)
;
}
customDeviceId
=
deviceId
;
userSpecifiedDeviceId
=
true
;
}
public
static
String
getDeviceId
(
)
{
if
(
!
LeanplumInternal
.
hasCalledStart
(
)
)
{
Log
.
e
(
"
Leanplum
.
start
(
)
must
be
called
before
calling
getDeviceId
.
"
)
;
return
null
;
}
return
Request
.
deviceId
(
)
;
}
public
static
void
setApplicationContext
(
Context
context
)
{
if
(
context
=
=
null
)
{
Log
.
w
(
"
setApplicationContext
-
Null
context
parameter
provided
.
"
)
;
}
Leanplum
.
context
=
context
;
}
public
static
Context
getContext
(
)
{
if
(
context
=
=
null
)
{
Log
.
e
(
"
Your
application
context
is
not
set
.
"
+
"
You
should
call
Leanplum
.
setApplicationContext
(
this
)
or
"
+
"
LeanplumActivityHelper
.
enableLifecycleCallbacks
(
this
)
in
your
application
'
s
"
+
"
onCreate
method
or
have
your
application
extend
LeanplumApplication
.
"
)
;
}
return
context
;
}
public
static
void
syncResources
(
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
try
{
FileManager
.
enableResourceSyncing
(
null
null
false
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
public
static
void
syncResourcesAsync
(
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
try
{
FileManager
.
enableResourceSyncing
(
null
null
true
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
public
static
void
syncResources
(
List
<
String
>
patternsToInclude
List
<
String
>
patternsToExclude
)
{
try
{
FileManager
.
enableResourceSyncing
(
patternsToInclude
patternsToExclude
false
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
public
static
void
syncResourcesAsync
(
List
<
String
>
patternsToInclude
List
<
String
>
patternsToExclude
)
{
try
{
FileManager
.
enableResourceSyncing
(
patternsToInclude
patternsToExclude
true
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
public
static
boolean
isResourceSyncingEnabled
(
)
{
return
FileManager
.
isResourceSyncingEnabled
(
)
;
}
public
static
void
start
(
Context
context
)
{
start
(
context
null
null
null
null
)
;
}
public
static
void
start
(
Context
context
StartCallback
callback
)
{
start
(
context
null
null
callback
null
)
;
}
public
static
void
start
(
Context
context
Map
<
String
?
>
userAttributes
)
{
start
(
context
null
userAttributes
null
null
)
;
}
public
static
void
start
(
Context
context
String
userId
)
{
start
(
context
userId
null
null
null
)
;
}
public
static
void
start
(
Context
context
String
userId
StartCallback
callback
)
{
start
(
context
userId
null
callback
null
)
;
}
public
static
void
start
(
Context
context
String
userId
Map
<
String
?
>
userAttributes
)
{
start
(
context
userId
userAttributes
null
null
)
;
}
public
static
synchronized
void
start
(
final
Context
context
String
userId
Map
<
String
?
>
attributes
StartCallback
response
)
{
start
(
context
userId
attributes
response
null
)
;
}
static
synchronized
void
start
(
final
Context
context
final
String
userId
final
Map
<
String
?
>
attributes
StartCallback
response
final
Boolean
isBackground
)
{
try
{
OsHandler
.
getInstance
(
)
;
if
(
context
instanceof
Activity
)
{
LeanplumActivityHelper
.
currentActivity
=
(
Activity
)
context
;
}
final
boolean
actuallyInBackground
;
if
(
isBackground
=
=
null
)
{
actuallyInBackground
=
LeanplumActivityHelper
.
currentActivity
=
=
null
|
|
LeanplumActivityHelper
.
isActivityPaused
(
)
;
}
else
{
actuallyInBackground
=
isBackground
;
}
if
(
Constants
.
isNoop
(
)
)
{
LeanplumInternal
.
setHasStarted
(
true
)
;
LeanplumInternal
.
setStartSuccessful
(
true
)
;
triggerStartResponse
(
true
)
;
triggerVariablesChanged
(
)
;
triggerVariablesChangedAndNoDownloadsPending
(
)
;
VarCache
.
applyVariableDiffs
(
new
HashMap
<
String
Object
>
(
)
new
HashMap
<
String
Object
>
(
)
VarCache
.
getUpdateRuleDiffs
(
)
VarCache
.
getEventRuleDiffs
(
)
new
HashMap
<
String
Object
>
(
)
new
ArrayList
<
Map
<
String
Object
>
>
(
)
)
;
LeanplumInbox
.
getInstance
(
)
.
update
(
new
HashMap
<
String
LeanplumInboxMessage
>
(
)
0
false
)
;
return
;
}
if
(
response
!
=
null
)
{
addStartResponseHandler
(
response
)
;
}
if
(
context
!
=
null
)
{
Leanplum
.
setApplicationContext
(
context
.
getApplicationContext
(
)
)
;
}
if
(
LeanplumInternal
.
hasCalledStart
(
)
)
{
if
(
!
actuallyInBackground
&
&
LeanplumInternal
.
hasStartedInBackground
(
)
)
{
LeanplumInternal
.
setStartedInBackground
(
false
)
;
LeanplumInternal
.
moveToForeground
(
)
;
}
else
{
Log
.
i
(
"
Already
called
start
"
)
;
}
return
;
}
initializedMessageTemplates
=
true
;
MessageTemplates
.
register
(
Leanplum
.
getContext
(
)
)
;
LeanplumInternal
.
setStartedInBackground
(
actuallyInBackground
)
;
final
Map
<
String
?
>
validAttributes
=
LeanplumInternal
.
validateAttributes
(
attributes
"
userAttributes
"
true
)
;
LeanplumInternal
.
setCalledStart
(
true
)
;
if
(
validAttributes
!
=
null
)
{
LeanplumInternal
.
getUserAttributeChanges
(
)
.
add
(
validAttributes
)
;
}
Request
.
loadToken
(
)
;
VarCache
.
setSilent
(
true
)
;
VarCache
.
loadDiffs
(
)
;
VarCache
.
setSilent
(
false
)
;
LeanplumInbox
.
getInstance
(
)
.
load
(
)
;
VarCache
.
onUpdate
(
new
CacheUpdateBlock
(
)
{
Override
public
void
updateCache
(
)
{
triggerVariablesChanged
(
)
;
if
(
Request
.
numPendingDownloads
(
)
=
=
0
)
{
triggerVariablesChangedAndNoDownloadsPending
(
)
;
}
}
}
)
;
Request
.
onNoPendingDownloads
(
new
Request
.
NoPendingDownloadsCallback
(
)
{
Override
public
void
noPendingDownloads
(
)
{
triggerVariablesChangedAndNoDownloadsPending
(
)
;
}
}
)
;
Util
.
executeAsyncTask
(
true
new
AsyncTask
<
Void
Void
Void
>
(
)
{
Override
protected
Void
doInBackground
(
Void
.
.
.
params
)
{
try
{
startHelper
(
userId
validAttributes
actuallyInBackground
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
return
null
;
}
}
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
private
static
void
startHelper
(
String
userId
final
Map
<
String
?
>
attributes
final
boolean
isBackground
)
{
LeanplumEventDataManager
.
init
(
context
)
;
LeanplumPushService
.
onStart
(
)
;
Boolean
limitAdTracking
=
null
;
String
deviceId
=
Request
.
deviceId
(
)
;
if
(
deviceId
=
=
null
)
{
if
(
!
userSpecifiedDeviceId
&
&
Constants
.
defaultDeviceId
!
=
null
)
{
deviceId
=
Constants
.
defaultDeviceId
;
}
else
if
(
customDeviceId
!
=
null
)
{
deviceId
=
customDeviceId
;
}
else
{
DeviceIdInfo
deviceIdInfo
=
Util
.
getDeviceId
(
deviceIdMode
)
;
deviceId
=
deviceIdInfo
.
id
;
limitAdTracking
=
deviceIdInfo
.
limitAdTracking
;
}
Request
.
setDeviceId
(
deviceId
)
;
}
if
(
userId
=
=
null
)
{
userId
=
Request
.
userId
(
)
;
if
(
userId
=
=
null
)
{
userId
=
Request
.
deviceId
(
)
;
}
}
Request
.
setUserId
(
userId
)
;
String
versionName
=
Util
.
getVersionName
(
)
;
if
(
versionName
=
=
null
)
{
versionName
=
"
"
;
}
TimeZone
localTimeZone
=
TimeZone
.
getDefault
(
)
;
Date
now
=
new
Date
(
)
;
int
timezoneOffsetSeconds
=
localTimeZone
.
getOffset
(
now
.
getTime
(
)
)
/
1000
;
String
registrationId
=
SharedPreferencesUtil
.
getString
(
context
Constants
.
Defaults
.
LEANPLUM_PUSH
Constants
.
Defaults
.
PROPERTY_REGISTRATION_ID
)
;
HashMap
<
String
Object
>
params
=
new
HashMap
<
>
(
)
;
params
.
put
(
Constants
.
Params
.
INCLUDE_DEFAULTS
Boolean
.
toString
(
false
)
)
;
if
(
isBackground
)
{
params
.
put
(
Constants
.
Params
.
BACKGROUND
Boolean
.
toString
(
true
)
)
;
}
params
.
put
(
Constants
.
Params
.
VERSION_NAME
versionName
)
;
params
.
put
(
Constants
.
Params
.
DEVICE_NAME
Util
.
getDeviceName
(
)
)
;
params
.
put
(
Constants
.
Params
.
DEVICE_MODEL
Util
.
getDeviceModel
(
)
)
;
params
.
put
(
Constants
.
Params
.
DEVICE_SYSTEM_NAME
Util
.
getSystemName
(
)
)
;
params
.
put
(
Constants
.
Params
.
DEVICE_SYSTEM_VERSION
Util
.
getSystemVersion
(
)
)
;
params
.
put
(
Constants
.
Params
.
DEVICE_PUSH_TOKEN
registrationId
)
;
params
.
put
(
Constants
.
Keys
.
TIMEZONE
localTimeZone
.
getID
(
)
)
;
params
.
put
(
Constants
.
Keys
.
TIMEZONE_OFFSET_SECONDS
Integer
.
toString
(
timezoneOffsetSeconds
)
)
;
params
.
put
(
Constants
.
Keys
.
LOCALE
Util
.
getLocale
(
)
)
;
params
.
put
(
Constants
.
Keys
.
COUNTRY
Constants
.
Values
.
DETECT
)
;
params
.
put
(
Constants
.
Keys
.
REGION
Constants
.
Values
.
DETECT
)
;
params
.
put
(
Constants
.
Keys
.
CITY
Constants
.
Values
.
DETECT
)
;
params
.
put
(
Constants
.
Keys
.
LOCATION
Constants
.
Values
.
DETECT
)
;
if
(
Boolean
.
TRUE
.
equals
(
limitAdTracking
)
)
{
params
.
put
(
Constants
.
Params
.
LIMIT_TRACKING
limitAdTracking
.
toString
(
)
)
;
}
if
(
attributes
!
=
null
)
{
params
.
put
(
Constants
.
Params
.
USER_ATTRIBUTES
JsonConverter
.
toJson
(
attributes
)
)
;
}
if
(
Constants
.
isDevelopmentModeEnabled
)
{
params
.
put
(
Constants
.
Params
.
DEV_MODE
Boolean
.
TRUE
.
toString
(
)
)
;
}
params
.
put
(
Constants
.
Params
.
INBOX_MESSAGES
LeanplumInbox
.
getInstance
(
)
.
messagesIds
(
)
)
;
Util
.
initializePreLeanplumInstall
(
params
)
;
final
Request
request
=
Request
.
post
(
Constants
.
Methods
.
START
params
)
;
request
.
onApiResponse
(
new
Request
.
ApiResponseCallback
(
)
{
Override
public
void
response
(
List
<
Map
<
String
Object
>
>
requests
JSONObject
response
int
countOfEvents
)
{
Leanplum
.
handleApiResponse
(
response
requests
request
countOfEvents
)
;
}
}
)
;
if
(
isBackground
)
{
request
.
sendEventually
(
)
;
}
else
{
request
.
sendIfConnected
(
)
;
}
LeanplumInternal
.
triggerStartIssued
(
)
;
}
private
static
void
handleApiResponse
(
JSONObject
response
List
<
Map
<
String
Object
>
>
requests
final
Request
request
int
countOfUnsentRequests
)
{
boolean
hasStartResponse
=
false
;
JSONObject
lastStartResponse
=
null
;
try
{
if
(
request
.
getDataBaseIndex
(
)
>
=
countOfUnsentRequests
)
{
request
.
setDataBaseIndex
(
request
.
getDataBaseIndex
(
)
-
countOfUnsentRequests
)
;
return
;
}
final
int
responseCount
=
Request
.
numResponses
(
response
)
;
for
(
int
i
=
requests
.
size
(
)
-
1
;
i
>
=
0
;
i
-
-
)
{
Map
<
String
Object
>
currentRequest
=
requests
.
get
(
i
)
;
if
(
Constants
.
Methods
.
START
.
equals
(
currentRequest
.
get
(
Constants
.
Params
.
ACTION
)
)
)
{
if
(
i
<
responseCount
)
{
lastStartResponse
=
Request
.
getResponseAt
(
response
i
)
;
}
hasStartResponse
=
true
;
break
;
}
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
if
(
hasStartResponse
)
{
if
(
!
LeanplumInternal
.
hasStarted
(
)
)
{
request
.
onApiResponse
(
null
)
;
Leanplum
.
handleStartResponse
(
lastStartResponse
)
;
}
}
}
private
static
void
handleStartResponse
(
final
JSONObject
response
)
{
Util
.
executeAsyncTask
(
false
new
AsyncTask
<
Void
Void
Void
>
(
)
{
Override
protected
Void
doInBackground
(
Void
.
.
.
params
)
{
boolean
success
=
Request
.
isResponseSuccess
(
response
)
;
if
(
!
success
)
{
try
{
LeanplumInternal
.
setHasStarted
(
true
)
;
LeanplumInternal
.
setStartSuccessful
(
false
)
;
VarCache
.
loadDiffs
(
)
;
triggerStartResponse
(
false
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
else
{
try
{
LeanplumInternal
.
setHasStarted
(
true
)
;
LeanplumInternal
.
setStartSuccessful
(
true
)
;
JSONObject
values
=
response
.
optJSONObject
(
Constants
.
Keys
.
VARS
)
;
if
(
values
=
=
null
)
{
Log
.
e
(
"
No
variable
values
were
received
from
the
server
.
"
+
"
Please
contact
us
to
investigate
.
"
)
;
}
JSONObject
messages
=
response
.
optJSONObject
(
Constants
.
Keys
.
MESSAGES
)
;
if
(
messages
=
=
null
)
{
Log
.
d
(
"
No
messages
received
from
the
server
.
"
)
;
}
JSONObject
regions
=
response
.
optJSONObject
(
Constants
.
Keys
.
REGIONS
)
;
if
(
regions
=
=
null
)
{
Log
.
d
(
"
No
regions
received
from
the
server
.
"
)
;
}
JSONArray
variants
=
response
.
optJSONArray
(
Constants
.
Keys
.
VARIANTS
)
;
if
(
variants
=
=
null
)
{
Log
.
d
(
"
No
variants
received
from
the
server
.
"
)
;
}
if
(
BuildUtil
.
isNotificationChannelSupported
(
context
)
)
{
JSONArray
notificationChannels
=
response
.
optJSONArray
(
Constants
.
Keys
.
NOTIFICATION_CHANNELS
)
;
JSONArray
notificationGroups
=
response
.
optJSONArray
(
Constants
.
Keys
.
NOTIFICATION_GROUPS
)
;
String
defaultNotificationChannel
=
response
.
optString
(
Constants
.
Keys
.
DEFAULT_NOTIFICATION_CHANNEL
)
;
LeanplumNotificationChannel
.
configureNotificationGroups
(
context
notificationGroups
)
;
LeanplumNotificationChannel
.
configureNotificationChannels
(
context
notificationChannels
)
;
LeanplumNotificationChannel
.
configureDefaultNotificationChannel
(
context
defaultNotificationChannel
)
;
}
String
token
=
response
.
optString
(
Constants
.
Keys
.
TOKEN
null
)
;
Request
.
setToken
(
token
)
;
Request
.
saveToken
(
)
;
applyContentInResponse
(
response
true
)
;
VarCache
.
saveUserAttributes
(
)
;
triggerStartResponse
(
true
)
;
if
(
response
.
optBoolean
(
Constants
.
Keys
.
SYNC_INBOX
false
)
)
{
LeanplumInbox
.
getInstance
(
)
.
downloadMessages
(
)
;
}
if
(
response
.
optBoolean
(
Constants
.
Keys
.
LOGGING_ENABLED
false
)
)
{
Constants
.
loggingEnabled
=
true
;
}
if
(
Constants
.
isDevelopmentModeEnabled
)
{
final
Context
currentContext
=
(
LeanplumActivityHelper
.
currentActivity
!
=
context
&
&
LeanplumActivityHelper
.
currentActivity
!
=
null
)
?
LeanplumActivityHelper
.
currentActivity
:
context
;
if
(
!
response
.
optBoolean
(
Constants
.
Keys
.
IS_REGISTERED
)
&
&
registerDeviceHandler
!
=
null
)
{
registerDeviceHandler
.
setResponseHandler
(
new
RegisterDeviceCallback
.
EmailCallback
(
)
{
Override
public
void
onResponse
(
String
email
)
{
try
{
if
(
email
!
=
null
)
{
Registration
.
registerDevice
(
email
new
StartCallback
(
)
{
Override
public
void
onResponse
(
boolean
success
)
{
if
(
registerDeviceFinishedHandler
!
=
null
)
{
registerDeviceFinishedHandler
.
setSuccess
(
success
)
;
OsHandler
.
getInstance
(
)
.
post
(
registerDeviceFinishedHandler
)
;
}
if
(
success
)
{
try
{
LeanplumInternal
.
onHasStartedAndRegisteredAsDeveloper
(
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
}
)
;
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
OsHandler
.
getInstance
(
)
.
post
(
registerDeviceHandler
)
;
}
if
(
response
.
optBoolean
(
Constants
.
Keys
.
IS_REGISTERED_FROM_OTHER_APP
)
)
{
OsHandler
.
getInstance
(
)
.
post
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
NotificationCompat
.
Builder
builder
=
LeanplumNotificationHelper
.
getDefaultCompatNotificationBuilder
(
context
BuildUtil
.
isNotificationChannelSupported
(
context
)
)
;
if
(
builder
=
=
null
)
{
return
;
}
builder
.
setSmallIcon
(
android
.
R
.
drawable
.
star_on
)
.
setContentTitle
(
"
Leanplum
"
)
.
setContentText
(
"
Your
device
is
registered
.
"
)
;
builder
.
setContentIntent
(
PendingIntent
.
getActivity
(
currentContext
.
getApplicationContext
(
)
0
new
Intent
(
)
0
)
)
;
NotificationManager
mNotificationManager
=
(
NotificationManager
)
currentContext
.
getSystemService
(
Context
.
NOTIFICATION_SERVICE
)
;
mNotificationManager
.
notify
(
0
builder
.
build
(
)
)
;
}
catch
(
Throwable
t
)
{
Log
.
i
(
"
Device
is
registered
.
"
)
;
}
}
}
)
;
}
boolean
isRegistered
=
response
.
optBoolean
(
Constants
.
Keys
.
IS_REGISTERED
)
;
final
String
latestVersion
=
response
.
optString
(
Constants
.
Keys
.
LATEST_VERSION
null
)
;
if
(
isRegistered
&
&
latestVersion
!
=
null
)
{
Log
.
i
(
"
An
update
to
Leanplum
Android
SDK
"
+
latestVersion
+
"
is
available
.
Go
to
leanplum
.
com
to
download
it
.
"
)
;
}
JSONObject
valuesFromCode
=
response
.
optJSONObject
(
Constants
.
Keys
.
VARS_FROM_CODE
)
;
if
(
valuesFromCode
=
=
null
)
{
valuesFromCode
=
new
JSONObject
(
)
;
}
JSONObject
actionDefinitions
=
response
.
optJSONObject
(
Constants
.
Params
.
ACTION_DEFINITIONS
)
;
if
(
actionDefinitions
=
=
null
)
{
actionDefinitions
=
new
JSONObject
(
)
;
}
JSONObject
fileAttributes
=
response
.
optJSONObject
(
Constants
.
Params
.
FILE_ATTRIBUTES
)
;
if
(
fileAttributes
=
=
null
)
{
fileAttributes
=
new
JSONObject
(
)
;
}
VarCache
.
setDevModeValuesFromServer
(
JsonConverter
.
mapFromJson
(
valuesFromCode
)
JsonConverter
.
mapFromJson
(
fileAttributes
)
JsonConverter
.
mapFromJson
(
actionDefinitions
)
)
;
if
(
isRegistered
)
{
LeanplumInternal
.
onHasStartedAndRegisteredAsDeveloper
(
)
;
}
}
LeanplumInternal
.
moveToForeground
(
)
;
startHeartbeat
(
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
return
null
;
}
}
)
;
}
private
static
void
applyContentInResponse
(
JSONObject
response
boolean
alwaysApply
)
{
Map
<
String
Object
>
values
=
JsonConverter
.
mapFromJsonOrDefault
(
response
.
optJSONObject
(
Constants
.
Keys
.
VARS
)
)
;
Map
<
String
Object
>
messages
=
JsonConverter
.
mapFromJsonOrDefault
(
response
.
optJSONObject
(
Constants
.
Keys
.
MESSAGES
)
)
;
List
<
Map
<
String
Object
>
>
updateRules
=
JsonConverter
.
listFromJsonOrDefault
(
response
.
optJSONArray
(
Constants
.
Keys
.
UPDATE_RULES
)
)
;
List
<
Map
<
String
Object
>
>
eventRules
=
JsonConverter
.
listFromJsonOrDefault
(
response
.
optJSONArray
(
Constants
.
Keys
.
EVENT_RULES
)
)
;
Map
<
String
Object
>
regions
=
JsonConverter
.
mapFromJsonOrDefault
(
response
.
optJSONObject
(
Constants
.
Keys
.
REGIONS
)
)
;
List
<
Map
<
String
Object
>
>
variants
=
JsonConverter
.
listFromJsonOrDefault
(
response
.
optJSONArray
(
Constants
.
Keys
.
VARIANTS
)
)
;
if
(
alwaysApply
|
|
!
values
.
equals
(
VarCache
.
getDiffs
(
)
)
|
|
!
messages
.
equals
(
VarCache
.
getMessageDiffs
(
)
)
|
|
!
updateRules
.
equals
(
VarCache
.
getUpdateRuleDiffs
(
)
)
|
|
!
eventRules
.
equals
(
VarCache
.
getEventRuleDiffs
(
)
)
|
|
!
regions
.
equals
(
VarCache
.
regions
(
)
)
)
{
VarCache
.
applyVariableDiffs
(
values
messages
updateRules
eventRules
regions
variants
)
;
}
}
static
void
setClient
(
String
client
String
sdkVersion
String
defaultDeviceId
)
{
Constants
.
CLIENT
=
client
;
Constants
.
LEANPLUM_VERSION
=
sdkVersion
;
Constants
.
defaultDeviceId
=
defaultDeviceId
;
}
static
void
pause
(
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
if
(
!
LeanplumInternal
.
hasCalledStart
(
)
)
{
Log
.
e
(
"
You
cannot
call
pause
before
calling
start
"
)
;
return
;
}
if
(
LeanplumInternal
.
issuedStart
(
)
)
{
pauseInternal
(
)
;
}
else
{
LeanplumInternal
.
addStartIssuedHandler
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
pauseInternal
(
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
}
}
private
static
void
pauseInternal
(
)
{
Request
.
post
(
Constants
.
Methods
.
PAUSE_SESSION
null
)
.
sendIfConnected
(
)
;
pauseHeartbeat
(
)
;
LeanplumInternal
.
setIsPaused
(
true
)
;
}
static
void
resume
(
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
if
(
!
LeanplumInternal
.
hasCalledStart
(
)
)
{
Log
.
e
(
"
You
cannot
call
resume
before
calling
start
"
)
;
return
;
}
if
(
LeanplumInternal
.
issuedStart
(
)
)
{
resumeInternal
(
)
;
}
else
{
LeanplumInternal
.
addStartIssuedHandler
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
resumeInternal
(
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
}
}
private
static
void
resumeInternal
(
)
{
Request
request
=
Request
.
post
(
Constants
.
Methods
.
RESUME_SESSION
null
)
;
if
(
LeanplumInternal
.
hasStartedInBackground
(
)
)
{
LeanplumInternal
.
setStartedInBackground
(
false
)
;
request
.
sendIfConnected
(
)
;
}
else
{
request
.
sendIfDelayed
(
)
;
LeanplumInternal
.
maybePerformActions
(
"
resume
"
null
LeanplumMessageMatchFilter
.
LEANPLUM_ACTION_FILTER_ALL
null
null
)
;
}
resumeHeartbeat
(
)
;
LeanplumInternal
.
setIsPaused
(
false
)
;
}
private
static
void
startHeartbeat
(
)
{
synchronized
(
heartbeatLock
)
{
heartbeatExecutor
=
Executors
.
newSingleThreadScheduledExecutor
(
)
;
heartbeatExecutor
.
scheduleAtFixedRate
(
new
Runnable
(
)
{
public
void
run
(
)
{
try
{
Request
.
post
(
Constants
.
Methods
.
HEARTBEAT
null
)
.
sendIfDelayed
(
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
15
15
TimeUnit
.
MINUTES
)
;
}
}
private
static
void
pauseHeartbeat
(
)
{
synchronized
(
heartbeatLock
)
{
if
(
heartbeatExecutor
!
=
null
)
{
heartbeatExecutor
.
shutdown
(
)
;
}
}
}
private
static
void
resumeHeartbeat
(
)
{
startHeartbeat
(
)
;
}
public
static
void
stop
(
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
if
(
!
LeanplumInternal
.
hasCalledStart
(
)
)
{
Log
.
e
(
"
You
cannot
call
stop
before
calling
start
"
)
;
return
;
}
if
(
LeanplumInternal
.
issuedStart
(
)
)
{
stopInternal
(
)
;
}
else
{
LeanplumInternal
.
addStartIssuedHandler
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
stopInternal
(
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
}
}
private
static
void
stopInternal
(
)
{
Request
.
post
(
Constants
.
Methods
.
STOP
null
)
.
sendIfConnected
(
)
;
}
public
static
boolean
hasStarted
(
)
{
return
LeanplumInternal
.
hasStarted
(
)
;
}
public
static
LeanplumInbox
getInbox
(
)
{
return
LeanplumInbox
.
getInstance
(
)
;
}
public
static
boolean
hasStartedAndRegisteredAsDeveloper
(
)
{
return
LeanplumInternal
.
hasStartedAndRegisteredAsDeveloper
(
)
;
}
public
static
void
addStartResponseHandler
(
StartCallback
handler
)
{
if
(
handler
=
=
null
)
{
Log
.
e
(
"
addStartResponseHandler
-
Invalid
handler
parameter
provided
.
"
)
;
return
;
}
if
(
LeanplumInternal
.
hasStarted
(
)
)
{
if
(
LeanplumInternal
.
isStartSuccessful
(
)
)
{
handler
.
setSuccess
(
true
)
;
}
handler
.
run
(
)
;
}
else
{
synchronized
(
startHandlers
)
{
if
(
startHandlers
.
indexOf
(
handler
)
=
=
-
1
)
{
startHandlers
.
add
(
handler
)
;
}
}
}
}
public
static
void
removeStartResponseHandler
(
StartCallback
handler
)
{
if
(
handler
=
=
null
)
{
Log
.
e
(
"
removeStartResponseHandler
-
Invalid
handler
parameter
provided
.
"
)
;
return
;
}
synchronized
(
startHandlers
)
{
startHandlers
.
remove
(
handler
)
;
}
}
private
static
void
triggerStartResponse
(
boolean
success
)
{
synchronized
(
startHandlers
)
{
for
(
StartCallback
callback
:
startHandlers
)
{
callback
.
setSuccess
(
success
)
;
OsHandler
.
getInstance
(
)
.
post
(
callback
)
;
}
startHandlers
.
clear
(
)
;
}
}
public
static
void
addVariablesChangedHandler
(
VariablesChangedCallback
handler
)
{
if
(
handler
=
=
null
)
{
Log
.
e
(
"
addVariablesChangedHandler
-
Invalid
handler
parameter
provided
.
"
)
;
return
;
}
synchronized
(
variablesChangedHandlers
)
{
variablesChangedHandlers
.
add
(
handler
)
;
}
if
(
VarCache
.
hasReceivedDiffs
(
)
)
{
handler
.
variablesChanged
(
)
;
}
}
public
static
void
removeVariablesChangedHandler
(
VariablesChangedCallback
handler
)
{
if
(
handler
=
=
null
)
{
Log
.
e
(
"
removeVariablesChangedHandler
-
Invalid
handler
parameter
provided
.
"
)
;
return
;
}
synchronized
(
variablesChangedHandlers
)
{
variablesChangedHandlers
.
remove
(
handler
)
;
}
}
private
static
void
triggerVariablesChanged
(
)
{
synchronized
(
variablesChangedHandlers
)
{
for
(
VariablesChangedCallback
callback
:
variablesChangedHandlers
)
{
OsHandler
.
getInstance
(
)
.
post
(
callback
)
;
}
}
}
public
static
void
addVariablesChangedAndNoDownloadsPendingHandler
(
VariablesChangedCallback
handler
)
{
if
(
handler
=
=
null
)
{
Log
.
e
(
"
addVariablesChangedAndNoDownloadsPendingHandler
-
Invalid
handler
parameter
"
+
"
provided
.
"
)
;
return
;
}
synchronized
(
noDownloadsHandlers
)
{
noDownloadsHandlers
.
add
(
handler
)
;
}
if
(
VarCache
.
hasReceivedDiffs
(
)
&
&
Request
.
numPendingDownloads
(
)
=
=
0
)
{
handler
.
variablesChanged
(
)
;
}
}
public
static
void
removeVariablesChangedAndNoDownloadsPendingHandler
(
VariablesChangedCallback
handler
)
{
if
(
handler
=
=
null
)
{
Log
.
e
(
"
removeVariablesChangedAndNoDownloadsPendingHandler
-
Invalid
handler
parameter
"
+
"
provided
.
"
)
;
return
;
}
synchronized
(
noDownloadsHandlers
)
{
noDownloadsHandlers
.
remove
(
handler
)
;
}
}
public
static
void
addOnceVariablesChangedAndNoDownloadsPendingHandler
(
VariablesChangedCallback
handler
)
{
if
(
handler
=
=
null
)
{
Log
.
e
(
"
addOnceVariablesChangedAndNoDownloadsPendingHandler
-
Invalid
handler
parameter
"
+
"
provided
.
"
)
;
return
;
}
if
(
VarCache
.
hasReceivedDiffs
(
)
&
&
Request
.
numPendingDownloads
(
)
=
=
0
)
{
handler
.
variablesChanged
(
)
;
}
else
{
synchronized
(
onceNoDownloadsHandlers
)
{
onceNoDownloadsHandlers
.
add
(
handler
)
;
}
}
}
public
static
void
removeOnceVariablesChangedAndNoDownloadsPendingHandler
(
VariablesChangedCallback
handler
)
{
if
(
handler
=
=
null
)
{
Log
.
e
(
"
removeOnceVariablesChangedAndNoDownloadsPendingHandler
-
Invalid
handler
"
+
"
parameter
provided
.
"
)
;
return
;
}
synchronized
(
onceNoDownloadsHandlers
)
{
onceNoDownloadsHandlers
.
remove
(
handler
)
;
}
}
static
void
triggerVariablesChangedAndNoDownloadsPending
(
)
{
synchronized
(
noDownloadsHandlers
)
{
for
(
VariablesChangedCallback
callback
:
noDownloadsHandlers
)
{
OsHandler
.
getInstance
(
)
.
post
(
callback
)
;
}
}
synchronized
(
onceNoDownloadsHandlers
)
{
for
(
VariablesChangedCallback
callback
:
onceNoDownloadsHandlers
)
{
OsHandler
.
getInstance
(
)
.
post
(
callback
)
;
}
onceNoDownloadsHandlers
.
clear
(
)
;
}
}
public
static
void
defineAction
(
String
name
int
kind
ActionArgs
args
)
{
defineAction
(
name
kind
args
null
null
)
;
}
public
static
void
defineAction
(
String
name
int
kind
ActionArgs
args
ActionCallback
responder
)
{
defineAction
(
name
kind
args
null
responder
)
;
}
private
static
void
defineAction
(
String
name
int
kind
ActionArgs
args
Map
<
String
Object
>
options
ActionCallback
responder
)
{
if
(
TextUtils
.
isEmpty
(
name
)
)
{
Log
.
e
(
"
defineAction
-
Empty
name
parameter
provided
.
"
)
;
return
;
}
if
(
args
=
=
null
)
{
Log
.
e
(
"
defineAction
-
Invalid
args
parameter
provided
.
"
)
;
return
;
}
try
{
Context
context
=
Leanplum
.
getContext
(
)
;
if
(
!
initializedMessageTemplates
)
{
initializedMessageTemplates
=
true
;
MessageTemplates
.
register
(
context
)
;
}
if
(
options
=
=
null
)
{
options
=
new
HashMap
<
>
(
)
;
}
LeanplumInternal
.
getActionHandlers
(
)
.
remove
(
name
)
;
VarCache
.
registerActionDefinition
(
name
kind
args
.
getValue
(
)
options
)
;
if
(
responder
!
=
null
)
{
onAction
(
name
responder
)
;
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
public
static
void
onAction
(
String
actionName
ActionCallback
handler
)
{
if
(
actionName
=
=
null
)
{
Log
.
e
(
"
onAction
-
Invalid
actionName
parameter
provided
.
"
)
;
return
;
}
if
(
handler
=
=
null
)
{
Log
.
e
(
"
onAction
-
Invalid
handler
parameter
provided
.
"
)
;
return
;
}
List
<
ActionCallback
>
handlers
=
LeanplumInternal
.
getActionHandlers
(
)
.
get
(
actionName
)
;
if
(
handlers
=
=
null
)
{
handlers
=
new
ArrayList
<
>
(
)
;
LeanplumInternal
.
getActionHandlers
(
)
.
put
(
actionName
handlers
)
;
}
handlers
.
add
(
handler
)
;
}
public
static
void
setUserAttributes
(
final
String
userId
Map
<
String
?
>
userAttributes
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
if
(
!
LeanplumInternal
.
hasCalledStart
(
)
)
{
Log
.
e
(
"
You
cannot
call
setUserAttributes
before
calling
start
"
)
;
return
;
}
try
{
final
HashMap
<
String
Object
>
params
=
new
HashMap
<
>
(
)
;
if
(
userId
!
=
null
)
{
params
.
put
(
Constants
.
Params
.
NEW_USER_ID
userId
)
;
}
if
(
userAttributes
!
=
null
)
{
userAttributes
=
LeanplumInternal
.
validateAttributes
(
userAttributes
"
userAttributes
"
true
)
;
params
.
put
(
Constants
.
Params
.
USER_ATTRIBUTES
JsonConverter
.
toJson
(
userAttributes
)
)
;
LeanplumInternal
.
getUserAttributeChanges
(
)
.
add
(
userAttributes
)
;
}
if
(
LeanplumInternal
.
issuedStart
(
)
)
{
setUserAttributesInternal
(
userId
params
)
;
}
else
{
LeanplumInternal
.
addStartIssuedHandler
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
setUserAttributesInternal
(
userId
params
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
private
static
void
setUserAttributesInternal
(
String
userId
HashMap
<
String
Object
>
requestArgs
)
{
Request
.
post
(
Constants
.
Methods
.
SET_USER_ATTRIBUTES
requestArgs
)
.
send
(
)
;
if
(
userId
!
=
null
&
&
userId
.
length
(
)
>
0
)
{
Request
.
setUserId
(
userId
)
;
if
(
LeanplumInternal
.
hasStarted
(
)
)
{
VarCache
.
saveDiffs
(
)
;
}
}
LeanplumInternal
.
recordAttributeChanges
(
)
;
}
public
static
void
setUserId
(
String
userId
)
{
if
(
userId
=
=
null
)
{
Log
.
e
(
"
setUserId
-
Invalid
userId
parameter
provided
.
"
)
;
return
;
}
setUserAttributes
(
userId
null
)
;
}
public
static
void
setUserAttributes
(
Map
<
String
Object
>
userAttributes
)
{
if
(
userAttributes
=
=
null
|
|
userAttributes
.
isEmpty
(
)
)
{
Log
.
e
(
"
setUserAttributes
-
Invalid
userAttributes
parameter
provided
(
null
or
empty
)
.
"
)
;
return
;
}
setUserAttributes
(
null
userAttributes
)
;
}
static
void
setRegistrationId
(
final
String
registrationId
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
pushStartCallback
=
new
Runnable
(
)
{
Override
public
void
run
(
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
try
{
HashMap
<
String
Object
>
params
=
new
HashMap
<
>
(
)
;
params
.
put
(
Constants
.
Params
.
DEVICE_PUSH_TOKEN
registrationId
)
;
Request
.
post
(
Constants
.
Methods
.
SET_DEVICE_ATTRIBUTES
params
)
.
send
(
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
;
LeanplumInternal
.
addStartIssuedHandler
(
pushStartCallback
)
;
}
public
static
void
setTrafficSourceInfo
(
Map
<
String
String
>
info
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
if
(
!
LeanplumInternal
.
hasCalledStart
(
)
)
{
Log
.
e
(
"
You
cannot
call
setTrafficSourceInfo
before
calling
start
"
)
;
return
;
}
if
(
info
=
=
null
|
|
info
.
isEmpty
(
)
)
{
Log
.
e
(
"
setTrafficSourceInfo
-
Invalid
info
parameter
provided
(
null
or
empty
)
.
"
)
;
return
;
}
try
{
final
HashMap
<
String
Object
>
params
=
new
HashMap
<
>
(
)
;
info
=
LeanplumInternal
.
validateAttributes
(
info
"
info
"
false
)
;
params
.
put
(
Constants
.
Params
.
TRAFFIC_SOURCE
JsonConverter
.
toJson
(
info
)
)
;
if
(
LeanplumInternal
.
issuedStart
(
)
)
{
setTrafficSourceInfoInternal
(
params
)
;
}
else
{
LeanplumInternal
.
addStartIssuedHandler
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
setTrafficSourceInfoInternal
(
params
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
private
static
void
setTrafficSourceInfoInternal
(
HashMap
<
String
Object
>
params
)
{
Request
.
post
(
Constants
.
Methods
.
SET_TRAFFIC_SOURCE_INFO
params
)
.
send
(
)
;
}
public
static
void
track
(
final
String
event
double
value
String
info
Map
<
String
?
>
params
)
{
LeanplumInternal
.
track
(
event
value
info
params
null
)
;
}
public
static
void
trackPurchase
(
final
String
event
double
value
String
currencyCode
Map
<
String
?
>
params
)
{
try
{
if
(
TextUtils
.
isEmpty
(
event
)
)
{
Log
.
w
(
"
trackPurchase
-
Empty
event
parameter
provided
.
"
)
;
}
final
Map
<
String
String
>
requestArgs
=
new
HashMap
<
>
(
)
;
if
(
!
TextUtils
.
isEmpty
(
currencyCode
)
)
{
requestArgs
.
put
(
Constants
.
Params
.
IAP_CURRENCY_CODE
currencyCode
)
;
}
LeanplumInternal
.
track
(
event
value
null
params
requestArgs
)
;
}
catch
(
Throwable
t
)
{
Log
.
e
(
"
trackPurchase
-
Failed
to
track
purchase
event
.
"
)
;
Util
.
handleException
(
t
)
;
}
}
public
static
void
trackGooglePlayPurchase
(
String
item
long
priceMicros
String
currencyCode
String
purchaseData
String
dataSignature
)
{
trackGooglePlayPurchase
(
PURCHASE_EVENT_NAME
item
priceMicros
currencyCode
purchaseData
dataSignature
null
)
;
}
public
static
void
trackGooglePlayPurchase
(
String
item
long
priceMicros
String
currencyCode
String
purchaseData
String
dataSignature
Map
<
String
?
>
params
)
{
trackGooglePlayPurchase
(
PURCHASE_EVENT_NAME
item
priceMicros
currencyCode
purchaseData
dataSignature
params
)
;
}
SuppressWarnings
(
"
SameParameterValue
"
)
public
static
void
trackGooglePlayPurchase
(
String
eventName
String
item
long
priceMicros
String
currencyCode
String
purchaseData
String
dataSignature
Map
<
String
?
>
params
)
{
if
(
TextUtils
.
isEmpty
(
eventName
)
)
{
Log
.
w
(
"
trackGooglePlayPurchase
-
Empty
eventName
parameter
provided
.
"
)
;
}
final
Map
<
String
String
>
requestArgs
=
new
HashMap
<
>
(
)
;
requestArgs
.
put
(
Constants
.
Params
.
GOOGLE_PLAY_PURCHASE_DATA
purchaseData
)
;
requestArgs
.
put
(
Constants
.
Params
.
GOOGLE_PLAY_PURCHASE_DATA_SIGNATURE
dataSignature
)
;
requestArgs
.
put
(
Constants
.
Params
.
IAP_CURRENCY_CODE
currencyCode
)
;
Map
<
String
Object
>
modifiedParams
;
if
(
params
=
=
null
)
{
modifiedParams
=
new
HashMap
<
>
(
)
;
}
else
{
modifiedParams
=
new
HashMap
<
>
(
params
)
;
}
modifiedParams
.
put
(
Constants
.
Params
.
IAP_ITEM
item
)
;
LeanplumInternal
.
track
(
eventName
priceMicros
/
1000000
.
0
null
modifiedParams
requestArgs
)
;
}
public
static
void
track
(
String
event
)
{
track
(
event
0
.
0
"
"
null
)
;
}
public
static
void
track
(
String
event
double
value
)
{
track
(
event
value
"
"
null
)
;
}
public
static
void
track
(
String
event
String
info
)
{
track
(
event
0
.
0
info
null
)
;
}
public
static
void
track
(
String
event
Map
<
String
?
>
params
)
{
track
(
event
0
.
0
"
"
params
)
;
}
public
static
void
track
(
String
event
double
value
Map
<
String
?
>
params
)
{
track
(
event
value
"
"
params
)
;
}
public
static
void
track
(
String
event
double
value
String
info
)
{
track
(
event
value
info
null
)
;
}
public
static
void
advanceTo
(
final
String
state
String
info
final
Map
<
String
?
>
params
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
if
(
!
LeanplumInternal
.
hasCalledStart
(
)
)
{
Log
.
e
(
"
You
cannot
call
advanceTo
before
calling
start
"
)
;
return
;
}
try
{
final
Map
<
String
Object
>
requestParams
=
new
HashMap
<
>
(
)
;
requestParams
.
put
(
Constants
.
Params
.
INFO
info
)
;
requestParams
.
put
(
Constants
.
Params
.
STATE
state
)
;
final
Map
<
String
?
>
validatedParams
;
if
(
params
!
=
null
)
{
validatedParams
=
LeanplumInternal
.
validateAttributes
(
params
"
params
"
false
)
;
requestParams
.
put
(
Constants
.
Params
.
PARAMS
JsonConverter
.
toJson
(
validatedParams
)
)
;
}
else
{
validatedParams
=
null
;
}
if
(
LeanplumInternal
.
issuedStart
(
)
)
{
advanceToInternal
(
state
validatedParams
requestParams
)
;
}
else
{
LeanplumInternal
.
addStartIssuedHandler
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
advanceToInternal
(
state
validatedParams
requestParams
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
private
static
void
advanceToInternal
(
String
state
Map
<
String
?
>
params
Map
<
String
Object
>
requestParams
)
{
Request
.
post
(
Constants
.
Methods
.
ADVANCE
requestParams
)
.
send
(
)
;
ContextualValues
contextualValues
=
new
ContextualValues
(
)
;
contextualValues
.
parameters
=
params
;
LeanplumInternal
.
maybePerformActions
(
"
state
"
state
LeanplumMessageMatchFilter
.
LEANPLUM_ACTION_FILTER_ALL
null
contextualValues
)
;
}
public
static
void
advanceTo
(
String
state
)
{
advanceTo
(
state
"
"
null
)
;
}
public
static
void
advanceTo
(
String
state
String
info
)
{
advanceTo
(
state
info
null
)
;
}
public
static
void
advanceTo
(
String
state
Map
<
String
?
>
params
)
{
advanceTo
(
state
"
"
params
)
;
}
public
static
void
pauseState
(
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
if
(
!
LeanplumInternal
.
hasCalledStart
(
)
)
{
Log
.
e
(
"
You
cannot
call
pauseState
before
calling
start
"
)
;
return
;
}
try
{
if
(
LeanplumInternal
.
issuedStart
(
)
)
{
pauseStateInternal
(
)
;
}
else
{
LeanplumInternal
.
addStartIssuedHandler
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
pauseStateInternal
(
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
private
static
void
pauseStateInternal
(
)
{
Request
.
post
(
Constants
.
Methods
.
PAUSE_STATE
new
HashMap
<
String
Object
>
(
)
)
.
send
(
)
;
}
public
static
void
resumeState
(
)
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
if
(
!
LeanplumInternal
.
hasCalledStart
(
)
)
{
Log
.
e
(
"
You
cannot
call
resumeState
before
calling
start
"
)
;
return
;
}
try
{
if
(
LeanplumInternal
.
issuedStart
(
)
)
{
resumeStateInternal
(
)
;
}
else
{
LeanplumInternal
.
addStartIssuedHandler
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
resumeStateInternal
(
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
private
static
void
resumeStateInternal
(
)
{
Request
.
post
(
Constants
.
Methods
.
RESUME_STATE
new
HashMap
<
String
Object
>
(
)
)
.
send
(
)
;
}
public
static
void
forceContentUpdate
(
)
{
forceContentUpdate
(
null
)
;
}
SuppressWarnings
(
"
SameParameterValue
"
)
public
static
void
forceContentUpdate
(
final
VariablesChangedCallback
callback
)
{
if
(
Constants
.
isNoop
(
)
)
{
if
(
callback
!
=
null
)
{
OsHandler
.
getInstance
(
)
.
post
(
callback
)
;
}
return
;
}
try
{
Map
<
String
Object
>
params
=
new
HashMap
<
>
(
)
;
params
.
put
(
Constants
.
Params
.
INCLUDE_DEFAULTS
Boolean
.
toString
(
false
)
)
;
params
.
put
(
Constants
.
Params
.
INBOX_MESSAGES
LeanplumInbox
.
getInstance
(
)
.
messagesIds
(
)
)
;
Request
req
=
Request
.
post
(
Constants
.
Methods
.
GET_VARS
params
)
;
req
.
onResponse
(
new
Request
.
ResponseCallback
(
)
{
Override
public
void
response
(
JSONObject
response
)
{
try
{
if
(
response
=
=
null
)
{
Log
.
e
(
"
No
response
received
from
the
server
.
Please
contact
us
to
investigate
.
"
)
;
}
else
{
applyContentInResponse
(
response
false
)
;
if
(
response
.
optBoolean
(
Constants
.
Keys
.
SYNC_INBOX
false
)
)
{
LeanplumInbox
.
getInstance
(
)
.
downloadMessages
(
)
;
}
else
{
LeanplumInbox
.
getInstance
(
)
.
triggerInboxSyncedWithStatus
(
true
)
;
}
if
(
response
.
optBoolean
(
Constants
.
Keys
.
LOGGING_ENABLED
false
)
)
{
Constants
.
loggingEnabled
=
true
;
}
}
if
(
callback
!
=
null
)
{
OsHandler
.
getInstance
(
)
.
post
(
callback
)
;
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
req
.
onError
(
new
Request
.
ErrorCallback
(
)
{
Override
public
void
error
(
Exception
e
)
{
if
(
callback
!
=
null
)
{
OsHandler
.
getInstance
(
)
.
post
(
callback
)
;
}
LeanplumInbox
.
getInstance
(
)
.
triggerInboxSyncedWithStatus
(
false
)
;
}
}
)
;
req
.
sendIfConnected
(
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
public
static
void
enableTestMode
(
)
{
Constants
.
isTestMode
=
true
;
}
public
static
boolean
isTestModeEnabled
(
)
{
return
Constants
.
isTestMode
;
}
public
static
void
setIsTestModeEnabled
(
boolean
isTestModeEnabled
)
{
Constants
.
isTestMode
=
isTestModeEnabled
;
}
public
static
String
pathForResource
(
String
filename
)
{
if
(
TextUtils
.
isEmpty
(
filename
)
)
{
Log
.
e
(
"
pathForResource
-
Empty
filename
parameter
provided
.
"
)
;
return
null
;
}
Var
fileVar
=
Var
.
defineFile
(
filename
filename
)
;
return
(
fileVar
!
=
null
)
?
fileVar
.
fileValue
(
)
:
null
;
}
public
static
Object
objectForKeyPath
(
Object
.
.
.
components
)
{
return
objectForKeyPathComponents
(
components
)
;
}
public
static
Object
objectForKeyPathComponents
(
Object
[
]
pathComponents
)
{
try
{
return
VarCache
.
getMergedValueFromComponentArray
(
pathComponents
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
return
null
;
}
public
static
List
<
Map
<
String
Object
>
>
variants
(
)
{
List
<
Map
<
String
Object
>
>
variants
=
VarCache
.
variants
(
)
;
if
(
variants
=
=
null
)
{
return
new
ArrayList
<
>
(
)
;
}
return
variants
;
}
public
static
Map
<
String
Object
>
messageMetadata
(
)
{
Map
<
String
Object
>
messages
=
VarCache
.
messages
(
)
;
if
(
messages
=
=
null
)
{
return
new
HashMap
<
>
(
)
;
}
return
messages
;
}
public
static
void
setDeviceLocation
(
Location
location
)
{
setDeviceLocation
(
location
LeanplumLocationAccuracyType
.
CELL
)
;
}
public
static
void
setDeviceLocation
(
Location
location
LeanplumLocationAccuracyType
type
)
{
if
(
locationCollectionEnabled
)
{
Log
.
w
(
"
Leanplum
is
automatically
collecting
device
location
so
there
is
no
need
to
"
+
"
call
setDeviceLocation
.
If
you
prefer
to
always
set
location
manually
"
+
"
then
call
disableLocationCollection
.
"
)
;
}
LeanplumInternal
.
setUserLocationAttribute
(
location
type
new
LeanplumInternal
.
locationAttributeRequestsCallback
(
)
{
Override
public
void
response
(
boolean
success
)
{
if
(
success
)
{
Log
.
d
(
"
setUserAttributes
with
location
is
successfully
called
"
)
;
}
}
}
)
;
}
public
static
void
disableLocationCollection
(
)
{
locationCollectionEnabled
=
false
;
}
public
static
boolean
isLocationCollectionEnabled
(
)
{
return
locationCollectionEnabled
;
}
}
