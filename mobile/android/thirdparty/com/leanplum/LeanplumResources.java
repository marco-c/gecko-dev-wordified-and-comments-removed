package
com
.
leanplum
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
content
.
res
.
Resources
;
import
android
.
graphics
.
drawable
.
Drawable
;
import
android
.
util
.
DisplayMetrics
;
import
com
.
leanplum
.
internal
.
CollectionUtil
;
import
com
.
leanplum
.
internal
.
Constants
;
import
com
.
leanplum
.
internal
.
FileManager
;
import
com
.
leanplum
.
internal
.
Log
;
import
com
.
leanplum
.
internal
.
ResourceQualifiers
;
import
com
.
leanplum
.
internal
.
ResourceQualifiers
.
Qualifier
;
import
com
.
leanplum
.
internal
.
Util
;
import
com
.
leanplum
.
internal
.
VarCache
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
SuppressWarnings
(
"
deprecation
"
)
public
class
LeanplumResources
extends
Resources
{
public
LeanplumResources
(
Resources
base
)
{
super
(
base
.
getAssets
(
)
base
.
getDisplayMetrics
(
)
base
.
getConfiguration
(
)
)
;
}
<
T
>
Var
<
T
>
getOverrideResource
(
int
id
)
{
try
{
String
name
=
getResourceEntryName
(
id
)
;
String
type
=
getResourceTypeName
(
id
)
;
if
(
FileManager
.
resources
=
=
null
)
{
return
null
;
}
HashMap
<
String
Object
>
resourceValues
=
CollectionUtil
.
uncheckedCast
(
FileManager
.
resources
.
objectForKeyPath
(
)
)
;
Map
<
String
String
>
eligibleFolders
=
new
HashMap
<
>
(
)
;
synchronized
(
VarCache
.
valuesFromClient
)
{
for
(
String
folder
:
resourceValues
.
keySet
(
)
)
{
if
(
!
folder
.
toLowerCase
(
)
.
startsWith
(
type
)
)
{
continue
;
}
HashMap
<
String
Object
>
files
=
CollectionUtil
.
uncheckedCast
(
resourceValues
.
get
(
folder
)
)
;
String
eligibleFile
=
null
;
for
(
String
filename
:
files
.
keySet
(
)
)
{
String
currentName
=
filename
.
replace
(
"
\
\
.
"
"
.
"
)
;
int
dotPos
=
currentName
.
lastIndexOf
(
'
.
'
)
;
if
(
dotPos
>
=
0
)
{
currentName
=
currentName
.
substring
(
0
dotPos
)
;
}
if
(
currentName
.
equals
(
name
)
)
{
eligibleFile
=
filename
;
}
}
if
(
eligibleFile
=
=
null
)
{
continue
;
}
eligibleFolders
.
put
(
folder
eligibleFile
)
;
}
}
Map
<
String
ResourceQualifiers
>
folderQualifiers
=
new
HashMap
<
>
(
)
;
for
(
String
folder
:
eligibleFolders
.
keySet
(
)
)
{
folderQualifiers
.
put
(
folder
ResourceQualifiers
.
fromFolder
(
folder
)
)
;
}
Configuration
config
=
getConfiguration
(
)
;
DisplayMetrics
display
=
getDisplayMetrics
(
)
;
Set
<
String
>
matchedFolders
=
new
HashSet
<
>
(
)
;
for
(
String
folder
:
eligibleFolders
.
keySet
(
)
)
{
ResourceQualifiers
qualifiers
=
folderQualifiers
.
get
(
folder
)
;
for
(
Qualifier
qualifier
:
qualifiers
.
qualifiers
.
keySet
(
)
)
{
if
(
qualifier
.
getFilter
(
)
.
isMatch
(
qualifiers
.
qualifiers
.
get
(
qualifier
)
config
display
)
)
{
matchedFolders
.
add
(
folder
)
;
}
}
}
for
(
Qualifier
qualifier
:
ResourceQualifiers
.
Qualifier
.
values
(
)
)
{
Map
<
String
Object
>
betterMatchedFolders
=
new
HashMap
<
>
(
)
;
for
(
String
folder
:
matchedFolders
)
{
ResourceQualifiers
folderQualifier
=
folderQualifiers
.
get
(
folder
)
;
Object
qualifierValue
=
folderQualifier
.
qualifiers
.
get
(
qualifier
)
;
if
(
qualifierValue
!
=
null
)
{
betterMatchedFolders
.
put
(
folder
qualifierValue
)
;
}
}
betterMatchedFolders
=
qualifier
.
getFilter
(
)
.
bestMatch
(
betterMatchedFolders
config
display
)
;
if
(
!
betterMatchedFolders
.
isEmpty
(
)
)
{
matchedFolders
=
betterMatchedFolders
.
keySet
(
)
;
}
}
if
(
!
eligibleFolders
.
isEmpty
(
)
)
{
String
folder
=
eligibleFolders
.
entrySet
(
)
.
iterator
(
)
.
next
(
)
.
getValue
(
)
;
String
varName
=
Constants
.
Values
.
RESOURCES_VARIABLE
+
"
.
"
+
folder
+
"
.
"
+
eligibleFolders
.
get
(
folder
)
;
return
VarCache
.
getVariable
(
varName
)
;
}
}
catch
(
Exception
e
)
{
Log
.
e
(
"
Error
getting
resource
"
e
)
;
}
return
null
;
}
Override
public
Drawable
getDrawable
(
int
id
)
throws
NotFoundException
{
try
{
Var
<
String
>
override
=
getOverrideResource
(
id
)
;
if
(
override
!
=
null
)
{
int
overrideResId
=
override
.
overrideResId
(
)
;
if
(
overrideResId
!
=
0
)
{
return
super
.
getDrawable
(
overrideResId
)
;
}
if
(
!
override
.
stringValue
.
equals
(
override
.
defaultValue
(
)
)
)
{
Drawable
result
=
Drawable
.
createFromStream
(
override
.
stream
(
)
override
.
fileValue
(
)
)
;
if
(
result
!
=
null
)
{
return
result
;
}
}
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
return
super
.
getDrawable
(
id
)
;
}
}
