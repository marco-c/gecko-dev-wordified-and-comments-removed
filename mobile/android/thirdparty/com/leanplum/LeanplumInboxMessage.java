package
com
.
leanplum
;
import
android
.
net
.
Uri
;
import
android
.
text
.
TextUtils
;
import
com
.
leanplum
.
internal
.
CollectionUtil
;
import
com
.
leanplum
.
internal
.
Constants
;
import
com
.
leanplum
.
internal
.
Log
;
import
com
.
leanplum
.
internal
.
Util
;
import
org
.
json
.
JSONObject
;
import
java
.
io
.
File
;
import
java
.
util
.
Map
;
import
static
com
.
leanplum
.
internal
.
FileManager
.
DownloadFileResult
;
import
static
com
.
leanplum
.
internal
.
FileManager
.
fileExistsAtPath
;
import
static
com
.
leanplum
.
internal
.
FileManager
.
fileValue
;
import
static
com
.
leanplum
.
internal
.
FileManager
.
maybeDownloadFile
;
public
class
LeanplumInboxMessage
extends
NewsfeedMessage
{
private
String
imageUrl
;
private
String
imageFileName
;
private
LeanplumInboxMessage
(
String
messageId
Long
deliveryTimestamp
Long
expirationTimestamp
boolean
isRead
ActionContext
context
)
{
super
(
messageId
deliveryTimestamp
expirationTimestamp
isRead
context
)
;
imageUrl
=
context
.
stringNamed
(
Constants
.
Keys
.
INBOX_IMAGE
)
;
if
(
imageUrl
!
=
null
)
{
try
{
imageFileName
=
Util
.
sha256
(
imageUrl
)
;
}
catch
(
Exception
ignored
)
{
}
}
}
static
LeanplumInboxMessage
createFromJsonMap
(
String
messageId
Map
<
String
Object
>
map
)
{
Map
<
String
Object
>
messageData
=
CollectionUtil
.
uncheckedCast
(
map
.
get
(
Constants
.
Keys
.
MESSAGE_DATA
)
)
;
Long
deliveryTimestamp
=
CollectionUtil
.
uncheckedCast
(
map
.
get
(
Constants
.
Keys
.
DELIVERY_TIMESTAMP
)
)
;
Long
expirationTimestamp
=
CollectionUtil
.
uncheckedCast
(
map
.
get
(
Constants
.
Keys
.
EXPIRATION_TIMESTAMP
)
)
;
Boolean
isRead
=
CollectionUtil
.
uncheckedCast
(
map
.
get
(
Constants
.
Keys
.
IS_READ
)
)
;
return
constructMessage
(
messageId
deliveryTimestamp
expirationTimestamp
isRead
!
=
null
?
isRead
:
false
messageData
)
;
}
static
LeanplumInboxMessage
constructMessage
(
String
messageId
Long
deliveryTimestamp
Long
expirationTimestamp
boolean
isRead
Map
<
String
Object
>
actionArgs
)
{
if
(
!
isValidMessageId
(
messageId
)
)
{
Log
.
e
(
"
Malformed
inbox
messageId
:
"
+
messageId
)
;
return
null
;
}
String
[
]
messageIdParts
=
messageId
.
split
(
"
#
#
"
)
;
ActionContext
context
=
new
ActionContext
(
(
String
)
actionArgs
.
get
(
Constants
.
Values
.
ACTION_ARG
)
actionArgs
messageIdParts
[
0
]
)
;
context
.
preventRealtimeUpdating
(
)
;
context
.
update
(
)
;
return
new
LeanplumInboxMessage
(
messageId
deliveryTimestamp
expirationTimestamp
isRead
context
)
;
}
public
String
getImageFilePath
(
)
{
String
path
=
fileValue
(
imageFileName
)
;
if
(
fileExistsAtPath
(
path
)
)
{
return
new
File
(
path
)
.
getAbsolutePath
(
)
;
}
if
(
!
LeanplumInbox
.
getInstance
(
)
.
isInboxImagePrefetchingEnabled
(
)
)
{
Log
.
w
(
"
Inbox
Message
image
path
is
null
because
you
'
re
calling
disableImagePrefetching
.
"
+
"
Consider
using
imageURL
method
or
remove
disableImagePrefetching
.
"
)
;
}
return
null
;
}
public
Uri
getImageUrl
(
)
{
String
path
=
fileValue
(
imageFileName
)
;
if
(
fileExistsAtPath
(
path
)
)
{
return
Uri
.
fromFile
(
new
File
(
path
)
)
;
}
if
(
TextUtils
.
isEmpty
(
imageUrl
)
)
{
return
null
;
}
return
Uri
.
parse
(
imageUrl
)
;
}
public
JSONObject
getData
(
)
{
JSONObject
object
=
null
;
try
{
String
dataString
=
getContext
(
)
.
stringNamed
(
Constants
.
Keys
.
DATA
)
;
if
(
!
TextUtils
.
isEmpty
(
dataString
)
)
{
object
=
new
JSONObject
(
dataString
)
;
}
}
catch
(
Exception
e
)
{
Log
.
w
(
"
Unable
to
parse
JSONObject
for
Data
field
of
inbox
message
.
"
)
;
}
return
object
;
}
Boolean
downloadImageIfPrefetchingEnabled
(
)
{
if
(
!
LeanplumInbox
.
isInboxImagePrefetchingEnabled
)
{
return
false
;
}
if
(
TextUtils
.
isEmpty
(
imageUrl
)
|
|
LeanplumInbox
.
downloadedImageUrls
.
contains
(
imageUrl
)
)
{
return
false
;
}
DownloadFileResult
result
=
maybeDownloadFile
(
true
imageFileName
imageUrl
imageUrl
null
)
;
LeanplumInbox
.
downloadedImageUrls
.
add
(
imageUrl
)
;
return
DownloadFileResult
.
DOWNLOADING
=
=
result
;
}
}
