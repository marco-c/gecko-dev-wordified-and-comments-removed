package
com
.
leanplum
;
import
android
.
annotation
.
TargetApi
;
import
android
.
app
.
Notification
;
import
android
.
app
.
PendingIntent
;
import
android
.
app
.
job
.
JobInfo
;
import
android
.
app
.
job
.
JobScheduler
;
import
android
.
content
.
ComponentName
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
res
.
Resources
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
drawable
.
AdaptiveIconDrawable
;
import
android
.
graphics
.
drawable
.
Drawable
;
import
android
.
os
.
Build
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
v4
.
app
.
NotificationCompat
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
TypedValue
;
import
android
.
widget
.
RemoteViews
;
import
com
.
leanplum
.
internal
.
Constants
;
import
com
.
leanplum
.
internal
.
JsonConverter
;
import
com
.
leanplum
.
internal
.
Log
;
import
com
.
leanplum
.
internal
.
Util
;
import
com
.
leanplum
.
utils
.
BitmapUtil
;
import
com
.
leanplum
.
utils
.
BuildUtil
;
import
java
.
util
.
IllegalFormatCodePointException
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Random
;
import
java
.
util
.
TreeSet
;
class
LeanplumNotificationHelper
{
private
static
final
int
BIGPICTURE_TEXT_TOP_PADDING
=
-
14
;
private
static
final
int
BIGPICTURE_TEXT_SIZE
=
14
;
private
static
final
String
LEANPLUM_DEFAULT_PUSH_ICON
=
"
leanplum_default_push_icon
"
;
private
static
final
int
MAX_ONE_LINE_TEXT_LENGTH
=
37
;
SuppressWarnings
(
"
deprecation
"
)
static
NotificationCompat
.
Builder
getDefaultCompatNotificationBuilder
(
Context
context
boolean
isNotificationChannelSupported
)
{
if
(
!
isNotificationChannelSupported
)
{
return
new
NotificationCompat
.
Builder
(
context
)
;
}
String
channelId
=
LeanplumNotificationChannel
.
getDefaultNotificationChannelId
(
context
)
;
if
(
!
TextUtils
.
isEmpty
(
channelId
)
)
{
return
new
NotificationCompat
.
Builder
(
context
channelId
)
;
}
else
{
Log
.
w
(
"
Failed
to
post
notification
there
are
no
notification
channels
configured
.
"
)
;
return
null
;
}
}
SuppressWarnings
(
"
deprecation
"
)
private
static
Notification
.
Builder
getDefaultNotificationBuilder
(
Context
context
boolean
isNotificationChannelSupported
)
{
if
(
!
isNotificationChannelSupported
)
{
return
new
Notification
.
Builder
(
context
)
;
}
String
channelId
=
LeanplumNotificationChannel
.
getDefaultNotificationChannelId
(
context
)
;
if
(
!
TextUtils
.
isEmpty
(
channelId
)
)
{
return
new
Notification
.
Builder
(
context
channelId
)
;
}
else
{
Log
.
w
(
"
Failed
to
post
notification
there
are
no
notification
channels
configured
.
"
)
;
return
null
;
}
}
SuppressWarnings
(
"
deprecation
"
)
static
NotificationCompat
.
Builder
getNotificationCompatBuilder
(
Context
context
Bundle
message
)
{
NotificationCompat
.
Builder
builder
=
null
;
if
(
BuildUtil
.
isNotificationChannelSupported
(
context
)
)
{
try
{
String
channel
=
message
.
getString
(
"
lp_channel
"
)
;
if
(
!
TextUtils
.
isEmpty
(
channel
)
)
{
Map
<
String
Object
>
channelDetails
=
JsonConverter
.
fromJson
(
channel
)
;
String
channelId
=
LeanplumNotificationChannel
.
createNotificationChannel
(
context
channelDetails
)
;
if
(
!
TextUtils
.
isEmpty
(
channelId
)
)
{
builder
=
new
NotificationCompat
.
Builder
(
context
channelId
)
;
}
else
{
Log
.
w
(
"
Failed
to
post
notification
to
specified
channel
.
"
)
;
}
}
else
{
builder
=
LeanplumNotificationHelper
.
getDefaultCompatNotificationBuilder
(
context
true
)
;
}
}
catch
(
Exception
e
)
{
Log
.
e
(
"
Failed
to
post
notification
to
specified
channel
.
"
)
;
}
}
else
{
builder
=
new
NotificationCompat
.
Builder
(
context
)
;
}
return
builder
;
}
private
static
Notification
.
Builder
getNotificationBuilder
(
Context
context
Bundle
message
)
{
Notification
.
Builder
builder
=
null
;
if
(
BuildUtil
.
isNotificationChannelSupported
(
context
)
)
{
try
{
String
channel
=
message
.
getString
(
"
lp_channel
"
)
;
if
(
!
TextUtils
.
isEmpty
(
channel
)
)
{
Map
<
String
Object
>
channelDetails
=
JsonConverter
.
fromJson
(
channel
)
;
String
channelId
=
LeanplumNotificationChannel
.
createNotificationChannel
(
context
channelDetails
)
;
if
(
!
TextUtils
.
isEmpty
(
channelId
)
)
{
builder
=
new
Notification
.
Builder
(
context
channelId
)
;
}
else
{
Log
.
w
(
"
Failed
to
post
notification
to
specified
channel
.
"
)
;
}
}
else
{
builder
=
LeanplumNotificationHelper
.
getDefaultNotificationBuilder
(
context
true
)
;
}
}
catch
(
Exception
e
)
{
Log
.
e
(
"
Failed
to
post
notification
to
specified
channel
.
"
)
;
}
}
else
{
builder
=
new
Notification
.
Builder
(
context
)
;
}
return
builder
;
}
static
NotificationCompat
.
Builder
getNotificationCompatBuilder
(
Context
context
Bundle
message
PendingIntent
contentIntent
String
title
final
String
messageText
Bitmap
bigPicture
int
defaultNotificationIconResourceId
)
{
if
(
message
=
=
null
)
{
return
null
;
}
NotificationCompat
.
Builder
notificationCompatBuilder
=
getNotificationCompatBuilder
(
context
message
)
;
if
(
notificationCompatBuilder
=
=
null
)
{
return
null
;
}
if
(
defaultNotificationIconResourceId
=
=
0
)
{
notificationCompatBuilder
.
setSmallIcon
(
context
.
getApplicationInfo
(
)
.
icon
)
;
}
else
{
notificationCompatBuilder
.
setSmallIcon
(
defaultNotificationIconResourceId
)
;
}
notificationCompatBuilder
.
setContentTitle
(
title
)
.
setStyle
(
new
NotificationCompat
.
BigTextStyle
(
)
.
bigText
(
messageText
)
)
.
setContentText
(
messageText
)
;
if
(
bigPicture
!
=
null
)
{
notificationCompatBuilder
.
setStyle
(
new
NotificationCompat
.
BigPictureStyle
(
)
.
bigPicture
(
bigPicture
)
.
setBigContentTitle
(
title
)
.
setSummaryText
(
messageText
)
)
;
}
if
(
Build
.
VERSION
.
SDK_INT
>
=
16
&
&
!
BuildUtil
.
isNotificationChannelSupported
(
context
)
)
{
notificationCompatBuilder
.
setPriority
(
Notification
.
PRIORITY_MAX
)
;
}
notificationCompatBuilder
.
setAutoCancel
(
true
)
;
notificationCompatBuilder
.
setContentIntent
(
contentIntent
)
;
return
notificationCompatBuilder
;
}
static
void
setModifiedBigPictureStyle
(
Notification
.
Builder
notificationBuilder
Notification
.
Style
bigPictureStyle
)
{
if
(
Build
.
VERSION
.
SDK_INT
<
16
|
|
notificationBuilder
=
=
null
|
|
bigPictureStyle
=
=
null
)
{
return
;
}
try
{
notificationBuilder
.
setStyle
(
bigPictureStyle
)
;
if
(
Build
.
VERSION
.
SDK_INT
>
=
24
)
{
try
{
RemoteViews
remoteView
=
notificationBuilder
.
createBigContentView
(
)
;
if
(
remoteView
!
=
null
)
{
notificationBuilder
.
setCustomBigContentView
(
remoteView
)
;
}
}
catch
(
Throwable
t
)
{
Log
.
e
(
"
Cannot
modify
push
notification
layout
.
"
t
)
;
}
}
}
catch
(
Throwable
t
)
{
Log
.
e
(
"
Cannot
set
BigPicture
style
for
push
notification
.
"
t
)
;
}
}
static
Notification
.
BigPictureStyle
getBigPictureStyle
(
Bundle
message
Bitmap
bigPicture
String
title
final
String
messageText
)
{
if
(
Build
.
VERSION
.
SDK_INT
<
16
|
|
message
=
=
null
|
|
bigPicture
=
=
null
)
{
return
null
;
}
Notification
.
BigPictureStyle
bigPictureStyle
=
new
Notification
.
BigPictureStyle
(
)
{
Override
protected
RemoteViews
getStandardView
(
int
layoutId
)
{
RemoteViews
remoteViews
=
super
.
getStandardView
(
layoutId
)
;
if
(
messageText
!
=
null
&
&
messageText
.
length
(
)
>
=
MAX_ONE_LINE_TEXT_LENGTH
)
{
try
{
int
id
=
Resources
.
getSystem
(
)
.
getIdentifier
(
"
text
"
"
id
"
"
android
"
)
;
remoteViews
.
setBoolean
(
id
"
setSingleLine
"
false
)
;
remoteViews
.
setInt
(
id
"
setLines
"
2
)
;
if
(
Build
.
VERSION
.
SDK_INT
<
23
)
{
remoteViews
.
setViewPadding
(
id
0
BIGPICTURE_TEXT_TOP_PADDING
0
0
)
;
remoteViews
.
setTextViewTextSize
(
id
TypedValue
.
COMPLEX_UNIT_SP
BIGPICTURE_TEXT_SIZE
)
;
}
}
catch
(
Throwable
throwable
)
{
Log
.
e
(
"
Cannot
modify
push
notification
layout
.
"
)
;
}
}
return
remoteViews
;
}
}
;
bigPictureStyle
.
bigPicture
(
bigPicture
)
.
setBigContentTitle
(
title
)
.
setSummaryText
(
message
.
getString
(
Constants
.
Keys
.
PUSH_MESSAGE_TEXT
)
)
;
return
bigPictureStyle
;
}
static
Notification
.
Builder
getNotificationBuilder
(
Context
context
Bundle
message
PendingIntent
contentIntent
String
title
final
String
messageText
int
defaultNotificationIconResourceId
)
{
Notification
.
Builder
notificationBuilder
=
getNotificationBuilder
(
context
message
)
;
if
(
notificationBuilder
=
=
null
)
{
return
null
;
}
if
(
defaultNotificationIconResourceId
=
=
0
)
{
notificationBuilder
.
setSmallIcon
(
context
.
getApplicationInfo
(
)
.
icon
)
;
}
else
{
notificationBuilder
.
setSmallIcon
(
defaultNotificationIconResourceId
)
;
}
notificationBuilder
.
setContentTitle
(
title
)
.
setContentText
(
messageText
)
;
if
(
Build
.
VERSION
.
SDK_INT
>
16
)
{
notificationBuilder
.
setStyle
(
new
Notification
.
BigTextStyle
(
)
.
bigText
(
messageText
)
)
;
if
(
!
BuildUtil
.
isNotificationChannelSupported
(
context
)
)
{
notificationBuilder
.
setPriority
(
Notification
.
PRIORITY_MAX
)
;
}
}
notificationBuilder
.
setAutoCancel
(
true
)
;
notificationBuilder
.
setContentIntent
(
contentIntent
)
;
return
notificationBuilder
;
}
private
static
boolean
canCreateIconDrawable
(
Context
context
)
{
try
{
Drawable
drawable
=
AdaptiveIconDrawable
.
createFromStream
(
context
.
getResources
(
)
.
openRawResource
(
context
.
getApplicationInfo
(
)
.
icon
)
"
applicationInfo
.
icon
"
)
;
if
(
drawable
!
=
null
)
{
return
true
;
}
}
catch
(
Throwable
ignored
)
{
}
return
false
;
}
static
boolean
isApplicationIconValid
(
Context
context
)
{
if
(
context
=
=
null
)
{
return
false
;
}
if
(
Build
.
VERSION
.
SDK_INT
<
26
)
{
return
true
;
}
return
canCreateIconDrawable
(
context
)
;
}
static
int
getDefaultPushNotificationIconResourceId
(
Context
context
)
{
try
{
Resources
resources
=
context
.
getResources
(
)
;
return
resources
.
getIdentifier
(
LEANPLUM_DEFAULT_PUSH_ICON
"
drawable
"
context
.
getPackageName
(
)
)
;
}
catch
(
Throwable
ignored
)
{
return
0
;
}
}
TargetApi
(
21
)
static
void
scheduleJobService
(
Context
context
Class
clazz
int
jobId
)
{
if
(
context
=
=
null
)
{
return
;
}
ComponentName
serviceName
=
new
ComponentName
(
context
clazz
)
;
JobScheduler
jobScheduler
=
(
JobScheduler
)
context
.
getSystemService
(
Context
.
JOB_SCHEDULER_SERVICE
)
;
if
(
jobScheduler
!
=
null
)
{
jobId
=
verifyJobId
(
jobScheduler
.
getAllPendingJobs
(
)
jobId
)
;
JobInfo
startMyServiceJobInfo
=
new
JobInfo
.
Builder
(
jobId
serviceName
)
.
setMinimumLatency
(
10
)
.
build
(
)
;
jobScheduler
.
schedule
(
startMyServiceJobInfo
)
;
}
}
TargetApi
(
21
)
private
static
int
verifyJobId
(
List
<
JobInfo
>
allPendingJobs
int
jobId
)
{
if
(
allPendingJobs
!
=
null
&
&
!
allPendingJobs
.
isEmpty
(
)
)
{
TreeSet
<
Integer
>
idsSet
=
new
TreeSet
<
>
(
)
;
for
(
JobInfo
jobInfo
:
allPendingJobs
)
{
idsSet
.
add
(
jobInfo
.
getId
(
)
)
;
}
if
(
idsSet
.
contains
(
jobId
)
)
{
if
(
idsSet
.
first
(
)
>
Integer
.
MIN_VALUE
)
{
jobId
=
idsSet
.
first
(
)
-
1
;
}
else
if
(
idsSet
.
last
(
)
<
Integer
.
MIN_VALUE
)
{
jobId
=
idsSet
.
last
(
)
+
1
;
}
else
{
while
(
idsSet
.
contains
(
jobId
)
)
{
jobId
=
new
Random
(
)
.
nextInt
(
)
;
}
}
}
}
return
jobId
;
}
static
void
startPushRegistrationService
(
Context
context
String
providerName
)
{
try
{
if
(
context
=
=
null
)
{
return
;
}
Log
.
i
(
"
Updating
"
+
providerName
+
"
InstanceId
token
.
"
)
;
Intent
intent
=
new
Intent
(
context
LeanplumPushRegistrationService
.
class
)
;
context
.
startService
(
intent
)
;
}
catch
(
Throwable
t
)
{
Log
.
e
(
"
Couldn
'
t
update
"
+
providerName
+
"
InstanceId
token
.
"
t
)
;
}
}
Nullable
static
Bitmap
getBigPictureBitmap
(
Context
context
String
imageUrl
)
{
Bitmap
bigPicture
=
null
;
if
(
!
TextUtils
.
isEmpty
(
imageUrl
)
&
&
Build
.
VERSION
.
SDK_INT
>
=
16
)
{
bigPicture
=
BitmapUtil
.
getScaledBitmap
(
context
imageUrl
)
;
if
(
bigPicture
=
=
null
)
{
Log
.
w
(
String
.
format
(
"
Image
download
failed
for
push
notification
with
big
picture
.
"
+
"
No
image
will
be
included
with
the
push
notification
.
Image
URL
:
%
s
.
"
imageUrl
)
)
;
}
}
return
bigPicture
;
}
}
