package
com
.
leanplum
;
import
com
.
leanplum
.
internal
.
Constants
;
import
com
.
leanplum
.
internal
.
Request
;
import
com
.
leanplum
.
internal
.
Util
;
import
java
.
util
.
Date
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
abstract
class
NewsfeedMessage
{
private
String
messageId
;
private
Long
deliveryTimestamp
;
private
Long
expirationTimestamp
;
private
boolean
isRead
;
private
ActionContext
context
;
NewsfeedMessage
(
String
messageId
Long
deliveryTimestamp
Long
expirationTimestamp
boolean
isRead
ActionContext
context
)
{
this
.
messageId
=
messageId
;
this
.
deliveryTimestamp
=
deliveryTimestamp
;
this
.
expirationTimestamp
=
expirationTimestamp
;
this
.
isRead
=
isRead
;
this
.
context
=
context
;
}
Map
<
String
Object
>
toJsonMap
(
)
{
Map
<
String
Object
>
map
=
new
HashMap
<
>
(
)
;
map
.
put
(
Constants
.
Keys
.
DELIVERY_TIMESTAMP
this
.
deliveryTimestamp
)
;
map
.
put
(
Constants
.
Keys
.
EXPIRATION_TIMESTAMP
this
.
expirationTimestamp
)
;
map
.
put
(
Constants
.
Keys
.
MESSAGE_DATA
this
.
actionArgs
(
)
)
;
map
.
put
(
Constants
.
Keys
.
IS_READ
this
.
isRead
(
)
)
;
return
map
;
}
Map
<
String
Object
>
actionArgs
(
)
{
return
context
.
getArgs
(
)
;
}
void
setIsRead
(
boolean
isRead
)
{
this
.
isRead
=
isRead
;
}
boolean
isActive
(
)
{
if
(
expirationTimestamp
=
=
null
)
{
return
true
;
}
Date
now
=
new
Date
(
)
;
return
now
.
before
(
new
Date
(
expirationTimestamp
)
)
;
}
static
boolean
isValidMessageId
(
String
messageId
)
{
return
messageId
.
split
(
"
#
#
"
)
.
length
=
=
2
;
}
ActionContext
getContext
(
)
{
return
context
;
}
Deprecated
public
String
messageId
(
)
{
return
getMessageId
(
)
;
}
public
String
getMessageId
(
)
{
return
messageId
;
}
Deprecated
public
String
title
(
)
{
return
getTitle
(
)
;
}
public
String
getTitle
(
)
{
return
context
.
stringNamed
(
Constants
.
Keys
.
TITLE
)
;
}
Deprecated
public
String
subtitle
(
)
{
return
getSubtitle
(
)
;
}
public
String
getSubtitle
(
)
{
return
context
.
stringNamed
(
Constants
.
Keys
.
SUBTITLE
)
;
}
Deprecated
public
Date
deliveryTimestamp
(
)
{
return
getDeliveryTimestamp
(
)
;
}
public
Date
getDeliveryTimestamp
(
)
{
return
new
Date
(
deliveryTimestamp
)
;
}
Deprecated
public
Date
expirationTimestamp
(
)
{
return
getExpirationTimestamp
(
)
;
}
public
Date
getExpirationTimestamp
(
)
{
if
(
expirationTimestamp
=
=
null
)
{
return
null
;
}
return
new
Date
(
expirationTimestamp
)
;
}
public
boolean
isRead
(
)
{
return
isRead
;
}
public
void
read
(
)
{
try
{
if
(
Constants
.
isNoop
(
)
)
{
return
;
}
if
(
!
this
.
isRead
)
{
setIsRead
(
true
)
;
int
unreadCount
=
Newsfeed
.
getInstance
(
)
.
unreadCount
(
)
-
1
;
Newsfeed
.
getInstance
(
)
.
updateUnreadCount
(
unreadCount
)
;
Map
<
String
Object
>
params
=
new
HashMap
<
>
(
)
;
params
.
put
(
Constants
.
Params
.
INBOX_MESSAGE_ID
messageId
)
;
Request
req
=
Request
.
post
(
Constants
.
Methods
.
MARK_INBOX_MESSAGE_AS_READ
params
)
;
req
.
send
(
)
;
}
this
.
context
.
runTrackedActionNamed
(
Constants
.
Values
.
DEFAULT_PUSH_ACTION
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
public
void
remove
(
)
{
try
{
Newsfeed
.
getInstance
(
)
.
removeMessage
(
messageId
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
