package
com
.
leanplum
.
internal
;
import
android
.
app
.
Activity
;
import
com
.
leanplum
.
Leanplum
;
import
com
.
leanplum
.
LeanplumEditorMode
;
import
com
.
leanplum
.
LeanplumUIEditor
;
import
java
.
lang
.
reflect
.
InvocationTargetException
;
import
java
.
lang
.
reflect
.
Method
;
import
static
com
.
leanplum
.
internal
.
Constants
.
ClassUtil
.
UI_INTERFACE_EDITOR
;
public
class
LeanplumUIEditorWrapper
implements
LeanplumUIEditor
{
private
static
LeanplumUIEditor
interfaceEditorSingleton
;
private
static
LeanplumUIEditorWrapper
instance
=
null
;
protected
LeanplumUIEditorWrapper
(
)
{
}
static
{
Class
clazz
=
null
;
try
{
clazz
=
Class
.
forName
(
UI_INTERFACE_EDITOR
)
;
}
catch
(
Throwable
ignored
)
{
}
if
(
clazz
!
=
null
)
{
Method
method
=
null
;
try
{
method
=
clazz
.
getMethod
(
"
getInstance
"
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
if
(
method
!
=
null
)
{
try
{
interfaceEditorSingleton
=
(
LeanplumUIEditor
)
method
.
invoke
(
null
)
;
if
(
interfaceEditorSingleton
!
=
null
)
{
interfaceEditorSingleton
.
allowInterfaceEditing
(
Constants
.
isDevelopmentModeEnabled
)
;
}
}
catch
(
IllegalAccessException
e
)
{
Util
.
handleException
(
e
)
;
}
catch
(
InvocationTargetException
e
)
{
Util
.
handleException
(
e
)
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
}
public
static
LeanplumUIEditorWrapper
getInstance
(
)
{
if
(
instance
=
=
null
)
{
instance
=
new
LeanplumUIEditorWrapper
(
)
;
}
return
instance
;
}
public
static
boolean
isUIEditorAvailable
(
)
{
return
interfaceEditorSingleton
!
=
null
;
}
Override
public
void
allowInterfaceEditing
(
Boolean
isDevelopmentModeEnabled
)
{
if
(
interfaceEditorSingleton
!
=
null
)
{
interfaceEditorSingleton
.
allowInterfaceEditing
(
isDevelopmentModeEnabled
)
;
}
}
Override
public
void
applyInterfaceEdits
(
Activity
activity
)
{
if
(
interfaceEditorSingleton
!
=
null
&
&
activity
!
=
null
)
{
interfaceEditorSingleton
.
applyInterfaceEdits
(
activity
)
;
}
}
Override
public
void
startUpdating
(
)
{
if
(
interfaceEditorSingleton
!
=
null
)
{
interfaceEditorSingleton
.
startUpdating
(
)
;
}
Leanplum
.
countAggregator
(
)
.
incrementCount
(
"
start_updating_ui
"
)
;
}
Override
public
void
stopUpdating
(
)
{
if
(
interfaceEditorSingleton
!
=
null
)
{
interfaceEditorSingleton
.
stopUpdating
(
)
;
}
}
Override
public
void
sendUpdate
(
)
{
if
(
interfaceEditorSingleton
!
=
null
)
{
interfaceEditorSingleton
.
sendUpdate
(
)
;
}
Leanplum
.
countAggregator
(
)
.
incrementCount
(
"
send_update_ui
"
)
;
}
Override
public
void
sendUpdateDelayed
(
int
delay
)
{
if
(
interfaceEditorSingleton
!
=
null
)
{
interfaceEditorSingleton
.
sendUpdateDelayed
(
delay
)
;
}
}
Override
public
void
sendUpdateDelayedDefault
(
)
{
if
(
interfaceEditorSingleton
!
=
null
)
{
interfaceEditorSingleton
.
sendUpdateDelayedDefault
(
)
;
}
}
Override
public
LeanplumEditorMode
getMode
(
)
{
if
(
interfaceEditorSingleton
!
=
null
)
{
return
interfaceEditorSingleton
.
getMode
(
)
;
}
return
null
;
}
Override
public
void
setMode
(
LeanplumEditorMode
mode
)
{
if
(
interfaceEditorSingleton
!
=
null
)
{
interfaceEditorSingleton
.
setMode
(
mode
)
;
}
}
}
