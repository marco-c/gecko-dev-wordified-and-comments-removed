package
com
.
leanplum
.
internal
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
LinkedHashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
public
class
CollectionUtil
{
SafeVarargs
public
static
<
T
>
ArrayList
<
T
>
newArrayList
(
T
.
.
.
items
)
{
ArrayList
<
T
>
result
=
new
ArrayList
<
>
(
(
items
!
=
null
)
?
items
.
length
:
0
)
;
if
(
items
!
=
null
)
{
Collections
.
addAll
(
result
items
)
;
}
return
result
;
}
SafeVarargs
static
<
T
>
HashSet
<
T
>
newHashSet
(
T
.
.
.
items
)
{
HashSet
<
T
>
result
=
new
HashSet
<
>
(
(
items
!
=
null
)
?
items
.
length
:
0
)
;
if
(
items
!
=
null
)
{
Collections
.
addAll
(
result
items
)
;
}
return
result
;
}
SuppressWarnings
(
"
unchecked
"
)
public
static
<
T
U
>
HashMap
<
T
U
>
newHashMap
(
Object
.
.
.
items
)
{
return
(
HashMap
<
T
U
>
)
newMap
(
new
HashMap
(
(
items
!
=
null
)
?
items
.
length
:
0
)
(
items
!
=
null
)
?
items
:
null
)
;
}
SuppressWarnings
(
"
unchecked
"
)
static
<
T
U
>
LinkedHashMap
<
T
U
>
newLinkedHashMap
(
Object
.
.
.
items
)
{
return
(
LinkedHashMap
<
T
U
>
)
newMap
(
new
LinkedHashMap
(
(
items
!
=
null
)
?
items
.
length
:
0
)
(
items
!
=
null
)
?
items
:
null
)
;
}
SuppressWarnings
(
"
unchecked
"
)
private
static
<
T
U
>
Map
<
T
U
>
newMap
(
Map
<
T
U
>
map
T
[
]
items
)
{
if
(
items
=
=
null
|
|
items
.
length
=
=
0
)
{
return
map
;
}
if
(
items
.
length
%
2
!
=
0
)
{
throw
new
IllegalArgumentException
(
"
newMap
requires
an
even
number
of
items
.
"
)
;
}
for
(
int
i
=
0
;
i
<
items
.
length
;
i
+
=
2
)
{
map
.
put
(
items
[
i
]
(
U
)
items
[
i
+
1
]
)
;
}
return
map
;
}
static
<
T
>
String
concatenateArray
(
T
[
]
array
String
separator
)
{
if
(
array
=
=
null
)
{
return
null
;
}
return
concatenateList
(
Arrays
.
asList
(
array
)
separator
)
;
}
static
String
concatenateList
(
List
<
?
>
list
String
separator
)
{
if
(
list
=
=
null
)
{
return
null
;
}
if
(
separator
=
=
null
)
{
separator
=
"
"
;
}
StringBuilder
stringBuilder
=
new
StringBuilder
(
)
;
for
(
Object
item
:
list
)
{
if
(
item
!
=
null
)
{
stringBuilder
.
append
(
item
.
toString
(
)
)
;
stringBuilder
.
append
(
separator
)
;
}
}
String
result
=
stringBuilder
.
toString
(
)
;
if
(
result
.
length
(
)
>
0
)
{
return
result
.
substring
(
0
result
.
length
(
)
-
separator
.
length
(
)
)
;
}
else
{
return
result
;
}
}
SuppressWarnings
(
{
"
unchecked
"
}
)
public
static
<
T
>
T
uncheckedCast
(
Object
obj
)
{
return
(
T
)
obj
;
}
}
