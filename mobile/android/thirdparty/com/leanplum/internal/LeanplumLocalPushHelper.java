package
com
.
leanplum
.
internal
;
import
android
.
app
.
AlarmManager
;
import
android
.
app
.
PendingIntent
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
SharedPreferences
;
import
com
.
leanplum
.
ActionContext
;
import
com
.
leanplum
.
Leanplum
;
import
com
.
leanplum
.
LeanplumLocalPushListenerService
;
import
com
.
leanplum
.
utils
.
SharedPreferencesUtil
;
import
java
.
io
.
Serializable
;
import
java
.
util
.
Map
;
class
LeanplumLocalPushHelper
{
private
static
final
String
PREFERENCES_NAME
=
"
__leanplum_messaging__
"
;
static
boolean
scheduleLocalPush
(
ActionContext
actionContext
String
messageId
long
eta
)
{
try
{
Context
context
=
Leanplum
.
getContext
(
)
;
Intent
intentAlarm
=
new
Intent
(
context
LeanplumLocalPushListenerService
.
class
)
;
AlarmManager
alarmManager
=
(
AlarmManager
)
context
.
getSystemService
(
Context
.
ALARM_SERVICE
)
;
SharedPreferences
preferences
=
context
.
getSharedPreferences
(
PREFERENCES_NAME
Context
.
MODE_PRIVATE
)
;
long
existingEta
=
preferences
.
getLong
(
String
.
format
(
Constants
.
Defaults
.
LOCAL_NOTIFICATION_KEY
messageId
)
0L
)
;
if
(
existingEta
>
0L
&
&
existingEta
>
System
.
currentTimeMillis
(
)
)
{
if
(
existingEta
<
eta
)
{
return
false
;
}
else
if
(
existingEta
>
=
eta
)
{
PendingIntent
existingIntent
=
PendingIntent
.
getService
(
context
messageId
.
hashCode
(
)
intentAlarm
PendingIntent
.
FLAG_UPDATE_CURRENT
)
;
alarmManager
.
cancel
(
existingIntent
)
;
}
}
Map
<
String
Serializable
>
data
=
actionContext
.
objectNamed
(
"
Advanced
options
.
Data
"
)
;
if
(
data
!
=
null
)
{
for
(
String
key
:
data
.
keySet
(
)
)
{
intentAlarm
.
putExtra
(
key
data
.
get
(
key
)
)
;
}
}
String
openAction
=
actionContext
.
stringNamed
(
Constants
.
Values
.
DEFAULT_PUSH_ACTION
)
;
boolean
muteInsideApp
=
Boolean
.
TRUE
.
equals
(
actionContext
.
objectNamed
(
"
Advanced
options
.
Mute
inside
app
"
)
)
;
if
(
openAction
!
=
null
)
{
if
(
muteInsideApp
)
{
intentAlarm
.
putExtra
(
Constants
.
Keys
.
PUSH_MESSAGE_ID_MUTE_WITH_ACTION
messageId
)
;
}
else
{
intentAlarm
.
putExtra
(
Constants
.
Keys
.
PUSH_MESSAGE_ID_NO_MUTE_WITH_ACTION
messageId
)
;
}
}
else
{
if
(
muteInsideApp
)
{
intentAlarm
.
putExtra
(
Constants
.
Keys
.
PUSH_MESSAGE_ID_MUTE
messageId
)
;
}
else
{
intentAlarm
.
putExtra
(
Constants
.
Keys
.
PUSH_MESSAGE_ID_NO_MUTE
messageId
)
;
}
}
String
message
=
actionContext
.
stringNamed
(
"
Message
"
)
;
intentAlarm
.
putExtra
(
Constants
.
Keys
.
PUSH_MESSAGE_TEXT
message
!
=
null
?
message
:
Constants
.
Values
.
DEFAULT_PUSH_MESSAGE
)
;
String
collapseKey
=
actionContext
.
stringNamed
(
"
Android
options
.
Collapse
key
"
)
;
if
(
collapseKey
!
=
null
)
{
intentAlarm
.
putExtra
(
"
collapseKey
"
collapseKey
)
;
}
boolean
delayWhileIdle
=
Boolean
.
TRUE
.
equals
(
actionContext
.
objectNamed
(
"
Android
options
.
Delay
while
idle
"
)
)
;
if
(
delayWhileIdle
)
{
intentAlarm
.
putExtra
(
"
delayWhileIdle
"
true
)
;
}
PendingIntent
operation
=
PendingIntent
.
getService
(
context
messageId
.
hashCode
(
)
intentAlarm
PendingIntent
.
FLAG_UPDATE_CURRENT
)
;
alarmManager
.
set
(
AlarmManager
.
RTC_WAKEUP
eta
operation
)
;
SharedPreferences
.
Editor
editor
=
preferences
.
edit
(
)
;
editor
.
putLong
(
String
.
format
(
Constants
.
Defaults
.
LOCAL_NOTIFICATION_KEY
messageId
)
eta
)
;
SharedPreferencesUtil
.
commitChanges
(
editor
)
;
Log
.
i
(
"
Scheduled
notification
.
"
)
;
return
true
;
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
return
false
;
}
}
static
void
cancelLocalPush
(
Context
context
String
messageId
)
{
try
{
Intent
intentAlarm
=
new
Intent
(
context
LeanplumLocalPushListenerService
.
class
)
;
AlarmManager
alarmManager
=
(
AlarmManager
)
context
.
getSystemService
(
Context
.
ALARM_SERVICE
)
;
PendingIntent
existingIntent
=
PendingIntent
.
getService
(
context
messageId
.
hashCode
(
)
intentAlarm
PendingIntent
.
FLAG_UPDATE_CURRENT
)
;
if
(
alarmManager
!
=
null
&
&
existingIntent
!
=
null
)
{
alarmManager
.
cancel
(
existingIntent
)
;
}
}
catch
(
Throwable
ignored
)
{
}
}
}
