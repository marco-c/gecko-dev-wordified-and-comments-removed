package
com
.
leanplum
.
internal
;
import
com
.
leanplum
.
Leanplum
;
import
java
.
util
.
Map
;
public
class
Request
implements
Requesting
{
private
final
String
httpMethod
;
private
final
String
apiMethod
;
private
final
Map
<
String
Object
>
params
;
private
ResponseCallback
response
=
null
;
private
ErrorCallback
error
=
null
;
private
final
CountAggregator
countAggregator
;
public
Request
(
String
httpMethod
String
apiMethod
Map
<
String
Object
>
params
)
{
this
.
httpMethod
=
httpMethod
;
this
.
apiMethod
=
apiMethod
;
this
.
params
=
params
;
this
.
countAggregator
=
Leanplum
.
countAggregator
(
)
;
}
public
static
Request
get
(
String
apiMethod
Map
<
String
Object
>
params
)
{
Log
.
LeanplumLogType
level
=
Constants
.
Methods
.
LOG
.
equals
(
apiMethod
)
?
Log
.
LeanplumLogType
.
DEBUG
:
Log
.
LeanplumLogType
.
VERBOSE
;
Log
.
log
(
level
"
Will
call
API
method
"
+
apiMethod
+
"
with
arguments
"
+
params
)
;
Leanplum
.
countAggregator
(
)
.
incrementCount
(
"
get_lprequest
"
)
;
return
new
Request
(
"
GET
"
apiMethod
params
)
;
}
public
static
Request
post
(
String
apiMethod
Map
<
String
Object
>
params
)
{
Log
.
LeanplumLogType
level
=
Constants
.
Methods
.
LOG
.
equals
(
apiMethod
)
?
Log
.
LeanplumLogType
.
DEBUG
:
Log
.
LeanplumLogType
.
VERBOSE
;
Log
.
log
(
level
"
Will
call
API
method
"
+
apiMethod
+
"
with
arguments
"
+
params
)
;
Leanplum
.
countAggregator
(
)
.
incrementCount
(
"
post_lprequest
"
)
;
return
new
Request
(
"
POST
"
apiMethod
params
)
;
}
public
void
onResponse
(
ResponseCallback
response
)
{
this
.
response
=
response
;
this
.
countAggregator
.
incrementCount
(
"
on_response_lprequest
"
)
;
}
public
void
onError
(
ErrorCallback
error
)
{
this
.
error
=
error
;
this
.
countAggregator
.
incrementCount
(
"
on_error_lprequest
"
)
;
}
}
