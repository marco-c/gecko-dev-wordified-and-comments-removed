package
com
.
leanplum
.
internal
;
import
org
.
mozilla
.
gecko
.
thirdparty_unused
.
BuildConfig
;
import
java
.
util
.
HashMap
;
public
class
Log
{
public
enum
LeanplumLogType
{
ERROR
WARNING
INFO
VERBOSE
PRIVATE
DEBUG
}
private
static
final
ThreadLocal
<
Boolean
>
isLogging
=
new
ThreadLocal
<
Boolean
>
(
)
{
Override
protected
Boolean
initialValue
(
)
{
return
false
;
}
}
;
public
static
void
e
(
Object
.
.
.
objects
)
{
log
(
LeanplumLogType
.
ERROR
CollectionUtil
.
concatenateArray
(
objects
"
"
)
)
;
}
public
static
void
w
(
Object
.
.
.
objects
)
{
log
(
LeanplumLogType
.
WARNING
CollectionUtil
.
concatenateArray
(
objects
"
"
)
)
;
}
public
static
void
i
(
Object
.
.
.
objects
)
{
log
(
LeanplumLogType
.
INFO
CollectionUtil
.
concatenateArray
(
objects
"
"
)
)
;
}
public
static
void
v
(
Object
.
.
.
objects
)
{
log
(
LeanplumLogType
.
VERBOSE
CollectionUtil
.
concatenateArray
(
objects
"
"
)
)
;
}
public
static
void
p
(
Object
.
.
.
objects
)
{
log
(
LeanplumLogType
.
PRIVATE
CollectionUtil
.
concatenateArray
(
objects
"
"
)
)
;
}
public
static
void
d
(
Object
.
.
.
objects
)
{
log
(
LeanplumLogType
.
DEBUG
CollectionUtil
.
concatenateArray
(
objects
"
"
)
)
;
}
public
static
void
log
(
LeanplumLogType
type
String
message
)
{
String
tag
=
generateTag
(
type
)
;
String
prefix
=
generateMessagePrefix
(
)
;
switch
(
type
)
{
case
ERROR
:
android
.
util
.
Log
.
e
(
tag
prefix
+
message
)
;
maybeSendLog
(
tag
+
prefix
+
message
)
;
return
;
case
WARNING
:
android
.
util
.
Log
.
w
(
tag
prefix
+
message
)
;
maybeSendLog
(
tag
+
prefix
+
message
)
;
return
;
case
INFO
:
android
.
util
.
Log
.
i
(
tag
prefix
+
message
)
;
maybeSendLog
(
tag
+
prefix
+
message
)
;
return
;
case
VERBOSE
:
if
(
Constants
.
isDevelopmentModeEnabled
&
&
Constants
.
enableVerboseLoggingInDevelopmentMode
)
{
android
.
util
.
Log
.
v
(
tag
prefix
+
message
)
;
maybeSendLog
(
tag
+
prefix
+
message
)
;
}
return
;
case
PRIVATE
:
maybeSendLog
(
tag
+
prefix
+
message
)
;
return
;
default
:
if
(
BuildConfig
.
DEBUG
)
{
android
.
util
.
Log
.
d
(
tag
prefix
+
message
)
;
}
}
}
private
static
String
generateTag
(
LeanplumLogType
type
)
{
return
"
[
"
+
type
.
name
(
)
+
"
]
[
Leanplum
]
"
;
}
private
static
String
generateMessagePrefix
(
)
{
int
callerIndex
=
5
;
int
minimumStackTraceIndex
=
5
;
StackTraceElement
[
]
stackTraceElements
=
Thread
.
currentThread
(
)
.
getStackTrace
(
)
;
if
(
stackTraceElements
.
length
>
=
minimumStackTraceIndex
)
{
String
tag
=
"
[
"
;
tag
+
=
stackTraceElements
[
callerIndex
]
.
getClassName
(
)
;
tag
+
=
"
:
:
"
;
tag
+
=
stackTraceElements
[
callerIndex
]
.
getMethodName
(
)
;
tag
+
=
"
:
:
"
;
tag
+
=
stackTraceElements
[
callerIndex
]
.
getLineNumber
(
)
;
tag
+
=
"
]
:
"
;
return
tag
;
}
return
"
"
;
}
private
static
void
maybeSendLog
(
String
message
)
{
if
(
!
Constants
.
loggingEnabled
|
|
isLogging
.
get
(
)
)
{
return
;
}
isLogging
.
set
(
true
)
;
try
{
HashMap
<
String
Object
>
params
=
new
HashMap
<
>
(
)
;
params
.
put
(
Constants
.
Params
.
TYPE
Constants
.
Values
.
SDK_LOG
)
;
params
.
put
(
Constants
.
Params
.
MESSAGE
message
)
;
RequestOld
.
post
(
Constants
.
Methods
.
LOG
params
)
.
sendEventually
(
)
;
}
catch
(
Throwable
t
)
{
android
.
util
.
Log
.
e
(
"
Leanplum
"
"
Unable
to
send
log
.
"
t
)
;
}
finally
{
isLogging
.
remove
(
)
;
}
}
public
static
String
getStackTraceString
(
Throwable
throwable
)
{
return
android
.
util
.
Log
.
getStackTraceString
(
throwable
)
;
}
}
