package
com
.
leanplum
.
internal
;
import
com
.
leanplum
.
Leanplum
;
import
com
.
leanplum
.
callbacks
.
StartCallback
;
import
org
.
json
.
JSONObject
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
Registration
{
public
static
void
registerDevice
(
String
email
final
StartCallback
callback
)
{
Map
<
String
Object
>
params
=
new
HashMap
<
>
(
)
;
params
.
put
(
Constants
.
Params
.
EMAIL
email
)
;
RequestOld
request
=
RequestOld
.
post
(
Constants
.
Methods
.
REGISTER_FOR_DEVELOPMENT
params
)
;
request
.
onResponse
(
new
RequestOld
.
ResponseCallback
(
)
{
Override
public
void
response
(
final
JSONObject
response
)
{
OsHandler
.
getInstance
(
)
.
post
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
boolean
isSuccess
=
RequestOld
.
isResponseSuccess
(
response
)
;
if
(
isSuccess
)
{
if
(
callback
!
=
null
)
{
callback
.
onResponse
(
true
)
;
}
}
else
{
Log
.
e
(
RequestOld
.
getResponseError
(
response
)
)
;
if
(
callback
!
=
null
)
{
callback
.
onResponse
(
false
)
;
}
}
}
catch
(
Throwable
t
)
{
Util
.
handleException
(
t
)
;
}
}
}
)
;
}
}
)
;
request
.
onError
(
new
RequestOld
.
ErrorCallback
(
)
{
Override
public
void
error
(
final
Exception
e
)
{
OsHandler
.
getInstance
(
)
.
post
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
if
(
callback
!
=
null
)
{
callback
.
onResponse
(
false
)
;
}
}
}
)
;
}
}
)
;
request
.
sendIfConnected
(
)
;
Leanplum
.
countAggregator
(
)
.
incrementCount
(
"
register_device
"
)
;
}
}
