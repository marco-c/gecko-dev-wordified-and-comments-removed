package
com
.
leanplum
.
utils
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
Bitmap
.
Config
;
import
android
.
graphics
.
BitmapFactory
;
import
android
.
graphics
.
PorterDuff
.
Mode
;
import
android
.
graphics
.
drawable
.
Drawable
;
import
android
.
graphics
.
drawable
.
ShapeDrawable
;
import
android
.
graphics
.
drawable
.
StateListDrawable
;
import
android
.
graphics
.
drawable
.
shapes
.
RoundRectShape
;
import
android
.
os
.
Build
;
import
android
.
util
.
DisplayMetrics
;
import
android
.
view
.
View
;
import
android
.
view
.
WindowManager
;
import
com
.
leanplum
.
internal
.
Log
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
net
.
URL
;
public
class
BitmapUtil
{
private
static
final
int
BIG_PICTURE_MAX_HEIGHT_DP
=
192
;
public
static
Bitmap
getRoundedCornerBitmap
(
Bitmap
bitmap
int
pixels
)
{
if
(
bitmap
=
=
null
)
{
return
null
;
}
Bitmap
output
=
Bitmap
.
createBitmap
(
bitmap
.
getWidth
(
)
bitmap
.
getHeight
(
)
Config
.
ARGB_8888
)
;
android
.
graphics
.
Canvas
canvas
=
new
android
.
graphics
.
Canvas
(
output
)
;
final
int
color
=
0xff000000
;
final
android
.
graphics
.
Paint
paint
=
new
android
.
graphics
.
Paint
(
)
;
final
android
.
graphics
.
Rect
rect
=
new
android
.
graphics
.
Rect
(
0
0
bitmap
.
getWidth
(
)
bitmap
.
getHeight
(
)
)
;
final
android
.
graphics
.
RectF
rectF
=
new
android
.
graphics
.
RectF
(
rect
)
;
paint
.
setAntiAlias
(
true
)
;
canvas
.
drawARGB
(
0
0
0
0
)
;
paint
.
setColor
(
color
)
;
canvas
.
drawRoundRect
(
rectF
pixels
pixels
paint
)
;
paint
.
setXfermode
(
new
android
.
graphics
.
PorterDuffXfermode
(
Mode
.
SRC_IN
)
)
;
canvas
.
drawBitmap
(
bitmap
rect
rect
paint
)
;
return
output
;
}
public
static
void
stateBackgroundDarkerByPercentage
(
View
v
int
normalStateColor
int
percentage
)
{
int
darker
=
getDarker
(
normalStateColor
percentage
)
;
stateBackground
(
v
normalStateColor
darker
)
;
}
public
static
int
getDarker
(
int
color
int
percentage
)
{
if
(
percentage
<
0
|
|
percentage
>
100
)
percentage
=
0
;
double
d
=
(
(
100
-
percentage
)
/
(
double
)
100
)
;
int
a
=
(
color
>
>
24
)
&
0xFF
;
int
r
=
(
int
)
(
(
(
color
>
>
16
)
&
0xFF
)
*
d
)
&
0xFF
;
int
g
=
(
int
)
(
(
(
color
>
>
8
)
&
0xFF
)
*
d
)
&
0xFF
;
int
b
=
(
int
)
(
(
color
&
0xFF
)
*
d
)
&
0xFF
;
a
=
a
<
<
24
;
r
=
r
<
<
16
;
g
=
g
<
<
8
;
return
a
|
r
|
g
|
b
;
}
public
static
void
stateBackground
(
View
v
int
normalStateColor
int
pressedStateColor
)
{
if
(
Build
.
VERSION
.
SDK_INT
>
=
16
)
{
v
.
setBackground
(
getBackground
(
normalStateColor
pressedStateColor
)
)
;
}
else
{
v
.
setBackgroundColor
(
normalStateColor
)
;
}
}
private
static
Drawable
getBackground
(
int
normalStateColor
int
pressedStateColor
)
{
StateListDrawable
background
=
new
StateListDrawable
(
)
;
int
c
=
SizeUtil
.
dp10
;
float
[
]
r
=
new
float
[
]
{
c
c
c
c
c
c
c
c
}
;
RoundRectShape
rr
=
new
RoundRectShape
(
r
null
null
)
;
ShapeDrawable
cd
=
new
ShapeDrawable
(
)
;
cd
.
setShape
(
rr
)
;
cd
.
getPaint
(
)
.
setColor
(
pressedStateColor
)
;
background
.
addState
(
new
int
[
]
{
android
.
R
.
attr
.
state_pressed
android
.
R
.
attr
.
state_focused
}
cd
)
;
background
.
addState
(
new
int
[
]
{
-
android
.
R
.
attr
.
state_pressed
android
.
R
.
attr
.
state_focused
}
cd
)
;
background
.
addState
(
new
int
[
]
{
android
.
R
.
attr
.
state_pressed
-
android
.
R
.
attr
.
state_focused
}
cd
)
;
ShapeDrawable
cd1
=
new
ShapeDrawable
(
)
;
cd1
.
setShape
(
rr
)
;
cd1
.
getPaint
(
)
.
setColor
(
normalStateColor
)
;
background
.
addState
(
new
int
[
]
{
-
android
.
R
.
attr
.
state_pressed
-
android
.
R
.
attr
.
state_focused
}
cd1
)
;
return
background
;
}
private
static
int
calculateInSampleSize
(
BitmapFactory
.
Options
options
int
reqWidth
int
reqHeight
)
{
final
int
height
=
options
.
outHeight
;
final
int
width
=
options
.
outWidth
;
int
inSampleSize
=
1
;
if
(
height
>
reqHeight
|
|
width
>
reqWidth
)
{
final
int
halfHeight
=
height
/
2
;
final
int
halfWidth
=
width
/
2
;
while
(
(
halfHeight
/
inSampleSize
)
>
=
reqHeight
&
&
(
halfWidth
/
inSampleSize
)
>
=
reqWidth
)
{
inSampleSize
*
=
2
;
}
}
return
inSampleSize
;
}
private
static
Bitmap
getBitmapFromUrl
(
String
imageUrl
int
width
int
height
)
{
InputStream
input
=
null
;
try
{
input
=
new
URL
(
imageUrl
)
.
openStream
(
)
;
final
BitmapFactory
.
Options
options
=
new
BitmapFactory
.
Options
(
)
;
options
.
inJustDecodeBounds
=
true
;
BitmapFactory
.
decodeStream
(
input
null
options
)
;
closeStream
(
input
)
;
input
=
new
URL
(
imageUrl
)
.
openStream
(
)
;
options
.
inSampleSize
=
calculateInSampleSize
(
options
width
height
)
;
options
.
inJustDecodeBounds
=
false
;
return
BitmapFactory
.
decodeStream
(
input
null
options
)
;
}
catch
(
IOException
e
)
{
Log
.
e
(
String
.
format
(
"
IOException
in
image
download
for
URL
:
%
s
.
"
imageUrl
)
e
)
;
return
null
;
}
finally
{
closeStream
(
input
)
;
}
}
public
static
Bitmap
getScaledBitmap
(
Context
context
String
imageUrl
)
{
WindowManager
windowManager
=
(
WindowManager
)
context
.
getSystemService
(
Context
.
WINDOW_SERVICE
)
;
DisplayMetrics
displayMetrics
=
new
DisplayMetrics
(
)
;
windowManager
.
getDefaultDisplay
(
)
.
getMetrics
(
displayMetrics
)
;
int
pixelsHeight
=
Math
.
round
(
displayMetrics
.
density
*
BIG_PICTURE_MAX_HEIGHT_DP
+
0
.
5f
)
;
int
pixelsWidth
=
Math
.
min
(
2
*
pixelsHeight
displayMetrics
.
widthPixels
)
;
Bitmap
bitmap
=
getBitmapFromUrl
(
imageUrl
pixelsWidth
pixelsHeight
)
;
try
{
bitmap
=
Bitmap
.
createScaledBitmap
(
bitmap
pixelsWidth
pixelsHeight
true
)
;
}
catch
(
Exception
e
)
{
Log
.
e
(
"
Failed
on
scale
image
"
+
imageUrl
+
"
to
(
"
+
pixelsWidth
+
"
"
+
pixelsHeight
+
"
)
"
e
)
;
}
return
bitmap
;
}
private
static
void
closeStream
(
InputStream
inputStream
)
{
try
{
if
(
inputStream
!
=
null
)
{
inputStream
.
close
(
)
;
}
}
catch
(
IOException
e
)
{
Log
.
e
(
"
IOException
during
closing
of
image
download
stream
.
"
e
)
;
}
}
}
