package
com
.
keepsafe
.
switchboard
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
net
.
HttpURLConnection
;
import
java
.
net
.
MalformedURLException
;
import
java
.
net
.
URL
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Locale
;
import
java
.
util
.
MissingResourceException
;
import
java
.
util
.
zip
.
CRC32
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
android
.
content
.
Context
;
import
android
.
content
.
pm
.
PackageManager
.
NameNotFoundException
;
import
android
.
os
.
Build
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
util
.
Log
;
public
class
SwitchBoard
{
private
static
final
String
TAG
=
"
SwitchBoard
"
;
public
static
boolean
DEBUG
=
true
;
private
static
final
String
IS_EXPERIMENT_ACTIVE
=
"
isActive
"
;
private
static
final
String
EXPERIMENT_VALUES
=
"
values
"
;
private
static
final
String
KEY_SERVER_URL
=
"
mainServerUrl
"
;
private
static
final
String
KEY_CONFIG_RESULTS
=
"
results
"
;
private
static
String
uuidExtra
=
null
;
public
static
void
setUUIDFromExtra
(
String
uuid
)
{
uuidExtra
=
uuid
;
}
static
void
loadConfig
(
Context
c
String
uuid
NonNull
String
defaultServerUrl
)
{
String
serverUrl
=
defaultServerUrl
;
final
URL
requestUrl
=
buildConfigRequestUrl
(
c
uuid
serverUrl
)
;
if
(
requestUrl
=
=
null
)
{
return
;
}
if
(
DEBUG
)
Log
.
d
(
TAG
requestUrl
.
toString
(
)
)
;
final
String
result
=
readFromUrlGET
(
requestUrl
)
;
if
(
DEBUG
)
Log
.
d
(
TAG
result
)
;
if
(
result
=
=
null
)
{
return
;
}
try
{
final
JSONObject
json
=
new
JSONObject
(
result
)
;
final
String
newServerUrl
=
json
.
getString
(
KEY_SERVER_URL
)
;
if
(
!
defaultServerUrl
.
equals
(
newServerUrl
)
)
{
Preferences
.
setDynamicConfigServerUrl
(
c
newServerUrl
)
;
}
final
String
config
=
json
.
getString
(
KEY_CONFIG_RESULTS
)
;
Preferences
.
setDynamicConfigJson
(
c
config
)
;
}
catch
(
JSONException
e
)
{
Log
.
e
(
TAG
"
Exception
parsing
server
result
"
e
)
;
}
}
Nullable
private
static
URL
buildConfigRequestUrl
(
Context
c
String
uuid
String
serverUrl
)
{
if
(
uuid
=
=
null
)
{
DeviceUuidFactory
df
=
new
DeviceUuidFactory
(
c
)
;
uuid
=
df
.
getDeviceUuid
(
)
.
toString
(
)
;
}
final
String
device
=
Build
.
DEVICE
;
final
String
manufacturer
=
Build
.
MANUFACTURER
;
String
lang
=
"
unknown
"
;
try
{
lang
=
Locale
.
getDefault
(
)
.
getISO3Language
(
)
;
}
catch
(
MissingResourceException
e
)
{
e
.
printStackTrace
(
)
;
}
String
country
=
"
unknown
"
;
try
{
country
=
Locale
.
getDefault
(
)
.
getISO3Country
(
)
;
}
catch
(
MissingResourceException
e
)
{
e
.
printStackTrace
(
)
;
}
final
String
packageName
=
c
.
getPackageName
(
)
;
String
versionName
=
"
none
"
;
try
{
versionName
=
c
.
getPackageManager
(
)
.
getPackageInfo
(
c
.
getPackageName
(
)
0
)
.
versionName
;
}
catch
(
NameNotFoundException
e
)
{
e
.
printStackTrace
(
)
;
}
final
String
params
=
"
uuid
=
"
+
uuid
+
"
&
device
=
"
+
device
+
"
&
lang
=
"
+
lang
+
"
&
country
=
"
+
country
+
"
&
manufacturer
=
"
+
manufacturer
+
"
&
appId
=
"
+
packageName
+
"
&
version
=
"
+
versionName
;
try
{
return
new
URL
(
serverUrl
+
"
?
"
+
params
)
;
}
catch
(
MalformedURLException
e
)
{
e
.
printStackTrace
(
)
;
return
null
;
}
}
public
static
boolean
isInBucket
(
Context
c
int
low
int
high
)
{
int
userBucket
=
getUserBucket
(
c
)
;
if
(
userBucket
>
=
low
&
&
userBucket
<
high
)
return
true
;
else
return
false
;
}
public
static
boolean
isInExperiment
(
Context
c
String
experimentName
)
{
final
String
config
=
Preferences
.
getDynamicConfigJson
(
c
)
;
if
(
config
=
=
null
)
{
return
false
;
}
try
{
final
JSONObject
experiment
=
new
JSONObject
(
config
)
.
getJSONObject
(
experimentName
)
;
if
(
DEBUG
)
Log
.
d
(
TAG
"
experiment
"
+
experimentName
+
"
JSON
object
:
"
+
experiment
.
toString
(
)
)
;
return
experiment
!
=
null
&
&
experiment
.
getBoolean
(
IS_EXPERIMENT_ACTIVE
)
;
}
catch
(
JSONException
e
)
{
Log
.
e
(
TAG
"
Error
getting
experiment
from
config
"
e
)
;
return
false
;
}
}
public
static
List
<
String
>
getActiveExperiments
(
Context
c
)
{
ArrayList
<
String
>
returnList
=
new
ArrayList
<
String
>
(
)
;
String
config
=
Preferences
.
getDynamicConfigJson
(
c
)
;
if
(
config
=
=
null
)
{
return
returnList
;
}
try
{
JSONObject
experiments
=
new
JSONObject
(
config
)
;
Iterator
<
?
>
iter
=
experiments
.
keys
(
)
;
while
(
iter
.
hasNext
(
)
)
{
String
key
=
(
String
)
iter
.
next
(
)
;
JSONObject
experiment
=
experiments
.
getJSONObject
(
key
)
;
if
(
experiment
.
getBoolean
(
IS_EXPERIMENT_ACTIVE
)
)
{
returnList
.
add
(
key
)
;
}
}
}
catch
(
JSONException
e
)
{
}
return
returnList
;
}
public
static
boolean
hasExperimentValues
(
Context
c
String
experimentName
)
{
return
getExperimentValuesFromJson
(
c
experimentName
)
!
=
null
;
}
public
static
JSONObject
getExperimentValuesFromJson
(
Context
c
String
experimentName
)
{
final
String
config
=
Preferences
.
getDynamicConfigJson
(
c
)
;
if
(
config
=
=
null
)
{
return
null
;
}
try
{
final
JSONObject
experiment
=
new
JSONObject
(
config
)
.
getJSONObject
(
experimentName
)
;
return
experiment
.
getJSONObject
(
EXPERIMENT_VALUES
)
;
}
catch
(
JSONException
e
)
{
Log
.
e
(
TAG
"
Could
not
create
JSON
object
from
config
string
"
e
)
;
}
return
null
;
}
Nullable
private
static
String
readFromUrlGET
(
URL
url
)
{
if
(
DEBUG
)
Log
.
d
(
TAG
"
readFromUrl
(
)
:
"
+
url
)
;
try
{
HttpURLConnection
connection
=
(
HttpURLConnection
)
url
.
openConnection
(
)
;
connection
.
setRequestMethod
(
"
GET
"
)
;
connection
.
setUseCaches
(
false
)
;
InputStream
is
=
connection
.
getInputStream
(
)
;
InputStreamReader
inputStreamReader
=
new
InputStreamReader
(
is
)
;
BufferedReader
bufferReader
=
new
BufferedReader
(
inputStreamReader
8192
)
;
String
line
=
"
"
;
StringBuilder
resultContent
=
new
StringBuilder
(
)
;
while
(
(
line
=
bufferReader
.
readLine
(
)
)
!
=
null
)
{
if
(
DEBUG
)
Log
.
d
(
TAG
line
)
;
resultContent
.
append
(
line
)
;
}
bufferReader
.
close
(
)
;
if
(
DEBUG
)
Log
.
d
(
TAG
"
readFromUrl
(
)
result
:
"
+
resultContent
.
toString
(
)
)
;
return
resultContent
.
toString
(
)
;
}
catch
(
IOException
e
)
{
e
.
printStackTrace
(
)
;
}
return
null
;
}
private
static
int
getUserBucket
(
Context
c
)
{
String
uuid
=
uuidExtra
;
if
(
uuid
=
=
null
)
{
DeviceUuidFactory
df
=
new
DeviceUuidFactory
(
c
)
;
uuid
=
df
.
getDeviceUuid
(
)
.
toString
(
)
;
}
CRC32
crc
=
new
CRC32
(
)
;
crc
.
update
(
uuid
.
getBytes
(
)
)
;
long
checksum
=
crc
.
getValue
(
)
;
return
(
int
)
(
checksum
%
100L
)
;
}
}
