package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
File
;
import
java
.
util
.
regex
.
Matcher
;
import
java
.
util
.
regex
.
Pattern
;
final
class
SimpleCacheSpan
extends
CacheSpan
{
static
final
String
COMMON_SUFFIX
=
"
.
exo
"
;
private
static
final
String
SUFFIX
=
"
.
v3
"
+
COMMON_SUFFIX
;
private
static
final
Pattern
CACHE_FILE_PATTERN_V1
=
Pattern
.
compile
(
"
^
(
.
+
)
\
\
.
(
\
\
d
+
)
\
\
.
(
\
\
d
+
)
\
\
.
v1
\
\
.
exo
"
Pattern
.
DOTALL
)
;
private
static
final
Pattern
CACHE_FILE_PATTERN_V2
=
Pattern
.
compile
(
"
^
(
.
+
)
\
\
.
(
\
\
d
+
)
\
\
.
(
\
\
d
+
)
\
\
.
v2
\
\
.
exo
"
Pattern
.
DOTALL
)
;
private
static
final
Pattern
CACHE_FILE_PATTERN_V3
=
Pattern
.
compile
(
"
^
(
\
\
d
+
)
\
\
.
(
\
\
d
+
)
\
\
.
(
\
\
d
+
)
\
\
.
v3
\
\
.
exo
"
Pattern
.
DOTALL
)
;
public
static
File
getCacheFile
(
File
cacheDir
int
id
long
position
long
timestamp
)
{
return
new
File
(
cacheDir
id
+
"
.
"
+
position
+
"
.
"
+
timestamp
+
SUFFIX
)
;
}
public
static
SimpleCacheSpan
createLookup
(
String
key
long
position
)
{
return
new
SimpleCacheSpan
(
key
position
C
.
LENGTH_UNSET
C
.
TIME_UNSET
null
)
;
}
public
static
SimpleCacheSpan
createOpenHole
(
String
key
long
position
)
{
return
new
SimpleCacheSpan
(
key
position
C
.
LENGTH_UNSET
C
.
TIME_UNSET
null
)
;
}
public
static
SimpleCacheSpan
createClosedHole
(
String
key
long
position
long
length
)
{
return
new
SimpleCacheSpan
(
key
position
length
C
.
TIME_UNSET
null
)
;
}
Nullable
public
static
SimpleCacheSpan
createCacheEntry
(
File
file
long
length
CachedContentIndex
index
)
{
return
createCacheEntry
(
file
length
C
.
TIME_UNSET
index
)
;
}
Nullable
public
static
SimpleCacheSpan
createCacheEntry
(
File
file
long
length
long
lastTouchTimestamp
CachedContentIndex
index
)
{
String
name
=
file
.
getName
(
)
;
if
(
!
name
.
endsWith
(
SUFFIX
)
)
{
Nullable
File
upgradedFile
=
upgradeFile
(
file
index
)
;
if
(
upgradedFile
=
=
null
)
{
return
null
;
}
file
=
upgradedFile
;
name
=
file
.
getName
(
)
;
}
Matcher
matcher
=
CACHE_FILE_PATTERN_V3
.
matcher
(
name
)
;
if
(
!
matcher
.
matches
(
)
)
{
return
null
;
}
int
id
=
Integer
.
parseInt
(
matcher
.
group
(
1
)
)
;
String
key
=
index
.
getKeyForId
(
id
)
;
if
(
key
=
=
null
)
{
return
null
;
}
if
(
length
=
=
C
.
LENGTH_UNSET
)
{
length
=
file
.
length
(
)
;
}
if
(
length
=
=
0
)
{
return
null
;
}
long
position
=
Long
.
parseLong
(
matcher
.
group
(
2
)
)
;
if
(
lastTouchTimestamp
=
=
C
.
TIME_UNSET
)
{
lastTouchTimestamp
=
Long
.
parseLong
(
matcher
.
group
(
3
)
)
;
}
return
new
SimpleCacheSpan
(
key
position
length
lastTouchTimestamp
file
)
;
}
Nullable
private
static
File
upgradeFile
(
File
file
CachedContentIndex
index
)
{
String
key
;
String
filename
=
file
.
getName
(
)
;
Matcher
matcher
=
CACHE_FILE_PATTERN_V2
.
matcher
(
filename
)
;
if
(
matcher
.
matches
(
)
)
{
key
=
Util
.
unescapeFileName
(
matcher
.
group
(
1
)
)
;
if
(
key
=
=
null
)
{
return
null
;
}
}
else
{
matcher
=
CACHE_FILE_PATTERN_V1
.
matcher
(
filename
)
;
if
(
!
matcher
.
matches
(
)
)
{
return
null
;
}
key
=
matcher
.
group
(
1
)
;
}
File
newCacheFile
=
getCacheFile
(
Assertions
.
checkStateNotNull
(
file
.
getParentFile
(
)
)
index
.
assignIdForKey
(
key
)
Long
.
parseLong
(
matcher
.
group
(
2
)
)
Long
.
parseLong
(
matcher
.
group
(
3
)
)
)
;
if
(
!
file
.
renameTo
(
newCacheFile
)
)
{
return
null
;
}
return
newCacheFile
;
}
private
SimpleCacheSpan
(
String
key
long
position
long
length
long
lastTouchTimestamp
Nullable
File
file
)
{
super
(
key
position
length
lastTouchTimestamp
file
)
;
}
public
SimpleCacheSpan
copyWithFileAndLastTouchTimestamp
(
File
file
long
lastTouchTimestamp
)
{
Assertions
.
checkState
(
isCached
)
;
return
new
SimpleCacheSpan
(
key
position
length
lastTouchTimestamp
file
)
;
}
}
