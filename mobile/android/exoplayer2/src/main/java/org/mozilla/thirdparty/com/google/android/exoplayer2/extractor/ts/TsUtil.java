package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ts
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
public
final
class
TsUtil
{
public
static
int
findSyncBytePosition
(
byte
[
]
data
int
startPosition
int
limitPosition
)
{
int
position
=
startPosition
;
while
(
position
<
limitPosition
&
&
data
[
position
]
!
=
TsExtractor
.
TS_SYNC_BYTE
)
{
position
+
+
;
}
return
position
;
}
public
static
long
readPcrFromPacket
(
ParsableByteArray
packetBuffer
int
startOfPacket
int
pcrPid
)
{
packetBuffer
.
setPosition
(
startOfPacket
)
;
if
(
packetBuffer
.
bytesLeft
(
)
<
5
)
{
return
C
.
TIME_UNSET
;
}
int
tsPacketHeader
=
packetBuffer
.
readInt
(
)
;
if
(
(
tsPacketHeader
&
0x800000
)
!
=
0
)
{
return
C
.
TIME_UNSET
;
}
int
pid
=
(
tsPacketHeader
&
0x1FFF00
)
>
>
8
;
if
(
pid
!
=
pcrPid
)
{
return
C
.
TIME_UNSET
;
}
boolean
adaptationFieldExists
=
(
tsPacketHeader
&
0x20
)
!
=
0
;
if
(
!
adaptationFieldExists
)
{
return
C
.
TIME_UNSET
;
}
int
adaptationFieldLength
=
packetBuffer
.
readUnsignedByte
(
)
;
if
(
adaptationFieldLength
>
=
7
&
&
packetBuffer
.
bytesLeft
(
)
>
=
7
)
{
int
flags
=
packetBuffer
.
readUnsignedByte
(
)
;
boolean
pcrFlagSet
=
(
flags
&
0x10
)
=
=
0x10
;
if
(
pcrFlagSet
)
{
byte
[
]
pcrBytes
=
new
byte
[
6
]
;
packetBuffer
.
readBytes
(
pcrBytes
0
pcrBytes
.
length
)
;
return
readPcrValueFromPcrBytes
(
pcrBytes
)
;
}
}
return
C
.
TIME_UNSET
;
}
private
static
long
readPcrValueFromPcrBytes
(
byte
[
]
pcrBytes
)
{
return
(
pcrBytes
[
0
]
&
0xFFL
)
<
<
25
|
(
pcrBytes
[
1
]
&
0xFFL
)
<
<
17
|
(
pcrBytes
[
2
]
&
0xFFL
)
<
<
9
|
(
pcrBytes
[
3
]
&
0xFFL
)
<
<
1
|
(
pcrBytes
[
4
]
&
0xFFL
)
>
>
7
;
}
private
TsUtil
(
)
{
}
}
