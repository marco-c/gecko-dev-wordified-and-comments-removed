package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
video
.
spherical
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
BaseRenderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ExoPlaybackException
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
FormatHolder
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Renderer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
RendererCapabilities
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
decoder
.
DecoderInputBuffer
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
MimeTypes
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
nio
.
ByteBuffer
;
public
class
CameraMotionRenderer
extends
BaseRenderer
{
private
static
final
int
SAMPLE_WINDOW_DURATION_US
=
100000
;
private
final
DecoderInputBuffer
buffer
;
private
final
ParsableByteArray
scratch
;
private
long
offsetUs
;
Nullable
private
CameraMotionListener
listener
;
private
long
lastTimestampUs
;
public
CameraMotionRenderer
(
)
{
super
(
C
.
TRACK_TYPE_CAMERA_MOTION
)
;
buffer
=
new
DecoderInputBuffer
(
DecoderInputBuffer
.
BUFFER_REPLACEMENT_MODE_NORMAL
)
;
scratch
=
new
ParsableByteArray
(
)
;
}
Override
Capabilities
public
int
supportsFormat
(
Format
format
)
{
return
MimeTypes
.
APPLICATION_CAMERA_MOTION
.
equals
(
format
.
sampleMimeType
)
?
RendererCapabilities
.
create
(
FORMAT_HANDLED
)
:
RendererCapabilities
.
create
(
FORMAT_UNSUPPORTED_TYPE
)
;
}
Override
public
void
handleMessage
(
int
messageType
Nullable
Object
message
)
throws
ExoPlaybackException
{
if
(
messageType
=
=
C
.
MSG_SET_CAMERA_MOTION_LISTENER
)
{
listener
=
(
CameraMotionListener
)
message
;
}
else
{
super
.
handleMessage
(
messageType
message
)
;
}
}
Override
protected
void
onStreamChanged
(
Format
[
]
formats
long
offsetUs
)
throws
ExoPlaybackException
{
this
.
offsetUs
=
offsetUs
;
}
Override
protected
void
onPositionReset
(
long
positionUs
boolean
joining
)
throws
ExoPlaybackException
{
resetListener
(
)
;
}
Override
protected
void
onDisabled
(
)
{
resetListener
(
)
;
}
Override
public
void
render
(
long
positionUs
long
elapsedRealtimeUs
)
throws
ExoPlaybackException
{
while
(
!
hasReadStreamToEnd
(
)
&
&
lastTimestampUs
<
positionUs
+
SAMPLE_WINDOW_DURATION_US
)
{
buffer
.
clear
(
)
;
FormatHolder
formatHolder
=
getFormatHolder
(
)
;
int
result
=
readSource
(
formatHolder
buffer
false
)
;
if
(
result
!
=
C
.
RESULT_BUFFER_READ
|
|
buffer
.
isEndOfStream
(
)
)
{
return
;
}
buffer
.
flip
(
)
;
lastTimestampUs
=
buffer
.
timeUs
;
if
(
listener
!
=
null
)
{
float
[
]
rotation
=
parseMetadata
(
Util
.
castNonNull
(
buffer
.
data
)
)
;
if
(
rotation
!
=
null
)
{
Util
.
castNonNull
(
listener
)
.
onCameraMotion
(
lastTimestampUs
-
offsetUs
rotation
)
;
}
}
}
}
Override
public
boolean
isEnded
(
)
{
return
hasReadStreamToEnd
(
)
;
}
Override
public
boolean
isReady
(
)
{
return
true
;
}
private
Nullable
float
[
]
parseMetadata
(
ByteBuffer
data
)
{
if
(
data
.
remaining
(
)
!
=
16
)
{
return
null
;
}
scratch
.
reset
(
data
.
array
(
)
data
.
limit
(
)
)
;
scratch
.
setPosition
(
data
.
arrayOffset
(
)
+
4
)
;
float
[
]
result
=
new
float
[
3
]
;
for
(
int
i
=
0
;
i
<
3
;
i
+
+
)
{
result
[
i
]
=
Float
.
intBitsToFloat
(
scratch
.
readLittleEndianInt
(
)
)
;
}
return
result
;
}
private
void
resetListener
(
)
{
lastTimestampUs
=
0
;
if
(
listener
!
=
null
)
{
listener
.
onCameraMotionReset
(
)
;
}
}
}
