package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
analytics
;
import
android
.
view
.
Surface
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ExoPlaybackException
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
PlaybackParameters
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Player
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Player
.
PlaybackSuppressionReason
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
.
Period
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
.
Window
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
analytics
.
AnalyticsListener
.
EventTime
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
.
AudioAttributes
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
.
AudioListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
.
AudioRendererEventListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
decoder
.
DecoderCounters
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
.
DefaultDrmSessionEventListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
Metadata
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
MetadataOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
.
MediaPeriodId
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSourceEventListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
TrackGroupArray
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelectionArray
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
BandwidthMeter
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Clock
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
video
.
VideoListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
video
.
VideoRendererEventListener
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Set
;
import
java
.
util
.
concurrent
.
CopyOnWriteArraySet
;
import
org
.
checkerframework
.
checker
.
nullness
.
qual
.
MonotonicNonNull
;
import
org
.
checkerframework
.
checker
.
nullness
.
qual
.
RequiresNonNull
;
public
class
AnalyticsCollector
implements
Player
.
EventListener
MetadataOutput
AudioRendererEventListener
VideoRendererEventListener
MediaSourceEventListener
BandwidthMeter
.
EventListener
DefaultDrmSessionEventListener
VideoListener
AudioListener
{
private
final
CopyOnWriteArraySet
<
AnalyticsListener
>
listeners
;
private
final
Clock
clock
;
private
final
Window
window
;
private
final
MediaPeriodQueueTracker
mediaPeriodQueueTracker
;
private
MonotonicNonNull
Player
player
;
public
AnalyticsCollector
(
Clock
clock
)
{
this
.
clock
=
Assertions
.
checkNotNull
(
clock
)
;
listeners
=
new
CopyOnWriteArraySet
<
>
(
)
;
mediaPeriodQueueTracker
=
new
MediaPeriodQueueTracker
(
)
;
window
=
new
Window
(
)
;
}
public
void
addListener
(
AnalyticsListener
listener
)
{
listeners
.
add
(
listener
)
;
}
public
void
removeListener
(
AnalyticsListener
listener
)
{
listeners
.
remove
(
listener
)
;
}
public
void
setPlayer
(
Player
player
)
{
Assertions
.
checkState
(
this
.
player
=
=
null
|
|
mediaPeriodQueueTracker
.
mediaPeriodInfoQueue
.
isEmpty
(
)
)
;
this
.
player
=
Assertions
.
checkNotNull
(
player
)
;
}
public
final
void
notifySeekStarted
(
)
{
if
(
!
mediaPeriodQueueTracker
.
isSeeking
(
)
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
mediaPeriodQueueTracker
.
onSeekStarted
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onSeekStarted
(
eventTime
)
;
}
}
}
public
final
void
resetForNewMediaSource
(
)
{
List
<
MediaPeriodInfo
>
mediaPeriodInfos
=
new
ArrayList
<
>
(
mediaPeriodQueueTracker
.
mediaPeriodInfoQueue
)
;
for
(
MediaPeriodInfo
mediaPeriodInfo
:
mediaPeriodInfos
)
{
onMediaPeriodReleased
(
mediaPeriodInfo
.
windowIndex
mediaPeriodInfo
.
mediaPeriodId
)
;
}
}
Override
public
final
void
onMetadata
(
Metadata
metadata
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onMetadata
(
eventTime
metadata
)
;
}
}
Override
public
final
void
onAudioEnabled
(
DecoderCounters
counters
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDecoderEnabled
(
eventTime
C
.
TRACK_TYPE_AUDIO
counters
)
;
}
}
Override
public
final
void
onAudioDecoderInitialized
(
String
decoderName
long
initializedTimestampMs
long
initializationDurationMs
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDecoderInitialized
(
eventTime
C
.
TRACK_TYPE_AUDIO
decoderName
initializationDurationMs
)
;
}
}
Override
public
final
void
onAudioInputFormatChanged
(
Format
format
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDecoderInputFormatChanged
(
eventTime
C
.
TRACK_TYPE_AUDIO
format
)
;
}
}
Override
public
final
void
onAudioSinkUnderrun
(
int
bufferSize
long
bufferSizeMs
long
elapsedSinceLastFeedMs
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onAudioUnderrun
(
eventTime
bufferSize
bufferSizeMs
elapsedSinceLastFeedMs
)
;
}
}
Override
public
final
void
onAudioDisabled
(
DecoderCounters
counters
)
{
EventTime
eventTime
=
generateLastReportedPlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDecoderDisabled
(
eventTime
C
.
TRACK_TYPE_AUDIO
counters
)
;
}
}
Override
public
final
void
onAudioSessionId
(
int
audioSessionId
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onAudioSessionId
(
eventTime
audioSessionId
)
;
}
}
Override
public
void
onAudioAttributesChanged
(
AudioAttributes
audioAttributes
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onAudioAttributesChanged
(
eventTime
audioAttributes
)
;
}
}
Override
public
void
onVolumeChanged
(
float
audioVolume
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onVolumeChanged
(
eventTime
audioVolume
)
;
}
}
Override
public
final
void
onVideoEnabled
(
DecoderCounters
counters
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDecoderEnabled
(
eventTime
C
.
TRACK_TYPE_VIDEO
counters
)
;
}
}
Override
public
final
void
onVideoDecoderInitialized
(
String
decoderName
long
initializedTimestampMs
long
initializationDurationMs
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDecoderInitialized
(
eventTime
C
.
TRACK_TYPE_VIDEO
decoderName
initializationDurationMs
)
;
}
}
Override
public
final
void
onVideoInputFormatChanged
(
Format
format
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDecoderInputFormatChanged
(
eventTime
C
.
TRACK_TYPE_VIDEO
format
)
;
}
}
Override
public
final
void
onDroppedFrames
(
int
count
long
elapsedMs
)
{
EventTime
eventTime
=
generateLastReportedPlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDroppedVideoFrames
(
eventTime
count
elapsedMs
)
;
}
}
Override
public
final
void
onVideoDisabled
(
DecoderCounters
counters
)
{
EventTime
eventTime
=
generateLastReportedPlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDecoderDisabled
(
eventTime
C
.
TRACK_TYPE_VIDEO
counters
)
;
}
}
Override
public
final
void
onRenderedFirstFrame
(
Nullable
Surface
surface
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onRenderedFirstFrame
(
eventTime
surface
)
;
}
}
Override
public
final
void
onRenderedFirstFrame
(
)
{
}
Override
public
final
void
onVideoSizeChanged
(
int
width
int
height
int
unappliedRotationDegrees
float
pixelWidthHeightRatio
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onVideoSizeChanged
(
eventTime
width
height
unappliedRotationDegrees
pixelWidthHeightRatio
)
;
}
}
Override
public
void
onSurfaceSizeChanged
(
int
width
int
height
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onSurfaceSizeChanged
(
eventTime
width
height
)
;
}
}
Override
public
final
void
onMediaPeriodCreated
(
int
windowIndex
MediaPeriodId
mediaPeriodId
)
{
mediaPeriodQueueTracker
.
onMediaPeriodCreated
(
windowIndex
mediaPeriodId
)
;
EventTime
eventTime
=
generateMediaPeriodEventTime
(
windowIndex
mediaPeriodId
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onMediaPeriodCreated
(
eventTime
)
;
}
}
Override
public
final
void
onMediaPeriodReleased
(
int
windowIndex
MediaPeriodId
mediaPeriodId
)
{
EventTime
eventTime
=
generateMediaPeriodEventTime
(
windowIndex
mediaPeriodId
)
;
if
(
mediaPeriodQueueTracker
.
onMediaPeriodReleased
(
mediaPeriodId
)
)
{
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onMediaPeriodReleased
(
eventTime
)
;
}
}
}
Override
public
final
void
onLoadStarted
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
)
{
EventTime
eventTime
=
generateMediaPeriodEventTime
(
windowIndex
mediaPeriodId
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onLoadStarted
(
eventTime
loadEventInfo
mediaLoadData
)
;
}
}
Override
public
final
void
onLoadCompleted
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
)
{
EventTime
eventTime
=
generateMediaPeriodEventTime
(
windowIndex
mediaPeriodId
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onLoadCompleted
(
eventTime
loadEventInfo
mediaLoadData
)
;
}
}
Override
public
final
void
onLoadCanceled
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
)
{
EventTime
eventTime
=
generateMediaPeriodEventTime
(
windowIndex
mediaPeriodId
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onLoadCanceled
(
eventTime
loadEventInfo
mediaLoadData
)
;
}
}
Override
public
final
void
onLoadError
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
LoadEventInfo
loadEventInfo
MediaLoadData
mediaLoadData
IOException
error
boolean
wasCanceled
)
{
EventTime
eventTime
=
generateMediaPeriodEventTime
(
windowIndex
mediaPeriodId
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onLoadError
(
eventTime
loadEventInfo
mediaLoadData
error
wasCanceled
)
;
}
}
Override
public
final
void
onReadingStarted
(
int
windowIndex
MediaPeriodId
mediaPeriodId
)
{
mediaPeriodQueueTracker
.
onReadingStarted
(
mediaPeriodId
)
;
EventTime
eventTime
=
generateMediaPeriodEventTime
(
windowIndex
mediaPeriodId
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onReadingStarted
(
eventTime
)
;
}
}
Override
public
final
void
onUpstreamDiscarded
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
MediaLoadData
mediaLoadData
)
{
EventTime
eventTime
=
generateMediaPeriodEventTime
(
windowIndex
mediaPeriodId
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onUpstreamDiscarded
(
eventTime
mediaLoadData
)
;
}
}
Override
public
final
void
onDownstreamFormatChanged
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
MediaLoadData
mediaLoadData
)
{
EventTime
eventTime
=
generateMediaPeriodEventTime
(
windowIndex
mediaPeriodId
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDownstreamFormatChanged
(
eventTime
mediaLoadData
)
;
}
}
Override
public
final
void
onTimelineChanged
(
Timeline
timeline
Player
.
TimelineChangeReason
int
reason
)
{
mediaPeriodQueueTracker
.
onTimelineChanged
(
timeline
)
;
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onTimelineChanged
(
eventTime
reason
)
;
}
}
Override
public
final
void
onTracksChanged
(
TrackGroupArray
trackGroups
TrackSelectionArray
trackSelections
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onTracksChanged
(
eventTime
trackGroups
trackSelections
)
;
}
}
Override
public
final
void
onLoadingChanged
(
boolean
isLoading
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onLoadingChanged
(
eventTime
isLoading
)
;
}
}
Override
public
final
void
onPlayerStateChanged
(
boolean
playWhenReady
Player
.
State
int
playbackState
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onPlayerStateChanged
(
eventTime
playWhenReady
playbackState
)
;
}
}
Override
public
void
onPlaybackSuppressionReasonChanged
(
PlaybackSuppressionReason
int
playbackSuppressionReason
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onPlaybackSuppressionReasonChanged
(
eventTime
playbackSuppressionReason
)
;
}
}
Override
public
void
onIsPlayingChanged
(
boolean
isPlaying
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onIsPlayingChanged
(
eventTime
isPlaying
)
;
}
}
Override
public
final
void
onRepeatModeChanged
(
Player
.
RepeatMode
int
repeatMode
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onRepeatModeChanged
(
eventTime
repeatMode
)
;
}
}
Override
public
final
void
onShuffleModeEnabledChanged
(
boolean
shuffleModeEnabled
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onShuffleModeChanged
(
eventTime
shuffleModeEnabled
)
;
}
}
Override
public
final
void
onPlayerError
(
ExoPlaybackException
error
)
{
EventTime
eventTime
=
generateLastReportedPlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onPlayerError
(
eventTime
error
)
;
}
}
Override
public
final
void
onPositionDiscontinuity
(
Player
.
DiscontinuityReason
int
reason
)
{
mediaPeriodQueueTracker
.
onPositionDiscontinuity
(
reason
)
;
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onPositionDiscontinuity
(
eventTime
reason
)
;
}
}
Override
public
final
void
onPlaybackParametersChanged
(
PlaybackParameters
playbackParameters
)
{
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onPlaybackParametersChanged
(
eventTime
playbackParameters
)
;
}
}
Override
public
final
void
onSeekProcessed
(
)
{
if
(
mediaPeriodQueueTracker
.
isSeeking
(
)
)
{
mediaPeriodQueueTracker
.
onSeekProcessed
(
)
;
EventTime
eventTime
=
generatePlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onSeekProcessed
(
eventTime
)
;
}
}
}
Override
public
final
void
onBandwidthSample
(
int
elapsedMs
long
bytes
long
bitrate
)
{
EventTime
eventTime
=
generateLoadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onBandwidthEstimate
(
eventTime
elapsedMs
bytes
bitrate
)
;
}
}
Override
public
final
void
onDrmSessionAcquired
(
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDrmSessionAcquired
(
eventTime
)
;
}
}
Override
public
final
void
onDrmKeysLoaded
(
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDrmKeysLoaded
(
eventTime
)
;
}
}
Override
public
final
void
onDrmSessionManagerError
(
Exception
error
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDrmSessionManagerError
(
eventTime
error
)
;
}
}
Override
public
final
void
onDrmKeysRestored
(
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDrmKeysRestored
(
eventTime
)
;
}
}
Override
public
final
void
onDrmKeysRemoved
(
)
{
EventTime
eventTime
=
generateReadingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDrmKeysRemoved
(
eventTime
)
;
}
}
Override
public
final
void
onDrmSessionReleased
(
)
{
EventTime
eventTime
=
generateLastReportedPlayingMediaPeriodEventTime
(
)
;
for
(
AnalyticsListener
listener
:
listeners
)
{
listener
.
onDrmSessionReleased
(
eventTime
)
;
}
}
protected
Set
<
AnalyticsListener
>
getListeners
(
)
{
return
Collections
.
unmodifiableSet
(
listeners
)
;
}
RequiresNonNull
(
"
player
"
)
protected
EventTime
generateEventTime
(
Timeline
timeline
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
)
{
if
(
timeline
.
isEmpty
(
)
)
{
mediaPeriodId
=
null
;
}
long
realtimeMs
=
clock
.
elapsedRealtime
(
)
;
long
eventPositionMs
;
boolean
isInCurrentWindow
=
timeline
=
=
player
.
getCurrentTimeline
(
)
&
&
windowIndex
=
=
player
.
getCurrentWindowIndex
(
)
;
if
(
mediaPeriodId
!
=
null
&
&
mediaPeriodId
.
isAd
(
)
)
{
boolean
isCurrentAd
=
isInCurrentWindow
&
&
player
.
getCurrentAdGroupIndex
(
)
=
=
mediaPeriodId
.
adGroupIndex
&
&
player
.
getCurrentAdIndexInAdGroup
(
)
=
=
mediaPeriodId
.
adIndexInAdGroup
;
eventPositionMs
=
isCurrentAd
?
player
.
getCurrentPosition
(
)
:
0
;
}
else
if
(
isInCurrentWindow
)
{
eventPositionMs
=
player
.
getContentPosition
(
)
;
}
else
{
eventPositionMs
=
timeline
.
isEmpty
(
)
?
0
:
timeline
.
getWindow
(
windowIndex
window
)
.
getDefaultPositionMs
(
)
;
}
return
new
EventTime
(
realtimeMs
timeline
windowIndex
mediaPeriodId
eventPositionMs
player
.
getCurrentPosition
(
)
player
.
getTotalBufferedDuration
(
)
)
;
}
private
EventTime
generateEventTime
(
Nullable
MediaPeriodInfo
mediaPeriodInfo
)
{
Assertions
.
checkNotNull
(
player
)
;
if
(
mediaPeriodInfo
=
=
null
)
{
int
windowIndex
=
player
.
getCurrentWindowIndex
(
)
;
mediaPeriodInfo
=
mediaPeriodQueueTracker
.
tryResolveWindowIndex
(
windowIndex
)
;
if
(
mediaPeriodInfo
=
=
null
)
{
Timeline
timeline
=
player
.
getCurrentTimeline
(
)
;
boolean
windowIsInTimeline
=
windowIndex
<
timeline
.
getWindowCount
(
)
;
return
generateEventTime
(
windowIsInTimeline
?
timeline
:
Timeline
.
EMPTY
windowIndex
null
)
;
}
}
return
generateEventTime
(
mediaPeriodInfo
.
timeline
mediaPeriodInfo
.
windowIndex
mediaPeriodInfo
.
mediaPeriodId
)
;
}
private
EventTime
generateLastReportedPlayingMediaPeriodEventTime
(
)
{
return
generateEventTime
(
mediaPeriodQueueTracker
.
getLastReportedPlayingMediaPeriod
(
)
)
;
}
private
EventTime
generatePlayingMediaPeriodEventTime
(
)
{
return
generateEventTime
(
mediaPeriodQueueTracker
.
getPlayingMediaPeriod
(
)
)
;
}
private
EventTime
generateReadingMediaPeriodEventTime
(
)
{
return
generateEventTime
(
mediaPeriodQueueTracker
.
getReadingMediaPeriod
(
)
)
;
}
private
EventTime
generateLoadingMediaPeriodEventTime
(
)
{
return
generateEventTime
(
mediaPeriodQueueTracker
.
getLoadingMediaPeriod
(
)
)
;
}
private
EventTime
generateMediaPeriodEventTime
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
)
{
Assertions
.
checkNotNull
(
player
)
;
if
(
mediaPeriodId
!
=
null
)
{
MediaPeriodInfo
mediaPeriodInfo
=
mediaPeriodQueueTracker
.
getMediaPeriodInfo
(
mediaPeriodId
)
;
return
mediaPeriodInfo
!
=
null
?
generateEventTime
(
mediaPeriodInfo
)
:
generateEventTime
(
Timeline
.
EMPTY
windowIndex
mediaPeriodId
)
;
}
Timeline
timeline
=
player
.
getCurrentTimeline
(
)
;
boolean
windowIsInTimeline
=
windowIndex
<
timeline
.
getWindowCount
(
)
;
return
generateEventTime
(
windowIsInTimeline
?
timeline
:
Timeline
.
EMPTY
windowIndex
null
)
;
}
private
static
final
class
MediaPeriodQueueTracker
{
private
final
ArrayList
<
MediaPeriodInfo
>
mediaPeriodInfoQueue
;
private
final
HashMap
<
MediaPeriodId
MediaPeriodInfo
>
mediaPeriodIdToInfo
;
private
final
Period
period
;
Nullable
private
MediaPeriodInfo
lastPlayingMediaPeriod
;
Nullable
private
MediaPeriodInfo
lastReportedPlayingMediaPeriod
;
Nullable
private
MediaPeriodInfo
readingMediaPeriod
;
private
Timeline
timeline
;
private
boolean
isSeeking
;
public
MediaPeriodQueueTracker
(
)
{
mediaPeriodInfoQueue
=
new
ArrayList
<
>
(
)
;
mediaPeriodIdToInfo
=
new
HashMap
<
>
(
)
;
period
=
new
Period
(
)
;
timeline
=
Timeline
.
EMPTY
;
}
Nullable
public
MediaPeriodInfo
getPlayingMediaPeriod
(
)
{
return
mediaPeriodInfoQueue
.
isEmpty
(
)
|
|
timeline
.
isEmpty
(
)
|
|
isSeeking
?
null
:
mediaPeriodInfoQueue
.
get
(
0
)
;
}
Nullable
public
MediaPeriodInfo
getLastReportedPlayingMediaPeriod
(
)
{
return
lastReportedPlayingMediaPeriod
;
}
Nullable
public
MediaPeriodInfo
getReadingMediaPeriod
(
)
{
return
readingMediaPeriod
;
}
Nullable
public
MediaPeriodInfo
getLoadingMediaPeriod
(
)
{
return
mediaPeriodInfoQueue
.
isEmpty
(
)
?
null
:
mediaPeriodInfoQueue
.
get
(
mediaPeriodInfoQueue
.
size
(
)
-
1
)
;
}
Nullable
public
MediaPeriodInfo
getMediaPeriodInfo
(
MediaPeriodId
mediaPeriodId
)
{
return
mediaPeriodIdToInfo
.
get
(
mediaPeriodId
)
;
}
public
boolean
isSeeking
(
)
{
return
isSeeking
;
}
Nullable
public
MediaPeriodInfo
tryResolveWindowIndex
(
int
windowIndex
)
{
MediaPeriodInfo
match
=
null
;
for
(
int
i
=
0
;
i
<
mediaPeriodInfoQueue
.
size
(
)
;
i
+
+
)
{
MediaPeriodInfo
info
=
mediaPeriodInfoQueue
.
get
(
i
)
;
int
periodIndex
=
timeline
.
getIndexOfPeriod
(
info
.
mediaPeriodId
.
periodUid
)
;
if
(
periodIndex
!
=
C
.
INDEX_UNSET
&
&
timeline
.
getPeriod
(
periodIndex
period
)
.
windowIndex
=
=
windowIndex
)
{
if
(
match
!
=
null
)
{
return
null
;
}
match
=
info
;
}
}
return
match
;
}
public
void
onPositionDiscontinuity
(
Player
.
DiscontinuityReason
int
reason
)
{
lastReportedPlayingMediaPeriod
=
lastPlayingMediaPeriod
;
}
public
void
onTimelineChanged
(
Timeline
timeline
)
{
for
(
int
i
=
0
;
i
<
mediaPeriodInfoQueue
.
size
(
)
;
i
+
+
)
{
MediaPeriodInfo
newMediaPeriodInfo
=
updateMediaPeriodInfoToNewTimeline
(
mediaPeriodInfoQueue
.
get
(
i
)
timeline
)
;
mediaPeriodInfoQueue
.
set
(
i
newMediaPeriodInfo
)
;
mediaPeriodIdToInfo
.
put
(
newMediaPeriodInfo
.
mediaPeriodId
newMediaPeriodInfo
)
;
}
if
(
readingMediaPeriod
!
=
null
)
{
readingMediaPeriod
=
updateMediaPeriodInfoToNewTimeline
(
readingMediaPeriod
timeline
)
;
}
this
.
timeline
=
timeline
;
lastReportedPlayingMediaPeriod
=
lastPlayingMediaPeriod
;
}
public
void
onSeekStarted
(
)
{
isSeeking
=
true
;
}
public
void
onSeekProcessed
(
)
{
isSeeking
=
false
;
lastReportedPlayingMediaPeriod
=
lastPlayingMediaPeriod
;
}
public
void
onMediaPeriodCreated
(
int
windowIndex
MediaPeriodId
mediaPeriodId
)
{
int
periodIndex
=
timeline
.
getIndexOfPeriod
(
mediaPeriodId
.
periodUid
)
;
boolean
isInTimeline
=
periodIndex
!
=
C
.
INDEX_UNSET
;
MediaPeriodInfo
mediaPeriodInfo
=
new
MediaPeriodInfo
(
mediaPeriodId
isInTimeline
?
timeline
:
Timeline
.
EMPTY
isInTimeline
?
timeline
.
getPeriod
(
periodIndex
period
)
.
windowIndex
:
windowIndex
)
;
mediaPeriodInfoQueue
.
add
(
mediaPeriodInfo
)
;
mediaPeriodIdToInfo
.
put
(
mediaPeriodId
mediaPeriodInfo
)
;
lastPlayingMediaPeriod
=
mediaPeriodInfoQueue
.
get
(
0
)
;
if
(
mediaPeriodInfoQueue
.
size
(
)
=
=
1
&
&
!
timeline
.
isEmpty
(
)
)
{
lastReportedPlayingMediaPeriod
=
lastPlayingMediaPeriod
;
}
}
public
boolean
onMediaPeriodReleased
(
MediaPeriodId
mediaPeriodId
)
{
MediaPeriodInfo
mediaPeriodInfo
=
mediaPeriodIdToInfo
.
remove
(
mediaPeriodId
)
;
if
(
mediaPeriodInfo
=
=
null
)
{
return
false
;
}
mediaPeriodInfoQueue
.
remove
(
mediaPeriodInfo
)
;
if
(
readingMediaPeriod
!
=
null
&
&
mediaPeriodId
.
equals
(
readingMediaPeriod
.
mediaPeriodId
)
)
{
readingMediaPeriod
=
mediaPeriodInfoQueue
.
isEmpty
(
)
?
null
:
mediaPeriodInfoQueue
.
get
(
0
)
;
}
if
(
!
mediaPeriodInfoQueue
.
isEmpty
(
)
)
{
lastPlayingMediaPeriod
=
mediaPeriodInfoQueue
.
get
(
0
)
;
}
return
true
;
}
public
void
onReadingStarted
(
MediaPeriodId
mediaPeriodId
)
{
readingMediaPeriod
=
mediaPeriodIdToInfo
.
get
(
mediaPeriodId
)
;
}
private
MediaPeriodInfo
updateMediaPeriodInfoToNewTimeline
(
MediaPeriodInfo
info
Timeline
newTimeline
)
{
int
newPeriodIndex
=
newTimeline
.
getIndexOfPeriod
(
info
.
mediaPeriodId
.
periodUid
)
;
if
(
newPeriodIndex
=
=
C
.
INDEX_UNSET
)
{
return
info
;
}
int
newWindowIndex
=
newTimeline
.
getPeriod
(
newPeriodIndex
period
)
.
windowIndex
;
return
new
MediaPeriodInfo
(
info
.
mediaPeriodId
newTimeline
newWindowIndex
)
;
}
}
private
static
final
class
MediaPeriodInfo
{
public
final
MediaPeriodId
mediaPeriodId
;
public
final
Timeline
timeline
;
public
final
int
windowIndex
;
public
MediaPeriodInfo
(
MediaPeriodId
mediaPeriodId
Timeline
timeline
int
windowIndex
)
{
this
.
mediaPeriodId
=
mediaPeriodId
;
this
.
timeline
=
timeline
;
this
.
windowIndex
=
windowIndex
;
}
}
}
