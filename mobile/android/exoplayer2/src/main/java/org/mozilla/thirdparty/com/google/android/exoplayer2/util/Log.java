package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
;
import
android
.
text
.
TextUtils
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
lang
.
annotation
.
Documented
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
net
.
UnknownHostException
;
public
final
class
Log
{
Documented
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
LOG_LEVEL_ALL
LOG_LEVEL_INFO
LOG_LEVEL_WARNING
LOG_LEVEL_ERROR
LOG_LEVEL_OFF
}
)
interface
LogLevel
{
}
public
static
final
int
LOG_LEVEL_ALL
=
0
;
public
static
final
int
LOG_LEVEL_INFO
=
1
;
public
static
final
int
LOG_LEVEL_WARNING
=
2
;
public
static
final
int
LOG_LEVEL_ERROR
=
3
;
public
static
final
int
LOG_LEVEL_OFF
=
Integer
.
MAX_VALUE
;
private
static
int
logLevel
=
LOG_LEVEL_ALL
;
private
static
boolean
logStackTraces
=
true
;
private
Log
(
)
{
}
public
static
LogLevel
int
getLogLevel
(
)
{
return
logLevel
;
}
public
boolean
getLogStackTraces
(
)
{
return
logStackTraces
;
}
public
static
void
setLogLevel
(
LogLevel
int
logLevel
)
{
Log
.
logLevel
=
logLevel
;
}
public
static
void
setLogStackTraces
(
boolean
logStackTraces
)
{
Log
.
logStackTraces
=
logStackTraces
;
}
public
static
void
d
(
String
tag
String
message
)
{
if
(
logLevel
=
=
LOG_LEVEL_ALL
)
{
android
.
util
.
Log
.
d
(
tag
message
)
;
}
}
public
static
void
d
(
String
tag
String
message
Nullable
Throwable
throwable
)
{
d
(
tag
appendThrowableString
(
message
throwable
)
)
;
}
public
static
void
i
(
String
tag
String
message
)
{
if
(
logLevel
<
=
LOG_LEVEL_INFO
)
{
android
.
util
.
Log
.
i
(
tag
message
)
;
}
}
public
static
void
i
(
String
tag
String
message
Nullable
Throwable
throwable
)
{
i
(
tag
appendThrowableString
(
message
throwable
)
)
;
}
public
static
void
w
(
String
tag
String
message
)
{
if
(
logLevel
<
=
LOG_LEVEL_WARNING
)
{
android
.
util
.
Log
.
w
(
tag
message
)
;
}
}
public
static
void
w
(
String
tag
String
message
Nullable
Throwable
throwable
)
{
w
(
tag
appendThrowableString
(
message
throwable
)
)
;
}
public
static
void
e
(
String
tag
String
message
)
{
if
(
logLevel
<
=
LOG_LEVEL_ERROR
)
{
android
.
util
.
Log
.
e
(
tag
message
)
;
}
}
public
static
void
e
(
String
tag
String
message
Nullable
Throwable
throwable
)
{
e
(
tag
appendThrowableString
(
message
throwable
)
)
;
}
Nullable
public
static
String
getThrowableString
(
Nullable
Throwable
throwable
)
{
if
(
throwable
=
=
null
)
{
return
null
;
}
else
if
(
isCausedByUnknownHostException
(
throwable
)
)
{
return
"
UnknownHostException
(
no
network
)
"
;
}
else
if
(
!
logStackTraces
)
{
return
throwable
.
getMessage
(
)
;
}
else
{
return
android
.
util
.
Log
.
getStackTraceString
(
throwable
)
.
trim
(
)
.
replace
(
"
\
t
"
"
"
)
;
}
}
private
static
String
appendThrowableString
(
String
message
Nullable
Throwable
throwable
)
{
Nullable
String
throwableString
=
getThrowableString
(
throwable
)
;
if
(
!
TextUtils
.
isEmpty
(
throwableString
)
)
{
message
+
=
"
\
n
"
+
throwableString
.
replace
(
"
\
n
"
"
\
n
"
)
+
'
\
n
'
;
}
return
message
;
}
private
static
boolean
isCausedByUnknownHostException
(
Nullable
Throwable
throwable
)
{
while
(
throwable
!
=
null
)
{
if
(
throwable
instanceof
UnknownHostException
)
{
return
true
;
}
throwable
=
throwable
.
getCause
(
)
;
}
return
false
;
}
}
