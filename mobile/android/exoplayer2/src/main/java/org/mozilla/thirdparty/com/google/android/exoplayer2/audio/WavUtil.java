package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
public
final
class
WavUtil
{
public
static
final
int
RIFF_FOURCC
=
0x52494646
;
public
static
final
int
WAVE_FOURCC
=
0x57415645
;
public
static
final
int
FMT_FOURCC
=
0x666d7420
;
public
static
final
int
DATA_FOURCC
=
0x64617461
;
public
static
final
int
TYPE_PCM
=
0x0001
;
public
static
final
int
TYPE_FLOAT
=
0x0003
;
public
static
final
int
TYPE_ALAW
=
0x0006
;
public
static
final
int
TYPE_MLAW
=
0x0007
;
public
static
final
int
TYPE_IMA_ADPCM
=
0x0011
;
public
static
final
int
TYPE_WAVE_FORMAT_EXTENSIBLE
=
0xFFFE
;
public
static
int
getTypeForPcmEncoding
(
C
.
PcmEncoding
int
pcmEncoding
)
{
switch
(
pcmEncoding
)
{
case
C
.
ENCODING_PCM_8BIT
:
case
C
.
ENCODING_PCM_16BIT
:
case
C
.
ENCODING_PCM_24BIT
:
case
C
.
ENCODING_PCM_32BIT
:
return
TYPE_PCM
;
case
C
.
ENCODING_PCM_FLOAT
:
return
TYPE_FLOAT
;
case
C
.
ENCODING_PCM_16BIT_BIG_ENDIAN
:
case
C
.
ENCODING_INVALID
:
case
Format
.
NO_VALUE
:
default
:
throw
new
IllegalArgumentException
(
)
;
}
}
public
static
C
.
PcmEncoding
int
getPcmEncodingForType
(
int
type
int
bitsPerSample
)
{
switch
(
type
)
{
case
TYPE_PCM
:
case
TYPE_WAVE_FORMAT_EXTENSIBLE
:
return
Util
.
getPcmEncoding
(
bitsPerSample
)
;
case
TYPE_FLOAT
:
return
bitsPerSample
=
=
32
?
C
.
ENCODING_PCM_FLOAT
:
C
.
ENCODING_INVALID
;
default
:
return
C
.
ENCODING_INVALID
;
}
}
private
WavUtil
(
)
{
}
}
