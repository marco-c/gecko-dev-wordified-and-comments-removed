package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
offline
;
import
android
.
net
.
Uri
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
.
DownloaderConstructorHelper
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
.
SegmentDownloader
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
.
StreamKey
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
playlist
.
HlsMasterPlaylist
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
playlist
.
HlsMediaPlaylist
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
playlist
.
HlsPlaylist
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
hls
.
playlist
.
HlsPlaylistParser
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSpec
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
ParsingLoadable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
UriUtil
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
List
;
public
final
class
HlsDownloader
extends
SegmentDownloader
<
HlsPlaylist
>
{
public
HlsDownloader
(
Uri
playlistUri
List
<
StreamKey
>
streamKeys
DownloaderConstructorHelper
constructorHelper
)
{
super
(
playlistUri
streamKeys
constructorHelper
)
;
}
Override
protected
HlsPlaylist
getManifest
(
DataSource
dataSource
DataSpec
dataSpec
)
throws
IOException
{
return
loadManifest
(
dataSource
dataSpec
)
;
}
Override
protected
List
<
Segment
>
getSegments
(
DataSource
dataSource
HlsPlaylist
playlist
boolean
allowIncompleteList
)
throws
IOException
{
ArrayList
<
DataSpec
>
mediaPlaylistDataSpecs
=
new
ArrayList
<
>
(
)
;
if
(
playlist
instanceof
HlsMasterPlaylist
)
{
HlsMasterPlaylist
masterPlaylist
=
(
HlsMasterPlaylist
)
playlist
;
addMediaPlaylistDataSpecs
(
masterPlaylist
.
mediaPlaylistUrls
mediaPlaylistDataSpecs
)
;
}
else
{
mediaPlaylistDataSpecs
.
add
(
SegmentDownloader
.
getCompressibleDataSpec
(
Uri
.
parse
(
playlist
.
baseUri
)
)
)
;
}
ArrayList
<
Segment
>
segments
=
new
ArrayList
<
>
(
)
;
HashSet
<
Uri
>
seenEncryptionKeyUris
=
new
HashSet
<
>
(
)
;
for
(
DataSpec
mediaPlaylistDataSpec
:
mediaPlaylistDataSpecs
)
{
segments
.
add
(
new
Segment
(
0
mediaPlaylistDataSpec
)
)
;
HlsMediaPlaylist
mediaPlaylist
;
try
{
mediaPlaylist
=
(
HlsMediaPlaylist
)
loadManifest
(
dataSource
mediaPlaylistDataSpec
)
;
}
catch
(
IOException
e
)
{
if
(
!
allowIncompleteList
)
{
throw
e
;
}
continue
;
}
HlsMediaPlaylist
.
Segment
lastInitSegment
=
null
;
List
<
HlsMediaPlaylist
.
Segment
>
hlsSegments
=
mediaPlaylist
.
segments
;
for
(
int
i
=
0
;
i
<
hlsSegments
.
size
(
)
;
i
+
+
)
{
HlsMediaPlaylist
.
Segment
segment
=
hlsSegments
.
get
(
i
)
;
HlsMediaPlaylist
.
Segment
initSegment
=
segment
.
initializationSegment
;
if
(
initSegment
!
=
null
&
&
initSegment
!
=
lastInitSegment
)
{
lastInitSegment
=
initSegment
;
addSegment
(
mediaPlaylist
initSegment
seenEncryptionKeyUris
segments
)
;
}
addSegment
(
mediaPlaylist
segment
seenEncryptionKeyUris
segments
)
;
}
}
return
segments
;
}
private
void
addMediaPlaylistDataSpecs
(
List
<
Uri
>
mediaPlaylistUrls
List
<
DataSpec
>
out
)
{
for
(
int
i
=
0
;
i
<
mediaPlaylistUrls
.
size
(
)
;
i
+
+
)
{
out
.
add
(
SegmentDownloader
.
getCompressibleDataSpec
(
mediaPlaylistUrls
.
get
(
i
)
)
)
;
}
}
private
static
HlsPlaylist
loadManifest
(
DataSource
dataSource
DataSpec
dataSpec
)
throws
IOException
{
return
ParsingLoadable
.
load
(
dataSource
new
HlsPlaylistParser
(
)
dataSpec
C
.
DATA_TYPE_MANIFEST
)
;
}
private
void
addSegment
(
HlsMediaPlaylist
mediaPlaylist
HlsMediaPlaylist
.
Segment
segment
HashSet
<
Uri
>
seenEncryptionKeyUris
ArrayList
<
Segment
>
out
)
{
String
baseUri
=
mediaPlaylist
.
baseUri
;
long
startTimeUs
=
mediaPlaylist
.
startTimeUs
+
segment
.
relativeStartTimeUs
;
if
(
segment
.
fullSegmentEncryptionKeyUri
!
=
null
)
{
Uri
keyUri
=
UriUtil
.
resolveToUri
(
baseUri
segment
.
fullSegmentEncryptionKeyUri
)
;
if
(
seenEncryptionKeyUris
.
add
(
keyUri
)
)
{
out
.
add
(
new
Segment
(
startTimeUs
SegmentDownloader
.
getCompressibleDataSpec
(
keyUri
)
)
)
;
}
}
Uri
segmentUri
=
UriUtil
.
resolveToUri
(
baseUri
segment
.
url
)
;
DataSpec
dataSpec
=
new
DataSpec
(
segmentUri
segment
.
byterangeOffset
segment
.
byterangeLength
null
)
;
out
.
add
(
new
Segment
(
startTimeUs
dataSpec
)
)
;
}
}
