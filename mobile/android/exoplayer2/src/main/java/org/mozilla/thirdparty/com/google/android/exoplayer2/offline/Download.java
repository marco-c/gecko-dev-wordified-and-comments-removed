package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
;
import
androidx
.
annotation
.
IntDef
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
lang
.
annotation
.
Documented
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
public
final
class
Download
{
Documented
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
STATE_QUEUED
STATE_STOPPED
STATE_DOWNLOADING
STATE_COMPLETED
STATE_FAILED
STATE_REMOVING
STATE_RESTARTING
}
)
public
interface
State
{
}
public
static
final
int
STATE_QUEUED
=
0
;
public
static
final
int
STATE_STOPPED
=
1
;
public
static
final
int
STATE_DOWNLOADING
=
2
;
public
static
final
int
STATE_COMPLETED
=
3
;
public
static
final
int
STATE_FAILED
=
4
;
public
static
final
int
STATE_REMOVING
=
5
;
public
static
final
int
STATE_RESTARTING
=
7
;
Documented
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
FAILURE_REASON_NONE
FAILURE_REASON_UNKNOWN
}
)
public
interface
FailureReason
{
}
public
static
final
int
FAILURE_REASON_NONE
=
0
;
public
static
final
int
FAILURE_REASON_UNKNOWN
=
1
;
public
static
final
int
STOP_REASON_NONE
=
0
;
public
final
DownloadRequest
request
;
State
public
final
int
state
;
public
final
long
startTimeMs
;
public
final
long
updateTimeMs
;
public
final
long
contentLength
;
public
final
int
stopReason
;
FailureReason
public
final
int
failureReason
;
final
DownloadProgress
progress
;
public
Download
(
DownloadRequest
request
State
int
state
long
startTimeMs
long
updateTimeMs
long
contentLength
int
stopReason
FailureReason
int
failureReason
)
{
this
(
request
state
startTimeMs
updateTimeMs
contentLength
stopReason
failureReason
new
DownloadProgress
(
)
)
;
}
public
Download
(
DownloadRequest
request
State
int
state
long
startTimeMs
long
updateTimeMs
long
contentLength
int
stopReason
FailureReason
int
failureReason
DownloadProgress
progress
)
{
Assertions
.
checkNotNull
(
progress
)
;
Assertions
.
checkArgument
(
(
failureReason
=
=
FAILURE_REASON_NONE
)
=
=
(
state
!
=
STATE_FAILED
)
)
;
if
(
stopReason
!
=
0
)
{
Assertions
.
checkArgument
(
state
!
=
STATE_DOWNLOADING
&
&
state
!
=
STATE_QUEUED
)
;
}
this
.
request
=
request
;
this
.
state
=
state
;
this
.
startTimeMs
=
startTimeMs
;
this
.
updateTimeMs
=
updateTimeMs
;
this
.
contentLength
=
contentLength
;
this
.
stopReason
=
stopReason
;
this
.
failureReason
=
failureReason
;
this
.
progress
=
progress
;
}
public
boolean
isTerminalState
(
)
{
return
state
=
=
STATE_COMPLETED
|
|
state
=
=
STATE_FAILED
;
}
public
long
getBytesDownloaded
(
)
{
return
progress
.
bytesDownloaded
;
}
public
float
getPercentDownloaded
(
)
{
return
progress
.
percentDownloaded
;
}
}
