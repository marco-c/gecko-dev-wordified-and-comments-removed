package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
;
import
android
.
content
.
BroadcastReceiver
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
IntentFilter
;
import
android
.
database
.
ContentObserver
;
import
android
.
media
.
AudioManager
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Handler
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
public
final
class
AudioCapabilitiesReceiver
{
public
interface
Listener
{
void
onAudioCapabilitiesChanged
(
AudioCapabilities
audioCapabilities
)
;
}
private
final
Context
context
;
private
final
Listener
listener
;
private
final
Handler
handler
;
Nullable
private
final
BroadcastReceiver
receiver
;
Nullable
private
final
ExternalSurroundSoundSettingObserver
externalSurroundSoundSettingObserver
;
Nullable
AudioCapabilities
audioCapabilities
;
private
boolean
registered
;
public
AudioCapabilitiesReceiver
(
Context
context
Listener
listener
)
{
context
=
context
.
getApplicationContext
(
)
;
this
.
context
=
context
;
this
.
listener
=
Assertions
.
checkNotNull
(
listener
)
;
handler
=
new
Handler
(
Util
.
getLooper
(
)
)
;
receiver
=
Util
.
SDK_INT
>
=
21
?
new
HdmiAudioPlugBroadcastReceiver
(
)
:
null
;
Uri
externalSurroundSoundUri
=
AudioCapabilities
.
getExternalSurroundSoundGlobalSettingUri
(
)
;
externalSurroundSoundSettingObserver
=
externalSurroundSoundUri
!
=
null
?
new
ExternalSurroundSoundSettingObserver
(
handler
context
.
getContentResolver
(
)
externalSurroundSoundUri
)
:
null
;
}
SuppressWarnings
(
"
InlinedApi
"
)
public
AudioCapabilities
register
(
)
{
if
(
registered
)
{
return
Assertions
.
checkNotNull
(
audioCapabilities
)
;
}
registered
=
true
;
if
(
externalSurroundSoundSettingObserver
!
=
null
)
{
externalSurroundSoundSettingObserver
.
register
(
)
;
}
Intent
stickyIntent
=
null
;
if
(
receiver
!
=
null
)
{
IntentFilter
intentFilter
=
new
IntentFilter
(
AudioManager
.
ACTION_HDMI_AUDIO_PLUG
)
;
stickyIntent
=
context
.
registerReceiver
(
receiver
intentFilter
null
handler
)
;
}
audioCapabilities
=
AudioCapabilities
.
getCapabilities
(
context
stickyIntent
)
;
return
audioCapabilities
;
}
public
void
unregister
(
)
{
if
(
!
registered
)
{
return
;
}
audioCapabilities
=
null
;
if
(
receiver
!
=
null
)
{
context
.
unregisterReceiver
(
receiver
)
;
}
if
(
externalSurroundSoundSettingObserver
!
=
null
)
{
externalSurroundSoundSettingObserver
.
unregister
(
)
;
}
registered
=
false
;
}
private
void
onNewAudioCapabilities
(
AudioCapabilities
newAudioCapabilities
)
{
if
(
registered
&
&
!
newAudioCapabilities
.
equals
(
audioCapabilities
)
)
{
audioCapabilities
=
newAudioCapabilities
;
listener
.
onAudioCapabilitiesChanged
(
newAudioCapabilities
)
;
}
}
private
final
class
HdmiAudioPlugBroadcastReceiver
extends
BroadcastReceiver
{
Override
public
void
onReceive
(
Context
context
Intent
intent
)
{
if
(
!
isInitialStickyBroadcast
(
)
)
{
onNewAudioCapabilities
(
AudioCapabilities
.
getCapabilities
(
context
intent
)
)
;
}
}
}
private
final
class
ExternalSurroundSoundSettingObserver
extends
ContentObserver
{
private
final
ContentResolver
resolver
;
private
final
Uri
settingUri
;
public
ExternalSurroundSoundSettingObserver
(
Handler
handler
ContentResolver
resolver
Uri
settingUri
)
{
super
(
handler
)
;
this
.
resolver
=
resolver
;
this
.
settingUri
=
settingUri
;
}
public
void
register
(
)
{
resolver
.
registerContentObserver
(
settingUri
false
this
)
;
}
public
void
unregister
(
)
{
resolver
.
unregisterContentObserver
(
this
)
;
}
Override
public
void
onChange
(
boolean
selfChange
)
{
onNewAudioCapabilities
(
AudioCapabilities
.
getCapabilities
(
context
)
)
;
}
}
}
