package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
;
import
android
.
util
.
Pair
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Player
.
RepeatMode
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaPeriod
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
.
MediaPeriodId
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelector
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelectorResult
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
Allocator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
final
class
MediaPeriodQueue
{
private
static
final
int
MAXIMUM_BUFFER_AHEAD_PERIODS
=
100
;
private
final
Timeline
.
Period
period
;
private
final
Timeline
.
Window
window
;
private
long
nextWindowSequenceNumber
;
private
Timeline
timeline
;
private
RepeatMode
int
repeatMode
;
private
boolean
shuffleModeEnabled
;
Nullable
private
MediaPeriodHolder
playing
;
Nullable
private
MediaPeriodHolder
reading
;
Nullable
private
MediaPeriodHolder
loading
;
private
int
length
;
Nullable
private
Object
oldFrontPeriodUid
;
private
long
oldFrontPeriodWindowSequenceNumber
;
public
MediaPeriodQueue
(
)
{
period
=
new
Timeline
.
Period
(
)
;
window
=
new
Timeline
.
Window
(
)
;
timeline
=
Timeline
.
EMPTY
;
}
public
void
setTimeline
(
Timeline
timeline
)
{
this
.
timeline
=
timeline
;
}
public
boolean
updateRepeatMode
(
RepeatMode
int
repeatMode
)
{
this
.
repeatMode
=
repeatMode
;
return
updateForPlaybackModeChange
(
)
;
}
public
boolean
updateShuffleModeEnabled
(
boolean
shuffleModeEnabled
)
{
this
.
shuffleModeEnabled
=
shuffleModeEnabled
;
return
updateForPlaybackModeChange
(
)
;
}
public
boolean
isLoading
(
MediaPeriod
mediaPeriod
)
{
return
loading
!
=
null
&
&
loading
.
mediaPeriod
=
=
mediaPeriod
;
}
public
void
reevaluateBuffer
(
long
rendererPositionUs
)
{
if
(
loading
!
=
null
)
{
loading
.
reevaluateBuffer
(
rendererPositionUs
)
;
}
}
public
boolean
shouldLoadNextMediaPeriod
(
)
{
return
loading
=
=
null
|
|
(
!
loading
.
info
.
isFinal
&
&
loading
.
isFullyBuffered
(
)
&
&
loading
.
info
.
durationUs
!
=
C
.
TIME_UNSET
&
&
length
<
MAXIMUM_BUFFER_AHEAD_PERIODS
)
;
}
public
Nullable
MediaPeriodInfo
getNextMediaPeriodInfo
(
long
rendererPositionUs
PlaybackInfo
playbackInfo
)
{
return
loading
=
=
null
?
getFirstMediaPeriodInfo
(
playbackInfo
)
:
getFollowingMediaPeriodInfo
(
loading
rendererPositionUs
)
;
}
public
MediaPeriodHolder
enqueueNextMediaPeriodHolder
(
RendererCapabilities
[
]
rendererCapabilities
TrackSelector
trackSelector
Allocator
allocator
MediaSource
mediaSource
MediaPeriodInfo
info
TrackSelectorResult
emptyTrackSelectorResult
)
{
long
rendererPositionOffsetUs
=
loading
=
=
null
?
(
info
.
id
.
isAd
(
)
&
&
info
.
contentPositionUs
!
=
C
.
TIME_UNSET
?
info
.
contentPositionUs
:
0
)
:
(
loading
.
getRendererOffset
(
)
+
loading
.
info
.
durationUs
-
info
.
startPositionUs
)
;
MediaPeriodHolder
newPeriodHolder
=
new
MediaPeriodHolder
(
rendererCapabilities
rendererPositionOffsetUs
trackSelector
allocator
mediaSource
info
emptyTrackSelectorResult
)
;
if
(
loading
!
=
null
)
{
loading
.
setNext
(
newPeriodHolder
)
;
}
else
{
playing
=
newPeriodHolder
;
reading
=
newPeriodHolder
;
}
oldFrontPeriodUid
=
null
;
loading
=
newPeriodHolder
;
length
+
+
;
return
newPeriodHolder
;
}
Nullable
public
MediaPeriodHolder
getLoadingPeriod
(
)
{
return
loading
;
}
Nullable
public
MediaPeriodHolder
getPlayingPeriod
(
)
{
return
playing
;
}
Nullable
public
MediaPeriodHolder
getReadingPeriod
(
)
{
return
reading
;
}
public
MediaPeriodHolder
advanceReadingPeriod
(
)
{
Assertions
.
checkState
(
reading
!
=
null
&
&
reading
.
getNext
(
)
!
=
null
)
;
reading
=
reading
.
getNext
(
)
;
return
reading
;
}
Nullable
public
MediaPeriodHolder
advancePlayingPeriod
(
)
{
if
(
playing
=
=
null
)
{
return
null
;
}
if
(
playing
=
=
reading
)
{
reading
=
playing
.
getNext
(
)
;
}
playing
.
release
(
)
;
length
-
-
;
if
(
length
=
=
0
)
{
loading
=
null
;
oldFrontPeriodUid
=
playing
.
uid
;
oldFrontPeriodWindowSequenceNumber
=
playing
.
info
.
id
.
windowSequenceNumber
;
}
playing
=
playing
.
getNext
(
)
;
return
playing
;
}
public
boolean
removeAfter
(
MediaPeriodHolder
mediaPeriodHolder
)
{
Assertions
.
checkState
(
mediaPeriodHolder
!
=
null
)
;
boolean
removedReading
=
false
;
loading
=
mediaPeriodHolder
;
while
(
mediaPeriodHolder
.
getNext
(
)
!
=
null
)
{
mediaPeriodHolder
=
mediaPeriodHolder
.
getNext
(
)
;
if
(
mediaPeriodHolder
=
=
reading
)
{
reading
=
playing
;
removedReading
=
true
;
}
mediaPeriodHolder
.
release
(
)
;
length
-
-
;
}
loading
.
setNext
(
null
)
;
return
removedReading
;
}
public
void
clear
(
boolean
keepFrontPeriodUid
)
{
MediaPeriodHolder
front
=
playing
;
if
(
front
!
=
null
)
{
oldFrontPeriodUid
=
keepFrontPeriodUid
?
front
.
uid
:
null
;
oldFrontPeriodWindowSequenceNumber
=
front
.
info
.
id
.
windowSequenceNumber
;
removeAfter
(
front
)
;
front
.
release
(
)
;
}
else
if
(
!
keepFrontPeriodUid
)
{
oldFrontPeriodUid
=
null
;
}
playing
=
null
;
loading
=
null
;
reading
=
null
;
length
=
0
;
}
public
boolean
updateQueuedPeriods
(
long
rendererPositionUs
long
maxRendererReadPositionUs
)
{
MediaPeriodHolder
previousPeriodHolder
=
null
;
MediaPeriodHolder
periodHolder
=
playing
;
while
(
periodHolder
!
=
null
)
{
MediaPeriodInfo
oldPeriodInfo
=
periodHolder
.
info
;
MediaPeriodInfo
newPeriodInfo
;
if
(
previousPeriodHolder
=
=
null
)
{
newPeriodInfo
=
getUpdatedMediaPeriodInfo
(
oldPeriodInfo
)
;
}
else
{
newPeriodInfo
=
getFollowingMediaPeriodInfo
(
previousPeriodHolder
rendererPositionUs
)
;
if
(
newPeriodInfo
=
=
null
)
{
return
!
removeAfter
(
previousPeriodHolder
)
;
}
if
(
!
canKeepMediaPeriodHolder
(
oldPeriodInfo
newPeriodInfo
)
)
{
return
!
removeAfter
(
previousPeriodHolder
)
;
}
}
periodHolder
.
info
=
newPeriodInfo
.
copyWithContentPositionUs
(
oldPeriodInfo
.
contentPositionUs
)
;
if
(
!
areDurationsCompatible
(
oldPeriodInfo
.
durationUs
newPeriodInfo
.
durationUs
)
)
{
long
newDurationInRendererTime
=
newPeriodInfo
.
durationUs
=
=
C
.
TIME_UNSET
?
Long
.
MAX_VALUE
:
periodHolder
.
toRendererTime
(
newPeriodInfo
.
durationUs
)
;
boolean
isReadingAndReadBeyondNewDuration
=
periodHolder
=
=
reading
&
&
(
maxRendererReadPositionUs
=
=
C
.
TIME_END_OF_SOURCE
|
|
maxRendererReadPositionUs
>
=
newDurationInRendererTime
)
;
boolean
readingPeriodRemoved
=
removeAfter
(
periodHolder
)
;
return
!
readingPeriodRemoved
&
&
!
isReadingAndReadBeyondNewDuration
;
}
previousPeriodHolder
=
periodHolder
;
periodHolder
=
periodHolder
.
getNext
(
)
;
}
return
true
;
}
public
MediaPeriodInfo
getUpdatedMediaPeriodInfo
(
MediaPeriodInfo
info
)
{
MediaPeriodId
id
=
info
.
id
;
boolean
isLastInPeriod
=
isLastInPeriod
(
id
)
;
boolean
isLastInTimeline
=
isLastInTimeline
(
id
isLastInPeriod
)
;
timeline
.
getPeriodByUid
(
info
.
id
.
periodUid
period
)
;
long
durationUs
=
id
.
isAd
(
)
?
period
.
getAdDurationUs
(
id
.
adGroupIndex
id
.
adIndexInAdGroup
)
:
(
info
.
endPositionUs
=
=
C
.
TIME_UNSET
|
|
info
.
endPositionUs
=
=
C
.
TIME_END_OF_SOURCE
?
period
.
getDurationUs
(
)
:
info
.
endPositionUs
)
;
return
new
MediaPeriodInfo
(
id
info
.
startPositionUs
info
.
contentPositionUs
info
.
endPositionUs
durationUs
isLastInPeriod
isLastInTimeline
)
;
}
public
MediaPeriodId
resolveMediaPeriodIdForAds
(
Object
periodUid
long
positionUs
)
{
long
windowSequenceNumber
=
resolvePeriodIndexToWindowSequenceNumber
(
periodUid
)
;
return
resolveMediaPeriodIdForAds
(
periodUid
positionUs
windowSequenceNumber
)
;
}
private
MediaPeriodId
resolveMediaPeriodIdForAds
(
Object
periodUid
long
positionUs
long
windowSequenceNumber
)
{
timeline
.
getPeriodByUid
(
periodUid
period
)
;
int
adGroupIndex
=
period
.
getAdGroupIndexForPositionUs
(
positionUs
)
;
if
(
adGroupIndex
=
=
C
.
INDEX_UNSET
)
{
int
nextAdGroupIndex
=
period
.
getAdGroupIndexAfterPositionUs
(
positionUs
)
;
return
new
MediaPeriodId
(
periodUid
windowSequenceNumber
nextAdGroupIndex
)
;
}
else
{
int
adIndexInAdGroup
=
period
.
getFirstAdIndexToPlay
(
adGroupIndex
)
;
return
new
MediaPeriodId
(
periodUid
adGroupIndex
adIndexInAdGroup
windowSequenceNumber
)
;
}
}
private
long
resolvePeriodIndexToWindowSequenceNumber
(
Object
periodUid
)
{
int
windowIndex
=
timeline
.
getPeriodByUid
(
periodUid
period
)
.
windowIndex
;
if
(
oldFrontPeriodUid
!
=
null
)
{
int
oldFrontPeriodIndex
=
timeline
.
getIndexOfPeriod
(
oldFrontPeriodUid
)
;
if
(
oldFrontPeriodIndex
!
=
C
.
INDEX_UNSET
)
{
int
oldFrontWindowIndex
=
timeline
.
getPeriod
(
oldFrontPeriodIndex
period
)
.
windowIndex
;
if
(
oldFrontWindowIndex
=
=
windowIndex
)
{
return
oldFrontPeriodWindowSequenceNumber
;
}
}
}
MediaPeriodHolder
mediaPeriodHolder
=
playing
;
while
(
mediaPeriodHolder
!
=
null
)
{
if
(
mediaPeriodHolder
.
uid
.
equals
(
periodUid
)
)
{
return
mediaPeriodHolder
.
info
.
id
.
windowSequenceNumber
;
}
mediaPeriodHolder
=
mediaPeriodHolder
.
getNext
(
)
;
}
mediaPeriodHolder
=
playing
;
while
(
mediaPeriodHolder
!
=
null
)
{
int
indexOfHolderInTimeline
=
timeline
.
getIndexOfPeriod
(
mediaPeriodHolder
.
uid
)
;
if
(
indexOfHolderInTimeline
!
=
C
.
INDEX_UNSET
)
{
int
holderWindowIndex
=
timeline
.
getPeriod
(
indexOfHolderInTimeline
period
)
.
windowIndex
;
if
(
holderWindowIndex
=
=
windowIndex
)
{
return
mediaPeriodHolder
.
info
.
id
.
windowSequenceNumber
;
}
}
mediaPeriodHolder
=
mediaPeriodHolder
.
getNext
(
)
;
}
long
windowSequenceNumber
=
nextWindowSequenceNumber
+
+
;
if
(
playing
=
=
null
)
{
oldFrontPeriodUid
=
periodUid
;
oldFrontPeriodWindowSequenceNumber
=
windowSequenceNumber
;
}
return
windowSequenceNumber
;
}
private
boolean
canKeepMediaPeriodHolder
(
MediaPeriodInfo
oldInfo
MediaPeriodInfo
newInfo
)
{
return
oldInfo
.
startPositionUs
=
=
newInfo
.
startPositionUs
&
&
oldInfo
.
id
.
equals
(
newInfo
.
id
)
;
}
private
boolean
areDurationsCompatible
(
long
previousDurationUs
long
newDurationUs
)
{
return
previousDurationUs
=
=
C
.
TIME_UNSET
|
|
previousDurationUs
=
=
newDurationUs
;
}
private
boolean
updateForPlaybackModeChange
(
)
{
MediaPeriodHolder
lastValidPeriodHolder
=
playing
;
if
(
lastValidPeriodHolder
=
=
null
)
{
return
true
;
}
int
currentPeriodIndex
=
timeline
.
getIndexOfPeriod
(
lastValidPeriodHolder
.
uid
)
;
while
(
true
)
{
int
nextPeriodIndex
=
timeline
.
getNextPeriodIndex
(
currentPeriodIndex
period
window
repeatMode
shuffleModeEnabled
)
;
while
(
lastValidPeriodHolder
.
getNext
(
)
!
=
null
&
&
!
lastValidPeriodHolder
.
info
.
isLastInTimelinePeriod
)
{
lastValidPeriodHolder
=
lastValidPeriodHolder
.
getNext
(
)
;
}
MediaPeriodHolder
nextMediaPeriodHolder
=
lastValidPeriodHolder
.
getNext
(
)
;
if
(
nextPeriodIndex
=
=
C
.
INDEX_UNSET
|
|
nextMediaPeriodHolder
=
=
null
)
{
break
;
}
int
nextPeriodHolderPeriodIndex
=
timeline
.
getIndexOfPeriod
(
nextMediaPeriodHolder
.
uid
)
;
if
(
nextPeriodHolderPeriodIndex
!
=
nextPeriodIndex
)
{
break
;
}
lastValidPeriodHolder
=
nextMediaPeriodHolder
;
currentPeriodIndex
=
nextPeriodIndex
;
}
boolean
readingPeriodRemoved
=
removeAfter
(
lastValidPeriodHolder
)
;
lastValidPeriodHolder
.
info
=
getUpdatedMediaPeriodInfo
(
lastValidPeriodHolder
.
info
)
;
return
!
readingPeriodRemoved
;
}
private
MediaPeriodInfo
getFirstMediaPeriodInfo
(
PlaybackInfo
playbackInfo
)
{
return
getMediaPeriodInfo
(
playbackInfo
.
periodId
playbackInfo
.
contentPositionUs
playbackInfo
.
startPositionUs
)
;
}
private
Nullable
MediaPeriodInfo
getFollowingMediaPeriodInfo
(
MediaPeriodHolder
mediaPeriodHolder
long
rendererPositionUs
)
{
MediaPeriodInfo
mediaPeriodInfo
=
mediaPeriodHolder
.
info
;
long
bufferedDurationUs
=
mediaPeriodHolder
.
getRendererOffset
(
)
+
mediaPeriodInfo
.
durationUs
-
rendererPositionUs
;
if
(
mediaPeriodInfo
.
isLastInTimelinePeriod
)
{
int
currentPeriodIndex
=
timeline
.
getIndexOfPeriod
(
mediaPeriodInfo
.
id
.
periodUid
)
;
int
nextPeriodIndex
=
timeline
.
getNextPeriodIndex
(
currentPeriodIndex
period
window
repeatMode
shuffleModeEnabled
)
;
if
(
nextPeriodIndex
=
=
C
.
INDEX_UNSET
)
{
return
null
;
}
long
startPositionUs
;
long
contentPositionUs
;
int
nextWindowIndex
=
timeline
.
getPeriod
(
nextPeriodIndex
period
true
)
.
windowIndex
;
Object
nextPeriodUid
=
period
.
uid
;
long
windowSequenceNumber
=
mediaPeriodInfo
.
id
.
windowSequenceNumber
;
if
(
timeline
.
getWindow
(
nextWindowIndex
window
)
.
firstPeriodIndex
=
=
nextPeriodIndex
)
{
contentPositionUs
=
C
.
TIME_UNSET
;
Pair
<
Object
Long
>
defaultPosition
=
timeline
.
getPeriodPosition
(
window
period
nextWindowIndex
C
.
TIME_UNSET
Math
.
max
(
0
bufferedDurationUs
)
)
;
if
(
defaultPosition
=
=
null
)
{
return
null
;
}
nextPeriodUid
=
defaultPosition
.
first
;
startPositionUs
=
defaultPosition
.
second
;
MediaPeriodHolder
nextMediaPeriodHolder
=
mediaPeriodHolder
.
getNext
(
)
;
if
(
nextMediaPeriodHolder
!
=
null
&
&
nextMediaPeriodHolder
.
uid
.
equals
(
nextPeriodUid
)
)
{
windowSequenceNumber
=
nextMediaPeriodHolder
.
info
.
id
.
windowSequenceNumber
;
}
else
{
windowSequenceNumber
=
nextWindowSequenceNumber
+
+
;
}
}
else
{
startPositionUs
=
0
;
contentPositionUs
=
0
;
}
MediaPeriodId
periodId
=
resolveMediaPeriodIdForAds
(
nextPeriodUid
startPositionUs
windowSequenceNumber
)
;
return
getMediaPeriodInfo
(
periodId
contentPositionUs
startPositionUs
)
;
}
MediaPeriodId
currentPeriodId
=
mediaPeriodInfo
.
id
;
timeline
.
getPeriodByUid
(
currentPeriodId
.
periodUid
period
)
;
if
(
currentPeriodId
.
isAd
(
)
)
{
int
adGroupIndex
=
currentPeriodId
.
adGroupIndex
;
int
adCountInCurrentAdGroup
=
period
.
getAdCountInAdGroup
(
adGroupIndex
)
;
if
(
adCountInCurrentAdGroup
=
=
C
.
LENGTH_UNSET
)
{
return
null
;
}
int
nextAdIndexInAdGroup
=
period
.
getNextAdIndexToPlay
(
adGroupIndex
currentPeriodId
.
adIndexInAdGroup
)
;
if
(
nextAdIndexInAdGroup
<
adCountInCurrentAdGroup
)
{
return
!
period
.
isAdAvailable
(
adGroupIndex
nextAdIndexInAdGroup
)
?
null
:
getMediaPeriodInfoForAd
(
currentPeriodId
.
periodUid
adGroupIndex
nextAdIndexInAdGroup
mediaPeriodInfo
.
contentPositionUs
currentPeriodId
.
windowSequenceNumber
)
;
}
else
{
long
startPositionUs
=
mediaPeriodInfo
.
contentPositionUs
;
if
(
startPositionUs
=
=
C
.
TIME_UNSET
)
{
Pair
<
Object
Long
>
defaultPosition
=
timeline
.
getPeriodPosition
(
window
period
period
.
windowIndex
C
.
TIME_UNSET
Math
.
max
(
0
bufferedDurationUs
)
)
;
if
(
defaultPosition
=
=
null
)
{
return
null
;
}
startPositionUs
=
defaultPosition
.
second
;
}
return
getMediaPeriodInfoForContent
(
currentPeriodId
.
periodUid
startPositionUs
currentPeriodId
.
windowSequenceNumber
)
;
}
}
else
{
int
nextAdGroupIndex
=
period
.
getAdGroupIndexForPositionUs
(
mediaPeriodInfo
.
endPositionUs
)
;
if
(
nextAdGroupIndex
=
=
C
.
INDEX_UNSET
)
{
return
getMediaPeriodInfoForContent
(
currentPeriodId
.
periodUid
mediaPeriodInfo
.
durationUs
currentPeriodId
.
windowSequenceNumber
)
;
}
int
adIndexInAdGroup
=
period
.
getFirstAdIndexToPlay
(
nextAdGroupIndex
)
;
return
!
period
.
isAdAvailable
(
nextAdGroupIndex
adIndexInAdGroup
)
?
null
:
getMediaPeriodInfoForAd
(
currentPeriodId
.
periodUid
nextAdGroupIndex
adIndexInAdGroup
mediaPeriodInfo
.
durationUs
currentPeriodId
.
windowSequenceNumber
)
;
}
}
private
MediaPeriodInfo
getMediaPeriodInfo
(
MediaPeriodId
id
long
contentPositionUs
long
startPositionUs
)
{
timeline
.
getPeriodByUid
(
id
.
periodUid
period
)
;
if
(
id
.
isAd
(
)
)
{
if
(
!
period
.
isAdAvailable
(
id
.
adGroupIndex
id
.
adIndexInAdGroup
)
)
{
return
null
;
}
return
getMediaPeriodInfoForAd
(
id
.
periodUid
id
.
adGroupIndex
id
.
adIndexInAdGroup
contentPositionUs
id
.
windowSequenceNumber
)
;
}
else
{
return
getMediaPeriodInfoForContent
(
id
.
periodUid
startPositionUs
id
.
windowSequenceNumber
)
;
}
}
private
MediaPeriodInfo
getMediaPeriodInfoForAd
(
Object
periodUid
int
adGroupIndex
int
adIndexInAdGroup
long
contentPositionUs
long
windowSequenceNumber
)
{
MediaPeriodId
id
=
new
MediaPeriodId
(
periodUid
adGroupIndex
adIndexInAdGroup
windowSequenceNumber
)
;
long
durationUs
=
timeline
.
getPeriodByUid
(
id
.
periodUid
period
)
.
getAdDurationUs
(
id
.
adGroupIndex
id
.
adIndexInAdGroup
)
;
long
startPositionUs
=
adIndexInAdGroup
=
=
period
.
getFirstAdIndexToPlay
(
adGroupIndex
)
?
period
.
getAdResumePositionUs
(
)
:
0
;
return
new
MediaPeriodInfo
(
id
startPositionUs
contentPositionUs
C
.
TIME_UNSET
durationUs
false
false
)
;
}
private
MediaPeriodInfo
getMediaPeriodInfoForContent
(
Object
periodUid
long
startPositionUs
long
windowSequenceNumber
)
{
int
nextAdGroupIndex
=
period
.
getAdGroupIndexAfterPositionUs
(
startPositionUs
)
;
MediaPeriodId
id
=
new
MediaPeriodId
(
periodUid
windowSequenceNumber
nextAdGroupIndex
)
;
boolean
isLastInPeriod
=
isLastInPeriod
(
id
)
;
boolean
isLastInTimeline
=
isLastInTimeline
(
id
isLastInPeriod
)
;
long
endPositionUs
=
nextAdGroupIndex
!
=
C
.
INDEX_UNSET
?
period
.
getAdGroupTimeUs
(
nextAdGroupIndex
)
:
C
.
TIME_UNSET
;
long
durationUs
=
endPositionUs
=
=
C
.
TIME_UNSET
|
|
endPositionUs
=
=
C
.
TIME_END_OF_SOURCE
?
period
.
durationUs
:
endPositionUs
;
return
new
MediaPeriodInfo
(
id
startPositionUs
C
.
TIME_UNSET
endPositionUs
durationUs
isLastInPeriod
isLastInTimeline
)
;
}
private
boolean
isLastInPeriod
(
MediaPeriodId
id
)
{
return
!
id
.
isAd
(
)
&
&
id
.
nextAdGroupIndex
=
=
C
.
INDEX_UNSET
;
}
private
boolean
isLastInTimeline
(
MediaPeriodId
id
boolean
isLastMediaPeriodInPeriod
)
{
int
periodIndex
=
timeline
.
getIndexOfPeriod
(
id
.
periodUid
)
;
int
windowIndex
=
timeline
.
getPeriod
(
periodIndex
period
)
.
windowIndex
;
return
!
timeline
.
getWindow
(
windowIndex
window
)
.
isDynamic
&
&
timeline
.
isLastPeriod
(
periodIndex
period
window
repeatMode
shuffleModeEnabled
)
&
&
isLastMediaPeriodInPeriod
;
}
}
