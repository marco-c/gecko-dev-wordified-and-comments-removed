package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
;
import
android
.
net
.
Uri
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ParserException
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
Loader
.
Loadable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
public
final
class
ParsingLoadable
<
T
>
implements
Loadable
{
public
interface
Parser
<
T
>
{
T
parse
(
Uri
uri
InputStream
inputStream
)
throws
IOException
;
}
public
static
<
T
>
T
load
(
DataSource
dataSource
Parser
<
?
extends
T
>
parser
Uri
uri
int
type
)
throws
IOException
{
ParsingLoadable
<
T
>
loadable
=
new
ParsingLoadable
<
>
(
dataSource
uri
type
parser
)
;
loadable
.
load
(
)
;
return
Assertions
.
checkNotNull
(
loadable
.
getResult
(
)
)
;
}
public
static
<
T
>
T
load
(
DataSource
dataSource
Parser
<
?
extends
T
>
parser
DataSpec
dataSpec
int
type
)
throws
IOException
{
ParsingLoadable
<
T
>
loadable
=
new
ParsingLoadable
<
>
(
dataSource
dataSpec
type
parser
)
;
loadable
.
load
(
)
;
return
Assertions
.
checkNotNull
(
loadable
.
getResult
(
)
)
;
}
public
final
DataSpec
dataSpec
;
public
final
int
type
;
private
final
StatsDataSource
dataSource
;
private
final
Parser
<
?
extends
T
>
parser
;
private
volatile
Nullable
T
result
;
public
ParsingLoadable
(
DataSource
dataSource
Uri
uri
int
type
Parser
<
?
extends
T
>
parser
)
{
this
(
dataSource
new
DataSpec
(
uri
DataSpec
.
FLAG_ALLOW_GZIP
)
type
parser
)
;
}
public
ParsingLoadable
(
DataSource
dataSource
DataSpec
dataSpec
int
type
Parser
<
?
extends
T
>
parser
)
{
this
.
dataSource
=
new
StatsDataSource
(
dataSource
)
;
this
.
dataSpec
=
dataSpec
;
this
.
type
=
type
;
this
.
parser
=
parser
;
}
public
final
Nullable
T
getResult
(
)
{
return
result
;
}
public
long
bytesLoaded
(
)
{
return
dataSource
.
getBytesRead
(
)
;
}
public
Uri
getUri
(
)
{
return
dataSource
.
getLastOpenedUri
(
)
;
}
public
Map
<
String
List
<
String
>
>
getResponseHeaders
(
)
{
return
dataSource
.
getLastResponseHeaders
(
)
;
}
Override
public
final
void
cancelLoad
(
)
{
}
Override
public
final
void
load
(
)
throws
IOException
{
dataSource
.
resetBytesRead
(
)
;
DataSourceInputStream
inputStream
=
new
DataSourceInputStream
(
dataSource
dataSpec
)
;
try
{
inputStream
.
open
(
)
;
Uri
dataSourceUri
=
Assertions
.
checkNotNull
(
dataSource
.
getUri
(
)
)
;
result
=
parser
.
parse
(
dataSourceUri
inputStream
)
;
}
finally
{
Util
.
closeQuietly
(
inputStream
)
;
}
}
}
