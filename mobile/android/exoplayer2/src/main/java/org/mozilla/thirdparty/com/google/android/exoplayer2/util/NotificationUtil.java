package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
app
.
Notification
;
import
android
.
app
.
NotificationChannel
;
import
android
.
app
.
NotificationManager
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
StringRes
;
import
java
.
lang
.
annotation
.
Documented
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
SuppressLint
(
"
InlinedApi
"
)
public
final
class
NotificationUtil
{
Documented
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
IMPORTANCE_UNSPECIFIED
IMPORTANCE_NONE
IMPORTANCE_MIN
IMPORTANCE_LOW
IMPORTANCE_DEFAULT
IMPORTANCE_HIGH
}
)
public
interface
Importance
{
}
public
static
final
int
IMPORTANCE_UNSPECIFIED
=
NotificationManager
.
IMPORTANCE_UNSPECIFIED
;
public
static
final
int
IMPORTANCE_NONE
=
NotificationManager
.
IMPORTANCE_NONE
;
public
static
final
int
IMPORTANCE_MIN
=
NotificationManager
.
IMPORTANCE_MIN
;
public
static
final
int
IMPORTANCE_LOW
=
NotificationManager
.
IMPORTANCE_LOW
;
public
static
final
int
IMPORTANCE_DEFAULT
=
NotificationManager
.
IMPORTANCE_DEFAULT
;
public
static
final
int
IMPORTANCE_HIGH
=
NotificationManager
.
IMPORTANCE_HIGH
;
Deprecated
public
static
void
createNotificationChannel
(
Context
context
String
id
StringRes
int
nameResourceId
Importance
int
importance
)
{
createNotificationChannel
(
context
id
nameResourceId
0
importance
)
;
}
public
static
void
createNotificationChannel
(
Context
context
String
id
StringRes
int
nameResourceId
StringRes
int
descriptionResourceId
Importance
int
importance
)
{
if
(
Util
.
SDK_INT
>
=
26
)
{
NotificationManager
notificationManager
=
(
NotificationManager
)
context
.
getSystemService
(
Context
.
NOTIFICATION_SERVICE
)
;
NotificationChannel
channel
=
new
NotificationChannel
(
id
context
.
getString
(
nameResourceId
)
importance
)
;
if
(
descriptionResourceId
!
=
0
)
{
channel
.
setDescription
(
context
.
getString
(
descriptionResourceId
)
)
;
}
notificationManager
.
createNotificationChannel
(
channel
)
;
}
}
public
static
void
setNotification
(
Context
context
int
id
Nullable
Notification
notification
)
{
NotificationManager
notificationManager
=
(
NotificationManager
)
context
.
getSystemService
(
Context
.
NOTIFICATION_SERVICE
)
;
if
(
notification
!
=
null
)
{
notificationManager
.
notify
(
id
notification
)
;
}
else
{
notificationManager
.
cancel
(
id
)
;
}
}
private
NotificationUtil
(
)
{
}
}
