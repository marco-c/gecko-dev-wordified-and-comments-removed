package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
MimeTypes
;
public
final
class
MpegAudioHeader
{
public
static
final
int
MAX_FRAME_SIZE_BYTES
=
4096
;
private
static
final
String
[
]
MIME_TYPE_BY_LAYER
=
new
String
[
]
{
MimeTypes
.
AUDIO_MPEG_L1
MimeTypes
.
AUDIO_MPEG_L2
MimeTypes
.
AUDIO_MPEG
}
;
private
static
final
int
[
]
SAMPLING_RATE_V1
=
{
44100
48000
32000
}
;
private
static
final
int
[
]
BITRATE_V1_L1
=
{
32000
64000
96000
128000
160000
192000
224000
256000
288000
320000
352000
384000
416000
448000
}
;
private
static
final
int
[
]
BITRATE_V2_L1
=
{
32000
48000
56000
64000
80000
96000
112000
128000
144000
160000
176000
192000
224000
256000
}
;
private
static
final
int
[
]
BITRATE_V1_L2
=
{
32000
48000
56000
64000
80000
96000
112000
128000
160000
192000
224000
256000
320000
384000
}
;
private
static
final
int
[
]
BITRATE_V1_L3
=
{
32000
40000
48000
56000
64000
80000
96000
112000
128000
160000
192000
224000
256000
320000
}
;
private
static
final
int
[
]
BITRATE_V2
=
{
8000
16000
24000
32000
40000
48000
56000
64000
80000
96000
112000
128000
144000
160000
}
;
private
static
final
int
SAMPLES_PER_FRAME_L1
=
384
;
private
static
final
int
SAMPLES_PER_FRAME_L2
=
1152
;
private
static
final
int
SAMPLES_PER_FRAME_L3_V1
=
1152
;
private
static
final
int
SAMPLES_PER_FRAME_L3_V2
=
576
;
public
static
int
getFrameSize
(
int
header
)
{
if
(
!
isMagicPresent
(
header
)
)
{
return
C
.
LENGTH_UNSET
;
}
int
version
=
(
header
>
>
>
19
)
&
3
;
if
(
version
=
=
1
)
{
return
C
.
LENGTH_UNSET
;
}
int
layer
=
(
header
>
>
>
17
)
&
3
;
if
(
layer
=
=
0
)
{
return
C
.
LENGTH_UNSET
;
}
int
bitrateIndex
=
(
header
>
>
>
12
)
&
15
;
if
(
bitrateIndex
=
=
0
|
|
bitrateIndex
=
=
0xF
)
{
return
C
.
LENGTH_UNSET
;
}
int
samplingRateIndex
=
(
header
>
>
>
10
)
&
3
;
if
(
samplingRateIndex
=
=
3
)
{
return
C
.
LENGTH_UNSET
;
}
int
samplingRate
=
SAMPLING_RATE_V1
[
samplingRateIndex
]
;
if
(
version
=
=
2
)
{
samplingRate
/
=
2
;
}
else
if
(
version
=
=
0
)
{
samplingRate
/
=
4
;
}
int
bitrate
;
int
padding
=
(
header
>
>
>
9
)
&
1
;
if
(
layer
=
=
3
)
{
bitrate
=
version
=
=
3
?
BITRATE_V1_L1
[
bitrateIndex
-
1
]
:
BITRATE_V2_L1
[
bitrateIndex
-
1
]
;
return
(
12
*
bitrate
/
samplingRate
+
padding
)
*
4
;
}
else
{
if
(
version
=
=
3
)
{
bitrate
=
layer
=
=
2
?
BITRATE_V1_L2
[
bitrateIndex
-
1
]
:
BITRATE_V1_L3
[
bitrateIndex
-
1
]
;
}
else
{
bitrate
=
BITRATE_V2
[
bitrateIndex
-
1
]
;
}
}
if
(
version
=
=
3
)
{
return
144
*
bitrate
/
samplingRate
+
padding
;
}
else
{
return
(
layer
=
=
1
?
72
:
144
)
*
bitrate
/
samplingRate
+
padding
;
}
}
public
static
int
getFrameSampleCount
(
int
header
)
{
if
(
!
isMagicPresent
(
header
)
)
{
return
C
.
LENGTH_UNSET
;
}
int
version
=
(
header
>
>
>
19
)
&
3
;
if
(
version
=
=
1
)
{
return
C
.
LENGTH_UNSET
;
}
int
layer
=
(
header
>
>
>
17
)
&
3
;
if
(
layer
=
=
0
)
{
return
C
.
LENGTH_UNSET
;
}
int
bitrateIndex
=
(
header
>
>
>
12
)
&
15
;
int
samplingRateIndex
=
(
header
>
>
>
10
)
&
3
;
if
(
bitrateIndex
=
=
0
|
|
bitrateIndex
=
=
0xF
|
|
samplingRateIndex
=
=
3
)
{
return
C
.
LENGTH_UNSET
;
}
return
getFrameSizeInSamples
(
version
layer
)
;
}
public
static
boolean
populateHeader
(
int
headerData
MpegAudioHeader
header
)
{
if
(
!
isMagicPresent
(
headerData
)
)
{
return
false
;
}
int
version
=
(
headerData
>
>
>
19
)
&
3
;
if
(
version
=
=
1
)
{
return
false
;
}
int
layer
=
(
headerData
>
>
>
17
)
&
3
;
if
(
layer
=
=
0
)
{
return
false
;
}
int
bitrateIndex
=
(
headerData
>
>
>
12
)
&
15
;
if
(
bitrateIndex
=
=
0
|
|
bitrateIndex
=
=
0xF
)
{
return
false
;
}
int
samplingRateIndex
=
(
headerData
>
>
>
10
)
&
3
;
if
(
samplingRateIndex
=
=
3
)
{
return
false
;
}
int
sampleRate
=
SAMPLING_RATE_V1
[
samplingRateIndex
]
;
if
(
version
=
=
2
)
{
sampleRate
/
=
2
;
}
else
if
(
version
=
=
0
)
{
sampleRate
/
=
4
;
}
int
padding
=
(
headerData
>
>
>
9
)
&
1
;
int
bitrate
;
int
frameSize
;
int
samplesPerFrame
=
getFrameSizeInSamples
(
version
layer
)
;
if
(
layer
=
=
3
)
{
bitrate
=
version
=
=
3
?
BITRATE_V1_L1
[
bitrateIndex
-
1
]
:
BITRATE_V2_L1
[
bitrateIndex
-
1
]
;
frameSize
=
(
12
*
bitrate
/
sampleRate
+
padding
)
*
4
;
}
else
{
if
(
version
=
=
3
)
{
bitrate
=
layer
=
=
2
?
BITRATE_V1_L2
[
bitrateIndex
-
1
]
:
BITRATE_V1_L3
[
bitrateIndex
-
1
]
;
frameSize
=
144
*
bitrate
/
sampleRate
+
padding
;
}
else
{
bitrate
=
BITRATE_V2
[
bitrateIndex
-
1
]
;
frameSize
=
(
layer
=
=
1
?
72
:
144
)
*
bitrate
/
sampleRate
+
padding
;
}
}
String
mimeType
=
MIME_TYPE_BY_LAYER
[
3
-
layer
]
;
int
channels
=
(
(
headerData
>
>
6
)
&
3
)
=
=
3
?
1
:
2
;
header
.
setValues
(
version
mimeType
frameSize
sampleRate
channels
bitrate
samplesPerFrame
)
;
return
true
;
}
private
static
boolean
isMagicPresent
(
int
header
)
{
return
(
header
&
0xFFE00000
)
=
=
0xFFE00000
;
}
private
static
int
getFrameSizeInSamples
(
int
version
int
layer
)
{
switch
(
layer
)
{
case
1
:
return
version
=
=
3
?
SAMPLES_PER_FRAME_L3_V1
:
SAMPLES_PER_FRAME_L3_V2
;
case
2
:
return
SAMPLES_PER_FRAME_L2
;
case
3
:
return
SAMPLES_PER_FRAME_L1
;
}
throw
new
IllegalArgumentException
(
)
;
}
public
int
version
;
Nullable
public
String
mimeType
;
public
int
frameSize
;
public
int
sampleRate
;
public
int
channels
;
public
int
bitrate
;
public
int
samplesPerFrame
;
private
void
setValues
(
int
version
String
mimeType
int
frameSize
int
sampleRate
int
channels
int
bitrate
int
samplesPerFrame
)
{
this
.
version
=
version
;
this
.
mimeType
=
mimeType
;
this
.
frameSize
=
frameSize
;
this
.
sampleRate
=
sampleRate
;
this
.
channels
=
channels
;
this
.
bitrate
=
bitrate
;
this
.
samplesPerFrame
=
samplesPerFrame
;
}
}
