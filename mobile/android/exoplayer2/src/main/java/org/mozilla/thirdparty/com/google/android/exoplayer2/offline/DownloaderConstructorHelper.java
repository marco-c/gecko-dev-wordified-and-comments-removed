package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSink
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DummyDataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
FileDataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
PriorityDataSourceFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
Cache
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
CacheDataSink
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
CacheDataSinkFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
CacheDataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
CacheDataSourceFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
CacheKeyFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
cache
.
CacheUtil
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
PriorityTaskManager
;
public
final
class
DownloaderConstructorHelper
{
private
final
Cache
cache
;
Nullable
private
final
CacheKeyFactory
cacheKeyFactory
;
Nullable
private
final
PriorityTaskManager
priorityTaskManager
;
private
final
CacheDataSourceFactory
onlineCacheDataSourceFactory
;
private
final
CacheDataSourceFactory
offlineCacheDataSourceFactory
;
public
DownloaderConstructorHelper
(
Cache
cache
DataSource
.
Factory
upstreamFactory
)
{
this
(
cache
upstreamFactory
null
null
null
)
;
}
public
DownloaderConstructorHelper
(
Cache
cache
DataSource
.
Factory
upstreamFactory
Nullable
DataSource
.
Factory
cacheReadDataSourceFactory
Nullable
DataSink
.
Factory
cacheWriteDataSinkFactory
Nullable
PriorityTaskManager
priorityTaskManager
)
{
this
(
cache
upstreamFactory
cacheReadDataSourceFactory
cacheWriteDataSinkFactory
priorityTaskManager
null
)
;
}
public
DownloaderConstructorHelper
(
Cache
cache
DataSource
.
Factory
upstreamFactory
Nullable
DataSource
.
Factory
cacheReadDataSourceFactory
Nullable
DataSink
.
Factory
cacheWriteDataSinkFactory
Nullable
PriorityTaskManager
priorityTaskManager
Nullable
CacheKeyFactory
cacheKeyFactory
)
{
if
(
priorityTaskManager
!
=
null
)
{
upstreamFactory
=
new
PriorityDataSourceFactory
(
upstreamFactory
priorityTaskManager
C
.
PRIORITY_DOWNLOAD
)
;
}
DataSource
.
Factory
readDataSourceFactory
=
cacheReadDataSourceFactory
!
=
null
?
cacheReadDataSourceFactory
:
new
FileDataSource
.
Factory
(
)
;
if
(
cacheWriteDataSinkFactory
=
=
null
)
{
cacheWriteDataSinkFactory
=
new
CacheDataSinkFactory
(
cache
CacheDataSink
.
DEFAULT_FRAGMENT_SIZE
)
;
}
onlineCacheDataSourceFactory
=
new
CacheDataSourceFactory
(
cache
upstreamFactory
readDataSourceFactory
cacheWriteDataSinkFactory
CacheDataSource
.
FLAG_BLOCK_ON_CACHE
null
cacheKeyFactory
)
;
offlineCacheDataSourceFactory
=
new
CacheDataSourceFactory
(
cache
DummyDataSource
.
FACTORY
readDataSourceFactory
null
CacheDataSource
.
FLAG_BLOCK_ON_CACHE
null
cacheKeyFactory
)
;
this
.
cache
=
cache
;
this
.
priorityTaskManager
=
priorityTaskManager
;
this
.
cacheKeyFactory
=
cacheKeyFactory
;
}
public
Cache
getCache
(
)
{
return
cache
;
}
public
CacheKeyFactory
getCacheKeyFactory
(
)
{
return
cacheKeyFactory
!
=
null
?
cacheKeyFactory
:
CacheUtil
.
DEFAULT_CACHE_KEY_FACTORY
;
}
public
PriorityTaskManager
getPriorityTaskManager
(
)
{
return
priorityTaskManager
!
=
null
?
priorityTaskManager
:
new
PriorityTaskManager
(
)
;
}
public
CacheDataSource
createCacheDataSource
(
)
{
return
onlineCacheDataSourceFactory
.
createDataSource
(
)
;
}
public
CacheDataSource
createOfflineCacheDataSource
(
)
{
return
offlineCacheDataSourceFactory
.
createDataSource
(
)
;
}
}
