package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
chunk
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
DummyTrackOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
TrackOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
SampleQueue
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
chunk
.
ChunkExtractorWrapper
.
TrackOutputProvider
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Log
;
public
final
class
BaseMediaChunkOutput
implements
TrackOutputProvider
{
private
static
final
String
TAG
=
"
BaseMediaChunkOutput
"
;
private
final
int
[
]
trackTypes
;
private
final
SampleQueue
[
]
sampleQueues
;
public
BaseMediaChunkOutput
(
int
[
]
trackTypes
SampleQueue
[
]
sampleQueues
)
{
this
.
trackTypes
=
trackTypes
;
this
.
sampleQueues
=
sampleQueues
;
}
Override
public
TrackOutput
track
(
int
id
int
type
)
{
for
(
int
i
=
0
;
i
<
trackTypes
.
length
;
i
+
+
)
{
if
(
type
=
=
trackTypes
[
i
]
)
{
return
sampleQueues
[
i
]
;
}
}
Log
.
e
(
TAG
"
Unmatched
track
of
type
:
"
+
type
)
;
return
new
DummyTrackOutput
(
)
;
}
public
int
[
]
getWriteIndices
(
)
{
int
[
]
writeIndices
=
new
int
[
sampleQueues
.
length
]
;
for
(
int
i
=
0
;
i
<
sampleQueues
.
length
;
i
+
+
)
{
if
(
sampleQueues
[
i
]
!
=
null
)
{
writeIndices
[
i
]
=
sampleQueues
[
i
]
.
getWriteIndex
(
)
;
}
}
return
writeIndices
;
}
public
void
setSampleOffsetUs
(
long
sampleOffsetUs
)
{
for
(
SampleQueue
sampleQueue
:
sampleQueues
)
{
if
(
sampleQueue
!
=
null
)
{
sampleQueue
.
setSampleOffsetUs
(
sampleOffsetUs
)
;
}
}
}
}
