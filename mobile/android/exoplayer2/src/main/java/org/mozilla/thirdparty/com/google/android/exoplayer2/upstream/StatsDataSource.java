package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
;
import
android
.
net
.
Uri
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
public
final
class
StatsDataSource
implements
DataSource
{
private
final
DataSource
dataSource
;
private
long
bytesRead
;
private
Uri
lastOpenedUri
;
private
Map
<
String
List
<
String
>
>
lastResponseHeaders
;
public
StatsDataSource
(
DataSource
dataSource
)
{
this
.
dataSource
=
Assertions
.
checkNotNull
(
dataSource
)
;
lastOpenedUri
=
Uri
.
EMPTY
;
lastResponseHeaders
=
Collections
.
emptyMap
(
)
;
}
public
void
resetBytesRead
(
)
{
bytesRead
=
0
;
}
public
long
getBytesRead
(
)
{
return
bytesRead
;
}
public
Uri
getLastOpenedUri
(
)
{
return
lastOpenedUri
;
}
public
Map
<
String
List
<
String
>
>
getLastResponseHeaders
(
)
{
return
lastResponseHeaders
;
}
Override
public
void
addTransferListener
(
TransferListener
transferListener
)
{
dataSource
.
addTransferListener
(
transferListener
)
;
}
Override
public
long
open
(
DataSpec
dataSpec
)
throws
IOException
{
lastOpenedUri
=
dataSpec
.
uri
;
lastResponseHeaders
=
Collections
.
emptyMap
(
)
;
long
availableBytes
=
dataSource
.
open
(
dataSpec
)
;
lastOpenedUri
=
Assertions
.
checkNotNull
(
getUri
(
)
)
;
lastResponseHeaders
=
getResponseHeaders
(
)
;
return
availableBytes
;
}
Override
public
int
read
(
byte
[
]
buffer
int
offset
int
readLength
)
throws
IOException
{
int
bytesRead
=
dataSource
.
read
(
buffer
offset
readLength
)
;
if
(
bytesRead
!
=
C
.
RESULT_END_OF_INPUT
)
{
this
.
bytesRead
+
=
bytesRead
;
}
return
bytesRead
;
}
Override
Nullable
public
Uri
getUri
(
)
{
return
dataSource
.
getUri
(
)
;
}
Override
public
Map
<
String
List
<
String
>
>
getResponseHeaders
(
)
{
return
dataSource
.
getResponseHeaders
(
)
;
}
Override
public
void
close
(
)
throws
IOException
{
dataSource
.
close
(
)
;
}
}
