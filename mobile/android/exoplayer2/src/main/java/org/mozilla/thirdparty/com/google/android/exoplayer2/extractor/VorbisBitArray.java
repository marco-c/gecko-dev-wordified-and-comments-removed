package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
public
final
class
VorbisBitArray
{
private
final
byte
[
]
data
;
private
final
int
byteLimit
;
private
int
byteOffset
;
private
int
bitOffset
;
public
VorbisBitArray
(
byte
[
]
data
)
{
this
.
data
=
data
;
byteLimit
=
data
.
length
;
}
public
void
reset
(
)
{
byteOffset
=
0
;
bitOffset
=
0
;
}
public
boolean
readBit
(
)
{
boolean
returnValue
=
(
(
(
data
[
byteOffset
]
&
0xFF
)
>
>
bitOffset
)
&
0x01
)
=
=
1
;
skipBits
(
1
)
;
return
returnValue
;
}
public
int
readBits
(
int
numBits
)
{
int
tempByteOffset
=
byteOffset
;
int
bitsRead
=
Math
.
min
(
numBits
8
-
bitOffset
)
;
int
returnValue
=
(
(
data
[
tempByteOffset
+
+
]
&
0xFF
)
>
>
bitOffset
)
&
(
0xFF
>
>
(
8
-
bitsRead
)
)
;
while
(
bitsRead
<
numBits
)
{
returnValue
|
=
(
data
[
tempByteOffset
+
+
]
&
0xFF
)
<
<
bitsRead
;
bitsRead
+
=
8
;
}
returnValue
&
=
0xFFFFFFFF
>
>
>
(
32
-
numBits
)
;
skipBits
(
numBits
)
;
return
returnValue
;
}
public
void
skipBits
(
int
numBits
)
{
int
numBytes
=
numBits
/
8
;
byteOffset
+
=
numBytes
;
bitOffset
+
=
numBits
-
(
numBytes
*
8
)
;
if
(
bitOffset
>
7
)
{
byteOffset
+
+
;
bitOffset
-
=
8
;
}
assertValidOffset
(
)
;
}
public
int
getPosition
(
)
{
return
byteOffset
*
8
+
bitOffset
;
}
public
void
setPosition
(
int
position
)
{
byteOffset
=
position
/
8
;
bitOffset
=
position
-
(
byteOffset
*
8
)
;
assertValidOffset
(
)
;
}
public
int
bitsLeft
(
)
{
return
(
byteLimit
-
byteOffset
)
*
8
-
bitOffset
;
}
private
void
assertValidOffset
(
)
{
Assertions
.
checkState
(
byteOffset
>
=
0
&
&
(
byteOffset
<
byteLimit
|
|
(
byteOffset
=
=
byteLimit
&
&
bitOffset
=
=
0
)
)
)
;
}
}
