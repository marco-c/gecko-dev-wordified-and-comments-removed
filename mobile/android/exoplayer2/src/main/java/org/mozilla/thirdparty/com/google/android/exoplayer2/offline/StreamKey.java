package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
offline
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
androidx
.
annotation
.
Nullable
;
public
final
class
StreamKey
implements
Comparable
<
StreamKey
>
Parcelable
{
public
final
int
periodIndex
;
public
final
int
groupIndex
;
public
final
int
trackIndex
;
public
StreamKey
(
int
groupIndex
int
trackIndex
)
{
this
(
0
groupIndex
trackIndex
)
;
}
public
StreamKey
(
int
periodIndex
int
groupIndex
int
trackIndex
)
{
this
.
periodIndex
=
periodIndex
;
this
.
groupIndex
=
groupIndex
;
this
.
trackIndex
=
trackIndex
;
}
StreamKey
(
Parcel
in
)
{
periodIndex
=
in
.
readInt
(
)
;
groupIndex
=
in
.
readInt
(
)
;
trackIndex
=
in
.
readInt
(
)
;
}
Override
public
String
toString
(
)
{
return
periodIndex
+
"
.
"
+
groupIndex
+
"
.
"
+
trackIndex
;
}
Override
public
boolean
equals
(
Nullable
Object
o
)
{
if
(
this
=
=
o
)
{
return
true
;
}
if
(
o
=
=
null
|
|
getClass
(
)
!
=
o
.
getClass
(
)
)
{
return
false
;
}
StreamKey
that
=
(
StreamKey
)
o
;
return
periodIndex
=
=
that
.
periodIndex
&
&
groupIndex
=
=
that
.
groupIndex
&
&
trackIndex
=
=
that
.
trackIndex
;
}
Override
public
int
hashCode
(
)
{
int
result
=
periodIndex
;
result
=
31
*
result
+
groupIndex
;
result
=
31
*
result
+
trackIndex
;
return
result
;
}
Override
public
int
compareTo
(
StreamKey
o
)
{
int
result
=
periodIndex
-
o
.
periodIndex
;
if
(
result
=
=
0
)
{
result
=
groupIndex
-
o
.
groupIndex
;
if
(
result
=
=
0
)
{
result
=
trackIndex
-
o
.
trackIndex
;
}
}
return
result
;
}
Override
public
int
describeContents
(
)
{
return
0
;
}
Override
public
void
writeToParcel
(
Parcel
dest
int
flags
)
{
dest
.
writeInt
(
periodIndex
)
;
dest
.
writeInt
(
groupIndex
)
;
dest
.
writeInt
(
trackIndex
)
;
}
public
static
final
Parcelable
.
Creator
<
StreamKey
>
CREATOR
=
new
Parcelable
.
Creator
<
StreamKey
>
(
)
{
Override
public
StreamKey
createFromParcel
(
Parcel
in
)
{
return
new
StreamKey
(
in
)
;
}
Override
public
StreamKey
[
]
newArray
(
int
size
)
{
return
new
StreamKey
[
size
]
;
}
}
;
}
