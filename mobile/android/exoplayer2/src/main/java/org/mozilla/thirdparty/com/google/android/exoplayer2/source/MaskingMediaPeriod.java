package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
static
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
.
castNonNull
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
SeekParameters
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
MediaSource
.
MediaPeriodId
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
trackselection
.
TrackSelection
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
Allocator
;
import
java
.
io
.
IOException
;
import
org
.
checkerframework
.
checker
.
nullness
.
compatqual
.
NullableType
;
public
final
class
MaskingMediaPeriod
implements
MediaPeriod
MediaPeriod
.
Callback
{
public
interface
PrepareErrorListener
{
void
onPrepareError
(
MediaPeriodId
mediaPeriodId
IOException
exception
)
;
}
public
final
MediaSource
mediaSource
;
public
final
MediaPeriodId
id
;
private
final
Allocator
allocator
;
Nullable
private
MediaPeriod
mediaPeriod
;
Nullable
private
Callback
callback
;
private
long
preparePositionUs
;
Nullable
private
PrepareErrorListener
listener
;
private
boolean
notifiedPrepareError
;
private
long
preparePositionOverrideUs
;
public
MaskingMediaPeriod
(
MediaSource
mediaSource
MediaPeriodId
id
Allocator
allocator
long
preparePositionUs
)
{
this
.
id
=
id
;
this
.
allocator
=
allocator
;
this
.
mediaSource
=
mediaSource
;
this
.
preparePositionUs
=
preparePositionUs
;
preparePositionOverrideUs
=
C
.
TIME_UNSET
;
}
public
void
setPrepareErrorListener
(
PrepareErrorListener
listener
)
{
this
.
listener
=
listener
;
}
public
long
getPreparePositionUs
(
)
{
return
preparePositionUs
;
}
public
void
overridePreparePositionUs
(
long
preparePositionUs
)
{
preparePositionOverrideUs
=
preparePositionUs
;
}
public
void
createPeriod
(
MediaPeriodId
id
)
{
long
preparePositionUs
=
getPreparePositionWithOverride
(
this
.
preparePositionUs
)
;
mediaPeriod
=
mediaSource
.
createPeriod
(
id
allocator
preparePositionUs
)
;
if
(
callback
!
=
null
)
{
mediaPeriod
.
prepare
(
this
preparePositionUs
)
;
}
}
public
void
releasePeriod
(
)
{
if
(
mediaPeriod
!
=
null
)
{
mediaSource
.
releasePeriod
(
mediaPeriod
)
;
}
}
Override
public
void
prepare
(
Callback
callback
long
preparePositionUs
)
{
this
.
callback
=
callback
;
if
(
mediaPeriod
!
=
null
)
{
mediaPeriod
.
prepare
(
this
getPreparePositionWithOverride
(
this
.
preparePositionUs
)
)
;
}
}
Override
public
void
maybeThrowPrepareError
(
)
throws
IOException
{
try
{
if
(
mediaPeriod
!
=
null
)
{
mediaPeriod
.
maybeThrowPrepareError
(
)
;
}
else
{
mediaSource
.
maybeThrowSourceInfoRefreshError
(
)
;
}
}
catch
(
final
IOException
e
)
{
if
(
listener
=
=
null
)
{
throw
e
;
}
if
(
!
notifiedPrepareError
)
{
notifiedPrepareError
=
true
;
listener
.
onPrepareError
(
id
e
)
;
}
}
}
Override
public
TrackGroupArray
getTrackGroups
(
)
{
return
castNonNull
(
mediaPeriod
)
.
getTrackGroups
(
)
;
}
Override
public
long
selectTracks
(
NullableType
TrackSelection
[
]
selections
boolean
[
]
mayRetainStreamFlags
NullableType
SampleStream
[
]
streams
boolean
[
]
streamResetFlags
long
positionUs
)
{
if
(
preparePositionOverrideUs
!
=
C
.
TIME_UNSET
&
&
positionUs
=
=
preparePositionUs
)
{
positionUs
=
preparePositionOverrideUs
;
preparePositionOverrideUs
=
C
.
TIME_UNSET
;
}
return
castNonNull
(
mediaPeriod
)
.
selectTracks
(
selections
mayRetainStreamFlags
streams
streamResetFlags
positionUs
)
;
}
Override
public
void
discardBuffer
(
long
positionUs
boolean
toKeyframe
)
{
castNonNull
(
mediaPeriod
)
.
discardBuffer
(
positionUs
toKeyframe
)
;
}
Override
public
long
readDiscontinuity
(
)
{
return
castNonNull
(
mediaPeriod
)
.
readDiscontinuity
(
)
;
}
Override
public
long
getBufferedPositionUs
(
)
{
return
castNonNull
(
mediaPeriod
)
.
getBufferedPositionUs
(
)
;
}
Override
public
long
seekToUs
(
long
positionUs
)
{
return
castNonNull
(
mediaPeriod
)
.
seekToUs
(
positionUs
)
;
}
Override
public
long
getAdjustedSeekPositionUs
(
long
positionUs
SeekParameters
seekParameters
)
{
return
castNonNull
(
mediaPeriod
)
.
getAdjustedSeekPositionUs
(
positionUs
seekParameters
)
;
}
Override
public
long
getNextLoadPositionUs
(
)
{
return
castNonNull
(
mediaPeriod
)
.
getNextLoadPositionUs
(
)
;
}
Override
public
void
reevaluateBuffer
(
long
positionUs
)
{
castNonNull
(
mediaPeriod
)
.
reevaluateBuffer
(
positionUs
)
;
}
Override
public
boolean
continueLoading
(
long
positionUs
)
{
return
mediaPeriod
!
=
null
&
&
mediaPeriod
.
continueLoading
(
positionUs
)
;
}
Override
public
boolean
isLoading
(
)
{
return
mediaPeriod
!
=
null
&
&
mediaPeriod
.
isLoading
(
)
;
}
Override
public
void
onContinueLoadingRequested
(
MediaPeriod
source
)
{
castNonNull
(
callback
)
.
onContinueLoadingRequested
(
this
)
;
}
Override
public
void
onPrepared
(
MediaPeriod
mediaPeriod
)
{
castNonNull
(
callback
)
.
onPrepared
(
this
)
;
}
private
long
getPreparePositionWithOverride
(
long
preparePositionUs
)
{
return
preparePositionOverrideUs
!
=
C
.
TIME_UNSET
?
preparePositionOverrideUs
:
preparePositionUs
;
}
}
