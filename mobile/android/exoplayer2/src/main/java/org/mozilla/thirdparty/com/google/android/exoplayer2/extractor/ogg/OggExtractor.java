package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ogg
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
ParserException
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
Extractor
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorInput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorsFactory
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
PositionHolder
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
TrackOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
ParsableByteArray
;
import
java
.
io
.
IOException
;
public
class
OggExtractor
implements
Extractor
{
public
static
final
ExtractorsFactory
FACTORY
=
(
)
-
>
new
Extractor
[
]
{
new
OggExtractor
(
)
}
;
private
static
final
int
MAX_VERIFICATION_BYTES
=
8
;
private
ExtractorOutput
output
;
private
StreamReader
streamReader
;
private
boolean
streamReaderInitialized
;
Override
public
boolean
sniff
(
ExtractorInput
input
)
throws
IOException
InterruptedException
{
try
{
return
sniffInternal
(
input
)
;
}
catch
(
ParserException
e
)
{
return
false
;
}
}
Override
public
void
init
(
ExtractorOutput
output
)
{
this
.
output
=
output
;
}
Override
public
void
seek
(
long
position
long
timeUs
)
{
if
(
streamReader
!
=
null
)
{
streamReader
.
seek
(
position
timeUs
)
;
}
}
Override
public
void
release
(
)
{
}
Override
public
int
read
(
ExtractorInput
input
PositionHolder
seekPosition
)
throws
IOException
InterruptedException
{
if
(
streamReader
=
=
null
)
{
if
(
!
sniffInternal
(
input
)
)
{
throw
new
ParserException
(
"
Failed
to
determine
bitstream
type
"
)
;
}
input
.
resetPeekPosition
(
)
;
}
if
(
!
streamReaderInitialized
)
{
TrackOutput
trackOutput
=
output
.
track
(
0
C
.
TRACK_TYPE_AUDIO
)
;
output
.
endTracks
(
)
;
streamReader
.
init
(
output
trackOutput
)
;
streamReaderInitialized
=
true
;
}
return
streamReader
.
read
(
input
seekPosition
)
;
}
private
boolean
sniffInternal
(
ExtractorInput
input
)
throws
IOException
InterruptedException
{
OggPageHeader
header
=
new
OggPageHeader
(
)
;
if
(
!
header
.
populate
(
input
true
)
|
|
(
header
.
type
&
0x02
)
!
=
0x02
)
{
return
false
;
}
int
length
=
Math
.
min
(
header
.
bodySize
MAX_VERIFICATION_BYTES
)
;
ParsableByteArray
scratch
=
new
ParsableByteArray
(
length
)
;
input
.
peekFully
(
scratch
.
data
0
length
)
;
if
(
FlacReader
.
verifyBitstreamType
(
resetPosition
(
scratch
)
)
)
{
streamReader
=
new
FlacReader
(
)
;
}
else
if
(
VorbisReader
.
verifyBitstreamType
(
resetPosition
(
scratch
)
)
)
{
streamReader
=
new
VorbisReader
(
)
;
}
else
if
(
OpusReader
.
verifyBitstreamType
(
resetPosition
(
scratch
)
)
)
{
streamReader
=
new
OpusReader
(
)
;
}
else
{
return
false
;
}
return
true
;
}
private
static
ParsableByteArray
resetPosition
(
ParsableByteArray
scratch
)
{
scratch
.
setPosition
(
0
)
;
return
scratch
;
}
}
