package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
audio
;
import
android
.
media
.
AudioTrack
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
PlaybackParameters
;
import
java
.
nio
.
ByteBuffer
;
public
interface
AudioSink
{
interface
Listener
{
void
onAudioSessionId
(
int
audioSessionId
)
;
void
onPositionDiscontinuity
(
)
;
void
onUnderrun
(
int
bufferSize
long
bufferSizeMs
long
elapsedSinceLastFeedMs
)
;
}
final
class
ConfigurationException
extends
Exception
{
public
ConfigurationException
(
Throwable
cause
)
{
super
(
cause
)
;
}
public
ConfigurationException
(
String
message
)
{
super
(
message
)
;
}
}
final
class
InitializationException
extends
Exception
{
public
final
int
audioTrackState
;
public
InitializationException
(
int
audioTrackState
int
sampleRate
int
channelConfig
int
bufferSize
)
{
super
(
"
AudioTrack
init
failed
:
"
+
audioTrackState
+
"
Config
(
"
+
sampleRate
+
"
"
+
channelConfig
+
"
"
+
bufferSize
+
"
)
"
)
;
this
.
audioTrackState
=
audioTrackState
;
}
}
final
class
WriteException
extends
Exception
{
public
final
int
errorCode
;
public
WriteException
(
int
errorCode
)
{
super
(
"
AudioTrack
write
failed
:
"
+
errorCode
)
;
this
.
errorCode
=
errorCode
;
}
}
long
CURRENT_POSITION_NOT_SET
=
Long
.
MIN_VALUE
;
void
setListener
(
Listener
listener
)
;
boolean
supportsOutput
(
int
channelCount
C
.
Encoding
int
encoding
)
;
long
getCurrentPositionUs
(
boolean
sourceEnded
)
;
void
configure
(
C
.
Encoding
int
inputEncoding
int
inputChannelCount
int
inputSampleRate
int
specifiedBufferSize
Nullable
int
[
]
outputChannels
int
trimStartFrames
int
trimEndFrames
)
throws
ConfigurationException
;
void
play
(
)
;
void
handleDiscontinuity
(
)
;
boolean
handleBuffer
(
ByteBuffer
buffer
long
presentationTimeUs
)
throws
InitializationException
WriteException
;
void
playToEndOfStream
(
)
throws
WriteException
;
boolean
isEnded
(
)
;
boolean
hasPendingData
(
)
;
void
setPlaybackParameters
(
PlaybackParameters
playbackParameters
)
;
PlaybackParameters
getPlaybackParameters
(
)
;
void
setAudioAttributes
(
AudioAttributes
audioAttributes
)
;
void
setAudioSessionId
(
int
audioSessionId
)
;
void
setAuxEffectInfo
(
AuxEffectInfo
auxEffectInfo
)
;
void
enableTunnelingV21
(
int
tunnelingAudioSessionId
)
;
void
disableTunneling
(
)
;
void
setVolume
(
float
volume
)
;
void
pause
(
)
;
void
flush
(
)
;
void
reset
(
)
;
}
