package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
;
import
static
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
.
castNonNull
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
AssetFileDescriptor
;
import
android
.
content
.
res
.
Resources
;
import
android
.
net
.
Uri
;
import
android
.
text
.
TextUtils
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
io
.
EOFException
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
public
final
class
RawResourceDataSource
extends
BaseDataSource
{
public
static
class
RawResourceDataSourceException
extends
IOException
{
public
RawResourceDataSourceException
(
String
message
)
{
super
(
message
)
;
}
public
RawResourceDataSourceException
(
IOException
e
)
{
super
(
e
)
;
}
}
public
static
Uri
buildRawResourceUri
(
int
rawResourceId
)
{
return
Uri
.
parse
(
RAW_RESOURCE_SCHEME
+
"
:
/
/
/
"
+
rawResourceId
)
;
}
public
static
final
String
RAW_RESOURCE_SCHEME
=
"
rawresource
"
;
private
final
Resources
resources
;
Nullable
private
Uri
uri
;
Nullable
private
AssetFileDescriptor
assetFileDescriptor
;
Nullable
private
InputStream
inputStream
;
private
long
bytesRemaining
;
private
boolean
opened
;
public
RawResourceDataSource
(
Context
context
)
{
super
(
false
)
;
this
.
resources
=
context
.
getResources
(
)
;
}
Override
public
long
open
(
DataSpec
dataSpec
)
throws
RawResourceDataSourceException
{
try
{
Uri
uri
=
dataSpec
.
uri
;
this
.
uri
=
uri
;
if
(
!
TextUtils
.
equals
(
RAW_RESOURCE_SCHEME
uri
.
getScheme
(
)
)
)
{
throw
new
RawResourceDataSourceException
(
"
URI
must
use
scheme
"
+
RAW_RESOURCE_SCHEME
)
;
}
int
resourceId
;
try
{
resourceId
=
Integer
.
parseInt
(
Assertions
.
checkNotNull
(
uri
.
getLastPathSegment
(
)
)
)
;
}
catch
(
NumberFormatException
e
)
{
throw
new
RawResourceDataSourceException
(
"
Resource
identifier
must
be
an
integer
.
"
)
;
}
transferInitializing
(
dataSpec
)
;
AssetFileDescriptor
assetFileDescriptor
=
resources
.
openRawResourceFd
(
resourceId
)
;
this
.
assetFileDescriptor
=
assetFileDescriptor
;
if
(
assetFileDescriptor
=
=
null
)
{
throw
new
RawResourceDataSourceException
(
"
Resource
is
compressed
:
"
+
uri
)
;
}
FileInputStream
inputStream
=
new
FileInputStream
(
assetFileDescriptor
.
getFileDescriptor
(
)
)
;
this
.
inputStream
=
inputStream
;
inputStream
.
skip
(
assetFileDescriptor
.
getStartOffset
(
)
)
;
long
skipped
=
inputStream
.
skip
(
dataSpec
.
position
)
;
if
(
skipped
<
dataSpec
.
position
)
{
throw
new
EOFException
(
)
;
}
if
(
dataSpec
.
length
!
=
C
.
LENGTH_UNSET
)
{
bytesRemaining
=
dataSpec
.
length
;
}
else
{
long
assetFileDescriptorLength
=
assetFileDescriptor
.
getLength
(
)
;
bytesRemaining
=
assetFileDescriptorLength
=
=
AssetFileDescriptor
.
UNKNOWN_LENGTH
?
C
.
LENGTH_UNSET
:
(
assetFileDescriptorLength
-
dataSpec
.
position
)
;
}
}
catch
(
IOException
e
)
{
throw
new
RawResourceDataSourceException
(
e
)
;
}
opened
=
true
;
transferStarted
(
dataSpec
)
;
return
bytesRemaining
;
}
Override
public
int
read
(
byte
[
]
buffer
int
offset
int
readLength
)
throws
RawResourceDataSourceException
{
if
(
readLength
=
=
0
)
{
return
0
;
}
else
if
(
bytesRemaining
=
=
0
)
{
return
C
.
RESULT_END_OF_INPUT
;
}
int
bytesRead
;
try
{
int
bytesToRead
=
bytesRemaining
=
=
C
.
LENGTH_UNSET
?
readLength
:
(
int
)
Math
.
min
(
bytesRemaining
readLength
)
;
bytesRead
=
castNonNull
(
inputStream
)
.
read
(
buffer
offset
bytesToRead
)
;
}
catch
(
IOException
e
)
{
throw
new
RawResourceDataSourceException
(
e
)
;
}
if
(
bytesRead
=
=
-
1
)
{
if
(
bytesRemaining
!
=
C
.
LENGTH_UNSET
)
{
throw
new
RawResourceDataSourceException
(
new
EOFException
(
)
)
;
}
return
C
.
RESULT_END_OF_INPUT
;
}
if
(
bytesRemaining
!
=
C
.
LENGTH_UNSET
)
{
bytesRemaining
-
=
bytesRead
;
}
bytesTransferred
(
bytesRead
)
;
return
bytesRead
;
}
Override
Nullable
public
Uri
getUri
(
)
{
return
uri
;
}
SuppressWarnings
(
"
Finally
"
)
Override
public
void
close
(
)
throws
RawResourceDataSourceException
{
uri
=
null
;
try
{
if
(
inputStream
!
=
null
)
{
inputStream
.
close
(
)
;
}
}
catch
(
IOException
e
)
{
throw
new
RawResourceDataSourceException
(
e
)
;
}
finally
{
inputStream
=
null
;
try
{
if
(
assetFileDescriptor
!
=
null
)
{
assetFileDescriptor
.
close
(
)
;
}
}
catch
(
IOException
e
)
{
throw
new
RawResourceDataSourceException
(
e
)
;
}
finally
{
assetFileDescriptor
=
null
;
if
(
opened
)
{
opened
=
false
;
transferEnded
(
)
;
}
}
}
}
}
