package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
Metadata
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
id3
.
CommentFrame
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
metadata
.
id3
.
InternalFrame
;
import
java
.
util
.
regex
.
Matcher
;
import
java
.
util
.
regex
.
Pattern
;
public
final
class
GaplessInfoHolder
{
private
static
final
String
GAPLESS_DOMAIN
=
"
com
.
apple
.
iTunes
"
;
private
static
final
String
GAPLESS_DESCRIPTION
=
"
iTunSMPB
"
;
private
static
final
Pattern
GAPLESS_COMMENT_PATTERN
=
Pattern
.
compile
(
"
^
[
0
-
9a
-
fA
-
F
]
{
8
}
(
[
0
-
9a
-
fA
-
F
]
{
8
}
)
(
[
0
-
9a
-
fA
-
F
]
{
8
}
)
"
)
;
public
int
encoderDelay
;
public
int
encoderPadding
;
public
GaplessInfoHolder
(
)
{
encoderDelay
=
Format
.
NO_VALUE
;
encoderPadding
=
Format
.
NO_VALUE
;
}
public
boolean
setFromXingHeaderValue
(
int
value
)
{
int
encoderDelay
=
value
>
>
12
;
int
encoderPadding
=
value
&
0x0FFF
;
if
(
encoderDelay
>
0
|
|
encoderPadding
>
0
)
{
this
.
encoderDelay
=
encoderDelay
;
this
.
encoderPadding
=
encoderPadding
;
return
true
;
}
return
false
;
}
public
boolean
setFromMetadata
(
Metadata
metadata
)
{
for
(
int
i
=
0
;
i
<
metadata
.
length
(
)
;
i
+
+
)
{
Metadata
.
Entry
entry
=
metadata
.
get
(
i
)
;
if
(
entry
instanceof
CommentFrame
)
{
CommentFrame
commentFrame
=
(
CommentFrame
)
entry
;
if
(
GAPLESS_DESCRIPTION
.
equals
(
commentFrame
.
description
)
&
&
setFromComment
(
commentFrame
.
text
)
)
{
return
true
;
}
}
else
if
(
entry
instanceof
InternalFrame
)
{
InternalFrame
internalFrame
=
(
InternalFrame
)
entry
;
if
(
GAPLESS_DOMAIN
.
equals
(
internalFrame
.
domain
)
&
&
GAPLESS_DESCRIPTION
.
equals
(
internalFrame
.
description
)
&
&
setFromComment
(
internalFrame
.
text
)
)
{
return
true
;
}
}
}
return
false
;
}
private
boolean
setFromComment
(
String
data
)
{
Matcher
matcher
=
GAPLESS_COMMENT_PATTERN
.
matcher
(
data
)
;
if
(
matcher
.
find
(
)
)
{
try
{
int
encoderDelay
=
Integer
.
parseInt
(
matcher
.
group
(
1
)
16
)
;
int
encoderPadding
=
Integer
.
parseInt
(
matcher
.
group
(
2
)
16
)
;
if
(
encoderDelay
>
0
|
|
encoderPadding
>
0
)
{
this
.
encoderDelay
=
encoderDelay
;
this
.
encoderPadding
=
encoderPadding
;
return
true
;
}
}
catch
(
NumberFormatException
e
)
{
}
}
return
false
;
}
public
boolean
hasGaplessInfo
(
)
{
return
encoderDelay
!
=
Format
.
NO_VALUE
&
&
encoderPadding
!
=
Format
.
NO_VALUE
;
}
}
