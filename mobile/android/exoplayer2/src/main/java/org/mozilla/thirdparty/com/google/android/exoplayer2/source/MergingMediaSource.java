package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
Allocator
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
TransferListener
;
import
java
.
io
.
IOException
;
import
java
.
lang
.
annotation
.
Documented
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Collections
;
public
final
class
MergingMediaSource
extends
CompositeMediaSource
<
Integer
>
{
public
static
final
class
IllegalMergeException
extends
IOException
{
Documented
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
REASON_PERIOD_COUNT_MISMATCH
}
)
public
interface
Reason
{
}
public
static
final
int
REASON_PERIOD_COUNT_MISMATCH
=
0
;
Reason
public
final
int
reason
;
public
IllegalMergeException
(
Reason
int
reason
)
{
this
.
reason
=
reason
;
}
}
private
static
final
int
PERIOD_COUNT_UNSET
=
-
1
;
private
final
MediaSource
[
]
mediaSources
;
private
final
Timeline
[
]
timelines
;
private
final
ArrayList
<
MediaSource
>
pendingTimelineSources
;
private
final
CompositeSequenceableLoaderFactory
compositeSequenceableLoaderFactory
;
private
int
periodCount
;
Nullable
private
IllegalMergeException
mergeError
;
public
MergingMediaSource
(
MediaSource
.
.
.
mediaSources
)
{
this
(
new
DefaultCompositeSequenceableLoaderFactory
(
)
mediaSources
)
;
}
public
MergingMediaSource
(
CompositeSequenceableLoaderFactory
compositeSequenceableLoaderFactory
MediaSource
.
.
.
mediaSources
)
{
this
.
mediaSources
=
mediaSources
;
this
.
compositeSequenceableLoaderFactory
=
compositeSequenceableLoaderFactory
;
pendingTimelineSources
=
new
ArrayList
<
>
(
Arrays
.
asList
(
mediaSources
)
)
;
periodCount
=
PERIOD_COUNT_UNSET
;
timelines
=
new
Timeline
[
mediaSources
.
length
]
;
}
Override
Nullable
public
Object
getTag
(
)
{
return
mediaSources
.
length
>
0
?
mediaSources
[
0
]
.
getTag
(
)
:
null
;
}
Override
protected
void
prepareSourceInternal
(
Nullable
TransferListener
mediaTransferListener
)
{
super
.
prepareSourceInternal
(
mediaTransferListener
)
;
for
(
int
i
=
0
;
i
<
mediaSources
.
length
;
i
+
+
)
{
prepareChildSource
(
i
mediaSources
[
i
]
)
;
}
}
Override
public
void
maybeThrowSourceInfoRefreshError
(
)
throws
IOException
{
if
(
mergeError
!
=
null
)
{
throw
mergeError
;
}
super
.
maybeThrowSourceInfoRefreshError
(
)
;
}
Override
public
MediaPeriod
createPeriod
(
MediaPeriodId
id
Allocator
allocator
long
startPositionUs
)
{
MediaPeriod
[
]
periods
=
new
MediaPeriod
[
mediaSources
.
length
]
;
int
periodIndex
=
timelines
[
0
]
.
getIndexOfPeriod
(
id
.
periodUid
)
;
for
(
int
i
=
0
;
i
<
periods
.
length
;
i
+
+
)
{
MediaPeriodId
childMediaPeriodId
=
id
.
copyWithPeriodUid
(
timelines
[
i
]
.
getUidOfPeriod
(
periodIndex
)
)
;
periods
[
i
]
=
mediaSources
[
i
]
.
createPeriod
(
childMediaPeriodId
allocator
startPositionUs
)
;
}
return
new
MergingMediaPeriod
(
compositeSequenceableLoaderFactory
periods
)
;
}
Override
public
void
releasePeriod
(
MediaPeriod
mediaPeriod
)
{
MergingMediaPeriod
mergingPeriod
=
(
MergingMediaPeriod
)
mediaPeriod
;
for
(
int
i
=
0
;
i
<
mediaSources
.
length
;
i
+
+
)
{
mediaSources
[
i
]
.
releasePeriod
(
mergingPeriod
.
periods
[
i
]
)
;
}
}
Override
protected
void
releaseSourceInternal
(
)
{
super
.
releaseSourceInternal
(
)
;
Arrays
.
fill
(
timelines
null
)
;
periodCount
=
PERIOD_COUNT_UNSET
;
mergeError
=
null
;
pendingTimelineSources
.
clear
(
)
;
Collections
.
addAll
(
pendingTimelineSources
mediaSources
)
;
}
Override
protected
void
onChildSourceInfoRefreshed
(
Integer
id
MediaSource
mediaSource
Timeline
timeline
)
{
if
(
mergeError
=
=
null
)
{
mergeError
=
checkTimelineMerges
(
timeline
)
;
}
if
(
mergeError
!
=
null
)
{
return
;
}
pendingTimelineSources
.
remove
(
mediaSource
)
;
timelines
[
id
]
=
timeline
;
if
(
pendingTimelineSources
.
isEmpty
(
)
)
{
refreshSourceInfo
(
timelines
[
0
]
)
;
}
}
Override
Nullable
protected
MediaPeriodId
getMediaPeriodIdForChildMediaPeriodId
(
Integer
id
MediaPeriodId
mediaPeriodId
)
{
return
id
=
=
0
?
mediaPeriodId
:
null
;
}
Nullable
private
IllegalMergeException
checkTimelineMerges
(
Timeline
timeline
)
{
if
(
periodCount
=
=
PERIOD_COUNT_UNSET
)
{
periodCount
=
timeline
.
getPeriodCount
(
)
;
}
else
if
(
timeline
.
getPeriodCount
(
)
!
=
periodCount
)
{
return
new
IllegalMergeException
(
IllegalMergeException
.
REASON_PERIOD_COUNT_MISMATCH
)
;
}
return
null
;
}
}
