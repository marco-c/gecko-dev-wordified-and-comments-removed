package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
drm
;
import
android
.
media
.
MediaDrm
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
io
.
IOException
;
import
java
.
lang
.
annotation
.
Documented
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
Map
;
public
interface
DrmSession
<
T
extends
ExoMediaCrypto
>
{
static
<
T
extends
ExoMediaCrypto
>
void
replaceSession
(
Nullable
DrmSession
<
T
>
previousSession
Nullable
DrmSession
<
T
>
newSession
)
{
if
(
previousSession
=
=
newSession
)
{
return
;
}
if
(
newSession
!
=
null
)
{
newSession
.
acquire
(
)
;
}
if
(
previousSession
!
=
null
)
{
previousSession
.
release
(
)
;
}
}
class
DrmSessionException
extends
IOException
{
public
DrmSessionException
(
Throwable
cause
)
{
super
(
cause
)
;
}
}
Documented
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
STATE_RELEASED
STATE_ERROR
STATE_OPENING
STATE_OPENED
STATE_OPENED_WITH_KEYS
}
)
interface
State
{
}
int
STATE_RELEASED
=
0
;
int
STATE_ERROR
=
1
;
int
STATE_OPENING
=
2
;
int
STATE_OPENED
=
3
;
int
STATE_OPENED_WITH_KEYS
=
4
;
State
int
getState
(
)
;
default
boolean
playClearSamplesWithoutKeys
(
)
{
return
false
;
}
Nullable
DrmSessionException
getError
(
)
;
Nullable
T
getMediaCrypto
(
)
;
Nullable
Map
<
String
String
>
queryKeyStatus
(
)
;
Nullable
byte
[
]
getOfflineLicenseKeySetId
(
)
;
void
acquire
(
)
;
void
release
(
)
;
}
