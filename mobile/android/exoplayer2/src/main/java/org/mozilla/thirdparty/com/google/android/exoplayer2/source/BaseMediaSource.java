package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Looper
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
TransferListener
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashSet
;
public
abstract
class
BaseMediaSource
implements
MediaSource
{
private
final
ArrayList
<
MediaSourceCaller
>
mediaSourceCallers
;
private
final
HashSet
<
MediaSourceCaller
>
enabledMediaSourceCallers
;
private
final
MediaSourceEventListener
.
EventDispatcher
eventDispatcher
;
Nullable
private
Looper
looper
;
Nullable
private
Timeline
timeline
;
public
BaseMediaSource
(
)
{
mediaSourceCallers
=
new
ArrayList
<
>
(
1
)
;
enabledMediaSourceCallers
=
new
HashSet
<
>
(
1
)
;
eventDispatcher
=
new
MediaSourceEventListener
.
EventDispatcher
(
)
;
}
protected
abstract
void
prepareSourceInternal
(
Nullable
TransferListener
mediaTransferListener
)
;
protected
void
enableInternal
(
)
{
}
protected
void
disableInternal
(
)
{
}
protected
abstract
void
releaseSourceInternal
(
)
;
protected
final
void
refreshSourceInfo
(
Timeline
timeline
)
{
this
.
timeline
=
timeline
;
for
(
MediaSourceCaller
caller
:
mediaSourceCallers
)
{
caller
.
onSourceInfoRefreshed
(
this
timeline
)
;
}
}
protected
final
MediaSourceEventListener
.
EventDispatcher
createEventDispatcher
(
Nullable
MediaPeriodId
mediaPeriodId
)
{
return
eventDispatcher
.
withParameters
(
0
mediaPeriodId
0
)
;
}
protected
final
MediaSourceEventListener
.
EventDispatcher
createEventDispatcher
(
MediaPeriodId
mediaPeriodId
long
mediaTimeOffsetMs
)
{
Assertions
.
checkArgument
(
mediaPeriodId
!
=
null
)
;
return
eventDispatcher
.
withParameters
(
0
mediaPeriodId
mediaTimeOffsetMs
)
;
}
protected
final
MediaSourceEventListener
.
EventDispatcher
createEventDispatcher
(
int
windowIndex
Nullable
MediaPeriodId
mediaPeriodId
long
mediaTimeOffsetMs
)
{
return
eventDispatcher
.
withParameters
(
windowIndex
mediaPeriodId
mediaTimeOffsetMs
)
;
}
protected
final
boolean
isEnabled
(
)
{
return
!
enabledMediaSourceCallers
.
isEmpty
(
)
;
}
Override
public
final
void
addEventListener
(
Handler
handler
MediaSourceEventListener
eventListener
)
{
eventDispatcher
.
addEventListener
(
handler
eventListener
)
;
}
Override
public
final
void
removeEventListener
(
MediaSourceEventListener
eventListener
)
{
eventDispatcher
.
removeEventListener
(
eventListener
)
;
}
Override
public
final
void
prepareSource
(
MediaSourceCaller
caller
Nullable
TransferListener
mediaTransferListener
)
{
Looper
looper
=
Looper
.
myLooper
(
)
;
Assertions
.
checkArgument
(
this
.
looper
=
=
null
|
|
this
.
looper
=
=
looper
)
;
Timeline
timeline
=
this
.
timeline
;
mediaSourceCallers
.
add
(
caller
)
;
if
(
this
.
looper
=
=
null
)
{
this
.
looper
=
looper
;
enabledMediaSourceCallers
.
add
(
caller
)
;
prepareSourceInternal
(
mediaTransferListener
)
;
}
else
if
(
timeline
!
=
null
)
{
enable
(
caller
)
;
caller
.
onSourceInfoRefreshed
(
this
timeline
)
;
}
}
Override
public
final
void
enable
(
MediaSourceCaller
caller
)
{
Assertions
.
checkNotNull
(
looper
)
;
boolean
wasDisabled
=
enabledMediaSourceCallers
.
isEmpty
(
)
;
enabledMediaSourceCallers
.
add
(
caller
)
;
if
(
wasDisabled
)
{
enableInternal
(
)
;
}
}
Override
public
final
void
disable
(
MediaSourceCaller
caller
)
{
boolean
wasEnabled
=
!
enabledMediaSourceCallers
.
isEmpty
(
)
;
enabledMediaSourceCallers
.
remove
(
caller
)
;
if
(
wasEnabled
&
&
enabledMediaSourceCallers
.
isEmpty
(
)
)
{
disableInternal
(
)
;
}
}
Override
public
final
void
releaseSource
(
MediaSourceCaller
caller
)
{
mediaSourceCallers
.
remove
(
caller
)
;
if
(
mediaSourceCallers
.
isEmpty
(
)
)
{
looper
=
null
;
timeline
=
null
;
enabledMediaSourceCallers
.
clear
(
)
;
releaseSourceInternal
(
)
;
}
else
{
disable
(
caller
)
;
}
}
}
