package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
chunk
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Format
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
DefaultExtractorInput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
ExtractorInput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
TrackOutput
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSource
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSpec
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
io
.
IOException
;
public
final
class
SingleSampleMediaChunk
extends
BaseMediaChunk
{
private
final
int
trackType
;
private
final
Format
sampleFormat
;
private
long
nextLoadPosition
;
private
boolean
loadCompleted
;
public
SingleSampleMediaChunk
(
DataSource
dataSource
DataSpec
dataSpec
Format
trackFormat
int
trackSelectionReason
Object
trackSelectionData
long
startTimeUs
long
endTimeUs
long
chunkIndex
int
trackType
Format
sampleFormat
)
{
super
(
dataSource
dataSpec
trackFormat
trackSelectionReason
trackSelectionData
startTimeUs
endTimeUs
C
.
TIME_UNSET
C
.
TIME_UNSET
chunkIndex
)
;
this
.
trackType
=
trackType
;
this
.
sampleFormat
=
sampleFormat
;
}
Override
public
boolean
isLoadCompleted
(
)
{
return
loadCompleted
;
}
Override
public
void
cancelLoad
(
)
{
}
SuppressWarnings
(
"
NonAtomicVolatileUpdate
"
)
Override
public
void
load
(
)
throws
IOException
InterruptedException
{
BaseMediaChunkOutput
output
=
getOutput
(
)
;
output
.
setSampleOffsetUs
(
0
)
;
TrackOutput
trackOutput
=
output
.
track
(
0
trackType
)
;
trackOutput
.
format
(
sampleFormat
)
;
try
{
DataSpec
loadDataSpec
=
dataSpec
.
subrange
(
nextLoadPosition
)
;
long
length
=
dataSource
.
open
(
loadDataSpec
)
;
if
(
length
!
=
C
.
LENGTH_UNSET
)
{
length
+
=
nextLoadPosition
;
}
ExtractorInput
extractorInput
=
new
DefaultExtractorInput
(
dataSource
nextLoadPosition
length
)
;
int
result
=
0
;
while
(
result
!
=
C
.
RESULT_END_OF_INPUT
)
{
nextLoadPosition
+
=
result
;
result
=
trackOutput
.
sampleData
(
extractorInput
Integer
.
MAX_VALUE
true
)
;
}
int
sampleSize
=
(
int
)
nextLoadPosition
;
trackOutput
.
sampleMetadata
(
startTimeUs
C
.
BUFFER_FLAG_KEY_FRAME
sampleSize
0
null
)
;
}
finally
{
Util
.
closeQuietly
(
dataSource
)
;
}
loadCompleted
=
true
;
}
}
