package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
wav
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
SeekMap
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
extractor
.
SeekPoint
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
final
class
WavSeekMap
implements
SeekMap
{
private
final
WavHeader
wavHeader
;
private
final
int
framesPerBlock
;
private
final
long
firstBlockPosition
;
private
final
long
blockCount
;
private
final
long
durationUs
;
public
WavSeekMap
(
WavHeader
wavHeader
int
framesPerBlock
long
dataStartPosition
long
dataEndPosition
)
{
this
.
wavHeader
=
wavHeader
;
this
.
framesPerBlock
=
framesPerBlock
;
this
.
firstBlockPosition
=
dataStartPosition
;
this
.
blockCount
=
(
dataEndPosition
-
dataStartPosition
)
/
wavHeader
.
blockSize
;
durationUs
=
blockIndexToTimeUs
(
blockCount
)
;
}
Override
public
boolean
isSeekable
(
)
{
return
true
;
}
Override
public
long
getDurationUs
(
)
{
return
durationUs
;
}
Override
public
SeekPoints
getSeekPoints
(
long
timeUs
)
{
long
blockIndex
=
(
timeUs
*
wavHeader
.
frameRateHz
)
/
(
C
.
MICROS_PER_SECOND
*
framesPerBlock
)
;
blockIndex
=
Util
.
constrainValue
(
blockIndex
0
blockCount
-
1
)
;
long
seekPosition
=
firstBlockPosition
+
(
blockIndex
*
wavHeader
.
blockSize
)
;
long
seekTimeUs
=
blockIndexToTimeUs
(
blockIndex
)
;
SeekPoint
seekPoint
=
new
SeekPoint
(
seekTimeUs
seekPosition
)
;
if
(
seekTimeUs
>
=
timeUs
|
|
blockIndex
=
=
blockCount
-
1
)
{
return
new
SeekPoints
(
seekPoint
)
;
}
else
{
long
secondBlockIndex
=
blockIndex
+
1
;
long
secondSeekPosition
=
firstBlockPosition
+
(
secondBlockIndex
*
wavHeader
.
blockSize
)
;
long
secondSeekTimeUs
=
blockIndexToTimeUs
(
secondBlockIndex
)
;
SeekPoint
secondSeekPoint
=
new
SeekPoint
(
secondSeekTimeUs
secondSeekPosition
)
;
return
new
SeekPoints
(
seekPoint
secondSeekPoint
)
;
}
}
private
long
blockIndexToTimeUs
(
long
blockIndex
)
{
return
Util
.
scaleLargeTimestamp
(
blockIndex
*
framesPerBlock
C
.
MICROS_PER_SECOND
wavHeader
.
frameRateHz
)
;
}
}
