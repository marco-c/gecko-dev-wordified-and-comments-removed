package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
;
import
androidx
.
annotation
.
Nullable
;
import
java
.
util
.
Arrays
;
import
org
.
checkerframework
.
checker
.
nullness
.
compatqual
.
NullableType
;
public
final
class
TimedValueQueue
<
V
>
{
private
static
final
int
INITIAL_BUFFER_SIZE
=
10
;
private
long
[
]
timestamps
;
private
NullableType
V
[
]
values
;
private
int
first
;
private
int
size
;
public
TimedValueQueue
(
)
{
this
(
INITIAL_BUFFER_SIZE
)
;
}
public
TimedValueQueue
(
int
initialBufferSize
)
{
timestamps
=
new
long
[
initialBufferSize
]
;
values
=
newArray
(
initialBufferSize
)
;
}
public
synchronized
void
add
(
long
timestamp
V
value
)
{
clearBufferOnTimeDiscontinuity
(
timestamp
)
;
doubleCapacityIfFull
(
)
;
addUnchecked
(
timestamp
value
)
;
}
public
synchronized
void
clear
(
)
{
first
=
0
;
size
=
0
;
Arrays
.
fill
(
values
null
)
;
}
public
synchronized
int
size
(
)
{
return
size
;
}
public
synchronized
Nullable
V
pollFloor
(
long
timestamp
)
{
return
poll
(
timestamp
true
)
;
}
public
synchronized
Nullable
V
poll
(
long
timestamp
)
{
return
poll
(
timestamp
false
)
;
}
Nullable
private
V
poll
(
long
timestamp
boolean
onlyOlder
)
{
V
value
=
null
;
long
previousTimeDiff
=
Long
.
MAX_VALUE
;
while
(
size
>
0
)
{
long
timeDiff
=
timestamp
-
timestamps
[
first
]
;
if
(
timeDiff
<
0
&
&
(
onlyOlder
|
|
-
timeDiff
>
=
previousTimeDiff
)
)
{
break
;
}
previousTimeDiff
=
timeDiff
;
value
=
values
[
first
]
;
values
[
first
]
=
null
;
first
=
(
first
+
1
)
%
values
.
length
;
size
-
-
;
}
return
value
;
}
private
void
clearBufferOnTimeDiscontinuity
(
long
timestamp
)
{
if
(
size
>
0
)
{
int
last
=
(
first
+
size
-
1
)
%
values
.
length
;
if
(
timestamp
<
=
timestamps
[
last
]
)
{
clear
(
)
;
}
}
}
private
void
doubleCapacityIfFull
(
)
{
int
capacity
=
values
.
length
;
if
(
size
<
capacity
)
{
return
;
}
int
newCapacity
=
capacity
*
2
;
long
[
]
newTimestamps
=
new
long
[
newCapacity
]
;
V
[
]
newValues
=
newArray
(
newCapacity
)
;
int
length
=
capacity
-
first
;
System
.
arraycopy
(
timestamps
first
newTimestamps
0
length
)
;
System
.
arraycopy
(
values
first
newValues
0
length
)
;
if
(
first
>
0
)
{
System
.
arraycopy
(
timestamps
0
newTimestamps
length
first
)
;
System
.
arraycopy
(
values
0
newValues
length
first
)
;
}
timestamps
=
newTimestamps
;
values
=
newValues
;
first
=
0
;
}
private
void
addUnchecked
(
long
timestamp
V
value
)
{
int
next
=
(
first
+
size
)
%
values
.
length
;
timestamps
[
next
]
=
timestamp
;
values
[
next
]
=
value
;
size
+
+
;
}
SuppressWarnings
(
"
unchecked
"
)
private
static
<
V
>
V
[
]
newArray
(
int
length
)
{
return
(
V
[
]
)
new
Object
[
length
]
;
}
}
