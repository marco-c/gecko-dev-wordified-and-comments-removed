package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
.
ads
;
import
android
.
net
.
Uri
;
import
androidx
.
annotation
.
CheckResult
;
import
androidx
.
annotation
.
IntDef
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
;
import
java
.
lang
.
annotation
.
Documented
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
import
java
.
util
.
Arrays
;
import
org
.
checkerframework
.
checker
.
nullness
.
compatqual
.
NullableType
;
public
final
class
AdPlaybackState
{
public
static
final
class
AdGroup
{
public
final
int
count
;
public
final
NullableType
Uri
[
]
uris
;
AdState
public
final
int
[
]
states
;
public
final
long
[
]
durationsUs
;
public
AdGroup
(
)
{
this
(
C
.
LENGTH_UNSET
new
int
[
0
]
new
Uri
[
0
]
new
long
[
0
]
)
;
}
private
AdGroup
(
int
count
AdState
int
[
]
states
NullableType
Uri
[
]
uris
long
[
]
durationsUs
)
{
Assertions
.
checkArgument
(
states
.
length
=
=
uris
.
length
)
;
this
.
count
=
count
;
this
.
states
=
states
;
this
.
uris
=
uris
;
this
.
durationsUs
=
durationsUs
;
}
public
int
getFirstAdIndexToPlay
(
)
{
return
getNextAdIndexToPlay
(
-
1
)
;
}
public
int
getNextAdIndexToPlay
(
int
lastPlayedAdIndex
)
{
int
nextAdIndexToPlay
=
lastPlayedAdIndex
+
1
;
while
(
nextAdIndexToPlay
<
states
.
length
)
{
if
(
states
[
nextAdIndexToPlay
]
=
=
AD_STATE_UNAVAILABLE
|
|
states
[
nextAdIndexToPlay
]
=
=
AD_STATE_AVAILABLE
)
{
break
;
}
nextAdIndexToPlay
+
+
;
}
return
nextAdIndexToPlay
;
}
public
boolean
hasUnplayedAds
(
)
{
return
count
=
=
C
.
LENGTH_UNSET
|
|
getFirstAdIndexToPlay
(
)
<
count
;
}
Override
public
boolean
equals
(
Nullable
Object
o
)
{
if
(
this
=
=
o
)
{
return
true
;
}
if
(
o
=
=
null
|
|
getClass
(
)
!
=
o
.
getClass
(
)
)
{
return
false
;
}
AdGroup
adGroup
=
(
AdGroup
)
o
;
return
count
=
=
adGroup
.
count
&
&
Arrays
.
equals
(
uris
adGroup
.
uris
)
&
&
Arrays
.
equals
(
states
adGroup
.
states
)
&
&
Arrays
.
equals
(
durationsUs
adGroup
.
durationsUs
)
;
}
Override
public
int
hashCode
(
)
{
int
result
=
count
;
result
=
31
*
result
+
Arrays
.
hashCode
(
uris
)
;
result
=
31
*
result
+
Arrays
.
hashCode
(
states
)
;
result
=
31
*
result
+
Arrays
.
hashCode
(
durationsUs
)
;
return
result
;
}
CheckResult
public
AdGroup
withAdCount
(
int
count
)
{
Assertions
.
checkArgument
(
this
.
count
=
=
C
.
LENGTH_UNSET
&
&
states
.
length
<
=
count
)
;
AdState
int
[
]
states
=
copyStatesWithSpaceForAdCount
(
this
.
states
count
)
;
long
[
]
durationsUs
=
copyDurationsUsWithSpaceForAdCount
(
this
.
durationsUs
count
)
;
NullableType
Uri
[
]
uris
=
Arrays
.
copyOf
(
this
.
uris
count
)
;
return
new
AdGroup
(
count
states
uris
durationsUs
)
;
}
CheckResult
public
AdGroup
withAdUri
(
Uri
uri
int
index
)
{
Assertions
.
checkArgument
(
count
=
=
C
.
LENGTH_UNSET
|
|
index
<
count
)
;
AdState
int
[
]
states
=
copyStatesWithSpaceForAdCount
(
this
.
states
index
+
1
)
;
Assertions
.
checkArgument
(
states
[
index
]
=
=
AD_STATE_UNAVAILABLE
)
;
long
[
]
durationsUs
=
this
.
durationsUs
.
length
=
=
states
.
length
?
this
.
durationsUs
:
copyDurationsUsWithSpaceForAdCount
(
this
.
durationsUs
states
.
length
)
;
NullableType
Uri
[
]
uris
=
Arrays
.
copyOf
(
this
.
uris
states
.
length
)
;
uris
[
index
]
=
uri
;
states
[
index
]
=
AD_STATE_AVAILABLE
;
return
new
AdGroup
(
count
states
uris
durationsUs
)
;
}
CheckResult
public
AdGroup
withAdState
(
AdState
int
state
int
index
)
{
Assertions
.
checkArgument
(
count
=
=
C
.
LENGTH_UNSET
|
|
index
<
count
)
;
AdState
int
[
]
states
=
copyStatesWithSpaceForAdCount
(
this
.
states
index
+
1
)
;
Assertions
.
checkArgument
(
states
[
index
]
=
=
AD_STATE_UNAVAILABLE
|
|
states
[
index
]
=
=
AD_STATE_AVAILABLE
|
|
states
[
index
]
=
=
state
)
;
long
[
]
durationsUs
=
this
.
durationsUs
.
length
=
=
states
.
length
?
this
.
durationsUs
:
copyDurationsUsWithSpaceForAdCount
(
this
.
durationsUs
states
.
length
)
;
NullableType
Uri
[
]
uris
=
this
.
uris
.
length
=
=
states
.
length
?
this
.
uris
:
Arrays
.
copyOf
(
this
.
uris
states
.
length
)
;
states
[
index
]
=
state
;
return
new
AdGroup
(
count
states
uris
durationsUs
)
;
}
CheckResult
public
AdGroup
withAdDurationsUs
(
long
[
]
durationsUs
)
{
Assertions
.
checkArgument
(
count
=
=
C
.
LENGTH_UNSET
|
|
durationsUs
.
length
<
=
this
.
uris
.
length
)
;
if
(
durationsUs
.
length
<
this
.
uris
.
length
)
{
durationsUs
=
copyDurationsUsWithSpaceForAdCount
(
durationsUs
uris
.
length
)
;
}
return
new
AdGroup
(
count
states
uris
durationsUs
)
;
}
CheckResult
public
AdGroup
withAllAdsSkipped
(
)
{
if
(
count
=
=
C
.
LENGTH_UNSET
)
{
return
new
AdGroup
(
0
new
int
[
0
]
new
Uri
[
0
]
new
long
[
0
]
)
;
}
int
count
=
this
.
states
.
length
;
AdState
int
[
]
states
=
Arrays
.
copyOf
(
this
.
states
count
)
;
for
(
int
i
=
0
;
i
<
count
;
i
+
+
)
{
if
(
states
[
i
]
=
=
AD_STATE_AVAILABLE
|
|
states
[
i
]
=
=
AD_STATE_UNAVAILABLE
)
{
states
[
i
]
=
AD_STATE_SKIPPED
;
}
}
return
new
AdGroup
(
count
states
uris
durationsUs
)
;
}
CheckResult
private
static
AdState
int
[
]
copyStatesWithSpaceForAdCount
(
AdState
int
[
]
states
int
count
)
{
int
oldStateCount
=
states
.
length
;
int
newStateCount
=
Math
.
max
(
count
oldStateCount
)
;
states
=
Arrays
.
copyOf
(
states
newStateCount
)
;
Arrays
.
fill
(
states
oldStateCount
newStateCount
AD_STATE_UNAVAILABLE
)
;
return
states
;
}
CheckResult
private
static
long
[
]
copyDurationsUsWithSpaceForAdCount
(
long
[
]
durationsUs
int
count
)
{
int
oldDurationsUsCount
=
durationsUs
.
length
;
int
newDurationsUsCount
=
Math
.
max
(
count
oldDurationsUsCount
)
;
durationsUs
=
Arrays
.
copyOf
(
durationsUs
newDurationsUsCount
)
;
Arrays
.
fill
(
durationsUs
oldDurationsUsCount
newDurationsUsCount
C
.
TIME_UNSET
)
;
return
durationsUs
;
}
}
Documented
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
AD_STATE_UNAVAILABLE
AD_STATE_AVAILABLE
AD_STATE_SKIPPED
AD_STATE_PLAYED
AD_STATE_ERROR
}
)
public
interface
AdState
{
}
public
static
final
int
AD_STATE_UNAVAILABLE
=
0
;
public
static
final
int
AD_STATE_AVAILABLE
=
1
;
public
static
final
int
AD_STATE_SKIPPED
=
2
;
public
static
final
int
AD_STATE_PLAYED
=
3
;
public
static
final
int
AD_STATE_ERROR
=
4
;
public
static
final
AdPlaybackState
NONE
=
new
AdPlaybackState
(
)
;
public
final
int
adGroupCount
;
public
final
long
[
]
adGroupTimesUs
;
public
final
AdGroup
[
]
adGroups
;
public
final
long
adResumePositionUs
;
public
final
long
contentDurationUs
;
public
AdPlaybackState
(
long
.
.
.
adGroupTimesUs
)
{
int
count
=
adGroupTimesUs
.
length
;
adGroupCount
=
count
;
this
.
adGroupTimesUs
=
Arrays
.
copyOf
(
adGroupTimesUs
count
)
;
this
.
adGroups
=
new
AdGroup
[
count
]
;
for
(
int
i
=
0
;
i
<
count
;
i
+
+
)
{
adGroups
[
i
]
=
new
AdGroup
(
)
;
}
adResumePositionUs
=
0
;
contentDurationUs
=
C
.
TIME_UNSET
;
}
private
AdPlaybackState
(
long
[
]
adGroupTimesUs
AdGroup
[
]
adGroups
long
adResumePositionUs
long
contentDurationUs
)
{
adGroupCount
=
adGroups
.
length
;
this
.
adGroupTimesUs
=
adGroupTimesUs
;
this
.
adGroups
=
adGroups
;
this
.
adResumePositionUs
=
adResumePositionUs
;
this
.
contentDurationUs
=
contentDurationUs
;
}
public
int
getAdGroupIndexForPositionUs
(
long
positionUs
)
{
int
index
=
adGroupTimesUs
.
length
-
1
;
while
(
index
>
=
0
&
&
isPositionBeforeAdGroup
(
positionUs
index
)
)
{
index
-
-
;
}
return
index
>
=
0
&
&
adGroups
[
index
]
.
hasUnplayedAds
(
)
?
index
:
C
.
INDEX_UNSET
;
}
public
int
getAdGroupIndexAfterPositionUs
(
long
positionUs
long
periodDurationUs
)
{
if
(
positionUs
=
=
C
.
TIME_END_OF_SOURCE
|
|
(
periodDurationUs
!
=
C
.
TIME_UNSET
&
&
positionUs
>
=
periodDurationUs
)
)
{
return
C
.
INDEX_UNSET
;
}
int
index
=
0
;
while
(
index
<
adGroupTimesUs
.
length
&
&
adGroupTimesUs
[
index
]
!
=
C
.
TIME_END_OF_SOURCE
&
&
(
positionUs
>
=
adGroupTimesUs
[
index
]
|
|
!
adGroups
[
index
]
.
hasUnplayedAds
(
)
)
)
{
index
+
+
;
}
return
index
<
adGroupTimesUs
.
length
?
index
:
C
.
INDEX_UNSET
;
}
CheckResult
public
AdPlaybackState
withAdCount
(
int
adGroupIndex
int
adCount
)
{
Assertions
.
checkArgument
(
adCount
>
0
)
;
if
(
adGroups
[
adGroupIndex
]
.
count
=
=
adCount
)
{
return
this
;
}
AdGroup
[
]
adGroups
=
Util
.
nullSafeArrayCopy
(
this
.
adGroups
this
.
adGroups
.
length
)
;
adGroups
[
adGroupIndex
]
=
this
.
adGroups
[
adGroupIndex
]
.
withAdCount
(
adCount
)
;
return
new
AdPlaybackState
(
adGroupTimesUs
adGroups
adResumePositionUs
contentDurationUs
)
;
}
CheckResult
public
AdPlaybackState
withAdUri
(
int
adGroupIndex
int
adIndexInAdGroup
Uri
uri
)
{
AdGroup
[
]
adGroups
=
Util
.
nullSafeArrayCopy
(
this
.
adGroups
this
.
adGroups
.
length
)
;
adGroups
[
adGroupIndex
]
=
adGroups
[
adGroupIndex
]
.
withAdUri
(
uri
adIndexInAdGroup
)
;
return
new
AdPlaybackState
(
adGroupTimesUs
adGroups
adResumePositionUs
contentDurationUs
)
;
}
CheckResult
public
AdPlaybackState
withPlayedAd
(
int
adGroupIndex
int
adIndexInAdGroup
)
{
AdGroup
[
]
adGroups
=
Util
.
nullSafeArrayCopy
(
this
.
adGroups
this
.
adGroups
.
length
)
;
adGroups
[
adGroupIndex
]
=
adGroups
[
adGroupIndex
]
.
withAdState
(
AD_STATE_PLAYED
adIndexInAdGroup
)
;
return
new
AdPlaybackState
(
adGroupTimesUs
adGroups
adResumePositionUs
contentDurationUs
)
;
}
CheckResult
public
AdPlaybackState
withSkippedAd
(
int
adGroupIndex
int
adIndexInAdGroup
)
{
AdGroup
[
]
adGroups
=
Util
.
nullSafeArrayCopy
(
this
.
adGroups
this
.
adGroups
.
length
)
;
adGroups
[
adGroupIndex
]
=
adGroups
[
adGroupIndex
]
.
withAdState
(
AD_STATE_SKIPPED
adIndexInAdGroup
)
;
return
new
AdPlaybackState
(
adGroupTimesUs
adGroups
adResumePositionUs
contentDurationUs
)
;
}
CheckResult
public
AdPlaybackState
withAdLoadError
(
int
adGroupIndex
int
adIndexInAdGroup
)
{
AdGroup
[
]
adGroups
=
Util
.
nullSafeArrayCopy
(
this
.
adGroups
this
.
adGroups
.
length
)
;
adGroups
[
adGroupIndex
]
=
adGroups
[
adGroupIndex
]
.
withAdState
(
AD_STATE_ERROR
adIndexInAdGroup
)
;
return
new
AdPlaybackState
(
adGroupTimesUs
adGroups
adResumePositionUs
contentDurationUs
)
;
}
CheckResult
public
AdPlaybackState
withSkippedAdGroup
(
int
adGroupIndex
)
{
AdGroup
[
]
adGroups
=
Util
.
nullSafeArrayCopy
(
this
.
adGroups
this
.
adGroups
.
length
)
;
adGroups
[
adGroupIndex
]
=
adGroups
[
adGroupIndex
]
.
withAllAdsSkipped
(
)
;
return
new
AdPlaybackState
(
adGroupTimesUs
adGroups
adResumePositionUs
contentDurationUs
)
;
}
CheckResult
public
AdPlaybackState
withAdDurationsUs
(
long
[
]
[
]
adDurationUs
)
{
AdGroup
[
]
adGroups
=
Util
.
nullSafeArrayCopy
(
this
.
adGroups
this
.
adGroups
.
length
)
;
for
(
int
adGroupIndex
=
0
;
adGroupIndex
<
adGroupCount
;
adGroupIndex
+
+
)
{
adGroups
[
adGroupIndex
]
=
adGroups
[
adGroupIndex
]
.
withAdDurationsUs
(
adDurationUs
[
adGroupIndex
]
)
;
}
return
new
AdPlaybackState
(
adGroupTimesUs
adGroups
adResumePositionUs
contentDurationUs
)
;
}
CheckResult
public
AdPlaybackState
withAdResumePositionUs
(
long
adResumePositionUs
)
{
if
(
this
.
adResumePositionUs
=
=
adResumePositionUs
)
{
return
this
;
}
else
{
return
new
AdPlaybackState
(
adGroupTimesUs
adGroups
adResumePositionUs
contentDurationUs
)
;
}
}
CheckResult
public
AdPlaybackState
withContentDurationUs
(
long
contentDurationUs
)
{
if
(
this
.
contentDurationUs
=
=
contentDurationUs
)
{
return
this
;
}
else
{
return
new
AdPlaybackState
(
adGroupTimesUs
adGroups
adResumePositionUs
contentDurationUs
)
;
}
}
Override
public
boolean
equals
(
Nullable
Object
o
)
{
if
(
this
=
=
o
)
{
return
true
;
}
if
(
o
=
=
null
|
|
getClass
(
)
!
=
o
.
getClass
(
)
)
{
return
false
;
}
AdPlaybackState
that
=
(
AdPlaybackState
)
o
;
return
adGroupCount
=
=
that
.
adGroupCount
&
&
adResumePositionUs
=
=
that
.
adResumePositionUs
&
&
contentDurationUs
=
=
that
.
contentDurationUs
&
&
Arrays
.
equals
(
adGroupTimesUs
that
.
adGroupTimesUs
)
&
&
Arrays
.
equals
(
adGroups
that
.
adGroups
)
;
}
Override
public
int
hashCode
(
)
{
int
result
=
adGroupCount
;
result
=
31
*
result
+
(
int
)
adResumePositionUs
;
result
=
31
*
result
+
(
int
)
contentDurationUs
;
result
=
31
*
result
+
Arrays
.
hashCode
(
adGroupTimesUs
)
;
result
=
31
*
result
+
Arrays
.
hashCode
(
adGroups
)
;
return
result
;
}
private
boolean
isPositionBeforeAdGroup
(
long
positionUs
int
adGroupIndex
)
{
if
(
positionUs
=
=
C
.
TIME_END_OF_SOURCE
)
{
return
false
;
}
long
adGroupPositionUs
=
adGroupTimesUs
[
adGroupIndex
]
;
if
(
adGroupPositionUs
=
=
C
.
TIME_END_OF_SOURCE
)
{
return
contentDurationUs
=
=
C
.
TIME_UNSET
|
|
positionUs
<
contentDurationUs
;
}
else
{
return
positionUs
<
adGroupPositionUs
;
}
}
}
