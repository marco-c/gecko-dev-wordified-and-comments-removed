package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
source
;
import
android
.
util
.
Pair
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
C
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Player
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
Timeline
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Assertions
;
abstract
class
AbstractConcatenatedTimeline
extends
Timeline
{
private
final
int
childCount
;
private
final
ShuffleOrder
shuffleOrder
;
private
final
boolean
isAtomic
;
SuppressWarnings
(
"
nullness
:
return
.
type
.
incompatible
"
)
public
static
Object
getChildTimelineUidFromConcatenatedUid
(
Object
concatenatedUid
)
{
return
(
(
Pair
<
?
?
>
)
concatenatedUid
)
.
first
;
}
SuppressWarnings
(
"
nullness
:
return
.
type
.
incompatible
"
)
public
static
Object
getChildPeriodUidFromConcatenatedUid
(
Object
concatenatedUid
)
{
return
(
(
Pair
<
?
?
>
)
concatenatedUid
)
.
second
;
}
public
static
Object
getConcatenatedUid
(
Object
childTimelineUid
Object
childPeriodOrWindowUid
)
{
return
Pair
.
create
(
childTimelineUid
childPeriodOrWindowUid
)
;
}
public
AbstractConcatenatedTimeline
(
boolean
isAtomic
ShuffleOrder
shuffleOrder
)
{
this
.
isAtomic
=
isAtomic
;
this
.
shuffleOrder
=
shuffleOrder
;
this
.
childCount
=
shuffleOrder
.
getLength
(
)
;
}
Override
public
int
getNextWindowIndex
(
int
windowIndex
Player
.
RepeatMode
int
repeatMode
boolean
shuffleModeEnabled
)
{
if
(
isAtomic
)
{
repeatMode
=
repeatMode
=
=
Player
.
REPEAT_MODE_ONE
?
Player
.
REPEAT_MODE_ALL
:
repeatMode
;
shuffleModeEnabled
=
false
;
}
int
childIndex
=
getChildIndexByWindowIndex
(
windowIndex
)
;
int
firstWindowIndexInChild
=
getFirstWindowIndexByChildIndex
(
childIndex
)
;
int
nextWindowIndexInChild
=
getTimelineByChildIndex
(
childIndex
)
.
getNextWindowIndex
(
windowIndex
-
firstWindowIndexInChild
repeatMode
=
=
Player
.
REPEAT_MODE_ALL
?
Player
.
REPEAT_MODE_OFF
:
repeatMode
shuffleModeEnabled
)
;
if
(
nextWindowIndexInChild
!
=
C
.
INDEX_UNSET
)
{
return
firstWindowIndexInChild
+
nextWindowIndexInChild
;
}
int
nextChildIndex
=
getNextChildIndex
(
childIndex
shuffleModeEnabled
)
;
while
(
nextChildIndex
!
=
C
.
INDEX_UNSET
&
&
getTimelineByChildIndex
(
nextChildIndex
)
.
isEmpty
(
)
)
{
nextChildIndex
=
getNextChildIndex
(
nextChildIndex
shuffleModeEnabled
)
;
}
if
(
nextChildIndex
!
=
C
.
INDEX_UNSET
)
{
return
getFirstWindowIndexByChildIndex
(
nextChildIndex
)
+
getTimelineByChildIndex
(
nextChildIndex
)
.
getFirstWindowIndex
(
shuffleModeEnabled
)
;
}
if
(
repeatMode
=
=
Player
.
REPEAT_MODE_ALL
)
{
return
getFirstWindowIndex
(
shuffleModeEnabled
)
;
}
return
C
.
INDEX_UNSET
;
}
Override
public
int
getPreviousWindowIndex
(
int
windowIndex
Player
.
RepeatMode
int
repeatMode
boolean
shuffleModeEnabled
)
{
if
(
isAtomic
)
{
repeatMode
=
repeatMode
=
=
Player
.
REPEAT_MODE_ONE
?
Player
.
REPEAT_MODE_ALL
:
repeatMode
;
shuffleModeEnabled
=
false
;
}
int
childIndex
=
getChildIndexByWindowIndex
(
windowIndex
)
;
int
firstWindowIndexInChild
=
getFirstWindowIndexByChildIndex
(
childIndex
)
;
int
previousWindowIndexInChild
=
getTimelineByChildIndex
(
childIndex
)
.
getPreviousWindowIndex
(
windowIndex
-
firstWindowIndexInChild
repeatMode
=
=
Player
.
REPEAT_MODE_ALL
?
Player
.
REPEAT_MODE_OFF
:
repeatMode
shuffleModeEnabled
)
;
if
(
previousWindowIndexInChild
!
=
C
.
INDEX_UNSET
)
{
return
firstWindowIndexInChild
+
previousWindowIndexInChild
;
}
int
previousChildIndex
=
getPreviousChildIndex
(
childIndex
shuffleModeEnabled
)
;
while
(
previousChildIndex
!
=
C
.
INDEX_UNSET
&
&
getTimelineByChildIndex
(
previousChildIndex
)
.
isEmpty
(
)
)
{
previousChildIndex
=
getPreviousChildIndex
(
previousChildIndex
shuffleModeEnabled
)
;
}
if
(
previousChildIndex
!
=
C
.
INDEX_UNSET
)
{
return
getFirstWindowIndexByChildIndex
(
previousChildIndex
)
+
getTimelineByChildIndex
(
previousChildIndex
)
.
getLastWindowIndex
(
shuffleModeEnabled
)
;
}
if
(
repeatMode
=
=
Player
.
REPEAT_MODE_ALL
)
{
return
getLastWindowIndex
(
shuffleModeEnabled
)
;
}
return
C
.
INDEX_UNSET
;
}
Override
public
int
getLastWindowIndex
(
boolean
shuffleModeEnabled
)
{
if
(
childCount
=
=
0
)
{
return
C
.
INDEX_UNSET
;
}
if
(
isAtomic
)
{
shuffleModeEnabled
=
false
;
}
int
lastChildIndex
=
shuffleModeEnabled
?
shuffleOrder
.
getLastIndex
(
)
:
childCount
-
1
;
while
(
getTimelineByChildIndex
(
lastChildIndex
)
.
isEmpty
(
)
)
{
lastChildIndex
=
getPreviousChildIndex
(
lastChildIndex
shuffleModeEnabled
)
;
if
(
lastChildIndex
=
=
C
.
INDEX_UNSET
)
{
return
C
.
INDEX_UNSET
;
}
}
return
getFirstWindowIndexByChildIndex
(
lastChildIndex
)
+
getTimelineByChildIndex
(
lastChildIndex
)
.
getLastWindowIndex
(
shuffleModeEnabled
)
;
}
Override
public
int
getFirstWindowIndex
(
boolean
shuffleModeEnabled
)
{
if
(
childCount
=
=
0
)
{
return
C
.
INDEX_UNSET
;
}
if
(
isAtomic
)
{
shuffleModeEnabled
=
false
;
}
int
firstChildIndex
=
shuffleModeEnabled
?
shuffleOrder
.
getFirstIndex
(
)
:
0
;
while
(
getTimelineByChildIndex
(
firstChildIndex
)
.
isEmpty
(
)
)
{
firstChildIndex
=
getNextChildIndex
(
firstChildIndex
shuffleModeEnabled
)
;
if
(
firstChildIndex
=
=
C
.
INDEX_UNSET
)
{
return
C
.
INDEX_UNSET
;
}
}
return
getFirstWindowIndexByChildIndex
(
firstChildIndex
)
+
getTimelineByChildIndex
(
firstChildIndex
)
.
getFirstWindowIndex
(
shuffleModeEnabled
)
;
}
Override
public
final
Window
getWindow
(
int
windowIndex
Window
window
long
defaultPositionProjectionUs
)
{
int
childIndex
=
getChildIndexByWindowIndex
(
windowIndex
)
;
int
firstWindowIndexInChild
=
getFirstWindowIndexByChildIndex
(
childIndex
)
;
int
firstPeriodIndexInChild
=
getFirstPeriodIndexByChildIndex
(
childIndex
)
;
getTimelineByChildIndex
(
childIndex
)
.
getWindow
(
windowIndex
-
firstWindowIndexInChild
window
defaultPositionProjectionUs
)
;
Object
childUid
=
getChildUidByChildIndex
(
childIndex
)
;
window
.
uid
=
Window
.
SINGLE_WINDOW_UID
.
equals
(
window
.
uid
)
?
childUid
:
getConcatenatedUid
(
childUid
window
.
uid
)
;
window
.
firstPeriodIndex
+
=
firstPeriodIndexInChild
;
window
.
lastPeriodIndex
+
=
firstPeriodIndexInChild
;
return
window
;
}
Override
public
final
Period
getPeriodByUid
(
Object
uid
Period
period
)
{
Object
childUid
=
getChildTimelineUidFromConcatenatedUid
(
uid
)
;
Object
periodUid
=
getChildPeriodUidFromConcatenatedUid
(
uid
)
;
int
childIndex
=
getChildIndexByChildUid
(
childUid
)
;
int
firstWindowIndexInChild
=
getFirstWindowIndexByChildIndex
(
childIndex
)
;
getTimelineByChildIndex
(
childIndex
)
.
getPeriodByUid
(
periodUid
period
)
;
period
.
windowIndex
+
=
firstWindowIndexInChild
;
period
.
uid
=
uid
;
return
period
;
}
Override
public
final
Period
getPeriod
(
int
periodIndex
Period
period
boolean
setIds
)
{
int
childIndex
=
getChildIndexByPeriodIndex
(
periodIndex
)
;
int
firstWindowIndexInChild
=
getFirstWindowIndexByChildIndex
(
childIndex
)
;
int
firstPeriodIndexInChild
=
getFirstPeriodIndexByChildIndex
(
childIndex
)
;
getTimelineByChildIndex
(
childIndex
)
.
getPeriod
(
periodIndex
-
firstPeriodIndexInChild
period
setIds
)
;
period
.
windowIndex
+
=
firstWindowIndexInChild
;
if
(
setIds
)
{
period
.
uid
=
getConcatenatedUid
(
getChildUidByChildIndex
(
childIndex
)
Assertions
.
checkNotNull
(
period
.
uid
)
)
;
}
return
period
;
}
Override
public
final
int
getIndexOfPeriod
(
Object
uid
)
{
if
(
!
(
uid
instanceof
Pair
)
)
{
return
C
.
INDEX_UNSET
;
}
Object
childUid
=
getChildTimelineUidFromConcatenatedUid
(
uid
)
;
Object
periodUid
=
getChildPeriodUidFromConcatenatedUid
(
uid
)
;
int
childIndex
=
getChildIndexByChildUid
(
childUid
)
;
if
(
childIndex
=
=
C
.
INDEX_UNSET
)
{
return
C
.
INDEX_UNSET
;
}
int
periodIndexInChild
=
getTimelineByChildIndex
(
childIndex
)
.
getIndexOfPeriod
(
periodUid
)
;
return
periodIndexInChild
=
=
C
.
INDEX_UNSET
?
C
.
INDEX_UNSET
:
getFirstPeriodIndexByChildIndex
(
childIndex
)
+
periodIndexInChild
;
}
Override
public
final
Object
getUidOfPeriod
(
int
periodIndex
)
{
int
childIndex
=
getChildIndexByPeriodIndex
(
periodIndex
)
;
int
firstPeriodIndexInChild
=
getFirstPeriodIndexByChildIndex
(
childIndex
)
;
Object
periodUidInChild
=
getTimelineByChildIndex
(
childIndex
)
.
getUidOfPeriod
(
periodIndex
-
firstPeriodIndexInChild
)
;
return
getConcatenatedUid
(
getChildUidByChildIndex
(
childIndex
)
periodUidInChild
)
;
}
protected
abstract
int
getChildIndexByPeriodIndex
(
int
periodIndex
)
;
protected
abstract
int
getChildIndexByWindowIndex
(
int
windowIndex
)
;
protected
abstract
int
getChildIndexByChildUid
(
Object
childUid
)
;
protected
abstract
Timeline
getTimelineByChildIndex
(
int
childIndex
)
;
protected
abstract
int
getFirstPeriodIndexByChildIndex
(
int
childIndex
)
;
protected
abstract
int
getFirstWindowIndexByChildIndex
(
int
childIndex
)
;
protected
abstract
Object
getChildUidByChildIndex
(
int
childIndex
)
;
private
int
getNextChildIndex
(
int
childIndex
boolean
shuffleModeEnabled
)
{
return
shuffleModeEnabled
?
shuffleOrder
.
getNextIndex
(
childIndex
)
:
childIndex
<
childCount
-
1
?
childIndex
+
1
:
C
.
INDEX_UNSET
;
}
private
int
getPreviousChildIndex
(
int
childIndex
boolean
shuffleModeEnabled
)
{
return
shuffleModeEnabled
?
shuffleOrder
.
getPreviousIndex
(
childIndex
)
:
childIndex
>
0
?
childIndex
-
1
:
C
.
INDEX_UNSET
;
}
}
