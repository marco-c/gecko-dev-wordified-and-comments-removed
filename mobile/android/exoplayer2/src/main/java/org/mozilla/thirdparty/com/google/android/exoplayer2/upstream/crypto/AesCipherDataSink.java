package
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
crypto
;
import
static
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
util
.
Util
.
castNonNull
;
import
androidx
.
annotation
.
Nullable
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSink
;
import
org
.
mozilla
.
thirdparty
.
com
.
google
.
android
.
exoplayer2
.
upstream
.
DataSpec
;
import
java
.
io
.
IOException
;
import
javax
.
crypto
.
Cipher
;
public
final
class
AesCipherDataSink
implements
DataSink
{
private
final
DataSink
wrappedDataSink
;
private
final
byte
[
]
secretKey
;
Nullable
private
final
byte
[
]
scratch
;
Nullable
private
AesFlushingCipher
cipher
;
public
AesCipherDataSink
(
byte
[
]
secretKey
DataSink
wrappedDataSink
)
{
this
(
secretKey
wrappedDataSink
null
)
;
}
public
AesCipherDataSink
(
byte
[
]
secretKey
DataSink
wrappedDataSink
Nullable
byte
[
]
scratch
)
{
this
.
wrappedDataSink
=
wrappedDataSink
;
this
.
secretKey
=
secretKey
;
this
.
scratch
=
scratch
;
}
Override
public
void
open
(
DataSpec
dataSpec
)
throws
IOException
{
wrappedDataSink
.
open
(
dataSpec
)
;
long
nonce
=
CryptoUtil
.
getFNV64Hash
(
dataSpec
.
key
)
;
cipher
=
new
AesFlushingCipher
(
Cipher
.
ENCRYPT_MODE
secretKey
nonce
dataSpec
.
absoluteStreamPosition
)
;
}
Override
public
void
write
(
byte
[
]
data
int
offset
int
length
)
throws
IOException
{
if
(
scratch
=
=
null
)
{
castNonNull
(
cipher
)
.
updateInPlace
(
data
offset
length
)
;
wrappedDataSink
.
write
(
data
offset
length
)
;
}
else
{
int
bytesProcessed
=
0
;
while
(
bytesProcessed
<
length
)
{
int
bytesToProcess
=
Math
.
min
(
length
-
bytesProcessed
scratch
.
length
)
;
castNonNull
(
cipher
)
.
update
(
data
offset
+
bytesProcessed
bytesToProcess
scratch
0
)
;
wrappedDataSink
.
write
(
scratch
0
bytesToProcess
)
;
bytesProcessed
+
=
bytesToProcess
;
}
}
}
Override
public
void
close
(
)
throws
IOException
{
cipher
=
null
;
wrappedDataSink
.
close
(
)
;
}
}
