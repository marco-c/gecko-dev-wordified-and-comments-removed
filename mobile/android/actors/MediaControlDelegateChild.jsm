"
use
strict
"
;
const
{
GeckoViewActorChild
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewActorChild
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
ChromeUtils
.
defineESModuleGetters
(
lazy
{
MediaUtils
:
"
resource
:
/
/
gre
/
modules
/
MediaUtils
.
sys
.
mjs
"
setTimeout
:
"
resource
:
/
/
gre
/
modules
/
Timer
.
sys
.
mjs
"
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
MediaControlDelegateChild
"
]
;
class
MediaControlDelegateChild
extends
GeckoViewActorChild
{
handleEvent
(
aEvent
)
{
debug
handleEvent
:
{
aEvent
.
type
}
;
switch
(
aEvent
.
type
)
{
case
"
MozDOMFullscreen
:
Entered
"
:
case
"
MozDOMFullscreen
:
Exited
"
:
this
.
handleFullscreenChanged
(
true
)
;
break
;
}
}
async
handleFullscreenChanged
(
retry
)
{
debug
handleFullscreenChanged
;
const
element
=
this
.
document
.
fullscreenElement
;
const
mediaElement
=
lazy
.
MediaUtils
.
findMediaElement
(
element
)
;
if
(
element
&
&
!
mediaElement
)
{
debug
No
fullscreen
media
element
found
.
;
}
const
activated
=
await
this
.
eventDispatcher
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
MediaSession
:
Fullscreen
"
metadata
:
lazy
.
MediaUtils
.
getMetadata
(
mediaElement
)
?
?
{
}
enabled
:
!
!
element
}
)
;
if
(
activated
)
{
return
;
}
if
(
retry
&
&
element
)
{
lazy
.
setTimeout
(
(
)
=
>
{
this
.
handleFullscreenChanged
(
false
)
;
}
100
)
;
}
}
}
const
{
debug
}
=
MediaControlDelegateChild
.
initLogging
(
"
MediaControlDelegateChild
"
)
;
