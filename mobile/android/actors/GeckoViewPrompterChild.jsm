"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewPrompterChild
"
]
;
const
{
GeckoViewActorChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewActorChild
.
jsm
"
)
;
class
GeckoViewPrompterChild
extends
GeckoViewActorChild
{
constructor
(
)
{
super
(
)
;
this
.
_prompts
=
new
Map
(
)
;
}
dismissPrompt
(
prompt
)
{
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
Prompt
:
Dismiss
"
id
:
prompt
.
id
}
)
;
this
.
unregisterPrompt
(
prompt
)
;
}
updatePrompt
(
message
)
{
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
Prompt
:
Update
"
prompt
:
message
}
)
;
}
unregisterPrompt
(
prompt
)
{
this
.
_prompts
.
delete
(
prompt
.
id
)
;
this
.
sendAsyncMessage
(
"
UnregisterPrompt
"
{
id
:
prompt
.
id
}
)
;
}
prompt
(
prompt
message
)
{
this
.
_prompts
.
set
(
prompt
.
id
prompt
)
;
this
.
sendAsyncMessage
(
"
RegisterPrompt
"
{
id
:
prompt
.
id
promptType
:
prompt
.
getPromptType
(
)
}
)
;
const
result
=
this
.
eventDispatcher
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
Prompt
"
prompt
:
message
}
)
;
this
.
sendAsyncMessage
(
"
NotifyPromptShow
"
{
id
:
prompt
.
id
}
)
;
return
result
;
}
async
receiveMessage
(
{
name
data
}
)
{
const
prompt
=
this
.
_prompts
.
get
(
data
.
id
)
;
if
(
!
prompt
)
{
return
;
}
switch
(
name
)
{
case
"
GetPromptText
"
:
{
return
prompt
.
getPromptText
(
)
;
}
case
"
GetInputText
"
:
{
return
prompt
.
getInputText
(
)
;
}
case
"
SetInputText
"
:
{
prompt
.
setInputText
(
data
.
text
)
;
break
;
}
case
"
AcceptPrompt
"
:
{
prompt
.
accept
(
)
;
break
;
}
case
"
DismissPrompt
"
:
{
prompt
.
dismiss
(
)
;
break
;
}
default
:
{
break
;
}
}
}
}
const
{
debug
warn
}
=
GeckoViewPrompterChild
.
initLogging
(
"
Prompter
"
)
;
