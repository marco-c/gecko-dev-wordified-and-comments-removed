"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewPermissionProcessParent
"
]
;
const
{
GeckoViewUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
PERM_CAMERA
=
"
android
.
permission
.
CAMERA
"
;
const
PERM_RECORD_AUDIO
=
"
android
.
permission
.
RECORD_AUDIO
"
;
class
GeckoViewPermissionProcessParent
extends
JSProcessActorParent
{
async
askDevicePermission
(
aType
)
{
const
perms
=
[
]
;
if
(
aType
=
=
=
"
video
"
|
|
aType
=
=
=
"
all
"
)
{
perms
.
push
(
PERM_CAMERA
)
;
}
if
(
aType
=
=
=
"
audio
"
|
|
aType
=
=
=
"
all
"
)
{
perms
.
push
(
PERM_RECORD_AUDIO
)
;
}
try
{
const
window
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
geckoview
"
)
;
const
windowActor
=
window
.
browsingContext
.
currentWindowGlobal
.
getActor
(
"
GeckoViewPermission
"
)
;
await
windowActor
.
getAppPermissions
(
perms
)
;
}
catch
(
error
)
{
warn
Error
getting
app
permission
:
{
error
}
;
}
}
receiveMessage
(
aMessage
)
{
debug
receiveMessage
{
aMessage
.
name
}
;
switch
(
aMessage
.
name
)
{
case
"
AskDevicePermission
"
:
{
return
this
.
askDevicePermission
(
aMessage
.
data
)
;
}
}
return
super
.
receiveMessage
(
aMessage
)
;
}
}
const
{
debug
warn
}
=
GeckoViewUtils
.
initLogging
(
"
GeckoViewPermissionProcess
"
)
;
