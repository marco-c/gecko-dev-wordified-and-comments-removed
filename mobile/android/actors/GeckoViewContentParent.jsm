"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewContentParent
"
]
;
const
{
GeckoViewUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
)
;
const
{
debug
warn
}
=
GeckoViewUtils
.
initLogging
(
"
GeckoViewContentParent
"
)
;
class
GeckoViewContentParent
extends
JSWindowActorParent
{
get
browser
(
)
{
return
this
.
browsingContext
.
top
.
embedderElement
;
}
async
collectState
(
)
{
return
this
.
sendQuery
(
"
CollectSessionState
"
)
;
}
restoreState
(
{
history
loadOptions
formdata
scrolldata
}
)
{
this
.
sendAsyncMessage
(
"
RestoreHistoryAndNavigate
"
{
history
loadOptions
}
)
;
if
(
!
formdata
&
&
!
scrolldata
)
{
return
;
}
const
self
=
this
;
const
progressFilter
=
Cc
[
"
mozilla
.
org
/
appshell
/
component
/
browser
-
status
-
filter
;
1
"
]
.
createInstance
(
Ci
.
nsIWebProgress
)
;
const
progressListener
=
{
QueryInterface
:
ChromeUtils
.
generateQI
(
[
"
nsIWebProgressListener
"
]
)
onLocationChange
(
aWebProgress
aRequest
aLocationURI
aFlags
)
{
self
.
sendAsyncMessage
(
"
RestoreSessionState
"
{
formdata
scrolldata
}
)
;
progressFilter
.
removeProgressListener
(
this
)
;
self
.
browser
.
removeProgressListener
(
progressFilter
)
;
}
}
;
const
flags
=
Ci
.
nsIWebProgress
.
NOTIFY_LOCATION
;
progressFilter
.
addProgressListener
(
progressListener
flags
)
;
this
.
browser
.
addProgressListener
(
progressFilter
flags
)
;
}
}
