"
use
strict
"
;
const
{
GeckoViewActorChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewActorChild
.
jsm
"
)
;
const
EXPORTED_SYMBOLS
=
[
"
GeckoViewClipboardPermissionChild
"
]
;
class
GeckoViewClipboardPermissionChild
extends
GeckoViewActorChild
{
constructor
(
)
{
super
(
)
;
this
.
_pendingPromise
=
null
;
}
async
promptPermissionForClipboardRead
(
)
{
const
uri
=
this
.
contentWindow
.
location
.
href
;
const
{
x
y
}
=
await
this
.
sendQuery
(
"
ClipboardReadTextPaste
:
GetLastPointerLocation
"
)
;
const
promise
=
this
.
eventDispatcher
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
ClipboardPermissionRequest
"
uri
screenPoint
:
{
x
y
}
}
)
;
this
.
_pendingPromise
=
promise
;
try
{
const
allowOrDeny
=
await
promise
;
if
(
this
.
_pendingPromise
!
=
=
promise
)
{
return
;
}
this
.
contentWindow
.
navigator
.
clipboard
.
onUserReactedToPasteMenuPopup
(
allowOrDeny
)
;
this
.
_pendingPromise
=
null
;
}
catch
(
error
)
{
debug
Permission
error
:
{
error
}
;
if
(
this
.
_pendingPromise
!
=
=
promise
)
{
return
;
}
this
.
contentWindow
.
navigator
.
clipboard
.
onUserReactedToPasteMenuPopup
(
false
)
;
this
.
_pendingPromise
=
null
;
}
}
handleEvent
(
aEvent
)
{
debug
handleEvent
:
{
aEvent
.
type
}
;
switch
(
aEvent
.
type
)
{
case
"
MozClipboardReadPaste
"
:
if
(
aEvent
.
isTrusted
)
{
this
.
promptPermissionForClipboardRead
(
)
;
}
break
;
case
"
pagehide
"
:
case
"
deactivate
"
:
case
"
mousedown
"
:
case
"
mozvisualscroll
"
:
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
DismissClipboardPermissionRequest
"
}
)
;
if
(
this
.
_pendingPromise
)
{
this
.
contentWindow
.
navigator
.
clipboard
.
onUserReactedToPasteMenuPopup
(
false
)
;
this
.
_pendingPromise
=
null
;
}
break
;
}
}
}
const
{
debug
warn
}
=
GeckoViewClipboardPermissionChild
.
initLogging
(
"
GeckoViewClipboardPermissionChild
"
)
;
