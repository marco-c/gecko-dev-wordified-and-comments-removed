const
{
GeckoViewActorChild
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewActorChild
.
jsm
"
)
;
const
{
LoadURIDelegate
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
LoadURIDelegate
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
E10SUtils
:
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
LoadURIDelegateChild
"
]
;
class
LoadURIDelegateChild
extends
GeckoViewActorChild
{
loadURI
(
aUri
aWhere
aFlags
aTriggeringPrincipal
)
{
debug
loadURI
:
uri
=
{
aUri
&
&
aUri
.
spec
}
where
=
{
aWhere
}
flags
=
0x
{
aFlags
.
toString
(
16
)
}
tp
=
{
aTriggeringPrincipal
&
&
aTriggeringPrincipal
.
spec
}
;
if
(
!
this
.
isContentWindow
)
{
debug
loadURI
:
not
a
content
window
;
return
false
;
}
if
(
WebExtensionPolicy
.
useRemoteWebExtensions
&
&
E10SUtils
.
getRemoteTypeForURIObject
(
aUri
true
false
Services
.
appinfo
.
remoteType
)
=
=
E10SUtils
.
EXTENSION_REMOTE_TYPE
)
{
debug
Bypassing
load
delegate
in
the
Extension
process
.
;
return
false
;
}
return
LoadURIDelegate
.
load
(
this
.
contentWindow
this
.
eventDispatcher
aUri
aWhere
aFlags
aTriggeringPrincipal
)
;
}
handleLoadError
(
aUri
aError
aErrorModule
)
{
debug
handleLoadError
:
uri
=
{
aUri
&
&
aUri
.
spec
}
displaySpec
=
{
aUri
&
&
aUri
.
displaySpec
}
error
=
{
aError
}
;
if
(
!
this
.
isContentWindow
)
{
debug
handleLoadError
:
not
a
content
window
;
return
null
;
}
if
(
aUri
&
&
LoadURIDelegate
.
isSafeBrowsingError
(
aError
)
)
{
const
message
=
{
type
:
"
GeckoView
:
ContentBlocked
"
uri
:
aUri
.
spec
error
:
aError
}
;
this
.
eventDispatcher
.
sendRequest
(
message
)
;
}
return
LoadURIDelegate
.
handleLoadError
(
this
.
contentWindow
this
.
eventDispatcher
aUri
aError
aErrorModule
)
;
}
}
LoadURIDelegateChild
.
prototype
.
QueryInterface
=
ChromeUtils
.
generateQI
(
[
"
nsILoadURIDelegate
"
]
)
;
const
{
debug
warn
}
=
LoadURIDelegateChild
.
initLogging
(
"
LoadURIDelegate
"
)
;
