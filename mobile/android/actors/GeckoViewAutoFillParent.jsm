"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewAutoFillParent
"
]
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
sys
.
mjs
"
)
;
const
{
GeckoViewActorParent
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewActorParent
.
sys
.
mjs
"
)
;
const
lazy
=
{
}
;
XPCOMUtils
.
defineLazyModuleGetters
(
lazy
{
gAutofillManager
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewAutofill
.
jsm
"
}
)
;
class
GeckoViewAutoFillParent
extends
GeckoViewActorParent
{
constructor
(
)
{
super
(
)
;
this
.
sessionId
=
Services
.
uuid
.
generateUUID
(
)
.
toString
(
)
.
slice
(
1
-
1
)
;
}
get
rootActor
(
)
{
return
this
.
browsingContext
.
top
.
currentWindowGlobal
.
getActor
(
"
GeckoViewAutoFill
"
)
;
}
get
autofill
(
)
{
return
lazy
.
gAutofillManager
.
get
(
this
.
sessionId
)
;
}
add
(
node
)
{
const
autofill
=
lazy
.
gAutofillManager
.
ensure
(
this
.
sessionId
this
.
eventDispatcher
)
;
return
autofill
?
.
add
(
node
)
;
}
focus
(
node
)
{
this
.
autofill
?
.
focus
(
node
)
;
}
commit
(
node
)
{
this
.
autofill
?
.
commit
(
node
)
;
}
update
(
node
)
{
this
.
autofill
?
.
update
(
node
)
;
}
clear
(
)
{
lazy
.
gAutofillManager
.
delete
(
this
.
sessionId
)
;
}
async
receiveMessage
(
aMessage
)
{
const
{
name
}
=
aMessage
;
debug
receiveMessage
{
name
}
;
switch
(
name
)
{
case
"
Add
"
:
{
return
this
.
rootActor
.
add
(
aMessage
.
data
.
node
)
;
}
case
"
Focus
"
:
{
this
.
rootActor
.
focus
(
aMessage
.
data
.
node
)
;
break
;
}
case
"
Update
"
:
{
this
.
rootActor
.
update
(
aMessage
.
data
.
node
)
;
break
;
}
case
"
Commit
"
:
{
this
.
rootActor
.
commit
(
aMessage
.
data
.
node
)
;
break
;
}
case
"
Clear
"
:
{
if
(
this
.
browsingContext
=
=
=
this
.
browsingContext
.
top
)
{
this
.
clear
(
)
;
}
break
;
}
}
return
null
;
}
}
const
{
debug
warn
}
=
GeckoViewAutoFillParent
.
initLogging
(
"
GeckoViewAutoFill
"
)
;
