"
use
strict
"
;
var
EXPORTED_SYMBOLS
=
[
"
GeckoViewPermissionParent
"
]
;
const
{
GeckoViewUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
const
{
GeckoViewActorParent
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewActorParent
.
jsm
"
)
;
class
GeckoViewPermissionParent
extends
GeckoViewActorParent
{
_appPermissions
=
{
}
;
async
getAppPermissions
(
aPermissions
)
{
const
perms
=
aPermissions
.
filter
(
perm
=
>
!
this
.
_appPermissions
[
perm
]
)
;
if
(
!
perms
.
length
)
{
return
Promise
.
resolve
(
true
)
;
}
const
granted
=
await
this
.
eventDispatcher
.
sendRequestForResult
(
{
type
:
"
GeckoView
:
AndroidPermission
"
perms
}
)
;
if
(
granted
)
{
for
(
const
perm
of
perms
)
{
this
.
_appPermissions
[
perm
]
=
true
;
}
}
return
granted
;
}
addCameraPermission
(
)
{
const
principal
=
Services
.
scriptSecurityManager
.
createContentPrincipalFromOrigin
(
this
.
browsingContext
.
top
.
currentWindowGlobal
.
documentPrincipal
.
origin
)
;
Services
.
perms
.
addFromPrincipal
(
principal
"
MediaManagerVideo
"
Services
.
perms
.
ALLOW_ACTION
Services
.
perms
.
EXPIRE_SESSION
)
;
return
null
;
}
receiveMessage
(
aMessage
)
{
debug
receiveMessage
{
aMessage
.
name
}
;
switch
(
aMessage
.
name
)
{
case
"
GetAppPermissions
"
:
{
return
this
.
getAppPermissions
(
aMessage
.
data
)
;
}
case
"
AddCameraPermission
"
:
{
return
this
.
addCameraPermission
(
)
;
}
}
return
super
.
receiveMessage
(
aMessage
)
;
}
}
const
{
debug
warn
}
=
GeckoViewUtils
.
initLogging
(
"
GeckoViewPermissionParent
"
)
;
