package
org
.
mozilla
.
gecko
.
tabqueue
;
import
org
.
mozilla
.
gecko
.
GeckoSharedPrefs
;
import
org
.
mozilla
.
gecko
.
Locales
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
android
.
annotation
.
TargetApi
;
import
android
.
content
.
Intent
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Build
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
Handler
;
import
android
.
provider
.
Settings
;
import
android
.
util
.
Log
;
import
android
.
view
.
MotionEvent
;
import
android
.
view
.
View
;
import
android
.
widget
.
Toast
;
import
android
.
animation
.
Animator
;
import
android
.
animation
.
AnimatorListenerAdapter
;
import
android
.
animation
.
AnimatorSet
;
import
android
.
animation
.
ObjectAnimator
;
public
class
TabQueuePrompt
extends
Locales
.
LocaleAwareActivity
{
public
static
final
String
LOGTAG
=
"
Gecko
"
+
TabQueuePrompt
.
class
.
getSimpleName
(
)
;
private
static
final
int
SETTINGS_REQUEST_CODE
=
1
;
private
boolean
isAnimating
;
private
View
containerView
;
private
View
buttonContainer
;
private
View
enabledConfirmation
;
Override
protected
void
onCreate
(
Bundle
savedInstanceState
)
{
super
.
onCreate
(
savedInstanceState
)
;
showTabQueueEnablePrompt
(
)
;
}
private
void
showTabQueueEnablePrompt
(
)
{
setContentView
(
R
.
layout
.
tab_queue_prompt
)
;
final
int
numberOfTimesTabQueuePromptSeen
=
GeckoSharedPrefs
.
forApp
(
this
)
.
getInt
(
TabQueueHelper
.
PREF_TAB_QUEUE_TIMES_PROMPT_SHOWN
0
)
;
final
View
okButton
=
findViewById
(
R
.
id
.
ok_button
)
;
okButton
.
setOnClickListener
(
new
View
.
OnClickListener
(
)
{
Override
public
void
onClick
(
View
v
)
{
onConfirmButtonPressed
(
)
;
Telemetry
.
addToHistogram
(
"
FENNEC_TABQUEUE_PROMPT_ENABLE_YES
"
numberOfTimesTabQueuePromptSeen
)
;
}
}
)
;
findViewById
(
R
.
id
.
cancel_button
)
.
setOnClickListener
(
new
View
.
OnClickListener
(
)
{
Override
public
void
onClick
(
View
v
)
{
Telemetry
.
addToHistogram
(
"
FENNEC_TABQUEUE_PROMPT_ENABLE_NO
"
numberOfTimesTabQueuePromptSeen
)
;
setResult
(
TabQueueHelper
.
TAB_QUEUE_NO
)
;
finish
(
)
;
}
}
)
;
final
View
settingsButton
=
findViewById
(
R
.
id
.
settings_button
)
;
settingsButton
.
setOnClickListener
(
new
View
.
OnClickListener
(
)
{
Override
public
void
onClick
(
View
v
)
{
onSettingsButtonPressed
(
)
;
}
}
)
;
final
View
tipView
=
findViewById
(
R
.
id
.
tip_text
)
;
final
View
settingsPermitView
=
findViewById
(
R
.
id
.
settings_permit_text
)
;
if
(
TabQueueHelper
.
canDrawOverlays
(
this
)
)
{
okButton
.
setVisibility
(
View
.
VISIBLE
)
;
settingsButton
.
setVisibility
(
View
.
GONE
)
;
tipView
.
setVisibility
(
View
.
VISIBLE
)
;
settingsPermitView
.
setVisibility
(
View
.
GONE
)
;
}
else
{
okButton
.
setVisibility
(
View
.
GONE
)
;
settingsButton
.
setVisibility
(
View
.
VISIBLE
)
;
tipView
.
setVisibility
(
View
.
GONE
)
;
settingsPermitView
.
setVisibility
(
View
.
VISIBLE
)
;
}
containerView
=
findViewById
(
R
.
id
.
tab_queue_container
)
;
buttonContainer
=
findViewById
(
R
.
id
.
button_container
)
;
enabledConfirmation
=
findViewById
(
R
.
id
.
enabled_confirmation
)
;
containerView
.
setTranslationY
(
500
)
;
containerView
.
setAlpha
(
0
)
;
final
Animator
translateAnimator
=
ObjectAnimator
.
ofFloat
(
containerView
"
translationY
"
0
)
;
translateAnimator
.
setDuration
(
400
)
;
final
Animator
alphaAnimator
=
ObjectAnimator
.
ofFloat
(
containerView
"
alpha
"
1
)
;
alphaAnimator
.
setStartDelay
(
200
)
;
alphaAnimator
.
setDuration
(
600
)
;
final
AnimatorSet
set
=
new
AnimatorSet
(
)
;
set
.
playTogether
(
alphaAnimator
translateAnimator
)
;
set
.
setStartDelay
(
400
)
;
set
.
start
(
)
;
}
Override
public
void
finish
(
)
{
super
.
finish
(
)
;
overridePendingTransition
(
0
0
)
;
}
private
void
onConfirmButtonPressed
(
)
{
enabledConfirmation
.
setVisibility
(
View
.
VISIBLE
)
;
enabledConfirmation
.
setAlpha
(
0
)
;
final
Animator
buttonsAlphaAnimator
=
ObjectAnimator
.
ofFloat
(
buttonContainer
"
alpha
"
0
)
;
buttonsAlphaAnimator
.
setDuration
(
300
)
;
final
Animator
messagesAlphaAnimator
=
ObjectAnimator
.
ofFloat
(
enabledConfirmation
"
alpha
"
1
)
;
messagesAlphaAnimator
.
setDuration
(
300
)
;
messagesAlphaAnimator
.
setStartDelay
(
200
)
;
final
AnimatorSet
set
=
new
AnimatorSet
(
)
;
set
.
playTogether
(
buttonsAlphaAnimator
messagesAlphaAnimator
)
;
set
.
addListener
(
new
AnimatorListenerAdapter
(
)
{
Override
public
void
onAnimationEnd
(
Animator
animation
)
{
new
Handler
(
)
.
postDelayed
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
slideOut
(
)
;
setResult
(
TabQueueHelper
.
TAB_QUEUE_YES
)
;
}
}
1000
)
;
}
}
)
;
set
.
start
(
)
;
}
TargetApi
(
Build
.
VERSION_CODES
.
M
)
private
void
onSettingsButtonPressed
(
)
{
Intent
intent
=
new
Intent
(
Settings
.
ACTION_MANAGE_OVERLAY_PERMISSION
)
;
intent
.
setData
(
Uri
.
parse
(
"
package
:
"
+
getPackageName
(
)
)
)
;
startActivityForResult
(
intent
SETTINGS_REQUEST_CODE
)
;
Toast
.
makeText
(
this
R
.
string
.
tab_queue_prompt_permit_drawing_over_apps
Toast
.
LENGTH_LONG
)
.
show
(
)
;
}
Override
protected
void
onActivityResult
(
int
requestCode
int
resultCode
Intent
data
)
{
if
(
requestCode
!
=
SETTINGS_REQUEST_CODE
)
{
return
;
}
if
(
TabQueueHelper
.
canDrawOverlays
(
this
)
)
{
final
int
numberOfTimesTabQueuePromptSeen
=
GeckoSharedPrefs
.
forApp
(
this
)
.
getInt
(
TabQueueHelper
.
PREF_TAB_QUEUE_TIMES_PROMPT_SHOWN
0
)
;
Telemetry
.
addToHistogram
(
"
FENNEC_TABQUEUE_PROMPT_ENABLE_YES
"
numberOfTimesTabQueuePromptSeen
)
;
setResult
(
TabQueueHelper
.
TAB_QUEUE_YES
)
;
finish
(
)
;
}
}
private
void
slideOut
(
)
{
if
(
isAnimating
)
{
return
;
}
isAnimating
=
true
;
ObjectAnimator
animator
=
ObjectAnimator
.
ofFloat
(
containerView
"
translationY
"
containerView
.
getHeight
(
)
)
;
animator
.
addListener
(
new
AnimatorListenerAdapter
(
)
{
Override
public
void
onAnimationEnd
(
Animator
animation
)
{
finish
(
)
;
}
}
)
;
animator
.
start
(
)
;
}
Override
public
void
onBackPressed
(
)
{
slideOut
(
)
;
}
Override
public
boolean
onTouchEvent
(
MotionEvent
event
)
{
slideOut
(
)
;
return
true
;
}
}
