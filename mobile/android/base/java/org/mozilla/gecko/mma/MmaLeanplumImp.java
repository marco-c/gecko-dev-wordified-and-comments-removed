package
org
.
mozilla
.
gecko
.
mma
;
import
android
.
app
.
Activity
;
import
android
.
app
.
Notification
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
DrawableRes
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
v4
.
app
.
NotificationCompat
;
import
com
.
leanplum
.
Leanplum
;
import
com
.
leanplum
.
LeanplumActivityHelper
;
import
com
.
leanplum
.
LeanplumPushNotificationCustomizer
;
import
com
.
leanplum
.
LeanplumPushService
;
import
com
.
leanplum
.
internal
.
Constants
;
import
com
.
leanplum
.
internal
.
LeanplumInternal
;
import
com
.
leanplum
.
internal
.
VarCache
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
MmaConstants
;
import
java
.
util
.
Map
;
import
java
.
util
.
UUID
;
public
class
MmaLeanplumImp
implements
MmaInterface
{
Override
public
void
init
(
final
Activity
activity
Map
<
String
?
>
attributes
)
{
if
(
activity
=
=
null
)
{
return
;
}
Leanplum
.
setIsTestModeEnabled
(
false
)
;
Leanplum
.
setApplicationContext
(
activity
.
getApplicationContext
(
)
)
;
LeanplumActivityHelper
.
enableLifecycleCallbacks
(
activity
.
getApplication
(
)
)
;
if
(
AppConstants
.
MOZILLA_OFFICIAL
)
{
Leanplum
.
setAppIdForProductionMode
(
MmaConstants
.
MOZ_LEANPLUM_SDK_CLIENTID
MmaConstants
.
MOZ_LEANPLUM_SDK_KEY
)
;
}
else
{
Leanplum
.
setAppIdForDevelopmentMode
(
MmaConstants
.
MOZ_LEANPLUM_SDK_CLIENTID
MmaConstants
.
MOZ_LEANPLUM_SDK_KEY
)
;
}
LeanplumPushService
.
setGcmSenderId
(
AppConstants
.
MOZ_ANDROID_GCM_SENDERIDS
)
;
if
(
attributes
!
=
null
)
{
Leanplum
.
start
(
activity
attributes
)
;
}
else
{
Leanplum
.
start
(
activity
)
;
}
activity
.
runOnUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
LeanplumActivityHelper
.
onResume
(
activity
)
;
}
}
)
;
}
Override
public
void
setCustomIcon
(
DrawableRes
final
int
iconResId
)
{
LeanplumPushService
.
setCustomizer
(
new
LeanplumPushNotificationCustomizer
(
)
{
Override
public
void
customize
(
NotificationCompat
.
Builder
builder
Bundle
notificationPayload
)
{
builder
.
setSmallIcon
(
iconResId
)
;
builder
.
setDefaults
(
Notification
.
DEFAULT_SOUND
)
;
}
}
)
;
}
Override
public
void
start
(
Context
context
)
{
}
Override
public
void
event
(
String
leanplumEvent
)
{
Leanplum
.
track
(
leanplumEvent
)
;
}
Override
public
void
event
(
String
leanplumEvent
double
value
)
{
Leanplum
.
track
(
leanplumEvent
value
)
;
}
Override
public
void
stop
(
)
{
Leanplum
.
stop
(
)
;
Leanplum
.
setIsTestModeEnabled
(
true
)
;
LeanplumInternal
.
setCalledStart
(
false
)
;
LeanplumInternal
.
setHasStarted
(
false
)
;
}
Override
public
boolean
handleGcmMessage
(
Context
context
String
from
Bundle
bundle
)
{
if
(
from
!
=
null
&
&
from
.
equals
(
MmaConstants
.
MOZ_MMA_SENDER_ID
)
&
&
bundle
.
containsKey
(
Constants
.
Keys
.
PUSH_MESSAGE_TEXT
)
)
{
LeanplumPushService
.
handleNotification
(
context
bundle
)
;
return
true
;
}
return
false
;
}
Override
public
void
setDeviceId
(
NonNull
String
deviceId
)
{
Leanplum
.
setDeviceId
(
deviceId
)
;
}
}
