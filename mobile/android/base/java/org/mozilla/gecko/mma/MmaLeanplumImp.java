package
org
.
mozilla
.
gecko
.
mma
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
app
.
Activity
;
import
android
.
app
.
Notification
;
import
android
.
content
.
Context
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
DrawableRes
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
v4
.
app
.
NotificationCompat
;
import
com
.
leanplum
.
Leanplum
;
import
com
.
leanplum
.
LeanplumActivityHelper
;
import
com
.
leanplum
.
LeanplumPushNotificationCustomizer
;
import
com
.
leanplum
.
LeanplumPushService
;
import
com
.
leanplum
.
annotations
.
Parser
;
import
com
.
leanplum
.
callbacks
.
VariablesChangedCallback
;
import
com
.
leanplum
.
internal
.
Constants
;
import
com
.
leanplum
.
internal
.
LeanplumInternal
;
import
com
.
leanplum
.
utils
.
BuildUtil
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
MmaConstants
;
import
org
.
mozilla
.
gecko
.
firstrun
.
PanelConfig
;
import
org
.
mozilla
.
gecko
.
notifications
.
NotificationHelper
;
import
java
.
lang
.
ref
.
WeakReference
;
import
java
.
util
.
Map
;
public
class
MmaLeanplumImp
implements
MmaInterface
{
Override
public
void
init
(
final
Activity
activity
Map
<
String
?
>
attributes
)
{
if
(
activity
=
=
null
)
{
return
;
}
Leanplum
.
setIsTestModeEnabled
(
false
)
;
Leanplum
.
setApplicationContext
(
activity
.
getApplicationContext
(
)
)
;
LeanplumActivityHelper
.
enableLifecycleCallbacks
(
activity
.
getApplication
(
)
)
;
Parser
.
parseVariables
(
LeanplumVariables
.
getInstance
(
activity
.
getApplicationContext
(
)
)
)
;
if
(
AppConstants
.
MOZILLA_OFFICIAL
)
{
Leanplum
.
setAppIdForProductionMode
(
MmaConstants
.
MOZ_LEANPLUM_SDK_CLIENTID
MmaConstants
.
MOZ_LEANPLUM_SDK_KEY
)
;
}
else
{
Leanplum
.
setAppIdForDevelopmentMode
(
MmaConstants
.
MOZ_LEANPLUM_SDK_CLIENTID
MmaConstants
.
MOZ_LEANPLUM_SDK_KEY
)
;
}
if
(
BuildUtil
.
isNotificationChannelSupported
(
activity
)
)
{
Leanplum
.
setDefaultChannelId
(
NotificationHelper
.
getInstance
(
activity
)
.
getNotificationChannel
(
NotificationHelper
.
Channel
.
LP_DEFAULT
)
.
getId
(
)
)
;
}
LeanplumPushService
.
setGcmSenderId
(
AppConstants
.
MOZ_ANDROID_GCM_SENDERIDS
)
;
if
(
attributes
!
=
null
)
{
Leanplum
.
start
(
activity
attributes
)
;
}
else
{
Leanplum
.
start
(
activity
)
;
}
activity
.
runOnUiThread
(
(
)
-
>
LeanplumActivityHelper
.
onResume
(
activity
)
)
;
}
SuppressLint
(
"
NewApi
"
)
Override
public
void
setCustomIcon
(
DrawableRes
final
int
iconResId
)
{
LeanplumPushService
.
setCustomizer
(
new
LeanplumPushNotificationCustomizer
(
)
{
Override
public
void
customize
(
NotificationCompat
.
Builder
builder
Bundle
notificationPayload
)
{
builder
.
setSmallIcon
(
iconResId
)
;
builder
.
setDefaults
(
Notification
.
DEFAULT_SOUND
)
;
if
(
!
AppConstants
.
Versions
.
preO
)
{
builder
.
setChannelId
(
NotificationHelper
.
getInstance
(
builder
.
mContext
)
.
getNotificationChannel
(
NotificationHelper
.
Channel
.
DEFAULT
)
.
getId
(
)
)
;
}
}
Override
public
void
customize
(
Notification
.
Builder
builder
Bundle
notificationPayload
Nullable
Notification
.
Style
notificationStyle
)
{
}
}
)
;
}
Override
public
void
start
(
Context
context
)
{
}
Override
public
void
event
(
String
leanplumEvent
)
{
Leanplum
.
track
(
leanplumEvent
)
;
}
Override
public
void
event
(
String
leanplumEvent
double
value
)
{
Leanplum
.
track
(
leanplumEvent
value
)
;
}
Override
public
void
stop
(
)
{
Leanplum
.
stop
(
)
;
Leanplum
.
setIsTestModeEnabled
(
true
)
;
LeanplumInternal
.
setCalledStart
(
false
)
;
LeanplumInternal
.
setHasStarted
(
false
)
;
}
Override
public
boolean
handleGcmMessage
(
Context
context
String
from
Bundle
bundle
)
{
if
(
from
!
=
null
&
&
bundle
.
containsKey
(
Constants
.
Keys
.
PUSH_MESSAGE_TEXT
)
)
{
LeanplumPushService
.
handleNotification
(
context
bundle
)
;
return
true
;
}
return
false
;
}
Override
public
void
setDeviceId
(
NonNull
String
deviceId
)
{
Leanplum
.
setDeviceId
(
deviceId
)
;
}
Override
public
void
setToken
(
NonNull
String
token
)
{
Leanplum
.
setToken
(
token
)
;
}
Override
public
PanelConfig
getPanelConfig
(
NonNull
Context
context
PanelConfig
.
TYPE
type
final
boolean
useLocalValues
)
{
if
(
useLocalValues
)
{
throw
new
UnsupportedOperationException
(
"
Cannot
build
remote
panel
config
with
local
values
"
)
;
}
switch
(
type
)
{
case
WELCOME
:
return
new
PanelConfig
(
type
useLocalValues
LeanplumVariables
.
welcomePanelTitle
LeanplumVariables
.
welcomePanelMessage
LeanplumVariables
.
welcomePanelSubtext
LeanplumVariables
.
getWelcomeImage
(
)
)
;
case
PRIVACY
:
case
LAST_PRIVACY
:
return
new
PanelConfig
(
type
useLocalValues
LeanplumVariables
.
privacyPanelTitle
LeanplumVariables
.
privacyPanelMessage
LeanplumVariables
.
privacyPanelSubtext
LeanplumVariables
.
getPrivacyImage
(
)
)
;
case
CUSTOMIZE
:
case
LAST_CUSTOMIZE
:
return
new
PanelConfig
(
type
useLocalValues
LeanplumVariables
.
customizePanelTitle
LeanplumVariables
.
customizePanelMessage
LeanplumVariables
.
customizePanelSubtext
LeanplumVariables
.
getCustomizingImage
(
)
)
;
case
SYNC
:
return
new
PanelConfig
(
type
useLocalValues
LeanplumVariables
.
syncPanelTitle
LeanplumVariables
.
syncPanelMessage
LeanplumVariables
.
syncPanelSubtext
LeanplumVariables
.
getSyncImage
(
)
)
;
default
:
return
new
PanelConfig
(
type
useLocalValues
LeanplumVariables
.
welcomePanelTitle
LeanplumVariables
.
welcomePanelMessage
LeanplumVariables
.
welcomePanelSubtext
LeanplumVariables
.
getWelcomeImage
(
)
)
;
}
}
Override
public
void
listenOnceForVariableChanges
(
NonNull
final
MmaDelegate
.
MmaVariablesChangedListener
listener
)
{
final
WeakReference
<
MmaDelegate
.
MmaVariablesChangedListener
>
listenerRef
=
new
WeakReference
<
>
(
listener
)
;
Leanplum
.
addVariablesChangedHandler
(
new
VariablesChangedCallback
(
)
{
Override
public
void
variablesChanged
(
)
{
Leanplum
.
removeVariablesChangedHandler
(
this
)
;
MmaDelegate
.
MmaVariablesChangedListener
variablesChangesListener
=
listenerRef
.
get
(
)
;
if
(
variablesChangesListener
!
=
null
)
{
variablesChangesListener
.
onRemoteVariablesChanged
(
)
;
}
}
}
)
;
}
}
