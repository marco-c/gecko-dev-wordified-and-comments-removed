package
org
.
mozilla
.
gecko
.
promotion
;
import
android
.
animation
.
Animator
;
import
android
.
animation
.
AnimatorListenerAdapter
;
import
android
.
animation
.
AnimatorSet
;
import
android
.
animation
.
ObjectAnimator
;
import
android
.
app
.
Activity
;
import
android
.
content
.
Intent
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
DrawableRes
;
import
android
.
support
.
annotation
.
StringRes
;
import
android
.
view
.
MotionEvent
;
import
android
.
view
.
View
;
import
android
.
widget
.
Button
;
import
android
.
widget
.
ImageView
;
import
android
.
widget
.
TextView
;
import
org
.
mozilla
.
gecko
.
Locales
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
public
class
SimpleHelperUI
extends
Locales
.
LocaleAwareActivity
{
public
static
final
String
PREF_FIRST_RVBP_SHOWN
=
"
first_reader_view_bookmark_prompt_shown
"
;
public
static
final
String
FIRST_RVBP_SHOWN_TELEMETRYEXTRA
=
"
first_readerview_bookmark_prompt
"
;
public
static
final
String
TRIPLE_READERVIEW_OPEN_TELEMETRYEXTRA
=
"
third_readerview_open_prompt
"
;
private
View
containerView
;
private
boolean
isAnimating
;
private
String
mTelemetryExtra
;
private
static
final
String
EXTRA_TELEMETRYEXTRA
=
"
telemetryextra
"
;
private
static
final
String
EXTRA_TITLE
=
"
title
"
;
private
static
final
String
EXTRA_MESSAGE
=
"
message
"
;
private
static
final
String
EXTRA_IMAGE
=
"
image
"
;
private
static
final
String
EXTRA_BUTTON
=
"
button
"
;
private
static
final
String
EXTRA_RESULTCODE_POSITIVE
=
"
positive
"
;
private
static
final
String
EXTRA_RESULTCODE_NEGATIVE
=
"
negative
"
;
public
static
void
show
(
Activity
owner
String
telemetryExtra
int
requestCode
StringRes
int
title
StringRes
int
message
DrawableRes
int
image
StringRes
int
buttonText
int
positiveResultCode
int
negativeResultCode
)
{
Intent
intent
=
new
Intent
(
owner
SimpleHelperUI
.
class
)
;
intent
.
putExtra
(
EXTRA_TELEMETRYEXTRA
telemetryExtra
)
;
intent
.
putExtra
(
EXTRA_TITLE
title
)
;
intent
.
putExtra
(
EXTRA_MESSAGE
message
)
;
intent
.
putExtra
(
EXTRA_IMAGE
image
)
;
intent
.
putExtra
(
EXTRA_BUTTON
buttonText
)
;
intent
.
putExtra
(
EXTRA_RESULTCODE_POSITIVE
positiveResultCode
)
;
intent
.
putExtra
(
EXTRA_RESULTCODE_NEGATIVE
negativeResultCode
)
;
owner
.
startActivityForResult
(
intent
requestCode
)
;
}
Override
protected
void
onCreate
(
Bundle
savedInstanceState
)
{
super
.
onCreate
(
savedInstanceState
)
;
mTelemetryExtra
=
getIntent
(
)
.
getStringExtra
(
EXTRA_TELEMETRYEXTRA
)
;
setupViews
(
)
;
slideIn
(
)
;
}
private
void
setupViews
(
)
{
final
Intent
i
=
getIntent
(
)
;
setContentView
(
R
.
layout
.
simple_helper_ui
)
;
containerView
=
findViewById
(
R
.
id
.
container
)
;
(
(
ImageView
)
findViewById
(
R
.
id
.
image
)
)
.
setImageResource
(
i
.
getIntExtra
(
EXTRA_IMAGE
0
)
)
;
(
(
TextView
)
findViewById
(
R
.
id
.
title
)
)
.
setText
(
i
.
getIntExtra
(
EXTRA_TITLE
0
)
)
;
(
(
TextView
)
findViewById
(
R
.
id
.
message
)
)
.
setText
(
i
.
getIntExtra
(
EXTRA_MESSAGE
0
)
)
;
final
Button
button
=
(
(
Button
)
findViewById
(
R
.
id
.
button
)
)
;
button
.
setText
(
i
.
getIntExtra
(
EXTRA_BUTTON
0
)
)
;
button
.
setOnClickListener
(
new
View
.
OnClickListener
(
)
{
Override
public
void
onClick
(
View
v
)
{
slideOut
(
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
CANCEL
TelemetryContract
.
Method
.
BUTTON
mTelemetryExtra
)
;
setResult
(
i
.
getIntExtra
(
EXTRA_RESULTCODE_POSITIVE
-
1
)
)
;
}
}
)
;
}
private
void
slideIn
(
)
{
containerView
.
setTranslationY
(
500
)
;
containerView
.
setAlpha
(
0
)
;
final
Animator
translateAnimator
=
ObjectAnimator
.
ofFloat
(
containerView
"
translationY
"
0
)
;
translateAnimator
.
setDuration
(
400
)
;
final
Animator
alphaAnimator
=
ObjectAnimator
.
ofFloat
(
containerView
"
alpha
"
1
)
;
alphaAnimator
.
setStartDelay
(
200
)
;
alphaAnimator
.
setDuration
(
600
)
;
final
AnimatorSet
set
=
new
AnimatorSet
(
)
;
set
.
playTogether
(
alphaAnimator
translateAnimator
)
;
set
.
setStartDelay
(
400
)
;
set
.
start
(
)
;
}
private
void
slideOut
(
)
{
if
(
isAnimating
)
{
return
;
}
isAnimating
=
true
;
ObjectAnimator
animator
=
ObjectAnimator
.
ofFloat
(
containerView
"
translationY
"
containerView
.
getHeight
(
)
)
;
animator
.
addListener
(
new
AnimatorListenerAdapter
(
)
{
Override
public
void
onAnimationEnd
(
Animator
animation
)
{
finish
(
)
;
}
}
)
;
animator
.
start
(
)
;
}
Override
public
void
finish
(
)
{
super
.
finish
(
)
;
overridePendingTransition
(
0
0
)
;
}
Override
public
void
onBackPressed
(
)
{
slideOut
(
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
CANCEL
TelemetryContract
.
Method
.
BACK
mTelemetryExtra
)
;
setResult
(
getIntent
(
)
.
getIntExtra
(
EXTRA_RESULTCODE_NEGATIVE
-
1
)
)
;
}
Override
public
boolean
onTouchEvent
(
MotionEvent
event
)
{
slideOut
(
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
CANCEL
TelemetryContract
.
Method
.
BACK
mTelemetryExtra
)
;
setResult
(
getIntent
(
)
.
getIntExtra
(
EXTRA_RESULTCODE_NEGATIVE
-
1
)
)
;
return
true
;
}
}
