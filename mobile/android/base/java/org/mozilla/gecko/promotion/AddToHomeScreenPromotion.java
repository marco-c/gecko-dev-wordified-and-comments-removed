package
org
.
mozilla
.
gecko
.
promotion
;
import
android
.
app
.
Activity
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
CallSuper
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
switchboard
.
SwitchBoard
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
AboutPages
;
import
org
.
mozilla
.
gecko
.
BrowserApp
;
import
org
.
mozilla
.
gecko
.
GeckoProfile
;
import
org
.
mozilla
.
gecko
.
Tab
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserDB
;
import
org
.
mozilla
.
gecko
.
db
.
UrlAnnotations
;
import
org
.
mozilla
.
gecko
.
delegates
.
TabsTrayVisibilityAwareDelegate
;
import
org
.
mozilla
.
gecko
.
Experiments
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
java
.
lang
.
ref
.
WeakReference
;
import
ch
.
boye
.
httpclientandroidlib
.
util
.
TextUtils
;
public
class
AddToHomeScreenPromotion
extends
TabsTrayVisibilityAwareDelegate
implements
Tabs
.
OnTabsChangedListener
{
public
static
class
URLHistory
{
public
final
long
visits
;
public
final
long
lastVisit
;
private
URLHistory
(
long
visits
long
lastVisit
)
{
this
.
visits
=
visits
;
this
.
lastVisit
=
lastVisit
;
}
}
private
static
final
String
LOGTAG
=
"
GeckoPromoteShortcut
"
;
private
static
final
String
EXPERIMENT_MINIMUM_TOTAL_VISITS
=
"
minimumTotalVisits
"
;
private
static
final
String
EXPERIMENT_LAST_VISIT_MINIMUM_AGE
=
"
lastVisitMinimumAgeMs
"
;
private
static
final
String
EXPERIMENT_LAST_VISIT_MAXIMUM_AGE
=
"
lastVisitMaximumAgeMs
"
;
private
WeakReference
<
Activity
>
activityReference
;
private
boolean
isEnabled
;
private
int
minimumVisits
;
private
int
lastVisitMinimumAgeMs
;
private
int
lastVisitMaximumAgeMs
;
CallSuper
Override
public
void
onCreate
(
BrowserApp
browserApp
Bundle
savedInstanceState
)
{
super
.
onCreate
(
browserApp
savedInstanceState
)
;
activityReference
=
new
WeakReference
<
Activity
>
(
browserApp
)
;
initializeExperiment
(
browserApp
)
;
}
Override
public
void
onResume
(
BrowserApp
browserApp
)
{
Tabs
.
registerOnTabsChangedListener
(
this
)
;
}
Override
public
void
onPause
(
BrowserApp
browserApp
)
{
Tabs
.
unregisterOnTabsChangedListener
(
this
)
;
}
private
void
initializeExperiment
(
Context
context
)
{
if
(
!
SwitchBoard
.
isInExperiment
(
context
Experiments
.
PROMOTE_ADD_TO_HOMESCREEN
)
)
{
Log
.
v
(
LOGTAG
"
Experiment
not
enabled
"
)
;
return
;
}
JSONObject
values
=
SwitchBoard
.
getExperimentValuesFromJson
(
context
Experiments
.
PROMOTE_ADD_TO_HOMESCREEN
)
;
if
(
values
=
=
null
)
{
return
;
}
try
{
initializeWithValues
(
values
.
getInt
(
EXPERIMENT_MINIMUM_TOTAL_VISITS
)
values
.
getInt
(
EXPERIMENT_LAST_VISIT_MINIMUM_AGE
)
values
.
getInt
(
EXPERIMENT_LAST_VISIT_MAXIMUM_AGE
)
)
;
}
catch
(
JSONException
e
)
{
Log
.
w
(
LOGTAG
"
Could
not
read
experiment
values
"
e
)
;
}
}
private
void
initializeWithValues
(
int
minimumVisits
int
lastVisitMinimumAgeMs
int
lastVisitMaximumAgeMs
)
{
this
.
isEnabled
=
true
;
this
.
minimumVisits
=
minimumVisits
;
this
.
lastVisitMinimumAgeMs
=
lastVisitMinimumAgeMs
;
this
.
lastVisitMaximumAgeMs
=
lastVisitMaximumAgeMs
;
}
Override
public
void
onTabChanged
(
final
Tab
tab
Tabs
.
TabEvents
msg
String
data
)
{
if
(
tab
=
=
null
)
{
return
;
}
if
(
!
Tabs
.
getInstance
(
)
.
isSelectedTab
(
tab
)
)
{
return
;
}
if
(
Tabs
.
TabEvents
.
LOADED
!
=
msg
)
{
return
;
}
if
(
tab
.
isPrivate
(
)
)
{
return
;
}
if
(
isTabsTrayVisible
(
)
)
{
return
;
}
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
maybeShowPromotionForUrl
(
tab
.
getURL
(
)
tab
.
getTitle
(
)
)
;
}
}
)
;
}
private
void
maybeShowPromotionForUrl
(
String
url
String
title
)
{
if
(
!
isEnabled
)
{
return
;
}
final
Context
context
=
activityReference
.
get
(
)
;
if
(
context
=
=
null
)
{
return
;
}
if
(
!
shouldShowPromotion
(
context
url
title
)
)
{
return
;
}
HomeScreenPrompt
.
show
(
context
url
title
)
;
}
private
boolean
shouldShowPromotion
(
Context
context
String
url
String
title
)
{
if
(
TextUtils
.
isEmpty
(
url
)
|
|
TextUtils
.
isEmpty
(
title
)
)
{
return
false
;
}
if
(
AboutPages
.
isAboutPage
(
url
)
)
{
return
false
;
}
if
(
!
url
.
startsWith
(
"
https
:
/
/
"
)
)
{
return
false
;
}
URLHistory
history
=
getHistoryForURL
(
context
url
)
;
if
(
history
=
=
null
)
{
return
false
;
}
if
(
history
.
visits
<
minimumVisits
)
{
return
false
;
}
if
(
history
.
lastVisit
>
System
.
currentTimeMillis
(
)
-
lastVisitMinimumAgeMs
)
{
return
false
;
}
if
(
history
.
lastVisit
<
System
.
currentTimeMillis
(
)
-
lastVisitMaximumAgeMs
)
{
return
false
;
}
if
(
hasAcceptedOrDeclinedHomeScreenShortcut
(
context
url
)
)
{
return
false
;
}
return
true
;
}
protected
boolean
hasAcceptedOrDeclinedHomeScreenShortcut
(
Context
context
String
url
)
{
final
UrlAnnotations
urlAnnotations
=
BrowserDB
.
from
(
context
)
.
getUrlAnnotations
(
)
;
return
urlAnnotations
.
hasAcceptedOrDeclinedHomeScreenShortcut
(
context
.
getContentResolver
(
)
url
)
;
}
public
static
URLHistory
getHistoryForURL
(
Context
context
String
url
)
{
final
GeckoProfile
profile
=
GeckoProfile
.
get
(
context
)
;
final
BrowserDB
browserDB
=
BrowserDB
.
from
(
profile
)
;
Cursor
cursor
=
null
;
try
{
cursor
=
browserDB
.
getHistoryForURL
(
context
.
getContentResolver
(
)
url
)
;
if
(
cursor
.
moveToFirst
(
)
)
{
return
new
URLHistory
(
cursor
.
getInt
(
cursor
.
getColumnIndex
(
BrowserContract
.
History
.
VISITS
)
)
cursor
.
getLong
(
cursor
.
getColumnIndex
(
BrowserContract
.
History
.
DATE_LAST_VISITED
)
)
)
;
}
}
finally
{
if
(
cursor
!
=
null
)
{
cursor
.
close
(
)
;
}
}
return
null
;
}
}
