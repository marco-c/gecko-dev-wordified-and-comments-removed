package
org
.
mozilla
.
gecko
.
dlc
;
import
android
.
support
.
annotation
.
StringDef
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
import
org
.
mozilla
.
gecko
.
dlc
.
catalog
.
DownloadContent
;
import
org
.
mozilla
.
gecko
.
dlc
.
BaseAction
.
RecoverableDownloadContentException
;
public
class
DownloadContentTelemetry
{
private
static
final
String
EXTRA_ACTION
=
"
action
"
;
private
static
final
String
EXTRA_RESULT
=
"
result
"
;
private
static
final
String
EXTRA_CONTENT
=
"
content
"
;
private
static
final
String
EXTRA_ERROR
=
"
error
"
;
private
static
final
String
EXTRA_UPDATED
=
"
updated
"
;
private
static
final
String
EXTRA_ACTION_REQUIRED
=
"
action_required
"
;
private
static
final
String
ACTION_DOWNLOAD
=
"
dlc_download
"
;
private
static
final
String
ACTION_SYNC
=
"
dlc_sync
"
;
private
static
final
String
RESULT_SUCCESS
=
"
success
"
;
private
static
final
String
RESULT_FAILURE
=
"
failure
"
;
StringDef
(
{
ERROR_NO_NETWORK
ERROR_NETWORK_METERED
ERROR_DISK_SPACE
ERROR_CHECKSUM
ERROR_DISK_IO
ERROR_NETWORK_IO
ERROR_MEMORY
ERROR_SERVER
ERROR_LOGIC
ERROR_UNRECOVERABLE
}
)
interface
Error
{
}
static
final
String
ERROR_NO_NETWORK
=
"
no_network
"
;
static
final
String
ERROR_NETWORK_METERED
=
"
network_metered
"
;
static
final
String
ERROR_DISK_SPACE
=
"
disk_space
"
;
static
final
String
ERROR_CHECKSUM
=
"
checksum
"
;
static
final
String
ERROR_DISK_IO
=
"
io_disk
"
;
static
final
String
ERROR_NETWORK_IO
=
"
io_network
"
;
static
final
String
ERROR_MEMORY
=
"
memory
"
;
static
final
String
ERROR_SERVER
=
"
server
"
;
static
final
String
ERROR_LOGIC
=
"
logic
"
;
static
final
String
ERROR_UNRECOVERABLE
=
"
unrecoverable
"
;
static
void
eventDownloadSuccess
(
DownloadContent
content
)
{
try
{
final
JSONObject
extras
=
new
JSONObject
(
)
;
extras
.
put
(
EXTRA_ACTION
ACTION_DOWNLOAD
)
;
extras
.
put
(
EXTRA_RESULT
RESULT_SUCCESS
)
;
extras
.
put
(
EXTRA_CONTENT
content
.
getId
(
)
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
ACTION
TelemetryContract
.
Method
.
SERVICE
extras
.
toString
(
)
)
;
}
catch
(
JSONException
e
)
{
throw
new
AssertionError
(
"
Should
not
happen
:
Can
'
t
build
telemetry
extra
JSON
"
e
)
;
}
}
static
void
eventDownloadFailure
(
DownloadContent
content
RecoverableDownloadContentException
e
)
{
eventDownloadFailure
(
content
translateErrorType
(
e
.
getErrorType
(
)
)
)
;
}
static
void
eventDownloadFailure
(
DownloadContent
content
Error
String
errorType
)
{
try
{
final
JSONObject
extras
=
new
JSONObject
(
)
;
extras
.
put
(
EXTRA_ACTION
ACTION_DOWNLOAD
)
;
extras
.
put
(
EXTRA_RESULT
RESULT_FAILURE
)
;
extras
.
put
(
EXTRA_CONTENT
content
.
getId
(
)
)
;
extras
.
put
(
EXTRA_ERROR
errorType
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
ACTION
TelemetryContract
.
Method
.
SERVICE
extras
.
toString
(
)
)
;
}
catch
(
JSONException
e
)
{
throw
new
AssertionError
(
"
Should
not
happen
:
Can
'
t
build
telemetry
extra
JSON
"
e
)
;
}
}
static
void
eventSyncSuccess
(
boolean
updated
boolean
actionRequired
)
{
try
{
final
JSONObject
extras
=
new
JSONObject
(
)
;
extras
.
put
(
EXTRA_ACTION
ACTION_SYNC
)
;
extras
.
put
(
EXTRA_RESULT
RESULT_SUCCESS
)
;
extras
.
put
(
EXTRA_UPDATED
updated
)
;
extras
.
put
(
EXTRA_ACTION_REQUIRED
actionRequired
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
ACTION
TelemetryContract
.
Method
.
SERVICE
extras
.
toString
(
)
)
;
}
catch
(
JSONException
e
)
{
throw
new
AssertionError
(
"
Should
not
happen
:
Can
'
t
build
telemetry
extra
JSON
"
e
)
;
}
}
static
void
eventSyncFailure
(
RecoverableDownloadContentException
e
)
{
eventSyncFailure
(
translateErrorType
(
e
.
getErrorType
(
)
)
)
;
}
static
void
eventSyncFailure
(
Error
String
errorType
)
{
try
{
final
JSONObject
extras
=
new
JSONObject
(
)
;
extras
.
put
(
EXTRA_ACTION
ACTION_SYNC
)
;
extras
.
put
(
EXTRA_RESULT
RESULT_FAILURE
)
;
extras
.
put
(
EXTRA_ERROR
errorType
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
ACTION
TelemetryContract
.
Method
.
SERVICE
extras
.
toString
(
)
)
;
}
catch
(
JSONException
e
)
{
throw
new
AssertionError
(
"
Should
not
happen
:
Can
'
t
build
telemetry
extra
JSON
"
e
)
;
}
}
private
static
String
translateErrorType
(
RecoverableDownloadContentException
.
ErrorType
int
errorType
)
{
switch
(
errorType
)
{
case
RecoverableDownloadContentException
.
DISK_IO
:
return
ERROR_DISK_IO
;
case
RecoverableDownloadContentException
.
MEMORY
:
return
ERROR_MEMORY
;
case
RecoverableDownloadContentException
.
NETWORK
:
return
ERROR_NETWORK_IO
;
case
RecoverableDownloadContentException
.
SERVER
:
return
ERROR_SERVER
;
default
:
throw
new
AssertionError
(
"
Unknown
error
type
:
"
+
errorType
)
;
}
}
}
