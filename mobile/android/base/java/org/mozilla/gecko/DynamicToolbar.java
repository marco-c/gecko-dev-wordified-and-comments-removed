package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
PrefsHelper
.
PrefHandlerBase
;
import
org
.
mozilla
.
geckoview
.
DynamicToolbarAnimator
.
PinReason
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
org
.
mozilla
.
geckoview
.
GeckoView
;
import
android
.
os
.
Build
;
import
android
.
os
.
Bundle
;
import
android
.
util
.
Log
;
public
class
DynamicToolbar
{
private
static
final
String
LOGTAG
=
"
DynamicToolbar
"
;
private
static
final
String
STATE_ENABLED
=
"
dynamic_toolbar
"
;
private
static
final
String
CHROME_PREF
=
"
browser
.
chrome
.
dynamictoolbar
"
;
private
volatile
boolean
prefEnabled
;
private
boolean
accessibilityEnabled
;
private
final
boolean
forceDisabled
;
private
final
PrefsHelper
.
PrefHandler
prefObserver
;
private
GeckoView
layerView
;
private
OnEnabledChangedListener
enabledChangedListener
;
private
boolean
temporarilyVisible
;
public
enum
VisibilityTransition
{
IMMEDIATE
ANIMATE
}
public
interface
OnEnabledChangedListener
{
public
void
onEnabledChanged
(
boolean
enabled
)
;
}
public
DynamicToolbar
(
)
{
prefObserver
=
new
PrefHandler
(
)
;
PrefsHelper
.
addObserver
(
new
String
[
]
{
CHROME_PREF
}
prefObserver
)
;
forceDisabled
=
isForceDisabled
(
)
;
if
(
forceDisabled
)
{
Log
.
i
(
LOGTAG
"
Force
-
disabling
dynamic
toolbar
for
"
+
Build
.
MODEL
+
"
(
"
+
Build
.
DEVICE
+
"
/
"
+
Build
.
PRODUCT
+
"
)
"
)
;
}
}
public
static
boolean
isForceDisabled
(
)
{
if
(
Build
.
VERSION
.
SDK_INT
=
=
Build
.
VERSION_CODES
.
JELLY_BEAN
&
&
(
Build
.
MODEL
.
startsWith
(
"
GT
-
N80
"
)
|
|
Build
.
MODEL
.
startsWith
(
"
GT
-
N51
"
)
)
)
{
return
true
;
}
if
(
Build
.
VERSION
.
SDK_INT
=
=
Build
.
VERSION_CODES
.
LOLLIPOP
&
&
(
Build
.
MODEL
.
startsWith
(
"
SM
-
N910
"
)
)
)
{
return
true
;
}
return
false
;
}
public
void
destroy
(
)
{
PrefsHelper
.
removeObserver
(
prefObserver
)
;
}
public
void
setLayerView
(
GeckoView
layerView
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
this
.
layerView
=
layerView
;
}
public
void
setEnabledChangedListener
(
OnEnabledChangedListener
listener
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
enabledChangedListener
=
listener
;
}
public
void
onSaveInstanceState
(
Bundle
outState
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
outState
.
putBoolean
(
STATE_ENABLED
prefEnabled
)
;
}
public
void
onRestoreInstanceState
(
Bundle
savedInstanceState
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
savedInstanceState
!
=
null
)
{
prefEnabled
=
savedInstanceState
.
getBoolean
(
STATE_ENABLED
)
;
}
}
public
boolean
isEnabled
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
forceDisabled
)
{
return
false
;
}
return
prefEnabled
&
&
!
accessibilityEnabled
;
}
public
void
setAccessibilityEnabled
(
boolean
enabled
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
accessibilityEnabled
=
=
enabled
)
{
return
;
}
accessibilityEnabled
=
enabled
;
if
(
prefEnabled
)
{
triggerEnabledListener
(
)
;
}
}
public
void
setVisible
(
boolean
visible
VisibilityTransition
transition
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
layerView
=
=
null
)
{
return
;
}
if
(
visible
=
=
false
&
&
layerView
.
getDynamicToolbarAnimator
(
)
.
isPinnedBy
(
PinReason
.
ACTION_MODE
)
)
{
return
;
}
final
boolean
isImmediate
=
transition
=
=
VisibilityTransition
.
IMMEDIATE
;
if
(
visible
)
{
layerView
.
getDynamicToolbarAnimator
(
)
.
showToolbar
(
isImmediate
)
;
}
else
{
layerView
.
getDynamicToolbarAnimator
(
)
.
hideToolbar
(
isImmediate
)
;
}
}
public
void
setPinned
(
boolean
pinned
PinReason
reason
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
layerView
=
=
null
)
{
return
;
}
layerView
.
getDynamicToolbarAnimator
(
)
.
setPinned
(
pinned
reason
)
;
}
private
void
triggerEnabledListener
(
)
{
if
(
enabledChangedListener
!
=
null
)
{
enabledChangedListener
.
onEnabledChanged
(
isEnabled
(
)
)
;
}
}
private
class
PrefHandler
extends
PrefHandlerBase
{
Override
public
void
prefValue
(
String
pref
boolean
value
)
{
if
(
value
=
=
prefEnabled
)
{
return
;
}
prefEnabled
=
value
;
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
if
(
!
accessibilityEnabled
)
{
triggerEnabledListener
(
)
;
}
}
}
)
;
}
}
}
