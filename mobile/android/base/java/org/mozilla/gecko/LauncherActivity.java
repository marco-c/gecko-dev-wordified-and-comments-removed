package
org
.
mozilla
.
gecko
;
import
android
.
app
.
Activity
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
customtabs
.
CustomTabsIntent
;
import
org
.
mozilla
.
gecko
.
webapps
.
WebAppActivity
;
import
org
.
mozilla
.
gecko
.
webapps
.
WebAppIndexer
;
import
org
.
mozilla
.
gecko
.
customtabs
.
CustomTabsActivity
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
mozglue
.
SafeIntent
;
import
org
.
mozilla
.
gecko
.
preferences
.
GeckoPreferences
;
import
org
.
mozilla
.
gecko
.
tabqueue
.
TabQueueHelper
;
import
org
.
mozilla
.
gecko
.
tabqueue
.
TabQueueService
;
public
class
LauncherActivity
extends
Activity
{
Override
protected
void
onCreate
(
Bundle
savedInstanceState
)
{
super
.
onCreate
(
savedInstanceState
)
;
GeckoAppShell
.
ensureCrashHandling
(
)
;
final
SafeIntent
safeIntent
=
new
SafeIntent
(
getIntent
(
)
)
;
if
(
isWebAppIntent
(
safeIntent
)
)
{
dispatchWebAppIntent
(
)
;
}
else
if
(
!
isViewIntentWithURL
(
safeIntent
)
)
{
dispatchNormalIntent
(
)
;
}
else
if
(
AppConstants
.
MOZ_ANDROID_CUSTOM_TABS
&
&
isCustomTabsIntent
(
safeIntent
)
&
&
isCustomTabsEnabled
(
)
)
{
dispatchCustomTabsIntent
(
)
;
}
else
if
(
!
safeIntent
.
getBooleanExtra
(
BrowserContract
.
SKIP_TAB_QUEUE_FLAG
false
)
&
&
TabQueueHelper
.
TAB_QUEUE_ENABLED
&
&
TabQueueHelper
.
isTabQueueEnabled
(
this
)
)
{
dispatchTabQueueIntent
(
)
;
}
else
{
dispatchNormalIntent
(
)
;
}
finish
(
)
;
}
private
void
dispatchTabQueueIntent
(
)
{
Intent
intent
=
new
Intent
(
getIntent
(
)
)
;
intent
.
setClass
(
getApplicationContext
(
)
TabQueueService
.
class
)
;
startService
(
intent
)
;
}
private
void
dispatchNormalIntent
(
)
{
Intent
intent
=
new
Intent
(
getIntent
(
)
)
;
intent
.
setClassName
(
getApplicationContext
(
)
AppConstants
.
MOZ_ANDROID_BROWSER_INTENT_CLASS
)
;
filterFlags
(
intent
)
;
startActivity
(
intent
)
;
}
private
void
dispatchCustomTabsIntent
(
)
{
Intent
intent
=
new
Intent
(
getIntent
(
)
)
;
intent
.
setClassName
(
getApplicationContext
(
)
CustomTabsActivity
.
class
.
getName
(
)
)
;
filterFlags
(
intent
)
;
startActivity
(
intent
)
;
}
private
void
dispatchWebAppIntent
(
)
{
final
Intent
intent
=
new
Intent
(
getIntent
(
)
)
;
final
String
manifestPath
=
getIntent
(
)
.
getStringExtra
(
WebAppActivity
.
MANIFEST_PATH
)
;
final
int
index
=
WebAppIndexer
.
getInstance
(
)
.
getIndexForManifest
(
manifestPath
this
)
;
intent
.
setFlags
(
Intent
.
FLAG_ACTIVITY_NEW_TASK
)
;
intent
.
setClassName
(
this
WebAppIndexer
.
WEBAPP_CLASS
+
index
)
;
startActivity
(
intent
)
;
}
private
static
void
filterFlags
(
Intent
intent
)
{
intent
.
setFlags
(
intent
.
getFlags
(
)
&
~
Intent
.
FLAG_ACTIVITY_NEW_TASK
)
;
intent
.
setFlags
(
intent
.
getFlags
(
)
&
~
Intent
.
FLAG_ACTIVITY_CLEAR_TASK
)
;
intent
.
setFlags
(
intent
.
getFlags
(
)
&
~
Intent
.
FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS
)
;
}
private
static
boolean
isViewIntentWithURL
(
NonNull
final
SafeIntent
safeIntent
)
{
return
Intent
.
ACTION_VIEW
.
equals
(
safeIntent
.
getAction
(
)
)
&
&
safeIntent
.
getDataString
(
)
!
=
null
;
}
private
static
boolean
isCustomTabsIntent
(
NonNull
final
SafeIntent
safeIntent
)
{
return
isViewIntentWithURL
(
safeIntent
)
&
&
safeIntent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_SESSION
)
;
}
private
static
boolean
isWebAppIntent
(
NonNull
final
SafeIntent
safeIntent
)
{
return
GeckoApp
.
ACTION_WEBAPP
.
equals
(
safeIntent
.
getAction
(
)
)
;
}
private
boolean
isCustomTabsEnabled
(
)
{
return
GeckoSharedPrefs
.
forApp
(
this
)
.
getBoolean
(
GeckoPreferences
.
PREFS_CUSTOM_TABS
false
)
;
}
}
