package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
annotation
.
RobocopTarget
;
import
org
.
mozilla
.
gecko
.
home
.
HomeConfig
;
import
org
.
mozilla
.
gecko
.
home
.
HomeConfig
.
PanelType
;
import
org
.
mozilla
.
gecko
.
util
.
StringUtils
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Collections
;
import
java
.
util
.
List
;
public
class
AboutPages
{
public
static
final
String
ACCOUNTS
=
"
about
:
accounts
"
;
public
static
final
String
ADDONS
=
"
about
:
addons
"
;
public
static
final
String
CONFIG
=
"
about
:
config
"
;
public
static
final
String
DOWNLOADS
=
"
about
:
downloads
"
;
public
static
final
String
FIREFOX
=
"
about
:
firefox
"
;
public
static
final
String
HEALTHREPORT
=
"
about
:
healthreport
"
;
public
static
final
String
HOME
=
"
about
:
home
"
;
public
static
final
String
LOGINS
=
"
about
:
logins
"
;
public
static
final
String
PRIVATEBROWSING
=
"
about
:
privatebrowsing
"
;
public
static
final
String
READER
=
"
about
:
reader
"
;
public
static
final
String
URL_FILTER
=
"
about
:
%
"
;
public
static
final
String
PANEL_PARAM
=
"
panel
"
;
public
static
final
boolean
isAboutPage
(
final
String
url
)
{
return
url
!
=
null
&
&
url
.
startsWith
(
"
about
:
"
)
;
}
public
static
final
boolean
isTitlelessAboutPage
(
final
String
url
)
{
return
isAboutHome
(
url
)
|
|
PRIVATEBROWSING
.
equals
(
url
)
;
}
public
static
final
boolean
isAboutHome
(
final
String
url
)
{
if
(
url
=
=
null
|
|
!
url
.
startsWith
(
HOME
)
)
{
return
false
;
}
return
HOME
.
equals
(
url
.
split
(
"
\
\
?
"
)
[
0
]
)
;
}
public
static
final
String
getPanelIdFromAboutHomeUrl
(
String
aboutHomeUrl
)
{
return
StringUtils
.
getQueryParameter
(
aboutHomeUrl
PANEL_PARAM
)
;
}
public
static
boolean
isAboutReader
(
final
String
url
)
{
return
isAboutPage
(
READER
url
)
;
}
public
static
boolean
isAboutConfig
(
final
String
url
)
{
return
isAboutPage
(
CONFIG
url
)
;
}
public
static
boolean
isAboutAddons
(
final
String
url
)
{
return
isAboutPage
(
ADDONS
url
)
;
}
public
static
boolean
isAboutPrivateBrowsing
(
final
String
url
)
{
return
isAboutPage
(
PRIVATEBROWSING
url
)
;
}
public
static
boolean
isAboutPage
(
String
page
String
url
)
{
return
url
!
=
null
&
&
url
.
toLowerCase
(
)
.
startsWith
(
page
)
;
}
public
static
final
List
<
String
>
DEFAULT_ICON_PAGES
=
Collections
.
unmodifiableList
(
Arrays
.
asList
(
HOME
ACCOUNTS
ADDONS
CONFIG
DOWNLOADS
FIREFOX
HEALTHREPORT
)
)
;
public
static
boolean
isBuiltinIconPage
(
final
String
url
)
{
if
(
url
=
=
null
|
|
!
url
.
startsWith
(
"
about
:
"
)
)
{
return
false
;
}
if
(
isAboutHome
(
url
)
)
{
return
true
;
}
for
(
String
page
:
DEFAULT_ICON_PAGES
)
{
if
(
page
.
equals
(
url
)
)
{
return
true
;
}
}
return
false
;
}
RobocopTarget
public
static
String
getURLForBuiltinPanelType
(
PanelType
panelType
)
throws
IllegalArgumentException
{
return
HOME
+
"
?
panel
=
"
+
HomeConfig
.
getIdForBuiltinPanelType
(
panelType
)
;
}
}
