package
org
.
mozilla
.
gecko
.
util
;
import
android
.
content
.
Context
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
mozglue
.
ContextUtils
.
SafeIntent
;
import
android
.
text
.
TextUtils
;
import
com
.
keepsafe
.
switchboard
.
SwitchBoard
;
import
org
.
mozilla
.
gecko
.
GeckoSharedPrefs
;
import
java
.
util
.
LinkedList
;
import
java
.
util
.
List
;
public
class
Experiments
{
private
static
final
String
LOGTAG
=
"
GeckoExperiments
"
;
public
static
final
String
BOOKMARKS_HISTORY_MENU
=
"
bookmark
-
history
-
menu
"
;
public
static
final
String
ONBOARDING2_A
=
"
onboarding2
-
a
"
;
public
static
final
String
ONBOARDING2_B
=
"
onboarding2
-
b
"
;
public
static
final
String
ONBOARDING2_C
=
"
onboarding2
-
c
"
;
public
static
final
String
PREF_ONBOARDING_VERSION
=
"
onboarding_version
"
;
public
static
final
String
SEARCH_TERM
=
"
search
-
term
"
;
private
static
volatile
Boolean
disabled
=
null
;
public
static
boolean
isDisabled
(
SafeIntent
intent
)
{
if
(
disabled
!
=
null
)
{
return
disabled
;
}
String
env
=
intent
.
getStringExtra
(
"
env0
"
)
;
for
(
int
i
=
1
;
env
!
=
null
;
i
+
+
)
{
if
(
env
.
startsWith
(
"
MOZ_DISABLE_SWITCHBOARD
=
"
)
)
{
if
(
!
env
.
endsWith
(
"
=
"
)
)
{
Log
.
d
(
LOGTAG
"
Switchboard
disabled
by
MOZ_DISABLE_SWITCHBOARD
environment
variable
"
)
;
disabled
=
true
;
return
disabled
;
}
}
env
=
intent
.
getStringExtra
(
"
env
"
+
i
)
;
}
disabled
=
false
;
return
disabled
;
}
public
static
boolean
isInExperimentLocal
(
Context
context
String
experiment
)
{
if
(
SwitchBoard
.
isInBucket
(
context
0
33
)
)
{
return
ONBOARDING2_A
.
equals
(
experiment
)
;
}
else
if
(
SwitchBoard
.
isInBucket
(
context
33
66
)
)
{
return
ONBOARDING2_B
.
equals
(
experiment
)
;
}
else
if
(
SwitchBoard
.
isInBucket
(
context
66
100
)
)
{
return
ONBOARDING2_C
.
equals
(
experiment
)
;
}
else
{
return
false
;
}
}
public
static
List
<
String
>
getActiveExperiments
(
Context
c
)
{
final
List
<
String
>
experiments
=
new
LinkedList
<
>
(
)
;
experiments
.
addAll
(
SwitchBoard
.
getActiveExperiments
(
c
)
)
;
final
String
onboardingExperiment
=
GeckoSharedPrefs
.
forProfile
(
c
)
.
getString
(
PREF_ONBOARDING_VERSION
null
)
;
if
(
!
TextUtils
.
isEmpty
(
onboardingExperiment
)
)
{
experiments
.
add
(
onboardingExperiment
)
;
}
return
experiments
;
}
}
