package
org
.
mozilla
.
gecko
.
util
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
pm
.
ResolveInfo
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
text
.
TextUtils
;
import
java
.
util
.
List
;
public
class
PackageUtil
{
private
static
final
Uri
TEST_URI
=
Uri
.
parse
(
"
https
:
/
/
www
.
mozilla
.
org
"
)
;
private
PackageUtil
(
)
{
}
public
static
ResolveInfo
getDefaultBrowser
(
NonNull
Context
context
)
{
final
Intent
browserIntent
=
new
Intent
(
Intent
.
ACTION_VIEW
TEST_URI
)
;
final
int
additionalFlags
=
0
;
final
ResolveInfo
resolveInfo
=
context
.
getPackageManager
(
)
.
resolveActivity
(
browserIntent
additionalFlags
)
;
if
(
resolveInfo
=
=
null
)
{
return
null
;
}
if
(
!
resolveInfo
.
activityInfo
.
exported
)
{
return
null
;
}
final
List
<
ResolveInfo
>
browsers
=
resolveBrowsers
(
context
)
;
for
(
ResolveInfo
it
:
browsers
)
{
if
(
resolveInfo
.
activityInfo
.
packageName
.
equals
(
it
.
activityInfo
.
packageName
)
)
{
return
resolveInfo
;
}
}
return
null
;
}
public
static
String
getDefaultBrowserPackage
(
NonNull
final
Context
context
)
{
final
ResolveInfo
resolveInfo
=
getDefaultBrowser
(
context
)
;
if
(
resolveInfo
!
=
null
)
{
return
resolveInfo
.
activityInfo
.
packageName
;
}
else
{
return
null
;
}
}
public
static
boolean
isNoDefaultBrowserSet
(
Context
context
)
{
final
String
defaultBrowserPackageName
=
PackageUtil
.
getDefaultBrowserPackage
(
context
)
;
return
TextUtils
.
isEmpty
(
defaultBrowserPackageName
)
;
}
public
static
void
showInstalledBrowsers
(
Context
context
)
{
try
{
Intent
intent
=
new
Intent
(
Intent
.
ACTION_VIEW
)
;
intent
.
setData
(
Uri
.
parse
(
"
https
:
/
/
www
.
mozilla
.
org
/
firefox
/
mobile
"
)
)
;
context
.
startActivity
(
intent
)
;
}
catch
(
Exception
e
)
{
e
.
printStackTrace
(
)
;
}
}
private
static
List
<
ResolveInfo
>
resolveBrowsers
(
NonNull
Context
context
)
{
final
Intent
browserIntent
=
new
Intent
(
Intent
.
ACTION_VIEW
TEST_URI
)
;
final
int
additionalFlags
=
0
;
return
context
.
getPackageManager
(
)
.
queryIntentActivities
(
browserIntent
additionalFlags
)
;
}
}
