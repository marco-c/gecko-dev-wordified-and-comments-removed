package
org
.
mozilla
.
gecko
.
util
;
import
android
.
content
.
Context
;
import
android
.
os
.
AsyncTask
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
WorkerThread
;
import
android
.
util
.
Log
;
import
ch
.
boye
.
httpclientandroidlib
.
util
.
TextUtils
;
import
org
.
mozilla
.
gecko
.
util
.
publicsuffix
.
PublicSuffix
;
import
java
.
lang
.
ref
.
WeakReference
;
import
java
.
net
.
URI
;
import
java
.
net
.
URISyntaxException
;
public
class
URIUtils
{
private
static
final
String
LOGTAG
=
"
GeckoURIUtils
"
;
private
URIUtils
(
)
{
}
Nullable
public
static
URI
uriOrNull
(
final
String
uriString
)
{
try
{
return
new
URI
(
uriString
)
;
}
catch
(
final
URISyntaxException
e
)
{
return
null
;
}
}
WorkerThread
public
static
String
getHostSecondLevelDomain
(
NonNull
final
Context
context
NonNull
final
String
uriString
)
throws
URISyntaxException
{
if
(
context
=
=
null
)
{
throw
new
NullPointerException
(
"
Expected
non
-
null
Context
argument
"
)
;
}
if
(
uriString
=
=
null
)
{
throw
new
NullPointerException
(
"
Expected
non
-
null
uri
argument
"
)
;
}
final
URI
uri
=
new
URI
(
uriString
)
;
final
String
baseDomain
=
getBaseDomain
(
context
uri
)
;
if
(
baseDomain
=
=
null
)
{
final
String
normalizedHost
=
StringUtils
.
stripCommonSubdomains
(
uri
.
getHost
(
)
)
;
return
!
TextUtils
.
isEmpty
(
normalizedHost
)
?
normalizedHost
:
uriString
;
}
return
PublicSuffix
.
stripPublicSuffix
(
context
baseDomain
)
;
}
Nullable
WorkerThread
public
static
String
getBaseDomain
(
NonNull
final
Context
context
final
URI
uri
)
{
final
String
host
=
uri
.
getHost
(
)
;
if
(
isIPv6
(
uri
)
|
|
TextUtils
.
isEmpty
(
host
)
)
{
return
null
;
}
if
(
!
host
.
contains
(
"
.
"
)
)
{
return
host
;
}
final
String
publicSuffixWithDomain
=
PublicSuffix
.
getPublicSuffix
(
context
host
1
)
;
return
!
TextUtils
.
isEmpty
(
publicSuffixWithDomain
)
?
publicSuffixWithDomain
:
null
;
}
private
static
boolean
isIPv6
(
final
URI
uri
)
{
final
String
host
=
uri
.
getHost
(
)
;
return
!
TextUtils
.
isEmpty
(
host
)
&
&
host
.
contains
(
"
:
"
)
;
}
public
static
abstract
class
GetHostSecondLevelDomainAsyncTask
extends
AsyncTask
<
Void
Void
String
>
{
protected
final
WeakReference
<
Context
>
contextWeakReference
;
protected
final
String
uriString
;
public
GetHostSecondLevelDomainAsyncTask
(
final
Context
contextWeakReference
final
String
uriString
)
{
this
.
contextWeakReference
=
new
WeakReference
<
>
(
contextWeakReference
)
;
this
.
uriString
=
uriString
;
}
Override
protected
String
doInBackground
(
final
Void
.
.
.
params
)
{
final
Context
context
=
contextWeakReference
.
get
(
)
;
if
(
context
=
=
null
)
{
return
null
;
}
try
{
return
URIUtils
.
getHostSecondLevelDomain
(
context
uriString
)
;
}
catch
(
final
URISyntaxException
e
)
{
Log
.
w
(
LOGTAG
"
Unable
to
fetch
second
level
domain
.
"
)
;
return
null
;
}
}
}
}
