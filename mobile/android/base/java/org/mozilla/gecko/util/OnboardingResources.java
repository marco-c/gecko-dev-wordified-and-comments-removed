package
org
.
mozilla
.
gecko
.
util
;
import
android
.
content
.
Context
;
import
android
.
support
.
annotation
.
NonNull
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
R
;
import
java
.
util
.
Locale
;
public
class
OnboardingResources
{
private
static
OnboardingResources
INSTANCE
;
public
enum
Version
{
INITIAL
NEW
UPDATED
}
private
boolean
areStringsLocalized
;
private
Version
currentVersion
;
private
String
[
]
welcomeMessages
;
private
String
[
]
welcomeSubtexts
;
private
String
[
]
privacySubtexts
;
private
String
[
]
syncTitles
;
private
String
[
]
syncSubtexts
;
private
String
[
]
syncAccountButtons
;
private
int
[
]
syncImageResIds
;
private
OnboardingResources
(
final
Context
context
)
{
initializeResources
(
context
)
;
setOnboardingVersion
(
context
)
;
}
public
static
OnboardingResources
getInstance
(
final
Context
context
)
{
if
(
INSTANCE
=
=
null
)
{
INSTANCE
=
new
OnboardingResources
(
context
)
;
}
return
INSTANCE
;
}
public
boolean
useNewOnboarding
(
)
{
return
areStringsLocalized
;
}
public
Version
getVersion
(
)
{
return
currentVersion
;
}
public
String
getWelcomeMessage
(
)
{
return
welcomeMessages
[
currentVersion
.
ordinal
(
)
]
;
}
public
String
getWelcomeSubtext
(
)
{
return
welcomeSubtexts
[
currentVersion
.
ordinal
(
)
]
;
}
public
String
getPrivacySubtext
(
)
{
return
privacySubtexts
[
currentVersion
.
ordinal
(
)
]
;
}
public
String
getSyncTitle
(
)
{
return
syncTitles
[
currentVersion
.
ordinal
(
)
]
;
}
public
String
getSyncSubtext
(
)
{
return
syncSubtexts
[
currentVersion
.
ordinal
(
)
]
;
}
public
String
getSyncButtonText
(
)
{
return
syncAccountButtons
[
currentVersion
.
ordinal
(
)
]
;
}
public
int
getSyncImageResId
(
)
{
return
syncImageResIds
[
currentVersion
.
ordinal
(
)
]
;
}
private
void
setOnboardingVersion
(
NonNull
final
Context
context
)
{
final
Locale
locale
=
context
.
getResources
(
)
.
getConfiguration
(
)
.
locale
;
if
(
"
en
"
.
equals
(
locale
.
getLanguage
(
)
)
)
{
currentVersion
=
Version
.
UPDATED
;
areStringsLocalized
=
true
;
return
;
}
final
int
newStringIndex
=
Version
.
NEW
.
ordinal
(
)
;
final
int
updatedStringIndex
=
Version
.
UPDATED
.
ordinal
(
)
;
final
String
englishWelcomeMessage
=
"
Welcome
to
"
+
AppConstants
.
MOZ_APP_BASENAME
;
final
String
englishWelcomeSubtext
=
"
A
modern
mobile
browser
from
Mozilla
the
non
-
profit
committed
to
a
free
and
open
web
.
"
;
final
boolean
areWelcomeStringsLocalized
=
!
englishWelcomeMessage
.
equals
(
welcomeMessages
[
newStringIndex
]
)
&
&
!
englishWelcomeSubtext
.
equals
(
welcomeSubtexts
[
newStringIndex
]
)
;
final
String
englishPrivacySubtext
=
"
Private
browsing
blocks
ad
trackers
that
follow
you
online
.
"
;
final
boolean
arePrivacyStringsLocalized
=
!
englishPrivacySubtext
.
equals
(
privacySubtexts
[
newStringIndex
]
)
;
final
String
englishSyncSubtext
=
"
Sync
the
things
you
save
on
mobile
to
Firefox
for
desktop
privately
and
securely
.
"
;
final
String
englishSyncButton
=
"
Turn
on
Sync
"
;
final
boolean
areSyncStringsLocalized
=
!
englishSyncSubtext
.
equals
(
syncSubtexts
[
newStringIndex
]
)
&
&
!
englishSyncButton
.
equals
(
syncAccountButtons
[
newStringIndex
]
)
;
areStringsLocalized
=
areWelcomeStringsLocalized
&
&
arePrivacyStringsLocalized
&
&
areSyncStringsLocalized
;
if
(
!
areStringsLocalized
)
{
currentVersion
=
Version
.
INITIAL
;
}
else
{
currentVersion
=
Version
.
NEW
;
final
String
englishSyncUpdatedSubtext
=
"
Sign
in
to
your
account
to
get
the
most
out
of
"
+
AppConstants
.
MOZ_APP_BASENAME
;
final
String
englishSyncUpdatedButton
=
"
Sign
in
to
"
+
AppConstants
.
MOZ_APP_BASENAME
;
final
boolean
areUpdatedSyncStringsLocalized
=
!
englishSyncUpdatedSubtext
.
equals
(
syncSubtexts
[
updatedStringIndex
]
)
&
&
!
englishSyncUpdatedButton
.
equals
(
syncAccountButtons
[
updatedStringIndex
]
)
;
if
(
areUpdatedSyncStringsLocalized
)
{
currentVersion
=
Version
.
UPDATED
;
}
}
}
private
void
initializeResources
(
NonNull
final
Context
context
)
{
welcomeMessages
=
new
String
[
]
{
context
.
getString
(
R
.
string
.
firstrun_urlbar_message
)
context
.
getString
(
R
.
string
.
newfirstrun_urlbar_message
)
context
.
getString
(
R
.
string
.
newfirstrun_urlbar_message
)
}
;
welcomeSubtexts
=
new
String
[
]
{
context
.
getString
(
R
.
string
.
firstrun_urlbar_subtext
)
context
.
getString
(
R
.
string
.
newfirstrun_urlbar_subtext
)
context
.
getString
(
R
.
string
.
newfirstrun_urlbar_subtext
)
}
;
privacySubtexts
=
new
String
[
]
{
context
.
getString
(
R
.
string
.
firstrun_privacy_subtext
)
context
.
getString
(
R
.
string
.
newfirstrun_privacy_subtext
)
context
.
getString
(
R
.
string
.
newfirstrun_privacy_subtext
)
}
;
syncTitles
=
new
String
[
]
{
context
.
getString
(
R
.
string
.
firstrun_sync_title
)
context
.
getString
(
R
.
string
.
firstrun_sync_title
)
context
.
getString
(
R
.
string
.
updatednewfirstrun_sync_title
)
}
;
syncSubtexts
=
new
String
[
]
{
context
.
getString
(
R
.
string
.
firstrun_sync_subtext
)
context
.
getString
(
R
.
string
.
newfirstrun_sync_subtext
)
context
.
getString
(
R
.
string
.
updatednewfirstrun_sync_subtext
)
}
;
syncAccountButtons
=
new
String
[
]
{
context
.
getString
(
R
.
string
.
firstrun_signin_button
)
context
.
getString
(
R
.
string
.
newfirstrun_signin_button
)
context
.
getString
(
R
.
string
.
updatednewfirstrun_signin_button
)
}
;
syncImageResIds
=
new
int
[
]
{
R
.
drawable
.
firstrun_sync
R
.
drawable
.
firstrun_sync2
R
.
drawable
.
firstrun_account
}
;
}
}
