package
org
.
mozilla
.
gecko
.
util
;
import
android
.
content
.
Context
;
import
android
.
net
.
ConnectivityManager
;
import
android
.
net
.
NetworkInfo
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
telephony
.
TelephonyManager
;
public
class
NetworkUtils
{
public
enum
ConnectionSubType
{
CELL_2G
(
"
2g
"
)
CELL_3G
(
"
3g
"
)
CELL_4G
(
"
4g
"
)
ETHERNET
(
"
ethernet
"
)
WIFI
(
"
wifi
"
)
WIMAX
(
"
wimax
"
)
UNKNOWN
(
"
unknown
"
)
;
public
final
String
value
;
ConnectionSubType
(
String
value
)
{
this
.
value
=
value
;
}
}
public
enum
NetworkStatus
{
UP
(
"
up
"
)
DOWN
(
"
down
"
)
UNKNOWN
(
"
unknown
"
)
;
public
final
String
value
;
NetworkStatus
(
String
value
)
{
this
.
value
=
value
;
}
}
public
enum
ConnectionType
{
CELLULAR
(
0
)
BLUETOOTH
(
1
)
ETHERNET
(
2
)
WIFI
(
3
)
OTHER
(
4
)
NONE
(
5
)
;
public
final
int
value
;
ConnectionType
(
int
value
)
{
this
.
value
=
value
;
}
}
public
static
boolean
isBackgroundDataEnabled
(
final
Context
context
)
{
final
NetworkInfo
networkInfo
=
getActiveNetworkInfo
(
context
)
;
return
networkInfo
!
=
null
&
&
networkInfo
.
isAvailable
(
)
&
&
networkInfo
.
isConnectedOrConnecting
(
)
;
}
Nullable
private
static
NetworkInfo
getActiveNetworkInfo
(
final
Context
context
)
{
final
ConnectivityManager
connectivity
=
(
ConnectivityManager
)
context
.
getSystemService
(
Context
.
CONNECTIVITY_SERVICE
)
;
if
(
connectivity
=
=
null
)
{
return
null
;
}
return
connectivity
.
getActiveNetworkInfo
(
)
;
}
public
static
boolean
isConnected
(
NonNull
Context
context
)
{
return
isConnected
(
(
ConnectivityManager
)
context
.
getSystemService
(
Context
.
CONNECTIVITY_SERVICE
)
)
;
}
public
static
boolean
isConnected
(
ConnectivityManager
connectivityManager
)
{
if
(
connectivityManager
=
=
null
)
{
return
false
;
}
final
NetworkInfo
networkInfo
=
connectivityManager
.
getActiveNetworkInfo
(
)
;
return
networkInfo
!
=
null
&
&
networkInfo
.
isConnected
(
)
;
}
public
static
ConnectionSubType
getConnectionSubType
(
ConnectivityManager
connectivityManager
)
{
if
(
connectivityManager
=
=
null
)
{
return
ConnectionSubType
.
UNKNOWN
;
}
final
NetworkInfo
networkInfo
=
connectivityManager
.
getActiveNetworkInfo
(
)
;
if
(
networkInfo
=
=
null
)
{
return
ConnectionSubType
.
UNKNOWN
;
}
switch
(
networkInfo
.
getType
(
)
)
{
case
ConnectivityManager
.
TYPE_ETHERNET
:
return
ConnectionSubType
.
ETHERNET
;
case
ConnectivityManager
.
TYPE_MOBILE
:
return
getGenericMobileSubtype
(
networkInfo
.
getSubtype
(
)
)
;
case
ConnectivityManager
.
TYPE_WIMAX
:
return
ConnectionSubType
.
WIMAX
;
case
ConnectivityManager
.
TYPE_WIFI
:
return
ConnectionSubType
.
WIFI
;
default
:
return
ConnectionSubType
.
UNKNOWN
;
}
}
public
static
ConnectionType
getConnectionType
(
ConnectivityManager
connectivityManager
)
{
if
(
connectivityManager
=
=
null
)
{
return
ConnectionType
.
NONE
;
}
final
NetworkInfo
networkInfo
=
connectivityManager
.
getActiveNetworkInfo
(
)
;
if
(
networkInfo
=
=
null
)
{
return
ConnectionType
.
NONE
;
}
switch
(
networkInfo
.
getType
(
)
)
{
case
ConnectivityManager
.
TYPE_BLUETOOTH
:
return
ConnectionType
.
BLUETOOTH
;
case
ConnectivityManager
.
TYPE_ETHERNET
:
return
ConnectionType
.
ETHERNET
;
case
ConnectivityManager
.
TYPE_MOBILE
:
case
ConnectivityManager
.
TYPE_WIMAX
:
return
ConnectionType
.
CELLULAR
;
case
ConnectivityManager
.
TYPE_WIFI
:
return
ConnectionType
.
WIFI
;
default
:
return
ConnectionType
.
OTHER
;
}
}
public
static
NetworkStatus
getNetworkStatus
(
ConnectivityManager
connectivityManager
)
{
if
(
connectivityManager
=
=
null
)
{
return
NetworkStatus
.
UNKNOWN
;
}
if
(
isConnected
(
connectivityManager
)
)
{
return
NetworkStatus
.
UP
;
}
return
NetworkStatus
.
DOWN
;
}
private
static
ConnectionSubType
getGenericMobileSubtype
(
int
subtype
)
{
switch
(
subtype
)
{
case
TelephonyManager
.
NETWORK_TYPE_GPRS
:
case
TelephonyManager
.
NETWORK_TYPE_EDGE
:
case
TelephonyManager
.
NETWORK_TYPE_CDMA
:
case
TelephonyManager
.
NETWORK_TYPE_1xRTT
:
case
TelephonyManager
.
NETWORK_TYPE_IDEN
:
return
ConnectionSubType
.
CELL_2G
;
case
TelephonyManager
.
NETWORK_TYPE_UMTS
:
case
TelephonyManager
.
NETWORK_TYPE_EVDO_0
:
case
TelephonyManager
.
NETWORK_TYPE_EVDO_A
:
case
TelephonyManager
.
NETWORK_TYPE_HSDPA
:
case
TelephonyManager
.
NETWORK_TYPE_HSUPA
:
case
TelephonyManager
.
NETWORK_TYPE_HSPA
:
case
TelephonyManager
.
NETWORK_TYPE_EVDO_B
:
case
TelephonyManager
.
NETWORK_TYPE_EHRPD
:
case
TelephonyManager
.
NETWORK_TYPE_HSPAP
:
return
ConnectionSubType
.
CELL_3G
;
case
TelephonyManager
.
NETWORK_TYPE_LTE
:
return
ConnectionSubType
.
CELL_4G
;
default
:
return
ConnectionSubType
.
UNKNOWN
;
}
}
}
