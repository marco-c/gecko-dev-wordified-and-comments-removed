package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserDB
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserProvider
;
import
org
.
mozilla
.
gecko
.
home
.
ImageLoader
;
import
org
.
mozilla
.
gecko
.
icons
.
storage
.
MemoryStorage
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
content
.
BroadcastReceiver
;
import
android
.
content
.
ComponentCallbacks2
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
IntentFilter
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
support
.
v4
.
content
.
LocalBroadcastManager
;
import
android
.
util
.
Log
;
class
MemoryMonitor
extends
BroadcastReceiver
implements
ComponentCallbacks2
{
private
static
final
String
LOGTAG
=
"
GeckoMemoryMonitor
"
;
private
static
final
String
ACTION_MEMORY_DUMP
=
"
org
.
mozilla
.
gecko
.
MEMORY_DUMP
"
;
private
static
final
String
ACTION_FORCE_PRESSURE
=
"
org
.
mozilla
.
gecko
.
FORCE_MEMORY_PRESSURE
"
;
private
static
final
int
MEMORY_PRESSURE_NONE
=
0
;
private
static
final
int
MEMORY_PRESSURE_CLEANUP
=
1
;
private
static
final
int
MEMORY_PRESSURE_LOW
=
2
;
private
static
final
int
MEMORY_PRESSURE_MEDIUM
=
3
;
private
static
final
int
MEMORY_PRESSURE_HIGH
=
4
;
SuppressLint
(
"
StaticFieldLeak
"
)
private
static
final
MemoryMonitor
sInstance
=
new
MemoryMonitor
(
)
;
static
MemoryMonitor
getInstance
(
)
{
return
sInstance
;
}
private
Context
mAppContext
;
private
final
PressureDecrementer
mPressureDecrementer
;
private
int
mMemoryPressure
;
private
volatile
boolean
mStoragePressure
;
private
boolean
mInited
;
private
MemoryMonitor
(
)
{
mPressureDecrementer
=
new
PressureDecrementer
(
)
;
mMemoryPressure
=
MEMORY_PRESSURE_NONE
;
}
public
void
init
(
final
Context
context
)
{
if
(
mInited
)
{
return
;
}
mAppContext
=
context
.
getApplicationContext
(
)
;
IntentFilter
filter
=
new
IntentFilter
(
)
;
filter
.
addAction
(
Intent
.
ACTION_DEVICE_STORAGE_LOW
)
;
filter
.
addAction
(
Intent
.
ACTION_DEVICE_STORAGE_OK
)
;
filter
.
addAction
(
ACTION_MEMORY_DUMP
)
;
filter
.
addAction
(
ACTION_FORCE_PRESSURE
)
;
mAppContext
.
registerReceiver
(
this
filter
)
;
mAppContext
.
registerComponentCallbacks
(
this
)
;
mInited
=
true
;
}
Override
public
void
onLowMemory
(
)
{
Log
.
d
(
LOGTAG
"
onLowMemory
(
)
notification
received
"
)
;
if
(
increaseMemoryPressure
(
MEMORY_PRESSURE_HIGH
)
)
{
if
(
GeckoThread
.
isStateAtLeast
(
GeckoThread
.
State
.
PROFILE_READY
)
)
{
GeckoThread
.
waitOnGecko
(
)
;
}
}
}
Override
public
void
onTrimMemory
(
int
level
)
{
Log
.
d
(
LOGTAG
"
onTrimMemory
(
)
notification
received
with
level
"
+
level
)
;
if
(
level
=
=
ComponentCallbacks2
.
TRIM_MEMORY_COMPLETE
)
{
return
;
}
switch
(
level
)
{
case
ComponentCallbacks2
.
TRIM_MEMORY_RUNNING_CRITICAL
:
case
ComponentCallbacks2
.
TRIM_MEMORY_MODERATE
:
increaseMemoryPressure
(
MEMORY_PRESSURE_HIGH
)
;
break
;
case
ComponentCallbacks2
.
TRIM_MEMORY_RUNNING_LOW
:
increaseMemoryPressure
(
MEMORY_PRESSURE_MEDIUM
)
;
break
;
case
ComponentCallbacks2
.
TRIM_MEMORY_RUNNING_MODERATE
:
increaseMemoryPressure
(
MEMORY_PRESSURE_LOW
)
;
break
;
case
ComponentCallbacks2
.
TRIM_MEMORY_UI_HIDDEN
:
case
ComponentCallbacks2
.
TRIM_MEMORY_BACKGROUND
:
increaseMemoryPressure
(
MEMORY_PRESSURE_CLEANUP
)
;
break
;
default
:
Log
.
d
(
LOGTAG
"
Unhandled
onTrimMemory
(
)
level
"
+
level
)
;
break
;
}
}
Override
public
void
onReceive
(
Context
context
Intent
intent
)
{
if
(
Intent
.
ACTION_DEVICE_STORAGE_LOW
.
equals
(
intent
.
getAction
(
)
)
)
{
Log
.
d
(
LOGTAG
"
Device
storage
is
low
"
)
;
mStoragePressure
=
true
;
ThreadUtils
.
postToBackgroundThread
(
new
StorageReducer
(
context
)
)
;
}
else
if
(
Intent
.
ACTION_DEVICE_STORAGE_OK
.
equals
(
intent
.
getAction
(
)
)
)
{
Log
.
d
(
LOGTAG
"
Device
storage
is
ok
"
)
;
mStoragePressure
=
false
;
}
else
if
(
ACTION_MEMORY_DUMP
.
equals
(
intent
.
getAction
(
)
)
)
{
String
label
=
intent
.
getStringExtra
(
"
label
"
)
;
if
(
label
=
=
null
)
{
label
=
"
default
"
;
}
GeckoAppShell
.
notifyObservers
(
"
Memory
:
Dump
"
label
)
;
}
else
if
(
ACTION_FORCE_PRESSURE
.
equals
(
intent
.
getAction
(
)
)
)
{
increaseMemoryPressure
(
MEMORY_PRESSURE_HIGH
)
;
}
}
WrapForJNI
(
calledFrom
=
"
ui
"
)
private
static
native
void
dispatchMemoryPressure
(
)
;
private
boolean
increaseMemoryPressure
(
int
level
)
{
int
oldLevel
;
synchronized
(
this
)
{
if
(
mMemoryPressure
>
level
)
{
return
false
;
}
oldLevel
=
mMemoryPressure
;
mMemoryPressure
=
level
;
}
Log
.
d
(
LOGTAG
"
increasing
memory
pressure
to
"
+
level
)
;
mPressureDecrementer
.
start
(
)
;
if
(
oldLevel
=
=
level
)
{
return
false
;
}
if
(
level
>
=
MEMORY_PRESSURE_MEDIUM
)
{
if
(
GeckoThread
.
isRunning
(
)
)
{
dispatchMemoryPressure
(
)
;
}
MemoryStorage
.
get
(
)
.
evictAll
(
)
;
ImageLoader
.
clearLruCache
(
)
;
LocalBroadcastManager
.
getInstance
(
mAppContext
)
.
sendBroadcast
(
new
Intent
(
BrowserProvider
.
ACTION_SHRINK_MEMORY
)
)
;
}
return
true
;
}
boolean
isUnderStoragePressure
(
)
{
return
mStoragePressure
;
}
WrapForJNI
private
static
native
void
dispatchMemoryPressureStop
(
)
;
private
boolean
decreaseMemoryPressure
(
)
{
int
newLevel
;
synchronized
(
this
)
{
if
(
mMemoryPressure
<
=
MEMORY_PRESSURE_NONE
)
{
return
false
;
}
else
{
newLevel
=
-
-
mMemoryPressure
;
}
}
Log
.
d
(
LOGTAG
"
Decreased
memory
pressure
to
"
+
newLevel
)
;
if
(
newLevel
=
=
MEMORY_PRESSURE_NONE
)
{
if
(
GeckoThread
.
isRunning
(
)
)
{
dispatchMemoryPressureStop
(
)
;
}
}
return
true
;
}
class
PressureDecrementer
implements
Runnable
{
private
static
final
int
DECREMENT_DELAY
=
5
*
60
*
1000
;
private
boolean
mPosted
;
synchronized
void
start
(
)
{
if
(
mPosted
)
{
ThreadUtils
.
getBackgroundHandler
(
)
.
removeCallbacks
(
this
)
;
}
ThreadUtils
.
getBackgroundHandler
(
)
.
postDelayed
(
this
DECREMENT_DELAY
)
;
mPosted
=
true
;
}
Override
public
synchronized
void
run
(
)
{
if
(
!
decreaseMemoryPressure
(
)
)
{
mPosted
=
false
;
return
;
}
ThreadUtils
.
getBackgroundHandler
(
)
.
postDelayed
(
this
DECREMENT_DELAY
)
;
}
}
private
static
class
StorageReducer
implements
Runnable
{
private
final
Context
mContext
;
private
final
BrowserDB
mDB
;
public
StorageReducer
(
final
Context
context
)
{
this
.
mContext
=
context
;
GeckoProfile
profile
=
GeckoProfile
.
get
(
mContext
)
;
if
(
profile
.
inGuestMode
(
)
)
{
profile
=
GeckoProfile
.
get
(
mContext
GeckoProfile
.
DEFAULT_PROFILE
)
;
}
mDB
=
BrowserDB
.
from
(
profile
)
;
}
Override
public
void
run
(
)
{
if
(
!
GeckoThread
.
isRunning
(
)
)
{
ThreadUtils
.
getBackgroundHandler
(
)
.
postDelayed
(
this
10000
)
;
return
;
}
if
(
!
MemoryMonitor
.
getInstance
(
)
.
isUnderStoragePressure
(
)
)
{
return
;
}
final
ContentResolver
cr
=
mContext
.
getContentResolver
(
)
;
mDB
.
expireHistory
(
cr
BrowserContract
.
ExpirePriority
.
AGGRESSIVE
)
;
mDB
.
removeThumbnails
(
cr
)
;
}
}
Override
public
void
onConfigurationChanged
(
Configuration
newConfig
)
{
}
}
