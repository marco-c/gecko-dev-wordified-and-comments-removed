package
org
.
mozilla
.
gecko
;
import
java
.
io
.
File
;
import
java
.
util
.
Collection
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Locale
;
import
java
.
util
.
Set
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicBoolean
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicReference
;
import
org
.
json
.
JSONArray
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
annotation
.
ReflectionTarget
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoJarReader
;
import
android
.
content
.
BroadcastReceiver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
IntentFilter
;
import
android
.
content
.
SharedPreferences
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
content
.
res
.
Resources
;
import
android
.
os
.
Build
;
import
android
.
util
.
Log
;
public
class
BrowserLocaleManager
implements
LocaleManager
{
private
static
final
String
LOG_TAG
=
"
GeckoLocales
"
;
private
static
final
String
EVENT_LOCALE_CHANGED
=
"
Locale
:
Changed
"
;
private
static
final
String
PREF_LOCALE
=
"
locale
"
;
private
static
final
String
FALLBACK_LOCALE_TAG
=
"
en
-
US
"
;
private
volatile
Locale
currentLocale
;
private
volatile
Locale
systemLocale
=
Locale
.
getDefault
(
)
;
private
final
AtomicBoolean
inited
=
new
AtomicBoolean
(
false
)
;
private
boolean
systemLocaleDidChange
;
private
BroadcastReceiver
receiver
;
private
static
final
AtomicReference
<
LocaleManager
>
instance
=
new
AtomicReference
<
LocaleManager
>
(
)
;
ReflectionTarget
public
static
LocaleManager
getInstance
(
)
{
LocaleManager
localeManager
=
instance
.
get
(
)
;
if
(
localeManager
!
=
null
)
{
return
localeManager
;
}
localeManager
=
new
BrowserLocaleManager
(
)
;
if
(
instance
.
compareAndSet
(
null
localeManager
)
)
{
return
localeManager
;
}
else
{
return
instance
.
get
(
)
;
}
}
Override
public
void
initialize
(
final
Context
context
)
{
if
(
!
inited
.
compareAndSet
(
false
true
)
)
{
return
;
}
receiver
=
new
BroadcastReceiver
(
)
{
Override
public
void
onReceive
(
Context
context
Intent
intent
)
{
final
Locale
current
=
systemLocale
;
systemLocale
=
context
.
getResources
(
)
.
getConfiguration
(
)
.
locale
;
systemLocaleDidChange
=
true
;
Log
.
d
(
LOG_TAG
"
System
locale
changed
from
"
+
current
+
"
to
"
+
systemLocale
)
;
final
SharedPreferences
prefs
=
GeckoSharedPrefs
.
forProfile
(
context
)
;
BrowserLocaleManager
.
storeAndNotifyOSLocale
(
prefs
systemLocale
)
;
}
}
;
context
.
registerReceiver
(
receiver
new
IntentFilter
(
Intent
.
ACTION_LOCALE_CHANGED
)
)
;
}
Override
public
boolean
systemLocaleDidChange
(
)
{
return
systemLocaleDidChange
;
}
Override
public
void
correctLocale
(
Context
context
Resources
res
Configuration
config
)
{
final
Locale
current
=
getCurrentLocale
(
context
)
;
if
(
current
=
=
null
)
{
Log
.
d
(
LOG_TAG
"
No
selected
locale
.
No
correction
needed
.
"
)
;
return
;
}
config
.
locale
=
current
;
Locale
.
setDefault
(
current
)
;
res
.
updateConfiguration
(
config
null
)
;
}
Override
public
Locale
onSystemConfigurationChanged
(
final
Context
context
final
Resources
resources
final
Configuration
configuration
final
Locale
currentActivityLocale
)
{
if
(
!
isMirroringSystemLocale
(
context
)
)
{
correctLocale
(
context
resources
configuration
)
;
}
final
Locale
changed
=
configuration
.
locale
;
if
(
changed
.
equals
(
currentActivityLocale
)
)
{
return
null
;
}
return
changed
;
}
public
static
void
storeAndNotifyOSLocale
(
final
SharedPreferences
prefs
final
Locale
osLocale
)
{
if
(
osLocale
=
=
null
)
{
return
;
}
final
String
lastOSLocale
=
prefs
.
getString
(
"
osLocale
"
null
)
;
final
String
osLocaleString
=
osLocale
.
toString
(
)
;
if
(
osLocaleString
.
equals
(
lastOSLocale
)
)
{
Log
.
d
(
LOG_TAG
"
Previous
locale
"
+
lastOSLocale
+
"
same
as
new
.
Doing
nothing
.
"
)
;
return
;
}
prefs
.
edit
(
)
.
putString
(
"
osLocale
"
osLocaleString
)
.
apply
(
)
;
final
GeckoBundle
data
=
new
GeckoBundle
(
1
)
;
data
.
putString
(
"
languageTag
"
Locales
.
getLanguageTag
(
osLocale
)
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
Locale
:
OS
"
data
)
;
if
(
GeckoThread
.
isRunning
(
)
)
{
refreshLocales
(
)
;
}
else
{
GeckoThread
.
queueNativeCall
(
BrowserLocaleManager
.
class
"
refreshLocales
"
)
;
}
}
Override
public
String
getAndApplyPersistedLocale
(
Context
context
)
{
initialize
(
context
)
;
final
long
t1
=
android
.
os
.
SystemClock
.
uptimeMillis
(
)
;
final
String
localeCode
=
getPersistedLocale
(
context
)
;
if
(
localeCode
=
=
null
)
{
return
null
;
}
final
String
resultant
=
updateLocale
(
context
localeCode
)
;
if
(
resultant
=
=
null
)
{
updateConfiguration
(
context
currentLocale
)
;
}
final
long
t2
=
android
.
os
.
SystemClock
.
uptimeMillis
(
)
;
Log
.
i
(
LOG_TAG
"
Locale
read
and
update
took
:
"
+
(
t2
-
t1
)
+
"
ms
.
"
)
;
return
resultant
;
}
Override
public
String
setSelectedLocale
(
Context
context
String
localeCode
)
{
final
String
resultant
=
updateLocale
(
context
localeCode
)
;
persistLocale
(
context
localeCode
)
;
final
GeckoBundle
data
=
new
GeckoBundle
(
1
)
;
data
.
putString
(
"
languageTag
"
Locales
.
getLanguageTag
(
getCurrentLocale
(
context
)
)
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
EVENT_LOCALE_CHANGED
data
)
;
return
resultant
;
}
Override
public
void
resetToSystemLocale
(
Context
context
)
{
final
SharedPreferences
settings
=
getSharedPreferences
(
context
)
;
settings
.
edit
(
)
.
remove
(
PREF_LOCALE
)
.
apply
(
)
;
updateLocale
(
context
systemLocale
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
EVENT_LOCALE_CHANGED
null
)
;
}
Override
public
void
updateConfiguration
(
Context
context
Locale
locale
)
{
Resources
res
=
context
.
getResources
(
)
;
Configuration
config
=
res
.
getConfiguration
(
)
;
config
.
locale
=
locale
;
if
(
Build
.
VERSION
.
SDK_INT
>
=
Build
.
VERSION_CODES
.
JELLY_BEAN_MR1
)
{
config
.
setLayoutDirection
(
locale
)
;
}
res
.
updateConfiguration
(
config
null
)
;
}
private
SharedPreferences
getSharedPreferences
(
Context
context
)
{
return
GeckoSharedPrefs
.
forApp
(
context
)
;
}
private
String
getPersistedLocale
(
Context
context
)
{
final
SharedPreferences
settings
=
getSharedPreferences
(
context
)
;
final
String
locale
=
settings
.
getString
(
PREF_LOCALE
"
"
)
;
if
(
"
"
.
equals
(
locale
)
)
{
return
null
;
}
return
locale
;
}
private
void
persistLocale
(
Context
context
String
localeCode
)
{
final
SharedPreferences
settings
=
getSharedPreferences
(
context
)
;
settings
.
edit
(
)
.
putString
(
PREF_LOCALE
localeCode
)
.
apply
(
)
;
}
Override
public
Locale
getCurrentLocale
(
Context
context
)
{
if
(
currentLocale
!
=
null
)
{
return
currentLocale
;
}
final
String
current
=
getPersistedLocale
(
context
)
;
if
(
current
=
=
null
)
{
return
null
;
}
return
currentLocale
=
Locales
.
parseLocaleCode
(
current
)
;
}
Override
public
Locale
getDefaultSystemLocale
(
)
{
return
systemLocale
;
}
private
String
updateLocale
(
Context
context
String
localeCode
)
{
final
Locale
defaultLocale
=
Locale
.
getDefault
(
)
;
if
(
defaultLocale
.
toString
(
)
.
equals
(
localeCode
)
)
{
return
null
;
}
final
Locale
locale
=
Locales
.
parseLocaleCode
(
localeCode
)
;
return
updateLocale
(
context
locale
)
;
}
private
String
updateLocale
(
Context
context
final
Locale
locale
)
{
if
(
Locale
.
getDefault
(
)
.
equals
(
locale
)
)
{
return
null
;
}
Locale
.
setDefault
(
locale
)
;
currentLocale
=
locale
;
updateConfiguration
(
context
locale
)
;
return
locale
.
toString
(
)
;
}
Override
public
boolean
isMirroringSystemLocale
(
Context
context
)
{
return
getPersistedLocale
(
context
)
=
=
null
;
}
public
static
Collection
<
String
>
getPackagedLocaleTags
(
final
Context
context
)
{
final
String
resPath
=
"
res
/
multilocale
.
json
"
;
final
String
jarURL
=
GeckoJarReader
.
getJarURL
(
context
resPath
)
;
final
String
contents
=
GeckoJarReader
.
getText
(
context
jarURL
)
;
if
(
contents
=
=
null
)
{
return
null
;
}
try
{
final
JSONObject
multilocale
=
new
JSONObject
(
contents
)
;
final
JSONArray
locales
=
multilocale
.
getJSONArray
(
"
locales
"
)
;
if
(
locales
=
=
null
)
{
Log
.
e
(
LOG_TAG
"
No
'
locales
'
array
in
multilocales
.
json
!
"
)
;
return
null
;
}
final
Set
<
String
>
out
=
new
HashSet
<
String
>
(
locales
.
length
(
)
)
;
for
(
int
i
=
0
;
i
<
locales
.
length
(
)
;
+
+
i
)
{
out
.
add
(
locales
.
getString
(
i
)
)
;
}
return
out
;
}
catch
(
JSONException
e
)
{
Log
.
e
(
LOG_TAG
"
Unable
to
parse
multilocale
.
json
.
"
e
)
;
return
null
;
}
}
SuppressWarnings
(
"
static
-
method
"
)
public
String
getFallbackLocaleTag
(
)
{
return
FALLBACK_LOCALE_TAG
;
}
WrapForJNI
(
dispatchTo
=
"
Gecko
"
)
private
static
native
void
refreshLocales
(
)
;
WrapForJNI
private
static
String
getLocale
(
)
{
try
{
LocaleManager
localeManager
=
Locales
.
getLocaleManager
(
)
;
Context
context
=
GeckoAppShell
.
getApplicationContext
(
)
;
if
(
!
localeManager
.
isMirroringSystemLocale
(
context
)
)
{
return
Locales
.
getLanguageTag
(
localeManager
.
getCurrentLocale
(
context
)
)
;
}
Locale
locale
=
localeManager
.
getDefaultSystemLocale
(
)
;
return
Locales
.
getLanguageTag
(
locale
)
;
}
catch
(
NullPointerException
e
)
{
Log
.
i
(
LOG_TAG
"
Couldn
'
t
get
current
locale
.
"
)
;
return
null
;
}
}
}
