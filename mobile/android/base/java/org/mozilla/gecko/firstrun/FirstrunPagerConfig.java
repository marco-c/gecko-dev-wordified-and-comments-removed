package
org
.
mozilla
.
gecko
.
firstrun
;
import
android
.
content
.
Context
;
import
android
.
util
.
Log
;
import
com
.
keepsafe
.
switchboard
.
SwitchBoard
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
import
java
.
util
.
LinkedList
;
import
java
.
util
.
List
;
public
class
FirstrunPagerConfig
{
public
static
final
String
LOGTAG
=
"
FirstrunPagerConfig
"
;
public
static
final
String
ONBOARDING_A
=
"
onboarding
-
a
"
;
public
static
final
String
ONBOARDING_B
=
"
onboarding
-
b
"
;
public
static
final
String
ONBOARDING_C
=
"
onboarding
-
c
"
;
public
static
List
<
FirstrunPanelConfig
>
getDefault
(
Context
context
)
{
final
List
<
FirstrunPanelConfig
>
panels
=
new
LinkedList
<
>
(
)
;
if
(
isInExperimentLocal
(
context
ONBOARDING_A
)
)
{
panels
.
add
(
new
FirstrunPanelConfig
(
WelcomePanel
.
class
.
getName
(
)
WelcomePanel
.
TITLE_RES
)
)
;
Telemetry
.
startUISession
(
TelemetryContract
.
Session
.
EXPERIMENT
ONBOARDING_A
)
;
}
else
if
(
isInExperimentLocal
(
context
ONBOARDING_B
)
)
{
Telemetry
.
startUISession
(
TelemetryContract
.
Session
.
EXPERIMENT
ONBOARDING_B
)
;
}
else
if
(
isInExperimentLocal
(
context
ONBOARDING_C
)
)
{
Telemetry
.
startUISession
(
TelemetryContract
.
Session
.
EXPERIMENT
ONBOARDING_C
)
;
}
else
{
Log
.
d
(
LOGTAG
"
Not
in
an
experiment
!
"
)
;
panels
.
add
(
new
FirstrunPanelConfig
(
WelcomePanel
.
class
.
getName
(
)
WelcomePanel
.
TITLE_RES
)
)
;
}
return
panels
;
}
private
static
boolean
isInExperimentLocal
(
Context
context
String
name
)
{
if
(
AppConstants
.
MOZ_SWITCHBOARD
)
{
if
(
SwitchBoard
.
isInBucket
(
context
0
33
)
)
{
return
ONBOARDING_A
.
equals
(
name
)
;
}
else
if
(
SwitchBoard
.
isInBucket
(
context
33
66
)
)
{
return
ONBOARDING_B
.
equals
(
name
)
;
}
else
if
(
SwitchBoard
.
isInBucket
(
context
66
100
)
)
{
return
ONBOARDING_C
.
equals
(
name
)
;
}
}
return
false
;
}
public
static
List
<
FirstrunPanelConfig
>
getRestricted
(
)
{
final
List
<
FirstrunPanelConfig
>
panels
=
new
LinkedList
<
>
(
)
;
panels
.
add
(
new
FirstrunPanelConfig
(
RestrictedWelcomePanel
.
class
.
getName
(
)
RestrictedWelcomePanel
.
TITLE_RES
)
)
;
return
panels
;
}
public
static
class
FirstrunPanelConfig
{
private
String
classname
;
private
int
titleRes
;
public
FirstrunPanelConfig
(
String
resource
int
titleRes
)
{
this
.
classname
=
resource
;
this
.
titleRes
=
titleRes
;
}
public
String
getClassname
(
)
{
return
this
.
classname
;
}
public
int
getTitleRes
(
)
{
return
this
.
titleRes
;
}
}
}
