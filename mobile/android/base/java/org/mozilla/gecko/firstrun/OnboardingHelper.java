package
org
.
mozilla
.
gecko
.
firstrun
;
import
android
.
content
.
Intent
;
import
android
.
content
.
SharedPreferences
;
import
android
.
support
.
annotation
.
MainThread
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
support
.
v7
.
app
.
AppCompatActivity
;
import
android
.
util
.
Log
;
import
android
.
view
.
ViewStub
;
import
org
.
mozilla
.
gecko
.
GeckoSharedPrefs
;
import
org
.
mozilla
.
gecko
.
GeckoThread
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
import
org
.
mozilla
.
gecko
.
annotation
.
RobocopTarget
;
import
org
.
mozilla
.
gecko
.
distribution
.
Distribution
;
import
org
.
mozilla
.
gecko
.
mma
.
MmaDelegate
;
import
org
.
mozilla
.
gecko
.
mozglue
.
SafeIntent
;
import
org
.
mozilla
.
gecko
.
switchboard
.
SwitchBoard
;
import
org
.
mozilla
.
gecko
.
util
.
NetworkUtils
;
import
org
.
mozilla
.
gecko
.
util
.
StrictModeContext
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
java
.
lang
.
ref
.
WeakReference
;
import
java
.
util
.
UUID
;
public
class
OnboardingHelper
implements
MmaDelegate
.
MmaVariablesChangedListener
SwitchBoard
.
ConfigStatusListener
{
private
static
final
String
LOGTAG
=
"
OnboardingHelper
"
;
private
static
final
boolean
DEBUG
=
false
;
RobocopTarget
public
static
final
String
EXTRA_SKIP_STARTPANE
=
"
skipstartpane
"
;
private
static
final
String
FIRSTRUN_UUID
=
"
firstrun_uuid
"
;
public
static
final
int
DELAY_SHOW_DEFAULT_ONBOARDING
=
3
*
1000
;
private
WeakReference
<
AppCompatActivity
>
activityRef
;
private
OnboardingListener
listener
;
private
SafeIntent
activityStartingIntent
;
private
FirstrunAnimationContainer
firstrunAnimationContainer
;
private
Runnable
showOnboarding
;
private
boolean
onboardingIsPreparing
;
private
boolean
abortOnboarding
;
private
long
startTimeForCheckingOnlineVariables
;
public
OnboardingHelper
(
NonNull
final
AppCompatActivity
activity
NonNull
final
SafeIntent
activityStartingIntent
)
throws
IllegalArgumentException
{
if
(
!
(
activity
instanceof
OnboardingListener
)
)
{
final
String
activityClass
=
activity
.
getClass
(
)
.
getSimpleName
(
)
;
final
String
listenerInterface
=
OnboardingListener
.
class
.
getSimpleName
(
)
;
throw
new
IllegalArgumentException
(
String
.
format
(
"
%
s
does
not
implement
%
s
"
activityClass
listenerInterface
)
)
;
}
this
.
activityRef
=
new
WeakReference
<
>
(
activity
)
;
this
.
listener
=
(
OnboardingListener
)
activity
;
this
.
activityStartingIntent
=
activityStartingIntent
;
}
SuppressWarnings
(
"
try
"
)
public
void
checkFirstRun
(
)
{
if
(
GeckoThread
.
getActiveProfile
(
)
.
inGuestMode
(
)
)
{
return
;
}
if
(
activityStartingIntent
.
getBooleanExtra
(
EXTRA_SKIP_STARTPANE
false
)
)
{
return
;
}
try
(
StrictModeContext
unused
=
StrictModeContext
.
allowDiskReads
(
)
)
{
AppCompatActivity
activity
=
activityRef
.
get
(
)
;
if
(
activity
=
=
null
)
{
return
;
}
final
SharedPreferences
prefs
=
GeckoSharedPrefs
.
forProfile
(
activity
)
;
if
(
prefs
.
getBoolean
(
FirstrunAnimationContainer
.
PREF_FIRSTRUN_ENABLED_OLD
true
)
&
&
prefs
.
getBoolean
(
FirstrunAnimationContainer
.
PREF_FIRSTRUN_ENABLED
true
)
)
{
onboardingIsPreparing
=
true
;
listener
.
onOnboardingProcessStarted
(
)
;
activity
=
null
;
if
(
!
Intent
.
ACTION_VIEW
.
equals
(
activityStartingIntent
.
getAction
(
)
)
)
{
final
Distribution
distribution
=
Distribution
.
getInstance
(
activityRef
.
get
(
)
)
;
if
(
!
distribution
.
shouldWaitForSystemDistribution
(
)
)
{
checkFirstrunInternal
(
)
;
}
else
{
distribution
.
addOnDistributionReadyCallback
(
new
Distribution
.
ReadyCallback
(
)
{
Override
public
void
distributionNotFound
(
)
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
checkFirstrunInternal
(
)
;
}
}
)
;
}
Override
public
void
distributionFound
(
final
Distribution
distribution
)
{
if
(
prefs
.
getBoolean
(
FirstrunAnimationContainer
.
PREF_FIRSTRUN_ENABLED
true
)
)
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
checkFirstrunInternal
(
)
;
}
}
)
;
}
}
Override
public
void
distributionArrivedLate
(
final
Distribution
distribution
)
{
}
}
)
;
}
}
saveOnboardingShownStatus
(
)
;
Telemetry
.
startUISession
(
TelemetryContract
.
Session
.
FIRSTRUN
)
;
}
}
}
public
boolean
hideOnboarding
(
)
{
abortOnboarding
=
true
;
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
hideOnboarding
"
)
;
}
if
(
isPreparing
(
)
)
{
onboardingIsPreparing
=
false
;
ThreadUtils
.
removeCallbacksFromUiThread
(
showOnboarding
)
;
return
true
;
}
if
(
isOnboardingVisible
(
)
)
{
onboardingIsPreparing
=
false
;
firstrunAnimationContainer
.
registerOnFinishListener
(
null
)
;
firstrunAnimationContainer
.
hide
(
)
;
return
true
;
}
return
false
;
}
private
boolean
isOnboardingVisible
(
)
{
return
firstrunAnimationContainer
!
=
null
&
&
firstrunAnimationContainer
.
isVisible
(
)
;
}
public
boolean
isPreparing
(
)
{
return
onboardingIsPreparing
;
}
UiThread
private
void
checkFirstrunInternal
(
)
{
final
AppCompatActivity
activity
=
activityRef
.
get
(
)
;
if
(
activity
=
=
null
)
{
return
;
}
if
(
abortOnboarding
)
{
return
;
}
if
(
NetworkUtils
.
isConnected
(
activity
)
)
{
showOnboarding
=
new
Runnable
(
)
{
Override
public
void
run
(
)
{
showFirstrunPager
(
true
)
;
}
}
;
if
(
DEBUG
)
{
startTimeForCheckingOnlineVariables
=
System
.
currentTimeMillis
(
)
;
}
ThreadUtils
.
postDelayedToUiThread
(
showOnboarding
DELAY_SHOW_DEFAULT_ONBOARDING
)
;
}
else
{
showFirstrunPager
(
true
)
;
}
}
private
void
showFirstrunPager
(
final
boolean
useLocalValues
)
{
final
AppCompatActivity
activity
=
activityRef
.
get
(
)
;
if
(
activity
=
=
null
)
{
return
;
}
onboardingIsPreparing
=
false
;
if
(
firstrunAnimationContainer
=
=
null
)
{
final
ViewStub
firstrunPagerStub
=
(
ViewStub
)
activity
.
findViewById
(
R
.
id
.
firstrun_pager_stub
)
;
firstrunAnimationContainer
=
(
FirstrunAnimationContainer
)
firstrunPagerStub
.
inflate
(
)
;
}
if
(
DEBUG
)
{
final
StringBuilder
logMessage
=
new
StringBuilder
(
"
Will
show
Onboarding
using
"
)
.
append
(
(
useLocalValues
?
"
local
"
:
"
server
"
)
)
.
append
(
"
values
"
)
;
Log
.
d
(
LOGTAG
logMessage
.
toString
(
)
)
;
}
firstrunAnimationContainer
.
load
(
activity
.
getApplicationContext
(
)
activity
.
getSupportFragmentManager
(
)
useLocalValues
)
;
firstrunAnimationContainer
.
registerOnFinishListener
(
new
FirstrunAnimationContainer
.
OnFinishListener
(
)
{
Override
public
void
onFinish
(
)
{
listener
.
onFinishedOnboarding
(
firstrunAnimationContainer
.
showBrowserHint
(
)
)
;
}
}
)
;
listener
.
onOnboardingScreensVisible
(
)
;
saveOnboardingShownStatus
(
)
;
}
private
void
saveOnboardingShownStatus
(
)
{
final
SharedPreferences
prefs
=
GeckoSharedPrefs
.
forProfile
(
activityRef
.
get
(
)
)
;
prefs
.
edit
(
)
.
putBoolean
(
FirstrunAnimationContainer
.
PREF_FIRSTRUN_ENABLED
false
)
.
putString
(
FIRSTRUN_UUID
UUID
.
randomUUID
(
)
.
toString
(
)
)
.
apply
(
)
;
}
private
void
tryShowOnboarding
(
final
boolean
shouldUseLocalValues
)
{
final
AppCompatActivity
activity
=
activityRef
.
get
(
)
;
if
(
activity
=
=
null
)
{
return
;
}
if
(
Intent
.
ACTION_VIEW
.
equals
(
activityStartingIntent
.
getAction
(
)
)
)
{
return
;
}
if
(
isPreparing
(
)
)
{
ThreadUtils
.
removeCallbacksFromUiThread
(
showOnboarding
)
;
showFirstrunPager
(
shouldUseLocalValues
)
;
}
}
Override
MainThread
public
void
onRemoteVariablesChanged
(
)
{
if
(
DEBUG
)
{
final
long
timeElapsed
=
System
.
currentTimeMillis
(
)
-
startTimeForCheckingOnlineVariables
;
Log
.
d
(
LOGTAG
String
.
format
(
"
Got
online
variables
after
:
%
d
millis
"
timeElapsed
)
)
;
}
tryShowOnboarding
(
false
)
;
}
Override
MainThread
public
void
onRemoteVariablesUnavailable
(
)
{
tryShowOnboarding
(
true
)
;
}
Override
MainThread
public
void
onExperimentsConfigLoaded
(
)
{
final
AppCompatActivity
activity
=
activityRef
.
get
(
)
;
if
(
activity
=
=
null
)
{
return
;
}
if
(
!
MmaDelegate
.
isMmaExperimentEnabled
(
activity
)
)
{
tryShowOnboarding
(
true
)
;
}
}
Override
MainThread
public
void
onExperimentsConfigLoadFailed
(
)
{
tryShowOnboarding
(
true
)
;
}
public
interface
OnboardingListener
{
void
onOnboardingProcessStarted
(
)
;
void
onOnboardingScreensVisible
(
)
;
void
onFinishedOnboarding
(
final
boolean
showBrowserHint
)
;
}
}
