package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
content
.
Context
;
import
android
.
content
.
ContextWrapper
;
import
android
.
text
.
Editable
;
import
android
.
text
.
TextUtils
;
import
android
.
text
.
TextWatcher
;
import
android
.
util
.
AttributeSet
;
import
android
.
util
.
Log
;
import
android
.
view
.
KeyEvent
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
View
;
import
android
.
view
.
inputmethod
.
InputMethodManager
;
import
android
.
widget
.
LinearLayout
;
import
android
.
widget
.
TextView
;
public
class
FindInPageBar
extends
LinearLayout
implements
TextWatcher
View
.
OnClickListener
BundleEventListener
{
private
static
final
String
LOGTAG
=
"
GeckoFindInPageBar
"
;
private
static
final
String
REQUEST_ID
=
"
FindInPageBar
"
;
private
final
Context
mContext
;
CustomEditText
mFindText
;
private
TextView
mStatusText
;
private
boolean
mInflated
;
private
GeckoApp
geckoApp
;
public
FindInPageBar
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
mContext
=
context
;
setFocusable
(
true
)
;
while
(
context
instanceof
ContextWrapper
)
{
if
(
context
instanceof
GeckoApp
)
{
geckoApp
=
(
GeckoApp
)
context
;
}
context
=
(
(
ContextWrapper
)
context
)
.
getBaseContext
(
)
;
}
}
public
void
inflateContent
(
)
{
LayoutInflater
inflater
=
LayoutInflater
.
from
(
mContext
)
;
View
content
=
inflater
.
inflate
(
R
.
layout
.
find_in_page_content
this
)
;
content
.
findViewById
(
R
.
id
.
find_prev
)
.
setOnClickListener
(
this
)
;
content
.
findViewById
(
R
.
id
.
find_next
)
.
setOnClickListener
(
this
)
;
content
.
findViewById
(
R
.
id
.
find_close
)
.
setOnClickListener
(
this
)
;
content
.
setOnClickListener
(
this
)
;
mFindText
=
(
CustomEditText
)
content
.
findViewById
(
R
.
id
.
find_text
)
;
mFindText
.
addTextChangedListener
(
this
)
;
mFindText
.
setOnKeyPreImeListener
(
new
CustomEditText
.
OnKeyPreImeListener
(
)
{
Override
public
boolean
onKeyPreIme
(
View
v
int
keyCode
KeyEvent
event
)
{
if
(
keyCode
=
=
KeyEvent
.
KEYCODE_BACK
)
{
hide
(
)
;
return
true
;
}
return
false
;
}
}
)
;
mStatusText
=
(
TextView
)
content
.
findViewById
(
R
.
id
.
find_status
)
;
mInflated
=
true
;
EventDispatcher
.
getInstance
(
)
.
registerUiThreadListener
(
this
"
FindInPage
:
MatchesCountResult
"
)
;
}
public
void
show
(
)
{
if
(
!
mInflated
)
inflateContent
(
)
;
setVisibility
(
VISIBLE
)
;
mFindText
.
requestFocus
(
)
;
geckoApp
.
getAppEventDispatcher
(
)
.
dispatch
(
"
TextSelection
:
Get
"
null
new
EventCallback
(
)
{
Override
public
void
sendSuccess
(
final
Object
result
)
{
onTextSelectionData
(
(
String
)
result
)
;
}
Override
public
void
sendError
(
final
Object
error
)
{
Log
.
e
(
LOGTAG
"
TextSelection
:
Get
failed
:
"
+
error
)
;
}
}
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
FindInPage
:
Opened
"
null
)
;
}
public
void
hide
(
)
{
if
(
!
mInflated
|
|
getVisibility
(
)
=
=
View
.
GONE
)
{
return
;
}
mFindText
.
setText
(
"
"
)
;
if
(
mFindText
.
isFocused
(
)
)
{
getInputMethodManager
(
mFindText
)
.
hideSoftInputFromWindow
(
mFindText
.
getWindowToken
(
)
0
)
;
}
setVisibility
(
GONE
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
FindInPage
:
Closed
"
null
)
;
}
private
InputMethodManager
getInputMethodManager
(
View
view
)
{
Context
context
=
view
.
getContext
(
)
;
return
(
InputMethodManager
)
context
.
getSystemService
(
Context
.
INPUT_METHOD_SERVICE
)
;
}
public
void
onDestroy
(
)
{
if
(
!
mInflated
)
{
return
;
}
EventDispatcher
.
getInstance
(
)
.
unregisterUiThreadListener
(
this
"
FindInPage
:
MatchesCountResult
"
)
;
}
private
void
onMatchesCountResult
(
final
int
total
final
int
current
final
int
limit
final
String
searchString
)
{
if
(
total
=
=
-
1
)
{
updateResult
(
Integer
.
toString
(
limit
)
+
"
+
"
)
;
}
else
if
(
total
>
0
)
{
updateResult
(
Integer
.
toString
(
current
)
+
"
/
"
+
Integer
.
toString
(
total
)
)
;
}
else
if
(
TextUtils
.
isEmpty
(
searchString
)
)
{
updateResult
(
"
"
)
;
}
else
{
updateResult
(
"
0
/
0
"
)
;
}
}
private
void
updateResult
(
final
String
statusText
)
{
mStatusText
.
setVisibility
(
statusText
.
isEmpty
(
)
?
View
.
GONE
:
View
.
VISIBLE
)
;
mStatusText
.
setText
(
statusText
)
;
}
Override
public
void
afterTextChanged
(
Editable
s
)
{
sendRequestToFinderHelper
(
"
FindInPage
:
Find
"
s
.
toString
(
)
)
;
}
Override
public
void
beforeTextChanged
(
CharSequence
s
int
start
int
count
int
after
)
{
}
Override
public
void
onTextChanged
(
CharSequence
s
int
start
int
before
int
count
)
{
}
Override
public
void
onClick
(
View
v
)
{
final
int
viewId
=
v
.
getId
(
)
;
String
extras
=
getResources
(
)
.
getResourceEntryName
(
viewId
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
ACTION
TelemetryContract
.
Method
.
BUTTON
extras
)
;
if
(
viewId
=
=
R
.
id
.
find_prev
)
{
sendRequestToFinderHelper
(
"
FindInPage
:
Prev
"
mFindText
.
getText
(
)
.
toString
(
)
)
;
getInputMethodManager
(
mFindText
)
.
hideSoftInputFromWindow
(
mFindText
.
getWindowToken
(
)
0
)
;
return
;
}
if
(
viewId
=
=
R
.
id
.
find_next
)
{
sendRequestToFinderHelper
(
"
FindInPage
:
Next
"
mFindText
.
getText
(
)
.
toString
(
)
)
;
getInputMethodManager
(
mFindText
)
.
hideSoftInputFromWindow
(
mFindText
.
getWindowToken
(
)
0
)
;
return
;
}
if
(
viewId
=
=
R
.
id
.
find_close
)
{
hide
(
)
;
}
}
Override
public
void
handleMessage
(
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
"
FindInPage
:
MatchesCountResult
"
.
equals
(
event
)
)
{
onMatchesCountResult
(
message
.
getInt
(
"
total
"
0
)
message
.
getInt
(
"
current
"
0
)
message
.
getInt
(
"
limit
"
0
)
message
.
getString
(
"
searchString
"
"
"
)
)
;
return
;
}
}
void
onTextSelectionData
(
final
String
text
)
{
if
(
!
TextUtils
.
isEmpty
(
text
)
)
{
mFindText
.
setText
(
text
)
;
return
;
}
if
(
mFindText
.
hasWindowFocus
(
)
)
{
getInputMethodManager
(
mFindText
)
.
showSoftInput
(
mFindText
0
)
;
}
else
{
mFindText
.
setOnWindowFocusChangeListener
(
new
CustomEditText
.
OnWindowFocusChangeListener
(
)
{
Override
public
void
onWindowFocusChanged
(
boolean
hasFocus
)
{
if
(
!
hasFocus
)
return
;
mFindText
.
setOnWindowFocusChangeListener
(
null
)
;
getInputMethodManager
(
mFindText
)
.
showSoftInput
(
mFindText
0
)
;
}
}
)
;
}
}
private
void
sendRequestToFinderHelper
(
final
String
request
final
String
searchString
)
{
final
GeckoBundle
data
=
new
GeckoBundle
(
1
)
;
data
.
putString
(
"
searchString
"
searchString
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
request
data
)
;
}
}
