package
org
.
mozilla
.
gecko
.
delegates
;
import
android
.
app
.
Activity
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
CallSuper
;
import
android
.
support
.
design
.
widget
.
Snackbar
;
import
android
.
support
.
v4
.
content
.
ContextCompat
;
import
org
.
mozilla
.
gecko
.
AboutPages
;
import
org
.
mozilla
.
gecko
.
BrowserApp
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
SnackbarHelper
;
import
org
.
mozilla
.
gecko
.
Tab
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
import
java
.
lang
.
ref
.
WeakReference
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
WeakHashMap
;
public
class
OfflineTabStatusDelegate
extends
TabsTrayVisibilityAwareDelegate
implements
Tabs
.
OnTabsChangedListener
{
private
WeakReference
<
Activity
>
activityReference
;
private
WeakHashMap
<
Tab
Void
>
tabsQueuedForOfflineSnackbar
=
new
WeakHashMap
<
>
(
)
;
CallSuper
Override
public
void
onCreate
(
BrowserApp
browserApp
Bundle
savedInstanceState
)
{
super
.
onCreate
(
browserApp
savedInstanceState
)
;
activityReference
=
new
WeakReference
<
Activity
>
(
browserApp
)
;
}
Override
public
void
onResume
(
BrowserApp
browserApp
)
{
Tabs
.
registerOnTabsChangedListener
(
this
)
;
}
Override
public
void
onPause
(
BrowserApp
browserApp
)
{
Tabs
.
unregisterOnTabsChangedListener
(
this
)
;
}
public
void
onTabChanged
(
final
Tab
tab
Tabs
.
TabEvents
event
String
data
)
{
if
(
tab
=
=
null
)
{
return
;
}
if
(
!
tab
.
hasLoadedFromCache
(
)
)
{
return
;
}
if
(
AboutPages
.
isAboutPage
(
tab
.
getURL
(
)
)
)
{
return
;
}
switch
(
event
)
{
case
PAGE_SHOW
:
if
(
!
isTabsTrayVisible
(
)
&
&
Tabs
.
getInstance
(
)
.
isSelectedTab
(
tab
)
)
{
showLoadedOfflineSnackbar
(
activityReference
.
get
(
)
)
;
}
else
{
tabsQueuedForOfflineSnackbar
.
put
(
tab
null
)
;
}
break
;
case
SELECTED
:
if
(
isTabsTrayVisible
(
)
)
{
break
;
}
if
(
tabsQueuedForOfflineSnackbar
.
containsKey
(
tab
)
)
{
showLoadedOfflineSnackbar
(
activityReference
.
get
(
)
)
;
tabsQueuedForOfflineSnackbar
.
remove
(
tab
)
;
}
break
;
}
}
private
static
void
showLoadedOfflineSnackbar
(
final
Activity
activity
)
{
if
(
activity
=
=
null
)
{
return
;
}
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
NETERROR
TelemetryContract
.
Method
.
TOAST
"
usecache
"
)
;
SnackbarHelper
.
showSnackbarWithActionAndColors
(
activity
activity
.
getResources
(
)
.
getString
(
R
.
string
.
tab_offline_version
)
Snackbar
.
LENGTH_INDEFINITE
null
null
null
ContextCompat
.
getColor
(
activity
R
.
color
.
link_blue
)
null
)
;
}
}
