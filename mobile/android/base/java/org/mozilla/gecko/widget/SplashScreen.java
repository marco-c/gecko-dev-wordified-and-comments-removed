package
org
.
mozilla
.
gecko
.
widget
;
import
android
.
animation
.
Animator
;
import
android
.
animation
.
AnimatorListenerAdapter
;
import
android
.
content
.
Context
;
import
android
.
util
.
AttributeSet
;
import
android
.
widget
.
RelativeLayout
;
public
class
SplashScreen
extends
RelativeLayout
{
private
static
final
long
MIN_DISPLAY_TIME
=
0
;
private
static
final
long
MAX_DISPLAY_TIME
=
2000
;
private
boolean
hasReachedThreshold
=
false
;
private
boolean
shouldHideAsap
=
false
;
public
SplashScreen
(
Context
context
)
{
super
(
context
)
;
}
public
SplashScreen
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
}
public
SplashScreen
(
Context
context
AttributeSet
attrs
int
defStyleAttr
)
{
super
(
context
attrs
defStyleAttr
)
;
}
public
void
hide
(
)
{
if
(
getVisibility
(
)
=
=
GONE
)
{
return
;
}
if
(
hasReachedThreshold
)
{
vanish
(
)
;
}
else
{
shouldHideAsap
=
true
;
}
}
Override
protected
void
onAttachedToWindow
(
)
{
super
.
onAttachedToWindow
(
)
;
atLeast
(
MIN_DISPLAY_TIME
)
;
}
private
void
atLeast
(
long
millis
)
{
postDelayed
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
if
(
shouldHideAsap
)
{
vanish
(
)
;
}
else
{
hasReachedThreshold
=
true
;
atMost
(
MAX_DISPLAY_TIME
-
MIN_DISPLAY_TIME
)
;
}
}
}
millis
)
;
}
private
void
atMost
(
long
millis
)
{
postDelayed
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
vanish
(
)
;
}
}
millis
)
;
}
private
void
vanish
(
)
{
if
(
getVisibility
(
)
=
=
GONE
|
|
getAlpha
(
)
<
1
)
{
return
;
}
SplashScreen
.
this
.
animate
(
)
.
alpha
(
0
.
0f
)
.
setListener
(
new
AnimatorListenerAdapter
(
)
{
Override
public
void
onAnimationEnd
(
Animator
animation
)
{
super
.
onAnimationEnd
(
animation
)
;
SplashScreen
.
this
.
setVisibility
(
GONE
)
;
}
}
)
;
}
}
