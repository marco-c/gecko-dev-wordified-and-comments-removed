package
org
.
mozilla
.
gecko
.
widget
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
Matrix
;
import
android
.
graphics
.
drawable
.
Drawable
;
import
android
.
util
.
AttributeSet
;
import
android
.
widget
.
ImageView
;
import
org
.
mozilla
.
gecko
.
widget
.
themed
.
ThemedImageView
;
public
abstract
class
CropImageView
extends
ThemedImageView
{
public
static
final
String
LOGTAG
=
"
Gecko
"
+
CropImageView
.
class
.
getSimpleName
(
)
;
private
int
viewWidth
;
private
int
viewHeight
;
private
int
drawableWidth
;
private
int
drawableHeight
;
private
boolean
resize
=
true
;
private
Matrix
layoutCurrentMatrix
=
new
Matrix
(
)
;
private
Matrix
layoutNextMatrix
=
new
Matrix
(
)
;
public
CropImageView
(
final
Context
context
)
{
this
(
context
null
)
;
}
public
CropImageView
(
final
Context
context
final
AttributeSet
attrs
)
{
this
(
context
attrs
0
)
;
}
public
CropImageView
(
final
Context
context
final
AttributeSet
attrs
final
int
defStyleAttr
)
{
super
(
context
attrs
defStyleAttr
)
;
init
(
)
;
}
protected
abstract
float
getAspectRatio
(
)
;
protected
void
init
(
)
{
setPivotX
(
1
)
;
setPivotY
(
1
)
;
}
Override
protected
void
onMeasure
(
final
int
widthMeasureSpec
final
int
heightMeasureSpec
)
{
super
.
onMeasure
(
widthMeasureSpec
heightMeasureSpec
)
;
viewWidth
=
getMeasuredWidth
(
)
;
viewHeight
=
(
int
)
(
viewWidth
*
getAspectRatio
(
)
)
;
setMeasuredDimension
(
viewWidth
viewHeight
)
;
updateImageMatrix
(
)
;
}
protected
void
updateImageMatrix
(
)
{
if
(
!
resize
|
|
getDrawable
(
)
=
=
null
)
{
return
;
}
setScaleType
(
ImageView
.
ScaleType
.
MATRIX
)
;
getDrawable
(
)
.
setBounds
(
0
0
viewWidth
viewHeight
)
;
final
float
horizontalScaleValue
=
(
float
)
viewWidth
/
(
float
)
drawableWidth
;
final
float
verticalScaleValue
=
(
float
)
viewHeight
/
(
float
)
drawableHeight
;
final
float
scale
=
Math
.
max
(
verticalScaleValue
horizontalScaleValue
)
;
layoutNextMatrix
.
reset
(
)
;
layoutNextMatrix
.
setScale
(
scale
scale
)
;
setImageMatrix
(
layoutNextMatrix
)
;
final
Matrix
swapReferenceMatrix
=
layoutCurrentMatrix
;
layoutCurrentMatrix
=
layoutNextMatrix
;
layoutNextMatrix
=
swapReferenceMatrix
;
}
public
void
setImageBitmap
(
final
Bitmap
bm
final
boolean
resize
)
{
super
.
setImageBitmap
(
bm
)
;
this
.
resize
=
resize
;
updateImageMatrix
(
)
;
}
Override
public
void
setImageResource
(
final
int
resId
)
{
super
.
setImageResource
(
resId
)
;
setImageMatrix
(
null
)
;
resize
=
false
;
}
Override
public
void
setImageDrawable
(
final
Drawable
drawable
)
{
this
.
setImageDrawable
(
drawable
false
)
;
}
public
void
setImageDrawable
(
final
Drawable
drawable
final
boolean
resize
)
{
super
.
setImageDrawable
(
drawable
)
;
if
(
drawable
!
=
null
)
{
setImageMatrix
(
null
)
;
drawableWidth
=
drawable
.
getIntrinsicWidth
(
)
;
drawableHeight
=
drawable
.
getIntrinsicHeight
(
)
;
}
else
{
drawableWidth
=
-
1
;
drawableHeight
=
-
1
;
}
this
.
resize
=
resize
;
updateImageMatrix
(
)
;
}
}
