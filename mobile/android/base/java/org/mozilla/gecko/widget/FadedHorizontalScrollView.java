package
org
.
mozilla
.
gecko
.
widget
;
import
android
.
annotation
.
TargetApi
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
TypedArray
;
import
android
.
graphics
.
Canvas
;
import
android
.
graphics
.
LinearGradient
;
import
android
.
graphics
.
Matrix
;
import
android
.
graphics
.
Paint
;
import
android
.
graphics
.
PorterDuff
;
import
android
.
graphics
.
PorterDuffXfermode
;
import
android
.
graphics
.
Shader
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
import
android
.
widget
.
HorizontalScrollView
;
import
org
.
mozilla
.
gecko
.
AppConstants
.
Versions
;
import
org
.
mozilla
.
gecko
.
R
;
public
class
FadedHorizontalScrollView
extends
HorizontalScrollView
{
private
final
int
mFadeWidth
;
private
final
boolean
mPreMarshmallow
;
private
final
FadePaint
mFadePaint
;
private
float
mFadeTop
;
private
float
mFadeBottom
;
private
boolean
mVerticalFadeBordersDirty
;
public
FadedHorizontalScrollView
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
mPreMarshmallow
=
Versions
.
preMarshmallow
;
mFadePaint
=
new
FadePaint
(
)
;
mVerticalFadeBordersDirty
=
true
;
addOnLayoutChangeListener
(
new
OnLayoutChangeListener
(
)
{
Override
public
void
onLayoutChange
(
View
v
int
left
int
top
int
right
int
bottom
int
oldLeft
int
oldTop
int
oldRight
int
oldBottom
)
{
final
int
oldHeight
=
oldBottom
-
oldTop
;
if
(
getHeight
(
)
!
=
oldHeight
)
{
mVerticalFadeBordersDirty
=
true
;
}
}
}
)
;
final
TypedArray
a
=
context
.
obtainStyledAttributes
(
attrs
R
.
styleable
.
FadedTextView
)
;
mFadeWidth
=
a
.
getDimensionPixelSize
(
R
.
styleable
.
FadedTextView_fadeWidth
0
)
;
a
.
recycle
(
)
;
}
Override
public
int
getHorizontalFadingEdgeLength
(
)
{
return
mFadeWidth
;
}
Override
public
void
draw
(
Canvas
canvas
)
{
super
.
draw
(
canvas
)
;
if
(
mPreMarshmallow
)
{
drawFading
(
canvas
)
;
}
}
TargetApi
(
23
)
Override
public
void
onDrawForeground
(
Canvas
canvas
)
{
drawFading
(
canvas
)
;
super
.
onDrawForeground
(
canvas
)
;
}
private
void
drawFading
(
final
Canvas
canvas
)
{
final
int
left
=
getScrollX
(
)
+
getPaddingLeft
(
)
;
final
int
right
=
getScrollX
(
)
+
getRight
(
)
-
getLeft
(
)
-
getPaddingRight
(
)
;
int
fadeWidth
=
getHorizontalFadingEdgeLength
(
)
;
if
(
left
+
fadeWidth
>
right
-
fadeWidth
)
{
fadeWidth
=
(
right
-
left
)
/
2
;
}
final
float
effectiveFadeLeft
=
fadeWidth
*
getLeftFadingEdgeStrength
(
)
;
final
float
effectiveFadeRight
=
fadeWidth
*
getRightFadingEdgeStrength
(
)
;
final
boolean
drawLeft
=
effectiveFadeLeft
>
1
.
0f
;
final
boolean
drawRight
=
effectiveFadeRight
>
1
.
0f
;
if
(
!
drawLeft
&
&
!
drawRight
)
{
return
;
}
if
(
mVerticalFadeBordersDirty
)
{
updateVerticalFadeBorders
(
)
;
}
final
Matrix
matrix
=
mFadePaint
.
matrix
;
final
Shader
fade
=
mFadePaint
.
fade
;
if
(
drawLeft
)
{
matrix
.
setScale
(
1
effectiveFadeLeft
)
;
matrix
.
postRotate
(
-
90
)
;
matrix
.
postTranslate
(
left
mFadeTop
)
;
fade
.
setLocalMatrix
(
matrix
)
;
mFadePaint
.
setShader
(
fade
)
;
canvas
.
drawRect
(
left
mFadeTop
left
+
effectiveFadeLeft
mFadeBottom
mFadePaint
)
;
}
if
(
drawRight
)
{
matrix
.
setScale
(
1
effectiveFadeRight
)
;
matrix
.
postRotate
(
90
)
;
matrix
.
postTranslate
(
right
mFadeTop
)
;
fade
.
setLocalMatrix
(
matrix
)
;
mFadePaint
.
setShader
(
fade
)
;
canvas
.
drawRect
(
right
-
effectiveFadeRight
mFadeTop
right
mFadeBottom
mFadePaint
)
;
}
}
private
void
updateVerticalFadeBorders
(
)
{
final
View
child
=
getChildAt
(
0
)
;
if
(
child
!
=
null
)
{
mFadeTop
=
child
.
getTop
(
)
+
child
.
getPaddingTop
(
)
;
mFadeBottom
=
child
.
getBottom
(
)
-
child
.
getPaddingBottom
(
)
;
}
else
{
mFadeTop
=
0
;
mFadeBottom
=
0
;
}
mVerticalFadeBordersDirty
=
false
;
}
private
class
FadePaint
extends
Paint
{
public
final
Matrix
matrix
;
public
final
Shader
fade
;
public
FadePaint
(
)
{
matrix
=
new
Matrix
(
)
;
fade
=
new
LinearGradient
(
0
0
0
1
0xFF000000
0
Shader
.
TileMode
.
CLAMP
)
;
setShader
(
fade
)
;
setXfermode
(
new
PorterDuffXfermode
(
PorterDuff
.
Mode
.
DST_OUT
)
)
;
}
}
}
