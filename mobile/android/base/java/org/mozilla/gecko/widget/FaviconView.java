package
org
.
mozilla
.
gecko
.
widget
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
icons
.
IconCallback
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
Resources
;
import
android
.
content
.
res
.
TypedArray
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
Canvas
;
import
android
.
graphics
.
Paint
;
import
android
.
graphics
.
RectF
;
import
android
.
support
.
v4
.
graphics
.
drawable
.
RoundedBitmapDrawable
;
import
android
.
support
.
v4
.
graphics
.
drawable
.
RoundedBitmapDrawableFactory
;
import
android
.
util
.
AttributeSet
;
import
android
.
util
.
DisplayMetrics
;
import
android
.
util
.
TypedValue
;
import
android
.
widget
.
ImageView
;
import
java
.
lang
.
ref
.
WeakReference
;
public
class
FaviconView
extends
ImageView
{
private
static
final
int
DEFAULT_CORNER_RADIUS_DP
=
2
;
private
Bitmap
mIconBitmap
;
private
Bitmap
mUnscaledBitmap
;
private
boolean
mScalingExpected
;
private
int
mDominantColor
;
private
static
final
Paint
sBackgroundPaint
;
private
final
RectF
mBackgroundRect
;
private
final
float
mBackgroundCornerRadius
;
private
final
boolean
isDominantBorderEnabled
;
private
final
boolean
isOverrideScaleTypeEnabled
;
private
final
boolean
areRoundCornersEnabled
;
private
final
Resources
mResources
;
static
{
sBackgroundPaint
=
new
Paint
(
Paint
.
ANTI_ALIAS_FLAG
)
;
sBackgroundPaint
.
setStyle
(
Paint
.
Style
.
FILL
)
;
}
public
FaviconView
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
TypedArray
a
=
context
.
getTheme
(
)
.
obtainStyledAttributes
(
attrs
R
.
styleable
.
FaviconView
0
0
)
;
try
{
isDominantBorderEnabled
=
a
.
getBoolean
(
R
.
styleable
.
FaviconView_dominantBorderEnabled
true
)
;
isOverrideScaleTypeEnabled
=
a
.
getBoolean
(
R
.
styleable
.
FaviconView_overrideScaleType
true
)
;
areRoundCornersEnabled
=
a
.
getBoolean
(
R
.
styleable
.
FaviconView_enableRoundCorners
true
)
;
final
DisplayMetrics
metrics
=
getResources
(
)
.
getDisplayMetrics
(
)
;
mBackgroundCornerRadius
=
a
.
getDimension
(
R
.
styleable
.
FaviconView_backgroundCornerRadius
TypedValue
.
applyDimension
(
TypedValue
.
COMPLEX_UNIT_DIP
DEFAULT_CORNER_RADIUS_DP
metrics
)
)
;
}
finally
{
a
.
recycle
(
)
;
}
if
(
isOverrideScaleTypeEnabled
)
{
setScaleType
(
ImageView
.
ScaleType
.
CENTER
)
;
}
mBackgroundRect
=
new
RectF
(
0
0
0
0
)
;
mResources
=
getResources
(
)
;
}
Override
protected
void
onSizeChanged
(
int
w
int
h
int
oldw
int
oldh
)
{
super
.
onSizeChanged
(
w
h
oldw
oldh
)
;
mBackgroundRect
.
right
=
w
;
mBackgroundRect
.
bottom
=
h
;
formatImage
(
)
;
}
Override
public
void
onDraw
(
Canvas
canvas
)
{
if
(
isDominantBorderEnabled
)
{
sBackgroundPaint
.
setColor
(
mDominantColor
)
;
if
(
areRoundCornersEnabled
)
{
canvas
.
drawRoundRect
(
mBackgroundRect
mBackgroundCornerRadius
mBackgroundCornerRadius
sBackgroundPaint
)
;
}
else
{
canvas
.
drawRect
(
mBackgroundRect
sBackgroundPaint
)
;
}
}
super
.
onDraw
(
canvas
)
;
}
private
void
formatImage
(
)
{
if
(
mIconBitmap
=
=
null
|
|
getWidth
(
)
=
=
0
|
|
getHeight
(
)
=
=
0
)
{
showNoImage
(
)
;
return
;
}
if
(
mScalingExpected
&
&
getWidth
(
)
!
=
mIconBitmap
.
getWidth
(
)
)
{
scaleBitmap
(
)
;
mScalingExpected
=
false
;
}
if
(
areRoundCornersEnabled
)
{
if
(
getWidth
(
)
<
mIconBitmap
.
getWidth
(
)
)
{
scaleBitmap
(
)
;
}
RoundedBitmapDrawable
roundedBitmapDrawable
=
RoundedBitmapDrawableFactory
.
create
(
mResources
mIconBitmap
)
;
roundedBitmapDrawable
.
setCornerRadius
(
mBackgroundCornerRadius
)
;
roundedBitmapDrawable
.
setAntiAlias
(
true
)
;
setImageDrawable
(
roundedBitmapDrawable
)
;
}
else
{
setImageBitmap
(
mIconBitmap
)
;
}
if
(
Math
.
abs
(
mIconBitmap
.
getWidth
(
)
-
getWidth
(
)
)
<
3
)
{
mDominantColor
=
0
;
}
}
private
void
scaleBitmap
(
)
{
int
doubledSize
=
mIconBitmap
.
getWidth
(
)
*
2
;
if
(
getWidth
(
)
>
doubledSize
)
{
mIconBitmap
=
Bitmap
.
createScaledBitmap
(
mIconBitmap
doubledSize
doubledSize
true
)
;
}
else
{
mIconBitmap
=
Bitmap
.
createScaledBitmap
(
mIconBitmap
getWidth
(
)
getWidth
(
)
true
)
;
}
}
private
void
updateImageInternal
(
IconResponse
response
boolean
allowScaling
)
{
if
(
mUnscaledBitmap
=
=
response
.
getBitmap
(
)
)
{
return
;
}
mUnscaledBitmap
=
response
.
getBitmap
(
)
;
mIconBitmap
=
response
.
getBitmap
(
)
;
mDominantColor
=
response
.
getColor
(
)
;
mScalingExpected
=
allowScaling
;
formatImage
(
)
;
}
private
void
showNoImage
(
)
{
setImageDrawable
(
null
)
;
mDominantColor
=
0
;
}
public
void
clearImage
(
)
{
showNoImage
(
)
;
mUnscaledBitmap
=
null
;
mIconBitmap
=
null
;
mDominantColor
=
0
;
mScalingExpected
=
false
;
}
public
void
updateAndScaleImage
(
IconResponse
response
)
{
updateImageInternal
(
response
true
)
;
}
public
void
updateImage
(
IconResponse
response
)
{
updateImageInternal
(
response
false
)
;
}
public
Bitmap
getBitmap
(
)
{
return
mIconBitmap
;
}
public
IconCallback
createIconCallback
(
)
{
return
new
Callback
(
this
)
;
}
private
static
class
Callback
implements
IconCallback
{
private
final
WeakReference
<
FaviconView
>
viewReference
;
private
Callback
(
FaviconView
view
)
{
this
.
viewReference
=
new
WeakReference
<
FaviconView
>
(
view
)
;
}
Override
public
void
onIconResponse
(
IconResponse
response
)
{
final
FaviconView
view
=
viewReference
.
get
(
)
;
if
(
view
=
=
null
)
{
return
;
}
view
.
updateImage
(
response
)
;
}
}
}
