package
org
.
mozilla
.
gecko
.
widget
;
import
android
.
graphics
.
Rect
;
import
android
.
view
.
MotionEvent
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewConfiguration
;
public
class
HoverDelegateWithReset
{
private
View
mDelegateView
;
private
Rect
mBounds
;
private
Rect
mSlopBounds
;
private
boolean
mDelegateTargeted
;
private
int
mSlop
;
public
HoverDelegateWithReset
(
Rect
bounds
View
delegateView
)
{
mBounds
=
bounds
;
mSlop
=
ViewConfiguration
.
get
(
delegateView
.
getContext
(
)
)
.
getScaledTouchSlop
(
)
;
mSlopBounds
=
new
Rect
(
bounds
)
;
mSlopBounds
.
inset
(
-
mSlop
-
mSlop
)
;
mDelegateView
=
delegateView
;
}
public
boolean
onHoverEvent
(
MotionEvent
event
)
{
int
x
=
(
int
)
event
.
getX
(
)
;
int
y
=
(
int
)
event
.
getY
(
)
;
boolean
sendToDelegate
=
false
;
boolean
hit
=
true
;
boolean
handled
=
false
;
switch
(
event
.
getAction
(
)
)
{
case
MotionEvent
.
ACTION_HOVER_ENTER
:
Rect
bounds
=
mBounds
;
if
(
bounds
.
contains
(
x
y
)
)
{
mDelegateTargeted
=
true
;
sendToDelegate
=
true
;
}
else
{
mDelegateTargeted
=
false
;
}
break
;
case
MotionEvent
.
ACTION_HOVER_EXIT
:
case
MotionEvent
.
ACTION_HOVER_MOVE
:
sendToDelegate
=
mDelegateTargeted
;
if
(
sendToDelegate
)
{
Rect
slopBounds
=
mSlopBounds
;
if
(
!
slopBounds
.
contains
(
x
y
)
)
{
hit
=
false
;
}
}
break
;
case
MotionEvent
.
ACTION_CANCEL
:
sendToDelegate
=
mDelegateTargeted
;
mDelegateTargeted
=
false
;
break
;
}
if
(
sendToDelegate
)
{
final
View
delegateView
=
mDelegateView
;
if
(
hit
)
{
event
.
setLocation
(
delegateView
.
getWidth
(
)
/
2
delegateView
.
getHeight
(
)
/
2
)
;
}
else
{
int
slop
=
mSlop
;
event
.
setLocation
(
-
(
slop
*
2
)
-
(
slop
*
2
)
)
;
}
handled
=
delegateView
.
dispatchGenericMotionEvent
(
event
)
;
}
return
handled
;
}
}
