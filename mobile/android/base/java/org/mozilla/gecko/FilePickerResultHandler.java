package
org
.
mozilla
.
gecko
;
import
java
.
io
.
File
;
import
java
.
io
.
FileOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
org
.
mozilla
.
gecko
.
util
.
ActivityResultHandler
;
import
org
.
mozilla
.
gecko
.
util
.
FileUtils
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
app
.
Activity
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
Environment
;
import
android
.
os
.
Process
;
import
android
.
provider
.
MediaStore
;
import
android
.
provider
.
OpenableColumns
;
import
android
.
support
.
v4
.
app
.
FragmentActivity
;
import
android
.
support
.
v4
.
app
.
LoaderManager
;
import
android
.
support
.
v4
.
app
.
LoaderManager
.
LoaderCallbacks
;
import
android
.
support
.
v4
.
content
.
CursorLoader
;
import
android
.
support
.
v4
.
content
.
Loader
;
import
android
.
text
.
TextUtils
;
import
android
.
text
.
format
.
Time
;
import
android
.
util
.
Log
;
class
FilePickerResultHandler
implements
ActivityResultHandler
{
private
static
final
String
LOGTAG
=
"
GeckoFilePickerResultHandler
"
;
private
static
final
String
UPLOADS_DIR
=
"
uploads
"
;
private
final
FilePicker
.
ResultHandler
handler
;
private
final
int
tabId
;
private
final
File
cacheDir
;
private
String
mImageName
=
"
"
;
public
FilePickerResultHandler
(
final
FilePicker
.
ResultHandler
handler
final
Context
context
final
int
tabId
)
{
this
.
tabId
=
tabId
;
this
.
cacheDir
=
new
File
(
context
.
getCacheDir
(
)
UPLOADS_DIR
)
;
this
.
handler
=
handler
;
}
void
sendResult
(
String
res
)
{
if
(
handler
!
=
null
)
{
handler
.
gotFile
(
res
)
;
}
}
Override
public
void
onActivityResult
(
int
resultCode
Intent
intent
)
{
if
(
resultCode
!
=
Activity
.
RESULT_OK
)
{
sendResult
(
"
"
)
;
return
;
}
if
(
intent
=
=
null
|
|
(
intent
.
getAction
(
)
=
=
null
&
&
intent
.
getData
(
)
=
=
null
)
)
{
if
(
mImageName
!
=
null
)
{
File
file
=
new
File
(
Environment
.
getExternalStorageDirectory
(
)
mImageName
)
;
sendResult
(
file
.
getAbsolutePath
(
)
)
;
}
else
{
sendResult
(
"
"
)
;
}
return
;
}
Uri
uri
=
intent
.
getData
(
)
;
if
(
uri
=
=
null
)
{
sendResult
(
"
"
)
;
return
;
}
if
(
"
file
"
.
equals
(
uri
.
getScheme
(
)
)
)
{
String
path
=
uri
.
getPath
(
)
;
sendResult
(
path
=
=
null
?
"
"
:
path
)
;
return
;
}
final
FragmentActivity
fa
=
(
FragmentActivity
)
GeckoAppShell
.
getGeckoInterface
(
)
.
getActivity
(
)
;
final
LoaderManager
lm
=
fa
.
getSupportLoaderManager
(
)
;
final
ContentResolver
cr
=
fa
.
getContentResolver
(
)
;
final
Cursor
cursor
=
cr
.
query
(
uri
new
String
[
]
{
MediaStore
.
Video
.
Media
.
DATA
}
null
null
null
)
;
if
(
cursor
!
=
null
)
{
try
{
int
index
=
cursor
.
getColumnIndex
(
MediaStore
.
Video
.
Media
.
DATA
)
;
if
(
index
>
=
0
)
{
lm
.
initLoader
(
intent
.
hashCode
(
)
null
new
VideoLoaderCallbacks
(
uri
)
)
;
return
;
}
}
catch
(
Exception
ex
)
{
}
finally
{
cursor
.
close
(
)
;
}
}
lm
.
initLoader
(
uri
.
hashCode
(
)
null
new
FileLoaderCallbacks
(
uri
cacheDir
tabId
)
)
;
}
public
String
generateImageName
(
)
{
Time
now
=
new
Time
(
)
;
now
.
setToNow
(
)
;
mImageName
=
now
.
format
(
"
%
Y
-
%
m
-
%
d
%
H
.
%
M
.
%
S
"
)
+
"
.
jpg
"
;
return
mImageName
;
}
private
class
VideoLoaderCallbacks
implements
LoaderCallbacks
<
Cursor
>
{
final
private
Uri
uri
;
public
VideoLoaderCallbacks
(
Uri
uri
)
{
this
.
uri
=
uri
;
}
Override
public
Loader
<
Cursor
>
onCreateLoader
(
int
id
Bundle
args
)
{
final
FragmentActivity
fa
=
(
FragmentActivity
)
GeckoAppShell
.
getGeckoInterface
(
)
.
getActivity
(
)
;
return
new
CursorLoader
(
fa
uri
new
String
[
]
{
MediaStore
.
Video
.
Media
.
DATA
}
null
null
null
)
;
}
Override
public
void
onLoadFinished
(
Loader
<
Cursor
>
loader
Cursor
cursor
)
{
if
(
cursor
.
moveToFirst
(
)
)
{
String
res
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
MediaStore
.
Video
.
Media
.
DATA
)
)
;
if
(
TextUtils
.
isEmpty
(
res
)
)
{
tryFileLoaderCallback
(
)
;
return
;
}
sendResult
(
res
)
;
}
else
{
tryFileLoaderCallback
(
)
;
}
}
private
void
tryFileLoaderCallback
(
)
{
final
FragmentActivity
fa
=
(
FragmentActivity
)
GeckoAppShell
.
getGeckoInterface
(
)
.
getActivity
(
)
;
final
LoaderManager
lm
=
fa
.
getSupportLoaderManager
(
)
;
lm
.
initLoader
(
uri
.
hashCode
(
)
null
new
FileLoaderCallbacks
(
uri
cacheDir
tabId
)
)
;
}
Override
public
void
onLoaderReset
(
Loader
<
Cursor
>
loader
)
{
}
}
private
class
FileLoaderCallbacks
implements
LoaderCallbacks
<
Cursor
>
Tabs
.
OnTabsChangedListener
{
private
final
Uri
uri
;
private
final
File
cacheDir
;
private
final
int
tabId
;
private
File
tempDir
;
public
FileLoaderCallbacks
(
Uri
uri
File
cacheDir
int
tabId
)
{
this
.
uri
=
uri
;
this
.
cacheDir
=
cacheDir
;
this
.
tabId
=
tabId
;
}
Override
public
Loader
<
Cursor
>
onCreateLoader
(
int
id
Bundle
args
)
{
final
FragmentActivity
fa
=
(
FragmentActivity
)
GeckoAppShell
.
getGeckoInterface
(
)
.
getActivity
(
)
;
return
new
CursorLoader
(
fa
uri
new
String
[
]
{
OpenableColumns
.
DISPLAY_NAME
}
null
null
null
)
;
}
Override
public
void
onLoadFinished
(
Loader
<
Cursor
>
loader
Cursor
cursor
)
{
if
(
cursor
.
moveToFirst
(
)
)
{
String
fileName
=
cursor
.
getString
(
0
)
;
final
FragmentActivity
fa
=
(
FragmentActivity
)
GeckoAppShell
.
getGeckoInterface
(
)
.
getActivity
(
)
;
final
ContentResolver
cr
=
fa
.
getContentResolver
(
)
;
if
(
fileName
=
=
null
|
|
fileName
.
lastIndexOf
(
'
.
'
)
=
=
-
1
)
{
String
mimeType
=
cr
.
getType
(
uri
)
;
String
fileExt
=
"
.
"
+
GeckoAppShell
.
getExtensionFromMimeType
(
mimeType
)
;
if
(
fileName
=
=
null
)
{
fileName
=
"
tmp_
"
+
Process
.
myPid
(
)
+
fileExt
;
}
else
{
fileName
+
=
fileExt
;
}
}
FileOutputStream
fos
=
null
;
try
{
tempDir
=
FileUtils
.
createTempDir
(
cacheDir
"
tmp_
"
)
;
File
file
=
new
File
(
tempDir
fileName
)
;
fos
=
new
FileOutputStream
(
file
)
;
InputStream
is
=
cr
.
openInputStream
(
uri
)
;
byte
[
]
buf
=
new
byte
[
4096
]
;
int
len
=
is
.
read
(
buf
)
;
while
(
len
!
=
-
1
)
{
fos
.
write
(
buf
0
len
)
;
len
=
is
.
read
(
buf
)
;
}
fos
.
close
(
)
;
is
.
close
(
)
;
String
tempFile
=
file
.
getAbsolutePath
(
)
;
sendResult
(
(
tempFile
=
=
null
)
?
"
"
:
tempFile
)
;
if
(
tabId
>
-
1
&
&
tempDir
!
=
null
)
{
Tabs
.
registerOnTabsChangedListener
(
this
)
;
}
}
catch
(
IOException
ex
)
{
Log
.
i
(
LOGTAG
"
Error
writing
file
"
ex
)
;
}
finally
{
if
(
fos
!
=
null
)
{
try
{
fos
.
close
(
)
;
}
catch
(
IOException
e
)
{
}
}
}
}
else
{
sendResult
(
"
"
)
;
}
}
Override
public
void
onLoaderReset
(
Loader
<
Cursor
>
loader
)
{
}
Override
public
void
onTabChanged
(
Tab
tab
Tabs
.
TabEvents
msg
String
data
)
{
if
(
(
tab
=
=
null
)
|
|
(
tab
.
getId
(
)
!
=
tabId
)
)
{
return
;
}
if
(
msg
=
=
Tabs
.
TabEvents
.
LOCATION_CHANGE
|
|
msg
=
=
Tabs
.
TabEvents
.
CLOSED
)
{
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
FileUtils
.
delete
(
tempDir
true
)
;
}
}
)
;
Tabs
.
unregisterOnTabsChangedListener
(
this
)
;
}
}
}
}
