package
org
.
mozilla
.
gecko
.
webapps
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
widget
.
ListView
;
import
org
.
mozilla
.
gecko
.
BrowserApp
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
prompts
.
Prompt
;
import
org
.
mozilla
.
gecko
.
prompts
.
PromptListItem
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
public
final
class
WebApps
{
public
static
class
WebApp0
extends
WebAppActivity
{
}
public
static
class
WebApp1
extends
WebAppActivity
{
}
public
static
class
WebApp2
extends
WebAppActivity
{
}
public
static
class
WebApp3
extends
WebAppActivity
{
}
public
static
class
WebApp4
extends
WebAppActivity
{
}
public
static
class
WebApp5
extends
WebAppActivity
{
}
public
static
class
WebApp6
extends
WebAppActivity
{
}
public
static
class
WebApp7
extends
WebAppActivity
{
}
public
static
class
WebApp8
extends
WebAppActivity
{
}
public
static
class
WebApp9
extends
WebAppActivity
{
}
public
static
void
openInFennec
(
final
Uri
uri
final
Context
context
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
final
Prompt
prompt
=
new
Prompt
(
context
new
Prompt
.
PromptCallback
(
)
{
Override
public
void
onPromptFinished
(
final
GeckoBundle
result
)
{
final
int
itemId
=
result
.
getInt
(
"
button
"
-
1
)
;
if
(
itemId
=
=
-
1
)
{
return
;
}
Intent
intent
=
new
Intent
(
context
BrowserApp
.
class
)
;
intent
.
setAction
(
Intent
.
ACTION_VIEW
)
;
intent
.
setData
(
uri
)
;
intent
.
setPackage
(
context
.
getPackageName
(
)
)
;
context
.
startActivity
(
intent
)
;
}
}
)
;
final
PromptListItem
[
]
items
=
new
PromptListItem
[
1
]
;
items
[
0
]
=
new
PromptListItem
(
context
.
getResources
(
)
.
getString
(
R
.
string
.
overlay_share_open_browser_btn_label
)
)
;
prompt
.
show
(
"
"
"
"
items
ListView
.
CHOICE_MODE_NONE
)
;
}
Nullable
public
static
Uri
getValidURL
(
NonNull
String
urlString
)
{
final
Uri
uri
=
Uri
.
parse
(
urlString
)
;
if
(
uri
=
=
null
)
{
return
null
;
}
final
String
scheme
=
uri
.
getScheme
(
)
;
if
(
scheme
.
equals
(
"
http
"
)
|
|
scheme
.
equals
(
"
https
"
)
)
{
return
uri
;
}
else
{
return
null
;
}
}
}
