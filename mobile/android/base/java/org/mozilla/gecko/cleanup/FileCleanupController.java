package
org
.
mozilla
.
gecko
.
cleanup
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
SharedPreferences
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
java
.
io
.
File
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
concurrent
.
TimeUnit
;
public
class
FileCleanupController
{
private
static
final
long
MILLIS_BETWEEN_CLEANUPS
=
TimeUnit
.
DAYS
.
toMillis
(
7
)
;
VisibleForTesting
static
final
String
PREF_LAST_CLEANUP_MILLIS
=
"
cleanup
.
lastFileCleanupMillis
"
;
private
static
final
String
[
]
PROFILE_FILES_TO_CLEANUP
=
new
String
[
]
{
"
health
.
db
"
"
health
.
db
-
journal
"
"
health
.
db
-
shm
"
"
health
.
db
-
wal
"
}
;
public
static
void
startIfReady
(
final
Context
context
final
SharedPreferences
sharedPrefs
final
String
profilePath
)
{
if
(
!
isCleanupReady
(
sharedPrefs
)
)
{
return
;
}
recordCleanupScheduled
(
sharedPrefs
)
;
final
Intent
fileCleanupIntent
=
new
Intent
(
context
FileCleanupService
.
class
)
;
fileCleanupIntent
.
setAction
(
FileCleanupService
.
ACTION_DELETE_FILES
)
;
fileCleanupIntent
.
putExtra
(
FileCleanupService
.
EXTRA_FILE_PATHS_TO_DELETE
getFilesToCleanup
(
profilePath
+
"
/
"
)
)
;
context
.
startService
(
fileCleanupIntent
)
;
}
private
static
boolean
isCleanupReady
(
final
SharedPreferences
sharedPrefs
)
{
final
long
lastCleanupMillis
=
sharedPrefs
.
getLong
(
PREF_LAST_CLEANUP_MILLIS
-
1
)
;
return
lastCleanupMillis
+
MILLIS_BETWEEN_CLEANUPS
<
System
.
currentTimeMillis
(
)
;
}
private
static
void
recordCleanupScheduled
(
final
SharedPreferences
sharedPrefs
)
{
final
SharedPreferences
.
Editor
editor
=
sharedPrefs
.
edit
(
)
;
editor
.
putLong
(
PREF_LAST_CLEANUP_MILLIS
System
.
currentTimeMillis
(
)
)
.
apply
(
)
;
}
VisibleForTesting
static
ArrayList
<
String
>
getFilesToCleanup
(
final
String
profilePath
)
{
final
ArrayList
<
String
>
out
=
new
ArrayList
<
>
(
PROFILE_FILES_TO_CLEANUP
.
length
)
;
for
(
final
String
path
:
PROFILE_FILES_TO_CLEANUP
)
{
out
.
add
(
profilePath
+
File
.
separator
+
path
)
;
}
return
out
;
}
}
