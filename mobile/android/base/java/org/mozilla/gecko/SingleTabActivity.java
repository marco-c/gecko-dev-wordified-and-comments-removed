package
org
.
mozilla
.
gecko
;
import
android
.
content
.
Intent
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
org
.
mozilla
.
gecko
.
mozglue
.
SafeIntent
;
import
static
org
.
mozilla
.
gecko
.
Tabs
.
INTENT_EXTRA_SESSION_UUID
;
import
static
org
.
mozilla
.
gecko
.
Tabs
.
INTENT_EXTRA_TAB_ID
;
import
static
org
.
mozilla
.
gecko
.
Tabs
.
INVALID_TAB_ID
;
public
abstract
class
SingleTabActivity
extends
GeckoApp
{
Override
public
void
onCreate
(
Bundle
savedInstanceState
)
{
final
Intent
externalIntent
=
getIntent
(
)
;
GeckoActivityMonitor
.
getInstance
(
)
.
setCurrentActivity
(
this
)
;
decideTabAction
(
new
SafeIntent
(
externalIntent
)
savedInstanceState
)
;
super
.
onCreate
(
savedInstanceState
)
;
setIntent
(
externalIntent
)
;
}
Override
protected
void
onNewIntent
(
Intent
externalIntent
)
{
final
SafeIntent
intent
=
new
SafeIntent
(
externalIntent
)
;
GeckoActivityMonitor
.
getInstance
(
)
.
setCurrentActivity
(
this
)
;
if
(
decideTabAction
(
intent
null
)
)
{
super
.
onNewIntent
(
intent
.
getUnsafe
(
)
)
;
}
else
{
GeckoActivityMonitor
.
getInstance
(
)
.
onActivityNewIntent
(
this
)
;
loadTabFromIntent
(
intent
)
;
}
setIntent
(
intent
.
getUnsafe
(
)
)
;
}
Override
protected
boolean
saveSelectedStartupTab
(
)
{
return
true
;
}
Override
protected
void
restoreLastSelectedTab
(
)
{
if
(
!
mInitialized
)
{
return
;
}
final
Tabs
tabs
=
Tabs
.
getInstance
(
)
;
final
Tab
tabToSelect
=
tabs
.
getTab
(
mLastSelectedTabId
)
;
if
(
tabToSelect
!
=
null
&
&
GeckoApplication
.
getSessionUUID
(
)
.
equals
(
mLastSessionUUID
)
&
&
tabToSelect
.
matchesActivity
(
this
)
)
{
tabs
.
selectTab
(
mLastSelectedTabId
)
;
}
else
{
loadTabFromIntent
(
new
SafeIntent
(
getIntent
(
)
)
)
;
}
}
private
void
loadTabFromIntent
(
final
SafeIntent
intent
)
{
final
int
flags
=
getNewTabFlags
(
)
;
loadStartupTab
(
getIntentURI
(
intent
)
intent
flags
)
;
}
private
boolean
decideTabAction
(
NonNull
final
SafeIntent
intent
Nullable
final
Bundle
savedInstanceState
)
{
final
Tabs
tabs
=
Tabs
.
getInstance
(
)
;
if
(
hasGeckoTab
(
intent
)
)
{
final
Tab
tabToSelect
=
tabs
.
getTab
(
intent
.
getIntExtra
(
INTENT_EXTRA_TAB_ID
INVALID_TAB_ID
)
)
;
if
(
tabToSelect
.
matchesActivity
(
this
)
)
{
return
true
;
}
}
intent
.
getUnsafe
(
)
.
removeExtra
(
INTENT_EXTRA_TAB_ID
)
;
intent
.
getUnsafe
(
)
.
removeExtra
(
INTENT_EXTRA_SESSION_UUID
)
;
final
int
lastSelectedTabId
;
final
String
lastSessionUUID
;
if
(
savedInstanceState
!
=
null
)
{
lastSelectedTabId
=
savedInstanceState
.
getInt
(
LAST_SELECTED_TAB
)
;
lastSessionUUID
=
savedInstanceState
.
getString
(
LAST_SESSION_UUID
)
;
}
else
{
lastSelectedTabId
=
mLastSelectedTabId
;
lastSessionUUID
=
mLastSessionUUID
;
}
final
Tab
tabToSelect
=
tabs
.
getTab
(
lastSelectedTabId
)
;
if
(
tabToSelect
!
=
null
&
&
GeckoApplication
.
getSessionUUID
(
)
.
equals
(
lastSessionUUID
)
&
&
tabToSelect
.
matchesActivity
(
this
)
)
{
intent
.
getUnsafe
(
)
.
putExtra
(
INTENT_EXTRA_TAB_ID
lastSelectedTabId
)
;
intent
.
getUnsafe
(
)
.
putExtra
(
INTENT_EXTRA_SESSION_UUID
lastSessionUUID
)
;
return
true
;
}
return
false
;
}
Override
protected
void
onTabOpenFromIntent
(
Tab
tab
)
{
mLastSelectedTabId
=
tab
.
getId
(
)
;
mLastSessionUUID
=
GeckoApplication
.
getSessionUUID
(
)
;
}
Override
protected
void
onTabSelectFromIntent
(
Tab
tab
)
{
mLastSelectedTabId
=
tab
.
getId
(
)
;
mLastSessionUUID
=
GeckoApplication
.
getSessionUUID
(
)
;
}
}
