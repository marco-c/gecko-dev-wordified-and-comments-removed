package
org
.
mozilla
.
gecko
.
home
.
activitystream
.
topsites
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
support
.
v7
.
widget
.
RecyclerView
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewGroup
;
import
android
.
widget
.
FrameLayout
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
home
.
HomePager
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
TopSitesPageAdapter
extends
RecyclerView
.
Adapter
<
TopSitesCard
>
{
static
final
class
TopSite
{
public
final
long
id
;
public
final
String
url
;
public
final
String
title
;
TopSite
(
long
id
String
url
String
title
)
{
this
.
id
=
id
;
this
.
url
=
url
;
this
.
title
=
title
;
}
}
private
List
<
TopSite
>
topSites
;
private
int
tiles
;
private
int
tilesWidth
;
private
int
tilesHeight
;
private
int
textHeight
;
private
final
HomePager
.
OnUrlOpenListener
onUrlOpenListener
;
private
final
HomePager
.
OnUrlOpenInBackgroundListener
onUrlOpenInBackgroundListener
;
public
TopSitesPageAdapter
(
Context
context
int
tiles
int
tilesWidth
int
tilesHeight
HomePager
.
OnUrlOpenListener
onUrlOpenListener
HomePager
.
OnUrlOpenInBackgroundListener
onUrlOpenInBackgroundListener
)
{
setHasStableIds
(
true
)
;
this
.
topSites
=
new
ArrayList
<
>
(
)
;
this
.
tiles
=
tiles
;
this
.
tilesWidth
=
tilesWidth
;
this
.
tilesHeight
=
tilesHeight
;
this
.
textHeight
=
context
.
getResources
(
)
.
getDimensionPixelSize
(
R
.
dimen
.
activity_stream_top_sites_text_height
)
;
this
.
onUrlOpenListener
=
onUrlOpenListener
;
this
.
onUrlOpenInBackgroundListener
=
onUrlOpenInBackgroundListener
;
}
public
void
swapCursor
(
Cursor
cursor
int
startIndex
)
{
topSites
.
clear
(
)
;
if
(
cursor
=
=
null
)
{
return
;
}
for
(
int
i
=
0
;
i
<
tiles
&
&
startIndex
+
i
<
cursor
.
getCount
(
)
;
i
+
+
)
{
cursor
.
moveToPosition
(
startIndex
+
i
)
;
final
long
id
=
cursor
.
getLong
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Combined
.
HISTORY_ID
)
)
;
final
String
url
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Combined
.
URL
)
)
;
final
String
title
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Combined
.
TITLE
)
)
;
topSites
.
add
(
new
TopSite
(
id
url
title
)
)
;
}
notifyDataSetChanged
(
)
;
}
Override
public
void
onBindViewHolder
(
TopSitesCard
holder
int
position
)
{
holder
.
bind
(
topSites
.
get
(
position
)
)
;
}
Override
public
TopSitesCard
onCreateViewHolder
(
ViewGroup
parent
int
viewType
)
{
final
LayoutInflater
inflater
=
LayoutInflater
.
from
(
parent
.
getContext
(
)
)
;
final
FrameLayout
card
=
(
FrameLayout
)
inflater
.
inflate
(
R
.
layout
.
activity_stream_topsites_card
parent
false
)
;
final
View
content
=
card
.
findViewById
(
R
.
id
.
content
)
;
ViewGroup
.
LayoutParams
layoutParams
=
content
.
getLayoutParams
(
)
;
layoutParams
.
width
=
tilesWidth
;
layoutParams
.
height
=
tilesHeight
+
textHeight
;
content
.
setLayoutParams
(
layoutParams
)
;
return
new
TopSitesCard
(
card
onUrlOpenListener
onUrlOpenInBackgroundListener
)
;
}
Override
public
int
getItemCount
(
)
{
return
topSites
.
size
(
)
;
}
Override
UiThread
public
long
getItemId
(
int
position
)
{
return
topSites
.
get
(
position
)
.
id
;
}
}
