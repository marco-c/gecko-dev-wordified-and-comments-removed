package
org
.
mozilla
.
gecko
.
home
.
activitystream
.
topsites
;
import
android
.
database
.
Cursor
;
import
android
.
database
.
CursorWrapper
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
support
.
v7
.
widget
.
CardView
;
import
android
.
support
.
v7
.
widget
.
RecyclerView
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
ViewGroup
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
public
class
TopSitesPageAdapter
extends
RecyclerView
.
Adapter
<
TopSitesCard
>
{
private
static
final
class
SubsetCursor
extends
CursorWrapper
{
private
final
int
start
;
private
final
int
count
;
public
SubsetCursor
(
Cursor
cursor
int
start
int
maxCount
)
{
super
(
cursor
)
;
this
.
start
=
start
;
if
(
start
+
maxCount
<
cursor
.
getCount
(
)
)
{
count
=
maxCount
;
}
else
{
count
=
cursor
.
getCount
(
)
-
start
;
}
}
Override
public
boolean
moveToPosition
(
int
position
)
{
return
super
.
moveToPosition
(
position
+
start
)
;
}
Override
public
int
getCount
(
)
{
return
count
;
}
}
private
Cursor
cursor
;
public
void
swapCursor
(
Cursor
cursor
int
startIndex
)
{
if
(
cursor
!
=
null
)
{
if
(
startIndex
>
=
cursor
.
getCount
(
)
)
{
throw
new
IllegalArgumentException
(
"
startIndex
must
be
within
Cursor
range
"
)
;
}
this
.
cursor
=
new
SubsetCursor
(
cursor
startIndex
TopSitesPagerAdapter
.
ITEMS_PER_PAGE
)
;
}
else
{
this
.
cursor
=
null
;
}
notifyDataSetChanged
(
)
;
}
Override
public
void
onBindViewHolder
(
TopSitesCard
holder
int
position
)
{
cursor
.
moveToPosition
(
position
)
;
holder
.
bind
(
cursor
)
;
}
public
TopSitesPageAdapter
(
)
{
setHasStableIds
(
true
)
;
}
Override
public
TopSitesCard
onCreateViewHolder
(
ViewGroup
parent
int
viewType
)
{
final
LayoutInflater
inflater
=
LayoutInflater
.
from
(
parent
.
getContext
(
)
)
;
final
CardView
card
=
(
CardView
)
inflater
.
inflate
(
R
.
layout
.
activity_stream_topsites_card
parent
false
)
;
return
new
TopSitesCard
(
card
)
;
}
UiThread
public
String
getURLForPosition
(
int
position
)
{
cursor
.
moveToPosition
(
position
)
;
return
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Combined
.
URL
)
)
;
}
Override
public
int
getItemCount
(
)
{
if
(
cursor
!
=
null
)
{
return
cursor
.
getCount
(
)
;
}
else
{
return
0
;
}
}
Override
UiThread
public
long
getItemId
(
int
position
)
{
cursor
.
moveToPosition
(
position
)
;
return
cursor
.
getLong
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Combined
.
HISTORY_ID
)
)
;
}
}
