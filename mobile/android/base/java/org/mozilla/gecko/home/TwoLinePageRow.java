package
org
.
mozilla
.
gecko
.
home
;
import
java
.
util
.
concurrent
.
Future
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
android
.
support
.
v4
.
view
.
ViewCompat
;
import
android
.
support
.
v4
.
widget
.
TextViewCompat
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
Gravity
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
View
;
import
android
.
widget
.
ImageView
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Tab
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
.
Combined
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
.
URLColumns
;
import
org
.
mozilla
.
gecko
.
distribution
.
PartnerBookmarksProviderProxy
;
import
org
.
mozilla
.
gecko
.
icons
.
IconDescriptor
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
import
org
.
mozilla
.
gecko
.
icons
.
Icons
;
import
org
.
mozilla
.
gecko
.
reader
.
ReaderModeUtils
;
import
org
.
mozilla
.
gecko
.
reader
.
SavedReaderViewHelper
;
import
org
.
mozilla
.
gecko
.
widget
.
FaviconView
;
import
org
.
mozilla
.
gecko
.
widget
.
themed
.
ThemedLinearLayout
;
import
org
.
mozilla
.
gecko
.
widget
.
themed
.
ThemedTextView
;
public
class
TwoLinePageRow
extends
ThemedLinearLayout
implements
Tabs
.
OnTabsChangedListener
{
protected
static
final
int
NO_ICON
=
0
;
private
final
ThemedTextView
mTitle
;
private
final
ThemedTextView
mUrl
;
private
final
ImageView
mStatusIcon
;
private
int
mSwitchToTabIconId
;
private
final
FaviconView
mFavicon
;
private
Future
<
IconResponse
>
mOngoingIconLoad
;
private
boolean
mShowIcons
;
private
String
mPageUrl
;
private
boolean
mHasReaderCacheItem
;
public
TwoLinePageRow
(
Context
context
)
{
this
(
context
null
)
;
}
public
TwoLinePageRow
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
setGravity
(
Gravity
.
CENTER_VERTICAL
)
;
LayoutInflater
.
from
(
context
)
.
inflate
(
R
.
layout
.
two_line_page_row
this
)
;
ViewCompat
.
setPaddingRelative
(
this
0
0
(
int
)
getResources
(
)
.
getDimension
(
R
.
dimen
.
page_row_edge_padding
)
0
)
;
mTitle
=
(
ThemedTextView
)
findViewById
(
R
.
id
.
title
)
;
mUrl
=
(
ThemedTextView
)
findViewById
(
R
.
id
.
url
)
;
mStatusIcon
=
(
ImageView
)
findViewById
(
R
.
id
.
status_icon_bookmark
)
;
mSwitchToTabIconId
=
NO_ICON
;
mShowIcons
=
true
;
mFavicon
=
(
FaviconView
)
findViewById
(
R
.
id
.
icon
)
;
}
Override
protected
void
onAttachedToWindow
(
)
{
super
.
onAttachedToWindow
(
)
;
Tabs
.
registerOnTabsChangedListener
(
this
)
;
}
Override
protected
void
onDetachedFromWindow
(
)
{
super
.
onDetachedFromWindow
(
)
;
Tabs
.
unregisterOnTabsChangedListener
(
this
)
;
}
Override
public
void
onTabChanged
(
final
Tab
tab
final
Tabs
.
TabEvents
msg
final
String
data
)
{
final
String
pageUrl
=
mPageUrl
;
if
(
pageUrl
=
=
null
)
{
return
;
}
if
(
tab
=
=
null
)
{
return
;
}
final
String
tabUrl
=
tab
.
getURL
(
)
;
if
(
!
pageUrl
.
equals
(
ReaderModeUtils
.
stripAboutReaderUrl
(
tabUrl
)
)
&
&
!
pageUrl
.
equals
(
ReaderModeUtils
.
stripAboutReaderUrl
(
data
)
)
)
{
return
;
}
switch
(
msg
)
{
case
ADDED
:
case
CLOSED
:
case
LOCATION_CHANGE
:
updateDisplayedUrl
(
)
;
break
;
default
:
break
;
}
}
private
void
setTitle
(
String
text
)
{
mTitle
.
setText
(
text
)
;
}
protected
void
setUrl
(
String
text
)
{
mUrl
.
setText
(
text
)
;
}
protected
void
setUrl
(
int
stringId
)
{
mUrl
.
setText
(
stringId
)
;
}
protected
String
getUrl
(
)
{
return
mPageUrl
;
}
protected
void
setSwitchToTabIcon
(
int
iconId
)
{
if
(
mSwitchToTabIconId
=
=
iconId
)
{
return
;
}
mSwitchToTabIconId
=
iconId
;
TextViewCompat
.
setCompoundDrawablesRelativeWithIntrinsicBounds
(
mUrl
mSwitchToTabIconId
0
0
0
)
;
}
private
void
updateStatusIcon
(
boolean
isBookmark
boolean
isReaderItem
)
{
if
(
isReaderItem
)
{
mStatusIcon
.
setImageResource
(
R
.
drawable
.
status_icon_readercache
)
;
}
else
if
(
isBookmark
)
{
mStatusIcon
.
setImageResource
(
R
.
drawable
.
star_blue
)
;
}
if
(
mShowIcons
&
&
(
isBookmark
|
|
isReaderItem
)
)
{
mStatusIcon
.
setVisibility
(
View
.
VISIBLE
)
;
}
else
if
(
mShowIcons
)
{
mStatusIcon
.
setVisibility
(
View
.
INVISIBLE
)
;
}
else
{
mStatusIcon
.
setVisibility
(
View
.
GONE
)
;
}
}
private
void
updateDisplayedUrl
(
String
url
boolean
hasReaderCacheItem
)
{
mPageUrl
=
url
;
mHasReaderCacheItem
=
hasReaderCacheItem
;
updateDisplayedUrl
(
)
;
}
protected
void
updateDisplayedUrl
(
)
{
final
Tab
selectedTab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
final
boolean
isPrivate
=
(
selectedTab
!
=
null
)
&
&
(
selectedTab
.
isPrivate
(
)
)
;
final
String
navigationUrl
=
mHasReaderCacheItem
?
ReaderModeUtils
.
getAboutReaderForUrl
(
mPageUrl
)
:
mPageUrl
;
Tab
tab
=
Tabs
.
getInstance
(
)
.
getFirstTabForUrl
(
navigationUrl
isPrivate
)
;
if
(
!
mShowIcons
|
|
tab
=
=
null
)
{
setUrl
(
mPageUrl
)
;
setSwitchToTabIcon
(
NO_ICON
)
;
}
else
{
setUrl
(
R
.
string
.
switch_to_tab
)
;
setSwitchToTabIcon
(
R
.
drawable
.
ic_url_bar_tab
)
;
}
}
public
void
setShowIcons
(
boolean
showIcons
)
{
mShowIcons
=
showIcons
;
}
public
void
update
(
String
title
String
url
)
{
update
(
title
url
0
false
)
;
}
protected
void
update
(
String
title
String
url
long
bookmarkId
boolean
hasReaderCacheItem
)
{
if
(
mShowIcons
)
{
final
boolean
isBookmark
=
bookmarkId
>
0
;
updateStatusIcon
(
isBookmark
hasReaderCacheItem
)
;
}
else
{
updateStatusIcon
(
false
false
)
;
}
setTitle
(
TextUtils
.
isEmpty
(
title
)
?
url
:
title
)
;
if
(
url
.
equals
(
mPageUrl
)
)
{
return
;
}
mFavicon
.
clearImage
(
)
;
if
(
mOngoingIconLoad
!
=
null
)
{
mOngoingIconLoad
.
cancel
(
true
)
;
}
final
String
pageURL
=
ReaderModeUtils
.
stripAboutReaderUrl
(
url
)
;
if
(
TextUtils
.
isEmpty
(
pageURL
)
)
{
}
else
if
(
bookmarkId
<
BrowserContract
.
Bookmarks
.
FAKE_PARTNER_BOOKMARKS_START
)
{
mOngoingIconLoad
=
Icons
.
with
(
getContext
(
)
)
.
pageUrl
(
pageURL
)
.
skipNetwork
(
)
.
privileged
(
true
)
.
icon
(
IconDescriptor
.
createGenericIcon
(
PartnerBookmarksProviderProxy
.
getUriForIcon
(
getContext
(
)
bookmarkId
)
.
toString
(
)
)
)
.
build
(
)
.
execute
(
mFavicon
.
createIconCallback
(
)
)
;
}
else
{
mOngoingIconLoad
=
Icons
.
with
(
getContext
(
)
)
.
pageUrl
(
pageURL
)
.
skipNetwork
(
)
.
build
(
)
.
execute
(
mFavicon
.
createIconCallback
(
)
)
;
}
updateDisplayedUrl
(
url
hasReaderCacheItem
)
;
}
Override
public
void
setPrivateMode
(
boolean
isPrivate
)
{
super
.
setPrivateMode
(
isPrivate
)
;
mTitle
.
setPrivateMode
(
isPrivate
)
;
mUrl
.
setPrivateMode
(
isPrivate
)
;
}
public
void
updateFromCursor
(
Cursor
cursor
)
{
if
(
cursor
=
=
null
)
{
return
;
}
int
titleIndex
=
cursor
.
getColumnIndexOrThrow
(
URLColumns
.
TITLE
)
;
final
String
title
=
cursor
.
getString
(
titleIndex
)
;
int
urlIndex
=
cursor
.
getColumnIndexOrThrow
(
URLColumns
.
URL
)
;
final
String
url
=
cursor
.
getString
(
urlIndex
)
;
final
long
bookmarkId
;
final
int
bookmarkIdIndex
=
cursor
.
getColumnIndex
(
Combined
.
BOOKMARK_ID
)
;
if
(
bookmarkIdIndex
!
=
-
1
)
{
bookmarkId
=
cursor
.
getLong
(
bookmarkIdIndex
)
;
}
else
{
bookmarkId
=
0
;
}
SavedReaderViewHelper
rch
=
SavedReaderViewHelper
.
getSavedReaderViewHelper
(
getContext
(
)
)
;
final
boolean
hasReaderCacheItem
=
rch
.
isURLCached
(
url
)
;
update
(
title
url
bookmarkId
hasReaderCacheItem
)
;
}
}
