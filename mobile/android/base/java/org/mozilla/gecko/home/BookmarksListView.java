package
org
.
mozilla
.
gecko
.
home
;
import
java
.
util
.
EnumSet
;
import
java
.
util
.
List
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
.
Bookmarks
;
import
org
.
mozilla
.
gecko
.
home
.
HomePager
.
OnUrlOpenListener
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
KeyEvent
;
import
android
.
view
.
View
;
import
android
.
widget
.
AdapterView
;
import
android
.
widget
.
HeaderViewListAdapter
;
import
android
.
widget
.
ListAdapter
;
import
org
.
mozilla
.
gecko
.
util
.
NetworkUtils
;
public
class
BookmarksListView
extends
HomeListView
implements
AdapterView
.
OnItemClickListener
{
public
static
final
String
LOGTAG
=
"
GeckoBookmarksListView
"
;
public
BookmarksListView
(
Context
context
)
{
this
(
context
null
)
;
}
public
BookmarksListView
(
Context
context
AttributeSet
attrs
)
{
this
(
context
attrs
R
.
attr
.
bookmarksListViewStyle
)
;
}
public
BookmarksListView
(
Context
context
AttributeSet
attrs
int
defStyle
)
{
super
(
context
attrs
defStyle
)
;
}
Override
public
void
onAttachedToWindow
(
)
{
super
.
onAttachedToWindow
(
)
;
setOnItemClickListener
(
this
)
;
setOnKeyListener
(
new
View
.
OnKeyListener
(
)
{
Override
public
boolean
onKey
(
View
v
int
keyCode
KeyEvent
event
)
{
final
int
action
=
event
.
getAction
(
)
;
if
(
action
=
=
KeyEvent
.
ACTION_UP
&
&
keyCode
=
=
KeyEvent
.
KEYCODE_BACK
)
{
return
getBookmarksListAdapter
(
)
.
moveToParentFolder
(
)
;
}
return
false
;
}
}
)
;
}
private
String
getTelemetryExtraForFolder
(
int
folderID
int
baseFolderID
)
{
if
(
folderID
=
=
Bookmarks
.
FAKE_DESKTOP_FOLDER_ID
)
{
return
"
folder_desktop
"
;
}
else
if
(
folderID
=
=
Bookmarks
.
FIXED_SCREENSHOT_FOLDER_ID
)
{
return
"
folder_screenshots
"
;
}
else
if
(
folderID
=
=
Bookmarks
.
FAKE_READINGLIST_SMARTFOLDER_ID
)
{
return
"
folder_reading_list
"
;
}
else
{
if
(
baseFolderID
=
=
Bookmarks
.
FAKE_DESKTOP_FOLDER_ID
)
{
return
"
folder_desktop_subfolder
"
;
}
else
{
return
"
folder_mobile_subfolder
"
;
}
}
}
Override
public
void
onItemClick
(
AdapterView
<
?
>
parent
View
view
int
position
long
id
)
{
final
BookmarksListAdapter
adapter
=
getBookmarksListAdapter
(
)
;
if
(
adapter
.
isShowingChildFolder
(
)
)
{
if
(
position
=
=
0
)
{
final
List
<
BookmarksListAdapter
.
FolderInfo
>
parentStack
=
(
(
BookmarksListAdapter
)
getAdapter
(
)
)
.
getParentStack
(
)
;
if
(
parentStack
.
size
(
)
<
2
)
{
throw
new
IllegalStateException
(
"
Cannot
move
to
parent
folder
if
we
are
already
in
the
root
folder
"
)
;
}
BookmarksListAdapter
.
FolderInfo
folder
=
parentStack
.
get
(
1
)
;
final
int
parentID
=
folder
.
id
;
final
int
baseFolderID
;
if
(
parentStack
.
size
(
)
>
2
)
{
baseFolderID
=
parentStack
.
get
(
parentStack
.
size
(
)
-
2
)
.
id
;
}
else
{
baseFolderID
=
Bookmarks
.
FIXED_ROOT_ID
;
}
final
String
extra
=
getTelemetryExtraForFolder
(
parentID
baseFolderID
)
;
adapter
.
moveToParentFolder
(
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
SHOW
TelemetryContract
.
Method
.
LIST_ITEM
extra
)
;
return
;
}
position
-
-
;
}
final
Cursor
cursor
=
adapter
.
getCursor
(
)
;
if
(
cursor
=
=
null
)
{
return
;
}
cursor
.
moveToPosition
(
position
)
;
if
(
adapter
.
getOpenFolderType
(
)
=
=
BookmarksListAdapter
.
FolderType
.
SCREENSHOTS
)
{
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
LOAD_URL
TelemetryContract
.
Method
.
LIST_ITEM
"
bookmarks
-
screenshot
"
)
;
final
String
fileUrl
=
"
file
:
/
/
"
+
cursor
.
getString
(
cursor
.
getColumnIndex
(
BrowserContract
.
UrlAnnotations
.
VALUE
)
)
;
getOnUrlOpenListener
(
)
.
onUrlOpen
(
fileUrl
EnumSet
.
of
(
OnUrlOpenListener
.
Flags
.
ALLOW_SWITCH_TO_TAB
)
)
;
return
;
}
int
type
=
cursor
.
getInt
(
cursor
.
getColumnIndexOrThrow
(
Bookmarks
.
TYPE
)
)
;
if
(
type
=
=
Bookmarks
.
TYPE_FOLDER
)
{
final
int
folderId
=
cursor
.
getInt
(
cursor
.
getColumnIndexOrThrow
(
Bookmarks
.
_ID
)
)
;
final
String
folderTitle
=
adapter
.
getFolderTitle
(
parent
.
getContext
(
)
cursor
)
;
adapter
.
moveToChildFolder
(
folderId
folderTitle
)
;
final
List
<
BookmarksListAdapter
.
FolderInfo
>
parentStack
=
(
(
BookmarksListAdapter
)
getAdapter
(
)
)
.
getParentStack
(
)
;
final
int
baseFolderID
;
if
(
parentStack
.
size
(
)
>
2
)
{
baseFolderID
=
parentStack
.
get
(
parentStack
.
size
(
)
-
2
)
.
id
;
}
else
{
baseFolderID
=
Bookmarks
.
FIXED_ROOT_ID
;
}
final
String
extra
=
getTelemetryExtraForFolder
(
folderId
baseFolderID
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
SHOW
TelemetryContract
.
Method
.
LIST_ITEM
extra
)
;
}
else
{
final
String
url
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
Bookmarks
.
URL
)
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
LOAD_URL
TelemetryContract
.
Method
.
LIST_ITEM
"
bookmarks
"
)
;
Telemetry
.
addToHistogram
(
"
FENNEC_LOAD_SAVED_PAGE
"
NetworkUtils
.
isConnected
(
getContext
(
)
)
?
2
:
3
)
;
getOnUrlOpenListener
(
)
.
onUrlOpen
(
url
EnumSet
.
of
(
OnUrlOpenListener
.
Flags
.
ALLOW_SWITCH_TO_TAB
)
)
;
}
}
Override
public
boolean
onItemLongClick
(
AdapterView
<
?
>
parent
View
view
int
position
long
id
)
{
final
BookmarksListAdapter
adapter
=
getBookmarksListAdapter
(
)
;
if
(
adapter
.
isShowingChildFolder
(
)
)
{
position
-
-
;
}
if
(
adapter
.
getOpenFolderType
(
)
=
=
BookmarksListAdapter
.
FolderType
.
SCREENSHOTS
)
{
return
false
;
}
return
super
.
onItemLongClick
(
parent
view
position
id
)
;
}
private
BookmarksListAdapter
getBookmarksListAdapter
(
)
{
BookmarksListAdapter
adapter
;
ListAdapter
listAdapter
=
getAdapter
(
)
;
if
(
listAdapter
instanceof
HeaderViewListAdapter
)
{
adapter
=
(
BookmarksListAdapter
)
(
(
HeaderViewListAdapter
)
listAdapter
)
.
getWrappedAdapter
(
)
;
}
else
{
adapter
=
(
BookmarksListAdapter
)
listAdapter
;
}
return
adapter
;
}
}
