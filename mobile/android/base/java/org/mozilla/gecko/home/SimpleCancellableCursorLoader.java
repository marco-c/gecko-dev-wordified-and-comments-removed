package
org
.
mozilla
.
gecko
.
home
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
android
.
support
.
v4
.
content
.
AsyncTaskLoader
;
import
android
.
support
.
v4
.
os
.
CancellationSignal
;
import
android
.
support
.
v4
.
os
.
OperationCanceledException
;
abstract
class
SimpleCancellableCursorLoader
extends
AsyncTaskLoader
<
Cursor
>
{
final
ForceLoadContentObserver
mObserver
;
Cursor
mCursor
;
CancellationSignal
mCancellationSignal
;
public
SimpleCancellableCursorLoader
(
Context
context
)
{
super
(
context
)
;
mObserver
=
new
ForceLoadContentObserver
(
)
;
}
protected
abstract
Cursor
loadCursor
(
CancellationSignal
cancellationSignal
)
;
Override
public
Cursor
loadInBackground
(
)
{
synchronized
(
this
)
{
if
(
isLoadInBackgroundCanceled
(
)
)
{
throw
new
OperationCanceledException
(
)
;
}
mCancellationSignal
=
new
CancellationSignal
(
)
;
}
try
{
Cursor
cursor
=
loadCursor
(
mCancellationSignal
)
;
if
(
cursor
!
=
null
)
{
try
{
cursor
.
getCount
(
)
;
cursor
.
registerContentObserver
(
mObserver
)
;
}
catch
(
RuntimeException
ex
)
{
cursor
.
close
(
)
;
throw
ex
;
}
}
return
cursor
;
}
finally
{
synchronized
(
this
)
{
mCancellationSignal
=
null
;
}
}
}
Override
public
void
cancelLoadInBackground
(
)
{
super
.
cancelLoadInBackground
(
)
;
synchronized
(
this
)
{
if
(
mCancellationSignal
!
=
null
)
{
mCancellationSignal
.
cancel
(
)
;
}
}
}
Override
public
void
deliverResult
(
Cursor
cursor
)
{
if
(
isReset
(
)
)
{
if
(
cursor
!
=
null
)
{
cursor
.
close
(
)
;
}
return
;
}
Cursor
oldCursor
=
mCursor
;
mCursor
=
cursor
;
if
(
isStarted
(
)
)
{
super
.
deliverResult
(
cursor
)
;
}
if
(
oldCursor
!
=
null
&
&
oldCursor
!
=
cursor
&
&
!
oldCursor
.
isClosed
(
)
)
{
oldCursor
.
close
(
)
;
}
}
Override
protected
void
onStartLoading
(
)
{
if
(
mCursor
!
=
null
)
{
deliverResult
(
mCursor
)
;
}
if
(
takeContentChanged
(
)
|
|
mCursor
=
=
null
)
{
forceLoad
(
)
;
}
}
Override
protected
void
onStopLoading
(
)
{
cancelLoad
(
)
;
}
Override
public
void
onCanceled
(
Cursor
cursor
)
{
if
(
cursor
!
=
null
&
&
!
cursor
.
isClosed
(
)
)
{
cursor
.
close
(
)
;
}
}
Override
protected
void
onReset
(
)
{
super
.
onReset
(
)
;
onStopLoading
(
)
;
if
(
mCursor
!
=
null
&
&
!
mCursor
.
isClosed
(
)
)
{
mCursor
.
close
(
)
;
}
mCursor
=
null
;
}
}
