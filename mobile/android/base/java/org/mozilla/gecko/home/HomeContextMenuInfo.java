package
org
.
mozilla
.
gecko
.
home
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
util
.
StringUtils
;
import
android
.
database
.
Cursor
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
text
.
TextUtils
;
import
android
.
view
.
View
;
import
android
.
widget
.
AdapterView
.
AdapterContextMenuInfo
;
import
android
.
widget
.
ExpandableListAdapter
;
import
android
.
widget
.
ListAdapter
;
public
class
HomeContextMenuInfo
extends
AdapterContextMenuInfo
{
public
String
url
;
public
String
title
;
boolean
isFolder
;
int
historyId
=
-
1
;
public
int
bookmarkId
=
-
1
;
public
RemoveItemType
itemType
=
null
;
Nullable
Boolean
isAsPinned
;
enum
RemoveItemType
{
BOOKMARKS
COMBINED
HISTORY
}
public
HomeContextMenuInfo
(
View
targetView
int
position
long
id
)
{
super
(
targetView
position
id
)
;
}
public
String
getDisplayTitle
(
)
{
if
(
!
TextUtils
.
isEmpty
(
title
)
)
{
return
title
;
}
return
StringUtils
.
stripCommonSubdomains
(
StringUtils
.
stripScheme
(
url
StringUtils
.
UrlFlags
.
STRIP_HTTPS
)
)
;
}
boolean
hasBookmarkId
(
)
{
return
bookmarkId
>
-
1
;
}
boolean
hasPartnerBookmarkId
(
)
{
return
bookmarkId
<
=
BrowserContract
.
Bookmarks
.
FAKE_PARTNER_BOOKMARKS_START
;
}
boolean
canRemove
(
)
{
return
hasBookmarkId
(
)
|
|
hasHistoryId
(
)
|
|
hasPartnerBookmarkId
(
)
;
}
void
updateAsPinned
(
boolean
pinnedState
)
{
isAsPinned
=
pinnedState
;
}
private
boolean
hasHistoryId
(
)
{
return
historyId
>
-
1
;
}
public
interface
Factory
{
HomeContextMenuInfo
makeInfoForCursor
(
View
view
int
position
long
id
Cursor
cursor
)
;
}
interface
ListFactory
extends
Factory
{
HomeContextMenuInfo
makeInfoForAdapter
(
View
view
int
position
long
id
ListAdapter
adapter
)
;
}
interface
ExpandableFactory
{
HomeContextMenuInfo
makeInfoForAdapter
(
View
view
int
position
long
id
ExpandableListAdapter
adapter
)
;
}
}
