package
org
.
mozilla
.
gecko
.
home
;
import
static
org
.
mozilla
.
gecko
.
home
.
HomeConfig
.
createBuiltinPanelConfig
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
EnumSet
;
import
java
.
util
.
Locale
;
import
org
.
json
.
JSONArray
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
GeckoSharedPrefs
;
import
org
.
mozilla
.
gecko
.
home
.
HomeConfig
.
HomeConfigBackend
;
import
org
.
mozilla
.
gecko
.
home
.
HomeConfig
.
OnReloadListener
;
import
org
.
mozilla
.
gecko
.
home
.
HomeConfig
.
PanelConfig
;
import
org
.
mozilla
.
gecko
.
home
.
HomeConfig
.
PanelType
;
import
org
.
mozilla
.
gecko
.
home
.
HomeConfig
.
State
;
import
org
.
mozilla
.
gecko
.
util
.
HardwareUtils
;
import
android
.
content
.
BroadcastReceiver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
IntentFilter
;
import
android
.
content
.
SharedPreferences
;
import
android
.
support
.
v4
.
content
.
LocalBroadcastManager
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
Log
;
public
class
HomeConfigPrefsBackend
implements
HomeConfigBackend
{
private
static
final
String
LOGTAG
=
"
GeckoHomeConfigBackend
"
;
private
static
final
int
VERSION
=
5
;
public
static
final
String
PREFS_CONFIG_KEY_OLD
=
"
home_panels
"
;
public
static
final
String
PREFS_CONFIG_KEY
=
"
home_panels_with_version
"
;
private
static
final
String
JSON_KEY_PANELS
=
"
panels
"
;
private
static
final
String
JSON_KEY_VERSION
=
"
version
"
;
private
static
final
String
PREFS_LOCALE_KEY
=
"
home_locale
"
;
private
static
final
String
RELOAD_BROADCAST
=
"
HomeConfigPrefsBackend
:
Reload
"
;
private
final
Context
mContext
;
private
ReloadBroadcastReceiver
mReloadBroadcastReceiver
;
private
OnReloadListener
mReloadListener
;
private
static
boolean
sMigrationDone
;
public
HomeConfigPrefsBackend
(
Context
context
)
{
mContext
=
context
;
}
private
SharedPreferences
getSharedPreferences
(
)
{
return
GeckoSharedPrefs
.
forProfile
(
mContext
)
;
}
private
State
loadDefaultConfig
(
)
{
final
ArrayList
<
PanelConfig
>
panelConfigs
=
new
ArrayList
<
PanelConfig
>
(
)
;
panelConfigs
.
add
(
createBuiltinPanelConfig
(
mContext
PanelType
.
TOP_SITES
EnumSet
.
of
(
PanelConfig
.
Flags
.
DEFAULT_PANEL
)
)
)
;
panelConfigs
.
add
(
createBuiltinPanelConfig
(
mContext
PanelType
.
BOOKMARKS
)
)
;
panelConfigs
.
add
(
createBuiltinPanelConfig
(
mContext
PanelType
.
COMBINED_HISTORY
)
)
;
panelConfigs
.
add
(
createBuiltinPanelConfig
(
mContext
PanelType
.
RECENT_TABS
)
)
;
panelConfigs
.
add
(
createBuiltinPanelConfig
(
mContext
PanelType
.
READING_LIST
)
)
;
return
new
State
(
panelConfigs
true
)
;
}
private
static
boolean
allPanelsAreDisabled
(
JSONArray
jsonPanels
)
throws
JSONException
{
final
int
count
=
jsonPanels
.
length
(
)
;
for
(
int
i
=
0
;
i
<
count
;
i
+
+
)
{
final
JSONObject
jsonPanelConfig
=
jsonPanels
.
getJSONObject
(
i
)
;
if
(
!
jsonPanelConfig
.
optBoolean
(
PanelConfig
.
JSON_KEY_DISABLED
false
)
)
{
return
false
;
}
}
return
true
;
}
protected
enum
Position
{
NONE
FRONT
BACK
}
protected
static
void
addBuiltinPanelConfig
(
Context
context
JSONArray
jsonPanels
PanelType
panelType
Position
positionOnPhones
Position
positionOnTablets
)
throws
JSONException
{
final
JSONObject
jsonPanelConfig
=
createBuiltinPanelConfig
(
context
panelType
)
.
toJSON
(
)
;
jsonPanelConfig
.
put
(
PanelConfig
.
JSON_KEY_DISABLED
allPanelsAreDisabled
(
jsonPanels
)
)
;
final
boolean
isTablet
=
HardwareUtils
.
isTablet
(
)
;
final
boolean
isPhone
=
!
isTablet
;
if
(
(
isPhone
&
&
positionOnPhones
=
=
Position
.
FRONT
)
|
|
(
isTablet
&
&
positionOnTablets
=
=
Position
.
FRONT
)
)
{
for
(
int
i
=
jsonPanels
.
length
(
)
;
i
>
=
1
;
i
-
-
)
{
jsonPanels
.
put
(
i
jsonPanels
.
get
(
i
-
1
)
)
;
}
jsonPanels
.
put
(
0
jsonPanelConfig
)
;
}
if
(
(
isPhone
&
&
positionOnPhones
=
=
Position
.
BACK
)
|
|
(
isTablet
&
&
positionOnTablets
=
=
Position
.
BACK
)
)
{
jsonPanels
.
put
(
jsonPanelConfig
)
;
}
}
private
static
JSONArray
combineHistoryAndSyncPanels
(
Context
context
JSONArray
jsonPanels
)
throws
JSONException
{
EnumSet
<
PanelConfig
.
Flags
>
historyFlags
=
null
;
EnumSet
<
PanelConfig
.
Flags
>
syncFlags
=
null
;
int
historyIndex
=
-
1
;
int
syncIndex
=
-
1
;
for
(
int
i
=
0
;
i
<
jsonPanels
.
length
(
)
;
i
+
+
)
{
JSONObject
panelObj
=
jsonPanels
.
getJSONObject
(
i
)
;
final
PanelConfig
panelConfig
=
new
PanelConfig
(
panelObj
)
;
final
PanelType
type
=
panelConfig
.
getType
(
)
;
if
(
type
=
=
PanelType
.
DEPRECATED_HISTORY
)
{
historyIndex
=
i
;
historyFlags
=
panelConfig
.
getFlags
(
)
;
}
else
if
(
type
=
=
PanelType
.
DEPRECATED_REMOTE_TABS
)
{
syncIndex
=
i
;
syncFlags
=
panelConfig
.
getFlags
(
)
;
}
else
if
(
type
=
=
PanelType
.
COMBINED_HISTORY
)
{
return
jsonPanels
;
}
}
if
(
historyIndex
=
=
-
1
|
|
syncIndex
=
=
-
1
)
{
throw
new
IllegalArgumentException
(
"
Expected
both
History
and
Sync
panels
to
be
present
prior
to
Combined
History
.
"
)
;
}
PanelConfig
newPanel
;
int
replaceIndex
;
int
removeIndex
;
if
(
historyFlags
.
contains
(
PanelConfig
.
Flags
.
DISABLED_PANEL
)
&
&
!
syncFlags
.
contains
(
PanelConfig
.
Flags
.
DISABLED_PANEL
)
)
{
replaceIndex
=
syncIndex
;
removeIndex
=
historyIndex
;
newPanel
=
createBuiltinPanelConfig
(
context
PanelType
.
COMBINED_HISTORY
syncFlags
)
;
}
else
{
replaceIndex
=
historyIndex
;
removeIndex
=
syncIndex
;
newPanel
=
createBuiltinPanelConfig
(
context
PanelType
.
COMBINED_HISTORY
historyFlags
)
;
}
final
JSONArray
newArray
=
new
JSONArray
(
)
;
for
(
int
i
=
0
;
i
<
jsonPanels
.
length
(
)
;
i
+
+
)
{
if
(
i
=
=
replaceIndex
)
{
newArray
.
put
(
newPanel
.
toJSON
(
)
)
;
}
else
if
(
i
=
=
removeIndex
)
{
continue
;
}
else
{
newArray
.
put
(
jsonPanels
.
get
(
i
)
)
;
}
}
return
newArray
;
}
private
static
void
ensureDefaultPanelForV5
(
Context
context
JSONArray
jsonPanels
)
throws
JSONException
{
int
historyIndex
=
-
1
;
for
(
int
i
=
0
;
i
<
jsonPanels
.
length
(
)
;
i
+
+
)
{
final
PanelConfig
panelConfig
=
new
PanelConfig
(
jsonPanels
.
getJSONObject
(
i
)
)
;
if
(
panelConfig
.
isDefault
(
)
)
{
return
;
}
if
(
panelConfig
.
getType
(
)
=
=
PanelType
.
COMBINED_HISTORY
)
{
historyIndex
=
i
;
}
}
final
PanelConfig
historyPanelConfig
=
createBuiltinPanelConfig
(
context
PanelType
.
COMBINED_HISTORY
EnumSet
.
of
(
PanelConfig
.
Flags
.
DEFAULT_PANEL
)
)
;
jsonPanels
.
put
(
historyIndex
historyPanelConfig
.
toJSON
(
)
)
;
}
private
static
boolean
readingListPanelExists
(
JSONArray
jsonPanels
)
{
final
int
count
=
jsonPanels
.
length
(
)
;
for
(
int
i
=
0
;
i
<
count
;
i
+
+
)
{
try
{
final
JSONObject
jsonPanelConfig
=
jsonPanels
.
getJSONObject
(
i
)
;
final
PanelConfig
panelConfig
=
new
PanelConfig
(
jsonPanelConfig
)
;
if
(
panelConfig
.
getType
(
)
=
=
PanelType
.
READING_LIST
)
{
return
true
;
}
}
catch
(
Exception
e
)
{
Log
.
e
(
LOGTAG
"
Exception
loading
PanelConfig
from
JSON
"
e
)
;
}
}
return
false
;
}
private
static
synchronized
JSONArray
maybePerformMigration
(
Context
context
String
jsonString
)
throws
JSONException
{
if
(
sMigrationDone
)
{
final
JSONObject
json
=
new
JSONObject
(
jsonString
)
;
return
json
.
getJSONArray
(
JSON_KEY_PANELS
)
;
}
sMigrationDone
=
true
;
JSONArray
jsonPanels
;
final
int
version
;
final
SharedPreferences
prefs
=
GeckoSharedPrefs
.
forProfile
(
context
)
;
if
(
prefs
.
contains
(
PREFS_CONFIG_KEY_OLD
)
)
{
jsonPanels
=
new
JSONArray
(
jsonString
)
;
version
=
0
;
}
else
{
final
JSONObject
json
=
new
JSONObject
(
jsonString
)
;
jsonPanels
=
json
.
getJSONArray
(
JSON_KEY_PANELS
)
;
version
=
json
.
getInt
(
JSON_KEY_VERSION
)
;
}
if
(
version
=
=
VERSION
)
{
return
jsonPanels
;
}
Log
.
d
(
LOGTAG
"
Performing
migration
"
)
;
final
SharedPreferences
.
Editor
prefsEditor
=
prefs
.
edit
(
)
;
for
(
int
v
=
version
+
1
;
v
<
=
VERSION
;
v
+
+
)
{
Log
.
d
(
LOGTAG
"
Migrating
to
version
=
"
+
v
)
;
switch
(
v
)
{
case
1
:
addBuiltinPanelConfig
(
context
jsonPanels
PanelType
.
RECENT_TABS
Position
.
FRONT
Position
.
BACK
)
;
prefsEditor
.
remove
(
PREFS_CONFIG_KEY_OLD
)
;
break
;
case
2
:
addBuiltinPanelConfig
(
context
jsonPanels
PanelType
.
DEPRECATED_REMOTE_TABS
Position
.
FRONT
Position
.
BACK
)
;
break
;
case
3
:
if
(
!
readingListPanelExists
(
jsonPanels
)
)
{
addBuiltinPanelConfig
(
context
jsonPanels
PanelType
.
READING_LIST
Position
.
BACK
Position
.
BACK
)
;
}
break
;
case
4
:
jsonPanels
=
combineHistoryAndSyncPanels
(
context
jsonPanels
)
;
break
;
case
5
:
ensureDefaultPanelForV5
(
context
jsonPanels
)
;
break
;
}
}
final
JSONObject
newJson
=
new
JSONObject
(
)
;
newJson
.
put
(
JSON_KEY_PANELS
jsonPanels
)
;
newJson
.
put
(
JSON_KEY_VERSION
VERSION
)
;
prefsEditor
.
putString
(
PREFS_CONFIG_KEY
newJson
.
toString
(
)
)
;
prefsEditor
.
apply
(
)
;
return
jsonPanels
;
}
private
State
loadConfigFromString
(
String
jsonString
)
{
final
JSONArray
jsonPanelConfigs
;
try
{
jsonPanelConfigs
=
maybePerformMigration
(
mContext
jsonString
)
;
updatePrefsFromConfig
(
jsonPanelConfigs
)
;
}
catch
(
JSONException
e
)
{
Log
.
e
(
LOGTAG
"
Error
loading
the
list
of
home
panels
from
JSON
prefs
"
e
)
;
return
loadDefaultConfig
(
)
;
}
final
ArrayList
<
PanelConfig
>
panelConfigs
=
new
ArrayList
<
PanelConfig
>
(
)
;
final
int
count
=
jsonPanelConfigs
.
length
(
)
;
for
(
int
i
=
0
;
i
<
count
;
i
+
+
)
{
try
{
final
JSONObject
jsonPanelConfig
=
jsonPanelConfigs
.
getJSONObject
(
i
)
;
final
PanelConfig
panelConfig
=
new
PanelConfig
(
jsonPanelConfig
)
;
panelConfigs
.
add
(
panelConfig
)
;
}
catch
(
Exception
e
)
{
Log
.
e
(
LOGTAG
"
Exception
loading
PanelConfig
from
JSON
"
e
)
;
}
}
return
new
State
(
panelConfigs
false
)
;
}
Override
public
State
load
(
)
{
final
SharedPreferences
prefs
=
getSharedPreferences
(
)
;
final
String
key
=
(
prefs
.
contains
(
PREFS_CONFIG_KEY_OLD
)
?
PREFS_CONFIG_KEY_OLD
:
PREFS_CONFIG_KEY
)
;
final
String
jsonString
=
prefs
.
getString
(
key
null
)
;
final
State
configState
;
if
(
TextUtils
.
isEmpty
(
jsonString
)
)
{
configState
=
loadDefaultConfig
(
)
;
}
else
{
configState
=
loadConfigFromString
(
jsonString
)
;
}
return
configState
;
}
Override
public
void
save
(
State
configState
)
{
final
SharedPreferences
prefs
=
getSharedPreferences
(
)
;
final
SharedPreferences
.
Editor
editor
=
prefs
.
edit
(
)
;
if
(
!
configState
.
isDefault
(
)
)
{
final
JSONArray
jsonPanelConfigs
=
new
JSONArray
(
)
;
for
(
PanelConfig
panelConfig
:
configState
)
{
try
{
final
JSONObject
jsonPanelConfig
=
panelConfig
.
toJSON
(
)
;
jsonPanelConfigs
.
put
(
jsonPanelConfig
)
;
}
catch
(
Exception
e
)
{
Log
.
e
(
LOGTAG
"
Exception
converting
PanelConfig
to
JSON
"
e
)
;
}
}
try
{
final
JSONObject
json
=
new
JSONObject
(
)
;
json
.
put
(
JSON_KEY_PANELS
jsonPanelConfigs
)
;
json
.
put
(
JSON_KEY_VERSION
VERSION
)
;
editor
.
putString
(
PREFS_CONFIG_KEY
json
.
toString
(
)
)
;
}
catch
(
JSONException
e
)
{
Log
.
e
(
LOGTAG
"
Exception
saving
PanelConfig
state
"
e
)
;
}
}
editor
.
putString
(
PREFS_LOCALE_KEY
Locale
.
getDefault
(
)
.
toString
(
)
)
;
editor
.
apply
(
)
;
sendReloadBroadcast
(
)
;
}
Override
public
String
getLocale
(
)
{
final
SharedPreferences
prefs
=
getSharedPreferences
(
)
;
String
locale
=
prefs
.
getString
(
PREFS_LOCALE_KEY
null
)
;
if
(
locale
=
=
null
)
{
final
String
currentLocale
=
Locale
.
getDefault
(
)
.
toString
(
)
;
final
SharedPreferences
.
Editor
editor
=
prefs
.
edit
(
)
;
editor
.
putString
(
PREFS_LOCALE_KEY
currentLocale
)
;
editor
.
apply
(
)
;
if
(
!
prefs
.
contains
(
PREFS_CONFIG_KEY
)
)
{
locale
=
currentLocale
;
}
}
return
locale
;
}
Override
public
void
setOnReloadListener
(
OnReloadListener
listener
)
{
if
(
mReloadListener
!
=
null
)
{
unregisterReloadReceiver
(
)
;
mReloadBroadcastReceiver
=
null
;
}
mReloadListener
=
listener
;
if
(
mReloadListener
!
=
null
)
{
mReloadBroadcastReceiver
=
new
ReloadBroadcastReceiver
(
)
;
registerReloadReceiver
(
)
;
}
}
private
void
updatePrefsFromConfig
(
JSONArray
panelsArray
)
{
final
SharedPreferences
prefs
=
GeckoSharedPrefs
.
forProfile
(
mContext
)
;
if
(
!
prefs
.
contains
(
HomeConfig
.
PREF_KEY_BOOKMARKS_PANEL_ENABLED
)
|
|
!
prefs
.
contains
(
HomeConfig
.
PREF_KEY_HISTORY_PANEL_ENABLED
)
)
{
final
String
bookmarkType
=
PanelType
.
BOOKMARKS
.
toString
(
)
;
final
String
historyType
=
PanelType
.
COMBINED_HISTORY
.
toString
(
)
;
try
{
for
(
int
i
=
0
;
i
<
panelsArray
.
length
(
)
;
i
+
+
)
{
final
JSONObject
panelObj
=
panelsArray
.
getJSONObject
(
i
)
;
final
String
panelType
=
panelObj
.
optString
(
PanelConfig
.
JSON_KEY_TYPE
null
)
;
if
(
panelType
=
=
null
)
{
break
;
}
final
boolean
isDisabled
=
panelObj
.
optBoolean
(
PanelConfig
.
JSON_KEY_DISABLED
false
)
;
if
(
bookmarkType
.
equals
(
panelType
)
)
{
prefs
.
edit
(
)
.
putBoolean
(
HomeConfig
.
PREF_KEY_BOOKMARKS_PANEL_ENABLED
!
isDisabled
)
.
apply
(
)
;
}
else
if
(
historyType
.
equals
(
panelType
)
)
{
prefs
.
edit
(
)
.
putBoolean
(
HomeConfig
.
PREF_KEY_HISTORY_PANEL_ENABLED
!
isDisabled
)
.
apply
(
)
;
}
}
}
catch
(
JSONException
e
)
{
Log
.
e
(
LOGTAG
"
Error
fetching
panel
from
config
to
update
prefs
"
)
;
}
}
}
private
void
sendReloadBroadcast
(
)
{
final
LocalBroadcastManager
lbm
=
LocalBroadcastManager
.
getInstance
(
mContext
)
;
final
Intent
reloadIntent
=
new
Intent
(
RELOAD_BROADCAST
)
;
lbm
.
sendBroadcast
(
reloadIntent
)
;
}
private
void
registerReloadReceiver
(
)
{
final
LocalBroadcastManager
lbm
=
LocalBroadcastManager
.
getInstance
(
mContext
)
;
lbm
.
registerReceiver
(
mReloadBroadcastReceiver
new
IntentFilter
(
RELOAD_BROADCAST
)
)
;
}
private
void
unregisterReloadReceiver
(
)
{
final
LocalBroadcastManager
lbm
=
LocalBroadcastManager
.
getInstance
(
mContext
)
;
lbm
.
unregisterReceiver
(
mReloadBroadcastReceiver
)
;
}
private
class
ReloadBroadcastReceiver
extends
BroadcastReceiver
{
Override
public
void
onReceive
(
Context
context
Intent
intent
)
{
mReloadListener
.
onReload
(
)
;
}
}
}
