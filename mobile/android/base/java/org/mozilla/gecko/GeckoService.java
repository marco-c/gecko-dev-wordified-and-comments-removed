package
org
.
mozilla
.
gecko
;
import
android
.
app
.
AlarmManager
;
import
android
.
app
.
IntentService
;
import
android
.
app
.
PendingIntent
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
util
.
NativeEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
NativeJSObject
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
public
class
GeckoService
extends
IntentService
{
private
static
final
String
LOGTAG
=
"
GeckoService
"
;
private
static
final
boolean
DEBUG
=
false
;
private
static
class
EventListener
implements
NativeEventListener
{
private
PendingIntent
getIntentForAction
(
final
Context
context
final
String
action
)
{
final
Intent
intent
=
new
Intent
(
action
null
context
GeckoService
.
class
)
;
return
PendingIntent
.
getService
(
context
0
intent
PendingIntent
.
FLAG_CANCEL_CURRENT
)
;
}
Override
public
void
handleMessage
(
final
String
event
final
NativeJSObject
message
final
EventCallback
callback
)
{
final
Context
context
=
GeckoAppShell
.
getApplicationContext
(
)
;
switch
(
event
)
{
case
"
Gecko
:
ScheduleRun
"
:
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Scheduling
"
+
message
.
getString
(
"
action
"
)
+
"
"
+
message
.
getInt
(
"
interval
"
)
+
"
ms
"
)
;
}
final
AlarmManager
am
=
(
AlarmManager
)
context
.
getSystemService
(
Context
.
ALARM_SERVICE
)
;
am
.
setInexactRepeating
(
AlarmManager
.
ELAPSED_REALTIME
message
.
getInt
(
"
trigger
"
)
message
.
getInt
(
"
interval
"
)
getIntentForAction
(
context
message
.
getString
(
"
action
"
)
)
)
;
break
;
default
:
throw
new
UnsupportedOperationException
(
event
)
;
}
}
}
private
static
final
EventListener
EVENT_LISTENER
=
new
EventListener
(
)
;
public
GeckoService
(
)
{
super
(
"
GeckoService
"
)
;
}
public
static
void
register
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Registered
listener
"
)
;
}
EventDispatcher
.
getInstance
(
)
.
registerGeckoThreadListener
(
EVENT_LISTENER
"
Gecko
:
ScheduleRun
"
)
;
}
public
static
void
unregister
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Unregistered
listener
"
)
;
}
EventDispatcher
.
getInstance
(
)
.
unregisterGeckoThreadListener
(
EVENT_LISTENER
"
Gecko
:
ScheduleRun
"
)
;
}
Override
public
void
onCreate
(
)
{
GeckoAppShell
.
ensureCrashHandling
(
)
;
GeckoAppShell
.
setApplicationContext
(
getApplicationContext
(
)
)
;
super
.
onCreate
(
)
;
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Created
"
)
;
}
GeckoThread
.
ensureInit
(
null
null
)
;
GeckoThread
.
launch
(
)
;
}
Override
public
void
onDestroy
(
)
{
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Destroyed
"
)
;
}
super
.
onDestroy
(
)
;
}
Override
protected
void
onHandleIntent
(
final
Intent
intent
)
{
if
(
intent
=
=
null
)
{
return
;
}
if
(
DEBUG
)
{
Log
.
d
(
LOGTAG
"
Handling
"
+
intent
.
getAction
(
)
)
;
}
switch
(
intent
.
getAction
(
)
)
{
case
"
update
-
addons
"
:
break
;
default
:
Log
.
w
(
LOGTAG
"
Unknown
request
:
"
+
intent
)
;
}
}
}
