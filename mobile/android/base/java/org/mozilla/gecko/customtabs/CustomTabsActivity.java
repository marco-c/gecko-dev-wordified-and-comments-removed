package
org
.
mozilla
.
gecko
.
customtabs
;
import
android
.
app
.
PendingIntent
;
import
android
.
content
.
Intent
;
import
android
.
content
.
pm
.
PackageManager
;
import
android
.
content
.
pm
.
ResolveInfo
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
Color
;
import
android
.
graphics
.
drawable
.
BitmapDrawable
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
ColorInt
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
StyleRes
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
android
.
support
.
v4
.
util
.
SparseArrayCompat
;
import
android
.
support
.
v4
.
view
.
MenuItemCompat
;
import
android
.
support
.
v7
.
app
.
ActionBar
;
import
android
.
support
.
v7
.
widget
.
Toolbar
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
Log
;
import
android
.
view
.
Menu
;
import
android
.
view
.
MenuInflater
;
import
android
.
view
.
MenuItem
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewGroup
.
LayoutParams
;
import
android
.
widget
.
ImageButton
;
import
android
.
widget
.
ProgressBar
;
import
org
.
mozilla
.
gecko
.
GeckoApp
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Tab
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
org
.
mozilla
.
gecko
.
menu
.
GeckoMenu
;
import
org
.
mozilla
.
gecko
.
menu
.
GeckoMenuInflater
;
import
org
.
mozilla
.
gecko
.
util
.
ColorUtil
;
import
org
.
mozilla
.
gecko
.
widget
.
GeckoPopupMenu
;
import
java
.
util
.
List
;
import
static
android
.
support
.
customtabs
.
CustomTabsIntent
.
EXTRA_TOOLBAR_COLOR
;
public
class
CustomTabsActivity
extends
GeckoApp
implements
Tabs
.
OnTabsChangedListener
{
private
static
final
String
LOGTAG
=
"
CustomTabsActivity
"
;
private
static
final
String
SAVED_TOOLBAR_COLOR
=
"
SavedToolbarColor
"
;
ColorInt
private
static
final
int
DEFAULT_ACTION_BAR_COLOR
=
0xFF363b40
;
private
final
SparseArrayCompat
<
PendingIntent
>
menuItemsIntent
=
new
SparseArrayCompat
<
>
(
)
;
private
GeckoPopupMenu
popupMenu
;
private
ActionBarPresenter
actionBarPresenter
;
private
ProgressBar
mProgressView
;
private
boolean
usingCustomAnimation
=
false
;
ColorInt
private
int
toolbarColor
=
DEFAULT_ACTION_BAR_COLOR
;
Override
public
void
onCreate
(
Bundle
savedInstanceState
)
{
super
.
onCreate
(
savedInstanceState
)
;
if
(
savedInstanceState
!
=
null
)
{
toolbarColor
=
savedInstanceState
.
getInt
(
SAVED_TOOLBAR_COLOR
DEFAULT_ACTION_BAR_COLOR
)
;
}
else
{
toolbarColor
=
getIntent
(
)
.
getIntExtra
(
EXTRA_TOOLBAR_COLOR
DEFAULT_ACTION_BAR_COLOR
)
;
}
toolbarColor
=
0xFF000000
|
toolbarColor
;
setThemeFromToolbarColor
(
)
;
mProgressView
=
(
ProgressBar
)
findViewById
(
R
.
id
.
page_progress
)
;
final
Toolbar
toolbar
=
(
Toolbar
)
findViewById
(
R
.
id
.
actionbar
)
;
setSupportActionBar
(
toolbar
)
;
final
ActionBar
actionBar
=
getSupportActionBar
(
)
;
bindNavigationCallback
(
toolbar
)
;
actionBarPresenter
=
new
ActionBarPresenter
(
actionBar
)
;
actionBarPresenter
.
displayUrlOnly
(
getIntent
(
)
.
getDataString
(
)
)
;
actionBarPresenter
.
setBackgroundColor
(
toolbarColor
getWindow
(
)
)
;
actionBar
.
setDisplayHomeAsUpEnabled
(
true
)
;
Tabs
.
registerOnTabsChangedListener
(
this
)
;
}
private
void
setThemeFromToolbarColor
(
)
{
StyleRes
int
styleRes
=
(
ColorUtil
.
getReadableTextColor
(
toolbarColor
)
=
=
Color
.
BLACK
)
?
R
.
style
.
GeckoCustomTabs_Light
:
R
.
style
.
GeckoCustomTabs
;
setTheme
(
styleRes
)
;
}
Override
public
String
getPackageName
(
)
{
if
(
usingCustomAnimation
)
{
return
IntentUtil
.
getAnimationPackageName
(
getIntent
(
)
)
;
}
else
{
return
super
.
getPackageName
(
)
;
}
}
Override
public
void
finish
(
)
{
super
.
finish
(
)
;
if
(
IntentUtil
.
hasExitAnimation
(
getIntent
(
)
)
)
{
usingCustomAnimation
=
true
;
overridePendingTransition
(
IntentUtil
.
getEnterAnimationRes
(
getIntent
(
)
)
IntentUtil
.
getExitAnimationRes
(
getIntent
(
)
)
)
;
usingCustomAnimation
=
false
;
}
}
Override
protected
int
getNewTabFlags
(
)
{
return
Tabs
.
LOADURL_CUSTOMTAB
|
super
.
getNewTabFlags
(
)
;
}
Override
public
void
onDestroy
(
)
{
super
.
onDestroy
(
)
;
Tabs
.
unregisterOnTabsChangedListener
(
this
)
;
}
Override
public
int
getLayout
(
)
{
return
R
.
layout
.
customtabs_activity
;
}
Override
protected
void
onDone
(
)
{
finish
(
)
;
}
Override
public
void
onTabChanged
(
Tab
tab
Tabs
.
TabEvents
msg
String
data
)
{
if
(
!
Tabs
.
getInstance
(
)
.
isSelectedTab
(
tab
)
)
{
return
;
}
if
(
msg
=
=
Tabs
.
TabEvents
.
START
|
|
msg
=
=
Tabs
.
TabEvents
.
STOP
|
|
msg
=
=
Tabs
.
TabEvents
.
ADDED
|
|
msg
=
=
Tabs
.
TabEvents
.
LOAD_ERROR
|
|
msg
=
=
Tabs
.
TabEvents
.
LOADED
|
|
msg
=
=
Tabs
.
TabEvents
.
LOCATION_CHANGE
)
{
updateProgress
(
(
tab
.
getState
(
)
=
=
Tab
.
STATE_LOADING
)
tab
.
getLoadProgress
(
)
)
;
}
if
(
msg
=
=
Tabs
.
TabEvents
.
LOCATION_CHANGE
|
|
msg
=
=
Tabs
.
TabEvents
.
SECURITY_CHANGE
|
|
msg
=
=
Tabs
.
TabEvents
.
TITLE
)
{
actionBarPresenter
.
update
(
tab
)
;
}
updateMenuItemForward
(
)
;
}
Override
protected
void
onSaveInstanceState
(
Bundle
outState
)
{
super
.
onSaveInstanceState
(
outState
)
;
outState
.
putInt
(
SAVED_TOOLBAR_COLOR
toolbarColor
)
;
}
Override
public
void
onResume
(
)
{
if
(
lastSelectedTabId
>
=
0
)
{
final
Tabs
tabs
=
Tabs
.
getInstance
(
)
;
final
Tab
tab
=
tabs
.
getTab
(
lastSelectedTabId
)
;
if
(
tab
=
=
null
)
{
finish
(
)
;
}
}
super
.
onResume
(
)
;
}
Override
public
boolean
onCreatePanelMenu
(
final
int
id
final
Menu
menu
)
{
insertActionButton
(
menu
getIntent
(
)
)
;
popupMenu
=
createCustomPopupMenu
(
)
;
final
ImageButton
btn
=
new
ImageButton
(
getContext
(
)
null
0
R
.
style
.
Widget_MenuButtonCustomTabs
)
;
btn
.
setLayoutParams
(
new
LayoutParams
(
LayoutParams
.
MATCH_PARENT
LayoutParams
.
MATCH_PARENT
)
)
;
btn
.
setOnClickListener
(
new
View
.
OnClickListener
(
)
{
Override
public
void
onClick
(
View
anchor
)
{
popupMenu
.
setAnchor
(
anchor
)
;
popupMenu
.
show
(
)
;
}
}
)
;
final
MenuItem
item
=
menu
.
add
(
Menu
.
NONE
R
.
id
.
menu
Menu
.
NONE
"
Menu
Button
"
)
;
item
.
setActionView
(
btn
)
;
MenuItemCompat
.
setShowAsAction
(
item
MenuItemCompat
.
SHOW_AS_ACTION_ALWAYS
)
;
updateMenuItemForward
(
)
;
return
true
;
}
Override
public
boolean
onOptionsItemSelected
(
MenuItem
item
)
{
switch
(
item
.
getItemId
(
)
)
{
case
android
.
R
.
id
.
home
:
finish
(
)
;
return
true
;
case
R
.
id
.
action_button
:
onActionButtonClicked
(
)
;
return
true
;
case
R
.
id
.
share
:
onShareClicked
(
)
;
return
true
;
case
R
.
id
.
custom_tabs_menu_forward
:
onForwardClicked
(
)
;
return
true
;
case
R
.
id
.
custom_tabs_menu_reload
:
onReloadClicked
(
)
;
return
true
;
case
R
.
id
.
custom_tabs_menu_open_in
:
onOpenInClicked
(
)
;
return
true
;
}
final
PendingIntent
intent
=
menuItemsIntent
.
get
(
item
.
getItemId
(
)
)
;
if
(
intent
!
=
null
)
{
performPendingIntent
(
intent
)
;
return
true
;
}
return
super
.
onOptionsItemSelected
(
item
)
;
}
VisibleForTesting
MenuItem
insertActionButton
(
Menu
menu
Intent
intent
)
{
if
(
!
IntentUtil
.
hasActionButton
(
intent
)
)
{
return
null
;
}
MenuItem
item
=
menu
.
add
(
Menu
.
NONE
R
.
id
.
action_button
Menu
.
NONE
IntentUtil
.
getActionButtonDescription
(
intent
)
)
;
Bitmap
bitmap
=
IntentUtil
.
getActionButtonIcon
(
intent
)
;
item
.
setIcon
(
new
BitmapDrawable
(
getResources
(
)
bitmap
)
)
;
MenuItemCompat
.
setShowAsAction
(
item
MenuItemCompat
.
SHOW_AS_ACTION_ALWAYS
)
;
return
item
;
}
private
void
bindNavigationCallback
(
NonNull
final
Toolbar
toolbar
)
{
toolbar
.
setNavigationOnClickListener
(
new
View
.
OnClickListener
(
)
{
Override
public
void
onClick
(
View
v
)
{
final
Tabs
tabs
=
Tabs
.
getInstance
(
)
;
final
Tab
tab
=
tabs
.
getSelectedTab
(
)
;
tabs
.
closeTab
(
tab
)
;
finish
(
)
;
}
}
)
;
}
private
void
performPendingIntent
(
NonNull
PendingIntent
pendingIntent
)
{
final
Intent
additional
=
new
Intent
(
)
;
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
additional
.
setData
(
Uri
.
parse
(
tab
.
getURL
(
)
)
)
;
try
{
pendingIntent
.
send
(
this
0
additional
)
;
}
catch
(
PendingIntent
.
CanceledException
e
)
{
Log
.
w
(
LOGTAG
"
Performing
a
canceled
pending
intent
"
e
)
;
}
}
private
GeckoPopupMenu
createCustomPopupMenu
(
)
{
final
GeckoPopupMenu
popupMenu
=
new
GeckoPopupMenu
(
this
)
;
final
GeckoMenu
geckoMenu
=
popupMenu
.
getMenu
(
)
;
popupMenu
.
setOnMenuItemClickListener
(
new
GeckoPopupMenu
.
OnMenuItemClickListener
(
)
{
Override
public
boolean
onMenuItemClick
(
MenuItem
item
)
{
return
CustomTabsActivity
.
this
.
onMenuItemClick
(
item
)
;
}
}
)
;
final
Intent
intent
=
getIntent
(
)
;
final
List
<
String
>
titles
=
IntentUtil
.
getMenuItemsTitle
(
intent
)
;
final
List
<
PendingIntent
>
intents
=
IntentUtil
.
getMenuItemsPendingIntent
(
intent
)
;
menuItemsIntent
.
clear
(
)
;
for
(
int
i
=
0
;
i
<
titles
.
size
(
)
;
i
+
+
)
{
final
int
menuId
=
Menu
.
FIRST
+
i
;
geckoMenu
.
add
(
Menu
.
NONE
menuId
Menu
.
NONE
titles
.
get
(
i
)
)
;
menuItemsIntent
.
put
(
menuId
intents
.
get
(
i
)
)
;
}
if
(
IntentUtil
.
hasShareItem
(
intent
)
&
&
!
TextUtils
.
isEmpty
(
intent
.
getDataString
(
)
)
)
{
geckoMenu
.
add
(
Menu
.
NONE
R
.
id
.
share
Menu
.
NONE
getString
(
R
.
string
.
share
)
)
;
}
final
MenuInflater
inflater
=
new
GeckoMenuInflater
(
this
)
;
inflater
.
inflate
(
R
.
menu
.
customtabs_menu
geckoMenu
)
;
final
MenuItem
openItem
=
geckoMenu
.
findItem
(
R
.
id
.
custom_tabs_menu_open_in
)
;
if
(
openItem
!
=
null
)
{
final
Intent
browserIntent
=
new
Intent
(
Intent
.
ACTION_VIEW
Uri
.
parse
(
"
http
:
/
/
"
)
)
;
final
ResolveInfo
info
=
getPackageManager
(
)
.
resolveActivity
(
browserIntent
PackageManager
.
MATCH_DEFAULT_ONLY
)
;
final
String
name
=
info
.
loadLabel
(
getPackageManager
(
)
)
.
toString
(
)
;
openItem
.
setTitle
(
getString
(
R
.
string
.
custom_tabs_menu_item_open_in
name
)
)
;
}
geckoMenu
.
addFooterView
(
getLayoutInflater
(
)
.
inflate
(
R
.
layout
.
customtabs_options_menu_footer
geckoMenu
false
)
null
false
)
;
return
popupMenu
;
}
private
void
updateMenuItemForward
(
)
{
if
(
(
popupMenu
=
=
null
)
|
|
(
popupMenu
.
getMenu
(
)
=
=
null
)
|
|
(
popupMenu
.
getMenu
(
)
.
findItem
(
R
.
id
.
custom_tabs_menu_forward
)
=
=
null
)
)
{
return
;
}
final
MenuItem
forwardMenuItem
=
popupMenu
.
getMenu
(
)
.
findItem
(
R
.
id
.
custom_tabs_menu_forward
)
;
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
final
boolean
enabled
=
(
tab
!
=
null
&
&
tab
.
canDoForward
(
)
)
;
forwardMenuItem
.
setEnabled
(
enabled
)
;
}
private
void
updateProgress
(
final
boolean
isLoading
final
int
progress
)
{
if
(
isLoading
)
{
mProgressView
.
setVisibility
(
View
.
VISIBLE
)
;
mProgressView
.
setProgress
(
progress
)
;
}
else
{
mProgressView
.
setVisibility
(
View
.
GONE
)
;
}
}
private
void
onReloadClicked
(
)
{
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
if
(
tab
!
=
null
)
{
tab
.
doReload
(
true
)
;
}
}
private
void
onForwardClicked
(
)
{
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
if
(
(
tab
!
=
null
)
&
&
tab
.
canDoForward
(
)
)
{
tab
.
doForward
(
)
;
}
}
private
void
onOpenInClicked
(
)
{
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
if
(
tab
!
=
null
)
{
final
Intent
intent
=
new
Intent
(
)
;
intent
.
setData
(
Uri
.
parse
(
tab
.
getURL
(
)
)
)
;
intent
.
setAction
(
Intent
.
ACTION_VIEW
)
;
startActivity
(
intent
)
;
}
}
private
void
onActionButtonClicked
(
)
{
PendingIntent
pendingIntent
=
IntentUtil
.
getActionButtonPendingIntent
(
getIntent
(
)
)
;
performPendingIntent
(
pendingIntent
)
;
}
private
void
onShareClicked
(
)
{
final
String
url
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
.
getURL
(
)
;
if
(
!
TextUtils
.
isEmpty
(
url
)
)
{
Intent
shareIntent
=
new
Intent
(
Intent
.
ACTION_SEND
)
;
shareIntent
.
setType
(
"
text
/
plain
"
)
;
shareIntent
.
putExtra
(
Intent
.
EXTRA_TEXT
url
)
;
Intent
chooserIntent
=
Intent
.
createChooser
(
shareIntent
getString
(
R
.
string
.
share_title
)
)
;
chooserIntent
.
setFlags
(
Intent
.
FLAG_ACTIVITY_NEW_TASK
)
;
startActivity
(
chooserIntent
)
;
}
}
}
