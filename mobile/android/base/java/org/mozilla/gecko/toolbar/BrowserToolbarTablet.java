package
org
.
mozilla
.
gecko
.
toolbar
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
animation
.
PropertyAnimator
;
import
org
.
mozilla
.
gecko
.
util
.
ViewUtil
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
drawable
.
Drawable
;
import
android
.
support
.
v4
.
view
.
ViewCompat
;
import
android
.
util
.
AttributeSet
;
class
BrowserToolbarTablet
extends
BrowserToolbarTabletBase
{
private
boolean
backButtonWasEnabledOnStartEditing
;
private
boolean
forwardButtonWasEnabledOnStartEditing
;
public
BrowserToolbarTablet
(
final
Context
context
final
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
forwardButton
.
setEnabled
(
false
)
;
}
Override
public
boolean
isAnimating
(
)
{
return
false
;
}
Override
protected
void
triggerStartEditingTransition
(
final
PropertyAnimator
animator
)
{
showUrlEditLayout
(
)
;
}
Override
protected
void
triggerStopEditingTransition
(
)
{
hideUrlEditLayout
(
)
;
}
Override
public
void
triggerTabsPanelTransition
(
final
PropertyAnimator
animator
final
boolean
areTabsShown
)
{
}
Override
public
void
startEditing
(
final
String
url
final
PropertyAnimator
animator
)
{
backButtonWasEnabledOnStartEditing
=
backButton
.
isEnabled
(
)
;
forwardButtonWasEnabledOnStartEditing
=
forwardButton
.
isEnabled
(
)
;
backButton
.
setEnabled
(
false
)
;
forwardButton
.
setEnabled
(
false
)
;
super
.
startEditing
(
url
animator
)
;
}
Override
public
String
commitEdit
(
)
{
stopEditingNewTablet
(
)
;
return
super
.
commitEdit
(
)
;
}
Override
public
String
cancelEdit
(
)
{
if
(
isEditing
(
)
)
{
stopEditingNewTablet
(
)
;
backButton
.
setEnabled
(
backButtonWasEnabledOnStartEditing
)
;
forwardButton
.
setEnabled
(
forwardButtonWasEnabledOnStartEditing
)
;
}
return
super
.
cancelEdit
(
)
;
}
private
void
stopEditingNewTablet
(
)
{
forwardButton
.
setEnabled
(
true
)
;
}
Override
protected
Drawable
getLWTDefaultStateSetDrawable
(
)
{
return
BrowserToolbar
.
getLightweightThemeDrawable
(
this
getTheme
(
)
R
.
color
.
toolbar_grey
)
;
}
}
