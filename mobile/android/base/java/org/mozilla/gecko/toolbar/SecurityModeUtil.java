package
org
.
mozilla
.
gecko
.
toolbar
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
text
.
TextUtils
;
import
org
.
mozilla
.
gecko
.
AboutPages
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
.
MixedMode
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
.
SecurityMode
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
.
TrackingMode
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
SecurityModeUtil
{
public
enum
IconType
{
UNKNOWN
(
0
)
DEFAULT
(
0
)
SEARCH
(
6
)
LOCK_SECURE
(
1
)
LOCK_WARNING
(
-
1
)
LOCK_INSECURE
(
3
)
WARNING
(
2
)
TRACKING_CONTENT_BLOCKED
(
4
)
TRACKING_CONTENT_LOADED
(
5
)
;
private
final
int
imageLevel
;
private
IconType
(
int
imageLevel
)
{
this
.
imageLevel
=
imageLevel
;
}
public
int
getImageLevel
(
)
{
return
imageLevel
;
}
}
private
static
final
Map
<
SecurityMode
IconType
>
securityModeMap
;
static
{
securityModeMap
=
new
HashMap
<
>
(
)
;
securityModeMap
.
put
(
SecurityMode
.
UNKNOWN
IconType
.
UNKNOWN
)
;
securityModeMap
.
put
(
SecurityMode
.
IDENTIFIED
IconType
.
LOCK_SECURE
)
;
securityModeMap
.
put
(
SecurityMode
.
VERIFIED
IconType
.
LOCK_SECURE
)
;
securityModeMap
.
put
(
SecurityMode
.
CHROMEUI
IconType
.
UNKNOWN
)
;
}
public
static
IconType
resolve
(
Nullable
final
SiteIdentity
identity
)
{
return
resolve
(
identity
null
)
;
}
public
static
IconType
resolve
(
Nullable
final
SiteIdentity
identity
Nullable
final
String
url
)
{
if
(
!
TextUtils
.
isEmpty
(
url
)
&
&
AboutPages
.
isTitlelessAboutPage
(
url
)
)
{
return
IconType
.
SEARCH
;
}
if
(
identity
=
=
null
)
{
return
IconType
.
UNKNOWN
;
}
final
SecurityMode
securityMode
=
identity
.
getSecurityMode
(
)
;
final
MixedMode
activeMixedMode
=
identity
.
getMixedModeActive
(
)
;
final
MixedMode
displayMixedMode
=
identity
.
getMixedModeDisplay
(
)
;
final
TrackingMode
trackingMode
=
identity
.
getTrackingMode
(
)
;
final
boolean
securityException
=
identity
.
isSecurityException
(
)
;
if
(
securityException
)
{
return
IconType
.
WARNING
;
}
else
if
(
trackingMode
=
=
TrackingMode
.
TRACKING_CONTENT_LOADED
)
{
return
IconType
.
TRACKING_CONTENT_LOADED
;
}
else
if
(
trackingMode
=
=
TrackingMode
.
TRACKING_CONTENT_BLOCKED
)
{
return
IconType
.
TRACKING_CONTENT_BLOCKED
;
}
else
if
(
activeMixedMode
=
=
MixedMode
.
LOADED
)
{
return
IconType
.
LOCK_INSECURE
;
}
else
if
(
displayMixedMode
=
=
MixedMode
.
LOADED
)
{
return
IconType
.
WARNING
;
}
if
(
securityMode
=
=
SiteIdentity
.
SecurityMode
.
CHROMEUI
)
{
return
IconType
.
DEFAULT
;
}
return
securityModeMap
.
containsKey
(
securityMode
)
?
securityModeMap
.
get
(
securityMode
)
:
IconType
.
UNKNOWN
;
}
public
static
boolean
isTrackingProtectionEnabled
(
final
Nullable
SiteIdentity
identity
)
{
final
TrackingMode
trackingMode
=
(
identity
=
=
null
)
?
TrackingMode
.
UNKNOWN
:
identity
.
getTrackingMode
(
)
;
return
(
trackingMode
=
=
TrackingMode
.
TRACKING_CONTENT_BLOCKED
)
;
}
}
