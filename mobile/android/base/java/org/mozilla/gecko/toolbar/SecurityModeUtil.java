package
org
.
mozilla
.
gecko
.
toolbar
;
import
android
.
support
.
annotation
.
Nullable
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
.
MixedMode
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
.
SecurityMode
;
import
org
.
mozilla
.
gecko
.
SiteIdentity
.
TrackingMode
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
SecurityModeUtil
{
private
static
final
Map
<
SecurityMode
Mode
>
securityModeMap
;
static
{
securityModeMap
=
new
HashMap
<
>
(
)
;
securityModeMap
.
put
(
SecurityMode
.
UNKNOWN
Mode
.
UNKNOWN
)
;
securityModeMap
.
put
(
SecurityMode
.
IDENTIFIED
Mode
.
LOCK_SECURE
)
;
securityModeMap
.
put
(
SecurityMode
.
VERIFIED
Mode
.
LOCK_SECURE
)
;
securityModeMap
.
put
(
SecurityMode
.
CHROMEUI
Mode
.
UNKNOWN
)
;
}
public
static
Mode
resolve
(
final
Nullable
SiteIdentity
identity
)
{
if
(
identity
=
=
null
)
{
return
Mode
.
UNKNOWN
;
}
final
SecurityMode
securityMode
=
identity
.
getSecurityMode
(
)
;
final
MixedMode
activeMixedMode
=
identity
.
getMixedModeActive
(
)
;
final
MixedMode
displayMixedMode
=
identity
.
getMixedModeDisplay
(
)
;
final
TrackingMode
trackingMode
=
identity
.
getTrackingMode
(
)
;
final
boolean
securityException
=
identity
.
isSecurityException
(
)
;
if
(
securityMode
=
=
SiteIdentity
.
SecurityMode
.
CHROMEUI
)
{
return
Mode
.
UNKNOWN
;
}
if
(
securityException
)
{
return
Mode
.
MIXED_MODE
;
}
else
if
(
trackingMode
=
=
TrackingMode
.
TRACKING_CONTENT_LOADED
)
{
return
Mode
.
TRACKING_CONTENT_LOADED
;
}
else
if
(
trackingMode
=
=
TrackingMode
.
TRACKING_CONTENT_BLOCKED
)
{
return
Mode
.
TRACKING_CONTENT_BLOCKED
;
}
else
if
(
activeMixedMode
=
=
MixedMode
.
LOADED
)
{
return
Mode
.
MIXED_MODE
;
}
else
if
(
displayMixedMode
=
=
MixedMode
.
LOADED
)
{
return
Mode
.
WARNING
;
}
return
securityModeMap
.
containsKey
(
securityMode
)
?
securityModeMap
.
get
(
securityMode
)
:
Mode
.
UNKNOWN
;
}
public
enum
Mode
{
UNKNOWN
LOCK_SECURE
WARNING
MIXED_MODE
TRACKING_CONTENT_BLOCKED
TRACKING_CONTENT_LOADED
}
}
