package
org
.
mozilla
.
gecko
.
icons
;
import
android
.
graphics
.
Bitmap
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
Base64
;
import
android
.
util
.
Base64OutputStream
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
AboutPages
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
IOUtils
;
import
org
.
mozilla
.
gecko
.
util
.
StringUtils
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
IOException
;
import
java
.
util
.
HashSet
;
public
class
IconsHelper
{
private
static
final
String
LOGTAG
=
"
Gecko
/
IconsHelper
"
;
private
static
final
HashSet
<
String
>
sDecodableMimeTypes
=
new
HashSet
<
>
(
)
;
private
static
final
HashSet
<
String
>
sContainerMimeTypes
=
new
HashSet
<
>
(
)
;
static
{
sContainerMimeTypes
.
add
(
"
image
/
vnd
.
microsoft
.
icon
"
)
;
sContainerMimeTypes
.
add
(
"
image
/
ico
"
)
;
sContainerMimeTypes
.
add
(
"
image
/
icon
"
)
;
sContainerMimeTypes
.
add
(
"
image
/
x
-
icon
"
)
;
sContainerMimeTypes
.
add
(
"
text
/
ico
"
)
;
sContainerMimeTypes
.
add
(
"
application
/
ico
"
)
;
sDecodableMimeTypes
.
addAll
(
sContainerMimeTypes
)
;
sDecodableMimeTypes
.
add
(
"
image
/
png
"
)
;
sDecodableMimeTypes
.
add
(
"
application
/
png
"
)
;
sDecodableMimeTypes
.
add
(
"
application
/
x
-
png
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
gif
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
jpeg
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
jpg
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
pipeg
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
vnd
.
swiftview
-
jpeg
"
)
;
sDecodableMimeTypes
.
add
(
"
application
/
jpg
"
)
;
sDecodableMimeTypes
.
add
(
"
application
/
x
-
jpg
"
)
;
sDecodableMimeTypes
.
add
(
"
application
/
bmp
"
)
;
sDecodableMimeTypes
.
add
(
"
application
/
x
-
bmp
"
)
;
sDecodableMimeTypes
.
add
(
"
application
/
x
-
win
-
bitmap
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
bmp
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
x
-
bmp
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
x
-
bitmap
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
x
-
xbitmap
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
x
-
win
-
bitmap
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
x
-
windows
-
bitmap
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
x
-
ms
-
bitmap
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
x
-
ms
-
bmp
"
)
;
sDecodableMimeTypes
.
add
(
"
image
/
ms
-
bmp
"
)
;
}
Nullable
public
static
String
guessDefaultFaviconURL
(
String
pageURL
)
{
if
(
TextUtils
.
isEmpty
(
pageURL
)
)
{
return
null
;
}
if
(
AboutPages
.
isAboutPage
(
pageURL
)
|
|
pageURL
.
startsWith
(
"
jar
:
"
)
)
{
return
pageURL
;
}
if
(
!
StringUtils
.
isHttpOrHttps
(
pageURL
)
)
{
return
null
;
}
try
{
Uri
uri
=
Uri
.
parse
(
pageURL
)
;
if
(
uri
.
getAuthority
(
)
.
isEmpty
(
)
)
{
return
null
;
}
return
uri
.
buildUpon
(
)
.
path
(
"
favicon
.
ico
"
)
.
clearQuery
(
)
.
fragment
(
"
"
)
.
build
(
)
.
toString
(
)
;
}
catch
(
Exception
e
)
{
Log
.
d
(
LOGTAG
"
Exception
getting
default
favicon
URL
"
)
;
return
null
;
}
}
public
static
boolean
isContainerType
(
NonNull
String
mimeType
)
{
return
sContainerMimeTypes
.
contains
(
mimeType
)
;
}
public
static
boolean
canDecodeType
(
NonNull
String
imgType
)
{
return
sDecodableMimeTypes
.
contains
(
imgType
)
;
}
public
static
IconCallback
createBase64EventCallback
(
final
EventCallback
callback
)
{
return
new
IconCallback
(
)
{
Override
public
void
onIconResponse
(
IconResponse
response
)
{
ByteArrayOutputStream
stream
=
new
ByteArrayOutputStream
(
)
;
try
{
response
.
getBitmap
(
)
.
compress
(
Bitmap
.
CompressFormat
.
PNG
100
stream
)
;
callback
.
sendSuccess
(
"
data
:
image
/
x
-
icon
;
base64
"
+
Base64
.
encodeToString
(
stream
.
toByteArray
(
)
Base64
.
NO_WRAP
)
)
;
}
finally
{
IOUtils
.
safeStreamClose
(
stream
)
;
}
}
}
;
}
}
