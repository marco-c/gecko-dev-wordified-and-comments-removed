package
org
.
mozilla
.
gecko
.
icons
.
processing
;
import
android
.
graphics
.
Bitmap
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
org
.
mozilla
.
gecko
.
icons
.
IconRequest
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
public
class
ResizingProcessor
implements
Processor
{
public
static
final
int
MAX_SCALE_FACTOR
=
3
;
Override
public
void
process
(
IconRequest
request
IconResponse
response
)
{
if
(
response
.
isFromMemory
(
)
)
{
return
;
}
final
Bitmap
originalBitmap
=
response
.
getBitmap
(
)
;
final
int
size
=
originalBitmap
.
getWidth
(
)
;
final
int
targetSize
=
request
.
getTargetSize
(
)
;
if
(
size
=
=
targetSize
)
{
return
;
}
final
Bitmap
resizedBitmap
;
if
(
size
>
targetSize
)
{
resizedBitmap
=
resize
(
originalBitmap
targetSize
)
;
}
else
{
final
int
largestSize
=
size
*
MAX_SCALE_FACTOR
;
if
(
largestSize
>
targetSize
)
{
resizedBitmap
=
resize
(
originalBitmap
targetSize
)
;
}
else
{
resizedBitmap
=
resize
(
originalBitmap
largestSize
)
;
}
}
response
.
updateBitmap
(
resizedBitmap
)
;
originalBitmap
.
recycle
(
)
;
}
VisibleForTesting
Bitmap
resize
(
Bitmap
bitmap
int
targetSize
)
{
try
{
return
Bitmap
.
createScaledBitmap
(
bitmap
targetSize
targetSize
true
)
;
}
catch
(
OutOfMemoryError
error
)
{
return
bitmap
;
}
}
}
