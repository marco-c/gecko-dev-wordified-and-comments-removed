package
org
.
mozilla
.
gecko
.
icons
.
storage
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
BitmapFactory
;
import
android
.
support
.
annotation
.
CheckResult
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
util
.
Log
;
import
com
.
jakewharton
.
disklrucache
.
DiskLruCache
;
import
org
.
mozilla
.
gecko
.
background
.
nativecode
.
NativeCrypto
;
import
org
.
mozilla
.
gecko
.
icons
.
IconRequest
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
import
org
.
mozilla
.
gecko
.
sync
.
Utils
;
import
org
.
mozilla
.
gecko
.
util
.
IOUtils
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
OutputStream
;
import
java
.
io
.
UnsupportedEncodingException
;
import
java
.
security
.
MessageDigest
;
public
class
DiskStorage
{
private
static
final
String
LOGTAG
=
"
Gecko
/
DiskStorage
"
;
private
static
final
int
DISK_CACHE_SIZE
=
50
*
1024
*
1024
;
private
static
final
int
CACHE_VERSION
=
1
;
private
static
final
String
KEY_PREFIX_ICON
=
"
icon
:
"
;
private
static
final
String
KEY_PREFIX_MAPPING
=
"
mapping
:
"
;
private
static
DiskStorage
instance
;
public
static
DiskStorage
get
(
Context
context
)
{
if
(
instance
=
=
null
)
{
instance
=
new
DiskStorage
(
context
)
;
}
return
instance
;
}
private
Context
context
;
private
DiskLruCache
cache
;
private
DiskStorage
(
Context
context
)
{
this
.
context
=
context
.
getApplicationContext
(
)
;
}
CheckResult
private
synchronized
DiskLruCache
ensureCacheIsReady
(
)
throws
IOException
{
if
(
cache
=
=
null
|
|
cache
.
isClosed
(
)
)
{
cache
=
DiskLruCache
.
open
(
new
File
(
context
.
getCacheDir
(
)
"
icons
"
)
CACHE_VERSION
1
DISK_CACHE_SIZE
)
;
}
return
cache
;
}
public
void
putMapping
(
IconRequest
request
String
iconUrl
)
{
putMapping
(
request
.
getPageUrl
(
)
iconUrl
)
;
}
public
void
putMapping
(
String
pageUrl
String
iconUrl
)
{
DiskLruCache
.
Editor
editor
=
null
;
try
{
final
DiskLruCache
cache
=
ensureCacheIsReady
(
)
;
final
String
key
=
createKey
(
KEY_PREFIX_MAPPING
pageUrl
)
;
if
(
key
=
=
null
)
{
return
;
}
editor
=
cache
.
edit
(
key
)
;
if
(
editor
=
=
null
)
{
return
;
}
editor
.
set
(
0
iconUrl
)
;
editor
.
commit
(
)
;
}
catch
(
IOException
e
)
{
Log
.
w
(
LOGTAG
"
IOException
while
accessing
disk
cache
"
e
)
;
abortSilently
(
editor
)
;
}
}
public
void
putIcon
(
IconResponse
response
)
{
putIcon
(
response
.
getUrl
(
)
response
.
getBitmap
(
)
)
;
}
public
void
putIcon
(
String
iconUrl
Bitmap
bitmap
)
{
OutputStream
outputStream
=
null
;
DiskLruCache
.
Editor
editor
=
null
;
try
{
final
DiskLruCache
cache
=
ensureCacheIsReady
(
)
;
final
String
key
=
createKey
(
KEY_PREFIX_ICON
iconUrl
)
;
if
(
key
=
=
null
)
{
return
;
}
editor
=
cache
.
edit
(
key
)
;
if
(
editor
=
=
null
)
{
return
;
}
outputStream
=
editor
.
newOutputStream
(
0
)
;
boolean
success
=
bitmap
.
compress
(
Bitmap
.
CompressFormat
.
PNG
100
outputStream
)
;
outputStream
.
close
(
)
;
if
(
success
)
{
editor
.
commit
(
)
;
}
else
{
editor
.
abort
(
)
;
}
}
catch
(
IOException
e
)
{
Log
.
w
(
LOGTAG
"
IOException
while
accessing
disk
cache
"
e
)
;
abortSilently
(
editor
)
;
}
finally
{
IOUtils
.
safeStreamClose
(
outputStream
)
;
}
}
Nullable
public
IconResponse
getIcon
(
String
iconUrl
)
{
InputStream
inputStream
=
null
;
try
{
final
DiskLruCache
cache
=
ensureCacheIsReady
(
)
;
final
String
key
=
createKey
(
KEY_PREFIX_ICON
iconUrl
)
;
if
(
key
=
=
null
)
{
return
null
;
}
if
(
cache
.
isClosed
(
)
)
{
throw
new
RuntimeException
(
"
CLOSED
"
)
;
}
final
DiskLruCache
.
Snapshot
snapshot
=
cache
.
get
(
key
)
;
if
(
snapshot
=
=
null
)
{
return
null
;
}
inputStream
=
snapshot
.
getInputStream
(
0
)
;
final
Bitmap
bitmap
=
BitmapFactory
.
decodeStream
(
inputStream
)
;
if
(
bitmap
=
=
null
)
{
return
null
;
}
return
IconResponse
.
createFromDisk
(
bitmap
iconUrl
)
;
}
catch
(
IOException
e
)
{
Log
.
w
(
LOGTAG
"
IOException
while
accessing
disk
cache
"
e
)
;
}
finally
{
IOUtils
.
safeStreamClose
(
inputStream
)
;
}
return
null
;
}
Nullable
public
String
getMapping
(
String
pageUrl
)
{
try
{
final
DiskLruCache
cache
=
ensureCacheIsReady
(
)
;
final
String
key
=
createKey
(
KEY_PREFIX_MAPPING
pageUrl
)
;
if
(
key
=
=
null
)
{
return
null
;
}
DiskLruCache
.
Snapshot
snapshot
=
cache
.
get
(
key
)
;
if
(
snapshot
=
=
null
)
{
return
null
;
}
return
snapshot
.
getString
(
0
)
;
}
catch
(
IOException
e
)
{
Log
.
w
(
LOGTAG
"
IOException
while
accessing
disk
cache
"
e
)
;
}
return
null
;
}
public
void
evictAll
(
)
{
try
{
final
DiskLruCache
cache
=
ensureCacheIsReady
(
)
;
cache
.
delete
(
)
;
}
catch
(
IOException
e
)
{
Log
.
w
(
LOGTAG
"
IOException
while
accessing
disk
cache
"
e
)
;
}
}
Nullable
private
String
createKey
(
String
prefix
String
url
)
{
try
{
byte
[
]
ctx
=
NativeCrypto
.
sha256init
(
)
;
if
(
ctx
=
=
null
)
{
return
null
;
}
byte
[
]
data
=
prefix
.
getBytes
(
"
UTF
-
8
"
)
;
NativeCrypto
.
sha256update
(
ctx
data
data
.
length
)
;
data
=
url
.
getBytes
(
"
UTF
-
8
"
)
;
NativeCrypto
.
sha256update
(
ctx
data
data
.
length
)
;
return
Utils
.
byte2Hex
(
NativeCrypto
.
sha256finalize
(
ctx
)
)
;
}
catch
(
NoClassDefFoundError
|
ExceptionInInitializerError
error
)
{
try
{
MessageDigest
md
=
MessageDigest
.
getInstance
(
"
SHA
-
256
"
)
;
md
.
update
(
prefix
.
getBytes
(
"
UTF
-
8
"
)
)
;
md
.
update
(
url
.
getBytes
(
"
UTF
-
8
"
)
)
;
return
Utils
.
byte2Hex
(
md
.
digest
(
)
)
;
}
catch
(
Exception
e
)
{
throw
new
RuntimeException
(
e
)
;
}
}
catch
(
UnsupportedEncodingException
e
)
{
throw
new
AssertionError
(
"
Should
not
happen
:
Device
does
not
understand
UTF
-
8
"
)
;
}
}
private
void
abortSilently
(
DiskLruCache
.
Editor
editor
)
{
if
(
editor
!
=
null
)
{
try
{
editor
.
abort
(
)
;
}
catch
(
IOException
e
)
{
}
}
}
}
