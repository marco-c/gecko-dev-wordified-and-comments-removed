package
org
.
mozilla
.
gecko
.
icons
.
loader
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
Canvas
;
import
android
.
graphics
.
Color
;
import
android
.
graphics
.
Paint
;
import
android
.
graphics
.
Rect
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserDB
;
import
org
.
mozilla
.
gecko
.
db
.
SuggestedSites
;
import
org
.
mozilla
.
gecko
.
home
.
ImageLoader
;
import
org
.
mozilla
.
gecko
.
icons
.
IconRequest
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
import
java
.
io
.
IOException
;
public
class
SuggestedSiteLoader
implements
IconLoader
{
public
static
final
String
SUGGESTED_SITE_TOUCHTILE
=
"
suggestedsitetile
:
"
;
private
static
final
String
LOGTAG
=
SuggestedSiteLoader
.
class
.
getSimpleName
(
)
;
Nullable
Override
public
IconResponse
load
(
IconRequest
request
)
{
if
(
request
.
shouldSkipDisk
(
)
)
{
return
null
;
}
final
String
iconUrl
=
request
.
getBestIcon
(
)
.
getUrl
(
)
;
if
(
iconUrl
.
startsWith
(
SUGGESTED_SITE_TOUCHTILE
)
)
{
return
buildIcon
(
request
.
getContext
(
)
iconUrl
.
substring
(
SUGGESTED_SITE_TOUCHTILE
.
length
(
)
)
request
.
getTargetSize
(
)
)
;
}
return
null
;
}
VisibleForTesting
Bitmap
loadBitmap
(
final
Context
context
final
String
iconURL
)
throws
IOException
{
return
ImageLoader
.
with
(
context
)
.
load
(
iconURL
)
.
noFade
(
)
.
get
(
)
;
}
private
IconResponse
buildIcon
(
final
Context
context
final
String
siteURL
final
int
targetSize
)
{
final
SuggestedSites
suggestedSites
=
BrowserDB
.
from
(
context
)
.
getSuggestedSites
(
)
;
if
(
suggestedSites
=
=
null
)
{
return
null
;
}
final
String
iconLocation
=
suggestedSites
.
getImageUrlForUrl
(
siteURL
)
;
final
String
backgroundColorString
=
suggestedSites
.
getBackgroundColorForUrl
(
siteURL
)
;
if
(
iconLocation
=
=
null
|
|
backgroundColorString
=
=
null
)
{
Log
.
e
(
LOGTAG
"
Unable
to
find
tile
data
definitions
for
site
:
"
+
siteURL
)
;
}
final
int
backgroundColor
=
Color
.
parseColor
(
backgroundColorString
)
;
try
{
final
Bitmap
foreground
=
loadBitmap
(
context
iconLocation
)
;
final
Bitmap
output
=
Bitmap
.
createBitmap
(
targetSize
targetSize
foreground
.
getConfig
(
)
)
;
final
Canvas
canvas
=
new
Canvas
(
output
)
;
canvas
.
drawColor
(
backgroundColor
)
;
final
Rect
src
=
new
Rect
(
0
0
foreground
.
getWidth
(
)
foreground
.
getHeight
(
)
)
;
final
float
scaleFactor
=
targetSize
*
1
.
0f
/
Math
.
max
(
foreground
.
getHeight
(
)
foreground
.
getWidth
(
)
)
;
final
int
heightDelta
=
targetSize
-
(
int
)
(
scaleFactor
*
foreground
.
getHeight
(
)
)
;
final
int
widthDelta
=
targetSize
-
(
int
)
(
scaleFactor
*
foreground
.
getWidth
(
)
)
;
final
Rect
dst
=
new
Rect
(
widthDelta
/
2
heightDelta
/
2
output
.
getWidth
(
)
-
(
widthDelta
/
2
)
output
.
getHeight
(
)
-
(
heightDelta
/
2
)
)
;
final
Paint
paint
=
new
Paint
(
)
;
paint
.
setFilterBitmap
(
true
)
;
paint
.
setAntiAlias
(
true
)
;
paint
.
setDither
(
true
)
;
canvas
.
drawBitmap
(
foreground
src
dst
paint
)
;
final
IconResponse
response
=
IconResponse
.
create
(
output
)
;
response
.
updateColor
(
backgroundColor
)
;
return
response
;
}
catch
(
IOException
e
)
{
Log
.
e
(
LOGTAG
"
Unable
to
load
tile
data
for
site
:
"
+
siteURL
+
"
at
location
:
"
+
iconLocation
)
;
}
return
null
;
}
}
