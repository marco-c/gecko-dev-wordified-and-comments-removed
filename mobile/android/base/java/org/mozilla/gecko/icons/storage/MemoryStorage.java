package
org
.
mozilla
.
gecko
.
icons
.
storage
;
import
android
.
graphics
.
Bitmap
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
util
.
Log
;
import
android
.
util
.
LruCache
;
import
org
.
mozilla
.
gecko
.
icons
.
IconRequest
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
public
class
MemoryStorage
{
private
static
final
int
MAPPING_CACHE_SIZE
=
500
;
private
static
MemoryStorage
instance
;
public
static
synchronized
MemoryStorage
get
(
)
{
if
(
instance
=
=
null
)
{
instance
=
new
MemoryStorage
(
)
;
}
return
instance
;
}
private
static
class
CacheEntry
{
private
final
Bitmap
bitmap
;
private
final
int
color
;
private
CacheEntry
(
Bitmap
bitmap
int
color
)
{
this
.
bitmap
=
bitmap
;
this
.
color
=
color
;
}
}
private
final
LruCache
<
String
CacheEntry
>
iconCache
;
private
final
LruCache
<
String
String
>
mappingCache
;
private
MemoryStorage
(
)
{
iconCache
=
new
LruCache
<
String
CacheEntry
>
(
calculateCacheSize
(
)
)
{
Override
protected
int
sizeOf
(
String
key
CacheEntry
value
)
{
return
value
.
bitmap
.
getByteCount
(
)
/
1024
;
}
}
;
mappingCache
=
new
LruCache
<
>
(
MAPPING_CACHE_SIZE
)
;
}
private
int
calculateCacheSize
(
)
{
int
maxMemory
=
(
int
)
(
Runtime
.
getRuntime
(
)
.
maxMemory
(
)
/
1024
)
;
return
maxMemory
/
8
;
}
public
synchronized
void
putMapping
(
IconRequest
request
String
iconUrl
)
{
mappingCache
.
put
(
request
.
getPageUrl
(
)
iconUrl
)
;
}
Nullable
public
synchronized
String
getMapping
(
String
pageUrl
)
{
return
mappingCache
.
get
(
pageUrl
)
;
}
public
synchronized
void
putIcon
(
String
url
IconResponse
response
)
{
final
CacheEntry
entry
=
new
CacheEntry
(
response
.
getBitmap
(
)
response
.
getColor
(
)
)
;
iconCache
.
put
(
url
entry
)
;
}
Nullable
public
synchronized
IconResponse
getIcon
(
String
iconUrl
)
{
final
CacheEntry
entry
=
iconCache
.
get
(
iconUrl
)
;
if
(
entry
=
=
null
)
{
return
null
;
}
return
IconResponse
.
createFromMemory
(
entry
.
bitmap
iconUrl
entry
.
color
)
;
}
public
synchronized
void
evictAll
(
)
{
iconCache
.
evictAll
(
)
;
mappingCache
.
evictAll
(
)
;
}
}
