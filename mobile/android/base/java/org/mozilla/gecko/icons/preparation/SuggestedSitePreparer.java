package
org
.
mozilla
.
gecko
.
icons
.
preparation
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserDB
;
import
org
.
mozilla
.
gecko
.
db
.
SuggestedSites
;
import
org
.
mozilla
.
gecko
.
icons
.
IconDescriptor
;
import
org
.
mozilla
.
gecko
.
icons
.
IconRequest
;
import
org
.
mozilla
.
gecko
.
icons
.
loader
.
SuggestedSiteLoader
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Set
;
public
class
SuggestedSitePreparer
implements
Preparer
{
private
boolean
initialised
=
false
;
private
final
Set
<
String
>
siteFaviconMap
=
new
HashSet
<
>
(
)
;
private
boolean
initialise
(
final
Context
context
)
{
final
SuggestedSites
suggestedSites
=
BrowserDB
.
from
(
context
)
.
getSuggestedSites
(
)
;
if
(
suggestedSites
=
=
null
)
{
return
false
;
}
final
Cursor
cursor
=
suggestedSites
.
get
(
Integer
.
MAX_VALUE
)
;
try
{
final
int
urlColumnIndex
=
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Bookmarks
.
URL
)
;
while
(
cursor
.
moveToNext
(
)
)
{
final
String
url
=
cursor
.
getString
(
urlColumnIndex
)
;
siteFaviconMap
.
add
(
url
)
;
}
}
finally
{
cursor
.
close
(
)
;
}
return
true
;
}
Override
public
void
prepare
(
final
IconRequest
request
)
{
if
(
request
.
shouldSkipDisk
(
)
)
{
return
;
}
if
(
!
initialised
)
{
initialised
=
initialise
(
request
.
getContext
(
)
)
;
if
(
!
initialised
)
{
return
;
}
}
final
String
siteURL
=
request
.
getPageUrl
(
)
;
if
(
siteFaviconMap
.
contains
(
siteURL
)
)
{
request
.
modify
(
)
.
icon
(
IconDescriptor
.
createBundledTileIcon
(
SuggestedSiteLoader
.
SUGGESTED_SITE_TOUCHTILE
+
request
.
getPageUrl
(
)
)
)
.
deferBuild
(
)
;
}
}
}
