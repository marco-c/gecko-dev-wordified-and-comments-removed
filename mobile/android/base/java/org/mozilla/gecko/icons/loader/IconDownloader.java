package
org
.
mozilla
.
gecko
.
icons
.
loader
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
icons
.
decoders
.
FaviconDecoder
;
import
org
.
mozilla
.
gecko
.
icons
.
decoders
.
LoadFaviconResult
;
import
org
.
mozilla
.
gecko
.
icons
.
IconRequest
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
import
org
.
mozilla
.
gecko
.
icons
.
storage
.
FailureCache
;
import
org
.
mozilla
.
gecko
.
util
.
IOUtils
;
import
org
.
mozilla
.
gecko
.
util
.
ProxySelector
;
import
org
.
mozilla
.
gecko
.
util
.
StringUtils
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
net
.
HttpURLConnection
;
import
java
.
net
.
URI
;
import
java
.
net
.
URISyntaxException
;
import
java
.
util
.
HashSet
;
public
class
IconDownloader
implements
IconLoader
{
private
static
final
String
LOGTAG
=
"
Gecko
/
Downloader
"
;
private
static
final
int
MAX_REDIRECTS_TO_FOLLOW
=
5
;
private
static
final
int
DEFAULT_FAVICON_BUFFER_SIZE_BYTES
=
25000
;
Override
public
IconResponse
load
(
IconRequest
request
)
{
if
(
request
.
shouldSkipNetwork
(
)
)
{
return
null
;
}
final
String
iconUrl
=
request
.
getBestIcon
(
)
.
getUrl
(
)
;
if
(
!
StringUtils
.
isHttpOrHttps
(
iconUrl
)
)
{
return
null
;
}
try
{
LoadFaviconResult
result
=
downloadAndDecodeImage
(
request
.
getContext
(
)
iconUrl
)
;
if
(
result
=
=
null
)
{
return
null
;
}
final
Bitmap
bitmap
=
result
.
getBestBitmap
(
request
.
getTargetSize
(
)
)
;
if
(
bitmap
=
=
null
)
{
return
null
;
}
return
IconResponse
.
createFromNetwork
(
bitmap
iconUrl
)
;
}
catch
(
Exception
e
)
{
Log
.
e
(
LOGTAG
"
Error
reading
favicon
"
e
)
;
}
catch
(
OutOfMemoryError
e
)
{
Log
.
e
(
LOGTAG
"
Insufficient
memory
to
process
favicon
"
)
;
}
return
null
;
}
VisibleForTesting
LoadFaviconResult
downloadAndDecodeImage
(
Context
context
String
targetFaviconURL
)
throws
IOException
URISyntaxException
{
HttpURLConnection
connection
=
tryDownload
(
targetFaviconURL
)
;
if
(
connection
=
=
null
)
{
return
null
;
}
InputStream
stream
=
null
;
try
{
stream
=
connection
.
getInputStream
(
)
;
return
decodeImageFromResponse
(
context
stream
connection
.
getHeaderFieldInt
(
"
Content
-
Length
"
-
1
)
)
;
}
finally
{
IOUtils
.
safeStreamClose
(
stream
)
;
connection
.
disconnect
(
)
;
}
}
private
HttpURLConnection
tryDownload
(
String
faviconURI
)
throws
URISyntaxException
IOException
{
HashSet
<
String
>
visitedLinkSet
=
new
HashSet
<
>
(
)
;
visitedLinkSet
.
add
(
faviconURI
)
;
return
tryDownloadRecurse
(
faviconURI
visitedLinkSet
)
;
}
private
HttpURLConnection
tryDownloadRecurse
(
String
faviconURI
HashSet
<
String
>
visited
)
throws
URISyntaxException
IOException
{
if
(
visited
.
size
(
)
=
=
MAX_REDIRECTS_TO_FOLLOW
)
{
return
null
;
}
HttpURLConnection
connection
=
connectTo
(
faviconURI
)
;
int
status
=
connection
.
getResponseCode
(
)
;
if
(
status
>
=
300
&
&
status
<
400
)
{
final
String
newURI
=
connection
.
getHeaderField
(
"
Location
"
)
;
try
{
if
(
newURI
=
=
null
|
|
newURI
.
equals
(
faviconURI
)
)
{
return
null
;
}
if
(
visited
.
contains
(
newURI
)
)
{
return
null
;
}
visited
.
add
(
newURI
)
;
}
finally
{
connection
.
disconnect
(
)
;
}
return
tryDownloadRecurse
(
newURI
visited
)
;
}
if
(
status
>
=
400
)
{
FailureCache
.
get
(
)
.
rememberFailure
(
faviconURI
)
;
connection
.
disconnect
(
)
;
return
null
;
}
return
connection
;
}
VisibleForTesting
HttpURLConnection
connectTo
(
String
faviconURI
)
throws
URISyntaxException
IOException
{
HttpURLConnection
connection
=
(
HttpURLConnection
)
ProxySelector
.
openConnectionWithProxy
(
new
URI
(
faviconURI
)
)
;
connection
.
setRequestProperty
(
"
User
-
Agent
"
GeckoAppShell
.
getGeckoInterface
(
)
.
getDefaultUAString
(
)
)
;
connection
.
setInstanceFollowRedirects
(
false
)
;
connection
.
connect
(
)
;
return
connection
;
}
private
LoadFaviconResult
decodeImageFromResponse
(
Context
context
InputStream
stream
int
contentLength
)
throws
IOException
{
int
bufferSize
;
if
(
contentLength
>
0
)
{
bufferSize
=
contentLength
+
1
;
}
else
{
bufferSize
=
DEFAULT_FAVICON_BUFFER_SIZE_BYTES
;
}
IOUtils
.
ConsumedInputStream
result
=
IOUtils
.
readFully
(
stream
bufferSize
)
;
if
(
result
=
=
null
)
{
return
null
;
}
return
FaviconDecoder
.
decodeFavicon
(
context
result
.
getData
(
)
0
result
.
consumedLength
)
;
}
}
