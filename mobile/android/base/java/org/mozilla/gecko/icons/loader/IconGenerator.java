package
org
.
mozilla
.
gecko
.
icons
.
loader
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
Resources
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
Canvas
;
import
android
.
graphics
.
Color
;
import
android
.
graphics
.
Paint
;
import
android
.
graphics
.
RectF
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
TypedValue
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
icons
.
IconRequest
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
import
org
.
mozilla
.
gecko
.
util
.
StringUtils
;
public
class
IconGenerator
implements
IconLoader
{
private
static
final
int
[
]
COLORS
=
{
0xFF9A4C00
0xFFAB008D
0xFF4C009C
0xFF002E9C
0xFF009EC2
0xFF009D02
0xFF51AB00
0xFF36385A
}
;
Override
public
IconResponse
load
(
IconRequest
request
)
{
if
(
request
.
getIconCount
(
)
>
1
)
{
return
null
;
}
return
generate
(
request
.
getContext
(
)
request
.
getPageUrl
(
)
)
;
}
public
static
IconResponse
generate
(
Context
context
String
pageURL
)
{
final
Resources
resources
=
context
.
getResources
(
)
;
final
int
widthAndHeight
=
resources
.
getDimensionPixelSize
(
R
.
dimen
.
favicon_bg
)
;
final
int
roundedCorners
=
resources
.
getDimensionPixelOffset
(
R
.
dimen
.
favicon_corner_radius
)
;
final
Bitmap
favicon
=
Bitmap
.
createBitmap
(
widthAndHeight
widthAndHeight
Bitmap
.
Config
.
ARGB_8888
)
;
final
Canvas
canvas
=
new
Canvas
(
favicon
)
;
final
int
color
=
pickColor
(
pageURL
)
;
final
Paint
paint
=
new
Paint
(
)
;
paint
.
setColor
(
color
)
;
canvas
.
drawRoundRect
(
new
RectF
(
0
0
widthAndHeight
widthAndHeight
)
roundedCorners
roundedCorners
paint
)
;
paint
.
setColor
(
Color
.
WHITE
)
;
final
String
character
=
getRepresentativeCharacter
(
pageURL
)
;
final
float
textSize
=
TypedValue
.
applyDimension
(
TypedValue
.
COMPLEX_UNIT_DIP
widthAndHeight
/
8
context
.
getResources
(
)
.
getDisplayMetrics
(
)
)
;
paint
.
setTextAlign
(
Paint
.
Align
.
CENTER
)
;
paint
.
setTextSize
(
textSize
)
;
paint
.
setAntiAlias
(
true
)
;
canvas
.
drawText
(
character
canvas
.
getWidth
(
)
/
2
(
int
)
(
(
canvas
.
getHeight
(
)
/
2
)
-
(
(
paint
.
descent
(
)
+
paint
.
ascent
(
)
)
/
2
)
)
paint
)
;
return
IconResponse
.
createGenerated
(
favicon
color
)
;
}
VisibleForTesting
static
String
getRepresentativeCharacter
(
String
url
)
{
if
(
TextUtils
.
isEmpty
(
url
)
)
{
return
"
?
"
;
}
final
String
snippet
=
getRepresentativeSnippet
(
url
)
;
for
(
int
i
=
0
;
i
<
snippet
.
length
(
)
;
i
+
+
)
{
char
c
=
snippet
.
charAt
(
i
)
;
if
(
Character
.
isLetterOrDigit
(
c
)
)
{
return
String
.
valueOf
(
Character
.
toUpperCase
(
c
)
)
;
}
}
return
"
?
"
;
}
VisibleForTesting
static
int
pickColor
(
String
url
)
{
if
(
TextUtils
.
isEmpty
(
url
)
)
{
return
COLORS
[
0
]
;
}
final
String
snippet
=
getRepresentativeSnippet
(
url
)
;
final
int
color
=
Math
.
abs
(
snippet
.
hashCode
(
)
%
COLORS
.
length
)
;
return
COLORS
[
color
]
;
}
private
static
String
getRepresentativeSnippet
(
NonNull
String
url
)
{
Uri
uri
=
Uri
.
parse
(
url
)
;
String
snippet
=
uri
.
getHost
(
)
;
if
(
TextUtils
.
isEmpty
(
snippet
)
)
{
snippet
=
uri
.
getPath
(
)
;
}
if
(
TextUtils
.
isEmpty
(
snippet
)
)
{
return
"
?
"
;
}
snippet
=
StringUtils
.
stripCommonSubdomains
(
snippet
)
;
return
snippet
;
}
}
