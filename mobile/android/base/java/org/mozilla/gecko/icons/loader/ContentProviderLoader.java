package
org
.
mozilla
.
gecko
.
icons
.
loader
;
import
android
.
content
.
Context
;
import
android
.
database
.
Cursor
;
import
android
.
graphics
.
Bitmap
;
import
android
.
net
.
Uri
;
import
android
.
text
.
TextUtils
;
import
org
.
mozilla
.
gecko
.
distribution
.
PartnerBookmarksProviderProxy
;
import
org
.
mozilla
.
gecko
.
favicons
.
decoders
.
FaviconDecoder
;
import
org
.
mozilla
.
gecko
.
favicons
.
decoders
.
LoadFaviconResult
;
import
org
.
mozilla
.
gecko
.
icons
.
IconRequest
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
public
class
ContentProviderLoader
implements
IconLoader
{
Override
public
IconResponse
load
(
IconRequest
request
)
{
if
(
request
.
shouldSkipDisk
(
)
)
{
return
null
;
}
final
String
iconUrl
=
request
.
getBestIcon
(
)
.
getUrl
(
)
;
final
Context
context
=
request
.
getContext
(
)
;
final
int
targetSize
=
request
.
getTargetSize
(
)
;
if
(
TextUtils
.
isEmpty
(
iconUrl
)
|
|
!
iconUrl
.
startsWith
(
"
content
:
/
/
"
)
)
{
return
null
;
}
Cursor
cursor
=
context
.
getContentResolver
(
)
.
query
(
Uri
.
parse
(
iconUrl
)
new
String
[
]
{
PartnerBookmarksProviderProxy
.
PartnerContract
.
TOUCHICON
PartnerBookmarksProviderProxy
.
PartnerContract
.
FAVICON
}
null
null
null
)
;
if
(
cursor
=
=
null
)
{
return
null
;
}
try
{
if
(
!
cursor
.
moveToFirst
(
)
)
{
return
null
;
}
Bitmap
icon
=
decodeFromCursor
(
cursor
PartnerBookmarksProviderProxy
.
PartnerContract
.
TOUCHICON
targetSize
)
;
if
(
icon
!
=
null
)
{
return
IconResponse
.
create
(
icon
)
;
}
icon
=
decodeFromCursor
(
cursor
PartnerBookmarksProviderProxy
.
PartnerContract
.
FAVICON
targetSize
)
;
if
(
icon
!
=
null
)
{
return
IconResponse
.
create
(
icon
)
;
}
}
finally
{
cursor
.
close
(
)
;
}
return
null
;
}
private
Bitmap
decodeFromCursor
(
Cursor
cursor
String
column
int
targetWidthAndHeight
)
{
final
int
index
=
cursor
.
getColumnIndex
(
column
)
;
if
(
index
=
=
-
1
)
{
return
null
;
}
if
(
cursor
.
isNull
(
index
)
)
{
return
null
;
}
final
byte
[
]
data
=
cursor
.
getBlob
(
index
)
;
LoadFaviconResult
result
=
FaviconDecoder
.
decodeFavicon
(
data
0
data
.
length
)
;
if
(
result
=
=
null
)
{
return
null
;
}
return
result
.
getBestBitmap
(
targetWidthAndHeight
)
;
}
}
