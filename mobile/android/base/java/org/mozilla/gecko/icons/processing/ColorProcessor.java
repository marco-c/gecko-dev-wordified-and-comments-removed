package
org
.
mozilla
.
gecko
.
icons
.
processing
;
import
android
.
graphics
.
Bitmap
;
import
android
.
support
.
annotation
.
ColorInt
;
import
org
.
mozilla
.
gecko
.
gfx
.
BitmapUtils
;
import
org
.
mozilla
.
gecko
.
icons
.
IconRequest
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
public
class
ColorProcessor
implements
Processor
{
private
static
final
String
LOGTAG
=
"
GeckoColorProcessor
"
;
private
static
final
int
DEFAULT_COLOR
=
0xFFB1B1B3
;
Override
public
void
process
(
IconRequest
request
IconResponse
response
)
{
if
(
response
.
hasColor
(
)
)
{
return
;
}
final
Bitmap
bitmap
=
response
.
getBitmap
(
)
;
final
ColorInt
Integer
edgeColor
=
getEdgeColor
(
bitmap
)
;
if
(
edgeColor
!
=
null
)
{
response
.
updateColor
(
edgeColor
)
;
return
;
}
final
ColorInt
int
dominantColor
=
BitmapUtils
.
getDominantColor
(
response
.
getBitmap
(
)
DEFAULT_COLOR
)
;
response
.
updateColor
(
dominantColor
&
0x7FFFFFFF
)
;
}
private
ColorInt
Integer
getEdgeColor
(
final
Bitmap
bitmap
)
{
final
int
width
=
bitmap
.
getWidth
(
)
;
final
int
height
=
bitmap
.
getHeight
(
)
;
ColorInt
int
[
]
edge
=
new
int
[
Math
.
max
(
width
height
)
]
;
bitmap
.
getPixels
(
edge
0
width
0
0
width
1
)
;
final
ColorInt
Integer
edgecolor
=
getEdgeColorFromSingleDimension
(
edge
width
)
;
if
(
edgecolor
=
=
null
)
{
return
null
;
}
bitmap
.
getPixels
(
edge
0
width
0
height
-
1
width
1
)
;
if
(
!
edgecolor
.
equals
(
getEdgeColorFromSingleDimension
(
edge
width
)
)
)
{
return
null
;
}
bitmap
.
getPixels
(
edge
0
1
0
0
1
height
)
;
if
(
!
edgecolor
.
equals
(
getEdgeColorFromSingleDimension
(
edge
height
)
)
)
{
return
null
;
}
bitmap
.
getPixels
(
edge
0
1
width
-
1
0
1
height
)
;
if
(
!
edgecolor
.
equals
(
getEdgeColorFromSingleDimension
(
edge
height
)
)
)
{
return
null
;
}
return
edgecolor
;
}
private
ColorInt
Integer
getEdgeColorFromSingleDimension
(
ColorInt
int
[
]
edge
int
length
)
{
ColorInt
int
color
=
edge
[
0
]
;
for
(
int
i
=
1
;
i
<
length
;
+
+
i
)
{
if
(
edge
[
i
]
!
=
color
)
{
return
null
;
}
}
return
color
;
}
}
