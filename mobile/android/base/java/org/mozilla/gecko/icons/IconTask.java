package
org
.
mozilla
.
gecko
.
icons
;
import
android
.
graphics
.
Bitmap
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
icons
.
loader
.
IconLoader
;
import
org
.
mozilla
.
gecko
.
icons
.
preparation
.
Preparer
;
import
org
.
mozilla
.
gecko
.
icons
.
processing
.
Processor
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
java
.
util
.
List
;
import
java
.
util
.
concurrent
.
Callable
;
class
IconTask
implements
Callable
<
IconResponse
>
{
private
static
final
String
LOGTAG
=
"
Gecko
/
IconTask
"
;
private
static
final
boolean
DEBUG
=
true
;
private
final
List
<
Preparer
>
preparers
;
private
final
List
<
IconLoader
>
loaders
;
private
final
List
<
Processor
>
processors
;
private
final
IconLoader
generator
;
private
final
IconRequest
request
;
IconTask
(
NonNull
IconRequest
request
NonNull
List
<
Preparer
>
preparers
NonNull
List
<
IconLoader
>
loaders
NonNull
List
<
Processor
>
processors
NonNull
IconLoader
generator
)
{
this
.
request
=
request
;
this
.
preparers
=
preparers
;
this
.
loaders
=
loaders
;
this
.
processors
=
processors
;
this
.
generator
=
generator
;
}
Override
public
IconResponse
call
(
)
{
try
{
logRequest
(
request
)
;
prepareRequest
(
request
)
;
final
IconResponse
response
=
loadIcon
(
request
)
;
if
(
response
!
=
null
)
{
processIcon
(
request
response
)
;
executeCallback
(
request
response
)
;
logResponse
(
response
)
;
return
response
;
}
}
catch
(
InterruptedException
e
)
{
Log
.
d
(
LOGTAG
"
IconTask
was
interrupted
"
e
)
;
Thread
.
interrupted
(
)
;
}
catch
(
Throwable
e
)
{
handleException
(
e
)
;
}
return
null
;
}
private
void
ensureNotInterrupted
(
)
throws
InterruptedException
{
if
(
Thread
.
currentThread
(
)
.
isInterrupted
(
)
)
{
throw
new
InterruptedException
(
"
Task
has
been
cancelled
"
)
;
}
}
private
void
executeCallback
(
IconRequest
request
final
IconResponse
response
)
{
final
IconCallback
callback
=
request
.
getCallback
(
)
;
if
(
callback
!
=
null
)
{
if
(
request
.
shouldRunOnBackgroundThread
(
)
)
{
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
callback
.
onIconResponse
(
response
)
;
}
}
)
;
}
else
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
callback
.
onIconResponse
(
response
)
;
}
}
)
;
}
}
}
private
void
prepareRequest
(
IconRequest
request
)
throws
InterruptedException
{
for
(
Preparer
preparer
:
preparers
)
{
ensureNotInterrupted
(
)
;
preparer
.
prepare
(
request
)
;
logPreparer
(
request
preparer
)
;
}
}
private
IconResponse
loadIcon
(
IconRequest
request
)
throws
InterruptedException
{
while
(
request
.
hasIconDescriptors
(
)
)
{
for
(
IconLoader
loader
:
loaders
)
{
ensureNotInterrupted
(
)
;
IconResponse
response
=
loader
.
load
(
request
)
;
logLoader
(
request
loader
response
)
;
if
(
response
!
=
null
)
{
return
response
;
}
}
request
.
moveToNextIcon
(
)
;
}
return
generator
.
load
(
request
)
;
}
private
void
processIcon
(
IconRequest
request
IconResponse
response
)
throws
InterruptedException
{
for
(
Processor
processor
:
processors
)
{
ensureNotInterrupted
(
)
;
processor
.
process
(
request
response
)
;
logProcessor
(
processor
)
;
}
}
private
void
handleException
(
final
Throwable
t
)
{
if
(
AppConstants
.
NIGHTLY_BUILD
)
{
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
throw
new
RuntimeException
(
"
Icon
task
thread
crashed
"
t
)
;
}
}
)
;
}
else
{
Log
.
e
(
LOGTAG
"
Icon
task
crashed
"
t
)
;
}
}
private
boolean
shouldLog
(
)
{
return
DEBUG
&
&
AppConstants
.
NIGHTLY_BUILD
;
}
private
void
logPreparer
(
IconRequest
request
Preparer
preparer
)
{
if
(
!
shouldLog
(
)
)
{
return
;
}
Log
.
d
(
LOGTAG
String
.
format
(
"
PREPARE
%
s
"
+
"
(
%
s
)
"
preparer
.
getClass
(
)
.
getSimpleName
(
)
request
.
getIconCount
(
)
)
)
;
}
private
void
logLoader
(
IconRequest
request
IconLoader
loader
IconResponse
response
)
{
if
(
!
shouldLog
(
)
)
{
return
;
}
Log
.
d
(
LOGTAG
String
.
format
(
"
LOAD
[
%
s
]
%
s
:
%
s
"
response
!
=
null
?
"
X
"
:
"
"
loader
.
getClass
(
)
.
getSimpleName
(
)
request
.
getBestIcon
(
)
.
getUrl
(
)
)
)
;
}
private
void
logProcessor
(
Processor
processor
)
{
if
(
!
shouldLog
(
)
)
{
return
;
}
Log
.
d
(
LOGTAG
"
PROCESS
"
+
processor
.
getClass
(
)
.
getSimpleName
(
)
)
;
}
private
void
logResponse
(
IconResponse
response
)
{
if
(
!
shouldLog
(
)
)
{
return
;
}
final
Bitmap
bitmap
=
response
.
getBitmap
(
)
;
Log
.
d
(
LOGTAG
String
.
format
(
"
=
>
ICON
:
%
sx
%
s
"
bitmap
.
getWidth
(
)
bitmap
.
getHeight
(
)
)
)
;
}
private
void
logRequest
(
IconRequest
request
)
{
if
(
!
shouldLog
(
)
)
{
return
;
}
Log
.
d
(
LOGTAG
String
.
format
(
"
REQUEST
(
%
s
)
%
s
"
request
.
getIconCount
(
)
request
.
getPageUrl
(
)
)
)
;
}
}
