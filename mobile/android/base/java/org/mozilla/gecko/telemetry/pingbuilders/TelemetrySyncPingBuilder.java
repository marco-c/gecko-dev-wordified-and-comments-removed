package
org
.
mozilla
.
gecko
.
telemetry
.
pingbuilders
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
Parcelable
;
import
android
.
support
.
annotation
.
NonNull
;
import
org
.
json
.
simple
.
JSONArray
;
import
org
.
json
.
simple
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
sync
.
ExtendedJSONObject
;
import
org
.
mozilla
.
gecko
.
sync
.
telemetry
.
TelemetryContract
;
import
org
.
mozilla
.
gecko
.
sync
.
telemetry
.
TelemetryStageCollector
;
import
org
.
mozilla
.
gecko
.
telemetry
.
TelemetryLocalPing
;
import
java
.
io
.
Serializable
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
HashMap
;
public
class
TelemetrySyncPingBuilder
extends
TelemetryLocalPingBuilder
{
public
TelemetrySyncPingBuilder
setStages
(
NonNull
final
Serializable
data
)
{
HashMap
<
String
TelemetryStageCollector
>
stages
=
castSyncData
(
data
)
;
final
JSONArray
engines
=
new
JSONArray
(
)
;
for
(
String
stageName
:
stages
.
keySet
(
)
)
{
final
TelemetryStageCollector
stage
=
stages
.
get
(
stageName
)
;
if
(
stage
.
inbound
=
=
0
&
&
stage
.
outbound
=
=
0
)
{
continue
;
}
final
ExtendedJSONObject
stageJSON
=
new
ExtendedJSONObject
(
)
;
stageJSON
.
put
(
"
name
"
stageName
)
;
stageJSON
.
put
(
"
took
"
stage
.
finished
-
stage
.
started
)
;
if
(
stage
.
inbound
>
0
)
{
final
ExtendedJSONObject
incomingJSON
=
new
ExtendedJSONObject
(
)
;
incomingJSON
.
put
(
"
applied
"
stage
.
inbound
)
;
if
(
stage
.
inboundStored
>
0
)
{
incomingJSON
.
put
(
"
succeeded
"
stage
.
inboundStored
)
;
}
if
(
stage
.
inboundFailed
>
0
)
{
incomingJSON
.
put
(
"
failed
"
stage
.
inboundFailed
)
;
}
if
(
stage
.
reconciled
>
0
)
{
incomingJSON
.
put
(
"
reconciled
"
stage
.
reconciled
)
;
}
stageJSON
.
put
(
"
incoming
"
incomingJSON
)
;
}
if
(
stage
.
outbound
>
0
)
{
final
ExtendedJSONObject
outgoingJSON
=
new
ExtendedJSONObject
(
)
;
outgoingJSON
.
put
(
"
sent
"
stage
.
outboundStored
)
;
if
(
stage
.
outboundFailed
>
0
)
{
outgoingJSON
.
put
(
"
failed
"
stage
.
outboundFailed
)
;
}
stageJSON
.
put
(
"
outgoing
"
outgoingJSON
)
;
}
if
(
stage
.
error
!
=
null
)
{
stageJSON
.
put
(
"
failureReason
"
stage
.
error
)
;
}
addUnchecked
(
engines
stageJSON
)
;
}
payload
.
put
(
"
engines
"
engines
)
;
return
this
;
}
public
TelemetrySyncPingBuilder
setUID
(
NonNull
String
uid
)
{
payload
.
put
(
"
uid
"
uid
)
;
return
this
;
}
public
TelemetrySyncPingBuilder
setDeviceID
(
NonNull
String
deviceID
)
{
payload
.
put
(
"
deviceID
"
deviceID
)
;
return
this
;
}
public
TelemetrySyncPingBuilder
setRestarted
(
boolean
didRestart
)
{
if
(
!
didRestart
)
{
return
this
;
}
payload
.
put
(
"
restarted
"
true
)
;
return
this
;
}
public
TelemetrySyncPingBuilder
setDevices
(
NonNull
ArrayList
<
Parcelable
>
devices
)
{
final
JSONArray
devicesJSON
=
new
JSONArray
(
)
;
for
(
Parcelable
device
:
devices
)
{
final
Bundle
deviceBundle
=
(
Bundle
)
device
;
final
ExtendedJSONObject
deviceJSON
=
new
ExtendedJSONObject
(
)
;
deviceJSON
.
put
(
"
os
"
deviceBundle
.
getString
(
TelemetryContract
.
KEY_DEVICE_OS
)
)
;
deviceJSON
.
put
(
"
version
"
deviceBundle
.
getString
(
TelemetryContract
.
KEY_DEVICE_VERSION
)
)
;
deviceJSON
.
put
(
"
id
"
deviceBundle
.
getString
(
TelemetryContract
.
KEY_DEVICE_ID
)
)
;
addUnchecked
(
devicesJSON
deviceJSON
)
;
}
if
(
devicesJSON
.
size
(
)
>
0
)
{
payload
.
put
(
"
devices
"
devicesJSON
)
;
}
return
this
;
}
public
TelemetrySyncPingBuilder
setError
(
NonNull
Serializable
error
)
{
payload
.
put
(
"
failureReason
"
new
ExtendedJSONObject
(
(
JSONObject
)
error
)
)
;
return
this
;
}
public
TelemetrySyncPingBuilder
setTook
(
long
took
)
{
payload
.
put
(
"
took
"
took
)
;
return
this
;
}
Override
public
TelemetryLocalPing
build
(
)
{
return
new
TelemetryLocalPing
(
payload
docID
)
;
}
SuppressWarnings
(
"
unchecked
"
)
private
static
void
addUnchecked
(
final
JSONArray
list
final
ExtendedJSONObject
obj
)
{
list
.
add
(
obj
)
;
}
SuppressWarnings
(
"
unchecked
"
)
private
static
HashMap
<
String
TelemetryStageCollector
>
castSyncData
(
final
Serializable
data
)
{
return
(
HashMap
<
String
TelemetryStageCollector
>
)
data
;
}
}
