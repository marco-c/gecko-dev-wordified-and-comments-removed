package
org
.
mozilla
.
gecko
.
telemetry
;
import
android
.
content
.
Context
;
import
android
.
support
.
annotation
.
WorkerThread
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
gecko
.
telemetry
.
pingbuilders
.
TelemetryCorePingBuilder
;
import
org
.
mozilla
.
gecko
.
telemetry
.
schedulers
.
TelemetryUploadScheduler
;
import
org
.
mozilla
.
gecko
.
telemetry
.
schedulers
.
TelemetryUploadAllPingsImmediatelyScheduler
;
import
org
.
mozilla
.
gecko
.
telemetry
.
stores
.
TelemetryJSONFilePingStore
;
import
org
.
mozilla
.
gecko
.
telemetry
.
stores
.
TelemetryPingStore
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
java
.
io
.
File
;
import
java
.
io
.
IOException
;
public
class
TelemetryDispatcher
{
private
static
final
String
LOGTAG
=
"
Gecko
"
+
TelemetryDispatcher
.
class
.
getSimpleName
(
)
;
private
static
final
String
STORE_CONTAINER_DIR_NAME
=
"
telemetry_java
"
;
private
static
final
String
CORE_STORE_DIR_NAME
=
"
core
"
;
private
final
TelemetryJSONFilePingStore
coreStore
;
private
final
TelemetryUploadAllPingsImmediatelyScheduler
uploadAllPingsImmediatelyScheduler
;
WorkerThread
public
TelemetryDispatcher
(
final
String
profilePath
final
String
profileName
)
{
final
String
storePath
=
profilePath
+
File
.
separator
+
STORE_CONTAINER_DIR_NAME
;
coreStore
=
new
TelemetryJSONFilePingStore
(
new
File
(
storePath
CORE_STORE_DIR_NAME
)
profileName
)
;
uploadAllPingsImmediatelyScheduler
=
new
TelemetryUploadAllPingsImmediatelyScheduler
(
)
;
}
private
void
queuePingForUpload
(
final
Context
context
final
TelemetryOutgoingPing
ping
final
TelemetryPingStore
store
final
TelemetryUploadScheduler
scheduler
)
{
final
QueuePingRunnable
runnable
=
new
QueuePingRunnable
(
context
ping
store
scheduler
)
;
ThreadUtils
.
postToBackgroundThread
(
runnable
)
;
}
public
void
queuePingForUpload
(
final
Context
context
final
TelemetryCorePingBuilder
pingBuilder
)
{
final
TelemetryOutgoingPing
ping
=
pingBuilder
.
build
(
)
;
queuePingForUpload
(
context
ping
coreStore
uploadAllPingsImmediatelyScheduler
)
;
}
static
class
QueuePingRunnable
implements
Runnable
{
private
final
Context
applicationContext
;
private
final
TelemetryOutgoingPing
ping
;
private
final
TelemetryPingStore
store
;
private
final
TelemetryUploadScheduler
scheduler
;
QueuePingRunnable
(
final
Context
context
final
TelemetryOutgoingPing
ping
final
TelemetryPingStore
store
final
TelemetryUploadScheduler
scheduler
)
{
this
.
applicationContext
=
context
.
getApplicationContext
(
)
;
this
.
ping
=
ping
;
this
.
store
=
store
;
this
.
scheduler
=
scheduler
;
}
Override
public
void
run
(
)
{
try
{
store
.
storePing
(
ping
)
;
}
catch
(
final
IOException
e
)
{
Log
.
e
(
LOGTAG
"
Unable
to
write
ping
to
disk
.
Continuing
with
upload
attempt
"
)
;
}
if
(
scheduler
.
isReadyToUpload
(
applicationContext
store
)
)
{
scheduler
.
scheduleUpload
(
applicationContext
store
)
;
}
}
}
}
