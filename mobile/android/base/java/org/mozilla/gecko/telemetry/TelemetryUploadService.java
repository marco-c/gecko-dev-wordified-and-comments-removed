package
org
.
mozilla
.
gecko
.
telemetry
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
SharedPreferences
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
WorkerThread
;
import
android
.
util
.
Log
;
import
ch
.
boye
.
httpclientandroidlib
.
HttpResponse
;
import
ch
.
boye
.
httpclientandroidlib
.
client
.
ClientProtocolException
;
import
org
.
mozilla
.
gecko
.
GeckoProfile
;
import
org
.
mozilla
.
gecko
.
GeckoSharedPrefs
;
import
org
.
mozilla
.
gecko
.
background
.
BackgroundService
;
import
org
.
mozilla
.
gecko
.
preferences
.
GeckoPreferences
;
import
org
.
mozilla
.
gecko
.
sync
.
net
.
BaseResource
;
import
org
.
mozilla
.
gecko
.
sync
.
net
.
BaseResourceDelegate
;
import
org
.
mozilla
.
gecko
.
sync
.
net
.
Resource
;
import
org
.
mozilla
.
gecko
.
util
.
StringUtils
;
import
java
.
io
.
IOException
;
import
java
.
net
.
URISyntaxException
;
import
java
.
security
.
GeneralSecurityException
;
public
class
TelemetryUploadService
extends
BackgroundService
{
private
static
final
String
LOGTAG
=
StringUtils
.
safeSubstring
(
"
Gecko
"
+
TelemetryUploadService
.
class
.
getSimpleName
(
)
0
23
)
;
private
static
final
String
WORKER_THREAD_NAME
=
LOGTAG
+
"
Worker
"
;
private
static
final
int
MILLIS_IN_DAY
=
1000
*
60
*
60
*
24
;
public
TelemetryUploadService
(
)
{
super
(
WORKER_THREAD_NAME
)
;
setIntentRedelivery
(
false
)
;
}
Override
public
void
onHandleIntent
(
final
Intent
intent
)
{
Log
.
d
(
LOGTAG
"
Service
started
"
)
;
if
(
!
isUploadEnabledByAppConfig
(
this
)
)
{
Log
.
w
(
LOGTAG
"
Upload
is
not
available
by
configuration
;
returning
"
)
;
return
;
}
if
(
!
isIntentValid
(
intent
)
)
{
Log
.
w
(
LOGTAG
"
Received
invalid
Intent
;
returning
"
)
;
return
;
}
if
(
!
TelemetryConstants
.
ACTION_UPLOAD_CORE
.
equals
(
intent
.
getAction
(
)
)
)
{
Log
.
w
(
LOGTAG
"
Unknown
action
:
"
+
intent
.
getAction
(
)
+
"
.
Returning
"
)
;
return
;
}
final
String
defaultSearchEngine
=
intent
.
getStringExtra
(
TelemetryConstants
.
EXTRA_DEFAULT_SEARCH_ENGINE
)
;
final
String
docId
=
intent
.
getStringExtra
(
TelemetryConstants
.
EXTRA_DOC_ID
)
;
final
int
seq
=
intent
.
getIntExtra
(
TelemetryConstants
.
EXTRA_SEQ
-
1
)
;
final
String
profileName
=
intent
.
getStringExtra
(
TelemetryConstants
.
EXTRA_PROFILE_NAME
)
;
final
String
profilePath
=
intent
.
getStringExtra
(
TelemetryConstants
.
EXTRA_PROFILE_PATH
)
;
uploadCorePing
(
docId
seq
profileName
profilePath
defaultSearchEngine
)
;
}
public
static
boolean
isUploadEnabledByAppConfig
(
final
Context
context
)
{
if
(
!
TelemetryConstants
.
UPLOAD_ENABLED
)
{
Log
.
d
(
LOGTAG
"
Telemetry
upload
feature
is
compile
-
time
disabled
"
)
;
return
false
;
}
if
(
!
GeckoPreferences
.
getBooleanPref
(
context
GeckoPreferences
.
PREFS_HEALTHREPORT_UPLOAD_ENABLED
true
)
)
{
Log
.
d
(
LOGTAG
"
Telemetry
upload
opt
-
out
"
)
;
return
false
;
}
if
(
!
backgroundDataIsEnabled
(
context
)
)
{
Log
.
d
(
LOGTAG
"
Background
data
is
disabled
"
)
;
return
false
;
}
return
true
;
}
public
static
boolean
isUploadEnabledByProfileConfig
(
final
Context
context
final
GeckoProfile
profile
)
{
if
(
profile
.
inGuestMode
(
)
)
{
Log
.
d
(
LOGTAG
"
Profile
is
in
guest
mode
"
)
;
return
false
;
}
return
isUploadEnabledByAppConfig
(
context
)
;
}
private
boolean
isIntentValid
(
final
Intent
intent
)
{
if
(
intent
=
=
null
)
{
Log
.
d
(
LOGTAG
"
Received
null
intent
"
)
;
return
false
;
}
if
(
intent
.
getStringExtra
(
TelemetryConstants
.
EXTRA_DOC_ID
)
=
=
null
)
{
Log
.
d
(
LOGTAG
"
Received
invalid
doc
ID
in
Intent
"
)
;
return
false
;
}
if
(
!
intent
.
hasExtra
(
TelemetryConstants
.
EXTRA_SEQ
)
)
{
Log
.
d
(
LOGTAG
"
Received
Intent
without
sequence
number
"
)
;
return
false
;
}
if
(
intent
.
getStringExtra
(
TelemetryConstants
.
EXTRA_PROFILE_NAME
)
=
=
null
)
{
Log
.
d
(
LOGTAG
"
Received
invalid
profile
name
in
Intent
"
)
;
return
false
;
}
if
(
intent
.
getStringExtra
(
TelemetryConstants
.
EXTRA_PROFILE_PATH
)
=
=
null
)
{
Log
.
d
(
LOGTAG
"
Received
invalid
profile
path
in
Intent
"
)
;
return
false
;
}
return
true
;
}
WorkerThread
private
void
uploadCorePing
(
NonNull
final
String
docId
final
int
seq
NonNull
final
String
profileName
NonNull
final
String
profilePath
Nullable
final
String
defaultSearchEngine
)
{
final
GeckoProfile
profile
=
GeckoProfile
.
get
(
this
profileName
profilePath
)
;
final
long
profileCreationDate
=
getProfileCreationDate
(
profile
)
;
final
String
clientId
;
try
{
clientId
=
profile
.
getClientId
(
)
;
}
catch
(
final
IOException
e
)
{
Log
.
w
(
LOGTAG
"
Unable
to
get
client
ID
to
generate
core
ping
:
returning
.
"
e
)
;
return
;
}
final
SharedPreferences
sharedPrefs
=
GeckoSharedPrefs
.
forProfileName
(
this
profileName
)
;
final
String
serverURLSchemeHostPort
=
sharedPrefs
.
getString
(
TelemetryConstants
.
PREF_SERVER_URL
TelemetryConstants
.
DEFAULT_SERVER_URL
)
;
final
TelemetryPing
corePing
=
TelemetryPingGenerator
.
createCorePing
(
this
docId
clientId
serverURLSchemeHostPort
seq
profileCreationDate
defaultSearchEngine
)
;
final
CorePingResultDelegate
resultDelegate
=
new
CorePingResultDelegate
(
)
;
uploadPing
(
corePing
resultDelegate
)
;
}
private
void
uploadPing
(
final
TelemetryPing
ping
final
ResultDelegate
delegate
)
{
final
BaseResource
resource
;
try
{
resource
=
new
BaseResource
(
ping
.
getURL
(
)
)
;
}
catch
(
final
URISyntaxException
e
)
{
Log
.
w
(
LOGTAG
"
URISyntaxException
for
server
URL
when
creating
BaseResource
:
returning
.
"
)
;
return
;
}
delegate
.
setResource
(
resource
)
;
resource
.
delegate
=
delegate
;
resource
.
setShouldCompressUploadedEntity
(
true
)
;
resource
.
setShouldChunkUploadsHint
(
false
)
;
resource
.
postBlocking
(
ping
.
getPayload
(
)
)
;
}
WorkerThread
private
long
getProfileCreationDate
(
final
GeckoProfile
profile
)
{
final
long
profileMillis
=
profile
.
getAndPersistProfileCreationDate
(
this
)
;
if
(
profileMillis
<
0
)
{
return
profileMillis
;
}
return
(
long
)
Math
.
floor
(
(
double
)
profileMillis
/
MILLIS_IN_DAY
)
;
}
private
static
class
CorePingResultDelegate
extends
ResultDelegate
{
public
CorePingResultDelegate
(
)
{
super
(
)
;
}
Override
public
String
getUserAgent
(
)
{
return
TelemetryConstants
.
USER_AGENT
;
}
Override
public
void
handleHttpResponse
(
final
HttpResponse
response
)
{
final
int
status
=
response
.
getStatusLine
(
)
.
getStatusCode
(
)
;
switch
(
status
)
{
case
200
:
case
201
:
Log
.
d
(
LOGTAG
"
Telemetry
upload
success
.
"
)
;
break
;
default
:
Log
.
w
(
LOGTAG
"
Telemetry
upload
failure
.
HTTP
status
:
"
+
status
)
;
}
}
Override
public
void
handleHttpProtocolException
(
final
ClientProtocolException
e
)
{
Log
.
w
(
LOGTAG
"
HttpProtocolException
when
trying
to
upload
telemetry
"
)
;
}
Override
public
void
handleHttpIOException
(
final
IOException
e
)
{
Log
.
w
(
LOGTAG
"
HttpIOException
when
trying
to
upload
telemetry
"
)
;
}
Override
public
void
handleTransportException
(
final
GeneralSecurityException
e
)
{
Log
.
w
(
LOGTAG
"
Transport
exception
when
trying
to
upload
telemetry
"
)
;
}
}
private
static
abstract
class
ResultDelegate
extends
BaseResourceDelegate
{
public
ResultDelegate
(
)
{
super
(
null
)
;
}
protected
void
setResource
(
final
Resource
resource
)
{
this
.
resource
=
resource
;
}
}
}
