package
org
.
mozilla
.
gecko
.
telemetry
.
core
;
import
android
.
content
.
Context
;
import
android
.
os
.
Build
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
Locales
;
import
org
.
mozilla
.
gecko
.
telemetry
.
TelemetryPing
;
import
org
.
mozilla
.
gecko
.
telemetry
.
TelemetryPingBuilder
;
import
org
.
mozilla
.
gecko
.
util
.
Experiments
;
import
org
.
mozilla
.
gecko
.
util
.
StringUtils
;
import
java
.
util
.
Locale
;
public
class
TelemetryCorePingBuilder
extends
TelemetryPingBuilder
{
private
static
final
String
NAME
=
"
core
"
;
private
static
final
int
VERSION_VALUE
=
4
;
private
static
final
String
OS_VALUE
=
"
Android
"
;
private
static
final
String
ARCHITECTURE
=
"
arch
"
;
private
static
final
String
CLIENT_ID
=
"
clientId
"
;
private
static
final
String
DEFAULT_SEARCH_ENGINE
=
"
defaultSearch
"
;
private
static
final
String
DEVICE
=
"
device
"
;
private
static
final
String
DISTRIBUTION_ID
=
"
distributionId
"
;
private
static
final
String
EXPERIMENTS
=
"
experiments
"
;
private
static
final
String
LOCALE
=
"
locale
"
;
private
static
final
String
OS_ATTR
=
"
os
"
;
private
static
final
String
OS_VERSION
=
"
osversion
"
;
private
static
final
String
PROFILE_CREATION_DATE
=
"
profileDate
"
;
private
static
final
String
SEQ
=
"
seq
"
;
private
static
final
String
VERSION_ATTR
=
"
v
"
;
public
TelemetryCorePingBuilder
(
final
Context
context
final
String
serverURLSchemeHostPort
)
{
super
(
serverURLSchemeHostPort
)
;
initPayloadConstants
(
context
)
;
}
private
void
initPayloadConstants
(
final
Context
context
)
{
payload
.
put
(
VERSION_ATTR
VERSION_VALUE
)
;
payload
.
put
(
OS_ATTR
OS_VALUE
)
;
final
String
deviceDescriptor
=
StringUtils
.
safeSubstring
(
Build
.
MANUFACTURER
0
12
)
+
'
-
'
+
StringUtils
.
safeSubstring
(
Build
.
MODEL
0
19
)
;
payload
.
put
(
ARCHITECTURE
AppConstants
.
ANDROID_CPU_ARCH
)
;
payload
.
put
(
DEVICE
deviceDescriptor
)
;
payload
.
put
(
LOCALE
Locales
.
getLanguageTag
(
Locale
.
getDefault
(
)
)
)
;
payload
.
put
(
OS_VERSION
Integer
.
toString
(
Build
.
VERSION
.
SDK_INT
)
)
;
payload
.
putArray
(
EXPERIMENTS
Experiments
.
getActiveExperiments
(
context
)
)
;
}
Override
public
String
getDocType
(
)
{
return
NAME
;
}
Override
public
String
[
]
getMandatoryFields
(
)
{
return
new
String
[
]
{
ARCHITECTURE
CLIENT_ID
DEFAULT_SEARCH_ENGINE
DEVICE
LOCALE
OS_ATTR
OS_VERSION
PROFILE_CREATION_DATE
SEQ
VERSION_ATTR
}
;
}
public
TelemetryCorePingBuilder
setClientID
(
NonNull
final
String
clientID
)
{
if
(
clientID
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Expected
non
-
null
clientID
"
)
;
}
payload
.
put
(
CLIENT_ID
clientID
)
;
return
this
;
}
public
TelemetryCorePingBuilder
setDefaultSearchEngine
(
Nullable
final
String
engine
)
{
if
(
engine
!
=
null
&
&
engine
.
isEmpty
(
)
)
{
throw
new
IllegalArgumentException
(
"
Received
empty
string
.
Expected
identifier
or
null
.
"
)
;
}
payload
.
put
(
DEFAULT_SEARCH_ENGINE
engine
)
;
return
this
;
}
public
TelemetryCorePingBuilder
setOptDistributionID
(
NonNull
final
String
distributionID
)
{
if
(
distributionID
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Expected
non
-
null
distribution
ID
"
)
;
}
payload
.
put
(
DISTRIBUTION_ID
distributionID
)
;
return
this
;
}
public
TelemetryCorePingBuilder
setProfileCreationDate
(
Nullable
final
Long
date
)
{
if
(
date
!
=
null
&
&
date
<
0
)
{
throw
new
IllegalArgumentException
(
"
Expect
positive
date
value
.
Received
:
"
+
date
)
;
}
payload
.
put
(
PROFILE_CREATION_DATE
date
)
;
return
this
;
}
public
TelemetryCorePingBuilder
setSequenceNumber
(
final
int
seq
)
{
if
(
seq
<
0
)
{
throw
new
IllegalArgumentException
(
"
Expected
positive
sequence
number
.
Recived
:
"
+
seq
)
;
}
payload
.
put
(
SEQ
seq
)
;
return
this
;
}
}
