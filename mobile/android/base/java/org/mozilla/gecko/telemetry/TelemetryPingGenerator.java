package
org
.
mozilla
.
gecko
.
telemetry
;
import
android
.
content
.
Context
;
import
android
.
os
.
Build
;
import
java
.
io
.
IOException
;
import
java
.
util
.
Locale
;
import
com
.
keepsafe
.
switchboard
.
SwitchBoard
;
import
org
.
json
.
JSONArray
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
Locales
;
import
org
.
mozilla
.
gecko
.
sync
.
ExtendedJSONObject
;
import
org
.
mozilla
.
gecko
.
telemetry
.
TelemetryConstants
.
CorePing
;
import
org
.
mozilla
.
gecko
.
util
.
StringUtils
;
public
class
TelemetryPingGenerator
{
private
static
final
String
SERVER_INITIAL_PATH
=
"
submit
/
telemetry
"
;
private
static
String
getTelemetryServerURL
(
final
String
docId
final
String
serverURLSchemeHostPort
final
String
docType
)
{
final
String
appName
=
AppConstants
.
MOZ_APP_BASENAME
;
final
String
appVersion
=
AppConstants
.
MOZ_APP_VERSION
;
final
String
appUpdateChannel
=
AppConstants
.
MOZ_UPDATE_CHANNEL
;
final
String
appBuildId
=
AppConstants
.
MOZ_APP_BUILDID
;
return
serverURLSchemeHostPort
+
'
/
'
+
SERVER_INITIAL_PATH
+
'
/
'
+
docId
+
'
/
'
+
docType
+
'
/
'
+
appName
+
'
/
'
+
appVersion
+
'
/
'
+
appUpdateChannel
+
'
/
'
+
appBuildId
;
}
public
static
TelemetryPing
createCorePing
(
final
Context
context
final
String
docId
final
String
clientId
final
String
serverURLSchemeHostPort
final
int
seq
)
{
final
String
serverURL
=
getTelemetryServerURL
(
docId
serverURLSchemeHostPort
CorePing
.
NAME
)
;
final
ExtendedJSONObject
payload
=
createCorePingPayload
(
context
clientId
seq
)
;
return
new
TelemetryPing
(
serverURL
payload
)
;
}
private
static
ExtendedJSONObject
createCorePingPayload
(
final
Context
context
final
String
clientId
final
int
seq
)
{
final
ExtendedJSONObject
ping
=
new
ExtendedJSONObject
(
)
;
ping
.
put
(
CorePing
.
VERSION_ATTR
CorePing
.
VERSION_VALUE
)
;
ping
.
put
(
CorePing
.
OS_ATTR
CorePing
.
OS_VALUE
)
;
final
String
deviceDescriptor
=
StringUtils
.
safeSubstring
(
Build
.
MANUFACTURER
0
12
)
+
'
-
'
+
StringUtils
.
safeSubstring
(
Build
.
MODEL
0
19
)
;
ping
.
put
(
CorePing
.
ARCHITECTURE
AppConstants
.
ANDROID_CPU_ARCH
)
;
ping
.
put
(
CorePing
.
CLIENT_ID
clientId
)
;
ping
.
put
(
CorePing
.
DEVICE
deviceDescriptor
)
;
ping
.
put
(
CorePing
.
LOCALE
Locales
.
getLanguageTag
(
Locale
.
getDefault
(
)
)
)
;
ping
.
put
(
CorePing
.
OS_VERSION
Integer
.
toString
(
Build
.
VERSION
.
SDK_INT
)
)
;
ping
.
put
(
CorePing
.
SEQ
seq
)
;
if
(
AppConstants
.
MOZ_SWITCHBOARD
)
{
ping
.
put
(
CorePing
.
EXPERIMENTS
getActiveExperiments
(
context
)
)
;
}
return
ping
;
}
private
static
JSONArray
getActiveExperiments
(
final
Context
context
)
{
if
(
!
AppConstants
.
MOZ_SWITCHBOARD
)
{
throw
new
IllegalStateException
(
"
This
method
should
not
be
called
with
switchboard
disabled
"
)
;
}
return
new
JSONArray
(
SwitchBoard
.
getActiveExperiments
(
context
)
)
;
}
}
