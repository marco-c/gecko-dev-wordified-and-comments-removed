package
org
.
mozilla
.
gecko
.
telemetry
.
measurements
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
org
.
mozilla
.
gecko
.
GeckoSharedPrefs
;
import
java
.
util
.
concurrent
.
TimeUnit
;
public
class
SessionMeasurements
{
VisibleForTesting
static
final
String
PREF_SESSION_COUNT
=
"
measurements
-
session
-
count
"
;
VisibleForTesting
static
final
String
PREF_SESSION_DURATION
=
"
measurements
-
session
-
duration
"
;
private
boolean
sessionStarted
=
false
;
private
long
timeAtSessionStartNano
=
-
1
;
UiThread
public
void
recordSessionStart
(
)
{
if
(
sessionStarted
)
{
throw
new
IllegalStateException
(
"
Trying
to
start
session
but
it
is
already
started
"
)
;
}
sessionStarted
=
true
;
timeAtSessionStartNano
=
getSystemTimeNano
(
)
;
}
UiThread
public
void
recordSessionEnd
(
final
Context
context
)
{
if
(
!
sessionStarted
)
{
throw
new
IllegalStateException
(
"
Expected
session
to
be
started
before
session
end
is
called
"
)
;
}
sessionStarted
=
false
;
final
long
sessionElapsedSeconds
=
TimeUnit
.
NANOSECONDS
.
toSeconds
(
getSystemTimeNano
(
)
-
timeAtSessionStartNano
)
;
final
SharedPreferences
sharedPrefs
=
getSharedPreferences
(
context
)
;
synchronized
(
this
)
{
final
int
sessionCount
=
sharedPrefs
.
getInt
(
PREF_SESSION_COUNT
0
)
;
final
long
totalElapsedSeconds
=
sharedPrefs
.
getLong
(
PREF_SESSION_DURATION
0
)
;
sharedPrefs
.
edit
(
)
.
putInt
(
PREF_SESSION_COUNT
sessionCount
+
1
)
.
putLong
(
PREF_SESSION_DURATION
totalElapsedSeconds
+
sessionElapsedSeconds
)
.
apply
(
)
;
}
}
public
synchronized
SessionMeasurementsContainer
getAndResetSessionMeasurements
(
final
Context
context
)
{
final
SharedPreferences
sharedPrefs
=
getSharedPreferences
(
context
)
;
final
int
sessionCount
=
sharedPrefs
.
getInt
(
PREF_SESSION_COUNT
0
)
;
final
long
totalElapsedSeconds
=
sharedPrefs
.
getLong
(
PREF_SESSION_DURATION
0
)
;
sharedPrefs
.
edit
(
)
.
putInt
(
PREF_SESSION_COUNT
0
)
.
putLong
(
PREF_SESSION_DURATION
0
)
.
apply
(
)
;
return
new
SessionMeasurementsContainer
(
sessionCount
totalElapsedSeconds
)
;
}
VisibleForTesting
SharedPreferences
getSharedPreferences
(
final
Context
context
)
{
return
GeckoSharedPrefs
.
forProfile
(
context
)
;
}
VisibleForTesting
long
getSystemTimeNano
(
)
{
return
System
.
nanoTime
(
)
;
}
public
static
final
class
SessionMeasurementsContainer
{
public
final
int
sessionCount
;
public
final
long
elapsedSeconds
;
private
SessionMeasurementsContainer
(
final
int
sessionCount
final
long
elapsedSeconds
)
{
this
.
sessionCount
=
sessionCount
;
this
.
elapsedSeconds
=
elapsedSeconds
;
}
}
}
