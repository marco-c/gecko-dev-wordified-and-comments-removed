package
org
.
mozilla
.
gecko
;
import
android
.
app
.
Application
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
os
.
SystemClock
;
import
android
.
util
.
Log
;
import
com
.
squareup
.
leakcanary
.
LeakCanary
;
import
com
.
squareup
.
leakcanary
.
RefWatcher
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserDB
;
import
org
.
mozilla
.
gecko
.
db
.
LocalBrowserDB
;
import
org
.
mozilla
.
gecko
.
distribution
.
Distribution
;
import
org
.
mozilla
.
gecko
.
home
.
HomePanelsManager
;
import
org
.
mozilla
.
gecko
.
lwt
.
LightweightTheme
;
import
org
.
mozilla
.
gecko
.
mdns
.
MulticastDNSManager
;
import
org
.
mozilla
.
gecko
.
media
.
AudioFocusAgent
;
import
org
.
mozilla
.
gecko
.
notifications
.
NotificationClient
;
import
org
.
mozilla
.
gecko
.
notifications
.
NotificationHelper
;
import
org
.
mozilla
.
gecko
.
preferences
.
DistroSharedPrefsImport
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
util
.
HardwareUtils
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
java
.
io
.
File
;
import
java
.
lang
.
reflect
.
Method
;
public
class
GeckoApplication
extends
Application
implements
ContextGetter
{
private
static
final
String
LOG_TAG
=
"
GeckoApplication
"
;
private
boolean
mInBackground
;
private
boolean
mPausedGecko
;
private
boolean
mIsInitialResume
;
private
LightweightTheme
mLightweightTheme
;
private
RefWatcher
mRefWatcher
;
public
GeckoApplication
(
)
{
super
(
)
;
}
public
static
RefWatcher
getRefWatcher
(
Context
context
)
{
GeckoApplication
app
=
(
GeckoApplication
)
context
.
getApplicationContext
(
)
;
return
app
.
mRefWatcher
;
}
public
static
void
watchReference
(
Context
context
Object
object
)
{
if
(
context
=
=
null
)
{
return
;
}
getRefWatcher
(
context
)
.
watch
(
object
)
;
}
Override
public
Context
getContext
(
)
{
return
this
;
}
Override
public
SharedPreferences
getSharedPreferences
(
)
{
return
GeckoSharedPrefs
.
forApp
(
this
)
;
}
Override
public
void
onConfigurationChanged
(
Configuration
config
)
{
Log
.
d
(
LOG_TAG
"
onConfigurationChanged
:
"
+
config
.
locale
+
"
background
:
"
+
mInBackground
)
;
if
(
mInBackground
)
{
super
.
onConfigurationChanged
(
config
)
;
return
;
}
try
{
BrowserLocaleManager
.
getInstance
(
)
.
correctLocale
(
this
getResources
(
)
config
)
;
}
catch
(
IllegalStateException
ex
)
{
Log
.
w
(
LOG_TAG
"
Couldn
'
t
correct
locale
.
"
ex
)
;
}
super
.
onConfigurationChanged
(
config
)
;
}
public
void
onActivityPause
(
GeckoActivityStatus
activity
)
{
mInBackground
=
true
;
if
(
(
activity
.
isFinishing
(
)
=
=
false
)
&
&
(
activity
.
isGeckoActivityOpened
(
)
=
=
false
)
)
{
GeckoThread
.
onPause
(
)
;
mPausedGecko
=
true
;
final
BrowserDB
db
=
BrowserDB
.
from
(
this
)
;
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
db
.
expireHistory
(
getContentResolver
(
)
BrowserContract
.
ExpirePriority
.
NORMAL
)
;
}
}
)
;
GeckoNetworkManager
.
getInstance
(
)
.
stop
(
)
;
}
}
public
void
onActivityResume
(
GeckoActivityStatus
activity
)
{
if
(
mIsInitialResume
)
{
GeckoBatteryManager
.
getInstance
(
)
.
start
(
this
)
;
GeckoNetworkManager
.
getInstance
(
)
.
start
(
this
)
;
mIsInitialResume
=
false
;
}
else
if
(
mPausedGecko
)
{
GeckoThread
.
onResume
(
)
;
mPausedGecko
=
false
;
GeckoNetworkManager
.
getInstance
(
)
.
start
(
this
)
;
}
mInBackground
=
false
;
}
Override
public
void
onCreate
(
)
{
Log
.
i
(
LOG_TAG
"
zerdatime
"
+
SystemClock
.
uptimeMillis
(
)
+
"
-
Fennec
application
start
"
)
;
mIsInitialResume
=
true
;
mRefWatcher
=
LeakCanary
.
install
(
this
)
;
final
Context
context
=
getApplicationContext
(
)
;
GeckoAppShell
.
setApplicationContext
(
context
)
;
HardwareUtils
.
init
(
context
)
;
FilePicker
.
init
(
context
)
;
DownloadsIntegration
.
init
(
)
;
HomePanelsManager
.
getInstance
(
)
.
init
(
context
)
;
GlobalPageMetadata
.
getInstance
(
)
.
init
(
)
;
GeckoAppShell
.
setNotificationListener
(
new
NotificationClient
(
context
)
)
;
NotificationHelper
.
getInstance
(
context
)
.
init
(
)
;
MulticastDNSManager
.
getInstance
(
context
)
.
init
(
)
;
GeckoService
.
register
(
)
;
EventDispatcher
.
getInstance
(
)
.
registerBackgroundThreadListener
(
new
EventListener
(
)
"
Profile
:
Create
"
)
;
super
.
onCreate
(
)
;
}
public
void
onDelayedStartup
(
)
{
if
(
AppConstants
.
MOZ_ANDROID_GCM
)
{
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
final
Class
<
?
>
clazz
=
Class
.
forName
(
"
org
.
mozilla
.
gecko
.
push
.
PushService
"
)
;
final
Method
onCreate
=
clazz
.
getMethod
(
"
onCreate
"
Context
.
class
)
;
onCreate
.
invoke
(
null
getApplicationContext
(
)
)
;
}
catch
(
Exception
e
)
{
Log
.
e
(
LOG_TAG
"
Got
exception
during
startup
;
ignoring
.
"
e
)
;
return
;
}
}
}
)
;
}
GeckoAccessibility
.
setAccessibilityManagerListeners
(
this
)
;
AudioFocusAgent
.
getInstance
(
)
.
attachToContext
(
this
)
;
}
private
class
EventListener
implements
BundleEventListener
{
private
void
onProfileCreate
(
final
String
name
final
String
path
)
{
final
Context
context
=
GeckoApplication
.
this
;
final
GeckoProfile
profile
=
GeckoProfile
.
get
(
context
name
)
;
final
Distribution
distribution
=
Distribution
.
getInstance
(
context
)
;
distribution
.
addOnDistributionReadyCallback
(
new
Distribution
.
ReadyCallback
(
)
{
Override
public
void
distributionNotFound
(
)
{
this
.
distributionFound
(
null
)
;
}
Override
public
void
distributionFound
(
final
Distribution
distribution
)
{
Log
.
d
(
LOG_TAG
"
Running
post
-
distribution
task
:
bookmarks
.
"
)
;
synchronized
(
profile
.
getLock
(
)
)
{
distributionFoundLocked
(
distribution
)
;
}
}
Override
public
void
distributionArrivedLate
(
final
Distribution
distribution
)
{
Log
.
d
(
LOG_TAG
"
Running
late
distribution
task
:
bookmarks
.
"
)
;
synchronized
(
profile
.
getLock
(
)
)
{
distributionArrivedLateLocked
(
distribution
)
;
}
}
private
void
distributionFoundLocked
(
final
Distribution
distribution
)
{
if
(
!
(
new
File
(
path
)
)
.
exists
(
)
)
{
return
;
}
final
ContentResolver
cr
=
context
.
getContentResolver
(
)
;
final
LocalBrowserDB
db
=
new
LocalBrowserDB
(
profile
.
getName
(
)
)
;
final
int
offset
=
distribution
=
=
null
?
0
:
db
.
addDistributionBookmarks
(
cr
distribution
0
)
;
db
.
addDefaultBookmarks
(
context
cr
offset
)
;
Log
.
d
(
LOG_TAG
"
Running
post
-
distribution
task
:
android
preferences
.
"
)
;
DistroSharedPrefsImport
.
importPreferences
(
context
distribution
)
;
}
private
void
distributionArrivedLateLocked
(
final
Distribution
distribution
)
{
if
(
!
(
new
File
(
path
)
)
.
exists
(
)
)
{
return
;
}
final
ContentResolver
cr
=
context
.
getContentResolver
(
)
;
final
LocalBrowserDB
db
=
new
LocalBrowserDB
(
profile
.
getName
(
)
)
;
final
int
offset
=
db
.
getCount
(
cr
"
bookmarks
"
)
;
db
.
addDistributionBookmarks
(
cr
distribution
offset
)
;
Log
.
d
(
LOG_TAG
"
Running
late
distribution
task
:
android
preferences
.
"
)
;
DistroSharedPrefsImport
.
importPreferences
(
context
distribution
)
;
}
}
)
;
}
Override
public
void
handleMessage
(
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
"
Profile
:
Create
"
.
equals
(
event
)
)
{
onProfileCreate
(
message
.
getString
(
"
name
"
)
message
.
getString
(
"
path
"
)
)
;
}
}
}
public
boolean
isApplicationInBackground
(
)
{
return
mInBackground
;
}
public
LightweightTheme
getLightweightTheme
(
)
{
return
mLightweightTheme
;
}
public
void
prepareLightweightTheme
(
)
{
mLightweightTheme
=
new
LightweightTheme
(
this
)
;
}
}
