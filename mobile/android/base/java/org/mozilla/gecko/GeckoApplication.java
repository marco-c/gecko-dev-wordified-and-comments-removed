package
org
.
mozilla
.
gecko
;
import
android
.
app
.
Application
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
SharedPreferences
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
Canvas
;
import
android
.
graphics
.
Color
;
import
android
.
graphics
.
Paint
;
import
android
.
graphics
.
Rect
;
import
android
.
graphics
.
RectF
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Process
;
import
android
.
os
.
SystemClock
;
import
android
.
util
.
Log
;
import
com
.
squareup
.
leakcanary
.
LeakCanary
;
import
com
.
squareup
.
leakcanary
.
RefWatcher
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserDB
;
import
org
.
mozilla
.
gecko
.
db
.
LocalBrowserDB
;
import
org
.
mozilla
.
gecko
.
db
.
UrlAnnotations
;
import
org
.
mozilla
.
gecko
.
distribution
.
Distribution
;
import
org
.
mozilla
.
gecko
.
gfx
.
BitmapUtils
;
import
org
.
mozilla
.
gecko
.
home
.
HomePanelsManager
;
import
org
.
mozilla
.
gecko
.
icons
.
IconCallback
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
import
org
.
mozilla
.
gecko
.
icons
.
Icons
;
import
org
.
mozilla
.
gecko
.
lwt
.
LightweightTheme
;
import
org
.
mozilla
.
gecko
.
mdns
.
MulticastDNSManager
;
import
org
.
mozilla
.
gecko
.
media
.
AudioFocusAgent
;
import
org
.
mozilla
.
gecko
.
media
.
RemoteManager
;
import
org
.
mozilla
.
gecko
.
notifications
.
NotificationClient
;
import
org
.
mozilla
.
gecko
.
notifications
.
NotificationHelper
;
import
org
.
mozilla
.
gecko
.
preferences
.
DistroSharedPrefsImport
;
import
org
.
mozilla
.
gecko
.
util
.
ActivityUtils
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
util
.
HardwareUtils
;
import
org
.
mozilla
.
gecko
.
util
.
PRNGFixes
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
org
.
mozilla
.
gecko
.
util
.
UUIDUtil
;
import
java
.
io
.
File
;
import
java
.
lang
.
reflect
.
Method
;
import
java
.
util
.
UUID
;
public
class
GeckoApplication
extends
Application
implements
ContextGetter
{
private
static
final
String
LOG_TAG
=
"
GeckoApplication
"
;
private
static
final
String
MEDIA_DECODING_PROCESS_CRASH
=
"
MEDIA_DECODING_PROCESS_CRASH
"
;
private
boolean
mInBackground
;
private
boolean
mPausedGecko
;
private
boolean
mIsInitialResume
;
private
LightweightTheme
mLightweightTheme
;
private
RefWatcher
mRefWatcher
;
private
static
String
sSessionUUID
=
null
;
public
GeckoApplication
(
)
{
super
(
)
;
}
public
static
RefWatcher
getRefWatcher
(
Context
context
)
{
GeckoApplication
app
=
(
GeckoApplication
)
context
.
getApplicationContext
(
)
;
return
app
.
mRefWatcher
;
}
public
static
void
watchReference
(
Context
context
Object
object
)
{
if
(
context
=
=
null
)
{
return
;
}
getRefWatcher
(
context
)
.
watch
(
object
)
;
}
public
static
String
getSessionUUID
(
)
{
return
sSessionUUID
;
}
public
static
String
addDefaultGeckoArgs
(
String
args
)
{
if
(
!
AppConstants
.
MOZILLA_OFFICIAL
)
{
Log
.
w
(
LOG_TAG
"
STARTUP
PERFORMANCE
WARNING
:
un
-
official
build
:
purging
the
"
+
"
startup
(
JavaScript
)
caches
.
"
)
;
args
=
(
args
!
=
null
)
?
(
args
+
"
-
purgecaches
"
)
:
"
-
purgecaches
"
;
}
return
args
;
}
public
static
String
getDefaultUAString
(
)
{
return
HardwareUtils
.
isTablet
(
)
?
AppConstants
.
USER_AGENT_FENNEC_TABLET
:
AppConstants
.
USER_AGENT_FENNEC_MOBILE
;
}
public
static
void
shutdown
(
final
Intent
restartIntent
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
GeckoThread
.
isStateAtLeast
(
GeckoThread
.
State
.
PROFILE_READY
)
)
{
GeckoThread
.
waitOnGecko
(
)
;
}
if
(
restartIntent
=
=
null
)
{
Process
.
killProcess
(
Process
.
myPid
(
)
)
;
return
;
}
final
Context
context
=
GeckoAppShell
.
getApplicationContext
(
)
;
final
Intent
intent
=
new
Intent
(
)
;
intent
.
setClass
(
context
Restarter
.
class
)
.
putExtra
(
"
pid
"
Process
.
myPid
(
)
)
.
putExtra
(
Intent
.
EXTRA_INTENT
restartIntent
)
;
context
.
startService
(
intent
)
;
}
Override
public
Context
getContext
(
)
{
return
this
;
}
Override
public
SharedPreferences
getSharedPreferences
(
)
{
return
GeckoSharedPrefs
.
forApp
(
this
)
;
}
Override
public
void
onConfigurationChanged
(
Configuration
config
)
{
Log
.
d
(
LOG_TAG
"
onConfigurationChanged
:
"
+
config
.
locale
+
"
background
:
"
+
mInBackground
)
;
if
(
mInBackground
)
{
super
.
onConfigurationChanged
(
config
)
;
return
;
}
try
{
BrowserLocaleManager
.
getInstance
(
)
.
correctLocale
(
this
getResources
(
)
config
)
;
}
catch
(
IllegalStateException
ex
)
{
Log
.
w
(
LOG_TAG
"
Couldn
'
t
correct
locale
.
"
ex
)
;
}
super
.
onConfigurationChanged
(
config
)
;
}
public
void
onActivityPause
(
GeckoActivityStatus
activity
)
{
mInBackground
=
true
;
if
(
(
activity
.
isFinishing
(
)
=
=
false
)
&
&
(
activity
.
isGeckoActivityOpened
(
)
=
=
false
)
)
{
GeckoThread
.
onPause
(
)
;
mPausedGecko
=
true
;
final
BrowserDB
db
=
BrowserDB
.
from
(
this
)
;
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
db
.
expireHistory
(
getContentResolver
(
)
BrowserContract
.
ExpirePriority
.
NORMAL
)
;
}
}
)
;
GeckoNetworkManager
.
getInstance
(
)
.
stop
(
)
;
}
}
public
void
onActivityResume
(
GeckoActivityStatus
activity
)
{
if
(
mIsInitialResume
)
{
GeckoBatteryManager
.
getInstance
(
)
.
start
(
this
)
;
GeckoFontScaleListener
.
getInstance
(
)
.
initialize
(
this
)
;
GeckoNetworkManager
.
getInstance
(
)
.
start
(
this
)
;
mIsInitialResume
=
false
;
}
else
if
(
mPausedGecko
)
{
GeckoThread
.
onResume
(
)
;
mPausedGecko
=
false
;
GeckoNetworkManager
.
getInstance
(
)
.
start
(
this
)
;
}
mInBackground
=
false
;
}
Override
public
void
onCreate
(
)
{
Log
.
i
(
LOG_TAG
"
zerdatime
"
+
SystemClock
.
elapsedRealtime
(
)
+
"
-
application
start
"
)
;
try
{
PRNGFixes
.
apply
(
)
;
}
catch
(
Exception
e
)
{
Log
.
e
(
LOG_TAG
"
Got
exception
applying
PRNGFixes
!
Cryptographic
data
produced
on
this
device
may
be
weak
.
Ignoring
.
"
e
)
;
}
mIsInitialResume
=
true
;
mRefWatcher
=
LeakCanary
.
install
(
this
)
;
sSessionUUID
=
UUID
.
randomUUID
(
)
.
toString
(
)
;
registerActivityLifecycleCallbacks
(
GeckoActivityMonitor
.
getInstance
(
)
)
;
final
Context
context
=
getApplicationContext
(
)
;
GeckoAppShell
.
setApplicationContext
(
context
)
;
HardwareUtils
.
init
(
context
)
;
FilePicker
.
init
(
context
)
;
DownloadsIntegration
.
init
(
)
;
HomePanelsManager
.
getInstance
(
)
.
init
(
context
)
;
GlobalPageMetadata
.
getInstance
(
)
.
init
(
)
;
GeckoAppShell
.
setNotificationListener
(
new
NotificationClient
(
context
)
)
;
NotificationHelper
.
getInstance
(
context
)
.
init
(
)
;
MulticastDNSManager
.
getInstance
(
context
)
.
init
(
)
;
GeckoService
.
register
(
)
;
final
EventListener
listener
=
new
EventListener
(
)
;
EventDispatcher
.
getInstance
(
)
.
registerUiThreadListener
(
listener
"
Gecko
:
Exited
"
null
)
;
EventDispatcher
.
getInstance
(
)
.
registerBackgroundThreadListener
(
listener
"
Profile
:
Create
"
null
)
;
super
.
onCreate
(
)
;
}
public
void
onDelayedStartup
(
)
{
if
(
AppConstants
.
MOZ_ANDROID_GCM
)
{
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
final
Class
<
?
>
clazz
=
Class
.
forName
(
"
org
.
mozilla
.
gecko
.
push
.
PushService
"
)
;
final
Method
onCreate
=
clazz
.
getMethod
(
"
onCreate
"
Context
.
class
)
;
onCreate
.
invoke
(
null
getApplicationContext
(
)
)
;
}
catch
(
Exception
e
)
{
Log
.
e
(
LOG_TAG
"
Got
exception
during
startup
;
ignoring
.
"
e
)
;
return
;
}
}
}
)
;
}
GeckoAccessibility
.
setAccessibilityManagerListeners
(
this
)
;
AudioFocusAgent
.
getInstance
(
)
.
attachToContext
(
this
)
;
RemoteManager
.
setCrashReporter
(
new
RemoteManager
.
ICrashReporter
(
)
{
public
void
reportDecodingProcessCrash
(
)
{
Telemetry
.
addToHistogram
(
MEDIA_DECODING_PROCESS_CRASH
1
)
;
}
}
)
;
}
private
class
EventListener
implements
BundleEventListener
{
private
void
onProfileCreate
(
final
String
name
final
String
path
)
{
final
Context
context
=
GeckoApplication
.
this
;
final
GeckoProfile
profile
=
GeckoProfile
.
get
(
context
name
)
;
final
Distribution
distribution
=
Distribution
.
getInstance
(
context
)
;
distribution
.
addOnDistributionReadyCallback
(
new
Distribution
.
ReadyCallback
(
)
{
Override
public
void
distributionNotFound
(
)
{
this
.
distributionFound
(
null
)
;
}
Override
public
void
distributionFound
(
final
Distribution
distribution
)
{
Log
.
d
(
LOG_TAG
"
Running
post
-
distribution
task
:
bookmarks
.
"
)
;
synchronized
(
profile
.
getLock
(
)
)
{
distributionFoundLocked
(
distribution
)
;
}
}
Override
public
void
distributionArrivedLate
(
final
Distribution
distribution
)
{
Log
.
d
(
LOG_TAG
"
Running
late
distribution
task
:
bookmarks
.
"
)
;
synchronized
(
profile
.
getLock
(
)
)
{
distributionArrivedLateLocked
(
distribution
)
;
}
}
private
void
distributionFoundLocked
(
final
Distribution
distribution
)
{
if
(
!
(
new
File
(
path
)
)
.
exists
(
)
)
{
return
;
}
final
ContentResolver
cr
=
context
.
getContentResolver
(
)
;
final
LocalBrowserDB
db
=
new
LocalBrowserDB
(
profile
.
getName
(
)
)
;
final
int
offset
=
distribution
=
=
null
?
0
:
db
.
addDistributionBookmarks
(
cr
distribution
0
)
;
db
.
addDefaultBookmarks
(
context
cr
offset
)
;
Log
.
d
(
LOG_TAG
"
Running
post
-
distribution
task
:
android
preferences
.
"
)
;
DistroSharedPrefsImport
.
importPreferences
(
context
distribution
)
;
}
private
void
distributionArrivedLateLocked
(
final
Distribution
distribution
)
{
if
(
!
(
new
File
(
path
)
)
.
exists
(
)
)
{
return
;
}
final
ContentResolver
cr
=
context
.
getContentResolver
(
)
;
final
LocalBrowserDB
db
=
new
LocalBrowserDB
(
profile
.
getName
(
)
)
;
final
int
offset
=
db
.
getCount
(
cr
"
bookmarks
"
)
;
db
.
addDistributionBookmarks
(
cr
distribution
offset
)
;
Log
.
d
(
LOG_TAG
"
Running
late
distribution
task
:
android
preferences
.
"
)
;
DistroSharedPrefsImport
.
importPreferences
(
context
distribution
)
;
}
}
)
;
}
Override
public
void
handleMessage
(
final
String
event
final
GeckoBundle
message
final
EventCallback
callback
)
{
if
(
"
Profile
:
Create
"
.
equals
(
event
)
)
{
onProfileCreate
(
message
.
getString
(
"
name
"
)
message
.
getString
(
"
path
"
)
)
;
}
else
if
(
"
Gecko
:
Exited
"
.
equals
(
event
)
)
{
final
Intent
restartIntent
;
if
(
message
.
getBoolean
(
"
restart
"
)
)
{
restartIntent
=
new
Intent
(
Intent
.
ACTION_MAIN
)
;
restartIntent
.
setClassName
(
GeckoAppShell
.
getApplicationContext
(
)
AppConstants
.
MOZ_ANDROID_BROWSER_INTENT_CLASS
)
;
}
else
{
restartIntent
=
null
;
}
shutdown
(
restartIntent
)
;
}
}
}
public
boolean
isApplicationInBackground
(
)
{
return
mInBackground
;
}
public
LightweightTheme
getLightweightTheme
(
)
{
return
mLightweightTheme
;
}
public
void
prepareLightweightTheme
(
)
{
mLightweightTheme
=
new
LightweightTheme
(
this
)
;
}
WrapForJNI
(
calledFrom
=
"
gecko
"
)
public
static
void
createShortcut
(
final
String
title
final
String
url
)
{
final
Tab
selectedTab
=
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
;
final
String
manifestUrl
=
selectedTab
.
getManifestUrl
(
)
;
if
(
manifestUrl
!
=
null
)
{
final
GeckoBundle
message
=
new
GeckoBundle
(
)
;
message
.
putInt
(
"
iconSize
"
GeckoAppShell
.
getPreferredIconSize
(
)
)
;
message
.
putString
(
"
manifestUrl
"
manifestUrl
)
;
message
.
putString
(
"
originalUrl
"
url
)
;
message
.
putString
(
"
originalTitle
"
title
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
Browser
:
LoadManifest
"
message
)
;
return
;
}
createBrowserShortcut
(
title
url
)
;
}
public
static
void
createBrowserShortcut
(
final
String
title
final
String
url
)
{
Icons
.
with
(
GeckoAppShell
.
getApplicationContext
(
)
)
.
pageUrl
(
url
)
.
skipNetwork
(
)
.
skipMemory
(
)
.
forLauncherIcon
(
)
.
build
(
)
.
execute
(
new
IconCallback
(
)
{
Override
public
void
onIconResponse
(
final
IconResponse
response
)
{
createShortcutWithIcon
(
title
url
response
.
getBitmap
(
)
)
;
}
}
)
;
}
static
void
createShortcutWithIcon
(
final
String
aTitle
final
String
aURI
final
Bitmap
aIcon
)
{
final
Intent
shortcutIntent
=
new
Intent
(
)
;
shortcutIntent
.
setAction
(
GeckoApp
.
ACTION_HOMESCREEN_SHORTCUT
)
;
shortcutIntent
.
setData
(
Uri
.
parse
(
aURI
)
)
;
shortcutIntent
.
setClassName
(
AppConstants
.
ANDROID_PACKAGE_NAME
AppConstants
.
MOZ_ANDROID_BROWSER_INTENT_CLASS
)
;
createHomescreenIcon
(
shortcutIntent
aTitle
aURI
aIcon
)
;
}
public
static
void
createAppShortcut
(
final
String
aTitle
final
String
aURI
final
String
manifestPath
final
Bitmap
aIcon
)
{
final
Intent
shortcutIntent
=
new
Intent
(
)
;
shortcutIntent
.
setAction
(
GeckoApp
.
ACTION_WEBAPP
)
;
shortcutIntent
.
setData
(
Uri
.
parse
(
aURI
)
)
;
shortcutIntent
.
putExtra
(
"
MANIFEST_PATH
"
manifestPath
)
;
shortcutIntent
.
setClassName
(
AppConstants
.
ANDROID_PACKAGE_NAME
LauncherActivity
.
class
.
getName
(
)
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
ACTION
TelemetryContract
.
Method
.
CONTEXT_MENU
"
pwa_add_to_launcher
"
)
;
createHomescreenIcon
(
shortcutIntent
aTitle
aURI
aIcon
)
;
}
private
static
void
createHomescreenIcon
(
final
Intent
shortcutIntent
final
String
aTitle
final
String
aURI
final
Bitmap
aIcon
)
{
final
Intent
intent
=
new
Intent
(
)
;
intent
.
putExtra
(
Intent
.
EXTRA_SHORTCUT_INTENT
shortcutIntent
)
;
intent
.
putExtra
(
Intent
.
EXTRA_SHORTCUT_ICON
getLauncherIcon
(
aIcon
GeckoAppShell
.
getPreferredIconSize
(
)
)
)
;
if
(
aTitle
!
=
null
)
{
intent
.
putExtra
(
Intent
.
EXTRA_SHORTCUT_NAME
aTitle
)
;
}
else
{
intent
.
putExtra
(
Intent
.
EXTRA_SHORTCUT_NAME
aURI
)
;
}
final
Context
context
=
GeckoAppShell
.
getApplicationContext
(
)
;
intent
.
putExtra
(
"
duplicate
"
false
)
;
intent
.
setAction
(
"
com
.
android
.
launcher
.
action
.
INSTALL_SHORTCUT
"
)
;
context
.
sendBroadcast
(
intent
)
;
final
UrlAnnotations
urlAnnotations
=
BrowserDB
.
from
(
context
)
.
getUrlAnnotations
(
)
;
urlAnnotations
.
insertHomeScreenShortcut
(
context
.
getContentResolver
(
)
aURI
true
)
;
ActivityUtils
.
goToHomeScreen
(
context
)
;
}
private
static
Bitmap
getLauncherIcon
(
Bitmap
aSource
int
size
)
{
final
float
[
]
DEFAULT_LAUNCHER_ICON_HSV
=
{
32
.
0f
1
.
0f
1
.
0f
}
;
final
int
kOffset
=
6
;
final
int
kRadius
=
5
;
final
int
insetSize
=
aSource
!
=
null
?
size
*
2
/
3
:
size
;
final
Bitmap
bitmap
=
Bitmap
.
createBitmap
(
size
size
Bitmap
.
Config
.
ARGB_8888
)
;
final
Canvas
canvas
=
new
Canvas
(
bitmap
)
;
final
Paint
paint
=
new
Paint
(
)
;
if
(
aSource
=
=
null
)
{
paint
.
setColor
(
Color
.
HSVToColor
(
DEFAULT_LAUNCHER_ICON_HSV
)
)
;
canvas
.
drawRoundRect
(
new
RectF
(
kOffset
kOffset
size
-
kOffset
size
-
kOffset
)
kRadius
kRadius
paint
)
;
}
else
if
(
aSource
.
getWidth
(
)
>
=
insetSize
|
|
aSource
.
getHeight
(
)
>
=
insetSize
)
{
final
Rect
iconBounds
=
new
Rect
(
0
0
size
size
)
;
canvas
.
drawBitmap
(
aSource
null
iconBounds
null
)
;
return
bitmap
;
}
else
{
final
int
color
=
BitmapUtils
.
getDominantColor
(
aSource
)
;
paint
.
setColor
(
color
)
;
canvas
.
drawRoundRect
(
new
RectF
(
kOffset
kOffset
size
-
kOffset
size
-
kOffset
)
kRadius
kRadius
paint
)
;
paint
.
setColor
(
Color
.
argb
(
100
255
255
255
)
)
;
canvas
.
drawRoundRect
(
new
RectF
(
kOffset
kOffset
size
-
kOffset
size
-
kOffset
)
kRadius
kRadius
paint
)
;
}
final
Context
context
=
GeckoAppShell
.
getApplicationContext
(
)
;
final
Bitmap
overlay
=
BitmapUtils
.
decodeResource
(
context
R
.
drawable
.
home_bg
)
;
canvas
.
drawBitmap
(
overlay
null
new
Rect
(
0
0
size
size
)
null
)
;
if
(
aSource
=
=
null
)
aSource
=
BitmapUtils
.
decodeResource
(
context
R
.
drawable
.
home_star
)
;
final
int
sWidth
=
insetSize
/
2
;
final
int
sHeight
=
sWidth
;
final
int
halfSize
=
size
/
2
;
canvas
.
drawBitmap
(
aSource
null
new
Rect
(
halfSize
-
sWidth
halfSize
-
sHeight
halfSize
+
sWidth
halfSize
+
sHeight
)
null
)
;
return
bitmap
;
}
}
