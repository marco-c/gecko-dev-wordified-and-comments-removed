package
org
.
mozilla
.
gecko
;
import
android
.
app
.
Application
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
os
.
SystemClock
;
import
android
.
util
.
Log
;
import
com
.
squareup
.
leakcanary
.
LeakCanary
;
import
com
.
squareup
.
leakcanary
.
RefWatcher
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserDB
;
import
org
.
mozilla
.
gecko
.
db
.
LocalBrowserDB
;
import
org
.
mozilla
.
gecko
.
dlc
.
DownloadContentService
;
import
org
.
mozilla
.
gecko
.
home
.
HomePanelsManager
;
import
org
.
mozilla
.
gecko
.
lwt
.
LightweightTheme
;
import
org
.
mozilla
.
gecko
.
mdns
.
MulticastDNSManager
;
import
org
.
mozilla
.
gecko
.
notifications
.
NotificationHelper
;
import
org
.
mozilla
.
gecko
.
util
.
Clipboard
;
import
org
.
mozilla
.
gecko
.
util
.
HardwareUtils
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
java
.
io
.
File
;
import
java
.
lang
.
reflect
.
Method
;
public
class
GeckoApplication
extends
Application
implements
ContextGetter
{
private
static
final
String
LOG_TAG
=
"
GeckoApplication
"
;
private
static
volatile
GeckoApplication
instance
;
private
boolean
mInBackground
;
private
boolean
mPausedGecko
;
private
LightweightTheme
mLightweightTheme
;
private
RefWatcher
mRefWatcher
;
public
GeckoApplication
(
)
{
super
(
)
;
instance
=
this
;
}
public
static
GeckoApplication
get
(
)
{
return
instance
;
}
public
static
RefWatcher
getRefWatcher
(
Context
context
)
{
GeckoApplication
app
=
(
GeckoApplication
)
context
.
getApplicationContext
(
)
;
return
app
.
mRefWatcher
;
}
public
static
void
watchReference
(
Context
context
Object
object
)
{
if
(
context
=
=
null
)
{
return
;
}
getRefWatcher
(
context
)
.
watch
(
object
)
;
}
Override
public
Context
getContext
(
)
{
return
this
;
}
Override
public
SharedPreferences
getSharedPreferences
(
)
{
return
GeckoSharedPrefs
.
forApp
(
this
)
;
}
Override
public
void
onConfigurationChanged
(
Configuration
config
)
{
Log
.
d
(
LOG_TAG
"
onConfigurationChanged
:
"
+
config
.
locale
+
"
background
:
"
+
mInBackground
)
;
if
(
mInBackground
)
{
super
.
onConfigurationChanged
(
config
)
;
return
;
}
try
{
BrowserLocaleManager
.
getInstance
(
)
.
correctLocale
(
this
getResources
(
)
config
)
;
}
catch
(
IllegalStateException
ex
)
{
Log
.
w
(
LOG_TAG
"
Couldn
'
t
correct
locale
.
"
ex
)
;
}
super
.
onConfigurationChanged
(
config
)
;
}
public
void
onActivityPause
(
GeckoActivityStatus
activity
)
{
mInBackground
=
true
;
if
(
(
activity
.
isFinishing
(
)
=
=
false
)
&
&
(
activity
.
isGeckoActivityOpened
(
)
=
=
false
)
)
{
GeckoThread
.
onPause
(
)
;
mPausedGecko
=
true
;
final
BrowserDB
db
=
GeckoProfile
.
get
(
this
)
.
getDB
(
)
;
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
db
.
expireHistory
(
getContentResolver
(
)
BrowserContract
.
ExpirePriority
.
NORMAL
)
;
}
}
)
;
}
GeckoNetworkManager
.
getInstance
(
)
.
stop
(
)
;
}
public
void
onActivityResume
(
GeckoActivityStatus
activity
)
{
if
(
mPausedGecko
)
{
GeckoThread
.
onResume
(
)
;
mPausedGecko
=
false
;
}
GeckoBatteryManager
.
getInstance
(
)
.
start
(
this
)
;
GeckoNetworkManager
.
getInstance
(
)
.
start
(
this
)
;
mInBackground
=
false
;
}
Override
protected
void
attachBaseContext
(
Context
base
)
{
super
.
attachBaseContext
(
base
)
;
AppConstants
.
maybeInstallMultiDex
(
base
)
;
}
Override
public
void
onCreate
(
)
{
Log
.
i
(
LOG_TAG
"
zerdatime
"
+
SystemClock
.
uptimeMillis
(
)
+
"
-
Fennec
application
start
"
)
;
mRefWatcher
=
LeakCanary
.
install
(
this
)
;
final
Context
context
=
getApplicationContext
(
)
;
HardwareUtils
.
init
(
context
)
;
Clipboard
.
init
(
context
)
;
FilePicker
.
init
(
context
)
;
DownloadsIntegration
.
init
(
)
;
HomePanelsManager
.
getInstance
(
)
.
init
(
context
)
;
NotificationHelper
.
getInstance
(
context
)
.
init
(
)
;
MulticastDNSManager
.
getInstance
(
context
)
.
init
(
)
;
GeckoProfile
.
setBrowserDBFactory
(
new
BrowserDB
.
Factory
(
)
{
Override
public
BrowserDB
get
(
String
profileName
File
profileDir
)
{
return
new
LocalBrowserDB
(
profileName
)
;
}
}
)
;
GeckoService
.
register
(
)
;
super
.
onCreate
(
)
;
}
public
void
onDelayedStartup
(
)
{
if
(
AppConstants
.
MOZ_ANDROID_GCM
)
{
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
try
{
final
Class
<
?
>
clazz
=
Class
.
forName
(
"
org
.
mozilla
.
gecko
.
push
.
PushService
"
)
;
final
Method
onCreate
=
clazz
.
getMethod
(
"
onCreate
"
Context
.
class
)
;
onCreate
.
invoke
(
null
getApplicationContext
(
)
)
;
}
catch
(
Exception
e
)
{
Log
.
e
(
LOG_TAG
"
Got
exception
during
startup
;
ignoring
.
"
e
)
;
return
;
}
}
}
)
;
}
if
(
AppConstants
.
MOZ_ANDROID_DOWNLOAD_CONTENT_SERVICE
)
{
DownloadContentService
.
startStudy
(
this
)
;
}
GeckoAccessibility
.
setAccessibilityManagerListeners
(
this
)
;
}
public
boolean
isApplicationInBackground
(
)
{
return
mInBackground
;
}
public
LightweightTheme
getLightweightTheme
(
)
{
return
mLightweightTheme
;
}
public
void
prepareLightweightTheme
(
)
{
mLightweightTheme
=
new
LightweightTheme
(
this
)
;
}
}
