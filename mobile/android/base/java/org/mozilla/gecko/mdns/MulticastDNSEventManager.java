package
org
.
mozilla
.
gecko
.
mdns
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
support
.
annotation
.
UiThread
;
class
MulticastDNSEventManager
{
private
BundleEventListener
mListener
=
null
;
private
boolean
mEventsRegistered
=
false
;
MulticastDNSEventManager
(
final
BundleEventListener
listener
)
{
mListener
=
listener
;
}
UiThread
public
void
init
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
mEventsRegistered
|
|
mListener
=
=
null
)
{
return
;
}
registerEvents
(
)
;
mEventsRegistered
=
true
;
}
UiThread
public
void
tearDown
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
!
mEventsRegistered
|
|
mListener
=
=
null
)
{
return
;
}
unregisterEvents
(
)
;
mEventsRegistered
=
false
;
}
private
void
registerEvents
(
)
{
EventDispatcher
.
getInstance
(
)
.
registerGeckoThreadListener
(
mListener
"
NsdManager
:
DiscoverServices
"
"
NsdManager
:
StopServiceDiscovery
"
"
NsdManager
:
RegisterService
"
"
NsdManager
:
UnregisterService
"
"
NsdManager
:
ResolveService
"
)
;
}
private
void
unregisterEvents
(
)
{
EventDispatcher
.
getInstance
(
)
.
unregisterGeckoThreadListener
(
mListener
"
NsdManager
:
DiscoverServices
"
"
NsdManager
:
StopServiceDiscovery
"
"
NsdManager
:
RegisterService
"
"
NsdManager
:
UnregisterService
"
"
NsdManager
:
ResolveService
"
)
;
}
}
