package
org
.
mozilla
.
gecko
.
gfx
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
mozglue
.
JNIObject
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
util
.
Log
;
public
class
GLController
extends
JNIObject
{
private
static
final
String
LOGTAG
=
"
GeckoGLController
"
;
LayerView
mView
;
private
boolean
mServerSurfaceValid
;
private
int
mWidth
mHeight
;
private
volatile
boolean
mCompositorCreated
;
WrapForJNI
Override
protected
native
void
disposeNative
(
)
;
WrapForJNI
native
void
attachToJava
(
GeckoLayerClient
layerClient
NativePanZoomController
npzc
)
;
WrapForJNI
native
void
onSizeChanged
(
int
windowWidth
int
windowHeight
int
screenWidth
int
screenHeight
)
;
WrapForJNI
private
native
void
createCompositor
(
int
width
int
height
)
;
WrapForJNI
private
native
void
pauseCompositor
(
)
;
WrapForJNI
private
native
void
syncResumeResizeCompositor
(
int
width
int
height
)
;
WrapForJNI
private
native
void
syncInvalidateAndScheduleComposite
(
)
;
public
GLController
(
)
{
}
synchronized
void
serverSurfaceDestroyed
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
mServerSurfaceValid
=
false
;
if
(
mCompositorCreated
)
{
pauseCompositor
(
)
;
}
}
void
serverSurfaceChanged
(
int
newWidth
int
newHeight
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
synchronized
(
this
)
{
mWidth
=
newWidth
;
mHeight
=
newHeight
;
mServerSurfaceValid
=
true
;
}
updateCompositor
(
)
;
}
void
updateCompositor
(
)
{
ThreadUtils
.
assertOnUiThread
(
)
;
if
(
mView
=
=
null
)
{
return
;
}
if
(
mCompositorCreated
)
{
resumeCompositor
(
mWidth
mHeight
)
;
return
;
}
if
(
mView
.
getLayerClient
(
)
.
isGeckoReady
(
)
)
{
createCompositor
(
mWidth
mHeight
)
;
compositorCreated
(
)
;
}
}
void
compositorCreated
(
)
{
mCompositorCreated
=
true
;
}
public
boolean
isServerSurfaceValid
(
)
{
return
mServerSurfaceValid
;
}
WrapForJNI
(
allowMultithread
=
true
)
private
synchronized
Object
getSurface
(
)
{
if
(
mView
!
=
null
&
&
isServerSurfaceValid
(
)
)
{
return
mView
.
getSurface
(
)
;
}
else
{
return
null
;
}
}
void
resumeCompositor
(
int
width
int
height
)
{
if
(
mCompositorCreated
)
{
syncResumeResizeCompositor
(
width
height
)
;
mView
.
requestRender
(
)
;
}
}
void
invalidateAndScheduleComposite
(
)
{
if
(
mCompositorCreated
)
{
syncInvalidateAndScheduleComposite
(
)
;
}
}
WrapForJNI
private
void
destroy
(
)
{
mCompositorCreated
=
false
;
ThreadUtils
.
postToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
GLController
.
this
.
disposeNative
(
)
;
}
}
)
;
}
public
static
class
GLControllerException
extends
RuntimeException
{
public
static
final
long
serialVersionUID
=
1L
;
GLControllerException
(
String
e
)
{
super
(
e
)
;
}
}
}
