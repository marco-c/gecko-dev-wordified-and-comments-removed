package
org
.
mozilla
.
gecko
.
gfx
;
import
java
.
nio
.
ByteBuffer
;
import
java
.
nio
.
IntBuffer
;
import
java
.
util
.
ArrayList
;
import
org
.
mozilla
.
gecko
.
AndroidGamepadManager
;
import
org
.
mozilla
.
gecko
.
annotation
.
RobocopTarget
;
import
org
.
mozilla
.
gecko
.
annotation
.
WrapForJNI
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
AppConstants
.
Versions
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
GeckoAccessibility
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
GeckoEvent
;
import
org
.
mozilla
.
gecko
.
PrefsHelper
;
import
org
.
mozilla
.
gecko
.
Tab
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
org
.
mozilla
.
gecko
.
ZoomConstraints
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
BitmapFactory
;
import
android
.
graphics
.
Canvas
;
import
android
.
graphics
.
Color
;
import
android
.
graphics
.
Point
;
import
android
.
graphics
.
PointF
;
import
android
.
graphics
.
Rect
;
import
android
.
graphics
.
SurfaceTexture
;
import
android
.
util
.
AttributeSet
;
import
android
.
util
.
Log
;
import
android
.
view
.
KeyEvent
;
import
android
.
view
.
MotionEvent
;
import
android
.
view
.
SurfaceHolder
;
import
android
.
view
.
SurfaceView
;
import
android
.
view
.
TextureView
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewGroup
;
import
android
.
view
.
InputDevice
;
import
android
.
widget
.
LinearLayout
;
import
android
.
widget
.
ScrollView
;
public
class
LayerView
extends
ScrollView
implements
Tabs
.
OnTabsChangedListener
{
private
static
final
String
LOGTAG
=
"
GeckoLayerView
"
;
private
GeckoLayerClient
mLayerClient
;
private
PanZoomController
mPanZoomController
;
private
DynamicToolbarAnimator
mToolbarAnimator
;
private
final
GLController
mGLController
;
private
LayerRenderer
mRenderer
;
private
int
mPaintState
;
private
int
mBackgroundColor
;
private
FullScreenState
mFullScreenState
;
private
SurfaceView
mSurfaceView
;
private
TextureView
mTextureView
;
private
View
mFillerView
;
private
Listener
mListener
;
private
PointF
mInitialTouchPoint
;
private
boolean
mGeckoIsReady
;
private
float
mSurfaceTranslation
;
private
final
Overscroll
mOverscroll
;
public
static
final
int
PAINT_START
=
0
;
public
static
final
int
PAINT_BEFORE_FIRST
=
1
;
public
static
final
int
PAINT_AFTER_FIRST
=
2
;
public
boolean
shouldUseTextureView
(
)
{
return
false
;
}
public
LayerView
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
mGLController
=
GLController
.
getInstance
(
this
)
;
mPaintState
=
PAINT_START
;
mBackgroundColor
=
Color
.
WHITE
;
mFullScreenState
=
FullScreenState
.
NONE
;
if
(
Versions
.
feature14Plus
)
{
mOverscroll
=
new
OverscrollEdgeEffect
(
this
)
;
}
else
{
mOverscroll
=
null
;
}
Tabs
.
registerOnTabsChangedListener
(
this
)
;
}
public
LayerView
(
Context
context
)
{
this
(
context
null
)
;
}
public
void
initializeView
(
EventDispatcher
eventDispatcher
)
{
mLayerClient
=
new
GeckoLayerClient
(
getContext
(
)
this
eventDispatcher
)
;
if
(
mOverscroll
!
=
null
)
{
mLayerClient
.
setOverscrollHandler
(
mOverscroll
)
;
}
mPanZoomController
=
mLayerClient
.
getPanZoomController
(
)
;
mToolbarAnimator
=
mLayerClient
.
getDynamicToolbarAnimator
(
)
;
mRenderer
=
new
LayerRenderer
(
this
)
;
setFocusable
(
true
)
;
setFocusableInTouchMode
(
true
)
;
GeckoAccessibility
.
setDelegate
(
this
)
;
GeckoAccessibility
.
setAccessibilityStateChangeListener
(
getContext
(
)
)
;
}
public
void
setIsLongpressEnabled
(
boolean
isLongpressEnabled
)
{
mPanZoomController
.
setIsLongpressEnabled
(
isLongpressEnabled
)
;
}
private
static
Point
getEventRadius
(
MotionEvent
event
)
{
return
new
Point
(
(
int
)
event
.
getToolMajor
(
)
/
2
(
int
)
event
.
getToolMinor
(
)
/
2
)
;
}
public
void
geckoConnected
(
)
{
PrefsHelper
.
getPref
(
"
gfx
.
android
.
rgb16
.
force
"
new
PrefsHelper
.
PrefHandlerBase
(
)
{
Override
public
void
prefValue
(
String
pref
boolean
force16bit
)
{
if
(
force16bit
)
{
GeckoAppShell
.
setScreenDepthOverride
(
16
)
;
}
}
}
)
;
mLayerClient
.
notifyGeckoReady
(
)
;
mInitialTouchPoint
=
null
;
mGeckoIsReady
=
true
;
}
private
boolean
sendEventToGecko
(
MotionEvent
event
)
{
if
(
!
mGeckoIsReady
)
{
return
false
;
}
int
action
=
event
.
getActionMasked
(
)
;
PointF
point
=
new
PointF
(
event
.
getX
(
)
event
.
getY
(
)
)
;
if
(
action
=
=
MotionEvent
.
ACTION_DOWN
)
{
mInitialTouchPoint
=
point
;
}
if
(
mInitialTouchPoint
!
=
null
&
&
action
=
=
MotionEvent
.
ACTION_MOVE
)
{
Point
p
=
getEventRadius
(
event
)
;
if
(
PointUtils
.
subtract
(
point
mInitialTouchPoint
)
.
length
(
)
<
Math
.
max
(
PanZoomController
.
CLICK_THRESHOLD
Math
.
min
(
Math
.
min
(
p
.
x
p
.
y
)
PanZoomController
.
PAN_THRESHOLD
)
)
)
{
return
true
;
}
else
{
mInitialTouchPoint
=
null
;
}
}
GeckoAppShell
.
sendEventToGecko
(
GeckoEvent
.
createMotionEvent
(
event
false
)
)
;
return
true
;
}
public
void
showSurface
(
)
{
mSurfaceView
.
setVisibility
(
View
.
VISIBLE
)
;
}
public
void
hideSurface
(
)
{
mSurfaceView
.
setVisibility
(
View
.
INVISIBLE
)
;
}
public
void
destroy
(
)
{
if
(
mLayerClient
!
=
null
)
{
mLayerClient
.
destroy
(
)
;
}
if
(
mRenderer
!
=
null
)
{
mRenderer
.
destroy
(
)
;
}
Tabs
.
unregisterOnTabsChangedListener
(
this
)
;
}
Override
public
void
dispatchDraw
(
final
Canvas
canvas
)
{
super
.
dispatchDraw
(
canvas
)
;
if
(
mLayerClient
!
=
null
&
&
mOverscroll
!
=
null
)
{
mOverscroll
.
draw
(
canvas
getViewportMetrics
(
)
)
;
}
}
Override
public
boolean
onTouchEvent
(
MotionEvent
event
)
{
if
(
event
.
getActionMasked
(
)
=
=
MotionEvent
.
ACTION_DOWN
)
{
requestFocus
(
)
;
}
event
.
offsetLocation
(
0
-
mSurfaceTranslation
)
;
if
(
mToolbarAnimator
!
=
null
&
&
mToolbarAnimator
.
onInterceptTouchEvent
(
event
)
)
{
return
true
;
}
if
(
AppConstants
.
MOZ_ANDROID_APZ
&
&
!
mGeckoIsReady
)
{
return
true
;
}
if
(
mPanZoomController
!
=
null
&
&
mPanZoomController
.
onTouchEvent
(
event
)
)
{
return
true
;
}
return
sendEventToGecko
(
event
)
;
}
Override
public
boolean
onHoverEvent
(
MotionEvent
event
)
{
if
(
event
.
getSource
(
)
=
=
InputDevice
.
SOURCE_TOUCHSCREEN
&
&
!
GeckoAccessibility
.
isEnabled
(
)
)
{
return
false
;
}
if
(
AppConstants
.
MOZ_ANDROID_APZ
&
&
mPanZoomController
!
=
null
&
&
mPanZoomController
.
onTouchEvent
(
event
)
)
{
return
true
;
}
return
sendEventToGecko
(
event
)
;
}
Override
public
boolean
onGenericMotionEvent
(
MotionEvent
event
)
{
if
(
AndroidGamepadManager
.
handleMotionEvent
(
event
)
)
{
return
true
;
}
if
(
AppConstants
.
MOZ_ANDROID_APZ
&
&
!
mGeckoIsReady
)
{
return
true
;
}
if
(
mPanZoomController
!
=
null
&
&
mPanZoomController
.
onMotionEvent
(
event
)
)
{
return
true
;
}
return
false
;
}
Override
protected
void
onAttachedToWindow
(
)
{
setDescendantFocusability
(
FOCUS_BLOCK_DESCENDANTS
)
;
if
(
shouldUseTextureView
(
)
)
{
mTextureView
=
new
TextureView
(
getContext
(
)
)
;
mTextureView
.
setSurfaceTextureListener
(
new
SurfaceTextureListener
(
)
)
;
mTextureView
.
setBackgroundColor
(
Color
.
WHITE
)
;
addView
(
mTextureView
ViewGroup
.
LayoutParams
.
MATCH_PARENT
ViewGroup
.
LayoutParams
.
MATCH_PARENT
)
;
}
else
{
setWillNotCacheDrawing
(
false
)
;
mSurfaceView
=
new
LayerSurfaceView
(
getContext
(
)
this
)
;
mSurfaceView
.
setBackgroundColor
(
Color
.
WHITE
)
;
Log
.
i
(
"
GeckoBug1151102
"
"
Initialized
surfaceview
"
)
;
mFillerView
=
new
View
(
getContext
(
)
)
{
Override
protected
void
onMeasure
(
int
aWidthSpec
int
aHeightSpec
)
{
setMeasuredDimension
(
0
Math
.
round
(
mToolbarAnimator
.
getMaxTranslation
(
)
)
)
;
}
}
;
mFillerView
.
setBackgroundColor
(
Color
.
RED
)
;
LinearLayout
container
=
new
LinearLayout
(
getContext
(
)
)
;
container
.
setOrientation
(
LinearLayout
.
VERTICAL
)
;
container
.
addView
(
mFillerView
)
;
container
.
addView
(
mSurfaceView
new
ViewGroup
.
LayoutParams
(
ViewGroup
.
LayoutParams
.
MATCH_PARENT
ViewGroup
.
LayoutParams
.
MATCH_PARENT
)
)
;
addView
(
container
new
ViewGroup
.
LayoutParams
(
ViewGroup
.
LayoutParams
.
MATCH_PARENT
ViewGroup
.
LayoutParams
.
MATCH_PARENT
)
)
;
SurfaceHolder
holder
=
mSurfaceView
.
getHolder
(
)
;
holder
.
addCallback
(
new
SurfaceListener
(
)
)
;
}
}
GeckoLayerClient
getLayerClient
(
)
{
return
mLayerClient
;
}
public
Object
getLayerClientObject
(
)
{
return
mLayerClient
;
}
public
PanZoomController
getPanZoomController
(
)
{
return
mPanZoomController
;
}
public
DynamicToolbarAnimator
getDynamicToolbarAnimator
(
)
{
return
mToolbarAnimator
;
}
public
ImmutableViewportMetrics
getViewportMetrics
(
)
{
return
mLayerClient
.
getViewportMetrics
(
)
;
}
public
void
abortPanning
(
)
{
if
(
mPanZoomController
!
=
null
)
{
mPanZoomController
.
abortPanning
(
)
;
}
}
public
PointF
convertViewPointToLayerPoint
(
PointF
viewPoint
)
{
return
mLayerClient
.
convertViewPointToLayerPoint
(
viewPoint
)
;
}
int
getBackgroundColor
(
)
{
return
mBackgroundColor
;
}
Override
public
void
setBackgroundColor
(
int
newColor
)
{
mBackgroundColor
=
newColor
;
requestRender
(
)
;
}
void
setSurfaceBackgroundColor
(
int
newColor
)
{
if
(
mSurfaceView
!
=
null
)
{
mSurfaceView
.
setBackgroundColor
(
newColor
)
;
}
}
public
void
setZoomConstraints
(
ZoomConstraints
constraints
)
{
mLayerClient
.
setZoomConstraints
(
constraints
)
;
}
public
void
setIsRTL
(
boolean
aIsRTL
)
{
mLayerClient
.
setIsRTL
(
aIsRTL
)
;
}
Override
public
boolean
onKeyDown
(
int
keyCode
KeyEvent
event
)
{
if
(
AppConstants
.
MOZ_ANDROID_APZ
&
&
!
mGeckoIsReady
)
{
return
true
;
}
if
(
mPanZoomController
!
=
null
&
&
mPanZoomController
.
onKeyEvent
(
event
)
)
{
return
true
;
}
return
false
;
}
public
void
requestRender
(
)
{
if
(
mListener
!
=
null
)
{
mListener
.
renderRequested
(
)
;
}
}
public
void
addLayer
(
Layer
layer
)
{
mRenderer
.
addLayer
(
layer
)
;
}
public
void
removeLayer
(
Layer
layer
)
{
mRenderer
.
removeLayer
(
layer
)
;
}
public
void
postRenderTask
(
RenderTask
task
)
{
mRenderer
.
postRenderTask
(
task
)
;
}
public
void
removeRenderTask
(
RenderTask
task
)
{
mRenderer
.
removeRenderTask
(
task
)
;
}
public
int
getMaxTextureSize
(
)
{
return
mRenderer
.
getMaxTextureSize
(
)
;
}
RobocopTarget
public
IntBuffer
getPixels
(
)
{
return
mRenderer
.
getPixels
(
)
;
}
public
void
setPaintState
(
int
paintState
)
{
mPaintState
=
paintState
;
}
public
int
getPaintState
(
)
{
return
mPaintState
;
}
public
LayerRenderer
getRenderer
(
)
{
return
mRenderer
;
}
public
void
setListener
(
Listener
listener
)
{
mListener
=
listener
;
}
Listener
getListener
(
)
{
return
mListener
;
}
public
GLController
getGLController
(
)
{
return
mGLController
;
}
private
void
onSizeChanged
(
int
width
int
height
)
{
if
(
!
mGLController
.
isServerSurfaceValid
(
)
|
|
mSurfaceView
=
=
null
)
{
surfaceChanged
(
width
height
)
;
return
;
}
if
(
mListener
!
=
null
)
{
mListener
.
sizeChanged
(
width
height
)
;
}
if
(
mOverscroll
!
=
null
)
{
mOverscroll
.
setSize
(
width
height
)
;
}
}
private
void
surfaceChanged
(
int
width
int
height
)
{
mGLController
.
serverSurfaceChanged
(
width
height
)
;
if
(
mListener
!
=
null
)
{
mListener
.
surfaceChanged
(
width
height
)
;
}
if
(
mOverscroll
!
=
null
)
{
mOverscroll
.
setSize
(
width
height
)
;
}
}
private
void
onDestroyed
(
)
{
mGLController
.
serverSurfaceDestroyed
(
)
;
}
public
Object
getNativeWindow
(
)
{
if
(
mSurfaceView
!
=
null
)
return
mSurfaceView
.
getHolder
(
)
;
return
mTextureView
.
getSurfaceTexture
(
)
;
}
WrapForJNI
(
allowMultithread
=
true
stubName
=
"
RegisterCompositorWrapper
"
)
public
static
GLController
registerCxxCompositor
(
)
{
try
{
LayerView
layerView
=
GeckoAppShell
.
getLayerView
(
)
;
GLController
controller
=
layerView
.
getGLController
(
)
;
controller
.
compositorCreated
(
)
;
return
controller
;
}
catch
(
Exception
e
)
{
Log
.
e
(
LOGTAG
"
Error
registering
compositor
!
"
e
)
;
return
null
;
}
}
WrapForJNI
(
allowMultithread
=
true
stubName
=
"
updateZoomedView
"
)
public
static
void
updateZoomedView
(
ByteBuffer
data
)
{
LayerView
layerView
=
GeckoAppShell
.
getLayerView
(
)
;
if
(
layerView
!
=
null
)
{
LayerRenderer
layerRenderer
=
layerView
.
getRenderer
(
)
;
if
(
layerRenderer
!
=
null
)
{
layerRenderer
.
updateZoomedView
(
data
)
;
}
}
}
public
interface
Listener
{
void
renderRequested
(
)
;
void
sizeChanged
(
int
width
int
height
)
;
void
surfaceChanged
(
int
width
int
height
)
;
}
private
class
SurfaceListener
implements
SurfaceHolder
.
Callback
{
Override
public
void
surfaceChanged
(
SurfaceHolder
holder
int
format
int
width
int
height
)
{
onSizeChanged
(
width
height
)
;
}
Override
public
void
surfaceCreated
(
SurfaceHolder
holder
)
{
}
Override
public
void
surfaceDestroyed
(
SurfaceHolder
holder
)
{
onDestroyed
(
)
;
}
}
Override
protected
void
onMeasure
(
int
aWidthSpec
int
aHeightSpec
)
{
super
.
onMeasure
(
aWidthSpec
aHeightSpec
)
;
if
(
mSurfaceView
!
=
null
)
{
(
(
LayerSurfaceView
)
mSurfaceView
)
.
overrideSize
(
getMeasuredWidth
(
)
getMeasuredHeight
(
)
)
;
}
}
private
class
LayerSurfaceView
extends
SurfaceView
{
private
LayerView
mParent
;
private
int
mForcedWidth
;
private
int
mForcedHeight
;
public
LayerSurfaceView
(
Context
aContext
LayerView
aParent
)
{
super
(
aContext
)
;
mParent
=
aParent
;
}
void
overrideSize
(
int
aWidth
int
aHeight
)
{
if
(
mForcedWidth
!
=
aWidth
|
|
mForcedHeight
!
=
aHeight
)
{
mForcedWidth
=
aWidth
;
mForcedHeight
=
aHeight
;
requestLayout
(
)
;
}
}
Override
protected
void
onMeasure
(
int
aWidthSpec
int
aHeightSpec
)
{
setMeasuredDimension
(
mForcedWidth
mForcedHeight
)
;
}
Override
protected
void
onLayout
(
boolean
changed
int
left
int
top
int
right
int
bottom
)
{
super
.
onLayout
(
changed
left
top
right
bottom
)
;
if
(
changed
)
{
mParent
.
surfaceChanged
(
right
-
left
bottom
-
top
)
;
}
}
}
private
class
SurfaceTextureListener
implements
TextureView
.
SurfaceTextureListener
{
Override
public
void
onSurfaceTextureAvailable
(
SurfaceTexture
surface
int
width
int
height
)
{
onSizeChanged
(
width
height
)
;
}
Override
public
boolean
onSurfaceTextureDestroyed
(
SurfaceTexture
surface
)
{
onDestroyed
(
)
;
return
true
;
}
Override
public
void
onSurfaceTextureSizeChanged
(
SurfaceTexture
surface
int
width
int
height
)
{
onSizeChanged
(
width
height
)
;
}
Override
public
void
onSurfaceTextureUpdated
(
SurfaceTexture
surface
)
{
}
}
RobocopTarget
public
void
addDrawListener
(
DrawListener
listener
)
{
mLayerClient
.
addDrawListener
(
listener
)
;
}
RobocopTarget
public
void
removeDrawListener
(
DrawListener
listener
)
{
mLayerClient
.
removeDrawListener
(
listener
)
;
}
RobocopTarget
public
static
interface
DrawListener
{
public
void
drawFinished
(
)
;
}
Override
public
void
setOverScrollMode
(
int
overscrollMode
)
{
super
.
setOverScrollMode
(
overscrollMode
)
;
if
(
mPanZoomController
!
=
null
)
{
mPanZoomController
.
setOverScrollMode
(
overscrollMode
)
;
}
}
Override
public
int
getOverScrollMode
(
)
{
if
(
mPanZoomController
!
=
null
)
{
return
mPanZoomController
.
getOverScrollMode
(
)
;
}
return
super
.
getOverScrollMode
(
)
;
}
Override
public
void
onFocusChanged
(
boolean
gainFocus
int
direction
Rect
previouslyFocusedRect
)
{
super
.
onFocusChanged
(
gainFocus
direction
previouslyFocusedRect
)
;
GeckoAccessibility
.
onLayerViewFocusChanged
(
this
gainFocus
)
;
}
public
void
setFullScreenState
(
FullScreenState
state
)
{
mFullScreenState
=
state
;
}
public
boolean
isFullScreen
(
)
{
return
mFullScreenState
!
=
FullScreenState
.
NONE
;
}
public
FullScreenState
getFullScreenState
(
)
{
return
mFullScreenState
;
}
public
void
setMaxTranslation
(
float
aMaxTranslation
)
{
mToolbarAnimator
.
setMaxTranslation
(
aMaxTranslation
)
;
if
(
mFillerView
!
=
null
)
{
mFillerView
.
requestLayout
(
)
;
}
}
public
void
setSurfaceTranslation
(
float
translation
)
{
if
(
mSurfaceTranslation
!
=
translation
)
{
mSurfaceTranslation
=
translation
;
scrollTo
(
0
Math
.
round
(
mToolbarAnimator
.
getMaxTranslation
(
)
-
translation
)
)
;
}
}
public
float
getSurfaceTranslation
(
)
{
return
mSurfaceTranslation
;
}
Override
public
void
onTabChanged
(
Tab
tab
Tabs
.
TabEvents
msg
Object
data
)
{
if
(
msg
=
=
Tabs
.
TabEvents
.
VIEWPORT_CHANGE
&
&
Tabs
.
getInstance
(
)
.
isSelectedTab
(
tab
)
&
&
mLayerClient
!
=
null
)
{
setZoomConstraints
(
tab
.
getZoomConstraints
(
)
)
;
setIsRTL
(
tab
.
getIsRTL
(
)
)
;
}
}
public
interface
DynamicToolbarListener
{
public
void
onTranslationChanged
(
float
aToolbarTranslation
float
aLayerViewTranslation
)
;
public
void
onPanZoomStopped
(
)
;
public
void
onMetricsChanged
(
ImmutableViewportMetrics
viewport
)
;
}
public
interface
ZoomedViewListener
{
public
void
requestZoomedViewRender
(
)
;
public
void
updateView
(
ByteBuffer
data
)
;
}
public
void
addZoomedViewListener
(
ZoomedViewListener
listener
)
{
mRenderer
.
addZoomedViewListener
(
listener
)
;
}
public
void
removeZoomedViewListener
(
ZoomedViewListener
listener
)
{
mRenderer
.
removeZoomedViewListener
(
listener
)
;
}
}
