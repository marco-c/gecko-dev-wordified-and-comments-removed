package
org
.
mozilla
.
gecko
.
preferences
;
import
java
.
util
.
Locale
;
import
org
.
mozilla
.
gecko
.
AppConstants
.
Versions
;
import
org
.
mozilla
.
gecko
.
BrowserLocaleManager
;
import
org
.
mozilla
.
gecko
.
GeckoApplication
;
import
org
.
mozilla
.
gecko
.
GeckoSharedPrefs
;
import
org
.
mozilla
.
gecko
.
LocaleManager
;
import
org
.
mozilla
.
gecko
.
PrefsHelper
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
.
Method
;
import
org
.
mozilla
.
gecko
.
fxa
.
AccountLoader
;
import
org
.
mozilla
.
gecko
.
fxa
.
authenticator
.
AndroidFxAccount
;
import
android
.
accounts
.
Account
;
import
android
.
app
.
ActionBar
;
import
android
.
app
.
Activity
;
import
android
.
app
.
LoaderManager
;
import
android
.
content
.
Context
;
import
android
.
content
.
Loader
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
content
.
res
.
Resources
;
import
android
.
os
.
Bundle
;
import
android
.
preference
.
PreferenceActivity
;
import
android
.
preference
.
PreferenceFragment
;
import
android
.
preference
.
PreferenceScreen
;
import
android
.
util
.
Log
;
import
android
.
view
.
Menu
;
import
android
.
view
.
MenuInflater
;
import
com
.
squareup
.
leakcanary
.
RefWatcher
;
public
class
GeckoPreferenceFragment
extends
PreferenceFragment
{
public
static
final
int
ACCOUNT_LOADER_ID
=
1
;
private
AccountLoaderCallbacks
accountLoaderCallbacks
;
private
SyncPreference
syncPreference
;
Override
public
void
onConfigurationChanged
(
Configuration
newConfig
)
{
super
.
onConfigurationChanged
(
newConfig
)
;
Log
.
d
(
LOGTAG
"
onConfigurationChanged
:
"
+
newConfig
.
locale
)
;
final
Activity
context
=
getActivity
(
)
;
final
LocaleManager
localeManager
=
BrowserLocaleManager
.
getInstance
(
)
;
final
Locale
changed
=
localeManager
.
onSystemConfigurationChanged
(
context
getResources
(
)
newConfig
lastLocale
)
;
if
(
changed
!
=
null
)
{
applyLocale
(
changed
)
;
}
}
private
static
final
String
LOGTAG
=
"
GeckoPreferenceFragment
"
;
private
PrefsHelper
.
PrefHandler
mPrefsRequest
;
private
Locale
lastLocale
=
Locale
.
getDefault
(
)
;
Override
public
void
onCreate
(
Bundle
savedInstanceState
)
{
super
.
onCreate
(
savedInstanceState
)
;
getPreferenceManager
(
)
.
setSharedPreferencesName
(
GeckoSharedPrefs
.
APP_PREFS_NAME
)
;
int
res
=
getResource
(
)
;
if
(
res
=
=
R
.
xml
.
preferences
)
{
Telemetry
.
startUISession
(
TelemetryContract
.
Session
.
SETTINGS
)
;
}
else
{
final
String
resourceName
=
getArguments
(
)
.
getString
(
"
resource
"
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
ACTION
Method
.
SETTINGS
resourceName
)
;
}
if
(
res
=
=
R
.
xml
.
preferences_search
)
{
setHasOptionsMenu
(
true
)
;
}
addPreferencesFromResource
(
res
)
;
PreferenceScreen
screen
=
getPreferenceScreen
(
)
;
setPreferenceScreen
(
screen
)
;
mPrefsRequest
=
(
(
GeckoPreferences
)
getActivity
(
)
)
.
setupPreferences
(
screen
)
;
syncPreference
=
(
SyncPreference
)
findPreference
(
GeckoPreferences
.
PREFS_SYNC
)
;
}
private
String
getTitle
(
)
{
final
int
res
=
getResource
(
)
;
if
(
res
=
=
R
.
xml
.
preferences
)
{
return
getString
(
R
.
string
.
settings_title
)
;
}
if
(
res
=
=
R
.
xml
.
preferences_privacy
)
{
return
getString
(
R
.
string
.
pref_category_privacy_short
)
;
}
if
(
res
=
=
R
.
xml
.
preferences_search
)
{
return
getString
(
R
.
string
.
pref_category_search
)
;
}
if
(
res
=
=
R
.
xml
.
preferences_notifications
)
{
return
getString
(
R
.
string
.
pref_category_notifications
)
;
}
return
null
;
}
private
int
getHeader
(
)
{
final
int
res
=
getResource
(
)
;
if
(
res
=
=
R
.
xml
.
preferences
)
{
return
R
.
id
.
pref_header_general
;
}
if
(
res
=
=
R
.
xml
.
preferences_privacy
)
{
return
R
.
id
.
pref_header_privacy
;
}
if
(
res
=
=
R
.
xml
.
preferences_search
)
{
return
R
.
id
.
pref_header_search
;
}
if
(
res
=
=
R
.
xml
.
preferences_notifications
)
{
return
R
.
id
.
pref_header_notifications
;
}
return
-
1
;
}
private
void
updateTitle
(
)
{
final
String
newTitle
=
getTitle
(
)
;
if
(
newTitle
=
=
null
)
{
Log
.
d
(
LOGTAG
"
No
new
title
to
show
.
"
)
;
return
;
}
final
GeckoPreferences
activity
=
(
GeckoPreferences
)
getActivity
(
)
;
if
(
activity
.
isMultiPane
(
)
)
{
activity
.
showBreadCrumbs
(
newTitle
newTitle
)
;
activity
.
switchToHeader
(
getHeader
(
)
)
;
return
;
}
Log
.
v
(
LOGTAG
"
Setting
activity
title
to
"
+
newTitle
)
;
activity
.
setTitle
(
newTitle
)
;
}
Override
public
void
onActivityCreated
(
Bundle
savedInstanceState
)
{
super
.
onActivityCreated
(
savedInstanceState
)
;
accountLoaderCallbacks
=
new
AccountLoaderCallbacks
(
)
;
getLoaderManager
(
)
.
initLoader
(
ACCOUNT_LOADER_ID
null
accountLoaderCallbacks
)
;
}
Override
public
void
onResume
(
)
{
applyLocale
(
Locale
.
getDefault
(
)
)
;
super
.
onResume
(
)
;
getLoaderManager
(
)
.
restartLoader
(
ACCOUNT_LOADER_ID
null
accountLoaderCallbacks
)
;
}
private
void
applyLocale
(
final
Locale
currentLocale
)
{
final
Context
context
=
getActivity
(
)
.
getApplicationContext
(
)
;
BrowserLocaleManager
.
getInstance
(
)
.
updateConfiguration
(
context
currentLocale
)
;
if
(
!
currentLocale
.
equals
(
lastLocale
)
)
{
Log
.
d
(
LOGTAG
"
Locale
changed
:
"
+
currentLocale
)
;
this
.
lastLocale
=
currentLocale
;
getPreferenceScreen
(
)
.
removeAll
(
)
;
addPreferencesFromResource
(
getResource
(
)
)
;
}
updateTitle
(
)
;
}
private
int
getResource
(
)
{
int
resid
=
0
;
final
String
resourceName
=
getArguments
(
)
.
getString
(
"
resource
"
)
;
final
Activity
activity
=
getActivity
(
)
;
if
(
resourceName
!
=
null
)
{
final
Resources
resources
=
activity
.
getResources
(
)
;
final
String
packageName
=
activity
.
getPackageName
(
)
;
resid
=
resources
.
getIdentifier
(
resourceName
"
xml
"
packageName
)
;
}
if
(
resid
=
=
0
)
{
Log
.
e
(
LOGTAG
"
Failed
to
find
resource
:
"
+
resourceName
+
"
.
Displaying
default
settings
.
"
)
;
boolean
isMultiPane
=
(
(
GeckoPreferences
)
activity
)
.
isMultiPane
(
)
;
resid
=
isMultiPane
?
R
.
xml
.
preferences_general_tablet
:
R
.
xml
.
preferences
;
}
return
resid
;
}
Override
public
void
onCreateOptionsMenu
(
Menu
menu
MenuInflater
inflater
)
{
super
.
onCreateOptionsMenu
(
menu
inflater
)
;
inflater
.
inflate
(
R
.
menu
.
preferences_search_menu
menu
)
;
}
Override
public
void
onDestroy
(
)
{
super
.
onDestroy
(
)
;
if
(
mPrefsRequest
!
=
null
)
{
PrefsHelper
.
removeObserver
(
mPrefsRequest
)
;
mPrefsRequest
=
null
;
}
final
int
res
=
getResource
(
)
;
if
(
res
=
=
R
.
xml
.
preferences
)
{
Telemetry
.
stopUISession
(
TelemetryContract
.
Session
.
SETTINGS
)
;
}
GeckoApplication
.
watchReference
(
getActivity
(
)
this
)
;
}
private
class
AccountLoaderCallbacks
implements
LoaderManager
.
LoaderCallbacks
<
Account
>
{
Override
public
Loader
<
Account
>
onCreateLoader
(
int
id
Bundle
args
)
{
return
new
AccountLoader
(
getActivity
(
)
)
;
}
Override
public
void
onLoadFinished
(
Loader
<
Account
>
loader
Account
account
)
{
if
(
syncPreference
=
=
null
)
{
return
;
}
if
(
account
=
=
null
)
{
syncPreference
.
update
(
null
)
;
return
;
}
syncPreference
.
update
(
new
AndroidFxAccount
(
getActivity
(
)
account
)
)
;
}
Override
public
void
onLoaderReset
(
Loader
<
Account
>
loader
)
{
if
(
syncPreference
!
=
null
)
{
syncPreference
.
update
(
null
)
;
}
}
}
}
