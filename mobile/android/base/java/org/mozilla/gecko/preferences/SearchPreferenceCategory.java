package
org
.
mozilla
.
gecko
.
preferences
;
import
android
.
content
.
Context
;
import
android
.
preference
.
Preference
;
import
android
.
util
.
AttributeSet
;
import
android
.
util
.
Log
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
.
Method
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
public
class
SearchPreferenceCategory
extends
CustomListCategory
implements
BundleEventListener
{
public
static
final
String
LOGTAG
=
"
SearchPrefCategory
"
;
public
SearchPreferenceCategory
(
Context
context
)
{
super
(
context
)
;
}
public
SearchPreferenceCategory
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
}
public
SearchPreferenceCategory
(
Context
context
AttributeSet
attrs
int
defStyle
)
{
super
(
context
attrs
defStyle
)
;
}
Override
protected
void
onAttachedToActivity
(
)
{
super
.
onAttachedToActivity
(
)
;
EventDispatcher
.
getInstance
(
)
.
registerUiThreadListener
(
this
"
SearchEngines
:
Data
"
)
;
GeckoAppShell
.
notifyObservers
(
"
SearchEngines
:
GetVisible
"
null
)
;
}
Override
protected
void
onPrepareForRemoval
(
)
{
super
.
onPrepareForRemoval
(
)
;
EventDispatcher
.
getInstance
(
)
.
unregisterUiThreadListener
(
this
"
SearchEngines
:
Data
"
)
;
}
Override
public
void
setDefault
(
CustomListPreference
item
)
{
super
.
setDefault
(
item
)
;
sendGeckoEngineEvent
(
"
SearchEngines
:
SetDefault
"
item
.
getTitle
(
)
.
toString
(
)
)
;
final
String
identifier
=
(
(
SearchEnginePreference
)
item
)
.
getIdentifier
(
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
SEARCH_SET_DEFAULT
Method
.
DIALOG
identifier
)
;
}
Override
public
void
uninstall
(
CustomListPreference
item
)
{
super
.
uninstall
(
item
)
;
sendGeckoEngineEvent
(
"
SearchEngines
:
Remove
"
item
.
getTitle
(
)
.
toString
(
)
)
;
final
String
identifier
=
(
(
SearchEnginePreference
)
item
)
.
getIdentifier
(
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
SEARCH_REMOVE
Method
.
DIALOG
identifier
)
;
}
Override
public
void
handleMessage
(
final
String
event
final
GeckoBundle
data
final
EventCallback
callback
)
{
if
(
event
.
equals
(
"
SearchEngines
:
Data
"
)
)
{
final
GeckoBundle
[
]
engines
=
data
.
getBundleArray
(
"
searchEngines
"
)
;
this
.
removeAll
(
)
;
for
(
int
i
=
0
;
i
<
engines
.
length
;
i
+
+
)
{
final
GeckoBundle
engine
=
engines
[
i
]
;
final
SearchEnginePreference
enginePreference
=
new
SearchEnginePreference
(
getContext
(
)
this
)
;
enginePreference
.
setSearchEngineFromBundle
(
engine
)
;
enginePreference
.
setOnPreferenceClickListener
(
new
OnPreferenceClickListener
(
)
{
Override
public
boolean
onPreferenceClick
(
Preference
preference
)
{
SearchEnginePreference
sPref
=
(
SearchEnginePreference
)
preference
;
sPref
.
showDialog
(
)
;
return
true
;
}
}
)
;
addPreference
(
enginePreference
)
;
if
(
i
!
=
0
)
{
continue
;
}
enginePreference
.
setIsDefault
(
true
)
;
mDefaultReference
=
enginePreference
;
}
}
}
private
void
sendGeckoEngineEvent
(
String
event
String
engineName
)
{
JSONObject
json
=
new
JSONObject
(
)
;
try
{
json
.
put
(
"
engine
"
engineName
)
;
}
catch
(
JSONException
e
)
{
Log
.
e
(
LOGTAG
"
JSONException
creating
search
engine
configuration
change
message
for
Gecko
.
"
e
)
;
return
;
}
GeckoAppShell
.
notifyObservers
(
event
json
.
toString
(
)
)
;
}
}
