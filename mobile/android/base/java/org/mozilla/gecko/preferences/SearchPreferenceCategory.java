package
org
.
mozilla
.
gecko
.
preferences
;
import
android
.
content
.
Context
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
v7
.
util
.
DiffUtil
;
import
android
.
support
.
v7
.
util
.
ListUpdateCallback
;
import
android
.
util
.
AttributeSet
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
.
Method
;
import
org
.
mozilla
.
gecko
.
search
.
SearchEngineDiffCallback
;
import
org
.
mozilla
.
gecko
.
util
.
BundleEventListener
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
public
class
SearchPreferenceCategory
extends
CustomListCategory
implements
BundleEventListener
ListUpdateCallback
{
public
static
final
String
LOGTAG
=
"
SearchPrefCategory
"
;
private
List
<
SearchEnginePreference
>
enginesList
=
new
ArrayList
<
>
(
)
;
public
SearchPreferenceCategory
(
Context
context
)
{
super
(
context
)
;
}
public
SearchPreferenceCategory
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
}
public
SearchPreferenceCategory
(
Context
context
AttributeSet
attrs
int
defStyle
)
{
super
(
context
attrs
defStyle
)
;
}
Override
protected
void
onAttachedToActivity
(
)
{
super
.
onAttachedToActivity
(
)
;
EventDispatcher
.
getInstance
(
)
.
registerUiThreadListener
(
this
"
SearchEngines
:
Data
"
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
"
SearchEngines
:
GetVisible
"
null
)
;
}
Override
protected
void
onPrepareForRemoval
(
)
{
super
.
onPrepareForRemoval
(
)
;
EventDispatcher
.
getInstance
(
)
.
unregisterUiThreadListener
(
this
"
SearchEngines
:
Data
"
)
;
}
Override
public
void
setDefault
(
CustomListPreference
item
)
{
super
.
setDefault
(
item
)
;
sendGeckoEngineEvent
(
"
SearchEngines
:
SetDefault
"
item
.
getTitle
(
)
.
toString
(
)
)
;
final
String
identifier
=
(
(
SearchEnginePreference
)
item
)
.
getIdentifier
(
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
SEARCH_SET_DEFAULT
Method
.
DIALOG
identifier
)
;
}
Override
public
void
uninstall
(
CustomListPreference
item
)
{
super
.
uninstall
(
item
)
;
sendGeckoEngineEvent
(
"
SearchEngines
:
Remove
"
item
.
getTitle
(
)
.
toString
(
)
)
;
final
String
identifier
=
(
(
SearchEnginePreference
)
item
)
.
getIdentifier
(
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
SEARCH_REMOVE
Method
.
DIALOG
identifier
)
;
}
Override
public
void
handleMessage
(
final
String
event
final
GeckoBundle
data
final
EventCallback
callback
)
{
if
(
event
.
equals
(
"
SearchEngines
:
Data
"
)
)
{
GeckoBundle
[
]
engines
=
data
.
getBundleArray
(
"
searchEngines
"
)
;
List
<
SearchEnginePreference
>
newEngineList
=
new
ArrayList
<
>
(
)
;
for
(
GeckoBundle
engine
:
engines
)
{
SearchEnginePreference
enginePreference
=
new
SearchEnginePreference
(
getContext
(
)
this
)
;
enginePreference
.
setSearchEngineFromBundle
(
engine
)
;
enginePreference
.
setOnPreferenceClickListener
(
preference
-
>
{
SearchEnginePreference
sPref
=
(
SearchEnginePreference
)
preference
;
sPref
.
showDialog
(
)
;
return
true
;
}
)
;
newEngineList
.
add
(
enginePreference
)
;
}
DiffUtil
.
DiffResult
diffResult
=
DiffUtil
.
calculateDiff
(
new
SearchEngineDiffCallback
(
enginesList
newEngineList
)
)
;
enginesList
=
newEngineList
;
diffResult
.
dispatchUpdatesTo
(
this
)
;
}
}
Override
public
void
onInserted
(
int
pos
int
count
)
{
for
(
int
ix
=
pos
;
ix
<
(
pos
+
count
)
;
+
+
ix
)
{
addPreference
(
enginesList
.
get
(
ix
)
)
;
if
(
ix
=
=
0
)
{
enginesList
.
get
(
ix
)
.
setIsDefault
(
true
)
;
mDefaultReference
=
enginesList
.
get
(
ix
)
;
}
}
}
Override
public
void
onRemoved
(
int
pos
int
count
)
{
}
Override
public
void
onMoved
(
int
i
int
i1
)
{
}
Override
public
void
onChanged
(
int
i
int
i1
Nullable
Object
o
)
{
}
private
void
sendGeckoEngineEvent
(
final
String
event
final
String
engineName
)
{
final
GeckoBundle
data
=
new
GeckoBundle
(
1
)
;
data
.
putString
(
"
engine
"
engineName
)
;
EventDispatcher
.
getInstance
(
)
.
dispatch
(
event
data
)
;
}
}
