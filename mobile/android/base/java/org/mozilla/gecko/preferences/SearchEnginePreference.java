package
org
.
mozilla
.
gecko
.
preferences
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
SnackbarBuilder
;
import
org
.
mozilla
.
gecko
.
icons
.
IconCallback
;
import
org
.
mozilla
.
gecko
.
icons
.
IconDescriptor
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
import
org
.
mozilla
.
gecko
.
icons
.
Icons
;
import
org
.
mozilla
.
gecko
.
util
.
GeckoBundle
;
import
org
.
mozilla
.
gecko
.
widget
.
FaviconView
;
import
android
.
app
.
Activity
;
import
android
.
app
.
AlertDialog
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
drawable
.
BitmapDrawable
;
import
android
.
support
.
design
.
widget
.
Snackbar
;
import
android
.
text
.
SpannableString
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
Log
;
import
android
.
view
.
View
;
public
class
SearchEnginePreference
extends
CustomListPreference
{
protected
static
final
String
LOGTAG
=
"
SearchEnginePreference
"
;
protected
static
final
int
INDEX_REMOVE_BUTTON
=
1
;
private
BitmapDrawable
mPromptIcon
;
private
Bitmap
mIconBitmap
;
private
final
Object
bitmapLock
=
new
Object
(
)
;
private
FaviconView
mFaviconView
;
private
String
mIdentifier
;
public
SearchEnginePreference
(
Context
context
SearchPreferenceCategory
parentCategory
)
{
super
(
context
parentCategory
)
;
}
Override
protected
void
onBindView
(
View
view
)
{
super
.
onBindView
(
view
)
;
synchronized
(
bitmapLock
)
{
mFaviconView
=
(
(
FaviconView
)
view
.
findViewById
(
R
.
id
.
search_engine_icon
)
)
;
if
(
mIconBitmap
!
=
null
)
{
mFaviconView
.
updateAndScaleImage
(
IconResponse
.
create
(
mIconBitmap
)
)
;
}
}
}
Override
protected
int
getPreferenceLayoutResource
(
)
{
return
R
.
layout
.
preference_search_engine
;
}
Override
protected
String
[
]
createDialogItems
(
)
{
return
new
String
[
]
{
LABEL_SET_AS_DEFAULT
LABEL_REMOVE
}
;
}
Override
public
void
showDialog
(
)
{
if
(
mParentCategory
.
getPreferenceCount
(
)
=
=
1
)
{
Activity
activity
=
(
Activity
)
getContext
(
)
;
SnackbarBuilder
.
builder
(
activity
)
.
message
(
R
.
string
.
pref_search_last_toast
)
.
duration
(
Snackbar
.
LENGTH_LONG
)
.
buildAndShow
(
)
;
return
;
}
super
.
showDialog
(
)
;
}
Override
protected
void
configureDialogBuilder
(
AlertDialog
.
Builder
builder
)
{
if
(
mPromptIcon
=
=
null
&
&
mIconBitmap
!
=
null
)
{
mPromptIcon
=
new
BitmapDrawable
(
getContext
(
)
.
getResources
(
)
mFaviconView
.
getBitmap
(
)
)
;
}
builder
.
setIcon
(
mPromptIcon
)
;
}
Override
protected
void
onDialogIndexClicked
(
int
index
)
{
switch
(
index
)
{
case
INDEX_SET_DEFAULT_BUTTON
:
mParentCategory
.
setDefault
(
this
)
;
break
;
case
INDEX_REMOVE_BUTTON
:
mParentCategory
.
uninstall
(
this
)
;
break
;
default
:
Log
.
w
(
LOGTAG
"
Selected
index
out
of
range
.
"
)
;
break
;
}
}
public
String
getIdentifier
(
)
{
return
mIdentifier
;
}
public
void
setSearchEngineFromBundle
(
GeckoBundle
geckoEngine
)
{
mIdentifier
=
geckoEngine
.
getString
(
"
identifier
"
)
;
if
(
mIdentifier
=
=
null
|
|
mIdentifier
.
equals
(
"
null
"
)
)
{
mIdentifier
=
"
other
"
;
}
final
String
engineName
=
geckoEngine
.
getString
(
"
name
"
)
;
final
SpannableString
titleSpannable
=
new
SpannableString
(
engineName
)
;
setTitle
(
titleSpannable
)
;
final
String
iconURI
=
geckoEngine
.
getString
(
"
iconURI
"
)
;
if
(
TextUtils
.
isEmpty
(
iconURI
)
)
{
return
;
}
try
{
Icons
.
with
(
getContext
(
)
)
.
pageUrl
(
mIdentifier
)
.
icon
(
IconDescriptor
.
createGenericIcon
(
iconURI
)
)
.
privileged
(
true
)
.
build
(
)
.
execute
(
new
IconCallback
(
)
{
Override
public
void
onIconResponse
(
IconResponse
response
)
{
mIconBitmap
=
response
.
getBitmap
(
)
;
if
(
mFaviconView
!
=
null
)
{
mFaviconView
.
updateAndScaleImage
(
response
)
;
}
}
}
)
;
}
catch
(
IllegalArgumentException
e
)
{
Log
.
e
(
LOGTAG
"
IllegalArgumentException
creating
Bitmap
.
Most
likely
a
zero
-
length
bitmap
.
"
e
)
;
}
catch
(
NullPointerException
e
)
{
Log
.
e
(
LOGTAG
"
NullPointerException
creating
Bitmap
.
Most
likely
a
zero
-
length
bitmap
.
"
e
)
;
}
}
}
