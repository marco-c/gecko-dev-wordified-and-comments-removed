package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
preferences
.
GeckoPreferences
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
android
.
database
.
ContentObserver
;
import
android
.
net
.
Uri
;
import
android
.
provider
.
Settings
;
import
android
.
support
.
annotation
.
UiThread
;
import
android
.
util
.
Log
;
class
GeckoFontScaleListener
extends
ContentObserver
implements
SharedPreferences
.
OnSharedPreferenceChangeListener
{
private
static
final
String
LOGTAG
=
"
GeckoFontScaleListener
"
;
private
static
final
String
PREF_SYSTEM_FONT_SCALE
=
"
font
.
size
.
systemFontScale
"
;
private
static
final
String
PREF_FONT_INFLATION
=
"
font
.
size
.
inflation
.
minTwips
"
;
private
static
final
int
FONT_INFLATION_OFF
=
0
;
private
static
final
int
FONT_INFLATION_ON_DEFAULT_VALUE
=
120
;
private
static
final
float
DEFAULT_FONT_SCALE
=
1
.
0f
;
SuppressLint
(
"
StaticFieldLeak
"
)
private
static
final
GeckoFontScaleListener
sInstance
=
new
GeckoFontScaleListener
(
)
;
private
Context
mApplicationContext
;
private
boolean
mAttached
;
private
boolean
mRunning
;
public
static
GeckoFontScaleListener
getInstance
(
)
{
return
sInstance
;
}
private
GeckoFontScaleListener
(
)
{
super
(
null
)
;
}
public
synchronized
void
attachToContext
(
final
Context
context
)
{
if
(
mAttached
)
{
Log
.
w
(
LOGTAG
"
Already
attached
!
"
)
;
return
;
}
mApplicationContext
=
context
.
getApplicationContext
(
)
;
SharedPreferences
prefs
=
GeckoSharedPrefs
.
forApp
(
mApplicationContext
)
;
prefs
.
registerOnSharedPreferenceChangeListener
(
this
)
;
onPrefChange
(
prefs
)
;
mAttached
=
true
;
}
public
synchronized
void
detachFromContext
(
)
{
if
(
!
mAttached
)
{
Log
.
w
(
LOGTAG
"
Already
detached
!
"
)
;
return
;
}
GeckoSharedPrefs
.
forApp
(
mApplicationContext
)
.
unregisterOnSharedPreferenceChangeListener
(
this
)
;
stop
(
)
;
mApplicationContext
=
null
;
mAttached
=
false
;
}
private
synchronized
void
start
(
)
{
if
(
mRunning
)
{
return
;
}
ContentResolver
contentResolver
=
mApplicationContext
.
getContentResolver
(
)
;
Uri
fontSizeSetting
=
Settings
.
System
.
getUriFor
(
Settings
.
System
.
FONT_SCALE
)
;
contentResolver
.
registerContentObserver
(
fontSizeSetting
false
this
)
;
onSystemFontScaleChange
(
contentResolver
false
)
;
mRunning
=
true
;
}
private
synchronized
void
stop
(
)
{
if
(
!
mRunning
)
{
return
;
}
ContentResolver
contentResolver
=
mApplicationContext
.
getContentResolver
(
)
;
contentResolver
.
unregisterContentObserver
(
this
)
;
onSystemFontScaleChange
(
contentResolver
true
)
;
mRunning
=
false
;
}
private
void
onSystemFontScaleChange
(
final
ContentResolver
contentResolver
boolean
stopping
)
{
float
fontScale
;
int
fontInflation
;
if
(
!
stopping
)
{
fontScale
=
Settings
.
System
.
getFloat
(
contentResolver
Settings
.
System
.
FONT_SCALE
DEFAULT_FONT_SCALE
)
;
fontInflation
=
Math
.
round
(
FONT_INFLATION_ON_DEFAULT_VALUE
*
fontScale
)
;
}
else
{
fontScale
=
DEFAULT_FONT_SCALE
;
fontInflation
=
FONT_INFLATION_OFF
;
}
PrefsHelper
.
setPref
(
PREF_FONT_INFLATION
fontInflation
)
;
PrefsHelper
.
setPref
(
PREF_SYSTEM_FONT_SCALE
Math
.
round
(
fontScale
*
100
)
)
;
}
private
void
onPrefChange
(
final
SharedPreferences
prefs
)
{
boolean
useSystemFontScale
=
prefs
.
getBoolean
(
GeckoPreferences
.
PREFS_SYSTEM_FONT_SIZE
false
)
;
if
(
useSystemFontScale
)
{
start
(
)
;
}
else
{
stop
(
)
;
}
}
Override
public
void
onChange
(
boolean
selfChange
)
{
onSystemFontScaleChange
(
mApplicationContext
.
getContentResolver
(
)
false
)
;
}
UiThread
Override
public
void
onSharedPreferenceChanged
(
SharedPreferences
sharedPreferences
String
key
)
{
if
(
!
GeckoPreferences
.
PREFS_SYSTEM_FONT_SIZE
.
equals
(
key
)
)
{
return
;
}
onPrefChange
(
sharedPreferences
)
;
}
}
