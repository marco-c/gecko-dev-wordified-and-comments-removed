package
org
.
mozilla
.
gecko
.
activitystream
.
homepanel
.
model
;
import
android
.
database
.
Cursor
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
android
.
text
.
TextUtils
;
import
android
.
text
.
format
.
DateUtils
;
import
org
.
mozilla
.
gecko
.
activitystream
.
Utils
;
import
org
.
mozilla
.
gecko
.
activitystream
.
ranking
.
HighlightCandidateCursorIndices
;
import
org
.
mozilla
.
gecko
.
activitystream
.
ranking
.
HighlightsRanking
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
java
.
util
.
regex
.
Matcher
;
import
java
.
util
.
regex
.
Pattern
;
public
class
Highlight
implements
Item
{
private
static
final
Pattern
FAST_IMAGE_URL_PATTERN
=
Pattern
.
compile
(
"
\
"
image_url
\
"
:
\
"
(
[
^
\
"
]
+
)
\
"
"
)
;
private
static
final
Pattern
FAST_DESCRIPTION_LENGTH_PATTERN
=
Pattern
.
compile
(
"
\
"
description_length
\
"
:
(
[
0
-
9
]
+
)
"
)
;
private
final
String
title
;
private
final
String
url
;
private
final
Utils
.
HighlightSource
source
;
private
final
long
time
;
private
long
historyId
;
private
Nullable
Metadata
metadata
;
private
Nullable
final
String
metadataJSON
;
private
Nullable
String
fastImageURL
;
private
int
fastDescriptionLength
;
private
Nullable
Boolean
isPinned
;
private
Nullable
Boolean
isBookmarked
;
public
static
Highlight
fromCursor
(
final
Cursor
cursor
final
HighlightCandidateCursorIndices
cursorIndices
)
{
return
new
Highlight
(
cursor
cursorIndices
)
;
}
private
Highlight
(
final
Cursor
cursor
final
HighlightCandidateCursorIndices
cursorIndices
)
{
title
=
cursor
.
getString
(
cursorIndices
.
titleColumnIndex
)
;
url
=
cursor
.
getString
(
cursorIndices
.
urlColumnIndex
)
;
source
=
Utils
.
highlightSource
(
cursor
cursorIndices
)
;
time
=
cursor
.
getLong
(
cursorIndices
.
highlightsDateColumnIndex
)
;
historyId
=
cursor
.
getLong
(
cursorIndices
.
historyIDColumnIndex
)
;
metadataJSON
=
cursor
.
getString
(
cursorIndices
.
metadataColumnIndex
)
;
fastImageURL
=
initFastImageURL
(
metadataJSON
)
;
fastDescriptionLength
=
initFastDescriptionLength
(
metadataJSON
)
;
updateState
(
)
;
}
VisibleForTesting
static
Nullable
String
initFastImageURL
(
final
String
metadataJSON
)
{
return
extractFirstGroupFromMetadataJSON
(
metadataJSON
FAST_IMAGE_URL_PATTERN
)
;
}
VisibleForTesting
static
int
initFastDescriptionLength
(
final
String
metadataJSON
)
{
final
String
extractedStr
=
extractFirstGroupFromMetadataJSON
(
metadataJSON
FAST_DESCRIPTION_LENGTH_PATTERN
)
;
try
{
return
!
TextUtils
.
isEmpty
(
extractedStr
)
?
Integer
.
parseInt
(
extractedStr
)
:
0
;
}
catch
(
final
NumberFormatException
e
)
{
}
return
0
;
}
private
static
Nullable
String
extractFirstGroupFromMetadataJSON
(
final
String
metadataJSON
final
Pattern
pattern
)
{
if
(
metadataJSON
=
=
null
)
{
return
null
;
}
final
Matcher
matcher
=
pattern
.
matcher
(
metadataJSON
)
;
return
matcher
.
find
(
)
?
matcher
.
group
(
1
)
:
null
;
}
private
void
updateState
(
)
{
switch
(
source
)
{
case
BOOKMARKED
:
isBookmarked
=
true
;
isPinned
=
null
;
break
;
case
VISITED
:
isBookmarked
=
null
;
isPinned
=
null
;
break
;
default
:
throw
new
IllegalArgumentException
(
"
Unknown
source
:
"
+
source
)
;
}
}
public
String
getTitle
(
)
{
return
title
;
}
public
String
getUrl
(
)
{
return
url
;
}
public
Metadata
getMetadataSlow
(
)
{
if
(
metadata
=
=
null
)
{
metadata
=
new
Metadata
(
metadataJSON
)
;
}
return
metadata
;
}
public
Nullable
String
getFastImageURLForComparison
(
)
{
return
fastImageURL
;
}
public
boolean
hasFastImageURL
(
)
{
return
fastImageURL
!
=
null
;
}
public
int
getFastDescriptionLength
(
)
{
return
fastDescriptionLength
;
}
public
Boolean
isBookmarked
(
)
{
return
isBookmarked
;
}
public
Boolean
isPinned
(
)
{
return
isPinned
;
}
Override
public
void
updateBookmarked
(
boolean
bookmarked
)
{
this
.
isBookmarked
=
bookmarked
;
}
Override
public
void
updatePinned
(
boolean
pinned
)
{
this
.
isPinned
=
pinned
;
}
public
String
getRelativeTimeSpan
(
)
{
return
DateUtils
.
getRelativeTimeSpanString
(
time
System
.
currentTimeMillis
(
)
DateUtils
.
MINUTE_IN_MILLIS
0
)
.
toString
(
)
;
}
public
Utils
.
HighlightSource
getSource
(
)
{
return
source
;
}
public
long
getHistoryId
(
)
{
return
historyId
;
}
}
