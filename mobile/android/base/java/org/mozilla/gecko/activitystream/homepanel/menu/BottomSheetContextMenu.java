package
org
.
mozilla
.
gecko
.
activitystream
.
homepanel
.
menu
;
import
android
.
app
.
Activity
;
import
android
.
content
.
Context
;
import
android
.
net
.
Uri
;
import
android
.
support
.
design
.
widget
.
BottomSheetBehavior
;
import
android
.
support
.
design
.
widget
.
BottomSheetDialog
;
import
android
.
support
.
design
.
widget
.
NavigationView
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
Log
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
MenuItem
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewGroup
;
import
android
.
view
.
Window
;
import
android
.
view
.
accessibility
.
AccessibilityEvent
;
import
android
.
widget
.
TextView
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
activitystream
.
ActivityStreamTelemetry
;
import
org
.
mozilla
.
gecko
.
activitystream
.
homepanel
.
stream
.
StreamOverridablePageIconLayout
;
import
org
.
mozilla
.
gecko
.
activitystream
.
homepanel
.
model
.
WebpageModel
;
import
org
.
mozilla
.
gecko
.
home
.
HomePager
;
import
org
.
mozilla
.
gecko
.
util
.
StringUtils
;
import
org
.
mozilla
.
gecko
.
util
.
URIUtils
;
import
java
.
lang
.
ref
.
WeakReference
;
import
java
.
net
.
URI
;
import
java
.
net
.
URISyntaxException
;
class
BottomSheetContextMenu
extends
ActivityStreamContextMenu
{
private
static
final
String
LOGTAG
=
"
GeckoASBottomSheet
"
;
private
final
BottomSheetDialog
bottomSheetDialog
;
private
final
NavigationView
navigationView
;
private
final
View
content
;
private
final
View
activityView
;
private
String
[
]
pageDomainTextReference
=
new
String
[
]
{
"
"
}
;
public
BottomSheetContextMenu
(
final
View
anchor
final
ActivityStreamTelemetry
.
Extras
.
Builder
telemetryExtraBuilder
final
MenuMode
mode
final
WebpageModel
item
final
boolean
shouldOverrideIconWithImageProvider
HomePager
.
OnUrlOpenListener
onUrlOpenListener
HomePager
.
OnUrlOpenInBackgroundListener
onUrlOpenInBackgroundListener
final
int
tilesWidth
final
int
tilesHeight
)
{
super
(
anchor
telemetryExtraBuilder
mode
item
onUrlOpenListener
onUrlOpenInBackgroundListener
)
;
final
Context
context
=
anchor
.
getContext
(
)
;
this
.
activityView
=
(
(
Activity
)
context
)
.
findViewById
(
android
.
R
.
id
.
content
)
;
bottomSheetDialog
=
new
BottomSheetDialog
(
context
)
;
final
LayoutInflater
inflater
=
LayoutInflater
.
from
(
context
)
;
this
.
content
=
inflater
.
inflate
(
R
.
layout
.
activity_stream_contextmenu_bottomsheet
(
ViewGroup
)
activityView
false
)
;
bottomSheetDialog
.
setContentView
(
content
)
;
final
String
pageTitle
=
item
.
getTitle
(
)
;
final
String
sheetPageTitle
=
!
TextUtils
.
isEmpty
(
pageTitle
)
?
pageTitle
:
item
.
getUrl
(
)
;
final
TextView
titleView
=
(
TextView
)
content
.
findViewById
(
R
.
id
.
title
)
;
titleView
.
setText
(
sheetPageTitle
)
;
final
TextView
pageDomainView
=
(
TextView
)
content
.
findViewById
(
R
.
id
.
url
)
;
final
URI
itemURI
;
try
{
itemURI
=
new
URI
(
item
.
getUrl
(
)
)
;
final
UpdatePageDomainAsyncTask
updateDomainAsyncTask
=
new
UpdatePageDomainAsyncTask
(
context
pageDomainView
itemURI
pageDomainTextReference
)
;
updateDomainAsyncTask
.
execute
(
)
;
}
catch
(
final
URISyntaxException
e
)
{
pageDomainView
.
setText
(
"
"
)
;
}
overrideInitialAccessibilityAnnouncement
(
pageDomainView
titleView
sheetPageTitle
item
.
getUrl
(
)
)
;
final
StreamOverridablePageIconLayout
pageIconLayout
=
(
StreamOverridablePageIconLayout
)
content
.
findViewById
(
R
.
id
.
page_icon_layout
)
;
final
ViewGroup
.
LayoutParams
layoutParams
=
pageIconLayout
.
getLayoutParams
(
)
;
layoutParams
.
width
=
tilesWidth
;
layoutParams
.
height
=
tilesHeight
;
pageIconLayout
.
setLayoutParams
(
layoutParams
)
;
final
String
overrideIconURL
=
!
shouldOverrideIconWithImageProvider
?
null
:
item
.
getImageUrl
(
)
;
pageIconLayout
.
updateIcon
(
item
.
getUrl
(
)
overrideIconURL
)
;
navigationView
=
(
NavigationView
)
content
.
findViewById
(
R
.
id
.
menu
)
;
navigationView
.
setNavigationItemSelectedListener
(
this
)
;
super
.
postInit
(
)
;
}
private
void
overrideInitialAccessibilityAnnouncement
(
final
View
pageDomainView
final
View
pageTitleView
final
String
pageTitle
final
String
urlStr
)
{
final
View
.
AccessibilityDelegate
initialAnnouncementDelegate
=
new
View
.
AccessibilityDelegate
(
)
{
Override
public
void
onPopulateAccessibilityEvent
(
final
View
hostView
final
AccessibilityEvent
event
)
{
final
String
shortenedHost
=
pageDomainTextReference
[
0
]
;
final
String
finalHost
;
if
(
!
TextUtils
.
isEmpty
(
shortenedHost
)
)
{
finalHost
=
shortenedHost
;
}
else
if
(
TextUtils
.
isEmpty
(
urlStr
)
)
{
finalHost
=
"
"
;
}
else
{
final
Uri
uri
=
Uri
.
parse
(
urlStr
)
;
final
String
host
=
uri
.
getHost
(
)
;
finalHost
=
!
TextUtils
.
isEmpty
(
host
)
?
host
:
urlStr
;
}
final
String
announcementText
=
finalHost
+
"
"
+
pageTitle
;
event
.
getText
(
)
.
add
(
announcementText
)
;
super
.
onPopulateAccessibilityEvent
(
hostView
event
)
;
}
}
;
pageDomainView
.
setAccessibilityDelegate
(
initialAnnouncementDelegate
)
;
pageTitleView
.
setAccessibilityDelegate
(
initialAnnouncementDelegate
)
;
}
Override
public
MenuItem
getItemByID
(
int
id
)
{
return
navigationView
.
getMenu
(
)
.
findItem
(
id
)
;
}
Override
public
void
show
(
)
{
if
(
activityView
.
getHeight
(
)
>
activityView
.
getWidth
(
)
)
{
final
int
peekHeight
=
activityView
.
getHeight
(
)
-
(
activityView
.
getWidth
(
)
*
9
/
16
)
;
BottomSheetBehavior
<
View
>
bsBehaviour
=
BottomSheetBehavior
.
from
(
(
View
)
content
.
getParent
(
)
)
;
bsBehaviour
.
setPeekHeight
(
peekHeight
)
;
}
overrideBottomSheetDialogAccessibility
(
)
;
bottomSheetDialog
.
show
(
)
;
}
private
void
overrideBottomSheetDialogAccessibility
(
)
{
boolean
isSuccess
=
true
;
final
Window
window
=
bottomSheetDialog
.
getWindow
(
)
;
if
(
window
!
=
null
)
{
final
View
tapToDismissView
=
window
.
findViewById
(
android
.
support
.
design
.
R
.
id
.
touch_outside
)
;
if
(
tapToDismissView
!
=
null
)
{
tapToDismissView
.
setImportantForAccessibility
(
View
.
IMPORTANT_FOR_ACCESSIBILITY_NO
)
;
}
else
{
isSuccess
=
false
;
}
final
View
dialogView
=
window
.
findViewById
(
android
.
support
.
design
.
R
.
id
.
design_bottom_sheet
)
;
if
(
dialogView
!
=
null
)
{
dialogView
.
setImportantForAccessibility
(
View
.
IMPORTANT_FOR_ACCESSIBILITY_NO
)
;
}
else
{
isSuccess
=
false
;
}
}
if
(
!
isSuccess
)
{
Log
.
w
(
LOGTAG
"
Unable
to
fully
override
Activity
Stream
bottom
sheet
accessibility
behavior
.
"
)
;
}
}
public
void
dismiss
(
)
{
bottomSheetDialog
.
dismiss
(
)
;
}
private
static
class
UpdatePageDomainAsyncTask
extends
URIUtils
.
GetFormattedDomainAsyncTask
{
private
final
WeakReference
<
TextView
>
pageDomainViewWeakReference
;
private
final
String
[
]
pageDomainTextReference
;
private
UpdatePageDomainAsyncTask
(
final
Context
context
final
TextView
pageDomainView
final
URI
uri
final
String
[
]
pageDomainTextReference
)
{
super
(
context
uri
true
1
)
;
this
.
pageDomainViewWeakReference
=
new
WeakReference
<
>
(
pageDomainView
)
;
this
.
pageDomainTextReference
=
pageDomainTextReference
;
}
Override
protected
void
onPostExecute
(
final
String
baseDomain
)
{
super
.
onPostExecute
(
baseDomain
)
;
final
TextView
pageDomainView
=
pageDomainViewWeakReference
.
get
(
)
;
if
(
pageDomainView
=
=
null
)
{
return
;
}
final
String
updateText
;
if
(
!
TextUtils
.
isEmpty
(
baseDomain
)
)
{
updateText
=
baseDomain
;
}
else
{
final
String
normalizedHost
=
StringUtils
.
stripCommonSubdomains
(
uri
.
getHost
(
)
)
;
updateText
=
!
TextUtils
.
isEmpty
(
normalizedHost
)
?
normalizedHost
:
"
"
;
}
pageDomainTextReference
[
0
]
=
updateText
;
pageDomainView
.
setText
(
updateText
)
;
}
}
}
