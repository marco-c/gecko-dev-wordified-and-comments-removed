package
org
.
mozilla
.
gecko
.
activitystream
.
homepanel
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
TypedArray
;
import
android
.
graphics
.
Canvas
;
import
android
.
graphics
.
Rect
;
import
android
.
graphics
.
drawable
.
Drawable
;
import
android
.
support
.
v7
.
widget
.
RecyclerView
;
import
android
.
view
.
View
;
class
HighlightsDividerItemDecoration
extends
RecyclerView
.
ItemDecoration
{
private
static
final
int
START_DRAWING_AT_POSITION
=
1
;
private
static
final
int
[
]
ATTRS
=
new
int
[
]
{
android
.
R
.
attr
.
listDivider
}
;
private
Drawable
divider
;
HighlightsDividerItemDecoration
(
Context
context
)
{
final
TypedArray
a
=
context
.
obtainStyledAttributes
(
ATTRS
)
;
divider
=
a
.
getDrawable
(
0
)
;
a
.
recycle
(
)
;
}
Override
public
void
onDraw
(
Canvas
c
RecyclerView
parent
RecyclerView
.
State
state
)
{
final
int
left
=
parent
.
getPaddingLeft
(
)
;
final
int
right
=
parent
.
getWidth
(
)
-
parent
.
getPaddingRight
(
)
;
final
int
childCount
=
parent
.
getChildCount
(
)
;
for
(
int
i
=
0
;
i
<
childCount
;
i
+
+
)
{
final
View
child
=
parent
.
getChildAt
(
i
)
;
final
int
childPosition
=
parent
.
getChildAdapterPosition
(
child
)
;
if
(
childPosition
=
=
RecyclerView
.
NO_POSITION
|
|
childPosition
<
START_DRAWING_AT_POSITION
)
{
continue
;
}
if
(
child
.
getVisibility
(
)
=
=
View
.
GONE
)
{
continue
;
}
final
int
childViewType
=
parent
.
getAdapter
(
)
.
getItemViewType
(
childPosition
)
;
if
(
childViewType
=
=
StreamRecyclerAdapter
.
RowItemType
.
HIGHLIGHTS_TITLE
.
getViewType
(
)
|
|
childViewType
=
=
StreamRecyclerAdapter
.
RowItemType
.
TOP_STORIES_TITLE
.
getViewType
(
)
)
{
continue
;
}
final
RecyclerView
.
LayoutParams
params
=
(
RecyclerView
.
LayoutParams
)
child
.
getLayoutParams
(
)
;
final
int
dividerHeight
=
divider
.
getIntrinsicHeight
(
)
;
final
int
topOfDivider
=
child
.
getTop
(
)
-
params
.
topMargin
-
dividerHeight
/
2
;
final
int
bottomOfDivider
=
topOfDivider
+
divider
.
getIntrinsicHeight
(
)
;
divider
.
setBounds
(
left
topOfDivider
right
bottomOfDivider
)
;
divider
.
draw
(
c
)
;
}
}
Override
public
void
getItemOffsets
(
Rect
outRect
View
view
RecyclerView
parent
RecyclerView
.
State
state
)
{
outRect
.
set
(
0
0
0
divider
.
getIntrinsicHeight
(
)
)
;
}
}
