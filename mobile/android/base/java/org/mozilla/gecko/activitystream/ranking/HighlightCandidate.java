package
org
.
mozilla
.
gecko
.
activitystream
.
ranking
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
StringDef
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
org
.
mozilla
.
gecko
.
activitystream
.
ranking
.
RankingUtils
.
Func1
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
activitystream
.
homepanel
.
model
.
Highlight
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
class
HighlightCandidate
{
static
final
String
FEATURE_AGE_IN_DAYS
=
"
ageInDays
"
;
static
final
String
FEATURE_IMAGE_COUNT
=
"
imageCount
"
;
static
final
String
FEATURE_DOMAIN_FREQUENCY
=
"
domainFrequency
"
;
static
final
String
FEATURE_VISITS_COUNT
=
"
visitsCount
"
;
static
final
String
FEATURE_BOOKMARK_AGE_IN_MILLISECONDS
=
"
bookmarkageInDays
"
;
static
final
String
FEATURE_DESCRIPTION_LENGTH
=
"
descriptionLength
"
;
static
final
String
FEATURE_PATH_LENGTH
=
"
pathLength
"
;
static
final
String
FEATURE_QUERY_LENGTH
=
"
queryLength
"
;
static
final
String
FEATURE_IMAGE_SIZE
=
"
imageSize
"
;
StringDef
(
{
FEATURE_AGE_IN_DAYS
FEATURE_IMAGE_COUNT
FEATURE_DOMAIN_FREQUENCY
FEATURE_VISITS_COUNT
FEATURE_BOOKMARK_AGE_IN_MILLISECONDS
FEATURE_DESCRIPTION_LENGTH
FEATURE_PATH_LENGTH
FEATURE_QUERY_LENGTH
FEATURE_IMAGE_SIZE
}
)
public
interface
Feature
{
}
VisibleForTesting
final
Map
<
String
Double
>
features
;
private
Highlight
highlight
;
private
Nullable
String
imageUrl
;
private
String
host
;
private
double
score
;
public
static
HighlightCandidate
fromCursor
(
Cursor
cursor
)
{
final
HighlightCandidate
candidate
=
new
HighlightCandidate
(
)
;
extractHighlight
(
candidate
cursor
)
;
extractFeatures
(
candidate
cursor
)
;
return
candidate
;
}
private
static
void
extractHighlight
(
HighlightCandidate
candidate
Cursor
cursor
)
{
candidate
.
highlight
=
Highlight
.
fromCursor
(
cursor
)
;
}
private
static
void
extractFeatures
(
HighlightCandidate
candidate
Cursor
cursor
)
{
candidate
.
features
.
put
(
FEATURE_AGE_IN_DAYS
(
System
.
currentTimeMillis
(
)
-
cursor
.
getDouble
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
DATE_LAST_VISITED
)
)
)
/
(
1000
*
3600
*
24
)
)
;
candidate
.
features
.
put
(
FEATURE_VISITS_COUNT
cursor
.
getDouble
(
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
History
.
VISITS
)
)
)
;
final
int
occurrences
=
1
;
final
int
domainCountSize
=
cursor
.
getCount
(
)
;
candidate
.
features
.
put
(
FEATURE_DOMAIN_FREQUENCY
Math
.
log
(
1
+
domainCountSize
/
occurrences
)
)
;
candidate
.
imageUrl
=
candidate
.
highlight
.
getMetadata
(
)
.
getImageUrl
(
)
;
candidate
.
features
.
put
(
FEATURE_IMAGE_COUNT
candidate
.
highlight
.
getMetadata
(
)
.
hasImageUrl
(
)
?
1d
:
0d
)
;
candidate
.
features
.
put
(
FEATURE_IMAGE_SIZE
candidate
.
highlight
.
getMetadata
(
)
.
hasImageUrl
(
)
?
1d
:
0d
)
;
final
int
bookmarkDateColumnIndex
=
cursor
.
getColumnIndexOrThrow
(
BrowserContract
.
Bookmarks
.
DATE_CREATED
)
;
if
(
cursor
.
isNull
(
bookmarkDateColumnIndex
)
)
{
candidate
.
features
.
put
(
FEATURE_BOOKMARK_AGE_IN_MILLISECONDS
0d
)
;
}
else
{
candidate
.
features
.
put
(
FEATURE_BOOKMARK_AGE_IN_MILLISECONDS
Math
.
max
(
1
System
.
currentTimeMillis
(
)
-
cursor
.
getDouble
(
bookmarkDateColumnIndex
)
)
)
;
}
candidate
.
features
.
put
(
FEATURE_DESCRIPTION_LENGTH
(
double
)
candidate
.
highlight
.
getMetadata
(
)
.
getDescriptionLength
(
)
)
;
final
Uri
uri
=
Uri
.
parse
(
candidate
.
highlight
.
getUrl
(
)
)
;
candidate
.
host
=
uri
.
getHost
(
)
;
candidate
.
features
.
put
(
FEATURE_PATH_LENGTH
(
double
)
uri
.
getPathSegments
(
)
.
size
(
)
)
;
if
(
uri
.
isHierarchical
(
)
)
{
candidate
.
features
.
put
(
FEATURE_QUERY_LENGTH
(
double
)
uri
.
getQueryParameterNames
(
)
.
size
(
)
)
;
}
else
{
candidate
.
features
.
put
(
FEATURE_QUERY_LENGTH
0d
)
;
}
}
VisibleForTesting
HighlightCandidate
(
)
{
features
=
new
HashMap
<
>
(
)
;
}
double
getScore
(
)
{
return
score
;
}
void
updateScore
(
double
score
)
{
this
.
score
=
score
;
}
String
getUrl
(
)
{
return
highlight
.
getUrl
(
)
;
}
String
getHost
(
)
{
return
host
;
}
Nullable
String
getImageUrl
(
)
{
return
imageUrl
;
}
Highlight
getHighlight
(
)
{
return
highlight
;
}
double
getFeatureValue
(
Feature
String
feature
)
{
if
(
!
features
.
containsKey
(
feature
)
)
{
throw
new
IllegalStateException
(
"
No
value
for
feature
"
+
feature
)
;
}
return
features
.
get
(
feature
)
;
}
void
setFeatureValue
(
Feature
String
feature
double
value
)
{
features
.
put
(
feature
value
)
;
}
Map
<
String
Double
>
getFilteredFeatures
(
Func1
<
String
Boolean
>
filter
)
{
Map
<
String
Double
>
filteredFeatures
=
new
HashMap
<
>
(
)
;
for
(
Map
.
Entry
<
String
Double
>
entry
:
features
.
entrySet
(
)
)
{
if
(
filter
.
call
(
entry
.
getKey
(
)
)
)
{
filteredFeatures
.
put
(
entry
.
getKey
(
)
entry
.
getValue
(
)
)
;
}
}
return
filteredFeatures
;
}
}
