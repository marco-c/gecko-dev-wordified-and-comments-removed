package
org
.
mozilla
.
gecko
.
activitystream
.
ranking
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
CheckResult
;
import
android
.
support
.
annotation
.
IntDef
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
org
.
mozilla
.
gecko
.
activitystream
.
homepanel
.
model
.
Highlight
;
import
java
.
lang
.
annotation
.
Retention
;
import
java
.
lang
.
annotation
.
RetentionPolicy
;
class
HighlightCandidate
{
Retention
(
RetentionPolicy
.
SOURCE
)
IntDef
(
{
FEATURE_AGE_IN_DAYS
FEATURE_BOOKMARK_AGE_IN_MILLISECONDS
FEATURE_DESCRIPTION_LENGTH
FEATURE_DOMAIN_FREQUENCY
FEATURE_IMAGE_COUNT
FEATURE_IMAGE_SIZE
FEATURE_PATH_LENGTH
FEATURE_QUERY_LENGTH
FEATURE_VISITS_COUNT
}
)
interface
FeatureName
{
}
private
static
final
int
FEATURE_COUNT
=
9
;
static
final
int
FEATURE_AGE_IN_DAYS
=
0
;
static
final
int
FEATURE_BOOKMARK_AGE_IN_MILLISECONDS
=
1
;
static
final
int
FEATURE_DESCRIPTION_LENGTH
=
2
;
static
final
int
FEATURE_DOMAIN_FREQUENCY
=
3
;
static
final
int
FEATURE_IMAGE_COUNT
=
4
;
static
final
int
FEATURE_IMAGE_SIZE
=
5
;
static
final
int
FEATURE_PATH_LENGTH
=
6
;
static
final
int
FEATURE_QUERY_LENGTH
=
7
;
static
final
int
FEATURE_VISITS_COUNT
=
8
;
static
class
Features
{
private
final
double
[
]
values
=
new
double
[
FEATURE_COUNT
]
;
Features
(
)
{
}
double
get
(
final
FeatureName
int
featureName
)
{
return
values
[
featureName
]
;
}
void
put
(
final
FeatureName
int
featureName
final
double
value
)
{
values
[
featureName
]
=
value
;
}
}
VisibleForTesting
final
Features
features
=
new
Features
(
)
;
private
Highlight
highlight
;
private
Nullable
String
imageUrl
;
private
String
host
;
private
double
score
;
Nullable
public
static
HighlightCandidate
fromCursor
(
final
Cursor
cursor
final
HighlightCandidateCursorIndices
cursorIndices
)
{
final
HighlightCandidate
candidate
=
new
HighlightCandidate
(
)
;
extractHighlight
(
candidate
cursor
cursorIndices
)
;
final
boolean
isSuccess
=
extractFeatures
(
candidate
cursor
cursorIndices
)
;
if
(
!
isSuccess
)
{
return
null
;
}
return
candidate
;
}
private
static
void
extractHighlight
(
final
HighlightCandidate
candidate
final
Cursor
cursor
final
HighlightCandidateCursorIndices
cursorIndices
)
{
candidate
.
highlight
=
Highlight
.
fromCursor
(
cursor
cursorIndices
)
;
}
CheckResult
private
static
boolean
extractFeatures
(
final
HighlightCandidate
candidate
final
Cursor
cursor
final
HighlightCandidateCursorIndices
cursorIndices
)
{
final
Uri
uri
=
Uri
.
parse
(
candidate
.
highlight
.
getUrl
(
)
)
;
if
(
!
uri
.
isHierarchical
(
)
|
|
uri
.
getHost
(
)
=
=
null
)
{
return
false
;
}
candidate
.
features
.
put
(
FEATURE_AGE_IN_DAYS
(
System
.
currentTimeMillis
(
)
-
cursor
.
getDouble
(
cursorIndices
.
historyDateLastVisitedColumnIndex
)
)
/
(
1000
*
3600
*
24
)
)
;
candidate
.
features
.
put
(
FEATURE_VISITS_COUNT
cursor
.
getDouble
(
cursorIndices
.
visitsColumnIndex
)
)
;
final
int
occurrences
=
1
;
final
int
domainCountSize
=
cursor
.
getCount
(
)
;
candidate
.
features
.
put
(
FEATURE_DOMAIN_FREQUENCY
Math
.
log
(
1
+
domainCountSize
/
occurrences
)
)
;
candidate
.
imageUrl
=
candidate
.
highlight
.
getFastImageURLForComparison
(
)
;
candidate
.
features
.
put
(
FEATURE_IMAGE_COUNT
candidate
.
highlight
.
hasFastImageURL
(
)
?
1d
:
0d
)
;
candidate
.
features
.
put
(
FEATURE_IMAGE_SIZE
candidate
.
highlight
.
hasFastImageURL
(
)
?
1d
:
0d
)
;
if
(
cursor
.
isNull
(
cursorIndices
.
bookmarkDateCreatedColumnIndex
)
)
{
candidate
.
features
.
put
(
FEATURE_BOOKMARK_AGE_IN_MILLISECONDS
0d
)
;
}
else
{
candidate
.
features
.
put
(
FEATURE_BOOKMARK_AGE_IN_MILLISECONDS
Math
.
max
(
1
System
.
currentTimeMillis
(
)
-
cursor
.
getDouble
(
cursorIndices
.
bookmarkDateCreatedColumnIndex
)
)
)
;
}
candidate
.
features
.
put
(
FEATURE_DESCRIPTION_LENGTH
(
double
)
candidate
.
highlight
.
getFastDescriptionLength
(
)
)
;
candidate
.
host
=
uri
.
getHost
(
)
;
candidate
.
features
.
put
(
FEATURE_PATH_LENGTH
(
double
)
uri
.
getPathSegments
(
)
.
size
(
)
)
;
candidate
.
features
.
put
(
FEATURE_QUERY_LENGTH
(
double
)
uri
.
getQueryParameterNames
(
)
.
size
(
)
)
;
return
true
;
}
VisibleForTesting
HighlightCandidate
(
)
{
}
double
getScore
(
)
{
return
score
;
}
void
updateScore
(
double
score
)
{
this
.
score
=
score
;
}
String
getUrl
(
)
{
return
highlight
.
getUrl
(
)
;
}
String
getHost
(
)
{
return
host
;
}
Nullable
String
getFastImageUrlForComparison
(
)
{
return
imageUrl
;
}
Highlight
getHighlight
(
)
{
return
highlight
;
}
}
