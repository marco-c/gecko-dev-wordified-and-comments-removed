package
org
.
mozilla
.
gecko
.
activitystream
.
homepanel
.
stream
;
import
android
.
content
.
Context
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
View
;
import
android
.
widget
.
FrameLayout
;
import
android
.
widget
.
ImageView
;
import
com
.
squareup
.
picasso
.
Callback
;
import
com
.
squareup
.
picasso
.
Picasso
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
icons
.
IconCallback
;
import
org
.
mozilla
.
gecko
.
icons
.
IconResponse
;
import
org
.
mozilla
.
gecko
.
icons
.
Icons
;
import
org
.
mozilla
.
gecko
.
util
.
NetworkUtils
;
import
org
.
mozilla
.
gecko
.
widget
.
FaviconView
;
import
java
.
lang
.
ref
.
WeakReference
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Set
;
import
java
.
util
.
concurrent
.
Future
;
public
class
StreamOverridablePageIconLayout
extends
FrameLayout
implements
IconCallback
{
private
enum
UIMode
{
FAVICON_IMAGE
NONFAVICON_IMAGE
}
private
FaviconView
faviconView
;
private
ImageView
imageView
;
private
Nullable
Future
<
IconResponse
>
ongoingFaviconLoad
;
private
final
static
Set
<
String
>
nonFaviconFailedRequestURLs
=
Collections
.
synchronizedSet
(
new
HashSet
<
String
>
(
)
)
;
public
StreamOverridablePageIconLayout
(
final
Context
context
final
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
LayoutInflater
.
from
(
context
)
.
inflate
(
R
.
layout
.
activity_stream_overridable_page_icon_layout
this
true
)
;
initViews
(
)
;
}
public
void
updateIcon
(
NonNull
final
String
pageURL
Nullable
final
String
overrideImageURL
)
{
cancelPendingRequests
(
)
;
if
(
NetworkUtils
.
isWifi
(
getContext
(
)
)
&
&
!
TextUtils
.
isEmpty
(
overrideImageURL
)
&
&
!
nonFaviconFailedRequestURLs
.
contains
(
overrideImageURL
)
)
{
setUIMode
(
UIMode
.
NONFAVICON_IMAGE
)
;
Picasso
.
with
(
getContext
(
)
)
.
load
(
Uri
.
parse
(
overrideImageURL
)
)
.
fit
(
)
.
centerCrop
(
)
.
into
(
imageView
new
OnErrorUsePageURLCallback
(
this
pageURL
overrideImageURL
nonFaviconFailedRequestURLs
)
)
;
}
else
{
setFaviconImage
(
pageURL
)
;
}
}
private
void
setFaviconImage
(
NonNull
final
String
pageURL
)
{
setUIMode
(
UIMode
.
FAVICON_IMAGE
)
;
ongoingFaviconLoad
=
Icons
.
with
(
getContext
(
)
)
.
pageUrl
(
pageURL
)
.
skipNetwork
(
)
.
forActivityStream
(
)
.
build
(
)
.
execute
(
this
)
;
}
Override
public
void
onIconResponse
(
final
IconResponse
response
)
{
faviconView
.
updateImage
(
response
)
;
}
private
void
setUIMode
(
final
UIMode
uiMode
)
{
final
View
viewToShow
;
final
View
viewToHide
;
if
(
uiMode
=
=
UIMode
.
FAVICON_IMAGE
)
{
viewToShow
=
faviconView
;
viewToHide
=
imageView
;
}
else
{
viewToShow
=
imageView
;
viewToHide
=
faviconView
;
}
viewToShow
.
setVisibility
(
View
.
VISIBLE
)
;
viewToHide
.
setVisibility
(
View
.
GONE
)
;
}
private
void
cancelPendingRequests
(
)
{
Picasso
.
with
(
getContext
(
)
)
.
cancelRequest
(
imageView
)
;
if
(
ongoingFaviconLoad
!
=
null
)
{
ongoingFaviconLoad
.
cancel
(
true
)
;
ongoingFaviconLoad
=
null
;
}
}
private
void
initViews
(
)
{
faviconView
=
(
FaviconView
)
findViewById
(
R
.
id
.
favicon_view
)
;
imageView
=
(
ImageView
)
findViewById
(
R
.
id
.
image_view
)
;
setUIMode
(
UIMode
.
FAVICON_IMAGE
)
;
}
private
static
class
OnErrorUsePageURLCallback
implements
Callback
{
private
final
WeakReference
<
StreamOverridablePageIconLayout
>
layoutWeakReference
;
private
final
String
pageURL
;
private
final
String
requestURL
;
private
final
Set
<
String
>
failedRequestURLs
;
private
OnErrorUsePageURLCallback
(
final
StreamOverridablePageIconLayout
layoutWeakReference
NonNull
final
String
pageURL
NonNull
final
String
requestURL
final
Set
<
String
>
failedRequestURLs
)
{
this
.
layoutWeakReference
=
new
WeakReference
<
>
(
layoutWeakReference
)
;
this
.
pageURL
=
pageURL
;
this
.
requestURL
=
requestURL
;
this
.
failedRequestURLs
=
failedRequestURLs
;
}
Override
public
void
onSuccess
(
)
{
}
Override
public
void
onError
(
)
{
failedRequestURLs
.
add
(
requestURL
)
;
final
StreamOverridablePageIconLayout
layout
=
layoutWeakReference
.
get
(
)
;
if
(
layout
=
=
null
)
{
return
;
}
layout
.
setFaviconImage
(
pageURL
)
;
}
}
}
