package
org
.
mozilla
.
gecko
.
activitystream
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
android
.
net
.
Uri
;
import
android
.
os
.
AsyncTask
;
import
android
.
text
.
TextUtils
;
import
org
.
mozilla
.
gecko
.
switchboard
.
SwitchBoard
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
Experiments
;
import
org
.
mozilla
.
gecko
.
GeckoSharedPrefs
;
import
org
.
mozilla
.
gecko
.
preferences
.
GeckoPreferences
;
import
org
.
mozilla
.
gecko
.
util
.
StringUtils
;
import
org
.
mozilla
.
gecko
.
util
.
publicsuffix
.
PublicSuffix
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
List
;
public
class
ActivityStream
{
private
static
final
List
<
String
>
UNDESIRED_LABEL_PREFIXES
=
Arrays
.
asList
(
"
index
.
"
"
home
.
"
)
;
private
static
final
List
<
String
>
UNDESIRED_LABELS
=
Arrays
.
asList
(
"
render
"
"
login
"
"
edit
"
)
;
public
static
boolean
hasUserEnabledOrDisabled
(
Context
context
)
{
final
SharedPreferences
preferences
=
GeckoSharedPrefs
.
forApp
(
context
)
;
return
preferences
.
contains
(
GeckoPreferences
.
PREFS_ACTIVITY_STREAM
)
;
}
public
static
void
setUserEnabled
(
Context
context
boolean
value
)
{
GeckoSharedPrefs
.
forApp
(
context
)
.
edit
(
)
.
putBoolean
(
GeckoPreferences
.
PREFS_ACTIVITY_STREAM
value
)
.
apply
(
)
;
}
public
static
boolean
isEnabledByUser
(
Context
context
)
{
final
SharedPreferences
preferences
=
GeckoSharedPrefs
.
forApp
(
context
)
;
if
(
!
preferences
.
contains
(
GeckoPreferences
.
PREFS_ACTIVITY_STREAM
)
)
{
throw
new
IllegalStateException
(
"
User
hasn
'
t
made
a
decision
.
Call
hasUserEnabledOrDisabled
(
)
before
calling
this
method
"
)
;
}
return
preferences
.
getBoolean
(
GeckoPreferences
.
PREFS_ACTIVITY_STREAM
false
)
;
}
public
static
boolean
isEnabledByExperiment
(
Context
context
)
{
return
SwitchBoard
.
isInExperiment
(
context
Experiments
.
ACTIVITY_STREAM_OPT_OUT
)
;
}
public
static
boolean
isEnabled
(
Context
context
)
{
if
(
!
canBeEnabled
(
context
)
)
{
return
false
;
}
if
(
hasUserEnabledOrDisabled
(
context
)
)
{
return
isEnabledByUser
(
context
)
;
}
return
isEnabledByExperiment
(
context
)
;
}
public
static
boolean
isUserSwitchable
(
Context
context
)
{
if
(
!
canBeEnabled
(
context
)
)
{
return
false
;
}
return
SwitchBoard
.
isInExperiment
(
context
Experiments
.
ACTIVITY_STREAM_SETTING
)
;
}
public
static
boolean
canBeEnabled
(
Context
context
)
{
if
(
!
AppConstants
.
NIGHTLY_BUILD
)
{
return
false
;
}
if
(
!
SwitchBoard
.
isInExperiment
(
context
Experiments
.
ACTIVITY_STREAM
)
)
{
return
false
;
}
return
true
;
}
public
static
boolean
isHomePanel
(
)
{
return
true
;
}
}
