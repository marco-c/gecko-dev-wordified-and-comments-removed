package
org
.
mozilla
.
gecko
.
activitystream
;
import
android
.
support
.
annotation
.
NonNull
;
import
org
.
json
.
JSONArray
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
activitystream
.
homepanel
.
model
.
TopSite
;
import
java
.
util
.
HashMap
;
public
class
ActivityStreamTelemetry
{
public
static
class
Contract
{
public
final
static
String
FX_ACCOUNT_PRESENT
=
"
fx_account_present
"
;
public
final
static
String
ITEM
=
"
item
"
;
public
final
static
String
SOURCE_TYPE
=
"
source_type
"
;
public
final
static
String
SOURCE_SUBTYPE
=
"
source_subtype
"
;
public
final
static
String
ACTION_POSITION
=
"
action_position
"
;
public
final
static
String
COUNT
=
"
count
"
;
public
final
static
String
PAGE_NUMBER
=
"
page_number
"
;
public
final
static
String
INTERACTION
=
"
interaction
"
;
public
final
static
String
TYPE_TOPSITES
=
"
topsites
"
;
public
final
static
String
TYPE_HIGHLIGHTS
=
"
highlights
"
;
public
final
static
String
TYPE_POCKET
=
"
pocket
"
;
public
final
static
String
SUBTYPE_PINNED
=
"
pinned
"
;
public
final
static
String
SUBTYPE_SUGGESTED
=
"
suggested
"
;
public
final
static
String
SUBTYPE_TOP
=
"
top
"
;
public
final
static
String
SUBTYPE_VISITED
=
"
visited
"
;
public
final
static
String
SUBTYPE_BOOKMARKED
=
"
bookmarked
"
;
public
final
static
String
ITEM_SHARE
=
"
share
"
;
public
final
static
String
ITEM_ADD_BOOKMARK
=
"
add_bookmark
"
;
public
final
static
String
ITEM_REMOVE_BOOKMARK
=
"
remove_bookmark
"
;
public
final
static
String
ITEM_PIN
=
"
pin
"
;
public
final
static
String
ITEM_UNPIN
=
"
unpin
"
;
public
final
static
String
ITEM_COPY
=
"
copy
"
;
public
final
static
String
ITEM_ADD_TO_HOMESCREEN
=
"
homescreen
"
;
public
final
static
String
ITEM_NEW_TAB
=
"
newtab
"
;
public
final
static
String
ITEM_DISMISS
=
"
dismiss
"
;
public
final
static
String
ITEM_DELETE_HISTORY
=
"
delete
"
;
public
final
static
String
INTERACTION_MENU_BUTTON
=
"
menu_button
"
;
public
final
static
String
INTERACTION_LONG_CLICK
=
"
long_click
"
;
}
public
final
static
class
Extras
{
private
static
final
HashMap
<
String
Object
>
globals
=
new
HashMap
<
>
(
)
;
public
static
void
setGlobal
(
String
key
Object
value
)
{
globals
.
put
(
key
value
)
;
}
public
static
Builder
builder
(
)
{
return
new
Builder
(
)
;
}
public
final
static
class
Builder
{
private
final
JSONObject
data
;
private
Builder
(
)
{
data
=
new
JSONObject
(
globals
)
;
}
public
Builder
set
(
NonNull
String
key
Object
value
)
{
try
{
data
.
put
(
key
value
)
;
}
catch
(
JSONException
e
)
{
throw
new
IllegalArgumentException
(
"
Key
can
'
t
be
null
"
)
;
}
return
this
;
}
public
Builder
fromMenuItemId
(
int
itemId
)
{
switch
(
itemId
)
{
case
R
.
id
.
share
:
this
.
set
(
Contract
.
ITEM
Contract
.
ITEM_SHARE
)
;
break
;
case
R
.
id
.
copy_url
:
this
.
set
(
Contract
.
ITEM
Contract
.
ITEM_COPY
)
;
break
;
case
R
.
id
.
add_homescreen
:
this
.
set
(
Contract
.
ITEM
Contract
.
ITEM_ADD_TO_HOMESCREEN
)
;
break
;
case
R
.
id
.
open_new_private_tab
:
case
R
.
id
.
open_new_tab
:
this
.
set
(
Contract
.
ITEM
Contract
.
ITEM_NEW_TAB
)
;
break
;
case
R
.
id
.
dismiss
:
this
.
set
(
Contract
.
ITEM
Contract
.
ITEM_DISMISS
)
;
break
;
case
R
.
id
.
delete
:
this
.
set
(
Contract
.
ITEM
Contract
.
ITEM_DELETE_HISTORY
)
;
break
;
}
return
this
;
}
public
Builder
forHighlightSource
(
Utils
.
HighlightSource
source
)
{
switch
(
source
)
{
case
VISITED
:
this
.
set
(
Contract
.
SOURCE_SUBTYPE
Contract
.
SUBTYPE_VISITED
)
;
break
;
case
BOOKMARKED
:
this
.
set
(
Contract
.
SOURCE_SUBTYPE
Contract
.
SUBTYPE_BOOKMARKED
)
;
break
;
default
:
throw
new
IllegalStateException
(
"
Unknown
highlight
source
:
"
+
source
)
;
}
return
this
;
}
public
Builder
forTopSite
(
final
TopSite
topSite
)
{
this
.
set
(
ActivityStreamTelemetry
.
Contract
.
SOURCE_TYPE
ActivityStreamTelemetry
.
Contract
.
TYPE_TOPSITES
)
;
switch
(
topSite
.
getType
(
)
)
{
case
BrowserContract
.
TopSites
.
TYPE_PINNED
:
this
.
set
(
Contract
.
SOURCE_SUBTYPE
Contract
.
SUBTYPE_PINNED
)
;
break
;
case
BrowserContract
.
TopSites
.
TYPE_SUGGESTED
:
this
.
set
(
Contract
.
SOURCE_SUBTYPE
Contract
.
SUBTYPE_SUGGESTED
)
;
break
;
case
BrowserContract
.
TopSites
.
TYPE_TOP
:
this
.
set
(
Contract
.
SOURCE_SUBTYPE
Contract
.
SUBTYPE_TOP
)
;
break
;
case
BrowserContract
.
TopSites
.
TYPE_BLANK
:
default
:
throw
new
IllegalStateException
(
"
Unknown
top
site
type
:
"
+
topSite
.
getType
(
)
)
;
}
return
this
;
}
public
String
build
(
)
{
return
data
.
toString
(
)
;
}
}
}
}
