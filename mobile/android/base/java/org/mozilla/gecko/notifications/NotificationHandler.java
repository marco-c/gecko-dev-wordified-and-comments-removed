package
org
.
mozilla
.
gecko
.
notifications
;
import
android
.
graphics
.
Bitmap
;
import
android
.
app
.
Notification
;
import
android
.
app
.
PendingIntent
;
import
android
.
content
.
Context
;
import
android
.
support
.
v4
.
app
.
NotificationCompat
;
import
android
.
support
.
v4
.
app
.
NotificationManagerCompat
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
gfx
.
BitmapUtils
;
import
java
.
util
.
concurrent
.
ConcurrentHashMap
;
public
class
NotificationHandler
{
private
static
String
LOGTAG
=
"
GeckoNotifHandler
"
;
private
final
ConcurrentHashMap
<
String
Notification
>
mNotifications
=
new
ConcurrentHashMap
<
>
(
)
;
private
final
Context
mContext
;
private
final
NotificationManagerCompat
mNotificationManager
;
private
Notification
mForegroundNotification
;
private
String
mForegroundNotificationName
;
public
NotificationHandler
(
Context
context
)
{
mContext
=
context
;
mNotificationManager
=
NotificationManagerCompat
.
from
(
context
)
;
}
public
void
add
(
final
String
aName
String
aImageUrl
String
aHost
String
aAlertTitle
String
aAlertText
PendingIntent
contentIntent
PendingIntent
deleteIntent
)
{
remove
(
aName
)
;
final
NotificationCompat
.
Builder
builder
=
new
NotificationCompat
.
Builder
(
mContext
)
.
setContentTitle
(
aAlertTitle
)
.
setContentText
(
aAlertText
)
.
setSmallIcon
(
R
.
drawable
.
ic_status_logo
)
.
setContentIntent
(
contentIntent
)
.
setDeleteIntent
(
deleteIntent
)
.
setAutoCancel
(
true
)
.
setStyle
(
new
NotificationCompat
.
InboxStyle
(
)
.
addLine
(
aAlertText
)
.
setSummaryText
(
aHost
)
)
;
if
(
!
aImageUrl
.
isEmpty
(
)
)
{
final
Bitmap
image
=
BitmapUtils
.
decodeUrl
(
aImageUrl
)
;
builder
.
setLargeIcon
(
image
)
;
}
builder
.
setWhen
(
System
.
currentTimeMillis
(
)
)
;
final
Notification
notification
=
builder
.
build
(
)
;
mNotificationManager
.
notify
(
aName
0
notification
)
;
mNotifications
.
put
(
aName
notification
)
;
}
public
void
add
(
String
name
Notification
notification
)
{
if
(
isOngoing
(
notification
)
)
{
mNotificationManager
.
cancel
(
name
0
)
;
if
(
mForegroundNotificationName
=
=
null
)
{
setForegroundNotification
(
name
notification
)
;
}
else
if
(
name
.
equals
(
mForegroundNotificationName
)
)
{
mNotificationManager
.
notify
(
R
.
id
.
foregroundNotification
notification
)
;
}
}
else
{
updateForegroundNotification
(
name
)
;
mNotificationManager
.
notify
(
name
0
notification
)
;
}
mNotifications
.
put
(
name
notification
)
;
}
public
void
update
(
String
aName
long
aProgress
long
aProgressMax
String
aAlertText
)
{
Notification
notification
=
mNotifications
.
get
(
aName
)
;
if
(
notification
=
=
null
)
{
return
;
}
notification
=
new
NotificationCompat
.
Builder
(
mContext
)
.
setContentText
(
aAlertText
)
.
setSmallIcon
(
notification
.
icon
)
.
setWhen
(
notification
.
when
)
.
setContentIntent
(
notification
.
contentIntent
)
.
setProgress
(
(
int
)
aProgressMax
(
int
)
aProgress
false
)
.
build
(
)
;
add
(
aName
notification
)
;
}
public
void
remove
(
String
aName
)
{
final
Notification
notification
=
mNotifications
.
remove
(
aName
)
;
if
(
notification
!
=
null
)
{
updateForegroundNotification
(
aName
)
;
}
mNotificationManager
.
cancel
(
aName
0
)
;
}
public
boolean
isDone
(
)
{
return
mNotifications
.
isEmpty
(
)
;
}
public
boolean
isOngoing
(
String
aName
)
{
final
Notification
notification
=
mNotifications
.
get
(
aName
)
;
return
isOngoing
(
notification
)
;
}
public
boolean
isOngoing
(
Notification
notification
)
{
if
(
notification
!
=
null
&
&
(
notification
.
flags
&
Notification
.
FLAG_ONGOING_EVENT
)
>
0
)
{
return
true
;
}
return
false
;
}
protected
void
setForegroundNotification
(
String
name
Notification
notification
)
{
mForegroundNotificationName
=
name
;
mForegroundNotification
=
notification
;
}
private
void
updateForegroundNotification
(
String
oldName
)
{
if
(
oldName
!
=
null
&
&
oldName
.
equals
(
mForegroundNotificationName
)
)
{
Notification
foregroundNotification
=
null
;
String
foregroundName
=
null
;
for
(
final
String
name
:
mNotifications
.
keySet
(
)
)
{
final
Notification
notification
=
mNotifications
.
get
(
name
)
;
if
(
isOngoing
(
notification
)
)
{
foregroundNotification
=
notification
;
foregroundName
=
name
;
break
;
}
}
setForegroundNotification
(
foregroundName
foregroundNotification
)
;
}
}
}
