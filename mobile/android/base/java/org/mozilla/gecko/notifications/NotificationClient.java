package
org
.
mozilla
.
gecko
.
notifications
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
app
.
Activity
;
import
android
.
app
.
Notification
;
import
android
.
app
.
PendingIntent
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
graphics
.
Bitmap
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
v4
.
app
.
NotificationCompat
;
import
android
.
support
.
v4
.
app
.
NotificationManagerCompat
;
import
org
.
mozilla
.
gecko
.
AppConstants
;
import
org
.
mozilla
.
gecko
.
GeckoActivityMonitor
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
GeckoService
;
import
org
.
mozilla
.
gecko
.
NotificationListener
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
util
.
BitmapUtils
;
import
java
.
util
.
HashMap
;
public
final
class
NotificationClient
implements
NotificationListener
{
private
static
final
String
LOGTAG
=
"
GeckoNotificationClient
"
;
static
final
String
CLICK_ACTION
=
AppConstants
.
ANDROID_PACKAGE_NAME
+
"
.
NOTIFICATION_CLICK
"
;
static
final
String
CLOSE_ACTION
=
AppConstants
.
ANDROID_PACKAGE_NAME
+
"
.
NOTIFICATION_CLOSE
"
;
static
final
String
PERSISTENT_INTENT_EXTRA
=
"
persistentIntent
"
;
private
final
Context
mContext
;
private
final
NotificationManagerCompat
mNotificationManager
;
private
final
HashMap
<
String
Notification
>
mNotifications
=
new
HashMap
<
>
(
)
;
private
String
mForegroundNotification
;
public
NotificationClient
(
Context
context
)
{
mContext
=
context
.
getApplicationContext
(
)
;
mNotificationManager
=
NotificationManagerCompat
.
from
(
mContext
)
;
}
Override
public
void
showNotification
(
String
name
String
cookie
String
title
String
text
String
host
String
imageUrl
)
{
showNotification
(
name
cookie
title
text
host
imageUrl
null
)
;
}
Override
public
void
showPersistentNotification
(
String
name
String
cookie
String
title
String
text
String
host
String
imageUrl
String
data
)
{
showNotification
(
name
cookie
title
text
host
imageUrl
data
!
=
null
?
data
:
"
"
)
;
}
private
void
showNotification
(
String
name
String
cookie
String
title
String
text
String
host
String
imageUrl
String
persistentData
)
{
String
packageName
=
mContext
.
getPackageName
(
)
;
String
className
=
AppConstants
.
MOZ_ANDROID_BROWSER_INTENT_CLASS
;
final
Activity
currentActivity
=
GeckoActivityMonitor
.
getInstance
(
)
.
getCurrentActivity
(
)
;
if
(
currentActivity
!
=
null
)
{
className
=
currentActivity
.
getClass
(
)
.
getName
(
)
;
}
final
Uri
dataUri
=
(
new
Uri
.
Builder
(
)
)
.
scheme
(
"
moz
-
notification
"
)
.
authority
(
packageName
)
.
path
(
className
)
.
appendQueryParameter
(
"
name
"
name
)
.
appendQueryParameter
(
"
cookie
"
cookie
)
.
build
(
)
;
final
Intent
clickIntent
=
new
Intent
(
CLICK_ACTION
)
;
clickIntent
.
setClass
(
mContext
NotificationReceiver
.
class
)
;
clickIntent
.
setData
(
dataUri
)
;
if
(
persistentData
!
=
null
)
{
final
Intent
persistentIntent
=
GeckoService
.
getIntentToCreateServices
(
"
persistent
-
notification
-
click
"
persistentData
)
;
clickIntent
.
putExtra
(
PERSISTENT_INTENT_EXTRA
persistentIntent
)
;
}
final
PendingIntent
clickPendingIntent
=
PendingIntent
.
getBroadcast
(
mContext
0
clickIntent
PendingIntent
.
FLAG_UPDATE_CURRENT
)
;
final
Intent
closeIntent
=
new
Intent
(
CLOSE_ACTION
)
;
closeIntent
.
setClass
(
mContext
NotificationReceiver
.
class
)
;
closeIntent
.
setData
(
dataUri
)
;
if
(
persistentData
!
=
null
)
{
final
Intent
persistentIntent
=
GeckoService
.
getIntentToCreateServices
(
"
persistent
-
notification
-
close
"
persistentData
)
;
closeIntent
.
putExtra
(
PERSISTENT_INTENT_EXTRA
persistentIntent
)
;
}
final
PendingIntent
closePendingIntent
=
PendingIntent
.
getBroadcast
(
mContext
0
closeIntent
PendingIntent
.
FLAG_UPDATE_CURRENT
)
;
add
(
name
imageUrl
host
title
text
clickPendingIntent
closePendingIntent
)
;
GeckoAppShell
.
onNotificationShow
(
name
cookie
)
;
}
Override
public
void
closeNotification
(
String
name
)
{
remove
(
name
)
;
}
SuppressLint
(
"
NewApi
"
)
private
void
add
(
final
String
name
final
String
imageUrl
final
String
host
final
String
alertTitle
final
String
alertText
final
PendingIntent
contentIntent
final
PendingIntent
deleteIntent
)
{
final
NotificationCompat
.
Builder
builder
=
new
NotificationCompat
.
Builder
(
mContext
)
.
setContentTitle
(
alertTitle
)
.
setContentText
(
alertText
)
.
setSmallIcon
(
R
.
drawable
.
ic_status_logo
)
.
setContentIntent
(
contentIntent
)
.
setDeleteIntent
(
deleteIntent
)
.
setAutoCancel
(
true
)
.
setDefaults
(
Notification
.
DEFAULT_SOUND
)
.
setStyle
(
new
NotificationCompat
.
BigTextStyle
(
)
.
bigText
(
alertText
)
.
setSummaryText
(
host
)
)
;
if
(
!
AppConstants
.
Versions
.
preO
)
{
builder
.
setChannelId
(
NotificationHelper
.
getInstance
(
mContext
)
.
getNotificationChannel
(
NotificationHelper
.
Channel
.
SITE_NOTIFICATIONS
)
.
getId
(
)
)
;
}
if
(
!
imageUrl
.
isEmpty
(
)
)
{
final
Bitmap
image
=
BitmapUtils
.
decodeUrl
(
imageUrl
)
;
builder
.
setLargeIcon
(
image
)
;
}
builder
.
setWhen
(
System
.
currentTimeMillis
(
)
)
;
final
Notification
notification
=
builder
.
build
(
)
;
synchronized
(
this
)
{
mNotifications
.
put
(
name
notification
)
;
}
mNotificationManager
.
notify
(
name
0
notification
)
;
}
public
synchronized
void
add
(
final
String
name
final
Notification
notification
)
{
final
boolean
ongoing
=
isOngoing
(
notification
)
;
if
(
ongoing
!
=
isOngoing
(
mNotifications
.
get
(
name
)
)
)
{
onNotificationClose
(
name
)
;
}
mNotifications
.
put
(
name
notification
)
;
if
(
!
ongoing
)
{
mNotificationManager
.
notify
(
name
0
notification
)
;
return
;
}
if
(
mForegroundNotification
=
=
null
)
{
setForegroundNotificationLocked
(
name
notification
)
;
}
else
if
(
mForegroundNotification
.
equals
(
name
)
)
{
mNotificationManager
.
notify
(
R
.
id
.
foregroundNotification
notification
)
;
}
else
{
mNotificationManager
.
notify
(
name
0
notification
)
;
}
}
SuppressLint
(
"
NewApi
"
)
public
void
update
(
final
String
name
final
long
progress
final
long
progressMax
final
String
alertText
)
{
Notification
notification
;
synchronized
(
this
)
{
notification
=
mNotifications
.
get
(
name
)
;
}
if
(
notification
=
=
null
)
{
return
;
}
final
Notification
.
Builder
notificationBuilder
=
new
Notification
.
Builder
(
mContext
)
.
setContentText
(
alertText
)
.
setSmallIcon
(
notification
.
icon
)
.
setWhen
(
notification
.
when
)
.
setContentIntent
(
notification
.
contentIntent
)
.
setOnlyAlertOnce
(
true
)
.
setProgress
(
(
int
)
progressMax
(
int
)
progress
false
)
;
if
(
!
AppConstants
.
Versions
.
preO
)
{
notificationBuilder
.
setChannelId
(
notification
.
getChannelId
(
)
)
;
}
notification
=
notificationBuilder
.
build
(
)
;
add
(
name
notification
)
;
}
synchronized
Notification
onNotificationClose
(
final
String
name
)
{
mNotificationManager
.
cancel
(
name
0
)
;
final
Notification
notification
=
mNotifications
.
remove
(
name
)
;
if
(
notification
!
=
null
)
{
updateForegroundNotificationLocked
(
name
)
;
}
return
notification
;
}
public
synchronized
void
remove
(
final
String
name
)
{
final
Notification
notification
=
onNotificationClose
(
name
)
;
if
(
notification
=
=
null
|
|
notification
.
deleteIntent
=
=
null
)
{
return
;
}
try
{
notification
.
deleteIntent
.
send
(
)
;
}
catch
(
final
PendingIntent
.
CanceledException
e
)
{
}
}
public
synchronized
boolean
isDone
(
)
{
return
mNotifications
.
isEmpty
(
)
;
}
public
synchronized
boolean
isOngoing
(
final
String
name
)
{
return
isOngoing
(
mNotifications
.
get
(
name
)
)
;
}
public
boolean
isOngoing
(
final
Notification
notification
)
{
if
(
notification
!
=
null
&
&
(
notification
.
flags
&
Notification
.
FLAG_ONGOING_EVENT
)
!
=
0
)
{
return
true
;
}
return
false
;
}
private
void
setForegroundNotificationLocked
(
NonNull
final
String
name
NonNull
final
Notification
notification
)
{
mForegroundNotification
=
name
;
final
Intent
intent
=
new
Intent
(
mContext
NotificationService
.
class
)
;
intent
.
putExtra
(
NotificationService
.
EXTRA_NOTIFICATION
notification
)
;
toggleForegroundService
(
intent
)
;
}
private
void
removeForegroundNotificationLocked
(
)
{
mForegroundNotification
=
null
;
final
Intent
intent
=
new
Intent
(
mContext
NotificationService
.
class
)
;
intent
.
putExtra
(
NotificationService
.
EXTRA_ACTION_STOP
true
)
;
toggleForegroundService
(
intent
)
;
}
SuppressLint
(
"
NewApi
"
)
private
void
toggleForegroundService
(
Intent
intent
)
{
if
(
AppConstants
.
Versions
.
preO
)
{
mContext
.
startService
(
intent
)
;
}
else
{
mContext
.
startForegroundService
(
intent
)
;
}
}
private
void
updateForegroundNotificationLocked
(
final
String
oldName
)
{
if
(
mForegroundNotification
=
=
null
|
|
!
mForegroundNotification
.
equals
(
oldName
)
)
{
return
;
}
for
(
final
String
name
:
mNotifications
.
keySet
(
)
)
{
final
Notification
notification
=
mNotifications
.
get
(
name
)
;
if
(
isOngoing
(
notification
)
)
{
onNotificationClose
(
name
)
;
setForegroundNotificationLocked
(
name
notification
)
;
return
;
}
}
removeForegroundNotificationLocked
(
)
;
}
}
