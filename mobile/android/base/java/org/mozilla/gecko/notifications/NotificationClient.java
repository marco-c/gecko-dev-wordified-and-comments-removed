package
org
.
mozilla
.
gecko
.
notifications
;
import
android
.
app
.
Notification
;
import
android
.
app
.
PendingIntent
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
Log
;
import
java
.
util
.
LinkedList
;
import
java
.
util
.
concurrent
.
ConcurrentHashMap
;
public
abstract
class
NotificationClient
{
private
static
final
String
LOGTAG
=
"
GeckoNotificationClient
"
;
private
volatile
NotificationHandler
mHandler
;
private
boolean
mReady
;
private
final
LinkedList
<
Runnable
>
mTaskQueue
=
new
LinkedList
<
Runnable
>
(
)
;
public
synchronized
void
add
(
final
String
aName
final
String
aImageUrl
final
String
aHost
final
String
aAlertTitle
final
String
aAlertText
final
PendingIntent
contentIntent
final
PendingIntent
deleteIntent
)
{
mTaskQueue
.
add
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
mHandler
.
add
(
aName
aImageUrl
aHost
aAlertTitle
aAlertText
contentIntent
deleteIntent
)
;
}
}
)
;
notify
(
)
;
if
(
!
mReady
)
{
bind
(
)
;
}
}
public
synchronized
void
add
(
final
String
name
final
Notification
notification
)
{
mTaskQueue
.
add
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
mHandler
.
add
(
name
notification
)
;
}
}
)
;
notify
(
)
;
if
(
!
mReady
)
{
bind
(
)
;
}
}
public
synchronized
void
remove
(
final
String
name
)
{
mTaskQueue
.
add
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
mHandler
.
remove
(
name
)
;
}
}
)
;
if
(
!
mReady
)
{
bind
(
)
;
}
notify
(
)
;
}
public
boolean
isOngoing
(
String
name
)
{
final
NotificationHandler
handler
=
mHandler
;
return
handler
!
=
null
&
&
handler
.
isOngoing
(
name
)
;
}
protected
void
bind
(
)
{
mReady
=
true
;
}
protected
void
unbind
(
)
{
mReady
=
false
;
}
protected
void
connectHandler
(
NotificationHandler
handler
)
{
mHandler
=
handler
;
new
Thread
(
new
NotificationRunnable
(
)
)
.
start
(
)
;
}
private
class
NotificationRunnable
implements
Runnable
{
Override
public
void
run
(
)
{
Runnable
r
;
try
{
while
(
true
)
{
synchronized
(
NotificationClient
.
this
)
{
r
=
mTaskQueue
.
poll
(
)
;
while
(
r
=
=
null
)
{
if
(
mHandler
.
isDone
(
)
)
{
unbind
(
)
;
return
;
}
NotificationClient
.
this
.
wait
(
)
;
r
=
mTaskQueue
.
poll
(
)
;
}
}
r
.
run
(
)
;
}
}
catch
(
InterruptedException
e
)
{
Log
.
e
(
LOGTAG
"
Notification
task
queue
processing
interrupted
"
e
)
;
}
}
}
}
