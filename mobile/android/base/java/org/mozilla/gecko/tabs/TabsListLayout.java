package
org
.
mozilla
.
gecko
.
tabs
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
animation
.
PropertyAnimator
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
content
.
Context
;
import
android
.
support
.
v7
.
widget
.
LinearLayoutManager
;
import
android
.
support
.
v7
.
widget
.
helper
.
ItemTouchHelper
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
public
class
TabsListLayout
extends
TabsLayout
{
private
static
final
int
ANIMATION_DURATION
=
250
;
private
static
final
int
ANIMATION_CASCADE_DELAY
=
75
;
private
int
closeAllAnimationCount
;
public
TabsListLayout
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
R
.
layout
.
tabs_list_item_view
)
;
setHasFixedSize
(
true
)
;
setLayoutManager
(
new
LinearLayoutManager
(
context
)
)
;
final
TabsTouchHelperCallback
callback
=
new
TabsTouchHelperCallback
(
this
)
;
final
ItemTouchHelper
touchHelper
=
new
ItemTouchHelper
(
callback
)
;
touchHelper
.
attachToRecyclerView
(
this
)
;
final
TabsListLayoutAnimator
animator
=
new
TabsListLayoutAnimator
(
)
;
animator
.
setRemoveDuration
(
ANIMATION_DURATION
)
;
animator
.
setSupportsChangeAnimations
(
false
)
;
setItemAnimator
(
animator
)
;
}
Override
public
void
closeAll
(
)
{
final
int
childCount
=
getChildCount
(
)
;
if
(
childCount
=
=
0
)
{
autoHidePanel
(
)
;
return
;
}
setEnabled
(
false
)
;
int
cascadeDelay
=
0
;
closeAllAnimationCount
=
0
;
for
(
int
i
=
childCount
-
1
;
i
>
=
0
;
i
-
-
)
{
final
View
view
=
getChildAt
(
i
)
;
if
(
view
=
=
null
)
{
continue
;
}
final
PropertyAnimator
animator
=
new
PropertyAnimator
(
ANIMATION_DURATION
)
;
animator
.
attach
(
view
PropertyAnimator
.
Property
.
ALPHA
0
)
;
animator
.
attach
(
view
PropertyAnimator
.
Property
.
TRANSLATION_X
view
.
getWidth
(
)
)
;
closeAllAnimationCount
+
+
;
animator
.
addPropertyAnimationListener
(
new
PropertyAnimator
.
PropertyAnimationListener
(
)
{
Override
public
void
onPropertyAnimationStart
(
)
{
}
Override
public
void
onPropertyAnimationEnd
(
)
{
closeAllAnimationCount
-
-
;
if
(
closeAllAnimationCount
>
0
)
{
return
;
}
autoHidePanel
(
)
;
TabsListLayout
.
this
.
setEnabled
(
true
)
;
closeAllTabs
(
)
;
}
}
)
;
ThreadUtils
.
postDelayedToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
animator
.
start
(
)
;
}
}
cascadeDelay
)
;
cascadeDelay
+
=
ANIMATION_CASCADE_DELAY
;
}
}
Override
protected
boolean
addAtIndexRequiresScroll
(
int
index
)
{
return
index
=
=
0
|
|
index
=
=
getAdapter
(
)
.
getItemCount
(
)
-
1
;
}
}
