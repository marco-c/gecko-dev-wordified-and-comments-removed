package
org
.
mozilla
.
gecko
.
tabs
;
import
org
.
mozilla
.
gecko
.
Tab
;
import
android
.
content
.
Context
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
v7
.
widget
.
RecyclerView
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewGroup
;
import
android
.
widget
.
Button
;
import
java
.
util
.
ArrayList
;
public
class
TabsLayoutRecyclerAdapter
extends
RecyclerView
.
Adapter
<
TabsLayoutRecyclerAdapter
.
TabsListViewHolder
>
{
private
final
int
tabLayoutId
;
private
NonNull
ArrayList
<
Tab
>
tabs
;
private
final
LayoutInflater
inflater
;
private
final
boolean
isPrivate
;
private
final
Button
.
OnClickListener
closeOnClickListener
;
public
static
class
TabsListViewHolder
extends
RecyclerView
.
ViewHolder
{
public
TabsListViewHolder
(
View
itemView
)
{
super
(
itemView
)
;
}
}
public
TabsLayoutRecyclerAdapter
(
Context
context
int
tabLayoutId
boolean
isPrivate
Button
.
OnClickListener
closeOnClickListener
)
{
inflater
=
LayoutInflater
.
from
(
context
)
;
this
.
tabLayoutId
=
tabLayoutId
;
this
.
isPrivate
=
isPrivate
;
this
.
closeOnClickListener
=
closeOnClickListener
;
tabs
=
new
ArrayList
<
>
(
0
)
;
}
final
void
setTabs
(
NonNull
ArrayList
<
Tab
>
tabs
)
{
this
.
tabs
=
tabs
;
notifyDataSetChanged
(
)
;
}
final
void
clear
(
)
{
tabs
=
new
ArrayList
<
>
(
0
)
;
notifyDataSetChanged
(
)
;
}
final
boolean
removeTab
(
Tab
tab
)
{
final
int
position
=
getPositionForTab
(
tab
)
;
if
(
position
=
=
-
1
)
{
return
false
;
}
tabs
.
remove
(
position
)
;
notifyItemRemoved
(
position
)
;
return
true
;
}
final
int
getPositionForTab
(
Tab
tab
)
{
if
(
tab
=
=
null
)
{
return
-
1
;
}
return
tabs
.
indexOf
(
tab
)
;
}
void
notifyTabChanged
(
Tab
tab
)
{
notifyItemChanged
(
getPositionForTab
(
tab
)
)
;
}
Override
public
int
getItemCount
(
)
{
return
tabs
.
size
(
)
;
}
private
Tab
getItem
(
int
position
)
{
return
tabs
.
get
(
position
)
;
}
Override
public
void
onBindViewHolder
(
TabsListViewHolder
viewHolder
int
position
)
{
final
Tab
tab
=
getItem
(
position
)
;
final
TabsLayoutItemView
itemView
=
(
TabsLayoutItemView
)
viewHolder
.
itemView
;
itemView
.
assignValues
(
tab
)
;
itemView
.
setAlpha
(
1
)
;
itemView
.
setTranslationX
(
0
)
;
itemView
.
setTranslationY
(
0
)
;
}
Override
public
TabsListViewHolder
onCreateViewHolder
(
ViewGroup
parent
int
viewType
)
{
final
TabsLayoutItemView
viewItem
=
(
TabsLayoutItemView
)
inflater
.
inflate
(
tabLayoutId
parent
false
)
;
viewItem
.
setPrivateMode
(
isPrivate
)
;
viewItem
.
setCloseOnClickListener
(
closeOnClickListener
)
;
return
new
TabsListViewHolder
(
viewItem
)
;
}
}
