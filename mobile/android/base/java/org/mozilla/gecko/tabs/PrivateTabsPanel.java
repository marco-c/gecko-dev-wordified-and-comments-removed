package
org
.
mozilla
.
gecko
.
tabs
;
import
org
.
mozilla
.
gecko
.
GeckoApp
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
import
org
.
mozilla
.
gecko
.
tabs
.
TabsPanel
.
CloseAllPanelView
;
import
org
.
mozilla
.
gecko
.
tabs
.
TabsPanel
.
TabsLayout
;
import
android
.
content
.
Context
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
View
;
import
android
.
widget
.
RelativeLayout
;
import
android
.
widget
.
TextView
;
import
static
org
.
mozilla
.
gecko
.
Tabs
.
LOADURL_NEW_TAB
;
import
static
org
.
mozilla
.
gecko
.
Tabs
.
LOADURL_PRIVATE
;
class
PrivateTabsPanel
extends
RelativeLayout
implements
CloseAllPanelView
{
private
final
static
String
PRIVATE_BROWSING_URL
=
"
https
:
/
/
support
.
mozilla
.
org
/
kb
/
private
-
browsing
-
firefox
-
android
"
;
private
final
TabsLayout
tabsLayout
;
public
PrivateTabsPanel
(
final
Context
context
final
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
LayoutInflater
.
from
(
context
)
.
inflate
(
R
.
layout
.
private_tabs_panel
this
)
;
tabsLayout
=
(
TabsLayout
)
findViewById
(
R
.
id
.
private_tabs_layout
)
;
final
View
emptyTabsFrame
=
findViewById
(
R
.
id
.
private_tabs_empty
)
;
tabsLayout
.
setEmptyView
(
emptyTabsFrame
)
;
final
TextView
learnMoreView
=
(
TextView
)
findViewById
(
R
.
id
.
learn_more_link
)
;
learnMoreView
.
setOnClickListener
(
new
OnClickListener
(
)
{
Override
public
void
onClick
(
View
v
)
{
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
ACTION
TelemetryContract
.
Method
.
ACTIONBAR
"
new_tab
"
)
;
Tabs
.
getInstance
(
)
.
loadUrl
(
PRIVATE_BROWSING_URL
LOADURL_NEW_TAB
|
LOADURL_PRIVATE
)
;
final
GeckoApp
geckoApp
=
(
GeckoApp
)
context
;
geckoApp
.
autoHideTabs
(
)
;
}
}
)
;
}
Override
public
void
setTabsPanel
(
final
TabsPanel
panel
)
{
tabsLayout
.
setTabsPanel
(
panel
)
;
}
Override
public
void
show
(
)
{
tabsLayout
.
show
(
)
;
setVisibility
(
View
.
VISIBLE
)
;
}
Override
public
void
hide
(
)
{
setVisibility
(
View
.
GONE
)
;
tabsLayout
.
hide
(
)
;
}
Override
public
boolean
shouldExpand
(
)
{
return
tabsLayout
.
shouldExpand
(
)
;
}
Override
public
void
closeAll
(
)
{
tabsLayout
.
closeAll
(
)
;
}
}
