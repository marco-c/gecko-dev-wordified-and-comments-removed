package
org
.
mozilla
.
gecko
.
tabs
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
animation
.
Animator
;
import
android
.
animation
.
AnimatorListenerAdapter
;
import
android
.
support
.
v4
.
animation
.
AnimatorCompatHelper
;
import
android
.
support
.
v7
.
widget
.
DefaultItemAnimator
;
import
android
.
support
.
v7
.
widget
.
RecyclerView
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewPropertyAnimator
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
class
TabsListLayoutAnimator
extends
DefaultItemAnimator
{
private
List
<
RecyclerView
.
ViewHolder
>
pendingRemovals
=
new
ArrayList
<
>
(
)
;
private
List
<
RecyclerView
.
ViewHolder
>
removeAnimations
=
new
ArrayList
<
>
(
)
;
Override
public
void
runPendingAnimations
(
)
{
if
(
pendingRemovals
.
isEmpty
(
)
)
{
super
.
runPendingAnimations
(
)
;
return
;
}
for
(
RecyclerView
.
ViewHolder
holder
:
pendingRemovals
)
{
animateRemoveImpl
(
holder
)
;
}
pendingRemovals
.
clear
(
)
;
ThreadUtils
.
postDelayedToUiThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
TabsListLayoutAnimator
.
super
.
runPendingAnimations
(
)
;
}
}
getRemoveDuration
(
)
)
;
}
Override
public
boolean
animateRemove
(
RecyclerView
.
ViewHolder
holder
)
{
if
(
holder
.
itemView
.
getAlpha
(
)
<
1
)
{
dispatchRemoveFinished
(
holder
)
;
return
false
;
}
resetAnimation
(
holder
)
;
pendingRemovals
.
add
(
holder
)
;
return
true
;
}
private
void
animateRemoveImpl
(
final
RecyclerView
.
ViewHolder
holder
)
{
final
TabsLayoutItemView
itemView
=
(
TabsLayoutItemView
)
holder
.
itemView
;
removeAnimations
.
add
(
holder
)
;
final
ViewPropertyAnimator
animator
=
itemView
.
animate
(
)
;
animator
.
translationX
(
itemView
.
getWidth
(
)
)
.
alpha
(
0
)
.
setDuration
(
getRemoveDuration
(
)
)
.
setListener
(
new
AnimatorListenerAdapter
(
)
{
Override
public
void
onAnimationStart
(
Animator
animation
)
{
dispatchRemoveStarting
(
holder
)
;
}
Override
public
void
onAnimationEnd
(
Animator
animation
)
{
animator
.
setListener
(
null
)
;
itemView
.
setAlpha
(
1
)
;
itemView
.
setTranslationX
(
0
)
;
dispatchRemoveFinished
(
holder
)
;
removeAnimations
.
remove
(
holder
)
;
dispatchFinishedWhenDone
(
)
;
}
}
)
.
start
(
)
;
}
Override
public
void
endAnimation
(
RecyclerView
.
ViewHolder
item
)
{
final
View
view
=
item
.
itemView
;
view
.
animate
(
)
.
cancel
(
)
;
if
(
pendingRemovals
.
remove
(
item
)
)
{
view
.
setAlpha
(
1
)
;
view
.
setTranslationX
(
0
)
;
dispatchRemoveFinished
(
item
)
;
}
if
(
isRunning
(
)
)
{
super
.
endAnimation
(
item
)
;
}
else
{
dispatchAnimationsFinished
(
)
;
}
}
private
void
resetAnimation
(
RecyclerView
.
ViewHolder
holder
)
{
AnimatorCompatHelper
.
clearInterpolator
(
holder
.
itemView
)
;
endAnimation
(
holder
)
;
}
Override
public
boolean
isRunning
(
)
{
return
(
!
pendingRemovals
.
isEmpty
(
)
|
|
!
removeAnimations
.
isEmpty
(
)
|
|
super
.
isRunning
(
)
)
;
}
private
void
dispatchFinishedWhenDone
(
)
{
if
(
!
isRunning
(
)
)
{
dispatchAnimationsFinished
(
)
;
}
}
Override
public
void
endAnimations
(
)
{
final
int
count
=
pendingRemovals
.
size
(
)
;
for
(
int
i
=
count
-
1
;
i
>
=
0
;
i
-
-
)
{
final
RecyclerView
.
ViewHolder
item
=
pendingRemovals
.
get
(
i
)
;
dispatchRemoveFinished
(
item
)
;
pendingRemovals
.
remove
(
i
)
;
}
if
(
!
isRunning
(
)
)
{
dispatchAnimationsFinished
(
)
;
return
;
}
cancelAll
(
removeAnimations
)
;
super
.
endAnimations
(
)
;
}
void
cancelAll
(
List
<
RecyclerView
.
ViewHolder
>
viewHolders
)
{
for
(
int
i
=
viewHolders
.
size
(
)
-
1
;
i
>
=
0
;
i
-
-
)
{
viewHolders
.
get
(
i
)
.
itemView
.
animate
(
)
.
cancel
(
)
;
}
}
}
