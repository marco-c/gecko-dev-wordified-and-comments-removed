package
org
.
mozilla
.
gecko
.
tabs
;
import
org
.
mozilla
.
gecko
.
R
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
Resources
;
import
android
.
support
.
v7
.
widget
.
GridLayoutManager
;
import
android
.
util
.
AttributeSet
;
public
class
TabsGridLayout
extends
TabsLayout
{
private
final
int
desiredColumnWidth
;
public
TabsGridLayout
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
R
.
layout
.
tabs_layout_item_view
)
;
final
Resources
resources
=
context
.
getResources
(
)
;
setLayoutManager
(
new
GridLayoutManager
(
context
1
)
)
;
desiredColumnWidth
=
resources
.
getDimensionPixelSize
(
R
.
dimen
.
tab_panel_item_width
)
;
final
int
viewPaddingHorizontal
=
resources
.
getDimensionPixelSize
(
R
.
dimen
.
tab_panel_grid_hpadding
)
;
final
int
viewPaddingVertical
=
resources
.
getDimensionPixelSize
(
R
.
dimen
.
tab_panel_grid_vpadding
)
;
setPadding
(
viewPaddingHorizontal
viewPaddingVertical
viewPaddingHorizontal
viewPaddingVertical
)
;
setClipToPadding
(
false
)
;
setScrollBarStyle
(
SCROLLBARS_OUTSIDE_OVERLAY
)
;
setItemAnimator
(
new
TabsGridLayoutAnimator
(
)
)
;
}
Override
public
void
closeAll
(
)
{
autoHidePanel
(
)
;
closeAllTabs
(
)
;
}
Override
protected
boolean
addAtIndexRequiresScroll
(
int
index
)
{
final
GridLayoutManager
layoutManager
=
(
GridLayoutManager
)
getLayoutManager
(
)
;
final
int
spanCount
=
layoutManager
.
getSpanCount
(
)
;
final
int
firstVisibleIndex
=
layoutManager
.
findFirstVisibleItemPosition
(
)
;
return
index
=
=
firstVisibleIndex
|
|
(
index
=
=
getAdapter
(
)
.
getItemCount
(
)
-
1
&
&
index
%
spanCount
=
=
0
)
;
}
Override
public
void
onSizeChanged
(
int
w
int
h
int
oldw
int
oldh
)
{
super
.
onSizeChanged
(
w
h
oldw
oldh
)
;
if
(
w
=
=
oldw
)
{
return
;
}
final
int
nonPaddingWidth
=
w
-
getPaddingLeft
(
)
-
getPaddingRight
(
)
;
final
int
spanCount
=
Math
.
max
(
1
nonPaddingWidth
/
desiredColumnWidth
)
;
final
GridLayoutManager
layoutManager
=
(
GridLayoutManager
)
getLayoutManager
(
)
;
if
(
spanCount
=
=
layoutManager
.
getSpanCount
(
)
)
{
return
;
}
layoutManager
.
setSpanCount
(
spanCount
)
;
}
}
