package
org
.
mozilla
.
gecko
.
tabs
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
android
.
content
.
Context
;
import
android
.
support
.
v7
.
widget
.
GridLayoutManager
;
import
android
.
support
.
v7
.
widget
.
helper
.
ItemTouchHelper
;
import
android
.
util
.
AttributeSet
;
abstract
class
TabsGridLayout
extends
TabsLayout
{
TabsGridLayout
(
Context
context
AttributeSet
attrs
int
spanCount
)
{
super
(
context
attrs
R
.
layout
.
tabs_layout_item_view
)
;
setLayoutManager
(
new
GridLayoutManager
(
context
spanCount
)
)
;
setClipToPadding
(
false
)
;
setScrollBarStyle
(
SCROLLBARS_OUTSIDE_OVERLAY
)
;
setItemAnimator
(
new
TabsGridLayoutAnimator
(
)
)
;
final
int
dragDirections
=
ItemTouchHelper
.
UP
|
ItemTouchHelper
.
DOWN
|
ItemTouchHelper
.
START
|
ItemTouchHelper
.
END
;
final
TabsTouchHelperCallback
callback
=
new
TabsTouchHelperCallback
(
this
dragDirections
this
)
{
Override
protected
float
alphaForItemSwipeDx
(
float
dX
int
distanceToAlphaMin
)
{
return
1f
-
2f
*
Math
.
abs
(
dX
)
/
distanceToAlphaMin
;
}
}
;
final
ItemTouchHelper
touchHelper
=
new
ItemTouchHelper
(
callback
)
;
touchHelper
.
attachToRecyclerView
(
this
)
;
}
Override
public
void
onCloseAll
(
)
{
autoHidePanel
(
)
;
if
(
isNormal
(
)
)
{
Tabs
.
getInstance
(
)
.
closeAllTabs
(
)
;
}
else
{
Tabs
.
getInstance
(
)
.
closeAllPrivateTabs
(
)
;
}
}
Override
protected
boolean
addAtIndexRequiresScroll
(
int
index
)
{
final
GridLayoutManager
layoutManager
=
(
GridLayoutManager
)
getLayoutManager
(
)
;
final
int
spanCount
=
layoutManager
.
getSpanCount
(
)
;
final
int
firstVisibleIndex
=
layoutManager
.
findFirstVisibleItemPosition
(
)
;
return
index
=
=
firstVisibleIndex
|
|
index
=
=
getAdapter
(
)
.
getItemCount
(
)
-
1
;
}
}
