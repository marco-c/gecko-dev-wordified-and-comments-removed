package
org
.
mozilla
.
gecko
.
tabs
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
Tab
;
import
org
.
mozilla
.
gecko
.
Tabs
;
import
org
.
mozilla
.
gecko
.
widget
.
RecyclerViewClickSupport
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
TypedArray
;
import
android
.
support
.
v7
.
widget
.
RecyclerView
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
import
android
.
widget
.
Button
;
import
java
.
util
.
ArrayList
;
public
abstract
class
TabsLayout
extends
RecyclerView
implements
TabsPanel
.
TabsLayout
Tabs
.
OnTabsChangedListener
RecyclerViewClickSupport
.
OnItemClickListener
TabsTouchHelperCallback
.
DismissListener
{
private
static
final
String
LOGTAG
=
"
Gecko
"
+
TabsLayout
.
class
.
getSimpleName
(
)
;
private
final
boolean
isPrivate
;
private
TabsPanel
tabsPanel
;
private
final
TabsLayoutAdapter
tabsAdapter
;
public
TabsLayout
(
Context
context
AttributeSet
attrs
int
itemViewLayoutResId
)
{
super
(
context
attrs
)
;
TypedArray
a
=
context
.
obtainStyledAttributes
(
attrs
R
.
styleable
.
TabsLayout
)
;
isPrivate
=
(
a
.
getInt
(
R
.
styleable
.
TabsLayout_tabs
0x0
)
=
=
1
)
;
a
.
recycle
(
)
;
tabsAdapter
=
new
TabsLayoutAdapter
(
context
itemViewLayoutResId
isPrivate
new
Button
.
OnClickListener
(
)
{
Override
public
void
onClick
(
View
v
)
{
TabsLayoutItemView
itemView
=
(
TabsLayoutItemView
)
v
.
getTag
(
)
;
closeTab
(
itemView
)
;
}
}
)
;
setAdapter
(
tabsAdapter
)
;
RecyclerViewClickSupport
.
addTo
(
this
)
.
setOnItemClickListener
(
this
)
;
setRecyclerListener
(
new
RecyclerListener
(
)
{
Override
public
void
onViewRecycled
(
RecyclerView
.
ViewHolder
holder
)
{
final
TabsLayoutItemView
itemView
=
(
TabsLayoutItemView
)
holder
.
itemView
;
itemView
.
setThumbnail
(
null
)
;
itemView
.
setCloseVisible
(
true
)
;
}
}
)
;
}
Override
public
void
setTabsPanel
(
TabsPanel
panel
)
{
tabsPanel
=
panel
;
}
Override
public
void
show
(
)
{
setVisibility
(
View
.
VISIBLE
)
;
Tabs
.
getInstance
(
)
.
refreshThumbnails
(
)
;
Tabs
.
registerOnTabsChangedListener
(
this
)
;
refreshTabsData
(
)
;
}
Override
public
void
hide
(
)
{
setVisibility
(
View
.
GONE
)
;
Tabs
.
unregisterOnTabsChangedListener
(
this
)
;
GeckoAppShell
.
notifyObservers
(
"
Tab
:
Screenshot
:
Cancel
"
"
"
)
;
tabsAdapter
.
clear
(
)
;
}
Override
public
boolean
shouldExpand
(
)
{
return
true
;
}
protected
void
autoHidePanel
(
)
{
tabsPanel
.
autoHidePanel
(
)
;
}
Override
public
void
onTabChanged
(
Tab
tab
Tabs
.
TabEvents
msg
String
data
)
{
switch
(
msg
)
{
case
ADDED
:
final
int
tabIndex
=
Integer
.
parseInt
(
data
)
;
tabsAdapter
.
notifyTabInserted
(
tab
tabIndex
)
;
if
(
addAtIndexRequiresScroll
(
tabIndex
)
)
{
scrollToPosition
(
tabIndex
)
;
}
break
;
case
CLOSED
:
if
(
tab
.
isPrivate
(
)
=
=
isPrivate
&
&
tabsAdapter
.
getItemCount
(
)
>
0
)
{
tabsAdapter
.
removeTab
(
tab
)
;
}
break
;
case
SELECTED
:
case
UNSELECTED
:
case
THUMBNAIL
:
case
TITLE
:
case
RECORDING_CHANGE
:
case
AUDIO_PLAYING_CHANGE
:
tabsAdapter
.
notifyTabChanged
(
tab
)
;
break
;
}
}
abstract
protected
boolean
addAtIndexRequiresScroll
(
int
index
)
;
protected
int
getSelectedAdapterPosition
(
)
{
return
tabsAdapter
.
getPositionForTab
(
Tabs
.
getInstance
(
)
.
getSelectedTab
(
)
)
;
}
Override
public
void
onItemClicked
(
RecyclerView
recyclerView
int
position
View
v
)
{
final
TabsLayoutItemView
item
=
(
TabsLayoutItemView
)
v
;
final
int
tabId
=
item
.
getTabId
(
)
;
final
Tab
tab
=
Tabs
.
getInstance
(
)
.
selectTab
(
tabId
)
;
if
(
tab
=
=
null
)
{
return
;
}
autoHidePanel
(
)
;
Tabs
.
getInstance
(
)
.
notifyListeners
(
tab
Tabs
.
TabEvents
.
OPENED_FROM_TABS_TRAY
)
;
}
private
void
updateSelectedPosition
(
)
{
final
int
selected
=
getSelectedAdapterPosition
(
)
;
if
(
selected
!
=
NO_POSITION
)
{
scrollToPosition
(
selected
)
;
}
}
private
void
refreshTabsData
(
)
{
final
ArrayList
<
Tab
>
tabData
=
new
ArrayList
<
>
(
)
;
final
Iterable
<
Tab
>
allTabs
=
Tabs
.
getInstance
(
)
.
getTabsInOrder
(
)
;
for
(
final
Tab
tab
:
allTabs
)
{
if
(
tab
.
isPrivate
(
)
=
=
isPrivate
)
{
tabData
.
add
(
tab
)
;
}
}
tabsAdapter
.
setTabs
(
tabData
)
;
updateSelectedPosition
(
)
;
}
private
void
closeTab
(
View
view
)
{
final
TabsLayoutItemView
itemView
=
(
TabsLayoutItemView
)
view
;
final
Tab
tab
=
getTabForView
(
itemView
)
;
if
(
tab
=
=
null
)
{
return
;
}
final
boolean
closingLastTab
=
tabsAdapter
.
getItemCount
(
)
=
=
1
;
Tabs
.
getInstance
(
)
.
closeTab
(
tab
true
)
;
if
(
closingLastTab
)
{
autoHidePanel
(
)
;
}
}
protected
void
closeAllTabs
(
)
{
final
Iterable
<
Tab
>
tabs
=
Tabs
.
getInstance
(
)
.
getTabsInOrder
(
)
;
for
(
final
Tab
tab
:
tabs
)
{
if
(
!
isPrivate
|
|
tab
.
isPrivate
(
)
)
{
Tabs
.
getInstance
(
)
.
closeTab
(
tab
false
)
;
}
}
}
Override
public
void
onItemDismiss
(
View
view
)
{
closeTab
(
view
)
;
}
Override
public
void
onChildAttachedToWindow
(
View
child
)
{
child
.
setTranslationX
(
0
)
;
child
.
setTranslationY
(
0
)
;
child
.
setAlpha
(
1
)
;
}
private
Tab
getTabForView
(
View
view
)
{
if
(
view
=
=
null
)
{
return
null
;
}
return
Tabs
.
getInstance
(
)
.
getTab
(
(
(
TabsLayoutItemView
)
view
)
.
getTabId
(
)
)
;
}
Override
public
void
setEmptyView
(
View
emptyView
)
{
}
Override
abstract
public
void
closeAll
(
)
;
}
