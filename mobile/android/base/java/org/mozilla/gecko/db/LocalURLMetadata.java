package
org
.
mozilla
.
gecko
.
db
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Collections
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Iterator
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
java
.
util
.
Set
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
favicons
.
Favicons
;
import
org
.
mozilla
.
gecko
.
util
.
ThreadUtils
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
ContentValues
;
import
android
.
database
.
Cursor
;
import
android
.
net
.
Uri
;
import
android
.
util
.
Log
;
import
android
.
util
.
LruCache
;
public
class
LocalURLMetadata
implements
URLMetadata
{
private
static
final
String
LOGTAG
=
"
GeckoURLMetadata
"
;
private
final
Uri
uriWithProfile
;
public
LocalURLMetadata
(
String
mProfile
)
{
uriWithProfile
=
DBUtils
.
appendProfileWithDefault
(
mProfile
URLMetadataTable
.
CONTENT_URI
)
;
}
private
static
final
Set
<
String
>
COLUMNS
;
static
{
final
HashSet
<
String
>
tempModel
=
new
HashSet
<
>
(
4
)
;
tempModel
.
add
(
URLMetadataTable
.
URL_COLUMN
)
;
tempModel
.
add
(
URLMetadataTable
.
TILE_IMAGE_URL_COLUMN
)
;
tempModel
.
add
(
URLMetadataTable
.
TILE_COLOR_COLUMN
)
;
tempModel
.
add
(
URLMetadataTable
.
TOUCH_ICON_COLUMN
)
;
COLUMNS
=
Collections
.
unmodifiableSet
(
tempModel
)
;
}
private
static
final
int
CACHE_SIZE
=
9
;
private
final
LruCache
<
String
Map
<
String
Object
>
>
cache
=
new
LruCache
<
String
Map
<
String
Object
>
>
(
CACHE_SIZE
)
;
Override
public
Map
<
String
Object
>
fromJSON
(
JSONObject
obj
)
{
Map
<
String
Object
>
data
=
new
HashMap
<
String
Object
>
(
)
;
for
(
String
key
:
COLUMNS
)
{
if
(
obj
.
has
(
key
)
)
{
data
.
put
(
key
obj
.
optString
(
key
)
)
;
}
}
try
{
JSONObject
icons
;
if
(
obj
.
has
(
"
touchIconList
"
)
&
&
(
icons
=
obj
.
getJSONObject
(
"
touchIconList
"
)
)
.
length
(
)
>
0
)
{
int
preferredSize
=
GeckoAppShell
.
getPreferredIconSize
(
)
;
Iterator
<
String
>
keys
=
icons
.
keys
(
)
;
ArrayList
<
Integer
>
sizes
=
new
ArrayList
<
Integer
>
(
icons
.
length
(
)
)
;
while
(
keys
.
hasNext
(
)
)
{
sizes
.
add
(
new
Integer
(
keys
.
next
(
)
)
)
;
}
final
int
bestSize
=
Favicons
.
selectBestSizeFromList
(
sizes
preferredSize
)
;
final
String
iconURL
=
icons
.
getString
(
Integer
.
toString
(
bestSize
)
)
;
data
.
put
(
URLMetadataTable
.
TOUCH_ICON_COLUMN
iconURL
)
;
}
}
catch
(
JSONException
e
)
{
Log
.
w
(
LOGTAG
"
Exception
processing
touchIconList
for
LocalURLMetadata
;
ignoring
.
"
e
)
;
}
return
Collections
.
unmodifiableMap
(
data
)
;
}
private
Map
<
String
Object
>
fromCursor
(
Cursor
c
)
{
Map
<
String
Object
>
data
=
new
HashMap
<
String
Object
>
(
)
;
String
[
]
columns
=
c
.
getColumnNames
(
)
;
for
(
String
column
:
columns
)
{
if
(
COLUMNS
.
contains
(
column
)
)
{
try
{
data
.
put
(
column
c
.
getString
(
c
.
getColumnIndexOrThrow
(
column
)
)
)
;
}
catch
(
Exception
ex
)
{
Log
.
i
(
LOGTAG
"
Error
getting
data
for
"
+
column
ex
)
;
}
}
}
return
Collections
.
unmodifiableMap
(
data
)
;
}
Override
public
Map
<
String
Map
<
String
Object
>
>
getForURLs
(
final
ContentResolver
cr
final
Collection
<
String
>
urls
final
List
<
String
>
requestedColumns
)
{
ThreadUtils
.
assertNotOnUiThread
(
)
;
ThreadUtils
.
assertNotOnGeckoThread
(
)
;
final
Map
<
String
Map
<
String
Object
>
>
data
=
new
HashMap
<
String
Map
<
String
Object
>
>
(
)
;
if
(
urls
.
isEmpty
(
)
|
|
requestedColumns
.
isEmpty
(
)
)
{
Log
.
e
(
LOGTAG
"
Queried
metadata
for
nothing
"
)
;
return
data
;
}
List
<
String
>
urlsToQuery
=
new
ArrayList
<
String
>
(
)
;
for
(
String
url
:
urls
)
{
final
Map
<
String
Object
>
hit
=
cache
.
get
(
url
)
;
if
(
hit
!
=
null
)
{
boolean
useCache
=
true
;
for
(
String
c
:
requestedColumns
)
{
if
(
!
hit
.
containsKey
(
c
)
)
{
useCache
=
false
;
}
}
if
(
useCache
)
{
data
.
put
(
url
hit
)
;
}
else
{
urlsToQuery
.
add
(
url
)
;
}
}
else
{
urlsToQuery
.
add
(
url
)
;
}
}
if
(
urlsToQuery
.
size
(
)
=
=
0
)
{
return
Collections
.
unmodifiableMap
(
data
)
;
}
final
String
selection
=
DBUtils
.
computeSQLInClause
(
urlsToQuery
.
size
(
)
URLMetadataTable
.
URL_COLUMN
)
;
List
<
String
>
columns
=
requestedColumns
;
if
(
!
columns
.
contains
(
URLMetadataTable
.
URL_COLUMN
)
)
{
columns
=
new
ArrayList
<
String
>
(
columns
)
;
columns
.
add
(
URLMetadataTable
.
URL_COLUMN
)
;
}
final
Cursor
cursor
=
cr
.
query
(
uriWithProfile
columns
.
toArray
(
new
String
[
columns
.
size
(
)
]
)
selection
urlsToQuery
.
toArray
(
new
String
[
urlsToQuery
.
size
(
)
]
)
null
)
;
try
{
if
(
!
cursor
.
moveToFirst
(
)
)
{
return
Collections
.
unmodifiableMap
(
data
)
;
}
do
{
final
Map
<
String
Object
>
metadata
=
fromCursor
(
cursor
)
;
final
String
url
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
URLMetadataTable
.
URL_COLUMN
)
)
;
data
.
put
(
url
metadata
)
;
cache
.
put
(
url
metadata
)
;
}
while
(
cursor
.
moveToNext
(
)
)
;
}
finally
{
cursor
.
close
(
)
;
}
return
Collections
.
unmodifiableMap
(
data
)
;
}
Override
public
void
save
(
final
ContentResolver
cr
final
Map
<
String
Object
>
data
)
{
ThreadUtils
.
assertNotOnUiThread
(
)
;
ThreadUtils
.
assertNotOnGeckoThread
(
)
;
try
{
ContentValues
values
=
new
ContentValues
(
)
;
for
(
String
key
:
COLUMNS
)
{
if
(
data
.
containsKey
(
key
)
)
{
values
.
put
(
key
(
String
)
data
.
get
(
key
)
)
;
}
}
if
(
values
.
size
(
)
=
=
0
)
{
return
;
}
Uri
uri
=
uriWithProfile
.
buildUpon
(
)
.
appendQueryParameter
(
BrowserContract
.
PARAM_INSERT_IF_NEEDED
"
true
"
)
.
build
(
)
;
cr
.
update
(
uri
values
URLMetadataTable
.
URL_COLUMN
+
"
=
?
"
new
String
[
]
{
(
String
)
data
.
get
(
URLMetadataTable
.
URL_COLUMN
)
}
)
;
}
catch
(
Exception
ex
)
{
Log
.
e
(
LOGTAG
"
error
saving
"
ex
)
;
}
}
}
