package
org
.
mozilla
.
gecko
;
import
org
.
mozilla
.
gecko
.
util
.
EventCallback
;
import
org
.
mozilla
.
gecko
.
util
.
NativeJSObject
;
import
android
.
app
.
Activity
;
import
android
.
graphics
.
drawable
.
Drawable
;
import
android
.
graphics
.
drawable
.
InsetDrawable
;
import
android
.
support
.
design
.
widget
.
Snackbar
;
import
android
.
support
.
v4
.
content
.
ContextCompat
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
TypedValue
;
import
android
.
view
.
View
;
import
android
.
widget
.
TextView
;
import
java
.
lang
.
ref
.
WeakReference
;
public
class
SnackbarHelper
{
public
static
abstract
class
SnackbarCallback
extends
Snackbar
.
Callback
implements
View
.
OnClickListener
{
}
private
static
class
SnackbarEventCallback
extends
SnackbarCallback
{
private
EventCallback
callback
;
public
SnackbarEventCallback
(
EventCallback
callback
)
{
this
.
callback
=
callback
;
}
Override
public
synchronized
void
onClick
(
View
view
)
{
if
(
callback
=
=
null
)
{
return
;
}
callback
.
sendSuccess
(
null
)
;
callback
=
null
;
}
Override
public
synchronized
void
onDismissed
(
Snackbar
snackbar
int
event
)
{
if
(
callback
=
=
null
|
|
event
=
=
Snackbar
.
Callback
.
DISMISS_EVENT_ACTION
)
{
return
;
}
callback
.
sendError
(
null
)
;
callback
=
null
;
}
}
private
static
final
Object
currentSnackbarLock
=
new
Object
(
)
;
private
static
WeakReference
<
Snackbar
>
currentSnackbar
=
new
WeakReference
<
>
(
null
)
;
public
static
void
showSnackbar
(
Activity
activity
String
message
int
duration
)
{
showSnackbarWithAction
(
activity
message
duration
null
null
)
;
}
public
static
void
showSnackbar
(
Activity
activity
final
NativeJSObject
object
final
EventCallback
callback
)
{
final
String
message
=
object
.
getString
(
"
message
"
)
;
final
int
duration
=
object
.
getInt
(
"
duration
"
)
;
NativeJSObject
action
=
object
.
optObject
(
"
action
"
null
)
;
showSnackbarWithAction
(
activity
message
duration
action
!
=
null
?
action
.
optString
(
"
label
"
null
)
:
null
new
SnackbarHelper
.
SnackbarEventCallback
(
callback
)
)
;
}
public
static
void
showSnackbarWithAction
(
Activity
activity
String
message
int
duration
String
action
SnackbarCallback
callback
)
{
showSnackbarWithActionAndColors
(
activity
message
duration
action
callback
null
null
null
)
;
}
public
static
void
showSnackbarWithActionAndColors
(
Activity
activity
String
message
int
duration
String
action
SnackbarCallback
callback
Drawable
icon
Integer
backgroundColor
Integer
actionColor
)
{
final
View
parentView
=
findBestParentView
(
activity
)
;
final
Snackbar
snackbar
=
Snackbar
.
make
(
parentView
message
duration
)
;
if
(
callback
!
=
null
&
&
!
TextUtils
.
isEmpty
(
action
)
)
{
snackbar
.
setAction
(
action
callback
)
;
if
(
actionColor
=
=
null
)
{
ContextCompat
.
getColor
(
activity
R
.
color
.
fennec_ui_orange
)
;
}
else
{
snackbar
.
setActionTextColor
(
actionColor
)
;
}
snackbar
.
setCallback
(
callback
)
;
}
if
(
icon
!
=
null
)
{
int
leftPadding
=
(
int
)
TypedValue
.
applyDimension
(
TypedValue
.
COMPLEX_UNIT_DIP
10
activity
.
getResources
(
)
.
getDisplayMetrics
(
)
)
;
final
InsetDrawable
paddedIcon
=
new
InsetDrawable
(
icon
0
0
leftPadding
0
)
;
paddedIcon
.
setBounds
(
0
0
leftPadding
+
icon
.
getIntrinsicWidth
(
)
icon
.
getIntrinsicHeight
(
)
)
;
TextView
textView
=
(
TextView
)
snackbar
.
getView
(
)
.
findViewById
(
android
.
support
.
design
.
R
.
id
.
snackbar_text
)
;
textView
.
setCompoundDrawables
(
paddedIcon
null
null
null
)
;
}
if
(
backgroundColor
!
=
null
)
{
snackbar
.
getView
(
)
.
setBackgroundColor
(
backgroundColor
)
;
}
snackbar
.
show
(
)
;
synchronized
(
currentSnackbarLock
)
{
currentSnackbar
=
new
WeakReference
<
>
(
snackbar
)
;
}
}
public
static
void
dismissCurrentSnackbar
(
)
{
synchronized
(
currentSnackbarLock
)
{
final
Snackbar
snackbar
=
currentSnackbar
.
get
(
)
;
if
(
snackbar
!
=
null
&
&
snackbar
.
isShown
(
)
)
{
snackbar
.
dismiss
(
)
;
}
}
}
private
static
View
findBestParentView
(
Activity
activity
)
{
if
(
activity
instanceof
GeckoApp
)
{
final
View
view
=
activity
.
findViewById
(
R
.
id
.
root_layout
)
;
if
(
view
!
=
null
)
{
return
view
;
}
}
return
activity
.
findViewById
(
android
.
R
.
id
.
content
)
;
}
}
