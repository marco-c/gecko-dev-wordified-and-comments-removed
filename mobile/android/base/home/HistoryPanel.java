package
org
.
mozilla
.
gecko
.
home
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Calendar
;
import
java
.
util
.
EnumSet
;
import
java
.
util
.
List
;
import
java
.
util
.
Locale
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
mozilla
.
gecko
.
EventDispatcher
;
import
org
.
mozilla
.
gecko
.
GeckoAppShell
;
import
org
.
mozilla
.
gecko
.
GeckoEvent
;
import
org
.
mozilla
.
gecko
.
GeckoProfile
;
import
org
.
mozilla
.
gecko
.
R
;
import
org
.
mozilla
.
gecko
.
RestrictedProfiles
;
import
org
.
mozilla
.
gecko
.
Telemetry
;
import
org
.
mozilla
.
gecko
.
TelemetryContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
.
Combined
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserDB
;
import
org
.
mozilla
.
gecko
.
home
.
HomeContextMenuInfo
.
RemoveItemType
;
import
org
.
mozilla
.
gecko
.
home
.
HomePager
.
OnUrlOpenListener
;
import
org
.
mozilla
.
gecko
.
restrictions
.
Restriction
;
import
android
.
app
.
AlertDialog
;
import
android
.
content
.
ContentResolver
;
import
android
.
content
.
Context
;
import
android
.
content
.
DialogInterface
;
import
android
.
database
.
Cursor
;
import
android
.
graphics
.
Typeface
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
v4
.
content
.
Loader
;
import
android
.
support
.
v4
.
widget
.
CursorAdapter
;
import
android
.
text
.
SpannableStringBuilder
;
import
android
.
text
.
TextPaint
;
import
android
.
text
.
method
.
LinkMovementMethod
;
import
android
.
text
.
style
.
ClickableSpan
;
import
android
.
text
.
style
.
StyleSpan
;
import
android
.
text
.
style
.
UnderlineSpan
;
import
android
.
util
.
Log
;
import
android
.
view
.
ContextMenu
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewGroup
;
import
android
.
view
.
ViewStub
;
import
android
.
widget
.
AdapterView
;
import
android
.
widget
.
ImageView
;
import
android
.
widget
.
TextView
;
public
class
HistoryPanel
extends
HomeFragment
{
private
static
final
String
LOGTAG
=
"
GeckoHistoryPanel
"
;
private
static
final
long
MS_PER_DAY
=
86400000
;
private
static
final
long
MS_PER_WEEK
=
MS_PER_DAY
*
7
;
private
static
final
List
<
MostRecentSectionRange
>
recentSectionTimeOffsetList
=
new
ArrayList
<
>
(
MostRecentSection
.
values
(
)
.
length
)
;
private
static
final
int
LOADER_ID_HISTORY
=
0
;
private
final
static
String
FORMAT_S1
=
"
%
1
s
"
;
private
final
static
String
FORMAT_S2
=
"
%
2
s
"
;
private
static
MostRecentSection
selected
;
private
CursorAdapter
mAdapter
;
private
HomeListView
mList
;
private
View
mClearHistoryButton
;
private
View
mEmptyView
;
private
CursorLoaderCallbacks
mCursorLoaderCallbacks
;
public
enum
MostRecentSection
{
TODAY
YESTERDAY
WEEK
THIS_MONTH
MONTH_AGO
TWO_MONTHS_AGO
THREE_MONTHS_AGO
FOUR_MONTHS_AGO
FIVE_MONTHS_AGO
MostRecentSection
OLDER_THAN_SIX_MONTHS
}
;
protected
interface
HistoryUrlProvider
{
public
String
getURL
(
int
position
)
;
}
Override
public
View
onCreateView
(
LayoutInflater
inflater
ViewGroup
container
Bundle
savedInstanceState
)
{
return
inflater
.
inflate
(
R
.
layout
.
home_history_panel
container
false
)
;
}
Override
public
void
onViewCreated
(
View
view
Bundle
savedInstanceState
)
{
mList
=
(
HomeListView
)
view
.
findViewById
(
R
.
id
.
list
)
;
mList
.
setTag
(
HomePager
.
LIST_TAG_HISTORY
)
;
mList
.
setOnItemClickListener
(
new
AdapterView
.
OnItemClickListener
(
)
{
Override
public
void
onItemClick
(
AdapterView
<
?
>
parent
View
view
int
position
long
id
)
{
final
String
url
=
(
(
HistoryUrlProvider
)
mAdapter
)
.
getURL
(
position
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
LOAD_URL
TelemetryContract
.
Method
.
LIST_ITEM
)
;
mUrlOpenListener
.
onUrlOpen
(
url
EnumSet
.
of
(
OnUrlOpenListener
.
Flags
.
ALLOW_SWITCH_TO_TAB
)
)
;
}
}
)
;
mList
.
setContextMenuInfoFactory
(
new
HomeContextMenuInfo
.
Factory
(
)
{
Override
public
HomeContextMenuInfo
makeInfoForCursor
(
View
view
int
position
long
id
Cursor
cursor
)
{
final
HomeContextMenuInfo
info
=
new
HomeContextMenuInfo
(
view
position
id
)
;
info
.
url
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
Combined
.
URL
)
)
;
info
.
title
=
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
Combined
.
TITLE
)
)
;
info
.
historyId
=
cursor
.
getInt
(
cursor
.
getColumnIndexOrThrow
(
Combined
.
HISTORY_ID
)
)
;
info
.
itemType
=
RemoveItemType
.
HISTORY
;
final
int
bookmarkIdCol
=
cursor
.
getColumnIndexOrThrow
(
Combined
.
BOOKMARK_ID
)
;
if
(
cursor
.
isNull
(
bookmarkIdCol
)
)
{
info
.
bookmarkId
=
-
1
;
}
else
{
info
.
bookmarkId
=
cursor
.
getInt
(
bookmarkIdCol
)
;
}
return
info
;
}
}
)
;
registerForContextMenu
(
mList
)
;
mClearHistoryButton
=
view
.
findViewById
(
R
.
id
.
clear_history_button
)
;
mClearHistoryButton
.
setOnClickListener
(
new
View
.
OnClickListener
(
)
{
Override
public
void
onClick
(
View
v
)
{
final
Context
context
=
getActivity
(
)
;
final
AlertDialog
.
Builder
dialogBuilder
=
new
AlertDialog
.
Builder
(
context
)
;
dialogBuilder
.
setMessage
(
R
.
string
.
home_clear_history_confirm
)
;
dialogBuilder
.
setNegativeButton
(
R
.
string
.
button_cancel
new
AlertDialog
.
OnClickListener
(
)
{
Override
public
void
onClick
(
final
DialogInterface
dialog
final
int
which
)
{
dialog
.
dismiss
(
)
;
}
}
)
;
dialogBuilder
.
setPositiveButton
(
R
.
string
.
button_ok
new
AlertDialog
.
OnClickListener
(
)
{
Override
public
void
onClick
(
final
DialogInterface
dialog
final
int
which
)
{
dialog
.
dismiss
(
)
;
final
JSONObject
json
=
new
JSONObject
(
)
;
try
{
json
.
put
(
"
history
"
true
)
;
}
catch
(
JSONException
e
)
{
Log
.
e
(
LOGTAG
"
JSON
error
"
e
)
;
}
GeckoAppShell
.
sendEventToGecko
(
GeckoEvent
.
createBroadcastEvent
(
"
Sanitize
:
ClearData
"
json
.
toString
(
)
)
)
;
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
SANITIZE
TelemetryContract
.
Method
.
BUTTON
"
history
"
)
;
}
}
)
;
dialogBuilder
.
show
(
)
;
}
}
)
;
}
Override
public
void
onCreateContextMenu
(
ContextMenu
menu
View
view
ContextMenu
.
ContextMenuInfo
menuInfo
)
{
super
.
onCreateContextMenu
(
menu
view
menuInfo
)
;
if
(
!
RestrictedProfiles
.
isAllowed
(
getActivity
(
)
Restriction
.
DISALLOW_CLEAR_HISTORY
)
)
{
menu
.
findItem
(
R
.
id
.
home_remove
)
.
setVisible
(
false
)
;
}
}
Override
public
void
onDestroyView
(
)
{
super
.
onDestroyView
(
)
;
mList
=
null
;
mEmptyView
=
null
;
mClearHistoryButton
=
null
;
}
Override
public
void
onActivityCreated
(
Bundle
savedInstanceState
)
{
super
.
onActivityCreated
(
savedInstanceState
)
;
selected
=
MostRecentSection
.
THIS_MONTH
;
mAdapter
=
new
HistoryHeaderListCursorAdapter
(
getActivity
(
)
)
;
mList
.
setAdapter
(
mAdapter
)
;
mCursorLoaderCallbacks
=
new
CursorLoaderCallbacks
(
)
;
loadIfVisible
(
)
;
}
Override
protected
void
load
(
)
{
getLoaderManager
(
)
.
initLoader
(
LOADER_ID_HISTORY
null
mCursorLoaderCallbacks
)
;
}
private
void
updateUiFromCursor
(
Cursor
c
)
{
if
(
c
!
=
null
&
&
c
.
getCount
(
)
>
0
)
{
if
(
RestrictedProfiles
.
isAllowed
(
getActivity
(
)
Restriction
.
DISALLOW_CLEAR_HISTORY
)
)
{
mClearHistoryButton
.
setVisibility
(
View
.
VISIBLE
)
;
}
return
;
}
mClearHistoryButton
.
setVisibility
(
View
.
GONE
)
;
if
(
mEmptyView
=
=
null
)
{
final
ViewStub
emptyViewStub
=
(
ViewStub
)
getView
(
)
.
findViewById
(
R
.
id
.
home_empty_view_stub
)
;
mEmptyView
=
emptyViewStub
.
inflate
(
)
;
final
ImageView
emptyIcon
=
(
ImageView
)
mEmptyView
.
findViewById
(
R
.
id
.
home_empty_image
)
;
emptyIcon
.
setImageResource
(
R
.
drawable
.
icon_most_recent_empty
)
;
final
TextView
emptyText
=
(
TextView
)
mEmptyView
.
findViewById
(
R
.
id
.
home_empty_text
)
;
emptyText
.
setText
(
R
.
string
.
home_most_recent_empty
)
;
final
TextView
emptyHint
=
(
TextView
)
mEmptyView
.
findViewById
(
R
.
id
.
home_empty_hint
)
;
final
String
hintText
=
getResources
(
)
.
getString
(
R
.
string
.
home_most_recent_emptyhint
)
;
final
SpannableStringBuilder
hintBuilder
=
formatHintText
(
hintText
)
;
if
(
hintBuilder
!
=
null
)
{
emptyHint
.
setText
(
hintBuilder
)
;
emptyHint
.
setMovementMethod
(
LinkMovementMethod
.
getInstance
(
)
)
;
emptyHint
.
setVisibility
(
View
.
VISIBLE
)
;
}
mList
.
setEmptyView
(
mEmptyView
)
;
}
}
private
SpannableStringBuilder
formatHintText
(
String
text
)
{
final
int
underlineStart
=
text
.
indexOf
(
FORMAT_S1
)
;
final
int
underlineEnd
=
text
.
indexOf
(
FORMAT_S2
)
;
if
(
underlineStart
>
=
underlineEnd
)
{
return
null
;
}
final
SpannableStringBuilder
ssb
=
new
SpannableStringBuilder
(
text
)
;
ssb
.
setSpan
(
new
StyleSpan
(
Typeface
.
ITALIC
)
0
ssb
.
length
(
)
0
)
;
final
ClickableSpan
clickableSpan
=
new
ClickableSpan
(
)
{
Override
public
void
onClick
(
View
widget
)
{
Telemetry
.
sendUIEvent
(
TelemetryContract
.
Event
.
ACTION
TelemetryContract
.
Method
.
HOMESCREEN
"
hint
-
private
-
browsing
"
)
;
try
{
final
JSONObject
json
=
new
JSONObject
(
)
;
json
.
put
(
"
type
"
"
Menu
:
Open
"
)
;
EventDispatcher
.
getInstance
(
)
.
dispatchEvent
(
json
null
)
;
}
catch
(
JSONException
e
)
{
Log
.
e
(
LOGTAG
"
Error
forming
JSON
for
Private
Browsing
contextual
hint
"
e
)
;
}
}
}
;
ssb
.
setSpan
(
clickableSpan
0
text
.
length
(
)
0
)
;
final
UnderlineSpan
noUnderlineSpan
=
new
UnderlineSpan
(
)
{
Override
public
void
updateDrawState
(
TextPaint
textPaint
)
{
textPaint
.
setUnderlineText
(
false
)
;
}
}
;
ssb
.
setSpan
(
noUnderlineSpan
0
text
.
length
(
)
0
)
;
ssb
.
setSpan
(
new
UnderlineSpan
(
)
underlineStart
underlineEnd
0
)
;
ssb
.
delete
(
underlineEnd
underlineEnd
+
FORMAT_S2
.
length
(
)
)
;
ssb
.
delete
(
underlineStart
underlineStart
+
FORMAT_S1
.
length
(
)
)
;
return
ssb
;
}
private
static
void
updateRecentSectionOffset
(
final
Context
context
)
{
final
long
now
=
System
.
currentTimeMillis
(
)
;
final
Calendar
cal
=
Calendar
.
getInstance
(
)
;
cal
.
set
(
Calendar
.
HOUR_OF_DAY
0
)
;
cal
.
set
(
Calendar
.
MINUTE
0
)
;
cal
.
set
(
Calendar
.
SECOND
0
)
;
cal
.
set
(
Calendar
.
MILLISECOND
1
)
;
recentSectionTimeOffsetList
.
add
(
MostRecentSection
.
TODAY
.
ordinal
(
)
new
MostRecentSectionRange
(
cal
.
getTimeInMillis
(
)
now
context
.
getString
(
R
.
string
.
history_today_section
)
)
)
;
recentSectionTimeOffsetList
.
add
(
MostRecentSection
.
YESTERDAY
.
ordinal
(
)
new
MostRecentSectionRange
(
cal
.
getTimeInMillis
(
)
-
MS_PER_DAY
cal
.
getTimeInMillis
(
)
context
.
getString
(
R
.
string
.
history_yesterday_section
)
)
)
;
recentSectionTimeOffsetList
.
add
(
MostRecentSection
.
WEEK
.
ordinal
(
)
new
MostRecentSectionRange
(
cal
.
getTimeInMillis
(
)
-
MS_PER_WEEK
now
context
.
getString
(
R
.
string
.
history_week_section
)
)
)
;
cal
.
add
(
Calendar
.
MONTH
1
)
;
cal
.
set
(
Calendar
.
DAY_OF_MONTH
cal
.
getMinimum
(
Calendar
.
DAY_OF_MONTH
)
)
;
for
(
int
i
=
MostRecentSection
.
THIS_MONTH
.
ordinal
(
)
;
i
<
=
MostRecentSection
.
OLDER_THAN_SIX_MONTHS
.
ordinal
(
)
;
i
+
+
)
{
final
long
end
=
cal
.
getTimeInMillis
(
)
;
cal
.
add
(
Calendar
.
MONTH
-
1
)
;
final
long
start
=
cal
.
getTimeInMillis
(
)
;
final
String
displayName
=
(
i
!
=
MostRecentSection
.
OLDER_THAN_SIX_MONTHS
.
ordinal
(
)
)
?
cal
.
getDisplayName
(
Calendar
.
MONTH
Calendar
.
LONG
Locale
.
getDefault
(
)
)
:
context
.
getString
(
R
.
string
.
history_older_section
)
;
recentSectionTimeOffsetList
.
add
(
i
new
MostRecentSectionRange
(
start
end
displayName
)
)
;
}
}
private
static
class
HistoryCursorLoader
extends
SimpleCursorLoader
{
private
static
final
int
HISTORY_LIMIT
=
100
;
private
final
BrowserDB
mDB
;
public
HistoryCursorLoader
(
Context
context
)
{
super
(
context
)
;
mDB
=
GeckoProfile
.
get
(
context
)
.
getDB
(
)
;
}
Override
public
Cursor
loadCursor
(
)
{
final
ContentResolver
cr
=
getContext
(
)
.
getContentResolver
(
)
;
updateRecentSectionOffset
(
getContext
(
)
)
;
MostRecentSectionRange
mostRecentSectionRange
=
recentSectionTimeOffsetList
.
get
(
selected
.
ordinal
(
)
)
;
return
mDB
.
getRecentHistoryBetweenTime
(
cr
HISTORY_LIMIT
mostRecentSectionRange
.
start
mostRecentSectionRange
.
end
)
;
}
}
protected
static
String
getMostRecentSectionTitle
(
MostRecentSection
section
)
{
return
recentSectionTimeOffsetList
.
get
(
section
.
ordinal
(
)
)
.
displayName
;
}
protected
static
MostRecentSection
getMostRecentSectionForTime
(
long
time
)
{
for
(
int
i
=
0
;
i
<
MostRecentSection
.
OLDER_THAN_SIX_MONTHS
.
ordinal
(
)
;
i
+
+
)
{
if
(
time
>
recentSectionTimeOffsetList
.
get
(
i
)
.
start
)
{
return
MostRecentSection
.
values
(
)
[
i
]
;
}
}
return
MostRecentSection
.
OLDER_THAN_SIX_MONTHS
;
}
private
static
class
MostRecentSectionRange
{
private
final
long
start
;
private
final
long
end
;
private
final
String
displayName
;
private
MostRecentSectionRange
(
long
start
long
end
String
displayName
)
{
this
.
start
=
start
;
this
.
end
=
end
;
this
.
displayName
=
displayName
;
}
}
private
class
CursorLoaderCallbacks
extends
TransitionAwareCursorLoaderCallbacks
{
Override
public
Loader
<
Cursor
>
onCreateLoader
(
int
id
Bundle
args
)
{
return
new
HistoryCursorLoader
(
getActivity
(
)
)
;
}
Override
public
void
onLoadFinishedAfterTransitions
(
Loader
<
Cursor
>
loader
Cursor
c
)
{
mAdapter
.
swapCursor
(
c
)
;
updateUiFromCursor
(
c
)
;
}
Override
public
void
onLoaderReset
(
Loader
<
Cursor
>
loader
)
{
super
.
onLoaderReset
(
loader
)
;
mAdapter
.
swapCursor
(
null
)
;
}
}
}
