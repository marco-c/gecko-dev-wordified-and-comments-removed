from
__future__
import
print_function
import
json
import
os
.
path
import
urlparse
import
shutil
def
url_filter
(
resource
)
:
    
return
"
^
https
?
:
/
/
(
[
^
/
]
+
\
\
.
)
?
"
+
resource
.
replace
(
"
.
"
"
\
\
.
"
)
def
unless_domain
(
properties
)
:
    
return
[
"
*
"
+
domain
for
domain
in
properties
]
def
create_blocklist_entry
(
resource
properties
)
:
    
return
{
"
trigger
"
:
{
"
url
-
filter
"
:
url_filter
(
resource
)
                        
"
load
-
type
"
:
[
"
third
-
party
"
]
                        
"
unless
-
domain
"
:
unless_domain
(
properties
)
}
            
"
action
"
:
{
"
type
"
:
"
block
"
}
}
def
generate_entity_list
(
path
=
"
shavar
-
prod
-
lists
/
disconnect
-
entitylist
.
json
"
)
:
    
with
open
(
path
)
as
fp
:
        
entitylist
=
json
.
load
(
fp
)
        
blocklist
=
[
]
        
for
name
value
in
entitylist
.
items
(
)
:
            
for
resource
in
value
[
'
resources
'
]
:
                
entry
=
create_blocklist_entry
(
resource
value
[
'
properties
'
]
)
                
blocklist
.
append
(
entry
)
        
f
=
open
(
'
Lists
/
disconnect
.
json
'
'
w
'
)
        
out
=
json
.
dumps
(
blocklist
indent
=
0
                         
separators
=
(
'
'
'
:
'
)
)
.
replace
(
'
\
n
'
'
'
)
        
f
.
write
(
out
)
def
generate_blacklists
(
blacklist
=
"
shavar
-
prod
-
lists
/
disconnect
-
blacklist
.
json
"
entitylist
=
"
shavar
-
prod
-
lists
/
disconnect
-
entitylist
.
json
"
)
:
    
def
find_entry
(
entry
list_
)
:
        
for
d
in
list_
:
            
if
d
.
keys
(
)
=
=
[
entry
]
:
                
return
d
    
with
open
(
blacklist
)
as
fp
:
        
categories
=
json
.
load
(
fp
)
[
"
categories
"
]
        
del
categories
[
"
Legacy
Disconnect
"
]
        
del
categories
[
"
Legacy
Content
"
]
        
disconnect
=
categories
[
"
Disconnect
"
]
        
del
categories
[
"
Disconnect
"
]
        
categories
[
"
Social
"
]
.
append
(
find_entry
(
"
Facebook
"
disconnect
)
)
        
categories
[
"
Social
"
]
.
append
(
find_entry
(
"
Twitter
"
disconnect
)
)
    
with
open
(
entitylist
)
as
fp
:
        
entities
=
json
.
load
(
fp
)
    
with
open
(
"
shavar
-
prod
-
lists
/
google_mapping
.
json
"
)
as
fp
:
        
tweaks
=
json
.
load
(
fp
)
[
"
categories
"
]
        
for
category
in
(
"
Advertising
"
"
Analytics
"
"
Social
"
)
:
            
cat
=
categories
[
category
]
            
goog
=
find_entry
(
"
Google
"
cat
)
or
None
            
if
goog
is
None
:
                
cat
.
append
(
tweaks
[
category
]
[
0
]
)
            
else
:
                
for
prop
resources
in
tweaks
[
category
]
[
"
Google
"
]
.
items
(
)
:
                    
if
prop
not
in
goog
:
                        
goog
[
prop
]
=
resources
                        
continue
                    
for
resource
in
resources
:
                        
if
resource
not
in
goog
[
prop
]
:
                            
goog
[
prop
]
.
append
(
resource
)
                    
goog
[
prop
]
.
sort
(
)
            
cat
.
sort
(
)
    
for
category
in
(
"
Advertising
"
"
Analytics
"
"
Social
"
"
Content
"
)
:
        
blocklist
=
[
]
        
for
entity
in
categories
[
category
]
:
            
for
name
domains
in
entity
.
iteritems
(
)
:
                
for
property_
resources
in
domains
.
iteritems
(
)
:
                    
if
name
in
entities
:
                        
props
=
entities
[
name
]
[
"
properties
"
]
                    
else
:
                        
prop
=
urlparse
.
urlparse
(
property_
)
.
netloc
.
split
(
"
.
"
)
                        
if
prop
[
0
]
=
=
"
www
"
:
                            
prop
.
pop
(
0
)
                        
props
=
[
"
.
"
.
join
(
prop
)
]
                    
for
res
in
resources
:
                        
blocklist
.
append
(
create_blocklist_entry
(
res
props
)
)
        
print
(
"
{
cat
}
blacklist
has
{
count
}
entries
.
"
              
.
format
(
cat
=
category
count
=
len
(
blocklist
)
)
)
        
with
open
(
"
app
/
src
/
main
/
res
/
raw
/
disconnect_
{
0
}
.
json
"
.
format
(
category
.
lower
(
)
)
                  
"
w
"
)
as
fp
:
            
out
=
json
.
dumps
(
blocklist
indent
=
0
                             
separators
=
(
'
'
'
:
'
)
)
.
replace
(
'
\
n
'
'
'
)
            
fp
.
write
(
out
)
if
__name__
=
=
"
__main__
"
:
    
rawpath
=
"
app
/
src
/
webkit
/
res
/
raw
"
    
if
not
os
.
path
.
exists
(
rawpath
)
:
        
os
.
makedirs
(
rawpath
)
    
shutil
.
copy
(
"
shavar
-
prod
-
lists
/
disconnect
-
entitylist
.
json
"
rawpath
+
"
/
entitylist
.
json
"
)
    
shutil
.
copy
(
"
shavar
-
prod
-
lists
/
disconnect
-
blacklist
.
json
"
rawpath
+
"
/
blocklist
.
json
"
)
    
shutil
.
copy
(
"
shavar
-
prod
-
lists
/
google_mapping
.
json
"
rawpath
+
"
/
google_mapping
.
json
"
)
