package
org
.
mozilla
.
focus
.
webview
;
import
android
.
net
.
Uri
;
import
android
.
os
.
StrictMode
;
import
android
.
webkit
.
WebResourceRequest
;
import
android
.
webkit
.
WebResourceResponse
;
import
android
.
webkit
.
WebView
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
org
.
robolectric
.
RuntimeEnvironment
;
import
org
.
robolectric
.
annotation
.
Config
;
import
java
.
util
.
Map
;
import
static
org
.
junit
.
Assert
.
assertNull
;
import
static
org
.
mockito
.
Mockito
.
mock
;
import
static
org
.
mockito
.
Mockito
.
when
;
RunWith
(
RobolectricTestRunner
.
class
)
Config
(
packageName
=
"
org
.
mozilla
.
focus
"
)
public
class
TrackingProtectionWebViewClientTest
{
private
TrackingProtectionWebViewClient
trackingProtectionWebViewClient
;
private
WebView
webView
;
Before
public
void
setup
(
)
{
trackingProtectionWebViewClient
=
new
TrackingProtectionWebViewClient
(
RuntimeEnvironment
.
application
)
;
webView
=
mock
(
WebView
.
class
)
;
when
(
webView
.
getContext
(
)
)
.
thenReturn
(
RuntimeEnvironment
.
application
)
;
}
After
public
void
cleanup
(
)
{
StrictMode
.
setThreadPolicy
(
new
StrictMode
.
ThreadPolicy
.
Builder
(
)
.
build
(
)
)
;
}
Test
public
void
shouldInterceptRequest
(
)
throws
Exception
{
trackingProtectionWebViewClient
.
notifyCurrentURL
(
"
http
:
/
/
www
.
mozilla
.
org
"
)
;
{
final
WebResourceRequest
request
=
createRequest
(
"
http
:
/
/
mozilla
.
org
/
about
"
false
)
;
final
WebResourceResponse
response
=
trackingProtectionWebViewClient
.
shouldInterceptRequest
(
webView
request
)
;
assertResourceAllowed
(
response
)
;
}
{
final
WebResourceRequest
request
=
createRequest
(
"
http
:
/
/
trackersimulator
.
org
/
foobar
"
false
)
;
final
WebResourceResponse
response
=
trackingProtectionWebViewClient
.
shouldInterceptRequest
(
webView
request
)
;
assertResourceBlocked
(
response
)
;
}
}
Test
public
void
testMainFrameAllowed
(
)
throws
Exception
{
trackingProtectionWebViewClient
.
notifyCurrentURL
(
"
http
:
/
/
mozilla
.
org
"
)
;
{
final
WebResourceRequest
request
=
createRequest
(
"
http
:
/
/
trackersimulator
.
org
/
foobar
"
true
)
;
final
WebResourceResponse
response
=
trackingProtectionWebViewClient
.
shouldInterceptRequest
(
webView
request
)
;
assertResourceAllowed
(
response
)
;
}
trackingProtectionWebViewClient
.
notifyCurrentURL
(
"
http
:
/
/
trackersimulator
.
org
"
)
;
{
final
WebResourceRequest
request
=
createRequest
(
"
http
:
/
/
trackersimulator
.
org
/
other
.
js
"
false
)
;
final
WebResourceResponse
response
=
trackingProtectionWebViewClient
.
shouldInterceptRequest
(
webView
request
)
;
assertResourceAllowed
(
response
)
;
}
trackingProtectionWebViewClient
.
notifyCurrentURL
(
"
http
:
/
/
mozilla
.
org
"
)
;
{
final
WebResourceRequest
request
=
createRequest
(
"
http
:
/
/
trackersimulator
.
org
/
foobar
"
false
)
;
final
WebResourceResponse
response
=
trackingProtectionWebViewClient
.
shouldInterceptRequest
(
webView
request
)
;
assertResourceBlocked
(
response
)
;
}
}
Test
public
void
testFaviconBlocked
(
)
throws
Exception
{
trackingProtectionWebViewClient
.
notifyCurrentURL
(
"
http
:
/
/
www
.
mozilla
.
org
"
)
;
{
final
WebResourceRequest
request
=
createRequest
(
"
http
:
/
/
mozilla
.
org
/
favicon
.
ico
"
false
)
;
final
WebResourceResponse
response
=
trackingProtectionWebViewClient
.
shouldInterceptRequest
(
webView
request
)
;
assertResourceBlocked
(
response
)
;
}
{
final
WebResourceRequest
request
=
createRequest
(
"
http
:
/
/
mozilla
.
org
/
favicon
.
png
"
false
)
;
final
WebResourceResponse
response
=
trackingProtectionWebViewClient
.
shouldInterceptRequest
(
webView
request
)
;
assertResourceAllowed
(
response
)
;
}
}
private
void
assertResourceAllowed
(
final
WebResourceResponse
response
)
{
assertNull
(
response
)
;
}
private
void
assertResourceBlocked
(
final
WebResourceResponse
response
)
{
assertNull
(
response
.
getData
(
)
)
;
}
private
static
WebResourceRequest
createRequest
(
final
String
url
final
boolean
isForMainFrame
)
{
return
new
WebResourceRequest
(
)
{
Override
public
Uri
getUrl
(
)
{
return
Uri
.
parse
(
url
)
;
}
Override
public
boolean
isForMainFrame
(
)
{
return
isForMainFrame
;
}
Override
public
boolean
isRedirect
(
)
{
return
false
;
}
Override
public
boolean
hasGesture
(
)
{
return
false
;
}
Override
public
String
getMethod
(
)
{
return
null
;
}
Override
public
Map
<
String
String
>
getRequestHeaders
(
)
{
return
null
;
}
}
;
}
}
