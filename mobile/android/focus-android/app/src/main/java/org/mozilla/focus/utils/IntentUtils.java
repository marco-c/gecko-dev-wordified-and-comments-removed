package
org
.
mozilla
.
focus
.
utils
;
import
android
.
app
.
Activity
;
import
android
.
content
.
DialogInterface
;
import
android
.
content
.
Intent
;
import
android
.
content
.
pm
.
PackageManager
;
import
android
.
content
.
pm
.
ResolveInfo
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
StringRes
;
import
android
.
support
.
v7
.
app
.
AlertDialog
;
import
org
.
mozilla
.
focus
.
R
;
import
java
.
net
.
URISyntaxException
;
import
java
.
util
.
List
;
public
class
IntentUtils
{
private
static
String
MARKET_INTENT_URI_PACKAGE_PREFIX
=
"
market
:
/
/
details
?
id
=
"
;
private
static
String
EXTRA_BROWSER_FALLBACK_URL
=
"
browser_fallback_url
"
;
public
static
String
handleExternalUri
(
final
Activity
activity
final
String
uri
)
{
final
Intent
intent
;
try
{
intent
=
Intent
.
parseUri
(
uri
0
)
;
}
catch
(
URISyntaxException
e
)
{
return
uri
;
}
intent
.
addCategory
(
Intent
.
CATEGORY_BROWSABLE
)
;
final
PackageManager
packageManager
=
activity
.
getPackageManager
(
)
;
final
List
<
ResolveInfo
>
matchingActivities
=
packageManager
.
queryIntentActivities
(
intent
0
)
;
if
(
matchingActivities
.
size
(
)
=
=
0
)
{
return
handleUnsupportedLink
(
activity
intent
)
;
}
else
if
(
matchingActivities
.
size
(
)
=
=
1
)
{
final
ResolveInfo
info
;
if
(
matchingActivities
.
size
(
)
=
=
1
)
{
info
=
matchingActivities
.
get
(
0
)
;
}
else
{
info
=
packageManager
.
resolveActivity
(
intent
0
)
;
}
final
CharSequence
externalAppTitle
=
info
.
loadLabel
(
packageManager
)
;
showConfirmationDialog
(
activity
intent
uri
R
.
string
.
external_app_prompt
externalAppTitle
)
;
return
null
;
}
else
{
final
String
chooserTitle
=
activity
.
getResources
(
)
.
getString
(
R
.
string
.
external_multiple_apps_matched_exit
)
;
final
Intent
chooserIntent
=
Intent
.
createChooser
(
intent
chooserTitle
)
;
activity
.
startActivity
(
chooserIntent
)
;
return
null
;
}
}
private
static
String
handleUnsupportedLink
(
final
Activity
activity
final
Intent
intent
)
{
final
String
fallbackUrl
=
intent
.
getStringExtra
(
EXTRA_BROWSER_FALLBACK_URL
)
;
if
(
fallbackUrl
!
=
null
)
{
return
fallbackUrl
;
}
if
(
intent
.
getPackage
(
)
!
=
null
)
{
final
String
marketUri
=
MARKET_INTENT_URI_PACKAGE_PREFIX
+
intent
.
getPackage
(
)
;
final
Intent
marketIntent
=
new
Intent
(
Intent
.
ACTION_VIEW
Uri
.
parse
(
marketUri
)
)
;
marketIntent
.
addCategory
(
Intent
.
CATEGORY_BROWSABLE
)
;
final
ResolveInfo
info
=
activity
.
getPackageManager
(
)
.
resolveActivity
(
marketIntent
0
)
;
final
CharSequence
marketTitle
=
info
.
loadLabel
(
activity
.
getPackageManager
(
)
)
;
showConfirmationDialog
(
activity
marketIntent
activity
.
getResources
(
)
.
getString
(
R
.
string
.
external_app_prompt_no_app_title
)
R
.
string
.
external_app_prompt_no_app
marketTitle
)
;
return
null
;
}
return
intent
.
toUri
(
0
)
;
}
private
static
void
showConfirmationDialog
(
final
Activity
activity
final
Intent
targetIntent
final
String
title
final
StringRes
int
messageResource
final
CharSequence
param
)
{
final
AlertDialog
.
Builder
builder
=
new
AlertDialog
.
Builder
(
activity
)
;
final
CharSequence
ourAppName
=
activity
.
getResources
(
)
.
getString
(
R
.
string
.
app_name
)
;
builder
.
setTitle
(
title
)
;
builder
.
setMessage
(
activity
.
getResources
(
)
.
getString
(
messageResource
ourAppName
param
)
)
;
builder
.
setPositiveButton
(
R
.
string
.
action_ok
new
DialogInterface
.
OnClickListener
(
)
{
Override
public
void
onClick
(
final
DialogInterface
dialog
final
int
which
)
{
activity
.
startActivity
(
targetIntent
)
;
}
}
)
;
builder
.
setNegativeButton
(
R
.
string
.
action_cancel
new
DialogInterface
.
OnClickListener
(
)
{
Override
public
void
onClick
(
final
DialogInterface
dialog
final
int
which
)
{
dialog
.
dismiss
(
)
;
}
}
)
;
builder
.
show
(
)
;
}
}
