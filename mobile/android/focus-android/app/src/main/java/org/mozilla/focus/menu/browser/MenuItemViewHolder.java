package
org
.
mozilla
.
focus
.
menu
.
browser
;
import
android
.
graphics
.
drawable
.
Drawable
;
import
android
.
view
.
View
;
import
android
.
widget
.
TextView
;
import
org
.
mozilla
.
focus
.
R
;
class
MenuItemViewHolder
extends
BrowserMenuViewHolder
{
static
final
int
LAYOUT_ID
=
R
.
layout
.
menu_item
;
private
final
TextView
menuItemView
;
MenuItemViewHolder
(
View
itemView
)
{
super
(
itemView
)
;
menuItemView
=
(
TextView
)
itemView
;
}
void
bind
(
BrowserMenuAdapter
.
MenuItem
.
Default
menuItem
)
{
menuItemView
.
setId
(
menuItem
.
getId
(
)
)
;
menuItemView
.
setText
(
menuItem
.
getLabel
(
)
)
;
if
(
menuItem
.
getDrawableResId
(
)
!
=
0
)
{
final
Drawable
drawable
=
menuItemView
.
getContext
(
)
.
getDrawable
(
menuItem
.
getDrawableResId
(
)
)
;
if
(
drawable
!
=
null
)
{
drawable
.
setTint
(
menuItemView
.
getContext
(
)
.
getResources
(
)
.
getColor
(
R
.
color
.
colorSettingsTint
)
)
;
menuItemView
.
setCompoundDrawablesRelativeWithIntrinsicBounds
(
drawable
null
null
null
)
;
}
}
final
boolean
isLoading
=
browserFragment
.
getSession
(
)
.
getLoading
(
)
.
getValue
(
)
;
if
(
(
menuItem
.
getId
(
)
=
=
R
.
id
.
add_to_homescreen
|
|
menuItem
.
getId
(
)
=
=
R
.
id
.
find_in_page
)
&
&
isLoading
)
{
menuItemView
.
setTextColor
(
browserFragment
.
getResources
(
)
.
getColor
(
R
.
color
.
colorTextInactive
)
)
;
menuItemView
.
setClickable
(
false
)
;
}
else
{
menuItemView
.
setOnClickListener
(
this
)
;
}
}
}
