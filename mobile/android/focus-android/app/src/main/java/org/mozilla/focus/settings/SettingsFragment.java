package
org
.
mozilla
.
focus
.
settings
;
import
android
.
content
.
SharedPreferences
;
import
android
.
content
.
res
.
Resources
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
v7
.
preference
.
ListPreference
;
import
android
.
text
.
TextUtils
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
activity
.
SettingsActivity
;
import
org
.
mozilla
.
focus
.
locale
.
LocaleManager
;
import
org
.
mozilla
.
focus
.
locale
.
Locales
;
import
org
.
mozilla
.
focus
.
telemetry
.
TelemetryWrapper
;
import
org
.
mozilla
.
focus
.
widget
.
DefaultBrowserPreference
;
import
java
.
util
.
Locale
;
public
class
SettingsFragment
extends
BaseSettingsFragment
implements
SharedPreferences
.
OnSharedPreferenceChangeListener
{
private
boolean
localeUpdated
;
public
static
SettingsFragment
newInstance
(
)
{
return
new
SettingsFragment
(
)
;
}
Override
public
void
onCreatePreferences
(
Bundle
bundle
String
s
)
{
addPreferencesFromResource
(
R
.
xml
.
settings
)
;
getPreferenceScreen
(
)
.
removePreference
(
findPreference
(
getString
(
R
.
string
.
pref_key_advanced_screen
)
)
)
;
}
Override
public
void
onResume
(
)
{
super
.
onResume
(
)
;
getPreferenceManager
(
)
.
getSharedPreferences
(
)
.
registerOnSharedPreferenceChangeListener
(
this
)
;
final
DefaultBrowserPreference
preference
=
(
DefaultBrowserPreference
)
findPreference
(
getString
(
R
.
string
.
pref_key_default_browser
)
)
;
if
(
preference
!
=
null
)
{
preference
.
update
(
)
;
}
final
ActionBarUpdater
updater
=
(
ActionBarUpdater
)
getActivity
(
)
;
updater
.
updateTitle
(
R
.
string
.
menu_settings
)
;
updater
.
updateIcon
(
R
.
drawable
.
ic_back
)
;
}
Override
public
void
onPause
(
)
{
getPreferenceManager
(
)
.
getSharedPreferences
(
)
.
unregisterOnSharedPreferenceChangeListener
(
this
)
;
super
.
onPause
(
)
;
}
Override
public
boolean
onPreferenceTreeClick
(
android
.
support
.
v7
.
preference
.
Preference
preference
)
{
final
Resources
resources
=
getResources
(
)
;
if
(
preference
.
getKey
(
)
.
equals
(
resources
.
getString
(
R
.
string
.
pref_key_privacy_security_screen
)
)
)
{
navigateToFragment
(
new
PrivacySecuritySettingsFragment
(
)
)
;
}
else
if
(
preference
.
getKey
(
)
.
equals
(
resources
.
getString
(
R
.
string
.
pref_key_search_screen
)
)
)
{
navigateToFragment
(
new
SearchSettingsFragment
(
)
)
;
}
else
if
(
preference
.
getKey
(
)
.
equals
(
resources
.
getString
(
R
.
string
.
pref_key_advanced_screen
)
)
)
{
navigateToFragment
(
new
AdvancedSettingsFragment
(
)
)
;
}
else
if
(
preference
.
getKey
(
)
.
equals
(
resources
.
getString
(
R
.
string
.
pref_key_mozilla_screen
)
)
)
{
navigateToFragment
(
new
MozillaSettingsFragment
(
)
)
;
}
return
super
.
onPreferenceTreeClick
(
preference
)
;
}
Override
public
void
onSharedPreferenceChanged
(
SharedPreferences
sharedPreferences
String
key
)
{
TelemetryWrapper
.
settingsEvent
(
key
String
.
valueOf
(
sharedPreferences
.
getAll
(
)
.
get
(
key
)
)
)
;
if
(
!
localeUpdated
&
&
key
.
equals
(
getString
(
R
.
string
.
pref_key_locale
)
)
)
{
localeUpdated
=
true
;
InstalledSearchEnginesSettingsFragment
.
Companion
.
setLanguageChanged
(
true
)
;
final
ListPreference
languagePreference
=
(
ListPreference
)
findPreference
(
getString
(
R
.
string
.
pref_key_locale
)
)
;
final
String
value
=
languagePreference
.
getValue
(
)
;
final
LocaleManager
localeManager
=
LocaleManager
.
getInstance
(
)
;
final
Locale
locale
;
if
(
TextUtils
.
isEmpty
(
value
)
)
{
localeManager
.
resetToSystemLocale
(
getActivity
(
)
)
;
locale
=
localeManager
.
getCurrentLocale
(
getActivity
(
)
)
;
}
else
{
locale
=
Locales
.
parseLocaleCode
(
value
)
;
localeManager
.
setSelectedLocale
(
getActivity
(
)
value
)
;
}
localeManager
.
updateConfiguration
(
getActivity
(
)
locale
)
;
getActivity
(
)
.
onConfigurationChanged
(
getActivity
(
)
.
getResources
(
)
.
getConfiguration
(
)
)
;
getActivity
(
)
.
setResult
(
SettingsActivity
.
ACTIVITY_RESULT_LOCALE_CHANGED
)
;
getFragmentManager
(
)
.
beginTransaction
(
)
.
replace
(
R
.
id
.
container
SettingsFragment
.
newInstance
(
)
)
.
commit
(
)
;
}
}
}
