package
org
.
mozilla
.
focus
.
menu
;
import
android
.
app
.
Dialog
;
import
android
.
content
.
ClipData
;
import
android
.
content
.
ClipboardManager
;
import
android
.
content
.
Context
;
import
android
.
content
.
DialogInterface
;
import
android
.
content
.
Intent
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
design
.
widget
.
NavigationView
;
import
android
.
support
.
v7
.
app
.
AlertDialog
;
import
android
.
view
.
MenuItem
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
telemetry
.
TelemetryWrapper
;
import
org
.
mozilla
.
focus
.
web
.
IWebView
;
public
class
WebContextMenu
{
public
static
void
show
(
final
NonNull
Context
context
final
NonNull
IWebView
.
HitTarget
hitTarget
)
{
if
(
!
(
hitTarget
.
isLink
|
|
hitTarget
.
isImage
)
)
{
throw
new
IllegalStateException
(
"
WebContextMenu
can
only
handle
long
-
press
on
images
and
/
or
links
.
"
)
;
}
TelemetryWrapper
.
openWebContextMenuEvent
(
)
;
AlertDialog
.
Builder
builder
=
new
AlertDialog
.
Builder
(
context
)
;
if
(
hitTarget
.
isLink
)
{
builder
.
setTitle
(
hitTarget
.
linkURL
)
;
}
else
if
(
hitTarget
.
isImage
)
{
builder
.
setTitle
(
hitTarget
.
imageURL
)
;
}
final
NavigationView
menu
=
new
NavigationView
(
context
)
;
builder
.
setView
(
menu
)
;
builder
.
setOnCancelListener
(
new
DialogInterface
.
OnCancelListener
(
)
{
Override
public
void
onCancel
(
DialogInterface
dialog
)
{
TelemetryWrapper
.
cancelWebContextMenuEvent
(
)
;
}
}
)
;
final
Dialog
dialog
=
builder
.
create
(
)
;
setupMenuForHitTarget
(
dialog
menu
hitTarget
)
;
dialog
.
show
(
)
;
}
private
static
void
setupMenuForHitTarget
(
final
NonNull
Dialog
dialog
final
NonNull
NavigationView
navigationView
final
NonNull
IWebView
.
HitTarget
hitTarget
)
{
navigationView
.
inflateMenu
(
R
.
menu
.
menu_browser_context
)
;
navigationView
.
getMenu
(
)
.
findItem
(
R
.
id
.
menu_link_share
)
.
setEnabled
(
hitTarget
.
isLink
)
;
navigationView
.
getMenu
(
)
.
findItem
(
R
.
id
.
menu_link_copy
)
.
setEnabled
(
hitTarget
.
isLink
)
;
navigationView
.
getMenu
(
)
.
findItem
(
R
.
id
.
menu_image_share
)
.
setEnabled
(
hitTarget
.
isImage
)
;
navigationView
.
getMenu
(
)
.
findItem
(
R
.
id
.
menu_image_copy
)
.
setEnabled
(
hitTarget
.
isImage
)
;
navigationView
.
setNavigationItemSelectedListener
(
new
NavigationView
.
OnNavigationItemSelectedListener
(
)
{
Override
public
boolean
onNavigationItemSelected
(
NonNull
MenuItem
item
)
{
dialog
.
dismiss
(
)
;
switch
(
item
.
getItemId
(
)
)
{
case
R
.
id
.
menu_link_share
:
{
TelemetryWrapper
.
shareLinkEvent
(
)
;
final
Intent
shareIntent
=
new
Intent
(
Intent
.
ACTION_SEND
)
;
shareIntent
.
setType
(
"
text
/
plain
"
)
;
shareIntent
.
putExtra
(
Intent
.
EXTRA_TEXT
hitTarget
.
linkURL
)
;
dialog
.
getContext
(
)
.
startActivity
(
Intent
.
createChooser
(
shareIntent
dialog
.
getContext
(
)
.
getString
(
R
.
string
.
share_dialog_title
)
)
)
;
return
true
;
}
case
R
.
id
.
menu_image_share
:
{
TelemetryWrapper
.
shareImageEvent
(
)
;
final
Intent
shareIntent
=
new
Intent
(
Intent
.
ACTION_SEND
)
;
shareIntent
.
setType
(
"
text
/
plain
"
)
;
shareIntent
.
putExtra
(
Intent
.
EXTRA_TEXT
hitTarget
.
imageURL
)
;
dialog
.
getContext
(
)
.
startActivity
(
Intent
.
createChooser
(
shareIntent
dialog
.
getContext
(
)
.
getString
(
R
.
string
.
share_dialog_title
)
)
)
;
return
true
;
}
case
R
.
id
.
menu_link_copy
:
case
R
.
id
.
menu_image_copy
:
final
ClipboardManager
clipboard
=
(
ClipboardManager
)
dialog
.
getContext
(
)
.
getSystemService
(
Context
.
CLIPBOARD_SERVICE
)
;
final
Uri
uri
;
if
(
item
.
getItemId
(
)
=
=
R
.
id
.
menu_link_copy
)
{
TelemetryWrapper
.
copyLinkEvent
(
)
;
uri
=
Uri
.
parse
(
hitTarget
.
linkURL
)
;
}
else
if
(
item
.
getItemId
(
)
=
=
R
.
id
.
menu_image_copy
)
{
TelemetryWrapper
.
copyImageEvent
(
)
;
uri
=
Uri
.
parse
(
hitTarget
.
imageURL
)
;
}
else
{
throw
new
IllegalStateException
(
"
Unknown
hitTarget
type
-
cannot
copy
to
clipboard
"
)
;
}
final
ClipData
clip
=
ClipData
.
newUri
(
dialog
.
getContext
(
)
.
getContentResolver
(
)
"
URI
"
uri
)
;
clipboard
.
setPrimaryClip
(
clip
)
;
return
true
;
default
:
throw
new
IllegalArgumentException
(
"
Unhandled
menu
item
id
=
"
+
item
.
getItemId
(
)
)
;
}
}
}
)
;
}
}
