package
org
.
mozilla
.
focus
.
utils
;
import
android
.
content
.
Context
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
text
.
TextUtils
;
import
org
.
mozilla
.
focus
.
BuildConfig
;
import
org
.
mozilla
.
focus
.
search
.
SearchEngine
;
import
org
.
mozilla
.
focus
.
search
.
SearchEngineManager
;
import
java
.
net
.
URI
;
import
java
.
net
.
URISyntaxException
;
public
class
UrlUtils
{
public
static
String
normalize
(
String
input
)
{
Uri
uri
=
Uri
.
parse
(
input
)
;
if
(
TextUtils
.
isEmpty
(
uri
.
getScheme
(
)
)
)
{
uri
=
Uri
.
parse
(
"
http
:
/
/
"
+
input
)
;
}
return
uri
.
toString
(
)
;
}
public
static
boolean
isUrl
(
String
url
)
{
if
(
url
.
contains
(
"
"
)
)
{
return
false
;
}
return
url
.
contains
(
"
.
"
)
|
|
url
.
contains
(
"
:
"
)
;
}
public
static
boolean
isSearchQuery
(
String
text
)
{
return
text
.
contains
(
"
"
)
;
}
public
static
String
createSearchUrl
(
Context
context
String
searchTerm
)
{
final
SearchEngine
searchEngine
=
SearchEngineManager
.
getInstance
(
)
.
getDefaultSearchEngine
(
context
)
;
return
searchEngine
.
buildSearchUrl
(
searchTerm
)
;
}
public
static
String
stripUserInfo
(
String
url
)
{
try
{
URI
uri
=
new
URI
(
url
)
;
final
String
userInfo
=
uri
.
getUserInfo
(
)
;
if
(
userInfo
=
=
null
)
{
return
url
;
}
uri
=
new
URI
(
uri
.
getScheme
(
)
null
uri
.
getHost
(
)
uri
.
getPort
(
)
uri
.
getPath
(
)
uri
.
getQuery
(
)
uri
.
getFragment
(
)
)
;
return
uri
.
toString
(
)
;
}
catch
(
URISyntaxException
e
)
{
if
(
url
.
equals
(
"
http
:
"
)
|
|
url
.
equals
(
"
https
:
"
)
|
|
url
.
equals
(
"
file
:
"
)
)
{
return
url
;
}
if
(
BuildConfig
.
DEBUG
)
{
throw
new
IllegalStateException
(
"
WebView
is
expected
to
always
supply
a
valid
URL
"
)
;
}
else
{
return
url
;
}
}
}
public
static
boolean
focusSupportURLProtocol
(
final
String
url
)
{
return
(
!
url
.
startsWith
(
"
http
:
"
)
)
&
&
(
!
url
.
startsWith
(
"
https
:
"
)
)
&
&
(
!
url
.
startsWith
(
"
file
:
"
)
)
&
&
(
!
url
.
startsWith
(
"
data
:
"
)
)
&
&
(
!
url
.
startsWith
(
"
error
:
"
)
)
;
}
public
static
boolean
urlsMatchExceptForTrailingSlash
(
final
NonNull
String
url1
final
NonNull
String
url2
)
{
int
lengthDifference
=
url1
.
length
(
)
-
url2
.
length
(
)
;
if
(
lengthDifference
=
=
0
)
{
return
url1
.
equalsIgnoreCase
(
url2
)
;
}
else
if
(
lengthDifference
=
=
1
)
{
return
url1
.
charAt
(
url1
.
length
(
)
-
1
)
=
=
'
/
'
&
&
url1
.
regionMatches
(
true
0
url2
0
url2
.
length
(
)
)
;
}
else
if
(
lengthDifference
=
=
-
1
)
{
return
url2
.
charAt
(
url2
.
length
(
)
-
1
)
=
=
'
/
'
&
&
url2
.
regionMatches
(
true
0
url1
0
url1
.
length
(
)
)
;
}
return
false
;
}
}
