package
org
.
mozilla
.
focus
.
utils
import
android
.
app
.
Activity
import
android
.
content
.
Context
import
android
.
os
.
Handler
import
android
.
os
.
Looper
import
androidx
.
annotation
.
StringRes
import
com
.
google
.
android
.
material
.
snackbar
.
Snackbar
import
androidx
.
core
.
content
.
ContextCompat
import
androidx
.
core
.
view
.
ViewCompat
import
android
.
view
.
Gravity
import
android
.
view
.
MenuItem
import
android
.
view
.
View
import
android
.
view
.
inputmethod
.
InputMethodManager
import
android
.
widget
.
TextView
import
org
.
mozilla
.
focus
.
R
import
java
.
lang
.
ref
.
WeakReference
object
ViewUtils
{
private
const
val
MENU_ITEM_ALPHA_ENABLED
=
255
private
const
val
MENU_ITEM_ALPHA_DISABLED
=
130
const
val
IME_FLAG_NO_PERSONALIZED_LEARNING
=
0x01000000
Suppress
(
"
ReturnCount
"
)
private
class
ShowKeyboard
internal
constructor
(
view
:
View
?
)
:
Runnable
{
companion
object
{
private
const
val
INTERVAL_MS
=
100
private
const
val
MAX_TRIES
=
10
}
private
val
viewReference
:
WeakReference
<
View
?
>
=
WeakReference
(
view
)
private
val
handler
:
Handler
=
Handler
(
Looper
.
getMainLooper
(
)
)
private
var
tries
:
Int
=
MAX_TRIES
override
fun
run
(
)
{
val
myView
=
viewReference
.
get
(
)
?
:
return
val
activity
:
Activity
?
=
myView
.
context
?
.
asActivity
(
)
?
:
return
val
imm
=
activity
?
.
getSystemService
(
Context
.
INPUT_METHOD_SERVICE
)
as
?
InputMethodManager
?
:
return
when
{
tries
<
=
0
-
>
return
!
myView
.
isFocusable
-
>
return
!
myView
.
isFocusableInTouchMode
-
>
return
!
myView
.
requestFocus
(
)
-
>
{
post
(
)
return
}
!
imm
.
isActive
(
myView
)
-
>
{
post
(
)
return
}
!
imm
.
showSoftInput
(
myView
InputMethodManager
.
SHOW_IMPLICIT
)
-
>
{
post
(
)
}
}
}
internal
fun
post
(
)
{
tries
-
-
handler
.
postDelayed
(
this
INTERVAL_MS
.
toLong
(
)
)
}
}
fun
showKeyboard
(
view
:
View
?
)
{
val
showKeyboard
=
ShowKeyboard
(
view
)
showKeyboard
.
post
(
)
}
fun
hideKeyboard
(
view
:
View
?
)
{
val
imm
=
view
?
.
context
?
.
getSystemService
(
Context
.
INPUT_METHOD_SERVICE
)
as
InputMethodManager
imm
.
hideSoftInputFromWindow
(
view
.
windowToken
0
)
}
fun
showBrandedSnackbar
(
view
:
View
?
StringRes
resId
:
Int
delayMillis
:
Int
)
{
val
context
=
view
!
!
.
context
val
snackbar
=
Snackbar
.
make
(
view
resId
Snackbar
.
LENGTH_LONG
)
val
snackbarView
=
snackbar
.
view
snackbarView
.
setBackgroundColor
(
ContextCompat
.
getColor
(
context
R
.
color
.
snackbarBackground
)
)
val
snackbarTextView
=
snackbarView
.
findViewById
<
View
>
(
R
.
id
.
snackbar_text
)
as
TextView
snackbarTextView
.
setTextColor
(
ContextCompat
.
getColor
(
context
R
.
color
.
snackbarTextColor
)
)
snackbarTextView
.
gravity
=
Gravity
.
CENTER
snackbarTextView
.
textAlignment
=
View
.
TEXT_ALIGNMENT_CENTER
view
.
postDelayed
(
{
snackbar
.
show
(
)
}
delayMillis
.
toLong
(
)
)
}
fun
getBrandedSnackbar
(
view
:
View
StringRes
resId
:
Int
)
:
Snackbar
{
val
context
=
view
.
context
val
snackbar
=
Snackbar
.
make
(
view
resId
Snackbar
.
LENGTH_LONG
)
val
snackbarView
=
snackbar
.
view
snackbarView
.
setBackgroundColor
(
ContextCompat
.
getColor
(
context
R
.
color
.
snackbarBackground
)
)
val
snackbarTextView
=
snackbarView
.
findViewById
<
TextView
>
(
R
.
id
.
snackbar_text
)
snackbarTextView
.
setTextColor
(
ContextCompat
.
getColor
(
context
R
.
color
.
snackbarTextColor
)
)
snackbar
.
setActionTextColor
(
ContextCompat
.
getColor
(
context
R
.
color
.
snackbarActionText
)
)
return
snackbar
}
fun
isRTL
(
view
:
View
)
:
Boolean
{
return
ViewCompat
.
getLayoutDirection
(
view
)
=
=
ViewCompat
.
LAYOUT_DIRECTION_RTL
}
fun
setMenuItemEnabled
(
menuItem
:
MenuItem
enabled
:
Boolean
)
{
menuItem
.
isEnabled
=
enabled
val
icon
=
menuItem
.
icon
if
(
icon
!
=
null
)
{
icon
.
mutate
(
)
.
alpha
=
if
(
enabled
)
MENU_ITEM_ALPHA_ENABLED
else
MENU_ITEM_ALPHA_DISABLED
}
}
}
