package
org
.
mozilla
.
focus
.
web
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
view
.
View
;
public
interface
IWebView
{
class
HitTarget
{
public
final
boolean
isLink
;
public
final
String
linkURL
;
public
final
boolean
isImage
;
public
final
String
imageURL
;
public
HitTarget
(
final
boolean
isLink
final
String
linkURL
final
boolean
isImage
final
String
imageURL
)
{
if
(
isLink
&
&
linkURL
=
=
null
)
{
throw
new
IllegalStateException
(
"
link
hittarget
must
contain
URL
"
)
;
}
if
(
isImage
&
&
imageURL
=
=
null
)
{
throw
new
IllegalStateException
(
"
image
hittarget
must
contain
URL
"
)
;
}
this
.
isLink
=
isLink
;
this
.
linkURL
=
linkURL
;
this
.
isImage
=
isImage
;
this
.
imageURL
=
imageURL
;
}
}
interface
Callback
{
void
onPageStarted
(
String
url
)
;
void
onPageFinished
(
boolean
isSecure
)
;
void
onProgress
(
int
progress
)
;
void
onURLChanged
(
final
String
url
)
;
boolean
handleExternalUrl
(
String
url
)
;
void
onDownloadStart
(
Download
download
)
;
void
onLongPress
(
final
HitTarget
hitTarget
)
;
void
onEnterFullScreen
(
NonNull
FullscreenCallback
callback
Nullable
View
view
)
;
void
onExitFullScreen
(
)
;
}
interface
FullscreenCallback
{
void
fullScreenExited
(
)
;
}
void
setBlockingEnabled
(
boolean
enabled
)
;
boolean
isBlockingEnabled
(
)
;
void
setCallback
(
Callback
callback
)
;
void
onPause
(
)
;
void
onResume
(
)
;
void
destroy
(
)
;
void
reload
(
)
;
void
stopLoading
(
)
;
String
getUrl
(
)
;
void
loadUrl
(
String
url
)
;
void
cleanup
(
)
;
void
goForward
(
)
;
void
goBack
(
)
;
boolean
canGoForward
(
)
;
boolean
canGoBack
(
)
;
void
restoreWebviewState
(
Bundle
savedInstanceState
)
;
void
onSaveInstanceState
(
Bundle
outState
)
;
}
