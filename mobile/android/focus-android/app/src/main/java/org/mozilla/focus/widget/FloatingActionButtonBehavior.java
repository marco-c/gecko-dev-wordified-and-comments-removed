package
org
.
mozilla
.
focus
.
widget
;
import
android
.
animation
.
Animator
;
import
android
.
animation
.
AnimatorListenerAdapter
;
import
android
.
content
.
Context
;
import
com
.
google
.
android
.
material
.
appbar
.
AppBarLayout
;
import
androidx
.
coordinatorlayout
.
widget
.
CoordinatorLayout
;
import
com
.
google
.
android
.
material
.
floatingactionbutton
.
FloatingActionButton
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
SuppressWarnings
(
"
unused
"
)
public
class
FloatingActionButtonBehavior
extends
CoordinatorLayout
.
Behavior
<
FloatingActionButton
>
implements
AppBarLayout
.
OnOffsetChangedListener
{
private
static
final
int
ANIMATION_DURATION
=
300
;
private
AppBarLayout
layout
;
private
FloatingActionButton
button
;
private
boolean
visible
;
private
boolean
enabled
;
public
FloatingActionButtonBehavior
(
Context
context
AttributeSet
attrs
)
{
super
(
)
;
enabled
=
true
;
visible
=
false
;
}
public
void
setEnabled
(
boolean
enabled
)
{
this
.
enabled
=
enabled
;
}
Override
public
boolean
layoutDependsOn
(
CoordinatorLayout
parent
FloatingActionButton
child
View
dependency
)
{
if
(
button
!
=
child
)
{
button
=
child
;
}
if
(
dependency
instanceof
AppBarLayout
&
&
layout
!
=
dependency
)
{
layout
=
(
AppBarLayout
)
dependency
;
layout
.
addOnOffsetChangedListener
(
this
)
;
return
true
;
}
return
super
.
layoutDependsOn
(
parent
child
dependency
)
;
}
Override
public
void
onDependentViewRemoved
(
CoordinatorLayout
parent
FloatingActionButton
child
View
dependency
)
{
super
.
onDependentViewRemoved
(
parent
child
dependency
)
;
layout
.
removeOnOffsetChangedListener
(
this
)
;
layout
=
null
;
}
Override
public
void
onOffsetChanged
(
AppBarLayout
appBarLayout
int
verticalOffset
)
{
if
(
!
enabled
)
{
return
;
}
if
(
verticalOffset
=
=
0
&
&
!
visible
)
{
showButton
(
)
;
}
else
if
(
Math
.
abs
(
verticalOffset
)
>
=
appBarLayout
.
getTotalScrollRange
(
)
&
&
visible
)
{
hideButton
(
)
;
}
}
private
void
showButton
(
)
{
animate
(
button
false
)
;
}
private
void
hideButton
(
)
{
animate
(
button
true
)
;
}
private
void
animate
(
final
View
child
final
boolean
hide
)
{
child
.
animate
(
)
.
scaleX
(
hide
?
0
:
1
)
.
scaleY
(
hide
?
0
:
1
)
.
setDuration
(
ANIMATION_DURATION
)
.
setListener
(
new
AnimatorListenerAdapter
(
)
{
Override
public
void
onAnimationStart
(
Animator
animation
)
{
if
(
!
hide
)
{
child
.
setVisibility
(
View
.
VISIBLE
)
;
}
}
Override
public
void
onAnimationEnd
(
Animator
animation
)
{
visible
=
!
hide
;
if
(
hide
)
{
child
.
setVisibility
(
View
.
GONE
)
;
}
}
}
)
.
start
(
)
;
}
}
