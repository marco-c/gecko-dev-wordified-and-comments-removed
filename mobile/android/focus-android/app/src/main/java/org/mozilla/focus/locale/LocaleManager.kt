package
org
.
mozilla
.
focus
.
locale
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
content
.
res
.
Resources
;
import
androidx
.
preference
.
PreferenceManager
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
generated
.
LocaleList
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Locale
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicReference
;
public
class
LocaleManager
{
private
static
String
PREF_LOCALE
=
null
;
private
volatile
Locale
currentLocale
;
private
boolean
systemLocaleDidChange
;
private
static
final
AtomicReference
<
LocaleManager
>
instance
=
new
AtomicReference
<
>
(
)
;
public
static
LocaleManager
getInstance
(
)
{
LocaleManager
localeManager
=
instance
.
get
(
)
;
if
(
localeManager
!
=
null
)
{
return
localeManager
;
}
localeManager
=
new
LocaleManager
(
)
;
if
(
instance
.
compareAndSet
(
null
localeManager
)
)
{
return
localeManager
;
}
else
{
return
instance
.
get
(
)
;
}
}
public
void
updateConfiguration
(
Context
context
Locale
locale
)
{
Resources
res
=
context
.
getResources
(
)
;
Configuration
config
=
res
.
getConfiguration
(
)
;
config
.
locale
=
locale
;
config
.
setLayoutDirection
(
locale
)
;
res
.
updateConfiguration
(
config
null
)
;
}
private
SharedPreferences
getSharedPreferences
(
final
Context
context
)
{
if
(
PREF_LOCALE
=
=
null
)
{
PREF_LOCALE
=
context
.
getResources
(
)
.
getString
(
R
.
string
.
pref_key_locale
)
;
}
return
PreferenceManager
.
getDefaultSharedPreferences
(
context
)
;
}
private
String
getPersistedLocale
(
Context
context
)
{
final
SharedPreferences
settings
=
getSharedPreferences
(
context
)
;
final
String
locale
=
settings
.
getString
(
PREF_LOCALE
"
"
)
;
if
(
"
"
.
equals
(
locale
)
)
{
return
null
;
}
return
locale
;
}
public
Locale
getCurrentLocale
(
Context
context
)
{
if
(
currentLocale
!
=
null
)
{
return
currentLocale
;
}
final
String
current
=
getPersistedLocale
(
context
)
;
if
(
current
=
=
null
)
{
return
null
;
}
return
currentLocale
=
Locales
.
parseLocaleCode
(
current
)
;
}
public
static
Collection
<
String
>
getPackagedLocaleTags
(
)
{
return
LocaleList
.
BUNDLED_LOCALES
;
}
}
