package
org
.
mozilla
.
focus
.
search
;
import
android
.
app
.
Activity
;
import
android
.
content
.
Context
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewGroup
;
import
android
.
widget
.
CompoundButton
;
import
org
.
mozilla
.
focus
.
R
;
import
java
.
util
.
HashSet
;
import
java
.
util
.
Set
;
public
class
MultiselectSearchEngineListPreference
extends
SearchEngineListPreference
{
public
MultiselectSearchEngineListPreference
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
}
public
MultiselectSearchEngineListPreference
(
Context
context
AttributeSet
attrs
int
defStyleAttr
)
{
super
(
context
attrs
defStyleAttr
)
;
}
Override
protected
View
onCreateView
(
ViewGroup
parent
)
{
View
view
=
super
.
onCreateView
(
parent
)
;
this
.
bindEngineCheckboxesToMenu
(
)
;
return
view
;
}
Override
protected
int
getItemResId
(
)
{
return
R
.
layout
.
search_engine_checkbox_button
;
}
Override
protected
void
updateDefaultItem
(
CompoundButton
defaultButton
)
{
defaultButton
.
setClickable
(
false
)
;
defaultButton
.
setActivated
(
true
)
;
}
public
Set
<
String
>
getCheckedEngineIds
(
)
{
final
Set
<
String
>
engineIdSet
=
new
HashSet
<
>
(
)
;
for
(
int
i
=
0
;
i
<
searchEngineGroup
.
getChildCount
(
)
;
i
+
+
)
{
final
CompoundButton
engineButton
=
(
CompoundButton
)
searchEngineGroup
.
getChildAt
(
i
)
;
if
(
engineButton
.
isChecked
(
)
)
{
engineIdSet
.
add
(
(
String
)
engineButton
.
getTag
(
)
)
;
}
}
return
engineIdSet
;
}
protected
void
bindEngineCheckboxesToMenu
(
)
{
for
(
int
i
=
0
;
i
<
searchEngineGroup
.
getChildCount
(
)
;
i
+
+
)
{
final
CompoundButton
engineButton
=
(
CompoundButton
)
searchEngineGroup
.
getChildAt
(
i
)
;
engineButton
.
setOnCheckedChangeListener
(
new
CompoundButton
.
OnCheckedChangeListener
(
)
{
Override
public
void
onCheckedChanged
(
CompoundButton
buttonView
boolean
isChecked
)
{
(
(
Activity
)
getContext
(
)
)
.
invalidateOptionsMenu
(
)
;
}
}
)
;
}
}
public
boolean
atLeastOneEngineChecked
(
)
{
for
(
int
i
=
0
;
i
<
searchEngineGroup
.
getChildCount
(
)
;
i
+
+
)
{
final
CompoundButton
engineButton
=
(
CompoundButton
)
searchEngineGroup
.
getChildAt
(
i
)
;
if
(
engineButton
.
isChecked
(
)
)
{
return
true
;
}
}
return
false
;
}
}
