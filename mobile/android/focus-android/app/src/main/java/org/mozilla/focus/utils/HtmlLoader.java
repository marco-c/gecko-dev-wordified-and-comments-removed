package
org
.
mozilla
.
focus
.
utils
;
import
android
.
content
.
Context
;
import
androidx
.
annotation
.
DrawableRes
;
import
androidx
.
annotation
.
NonNull
;
import
androidx
.
annotation
.
Nullable
;
import
androidx
.
annotation
.
RawRes
;
import
android
.
util
.
Base64
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
nio
.
charset
.
StandardCharsets
;
import
java
.
util
.
Map
;
public
class
HtmlLoader
{
public
static
String
loadResourceFile
(
NonNull
final
Context
context
NonNull
final
RawRes
int
resourceID
Nullable
final
Map
<
String
String
>
substitutionTable
)
{
try
(
final
BufferedReader
fileReader
=
new
BufferedReader
(
new
InputStreamReader
(
context
.
getResources
(
)
.
openRawResource
(
resourceID
)
StandardCharsets
.
UTF_8
)
)
)
{
final
StringBuilder
outputBuffer
=
new
StringBuilder
(
)
;
String
line
;
while
(
(
line
=
fileReader
.
readLine
(
)
)
!
=
null
)
{
if
(
substitutionTable
!
=
null
)
{
for
(
final
Map
.
Entry
<
String
String
>
entry
:
substitutionTable
.
entrySet
(
)
)
{
line
=
line
.
replace
(
entry
.
getKey
(
)
entry
.
getValue
(
)
)
;
}
}
outputBuffer
.
append
(
line
)
;
}
return
outputBuffer
.
toString
(
)
;
}
catch
(
final
IOException
e
)
{
throw
new
IllegalStateException
(
"
Unable
to
load
error
page
data
"
e
)
;
}
}
private
final
static
byte
[
]
pngHeader
=
new
byte
[
]
{
-
119
80
78
71
13
10
26
10
}
;
public
static
String
loadPngAsDataURI
(
NonNull
final
Context
context
NonNull
final
DrawableRes
int
resourceID
)
{
final
StringBuilder
builder
=
new
StringBuilder
(
)
;
builder
.
append
(
"
data
:
image
/
png
;
base64
"
)
;
try
(
final
InputStream
pngInputStream
=
context
.
getResources
(
)
.
openRawResource
(
resourceID
)
)
{
final
byte
[
]
data
=
new
byte
[
3
*
100
]
;
int
bytesRead
;
boolean
headerVerified
=
false
;
while
(
(
bytesRead
=
pngInputStream
.
read
(
data
)
)
>
0
)
{
if
(
!
headerVerified
)
{
if
(
bytesRead
<
8
)
{
throw
new
IllegalStateException
(
"
Loaded
drawable
is
improbably
small
"
)
;
}
for
(
int
i
=
0
;
i
<
pngHeader
.
length
;
i
+
+
)
{
if
(
data
[
i
]
!
=
pngHeader
[
i
]
)
{
throw
new
IllegalStateException
(
"
Invalid
png
detected
"
)
;
}
}
headerVerified
=
true
;
}
builder
.
append
(
Base64
.
encodeToString
(
data
0
bytesRead
0
)
)
;
}
}
catch
(
IOException
e
)
{
throw
new
IllegalStateException
(
"
Unable
to
load
png
data
"
)
;
}
return
builder
.
toString
(
)
;
}
}
