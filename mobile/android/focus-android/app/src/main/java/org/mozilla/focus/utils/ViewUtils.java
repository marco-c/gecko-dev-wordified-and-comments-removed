package
org
.
mozilla
.
focus
.
utils
;
import
android
.
app
.
Activity
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
drawable
.
Drawable
;
import
android
.
os
.
Handler
;
import
android
.
os
.
Looper
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
StringRes
;
import
android
.
support
.
design
.
widget
.
Snackbar
;
import
android
.
support
.
v4
.
content
.
ContextCompat
;
import
android
.
support
.
v4
.
view
.
ViewCompat
;
import
android
.
view
.
ContextThemeWrapper
;
import
android
.
view
.
Gravity
;
import
android
.
view
.
MenuItem
;
import
android
.
view
.
View
;
import
android
.
view
.
inputmethod
.
InputMethodManager
;
import
android
.
widget
.
TextView
;
import
org
.
mozilla
.
focus
.
R
;
import
java
.
lang
.
ref
.
WeakReference
;
public
class
ViewUtils
{
private
static
final
int
MENU_ITEM_ALPHA_ENABLED
=
255
;
private
static
final
int
MENU_ITEM_ALPHA_DISABLED
=
130
;
public
static
final
int
IME_FLAG_NO_PERSONALIZED_LEARNING
=
0x01000000
;
private
static
class
ShowKeyboard
implements
Runnable
{
private
static
final
int
INTERVAL_MS
=
100
;
private
final
WeakReference
<
View
>
viewReference
;
private
final
Handler
handler
;
private
int
tries
;
private
ShowKeyboard
(
View
view
)
{
this
.
viewReference
=
new
WeakReference
<
>
(
view
)
;
this
.
handler
=
new
Handler
(
Looper
.
getMainLooper
(
)
)
;
this
.
tries
=
10
;
}
Override
public
void
run
(
)
{
if
(
tries
<
=
0
)
{
return
;
}
final
View
view
=
viewReference
.
get
(
)
;
if
(
view
=
=
null
)
{
return
;
}
if
(
!
view
.
isFocusable
(
)
|
|
!
view
.
isFocusableInTouchMode
(
)
)
{
return
;
}
if
(
!
view
.
requestFocus
(
)
)
{
post
(
)
;
return
;
}
final
Activity
activity
;
if
(
!
(
view
.
getContext
(
)
instanceof
Activity
)
)
{
if
(
view
.
getContext
(
)
instanceof
ContextThemeWrapper
)
{
activity
=
(
Activity
)
(
(
ContextThemeWrapper
)
view
.
getContext
(
)
)
.
getBaseContext
(
)
;
}
else
{
return
;
}
}
else
{
activity
=
(
Activity
)
view
.
getContext
(
)
;
}
if
(
activity
=
=
null
)
{
return
;
}
final
InputMethodManager
imm
=
(
InputMethodManager
)
activity
.
getSystemService
(
Context
.
INPUT_METHOD_SERVICE
)
;
if
(
imm
=
=
null
)
{
return
;
}
if
(
!
imm
.
isActive
(
view
)
)
{
post
(
)
;
return
;
}
if
(
!
imm
.
showSoftInput
(
view
InputMethodManager
.
SHOW_IMPLICIT
)
)
{
post
(
)
;
}
}
private
void
post
(
)
{
tries
-
-
;
handler
.
postDelayed
(
this
INTERVAL_MS
)
;
}
}
public
static
void
showKeyboard
(
View
view
)
{
final
ShowKeyboard
showKeyboard
=
new
ShowKeyboard
(
view
)
;
showKeyboard
.
post
(
)
;
}
public
static
void
hideKeyboard
(
View
view
)
{
InputMethodManager
imm
=
(
InputMethodManager
)
view
.
getContext
(
)
.
getSystemService
(
Context
.
INPUT_METHOD_SERVICE
)
;
if
(
imm
=
=
null
)
{
return
;
}
imm
.
hideSoftInputFromWindow
(
view
.
getWindowToken
(
)
0
)
;
}
public
static
void
showBrandedSnackbar
(
View
view
StringRes
int
resId
int
delayMillis
)
{
final
Context
context
=
view
.
getContext
(
)
;
final
Snackbar
snackbar
=
Snackbar
.
make
(
view
resId
Snackbar
.
LENGTH_LONG
)
;
final
View
snackbarView
=
snackbar
.
getView
(
)
;
snackbarView
.
setBackgroundColor
(
ContextCompat
.
getColor
(
context
R
.
color
.
snackbarBackground
)
)
;
final
TextView
snackbarTextView
=
(
TextView
)
snackbarView
.
findViewById
(
android
.
support
.
design
.
R
.
id
.
snackbar_text
)
;
snackbarTextView
.
setTextColor
(
ContextCompat
.
getColor
(
context
R
.
color
.
snackbarTextColor
)
)
;
snackbarTextView
.
setGravity
(
Gravity
.
CENTER
)
;
snackbarTextView
.
setTextAlignment
(
View
.
TEXT_ALIGNMENT_CENTER
)
;
view
.
postDelayed
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
snackbar
.
show
(
)
;
}
}
delayMillis
)
;
}
public
static
Snackbar
getBrandedSnackbar
(
View
view
StringRes
int
resId
)
{
final
Context
context
=
view
.
getContext
(
)
;
final
Snackbar
snackbar
=
Snackbar
.
make
(
view
resId
Snackbar
.
LENGTH_LONG
)
;
final
View
snackbarView
=
snackbar
.
getView
(
)
;
snackbarView
.
setBackgroundColor
(
ContextCompat
.
getColor
(
context
R
.
color
.
snackbarBackground
)
)
;
final
TextView
snackbarTextView
=
snackbarView
.
findViewById
(
android
.
support
.
design
.
R
.
id
.
snackbar_text
)
;
snackbarTextView
.
setTextColor
(
ContextCompat
.
getColor
(
context
R
.
color
.
snackbarTextColor
)
)
;
snackbar
.
setActionTextColor
(
ContextCompat
.
getColor
(
context
R
.
color
.
snackbarActionText
)
)
;
return
snackbar
;
}
public
static
boolean
isRTL
(
View
view
)
{
return
ViewCompat
.
getLayoutDirection
(
view
)
=
=
ViewCompat
.
LAYOUT_DIRECTION_RTL
;
}
public
static
void
setMenuItemEnabled
(
NonNull
MenuItem
menuItem
boolean
enabled
)
{
menuItem
.
setEnabled
(
enabled
)
;
final
Drawable
icon
=
menuItem
.
getIcon
(
)
;
if
(
icon
!
=
null
)
{
icon
.
mutate
(
)
.
setAlpha
(
enabled
?
MENU_ITEM_ALPHA_ENABLED
:
MENU_ITEM_ALPHA_DISABLED
)
;
}
}
}
