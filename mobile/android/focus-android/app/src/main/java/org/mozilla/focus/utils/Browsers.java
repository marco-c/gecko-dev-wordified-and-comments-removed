package
org
.
mozilla
.
focus
.
utils
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
pm
.
ActivityInfo
;
import
android
.
content
.
pm
.
PackageManager
;
import
android
.
content
.
pm
.
ResolveInfo
;
import
android
.
net
.
Uri
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
java
.
util
.
Collection
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
public
class
Browsers
{
public
enum
KnownBrowser
{
FIREFOX
(
"
org
.
mozilla
.
firefox
"
)
FIREFOX_BETA
(
"
org
.
mozilla
.
firefox_beta
"
)
FIREFOX_AURORA
(
"
org
.
mozilla
.
fennec_aurora
"
)
FIREFOX_NIGHTLY
(
"
org
.
mozilla
.
fennec
"
)
CHROME
(
"
com
.
android
.
chrome
"
)
CHROME_BETA
(
"
com
.
chrome
.
beta
"
)
CHROME_DEV
(
"
com
.
chrome
.
dev
"
)
CHROME_CANARY
(
"
com
.
chrome
.
canary
"
)
OPERA
(
"
com
.
opera
.
browser
"
)
OPERA_BETA
(
"
com
.
opera
.
browser
.
beta
"
)
OPERA_MINI
(
"
com
.
opera
.
mini
.
native
"
)
OPERA_MINI_BETA
(
"
com
.
opera
.
mini
.
native
.
beta
"
)
UC_BROWSER
(
"
com
.
UCMobile
.
intl
"
)
UC_BROWSER_MINI
(
"
com
.
uc
.
browser
.
en
"
)
ANDROID_STOCK_BROWSER
(
"
com
.
android
.
browser
"
)
SAMSUNG_INTERNET
(
"
com
.
sec
.
android
.
app
.
sbrowser
"
)
DOLPHIN_BROWSER
(
"
mobi
.
mgeek
.
TunnyBrowser
"
)
BRAVE_BROWSER
(
"
com
.
brave
.
browser
"
)
LINK_BUBBLE
(
"
com
.
linkbubble
.
playstore
"
)
ADBLOCK_BROWSER
(
"
org
.
adblockplus
.
browser
"
)
CHROMER
(
"
arun
.
com
.
chromer
"
)
FLYNX
(
"
com
.
flynx
"
)
GHOSTERY_BROWSER
(
"
com
.
ghostery
.
android
.
ghostery
"
)
;
public
final
String
packageName
;
KnownBrowser
(
String
packageName
)
{
this
.
packageName
=
packageName
;
}
}
public
static
final
String
TRADITIONAL_BROWSER_URL
=
"
http
:
/
/
www
.
mozilla
.
org
"
;
private
final
Map
<
String
ActivityInfo
>
browsers
;
private
final
ActivityInfo
defaultBrowser
;
private
ActivityInfo
firefoxBrandedBrowser
;
public
Browsers
(
Context
context
NonNull
String
url
)
{
final
PackageManager
packageManager
=
context
.
getPackageManager
(
)
;
final
Uri
uri
=
Uri
.
parse
(
url
)
;
final
Map
<
String
ActivityInfo
>
browsers
=
resolveBrowsers
(
packageManager
uri
)
;
findKnownBrowsers
(
packageManager
browsers
uri
)
;
this
.
browsers
=
browsers
;
this
.
defaultBrowser
=
findDefault
(
packageManager
uri
)
;
this
.
firefoxBrandedBrowser
=
findFirefoxBrandedBrowser
(
)
;
}
private
ActivityInfo
findFirefoxBrandedBrowser
(
)
{
if
(
browsers
.
containsKey
(
KnownBrowser
.
FIREFOX
.
packageName
)
)
{
return
browsers
.
get
(
KnownBrowser
.
FIREFOX
.
packageName
)
;
}
else
if
(
browsers
.
containsKey
(
KnownBrowser
.
FIREFOX_BETA
.
packageName
)
)
{
return
browsers
.
get
(
KnownBrowser
.
FIREFOX_BETA
.
packageName
)
;
}
else
if
(
browsers
.
containsKey
(
KnownBrowser
.
FIREFOX_AURORA
.
packageName
)
)
{
return
browsers
.
get
(
KnownBrowser
.
FIREFOX_AURORA
.
packageName
)
;
}
else
if
(
browsers
.
containsKey
(
KnownBrowser
.
FIREFOX_NIGHTLY
.
packageName
)
)
{
return
browsers
.
get
(
KnownBrowser
.
FIREFOX_NIGHTLY
.
packageName
)
;
}
return
null
;
}
private
Map
<
String
ActivityInfo
>
resolveBrowsers
(
PackageManager
packageManager
NonNull
Uri
uri
)
{
final
Map
<
String
ActivityInfo
>
browsers
=
new
HashMap
<
>
(
)
;
final
Intent
intent
=
new
Intent
(
Intent
.
ACTION_VIEW
)
;
intent
.
setData
(
uri
)
;
final
List
<
ResolveInfo
>
infos
=
packageManager
.
queryIntentActivities
(
intent
0
)
;
for
(
ResolveInfo
info
:
infos
)
{
browsers
.
put
(
info
.
activityInfo
.
packageName
info
.
activityInfo
)
;
}
return
browsers
;
}
private
void
findKnownBrowsers
(
PackageManager
packageManager
Map
<
String
ActivityInfo
>
browsers
NonNull
Uri
uri
)
{
for
(
final
KnownBrowser
browser
:
KnownBrowser
.
values
(
)
)
{
if
(
browsers
.
containsKey
(
browser
.
packageName
)
)
{
continue
;
}
try
{
packageManager
.
getPackageInfo
(
browser
.
packageName
0
)
;
}
catch
(
PackageManager
.
NameNotFoundException
e
)
{
continue
;
}
final
Intent
intent
=
new
Intent
(
Intent
.
ACTION_VIEW
)
;
intent
.
setData
(
uri
)
;
intent
.
setPackage
(
browser
.
packageName
)
;
final
ResolveInfo
info
=
packageManager
.
resolveActivity
(
intent
0
)
;
if
(
info
=
=
null
|
|
info
.
activityInfo
=
=
null
)
{
continue
;
}
if
(
!
info
.
activityInfo
.
exported
)
{
continue
;
}
browsers
.
put
(
info
.
activityInfo
.
packageName
info
.
activityInfo
)
;
}
}
private
ActivityInfo
findDefault
(
PackageManager
packageManager
NonNull
Uri
uri
)
{
final
Intent
intent
=
new
Intent
(
Intent
.
ACTION_VIEW
uri
)
;
final
ResolveInfo
resolveInfo
=
packageManager
.
resolveActivity
(
intent
0
)
;
if
(
resolveInfo
=
=
null
|
|
resolveInfo
.
activityInfo
=
=
null
)
{
return
null
;
}
if
(
!
resolveInfo
.
activityInfo
.
exported
)
{
return
null
;
}
if
(
!
browsers
.
containsKey
(
resolveInfo
.
activityInfo
.
packageName
)
)
{
return
null
;
}
return
resolveInfo
.
activityInfo
;
}
public
boolean
hasThirdPartyDefaultBrowser
(
Context
context
)
{
return
defaultBrowser
!
=
null
&
&
!
defaultBrowser
.
packageName
.
equals
(
KnownBrowser
.
FIREFOX
.
packageName
)
&
&
!
(
firefoxBrandedBrowser
!
=
null
&
&
defaultBrowser
.
packageName
.
equals
(
firefoxBrandedBrowser
.
packageName
)
)
&
&
!
defaultBrowser
.
packageName
.
equals
(
context
.
getPackageName
(
)
)
;
}
public
Nullable
ActivityInfo
getDefaultBrowser
(
)
{
return
defaultBrowser
;
}
public
boolean
hasMultipleThirdPartyBrowsers
(
Context
context
)
{
if
(
browsers
.
size
(
)
>
2
)
{
return
true
;
}
for
(
ActivityInfo
info
:
browsers
.
values
(
)
)
{
if
(
info
!
=
defaultBrowser
&
&
!
info
.
packageName
.
equals
(
KnownBrowser
.
FIREFOX
.
packageName
)
&
&
!
info
.
packageName
.
equals
(
context
.
getPackageName
(
)
)
)
{
return
true
;
}
}
return
false
;
}
public
boolean
isInstalled
(
KnownBrowser
browser
)
{
return
browsers
.
containsKey
(
browser
.
packageName
)
;
}
public
boolean
isDefaultBrowser
(
Context
context
)
{
return
defaultBrowser
!
=
null
&
&
context
.
getPackageName
(
)
.
equals
(
defaultBrowser
.
packageName
)
;
}
public
ActivityInfo
[
]
getInstalledBrowsers
(
)
{
final
Collection
<
ActivityInfo
>
collection
=
browsers
.
values
(
)
;
return
collection
.
toArray
(
new
ActivityInfo
[
collection
.
size
(
)
]
)
;
}
public
boolean
hasFirefoxBrandedBrowserInstalled
(
)
{
return
firefoxBrandedBrowser
!
=
null
;
}
public
ActivityInfo
getFirefoxBrandedBrowser
(
)
{
return
firefoxBrandedBrowser
;
}
}
