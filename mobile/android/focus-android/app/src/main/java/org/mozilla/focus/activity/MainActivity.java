package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
v4
.
app
.
FragmentManager
;
import
android
.
support
.
v4
.
app
.
FragmentTransaction
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
import
android
.
view
.
WindowManager
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
architecture
.
NonNullObserver
;
import
org
.
mozilla
.
focus
.
fragment
.
BrowserFragment
;
import
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
;
import
org
.
mozilla
.
focus
.
fragment
.
UrlInputFragment
;
import
org
.
mozilla
.
focus
.
locale
.
LocaleAwareAppCompatActivity
;
import
org
.
mozilla
.
focus
.
session
.
Session
;
import
org
.
mozilla
.
focus
.
session
.
SessionManager
;
import
org
.
mozilla
.
focus
.
session
.
ui
.
SessionsSheetFragment
;
import
org
.
mozilla
.
focus
.
telemetry
.
SentryWrapper
;
import
org
.
mozilla
.
focus
.
telemetry
.
TelemetryWrapper
;
import
org
.
mozilla
.
focus
.
utils
.
Settings
;
import
org
.
mozilla
.
focus
.
utils
.
ViewUtils
;
import
org
.
mozilla
.
focus
.
web
.
IWebView
;
import
org
.
mozilla
.
focus
.
web
.
WebViewProvider
;
import
java
.
util
.
List
;
import
mozilla
.
components
.
support
.
utils
.
SafeIntent
;
public
class
MainActivity
extends
LocaleAwareAppCompatActivity
{
public
static
final
String
ACTION_ERASE
=
"
erase
"
;
public
static
final
String
ACTION_OPEN
=
"
open
"
;
public
static
final
String
EXTRA_TEXT_SELECTION
=
"
text_selection
"
;
public
static
final
String
EXTRA_NOTIFICATION
=
"
notification
"
;
private
static
final
String
EXTRA_SHORTCUT
=
"
shortcut
"
;
private
final
SessionManager
sessionManager
;
public
MainActivity
(
)
{
sessionManager
=
SessionManager
.
getInstance
(
)
;
}
Override
protected
void
onCreate
(
Bundle
savedInstanceState
)
{
super
.
onCreate
(
savedInstanceState
)
;
SentryWrapper
.
INSTANCE
.
init
(
this
)
;
if
(
Settings
.
getInstance
(
this
)
.
shouldUseSecureMode
(
)
)
{
getWindow
(
)
.
addFlags
(
WindowManager
.
LayoutParams
.
FLAG_SECURE
)
;
}
getWindow
(
)
.
getDecorView
(
)
.
setSystemUiVisibility
(
View
.
SYSTEM_UI_FLAG_LAYOUT_STABLE
|
View
.
SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
)
;
setContentView
(
R
.
layout
.
activity_main
)
;
final
SafeIntent
intent
=
new
SafeIntent
(
getIntent
(
)
)
;
if
(
intent
.
isLauncherIntent
(
)
)
{
TelemetryWrapper
.
openFromIconEvent
(
)
;
}
sessionManager
.
handleIntent
(
this
intent
savedInstanceState
)
;
registerSessionObserver
(
)
;
WebViewProvider
.
preload
(
this
)
;
}
private
void
registerSessionObserver
(
)
{
(
isCustomTabMode
(
)
?
sessionManager
.
getCustomTabSessions
(
)
:
sessionManager
.
getSessions
(
)
)
.
observe
(
this
new
NonNullObserver
<
List
<
Session
>
>
(
)
{
private
boolean
wasSessionsEmpty
=
false
;
Override
public
void
onValueChanged
(
NonNull
List
<
Session
>
sessions
)
{
if
(
sessions
.
isEmpty
(
)
)
{
showUrlInputScreen
(
)
;
wasSessionsEmpty
=
true
;
}
else
{
if
(
wasSessionsEmpty
)
{
WebViewProvider
.
performNewBrowserSessionCleanup
(
)
;
wasSessionsEmpty
=
false
;
}
showBrowserScreenForCurrentSession
(
)
;
}
if
(
Settings
.
getInstance
(
MainActivity
.
this
)
.
shouldShowFirstrun
(
)
)
{
showFirstrun
(
)
;
}
}
}
)
;
}
protected
boolean
isCustomTabMode
(
)
{
return
false
;
}
Override
public
void
applyLocale
(
)
{
}
Override
protected
void
onResume
(
)
{
super
.
onResume
(
)
;
TelemetryWrapper
.
startSession
(
)
;
if
(
Settings
.
getInstance
(
this
)
.
shouldUseSecureMode
(
)
)
{
getWindow
(
)
.
addFlags
(
WindowManager
.
LayoutParams
.
FLAG_SECURE
)
;
}
else
{
getWindow
(
)
.
clearFlags
(
WindowManager
.
LayoutParams
.
FLAG_SECURE
)
;
}
}
Override
protected
void
onPause
(
)
{
if
(
isFinishing
(
)
)
{
WebViewProvider
.
performCleanup
(
this
)
;
}
super
.
onPause
(
)
;
TelemetryWrapper
.
stopSession
(
)
;
}
Override
protected
void
onStop
(
)
{
super
.
onStop
(
)
;
TelemetryWrapper
.
stopMainActivity
(
)
;
}
Override
protected
void
onNewIntent
(
Intent
unsafeIntent
)
{
final
SafeIntent
intent
=
new
SafeIntent
(
unsafeIntent
)
;
sessionManager
.
handleNewIntent
(
this
intent
)
;
final
String
action
=
intent
.
getAction
(
)
;
if
(
ACTION_OPEN
.
equals
(
action
)
)
{
TelemetryWrapper
.
openNotificationActionEvent
(
)
;
}
if
(
ACTION_ERASE
.
equals
(
action
)
)
{
processEraseAction
(
intent
)
;
}
if
(
intent
.
isLauncherIntent
(
)
)
{
TelemetryWrapper
.
resumeFromIconEvent
(
)
;
}
}
private
void
processEraseAction
(
final
SafeIntent
intent
)
{
final
boolean
fromShortcut
=
intent
.
getBooleanExtra
(
EXTRA_SHORTCUT
false
)
;
final
boolean
fromNotification
=
intent
.
getBooleanExtra
(
EXTRA_NOTIFICATION
false
)
;
SessionManager
.
getInstance
(
)
.
removeAllSessions
(
)
;
if
(
fromShortcut
)
{
TelemetryWrapper
.
eraseShortcutEvent
(
)
;
}
else
if
(
fromNotification
)
{
TelemetryWrapper
.
eraseAndOpenNotificationActionEvent
(
)
;
}
}
private
void
showUrlInputScreen
(
)
{
final
FragmentManager
fragmentManager
=
getSupportFragmentManager
(
)
;
final
BrowserFragment
browserFragment
=
(
BrowserFragment
)
fragmentManager
.
findFragmentByTag
(
BrowserFragment
.
FRAGMENT_TAG
)
;
final
boolean
isShowingBrowser
=
browserFragment
!
=
null
;
if
(
isShowingBrowser
)
{
ViewUtils
.
showBrandedSnackbar
(
findViewById
(
android
.
R
.
id
.
content
)
R
.
string
.
feedback_erase
getResources
(
)
.
getInteger
(
R
.
integer
.
erase_snackbar_delay
)
)
;
}
final
FragmentTransaction
transaction
=
fragmentManager
.
beginTransaction
(
)
;
boolean
shouldAnimate
=
isShowingBrowser
&
&
browserFragment
.
isResumed
(
)
;
if
(
shouldAnimate
)
{
transaction
.
setCustomAnimations
(
0
R
.
anim
.
erase_animation
)
;
}
transaction
.
replace
(
R
.
id
.
container
UrlInputFragment
.
createWithoutSession
(
)
UrlInputFragment
.
FRAGMENT_TAG
)
.
commit
(
)
;
}
private
void
showFirstrun
(
)
{
getSupportFragmentManager
(
)
.
beginTransaction
(
)
.
add
(
R
.
id
.
container
FirstrunFragment
.
create
(
)
FirstrunFragment
.
FRAGMENT_TAG
)
.
commit
(
)
;
}
protected
Session
getCurrentSessionForActivity
(
)
{
return
sessionManager
.
getCurrentSession
(
)
;
}
protected
void
showBrowserScreenForCurrentSession
(
)
{
final
Session
currentSession
=
getCurrentSessionForActivity
(
)
;
final
FragmentManager
fragmentManager
=
getSupportFragmentManager
(
)
;
final
BrowserFragment
fragment
=
(
BrowserFragment
)
fragmentManager
.
findFragmentByTag
(
BrowserFragment
.
FRAGMENT_TAG
)
;
if
(
fragment
!
=
null
&
&
fragment
.
getSession
(
)
.
isSameAs
(
currentSession
)
)
{
return
;
}
fragmentManager
.
beginTransaction
(
)
.
replace
(
R
.
id
.
container
BrowserFragment
.
createForSession
(
currentSession
)
BrowserFragment
.
FRAGMENT_TAG
)
.
commit
(
)
;
}
Override
public
View
onCreateView
(
String
name
Context
context
AttributeSet
attrs
)
{
if
(
name
.
equals
(
IWebView
.
class
.
getName
(
)
)
)
{
return
WebViewProvider
.
create
(
this
attrs
)
;
}
return
super
.
onCreateView
(
name
context
attrs
)
;
}
Override
public
void
onBackPressed
(
)
{
final
FragmentManager
fragmentManager
=
getSupportFragmentManager
(
)
;
final
SessionsSheetFragment
sessionsSheetFragment
=
(
SessionsSheetFragment
)
fragmentManager
.
findFragmentByTag
(
SessionsSheetFragment
.
FRAGMENT_TAG
)
;
if
(
sessionsSheetFragment
!
=
null
&
&
sessionsSheetFragment
.
isVisible
(
)
&
&
sessionsSheetFragment
.
onBackPressed
(
)
)
{
return
;
}
final
UrlInputFragment
urlInputFragment
=
(
UrlInputFragment
)
fragmentManager
.
findFragmentByTag
(
UrlInputFragment
.
FRAGMENT_TAG
)
;
if
(
urlInputFragment
!
=
null
&
&
urlInputFragment
.
isVisible
(
)
&
&
urlInputFragment
.
onBackPressed
(
)
)
{
return
;
}
final
BrowserFragment
browserFragment
=
(
BrowserFragment
)
fragmentManager
.
findFragmentByTag
(
BrowserFragment
.
FRAGMENT_TAG
)
;
if
(
browserFragment
!
=
null
&
&
browserFragment
.
isVisible
(
)
&
&
browserFragment
.
onBackPressed
(
)
)
{
return
;
}
super
.
onBackPressed
(
)
;
}
}
