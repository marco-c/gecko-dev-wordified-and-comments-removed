package
org
.
mozilla
.
focus
.
shortcut
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
graphics
.
Bitmap
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Build
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
android
.
support
.
v4
.
content
.
pm
.
ShortcutInfoCompat
;
import
android
.
support
.
v4
.
content
.
pm
.
ShortcutManagerCompat
;
import
android
.
support
.
v4
.
graphics
.
drawable
.
IconCompat
;
import
android
.
text
.
TextUtils
;
import
org
.
mozilla
.
focus
.
activity
.
MainActivity
;
import
org
.
mozilla
.
focus
.
utils
.
UrlUtils
;
public
class
HomeScreen
{
public
static
final
String
ADD_TO_HOMESCREEN_TAG
=
"
add_to_homescreen
"
;
public
static
final
String
BLOCKING_ENABLED
=
"
blocking_enabled
"
;
public
static
void
installShortCut
(
Context
context
Bitmap
icon
String
url
String
title
boolean
blockingEnabled
)
{
if
(
TextUtils
.
isEmpty
(
title
.
trim
(
)
)
)
{
title
=
generateTitleFromUrl
(
url
)
;
}
installShortCutViaManager
(
context
icon
url
title
blockingEnabled
)
;
if
(
Build
.
VERSION
.
SDK_INT
<
=
Build
.
VERSION_CODES
.
N_MR1
)
{
goToHomeScreen
(
context
)
;
}
}
private
static
void
installShortCutViaManager
(
Context
context
Bitmap
bitmap
String
url
String
title
boolean
blockingEnabled
)
{
if
(
ShortcutManagerCompat
.
isRequestPinShortcutSupported
(
context
)
)
{
final
ShortcutInfoCompat
shortcut
=
new
ShortcutInfoCompat
.
Builder
(
context
url
)
.
setShortLabel
(
title
)
.
setLongLabel
(
title
)
.
setIcon
(
IconCompat
.
createWithBitmap
(
bitmap
)
)
.
setIntent
(
createShortcutIntent
(
context
url
blockingEnabled
)
)
.
build
(
)
;
ShortcutManagerCompat
.
requestPinShortcut
(
context
shortcut
null
)
;
}
}
private
static
Intent
createShortcutIntent
(
Context
context
String
url
boolean
blockingEnabled
)
{
final
Intent
shortcutIntent
=
new
Intent
(
context
MainActivity
.
class
)
;
shortcutIntent
.
setAction
(
Intent
.
ACTION_VIEW
)
;
shortcutIntent
.
setData
(
Uri
.
parse
(
url
)
)
;
shortcutIntent
.
putExtra
(
BLOCKING_ENABLED
blockingEnabled
)
;
shortcutIntent
.
putExtra
(
ADD_TO_HOMESCREEN_TAG
ADD_TO_HOMESCREEN_TAG
)
;
return
shortcutIntent
;
}
VisibleForTesting
static
String
generateTitleFromUrl
(
String
url
)
{
return
UrlUtils
.
stripCommonSubdomains
(
Uri
.
parse
(
url
)
.
getHost
(
)
)
;
}
private
static
void
goToHomeScreen
(
Context
context
)
{
Intent
intent
=
new
Intent
(
Intent
.
ACTION_MAIN
)
;
intent
.
addCategory
(
Intent
.
CATEGORY_HOME
)
;
intent
.
setFlags
(
Intent
.
FLAG_ACTIVITY_NEW_TASK
)
;
context
.
startActivity
(
intent
)
;
}
}
