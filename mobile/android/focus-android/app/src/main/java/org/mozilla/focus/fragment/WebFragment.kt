package
org
.
mozilla
.
focus
.
fragment
import
android
.
os
.
Bundle
import
android
.
text
.
TextUtils
import
android
.
view
.
LayoutInflater
import
android
.
view
.
View
import
android
.
view
.
ViewGroup
import
android
.
webkit
.
WebView
import
mozilla
.
components
.
browser
.
session
.
Session
import
org
.
mozilla
.
focus
.
R
import
org
.
mozilla
.
focus
.
ext
.
savedGeckoSession
import
org
.
mozilla
.
focus
.
ext
.
savedWebViewState
import
org
.
mozilla
.
focus
.
ext
.
shouldRequestDesktopSite
import
org
.
mozilla
.
focus
.
locale
.
LocaleAwareFragment
import
org
.
mozilla
.
focus
.
locale
.
LocaleManager
import
org
.
mozilla
.
focus
.
utils
.
AppConstants
import
org
.
mozilla
.
focus
.
web
.
IWebView
import
java
.
util
.
Locale
Suppress
(
"
TooManyFunctions
"
)
abstract
class
WebFragment
:
LocaleAwareFragment
(
)
{
private
var
webViewInstance
:
IWebView
?
=
null
private
var
isWebViewAvailable
:
Boolean
=
false
abstract
val
session
:
Session
?
abstract
val
initialUrl
:
String
?
abstract
fun
inflateLayout
(
inflater
:
LayoutInflater
container
:
ViewGroup
?
savedInstanceState
:
Bundle
?
)
:
View
abstract
fun
createCallback
(
)
:
IWebView
.
Callback
abstract
fun
onCreateViewCalled
(
)
override
fun
onCreateView
(
inflater
:
LayoutInflater
container
:
ViewGroup
?
savedInstanceState
:
Bundle
?
)
:
View
?
{
val
view
=
inflateLayout
(
inflater
container
savedInstanceState
)
val
actualWebView
=
view
.
findViewById
<
View
>
(
R
.
id
.
webview
)
webViewInstance
=
actualWebView
as
IWebView
isWebViewAvailable
=
true
webViewInstance
!
!
.
setCallback
(
createCallback
(
)
)
session
?
.
let
{
webViewInstance
!
!
.
setRequestDesktop
(
it
.
shouldRequestDesktopSite
)
}
if
(
!
AppConstants
.
isGeckoBuild
)
{
restoreStateOrLoadUrl
(
)
}
else
{
loadInitialUrl
(
)
}
onCreateViewCalled
(
)
return
view
}
override
fun
applyLocale
(
)
{
val
context
=
context
?
:
return
val
localeManager
=
LocaleManager
.
getInstance
(
)
if
(
!
localeManager
.
isMirroringSystemLocale
(
context
)
)
{
val
currentLocale
=
localeManager
.
getCurrentLocale
(
context
)
Locale
.
setDefault
(
currentLocale
)
val
resources
=
context
.
resources
val
config
=
resources
.
configuration
config
.
setLocale
(
currentLocale
)
Suppress
(
"
DEPRECATION
"
)
context
.
resources
.
updateConfiguration
(
config
null
)
}
val
unneeded
=
WebView
(
getContext
(
)
)
unneeded
.
destroy
(
)
}
override
fun
onPause
(
)
{
val
session
=
session
if
(
session
!
=
null
)
{
webViewInstance
!
!
.
saveWebViewState
(
session
)
}
webViewInstance
!
!
.
onPause
(
)
super
.
onPause
(
)
}
override
fun
onResume
(
)
{
webViewInstance
!
!
.
onResume
(
)
if
(
AppConstants
.
isGeckoBuild
)
{
restoreStateOrLoadUrl
(
)
}
super
.
onResume
(
)
}
override
fun
onDestroy
(
)
{
if
(
webViewInstance
!
=
null
)
{
webViewInstance
!
!
.
setCallback
(
null
)
webViewInstance
!
!
.
destroy
(
)
webViewInstance
=
null
}
super
.
onDestroy
(
)
}
override
fun
onDestroyView
(
)
{
isWebViewAvailable
=
false
super
.
onDestroyView
(
)
}
protected
fun
getWebView
(
)
:
IWebView
?
{
return
if
(
isWebViewAvailable
)
webViewInstance
else
null
}
private
fun
loadInitialUrl
(
)
{
val
session
=
session
if
(
session
=
=
null
|
|
session
.
savedWebViewState
=
=
null
|
|
session
.
savedGeckoSession
=
=
null
)
{
val
url
=
initialUrl
if
(
!
TextUtils
.
isEmpty
(
url
)
)
{
webViewInstance
!
!
.
loadUrl
(
url
)
}
}
}
private
fun
restoreStateOrLoadUrl
(
)
{
val
session
=
session
if
(
session
=
=
null
|
|
session
.
savedWebViewState
=
=
null
|
|
session
.
savedGeckoSession
=
=
null
)
{
val
url
=
initialUrl
if
(
!
TextUtils
.
isEmpty
(
url
)
)
{
webViewInstance
!
!
.
loadUrl
(
url
)
}
}
else
{
webViewInstance
!
!
.
restoreWebViewState
(
session
)
}
}
}
