package
org
.
mozilla
.
focus
import
android
.
arch
.
lifecycle
.
LifecycleObserver
import
android
.
os
.
StrictMode
import
android
.
preference
.
PreferenceManager
import
kotlinx
.
coroutines
.
experimental
.
CommonPool
import
kotlinx
.
coroutines
.
experimental
.
launch
import
org
.
mozilla
.
focus
.
locale
.
LocaleAwareApplication
import
org
.
mozilla
.
focus
.
session
.
NotificationSessionObserver
import
org
.
mozilla
.
focus
.
session
.
SessionManager
import
org
.
mozilla
.
focus
.
session
.
VisibilityLifeCycleCallback
import
org
.
mozilla
.
focus
.
telemetry
.
SentryWrapper
import
org
.
mozilla
.
focus
.
telemetry
.
TelemetrySessionObserver
import
org
.
mozilla
.
focus
.
telemetry
.
TelemetryWrapper
import
org
.
mozilla
.
focus
.
utils
.
AdjustHelper
import
org
.
mozilla
.
focus
.
utils
.
AppConstants
import
org
.
mozilla
.
focus
.
utils
.
StethoWrapper
import
org
.
mozilla
.
focus
.
web
.
CleanupSessionObserver
import
org
.
mozilla
.
focus
.
web
.
WebViewProvider
class
FocusApplication
:
LocaleAwareApplication
(
)
LifecycleObserver
{
var
visibilityLifeCycleCallback
:
VisibilityLifeCycleCallback
?
=
null
private
set
override
fun
onCreate
(
)
{
super
.
onCreate
(
)
SentryWrapper
.
init
(
this
)
StethoWrapper
.
init
(
this
)
PreferenceManager
.
setDefaultValues
(
this
R
.
xml
.
settings
false
)
WebViewProvider
.
readEnginePref
(
this
)
enableStrictMode
(
)
Components
.
searchEngineManager
.
apply
{
launch
(
CommonPool
)
{
load
(
this
FocusApplication
)
}
registerForLocaleUpdates
(
this
FocusApplication
)
}
TelemetryWrapper
.
init
(
this
)
AdjustHelper
.
setupAdjustIfNeeded
(
this
)
visibilityLifeCycleCallback
=
VisibilityLifeCycleCallback
(
this
)
registerActivityLifecycleCallbacks
(
visibilityLifeCycleCallback
)
val
sessions
=
SessionManager
.
getInstance
(
)
.
sessions
sessions
.
observeForever
(
NotificationSessionObserver
(
this
)
)
sessions
.
observeForever
(
TelemetrySessionObserver
(
)
)
sessions
.
observeForever
(
CleanupSessionObserver
(
this
)
)
val
customTabSessions
=
SessionManager
.
getInstance
(
)
.
customTabSessions
customTabSessions
.
observeForever
(
TelemetrySessionObserver
(
)
)
}
private
fun
enableStrictMode
(
)
{
if
(
AppConstants
.
isReleaseBuild
(
)
)
{
return
}
val
threadPolicyBuilder
=
StrictMode
.
ThreadPolicy
.
Builder
(
)
.
detectAll
(
)
val
vmPolicyBuilder
=
StrictMode
.
VmPolicy
.
Builder
(
)
.
detectAll
(
)
threadPolicyBuilder
.
penaltyLog
(
)
vmPolicyBuilder
.
penaltyLog
(
)
StrictMode
.
setThreadPolicy
(
threadPolicyBuilder
.
build
(
)
)
StrictMode
.
setVmPolicy
(
vmPolicyBuilder
.
build
(
)
)
}
}
