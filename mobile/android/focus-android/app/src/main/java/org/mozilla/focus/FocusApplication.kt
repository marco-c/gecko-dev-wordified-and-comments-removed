package
org
.
mozilla
.
focus
import
android
.
content
.
Context
import
android
.
os
.
Build
import
android
.
os
.
StrictMode
import
android
.
util
.
Log
.
INFO
import
androidx
.
appcompat
.
app
.
AppCompatDelegate
import
androidx
.
lifecycle
.
ProcessLifecycleOwner
import
androidx
.
preference
.
PreferenceManager
import
androidx
.
work
.
Configuration
.
Builder
import
androidx
.
work
.
Configuration
.
Provider
import
kotlinx
.
coroutines
.
CoroutineScope
import
kotlinx
.
coroutines
.
DelicateCoroutinesApi
import
kotlinx
.
coroutines
.
Dispatchers
import
kotlinx
.
coroutines
.
GlobalScope
import
kotlinx
.
coroutines
.
Job
import
kotlinx
.
coroutines
.
launch
import
mozilla
.
components
.
support
.
base
.
facts
.
register
import
mozilla
.
components
.
support
.
base
.
log
.
Log
import
mozilla
.
components
.
support
.
base
.
log
.
sink
.
AndroidLogSink
import
mozilla
.
components
.
support
.
ktx
.
android
.
content
.
isMainProcess
import
mozilla
.
components
.
support
.
locale
.
LocaleAwareApplication
import
mozilla
.
components
.
support
.
rusthttp
.
RustHttpConfig
import
mozilla
.
components
.
support
.
rustlog
.
RustLog
import
mozilla
.
components
.
support
.
webextensions
.
WebExtensionSupport
import
org
.
mozilla
.
focus
.
biometrics
.
LockObserver
import
org
.
mozilla
.
focus
.
ext
.
settings
import
org
.
mozilla
.
focus
.
navigation
.
StoreLink
import
org
.
mozilla
.
focus
.
nimbus
.
FocusNimbus
import
org
.
mozilla
.
focus
.
session
.
VisibilityLifeCycleCallback
import
org
.
mozilla
.
focus
.
telemetry
.
FactsProcessor
import
org
.
mozilla
.
focus
.
telemetry
.
ProfilerMarkerFactProcessor
import
org
.
mozilla
.
focus
.
telemetry
.
TelemetryWrapper
import
org
.
mozilla
.
focus
.
utils
.
AdjustHelper
import
org
.
mozilla
.
focus
.
utils
.
AppConstants
import
kotlin
.
coroutines
.
CoroutineContext
open
class
FocusApplication
:
LocaleAwareApplication
(
)
Provider
CoroutineScope
{
private
var
job
=
Job
(
)
override
val
coroutineContext
:
CoroutineContext
get
(
)
=
job
+
Dispatchers
.
Main
open
val
components
:
Components
by
lazy
{
Components
(
this
)
}
var
visibilityLifeCycleCallback
:
VisibilityLifeCycleCallback
?
=
null
private
set
private
val
storeLink
by
lazy
{
StoreLink
(
components
.
appStore
components
.
store
)
}
private
val
lockObserver
by
lazy
{
LockObserver
(
this
components
.
store
components
.
appStore
)
}
OptIn
(
DelicateCoroutinesApi
:
:
class
)
override
fun
onCreate
(
)
{
super
.
onCreate
(
)
Log
.
addSink
(
AndroidLogSink
(
"
Focus
"
)
)
components
.
crashReporter
.
install
(
this
)
if
(
isMainProcess
(
)
)
{
initializeNativeComponents
(
)
PreferenceManager
.
setDefaultValues
(
this
R
.
xml
.
settings
false
)
setTheme
(
this
)
components
.
engine
.
warmUp
(
)
TelemetryWrapper
.
init
(
this
)
components
.
metrics
.
initialize
(
this
)
FactsProcessor
.
initialize
(
)
ProfilerMarkerFactProcessor
.
create
{
components
.
engine
.
profiler
}
.
register
(
)
enableStrictMode
(
)
AdjustHelper
.
setupAdjustIfNeeded
(
this
FocusApplication
)
visibilityLifeCycleCallback
=
VisibilityLifeCycleCallback
(
this
FocusApplication
)
registerActivityLifecycleCallbacks
(
visibilityLifeCycleCallback
)
registerComponentCallbacks
(
visibilityLifeCycleCallback
)
storeLink
.
start
(
)
initializeWebExtensionSupport
(
)
setupLeakCanary
(
)
components
.
appStartReasonProvider
.
registerInAppOnCreate
(
this
)
components
.
startupActivityLog
.
registerInAppOnCreate
(
this
)
ProcessLifecycleOwner
.
get
(
)
.
lifecycle
.
addObserver
(
lockObserver
)
}
}
protected
open
fun
setupLeakCanary
(
)
{
}
open
fun
updateLeakCanaryState
(
isEnabled
:
Boolean
)
{
}
OptIn
(
DelicateCoroutinesApi
:
:
class
)
private
fun
initializeNativeComponents
(
)
{
GlobalScope
.
launch
(
Dispatchers
.
IO
)
{
Suppress
(
"
Deprecation
"
)
RustHttpConfig
.
setClient
(
lazy
{
components
.
client
.
unwrap
(
)
}
)
RustLog
.
enable
(
components
.
crashReporter
)
components
.
experiments
.
initialize
(
)
FocusNimbus
.
initialize
{
components
.
experiments
}
}
}
private
fun
setTheme
(
context
:
Context
)
{
val
settings
=
context
.
settings
when
{
settings
.
lightThemeSelected
-
>
{
AppCompatDelegate
.
setDefaultNightMode
(
AppCompatDelegate
.
MODE_NIGHT_NO
)
}
settings
.
darkThemeSelected
-
>
{
AppCompatDelegate
.
setDefaultNightMode
(
AppCompatDelegate
.
MODE_NIGHT_YES
)
}
settings
.
useDefaultThemeSelected
-
>
{
setDefaultTheme
(
)
}
else
-
>
{
setDefaultTheme
(
)
settings
.
useDefaultThemeSelected
=
true
}
}
}
private
fun
setDefaultTheme
(
)
{
if
(
Build
.
VERSION
.
SDK_INT
>
=
Build
.
VERSION_CODES
.
P
)
{
AppCompatDelegate
.
setDefaultNightMode
(
AppCompatDelegate
.
MODE_NIGHT_FOLLOW_SYSTEM
)
}
else
{
AppCompatDelegate
.
setDefaultNightMode
(
AppCompatDelegate
.
MODE_NIGHT_AUTO_BATTERY
)
}
}
private
fun
enableStrictMode
(
)
{
if
(
AppConstants
.
isReleaseBuild
|
|
AppConstants
.
isBetaBuild
)
{
return
}
val
threadPolicyBuilder
=
StrictMode
.
ThreadPolicy
.
Builder
(
)
.
detectAll
(
)
val
vmPolicyBuilder
=
StrictMode
.
VmPolicy
.
Builder
(
)
.
detectActivityLeaks
(
)
.
detectFileUriExposure
(
)
.
detectLeakedClosableObjects
(
)
.
detectLeakedRegistrationObjects
(
)
.
detectLeakedSqlLiteObjects
(
)
threadPolicyBuilder
.
penaltyLog
(
)
vmPolicyBuilder
.
penaltyLog
(
)
StrictMode
.
setThreadPolicy
(
threadPolicyBuilder
.
build
(
)
)
StrictMode
.
setVmPolicy
(
vmPolicyBuilder
.
build
(
)
)
}
private
fun
initializeWebExtensionSupport
(
)
{
WebExtensionSupport
.
initialize
(
components
.
engine
components
.
store
onNewTabOverride
=
{
_
engineSession
url
-
>
components
.
tabsUseCases
.
addTab
(
url
=
url
selectTab
=
true
engineSession
=
engineSession
private
=
true
)
}
)
}
override
fun
getWorkManagerConfiguration
(
)
=
Builder
(
)
.
setMinimumLoggingLevel
(
INFO
)
.
build
(
)
}
