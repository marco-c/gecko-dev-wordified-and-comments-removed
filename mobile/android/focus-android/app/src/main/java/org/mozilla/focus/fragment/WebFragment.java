package
org
.
mozilla
.
focus
.
fragment
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
content
.
res
.
Resources
;
import
android
.
os
.
Bundle
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
text
.
TextUtils
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewGroup
;
import
android
.
webkit
.
WebView
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
locale
.
LocaleAwareFragment
;
import
org
.
mozilla
.
focus
.
locale
.
LocaleManager
;
import
org
.
mozilla
.
focus
.
session
.
Session
;
import
org
.
mozilla
.
focus
.
web
.
IWebView
;
import
java
.
util
.
Locale
;
public
abstract
class
WebFragment
extends
LocaleAwareFragment
{
private
IWebView
webView
;
private
boolean
isWebViewAvailable
;
NonNull
public
abstract
View
inflateLayout
(
LayoutInflater
inflater
Nullable
ViewGroup
container
Nullable
Bundle
savedInstanceState
)
;
public
abstract
IWebView
.
Callback
createCallback
(
)
;
public
abstract
Session
getSession
(
)
;
Nullable
public
abstract
String
getInitialUrl
(
)
;
public
abstract
void
onCreateViewCalled
(
)
;
Override
public
View
onCreateView
(
LayoutInflater
inflater
Nullable
ViewGroup
container
Nullable
Bundle
savedInstanceState
)
{
final
View
view
=
inflateLayout
(
inflater
container
savedInstanceState
)
;
webView
=
view
.
findViewById
(
R
.
id
.
webview
)
;
isWebViewAvailable
=
true
;
webView
.
setCallback
(
createCallback
(
)
)
;
final
Session
session
=
getSession
(
)
;
if
(
session
!
=
null
)
{
webView
.
setBlockingEnabled
(
session
.
isBlockingEnabled
(
)
)
;
}
if
(
session
=
=
null
|
|
!
session
.
hasWebViewState
(
)
)
{
final
String
url
=
getInitialUrl
(
)
;
if
(
!
TextUtils
.
isEmpty
(
url
)
)
{
webView
.
loadUrl
(
url
)
;
}
}
else
{
webView
.
restoreWebViewState
(
session
)
;
}
onCreateViewCalled
(
)
;
return
view
;
}
Override
public
void
applyLocale
(
)
{
Context
context
=
getContext
(
)
;
final
LocaleManager
localeManager
=
LocaleManager
.
getInstance
(
)
;
if
(
!
localeManager
.
isMirroringSystemLocale
(
context
)
)
{
final
Locale
currentLocale
=
localeManager
.
getCurrentLocale
(
context
)
;
Locale
.
setDefault
(
currentLocale
)
;
final
Resources
resources
=
context
.
getResources
(
)
;
final
Configuration
config
=
resources
.
getConfiguration
(
)
;
config
.
setLocale
(
currentLocale
)
;
context
.
getResources
(
)
.
updateConfiguration
(
config
null
)
;
}
final
WebView
unneeded
=
new
WebView
(
getContext
(
)
)
;
unneeded
.
destroy
(
)
;
}
Override
public
void
onPause
(
)
{
final
Session
session
=
getSession
(
)
;
if
(
session
!
=
null
)
{
webView
.
saveWebViewState
(
session
)
;
}
webView
.
onPause
(
)
;
super
.
onPause
(
)
;
}
Override
public
void
onResume
(
)
{
webView
.
onResume
(
)
;
super
.
onResume
(
)
;
}
Override
public
void
onDestroy
(
)
{
if
(
webView
!
=
null
)
{
webView
.
setCallback
(
null
)
;
webView
.
destroy
(
)
;
webView
=
null
;
}
super
.
onDestroy
(
)
;
}
Override
public
void
onDestroyView
(
)
{
isWebViewAvailable
=
false
;
super
.
onDestroyView
(
)
;
}
Nullable
protected
IWebView
getWebView
(
)
{
return
isWebViewAvailable
?
webView
:
null
;
}
}
