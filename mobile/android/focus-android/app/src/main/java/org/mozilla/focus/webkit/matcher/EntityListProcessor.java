package
org
.
mozilla
.
focus
.
webkit
.
matcher
;
import
android
.
util
.
JsonReader
;
import
java
.
io
.
IOException
;
import
java
.
util
.
ArrayList
;
class
EntityListProcessor
{
private
final
EntityList
entityMap
=
new
EntityList
(
)
;
public
static
EntityList
getEntityMapFromJSON
(
final
JsonReader
reader
)
throws
IOException
{
EntityListProcessor
processor
=
new
EntityListProcessor
(
reader
)
;
return
processor
.
entityMap
;
}
private
EntityListProcessor
(
final
JsonReader
reader
)
throws
IOException
{
reader
.
beginObject
(
)
;
while
(
reader
.
hasNext
(
)
)
{
final
String
siteName
=
reader
.
nextName
(
)
;
handleSite
(
reader
)
;
}
reader
.
endObject
(
)
;
}
private
void
handleSite
(
final
JsonReader
reader
)
throws
IOException
{
reader
.
beginObject
(
)
;
final
Trie
whitelist
=
Trie
.
createRootNode
(
)
;
final
ArrayList
<
String
>
propertyList
=
new
ArrayList
<
>
(
)
;
while
(
reader
.
hasNext
(
)
)
{
final
String
itemName
=
reader
.
nextName
(
)
;
if
(
itemName
.
equals
(
"
properties
"
)
)
{
reader
.
beginArray
(
)
;
while
(
reader
.
hasNext
(
)
)
{
propertyList
.
add
(
reader
.
nextString
(
)
)
;
}
reader
.
endArray
(
)
;
}
else
if
(
itemName
.
equals
(
"
resources
"
)
)
{
reader
.
beginArray
(
)
;
while
(
reader
.
hasNext
(
)
)
{
final
String
revhost
=
new
StringBuilder
(
reader
.
nextString
(
)
)
.
reverse
(
)
.
toString
(
)
;
whitelist
.
put
(
revhost
)
;
}
reader
.
endArray
(
)
;
}
}
for
(
final
String
property
:
propertyList
)
{
final
String
revhost
=
new
StringBuilder
(
property
)
.
reverse
(
)
.
toString
(
)
;
entityMap
.
putWhiteList
(
revhost
whitelist
)
;
}
reader
.
endObject
(
)
;
}
}
