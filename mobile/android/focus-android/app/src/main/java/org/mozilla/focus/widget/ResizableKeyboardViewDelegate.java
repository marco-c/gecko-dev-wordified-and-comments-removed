package
org
.
mozilla
.
focus
.
widget
;
import
android
.
animation
.
Animator
;
import
android
.
animation
.
AnimatorListenerAdapter
;
import
android
.
animation
.
ValueAnimator
;
import
android
.
content
.
res
.
TypedArray
;
import
android
.
graphics
.
Rect
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewTreeObserver
;
import
androidx
.
annotation
.
NonNull
;
import
org
.
mozilla
.
focus
.
R
;
class
ResizableKeyboardViewDelegate
{
private
final
Rect
rect
;
private
final
View
delegateView
;
private
View
decorView
;
private
final
boolean
shouldAnimate
;
private
boolean
isAnimating
;
private
final
ViewTreeObserver
.
OnGlobalLayoutListener
layoutListener
=
new
ViewTreeObserver
.
OnGlobalLayoutListener
(
)
{
Override
public
void
onGlobalLayout
(
)
{
if
(
isAnimating
)
{
return
;
}
int
difference
=
calculateDifferenceBetweenHeightAndUsableArea
(
)
;
if
(
difference
>
0
)
{
if
(
delegateView
.
getPaddingBottom
(
)
!
=
difference
)
{
updateBottomPadding
(
difference
)
;
}
}
else
{
if
(
delegateView
.
getPaddingBottom
(
)
!
=
0
)
{
updateBottomPadding
(
0
)
;
}
}
}
}
;
ResizableKeyboardViewDelegate
(
NonNull
View
view
NonNull
AttributeSet
attrs
)
{
this
.
delegateView
=
view
;
this
.
rect
=
new
Rect
(
)
;
final
TypedArray
styleAttributeArray
=
view
.
getContext
(
)
.
getTheme
(
)
.
obtainStyledAttributes
(
attrs
R
.
styleable
.
ResizableKeyboardViewDelegate
0
0
)
;
try
{
shouldAnimate
=
styleAttributeArray
.
getBoolean
(
R
.
styleable
.
ResizableKeyboardViewDelegate_animate
false
)
;
}
finally
{
styleAttributeArray
.
recycle
(
)
;
}
}
void
onAttachedToWindow
(
)
{
delegateView
.
getViewTreeObserver
(
)
.
addOnGlobalLayoutListener
(
layoutListener
)
;
}
void
onDetachedFromWindow
(
)
{
delegateView
.
getViewTreeObserver
(
)
.
removeOnGlobalLayoutListener
(
layoutListener
)
;
}
void
reset
(
)
{
updateBottomPadding
(
0
)
;
}
private
void
updateBottomPadding
(
int
value
)
{
if
(
shouldAnimate
)
{
animateBottomPaddingTo
(
value
)
;
}
else
{
delegateView
.
setPadding
(
0
0
0
value
)
;
}
}
private
void
animateBottomPaddingTo
(
int
value
)
{
isAnimating
=
true
;
final
ValueAnimator
animator
=
ValueAnimator
.
ofInt
(
delegateView
.
getPaddingBottom
(
)
value
)
;
animator
.
addUpdateListener
(
new
ValueAnimator
.
AnimatorUpdateListener
(
)
{
Override
public
void
onAnimationUpdate
(
ValueAnimator
animation
)
{
delegateView
.
setPadding
(
0
0
0
(
int
)
animation
.
getAnimatedValue
(
)
)
;
}
}
)
;
animator
.
setDuration
(
200
)
;
animator
.
addListener
(
new
AnimatorListenerAdapter
(
)
{
Override
public
void
onAnimationEnd
(
Animator
animation
)
{
isAnimating
=
false
;
}
}
)
;
animator
.
start
(
)
;
}
private
int
calculateDifferenceBetweenHeightAndUsableArea
(
)
{
if
(
decorView
=
=
null
)
{
decorView
=
delegateView
.
getRootView
(
)
;
}
decorView
.
getWindowVisibleDisplayFrame
(
rect
)
;
return
delegateView
.
getResources
(
)
.
getDisplayMetrics
(
)
.
heightPixels
-
rect
.
bottom
;
}
}
