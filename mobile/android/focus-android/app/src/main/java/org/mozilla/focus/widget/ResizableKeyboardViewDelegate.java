package
org
.
mozilla
.
focus
.
widget
;
import
android
.
animation
.
Animator
;
import
android
.
animation
.
AnimatorListenerAdapter
;
import
android
.
animation
.
ValueAnimator
;
import
android
.
content
.
res
.
TypedArray
;
import
android
.
graphics
.
Rect
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewTreeObserver
;
import
androidx
.
annotation
.
NonNull
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
tips
.
TipsHorizontalCarousel
;
import
java
.
util
.
ArrayList
;
class
ResizableKeyboardViewDelegate
{
private
final
Rect
rect
;
private
final
View
delegateView
;
private
View
decorView
;
private
final
int
viewsToHideAttrId
;
private
final
ArrayList
<
Integer
>
arrayOfViewsToHide
=
new
ArrayList
<
>
(
)
;
private
final
boolean
shouldAnimate
;
private
boolean
isAnimating
;
private
int
lastValueOfDifference
=
0
;
private
final
ViewTreeObserver
.
OnGlobalLayoutListener
layoutListener
=
new
ViewTreeObserver
.
OnGlobalLayoutListener
(
)
{
Override
public
void
onGlobalLayout
(
)
{
if
(
isAnimating
)
{
return
;
}
int
difference
=
calculateDifferenceBetweenHeightAndUsableArea
(
)
;
if
(
difference
>
0
)
{
if
(
delegateView
.
getPaddingBottom
(
)
!
=
difference
)
{
updateBottomPadding
(
difference
)
;
updateDynamicViewsVisibility
(
View
.
GONE
)
;
}
}
else
{
if
(
delegateView
.
getPaddingBottom
(
)
!
=
0
)
{
updateBottomPadding
(
0
)
;
updateDynamicViewsVisibility
(
View
.
VISIBLE
)
;
}
}
setHomeTipsVisibility
(
difference
)
;
}
}
;
ResizableKeyboardViewDelegate
(
NonNull
View
view
NonNull
AttributeSet
attrs
)
{
this
.
delegateView
=
view
;
this
.
rect
=
new
Rect
(
)
;
final
TypedArray
styleAttributeArray
=
view
.
getContext
(
)
.
getTheme
(
)
.
obtainStyledAttributes
(
attrs
R
.
styleable
.
ResizableKeyboardViewDelegate
0
0
)
;
try
{
viewsToHideAttrId
=
styleAttributeArray
.
getResourceId
(
R
.
styleable
.
ResizableKeyboardViewDelegate_viewsToHideWhenActivated
0
)
;
shouldAnimate
=
styleAttributeArray
.
getBoolean
(
R
.
styleable
.
ResizableKeyboardViewDelegate_animate
false
)
;
}
finally
{
styleAttributeArray
.
recycle
(
)
;
}
}
private
void
populateArrayOfViewsToHide
(
int
viewsToHideAttrId
)
{
if
(
viewsToHideAttrId
!
=
0
)
{
final
TypedArray
resourceArray
=
delegateView
.
getResources
(
)
.
obtainTypedArray
(
viewsToHideAttrId
)
;
for
(
int
index
=
0
;
index
<
resourceArray
.
length
(
)
;
index
+
+
)
{
final
int
resourceId
=
resourceArray
.
getResourceId
(
index
0
)
;
arrayOfViewsToHide
.
add
(
resourceId
)
;
}
resourceArray
.
recycle
(
)
;
}
}
void
onAttachedToWindow
(
)
{
populateArrayOfViewsToHide
(
viewsToHideAttrId
)
;
delegateView
.
getViewTreeObserver
(
)
.
addOnGlobalLayoutListener
(
layoutListener
)
;
}
void
onDetachedFromWindow
(
)
{
arrayOfViewsToHide
.
clear
(
)
;
delegateView
.
getViewTreeObserver
(
)
.
removeOnGlobalLayoutListener
(
layoutListener
)
;
}
void
reset
(
)
{
updateBottomPadding
(
0
)
;
}
private
void
updateBottomPadding
(
int
value
)
{
if
(
shouldAnimate
)
{
animateBottomPaddingTo
(
value
)
;
}
else
{
delegateView
.
setPadding
(
0
0
0
value
)
;
}
}
private
void
animateBottomPaddingTo
(
int
value
)
{
isAnimating
=
true
;
final
ValueAnimator
animator
=
ValueAnimator
.
ofInt
(
delegateView
.
getPaddingBottom
(
)
value
)
;
animator
.
addUpdateListener
(
new
ValueAnimator
.
AnimatorUpdateListener
(
)
{
Override
public
void
onAnimationUpdate
(
ValueAnimator
animation
)
{
delegateView
.
setPadding
(
0
0
0
(
int
)
animation
.
getAnimatedValue
(
)
)
;
}
}
)
;
animator
.
setDuration
(
200
)
;
animator
.
addListener
(
new
AnimatorListenerAdapter
(
)
{
Override
public
void
onAnimationEnd
(
Animator
animation
)
{
isAnimating
=
false
;
}
}
)
;
animator
.
start
(
)
;
}
private
int
calculateDifferenceBetweenHeightAndUsableArea
(
)
{
if
(
decorView
=
=
null
)
{
decorView
=
delegateView
.
getRootView
(
)
;
}
decorView
.
getWindowVisibleDisplayFrame
(
rect
)
;
return
delegateView
.
getResources
(
)
.
getDisplayMetrics
(
)
.
heightPixels
-
rect
.
bottom
;
}
private
void
updateDynamicViewsVisibility
(
int
visibility
)
{
if
(
!
arrayOfViewsToHide
.
isEmpty
(
)
)
{
for
(
Integer
viewId
:
arrayOfViewsToHide
)
{
View
viewToHide
=
delegateView
.
findViewById
(
viewId
)
;
if
(
viewToHide
!
=
null
)
{
viewToHide
.
setVisibility
(
visibility
)
;
}
}
}
}
private
void
setHomeTipsVisibility
(
int
difference
)
{
TipsHorizontalCarousel
homeTipsCarousel
=
delegateView
.
findViewById
(
R
.
id
.
home_tips
)
;
if
(
homeTipsCarousel
!
=
null
&
&
difference
!
=
lastValueOfDifference
)
{
lastValueOfDifference
=
difference
;
homeTipsCarousel
.
showAsCarousel
(
difference
<
=
0
)
;
}
}
}
