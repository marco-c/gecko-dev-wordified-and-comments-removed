package
org
.
mozilla
.
focus
.
webview
;
import
android
.
content
.
res
.
Resources
;
import
androidx
.
collection
.
ArrayMap
;
import
androidx
.
core
.
util
.
Pair
;
import
android
.
webkit
.
WebView
;
import
android
.
webkit
.
WebViewClient
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
utils
.
HtmlLoader
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
ErrorPage
{
private
static
final
HashMap
<
Integer
Pair
<
Integer
Integer
>
>
errorDescriptionMap
;
static
{
errorDescriptionMap
=
new
HashMap
<
>
(
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_UNKNOWN
new
Pair
<
>
(
R
.
string
.
error_connectionfailure_title
R
.
string
.
error_connectionfailure_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_HOST_LOOKUP
new
Pair
<
>
(
R
.
string
.
error_hostLookup_title
R
.
string
.
error_hostLookup_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_CONNECT
new
Pair
<
>
(
R
.
string
.
error_connect_title
R
.
string
.
error_connect_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_IO
new
Pair
<
>
(
R
.
string
.
error_connectionfailure_title
R
.
string
.
error_connectionfailure_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_TIMEOUT
new
Pair
<
>
(
R
.
string
.
error_timeout_title
R
.
string
.
error_timeout_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_REDIRECT_LOOP
new
Pair
<
>
(
R
.
string
.
error_redirectLoop_title
R
.
string
.
error_redirectLoop_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_UNSUPPORTED_SCHEME
new
Pair
<
>
(
R
.
string
.
error_unsupportedprotocol_title
R
.
string
.
error_unsupportedprotocol_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_FAILED_SSL_HANDSHAKE
new
Pair
<
>
(
R
.
string
.
error_sslhandshake_title
R
.
string
.
error_sslhandshake_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_BAD_URL
new
Pair
<
>
(
R
.
string
.
error_malformedURI_title
R
.
string
.
error_malformedURI_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_TOO_MANY_REQUESTS
new
Pair
<
>
(
R
.
string
.
error_generic_title
R
.
string
.
error_generic_message
)
)
;
}
public
static
boolean
supportsErrorCode
(
final
int
errorCode
)
{
return
(
errorDescriptionMap
.
get
(
errorCode
)
!
=
null
)
;
}
public
static
void
loadErrorPage
(
final
WebView
webView
final
String
desiredURL
final
int
errorCode
)
{
final
Pair
<
Integer
Integer
>
errorResourceIDs
=
errorDescriptionMap
.
get
(
errorCode
)
;
if
(
errorResourceIDs
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Cannot
load
error
description
for
unsupported
errorcode
=
"
+
errorCode
)
;
}
final
String
cssString
=
HtmlLoader
.
loadResourceFile
(
webView
.
getContext
(
)
R
.
raw
.
errorpage_style
null
)
;
final
Map
<
String
String
>
substitutionMap
=
new
ArrayMap
<
>
(
)
;
final
Resources
resources
=
webView
.
getContext
(
)
.
getResources
(
)
;
substitutionMap
.
put
(
"
%
page
-
title
%
"
resources
.
getString
(
R
.
string
.
errorpage_title
)
)
;
substitutionMap
.
put
(
"
%
button
%
"
resources
.
getString
(
R
.
string
.
errorpage_refresh
)
)
;
substitutionMap
.
put
(
"
%
messageShort
%
"
resources
.
getString
(
errorResourceIDs
.
first
)
)
;
substitutionMap
.
put
(
"
%
messageLong
%
"
resources
.
getString
(
errorResourceIDs
.
second
desiredURL
)
)
;
substitutionMap
.
put
(
"
%
css
%
"
cssString
)
;
final
String
errorPage
=
HtmlLoader
.
loadResourceFile
(
webView
.
getContext
(
)
R
.
raw
.
errorpage
substitutionMap
)
;
webView
.
loadDataWithBaseURL
(
desiredURL
errorPage
"
text
/
html
"
"
UTF8
"
desiredURL
)
;
}
}
