package
org
.
mozilla
.
focus
.
webkit
.
matcher
;
import
android
.
util
.
Pair
;
import
android
.
util
.
SparseArray
;
import
org
.
mozilla
.
focus
.
webkit
.
matcher
.
util
.
FocusString
;
class
Trie
{
public
static
class
WhiteListTrie
extends
Trie
{
Trie
whitelist
=
null
;
private
WhiteListTrie
(
final
char
character
final
WhiteListTrie
parent
)
{
super
(
character
parent
)
;
}
Override
protected
Trie
createNode
(
final
char
character
final
Trie
parent
)
{
return
new
WhiteListTrie
(
character
(
WhiteListTrie
)
parent
)
;
}
public
static
WhiteListTrie
createRootNode
(
)
{
return
new
WhiteListTrie
(
Character
.
MIN_VALUE
null
)
;
}
public
void
putWhiteList
(
final
FocusString
string
final
Trie
whitelist
)
{
WhiteListTrie
node
=
(
WhiteListTrie
)
super
.
put
(
string
)
;
if
(
node
.
whitelist
!
=
null
)
{
throw
new
IllegalStateException
(
"
Whitelist
already
set
for
node
"
+
string
)
;
}
node
.
whitelist
=
whitelist
;
}
}
public
final
char
character
;
public
final
SparseArray
<
Trie
>
children
=
new
SparseArray
<
>
(
)
;
public
boolean
terminator
=
false
;
public
Trie
findNode
(
final
FocusString
string
)
{
if
(
terminator
)
{
return
this
;
}
else
if
(
string
.
length
(
)
=
=
0
)
{
return
null
;
}
final
Trie
next
=
children
.
get
(
string
.
charAt
(
0
)
)
;
if
(
next
=
=
null
)
{
return
null
;
}
return
next
.
findNode
(
string
.
substring
(
1
)
)
;
}
public
Trie
put
(
final
FocusString
string
)
{
if
(
string
.
length
(
)
=
=
0
)
{
terminator
=
true
;
return
this
;
}
final
char
character
=
string
.
charAt
(
0
)
;
final
Trie
child
=
put
(
character
)
;
return
child
.
put
(
string
.
substring
(
1
)
)
;
}
public
Trie
put
(
char
character
)
{
final
Trie
existingChild
=
children
.
get
(
character
)
;
if
(
existingChild
!
=
null
)
{
return
existingChild
;
}
final
Trie
newChild
=
createNode
(
character
this
)
;
children
.
put
(
character
newChild
)
;
return
newChild
;
}
private
Trie
(
char
character
Trie
parent
)
{
this
.
character
=
character
;
if
(
parent
!
=
null
)
{
parent
.
children
.
put
(
character
this
)
;
}
}
public
static
Trie
createRootNode
(
)
{
return
new
Trie
(
Character
.
MIN_VALUE
null
)
;
}
protected
Trie
createNode
(
final
char
character
final
Trie
parent
)
{
return
new
Trie
(
character
parent
)
;
}
}
