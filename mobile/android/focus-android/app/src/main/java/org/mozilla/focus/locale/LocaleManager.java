package
org
.
mozilla
.
focus
.
locale
;
import
java
.
util
.
Arrays
;
import
java
.
util
.
Collection
;
import
java
.
util
.
Locale
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicBoolean
;
import
java
.
util
.
concurrent
.
atomic
.
AtomicReference
;
import
android
.
content
.
BroadcastReceiver
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
IntentFilter
;
import
android
.
content
.
SharedPreferences
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
content
.
res
.
Resources
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
focus
.
R
;
public
class
LocaleManager
{
private
static
final
String
LOG_TAG
=
"
GeckoLocales
"
;
private
static
String
PREF_LOCALE
=
null
;
private
static
final
String
FALLBACK_LOCALE_TAG
=
"
en
-
US
"
;
private
volatile
Locale
currentLocale
;
private
volatile
Locale
systemLocale
=
Locale
.
getDefault
(
)
;
private
final
AtomicBoolean
inited
=
new
AtomicBoolean
(
false
)
;
private
boolean
systemLocaleDidChange
;
private
BroadcastReceiver
receiver
;
private
static
final
AtomicReference
<
LocaleManager
>
instance
=
new
AtomicReference
<
LocaleManager
>
(
)
;
public
static
LocaleManager
getInstance
(
)
{
LocaleManager
localeManager
=
instance
.
get
(
)
;
if
(
localeManager
!
=
null
)
{
return
localeManager
;
}
localeManager
=
new
LocaleManager
(
)
;
if
(
instance
.
compareAndSet
(
null
localeManager
)
)
{
return
localeManager
;
}
else
{
return
instance
.
get
(
)
;
}
}
public
void
initialize
(
final
Context
context
)
{
if
(
!
inited
.
compareAndSet
(
false
true
)
)
{
return
;
}
receiver
=
new
BroadcastReceiver
(
)
{
Override
public
void
onReceive
(
Context
context
Intent
intent
)
{
final
Locale
current
=
systemLocale
;
systemLocale
=
context
.
getResources
(
)
.
getConfiguration
(
)
.
locale
;
systemLocaleDidChange
=
true
;
Log
.
d
(
LOG_TAG
"
System
locale
changed
from
"
+
current
+
"
to
"
+
systemLocale
)
;
}
}
;
context
.
registerReceiver
(
receiver
new
IntentFilter
(
Intent
.
ACTION_LOCALE_CHANGED
)
)
;
}
public
boolean
systemLocaleDidChange
(
)
{
return
systemLocaleDidChange
;
}
public
void
correctLocale
(
Context
context
Resources
res
Configuration
config
)
{
final
Locale
current
=
getCurrentLocale
(
context
)
;
if
(
current
=
=
null
)
{
Log
.
d
(
LOG_TAG
"
No
selected
locale
.
No
correction
needed
.
"
)
;
return
;
}
config
.
locale
=
current
;
Locale
.
setDefault
(
current
)
;
res
.
updateConfiguration
(
config
null
)
;
}
public
Locale
onSystemConfigurationChanged
(
final
Context
context
final
Resources
resources
final
Configuration
configuration
final
Locale
currentActivityLocale
)
{
if
(
!
isMirroringSystemLocale
(
context
)
)
{
correctLocale
(
context
resources
configuration
)
;
}
final
Locale
changed
=
configuration
.
locale
;
if
(
changed
.
equals
(
currentActivityLocale
)
)
{
return
null
;
}
return
changed
;
}
public
String
getAndApplyPersistedLocale
(
Context
context
)
{
initialize
(
context
)
;
final
long
t1
=
android
.
os
.
SystemClock
.
uptimeMillis
(
)
;
final
String
localeCode
=
getPersistedLocale
(
context
)
;
if
(
localeCode
=
=
null
)
{
return
null
;
}
final
String
resultant
=
updateLocale
(
context
localeCode
)
;
if
(
resultant
=
=
null
)
{
updateConfiguration
(
context
currentLocale
)
;
}
final
long
t2
=
android
.
os
.
SystemClock
.
uptimeMillis
(
)
;
Log
.
i
(
LOG_TAG
"
Locale
read
and
update
took
:
"
+
(
t2
-
t1
)
+
"
ms
.
"
)
;
return
resultant
;
}
public
String
setSelectedLocale
(
Context
context
String
localeCode
)
{
final
String
resultant
=
updateLocale
(
context
localeCode
)
;
persistLocale
(
context
localeCode
)
;
return
resultant
;
}
public
void
resetToSystemLocale
(
Context
context
)
{
final
SharedPreferences
settings
=
getSharedPreferences
(
context
)
;
settings
.
edit
(
)
.
remove
(
PREF_LOCALE
)
.
apply
(
)
;
updateLocale
(
context
systemLocale
)
;
}
public
void
updateConfiguration
(
Context
context
Locale
locale
)
{
Resources
res
=
context
.
getResources
(
)
;
Configuration
config
=
res
.
getConfiguration
(
)
;
config
.
locale
=
locale
;
config
.
setLayoutDirection
(
locale
)
;
res
.
updateConfiguration
(
config
null
)
;
}
private
SharedPreferences
getSharedPreferences
(
final
Context
context
)
{
if
(
PREF_LOCALE
=
=
null
)
{
PREF_LOCALE
=
context
.
getResources
(
)
.
getString
(
R
.
string
.
pref_key_locale
)
;
}
return
PreferenceManager
.
getDefaultSharedPreferences
(
context
)
;
}
private
String
getPersistedLocale
(
Context
context
)
{
final
SharedPreferences
settings
=
getSharedPreferences
(
context
)
;
final
String
locale
=
settings
.
getString
(
PREF_LOCALE
"
"
)
;
if
(
"
"
.
equals
(
locale
)
)
{
return
null
;
}
return
locale
;
}
private
void
persistLocale
(
Context
context
String
localeCode
)
{
final
SharedPreferences
settings
=
getSharedPreferences
(
context
)
;
settings
.
edit
(
)
.
putString
(
PREF_LOCALE
localeCode
)
.
apply
(
)
;
}
public
Locale
getCurrentLocale
(
Context
context
)
{
if
(
currentLocale
!
=
null
)
{
return
currentLocale
;
}
final
String
current
=
getPersistedLocale
(
context
)
;
if
(
current
=
=
null
)
{
return
null
;
}
return
currentLocale
=
Locales
.
parseLocaleCode
(
current
)
;
}
private
String
updateLocale
(
Context
context
String
localeCode
)
{
final
Locale
defaultLocale
=
Locale
.
getDefault
(
)
;
Log
.
d
(
"
LOCALE
"
"
Trying
to
check
locale
"
)
;
if
(
defaultLocale
.
toString
(
)
.
equals
(
localeCode
)
)
{
Log
.
d
(
"
LOCALE
"
"
Early
return
"
)
;
return
null
;
}
final
Locale
locale
=
Locales
.
parseLocaleCode
(
localeCode
)
;
return
updateLocale
(
context
locale
)
;
}
private
String
updateLocale
(
Context
context
final
Locale
locale
)
{
if
(
Locale
.
getDefault
(
)
.
equals
(
locale
)
)
{
return
null
;
}
Locale
.
setDefault
(
locale
)
;
currentLocale
=
locale
;
updateConfiguration
(
context
locale
)
;
return
locale
.
toString
(
)
;
}
private
boolean
isMirroringSystemLocale
(
final
Context
context
)
{
return
getPersistedLocale
(
context
)
=
=
null
;
}
public
static
Collection
<
String
>
getPackagedLocaleTags
(
final
Context
context
)
{
return
Arrays
.
asList
(
new
String
[
]
{
"
en
-
US
"
"
ar
"
"
ast
"
"
az
"
"
bg
"
"
bn
-
BD
"
"
bn
-
IN
"
"
ca
"
"
cs
"
"
cy
"
"
de
"
"
el
"
"
eo
"
"
es
-
AR
"
"
es
-
CL
"
"
es
-
ES
"
"
es
-
MX
"
"
fa
"
"
fr
"
"
fy
-
NL
"
"
hi
"
"
hu
"
"
hy
-
AM
"
"
in
"
"
it
"
"
iw
"
"
ja
"
"
kab
"
"
ko
"
"
lo
"
"
nb
-
NO
"
"
nl
"
"
nn
-
NO
"
"
pl
"
"
pt
"
"
pt
-
BR
"
"
ro
"
"
ru
"
"
sk
"
"
sl
"
"
sq
"
"
sr
"
"
sv
-
SE
"
"
th
"
"
tr
"
"
uk
"
"
ur
"
"
zh
-
CN
"
"
zh
-
TW
"
}
)
;
}
public
static
String
getFallbackLocaleTag
(
)
{
return
FALLBACK_LOCALE_TAG
;
}
}
