package
org
.
mozilla
.
focus
.
locale
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
Configuration
;
import
android
.
content
.
res
.
Resources
;
import
java
.
util
.
Locale
;
public
class
Locales
{
public
static
String
getLanguage
(
final
Locale
locale
)
{
final
String
language
=
locale
.
getLanguage
(
)
;
if
(
language
.
equals
(
"
iw
"
)
)
{
return
"
he
"
;
}
if
(
language
.
equals
(
"
in
"
)
)
{
return
"
id
"
;
}
if
(
language
.
equals
(
"
ji
"
)
)
{
return
"
yi
"
;
}
return
language
;
}
public
static
String
getLanguageTag
(
final
Locale
locale
)
{
final
String
language
=
getLanguage
(
locale
)
;
final
String
country
=
locale
.
getCountry
(
)
;
if
(
country
.
equals
(
"
"
)
)
{
return
language
;
}
return
language
+
"
-
"
+
country
;
}
public
static
Locale
parseLocaleCode
(
final
String
localeCode
)
{
int
index
;
if
(
(
index
=
localeCode
.
indexOf
(
'
-
'
)
)
!
=
-
1
|
|
(
index
=
localeCode
.
indexOf
(
'
_
'
)
)
!
=
-
1
)
{
final
String
langCode
=
localeCode
.
substring
(
0
index
)
;
final
String
countryCode
=
localeCode
.
substring
(
index
+
1
)
;
return
new
Locale
(
langCode
countryCode
)
;
}
return
new
Locale
(
localeCode
)
;
}
public
static
Resources
getLocalizedResources
(
Context
context
)
{
final
Resources
currentResources
=
context
.
getResources
(
)
;
final
Locale
currentLocale
=
LocaleManager
.
getInstance
(
)
.
getCurrentLocale
(
context
)
;
final
Locale
viewLocale
=
currentResources
.
getConfiguration
(
)
.
locale
;
if
(
currentLocale
=
=
null
|
|
viewLocale
=
=
null
)
{
return
currentResources
;
}
if
(
currentLocale
.
toLanguageTag
(
)
.
equals
(
viewLocale
.
toLanguageTag
(
)
)
)
{
return
currentResources
;
}
final
Configuration
configuration
=
new
Configuration
(
currentResources
.
getConfiguration
(
)
)
;
configuration
.
setLocale
(
currentLocale
)
;
return
context
.
createConfigurationContext
(
configuration
)
.
getResources
(
)
;
}
}
