package
org
.
mozilla
.
focus
.
web
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
content
.
Context
;
import
android
.
content
.
pm
.
PackageManager
;
import
android
.
os
.
Build
;
import
android
.
os
.
StrictMode
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
import
android
.
webkit
.
CookieManager
;
import
android
.
webkit
.
WebSettings
;
import
android
.
webkit
.
WebStorage
;
import
android
.
webkit
.
WebView
;
import
org
.
jetbrains
.
annotations
.
NotNull
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
utils
.
Settings
;
import
org
.
mozilla
.
focus
.
webview
.
SystemWebView
;
import
org
.
mozilla
.
focus
.
webview
.
TrackingProtectionWebViewClient
;
public
class
ClassicWebViewProvider
implements
IWebViewProvider
{
public
void
preload
(
NonNull
final
Context
context
)
{
TrackingProtectionWebViewClient
.
triggerPreload
(
context
)
;
}
public
void
performCleanup
(
NonNull
final
Context
context
)
{
SystemWebView
.
deleteContentFromKnownLocations
(
context
)
;
}
public
void
performNewBrowserSessionCleanup
(
)
{
CookieManager
.
getInstance
(
)
.
removeAllCookies
(
null
)
;
final
StrictMode
.
ThreadPolicy
oldPolicy
=
StrictMode
.
allowThreadDiskWrites
(
)
;
WebStorage
.
getInstance
(
)
.
deleteAllData
(
)
;
StrictMode
.
setThreadPolicy
(
oldPolicy
)
;
}
NonNull
public
View
create
(
NonNull
Context
context
AttributeSet
attrs
)
{
final
SystemWebView
webkitView
=
new
SystemWebView
(
context
attrs
)
;
final
WebSettings
settings
=
webkitView
.
getSettings
(
)
;
setupView
(
webkitView
)
;
configureDefaultSettings
(
context
settings
)
;
applyAppSettings
(
context
settings
webkitView
)
;
return
webkitView
;
}
private
static
void
setupView
(
WebView
webView
)
{
webView
.
setVerticalScrollBarEnabled
(
true
)
;
webView
.
setHorizontalScrollBarEnabled
(
true
)
;
}
SuppressLint
(
"
SetJavaScriptEnabled
"
)
private
void
configureDefaultSettings
(
Context
context
WebSettings
settings
)
{
settings
.
setJavaScriptEnabled
(
true
)
;
settings
.
setDomStorageEnabled
(
true
)
;
settings
.
setBuiltInZoomControls
(
true
)
;
settings
.
setDisplayZoomControls
(
false
)
;
settings
.
setLoadWithOverviewMode
(
true
)
;
settings
.
setLayoutAlgorithm
(
WebSettings
.
LayoutAlgorithm
.
TEXT_AUTOSIZING
)
;
settings
.
setAllowFileAccess
(
false
)
;
settings
.
setAllowFileAccessFromFileURLs
(
false
)
;
settings
.
setAllowUniversalAccessFromFileURLs
(
false
)
;
final
String
appName
=
context
.
getResources
(
)
.
getString
(
R
.
string
.
useragent_appname
)
;
settings
.
setUserAgentString
(
buildUserAgentString
(
context
settings
appName
)
)
;
settings
.
setAllowContentAccess
(
false
)
;
settings
.
setAppCacheEnabled
(
false
)
;
settings
.
setDatabaseEnabled
(
false
)
;
settings
.
setJavaScriptCanOpenWindowsAutomatically
(
false
)
;
settings
.
setGeolocationEnabled
(
false
)
;
settings
.
setSaveFormData
(
false
)
;
settings
.
setSavePassword
(
false
)
;
}
Override
public
void
applyAppSettings
(
NotNull
Context
context
NotNull
WebSettings
webSettings
NotNull
SystemWebView
systemWebView
)
{
webSettings
.
setBlockNetworkImage
(
Settings
.
getInstance
(
context
)
.
shouldBlockImages
(
)
)
;
webSettings
.
setJavaScriptEnabled
(
!
Settings
.
getInstance
(
context
)
.
shouldBlockJavaScript
(
)
)
;
CookieManager
.
getInstance
(
)
.
setAcceptThirdPartyCookies
(
systemWebView
!
Settings
.
getInstance
(
context
)
.
shouldBlockThirdPartyCookies
(
)
)
;
CookieManager
.
getInstance
(
)
.
setAcceptCookie
(
!
Settings
.
getInstance
(
context
)
.
shouldBlockCookies
(
)
)
;
}
Override
SuppressLint
(
"
SetJavaScriptEnabled
"
)
public
void
disableBlocking
(
NotNull
WebSettings
webSettings
NotNull
SystemWebView
systemWebView
)
{
webSettings
.
setBlockNetworkImage
(
false
)
;
webSettings
.
setJavaScriptEnabled
(
true
)
;
CookieManager
.
getInstance
(
)
.
setAcceptThirdPartyCookies
(
systemWebView
true
)
;
CookieManager
.
getInstance
(
)
.
setAcceptCookie
(
true
)
;
}
public
void
requestDesktopSite
(
NonNull
WebSettings
settings
)
{
settings
.
setUserAgentString
(
toggleDesktopUA
(
settings
true
)
)
;
settings
.
setUseWideViewPort
(
true
)
;
}
public
void
requestMobileSite
(
NonNull
Context
context
NonNull
WebSettings
settings
)
{
settings
.
setUserAgentString
(
toggleDesktopUA
(
settings
false
)
)
;
settings
.
setUseWideViewPort
(
false
)
;
}
NonNull
public
String
getUABrowserString
(
NonNull
final
String
existingUAString
NonNull
final
String
focusToken
)
{
int
start
=
existingUAString
.
indexOf
(
"
AppleWebKit
"
)
;
if
(
start
=
=
-
1
)
{
start
=
existingUAString
.
indexOf
(
"
)
"
)
+
2
;
if
(
start
>
=
existingUAString
.
length
(
)
)
{
return
focusToken
;
}
}
final
String
[
]
tokens
=
existingUAString
.
substring
(
start
)
.
split
(
"
"
)
;
for
(
int
i
=
0
;
i
<
tokens
.
length
;
i
+
+
)
{
if
(
tokens
[
i
]
.
startsWith
(
"
Chrome
"
)
)
{
tokens
[
i
]
=
focusToken
+
"
"
+
tokens
[
i
]
;
return
TextUtils
.
join
(
"
"
tokens
)
;
}
}
return
TextUtils
.
join
(
"
"
tokens
)
+
"
"
+
focusToken
;
}
private
String
buildUserAgentString
(
final
Context
context
final
WebSettings
settings
final
String
appName
)
{
final
StringBuilder
uaBuilder
=
new
StringBuilder
(
)
;
uaBuilder
.
append
(
"
Mozilla
/
5
.
0
"
)
;
uaBuilder
.
append
(
"
(
Linux
;
Android
"
)
.
append
(
Build
.
VERSION
.
RELEASE
)
.
append
(
"
)
"
)
;
final
String
existingWebViewUA
=
settings
.
getUserAgentString
(
)
;
final
String
appVersion
;
try
{
appVersion
=
context
.
getPackageManager
(
)
.
getPackageInfo
(
context
.
getPackageName
(
)
0
)
.
versionName
;
}
catch
(
PackageManager
.
NameNotFoundException
e
)
{
throw
new
IllegalStateException
(
"
Unable
find
package
details
for
Focus
"
e
)
;
}
final
String
focusToken
=
appName
+
"
/
"
+
appVersion
;
uaBuilder
.
append
(
getUABrowserString
(
existingWebViewUA
focusToken
)
)
;
return
uaBuilder
.
toString
(
)
;
}
private
static
String
toggleDesktopUA
(
final
WebSettings
settings
final
boolean
requestDesktop
)
{
final
String
existingUAString
=
settings
.
getUserAgentString
(
)
;
if
(
requestDesktop
)
{
return
existingUAString
.
replace
(
"
Mobile
"
"
eliboM
"
)
.
replace
(
"
Android
"
"
diordnA
"
)
;
}
else
{
return
existingUAString
.
replace
(
"
eliboM
"
"
Mobile
"
)
.
replace
(
"
diordnA
"
"
Android
"
)
;
}
}
}
