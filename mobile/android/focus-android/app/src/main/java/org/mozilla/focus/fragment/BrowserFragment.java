package
org
.
mozilla
.
focus
.
fragment
;
import
android
.
Manifest
;
import
android
.
app
.
Activity
;
import
android
.
app
.
DownloadManager
;
import
android
.
app
.
PendingIntent
;
import
android
.
arch
.
lifecycle
.
Observer
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
content
.
IntentFilter
;
import
android
.
content
.
pm
.
ActivityInfo
;
import
android
.
content
.
pm
.
PackageManager
;
import
android
.
graphics
.
Color
;
import
android
.
graphics
.
drawable
.
Drawable
;
import
android
.
graphics
.
drawable
.
TransitionDrawable
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
Environment
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
design
.
widget
.
AppBarLayout
;
import
android
.
support
.
v4
.
app
.
DialogFragment
;
import
android
.
support
.
v4
.
app
.
Fragment
;
import
android
.
support
.
v4
.
app
.
FragmentManager
;
import
android
.
support
.
v4
.
content
.
ContextCompat
;
import
android
.
support
.
v4
.
widget
.
SwipeRefreshLayout
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
Log
;
import
android
.
view
.
LayoutInflater
;
import
android
.
view
.
View
;
import
android
.
view
.
ViewGroup
;
import
android
.
view
.
Window
;
import
android
.
view
.
WindowManager
;
import
android
.
webkit
.
CookieManager
;
import
android
.
widget
.
FrameLayout
;
import
android
.
widget
.
ImageButton
;
import
android
.
widget
.
ImageView
;
import
android
.
widget
.
TextView
;
import
android
.
widget
.
Toast
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
activity
.
InfoActivity
;
import
org
.
mozilla
.
focus
.
activity
.
InstallFirefoxActivity
;
import
org
.
mozilla
.
focus
.
animation
.
TransitionDrawableGroup
;
import
org
.
mozilla
.
focus
.
architecture
.
NonNullObserver
;
import
org
.
mozilla
.
focus
.
broadcastreceiver
.
DownloadBroadcastReceiver
;
import
org
.
mozilla
.
focus
.
customtabs
.
CustomTabConfig
;
import
org
.
mozilla
.
focus
.
locale
.
LocaleAwareAppCompatActivity
;
import
org
.
mozilla
.
focus
.
menu
.
browser
.
BrowserMenu
;
import
org
.
mozilla
.
focus
.
menu
.
context
.
WebContextMenu
;
import
org
.
mozilla
.
focus
.
open
.
OpenWithFragment
;
import
org
.
mozilla
.
focus
.
session
.
NullSession
;
import
org
.
mozilla
.
focus
.
session
.
Session
;
import
org
.
mozilla
.
focus
.
session
.
SessionCallbackProxy
;
import
org
.
mozilla
.
focus
.
session
.
SessionManager
;
import
org
.
mozilla
.
focus
.
session
.
Source
;
import
org
.
mozilla
.
focus
.
session
.
ui
.
SessionsSheetFragment
;
import
org
.
mozilla
.
focus
.
telemetry
.
TelemetryWrapper
;
import
org
.
mozilla
.
focus
.
utils
.
Browsers
;
import
org
.
mozilla
.
focus
.
utils
.
ColorUtils
;
import
org
.
mozilla
.
focus
.
utils
.
DownloadUtils
;
import
org
.
mozilla
.
focus
.
utils
.
DrawableUtils
;
import
org
.
mozilla
.
focus
.
utils
.
Features
;
import
org
.
mozilla
.
focus
.
utils
.
UrlUtils
;
import
org
.
mozilla
.
focus
.
web
.
Download
;
import
org
.
mozilla
.
focus
.
web
.
IWebView
;
import
org
.
mozilla
.
focus
.
widget
.
AnimatedProgressBar
;
import
org
.
mozilla
.
focus
.
widget
.
FloatingEraseButton
;
import
org
.
mozilla
.
focus
.
widget
.
FloatingSessionsButton
;
import
java
.
lang
.
ref
.
WeakReference
;
import
java
.
util
.
List
;
public
class
BrowserFragment
extends
WebFragment
implements
View
.
OnClickListener
DownloadDialogFragment
.
DownloadDialogListener
{
public
static
final
String
FRAGMENT_TAG
=
"
browser
"
;
private
static
int
REQUEST_CODE_STORAGE_PERMISSION
=
101
;
private
static
final
int
ANIMATION_DURATION
=
300
;
private
static
final
String
ARGUMENT_SESSION_UUID
=
"
sessionUUID
"
;
private
static
final
String
RESTORE_KEY_DOWNLOAD
=
"
download
"
;
public
static
BrowserFragment
createForSession
(
Session
session
)
{
final
Bundle
arguments
=
new
Bundle
(
)
;
arguments
.
putString
(
ARGUMENT_SESSION_UUID
session
.
getUUID
(
)
)
;
BrowserFragment
fragment
=
new
BrowserFragment
(
)
;
fragment
.
setArguments
(
arguments
)
;
return
fragment
;
}
private
Download
pendingDownload
;
private
TransitionDrawableGroup
backgroundTransitionGroup
;
private
TextView
urlView
;
private
AnimatedProgressBar
progressView
;
private
FrameLayout
blockView
;
private
ImageView
lockView
;
private
ImageButton
menuView
;
private
View
statusBar
;
private
View
urlBar
;
private
SwipeRefreshLayout
swipeRefresh
;
private
WeakReference
<
BrowserMenu
>
menuWeakReference
=
new
WeakReference
<
>
(
null
)
;
private
ViewGroup
videoContainer
;
private
View
browserContainer
;
private
View
forwardButton
;
private
View
backButton
;
private
View
refreshButton
;
private
View
stopButton
;
private
IWebView
.
FullscreenCallback
fullscreenCallback
;
private
DownloadManager
manager
;
private
DownloadBroadcastReceiver
downloadBroadcastReceiver
;
private
SessionManager
sessionManager
;
private
Session
session
;
public
BrowserFragment
(
)
{
sessionManager
=
SessionManager
.
getInstance
(
)
;
}
Override
public
void
onCreate
(
Nullable
Bundle
savedInstanceState
)
{
super
.
onCreate
(
savedInstanceState
)
;
final
String
sessionUUID
=
getArguments
(
)
.
getString
(
ARGUMENT_SESSION_UUID
)
;
if
(
sessionUUID
=
=
null
)
{
throw
new
IllegalAccessError
(
"
No
session
exists
"
)
;
}
session
=
sessionManager
.
hasSessionWithUUID
(
sessionUUID
)
?
sessionManager
.
getSessionByUUID
(
sessionUUID
)
:
new
NullSession
(
)
;
session
.
getBlockedTrackers
(
)
.
observe
(
this
new
Observer
<
Integer
>
(
)
{
Override
public
void
onChanged
(
Nullable
Integer
blockedTrackers
)
{
if
(
menuWeakReference
=
=
null
)
{
return
;
}
final
BrowserMenu
menu
=
menuWeakReference
.
get
(
)
;
if
(
menu
!
=
null
)
{
menu
.
updateTrackers
(
blockedTrackers
)
;
}
}
}
)
;
}
public
Session
getSession
(
)
{
return
session
;
}
Override
public
String
getInitialUrl
(
)
{
return
session
.
getUrl
(
)
.
getValue
(
)
;
}
Override
public
void
onPause
(
)
{
super
.
onPause
(
)
;
getContext
(
)
.
unregisterReceiver
(
downloadBroadcastReceiver
)
;
final
BrowserMenu
menu
=
menuWeakReference
.
get
(
)
;
if
(
menu
!
=
null
)
{
menu
.
dismiss
(
)
;
menuWeakReference
.
clear
(
)
;
}
}
Override
public
View
inflateLayout
(
LayoutInflater
inflater
Nullable
ViewGroup
container
Nullable
Bundle
savedInstanceState
)
{
if
(
savedInstanceState
!
=
null
&
&
savedInstanceState
.
containsKey
(
RESTORE_KEY_DOWNLOAD
)
)
{
pendingDownload
=
savedInstanceState
.
getParcelable
(
RESTORE_KEY_DOWNLOAD
)
;
}
final
View
view
=
inflater
.
inflate
(
R
.
layout
.
fragment_browser
container
false
)
;
videoContainer
=
(
ViewGroup
)
view
.
findViewById
(
R
.
id
.
video_container
)
;
browserContainer
=
view
.
findViewById
(
R
.
id
.
browser_container
)
;
urlBar
=
view
.
findViewById
(
R
.
id
.
urlbar
)
;
statusBar
=
view
.
findViewById
(
R
.
id
.
status_bar_background
)
;
urlView
=
(
TextView
)
view
.
findViewById
(
R
.
id
.
display_url
)
;
progressView
=
(
AnimatedProgressBar
)
view
.
findViewById
(
R
.
id
.
progress
)
;
swipeRefresh
=
(
SwipeRefreshLayout
)
view
.
findViewById
(
R
.
id
.
swipe_refresh
)
;
swipeRefresh
.
setColorSchemeResources
(
R
.
color
.
colorAccent
)
;
swipeRefresh
.
setEnabled
(
Features
.
SWIPE_TO_REFRESH
)
;
swipeRefresh
.
setOnRefreshListener
(
new
SwipeRefreshLayout
.
OnRefreshListener
(
)
{
Override
public
void
onRefresh
(
)
{
reload
(
)
;
TelemetryWrapper
.
swipeReloadEvent
(
)
;
}
}
)
;
session
.
getUrl
(
)
.
observe
(
this
new
Observer
<
String
>
(
)
{
Override
public
void
onChanged
(
Nullable
String
url
)
{
urlView
.
setText
(
UrlUtils
.
stripUserInfo
(
url
)
)
;
}
}
)
;
setBlockingEnabled
(
session
.
isBlockingEnabled
(
)
)
;
session
.
getLoading
(
)
.
observe
(
this
new
NonNullObserver
<
Boolean
>
(
)
{
Override
public
void
onValueChanged
(
NonNull
Boolean
loading
)
{
if
(
loading
)
{
backgroundTransitionGroup
.
resetTransition
(
)
;
progressView
.
setProgress
(
5
)
;
progressView
.
setVisibility
(
View
.
VISIBLE
)
;
}
else
{
if
(
progressView
.
getVisibility
(
)
=
=
View
.
VISIBLE
)
{
backgroundTransitionGroup
.
startTransition
(
ANIMATION_DURATION
)
;
progressView
.
setProgress
(
progressView
.
getMax
(
)
)
;
progressView
.
setVisibility
(
View
.
GONE
)
;
}
swipeRefresh
.
setRefreshing
(
false
)
;
}
updateBlockingBadging
(
loading
|
|
session
.
isBlockingEnabled
(
)
)
;
updateToolbarButtonStates
(
loading
)
;
final
BrowserMenu
menu
=
menuWeakReference
.
get
(
)
;
if
(
menu
!
=
null
)
{
menu
.
updateLoading
(
loading
)
;
}
}
}
)
;
if
(
(
refreshButton
=
view
.
findViewById
(
R
.
id
.
refresh
)
)
!
=
null
)
{
refreshButton
.
setOnClickListener
(
this
)
;
}
if
(
(
stopButton
=
view
.
findViewById
(
R
.
id
.
stop
)
)
!
=
null
)
{
stopButton
.
setOnClickListener
(
this
)
;
}
if
(
(
forwardButton
=
view
.
findViewById
(
R
.
id
.
forward
)
)
!
=
null
)
{
forwardButton
.
setOnClickListener
(
this
)
;
}
if
(
(
backButton
=
view
.
findViewById
(
R
.
id
.
back
)
)
!
=
null
)
{
backButton
.
setOnClickListener
(
this
)
;
}
final
ImageView
blockIcon
=
(
ImageView
)
view
.
findViewById
(
R
.
id
.
block_image
)
;
blockIcon
.
setImageResource
(
R
.
drawable
.
ic_tracking_protection_disabled
)
;
blockView
=
(
FrameLayout
)
view
.
findViewById
(
R
.
id
.
block
)
;
lockView
=
(
ImageView
)
view
.
findViewById
(
R
.
id
.
lock
)
;
session
.
getSecure
(
)
.
observe
(
this
new
Observer
<
Boolean
>
(
)
{
Override
public
void
onChanged
(
Boolean
secure
)
{
lockView
.
setVisibility
(
secure
?
View
.
VISIBLE
:
View
.
GONE
)
;
}
}
)
;
session
.
getProgress
(
)
.
observe
(
this
new
Observer
<
Integer
>
(
)
{
Override
public
void
onChanged
(
Integer
progress
)
{
progressView
.
setProgress
(
progress
)
;
}
}
)
;
menuView
=
(
ImageButton
)
view
.
findViewById
(
R
.
id
.
menuView
)
;
menuView
.
setOnClickListener
(
this
)
;
if
(
session
.
isCustomTab
(
)
)
{
initialiseCustomTabUi
(
view
)
;
}
else
{
initialiseNormalBrowserUi
(
view
)
;
}
return
view
;
}
private
void
initialiseNormalBrowserUi
(
final
NonNull
View
view
)
{
final
FloatingEraseButton
eraseButton
=
view
.
findViewById
(
R
.
id
.
erase
)
;
eraseButton
.
setOnClickListener
(
this
)
;
urlView
.
setOnClickListener
(
this
)
;
final
FloatingSessionsButton
tabsButton
=
view
.
findViewById
(
R
.
id
.
tabs
)
;
tabsButton
.
setOnClickListener
(
this
)
;
sessionManager
.
getSessions
(
)
.
observe
(
this
new
NonNullObserver
<
List
<
Session
>
>
(
)
{
Override
protected
void
onValueChanged
(
NonNull
List
<
Session
>
sessions
)
{
tabsButton
.
updateSessionsCount
(
sessions
.
size
(
)
)
;
eraseButton
.
updateSessionsCount
(
sessions
.
size
(
)
)
;
}
}
)
;
}
private
void
initialiseCustomTabUi
(
final
NonNull
View
view
)
{
final
CustomTabConfig
customTabConfig
=
session
.
getCustomTabConfig
(
)
;
final
FloatingEraseButton
erase
=
view
.
findViewById
(
R
.
id
.
erase
)
;
final
ViewGroup
eraseContainer
=
(
ViewGroup
)
erase
.
getParent
(
)
;
eraseContainer
.
removeView
(
erase
)
;
final
FloatingSessionsButton
sessions
=
view
.
findViewById
(
R
.
id
.
tabs
)
;
eraseContainer
.
removeView
(
sessions
)
;
final
int
textColor
;
if
(
customTabConfig
.
toolbarColor
!
=
null
)
{
urlBar
.
setBackgroundColor
(
customTabConfig
.
toolbarColor
)
;
textColor
=
ColorUtils
.
getReadableTextColor
(
customTabConfig
.
toolbarColor
)
;
urlView
.
setTextColor
(
textColor
)
;
}
else
{
textColor
=
Color
.
WHITE
;
}
final
ImageView
closeButton
=
(
ImageView
)
view
.
findViewById
(
R
.
id
.
customtab_close
)
;
closeButton
.
setVisibility
(
View
.
VISIBLE
)
;
closeButton
.
setOnClickListener
(
this
)
;
if
(
customTabConfig
.
closeButtonIcon
!
=
null
)
{
closeButton
.
setImageBitmap
(
customTabConfig
.
closeButtonIcon
)
;
}
else
{
final
Drawable
closeIcon
=
DrawableUtils
.
loadAndTintDrawable
(
getContext
(
)
R
.
drawable
.
ic_close
textColor
)
;
closeButton
.
setImageDrawable
(
closeIcon
)
;
}
if
(
customTabConfig
.
disableUrlbarHiding
)
{
AppBarLayout
.
LayoutParams
params
=
(
AppBarLayout
.
LayoutParams
)
urlBar
.
getLayoutParams
(
)
;
params
.
setScrollFlags
(
0
)
;
}
if
(
customTabConfig
.
actionButtonConfig
!
=
null
)
{
final
ImageButton
actionButton
=
(
ImageButton
)
view
.
findViewById
(
R
.
id
.
customtab_actionbutton
)
;
actionButton
.
setVisibility
(
View
.
VISIBLE
)
;
actionButton
.
setImageBitmap
(
customTabConfig
.
actionButtonConfig
.
icon
)
;
actionButton
.
setContentDescription
(
customTabConfig
.
actionButtonConfig
.
description
)
;
final
PendingIntent
pendingIntent
=
customTabConfig
.
actionButtonConfig
.
pendingIntent
;
actionButton
.
setOnClickListener
(
new
View
.
OnClickListener
(
)
{
Override
public
void
onClick
(
View
v
)
{
try
{
final
Intent
intent
=
new
Intent
(
)
;
intent
.
setData
(
Uri
.
parse
(
getUrl
(
)
)
)
;
pendingIntent
.
send
(
getContext
(
)
0
intent
)
;
}
catch
(
PendingIntent
.
CanceledException
e
)
{
}
TelemetryWrapper
.
customTabActionButtonEvent
(
)
;
}
}
)
;
}
final
Drawable
lockIcon
=
DrawableUtils
.
loadAndTintDrawable
(
getContext
(
)
R
.
drawable
.
ic_lock
textColor
)
;
lockView
.
setImageDrawable
(
lockIcon
)
;
final
Drawable
menuIcon
=
DrawableUtils
.
loadAndTintDrawable
(
getContext
(
)
R
.
drawable
.
ic_menu
textColor
)
;
menuView
.
setImageDrawable
(
menuIcon
)
;
}
Override
public
void
onSaveInstanceState
(
Bundle
outState
)
{
super
.
onSaveInstanceState
(
outState
)
;
if
(
pendingDownload
!
=
null
)
{
outState
.
putParcelable
(
RESTORE_KEY_DOWNLOAD
pendingDownload
)
;
}
}
Override
public
IWebView
.
Callback
createCallback
(
)
{
return
new
SessionCallbackProxy
(
session
new
IWebView
.
Callback
(
)
{
Override
public
void
onPageStarted
(
final
String
url
)
{
}
Override
public
void
onPageFinished
(
boolean
isSecure
)
{
}
Override
public
void
onURLChanged
(
final
String
url
)
{
}
Override
public
void
onRequest
(
boolean
isTriggeredByUserGesture
)
{
}
Override
public
void
onProgress
(
int
progress
)
{
}
Override
public
void
countBlockedTracker
(
)
{
}
Override
public
void
resetBlockedTrackers
(
)
{
}
Override
public
void
onBlockingStateChanged
(
boolean
isBlockingEnabled
)
{
}
Override
public
void
onLongPress
(
final
IWebView
.
HitTarget
hitTarget
)
{
WebContextMenu
.
show
(
getActivity
(
)
this
hitTarget
)
;
}
Override
public
void
onEnterFullScreen
(
NonNull
final
IWebView
.
FullscreenCallback
callback
Nullable
View
view
)
{
fullscreenCallback
=
callback
;
if
(
view
!
=
null
)
{
browserContainer
.
setVisibility
(
View
.
INVISIBLE
)
;
final
FrameLayout
.
LayoutParams
params
=
new
FrameLayout
.
LayoutParams
(
ViewGroup
.
LayoutParams
.
MATCH_PARENT
ViewGroup
.
LayoutParams
.
MATCH_PARENT
)
;
videoContainer
.
addView
(
view
params
)
;
videoContainer
.
setVisibility
(
View
.
VISIBLE
)
;
switchToImmersiveMode
(
)
;
}
}
Override
public
void
onExitFullScreen
(
)
{
videoContainer
.
removeAllViews
(
)
;
videoContainer
.
setVisibility
(
View
.
GONE
)
;
browserContainer
.
setVisibility
(
View
.
VISIBLE
)
;
exitImmersiveModeIfNeeded
(
)
;
if
(
fullscreenCallback
!
=
null
)
{
fullscreenCallback
.
fullScreenExited
(
)
;
fullscreenCallback
=
null
;
}
}
Override
public
void
onDownloadStart
(
Download
download
)
{
if
(
PackageManager
.
PERMISSION_GRANTED
=
=
ContextCompat
.
checkSelfPermission
(
getContext
(
)
Manifest
.
permission
.
WRITE_EXTERNAL_STORAGE
)
)
{
if
(
!
isDownloadFromLongPressImage
(
download
)
)
{
showDownloadPromptDialog
(
download
)
;
}
else
{
queueDownload
(
download
)
;
}
}
else
{
final
Activity
activity
=
getActivity
(
)
;
if
(
activity
=
=
null
)
{
return
;
}
pendingDownload
=
download
;
requestPermissions
(
new
String
[
]
{
Manifest
.
permission
.
WRITE_EXTERNAL_STORAGE
}
REQUEST_CODE_STORAGE_PERMISSION
)
;
}
}
}
)
;
}
private
boolean
isDownloadFromLongPressImage
(
Download
download
)
{
return
download
.
getDestinationDirectory
(
)
.
equals
(
Environment
.
DIRECTORY_PICTURES
)
;
}
private
void
switchToImmersiveMode
(
)
{
final
Activity
activity
=
getActivity
(
)
;
if
(
activity
=
=
null
)
{
return
;
}
final
Window
window
=
activity
.
getWindow
(
)
;
window
.
addFlags
(
WindowManager
.
LayoutParams
.
FLAG_KEEP_SCREEN_ON
)
;
window
.
getDecorView
(
)
.
setSystemUiVisibility
(
View
.
SYSTEM_UI_FLAG_LAYOUT_STABLE
|
View
.
SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
|
View
.
SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
|
View
.
SYSTEM_UI_FLAG_HIDE_NAVIGATION
|
View
.
SYSTEM_UI_FLAG_FULLSCREEN
|
View
.
SYSTEM_UI_FLAG_IMMERSIVE_STICKY
)
;
}
private
void
exitImmersiveModeIfNeeded
(
)
{
final
Activity
activity
=
getActivity
(
)
;
if
(
activity
=
=
null
)
{
return
;
}
if
(
(
WindowManager
.
LayoutParams
.
FLAG_KEEP_SCREEN_ON
&
activity
.
getWindow
(
)
.
getAttributes
(
)
.
flags
)
=
=
0
)
{
return
;
}
final
Window
window
=
activity
.
getWindow
(
)
;
window
.
clearFlags
(
WindowManager
.
LayoutParams
.
FLAG_KEEP_SCREEN_ON
)
;
window
.
getDecorView
(
)
.
setSystemUiVisibility
(
View
.
SYSTEM_UI_FLAG_LAYOUT_STABLE
|
View
.
SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
)
;
}
Override
public
void
onDestroy
(
)
{
super
.
onDestroy
(
)
;
exitImmersiveModeIfNeeded
(
)
;
}
Override
public
void
onRequestPermissionsResult
(
int
requestCode
NonNull
String
[
]
permissions
NonNull
int
[
]
grantResults
)
{
if
(
requestCode
!
=
REQUEST_CODE_STORAGE_PERMISSION
)
{
return
;
}
if
(
grantResults
.
length
<
=
0
|
|
grantResults
[
0
]
!
=
PackageManager
.
PERMISSION_GRANTED
)
{
pendingDownload
=
null
;
}
}
void
showDownloadPromptDialog
(
Download
download
)
{
final
FragmentManager
fragmentManager
=
getFragmentManager
(
)
;
if
(
fragmentManager
.
findFragmentByTag
(
DownloadDialogFragment
.
FRAGMENT_TAG
)
!
=
null
)
{
return
;
}
final
DialogFragment
downloadDialogFragment
=
DownloadDialogFragment
.
newInstance
(
download
)
;
downloadDialogFragment
.
setTargetFragment
(
BrowserFragment
.
this
300
)
;
try
{
downloadDialogFragment
.
show
(
fragmentManager
DownloadDialogFragment
.
FRAGMENT_TAG
)
;
}
catch
(
IllegalStateException
e
)
{
}
}
void
showAddToHomescreenDialog
(
String
url
String
title
)
{
final
FragmentManager
fragmentManager
=
getFragmentManager
(
)
;
if
(
fragmentManager
.
findFragmentByTag
(
AddToHomescreenDialogFragment
.
FRAGMENT_TAG
)
!
=
null
)
{
return
;
}
final
AddToHomescreenDialogFragment
addToHomescreenDialogFragment
=
AddToHomescreenDialogFragment
.
newInstance
(
url
title
session
.
isBlockingEnabled
(
)
)
;
addToHomescreenDialogFragment
.
setTargetFragment
(
BrowserFragment
.
this
300
)
;
try
{
addToHomescreenDialogFragment
.
show
(
fragmentManager
AddToHomescreenDialogFragment
.
FRAGMENT_TAG
)
;
}
catch
(
IllegalStateException
e
)
{
}
}
Override
public
void
onFinishDownloadDialog
(
Download
download
boolean
shouldDownload
)
{
if
(
shouldDownload
)
{
queueDownload
(
download
)
;
}
}
Override
public
void
onCreateViewCalled
(
)
{
manager
=
(
DownloadManager
)
getContext
(
)
.
getSystemService
(
Context
.
DOWNLOAD_SERVICE
)
;
downloadBroadcastReceiver
=
new
DownloadBroadcastReceiver
(
browserContainer
manager
)
;
}
Override
public
void
onResume
(
)
{
super
.
onResume
(
)
;
final
IntentFilter
filter
=
new
IntentFilter
(
DownloadManager
.
ACTION_DOWNLOAD_COMPLETE
)
;
getContext
(
)
.
registerReceiver
(
downloadBroadcastReceiver
filter
)
;
if
(
pendingDownload
!
=
null
&
&
PackageManager
.
PERMISSION_GRANTED
=
=
ContextCompat
.
checkSelfPermission
(
getContext
(
)
Manifest
.
permission
.
WRITE_EXTERNAL_STORAGE
)
)
{
showDownloadPromptDialog
(
pendingDownload
)
;
pendingDownload
=
null
;
}
}
private
void
queueDownload
(
Download
download
)
{
if
(
download
=
=
null
)
{
return
;
}
final
Context
context
=
getContext
(
)
;
if
(
context
=
=
null
)
{
return
;
}
final
String
cookie
=
CookieManager
.
getInstance
(
)
.
getCookie
(
download
.
getUrl
(
)
)
;
final
String
fileName
=
DownloadUtils
.
guessFileName
(
download
)
;
final
DownloadManager
.
Request
request
=
new
DownloadManager
.
Request
(
Uri
.
parse
(
download
.
getUrl
(
)
)
)
.
addRequestHeader
(
"
User
-
Agent
"
download
.
getUserAgent
(
)
)
.
addRequestHeader
(
"
Cookie
"
cookie
)
.
addRequestHeader
(
"
Referer
"
getUrl
(
)
)
.
setNotificationVisibility
(
DownloadManager
.
Request
.
VISIBILITY_VISIBLE_NOTIFY_COMPLETED
)
.
setMimeType
(
download
.
getMimeType
(
)
)
;
try
{
request
.
setDestinationInExternalPublicDir
(
download
.
getDestinationDirectory
(
)
fileName
)
;
}
catch
(
IllegalStateException
e
)
{
Log
.
e
(
FRAGMENT_TAG
"
Cannot
create
download
directory
"
)
;
return
;
}
request
.
allowScanningByMediaScanner
(
)
;
try
{
long
downloadReference
=
manager
.
enqueue
(
request
)
;
downloadBroadcastReceiver
.
addQueuedDownload
(
downloadReference
)
;
}
catch
(
RuntimeException
e
)
{
Log
.
e
(
FRAGMENT_TAG
"
Download
failed
:
"
+
e
)
;
}
}
public
boolean
onBackPressed
(
)
{
if
(
canGoBack
(
)
)
{
goBack
(
)
;
}
else
{
if
(
session
.
getSource
(
)
=
=
Source
.
VIEW
|
|
session
.
getSource
(
)
=
=
Source
.
CUSTOM_TAB
)
{
TelemetryWrapper
.
eraseBackToAppEvent
(
)
;
erase
(
)
;
if
(
!
SessionManager
.
getInstance
(
)
.
hasSession
(
)
)
{
getActivity
(
)
.
finishAndRemoveTask
(
)
;
}
else
{
getActivity
(
)
.
finish
(
)
;
}
Toast
.
makeText
(
getContext
(
)
R
.
string
.
feedback_erase
Toast
.
LENGTH_SHORT
)
.
show
(
)
;
}
else
{
TelemetryWrapper
.
eraseBackToHomeEvent
(
)
;
erase
(
)
;
}
}
return
true
;
}
public
void
erase
(
)
{
final
IWebView
webView
=
getWebView
(
)
;
if
(
webView
!
=
null
)
{
webView
.
cleanup
(
)
;
}
SessionManager
.
getInstance
(
)
.
removeCurrentSession
(
)
;
}
Override
public
void
onClick
(
View
view
)
{
switch
(
view
.
getId
(
)
)
{
case
R
.
id
.
menuView
:
BrowserMenu
menu
=
new
BrowserMenu
(
getActivity
(
)
this
session
.
getCustomTabConfig
(
)
)
;
menu
.
show
(
menuView
)
;
menuWeakReference
=
new
WeakReference
<
>
(
menu
)
;
break
;
case
R
.
id
.
display_url
:
final
Fragment
urlFragment
=
UrlInputFragment
.
createWithSession
(
session
urlView
)
;
getActivity
(
)
.
getSupportFragmentManager
(
)
.
beginTransaction
(
)
.
add
(
R
.
id
.
container
urlFragment
UrlInputFragment
.
FRAGMENT_TAG
)
.
commit
(
)
;
break
;
case
R
.
id
.
erase
:
{
TelemetryWrapper
.
eraseEvent
(
)
;
erase
(
)
;
break
;
}
case
R
.
id
.
tabs
:
getActivity
(
)
.
getSupportFragmentManager
(
)
.
beginTransaction
(
)
.
add
(
R
.
id
.
container
new
SessionsSheetFragment
(
)
SessionsSheetFragment
.
FRAGMENT_TAG
)
.
commit
(
)
;
TelemetryWrapper
.
openTabsTrayEvent
(
)
;
break
;
case
R
.
id
.
back
:
{
goBack
(
)
;
break
;
}
case
R
.
id
.
forward
:
{
final
IWebView
webView
=
getWebView
(
)
;
if
(
webView
!
=
null
)
{
webView
.
goForward
(
)
;
}
break
;
}
case
R
.
id
.
refresh
:
{
reload
(
)
;
TelemetryWrapper
.
menuReloadEvent
(
)
;
break
;
}
case
R
.
id
.
stop
:
{
final
IWebView
webView
=
getWebView
(
)
;
if
(
webView
!
=
null
)
{
webView
.
stopLoading
(
)
;
}
break
;
}
case
R
.
id
.
share
:
{
final
String
url
=
getUrl
(
)
;
final
Intent
shareIntent
=
new
Intent
(
Intent
.
ACTION_SEND
)
;
shareIntent
.
setType
(
"
text
/
plain
"
)
;
shareIntent
.
putExtra
(
Intent
.
EXTRA_TEXT
url
)
;
final
IWebView
webView
=
getWebView
(
)
;
if
(
webView
!
=
null
)
{
final
String
contentUrl
=
webView
.
getUrl
(
)
;
if
(
contentUrl
!
=
null
&
&
contentUrl
.
equals
(
url
)
)
{
final
String
contentTitle
=
webView
.
getTitle
(
)
;
shareIntent
.
putExtra
(
Intent
.
EXTRA_SUBJECT
contentTitle
)
;
}
}
startActivity
(
Intent
.
createChooser
(
shareIntent
getString
(
R
.
string
.
share_dialog_title
)
)
)
;
TelemetryWrapper
.
shareEvent
(
)
;
break
;
}
case
R
.
id
.
settings
:
(
(
LocaleAwareAppCompatActivity
)
getActivity
(
)
)
.
openPreferences
(
)
;
break
;
case
R
.
id
.
open_default
:
{
final
Browsers
browsers
=
new
Browsers
(
getContext
(
)
getUrl
(
)
)
;
final
ActivityInfo
defaultBrowser
=
browsers
.
getDefaultBrowser
(
)
;
if
(
defaultBrowser
=
=
null
)
{
throw
new
IllegalStateException
(
"
<
Open
with
Default
>
was
shown
when
no
default
browser
is
set
"
)
;
}
final
Intent
intent
=
new
Intent
(
Intent
.
ACTION_VIEW
Uri
.
parse
(
getUrl
(
)
)
)
;
intent
.
setPackage
(
defaultBrowser
.
packageName
)
;
startActivity
(
intent
)
;
if
(
browsers
.
isFirefoxDefaultBrowser
(
)
)
{
TelemetryWrapper
.
openFirefoxEvent
(
)
;
}
else
{
TelemetryWrapper
.
openDefaultAppEvent
(
)
;
}
break
;
}
case
R
.
id
.
open_select_browser
:
{
final
Browsers
browsers
=
new
Browsers
(
getContext
(
)
getUrl
(
)
)
;
final
ActivityInfo
[
]
apps
=
browsers
.
getInstalledBrowsers
(
)
;
final
ActivityInfo
store
=
browsers
.
hasFirefoxBrandedBrowserInstalled
(
)
?
null
:
InstallFirefoxActivity
.
resolveAppStore
(
getContext
(
)
)
;
final
OpenWithFragment
fragment
=
OpenWithFragment
.
newInstance
(
apps
getUrl
(
)
store
)
;
fragment
.
show
(
getFragmentManager
(
)
OpenWithFragment
.
FRAGMENT_TAG
)
;
TelemetryWrapper
.
openSelectionEvent
(
)
;
break
;
}
case
R
.
id
.
customtab_close
:
{
erase
(
)
;
getActivity
(
)
.
finish
(
)
;
TelemetryWrapper
.
closeCustomTabEvent
(
)
;
break
;
}
case
R
.
id
.
help
:
Intent
helpIntent
=
InfoActivity
.
getHelpIntent
(
getActivity
(
)
)
;
startActivity
(
helpIntent
)
;
break
;
case
R
.
id
.
help_trackers
:
Intent
trackerHelpIntent
=
InfoActivity
.
getTrackerHelpIntent
(
getActivity
(
)
)
;
startActivity
(
trackerHelpIntent
)
;
break
;
case
R
.
id
.
add_to_homescreen
:
final
IWebView
webView
=
getWebView
(
)
;
if
(
webView
=
=
null
)
{
break
;
}
final
String
url
=
webView
.
getUrl
(
)
;
final
String
title
=
webView
.
getTitle
(
)
;
showAddToHomescreenDialog
(
url
title
)
;
break
;
default
:
throw
new
IllegalArgumentException
(
"
Unhandled
menu
item
in
BrowserFragment
"
)
;
}
}
private
void
updateToolbarButtonStates
(
boolean
isLoading
)
{
if
(
forwardButton
=
=
null
|
|
backButton
=
=
null
|
|
refreshButton
=
=
null
|
|
stopButton
=
=
null
)
{
return
;
}
final
IWebView
webView
=
getWebView
(
)
;
if
(
webView
=
=
null
)
{
return
;
}
final
boolean
canGoForward
=
webView
.
canGoForward
(
)
;
final
boolean
canGoBack
=
webView
.
canGoBack
(
)
;
forwardButton
.
setEnabled
(
canGoForward
)
;
forwardButton
.
setAlpha
(
canGoForward
?
1
.
0f
:
0
.
5f
)
;
backButton
.
setEnabled
(
canGoBack
)
;
backButton
.
setAlpha
(
canGoBack
?
1
.
0f
:
0
.
5f
)
;
refreshButton
.
setVisibility
(
isLoading
?
View
.
GONE
:
View
.
VISIBLE
)
;
stopButton
.
setVisibility
(
isLoading
?
View
.
VISIBLE
:
View
.
GONE
)
;
}
NonNull
public
String
getUrl
(
)
{
return
urlView
.
getText
(
)
.
toString
(
)
;
}
public
boolean
canGoForward
(
)
{
final
IWebView
webView
=
getWebView
(
)
;
return
webView
!
=
null
&
&
webView
.
canGoForward
(
)
;
}
public
boolean
canGoBack
(
)
{
final
IWebView
webView
=
getWebView
(
)
;
return
webView
!
=
null
&
&
webView
.
canGoBack
(
)
;
}
public
void
goBack
(
)
{
final
IWebView
webView
=
getWebView
(
)
;
if
(
webView
!
=
null
)
{
webView
.
goBack
(
)
;
}
}
public
void
loadUrl
(
final
String
url
)
{
final
IWebView
webView
=
getWebView
(
)
;
if
(
webView
!
=
null
&
&
!
TextUtils
.
isEmpty
(
url
)
)
{
webView
.
loadUrl
(
url
)
;
}
}
public
void
reload
(
)
{
final
IWebView
webView
=
getWebView
(
)
;
if
(
webView
!
=
null
)
{
webView
.
reload
(
)
;
}
}
public
void
setBlockingEnabled
(
boolean
enabled
)
{
final
IWebView
webView
=
getWebView
(
)
;
if
(
webView
!
=
null
)
{
webView
.
setBlockingEnabled
(
enabled
)
;
}
statusBar
.
setBackgroundResource
(
enabled
?
R
.
drawable
.
animated_background
:
R
.
drawable
.
animated_background_disabled
)
;
if
(
!
session
.
isCustomTab
(
)
)
{
urlBar
.
setBackgroundResource
(
enabled
?
R
.
drawable
.
animated_background
:
R
.
drawable
.
animated_background_disabled
)
;
backgroundTransitionGroup
=
new
TransitionDrawableGroup
(
(
TransitionDrawable
)
urlBar
.
getBackground
(
)
(
TransitionDrawable
)
statusBar
.
getBackground
(
)
)
;
}
else
{
backgroundTransitionGroup
=
new
TransitionDrawableGroup
(
(
TransitionDrawable
)
statusBar
.
getBackground
(
)
)
;
}
}
public
void
updateBlockingBadging
(
boolean
enabled
)
{
blockView
.
setVisibility
(
enabled
?
View
.
GONE
:
View
.
VISIBLE
)
;
}
}
