package
org
.
mozilla
.
focus
.
web
;
import
android
.
app
.
PendingIntent
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
Parcelable
;
import
android
.
support
.
annotation
.
ColorInt
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
customtabs
.
CustomTabsIntent
;
import
android
.
util
.
Log
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
telemetry
.
TelemetryWrapper
;
import
org
.
mozilla
.
focus
.
utils
.
SafeBundle
;
import
org
.
mozilla
.
focus
.
utils
.
SafeIntent
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
LinkedList
;
import
java
.
util
.
List
;
public
class
CustomTabConfig
{
private
static
final
String
LOGTAG
=
"
CustomTabConfig
"
;
public
static
final
class
ActionButtonConfig
{
public
final
NonNull
String
description
;
public
final
NonNull
Bitmap
icon
;
public
final
NonNull
PendingIntent
pendingIntent
;
public
ActionButtonConfig
(
final
NonNull
String
description
final
NonNull
Bitmap
icon
final
NonNull
PendingIntent
pendingIntent
)
{
this
.
description
=
description
;
this
.
icon
=
icon
;
this
.
pendingIntent
=
pendingIntent
;
}
}
public
static
final
class
CustomTabMenuItem
{
public
final
String
name
;
public
final
PendingIntent
pendingIntent
;
public
CustomTabMenuItem
(
final
NonNull
String
name
final
NonNull
PendingIntent
pendingIntent
)
{
this
.
name
=
name
;
this
.
pendingIntent
=
pendingIntent
;
}
}
public
final
Nullable
ColorInt
Integer
toolbarColor
;
public
final
Nullable
Bitmap
closeButtonIcon
;
public
final
boolean
disableUrlbarHiding
;
public
final
Nullable
ActionButtonConfig
actionButtonConfig
;
public
final
boolean
showShareMenuItem
;
public
final
NonNull
List
<
CustomTabMenuItem
>
menuItems
;
CustomTabConfig
(
final
Nullable
ColorInt
Integer
toolbarColor
final
Nullable
Bitmap
closeButtonIcon
final
boolean
disableUrlbarHiding
final
Nullable
ActionButtonConfig
actionButtonConfig
final
boolean
showShareMenuItem
final
NonNull
List
<
CustomTabMenuItem
>
menuItems
)
{
this
.
toolbarColor
=
toolbarColor
;
this
.
closeButtonIcon
=
closeButtonIcon
;
this
.
disableUrlbarHiding
=
disableUrlbarHiding
;
this
.
actionButtonConfig
=
actionButtonConfig
;
this
.
showShareMenuItem
=
showShareMenuItem
;
this
.
menuItems
=
menuItems
;
}
static
boolean
isCustomTabIntent
(
final
NonNull
SafeIntent
intent
)
{
return
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_SESSION
)
;
}
private
static
Nullable
Bitmap
getCloseButtonIcon
(
final
NonNull
Context
context
final
NonNull
SafeIntent
intent
)
{
if
(
!
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_CLOSE_BUTTON_ICON
)
)
{
return
null
;
}
final
Parcelable
closeButtonParcelable
=
intent
.
getParcelableExtra
(
CustomTabsIntent
.
EXTRA_CLOSE_BUTTON_ICON
)
;
if
(
!
(
closeButtonParcelable
instanceof
Bitmap
)
)
{
return
null
;
}
final
Bitmap
candidateIcon
=
(
Bitmap
)
closeButtonParcelable
;
final
int
maxSize
=
context
.
getResources
(
)
.
getDimensionPixelSize
(
R
.
dimen
.
customtabs_close_button_max_size
)
;
if
(
candidateIcon
.
getWidth
(
)
<
=
maxSize
&
&
candidateIcon
.
getHeight
(
)
<
=
maxSize
)
{
return
candidateIcon
;
}
else
{
candidateIcon
.
recycle
(
)
;
return
null
;
}
}
private
static
Nullable
ActionButtonConfig
getActionButtonConfig
(
final
NonNull
Context
context
final
NonNull
SafeIntent
intent
)
{
if
(
!
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_ACTION_BUTTON_BUNDLE
)
)
{
return
null
;
}
final
SafeBundle
actionButtonBundle
=
intent
.
getBundleExtra
(
CustomTabsIntent
.
EXTRA_ACTION_BUTTON_BUNDLE
)
;
final
String
description
=
actionButtonBundle
.
getString
(
CustomTabsIntent
.
KEY_DESCRIPTION
)
;
if
(
description
=
=
null
)
{
Log
.
w
(
LOGTAG
"
Ignoring
EXTRA_ACTION_BUTTON_BUNDLE
due
to
missing
description
"
)
;
return
null
;
}
final
Parcelable
pendingIntentParcelable
=
actionButtonBundle
.
getParcelable
(
CustomTabsIntent
.
KEY_PENDING_INTENT
)
;
final
PendingIntent
pendingIntent
;
if
(
pendingIntentParcelable
instanceof
PendingIntent
)
{
pendingIntent
=
(
PendingIntent
)
pendingIntentParcelable
;
}
else
{
Log
.
w
(
LOGTAG
"
Ignoring
EXTRA_ACTION_BUTTON_BUNDLE
due
to
missing
pendingIntent
"
)
;
return
null
;
}
final
Parcelable
iconParcelable
=
actionButtonBundle
.
getParcelable
(
CustomTabsIntent
.
KEY_ICON
)
;
final
Bitmap
icon
;
if
(
iconParcelable
instanceof
Bitmap
)
{
icon
=
(
Bitmap
)
iconParcelable
;
}
else
{
Log
.
w
(
LOGTAG
"
Ignoring
EXTRA_ACTION_BUTTON_BUNDLE
due
to
missing
icon
"
)
;
return
null
;
}
return
new
ActionButtonConfig
(
description
icon
pendingIntent
)
;
}
static
CustomTabConfig
parseCustomTabIntent
(
final
NonNull
Context
context
final
NonNull
SafeIntent
intent
)
{
final
List
<
String
>
featureList
=
new
LinkedList
<
>
(
)
;
ColorInt
Integer
toolbarColor
=
null
;
if
(
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_TOOLBAR_COLOR
)
)
{
toolbarColor
=
intent
.
getIntExtra
(
CustomTabsIntent
.
EXTRA_TOOLBAR_COLOR
-
1
)
;
featureList
.
add
(
"
hasToolbarColor
"
)
;
}
final
Bitmap
closeButtonIcon
=
getCloseButtonIcon
(
context
intent
)
;
if
(
closeButtonIcon
!
=
null
)
{
featureList
.
add
(
"
hasCloseButton
"
)
;
}
boolean
disableUrlbarHiding
=
!
intent
.
getBooleanExtra
(
CustomTabsIntent
.
EXTRA_ENABLE_URLBAR_HIDING
true
)
;
if
(
!
disableUrlbarHiding
)
{
featureList
.
add
(
"
disablesUrlbarHiding
"
)
;
}
final
ActionButtonConfig
actionButtonConfig
=
getActionButtonConfig
(
context
intent
)
;
if
(
actionButtonConfig
!
=
null
)
{
featureList
.
add
(
"
hasActionButton
"
)
;
}
if
(
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_TINT_ACTION_BUTTON
)
)
{
featureList
.
add
(
"
hasActionButtonTint
"
)
;
}
final
boolean
showShareMenuItem
=
intent
.
getBooleanExtra
(
CustomTabsIntent
.
EXTRA_DEFAULT_SHARE_MENU_ITEM
false
)
;
if
(
showShareMenuItem
)
{
featureList
.
add
(
"
hasShareItem
"
)
;
}
final
List
<
CustomTabMenuItem
>
menuItems
=
new
LinkedList
<
>
(
)
;
if
(
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_MENU_ITEMS
)
)
{
final
ArrayList
<
?
>
menuItemBundles
=
intent
.
getParcelableArrayListExtra
(
CustomTabsIntent
.
EXTRA_MENU_ITEMS
)
;
for
(
final
Object
bundleObject
:
menuItemBundles
)
{
if
(
!
(
bundleObject
instanceof
Bundle
)
)
{
continue
;
}
final
SafeBundle
bundle
=
new
SafeBundle
(
(
Bundle
)
bundleObject
)
;
final
String
name
=
bundle
.
getString
(
CustomTabsIntent
.
KEY_MENU_ITEM_TITLE
)
;
final
Parcelable
parcelableIntent
=
bundle
.
getParcelable
(
CustomTabsIntent
.
KEY_PENDING_INTENT
)
;
if
(
!
(
parcelableIntent
instanceof
PendingIntent
)
)
{
continue
;
}
final
PendingIntent
pendingIntent
=
(
PendingIntent
)
parcelableIntent
;
menuItems
.
add
(
new
CustomTabMenuItem
(
name
pendingIntent
)
)
;
}
}
if
(
menuItems
.
size
(
)
>
0
)
{
featureList
.
add
(
"
hasCustomizedMenu
"
)
;
}
if
(
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_REMOTEVIEWS
)
|
|
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_TOOLBAR_ITEMS
)
)
{
featureList
.
add
(
"
hasBottomToolbar
"
)
;
}
if
(
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_SECONDARY_TOOLBAR_COLOR
)
)
{
featureList
.
add
(
"
hasBottomToolbarColor
"
)
;
}
if
(
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_TITLE_VISIBILITY_STATE
)
)
{
final
int
titleVisibility
=
intent
.
getIntExtra
(
CustomTabsIntent
.
EXTRA_TITLE_VISIBILITY_STATE
0
)
;
switch
(
titleVisibility
)
{
case
CustomTabsIntent
.
SHOW_PAGE_TITLE
:
featureList
.
add
(
"
hasPageTitle
"
)
;
break
;
case
CustomTabsIntent
.
NO_TITLE
:
break
;
default
:
Log
.
w
(
LOGTAG
"
Custom
tab
intent
specified
unknown
EXTRA_TITLE_VISIBILITY_STATE
"
)
;
break
;
}
}
if
(
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_EXIT_ANIMATION_BUNDLE
)
)
{
featureList
.
add
(
"
hasExitAnimation
"
)
;
}
if
(
intent
.
hasExtra
(
CustomTabsIntent
.
EXTRA_ENABLE_INSTANT_APPS
)
)
{
featureList
.
add
(
"
enablesInstantApps
"
)
;
}
TelemetryWrapper
.
customTabsIntentEvent
(
featureList
)
;
return
new
CustomTabConfig
(
toolbarColor
closeButtonIcon
disableUrlbarHiding
actionButtonConfig
showShareMenuItem
menuItems
)
;
}
}
