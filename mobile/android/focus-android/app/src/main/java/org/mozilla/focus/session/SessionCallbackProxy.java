package
org
.
mozilla
.
focus
.
session
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
view
.
View
;
import
org
.
mozilla
.
focus
.
web
.
Download
;
import
org
.
mozilla
.
focus
.
web
.
IWebView
;
public
class
SessionCallbackProxy
implements
IWebView
.
Callback
{
static
final
int
MINIMUM_PROGRESS
=
5
;
private
final
Session
session
;
private
final
IWebView
.
Callback
delegate
;
public
SessionCallbackProxy
(
Session
session
IWebView
.
Callback
delegate
)
{
this
.
session
=
session
;
this
.
delegate
=
delegate
;
}
Override
public
void
onPageStarted
(
String
url
)
{
session
.
setLoading
(
true
)
;
session
.
setSecure
(
false
)
;
session
.
setProgress
(
MINIMUM_PROGRESS
)
;
session
.
setUrl
(
url
)
;
}
Override
public
void
onPageFinished
(
boolean
isSecure
)
{
session
.
setLoading
(
false
)
;
session
.
setSecure
(
isSecure
)
;
}
Override
public
void
onSecurityChanged
(
boolean
isSecure
String
host
String
organization
)
{
session
.
setSecure
(
isSecure
)
;
session
.
setSecurityOrigin
(
host
)
;
session
.
setSecurityVerifier
(
organization
)
;
}
Override
public
void
onProgress
(
int
progress
)
{
progress
=
Math
.
max
(
MINIMUM_PROGRESS
progress
)
;
progress
=
Math
.
min
(
99
progress
)
;
session
.
setProgress
(
progress
)
;
}
Override
public
void
onURLChanged
(
String
url
)
{
session
.
setUrl
(
url
)
;
}
Override
public
void
onTitleChanged
(
String
title
)
{
session
.
setPageTitle
(
title
)
;
}
Override
public
void
onRequest
(
boolean
isTriggeredByUserGesture
)
{
if
(
isTriggeredByUserGesture
&
&
session
.
isSearch
(
)
)
{
session
.
clearSearchTerms
(
)
;
}
}
Override
public
void
countBlockedTracker
(
)
{
session
.
setTrackersBlocked
(
session
.
getBlockedTrackers
(
)
.
getValue
(
)
+
1
)
;
}
Override
public
void
resetBlockedTrackers
(
)
{
session
.
setTrackersBlocked
(
0
)
;
}
Override
public
void
onBlockingStateChanged
(
boolean
isBlockingEnabled
)
{
session
.
setBlockingEnabled
(
isBlockingEnabled
)
;
}
Override
public
void
onHttpAuthRequest
(
NonNull
IWebView
.
HttpAuthCallback
callback
String
host
String
realm
)
{
delegate
.
onHttpAuthRequest
(
callback
host
realm
)
;
}
Override
public
void
onRequestDesktopStateChanged
(
boolean
shouldRequestDesktop
)
{
session
.
setRequestDesktopSite
(
shouldRequestDesktop
)
;
}
Override
public
void
onDownloadStart
(
Download
download
)
{
delegate
.
onDownloadStart
(
download
)
;
}
Override
public
void
onLongPress
(
IWebView
.
HitTarget
hitTarget
)
{
delegate
.
onLongPress
(
hitTarget
)
;
}
Override
public
void
onEnterFullScreen
(
NonNull
IWebView
.
FullscreenCallback
callback
Nullable
View
view
)
{
delegate
.
onEnterFullScreen
(
callback
view
)
;
}
Override
public
void
onExitFullScreen
(
)
{
delegate
.
onExitFullScreen
(
)
;
}
}
