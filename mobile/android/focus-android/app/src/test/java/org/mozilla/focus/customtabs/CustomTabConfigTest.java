package
org
.
mozilla
.
focus
.
customtabs
;
import
android
.
app
.
PendingIntent
;
import
android
.
content
.
Intent
;
import
android
.
graphics
.
Bitmap
;
import
android
.
graphics
.
Color
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
Parcel
;
import
android
.
os
.
Parcelable
;
import
android
.
os
.
StrictMode
;
import
android
.
support
.
customtabs
.
CustomTabsIntent
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
org
.
robolectric
.
RuntimeEnvironment
;
import
org
.
robolectric
.
annotation
.
Config
;
import
java
.
lang
.
reflect
.
Field
;
import
java
.
util
.
UUID
;
import
mozilla
.
components
.
support
.
utils
.
SafeIntent
;
import
static
org
.
junit
.
Assert
.
assertEquals
;
import
static
org
.
junit
.
Assert
.
assertFalse
;
import
static
org
.
junit
.
Assert
.
assertNotNull
;
import
static
org
.
junit
.
Assert
.
assertNull
;
import
static
org
.
junit
.
Assert
.
assertTrue
;
RunWith
(
RobolectricTestRunner
.
class
)
Config
(
packageName
=
"
org
.
mozilla
.
focus
"
)
public
class
CustomTabConfigTest
{
After
public
void
cleanup
(
)
{
StrictMode
.
setThreadPolicy
(
new
StrictMode
.
ThreadPolicy
.
Builder
(
)
.
build
(
)
)
;
}
private
static
class
UnparcelableParcel
implements
Parcelable
{
UnparcelableParcel
(
)
{
}
protected
UnparcelableParcel
(
Parcel
in
)
{
throw
new
RuntimeException
(
"
Haha
"
)
;
}
public
static
final
Creator
<
UnparcelableParcel
>
CREATOR
=
new
Creator
<
UnparcelableParcel
>
(
)
{
Override
public
UnparcelableParcel
createFromParcel
(
Parcel
in
)
{
return
new
UnparcelableParcel
(
in
)
;
}
Override
public
UnparcelableParcel
[
]
newArray
(
int
size
)
{
return
new
UnparcelableParcel
[
size
]
;
}
}
;
Override
public
void
writeToParcel
(
Parcel
dest
int
flags
)
{
}
Override
public
int
describeContents
(
)
{
return
0
;
}
}
Test
public
void
isCustomTabIntent
(
)
throws
Exception
{
final
CustomTabsIntent
.
Builder
builder
=
new
CustomTabsIntent
.
Builder
(
)
;
final
CustomTabsIntent
customTabsIntent
=
builder
.
build
(
)
;
assertTrue
(
CustomTabConfig
.
isCustomTabIntent
(
new
SafeIntent
(
customTabsIntent
.
intent
)
)
)
;
}
Test
public
void
menuTest
(
)
throws
Exception
{
final
CustomTabsIntent
.
Builder
builder
=
new
CustomTabsIntent
.
Builder
(
)
;
final
PendingIntent
pendingIntent
=
PendingIntent
.
getActivity
(
null
0
null
0
)
;
builder
.
addMenuItem
(
"
menuitem1
"
pendingIntent
)
;
builder
.
addMenuItem
(
"
menuitem2
"
pendingIntent
)
;
builder
.
addMenuItem
(
"
menuitemIGNORED
"
null
)
;
final
CustomTabsIntent
customTabsIntent
=
builder
.
build
(
)
;
customTabsIntent
.
intent
.
putExtra
(
CustomTabConfig
.
EXTRA_CUSTOM_TAB_ID
UUID
.
randomUUID
(
)
.
toString
(
)
)
;
final
CustomTabConfig
config
=
CustomTabConfig
.
parseCustomTabIntent
(
RuntimeEnvironment
.
application
new
SafeIntent
(
customTabsIntent
.
intent
)
)
;
assertEquals
(
"
Menu
should
contain
2
items
"
2
config
.
menuItems
.
size
(
)
)
;
final
String
s
=
config
.
menuItems
.
get
(
0
)
.
name
;
assertEquals
(
"
Unexpected
menu
item
"
"
menuitem1
"
config
.
menuItems
.
get
(
0
)
.
name
)
;
assertEquals
(
"
Unexpected
menu
item
"
"
menuitem2
"
config
.
menuItems
.
get
(
1
)
.
name
)
;
}
Test
public
void
malformedExtras
(
)
throws
Exception
{
final
CustomTabsIntent
.
Builder
builder
=
new
CustomTabsIntent
.
Builder
(
)
;
final
CustomTabsIntent
customTabsIntent
=
builder
.
build
(
)
;
customTabsIntent
.
intent
.
putExtra
(
"
garbage
"
new
UnparcelableParcel
(
)
)
;
final
Parcel
parcel
=
Parcel
.
obtain
(
)
;
final
Bundle
extras
=
customTabsIntent
.
intent
.
getExtras
(
)
;
extras
.
writeToParcel
(
parcel
0
)
;
extras
.
clear
(
)
;
parcel
.
setDataPosition
(
0
)
;
final
Bundle
injectedBundle
=
parcel
.
readBundle
(
)
;
parcel
.
recycle
(
)
;
final
Field
extrasField
=
Intent
.
class
.
getDeclaredField
(
"
mExtras
"
)
;
extrasField
.
setAccessible
(
true
)
;
extrasField
.
set
(
customTabsIntent
.
intent
injectedBundle
)
;
extrasField
.
setAccessible
(
false
)
;
assertFalse
(
CustomTabConfig
.
isCustomTabIntent
(
new
SafeIntent
(
customTabsIntent
.
intent
)
)
)
;
customTabsIntent
.
intent
.
putExtra
(
CustomTabConfig
.
EXTRA_CUSTOM_TAB_ID
UUID
.
randomUUID
(
)
.
toString
(
)
)
;
final
CustomTabConfig
c
=
CustomTabConfig
.
parseCustomTabIntent
(
RuntimeEnvironment
.
application
new
SafeIntent
(
customTabsIntent
.
intent
)
)
;
assertNull
(
c
.
actionButtonConfig
)
;
}
Test
public
void
malformedActionButtonConfig
(
)
throws
Exception
{
final
CustomTabsIntent
.
Builder
builder
=
new
CustomTabsIntent
.
Builder
(
)
;
final
CustomTabsIntent
customTabsIntent
=
builder
.
build
(
)
;
final
Bundle
garbage
=
new
Bundle
(
)
;
garbage
.
putParcelable
(
"
foobar
"
new
UnparcelableParcel
(
)
)
;
customTabsIntent
.
intent
.
putExtra
(
CustomTabsIntent
.
EXTRA_ACTION_BUTTON_BUNDLE
garbage
)
;
assertTrue
(
CustomTabConfig
.
isCustomTabIntent
(
new
SafeIntent
(
customTabsIntent
.
intent
)
)
)
;
final
CustomTabConfig
.
ActionButtonConfig
actionButtonConfig
=
CustomTabConfig
.
getActionButtonConfig
(
RuntimeEnvironment
.
application
new
SafeIntent
(
customTabsIntent
.
intent
)
)
;
assertNull
(
actionButtonConfig
)
;
}
Test
public
void
actionButtonConfig
(
)
throws
Exception
{
final
CustomTabsIntent
.
Builder
builder
=
new
CustomTabsIntent
.
Builder
(
)
;
final
String
description
=
"
description
"
;
final
String
intentAction
=
"
ACTION
"
;
{
final
Bitmap
bitmap
=
Bitmap
.
createBitmap
(
new
int
[
]
{
Color
.
RED
}
1
1
Bitmap
.
Config
.
ARGB_8888
)
;
final
PendingIntent
intent
=
PendingIntent
.
getActivity
(
RuntimeEnvironment
.
application
0
new
Intent
(
intentAction
)
0
)
;
builder
.
setActionButton
(
bitmap
description
intent
)
;
}
final
CustomTabsIntent
customTabsIntent
=
builder
.
build
(
)
;
final
CustomTabConfig
.
ActionButtonConfig
actionButtonConfig
=
CustomTabConfig
.
getActionButtonConfig
(
RuntimeEnvironment
.
application
new
SafeIntent
(
customTabsIntent
.
intent
)
)
;
assertEquals
(
description
actionButtonConfig
.
description
)
;
assertNotNull
(
actionButtonConfig
.
pendingIntent
)
;
final
Bitmap
bitmap
=
actionButtonConfig
.
icon
;
assertEquals
(
1
bitmap
.
getWidth
(
)
)
;
assertEquals
(
1
bitmap
.
getHeight
(
)
)
;
assertEquals
(
Color
.
RED
bitmap
.
getPixel
(
0
0
)
)
;
}
Test
public
void
closeButton
(
)
throws
Exception
{
final
CustomTabsIntent
.
Builder
builder
=
new
CustomTabsIntent
.
Builder
(
)
;
{
final
Bitmap
bitmap
=
Bitmap
.
createBitmap
(
new
int
[
]
{
Color
.
RED
}
1
1
Bitmap
.
Config
.
ARGB_8888
)
;
builder
.
setCloseButtonIcon
(
bitmap
)
;
}
final
CustomTabsIntent
customTabsIntent
=
builder
.
build
(
)
;
final
Bitmap
bitmap
=
CustomTabConfig
.
getCloseButtonIcon
(
RuntimeEnvironment
.
application
new
SafeIntent
(
customTabsIntent
.
intent
)
)
;
assertEquals
(
1
bitmap
.
getWidth
(
)
)
;
assertEquals
(
1
bitmap
.
getHeight
(
)
)
;
assertEquals
(
Color
.
RED
bitmap
.
getPixel
(
0
0
)
)
;
}
Test
public
void
malformedCloseButton
(
)
throws
Exception
{
final
CustomTabsIntent
.
Builder
builder
=
new
CustomTabsIntent
.
Builder
(
)
;
final
CustomTabsIntent
customTabsIntent
=
builder
.
build
(
)
;
customTabsIntent
.
intent
.
putExtra
(
CustomTabsIntent
.
EXTRA_CLOSE_BUTTON_ICON
new
Intent
(
)
)
;
final
Bitmap
bitmap
=
CustomTabConfig
.
getCloseButtonIcon
(
RuntimeEnvironment
.
application
new
SafeIntent
(
customTabsIntent
.
intent
)
)
;
assertNull
(
bitmap
)
;
}
Test
public
void
maxSizeCloseButton
(
)
throws
Exception
{
final
int
maxSize
=
RuntimeEnvironment
.
application
.
getResources
(
)
.
getDimensionPixelSize
(
R
.
dimen
.
customtabs_toolbar_icon_size
)
;
final
CustomTabsIntent
.
Builder
builder
=
new
CustomTabsIntent
.
Builder
(
)
;
{
final
Bitmap
bitmap
=
Bitmap
.
createBitmap
(
new
int
[
maxSize
*
maxSize
]
maxSize
maxSize
Bitmap
.
Config
.
ARGB_8888
)
;
builder
.
setCloseButtonIcon
(
bitmap
)
;
}
final
CustomTabsIntent
customTabsIntent
=
builder
.
build
(
)
;
final
Bitmap
bitmap
=
CustomTabConfig
.
getCloseButtonIcon
(
RuntimeEnvironment
.
application
new
SafeIntent
(
customTabsIntent
.
intent
)
)
;
assertNotNull
(
bitmap
)
;
assertEquals
(
maxSize
bitmap
.
getWidth
(
)
)
;
assertEquals
(
maxSize
bitmap
.
getHeight
(
)
)
;
}
Test
public
void
oversizedCloseButton
(
)
throws
Exception
{
final
int
maxSize
=
RuntimeEnvironment
.
application
.
getResources
(
)
.
getDimensionPixelSize
(
R
.
dimen
.
customtabs_toolbar_icon_size
)
;
final
CustomTabsIntent
.
Builder
builder
=
new
CustomTabsIntent
.
Builder
(
)
;
{
final
Bitmap
bitmap
=
Bitmap
.
createBitmap
(
new
int
[
(
maxSize
+
1
)
*
(
maxSize
+
1
)
]
maxSize
+
1
maxSize
+
1
Bitmap
.
Config
.
ARGB_8888
)
;
builder
.
setCloseButtonIcon
(
bitmap
)
;
}
final
CustomTabsIntent
customTabsIntent
=
builder
.
build
(
)
;
final
Bitmap
bitmap
=
CustomTabConfig
.
getCloseButtonIcon
(
RuntimeEnvironment
.
application
new
SafeIntent
(
customTabsIntent
.
intent
)
)
;
assertNull
(
bitmap
)
;
}
Test
(
expected
=
IllegalArgumentException
.
class
)
public
void
idIsRequired
(
)
{
final
CustomTabsIntent
.
Builder
builder
=
new
CustomTabsIntent
.
Builder
(
)
;
final
CustomTabsIntent
customTabsIntent
=
builder
.
build
(
)
;
CustomTabConfig
.
parseCustomTabIntent
(
RuntimeEnvironment
.
application
new
SafeIntent
(
customTabsIntent
.
intent
)
)
;
}
}
