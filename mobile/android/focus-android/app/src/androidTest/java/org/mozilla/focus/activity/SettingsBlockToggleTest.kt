package
org
.
mozilla
.
focus
.
activity
import
androidx
.
test
.
internal
.
runner
.
junit4
.
AndroidJUnit4ClassRunner
import
androidx
.
test
.
uiautomator
.
UiObjectNotFoundException
import
androidx
.
test
.
uiautomator
.
UiSelector
import
okhttp3
.
mockwebserver
.
MockResponse
import
okhttp3
.
mockwebserver
.
MockWebServer
import
org
.
junit
.
After
import
org
.
junit
.
Assert
import
org
.
junit
.
Before
import
org
.
junit
.
Ignore
import
org
.
junit
.
Rule
import
org
.
junit
.
Test
import
org
.
junit
.
runner
.
RunWith
import
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
openSettings
import
org
.
mozilla
.
focus
.
helpers
.
MainActivityFirstrunTestRule
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
packageName
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
pressBackKey
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
pressEnterKey
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
readTestAsset
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitForWebContent
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
import
org
.
mozilla
.
focus
.
testAnnotations
.
SmokeTest
import
java
.
io
.
IOException
RunWith
(
AndroidJUnit4ClassRunner
:
:
class
)
Ignore
(
"
To
be
updated
and
re
-
enabled
:
https
:
/
/
github
.
com
/
mozilla
-
mobile
/
focus
-
android
/
issues
/
5534
"
)
class
SettingsBlockToggleTest
{
private
var
webServer
:
MockWebServer
?
=
null
get
:
Rule
var
mActivityTestRule
=
MainActivityFirstrunTestRule
(
showFirstRun
=
false
)
Before
fun
setUp
(
)
{
webServer
=
MockWebServer
(
)
try
{
webServer
!
!
.
enqueue
(
MockResponse
(
)
.
setBody
(
readTestAsset
(
"
plain_test
.
html
"
)
)
)
webServer
!
!
.
enqueue
(
MockResponse
(
)
.
setBody
(
readTestAsset
(
"
plain_test
.
html
"
)
)
)
webServer
!
!
.
start
(
)
}
catch
(
e
:
IOException
)
{
throw
AssertionError
(
"
Could
not
start
web
server
"
e
)
}
}
After
fun
tearDown
(
)
{
mActivityTestRule
.
activity
.
finishAndRemoveTask
(
)
try
{
webServer
!
!
.
close
(
)
webServer
!
!
.
shutdown
(
)
}
catch
(
e
:
IOException
)
{
throw
AssertionError
(
"
Could
not
stop
web
server
"
e
)
}
}
Suppress
(
"
LongMethod
"
)
SmokeTest
Test
Throws
(
UiObjectNotFoundException
:
:
class
)
fun
SettingsToggleTest
(
)
{
val
privacyHeading
=
TestHelper
.
mDevice
.
findObject
(
UiSelector
(
)
.
text
(
"
Privacy
&
Security
"
)
.
resourceId
(
"
android
:
id
/
title
"
)
)
val
blockAdTrackerEntry
=
TestHelper
.
settingsMenu
.
getChild
(
UiSelector
(
)
.
className
(
"
android
.
widget
.
LinearLayout
"
)
.
instance
(
1
)
)
val
blockAdTrackerSwitch
=
blockAdTrackerEntry
.
getChild
(
UiSelector
(
)
.
resourceId
(
packageName
+
"
:
id
/
switchWidget
"
)
)
val
blockAnalyticTrackerEntry
=
TestHelper
.
settingsMenu
.
getChild
(
UiSelector
(
)
.
className
(
"
android
.
widget
.
LinearLayout
"
)
.
instance
(
2
)
)
val
blockAnalyticTrackerSwitch
=
blockAnalyticTrackerEntry
.
getChild
(
UiSelector
(
)
.
resourceId
(
packageName
+
"
:
id
/
switchWidget
"
)
)
val
blockSocialTrackerEntry
=
TestHelper
.
settingsMenu
.
getChild
(
UiSelector
(
)
.
className
(
"
android
.
widget
.
LinearLayout
"
)
.
instance
(
4
)
)
val
blockSocialTrackerSwitch
=
blockSocialTrackerEntry
.
getChild
(
UiSelector
(
)
.
resourceId
(
packageName
+
"
:
id
/
switchWidget
"
)
)
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
webServer
!
!
.
url
(
TEST_PATH
)
.
toString
(
)
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
pressEnterKey
(
)
waitForWebContent
(
)
Assert
.
assertTrue
(
TestHelper
.
browserURLbar
.
text
.
contains
(
webServer
!
!
.
url
(
TEST_PATH
)
.
toString
(
)
)
)
Assert
.
assertTrue
(
!
TestHelper
.
lockIcon
.
exists
(
)
)
openSettings
(
)
privacyHeading
.
waitForExists
(
waitingTime
)
privacyHeading
.
click
(
)
val
blockAdTrackerValue
=
blockAdTrackerSwitch
.
text
val
blockAnalyticTrackerValue
=
blockAnalyticTrackerSwitch
.
text
val
blockSocialTrackerValue
=
blockSocialTrackerSwitch
.
text
blockAdTrackerEntry
.
click
(
)
blockAnalyticTrackerEntry
.
click
(
)
blockSocialTrackerEntry
.
click
(
)
org
.
junit
.
Assert
.
assertFalse
(
blockAdTrackerSwitch
.
text
=
=
blockAdTrackerValue
)
org
.
junit
.
Assert
.
assertFalse
(
blockAnalyticTrackerSwitch
.
text
=
=
blockAnalyticTrackerValue
)
org
.
junit
.
Assert
.
assertFalse
(
blockSocialTrackerSwitch
.
text
=
=
blockSocialTrackerValue
)
blockAdTrackerEntry
.
click
(
)
blockAnalyticTrackerEntry
.
click
(
)
blockSocialTrackerEntry
.
click
(
)
Assert
.
assertTrue
(
blockAdTrackerSwitch
.
text
=
=
blockAdTrackerValue
)
Assert
.
assertTrue
(
blockAnalyticTrackerSwitch
.
text
=
=
blockAnalyticTrackerValue
)
Assert
.
assertTrue
(
blockSocialTrackerSwitch
.
text
=
=
blockSocialTrackerValue
)
pressBackKey
(
)
pressBackKey
(
)
waitForWebContent
(
)
Assert
.
assertTrue
(
TestHelper
.
browserURLbar
.
text
.
contains
(
webServer
!
!
.
url
(
TEST_PATH
)
.
toString
(
)
)
)
Assert
.
assertTrue
(
!
TestHelper
.
lockIcon
.
exists
(
)
)
}
companion
object
{
private
const
val
TEST_PATH
=
"
/
"
}
}
