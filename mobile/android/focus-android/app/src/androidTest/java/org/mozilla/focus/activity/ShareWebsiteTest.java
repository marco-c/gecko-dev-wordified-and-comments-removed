package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
android
.
support
.
test
.
rule
.
ActivityTestRule
;
import
android
.
support
.
test
.
runner
.
AndroidJUnit4
;
import
android
.
support
.
test
.
uiautomator
.
UiObject
;
import
android
.
support
.
test
.
uiautomator
.
UiObjectNotFoundException
;
import
android
.
support
.
test
.
uiautomator
.
UiSelector
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Rule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
;
import
org
.
mozilla
.
focus
.
utils
.
AppConstants
;
import
java
.
io
.
IOException
;
import
okhttp3
.
mockwebserver
.
MockResponse
;
import
okhttp3
.
mockwebserver
.
MockWebServer
;
import
static
android
.
support
.
test
.
espresso
.
action
.
ViewActions
.
click
;
import
static
junit
.
framework
.
Assert
.
assertTrue
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
import
static
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
;
RunWith
(
AndroidJUnit4
.
class
)
public
class
ShareWebsiteTest
{
private
static
final
String
TEST_PATH
=
"
/
"
;
private
MockWebServer
webServer
;
Rule
public
ActivityTestRule
<
MainActivity
>
mActivityTestRule
=
new
ActivityTestRule
<
MainActivity
>
(
MainActivity
.
class
)
{
Override
protected
void
beforeActivityLaunched
(
)
{
super
.
beforeActivityLaunched
(
)
;
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
org
.
junit
.
Assume
.
assumeTrue
(
!
AppConstants
.
INSTANCE
.
isGeckoBuild
(
)
&
&
!
AppConstants
.
INSTANCE
.
isKlarBuild
(
)
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
webServer
=
new
MockWebServer
(
)
;
try
{
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
plain_test
.
html
"
)
)
)
;
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
plain_test
.
html
"
)
)
)
;
webServer
.
start
(
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
start
web
server
"
e
)
;
}
}
Override
protected
void
afterActivityFinished
(
)
{
super
.
afterActivityFinished
(
)
;
try
{
webServer
.
close
(
)
;
webServer
.
shutdown
(
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
stop
web
server
"
e
)
;
}
}
}
;
After
public
void
tearDown
(
)
{
mActivityTestRule
.
getActivity
(
)
.
finishAndRemoveTask
(
)
;
}
Test
public
void
ShareWebsiteTest
(
)
throws
UiObjectNotFoundException
{
UiObject
shareBtn
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
resourceId
(
TestHelper
.
getAppName
(
)
+
"
:
id
/
share
"
)
.
enabled
(
true
)
)
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
webServer
.
url
(
TEST_PATH
)
.
toString
(
)
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
assertTrue
(
TestHelper
.
webView
.
waitForExists
(
waitingTime
)
)
;
TestHelper
.
menuButton
.
perform
(
click
(
)
)
;
shareBtn
.
waitForExists
(
waitingTime
)
;
shareBtn
.
click
(
)
;
TestHelper
.
shareMenuHeader
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
shareMenuHeader
.
exists
(
)
)
;
assertTrue
(
TestHelper
.
shareAppList
.
exists
(
)
)
;
TestHelper
.
pressBackKey
(
)
;
}
}
