package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
android
.
support
.
test
.
rule
.
ActivityTestRule
;
import
android
.
support
.
test
.
uiautomator
.
UiObject
;
import
android
.
support
.
test
.
uiautomator
.
UiObjectNotFoundException
;
import
android
.
support
.
test
.
uiautomator
.
UiScrollable
;
import
android
.
support
.
test
.
uiautomator
.
UiSelector
;
import
android
.
widget
.
RadioButton
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Rule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
junit
.
runners
.
Parameterized
;
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
;
import
org
.
mozilla
.
focus
.
utils
.
AppConstants
;
import
java
.
util
.
Arrays
;
import
static
junit
.
framework
.
Assert
.
assertEquals
;
import
static
junit
.
framework
.
Assert
.
assertTrue
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
import
static
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
openSettings
;
import
static
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
;
import
static
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
webPageLoadwaitingTime
;
RunWith
(
Parameterized
.
class
)
public
class
ChangeSearchEngineTest
{
Parameterized
.
Parameter
public
String
mSearchEngine
;
Parameterized
.
Parameters
public
static
Iterable
<
?
extends
Object
>
data
(
)
{
return
Arrays
.
asList
(
"
Google
"
"
DuckDuckGo
"
)
;
}
Rule
public
ActivityTestRule
<
MainActivity
>
mActivityTestRule
=
new
ActivityTestRule
<
MainActivity
>
(
MainActivity
.
class
)
{
Override
protected
void
beforeActivityLaunched
(
)
{
super
.
beforeActivityLaunched
(
)
;
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
org
.
junit
.
Assume
.
assumeTrue
(
!
AppConstants
.
INSTANCE
.
isGeckoBuild
(
)
&
&
!
AppConstants
.
INSTANCE
.
isKlarBuild
(
)
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
}
}
;
After
public
void
tearDown
(
)
throws
Exception
{
mActivityTestRule
.
getActivity
(
)
.
finishAndRemoveTask
(
)
;
}
Test
public
void
SearchTest
(
)
throws
UiObjectNotFoundException
{
UiObject
settingsMenu
=
TestHelper
.
settingsList
.
getChild
(
new
UiSelector
(
)
.
className
(
"
android
.
widget
.
LinearLayout
"
)
.
instance
(
1
)
)
;
UiObject
searchEngineSelectorLabel
=
settingsMenu
.
getChild
(
new
UiSelector
(
)
.
resourceId
(
"
android
:
id
/
title
"
)
.
text
(
"
Search
"
)
.
enabled
(
true
)
)
;
String
searchString
=
String
.
format
(
"
mozilla
focus
-
%
s
Search
"
mSearchEngine
)
;
UiObject
googleWebView
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
description
(
searchString
)
.
className
(
"
android
.
webkit
.
WebView
"
)
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
)
;
openSettings
(
)
;
TestHelper
.
settingsHeading
.
waitForExists
(
waitingTime
)
;
searchEngineSelectorLabel
.
click
(
)
;
UiObject
defaultSearchEngineLabel
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
text
(
"
Default
"
)
.
resourceId
(
"
android
:
id
/
summary
"
)
)
;
defaultSearchEngineLabel
.
waitForExists
(
waitingTime
)
;
defaultSearchEngineLabel
.
click
(
)
;
UiScrollable
searchEngineList
=
new
UiScrollable
(
new
UiSelector
(
)
.
resourceId
(
TestHelper
.
getAppName
(
)
+
"
:
id
/
search_engine_group
"
)
.
enabled
(
true
)
)
;
UiObject
defaultEngineSelection
=
searchEngineList
.
getChildByText
(
new
UiSelector
(
)
.
className
(
RadioButton
.
class
)
mSearchEngine
)
;
defaultEngineSelection
.
waitForExists
(
waitingTime
)
;
assertTrue
(
defaultEngineSelection
.
getText
(
)
.
equals
(
mSearchEngine
)
)
;
defaultEngineSelection
.
click
(
)
;
TestHelper
.
pressBackKey
(
)
;
TestHelper
.
settingsHeading
.
waitForExists
(
waitingTime
)
;
UiObject
defaultSearchEngine
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
text
(
mSearchEngine
)
.
resourceId
(
"
android
:
id
/
title
"
)
)
;
assertTrue
(
defaultSearchEngine
.
getText
(
)
.
equals
(
mSearchEngine
)
)
;
TestHelper
.
pressBackKey
(
)
;
TestHelper
.
pressBackKey
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
"
"
)
;
TestHelper
.
pressEnterKey
(
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
"
mozilla
focus
"
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
;
assertTrue
(
TestHelper
.
hint
.
getText
(
)
.
equals
(
"
Search
for
mozilla
focus
"
)
)
;
TestHelper
.
hint
.
click
(
)
;
googleWebView
.
waitForExists
(
waitingTime
)
;
TestHelper
.
progressBar
.
waitForExists
(
webPageLoadwaitingTime
)
;
TestHelper
.
progressBar
.
waitUntilGone
(
webPageLoadwaitingTime
)
;
assertTrue
(
TestHelper
.
browserURLbar
.
getText
(
)
.
contains
(
mSearchEngine
.
toLowerCase
(
)
)
)
;
assertTrue
(
TestHelper
.
browserURLbar
.
getText
(
)
.
contains
(
"
mozilla
"
)
)
;
assertTrue
(
TestHelper
.
browserURLbar
.
getText
(
)
.
contains
(
"
focus
"
)
)
;
TestHelper
.
browserURLbar
.
click
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
assertEquals
(
TestHelper
.
inlineAutocompleteEditText
.
getText
(
)
"
mozilla
focus
"
)
;
TestHelper
.
pressEnterKey
(
)
;
googleWebView
.
waitForExists
(
waitingTime
)
;
TestHelper
.
progressBar
.
waitUntilGone
(
webPageLoadwaitingTime
)
;
assertTrue
(
TestHelper
.
browserURLbar
.
getText
(
)
.
contains
(
mSearchEngine
.
toLowerCase
(
)
)
)
;
assertTrue
(
TestHelper
.
browserURLbar
.
getText
(
)
.
contains
(
"
mozilla
"
)
)
;
assertTrue
(
TestHelper
.
browserURLbar
.
getText
(
)
.
contains
(
"
focus
"
)
)
;
TestHelper
.
browserURLbar
.
click
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
"
mozilla
focus
"
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
hint
.
getText
(
)
.
equals
(
"
Search
for
mozilla
focus
"
)
)
;
TestHelper
.
hint
.
click
(
)
;
}
}
