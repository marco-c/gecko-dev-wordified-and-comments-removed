package
org
.
mozilla
.
focus
.
activity
import
androidx
.
recyclerview
.
widget
.
RecyclerView
import
androidx
.
test
.
espresso
.
Espresso
import
androidx
.
test
.
espresso
.
ViewInteraction
import
androidx
.
test
.
espresso
.
action
.
ViewActions
import
androidx
.
test
.
espresso
.
assertion
.
ViewAssertions
import
androidx
.
test
.
espresso
.
contrib
.
RecyclerViewActions
import
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
import
androidx
.
test
.
internal
.
runner
.
junit4
.
AndroidJUnit4ClassRunner
import
androidx
.
test
.
platform
.
app
.
InstrumentationRegistry
import
androidx
.
test
.
uiautomator
.
UiObjectNotFoundException
import
org
.
hamcrest
.
Matchers
import
org
.
hamcrest
.
core
.
AllOf
import
org
.
junit
.
After
import
org
.
junit
.
Assert
import
org
.
junit
.
Ignore
import
org
.
junit
.
Rule
import
org
.
junit
.
Test
import
org
.
junit
.
runner
.
RunWith
import
org
.
mozilla
.
focus
.
R
import
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
childAtPosition
import
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
openSettings
import
org
.
mozilla
.
focus
.
helpers
.
MainActivityFirstrunTestRule
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
mDevice
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
Suppress
(
"
TooManyFunctions
"
)
RunWith
(
AndroidJUnit4ClassRunner
:
:
class
)
class
URLAutocompleteTest
{
private
val
site
=
"
680news
.
com
"
private
val
CustomURLRow
=
Espresso
.
onData
(
Matchers
.
anything
(
)
)
.
inAdapterView
(
AllOf
.
allOf
(
ViewMatchers
.
withId
(
android
.
R
.
id
.
list
)
childAtPosition
(
ViewMatchers
.
withId
(
android
.
R
.
id
.
list_container
)
0
)
)
)
.
atPosition
(
4
)
private
val
CustomURLRow_old
=
Espresso
.
onData
(
Matchers
.
anything
(
)
)
.
inAdapterView
(
AllOf
.
allOf
(
ViewMatchers
.
withId
(
android
.
R
.
id
.
list
)
childAtPosition
(
ViewMatchers
.
withClassName
(
Matchers
.
is
(
"
android
.
widget
.
LinearLayout
"
)
)
0
)
)
)
.
atPosition
(
4
)
private
val
AutoCompleteDialog
:
ViewInteraction
?
=
null
get
:
Rule
var
mActivityTestRule
=
MainActivityFirstrunTestRule
(
showFirstRun
=
false
)
After
fun
tearDown
(
)
{
mActivityTestRule
.
activity
.
finishAndRemoveTask
(
)
}
Test
Throws
(
UiObjectNotFoundException
:
:
class
)
fun
CompletionTest
(
)
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
"
mozilla
"
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
text
=
=
"
mozilla
.
org
"
)
TestHelper
.
cleartextField
.
click
(
)
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
text
=
=
"
Search
or
enter
address
"
)
Assert
.
assertFalse
(
TestHelper
.
hint
.
exists
(
)
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
"
http
:
/
/
www
.
mozilla
.
org
"
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
text
=
=
"
http
:
/
/
www
.
mozilla
.
org
"
)
}
Ignore
Test
Throws
(
UiObjectNotFoundException
:
:
class
)
fun
CustomCompletionTest
(
)
{
OpenCustomCompleteDialog
(
)
addAutoComplete
(
site
)
exitToTop
(
)
checkACOn
(
site
)
OpenCustomCompleteDialog
(
)
removeACSite
(
)
exitToTop
(
)
checkACOff
(
site
.
substring
(
0
3
)
)
}
Ignore
Test
Throws
(
UiObjectNotFoundException
:
:
class
)
fun
DisableCCwithSiteTest
(
)
{
OpenCustomCompleteDialog
(
)
addAutoComplete
(
site
)
Espresso
.
pressBack
(
)
toggleCustomAC
(
)
Espresso
.
pressBack
(
)
Espresso
.
pressBack
(
)
Espresso
.
pressBack
(
)
checkACOff
(
site
.
substring
(
0
3
)
)
OpenCustomCompleteDialog
(
)
toggleCustomAC
(
)
Espresso
.
pressBack
(
)
Espresso
.
pressBack
(
)
Espresso
.
pressBack
(
)
checkACOn
(
site
)
OpenCustomCompleteDialog
(
)
removeACSite
(
)
}
Ignore
Test
fun
DuplicateACSiteTest
(
)
{
OpenCustomCompleteDialog
(
)
addAutoComplete
(
site
)
exitToTop
(
)
OpenCustomCompleteDialog
(
)
addAutoComplete
(
site
false
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
domainView
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
save
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
Espresso
.
pressBack
(
)
Espresso
.
pressBack
(
)
removeACSite
(
)
Espresso
.
pressBack
(
)
}
private
fun
exitToTop
(
)
{
Espresso
.
pressBack
(
)
Espresso
.
pressBack
(
)
Espresso
.
pressBack
(
)
Espresso
.
pressBack
(
)
}
private
fun
toggleTopsiteAC
(
)
{
Espresso
.
onView
(
ViewMatchers
.
withText
(
"
For
Top
sites
"
)
)
.
perform
(
ViewActions
.
click
(
)
)
}
private
fun
toggleCustomAC
(
)
{
Espresso
.
onView
(
ViewMatchers
.
withText
(
"
For
Sites
You
Add
"
)
)
.
perform
(
ViewActions
.
click
(
)
)
}
private
fun
OpenCustomCompleteDialog
(
)
{
mDevice
.
waitForIdle
(
)
openSettings
(
)
Espresso
.
onView
(
ViewMatchers
.
withText
(
"
Search
"
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
.
perform
(
ViewActions
.
click
(
)
)
Espresso
.
onView
(
ViewMatchers
.
withText
(
"
URL
Autocomplete
"
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
.
perform
(
ViewActions
.
click
(
)
)
mDevice
.
waitForIdle
(
)
}
Throws
(
UiObjectNotFoundException
:
:
class
)
private
fun
checkACOff
(
url
:
String
)
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
url
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
text
=
=
url
)
TestHelper
.
cleartextField
.
click
(
)
}
Throws
(
UiObjectNotFoundException
:
:
class
)
private
fun
checkACOn
(
url
:
String
)
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
url
.
substring
(
0
1
)
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
text
=
=
url
)
TestHelper
.
cleartextField
.
click
(
)
}
private
fun
removeACSite
(
)
{
AutoCompleteDialog
!
!
.
perform
(
RecyclerViewActions
.
actionOnItemAtPosition
<
RecyclerView
.
ViewHolder
>
(
4
ViewActions
.
click
(
)
)
)
mDevice
.
waitForIdle
(
)
Espresso
.
openActionBarOverflowOrOptionsMenu
(
InstrumentationRegistry
.
getInstrumentation
(
)
.
getContext
(
)
)
mDevice
.
waitForIdle
(
)
Espresso
.
onView
(
ViewMatchers
.
withText
(
"
Remove
"
)
)
.
perform
(
ViewActions
.
click
(
)
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
checkbox
)
)
.
perform
(
ViewActions
.
click
(
)
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
remove
)
)
.
perform
(
ViewActions
.
click
(
)
)
}
Suppress
(
"
SENSELESS_COMPARISON
"
)
private
fun
addAutoComplete
(
sitename
:
String
vararg
checkSuccess
:
Boolean
?
)
{
AutoCompleteDialog
!
!
.
perform
(
RecyclerViewActions
.
actionOnItemAtPosition
<
RecyclerView
.
ViewHolder
>
(
4
ViewActions
.
click
(
)
)
)
mDevice
.
waitForIdle
(
)
Espresso
.
onView
(
ViewMatchers
.
withText
(
"
+
Add
custom
URL
"
)
)
.
perform
(
ViewActions
.
click
(
)
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
domainView
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
mDevice
.
waitForIdle
(
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
domainView
)
)
.
perform
(
ViewActions
.
replaceText
(
sitename
)
ViewActions
.
closeSoftKeyboard
(
)
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
save
)
)
.
perform
(
ViewActions
.
click
(
)
)
if
(
checkSuccess
=
=
null
)
{
Espresso
.
onView
(
ViewMatchers
.
withText
(
"
Custom
URLs
"
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
Espresso
.
onView
(
AllOf
.
allOf
(
ViewMatchers
.
withText
(
sitename
)
ViewMatchers
.
withId
(
R
.
id
.
domainView
)
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
mDevice
.
waitForIdle
(
)
}
}
}
