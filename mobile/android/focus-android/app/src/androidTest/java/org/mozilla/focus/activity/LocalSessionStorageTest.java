package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
android
.
support
.
test
.
rule
.
ActivityTestRule
;
import
android
.
support
.
test
.
runner
.
AndroidJUnit4
;
import
android
.
support
.
test
.
uiautomator
.
UiObject
;
import
android
.
support
.
test
.
uiautomator
.
UiSelector
;
import
junit
.
framework
.
Assert
;
import
org
.
junit
.
Rule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
java
.
io
.
IOException
;
import
okhttp3
.
mockwebserver
.
MockResponse
;
import
okhttp3
.
mockwebserver
.
MockWebServer
;
import
static
android
.
support
.
test
.
espresso
.
action
.
ViewActions
.
click
;
import
static
org
.
junit
.
Assert
.
assertTrue
;
import
static
org
.
mozilla
.
focus
.
activity
.
TestHelper
.
waitingTime
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
RunWith
(
AndroidJUnit4
.
class
)
public
class
LocalSessionStorageTest
{
public
static
final
String
SESSION_STORAGE_HIT
=
"
Session
storage
has
value
"
;
public
static
final
String
LOCAL_STORAGE_MISS
=
"
Local
storage
empty
"
;
private
MockWebServer
webServer
;
Rule
public
ActivityTestRule
<
MainActivity
>
mActivityTestRule
=
new
ActivityTestRule
<
MainActivity
>
(
MainActivity
.
class
)
{
Override
protected
void
beforeActivityLaunched
(
)
{
super
.
beforeActivityLaunched
(
)
;
final
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
webServer
=
new
MockWebServer
(
)
;
try
{
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
storage_start
.
html
"
)
)
)
;
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
storage_check
.
html
"
)
)
)
;
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
storage_check
.
html
"
)
)
)
;
webServer
.
start
(
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
start
web
server
"
e
)
;
}
}
Override
protected
void
afterActivityFinished
(
)
{
super
.
afterActivityFinished
(
)
;
try
{
webServer
.
shutdown
(
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
stop
web
server
"
e
)
;
}
}
}
;
Test
public
void
testLocaleAndSessionStorageIsWrittenAndRemoved
(
)
throws
Exception
{
goToUrlFromHomeScreen
(
"
/
sessionStorage_start
"
)
;
final
UiObject
savedMsg
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
description
(
"
Values
written
to
storage
"
)
.
enabled
(
true
)
)
;
savedMsg
.
waitForExists
(
waitingTime
)
;
assertTrue
(
"
Website
loaded
and
values
written
to
local
/
session
storage
"
savedMsg
.
exists
(
)
)
;
goToUrlFromBrowserScreen
(
"
/
sessionStorage_check
"
)
;
{
final
UiObject
sessionStorageMsg
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
description
(
SESSION_STORAGE_HIT
)
.
enabled
(
true
)
)
;
sessionStorageMsg
.
waitForExists
(
waitingTime
)
;
assertTrue
(
sessionStorageMsg
.
exists
(
)
)
;
}
{
final
UiObject
localStorageMsg
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
description
(
LOCAL_STORAGE_MISS
)
.
enabled
(
true
)
)
;
localStorageMsg
.
waitForExists
(
waitingTime
)
;
assertTrue
(
localStorageMsg
.
exists
(
)
)
;
}
TestHelper
.
floatingEraseButton
.
perform
(
click
(
)
)
;
TestHelper
.
erasedMsg
.
waitForExists
(
waitingTime
)
;
Assert
.
assertTrue
(
TestHelper
.
erasedMsg
.
exists
(
)
)
;
Assert
.
assertTrue
(
TestHelper
.
urlBar
.
exists
(
)
)
;
goToUrlFromHomeScreen
(
"
/
sessionStorage_check
"
)
;
{
final
UiObject
sessionStorageMsg
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
description
(
"
Session
storage
empty
"
)
.
enabled
(
true
)
)
;
sessionStorageMsg
.
waitForExists
(
waitingTime
)
;
assertTrue
(
sessionStorageMsg
.
exists
(
)
)
;
}
{
final
UiObject
localStorageMsg
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
description
(
"
Local
storage
empty
"
)
.
enabled
(
true
)
)
;
localStorageMsg
.
waitForExists
(
waitingTime
)
;
assertTrue
(
localStorageMsg
.
exists
(
)
)
;
}
}
private
void
goToUrlFromHomeScreen
(
String
url
)
throws
Exception
{
TestHelper
.
urlBar
.
waitForExists
(
waitingTime
)
;
TestHelper
.
urlBar
.
click
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
webServer
.
url
(
url
)
.
toString
(
)
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
webView
.
waitForExists
(
waitingTime
)
;
}
private
void
goToUrlFromBrowserScreen
(
String
url
)
throws
Exception
{
TestHelper
.
browserURLbar
.
waitForExists
(
waitingTime
)
;
TestHelper
.
browserURLbar
.
click
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
webServer
.
url
(
url
)
.
toString
(
)
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
webView
.
waitForExists
(
waitingTime
)
;
}
}
