package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
android
.
support
.
test
.
espresso
.
DataInteraction
;
import
android
.
support
.
test
.
espresso
.
Espresso
;
import
android
.
support
.
test
.
espresso
.
ViewInteraction
;
import
android
.
support
.
test
.
rule
.
ActivityTestRule
;
import
android
.
support
.
test
.
runner
.
AndroidJUnit4
;
import
android
.
support
.
test
.
uiautomator
.
UiObjectNotFoundException
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Rule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
;
import
org
.
mozilla
.
focus
.
utils
.
AppConstants
;
import
static
android
.
support
.
test
.
espresso
.
Espresso
.
onData
;
import
static
android
.
support
.
test
.
espresso
.
Espresso
.
onView
;
import
static
android
.
support
.
test
.
espresso
.
Espresso
.
openActionBarOverflowOrOptionsMenu
;
import
static
android
.
support
.
test
.
espresso
.
action
.
ViewActions
.
click
;
import
static
android
.
support
.
test
.
espresso
.
action
.
ViewActions
.
closeSoftKeyboard
;
import
static
android
.
support
.
test
.
espresso
.
action
.
ViewActions
.
replaceText
;
import
static
android
.
support
.
test
.
espresso
.
assertion
.
ViewAssertions
.
matches
;
import
static
android
.
support
.
test
.
espresso
.
contrib
.
RecyclerViewActions
.
actionOnItemAtPosition
;
import
static
android
.
support
.
test
.
espresso
.
matcher
.
ViewMatchers
.
isDisplayed
;
import
static
android
.
support
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withClassName
;
import
static
android
.
support
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withId
;
import
static
android
.
support
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withText
;
import
static
junit
.
framework
.
Assert
.
assertFalse
;
import
static
junit
.
framework
.
Assert
.
assertTrue
;
import
static
org
.
hamcrest
.
Matchers
.
anything
;
import
static
org
.
hamcrest
.
Matchers
.
is
;
import
static
org
.
hamcrest
.
core
.
AllOf
.
allOf
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
import
static
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
childAtPosition
;
import
static
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
openSettings
;
import
static
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
mDevice
;
import
static
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
;
import
static
org
.
mozilla
.
focus
.
web
.
WebViewProviderKt
.
ENGINE_PREF_STRING_KEY
;
RunWith
(
AndroidJUnit4
.
class
)
public
class
URLAutocompleteTest
{
private
String
site
=
"
680news
.
com
"
;
private
DataInteraction
CustomURLRow
=
onData
(
anything
(
)
)
.
inAdapterView
(
allOf
(
withId
(
android
.
R
.
id
.
list
)
childAtPosition
(
withId
(
android
.
R
.
id
.
list_container
)
0
)
)
)
.
atPosition
(
4
)
;
private
DataInteraction
CustomURLRow_old
=
onData
(
anything
(
)
)
.
inAdapterView
(
allOf
(
withId
(
android
.
R
.
id
.
list
)
childAtPosition
(
withClassName
(
is
(
"
android
.
widget
.
LinearLayout
"
)
)
0
)
)
)
.
atPosition
(
4
)
;
private
ViewInteraction
AutoCompleteDialog
=
onView
(
allOf
(
withId
(
R
.
id
.
recycler_view
)
childAtPosition
(
withId
(
android
.
R
.
id
.
list_container
)
0
)
)
)
;
Rule
public
ActivityTestRule
<
MainActivity
>
mActivityTestRule
=
new
ActivityTestRule
<
MainActivity
>
(
MainActivity
.
class
)
{
Override
protected
void
beforeActivityLaunched
(
)
{
super
.
beforeActivityLaunched
(
)
;
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
if
(
AppConstants
.
INSTANCE
.
isKlarBuild
(
)
&
&
!
AppConstants
.
INSTANCE
.
isGeckoBuild
(
)
)
{
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
ENGINE_PREF_STRING_KEY
true
)
.
apply
(
)
;
}
}
}
;
After
public
void
tearDown
(
)
{
mActivityTestRule
.
getActivity
(
)
.
finishAndRemoveTask
(
)
;
}
Test
public
void
CompletionTest
(
)
throws
UiObjectNotFoundException
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
"
mozilla
"
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
getText
(
)
.
equals
(
"
mozilla
.
org
"
)
)
;
TestHelper
.
cleartextField
.
click
(
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
getText
(
)
.
equals
(
"
Search
or
enter
address
"
)
)
;
assertFalse
(
TestHelper
.
hint
.
exists
(
)
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
"
http
:
/
/
www
.
mozilla
.
org
"
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
getText
(
)
.
equals
(
"
http
:
/
/
www
.
mozilla
.
org
"
)
)
;
}
Test
public
void
CustomCompletionTest
(
)
throws
UiObjectNotFoundException
{
OpenCustomCompleteDialog
(
)
;
toggleAutocomplete
(
)
;
addAutoComplete
(
site
)
;
exitToTop
(
)
;
checkACOn
(
site
)
;
OpenCustomCompleteDialog
(
)
;
removeACSite
(
)
;
exitToTop
(
)
;
checkACOff
(
site
.
substring
(
0
3
)
)
;
OpenCustomCompleteDialog
(
)
;
toggleAutocomplete
(
)
;
}
Test
public
void
DisableCCwithSiteTest
(
)
throws
UiObjectNotFoundException
{
OpenCustomCompleteDialog
(
)
;
toggleAutocomplete
(
)
;
addAutoComplete
(
site
)
;
Espresso
.
pressBack
(
)
;
toggleAutocomplete
(
)
;
Espresso
.
pressBack
(
)
;
Espresso
.
pressBack
(
)
;
Espresso
.
pressBack
(
)
;
checkACOff
(
site
.
substring
(
0
3
)
)
;
OpenCustomCompleteDialog
(
)
;
toggleAutocomplete
(
)
;
Espresso
.
pressBack
(
)
;
Espresso
.
pressBack
(
)
;
Espresso
.
pressBack
(
)
;
checkACOn
(
site
)
;
OpenCustomCompleteDialog
(
)
;
removeACSite
(
)
;
Espresso
.
pressBack
(
)
;
toggleAutocomplete
(
)
;
}
Test
public
void
DuplicateACSiteTest
(
)
{
OpenCustomCompleteDialog
(
)
;
toggleAutocomplete
(
)
;
addAutoComplete
(
site
)
;
exitToTop
(
)
;
OpenCustomCompleteDialog
(
)
;
addAutoComplete
(
site
false
)
;
onView
(
withId
(
R
.
id
.
domainView
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
onView
(
withId
(
R
.
id
.
save
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
Espresso
.
pressBack
(
)
;
Espresso
.
pressBack
(
)
;
removeACSite
(
)
;
Espresso
.
pressBack
(
)
;
toggleAutocomplete
(
)
;
}
private
void
exitToTop
(
)
{
Espresso
.
pressBack
(
)
;
Espresso
.
pressBack
(
)
;
Espresso
.
pressBack
(
)
;
Espresso
.
pressBack
(
)
;
}
private
void
toggleAutocomplete
(
)
{
onView
(
withText
(
"
Add
and
manage
custom
autocomplete
URLs
.
"
)
)
.
perform
(
click
(
)
)
;
}
private
void
OpenCustomCompleteDialog
(
)
{
mDevice
.
waitForIdle
(
)
;
openSettings
(
)
;
onView
(
withText
(
"
Search
"
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
.
perform
(
click
(
)
)
;
onView
(
withText
(
"
URL
Autocomplete
"
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
.
perform
(
click
(
)
)
;
mDevice
.
waitForIdle
(
)
;
}
private
void
checkACOff
(
String
url
)
throws
UiObjectNotFoundException
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
url
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
getText
(
)
.
equals
(
url
)
)
;
TestHelper
.
cleartextField
.
click
(
)
;
}
private
void
checkACOn
(
String
url
)
throws
UiObjectNotFoundException
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
url
.
substring
(
0
1
)
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
getText
(
)
.
equals
(
url
)
)
;
TestHelper
.
cleartextField
.
click
(
)
;
}
private
void
removeACSite
(
)
{
AutoCompleteDialog
.
perform
(
actionOnItemAtPosition
(
4
click
(
)
)
)
;
mDevice
.
waitForIdle
(
)
;
openActionBarOverflowOrOptionsMenu
(
InstrumentationRegistry
.
getContext
(
)
)
;
mDevice
.
waitForIdle
(
)
;
onView
(
withText
(
"
Remove
"
)
)
.
perform
(
click
(
)
)
;
onView
(
withId
(
R
.
id
.
checkbox
)
)
.
perform
(
(
click
(
)
)
)
;
onView
(
withId
(
R
.
id
.
remove
)
)
.
perform
(
(
click
(
)
)
)
;
}
private
void
addAutoComplete
(
String
sitename
boolean
.
.
.
checkSuccess
)
{
AutoCompleteDialog
.
perform
(
actionOnItemAtPosition
(
4
click
(
)
)
)
;
mDevice
.
waitForIdle
(
)
;
onView
(
withText
(
"
+
Add
custom
URL
"
)
)
.
perform
(
click
(
)
)
;
onView
(
withId
(
R
.
id
.
domainView
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
mDevice
.
waitForIdle
(
)
;
onView
(
withId
(
R
.
id
.
domainView
)
)
.
perform
(
replaceText
(
sitename
)
closeSoftKeyboard
(
)
)
;
onView
(
withId
(
R
.
id
.
save
)
)
.
perform
(
click
(
)
)
;
if
(
checkSuccess
=
=
null
)
{
onView
(
withText
(
"
Custom
URLs
"
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
onView
(
allOf
(
withText
(
sitename
)
withId
(
R
.
id
.
domainView
)
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
mDevice
.
waitForIdle
(
)
;
}
}
}
