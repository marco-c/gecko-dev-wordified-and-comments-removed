package
org
.
mozilla
.
focus
.
activity
import
android
.
content
.
Intent
import
androidx
.
test
.
espresso
.
action
.
ViewActions
import
androidx
.
test
.
internal
.
runner
.
junit4
.
AndroidJUnit4ClassRunner
import
androidx
.
test
.
uiautomator
.
By
import
androidx
.
test
.
uiautomator
.
UiObjectNotFoundException
import
androidx
.
test
.
uiautomator
.
Until
import
okhttp3
.
mockwebserver
.
MockResponse
import
okhttp3
.
mockwebserver
.
MockWebServer
import
org
.
hamcrest
.
core
.
IsNull
import
org
.
junit
.
After
import
org
.
junit
.
Assert
import
org
.
junit
.
Before
import
org
.
junit
.
Rule
import
org
.
junit
.
Test
import
org
.
junit
.
runner
.
RunWith
import
org
.
mozilla
.
focus
.
helpers
.
MainActivityFirstrunTestRule
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
openNotification
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
pressEnterKey
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
pressHomeKey
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
readTestAsset
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitForWebContent
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
import
java
.
io
.
IOException
RunWith
(
AndroidJUnit4ClassRunner
:
:
class
)
class
EraseAllUserDataTest
{
private
var
webServer
:
MockWebServer
?
=
null
get
:
Rule
var
mActivityTestRule
=
MainActivityFirstrunTestRule
(
showFirstRun
=
false
)
Before
fun
setUp
(
)
{
webServer
=
MockWebServer
(
)
try
{
webServer
!
!
.
enqueue
(
MockResponse
(
)
.
setBody
(
readTestAsset
(
"
plain_test
.
html
"
)
)
)
webServer
!
!
.
enqueue
(
MockResponse
(
)
.
setBody
(
readTestAsset
(
"
plain_test
.
html
"
)
)
)
webServer
!
!
.
enqueue
(
MockResponse
(
)
.
setBody
(
readTestAsset
(
"
plain_test
.
html
"
)
)
)
webServer
!
!
.
start
(
)
}
catch
(
e
:
IOException
)
{
throw
AssertionError
(
"
Could
not
start
web
server
"
e
)
}
}
After
fun
tearDown
(
)
{
mActivityTestRule
.
activity
.
finishAndRemoveTask
(
)
try
{
webServer
!
!
.
close
(
)
webServer
!
!
.
shutdown
(
)
}
catch
(
e
:
IOException
)
{
throw
AssertionError
(
"
Could
not
stop
web
server
"
e
)
}
}
Test
Throws
(
UiObjectNotFoundException
:
:
class
)
fun
TrashTest
(
)
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
webServer
!
!
.
url
(
TEST_PATH
)
.
toString
(
)
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
pressEnterKey
(
)
waitForWebContent
(
)
TestHelper
.
floatingEraseButton
.
perform
(
ViewActions
.
click
(
)
)
TestHelper
.
erasedMsg
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
TestHelper
.
erasedMsg
.
exists
(
)
)
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
}
Test
Throws
(
UiObjectNotFoundException
:
:
class
)
fun
systemBarTest
(
)
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
webServer
!
!
.
url
(
TEST_PATH
)
.
toString
(
)
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
pressEnterKey
(
)
waitForWebContent
(
)
TestHelper
.
menuButton
.
perform
(
ViewActions
.
click
(
)
)
TestHelper
.
blockCounterItem
.
waitForExists
(
waitingTime
)
openNotification
(
)
TestHelper
.
notificationBarDeleteItem
.
waitForExists
(
waitingTime
)
TestHelper
.
notificationBarDeleteItem
.
click
(
)
TestHelper
.
erasedMsg
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
TestHelper
.
erasedMsg
.
exists
(
)
)
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
Assert
.
assertFalse
(
TestHelper
.
menulist
.
exists
(
)
)
}
Test
Throws
(
UiObjectNotFoundException
:
:
class
)
fun
systemBarHomeViewTest
(
)
{
val
LAUNCH_TIMEOUT
=
5000
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
webServer
!
!
.
url
(
TEST_PATH
)
.
toString
(
)
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
pressEnterKey
(
)
waitForWebContent
(
)
pressHomeKey
(
)
openNotification
(
)
TestHelper
.
notificationBarDeleteItem
.
waitForExists
(
waitingTime
)
TestHelper
.
notificationBarDeleteItem
.
click
(
)
val
launcherPackage
=
TestHelper
.
mDevice
.
launcherPackageName
org
.
junit
.
Assert
.
assertThat
(
launcherPackage
IsNull
.
notNullValue
(
)
)
TestHelper
.
mDevice
.
wait
(
Until
.
hasObject
(
By
.
pkg
(
launcherPackage
)
.
depth
(
0
)
)
LAUNCH_TIMEOUT
.
toLong
(
)
)
mActivityTestRule
.
launchActivity
(
Intent
(
Intent
.
ACTION_MAIN
)
)
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
}
companion
object
{
private
const
val
TEST_PATH
=
"
/
"
}
}
