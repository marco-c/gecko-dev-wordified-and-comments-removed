package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
android
.
support
.
test
.
espresso
.
IdlingRegistry
;
import
android
.
support
.
test
.
espresso
.
web
.
webdriver
.
Locator
;
import
android
.
support
.
test
.
rule
.
ActivityTestRule
;
import
android
.
support
.
test
.
runner
.
AndroidJUnit4
;
import
android
.
support
.
test
.
uiautomator
.
By
;
import
android
.
support
.
test
.
uiautomator
.
Until
;
import
mozilla
.
components
.
browser
.
session
.
SessionManager
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Rule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
ext
.
ContextKt
;
import
org
.
mozilla
.
focus
.
helpers
.
SessionLoadedIdlingResource
;
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
;
import
org
.
mozilla
.
focus
.
utils
.
AppConstants
;
import
org
.
mozilla
.
focus
.
web
.
IWebView
;
import
okhttp3
.
mockwebserver
.
MockWebServer
;
import
static
android
.
support
.
test
.
espresso
.
Espresso
.
onView
;
import
static
android
.
support
.
test
.
espresso
.
action
.
ViewActions
.
click
;
import
static
android
.
support
.
test
.
espresso
.
assertion
.
ViewAssertions
.
matches
;
import
static
android
.
support
.
test
.
espresso
.
matcher
.
ViewMatchers
.
isDisplayed
;
import
static
android
.
support
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withContentDescription
;
import
static
android
.
support
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withId
;
import
static
android
.
support
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withText
;
import
static
android
.
support
.
test
.
espresso
.
web
.
assertion
.
WebViewAssertions
.
webMatches
;
import
static
android
.
support
.
test
.
espresso
.
web
.
sugar
.
Web
.
onWebView
;
import
static
android
.
support
.
test
.
espresso
.
web
.
webdriver
.
DriverAtoms
.
findElement
;
import
static
android
.
support
.
test
.
espresso
.
web
.
webdriver
.
DriverAtoms
.
getText
;
import
static
junit
.
framework
.
TestCase
.
assertTrue
;
import
static
org
.
hamcrest
.
Matchers
.
equalTo
;
import
static
org
.
hamcrest
.
Matchers
.
is
;
import
static
org
.
hamcrest
.
Matchers
.
not
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
import
static
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
navigateToMockWebServer
;
import
static
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
onFloatingEraseButton
;
import
static
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
onFloatingTabsButton
;
import
static
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
createMockResponseFromAsset
;
import
static
org
.
mozilla
.
focus
.
helpers
.
WebViewFakeLongPress
.
injectHitTarget
;
RunWith
(
AndroidJUnit4
.
class
)
public
class
MultitaskingTest
{
Rule
public
ActivityTestRule
<
MainActivity
>
mActivityTestRule
=
new
ActivityTestRule
<
MainActivity
>
(
MainActivity
.
class
)
{
Override
protected
void
beforeActivityLaunched
(
)
{
super
.
beforeActivityLaunched
(
)
;
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
org
.
junit
.
Assume
.
assumeFalse
(
AppConstants
.
INSTANCE
.
isGeckoBuild
(
)
)
;
org
.
junit
.
Assume
.
assumeFalse
(
AppConstants
.
INSTANCE
.
isKlarBuild
(
)
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
}
}
;
private
MockWebServer
webServer
;
private
SessionLoadedIdlingResource
loadingIdlingResource
;
Before
public
void
startWebServer
(
)
throws
Exception
{
webServer
=
new
MockWebServer
(
)
;
webServer
.
enqueue
(
createMockResponseFromAsset
(
"
tab1
.
html
"
)
)
;
webServer
.
enqueue
(
createMockResponseFromAsset
(
"
tab2
.
html
"
)
)
;
webServer
.
enqueue
(
createMockResponseFromAsset
(
"
tab3
.
html
"
)
)
;
webServer
.
enqueue
(
createMockResponseFromAsset
(
"
tab2
.
html
"
)
)
;
webServer
.
start
(
)
;
loadingIdlingResource
=
new
SessionLoadedIdlingResource
(
)
;
IdlingRegistry
.
getInstance
(
)
.
register
(
loadingIdlingResource
)
;
}
After
public
void
stopWebServer
(
)
throws
Exception
{
IdlingRegistry
.
getInstance
(
)
.
unregister
(
loadingIdlingResource
)
;
mActivityTestRule
.
getActivity
(
)
.
finishAndRemoveTask
(
)
;
webServer
.
shutdown
(
)
;
}
Test
public
void
testVisitingMultipleSites
(
)
{
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
TestHelper
.
waitingTime
)
;
navigateToMockWebServer
(
webServer
"
tab1
.
html
"
)
;
checkTabIsLoaded
(
"
Tab
1
"
)
;
onFloatingEraseButton
(
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
onFloatingTabsButton
(
)
.
check
(
matches
(
not
(
isDisplayed
(
)
)
)
)
;
}
{
longPressLink
(
"
tab2
"
"
Tab
2
"
"
tab2
.
html
"
)
;
openInNewTab
(
)
;
checkTabIsLoaded
(
"
Tab
1
"
)
;
onFloatingEraseButton
(
)
.
check
(
matches
(
not
(
isDisplayed
(
)
)
)
)
;
onFloatingTabsButton
(
)
.
check
(
matches
(
isDisplayed
(
)
)
)
.
check
(
matches
(
withContentDescription
(
is
(
"
Tabs
open
:
2
"
)
)
)
)
;
}
{
longPressLink
(
"
tab3
"
"
Tab
3
"
"
tab3
.
html
"
)
;
openInNewTab
(
)
;
checkTabIsLoaded
(
"
Tab
1
"
)
;
onFloatingEraseButton
(
)
.
check
(
matches
(
not
(
isDisplayed
(
)
)
)
)
;
onFloatingTabsButton
(
)
.
check
(
matches
(
isDisplayed
(
)
)
)
.
check
(
matches
(
withContentDescription
(
is
(
"
Tabs
open
:
3
"
)
)
)
)
;
}
{
onFloatingTabsButton
(
)
.
perform
(
click
(
)
)
;
onView
(
withText
(
webServer
.
getHostName
(
)
+
"
/
tab2
.
html
"
)
)
.
perform
(
click
(
)
)
;
checkTabIsLoaded
(
"
Tab
2
"
)
;
}
{
onFloatingTabsButton
(
)
.
perform
(
click
(
)
)
;
onView
(
withText
(
R
.
string
.
tabs_tray_action_erase
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
.
perform
(
click
(
)
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
TestHelper
.
waitingTime
)
)
;
final
SessionManager
sessionManager
=
ContextKt
.
getComponents
(
InstrumentationRegistry
.
getTargetContext
(
)
.
getApplicationContext
(
)
)
.
getSessionManager
(
)
;
assertTrue
(
sessionManager
.
getSessions
(
)
.
isEmpty
(
)
)
;
}
}
private
void
checkTabIsLoaded
(
String
title
)
{
onWebView
(
)
.
withElement
(
findElement
(
Locator
.
ID
"
content
"
)
)
.
check
(
webMatches
(
getText
(
)
equalTo
(
title
)
)
)
;
}
private
void
longPressLink
(
String
id
String
label
String
path
)
{
onWebView
(
)
.
withElement
(
findElement
(
Locator
.
ID
id
)
)
.
check
(
webMatches
(
getText
(
)
equalTo
(
label
)
)
)
;
simulateLinkLongPress
(
path
)
;
}
private
void
simulateLinkLongPress
(
String
path
)
{
onView
(
withId
(
R
.
id
.
webview
)
)
.
perform
(
injectHitTarget
(
new
IWebView
.
HitTarget
(
true
webServer
.
url
(
path
)
.
toString
(
)
false
null
)
)
)
;
}
private
void
openInNewTab
(
)
{
onView
(
withText
(
R
.
string
.
contextmenu_open_in_new_tab
)
)
.
perform
(
click
(
)
)
;
checkNewTabPopup
(
)
;
}
private
void
checkNewTabPopup
(
)
{
TestHelper
.
mDevice
.
wait
(
Until
.
findObject
(
By
.
res
(
TestHelper
.
getAppName
(
)
"
snackbar_text
"
)
)
5000
)
;
TestHelper
.
mDevice
.
wait
(
Until
.
gone
(
By
.
res
(
TestHelper
.
getAppName
(
)
"
snackbar_text
"
)
)
5000
)
;
}
}
