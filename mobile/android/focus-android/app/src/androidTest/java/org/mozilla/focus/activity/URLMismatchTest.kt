package
org
.
mozilla
.
focus
.
activity
import
android
.
view
.
KeyEvent
import
androidx
.
test
.
espresso
.
Espresso
import
androidx
.
test
.
espresso
.
action
.
ViewActions
import
androidx
.
test
.
espresso
.
assertion
.
ViewAssertions
import
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
import
androidx
.
test
.
internal
.
runner
.
junit4
.
AndroidJUnit4ClassRunner
import
androidx
.
test
.
uiautomator
.
UiObjectNotFoundException
import
androidx
.
test
.
uiautomator
.
UiSelector
import
org
.
hamcrest
.
Matchers
import
org
.
junit
.
After
import
org
.
junit
.
Assert
import
org
.
junit
.
Rule
import
org
.
junit
.
Test
import
org
.
junit
.
runner
.
RunWith
import
org
.
mozilla
.
focus
.
R
import
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
childAtPosition
import
org
.
mozilla
.
focus
.
helpers
.
MainActivityFirstrunTestRule
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
pressEnterKey
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
webPageLoadwaitingTime
RunWith
(
AndroidJUnit4ClassRunner
:
:
class
)
class
URLMismatchTest
{
get
:
Rule
var
mActivityTestRule
=
MainActivityFirstrunTestRule
(
showFirstRun
=
false
)
After
fun
tearDown
(
)
{
mActivityTestRule
.
activity
.
finishAndRemoveTask
(
)
}
Test
Throws
(
UiObjectNotFoundException
:
:
class
)
fun
MismatchTest
(
)
{
val
searchString
=
String
.
format
(
"
mozilla
focus
-
%
s
Search
"
"
google
"
)
val
googleWebView
=
TestHelper
.
mDevice
.
findObject
(
UiSelector
(
)
.
description
(
searchString
)
.
className
(
"
android
.
webkit
.
WebView
"
)
)
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
"
mozilla
"
if
(
TestHelper
.
searchSuggestionsTitle
.
exists
(
)
)
{
TestHelper
.
searchSuggestionsButtonYes
.
waitForExists
(
waitingTime
)
TestHelper
.
searchSuggestionsButtonYes
.
click
(
)
}
TestHelper
.
mDevice
.
pressKeyCode
(
KeyEvent
.
KEYCODE_SPACE
)
TestHelper
.
suggestionList
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
TestHelper
.
suggestionList
.
childCount
>
=
1
)
Espresso
.
onView
(
Matchers
.
allOf
(
ViewMatchers
.
withText
(
Matchers
.
containsString
(
"
mozilla
"
)
)
ViewMatchers
.
withId
(
R
.
id
.
suggestion
)
ViewMatchers
.
isDescendantOfA
(
childAtPosition
(
ViewMatchers
.
withId
(
R
.
id
.
suggestionList
)
1
)
)
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
pressEnterKey
(
)
googleWebView
.
waitForExists
(
waitingTime
)
TestHelper
.
progressBar
.
waitUntilGone
(
webPageLoadwaitingTime
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
display_url
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
withText
(
Matchers
.
containsString
(
"
mozilla
"
)
)
)
)
.
perform
(
ViewActions
.
click
(
)
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
urlView
)
)
.
perform
(
ViewActions
.
click
(
)
ViewActions
.
replaceText
(
"
mozilla
"
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
withText
(
"
mozilla
.
org
"
)
)
)
.
perform
(
ViewActions
.
pressImeActionButton
(
)
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
webview
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
TestHelper
.
progressBar
.
waitUntilGone
(
webPageLoadwaitingTime
)
Espresso
.
onView
(
ViewMatchers
.
withId
(
R
.
id
.
display_url
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
withText
(
Matchers
.
containsString
(
"
www
.
mozilla
.
org
"
)
)
)
)
}
}
