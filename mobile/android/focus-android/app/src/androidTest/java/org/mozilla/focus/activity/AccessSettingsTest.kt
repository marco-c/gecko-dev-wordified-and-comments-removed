package
org
.
mozilla
.
focus
.
activity
import
androidx
.
test
.
internal
.
runner
.
junit4
.
AndroidJUnit4ClassRunner
import
androidx
.
test
.
uiautomator
.
UiSelector
import
org
.
junit
.
Assert
import
org
.
junit
.
Rule
import
org
.
junit
.
Test
import
org
.
junit
.
runner
.
RunWith
import
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
openSettings
import
org
.
mozilla
.
focus
.
helpers
.
MainActivityFirstrunTestRule
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
RunWith
(
AndroidJUnit4ClassRunner
:
:
class
)
class
AccessSettingsTest
{
get
:
Rule
var
mActivityTestRule
=
MainActivityFirstrunTestRule
(
showFirstRun
=
false
)
val
generalHeading
=
TestHelper
.
mDevice
.
findObject
(
UiSelector
(
)
.
text
(
"
General
"
)
.
resourceId
(
"
android
:
id
/
title
"
)
)
val
privacyHeading
=
TestHelper
.
mDevice
.
findObject
(
UiSelector
(
)
.
text
(
"
Privacy
&
Security
"
)
.
resourceId
(
"
android
:
id
/
title
"
)
)
val
searchHeading
=
TestHelper
.
mDevice
.
findObject
(
UiSelector
(
)
.
text
(
"
Search
"
)
.
resourceId
(
"
android
:
id
/
title
"
)
)
val
mozHeading
=
TestHelper
.
mDevice
.
findObject
(
UiSelector
(
)
.
text
(
"
Mozilla
"
)
.
resourceId
(
"
android
:
id
/
title
"
)
)
Test
fun
AccessSettingsTest
(
)
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
openSettings
(
)
generalHeading
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
generalHeading
.
exists
(
)
)
Assert
.
assertTrue
(
searchHeading
.
exists
(
)
)
Assert
.
assertTrue
(
privacyHeading
.
exists
(
)
)
Assert
.
assertTrue
(
mozHeading
.
exists
(
)
)
}
}
