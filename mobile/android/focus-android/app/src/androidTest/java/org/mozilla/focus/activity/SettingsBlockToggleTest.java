package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
android
.
preference
.
PreferenceManager
;
import
androidx
.
test
.
InstrumentationRegistry
;
import
androidx
.
test
.
rule
.
ActivityTestRule
;
import
androidx
.
test
.
runner
.
AndroidJUnit4
;
import
androidx
.
test
.
uiautomator
.
UiObject
;
import
androidx
.
test
.
uiautomator
.
UiObjectNotFoundException
;
import
androidx
.
test
.
uiautomator
.
UiSelector
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Rule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
;
import
java
.
io
.
IOException
;
import
okhttp3
.
mockwebserver
.
MockResponse
;
import
okhttp3
.
mockwebserver
.
MockWebServer
;
import
static
junit
.
framework
.
Assert
.
assertTrue
;
import
static
org
.
junit
.
Assert
.
assertFalse
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
import
static
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
openSettings
;
import
static
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
;
RunWith
(
AndroidJUnit4
.
class
)
public
class
SettingsBlockToggleTest
{
private
static
final
String
TEST_PATH
=
"
/
"
;
private
MockWebServer
webServer
;
Rule
public
ActivityTestRule
<
MainActivity
>
mActivityTestRule
=
new
ActivityTestRule
<
MainActivity
>
(
MainActivity
.
class
)
{
Override
protected
void
beforeActivityLaunched
(
)
{
super
.
beforeActivityLaunched
(
)
;
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
TestHelper
.
selectGeckoForKlar
(
)
;
webServer
=
new
MockWebServer
(
)
;
try
{
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
plain_test
.
html
"
)
)
)
;
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
plain_test
.
html
"
)
)
)
;
webServer
.
start
(
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
start
web
server
"
e
)
;
}
}
Override
protected
void
afterActivityFinished
(
)
{
super
.
afterActivityFinished
(
)
;
try
{
webServer
.
close
(
)
;
webServer
.
shutdown
(
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
stop
web
server
"
e
)
;
}
}
}
;
After
public
void
tearDown
(
)
{
mActivityTestRule
.
getActivity
(
)
.
finishAndRemoveTask
(
)
;
}
Test
public
void
SettingsToggleTest
(
)
throws
UiObjectNotFoundException
{
UiObject
privacyHeading
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
text
(
"
Privacy
&
Security
"
)
.
resourceId
(
"
android
:
id
/
title
"
)
)
;
UiObject
blockAdTrackerEntry
=
TestHelper
.
settingsMenu
.
getChild
(
new
UiSelector
(
)
.
className
(
"
android
.
widget
.
LinearLayout
"
)
.
instance
(
1
)
)
;
UiObject
blockAdTrackerSwitch
=
blockAdTrackerEntry
.
getChild
(
new
UiSelector
(
)
.
resourceId
(
TestHelper
.
getAppName
(
)
+
"
:
id
/
switchWidget
"
)
)
;
UiObject
blockAnalyticTrackerEntry
=
TestHelper
.
settingsMenu
.
getChild
(
new
UiSelector
(
)
.
className
(
"
android
.
widget
.
LinearLayout
"
)
.
instance
(
2
)
)
;
UiObject
blockAnalyticTrackerSwitch
=
blockAnalyticTrackerEntry
.
getChild
(
new
UiSelector
(
)
.
resourceId
(
TestHelper
.
getAppName
(
)
+
"
:
id
/
switchWidget
"
)
)
;
UiObject
blockSocialTrackerEntry
=
TestHelper
.
settingsMenu
.
getChild
(
new
UiSelector
(
)
.
className
(
"
android
.
widget
.
LinearLayout
"
)
.
instance
(
4
)
)
;
UiObject
blockSocialTrackerSwitch
=
blockSocialTrackerEntry
.
getChild
(
new
UiSelector
(
)
.
resourceId
(
TestHelper
.
getAppName
(
)
+
"
:
id
/
switchWidget
"
)
)
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
webServer
.
url
(
TEST_PATH
)
.
toString
(
)
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
waitForWebContent
(
)
;
assertTrue
(
TestHelper
.
browserURLbar
.
getText
(
)
.
contains
(
webServer
.
url
(
TEST_PATH
)
.
toString
(
)
)
)
;
assertTrue
(
!
TestHelper
.
lockIcon
.
exists
(
)
)
;
openSettings
(
)
;
privacyHeading
.
waitForExists
(
waitingTime
)
;
privacyHeading
.
click
(
)
;
String
blockAdTrackerValue
=
blockAdTrackerSwitch
.
getText
(
)
;
String
blockAnalyticTrackerValue
=
blockAnalyticTrackerSwitch
.
getText
(
)
;
String
blockSocialTrackerValue
=
blockSocialTrackerSwitch
.
getText
(
)
;
blockAdTrackerEntry
.
click
(
)
;
blockAnalyticTrackerEntry
.
click
(
)
;
blockSocialTrackerEntry
.
click
(
)
;
assertFalse
(
blockAdTrackerSwitch
.
getText
(
)
.
equals
(
blockAdTrackerValue
)
)
;
assertFalse
(
blockAnalyticTrackerSwitch
.
getText
(
)
.
equals
(
blockAnalyticTrackerValue
)
)
;
assertFalse
(
blockSocialTrackerSwitch
.
getText
(
)
.
equals
(
blockSocialTrackerValue
)
)
;
blockAdTrackerEntry
.
click
(
)
;
blockAnalyticTrackerEntry
.
click
(
)
;
blockSocialTrackerEntry
.
click
(
)
;
assertTrue
(
blockAdTrackerSwitch
.
getText
(
)
.
equals
(
blockAdTrackerValue
)
)
;
assertTrue
(
blockAnalyticTrackerSwitch
.
getText
(
)
.
equals
(
blockAnalyticTrackerValue
)
)
;
assertTrue
(
blockSocialTrackerSwitch
.
getText
(
)
.
equals
(
blockSocialTrackerValue
)
)
;
TestHelper
.
pressBackKey
(
)
;
TestHelper
.
pressBackKey
(
)
;
TestHelper
.
waitForWebContent
(
)
;
assertTrue
(
TestHelper
.
browserURLbar
.
getText
(
)
.
contains
(
webServer
.
url
(
TEST_PATH
)
.
toString
(
)
)
)
;
assertTrue
(
!
TestHelper
.
lockIcon
.
exists
(
)
)
;
}
}
