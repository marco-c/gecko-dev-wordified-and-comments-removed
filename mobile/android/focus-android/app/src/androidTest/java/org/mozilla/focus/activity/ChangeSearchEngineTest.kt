package
org
.
mozilla
.
focus
.
activity
import
android
.
view
.
KeyEvent
import
android
.
widget
.
RadioButton
import
androidx
.
test
.
espresso
.
Espresso
import
androidx
.
test
.
espresso
.
assertion
.
ViewAssertions
import
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
import
androidx
.
test
.
uiautomator
.
UiObjectNotFoundException
import
androidx
.
test
.
uiautomator
.
UiScrollable
import
androidx
.
test
.
uiautomator
.
UiSelector
import
org
.
hamcrest
.
Matchers
import
org
.
junit
.
After
import
org
.
junit
.
Assert
import
org
.
junit
.
Ignore
import
org
.
junit
.
Rule
import
org
.
junit
.
Test
import
org
.
junit
.
runner
.
RunWith
import
org
.
junit
.
runners
.
Parameterized
import
org
.
mozilla
.
focus
.
R
import
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
childAtPosition
import
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
openSettings
import
org
.
mozilla
.
focus
.
helpers
.
MainActivityFirstrunTestRule
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
appName
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
pressBackKey
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
pressEnterKey
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
webPageLoadwaitingTime
import
java
.
util
.
Arrays
RunWith
(
Parameterized
:
:
class
)
Ignore
(
"
This
test
was
written
specifically
for
WebView
and
needs
to
be
adapted
for
GeckoView
"
)
class
ChangeSearchEngineTest
{
Parameterized
.
Parameter
var
mSearchEngine
:
String
?
=
null
get
:
Rule
var
mActivityTestRule
=
MainActivityFirstrunTestRule
(
showFirstRun
=
false
)
After
fun
tearDown
(
)
{
mActivityTestRule
.
activity
.
finishAndRemoveTask
(
)
}
Suppress
(
"
LongMethod
"
)
Test
Throws
(
UiObjectNotFoundException
:
:
class
)
fun
SearchTest
(
)
{
val
searchMenu
=
TestHelper
.
settingsMenu
.
getChild
(
UiSelector
(
)
.
className
(
"
android
.
widget
.
LinearLayout
"
)
.
instance
(
2
)
)
val
searchEngineSelectorLabel
=
searchMenu
.
getChild
(
UiSelector
(
)
.
resourceId
(
"
android
:
id
/
title
"
)
.
text
(
"
Search
"
)
.
enabled
(
true
)
)
val
searchString
=
String
.
format
(
"
mozilla
focus
-
%
s
Search
"
mSearchEngine
)
val
googleWebView
=
TestHelper
.
mDevice
.
findObject
(
UiSelector
(
)
.
description
(
searchString
)
.
className
(
"
android
.
webkit
.
WebView
"
)
)
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
)
openSettings
(
)
TestHelper
.
settingsHeading
.
waitForExists
(
waitingTime
)
searchEngineSelectorLabel
.
waitForExists
(
waitingTime
)
searchEngineSelectorLabel
.
click
(
)
val
defaultSearchEngineLabel
=
TestHelper
.
settingsMenu
.
getChild
(
UiSelector
(
)
.
className
(
"
android
.
widget
.
LinearLayout
"
)
.
instance
(
0
)
)
defaultSearchEngineLabel
.
waitForExists
(
waitingTime
)
defaultSearchEngineLabel
.
click
(
)
val
searchEngineList
=
UiScrollable
(
UiSelector
(
)
.
resourceId
(
appName
+
"
:
id
/
search_engine_group
"
)
.
enabled
(
true
)
)
val
defaultEngineSelection
=
searchEngineList
.
getChildByText
(
UiSelector
(
)
.
className
(
RadioButton
:
:
class
.
java
)
mSearchEngine
)
defaultEngineSelection
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
defaultEngineSelection
.
text
=
=
mSearchEngine
)
defaultEngineSelection
.
click
(
)
pressBackKey
(
)
TestHelper
.
settingsHeading
.
waitForExists
(
waitingTime
)
val
defaultSearchEngine
=
TestHelper
.
mDevice
.
findObject
(
UiSelector
(
)
.
text
(
mSearchEngine
)
.
resourceId
(
"
android
:
id
/
summary
"
)
)
Assert
.
assertTrue
(
defaultSearchEngine
.
text
=
=
mSearchEngine
)
pressBackKey
(
)
pressBackKey
(
)
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
"
"
pressEnterKey
(
)
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
"
mozilla
"
if
(
TestHelper
.
searchSuggestionsTitle
.
exists
(
)
)
{
TestHelper
.
searchSuggestionsButtonYes
.
waitForExists
(
waitingTime
)
TestHelper
.
searchSuggestionsButtonYes
.
click
(
)
}
TestHelper
.
mDevice
.
pressKeyCode
(
KeyEvent
.
KEYCODE_SPACE
)
TestHelper
.
suggestionList
.
waitForExists
(
waitingTime
)
Assert
.
assertTrue
(
TestHelper
.
suggestionList
.
childCount
>
=
1
)
Espresso
.
onView
(
Matchers
.
allOf
(
ViewMatchers
.
withText
(
Matchers
.
containsString
(
"
mozilla
"
)
)
ViewMatchers
.
withId
(
R
.
id
.
searchView
)
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
var
count
=
0
val
maxCount
=
3
while
(
count
<
maxCount
)
{
Espresso
.
onView
(
Matchers
.
allOf
(
ViewMatchers
.
withText
(
Matchers
.
containsString
(
"
mozilla
"
)
)
ViewMatchers
.
withId
(
R
.
id
.
suggestion
)
ViewMatchers
.
isDescendantOfA
(
childAtPosition
(
ViewMatchers
.
withId
(
R
.
id
.
suggestionList
)
count
)
)
)
)
.
check
(
ViewAssertions
.
matches
(
ViewMatchers
.
isDisplayed
(
)
)
)
count
+
+
}
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
TestHelper
.
inlineAutocompleteEditText
.
click
(
)
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
TestHelper
.
inlineAutocompleteEditText
.
text
=
"
mozilla
focus
"
pressEnterKey
(
)
googleWebView
.
waitForExists
(
waitingTime
)
TestHelper
.
progressBar
.
waitUntilGone
(
webPageLoadwaitingTime
)
Assert
.
assertTrue
(
TestHelper
.
browserURLbar
.
text
.
contains
(
mSearchEngine
!
!
.
toLowerCase
(
)
)
)
Assert
.
assertTrue
(
TestHelper
.
browserURLbar
.
text
.
contains
(
"
mozilla
"
)
)
Assert
.
assertTrue
(
TestHelper
.
browserURLbar
.
text
.
contains
(
"
focus
"
)
)
}
companion
object
{
Parameterized
.
Parameters
fun
data
(
)
:
Iterable
<
*
>
{
return
Arrays
.
asList
(
"
Google
"
"
DuckDuckGo
"
)
}
}
}
