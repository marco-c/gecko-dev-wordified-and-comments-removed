package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
os
.
RemoteException
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
android
.
support
.
test
.
rule
.
ActivityTestRule
;
import
android
.
support
.
test
.
runner
.
AndroidJUnit4
;
import
android
.
support
.
test
.
uiautomator
.
By
;
import
android
.
support
.
test
.
uiautomator
.
UiObjectNotFoundException
;
import
android
.
support
.
test
.
uiautomator
.
Until
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Rule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
;
import
static
android
.
support
.
test
.
espresso
.
action
.
ViewActions
.
click
;
import
static
junit
.
framework
.
Assert
.
assertFalse
;
import
static
junit
.
framework
.
Assert
.
assertTrue
;
import
static
org
.
hamcrest
.
core
.
IsNull
.
notNullValue
;
import
static
org
.
junit
.
Assert
.
assertThat
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
import
static
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
;
RunWith
(
AndroidJUnit4
.
class
)
public
class
TrashcanTest
{
Rule
public
ActivityTestRule
<
MainActivity
>
mActivityTestRule
=
new
ActivityTestRule
<
MainActivity
>
(
MainActivity
.
class
)
{
Override
protected
void
beforeActivityLaunched
(
)
{
super
.
beforeActivityLaunched
(
)
;
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
}
}
;
After
public
void
tearDown
(
)
throws
Exception
{
mActivityTestRule
.
getActivity
(
)
.
finishAndRemoveTask
(
)
;
}
Test
public
void
TrashTest
(
)
throws
InterruptedException
UiObjectNotFoundException
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
"
mozilla
"
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
waitForWebContent
(
)
;
TestHelper
.
floatingEraseButton
.
perform
(
click
(
)
)
;
TestHelper
.
erasedMsg
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
erasedMsg
.
exists
(
)
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
;
}
Test
public
void
systemBarTest
(
)
throws
InterruptedException
UiObjectNotFoundException
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
"
mozilla
"
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
waitForWebContent
(
)
;
TestHelper
.
menuButton
.
perform
(
click
(
)
)
;
TestHelper
.
blockCounterItem
.
waitForExists
(
waitingTime
)
;
TestHelper
.
openNotification
(
)
;
TestHelper
.
notificationBarDeleteItem
.
waitForExists
(
waitingTime
)
;
TestHelper
.
notificationBarDeleteItem
.
click
(
)
;
TestHelper
.
erasedMsg
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
erasedMsg
.
exists
(
)
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
;
assertFalse
(
TestHelper
.
menulist
.
exists
(
)
)
;
}
Test
public
void
systemBarHomeViewTest
(
)
throws
InterruptedException
UiObjectNotFoundException
RemoteException
{
final
int
LAUNCH_TIMEOUT
=
5000
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
"
mozilla
"
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
waitForWebContent
(
)
;
TestHelper
.
pressHomeKey
(
)
;
TestHelper
.
openNotification
(
)
;
TestHelper
.
notificationBarDeleteItem
.
waitForExists
(
waitingTime
)
;
TestHelper
.
notificationBarDeleteItem
.
click
(
)
;
final
String
launcherPackage
=
TestHelper
.
mDevice
.
getLauncherPackageName
(
)
;
assertThat
(
launcherPackage
notNullValue
(
)
)
;
TestHelper
.
mDevice
.
wait
(
Until
.
hasObject
(
By
.
pkg
(
launcherPackage
)
.
depth
(
0
)
)
LAUNCH_TIMEOUT
)
;
mActivityTestRule
.
launchActivity
(
new
Intent
(
Intent
.
ACTION_MAIN
)
)
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
;
}
}
