package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
androidx
.
preference
.
PreferenceManager
;
import
androidx
.
test
.
InstrumentationRegistry
;
import
androidx
.
test
.
espresso
.
IdlingRegistry
;
import
androidx
.
test
.
rule
.
ActivityTestRule
;
import
androidx
.
test
.
runner
.
AndroidJUnit4
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
Rule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
exceptions
.
ExceptionDomains
;
import
org
.
mozilla
.
focus
.
helpers
.
SessionLoadedIdlingResource
;
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
;
import
java
.
io
.
IOException
;
import
okhttp3
.
mockwebserver
.
MockResponse
;
import
okhttp3
.
mockwebserver
.
MockWebServer
;
import
static
androidx
.
test
.
espresso
.
Espresso
.
onView
;
import
static
androidx
.
test
.
espresso
.
action
.
ViewActions
.
click
;
import
static
androidx
.
test
.
espresso
.
action
.
ViewActions
.
pressImeActionButton
;
import
static
androidx
.
test
.
espresso
.
action
.
ViewActions
.
typeText
;
import
static
androidx
.
test
.
espresso
.
assertion
.
ViewAssertions
.
matches
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
hasFocus
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
isChecked
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
isDisplayed
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withId
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withText
;
import
static
org
.
hamcrest
.
Matchers
.
not
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
import
static
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
;
RunWith
(
AndroidJUnit4
.
class
)
public
class
ToggleBlockTest
{
private
static
final
String
TEST_PATH
=
"
/
"
;
private
MockWebServer
webServer
;
Rule
public
ActivityTestRule
<
MainActivity
>
mActivityTestRule
=
new
ActivityTestRule
<
MainActivity
>
(
MainActivity
.
class
)
{
Override
protected
void
beforeActivityLaunched
(
)
{
super
.
beforeActivityLaunched
(
)
;
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
ExceptionDomains
.
INSTANCE
.
remove
(
appContext
ExceptionDomains
.
INSTANCE
.
load
(
appContext
)
)
;
TestHelper
.
selectGeckoForKlar
(
)
;
webServer
=
new
MockWebServer
(
)
;
try
{
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
ad
.
html
"
)
)
)
;
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
ad
.
html
"
)
)
)
;
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
ad
.
html
"
)
)
)
;
webServer
.
start
(
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
start
web
server
"
e
)
;
}
}
Override
protected
void
afterActivityFinished
(
)
{
super
.
afterActivityFinished
(
)
;
try
{
webServer
.
close
(
)
;
webServer
.
shutdown
(
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
stop
web
server
"
e
)
;
}
}
}
;
private
SessionLoadedIdlingResource
loadingIdlingResource
;
Before
public
void
setUp
(
)
{
loadingIdlingResource
=
new
SessionLoadedIdlingResource
(
)
;
IdlingRegistry
.
getInstance
(
)
.
register
(
loadingIdlingResource
)
;
}
After
public
void
tearDown
(
)
{
mActivityTestRule
.
getActivity
(
)
.
finishAndRemoveTask
(
)
;
IdlingRegistry
.
getInstance
(
)
.
unregister
(
loadingIdlingResource
)
;
}
Test
public
void
SimpleToggleTest
(
)
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
TestHelper
.
waitingTime
)
;
onView
(
withId
(
R
.
id
.
urlView
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
.
check
(
matches
(
hasFocus
(
)
)
)
.
perform
(
typeText
(
webServer
.
url
(
TEST_PATH
)
.
toString
(
)
)
pressImeActionButton
(
)
)
;
TestHelper
.
waitForWebContent
(
)
;
TestHelper
.
progressBar
.
waitUntilGone
(
TestHelper
.
waitingTime
)
;
onView
(
withId
(
R
.
id
.
block
)
)
.
check
(
matches
(
not
(
isDisplayed
(
)
)
)
)
;
onView
(
withId
(
R
.
id
.
menuView
)
)
.
perform
(
click
(
)
)
;
onView
(
withId
(
R
.
id
.
trackers_count
)
)
.
check
(
matches
(
not
(
withText
(
"
-
"
)
)
)
)
;
onView
(
withId
(
R
.
id
.
blocking_switch
)
)
.
check
(
matches
(
isChecked
(
)
)
)
;
onView
(
withId
(
R
.
id
.
blocking_switch
)
)
.
perform
(
click
(
)
)
;
TestHelper
.
waitForWebContent
(
)
;
onView
(
withId
(
R
.
id
.
block
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
onView
(
withId
(
R
.
id
.
webview
)
)
.
perform
(
click
(
)
)
;
onView
(
withId
(
R
.
id
.
menuView
)
)
.
perform
(
click
(
)
)
;
onView
(
withId
(
R
.
id
.
blocking_switch
)
)
.
check
(
matches
(
not
(
isChecked
(
)
)
)
)
;
onView
(
withId
(
R
.
id
.
trackers_count
)
)
.
check
(
matches
(
withText
(
"
-
"
)
)
)
;
TestHelper
.
pressBackKey
(
)
;
TestHelper
.
floatingEraseButton
.
perform
(
click
(
)
)
;
TestHelper
.
erasedMsg
.
waitForExists
(
waitingTime
)
;
try
{
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
ad
.
html
"
)
)
)
;
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
ad
.
html
"
)
)
)
;
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
ad
.
html
"
)
)
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
start
web
server
"
e
)
;
}
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
TestHelper
.
waitingTime
)
;
onView
(
withId
(
R
.
id
.
urlView
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
.
check
(
matches
(
hasFocus
(
)
)
)
.
perform
(
typeText
(
webServer
.
url
(
TEST_PATH
)
.
toString
(
)
)
pressImeActionButton
(
)
)
;
TestHelper
.
waitForWebContent
(
)
;
TestHelper
.
progressBar
.
waitUntilGone
(
TestHelper
.
waitingTime
)
;
onView
(
withId
(
R
.
id
.
block
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
onView
(
withId
(
R
.
id
.
menuView
)
)
.
perform
(
click
(
)
)
;
onView
(
withId
(
R
.
id
.
blocking_switch
)
)
.
check
(
matches
(
not
(
isChecked
(
)
)
)
)
;
onView
(
withId
(
R
.
id
.
trackers_count
)
)
.
check
(
matches
(
withText
(
"
-
"
)
)
)
;
}
}
