package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
android
.
support
.
test
.
rule
.
ActivityTestRule
;
import
android
.
support
.
test
.
runner
.
AndroidJUnit4
;
import
android
.
support
.
test
.
uiautomator
.
UiObjectNotFoundException
;
import
org
.
junit
.
Rule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
java
.
util
.
Objects
;
import
static
android
.
support
.
test
.
espresso
.
action
.
ViewActions
.
click
;
import
static
junit
.
framework
.
Assert
.
assertTrue
;
import
static
org
.
mozilla
.
focus
.
activity
.
TestHelper
.
waitingTime
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
RunWith
(
AndroidJUnit4
.
class
)
public
class
ToggleBlockTest
{
Rule
public
ActivityTestRule
<
MainActivity
>
mActivityTestRule
=
new
ActivityTestRule
<
MainActivity
>
(
MainActivity
.
class
)
{
Override
protected
void
beforeActivityLaunched
(
)
{
super
.
beforeActivityLaunched
(
)
;
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
}
}
;
Test
public
void
SimpleToggleTest
(
)
throws
UiObjectNotFoundException
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
"
mozilla
"
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
webView
.
waitForExists
(
waitingTime
)
;
TestHelper
.
menuButton
.
perform
(
click
(
)
)
;
TestHelper
.
blockCounterItem
.
waitForExists
(
waitingTime
)
;
assertTrue
(
Objects
.
equals
(
TestHelper
.
blockCounterItem
.
getText
(
)
"
1
"
)
)
;
assertTrue
(
TestHelper
.
blockToggleSwitch
.
isChecked
(
)
)
;
TestHelper
.
blockToggleSwitch
.
click
(
)
;
TestHelper
.
webView
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
blockOffIcon
.
exists
(
)
)
;
TestHelper
.
menuButton
.
perform
(
click
(
)
)
;
TestHelper
.
blockCounterItem
.
waitForExists
(
waitingTime
)
;
assertTrue
(
Objects
.
equals
(
TestHelper
.
blockCounterItem
.
getText
(
)
"
-
"
)
)
;
assertTrue
(
!
TestHelper
.
blockToggleSwitch
.
isChecked
(
)
)
;
TestHelper
.
blockToggleSwitch
.
click
(
)
;
TestHelper
.
webView
.
waitForExists
(
waitingTime
)
;
assertTrue
(
!
TestHelper
.
blockOffIcon
.
exists
(
)
)
;
}
Test
public
void
PreDisableTrackerTest
(
)
throws
UiObjectNotFoundException
{
TestHelper
.
menuButton
.
perform
(
click
(
)
)
;
TestHelper
.
settingsMenuItem
.
click
(
)
;
TestHelper
.
settingsList
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
toggleAnalyticBlock
.
isChecked
(
)
)
;
TestHelper
.
toggleAnalyticBlock
.
click
(
)
;
assertTrue
(
!
TestHelper
.
toggleAnalyticBlock
.
isChecked
(
)
)
;
TestHelper
.
navigateUp
.
click
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
"
mozilla
"
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
webView
.
waitForExists
(
waitingTime
)
;
TestHelper
.
menuButton
.
perform
(
click
(
)
)
;
TestHelper
.
blockCounterItem
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
blockToggleSwitch
.
isChecked
(
)
)
;
assertTrue
(
Objects
.
equals
(
TestHelper
.
blockCounterItem
.
getText
(
)
"
0
"
)
)
;
TestHelper
.
browserViewSettingsMenuItem
.
click
(
)
;
TestHelper
.
settingsList
.
waitForExists
(
waitingTime
)
;
assertTrue
(
!
TestHelper
.
toggleAnalyticBlock
.
isChecked
(
)
)
;
TestHelper
.
toggleAnalyticBlock
.
click
(
)
;
assertTrue
(
TestHelper
.
toggleAnalyticBlock
.
isChecked
(
)
)
;
TestHelper
.
navigateUp
.
click
(
)
;
TestHelper
.
webView
.
waitForExists
(
waitingTime
)
;
TestHelper
.
menuButton
.
perform
(
click
(
)
)
;
TestHelper
.
refreshBtn
.
click
(
)
;
TestHelper
.
webView
.
waitForExists
(
waitingTime
)
;
TestHelper
.
menuButton
.
perform
(
click
(
)
)
;
TestHelper
.
blockCounterItem
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
blockToggleSwitch
.
isChecked
(
)
)
;
assertTrue
(
Objects
.
equals
(
TestHelper
.
blockCounterItem
.
getText
(
)
"
1
"
)
)
;
}
}
