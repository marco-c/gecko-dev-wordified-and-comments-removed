package
org
.
mozilla
.
focus
.
screenshots
;
import
android
.
content
.
Context
;
import
android
.
os
.
SystemClock
;
import
android
.
preference
.
PreferenceManager
;
import
androidx
.
test
.
InstrumentationRegistry
;
import
androidx
.
test
.
espresso
.
Espresso
;
import
androidx
.
test
.
runner
.
AndroidJUnit4
;
import
androidx
.
test
.
uiautomator
.
UiObject
;
import
androidx
.
test
.
uiautomator
.
UiScrollable
;
import
androidx
.
test
.
uiautomator
.
UiSelector
;
import
org
.
junit
.
Before
;
import
org
.
junit
.
ClassRule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
focus
.
R
;
import
java
.
util
.
Collections
;
import
mozilla
.
components
.
browser
.
domains
.
CustomDomains
;
import
tools
.
fastlane
.
screengrab
.
Screengrab
;
import
tools
.
fastlane
.
screengrab
.
locale
.
LocaleTestRule
;
import
static
androidx
.
test
.
espresso
.
Espresso
.
onView
;
import
static
androidx
.
test
.
espresso
.
Espresso
.
openActionBarOverflowOrOptionsMenu
;
import
static
androidx
.
test
.
espresso
.
action
.
ViewActions
.
click
;
import
static
androidx
.
test
.
espresso
.
assertion
.
ViewAssertions
.
matches
;
import
static
androidx
.
test
.
espresso
.
contrib
.
RecyclerViewActions
.
scrollToPosition
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
isDisplayed
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
isEnabled
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withClassName
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withId
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withResourceName
;
import
static
androidx
.
test
.
espresso
.
matcher
.
ViewMatchers
.
withText
;
import
static
org
.
hamcrest
.
Matchers
.
allOf
;
import
static
org
.
hamcrest
.
Matchers
.
containsString
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
import
static
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
assertToolbarMatchesText
;
import
static
org
.
mozilla
.
focus
.
helpers
.
EspressoHelper
.
openSettings
;
RunWith
(
AndroidJUnit4
.
class
)
public
class
SettingsScreenshots
extends
ScreenshotTest
{
ClassRule
public
static
final
LocaleTestRule
localeTestRule
=
new
LocaleTestRule
(
)
;
Before
public
void
clearSettings
(
)
{
PreferenceManager
.
getDefaultSharedPreferences
(
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
)
.
edit
(
)
.
clear
(
)
.
apply
(
)
;
CustomDomains
.
INSTANCE
.
save
(
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
Collections
.
emptyList
(
)
)
;
final
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
}
Test
public
void
takeScreenShotsOfSettings
(
)
throws
Exception
{
SystemClock
.
sleep
(
5000
)
;
openSettings
(
)
;
Screengrab
.
screenshot
(
"
Settings_View_Top
"
)
;
onView
(
withText
(
R
.
string
.
preference_category_general
)
)
.
perform
(
click
(
)
)
;
onView
(
withText
(
R
.
string
.
preference_language
)
)
.
perform
(
click
(
)
)
;
UiObject
CancelBtn
=
device
.
findObject
(
new
UiSelector
(
)
.
resourceId
(
"
android
:
id
/
button2
"
)
.
enabled
(
true
)
)
;
CancelBtn
.
waitForExists
(
waitingTime
)
;
Screengrab
.
screenshot
(
"
Language_Selection
"
)
;
CancelBtn
.
click
(
)
;
onView
(
withText
(
R
.
string
.
preference_language
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
Screengrab
.
screenshot
(
"
General_Submenu
"
)
;
Espresso
.
pressBack
(
)
;
onView
(
withText
(
R
.
string
.
preference_category_search
)
)
.
perform
(
click
(
)
)
;
Screengrab
.
screenshot
(
"
Search_Submenu
"
)
;
onView
(
allOf
(
withText
(
R
.
string
.
preference_search_engine_label
)
withResourceName
(
"
title
"
)
)
)
.
perform
(
click
(
)
)
;
onView
(
withText
(
R
.
string
.
preference_search_installed_search_engines
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
Screengrab
.
screenshot
(
"
SearchEngine_Selection
"
)
;
openActionBarOverflowOrOptionsMenu
(
InstrumentationRegistry
.
getContext
(
)
)
;
device
.
waitForIdle
(
)
;
onView
(
withText
(
R
.
string
.
preference_search_remove
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
Screengrab
.
screenshot
(
"
SearchEngine_Search_Engine_Menu
"
)
;
onView
(
withText
(
R
.
string
.
preference_search_remove
)
)
.
perform
(
click
(
)
)
;
device
.
waitForIdle
(
)
;
assertToolbarMatchesText
(
R
.
string
.
preference_search_remove_title
)
;
Screengrab
.
screenshot
(
"
SearchEngine_Remove_Search_Engines
"
)
;
Espresso
.
pressBack
(
)
;
final
String
addEngineLabel
=
getString
(
R
.
string
.
preference_search_add2
)
;
onView
(
withText
(
addEngineLabel
)
)
.
check
(
matches
(
isEnabled
(
)
)
)
.
perform
(
click
(
)
)
;
onView
(
withId
(
R
.
id
.
edit_engine_name
)
)
.
check
(
matches
(
isEnabled
(
)
)
)
;
Screengrab
.
screenshot
(
"
SearchEngine_Add_Search_Engine
"
)
;
onView
(
withId
(
R
.
id
.
menu_save_search_engine
)
)
.
check
(
matches
(
isEnabled
(
)
)
)
.
perform
(
click
(
)
)
;
Screengrab
.
screenshot
(
"
SearchEngine_Add_Search_Engine_Warning
"
)
;
onView
(
withClassName
(
containsString
(
"
ImageButton
"
)
)
)
.
check
(
matches
(
isEnabled
(
)
)
)
.
perform
(
click
(
)
)
;
device
.
waitForIdle
(
)
;
Espresso
.
pressBack
(
)
;
device
.
waitForIdle
(
)
;
onView
(
withText
(
R
.
string
.
preference_category_mozilla
)
)
.
perform
(
click
(
)
)
;
Screengrab
.
screenshot
(
"
Mozilla_Submenu
"
)
;
final
String
aboutLabel
=
getString
(
R
.
string
.
preference_about
getString
(
R
.
string
.
app_name
)
)
;
onView
(
withText
(
aboutLabel
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
.
perform
(
click
(
)
)
;
onView
(
withId
(
R
.
id
.
infofragment
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
Screengrab
.
screenshot
(
"
About_Page
"
)
;
device
.
pressBack
(
)
;
final
String
yourRightsLabel
=
getString
(
R
.
string
.
menu_rights
)
;
onView
(
withText
(
yourRightsLabel
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
.
perform
(
click
(
)
)
;
onView
(
withId
(
R
.
id
.
infofragment
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
Screengrab
.
screenshot
(
"
YourRights_Page
"
)
;
device
.
pressBack
(
)
;
device
.
pressBack
(
)
;
onView
(
withText
(
R
.
string
.
preference_privacy_and_security_header
)
)
.
perform
(
click
(
)
)
;
Screengrab
.
screenshot
(
"
Privacy_Security_Submenu_top
"
)
;
UiScrollable
settingsView
=
new
UiScrollable
(
new
UiSelector
(
)
.
scrollable
(
true
)
)
;
if
(
settingsView
.
exists
(
)
)
{
settingsView
.
scrollToEnd
(
5
)
;
Screengrab
.
screenshot
(
"
Privacy_Security_Submenu_bottom
"
)
;
}
onView
(
withResourceName
(
"
recycler_view
"
)
)
.
perform
(
scrollToPosition
(
5
)
)
;
onView
(
withText
(
R
.
string
.
preference_privacy_category_cookies
)
)
.
perform
(
click
(
)
)
;
CancelBtn
.
waitForExists
(
waitingTime
)
;
Screengrab
.
screenshot
(
"
Block_cookies_dialog
"
)
;
CancelBtn
.
click
(
)
;
onView
(
withText
(
R
.
string
.
preference_privacy_and_security_header
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
device
.
pressBack
(
)
;
onView
(
withText
(
R
.
string
.
preference_category_advanced
)
)
.
perform
(
click
(
)
)
;
onView
(
withText
(
R
.
string
.
preference_remote_debugging
)
)
.
check
(
matches
(
isDisplayed
(
)
)
)
;
Screengrab
.
screenshot
(
"
Advanced_Page
"
)
;
}
}
