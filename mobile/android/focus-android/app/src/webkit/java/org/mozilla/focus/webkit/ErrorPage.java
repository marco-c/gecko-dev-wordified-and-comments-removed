package
org
.
mozilla
.
focus
.
webkit
;
import
android
.
content
.
Context
;
import
android
.
content
.
res
.
Resources
;
import
android
.
support
.
annotation
.
NonNull
;
import
android
.
support
.
annotation
.
Nullable
;
import
android
.
support
.
annotation
.
RawRes
;
import
android
.
support
.
v4
.
util
.
ArrayMap
;
import
android
.
support
.
v4
.
util
.
Pair
;
import
android
.
webkit
.
WebView
;
import
android
.
webkit
.
WebViewClient
;
import
org
.
mozilla
.
focus
.
R
;
import
java
.
io
.
BufferedReader
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
io
.
InputStreamReader
;
import
java
.
util
.
HashMap
;
import
java
.
util
.
Map
;
public
class
ErrorPage
{
private
static
final
HashMap
<
Integer
Pair
<
Integer
Integer
>
>
errorDescriptionMap
;
static
{
errorDescriptionMap
=
new
HashMap
<
>
(
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_UNKNOWN
new
Pair
<
>
(
R
.
string
.
error_connectionfailure_title
R
.
string
.
error_connectionfailure_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_HOST_LOOKUP
new
Pair
<
>
(
R
.
string
.
error_hostLookup_title
R
.
string
.
error_hostLookup_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_CONNECT
new
Pair
<
>
(
R
.
string
.
error_connect_title
R
.
string
.
error_connect_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_IO
new
Pair
<
>
(
R
.
string
.
error_connectionfailure_title
R
.
string
.
error_connectionfailure_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_TIMEOUT
new
Pair
<
>
(
R
.
string
.
error_timeout_title
R
.
string
.
error_timeout_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_REDIRECT_LOOP
new
Pair
<
>
(
R
.
string
.
error_redirectLoop_title
R
.
string
.
error_redirectLoop_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_UNSUPPORTED_SCHEME
new
Pair
<
>
(
R
.
string
.
error_unsupportedprotocol_title
R
.
string
.
error_unsupportedprotocol_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_FAILED_SSL_HANDSHAKE
new
Pair
<
>
(
R
.
string
.
error_sslhandshake_title
R
.
string
.
error_sslhandshake_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_BAD_URL
new
Pair
<
>
(
R
.
string
.
error_malformedURI_title
R
.
string
.
error_malformedURI_message
)
)
;
errorDescriptionMap
.
put
(
WebViewClient
.
ERROR_TOO_MANY_REQUESTS
new
Pair
<
>
(
R
.
string
.
error_generic_title
R
.
string
.
error_generic_message
)
)
;
}
public
static
boolean
supportsErrorCode
(
final
int
errorCode
)
{
return
(
errorDescriptionMap
.
get
(
errorCode
)
!
=
null
)
;
}
private
static
String
loadResourceFile
(
NonNull
final
Context
context
NonNull
final
RawRes
int
resourceID
Nullable
final
Map
<
String
String
>
substitutionTable
)
{
BufferedReader
fileReader
=
null
;
try
{
final
InputStream
fileStream
=
context
.
getResources
(
)
.
openRawResource
(
resourceID
)
;
fileReader
=
new
BufferedReader
(
new
InputStreamReader
(
fileStream
)
)
;
final
StringBuilder
outputBuffer
=
new
StringBuilder
(
)
;
String
line
;
while
(
(
line
=
fileReader
.
readLine
(
)
)
!
=
null
)
{
if
(
substitutionTable
!
=
null
)
{
for
(
final
Map
.
Entry
<
String
String
>
entry
:
substitutionTable
.
entrySet
(
)
)
{
line
=
line
.
replace
(
entry
.
getKey
(
)
entry
.
getValue
(
)
)
;
}
}
outputBuffer
.
append
(
line
)
;
}
return
outputBuffer
.
toString
(
)
;
}
catch
(
final
IOException
e
)
{
throw
new
IllegalStateException
(
"
Unable
to
load
error
page
data
"
)
;
}
finally
{
try
{
if
(
fileReader
!
=
null
)
{
fileReader
.
close
(
)
;
}
}
catch
(
IOException
e
)
{
}
}
}
public
static
void
loadErrorPage
(
final
WebView
webView
final
String
desiredURL
final
int
errorCode
)
{
final
Pair
<
Integer
Integer
>
errorResourceIDs
=
errorDescriptionMap
.
get
(
errorCode
)
;
if
(
errorResourceIDs
=
=
null
)
{
throw
new
IllegalArgumentException
(
"
Cannot
load
error
description
for
unsupported
errorcode
=
"
+
errorCode
)
;
}
final
String
cssString
=
loadResourceFile
(
webView
.
getContext
(
)
R
.
raw
.
errorpage_style
null
)
;
final
Map
<
String
String
>
substitutionMap
=
new
ArrayMap
<
>
(
)
;
final
Resources
resources
=
webView
.
getContext
(
)
.
getResources
(
)
;
substitutionMap
.
put
(
"
%
page
-
title
%
"
resources
.
getString
(
R
.
string
.
errorpage_title
)
)
;
substitutionMap
.
put
(
"
%
button
%
"
resources
.
getString
(
R
.
string
.
errorpage_refresh
)
)
;
substitutionMap
.
put
(
"
%
messageShort
%
"
resources
.
getString
(
errorResourceIDs
.
first
)
)
;
substitutionMap
.
put
(
"
%
messageLong
%
"
resources
.
getString
(
errorResourceIDs
.
second
desiredURL
)
)
;
substitutionMap
.
put
(
"
%
css
%
"
cssString
)
;
final
String
errorPage
=
loadResourceFile
(
webView
.
getContext
(
)
R
.
raw
.
errorpage
substitutionMap
)
;
webView
.
loadDataWithBaseURL
(
desiredURL
errorPage
"
text
/
html
"
"
UTF8
"
desiredURL
)
;
}
}
