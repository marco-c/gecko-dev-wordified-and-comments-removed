package
org
.
mozilla
.
focus
.
webkit
.
matcher
.
util
;
import
android
.
support
.
annotation
.
CheckResult
;
public
abstract
class
FocusString
{
protected
final
String
string
;
protected
abstract
boolean
isReversed
(
)
;
private
FocusString
(
final
String
string
final
int
offsetStart
final
int
offsetEnd
)
{
this
.
string
=
string
;
this
.
offsetStart
=
offsetStart
;
this
.
offsetEnd
=
offsetEnd
;
}
public
static
FocusString
create
(
final
String
string
)
{
return
new
ForwardString
(
string
0
string
.
length
(
)
)
;
}
public
int
length
(
)
{
return
offsetEnd
-
offsetStart
;
}
final
int
offsetStart
;
final
int
offsetEnd
;
CheckResult
public
FocusString
reverse
(
)
{
if
(
isReversed
(
)
)
{
return
new
ForwardString
(
string
offsetStart
offsetEnd
)
;
}
else
{
return
new
ReverseString
(
string
offsetStart
offsetEnd
)
;
}
}
public
abstract
char
charAt
(
final
int
position
)
;
public
abstract
FocusString
substring
(
final
int
startIndex
)
;
private
static
class
ForwardString
extends
FocusString
{
public
ForwardString
(
final
String
string
final
int
offsetStart
final
int
offsetEnd
)
{
super
(
string
offsetStart
offsetEnd
)
;
}
Override
protected
boolean
isReversed
(
)
{
return
false
;
}
Override
public
char
charAt
(
int
position
)
{
return
string
.
charAt
(
position
+
offsetStart
)
;
}
Override
public
FocusString
substring
(
final
int
startIndex
)
{
return
new
ForwardString
(
string
offsetStart
+
startIndex
offsetEnd
)
;
}
}
private
static
class
ReverseString
extends
FocusString
{
public
ReverseString
(
final
String
string
final
int
offsetStart
final
int
offsetEnd
)
{
super
(
string
offsetStart
offsetEnd
)
;
}
Override
protected
boolean
isReversed
(
)
{
return
true
;
}
Override
public
char
charAt
(
int
position
)
{
return
string
.
charAt
(
length
(
)
-
1
-
position
+
offsetStart
)
;
}
Override
public
FocusString
substring
(
int
startIndex
)
{
return
new
ReverseString
(
string
offsetStart
offsetEnd
-
startIndex
)
;
}
}
}
