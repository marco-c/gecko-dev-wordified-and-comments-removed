package
org
.
mozilla
.
focus
.
web
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
import
android
.
webkit
.
CookieManager
;
import
android
.
webkit
.
WebChromeClient
;
import
android
.
webkit
.
WebSettings
;
import
android
.
webkit
.
WebStorage
;
import
android
.
webkit
.
WebView
;
import
android
.
webkit
.
WebViewDatabase
;
import
org
.
mozilla
.
focus
.
webkit
.
NestedWebView
;
import
org
.
mozilla
.
focus
.
webkit
.
TrackingProtectionWebViewClient
;
public
class
WebViewProvider
{
public
static
void
preload
(
final
Context
context
)
{
TrackingProtectionWebViewClient
.
triggerPreload
(
context
)
;
}
public
static
View
create
(
Context
context
AttributeSet
attrs
)
{
final
WebkitView
webkitView
=
new
WebkitView
(
context
attrs
)
;
setupView
(
webkitView
)
;
configureSettings
(
webkitView
.
getSettings
(
)
)
;
return
webkitView
;
}
private
static
void
setupView
(
WebView
webView
)
{
webView
.
setVerticalScrollBarEnabled
(
true
)
;
webView
.
setHorizontalScrollBarEnabled
(
true
)
;
}
SuppressLint
(
"
SetJavaScriptEnabled
"
)
private
static
void
configureSettings
(
WebSettings
settings
)
{
settings
.
setJavaScriptEnabled
(
true
)
;
settings
.
setBuiltInZoomControls
(
true
)
;
settings
.
setDisplayZoomControls
(
false
)
;
settings
.
setAllowFileAccess
(
false
)
;
}
private
static
class
WebkitView
extends
NestedWebView
implements
IWebView
{
private
Callback
callback
;
private
TrackingProtectionWebViewClient
client
;
public
WebkitView
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
client
=
createWebViewClient
(
)
;
setWebViewClient
(
client
)
;
setWebChromeClient
(
createWebChromeClient
(
)
)
;
}
Override
public
void
setCallback
(
Callback
callback
)
{
this
.
callback
=
callback
;
}
public
void
loadUrl
(
String
url
)
{
super
.
loadUrl
(
url
)
;
client
.
notifyCurrentURL
(
url
)
;
}
Override
public
void
cleanup
(
)
{
clearFormData
(
)
;
clearHistory
(
)
;
clearMatches
(
)
;
clearSslPreferences
(
)
;
clearCache
(
true
)
;
CookieManager
.
getInstance
(
)
.
removeAllCookies
(
null
)
;
WebStorage
.
getInstance
(
)
.
deleteAllData
(
)
;
final
WebViewDatabase
webViewDatabase
=
WebViewDatabase
.
getInstance
(
getContext
(
)
)
;
webViewDatabase
.
clearFormData
(
)
;
webViewDatabase
.
clearHttpAuthUsernamePassword
(
)
;
}
private
TrackingProtectionWebViewClient
createWebViewClient
(
)
{
return
new
TrackingProtectionWebViewClient
(
getContext
(
)
.
getApplicationContext
(
)
)
{
Override
public
void
onPageStarted
(
WebView
view
String
url
Bitmap
favicon
)
{
if
(
callback
!
=
null
)
{
callback
.
onPageStarted
(
url
)
;
}
super
.
onPageStarted
(
view
url
favicon
)
;
}
Override
public
void
onPageFinished
(
WebView
view
String
url
)
{
if
(
callback
!
=
null
)
{
callback
.
onPageFinished
(
view
.
getCertificate
(
)
!
=
null
)
;
}
super
.
onPageFinished
(
view
url
)
;
}
}
;
}
private
WebChromeClient
createWebChromeClient
(
)
{
return
new
WebChromeClient
(
)
{
Override
public
void
onProgressChanged
(
WebView
view
int
newProgress
)
{
if
(
callback
!
=
null
)
{
callback
.
onProgress
(
newProgress
)
;
}
}
}
;
}
}
}
