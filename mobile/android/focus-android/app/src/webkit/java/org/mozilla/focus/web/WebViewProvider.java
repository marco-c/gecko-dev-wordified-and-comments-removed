package
org
.
mozilla
.
focus
.
web
;
import
android
.
annotation
.
SuppressLint
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
android
.
content
.
pm
.
PackageManager
;
import
android
.
os
.
Build
;
import
android
.
os
.
Bundle
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
support
.
annotation
.
VisibleForTesting
;
import
android
.
text
.
TextUtils
;
import
android
.
util
.
AttributeSet
;
import
android
.
view
.
View
;
import
android
.
webkit
.
CookieManager
;
import
android
.
webkit
.
WebBackForwardList
;
import
android
.
webkit
.
WebChromeClient
;
import
android
.
webkit
.
WebSettings
;
import
android
.
webkit
.
WebStorage
;
import
android
.
webkit
.
WebView
;
import
android
.
webkit
.
WebViewDatabase
;
import
org
.
mozilla
.
focus
.
BuildConfig
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
utils
.
FileUtils
;
import
org
.
mozilla
.
focus
.
utils
.
Settings
;
import
org
.
mozilla
.
focus
.
utils
.
ThreadUtils
;
import
org
.
mozilla
.
focus
.
webkit
.
NestedWebView
;
import
org
.
mozilla
.
focus
.
webkit
.
TrackingProtectionWebViewClient
;
public
class
WebViewProvider
{
private
static
final
String
KEY_CURRENTURL
=
"
currenturl
"
;
public
static
void
preload
(
final
Context
context
)
{
TrackingProtectionWebViewClient
.
triggerPreload
(
context
)
;
}
public
static
void
performCleanup
(
final
Context
context
)
{
final
WebkitView
webView
=
new
WebkitView
(
context
null
)
;
webView
.
cleanup
(
)
;
webView
.
destroy
(
)
;
}
public
static
View
create
(
Context
context
AttributeSet
attrs
)
{
final
WebkitView
webkitView
=
new
WebkitView
(
context
attrs
)
;
final
WebSettings
settings
=
webkitView
.
getSettings
(
)
;
setupView
(
webkitView
)
;
configureDefaultSettings
(
context
settings
)
;
applyAppSettings
(
context
settings
)
;
return
webkitView
;
}
private
static
void
setupView
(
WebView
webView
)
{
webView
.
setVerticalScrollBarEnabled
(
true
)
;
webView
.
setHorizontalScrollBarEnabled
(
true
)
;
}
SuppressLint
(
"
SetJavaScriptEnabled
"
)
private
static
void
configureDefaultSettings
(
Context
context
WebSettings
settings
)
{
settings
.
setJavaScriptEnabled
(
true
)
;
settings
.
setBuiltInZoomControls
(
true
)
;
settings
.
setDisplayZoomControls
(
false
)
;
settings
.
setLoadWithOverviewMode
(
true
)
;
settings
.
setUseWideViewPort
(
true
)
;
settings
.
setLayoutAlgorithm
(
WebSettings
.
LayoutAlgorithm
.
TEXT_AUTOSIZING
)
;
settings
.
setAllowFileAccess
(
false
)
;
settings
.
setAllowFileAccessFromFileURLs
(
false
)
;
settings
.
setAllowUniversalAccessFromFileURLs
(
false
)
;
settings
.
setUserAgentString
(
buildUserAgentString
(
context
settings
)
)
;
settings
.
setAllowContentAccess
(
false
)
;
settings
.
setAppCacheEnabled
(
false
)
;
settings
.
setDatabaseEnabled
(
false
)
;
settings
.
setDomStorageEnabled
(
false
)
;
settings
.
setJavaScriptCanOpenWindowsAutomatically
(
false
)
;
settings
.
setGeolocationEnabled
(
false
)
;
settings
.
setSaveFormData
(
false
)
;
settings
.
setSavePassword
(
false
)
;
}
private
static
void
applyAppSettings
(
Context
context
WebSettings
settings
)
{
final
Settings
appSettings
=
new
Settings
(
context
)
;
settings
.
setBlockNetworkImage
(
appSettings
.
shouldBlockImages
(
)
)
;
}
VisibleForTesting
static
String
getUABrowserString
(
final
String
existingUAString
final
String
focusToken
)
{
int
start
=
existingUAString
.
indexOf
(
"
AppleWebKit
"
)
;
if
(
start
=
=
-
1
)
{
start
=
existingUAString
.
indexOf
(
"
)
"
)
+
2
;
if
(
start
>
=
existingUAString
.
length
(
)
)
{
return
focusToken
;
}
}
final
String
[
]
tokens
=
existingUAString
.
substring
(
start
)
.
split
(
"
"
)
;
for
(
int
i
=
0
;
i
<
tokens
.
length
;
i
+
+
)
{
if
(
tokens
[
i
]
.
startsWith
(
"
Chrome
"
)
)
{
tokens
[
i
]
=
focusToken
+
"
"
+
tokens
[
i
]
;
return
TextUtils
.
join
(
"
"
tokens
)
;
}
}
return
TextUtils
.
join
(
"
"
tokens
)
+
focusToken
;
}
private
static
String
buildUserAgentString
(
final
Context
context
final
WebSettings
settings
)
{
final
StringBuilder
uaBuilder
=
new
StringBuilder
(
)
;
uaBuilder
.
append
(
"
Mozilla
/
5
.
0
"
)
;
uaBuilder
.
append
(
"
(
Linux
;
Android
"
)
.
append
(
Build
.
VERSION
.
RELEASE
)
.
append
(
"
)
"
)
;
final
String
existingWebViewUA
=
settings
.
getUserAgentString
(
)
;
final
String
appVersion
;
try
{
appVersion
=
context
.
getPackageManager
(
)
.
getPackageInfo
(
context
.
getPackageName
(
)
0
)
.
versionName
;
}
catch
(
PackageManager
.
NameNotFoundException
e
)
{
throw
new
IllegalStateException
(
"
Unable
find
package
details
for
Focus
"
e
)
;
}
final
String
focusToken
=
context
.
getResources
(
)
.
getString
(
R
.
string
.
useragent_appname
)
+
"
/
"
+
appVersion
;
uaBuilder
.
append
(
getUABrowserString
(
existingWebViewUA
focusToken
)
)
;
return
uaBuilder
.
toString
(
)
;
}
private
static
class
WebkitView
extends
NestedWebView
implements
IWebView
SharedPreferences
.
OnSharedPreferenceChangeListener
{
private
Callback
callback
;
private
FocusWebViewClient
client
;
public
WebkitView
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
client
=
new
FocusWebViewClient
(
getContext
(
)
.
getApplicationContext
(
)
)
;
setWebViewClient
(
client
)
;
setWebChromeClient
(
createWebChromeClient
(
)
)
;
if
(
BuildConfig
.
DEBUG
)
{
setWebContentsDebuggingEnabled
(
true
)
;
}
setLongClickable
(
true
)
;
setOnLongClickListener
(
new
OnLongClickListener
(
)
{
Override
public
boolean
onLongClick
(
View
v
)
{
final
HitTestResult
hitTestResult
=
getHitTestResult
(
)
;
switch
(
hitTestResult
.
getType
(
)
)
{
case
HitTestResult
.
SRC_ANCHOR_TYPE
:
case
HitTestResult
.
SRC_IMAGE_ANCHOR_TYPE
:
final
String
url
=
hitTestResult
.
getExtra
(
)
;
callback
.
onLinkLongPress
(
url
)
;
return
true
;
}
return
false
;
}
}
)
;
}
Override
protected
void
onAttachedToWindow
(
)
{
super
.
onAttachedToWindow
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
getContext
(
)
)
.
registerOnSharedPreferenceChangeListener
(
this
)
;
}
Override
protected
void
onDetachedFromWindow
(
)
{
super
.
onDetachedFromWindow
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
getContext
(
)
)
.
unregisterOnSharedPreferenceChangeListener
(
this
)
;
}
Override
public
void
onSharedPreferenceChanged
(
SharedPreferences
sharedPreferences
String
key
)
{
applyAppSettings
(
getContext
(
)
getSettings
(
)
)
;
}
Override
public
void
restoreWebviewState
(
Bundle
savedInstanceState
)
{
final
WebBackForwardList
backForwardList
=
restoreState
(
savedInstanceState
)
;
final
String
desiredURL
=
savedInstanceState
.
getString
(
KEY_CURRENTURL
)
;
client
.
notifyCurrentURL
(
desiredURL
)
;
if
(
backForwardList
!
=
null
&
&
backForwardList
.
getCurrentItem
(
)
.
getUrl
(
)
.
equals
(
desiredURL
)
)
{
reload
(
)
;
}
else
{
loadUrl
(
desiredURL
)
;
}
}
Override
public
void
onSaveInstanceState
(
Bundle
outState
)
{
saveState
(
outState
)
;
outState
.
putString
(
KEY_CURRENTURL
getUrl
(
)
)
;
}
Override
public
void
setCallback
(
Callback
callback
)
{
this
.
callback
=
callback
;
client
.
setCallback
(
callback
)
;
}
public
void
loadUrl
(
String
url
)
{
if
(
!
client
.
shouldOverrideUrlLoading
(
this
url
)
)
{
super
.
loadUrl
(
url
)
;
}
client
.
notifyCurrentURL
(
url
)
;
}
Override
public
void
destroy
(
)
{
super
.
destroy
(
)
;
deleteContentFromKnownLocations
(
)
;
}
Override
public
void
cleanup
(
)
{
clearFormData
(
)
;
clearHistory
(
)
;
clearMatches
(
)
;
clearSslPreferences
(
)
;
clearCache
(
true
)
;
CookieManager
.
getInstance
(
)
.
removeAllCookies
(
null
)
;
WebStorage
.
getInstance
(
)
.
deleteAllData
(
)
;
final
WebViewDatabase
webViewDatabase
=
WebViewDatabase
.
getInstance
(
getContext
(
)
)
;
webViewDatabase
.
clearFormData
(
)
;
webViewDatabase
.
clearHttpAuthUsernamePassword
(
)
;
deleteContentFromKnownLocations
(
)
;
}
private
void
deleteContentFromKnownLocations
(
)
{
final
Context
context
=
getContext
(
)
;
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
FileUtils
.
deleteWebViewDirectory
(
context
)
;
FileUtils
.
truncateCacheDirectory
(
context
)
;
}
}
)
;
}
private
WebChromeClient
createWebChromeClient
(
)
{
return
new
WebChromeClient
(
)
{
Override
public
void
onProgressChanged
(
WebView
view
int
newProgress
)
{
if
(
callback
!
=
null
)
{
callback
.
onURLChanged
(
view
.
getUrl
(
)
)
;
callback
.
onProgress
(
newProgress
)
;
}
}
}
;
}
}
}
