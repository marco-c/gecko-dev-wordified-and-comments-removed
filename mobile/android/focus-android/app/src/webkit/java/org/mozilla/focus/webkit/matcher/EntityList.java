package
org
.
mozilla
.
focus
.
webkit
.
matcher
;
import
android
.
net
.
Uri
;
import
org
.
mozilla
.
focus
.
utils
.
UrlUtils
;
import
org
.
mozilla
.
focus
.
webkit
.
matcher
.
Trie
.
WhiteListTrie
;
import
org
.
mozilla
.
focus
.
webkit
.
matcher
.
util
.
FocusString
;
import
java
.
net
.
MalformedURLException
;
import
java
.
net
.
URL
;
class
EntityList
{
private
WhiteListTrie
rootNode
;
public
EntityList
(
)
{
rootNode
=
WhiteListTrie
.
createRootNode
(
)
;
}
public
void
putWhiteList
(
final
FocusString
revhost
final
Trie
whitelist
)
{
rootNode
.
putWhiteList
(
revhost
whitelist
)
;
}
public
boolean
isWhiteListed
(
final
Uri
site
final
Uri
resource
)
{
if
(
site
.
getHost
(
)
.
length
(
)
=
=
0
|
|
resource
.
getHost
(
)
.
length
(
)
=
=
0
|
|
site
.
getScheme
(
)
.
equals
(
"
data
"
)
)
{
return
true
;
}
if
(
UrlUtils
.
isPermittedResourceProtocol
(
resource
.
getScheme
(
)
)
&
&
UrlUtils
.
isSupportedProtocol
(
site
.
getScheme
(
)
)
)
{
final
FocusString
revSitehost
=
FocusString
.
create
(
site
.
getHost
(
)
)
.
reverse
(
)
;
final
FocusString
revResourcehost
=
FocusString
.
create
(
resource
.
getHost
(
)
)
.
reverse
(
)
;
return
isWhiteListed
(
revSitehost
revResourcehost
rootNode
)
;
}
else
{
return
false
;
}
}
private
boolean
isWhiteListed
(
final
FocusString
site
final
FocusString
resource
final
Trie
revHostTrie
)
{
final
WhiteListTrie
next
=
(
WhiteListTrie
)
revHostTrie
.
children
.
get
(
site
.
charAt
(
0
)
)
;
if
(
next
=
=
null
)
{
return
false
;
}
if
(
next
.
whitelist
!
=
null
&
&
next
.
whitelist
.
findNode
(
resource
)
!
=
null
)
{
return
true
;
}
if
(
site
.
length
(
)
=
=
1
)
{
return
false
;
}
return
isWhiteListed
(
site
.
substring
(
1
)
resource
next
)
;
}
}
