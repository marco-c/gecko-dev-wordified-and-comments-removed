package
org
.
mozilla
.
focus
.
webkit
;
import
android
.
content
.
Context
;
import
android
.
content
.
pm
.
PackageInfo
;
import
android
.
content
.
pm
.
PackageManager
;
import
android
.
content
.
res
.
Resources
;
import
android
.
graphics
.
Bitmap
;
import
android
.
net
.
Uri
;
import
android
.
net
.
http
.
SslError
;
import
android
.
support
.
v4
.
util
.
ArrayMap
;
import
android
.
support
.
v4
.
view
.
ViewCompat
;
import
android
.
view
.
View
;
import
android
.
webkit
.
SslErrorHandler
;
import
android
.
webkit
.
WebResourceRequest
;
import
android
.
webkit
.
WebResourceResponse
;
import
android
.
webkit
.
WebView
;
import
android
.
webkit
.
WebViewClient
;
import
org
.
mozilla
.
focus
.
R
;
import
org
.
mozilla
.
focus
.
locale
.
Locales
;
import
org
.
mozilla
.
focus
.
utils
.
HtmlLoader
;
import
org
.
mozilla
.
focus
.
utils
.
IntentUtils
;
import
org
.
mozilla
.
focus
.
utils
.
SupportUtils
;
import
org
.
mozilla
.
focus
.
utils
.
UrlUtils
;
import
org
.
mozilla
.
focus
.
web
.
IWebView
;
import
java
.
util
.
Map
;
class
FocusWebViewClient
extends
TrackingProtectionWebViewClient
{
private
final
static
String
ERROR_PROTOCOL
=
"
error
:
"
;
private
boolean
errorReceived
;
private
Context
context
;
FocusWebViewClient
(
Context
context
)
{
super
(
context
)
;
this
.
context
=
context
;
}
private
static
final
String
CLEAR_VISITED_CSS
=
"
var
nSheets
=
document
.
styleSheets
.
length
;
"
+
"
for
(
s
=
0
;
s
<
nSheets
;
s
+
+
)
{
"
+
"
var
stylesheet
=
document
.
styleSheets
[
s
]
;
"
+
"
var
nRules
=
stylesheet
.
cssRules
?
stylesheet
.
cssRules
.
length
:
0
;
"
+
"
for
(
i
=
nRules
-
1
;
i
>
=
0
;
i
-
-
)
{
"
+
"
var
cssRule
=
stylesheet
.
cssRules
[
i
]
;
"
+
"
if
(
cssRule
.
selectorText
&
&
cssRule
.
selectorText
.
includes
(
'
:
visited
'
)
)
{
"
+
"
var
tokens
=
cssRule
.
selectorText
.
split
(
'
'
)
;
"
+
"
var
j
=
tokens
.
length
;
"
+
"
while
(
j
-
-
)
{
"
+
"
if
(
tokens
[
j
]
.
includes
(
'
:
visited
'
)
)
{
"
+
"
tokens
.
splice
(
j
1
)
;
"
+
"
}
"
+
"
}
"
+
"
if
(
tokens
.
length
=
=
0
)
{
"
+
"
stylesheet
.
deleteRule
(
i
)
;
"
+
"
}
else
{
"
+
"
cssRule
.
selectorText
=
tokens
.
join
(
'
'
)
;
"
+
"
}
"
+
"
}
"
+
"
}
"
+
"
}
"
;
Override
public
void
onLoadResource
(
WebView
view
String
url
)
{
view
.
evaluateJavascript
(
"
(
function
(
)
{
"
+
"
function
cleanupVisited
(
)
{
"
+
CLEAR_VISITED_CSS
+
"
}
"
+
"
var
links
=
document
.
getElementsByTagName
(
'
link
'
)
;
"
+
"
for
(
i
=
0
;
i
<
links
.
length
;
i
+
+
)
{
"
+
"
link
=
links
[
i
]
;
"
+
"
if
(
link
.
rel
=
=
'
stylesheet
'
)
{
"
+
"
link
.
addEventListener
(
'
load
'
cleanupVisited
false
)
;
"
+
"
}
"
+
"
}
"
+
"
}
)
(
)
;
"
null
)
;
super
.
onLoadResource
(
view
url
)
;
}
Override
public
WebResourceResponse
shouldInterceptRequest
(
WebView
view
WebResourceRequest
request
)
{
if
(
request
.
isForMainFrame
(
)
)
{
final
String
requestURL
=
request
.
getUrl
(
)
.
toString
(
)
;
if
(
UrlUtils
.
urlsMatchExceptForTrailingSlash
(
currentPageURL
requestURL
)
)
{
view
.
post
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
if
(
callback
!
=
null
)
{
callback
.
onURLChanged
(
currentPageURL
)
;
}
}
}
)
;
}
}
return
super
.
shouldInterceptRequest
(
view
request
)
;
}
Override
public
void
onPageStarted
(
WebView
view
String
url
Bitmap
favicon
)
{
if
(
errorReceived
)
{
errorReceived
=
false
;
}
else
if
(
callback
!
=
null
)
{
callback
.
onPageStarted
(
url
)
;
}
super
.
onPageStarted
(
view
url
favicon
)
;
}
Override
public
void
onPageFinished
(
WebView
view
final
String
url
)
{
if
(
callback
!
=
null
)
{
callback
.
onPageFinished
(
view
.
getCertificate
(
)
!
=
null
)
;
final
String
viewURL
=
view
.
getUrl
(
)
;
if
(
!
UrlUtils
.
isInternalErrorURL
(
viewURL
)
)
{
callback
.
onURLChanged
(
view
.
getUrl
(
)
)
;
}
}
super
.
onPageFinished
(
view
url
)
;
view
.
evaluateJavascript
(
"
(
function
(
)
{
"
+
CLEAR_VISITED_CSS
+
"
}
)
(
)
;
"
null
)
;
}
Override
public
boolean
shouldOverrideUrlLoading
(
WebView
view
String
url
)
{
if
(
url
.
equals
(
"
focusabout
:
"
)
)
{
loadAbout
(
view
)
;
return
true
;
}
if
(
url
.
equals
(
"
about
:
blank
"
)
)
{
return
false
;
}
final
Uri
uri
=
Uri
.
parse
(
url
)
;
if
(
!
UrlUtils
.
isSupportedProtocol
(
uri
.
getScheme
(
)
)
&
&
callback
!
=
null
&
&
IntentUtils
.
handleExternalUri
(
view
.
getContext
(
)
(
IWebView
)
view
url
)
)
{
return
true
;
}
return
super
.
shouldOverrideUrlLoading
(
view
url
)
;
}
Override
public
void
onReceivedSslError
(
WebView
view
SslErrorHandler
handler
SslError
error
)
{
handler
.
cancel
(
)
;
if
(
error
.
getUrl
(
)
.
equals
(
currentPageURL
)
)
{
ErrorPage
.
loadErrorPage
(
view
error
.
getUrl
(
)
WebViewClient
.
ERROR_FAILED_SSL_HANDSHAKE
)
;
}
}
Override
public
void
onReceivedError
(
final
WebView
webView
int
errorCode
final
String
description
String
failingUrl
)
{
errorReceived
=
true
;
if
(
failingUrl
.
startsWith
(
ERROR_PROTOCOL
)
)
{
final
int
errorCodePosition
=
ERROR_PROTOCOL
.
length
(
)
;
final
String
errorCodeString
=
failingUrl
.
substring
(
errorCodePosition
)
;
int
desiredErrorCode
;
try
{
desiredErrorCode
=
Integer
.
parseInt
(
errorCodeString
)
;
if
(
!
ErrorPage
.
supportsErrorCode
(
desiredErrorCode
)
)
{
desiredErrorCode
=
WebViewClient
.
ERROR_BAD_URL
;
}
}
catch
(
final
NumberFormatException
e
)
{
desiredErrorCode
=
WebViewClient
.
ERROR_BAD_URL
;
}
ErrorPage
.
loadErrorPage
(
webView
failingUrl
desiredErrorCode
)
;
return
;
}
if
(
failingUrl
.
equals
(
currentPageURL
)
&
&
ErrorPage
.
supportsErrorCode
(
errorCode
)
)
{
ErrorPage
.
loadErrorPage
(
webView
currentPageURL
errorCode
)
;
return
;
}
super
.
onReceivedError
(
webView
errorCode
description
failingUrl
)
;
}
private
void
loadAbout
(
final
WebView
webView
)
{
final
Resources
resources
=
Locales
.
getLocalizedResources
(
webView
.
getContext
(
)
)
;
final
Map
<
String
String
>
substitutionMap
=
new
ArrayMap
<
>
(
)
;
final
String
appName
=
webView
.
getContext
(
)
.
getResources
(
)
.
getString
(
R
.
string
.
app_name
)
;
final
String
learnMoreURL
=
SupportUtils
.
getManifestoURL
(
)
;
String
aboutVersion
=
"
"
;
try
{
final
PackageInfo
packageInfo
=
context
.
getPackageManager
(
)
.
getPackageInfo
(
context
.
getPackageName
(
)
0
)
;
aboutVersion
=
String
.
format
(
"
%
s
(
Build
#
%
s
)
"
packageInfo
.
versionName
packageInfo
.
versionCode
)
;
}
catch
(
PackageManager
.
NameNotFoundException
e
)
{
}
substitutionMap
.
put
(
"
%
about
-
version
%
"
aboutVersion
)
;
final
String
aboutContent
=
resources
.
getString
(
R
.
string
.
about_content
appName
learnMoreURL
)
;
substitutionMap
.
put
(
"
%
about
-
content
%
"
aboutContent
)
;
final
String
wordmark
=
HtmlLoader
.
loadPngAsDataURI
(
webView
.
getContext
(
)
R
.
drawable
.
wordmark
)
;
substitutionMap
.
put
(
"
%
wordmark
%
"
wordmark
)
;
ViewCompat
.
setLayoutDirection
(
webView
View
.
LAYOUT_DIRECTION_LOCALE
)
;
final
int
layoutDirection
=
ViewCompat
.
getLayoutDirection
(
webView
)
;
final
String
direction
;
if
(
layoutDirection
=
=
View
.
LAYOUT_DIRECTION_LTR
)
{
direction
=
"
ltr
"
;
}
else
if
(
layoutDirection
=
=
View
.
LAYOUT_DIRECTION_RTL
)
{
direction
=
"
rtl
"
;
}
else
{
direction
=
"
auto
"
;
}
substitutionMap
.
put
(
"
%
dir
%
"
direction
)
;
final
String
data
=
HtmlLoader
.
loadResourceFile
(
webView
.
getContext
(
)
R
.
raw
.
about
substitutionMap
)
;
webView
.
loadDataWithBaseURL
(
"
file
:
/
/
/
android_res
/
raw
/
about
.
html
"
data
"
text
/
html
"
"
UTF
-
8
"
null
)
;
}
}
