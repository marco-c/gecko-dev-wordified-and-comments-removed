package
org
.
mozilla
.
focus
.
webkit
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
android
.
net
.
Uri
;
import
android
.
os
.
Bundle
;
import
android
.
os
.
Environment
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
util
.
AttributeSet
;
import
android
.
util
.
Log
;
import
android
.
view
.
View
;
import
android
.
webkit
.
CookieManager
;
import
android
.
webkit
.
DownloadListener
;
import
android
.
webkit
.
WebBackForwardList
;
import
android
.
webkit
.
WebChromeClient
;
import
android
.
webkit
.
WebStorage
;
import
android
.
webkit
.
WebView
;
import
android
.
webkit
.
WebViewDatabase
;
import
org
.
mozilla
.
focus
.
BuildConfig
;
import
org
.
mozilla
.
focus
.
session
.
Session
;
import
org
.
mozilla
.
focus
.
utils
.
AppConstants
;
import
org
.
mozilla
.
focus
.
utils
.
FileUtils
;
import
org
.
mozilla
.
focus
.
utils
.
ThreadUtils
;
import
org
.
mozilla
.
focus
.
utils
.
UrlUtils
;
import
org
.
mozilla
.
focus
.
web
.
Download
;
import
org
.
mozilla
.
focus
.
web
.
IWebView
;
import
org
.
mozilla
.
focus
.
web
.
WebViewProvider
;
public
class
WebkitView
extends
NestedWebView
implements
IWebView
SharedPreferences
.
OnSharedPreferenceChangeListener
{
private
static
final
String
TAG
=
"
WebkitView
"
;
private
static
final
String
KEY_CURRENTURL
=
"
currenturl
"
;
private
static
final
String
KEY_STATE_UUID
=
"
state_uuid
"
;
private
Callback
callback
;
private
FocusWebViewClient
client
;
private
final
LinkHandler
linkHandler
;
public
WebkitView
(
Context
context
AttributeSet
attrs
)
{
super
(
context
attrs
)
;
client
=
new
FocusWebViewClient
(
getContext
(
)
.
getApplicationContext
(
)
)
;
setWebViewClient
(
client
)
;
setWebChromeClient
(
createWebChromeClient
(
)
)
;
setDownloadListener
(
createDownloadListener
(
)
)
;
if
(
BuildConfig
.
DEBUG
)
{
setWebContentsDebuggingEnabled
(
true
)
;
}
setLongClickable
(
true
)
;
linkHandler
=
new
LinkHandler
(
this
)
;
setOnLongClickListener
(
linkHandler
)
;
}
Override
protected
void
onAttachedToWindow
(
)
{
super
.
onAttachedToWindow
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
getContext
(
)
)
.
registerOnSharedPreferenceChangeListener
(
this
)
;
}
Override
protected
void
onDetachedFromWindow
(
)
{
super
.
onDetachedFromWindow
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
getContext
(
)
)
.
unregisterOnSharedPreferenceChangeListener
(
this
)
;
}
Override
public
void
onSharedPreferenceChanged
(
SharedPreferences
sharedPreferences
String
key
)
{
WebViewProvider
.
applyAppSettings
(
getContext
(
)
getSettings
(
)
)
;
}
Override
public
void
restoreWebViewState
(
Session
session
Bundle
inBundle
)
{
final
String
uuid
=
inBundle
.
getString
(
KEY_STATE_UUID
)
;
if
(
!
session
.
getUUID
(
)
.
equals
(
uuid
)
)
{
return
;
}
final
Bundle
stateData
=
session
.
getWebViewState
(
)
;
final
WebBackForwardList
backForwardList
=
stateData
!
=
null
?
super
.
restoreState
(
stateData
)
:
null
;
final
String
desiredURL
=
inBundle
.
getString
(
KEY_CURRENTURL
)
;
client
.
notifyCurrentURL
(
desiredURL
)
;
if
(
backForwardList
!
=
null
&
&
backForwardList
.
getCurrentItem
(
)
.
getUrl
(
)
.
equals
(
desiredURL
)
)
{
reload
(
)
;
}
else
{
loadUrl
(
desiredURL
)
;
}
}
Override
public
void
saveWebViewState
(
Session
session
Bundle
outState
)
{
final
Bundle
stateData
=
new
Bundle
(
)
;
super
.
saveState
(
stateData
)
;
session
.
saveWebViewState
(
stateData
)
;
outState
.
putString
(
KEY_STATE_UUID
session
.
getUUID
(
)
)
;
outState
.
putString
(
KEY_CURRENTURL
getUrl
(
)
)
;
}
Override
public
void
setBlockingEnabled
(
boolean
enabled
)
{
client
.
setBlockingEnabled
(
enabled
)
;
}
public
boolean
isBlockingEnabled
(
)
{
return
client
.
isBlockingEnabled
(
)
;
}
Override
public
void
setCallback
(
Callback
callback
)
{
this
.
callback
=
callback
;
client
.
setCallback
(
callback
)
;
linkHandler
.
setCallback
(
callback
)
;
}
public
void
loadUrl
(
String
url
)
{
if
(
!
client
.
shouldOverrideUrlLoading
(
this
url
)
)
{
super
.
loadUrl
(
url
)
;
}
client
.
notifyCurrentURL
(
url
)
;
}
Override
public
void
destroy
(
)
{
super
.
destroy
(
)
;
deleteContentFromKnownLocations
(
getContext
(
)
)
;
}
Override
public
void
cleanup
(
)
{
clearFormData
(
)
;
clearHistory
(
)
;
clearMatches
(
)
;
clearSslPreferences
(
)
;
clearCache
(
true
)
;
CookieManager
.
getInstance
(
)
.
removeAllCookies
(
null
)
;
WebStorage
.
getInstance
(
)
.
deleteAllData
(
)
;
final
WebViewDatabase
webViewDatabase
=
WebViewDatabase
.
getInstance
(
getContext
(
)
)
;
webViewDatabase
.
clearFormData
(
)
;
webViewDatabase
.
clearHttpAuthUsernamePassword
(
)
;
deleteContentFromKnownLocations
(
getContext
(
)
)
;
}
public
static
void
deleteContentFromKnownLocations
(
final
Context
context
)
{
ThreadUtils
.
postToBackgroundThread
(
new
Runnable
(
)
{
Override
public
void
run
(
)
{
FileUtils
.
deleteWebViewDirectory
(
context
)
;
FileUtils
.
truncateCacheDirectory
(
context
)
;
}
}
)
;
}
private
WebChromeClient
createWebChromeClient
(
)
{
return
new
WebChromeClient
(
)
{
Override
public
void
onProgressChanged
(
WebView
view
int
newProgress
)
{
if
(
callback
!
=
null
)
{
final
String
viewURL
=
view
.
getUrl
(
)
;
if
(
!
UrlUtils
.
isInternalErrorURL
(
viewURL
)
&
&
viewURL
!
=
null
)
{
callback
.
onURLChanged
(
viewURL
)
;
}
callback
.
onProgress
(
newProgress
)
;
}
}
Override
public
void
onShowCustomView
(
View
view
final
CustomViewCallback
webviewCallback
)
{
final
FullscreenCallback
fullscreenCallback
=
new
FullscreenCallback
(
)
{
Override
public
void
fullScreenExited
(
)
{
webviewCallback
.
onCustomViewHidden
(
)
;
}
}
;
callback
.
onEnterFullScreen
(
fullscreenCallback
view
)
;
}
Override
public
void
onHideCustomView
(
)
{
callback
.
onExitFullScreen
(
)
;
}
}
;
}
private
DownloadListener
createDownloadListener
(
)
{
return
new
DownloadListener
(
)
{
Override
public
void
onDownloadStart
(
String
url
String
userAgent
String
contentDisposition
String
mimetype
long
contentLength
)
{
if
(
!
AppConstants
.
supportsDownloadingFiles
(
)
)
{
return
;
}
final
String
scheme
=
Uri
.
parse
(
url
)
.
getScheme
(
)
;
if
(
scheme
=
=
null
|
|
(
!
scheme
.
equals
(
"
http
"
)
&
&
!
scheme
.
equals
(
"
https
"
)
)
)
{
Log
.
w
(
TAG
"
Ignoring
download
from
non
http
(
s
)
URL
:
"
+
url
)
;
return
;
}
if
(
callback
!
=
null
)
{
final
Download
download
=
new
Download
(
url
userAgent
contentDisposition
mimetype
contentLength
Environment
.
DIRECTORY_DOWNLOADS
)
;
callback
.
onDownloadStart
(
download
)
;
}
}
}
;
}
}
