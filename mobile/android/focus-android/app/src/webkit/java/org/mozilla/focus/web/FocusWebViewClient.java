package
org
.
mozilla
.
focus
.
web
;
import
android
.
content
.
Context
;
import
android
.
graphics
.
Bitmap
;
import
android
.
net
.
http
.
SslError
;
import
android
.
webkit
.
SslErrorHandler
;
import
android
.
webkit
.
WebView
;
import
android
.
webkit
.
WebViewClient
;
import
org
.
mozilla
.
focus
.
webkit
.
ErrorPage
;
import
org
.
mozilla
.
focus
.
webkit
.
TrackingProtectionWebViewClient
;
public
class
FocusWebViewClient
extends
TrackingProtectionWebViewClient
{
final
static
String
ERROR_PROTOCOL
=
"
error
:
"
;
public
FocusWebViewClient
(
Context
context
)
{
super
(
context
)
;
}
private
IWebView
.
Callback
callback
;
public
void
setCallback
(
IWebView
.
Callback
callback
)
{
this
.
callback
=
callback
;
}
Override
public
void
onPageStarted
(
WebView
view
String
url
Bitmap
favicon
)
{
if
(
callback
!
=
null
)
{
callback
.
onPageStarted
(
url
)
;
}
super
.
onPageStarted
(
view
url
favicon
)
;
}
Override
public
void
onPageFinished
(
WebView
view
String
url
)
{
if
(
callback
!
=
null
)
{
callback
.
onPageFinished
(
view
.
getCertificate
(
)
!
=
null
)
;
}
super
.
onPageFinished
(
view
url
)
;
}
Override
public
boolean
shouldOverrideUrlLoading
(
WebView
view
String
url
)
{
if
(
(
!
url
.
startsWith
(
"
http
:
/
/
"
)
)
&
&
(
!
url
.
startsWith
(
"
https
:
/
/
"
)
)
&
&
(
!
url
.
startsWith
(
"
file
:
/
/
"
)
)
&
&
(
!
url
.
startsWith
(
"
data
:
"
)
)
&
&
(
!
url
.
startsWith
(
"
error
:
"
)
)
)
{
if
(
callback
.
handleExternalUrl
(
url
)
)
{
return
true
;
}
}
return
super
.
shouldOverrideUrlLoading
(
view
url
)
;
}
Override
public
void
onReceivedSslError
(
WebView
view
SslErrorHandler
handler
SslError
error
)
{
handler
.
cancel
(
)
;
if
(
error
.
getUrl
(
)
.
equals
(
currentPageURL
)
)
{
ErrorPage
.
loadErrorPage
(
view
error
.
getUrl
(
)
WebViewClient
.
ERROR_FAILED_SSL_HANDSHAKE
)
;
}
}
Override
public
void
onReceivedError
(
final
WebView
webView
int
errorCode
final
String
description
String
failingUrl
)
{
if
(
failingUrl
.
startsWith
(
ERROR_PROTOCOL
)
)
{
final
int
errorCodePosition
=
ERROR_PROTOCOL
.
length
(
)
;
final
String
errorCodeString
=
failingUrl
.
substring
(
errorCodePosition
)
;
int
desiredErrorCode
;
try
{
desiredErrorCode
=
Integer
.
parseInt
(
errorCodeString
)
;
if
(
!
ErrorPage
.
supportsErrorCode
(
desiredErrorCode
)
)
{
desiredErrorCode
=
WebViewClient
.
ERROR_BAD_URL
;
}
}
catch
(
final
NumberFormatException
e
)
{
desiredErrorCode
=
WebViewClient
.
ERROR_BAD_URL
;
}
ErrorPage
.
loadErrorPage
(
webView
failingUrl
desiredErrorCode
)
;
return
;
}
if
(
failingUrl
.
equals
(
currentPageURL
)
&
&
ErrorPage
.
supportsErrorCode
(
errorCode
)
)
{
ErrorPage
.
loadErrorPage
(
webView
currentPageURL
errorCode
)
;
return
;
}
super
.
onReceivedError
(
webView
errorCode
description
failingUrl
)
;
}
}
