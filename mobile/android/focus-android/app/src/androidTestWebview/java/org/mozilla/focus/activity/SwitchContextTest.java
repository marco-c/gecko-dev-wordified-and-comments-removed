package
org
.
mozilla
.
focus
.
activity
;
import
android
.
content
.
Context
;
import
android
.
content
.
Intent
;
import
android
.
preference
.
PreferenceManager
;
import
android
.
support
.
test
.
InstrumentationRegistry
;
import
android
.
support
.
test
.
rule
.
ActivityTestRule
;
import
android
.
support
.
test
.
runner
.
AndroidJUnit4
;
import
android
.
support
.
test
.
uiautomator
.
By
;
import
android
.
support
.
test
.
uiautomator
.
UiObject
;
import
android
.
support
.
test
.
uiautomator
.
UiObjectNotFoundException
;
import
android
.
support
.
test
.
uiautomator
.
UiSelector
;
import
android
.
support
.
test
.
uiautomator
.
Until
;
import
org
.
junit
.
After
;
import
org
.
junit
.
Assert
;
import
org
.
junit
.
Rule
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
focus
.
helpers
.
TestHelper
;
import
java
.
io
.
IOException
;
import
okhttp3
.
mockwebserver
.
MockResponse
;
import
okhttp3
.
mockwebserver
.
MockWebServer
;
import
static
junit
.
framework
.
Assert
.
assertTrue
;
import
static
org
.
hamcrest
.
core
.
IsNull
.
notNullValue
;
import
static
org
.
junit
.
Assert
.
assertThat
;
import
static
org
.
mozilla
.
focus
.
fragment
.
FirstrunFragment
.
FIRSTRUN_PREF
;
import
static
org
.
mozilla
.
focus
.
helpers
.
TestHelper
.
waitingTime
;
RunWith
(
AndroidJUnit4
.
class
)
public
class
SwitchContextTest
{
private
static
final
String
TEST_PATH
=
"
/
"
;
private
MockWebServer
webServer
;
Rule
public
ActivityTestRule
<
MainActivity
>
mActivityTestRule
=
new
ActivityTestRule
<
MainActivity
>
(
MainActivity
.
class
)
{
Override
protected
void
beforeActivityLaunched
(
)
{
super
.
beforeActivityLaunched
(
)
;
Context
appContext
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
PreferenceManager
.
getDefaultSharedPreferences
(
appContext
)
.
edit
(
)
.
putBoolean
(
FIRSTRUN_PREF
true
)
.
apply
(
)
;
webServer
=
new
MockWebServer
(
)
;
try
{
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
image_test
.
html
"
)
)
.
addHeader
(
"
Set
-
Cookie
"
"
sphere
=
battery
;
Expires
=
Wed
21
Oct
2035
07
:
28
:
00
GMT
;
"
)
)
;
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
rabbit
.
jpg
"
)
)
)
;
webServer
.
enqueue
(
new
MockResponse
(
)
.
setBody
(
TestHelper
.
readTestAsset
(
"
download
.
jpg
"
)
)
)
;
webServer
.
start
(
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
start
web
server
"
e
)
;
}
}
Override
protected
void
afterActivityFinished
(
)
{
super
.
afterActivityFinished
(
)
;
try
{
webServer
.
close
(
)
;
webServer
.
shutdown
(
)
;
}
catch
(
IOException
e
)
{
throw
new
AssertionError
(
"
Could
not
stop
web
server
"
e
)
;
}
}
}
;
After
public
void
tearDown
(
)
{
mActivityTestRule
.
getActivity
(
)
.
finishAndRemoveTask
(
)
;
}
Test
public
void
ForegroundTest
(
)
throws
UiObjectNotFoundException
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
webServer
.
url
(
TEST_PATH
)
.
toString
(
)
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
waitForWebSiteTitleLoad
(
)
;
TestHelper
.
pressHomeKey
(
)
;
TestHelper
.
openNotification
(
)
;
TestHelper
.
waitForIdle
(
)
;
TestHelper
.
expandNotification
(
)
;
TestHelper
.
notificationOpenItem
.
click
(
)
;
TestHelper
.
browserURLbar
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
browserURLbar
.
exists
(
)
)
;
TestHelper
.
waitForWebSiteTitleLoad
(
)
;
}
Test
public
void
eraseAndOpenTest
(
)
throws
UiObjectNotFoundException
{
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
Assert
.
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
webServer
.
url
(
TEST_PATH
)
.
toString
(
)
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
waitForWebSiteTitleLoad
(
)
;
TestHelper
.
pressHomeKey
(
)
;
TestHelper
.
openNotification
(
)
;
TestHelper
.
expandNotification
(
)
;
TestHelper
.
notificationEraseOpenItem
.
click
(
)
;
TestHelper
.
erasedMsg
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
erasedMsg
.
exists
(
)
)
;
assertTrue
(
TestHelper
.
inlineAutocompleteEditText
.
exists
(
)
)
;
assertTrue
(
TestHelper
.
initialView
.
exists
(
)
)
;
}
Test
public
void
settingsToFocus
(
)
throws
UiObjectNotFoundException
{
final
int
LAUNCH_TIMEOUT
=
5000
;
final
String
SETTINGS_APP
=
"
com
.
android
.
settings
"
;
final
UiObject
settings
=
TestHelper
.
mDevice
.
findObject
(
new
UiSelector
(
)
.
packageName
(
SETTINGS_APP
)
.
enabled
(
true
)
)
;
TestHelper
.
inlineAutocompleteEditText
.
waitForExists
(
waitingTime
)
;
TestHelper
.
inlineAutocompleteEditText
.
clearTextField
(
)
;
TestHelper
.
inlineAutocompleteEditText
.
setText
(
webServer
.
url
(
TEST_PATH
)
.
toString
(
)
)
;
TestHelper
.
hint
.
waitForExists
(
waitingTime
)
;
TestHelper
.
pressEnterKey
(
)
;
TestHelper
.
waitForWebSiteTitleLoad
(
)
;
TestHelper
.
pressHomeKey
(
)
;
final
String
launcherPackage
=
TestHelper
.
mDevice
.
getLauncherPackageName
(
)
;
assertThat
(
launcherPackage
notNullValue
(
)
)
;
TestHelper
.
mDevice
.
wait
(
Until
.
hasObject
(
By
.
pkg
(
launcherPackage
)
.
depth
(
0
)
)
LAUNCH_TIMEOUT
)
;
Context
context
=
InstrumentationRegistry
.
getInstrumentation
(
)
.
getTargetContext
(
)
.
getApplicationContext
(
)
;
final
Intent
intent
=
context
.
getPackageManager
(
)
.
getLaunchIntentForPackage
(
SETTINGS_APP
)
;
context
.
startActivity
(
intent
)
;
settings
.
waitForExists
(
waitingTime
)
;
assertTrue
(
settings
.
exists
(
)
)
;
TestHelper
.
openNotification
(
)
;
TestHelper
.
expandNotification
(
)
;
TestHelper
.
notificationOpenItem
.
click
(
)
;
TestHelper
.
browserURLbar
.
waitForExists
(
waitingTime
)
;
assertTrue
(
TestHelper
.
browserURLbar
.
exists
(
)
)
;
TestHelper
.
waitForWebSiteTitleLoad
(
)
;
}
}
