ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
ChromeUtils
.
defineModuleGetter
(
this
"
SSLExceptions
"
"
resource
:
/
/
gre
/
modules
/
SSLExceptions
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
var
EXPORTED_SYMBOLS
=
[
"
ErrorPageEventHandler
"
]
;
var
ErrorPageEventHandler
=
{
handleEvent
:
function
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
click
"
:
{
if
(
!
aEvent
.
isTrusted
)
return
;
let
target
=
aEvent
.
originalTarget
;
let
errorDoc
=
target
.
ownerDocument
;
if
(
errorDoc
.
documentURI
.
startsWith
(
"
about
:
certerror
?
e
=
nssBadCert
"
)
)
{
let
perm
=
errorDoc
.
getElementById
(
"
permanentExceptionButton
"
)
;
let
temp
=
errorDoc
.
getElementById
(
"
temporaryExceptionButton
"
)
;
if
(
target
=
=
temp
|
|
target
=
=
perm
)
{
try
{
let
uri
=
Services
.
io
.
newURI
(
errorDoc
.
location
.
href
)
;
let
sslExceptions
=
new
SSLExceptions
(
)
;
if
(
target
=
=
perm
)
sslExceptions
.
addPermanentException
(
uri
errorDoc
.
defaultView
)
;
else
sslExceptions
.
addTemporaryException
(
uri
errorDoc
.
defaultView
)
;
}
catch
(
e
)
{
dump
(
"
Failed
to
set
cert
exception
:
"
+
e
+
"
\
n
"
)
;
}
errorDoc
.
location
.
reload
(
)
;
}
else
if
(
target
=
=
errorDoc
.
getElementById
(
"
getMeOutOfHereButton
"
)
)
{
errorDoc
.
location
=
"
about
:
home
"
;
}
}
break
;
}
}
}
}
;
