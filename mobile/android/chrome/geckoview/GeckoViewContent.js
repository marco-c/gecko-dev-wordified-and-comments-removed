ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewContentModule
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
Services
:
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
dump
"
(
)
=
>
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
AndroidLog
.
jsm
"
{
}
)
.
AndroidLog
.
d
.
bind
(
null
"
ViewContent
"
)
)
;
function
debug
(
aMsg
)
{
}
class
GeckoViewContent
extends
GeckoViewContentModule
{
onEnable
(
)
{
debug
(
"
onEnable
"
)
;
addEventListener
(
"
DOMTitleChanged
"
this
false
)
;
addEventListener
(
"
DOMWindowFocus
"
this
false
)
;
addEventListener
(
"
DOMWindowClose
"
this
false
)
;
addEventListener
(
"
MozDOMFullscreen
:
Entered
"
this
false
)
;
addEventListener
(
"
MozDOMFullscreen
:
Exit
"
this
false
)
;
addEventListener
(
"
MozDOMFullscreen
:
Exited
"
this
false
)
;
addEventListener
(
"
MozDOMFullscreen
:
Request
"
this
false
)
;
addEventListener
(
"
contextmenu
"
this
{
capture
:
true
}
)
;
this
.
messageManager
.
addMessageListener
(
"
GeckoView
:
DOMFullscreenEntered
"
this
)
;
this
.
messageManager
.
addMessageListener
(
"
GeckoView
:
DOMFullscreenExited
"
this
)
;
this
.
messageManager
.
addMessageListener
(
"
GeckoView
:
ZoomToInput
"
this
)
;
}
onDisable
(
)
{
debug
(
"
onDisable
"
)
;
removeEventListener
(
"
DOMTitleChanged
"
this
)
;
removeEventListener
(
"
DOMWindowFocus
"
this
)
;
removeEventListener
(
"
DOMWindowClose
"
this
)
;
removeEventListener
(
"
MozDOMFullscreen
:
Entered
"
this
)
;
removeEventListener
(
"
MozDOMFullscreen
:
Exit
"
this
)
;
removeEventListener
(
"
MozDOMFullscreen
:
Exited
"
this
)
;
removeEventListener
(
"
MozDOMFullscreen
:
Request
"
this
)
;
removeEventListener
(
"
contextmenu
"
this
{
capture
:
true
}
)
;
this
.
messageManager
.
removeMessageListener
(
"
GeckoView
:
DOMFullscreenEntered
"
this
)
;
this
.
messageManager
.
removeMessageListener
(
"
GeckoView
:
DOMFullscreenExited
"
this
)
;
this
.
messageManager
.
removeMessageListener
(
"
GeckoView
:
ZoomToInput
"
this
)
;
}
receiveMessage
(
aMsg
)
{
debug
(
"
receiveMessage
"
+
aMsg
.
name
)
;
switch
(
aMsg
.
name
)
{
case
"
GeckoView
:
DOMFullscreenEntered
"
:
if
(
content
)
{
content
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
.
handleFullscreenRequests
(
)
;
}
break
;
case
"
GeckoView
:
DOMFullscreenExited
"
:
if
(
content
)
{
content
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
.
exitFullscreen
(
)
;
}
break
;
case
"
GeckoView
:
ZoomToInput
"
:
{
let
dwu
=
content
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
;
let
zoomToFocusedInput
=
function
(
)
{
if
(
!
dwu
.
flushApzRepaints
(
)
)
{
dwu
.
zoomToFocusedInput
(
)
;
return
;
}
Services
.
obs
.
addObserver
(
function
apzFlushDone
(
)
{
Services
.
obs
.
removeObserver
(
apzFlushDone
"
apz
-
repaints
-
flushed
"
)
;
dwu
.
zoomToFocusedInput
(
)
;
}
"
apz
-
repaints
-
flushed
"
)
;
}
;
let
gotResize
=
false
;
let
onResize
=
function
(
)
{
gotResize
=
true
;
if
(
dwu
.
isMozAfterPaintPending
)
{
addEventListener
(
"
MozAfterPaint
"
function
paintDone
(
)
{
removeEventListener
(
"
MozAfterPaint
"
paintDone
{
capture
:
true
}
)
;
zoomToFocusedInput
(
)
;
}
{
capture
:
true
}
)
;
}
else
{
zoomToFocusedInput
(
)
;
}
}
;
addEventListener
(
"
resize
"
onResize
{
capture
:
true
}
)
;
content
.
setTimeout
(
(
)
=
>
{
removeEventListener
(
"
resize
"
onResize
{
capture
:
true
}
)
;
if
(
!
gotResize
)
{
onResize
(
)
;
}
}
500
)
;
}
break
;
}
}
handleEvent
(
aEvent
)
{
debug
(
"
handleEvent
"
+
aEvent
.
type
)
;
switch
(
aEvent
.
type
)
{
case
"
contextmenu
"
:
function
nearestParentHref
(
node
)
{
while
(
node
&
&
!
node
.
href
)
{
node
=
node
.
parentNode
;
}
return
node
&
&
node
.
href
;
}
const
node
=
aEvent
.
target
;
const
hrefNode
=
nearestParentHref
(
node
)
;
const
elementType
=
ChromeUtils
.
getClassName
(
node
)
;
const
isImage
=
elementType
=
=
=
"
HTMLImageElement
"
;
const
isMedia
=
elementType
=
=
=
"
HTMLVideoElement
"
|
|
elementType
=
=
=
"
HTMLAudioElement
"
;
if
(
hrefNode
|
|
isImage
|
|
isMedia
)
{
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
ContextMenu
"
screenX
:
aEvent
.
screenX
screenY
:
aEvent
.
screenY
uri
:
hrefNode
elementType
elementSrc
:
(
isImage
|
|
isMedia
)
?
node
.
currentSrc
|
|
node
.
src
:
null
}
)
;
aEvent
.
preventDefault
(
)
;
}
break
;
case
"
MozDOMFullscreen
:
Request
"
:
sendAsyncMessage
(
"
GeckoView
:
DOMFullscreenRequest
"
)
;
break
;
case
"
MozDOMFullscreen
:
Entered
"
:
case
"
MozDOMFullscreen
:
Exited
"
:
if
(
content
&
&
content
.
document
.
fullscreenElement
)
{
break
;
}
case
"
MozDOMFullscreen
:
Exit
"
:
sendAsyncMessage
(
"
GeckoView
:
DOMFullscreenExit
"
)
;
break
;
case
"
DOMTitleChanged
"
:
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
DOMTitleChanged
"
title
:
content
.
document
.
title
}
)
;
break
;
case
"
DOMWindowFocus
"
:
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
DOMWindowFocus
"
}
)
;
break
;
case
"
DOMWindowClose
"
:
if
(
!
aEvent
.
isTrusted
)
{
return
;
}
aEvent
.
preventDefault
(
)
;
this
.
eventDispatcher
.
sendRequest
(
{
type
:
"
GeckoView
:
DOMWindowClose
"
}
)
;
break
;
}
}
}
let
{
debug
warn
}
=
GeckoViewContent
.
initLogging
(
"
GeckoViewContent
"
)
;
let
module
=
GeckoViewContent
.
create
(
this
)
;
