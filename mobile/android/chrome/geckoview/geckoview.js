"
use
strict
"
;
var
{
DelayedInit
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
DelayedInit
.
jsm
"
)
;
var
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
var
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
E10SUtils
:
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
EventDispatcher
:
"
resource
:
/
/
gre
/
modules
/
Messaging
.
jsm
"
GeckoViewActorManager
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewActorManager
.
jsm
"
GeckoViewSettings
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewSettings
.
jsm
"
GeckoViewUtils
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
HistogramStopwatch
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewTelemetry
.
jsm
"
RemoteSecuritySettings
:
"
resource
:
/
/
gre
/
modules
/
psm
/
RemoteSecuritySettings
.
jsm
"
}
)
;
XPCOMUtils
.
defineLazyGetter
(
this
"
WindowEventDispatcher
"
(
)
=
>
EventDispatcher
.
for
(
window
)
)
;
var
ModuleManager
=
{
get
_initData
(
)
{
return
window
.
arguments
[
0
]
.
QueryInterface
(
Ci
.
nsIAndroidView
)
.
initData
;
}
init
(
aBrowser
aModules
)
{
const
MODULES_INIT_PROBE
=
new
HistogramStopwatch
(
"
GV_STARTUP_MODULES_MS
"
aBrowser
)
;
MODULES_INIT_PROBE
.
start
(
)
;
const
initData
=
this
.
_initData
;
this
.
_browser
=
aBrowser
;
this
.
_settings
=
initData
.
settings
;
this
.
_frozenSettings
=
Object
.
freeze
(
Object
.
assign
(
{
}
this
.
_settings
)
)
;
const
self
=
this
;
this
.
_modules
=
new
Map
(
(
function
*
(
)
{
for
(
const
module
of
aModules
)
{
yield
[
module
.
name
new
ModuleInfo
(
{
enabled
:
!
!
initData
.
modules
[
module
.
name
]
manager
:
self
.
.
.
module
}
)
]
;
}
}
)
(
)
)
;
window
.
document
.
documentElement
.
appendChild
(
aBrowser
)
;
aBrowser
.
docShellIsActive
=
true
;
aBrowser
.
preserveLayers
(
true
)
;
WindowEventDispatcher
.
registerListener
(
this
[
"
GeckoView
:
UpdateModuleState
"
"
GeckoView
:
UpdateInitData
"
"
GeckoView
:
UpdateSettings
"
]
)
;
this
.
messageManager
.
addMessageListener
(
"
GeckoView
:
ContentModuleLoaded
"
this
)
;
this
.
_moduleByActorName
=
new
Map
(
)
;
this
.
forEach
(
module
=
>
{
module
.
onInit
(
)
;
module
.
loadInitFrameScript
(
)
;
for
(
const
actorName
of
module
.
actorNames
)
{
this
.
_moduleByActorName
[
actorName
]
=
module
;
}
}
)
;
window
.
addEventListener
(
"
unload
"
(
)
=
>
{
this
.
forEach
(
module
=
>
{
module
.
enabled
=
false
;
module
.
onDestroy
(
)
;
}
)
;
this
.
_modules
.
clear
(
)
;
}
)
;
MODULES_INIT_PROBE
.
finish
(
)
;
}
get
window
(
)
{
return
window
;
}
get
browser
(
)
{
return
this
.
_browser
;
}
get
messageManager
(
)
{
return
this
.
_browser
.
messageManager
;
}
get
eventDispatcher
(
)
{
return
WindowEventDispatcher
;
}
get
settings
(
)
{
return
this
.
_frozenSettings
;
}
forEach
(
aCallback
)
{
this
.
_modules
.
forEach
(
aCallback
this
)
;
}
getActor
(
aActorName
)
{
return
this
.
browser
.
browsingContext
.
currentWindowGlobal
?
.
getActor
(
aActorName
)
;
}
remoteTypeFor
(
aURI
currentType
)
{
return
E10SUtils
.
getRemoteTypeForURI
(
aURI
GeckoViewSettings
.
useMultiprocess
false
currentType
this
.
browser
.
currentURI
)
;
}
shouldLoadInThisProcess
(
aURI
)
{
const
currentType
=
this
.
browser
.
remoteType
|
|
E10SUtils
.
NOT_REMOTE
;
return
currentType
=
=
=
this
.
remoteTypeFor
(
aURI
currentType
)
;
}
async
updateRemoteAndNavigate
(
aURI
aLoadOptions
aHistoryIndex
=
-
1
)
{
const
currentType
=
this
.
browser
.
remoteType
|
|
E10SUtils
.
NOT_REMOTE
;
const
remoteType
=
this
.
remoteTypeFor
(
aURI
currentType
)
;
debug
updateRemoteAndNavigate
:
uri
=
{
aURI
}
currentType
=
{
currentType
}
remoteType
=
{
remoteType
}
;
if
(
remoteType
!
=
=
E10SUtils
.
NOT_REMOTE
&
&
!
GeckoViewSettings
.
useMultiprocess
)
{
warn
Tried
to
create
a
remote
browser
in
non
-
multiprocess
mode
;
return
false
;
}
const
{
history
}
=
await
this
.
getActor
(
"
GeckoViewContent
"
)
.
collectState
(
)
;
const
sessionState
=
{
history
}
;
if
(
aHistoryIndex
>
=
0
)
{
history
.
index
=
aHistoryIndex
+
1
;
history
.
index
=
Math
.
max
(
1
Math
.
min
(
history
.
index
history
.
entries
.
length
)
)
;
}
else
{
sessionState
.
loadOptions
=
aLoadOptions
;
}
const
disabledModules
=
[
]
;
this
.
forEach
(
module
=
>
{
if
(
module
.
enabled
)
{
module
.
enabled
=
false
;
disabledModules
.
push
(
module
)
;
}
}
)
;
this
.
forEach
(
module
=
>
{
module
.
onDestroyBrowser
(
)
;
}
)
;
const
parent
=
this
.
browser
.
parentNode
;
this
.
browser
.
remove
(
)
;
if
(
remoteType
)
{
this
.
browser
.
setAttribute
(
"
remote
"
"
true
"
)
;
this
.
browser
.
setAttribute
(
"
remoteType
"
remoteType
)
;
}
else
{
this
.
browser
.
setAttribute
(
"
remote
"
"
false
"
)
;
this
.
browser
.
removeAttribute
(
"
remoteType
"
)
;
}
this
.
forEach
(
module
=
>
{
if
(
module
.
impl
)
{
module
.
impl
.
onInitBrowser
(
)
;
}
}
)
;
parent
.
appendChild
(
this
.
browser
)
;
this
.
browser
.
restoreProgressListeners
(
)
;
this
.
messageManager
.
addMessageListener
(
"
GeckoView
:
ContentModuleLoaded
"
this
)
;
this
.
forEach
(
module
=
>
{
module
.
loadInitFrameScript
(
)
;
}
)
;
disabledModules
.
forEach
(
module
=
>
{
module
.
enabled
=
true
;
}
)
;
this
.
getActor
(
"
GeckoViewContent
"
)
.
restoreState
(
sessionState
)
;
this
.
browser
.
focus
(
)
;
return
true
;
}
_updateSettings
(
aSettings
)
{
Object
.
assign
(
this
.
_settings
aSettings
)
;
this
.
_frozenSettings
=
Object
.
freeze
(
Object
.
assign
(
{
}
this
.
_settings
)
)
;
const
windowType
=
aSettings
.
isPopup
?
"
navigator
:
popup
"
:
"
navigator
:
geckoview
"
;
window
.
document
.
documentElement
.
setAttribute
(
"
windowtype
"
windowType
)
;
this
.
forEach
(
module
=
>
{
if
(
module
.
impl
)
{
module
.
impl
.
onSettingsUpdate
(
)
;
}
}
)
;
}
onMessageFromActor
(
aActorName
aMessage
)
{
this
.
_moduleByActorName
[
aActorName
]
.
receiveMessage
(
aMessage
)
;
}
onEvent
(
aEvent
aData
aCallback
)
{
debug
onEvent
{
aEvent
}
{
aData
}
;
switch
(
aEvent
)
{
case
"
GeckoView
:
UpdateModuleState
"
:
{
const
module
=
this
.
_modules
.
get
(
aData
.
module
)
;
if
(
module
)
{
module
.
enabled
=
aData
.
enabled
;
}
break
;
}
case
"
GeckoView
:
UpdateInitData
"
:
{
const
initData
=
this
.
_initData
;
this
.
_updateSettings
(
initData
.
settings
)
;
for
(
const
name
in
initData
.
modules
)
{
const
module
=
this
.
_modules
.
get
(
name
)
;
if
(
module
)
{
module
.
enabled
=
initData
.
modules
[
name
]
;
}
}
this
.
_browser
.
messageManager
.
sendAsyncMessage
(
aEvent
)
;
break
;
}
case
"
GeckoView
:
UpdateSettings
"
:
{
this
.
_updateSettings
(
aData
)
;
break
;
}
}
}
receiveMessage
(
aMsg
)
{
debug
receiveMessage
{
aMsg
.
name
}
{
aMsg
.
data
}
;
switch
(
aMsg
.
name
)
{
case
"
GeckoView
:
ContentModuleLoaded
"
:
{
const
module
=
this
.
_modules
.
get
(
aMsg
.
data
.
module
)
;
if
(
module
)
{
module
.
onContentModuleLoaded
(
)
;
}
break
;
}
}
}
}
;
class
ModuleInfo
{
constructor
(
{
manager
name
enabled
onInit
onEnable
}
)
{
this
.
_manager
=
manager
;
this
.
_name
=
name
;
if
(
onInit
?
.
resource
!
=
=
undefined
&
&
onEnable
?
.
resource
!
=
=
undefined
)
{
throw
new
Error
(
"
Only
one
main
process
script
is
allowed
for
each
module
.
"
)
;
}
this
.
_impl
=
null
;
this
.
_contentModuleLoaded
=
false
;
this
.
_enabled
=
false
;
this
.
_enabledOnInit
=
enabled
;
this
.
_loadResource
(
onInit
)
;
this
.
_loadActors
(
onInit
)
;
if
(
this
.
_enabledOnInit
)
{
this
.
_loadActors
(
onEnable
)
;
}
this
.
_onInitPhase
=
onInit
;
this
.
_onEnablePhase
=
onEnable
;
const
actorNames
=
[
]
;
if
(
this
.
_onInitPhase
?
.
actors
)
{
actorNames
.
push
(
Object
.
keys
(
this
.
_onInitPhase
.
actors
)
)
;
}
if
(
this
.
_onEnablePhase
?
.
actors
)
{
actorNames
.
push
(
Object
.
keys
(
this
.
_onEnablePhase
.
actors
)
)
;
}
this
.
_actorNames
=
Object
.
freeze
(
actorNames
)
;
}
get
actorNames
(
)
{
return
this
.
_actorNames
;
}
onInit
(
)
{
if
(
this
.
_impl
)
{
this
.
_impl
.
onInit
(
)
;
this
.
_impl
.
onSettingsUpdate
(
)
;
}
this
.
enabled
=
this
.
_enabledOnInit
;
}
loadInitFrameScript
(
)
{
this
.
_loadFrameScript
(
this
.
_onInitPhase
)
;
}
onDestroy
(
)
{
if
(
this
.
_impl
)
{
this
.
_impl
.
onDestroy
(
)
;
}
}
onDestroyBrowser
(
)
{
if
(
this
.
_impl
)
{
this
.
_impl
.
onDestroyBrowser
(
)
;
}
this
.
_contentModuleLoaded
=
false
;
}
_loadActors
(
aPhase
)
{
if
(
!
aPhase
|
|
!
aPhase
.
actors
)
{
return
;
}
GeckoViewActorManager
.
addJSWindowActors
(
aPhase
.
actors
)
;
}
_loadResource
(
aPhase
)
{
if
(
!
aPhase
|
|
!
aPhase
.
resource
|
|
this
.
_impl
)
{
return
;
}
const
exports
=
ChromeUtils
.
import
(
aPhase
.
resource
)
;
this
.
_impl
=
new
exports
[
this
.
_name
]
(
this
)
;
}
_loadFrameScript
(
aPhase
)
{
if
(
!
aPhase
|
|
!
aPhase
.
frameScript
|
|
this
.
_contentModuleLoaded
)
{
return
;
}
if
(
this
.
_impl
)
{
this
.
_impl
.
onLoadContentModule
(
)
;
}
this
.
_manager
.
messageManager
.
loadFrameScript
(
aPhase
.
frameScript
true
)
;
this
.
_contentModuleLoaded
=
true
;
}
get
manager
(
)
{
return
this
.
_manager
;
}
get
name
(
)
{
return
this
.
_name
;
}
get
impl
(
)
{
return
this
.
_impl
;
}
get
enabled
(
)
{
return
this
.
_enabled
;
}
set
enabled
(
aEnabled
)
{
if
(
aEnabled
=
=
=
this
.
_enabled
)
{
return
;
}
if
(
!
aEnabled
&
&
this
.
_impl
)
{
this
.
_impl
.
onDisable
(
)
;
}
this
.
_enabled
=
aEnabled
;
if
(
aEnabled
)
{
this
.
_loadResource
(
this
.
_onEnablePhase
)
;
this
.
_loadFrameScript
(
this
.
_onEnablePhase
)
;
this
.
_loadActors
(
this
.
_onEnablePhase
)
;
if
(
this
.
_impl
)
{
this
.
_impl
.
onEnable
(
)
;
this
.
_impl
.
onSettingsUpdate
(
)
;
}
}
this
.
_updateContentModuleState
(
)
;
}
receiveMessage
(
aMessage
)
{
if
(
!
this
.
_impl
)
{
throw
new
Error
(
No
impl
for
message
:
{
aMessage
.
name
}
.
)
;
}
this
.
_impl
.
receiveMessage
(
aMessage
)
;
}
onContentModuleLoaded
(
)
{
this
.
_updateContentModuleState
(
)
;
if
(
this
.
_impl
)
{
this
.
_impl
.
onContentModuleLoaded
(
)
;
}
}
_updateContentModuleState
(
)
{
this
.
_manager
.
messageManager
.
sendAsyncMessage
(
"
GeckoView
:
UpdateModuleState
"
{
module
:
this
.
_name
enabled
:
this
.
enabled
}
)
;
}
}
function
createBrowser
(
)
{
const
browser
=
(
window
.
browser
=
document
.
createXULElement
(
"
browser
"
)
)
;
browser
.
permanentKey
=
{
}
;
browser
.
setAttribute
(
"
nodefaultsrc
"
"
true
"
)
;
browser
.
setAttribute
(
"
type
"
"
content
"
)
;
browser
.
setAttribute
(
"
primary
"
"
true
"
)
;
browser
.
setAttribute
(
"
flex
"
"
1
"
)
;
if
(
GeckoViewSettings
.
useMultiprocess
)
{
const
pointerEventsEnabled
=
Services
.
prefs
.
getBoolPref
(
"
dom
.
w3c_pointer_events
.
multiprocess
.
android
.
enabled
"
false
)
;
if
(
pointerEventsEnabled
)
{
Services
.
prefs
.
setBoolPref
(
"
dom
.
w3c_pointer_events
.
enabled
"
true
)
;
}
browser
.
setAttribute
(
"
remote
"
"
true
"
)
;
browser
.
setAttribute
(
"
remoteType
"
E10SUtils
.
DEFAULT_REMOTE_TYPE
)
;
}
return
browser
;
}
function
InitLater
(
fn
object
name
)
{
return
DelayedInit
.
schedule
(
fn
object
name
15000
)
;
}
function
startup
(
)
{
GeckoViewUtils
.
initLogging
(
"
XUL
"
window
)
;
const
browser
=
createBrowser
(
)
;
ModuleManager
.
init
(
browser
[
{
name
:
"
ExtensionContent
"
onInit
:
{
frameScript
:
"
chrome
:
/
/
geckoview
/
content
/
extension
-
content
.
js
"
}
}
{
name
:
"
GeckoViewContent
"
onInit
:
{
resource
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewContent
.
jsm
"
actors
:
{
GeckoViewContent
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
/
actors
/
GeckoViewContentParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
/
actors
/
GeckoViewContentChild
.
jsm
"
events
:
{
mozcaretstatechanged
:
{
capture
:
true
mozSystemGroup
:
true
}
pageshow
:
{
mozSystemGroup
:
true
}
}
}
allFrames
:
true
}
}
}
onEnable
:
{
actors
:
{
ContentDelegate
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
/
actors
/
ContentDelegateParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
/
actors
/
ContentDelegateChild
.
jsm
"
events
:
{
DOMContentLoaded
:
{
}
DOMMetaViewportFitChanged
:
{
}
"
MozDOMFullscreen
:
Entered
"
:
{
}
"
MozDOMFullscreen
:
Exit
"
:
{
}
"
MozDOMFullscreen
:
Exited
"
:
{
}
"
MozDOMFullscreen
:
Request
"
:
{
}
MozFirstContentfulPaint
:
{
}
MozPaintStatusReset
:
{
}
contextmenu
:
{
capture
:
true
}
}
}
allFrames
:
true
}
}
}
}
{
name
:
"
GeckoViewMedia
"
onEnable
:
{
resource
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewMedia
.
jsm
"
frameScript
:
"
chrome
:
/
/
geckoview
/
content
/
GeckoViewMediaChild
.
js
"
}
}
{
name
:
"
GeckoViewNavigation
"
onInit
:
{
resource
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewNavigation
.
jsm
"
}
}
{
name
:
"
GeckoViewProcessHangMonitor
"
onInit
:
{
resource
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewProcessHangMonitor
.
jsm
"
}
}
{
name
:
"
GeckoViewProgress
"
onEnable
:
{
resource
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewProgress
.
jsm
"
actors
:
{
ProgressDelegate
:
{
parent
:
{
moduleURI
:
"
resource
:
/
/
/
actors
/
ProgressDelegateParent
.
jsm
"
}
child
:
{
moduleURI
:
"
resource
:
/
/
/
actors
/
ProgressDelegateChild
.
jsm
"
events
:
{
MozAfterPaint
:
{
capture
:
false
mozSystemGroup
:
true
}
DOMContentLoaded
:
{
capture
:
false
mozSystemGroup
:
true
}
pageshow
:
{
capture
:
false
mozSystemGroup
:
true
}
}
}
}
}
}
}
{
name
:
"
GeckoViewScroll
"
onEnable
:
{
actors
:
{
ScrollDelegate
:
{
child
:
{
moduleURI
:
"
resource
:
/
/
/
actors
/
ScrollDelegateChild
.
jsm
"
events
:
{
mozvisualscroll
:
{
mozSystemGroup
:
true
}
}
}
}
}
}
}
{
name
:
"
GeckoViewSelectionAction
"
onEnable
:
{
frameScript
:
"
chrome
:
/
/
geckoview
/
content
/
GeckoViewSelectionActionChild
.
js
"
}
}
{
name
:
"
GeckoViewSettings
"
onInit
:
{
resource
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewSettings
.
jsm
"
actors
:
{
GeckoViewSettings
:
{
child
:
{
moduleURI
:
"
resource
:
/
/
/
actors
/
GeckoViewSettingsChild
.
jsm
"
}
}
}
}
}
{
name
:
"
GeckoViewTab
"
onInit
:
{
resource
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewTab
.
jsm
"
}
}
{
name
:
"
GeckoViewContentBlocking
"
onInit
:
{
resource
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewContentBlocking
.
jsm
"
}
}
{
name
:
"
SessionStateAggregator
"
onInit
:
{
frameScript
:
"
chrome
:
/
/
geckoview
/
content
/
SessionStateAggregator
.
js
"
}
}
{
name
:
"
GeckoViewAutofill
"
onInit
:
{
frameScript
:
"
chrome
:
/
/
geckoview
/
content
/
GeckoViewAutofillChild
.
js
"
}
}
{
name
:
"
GeckoViewMediaControl
"
onEnable
:
{
resource
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewMediaControl
.
jsm
"
frameScript
:
"
chrome
:
/
/
geckoview
/
content
/
GeckoViewMediaControlChild
.
js
"
}
}
]
)
;
window
.
moduleManager
=
ModuleManager
;
Services
.
tm
.
dispatchToMainThread
(
(
)
=
>
{
InitLater
(
(
)
=
>
Services
.
obs
.
notifyObservers
(
window
"
browser
-
delayed
-
startup
-
finished
"
)
)
;
InitLater
(
(
)
=
>
{
Services
.
obs
.
notifyObservers
(
window
"
extensions
-
late
-
startup
"
)
;
}
)
;
InitLater
(
(
)
=
>
{
RemoteSecuritySettings
.
init
(
)
;
}
)
;
InitLater
(
(
)
=
>
Services
.
obs
.
notifyObservers
(
window
"
browser
-
idle
-
startup
-
tasks
-
finished
"
)
)
;
}
)
;
browser
.
focus
(
)
;
}
