ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewChildModule
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
GeckoViewUtils
:
"
resource
:
/
/
gre
/
modules
/
GeckoViewUtils
.
jsm
"
}
)
;
const
USER_AGENT_MODE_MOBILE
=
0
;
const
USER_AGENT_MODE_DESKTOP
=
1
;
class
GeckoViewSettingsChild
extends
GeckoViewChildModule
{
onInit
(
)
{
debug
onInit
;
this
.
_userAgentMode
=
USER_AGENT_MODE_MOBILE
;
}
onSettingsUpdate
(
)
{
debug
onSettingsUpdate
{
this
.
settings
}
;
this
.
displayMode
=
this
.
settings
.
displayMode
;
this
.
useTrackingProtection
=
!
!
this
.
settings
.
useTrackingProtection
;
this
.
userAgentMode
=
this
.
settings
.
userAgentMode
;
this
.
allowJavascript
=
this
.
settings
.
allowJavascript
;
}
get
useTrackingProtection
(
)
{
return
docShell
.
useTrackingProtection
;
}
set
useTrackingProtection
(
aUse
)
{
docShell
.
useTrackingProtection
=
aUse
;
}
get
userAgentMode
(
)
{
return
this
.
_userAgentMode
;
}
set
userAgentMode
(
aMode
)
{
if
(
this
.
userAgentMode
=
=
=
aMode
)
{
return
;
}
let
utils
=
content
.
windowUtils
;
utils
.
setDesktopModeViewport
(
aMode
=
=
=
USER_AGENT_MODE_DESKTOP
)
;
this
.
_userAgentMode
=
aMode
;
}
get
displayMode
(
)
{
const
docShell
=
content
&
&
GeckoViewUtils
.
getRootDocShell
(
content
)
;
return
docShell
?
docShell
.
displayMode
:
Ci
.
nsIDocShell
.
DISPLAY_MODE_BROWSER
;
}
set
displayMode
(
aMode
)
{
const
docShell
=
content
&
&
GeckoViewUtils
.
getRootDocShell
(
content
)
;
if
(
docShell
)
{
docShell
.
displayMode
=
aMode
;
}
}
get
allowJavascript
(
)
{
return
docShell
.
allowJavascript
;
}
set
allowJavascript
(
aAllowJavascript
)
{
docShell
.
allowJavascript
=
aAllowJavascript
;
}
}
let
{
debug
warn
}
=
GeckoViewSettingsChild
.
initLogging
(
"
GeckoViewSettings
"
)
;
let
module
=
GeckoViewSettingsChild
.
create
(
this
)
;
