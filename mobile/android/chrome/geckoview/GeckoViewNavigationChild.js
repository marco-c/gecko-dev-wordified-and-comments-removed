const
{
GeckoViewChildModule
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewChildModule
.
jsm
"
)
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
const
{
XPCOMUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
BrowserUtils
:
"
resource
:
/
/
gre
/
modules
/
BrowserUtils
.
jsm
"
E10SUtils
:
"
resource
:
/
/
gre
/
modules
/
E10SUtils
.
jsm
"
ErrorPageEventHandler
:
"
chrome
:
/
/
geckoview
/
content
/
ErrorPageEventHandler
.
js
"
LoadURIDelegate
:
"
resource
:
/
/
gre
/
modules
/
LoadURIDelegate
.
jsm
"
}
)
;
class
GeckoViewNavigationChild
extends
GeckoViewChildModule
{
onInit
(
)
{
docShell
.
loadURIDelegate
=
this
;
if
(
Services
.
androidBridge
.
isFennec
)
{
addEventListener
(
"
DOMContentLoaded
"
this
)
;
}
if
(
Services
.
appinfo
.
processType
=
=
=
Services
.
appinfo
.
PROCESS_TYPE_CONTENT
)
{
let
tabchild
=
docShell
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsITabChild
)
;
tabchild
.
webBrowserChrome
=
this
;
}
}
loadURI
(
aUri
aWhere
aFlags
aTriggeringPrincipal
)
{
debug
loadURI
:
uri
=
{
aUri
&
&
aUri
.
spec
}
where
=
{
aWhere
}
flags
=
{
aFlags
}
tp
=
{
aTriggeringPrincipal
&
&
aTriggeringPrincipal
.
URI
&
&
aTriggeringPrincipal
.
URI
.
spec
}
;
if
(
!
this
.
enabled
)
{
return
false
;
}
return
LoadURIDelegate
.
load
(
content
this
.
eventDispatcher
aUri
aWhere
aFlags
aTriggeringPrincipal
)
;
}
handleLoadError
(
aUri
aError
aErrorModule
)
{
debug
handleLoadError
:
uri
=
{
aUri
&
&
aUri
.
spec
}
uri2
=
{
aUri
&
&
aUri
.
displaySpec
}
error
=
{
aError
}
;
if
(
!
this
.
enabled
)
{
Components
.
returnCode
=
Cr
.
NS_ERROR_ABORT
;
return
null
;
}
return
LoadURIDelegate
.
handleLoadError
(
content
this
.
eventDispatcher
aUri
aError
aErrorModule
)
;
}
onBeforeLinkTraversal
(
aOriginalTarget
aLinkURI
aLinkNode
aIsAppTab
)
{
debug
onBeforeLinkTraversal
{
aLinkURI
.
displaySpec
}
;
return
BrowserUtils
.
onBeforeLinkTraversal
(
aOriginalTarget
aLinkURI
aLinkNode
aIsAppTab
)
;
}
shouldLoadURI
(
aDocShell
aURI
aReferrer
aHasPostData
aTriggeringPrincipal
)
{
debug
shouldLoadURI
{
aURI
.
displaySpec
}
;
if
(
!
E10SUtils
.
shouldLoadURI
(
aDocShell
aURI
aReferrer
aHasPostData
)
)
{
E10SUtils
.
redirectLoad
(
aDocShell
aURI
aReferrer
aTriggeringPrincipal
false
)
;
return
false
;
}
return
true
;
}
shouldLoadURIInThisProcess
(
aURI
)
{
debug
shouldLoadURIInThisProcess
{
aURI
.
displaySpec
}
;
return
E10SUtils
.
shouldLoadURIInThisProcess
(
aURI
)
;
}
reloadInFreshProcess
(
aDocShell
aURI
aReferrer
aTriggeringPrincipal
aLoadFlags
)
{
debug
reloadInFreshProcess
{
aURI
.
displaySpec
}
;
E10SUtils
.
redirectLoad
(
aDocShell
aURI
aReferrer
aTriggeringPrincipal
true
aLoadFlags
)
;
return
true
;
}
handleEvent
(
aEvent
)
{
switch
(
aEvent
.
type
)
{
case
"
DOMContentLoaded
"
:
{
let
target
=
aEvent
.
originalTarget
;
if
(
target
!
=
content
.
document
)
return
;
let
docURI
=
target
.
documentURI
;
if
(
docURI
.
startsWith
(
"
about
:
certerror
"
)
|
|
docURI
.
startsWith
(
"
about
:
blocked
"
)
)
{
addEventListener
(
"
click
"
ErrorPageEventHandler
true
)
;
let
listener
=
(
)
=
>
{
removeEventListener
(
"
click
"
ErrorPageEventHandler
true
)
;
removeEventListener
(
"
pagehide
"
listener
true
)
;
}
;
addEventListener
(
"
pagehide
"
listener
true
)
;
}
break
;
}
}
}
}
let
{
debug
warn
}
=
GeckoViewNavigationChild
.
initLogging
(
"
GeckoViewNavigation
"
)
;
let
module
=
GeckoViewNavigationChild
.
create
(
this
)
;
