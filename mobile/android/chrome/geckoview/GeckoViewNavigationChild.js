ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
GeckoViewChildModule
.
jsm
"
)
;
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetters
(
this
{
ErrorPageEventHandler
:
"
chrome
:
/
/
geckoview
/
content
/
ErrorPageEventHandler
.
js
"
LoadURIDelegate
:
"
resource
:
/
/
gre
/
modules
/
LoadURIDelegate
.
jsm
"
}
)
;
class
GeckoViewNavigationChild
extends
GeckoViewChildModule
{
onInit
(
)
{
docShell
.
loadURIDelegate
=
this
;
}
loadURI
(
aUri
aWhere
aFlags
aTriggeringPrincipal
)
{
debug
loadURI
:
uri
=
{
aUri
&
&
aUri
.
spec
}
where
=
{
aWhere
}
flags
=
{
aFlags
}
tp
=
{
aTriggeringPrincipal
&
&
aTriggeringPrincipal
.
URI
&
&
aTriggeringPrincipal
.
URI
.
spec
}
;
if
(
!
this
.
enabled
)
{
return
false
;
}
if
(
aUri
&
&
aUri
.
displaySpec
.
startsWith
(
"
about
:
certerror
"
)
)
{
addEventListener
(
"
click
"
ErrorPageEventHandler
true
)
;
}
return
LoadURIDelegate
.
load
(
content
this
.
eventDispatcher
aUri
aWhere
aFlags
aTriggeringPrincipal
)
;
}
handleLoadError
(
aUri
aError
aErrorModule
)
{
debug
handleLoadError
:
uri
=
{
aUri
&
&
aUri
.
spec
}
uri2
=
{
aUri
&
&
aUri
.
displaySpec
}
error
=
{
aError
}
;
if
(
!
this
.
enabled
)
{
Components
.
returnCode
=
Cr
.
NS_ERROR_ABORT
;
return
null
;
}
return
LoadURIDelegate
.
handleLoadError
(
content
this
.
eventDispatcher
aUri
aError
aErrorModule
)
;
}
}
let
{
debug
warn
}
=
GeckoViewNavigationChild
.
initLogging
(
"
GeckoViewNavigation
"
)
;
let
module
=
GeckoViewNavigationChild
.
create
(
this
)
;
