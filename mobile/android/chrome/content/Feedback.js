"
use
strict
"
;
var
Feedback
=
{
get
_feedbackURL
(
)
{
delete
this
.
_feedbackURL
;
return
this
.
_feedbackURL
=
Services
.
urlFormatter
.
formatURLPref
(
"
app
.
feedbackURL
"
)
;
}
observe
:
function
(
aMessage
aTopic
aData
)
{
if
(
aTopic
!
=
=
"
Feedback
:
Show
"
)
{
return
;
}
try
{
Services
.
prefs
.
getCharPref
(
"
distribution
.
id
"
)
;
return
;
}
catch
(
e
)
{
}
let
url
=
this
.
_feedbackURL
;
let
browser
=
BrowserApp
.
selectOrAddTab
(
url
{
parentId
:
BrowserApp
.
selectedTab
.
id
}
)
.
browser
;
browser
.
addEventListener
(
"
FeedbackClose
"
this
false
true
)
;
browser
.
addEventListener
(
"
FeedbackMaybeLater
"
this
false
true
)
;
function
loadListener
(
event
)
{
browser
.
removeEventListener
(
"
DOMContentLoaded
"
loadListener
false
)
;
browser
.
contentDocument
.
dispatchEvent
(
new
CustomEvent
(
"
FeedbackPrompted
"
)
)
;
}
browser
.
addEventListener
(
"
DOMContentLoaded
"
loadListener
false
)
;
}
handleEvent
:
function
(
event
)
{
if
(
!
this
.
_isAllowed
(
event
.
target
)
)
{
return
;
}
switch
(
event
.
type
)
{
case
"
FeedbackClose
"
:
break
;
case
"
FeedbackMaybeLater
"
:
GlobalEventDispatcher
.
sendRequest
(
{
type
:
"
Feedback
:
MaybeLater
"
}
)
;
break
;
}
let
win
=
event
.
target
.
ownerDocument
.
defaultView
.
top
;
BrowserApp
.
closeTab
(
BrowserApp
.
getTabForWindow
(
win
)
)
;
}
_isAllowed
:
function
(
node
)
{
let
uri
=
node
.
ownerDocument
.
documentURIObject
;
let
feedbackURI
=
Services
.
io
.
newURI
(
this
.
_feedbackURL
)
;
return
uri
.
prePath
=
=
=
feedbackURI
.
prePath
;
}
}
;
