"
use
strict
"
;
var
FindHelper
=
{
_finder
:
null
_targetTab
:
null
_initialViewport
:
null
_viewportChanged
:
false
_result
:
null
observe
:
function
(
aMessage
aTopic
aData
)
{
switch
(
aTopic
)
{
case
"
FindInPage
:
Opened
"
:
{
this
.
_findOpened
(
)
;
break
;
}
case
"
Tab
:
Selected
"
:
{
this
.
_uninit
(
)
;
break
;
}
case
"
FindInPage
:
Closed
"
:
this
.
_uninit
(
)
;
this
.
_findClosed
(
)
;
break
;
}
}
_findOpened
:
function
(
)
{
Messaging
.
addListener
(
data
=
>
this
.
doFind
(
data
)
"
FindInPage
:
Find
"
)
;
Messaging
.
addListener
(
data
=
>
this
.
findAgain
(
data
false
)
"
FindInPage
:
Next
"
)
;
Messaging
.
addListener
(
data
=
>
this
.
findAgain
(
data
true
)
"
FindInPage
:
Prev
"
)
;
this
.
_init
(
)
;
this
.
_finder
.
requestMatchesCount
(
"
"
)
;
}
_init
:
function
(
)
{
if
(
this
.
_finder
)
{
return
;
}
this
.
_targetTab
=
BrowserApp
.
selectedTab
;
try
{
this
.
_finder
=
this
.
_targetTab
.
browser
.
finder
;
}
catch
(
e
)
{
throw
new
Error
(
"
FindHelper
:
"
+
e
+
"
\
n
"
+
"
JS
stack
:
\
n
"
+
(
e
.
stack
|
|
Components
.
stack
.
formattedStack
)
)
;
}
this
.
_finder
.
addResultListener
(
this
)
;
this
.
_initialViewport
=
JSON
.
stringify
(
this
.
_targetTab
.
getViewport
(
)
)
;
this
.
_viewportChanged
=
false
;
}
_uninit
:
function
(
)
{
if
(
!
this
.
_finder
)
{
return
;
}
this
.
_finder
.
removeSelection
(
)
;
this
.
_finder
.
removeResultListener
(
this
)
;
this
.
_finder
=
null
;
this
.
_targetTab
=
null
;
this
.
_initialViewport
=
null
;
this
.
_viewportChanged
=
false
;
}
_findClosed
:
function
(
)
{
Messaging
.
removeListener
(
"
FindInPage
:
Find
"
)
;
Messaging
.
removeListener
(
"
FindInPage
:
Next
"
)
;
Messaging
.
removeListener
(
"
FindInPage
:
Prev
"
)
;
}
doFind
:
function
(
searchString
)
{
if
(
!
this
.
_finder
)
{
this
.
_init
(
)
;
}
this
.
_finder
.
fastFind
(
searchString
false
)
;
return
{
searchString
findBackwards
:
false
}
;
}
findAgain
:
function
(
searchString
findBackwards
)
{
if
(
!
this
.
_finder
)
{
return
this
.
doFind
(
searchString
)
;
}
this
.
_finder
.
findAgain
(
findBackwards
false
false
)
;
return
{
searchString
findBackwards
}
;
}
onMatchesCountResult
:
function
(
result
)
{
this
.
_result
=
result
;
Messaging
.
sendRequest
(
Object
.
assign
(
{
type
:
"
FindInPage
:
MatchesCountResult
"
}
this
.
_result
)
)
;
}
onFindResult
:
function
(
aData
)
{
if
(
aData
.
result
=
=
Ci
.
nsITypeAheadFind
.
FIND_NOTFOUND
)
{
if
(
this
.
_viewportChanged
)
{
if
(
this
.
_targetTab
!
=
BrowserApp
.
selectedTab
)
{
Cu
.
reportError
(
"
Warning
:
selected
tab
changed
during
find
!
"
)
;
}
this
.
_targetTab
.
sendViewportUpdate
(
)
;
}
}
else
{
this
.
_viewportChanged
=
true
;
}
}
}
;
