"
use
strict
"
;
var
MemoryObserver
=
{
observe
:
function
mo_observe
(
aSubject
aTopic
aData
)
{
if
(
aTopic
=
=
"
memory
-
pressure
"
)
{
if
(
aData
!
=
"
heap
-
minimize
"
)
{
this
.
handleLowMemory
(
)
;
}
this
.
gc
(
)
;
}
else
if
(
aTopic
=
=
"
Memory
:
Dump
"
)
{
this
.
dumpMemoryStats
(
aData
)
;
}
}
handleLowMemory
:
function
(
)
{
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
tabs
.
disableBackgroundZombification
"
)
)
{
let
tabs
=
BrowserApp
.
tabs
;
let
selected
=
BrowserApp
.
selectedTab
;
for
(
let
i
=
0
;
i
<
tabs
.
length
;
i
+
+
)
{
if
(
tabs
[
i
]
!
=
selected
&
&
!
tabs
[
i
]
.
playingAudio
)
{
tabs
[
i
]
.
zombify
(
)
;
}
}
}
let
defaults
=
Services
.
prefs
.
getDefaultBranch
(
null
)
;
defaults
.
setIntPref
(
"
image
.
mem
.
max_decoded_image_kb
"
0
)
;
if
(
!
Services
.
prefs
.
getBoolPref
(
"
browser
.
sessionhistory
.
bfcacheIgnoreMemoryPressure
"
)
)
{
defaults
.
setIntPref
(
"
browser
.
sessionhistory
.
max_total_viewers
"
0
)
;
}
}
gc
:
function
(
)
{
window
.
QueryInterface
(
Ci
.
nsIInterfaceRequestor
)
.
getInterface
(
Ci
.
nsIDOMWindowUtils
)
.
garbageCollect
(
)
;
Cu
.
forceGC
(
)
;
}
dumpMemoryStats
:
function
(
aLabel
)
{
let
memDumper
=
Cc
[
"
mozilla
.
org
/
memory
-
info
-
dumper
;
1
"
]
.
getService
(
Ci
.
nsIMemoryInfoDumper
)
;
memDumper
.
dumpMemoryInfoToTempDir
(
aLabel
false
false
)
;
}
}
;
