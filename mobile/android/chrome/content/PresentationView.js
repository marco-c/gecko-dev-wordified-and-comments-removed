"
use
strict
"
;
const
TOPIC_PRESENTATION_VIEW_READY
=
"
presentation
-
view
-
ready
"
;
const
TOPIC_PRESENTATION_RECEIVER_LAUNCH
=
"
presentation
-
receiver
:
launch
"
;
const
TOPIC_PRESENTATION_RECEIVER_LAUNCH_RESPONSE
=
"
presentation
-
receiver
:
launch
:
response
"
;
const
{
Services
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
function
log
(
str
)
{
}
let
PresentationView
=
{
_id
:
null
startup
:
function
startup
(
)
{
this
.
_id
=
window
.
location
.
hash
.
substr
(
1
)
;
Services
.
obs
.
addObserver
(
this
TOPIC_PRESENTATION_RECEIVER_LAUNCH
)
;
Services
.
obs
.
notifyObservers
(
null
TOPIC_PRESENTATION_VIEW_READY
this
.
_id
)
;
}
stop
:
function
stop
(
)
{
Services
.
obs
.
removeObserver
(
this
TOPIC_PRESENTATION_RECEIVER_LAUNCH
)
;
}
observe
:
function
observe
(
aSubject
aTopic
aData
)
{
log
(
"
Got
observe
:
aTopic
=
"
+
aTopic
)
;
let
requestData
=
JSON
.
parse
(
aData
)
;
if
(
this
.
_id
!
=
requestData
.
windowId
)
{
return
;
}
let
browser
=
document
.
getElementById
(
"
content
"
)
;
browser
.
setAttribute
(
"
mozpresentation
"
requestData
.
url
)
;
try
{
browser
.
loadURI
(
requestData
.
url
)
;
Services
.
obs
.
notifyObservers
(
browser
TOPIC_PRESENTATION_RECEIVER_LAUNCH_RESPONSE
JSON
.
stringify
(
{
result
:
"
success
"
requestId
:
requestData
.
requestId
}
)
)
;
}
catch
(
e
)
{
Services
.
obs
.
notifyObservers
(
null
TOPIC_PRESENTATION_RECEIVER_LAUNCH_RESPONSE
JSON
.
stringify
(
{
result
:
"
error
"
reason
:
e
.
message
}
)
)
;
}
}
}
;
