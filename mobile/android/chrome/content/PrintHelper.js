"
use
strict
"
;
ChromeUtils
.
defineModuleGetter
(
this
"
Snackbars
"
"
resource
:
/
/
gre
/
modules
/
Snackbars
.
jsm
"
)
;
var
PrintHelper
=
{
onEvent
:
function
(
event
data
callback
)
{
let
browser
=
BrowserApp
.
selectedBrowser
;
switch
(
event
)
{
case
"
Print
:
PDF
"
:
this
.
generatePDF
(
browser
)
.
then
(
data
=
>
callback
.
onSuccess
(
data
)
error
=
>
callback
.
onError
(
error
)
)
;
break
;
}
}
generatePDF
:
function
(
aBrowser
)
{
let
fileName
=
ContentAreaUtils
.
getDefaultFileName
(
aBrowser
.
contentTitle
aBrowser
.
currentURI
null
null
)
;
fileName
=
fileName
.
trim
(
)
+
"
.
pdf
"
;
let
file
=
Services
.
dirsvc
.
get
(
"
TmpD
"
Ci
.
nsIFile
)
;
file
.
append
(
fileName
)
;
file
.
createUnique
(
file
.
NORMAL_FILE_TYPE
parseInt
(
"
666
"
8
)
)
;
let
printSettings
=
Cc
[
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
]
.
getService
(
Ci
.
nsIPrintSettingsService
)
.
newPrintSettings
;
printSettings
.
printSilent
=
true
;
printSettings
.
showPrintProgress
=
false
;
printSettings
.
printBGImages
=
false
;
printSettings
.
printBGColors
=
false
;
printSettings
.
printToFile
=
true
;
printSettings
.
toFileName
=
file
.
path
;
printSettings
.
outputFormat
=
Ci
.
nsIPrintSettings
.
kOutputFormatPDF
;
let
webBrowserPrint
=
aBrowser
.
contentWindow
.
getInterface
(
Ci
.
nsIWebBrowserPrint
)
;
return
new
Promise
(
(
resolve
reject
)
=
>
{
webBrowserPrint
.
print
(
printSettings
{
onStateChange
:
function
(
webProgress
request
stateFlags
status
)
{
if
(
stateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_START
&
&
stateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_IS_NETWORK
)
{
Snackbars
.
show
(
Strings
.
browser
.
GetStringFromName
(
"
alertPrintjobToast
"
)
Snackbars
.
LENGTH_LONG
)
;
}
if
(
stateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_STOP
&
&
stateFlags
&
Ci
.
nsIWebProgressListener
.
STATE_IS_NETWORK
)
{
if
(
Components
.
isSuccessCode
(
status
)
)
{
resolve
(
{
file
:
file
.
path
title
:
fileName
}
)
;
}
else
{
reject
(
)
;
}
}
}
onProgressChange
:
function
(
)
{
}
onLocationChange
:
function
(
)
{
}
onStatusChange
:
function
(
)
{
}
onSecurityChange
:
function
(
)
{
}
onContentBlockingEvent
:
function
(
)
{
}
}
)
;
}
)
;
}
}
;
