package
org
.
mozilla
.
gecko
.
telemetry
.
pingbuilders
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
static
org
.
junit
.
Assert
.
*
;
RunWith
(
RobolectricTestRunner
.
class
)
public
class
TestTelemetryPingBuilder
{
Test
public
void
testMandatoryFieldsNone
(
)
{
final
NoMandatoryFieldsBuilder
builder
=
new
NoMandatoryFieldsBuilder
(
)
;
builder
.
setNonMandatoryField
(
)
;
assertNotNull
(
"
Builder
does
not
throw
and
returns
a
non
-
null
value
"
builder
.
build
(
)
)
;
}
Test
(
expected
=
IllegalArgumentException
.
class
)
public
void
testMandatoryFieldsMissing
(
)
{
final
MandatoryFieldsBuilder
builder
=
new
MandatoryFieldsBuilder
(
)
;
builder
.
setNonMandatoryField
(
)
.
build
(
)
;
}
Test
public
void
testMandatoryFieldsIncluded
(
)
{
final
MandatoryFieldsBuilder
builder
=
new
MandatoryFieldsBuilder
(
)
;
builder
.
setNonMandatoryField
(
)
.
setMandatoryField
(
)
;
assertNotNull
(
"
Builder
does
not
throw
and
returns
non
-
null
value
"
builder
.
build
(
)
)
;
}
private
static
class
NoMandatoryFieldsBuilder
extends
TelemetryPingBuilder
{
Override
public
String
getDocType
(
)
{
return
"
"
;
}
Override
public
String
[
]
getMandatoryFields
(
)
{
return
new
String
[
0
]
;
}
public
NoMandatoryFieldsBuilder
setNonMandatoryField
(
)
{
payload
.
put
(
"
non
-
mandatory
"
true
)
;
return
this
;
}
}
private
static
class
MandatoryFieldsBuilder
extends
TelemetryPingBuilder
{
private
static
final
String
MANDATORY_FIELD
=
"
mandatory
-
field
"
;
Override
public
String
getDocType
(
)
{
return
"
"
;
}
Override
public
String
[
]
getMandatoryFields
(
)
{
return
new
String
[
]
{
MANDATORY_FIELD
}
;
}
public
MandatoryFieldsBuilder
setNonMandatoryField
(
)
{
payload
.
put
(
"
non
-
mandatory
"
true
)
;
return
this
;
}
public
MandatoryFieldsBuilder
setMandatoryField
(
)
{
payload
.
put
(
MANDATORY_FIELD
true
)
;
return
this
;
}
}
}
