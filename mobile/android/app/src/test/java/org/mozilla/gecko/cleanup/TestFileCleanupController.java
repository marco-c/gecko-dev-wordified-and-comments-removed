package
org
.
mozilla
.
gecko
.
cleanup
;
import
android
.
app
.
job
.
JobScheduler
;
import
android
.
content
.
Context
;
import
android
.
content
.
SharedPreferences
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
org
.
robolectric
.
RuntimeEnvironment
;
import
org
.
robolectric
.
annotation
.
Config
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
Objects
;
import
static
org
.
junit
.
Assert
.
assertNotNull
;
import
static
org
.
junit
.
Assert
.
assertTrue
;
RunWith
(
RobolectricTestRunner
.
class
)
Config
(
manifest
=
Config
.
NONE
sdk
=
26
)
public
class
TestFileCleanupController
{
Test
public
void
testStartIfReadyEmptySharedPrefsRunsCleanup
(
)
{
final
Context
appContext
=
getAppContext
(
)
;
final
JobScheduler
scheduler
=
getJobScheduler
(
)
;
FileCleanupController
.
startIfReady
(
appContext
getSharedPreferences
(
)
"
"
)
;
assertTrue
(
"
File
cleanup
is
not
started
"
scheduler
.
getAllPendingJobs
(
)
.
size
(
)
=
=
1
)
;
}
Test
public
void
testStartIfReadyLastRunNowDoesNotRun
(
)
{
final
Context
appContext
=
getAppContext
(
)
;
final
JobScheduler
scheduler
=
getJobScheduler
(
)
;
final
SharedPreferences
sharedPrefs
=
getSharedPreferences
(
)
;
sharedPrefs
.
edit
(
)
.
putLong
(
FileCleanupController
.
PREF_LAST_CLEANUP_MILLIS
System
.
currentTimeMillis
(
)
)
.
commit
(
)
;
FileCleanupController
.
startIfReady
(
appContext
sharedPrefs
"
"
)
;
assertTrue
(
"
There
is
a
job
scheduled
"
scheduler
.
getAllPendingJobs
(
)
.
size
(
)
=
=
0
)
;
}
Test
public
void
testGetFilesToCleanupContainsProfilePath
(
)
{
final
String
profilePath
=
"
/
a
/
profile
/
path
"
;
final
ArrayList
<
String
>
fileList
=
FileCleanupController
.
getFilesToCleanup
(
profilePath
)
;
assertNotNull
(
"
Returned
file
list
is
non
-
null
"
fileList
)
;
boolean
atLeastOneStartsWithProfilePath
=
false
;
final
String
pathToCheck
=
profilePath
+
"
/
"
;
for
(
final
String
path
:
fileList
)
{
if
(
path
.
startsWith
(
pathToCheck
)
)
{
atLeastOneStartsWithProfilePath
=
true
;
}
}
assertTrue
(
"
At
least
one
returned
String
starts
with
a
profile
path
"
atLeastOneStartsWithProfilePath
)
;
}
private
SharedPreferences
getSharedPreferences
(
)
{
return
getAppContext
(
)
.
getSharedPreferences
(
"
TestFileCleanupController
"
0
)
;
}
private
Context
getAppContext
(
)
{
return
RuntimeEnvironment
.
application
;
}
private
JobScheduler
getJobScheduler
(
)
{
return
Objects
.
requireNonNull
(
(
JobScheduler
)
getAppContext
(
)
.
getSystemService
(
Context
.
JOB_SCHEDULER_SERVICE
)
)
;
}
}
