package
org
.
mozilla
.
gecko
;
import
android
.
content
.
ContentProvider
;
import
android
.
content
.
ContentProviderClient
;
import
android
.
content
.
ContentValues
;
import
android
.
database
.
Cursor
;
import
android
.
os
.
RemoteException
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mozilla
.
gecko
.
background
.
db
.
DelegatingTestContentProvider
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserContract
.
PageMetadata
;
import
org
.
mozilla
.
gecko
.
db
.
BrowserDB
;
import
org
.
mozilla
.
gecko
.
db
.
LocalBrowserDB
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
org
.
robolectric
.
shadows
.
ShadowContentResolver
;
import
static
org
.
junit
.
Assert
.
*
;
RunWith
(
RobolectricTestRunner
.
class
)
public
class
GlobalPageMetadataTest
{
Test
public
void
testQueueing
(
)
throws
Exception
{
BrowserDB
db
=
new
LocalBrowserDB
(
"
default
"
)
;
final
ContentProvider
provider
=
DelegatingTestContentProvider
.
createDelegatingBrowserProvider
(
)
;
try
{
ShadowContentResolver
cr
=
new
ShadowContentResolver
(
)
;
ContentProviderClient
pageMetadataClient
=
cr
.
acquireContentProviderClient
(
PageMetadata
.
CONTENT_URI
)
;
assertEquals
(
0
GlobalPageMetadata
.
getInstance
(
)
.
getMetadataQueueSize
(
)
)
;
GlobalPageMetadata
.
getInstance
(
)
.
doAddOrQueue
(
db
pageMetadataClient
"
https
:
/
/
mozilla
.
org
"
false
"
{
type
:
'
article
'
}
"
)
;
assertPageMetadataCountForGUID
(
0
"
guid1
"
pageMetadataClient
)
;
assertEquals
(
1
GlobalPageMetadata
.
getInstance
(
)
.
getMetadataQueueSize
(
)
)
;
GlobalPageMetadata
.
getInstance
(
)
.
doAddOrQueue
(
db
pageMetadataClient
"
https
:
/
/
mozilla
.
org
"
false
"
{
type
:
'
article
'
}
"
)
;
assertEquals
(
1
GlobalPageMetadata
.
getInstance
(
)
.
getMetadataQueueSize
(
)
)
;
for
(
int
i
=
0
;
i
<
20
;
i
+
+
)
{
GlobalPageMetadata
.
getInstance
(
)
.
doAddOrQueue
(
db
pageMetadataClient
"
https
:
/
/
mozilla
.
org
/
"
+
i
false
"
{
type
:
'
article
'
}
"
)
;
}
assertEquals
(
15
GlobalPageMetadata
.
getInstance
(
)
.
getMetadataQueueSize
(
)
)
;
}
finally
{
provider
.
shutdown
(
)
;
}
}
Test
public
void
testInsertingMetadata
(
)
throws
Exception
{
BrowserDB
db
=
new
LocalBrowserDB
(
"
default
"
)
;
GlobalPageMetadata
.
getInstance
(
)
.
init
(
)
;
final
ContentProvider
provider
=
DelegatingTestContentProvider
.
createDelegatingBrowserProvider
(
)
;
try
{
ShadowContentResolver
cr
=
new
ShadowContentResolver
(
)
;
ContentProviderClient
historyClient
=
cr
.
acquireContentProviderClient
(
BrowserContract
.
History
.
CONTENT_URI
)
;
ContentProviderClient
pageMetadataClient
=
cr
.
acquireContentProviderClient
(
PageMetadata
.
CONTENT_URI
)
;
ContentValues
cv
=
new
ContentValues
(
)
;
cv
.
put
(
BrowserContract
.
History
.
GUID
"
guid1
"
)
;
cv
.
put
(
BrowserContract
.
History
.
URL
"
https
:
/
/
mozilla
.
org
"
)
;
historyClient
.
insert
(
BrowserContract
.
History
.
CONTENT_URI
cv
)
;
GlobalPageMetadata
.
getInstance
(
)
.
doAddOrQueue
(
db
pageMetadataClient
"
https
:
/
/
mozilla
.
org
"
false
"
{
type
:
'
article
'
description
:
'
test
article
'
}
"
)
;
assertPageMetadataCountForGUID
(
1
"
guid1
"
pageMetadataClient
)
;
assertPageMetadataValues
(
pageMetadataClient
"
guid1
"
false
"
{
\
"
type
\
"
:
\
"
article
\
"
\
"
description
\
"
:
\
"
test
article
\
"
}
"
)
;
GlobalPageMetadata
.
getInstance
(
)
.
doAddOrQueue
(
db
pageMetadataClient
"
https
:
/
/
mozilla
.
org
"
false
"
{
}
"
)
;
assertPageMetadataCountForGUID
(
0
"
guid1
"
pageMetadataClient
)
;
GlobalPageMetadata
.
getInstance
(
)
.
doAddOrQueue
(
db
pageMetadataClient
"
https
:
/
/
mozilla
.
org
"
true
"
{
type
:
'
article
'
description
:
'
test
article
'
image_url
:
'
https
:
/
/
example
.
com
/
test
.
png
'
}
"
)
;
assertPageMetadataValues
(
pageMetadataClient
"
guid1
"
true
"
{
\
"
type
\
"
:
\
"
article
\
"
\
"
description
\
"
:
\
"
test
article
\
"
\
"
image_url
\
"
:
\
"
https
:
\
\
/
\
\
/
example
.
com
\
\
/
test
.
png
\
"
}
"
)
;
cv
=
new
ContentValues
(
)
;
cv
.
put
(
BrowserContract
.
History
.
GUID
"
guid2
"
)
;
cv
.
put
(
BrowserContract
.
History
.
URL
"
https
:
/
/
planet
.
mozilla
.
org
"
)
;
historyClient
.
insert
(
BrowserContract
.
History
.
CONTENT_URI
cv
)
;
GlobalPageMetadata
.
getInstance
(
)
.
doAddOrQueue
(
db
pageMetadataClient
"
https
:
/
/
planet
.
mozilla
.
org
"
false
"
{
}
"
)
;
assertPageMetadataCountForGUID
(
0
"
guid2
"
pageMetadataClient
)
;
}
finally
{
provider
.
shutdown
(
)
;
}
}
private
void
assertCursorValues
(
Cursor
cursor
String
json
int
hasImage
String
guid
)
{
assertNotNull
(
cursor
)
;
assertEquals
(
json
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
PageMetadata
.
JSON
)
)
)
;
assertEquals
(
hasImage
cursor
.
getInt
(
cursor
.
getColumnIndexOrThrow
(
PageMetadata
.
HAS_IMAGE
)
)
)
;
assertEquals
(
guid
cursor
.
getString
(
cursor
.
getColumnIndexOrThrow
(
PageMetadata
.
HISTORY_GUID
)
)
)
;
}
private
void
assertPageMetadataValues
(
ContentProviderClient
client
String
guid
boolean
hasImage
String
json
)
{
final
Cursor
cursor
;
try
{
cursor
=
client
.
query
(
PageMetadata
.
CONTENT_URI
new
String
[
]
{
PageMetadata
.
HISTORY_GUID
PageMetadata
.
HAS_IMAGE
PageMetadata
.
JSON
PageMetadata
.
DATE_CREATED
}
PageMetadata
.
HISTORY_GUID
+
"
=
?
"
new
String
[
]
{
guid
}
null
)
;
}
catch
(
RemoteException
e
)
{
fail
(
)
;
return
;
}
assertNotNull
(
cursor
)
;
try
{
assertEquals
(
1
cursor
.
getCount
(
)
)
;
assertTrue
(
cursor
.
moveToFirst
(
)
)
;
assertCursorValues
(
cursor
json
hasImage
?
1
:
0
guid
)
;
}
finally
{
cursor
.
close
(
)
;
}
}
private
void
assertPageMetadataCountForGUID
(
int
expected
String
guid
ContentProviderClient
client
)
{
final
Cursor
cursor
;
try
{
cursor
=
client
.
query
(
PageMetadata
.
CONTENT_URI
new
String
[
]
{
PageMetadata
.
HISTORY_GUID
PageMetadata
.
HAS_IMAGE
PageMetadata
.
JSON
PageMetadata
.
DATE_CREATED
}
PageMetadata
.
HISTORY_GUID
+
"
=
?
"
new
String
[
]
{
guid
}
null
)
;
}
catch
(
RemoteException
e
)
{
fail
(
)
;
return
;
}
assertNotNull
(
cursor
)
;
try
{
assertEquals
(
expected
cursor
.
getCount
(
)
)
;
}
finally
{
cursor
.
close
(
)
;
}
}
}
