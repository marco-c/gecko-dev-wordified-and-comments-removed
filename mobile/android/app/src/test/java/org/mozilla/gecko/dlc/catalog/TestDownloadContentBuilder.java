package
org
.
mozilla
.
gecko
.
dlc
.
catalog
;
import
org
.
json
.
JSONException
;
import
org
.
junit
.
Assert
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
robolectric
.
RobolectricTestRunner
;
RunWith
(
RobolectricTestRunner
.
class
)
public
class
TestDownloadContentBuilder
{
Test
public
void
testBuilder
(
)
{
DownloadContent
content
=
createTestContent
(
)
;
Assert
.
assertEquals
(
"
Some
-
ID
"
content
.
getId
(
)
)
;
Assert
.
assertEquals
(
"
/
somewhere
/
something
"
content
.
getLocation
(
)
)
;
Assert
.
assertEquals
(
"
some
.
file
"
content
.
getFilename
(
)
)
;
Assert
.
assertEquals
(
"
Some
-
checksum
"
content
.
getChecksum
(
)
)
;
Assert
.
assertEquals
(
"
Some
-
download
-
checksum
"
content
.
getDownloadChecksum
(
)
)
;
Assert
.
assertEquals
(
4223
content
.
getLastModified
(
)
)
;
Assert
.
assertEquals
(
"
Some
-
type
"
content
.
getType
(
)
)
;
Assert
.
assertEquals
(
"
Some
-
kind
"
content
.
getKind
(
)
)
;
Assert
.
assertEquals
(
27
content
.
getSize
(
)
)
;
Assert
.
assertEquals
(
DownloadContent
.
STATE_SCHEDULED
content
.
getState
(
)
)
;
}
public
void
testJSONSerializationAndDeserialization
(
)
throws
JSONException
{
DownloadContent
content
=
DownloadContentBuilder
.
fromJSON
(
DownloadContentBuilder
.
toJSON
(
createTestContent
(
)
)
)
;
Assert
.
assertEquals
(
"
Some
-
ID
"
content
.
getId
(
)
)
;
Assert
.
assertEquals
(
"
/
somewhere
/
something
"
content
.
getLocation
(
)
)
;
Assert
.
assertEquals
(
"
some
.
file
"
content
.
getFilename
(
)
)
;
Assert
.
assertEquals
(
"
Some
-
checksum
"
content
.
getChecksum
(
)
)
;
Assert
.
assertEquals
(
"
Some
-
download
-
checksum
"
content
.
getDownloadChecksum
(
)
)
;
Assert
.
assertEquals
(
4223
content
.
getLastModified
(
)
)
;
Assert
.
assertEquals
(
"
Some
-
type
"
content
.
getType
(
)
)
;
Assert
.
assertEquals
(
"
Some
-
kind
"
content
.
getKind
(
)
)
;
Assert
.
assertEquals
(
27
content
.
getSize
(
)
)
;
Assert
.
assertEquals
(
DownloadContent
.
STATE_SCHEDULED
content
.
getState
(
)
)
;
}
private
DownloadContent
createTestContent
(
)
{
return
new
DownloadContentBuilder
(
)
.
setId
(
"
Some
-
ID
"
)
.
setLocation
(
"
/
somewhere
/
something
"
)
.
setFilename
(
"
some
.
file
"
)
.
setChecksum
(
"
Some
-
checksum
"
)
.
setDownloadChecksum
(
"
Some
-
download
-
checksum
"
)
.
setLastModified
(
4223
)
.
setType
(
"
Some
-
type
"
)
.
setKind
(
"
Some
-
kind
"
)
.
setSize
(
27
)
.
setState
(
DownloadContent
.
STATE_SCHEDULED
)
.
build
(
)
;
}
}
