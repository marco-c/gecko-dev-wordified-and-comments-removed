package
org
.
mozilla
.
gecko
.
dlc
;
import
android
.
content
.
Context
;
import
android
.
support
.
v4
.
util
.
ArrayMap
;
import
android
.
support
.
v4
.
util
.
AtomicFile
;
import
org
.
json
.
JSONArray
;
import
org
.
json
.
JSONException
;
import
org
.
json
.
JSONObject
;
import
org
.
junit
.
Assert
;
import
org
.
junit
.
Test
;
import
org
.
junit
.
runner
.
RunWith
;
import
org
.
mockito
.
ArgumentCaptor
;
import
org
.
mozilla
.
gecko
.
dlc
.
catalog
.
DownloadContent
;
import
org
.
mozilla
.
gecko
.
dlc
.
catalog
.
DownloadContentBuilder
;
import
org
.
mozilla
.
gecko
.
dlc
.
catalog
.
DownloadContentCatalog
;
import
org
.
mozilla
.
gecko
.
util
.
IOUtils
;
import
org
.
robolectric
.
RobolectricTestRunner
;
import
org
.
robolectric
.
RuntimeEnvironment
;
import
java
.
io
.
BufferedInputStream
;
import
java
.
io
.
ByteArrayOutputStream
;
import
java
.
io
.
FileInputStream
;
import
java
.
io
.
FileNotFoundException
;
import
java
.
io
.
IOException
;
import
java
.
io
.
InputStream
;
import
java
.
net
.
URL
;
import
java
.
util
.
List
;
import
static
org
.
mockito
.
Matchers
.
any
;
import
static
org
.
mockito
.
Matchers
.
anyLong
;
import
static
org
.
mockito
.
Matchers
.
anyString
;
import
static
org
.
mockito
.
Matchers
.
eq
;
import
static
org
.
mockito
.
Mockito
.
doReturn
;
import
static
org
.
mockito
.
Mockito
.
mock
;
import
static
org
.
mockito
.
Mockito
.
never
;
import
static
org
.
mockito
.
Mockito
.
spy
;
import
static
org
.
mockito
.
Mockito
.
verify
;
RunWith
(
RobolectricTestRunner
.
class
)
public
class
TestSyncAction
{
Test
public
void
testEmptyResult
(
)
throws
Exception
{
SyncAction
action
=
spy
(
new
SyncAction
(
)
)
;
doReturn
(
true
)
.
when
(
action
)
.
isSyncEnabledForClient
(
RuntimeEnvironment
.
application
)
;
doReturn
(
new
JSONArray
(
)
)
.
when
(
action
)
.
fetchRawCatalog
(
anyLong
(
)
)
;
action
.
perform
(
RuntimeEnvironment
.
application
mockCatalog
(
)
)
;
verify
(
action
never
(
)
)
.
createContent
(
anyCatalog
(
)
anyJSONObject
(
)
)
;
verify
(
action
never
(
)
)
.
updateContent
(
anyCatalog
(
)
anyJSONObject
(
)
anyContent
(
)
)
;
verify
(
action
never
(
)
)
.
deleteContent
(
anyCatalog
(
)
anyString
(
)
)
;
verify
(
action
never
(
)
)
.
startStudyAction
(
anyContext
(
)
)
;
}
Test
public
void
testAddingNewContent
(
)
throws
Exception
{
SyncAction
action
=
spy
(
new
SyncAction
(
)
)
;
doReturn
(
true
)
.
when
(
action
)
.
isSyncEnabledForClient
(
RuntimeEnvironment
.
application
)
;
doReturn
(
fromFile
(
"
dlc_sync_single_font
.
json
"
)
)
.
when
(
action
)
.
fetchRawCatalog
(
anyLong
(
)
)
;
DownloadContentCatalog
catalog
=
mockCatalog
(
)
;
action
.
perform
(
RuntimeEnvironment
.
application
catalog
)
;
verify
(
action
)
.
createContent
(
anyCatalog
(
)
anyJSONObject
(
)
)
;
verify
(
action
never
(
)
)
.
updateContent
(
anyCatalog
(
)
anyJSONObject
(
)
anyContent
(
)
)
;
verify
(
action
never
(
)
)
.
deleteContent
(
anyCatalog
(
)
anyString
(
)
)
;
ArgumentCaptor
<
DownloadContent
>
captor
=
ArgumentCaptor
.
forClass
(
DownloadContent
.
class
)
;
verify
(
catalog
)
.
add
(
captor
.
capture
(
)
)
;
DownloadContent
content
=
captor
.
getValue
(
)
;
Assert
.
assertEquals
(
"
c906275c
-
3747
-
fe27
-
426f
-
6187526a6f06
"
content
.
getId
(
)
)
;
Assert
.
assertEquals
(
"
4ed509317f1bb441b185ea13bf1c9d19d1a0b396962efa3b5dc3190ad88f2067
"
content
.
getChecksum
(
)
)
;
Assert
.
assertEquals
(
"
960be4fc5a92c1dc488582b215d5d75429fd4ffbee463105d29992cd792a912e
"
content
.
getDownloadChecksum
(
)
)
;
Assert
.
assertEquals
(
"
CharisSILCompact
-
R
.
ttf
"
content
.
getFilename
(
)
)
;
Assert
.
assertEquals
(
DownloadContent
.
KIND_FONT
content
.
getKind
(
)
)
;
Assert
.
assertEquals
(
"
/
attachments
/
0d28a72d
-
a51f
-
46f8
-
9e5a
-
f95c61de904e
.
gz
"
content
.
getLocation
(
)
)
;
Assert
.
assertEquals
(
DownloadContent
.
TYPE_ASSET_ARCHIVE
content
.
getType
(
)
)
;
Assert
.
assertEquals
(
1455710632607L
content
.
getLastModified
(
)
)
;
Assert
.
assertEquals
(
1727656L
content
.
getSize
(
)
)
;
Assert
.
assertEquals
(
DownloadContent
.
STATE_NONE
content
.
getState
(
)
)
;
}
Test
public
void
testUpdatingWithOldCatalog
(
)
throws
Exception
{
SyncAction
action
=
spy
(
new
SyncAction
(
)
)
;
doReturn
(
true
)
.
when
(
action
)
.
isSyncEnabledForClient
(
RuntimeEnvironment
.
application
)
;
doReturn
(
fromFile
(
"
dlc_sync_old_format
.
json
"
)
)
.
when
(
action
)
.
fetchRawCatalog
(
anyLong
(
)
)
;
DownloadContent
existingContent
=
createTestContent
(
"
c906275c
-
3747
-
fe27
-
426f
-
6187526a6f06
"
)
;
DownloadContentCatalog
catalog
=
spy
(
new
MockedContentCatalog
(
existingContent
)
)
;
action
.
perform
(
RuntimeEnvironment
.
application
catalog
)
;
verify
(
action
never
(
)
)
.
createContent
(
anyCatalog
(
)
anyJSONObject
(
)
)
;
verify
(
action
never
(
)
)
.
updateContent
(
anyCatalog
(
)
anyJSONObject
(
)
anyContent
(
)
)
;
verify
(
action
never
(
)
)
.
deleteContent
(
anyCatalog
(
)
anyString
(
)
)
;
verify
(
action
never
(
)
)
.
startStudyAction
(
anyContext
(
)
)
;
}
Test
public
void
testUpdatingExistingContent
(
)
throws
Exception
{
SyncAction
action
=
spy
(
new
SyncAction
(
)
)
;
doReturn
(
true
)
.
when
(
action
)
.
isSyncEnabledForClient
(
RuntimeEnvironment
.
application
)
;
doReturn
(
fromFile
(
"
dlc_sync_single_font
.
json
"
)
)
.
when
(
action
)
.
fetchRawCatalog
(
anyLong
(
)
)
;
DownloadContent
existingContent
=
createTestContent
(
"
c906275c
-
3747
-
fe27
-
426f
-
6187526a6f06
"
)
;
DownloadContentCatalog
catalog
=
spy
(
new
MockedContentCatalog
(
existingContent
)
)
;
action
.
perform
(
RuntimeEnvironment
.
application
catalog
)
;
verify
(
action
)
.
updateContent
(
anyCatalog
(
)
anyJSONObject
(
)
eq
(
existingContent
)
)
;
verify
(
action
never
(
)
)
.
createContent
(
anyCatalog
(
)
anyJSONObject
(
)
)
;
verify
(
action
never
(
)
)
.
deleteContent
(
anyCatalog
(
)
anyString
(
)
)
;
ArgumentCaptor
<
DownloadContent
>
captor
=
ArgumentCaptor
.
forClass
(
DownloadContent
.
class
)
;
verify
(
catalog
)
.
update
(
captor
.
capture
(
)
)
;
DownloadContent
content
=
captor
.
getValue
(
)
;
Assert
.
assertEquals
(
"
c906275c
-
3747
-
fe27
-
426f
-
6187526a6f06
"
content
.
getId
(
)
)
;
Assert
.
assertEquals
(
"
4ed509317f1bb441b185ea13bf1c9d19d1a0b396962efa3b5dc3190ad88f2067
"
content
.
getChecksum
(
)
)
;
Assert
.
assertEquals
(
"
960be4fc5a92c1dc488582b215d5d75429fd4ffbee463105d29992cd792a912e
"
content
.
getDownloadChecksum
(
)
)
;
Assert
.
assertEquals
(
"
CharisSILCompact
-
R
.
ttf
"
content
.
getFilename
(
)
)
;
Assert
.
assertEquals
(
DownloadContent
.
KIND_FONT
content
.
getKind
(
)
)
;
Assert
.
assertEquals
(
"
/
attachments
/
0d28a72d
-
a51f
-
46f8
-
9e5a
-
f95c61de904e
.
gz
"
content
.
getLocation
(
)
)
;
Assert
.
assertEquals
(
DownloadContent
.
TYPE_ASSET_ARCHIVE
content
.
getType
(
)
)
;
Assert
.
assertEquals
(
1455710632607L
content
.
getLastModified
(
)
)
;
Assert
.
assertEquals
(
1727656L
content
.
getSize
(
)
)
;
Assert
.
assertEquals
(
DownloadContent
.
STATE_UPDATED
content
.
getState
(
)
)
;
}
Test
public
void
testDeletingExistingContent
(
)
throws
Exception
{
SyncAction
action
=
spy
(
new
SyncAction
(
)
)
;
doReturn
(
true
)
.
when
(
action
)
.
isSyncEnabledForClient
(
RuntimeEnvironment
.
application
)
;
doReturn
(
fromFile
(
"
dlc_sync_deleted_item
.
json
"
)
)
.
when
(
action
)
.
fetchRawCatalog
(
anyLong
(
)
)
;
final
String
id
=
"
c906275c
-
3747
-
fe27
-
426f
-
6187526a6f06
"
;
DownloadContent
existingContent
=
createTestContent
(
id
)
;
DownloadContentCatalog
catalog
=
spy
(
new
MockedContentCatalog
(
existingContent
)
)
;
action
.
perform
(
RuntimeEnvironment
.
application
catalog
)
;
verify
(
action
)
.
deleteContent
(
anyCatalog
(
)
eq
(
id
)
)
;
verify
(
action
never
(
)
)
.
createContent
(
anyCatalog
(
)
anyJSONObject
(
)
)
;
verify
(
action
never
(
)
)
.
updateContent
(
anyCatalog
(
)
anyJSONObject
(
)
anyContent
(
)
)
;
ArgumentCaptor
<
DownloadContent
>
captor
=
ArgumentCaptor
.
forClass
(
DownloadContent
.
class
)
;
verify
(
catalog
)
.
markAsDeleted
(
captor
.
capture
(
)
)
;
DownloadContent
content
=
captor
.
getValue
(
)
;
Assert
.
assertEquals
(
id
content
.
getId
(
)
)
;
List
<
DownloadContent
>
contentToDelete
=
catalog
.
getContentToDelete
(
)
;
Assert
.
assertEquals
(
1
contentToDelete
.
size
(
)
)
;
Assert
.
assertEquals
(
id
contentToDelete
.
get
(
0
)
.
getId
(
)
)
;
}
private
DownloadContent
createTestContent
(
String
id
)
{
return
new
DownloadContentBuilder
(
)
.
setId
(
id
)
.
setLocation
(
"
/
somewhere
/
something
"
)
.
setFilename
(
"
some
.
file
"
)
.
setChecksum
(
"
Some
-
checksum
"
)
.
setDownloadChecksum
(
"
Some
-
download
-
checksum
"
)
.
setLastModified
(
4223
)
.
setType
(
"
Some
-
type
"
)
.
setKind
(
"
Some
-
kind
"
)
.
setSize
(
27
)
.
setState
(
DownloadContent
.
STATE_SCHEDULED
)
.
build
(
)
;
}
private
JSONArray
fromFile
(
String
fileName
)
throws
IOException
JSONException
{
URL
url
=
getClass
(
)
.
getResource
(
"
/
"
+
fileName
)
;
if
(
url
=
=
null
)
{
throw
new
FileNotFoundException
(
fileName
)
;
}
InputStream
inputStream
=
null
;
ByteArrayOutputStream
outputStream
=
null
;
try
{
inputStream
=
new
BufferedInputStream
(
new
FileInputStream
(
url
.
getPath
(
)
)
)
;
outputStream
=
new
ByteArrayOutputStream
(
)
;
IOUtils
.
copy
(
inputStream
outputStream
)
;
JSONObject
object
=
new
JSONObject
(
outputStream
.
toString
(
)
)
;
return
object
.
getJSONArray
(
"
data
"
)
;
}
finally
{
IOUtils
.
safeStreamClose
(
inputStream
)
;
IOUtils
.
safeStreamClose
(
outputStream
)
;
}
}
private
static
class
MockedContentCatalog
extends
DownloadContentCatalog
{
public
MockedContentCatalog
(
DownloadContent
content
)
{
super
(
mock
(
AtomicFile
.
class
)
)
;
ArrayMap
<
String
DownloadContent
>
map
=
new
ArrayMap
<
>
(
)
;
map
.
put
(
content
.
getId
(
)
content
)
;
onCatalogLoaded
(
map
)
;
}
}
private
DownloadContentCatalog
mockCatalog
(
)
{
return
mock
(
DownloadContentCatalog
.
class
)
;
}
private
DownloadContentCatalog
anyCatalog
(
)
{
return
any
(
DownloadContentCatalog
.
class
)
;
}
private
JSONObject
anyJSONObject
(
)
{
return
any
(
JSONObject
.
class
)
;
}
private
DownloadContent
anyContent
(
)
{
return
any
(
DownloadContent
.
class
)
;
}
private
Context
anyContext
(
)
{
return
any
(
Context
.
class
)
;
}
}
