'
use
strict
'
;
this
.
EXPORTED_SYMBOLS
=
[
'
Frames
'
]
;
const
Cu
=
Components
.
utils
;
const
Ci
=
Components
.
interfaces
;
Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
Services
.
jsm
'
)
;
Cu
.
import
(
'
resource
:
/
/
gre
/
modules
/
SystemAppProxy
.
jsm
'
)
;
const
listeners
=
[
]
;
const
Observer
=
{
_frames
:
new
Map
(
)
start
:
function
(
)
{
Services
.
obs
.
addObserver
(
this
'
remote
-
browser
-
shown
'
false
)
;
Services
.
obs
.
addObserver
(
this
'
inprocess
-
browser
-
shown
'
false
)
;
Services
.
obs
.
addObserver
(
this
'
message
-
manager
-
close
'
false
)
;
SystemAppProxy
.
getFrames
(
)
.
forEach
(
frame
=
>
{
let
mm
=
frame
.
QueryInterface
(
Ci
.
nsIFrameLoaderOwner
)
.
frameLoader
.
messageManager
;
this
.
_frames
.
set
(
mm
frame
)
;
}
)
;
}
stop
:
function
(
)
{
Services
.
obs
.
removeObserver
(
this
'
remote
-
browser
-
shown
'
)
;
Services
.
obs
.
removeObserver
(
this
'
inprocess
-
browser
-
shown
'
)
;
Services
.
obs
.
removeObserver
(
this
'
message
-
manager
-
close
'
)
;
this
.
_frames
.
clear
(
)
;
}
observe
:
function
(
subject
topic
data
)
{
switch
(
topic
)
{
case
'
remote
-
browser
-
shown
'
:
case
'
inprocess
-
browser
-
shown
'
:
let
frameLoader
=
subject
;
frameLoader
.
QueryInterface
(
Ci
.
nsIFrameLoader
)
;
let
frame
=
frameLoader
.
ownerElement
;
let
mm
=
frame
.
QueryInterface
(
Ci
.
nsIFrameLoaderOwner
)
.
frameLoader
.
messageManager
;
this
.
onMessageManagerCreated
(
mm
frame
)
;
break
;
case
'
message
-
manager
-
close
'
:
this
.
onMessageManagerDestroyed
(
subject
)
;
break
;
}
}
onMessageManagerCreated
:
function
(
mm
frame
)
{
this
.
_frames
.
set
(
mm
frame
)
;
listeners
.
forEach
(
function
(
listener
)
{
try
{
listener
.
onFrameCreated
(
frame
)
;
}
catch
(
e
)
{
dump
(
'
Exception
while
calling
Frames
.
jsm
listener
:
'
+
e
+
'
\
n
'
+
e
.
stack
+
'
\
n
'
)
;
}
}
)
;
}
onMessageManagerDestroyed
:
function
(
mm
)
{
let
frame
=
this
.
_frames
.
get
(
mm
)
;
if
(
!
frame
)
{
return
;
}
this
.
_frames
.
delete
(
mm
)
;
listeners
.
forEach
(
function
(
listener
)
{
try
{
listener
.
onFrameDestroyed
(
frame
)
;
}
catch
(
e
)
{
dump
(
'
Exception
while
calling
Frames
.
jsm
listener
:
'
+
e
+
'
\
n
'
+
e
.
stack
+
'
\
n
'
)
;
}
}
)
;
}
}
;
var
Frames
=
this
.
Frames
=
{
list
:
(
)
=
>
SystemAppProxy
.
getFrames
(
)
addObserver
:
function
(
listener
)
{
if
(
listeners
.
indexOf
(
listener
)
!
=
=
-
1
)
{
return
;
}
listeners
.
push
(
listener
)
;
if
(
listeners
.
length
=
=
1
)
{
Observer
.
start
(
)
;
}
}
removeObserver
:
function
(
listener
)
{
let
idx
=
listeners
.
indexOf
(
listener
)
;
if
(
idx
!
=
=
-
1
)
{
listeners
.
splice
(
idx
1
)
;
}
if
(
listeners
.
length
=
=
=
0
)
{
Observer
.
stop
(
)
;
}
}
}
;
