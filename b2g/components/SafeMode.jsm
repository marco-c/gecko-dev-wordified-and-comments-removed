"
use
strict
"
;
this
.
EXPORTED_SYMBOLS
=
[
"
SafeMode
"
]
;
const
Cu
=
Components
.
utils
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
AppConstants
.
jsm
"
)
;
const
kSafeModePref
=
"
b2g
.
safe_mode
"
;
const
kSafeModePage
=
"
safe_mode
.
html
"
;
function
debug
(
aStr
)
{
}
this
.
SafeMode
=
{
_waitForPref
:
function
(
)
{
debug
(
"
waitForPref
"
)
;
try
{
let
currentMode
=
Services
.
prefs
.
getCharPref
(
kSafeModePref
)
;
debug
(
"
current
mode
:
"
+
currentMode
)
;
if
(
currentMode
!
=
=
"
unset
"
)
{
return
Promise
.
resolve
(
)
;
}
}
catch
(
e
)
{
debug
(
"
No
current
mode
available
!
"
)
;
}
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
observer
=
function
(
aSubject
aTopic
aData
)
{
if
(
Services
.
prefs
.
getCharPref
(
kSafeModePref
)
)
{
Services
.
prefs
.
removeObserver
(
kSafeModePref
observer
false
)
;
aResolve
(
)
;
}
}
Services
.
prefs
.
addObserver
(
kSafeModePref
observer
false
)
;
}
)
;
}
_waitForUser
:
function
(
)
{
debug
(
"
waitForUser
"
)
;
let
isSafeMode
=
Services
.
prefs
.
getCharPref
(
kSafeModePref
)
=
=
=
"
yes
"
;
if
(
!
isSafeMode
)
{
return
Promise
.
resolve
(
)
;
}
debug
(
"
Starting
in
Safe
Mode
!
"
)
;
let
shell
=
SafeMode
.
window
.
shell
;
let
document
=
SafeMode
.
window
.
document
;
SafeMode
.
window
.
screen
.
mozLockOrientation
(
"
portrait
"
)
;
let
url
=
Services
.
io
.
newURI
(
shell
.
homeURL
null
null
)
.
resolve
(
kSafeModePage
)
;
debug
(
"
Registry
is
ready
loading
"
+
url
)
;
let
frame
=
document
.
createElementNS
(
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
"
html
:
iframe
"
)
;
frame
.
setAttribute
(
"
mozbrowser
"
"
true
"
)
;
frame
.
setAttribute
(
"
mozapp
"
shell
.
manifestURL
)
;
frame
.
setAttribute
(
"
id
"
"
systemapp
"
)
;
let
contentBrowser
=
document
.
body
.
appendChild
(
frame
)
;
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
content
=
contentBrowser
.
contentWindow
;
function
handleEvent
(
e
)
{
switch
(
e
.
type
)
{
case
"
mozbrowserloadstart
"
:
if
(
content
.
document
.
location
=
=
"
about
:
blank
"
)
{
contentBrowser
.
addEventListener
(
"
mozbrowserlocationchange
"
handleEvent
true
)
;
contentBrowser
.
removeEventListener
(
"
mozbrowserloadstart
"
handleEvent
true
)
;
return
;
}
notifyContentStart
(
)
;
break
;
case
"
mozbrowserlocationchange
"
:
if
(
content
.
document
.
location
=
=
"
about
:
blank
"
)
{
return
;
}
contentBrowser
.
removeEventListener
(
"
mozbrowserlocationchange
"
handleEvent
true
)
;
notifyContentStart
(
)
;
break
;
case
"
mozContentEvent
"
:
content
.
removeEventListener
(
"
mozContentEvent
"
handleEvent
true
)
;
contentBrowser
.
parentNode
.
removeChild
(
contentBrowser
)
;
if
(
e
.
detail
=
=
"
safemode
-
yes
"
)
{
aResolve
(
)
;
}
else
{
aResolve
(
)
;
}
break
;
}
}
function
notifyContentStart
(
)
{
let
window
=
SafeMode
.
window
;
window
.
shell
.
sendEvent
(
window
"
SafeModeStart
"
)
;
contentBrowser
.
setVisible
(
true
)
;
Services
.
obs
.
notifyObservers
(
null
"
browser
-
ui
-
startup
-
complete
"
"
"
)
;
content
.
addEventListener
(
"
mozContentEvent
"
handleEvent
true
)
;
}
contentBrowser
.
addEventListener
(
"
mozbrowserloadstart
"
handleEvent
true
)
;
contentBrowser
.
src
=
url
;
}
)
;
}
check
:
function
(
aWindow
)
{
debug
(
"
check
"
)
;
this
.
window
=
aWindow
;
if
(
AppConstants
.
platform
!
=
=
"
gonk
"
)
{
return
Promise
.
resolve
(
)
;
}
return
this
.
_waitForPref
(
)
.
then
(
this
.
_waitForUser
)
;
}
}
