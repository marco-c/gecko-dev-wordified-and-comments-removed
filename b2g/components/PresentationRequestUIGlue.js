"
use
strict
"
function
debug
(
aMsg
)
{
}
const
{
interfaces
:
Ci
utils
:
Cu
classes
:
Cc
}
=
Components
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
XPCOMUtils
.
jsm
"
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
)
;
XPCOMUtils
.
defineLazyModuleGetter
(
this
"
SystemAppProxy
"
"
resource
:
/
/
gre
/
modules
/
SystemAppProxy
.
jsm
"
)
;
function
PresentationRequestUIGlue
(
)
{
}
PresentationRequestUIGlue
.
prototype
=
{
sendRequest
:
function
(
aUrl
aSessionId
aDevice
)
{
let
localDevice
;
try
{
localDevice
=
aDevice
.
QueryInterface
(
Ci
.
nsIPresentationLocalDevice
)
;
}
catch
(
e
)
{
}
if
(
localDevice
)
{
return
this
.
sendTo1UA
(
aUrl
aSessionId
localDevice
.
windowId
)
;
}
else
{
return
this
.
sendTo2UA
(
aUrl
aSessionId
)
;
}
}
sendTo1UA
:
function
(
aUrl
aSessionId
aWindowId
)
{
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
handler
=
(
evt
)
=
>
{
if
(
evt
.
type
=
=
=
"
unload
"
)
{
SystemAppProxy
.
removeEventListenerWithId
(
aWindowId
"
unload
"
handler
)
;
SystemAppProxy
.
removeEventListenerWithId
(
aWindowId
"
mozPresentationContentEvent
"
handler
)
;
aReject
(
)
;
}
if
(
evt
.
type
=
=
=
"
mozPresentationContentEvent
"
&
&
evt
.
detail
.
id
=
=
aSessionId
)
{
SystemAppProxy
.
removeEventListenerWithId
(
aWindowId
"
unload
"
handler
)
;
SystemAppProxy
.
removeEventListenerWithId
(
aWindowId
"
mozPresentationContentEvent
"
handler
)
;
this
.
appLaunchCallback
(
evt
.
detail
aResolve
aReject
)
;
}
}
;
SystemAppProxy
.
addEventListenerWithId
(
aWindowId
"
unload
"
handler
)
;
SystemAppProxy
.
addEventListenerWithId
(
aWindowId
"
mozPresentationContentEvent
"
handler
)
;
SystemAppProxy
.
sendCustomEventWithId
(
aWindowId
"
mozPresentationChromeEvent
"
{
type
:
"
presentation
-
launch
-
receiver
"
url
:
aUrl
id
:
aSessionId
}
)
;
}
)
;
}
sendTo2UA
:
function
(
aUrl
aSessionId
)
{
return
new
Promise
(
(
aResolve
aReject
)
=
>
{
let
handler
=
(
evt
)
=
>
{
if
(
evt
.
type
=
=
=
"
mozPresentationContentEvent
"
&
&
evt
.
detail
.
id
=
=
aSessionId
)
{
SystemAppProxy
.
removeEventListener
(
"
mozPresentationContentEvent
"
handler
)
;
this
.
appLaunchCallback
(
evt
.
detail
aResolve
aReject
)
;
}
}
;
SystemAppProxy
.
addEventListener
(
"
mozPresentationContentEvent
"
handler
)
;
SystemAppProxy
.
_sendCustomEvent
(
"
mozPresentationChromeEvent
"
{
type
:
"
presentation
-
launch
-
receiver
"
url
:
aUrl
id
:
aSessionId
}
)
;
}
)
;
}
appLaunchCallback
:
function
(
aDetail
aResolve
aReject
)
{
switch
(
aDetail
.
type
)
{
case
"
presentation
-
receiver
-
launched
"
:
aResolve
(
aDetail
.
frame
)
;
break
;
case
"
presentation
-
receiver
-
permission
-
denied
"
:
aReject
(
)
;
break
;
}
}
classID
:
Components
.
ID
(
"
{
ccc8a839
-
0b64
-
422b
-
8a60
-
fb2af0e376d0
}
"
)
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIPresentationRequestUIGlue
]
)
}
;
this
.
NSGetFactory
=
XPCOMUtils
.
generateNSGetFactory
(
[
PresentationRequestUIGlue
]
)
;
