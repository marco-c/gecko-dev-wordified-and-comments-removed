"
use
strict
"
;
function
run_test
(
)
{
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
LogShake
.
jsm
"
)
;
run_next_test
(
)
;
}
add_test
(
setup_logshake_mocks
)
;
add_test
(
function
test_logShake_captureLogs_waits_to_read
(
)
{
LogShake
.
init
(
)
;
LogShake
.
LOGS_WITH_PARSERS
=
{
}
;
LogShake
.
captureLogs
(
)
.
then
(
logResults
=
>
{
LogShake
.
uninit
(
)
;
ok
(
logResults
.
logFilenames
.
length
>
0
"
Should
have
filenames
"
)
;
ok
(
logResults
.
logPaths
.
length
>
0
"
Should
have
paths
"
)
;
ok
(
!
logResults
.
compressed
"
Should
not
be
compressed
"
)
;
let
hasAboutMemory
=
false
;
logResults
.
logFilenames
.
forEach
(
filename
=
>
{
if
(
filename
.
indexOf
(
"
about_memory
"
)
<
0
)
{
return
;
}
hasAboutMemory
=
true
;
}
)
;
ok
(
hasAboutMemory
"
LogShake
'
s
asynchronous
read
of
about
:
memory
should
have
succeeded
.
"
)
;
run_next_test
(
)
;
}
error
=
>
{
LogShake
.
uninit
(
)
;
ok
(
false
"
Should
not
have
received
error
:
"
+
error
)
;
run_next_test
(
)
;
}
)
;
}
)
;
