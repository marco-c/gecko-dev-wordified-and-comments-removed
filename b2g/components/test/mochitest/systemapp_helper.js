var
Cu
=
Components
.
utils
;
const
{
Services
}
=
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Services
.
jsm
"
{
}
)
;
var
scope
=
{
}
;
Services
.
scriptloader
.
loadSubScript
(
"
resource
:
/
/
gre
/
modules
/
SystemAppProxy
.
jsm
"
scope
)
;
const
{
SystemAppProxy
}
=
scope
;
var
frame
;
var
customEventTarget
;
var
index
=
-
1
;
function
next
(
)
{
index
+
+
;
if
(
index
>
=
steps
.
length
)
{
assert
.
ok
(
false
"
Shouldn
'
t
get
here
!
"
)
;
return
;
}
try
{
steps
[
index
]
(
)
;
}
catch
(
ex
)
{
assert
.
ok
(
false
"
Caught
exception
:
"
+
ex
)
;
}
}
var
isLoaded
=
false
;
var
isReady
=
false
;
var
n
=
0
;
function
listener
(
event
)
{
if
(
!
isLoaded
)
{
assert
.
ok
(
false
"
Received
event
before
the
iframe
is
loaded
"
)
;
return
;
}
n
+
+
;
if
(
n
=
=
1
)
{
assert
.
equal
(
event
.
type
"
mozChromeEvent
"
)
;
assert
.
equal
(
event
.
detail
.
name
"
first
"
)
;
}
else
if
(
n
=
=
2
)
{
assert
.
equal
(
event
.
type
"
custom
"
)
;
assert
.
equal
(
event
.
detail
.
name
"
second
"
)
;
next
(
)
;
}
else
if
(
n
=
=
3
)
{
if
(
!
isReady
)
{
assert
.
ok
(
false
"
Received
event
before
the
iframe
is
loaded
"
)
;
return
;
}
assert
.
equal
(
event
.
type
"
custom
"
)
;
assert
.
equal
(
event
.
detail
.
name
"
third
"
)
;
}
else
if
(
n
=
=
4
)
{
if
(
!
isReady
)
{
assert
.
ok
(
false
"
Received
event
before
the
iframe
is
loaded
"
)
;
return
;
}
assert
.
equal
(
event
.
type
"
mozChromeEvent
"
)
;
assert
.
equal
(
event
.
detail
.
name
"
fourth
"
)
;
next
(
)
;
}
else
if
(
n
=
=
5
)
{
assert
.
equal
(
event
.
type
"
custom
"
)
;
assert
.
equal
(
event
.
detail
.
name
"
fifth
"
)
;
}
else
if
(
n
=
=
=
6
)
{
assert
.
equal
(
event
.
type
"
mozChromeEvent
"
)
;
assert
.
equal
(
event
.
detail
.
name
"
sixth
"
)
;
}
else
if
(
n
=
=
=
7
)
{
assert
.
equal
(
event
.
type
"
custom
"
)
;
assert
.
equal
(
event
.
detail
.
name
"
seventh
"
)
;
assert
.
equal
(
event
.
target
customEventTarget
)
;
next
(
)
;
}
else
{
assert
.
ok
(
false
"
Unexpected
event
of
type
"
+
event
.
type
)
;
}
}
var
steps
=
[
function
earlyEvents
(
)
{
SystemAppProxy
.
_sendCustomEvent
(
"
mozChromeEvent
"
{
name
:
"
first
"
}
true
)
;
SystemAppProxy
.
_sendCustomEvent
(
"
custom
"
{
name
:
"
second
"
}
true
)
;
next
(
)
;
}
function
createFrame
(
)
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
let
doc
=
win
.
document
;
frame
=
doc
.
createElement
(
"
iframe
"
)
;
doc
.
documentElement
.
appendChild
(
frame
)
;
customEventTarget
=
frame
.
contentDocument
.
body
;
frame
.
contentWindow
.
addEventListener
(
"
mozChromeEvent
"
listener
)
;
frame
.
contentWindow
.
addEventListener
(
"
custom
"
listener
)
;
function
removedListener
(
)
{
assert
.
ok
(
false
"
Listener
isn
'
t
correctly
removed
from
the
pending
list
"
)
;
}
SystemAppProxy
.
addEventListener
(
"
mozChromeEvent
"
removedListener
)
;
SystemAppProxy
.
removeEventListener
(
"
mozChromeEvent
"
removedListener
)
;
SystemAppProxy
.
registerFrame
(
frame
)
;
assert
.
ok
(
true
"
Frame
created
and
registered
"
)
;
frame
.
contentWindow
.
addEventListener
(
"
load
"
function
onload
(
)
{
frame
.
contentWindow
.
removeEventListener
(
"
load
"
onload
)
;
assert
.
ok
(
true
"
Frame
document
loaded
"
)
;
isLoaded
=
true
;
SystemAppProxy
.
setIsLoaded
(
)
;
assert
.
ok
(
true
"
Frame
declared
as
loaded
"
)
;
let
gotFrame
=
SystemAppProxy
.
getFrame
(
)
;
assert
.
equal
(
gotFrame
frame
"
getFrame
returns
the
frame
we
passed
"
)
;
}
)
;
frame
.
setAttribute
(
"
src
"
"
data
:
text
/
html
system
app
"
)
;
}
function
checkEventPendingBeforeLoad
(
)
{
SystemAppProxy
.
_sendCustomEvent
(
"
custom
"
{
name
:
"
third
"
}
)
;
SystemAppProxy
.
dispatchEvent
(
{
name
:
"
fourth
"
}
)
;
isReady
=
true
;
SystemAppProxy
.
setIsReady
(
)
;
}
function
checkEventDispatching
(
)
{
SystemAppProxy
.
_sendCustomEvent
(
"
custom
"
{
name
:
"
fifth
"
}
)
;
SystemAppProxy
.
dispatchEvent
(
{
name
:
"
sixth
"
}
)
;
SystemAppProxy
.
_sendCustomEvent
(
"
custom
"
{
name
:
"
seventh
"
}
false
customEventTarget
)
;
}
function
checkEventListening
(
)
{
SystemAppProxy
.
addEventListener
(
"
mozContentEvent
"
function
onContentEvent
(
event
)
{
assert
.
equal
(
event
.
detail
.
name
"
first
-
content
"
"
received
a
system
app
event
"
)
;
SystemAppProxy
.
removeEventListener
(
"
mozContentEvent
"
onContentEvent
)
;
next
(
)
;
}
)
;
let
win
=
frame
.
contentWindow
;
win
.
dispatchEvent
(
new
win
.
CustomEvent
(
"
mozContentEvent
"
{
detail
:
{
name
:
"
first
-
content
"
}
}
)
)
;
}
function
endOfTest
(
)
{
frame
.
remove
(
)
;
sendAsyncMessage
(
"
finish
"
)
;
}
]
;
next
(
)
;
