#
ifndef
SFNTLY_CPP_SRC_SFNTLY_FONT_FACTORY_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_FONT_FACTORY_H_
#
include
<
vector
>
#
include
"
sfntly
/
port
/
refcount
.
h
"
#
include
"
sfntly
/
port
/
type
.
h
"
#
include
"
sfntly
/
font
.
h
"
namespace
sfntly
{
class
FontFactory
:
public
RefCounted
<
FontFactory
>
{
public
:
virtual
~
FontFactory
(
)
;
static
CALLER_ATTACH
FontFactory
*
GetInstance
(
)
;
void
FingerprintFont
(
bool
fingerprint
)
;
bool
FingerprintFont
(
)
;
void
LoadFonts
(
InputStream
*
is
FontArray
*
output
)
;
void
LoadFonts
(
ByteVector
*
b
FontArray
*
output
)
;
void
LoadFontsForBuilding
(
InputStream
*
is
FontBuilderArray
*
output
)
;
void
LoadFontsForBuilding
(
ByteVector
*
b
FontBuilderArray
*
output
)
;
void
SerializeFont
(
Font
*
font
OutputStream
*
os
)
;
void
SetSerializationTableOrdering
(
const
IntegerList
&
table_ordering
)
;
CALLER_ATTACH
Font
:
:
Builder
*
NewFontBuilder
(
)
;
private
:
struct
Offset
{
enum
{
kTTCTag
=
0
kVersion
=
4
kNumFonts
=
8
kOffsetTable
=
12
kulDsigTag
=
0
kulDsigLength
=
4
kulDsigOffset
=
8
}
;
}
;
FontFactory
(
)
;
CALLER_ATTACH
Font
*
LoadSingleOTF
(
InputStream
*
is
)
;
CALLER_ATTACH
Font
*
LoadSingleOTF
(
WritableFontData
*
wfd
)
;
void
LoadCollection
(
InputStream
*
is
FontArray
*
output
)
;
void
LoadCollection
(
WritableFontData
*
wfd
FontArray
*
output
)
;
CALLER_ATTACH
Font
:
:
Builder
*
LoadSingleOTFForBuilding
(
InputStream
*
is
)
;
CALLER_ATTACH
Font
:
:
Builder
*
LoadSingleOTFForBuilding
(
WritableFontData
*
wfd
int32_t
offset_to_offset_table
)
;
void
LoadCollectionForBuilding
(
InputStream
*
is
FontBuilderArray
*
builders
)
;
void
LoadCollectionForBuilding
(
WritableFontData
*
ba
FontBuilderArray
*
builders
)
;
static
bool
IsCollection
(
PushbackInputStream
*
pbis
)
;
static
bool
IsCollection
(
ReadableFontData
*
wfd
)
;
bool
fingerprint_
;
IntegerList
table_ordering_
;
}
;
typedef
Ptr
<
FontFactory
>
FontFactoryPtr
;
}
#
endif
