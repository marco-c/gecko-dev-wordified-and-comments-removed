#
ifndef
SFNTLY_CPP_SRC_SFNTLY_FONT_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_FONT_H_
#
include
<
vector
>
#
include
"
sfntly
/
port
/
refcount
.
h
"
#
include
"
sfntly
/
port
/
type
.
h
"
#
include
"
sfntly
/
port
/
endian
.
h
"
#
include
"
sfntly
/
data
/
font_input_stream
.
h
"
#
include
"
sfntly
/
data
/
font_output_stream
.
h
"
#
include
"
sfntly
/
data
/
writable_font_data
.
h
"
#
include
"
sfntly
/
table
/
table
.
h
"
namespace
sfntly
{
struct
PlatformId
{
enum
{
kUnknown
=
-
1
kUnicode
=
0
kMacintosh
=
1
kISO
=
2
kWindows
=
3
kCustom
=
4
}
;
}
;
struct
UnicodeEncodingId
{
enum
{
kUnknown
=
-
1
kUnicode1_0
=
0
kUnicode1_1
=
1
kISO10646
=
2
kUnicode2_0_BMP
=
3
kUnicode2_0
=
4
kUnicodeVariationSequences
=
5
}
;
}
;
struct
WindowsEncodingId
{
enum
{
kUnknown
=
0xffffffff
kSymbol
=
0
kUnicodeUCS2
=
1
kShiftJIS
=
2
kPRC
=
3
kBig5
=
4
kWansung
=
5
kJohab
=
6
kUnicodeUCS4
=
10
}
;
}
;
struct
MacintoshEncodingId
{
enum
{
kUnknown
=
-
1
kRoman
=
0
kJapanese
=
1
kChineseTraditional
=
2
kKorean
=
3
kArabic
=
4
kHebrew
=
5
kGreek
=
6
kRussian
=
7
kRSymbol
=
8
kDevanagari
=
9
kGurmukhi
=
10
kGujarati
=
11
kOriya
=
12
kBengali
=
13
kTamil
=
14
kTelugu
=
15
kKannada
=
16
kMalayalam
=
17
kSinhalese
=
18
kBurmese
=
19
kKhmer
=
20
kThai
=
21
kLaotian
=
22
kGeorgian
=
23
kArmenian
=
24
kChineseSimplified
=
25
kTibetan
=
26
kMongolian
=
27
kGeez
=
28
kSlavic
=
29
kVietnamese
=
30
kSindhi
=
31
kUninterpreted
=
32
}
;
}
;
class
FontFactory
;
class
Font
:
public
RefCounted
<
Font
>
{
public
:
class
Builder
:
public
RefCounted
<
Builder
>
{
public
:
virtual
~
Builder
(
)
;
static
CALLER_ATTACH
Builder
*
GetOTFBuilder
(
FontFactory
*
factory
InputStream
*
is
)
;
static
CALLER_ATTACH
Builder
*
GetOTFBuilder
(
FontFactory
*
factory
WritableFontData
*
ba
int32_t
offset_to_offset_table
)
;
static
CALLER_ATTACH
Builder
*
GetOTFBuilder
(
FontFactory
*
factory
)
;
FontFactory
*
GetFontFactory
(
)
{
return
factory_
;
}
bool
ReadyToBuild
(
)
;
CALLER_ATTACH
Font
*
Build
(
)
;
void
SetDigest
(
std
:
:
vector
<
uint8_t
>
*
digest
)
;
void
ClearTableBuilders
(
)
;
bool
HasTableBuilder
(
int32_t
tag
)
;
Table
:
:
Builder
*
GetTableBuilder
(
int32_t
tag
)
;
virtual
Table
:
:
Builder
*
NewTableBuilder
(
int32_t
tag
)
;
virtual
Table
:
:
Builder
*
NewTableBuilder
(
int32_t
tag
ReadableFontData
*
src_data
)
;
virtual
TableBuilderMap
*
table_builders
(
)
{
return
&
table_builders_
;
}
virtual
void
RemoveTableBuilder
(
int32_t
tag
)
;
virtual
int32_t
number_of_table_builders
(
)
{
return
(
int32_t
)
table_builders_
.
size
(
)
;
}
private
:
explicit
Builder
(
FontFactory
*
factory
)
;
virtual
void
LoadFont
(
InputStream
*
is
)
;
virtual
void
LoadFont
(
WritableFontData
*
wfd
int32_t
offset_to_offset_table
)
;
int32_t
SfntWrapperSize
(
)
;
void
BuildAllTableBuilders
(
DataBlockMap
*
table_data
TableBuilderMap
*
builder_map
)
;
CALLER_ATTACH
Table
:
:
Builder
*
GetTableBuilder
(
Header
*
header
WritableFontData
*
data
)
;
void
BuildTablesFromBuilders
(
Font
*
font
TableBuilderMap
*
builder_map
TableMap
*
tables
)
;
static
void
InterRelateBuilders
(
TableBuilderMap
*
builder_map
)
;
void
ReadHeader
(
FontInputStream
*
is
HeaderOffsetSortedSet
*
records
)
;
void
ReadHeader
(
ReadableFontData
*
fd
int32_t
offset
HeaderOffsetSortedSet
*
records
)
;
void
LoadTableData
(
HeaderOffsetSortedSet
*
headers
FontInputStream
*
is
DataBlockMap
*
table_data
)
;
void
LoadTableData
(
HeaderOffsetSortedSet
*
headers
WritableFontData
*
fd
DataBlockMap
*
table_data
)
;
TableBuilderMap
table_builders_
;
FontFactory
*
factory_
;
int32_t
sfnt_version_
;
int32_t
num_tables_
;
int32_t
search_range_
;
int32_t
entry_selector_
;
int32_t
range_shift_
;
DataBlockMap
data_blocks_
;
std
:
:
vector
<
uint8_t
>
digest_
;
}
;
virtual
~
Font
(
)
;
int32_t
sfnt_version
(
)
{
return
sfnt_version_
;
}
std
:
:
vector
<
uint8_t
>
*
digest
(
)
{
return
&
digest_
;
}
int64_t
checksum
(
)
{
return
checksum_
;
}
int32_t
num_tables
(
)
{
return
(
int32_t
)
tables_
.
size
(
)
;
}
bool
HasTable
(
int32_t
tag
)
const
;
Table
*
GetTable
(
int32_t
tag
)
;
const
TableMap
*
GetTableMap
(
)
;
void
Serialize
(
OutputStream
*
os
std
:
:
vector
<
int32_t
>
*
table_ordering
)
;
private
:
struct
Offset
{
enum
{
kSfntVersion
=
0
kNumTables
=
4
kSearchRange
=
6
kEntrySelector
=
8
kRangeShift
=
10
kTableRecordBegin
=
12
kSfntHeaderSize
=
12
kTableTag
=
0
kTableCheckSum
=
4
kTableOffset
=
8
kTableLength
=
12
kTableRecordSize
=
16
}
;
}
;
Font
(
int32_t
sfnt_version
std
:
:
vector
<
uint8_t
>
*
digest
)
;
void
BuildTableHeadersForSerialization
(
std
:
:
vector
<
int32_t
>
*
table_ordering
TableHeaderList
*
table_headers
)
;
void
SerializeHeader
(
FontOutputStream
*
fos
TableHeaderList
*
table_headers
)
;
void
SerializeTables
(
FontOutputStream
*
fos
TableHeaderList
*
table_headers
)
;
void
GenerateTableOrdering
(
std
:
:
vector
<
int32_t
>
*
default_table_ordering
std
:
:
vector
<
int32_t
>
*
table_ordering
)
;
void
DefaultTableOrdering
(
std
:
:
vector
<
int32_t
>
*
default_table_ordering
)
;
int32_t
sfnt_version_
;
std
:
:
vector
<
uint8_t
>
digest_
;
int64_t
checksum_
;
TableMap
tables_
;
}
;
typedef
Ptr
<
Font
>
FontPtr
;
typedef
std
:
:
vector
<
FontPtr
>
FontArray
;
typedef
Ptr
<
Font
:
:
Builder
>
FontBuilderPtr
;
typedef
std
:
:
vector
<
FontBuilderPtr
>
FontBuilderArray
;
}
#
endif
