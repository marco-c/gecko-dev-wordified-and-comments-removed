#
ifndef
SFNTLY_CPP_SRC_SFNTLY_DATA_FONT_DATA_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_DATA_FONT_DATA_H_
#
include
<
limits
.
h
>
#
include
"
sfntly
/
data
/
byte_array
.
h
"
#
include
"
sfntly
/
port
/
refcount
.
h
"
#
include
"
sfntly
/
port
/
type
.
h
"
namespace
sfntly
{
struct
DataSize
{
enum
{
kBYTE
=
1
kCHAR
=
1
kUSHORT
=
2
kSHORT
=
2
kUINT24
=
3
kULONG
=
4
kLONG
=
4
kFixed
=
4
kFUNIT
=
4
kFWORD
=
2
kUFWORD
=
2
kF2DOT14
=
2
kLONGDATETIME
=
8
kTag
=
4
kGlyphID
=
2
kOffset
=
2
}
;
}
;
class
FontData
:
virtual
public
RefCount
{
public
:
virtual
int32_t
Size
(
)
const
;
virtual
void
Bound
(
int32_t
offset
int32_t
length
)
;
virtual
CALLER_ATTACH
FontData
*
Slice
(
int32_t
offset
int32_t
length
)
=
0
;
virtual
CALLER_ATTACH
FontData
*
Slice
(
int32_t
offset
)
=
0
;
virtual
int32_t
Length
(
)
const
;
protected
:
explicit
FontData
(
ByteArray
*
ba
)
;
FontData
(
FontData
*
data
int32_t
offset
int32_t
length
)
;
FontData
(
FontData
*
data
int32_t
offset
)
;
virtual
~
FontData
(
)
;
void
Init
(
ByteArray
*
ba
)
;
int32_t
BoundOffset
(
int32_t
offset
)
const
;
int32_t
BoundLength
(
int32_t
offset
int32_t
length
)
const
;
static
const
int32_t
GROWABLE_SIZE
=
INT_MAX
;
ByteArrayPtr
array_
;
private
:
int32_t
bound_offset_
;
int32_t
bound_length_
;
}
;
typedef
Ptr
<
FontData
>
FontDataPtr
;
}
#
endif
