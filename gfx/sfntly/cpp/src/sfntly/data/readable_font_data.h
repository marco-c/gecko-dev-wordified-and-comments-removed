#
ifndef
SFNTLY_CPP_SRC_SFNTLY_DATA_READABLE_FONT_DATA_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_DATA_READABLE_FONT_DATA_H_
#
include
"
sfntly
/
data
/
font_data
.
h
"
#
include
"
sfntly
/
port
/
lock
.
h
"
namespace
sfntly
{
class
OutputStream
;
class
WritableFontData
;
class
ReadableFontData
:
public
FontData
public
RefCounted
<
ReadableFontData
>
{
public
:
explicit
ReadableFontData
(
ByteArray
*
array
)
;
virtual
~
ReadableFontData
(
)
;
static
const
int32_t
kInvalidByte
=
128
;
static
const
int32_t
kInvalidShort
=
32768
;
static
const
int32_t
kInvalidLong
=
0xffffffff
;
static
const
int32_t
kInvalidUnsigned
=
-
1
;
static
const
int64_t
kInvalidLongDateTime
=
-
1
;
static
CALLER_ATTACH
ReadableFontData
*
CreateReadableFontData
(
std
:
:
vector
<
uint8_t
>
*
b
)
;
int64_t
Checksum
(
)
;
void
SetCheckSumRanges
(
const
std
:
:
vector
<
int32_t
>
&
ranges
)
;
virtual
int32_t
ReadUByte
(
int32_t
index
)
;
virtual
int32_t
ReadByte
(
int32_t
index
)
;
virtual
int32_t
ReadBytes
(
int32_t
index
uint8_t
*
b
int32_t
offset
int32_t
length
)
;
virtual
int32_t
ReadChar
(
int32_t
index
)
;
virtual
int32_t
ReadUShort
(
int32_t
index
)
;
virtual
int32_t
ReadShort
(
int32_t
index
)
;
virtual
int32_t
ReadUInt24
(
int32_t
index
)
;
virtual
int64_t
ReadULong
(
int32_t
index
)
;
virtual
int32_t
ReadULongAsInt
(
int32_t
index
)
;
virtual
int64_t
ReadULongLE
(
int32_t
index
)
;
virtual
int32_t
ReadLong
(
int32_t
index
)
;
virtual
int32_t
ReadFixed
(
int32_t
index
)
;
virtual
int64_t
ReadDateTimeAsLong
(
int32_t
index
)
;
virtual
int32_t
ReadFWord
(
int32_t
index
)
;
virtual
int32_t
ReadFUFWord
(
int32_t
index
)
;
virtual
int32_t
CopyTo
(
OutputStream
*
os
)
;
virtual
int32_t
CopyTo
(
WritableFontData
*
wfd
)
;
virtual
int32_t
CopyTo
(
ByteArray
*
ba
)
;
int32_t
SearchUShort
(
int32_t
start_index
int32_t
start_offset
int32_t
end_index
int32_t
end_offset
int32_t
length
int32_t
key
)
;
int32_t
SearchUShort
(
int32_t
start_index
int32_t
start_offset
int32_t
length
int32_t
key
)
;
int32_t
SearchULong
(
int32_t
start_index
int32_t
start_offset
int32_t
end_index
int32_t
end_offset
int32_t
length
int32_t
key
)
;
virtual
CALLER_ATTACH
FontData
*
Slice
(
int32_t
offset
int32_t
length
)
;
virtual
CALLER_ATTACH
FontData
*
Slice
(
int32_t
offset
)
;
protected
:
ReadableFontData
(
ReadableFontData
*
data
int32_t
offset
)
;
ReadableFontData
(
ReadableFontData
*
data
int32_t
offset
int32_t
length
)
;
private
:
void
ComputeChecksum
(
)
;
int64_t
ComputeCheckSum
(
int32_t
low_bound
int32_t
high_bound
)
;
Lock
checksum_lock_
;
bool
checksum_set_
;
int64_t
checksum_
;
std
:
:
vector
<
int32_t
>
checksum_range_
;
}
;
typedef
Ptr
<
ReadableFontData
>
ReadableFontDataPtr
;
}
#
endif
