#
ifndef
SFNTLY_CPP_SRC_SFNTLY_DATA_WRITABLE_FONT_DATA_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_DATA_WRITABLE_FONT_DATA_H_
#
include
"
sfntly
/
data
/
readable_font_data
.
h
"
namespace
sfntly
{
class
WritableFontData
:
public
ReadableFontData
{
public
:
explicit
WritableFontData
(
ByteArray
*
ba
)
;
virtual
~
WritableFontData
(
)
;
static
CALLER_ATTACH
WritableFontData
*
CreateWritableFontData
(
int32_t
length
)
;
static
CALLER_ATTACH
WritableFontData
*
CreateWritableFontData
(
std
:
:
vector
<
uint8_t
>
*
b
)
;
virtual
int32_t
WriteByte
(
int32_t
index
uint8_t
b
)
;
virtual
int32_t
WriteBytes
(
int32_t
index
uint8_t
*
b
int32_t
offset
int32_t
length
)
;
virtual
int32_t
WriteBytes
(
int32_t
index
std
:
:
vector
<
uint8_t
>
*
b
)
;
virtual
int32_t
WriteBytesPad
(
int32_t
index
std
:
:
vector
<
uint8_t
>
*
b
int32_t
offset
int32_t
length
uint8_t
pad
)
;
virtual
int32_t
WritePadding
(
int32_t
index
int32_t
count
)
;
virtual
int32_t
WritePadding
(
int32_t
index
int32_t
count
uint8_t
pad
)
;
virtual
int32_t
WriteChar
(
int32_t
index
uint8_t
c
)
;
virtual
int32_t
WriteUShort
(
int32_t
index
int32_t
us
)
;
virtual
int32_t
WriteUShortLE
(
int32_t
index
int32_t
us
)
;
virtual
int32_t
WriteShort
(
int32_t
index
int32_t
s
)
;
virtual
int32_t
WriteUInt24
(
int32_t
index
int32_t
ui
)
;
virtual
int32_t
WriteULong
(
int32_t
index
int64_t
ul
)
;
virtual
int32_t
WriteULongLE
(
int32_t
index
int64_t
ul
)
;
virtual
int32_t
WriteLong
(
int32_t
index
int64_t
l
)
;
virtual
int32_t
WriteFixed
(
int32_t
index
int32_t
f
)
;
virtual
int32_t
WriteDateTime
(
int32_t
index
int64_t
date
)
;
virtual
void
CopyFrom
(
InputStream
*
is
int32_t
length
)
;
virtual
void
CopyFrom
(
InputStream
*
is
)
;
virtual
CALLER_ATTACH
FontData
*
Slice
(
int32_t
offset
int32_t
length
)
;
virtual
CALLER_ATTACH
FontData
*
Slice
(
int32_t
offset
)
;
private
:
WritableFontData
(
WritableFontData
*
data
int32_t
offset
)
;
WritableFontData
(
WritableFontData
*
data
int32_t
offset
int32_t
length
)
;
}
;
typedef
Ptr
<
WritableFontData
>
WritableFontDataPtr
;
}
#
endif
