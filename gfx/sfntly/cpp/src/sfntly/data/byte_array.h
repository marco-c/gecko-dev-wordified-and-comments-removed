#
ifndef
SFNTLY_CPP_SRC_SFNTLY_DATA_BYTE_ARRAY_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_DATA_BYTE_ARRAY_H_
#
include
"
sfntly
/
port
/
refcount
.
h
"
#
include
"
sfntly
/
port
/
type
.
h
"
#
include
"
sfntly
/
port
/
input_stream
.
h
"
#
include
"
sfntly
/
port
/
output_stream
.
h
"
namespace
sfntly
{
class
ByteArray
:
virtual
public
RefCount
{
public
:
virtual
~
ByteArray
(
)
;
int32_t
Length
(
)
;
int32_t
Size
(
)
;
bool
growable
(
)
{
return
growable_
;
}
int32_t
SetFilledLength
(
int32_t
filled_length
)
;
virtual
int32_t
Get
(
int32_t
index
)
;
virtual
int32_t
Get
(
int32_t
index
ByteVector
*
b
)
;
virtual
int32_t
Get
(
int32_t
index
byte_t
*
b
int32_t
offset
int32_t
length
)
;
virtual
void
Put
(
int32_t
index
byte_t
b
)
;
virtual
int32_t
Put
(
int32_t
index
ByteVector
*
b
)
;
virtual
int32_t
Put
(
int32_t
index
byte_t
*
b
int32_t
offset
int32_t
length
)
;
virtual
int32_t
CopyTo
(
ByteArray
*
array
)
;
virtual
int32_t
CopyTo
(
ByteArray
*
array
int32_t
offset
int32_t
length
)
;
virtual
int32_t
CopyTo
(
int32_t
dst_offset
ByteArray
*
array
int32_t
src_offset
int32_t
length
)
;
virtual
int32_t
CopyTo
(
OutputStream
*
os
)
;
virtual
int32_t
CopyTo
(
OutputStream
*
os
int32_t
offset
int32_t
length
)
;
virtual
bool
CopyFrom
(
InputStream
*
is
int32_t
length
)
;
virtual
bool
CopyFrom
(
InputStream
*
is
)
;
protected
:
ByteArray
(
int32_t
filled_length
int32_t
storage_length
bool
growable
)
;
ByteArray
(
int32_t
filled_length
int32_t
storage_length
)
;
void
Init
(
int32_t
filled_length
int32_t
storage_length
bool
growable
)
;
virtual
void
InternalPut
(
int32_t
index
byte_t
b
)
=
0
;
virtual
int32_t
InternalPut
(
int32_t
index
byte_t
*
b
int32_t
offset
int32_t
length
)
=
0
;
virtual
byte_t
InternalGet
(
int32_t
index
)
=
0
;
virtual
int32_t
InternalGet
(
int32_t
index
byte_t
*
b
int32_t
offset
int32_t
length
)
=
0
;
virtual
void
Close
(
)
=
0
;
virtual
byte_t
*
Begin
(
)
=
0
;
static
const
int32_t
COPY_BUFFER_SIZE
;
private
:
int32_t
filled_length_
;
int32_t
storage_length_
;
bool
growable_
;
}
;
typedef
Ptr
<
ByteArray
>
ByteArrayPtr
;
}
#
endif
