#
include
"
sfntly
/
data
/
font_data
.
h
"
#
include
<
algorithm
>
#
include
<
functional
>
#
include
<
limits
>
#
include
"
sfntly
/
port
/
logging
.
h
"
namespace
sfntly
{
int32_t
FontData
:
:
Size
(
)
const
{
return
std
:
:
min
<
int32_t
>
(
array_
-
>
Size
(
)
-
bound_offset_
bound_length_
)
;
}
void
FontData
:
:
Bound
(
int32_t
offset
int32_t
length
)
{
CHECK
(
offset
>
=
0
)
;
CHECK
(
length
>
=
0
)
;
CHECK
(
bound_offset_
<
=
std
:
:
numeric_limits
<
int32_t
>
:
:
max
(
)
-
offset
)
;
const
int32_t
new_offset
=
bound_offset_
+
offset
;
if
(
length
=
=
GROWABLE_SIZE
)
{
CHECK
(
new_offset
<
=
array_
-
>
Size
(
)
)
;
}
else
{
CHECK
(
new_offset
<
=
array_
-
>
Size
(
)
-
length
)
;
}
bound_offset_
=
new_offset
;
bound_length_
=
length
;
}
int32_t
FontData
:
:
Length
(
)
const
{
return
std
:
:
min
<
int32_t
>
(
array_
-
>
Length
(
)
-
bound_offset_
bound_length_
)
;
}
FontData
:
:
FontData
(
ByteArray
*
ba
)
{
Init
(
ba
)
;
}
FontData
:
:
FontData
(
FontData
*
data
int32_t
offset
int32_t
length
)
{
Init
(
data
-
>
array_
)
;
Bound
(
data
-
>
bound_offset_
+
offset
length
)
;
}
FontData
:
:
FontData
(
FontData
*
data
int32_t
offset
)
{
Init
(
data
-
>
array_
)
;
Bound
(
data
-
>
bound_offset_
+
offset
(
data
-
>
bound_length_
=
=
GROWABLE_SIZE
)
?
GROWABLE_SIZE
:
data
-
>
bound_length_
-
offset
)
;
}
FontData
:
:
~
FontData
(
)
{
}
void
FontData
:
:
Init
(
ByteArray
*
ba
)
{
array_
=
ba
;
bound_offset_
=
0
;
bound_length_
=
GROWABLE_SIZE
;
}
int32_t
FontData
:
:
BoundOffset
(
int32_t
offset
)
{
return
offset
+
bound_offset_
;
}
int32_t
FontData
:
:
BoundLength
(
int32_t
offset
int32_t
length
)
{
return
std
:
:
min
<
int32_t
>
(
length
bound_length_
-
offset
)
;
}
}
