#
ifndef
SFNTLY_CPP_SRC_SFNTLY_DATA_MEMORY_BYTE_ARRAY_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_DATA_MEMORY_BYTE_ARRAY_H_
#
include
"
sfntly
/
data
/
byte_array
.
h
"
namespace
sfntly
{
class
MemoryByteArray
:
public
ByteArray
public
RefCounted
<
MemoryByteArray
>
{
public
:
explicit
MemoryByteArray
(
int32_t
length
)
;
MemoryByteArray
(
uint8_t
*
b
int32_t
filled_length
)
;
virtual
~
MemoryByteArray
(
)
;
virtual
int32_t
CopyTo
(
OutputStream
*
os
int32_t
offset
int32_t
length
)
;
virtual
int32_t
CopyTo
(
ByteArray
*
array
)
{
return
ByteArray
:
:
CopyTo
(
array
)
;
}
virtual
int32_t
CopyTo
(
ByteArray
*
array
int32_t
offset
int32_t
length
)
{
return
ByteArray
:
:
CopyTo
(
array
offset
length
)
;
}
virtual
int32_t
CopyTo
(
int32_t
dst_offset
ByteArray
*
array
int32_t
src_offset
int32_t
length
)
{
return
ByteArray
:
:
CopyTo
(
dst_offset
array
src_offset
length
)
;
}
virtual
int32_t
CopyTo
(
OutputStream
*
os
)
{
return
ByteArray
:
:
CopyTo
(
os
)
;
}
protected
:
virtual
void
InternalPut
(
int32_t
index
uint8_t
b
)
;
virtual
int32_t
InternalPut
(
int32_t
index
uint8_t
*
b
int32_t
offset
int32_t
length
)
;
virtual
uint8_t
InternalGet
(
int32_t
index
)
;
virtual
int32_t
InternalGet
(
int32_t
index
uint8_t
*
b
int32_t
offset
int32_t
length
)
;
virtual
void
Close
(
)
;
virtual
uint8_t
*
Begin
(
)
;
private
:
void
Init
(
)
;
uint8_t
*
b_
;
bool
allocated_
;
}
;
}
#
endif
