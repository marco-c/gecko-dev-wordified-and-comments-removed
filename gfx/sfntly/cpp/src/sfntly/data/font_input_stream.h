#
ifndef
SFNTLY_CPP_SRC_SFNTLY_DATA_FONT_INPUT_STREAM_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_DATA_FONT_INPUT_STREAM_H_
#
include
"
sfntly
/
port
/
type
.
h
"
#
include
"
sfntly
/
port
/
input_stream
.
h
"
namespace
sfntly
{
class
FontInputStream
:
public
InputStream
{
public
:
explicit
FontInputStream
(
InputStream
*
is
)
;
FontInputStream
(
InputStream
*
is
size_t
length
)
;
virtual
~
FontInputStream
(
)
;
virtual
int32_t
Available
(
)
;
virtual
void
Close
(
)
;
virtual
void
Mark
(
int32_t
readlimit
)
;
virtual
bool
MarkSupported
(
)
;
virtual
void
Reset
(
)
;
virtual
int32_t
Read
(
)
;
virtual
int32_t
Read
(
ByteVector
*
buffer
)
;
virtual
int32_t
Read
(
ByteVector
*
buffer
int32_t
offset
int32_t
length
)
;
virtual
int64_t
position
(
)
{
return
position_
;
}
virtual
int32_t
ReadChar
(
)
;
virtual
int32_t
ReadUShort
(
)
;
virtual
int32_t
ReadShort
(
)
;
virtual
int32_t
ReadUInt24
(
)
;
virtual
int64_t
ReadULong
(
)
;
virtual
int32_t
ReadULongAsInt
(
)
;
virtual
int32_t
ReadLong
(
)
;
virtual
int32_t
ReadFixed
(
)
;
virtual
int64_t
ReadDateTimeAsLong
(
)
;
virtual
int64_t
Skip
(
int64_t
n
)
;
private
:
InputStream
*
stream_
;
int64_t
position_
;
int64_t
length_
;
bool
bounded_
;
}
;
}
#
endif
