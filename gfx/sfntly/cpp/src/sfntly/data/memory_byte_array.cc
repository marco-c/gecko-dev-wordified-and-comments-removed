#
include
"
sfntly
/
data
/
memory_byte_array
.
h
"
#
include
<
string
.
h
>
namespace
sfntly
{
MemoryByteArray
:
:
MemoryByteArray
(
int32_t
length
)
:
ByteArray
(
0
length
)
b_
(
NULL
)
allocated_
(
true
)
{
}
MemoryByteArray
:
:
MemoryByteArray
(
byte_t
*
b
int32_t
filled_length
)
:
ByteArray
(
filled_length
filled_length
)
b_
(
b
)
allocated_
(
false
)
{
assert
(
b
)
;
}
MemoryByteArray
:
:
~
MemoryByteArray
(
)
{
Close
(
)
;
}
int32_t
MemoryByteArray
:
:
CopyTo
(
OutputStream
*
os
int32_t
offset
int32_t
length
)
{
assert
(
os
)
;
os
-
>
Write
(
b_
offset
length
)
;
return
length
;
}
void
MemoryByteArray
:
:
Init
(
)
{
if
(
allocated_
&
&
b_
=
=
NULL
)
{
b_
=
new
byte_t
[
Size
(
)
]
;
memset
(
b_
0
Size
(
)
)
;
}
}
void
MemoryByteArray
:
:
InternalPut
(
int32_t
index
byte_t
b
)
{
Init
(
)
;
b_
[
index
]
=
b
;
}
int32_t
MemoryByteArray
:
:
InternalPut
(
int32_t
index
byte_t
*
b
int32_t
offset
int32_t
length
)
{
assert
(
b
)
;
Init
(
)
;
memcpy
(
b_
+
index
b
+
offset
length
)
;
return
length
;
}
byte_t
MemoryByteArray
:
:
InternalGet
(
int32_t
index
)
{
Init
(
)
;
return
b_
[
index
]
;
}
int32_t
MemoryByteArray
:
:
InternalGet
(
int32_t
index
byte_t
*
b
int32_t
offset
int32_t
length
)
{
assert
(
b
)
;
Init
(
)
;
memcpy
(
b
+
offset
b_
+
index
length
)
;
return
length
;
}
void
MemoryByteArray
:
:
Close
(
)
{
if
(
allocated_
&
&
b_
)
{
delete
[
]
b_
;
}
b_
=
NULL
;
}
byte_t
*
MemoryByteArray
:
:
Begin
(
)
{
Init
(
)
;
return
b_
;
}
}
