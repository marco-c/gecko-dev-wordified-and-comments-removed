#
ifndef
SFNTLY_CPP_SRC_SFNTLY_PORT_JAVA_ITERATOR_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_PORT_JAVA_ITERATOR_H_
#
include
"
sfntly
/
port
/
refcount
.
h
"
namespace
sfntly
{
template
<
typename
ReturnType
typename
ContainerBase
>
class
Iterator
:
public
virtual
RefCount
{
public
:
virtual
~
Iterator
(
)
{
}
virtual
ContainerBase
*
container_base
(
)
=
0
;
protected
:
Iterator
(
)
{
}
NO_COPY_AND_ASSIGN
(
Iterator
)
;
}
;
template
<
typename
ReturnType
typename
Container
typename
ContainerBase
=
Container
>
class
PODIterator
:
public
Iterator
<
ReturnType
ContainerBase
>
public
RefCounted
<
PODIterator
<
ReturnType
Container
>
>
{
public
:
explicit
PODIterator
(
Container
*
container
)
:
container_
(
container
)
{
}
virtual
~
PODIterator
(
)
{
}
virtual
ContainerBase
*
container_base
(
)
{
return
static_cast
<
ContainerBase
*
>
(
container_
)
;
}
virtual
bool
HasNext
(
)
=
0
;
virtual
ReturnType
Next
(
)
=
0
;
virtual
void
Remove
(
)
{
#
if
!
defined
(
SFNTLY_NO_EXCEPTION
)
throw
UnsupportedOperationException
(
)
;
#
endif
}
protected
:
Container
*
container
(
)
{
return
container_
;
}
private
:
Container
*
container_
;
}
;
template
<
typename
ReturnType
typename
Container
typename
ContainerBase
=
Container
>
class
RefIterator
:
public
Iterator
<
ReturnType
ContainerBase
>
public
RefCounted
<
RefIterator
<
ReturnType
Container
>
>
{
public
:
explicit
RefIterator
(
Container
*
container
)
:
container_
(
container
)
{
}
virtual
~
RefIterator
(
)
{
}
virtual
ContainerBase
*
container_base
(
)
{
return
static_cast
<
ContainerBase
*
>
(
container_
)
;
}
virtual
bool
HasNext
(
)
=
0
;
CALLER_ATTACH
virtual
ReturnType
*
Next
(
)
=
0
;
virtual
void
Remove
(
)
{
#
if
!
defined
(
SFNTLY_NO_EXCEPTION
)
throw
UnsupportedOperationException
(
)
;
#
endif
}
protected
:
Container
*
container
(
)
{
return
container_
;
}
private
:
Container
*
container_
;
}
;
}
#
endif
