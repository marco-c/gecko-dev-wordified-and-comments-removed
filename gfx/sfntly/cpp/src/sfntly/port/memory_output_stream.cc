#
include
"
sfntly
/
port
/
memory_output_stream
.
h
"
namespace
sfntly
{
MemoryOutputStream
:
:
MemoryOutputStream
(
)
{
}
MemoryOutputStream
:
:
~
MemoryOutputStream
(
)
{
}
void
MemoryOutputStream
:
:
Write
(
std
:
:
vector
<
uint8_t
>
*
buffer
)
{
store_
.
insert
(
store_
.
end
(
)
buffer
-
>
begin
(
)
buffer
-
>
end
(
)
)
;
}
void
MemoryOutputStream
:
:
Write
(
std
:
:
vector
<
uint8_t
>
*
buffer
int32_t
offset
int32_t
length
)
{
assert
(
buffer
)
;
if
(
offset
>
=
0
&
&
length
>
0
)
{
store_
.
insert
(
store_
.
end
(
)
buffer
-
>
begin
(
)
+
offset
buffer
-
>
begin
(
)
+
offset
+
length
)
;
}
else
{
#
if
!
defined
(
SFNTLY_NO_EXCEPTION
)
throw
IndexOutOfBoundException
(
)
;
#
endif
}
}
void
MemoryOutputStream
:
:
Write
(
uint8_t
*
buffer
int32_t
offset
int32_t
length
)
{
assert
(
buffer
)
;
if
(
offset
>
=
0
&
&
length
>
0
)
{
store_
.
insert
(
store_
.
end
(
)
buffer
+
offset
buffer
+
offset
+
length
)
;
}
else
{
#
if
!
defined
(
SFNTLY_NO_EXCEPTION
)
throw
IndexOutOfBoundException
(
)
;
#
endif
}
}
void
MemoryOutputStream
:
:
Write
(
uint8_t
b
)
{
store_
.
push_back
(
b
)
;
}
uint8_t
*
MemoryOutputStream
:
:
Get
(
)
{
if
(
store_
.
empty
(
)
)
{
return
NULL
;
}
return
&
(
store_
[
0
]
)
;
}
size_t
MemoryOutputStream
:
:
Size
(
)
{
return
store_
.
size
(
)
;
}
}
