#
ifndef
SFNTLY_CPP_SRC_SFNTLY_PORT_ATOMIC_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_PORT_ATOMIC_H_
#
if
defined
(
WIN32
)
#
include
<
windows
.
h
>
static
inline
size_t
AtomicIncrement
(
size_t
*
address
)
{
#
if
defined
(
_WIN64
)
return
InterlockedIncrement64
(
reinterpret_cast
<
LONGLONG
*
>
(
address
)
)
;
#
else
return
InterlockedIncrement
(
reinterpret_cast
<
LONG
*
>
(
address
)
)
;
#
endif
}
static
inline
size_t
AtomicDecrement
(
size_t
*
address
)
{
#
if
defined
(
_WIN64
)
return
InterlockedDecrement64
(
reinterpret_cast
<
LONGLONG
*
>
(
address
)
)
;
#
else
return
InterlockedDecrement
(
reinterpret_cast
<
LONG
*
>
(
address
)
)
;
#
endif
}
#
elif
defined
(
__APPLE__
)
#
include
<
libkern
/
OSAtomic
.
h
>
static
inline
size_t
AtomicIncrement
(
size_t
*
address
)
{
return
OSAtomicIncrement32Barrier
(
reinterpret_cast
<
int32_t
*
>
(
address
)
)
;
}
static
inline
size_t
AtomicDecrement
(
size_t
*
address
)
{
return
OSAtomicDecrement32Barrier
(
reinterpret_cast
<
int32_t
*
>
(
address
)
)
;
}
#
else
#
include
<
stddef
.
h
>
static
inline
size_t
AtomicIncrement
(
size_t
*
address
)
{
return
__sync_add_and_fetch
(
address
1
)
;
}
static
inline
size_t
AtomicDecrement
(
size_t
*
address
)
{
return
__sync_sub_and_fetch
(
address
1
)
;
}
#
endif
#
endif
