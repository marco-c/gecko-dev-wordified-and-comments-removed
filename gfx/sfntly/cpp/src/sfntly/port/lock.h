#
ifndef
SFNTLY_CPP_SRC_SFNTLY_PORT_LOCK_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_PORT_LOCK_H_
#
if
defined
(
WIN32
)
#
include
<
windows
.
h
>
#
else
#
include
<
pthread
.
h
>
#
include
<
errno
.
h
>
#
endif
#
include
"
sfntly
/
port
/
type
.
h
"
namespace
sfntly
{
#
if
defined
(
WIN32
)
typedef
CRITICAL_SECTION
OSLockType
;
#
else
typedef
pthread_mutex_t
OSLockType
;
#
endif
class
Lock
{
public
:
Lock
(
)
;
~
Lock
(
)
;
bool
Try
(
)
;
void
Acquire
(
)
;
void
Unlock
(
)
;
private
:
OSLockType
os_lock_
;
NO_COPY_AND_ASSIGN
(
Lock
)
;
}
;
class
AutoLock
{
public
:
explicit
AutoLock
(
Lock
&
lock
)
:
lock_
(
lock
)
{
lock_
.
Acquire
(
)
;
}
~
AutoLock
(
)
{
lock_
.
Unlock
(
)
;
}
private
:
Lock
&
lock_
;
NO_COPY_AND_ASSIGN
(
AutoLock
)
;
}
;
}
#
endif
