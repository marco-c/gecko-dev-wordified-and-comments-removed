#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_HEADER_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_HEADER_H_
#
include
"
sfntly
/
port
/
refcount
.
h
"
namespace
sfntly
{
class
Header
:
public
RefCounted
<
Header
>
{
public
:
explicit
Header
(
int32_t
tag
)
;
Header
(
int32_t
tag
int32_t
length
)
;
Header
(
int32_t
tag
int64_t
checksum
int32_t
offset
int32_t
length
)
;
virtual
~
Header
(
)
;
int32_t
tag
(
)
const
{
return
tag_
;
}
int32_t
offset
(
)
const
{
return
offset_
;
}
bool
offset_valid
(
)
const
{
return
offset_valid_
;
}
int32_t
length
(
)
const
{
return
length_
;
}
bool
length_valid
(
)
const
{
return
length_valid_
;
}
int64_t
checksum
(
)
const
{
return
checksum_
;
}
bool
checksum_valid
(
)
const
{
return
checksum_valid_
;
}
private
:
const
int32_t
tag_
;
const
int32_t
offset_
;
const
bool
offset_valid_
;
const
int32_t
length_
;
const
bool
length_valid_
;
const
int64_t
checksum_
;
const
bool
checksum_valid_
;
friend
class
HeaderComparatorByOffset
;
friend
class
HeaderComparatorByTag
;
}
;
typedef
Ptr
<
Header
>
HeaderPtr
;
class
HeaderComparator
{
public
:
virtual
~
HeaderComparator
(
)
{
}
virtual
bool
operator
(
)
(
const
HeaderPtr
h1
const
HeaderPtr
h2
)
const
=
0
;
}
;
class
HeaderComparatorByOffset
:
public
HeaderComparator
{
public
:
virtual
~
HeaderComparatorByOffset
(
)
{
}
virtual
bool
operator
(
)
(
const
HeaderPtr
h1
const
HeaderPtr
h2
)
const
;
}
;
class
HeaderComparatorByTag
:
public
HeaderComparator
{
public
:
virtual
~
HeaderComparatorByTag
(
)
{
}
virtual
bool
operator
(
)
(
const
HeaderPtr
h1
const
HeaderPtr
h2
)
const
;
}
;
typedef
std
:
:
set
<
HeaderPtr
HeaderComparatorByOffset
>
HeaderOffsetSortedSet
;
typedef
std
:
:
set
<
HeaderPtr
HeaderComparatorByTag
>
HeaderTagSortedSet
;
}
#
endif
