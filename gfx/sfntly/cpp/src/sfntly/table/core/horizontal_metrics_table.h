#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_CORE_HORIZONTAL_METRICS_TABLE_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_CORE_HORIZONTAL_METRICS_TABLE_H_
#
include
"
sfntly
/
table
/
table
.
h
"
#
include
"
sfntly
/
table
/
table_based_table_builder
.
h
"
namespace
sfntly
{
class
HorizontalMetricsTable
:
public
Table
public
RefCounted
<
HorizontalMetricsTable
>
{
public
:
class
Builder
:
public
TableBasedTableBuilder
public
RefCounted
<
Builder
>
{
public
:
Builder
(
Header
*
header
WritableFontData
*
data
)
;
Builder
(
Header
*
header
ReadableFontData
*
data
)
;
virtual
~
Builder
(
)
;
virtual
CALLER_ATTACH
FontDataTable
*
SubBuildTable
(
ReadableFontData
*
data
)
;
static
CALLER_ATTACH
Builder
*
CreateBuilder
(
Header
*
header
WritableFontData
*
data
)
;
void
SetNumberOfHMetrics
(
int32_t
num_hmetrics
)
;
void
SetNumGlyphs
(
int32_t
num_glyphs
)
;
private
:
int32_t
num_hmetrics_
;
int32_t
num_glyphs_
;
}
;
virtual
~
HorizontalMetricsTable
(
)
;
int32_t
NumberOfHMetrics
(
)
;
int32_t
NumberOfLSBs
(
)
;
int32_t
HMetricAdvanceWidth
(
int32_t
entry
)
;
int32_t
HMetricLSB
(
int32_t
entry
)
;
int32_t
LsbTableEntry
(
int32_t
entry
)
;
int32_t
AdvanceWidth
(
int32_t
glyph_id
)
;
int32_t
LeftSideBearing
(
int32_t
glyph_id
)
;
private
:
struct
Offset
{
enum
{
kHMetricsStart
=
0
kHMetricsSize
=
4
kHMetricsAdvanceWidth
=
0
kHMetricsLeftSideBearing
=
2
kLeftSideBearingSize
=
2
}
;
}
;
HorizontalMetricsTable
(
Header
*
header
ReadableFontData
*
data
int32_t
num_hmetrics
int32_t
num_glyphs
)
;
int32_t
num_hmetrics_
;
int32_t
num_glyphs_
;
}
;
typedef
Ptr
<
HorizontalMetricsTable
>
HorizontalMetricsTablePtr
;
typedef
Ptr
<
HorizontalMetricsTable
:
:
Builder
>
HorizontalMetricsTableBuilderPtr
;
}
#
endif
