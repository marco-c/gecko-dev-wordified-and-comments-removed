#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_CORE_FONT_HEADER_TABLE_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_CORE_FONT_HEADER_TABLE_H_
#
include
"
sfntly
/
table
/
table
.
h
"
#
include
"
sfntly
/
table
/
table_based_table_builder
.
h
"
namespace
sfntly
{
struct
IndexToLocFormat
{
enum
{
kInvalidOffset
=
-
1
kShortOffset
=
0
kLongOffset
=
1
}
;
}
;
struct
FontDirectionHint
{
enum
{
kFullyMixed
=
0
kOnlyStrongLTR
=
1
kStrongLTRAndNeutral
=
2
kOnlyStrongRTL
=
-
1
kStrongRTLAndNeutral
=
-
2
}
;
}
;
class
FontHeaderTable
:
public
Table
public
RefCounted
<
FontHeaderTable
>
{
public
:
class
Builder
:
public
TableBasedTableBuilder
public
RefCounted
<
Builder
>
{
public
:
Builder
(
Header
*
header
WritableFontData
*
data
)
;
Builder
(
Header
*
header
ReadableFontData
*
data
)
;
virtual
~
Builder
(
)
;
virtual
CALLER_ATTACH
FontDataTable
*
SubBuildTable
(
ReadableFontData
*
data
)
;
virtual
int32_t
TableVersion
(
)
;
virtual
void
SetTableVersion
(
int32_t
version
)
;
virtual
int32_t
FontRevision
(
)
;
virtual
void
SetFontRevision
(
int32_t
revision
)
;
virtual
int64_t
ChecksumAdjustment
(
)
;
virtual
void
SetChecksumAdjustment
(
int64_t
adjustment
)
;
virtual
int64_t
MagicNumber
(
)
;
virtual
void
SetMagicNumber
(
int64_t
magic_number
)
;
virtual
int32_t
FlagsAsInt
(
)
;
virtual
void
SetFlagsAsInt
(
int32_t
flags
)
;
virtual
int32_t
UnitsPerEm
(
)
;
virtual
void
SetUnitsPerEm
(
int32_t
units
)
;
virtual
int64_t
Created
(
)
;
virtual
void
SetCreated
(
int64_t
date
)
;
virtual
int64_t
Modified
(
)
;
virtual
void
SetModified
(
int64_t
date
)
;
virtual
int32_t
XMin
(
)
;
virtual
void
SetXMin
(
int32_t
xmin
)
;
virtual
int32_t
YMin
(
)
;
virtual
void
SetYMin
(
int32_t
ymin
)
;
virtual
int32_t
XMax
(
)
;
virtual
void
SetXMax
(
int32_t
xmax
)
;
virtual
int32_t
YMax
(
)
;
virtual
void
SetYMax
(
int32_t
ymax
)
;
virtual
int32_t
MacStyleAsInt
(
)
;
virtual
void
SetMacStyleAsInt
(
int32_t
style
)
;
virtual
int32_t
LowestRecPPEM
(
)
;
virtual
void
SetLowestRecPPEM
(
int32_t
size
)
;
virtual
int32_t
FontDirectionHint
(
)
;
virtual
void
SetFontDirectionHint
(
int32_t
hint
)
;
virtual
int32_t
IndexToLocFormat
(
)
;
virtual
void
SetIndexToLocFormat
(
int32_t
format
)
;
virtual
int32_t
GlyphDataFormat
(
)
;
virtual
void
SetGlyphDataFormat
(
int32_t
format
)
;
static
CALLER_ATTACH
Builder
*
CreateBuilder
(
Header
*
header
WritableFontData
*
data
)
;
}
;
virtual
~
FontHeaderTable
(
)
;
int32_t
TableVersion
(
)
;
int32_t
FontRevision
(
)
;
int64_t
ChecksumAdjustment
(
)
;
int64_t
MagicNumber
(
)
;
int32_t
FlagsAsInt
(
)
;
int32_t
UnitsPerEm
(
)
;
int64_t
Created
(
)
;
int64_t
Modified
(
)
;
int32_t
XMin
(
)
;
int32_t
YMin
(
)
;
int32_t
XMax
(
)
;
int32_t
YMax
(
)
;
int32_t
MacStyleAsInt
(
)
;
int32_t
LowestRecPPEM
(
)
;
int32_t
FontDirectionHint
(
)
;
int32_t
IndexToLocFormat
(
)
;
int32_t
GlyphDataFormat
(
)
;
private
:
struct
Offset
{
enum
{
kTableVersion
=
0
kFontRevision
=
4
kCheckSumAdjustment
=
8
kMagicNumber
=
12
kFlags
=
16
kUnitsPerEm
=
18
kCreated
=
20
kModified
=
28
kXMin
=
36
kYMin
=
38
kXMax
=
40
kYMax
=
42
kMacStyle
=
44
kLowestRecPPEM
=
46
kFontDirectionHint
=
48
kIndexToLocFormat
=
50
kGlyphDataFormat
=
52
}
;
}
;
FontHeaderTable
(
Header
*
header
ReadableFontData
*
data
)
;
}
;
typedef
Ptr
<
FontHeaderTable
>
FontHeaderTablePtr
;
typedef
Ptr
<
FontHeaderTable
:
:
Builder
>
FontHeaderTableBuilderPtr
;
}
#
endif
