#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_FONT_DATA_TABLE_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_FONT_DATA_TABLE_H_
#
include
"
sfntly
/
data
/
readable_font_data
.
h
"
#
include
"
sfntly
/
data
/
writable_font_data
.
h
"
#
include
"
sfntly
/
port
/
refcount
.
h
"
namespace
sfntly
{
class
FontDataTable
:
virtual
public
RefCount
{
public
:
class
Builder
:
virtual
public
RefCount
{
public
:
CALLER_ATTACH
WritableFontData
*
Data
(
)
;
virtual
void
SetData
(
ReadableFontData
*
data
)
;
virtual
CALLER_ATTACH
FontDataTable
*
Build
(
)
;
virtual
bool
ReadyToBuild
(
)
;
ReadableFontData
*
InternalReadData
(
)
;
WritableFontData
*
InternalWriteData
(
)
;
bool
data_changed
(
)
{
return
data_changed_
;
}
bool
model_changed
(
)
{
return
current_model_changed
(
)
|
|
contained_model_changed
(
)
;
}
bool
current_model_changed
(
)
{
return
model_changed_
;
}
bool
contained_model_changed
(
)
{
return
contained_model_changed_
;
}
bool
set_model_changed
(
)
{
return
set_model_changed
(
true
)
;
}
bool
set_model_changed
(
bool
changed
)
{
bool
old
=
model_changed_
;
model_changed_
=
changed
;
return
old
;
}
protected
:
explicit
Builder
(
)
;
Builder
(
int32_t
data_size
)
;
Builder
(
WritableFontData
*
data
)
;
Builder
(
ReadableFontData
*
data
)
;
virtual
~
Builder
(
)
;
virtual
void
NotifyPostTableBuild
(
FontDataTable
*
table
)
;
virtual
int32_t
SubSerialize
(
WritableFontData
*
new_data
)
=
0
;
virtual
bool
SubReadyToSerialize
(
)
=
0
;
virtual
int32_t
SubDataSizeToSerialize
(
)
=
0
;
virtual
void
SubDataSet
(
)
=
0
;
virtual
CALLER_ATTACH
FontDataTable
*
SubBuildTable
(
ReadableFontData
*
data
)
=
0
;
private
:
void
InternalSetData
(
WritableFontData
*
data
bool
data_changed
)
;
void
InternalSetData
(
ReadableFontData
*
data
bool
data_changed
)
;
WritableFontDataPtr
w_data_
;
ReadableFontDataPtr
r_data_
;
bool
model_changed_
;
bool
contained_model_changed_
;
bool
data_changed_
;
}
;
explicit
FontDataTable
(
ReadableFontData
*
data
)
;
virtual
~
FontDataTable
(
)
;
ReadableFontData
*
ReadFontData
(
)
;
virtual
int32_t
DataLength
(
)
;
virtual
int32_t
Serialize
(
OutputStream
*
os
)
;
protected
:
virtual
int32_t
Serialize
(
WritableFontData
*
data
)
;
ReadableFontDataPtr
data_
;
}
;
typedef
Ptr
<
FontDataTable
>
FontDataTablePtr
;
typedef
Ptr
<
FontDataTable
:
:
Builder
>
FontDataTableBuilderPtr
;
}
#
endif
