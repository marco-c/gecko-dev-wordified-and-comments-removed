#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_TABLE_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_TABLE_H_
#
include
<
set
>
#
include
<
map
>
#
include
<
vector
>
#
include
<
utility
>
#
include
"
sfntly
/
port
/
type
.
h
"
#
include
"
sfntly
/
table
/
font_data_table
.
h
"
#
include
"
sfntly
/
table
/
header
.
h
"
namespace
sfntly
{
class
Font
;
class
Table
:
public
FontDataTable
{
public
:
class
Builder
:
public
FontDataTable
:
:
Builder
{
public
:
virtual
~
Builder
(
)
;
virtual
Header
*
header
(
)
{
return
header_
;
}
virtual
void
NotifyPostTableBuild
(
FontDataTable
*
table
)
;
static
CALLER_ATTACH
Builder
*
GetBuilder
(
Header
*
header
WritableFontData
*
table_data
)
;
protected
:
Builder
(
Header
*
header
WritableFontData
*
data
)
;
Builder
(
Header
*
header
ReadableFontData
*
data
)
;
Builder
(
Header
*
header
)
;
private
:
Ptr
<
Header
>
header_
;
}
;
virtual
~
Table
(
)
;
virtual
int64_t
CalculatedChecksum
(
)
;
virtual
Header
*
header
(
)
{
return
header_
;
}
virtual
int32_t
header_tag
(
)
{
return
header_
-
>
tag
(
)
;
}
virtual
int32_t
header_offset
(
)
{
return
header_
-
>
offset
(
)
;
}
virtual
int32_t
header_length
(
)
{
return
header_
-
>
length
(
)
;
}
virtual
int64_t
header_checksum
(
)
{
return
header_
-
>
checksum
(
)
;
}
virtual
void
SetFont
(
Font
*
font
)
;
protected
:
Table
(
Header
*
header
ReadableFontData
*
data
)
;
private
:
Ptr
<
Header
>
header_
;
Ptr
<
Font
>
font_
;
}
;
class
GenericTable
:
public
Table
public
RefCounted
<
GenericTable
>
{
public
:
GenericTable
(
Header
*
header
ReadableFontData
*
data
)
:
Table
(
header
data
)
{
}
virtual
~
GenericTable
(
)
{
}
}
;
typedef
Ptr
<
Table
>
TablePtr
;
typedef
std
:
:
vector
<
HeaderPtr
>
TableHeaderList
;
typedef
Ptr
<
Table
:
:
Builder
>
TableBuilderPtr
;
typedef
std
:
:
map
<
int32_t
TablePtr
>
TableMap
;
typedef
std
:
:
pair
<
int32_t
TablePtr
>
TableMapEntry
;
typedef
std
:
:
map
<
HeaderPtr
WritableFontDataPtr
>
DataBlockMap
;
typedef
std
:
:
pair
<
HeaderPtr
WritableFontDataPtr
>
DataBlockEntry
;
typedef
std
:
:
map
<
int32_t
TableBuilderPtr
>
TableBuilderMap
;
typedef
std
:
:
pair
<
int32_t
TableBuilderPtr
>
TableBuilderEntry
;
}
#
endif
