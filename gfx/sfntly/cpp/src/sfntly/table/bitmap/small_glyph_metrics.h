#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_SMALL_GLYPH_METRICS_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_SMALL_GLYPH_METRICS_H_
#
include
"
sfntly
/
port
/
refcount
.
h
"
#
include
"
sfntly
/
table
/
bitmap
/
glyph_metrics
.
h
"
namespace
sfntly
{
class
SmallGlyphMetrics
:
public
GlyphMetrics
public
RefCounted
<
SmallGlyphMetrics
>
{
public
:
struct
Offset
{
enum
{
kMetricsLength
=
5
kHeight
=
0
kWidth
=
1
kBearingX
=
2
kBearingY
=
3
kAdvance
=
4
}
;
}
;
class
Builder
:
public
GlyphMetrics
:
:
Builder
public
RefCounted
<
Builder
>
{
public
:
explicit
Builder
(
WritableFontData
*
data
)
;
explicit
Builder
(
ReadableFontData
*
data
)
;
virtual
~
Builder
(
)
;
int32_t
Height
(
)
;
void
SetHeight
(
uint8_t
height
)
;
int32_t
Width
(
)
;
void
SetWidth
(
uint8_t
width
)
;
int32_t
BearingX
(
)
;
void
SetBearingX
(
uint8_t
bearing
)
;
int32_t
BearingY
(
)
;
void
SetBearingY
(
uint8_t
bearing
)
;
int32_t
Advance
(
)
;
void
SetAdvance
(
uint8_t
advance
)
;
virtual
CALLER_ATTACH
FontDataTable
*
SubBuildTable
(
ReadableFontData
*
data
)
;
virtual
void
SubDataSet
(
)
;
virtual
int32_t
SubDataSizeToSerialize
(
)
;
virtual
bool
SubReadyToSerialize
(
)
;
virtual
int32_t
SubSerialize
(
WritableFontData
*
new_data
)
;
}
;
explicit
SmallGlyphMetrics
(
ReadableFontData
*
data
)
;
virtual
~
SmallGlyphMetrics
(
)
;
int32_t
Height
(
)
;
int32_t
Width
(
)
;
int32_t
BearingX
(
)
;
int32_t
BearingY
(
)
;
int32_t
Advance
(
)
;
}
;
typedef
Ptr
<
SmallGlyphMetrics
>
SmallGlyphMetricsPtr
;
}
#
endif
