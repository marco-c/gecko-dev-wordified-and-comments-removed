#
include
"
sfntly
/
table
/
bitmap
/
bitmap_glyph
.
h
"
#
include
"
sfntly
/
table
/
bitmap
/
simple_bitmap_glyph
.
h
"
#
include
"
sfntly
/
table
/
bitmap
/
composite_bitmap_glyph
.
h
"
namespace
sfntly
{
BitmapGlyph
:
:
~
BitmapGlyph
(
)
{
}
CALLER_ATTACH
BitmapGlyph
*
BitmapGlyph
:
:
CreateGlyph
(
ReadableFontData
*
data
int32_t
format
)
{
BitmapGlyphPtr
glyph
;
BitmapGlyphBuilderPtr
builder
;
builder
.
Attach
(
Builder
:
:
CreateGlyphBuilder
(
data
format
)
)
;
if
(
builder
)
{
glyph
.
Attach
(
down_cast
<
BitmapGlyph
*
>
(
builder
-
>
Build
(
)
)
)
;
}
return
glyph
;
}
BitmapGlyph
:
:
BitmapGlyph
(
ReadableFontData
*
data
int32_t
format
)
:
SubTable
(
data
)
format_
(
format
)
{
}
BitmapGlyph
:
:
Builder
:
:
~
Builder
(
)
{
}
CALLER_ATTACH
BitmapGlyph
:
:
Builder
*
BitmapGlyph
:
:
Builder
:
:
CreateGlyphBuilder
(
ReadableFontData
*
data
int32_t
format
)
{
BitmapGlyphBuilderPtr
builder
;
switch
(
format
)
{
case
1
:
case
2
:
case
3
:
case
4
:
case
5
:
case
6
:
case
7
:
builder
=
new
SimpleBitmapGlyph
:
:
Builder
(
data
format
)
;
break
;
case
8
:
case
9
:
builder
=
new
CompositeBitmapGlyph
:
:
Builder
(
data
format
)
;
break
;
}
return
builder
.
Detach
(
)
;
}
BitmapGlyph
:
:
Builder
:
:
Builder
(
WritableFontData
*
data
int32_t
format
)
:
SubTable
:
:
Builder
(
data
)
format_
(
format
)
{
}
BitmapGlyph
:
:
Builder
:
:
Builder
(
ReadableFontData
*
data
int32_t
format
)
:
SubTable
:
:
Builder
(
data
)
format_
(
format
)
{
}
CALLER_ATTACH
FontDataTable
*
BitmapGlyph
:
:
Builder
:
:
SubBuildTable
(
ReadableFontData
*
data
)
{
UNREFERENCED_PARAMETER
(
data
)
;
return
NULL
;
}
void
BitmapGlyph
:
:
Builder
:
:
SubDataSet
(
)
{
}
int32_t
BitmapGlyph
:
:
Builder
:
:
SubDataSizeToSerialize
(
)
{
return
InternalReadData
(
)
-
>
Length
(
)
;
}
bool
BitmapGlyph
:
:
Builder
:
:
SubReadyToSerialize
(
)
{
return
true
;
}
int32_t
BitmapGlyph
:
:
Builder
:
:
SubSerialize
(
WritableFontData
*
new_data
)
{
return
InternalReadData
(
)
-
>
CopyTo
(
new_data
)
;
}
}
