#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_INDEX_SUBTABLE_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_INDEX_SUBTABLE_H_
#
include
<
vector
>
#
include
"
sfntly
/
port
/
java_iterator
.
h
"
#
include
"
sfntly
/
table
/
subtable
.
h
"
#
include
"
sfntly
/
table
/
bitmap
/
bitmap_glyph_info
.
h
"
namespace
sfntly
{
class
IndexSubTable
:
public
SubTable
{
public
:
struct
Format
{
enum
{
FORMAT_1
=
1
FORMAT_2
=
2
FORMAT_3
=
3
FORMAT_4
=
4
FORMAT_5
=
5
}
;
}
;
class
Builder
:
public
SubTable
:
:
Builder
{
public
:
virtual
~
Builder
(
)
;
void
Revert
(
)
;
int32_t
index_format
(
)
{
return
index_format_
;
}
int32_t
first_glyph_index
(
)
{
return
first_glyph_index_
;
}
void
set_first_glyph_index
(
int32_t
v
)
{
first_glyph_index_
=
v
;
}
int32_t
last_glyph_index
(
)
{
return
last_glyph_index_
;
}
void
set_last_glyph_index
(
int32_t
v
)
{
last_glyph_index_
=
v
;
}
int32_t
image_format
(
)
{
return
image_format_
;
}
void
set_image_format
(
int32_t
v
)
{
image_format_
=
v
;
}
int32_t
image_data_offset
(
)
{
return
image_data_offset_
;
}
void
set_image_data_offset
(
int32_t
v
)
{
image_data_offset_
=
v
;
}
virtual
int32_t
NumGlyphs
(
)
=
0
;
CALLER_ATTACH
virtual
BitmapGlyphInfo
*
GlyphInfo
(
int32_t
glyph_id
)
;
virtual
int32_t
GlyphOffset
(
int32_t
glyph_id
)
;
virtual
int32_t
GlyphStartOffset
(
int32_t
glyph_id
)
=
0
;
virtual
int32_t
GlyphLength
(
int32_t
glyph_id
)
=
0
;
CALLER_ATTACH
virtual
Iterator
<
BitmapGlyphInfo
IndexSubTable
:
:
Builder
>
*
GetIterator
(
)
=
0
;
static
CALLER_ATTACH
Builder
*
CreateBuilder
(
int32_t
index_format
)
;
static
CALLER_ATTACH
Builder
*
CreateBuilder
(
ReadableFontData
*
data
int32_t
offset_to_index_sub_table_array
int32_t
array_index
)
;
virtual
CALLER_ATTACH
FontDataTable
*
SubBuildTable
(
ReadableFontData
*
data
)
;
virtual
void
SubDataSet
(
)
;
virtual
int32_t
SubDataSizeToSerialize
(
)
;
virtual
bool
SubReadyToSerialize
(
)
;
virtual
int32_t
SubSerialize
(
WritableFontData
*
new_data
)
;
protected
:
Builder
(
int32_t
data_size
int32_t
index_format
)
;
Builder
(
int32_t
index_format
int32_t
image_format
int32_t
image_data_offset
int32_t
data_size
)
;
Builder
(
WritableFontData
*
data
int32_t
first_glyph_index
int32_t
last_glyph_index
)
;
Builder
(
ReadableFontData
*
data
int32_t
first_glyph_index
int32_t
last_glyph_index
)
;
int32_t
CheckGlyphRange
(
int32_t
glyph_id
)
;
int32_t
SerializeIndexSubHeader
(
WritableFontData
*
data
)
;
private
:
void
Initialize
(
ReadableFontData
*
data
)
;
int32_t
first_glyph_index_
;
int32_t
last_glyph_index_
;
int32_t
index_format_
;
int32_t
image_format_
;
int32_t
image_data_offset_
;
}
;
int32_t
index_format
(
)
{
return
index_format_
;
}
int32_t
first_glyph_index
(
)
{
return
first_glyph_index_
;
}
int32_t
last_glyph_index
(
)
{
return
last_glyph_index_
;
}
int32_t
image_format
(
)
{
return
image_format_
;
}
int32_t
image_data_offset
(
)
{
return
image_data_offset_
;
}
CALLER_ATTACH
BitmapGlyphInfo
*
GlyphInfo
(
int32_t
glyph_id
)
;
virtual
int32_t
GlyphOffset
(
int32_t
glyph_id
)
;
virtual
int32_t
GlyphStartOffset
(
int32_t
glyph_id
)
=
0
;
virtual
int32_t
GlyphLength
(
int32_t
glyph_id
)
=
0
;
virtual
int32_t
NumGlyphs
(
)
=
0
;
static
CALLER_ATTACH
IndexSubTable
*
CreateIndexSubTable
(
ReadableFontData
*
data
int32_t
offset_to_index_sub_table_array
int32_t
array_index
)
;
protected
:
IndexSubTable
(
ReadableFontData
*
data
int32_t
first_glyph_index
int32_t
last_glyph_index
)
;
int32_t
CheckGlyphRange
(
int32_t
glyph_id
)
;
static
int32_t
CheckGlyphRange
(
int32_t
glyph_id
int32_t
first_glyph_id
int32_t
last_glyph_id
)
;
private
:
int32_t
first_glyph_index_
;
int32_t
last_glyph_index_
;
int32_t
index_format_
;
int32_t
image_format_
;
int32_t
image_data_offset_
;
}
;
typedef
Ptr
<
IndexSubTable
>
IndexSubTablePtr
;
typedef
std
:
:
vector
<
IndexSubTablePtr
>
IndexSubTableList
;
typedef
Ptr
<
IndexSubTable
:
:
Builder
>
IndexSubTableBuilderPtr
;
typedef
std
:
:
vector
<
IndexSubTableBuilderPtr
>
IndexSubTableBuilderList
;
typedef
Iterator
<
BitmapGlyphInfo
IndexSubTable
:
:
Builder
>
BitmapGlyphInfoIter
;
typedef
Ptr
<
BitmapGlyphInfoIter
>
BitmapGlyphInfoIterPtr
;
}
#
endif
