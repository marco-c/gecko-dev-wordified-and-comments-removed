#
include
"
sfntly
/
table
/
bitmap
/
bitmap_glyph_info
.
h
"
namespace
sfntly
{
BitmapGlyphInfo
:
:
BitmapGlyphInfo
(
int32_t
glyph_id
int32_t
block_offset
int32_t
start_offset
int32_t
length
int32_t
format
)
:
glyph_id_
(
glyph_id
)
relative_
(
true
)
block_offset_
(
block_offset
)
start_offset_
(
start_offset
)
length_
(
length
)
format_
(
format
)
{
}
BitmapGlyphInfo
:
:
BitmapGlyphInfo
(
int32_t
glyph_id
int32_t
start_offset
int32_t
length
int32_t
format
)
:
glyph_id_
(
glyph_id
)
relative_
(
false
)
block_offset_
(
0
)
start_offset_
(
start_offset
)
length_
(
length
)
format_
(
format
)
{
}
bool
BitmapGlyphInfo
:
:
operator
=
=
(
const
BitmapGlyphInfo
&
rhs
)
const
{
return
(
format_
=
=
rhs
.
format_
&
&
glyph_id_
=
=
rhs
.
glyph_id_
&
&
length_
=
=
rhs
.
length_
&
&
offset
(
)
=
=
rhs
.
offset
(
)
)
;
}
bool
BitmapGlyphInfo
:
:
operator
=
=
(
BitmapGlyphInfo
*
rhs
)
{
if
(
rhs
=
=
NULL
)
{
return
false
;
}
return
(
format_
=
=
rhs
-
>
format
(
)
&
&
glyph_id_
=
=
rhs
-
>
glyph_id
(
)
&
&
length_
=
=
rhs
-
>
length
(
)
&
&
offset
(
)
=
=
rhs
-
>
offset
(
)
)
;
}
bool
StartOffsetComparator
:
:
operator
(
)
(
BitmapGlyphInfo
*
lhs
BitmapGlyphInfo
*
rhs
)
{
return
lhs
-
>
start_offset
(
)
>
rhs
-
>
start_offset
(
)
;
}
}
