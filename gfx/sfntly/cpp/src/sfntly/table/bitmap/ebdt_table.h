#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_EBDT_TABLE_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_EBDT_TABLE_H_
#
include
"
sfntly
/
table
/
bitmap
/
bitmap_glyph
.
h
"
#
include
"
sfntly
/
table
/
bitmap
/
bitmap_glyph_info
.
h
"
#
include
"
sfntly
/
table
/
subtable_container_table
.
h
"
namespace
sfntly
{
class
EbdtTable
:
public
SubTableContainerTable
public
RefCounted
<
EbdtTable
>
{
public
:
struct
Offset
{
enum
{
kVersion
=
0
kHeaderLength
=
DataSize
:
:
kFixed
}
;
}
;
class
Builder
:
public
SubTableContainerTable
:
:
Builder
public
RefCounted
<
Builder
>
{
public
:
Builder
(
Header
*
header
WritableFontData
*
data
)
;
Builder
(
Header
*
header
ReadableFontData
*
data
)
;
virtual
~
Builder
(
)
;
virtual
int32_t
SubSerialize
(
WritableFontData
*
new_data
)
;
virtual
bool
SubReadyToSerialize
(
)
;
virtual
int32_t
SubDataSizeToSerialize
(
)
;
virtual
void
SubDataSet
(
)
;
virtual
CALLER_ATTACH
FontDataTable
*
SubBuildTable
(
ReadableFontData
*
data
)
;
void
SetLoca
(
BitmapLocaList
*
loca_list
)
;
void
GenerateLocaList
(
BitmapLocaList
*
output
)
;
BitmapGlyphBuilderList
*
GlyphBuilders
(
)
;
void
SetGlyphBuilders
(
BitmapGlyphBuilderList
*
glyph_builders
)
;
void
Revert
(
)
;
static
CALLER_ATTACH
Builder
*
CreateBuilder
(
Header
*
header
WritableFontData
*
data
)
;
static
CALLER_ATTACH
Builder
*
CreateBuilder
(
Header
*
header
ReadableFontData
*
data
)
;
private
:
BitmapGlyphBuilderList
*
GetGlyphBuilders
(
)
;
static
void
Initialize
(
ReadableFontData
*
data
BitmapLocaList
*
loca_list
BitmapGlyphBuilderList
*
output
)
;
static
const
int32_t
kVersion
=
0x00020000
;
BitmapLocaList
glyph_loca_
;
BitmapGlyphBuilderList
glyph_builders_
;
}
;
virtual
~
EbdtTable
(
)
;
int32_t
Version
(
)
;
CALLER_ATTACH
BitmapGlyph
*
Glyph
(
int32_t
offset
int32_t
length
int32_t
format
)
;
protected
:
EbdtTable
(
Header
*
header
ReadableFontData
*
data
)
;
}
;
typedef
Ptr
<
EbdtTable
>
EbdtTablePtr
;
typedef
Ptr
<
EbdtTable
:
:
Builder
>
EbdtTableBuilderPtr
;
}
#
endif
