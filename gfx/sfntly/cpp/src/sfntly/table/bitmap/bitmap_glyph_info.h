#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_GLYPH_INFO_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_GLYPH_INFO_H_
#
include
<
vector
>
#
include
<
map
>
#
include
"
sfntly
/
table
/
subtable
.
h
"
namespace
sfntly
{
class
BitmapGlyphInfo
:
public
RefCounted
<
BitmapGlyphInfo
>
{
public
:
BitmapGlyphInfo
(
int32_t
glyph_id
int32_t
block_offset
int32_t
start_offset
int32_t
length
int32_t
format
)
;
BitmapGlyphInfo
(
int32_t
glyph_id
int32_t
start_offset
int32_t
length
int32_t
format
)
;
int32_t
glyph_id
(
)
const
{
return
glyph_id_
;
}
bool
relative
(
)
const
{
return
relative_
;
}
int32_t
block_offset
(
)
const
{
return
block_offset_
;
}
int32_t
offset
(
)
const
{
return
block_offset
(
)
+
start_offset
(
)
;
}
int32_t
start_offset
(
)
const
{
return
start_offset_
;
}
int32_t
length
(
)
const
{
return
length_
;
}
int32_t
format
(
)
const
{
return
format_
;
}
bool
operator
=
=
(
const
BitmapGlyphInfo
&
rhs
)
const
;
bool
operator
=
=
(
BitmapGlyphInfo
*
rhs
)
;
private
:
int32_t
glyph_id_
;
bool
relative_
;
int32_t
block_offset_
;
int32_t
start_offset_
;
int32_t
length_
;
int32_t
format_
;
}
;
typedef
Ptr
<
BitmapGlyphInfo
>
BitmapGlyphInfoPtr
;
typedef
std
:
:
map
<
int32_t
BitmapGlyphInfoPtr
>
BitmapGlyphInfoMap
;
typedef
std
:
:
vector
<
BitmapGlyphInfoMap
>
BitmapLocaList
;
class
StartOffsetComparator
{
public
:
bool
operator
(
)
(
BitmapGlyphInfo
*
lhs
BitmapGlyphInfo
*
rhs
)
;
}
;
}
#
endif
