#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_BITMAP_GLYPH_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_BITMAP_GLYPH_H_
#
include
<
vector
>
#
include
<
map
>
#
include
"
sfntly
/
table
/
subtable
.
h
"
namespace
sfntly
{
class
BitmapGlyph
:
public
SubTable
{
public
:
struct
Offset
{
enum
{
kVersion
=
0
kSmallGlyphMetricsLength
=
5
kBigGlyphMetricsLength
=
8
kGlyphFormat1_imageData
=
kSmallGlyphMetricsLength
kGlyphFormat2_imageData
=
kSmallGlyphMetricsLength
kGlyphFormat5_imageData
=
0
kGlyphFormat6_imageData
=
kBigGlyphMetricsLength
kGlyphFormat7_imageData
=
kBigGlyphMetricsLength
kGlyphFormat8_numComponents
=
kSmallGlyphMetricsLength
+
1
kGlyphFormat8_componentArray
=
kGlyphFormat8_numComponents
+
DataSize
:
:
kUSHORT
kGlyphFormat9_numComponents
=
kBigGlyphMetricsLength
kGlyphFormat9_componentArray
=
kGlyphFormat9_numComponents
+
DataSize
:
:
kUSHORT
kEbdtComponentLength
=
DataSize
:
:
kUSHORT
+
2
*
DataSize
:
:
kCHAR
kEbdtComponent_glyphCode
=
0
kEbdtComponent_xOffset
=
2
kEbdtComponent_yOffset
=
3
}
;
}
;
class
Builder
:
public
SubTable
:
:
Builder
{
public
:
virtual
~
Builder
(
)
;
virtual
CALLER_ATTACH
FontDataTable
*
SubBuildTable
(
ReadableFontData
*
data
)
;
virtual
void
SubDataSet
(
)
;
virtual
int32_t
SubDataSizeToSerialize
(
)
;
virtual
bool
SubReadyToSerialize
(
)
;
virtual
int32_t
SubSerialize
(
WritableFontData
*
new_data
)
;
int32_t
format
(
)
{
return
format_
;
}
static
CALLER_ATTACH
Builder
*
CreateGlyphBuilder
(
ReadableFontData
*
data
int32_t
format
)
;
protected
:
Builder
(
WritableFontData
*
data
int32_t
format
)
;
Builder
(
ReadableFontData
*
data
int32_t
format
)
;
private
:
int32_t
format_
;
}
;
virtual
~
BitmapGlyph
(
)
;
static
CALLER_ATTACH
BitmapGlyph
*
CreateGlyph
(
ReadableFontData
*
data
int32_t
format
)
;
int32_t
format
(
)
{
return
format_
;
}
protected
:
BitmapGlyph
(
ReadableFontData
*
data
int32_t
format
)
;
private
:
int32_t
format_
;
}
;
typedef
Ptr
<
BitmapGlyph
>
BitmapGlyphPtr
;
typedef
Ptr
<
BitmapGlyph
:
:
Builder
>
BitmapGlyphBuilderPtr
;
typedef
std
:
:
map
<
int32_t
BitmapGlyphBuilderPtr
>
BitmapGlyphBuilderMap
;
typedef
std
:
:
vector
<
BitmapGlyphBuilderMap
>
BitmapGlyphBuilderList
;
}
#
endif
