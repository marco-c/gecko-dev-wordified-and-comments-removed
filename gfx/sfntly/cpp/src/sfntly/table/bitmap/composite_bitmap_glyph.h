#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_COMPOSITE_BITMAP_GLYPH_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_COMPOSITE_BITMAP_GLYPH_H_
#
include
"
sfntly
/
table
/
bitmap
/
bitmap_glyph
.
h
"
namespace
sfntly
{
class
CompositeBitmapGlyph
:
public
BitmapGlyph
public
RefCounted
<
CompositeBitmapGlyph
>
{
public
:
class
Component
{
public
:
Component
(
const
Component
&
rhs
)
;
int32_t
glyph_code
(
)
{
return
glyph_code_
;
}
int32_t
x_offset
(
)
{
return
x_offset_
;
}
int32_t
y_offset
(
)
{
return
y_offset_
;
}
bool
operator
=
=
(
const
Component
&
rhs
)
;
Component
&
operator
=
(
const
Component
&
rhs
)
;
protected
:
Component
(
int32_t
glyph_code
int32_t
x_offset
int32_t
y_offset
)
;
private
:
int32_t
glyph_code_
;
int32_t
x_offset_
;
int32_t
y_offset_
;
friend
class
CompositeBitmapGlyph
;
}
;
class
Builder
:
public
BitmapGlyph
:
:
Builder
public
RefCounted
<
Builder
>
{
public
:
Builder
(
WritableFontData
*
data
int32_t
format
)
;
Builder
(
ReadableFontData
*
data
int32_t
format
)
;
virtual
~
Builder
(
)
;
virtual
CALLER_ATTACH
FontDataTable
*
SubBuildTable
(
ReadableFontData
*
data
)
;
}
;
CompositeBitmapGlyph
(
ReadableFontData
*
data
int32_t
format
)
;
virtual
~
CompositeBitmapGlyph
(
)
;
int32_t
NumComponents
(
)
;
Component
GetComponent
(
int32_t
component_num
)
const
;
private
:
void
Initialize
(
int32_t
format
)
;
int32_t
num_components_offset_
;
int32_t
component_array_offset_
;
}
;
}
#
endif
