#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_INDEX_SUBTABLE_FORMAT3_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_BITMAP_INDEX_SUBTABLE_FORMAT3_H_
#
include
"
sfntly
/
table
/
bitmap
/
index_sub_table
.
h
"
namespace
sfntly
{
class
IndexSubTableFormat3
:
public
IndexSubTable
public
RefCounted
<
IndexSubTableFormat3
>
{
public
:
class
Builder
:
public
IndexSubTable
:
:
Builder
public
RefCounted
<
Builder
>
{
public
:
class
BitmapGlyphInfoIterator
:
public
RefIterator
<
BitmapGlyphInfo
Builder
IndexSubTable
:
:
Builder
>
{
public
:
explicit
BitmapGlyphInfoIterator
(
Builder
*
container
)
;
virtual
~
BitmapGlyphInfoIterator
(
)
{
}
virtual
bool
HasNext
(
)
;
CALLER_ATTACH
virtual
BitmapGlyphInfo
*
Next
(
)
;
private
:
int32_t
glyph_id_
;
}
;
virtual
~
Builder
(
)
;
virtual
int32_t
NumGlyphs
(
)
;
virtual
int32_t
GlyphStartOffset
(
int32_t
glyph_id
)
;
virtual
int32_t
GlyphLength
(
int32_t
glyph_id
)
;
CALLER_ATTACH
virtual
BitmapGlyphInfoIterator
*
GetIterator
(
)
;
virtual
CALLER_ATTACH
FontDataTable
*
SubBuildTable
(
ReadableFontData
*
data
)
;
virtual
void
SubDataSet
(
)
;
virtual
int32_t
SubDataSizeToSerialize
(
)
;
virtual
bool
SubReadyToSerialize
(
)
;
virtual
int32_t
SubSerialize
(
WritableFontData
*
new_data
)
;
void
SetOffsetArray
(
const
std
:
:
vector
<
int32_t
>
&
offset_array
)
;
static
CALLER_ATTACH
Builder
*
CreateBuilder
(
)
;
static
CALLER_ATTACH
Builder
*
CreateBuilder
(
ReadableFontData
*
data
int32_t
index_sub_table_offset
int32_t
first_glyph_index
int32_t
last_glyph_index
)
;
static
CALLER_ATTACH
Builder
*
CreateBuilder
(
WritableFontData
*
data
int32_t
index_sub_table_offset
int32_t
first_glyph_index
int32_t
last_glyph_index
)
;
protected
:
void
Revert
(
)
;
private
:
Builder
(
)
;
Builder
(
WritableFontData
*
data
int32_t
first_glyph_index
int32_t
last_glyph_index
)
;
Builder
(
ReadableFontData
*
data
int32_t
first_glyph_index
int32_t
last_glyph_index
)
;
std
:
:
vector
<
int32_t
>
*
GetOffsetArray
(
)
;
void
Initialize
(
ReadableFontData
*
data
)
;
static
int32_t
DataLength
(
ReadableFontData
*
data
int32_t
index_sub_table_offset
int32_t
first_glyph_index
int32_t
last_glyph_index
)
;
std
:
:
vector
<
int32_t
>
offset_array_
;
}
;
virtual
~
IndexSubTableFormat3
(
)
;
virtual
int32_t
NumGlyphs
(
)
;
virtual
int32_t
GlyphStartOffset
(
int32_t
glyph_id
)
;
virtual
int32_t
GlyphLength
(
int32_t
glyph_id
)
;
static
int32_t
GetDataLength
(
ReadableFontData
*
data
int32_t
offset
int32_t
first
int32_t
last
)
;
private
:
IndexSubTableFormat3
(
ReadableFontData
*
data
int32_t
first_glyph_index
int32_t
last_glyph_index
)
;
int32_t
Loca
(
int32_t
loca_index
)
;
friend
class
Builder
;
}
;
typedef
Ptr
<
IndexSubTableFormat3
>
IndexSubTableFormat3Ptr
;
typedef
Ptr
<
IndexSubTableFormat3
:
:
Builder
>
IndexSubTableFormat3BuilderPtr
;
}
#
endif
