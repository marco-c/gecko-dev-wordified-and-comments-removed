#
include
"
sfntly
/
port
/
type
.
h
"
#
include
"
sfntly
/
table
/
table
.
h
"
#
include
"
sfntly
/
font
.
h
"
#
include
"
sfntly
/
tag
.
h
"
#
include
"
sfntly
/
table
/
bitmap
/
ebdt_table
.
h
"
#
include
"
sfntly
/
table
/
bitmap
/
eblc_table
.
h
"
#
include
"
sfntly
/
table
/
bitmap
/
ebsc_table
.
h
"
#
include
"
sfntly
/
table
/
core
/
cmap_table
.
h
"
#
include
"
sfntly
/
table
/
core
/
font_header_table
.
h
"
#
include
"
sfntly
/
table
/
core
/
horizontal_device_metrics_table
.
h
"
#
include
"
sfntly
/
table
/
core
/
horizontal_header_table
.
h
"
#
include
"
sfntly
/
table
/
core
/
horizontal_metrics_table
.
h
"
#
include
"
sfntly
/
table
/
core
/
maximum_profile_table
.
h
"
#
include
"
sfntly
/
table
/
core
/
name_table
.
h
"
#
include
"
sfntly
/
table
/
core
/
os2_table
.
h
"
#
include
"
sfntly
/
table
/
generic_table_builder
.
h
"
#
include
"
sfntly
/
table
/
table_based_table_builder
.
h
"
#
include
"
sfntly
/
table
/
truetype
/
glyph_table
.
h
"
#
include
"
sfntly
/
table
/
truetype
/
loca_table
.
h
"
namespace
sfntly
{
Table
:
:
~
Table
(
)
{
}
int64_t
Table
:
:
CalculatedChecksum
(
)
{
return
data_
-
>
Checksum
(
)
;
}
void
Table
:
:
SetFont
(
Font
*
font
)
{
font_
=
font
;
}
Table
:
:
Table
(
Header
*
header
ReadableFontData
*
data
)
:
FontDataTable
(
data
)
{
header_
=
header
;
}
Table
:
:
Builder
:
:
~
Builder
(
)
{
header_
.
Release
(
)
;
}
void
Table
:
:
Builder
:
:
NotifyPostTableBuild
(
FontDataTable
*
table
)
{
if
(
model_changed
(
)
|
|
data_changed
(
)
)
{
Table
*
derived_table
=
down_cast
<
Table
*
>
(
table
)
;
derived_table
-
>
header_
=
new
Header
(
header
(
)
-
>
tag
(
)
derived_table
-
>
DataLength
(
)
)
;
}
}
CALLER_ATTACH
Table
:
:
Builder
*
Table
:
:
Builder
:
:
GetBuilder
(
Header
*
header
WritableFontData
*
table_data
)
{
int32_t
tag
=
header
-
>
tag
(
)
;
Table
:
:
Builder
*
builder_raw
=
NULL
;
if
(
tag
=
=
Tag
:
:
head
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
FontHeaderTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
#
if
defined
(
SFNTLY_EXPERIMENTAL
)
}
else
if
(
tag
=
=
Tag
:
:
cmap
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
CMapTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
#
endif
}
else
if
(
tag
=
=
Tag
:
:
hhea
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
HorizontalHeaderTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
else
if
(
tag
=
=
Tag
:
:
hmtx
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
HorizontalMetricsTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
else
if
(
tag
=
=
Tag
:
:
maxp
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
MaximumProfileTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
else
if
(
tag
=
=
Tag
:
:
name
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
NameTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
else
if
(
tag
=
=
Tag
:
:
OS_2
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
OS2Table
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
else
if
(
tag
=
=
Tag
:
:
glyf
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
GlyphTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
else
if
(
tag
=
=
Tag
:
:
loca
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
LocaTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
else
if
(
tag
=
=
Tag
:
:
EBDT
|
|
tag
=
=
Tag
:
:
bdat
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
EbdtTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
else
if
(
tag
=
=
Tag
:
:
EBLC
|
|
tag
=
=
Tag
:
:
bloc
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
EblcTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
else
if
(
tag
=
=
Tag
:
:
EBSC
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
EbscTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
else
if
(
tag
=
=
Tag
:
:
bhed
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
FontHeaderTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
#
if
defined
(
SFNTLY_EXPERIMENTAL
)
}
else
if
(
tag
=
=
Tag
:
:
hdmx
)
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
HorizontalDeviceMetricsTable
:
:
Builder
:
:
CreateBuilder
(
header
table_data
)
)
;
#
endif
}
else
{
builder_raw
=
static_cast
<
Table
:
:
Builder
*
>
(
GenericTableBuilder
:
:
CreateBuilder
(
header
table_data
)
)
;
}
return
builder_raw
;
}
Table
:
:
Builder
:
:
Builder
(
Header
*
header
WritableFontData
*
data
)
:
FontDataTable
:
:
Builder
(
data
)
{
header_
=
header
;
}
Table
:
:
Builder
:
:
Builder
(
Header
*
header
ReadableFontData
*
data
)
:
FontDataTable
:
:
Builder
(
data
)
{
header_
=
header
;
}
Table
:
:
Builder
:
:
Builder
(
Header
*
header
)
{
header_
=
header
;
}
}
