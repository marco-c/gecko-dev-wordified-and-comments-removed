#
ifndef
SFNTLY_CPP_SRC_SFNTLY_TABLE_TRUETYPE_LOCA_TABLE_H_
#
define
SFNTLY_CPP_SRC_SFNTLY_TABLE_TRUETYPE_LOCA_TABLE_H_
#
include
"
sfntly
/
port
/
java_iterator
.
h
"
#
include
"
sfntly
/
table
/
table
.
h
"
#
include
"
sfntly
/
table
/
core
/
font_header_table
.
h
"
namespace
sfntly
{
class
LocaTable
:
public
Table
public
RefCounted
<
LocaTable
>
{
public
:
class
LocaIterator
:
public
PODIterator
<
int32_t
LocaTable
>
{
public
:
explicit
LocaIterator
(
LocaTable
*
table
)
;
virtual
~
LocaIterator
(
)
{
}
virtual
bool
HasNext
(
)
;
virtual
int32_t
Next
(
)
;
private
:
int32_t
index_
;
}
;
class
Builder
:
public
Table
:
:
Builder
public
RefCounted
<
Builder
>
{
public
:
Builder
(
Header
*
header
WritableFontData
*
data
)
;
Builder
(
Header
*
header
ReadableFontData
*
data
)
;
virtual
~
Builder
(
)
;
static
CALLER_ATTACH
Builder
*
CreateBuilder
(
Header
*
header
WritableFontData
*
data
)
;
int32_t
format_version
(
)
{
return
format_version_
;
}
void
set_format_version
(
int32_t
value
)
{
format_version_
=
value
;
}
IntegerList
*
LocaList
(
)
;
void
SetLocaList
(
IntegerList
*
list
)
;
int32_t
GlyphOffset
(
int32_t
glyph_id
)
;
int32_t
GlyphLength
(
int32_t
glyph_id
)
;
void
SetNumGlyphs
(
int32_t
num_glyphs
)
;
int
NumGlyphs
(
)
;
void
Revert
(
)
;
int32_t
NumLocas
(
)
;
int32_t
Loca
(
int32_t
index
)
;
virtual
CALLER_ATTACH
FontDataTable
*
SubBuildTable
(
ReadableFontData
*
data
)
;
virtual
void
SubDataSet
(
)
;
virtual
int32_t
SubDataSizeToSerialize
(
)
;
virtual
bool
SubReadyToSerialize
(
)
;
virtual
int32_t
SubSerialize
(
WritableFontData
*
new_data
)
;
private
:
void
Initialize
(
ReadableFontData
*
data
)
;
int32_t
CheckGlyphRange
(
int32_t
glyph_id
)
;
int32_t
LastGlyphIndex
(
)
;
IntegerList
*
GetLocaList
(
)
;
void
ClearLoca
(
bool
nullify
)
;
int32_t
format_version_
;
int32_t
num_glyphs_
;
IntegerList
loca_
;
}
;
virtual
~
LocaTable
(
)
;
int32_t
format_version
(
)
{
return
format_version_
;
}
int32_t
num_glyphs
(
)
{
return
num_glyphs_
;
}
int32_t
GlyphOffset
(
int32_t
glyph_id
)
;
int32_t
GlyphLength
(
int32_t
glyph_id
)
;
int32_t
NumLocas
(
)
;
int32_t
Loca
(
int32_t
index
)
;
private
:
LocaTable
(
Header
*
header
ReadableFontData
*
data
int32_t
format_version
int32_t
num_glyphs
)
;
int32_t
format_version_
;
int32_t
num_glyphs_
;
friend
class
LocaIterator
;
}
;
typedef
Ptr
<
LocaTable
>
LocaTablePtr
;
typedef
Ptr
<
LocaTable
:
:
Builder
>
LocaTableBuilderPtr
;
}
#
endif
