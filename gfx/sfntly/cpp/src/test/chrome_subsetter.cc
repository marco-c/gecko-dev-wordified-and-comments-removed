#
include
"
gtest
/
gtest
.
h
"
#
include
"
sample
/
chromium
/
font_subsetter
.
h
"
#
include
"
test
/
test_data
.
h
"
#
include
"
test
/
test_font_utils
.
h
"
namespace
{
const
char
*
kInputFileName
=
sfntly
:
:
SAMPLE_TTF_FILE
;
const
char
*
kFontName
=
"
Tuffy
"
;
const
char
*
kOutputFileName
=
"
tuffy
-
s
.
ttf
"
;
const
unsigned
int
kGlyphIds
[
]
=
{
43
72
79
82
15
3
90
85
71
4
}
;
const
unsigned
int
kGlyphIdsCount
=
sizeof
(
kGlyphIds
)
/
sizeof
(
unsigned
int
)
;
}
bool
TestChromeSubsetter
(
)
{
sfntly
:
:
ByteVector
input_buffer
;
sfntly
:
:
LoadFile
(
kInputFileName
&
input_buffer
)
;
EXPECT_GT
(
input_buffer
.
size
(
)
(
size_t
)
0
)
;
unsigned
char
*
output_buffer
=
NULL
;
int
output_length
=
SfntlyWrapper
:
:
SubsetFont
(
kFontName
&
(
input_buffer
[
0
]
)
input_buffer
.
size
(
)
kGlyphIds
kGlyphIdsCount
&
output_buffer
)
;
EXPECT_GT
(
output_length
0
)
;
if
(
output_length
>
0
)
{
FILE
*
output_file
=
NULL
;
#
if
defined
WIN32
fopen_s
(
&
output_file
kOutputFileName
"
wb
"
)
;
#
else
output_file
=
fopen
(
kOutputFileName
"
wb
"
)
;
#
endif
EXPECT_TRUE
(
(
output_file
!
=
NULL
)
)
;
if
(
output_file
)
{
int
byte_count
=
fwrite
(
output_buffer
1
output_length
output_file
)
;
EXPECT_EQ
(
byte_count
output_length
)
;
fflush
(
output_file
)
;
fclose
(
output_file
)
;
}
delete
[
]
output_buffer
;
return
true
;
}
return
false
;
}
TEST
(
ChromeSubsetter
All
)
{
EXPECT_TRUE
(
TestChromeSubsetter
(
)
)
;
}
