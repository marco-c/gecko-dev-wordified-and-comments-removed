#
include
"
gtest
/
gtest
.
h
"
#
include
"
sfntly
/
font
.
h
"
#
include
"
sfntly
/
table
/
core
/
name_table
.
h
"
#
include
"
test
/
serialization_test
.
h
"
namespace
sfntly
{
const
int32_t
NAME_FORMAT
=
0
;
const
int32_t
NAME_COUNT
=
75
;
const
NameTable
:
:
NameEntryId
NAME_IDS
[
]
=
{
NameTable
:
:
NameEntryId
(
1
0
0
0
)
NameTable
:
:
NameEntryId
(
1
0
0
1
)
NameTable
:
:
NameEntryId
(
1
0
0
2
)
NameTable
:
:
NameEntryId
(
1
0
0
3
)
NameTable
:
:
NameEntryId
(
1
0
0
4
)
NameTable
:
:
NameEntryId
(
1
0
0
5
)
NameTable
:
:
NameEntryId
(
1
0
0
6
)
NameTable
:
:
NameEntryId
(
1
0
0
9
)
NameTable
:
:
NameEntryId
(
1
0
0
11
)
NameTable
:
:
NameEntryId
(
1
0
0
12
)
}
;
const
int32_t
NAME_IDS_TEST
=
10
;
static
bool
VerifyNAME
(
Table
*
table
)
{
NameTablePtr
name
=
down_cast
<
NameTable
*
>
(
table
)
;
if
(
name
=
=
NULL
)
{
return
false
;
}
EXPECT_EQ
(
name
-
>
Format
(
)
NAME_FORMAT
)
;
EXPECT_EQ
(
name
-
>
NameCount
(
)
NAME_COUNT
)
;
fprintf
(
stderr
"
checking
name
entry
:
"
)
;
for
(
int32_t
i
=
0
;
i
<
NAME_IDS_TEST
;
+
+
i
)
{
fprintf
(
stderr
"
%
d
"
i
)
;
EXPECT_EQ
(
name
-
>
PlatformId
(
i
)
NAME_IDS
[
i
]
.
platform_id
(
)
)
;
EXPECT_EQ
(
name
-
>
EncodingId
(
i
)
NAME_IDS
[
i
]
.
encoding_id
(
)
)
;
EXPECT_EQ
(
name
-
>
LanguageId
(
i
)
NAME_IDS
[
i
]
.
language_id
(
)
)
;
EXPECT_EQ
(
name
-
>
NameId
(
i
)
NAME_IDS
[
i
]
.
name_id
(
)
)
;
}
fprintf
(
stderr
"
\
n
"
)
;
return
true
;
}
bool
VerifyNAME
(
Table
*
original
Table
*
target
)
{
EXPECT_TRUE
(
VerifyNAME
(
original
)
)
;
EXPECT_TRUE
(
VerifyNAME
(
target
)
)
;
return
true
;
}
}
