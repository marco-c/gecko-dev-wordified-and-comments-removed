#
include
"
sfntly
/
port
/
type
.
h
"
#
include
<
unicode
/
ustring
.
h
>
#
include
<
unicode
/
unistr
.
h
>
#
include
"
gtest
/
gtest
.
h
"
#
include
"
sfntly
/
data
/
memory_byte_array
.
h
"
#
include
"
sfntly
/
font
.
h
"
#
include
"
sfntly
/
font_factory
.
h
"
#
include
"
sfntly
/
port
/
memory_input_stream
.
h
"
#
include
"
sfntly
/
port
/
memory_output_stream
.
h
"
#
include
"
sfntly
/
table
/
core
/
name_table
.
h
"
#
include
"
sfntly
/
tag
.
h
"
#
include
"
test
/
test_data
.
h
"
#
include
"
test
/
test_font_utils
.
h
"
namespace
sfntly
{
static
ByteVector
input_buffer
;
void
LoadTestFile
(
FontFactory
*
factory
FontBuilderArray
*
font_builders
)
{
assert
(
factory
)
;
assert
(
font_builders
)
;
if
(
input_buffer
.
empty
(
)
)
{
LoadFile
(
SAMPLE_TTF_FILE
&
input_buffer
)
;
}
factory
-
>
LoadFontsForBuilding
(
&
input_buffer
font_builders
)
;
}
bool
TestChangeOneName
(
)
{
FontFactoryPtr
factory
;
factory
.
Attach
(
FontFactory
:
:
GetInstance
(
)
)
;
FontBuilderArray
font_builder_array
;
LoadTestFile
(
factory
&
font_builder_array
)
;
FontBuilderPtr
font_builder
=
font_builder_array
[
0
]
;
NameTableBuilderPtr
name_builder
=
down_cast
<
NameTable
:
:
Builder
*
>
(
font_builder
-
>
GetTableBuilder
(
Tag
:
:
name
)
)
;
NameEntryBuilderPtr
neb
=
name_builder
-
>
NameBuilder
(
PlatformId
:
:
kWindows
WindowsEncodingId
:
:
kUnicodeUCS2
WindowsLanguageId
:
:
kEnglish_UnitedStates
NameId
:
:
kFontFamilyName
)
;
U_STRING_DECL
(
new_name
"
Timothy
"
7
)
;
neb
-
>
SetName
(
new_name
)
;
FontPtr
font
;
font
.
Attach
(
font_builder
-
>
Build
(
)
)
;
MemoryOutputStream
os
;
factory
-
>
SerializeFont
(
font
&
os
)
;
MemoryInputStream
is
;
is
.
Attach
(
os
.
Get
(
)
os
.
Size
(
)
)
;
FontArray
font_array
;
factory
-
>
LoadFonts
(
&
is
&
font_array
)
;
FontPtr
new_font
=
font_array
[
0
]
;
NameTablePtr
name_table
=
down_cast
<
NameTable
*
>
(
font
-
>
GetTable
(
Tag
:
:
name
)
)
;
UChar
*
name
=
name_table
-
>
Name
(
PlatformId
:
:
kWindows
WindowsEncodingId
:
:
kUnicodeUCS2
WindowsLanguageId
:
:
kEnglish_UnitedStates
NameId
:
:
kFontFamilyName
)
;
EXPECT_TRUE
(
name
!
=
NULL
)
;
EXPECT_EQ
(
u_strcmp
(
name
new_name
)
0
)
;
delete
[
]
name
;
return
true
;
}
bool
TestModifyNameTableAndRevert
(
)
{
FontFactoryPtr
factory
;
factory
.
Attach
(
FontFactory
:
:
GetInstance
(
)
)
;
FontBuilderArray
font_builder_array
;
LoadTestFile
(
factory
&
font_builder_array
)
;
FontBuilderPtr
font_builder
=
font_builder_array
[
0
]
;
NameTableBuilderPtr
name_builder
=
down_cast
<
NameTable
:
:
Builder
*
>
(
font_builder
-
>
GetTableBuilder
(
Tag
:
:
name
)
)
;
NameEntryBuilderPtr
neb
=
name_builder
-
>
NameBuilder
(
PlatformId
:
:
kWindows
WindowsEncodingId
:
:
kUnicodeUCS2
WindowsLanguageId
:
:
kEnglish_UnitedStates
NameId
:
:
kFontFamilyName
)
;
NameTable
:
:
NameEntry
*
neb_entry
=
neb
-
>
name_entry
(
)
;
UChar
*
original_name
=
neb_entry
-
>
Name
(
)
;
EXPECT_TRUE
(
original_name
!
=
NULL
)
;
U_STRING_DECL
(
new_name
"
Timothy
"
7
)
;
neb
-
>
SetName
(
new_name
)
;
name_builder
-
>
RevertNames
(
)
;
FontPtr
font
;
font
.
Attach
(
font_builder
-
>
Build
(
)
)
;
MemoryOutputStream
os
;
factory
-
>
SerializeFont
(
font
&
os
)
;
MemoryInputStream
is
;
is
.
Attach
(
os
.
Get
(
)
os
.
Size
(
)
)
;
FontArray
font_array
;
factory
-
>
LoadFonts
(
&
is
&
font_array
)
;
FontPtr
new_font
=
font_array
[
0
]
;
NameTablePtr
name_table
=
down_cast
<
NameTable
*
>
(
font
-
>
GetTable
(
Tag
:
:
name
)
)
;
UChar
*
name
=
name_table
-
>
Name
(
PlatformId
:
:
kWindows
WindowsEncodingId
:
:
kUnicodeUCS2
WindowsLanguageId
:
:
kEnglish_UnitedStates
NameId
:
:
kFontFamilyName
)
;
EXPECT_EQ
(
u_strcmp
(
name
original_name
)
0
)
;
delete
[
]
name
;
delete
[
]
original_name
;
return
true
;
}
bool
TestRemoveOneName
(
)
{
FontFactoryPtr
factory
;
factory
.
Attach
(
FontFactory
:
:
GetInstance
(
)
)
;
FontBuilderArray
font_builder_array
;
LoadTestFile
(
factory
&
font_builder_array
)
;
FontBuilderPtr
font_builder
=
font_builder_array
[
0
]
;
NameTableBuilderPtr
name_builder
=
down_cast
<
NameTable
:
:
Builder
*
>
(
font_builder
-
>
GetTableBuilder
(
Tag
:
:
name
)
)
;
EXPECT_TRUE
(
name_builder
-
>
Has
(
PlatformId
:
:
kWindows
WindowsEncodingId
:
:
kUnicodeUCS2
WindowsLanguageId
:
:
kEnglish_UnitedStates
NameId
:
:
kFontFamilyName
)
)
;
EXPECT_TRUE
(
name_builder
-
>
Remove
(
PlatformId
:
:
kWindows
WindowsEncodingId
:
:
kUnicodeUCS2
WindowsLanguageId
:
:
kEnglish_UnitedStates
NameId
:
:
kFontFamilyName
)
)
;
FontPtr
font
;
font
.
Attach
(
font_builder
-
>
Build
(
)
)
;
MemoryOutputStream
os
;
factory
-
>
SerializeFont
(
font
&
os
)
;
MemoryInputStream
is
;
is
.
Attach
(
os
.
Get
(
)
os
.
Size
(
)
)
;
FontArray
font_array
;
factory
-
>
LoadFonts
(
&
is
&
font_array
)
;
FontPtr
new_font
=
font_array
[
0
]
;
NameTablePtr
name_table
=
down_cast
<
NameTable
*
>
(
font
-
>
GetTable
(
Tag
:
:
name
)
)
;
UChar
*
name
=
name_table
-
>
Name
(
PlatformId
:
:
kWindows
WindowsEncodingId
:
:
kUnicodeUCS2
WindowsLanguageId
:
:
kEnglish_UnitedStates
NameId
:
:
kFontFamilyName
)
;
EXPECT_TRUE
(
name
=
=
NULL
)
;
return
true
;
}
}
TEST
(
NameEditing
All
)
{
EXPECT_TRUE
(
sfntly
:
:
TestChangeOneName
(
)
)
;
EXPECT_TRUE
(
sfntly
:
:
TestModifyNameTableAndRevert
(
)
)
;
EXPECT_TRUE
(
sfntly
:
:
TestRemoveOneName
(
)
)
;
}
