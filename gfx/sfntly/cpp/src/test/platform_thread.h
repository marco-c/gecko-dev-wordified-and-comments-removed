#
ifndef
SFNTLY_CPP_SRC_TEST_PLATFORM_THREAD_H_
#
define
SFNTLY_CPP_SRC_TEST_PLATFORM_THREAD_H_
#
if
defined
(
WIN32
)
#
include
<
windows
.
h
>
#
else
#
include
<
errno
.
h
>
#
include
<
pthread
.
h
>
#
include
<
time
.
h
>
#
endif
#
include
"
sfntly
/
port
/
type
.
h
"
namespace
sfntly
{
#
if
defined
(
WIN32
)
typedef
HANDLE
PlatformThreadHandle
;
const
PlatformThreadHandle
kNullThreadHandle
=
NULL
;
#
else
typedef
pthread_t
PlatformThreadHandle
;
const
PlatformThreadHandle
kNullThreadHandle
=
0
;
#
endif
class
PlatformThread
{
public
:
class
Delegate
{
public
:
virtual
~
Delegate
(
)
{
}
virtual
void
ThreadMain
(
)
=
0
;
}
;
static
void
Sleep
(
int32_t
duration_ms
)
;
static
bool
Create
(
Delegate
*
delegate
PlatformThreadHandle
*
thread_handle
)
;
static
void
Join
(
PlatformThreadHandle
thread_handle
)
;
private
:
PlatformThread
(
)
{
}
NO_COPY_AND_ASSIGN
(
PlatformThread
)
;
}
;
}
#
endif
