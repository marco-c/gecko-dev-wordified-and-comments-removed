#
include
"
gtest
/
gtest
.
h
"
#
include
"
sfntly
/
font
.
h
"
#
include
"
sfntly
/
math
/
fixed1616
.
h
"
#
include
"
sfntly
/
table
/
core
/
horizontal_header_table
.
h
"
#
include
"
test
/
serialization_test
.
h
"
namespace
sfntly
{
const
int32_t
HHEA_ASCENDER
=
2023
;
const
int32_t
HHEA_DESCENDER
=
-
648
;
const
int32_t
HHEA_ADVANCE_WIDTH_MAX
=
2753
;
const
int32_t
HHEA_MIN_LSB
=
-
968
;
const
int32_t
HHEA_MIN_RSB
=
-
411
;
const
int32_t
HHEA_X_MAX_EXTENT
=
2628
;
const
int32_t
HHEA_METRIC_DATA_FORMAT
=
0
;
const
int32_t
HHEA_NUM_METRICS
=
1499
;
static
bool
VerifyHHEA
(
Table
*
table
)
{
HorizontalHeaderTablePtr
hhea
=
down_cast
<
HorizontalHeaderTable
*
>
(
table
)
;
if
(
hhea
=
=
NULL
)
{
return
false
;
}
EXPECT_EQ
(
hhea
-
>
TableVersion
(
)
Fixed1616
:
:
Fixed
(
1
0
)
)
;
EXPECT_EQ
(
hhea
-
>
Ascender
(
)
HHEA_ASCENDER
)
;
EXPECT_EQ
(
hhea
-
>
Descender
(
)
HHEA_DESCENDER
)
;
EXPECT_EQ
(
hhea
-
>
AdvanceWidthMax
(
)
HHEA_ADVANCE_WIDTH_MAX
)
;
EXPECT_EQ
(
hhea
-
>
MinLeftSideBearing
(
)
HHEA_MIN_LSB
)
;
EXPECT_EQ
(
hhea
-
>
MinRightSideBearing
(
)
HHEA_MIN_RSB
)
;
EXPECT_EQ
(
hhea
-
>
XMaxExtent
(
)
HHEA_X_MAX_EXTENT
)
;
EXPECT_EQ
(
hhea
-
>
MetricDataFormat
(
)
HHEA_METRIC_DATA_FORMAT
)
;
EXPECT_EQ
(
hhea
-
>
NumberOfHMetrics
(
)
HHEA_NUM_METRICS
)
;
return
true
;
}
bool
VerifyHHEA
(
Table
*
original
Table
*
target
)
{
EXPECT_TRUE
(
VerifyHHEA
(
original
)
)
;
EXPECT_TRUE
(
VerifyHHEA
(
target
)
)
;
return
true
;
}
}
