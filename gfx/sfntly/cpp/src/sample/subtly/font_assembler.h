#
ifndef
TYPOGRAPHY_FONT_SFNTLY_SRC_SAMPLE_SUBTLY_FONT_ASSEMBLER_H_
#
define
TYPOGRAPHY_FONT_SFNTLY_SRC_SAMPLE_SUBTLY_FONT_ASSEMBLER_H_
#
include
<
set
>
#
include
<
map
>
#
include
"
subtly
/
font_info
.
h
"
#
include
"
sfntly
/
tag
.
h
"
#
include
"
sfntly
/
font
.
h
"
#
include
"
sfntly
/
port
/
type
.
h
"
#
include
"
sfntly
/
port
/
refcount
.
h
"
#
include
"
sfntly
/
table
/
core
/
cmap_table
.
h
"
#
include
"
sfntly
/
table
/
truetype
/
glyph_table
.
h
"
#
include
"
sfntly
/
table
/
truetype
/
loca_table
.
h
"
namespace
subtly
{
class
FontAssembler
:
public
sfntly
:
:
RefCounted
<
FontAssembler
>
{
public
:
FontAssembler
(
FontInfo
*
font_info
sfntly
:
:
IntegerSet
*
table_blacklist
)
;
explicit
FontAssembler
(
FontInfo
*
font_info
)
;
~
FontAssembler
(
)
{
}
virtual
CALLER_ATTACH
sfntly
:
:
Font
*
Assemble
(
)
;
sfntly
:
:
IntegerSet
*
table_blacklist
(
)
const
{
return
table_blacklist_
;
}
void
set_table_blacklist
(
sfntly
:
:
IntegerSet
*
table_blacklist
)
{
table_blacklist_
=
table_blacklist
;
}
protected
:
virtual
bool
AssembleCMapTable
(
)
;
virtual
bool
AssembleGlyphAndLocaTables
(
)
;
virtual
void
Initialize
(
)
;
private
:
sfntly
:
:
Ptr
<
FontInfo
>
font_info_
;
sfntly
:
:
Ptr
<
sfntly
:
:
FontFactory
>
font_factory_
;
sfntly
:
:
Ptr
<
sfntly
:
:
Font
:
:
Builder
>
font_builder_
;
sfntly
:
:
IntegerSet
*
table_blacklist_
;
}
;
}
#
endif
