#
ifndef
TYPOGRAPHY_FONT_SFNTLY_SRC_SAMPLE_SUBTLY_FONT_INFO_H_
#
define
TYPOGRAPHY_FONT_SFNTLY_SRC_SAMPLE_SUBTLY_FONT_INFO_H_
#
include
<
map
>
#
include
<
set
>
#
include
"
sfntly
/
font
.
h
"
#
include
"
sfntly
/
port
/
type
.
h
"
#
include
"
sfntly
/
port
/
refcount
.
h
"
#
include
"
sfntly
/
table
/
core
/
cmap_table
.
h
"
#
include
"
sfntly
/
table
/
truetype
/
glyph_table
.
h
"
#
include
"
sfntly
/
table
/
truetype
/
loca_table
.
h
"
namespace
subtly
{
class
CharacterPredicate
;
typedef
int32_t
FontId
;
typedef
std
:
:
map
<
FontId
sfntly
:
:
Ptr
<
sfntly
:
:
Font
>
>
FontIdMap
;
class
GlyphId
{
public
:
GlyphId
(
int32_t
glyph_id
FontId
font_id
)
;
~
GlyphId
(
)
{
}
bool
operator
=
=
(
const
GlyphId
&
other
)
const
;
bool
operator
<
(
const
GlyphId
&
other
)
const
;
int32_t
glyph_id
(
)
const
{
return
glyph_id_
;
}
void
set_glyph_id
(
const
int32_t
glyph_id
)
{
glyph_id_
=
glyph_id
;
}
FontId
font_id
(
)
const
{
return
font_id_
;
}
void
set_font_id
(
const
FontId
font_id
)
{
font_id_
=
font_id
;
}
private
:
int32_t
glyph_id_
;
FontId
font_id_
;
}
;
typedef
std
:
:
map
<
int32_t
GlyphId
>
CharacterMap
;
typedef
std
:
:
set
<
GlyphId
>
GlyphIdSet
;
class
FontInfo
:
public
sfntly
:
:
RefCounted
<
FontInfo
>
{
public
:
FontInfo
(
)
;
FontInfo
(
CharacterMap
*
chars_to_glyph_ids
GlyphIdSet
*
resolved_glyph_ids
FontIdMap
*
fonts
)
;
virtual
~
FontInfo
(
)
;
virtual
sfntly
:
:
FontDataTable
*
GetTable
(
FontId
font_id
int32_t
tag
)
;
virtual
const
sfntly
:
:
TableMap
*
GetTableMap
(
FontId
)
;
CharacterMap
*
chars_to_glyph_ids
(
)
const
{
return
chars_to_glyph_ids_
;
}
void
set_chars_to_glyph_ids
(
CharacterMap
*
chars_to_glyph_ids
)
;
GlyphIdSet
*
resolved_glyph_ids
(
)
const
{
return
resolved_glyph_ids_
;
}
void
set_resolved_glyph_ids
(
GlyphIdSet
*
glyph_ids
)
;
FontIdMap
*
fonts
(
)
const
{
return
fonts_
;
}
void
set_fonts
(
FontIdMap
*
fonts
)
;
private
:
CharacterMap
*
chars_to_glyph_ids_
;
GlyphIdSet
*
resolved_glyph_ids_
;
FontIdMap
*
fonts_
;
}
;
class
FontSourcedInfoBuilder
:
public
sfntly
:
:
RefCounted
<
FontSourcedInfoBuilder
>
{
public
:
FontSourcedInfoBuilder
(
sfntly
:
:
Font
*
font
FontId
font_id
)
;
FontSourcedInfoBuilder
(
sfntly
:
:
Font
*
font
FontId
font_id
CharacterPredicate
*
predicate
)
;
virtual
~
FontSourcedInfoBuilder
(
)
{
}
virtual
CALLER_ATTACH
FontInfo
*
GetFontInfo
(
)
;
protected
:
bool
GetCharacterMap
(
CharacterMap
*
chars_to_glyph_ids
)
;
bool
ResolveCompositeGlyphs
(
CharacterMap
*
chars_to_glyph_ids
GlyphIdSet
*
resolved_glyph_ids
)
;
void
Initialize
(
)
;
private
:
sfntly
:
:
Ptr
<
sfntly
:
:
Font
>
font_
;
FontId
font_id_
;
CharacterPredicate
*
predicate_
;
sfntly
:
:
Ptr
<
sfntly
:
:
CMapTable
:
:
CMap
>
cmap_
;
sfntly
:
:
Ptr
<
sfntly
:
:
LocaTable
>
loca_table_
;
sfntly
:
:
Ptr
<
sfntly
:
:
GlyphTable
>
glyph_table_
;
}
;
}
#
endif
