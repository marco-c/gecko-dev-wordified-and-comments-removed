#
include
"
BreakVariableAliasingInInnerLoops
.
h
"
#
include
"
compiler
/
translator
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
class
AliasingBreaker
:
public
TIntermTraverser
{
public
:
AliasingBreaker
(
)
:
TIntermTraverser
(
true
false
true
)
{
}
protected
:
bool
visitBinary
(
Visit
visit
TIntermBinary
*
binary
)
{
if
(
visit
!
=
PreVisit
)
{
return
false
;
}
if
(
mLoopLevel
<
2
|
|
!
binary
-
>
isAssignment
(
)
)
{
return
true
;
}
TIntermTyped
*
B
=
binary
-
>
getRight
(
)
;
TType
type
=
B
-
>
getType
(
)
;
if
(
!
type
.
isScalar
(
)
&
&
!
type
.
isVector
(
)
&
&
!
type
.
isMatrix
(
)
)
{
return
true
;
}
if
(
type
.
isArray
(
)
|
|
IsSampler
(
type
.
getBasicType
(
)
)
)
{
return
true
;
}
TIntermBinary
*
bPlusZero
=
new
TIntermBinary
(
EOpAdd
B
CreateZeroNode
(
type
)
)
;
bPlusZero
-
>
setLine
(
B
-
>
getLine
(
)
)
;
binary
-
>
replaceChildNode
(
B
bPlusZero
)
;
return
true
;
}
bool
visitLoop
(
Visit
visit
TIntermLoop
*
loop
)
{
if
(
visit
=
=
PreVisit
)
{
mLoopLevel
+
+
;
}
else
{
ASSERT
(
mLoopLevel
>
0
)
;
mLoopLevel
-
-
;
}
return
true
;
}
private
:
int
mLoopLevel
=
0
;
}
;
}
void
BreakVariableAliasingInInnerLoops
(
TIntermNode
*
root
)
{
AliasingBreaker
breaker
;
root
-
>
traverse
(
&
breaker
)
;
}
}
