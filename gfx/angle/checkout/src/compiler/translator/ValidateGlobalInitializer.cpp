#
include
"
compiler
/
translator
/
ValidateGlobalInitializer
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
const
int
kMaxAllowedTraversalDepth
=
256
;
class
ValidateGlobalInitializerTraverser
:
public
TIntermTraverser
{
public
:
ValidateGlobalInitializerTraverser
(
int
shaderVersion
)
;
void
visitSymbol
(
TIntermSymbol
*
node
)
override
;
void
visitConstantUnion
(
TIntermConstantUnion
*
node
)
override
;
bool
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
override
;
bool
visitBinary
(
Visit
visit
TIntermBinary
*
node
)
override
;
bool
visitUnary
(
Visit
visit
TIntermUnary
*
node
)
override
;
bool
isValid
(
)
const
{
return
mIsValid
&
&
mMaxDepth
<
mMaxAllowedDepth
;
}
bool
issueWarning
(
)
const
{
return
mIssueWarning
;
}
private
:
int
mShaderVersion
;
bool
mIsValid
;
bool
mIssueWarning
;
}
;
void
ValidateGlobalInitializerTraverser
:
:
visitSymbol
(
TIntermSymbol
*
node
)
{
switch
(
node
-
>
getType
(
)
.
getQualifier
(
)
)
{
case
EvqConst
:
break
;
case
EvqGlobal
:
case
EvqTemporary
:
case
EvqUniform
:
if
(
mShaderVersion
>
=
300
)
{
mIsValid
=
false
;
}
else
{
mIssueWarning
=
true
;
}
break
;
default
:
mIsValid
=
false
;
}
}
void
ValidateGlobalInitializerTraverser
:
:
visitConstantUnion
(
TIntermConstantUnion
*
node
)
{
switch
(
node
-
>
getType
(
)
.
getQualifier
(
)
)
{
case
EvqConst
:
break
;
case
EvqTemporary
:
if
(
mShaderVersion
>
=
300
)
{
mIsValid
=
false
;
}
else
{
mIssueWarning
=
true
;
}
break
;
default
:
UNREACHABLE
(
)
;
}
}
bool
ValidateGlobalInitializerTraverser
:
:
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
{
if
(
node
-
>
isFunctionCall
(
)
)
{
mIsValid
=
false
;
}
return
true
;
}
bool
ValidateGlobalInitializerTraverser
:
:
visitBinary
(
Visit
visit
TIntermBinary
*
node
)
{
if
(
node
-
>
isAssignment
(
)
)
{
mIsValid
=
false
;
}
return
true
;
}
bool
ValidateGlobalInitializerTraverser
:
:
visitUnary
(
Visit
visit
TIntermUnary
*
node
)
{
if
(
node
-
>
isAssignment
(
)
)
{
mIsValid
=
false
;
}
return
true
;
}
ValidateGlobalInitializerTraverser
:
:
ValidateGlobalInitializerTraverser
(
int
shaderVersion
)
:
TIntermTraverser
(
true
false
false
nullptr
)
mShaderVersion
(
shaderVersion
)
mIsValid
(
true
)
mIssueWarning
(
false
)
{
setMaxAllowedDepth
(
kMaxAllowedTraversalDepth
)
;
}
}
bool
ValidateGlobalInitializer
(
TIntermTyped
*
initializer
int
shaderVersion
bool
*
warning
)
{
ValidateGlobalInitializerTraverser
validate
(
shaderVersion
)
;
initializer
-
>
traverse
(
&
validate
)
;
ASSERT
(
warning
!
=
nullptr
)
;
*
warning
=
validate
.
issueWarning
(
)
;
return
validate
.
isValid
(
)
;
}
}
