#
ifndef
COMMON_BLOCKLAYOUT_H_
#
define
COMMON_BLOCKLAYOUT_H_
#
include
<
cstddef
>
#
include
<
map
>
#
include
<
vector
>
#
include
<
GLSLANG
/
ShaderLang
.
h
>
#
include
"
angle_gl
.
h
"
namespace
sh
{
struct
ShaderVariable
;
struct
InterfaceBlockField
;
struct
Uniform
;
struct
Varying
;
struct
InterfaceBlock
;
struct
BlockMemberInfo
{
constexpr
BlockMemberInfo
(
)
=
default
;
constexpr
BlockMemberInfo
(
int
offset
int
arrayStride
int
matrixStride
bool
isRowMajorMatrix
)
:
offset
(
offset
)
arrayStride
(
arrayStride
)
matrixStride
(
matrixStride
)
isRowMajorMatrix
(
isRowMajorMatrix
)
{
}
constexpr
BlockMemberInfo
(
int
offset
int
arrayStride
int
matrixStride
bool
isRowMajorMatrix
int
topLevelArrayStride
)
:
offset
(
offset
)
arrayStride
(
arrayStride
)
matrixStride
(
matrixStride
)
isRowMajorMatrix
(
isRowMajorMatrix
)
topLevelArrayStride
(
topLevelArrayStride
)
{
}
int
offset
=
-
1
;
int
arrayStride
=
-
1
;
int
matrixStride
=
-
1
;
bool
isRowMajorMatrix
=
false
;
int
topLevelArrayStride
=
-
1
;
}
;
constexpr
size_t
ComponentAlignment
(
size_t
numComponents
)
{
return
(
numComponents
=
=
3u
?
4u
:
numComponents
)
;
}
constexpr
BlockMemberInfo
kDefaultBlockMemberInfo
;
class
BlockLayoutEncoder
{
public
:
BlockLayoutEncoder
(
)
;
virtual
~
BlockLayoutEncoder
(
)
{
}
BlockMemberInfo
encodeType
(
GLenum
type
const
std
:
:
vector
<
unsigned
int
>
&
arraySizes
bool
isRowMajorMatrix
)
;
size_t
getCurrentOffset
(
)
const
{
return
mCurrentOffset
*
kBytesPerComponent
;
}
size_t
getShaderVariableSize
(
const
ShaderVariable
&
structVar
bool
isRowMajor
)
;
virtual
void
enterAggregateType
(
const
ShaderVariable
&
structVar
)
=
0
;
virtual
void
exitAggregateType
(
const
ShaderVariable
&
structVar
)
=
0
;
static
constexpr
size_t
kBytesPerComponent
=
4u
;
static
constexpr
unsigned
int
kComponentsPerRegister
=
4u
;
static
size_t
GetBlockRegister
(
const
BlockMemberInfo
&
info
)
;
static
size_t
GetBlockRegisterElement
(
const
BlockMemberInfo
&
info
)
;
protected
:
void
align
(
size_t
baseAlignment
)
;
virtual
void
getBlockLayoutInfo
(
GLenum
type
const
std
:
:
vector
<
unsigned
int
>
&
arraySizes
bool
isRowMajorMatrix
int
*
arrayStrideOut
int
*
matrixStrideOut
)
=
0
;
virtual
void
advanceOffset
(
GLenum
type
const
std
:
:
vector
<
unsigned
int
>
&
arraySizes
bool
isRowMajorMatrix
int
arrayStride
int
matrixStride
)
=
0
;
size_t
mCurrentOffset
;
}
;
class
DummyBlockEncoder
:
public
BlockLayoutEncoder
{
public
:
DummyBlockEncoder
(
)
=
default
;
void
enterAggregateType
(
const
ShaderVariable
&
structVar
)
override
{
}
void
exitAggregateType
(
const
ShaderVariable
&
structVar
)
override
{
}
protected
:
void
getBlockLayoutInfo
(
GLenum
type
const
std
:
:
vector
<
unsigned
int
>
&
arraySizes
bool
isRowMajorMatrix
int
*
arrayStrideOut
int
*
matrixStrideOut
)
override
;
void
advanceOffset
(
GLenum
type
const
std
:
:
vector
<
unsigned
int
>
&
arraySizes
bool
isRowMajorMatrix
int
arrayStride
int
matrixStride
)
override
{
}
}
;
class
Std140BlockEncoder
:
public
BlockLayoutEncoder
{
public
:
Std140BlockEncoder
(
)
;
void
enterAggregateType
(
const
ShaderVariable
&
structVar
)
override
;
void
exitAggregateType
(
const
ShaderVariable
&
structVar
)
override
;
protected
:
void
getBlockLayoutInfo
(
GLenum
type
const
std
:
:
vector
<
unsigned
int
>
&
arraySizes
bool
isRowMajorMatrix
int
*
arrayStrideOut
int
*
matrixStrideOut
)
override
;
void
advanceOffset
(
GLenum
type
const
std
:
:
vector
<
unsigned
int
>
&
arraySizes
bool
isRowMajorMatrix
int
arrayStride
int
matrixStride
)
override
;
virtual
size_t
getBaseAlignment
(
const
ShaderVariable
&
variable
)
const
;
virtual
size_t
getTypeBaseAlignment
(
GLenum
type
bool
isRowMajorMatrix
)
const
;
}
;
class
Std430BlockEncoder
:
public
Std140BlockEncoder
{
public
:
Std430BlockEncoder
(
)
;
protected
:
size_t
getBaseAlignment
(
const
ShaderVariable
&
variable
)
const
override
;
size_t
getTypeBaseAlignment
(
GLenum
type
bool
isRowMajorMatrix
)
const
override
;
}
;
using
BlockLayoutMap
=
std
:
:
map
<
std
:
:
string
BlockMemberInfo
>
;
void
GetInterfaceBlockInfo
(
const
std
:
:
vector
<
InterfaceBlockField
>
&
fields
const
std
:
:
string
&
prefix
BlockLayoutEncoder
*
encoder
BlockLayoutMap
*
blockInfoOut
)
;
void
GetUniformBlockInfo
(
const
std
:
:
vector
<
Uniform
>
&
uniforms
const
std
:
:
string
&
prefix
BlockLayoutEncoder
*
encoder
BlockLayoutMap
*
blockInfoOut
)
;
class
ShaderVariableVisitor
{
public
:
virtual
~
ShaderVariableVisitor
(
)
{
}
virtual
void
enterStruct
(
const
ShaderVariable
&
structVar
)
{
}
virtual
void
exitStruct
(
const
ShaderVariable
&
structVar
)
{
}
virtual
void
enterStructAccess
(
const
ShaderVariable
&
structVar
bool
isRowMajor
)
{
}
virtual
void
exitStructAccess
(
const
ShaderVariable
&
structVar
bool
isRowMajor
)
{
}
virtual
void
enterArray
(
const
ShaderVariable
&
arrayVar
)
{
}
virtual
void
exitArray
(
const
ShaderVariable
&
arrayVar
)
{
}
virtual
void
enterArrayElement
(
const
ShaderVariable
&
arrayVar
unsigned
int
arrayElement
)
{
}
virtual
void
exitArrayElement
(
const
ShaderVariable
&
arrayVar
unsigned
int
arrayElement
)
{
}
virtual
void
visitSampler
(
const
sh
:
:
ShaderVariable
&
sampler
)
{
}
virtual
void
visitVariable
(
const
ShaderVariable
&
variable
bool
isRowMajor
)
=
0
;
protected
:
ShaderVariableVisitor
(
)
{
}
}
;
class
VariableNameVisitor
:
public
ShaderVariableVisitor
{
public
:
VariableNameVisitor
(
const
std
:
:
string
&
namePrefix
const
std
:
:
string
&
mappedNamePrefix
)
;
~
VariableNameVisitor
(
)
override
;
void
enterStruct
(
const
ShaderVariable
&
structVar
)
override
;
void
exitStruct
(
const
ShaderVariable
&
structVar
)
override
;
void
enterStructAccess
(
const
ShaderVariable
&
structVar
bool
isRowMajor
)
override
;
void
exitStructAccess
(
const
ShaderVariable
&
structVar
bool
isRowMajor
)
override
;
void
enterArray
(
const
ShaderVariable
&
arrayVar
)
override
;
void
exitArray
(
const
ShaderVariable
&
arrayVar
)
override
;
void
enterArrayElement
(
const
ShaderVariable
&
arrayVar
unsigned
int
arrayElement
)
override
;
void
exitArrayElement
(
const
ShaderVariable
&
arrayVar
unsigned
int
arrayElement
)
override
;
protected
:
virtual
void
visitNamedSampler
(
const
sh
:
:
ShaderVariable
&
sampler
const
std
:
:
string
&
name
const
std
:
:
string
&
mappedName
)
{
}
virtual
void
visitNamedVariable
(
const
ShaderVariable
&
variable
bool
isRowMajor
const
std
:
:
string
&
name
const
std
:
:
string
&
mappedName
)
=
0
;
std
:
:
string
collapseNameStack
(
)
const
;
std
:
:
string
collapseMappedNameStack
(
)
const
;
private
:
void
visitSampler
(
const
sh
:
:
ShaderVariable
&
sampler
)
final
;
void
visitVariable
(
const
ShaderVariable
&
variable
bool
isRowMajor
)
final
;
std
:
:
vector
<
std
:
:
string
>
mNameStack
;
std
:
:
vector
<
std
:
:
string
>
mMappedNameStack
;
}
;
class
BlockEncoderVisitor
:
public
VariableNameVisitor
{
public
:
BlockEncoderVisitor
(
const
std
:
:
string
&
namePrefix
const
std
:
:
string
&
mappedNamePrefix
BlockLayoutEncoder
*
encoder
)
;
~
BlockEncoderVisitor
(
)
override
;
void
enterStructAccess
(
const
ShaderVariable
&
structVar
bool
isRowMajor
)
override
;
void
exitStructAccess
(
const
ShaderVariable
&
structVar
bool
isRowMajor
)
override
;
void
enterArrayElement
(
const
ShaderVariable
&
arrayVar
unsigned
int
arrayElement
)
override
;
void
exitArrayElement
(
const
ShaderVariable
&
arrayVar
unsigned
int
arrayElement
)
override
;
void
visitNamedVariable
(
const
ShaderVariable
&
variable
bool
isRowMajor
const
std
:
:
string
&
name
const
std
:
:
string
&
mappedName
)
override
;
virtual
void
encodeVariable
(
const
ShaderVariable
&
variable
const
BlockMemberInfo
&
variableInfo
const
std
:
:
string
&
name
const
std
:
:
string
&
mappedName
)
{
}
protected
:
int
mTopLevelArraySize
=
1
;
int
mTopLevelArrayStride
=
0
;
bool
mIsTopLevelArrayStrideReady
=
true
;
bool
mSkipEnabled
=
false
;
private
:
BlockLayoutEncoder
*
mEncoder
;
unsigned
int
mStructStackSize
=
0
;
}
;
void
TraverseShaderVariable
(
const
ShaderVariable
&
variable
bool
isRowMajorLayout
ShaderVariableVisitor
*
visitor
)
;
template
<
typename
T
>
void
TraverseShaderVariables
(
const
std
:
:
vector
<
T
>
&
vars
bool
isRowMajorLayout
ShaderVariableVisitor
*
visitor
)
{
for
(
const
T
&
var
:
vars
)
{
TraverseShaderVariable
(
var
isRowMajorLayout
visitor
)
;
}
}
}
#
endif
