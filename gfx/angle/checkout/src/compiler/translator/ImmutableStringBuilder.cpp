#
include
"
compiler
/
translator
/
ImmutableStringBuilder
.
h
"
namespace
sh
{
ImmutableStringBuilder
&
ImmutableStringBuilder
:
:
operator
<
<
(
const
ImmutableString
&
str
)
{
ASSERT
(
mData
!
=
nullptr
)
;
ASSERT
(
mPos
+
str
.
length
(
)
<
=
mMaxLength
)
;
memcpy
(
mData
+
mPos
str
.
data
(
)
str
.
length
(
)
)
;
mPos
+
=
str
.
length
(
)
;
return
*
this
;
}
ImmutableStringBuilder
&
ImmutableStringBuilder
:
:
operator
<
<
(
const
char
*
str
)
{
ASSERT
(
mData
!
=
nullptr
)
;
size_t
len
=
strlen
(
str
)
;
ASSERT
(
mPos
+
len
<
=
mMaxLength
)
;
memcpy
(
mData
+
mPos
str
len
)
;
mPos
+
=
len
;
return
*
this
;
}
ImmutableStringBuilder
&
ImmutableStringBuilder
:
:
operator
<
<
(
const
char
&
c
)
{
ASSERT
(
mData
!
=
nullptr
)
;
ASSERT
(
mPos
+
1
<
=
mMaxLength
)
;
mData
[
mPos
+
+
]
=
c
;
return
*
this
;
}
ImmutableStringBuilder
:
:
operator
ImmutableString
(
)
{
mData
[
mPos
]
=
'
\
0
'
;
ImmutableString
str
(
static_cast
<
const
char
*
>
(
mData
)
mPos
)
;
#
if
defined
(
ANGLE_ENABLE_ASSERTS
)
mData
=
nullptr
;
#
endif
return
str
;
}
}
