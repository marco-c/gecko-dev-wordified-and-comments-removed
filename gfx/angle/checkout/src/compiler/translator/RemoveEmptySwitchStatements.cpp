#
include
"
compiler
/
translator
/
RemoveEmptySwitchStatements
.
h
"
#
include
"
compiler
/
translator
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
class
RemoveEmptySwitchStatementsTraverser
:
public
TIntermTraverser
{
public
:
RemoveEmptySwitchStatementsTraverser
(
)
:
TIntermTraverser
(
true
false
false
)
{
}
bool
visitSwitch
(
Visit
visit
TIntermSwitch
*
node
)
;
}
;
bool
RemoveEmptySwitchStatementsTraverser
:
:
visitSwitch
(
Visit
visit
TIntermSwitch
*
node
)
{
if
(
node
-
>
getStatementList
(
)
-
>
getSequence
(
)
-
>
empty
(
)
)
{
if
(
node
-
>
getInit
(
)
-
>
hasSideEffects
(
)
)
{
queueReplacement
(
node
-
>
getInit
(
)
OriginalNode
:
:
IS_DROPPED
)
;
}
else
{
TIntermSequence
emptyReplacement
;
ASSERT
(
getParentNode
(
)
-
>
getAsBlock
(
)
)
;
mMultiReplacements
.
push_back
(
NodeReplaceWithMultipleEntry
(
getParentNode
(
)
-
>
getAsBlock
(
)
node
emptyReplacement
)
)
;
}
return
false
;
}
return
true
;
}
}
void
RemoveEmptySwitchStatements
(
TIntermBlock
*
root
)
{
RemoveEmptySwitchStatementsTraverser
traverser
;
root
-
>
traverse
(
&
traverser
)
;
traverser
.
updateTree
(
)
;
}
}
