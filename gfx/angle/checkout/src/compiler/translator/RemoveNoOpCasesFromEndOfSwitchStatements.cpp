#
include
"
compiler
/
translator
/
RemoveNoOpCasesFromEndOfSwitchStatements
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
#
include
"
compiler
/
translator
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
IntermTraverse
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
namespace
sh
{
namespace
{
bool
AreEmptyBlocks
(
TIntermSequence
*
statements
size_t
i
)
;
bool
IsEmptyBlock
(
TIntermNode
*
node
)
{
TIntermBlock
*
asBlock
=
node
-
>
getAsBlock
(
)
;
if
(
asBlock
)
{
if
(
asBlock
-
>
getSequence
(
)
-
>
empty
(
)
)
{
return
true
;
}
return
AreEmptyBlocks
(
asBlock
-
>
getSequence
(
)
0u
)
;
}
ASSERT
(
node
-
>
getAsDeclarationNode
(
)
=
=
nullptr
|
|
!
node
-
>
getAsDeclarationNode
(
)
-
>
getSequence
(
)
-
>
empty
(
)
)
;
ASSERT
(
node
-
>
getAsConstantUnion
(
)
=
=
nullptr
)
;
return
false
;
}
bool
AreEmptyBlocks
(
TIntermSequence
*
statements
size_t
i
)
{
for
(
;
i
<
statements
-
>
size
(
)
;
+
+
i
)
{
if
(
!
IsEmptyBlock
(
statements
-
>
at
(
i
)
)
)
{
return
false
;
}
}
return
true
;
}
void
RemoveNoOpCasesFromEndOfStatementList
(
TIntermBlock
*
statementList
TSymbolTable
*
symbolTable
)
{
TIntermSequence
*
statements
=
statementList
-
>
getSequence
(
)
;
bool
foundDeadCase
=
false
;
do
{
if
(
statements
-
>
empty
(
)
)
{
return
;
}
size_t
i
=
statements
-
>
size
(
)
;
while
(
i
>
0u
&
&
!
(
*
statements
)
[
i
-
1
]
-
>
getAsCaseNode
(
)
)
{
-
-
i
;
}
ASSERT
(
i
>
0u
)
;
foundDeadCase
=
AreEmptyBlocks
(
statements
i
)
;
if
(
foundDeadCase
)
{
statements
-
>
erase
(
statements
-
>
begin
(
)
+
(
i
-
1u
)
statements
-
>
end
(
)
)
;
}
}
while
(
foundDeadCase
)
;
}
class
RemoveNoOpCasesFromEndOfSwitchTraverser
:
public
TIntermTraverser
{
public
:
RemoveNoOpCasesFromEndOfSwitchTraverser
(
TSymbolTable
*
symbolTable
)
:
TIntermTraverser
(
true
false
false
symbolTable
)
{
}
bool
visitSwitch
(
Visit
visit
TIntermSwitch
*
node
)
override
;
}
;
bool
RemoveNoOpCasesFromEndOfSwitchTraverser
:
:
visitSwitch
(
Visit
visit
TIntermSwitch
*
node
)
{
RemoveNoOpCasesFromEndOfStatementList
(
node
-
>
getStatementList
(
)
mSymbolTable
)
;
return
true
;
}
}
void
RemoveNoOpCasesFromEndOfSwitchStatements
(
TIntermBlock
*
root
TSymbolTable
*
symbolTable
)
{
RemoveNoOpCasesFromEndOfSwitchTraverser
traverser
(
symbolTable
)
;
root
-
>
traverse
(
&
traverser
)
;
}
}
