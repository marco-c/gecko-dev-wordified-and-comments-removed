#
ifdef
ANGLE_ENABLE_ESSL
#
include
"
compiler
/
translator
/
TranslatorESSL
.
h
"
#
endif
#
ifdef
ANGLE_ENABLE_GLSL
#
include
"
compiler
/
translator
/
TranslatorGLSL
.
h
"
#
endif
#
ifdef
ANGLE_ENABLE_HLSL
#
include
"
compiler
/
translator
/
TranslatorHLSL
.
h
"
#
endif
#
ifdef
ANGLE_ENABLE_VULKAN
#
include
"
compiler
/
translator
/
TranslatorVulkan
.
h
"
#
endif
#
ifdef
ANGLE_ENABLE_METAL
#
include
"
compiler
/
translator
/
TranslatorMetalDirect
.
h
"
#
endif
#
ifdef
ANGLE_ENABLE_METAL_SPIRV
#
include
"
compiler
/
translator
/
TranslatorMetal
.
h
"
#
endif
#
include
"
compiler
/
translator
/
util
.
h
"
namespace
sh
{
TCompiler
*
ConstructCompiler
(
sh
:
:
GLenum
type
ShShaderSpec
spec
ShShaderOutput
output
)
{
#
ifdef
ANGLE_ENABLE_ESSL
if
(
IsOutputESSL
(
output
)
)
{
return
new
TranslatorESSL
(
type
spec
)
;
}
#
endif
#
ifdef
ANGLE_ENABLE_GLSL
if
(
IsOutputGLSL
(
output
)
)
{
return
new
TranslatorGLSL
(
type
spec
output
)
;
}
#
endif
#
ifdef
ANGLE_ENABLE_HLSL
if
(
IsOutputHLSL
(
output
)
)
{
return
new
TranslatorHLSL
(
type
spec
output
)
;
}
#
endif
#
ifdef
ANGLE_ENABLE_VULKAN
if
(
IsOutputVulkan
(
output
)
)
{
return
new
TranslatorVulkan
(
type
spec
)
;
}
#
endif
#
ifdef
ANGLE_ENABLE_METAL_SPIRV
if
(
IsOutputMetal
(
output
)
)
{
return
new
TranslatorMetal
(
type
spec
)
;
}
#
endif
#
ifdef
ANGLE_ENABLE_METAL
if
(
IsOutputMetalDirect
(
output
)
)
{
return
new
TranslatorMetalDirect
(
type
spec
output
)
;
}
#
endif
return
nullptr
;
}
void
DeleteCompiler
(
TCompiler
*
compiler
)
{
SafeDelete
(
compiler
)
;
}
}
