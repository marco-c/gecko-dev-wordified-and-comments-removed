#
include
"
compiler
/
translator
/
SeparateDeclarations
.
h
"
#
include
"
compiler
/
translator
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
class
SeparateDeclarationsTraverser
:
private
TIntermTraverser
{
public
:
static
void
apply
(
TIntermNode
*
root
)
;
private
:
SeparateDeclarationsTraverser
(
)
;
bool
visitDeclaration
(
Visit
TIntermDeclaration
*
node
)
override
;
}
;
void
SeparateDeclarationsTraverser
:
:
apply
(
TIntermNode
*
root
)
{
SeparateDeclarationsTraverser
separateDecl
;
root
-
>
traverse
(
&
separateDecl
)
;
separateDecl
.
updateTree
(
)
;
}
SeparateDeclarationsTraverser
:
:
SeparateDeclarationsTraverser
(
)
:
TIntermTraverser
(
true
false
false
)
{
}
bool
SeparateDeclarationsTraverser
:
:
visitDeclaration
(
Visit
TIntermDeclaration
*
node
)
{
TIntermSequence
*
sequence
=
node
-
>
getSequence
(
)
;
if
(
sequence
-
>
size
(
)
>
1
)
{
TIntermBlock
*
parentBlock
=
getParentNode
(
)
-
>
getAsBlock
(
)
;
ASSERT
(
parentBlock
!
=
nullptr
)
;
TIntermSequence
replacementDeclarations
;
for
(
size_t
ii
=
0
;
ii
<
sequence
-
>
size
(
)
;
+
+
ii
)
{
TIntermDeclaration
*
replacementDeclaration
=
new
TIntermDeclaration
(
)
;
replacementDeclaration
-
>
appendDeclarator
(
sequence
-
>
at
(
ii
)
-
>
getAsTyped
(
)
)
;
replacementDeclaration
-
>
setLine
(
sequence
-
>
at
(
ii
)
-
>
getLine
(
)
)
;
replacementDeclarations
.
push_back
(
replacementDeclaration
)
;
}
mMultiReplacements
.
push_back
(
NodeReplaceWithMultipleEntry
(
parentBlock
node
replacementDeclarations
)
)
;
}
return
false
;
}
}
void
SeparateDeclarations
(
TIntermNode
*
root
)
{
SeparateDeclarationsTraverser
:
:
apply
(
root
)
;
}
}
