#
ifndef
COMPILER_TRANSLATOR_TRANSLATORVULKAN_H_
#
define
COMPILER_TRANSLATOR_TRANSLATORVULKAN_H_
#
include
"
compiler
/
translator
/
Compiler
.
h
"
namespace
sh
{
class
TOutputVulkanGLSL
;
class
SpecConst
;
class
DriverUniform
;
class
TranslatorVulkan
:
public
TCompiler
{
public
:
TranslatorVulkan
(
sh
:
:
GLenum
type
ShShaderSpec
spec
)
;
protected
:
ANGLE_NO_DISCARD
bool
translate
(
TIntermBlock
*
root
ShCompileOptions
compileOptions
PerformanceDiagnostics
*
perfDiagnostics
)
override
;
bool
shouldFlattenPragmaStdglInvariantAll
(
)
override
;
ANGLE_NO_DISCARD
bool
translateImpl
(
TInfoSinkBase
&
sink
TIntermBlock
*
root
ShCompileOptions
compileOptions
PerformanceDiagnostics
*
perfDiagnostics
SpecConst
*
specConst
DriverUniform
*
driverUniforms
)
;
ANGLE_NO_DISCARD
virtual
bool
transformDepthBeforeCorrection
(
TIntermBlock
*
root
const
DriverUniform
*
driverUniforms
)
{
return
true
;
}
ANGLE_NO_DISCARD
bool
compileToSpirv
(
const
TInfoSinkBase
&
glsl
)
;
}
;
}
#
endif
