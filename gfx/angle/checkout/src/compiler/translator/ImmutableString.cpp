#
include
"
compiler
/
translator
/
ImmutableString
.
h
"
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
os
const
sh
:
:
ImmutableString
&
str
)
{
return
os
.
write
(
str
.
data
(
)
str
.
length
(
)
)
;
}
#
if
defined
(
_MSC_VER
)
#
pragma
warning
(
disable
:
4309
)
/
/
truncation
of
constant
value
#
endif
namespace
sh
{
template
<
>
const
size_t
ImmutableString
:
:
FowlerNollVoHash
<
4
>
:
:
kFnvPrime
=
16777619u
;
template
<
>
const
size_t
ImmutableString
:
:
FowlerNollVoHash
<
4
>
:
:
kFnvOffsetBasis
=
0x811c9dc5u
;
template
<
>
const
size_t
ImmutableString
:
:
FowlerNollVoHash
<
8
>
:
:
kFnvPrime
=
static_cast
<
size_t
>
(
1099511628211ull
)
;
template
<
>
const
size_t
ImmutableString
:
:
FowlerNollVoHash
<
8
>
:
:
kFnvOffsetBasis
=
static_cast
<
size_t
>
(
0xcbf29ce484222325ull
)
;
uint32_t
ImmutableString
:
:
mangledNameHash
(
)
const
{
const
char
*
dataPtr
=
data
(
)
;
uint32_t
hash
=
static_cast
<
uint32_t
>
(
FowlerNollVoHash
<
4
>
:
:
kFnvOffsetBasis
)
;
const
uint32_t
kMaxSixBitValue
=
(
1u
<
<
6
)
-
1u
;
uint32_t
parenLocation
=
kMaxSixBitValue
;
uint32_t
hasArrayOrBlockParamBit
=
0u
;
uint32_t
index
=
0
;
while
(
dataPtr
[
index
]
!
=
'
\
0
'
)
{
hash
=
hash
^
dataPtr
[
index
]
;
hash
=
hash
*
static_cast
<
uint32_t
>
(
FowlerNollVoHash
<
4
>
:
:
kFnvPrime
)
;
if
(
dataPtr
[
index
]
=
=
'
(
'
)
{
ASSERT
(
parenLocation
=
=
kMaxSixBitValue
)
;
parenLocation
=
index
;
}
else
if
(
dataPtr
[
index
]
=
=
'
{
'
|
|
dataPtr
[
index
]
=
=
'
[
'
)
{
hasArrayOrBlockParamBit
=
1u
;
}
+
+
index
;
}
ASSERT
(
index
<
=
kMaxSixBitValue
)
;
return
(
(
hash
>
>
13
)
^
(
hash
&
0x1fff
)
)
|
(
index
<
<
19
)
|
(
parenLocation
<
<
25
)
|
(
hasArrayOrBlockParamBit
<
<
31
)
;
}
}
