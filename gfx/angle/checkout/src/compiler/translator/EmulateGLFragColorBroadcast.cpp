#
include
"
compiler
/
translator
/
EmulateGLFragColorBroadcast
.
h
"
#
include
"
compiler
/
translator
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
IntermTraverse
.
h
"
#
include
"
compiler
/
translator
/
RunAtTheEndOfShader
.
h
"
#
include
"
compiler
/
translator
/
Symbol
.
h
"
namespace
sh
{
namespace
{
constexpr
const
ImmutableString
kGlFragDataString
(
"
gl_FragData
"
)
;
class
GLFragColorBroadcastTraverser
:
public
TIntermTraverser
{
public
:
GLFragColorBroadcastTraverser
(
int
maxDrawBuffers
TSymbolTable
*
symbolTable
int
shaderVersion
)
:
TIntermTraverser
(
true
false
false
symbolTable
)
mGLFragColorUsed
(
false
)
mMaxDrawBuffers
(
maxDrawBuffers
)
mShaderVersion
(
shaderVersion
)
{
}
void
broadcastGLFragColor
(
TIntermBlock
*
root
)
;
bool
isGLFragColorUsed
(
)
const
{
return
mGLFragColorUsed
;
}
protected
:
void
visitSymbol
(
TIntermSymbol
*
node
)
override
;
TIntermBinary
*
constructGLFragDataNode
(
int
index
)
const
;
TIntermBinary
*
constructGLFragDataAssignNode
(
int
index
)
const
;
private
:
bool
mGLFragColorUsed
;
int
mMaxDrawBuffers
;
const
int
mShaderVersion
;
}
;
TIntermBinary
*
GLFragColorBroadcastTraverser
:
:
constructGLFragDataNode
(
int
index
)
const
{
TIntermSymbol
*
symbol
=
ReferenceBuiltInVariable
(
kGlFragDataString
*
mSymbolTable
mShaderVersion
)
;
TIntermTyped
*
indexNode
=
CreateIndexNode
(
index
)
;
TIntermBinary
*
binary
=
new
TIntermBinary
(
EOpIndexDirect
symbol
indexNode
)
;
return
binary
;
}
TIntermBinary
*
GLFragColorBroadcastTraverser
:
:
constructGLFragDataAssignNode
(
int
index
)
const
{
TIntermTyped
*
fragDataIndex
=
constructGLFragDataNode
(
index
)
;
TIntermTyped
*
fragDataZero
=
constructGLFragDataNode
(
0
)
;
return
new
TIntermBinary
(
EOpAssign
fragDataIndex
fragDataZero
)
;
}
void
GLFragColorBroadcastTraverser
:
:
visitSymbol
(
TIntermSymbol
*
node
)
{
if
(
node
-
>
variable
(
)
.
symbolType
(
)
=
=
SymbolType
:
:
BuiltIn
&
&
node
-
>
getName
(
)
=
=
"
gl_FragColor
"
)
{
queueReplacement
(
constructGLFragDataNode
(
0
)
OriginalNode
:
:
IS_DROPPED
)
;
mGLFragColorUsed
=
true
;
}
}
void
GLFragColorBroadcastTraverser
:
:
broadcastGLFragColor
(
TIntermBlock
*
root
)
{
ASSERT
(
mMaxDrawBuffers
>
1
)
;
if
(
!
mGLFragColorUsed
)
{
return
;
}
TIntermBlock
*
broadcastBlock
=
new
TIntermBlock
(
)
;
for
(
int
colorIndex
=
1
;
colorIndex
<
mMaxDrawBuffers
;
+
+
colorIndex
)
{
broadcastBlock
-
>
appendStatement
(
constructGLFragDataAssignNode
(
colorIndex
)
)
;
}
RunAtTheEndOfShader
(
root
broadcastBlock
mSymbolTable
)
;
}
}
void
EmulateGLFragColorBroadcast
(
TIntermBlock
*
root
int
maxDrawBuffers
std
:
:
vector
<
sh
:
:
OutputVariable
>
*
outputVariables
TSymbolTable
*
symbolTable
int
shaderVersion
)
{
ASSERT
(
maxDrawBuffers
>
1
)
;
GLFragColorBroadcastTraverser
traverser
(
maxDrawBuffers
symbolTable
shaderVersion
)
;
root
-
>
traverse
(
&
traverser
)
;
if
(
traverser
.
isGLFragColorUsed
(
)
)
{
traverser
.
updateTree
(
)
;
traverser
.
broadcastGLFragColor
(
root
)
;
for
(
auto
&
var
:
*
outputVariables
)
{
if
(
var
.
name
=
=
"
gl_FragColor
"
)
{
var
.
name
=
"
gl_FragData
"
;
var
.
mappedName
=
"
gl_FragData
"
;
var
.
arraySizes
.
push_back
(
maxDrawBuffers
)
;
ASSERT
(
var
.
arraySizes
.
size
(
)
=
=
1u
)
;
}
}
}
}
}
