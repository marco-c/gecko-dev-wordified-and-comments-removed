#
include
"
compiler
/
translator
/
HashNames
.
h
"
#
include
"
compiler
/
translator
/
ImmutableString
.
h
"
#
include
"
compiler
/
translator
/
ImmutableStringBuilder
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
#
include
"
compiler
/
translator
/
Symbol
.
h
"
namespace
sh
{
namespace
{
constexpr
const
ImmutableString
kHashedNamePrefix
(
"
webgl_
"
)
;
ImmutableString
HashName
(
const
ImmutableString
&
name
ShHashFunction64
hashFunction
)
{
ASSERT
(
!
name
.
empty
(
)
)
;
ASSERT
(
hashFunction
)
;
khronos_uint64_t
number
=
(
*
hashFunction
)
(
name
.
data
(
)
name
.
length
(
)
)
;
static
const
unsigned
int
kHexStrMaxLength
=
sizeof
(
number
)
*
2
;
static
const
size_t
kHashedNameMaxLength
=
kHashedNamePrefix
.
length
(
)
+
kHexStrMaxLength
;
ImmutableStringBuilder
hashedName
(
kHashedNameMaxLength
)
;
hashedName
<
<
kHashedNamePrefix
;
hashedName
.
appendHex
(
number
)
;
return
hashedName
;
}
void
AddToNameMapIfNotMapped
(
const
ImmutableString
&
name
const
ImmutableString
&
hashedName
NameMap
*
nameMap
)
{
if
(
nameMap
)
{
NameMap
:
:
const_iterator
it
=
nameMap
-
>
find
(
name
.
data
(
)
)
;
if
(
it
!
=
nameMap
-
>
end
(
)
)
{
return
;
}
(
*
nameMap
)
[
name
.
data
(
)
]
=
hashedName
.
data
(
)
;
}
}
}
ImmutableString
HashName
(
const
ImmutableString
&
name
ShHashFunction64
hashFunction
NameMap
*
nameMap
)
{
const
ImmutableString
kUnhashedNamePrefix
(
kUserDefinedNamePrefix
)
;
if
(
hashFunction
=
=
nullptr
)
{
if
(
name
.
length
(
)
+
kUnhashedNamePrefix
.
length
(
)
>
kESSLMaxIdentifierLength
)
{
return
name
;
}
if
(
name
=
=
"
gl_ClipDistance
"
|
|
name
=
=
"
gl_CullDistance
"
|
|
name
=
=
"
gl_LastFragData
"
)
{
return
name
;
}
ImmutableStringBuilder
prefixedName
(
kUnhashedNamePrefix
.
length
(
)
+
name
.
length
(
)
)
;
prefixedName
<
<
kUnhashedNamePrefix
<
<
name
;
ImmutableString
res
=
prefixedName
;
AddToNameMapIfNotMapped
(
name
res
nameMap
)
;
return
res
;
}
ImmutableString
hashedName
=
HashName
(
name
hashFunction
)
;
AddToNameMapIfNotMapped
(
name
hashedName
nameMap
)
;
return
hashedName
;
}
ImmutableString
HashName
(
const
TSymbol
*
symbol
ShHashFunction64
hashFunction
NameMap
*
nameMap
)
{
if
(
symbol
-
>
symbolType
(
)
=
=
SymbolType
:
:
Empty
)
{
return
kEmptyImmutableString
;
}
if
(
symbol
-
>
symbolType
(
)
=
=
SymbolType
:
:
AngleInternal
|
|
symbol
-
>
symbolType
(
)
=
=
SymbolType
:
:
BuiltIn
)
{
return
symbol
-
>
name
(
)
;
}
return
HashName
(
symbol
-
>
name
(
)
hashFunction
nameMap
)
;
}
}
