#
ifndef
COMPILER_TRANSLATOR_SHADERSTORAGEBLOCKFUNCTIONHLSL_H_
#
define
COMPILER_TRANSLATOR_SHADERSTORAGEBLOCKFUNCTIONHLSL_H_
#
include
<
set
>
#
include
"
compiler
/
translator
/
InfoSink
.
h
"
#
include
"
compiler
/
translator
/
Types
.
h
"
namespace
sh
{
class
TIntermSwizzle
;
enum
class
SSBOMethod
{
LOAD
STORE
LENGTH
ATOMIC_ADD
ATOMIC_MIN
ATOMIC_MAX
ATOMIC_AND
ATOMIC_OR
ATOMIC_XOR
ATOMIC_EXCHANGE
ATOMIC_COMPSWAP
}
;
class
ShaderStorageBlockFunctionHLSL
final
:
angle
:
:
NonCopyable
{
public
:
TString
registerShaderStorageBlockFunction
(
const
TType
&
type
SSBOMethod
method
TLayoutBlockStorage
storage
bool
rowMajor
int
matrixStride
int
unsizedArrayStride
TIntermSwizzle
*
node
)
;
void
shaderStorageBlockFunctionHeader
(
TInfoSinkBase
&
out
)
;
private
:
struct
ShaderStorageBlockFunction
{
bool
operator
<
(
const
ShaderStorageBlockFunction
&
rhs
)
const
;
TString
functionName
;
TString
typeString
;
SSBOMethod
method
;
TType
type
;
bool
rowMajor
;
int
matrixStride
;
int
unsizedArrayStride
;
TVector
<
int
>
swizzleOffsets
;
bool
isDefaultSwizzle
;
}
;
static
void
OutputSSBOLoadFunctionBody
(
TInfoSinkBase
&
out
const
ShaderStorageBlockFunction
&
ssboFunction
)
;
static
void
OutputSSBOStoreFunctionBody
(
TInfoSinkBase
&
out
const
ShaderStorageBlockFunction
&
ssboFunction
)
;
static
void
OutputSSBOLengthFunctionBody
(
TInfoSinkBase
&
out
int
unsizedArrayStride
)
;
static
void
OutputSSBOAtomicMemoryFunctionBody
(
TInfoSinkBase
&
out
const
ShaderStorageBlockFunction
&
ssboFunction
)
;
using
ShaderStorageBlockFunctionSet
=
std
:
:
set
<
ShaderStorageBlockFunction
>
;
ShaderStorageBlockFunctionSet
mRegisteredShaderStorageBlockFunctions
;
}
;
}
#
endif
