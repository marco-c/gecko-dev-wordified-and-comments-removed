#
ifndef
COMPILER_TRANSLATOR_DECLARATOR_H_
#
define
COMPILER_TRANSLATOR_DECLARATOR_H_
#
include
"
compiler
/
translator
/
Common
.
h
"
#
include
"
compiler
/
translator
/
ImmutableString
.
h
"
namespace
sh
{
class
TDeclarator
:
angle
:
:
NonCopyable
{
public
:
POOL_ALLOCATOR_NEW_DELETE
TDeclarator
(
const
ImmutableString
&
name
const
TSourceLoc
&
line
)
;
TDeclarator
(
const
ImmutableString
&
name
const
TVector
<
unsigned
int
>
*
arraySizes
const
TSourceLoc
&
line
)
;
const
ImmutableString
&
name
(
)
const
{
return
mName
;
}
bool
isArray
(
)
const
;
const
TVector
<
unsigned
int
>
*
arraySizes
(
)
const
{
return
mArraySizes
;
}
const
TSourceLoc
&
line
(
)
const
{
return
mLine
;
}
private
:
const
ImmutableString
mName
;
const
TVector
<
unsigned
int
>
*
const
mArraySizes
;
const
TSourceLoc
mLine
;
}
;
using
TDeclaratorList
=
TVector
<
TDeclarator
*
>
;
}
#
endif
