#
include
"
compiler
/
translator
/
tree_util
/
RunAtTheEndOfShader
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
#
include
"
compiler
/
translator
/
StaticType
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
FindMain
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
constexpr
const
ImmutableString
kMainString
(
"
main
"
)
;
class
ContainsReturnTraverser
:
public
TIntermTraverser
{
public
:
ContainsReturnTraverser
(
)
:
TIntermTraverser
(
true
false
false
)
mContainsReturn
(
false
)
{
}
bool
visitBranch
(
Visit
visit
TIntermBranch
*
node
)
override
{
if
(
node
-
>
getFlowOp
(
)
=
=
EOpReturn
)
{
mContainsReturn
=
true
;
}
return
false
;
}
bool
containsReturn
(
)
{
return
mContainsReturn
;
}
private
:
bool
mContainsReturn
;
}
;
bool
ContainsReturn
(
TIntermNode
*
node
)
{
ContainsReturnTraverser
traverser
;
node
-
>
traverse
(
&
traverser
)
;
return
traverser
.
containsReturn
(
)
;
}
void
WrapMainAndAppend
(
TIntermBlock
*
root
TIntermFunctionDefinition
*
main
TIntermNode
*
codeToRun
TSymbolTable
*
symbolTable
)
{
TFunction
*
oldMain
=
new
TFunction
(
symbolTable
kEmptyImmutableString
SymbolType
:
:
AngleInternal
StaticType
:
:
GetBasic
<
EbtVoid
>
(
)
false
)
;
TIntermFunctionDefinition
*
oldMainDefinition
=
CreateInternalFunctionDefinitionNode
(
*
oldMain
main
-
>
getBody
(
)
)
;
bool
replaced
=
root
-
>
replaceChildNode
(
main
oldMainDefinition
)
;
ASSERT
(
replaced
)
;
TFunction
*
newMain
=
new
TFunction
(
symbolTable
kMainString
SymbolType
:
:
UserDefined
StaticType
:
:
GetBasic
<
EbtVoid
>
(
)
false
)
;
TIntermFunctionPrototype
*
newMainProto
=
new
TIntermFunctionPrototype
(
newMain
)
;
TIntermBlock
*
newMainBody
=
new
TIntermBlock
(
)
;
TIntermAggregate
*
oldMainCall
=
TIntermAggregate
:
:
CreateFunctionCall
(
*
oldMain
new
TIntermSequence
(
)
)
;
newMainBody
-
>
appendStatement
(
oldMainCall
)
;
newMainBody
-
>
appendStatement
(
codeToRun
)
;
TIntermFunctionDefinition
*
newMainDefinition
=
new
TIntermFunctionDefinition
(
newMainProto
newMainBody
)
;
root
-
>
appendStatement
(
newMainDefinition
)
;
}
}
void
RunAtTheEndOfShader
(
TIntermBlock
*
root
TIntermNode
*
codeToRun
TSymbolTable
*
symbolTable
)
{
TIntermFunctionDefinition
*
main
=
FindMain
(
root
)
;
if
(
!
ContainsReturn
(
main
)
)
{
main
-
>
getBody
(
)
-
>
appendStatement
(
codeToRun
)
;
return
;
}
WrapMainAndAppend
(
root
main
codeToRun
symbolTable
)
;
}
}
