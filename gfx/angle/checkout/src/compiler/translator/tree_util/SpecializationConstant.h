#
ifndef
COMPILER_TRANSLATOR_TREEUTIL_SPECIALIZATIONCONSTANT_H_
#
define
COMPILER_TRANSLATOR_TREEUTIL_SPECIALIZATIONCONSTANT_H_
#
include
"
common
/
angleutils
.
h
"
#
include
"
compiler
/
translator
/
Compiler
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
class
TIntermTyped
;
class
TIntermSymbol
;
class
TVariable
;
namespace
sh
{
class
SpecConst
{
public
:
SpecConst
(
TSymbolTable
*
symbolTable
ShCompileOptions
compileOptions
GLenum
shaderType
)
;
virtual
~
SpecConst
(
)
;
TIntermSymbol
*
getLineRasterEmulation
(
)
;
TIntermTyped
*
getMultiplierXForDFdx
(
)
;
TIntermTyped
*
getMultiplierYForDFdx
(
)
;
TIntermTyped
*
getMultiplierXForDFdy
(
)
;
TIntermTyped
*
getMultiplierYForDFdy
(
)
;
TIntermTyped
*
getFragRotationMatrix
(
)
;
TIntermTyped
*
getFlipXY
(
)
;
TIntermTyped
*
getNegFlipXY
(
)
;
TIntermTyped
*
getFlipY
(
)
;
TIntermTyped
*
getFragRotationMultiplyFlipXY
(
)
;
TIntermBinary
*
getHalfRenderArea
(
)
;
void
outputLayoutString
(
TInfoSinkBase
&
sink
)
const
;
SpecConstUsageBits
getSpecConstUsageBits
(
)
const
{
return
mUsageBits
;
}
static
bool
IsSpecConstName
(
const
ImmutableString
&
name
)
;
private
:
TIntermSymbol
*
getFlipRotation
(
)
;
TIntermTyped
*
getNegFlipY
(
)
;
TIntermSymbol
*
getDrawableWidth
(
)
;
TIntermSymbol
*
getDrawableHeight
(
)
;
TIntermTyped
*
getHalfRenderAreaRotationMatrix
(
)
;
TSymbolTable
*
mSymbolTable
;
ShCompileOptions
mCompileOptions
;
SpecConstUsageBits
mUsageBits
;
}
;
}
#
endif
