#
ifndef
COMPILER_TRANSLATOR_TREEUTIL_SPECIALIZATIONCONSTANT_H_
#
define
COMPILER_TRANSLATOR_TREEUTIL_SPECIALIZATIONCONSTANT_H_
#
include
"
common
/
angleutils
.
h
"
#
include
"
compiler
/
translator
/
Compiler
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
class
TIntermBlock
;
class
TIntermTyped
;
class
TIntermSymbol
;
class
TVariable
;
namespace
sh
{
class
SpecConst
{
public
:
SpecConst
(
TSymbolTable
*
symbolTable
const
ShCompileOptions
&
compileOptions
GLenum
shaderType
)
;
virtual
~
SpecConst
(
)
;
TIntermTyped
*
getSwapXY
(
)
;
TIntermTyped
*
getDither
(
)
;
void
declareSpecConsts
(
TIntermBlock
*
root
)
;
SpecConstUsageBits
getSpecConstUsageBits
(
)
const
{
return
mUsageBits
;
}
private
:
TIntermSymbol
*
getRotation
(
)
;
TSymbolTable
*
mSymbolTable
;
const
ShCompileOptions
&
mCompileOptions
;
TVariable
*
mSurfaceRotationVar
;
TVariable
*
mDitherVar
;
SpecConstUsageBits
mUsageBits
;
}
;
}
#
endif
