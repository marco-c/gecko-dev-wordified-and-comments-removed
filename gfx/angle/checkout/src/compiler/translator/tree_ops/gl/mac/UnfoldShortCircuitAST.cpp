#
include
"
compiler
/
translator
/
tree_ops
/
gl
/
mac
/
UnfoldShortCircuitAST
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
TIntermTernary
*
UnfoldOR
(
TIntermTyped
*
x
TIntermTyped
*
y
)
{
return
new
TIntermTernary
(
x
CreateBoolNode
(
true
)
y
)
;
}
TIntermTernary
*
UnfoldAND
(
TIntermTyped
*
x
TIntermTyped
*
y
)
{
return
new
TIntermTernary
(
x
y
CreateBoolNode
(
false
)
)
;
}
class
UnfoldShortCircuitASTTraverser
:
public
TIntermTraverser
{
public
:
UnfoldShortCircuitASTTraverser
(
)
:
TIntermTraverser
(
true
false
false
)
{
}
bool
visitBinary
(
Visit
visit
TIntermBinary
*
)
override
;
}
;
bool
UnfoldShortCircuitASTTraverser
:
:
visitBinary
(
Visit
visit
TIntermBinary
*
node
)
{
TIntermTernary
*
replacement
=
nullptr
;
switch
(
node
-
>
getOp
(
)
)
{
case
EOpLogicalOr
:
replacement
=
UnfoldOR
(
node
-
>
getLeft
(
)
node
-
>
getRight
(
)
)
;
break
;
case
EOpLogicalAnd
:
replacement
=
UnfoldAND
(
node
-
>
getLeft
(
)
node
-
>
getRight
(
)
)
;
break
;
default
:
break
;
}
if
(
replacement
)
{
queueReplacement
(
replacement
OriginalNode
:
:
IS_DROPPED
)
;
}
return
true
;
}
}
bool
UnfoldShortCircuitAST
(
TCompiler
*
compiler
TIntermBlock
*
root
)
{
UnfoldShortCircuitASTTraverser
traverser
;
root
-
>
traverse
(
&
traverser
)
;
return
traverser
.
updateTree
(
compiler
root
)
;
}
}
