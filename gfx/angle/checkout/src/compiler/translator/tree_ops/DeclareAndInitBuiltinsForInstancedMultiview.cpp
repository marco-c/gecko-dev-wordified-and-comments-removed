#
include
"
compiler
/
translator
/
tree_ops
/
DeclareAndInitBuiltinsForInstancedMultiview
.
h
"
#
include
"
compiler
/
translator
/
StaticType
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
#
include
"
compiler
/
translator
/
tree_ops
/
InitializeVariables
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
BuiltIn_autogen
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
FindMain
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermTraverse
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
ReplaceVariable
.
h
"
#
include
"
compiler
/
translator
/
util
.
h
"
namespace
sh
{
namespace
{
constexpr
const
ImmutableString
kViewIDVariableName
(
"
ViewID_OVR
"
)
;
constexpr
const
ImmutableString
kInstanceIDVariableName
(
"
InstanceID
"
)
;
constexpr
const
ImmutableString
kMultiviewBaseViewLayerIndexVariableName
(
"
multiviewBaseViewLayerIndex
"
)
;
void
InitializeViewIDAndInstanceID
(
const
TVariable
*
viewID
const
TVariable
*
instanceID
unsigned
numberOfViews
const
TSymbolTable
&
symbolTable
TIntermSequence
*
initializers
)
{
TConstantUnion
*
numberOfViewsUnsignedConstant
=
new
TConstantUnion
(
)
;
numberOfViewsUnsignedConstant
-
>
setUConst
(
numberOfViews
)
;
TIntermConstantUnion
*
numberOfViewsUint
=
new
TIntermConstantUnion
(
numberOfViewsUnsignedConstant
TType
(
EbtUInt
EbpHigh
EvqConst
)
)
;
TIntermSequence
*
glInstanceIDSymbolCastArguments
=
new
TIntermSequence
(
)
;
glInstanceIDSymbolCastArguments
-
>
push_back
(
new
TIntermSymbol
(
BuiltInVariable
:
:
gl_InstanceID
(
)
)
)
;
TIntermAggregate
*
glInstanceIDAsUint
=
TIntermAggregate
:
:
CreateConstructor
(
TType
(
EbtUInt
EbpHigh
EvqTemporary
)
glInstanceIDSymbolCastArguments
)
;
TIntermBinary
*
normalizedInstanceID
=
new
TIntermBinary
(
EOpDiv
glInstanceIDAsUint
numberOfViewsUint
)
;
TIntermSequence
*
normalizedInstanceIDCastArguments
=
new
TIntermSequence
(
)
;
normalizedInstanceIDCastArguments
-
>
push_back
(
normalizedInstanceID
)
;
TIntermAggregate
*
normalizedInstanceIDAsInt
=
TIntermAggregate
:
:
CreateConstructor
(
TType
(
EbtInt
EbpHigh
EvqTemporary
)
normalizedInstanceIDCastArguments
)
;
TIntermBinary
*
instanceIDInitializer
=
new
TIntermBinary
(
EOpAssign
new
TIntermSymbol
(
instanceID
)
normalizedInstanceIDAsInt
)
;
initializers
-
>
push_back
(
instanceIDInitializer
)
;
TIntermBinary
*
normalizedViewID
=
new
TIntermBinary
(
EOpIMod
glInstanceIDAsUint
-
>
deepCopy
(
)
numberOfViewsUint
-
>
deepCopy
(
)
)
;
TIntermBinary
*
viewIDInitializer
=
new
TIntermBinary
(
EOpAssign
new
TIntermSymbol
(
viewID
)
normalizedViewID
)
;
initializers
-
>
push_back
(
viewIDInitializer
)
;
}
void
DeclareGlobalVariable
(
TIntermBlock
*
root
const
TVariable
*
variable
)
{
TIntermDeclaration
*
declaration
=
new
TIntermDeclaration
(
)
;
declaration
-
>
appendDeclarator
(
new
TIntermSymbol
(
variable
)
)
;
TIntermSequence
*
globalSequence
=
root
-
>
getSequence
(
)
;
globalSequence
-
>
insert
(
globalSequence
-
>
begin
(
)
declaration
)
;
}
void
SelectViewIndexInVertexShader
(
const
TVariable
*
viewID
const
TVariable
*
multiviewBaseViewLayerIndex
TIntermSequence
*
initializers
const
TSymbolTable
&
symbolTable
)
{
TIntermSequence
*
viewIDSymbolCastArguments
=
new
TIntermSequence
(
)
;
viewIDSymbolCastArguments
-
>
push_back
(
new
TIntermSymbol
(
viewID
)
)
;
TIntermAggregate
*
viewIDAsInt
=
TIntermAggregate
:
:
CreateConstructor
(
TType
(
EbtInt
EbpHigh
EvqTemporary
)
viewIDSymbolCastArguments
)
;
TIntermSymbol
*
viewportIndexSymbol
=
new
TIntermSymbol
(
BuiltInVariable
:
:
gl_ViewportIndex
(
)
)
;
TIntermBlock
*
viewportIndexInitializerInBlock
=
new
TIntermBlock
(
)
;
viewportIndexInitializerInBlock
-
>
appendStatement
(
new
TIntermBinary
(
EOpAssign
viewportIndexSymbol
viewIDAsInt
)
)
;
TIntermSymbol
*
layerSymbol
=
new
TIntermSymbol
(
BuiltInVariable
:
:
gl_LayerVS
(
)
)
;
TIntermBinary
*
sumOfViewIDAndBaseViewIndex
=
new
TIntermBinary
(
EOpAdd
viewIDAsInt
-
>
deepCopy
(
)
new
TIntermSymbol
(
multiviewBaseViewLayerIndex
)
)
;
TIntermBlock
*
layerInitializerInBlock
=
new
TIntermBlock
(
)
;
layerInitializerInBlock
-
>
appendStatement
(
new
TIntermBinary
(
EOpAssign
layerSymbol
sumOfViewIDAndBaseViewIndex
)
)
;
TIntermBinary
*
multiviewBaseViewLayerIndexZeroComparison
=
new
TIntermBinary
(
EOpLessThan
new
TIntermSymbol
(
multiviewBaseViewLayerIndex
)
CreateZeroNode
(
TType
(
EbtInt
EbpHigh
EvqConst
)
)
)
;
TIntermIfElse
*
multiviewBranch
=
new
TIntermIfElse
(
multiviewBaseViewLayerIndexZeroComparison
viewportIndexInitializerInBlock
layerInitializerInBlock
)
;
initializers
-
>
push_back
(
multiviewBranch
)
;
}
}
void
DeclareAndInitBuiltinsForInstancedMultiview
(
TIntermBlock
*
root
unsigned
numberOfViews
GLenum
shaderType
ShCompileOptions
compileOptions
ShShaderOutput
shaderOutput
TSymbolTable
*
symbolTable
)
{
ASSERT
(
shaderType
=
=
GL_VERTEX_SHADER
|
|
shaderType
=
=
GL_FRAGMENT_SHADER
)
;
TQualifier
viewIDQualifier
=
(
shaderType
=
=
GL_VERTEX_SHADER
)
?
EvqFlatOut
:
EvqFlatIn
;
const
TVariable
*
viewID
=
new
TVariable
(
symbolTable
kViewIDVariableName
new
TType
(
EbtUInt
EbpHigh
viewIDQualifier
)
SymbolType
:
:
AngleInternal
)
;
DeclareGlobalVariable
(
root
viewID
)
;
ReplaceVariable
(
root
BuiltInVariable
:
:
gl_ViewID_OVR
(
)
viewID
)
;
if
(
shaderType
=
=
GL_VERTEX_SHADER
)
{
const
TType
*
instanceIDVariableType
=
StaticType
:
:
Get
<
EbtInt
EbpHigh
EvqGlobal
1
1
>
(
)
;
const
TVariable
*
instanceID
=
new
TVariable
(
symbolTable
kInstanceIDVariableName
instanceIDVariableType
SymbolType
:
:
AngleInternal
)
;
DeclareGlobalVariable
(
root
instanceID
)
;
ReplaceVariable
(
root
BuiltInVariable
:
:
gl_InstanceID
(
)
instanceID
)
;
TIntermSequence
*
initializers
=
new
TIntermSequence
(
)
;
InitializeViewIDAndInstanceID
(
viewID
instanceID
numberOfViews
*
symbolTable
initializers
)
;
const
bool
selectView
=
(
compileOptions
&
SH_SELECT_VIEW_IN_NV_GLSL_VERTEX_SHADER
)
!
=
0u
;
ASSERT
(
!
selectView
|
|
IsOutputGLSL
(
shaderOutput
)
|
|
IsOutputESSL
(
shaderOutput
)
)
;
if
(
selectView
)
{
const
TType
*
baseLayerIndexVariableType
=
StaticType
:
:
Get
<
EbtInt
EbpHigh
EvqUniform
1
1
>
(
)
;
const
TVariable
*
multiviewBaseViewLayerIndex
=
new
TVariable
(
symbolTable
kMultiviewBaseViewLayerIndexVariableName
baseLayerIndexVariableType
SymbolType
:
:
AngleInternal
)
;
DeclareGlobalVariable
(
root
multiviewBaseViewLayerIndex
)
;
SelectViewIndexInVertexShader
(
viewID
multiviewBaseViewLayerIndex
initializers
*
symbolTable
)
;
}
TIntermBlock
*
initializersBlock
=
new
TIntermBlock
(
)
;
initializersBlock
-
>
getSequence
(
)
-
>
swap
(
*
initializers
)
;
TIntermBlock
*
mainBody
=
FindMainBody
(
root
)
;
mainBody
-
>
getSequence
(
)
-
>
insert
(
mainBody
-
>
getSequence
(
)
-
>
begin
(
)
initializersBlock
)
;
}
}
}
