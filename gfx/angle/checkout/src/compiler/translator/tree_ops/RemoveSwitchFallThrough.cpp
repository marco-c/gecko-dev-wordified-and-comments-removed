#
include
"
compiler
/
translator
/
tree_ops
/
RemoveSwitchFallThrough
.
h
"
#
include
"
compiler
/
translator
/
Diagnostics
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
class
RemoveSwitchFallThroughTraverser
:
public
TIntermTraverser
{
public
:
static
TIntermBlock
*
removeFallThrough
(
TIntermBlock
*
statementList
PerformanceDiagnostics
*
perfDiagnostics
)
;
private
:
RemoveSwitchFallThroughTraverser
(
TIntermBlock
*
statementList
PerformanceDiagnostics
*
perfDiagnostics
)
;
void
visitSymbol
(
TIntermSymbol
*
node
)
override
;
void
visitConstantUnion
(
TIntermConstantUnion
*
node
)
override
;
bool
visitDeclaration
(
Visit
TIntermDeclaration
*
node
)
override
;
bool
visitBinary
(
Visit
TIntermBinary
*
node
)
override
;
bool
visitUnary
(
Visit
TIntermUnary
*
node
)
override
;
bool
visitTernary
(
Visit
visit
TIntermTernary
*
node
)
override
;
bool
visitSwizzle
(
Visit
TIntermSwizzle
*
node
)
override
;
bool
visitIfElse
(
Visit
visit
TIntermIfElse
*
node
)
override
;
bool
visitSwitch
(
Visit
TIntermSwitch
*
node
)
override
;
bool
visitCase
(
Visit
TIntermCase
*
node
)
override
;
bool
visitAggregate
(
Visit
TIntermAggregate
*
node
)
override
;
bool
visitBlock
(
Visit
TIntermBlock
*
node
)
override
;
bool
visitLoop
(
Visit
TIntermLoop
*
node
)
override
;
bool
visitBranch
(
Visit
TIntermBranch
*
node
)
override
;
void
outputSequence
(
TIntermSequence
*
sequence
size_t
startIndex
)
;
void
handlePreviousCase
(
)
;
TIntermBlock
*
mStatementList
;
TIntermBlock
*
mStatementListOut
;
bool
mLastStatementWasBreak
;
TIntermBlock
*
mPreviousCase
;
std
:
:
vector
<
TIntermBlock
*
>
mCasesSharingBreak
;
PerformanceDiagnostics
*
mPerfDiagnostics
;
}
;
TIntermBlock
*
RemoveSwitchFallThroughTraverser
:
:
removeFallThrough
(
TIntermBlock
*
statementList
PerformanceDiagnostics
*
perfDiagnostics
)
{
RemoveSwitchFallThroughTraverser
rm
(
statementList
perfDiagnostics
)
;
ASSERT
(
statementList
)
;
statementList
-
>
traverse
(
&
rm
)
;
ASSERT
(
rm
.
mPreviousCase
|
|
statementList
-
>
getSequence
(
)
-
>
empty
(
)
)
;
if
(
!
rm
.
mLastStatementWasBreak
&
&
rm
.
mPreviousCase
)
{
TIntermBranch
*
finalBreak
=
new
TIntermBranch
(
EOpBreak
nullptr
)
;
rm
.
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
finalBreak
)
;
rm
.
mLastStatementWasBreak
=
true
;
}
rm
.
handlePreviousCase
(
)
;
return
rm
.
mStatementListOut
;
}
RemoveSwitchFallThroughTraverser
:
:
RemoveSwitchFallThroughTraverser
(
TIntermBlock
*
statementList
PerformanceDiagnostics
*
perfDiagnostics
)
:
TIntermTraverser
(
true
false
false
)
mStatementList
(
statementList
)
mLastStatementWasBreak
(
false
)
mPreviousCase
(
nullptr
)
mPerfDiagnostics
(
perfDiagnostics
)
{
mStatementListOut
=
new
TIntermBlock
(
)
;
}
void
RemoveSwitchFallThroughTraverser
:
:
visitSymbol
(
TIntermSymbol
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
}
void
RemoveSwitchFallThroughTraverser
:
:
visitConstantUnion
(
TIntermConstantUnion
*
node
)
{
UNREACHABLE
(
)
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitDeclaration
(
Visit
TIntermDeclaration
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitBinary
(
Visit
TIntermBinary
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitUnary
(
Visit
TIntermUnary
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitTernary
(
Visit
TIntermTernary
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitSwizzle
(
Visit
TIntermSwizzle
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitIfElse
(
Visit
TIntermIfElse
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitSwitch
(
Visit
TIntermSwitch
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
void
RemoveSwitchFallThroughTraverser
:
:
outputSequence
(
TIntermSequence
*
sequence
size_t
startIndex
)
{
for
(
size_t
i
=
startIndex
;
i
<
sequence
-
>
size
(
)
;
+
+
i
)
{
mStatementListOut
-
>
getSequence
(
)
-
>
push_back
(
sequence
-
>
at
(
i
)
)
;
}
}
void
RemoveSwitchFallThroughTraverser
:
:
handlePreviousCase
(
)
{
if
(
mPreviousCase
)
mCasesSharingBreak
.
push_back
(
mPreviousCase
)
;
if
(
mLastStatementWasBreak
)
{
for
(
size_t
i
=
0
;
i
<
mCasesSharingBreak
.
size
(
)
;
+
+
i
)
{
ASSERT
(
!
mCasesSharingBreak
.
at
(
i
)
-
>
getSequence
(
)
-
>
empty
(
)
)
;
if
(
mCasesSharingBreak
.
at
(
i
)
-
>
getSequence
(
)
-
>
size
(
)
=
=
1
)
{
outputSequence
(
mCasesSharingBreak
.
at
(
i
)
-
>
getSequence
(
)
0
)
;
}
else
{
if
(
mCasesSharingBreak
.
size
(
)
>
i
+
1u
)
{
mPerfDiagnostics
-
>
warning
(
mCasesSharingBreak
.
at
(
i
)
-
>
getLine
(
)
"
Performance
:
non
-
empty
fall
-
through
cases
in
"
"
switch
statements
generate
extra
code
.
"
"
switch
"
)
;
}
for
(
size_t
j
=
i
;
j
<
mCasesSharingBreak
.
size
(
)
;
+
+
j
)
{
size_t
startIndex
=
j
>
i
?
1
:
0
;
outputSequence
(
mCasesSharingBreak
.
at
(
j
)
-
>
getSequence
(
)
startIndex
)
;
}
}
}
mCasesSharingBreak
.
clear
(
)
;
}
mLastStatementWasBreak
=
false
;
mPreviousCase
=
nullptr
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitCase
(
Visit
TIntermCase
*
node
)
{
handlePreviousCase
(
)
;
mPreviousCase
=
new
TIntermBlock
(
)
;
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mPreviousCase
-
>
setLine
(
node
-
>
getLine
(
)
)
;
return
false
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitAggregate
(
Visit
TIntermAggregate
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
DoesBlockAlwaysBreak
(
TIntermBlock
*
node
)
{
if
(
node
-
>
getSequence
(
)
-
>
empty
(
)
)
{
return
false
;
}
TIntermBlock
*
lastStatementAsBlock
=
node
-
>
getSequence
(
)
-
>
back
(
)
-
>
getAsBlock
(
)
;
if
(
lastStatementAsBlock
)
{
return
DoesBlockAlwaysBreak
(
lastStatementAsBlock
)
;
}
TIntermBranch
*
lastStatementAsBranch
=
node
-
>
getSequence
(
)
-
>
back
(
)
-
>
getAsBranchNode
(
)
;
return
lastStatementAsBranch
!
=
nullptr
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitBlock
(
Visit
TIntermBlock
*
node
)
{
if
(
node
!
=
mStatementList
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
DoesBlockAlwaysBreak
(
node
)
;
return
false
;
}
return
true
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitLoop
(
Visit
TIntermLoop
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThroughTraverser
:
:
visitBranch
(
Visit
TIntermBranch
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
true
;
return
false
;
}
}
TIntermBlock
*
RemoveSwitchFallThrough
(
TIntermBlock
*
statementList
PerformanceDiagnostics
*
perfDiagnostics
)
{
return
RemoveSwitchFallThroughTraverser
:
:
removeFallThrough
(
statementList
perfDiagnostics
)
;
}
}
