#
include
"
compiler
/
translator
/
tree_ops
/
SeparateArrayInitialization
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
#
include
"
compiler
/
translator
/
OutputHLSL
.
h
"
namespace
sh
{
namespace
{
class
SeparateArrayInitTraverser
:
private
TIntermTraverser
{
public
:
ANGLE_NO_DISCARD
static
bool
apply
(
TCompiler
*
compiler
TIntermNode
*
root
)
;
private
:
SeparateArrayInitTraverser
(
)
;
bool
visitDeclaration
(
Visit
TIntermDeclaration
*
node
)
override
;
}
;
bool
SeparateArrayInitTraverser
:
:
apply
(
TCompiler
*
compiler
TIntermNode
*
root
)
{
SeparateArrayInitTraverser
separateInit
;
root
-
>
traverse
(
&
separateInit
)
;
return
separateInit
.
updateTree
(
compiler
root
)
;
}
SeparateArrayInitTraverser
:
:
SeparateArrayInitTraverser
(
)
:
TIntermTraverser
(
true
false
false
)
{
}
bool
SeparateArrayInitTraverser
:
:
visitDeclaration
(
Visit
TIntermDeclaration
*
node
)
{
TIntermSequence
*
sequence
=
node
-
>
getSequence
(
)
;
TIntermBinary
*
initNode
=
sequence
-
>
back
(
)
-
>
getAsBinaryNode
(
)
;
if
(
initNode
!
=
nullptr
&
&
initNode
-
>
getOp
(
)
=
=
EOpInitialize
)
{
TIntermTyped
*
initializer
=
initNode
-
>
getRight
(
)
;
if
(
initializer
-
>
isArray
(
)
&
&
!
initializer
-
>
hasConstantValue
(
)
)
{
ASSERT
(
sequence
-
>
size
(
)
=
=
1
)
;
TIntermTyped
*
symbol
=
initNode
-
>
getLeft
(
)
;
TIntermBlock
*
parentBlock
=
getParentNode
(
)
-
>
getAsBlock
(
)
;
ASSERT
(
parentBlock
!
=
nullptr
)
;
TIntermSequence
replacements
;
TIntermDeclaration
*
replacementDeclaration
=
new
TIntermDeclaration
(
)
;
replacementDeclaration
-
>
appendDeclarator
(
symbol
)
;
replacementDeclaration
-
>
setLine
(
symbol
-
>
getLine
(
)
)
;
replacements
.
push_back
(
replacementDeclaration
)
;
TIntermBinary
*
replacementAssignment
=
new
TIntermBinary
(
EOpAssign
symbol
initializer
)
;
replacementAssignment
-
>
setLine
(
symbol
-
>
getLine
(
)
)
;
replacements
.
push_back
(
replacementAssignment
)
;
mMultiReplacements
.
push_back
(
NodeReplaceWithMultipleEntry
(
parentBlock
node
replacements
)
)
;
}
}
return
false
;
}
}
bool
SeparateArrayInitialization
(
TCompiler
*
compiler
TIntermNode
*
root
)
{
return
SeparateArrayInitTraverser
:
:
apply
(
compiler
root
)
;
}
}
