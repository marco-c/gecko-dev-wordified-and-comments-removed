#
include
"
compiler
/
translator
/
tree_ops
/
ExpandIntegerPowExpressions
.
h
"
#
include
<
cmath
>
#
include
<
cstdlib
>
#
include
"
compiler
/
translator
/
tree_util
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
class
Traverser
:
public
TIntermTraverser
{
public
:
static
void
Apply
(
TIntermNode
*
root
TSymbolTable
*
symbolTable
)
;
private
:
Traverser
(
TSymbolTable
*
symbolTable
)
;
bool
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
override
;
void
nextIteration
(
)
;
bool
mFound
=
false
;
}
;
void
Traverser
:
:
Apply
(
TIntermNode
*
root
TSymbolTable
*
symbolTable
)
{
Traverser
traverser
(
symbolTable
)
;
do
{
traverser
.
nextIteration
(
)
;
root
-
>
traverse
(
&
traverser
)
;
if
(
traverser
.
mFound
)
{
traverser
.
updateTree
(
)
;
}
}
while
(
traverser
.
mFound
)
;
}
Traverser
:
:
Traverser
(
TSymbolTable
*
symbolTable
)
:
TIntermTraverser
(
true
false
false
symbolTable
)
{
}
void
Traverser
:
:
nextIteration
(
)
{
mFound
=
false
;
}
bool
Traverser
:
:
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
{
if
(
mFound
)
{
return
false
;
}
if
(
node
-
>
getOp
(
)
!
=
EOpPow
)
{
return
true
;
}
const
TIntermSequence
*
sequence
=
node
-
>
getSequence
(
)
;
ASSERT
(
sequence
-
>
size
(
)
=
=
2u
)
;
const
TIntermConstantUnion
*
constantExponent
=
sequence
-
>
at
(
1
)
-
>
getAsConstantUnion
(
)
;
if
(
!
constantExponent
|
|
constantExponent
-
>
getNominalSize
(
)
!
=
1
)
{
return
true
;
}
float
exponentValue
=
constantExponent
-
>
getConstantValue
(
)
-
>
getFConst
(
)
;
if
(
exponentValue
<
-
5
.
0f
|
|
exponentValue
>
9
.
0f
)
{
return
true
;
}
if
(
std
:
:
abs
(
exponentValue
-
std
:
:
round
(
exponentValue
)
)
>
0
.
0001f
)
{
return
true
;
}
int
exponent
=
static_cast
<
int
>
(
std
:
:
round
(
exponentValue
)
)
;
int
n
=
std
:
:
abs
(
exponent
)
;
if
(
n
<
2
)
{
return
true
;
}
TIntermTyped
*
lhs
=
sequence
-
>
at
(
0
)
-
>
getAsTyped
(
)
;
ASSERT
(
lhs
)
;
TIntermDeclaration
*
lhsVariableDeclaration
=
nullptr
;
TVariable
*
lhsVariable
=
DeclareTempVariable
(
mSymbolTable
lhs
EvqTemporary
&
lhsVariableDeclaration
)
;
insertStatementInParentBlock
(
lhsVariableDeclaration
)
;
TIntermTyped
*
current
=
CreateTempSymbolNode
(
lhsVariable
)
;
for
(
int
i
=
1
;
i
<
n
;
+
+
i
)
{
TIntermBinary
*
mul
=
new
TIntermBinary
(
EOpMul
current
CreateTempSymbolNode
(
lhsVariable
)
)
;
mul
-
>
setLine
(
node
-
>
getLine
(
)
)
;
current
=
mul
;
}
if
(
exponent
<
0
)
{
TConstantUnion
*
oneVal
=
new
TConstantUnion
(
)
;
oneVal
-
>
setFConst
(
1
.
0f
)
;
TIntermConstantUnion
*
oneNode
=
new
TIntermConstantUnion
(
oneVal
node
-
>
getType
(
)
)
;
TIntermBinary
*
div
=
new
TIntermBinary
(
EOpDiv
oneNode
current
)
;
current
=
div
;
}
queueReplacement
(
current
OriginalNode
:
:
IS_DROPPED
)
;
mFound
=
true
;
return
false
;
}
}
void
ExpandIntegerPowExpressions
(
TIntermNode
*
root
TSymbolTable
*
symbolTable
)
{
Traverser
:
:
Apply
(
root
symbolTable
)
;
}
}
