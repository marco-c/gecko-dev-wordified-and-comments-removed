#
include
"
compiler
/
translator
/
tree_ops
/
RecordConstantPrecision
.
h
"
#
include
"
compiler
/
translator
/
InfoSink
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
class
RecordConstantPrecisionTraverser
:
public
TIntermTraverser
{
public
:
RecordConstantPrecisionTraverser
(
TSymbolTable
*
symbolTable
)
;
void
visitConstantUnion
(
TIntermConstantUnion
*
node
)
override
;
protected
:
bool
operandAffectsParentOperationPrecision
(
TIntermTyped
*
operand
)
;
}
;
RecordConstantPrecisionTraverser
:
:
RecordConstantPrecisionTraverser
(
TSymbolTable
*
symbolTable
)
:
TIntermTraverser
(
true
false
true
symbolTable
)
{
}
bool
RecordConstantPrecisionTraverser
:
:
operandAffectsParentOperationPrecision
(
TIntermTyped
*
operand
)
{
if
(
getParentNode
(
)
-
>
getAsCaseNode
(
)
|
|
getParentNode
(
)
-
>
getAsBlock
(
)
)
{
return
false
;
}
if
(
operand
-
>
getBasicType
(
)
=
=
EbtBool
|
|
operand
-
>
getBasicType
(
)
=
=
EbtStruct
)
{
return
false
;
}
const
TIntermBinary
*
parentAsBinary
=
getParentNode
(
)
-
>
getAsBinaryNode
(
)
;
if
(
parentAsBinary
!
=
nullptr
)
{
switch
(
parentAsBinary
-
>
getOp
(
)
)
{
case
EOpInitialize
:
case
EOpAssign
:
case
EOpIndexDirect
:
case
EOpIndexDirectStruct
:
case
EOpIndexDirectInterfaceBlock
:
case
EOpIndexIndirect
:
return
false
;
default
:
return
true
;
}
}
TIntermAggregate
*
parentAsAggregate
=
getParentNode
(
)
-
>
getAsAggregate
(
)
;
if
(
parentAsAggregate
!
=
nullptr
)
{
return
parentAsAggregate
-
>
isConstructor
(
)
|
|
BuiltInGroup
:
:
IsMath
(
parentAsAggregate
-
>
getOp
(
)
)
;
}
return
true
;
}
void
RecordConstantPrecisionTraverser
:
:
visitConstantUnion
(
TIntermConstantUnion
*
node
)
{
if
(
node
-
>
getPrecision
(
)
<
EbpMedium
)
return
;
if
(
!
operandAffectsParentOperationPrecision
(
node
)
)
return
;
TIntermDeclaration
*
variableDeclaration
=
nullptr
;
TVariable
*
variable
=
DeclareTempVariable
(
mSymbolTable
node
EvqConst
&
variableDeclaration
)
;
insertStatementInParentBlock
(
variableDeclaration
)
;
queueReplacement
(
CreateTempSymbolNode
(
variable
)
OriginalNode
:
:
IS_DROPPED
)
;
}
}
bool
RecordConstantPrecision
(
TCompiler
*
compiler
TIntermNode
*
root
TSymbolTable
*
symbolTable
)
{
RecordConstantPrecisionTraverser
traverser
(
symbolTable
)
;
root
-
>
traverse
(
&
traverser
)
;
return
traverser
.
updateTree
(
compiler
root
)
;
}
}
