#
include
"
compiler
/
translator
/
tree_ops
/
d3d
/
SeparateExpressionsReturningArrays
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermNodePatternMatcher
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
class
SeparateExpressionsTraverser
:
public
TIntermTraverser
{
public
:
SeparateExpressionsTraverser
(
TSymbolTable
*
symbolTable
)
;
bool
visitBinary
(
Visit
visit
TIntermBinary
*
node
)
override
;
bool
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
override
;
void
nextIteration
(
)
;
bool
foundArrayExpression
(
)
const
{
return
mFoundArrayExpression
;
}
protected
:
bool
mFoundArrayExpression
;
IntermNodePatternMatcher
mPatternToSeparateMatcher
;
}
;
SeparateExpressionsTraverser
:
:
SeparateExpressionsTraverser
(
TSymbolTable
*
symbolTable
)
:
TIntermTraverser
(
true
false
false
symbolTable
)
mFoundArrayExpression
(
false
)
mPatternToSeparateMatcher
(
IntermNodePatternMatcher
:
:
kExpressionReturningArray
)
{
}
TIntermBinary
*
CopyAssignmentNode
(
TIntermBinary
*
node
)
{
return
new
TIntermBinary
(
node
-
>
getOp
(
)
node
-
>
getLeft
(
)
node
-
>
getRight
(
)
)
;
}
bool
SeparateExpressionsTraverser
:
:
visitBinary
(
Visit
visit
TIntermBinary
*
node
)
{
if
(
mFoundArrayExpression
)
return
false
;
if
(
!
mPatternToSeparateMatcher
.
match
(
node
getParentNode
(
)
)
)
return
true
;
ASSERT
(
node
-
>
getOp
(
)
=
=
EOpAssign
)
;
mFoundArrayExpression
=
true
;
TIntermSequence
insertions
;
insertions
.
push_back
(
CopyAssignmentNode
(
node
)
)
;
TIntermDeclaration
*
arrayVariableDeclaration
;
TVariable
*
arrayVariable
=
DeclareTempVariable
(
mSymbolTable
node
-
>
getLeft
(
)
EvqTemporary
&
arrayVariableDeclaration
)
;
insertions
.
push_back
(
arrayVariableDeclaration
)
;
insertStatementsInParentBlock
(
insertions
)
;
queueReplacement
(
CreateTempSymbolNode
(
arrayVariable
)
OriginalNode
:
:
IS_DROPPED
)
;
return
false
;
}
bool
SeparateExpressionsTraverser
:
:
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
{
if
(
mFoundArrayExpression
)
return
false
;
if
(
!
mPatternToSeparateMatcher
.
match
(
node
getParentNode
(
)
)
)
return
true
;
ASSERT
(
node
-
>
isConstructor
(
)
|
|
node
-
>
getOp
(
)
=
=
EOpCallFunctionInAST
)
;
mFoundArrayExpression
=
true
;
TIntermDeclaration
*
arrayVariableDeclaration
;
TVariable
*
arrayVariable
=
DeclareTempVariable
(
mSymbolTable
node
-
>
shallowCopy
(
)
EvqTemporary
&
arrayVariableDeclaration
)
;
insertStatementInParentBlock
(
arrayVariableDeclaration
)
;
queueReplacement
(
CreateTempSymbolNode
(
arrayVariable
)
OriginalNode
:
:
IS_DROPPED
)
;
return
false
;
}
void
SeparateExpressionsTraverser
:
:
nextIteration
(
)
{
mFoundArrayExpression
=
false
;
}
}
bool
SeparateExpressionsReturningArrays
(
TCompiler
*
compiler
TIntermNode
*
root
TSymbolTable
*
symbolTable
)
{
SeparateExpressionsTraverser
traverser
(
symbolTable
)
;
do
{
traverser
.
nextIteration
(
)
;
root
-
>
traverse
(
&
traverser
)
;
if
(
traverser
.
foundArrayExpression
(
)
)
{
if
(
!
traverser
.
updateTree
(
compiler
root
)
)
{
return
false
;
}
}
}
while
(
traverser
.
foundArrayExpression
(
)
)
;
return
true
;
}
}
