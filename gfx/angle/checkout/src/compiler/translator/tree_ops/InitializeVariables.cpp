#
include
"
compiler
/
translator
/
tree_ops
/
InitializeVariables
.
h
"
#
include
"
angle_gl
.
h
"
#
include
"
common
/
debug
.
h
"
#
include
"
compiler
/
translator
/
Compiler
.
h
"
#
include
"
compiler
/
translator
/
StaticType
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
FindMain
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermTraverse
.
h
"
#
include
"
compiler
/
translator
/
util
.
h
"
namespace
sh
{
namespace
{
void
AddArrayZeroInitSequence
(
const
TIntermTyped
*
initializedNode
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
TIntermSequence
*
initSequenceOut
TSymbolTable
*
symbolTable
)
;
void
AddStructZeroInitSequence
(
const
TIntermTyped
*
initializedNode
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
TIntermSequence
*
initSequenceOut
TSymbolTable
*
symbolTable
)
;
TIntermBinary
*
CreateZeroInitAssignment
(
const
TIntermTyped
*
initializedNode
)
{
TIntermTyped
*
zero
=
CreateZeroNode
(
initializedNode
-
>
getType
(
)
)
;
return
new
TIntermBinary
(
EOpAssign
initializedNode
-
>
deepCopy
(
)
zero
)
;
}
void
AddZeroInitSequence
(
const
TIntermTyped
*
initializedNode
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
TIntermSequence
*
initSequenceOut
TSymbolTable
*
symbolTable
)
{
if
(
initializedNode
-
>
isArray
(
)
)
{
AddArrayZeroInitSequence
(
initializedNode
canUseLoopsToInitialize
highPrecisionSupported
initSequenceOut
symbolTable
)
;
}
else
if
(
initializedNode
-
>
getType
(
)
.
isStructureContainingArrays
(
)
|
|
initializedNode
-
>
getType
(
)
.
isNamelessStruct
(
)
)
{
AddStructZeroInitSequence
(
initializedNode
canUseLoopsToInitialize
highPrecisionSupported
initSequenceOut
symbolTable
)
;
}
else
{
initSequenceOut
-
>
push_back
(
CreateZeroInitAssignment
(
initializedNode
)
)
;
}
}
void
AddStructZeroInitSequence
(
const
TIntermTyped
*
initializedNode
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
TIntermSequence
*
initSequenceOut
TSymbolTable
*
symbolTable
)
{
ASSERT
(
initializedNode
-
>
getBasicType
(
)
=
=
EbtStruct
)
;
const
TStructure
*
structType
=
initializedNode
-
>
getType
(
)
.
getStruct
(
)
;
for
(
int
i
=
0
;
i
<
static_cast
<
int
>
(
structType
-
>
fields
(
)
.
size
(
)
)
;
+
+
i
)
{
TIntermBinary
*
element
=
new
TIntermBinary
(
EOpIndexDirectStruct
initializedNode
-
>
deepCopy
(
)
CreateIndexNode
(
i
)
)
;
ASSERT
(
!
element
-
>
getType
(
)
.
isNamelessStruct
(
)
)
;
AddZeroInitSequence
(
element
canUseLoopsToInitialize
highPrecisionSupported
initSequenceOut
symbolTable
)
;
}
}
void
AddArrayZeroInitStatementList
(
const
TIntermTyped
*
initializedNode
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
TIntermSequence
*
initSequenceOut
TSymbolTable
*
symbolTable
)
{
for
(
unsigned
int
i
=
0
;
i
<
initializedNode
-
>
getOutermostArraySize
(
)
;
+
+
i
)
{
TIntermBinary
*
element
=
new
TIntermBinary
(
EOpIndexDirect
initializedNode
-
>
deepCopy
(
)
CreateIndexNode
(
i
)
)
;
AddZeroInitSequence
(
element
canUseLoopsToInitialize
highPrecisionSupported
initSequenceOut
symbolTable
)
;
}
}
void
AddArrayZeroInitForLoop
(
const
TIntermTyped
*
initializedNode
bool
highPrecisionSupported
TIntermSequence
*
initSequenceOut
TSymbolTable
*
symbolTable
)
{
ASSERT
(
initializedNode
-
>
isArray
(
)
)
;
const
TType
*
mediumpIndexType
=
StaticType
:
:
Get
<
EbtInt
EbpMedium
EvqTemporary
1
1
>
(
)
;
const
TType
*
highpIndexType
=
StaticType
:
:
Get
<
EbtInt
EbpHigh
EvqTemporary
1
1
>
(
)
;
TVariable
*
indexVariable
=
CreateTempVariable
(
symbolTable
highPrecisionSupported
?
highpIndexType
:
mediumpIndexType
)
;
TIntermSymbol
*
indexSymbolNode
=
CreateTempSymbolNode
(
indexVariable
)
;
TIntermDeclaration
*
indexInit
=
CreateTempInitDeclarationNode
(
indexVariable
CreateZeroNode
(
indexVariable
-
>
getType
(
)
)
)
;
TIntermConstantUnion
*
arraySizeNode
=
CreateIndexNode
(
initializedNode
-
>
getOutermostArraySize
(
)
)
;
TIntermBinary
*
indexSmallerThanSize
=
new
TIntermBinary
(
EOpLessThan
indexSymbolNode
-
>
deepCopy
(
)
arraySizeNode
)
;
TIntermUnary
*
indexIncrement
=
new
TIntermUnary
(
EOpPreIncrement
indexSymbolNode
-
>
deepCopy
(
)
nullptr
)
;
TIntermBlock
*
forLoopBody
=
new
TIntermBlock
(
)
;
TIntermSequence
*
forLoopBodySeq
=
forLoopBody
-
>
getSequence
(
)
;
TIntermBinary
*
element
=
new
TIntermBinary
(
EOpIndexIndirect
initializedNode
-
>
deepCopy
(
)
indexSymbolNode
-
>
deepCopy
(
)
)
;
AddZeroInitSequence
(
element
true
highPrecisionSupported
forLoopBodySeq
symbolTable
)
;
TIntermLoop
*
forLoop
=
new
TIntermLoop
(
ELoopFor
indexInit
indexSmallerThanSize
indexIncrement
forLoopBody
)
;
initSequenceOut
-
>
push_back
(
forLoop
)
;
}
void
AddArrayZeroInitSequence
(
const
TIntermTyped
*
initializedNode
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
TIntermSequence
*
initSequenceOut
TSymbolTable
*
symbolTable
)
{
bool
isSmallArray
=
initializedNode
-
>
getOutermostArraySize
(
)
<
=
1u
|
|
(
initializedNode
-
>
getBasicType
(
)
!
=
EbtStruct
&
&
!
initializedNode
-
>
getType
(
)
.
isArrayOfArrays
(
)
&
&
initializedNode
-
>
getOutermostArraySize
(
)
<
=
3u
)
;
if
(
initializedNode
-
>
getQualifier
(
)
=
=
EvqFragData
|
|
initializedNode
-
>
getQualifier
(
)
=
=
EvqFragmentOut
|
|
isSmallArray
|
|
!
canUseLoopsToInitialize
)
{
AddArrayZeroInitStatementList
(
initializedNode
canUseLoopsToInitialize
highPrecisionSupported
initSequenceOut
symbolTable
)
;
}
else
{
AddArrayZeroInitForLoop
(
initializedNode
highPrecisionSupported
initSequenceOut
symbolTable
)
;
}
}
void
InsertInitCode
(
TCompiler
*
compiler
TIntermSequence
*
mainBody
const
InitVariableList
&
variables
TSymbolTable
*
symbolTable
int
shaderVersion
const
TExtensionBehavior
&
extensionBehavior
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
)
{
for
(
const
auto
&
var
:
variables
)
{
ImmutableString
tempVariableName
(
var
.
name
.
c_str
(
)
var
.
name
.
length
(
)
)
;
TIntermTyped
*
initializedSymbol
=
nullptr
;
if
(
var
.
isBuiltIn
(
)
)
{
initializedSymbol
=
ReferenceBuiltInVariable
(
tempVariableName
*
symbolTable
shaderVersion
)
;
if
(
initializedSymbol
-
>
getQualifier
(
)
=
=
EvqFragData
&
&
!
IsExtensionEnabled
(
extensionBehavior
TExtension
:
:
EXT_draw_buffers
)
)
{
initializedSymbol
=
new
TIntermBinary
(
EOpIndexDirect
initializedSymbol
CreateIndexNode
(
0
)
)
;
}
}
else
{
initializedSymbol
=
ReferenceGlobalVariable
(
tempVariableName
*
symbolTable
)
;
}
ASSERT
(
initializedSymbol
!
=
nullptr
)
;
TIntermSequence
*
initCode
=
CreateInitCode
(
initializedSymbol
canUseLoopsToInitialize
highPrecisionSupported
symbolTable
)
;
mainBody
-
>
insert
(
mainBody
-
>
begin
(
)
initCode
-
>
begin
(
)
initCode
-
>
end
(
)
)
;
}
}
class
InitializeLocalsTraverser
:
public
TIntermTraverser
{
public
:
InitializeLocalsTraverser
(
int
shaderVersion
TSymbolTable
*
symbolTable
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
)
:
TIntermTraverser
(
true
false
false
symbolTable
)
mShaderVersion
(
shaderVersion
)
mCanUseLoopsToInitialize
(
canUseLoopsToInitialize
)
mHighPrecisionSupported
(
highPrecisionSupported
)
{
}
protected
:
bool
visitDeclaration
(
Visit
visit
TIntermDeclaration
*
node
)
override
{
for
(
TIntermNode
*
declarator
:
*
node
-
>
getSequence
(
)
)
{
if
(
!
mInGlobalScope
&
&
!
declarator
-
>
getAsBinaryNode
(
)
)
{
TIntermSymbol
*
symbol
=
declarator
-
>
getAsSymbolNode
(
)
;
ASSERT
(
symbol
)
;
if
(
symbol
-
>
variable
(
)
.
symbolType
(
)
=
=
SymbolType
:
:
Empty
)
{
continue
;
}
bool
arrayConstructorUnavailable
=
(
symbol
-
>
isArray
(
)
|
|
symbol
-
>
getType
(
)
.
isStructureContainingArrays
(
)
)
&
&
mShaderVersion
=
=
100
;
if
(
arrayConstructorUnavailable
|
|
symbol
-
>
getType
(
)
.
isNamelessStruct
(
)
)
{
ASSERT
(
getParentNode
(
)
-
>
getAsLoopNode
(
)
=
=
nullptr
)
;
ASSERT
(
node
-
>
getSequence
(
)
-
>
size
(
)
=
=
1
)
;
insertStatementsInParentBlock
(
TIntermSequence
(
)
*
CreateInitCode
(
symbol
mCanUseLoopsToInitialize
mHighPrecisionSupported
mSymbolTable
)
)
;
}
else
{
TIntermBinary
*
init
=
new
TIntermBinary
(
EOpInitialize
symbol
CreateZeroNode
(
symbol
-
>
getType
(
)
)
)
;
queueReplacementWithParent
(
node
symbol
init
OriginalNode
:
:
BECOMES_CHILD
)
;
}
}
}
return
false
;
}
private
:
int
mShaderVersion
;
bool
mCanUseLoopsToInitialize
;
bool
mHighPrecisionSupported
;
}
;
}
TIntermSequence
*
CreateInitCode
(
const
TIntermTyped
*
initializedSymbol
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
TSymbolTable
*
symbolTable
)
{
TIntermSequence
*
initCode
=
new
TIntermSequence
(
)
;
AddZeroInitSequence
(
initializedSymbol
canUseLoopsToInitialize
highPrecisionSupported
initCode
symbolTable
)
;
return
initCode
;
}
bool
InitializeUninitializedLocals
(
TCompiler
*
compiler
TIntermBlock
*
root
int
shaderVersion
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
TSymbolTable
*
symbolTable
)
{
InitializeLocalsTraverser
traverser
(
shaderVersion
symbolTable
canUseLoopsToInitialize
highPrecisionSupported
)
;
root
-
>
traverse
(
&
traverser
)
;
return
traverser
.
updateTree
(
compiler
root
)
;
}
bool
InitializeVariables
(
TCompiler
*
compiler
TIntermBlock
*
root
const
InitVariableList
&
vars
TSymbolTable
*
symbolTable
int
shaderVersion
const
TExtensionBehavior
&
extensionBehavior
bool
canUseLoopsToInitialize
bool
highPrecisionSupported
)
{
TIntermBlock
*
body
=
FindMainBody
(
root
)
;
InsertInitCode
(
compiler
body
-
>
getSequence
(
)
vars
symbolTable
shaderVersion
extensionBehavior
canUseLoopsToInitialize
highPrecisionSupported
)
;
return
compiler
-
>
validateAST
(
root
)
;
}
}
