#
ifndef
COMPILER_TRANSLATOR_IMAGEFUNCTIONHLSL_H_
#
define
COMPILER_TRANSLATOR_IMAGEFUNCTIONHLSL_H_
#
include
<
set
>
#
include
"
GLSLANG
/
ShaderLang
.
h
"
#
include
"
compiler
/
translator
/
BaseTypes
.
h
"
#
include
"
compiler
/
translator
/
Common
.
h
"
#
include
"
compiler
/
translator
/
InfoSink
.
h
"
#
include
"
compiler
/
translator
/
Types
.
h
"
namespace
sh
{
class
ImageFunctionHLSL
final
:
angle
:
:
NonCopyable
{
public
:
TString
useImageFunction
(
const
ImmutableString
&
name
const
TBasicType
&
type
TLayoutImageInternalFormat
imageInternalFormat
bool
readonly
)
;
void
imageFunctionHeader
(
TInfoSinkBase
&
out
)
;
private
:
struct
ImageFunction
{
enum
class
Method
{
SIZE
LOAD
STORE
}
;
TString
name
(
)
const
;
bool
operator
<
(
const
ImageFunction
&
rhs
)
const
;
const
char
*
getReturnType
(
)
const
;
TBasicType
image
;
TLayoutImageInternalFormat
imageInternalFormat
;
bool
readonly
;
Method
method
;
}
;
static
void
OutputImageFunctionArgumentList
(
TInfoSinkBase
&
out
const
ImageFunctionHLSL
:
:
ImageFunction
&
imageFunction
)
;
static
void
OutputImageSizeFunctionBody
(
TInfoSinkBase
&
out
const
ImageFunctionHLSL
:
:
ImageFunction
&
imageFunction
const
TString
&
imageReference
)
;
static
void
OutputImageLoadFunctionBody
(
TInfoSinkBase
&
out
const
ImageFunctionHLSL
:
:
ImageFunction
&
imageFunction
const
TString
&
imageReference
)
;
static
void
OutputImageStoreFunctionBody
(
TInfoSinkBase
&
out
const
ImageFunctionHLSL
:
:
ImageFunction
&
imageFunction
const
TString
&
imageReference
)
;
using
ImageFunctionSet
=
std
:
:
set
<
ImageFunction
>
;
ImageFunctionSet
mUsesImage
;
}
;
}
#
endif
