#
ifndef
LIBANGLE_RENDERER_METAL_TRANSLATORMETAL_H_
#
define
LIBANGLE_RENDERER_METAL_TRANSLATORMETAL_H_
#
include
"
compiler
/
translator
/
TranslatorVulkan
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
DriverUniform
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
SpecializationConstant
.
h
"
namespace
sh
{
class
SpecConstMetal
:
public
SpecConst
{
public
:
SpecConstMetal
(
TSymbolTable
*
symbolTable
ShCompileOptions
compileOptions
GLenum
shaderType
)
:
SpecConst
(
symbolTable
compileOptions
shaderType
)
{
}
~
SpecConstMetal
(
)
override
{
}
private
:
}
;
class
DriverUniformMetal
:
public
DriverUniform
{
public
:
DriverUniformMetal
(
)
:
DriverUniform
(
)
{
}
~
DriverUniformMetal
(
)
override
{
}
TIntermBinary
*
getHalfRenderAreaRef
(
)
const
override
;
TIntermBinary
*
getFlipXYRef
(
)
const
override
;
TIntermBinary
*
getNegFlipXYRef
(
)
const
override
;
TIntermSwizzle
*
getNegFlipYRef
(
)
const
override
;
TIntermBinary
*
getCoverageMaskFieldRef
(
)
const
;
protected
:
TFieldList
*
createUniformFields
(
TSymbolTable
*
symbolTable
)
override
;
}
;
class
TranslatorMetal
:
public
TranslatorVulkan
{
public
:
TranslatorMetal
(
sh
:
:
GLenum
type
ShShaderSpec
spec
)
;
protected
:
ANGLE_NO_DISCARD
bool
translate
(
TIntermBlock
*
root
ShCompileOptions
compileOptions
PerformanceDiagnostics
*
perfDiagnostics
)
override
;
ANGLE_NO_DISCARD
bool
transformDepthBeforeCorrection
(
TIntermBlock
*
root
const
DriverUniform
*
driverUniforms
)
override
;
ANGLE_NO_DISCARD
bool
insertSampleMaskWritingLogic
(
TInfoSinkBase
&
sink
TIntermBlock
*
root
const
DriverUniformMetal
*
driverUniforms
)
;
ANGLE_NO_DISCARD
bool
insertRasterizerDiscardLogic
(
TInfoSinkBase
&
sink
TIntermBlock
*
root
)
;
}
;
}
#
endif
