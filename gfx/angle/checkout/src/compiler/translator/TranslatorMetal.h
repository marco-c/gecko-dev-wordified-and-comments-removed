#
ifndef
LIBANGLE_RENDERER_METAL_TRANSLATORMETAL_H_
#
define
LIBANGLE_RENDERER_METAL_TRANSLATORMETAL_H_
#
include
"
compiler
/
translator
/
DriverUniformMetal
.
h
"
#
include
"
compiler
/
translator
/
TranslatorVulkan
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
DriverUniform
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
SpecializationConstant
.
h
"
namespace
sh
{
class
SpecConstMetal
:
public
SpecConst
{
public
:
SpecConstMetal
(
TSymbolTable
*
symbolTable
const
ShCompileOptions
&
compileOptions
GLenum
shaderType
)
:
SpecConst
(
symbolTable
compileOptions
shaderType
)
{
}
~
SpecConstMetal
(
)
override
{
}
private
:
}
;
class
TranslatorMetal
:
public
TranslatorVulkan
{
public
:
TranslatorMetal
(
sh
:
:
GLenum
type
ShShaderSpec
spec
)
;
protected
:
[
[
nodiscard
]
]
bool
translate
(
TIntermBlock
*
root
const
ShCompileOptions
&
compileOptions
PerformanceDiagnostics
*
perfDiagnostics
)
override
;
[
[
nodiscard
]
]
bool
transformDepthBeforeCorrection
(
TIntermBlock
*
root
const
DriverUniform
*
driverUniforms
)
override
;
[
[
nodiscard
]
]
bool
insertSampleMaskWritingLogic
(
TInfoSinkBase
&
sink
TIntermBlock
*
root
const
DriverUniformMetal
*
driverUniforms
)
;
[
[
nodiscard
]
]
bool
insertRasterizerDiscardLogic
(
TInfoSinkBase
&
sink
TIntermBlock
*
root
)
;
}
;
}
#
endif
