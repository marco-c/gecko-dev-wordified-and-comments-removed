#
ifndef
COMPILER_TRANSLATOR_SHADERSTORAGEBLOCKOUTPUTHLSL_H_
#
define
COMPILER_TRANSLATOR_SHADERSTORAGEBLOCKOUTPUTHLSL_H_
#
include
"
compiler
/
translator
/
ShaderStorageBlockFunctionHLSL
.
h
"
#
include
"
compiler
/
translator
/
blocklayout
.
h
"
#
include
"
compiler
/
translator
/
tree_util
/
IntermTraverse
.
h
"
namespace
sh
{
class
ResourcesHLSL
;
class
OutputHLSL
;
class
TSymbolTable
;
struct
TReferencedBlock
:
angle
:
:
NonCopyable
{
POOL_ALLOCATOR_NEW_DELETE
TReferencedBlock
(
const
TInterfaceBlock
*
block
const
TVariable
*
instanceVariable
)
;
const
TInterfaceBlock
*
block
;
const
TVariable
*
instanceVariable
;
}
;
using
ReferencedInterfaceBlocks
=
std
:
:
map
<
int
const
TReferencedBlock
*
>
;
using
BlockMemberInfoMap
=
std
:
:
map
<
const
TField
*
BlockMemberInfo
>
;
using
ShaderVarToFieldMap
=
std
:
:
map
<
std
:
:
string
const
TField
*
>
;
class
ShaderStorageBlockOutputHLSL
:
public
TIntermTraverser
{
public
:
ShaderStorageBlockOutputHLSL
(
OutputHLSL
*
outputHLSL
TSymbolTable
*
symbolTable
ResourcesHLSL
*
resourcesHLSL
const
std
:
:
vector
<
InterfaceBlock
>
&
shaderStorageBlocks
)
;
~
ShaderStorageBlockOutputHLSL
(
)
;
void
outputStoreFunctionCallPrefix
(
TIntermTyped
*
node
)
;
void
outputLoadFunctionCall
(
TIntermTyped
*
node
)
;
void
outputLengthFunctionCall
(
TIntermTyped
*
node
)
;
void
outputAtomicMemoryFunctionCallPrefix
(
TIntermTyped
*
node
TOperator
op
)
;
void
writeShaderStorageBlocksHeader
(
TInfoSinkBase
&
out
)
const
;
protected
:
void
visitSymbol
(
TIntermSymbol
*
)
override
;
void
visitConstantUnion
(
TIntermConstantUnion
*
)
override
;
bool
visitSwizzle
(
Visit
visit
TIntermSwizzle
*
node
)
override
;
bool
visitBinary
(
Visit
visit
TIntermBinary
*
)
override
;
bool
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
override
;
bool
visitTernary
(
Visit
visit
TIntermTernary
*
)
override
;
bool
visitUnary
(
Visit
visit
TIntermUnary
*
)
override
;
private
:
void
traverseSSBOAccess
(
TIntermTyped
*
node
SSBOMethod
method
)
;
void
setMatrixStride
(
TIntermTyped
*
node
TLayoutBlockStorage
storage
bool
rowMajor
)
;
bool
isEndOfSSBOAccessChain
(
)
;
void
writeEOpIndexDirectOrIndirectOutput
(
TInfoSinkBase
&
out
Visit
visit
TIntermBinary
*
node
)
;
void
writeDotOperatorOutput
(
TInfoSinkBase
&
out
const
TField
*
field
)
;
int
mMatrixStride
;
bool
mRowMajor
;
bool
mLocationAsTheLastArgument
;
OutputHLSL
*
mOutputHLSL
;
ShaderStorageBlockFunctionHLSL
*
mSSBOFunctionHLSL
;
ResourcesHLSL
*
mResourcesHLSL
;
ReferencedInterfaceBlocks
mReferencedShaderStorageBlocks
;
BlockMemberInfoMap
mBlockMemberInfoMap
;
const
std
:
:
vector
<
InterfaceBlock
>
&
mShaderStorageBlocks
;
}
;
}
#
endif
