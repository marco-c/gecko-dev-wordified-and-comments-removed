#
ifndef
COMPILER_TRANSLATOR_SHADERSTORAGEBLOCKOUTPUTHLSL_H_
#
define
COMPILER_TRANSLATOR_SHADERSTORAGEBLOCKOUTPUTHLSL_H_
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
#
include
"
compiler
/
translator
/
ShaderStorageBlockFunctionHLSL
.
h
"
#
include
"
compiler
/
translator
/
blocklayout
.
h
"
namespace
sh
{
class
ResourcesHLSL
;
class
OutputHLSL
;
class
TSymbolTable
;
struct
TReferencedBlock
:
angle
:
:
NonCopyable
{
POOL_ALLOCATOR_NEW_DELETE
TReferencedBlock
(
const
TInterfaceBlock
*
block
const
TVariable
*
instanceVariable
)
;
const
TInterfaceBlock
*
block
;
const
TVariable
*
instanceVariable
;
}
;
using
ReferencedInterfaceBlocks
=
std
:
:
map
<
int
const
TReferencedBlock
*
>
;
using
BlockMemberInfoMap
=
std
:
:
map
<
const
TField
*
BlockMemberInfo
>
;
using
ShaderVarToFieldMap
=
std
:
:
map
<
std
:
:
string
const
TField
*
>
;
class
ShaderStorageBlockOutputHLSL
{
public
:
ShaderStorageBlockOutputHLSL
(
OutputHLSL
*
outputHLSL
ResourcesHLSL
*
resourcesHLSL
const
std
:
:
vector
<
InterfaceBlock
>
&
shaderStorageBlocks
)
;
~
ShaderStorageBlockOutputHLSL
(
)
;
void
outputStoreFunctionCallPrefix
(
TIntermTyped
*
node
)
;
void
outputLoadFunctionCall
(
TIntermTyped
*
node
)
;
void
outputLengthFunctionCall
(
TIntermTyped
*
node
)
;
void
outputAtomicMemoryFunctionCallPrefix
(
TIntermTyped
*
node
TOperator
op
)
;
void
writeShaderStorageBlocksHeader
(
TInfoSinkBase
&
out
)
const
;
private
:
void
traverseSSBOAccess
(
TIntermTyped
*
node
SSBOMethod
method
)
;
TIntermTyped
*
traverseNode
(
TInfoSinkBase
&
out
TIntermTyped
*
node
BlockMemberInfo
*
blockMemberInfo
)
;
int
getMatrixStride
(
TIntermTyped
*
node
TLayoutBlockStorage
storage
bool
rowMajor
bool
*
isRowMajor
)
const
;
TIntermTyped
*
writeEOpIndexDirectOrIndirectOutput
(
TInfoSinkBase
&
out
TIntermBinary
*
node
BlockMemberInfo
*
blockMemberInfo
)
;
TIntermTyped
*
createFieldOffset
(
const
TField
*
field
BlockMemberInfo
*
blockMemberInfo
)
;
void
collectShaderStorageBlocks
(
TIntermTyped
*
node
)
;
OutputHLSL
*
mOutputHLSL
;
ShaderStorageBlockFunctionHLSL
*
mSSBOFunctionHLSL
;
ResourcesHLSL
*
mResourcesHLSL
;
ReferencedInterfaceBlocks
mReferencedShaderStorageBlocks
;
BlockMemberInfoMap
mBlockMemberInfoMap
;
const
std
:
:
vector
<
InterfaceBlock
>
&
mShaderStorageBlocks
;
}
;
}
#
endif
