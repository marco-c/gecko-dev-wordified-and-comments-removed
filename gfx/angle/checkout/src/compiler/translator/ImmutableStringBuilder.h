#
ifndef
COMPILER_TRANSLATOR_IMMUTABLESTRINGBUILDER_H_
#
define
COMPILER_TRANSLATOR_IMMUTABLESTRINGBUILDER_H_
#
include
"
compiler
/
translator
/
ImmutableString
.
h
"
namespace
sh
{
class
ImmutableStringBuilder
{
public
:
ImmutableStringBuilder
(
size_t
maxLength
)
:
mPos
(
0u
)
mMaxLength
(
maxLength
)
mData
(
AllocateEmptyPoolCharArray
(
maxLength
)
)
{
}
ImmutableStringBuilder
&
operator
<
<
(
const
ImmutableString
&
str
)
;
ImmutableStringBuilder
&
operator
<
<
(
const
char
*
str
)
;
ImmutableStringBuilder
&
operator
<
<
(
const
char
&
c
)
;
operator
ImmutableString
(
)
;
template
<
typename
T
>
void
appendHex
(
T
number
)
{
ASSERT
(
mData
!
=
nullptr
)
;
ASSERT
(
mPos
+
sizeof
(
T
)
*
2u
<
=
mMaxLength
)
;
int
index
=
static_cast
<
int
>
(
sizeof
(
T
)
)
*
2
-
1
;
while
(
(
(
number
>
>
(
index
*
4
)
)
&
0xfu
)
=
=
0
&
&
index
>
0
)
{
-
-
index
;
}
while
(
index
>
=
0
)
{
char
digit
=
static_cast
<
char
>
(
(
number
>
>
(
index
*
4
)
)
&
0xfu
)
;
char
digitChar
=
digit
<
10
?
digit
+
'
0
'
:
digit
+
'
a
'
;
mData
[
mPos
+
+
]
=
digitChar
;
-
-
index
;
}
return
;
}
private
:
inline
static
char
*
AllocateEmptyPoolCharArray
(
size_t
strLength
)
{
size_t
requiredSize
=
strLength
+
1u
;
return
reinterpret_cast
<
char
*
>
(
GetGlobalPoolAllocator
(
)
-
>
allocate
(
requiredSize
)
)
;
}
size_t
mPos
;
size_t
mMaxLength
;
char
*
mData
;
}
;
}
#
endif
