#
ifndef
COMPILER_TRANSLATOR_TEXTUREFUNCTIONHLSL_H_
#
define
COMPILER_TRANSLATOR_TEXTUREFUNCTIONHLSL_H_
#
include
<
set
>
#
include
"
GLSLANG
/
ShaderLang
.
h
"
#
include
"
compiler
/
translator
/
BaseTypes
.
h
"
#
include
"
compiler
/
translator
/
Common
.
h
"
#
include
"
compiler
/
translator
/
InfoSink
.
h
"
namespace
sh
{
class
TextureFunctionHLSL
final
:
angle
:
:
NonCopyable
{
public
:
struct
TextureFunction
{
enum
Method
{
IMPLICIT
BIAS
LOD
LOD0
LOD0BIAS
SIZE
FETCH
GRAD
GATHER
}
;
ImmutableString
name
(
)
const
;
bool
operator
<
(
const
TextureFunction
&
rhs
)
const
;
const
char
*
getReturnType
(
)
const
;
TBasicType
sampler
;
int
coords
;
bool
proj
;
bool
offset
;
Method
method
;
}
;
ImmutableString
useTextureFunction
(
const
ImmutableString
&
name
TBasicType
samplerType
int
coords
size_t
argumentCount
bool
lod0
sh
:
:
GLenum
shaderType
)
;
void
textureFunctionHeader
(
TInfoSinkBase
&
out
const
ShShaderOutput
outputType
bool
getDimensionsIgnoresBaseLevel
)
;
private
:
typedef
std
:
:
set
<
TextureFunction
>
TextureFunctionSet
;
TextureFunctionSet
mUsesTexture
;
}
;
}
#
endif
