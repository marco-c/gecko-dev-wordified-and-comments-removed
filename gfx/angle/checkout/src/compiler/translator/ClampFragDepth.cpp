#
include
"
compiler
/
translator
/
ClampFragDepth
.
h
"
#
include
"
compiler
/
translator
/
FindSymbolNode
.
h
"
#
include
"
compiler
/
translator
/
ImmutableString
.
h
"
#
include
"
compiler
/
translator
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
RunAtTheEndOfShader
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
namespace
sh
{
void
ClampFragDepth
(
TIntermBlock
*
root
TSymbolTable
*
symbolTable
)
{
if
(
!
FindSymbolNode
(
root
ImmutableString
(
"
gl_FragDepth
"
)
)
)
{
return
;
}
TIntermSymbol
*
fragDepthNode
=
ReferenceBuiltInVariable
(
ImmutableString
(
"
gl_FragDepth
"
)
*
symbolTable
300
)
;
TIntermTyped
*
minFragDepthNode
=
CreateZeroNode
(
TType
(
EbtFloat
EbpHigh
EvqConst
)
)
;
TConstantUnion
*
maxFragDepthConstant
=
new
TConstantUnion
(
)
;
maxFragDepthConstant
-
>
setFConst
(
1
.
0
)
;
TIntermConstantUnion
*
maxFragDepthNode
=
new
TIntermConstantUnion
(
maxFragDepthConstant
TType
(
EbtFloat
EbpHigh
EvqConst
)
)
;
TIntermSequence
*
clampArguments
=
new
TIntermSequence
(
)
;
clampArguments
-
>
push_back
(
fragDepthNode
-
>
deepCopy
(
)
)
;
clampArguments
-
>
push_back
(
minFragDepthNode
)
;
clampArguments
-
>
push_back
(
maxFragDepthNode
)
;
TIntermTyped
*
clampedFragDepth
=
CreateBuiltInFunctionCallNode
(
"
clamp
"
clampArguments
*
symbolTable
100
)
;
TIntermBinary
*
assignFragDepth
=
new
TIntermBinary
(
EOpAssign
fragDepthNode
clampedFragDepth
)
;
RunAtTheEndOfShader
(
root
assignFragDepth
symbolTable
)
;
}
}
