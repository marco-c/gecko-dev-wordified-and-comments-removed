#
define
YYBISON
30802
#
define
YYBISON_VERSION
"
3
.
8
.
2
"
#
define
YYSKELETON_NAME
"
yacc
.
c
"
#
define
YYPURE
2
#
define
YYPUSH
0
#
define
YYPULL
1
#
if
defined
(
__GNUC__
)
#
pragma
GCC
diagnostic
ignored
"
-
Wunused
-
function
"
#
pragma
GCC
diagnostic
ignored
"
-
Wunused
-
variable
"
#
pragma
GCC
diagnostic
ignored
"
-
Wswitch
-
enum
"
#
elif
defined
(
_MSC_VER
)
#
pragma
warning
(
disable
:
4065
)
#
pragma
warning
(
disable
:
4189
)
#
pragma
warning
(
disable
:
4244
)
#
pragma
warning
(
disable
:
4505
)
#
pragma
warning
(
disable
:
4701
)
#
pragma
warning
(
disable
:
4702
)
#
endif
#
if
defined
(
__clang__
)
#
pragma
clang
diagnostic
ignored
"
-
Wunreachable
-
code
"
#
pragma
clang
diagnostic
ignored
"
-
Wunused
-
but
-
set
-
variable
"
#
endif
#
include
"
GLSLANG
/
ShaderLang
.
h
"
#
include
"
angle_gl
.
h
"
#
include
"
compiler
/
translator
/
Declarator
.
h
"
#
include
"
compiler
/
translator
/
ParseContext
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
#
define
YYENABLE_NLS
0
using
namespace
sh
;
#
ifndef
YY_CAST
#
ifdef
__cplusplus
#
define
YY_CAST
(
Type
Val
)
static_cast
<
Type
>
(
Val
)
#
define
YY_REINTERPRET_CAST
(
Type
Val
)
reinterpret_cast
<
Type
>
(
Val
)
#
else
#
define
YY_CAST
(
Type
Val
)
(
(
Type
)
(
Val
)
)
#
define
YY_REINTERPRET_CAST
(
Type
Val
)
(
(
Type
)
(
Val
)
)
#
endif
#
endif
#
ifndef
YY_NULLPTR
#
if
defined
__cplusplus
#
if
201103L
<
=
__cplusplus
#
define
YY_NULLPTR
nullptr
#
else
#
define
YY_NULLPTR
0
#
endif
#
else
#
define
YY_NULLPTR
(
(
void
*
)
0
)
#
endif
#
endif
#
include
"
glslang_tab_autogen
.
h
"
enum
yysymbol_kind_t
{
YYSYMBOL_YYEMPTY
=
-
2
YYSYMBOL_YYEOF
=
0
YYSYMBOL_YYerror
=
1
YYSYMBOL_YYUNDEF
=
2
YYSYMBOL_INVARIANT
=
3
YYSYMBOL_PRECISE
=
4
YYSYMBOL_HIGH_PRECISION
=
5
YYSYMBOL_MEDIUM_PRECISION
=
6
YYSYMBOL_LOW_PRECISION
=
7
YYSYMBOL_PRECISION
=
8
YYSYMBOL_ATTRIBUTE
=
9
YYSYMBOL_CONST_QUAL
=
10
YYSYMBOL_BOOL_TYPE
=
11
YYSYMBOL_FLOAT_TYPE
=
12
YYSYMBOL_INT_TYPE
=
13
YYSYMBOL_UINT_TYPE
=
14
YYSYMBOL_BREAK
=
15
YYSYMBOL_CONTINUE
=
16
YYSYMBOL_DO
=
17
YYSYMBOL_ELSE
=
18
YYSYMBOL_FOR
=
19
YYSYMBOL_IF
=
20
YYSYMBOL_DISCARD
=
21
YYSYMBOL_RETURN
=
22
YYSYMBOL_SWITCH
=
23
YYSYMBOL_CASE
=
24
YYSYMBOL_DEFAULT
=
25
YYSYMBOL_BVEC2
=
26
YYSYMBOL_BVEC3
=
27
YYSYMBOL_BVEC4
=
28
YYSYMBOL_IVEC2
=
29
YYSYMBOL_IVEC3
=
30
YYSYMBOL_IVEC4
=
31
YYSYMBOL_VEC2
=
32
YYSYMBOL_VEC3
=
33
YYSYMBOL_VEC4
=
34
YYSYMBOL_UVEC2
=
35
YYSYMBOL_UVEC3
=
36
YYSYMBOL_UVEC4
=
37
YYSYMBOL_MATRIX2
=
38
YYSYMBOL_MATRIX3
=
39
YYSYMBOL_MATRIX4
=
40
YYSYMBOL_IN_QUAL
=
41
YYSYMBOL_OUT_QUAL
=
42
YYSYMBOL_INOUT_QUAL
=
43
YYSYMBOL_UNIFORM
=
44
YYSYMBOL_BUFFER
=
45
YYSYMBOL_VARYING
=
46
YYSYMBOL_MATRIX2x3
=
47
YYSYMBOL_MATRIX3x2
=
48
YYSYMBOL_MATRIX2x4
=
49
YYSYMBOL_MATRIX4x2
=
50
YYSYMBOL_MATRIX3x4
=
51
YYSYMBOL_MATRIX4x3
=
52
YYSYMBOL_SAMPLE
=
53
YYSYMBOL_CENTROID
=
54
YYSYMBOL_FLAT
=
55
YYSYMBOL_SMOOTH
=
56
YYSYMBOL_NOPERSPECTIVE
=
57
YYSYMBOL_PATCH
=
58
YYSYMBOL_READONLY
=
59
YYSYMBOL_WRITEONLY
=
60
YYSYMBOL_COHERENT
=
61
YYSYMBOL_RESTRICT
=
62
YYSYMBOL_VOLATILE
=
63
YYSYMBOL_SHARED
=
64
YYSYMBOL_STRUCT
=
65
YYSYMBOL_VOID_TYPE
=
66
YYSYMBOL_WHILE
=
67
YYSYMBOL_SAMPLER2D
=
68
YYSYMBOL_SAMPLERCUBE
=
69
YYSYMBOL_SAMPLER_EXTERNAL_OES
=
70
YYSYMBOL_SAMPLER2DRECT
=
71
YYSYMBOL_SAMPLER2DARRAY
=
72
YYSYMBOL_ISAMPLER2D
=
73
YYSYMBOL_ISAMPLER3D
=
74
YYSYMBOL_ISAMPLERCUBE
=
75
YYSYMBOL_ISAMPLER2DARRAY
=
76
YYSYMBOL_USAMPLER2D
=
77
YYSYMBOL_USAMPLER3D
=
78
YYSYMBOL_USAMPLERCUBE
=
79
YYSYMBOL_USAMPLER2DARRAY
=
80
YYSYMBOL_SAMPLER2DMS
=
81
YYSYMBOL_ISAMPLER2DMS
=
82
YYSYMBOL_USAMPLER2DMS
=
83
YYSYMBOL_SAMPLER2DMSARRAY
=
84
YYSYMBOL_ISAMPLER2DMSARRAY
=
85
YYSYMBOL_USAMPLER2DMSARRAY
=
86
YYSYMBOL_SAMPLER3D
=
87
YYSYMBOL_SAMPLER3DRECT
=
88
YYSYMBOL_SAMPLER2DSHADOW
=
89
YYSYMBOL_SAMPLERCUBESHADOW
=
90
YYSYMBOL_SAMPLER2DARRAYSHADOW
=
91
YYSYMBOL_SAMPLERVIDEOWEBGL
=
92
YYSYMBOL_SAMPLERCUBEARRAYOES
=
93
YYSYMBOL_SAMPLERCUBEARRAYSHADOWOES
=
94
YYSYMBOL_ISAMPLERCUBEARRAYOES
=
95
YYSYMBOL_USAMPLERCUBEARRAYOES
=
96
YYSYMBOL_SAMPLERCUBEARRAYEXT
=
97
YYSYMBOL_SAMPLERCUBEARRAYSHADOWEXT
=
98
YYSYMBOL_ISAMPLERCUBEARRAYEXT
=
99
YYSYMBOL_USAMPLERCUBEARRAYEXT
=
100
YYSYMBOL_SAMPLERBUFFER
=
101
YYSYMBOL_ISAMPLERBUFFER
=
102
YYSYMBOL_USAMPLERBUFFER
=
103
YYSYMBOL_SAMPLEREXTERNAL2DY2YEXT
=
104
YYSYMBOL_IMAGE2D
=
105
YYSYMBOL_IIMAGE2D
=
106
YYSYMBOL_UIMAGE2D
=
107
YYSYMBOL_IMAGE3D
=
108
YYSYMBOL_IIMAGE3D
=
109
YYSYMBOL_UIMAGE3D
=
110
YYSYMBOL_IMAGE2DARRAY
=
111
YYSYMBOL_IIMAGE2DARRAY
=
112
YYSYMBOL_UIMAGE2DARRAY
=
113
YYSYMBOL_IMAGECUBE
=
114
YYSYMBOL_IIMAGECUBE
=
115
YYSYMBOL_UIMAGECUBE
=
116
YYSYMBOL_IMAGECUBEARRAYOES
=
117
YYSYMBOL_IIMAGECUBEARRAYOES
=
118
YYSYMBOL_UIMAGECUBEARRAYOES
=
119
YYSYMBOL_IMAGECUBEARRAYEXT
=
120
YYSYMBOL_IIMAGECUBEARRAYEXT
=
121
YYSYMBOL_UIMAGECUBEARRAYEXT
=
122
YYSYMBOL_IMAGEBUFFER
=
123
YYSYMBOL_IIMAGEBUFFER
=
124
YYSYMBOL_UIMAGEBUFFER
=
125
YYSYMBOL_ATOMICUINT
=
126
YYSYMBOL_PIXELLOCALANGLE
=
127
YYSYMBOL_IPIXELLOCALANGLE
=
128
YYSYMBOL_UPIXELLOCALANGLE
=
129
YYSYMBOL_LAYOUT
=
130
YYSYMBOL_YUVCSCSTANDARDEXT
=
131
YYSYMBOL_YUVCSCSTANDARDEXTCONSTANT
=
132
YYSYMBOL_IDENTIFIER
=
133
YYSYMBOL_TYPE_NAME
=
134
YYSYMBOL_FLOATCONSTANT
=
135
YYSYMBOL_INTCONSTANT
=
136
YYSYMBOL_UINTCONSTANT
=
137
YYSYMBOL_BOOLCONSTANT
=
138
YYSYMBOL_FIELD_SELECTION
=
139
YYSYMBOL_LEFT_OP
=
140
YYSYMBOL_RIGHT_OP
=
141
YYSYMBOL_INC_OP
=
142
YYSYMBOL_DEC_OP
=
143
YYSYMBOL_LE_OP
=
144
YYSYMBOL_GE_OP
=
145
YYSYMBOL_EQ_OP
=
146
YYSYMBOL_NE_OP
=
147
YYSYMBOL_AND_OP
=
148
YYSYMBOL_OR_OP
=
149
YYSYMBOL_XOR_OP
=
150
YYSYMBOL_MUL_ASSIGN
=
151
YYSYMBOL_DIV_ASSIGN
=
152
YYSYMBOL_ADD_ASSIGN
=
153
YYSYMBOL_MOD_ASSIGN
=
154
YYSYMBOL_LEFT_ASSIGN
=
155
YYSYMBOL_RIGHT_ASSIGN
=
156
YYSYMBOL_AND_ASSIGN
=
157
YYSYMBOL_XOR_ASSIGN
=
158
YYSYMBOL_OR_ASSIGN
=
159
YYSYMBOL_SUB_ASSIGN
=
160
YYSYMBOL_LEFT_PAREN
=
161
YYSYMBOL_RIGHT_PAREN
=
162
YYSYMBOL_LEFT_BRACKET
=
163
YYSYMBOL_RIGHT_BRACKET
=
164
YYSYMBOL_LEFT_BRACE
=
165
YYSYMBOL_RIGHT_BRACE
=
166
YYSYMBOL_DOT
=
167
YYSYMBOL_COMMA
=
168
YYSYMBOL_COLON
=
169
YYSYMBOL_EQUAL
=
170
YYSYMBOL_SEMICOLON
=
171
YYSYMBOL_BANG
=
172
YYSYMBOL_DASH
=
173
YYSYMBOL_TILDE
=
174
YYSYMBOL_PLUS
=
175
YYSYMBOL_STAR
=
176
YYSYMBOL_SLASH
=
177
YYSYMBOL_PERCENT
=
178
YYSYMBOL_LEFT_ANGLE
=
179
YYSYMBOL_RIGHT_ANGLE
=
180
YYSYMBOL_VERTICAL_BAR
=
181
YYSYMBOL_CARET
=
182
YYSYMBOL_AMPERSAND
=
183
YYSYMBOL_QUESTION
=
184
YYSYMBOL_YYACCEPT
=
185
YYSYMBOL_identifier
=
186
YYSYMBOL_variable_identifier
=
187
YYSYMBOL_primary_expression
=
188
YYSYMBOL_postfix_expression
=
189
YYSYMBOL_integer_expression
=
190
YYSYMBOL_function_call
=
191
YYSYMBOL_function_call_or_method
=
192
YYSYMBOL_function_call_generic
=
193
YYSYMBOL_function_call_header_no_parameters
=
194
YYSYMBOL_function_call_header_with_parameters
=
195
YYSYMBOL_function_call_header
=
196
YYSYMBOL_function_identifier
=
197
YYSYMBOL_unary_expression
=
198
YYSYMBOL_unary_operator
=
199
YYSYMBOL_multiplicative_expression
=
200
YYSYMBOL_additive_expression
=
201
YYSYMBOL_shift_expression
=
202
YYSYMBOL_relational_expression
=
203
YYSYMBOL_equality_expression
=
204
YYSYMBOL_and_expression
=
205
YYSYMBOL_exclusive_or_expression
=
206
YYSYMBOL_inclusive_or_expression
=
207
YYSYMBOL_logical_and_expression
=
208
YYSYMBOL_logical_xor_expression
=
209
YYSYMBOL_logical_or_expression
=
210
YYSYMBOL_conditional_expression
=
211
YYSYMBOL_assignment_expression
=
212
YYSYMBOL_assignment_operator
=
213
YYSYMBOL_expression
=
214
YYSYMBOL_constant_expression
=
215
YYSYMBOL_enter_struct
=
216
YYSYMBOL_declaration
=
217
YYSYMBOL_function_prototype
=
218
YYSYMBOL_function_declarator
=
219
YYSYMBOL_function_header_with_parameters
=
220
YYSYMBOL_function_header
=
221
YYSYMBOL_parameter_declarator
=
222
YYSYMBOL_parameter_declaration
=
223
YYSYMBOL_parameter_type_specifier
=
224
YYSYMBOL_init_declarator_list
=
225
YYSYMBOL_single_declaration
=
226
YYSYMBOL_fully_specified_type
=
227
YYSYMBOL_interpolation_qualifier
=
228
YYSYMBOL_type_qualifier
=
229
YYSYMBOL_invariant_qualifier
=
230
YYSYMBOL_precise_qualifier
=
231
YYSYMBOL_single_type_qualifier
=
232
YYSYMBOL_storage_qualifier
=
233
YYSYMBOL_type_specifier
=
234
YYSYMBOL_precision_qualifier
=
235
YYSYMBOL_layout_qualifier
=
236
YYSYMBOL_layout_qualifier_id_list
=
237
YYSYMBOL_layout_qualifier_id
=
238
YYSYMBOL_type_specifier_no_prec
=
239
YYSYMBOL_array_specifier
=
240
YYSYMBOL_type_specifier_nonarray
=
241
YYSYMBOL_struct_specifier
=
242
YYSYMBOL_243_1
=
243
YYSYMBOL_244_2
=
244
YYSYMBOL_struct_declaration_list
=
245
YYSYMBOL_struct_declaration
=
246
YYSYMBOL_struct_declarator_list
=
247
YYSYMBOL_struct_declarator
=
248
YYSYMBOL_initializer
=
249
YYSYMBOL_declaration_statement
=
250
YYSYMBOL_statement
=
251
YYSYMBOL_simple_statement
=
252
YYSYMBOL_compound_statement_with_scope
=
253
YYSYMBOL_254_3
=
254
YYSYMBOL_255_4
=
255
YYSYMBOL_statement_no_new_scope
=
256
YYSYMBOL_statement_with_scope
=
257
YYSYMBOL_258_5
=
258
YYSYMBOL_259_6
=
259
YYSYMBOL_compound_statement_no_new_scope
=
260
YYSYMBOL_statement_list
=
261
YYSYMBOL_expression_statement
=
262
YYSYMBOL_selection_statement
=
263
YYSYMBOL_selection_rest_statement
=
264
YYSYMBOL_switch_statement
=
265
YYSYMBOL_266_7
=
266
YYSYMBOL_case_label
=
267
YYSYMBOL_condition
=
268
YYSYMBOL_iteration_statement
=
269
YYSYMBOL_270_8
=
270
YYSYMBOL_271_9
=
271
YYSYMBOL_272_10
=
272
YYSYMBOL_for_init_statement
=
273
YYSYMBOL_conditionopt
=
274
YYSYMBOL_for_rest_statement
=
275
YYSYMBOL_jump_statement
=
276
YYSYMBOL_translation_unit
=
277
YYSYMBOL_external_declaration
=
278
YYSYMBOL_function_definition
=
279
YYSYMBOL_280_11
=
280
}
;
typedef
enum
yysymbol_kind_t
yysymbol_kind_t
;
extern
int
yylex
(
YYSTYPE
*
yylval
YYLTYPE
*
yylloc
void
*
yyscanner
)
;
extern
void
yyerror
(
YYLTYPE
*
yylloc
TParseContext
*
context
void
*
scanner
const
char
*
reason
)
;
#
define
YYLLOC_DEFAULT
(
Current
Rhs
N
)
\
do
\
{
\
if
(
N
)
\
{
\
(
Current
)
.
first_file
=
YYRHSLOC
(
Rhs
1
)
.
first_file
;
\
(
Current
)
.
first_line
=
YYRHSLOC
(
Rhs
1
)
.
first_line
;
\
(
Current
)
.
last_file
=
YYRHSLOC
(
Rhs
N
)
.
last_file
;
\
(
Current
)
.
last_line
=
YYRHSLOC
(
Rhs
N
)
.
last_line
;
\
}
\
else
\
{
\
(
Current
)
.
first_file
=
YYRHSLOC
(
Rhs
0
)
.
last_file
;
\
(
Current
)
.
first_line
=
YYRHSLOC
(
Rhs
0
)
.
last_line
;
\
(
Current
)
.
last_file
=
YYRHSLOC
(
Rhs
0
)
.
last_file
;
\
(
Current
)
.
last_line
=
YYRHSLOC
(
Rhs
0
)
.
last_line
;
\
}
\
}
while
(
0
)
#
define
VERTEX_ONLY
(
S
L
)
\
do
\
{
\
if
(
context
-
>
getShaderType
(
)
!
=
GL_VERTEX_SHADER
)
\
{
\
context
-
>
error
(
L
"
supported
in
vertex
shaders
only
"
S
)
;
\
}
\
}
while
(
0
)
#
define
COMPUTE_ONLY
(
S
L
)
\
do
\
{
\
if
(
context
-
>
getShaderType
(
)
!
=
GL_COMPUTE_SHADER
)
\
{
\
context
-
>
error
(
L
"
supported
in
compute
shaders
only
"
S
)
;
\
}
\
}
while
(
0
)
#
define
ES2_ONLY
(
S
L
)
\
do
\
{
\
if
(
context
-
>
getShaderVersion
(
)
!
=
100
)
\
{
\
context
-
>
error
(
L
"
supported
in
GLSL
ES
1
.
00
only
"
S
)
;
\
}
\
}
while
(
0
)
#
define
ES3_OR_NEWER
(
TOKEN
LINE
REASON
)
\
do
\
{
\
if
(
context
-
>
getShaderVersion
(
)
<
300
)
\
{
\
context
-
>
error
(
LINE
REASON
"
supported
in
GLSL
ES
3
.
00
and
above
only
"
TOKEN
)
;
\
}
\
}
while
(
0
)
#
define
ES3_1_OR_NEWER
(
TOKEN
LINE
REASON
)
\
do
\
{
\
if
(
context
-
>
getShaderVersion
(
)
<
310
)
\
{
\
context
-
>
error
(
LINE
REASON
"
supported
in
GLSL
ES
3
.
10
and
above
only
"
TOKEN
)
;
\
}
\
}
while
(
0
)
#
ifdef
short
#
undef
short
#
endif
#
ifndef
__PTRDIFF_MAX__
#
include
<
limits
.
h
>
#
if
defined
__STDC_VERSION__
&
&
199901
<
=
__STDC_VERSION__
#
include
<
stdint
.
h
>
#
define
YY_STDINT_H
#
endif
#
endif
#
ifdef
__INT_LEAST8_MAX__
typedef
__INT_LEAST8_TYPE__
yytype_int8
;
#
elif
defined
YY_STDINT_H
typedef
int_least8_t
yytype_int8
;
#
else
typedef
signed
char
yytype_int8
;
#
endif
#
ifdef
__INT_LEAST16_MAX__
typedef
__INT_LEAST16_TYPE__
yytype_int16
;
#
elif
defined
YY_STDINT_H
typedef
int_least16_t
yytype_int16
;
#
else
typedef
short
yytype_int16
;
#
endif
#
ifdef
__hpux
#
undef
UINT_LEAST8_MAX
#
undef
UINT_LEAST16_MAX
#
define
UINT_LEAST8_MAX
255
#
define
UINT_LEAST16_MAX
65535
#
endif
#
if
defined
__UINT_LEAST8_MAX__
&
&
__UINT_LEAST8_MAX__
<
=
__INT_MAX__
typedef
__UINT_LEAST8_TYPE__
yytype_uint8
;
#
elif
(
!
defined
__UINT_LEAST8_MAX__
&
&
defined
YY_STDINT_H
&
&
UINT_LEAST8_MAX
<
=
INT_MAX
)
typedef
uint_least8_t
yytype_uint8
;
#
elif
!
defined
__UINT_LEAST8_MAX__
&
&
UCHAR_MAX
<
=
INT_MAX
typedef
unsigned
char
yytype_uint8
;
#
else
typedef
short
yytype_uint8
;
#
endif
#
if
defined
__UINT_LEAST16_MAX__
&
&
__UINT_LEAST16_MAX__
<
=
__INT_MAX__
typedef
__UINT_LEAST16_TYPE__
yytype_uint16
;
#
elif
(
!
defined
__UINT_LEAST16_MAX__
&
&
defined
YY_STDINT_H
&
&
UINT_LEAST16_MAX
<
=
INT_MAX
)
typedef
uint_least16_t
yytype_uint16
;
#
elif
!
defined
__UINT_LEAST16_MAX__
&
&
USHRT_MAX
<
=
INT_MAX
typedef
unsigned
short
yytype_uint16
;
#
else
typedef
int
yytype_uint16
;
#
endif
#
ifndef
YYPTRDIFF_T
#
if
defined
__PTRDIFF_TYPE__
&
&
defined
__PTRDIFF_MAX__
#
define
YYPTRDIFF_T
__PTRDIFF_TYPE__
#
define
YYPTRDIFF_MAXIMUM
__PTRDIFF_MAX__
#
elif
defined
PTRDIFF_MAX
#
ifndef
ptrdiff_t
#
include
<
stddef
.
h
>
#
endif
#
define
YYPTRDIFF_T
ptrdiff_t
#
define
YYPTRDIFF_MAXIMUM
PTRDIFF_MAX
#
else
#
define
YYPTRDIFF_T
long
#
define
YYPTRDIFF_MAXIMUM
LONG_MAX
#
endif
#
endif
#
ifndef
YYSIZE_T
#
ifdef
__SIZE_TYPE__
#
define
YYSIZE_T
__SIZE_TYPE__
#
elif
defined
size_t
#
define
YYSIZE_T
size_t
#
elif
defined
__STDC_VERSION__
&
&
199901
<
=
__STDC_VERSION__
#
include
<
stddef
.
h
>
#
define
YYSIZE_T
size_t
#
else
#
define
YYSIZE_T
unsigned
#
endif
#
endif
#
define
YYSIZE_MAXIMUM
\
YY_CAST
(
YYPTRDIFF_T
(
YYPTRDIFF_MAXIMUM
<
YY_CAST
(
YYSIZE_T
-
1
)
?
YYPTRDIFF_MAXIMUM
\
:
YY_CAST
(
YYSIZE_T
-
1
)
)
)
#
define
YYSIZEOF
(
X
)
YY_CAST
(
YYPTRDIFF_T
sizeof
(
X
)
)
typedef
yytype_int16
yy_state_t
;
typedef
int
yy_state_fast_t
;
#
ifndef
YY_
#
if
defined
YYENABLE_NLS
&
&
YYENABLE_NLS
#
if
ENABLE_NLS
#
include
<
libintl
.
h
>
#
define
YY_
(
Msgid
)
dgettext
(
"
bison
-
runtime
"
Msgid
)
#
endif
#
endif
#
ifndef
YY_
#
define
YY_
(
Msgid
)
Msgid
#
endif
#
endif
#
ifndef
YY_ATTRIBUTE_PURE
#
if
defined
__GNUC__
&
&
2
<
__GNUC__
+
(
96
<
=
__GNUC_MINOR__
)
#
define
YY_ATTRIBUTE_PURE
__attribute__
(
(
__pure__
)
)
#
else
#
define
YY_ATTRIBUTE_PURE
#
endif
#
endif
#
ifndef
YY_ATTRIBUTE_UNUSED
#
if
defined
__GNUC__
&
&
2
<
__GNUC__
+
(
7
<
=
__GNUC_MINOR__
)
#
define
YY_ATTRIBUTE_UNUSED
__attribute__
(
(
__unused__
)
)
#
else
#
define
YY_ATTRIBUTE_UNUSED
#
endif
#
endif
#
if
!
defined
lint
|
|
defined
__GNUC__
#
define
YY_USE
(
E
)
(
(
void
)
(
E
)
)
#
else
#
define
YY_USE
(
E
)
#
endif
#
if
defined
__GNUC__
&
&
!
defined
__ICC
&
&
406
<
=
__GNUC__
*
100
+
__GNUC_MINOR__
#
if
__GNUC__
*
100
+
__GNUC_MINOR__
<
407
#
define
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
\
_Pragma
(
"
GCC
diagnostic
push
"
)
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wuninitialized
\
"
"
)
#
else
#
define
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
\
_Pragma
(
"
GCC
diagnostic
push
"
)
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wuninitialized
\
"
"
)
\
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wmaybe
-
uninitialized
\
"
"
)
#
endif
#
define
YY_IGNORE_MAYBE_UNINITIALIZED_END
_Pragma
(
"
GCC
diagnostic
pop
"
)
#
else
#
define
YY_INITIAL_VALUE
(
Value
)
Value
#
endif
#
ifndef
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
#
define
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
#
define
YY_IGNORE_MAYBE_UNINITIALIZED_END
#
endif
#
ifndef
YY_INITIAL_VALUE
#
define
YY_INITIAL_VALUE
(
Value
)
#
endif
#
if
defined
__cplusplus
&
&
defined
__GNUC__
&
&
!
defined
__ICC
&
&
6
<
=
__GNUC__
#
define
YY_IGNORE_USELESS_CAST_BEGIN
\
_Pragma
(
"
GCC
diagnostic
push
"
)
_Pragma
(
"
GCC
diagnostic
ignored
\
"
-
Wuseless
-
cast
\
"
"
)
#
define
YY_IGNORE_USELESS_CAST_END
_Pragma
(
"
GCC
diagnostic
pop
"
)
#
endif
#
ifndef
YY_IGNORE_USELESS_CAST_BEGIN
#
define
YY_IGNORE_USELESS_CAST_BEGIN
#
define
YY_IGNORE_USELESS_CAST_END
#
endif
#
define
YY_ASSERT
(
E
)
(
(
void
)
(
0
&
&
(
E
)
)
)
#
if
!
defined
yyoverflow
#
ifdef
YYSTACK_USE_ALLOCA
#
if
YYSTACK_USE_ALLOCA
#
ifdef
__GNUC__
#
define
YYSTACK_ALLOC
__builtin_alloca
#
elif
defined
__BUILTIN_VA_ARG_INCR
#
include
<
alloca
.
h
>
#
elif
defined
_AIX
#
define
YYSTACK_ALLOC
__alloca
#
elif
defined
_MSC_VER
#
include
<
malloc
.
h
>
#
define
alloca
_alloca
#
else
#
define
YYSTACK_ALLOC
alloca
#
if
!
defined
_ALLOCA_H
&
&
!
defined
EXIT_SUCCESS
#
include
<
stdlib
.
h
>
#
ifndef
EXIT_SUCCESS
#
define
EXIT_SUCCESS
0
#
endif
#
endif
#
endif
#
endif
#
endif
#
ifdef
YYSTACK_ALLOC
#
define
YYSTACK_FREE
(
Ptr
)
\
do
\
{
/
*
empty
*
/
\
;
\
}
while
(
0
)
#
ifndef
YYSTACK_ALLOC_MAXIMUM
#
define
YYSTACK_ALLOC_MAXIMUM
4032
/
*
reasonable
circa
2006
*
/
#
endif
#
else
#
define
YYSTACK_ALLOC
YYMALLOC
#
define
YYSTACK_FREE
YYFREE
#
ifndef
YYSTACK_ALLOC_MAXIMUM
#
define
YYSTACK_ALLOC_MAXIMUM
YYSIZE_MAXIMUM
#
endif
#
if
(
defined
__cplusplus
&
&
!
defined
EXIT_SUCCESS
&
&
\
!
(
(
defined
YYMALLOC
|
|
defined
malloc
)
&
&
(
defined
YYFREE
|
|
defined
free
)
)
)
#
include
<
stdlib
.
h
>
#
ifndef
EXIT_SUCCESS
#
define
EXIT_SUCCESS
0
#
endif
#
endif
#
ifndef
YYMALLOC
#
define
YYMALLOC
malloc
#
if
!
defined
malloc
&
&
!
defined
EXIT_SUCCESS
void
*
malloc
(
YYSIZE_T
)
;
#
endif
#
endif
#
ifndef
YYFREE
#
define
YYFREE
free
#
if
!
defined
free
&
&
!
defined
EXIT_SUCCESS
void
free
(
void
*
)
;
#
endif
#
endif
#
endif
#
endif
#
if
(
!
defined
yyoverflow
&
&
\
(
!
defined
__cplusplus
|
|
(
defined
YYLTYPE_IS_TRIVIAL
&
&
YYLTYPE_IS_TRIVIAL
&
&
\
defined
YYSTYPE_IS_TRIVIAL
&
&
YYSTYPE_IS_TRIVIAL
)
)
)
union
yyalloc
{
yy_state_t
yyss_alloc
;
YYSTYPE
yyvs_alloc
;
YYLTYPE
yyls_alloc
;
}
;
#
define
YYSTACK_GAP_MAXIMUM
(
YYSIZEOF
(
union
yyalloc
)
-
1
)
#
define
YYSTACK_BYTES
(
N
)
\
(
(
N
)
*
(
YYSIZEOF
(
yy_state_t
)
+
YYSIZEOF
(
YYSTYPE
)
+
YYSIZEOF
(
YYLTYPE
)
)
+
\
2
*
YYSTACK_GAP_MAXIMUM
)
#
define
YYCOPY_NEEDED
1
#
define
YYSTACK_RELOCATE
(
Stack_alloc
Stack
)
\
do
\
{
\
YYPTRDIFF_T
yynewbytes
;
\
YYCOPY
(
&
yyptr
-
>
Stack_alloc
Stack
yysize
)
;
\
Stack
=
&
yyptr
-
>
Stack_alloc
;
\
yynewbytes
=
yystacksize
*
YYSIZEOF
(
*
Stack
)
+
YYSTACK_GAP_MAXIMUM
;
\
yyptr
+
=
yynewbytes
/
YYSIZEOF
(
*
yyptr
)
;
\
}
while
(
0
)
#
endif
#
if
defined
YYCOPY_NEEDED
&
&
YYCOPY_NEEDED
#
ifndef
YYCOPY
#
if
defined
__GNUC__
&
&
1
<
__GNUC__
#
define
YYCOPY
(
Dst
Src
Count
)
\
__builtin_memcpy
(
Dst
Src
YY_CAST
(
YYSIZE_T
(
Count
)
)
*
sizeof
(
*
(
Src
)
)
)
#
else
#
define
YYCOPY
(
Dst
Src
Count
)
\
do
\
{
\
YYPTRDIFF_T
yyi
;
\
for
(
yyi
=
0
;
yyi
<
(
Count
)
;
yyi
+
+
)
\
(
Dst
)
[
yyi
]
=
(
Src
)
[
yyi
]
;
\
}
while
(
0
)
#
endif
#
endif
#
endif
#
define
YYFINAL
167
#
define
YYLAST
3566
#
define
YYNTOKENS
185
#
define
YYNNTS
96
#
define
YYNRULES
329
#
define
YYNSTATES
453
#
define
YYMAXUTOK
439
#
define
YYTRANSLATE
(
YYX
)
\
(
0
<
=
(
YYX
)
&
&
(
YYX
)
<
=
YYMAXUTOK
?
YY_CAST
(
yysymbol_kind_t
yytranslate
[
YYX
]
)
\
:
YYSYMBOL_YYUNDEF
)
static
const
yytype_uint8
yytranslate
[
]
=
{
0
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
}
;
#
if
YYDEBUG
static
const
yytype_int16
yyrline
[
]
=
{
0
259
259
260
263
270
273
278
283
288
293
302
308
311
314
317
320
323
329
336
342
345
353
356
362
365
371
375
382
390
393
396
402
405
408
411
418
419
420
421
429
430
433
436
443
444
447
453
454
458
465
466
469
472
475
481
482
485
491
492
499
500
507
508
515
516
522
523
529
530
536
537
543
544
550
551
552
553
557
558
559
563
567
571
575
582
585
591
598
605
608
611
615
619
623
627
631
638
645
648
655
668
691
701
704
710
714
718
722
729
736
739
743
747
752
759
763
767
771
776
783
787
793
796
799
809
813
820
826
832
836
840
843
846
850
858
863
867
870
873
876
879
883
891
894
898
901
904
907
910
913
917
924
931
934
937
943
950
953
959
962
965
968
974
977
984
989
996
1001
1012
1015
1018
1021
1024
1027
1031
1035
1039
1043
1047
1051
1055
1059
1063
1067
1071
1075
1079
1083
1087
1091
1095
1099
1103
1107
1111
1118
1121
1124
1127
1130
1133
1136
1144
1152
1162
1165
1168
1171
1174
1177
1180
1188
1196
1206
1209
1212
1215
1218
1221
1224
1232
1240
1250
1253
1256
1259
1267
1275
1282
1292
1299
1306
1309
1312
1315
1318
1321
1324
1327
1330
1333
1336
1339
1342
1350
1358
1366
1374
1382
1390
1400
1410
1420
1423
1430
1437
1444
1447
1455
1455
1458
1458
1464
1467
1473
1476
1483
1487
1493
1496
1502
1506
1510
1511
1517
1518
1519
1520
1521
1522
1523
1527
1531
1531
1531
1538
1539
1543
1543
1544
1544
1549
1553
1560
1564
1571
1572
1576
1582
1586
1595
1595
1602
1605
1611
1615
1621
1621
1626
1626
1630
1630
1638
1641
1647
1650
1656
1660
1667
1670
1673
1676
1679
1687
1693
1699
1702
1708
1708
}
;
#
endif
#
define
YY_ACCESSING_SYMBOL
(
State
)
YY_CAST
(
yysymbol_kind_t
yystos
[
State
]
)
#
if
YYDEBUG
|
|
0
static
const
char
*
yysymbol_name
(
yysymbol_kind_t
yysymbol
)
YY_ATTRIBUTE_UNUSED
;
static
const
char
*
const
yytname
[
]
=
{
"
\
"
end
of
file
\
"
"
"
error
"
"
\
"
invalid
token
\
"
"
"
INVARIANT
"
"
PRECISE
"
"
HIGH_PRECISION
"
"
MEDIUM_PRECISION
"
"
LOW_PRECISION
"
"
PRECISION
"
"
ATTRIBUTE
"
"
CONST_QUAL
"
"
BOOL_TYPE
"
"
FLOAT_TYPE
"
"
INT_TYPE
"
"
UINT_TYPE
"
"
BREAK
"
"
CONTINUE
"
"
DO
"
"
ELSE
"
"
FOR
"
"
IF
"
"
DISCARD
"
"
RETURN
"
"
SWITCH
"
"
CASE
"
"
DEFAULT
"
"
BVEC2
"
"
BVEC3
"
"
BVEC4
"
"
IVEC2
"
"
IVEC3
"
"
IVEC4
"
"
VEC2
"
"
VEC3
"
"
VEC4
"
"
UVEC2
"
"
UVEC3
"
"
UVEC4
"
"
MATRIX2
"
"
MATRIX3
"
"
MATRIX4
"
"
IN_QUAL
"
"
OUT_QUAL
"
"
INOUT_QUAL
"
"
UNIFORM
"
"
BUFFER
"
"
VARYING
"
"
MATRIX2x3
"
"
MATRIX3x2
"
"
MATRIX2x4
"
"
MATRIX4x2
"
"
MATRIX3x4
"
"
MATRIX4x3
"
"
SAMPLE
"
"
CENTROID
"
"
FLAT
"
"
SMOOTH
"
"
NOPERSPECTIVE
"
"
PATCH
"
"
READONLY
"
"
WRITEONLY
"
"
COHERENT
"
"
RESTRICT
"
"
VOLATILE
"
"
SHARED
"
"
STRUCT
"
"
VOID_TYPE
"
"
WHILE
"
"
SAMPLER2D
"
"
SAMPLERCUBE
"
"
SAMPLER_EXTERNAL_OES
"
"
SAMPLER2DRECT
"
"
SAMPLER2DARRAY
"
"
ISAMPLER2D
"
"
ISAMPLER3D
"
"
ISAMPLERCUBE
"
"
ISAMPLER2DARRAY
"
"
USAMPLER2D
"
"
USAMPLER3D
"
"
USAMPLERCUBE
"
"
USAMPLER2DARRAY
"
"
SAMPLER2DMS
"
"
ISAMPLER2DMS
"
"
USAMPLER2DMS
"
"
SAMPLER2DMSARRAY
"
"
ISAMPLER2DMSARRAY
"
"
USAMPLER2DMSARRAY
"
"
SAMPLER3D
"
"
SAMPLER3DRECT
"
"
SAMPLER2DSHADOW
"
"
SAMPLERCUBESHADOW
"
"
SAMPLER2DARRAYSHADOW
"
"
SAMPLERVIDEOWEBGL
"
"
SAMPLERCUBEARRAYOES
"
"
SAMPLERCUBEARRAYSHADOWOES
"
"
ISAMPLERCUBEARRAYOES
"
"
USAMPLERCUBEARRAYOES
"
"
SAMPLERCUBEARRAYEXT
"
"
SAMPLERCUBEARRAYSHADOWEXT
"
"
ISAMPLERCUBEARRAYEXT
"
"
USAMPLERCUBEARRAYEXT
"
"
SAMPLERBUFFER
"
"
ISAMPLERBUFFER
"
"
USAMPLERBUFFER
"
"
SAMPLEREXTERNAL2DY2YEXT
"
"
IMAGE2D
"
"
IIMAGE2D
"
"
UIMAGE2D
"
"
IMAGE3D
"
"
IIMAGE3D
"
"
UIMAGE3D
"
"
IMAGE2DARRAY
"
"
IIMAGE2DARRAY
"
"
UIMAGE2DARRAY
"
"
IMAGECUBE
"
"
IIMAGECUBE
"
"
UIMAGECUBE
"
"
IMAGECUBEARRAYOES
"
"
IIMAGECUBEARRAYOES
"
"
UIMAGECUBEARRAYOES
"
"
IMAGECUBEARRAYEXT
"
"
IIMAGECUBEARRAYEXT
"
"
UIMAGECUBEARRAYEXT
"
"
IMAGEBUFFER
"
"
IIMAGEBUFFER
"
"
UIMAGEBUFFER
"
"
ATOMICUINT
"
"
PIXELLOCALANGLE
"
"
IPIXELLOCALANGLE
"
"
UPIXELLOCALANGLE
"
"
LAYOUT
"
"
YUVCSCSTANDARDEXT
"
"
YUVCSCSTANDARDEXTCONSTANT
"
"
IDENTIFIER
"
"
TYPE_NAME
"
"
FLOATCONSTANT
"
"
INTCONSTANT
"
"
UINTCONSTANT
"
"
BOOLCONSTANT
"
"
FIELD_SELECTION
"
"
LEFT_OP
"
"
RIGHT_OP
"
"
INC_OP
"
"
DEC_OP
"
"
LE_OP
"
"
GE_OP
"
"
EQ_OP
"
"
NE_OP
"
"
AND_OP
"
"
OR_OP
"
"
XOR_OP
"
"
MUL_ASSIGN
"
"
DIV_ASSIGN
"
"
ADD_ASSIGN
"
"
MOD_ASSIGN
"
"
LEFT_ASSIGN
"
"
RIGHT_ASSIGN
"
"
AND_ASSIGN
"
"
XOR_ASSIGN
"
"
OR_ASSIGN
"
"
SUB_ASSIGN
"
"
LEFT_PAREN
"
"
RIGHT_PAREN
"
"
LEFT_BRACKET
"
"
RIGHT_BRACKET
"
"
LEFT_BRACE
"
"
RIGHT_BRACE
"
"
DOT
"
"
COMMA
"
"
COLON
"
"
EQUAL
"
"
SEMICOLON
"
"
BANG
"
"
DASH
"
"
TILDE
"
"
PLUS
"
"
STAR
"
"
SLASH
"
"
PERCENT
"
"
LEFT_ANGLE
"
"
RIGHT_ANGLE
"
"
VERTICAL_BAR
"
"
CARET
"
"
AMPERSAND
"
"
QUESTION
"
"
accept
"
"
identifier
"
"
variable_identifier
"
"
primary_expression
"
"
postfix_expression
"
"
integer_expression
"
"
function_call
"
"
function_call_or_method
"
"
function_call_generic
"
"
function_call_header_no_parameters
"
"
function_call_header_with_parameters
"
"
function_call_header
"
"
function_identifier
"
"
unary_expression
"
"
unary_operator
"
"
multiplicative_expression
"
"
additive_expression
"
"
shift_expression
"
"
relational_expression
"
"
equality_expression
"
"
and_expression
"
"
exclusive_or_expression
"
"
inclusive_or_expression
"
"
logical_and_expression
"
"
logical_xor_expression
"
"
logical_or_expression
"
"
conditional_expression
"
"
assignment_expression
"
"
assignment_operator
"
"
expression
"
"
constant_expression
"
"
enter_struct
"
"
declaration
"
"
function_prototype
"
"
function_declarator
"
"
function_header_with_parameters
"
"
function_header
"
"
parameter_declarator
"
"
parameter_declaration
"
"
parameter_type_specifier
"
"
init_declarator_list
"
"
single_declaration
"
"
fully_specified_type
"
"
interpolation_qualifier
"
"
type_qualifier
"
"
invariant_qualifier
"
"
precise_qualifier
"
"
single_type_qualifier
"
"
storage_qualifier
"
"
type_specifier
"
"
precision_qualifier
"
"
layout_qualifier
"
"
layout_qualifier_id_list
"
"
layout_qualifier_id
"
"
type_specifier_no_prec
"
"
array_specifier
"
"
type_specifier_nonarray
"
"
struct_specifier
"
"
1
"
"
2
"
"
struct_declaration_list
"
"
struct_declaration
"
"
struct_declarator_list
"
"
struct_declarator
"
"
initializer
"
"
declaration_statement
"
"
statement
"
"
simple_statement
"
"
compound_statement_with_scope
"
"
3
"
"
4
"
"
statement_no_new_scope
"
"
statement_with_scope
"
"
5
"
"
6
"
"
compound_statement_no_new_scope
"
"
statement_list
"
"
expression_statement
"
"
selection_statement
"
"
selection_rest_statement
"
"
switch_statement
"
"
7
"
"
case_label
"
"
condition
"
"
iteration_statement
"
"
8
"
"
9
"
"
10
"
"
for_init_statement
"
"
conditionopt
"
"
for_rest_statement
"
"
jump_statement
"
"
translation_unit
"
"
external_declaration
"
"
function_definition
"
"
11
"
YY_NULLPTR
}
;
static
const
char
*
yysymbol_name
(
yysymbol_kind_t
yysymbol
)
{
return
yytname
[
yysymbol
]
;
}
#
endif
#
define
YYPACT_NINF
(
-
397
)
#
define
yypact_value_is_default
(
Yyn
)
(
(
Yyn
)
=
=
YYPACT_NINF
)
#
define
YYTABLE_NINF
(
-
289
)
#
define
yytable_value_is_error
(
Yyn
)
0
static
const
yytype_int16
yypact
[
]
=
{
3052
-
397
-
397
-
397
-
397
-
397
105
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
94
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
132
-
397
-
397
-
397
-
81
-
41
-
49
3184
-
90
-
397
-
86
-
397
1609
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
39
-
397
2920
-
397
-
397
3432
-
397
-
397
-
397
-
31
-
47
-
397
-
26
-
397
3184
-
397
-
397
-
397
3184
3
3
-
397
-
35
-
135
-
114
-
397
3184
-
397
-
397
1734
-
10
-
397
-
397
-
6
3184
-
397
-
397
-
9
-
93
-
397
438
-
397
-
397
-
397
-
397
-
39
-
97
-
397
2193
-
87
-
397
-
397
3184
3
2497
-
397
-
397
7
-
397
-
397
-
397
-
397
-
397
2193
2193
2193
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
78
-
397
-
397
-
397
12
-
69
2344
8
-
397
2193
-
33
-
96
-
116
-
124
5
-
12
-
7
-
4
31
30
-
123
-
397
17
-
397
1888
-
397
2638
3184
19
-
397
-
47
13
14
-
397
22
25
16
2042
28
2193
32
44
37
-
397
-
397
40
-
397
-
397
-
80
-
397
-
81
45
-
397
-
397
-
397
-
397
611
-
397
-
397
-
397
-
397
-
397
-
397
-
10
2193
-
83
-
397
-
397
2193
3
-
39
-
76
-
397
-
111
-
397
-
397
-
397
-
62
-
397
-
397
2193
3308
-
397
-
397
2193
46
-
397
-
397
-
397
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
2193
-
397
-
397
47
-
397
2779
-
397
-
397
-
397
-
397
-
397
48
-
397
2193
-
397
-
397
-
48
2193
43
-
397
-
397
-
397
784
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
2193
2193
-
397
-
397
-
397
-
397
2193
-
397
-
43
-
10
3
-
397
-
122
-
397
-
397
51
41
-
397
55
-
397
-
397
-
397
-
397
-
397
-
33
-
33
-
96
-
96
-
116
-
116
-
116
-
116
-
124
-
124
5
-
12
-
7
-
4
31
30
-
11
-
397
-
397
150
-
26
1130
1303
-
60
-
397
-
59
-
397
1456
784
-
397
-
397
-
397
-
397
-
397
-
397
-
109
-
397
2193
57
-
397
-
397
-
397
-
397
1456
48
-
397
41
3
3184
58
56
-
397
-
397
2193
-
397
50
61
206
-
397
60
59
957
-
397
-
55
2193
957
48
-
397
2193
-
397
-
397
-
397
63
41
-
397
-
397
-
397
-
397
}
;
static
const
yytype_int16
yydefact
[
]
=
{
0
127
128
153
154
155
0
135
137
173
170
171
172
177
178
179
180
181
182
174
175
176
183
184
185
186
187
188
138
139
140
143
144
136
189
190
191
192
193
194
151
141
123
122
124
142
145
146
147
148
149
150
0
169
196
198
229
231
199
205
206
207
208
214
215
216
217
200
209
218
201
210
219
197
223
224
225
228
202
226
211
220
203
227
212
221
204
213
222
230
232
233
234
235
236
237
238
239
240
241
242
243
244
246
248
245
247
249
250
251
252
253
254
255
256
0
195
258
327
328
0
99
98
0
110
115
132
0
133
134
125
129
120
131
130
152
163
257
0
324
326
0
2
3
261
0
0
89
0
97
0
106
100
108
0
109
0
90
2
116
0
95
0
126
121
0
164
1
325
0
0
259
162
159
0
157
0
329
101
105
107
103
111
102
0
117
88
96
0
0
0
263
10
4
8
6
7
9
31
0
0
0
165
38
37
39
36
5
12
32
14
19
20
0
0
25
0
40
0
44
47
50
55
58
60
62
64
66
68
70
87
0
29
0
91
0
0
0
156
0
0
0
309
0
0
0
0
0
0
0
0
283
292
296
40
72
85
0
272
0
152
275
294
274
273
0
276
277
278
279
280
281
104
0
112
271
119
0
0
269
0
267
0
264
33
34
0
16
17
0
0
23
22
0
169
26
28
35
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
166
167
0
262
0
160
161
158
320
319
290
311
0
323
321
0
0
0
304
307
282
0
75
76
78
77
80
81
82
83
84
79
74
0
0
297
293
295
114
0
118
0
270
0
265
0
92
11
0
18
30
15
21
27
41
42
43
46
45
48
49
53
54
51
52
56
57
59
61
63
65
67
69
0
168
260
0
0
0
0
0
322
0
303
0
284
73
86
113
266
268
93
0
13
0
0
289
291
314
313
316
290
301
305
0
0
0
0
94
71
0
315
0
0
300
298
0
0
0
285
0
317
0
290
302
0
287
308
286
0
318
312
299
306
310
}
;
static
const
yytype_int16
yypgoto
[
]
=
{
-
397
-
51
-
397
-
397
-
397
-
397
-
397
-
397
-
64
-
397
-
397
-
397
-
397
42
-
397
-
142
-
140
-
175
-
143
-
84
-
75
-
85
-
82
-
77
-
73
-
397
-
151
-
179
-
397
-
188
-
202
-
397
9
10
-
397
-
397
-
397
77
89
90
-
397
-
397
-
375
-
397
-
118
-
397
-
397
-
121
-
397
-
120
239
-
397
-
397
15
0
-
144
-
397
-
397
-
397
-
397
-
152
-
182
-
32
-
113
-
261
-
150
-
254
-
377
-
185
-
397
-
397
-
187
-
396
-
397
-
397
-
145
-
72
-
141
-
397
-
397
-
397
-
397
-
397
-
166
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
-
397
117
-
397
-
397
}
;
static
const
yytype_int16
yydefgoto
[
]
=
{
0
279
207
208
209
366
210
211
212
213
214
215
216
254
218
219
220
221
222
223
224
225
226
227
228
229
255
256
351
257
231
162
258
259
120
121
122
151
152
153
123
124
125
126
127
128
129
130
131
132
133
134
174
175
232
166
136
137
236
170
190
191
280
281
276
261
262
263
264
339
425
445
394
395
396
446
265
266
267
433
268
434
269
424
270
402
328
397
418
430
431
271
138
139
140
148
}
;
static
const
yytype_int16
yytable
[
]
=
{
135
145
155
177
154
275
163
164
283
118
119
355
356
286
230
185
358
172
235
415
305
306
363
432
303
304
316
422
165
146
155
320
154
163
155
184
295
272
274
142
143
165
189
422
188
450
335
158
143
409
189
186
188
283
233
307
308
187
333
444
364
317
426
444
287
288
165
163
278
238
189
144
188
273
159
239
233
301
156
302
233
157
230
277
322
289
173
357
352
290
147
353
361
292
275
362
406
230
275
293
365
367
419
420
181
182
352
447
352
352
3
4
5
352
371
189
189
188
188
150
352
149
135
399
165
361
183
135
407
391
379
380
381
382
171
360
142
143
135
176
283
169
398
298
299
300
400
118
119
355
135
309
310
233
135
323
324
352
412
375
376
237
135
377
378
234
383
384
-
30
296
135
311
404
405
291
312
260
313
275
314
315
318
451
329
326
327
330
331
135
334
135
340
341
342
343
344
345
346
347
348
349
336
189
338
188
337
-
29
217
-
24
352
350
392
401
-
288
421
411
-
31
413
428
410
436
439
437
440
441
251
370
385
387
443
421
179
388
427
452
135
135
386
389
178
438
284
285
390
180
141
359
416
408
442
414
448
429
449
325
168
417
0
0
0
297
0
0
0
275
260
0
403
0
0
0
0
0
0
0
217
0
0
0
0
0
0
0
0
423
0
0
0
0
0
217
0
0
0
0
0
0
0
0
0
423
0
163
164
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
135
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
260
372
373
374
217
217
217
217
217
217
217
217
217
217
217
217
217
217
217
217
0
0
0
0
0
0
0
0
0
0
0
0
435
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
260
260
0
0
0
0
260
260
0
0
0
0
0
0
0
0
0
0
0
0
0
0
260
0
0
0
0
135
0
0
0
0
0
0
0
0
0
0
0
0
260
0
0
0
260
1
2
3
4
5
6
7
8
9
10
11
12
240
241
242
0
243
244
245
246
247
248
249
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
250
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
201
0
0
0
251
252
0
0
0
0
253
203
204
205
206
1
2
3
4
5
6
7
8
9
10
11
12
240
241
242
0
243
244
245
246
247
248
249
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
250
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
201
0
0
0
251
354
0
0
0
0
253
203
204
205
206
1
2
3
4
5
6
7
8
9
10
11
12
240
241
242
0
243
244
245
246
247
248
249
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
250
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
201
0
0
0
251
0
0
0
0
0
253
203
204
205
206
1
2
3
4
5
6
7
8
9
10
11
12
240
241
242
0
243
244
245
246
247
248
249
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
250
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
201
0
0
0
176
0
0
0
0
0
253
203
204
205
206
1
2
3
4
5
6
7
8
9
10
11
12
240
241
242
0
243
244
245
246
247
248
249
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
250
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
201
0
0
0
0
0
0
0
0
0
253
203
204
205
206
1
2
3
4
5
6
7
8
9
10
11
12
0
0
0
0
0
0
0
0
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
1
2
3
4
5
201
7
8
9
10
11
12
0
0
0
253
203
204
205
206
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
1
2
3
4
5
201
7
8
9
10
11
12
0
0
0
0
203
204
205
206
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
0
160
117
0
9
10
11
12
0
0
0
0
0
0
0
0
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
0
0
0
0
0
161
34
35
36
37
38
39
0
0
0
0
0
0
0
0
0
0
0
0
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
0
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
201
0
0
202
9
10
11
12
0
0
0
203
204
205
206
0
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
0
0
0
0
0
0
34
35
36
37
38
39
0
0
0
0
0
0
0
0
0
0
0
0
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
0
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
201
0
0
319
9
10
11
12
0
0
0
203
204
205
206
0
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
0
0
0
0
0
0
34
35
36
37
38
39
0
0
0
0
0
0
0
0
0
0
0
0
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
0
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
201
9
10
11
12
0
0
0
0
0
332
203
204
205
206
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
0
0
0
0
0
0
34
35
36
37
38
39
0
0
0
0
0
0
0
0
0
0
0
0
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
0
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
201
9
10
11
12
0
0
0
0
0
0
203
204
205
206
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
0
0
0
0
0
0
34
35
36
37
38
39
0
0
0
0
0
0
0
0
0
0
0
0
52
294
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
0
116
192
193
117
194
195
196
197
198
0
0
199
200
0
0
0
0
0
0
0
0
0
0
0
0
1
2
3
4
5
201
7
8
9
10
11
12
0
0
0
0
203
204
205
206
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
0
0
117
0
0
0
0
0
0
0
0
0
1
2
3
4
5
0
7
8
9
10
11
12
0
0
0
0
0
0
0
0
0
0
282
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
0
0
117
0
0
0
0
0
0
0
0
0
1
2
3
4
5
0
7
8
9
10
11
12
0
0
0
0
0
0
0
0
0
0
321
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
0
0
117
0
0
0
0
0
0
167
0
0
1
2
3
4
5
6
7
8
9
10
11
12
0
0
0
0
0
0
0
0
0
0
393
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
0
0
117
1
2
3
4
5
6
7
8
9
10
11
12
0
0
0
0
0
0
0
0
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
0
0
117
1
2
3
4
5
0
7
8
9
10
11
12
0
0
0
0
0
0
0
0
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
0
0
117
9
10
11
12
0
0
0
0
0
0
0
0
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
0
0
0
0
0
0
34
35
36
37
38
39
0
0
0
0
0
0
0
0
0
0
0
0
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
0
116
0
368
117
9
10
11
12
369
0
0
0
0
0
0
0
0
0
0
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
0
0
0
0
0
0
34
35
36
37
38
39
0
0
0
0
0
0
0
0
0
0
0
0
52
53
0
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
0
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
0
116
0
0
117
}
;
static
const
yytype_int16
yycheck
[
]
=
{
0
52
122
148
122
184
127
127
190
0
0
265
273
201
165
159
277
64
170
396
144
145
133
419
140
141
149
402
163
161
150
233
150
154
154
170
215
181
182
133
134
163
162
418
162
441
248
133
134
171
170
165
170
235
163
179
180
171
246
436
171
184
171
440
142
143
163
188
188
162
190
165
190
170
125
168
163
173
168
175
163
171
233
170
236
163
133
170
168
167
171
171
168
162
273
171
357
248
277
168
162
289
162
162
155
156
168
162
168
168
5
6
7
168
293
235
236
235
236
168
168
162
122
171
163
168
161
127
171
317
305
306
307
308
165
279
133
134
138
165
322
141
330
176
177
178
334
138
138
403
150
146
147
163
154
136
137
168
169
301
302
170
162
303
304
171
309
310
161
161
170
183
351
352
162
182
176
181
357
148
150
164
443
161
171
171
161
171
188
161
190
151
152
153
154
155
156
157
158
159
160
169
322
166
322
161
161
165
162
168
170
164
169
165
402
164
161
67
161
363
162
171
166
162
18
165
290
311
313
170
418
154
314
412
171
235
236
312
315
150
428
199
200
316
154
6
278
397
361
434
395
439
418
440
239
138
397
-
1
-
1
-
1
218
-
1
-
1
-
1
443
265
-
1
339
-
1
-
1
-
1
-
1
-
1
-
1
-
1
233
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
402
-
1
-
1
-
1
-
1
-
1
248
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
418
-
1
423
423
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
322
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
339
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
422
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
396
397
-
1
-
1
-
1
-
1
402
403
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
418
-
1
-
1
-
1
-
1
423
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
436
-
1
-
1
-
1
440
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
-
1
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
161
-
1
-
1
-
1
165
166
-
1
-
1
-
1
-
1
171
172
173
174
175
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
-
1
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
161
-
1
-
1
-
1
165
166
-
1
-
1
-
1
-
1
171
172
173
174
175
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
-
1
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
161
-
1
-
1
-
1
165
-
1
-
1
-
1
-
1
-
1
171
172
173
174
175
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
-
1
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
161
-
1
-
1
-
1
165
-
1
-
1
-
1
-
1
-
1
171
172
173
174
175
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
-
1
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
161
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
171
172
173
174
175
3
4
5
6
7
8
9
10
11
12
13
14
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
3
4
5
6
7
161
9
10
11
12
13
14
-
1
-
1
-
1
171
172
173
174
175
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
3
4
5
6
7
161
9
10
11
12
13
14
-
1
-
1
-
1
-
1
172
173
174
175
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
-
1
133
134
-
1
11
12
13
14
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
-
1
-
1
-
1
-
1
-
1
171
47
48
49
50
51
52
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
-
1
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
161
-
1
-
1
164
11
12
13
14
-
1
-
1
-
1
172
173
174
175
-
1
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
-
1
-
1
-
1
-
1
-
1
-
1
47
48
49
50
51
52
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
-
1
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
161
-
1
-
1
164
11
12
13
14
-
1
-
1
-
1
172
173
174
175
-
1
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
-
1
-
1
-
1
-
1
-
1
-
1
47
48
49
50
51
52
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
-
1
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
161
11
12
13
14
-
1
-
1
-
1
-
1
-
1
171
172
173
174
175
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
-
1
-
1
-
1
-
1
-
1
-
1
47
48
49
50
51
52
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
-
1
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
161
11
12
13
14
-
1
-
1
-
1
-
1
-
1
-
1
172
173
174
175
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
-
1
-
1
-
1
-
1
-
1
-
1
47
48
49
50
51
52
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
-
1
131
132
133
134
135
136
137
138
139
-
1
-
1
142
143
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
3
4
5
6
7
161
9
10
11
12
13
14
-
1
-
1
-
1
-
1
172
173
174
175
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
-
1
-
1
134
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
3
4
5
6
7
-
1
9
10
11
12
13
14
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
166
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
-
1
-
1
134
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
3
4
5
6
7
-
1
9
10
11
12
13
14
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
166
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
-
1
-
1
134
-
1
-
1
-
1
-
1
-
1
-
1
0
-
1
-
1
3
4
5
6
7
8
9
10
11
12
13
14
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
166
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
-
1
-
1
134
3
4
5
6
7
8
9
10
11
12
13
14
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
-
1
-
1
134
3
4
5
6
7
-
1
9
10
11
12
13
14
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
-
1
-
1
134
11
12
13
14
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
-
1
-
1
-
1
-
1
-
1
-
1
47
48
49
50
51
52
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
-
1
131
-
1
133
134
11
12
13
14
139
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
-
1
-
1
-
1
-
1
-
1
-
1
47
48
49
50
51
52
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
-
1
65
66
-
1
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
-
1
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
-
1
131
-
1
-
1
134
}
;
static
const
yytype_int16
yystos
[
]
=
{
0
3
4
5
6
7
8
9
10
11
12
13
14
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
134
217
218
219
220
221
225
226
227
228
229
230
231
232
233
234
235
236
239
241
242
277
278
279
235
133
134
165
186
161
171
280
162
168
222
223
224
229
234
168
171
133
186
133
171
216
232
234
163
240
0
278
239
244
165
64
133
237
238
165
260
223
222
224
186
186
161
170
240
165
171
229
234
245
246
132
133
135
136
137
138
139
142
143
161
164
172
173
174
175
187
188
189
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
215
239
163
171
245
243
170
162
168
15
16
17
19
20
21
22
23
24
25
67
165
166
171
198
211
212
214
217
218
239
250
251
252
253
261
262
263
265
267
269
276
240
170
240
212
249
170
234
186
247
248
166
246
198
198
214
142
143
163
167
162
162
168
66
212
161
198
176
177
178
173
175
140
141
144
145
179
180
146
147
183
182
181
148
150
149
184
164
164
215
166
245
136
137
238
171
171
271
161
161
171
171
214
161
215
169
161
166
254
151
152
153
154
155
156
157
158
159
160
170
213
168
171
166
251
249
170
249
247
240
168
171
133
171
162
190
214
133
139
193
212
198
198
198
200
200
201
201
202
202
202
202
203
203
204
205
206
207
208
209
214
164
166
257
258
259
272
214
171
214
169
270
261
212
212
249
171
248
171
240
164
169
67
260
252
250
262
273
162
162
214
227
229
268
255
171
212
161
268
274
275
257
264
266
186
162
166
214
171
162
18
253
170
252
256
260
162
214
256
257
249
171
}
;
static
const
yytype_int16
yyr1
[
]
=
{
0
185
186
186
187
188
188
188
188
188
188
188
189
189
189
189
189
189
190
191
192
192
193
193
194
194
195
195
196
197
197
197
198
198
198
198
199
199
199
199
200
200
200
200
201
201
201
202
202
202
203
203
203
203
203
204
204
204
205
205
206
206
207
207
208
208
209
209
210
210
211
211
212
212
213
213
213
213
213
213
213
213
213
213
213
214
214
215
216
217
217
217
217
217
217
217
217
218
219
219
220
220
221
222
222
223
223
223
223
224
225
225
225
225
225
226
226
226
226
226
227
227
228
228
228
229
229
230
231
232
232
232
232
232
232
233
233
233
233
233
233
233
233
233
233
233
233
233
233
233
233
233
234
235
235
235
236
237
237
238
238
238
238
239
239
240
240
240
240
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
241
243
242
244
242
245
245
246
246
247
247
248
248
249
250
251
251
252
252
252
252
252
252
252
253
254
255
253
256
256
258
257
259
257
260
260
261
261
262
262
263
264
264
266
265
267
267
268
268
270
269
271
269
272
269
273
273
274
274
275
275
276
276
276
276
276
277
277
278
278
280
279
}
;
static
const
yytype_int8
yyr2
[
]
=
{
0
2
1
1
1
1
1
1
1
1
1
3
1
4
1
3
2
2
1
1
1
3
2
2
2
1
2
3
2
1
1
1
1
2
2
2
1
1
1
1
1
3
3
3
1
3
3
1
3
3
1
3
3
3
3
1
3
3
1
3
1
3
1
3
1
3
1
3
1
3
1
5
1
3
1
1
1
1
1
1
1
1
1
1
1
1
3
1
2
2
2
4
5
6
7
2
3
2
1
1
2
3
3
2
3
2
1
2
1
1
1
3
4
6
5
1
2
3
5
4
1
2
1
1
1
1
2
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
4
1
3
1
3
3
1
1
2
2
3
3
4
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
0
6
0
5
1
2
3
4
1
3
1
2
1
1
1
1
1
1
1
1
1
1
1
2
0
0
5
1
1
0
2
0
2
2
3
1
2
1
2
5
3
1
0
6
3
2
1
4
0
6
0
8
0
7
1
1
1
0
2
3
2
2
2
3
2
1
2
1
1
0
3
}
;
enum
{
YYENOMEM
=
-
2
}
;
#
define
yyerrok
(
yyerrstatus
=
0
)
#
define
yyclearin
(
yychar
=
YYEMPTY
)
#
define
YYACCEPT
goto
yyacceptlab
#
define
YYABORT
goto
yyabortlab
#
define
YYERROR
goto
yyerrorlab
#
define
YYNOMEM
goto
yyexhaustedlab
#
define
YYRECOVERING
(
)
(
!
!
yyerrstatus
)
#
define
YYBACKUP
(
Token
Value
)
\
do
\
if
(
yychar
=
=
YYEMPTY
)
\
{
\
yychar
=
(
Token
)
;
\
yylval
=
(
Value
)
;
\
YYPOPSTACK
(
yylen
)
;
\
yystate
=
*
yyssp
;
\
goto
yybackup
;
\
}
\
else
\
{
\
yyerror
(
&
yylloc
context
scanner
YY_
(
"
syntax
error
:
cannot
back
up
"
)
)
;
\
YYERROR
;
\
}
\
while
(
0
)
#
define
YYERRCODE
YYUNDEF
#
ifndef
YYLLOC_DEFAULT
#
define
YYLLOC_DEFAULT
(
Current
Rhs
N
)
\
do
\
if
(
N
)
\
{
\
(
Current
)
.
first_line
=
YYRHSLOC
(
Rhs
1
)
.
first_line
;
\
(
Current
)
.
first_column
=
YYRHSLOC
(
Rhs
1
)
.
first_column
;
\
(
Current
)
.
last_line
=
YYRHSLOC
(
Rhs
N
)
.
last_line
;
\
(
Current
)
.
last_column
=
YYRHSLOC
(
Rhs
N
)
.
last_column
;
\
}
\
else
\
{
\
(
Current
)
.
first_line
=
(
Current
)
.
last_line
=
YYRHSLOC
(
Rhs
0
)
.
last_line
;
\
(
Current
)
.
first_column
=
(
Current
)
.
last_column
=
YYRHSLOC
(
Rhs
0
)
.
last_column
;
\
}
\
while
(
0
)
#
endif
#
define
YYRHSLOC
(
Rhs
K
)
(
(
Rhs
)
[
K
]
)
#
if
YYDEBUG
#
ifndef
YYFPRINTF
#
include
<
stdio
.
h
>
#
define
YYFPRINTF
fprintf
#
endif
#
define
YYDPRINTF
(
Args
)
\
do
\
{
\
if
(
yydebug
)
\
YYFPRINTF
Args
;
\
}
while
(
0
)
#
ifndef
YYLOCATION_PRINT
#
if
defined
YY_LOCATION_PRINT
#
define
YYLOCATION_PRINT
(
File
Loc
)
YY_LOCATION_PRINT
(
File
*
(
Loc
)
)
#
elif
defined
YYLTYPE_IS_TRIVIAL
&
&
YYLTYPE_IS_TRIVIAL
YY_ATTRIBUTE_UNUSED
static
int
yy_location_print_
(
FILE
*
yyo
YYLTYPE
const
*
const
yylocp
)
{
int
res
=
0
;
int
end_col
=
0
!
=
yylocp
-
>
last_column
?
yylocp
-
>
last_column
-
1
:
0
;
if
(
0
<
=
yylocp
-
>
first_line
)
{
res
+
=
YYFPRINTF
(
yyo
"
%
d
"
yylocp
-
>
first_line
)
;
if
(
0
<
=
yylocp
-
>
first_column
)
res
+
=
YYFPRINTF
(
yyo
"
.
%
d
"
yylocp
-
>
first_column
)
;
}
if
(
0
<
=
yylocp
-
>
last_line
)
{
if
(
yylocp
-
>
first_line
<
yylocp
-
>
last_line
)
{
res
+
=
YYFPRINTF
(
yyo
"
-
%
d
"
yylocp
-
>
last_line
)
;
if
(
0
<
=
end_col
)
res
+
=
YYFPRINTF
(
yyo
"
.
%
d
"
end_col
)
;
}
else
if
(
0
<
=
end_col
&
&
yylocp
-
>
first_column
<
end_col
)
res
+
=
YYFPRINTF
(
yyo
"
-
%
d
"
end_col
)
;
}
return
res
;
}
#
define
YYLOCATION_PRINT
yy_location_print_
#
define
YY_LOCATION_PRINT
(
File
Loc
)
YYLOCATION_PRINT
(
File
&
(
Loc
)
)
#
else
#
define
YYLOCATION_PRINT
(
File
Loc
)
(
(
void
)
0
)
#
define
YY_LOCATION_PRINT
YYLOCATION_PRINT
#
endif
#
endif
#
define
YY_SYMBOL_PRINT
(
Title
Kind
Value
Location
)
\
do
\
{
\
if
(
yydebug
)
\
{
\
YYFPRINTF
(
stderr
"
%
s
"
Title
)
;
\
yy_symbol_print
(
stderr
Kind
Value
Location
context
scanner
)
;
\
YYFPRINTF
(
stderr
"
\
n
"
)
;
\
}
\
}
while
(
0
)
static
void
yy_symbol_value_print
(
FILE
*
yyo
yysymbol_kind_t
yykind
YYSTYPE
const
*
const
yyvaluep
YYLTYPE
const
*
const
yylocationp
TParseContext
*
context
void
*
scanner
)
{
FILE
*
yyoutput
=
yyo
;
YY_USE
(
yyoutput
)
;
YY_USE
(
yylocationp
)
;
YY_USE
(
context
)
;
YY_USE
(
scanner
)
;
if
(
!
yyvaluep
)
return
;
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
YY_USE
(
yykind
)
;
YY_IGNORE_MAYBE_UNINITIALIZED_END
}
static
void
yy_symbol_print
(
FILE
*
yyo
yysymbol_kind_t
yykind
YYSTYPE
const
*
const
yyvaluep
YYLTYPE
const
*
const
yylocationp
TParseContext
*
context
void
*
scanner
)
{
YYFPRINTF
(
yyo
"
%
s
%
s
(
"
yykind
<
YYNTOKENS
?
"
token
"
:
"
nterm
"
yysymbol_name
(
yykind
)
)
;
YYLOCATION_PRINT
(
yyo
yylocationp
)
;
YYFPRINTF
(
yyo
"
:
"
)
;
yy_symbol_value_print
(
yyo
yykind
yyvaluep
yylocationp
context
scanner
)
;
YYFPRINTF
(
yyo
"
)
"
)
;
}
static
void
yy_stack_print
(
yy_state_t
*
yybottom
yy_state_t
*
yytop
)
{
YYFPRINTF
(
stderr
"
Stack
now
"
)
;
for
(
;
yybottom
<
=
yytop
;
yybottom
+
+
)
{
int
yybot
=
*
yybottom
;
YYFPRINTF
(
stderr
"
%
d
"
yybot
)
;
}
YYFPRINTF
(
stderr
"
\
n
"
)
;
}
#
define
YY_STACK_PRINT
(
Bottom
Top
)
\
do
\
{
\
if
(
yydebug
)
\
yy_stack_print
(
(
Bottom
)
(
Top
)
)
;
\
}
while
(
0
)
static
void
yy_reduce_print
(
yy_state_t
*
yyssp
YYSTYPE
*
yyvsp
YYLTYPE
*
yylsp
int
yyrule
TParseContext
*
context
void
*
scanner
)
{
int
yylno
=
yyrline
[
yyrule
]
;
int
yynrhs
=
yyr2
[
yyrule
]
;
int
yyi
;
YYFPRINTF
(
stderr
"
Reducing
stack
by
rule
%
d
(
line
%
d
)
:
\
n
"
yyrule
-
1
yylno
)
;
for
(
yyi
=
0
;
yyi
<
yynrhs
;
yyi
+
+
)
{
YYFPRINTF
(
stderr
"
%
d
=
"
yyi
+
1
)
;
yy_symbol_print
(
stderr
YY_ACCESSING_SYMBOL
(
+
yyssp
[
yyi
+
1
-
yynrhs
]
)
&
yyvsp
[
(
yyi
+
1
)
-
(
yynrhs
)
]
&
(
yylsp
[
(
yyi
+
1
)
-
(
yynrhs
)
]
)
context
scanner
)
;
YYFPRINTF
(
stderr
"
\
n
"
)
;
}
}
#
define
YY_REDUCE_PRINT
(
Rule
)
\
do
\
{
\
if
(
yydebug
)
\
yy_reduce_print
(
yyssp
yyvsp
yylsp
Rule
context
scanner
)
;
\
}
while
(
0
)
int
yydebug
;
#
else
#
define
YYDPRINTF
(
Args
)
(
(
void
)
0
)
#
define
YY_SYMBOL_PRINT
(
Title
Kind
Value
Location
)
#
define
YY_STACK_PRINT
(
Bottom
Top
)
#
define
YY_REDUCE_PRINT
(
Rule
)
#
endif
#
ifndef
YYINITDEPTH
#
define
YYINITDEPTH
200
#
endif
#
ifndef
YYMAXDEPTH
#
define
YYMAXDEPTH
10000
#
endif
static
void
yydestruct
(
const
char
*
yymsg
yysymbol_kind_t
yykind
YYSTYPE
*
yyvaluep
YYLTYPE
*
yylocationp
TParseContext
*
context
void
*
scanner
)
{
YY_USE
(
yyvaluep
)
;
YY_USE
(
yylocationp
)
;
YY_USE
(
context
)
;
YY_USE
(
scanner
)
;
if
(
!
yymsg
)
yymsg
=
"
Deleting
"
;
YY_SYMBOL_PRINT
(
yymsg
yykind
yyvaluep
yylocationp
)
;
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
YY_USE
(
yykind
)
;
YY_IGNORE_MAYBE_UNINITIALIZED_END
}
int
yyparse
(
TParseContext
*
context
void
*
scanner
)
{
int
yychar
;
YY_INITIAL_VALUE
(
static
YYSTYPE
yyval_default
;
)
YYSTYPE
yylval
YY_INITIAL_VALUE
(
=
yyval_default
)
;
static
YYLTYPE
yyloc_default
#
if
defined
YYLTYPE_IS_TRIVIAL
&
&
YYLTYPE_IS_TRIVIAL
=
{
1
1
1
1
}
#
endif
;
YYLTYPE
yylloc
=
yyloc_default
;
int
yynerrs
=
0
;
yy_state_fast_t
yystate
=
0
;
int
yyerrstatus
=
0
;
YYPTRDIFF_T
yystacksize
=
YYINITDEPTH
;
yy_state_t
yyssa
[
YYINITDEPTH
]
;
yy_state_t
*
yyss
=
yyssa
;
yy_state_t
*
yyssp
=
yyss
;
YYSTYPE
yyvsa
[
YYINITDEPTH
]
;
YYSTYPE
*
yyvs
=
yyvsa
;
YYSTYPE
*
yyvsp
=
yyvs
;
YYLTYPE
yylsa
[
YYINITDEPTH
]
;
YYLTYPE
*
yyls
=
yylsa
;
YYLTYPE
*
yylsp
=
yyls
;
int
yyn
;
int
yyresult
;
yysymbol_kind_t
yytoken
=
YYSYMBOL_YYEMPTY
;
YYSTYPE
yyval
;
YYLTYPE
yyloc
;
YYLTYPE
yyerror_range
[
3
]
;
#
define
YYPOPSTACK
(
N
)
(
yyvsp
-
=
(
N
)
yyssp
-
=
(
N
)
yylsp
-
=
(
N
)
)
int
yylen
=
0
;
YYDPRINTF
(
(
stderr
"
Starting
parse
\
n
"
)
)
;
yychar
=
YYEMPTY
;
yylsp
[
0
]
=
yylloc
;
goto
yysetstate
;
yynewstate
:
yyssp
+
+
;
yysetstate
:
YYDPRINTF
(
(
stderr
"
Entering
state
%
d
\
n
"
yystate
)
)
;
YY_ASSERT
(
0
<
=
yystate
&
&
yystate
<
YYNSTATES
)
;
YY_IGNORE_USELESS_CAST_BEGIN
*
yyssp
=
YY_CAST
(
yy_state_t
yystate
)
;
YY_IGNORE_USELESS_CAST_END
YY_STACK_PRINT
(
yyss
yyssp
)
;
if
(
yyss
+
yystacksize
-
1
<
=
yyssp
)
#
if
!
defined
yyoverflow
&
&
!
defined
YYSTACK_RELOCATE
YYNOMEM
;
#
else
{
YYPTRDIFF_T
yysize
=
yyssp
-
yyss
+
1
;
#
if
defined
yyoverflow
{
yy_state_t
*
yyss1
=
yyss
;
YYSTYPE
*
yyvs1
=
yyvs
;
YYLTYPE
*
yyls1
=
yyls
;
yyoverflow
(
YY_
(
"
memory
exhausted
"
)
&
yyss1
yysize
*
YYSIZEOF
(
*
yyssp
)
&
yyvs1
yysize
*
YYSIZEOF
(
*
yyvsp
)
&
yyls1
yysize
*
YYSIZEOF
(
*
yylsp
)
&
yystacksize
)
;
yyss
=
yyss1
;
yyvs
=
yyvs1
;
yyls
=
yyls1
;
}
#
else
if
(
YYMAXDEPTH
<
=
yystacksize
)
YYNOMEM
;
yystacksize
*
=
2
;
if
(
YYMAXDEPTH
<
yystacksize
)
yystacksize
=
YYMAXDEPTH
;
{
yy_state_t
*
yyss1
=
yyss
;
union
yyalloc
*
yyptr
=
YY_CAST
(
union
yyalloc
*
YYSTACK_ALLOC
(
YY_CAST
(
YYSIZE_T
YYSTACK_BYTES
(
yystacksize
)
)
)
)
;
if
(
!
yyptr
)
YYNOMEM
;
YYSTACK_RELOCATE
(
yyss_alloc
yyss
)
;
YYSTACK_RELOCATE
(
yyvs_alloc
yyvs
)
;
YYSTACK_RELOCATE
(
yyls_alloc
yyls
)
;
#
undef
YYSTACK_RELOCATE
if
(
yyss1
!
=
yyssa
)
YYSTACK_FREE
(
yyss1
)
;
}
#
endif
yyssp
=
yyss
+
yysize
-
1
;
yyvsp
=
yyvs
+
yysize
-
1
;
yylsp
=
yyls
+
yysize
-
1
;
YY_IGNORE_USELESS_CAST_BEGIN
YYDPRINTF
(
(
stderr
"
Stack
size
increased
to
%
ld
\
n
"
YY_CAST
(
long
yystacksize
)
)
)
;
YY_IGNORE_USELESS_CAST_END
if
(
yyss
+
yystacksize
-
1
<
=
yyssp
)
YYABORT
;
}
#
endif
if
(
yystate
=
=
YYFINAL
)
YYACCEPT
;
goto
yybackup
;
yybackup
:
yyn
=
yypact
[
yystate
]
;
if
(
yypact_value_is_default
(
yyn
)
)
goto
yydefault
;
if
(
yychar
=
=
YYEMPTY
)
{
YYDPRINTF
(
(
stderr
"
Reading
a
token
\
n
"
)
)
;
yychar
=
yylex
(
&
yylval
&
yylloc
scanner
)
;
}
if
(
yychar
<
=
YYEOF
)
{
yychar
=
YYEOF
;
yytoken
=
YYSYMBOL_YYEOF
;
YYDPRINTF
(
(
stderr
"
Now
at
end
of
input
.
\
n
"
)
)
;
}
else
if
(
yychar
=
=
YYerror
)
{
yychar
=
YYUNDEF
;
yytoken
=
YYSYMBOL_YYerror
;
yyerror_range
[
1
]
=
yylloc
;
goto
yyerrlab1
;
}
else
{
yytoken
=
YYTRANSLATE
(
yychar
)
;
YY_SYMBOL_PRINT
(
"
Next
token
is
"
yytoken
&
yylval
&
yylloc
)
;
}
yyn
+
=
yytoken
;
if
(
yyn
<
0
|
|
YYLAST
<
yyn
|
|
yycheck
[
yyn
]
!
=
yytoken
)
goto
yydefault
;
yyn
=
yytable
[
yyn
]
;
if
(
yyn
<
=
0
)
{
if
(
yytable_value_is_error
(
yyn
)
)
goto
yyerrlab
;
yyn
=
-
yyn
;
goto
yyreduce
;
}
if
(
yyerrstatus
)
yyerrstatus
-
-
;
YY_SYMBOL_PRINT
(
"
Shifting
"
yytoken
&
yylval
&
yylloc
)
;
yystate
=
yyn
;
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
*
+
+
yyvsp
=
yylval
;
YY_IGNORE_MAYBE_UNINITIALIZED_END
*
+
+
yylsp
=
yylloc
;
yychar
=
YYEMPTY
;
goto
yynewstate
;
yydefault
:
yyn
=
yydefact
[
yystate
]
;
if
(
yyn
=
=
0
)
goto
yyerrlab
;
goto
yyreduce
;
yyreduce
:
yylen
=
yyr2
[
yyn
]
;
yyval
=
yyvsp
[
1
-
yylen
]
;
YYLLOC_DEFAULT
(
yyloc
(
yylsp
-
yylen
)
yylen
)
;
yyerror_range
[
1
]
=
yyloc
;
YY_REDUCE_PRINT
(
yyn
)
;
switch
(
yyn
)
{
case
4
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
parseVariableIdentifier
(
(
yylsp
[
0
]
)
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
(
yyvsp
[
0
]
.
lex
)
.
symbol
)
;
}
break
;
case
5
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
6
:
{
TConstantUnion
*
unionArray
=
new
TConstantUnion
[
1
]
;
unionArray
-
>
setIConst
(
(
yyvsp
[
0
]
.
lex
)
.
i
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addScalarLiteral
(
unionArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
7
:
{
TConstantUnion
*
unionArray
=
new
TConstantUnion
[
1
]
;
unionArray
-
>
setUConst
(
(
yyvsp
[
0
]
.
lex
)
.
u
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addScalarLiteral
(
unionArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
8
:
{
TConstantUnion
*
unionArray
=
new
TConstantUnion
[
1
]
;
unionArray
-
>
setFConst
(
(
yyvsp
[
0
]
.
lex
)
.
f
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addScalarLiteral
(
unionArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
9
:
{
TConstantUnion
*
unionArray
=
new
TConstantUnion
[
1
]
;
unionArray
-
>
setBConst
(
(
yyvsp
[
0
]
.
lex
)
.
b
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addScalarLiteral
(
unionArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
10
:
{
if
(
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_YUV_target
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
value
"
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
)
;
}
TConstantUnion
*
unionArray
=
new
TConstantUnion
[
1
]
;
unionArray
-
>
setYuvCscStandardEXTConst
(
getYuvCscStandardEXT
(
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
)
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addScalarLiteral
(
unionArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
11
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
-
1
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
12
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
13
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addIndexExpression
(
(
yyvsp
[
-
3
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
2
]
)
(
yyvsp
[
-
1
]
.
interm
.
intermTypedNode
)
)
;
}
break
;
case
14
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
15
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addFieldSelectionExpression
(
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
16
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addUnaryMathLValue
(
EOpPostIncrement
(
yyvsp
[
-
1
]
.
interm
.
intermTypedNode
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
17
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addUnaryMathLValue
(
EOpPostDecrement
(
yyvsp
[
-
1
]
.
interm
.
intermTypedNode
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
18
:
{
context
-
>
checkIsScalarInteger
(
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
"
[
]
"
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
19
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addFunctionCallOrMethod
(
(
yyvsp
[
0
]
.
interm
.
functionLookup
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
20
:
{
(
yyval
.
interm
.
functionLookup
)
=
(
yyvsp
[
0
]
.
interm
.
functionLookup
)
;
}
break
;
case
21
:
{
ES3_OR_NEWER
(
"
"
(
yylsp
[
0
]
)
"
methods
"
)
;
(
yyval
.
interm
.
functionLookup
)
=
(
yyvsp
[
0
]
.
interm
.
functionLookup
)
;
(
yyval
.
interm
.
functionLookup
)
-
>
setThisNode
(
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
)
;
}
break
;
case
22
:
{
(
yyval
.
interm
.
functionLookup
)
=
(
yyvsp
[
-
1
]
.
interm
.
functionLookup
)
;
}
break
;
case
23
:
{
(
yyval
.
interm
.
functionLookup
)
=
(
yyvsp
[
-
1
]
.
interm
.
functionLookup
)
;
}
break
;
case
24
:
{
(
yyval
.
interm
.
functionLookup
)
=
(
yyvsp
[
-
1
]
.
interm
.
functionLookup
)
;
}
break
;
case
25
:
{
(
yyval
.
interm
.
functionLookup
)
=
(
yyvsp
[
0
]
.
interm
.
functionLookup
)
;
}
break
;
case
26
:
{
(
yyval
.
interm
.
functionLookup
)
=
(
yyvsp
[
-
1
]
.
interm
.
functionLookup
)
;
(
yyval
.
interm
.
functionLookup
)
-
>
addArgument
(
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
)
;
}
break
;
case
27
:
{
(
yyval
.
interm
.
functionLookup
)
=
(
yyvsp
[
-
2
]
.
interm
.
functionLookup
)
;
(
yyval
.
interm
.
functionLookup
)
-
>
addArgument
(
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
)
;
}
break
;
case
28
:
{
(
yyval
.
interm
.
functionLookup
)
=
(
yyvsp
[
-
1
]
.
interm
.
functionLookup
)
;
}
break
;
case
29
:
{
(
yyval
.
interm
.
functionLookup
)
=
context
-
>
addConstructorFunc
(
(
yyvsp
[
0
]
.
interm
.
type
)
)
;
}
break
;
case
30
:
{
(
yyval
.
interm
.
functionLookup
)
=
context
-
>
addNonConstructorFunc
(
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
(
yyvsp
[
0
]
.
lex
)
.
symbol
)
;
}
break
;
case
31
:
{
(
yyval
.
interm
.
functionLookup
)
=
context
-
>
addNonConstructorFunc
(
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
(
yyvsp
[
0
]
.
lex
)
.
symbol
)
;
}
break
;
case
32
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
33
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addUnaryMathLValue
(
EOpPreIncrement
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
34
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addUnaryMathLValue
(
EOpPreDecrement
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
35
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addUnaryMath
(
(
yyvsp
[
-
1
]
.
interm
.
op
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
36
:
{
(
yyval
.
interm
.
op
)
=
EOpPositive
;
}
break
;
case
37
:
{
(
yyval
.
interm
.
op
)
=
EOpNegative
;
}
break
;
case
38
:
{
(
yyval
.
interm
.
op
)
=
EOpLogicalNot
;
}
break
;
case
39
:
{
ES3_OR_NEWER
(
"
~
"
(
yyloc
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
op
)
=
EOpBitwiseNot
;
}
break
;
case
40
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
41
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMath
(
EOpMul
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
42
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMath
(
EOpDiv
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
43
:
{
ES3_OR_NEWER
(
"
%
"
(
yylsp
[
-
1
]
)
"
integer
modulus
operator
"
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMath
(
EOpIMod
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
44
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
45
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMath
(
EOpAdd
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
46
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMath
(
EOpSub
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
47
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
48
:
{
ES3_OR_NEWER
(
"
<
<
"
(
yylsp
[
-
1
]
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMath
(
EOpBitShiftLeft
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
49
:
{
ES3_OR_NEWER
(
"
>
>
"
(
yylsp
[
-
1
]
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMath
(
EOpBitShiftRight
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
50
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
51
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMathBooleanResult
(
EOpLessThan
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
52
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMathBooleanResult
(
EOpGreaterThan
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
53
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMathBooleanResult
(
EOpLessThanEqual
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
54
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMathBooleanResult
(
EOpGreaterThanEqual
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
55
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
56
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMathBooleanResult
(
EOpEqual
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
57
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMathBooleanResult
(
EOpNotEqual
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
58
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
59
:
{
ES3_OR_NEWER
(
"
&
"
(
yylsp
[
-
1
]
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMath
(
EOpBitwiseAnd
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
60
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
61
:
{
ES3_OR_NEWER
(
"
^
"
(
yylsp
[
-
1
]
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMath
(
EOpBitwiseXor
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
62
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
63
:
{
ES3_OR_NEWER
(
"
|
"
(
yylsp
[
-
1
]
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMath
(
EOpBitwiseOr
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
64
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
65
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMathBooleanResult
(
EOpLogicalAnd
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
66
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
67
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMathBooleanResult
(
EOpLogicalXor
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
68
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
69
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addBinaryMathBooleanResult
(
EOpLogicalOr
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
70
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
71
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addTernarySelection
(
(
yyvsp
[
-
4
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
3
]
)
)
;
}
break
;
case
72
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
73
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addAssign
(
(
yyvsp
[
-
1
]
.
interm
.
op
)
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
74
:
{
(
yyval
.
interm
.
op
)
=
EOpAssign
;
}
break
;
case
75
:
{
(
yyval
.
interm
.
op
)
=
EOpMulAssign
;
}
break
;
case
76
:
{
(
yyval
.
interm
.
op
)
=
EOpDivAssign
;
}
break
;
case
77
:
{
ES3_OR_NEWER
(
"
%
=
"
(
yyloc
)
"
integer
modulus
operator
"
)
;
(
yyval
.
interm
.
op
)
=
EOpIModAssign
;
}
break
;
case
78
:
{
(
yyval
.
interm
.
op
)
=
EOpAddAssign
;
}
break
;
case
79
:
{
(
yyval
.
interm
.
op
)
=
EOpSubAssign
;
}
break
;
case
80
:
{
ES3_OR_NEWER
(
"
<
<
=
"
(
yyloc
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
op
)
=
EOpBitShiftLeftAssign
;
}
break
;
case
81
:
{
ES3_OR_NEWER
(
"
>
>
=
"
(
yyloc
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
op
)
=
EOpBitShiftRightAssign
;
}
break
;
case
82
:
{
ES3_OR_NEWER
(
"
&
=
"
(
yyloc
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
op
)
=
EOpBitwiseAndAssign
;
}
break
;
case
83
:
{
ES3_OR_NEWER
(
"
^
=
"
(
yyloc
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
op
)
=
EOpBitwiseXorAssign
;
}
break
;
case
84
:
{
ES3_OR_NEWER
(
"
|
=
"
(
yyloc
)
"
bit
-
wise
operator
"
)
;
(
yyval
.
interm
.
op
)
=
EOpBitwiseOrAssign
;
}
break
;
case
85
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
86
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
context
-
>
addComma
(
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
87
:
{
context
-
>
checkIsConst
(
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
)
;
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
88
:
{
context
-
>
enterStructDeclaration
(
(
yylsp
[
-
1
]
)
ImmutableString
(
(
yyvsp
[
-
1
]
.
lex
)
.
string
)
)
;
(
yyval
.
lex
)
=
(
yyvsp
[
-
1
]
.
lex
)
;
}
break
;
case
89
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addFunctionPrototypeDeclaration
(
*
(
(
yyvsp
[
-
1
]
.
interm
)
.
function
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
90
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
-
1
]
.
interm
)
.
intermDeclaration
;
}
break
;
case
91
:
{
context
-
>
parseDefaultPrecisionQualifier
(
(
yyvsp
[
-
2
]
.
interm
.
precision
)
(
yyvsp
[
-
1
]
.
interm
.
type
)
(
yylsp
[
-
3
]
)
)
;
(
yyval
.
interm
.
intermNode
)
=
nullptr
;
}
break
;
case
92
:
{
ES3_OR_NEWER
(
ImmutableString
(
(
yyvsp
[
-
3
]
.
lex
)
.
string
)
(
yylsp
[
-
4
]
)
"
interface
blocks
"
)
;
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addInterfaceBlock
(
*
(
yyvsp
[
-
4
]
.
interm
.
typeQualifierBuilder
)
(
yylsp
[
-
3
]
)
ImmutableString
(
(
yyvsp
[
-
3
]
.
lex
)
.
string
)
(
yyvsp
[
-
2
]
.
interm
.
fieldList
)
kEmptyImmutableString
(
yyloc
)
NULL
(
yyloc
)
)
;
}
break
;
case
93
:
{
ES3_OR_NEWER
(
ImmutableString
(
(
yyvsp
[
-
4
]
.
lex
)
.
string
)
(
yylsp
[
-
5
]
)
"
interface
blocks
"
)
;
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addInterfaceBlock
(
*
(
yyvsp
[
-
5
]
.
interm
.
typeQualifierBuilder
)
(
yylsp
[
-
4
]
)
ImmutableString
(
(
yyvsp
[
-
4
]
.
lex
)
.
string
)
(
yyvsp
[
-
3
]
.
interm
.
fieldList
)
ImmutableString
(
(
yyvsp
[
-
1
]
.
lex
)
.
string
)
(
yylsp
[
-
1
]
)
NULL
(
yyloc
)
)
;
}
break
;
case
94
:
{
ES3_OR_NEWER
(
ImmutableString
(
(
yyvsp
[
-
5
]
.
lex
)
.
string
)
(
yylsp
[
-
6
]
)
"
interface
blocks
"
)
;
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addInterfaceBlock
(
*
(
yyvsp
[
-
6
]
.
interm
.
typeQualifierBuilder
)
(
yylsp
[
-
5
]
)
ImmutableString
(
(
yyvsp
[
-
5
]
.
lex
)
.
string
)
(
yyvsp
[
-
4
]
.
interm
.
fieldList
)
ImmutableString
(
(
yyvsp
[
-
2
]
.
lex
)
.
string
)
(
yylsp
[
-
2
]
)
(
yyvsp
[
-
1
]
.
interm
.
arraySizes
)
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
95
:
{
context
-
>
parseGlobalLayoutQualifier
(
*
(
yyvsp
[
-
1
]
.
interm
.
typeQualifierBuilder
)
)
;
(
yyval
.
interm
.
intermNode
)
=
nullptr
;
}
break
;
case
96
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
parseGlobalQualifierDeclaration
(
*
(
yyvsp
[
-
2
]
.
interm
.
typeQualifierBuilder
)
(
yylsp
[
-
1
]
)
ImmutableString
(
(
yyvsp
[
-
1
]
.
lex
)
.
string
)
(
yyvsp
[
-
1
]
.
lex
)
.
symbol
)
;
}
break
;
case
97
:
{
(
yyval
.
interm
)
.
function
=
context
-
>
parseFunctionDeclarator
(
(
yylsp
[
0
]
)
(
yyvsp
[
-
1
]
.
interm
.
function
)
)
;
context
-
>
exitFunctionDeclaration
(
)
;
}
break
;
case
98
:
{
(
yyval
.
interm
.
function
)
=
(
yyvsp
[
0
]
.
interm
.
function
)
;
}
break
;
case
99
:
{
(
yyval
.
interm
.
function
)
=
(
yyvsp
[
0
]
.
interm
.
function
)
;
}
break
;
case
100
:
{
(
yyval
.
interm
.
function
)
=
(
yyvsp
[
-
1
]
.
interm
.
function
)
;
if
(
(
yyvsp
[
0
]
.
interm
.
param
)
.
type
-
>
getBasicType
(
)
!
=
EbtVoid
)
{
(
yyvsp
[
-
1
]
.
interm
.
function
)
-
>
addParameter
(
(
yyvsp
[
0
]
.
interm
.
param
)
.
createVariable
(
&
context
-
>
symbolTable
)
)
;
}
else
{
(
yyvsp
[
-
1
]
.
interm
.
function
)
-
>
setHasVoidParameter
(
)
;
}
}
break
;
case
101
:
{
(
yyval
.
interm
.
function
)
=
(
yyvsp
[
-
2
]
.
interm
.
function
)
;
if
(
(
yyvsp
[
0
]
.
interm
.
param
)
.
type
-
>
getBasicType
(
)
=
=
EbtVoid
)
{
context
-
>
error
(
(
yylsp
[
-
1
]
)
"
cannot
be
a
parameter
type
except
for
'
(
void
)
'
"
"
void
"
)
;
}
else
{
if
(
(
yyvsp
[
-
2
]
.
interm
.
function
)
-
>
hasVoidParameter
(
)
)
{
context
-
>
error
(
(
yylsp
[
-
1
]
)
"
cannot
be
a
parameter
type
except
for
'
(
void
)
'
"
"
void
"
)
;
}
(
yyvsp
[
-
2
]
.
interm
.
function
)
-
>
addParameter
(
(
yyvsp
[
0
]
.
interm
.
param
)
.
createVariable
(
&
context
-
>
symbolTable
)
)
;
}
}
break
;
case
102
:
{
(
yyval
.
interm
.
function
)
=
context
-
>
parseFunctionHeader
(
(
yyvsp
[
-
2
]
.
interm
.
type
)
ImmutableString
(
(
yyvsp
[
-
1
]
.
lex
)
.
string
)
(
yylsp
[
-
1
]
)
)
;
context
-
>
symbolTable
.
push
(
)
;
context
-
>
enterFunctionDeclaration
(
)
;
}
break
;
case
103
:
{
(
yyval
.
interm
.
param
)
=
context
-
>
parseParameterDeclarator
(
(
yyvsp
[
-
1
]
.
interm
.
type
)
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
104
:
{
(
yyval
.
interm
.
param
)
=
context
-
>
parseParameterArrayDeclarator
(
ImmutableString
(
(
yyvsp
[
-
1
]
.
lex
)
.
string
)
(
yylsp
[
-
1
]
)
*
(
(
yyvsp
[
0
]
.
interm
.
arraySizes
)
)
(
yylsp
[
0
]
)
&
(
yyvsp
[
-
2
]
.
interm
.
type
)
)
;
}
break
;
case
105
:
{
(
yyval
.
interm
.
param
)
=
(
yyvsp
[
0
]
.
interm
.
param
)
;
context
-
>
checkIsParameterQualifierValid
(
(
yylsp
[
0
]
)
*
(
yyvsp
[
-
1
]
.
interm
.
typeQualifierBuilder
)
(
yyvsp
[
0
]
.
interm
.
param
)
.
type
)
;
}
break
;
case
106
:
{
(
yyval
.
interm
.
param
)
=
(
yyvsp
[
0
]
.
interm
.
param
)
;
(
yyval
.
interm
.
param
)
.
type
-
>
setQualifier
(
EvqParamIn
)
;
}
break
;
case
107
:
{
(
yyval
.
interm
.
param
)
=
(
yyvsp
[
0
]
.
interm
.
param
)
;
context
-
>
checkIsParameterQualifierValid
(
(
yylsp
[
0
]
)
*
(
yyvsp
[
-
1
]
.
interm
.
typeQualifierBuilder
)
(
yyvsp
[
0
]
.
interm
.
param
)
.
type
)
;
}
break
;
case
108
:
{
(
yyval
.
interm
.
param
)
=
(
yyvsp
[
0
]
.
interm
.
param
)
;
(
yyval
.
interm
.
param
)
.
type
-
>
setQualifier
(
EvqParamIn
)
;
}
break
;
case
109
:
{
TParameter
param
=
{
0
new
TType
(
(
yyvsp
[
0
]
.
interm
.
type
)
)
}
;
(
yyval
.
interm
.
param
)
=
param
;
}
break
;
case
110
:
{
(
yyval
.
interm
)
=
(
yyvsp
[
0
]
.
interm
)
;
}
break
;
case
111
:
{
(
yyval
.
interm
)
=
(
yyvsp
[
-
2
]
.
interm
)
;
context
-
>
parseDeclarator
(
(
yyval
.
interm
)
.
type
(
yylsp
[
0
]
)
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
(
yyval
.
interm
)
.
intermDeclaration
)
;
}
break
;
case
112
:
{
(
yyval
.
interm
)
=
(
yyvsp
[
-
3
]
.
interm
)
;
context
-
>
parseArrayDeclarator
(
(
yyval
.
interm
)
.
type
(
yylsp
[
-
1
]
)
ImmutableString
(
(
yyvsp
[
-
1
]
.
lex
)
.
string
)
(
yylsp
[
0
]
)
*
(
(
yyvsp
[
0
]
.
interm
.
arraySizes
)
)
(
yyval
.
interm
)
.
intermDeclaration
)
;
}
break
;
case
113
:
{
ES3_OR_NEWER
(
"
=
"
(
yylsp
[
-
1
]
)
"
first
-
class
arrays
(
array
initializer
)
"
)
;
(
yyval
.
interm
)
=
(
yyvsp
[
-
5
]
.
interm
)
;
context
-
>
parseArrayInitDeclarator
(
(
yyval
.
interm
)
.
type
(
yylsp
[
-
3
]
)
ImmutableString
(
(
yyvsp
[
-
3
]
.
lex
)
.
string
)
(
yylsp
[
-
2
]
)
*
(
(
yyvsp
[
-
2
]
.
interm
.
arraySizes
)
)
(
yylsp
[
-
1
]
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yyval
.
interm
)
.
intermDeclaration
)
;
}
break
;
case
114
:
{
(
yyval
.
interm
)
=
(
yyvsp
[
-
4
]
.
interm
)
;
context
-
>
parseInitDeclarator
(
(
yyval
.
interm
)
.
type
(
yylsp
[
-
2
]
)
ImmutableString
(
(
yyvsp
[
-
2
]
.
lex
)
.
string
)
(
yylsp
[
-
1
]
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yyval
.
interm
)
.
intermDeclaration
)
;
}
break
;
case
115
:
{
(
yyval
.
interm
)
.
type
=
(
yyvsp
[
0
]
.
interm
.
type
)
;
(
yyval
.
interm
)
.
intermDeclaration
=
context
-
>
parseSingleDeclaration
(
(
yyval
.
interm
)
.
type
(
yylsp
[
0
]
)
kEmptyImmutableString
)
;
}
break
;
case
116
:
{
(
yyval
.
interm
)
.
type
=
(
yyvsp
[
-
1
]
.
interm
.
type
)
;
(
yyval
.
interm
)
.
intermDeclaration
=
context
-
>
parseSingleDeclaration
(
(
yyval
.
interm
)
.
type
(
yylsp
[
0
]
)
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
)
;
}
break
;
case
117
:
{
(
yyval
.
interm
)
.
type
=
(
yyvsp
[
-
2
]
.
interm
.
type
)
;
(
yyval
.
interm
)
.
intermDeclaration
=
context
-
>
parseSingleArrayDeclaration
(
(
yyval
.
interm
)
.
type
(
yylsp
[
-
1
]
)
ImmutableString
(
(
yyvsp
[
-
1
]
.
lex
)
.
string
)
(
yylsp
[
0
]
)
*
(
(
yyvsp
[
0
]
.
interm
.
arraySizes
)
)
)
;
}
break
;
case
118
:
{
ES3_OR_NEWER
(
"
[
]
"
(
yylsp
[
-
2
]
)
"
first
-
class
arrays
(
array
initializer
)
"
)
;
(
yyval
.
interm
)
.
type
=
(
yyvsp
[
-
4
]
.
interm
.
type
)
;
(
yyval
.
interm
)
.
intermDeclaration
=
context
-
>
parseSingleArrayInitDeclaration
(
(
yyval
.
interm
)
.
type
(
yylsp
[
-
3
]
)
ImmutableString
(
(
yyvsp
[
-
3
]
.
lex
)
.
string
)
(
yylsp
[
-
2
]
)
*
(
(
yyvsp
[
-
2
]
.
interm
.
arraySizes
)
)
(
yylsp
[
-
1
]
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
)
;
}
break
;
case
119
:
{
(
yyval
.
interm
)
.
type
=
(
yyvsp
[
-
3
]
.
interm
.
type
)
;
(
yyval
.
interm
)
.
intermDeclaration
=
context
-
>
parseSingleInitDeclaration
(
(
yyval
.
interm
)
.
type
(
yylsp
[
-
2
]
)
ImmutableString
(
(
yyvsp
[
-
2
]
.
lex
)
.
string
)
(
yylsp
[
-
1
]
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
)
;
}
break
;
case
120
:
{
context
-
>
addFullySpecifiedType
(
&
(
yyvsp
[
0
]
.
interm
.
type
)
)
;
(
yyval
.
interm
.
type
)
=
(
yyvsp
[
0
]
.
interm
.
type
)
;
}
break
;
case
121
:
{
(
yyval
.
interm
.
type
)
=
context
-
>
addFullySpecifiedType
(
*
(
yyvsp
[
-
1
]
.
interm
.
typeQualifierBuilder
)
(
yyvsp
[
0
]
.
interm
.
type
)
)
;
}
break
;
case
122
:
{
(
yyval
.
interm
.
qualifier
)
=
EvqSmooth
;
}
break
;
case
123
:
{
(
yyval
.
interm
.
qualifier
)
=
EvqFlat
;
}
break
;
case
124
:
{
if
(
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
NV_shader_noperspective_interpolation
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
interpolation
qualifier
"
"
noperspective
"
)
;
}
(
yyval
.
interm
.
qualifier
)
=
EvqNoPerspective
;
}
break
;
case
125
:
{
(
yyval
.
interm
.
typeQualifierBuilder
)
=
context
-
>
createTypeQualifierBuilder
(
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeQualifierBuilder
)
-
>
appendQualifier
(
(
yyvsp
[
0
]
.
interm
.
qualifierWrapper
)
)
;
}
break
;
case
126
:
{
(
yyval
.
interm
.
typeQualifierBuilder
)
=
(
yyvsp
[
-
1
]
.
interm
.
typeQualifierBuilder
)
;
(
yyval
.
interm
.
typeQualifierBuilder
)
-
>
appendQualifier
(
(
yyvsp
[
0
]
.
interm
.
qualifierWrapper
)
)
;
}
break
;
case
127
:
{
}
break
;
case
128
:
{
context
-
>
markShaderHasPrecise
(
)
;
}
break
;
case
129
:
{
context
-
>
checkLocalVariableConstStorageQualifier
(
*
(
yyvsp
[
0
]
.
interm
.
qualifierWrapper
)
)
;
(
yyval
.
interm
.
qualifierWrapper
)
=
(
yyvsp
[
0
]
.
interm
.
qualifierWrapper
)
;
}
break
;
case
130
:
{
context
-
>
checkIsAtGlobalLevel
(
(
yylsp
[
0
]
)
"
layout
"
)
;
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TLayoutQualifierWrapper
(
(
yyvsp
[
0
]
.
interm
.
layoutQualifier
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
131
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TPrecisionQualifierWrapper
(
(
yyvsp
[
0
]
.
interm
.
precision
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
132
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TInterpolationQualifierWrapper
(
(
yyvsp
[
0
]
.
interm
.
qualifier
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
133
:
{
context
-
>
checkIsAtGlobalLevel
(
(
yylsp
[
0
]
)
"
invariant
"
)
;
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TInvariantQualifierWrapper
(
(
yylsp
[
0
]
)
)
;
}
break
;
case
134
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TPreciseQualifierWrapper
(
(
yylsp
[
0
]
)
)
;
}
break
;
case
135
:
{
VERTEX_ONLY
(
"
attribute
"
(
yylsp
[
0
]
)
)
;
ES2_ONLY
(
"
attribute
"
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
qualifierWrapper
)
=
context
-
>
parseGlobalStorageQualifier
(
EvqAttribute
(
yylsp
[
0
]
)
)
;
}
break
;
case
136
:
{
ES2_ONLY
(
"
varying
"
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
qualifierWrapper
)
=
context
-
>
parseVaryingQualifier
(
(
yylsp
[
0
]
)
)
;
}
break
;
case
137
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TStorageQualifierWrapper
(
EvqConst
(
yylsp
[
0
]
)
)
;
}
break
;
case
138
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
context
-
>
parseInQualifier
(
(
yylsp
[
0
]
)
)
;
}
break
;
case
139
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
context
-
>
parseOutQualifier
(
(
yylsp
[
0
]
)
)
;
}
break
;
case
140
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
context
-
>
parseInOutQualifier
(
(
yylsp
[
0
]
)
)
;
}
break
;
case
141
:
{
ES3_OR_NEWER
(
"
centroid
"
(
yylsp
[
0
]
)
"
storage
qualifier
"
)
;
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TStorageQualifierWrapper
(
EvqCentroid
(
yylsp
[
0
]
)
)
;
}
break
;
case
142
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_tessellation_shader
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
storage
qualifier
"
"
patch
"
)
;
}
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TStorageQualifierWrapper
(
EvqPatch
(
yylsp
[
0
]
)
)
;
}
break
;
case
143
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
context
-
>
parseGlobalStorageQualifier
(
EvqUniform
(
yylsp
[
0
]
)
)
;
}
break
;
case
144
:
{
ES3_1_OR_NEWER
(
"
buffer
"
(
yylsp
[
0
]
)
"
storage
qualifier
"
)
;
(
yyval
.
interm
.
qualifierWrapper
)
=
context
-
>
parseGlobalStorageQualifier
(
EvqBuffer
(
yylsp
[
0
]
)
)
;
}
break
;
case
145
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TMemoryQualifierWrapper
(
EvqReadOnly
(
yylsp
[
0
]
)
)
;
}
break
;
case
146
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TMemoryQualifierWrapper
(
EvqWriteOnly
(
yylsp
[
0
]
)
)
;
}
break
;
case
147
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TMemoryQualifierWrapper
(
EvqCoherent
(
yylsp
[
0
]
)
)
;
}
break
;
case
148
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TMemoryQualifierWrapper
(
EvqRestrict
(
yylsp
[
0
]
)
)
;
}
break
;
case
149
:
{
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TMemoryQualifierWrapper
(
EvqVolatile
(
yylsp
[
0
]
)
)
;
}
break
;
case
150
:
{
COMPUTE_ONLY
(
"
shared
"
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
qualifierWrapper
)
=
context
-
>
parseGlobalStorageQualifier
(
EvqShared
(
yylsp
[
0
]
)
)
;
}
break
;
case
151
:
{
ES3_OR_NEWER
(
"
sample
"
(
yylsp
[
0
]
)
"
storage
qualifier
"
)
;
(
yyval
.
interm
.
qualifierWrapper
)
=
new
TStorageQualifierWrapper
(
EvqSample
(
yylsp
[
0
]
)
)
;
}
break
;
case
152
:
{
(
yyval
.
interm
.
type
)
=
(
yyvsp
[
0
]
.
interm
.
type
)
;
(
yyval
.
interm
.
type
)
.
precision
=
context
-
>
symbolTable
.
getDefaultPrecision
(
(
yyvsp
[
0
]
.
interm
.
type
)
.
getBasicType
(
)
)
;
}
break
;
case
153
:
{
(
yyval
.
interm
.
precision
)
=
EbpHigh
;
}
break
;
case
154
:
{
(
yyval
.
interm
.
precision
)
=
EbpMedium
;
}
break
;
case
155
:
{
(
yyval
.
interm
.
precision
)
=
EbpLow
;
}
break
;
case
156
:
{
context
-
>
checkCanUseLayoutQualifier
(
(
yylsp
[
-
3
]
)
)
;
(
yyval
.
interm
.
layoutQualifier
)
=
(
yyvsp
[
-
1
]
.
interm
.
layoutQualifier
)
;
}
break
;
case
157
:
{
(
yyval
.
interm
.
layoutQualifier
)
=
(
yyvsp
[
0
]
.
interm
.
layoutQualifier
)
;
}
break
;
case
158
:
{
(
yyval
.
interm
.
layoutQualifier
)
=
context
-
>
joinLayoutQualifiers
(
(
yyvsp
[
-
2
]
.
interm
.
layoutQualifier
)
(
yyvsp
[
0
]
.
interm
.
layoutQualifier
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
159
:
{
(
yyval
.
interm
.
layoutQualifier
)
=
context
-
>
parseLayoutQualifier
(
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
160
:
{
(
yyval
.
interm
.
layoutQualifier
)
=
context
-
>
parseLayoutQualifier
(
ImmutableString
(
(
yyvsp
[
-
2
]
.
lex
)
.
string
)
(
yylsp
[
-
2
]
)
(
yyvsp
[
0
]
.
lex
)
.
i
(
yylsp
[
0
]
)
)
;
}
break
;
case
161
:
{
(
yyval
.
interm
.
layoutQualifier
)
=
context
-
>
parseLayoutQualifier
(
ImmutableString
(
(
yyvsp
[
-
2
]
.
lex
)
.
string
)
(
yylsp
[
-
2
]
)
(
yyvsp
[
0
]
.
lex
)
.
i
(
yylsp
[
0
]
)
)
;
}
break
;
case
162
:
{
(
yyval
.
interm
.
layoutQualifier
)
=
context
-
>
parseLayoutQualifier
(
ImmutableString
(
"
shared
"
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
163
:
{
(
yyval
.
interm
.
type
)
.
initialize
(
(
yyvsp
[
0
]
.
interm
.
typeSpecifierNonArray
)
(
context
-
>
symbolTable
.
atGlobalLevel
(
)
?
EvqGlobal
:
EvqTemporary
)
)
;
}
break
;
case
164
:
{
(
yyval
.
interm
.
type
)
.
initialize
(
(
yyvsp
[
-
1
]
.
interm
.
typeSpecifierNonArray
)
(
context
-
>
symbolTable
.
atGlobalLevel
(
)
?
EvqGlobal
:
EvqTemporary
)
)
;
(
yyval
.
interm
.
type
)
.
setArraySizes
(
(
yyvsp
[
0
]
.
interm
.
arraySizes
)
)
;
}
break
;
case
165
:
{
ES3_OR_NEWER
(
"
[
]
"
(
yylsp
[
-
1
]
)
"
implicitly
sized
array
"
)
;
(
yyval
.
interm
.
arraySizes
)
=
new
TVector
<
unsigned
int
>
(
)
;
(
yyval
.
interm
.
arraySizes
)
-
>
push_back
(
0u
)
;
}
break
;
case
166
:
{
(
yyval
.
interm
.
arraySizes
)
=
new
TVector
<
unsigned
int
>
(
)
;
unsigned
int
size
=
context
-
>
checkIsValidArraySize
(
(
yylsp
[
-
2
]
)
(
yyvsp
[
-
1
]
.
interm
.
intermTypedNode
)
)
;
(
yyval
.
interm
.
arraySizes
)
-
>
push_back
(
size
)
;
}
break
;
case
167
:
{
ES3_1_OR_NEWER
(
"
[
]
"
(
yylsp
[
-
1
]
)
"
arrays
of
arrays
"
)
;
(
yyval
.
interm
.
arraySizes
)
=
(
yyvsp
[
-
2
]
.
interm
.
arraySizes
)
;
(
yyval
.
interm
.
arraySizes
)
-
>
insert
(
(
yyval
.
interm
.
arraySizes
)
-
>
begin
(
)
0u
)
;
}
break
;
case
168
:
{
ES3_1_OR_NEWER
(
"
[
]
"
(
yylsp
[
-
2
]
)
"
arrays
of
arrays
"
)
;
(
yyval
.
interm
.
arraySizes
)
=
(
yyvsp
[
-
3
]
.
interm
.
arraySizes
)
;
unsigned
int
size
=
context
-
>
checkIsValidArraySize
(
(
yylsp
[
-
2
]
)
(
yyvsp
[
-
1
]
.
interm
.
intermTypedNode
)
)
;
(
yyval
.
interm
.
arraySizes
)
-
>
insert
(
(
yyval
.
interm
.
arraySizes
)
-
>
begin
(
)
size
)
;
}
break
;
case
169
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtVoid
(
yylsp
[
0
]
)
)
;
}
break
;
case
170
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
}
break
;
case
171
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtInt
(
yylsp
[
0
]
)
)
;
}
break
;
case
172
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUInt
(
yylsp
[
0
]
)
)
;
}
break
;
case
173
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtBool
(
yylsp
[
0
]
)
)
;
}
break
;
case
174
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
2
)
;
}
break
;
case
175
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
3
)
;
}
break
;
case
176
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
4
)
;
}
break
;
case
177
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtBool
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
2
)
;
}
break
;
case
178
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtBool
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
3
)
;
}
break
;
case
179
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtBool
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
4
)
;
}
break
;
case
180
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtInt
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
2
)
;
}
break
;
case
181
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtInt
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
3
)
;
}
break
;
case
182
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtInt
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
4
)
;
}
break
;
case
183
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUInt
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
2
)
;
}
break
;
case
184
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUInt
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
3
)
;
}
break
;
case
185
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUInt
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setAggregate
(
4
)
;
}
break
;
case
186
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setMatrix
(
2
2
)
;
}
break
;
case
187
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setMatrix
(
3
3
)
;
}
break
;
case
188
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setMatrix
(
4
4
)
;
}
break
;
case
189
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setMatrix
(
2
3
)
;
}
break
;
case
190
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setMatrix
(
3
2
)
;
}
break
;
case
191
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setMatrix
(
2
4
)
;
}
break
;
case
192
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setMatrix
(
4
2
)
;
}
break
;
case
193
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setMatrix
(
3
4
)
;
}
break
;
case
194
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtFloat
(
yylsp
[
0
]
)
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
setMatrix
(
4
3
)
;
}
break
;
case
195
:
{
if
(
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_YUV_target
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
yuvCscStandardEXT
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtYuvCscStandardEXT
(
yylsp
[
0
]
)
)
;
}
break
;
case
196
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSampler2D
(
yylsp
[
0
]
)
)
;
}
break
;
case
197
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSampler3D
(
yylsp
[
0
]
)
)
;
}
break
;
case
198
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSamplerCube
(
yylsp
[
0
]
)
)
;
}
break
;
case
199
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSampler2DArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
200
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSampler2DMS
(
yylsp
[
0
]
)
)
;
}
break
;
case
201
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSampler2DMSArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
202
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
OES_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__samplerCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSamplerCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
203
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__samplerCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSamplerCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
204
:
{
constexpr
std
:
:
array
<
TExtension
2u
>
extensions
{
{
TExtension
:
:
OES_texture_buffer
TExtension
:
:
EXT_texture_buffer
}
}
;
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseOneOfExtensions
(
(
yylsp
[
0
]
)
extensions
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__samplerBuffer
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSamplerBuffer
(
yylsp
[
0
]
)
)
;
}
break
;
case
205
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtISampler2D
(
yylsp
[
0
]
)
)
;
}
break
;
case
206
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtISampler3D
(
yylsp
[
0
]
)
)
;
}
break
;
case
207
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtISamplerCube
(
yylsp
[
0
]
)
)
;
}
break
;
case
208
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtISampler2DArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
209
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtISampler2DMS
(
yylsp
[
0
]
)
)
;
}
break
;
case
210
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtISampler2DMSArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
211
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
OES_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__isamplerCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtISamplerCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
212
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__isamplerCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtISamplerCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
213
:
{
constexpr
std
:
:
array
<
TExtension
2u
>
extensions
{
{
TExtension
:
:
OES_texture_buffer
TExtension
:
:
EXT_texture_buffer
}
}
;
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseOneOfExtensions
(
(
yylsp
[
0
]
)
extensions
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__isamplerBuffer
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtISamplerBuffer
(
yylsp
[
0
]
)
)
;
}
break
;
case
214
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUSampler2D
(
yylsp
[
0
]
)
)
;
}
break
;
case
215
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUSampler3D
(
yylsp
[
0
]
)
)
;
}
break
;
case
216
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUSamplerCube
(
yylsp
[
0
]
)
)
;
}
break
;
case
217
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUSampler2DArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
218
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUSampler2DMS
(
yylsp
[
0
]
)
)
;
}
break
;
case
219
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUSampler2DMSArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
220
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
OES_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__usamplerCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUSamplerCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
221
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__usamplerCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUSamplerCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
222
:
{
constexpr
std
:
:
array
<
TExtension
2u
>
extensions
{
{
TExtension
:
:
OES_texture_buffer
TExtension
:
:
EXT_texture_buffer
}
}
;
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseOneOfExtensions
(
(
yylsp
[
0
]
)
extensions
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__usamplerBuffer
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUSamplerBuffer
(
yylsp
[
0
]
)
)
;
}
break
;
case
223
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSampler2DShadow
(
yylsp
[
0
]
)
)
;
}
break
;
case
224
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSamplerCubeShadow
(
yylsp
[
0
]
)
)
;
}
break
;
case
225
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSampler2DArrayShadow
(
yylsp
[
0
]
)
)
;
}
break
;
case
226
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
OES_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__samplerCubeArrayShadow
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSamplerCubeArrayShadow
(
yylsp
[
0
]
)
)
;
}
break
;
case
227
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__samplerCubeArrayShadow
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSamplerCubeArrayShadow
(
yylsp
[
0
]
)
)
;
}
break
;
case
228
:
{
if
(
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
WEBGL_video_texture
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
samplerVideoWEBGL
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSamplerVideoWEBGL
(
yylsp
[
0
]
)
)
;
}
break
;
case
229
:
{
constexpr
std
:
:
array
<
TExtension
3u
>
extensions
{
{
TExtension
:
:
NV_EGL_stream_consumer_external
TExtension
:
:
OES_EGL_image_external_essl3
TExtension
:
:
OES_EGL_image_external
}
}
;
if
(
!
context
-
>
checkCanUseOneOfExtensions
(
(
yylsp
[
0
]
)
extensions
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
samplerExternalOES
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSamplerExternalOES
(
yylsp
[
0
]
)
)
;
}
break
;
case
230
:
{
if
(
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_YUV_target
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__samplerExternal2DY2YEXT
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSamplerExternal2DY2YEXT
(
yylsp
[
0
]
)
)
;
}
break
;
case
231
:
{
if
(
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
ARB_texture_rectangle
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
sampler2DRect
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtSampler2DRect
(
yylsp
[
0
]
)
)
;
}
break
;
case
232
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtImage2D
(
yylsp
[
0
]
)
)
;
}
break
;
case
233
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtIImage2D
(
yylsp
[
0
]
)
)
;
}
break
;
case
234
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUImage2D
(
yylsp
[
0
]
)
)
;
}
break
;
case
235
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtImage3D
(
yylsp
[
0
]
)
)
;
}
break
;
case
236
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtIImage3D
(
yylsp
[
0
]
)
)
;
}
break
;
case
237
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUImage3D
(
yylsp
[
0
]
)
)
;
}
break
;
case
238
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtImage2DArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
239
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtIImage2DArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
240
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUImage2DArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
241
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtImageCube
(
yylsp
[
0
]
)
)
;
}
break
;
case
242
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtIImageCube
(
yylsp
[
0
]
)
)
;
}
break
;
case
243
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUImageCube
(
yylsp
[
0
]
)
)
;
}
break
;
case
244
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
OES_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__imageCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtImageCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
245
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__imageCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtImageCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
246
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
OES_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__iimageCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtIImageCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
247
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__iimageCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtIImageCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
248
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
OES_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__uimageCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUImageCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
249
:
{
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
EXT_texture_cube_map_array
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__uimageCubeArray
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUImageCubeArray
(
yylsp
[
0
]
)
)
;
}
break
;
case
250
:
{
constexpr
std
:
:
array
<
TExtension
2u
>
extensions
{
{
TExtension
:
:
OES_texture_buffer
TExtension
:
:
EXT_texture_buffer
}
}
;
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseOneOfExtensions
(
(
yylsp
[
0
]
)
extensions
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__imageBuffer
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtImageBuffer
(
yylsp
[
0
]
)
)
;
}
break
;
case
251
:
{
constexpr
std
:
:
array
<
TExtension
2u
>
extensions
{
{
TExtension
:
:
OES_texture_buffer
TExtension
:
:
EXT_texture_buffer
}
}
;
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseOneOfExtensions
(
(
yylsp
[
0
]
)
extensions
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__iimageBuffer
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtIImageBuffer
(
yylsp
[
0
]
)
)
;
}
break
;
case
252
:
{
constexpr
std
:
:
array
<
TExtension
2u
>
extensions
{
{
TExtension
:
:
OES_texture_buffer
TExtension
:
:
EXT_texture_buffer
}
}
;
if
(
context
-
>
getShaderVersion
(
)
<
320
&
&
!
context
-
>
checkCanUseOneOfExtensions
(
(
yylsp
[
0
]
)
extensions
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__uimageBuffer
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUImageBuffer
(
yylsp
[
0
]
)
)
;
}
break
;
case
253
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtAtomicCounter
(
yylsp
[
0
]
)
)
;
}
break
;
case
254
:
{
if
(
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
ANGLE_shader_pixel_local_storage
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__pixelLocalANGLE
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtPixelLocalANGLE
(
yylsp
[
0
]
)
)
;
}
break
;
case
255
:
{
if
(
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
ANGLE_shader_pixel_local_storage
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__ipixelLocalANGLE
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtIPixelLocalANGLE
(
yylsp
[
0
]
)
)
;
}
break
;
case
256
:
{
if
(
!
context
-
>
checkCanUseExtension
(
(
yylsp
[
0
]
)
TExtension
:
:
ANGLE_shader_pixel_local_storage
)
)
{
context
-
>
error
(
(
yylsp
[
0
]
)
"
unsupported
type
"
"
__upixelLocalANGLE
"
)
;
}
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initialize
(
EbtUPixelLocalANGLE
(
yylsp
[
0
]
)
)
;
}
break
;
case
257
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
=
(
yyvsp
[
0
]
.
interm
.
typeSpecifierNonArray
)
;
}
break
;
case
258
:
{
const
TStructure
*
structure
=
static_cast
<
const
TStructure
*
>
(
(
yyvsp
[
0
]
.
lex
)
.
symbol
)
;
(
yyval
.
interm
.
typeSpecifierNonArray
)
.
initializeStruct
(
structure
false
(
yylsp
[
0
]
)
)
;
}
break
;
case
259
:
{
context
-
>
enterStructDeclaration
(
(
yylsp
[
-
1
]
)
ImmutableString
(
(
yyvsp
[
-
1
]
.
lex
)
.
string
)
)
;
}
break
;
case
260
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
=
context
-
>
addStructure
(
(
yylsp
[
-
5
]
)
(
yylsp
[
-
4
]
)
ImmutableString
(
(
yyvsp
[
-
4
]
.
lex
)
.
string
)
(
yyvsp
[
-
1
]
.
interm
.
fieldList
)
)
;
}
break
;
case
261
:
{
context
-
>
enterStructDeclaration
(
(
yylsp
[
0
]
)
kEmptyImmutableString
)
;
}
break
;
case
262
:
{
(
yyval
.
interm
.
typeSpecifierNonArray
)
=
context
-
>
addStructure
(
(
yylsp
[
-
4
]
)
(
yyloc
)
kEmptyImmutableString
(
yyvsp
[
-
1
]
.
interm
.
fieldList
)
)
;
}
break
;
case
263
:
{
(
yyval
.
interm
.
fieldList
)
=
context
-
>
addStructFieldList
(
(
yyvsp
[
0
]
.
interm
.
fieldList
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
264
:
{
(
yyval
.
interm
.
fieldList
)
=
context
-
>
combineStructFieldLists
(
(
yyvsp
[
-
1
]
.
interm
.
fieldList
)
(
yyvsp
[
0
]
.
interm
.
fieldList
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
265
:
{
(
yyval
.
interm
.
fieldList
)
=
context
-
>
addStructDeclaratorList
(
(
yyvsp
[
-
2
]
.
interm
.
type
)
(
yyvsp
[
-
1
]
.
interm
.
declaratorList
)
)
;
}
break
;
case
266
:
{
(
yyval
.
interm
.
fieldList
)
=
context
-
>
addStructDeclaratorListWithQualifiers
(
*
(
yyvsp
[
-
3
]
.
interm
.
typeQualifierBuilder
)
&
(
yyvsp
[
-
2
]
.
interm
.
type
)
(
yyvsp
[
-
1
]
.
interm
.
declaratorList
)
)
;
}
break
;
case
267
:
{
(
yyval
.
interm
.
declaratorList
)
=
new
TDeclaratorList
(
)
;
(
yyval
.
interm
.
declaratorList
)
-
>
push_back
(
(
yyvsp
[
0
]
.
interm
.
declarator
)
)
;
}
break
;
case
268
:
{
(
yyval
.
interm
.
declaratorList
)
-
>
push_back
(
(
yyvsp
[
0
]
.
interm
.
declarator
)
)
;
}
break
;
case
269
:
{
(
yyval
.
interm
.
declarator
)
=
context
-
>
parseStructDeclarator
(
ImmutableString
(
(
yyvsp
[
0
]
.
lex
)
.
string
)
(
yylsp
[
0
]
)
)
;
}
break
;
case
270
:
{
(
yyval
.
interm
.
declarator
)
=
context
-
>
parseStructArrayDeclarator
(
ImmutableString
(
(
yyvsp
[
-
1
]
.
lex
)
.
string
)
(
yylsp
[
-
1
]
)
(
yyvsp
[
0
]
.
interm
.
arraySizes
)
)
;
}
break
;
case
271
:
{
(
yyval
.
interm
.
intermTypedNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
272
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
273
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermBlock
)
;
}
break
;
case
274
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
275
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
276
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
277
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
278
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermSwitch
)
;
}
break
;
case
279
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermCase
)
;
}
break
;
case
280
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
281
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
282
:
{
(
yyval
.
interm
.
intermBlock
)
=
new
TIntermBlock
(
)
;
(
yyval
.
interm
.
intermBlock
)
-
>
setLine
(
(
yyloc
)
)
;
}
break
;
case
283
:
{
context
-
>
symbolTable
.
push
(
)
;
}
break
;
case
284
:
{
context
-
>
symbolTable
.
pop
(
)
;
}
break
;
case
285
:
{
(
yyvsp
[
-
2
]
.
interm
.
intermBlock
)
-
>
setLine
(
(
yyloc
)
)
;
(
yyval
.
interm
.
intermBlock
)
=
(
yyvsp
[
-
2
]
.
interm
.
intermBlock
)
;
}
break
;
case
286
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermBlock
)
;
}
break
;
case
287
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
288
:
{
context
-
>
symbolTable
.
push
(
)
;
}
break
;
case
289
:
{
context
-
>
symbolTable
.
pop
(
)
;
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermBlock
)
;
}
break
;
case
290
:
{
context
-
>
symbolTable
.
push
(
)
;
}
break
;
case
291
:
{
context
-
>
symbolTable
.
pop
(
)
;
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
292
:
{
(
yyval
.
interm
.
intermBlock
)
=
new
TIntermBlock
(
)
;
(
yyval
.
interm
.
intermBlock
)
-
>
setLine
(
(
yyloc
)
)
;
}
break
;
case
293
:
{
(
yyvsp
[
-
1
]
.
interm
.
intermBlock
)
-
>
setLine
(
(
yyloc
)
)
;
(
yyval
.
interm
.
intermBlock
)
=
(
yyvsp
[
-
1
]
.
interm
.
intermBlock
)
;
}
break
;
case
294
:
{
(
yyval
.
interm
.
intermBlock
)
=
new
TIntermBlock
(
)
;
context
-
>
appendStatement
(
(
yyval
.
interm
.
intermBlock
)
(
yyvsp
[
0
]
.
interm
.
intermNode
)
)
;
}
break
;
case
295
:
{
(
yyval
.
interm
.
intermBlock
)
=
(
yyvsp
[
-
1
]
.
interm
.
intermBlock
)
;
context
-
>
appendStatement
(
(
yyval
.
interm
.
intermBlock
)
(
yyvsp
[
0
]
.
interm
.
intermNode
)
)
;
}
break
;
case
296
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addEmptyStatement
(
(
yyloc
)
)
;
}
break
;
case
297
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
-
1
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
298
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addIfElse
(
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
nodePair
)
(
yylsp
[
-
4
]
)
)
;
}
break
;
case
299
:
{
(
yyval
.
interm
.
nodePair
)
.
node1
=
(
yyvsp
[
-
2
]
.
interm
.
intermNode
)
;
(
yyval
.
interm
.
nodePair
)
.
node2
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
300
:
{
(
yyval
.
interm
.
nodePair
)
.
node1
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
(
yyval
.
interm
.
nodePair
)
.
node2
=
nullptr
;
}
break
;
case
301
:
{
context
-
>
incrSwitchNestingLevel
(
)
;
}
break
;
case
302
:
{
(
yyval
.
interm
.
intermSwitch
)
=
context
-
>
addSwitch
(
(
yyvsp
[
-
3
]
.
interm
.
intermTypedNode
)
(
yyvsp
[
0
]
.
interm
.
intermBlock
)
(
yylsp
[
-
5
]
)
)
;
context
-
>
decrSwitchNestingLevel
(
)
;
}
break
;
case
303
:
{
(
yyval
.
interm
.
intermCase
)
=
context
-
>
addCase
(
(
yyvsp
[
-
1
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
2
]
)
)
;
}
break
;
case
304
:
{
(
yyval
.
interm
.
intermCase
)
=
context
-
>
addDefault
(
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
305
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
context
-
>
checkIsScalarBool
(
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
-
>
getLine
(
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
)
;
}
break
;
case
306
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addConditionInitializer
(
(
yyvsp
[
-
3
]
.
interm
.
type
)
ImmutableString
(
(
yyvsp
[
-
2
]
.
lex
)
.
string
)
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
2
]
)
)
;
}
break
;
case
307
:
{
context
-
>
symbolTable
.
push
(
)
;
context
-
>
incrLoopNestingLevel
(
)
;
}
break
;
case
308
:
{
context
-
>
symbolTable
.
pop
(
)
;
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addLoop
(
ELoopWhile
0
(
yyvsp
[
-
2
]
.
interm
.
intermNode
)
0
(
yyvsp
[
0
]
.
interm
.
intermNode
)
(
yylsp
[
-
5
]
)
)
;
context
-
>
decrLoopNestingLevel
(
)
;
}
break
;
case
309
:
{
context
-
>
incrLoopNestingLevel
(
)
;
}
break
;
case
310
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addLoop
(
ELoopDoWhile
0
(
yyvsp
[
-
2
]
.
interm
.
intermTypedNode
)
0
(
yyvsp
[
-
5
]
.
interm
.
intermNode
)
(
yylsp
[
-
4
]
)
)
;
context
-
>
decrLoopNestingLevel
(
)
;
}
break
;
case
311
:
{
context
-
>
symbolTable
.
push
(
)
;
context
-
>
incrLoopNestingLevel
(
)
;
}
break
;
case
312
:
{
context
-
>
symbolTable
.
pop
(
)
;
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addLoop
(
ELoopFor
(
yyvsp
[
-
3
]
.
interm
.
intermNode
)
(
yyvsp
[
-
2
]
.
interm
.
nodePair
)
.
node1
reinterpret_cast
<
TIntermTyped
*
>
(
(
yyvsp
[
-
2
]
.
interm
.
nodePair
)
.
node2
)
(
yyvsp
[
0
]
.
interm
.
intermNode
)
(
yylsp
[
-
6
]
)
)
;
context
-
>
decrLoopNestingLevel
(
)
;
}
break
;
case
313
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
314
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
315
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
316
:
{
(
yyval
.
interm
.
intermNode
)
=
nullptr
;
}
break
;
case
317
:
{
(
yyval
.
interm
.
nodePair
)
.
node1
=
(
yyvsp
[
-
1
]
.
interm
.
intermNode
)
;
(
yyval
.
interm
.
nodePair
)
.
node2
=
0
;
}
break
;
case
318
:
{
(
yyval
.
interm
.
nodePair
)
.
node1
=
(
yyvsp
[
-
2
]
.
interm
.
intermNode
)
;
(
yyval
.
interm
.
nodePair
)
.
node2
=
(
yyvsp
[
0
]
.
interm
.
intermTypedNode
)
;
}
break
;
case
319
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addBranch
(
EOpContinue
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
320
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addBranch
(
EOpBreak
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
321
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addBranch
(
EOpReturn
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
322
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addBranch
(
EOpReturn
(
yyvsp
[
-
1
]
.
interm
.
intermTypedNode
)
(
yylsp
[
-
2
]
)
)
;
}
break
;
case
323
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addBranch
(
EOpKill
(
yylsp
[
-
1
]
)
)
;
}
break
;
case
324
:
{
(
yyval
.
interm
.
intermBlock
)
=
new
TIntermBlock
(
)
;
(
yyval
.
interm
.
intermBlock
)
-
>
setLine
(
(
yyloc
)
)
;
(
yyval
.
interm
.
intermBlock
)
-
>
appendStatement
(
(
yyvsp
[
0
]
.
interm
.
intermNode
)
)
;
context
-
>
setTreeRoot
(
(
yyval
.
interm
.
intermBlock
)
)
;
}
break
;
case
325
:
{
(
yyval
.
interm
.
intermBlock
)
-
>
appendStatement
(
(
yyvsp
[
0
]
.
interm
.
intermNode
)
)
;
}
break
;
case
326
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
327
:
{
(
yyval
.
interm
.
intermNode
)
=
(
yyvsp
[
0
]
.
interm
.
intermNode
)
;
}
break
;
case
328
:
{
context
-
>
parseFunctionDefinitionHeader
(
(
yylsp
[
0
]
)
(
yyvsp
[
0
]
.
interm
)
.
function
&
(
(
yyvsp
[
0
]
.
interm
)
.
intermFunctionPrototype
)
)
;
}
break
;
case
329
:
{
(
yyval
.
interm
.
intermNode
)
=
context
-
>
addFunctionDefinition
(
(
yyvsp
[
-
2
]
.
interm
)
.
intermFunctionPrototype
(
yyvsp
[
0
]
.
interm
.
intermBlock
)
(
yylsp
[
-
2
]
)
)
;
}
break
;
default
:
break
;
}
YY_SYMBOL_PRINT
(
"
-
>
=
"
YY_CAST
(
yysymbol_kind_t
yyr1
[
yyn
]
)
&
yyval
&
yyloc
)
;
YYPOPSTACK
(
yylen
)
;
yylen
=
0
;
*
+
+
yyvsp
=
yyval
;
*
+
+
yylsp
=
yyloc
;
{
const
int
yylhs
=
yyr1
[
yyn
]
-
YYNTOKENS
;
const
int
yyi
=
yypgoto
[
yylhs
]
+
*
yyssp
;
yystate
=
(
0
<
=
yyi
&
&
yyi
<
=
YYLAST
&
&
yycheck
[
yyi
]
=
=
*
yyssp
?
yytable
[
yyi
]
:
yydefgoto
[
yylhs
]
)
;
}
goto
yynewstate
;
yyerrlab
:
yytoken
=
yychar
=
=
YYEMPTY
?
YYSYMBOL_YYEMPTY
:
YYTRANSLATE
(
yychar
)
;
if
(
!
yyerrstatus
)
{
+
+
yynerrs
;
yyerror
(
&
yylloc
context
scanner
YY_
(
"
syntax
error
"
)
)
;
}
yyerror_range
[
1
]
=
yylloc
;
if
(
yyerrstatus
=
=
3
)
{
if
(
yychar
<
=
YYEOF
)
{
if
(
yychar
=
=
YYEOF
)
YYABORT
;
}
else
{
yydestruct
(
"
Error
:
discarding
"
yytoken
&
yylval
&
yylloc
context
scanner
)
;
yychar
=
YYEMPTY
;
}
}
goto
yyerrlab1
;
yyerrorlab
:
if
(
0
)
YYERROR
;
+
+
yynerrs
;
YYPOPSTACK
(
yylen
)
;
yylen
=
0
;
YY_STACK_PRINT
(
yyss
yyssp
)
;
yystate
=
*
yyssp
;
goto
yyerrlab1
;
yyerrlab1
:
yyerrstatus
=
3
;
for
(
;
;
)
{
yyn
=
yypact
[
yystate
]
;
if
(
!
yypact_value_is_default
(
yyn
)
)
{
yyn
+
=
YYSYMBOL_YYerror
;
if
(
0
<
=
yyn
&
&
yyn
<
=
YYLAST
&
&
yycheck
[
yyn
]
=
=
YYSYMBOL_YYerror
)
{
yyn
=
yytable
[
yyn
]
;
if
(
0
<
yyn
)
break
;
}
}
if
(
yyssp
=
=
yyss
)
YYABORT
;
yyerror_range
[
1
]
=
*
yylsp
;
yydestruct
(
"
Error
:
popping
"
YY_ACCESSING_SYMBOL
(
yystate
)
yyvsp
yylsp
context
scanner
)
;
YYPOPSTACK
(
1
)
;
yystate
=
*
yyssp
;
YY_STACK_PRINT
(
yyss
yyssp
)
;
}
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
*
+
+
yyvsp
=
yylval
;
YY_IGNORE_MAYBE_UNINITIALIZED_END
yyerror_range
[
2
]
=
yylloc
;
+
+
yylsp
;
YYLLOC_DEFAULT
(
*
yylsp
yyerror_range
2
)
;
YY_SYMBOL_PRINT
(
"
Shifting
"
YY_ACCESSING_SYMBOL
(
yyn
)
yyvsp
yylsp
)
;
yystate
=
yyn
;
goto
yynewstate
;
yyacceptlab
:
yyresult
=
0
;
goto
yyreturnlab
;
yyabortlab
:
yyresult
=
1
;
goto
yyreturnlab
;
yyexhaustedlab
:
yyerror
(
&
yylloc
context
scanner
YY_
(
"
memory
exhausted
"
)
)
;
yyresult
=
2
;
goto
yyreturnlab
;
yyreturnlab
:
if
(
yychar
!
=
YYEMPTY
)
{
yytoken
=
YYTRANSLATE
(
yychar
)
;
yydestruct
(
"
Cleanup
:
discarding
lookahead
"
yytoken
&
yylval
&
yylloc
context
scanner
)
;
}
YYPOPSTACK
(
yylen
)
;
YY_STACK_PRINT
(
yyss
yyssp
)
;
while
(
yyssp
!
=
yyss
)
{
yydestruct
(
"
Cleanup
:
popping
"
YY_ACCESSING_SYMBOL
(
+
*
yyssp
)
yyvsp
yylsp
context
scanner
)
;
YYPOPSTACK
(
1
)
;
}
#
ifndef
yyoverflow
if
(
yyss
!
=
yyssa
)
YYSTACK_FREE
(
yyss
)
;
#
endif
return
yyresult
;
}
int
glslang_parse
(
TParseContext
*
context
)
{
return
yyparse
(
context
context
-
>
getScanner
(
)
)
;
}
