#
ifndef
COMPILER_TRANSLATOR_VERSIONGLSL_H_
#
define
COMPILER_TRANSLATOR_VERSIONGLSL_H_
#
include
"
compiler
/
translator
/
IntermTraverse
.
h
"
#
include
"
compiler
/
translator
/
Pragma
.
h
"
namespace
sh
{
static
const
int
GLSL_VERSION_110
=
110
;
static
const
int
GLSL_VERSION_120
=
120
;
static
const
int
GLSL_VERSION_130
=
130
;
static
const
int
GLSL_VERSION_140
=
140
;
static
const
int
GLSL_VERSION_150
=
150
;
static
const
int
GLSL_VERSION_330
=
330
;
static
const
int
GLSL_VERSION_400
=
400
;
static
const
int
GLSL_VERSION_410
=
410
;
static
const
int
GLSL_VERSION_420
=
420
;
static
const
int
GLSL_VERSION_430
=
430
;
static
const
int
GLSL_VERSION_440
=
440
;
static
const
int
GLSL_VERSION_450
=
450
;
int
ShaderOutputTypeToGLSLVersion
(
ShShaderOutput
output
)
;
class
TVersionGLSL
:
public
TIntermTraverser
{
public
:
TVersionGLSL
(
sh
:
:
GLenum
type
const
TPragma
&
pragma
ShShaderOutput
output
)
;
int
getVersion
(
)
const
{
return
mVersion
;
}
void
visitSymbol
(
TIntermSymbol
*
node
)
override
;
bool
visitAggregate
(
Visit
TIntermAggregate
*
node
)
override
;
bool
visitInvariantDeclaration
(
Visit
TIntermInvariantDeclaration
*
node
)
override
;
bool
visitFunctionPrototype
(
Visit
TIntermFunctionPrototype
*
node
)
override
;
bool
visitDeclaration
(
Visit
TIntermDeclaration
*
node
)
override
;
private
:
void
ensureVersionIsAtLeast
(
int
version
)
;
int
mVersion
;
}
;
}
#
endif
