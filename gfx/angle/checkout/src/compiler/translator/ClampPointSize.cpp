#
include
"
compiler
/
translator
/
ClampPointSize
.
h
"
#
include
"
compiler
/
translator
/
FindSymbolNode
.
h
"
#
include
"
compiler
/
translator
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
RunAtTheEndOfShader
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
namespace
sh
{
void
ClampPointSize
(
TIntermBlock
*
root
float
maxPointSize
TSymbolTable
*
symbolTable
)
{
if
(
!
FindSymbolNode
(
root
ImmutableString
(
"
gl_PointSize
"
)
)
)
{
return
;
}
TIntermSymbol
*
pointSizeNode
=
ReferenceBuiltInVariable
(
ImmutableString
(
"
gl_PointSize
"
)
*
symbolTable
100
)
;
TConstantUnion
*
maxPointSizeConstant
=
new
TConstantUnion
(
)
;
maxPointSizeConstant
-
>
setFConst
(
maxPointSize
)
;
TIntermConstantUnion
*
maxPointSizeNode
=
new
TIntermConstantUnion
(
maxPointSizeConstant
TType
(
EbtFloat
EbpHigh
EvqConst
)
)
;
TIntermSequence
*
minArguments
=
new
TIntermSequence
(
)
;
minArguments
-
>
push_back
(
pointSizeNode
-
>
deepCopy
(
)
)
;
minArguments
-
>
push_back
(
maxPointSizeNode
)
;
TIntermTyped
*
clampedPointSize
=
CreateBuiltInFunctionCallNode
(
"
min
"
minArguments
*
symbolTable
100
)
;
TIntermBinary
*
assignPointSize
=
new
TIntermBinary
(
EOpAssign
pointSizeNode
clampedPointSize
)
;
RunAtTheEndOfShader
(
root
assignPointSize
symbolTable
)
;
}
}
