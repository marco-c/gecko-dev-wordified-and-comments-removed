#
ifndef
COMPILER_PREPROCESSOR_PREPROCESSOR_H_
#
define
COMPILER_PREPROCESSOR_PREPROCESSOR_H_
#
include
<
cstddef
>
#
include
"
common
/
angleutils
.
h
"
namespace
angle
{
namespace
pp
{
class
Diagnostics
;
class
DirectiveHandler
;
struct
PreprocessorImpl
;
struct
Token
;
struct
PreprocessorSettings
:
private
angle
:
:
NonCopyable
{
PreprocessorSettings
(
)
:
maxMacroExpansionDepth
(
1000
)
{
}
int
maxMacroExpansionDepth
;
}
;
class
Preprocessor
:
angle
:
:
NonCopyable
{
public
:
Preprocessor
(
Diagnostics
*
diagnostics
DirectiveHandler
*
directiveHandler
const
PreprocessorSettings
&
settings
)
;
~
Preprocessor
(
)
;
bool
init
(
size_t
count
const
char
*
const
string
[
]
const
int
length
[
]
)
;
void
predefineMacro
(
const
char
*
name
int
value
)
;
void
lex
(
Token
*
token
)
;
void
setMaxTokenSize
(
size_t
maxTokenSize
)
;
private
:
PreprocessorImpl
*
mImpl
;
}
;
}
}
#
endif
