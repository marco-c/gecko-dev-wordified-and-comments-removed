#
include
"
libGLESv2
/
global_state
.
h
"
#
include
"
common
/
debug
.
h
"
#
include
"
common
/
platform
.
h
"
#
include
"
common
/
tls
.
h
"
#
include
"
libANGLE
/
Debug
.
h
"
#
include
"
libANGLE
/
Thread
.
h
"
namespace
gl
{
Context
*
GetGlobalContext
(
)
{
egl
:
:
Thread
*
thread
=
egl
:
:
GetCurrentThread
(
)
;
return
thread
-
>
getContext
(
)
;
}
Context
*
GetValidGlobalContext
(
)
{
egl
:
:
Thread
*
thread
=
egl
:
:
GetCurrentThread
(
)
;
return
thread
-
>
getValidContext
(
)
;
}
}
namespace
egl
{
namespace
{
static
TLSIndex
threadTLS
=
TLS_INVALID_INDEX
;
Debug
*
g_Debug
=
nullptr
;
Thread
*
AllocateCurrentThread
(
)
{
ASSERT
(
threadTLS
!
=
TLS_INVALID_INDEX
)
;
if
(
threadTLS
=
=
TLS_INVALID_INDEX
)
{
return
nullptr
;
}
Thread
*
thread
=
new
Thread
(
)
;
if
(
!
SetTLSValue
(
threadTLS
thread
)
)
{
ERR
(
)
<
<
"
Could
not
set
thread
local
storage
.
"
;
return
nullptr
;
}
return
thread
;
}
void
AllocateDebug
(
)
{
if
(
g_Debug
=
=
nullptr
)
{
g_Debug
=
new
Debug
(
)
;
}
}
}
Thread
*
GetCurrentThread
(
)
{
if
(
threadTLS
=
=
TLS_INVALID_INDEX
)
{
threadTLS
=
CreateTLSIndex
(
)
;
}
Thread
*
current
=
static_cast
<
Thread
*
>
(
GetTLSValue
(
threadTLS
)
)
;
return
(
current
?
current
:
AllocateCurrentThread
(
)
)
;
}
Debug
*
GetDebug
(
)
{
AllocateDebug
(
)
;
return
g_Debug
;
}
}
#
ifdef
ANGLE_PLATFORM_WINDOWS
namespace
egl
{
namespace
{
bool
DeallocateCurrentThread
(
)
{
Thread
*
thread
=
static_cast
<
Thread
*
>
(
GetTLSValue
(
threadTLS
)
)
;
SafeDelete
(
thread
)
;
return
SetTLSValue
(
threadTLS
nullptr
)
;
}
void
DealocateDebug
(
)
{
SafeDelete
(
g_Debug
)
;
}
bool
InitializeProcess
(
)
{
ASSERT
(
g_Debug
=
=
nullptr
)
;
AllocateDebug
(
)
;
threadTLS
=
CreateTLSIndex
(
)
;
if
(
threadTLS
=
=
TLS_INVALID_INDEX
)
{
return
false
;
}
return
AllocateCurrentThread
(
)
!
=
nullptr
;
}
bool
TerminateProcess
(
)
{
DealocateDebug
(
)
;
if
(
!
DeallocateCurrentThread
(
)
)
{
return
false
;
}
if
(
threadTLS
!
=
TLS_INVALID_INDEX
)
{
TLSIndex
tlsCopy
=
threadTLS
;
threadTLS
=
TLS_INVALID_INDEX
;
if
(
!
DestroyTLSIndex
(
tlsCopy
)
)
{
return
false
;
}
}
return
true
;
}
}
}
extern
"
C
"
BOOL
WINAPI
DllMain
(
HINSTANCE
DWORD
reason
LPVOID
)
{
switch
(
reason
)
{
case
DLL_PROCESS_ATTACH
:
return
static_cast
<
BOOL
>
(
egl
:
:
InitializeProcess
(
)
)
;
case
DLL_THREAD_ATTACH
:
return
static_cast
<
BOOL
>
(
egl
:
:
AllocateCurrentThread
(
)
!
=
nullptr
)
;
case
DLL_THREAD_DETACH
:
return
static_cast
<
BOOL
>
(
egl
:
:
DeallocateCurrentThread
(
)
)
;
case
DLL_PROCESS_DETACH
:
return
static_cast
<
BOOL
>
(
egl
:
:
TerminateProcess
(
)
)
;
}
return
TRUE
;
}
#
endif
