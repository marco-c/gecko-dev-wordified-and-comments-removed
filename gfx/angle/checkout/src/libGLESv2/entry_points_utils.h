#
ifndef
LIBGLESV2_ENTRY_POINT_UTILS_H_
#
define
LIBGLESV2_ENTRY_POINT_UTILS_H_
#
include
"
angle_gl
.
h
"
#
include
"
common
/
Optional
.
h
"
#
include
"
common
/
PackedEnums
.
h
"
#
include
"
common
/
angleutils
.
h
"
#
include
"
common
/
mathutil
.
h
"
#
include
"
libGLESv2
/
entry_points_enum_autogen
.
h
"
namespace
gl
{
template
<
EntryPoint
EP
typename
ReturnType
>
struct
DefaultReturnValue
;
template
<
EntryPoint
EP
>
struct
DefaultReturnValue
<
EP
GLint
>
{
static
constexpr
GLint
kValue
=
-
1
;
}
;
template
<
EntryPoint
EP
>
struct
DefaultReturnValue
<
EP
GLuint
>
{
static
constexpr
GLuint
kValue
=
0
;
}
;
template
<
EntryPoint
EP
>
struct
DefaultReturnValue
<
EP
GLboolean
>
{
static
constexpr
GLboolean
kValue
=
GL_FALSE
;
}
;
template
<
EntryPoint
EP
typename
PointerType
>
struct
DefaultReturnValue
<
EP
const
PointerType
*
>
{
static
constexpr
const
PointerType
*
kValue
=
nullptr
;
}
;
template
<
EntryPoint
EP
typename
PointerType
>
struct
DefaultReturnValue
<
EP
PointerType
*
>
{
static
constexpr
PointerType
*
kValue
=
nullptr
;
}
;
template
<
>
struct
DefaultReturnValue
<
EntryPoint
:
:
GetUniformBlockIndex
GLuint
>
{
static
constexpr
GLuint
kValue
=
GL_INVALID_INDEX
;
}
;
template
<
>
struct
DefaultReturnValue
<
EntryPoint
:
:
ClientWaitSync
GLenum
>
{
static
constexpr
GLenum
kValue
=
GL_WAIT_FAILED
;
}
;
template
<
>
struct
DefaultReturnValue
<
EntryPoint
:
:
TestFenceNV
GLboolean
>
{
static
constexpr
GLboolean
kValue
=
GL_TRUE
;
}
;
template
<
EntryPoint
EP
typename
ReturnType
>
constexpr
ANGLE_INLINE
ReturnType
GetDefaultReturnValue
(
)
{
return
DefaultReturnValue
<
EP
ReturnType
>
:
:
kValue
;
}
}
#
endif
