#
ifndef
GPU_INFO_UTIL_SYSTEM_INFO_H_
#
define
GPU_INFO_UTIL_SYSTEM_INFO_H_
#
include
<
cstdint
>
#
include
<
string
>
#
include
<
vector
>
namespace
angle
{
using
VendorID
=
uint32_t
;
using
DeviceID
=
uint32_t
;
struct
VersionInfo
{
uint32_t
major
=
0
;
uint32_t
minor
=
0
;
uint32_t
subMinor
=
0
;
uint32_t
patch
=
0
;
}
;
struct
GPUDeviceInfo
{
GPUDeviceInfo
(
)
;
~
GPUDeviceInfo
(
)
;
GPUDeviceInfo
(
const
GPUDeviceInfo
&
other
)
;
VendorID
vendorId
=
0
;
DeviceID
deviceId
=
0
;
std
:
:
string
driverVendor
;
std
:
:
string
driverVersion
;
std
:
:
string
driverDate
;
VersionInfo
detailedDriverVersion
;
}
;
struct
SystemInfo
{
SystemInfo
(
)
;
~
SystemInfo
(
)
;
SystemInfo
(
const
SystemInfo
&
other
)
;
bool
hasNVIDIAGPU
(
)
const
;
bool
hasIntelGPU
(
)
const
;
bool
hasAMDGPU
(
)
const
;
std
:
:
vector
<
GPUDeviceInfo
>
gpus
;
int
activeGPUIndex
=
-
1
;
bool
isOptimus
=
false
;
bool
isAMDSwitchable
=
false
;
bool
isMacSwitchable
=
false
;
std
:
:
string
machineManufacturer
;
std
:
:
string
machineModelName
;
std
:
:
string
machineModelVersion
;
}
;
bool
GetSystemInfo
(
SystemInfo
*
info
)
;
constexpr
VendorID
kVendorID_AMD
=
0x1002
;
constexpr
VendorID
kVendorID_ARM
=
0x13B5
;
constexpr
VendorID
kVendorID_ImgTec
=
0x1010
;
constexpr
VendorID
kVendorID_Intel
=
0x8086
;
constexpr
VendorID
kVendorID_NVIDIA
=
0x10DE
;
constexpr
VendorID
kVendorID_Qualcomm
=
0x5143
;
constexpr
VendorID
kVendorID_VMWare
=
0x15ad
;
constexpr
VendorID
kVendorID_Vivante
=
0x10001
;
constexpr
VendorID
kVendorID_VeriSilicon
=
0x10002
;
constexpr
VendorID
kVendorID_Kazan
=
0x10003
;
bool
IsAMD
(
VendorID
vendorId
)
;
bool
IsARM
(
VendorID
vendorId
)
;
bool
IsImgTec
(
VendorID
vendorId
)
;
bool
IsIntel
(
VendorID
vendorId
)
;
bool
IsKazan
(
VendorID
vendorId
)
;
bool
IsNVIDIA
(
VendorID
vendorId
)
;
bool
IsQualcomm
(
VendorID
vendorId
)
;
bool
IsVeriSilicon
(
VendorID
vendorId
)
;
bool
IsVMWare
(
VendorID
vendorId
)
;
bool
IsVivante
(
VendorID
vendorId
)
;
void
PrintSystemInfo
(
const
SystemInfo
&
info
)
;
}
#
endif
