#
include
"
gpu_info_util
/
SystemInfo_internal
.
h
"
#
include
"
common
/
debug
.
h
"
#
include
"
common
/
string_utils
.
h
"
#
include
<
windows
.
h
>
#
include
<
dxgi
.
h
>
#
include
<
array
>
#
include
<
sstream
>
namespace
angle
{
namespace
{
bool
GetDevicesFromDXGI
(
std
:
:
vector
<
GPUDeviceInfo
>
*
devices
)
{
#
if
defined
(
ANGLE_ENABLE_WINDOWS_UWP
)
IDXGIFactory1
*
factory
;
if
(
!
SUCCEEDED
(
CreateDXGIFactory1
(
__uuidof
(
IDXGIFactory1
)
reinterpret_cast
<
void
*
*
>
(
&
factory
)
)
)
)
{
return
false
;
}
#
else
IDXGIFactory
*
factory
;
if
(
!
SUCCEEDED
(
CreateDXGIFactory
(
__uuidof
(
IDXGIFactory
)
reinterpret_cast
<
void
*
*
>
(
&
factory
)
)
)
)
{
return
false
;
}
#
endif
UINT
i
=
0
;
IDXGIAdapter
*
adapter
=
nullptr
;
while
(
factory
-
>
EnumAdapters
(
i
+
+
&
adapter
)
!
=
DXGI_ERROR_NOT_FOUND
)
{
DXGI_ADAPTER_DESC
desc
;
adapter
-
>
GetDesc
(
&
desc
)
;
LARGE_INTEGER
umdVersion
;
if
(
adapter
-
>
CheckInterfaceSupport
(
__uuidof
(
IDXGIDevice
)
&
umdVersion
)
=
=
DXGI_ERROR_UNSUPPORTED
)
{
adapter
-
>
Release
(
)
;
continue
;
}
uint64_t
intVersion
=
umdVersion
.
QuadPart
;
std
:
:
ostringstream
o
;
constexpr
uint64_t
kMask16
=
std
:
:
numeric_limits
<
uint16_t
>
:
:
max
(
)
;
o
<
<
(
(
intVersion
>
>
48
)
&
kMask16
)
<
<
"
.
"
;
o
<
<
(
(
intVersion
>
>
32
)
&
kMask16
)
<
<
"
.
"
;
o
<
<
(
(
intVersion
>
>
16
)
&
kMask16
)
<
<
"
.
"
;
o
<
<
(
intVersion
&
kMask16
)
;
GPUDeviceInfo
device
;
device
.
vendorId
=
desc
.
VendorId
;
device
.
deviceId
=
desc
.
DeviceId
;
device
.
driverVersion
=
o
.
str
(
)
;
device
.
systemDeviceId
=
GetSystemDeviceIdFromParts
(
desc
.
AdapterLuid
.
HighPart
desc
.
AdapterLuid
.
LowPart
)
;
devices
-
>
push_back
(
device
)
;
adapter
-
>
Release
(
)
;
}
factory
-
>
Release
(
)
;
return
(
i
>
0
)
;
}
}
bool
GetSystemInfo
(
SystemInfo
*
info
)
{
if
(
!
GetDevicesFromDXGI
(
&
info
-
>
gpus
)
)
{
return
false
;
}
if
(
info
-
>
gpus
.
size
(
)
=
=
0
)
{
return
false
;
}
GetDualGPUInfo
(
info
)
;
info
-
>
activeGPUIndex
=
0
;
#
if
!
defined
(
ANGLE_ENABLE_WINDOWS_UWP
)
HMODULE
nvd3d9wrap
=
GetModuleHandleW
(
L
"
nvd3d9wrap
.
dll
"
)
;
info
-
>
isOptimus
=
nvd3d9wrap
!
=
nullptr
;
#
endif
return
true
;
}
}
