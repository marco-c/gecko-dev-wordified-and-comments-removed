#
include
"
common
/
debug
.
h
"
#
include
<
stdarg
.
h
>
#
include
<
array
>
#
include
<
cstdio
>
#
include
<
fstream
>
#
include
<
mutex
>
#
include
<
ostream
>
#
include
<
vector
>
#
if
defined
(
ANGLE_PLATFORM_ANDROID
)
#
include
<
android
/
log
.
h
>
#
endif
#
include
"
common
/
Optional
.
h
"
#
include
"
common
/
angleutils
.
h
"
namespace
gl
{
namespace
{
DebugAnnotator
*
g_debugAnnotator
=
nullptr
;
std
:
:
mutex
*
g_debugMutex
=
nullptr
;
constexpr
std
:
:
array
<
const
char
*
LOG_NUM_SEVERITIES
>
g_logSeverityNames
=
{
{
"
EVENT
"
"
WARN
"
"
ERR
"
}
}
;
constexpr
const
char
*
LogSeverityName
(
int
severity
)
{
return
(
severity
>
=
0
&
&
severity
<
LOG_NUM_SEVERITIES
)
?
g_logSeverityNames
[
severity
]
:
"
UNKNOWN
"
;
}
bool
ShouldCreateLogMessage
(
LogSeverity
severity
)
{
#
if
defined
(
ANGLE_TRACE_ENABLED
)
return
true
;
#
elif
defined
(
ANGLE_ENABLE_ASSERTS
)
return
severity
!
=
LOG_EVENT
;
#
else
return
false
;
#
endif
}
}
namespace
priv
{
bool
ShouldCreatePlatformLogMessage
(
LogSeverity
severity
)
{
#
if
defined
(
ANGLE_TRACE_ENABLED
)
return
true
;
#
else
return
severity
!
=
LOG_EVENT
;
#
endif
}
std
:
:
ostream
*
gSwallowStream
;
}
bool
DebugAnnotationsActive
(
)
{
#
if
defined
(
ANGLE_ENABLE_DEBUG_ANNOTATIONS
)
return
g_debugAnnotator
!
=
nullptr
&
&
g_debugAnnotator
-
>
getStatus
(
)
;
#
else
return
false
;
#
endif
}
bool
DebugAnnotationsInitialized
(
)
{
return
g_debugAnnotator
!
=
nullptr
;
}
void
InitializeDebugAnnotations
(
DebugAnnotator
*
debugAnnotator
)
{
UninitializeDebugAnnotations
(
)
;
g_debugAnnotator
=
debugAnnotator
;
}
void
UninitializeDebugAnnotations
(
)
{
g_debugAnnotator
=
nullptr
;
}
void
InitializeDebugMutexIfNeeded
(
)
{
if
(
g_debugMutex
=
=
nullptr
)
{
g_debugMutex
=
new
std
:
:
mutex
(
)
;
}
}
ScopedPerfEventHelper
:
:
ScopedPerfEventHelper
(
const
char
*
format
.
.
.
)
:
mFunctionName
(
nullptr
)
{
bool
dbgTrace
=
DebugAnnotationsActive
(
)
;
#
if
!
defined
(
ANGLE_ENABLE_DEBUG_TRACE
)
if
(
!
dbgTrace
)
{
return
;
}
#
endif
va_list
vararg
;
va_start
(
vararg
format
)
;
std
:
:
vector
<
char
>
buffer
(
512
)
;
size_t
len
=
FormatStringIntoVector
(
format
vararg
buffer
)
;
ANGLE_LOG
(
EVENT
)
<
<
std
:
:
string
(
&
buffer
[
0
]
len
)
;
mFunctionName
=
va_arg
(
vararg
const
char
*
)
;
va_end
(
vararg
)
;
if
(
dbgTrace
)
{
g_debugAnnotator
-
>
beginEvent
(
mFunctionName
buffer
.
data
(
)
)
;
}
}
ScopedPerfEventHelper
:
:
~
ScopedPerfEventHelper
(
)
{
if
(
DebugAnnotationsActive
(
)
)
{
g_debugAnnotator
-
>
endEvent
(
mFunctionName
)
;
}
}
LogMessage
:
:
LogMessage
(
const
char
*
function
int
line
LogSeverity
severity
)
:
mFunction
(
function
)
mLine
(
line
)
mSeverity
(
severity
)
{
if
(
mSeverity
!
=
LOG_EVENT
)
{
mStream
<
<
mFunction
<
<
"
(
"
<
<
mLine
<
<
"
)
:
"
;
}
}
LogMessage
:
:
~
LogMessage
(
)
{
std
:
:
unique_lock
<
std
:
:
mutex
>
lock
;
if
(
g_debugMutex
!
=
nullptr
)
{
lock
=
std
:
:
unique_lock
<
std
:
:
mutex
>
(
*
g_debugMutex
)
;
}
if
(
DebugAnnotationsInitialized
(
)
&
&
(
mSeverity
=
=
LOG_ERR
|
|
mSeverity
=
=
LOG_WARN
)
)
{
g_debugAnnotator
-
>
logMessage
(
*
this
)
;
}
else
{
Trace
(
getSeverity
(
)
getMessage
(
)
.
c_str
(
)
)
;
}
}
void
Trace
(
LogSeverity
severity
const
char
*
message
)
{
if
(
!
ShouldCreateLogMessage
(
severity
)
)
{
return
;
}
std
:
:
string
str
(
message
)
;
if
(
DebugAnnotationsActive
(
)
)
{
switch
(
severity
)
{
case
LOG_EVENT
:
break
;
default
:
g_debugAnnotator
-
>
setMarker
(
message
)
;
break
;
}
}
if
(
severity
=
=
LOG_ERR
|
|
severity
=
=
LOG_WARN
)
{
#
if
defined
(
ANGLE_PLATFORM_ANDROID
)
__android_log_print
(
(
severity
=
=
LOG_ERR
)
?
ANDROID_LOG_ERROR
:
ANDROID_LOG_WARN
"
ANGLE
"
"
%
s
:
%
s
\
n
"
LogSeverityName
(
severity
)
str
.
c_str
(
)
)
;
#
else
fprintf
(
(
severity
=
=
LOG_ERR
)
?
stderr
:
stdout
"
%
s
:
%
s
\
n
"
LogSeverityName
(
severity
)
str
.
c_str
(
)
)
;
#
endif
}
#
if
defined
(
ANGLE_PLATFORM_WINDOWS
)
&
&
\
(
defined
(
ANGLE_ENABLE_DEBUG_TRACE_TO_DEBUGGER
)
|
|
!
defined
(
NDEBUG
)
)
#
if
!
defined
(
ANGLE_ENABLE_DEBUG_TRACE_TO_DEBUGGER
)
if
(
severity
=
=
LOG_ERR
)
#
endif
{
OutputDebugStringA
(
str
.
c_str
(
)
)
;
}
#
endif
#
if
defined
(
ANGLE_ENABLE_DEBUG_TRACE
)
#
if
defined
(
NDEBUG
)
if
(
severity
=
=
LOG_EVENT
|
|
severity
=
=
LOG_WARN
)
{
return
;
}
#
endif
static
std
:
:
ofstream
file
(
TRACE_OUTPUT_FILE
std
:
:
ofstream
:
:
app
)
;
if
(
file
)
{
file
<
<
LogSeverityName
(
severity
)
<
<
"
:
"
<
<
str
<
<
std
:
:
endl
;
file
.
flush
(
)
;
}
#
endif
}
LogSeverity
LogMessage
:
:
getSeverity
(
)
const
{
return
mSeverity
;
}
std
:
:
string
LogMessage
:
:
getMessage
(
)
const
{
return
mStream
.
str
(
)
;
}
#
if
defined
(
ANGLE_PLATFORM_WINDOWS
)
priv
:
:
FmtHexHelper
<
HRESULT
>
FmtHR
(
HRESULT
value
)
{
return
priv
:
:
FmtHexHelper
<
HRESULT
>
(
"
HRESULT
:
"
value
)
;
}
priv
:
:
FmtHexHelper
<
DWORD
>
FmtErr
(
DWORD
value
)
{
return
priv
:
:
FmtHexHelper
<
DWORD
>
(
"
error
:
"
value
)
;
}
#
endif
}
