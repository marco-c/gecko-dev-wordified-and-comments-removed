#
ifndef
COMMON_SYSTEM_UTILS_H_
#
define
COMMON_SYSTEM_UTILS_H_
#
include
"
common
/
Optional
.
h
"
#
include
"
common
/
angleutils
.
h
"
#
include
<
string
>
namespace
angle
{
std
:
:
string
GetExecutableName
(
)
;
std
:
:
string
GetExecutablePath
(
)
;
std
:
:
string
GetExecutableDirectory
(
)
;
std
:
:
string
GetHelperExecutableDir
(
)
;
const
char
*
GetSharedLibraryExtension
(
)
;
const
char
*
GetExecutableExtension
(
)
;
char
GetPathSeparator
(
)
;
Optional
<
std
:
:
string
>
GetCWD
(
)
;
bool
SetCWD
(
const
char
*
dirName
)
;
bool
SetEnvironmentVar
(
const
char
*
variableName
const
char
*
value
)
;
bool
UnsetEnvironmentVar
(
const
char
*
variableName
)
;
std
:
:
string
GetEnvironmentVar
(
const
char
*
variableName
)
;
std
:
:
string
GetEnvironmentVarOrUnCachedAndroidProperty
(
const
char
*
variableName
const
char
*
propertyName
)
;
std
:
:
string
GetEnvironmentVarOrAndroidProperty
(
const
char
*
variableName
const
char
*
propertyName
)
;
const
char
*
GetPathSeparatorForEnvironmentVar
(
)
;
bool
PrependPathToEnvironmentVar
(
const
char
*
variableName
const
char
*
path
)
;
bool
IsDirectory
(
const
char
*
filename
)
;
double
GetCurrentTime
(
)
;
bool
RunApp
(
const
std
:
:
vector
<
const
char
*
>
&
args
std
:
:
string
*
stdoutOut
std
:
:
string
*
stderrOut
int
*
exitCodeOut
)
;
class
Library
:
angle
:
:
NonCopyable
{
public
:
virtual
~
Library
(
)
{
}
virtual
void
*
getSymbol
(
const
char
*
symbolName
)
=
0
;
virtual
void
*
getNative
(
)
const
=
0
;
template
<
typename
FuncT
>
void
getAs
(
const
char
*
symbolName
FuncT
*
funcOut
)
{
*
funcOut
=
reinterpret_cast
<
FuncT
>
(
getSymbol
(
symbolName
)
)
;
}
}
;
enum
class
SearchType
{
ApplicationDir
SystemDir
}
;
Library
*
OpenSharedLibrary
(
const
char
*
libraryName
SearchType
searchType
)
;
Library
*
OpenSharedLibraryWithExtension
(
const
char
*
libraryName
)
;
bool
IsDebuggerAttached
(
)
;
void
BreakDebugger
(
)
;
}
#
endif
