#
ifndef
COMMON_HASHUTILS_H_
#
define
COMMON_HASHUTILS_H_
#
include
"
common
/
debug
.
h
"
#
include
"
common
/
third_party
/
xxhash
/
xxhash
.
h
"
namespace
angle
{
inline
std
:
:
size_t
ComputeGenericHash
(
const
void
*
key
size_t
keySize
)
{
static
constexpr
unsigned
int
kSeed
=
0xABCDEF98
;
ASSERT
(
keySize
%
4
=
=
0
)
;
#
if
defined
(
ANGLE_IS_64_BIT_CPU
)
return
XXH64
(
key
keySize
kSeed
)
;
#
else
return
XXH32
(
key
keySize
kSeed
)
;
#
endif
}
template
<
typename
T
>
std
:
:
size_t
ComputeGenericHash
(
const
T
&
key
)
{
static_assert
(
sizeof
(
key
)
%
4
=
=
0
"
ComputeGenericHash
requires
aligned
types
"
)
;
return
ComputeGenericHash
(
&
key
sizeof
(
key
)
)
;
}
}
#
endif
