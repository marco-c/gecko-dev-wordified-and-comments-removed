#
ifndef
LIBANGLE_RENDERER_VULKAN_VK_HEADERS_H_
#
define
LIBANGLE_RENDERER_VULKAN_VK_HEADERS_H_
#
if
ANGLE_SHARED_LIBVULKAN
#
include
"
third_party
/
volk
/
volk
.
h
"
#
else
#
include
<
vulkan
/
vulkan
.
h
>
#
endif
#
if
!
defined
(
VK_GOOGLEX_multisampled_render_to_single_sampled
)
#
define
VK_GOOGLEX_multisampled_render_to_single_sampled
1
#
define
VK_GOOGLEX_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION
1
#
define
VK_GOOGLEX_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME
\
"
VK_GOOGLEX_multisampled_render_to_single_sampled
"
#
define
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_GOOGLEX
\
(
(
VkStructureType
)
(
1000376000
)
)
#
define
VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_GOOGLEX
\
(
(
VkStructureType
)
(
1000376001
)
)
typedef
struct
VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesGOOGLEX
{
VkStructureType
sType
;
const
void
*
pNext
;
VkBool32
multisampledRenderToSingleSampled
;
}
VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesGOOGLEX
;
typedef
struct
VkMultisampledRenderToSingleSampledInfoGOOGLEX
{
VkStructureType
sType
;
const
void
*
pNext
;
VkBool32
multisampledRenderToSingleSampledEnable
;
VkSampleCountFlagBits
rasterizationSamples
;
VkResolveModeFlagBits
depthResolveMode
;
VkResolveModeFlagBits
stencilResolveMode
;
}
VkMultisampledRenderToSingleSampledInfoGOOGLEX
;
#
endif
#
if
!
defined
(
ANGLE_SHARED_LIBVULKAN
)
namespace
rx
{
extern
PFN_vkCreateDebugUtilsMessengerEXT
vkCreateDebugUtilsMessengerEXT
;
extern
PFN_vkDestroyDebugUtilsMessengerEXT
vkDestroyDebugUtilsMessengerEXT
;
extern
PFN_vkCmdBeginDebugUtilsLabelEXT
vkCmdBeginDebugUtilsLabelEXT
;
extern
PFN_vkCmdEndDebugUtilsLabelEXT
vkCmdEndDebugUtilsLabelEXT
;
extern
PFN_vkCmdInsertDebugUtilsLabelEXT
vkCmdInsertDebugUtilsLabelEXT
;
extern
PFN_vkSetDebugUtilsObjectNameEXT
vkSetDebugUtilsObjectNameEXT
;
extern
PFN_vkCreateDebugReportCallbackEXT
vkCreateDebugReportCallbackEXT
;
extern
PFN_vkDestroyDebugReportCallbackEXT
vkDestroyDebugReportCallbackEXT
;
extern
PFN_vkGetPhysicalDeviceProperties2KHR
vkGetPhysicalDeviceProperties2KHR
;
extern
PFN_vkGetPhysicalDeviceFeatures2KHR
vkGetPhysicalDeviceFeatures2KHR
;
extern
PFN_vkGetPhysicalDeviceMemoryProperties2KHR
vkGetPhysicalDeviceMemoryProperties2KHR
;
extern
PFN_vkImportSemaphoreFdKHR
vkImportSemaphoreFdKHR
;
extern
PFN_vkGetMemoryHostPointerPropertiesEXT
vkGetMemoryHostPointerPropertiesEXT
;
extern
PFN_vkResetQueryPoolEXT
vkResetQueryPoolEXT
;
extern
PFN_vkCmdBindTransformFeedbackBuffersEXT
vkCmdBindTransformFeedbackBuffersEXT
;
extern
PFN_vkCmdBeginTransformFeedbackEXT
vkCmdBeginTransformFeedbackEXT
;
extern
PFN_vkCmdEndTransformFeedbackEXT
vkCmdEndTransformFeedbackEXT
;
extern
PFN_vkCmdBeginQueryIndexedEXT
vkCmdBeginQueryIndexedEXT
;
extern
PFN_vkCmdEndQueryIndexedEXT
vkCmdEndQueryIndexedEXT
;
extern
PFN_vkCmdDrawIndirectByteCountEXT
vkCmdDrawIndirectByteCountEXT
;
extern
PFN_vkGetBufferMemoryRequirements2KHR
vkGetBufferMemoryRequirements2KHR
;
extern
PFN_vkGetImageMemoryRequirements2KHR
vkGetImageMemoryRequirements2KHR
;
extern
PFN_vkBindBufferMemory2KHR
vkBindBufferMemory2KHR
;
extern
PFN_vkBindImageMemory2KHR
vkBindImageMemory2KHR
;
extern
PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR
vkGetPhysicalDeviceExternalFencePropertiesKHR
;
extern
PFN_vkGetFenceFdKHR
vkGetFenceFdKHR
;
extern
PFN_vkImportFenceFdKHR
vkImportFenceFdKHR
;
extern
PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR
vkGetPhysicalDeviceExternalSemaphorePropertiesKHR
;
extern
PFN_vkCreateSamplerYcbcrConversionKHR
vkCreateSamplerYcbcrConversionKHR
;
extern
PFN_vkDestroySamplerYcbcrConversionKHR
vkDestroySamplerYcbcrConversionKHR
;
extern
PFN_vkCreateRenderPass2KHR
vkCreateRenderPass2KHR
;
#
if
defined
(
ANGLE_PLATFORM_FUCHSIA
)
extern
PFN_vkCreateImagePipeSurfaceFUCHSIA
vkCreateImagePipeSurfaceFUCHSIA
;
#
endif
#
if
defined
(
ANGLE_PLATFORM_ANDROID
)
extern
PFN_vkGetAndroidHardwareBufferPropertiesANDROID
vkGetAndroidHardwareBufferPropertiesANDROID
;
extern
PFN_vkGetMemoryAndroidHardwareBufferANDROID
vkGetMemoryAndroidHardwareBufferANDROID
;
#
endif
#
if
defined
(
ANGLE_PLATFORM_GGP
)
extern
PFN_vkCreateStreamDescriptorSurfaceGGP
vkCreateStreamDescriptorSurfaceGGP
;
#
endif
extern
PFN_vkGetSwapchainStatusKHR
vkGetSwapchainStatusKHR
;
extern
PFN_vkCmdBindVertexBuffers2EXT
vkCmdBindVertexBuffers2EXT
;
extern
PFN_vkCmdSetCullModeEXT
vkCmdSetCullModeEXT
;
extern
PFN_vkCmdSetDepthBoundsTestEnableEXT
vkCmdSetDepthBoundsTestEnableEXT
;
extern
PFN_vkCmdSetDepthCompareOpEXT
vkCmdSetDepthCompareOpEXT
;
extern
PFN_vkCmdSetDepthTestEnableEXT
vkCmdSetDepthTestEnableEXT
;
extern
PFN_vkCmdSetDepthWriteEnableEXT
vkCmdSetDepthWriteEnableEXT
;
extern
PFN_vkCmdSetFrontFaceEXT
vkCmdSetFrontFaceEXT
;
extern
PFN_vkCmdSetPrimitiveTopologyEXT
vkCmdSetPrimitiveTopologyEXT
;
extern
PFN_vkCmdSetScissorWithCountEXT
vkCmdSetScissorWithCountEXT
;
extern
PFN_vkCmdSetStencilOpEXT
vkCmdSetStencilOpEXT
;
extern
PFN_vkCmdSetStencilTestEnableEXT
vkCmdSetStencilTestEnableEXT
;
extern
PFN_vkCmdSetViewportWithCountEXT
vkCmdSetViewportWithCountEXT
;
extern
PFN_vkCmdSetDepthBiasEnableEXT
vkCmdSetDepthBiasEnableEXT
;
extern
PFN_vkCmdSetLogicOpEXT
vkCmdSetLogicOpEXT
;
extern
PFN_vkCmdSetPatchControlPointsEXT
vkCmdSetPatchControlPointsEXT
;
extern
PFN_vkCmdSetPrimitiveRestartEnableEXT
vkCmdSetPrimitiveRestartEnableEXT
;
extern
PFN_vkCmdSetRasterizerDiscardEnableEXT
vkCmdSetRasterizerDiscardEnableEXT
;
extern
PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR
vkGetPhysicalDeviceFragmentShadingRatesKHR
;
extern
PFN_vkCmdSetFragmentShadingRateKHR
vkCmdSetFragmentShadingRateKHR
;
extern
PFN_vkGetPastPresentationTimingGOOGLE
vkGetPastPresentationTimingGOOGLE
;
}
#
endif
#
endif
