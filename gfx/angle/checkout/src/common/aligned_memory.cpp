#
include
"
common
/
aligned_memory
.
h
"
#
include
"
common
/
debug
.
h
"
#
if
defined
(
COMPILER_MSVC
)
#
include
<
malloc
.
h
>
#
else
#
include
<
stdlib
.
h
>
#
endif
namespace
angle
{
void
*
AlignedAlloc
(
size_t
size
size_t
alignment
)
{
ASSERT
(
size
>
0
)
;
ASSERT
(
(
alignment
&
(
alignment
-
1
)
)
=
=
0
)
;
ASSERT
(
(
alignment
%
sizeof
(
void
*
)
)
=
=
0
)
;
void
*
ptr
=
nullptr
;
#
if
defined
(
ANGLE_PLATFORM_WINDOWS
)
ptr
=
_aligned_malloc
(
size
alignment
)
;
#
elif
defined
(
ANGLE_PLATFORM_ANDROID
)
ptr
=
memalign
(
alignment
size
)
;
#
else
if
(
posix_memalign
(
&
ptr
alignment
size
)
)
ptr
=
nullptr
;
#
endif
if
(
!
ptr
)
{
ERR
(
)
<
<
"
If
you
crashed
here
your
aligned
allocation
is
incorrect
:
"
<
<
"
size
=
"
<
<
size
<
<
"
alignment
=
"
<
<
alignment
;
ASSERT
(
false
)
;
}
ASSERT
(
(
reinterpret_cast
<
uintptr_t
>
(
ptr
)
&
(
alignment
-
1
)
)
=
=
0
)
;
return
ptr
;
}
void
AlignedFree
(
void
*
ptr
)
{
#
if
defined
(
_MSC_VER
)
_aligned_free
(
ptr
)
;
#
else
free
(
ptr
)
;
#
endif
}
}
