#
include
"
common
/
system_utils
.
h
"
#
include
<
stdlib
.
h
>
#
if
defined
(
ANGLE_PLATFORM_ANDROID
)
#
include
<
sys
/
system_properties
.
h
>
#
endif
namespace
angle
{
std
:
:
string
GetExecutableName
(
)
{
#
if
defined
(
ANGLE_PLATFORM_ANDROID
)
&
&
__ANDROID_API__
>
=
21
const
char
*
executableName
=
getprogname
(
)
;
return
(
executableName
)
?
std
:
:
string
(
executableName
)
:
"
ANGLE
"
;
#
else
std
:
:
string
executableName
=
GetExecutablePath
(
)
;
size_t
lastPathSepLoc
=
executableName
.
find_last_of
(
GetPathSeparator
(
)
)
;
return
(
lastPathSepLoc
>
0
?
executableName
.
substr
(
lastPathSepLoc
+
1
executableName
.
length
(
)
)
:
"
ANGLE
"
)
;
#
endif
}
std
:
:
string
GetEnvironmentVarOrAndroidProperty
(
const
char
*
variableName
const
char
*
propertyName
)
{
#
if
defined
(
ANGLE_PLATFORM_ANDROID
)
&
&
__ANDROID_API__
>
=
21
const
char
*
variableValue
=
getenv
(
variableName
)
;
if
(
variableValue
!
=
nullptr
)
{
std
:
:
string
value
(
variableValue
)
;
return
value
;
}
#
endif
return
GetEnvironmentVarOrUnCachedAndroidProperty
(
variableName
propertyName
)
;
}
std
:
:
string
GetEnvironmentVarOrUnCachedAndroidProperty
(
const
char
*
variableName
const
char
*
propertyName
)
{
#
if
defined
(
ANGLE_PLATFORM_ANDROID
)
&
&
__ANDROID_API__
>
=
26
std
:
:
string
propertyValue
;
const
prop_info
*
propertyInfo
=
__system_property_find
(
propertyName
)
;
if
(
propertyInfo
!
=
nullptr
)
{
__system_property_read_callback
(
propertyInfo
[
]
(
void
*
cookie
const
char
*
const
char
*
value
unsigned
)
{
auto
propertyValue
=
reinterpret_cast
<
std
:
:
string
*
>
(
cookie
)
;
*
propertyValue
=
value
;
}
&
propertyValue
)
;
}
SetEnvironmentVar
(
variableName
propertyValue
.
c_str
(
)
)
;
return
propertyValue
;
#
endif
return
GetEnvironmentVar
(
variableName
)
;
}
bool
PrependPathToEnvironmentVar
(
const
char
*
variableName
const
char
*
path
)
{
std
:
:
string
oldValue
=
GetEnvironmentVar
(
variableName
)
;
const
char
*
newValue
=
nullptr
;
std
:
:
string
buf
;
if
(
oldValue
.
empty
(
)
)
{
newValue
=
path
;
}
else
{
buf
=
path
;
buf
+
=
GetPathSeparatorForEnvironmentVar
(
)
;
buf
+
=
oldValue
;
newValue
=
buf
.
c_str
(
)
;
}
return
SetEnvironmentVar
(
variableName
newValue
)
;
}
}
