#
include
"
common
/
system_utils
.
h
"
#
include
<
stdlib
.
h
>
namespace
angle
{
std
:
:
string
GetExecutableName
(
)
{
#
if
defined
(
ANGLE_PLATFORM_ANDROID
)
&
&
__ANDROID_API__
>
=
21
const
char
*
executableName
=
getprogname
(
)
;
return
(
executableName
)
?
std
:
:
string
(
executableName
)
:
"
ANGLE
"
;
#
else
std
:
:
string
executableName
=
GetExecutablePath
(
)
;
size_t
lastPathSepLoc
=
executableName
.
find_last_of
(
GetPathSeparator
(
)
)
;
return
(
lastPathSepLoc
>
0
?
executableName
.
substr
(
lastPathSepLoc
+
1
executableName
.
length
(
)
)
:
"
ANGLE
"
)
;
#
endif
}
std
:
:
string
GetEnvironmentVarOrAndroidProperty
(
const
char
*
variableName
const
char
*
propertyName
)
{
#
if
defined
(
ANGLE_PLATFORM_ANDROID
)
&
&
__ANDROID_API__
>
=
21
const
char
*
variableValue
=
getenv
(
variableName
)
;
if
(
variableValue
!
=
nullptr
)
{
std
:
:
string
value
(
variableValue
)
;
return
value
;
}
#
endif
return
GetEnvironmentVarOrUnCachedAndroidProperty
(
variableName
propertyName
)
;
}
std
:
:
string
GetEnvironmentVarOrUnCachedAndroidProperty
(
const
char
*
variableName
const
char
*
propertyName
)
{
#
if
defined
(
ANGLE_PLATFORM_ANDROID
)
&
&
__ANDROID_API__
>
=
21
std
:
:
string
sanitizedPropertyName
=
propertyName
;
sanitizedPropertyName
.
erase
(
std
:
:
remove
(
sanitizedPropertyName
.
begin
(
)
sanitizedPropertyName
.
end
(
)
'
\
'
'
)
sanitizedPropertyName
.
end
(
)
)
;
std
:
:
string
command
(
"
getprop
'
"
)
;
command
+
=
sanitizedPropertyName
;
command
+
=
"
'
"
;
constexpr
int
kStreamSize
=
64
;
char
stream
[
kStreamSize
]
=
{
}
;
FILE
*
pipe
=
popen
(
command
.
c_str
(
)
"
r
"
)
;
if
(
pipe
!
=
nullptr
)
{
fgets
(
stream
kStreamSize
pipe
)
;
pclose
(
pipe
)
;
}
std
:
:
string
value
(
stream
)
;
value
.
erase
(
value
.
find_last_not_of
(
"
\
n
\
r
\
t
"
)
+
1
)
;
SetEnvironmentVar
(
variableName
value
.
c_str
(
)
)
;
return
value
;
#
endif
return
GetEnvironmentVar
(
variableName
)
;
}
bool
PrependPathToEnvironmentVar
(
const
char
*
variableName
const
char
*
path
)
{
std
:
:
string
oldValue
=
GetEnvironmentVar
(
variableName
)
;
const
char
*
newValue
=
nullptr
;
std
:
:
string
buf
;
if
(
oldValue
.
empty
(
)
)
{
newValue
=
path
;
}
else
{
buf
=
path
;
buf
+
=
GetPathSeparatorForEnvironmentVar
(
)
;
buf
+
=
oldValue
;
newValue
=
buf
.
c_str
(
)
;
}
return
SetEnvironmentVar
(
variableName
newValue
)
;
}
}
