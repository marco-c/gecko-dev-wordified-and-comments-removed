#
ifndef
COMMON_SPIRV_TYPES_H_
#
define
COMMON_SPIRV_TYPES_H_
#
include
"
common
/
FastVector
.
h
"
#
include
<
vector
>
namespace
angle
{
namespace
spirv
{
template
<
typename
Helper
>
class
BoxedUint32
{
public
:
BoxedUint32
(
)
:
mValue
{
0
}
{
}
explicit
BoxedUint32
(
uint32_t
value
)
:
mValue
{
value
}
{
}
template
<
typename
T
>
T
as
(
)
const
{
return
T
{
mValue
}
;
}
BoxedUint32
(
const
BoxedUint32
&
other
)
=
default
;
BoxedUint32
&
operator
=
(
const
BoxedUint32
&
other
)
=
default
;
operator
uint32_t
(
)
const
{
return
mValue
.
value
;
}
bool
operator
=
=
(
const
BoxedUint32
&
other
)
const
{
return
mValue
.
value
=
=
other
.
mValue
.
value
;
}
bool
valid
(
)
const
{
return
static_cast
<
bool
>
(
mValue
.
value
)
;
}
private
:
Helper
mValue
;
}
;
struct
IdRefHelper
{
uint32_t
value
;
}
;
struct
LiteralIntegerHelper
{
uint32_t
value
;
}
;
using
IdRef
=
BoxedUint32
<
IdRefHelper
>
;
template
<
>
inline
BoxedUint32
<
IdRefHelper
>
:
:
operator
uint32_t
(
)
const
{
ASSERT
(
valid
(
)
)
;
return
mValue
.
value
;
}
using
IdResult
=
IdRef
;
using
IdResultType
=
IdRef
;
using
IdMemorySemantics
=
IdRef
;
using
IdScope
=
IdRef
;
using
LiteralInteger
=
BoxedUint32
<
LiteralIntegerHelper
>
;
using
LiteralString
=
const
char
*
;
using
LiteralContextDependentNumber
=
LiteralInteger
;
using
LiteralExtInstInteger
=
LiteralInteger
;
struct
PairLiteralIntegerIdRef
{
LiteralInteger
literal
;
IdRef
id
;
}
;
struct
PairIdRefLiteralInteger
{
IdRef
id
;
LiteralInteger
literal
;
}
;
struct
PairIdRefIdRef
{
IdRef
id1
;
IdRef
id2
;
}
;
constexpr
size_t
kFastVectorSize
=
8
;
template
<
typename
T
>
using
FastVectorHelper
=
angle
:
:
FastVector
<
T
kFastVectorSize
>
;
using
IdRefList
=
FastVectorHelper
<
IdRef
>
;
using
LiteralIntegerList
=
FastVectorHelper
<
LiteralInteger
>
;
using
PairLiteralIntegerIdRefList
=
FastVectorHelper
<
PairLiteralIntegerIdRef
>
;
using
PairIdRefLiteralIntegerList
=
FastVectorHelper
<
PairIdRefLiteralInteger
>
;
using
PairIdRefIdRefList
=
FastVectorHelper
<
PairIdRefIdRef
>
;
constexpr
uint32_t
kMinValidId
=
1
;
using
Blob
=
std
:
:
vector
<
uint32_t
>
;
bool
Validate
(
const
Blob
&
blob
)
;
}
}
#
endif
