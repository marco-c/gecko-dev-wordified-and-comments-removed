#
include
"
common
/
android_util
.
h
"
#
include
<
cstdint
>
typedef
struct
native_handle
{
int
version
;
int
numFds
;
int
numInts
;
int
data
[
0
]
;
}
native_handle_t
;
typedef
const
native_handle_t
*
buffer_handle_t
;
typedef
struct
android_native_base_t
{
int
magic
;
int
version
;
void
*
reserved
[
4
]
;
void
(
*
incRef
)
(
struct
android_native_base_t
*
base
)
;
void
(
*
decRef
)
(
struct
android_native_base_t
*
base
)
;
}
android_native_base_t
;
typedef
struct
ANativeWindowBuffer
{
struct
android_native_base_t
common
;
int
width
;
int
height
;
int
stride
;
int
format
;
int
usage_deprecated
;
uintptr_t
layerCount
;
void
*
reserved
[
1
]
;
const
native_handle_t
*
handle
;
uint64_t
usage
;
void
*
reserved_proc
[
8
-
(
sizeof
(
uint64_t
)
/
sizeof
(
void
*
)
)
]
;
}
ANativeWindowBuffer_t
;
enum
{
AHARDWAREBUFFER_FORMAT_R8G8B8A8_UNORM
=
1
AHARDWAREBUFFER_FORMAT_R8G8B8X8_UNORM
=
2
AHARDWAREBUFFER_FORMAT_R8G8B8_UNORM
=
3
AHARDWAREBUFFER_FORMAT_R5G6B5_UNORM
=
4
AHARDWAREBUFFER_FORMAT_B8G8R8A8_UNORM
=
5
AHARDWAREBUFFER_FORMAT_B5G5R5A1_UNORM
=
6
AHARDWAREBUFFER_FORMAT_B4G4R4A4_UNORM
=
7
AHARDWAREBUFFER_FORMAT_R16G16B16A16_FLOAT
=
0x16
AHARDWAREBUFFER_FORMAT_R10G10B10A2_UNORM
=
0x2b
AHARDWAREBUFFER_FORMAT_BLOB
=
0x21
AHARDWAREBUFFER_FORMAT_D16_UNORM
=
0x30
AHARDWAREBUFFER_FORMAT_D24_UNORM
=
0x31
AHARDWAREBUFFER_FORMAT_D24_UNORM_S8_UINT
=
0x32
AHARDWAREBUFFER_FORMAT_D32_FLOAT
=
0x33
AHARDWAREBUFFER_FORMAT_D32_FLOAT_S8_UINT
=
0x34
AHARDWAREBUFFER_FORMAT_S8_UINT
=
0x35
}
;
namespace
{
constexpr
int
kAHardwareBufferToANativeWindowBufferOffset
=
static_cast
<
int
>
(
sizeof
(
void
*
)
)
*
2
;
template
<
typename
T1
typename
T2
>
T1
*
offsetPointer
(
T2
*
ptr
int
bytes
)
{
return
reinterpret_cast
<
T1
*
>
(
reinterpret_cast
<
intptr_t
>
(
ptr
)
+
bytes
)
;
}
}
namespace
angle
{
namespace
android
{
ANativeWindowBuffer
*
ClientBufferToANativeWindowBuffer
(
EGLClientBuffer
clientBuffer
)
{
return
reinterpret_cast
<
ANativeWindowBuffer
*
>
(
clientBuffer
)
;
}
void
GetANativeWindowBufferProperties
(
const
ANativeWindowBuffer
*
buffer
int
*
width
int
*
height
int
*
depth
int
*
pixelFormat
)
{
*
width
=
buffer
-
>
width
;
*
height
=
buffer
-
>
height
;
*
depth
=
static_cast
<
int
>
(
buffer
-
>
layerCount
)
;
*
height
=
buffer
-
>
height
;
*
pixelFormat
=
buffer
-
>
format
;
}
GLenum
NativePixelFormatToGLInternalFormat
(
int
pixelFormat
)
{
switch
(
pixelFormat
)
{
case
AHARDWAREBUFFER_FORMAT_R8G8B8A8_UNORM
:
return
GL_RGBA8
;
case
AHARDWAREBUFFER_FORMAT_R8G8B8X8_UNORM
:
return
GL_RGB8
;
case
AHARDWAREBUFFER_FORMAT_R8G8B8_UNORM
:
return
GL_RGB8
;
case
AHARDWAREBUFFER_FORMAT_R5G6B5_UNORM
:
return
GL_RGB565
;
case
AHARDWAREBUFFER_FORMAT_B8G8R8A8_UNORM
:
return
GL_BGRA8_EXT
;
case
AHARDWAREBUFFER_FORMAT_B5G5R5A1_UNORM
:
return
GL_RGB5_A1
;
case
AHARDWAREBUFFER_FORMAT_B4G4R4A4_UNORM
:
return
GL_RGBA4
;
case
AHARDWAREBUFFER_FORMAT_R16G16B16A16_FLOAT
:
return
GL_RGBA16F
;
case
AHARDWAREBUFFER_FORMAT_R10G10B10A2_UNORM
:
return
GL_RGB10_A2
;
case
AHARDWAREBUFFER_FORMAT_BLOB
:
return
GL_NONE
;
case
AHARDWAREBUFFER_FORMAT_D16_UNORM
:
return
GL_DEPTH_COMPONENT16
;
case
AHARDWAREBUFFER_FORMAT_D24_UNORM
:
return
GL_DEPTH_COMPONENT24
;
case
AHARDWAREBUFFER_FORMAT_D24_UNORM_S8_UINT
:
return
GL_DEPTH24_STENCIL8
;
case
AHARDWAREBUFFER_FORMAT_D32_FLOAT
:
return
GL_DEPTH_COMPONENT32F
;
case
AHARDWAREBUFFER_FORMAT_D32_FLOAT_S8_UINT
:
return
GL_DEPTH32F_STENCIL8
;
case
AHARDWAREBUFFER_FORMAT_S8_UINT
:
return
GL_STENCIL_INDEX8
;
default
:
return
GL_NONE
;
}
}
AHardwareBuffer
*
ANativeWindowBufferToAHardwareBuffer
(
ANativeWindowBuffer
*
windowBuffer
)
{
return
offsetPointer
<
AHardwareBuffer
>
(
windowBuffer
-
kAHardwareBufferToANativeWindowBufferOffset
)
;
}
EGLClientBuffer
AHardwareBufferToClientBuffer
(
const
AHardwareBuffer
*
hardwareBuffer
)
{
return
offsetPointer
<
EGLClientBuffer
>
(
hardwareBuffer
kAHardwareBufferToANativeWindowBufferOffset
)
;
}
}
}
