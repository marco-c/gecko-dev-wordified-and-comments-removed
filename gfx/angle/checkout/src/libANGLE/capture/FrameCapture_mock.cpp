#
include
"
libANGLE
/
capture
/
FrameCapture
.
h
"
#
if
ANGLE_CAPTURE_ENABLED
#
error
Frame
capture
must
be
disabled
to
include
this
file
.
#
endif
namespace
angle
{
CallCapture
:
:
~
CallCapture
(
)
{
}
ParamBuffer
:
:
~
ParamBuffer
(
)
{
}
ParamCapture
:
:
~
ParamCapture
(
)
{
}
ResourceTracker
:
:
ResourceTracker
(
)
{
}
ResourceTracker
:
:
~
ResourceTracker
(
)
{
}
TrackedResource
:
:
TrackedResource
(
)
{
}
TrackedResource
:
:
~
TrackedResource
(
)
{
}
StateResetHelper
:
:
StateResetHelper
(
)
{
}
StateResetHelper
:
:
~
StateResetHelper
(
)
{
}
DataTracker
:
:
DataTracker
(
)
{
}
DataTracker
:
:
~
DataTracker
(
)
{
}
DataCounters
:
:
DataCounters
(
)
{
}
DataCounters
:
:
~
DataCounters
(
)
{
}
StringCounters
:
:
StringCounters
(
)
{
}
StringCounters
:
:
~
StringCounters
(
)
{
}
ReplayWriter
:
:
ReplayWriter
(
)
{
}
ReplayWriter
:
:
~
ReplayWriter
(
)
{
}
FrameCapture
:
:
FrameCapture
(
)
{
}
FrameCapture
:
:
~
FrameCapture
(
)
{
}
FrameCaptureShared
:
:
FrameCaptureShared
(
)
:
mEnabled
(
false
)
{
}
FrameCaptureShared
:
:
~
FrameCaptureShared
(
)
{
}
void
FrameCaptureShared
:
:
onEndFrame
(
const
gl
:
:
Context
*
context
)
{
}
void
FrameCaptureShared
:
:
onMakeCurrent
(
const
gl
:
:
Context
*
context
const
egl
:
:
Surface
*
drawSurface
)
{
}
void
FrameCaptureShared
:
:
onDestroyContext
(
const
gl
:
:
Context
*
context
)
{
}
void
FrameCaptureShared
:
:
replay
(
gl
:
:
Context
*
context
)
{
}
const
ProgramSources
&
FrameCaptureShared
:
:
getProgramSources
(
gl
:
:
ShaderProgramID
id
)
const
{
const
auto
&
foundSources
=
mCachedProgramSources
.
find
(
id
)
;
return
foundSources
-
>
second
;
}
void
FrameCaptureShared
:
:
setProgramSources
(
gl
:
:
ShaderProgramID
id
ProgramSources
sources
)
{
}
CoherentBufferTracker
:
:
CoherentBufferTracker
(
)
{
}
CoherentBufferTracker
:
:
~
CoherentBufferTracker
(
)
{
}
}
