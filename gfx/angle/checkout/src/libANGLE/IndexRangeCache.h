#
ifndef
LIBANGLE_INDEXRANGECACHE_H_
#
define
LIBANGLE_INDEXRANGECACHE_H_
#
include
"
common
/
angleutils
.
h
"
#
include
"
common
/
mathutil
.
h
"
#
include
"
angle_gl
.
h
"
#
include
<
map
>
namespace
gl
{
class
IndexRangeCache
{
public
:
IndexRangeCache
(
)
;
~
IndexRangeCache
(
)
;
void
addRange
(
GLenum
type
size_t
offset
size_t
count
bool
primitiveRestartEnabled
const
IndexRange
&
range
)
;
bool
findRange
(
GLenum
type
size_t
offset
size_t
count
bool
primitiveRestartEnabled
IndexRange
*
outRange
)
const
;
void
invalidateRange
(
size_t
offset
size_t
size
)
;
void
clear
(
)
;
private
:
struct
IndexRangeKey
{
IndexRangeKey
(
)
;
IndexRangeKey
(
GLenum
type
size_t
offset
size_t
count
bool
primitiveRestart
)
;
bool
operator
<
(
const
IndexRangeKey
&
rhs
)
const
;
GLenum
type
;
size_t
offset
;
size_t
count
;
bool
primitiveRestartEnabled
;
}
;
typedef
std
:
:
map
<
IndexRangeKey
IndexRange
>
IndexRangeMap
;
IndexRangeMap
mIndexRangeCache
;
}
;
}
#
endif
