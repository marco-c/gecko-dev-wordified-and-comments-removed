#
include
"
libANGLE
/
Program
.
h
"
#
include
<
algorithm
>
#
include
<
utility
>
#
include
"
common
/
angle_version_info
.
h
"
#
include
"
common
/
bitset_utils
.
h
"
#
include
"
common
/
debug
.
h
"
#
include
"
common
/
platform
.
h
"
#
include
"
common
/
string_utils
.
h
"
#
include
"
common
/
utilities
.
h
"
#
include
"
compiler
/
translator
/
blocklayout
.
h
"
#
include
"
libANGLE
/
Context
.
h
"
#
include
"
libANGLE
/
ErrorStrings
.
h
"
#
include
"
libANGLE
/
MemoryProgramCache
.
h
"
#
include
"
libANGLE
/
ProgramLinkedResources
.
h
"
#
include
"
libANGLE
/
ResourceManager
.
h
"
#
include
"
libANGLE
/
Uniform
.
h
"
#
include
"
libANGLE
/
VaryingPacking
.
h
"
#
include
"
libANGLE
/
Version
.
h
"
#
include
"
libANGLE
/
capture
/
FrameCapture
.
h
"
#
include
"
libANGLE
/
features
.
h
"
#
include
"
libANGLE
/
histogram_macros
.
h
"
#
include
"
libANGLE
/
queryconversions
.
h
"
#
include
"
libANGLE
/
renderer
/
GLImplFactory
.
h
"
#
include
"
libANGLE
/
renderer
/
ProgramImpl
.
h
"
#
include
"
platform
/
FrontendFeatures_autogen
.
h
"
#
include
"
platform
/
PlatformMethods
.
h
"
namespace
gl
{
namespace
{
template
<
typename
DestT
typename
SrcT
>
DestT
UniformStateQueryCast
(
SrcT
value
)
;
template
<
>
GLint
UniformStateQueryCast
(
GLfloat
value
)
{
return
clampCast
<
GLint
>
(
roundf
(
value
)
)
;
}
template
<
>
GLuint
UniformStateQueryCast
(
GLfloat
value
)
{
return
clampCast
<
GLuint
>
(
roundf
(
value
)
)
;
}
template
<
>
GLint
UniformStateQueryCast
(
GLuint
value
)
{
return
clampCast
<
GLint
>
(
value
)
;
}
template
<
>
GLuint
UniformStateQueryCast
(
GLint
value
)
{
return
clampCast
<
GLuint
>
(
value
)
;
}
template
<
>
GLfloat
UniformStateQueryCast
(
GLboolean
value
)
{
return
(
ConvertToBool
(
value
)
?
1
.
0f
:
0
.
0f
)
;
}
template
<
>
GLint
UniformStateQueryCast
(
GLboolean
value
)
{
return
(
ConvertToBool
(
value
)
?
1
:
0
)
;
}
template
<
>
GLuint
UniformStateQueryCast
(
GLboolean
value
)
{
return
(
ConvertToBool
(
value
)
?
1u
:
0u
)
;
}
template
<
typename
DestT
typename
SrcT
>
DestT
UniformStateQueryCast
(
SrcT
value
)
{
return
static_cast
<
DestT
>
(
value
)
;
}
template
<
typename
SrcT
typename
DestT
>
void
UniformStateQueryCastLoop
(
DestT
*
dataOut
const
uint8_t
*
srcPointer
int
components
)
{
for
(
int
comp
=
0
;
comp
<
components
;
+
+
comp
)
{
size_t
offset
=
comp
*
4
;
const
SrcT
*
typedSrcPointer
=
reinterpret_cast
<
const
SrcT
*
>
(
&
srcPointer
[
offset
]
)
;
dataOut
[
comp
]
=
UniformStateQueryCast
<
DestT
>
(
*
typedSrcPointer
)
;
}
}
template
<
typename
VarT
>
GLuint
GetResourceIndexFromName
(
const
std
:
:
vector
<
VarT
>
&
list
const
std
:
:
string
&
name
)
{
std
:
:
string
nameAsArrayName
=
name
+
"
[
0
]
"
;
for
(
size_t
index
=
0
;
index
<
list
.
size
(
)
;
index
+
+
)
{
const
VarT
&
resource
=
list
[
index
]
;
if
(
resource
.
name
=
=
name
|
|
(
resource
.
isArray
(
)
&
&
resource
.
name
=
=
nameAsArrayName
)
)
{
return
static_cast
<
GLuint
>
(
index
)
;
}
}
return
GL_INVALID_INDEX
;
}
GLint
GetVariableLocation
(
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
list
const
std
:
:
vector
<
VariableLocation
>
&
locationList
const
std
:
:
string
&
name
)
{
size_t
nameLengthWithoutArrayIndex
;
unsigned
int
arrayIndex
=
ParseArrayIndex
(
name
&
nameLengthWithoutArrayIndex
)
;
for
(
size_t
location
=
0u
;
location
<
locationList
.
size
(
)
;
+
+
location
)
{
const
VariableLocation
&
variableLocation
=
locationList
[
location
]
;
if
(
!
variableLocation
.
used
(
)
)
{
continue
;
}
const
sh
:
:
ShaderVariable
&
variable
=
list
[
variableLocation
.
index
]
;
if
(
(
variable
.
name
=
=
name
)
&
&
(
variableLocation
.
arrayIndex
=
=
0
)
)
{
return
static_cast
<
GLint
>
(
location
)
;
}
if
(
variable
.
isArray
(
)
&
&
variableLocation
.
arrayIndex
=
=
arrayIndex
&
&
angle
:
:
BeginsWith
(
variable
.
name
name
nameLengthWithoutArrayIndex
)
)
{
return
static_cast
<
GLint
>
(
location
)
;
}
}
return
-
1
;
}
GLint
GetVariableLocation
(
const
std
:
:
vector
<
LinkedUniform
>
&
list
const
std
:
:
vector
<
VariableLocation
>
&
locationList
const
std
:
:
string
&
name
)
{
size_t
nameLengthWithoutArrayIndex
;
unsigned
int
arrayIndex
=
ParseArrayIndex
(
name
&
nameLengthWithoutArrayIndex
)
;
for
(
size_t
location
=
0u
;
location
<
locationList
.
size
(
)
;
+
+
location
)
{
const
VariableLocation
&
variableLocation
=
locationList
[
location
]
;
if
(
!
variableLocation
.
used
(
)
)
{
continue
;
}
const
LinkedUniform
&
variable
=
list
[
variableLocation
.
index
]
;
if
(
angle
:
:
BeginsWith
(
variable
.
name
name
)
&
&
(
variableLocation
.
arrayIndex
=
=
0
)
)
{
if
(
name
.
length
(
)
=
=
variable
.
name
.
length
(
)
)
{
ASSERT
(
name
=
=
variable
.
name
)
;
return
static_cast
<
GLint
>
(
location
)
;
}
if
(
name
.
length
(
)
+
3u
=
=
variable
.
name
.
length
(
)
&
&
variable
.
isArray
(
)
)
{
ASSERT
(
name
+
"
[
0
]
"
=
=
variable
.
name
)
;
return
static_cast
<
GLint
>
(
location
)
;
}
}
if
(
variable
.
isArray
(
)
&
&
variableLocation
.
arrayIndex
=
=
arrayIndex
&
&
nameLengthWithoutArrayIndex
+
3u
=
=
variable
.
name
.
length
(
)
&
&
angle
:
:
BeginsWith
(
variable
.
name
name
nameLengthWithoutArrayIndex
)
)
{
ASSERT
(
name
.
substr
(
0u
nameLengthWithoutArrayIndex
)
+
"
[
0
]
"
=
=
variable
.
name
)
;
return
static_cast
<
GLint
>
(
location
)
;
}
}
return
-
1
;
}
void
CopyStringToBuffer
(
GLchar
*
buffer
const
std
:
:
string
&
string
GLsizei
bufSize
GLsizei
*
lengthOut
)
{
ASSERT
(
bufSize
>
0
)
;
size_t
length
=
std
:
:
min
<
size_t
>
(
bufSize
-
1
string
.
length
(
)
)
;
memcpy
(
buffer
string
.
c_str
(
)
length
)
;
buffer
[
length
]
=
'
\
0
'
;
if
(
lengthOut
)
{
*
lengthOut
=
static_cast
<
GLsizei
>
(
length
)
;
}
}
GLuint
GetInterfaceBlockIndex
(
const
std
:
:
vector
<
InterfaceBlock
>
&
list
const
std
:
:
string
&
name
)
{
std
:
:
vector
<
unsigned
int
>
subscripts
;
std
:
:
string
baseName
=
ParseResourceName
(
name
&
subscripts
)
;
unsigned
int
numBlocks
=
static_cast
<
unsigned
int
>
(
list
.
size
(
)
)
;
for
(
unsigned
int
blockIndex
=
0
;
blockIndex
<
numBlocks
;
blockIndex
+
+
)
{
const
auto
&
block
=
list
[
blockIndex
]
;
if
(
block
.
name
=
=
baseName
)
{
const
bool
arrayElementZero
=
(
subscripts
.
empty
(
)
&
&
(
!
block
.
isArray
|
|
block
.
arrayElement
=
=
0
)
)
;
const
bool
arrayElementMatches
=
(
subscripts
.
size
(
)
=
=
1
&
&
subscripts
[
0
]
=
=
block
.
arrayElement
)
;
if
(
arrayElementMatches
|
|
arrayElementZero
)
{
return
blockIndex
;
}
}
}
return
GL_INVALID_INDEX
;
}
void
GetInterfaceBlockName
(
const
UniformBlockIndex
index
const
std
:
:
vector
<
InterfaceBlock
>
&
list
GLsizei
bufSize
GLsizei
*
length
GLchar
*
name
)
{
ASSERT
(
index
.
value
<
list
.
size
(
)
)
;
const
auto
&
block
=
list
[
index
.
value
]
;
if
(
bufSize
>
0
)
{
std
:
:
string
blockName
=
block
.
name
;
if
(
block
.
isArray
)
{
blockName
+
=
ArrayString
(
block
.
arrayElement
)
;
}
CopyStringToBuffer
(
name
blockName
bufSize
length
)
;
}
}
void
InitUniformBlockLinker
(
const
Context
*
context
const
ProgramState
&
state
UniformBlockLinker
*
blockLinker
)
{
for
(
ShaderType
shaderType
:
AllShaderTypes
(
)
)
{
Shader
*
shader
=
state
.
getAttachedShader
(
shaderType
)
;
if
(
shader
)
{
blockLinker
-
>
addShaderBlocks
(
shaderType
&
shader
-
>
getUniformBlocks
(
context
)
)
;
}
}
}
void
InitShaderStorageBlockLinker
(
const
Context
*
context
const
ProgramState
&
state
ShaderStorageBlockLinker
*
blockLinker
)
{
for
(
ShaderType
shaderType
:
AllShaderTypes
(
)
)
{
Shader
*
shader
=
state
.
getAttachedShader
(
shaderType
)
;
if
(
shader
!
=
nullptr
)
{
blockLinker
-
>
addShaderBlocks
(
shaderType
&
shader
-
>
getShaderStorageBlocks
(
context
)
)
;
}
}
}
}
const
char
*
GetLinkMismatchErrorString
(
LinkMismatchError
linkError
)
{
switch
(
linkError
)
{
case
LinkMismatchError
:
:
TYPE_MISMATCH
:
return
"
Type
"
;
case
LinkMismatchError
:
:
ARRAYNESS_MISMATCH
:
return
"
Array
-
ness
"
;
case
LinkMismatchError
:
:
ARRAY_SIZE_MISMATCH
:
return
"
Array
size
"
;
case
LinkMismatchError
:
:
PRECISION_MISMATCH
:
return
"
Precision
"
;
case
LinkMismatchError
:
:
STRUCT_NAME_MISMATCH
:
return
"
Structure
name
"
;
case
LinkMismatchError
:
:
FIELD_NUMBER_MISMATCH
:
return
"
Field
number
"
;
case
LinkMismatchError
:
:
FIELD_NAME_MISMATCH
:
return
"
Field
name
"
;
case
LinkMismatchError
:
:
INTERPOLATION_TYPE_MISMATCH
:
return
"
Interpolation
type
"
;
case
LinkMismatchError
:
:
INVARIANCE_MISMATCH
:
return
"
Invariance
"
;
case
LinkMismatchError
:
:
BINDING_MISMATCH
:
return
"
Binding
layout
qualifier
"
;
case
LinkMismatchError
:
:
LOCATION_MISMATCH
:
return
"
Location
layout
qualifier
"
;
case
LinkMismatchError
:
:
OFFSET_MISMATCH
:
return
"
Offset
layout
qualifier
"
;
case
LinkMismatchError
:
:
INSTANCE_NAME_MISMATCH
:
return
"
Instance
name
qualifier
"
;
case
LinkMismatchError
:
:
FORMAT_MISMATCH
:
return
"
Format
qualifier
"
;
case
LinkMismatchError
:
:
LAYOUT_QUALIFIER_MISMATCH
:
return
"
Layout
qualifier
"
;
case
LinkMismatchError
:
:
MATRIX_PACKING_MISMATCH
:
return
"
Matrix
Packing
"
;
case
LinkMismatchError
:
:
FIELD_LOCATION_MISMATCH
:
return
"
Field
location
"
;
case
LinkMismatchError
:
:
FIELD_STRUCT_NAME_MISMATCH
:
return
"
Field
structure
name
"
;
default
:
UNREACHABLE
(
)
;
return
"
"
;
}
}
void
UpdateInterfaceVariable
(
std
:
:
vector
<
sh
:
:
ShaderVariable
>
*
block
const
sh
:
:
ShaderVariable
&
var
)
{
if
(
!
var
.
isStruct
(
)
)
{
block
-
>
emplace_back
(
var
)
;
block
-
>
back
(
)
.
resetEffectiveLocation
(
)
;
}
for
(
const
sh
:
:
ShaderVariable
&
field
:
var
.
fields
)
{
ASSERT
(
!
var
.
name
.
empty
(
)
|
|
var
.
isShaderIOBlock
)
;
const
std
:
:
string
&
baseName
=
var
.
isShaderIOBlock
?
var
.
structOrBlockName
:
var
.
name
;
const
std
:
:
string
prefix
=
var
.
name
.
empty
(
)
?
"
"
:
baseName
+
"
.
"
;
if
(
!
field
.
isStruct
(
)
)
{
sh
:
:
ShaderVariable
fieldCopy
=
field
;
fieldCopy
.
updateEffectiveLocation
(
var
)
;
fieldCopy
.
name
=
prefix
+
field
.
name
;
block
-
>
emplace_back
(
fieldCopy
)
;
}
for
(
const
sh
:
:
ShaderVariable
&
nested
:
field
.
fields
)
{
sh
:
:
ShaderVariable
nestedCopy
=
nested
;
nestedCopy
.
updateEffectiveLocation
(
field
)
;
nestedCopy
.
name
=
prefix
+
field
.
name
+
"
.
"
+
nested
.
name
;
block
-
>
emplace_back
(
nestedCopy
)
;
}
}
}
void
WriteShaderVariableBuffer
(
BinaryOutputStream
*
stream
const
ShaderVariableBuffer
&
var
)
{
stream
-
>
writeInt
(
var
.
binding
)
;
stream
-
>
writeInt
(
var
.
dataSize
)
;
for
(
ShaderType
shaderType
:
AllShaderTypes
(
)
)
{
stream
-
>
writeBool
(
var
.
isActive
(
shaderType
)
)
;
}
stream
-
>
writeInt
(
var
.
memberIndexes
.
size
(
)
)
;
for
(
unsigned
int
memberCounterIndex
:
var
.
memberIndexes
)
{
stream
-
>
writeInt
(
memberCounterIndex
)
;
}
}
void
LoadShaderVariableBuffer
(
BinaryInputStream
*
stream
ShaderVariableBuffer
*
var
)
{
var
-
>
binding
=
stream
-
>
readInt
<
int
>
(
)
;
var
-
>
dataSize
=
stream
-
>
readInt
<
unsigned
int
>
(
)
;
for
(
ShaderType
shaderType
:
AllShaderTypes
(
)
)
{
var
-
>
setActive
(
shaderType
stream
-
>
readBool
(
)
)
;
}
size_t
numMembers
=
stream
-
>
readInt
<
size_t
>
(
)
;
for
(
size_t
blockMemberIndex
=
0
;
blockMemberIndex
<
numMembers
;
blockMemberIndex
+
+
)
{
var
-
>
memberIndexes
.
push_back
(
stream
-
>
readInt
<
unsigned
int
>
(
)
)
;
}
}
void
WriteBufferVariable
(
BinaryOutputStream
*
stream
const
BufferVariable
&
var
)
{
WriteShaderVar
(
stream
var
)
;
stream
-
>
writeInt
(
var
.
bufferIndex
)
;
WriteBlockMemberInfo
(
stream
var
.
blockInfo
)
;
stream
-
>
writeInt
(
var
.
topLevelArraySize
)
;
for
(
ShaderType
shaderType
:
AllShaderTypes
(
)
)
{
stream
-
>
writeBool
(
var
.
isActive
(
shaderType
)
)
;
}
}
void
LoadBufferVariable
(
BinaryInputStream
*
stream
BufferVariable
*
var
)
{
LoadShaderVar
(
stream
var
)
;
var
-
>
bufferIndex
=
stream
-
>
readInt
<
int
>
(
)
;
LoadBlockMemberInfo
(
stream
&
var
-
>
blockInfo
)
;
var
-
>
topLevelArraySize
=
stream
-
>
readInt
<
int
>
(
)
;
for
(
ShaderType
shaderType
:
AllShaderTypes
(
)
)
{
var
-
>
setActive
(
shaderType
stream
-
>
readBool
(
)
)
;
}
}
void
WriteInterfaceBlock
(
BinaryOutputStream
*
stream
const
InterfaceBlock
&
block
)
{
stream
-
>
writeString
(
block
.
name
)
;
stream
-
>
writeString
(
block
.
mappedName
)
;
stream
-
>
writeBool
(
block
.
isArray
)
;
stream
-
>
writeInt
(
block
.
arrayElement
)
;
WriteShaderVariableBuffer
(
stream
block
)
;
}
void
LoadInterfaceBlock
(
BinaryInputStream
*
stream
InterfaceBlock
*
block
)
{
block
-
>
name
=
stream
-
>
readString
(
)
;
block
-
>
mappedName
=
stream
-
>
readString
(
)
;
block
-
>
isArray
=
stream
-
>
readBool
(
)
;
block
-
>
arrayElement
=
stream
-
>
readInt
<
unsigned
int
>
(
)
;
LoadShaderVariableBuffer
(
stream
block
)
;
}
void
WriteShInterfaceBlock
(
BinaryOutputStream
*
stream
const
sh
:
:
InterfaceBlock
&
block
)
{
stream
-
>
writeString
(
block
.
name
)
;
stream
-
>
writeString
(
block
.
mappedName
)
;
stream
-
>
writeString
(
block
.
instanceName
)
;
stream
-
>
writeInt
(
block
.
arraySize
)
;
stream
-
>
writeEnum
(
block
.
layout
)
;
stream
-
>
writeBool
(
block
.
isRowMajorLayout
)
;
stream
-
>
writeInt
(
block
.
binding
)
;
stream
-
>
writeBool
(
block
.
staticUse
)
;
stream
-
>
writeBool
(
block
.
active
)
;
stream
-
>
writeEnum
(
block
.
blockType
)
;
stream
-
>
writeInt
<
size_t
>
(
block
.
fields
.
size
(
)
)
;
for
(
const
sh
:
:
ShaderVariable
&
shaderVariable
:
block
.
fields
)
{
WriteShaderVar
(
stream
shaderVariable
)
;
}
}
void
LoadShInterfaceBlock
(
BinaryInputStream
*
stream
sh
:
:
InterfaceBlock
*
block
)
{
block
-
>
name
=
stream
-
>
readString
(
)
;
block
-
>
mappedName
=
stream
-
>
readString
(
)
;
block
-
>
instanceName
=
stream
-
>
readString
(
)
;
block
-
>
arraySize
=
stream
-
>
readInt
<
unsigned
int
>
(
)
;
block
-
>
layout
=
stream
-
>
readEnum
<
sh
:
:
BlockLayoutType
>
(
)
;
block
-
>
isRowMajorLayout
=
stream
-
>
readBool
(
)
;
block
-
>
binding
=
stream
-
>
readInt
<
int
>
(
)
;
block
-
>
staticUse
=
stream
-
>
readBool
(
)
;
block
-
>
active
=
stream
-
>
readBool
(
)
;
block
-
>
blockType
=
stream
-
>
readEnum
<
sh
:
:
BlockType
>
(
)
;
block
-
>
fields
.
resize
(
stream
-
>
readInt
<
size_t
>
(
)
)
;
for
(
sh
:
:
ShaderVariable
&
variable
:
block
-
>
fields
)
{
LoadShaderVar
(
stream
&
variable
)
;
}
}
struct
Program
:
:
LinkingState
{
std
:
:
shared_ptr
<
ProgramExecutable
>
linkedExecutable
;
ProgramLinkedResources
resources
;
egl
:
:
BlobCache
:
:
Key
programHash
;
std
:
:
unique_ptr
<
rx
:
:
LinkEvent
>
linkEvent
;
bool
linkingFromBinary
;
}
;
const
char
*
const
g_fakepath
=
"
C
:
\
\
fakepath
"
;
InfoLog
:
:
InfoLog
(
)
:
mLazyStream
(
nullptr
)
{
}
InfoLog
:
:
~
InfoLog
(
)
{
}
size_t
InfoLog
:
:
getLength
(
)
const
{
if
(
!
mLazyStream
)
{
return
0
;
}
const
std
:
:
string
&
logString
=
mLazyStream
-
>
str
(
)
;
return
logString
.
empty
(
)
?
0
:
logString
.
length
(
)
+
1
;
}
void
InfoLog
:
:
getLog
(
GLsizei
bufSize
GLsizei
*
length
char
*
infoLog
)
const
{
size_t
index
=
0
;
if
(
bufSize
>
0
)
{
const
std
:
:
string
logString
(
str
(
)
)
;
if
(
!
logString
.
empty
(
)
)
{
index
=
std
:
:
min
(
static_cast
<
size_t
>
(
bufSize
)
-
1
logString
.
length
(
)
)
;
memcpy
(
infoLog
logString
.
c_str
(
)
index
)
;
}
infoLog
[
index
]
=
'
\
0
'
;
}
if
(
length
)
{
*
length
=
static_cast
<
GLsizei
>
(
index
)
;
}
}
void
InfoLog
:
:
appendSanitized
(
const
char
*
message
)
{
ensureInitialized
(
)
;
std
:
:
string
msg
(
message
)
;
size_t
found
;
do
{
found
=
msg
.
find
(
g_fakepath
)
;
if
(
found
!
=
std
:
:
string
:
:
npos
)
{
msg
.
erase
(
found
strlen
(
g_fakepath
)
)
;
}
}
while
(
found
!
=
std
:
:
string
:
:
npos
)
;
if
(
!
msg
.
empty
(
)
)
{
*
mLazyStream
<
<
message
<
<
std
:
:
endl
;
}
}
void
InfoLog
:
:
reset
(
)
{
if
(
mLazyStream
)
{
mLazyStream
.
reset
(
nullptr
)
;
}
}
bool
InfoLog
:
:
empty
(
)
const
{
if
(
!
mLazyStream
)
{
return
true
;
}
return
mLazyStream
-
>
rdbuf
(
)
-
>
in_avail
(
)
=
=
0
;
}
void
LogLinkMismatch
(
InfoLog
&
infoLog
const
std
:
:
string
&
variableName
const
char
*
variableType
LinkMismatchError
linkError
const
std
:
:
string
&
mismatchedStructOrBlockFieldName
ShaderType
shaderType1
ShaderType
shaderType2
)
{
std
:
:
ostringstream
stream
;
stream
<
<
GetLinkMismatchErrorString
(
linkError
)
<
<
"
s
of
"
<
<
variableType
<
<
"
'
"
<
<
variableName
;
if
(
!
mismatchedStructOrBlockFieldName
.
empty
(
)
)
{
stream
<
<
"
'
member
'
"
<
<
variableName
<
<
"
.
"
<
<
mismatchedStructOrBlockFieldName
;
}
stream
<
<
"
'
differ
between
"
<
<
GetShaderTypeString
(
shaderType1
)
<
<
"
and
"
<
<
GetShaderTypeString
(
shaderType2
)
<
<
"
shaders
.
"
;
infoLog
<
<
stream
.
str
(
)
;
}
bool
IsActiveInterfaceBlock
(
const
sh
:
:
InterfaceBlock
&
interfaceBlock
)
{
return
interfaceBlock
.
active
|
|
interfaceBlock
.
layout
!
=
sh
:
:
BLOCKLAYOUT_PACKED
;
}
void
WriteBlockMemberInfo
(
BinaryOutputStream
*
stream
const
sh
:
:
BlockMemberInfo
&
var
)
{
stream
-
>
writeInt
(
var
.
arrayStride
)
;
stream
-
>
writeBool
(
var
.
isRowMajorMatrix
)
;
stream
-
>
writeInt
(
var
.
matrixStride
)
;
stream
-
>
writeInt
(
var
.
offset
)
;
stream
-
>
writeInt
(
var
.
topLevelArrayStride
)
;
}
void
LoadBlockMemberInfo
(
BinaryInputStream
*
stream
sh
:
:
BlockMemberInfo
*
var
)
{
var
-
>
arrayStride
=
stream
-
>
readInt
<
int
>
(
)
;
var
-
>
isRowMajorMatrix
=
stream
-
>
readBool
(
)
;
var
-
>
matrixStride
=
stream
-
>
readInt
<
int
>
(
)
;
var
-
>
offset
=
stream
-
>
readInt
<
int
>
(
)
;
var
-
>
topLevelArrayStride
=
stream
-
>
readInt
<
int
>
(
)
;
}
void
WriteShaderVar
(
BinaryOutputStream
*
stream
const
sh
:
:
ShaderVariable
&
var
)
{
stream
-
>
writeInt
(
var
.
type
)
;
stream
-
>
writeInt
(
var
.
precision
)
;
stream
-
>
writeString
(
var
.
name
)
;
stream
-
>
writeString
(
var
.
mappedName
)
;
stream
-
>
writeIntVector
(
var
.
arraySizes
)
;
stream
-
>
writeBool
(
var
.
staticUse
)
;
stream
-
>
writeBool
(
var
.
active
)
;
stream
-
>
writeInt
<
size_t
>
(
var
.
fields
.
size
(
)
)
;
for
(
const
sh
:
:
ShaderVariable
&
shaderVariable
:
var
.
fields
)
{
WriteShaderVar
(
stream
shaderVariable
)
;
}
stream
-
>
writeString
(
var
.
structOrBlockName
)
;
stream
-
>
writeString
(
var
.
mappedStructOrBlockName
)
;
stream
-
>
writeBool
(
var
.
isRowMajorLayout
)
;
stream
-
>
writeInt
(
var
.
location
)
;
stream
-
>
writeBool
(
var
.
hasImplicitLocation
)
;
stream
-
>
writeInt
(
var
.
binding
)
;
stream
-
>
writeInt
(
var
.
imageUnitFormat
)
;
stream
-
>
writeInt
(
var
.
offset
)
;
stream
-
>
writeBool
(
var
.
rasterOrdered
)
;
stream
-
>
writeBool
(
var
.
readonly
)
;
stream
-
>
writeBool
(
var
.
writeonly
)
;
stream
-
>
writeBool
(
var
.
isFragmentInOut
)
;
stream
-
>
writeInt
(
var
.
index
)
;
stream
-
>
writeBool
(
var
.
yuv
)
;
stream
-
>
writeEnum
(
var
.
interpolation
)
;
stream
-
>
writeBool
(
var
.
isInvariant
)
;
stream
-
>
writeBool
(
var
.
isShaderIOBlock
)
;
stream
-
>
writeBool
(
var
.
isPatch
)
;
stream
-
>
writeBool
(
var
.
texelFetchStaticUse
)
;
stream
-
>
writeInt
(
var
.
getFlattenedOffsetInParentArrays
(
)
)
;
}
void
LoadShaderVar
(
gl
:
:
BinaryInputStream
*
stream
sh
:
:
ShaderVariable
*
var
)
{
var
-
>
type
=
stream
-
>
readInt
<
GLenum
>
(
)
;
var
-
>
precision
=
stream
-
>
readInt
<
GLenum
>
(
)
;
stream
-
>
readString
(
&
var
-
>
name
)
;
stream
-
>
readString
(
&
var
-
>
mappedName
)
;
stream
-
>
readIntVector
<
unsigned
int
>
(
&
var
-
>
arraySizes
)
;
var
-
>
staticUse
=
stream
-
>
readBool
(
)
;
var
-
>
active
=
stream
-
>
readBool
(
)
;
size_t
elementCount
=
stream
-
>
readInt
<
size_t
>
(
)
;
var
-
>
fields
.
resize
(
elementCount
)
;
for
(
sh
:
:
ShaderVariable
&
variable
:
var
-
>
fields
)
{
LoadShaderVar
(
stream
&
variable
)
;
}
stream
-
>
readString
(
&
var
-
>
structOrBlockName
)
;
stream
-
>
readString
(
&
var
-
>
mappedStructOrBlockName
)
;
var
-
>
isRowMajorLayout
=
stream
-
>
readBool
(
)
;
var
-
>
location
=
stream
-
>
readInt
<
int
>
(
)
;
var
-
>
hasImplicitLocation
=
stream
-
>
readBool
(
)
;
var
-
>
binding
=
stream
-
>
readInt
<
int
>
(
)
;
var
-
>
imageUnitFormat
=
stream
-
>
readInt
<
GLenum
>
(
)
;
var
-
>
offset
=
stream
-
>
readInt
<
int
>
(
)
;
var
-
>
rasterOrdered
=
stream
-
>
readBool
(
)
;
var
-
>
readonly
=
stream
-
>
readBool
(
)
;
var
-
>
writeonly
=
stream
-
>
readBool
(
)
;
var
-
>
isFragmentInOut
=
stream
-
>
readBool
(
)
;
var
-
>
index
=
stream
-
>
readInt
<
int
>
(
)
;
var
-
>
yuv
=
stream
-
>
readBool
(
)
;
var
-
>
interpolation
=
stream
-
>
readEnum
<
sh
:
:
InterpolationType
>
(
)
;
var
-
>
isInvariant
=
stream
-
>
readBool
(
)
;
var
-
>
isShaderIOBlock
=
stream
-
>
readBool
(
)
;
var
-
>
isPatch
=
stream
-
>
readBool
(
)
;
var
-
>
texelFetchStaticUse
=
stream
-
>
readBool
(
)
;
var
-
>
setParentArrayIndex
(
stream
-
>
readInt
<
int
>
(
)
)
;
}
VariableLocation
:
:
VariableLocation
(
)
:
arrayIndex
(
0
)
index
(
kUnused
)
ignored
(
false
)
{
}
VariableLocation
:
:
VariableLocation
(
unsigned
int
arrayIndex
unsigned
int
index
)
:
arrayIndex
(
arrayIndex
)
index
(
index
)
ignored
(
false
)
{
ASSERT
(
arrayIndex
!
=
GL_INVALID_INDEX
)
;
}
SamplerBinding
:
:
SamplerBinding
(
TextureType
textureTypeIn
GLenum
samplerTypeIn
SamplerFormat
formatIn
size_t
elementCount
)
:
textureType
(
textureTypeIn
)
samplerType
(
samplerTypeIn
)
format
(
formatIn
)
boundTextureUnits
(
elementCount
0
)
{
}
SamplerBinding
:
:
SamplerBinding
(
const
SamplerBinding
&
other
)
=
default
;
SamplerBinding
:
:
~
SamplerBinding
(
)
=
default
;
ProgramBindings
:
:
ProgramBindings
(
)
{
}
ProgramBindings
:
:
~
ProgramBindings
(
)
{
}
void
ProgramBindings
:
:
bindLocation
(
GLuint
index
const
std
:
:
string
&
name
)
{
mBindings
[
name
]
=
index
;
}
int
ProgramBindings
:
:
getBindingByName
(
const
std
:
:
string
&
name
)
const
{
auto
iter
=
mBindings
.
find
(
name
)
;
return
(
iter
!
=
mBindings
.
end
(
)
)
?
iter
-
>
second
:
-
1
;
}
int
ProgramBindings
:
:
getBinding
(
const
sh
:
:
ShaderVariable
&
variable
)
const
{
return
getBindingByName
(
variable
.
name
)
;
}
ProgramBindings
:
:
const_iterator
ProgramBindings
:
:
begin
(
)
const
{
return
mBindings
.
begin
(
)
;
}
ProgramBindings
:
:
const_iterator
ProgramBindings
:
:
end
(
)
const
{
return
mBindings
.
end
(
)
;
}
std
:
:
map
<
std
:
:
string
GLuint
>
ProgramBindings
:
:
getStableIterationMap
(
)
const
{
return
std
:
:
map
<
std
:
:
string
GLuint
>
(
mBindings
.
begin
(
)
mBindings
.
end
(
)
)
;
}
ProgramAliasedBindings
:
:
ProgramAliasedBindings
(
)
{
}
ProgramAliasedBindings
:
:
~
ProgramAliasedBindings
(
)
{
}
void
ProgramAliasedBindings
:
:
bindLocation
(
GLuint
index
const
std
:
:
string
&
name
)
{
mBindings
[
name
]
=
ProgramBinding
(
index
)
;
size_t
nameLengthWithoutArrayIndex
;
unsigned
int
arrayIndex
=
ParseArrayIndex
(
name
&
nameLengthWithoutArrayIndex
)
;
if
(
arrayIndex
=
=
0
)
{
std
:
:
string
baseName
=
name
.
substr
(
0u
nameLengthWithoutArrayIndex
)
;
auto
iter
=
mBindings
.
find
(
baseName
)
;
if
(
iter
!
=
mBindings
.
end
(
)
)
{
iter
-
>
second
.
aliased
=
true
;
}
}
}
int
ProgramAliasedBindings
:
:
getBindingByName
(
const
std
:
:
string
&
name
)
const
{
auto
iter
=
mBindings
.
find
(
name
)
;
return
(
iter
!
=
mBindings
.
end
(
)
)
?
iter
-
>
second
.
location
:
-
1
;
}
int
ProgramAliasedBindings
:
:
getBindingByLocation
(
GLuint
location
)
const
{
for
(
const
auto
&
iter
:
mBindings
)
{
if
(
iter
.
second
.
location
=
=
location
)
{
return
iter
.
second
.
location
;
}
}
return
-
1
;
}
int
ProgramAliasedBindings
:
:
getBinding
(
const
sh
:
:
ShaderVariable
&
variable
)
const
{
const
std
:
:
string
&
name
=
variable
.
name
;
if
(
variable
.
isArray
(
)
)
{
size_t
nameLengthWithoutArrayIndex
;
unsigned
int
arrayIndex
=
ParseArrayIndex
(
name
&
nameLengthWithoutArrayIndex
)
;
if
(
arrayIndex
=
=
0
)
{
std
:
:
string
baseName
=
name
.
substr
(
0u
nameLengthWithoutArrayIndex
)
;
auto
iter
=
mBindings
.
find
(
baseName
)
;
if
(
iter
!
=
mBindings
.
end
(
)
&
&
!
iter
-
>
second
.
aliased
)
{
return
iter
-
>
second
.
location
;
}
}
else
if
(
arrayIndex
=
=
GL_INVALID_INDEX
)
{
auto
iter
=
mBindings
.
find
(
variable
.
name
)
;
if
(
iter
!
=
mBindings
.
end
(
)
&
&
!
iter
-
>
second
.
aliased
)
{
return
iter
-
>
second
.
location
;
}
return
getBindingByName
(
name
+
"
[
0
]
"
)
;
}
}
return
getBindingByName
(
name
)
;
}
ProgramAliasedBindings
:
:
const_iterator
ProgramAliasedBindings
:
:
begin
(
)
const
{
return
mBindings
.
begin
(
)
;
}
ProgramAliasedBindings
:
:
const_iterator
ProgramAliasedBindings
:
:
end
(
)
const
{
return
mBindings
.
end
(
)
;
}
std
:
:
map
<
std
:
:
string
ProgramBinding
>
ProgramAliasedBindings
:
:
getStableIterationMap
(
)
const
{
return
std
:
:
map
<
std
:
:
string
ProgramBinding
>
(
mBindings
.
begin
(
)
mBindings
.
end
(
)
)
;
}
ImageBinding
:
:
ImageBinding
(
size_t
count
TextureType
textureTypeIn
)
:
textureType
(
textureTypeIn
)
boundImageUnits
(
count
0
)
{
}
ImageBinding
:
:
ImageBinding
(
GLuint
imageUnit
size_t
count
TextureType
textureTypeIn
)
:
textureType
(
textureTypeIn
)
{
for
(
size_t
index
=
0
;
index
<
count
;
+
+
index
)
{
boundImageUnits
.
push_back
(
imageUnit
+
static_cast
<
GLuint
>
(
index
)
)
;
}
}
ImageBinding
:
:
ImageBinding
(
const
ImageBinding
&
other
)
=
default
;
ImageBinding
:
:
~
ImageBinding
(
)
=
default
;
ProgramState
:
:
ProgramState
(
)
:
mLabel
(
)
mAttachedShaders
{
}
mLocationsUsedForXfbExtension
(
0
)
mBinaryRetrieveableHint
(
false
)
mSeparable
(
false
)
mNumViews
(
-
1
)
mDrawIDLocation
(
-
1
)
mBaseVertexLocation
(
-
1
)
mBaseInstanceLocation
(
-
1
)
mCachedBaseVertex
(
0
)
mCachedBaseInstance
(
0
)
mExecutable
(
new
ProgramExecutable
(
)
)
{
mComputeShaderLocalSize
.
fill
(
1
)
;
}
ProgramState
:
:
~
ProgramState
(
)
{
ASSERT
(
!
hasAttachedShader
(
)
)
;
}
const
std
:
:
string
&
ProgramState
:
:
getLabel
(
)
{
return
mLabel
;
}
Shader
*
ProgramState
:
:
getAttachedShader
(
ShaderType
shaderType
)
const
{
ASSERT
(
shaderType
!
=
ShaderType
:
:
InvalidEnum
)
;
return
mAttachedShaders
[
shaderType
]
;
}
GLuint
ProgramState
:
:
getUniformIndexFromName
(
const
std
:
:
string
&
name
)
const
{
return
GetResourceIndexFromName
(
mExecutable
-
>
mUniforms
name
)
;
}
GLuint
ProgramState
:
:
getBufferVariableIndexFromName
(
const
std
:
:
string
&
name
)
const
{
return
GetResourceIndexFromName
(
mBufferVariables
name
)
;
}
GLuint
ProgramState
:
:
getUniformIndexFromLocation
(
UniformLocation
location
)
const
{
ASSERT
(
location
.
value
>
=
0
&
&
static_cast
<
size_t
>
(
location
.
value
)
<
mUniformLocations
.
size
(
)
)
;
return
mUniformLocations
[
location
.
value
]
.
index
;
}
Optional
<
GLuint
>
ProgramState
:
:
getSamplerIndex
(
UniformLocation
location
)
const
{
GLuint
index
=
getUniformIndexFromLocation
(
location
)
;
if
(
!
isSamplerUniformIndex
(
index
)
)
{
return
Optional
<
GLuint
>
:
:
Invalid
(
)
;
}
return
getSamplerIndexFromUniformIndex
(
index
)
;
}
bool
ProgramState
:
:
isSamplerUniformIndex
(
GLuint
index
)
const
{
return
mExecutable
-
>
mSamplerUniformRange
.
contains
(
index
)
;
}
GLuint
ProgramState
:
:
getSamplerIndexFromUniformIndex
(
GLuint
uniformIndex
)
const
{
ASSERT
(
isSamplerUniformIndex
(
uniformIndex
)
)
;
return
uniformIndex
-
mExecutable
-
>
mSamplerUniformRange
.
low
(
)
;
}
GLuint
ProgramState
:
:
getUniformIndexFromSamplerIndex
(
GLuint
samplerIndex
)
const
{
return
mExecutable
-
>
getUniformIndexFromSamplerIndex
(
samplerIndex
)
;
}
bool
ProgramState
:
:
isImageUniformIndex
(
GLuint
index
)
const
{
return
mExecutable
-
>
mImageUniformRange
.
contains
(
index
)
;
}
GLuint
ProgramState
:
:
getImageIndexFromUniformIndex
(
GLuint
uniformIndex
)
const
{
ASSERT
(
isImageUniformIndex
(
uniformIndex
)
)
;
return
uniformIndex
-
mExecutable
-
>
mImageUniformRange
.
low
(
)
;
}
GLuint
ProgramState
:
:
getAttributeLocation
(
const
std
:
:
string
&
name
)
const
{
for
(
const
sh
:
:
ShaderVariable
&
attribute
:
mExecutable
-
>
mProgramInputs
)
{
if
(
attribute
.
name
=
=
name
)
{
return
attribute
.
location
;
}
}
return
static_cast
<
GLuint
>
(
-
1
)
;
}
bool
ProgramState
:
:
hasAttachedShader
(
)
const
{
for
(
const
Shader
*
shader
:
mAttachedShaders
)
{
if
(
shader
)
{
return
true
;
}
}
return
false
;
}
ShaderType
ProgramState
:
:
getFirstAttachedShaderStageType
(
)
const
{
const
ShaderBitSet
linkedStages
=
mExecutable
-
>
getLinkedShaderStages
(
)
;
if
(
linkedStages
.
none
(
)
)
{
return
ShaderType
:
:
InvalidEnum
;
}
return
linkedStages
.
first
(
)
;
}
ShaderType
ProgramState
:
:
getLastAttachedShaderStageType
(
)
const
{
const
ShaderBitSet
linkedStages
=
mExecutable
-
>
getLinkedShaderStages
(
)
;
if
(
linkedStages
.
none
(
)
)
{
return
ShaderType
:
:
InvalidEnum
;
}
return
linkedStages
.
last
(
)
;
}
ShaderType
ProgramState
:
:
getAttachedTransformFeedbackStage
(
)
const
{
if
(
mAttachedShaders
[
ShaderType
:
:
Geometry
]
)
{
return
ShaderType
:
:
Geometry
;
}
if
(
mAttachedShaders
[
ShaderType
:
:
TessEvaluation
]
)
{
return
ShaderType
:
:
TessEvaluation
;
}
return
ShaderType
:
:
Vertex
;
}
Program
:
:
Program
(
rx
:
:
GLImplFactory
*
factory
ShaderProgramManager
*
manager
ShaderProgramID
handle
)
:
mSerial
(
factory
-
>
generateSerial
(
)
)
mProgram
(
factory
-
>
createProgram
(
mState
)
)
mValidated
(
false
)
mLinked
(
false
)
mDeleteStatus
(
false
)
mRefCount
(
0
)
mResourceManager
(
manager
)
mHandle
(
handle
)
{
ASSERT
(
mProgram
)
;
unlink
(
)
;
}
Program
:
:
~
Program
(
)
{
ASSERT
(
!
mProgram
)
;
}
void
Program
:
:
onDestroy
(
const
Context
*
context
)
{
resolveLink
(
context
)
;
for
(
ShaderType
shaderType
:
AllShaderTypes
(
)
)
{
if
(
mState
.
mAttachedShaders
[
shaderType
]
)
{
mState
.
mAttachedShaders
[
shaderType
]
-
>
release
(
context
)
;
mState
.
mAttachedShaders
[
shaderType
]
=
nullptr
;
}
}
mProgram
-
>
destroy
(
context
)
;
ASSERT
(
!
mState
.
hasAttachedShader
(
)
)
;
SafeDelete
(
mProgram
)
;
delete
this
;
}
ShaderProgramID
Program
:
:
id
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mHandle
;
}
angle
:
:
Result
Program
:
:
setLabel
(
const
Context
*
context
const
std
:
:
string
&
label
)
{
ASSERT
(
!
mLinkingState
)
;
mState
.
mLabel
=
label
;
if
(
mProgram
)
{
return
mProgram
-
>
onLabelUpdate
(
context
)
;
}
return
angle
:
:
Result
:
:
Continue
;
}
const
std
:
:
string
&
Program
:
:
getLabel
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mLabel
;
}
void
Program
:
:
attachShader
(
Shader
*
shader
)
{
ShaderType
shaderType
=
shader
-
>
getType
(
)
;
ASSERT
(
shaderType
!
=
ShaderType
:
:
InvalidEnum
)
;
mState
.
mAttachedShaders
[
shaderType
]
=
shader
;
mState
.
mAttachedShaders
[
shaderType
]
-
>
addRef
(
)
;
}
void
Program
:
:
detachShader
(
const
Context
*
context
Shader
*
shader
)
{
resolveLink
(
context
)
;
ShaderType
shaderType
=
shader
-
>
getType
(
)
;
ASSERT
(
shaderType
!
=
ShaderType
:
:
InvalidEnum
)
;
ASSERT
(
mState
.
mAttachedShaders
[
shaderType
]
=
=
shader
)
;
shader
-
>
release
(
context
)
;
mState
.
mAttachedShaders
[
shaderType
]
=
nullptr
;
}
int
Program
:
:
getAttachedShadersCount
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
int
numAttachedShaders
=
0
;
for
(
const
Shader
*
shader
:
mState
.
mAttachedShaders
)
{
if
(
shader
)
{
+
+
numAttachedShaders
;
}
}
return
numAttachedShaders
;
}
Shader
*
Program
:
:
getAttachedShader
(
ShaderType
shaderType
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
getAttachedShader
(
shaderType
)
;
}
void
Program
:
:
bindAttributeLocation
(
GLuint
index
const
char
*
name
)
{
ASSERT
(
!
mLinkingState
)
;
mAttributeBindings
.
bindLocation
(
index
name
)
;
}
void
Program
:
:
bindUniformLocation
(
UniformLocation
location
const
char
*
name
)
{
ASSERT
(
!
mLinkingState
)
;
mState
.
mUniformLocationBindings
.
bindLocation
(
location
.
value
name
)
;
}
void
Program
:
:
bindFragmentOutputLocation
(
GLuint
index
const
char
*
name
)
{
mFragmentOutputLocations
.
bindLocation
(
index
name
)
;
}
void
Program
:
:
bindFragmentOutputIndex
(
GLuint
index
const
char
*
name
)
{
mFragmentOutputIndexes
.
bindLocation
(
index
name
)
;
}
angle
:
:
Result
Program
:
:
link
(
const
Context
*
context
)
{
angle
:
:
Result
result
=
linkImpl
(
context
)
;
if
(
mLinkingState
&
&
mLinkingState
-
>
linkedExecutable
)
{
mState
.
mExecutable
=
mLinkingState
-
>
linkedExecutable
;
}
return
result
;
}
angle
:
:
Result
Program
:
:
linkImpl
(
const
Context
*
context
)
{
ASSERT
(
!
mLinkingState
)
;
auto
*
platform
=
ANGLEPlatformCurrent
(
)
;
double
startTime
=
platform
-
>
currentTime
(
platform
)
;
mLinked
=
false
;
mState
.
mExecutable
-
>
resetInfoLog
(
)
;
if
(
!
linkValidateShaders
(
context
mState
.
mExecutable
-
>
getInfoLog
(
)
)
)
{
return
angle
:
:
Result
:
:
Continue
;
}
egl
:
:
BlobCache
:
:
Key
programHash
=
{
0
}
;
MemoryProgramCache
*
cache
=
context
-
>
getMemoryProgramCache
(
)
;
if
(
cache
&
&
!
isSeparable
(
)
)
{
std
:
:
lock_guard
<
std
:
:
mutex
>
cacheLock
(
context
-
>
getProgramCacheMutex
(
)
)
;
angle
:
:
Result
cacheResult
=
cache
-
>
getProgram
(
context
this
&
programHash
)
;
ANGLE_TRY
(
cacheResult
)
;
if
(
cacheResult
=
=
angle
:
:
Result
:
:
Continue
)
{
std
:
:
scoped_lock
lock
(
mHistogramMutex
)
;
double
delta
=
platform
-
>
currentTime
(
platform
)
-
startTime
;
int
us
=
static_cast
<
int
>
(
delta
*
1000000
.
0
)
;
ANGLE_HISTOGRAM_COUNTS
(
"
GPU
.
ANGLE
.
ProgramCache
.
ProgramCacheHitTimeUS
"
us
)
;
return
angle
:
:
Result
:
:
Continue
;
}
}
unlink
(
)
;
InfoLog
&
infoLog
=
mState
.
mExecutable
-
>
getInfoLog
(
)
;
bool
result
=
linkValidateShaders
(
context
infoLog
)
;
ASSERT
(
result
)
;
std
:
:
unique_ptr
<
LinkingState
>
linkingState
(
new
LinkingState
(
)
)
;
ProgramMergedVaryings
mergedVaryings
;
LinkingVariables
linkingVariables
(
context
mState
)
;
ProgramLinkedResources
&
resources
=
linkingState
-
>
resources
;
resources
.
init
(
&
mState
.
mExecutable
-
>
mUniformBlocks
&
mState
.
mExecutable
-
>
mUniforms
&
mState
.
mExecutable
-
>
mShaderStorageBlocks
&
mState
.
mBufferVariables
&
mState
.
mExecutable
-
>
mAtomicCounterBuffers
)
;
updateLinkedShaderStages
(
)
;
InitUniformBlockLinker
(
context
mState
&
resources
.
uniformBlockLinker
)
;
InitShaderStorageBlockLinker
(
context
mState
&
resources
.
shaderStorageBlockLinker
)
;
if
(
mState
.
mAttachedShaders
[
ShaderType
:
:
Compute
]
)
{
GLuint
combinedImageUniforms
=
0
;
if
(
!
linkUniforms
(
context
&
resources
.
unusedUniforms
&
combinedImageUniforms
infoLog
)
)
{
return
angle
:
:
Result
:
:
Continue
;
}
GLuint
combinedShaderStorageBlocks
=
0u
;
if
(
!
LinkValidateProgramInterfaceBlocks
(
context
mState
.
mExecutable
-
>
getLinkedShaderStages
(
)
resources
infoLog
&
combinedShaderStorageBlocks
)
)
{
return
angle
:
:
Result
:
:
Continue
;
}
if
(
combinedImageUniforms
+
combinedShaderStorageBlocks
>
static_cast
<
GLuint
>
(
context
-
>
getCaps
(
)
.
maxCombinedShaderOutputResources
)
)
{
infoLog
<
<
"
The
sum
of
the
number
of
active
image
uniforms
active
shader
storage
blocks
"
"
and
active
fragment
shader
outputs
exceeds
"
"
MAX_COMBINED_SHADER_OUTPUT_RESOURCES
(
"
<
<
context
-
>
getCaps
(
)
.
maxCombinedShaderOutputResources
<
<
"
)
"
;
return
angle
:
:
Result
:
:
Continue
;
}
}
else
{
if
(
!
linkAttributes
(
context
infoLog
)
)
{
return
angle
:
:
Result
:
:
Continue
;
}
if
(
!
linkVaryings
(
context
infoLog
)
)
{
return
angle
:
:
Result
:
:
Continue
;
}
GLuint
combinedImageUniforms
=
0
;
if
(
!
linkUniforms
(
context
&
resources
.
unusedUniforms
&
combinedImageUniforms
infoLog
)
)
{
return
angle
:
:
Result
:
:
Continue
;
}
GLuint
combinedShaderStorageBlocks
=
0u
;
if
(
!
LinkValidateProgramInterfaceBlocks
(
context
mState
.
mExecutable
-
>
getLinkedShaderStages
(
)
resources
infoLog
&
combinedShaderStorageBlocks
)
)
{
return
angle
:
:
Result
:
:
Continue
;
}
if
(
!
LinkValidateProgramGlobalNames
(
infoLog
getExecutable
(
)
linkingVariables
)
)
{
return
angle
:
:
Result
:
:
Continue
;
}
gl
:
:
Shader
*
vertexShader
=
mState
.
mAttachedShaders
[
ShaderType
:
:
Vertex
]
;
if
(
vertexShader
)
{
mState
.
mNumViews
=
vertexShader
-
>
getNumViews
(
context
)
;
mState
.
mSpecConstUsageBits
|
=
vertexShader
-
>
getSpecConstUsageBits
(
)
;
}
gl
:
:
Shader
*
fragmentShader
=
mState
.
mAttachedShaders
[
ShaderType
:
:
Fragment
]
;
if
(
fragmentShader
)
{
if
(
!
mState
.
mExecutable
-
>
linkValidateOutputVariables
(
context
-
>
getCaps
(
)
context
-
>
getExtensions
(
)
context
-
>
getClientVersion
(
)
combinedImageUniforms
combinedShaderStorageBlocks
fragmentShader
-
>
getActiveOutputVariables
(
context
)
fragmentShader
-
>
getShaderVersion
(
context
)
mFragmentOutputLocations
mFragmentOutputIndexes
)
)
{
return
angle
:
:
Result
:
:
Continue
;
}
mState
.
mExecutable
-
>
mHasDiscard
=
fragmentShader
-
>
hasDiscard
(
)
;
mState
.
mExecutable
-
>
mEnablesPerSampleShading
=
fragmentShader
-
>
enablesPerSampleShading
(
)
;
mState
.
mExecutable
-
>
mAdvancedBlendEquations
=
fragmentShader
-
>
getAdvancedBlendEquations
(
)
;
mState
.
mSpecConstUsageBits
|
=
fragmentShader
-
>
getSpecConstUsageBits
(
)
;
}
mergedVaryings
=
GetMergedVaryingsFromLinkingVariables
(
linkingVariables
)
;
if
(
!
mState
.
mExecutable
-
>
linkMergedVaryings
(
context
mergedVaryings
mState
.
mTransformFeedbackVaryingNames
linkingVariables
isSeparable
(
)
&
resources
.
varyingPacking
)
)
{
return
angle
:
:
Result
:
:
Continue
;
}
}
mState
.
mExecutable
-
>
saveLinkedStateInfo
(
context
mState
)
;
mLinkingState
=
std
:
:
move
(
linkingState
)
;
mLinkingState
-
>
linkingFromBinary
=
false
;
mLinkingState
-
>
programHash
=
programHash
;
mLinkingState
-
>
linkEvent
=
mProgram
-
>
link
(
context
resources
infoLog
mergedVaryings
)
;
mState
.
updateProgramInterfaceInputs
(
context
)
;
mState
.
updateProgramInterfaceOutputs
(
context
)
;
if
(
mState
.
mSeparable
)
{
mLinkingState
-
>
linkedExecutable
=
mState
.
mExecutable
;
}
return
angle
:
:
Result
:
:
Continue
;
}
bool
Program
:
:
isLinking
(
)
const
{
return
(
mLinkingState
.
get
(
)
&
&
mLinkingState
-
>
linkEvent
&
&
mLinkingState
-
>
linkEvent
-
>
isLinking
(
)
)
;
}
void
Program
:
:
resolveLinkImpl
(
const
Context
*
context
)
{
ASSERT
(
mLinkingState
.
get
(
)
)
;
angle
:
:
Result
result
=
mLinkingState
-
>
linkEvent
-
>
wait
(
context
)
;
mLinked
=
result
=
=
angle
:
:
Result
:
:
Continue
;
std
:
:
unique_ptr
<
LinkingState
>
linkingState
=
std
:
:
move
(
mLinkingState
)
;
if
(
!
mLinked
)
{
mState
.
mExecutable
-
>
reset
(
false
)
;
return
;
}
if
(
linkingState
-
>
linkingFromBinary
)
{
return
;
}
initInterfaceBlockBindings
(
)
;
ASSERT
(
mLinked
)
;
std
:
:
vector
<
ImageBinding
>
*
imageBindings
=
getExecutable
(
)
.
getImageBindings
(
)
;
mProgram
-
>
markUnusedUniformLocations
(
&
mState
.
mUniformLocations
&
mState
.
mExecutable
-
>
mSamplerBindings
imageBindings
)
;
postResolveLink
(
context
)
;
std
:
:
lock_guard
<
std
:
:
mutex
>
cacheLock
(
context
-
>
getProgramCacheMutex
(
)
)
;
MemoryProgramCache
*
cache
=
context
-
>
getMemoryProgramCache
(
)
;
if
(
cache
&
&
!
isSeparable
(
)
&
&
(
mState
.
mExecutable
-
>
mLinkedTransformFeedbackVaryings
.
empty
(
)
|
|
!
context
-
>
getFrontendFeatures
(
)
.
disableProgramCachingForTransformFeedback
.
enabled
)
)
{
if
(
cache
-
>
putProgram
(
linkingState
-
>
programHash
context
this
)
=
=
angle
:
:
Result
:
:
Stop
)
{
ANGLE_PERF_WARNING
(
context
-
>
getState
(
)
.
getDebug
(
)
GL_DEBUG_SEVERITY_LOW
"
Failed
to
save
linked
program
to
memory
program
cache
.
"
)
;
}
}
}
void
Program
:
:
updateLinkedShaderStages
(
)
{
mState
.
mExecutable
-
>
resetLinkedShaderStages
(
)
;
for
(
const
Shader
*
shader
:
mState
.
mAttachedShaders
)
{
if
(
shader
)
{
mState
.
mExecutable
-
>
setLinkedShaderStages
(
shader
-
>
getType
(
)
)
;
}
}
}
void
ProgramState
:
:
updateActiveSamplers
(
)
{
mExecutable
-
>
mActiveSamplerRefCounts
.
fill
(
0
)
;
mExecutable
-
>
updateActiveSamplers
(
*
this
)
;
}
void
ProgramState
:
:
updateProgramInterfaceInputs
(
const
Context
*
context
)
{
const
ShaderType
firstAttachedShaderType
=
getFirstAttachedShaderStageType
(
)
;
if
(
firstAttachedShaderType
=
=
ShaderType
:
:
Vertex
)
{
return
;
}
Shader
*
shader
=
getAttachedShader
(
firstAttachedShaderType
)
;
ASSERT
(
shader
)
;
if
(
shader
-
>
getType
(
)
=
=
ShaderType
:
:
Compute
)
{
for
(
const
sh
:
:
ShaderVariable
&
attribute
:
shader
-
>
getAllAttributes
(
context
)
)
{
mExecutable
-
>
mProgramInputs
.
emplace_back
(
attribute
)
;
}
}
else
{
for
(
const
sh
:
:
ShaderVariable
&
varying
:
shader
-
>
getInputVaryings
(
context
)
)
{
UpdateInterfaceVariable
(
&
mExecutable
-
>
mProgramInputs
varying
)
;
}
}
}
void
ProgramState
:
:
updateProgramInterfaceOutputs
(
const
Context
*
context
)
{
const
ShaderType
lastAttachedShaderType
=
getLastAttachedShaderStageType
(
)
;
if
(
lastAttachedShaderType
=
=
ShaderType
:
:
Fragment
)
{
return
;
}
if
(
lastAttachedShaderType
=
=
ShaderType
:
:
Compute
)
{
return
;
}
Shader
*
shader
=
getAttachedShader
(
lastAttachedShaderType
)
;
ASSERT
(
shader
)
;
for
(
const
sh
:
:
ShaderVariable
&
varying
:
shader
-
>
getOutputVaryings
(
context
)
)
{
UpdateInterfaceVariable
(
&
mExecutable
-
>
mOutputVariables
varying
)
;
}
}
void
Program
:
:
unlink
(
)
{
if
(
mLinkingState
&
&
mLinkingState
-
>
linkedExecutable
)
{
mState
.
mExecutable
.
reset
(
new
ProgramExecutable
(
*
mLinkingState
-
>
linkedExecutable
)
)
;
}
mState
.
mExecutable
-
>
reset
(
true
)
;
mState
.
mUniformLocations
.
clear
(
)
;
mState
.
mBufferVariables
.
clear
(
)
;
mState
.
mComputeShaderLocalSize
.
fill
(
1
)
;
mState
.
mNumViews
=
-
1
;
mState
.
mDrawIDLocation
=
-
1
;
mState
.
mBaseVertexLocation
=
-
1
;
mState
.
mBaseInstanceLocation
=
-
1
;
mState
.
mCachedBaseVertex
=
0
;
mState
.
mCachedBaseInstance
=
0
;
mState
.
mSpecConstUsageBits
.
reset
(
)
;
mValidated
=
false
;
mLinked
=
false
;
}
angle
:
:
Result
Program
:
:
loadBinary
(
const
Context
*
context
GLenum
binaryFormat
const
void
*
binary
GLsizei
length
)
{
ASSERT
(
!
mLinkingState
)
;
unlink
(
)
;
InfoLog
&
infoLog
=
mState
.
mExecutable
-
>
getInfoLog
(
)
;
if
(
!
angle
:
:
GetANGLEHasBinaryLoading
(
)
)
{
return
angle
:
:
Result
:
:
Incomplete
;
}
ASSERT
(
binaryFormat
=
=
GL_PROGRAM_BINARY_ANGLE
)
;
if
(
binaryFormat
!
=
GL_PROGRAM_BINARY_ANGLE
)
{
infoLog
<
<
"
Invalid
program
binary
format
.
"
;
return
angle
:
:
Result
:
:
Incomplete
;
}
BinaryInputStream
stream
(
binary
length
)
;
ANGLE_TRY
(
deserialize
(
context
stream
infoLog
)
)
;
for
(
size_t
uniformBlockIndex
=
0
;
uniformBlockIndex
<
mState
.
mExecutable
-
>
getActiveUniformBlockCount
(
)
;
+
+
uniformBlockIndex
)
{
mDirtyBits
.
set
(
uniformBlockIndex
)
;
}
angle
:
:
Result
result
;
std
:
:
unique_ptr
<
LinkingState
>
linkingState
;
std
:
:
unique_ptr
<
rx
:
:
LinkEvent
>
linkEvent
=
mProgram
-
>
load
(
context
&
stream
infoLog
)
;
if
(
linkEvent
)
{
linkingState
=
std
:
:
make_unique
<
LinkingState
>
(
)
;
linkingState
-
>
linkingFromBinary
=
true
;
linkingState
-
>
linkEvent
=
std
:
:
move
(
linkEvent
)
;
result
=
angle
:
:
Result
:
:
Continue
;
}
else
{
result
=
angle
:
:
Result
:
:
Incomplete
;
}
mLinkingState
=
std
:
:
move
(
linkingState
)
;
return
result
;
}
angle
:
:
Result
Program
:
:
saveBinary
(
Context
*
context
GLenum
*
binaryFormat
void
*
binary
GLsizei
bufSize
GLsizei
*
length
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
binaryFormat
)
{
*
binaryFormat
=
GL_PROGRAM_BINARY_ANGLE
;
}
angle
:
:
MemoryBuffer
memoryBuf
;
ANGLE_TRY
(
serialize
(
context
&
memoryBuf
)
)
;
GLsizei
streamLength
=
static_cast
<
GLsizei
>
(
memoryBuf
.
size
(
)
)
;
const
uint8_t
*
streamState
=
memoryBuf
.
data
(
)
;
if
(
streamLength
>
bufSize
)
{
if
(
length
)
{
*
length
=
0
;
}
ANGLE_CHECK
(
context
false
"
Insufficient
buffer
size
"
GL_INVALID_OPERATION
)
;
}
if
(
binary
)
{
char
*
ptr
=
reinterpret_cast
<
char
*
>
(
binary
)
;
memcpy
(
ptr
streamState
streamLength
)
;
ptr
+
=
streamLength
;
ASSERT
(
ptr
-
streamLength
=
=
binary
)
;
}
if
(
length
)
{
*
length
=
streamLength
;
}
return
angle
:
:
Result
:
:
Continue
;
}
GLint
Program
:
:
getBinaryLength
(
Context
*
context
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
!
mLinked
)
{
return
0
;
}
GLint
length
;
angle
:
:
Result
result
=
saveBinary
(
context
nullptr
nullptr
std
:
:
numeric_limits
<
GLint
>
:
:
max
(
)
&
length
)
;
if
(
result
!
=
angle
:
:
Result
:
:
Continue
)
{
return
0
;
}
return
length
;
}
void
Program
:
:
setBinaryRetrievableHint
(
bool
retrievable
)
{
ASSERT
(
!
mLinkingState
)
;
mProgram
-
>
setBinaryRetrievableHint
(
retrievable
)
;
mState
.
mBinaryRetrieveableHint
=
retrievable
;
}
bool
Program
:
:
getBinaryRetrievableHint
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mBinaryRetrieveableHint
;
}
void
Program
:
:
setSeparable
(
bool
separable
)
{
ASSERT
(
!
mLinkingState
)
;
if
(
mState
.
mSeparable
!
=
separable
)
{
mProgram
-
>
setSeparable
(
separable
)
;
mState
.
mSeparable
=
separable
;
}
}
bool
Program
:
:
isSeparable
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mSeparable
;
}
void
Program
:
:
deleteSelf
(
const
Context
*
context
)
{
ASSERT
(
mRefCount
=
=
0
&
&
mDeleteStatus
)
;
mResourceManager
-
>
deleteProgram
(
context
mHandle
)
;
}
unsigned
int
Program
:
:
getRefCount
(
)
const
{
return
mRefCount
;
}
void
Program
:
:
getAttachedShaders
(
GLsizei
maxCount
GLsizei
*
count
ShaderProgramID
*
shaders
)
const
{
ASSERT
(
!
mLinkingState
)
;
int
total
=
0
;
for
(
const
Shader
*
shader
:
mState
.
mAttachedShaders
)
{
if
(
shader
&
&
(
total
<
maxCount
)
)
{
shaders
[
total
]
=
shader
-
>
getHandle
(
)
;
+
+
total
;
}
}
if
(
count
)
{
*
count
=
total
;
}
}
GLuint
Program
:
:
getAttributeLocation
(
const
std
:
:
string
&
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
getAttributeLocation
(
name
)
;
}
void
Program
:
:
getActiveAttribute
(
GLuint
index
GLsizei
bufsize
GLsizei
*
length
GLint
*
size
GLenum
*
type
GLchar
*
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
!
mLinked
)
{
if
(
bufsize
>
0
)
{
name
[
0
]
=
'
\
0
'
;
}
if
(
length
)
{
*
length
=
0
;
}
*
type
=
GL_NONE
;
*
size
=
1
;
return
;
}
ASSERT
(
index
<
mState
.
mExecutable
-
>
getProgramInputs
(
)
.
size
(
)
)
;
const
sh
:
:
ShaderVariable
&
attrib
=
mState
.
mExecutable
-
>
getProgramInputs
(
)
[
index
]
;
if
(
bufsize
>
0
)
{
CopyStringToBuffer
(
name
attrib
.
name
bufsize
length
)
;
}
*
size
=
1
;
*
type
=
attrib
.
type
;
}
GLint
Program
:
:
getActiveAttributeCount
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
!
mLinked
)
{
return
0
;
}
return
static_cast
<
GLint
>
(
mState
.
mExecutable
-
>
getProgramInputs
(
)
.
size
(
)
)
;
}
GLint
Program
:
:
getActiveAttributeMaxLength
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
!
mLinked
)
{
return
0
;
}
size_t
maxLength
=
0
;
for
(
const
sh
:
:
ShaderVariable
&
attrib
:
mState
.
mExecutable
-
>
getProgramInputs
(
)
)
{
maxLength
=
std
:
:
max
(
attrib
.
name
.
length
(
)
+
1
maxLength
)
;
}
return
static_cast
<
GLint
>
(
maxLength
)
;
}
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
Program
:
:
getAttributes
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mExecutable
-
>
getProgramInputs
(
)
;
}
const
sh
:
:
WorkGroupSize
&
Program
:
:
getComputeShaderLocalSize
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mComputeShaderLocalSize
;
}
PrimitiveMode
Program
:
:
getGeometryShaderInputPrimitiveType
(
)
const
{
ASSERT
(
!
mLinkingState
&
&
mState
.
mExecutable
)
;
return
mState
.
mExecutable
-
>
getGeometryShaderInputPrimitiveType
(
)
;
}
PrimitiveMode
Program
:
:
getGeometryShaderOutputPrimitiveType
(
)
const
{
ASSERT
(
!
mLinkingState
&
&
mState
.
mExecutable
)
;
return
mState
.
mExecutable
-
>
getGeometryShaderOutputPrimitiveType
(
)
;
}
GLint
Program
:
:
getGeometryShaderInvocations
(
)
const
{
ASSERT
(
!
mLinkingState
&
&
mState
.
mExecutable
)
;
return
mState
.
mExecutable
-
>
getGeometryShaderInvocations
(
)
;
}
GLint
Program
:
:
getGeometryShaderMaxVertices
(
)
const
{
ASSERT
(
!
mLinkingState
&
&
mState
.
mExecutable
)
;
return
mState
.
mExecutable
-
>
getGeometryShaderMaxVertices
(
)
;
}
GLint
Program
:
:
getTessControlShaderVertices
(
)
const
{
ASSERT
(
!
mLinkingState
&
&
mState
.
mExecutable
)
;
return
mState
.
mExecutable
-
>
mTessControlShaderVertices
;
}
GLenum
Program
:
:
getTessGenMode
(
)
const
{
ASSERT
(
!
mLinkingState
&
&
mState
.
mExecutable
)
;
return
mState
.
mExecutable
-
>
mTessGenMode
;
}
GLenum
Program
:
:
getTessGenPointMode
(
)
const
{
ASSERT
(
!
mLinkingState
&
&
mState
.
mExecutable
)
;
return
mState
.
mExecutable
-
>
mTessGenPointMode
;
}
GLenum
Program
:
:
getTessGenSpacing
(
)
const
{
ASSERT
(
!
mLinkingState
&
&
mState
.
mExecutable
)
;
return
mState
.
mExecutable
-
>
mTessGenSpacing
;
}
GLenum
Program
:
:
getTessGenVertexOrder
(
)
const
{
ASSERT
(
!
mLinkingState
&
&
mState
.
mExecutable
)
;
return
mState
.
mExecutable
-
>
mTessGenVertexOrder
;
}
const
sh
:
:
ShaderVariable
&
Program
:
:
getInputResource
(
size_t
index
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
index
<
mState
.
mExecutable
-
>
getProgramInputs
(
)
.
size
(
)
)
;
return
mState
.
mExecutable
-
>
getProgramInputs
(
)
[
index
]
;
}
GLuint
Program
:
:
getInputResourceIndex
(
const
GLchar
*
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
const
std
:
:
string
nameString
=
StripLastArrayIndex
(
name
)
;
for
(
size_t
index
=
0
;
index
<
mState
.
mExecutable
-
>
getProgramInputs
(
)
.
size
(
)
;
index
+
+
)
{
sh
:
:
ShaderVariable
resource
=
getInputResource
(
index
)
;
if
(
resource
.
name
=
=
nameString
)
{
return
static_cast
<
GLuint
>
(
index
)
;
}
}
return
GL_INVALID_INDEX
;
}
GLuint
Program
:
:
getResourceMaxNameSize
(
const
sh
:
:
ShaderVariable
&
resource
GLint
max
)
const
{
if
(
resource
.
isArray
(
)
)
{
return
std
:
:
max
(
max
clampCast
<
GLint
>
(
(
resource
.
name
+
"
[
0
]
"
)
.
size
(
)
)
)
;
}
else
{
return
std
:
:
max
(
max
clampCast
<
GLint
>
(
(
resource
.
name
)
.
size
(
)
)
)
;
}
}
GLuint
Program
:
:
getInputResourceMaxNameSize
(
)
const
{
GLint
max
=
0
;
for
(
const
sh
:
:
ShaderVariable
&
resource
:
mState
.
mExecutable
-
>
getProgramInputs
(
)
)
{
max
=
getResourceMaxNameSize
(
resource
max
)
;
}
return
max
;
}
GLuint
Program
:
:
getOutputResourceMaxNameSize
(
)
const
{
GLint
max
=
0
;
for
(
const
sh
:
:
ShaderVariable
&
resource
:
mState
.
mExecutable
-
>
getOutputVariables
(
)
)
{
max
=
getResourceMaxNameSize
(
resource
max
)
;
}
return
max
;
}
GLuint
Program
:
:
getResourceLocation
(
const
GLchar
*
name
const
sh
:
:
ShaderVariable
&
variable
)
const
{
if
(
variable
.
isBuiltIn
(
)
)
{
return
GL_INVALID_INDEX
;
}
GLint
location
=
variable
.
location
;
if
(
variable
.
isArray
(
)
)
{
size_t
nameLengthWithoutArrayIndexOut
;
size_t
arrayIndex
=
ParseArrayIndex
(
name
&
nameLengthWithoutArrayIndexOut
)
;
if
(
arrayIndex
!
=
GL_INVALID_INDEX
)
{
location
+
=
arrayIndex
;
}
}
return
location
;
}
GLuint
Program
:
:
getInputResourceLocation
(
const
GLchar
*
name
)
const
{
const
GLuint
index
=
getInputResourceIndex
(
name
)
;
if
(
index
=
=
GL_INVALID_INDEX
)
{
return
index
;
}
const
sh
:
:
ShaderVariable
&
variable
=
getInputResource
(
index
)
;
return
getResourceLocation
(
name
variable
)
;
}
GLuint
Program
:
:
getOutputResourceLocation
(
const
GLchar
*
name
)
const
{
const
GLuint
index
=
getOutputResourceIndex
(
name
)
;
if
(
index
=
=
GL_INVALID_INDEX
)
{
return
index
;
}
const
sh
:
:
ShaderVariable
&
variable
=
getOutputResource
(
index
)
;
return
getResourceLocation
(
name
variable
)
;
}
GLuint
Program
:
:
getOutputResourceIndex
(
const
GLchar
*
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
const
std
:
:
string
nameString
=
StripLastArrayIndex
(
name
)
;
for
(
size_t
index
=
0
;
index
<
mState
.
mExecutable
-
>
getOutputVariables
(
)
.
size
(
)
;
index
+
+
)
{
sh
:
:
ShaderVariable
resource
=
getOutputResource
(
index
)
;
if
(
resource
.
name
=
=
nameString
)
{
return
static_cast
<
GLuint
>
(
index
)
;
}
}
return
GL_INVALID_INDEX
;
}
size_t
Program
:
:
getOutputResourceCount
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
(
mLinked
?
mState
.
mExecutable
-
>
getOutputVariables
(
)
.
size
(
)
:
0
)
;
}
void
Program
:
:
getResourceName
(
const
std
:
:
string
name
GLsizei
bufSize
GLsizei
*
length
GLchar
*
dest
)
const
{
if
(
length
)
{
*
length
=
0
;
}
if
(
!
mLinked
)
{
if
(
bufSize
>
0
)
{
dest
[
0
]
=
'
\
0
'
;
}
return
;
}
if
(
bufSize
>
0
)
{
CopyStringToBuffer
(
dest
name
bufSize
length
)
;
}
}
void
Program
:
:
getInputResourceName
(
GLuint
index
GLsizei
bufSize
GLsizei
*
length
GLchar
*
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
getResourceName
(
getInputResourceName
(
index
)
bufSize
length
name
)
;
}
void
Program
:
:
getOutputResourceName
(
GLuint
index
GLsizei
bufSize
GLsizei
*
length
GLchar
*
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
getResourceName
(
getOutputResourceName
(
index
)
bufSize
length
name
)
;
}
void
Program
:
:
getUniformResourceName
(
GLuint
index
GLsizei
bufSize
GLsizei
*
length
GLchar
*
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
index
<
mState
.
mExecutable
-
>
getUniforms
(
)
.
size
(
)
)
;
getResourceName
(
mState
.
mExecutable
-
>
getUniforms
(
)
[
index
]
.
name
bufSize
length
name
)
;
}
void
Program
:
:
getBufferVariableResourceName
(
GLuint
index
GLsizei
bufSize
GLsizei
*
length
GLchar
*
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
index
<
mState
.
mBufferVariables
.
size
(
)
)
;
getResourceName
(
mState
.
mBufferVariables
[
index
]
.
name
bufSize
length
name
)
;
}
const
std
:
:
string
Program
:
:
getResourceName
(
const
sh
:
:
ShaderVariable
&
resource
)
const
{
std
:
:
string
resourceName
=
resource
.
name
;
if
(
resource
.
isArray
(
)
)
{
resourceName
+
=
"
[
0
]
"
;
}
return
resourceName
;
}
const
std
:
:
string
Program
:
:
getInputResourceName
(
GLuint
index
)
const
{
ASSERT
(
!
mLinkingState
)
;
const
sh
:
:
ShaderVariable
&
resource
=
getInputResource
(
index
)
;
return
getResourceName
(
resource
)
;
}
const
std
:
:
string
Program
:
:
getOutputResourceName
(
GLuint
index
)
const
{
ASSERT
(
!
mLinkingState
)
;
const
sh
:
:
ShaderVariable
&
resource
=
getOutputResource
(
index
)
;
return
getResourceName
(
resource
)
;
}
const
sh
:
:
ShaderVariable
&
Program
:
:
getOutputResource
(
size_t
index
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
index
<
mState
.
mExecutable
-
>
getOutputVariables
(
)
.
size
(
)
)
;
return
mState
.
mExecutable
-
>
getOutputVariables
(
)
[
index
]
;
}
const
ProgramBindings
&
Program
:
:
getAttributeBindings
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mAttributeBindings
;
}
const
ProgramAliasedBindings
&
Program
:
:
getUniformLocationBindings
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mUniformLocationBindings
;
}
const
gl
:
:
ProgramAliasedBindings
&
Program
:
:
getFragmentOutputLocations
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mFragmentOutputLocations
;
}
const
gl
:
:
ProgramAliasedBindings
&
Program
:
:
getFragmentOutputIndexes
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mFragmentOutputIndexes
;
}
const
std
:
:
vector
<
GLsizei
>
&
Program
:
:
getTransformFeedbackStrides
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mExecutable
-
>
getTransformFeedbackStrides
(
)
;
}
GLint
Program
:
:
getFragDataLocation
(
const
std
:
:
string
&
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
GLint
primaryLocation
=
GetVariableLocation
(
mState
.
mExecutable
-
>
getOutputVariables
(
)
mState
.
mExecutable
-
>
getOutputLocations
(
)
name
)
;
if
(
primaryLocation
!
=
-
1
)
{
return
primaryLocation
;
}
return
GetVariableLocation
(
mState
.
mExecutable
-
>
getOutputVariables
(
)
mState
.
mExecutable
-
>
getSecondaryOutputLocations
(
)
name
)
;
}
GLint
Program
:
:
getFragDataIndex
(
const
std
:
:
string
&
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
GetVariableLocation
(
mState
.
mExecutable
-
>
getOutputVariables
(
)
mState
.
mExecutable
-
>
getOutputLocations
(
)
name
)
!
=
-
1
)
{
return
0
;
}
if
(
GetVariableLocation
(
mState
.
mExecutable
-
>
getOutputVariables
(
)
mState
.
mExecutable
-
>
getSecondaryOutputLocations
(
)
name
)
!
=
-
1
)
{
return
1
;
}
return
-
1
;
}
void
Program
:
:
getActiveUniform
(
GLuint
index
GLsizei
bufsize
GLsizei
*
length
GLint
*
size
GLenum
*
type
GLchar
*
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
mLinked
)
{
ASSERT
(
index
<
mState
.
mExecutable
-
>
getUniforms
(
)
.
size
(
)
)
;
const
LinkedUniform
&
uniform
=
mState
.
mExecutable
-
>
getUniforms
(
)
[
index
]
;
if
(
bufsize
>
0
)
{
std
:
:
string
string
=
uniform
.
name
;
CopyStringToBuffer
(
name
string
bufsize
length
)
;
}
*
size
=
clampCast
<
GLint
>
(
uniform
.
getBasicTypeElementCount
(
)
)
;
*
type
=
uniform
.
type
;
}
else
{
if
(
bufsize
>
0
)
{
name
[
0
]
=
'
\
0
'
;
}
if
(
length
)
{
*
length
=
0
;
}
*
size
=
0
;
*
type
=
GL_NONE
;
}
}
GLint
Program
:
:
getActiveUniformCount
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
mLinked
)
{
return
static_cast
<
GLint
>
(
mState
.
mExecutable
-
>
getUniforms
(
)
.
size
(
)
)
;
}
else
{
return
0
;
}
}
size_t
Program
:
:
getActiveBufferVariableCount
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mLinked
?
mState
.
mBufferVariables
.
size
(
)
:
0
;
}
GLint
Program
:
:
getActiveUniformMaxLength
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
size_t
maxLength
=
0
;
if
(
mLinked
)
{
for
(
const
LinkedUniform
&
uniform
:
mState
.
mExecutable
-
>
getUniforms
(
)
)
{
if
(
!
uniform
.
name
.
empty
(
)
)
{
size_t
length
=
uniform
.
name
.
length
(
)
+
1u
;
if
(
uniform
.
isArray
(
)
)
{
length
+
=
3
;
}
maxLength
=
std
:
:
max
(
length
maxLength
)
;
}
}
}
return
static_cast
<
GLint
>
(
maxLength
)
;
}
bool
Program
:
:
isValidUniformLocation
(
UniformLocation
location
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
angle
:
:
IsValueInRangeForNumericType
<
GLint
>
(
mState
.
mUniformLocations
.
size
(
)
)
)
;
return
(
location
.
value
>
=
0
&
&
static_cast
<
size_t
>
(
location
.
value
)
<
mState
.
mUniformLocations
.
size
(
)
&
&
mState
.
mUniformLocations
[
static_cast
<
size_t
>
(
location
.
value
)
]
.
used
(
)
)
;
}
const
LinkedUniform
&
Program
:
:
getUniformByLocation
(
UniformLocation
location
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
location
.
value
>
=
0
&
&
static_cast
<
size_t
>
(
location
.
value
)
<
mState
.
mUniformLocations
.
size
(
)
)
;
return
mState
.
mExecutable
-
>
getUniforms
(
)
[
mState
.
getUniformIndexFromLocation
(
location
)
]
;
}
const
VariableLocation
&
Program
:
:
getUniformLocation
(
UniformLocation
location
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
location
.
value
>
=
0
&
&
static_cast
<
size_t
>
(
location
.
value
)
<
mState
.
mUniformLocations
.
size
(
)
)
;
return
mState
.
mUniformLocations
[
location
.
value
]
;
}
const
BufferVariable
&
Program
:
:
getBufferVariableByIndex
(
GLuint
index
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
index
<
static_cast
<
size_t
>
(
mState
.
mBufferVariables
.
size
(
)
)
)
;
return
mState
.
mBufferVariables
[
index
]
;
}
UniformLocation
Program
:
:
getUniformLocation
(
const
std
:
:
string
&
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
{
GetVariableLocation
(
mState
.
mExecutable
-
>
getUniforms
(
)
mState
.
mUniformLocations
name
)
}
;
}
GLuint
Program
:
:
getUniformIndex
(
const
std
:
:
string
&
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
getUniformIndexFromName
(
name
)
;
}
bool
Program
:
:
shouldIgnoreUniform
(
UniformLocation
location
)
const
{
if
(
location
.
value
=
=
-
1
)
{
return
true
;
}
if
(
mState
.
mUniformLocations
[
static_cast
<
size_t
>
(
location
.
value
)
]
.
ignored
)
{
return
true
;
}
return
false
;
}
template
<
typename
UniformT
GLint
UniformSize
void
(
rx
:
:
ProgramImpl
:
:
*
SetUniformFunc
)
(
GLint
GLsizei
const
UniformT
*
)
>
void
Program
:
:
setUniformGeneric
(
UniformLocation
location
GLsizei
count
const
UniformT
*
v
)
{
ASSERT
(
!
mLinkingState
)
;
if
(
shouldIgnoreUniform
(
location
)
)
{
return
;
}
const
VariableLocation
&
locationInfo
=
mState
.
mUniformLocations
[
location
.
value
]
;
GLsizei
clampedCount
=
clampUniformCount
(
locationInfo
count
UniformSize
v
)
;
(
mProgram
-
>
*
SetUniformFunc
)
(
location
.
value
clampedCount
v
)
;
onStateChange
(
angle
:
:
SubjectMessage
:
:
ProgramUniformUpdated
)
;
}
void
Program
:
:
setUniform1fv
(
UniformLocation
location
GLsizei
count
const
GLfloat
*
v
)
{
setUniformGeneric
<
GLfloat
1
&
rx
:
:
ProgramImpl
:
:
setUniform1fv
>
(
location
count
v
)
;
}
void
Program
:
:
setUniform2fv
(
UniformLocation
location
GLsizei
count
const
GLfloat
*
v
)
{
setUniformGeneric
<
GLfloat
2
&
rx
:
:
ProgramImpl
:
:
setUniform2fv
>
(
location
count
v
)
;
}
void
Program
:
:
setUniform3fv
(
UniformLocation
location
GLsizei
count
const
GLfloat
*
v
)
{
setUniformGeneric
<
GLfloat
3
&
rx
:
:
ProgramImpl
:
:
setUniform3fv
>
(
location
count
v
)
;
}
void
Program
:
:
setUniform4fv
(
UniformLocation
location
GLsizei
count
const
GLfloat
*
v
)
{
setUniformGeneric
<
GLfloat
4
&
rx
:
:
ProgramImpl
:
:
setUniform4fv
>
(
location
count
v
)
;
}
void
Program
:
:
setUniform1iv
(
Context
*
context
UniformLocation
location
GLsizei
count
const
GLint
*
v
)
{
ASSERT
(
!
mLinkingState
)
;
if
(
shouldIgnoreUniform
(
location
)
)
{
return
;
}
const
VariableLocation
&
locationInfo
=
mState
.
mUniformLocations
[
location
.
value
]
;
GLsizei
clampedCount
=
clampUniformCount
(
locationInfo
count
1
v
)
;
mProgram
-
>
setUniform1iv
(
location
.
value
clampedCount
v
)
;
if
(
mState
.
isSamplerUniformIndex
(
locationInfo
.
index
)
)
{
updateSamplerUniform
(
context
locationInfo
clampedCount
v
)
;
}
else
{
onStateChange
(
angle
:
:
SubjectMessage
:
:
ProgramUniformUpdated
)
;
}
}
void
Program
:
:
setUniform2iv
(
UniformLocation
location
GLsizei
count
const
GLint
*
v
)
{
setUniformGeneric
<
GLint
2
&
rx
:
:
ProgramImpl
:
:
setUniform2iv
>
(
location
count
v
)
;
}
void
Program
:
:
setUniform3iv
(
UniformLocation
location
GLsizei
count
const
GLint
*
v
)
{
setUniformGeneric
<
GLint
3
&
rx
:
:
ProgramImpl
:
:
setUniform3iv
>
(
location
count
v
)
;
}
void
Program
:
:
setUniform4iv
(
UniformLocation
location
GLsizei
count
const
GLint
*
v
)
{
setUniformGeneric
<
GLint
4
&
rx
:
:
ProgramImpl
:
:
setUniform4iv
>
(
location
count
v
)
;
}
void
Program
:
:
setUniform1uiv
(
UniformLocation
location
GLsizei
count
const
GLuint
*
v
)
{
setUniformGeneric
<
GLuint
1
&
rx
:
:
ProgramImpl
:
:
setUniform1uiv
>
(
location
count
v
)
;
}
void
Program
:
:
setUniform2uiv
(
UniformLocation
location
GLsizei
count
const
GLuint
*
v
)
{
setUniformGeneric
<
GLuint
2
&
rx
:
:
ProgramImpl
:
:
setUniform2uiv
>
(
location
count
v
)
;
}
void
Program
:
:
setUniform3uiv
(
UniformLocation
location
GLsizei
count
const
GLuint
*
v
)
{
setUniformGeneric
<
GLuint
3
&
rx
:
:
ProgramImpl
:
:
setUniform3uiv
>
(
location
count
v
)
;
}
void
Program
:
:
setUniform4uiv
(
UniformLocation
location
GLsizei
count
const
GLuint
*
v
)
{
setUniformGeneric
<
GLuint
4
&
rx
:
:
ProgramImpl
:
:
setUniform4uiv
>
(
location
count
v
)
;
}
template
<
typename
UniformT
GLint
MatrixC
GLint
MatrixR
void
(
rx
:
:
ProgramImpl
:
:
*
SetUniformMatrixFunc
)
(
GLint
GLsizei
GLboolean
const
UniformT
*
)
>
void
Program
:
:
setUniformMatrixGeneric
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
UniformT
*
v
)
{
ASSERT
(
!
mLinkingState
)
;
if
(
shouldIgnoreUniform
(
location
)
)
{
return
;
}
GLsizei
clampedCount
=
clampMatrixUniformCount
<
MatrixC
MatrixR
>
(
location
count
transpose
v
)
;
(
mProgram
-
>
*
SetUniformMatrixFunc
)
(
location
.
value
clampedCount
transpose
v
)
;
onStateChange
(
angle
:
:
SubjectMessage
:
:
ProgramUniformUpdated
)
;
}
void
Program
:
:
setUniformMatrix2fv
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
v
)
{
setUniformMatrixGeneric
<
GLfloat
2
2
&
rx
:
:
ProgramImpl
:
:
setUniformMatrix2fv
>
(
location
count
transpose
v
)
;
}
void
Program
:
:
setUniformMatrix3fv
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
v
)
{
setUniformMatrixGeneric
<
GLfloat
3
3
&
rx
:
:
ProgramImpl
:
:
setUniformMatrix3fv
>
(
location
count
transpose
v
)
;
}
void
Program
:
:
setUniformMatrix4fv
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
v
)
{
setUniformMatrixGeneric
<
GLfloat
4
4
&
rx
:
:
ProgramImpl
:
:
setUniformMatrix4fv
>
(
location
count
transpose
v
)
;
}
void
Program
:
:
setUniformMatrix2x3fv
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
v
)
{
setUniformMatrixGeneric
<
GLfloat
2
3
&
rx
:
:
ProgramImpl
:
:
setUniformMatrix2x3fv
>
(
location
count
transpose
v
)
;
}
void
Program
:
:
setUniformMatrix2x4fv
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
v
)
{
setUniformMatrixGeneric
<
GLfloat
2
4
&
rx
:
:
ProgramImpl
:
:
setUniformMatrix2x4fv
>
(
location
count
transpose
v
)
;
}
void
Program
:
:
setUniformMatrix3x2fv
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
v
)
{
setUniformMatrixGeneric
<
GLfloat
3
2
&
rx
:
:
ProgramImpl
:
:
setUniformMatrix3x2fv
>
(
location
count
transpose
v
)
;
}
void
Program
:
:
setUniformMatrix3x4fv
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
v
)
{
setUniformMatrixGeneric
<
GLfloat
3
4
&
rx
:
:
ProgramImpl
:
:
setUniformMatrix3x4fv
>
(
location
count
transpose
v
)
;
}
void
Program
:
:
setUniformMatrix4x2fv
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
v
)
{
setUniformMatrixGeneric
<
GLfloat
4
2
&
rx
:
:
ProgramImpl
:
:
setUniformMatrix4x2fv
>
(
location
count
transpose
v
)
;
}
void
Program
:
:
setUniformMatrix4x3fv
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
v
)
{
setUniformMatrixGeneric
<
GLfloat
4
3
&
rx
:
:
ProgramImpl
:
:
setUniformMatrix4x3fv
>
(
location
count
transpose
v
)
;
}
GLuint
Program
:
:
getSamplerUniformBinding
(
const
VariableLocation
&
uniformLocation
)
const
{
ASSERT
(
!
mLinkingState
)
;
GLuint
samplerIndex
=
mState
.
getSamplerIndexFromUniformIndex
(
uniformLocation
.
index
)
;
const
std
:
:
vector
<
GLuint
>
&
boundTextureUnits
=
mState
.
mExecutable
-
>
mSamplerBindings
[
samplerIndex
]
.
boundTextureUnits
;
return
(
uniformLocation
.
arrayIndex
<
boundTextureUnits
.
size
(
)
)
?
boundTextureUnits
[
uniformLocation
.
arrayIndex
]
:
0
;
}
GLuint
Program
:
:
getImageUniformBinding
(
const
VariableLocation
&
uniformLocation
)
const
{
ASSERT
(
!
mLinkingState
)
;
GLuint
imageIndex
=
mState
.
getImageIndexFromUniformIndex
(
uniformLocation
.
index
)
;
const
std
:
:
vector
<
ImageBinding
>
&
imageBindings
=
getExecutable
(
)
.
getImageBindings
(
)
;
const
std
:
:
vector
<
GLuint
>
&
boundImageUnits
=
imageBindings
[
imageIndex
]
.
boundImageUnits
;
return
boundImageUnits
[
uniformLocation
.
arrayIndex
]
;
}
void
Program
:
:
getUniformfv
(
const
Context
*
context
UniformLocation
location
GLfloat
*
v
)
const
{
ASSERT
(
!
mLinkingState
)
;
const
VariableLocation
&
uniformLocation
=
mState
.
getUniformLocations
(
)
[
location
.
value
]
;
const
LinkedUniform
&
uniform
=
mState
.
getUniforms
(
)
[
uniformLocation
.
index
]
;
if
(
uniform
.
isSampler
(
)
)
{
*
v
=
static_cast
<
GLfloat
>
(
getSamplerUniformBinding
(
uniformLocation
)
)
;
return
;
}
else
if
(
uniform
.
isImage
(
)
)
{
*
v
=
static_cast
<
GLfloat
>
(
getImageUniformBinding
(
uniformLocation
)
)
;
return
;
}
const
GLenum
nativeType
=
gl
:
:
VariableComponentType
(
uniform
.
type
)
;
if
(
nativeType
=
=
GL_FLOAT
)
{
mProgram
-
>
getUniformfv
(
context
location
.
value
v
)
;
}
else
{
getUniformInternal
(
context
v
location
nativeType
VariableComponentCount
(
uniform
.
type
)
)
;
}
}
void
Program
:
:
getUniformiv
(
const
Context
*
context
UniformLocation
location
GLint
*
v
)
const
{
ASSERT
(
!
mLinkingState
)
;
const
VariableLocation
&
uniformLocation
=
mState
.
getUniformLocations
(
)
[
location
.
value
]
;
const
LinkedUniform
&
uniform
=
mState
.
getUniforms
(
)
[
uniformLocation
.
index
]
;
if
(
uniform
.
isSampler
(
)
)
{
*
v
=
static_cast
<
GLint
>
(
getSamplerUniformBinding
(
uniformLocation
)
)
;
return
;
}
else
if
(
uniform
.
isImage
(
)
)
{
*
v
=
static_cast
<
GLint
>
(
getImageUniformBinding
(
uniformLocation
)
)
;
return
;
}
const
GLenum
nativeType
=
gl
:
:
VariableComponentType
(
uniform
.
type
)
;
if
(
nativeType
=
=
GL_INT
|
|
nativeType
=
=
GL_BOOL
)
{
mProgram
-
>
getUniformiv
(
context
location
.
value
v
)
;
}
else
{
getUniformInternal
(
context
v
location
nativeType
VariableComponentCount
(
uniform
.
type
)
)
;
}
}
void
Program
:
:
getUniformuiv
(
const
Context
*
context
UniformLocation
location
GLuint
*
v
)
const
{
ASSERT
(
!
mLinkingState
)
;
const
VariableLocation
&
uniformLocation
=
mState
.
getUniformLocations
(
)
[
location
.
value
]
;
const
LinkedUniform
&
uniform
=
mState
.
getUniforms
(
)
[
uniformLocation
.
index
]
;
if
(
uniform
.
isSampler
(
)
)
{
*
v
=
getSamplerUniformBinding
(
uniformLocation
)
;
return
;
}
else
if
(
uniform
.
isImage
(
)
)
{
*
v
=
getImageUniformBinding
(
uniformLocation
)
;
return
;
}
const
GLenum
nativeType
=
VariableComponentType
(
uniform
.
type
)
;
if
(
nativeType
=
=
GL_UNSIGNED_INT
)
{
mProgram
-
>
getUniformuiv
(
context
location
.
value
v
)
;
}
else
{
getUniformInternal
(
context
v
location
nativeType
VariableComponentCount
(
uniform
.
type
)
)
;
}
}
void
Program
:
:
flagForDeletion
(
)
{
ASSERT
(
!
mLinkingState
)
;
mDeleteStatus
=
true
;
}
bool
Program
:
:
isFlaggedForDeletion
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mDeleteStatus
;
}
void
Program
:
:
validate
(
const
Caps
&
caps
)
{
ASSERT
(
!
mLinkingState
)
;
mState
.
mExecutable
-
>
resetInfoLog
(
)
;
InfoLog
&
infoLog
=
mState
.
mExecutable
-
>
getInfoLog
(
)
;
if
(
mLinked
)
{
mValidated
=
ConvertToBool
(
mProgram
-
>
validate
(
caps
&
infoLog
)
)
;
}
else
{
infoLog
<
<
"
Program
has
not
been
successfully
linked
.
"
;
}
}
bool
Program
:
:
isValidated
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mValidated
;
}
void
Program
:
:
getActiveUniformBlockName
(
const
Context
*
context
const
UniformBlockIndex
blockIndex
GLsizei
bufSize
GLsizei
*
length
GLchar
*
blockName
)
const
{
ASSERT
(
!
mLinkingState
)
;
GetInterfaceBlockName
(
blockIndex
mState
.
mExecutable
-
>
getUniformBlocks
(
)
bufSize
length
blockName
)
;
}
void
Program
:
:
getActiveShaderStorageBlockName
(
const
GLuint
blockIndex
GLsizei
bufSize
GLsizei
*
length
GLchar
*
blockName
)
const
{
ASSERT
(
!
mLinkingState
)
;
GetInterfaceBlockName
(
{
blockIndex
}
mState
.
mExecutable
-
>
getShaderStorageBlocks
(
)
bufSize
length
blockName
)
;
}
template
<
typename
T
>
GLint
Program
:
:
getActiveInterfaceBlockMaxNameLength
(
const
std
:
:
vector
<
T
>
&
resources
)
const
{
int
maxLength
=
0
;
if
(
mLinked
)
{
for
(
const
T
&
resource
:
resources
)
{
if
(
!
resource
.
name
.
empty
(
)
)
{
int
length
=
static_cast
<
int
>
(
resource
.
nameWithArrayIndex
(
)
.
length
(
)
)
;
maxLength
=
std
:
:
max
(
length
+
1
maxLength
)
;
}
}
}
return
maxLength
;
}
GLint
Program
:
:
getActiveUniformBlockMaxNameLength
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
getActiveInterfaceBlockMaxNameLength
(
mState
.
mExecutable
-
>
getUniformBlocks
(
)
)
;
}
GLint
Program
:
:
getActiveShaderStorageBlockMaxNameLength
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
getActiveInterfaceBlockMaxNameLength
(
mState
.
mExecutable
-
>
getShaderStorageBlocks
(
)
)
;
}
GLuint
Program
:
:
getUniformBlockIndex
(
const
std
:
:
string
&
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
GetInterfaceBlockIndex
(
mState
.
mExecutable
-
>
getUniformBlocks
(
)
name
)
;
}
GLuint
Program
:
:
getShaderStorageBlockIndex
(
const
std
:
:
string
&
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
GetInterfaceBlockIndex
(
mState
.
mExecutable
-
>
getShaderStorageBlocks
(
)
name
)
;
}
const
InterfaceBlock
&
Program
:
:
getUniformBlockByIndex
(
GLuint
index
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
index
<
static_cast
<
GLuint
>
(
mState
.
mExecutable
-
>
getActiveUniformBlockCount
(
)
)
)
;
return
mState
.
mExecutable
-
>
getUniformBlocks
(
)
[
index
]
;
}
const
InterfaceBlock
&
Program
:
:
getShaderStorageBlockByIndex
(
GLuint
index
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
index
<
static_cast
<
GLuint
>
(
mState
.
mExecutable
-
>
getActiveShaderStorageBlockCount
(
)
)
)
;
return
mState
.
mExecutable
-
>
getShaderStorageBlocks
(
)
[
index
]
;
}
void
Program
:
:
bindUniformBlock
(
UniformBlockIndex
uniformBlockIndex
GLuint
uniformBlockBinding
)
{
ASSERT
(
!
mLinkingState
)
;
mState
.
mExecutable
-
>
mUniformBlocks
[
uniformBlockIndex
.
value
]
.
binding
=
uniformBlockBinding
;
mState
.
mExecutable
-
>
mActiveUniformBlockBindings
.
set
(
uniformBlockIndex
.
value
uniformBlockBinding
!
=
0
)
;
mDirtyBits
.
set
(
DIRTY_BIT_UNIFORM_BLOCK_BINDING_0
+
uniformBlockIndex
.
value
)
;
}
GLuint
Program
:
:
getUniformBlockBinding
(
GLuint
uniformBlockIndex
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
getUniformBlockBinding
(
uniformBlockIndex
)
;
}
GLuint
Program
:
:
getShaderStorageBlockBinding
(
GLuint
shaderStorageBlockIndex
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
getShaderStorageBlockBinding
(
shaderStorageBlockIndex
)
;
}
void
Program
:
:
setTransformFeedbackVaryings
(
GLsizei
count
const
GLchar
*
const
*
varyings
GLenum
bufferMode
)
{
ASSERT
(
!
mLinkingState
)
;
mState
.
mTransformFeedbackVaryingNames
.
resize
(
count
)
;
for
(
GLsizei
i
=
0
;
i
<
count
;
i
+
+
)
{
mState
.
mTransformFeedbackVaryingNames
[
i
]
=
varyings
[
i
]
;
}
mState
.
mExecutable
-
>
mTransformFeedbackBufferMode
=
bufferMode
;
}
void
Program
:
:
getTransformFeedbackVarying
(
GLuint
index
GLsizei
bufSize
GLsizei
*
length
GLsizei
*
size
GLenum
*
type
GLchar
*
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
mLinked
)
{
ASSERT
(
index
<
mState
.
mExecutable
-
>
mLinkedTransformFeedbackVaryings
.
size
(
)
)
;
const
auto
&
var
=
mState
.
mExecutable
-
>
mLinkedTransformFeedbackVaryings
[
index
]
;
std
:
:
string
varName
=
var
.
nameWithArrayIndex
(
)
;
GLsizei
lastNameIdx
=
std
:
:
min
(
bufSize
-
1
static_cast
<
GLsizei
>
(
varName
.
length
(
)
)
)
;
if
(
length
)
{
*
length
=
lastNameIdx
;
}
if
(
size
)
{
*
size
=
var
.
size
(
)
;
}
if
(
type
)
{
*
type
=
var
.
type
;
}
if
(
name
)
{
memcpy
(
name
varName
.
c_str
(
)
lastNameIdx
)
;
name
[
lastNameIdx
]
=
'
\
0
'
;
}
}
}
GLsizei
Program
:
:
getTransformFeedbackVaryingCount
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
mLinked
)
{
return
static_cast
<
GLsizei
>
(
mState
.
mExecutable
-
>
mLinkedTransformFeedbackVaryings
.
size
(
)
)
;
}
else
{
return
0
;
}
}
GLsizei
Program
:
:
getTransformFeedbackVaryingMaxLength
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
if
(
mLinked
)
{
GLsizei
maxSize
=
0
;
for
(
const
auto
&
var
:
mState
.
mExecutable
-
>
mLinkedTransformFeedbackVaryings
)
{
maxSize
=
std
:
:
max
(
maxSize
static_cast
<
GLsizei
>
(
var
.
nameWithArrayIndex
(
)
.
length
(
)
+
1
)
)
;
}
return
maxSize
;
}
else
{
return
0
;
}
}
GLenum
Program
:
:
getTransformFeedbackBufferMode
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mExecutable
-
>
getTransformFeedbackBufferMode
(
)
;
}
bool
Program
:
:
linkValidateShaders
(
const
Context
*
context
InfoLog
&
infoLog
)
{
const
ShaderMap
<
Shader
*
>
&
shaders
=
mState
.
mAttachedShaders
;
bool
isComputeShaderAttached
=
shaders
[
ShaderType
:
:
Compute
]
!
=
nullptr
;
bool
isGraphicsShaderAttached
=
shaders
[
ShaderType
:
:
Vertex
]
|
|
shaders
[
ShaderType
:
:
TessControl
]
|
|
shaders
[
ShaderType
:
:
TessEvaluation
]
|
|
shaders
[
ShaderType
:
:
Geometry
]
|
|
shaders
[
ShaderType
:
:
Fragment
]
;
if
(
isComputeShaderAttached
&
&
isGraphicsShaderAttached
)
{
infoLog
<
<
"
Both
compute
and
graphics
shaders
are
attached
to
the
same
program
.
"
;
return
false
;
}
Optional
<
int
>
version
;
for
(
ShaderType
shaderType
:
kAllGraphicsShaderTypes
)
{
Shader
*
shader
=
shaders
[
shaderType
]
;
ASSERT
(
!
shader
|
|
shader
-
>
getType
(
)
=
=
shaderType
)
;
if
(
!
shader
)
{
continue
;
}
if
(
!
shader
-
>
isCompiled
(
context
)
)
{
infoLog
<
<
ShaderTypeToString
(
shaderType
)
<
<
"
shader
is
not
compiled
.
"
;
return
false
;
}
if
(
!
version
.
valid
(
)
)
{
version
=
shader
-
>
getShaderVersion
(
context
)
;
}
else
if
(
version
!
=
shader
-
>
getShaderVersion
(
context
)
)
{
infoLog
<
<
ShaderTypeToString
(
shaderType
)
<
<
"
shader
version
does
not
match
other
shader
versions
.
"
;
return
false
;
}
}
if
(
isComputeShaderAttached
)
{
ASSERT
(
shaders
[
ShaderType
:
:
Compute
]
-
>
getType
(
)
=
=
ShaderType
:
:
Compute
)
;
mState
.
mComputeShaderLocalSize
=
shaders
[
ShaderType
:
:
Compute
]
-
>
getWorkGroupSize
(
context
)
;
if
(
!
mState
.
mComputeShaderLocalSize
.
isDeclared
(
)
)
{
infoLog
<
<
"
Work
group
size
is
not
specified
.
"
;
return
false
;
}
}
else
{
if
(
!
isGraphicsShaderAttached
)
{
infoLog
<
<
"
No
compiled
shaders
.
"
;
return
false
;
}
bool
hasVertex
=
shaders
[
ShaderType
:
:
Vertex
]
!
=
nullptr
;
bool
hasFragment
=
shaders
[
ShaderType
:
:
Fragment
]
!
=
nullptr
;
if
(
!
isSeparable
(
)
&
&
(
!
hasVertex
|
|
!
hasFragment
)
)
{
infoLog
<
<
"
The
program
must
contain
objects
to
form
both
a
vertex
and
fragment
shader
.
"
;
return
false
;
}
bool
hasTessControl
=
shaders
[
ShaderType
:
:
TessControl
]
!
=
nullptr
;
bool
hasTessEvaluation
=
shaders
[
ShaderType
:
:
TessEvaluation
]
!
=
nullptr
;
if
(
!
isSeparable
(
)
&
&
(
hasTessControl
!
=
hasTessEvaluation
)
)
{
infoLog
<
<
"
Tessellation
control
and
evaluation
shaders
must
be
specified
together
.
"
;
return
false
;
}
Shader
*
geometryShader
=
shaders
[
ShaderType
:
:
Geometry
]
;
if
(
shaders
[
ShaderType
:
:
Geometry
]
)
{
ASSERT
(
geometryShader
-
>
getType
(
)
=
=
ShaderType
:
:
Geometry
)
;
Optional
<
PrimitiveMode
>
inputPrimitive
=
geometryShader
-
>
getGeometryShaderInputPrimitiveType
(
context
)
;
if
(
!
inputPrimitive
.
valid
(
)
)
{
infoLog
<
<
"
Input
primitive
type
is
not
specified
in
the
geometry
shader
.
"
;
return
false
;
}
Optional
<
PrimitiveMode
>
outputPrimitive
=
geometryShader
-
>
getGeometryShaderOutputPrimitiveType
(
context
)
;
if
(
!
outputPrimitive
.
valid
(
)
)
{
infoLog
<
<
"
Output
primitive
type
is
not
specified
in
the
geometry
shader
.
"
;
return
false
;
}
Optional
<
GLint
>
maxVertices
=
geometryShader
-
>
getGeometryShaderMaxVertices
(
context
)
;
if
(
!
maxVertices
.
valid
(
)
)
{
infoLog
<
<
"
'
max_vertices
'
is
not
specified
in
the
geometry
shader
.
"
;
return
false
;
}
mState
.
mExecutable
-
>
mGeometryShaderInputPrimitiveType
=
inputPrimitive
.
value
(
)
;
mState
.
mExecutable
-
>
mGeometryShaderOutputPrimitiveType
=
outputPrimitive
.
value
(
)
;
mState
.
mExecutable
-
>
mGeometryShaderMaxVertices
=
maxVertices
.
value
(
)
;
mState
.
mExecutable
-
>
mGeometryShaderInvocations
=
geometryShader
-
>
getGeometryShaderInvocations
(
context
)
;
}
Shader
*
tessControlShader
=
shaders
[
ShaderType
:
:
TessControl
]
;
if
(
tessControlShader
)
{
int
tcsShaderVertices
=
tessControlShader
-
>
getTessControlShaderVertices
(
context
)
;
if
(
tcsShaderVertices
=
=
0
)
{
infoLog
<
<
"
In
Tessellation
Control
Shader
at
least
one
layout
qualifier
"
"
specifying
an
output
patch
vertex
count
must
exist
.
"
;
return
false
;
}
mState
.
mExecutable
-
>
mTessControlShaderVertices
=
tcsShaderVertices
;
}
Shader
*
tessEvaluationShader
=
shaders
[
ShaderType
:
:
TessEvaluation
]
;
if
(
tessEvaluationShader
)
{
GLenum
tesPrimitiveMode
=
tessEvaluationShader
-
>
getTessGenMode
(
context
)
;
if
(
tesPrimitiveMode
=
=
0
)
{
infoLog
<
<
"
The
Tessellation
Evaluation
Shader
object
in
a
program
must
declare
a
"
"
primitive
mode
in
its
input
layout
.
"
;
return
false
;
}
mState
.
mExecutable
-
>
mTessGenMode
=
tesPrimitiveMode
;
mState
.
mExecutable
-
>
mTessGenSpacing
=
tessEvaluationShader
-
>
getTessGenSpacing
(
context
)
;
mState
.
mExecutable
-
>
mTessGenVertexOrder
=
tessEvaluationShader
-
>
getTessGenVertexOrder
(
context
)
;
mState
.
mExecutable
-
>
mTessGenPointMode
=
tessEvaluationShader
-
>
getTessGenPointMode
(
context
)
;
}
}
return
true
;
}
GLuint
Program
:
:
getTransformFeedbackVaryingResourceIndex
(
const
GLchar
*
name
)
const
{
ASSERT
(
!
mLinkingState
)
;
for
(
GLuint
tfIndex
=
0
;
tfIndex
<
mState
.
mExecutable
-
>
mLinkedTransformFeedbackVaryings
.
size
(
)
;
+
+
tfIndex
)
{
const
auto
&
tf
=
mState
.
mExecutable
-
>
mLinkedTransformFeedbackVaryings
[
tfIndex
]
;
if
(
tf
.
nameWithArrayIndex
(
)
=
=
name
)
{
return
tfIndex
;
}
}
return
GL_INVALID_INDEX
;
}
const
TransformFeedbackVarying
&
Program
:
:
getTransformFeedbackVaryingResource
(
GLuint
index
)
const
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
index
<
mState
.
mExecutable
-
>
mLinkedTransformFeedbackVaryings
.
size
(
)
)
;
return
mState
.
mExecutable
-
>
mLinkedTransformFeedbackVaryings
[
index
]
;
}
bool
Program
:
:
hasDrawIDUniform
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mDrawIDLocation
>
=
0
;
}
void
Program
:
:
setDrawIDUniform
(
GLint
drawid
)
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
mState
.
mDrawIDLocation
>
=
0
)
;
mProgram
-
>
setUniform1iv
(
mState
.
mDrawIDLocation
1
&
drawid
)
;
}
bool
Program
:
:
hasBaseVertexUniform
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mBaseVertexLocation
>
=
0
;
}
void
Program
:
:
setBaseVertexUniform
(
GLint
baseVertex
)
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
mState
.
mBaseVertexLocation
>
=
0
)
;
if
(
baseVertex
=
=
mState
.
mCachedBaseVertex
)
{
return
;
}
mState
.
mCachedBaseVertex
=
baseVertex
;
mProgram
-
>
setUniform1iv
(
mState
.
mBaseVertexLocation
1
&
baseVertex
)
;
}
bool
Program
:
:
hasBaseInstanceUniform
(
)
const
{
ASSERT
(
!
mLinkingState
)
;
return
mState
.
mBaseInstanceLocation
>
=
0
;
}
void
Program
:
:
setBaseInstanceUniform
(
GLuint
baseInstance
)
{
ASSERT
(
!
mLinkingState
)
;
ASSERT
(
mState
.
mBaseInstanceLocation
>
=
0
)
;
if
(
baseInstance
=
=
mState
.
mCachedBaseInstance
)
{
return
;
}
mState
.
mCachedBaseInstance
=
baseInstance
;
GLint
baseInstanceInt
=
baseInstance
;
mProgram
-
>
setUniform1iv
(
mState
.
mBaseInstanceLocation
1
&
baseInstanceInt
)
;
}
bool
Program
:
:
linkVaryings
(
const
Context
*
context
InfoLog
&
infoLog
)
const
{
ShaderType
previousShaderType
=
ShaderType
:
:
InvalidEnum
;
for
(
ShaderType
shaderType
:
kAllGraphicsShaderTypes
)
{
Shader
*
currentShader
=
mState
.
mAttachedShaders
[
shaderType
]
;
if
(
!
currentShader
)
{
continue
;
}
if
(
previousShaderType
!
=
ShaderType
:
:
InvalidEnum
)
{
Shader
*
previousShader
=
mState
.
mAttachedShaders
[
previousShaderType
]
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
outputVaryings
=
previousShader
-
>
getOutputVaryings
(
context
)
;
if
(
!
LinkValidateShaderInterfaceMatching
(
outputVaryings
currentShader
-
>
getInputVaryings
(
context
)
previousShaderType
currentShader
-
>
getType
(
)
previousShader
-
>
getShaderVersion
(
context
)
currentShader
-
>
getShaderVersion
(
context
)
isSeparable
(
)
infoLog
)
)
{
return
false
;
}
}
previousShaderType
=
currentShader
-
>
getType
(
)
;
}
Shader
*
vertexShader
=
mState
.
mAttachedShaders
[
ShaderType
:
:
Vertex
]
;
Shader
*
fragmentShader
=
mState
.
mAttachedShaders
[
ShaderType
:
:
Fragment
]
;
if
(
vertexShader
&
&
fragmentShader
&
&
!
LinkValidateBuiltInVaryings
(
vertexShader
-
>
getOutputVaryings
(
context
)
fragmentShader
-
>
getInputVaryings
(
context
)
vertexShader
-
>
getType
(
)
fragmentShader
-
>
getType
(
)
vertexShader
-
>
getShaderVersion
(
context
)
fragmentShader
-
>
getShaderVersion
(
context
)
infoLog
)
)
{
return
false
;
}
return
true
;
}
bool
Program
:
:
linkUniforms
(
const
Context
*
context
std
:
:
vector
<
UnusedUniform
>
*
unusedUniformsOutOrNull
GLuint
*
combinedImageUniformsOut
InfoLog
&
infoLog
)
{
ShaderMap
<
std
:
:
vector
<
sh
:
:
ShaderVariable
>
>
shaderUniforms
;
for
(
Shader
*
shader
:
mState
.
mAttachedShaders
)
{
if
(
shader
)
{
shaderUniforms
[
shader
-
>
getType
(
)
]
=
shader
-
>
getUniforms
(
context
)
;
}
}
if
(
!
mState
.
mExecutable
-
>
linkUniforms
(
context
shaderUniforms
infoLog
mState
.
mUniformLocationBindings
combinedImageUniformsOut
unusedUniformsOutOrNull
&
mState
.
mUniformLocations
)
)
{
return
false
;
}
if
(
context
-
>
getClientVersion
(
)
>
=
Version
(
3
1
)
)
{
GLint
locationSize
=
static_cast
<
GLint
>
(
mState
.
getUniformLocations
(
)
.
size
(
)
)
;
if
(
locationSize
>
context
-
>
getCaps
(
)
.
maxUniformLocations
)
{
infoLog
<
<
"
Exceeded
maximum
uniform
location
size
"
;
return
false
;
}
}
return
true
;
}
bool
Program
:
:
linkAttributes
(
const
Context
*
context
InfoLog
&
infoLog
)
{
const
Caps
&
caps
=
context
-
>
getCaps
(
)
;
const
Limitations
&
limitations
=
context
-
>
getLimitations
(
)
;
bool
webglCompatibility
=
context
-
>
isWebGL
(
)
;
int
shaderVersion
=
-
1
;
unsigned
int
usedLocations
=
0
;
Shader
*
vertexShader
=
mState
.
getAttachedShader
(
gl
:
:
ShaderType
:
:
Vertex
)
;
if
(
!
vertexShader
)
{
return
true
;
}
shaderVersion
=
vertexShader
-
>
getShaderVersion
(
context
)
;
if
(
shaderVersion
>
=
300
)
{
mState
.
mExecutable
-
>
mProgramInputs
=
vertexShader
-
>
getAllAttributes
(
context
)
;
}
else
{
mState
.
mExecutable
-
>
mProgramInputs
=
vertexShader
-
>
getActiveAttributes
(
context
)
;
}
GLuint
maxAttribs
=
static_cast
<
GLuint
>
(
caps
.
maxVertexAttributes
)
;
std
:
:
vector
<
sh
:
:
ShaderVariable
*
>
usedAttribMap
(
maxAttribs
nullptr
)
;
for
(
sh
:
:
ShaderVariable
&
attribute
:
mState
.
mExecutable
-
>
mProgramInputs
)
{
ASSERT
(
!
attribute
.
isArray
(
)
&
&
!
attribute
.
isStruct
(
)
)
;
int
bindingLocation
=
mAttributeBindings
.
getBinding
(
attribute
)
;
if
(
attribute
.
location
=
=
-
1
&
&
bindingLocation
!
=
-
1
)
{
attribute
.
location
=
bindingLocation
;
}
if
(
attribute
.
location
!
=
-
1
)
{
const
int
regs
=
VariableRegisterCount
(
attribute
.
type
)
;
if
(
static_cast
<
GLuint
>
(
regs
+
attribute
.
location
)
>
maxAttribs
)
{
infoLog
<
<
"
Attribute
(
"
<
<
attribute
.
name
<
<
"
)
at
location
"
<
<
attribute
.
location
<
<
"
is
too
big
to
fit
"
;
return
false
;
}
for
(
int
reg
=
0
;
reg
<
regs
;
reg
+
+
)
{
const
int
regLocation
=
attribute
.
location
+
reg
;
sh
:
:
ShaderVariable
*
linkedAttribute
=
usedAttribMap
[
regLocation
]
;
if
(
linkedAttribute
)
{
if
(
shaderVersion
>
=
300
|
|
webglCompatibility
|
|
limitations
.
noVertexAttributeAliasing
)
{
infoLog
<
<
"
Attribute
'
"
<
<
attribute
.
name
<
<
"
'
aliases
attribute
'
"
<
<
linkedAttribute
-
>
name
<
<
"
'
at
location
"
<
<
regLocation
;
return
false
;
}
}
else
{
usedAttribMap
[
regLocation
]
=
&
attribute
;
}
usedLocations
|
=
1
<
<
regLocation
;
}
}
}
for
(
sh
:
:
ShaderVariable
&
attribute
:
mState
.
mExecutable
-
>
mProgramInputs
)
{
if
(
attribute
.
location
=
=
-
1
)
{
int
regs
=
VariableRegisterCount
(
attribute
.
type
)
;
int
availableIndex
=
AllocateFirstFreeBits
(
&
usedLocations
regs
maxAttribs
)
;
if
(
availableIndex
=
=
-
1
|
|
static_cast
<
GLuint
>
(
availableIndex
+
regs
)
>
maxAttribs
)
{
infoLog
<
<
"
Too
many
attributes
(
"
<
<
attribute
.
name
<
<
"
)
"
;
return
false
;
}
attribute
.
location
=
availableIndex
;
}
}
ASSERT
(
mState
.
mExecutable
-
>
mAttributesTypeMask
.
none
(
)
)
;
ASSERT
(
mState
.
mExecutable
-
>
mAttributesMask
.
none
(
)
)
;
if
(
shaderVersion
>
=
300
)
{
for
(
auto
attributeIter
=
mState
.
mExecutable
-
>
getProgramInputs
(
)
.
begin
(
)
;
attributeIter
!
=
mState
.
mExecutable
-
>
getProgramInputs
(
)
.
end
(
)
;
)
{
if
(
attributeIter
-
>
active
)
{
+
+
attributeIter
;
}
else
{
attributeIter
=
mState
.
mExecutable
-
>
mProgramInputs
.
erase
(
attributeIter
)
;
}
}
}
for
(
const
sh
:
:
ShaderVariable
&
attribute
:
mState
.
mExecutable
-
>
getProgramInputs
(
)
)
{
ASSERT
(
attribute
.
active
)
;
ASSERT
(
attribute
.
location
!
=
-
1
)
;
unsigned
int
regs
=
static_cast
<
unsigned
int
>
(
VariableRegisterCount
(
attribute
.
type
)
)
;
unsigned
int
location
=
static_cast
<
unsigned
int
>
(
attribute
.
location
)
;
for
(
unsigned
int
r
=
0
;
r
<
regs
;
r
+
+
)
{
if
(
!
attribute
.
isBuiltIn
(
)
)
{
mState
.
mExecutable
-
>
mActiveAttribLocationsMask
.
set
(
location
)
;
mState
.
mExecutable
-
>
mMaxActiveAttribLocation
=
std
:
:
max
(
mState
.
mExecutable
-
>
mMaxActiveAttribLocation
location
+
1
)
;
ComponentType
componentType
=
GLenumToComponentType
(
VariableComponentType
(
attribute
.
type
)
)
;
SetComponentTypeMask
(
componentType
location
&
mState
.
mExecutable
-
>
mAttributesTypeMask
)
;
mState
.
mExecutable
-
>
mAttributesMask
.
set
(
location
)
;
location
+
+
;
}
}
}
return
true
;
}
void
Program
:
:
setUniformValuesFromBindingQualifiers
(
)
{
for
(
unsigned
int
samplerIndex
:
mState
.
mExecutable
-
>
getSamplerUniformRange
(
)
)
{
const
auto
&
samplerUniform
=
mState
.
mExecutable
-
>
getUniforms
(
)
[
samplerIndex
]
;
if
(
samplerUniform
.
binding
!
=
-
1
)
{
UniformLocation
location
=
getUniformLocation
(
samplerUniform
.
name
)
;
ASSERT
(
location
.
value
!
=
-
1
)
;
std
:
:
vector
<
GLint
>
boundTextureUnits
;
for
(
unsigned
int
elementIndex
=
0
;
elementIndex
<
samplerUniform
.
getBasicTypeElementCount
(
)
;
+
+
elementIndex
)
{
boundTextureUnits
.
push_back
(
samplerUniform
.
binding
+
elementIndex
)
;
}
setUniform1iv
(
nullptr
location
static_cast
<
GLsizei
>
(
boundTextureUnits
.
size
(
)
)
boundTextureUnits
.
data
(
)
)
;
}
}
}
void
Program
:
:
initInterfaceBlockBindings
(
)
{
for
(
unsigned
int
blockIndex
=
0
;
blockIndex
<
mState
.
mExecutable
-
>
getActiveUniformBlockCount
(
)
;
blockIndex
+
+
)
{
InterfaceBlock
&
uniformBlock
=
mState
.
mExecutable
-
>
mUniformBlocks
[
blockIndex
]
;
bindUniformBlock
(
{
blockIndex
}
uniformBlock
.
binding
)
;
}
}
void
Program
:
:
updateSamplerUniform
(
Context
*
context
const
VariableLocation
&
locationInfo
GLsizei
clampedCount
const
GLint
*
v
)
{
ASSERT
(
mState
.
isSamplerUniformIndex
(
locationInfo
.
index
)
)
;
GLuint
samplerIndex
=
mState
.
getSamplerIndexFromUniformIndex
(
locationInfo
.
index
)
;
SamplerBinding
&
samplerBinding
=
mState
.
mExecutable
-
>
mSamplerBindings
[
samplerIndex
]
;
std
:
:
vector
<
GLuint
>
&
boundTextureUnits
=
samplerBinding
.
boundTextureUnits
;
if
(
locationInfo
.
arrayIndex
>
=
boundTextureUnits
.
size
(
)
)
{
return
;
}
GLsizei
safeUniformCount
=
std
:
:
min
(
clampedCount
static_cast
<
GLsizei
>
(
boundTextureUnits
.
size
(
)
-
locationInfo
.
arrayIndex
)
)
;
for
(
GLsizei
arrayIndex
=
0
;
arrayIndex
<
safeUniformCount
;
+
+
arrayIndex
)
{
GLint
oldTextureUnit
=
boundTextureUnits
[
arrayIndex
+
locationInfo
.
arrayIndex
]
;
GLint
newTextureUnit
=
v
[
arrayIndex
]
;
if
(
oldTextureUnit
=
=
newTextureUnit
)
{
continue
;
}
boundTextureUnits
[
arrayIndex
+
locationInfo
.
arrayIndex
]
=
newTextureUnit
;
uint32_t
&
oldRefCount
=
mState
.
mExecutable
-
>
mActiveSamplerRefCounts
[
oldTextureUnit
]
;
uint32_t
&
newRefCount
=
mState
.
mExecutable
-
>
mActiveSamplerRefCounts
[
newTextureUnit
]
;
ASSERT
(
oldRefCount
>
0
)
;
ASSERT
(
newRefCount
<
std
:
:
numeric_limits
<
uint32_t
>
:
:
max
(
)
)
;
oldRefCount
-
-
;
newRefCount
+
+
;
TextureType
newSamplerType
=
mState
.
mExecutable
-
>
mActiveSamplerTypes
[
newTextureUnit
]
;
TextureType
oldSamplerType
=
mState
.
mExecutable
-
>
mActiveSamplerTypes
[
oldTextureUnit
]
;
SamplerFormat
newSamplerFormat
=
mState
.
mExecutable
-
>
mActiveSamplerFormats
[
newTextureUnit
]
;
SamplerFormat
oldSamplerFormat
=
mState
.
mExecutable
-
>
mActiveSamplerFormats
[
oldTextureUnit
]
;
bool
newSamplerYUV
=
mState
.
mExecutable
-
>
mActiveSamplerYUV
.
test
(
newTextureUnit
)
;
if
(
newRefCount
=
=
1
)
{
mState
.
mExecutable
-
>
setActive
(
newTextureUnit
samplerBinding
mState
.
mExecutable
-
>
getUniforms
(
)
[
locationInfo
.
index
]
)
;
}
else
{
if
(
newSamplerType
!
=
samplerBinding
.
textureType
|
|
newSamplerYUV
!
=
IsSamplerYUVType
(
samplerBinding
.
samplerType
)
)
{
mState
.
mExecutable
-
>
hasSamplerTypeConflict
(
newTextureUnit
)
;
}
if
(
newSamplerFormat
!
=
samplerBinding
.
format
)
{
mState
.
mExecutable
-
>
hasSamplerFormatConflict
(
newTextureUnit
)
;
}
}
if
(
oldRefCount
=
=
0
)
{
mState
.
mExecutable
-
>
setInactive
(
oldTextureUnit
)
;
}
else
{
if
(
oldSamplerType
=
=
TextureType
:
:
InvalidEnum
|
|
oldSamplerFormat
=
=
SamplerFormat
:
:
InvalidEnum
)
{
mState
.
setSamplerUniformTextureTypeAndFormat
(
oldTextureUnit
)
;
}
}
if
(
isSeparable
(
)
)
{
onStateChange
(
angle
:
:
SubjectMessage
:
:
ProgramTextureOrImageBindingChanged
)
;
}
if
(
context
)
{
context
-
>
onSamplerUniformChange
(
newTextureUnit
)
;
context
-
>
onSamplerUniformChange
(
oldTextureUnit
)
;
}
}
getExecutable
(
)
.
resetCachedValidateSamplersResult
(
)
;
onStateChange
(
angle
:
:
SubjectMessage
:
:
SamplerUniformsUpdated
)
;
}
void
ProgramState
:
:
setSamplerUniformTextureTypeAndFormat
(
size_t
textureUnitIndex
)
{
mExecutable
-
>
setSamplerUniformTextureTypeAndFormat
(
textureUnitIndex
mExecutable
-
>
mSamplerBindings
)
;
}
template
<
typename
T
>
GLsizei
Program
:
:
clampUniformCount
(
const
VariableLocation
&
locationInfo
GLsizei
count
int
vectorSize
const
T
*
v
)
{
if
(
count
=
=
1
)
return
1
;
const
LinkedUniform
&
linkedUniform
=
mState
.
mExecutable
-
>
getUniforms
(
)
[
locationInfo
.
index
]
;
unsigned
int
remainingElements
=
linkedUniform
.
getBasicTypeElementCount
(
)
-
locationInfo
.
arrayIndex
;
GLsizei
maxElementCount
=
static_cast
<
GLsizei
>
(
remainingElements
*
linkedUniform
.
getElementComponents
(
)
)
;
if
(
count
*
vectorSize
>
maxElementCount
)
{
return
maxElementCount
/
vectorSize
;
}
return
count
;
}
template
<
size_t
cols
size_t
rows
typename
T
>
GLsizei
Program
:
:
clampMatrixUniformCount
(
UniformLocation
location
GLsizei
count
GLboolean
transpose
const
T
*
v
)
{
const
VariableLocation
&
locationInfo
=
mState
.
mUniformLocations
[
location
.
value
]
;
if
(
!
transpose
)
{
return
clampUniformCount
(
locationInfo
count
cols
*
rows
v
)
;
}
const
LinkedUniform
&
linkedUniform
=
mState
.
mExecutable
-
>
getUniforms
(
)
[
locationInfo
.
index
]
;
unsigned
int
remainingElements
=
linkedUniform
.
getBasicTypeElementCount
(
)
-
locationInfo
.
arrayIndex
;
return
std
:
:
min
(
count
static_cast
<
GLsizei
>
(
remainingElements
)
)
;
}
template
<
typename
DestT
>
void
Program
:
:
getUniformInternal
(
const
Context
*
context
DestT
*
dataOut
UniformLocation
location
GLenum
nativeType
int
components
)
const
{
switch
(
nativeType
)
{
case
GL_BOOL
:
{
GLint
tempValue
[
16
]
=
{
0
}
;
mProgram
-
>
getUniformiv
(
context
location
.
value
tempValue
)
;
UniformStateQueryCastLoop
<
GLboolean
>
(
dataOut
reinterpret_cast
<
const
uint8_t
*
>
(
tempValue
)
components
)
;
break
;
}
case
GL_INT
:
{
GLint
tempValue
[
16
]
=
{
0
}
;
mProgram
-
>
getUniformiv
(
context
location
.
value
tempValue
)
;
UniformStateQueryCastLoop
<
GLint
>
(
dataOut
reinterpret_cast
<
const
uint8_t
*
>
(
tempValue
)
components
)
;
break
;
}
case
GL_UNSIGNED_INT
:
{
GLuint
tempValue
[
16
]
=
{
0
}
;
mProgram
-
>
getUniformuiv
(
context
location
.
value
tempValue
)
;
UniformStateQueryCastLoop
<
GLuint
>
(
dataOut
reinterpret_cast
<
const
uint8_t
*
>
(
tempValue
)
components
)
;
break
;
}
case
GL_FLOAT
:
{
GLfloat
tempValue
[
16
]
=
{
0
}
;
mProgram
-
>
getUniformfv
(
context
location
.
value
tempValue
)
;
UniformStateQueryCastLoop
<
GLfloat
>
(
dataOut
reinterpret_cast
<
const
uint8_t
*
>
(
tempValue
)
components
)
;
break
;
}
default
:
UNREACHABLE
(
)
;
break
;
}
}
angle
:
:
Result
Program
:
:
syncState
(
const
Context
*
context
)
{
if
(
mDirtyBits
.
any
(
)
)
{
ASSERT
(
!
mLinkingState
)
;
ANGLE_TRY
(
mProgram
-
>
syncState
(
context
mDirtyBits
)
)
;
mDirtyBits
.
reset
(
)
;
}
return
angle
:
:
Result
:
:
Continue
;
}
angle
:
:
Result
Program
:
:
serialize
(
const
Context
*
context
angle
:
:
MemoryBuffer
*
binaryOut
)
const
{
BinaryOutputStream
stream
;
stream
.
writeBytes
(
reinterpret_cast
<
const
unsigned
char
*
>
(
angle
:
:
GetANGLECommitHash
(
)
)
angle
:
:
GetANGLECommitHashSize
(
)
)
;
if
(
context
)
{
stream
.
writeInt
(
context
-
>
getClientVersion
(
)
.
major
)
;
stream
.
writeInt
(
context
-
>
getClientVersion
(
)
.
minor
)
;
}
else
{
stream
.
writeInt
(
2
)
;
stream
.
writeInt
(
0
)
;
}
stream
.
writeBool
(
mState
.
mSeparable
)
;
mState
.
mExecutable
-
>
save
(
mState
.
mSeparable
&
stream
)
;
const
auto
&
computeLocalSize
=
mState
.
getComputeShaderLocalSize
(
)
;
stream
.
writeInt
(
computeLocalSize
[
0
]
)
;
stream
.
writeInt
(
computeLocalSize
[
1
]
)
;
stream
.
writeInt
(
computeLocalSize
[
2
]
)
;
stream
.
writeInt
(
mState
.
mNumViews
)
;
stream
.
writeInt
(
mState
.
mSpecConstUsageBits
.
bits
(
)
)
;
stream
.
writeInt
(
mState
.
getUniformLocations
(
)
.
size
(
)
)
;
for
(
const
auto
&
variable
:
mState
.
getUniformLocations
(
)
)
{
stream
.
writeInt
(
variable
.
arrayIndex
)
;
stream
.
writeIntOrNegOne
(
variable
.
index
)
;
stream
.
writeBool
(
variable
.
ignored
)
;
}
stream
.
writeInt
(
mState
.
getBufferVariables
(
)
.
size
(
)
)
;
for
(
const
BufferVariable
&
bufferVariable
:
mState
.
getBufferVariables
(
)
)
{
WriteBufferVariable
(
&
stream
bufferVariable
)
;
}
if
(
!
mState
.
getLinkedTransformFeedbackVaryings
(
)
.
empty
(
)
&
&
context
-
>
getFrontendFeatures
(
)
.
disableProgramCachingForTransformFeedback
.
enabled
)
{
ANGLE_PERF_WARNING
(
context
-
>
getState
(
)
.
getDebug
(
)
GL_DEBUG_SEVERITY_LOW
"
Saving
program
binary
with
transform
feedback
which
is
not
supported
"
"
on
this
driver
.
"
)
;
}
if
(
context
-
>
getShareGroup
(
)
-
>
getFrameCaptureShared
(
)
-
>
enabled
(
)
)
{
for
(
ShaderType
shaderType
:
mState
.
mExecutable
-
>
getLinkedShaderStages
(
)
)
{
gl
:
:
Shader
*
shader
=
getAttachedShader
(
shaderType
)
;
if
(
shader
)
{
stream
.
writeString
(
shader
-
>
getSourceString
(
)
)
;
}
else
{
const
angle
:
:
ProgramSources
&
cachedLinkedSources
=
context
-
>
getShareGroup
(
)
-
>
getFrameCaptureShared
(
)
-
>
getProgramSources
(
id
(
)
)
;
const
std
:
:
string
&
cachedSourceString
=
cachedLinkedSources
[
shaderType
]
;
ASSERT
(
!
cachedSourceString
.
empty
(
)
)
;
stream
.
writeString
(
cachedSourceString
.
c_str
(
)
)
;
}
}
}
mProgram
-
>
save
(
context
&
stream
)
;
ASSERT
(
binaryOut
)
;
if
(
!
binaryOut
-
>
resize
(
stream
.
length
(
)
)
)
{
std
:
:
stringstream
sstream
;
sstream
<
<
"
Failed
to
allocate
enough
memory
to
serialize
a
program
.
(
"
<
<
stream
.
length
(
)
<
<
"
bytes
)
"
;
ANGLE_PERF_WARNING
(
context
-
>
getState
(
)
.
getDebug
(
)
GL_DEBUG_SEVERITY_LOW
sstream
.
str
(
)
.
c_str
(
)
)
;
return
angle
:
:
Result
:
:
Incomplete
;
}
memcpy
(
binaryOut
-
>
data
(
)
stream
.
data
(
)
stream
.
length
(
)
)
;
return
angle
:
:
Result
:
:
Continue
;
}
angle
:
:
Result
Program
:
:
deserialize
(
const
Context
*
context
BinaryInputStream
&
stream
InfoLog
&
infoLog
)
{
std
:
:
vector
<
uint8_t
>
commitString
(
angle
:
:
GetANGLECommitHashSize
(
)
0
)
;
stream
.
readBytes
(
commitString
.
data
(
)
commitString
.
size
(
)
)
;
if
(
memcmp
(
commitString
.
data
(
)
angle
:
:
GetANGLECommitHash
(
)
commitString
.
size
(
)
)
!
=
0
)
{
infoLog
<
<
"
Invalid
program
binary
version
.
"
;
return
angle
:
:
Result
:
:
Stop
;
}
int
majorVersion
=
stream
.
readInt
<
int
>
(
)
;
int
minorVersion
=
stream
.
readInt
<
int
>
(
)
;
if
(
majorVersion
!
=
context
-
>
getClientMajorVersion
(
)
|
|
minorVersion
!
=
context
-
>
getClientMinorVersion
(
)
)
{
infoLog
<
<
"
Cannot
load
program
binaries
across
different
ES
context
versions
.
"
;
return
angle
:
:
Result
:
:
Stop
;
}
mState
.
mSeparable
=
stream
.
readBool
(
)
;
mState
.
mExecutable
-
>
load
(
mState
.
mSeparable
&
stream
)
;
mState
.
mComputeShaderLocalSize
[
0
]
=
stream
.
readInt
<
int
>
(
)
;
mState
.
mComputeShaderLocalSize
[
1
]
=
stream
.
readInt
<
int
>
(
)
;
mState
.
mComputeShaderLocalSize
[
2
]
=
stream
.
readInt
<
int
>
(
)
;
mState
.
mNumViews
=
stream
.
readInt
<
int
>
(
)
;
static_assert
(
sizeof
(
mState
.
mSpecConstUsageBits
.
bits
(
)
)
=
=
sizeof
(
uint32_t
)
)
;
mState
.
mSpecConstUsageBits
=
rx
:
:
SpecConstUsageBits
(
stream
.
readInt
<
uint32_t
>
(
)
)
;
const
size_t
uniformIndexCount
=
stream
.
readInt
<
size_t
>
(
)
;
ASSERT
(
mState
.
mUniformLocations
.
empty
(
)
)
;
for
(
size_t
uniformIndexIndex
=
0
;
uniformIndexIndex
<
uniformIndexCount
;
+
+
uniformIndexIndex
)
{
VariableLocation
variable
;
stream
.
readInt
(
&
variable
.
arrayIndex
)
;
stream
.
readInt
(
&
variable
.
index
)
;
stream
.
readBool
(
&
variable
.
ignored
)
;
mState
.
mUniformLocations
.
push_back
(
variable
)
;
}
size_t
bufferVariableCount
=
stream
.
readInt
<
size_t
>
(
)
;
ASSERT
(
mState
.
mBufferVariables
.
empty
(
)
)
;
for
(
size_t
bufferVarIndex
=
0
;
bufferVarIndex
<
bufferVariableCount
;
+
+
bufferVarIndex
)
{
BufferVariable
bufferVariable
;
LoadBufferVariable
(
&
stream
&
bufferVariable
)
;
mState
.
mBufferVariables
.
push_back
(
bufferVariable
)
;
}
static_assert
(
static_cast
<
unsigned
long
>
(
ShaderType
:
:
EnumCount
)
<
=
sizeof
(
unsigned
long
)
*
8
"
Too
many
shader
types
"
)
;
if
(
mState
.
mExecutable
-
>
getLinkedTransformFeedbackVaryings
(
)
.
size
(
)
>
0
&
&
context
-
>
getFrontendFeatures
(
)
.
disableProgramCachingForTransformFeedback
.
enabled
)
{
infoLog
<
<
"
Current
driver
does
not
support
transform
feedback
in
binary
programs
.
"
;
return
angle
:
:
Result
:
:
Stop
;
}
if
(
!
mState
.
mAttachedShaders
[
ShaderType
:
:
Compute
]
)
{
mState
.
mExecutable
-
>
updateTransformFeedbackStrides
(
)
;
}
postResolveLink
(
context
)
;
mState
.
mExecutable
-
>
updateCanDrawWith
(
)
;
if
(
context
-
>
getShareGroup
(
)
-
>
getFrameCaptureShared
(
)
-
>
enabled
(
)
)
{
angle
:
:
ProgramSources
sources
;
for
(
ShaderType
shaderType
:
mState
.
mExecutable
-
>
getLinkedShaderStages
(
)
)
{
std
:
:
string
shaderSource
=
stream
.
readString
(
)
;
ASSERT
(
shaderSource
.
length
(
)
>
0
)
;
sources
[
shaderType
]
=
std
:
:
move
(
shaderSource
)
;
}
context
-
>
getShareGroup
(
)
-
>
getFrameCaptureShared
(
)
-
>
setProgramSources
(
id
(
)
std
:
:
move
(
sources
)
)
;
}
return
angle
:
:
Result
:
:
Continue
;
}
void
Program
:
:
postResolveLink
(
const
gl
:
:
Context
*
context
)
{
mState
.
updateActiveSamplers
(
)
;
mState
.
mExecutable
-
>
mActiveImageShaderBits
.
fill
(
{
}
)
;
mState
.
mExecutable
-
>
updateActiveImages
(
getExecutable
(
)
)
;
setUniformValuesFromBindingQualifiers
(
)
;
if
(
context
-
>
getExtensions
(
)
.
multiDrawANGLE
)
{
mState
.
mDrawIDLocation
=
getUniformLocation
(
"
gl_DrawID
"
)
.
value
;
}
if
(
context
-
>
getExtensions
(
)
.
baseVertexBaseInstanceShaderBuiltinANGLE
)
{
mState
.
mBaseVertexLocation
=
getUniformLocation
(
"
gl_BaseVertex
"
)
.
value
;
mState
.
mBaseInstanceLocation
=
getUniformLocation
(
"
gl_BaseInstance
"
)
.
value
;
}
}
}
