#
ifndef
LIBANGLE_SIGNAL_UTILS_H_
#
define
LIBANGLE_SIGNAL_UTILS_H_
#
include
"
common
/
angleutils
.
h
"
namespace
gl
{
class
Context
;
}
namespace
angle
{
using
SubjectIndex
=
size_t
;
enum
class
SubjectMessage
{
STATE_CHANGE
}
;
class
ObserverInterface
{
public
:
virtual
~
ObserverInterface
(
)
;
virtual
void
onSubjectStateChange
(
const
gl
:
:
Context
*
context
SubjectIndex
index
SubjectMessage
message
)
=
0
;
}
;
class
ObserverBinding
;
class
Subject
:
NonCopyable
{
public
:
Subject
(
)
;
virtual
~
Subject
(
)
;
void
onStateChange
(
const
gl
:
:
Context
*
context
SubjectMessage
message
)
const
;
bool
hasObservers
(
)
const
;
void
resetObservers
(
)
;
private
:
friend
class
ObserverBinding
;
void
addObserver
(
ObserverBinding
*
observer
)
;
void
removeObserver
(
ObserverBinding
*
observer
)
;
std
:
:
vector
<
ObserverBinding
*
>
mObservers
;
}
;
class
ObserverBinding
final
{
public
:
ObserverBinding
(
ObserverInterface
*
observer
SubjectIndex
index
)
;
~
ObserverBinding
(
)
;
ObserverBinding
(
const
ObserverBinding
&
other
)
;
ObserverBinding
&
operator
=
(
const
ObserverBinding
&
other
)
;
void
bind
(
Subject
*
subject
)
;
void
reset
(
)
;
void
onStateChange
(
const
gl
:
:
Context
*
context
SubjectMessage
message
)
const
;
void
onSubjectReset
(
)
;
private
:
Subject
*
mSubject
;
ObserverInterface
*
mObserver
;
SubjectIndex
mIndex
;
}
;
}
#
endif
