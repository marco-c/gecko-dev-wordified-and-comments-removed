#
ifndef
LIBANGLE_ENTRY_POINT_UTILS_H_
#
define
LIBANGLE_ENTRY_POINT_UTILS_H_
#
include
"
angle_gl
.
h
"
#
include
"
common
/
Optional
.
h
"
#
include
"
common
/
PackedEnums
.
h
"
#
include
"
common
/
angleutils
.
h
"
#
include
"
common
/
entry_points_enum_autogen
.
h
"
#
include
"
common
/
mathutil
.
h
"
#
include
"
libANGLE
/
Display
.
h
"
namespace
gl
{
template
<
EntryPoint
EP
typename
ReturnType
>
struct
DefaultReturnValue
;
template
<
EntryPoint
EP
>
struct
DefaultReturnValue
<
EP
GLint
>
{
static
constexpr
GLint
kValue
=
-
1
;
}
;
template
<
EntryPoint
EP
>
struct
DefaultReturnValue
<
EP
GLuint
>
{
static
constexpr
GLuint
kValue
=
0
;
}
;
template
<
EntryPoint
EP
>
struct
DefaultReturnValue
<
EP
GLboolean
>
{
static
constexpr
GLboolean
kValue
=
GL_FALSE
;
}
;
template
<
EntryPoint
EP
>
struct
DefaultReturnValue
<
EP
ShaderProgramID
>
{
static
constexpr
ShaderProgramID
kValue
=
{
0
}
;
}
;
template
<
EntryPoint
EP
typename
PointerType
>
struct
DefaultReturnValue
<
EP
const
PointerType
*
>
{
static
constexpr
const
PointerType
*
kValue
=
nullptr
;
}
;
template
<
EntryPoint
EP
typename
PointerType
>
struct
DefaultReturnValue
<
EP
PointerType
*
>
{
static
constexpr
PointerType
*
kValue
=
nullptr
;
}
;
template
<
>
struct
DefaultReturnValue
<
EntryPoint
:
:
GetUniformBlockIndex
GLuint
>
{
static
constexpr
GLuint
kValue
=
GL_INVALID_INDEX
;
}
;
template
<
>
struct
DefaultReturnValue
<
EntryPoint
:
:
ClientWaitSync
GLenum
>
{
static
constexpr
GLenum
kValue
=
GL_WAIT_FAILED
;
}
;
template
<
>
struct
DefaultReturnValue
<
EntryPoint
:
:
TestFenceNV
GLboolean
>
{
static
constexpr
GLboolean
kValue
=
GL_TRUE
;
}
;
template
<
EntryPoint
EP
typename
ReturnType
>
constexpr
ANGLE_INLINE
ReturnType
GetDefaultReturnValue
(
)
{
return
DefaultReturnValue
<
EP
ReturnType
>
:
:
kValue
;
}
#
if
ANGLE_CAPTURE_ENABLED
#
define
ANGLE_CAPTURE
(
Func
.
.
.
)
CaptureCallToFrameCapture
(
Capture
#
#
Func
__VA_ARGS__
)
#
else
#
define
ANGLE_CAPTURE
(
.
.
.
)
#
endif
#
define
FUNC_EVENT
(
format
.
.
.
)
\
EVENT
(
nullptr
gl
:
:
EntryPoint
:
:
Begin
__FUNCTION__
format
__VA_ARGS__
)
inline
int
CID
(
const
Context
*
context
)
{
return
context
=
=
nullptr
?
0
:
static_cast
<
int
>
(
context
-
>
id
(
)
.
value
)
;
}
}
namespace
egl
{
inline
int
CID
(
EGLDisplay
display
EGLContext
context
)
{
auto
*
displayPtr
=
reinterpret_cast
<
const
egl
:
:
Display
*
>
(
display
)
;
if
(
!
Display
:
:
isValidDisplay
(
displayPtr
)
)
{
return
-
1
;
}
auto
*
contextPtr
=
reinterpret_cast
<
const
gl
:
:
Context
*
>
(
context
)
;
if
(
!
displayPtr
-
>
isValidContext
(
contextPtr
)
)
{
return
-
1
;
}
return
gl
:
:
CID
(
contextPtr
)
;
}
}
#
endif
