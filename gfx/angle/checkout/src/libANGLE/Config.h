#
ifndef
INCLUDE_CONFIG_H_
#
define
INCLUDE_CONFIG_H_
#
include
"
libANGLE
/
AttributeMap
.
h
"
#
include
"
common
/
angleutils
.
h
"
#
include
<
EGL
/
egl
.
h
>
#
include
<
GLES2
/
gl2
.
h
>
#
include
<
map
>
#
include
<
vector
>
namespace
egl
{
struct
Config
{
Config
(
)
;
~
Config
(
)
;
Config
(
const
Config
&
other
)
;
Config
&
operator
=
(
const
Config
&
other
)
;
GLenum
renderTargetFormat
;
GLenum
depthStencilFormat
;
EGLint
bufferSize
;
EGLint
redSize
;
EGLint
greenSize
;
EGLint
blueSize
;
EGLint
luminanceSize
;
EGLint
alphaSize
;
EGLint
alphaMaskSize
;
EGLBoolean
bindToTextureRGB
;
EGLBoolean
bindToTextureRGBA
;
EGLenum
colorBufferType
;
EGLenum
configCaveat
;
EGLint
configID
;
EGLint
conformant
;
EGLint
depthSize
;
EGLint
level
;
EGLBoolean
matchNativePixmap
;
EGLint
maxPBufferWidth
;
EGLint
maxPBufferHeight
;
EGLint
maxPBufferPixels
;
EGLint
maxSwapInterval
;
EGLint
minSwapInterval
;
EGLBoolean
nativeRenderable
;
EGLint
nativeVisualID
;
EGLint
nativeVisualType
;
EGLint
renderableType
;
EGLint
sampleBuffers
;
EGLint
samples
;
EGLint
stencilSize
;
EGLint
surfaceType
;
EGLenum
transparentType
;
EGLint
transparentRedValue
;
EGLint
transparentGreenValue
;
EGLint
transparentBlueValue
;
EGLint
optimalOrientation
;
EGLenum
colorComponentType
;
EGLBoolean
recordable
;
}
;
class
ConfigSet
{
private
:
typedef
std
:
:
map
<
EGLint
Config
>
ConfigMap
;
public
:
ConfigSet
(
)
;
ConfigSet
(
const
ConfigSet
&
other
)
;
~
ConfigSet
(
)
;
ConfigSet
&
operator
=
(
const
ConfigSet
&
other
)
;
EGLint
add
(
const
Config
&
config
)
;
const
Config
&
get
(
EGLint
id
)
const
;
void
clear
(
)
;
size_t
size
(
)
const
;
bool
contains
(
const
Config
*
config
)
const
;
std
:
:
vector
<
const
Config
*
>
filter
(
const
AttributeMap
&
attributeMap
)
const
;
ConfigMap
:
:
iterator
begin
(
)
;
ConfigMap
:
:
iterator
end
(
)
;
private
:
ConfigMap
mConfigs
;
}
;
}
#
endif
