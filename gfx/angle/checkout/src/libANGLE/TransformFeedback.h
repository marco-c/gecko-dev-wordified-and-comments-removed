#
ifndef
LIBANGLE_TRANSFORM_FEEDBACK_H_
#
define
LIBANGLE_TRANSFORM_FEEDBACK_H_
#
include
"
libANGLE
/
RefCountObject
.
h
"
#
include
"
common
/
PackedEnums
.
h
"
#
include
"
common
/
angleutils
.
h
"
#
include
"
libANGLE
/
Debug
.
h
"
#
include
"
angle_gl
.
h
"
namespace
rx
{
class
GLImplFactory
;
class
TransformFeedbackImpl
;
class
TransformFeedbackGL
;
}
namespace
gl
{
class
Buffer
;
struct
Caps
;
class
Context
;
class
Program
;
class
TransformFeedbackState
final
:
angle
:
:
NonCopyable
{
public
:
TransformFeedbackState
(
size_t
maxIndexedBuffers
)
;
~
TransformFeedbackState
(
)
;
const
OffsetBindingPointer
<
Buffer
>
&
getIndexedBuffer
(
size_t
idx
)
const
;
const
std
:
:
vector
<
OffsetBindingPointer
<
Buffer
>
>
&
getIndexedBuffers
(
)
const
;
const
Program
*
getBoundProgram
(
)
const
{
return
mProgram
;
}
GLsizeiptr
getVerticesDrawn
(
)
const
{
return
mVerticesDrawn
;
}
GLsizeiptr
getPrimitivesDrawn
(
)
const
;
private
:
friend
class
TransformFeedback
;
std
:
:
string
mLabel
;
bool
mActive
;
PrimitiveMode
mPrimitiveMode
;
bool
mPaused
;
GLsizeiptr
mVerticesDrawn
;
GLsizeiptr
mVertexCapacity
;
Program
*
mProgram
;
std
:
:
vector
<
OffsetBindingPointer
<
Buffer
>
>
mIndexedBuffers
;
}
;
class
TransformFeedback
final
:
public
RefCountObject
<
TransformFeedbackID
>
public
LabeledObject
{
public
:
TransformFeedback
(
rx
:
:
GLImplFactory
*
implFactory
TransformFeedbackID
id
const
Caps
&
caps
)
;
~
TransformFeedback
(
)
override
;
void
onDestroy
(
const
Context
*
context
)
override
;
angle
:
:
Result
setLabel
(
const
Context
*
context
const
std
:
:
string
&
label
)
override
;
const
std
:
:
string
&
getLabel
(
)
const
override
;
angle
:
:
Result
begin
(
const
Context
*
context
PrimitiveMode
primitiveMode
Program
*
program
)
;
angle
:
:
Result
end
(
const
Context
*
context
)
;
angle
:
:
Result
pause
(
const
Context
*
context
)
;
angle
:
:
Result
resume
(
const
Context
*
context
)
;
bool
isActive
(
)
const
{
return
mState
.
mActive
;
}
bool
isPaused
(
)
const
;
PrimitiveMode
getPrimitiveMode
(
)
const
;
bool
checkBufferSpaceForDraw
(
GLsizei
count
GLsizei
primcount
)
const
;
void
onVerticesDrawn
(
const
Context
*
context
GLsizei
count
GLsizei
primcount
)
;
bool
hasBoundProgram
(
ShaderProgramID
program
)
const
;
angle
:
:
Result
bindIndexedBuffer
(
const
Context
*
context
size_t
index
Buffer
*
buffer
size_t
offset
size_t
size
)
;
const
OffsetBindingPointer
<
Buffer
>
&
getIndexedBuffer
(
size_t
index
)
const
;
size_t
getIndexedBufferCount
(
)
const
;
const
std
:
:
vector
<
OffsetBindingPointer
<
Buffer
>
>
&
getIndexedBuffers
(
)
const
;
GLsizeiptr
getVerticesDrawn
(
)
const
{
return
mState
.
getVerticesDrawn
(
)
;
}
GLsizeiptr
getPrimitivesDrawn
(
)
const
{
return
mState
.
getPrimitivesDrawn
(
)
;
}
bool
buffersBoundForOtherUseInWebGL
(
)
const
;
angle
:
:
Result
detachBuffer
(
const
Context
*
context
BufferID
bufferID
)
;
rx
:
:
TransformFeedbackImpl
*
getImplementation
(
)
const
;
void
onBindingChanged
(
const
Context
*
context
bool
bound
)
;
private
:
void
bindProgram
(
const
Context
*
context
Program
*
program
)
;
TransformFeedbackState
mState
;
rx
:
:
TransformFeedbackImpl
*
mImplementation
;
}
;
}
#
endif
