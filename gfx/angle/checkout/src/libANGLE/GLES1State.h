#
ifndef
LIBANGLE_GLES1STATE_H_
#
define
LIBANGLE_GLES1STATE_H_
#
include
<
unordered_set
>
#
include
"
common
/
FixedVector
.
h
"
#
include
"
common
/
angleutils
.
h
"
#
include
"
common
/
matrix_utils
.
h
"
#
include
"
common
/
vector_utils
.
h
"
#
include
"
libANGLE
/
Caps
.
h
"
#
include
"
libANGLE
/
angletypes
.
h
"
namespace
gl
{
struct
TextureCoordF
{
TextureCoordF
(
)
;
TextureCoordF
(
float
_s
float
_t
float
_r
float
_q
)
;
bool
operator
=
=
(
const
TextureCoordF
&
other
)
const
;
GLfloat
s
=
0
.
0f
;
GLfloat
t
=
0
.
0f
;
GLfloat
r
=
0
.
0f
;
GLfloat
q
=
0
.
0f
;
}
;
struct
MaterialParameters
{
ColorF
ambient
;
ColorF
diffuse
;
ColorF
specular
;
ColorF
emissive
;
GLfloat
specularExponent
;
}
;
struct
LightModelParameters
{
ColorF
color
;
bool
twoSided
;
}
;
struct
LightParameters
{
bool
enabled
=
false
;
ColorF
ambient
=
{
0
.
0f
0
.
0f
0
.
0f
1
.
0f
}
;
ColorF
diffuse
=
{
0
.
0f
0
.
0f
0
.
0f
1
.
0f
}
;
ColorF
specular
=
{
0
.
0f
0
.
0f
0
.
0f
1
.
0f
}
;
angle
:
:
Vector4
position
=
{
0
.
0f
0
.
0f
1
.
0f
0
.
0f
}
;
angle
:
:
Vector3
direction
=
{
0
.
0f
0
.
0f
-
1
.
0f
}
;
GLfloat
spotlightExponent
=
0
.
0f
;
GLfloat
spotlightCutoffAngle
=
180
.
0f
;
GLfloat
attenuationConst
=
1
.
0f
;
GLfloat
attenuationLinear
=
0
.
0f
;
GLfloat
attenuationQuadratic
=
0
.
0f
;
}
;
struct
FogParameters
{
FogMode
mode
;
GLfloat
density
;
GLfloat
start
;
GLfloat
end
;
ColorF
color
;
}
;
struct
TextureEnvironmentParameters
{
TextureEnvMode
envMode
=
TextureEnvMode
:
:
Modulate
;
TextureCombine
combineRgb
=
TextureCombine
:
:
Modulate
;
TextureCombine
combineAlpha
=
TextureCombine
:
:
Modulate
;
TextureSrc
src0rgb
=
TextureSrc
:
:
Texture
;
TextureSrc
src0alpha
=
TextureSrc
:
:
Texture
;
TextureSrc
src1rgb
=
TextureSrc
:
:
Previous
;
TextureSrc
src1alpha
=
TextureSrc
:
:
Previous
;
TextureSrc
src2rgb
=
TextureSrc
:
:
Constant
;
TextureSrc
src2alpha
=
TextureSrc
:
:
Constant
;
TextureOp
op0rgb
=
TextureOp
:
:
SrcColor
;
TextureOp
op0alpha
=
TextureOp
:
:
SrcAlpha
;
TextureOp
op1rgb
=
TextureOp
:
:
SrcColor
;
TextureOp
op1alpha
=
TextureOp
:
:
SrcAlpha
;
TextureOp
op2rgb
=
TextureOp
:
:
SrcAlpha
;
TextureOp
op2alpha
=
TextureOp
:
:
SrcAlpha
;
ColorF
envColor
=
{
0
.
0f
0
.
0f
0
.
0f
0
.
0f
}
;
GLfloat
rgbScale
=
1
.
0f
;
GLfloat
alphaScale
=
1
.
0f
;
bool
pointSpriteCoordReplace
=
false
;
}
;
struct
PointParameters
{
GLfloat
pointSizeMin
;
GLfloat
pointSizeMax
;
GLfloat
pointFadeThresholdSize
;
angle
:
:
Vector3
pointDistanceAttenuation
;
GLfloat
pointSize
;
}
;
class
Context
;
class
State
;
class
GLES1State
final
:
angle
:
:
NonCopyable
{
public
:
GLES1State
(
)
;
~
GLES1State
(
)
;
void
initialize
(
const
Context
*
context
const
State
*
state
)
;
void
setAlphaFunc
(
AlphaTestFunc
func
GLfloat
ref
)
;
void
setClientTextureUnit
(
unsigned
int
unit
)
;
unsigned
int
getClientTextureUnit
(
)
const
;
void
setCurrentColor
(
const
ColorF
&
color
)
;
const
ColorF
&
getCurrentColor
(
)
const
;
void
setCurrentNormal
(
const
angle
:
:
Vector3
&
normal
)
;
const
angle
:
:
Vector3
&
getCurrentNormal
(
)
const
;
void
setCurrentTextureCoords
(
unsigned
int
unit
const
TextureCoordF
&
coords
)
;
const
TextureCoordF
&
getCurrentTextureCoords
(
unsigned
int
unit
)
const
;
void
setMatrixMode
(
MatrixType
mode
)
;
MatrixType
getMatrixMode
(
)
const
;
void
pushMatrix
(
)
;
void
popMatrix
(
)
;
using
MatrixStack
=
angle
:
:
FixedVector
<
angle
:
:
Mat4
Caps
:
:
GlobalMatrixStackDepth
>
;
MatrixStack
&
currentMatrixStack
(
)
;
const
MatrixStack
&
currentMatrixStack
(
)
const
;
void
loadMatrix
(
const
angle
:
:
Mat4
&
m
)
;
void
multMatrix
(
const
angle
:
:
Mat4
&
m
)
;
private
:
friend
class
State
;
const
State
*
mGLState
;
struct
TextureEnables
{
bool
enable2D
=
false
;
bool
enableCubeMap
=
false
;
}
;
std
:
:
vector
<
TextureEnables
>
mTexUnitEnables
;
bool
mVertexArrayEnabled
;
bool
mNormalArrayEnabled
;
bool
mColorArrayEnabled
;
bool
mPointSizeArrayEnabled
;
std
:
:
vector
<
bool
>
mTexCoordArrayEnabled
;
std
:
:
vector
<
bool
>
mClipPlaneEnabled
;
bool
mLineSmoothEnabled
;
bool
mPointSmoothEnabled
;
bool
mPointSpriteEnabled
;
bool
mAlphaTestEnabled
;
bool
mLogicOpEnabled
;
bool
mLightingEnabled
;
bool
mFogEnabled
;
bool
mRescaleNormalEnabled
;
bool
mNormalizeEnabled
;
bool
mColorMaterialEnabled
;
bool
mReflectionMapEnabled
;
ColorF
mCurrentColor
;
angle
:
:
Vector3
mCurrentNormal
;
std
:
:
vector
<
TextureCoordF
>
mCurrentTextureCoords
;
unsigned
int
mClientActiveTexture
;
MatrixType
mMatrixMode
;
MatrixStack
mProjectionMatrices
;
MatrixStack
mModelviewMatrices
;
std
:
:
vector
<
MatrixStack
>
mTextureMatrices
;
using
TextureEnvironments
=
std
:
:
vector
<
TextureEnvironmentParameters
>
;
TextureEnvironments
mTextureEnvironments
;
MaterialParameters
mMaterial
;
LightModelParameters
mLightModel
;
std
:
:
vector
<
LightParameters
>
mLights
;
FogParameters
mFog
;
ShadingModel
mShadeModel
;
PointParameters
mPointParameters
;
AlphaTestFunc
mAlphaTestFunc
;
GLfloat
mAlphaTestRef
;
LogicalOperation
mLogicOp
;
std
:
:
vector
<
angle
:
:
Vector4
>
mClipPlanes
;
HintSetting
mLineSmoothHint
;
HintSetting
mPointSmoothHint
;
HintSetting
mPerspectiveCorrectionHint
;
HintSetting
mFogHint
;
}
;
}
#
endif
