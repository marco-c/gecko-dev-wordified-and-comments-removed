#
ifndef
LIBANGLE_REFCOUNTOBJECT_H_
#
define
LIBANGLE_REFCOUNTOBJECT_H_
#
include
"
angle_gl
.
h
"
#
include
"
common
/
debug
.
h
"
#
include
"
libANGLE
/
Error
.
h
"
#
include
<
cstddef
>
namespace
angle
{
template
<
typename
ContextT
typename
ErrorT
>
class
RefCountObject
:
angle
:
:
NonCopyable
{
public
:
using
ContextType
=
ContextT
;
using
ErrorType
=
ErrorT
;
RefCountObject
(
)
:
mRefCount
(
0
)
{
}
virtual
ErrorType
onDestroy
(
const
ContextType
*
context
)
{
return
ErrorType
:
:
NoError
(
)
;
}
void
addRef
(
)
const
{
+
+
mRefCount
;
}
void
release
(
const
ContextType
*
context
)
{
ASSERT
(
mRefCount
>
0
)
;
if
(
-
-
mRefCount
=
=
0
)
{
ANGLE_SWALLOW_ERR
(
onDestroy
(
context
)
)
;
delete
this
;
}
}
size_t
getRefCount
(
)
const
{
return
mRefCount
;
}
protected
:
virtual
~
RefCountObject
(
)
{
ASSERT
(
mRefCount
=
=
0
)
;
}
mutable
size_t
mRefCount
;
}
;
template
<
class
ObjectType
typename
ContextT
typename
ErrorT
>
class
BindingPointer
{
public
:
using
ContextType
=
ContextT
;
using
ErrorType
=
ErrorT
;
BindingPointer
(
)
:
mObject
(
nullptr
)
{
}
BindingPointer
(
ObjectType
*
object
)
:
mObject
(
object
)
{
if
(
mObject
)
{
mObject
-
>
addRef
(
)
;
}
}
BindingPointer
(
const
BindingPointer
&
other
)
:
mObject
(
other
.
mObject
)
{
if
(
mObject
)
{
mObject
-
>
addRef
(
)
;
}
}
BindingPointer
&
operator
=
(
BindingPointer
&
&
other
)
{
std
:
:
swap
(
mObject
other
.
mObject
)
;
return
*
this
;
}
virtual
~
BindingPointer
(
)
{
ASSERT
(
mObject
=
=
nullptr
)
;
}
virtual
void
set
(
const
ContextType
*
context
ObjectType
*
newObject
)
{
if
(
newObject
!
=
nullptr
)
{
reinterpret_cast
<
RefCountObject
<
ContextType
ErrorType
>
*
>
(
newObject
)
-
>
addRef
(
)
;
}
ObjectType
*
oldObject
=
mObject
;
mObject
=
newObject
;
if
(
oldObject
!
=
nullptr
)
{
reinterpret_cast
<
RefCountObject
<
ContextType
ErrorType
>
*
>
(
oldObject
)
-
>
release
(
context
)
;
}
}
ObjectType
*
get
(
)
const
{
return
mObject
;
}
ObjectType
*
operator
-
>
(
)
const
{
return
mObject
;
}
bool
operator
=
=
(
const
BindingPointer
&
other
)
const
{
return
mObject
=
=
other
.
mObject
;
}
bool
operator
!
=
(
const
BindingPointer
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
private
:
ObjectType
*
mObject
;
}
;
}
namespace
gl
{
class
Context
;
template
<
class
ObjectType
>
class
BindingPointer
;
using
RefCountObjectNoID
=
angle
:
:
RefCountObject
<
Context
Error
>
;
class
RefCountObject
:
public
gl
:
:
RefCountObjectNoID
{
public
:
explicit
RefCountObject
(
GLuint
id
)
:
mId
(
id
)
{
}
GLuint
id
(
)
const
{
return
mId
;
}
protected
:
~
RefCountObject
(
)
override
{
}
private
:
GLuint
mId
;
}
;
template
<
class
ObjectType
>
class
BindingPointer
:
public
angle
:
:
BindingPointer
<
ObjectType
Context
Error
>
{
public
:
using
ContextType
=
typename
angle
:
:
BindingPointer
<
ObjectType
Context
Error
>
:
:
ContextType
;
using
ErrorType
=
typename
angle
:
:
BindingPointer
<
ObjectType
Context
Error
>
:
:
ErrorType
;
BindingPointer
(
)
{
}
BindingPointer
(
ObjectType
*
object
)
:
angle
:
:
BindingPointer
<
ObjectType
Context
Error
>
(
object
)
{
}
GLuint
id
(
)
const
{
ObjectType
*
obj
=
this
-
>
get
(
)
;
return
obj
?
obj
-
>
id
(
)
:
0
;
}
}
;
template
<
class
ObjectType
>
class
OffsetBindingPointer
:
public
gl
:
:
BindingPointer
<
ObjectType
>
{
public
:
using
ContextType
=
typename
gl
:
:
BindingPointer
<
ObjectType
>
:
:
ContextType
;
using
ErrorType
=
typename
gl
:
:
BindingPointer
<
ObjectType
>
:
:
ErrorType
;
OffsetBindingPointer
(
)
:
mOffset
(
0
)
mSize
(
0
)
{
}
void
set
(
const
ContextType
*
context
ObjectType
*
newObject
)
override
{
BindingPointer
<
ObjectType
>
:
:
set
(
context
newObject
)
;
mOffset
=
0
;
mSize
=
0
;
}
void
set
(
const
ContextType
*
context
ObjectType
*
newObject
GLintptr
offset
GLsizeiptr
size
)
{
BindingPointer
<
ObjectType
>
:
:
set
(
context
newObject
)
;
mOffset
=
offset
;
mSize
=
size
;
}
GLintptr
getOffset
(
)
const
{
return
mOffset
;
}
GLsizeiptr
getSize
(
)
const
{
return
mSize
;
}
bool
operator
=
=
(
const
OffsetBindingPointer
<
ObjectType
>
&
other
)
const
{
return
this
-
>
get
(
)
=
=
other
.
get
(
)
&
&
mOffset
=
=
other
.
mOffset
&
&
mSize
=
=
other
.
mSize
;
}
bool
operator
!
=
(
const
OffsetBindingPointer
<
ObjectType
>
&
other
)
const
{
return
!
(
*
this
=
=
other
)
;
}
private
:
GLintptr
mOffset
;
GLsizeiptr
mSize
;
}
;
}
namespace
egl
{
class
Display
;
using
RefCountObject
=
angle
:
:
RefCountObject
<
Display
Error
>
;
template
<
class
ObjectType
>
using
BindingPointer
=
angle
:
:
BindingPointer
<
ObjectType
Display
Error
>
;
}
#
endif
