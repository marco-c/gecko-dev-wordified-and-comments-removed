#
ifndef
LIBANGLE_WORKER_THREAD_H_
#
define
LIBANGLE_WORKER_THREAD_H_
#
include
<
array
>
#
include
<
memory
>
#
include
<
vector
>
#
include
"
common
/
debug
.
h
"
#
include
"
libANGLE
/
features
.
h
"
namespace
angle
{
class
WorkerThreadPool
;
class
Closure
{
public
:
virtual
~
Closure
(
)
=
default
;
virtual
void
operator
(
)
(
)
=
0
;
}
;
class
WaitableEvent
:
angle
:
:
NonCopyable
{
public
:
WaitableEvent
(
)
;
virtual
~
WaitableEvent
(
)
;
virtual
void
wait
(
)
=
0
;
virtual
bool
isReady
(
)
=
0
;
void
setWorkerThreadPool
(
std
:
:
shared_ptr
<
WorkerThreadPool
>
pool
)
{
mPool
=
pool
;
}
template
<
size_t
Count
>
static
void
WaitMany
(
std
:
:
array
<
std
:
:
shared_ptr
<
WaitableEvent
>
Count
>
*
waitables
)
{
ASSERT
(
Count
>
0
)
;
for
(
size_t
index
=
0
;
index
<
Count
;
+
+
index
)
{
(
*
waitables
)
[
index
]
-
>
wait
(
)
;
}
}
private
:
std
:
:
shared_ptr
<
WorkerThreadPool
>
mPool
;
}
;
class
WaitableEventDone
final
:
public
WaitableEvent
{
public
:
void
wait
(
)
override
;
bool
isReady
(
)
override
;
}
;
class
WorkerThreadPool
:
angle
:
:
NonCopyable
{
public
:
WorkerThreadPool
(
)
;
virtual
~
WorkerThreadPool
(
)
;
static
std
:
:
shared_ptr
<
WorkerThreadPool
>
Create
(
bool
multithreaded
)
;
static
std
:
:
shared_ptr
<
WaitableEvent
>
PostWorkerTask
(
std
:
:
shared_ptr
<
WorkerThreadPool
>
pool
std
:
:
shared_ptr
<
Closure
>
task
)
;
virtual
void
setMaxThreads
(
size_t
maxThreads
)
=
0
;
virtual
bool
isAsync
(
)
=
0
;
private
:
virtual
std
:
:
shared_ptr
<
WaitableEvent
>
postWorkerTask
(
std
:
:
shared_ptr
<
Closure
>
task
)
=
0
;
}
;
}
#
endif
