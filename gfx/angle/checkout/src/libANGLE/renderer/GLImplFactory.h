#
ifndef
LIBANGLE_RENDERER_GLIMPLFACTORY_H_
#
define
LIBANGLE_RENDERER_GLIMPLFACTORY_H_
#
include
<
vector
>
#
include
"
angle_gl
.
h
"
#
include
"
libANGLE
/
Framebuffer
.
h
"
#
include
"
libANGLE
/
Program
.
h
"
#
include
"
libANGLE
/
ProgramPipeline
.
h
"
#
include
"
libANGLE
/
Renderbuffer
.
h
"
#
include
"
libANGLE
/
Shader
.
h
"
#
include
"
libANGLE
/
Texture
.
h
"
#
include
"
libANGLE
/
TransformFeedback
.
h
"
#
include
"
libANGLE
/
VertexArray
.
h
"
namespace
gl
{
class
State
;
}
namespace
rx
{
class
BufferImpl
;
class
CompilerImpl
;
class
ContextImpl
;
class
FenceNVImpl
;
class
SyncImpl
;
class
FramebufferImpl
;
class
PathImpl
;
class
ProgramImpl
;
class
ProgramPipelineImpl
;
class
QueryImpl
;
class
RenderbufferImpl
;
class
SamplerImpl
;
class
ShaderImpl
;
class
TextureImpl
;
class
TransformFeedbackImpl
;
class
VertexArrayImpl
;
class
GLImplFactory
:
angle
:
:
NonCopyable
{
public
:
GLImplFactory
(
)
{
}
virtual
~
GLImplFactory
(
)
{
}
virtual
CompilerImpl
*
createCompiler
(
)
=
0
;
virtual
ShaderImpl
*
createShader
(
const
gl
:
:
ShaderState
&
data
)
=
0
;
virtual
ProgramImpl
*
createProgram
(
const
gl
:
:
ProgramState
&
data
)
=
0
;
virtual
FramebufferImpl
*
createFramebuffer
(
const
gl
:
:
FramebufferState
&
data
)
=
0
;
virtual
TextureImpl
*
createTexture
(
const
gl
:
:
TextureState
&
state
)
=
0
;
virtual
RenderbufferImpl
*
createRenderbuffer
(
const
gl
:
:
RenderbufferState
&
state
)
=
0
;
virtual
BufferImpl
*
createBuffer
(
const
gl
:
:
BufferState
&
state
)
=
0
;
virtual
VertexArrayImpl
*
createVertexArray
(
const
gl
:
:
VertexArrayState
&
data
)
=
0
;
virtual
QueryImpl
*
createQuery
(
gl
:
:
QueryType
type
)
=
0
;
virtual
FenceNVImpl
*
createFenceNV
(
)
=
0
;
virtual
SyncImpl
*
createSync
(
)
=
0
;
virtual
TransformFeedbackImpl
*
createTransformFeedback
(
const
gl
:
:
TransformFeedbackState
&
state
)
=
0
;
virtual
SamplerImpl
*
createSampler
(
const
gl
:
:
SamplerState
&
state
)
=
0
;
virtual
ProgramPipelineImpl
*
createProgramPipeline
(
const
gl
:
:
ProgramPipelineState
&
data
)
=
0
;
virtual
std
:
:
vector
<
PathImpl
*
>
createPaths
(
GLsizei
range
)
=
0
;
}
;
}
#
endif
