#
ifndef
LIBANGLE_RENDERER_PROGRAMIMPL_H_
#
define
LIBANGLE_RENDERER_PROGRAMIMPL_H_
#
include
"
common
/
angleutils
.
h
"
#
include
"
libANGLE
/
BinaryStream
.
h
"
#
include
"
libANGLE
/
Constants
.
h
"
#
include
"
libANGLE
/
Program
.
h
"
#
include
"
libANGLE
/
Shader
.
h
"
#
include
<
map
>
namespace
gl
{
class
Context
;
struct
ProgramLinkedResources
;
}
namespace
sh
{
struct
BlockMemberInfo
;
}
namespace
rx
{
class
ProgramImpl
:
angle
:
:
NonCopyable
{
public
:
ProgramImpl
(
const
gl
:
:
ProgramState
&
state
)
:
mState
(
state
)
{
}
virtual
~
ProgramImpl
(
)
{
}
virtual
gl
:
:
Error
destroy
(
const
gl
:
:
Context
*
context
)
{
return
gl
:
:
NoError
(
)
;
}
virtual
gl
:
:
LinkResult
load
(
const
gl
:
:
Context
*
context
gl
:
:
InfoLog
&
infoLog
gl
:
:
BinaryInputStream
*
stream
)
=
0
;
virtual
void
save
(
const
gl
:
:
Context
*
context
gl
:
:
BinaryOutputStream
*
stream
)
=
0
;
virtual
void
setBinaryRetrievableHint
(
bool
retrievable
)
=
0
;
virtual
void
setSeparable
(
bool
separable
)
=
0
;
virtual
gl
:
:
LinkResult
link
(
const
gl
:
:
Context
*
context
const
gl
:
:
ProgramLinkedResources
&
resources
gl
:
:
InfoLog
&
infoLog
)
=
0
;
virtual
GLboolean
validate
(
const
gl
:
:
Caps
&
caps
gl
:
:
InfoLog
*
infoLog
)
=
0
;
virtual
void
setUniform1fv
(
GLint
location
GLsizei
count
const
GLfloat
*
v
)
=
0
;
virtual
void
setUniform2fv
(
GLint
location
GLsizei
count
const
GLfloat
*
v
)
=
0
;
virtual
void
setUniform3fv
(
GLint
location
GLsizei
count
const
GLfloat
*
v
)
=
0
;
virtual
void
setUniform4fv
(
GLint
location
GLsizei
count
const
GLfloat
*
v
)
=
0
;
virtual
void
setUniform1iv
(
GLint
location
GLsizei
count
const
GLint
*
v
)
=
0
;
virtual
void
setUniform2iv
(
GLint
location
GLsizei
count
const
GLint
*
v
)
=
0
;
virtual
void
setUniform3iv
(
GLint
location
GLsizei
count
const
GLint
*
v
)
=
0
;
virtual
void
setUniform4iv
(
GLint
location
GLsizei
count
const
GLint
*
v
)
=
0
;
virtual
void
setUniform1uiv
(
GLint
location
GLsizei
count
const
GLuint
*
v
)
=
0
;
virtual
void
setUniform2uiv
(
GLint
location
GLsizei
count
const
GLuint
*
v
)
=
0
;
virtual
void
setUniform3uiv
(
GLint
location
GLsizei
count
const
GLuint
*
v
)
=
0
;
virtual
void
setUniform4uiv
(
GLint
location
GLsizei
count
const
GLuint
*
v
)
=
0
;
virtual
void
setUniformMatrix2fv
(
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
=
0
;
virtual
void
setUniformMatrix3fv
(
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
=
0
;
virtual
void
setUniformMatrix4fv
(
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
=
0
;
virtual
void
setUniformMatrix2x3fv
(
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
=
0
;
virtual
void
setUniformMatrix3x2fv
(
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
=
0
;
virtual
void
setUniformMatrix2x4fv
(
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
=
0
;
virtual
void
setUniformMatrix4x2fv
(
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
=
0
;
virtual
void
setUniformMatrix3x4fv
(
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
=
0
;
virtual
void
setUniformMatrix4x3fv
(
GLint
location
GLsizei
count
GLboolean
transpose
const
GLfloat
*
value
)
=
0
;
virtual
void
getUniformfv
(
const
gl
:
:
Context
*
context
GLint
location
GLfloat
*
params
)
const
=
0
;
virtual
void
getUniformiv
(
const
gl
:
:
Context
*
context
GLint
location
GLint
*
params
)
const
=
0
;
virtual
void
getUniformuiv
(
const
gl
:
:
Context
*
context
GLint
location
GLuint
*
params
)
const
=
0
;
virtual
void
setUniformBlockBinding
(
GLuint
uniformBlockIndex
GLuint
uniformBlockBinding
)
=
0
;
virtual
void
setPathFragmentInputGen
(
const
std
:
:
string
&
inputName
GLenum
genMode
GLint
components
const
GLfloat
*
coeffs
)
=
0
;
virtual
void
markUnusedUniformLocations
(
std
:
:
vector
<
gl
:
:
VariableLocation
>
*
uniformLocations
std
:
:
vector
<
gl
:
:
SamplerBinding
>
*
samplerBindings
)
{
}
protected
:
const
gl
:
:
ProgramState
&
mState
;
}
;
}
#
endif
