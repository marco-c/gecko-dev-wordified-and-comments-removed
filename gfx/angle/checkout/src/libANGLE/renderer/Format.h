#
ifndef
LIBANGLE_RENDERER_FORMAT_H_
#
define
LIBANGLE_RENDERER_FORMAT_H_
#
include
"
libANGLE
/
renderer
/
renderer_utils
.
h
"
namespace
angle
{
enum
class
FormatID
;
struct
Format
final
:
private
angle
:
:
NonCopyable
{
constexpr
Format
(
FormatID
id
GLenum
glFormat
GLenum
fboFormat
rx
:
:
MipGenerationFunction
mipGen
const
rx
:
:
FastCopyFunctionMap
&
fastCopyFunctions
rx
:
:
PixelReadFunction
colorRead
rx
:
:
PixelWriteFunction
colorWrite
GLenum
componentType
GLuint
redBits
GLuint
greenBits
GLuint
blueBits
GLuint
alphaBits
GLuint
depthBits
GLuint
stencilBits
GLuint
pixelBytes
bool
isBlock
)
;
static
const
Format
&
Get
(
FormatID
id
)
;
static
FormatID
InternalFormatToID
(
GLenum
internalFormat
)
;
constexpr
bool
hasDepthOrStencilBits
(
)
const
;
bool
operator
=
=
(
const
Format
&
other
)
const
{
return
this
-
>
id
=
=
other
.
id
;
}
FormatID
id
;
GLenum
glInternalFormat
;
GLenum
fboImplementationInternalFormat
;
rx
:
:
MipGenerationFunction
mipGenerationFunction
;
rx
:
:
PixelReadFunction
pixelReadFunction
;
rx
:
:
PixelWriteFunction
pixelWriteFunction
;
const
rx
:
:
FastCopyFunctionMap
&
fastCopyFunctions
;
GLenum
componentType
;
GLuint
redBits
;
GLuint
greenBits
;
GLuint
blueBits
;
GLuint
alphaBits
;
GLuint
depthBits
;
GLuint
stencilBits
;
GLuint
pixelBytes
;
bool
isBlock
;
}
;
constexpr
Format
:
:
Format
(
FormatID
id
GLenum
glFormat
GLenum
fboFormat
rx
:
:
MipGenerationFunction
mipGen
const
rx
:
:
FastCopyFunctionMap
&
fastCopyFunctions
rx
:
:
PixelReadFunction
colorRead
rx
:
:
PixelWriteFunction
colorWrite
GLenum
componentType
GLuint
redBits
GLuint
greenBits
GLuint
blueBits
GLuint
alphaBits
GLuint
depthBits
GLuint
stencilBits
GLuint
pixelBytes
bool
isBlock
)
:
id
(
id
)
glInternalFormat
(
glFormat
)
fboImplementationInternalFormat
(
fboFormat
)
mipGenerationFunction
(
mipGen
)
pixelReadFunction
(
colorRead
)
pixelWriteFunction
(
colorWrite
)
fastCopyFunctions
(
fastCopyFunctions
)
componentType
(
componentType
)
redBits
(
redBits
)
greenBits
(
greenBits
)
blueBits
(
blueBits
)
alphaBits
(
alphaBits
)
depthBits
(
depthBits
)
stencilBits
(
stencilBits
)
pixelBytes
(
pixelBytes
)
isBlock
(
isBlock
)
{
}
constexpr
bool
Format
:
:
hasDepthOrStencilBits
(
)
const
{
return
depthBits
>
0
|
|
stencilBits
>
0
;
}
}
#
include
"
libANGLE
/
renderer
/
FormatID_autogen
.
inc
"
#
endif
