#
ifndef
LIBANGLE_RENDERER_D3D_D3D9_CONTEXT9_H_
#
define
LIBANGLE_RENDERER_D3D_D3D9_CONTEXT9_H_
#
include
<
stack
>
#
include
"
libANGLE
/
renderer
/
d3d
/
ContextD3D
.
h
"
namespace
rx
{
class
Renderer9
;
class
Context9
:
public
ContextD3D
{
public
:
Context9
(
const
gl
:
:
State
&
state
gl
:
:
ErrorSet
*
errorSet
Renderer9
*
renderer
)
;
~
Context9
(
)
override
;
angle
:
:
Result
initialize
(
)
override
;
void
onDestroy
(
const
gl
:
:
Context
*
context
)
override
;
CompilerImpl
*
createCompiler
(
)
override
;
ShaderImpl
*
createShader
(
const
gl
:
:
ShaderState
&
data
)
override
;
ProgramImpl
*
createProgram
(
const
gl
:
:
ProgramState
&
data
)
override
;
FramebufferImpl
*
createFramebuffer
(
const
gl
:
:
FramebufferState
&
data
)
override
;
TextureImpl
*
createTexture
(
const
gl
:
:
TextureState
&
state
)
override
;
RenderbufferImpl
*
createRenderbuffer
(
const
gl
:
:
RenderbufferState
&
state
)
override
;
BufferImpl
*
createBuffer
(
const
gl
:
:
BufferState
&
state
)
override
;
VertexArrayImpl
*
createVertexArray
(
const
gl
:
:
VertexArrayState
&
data
)
override
;
QueryImpl
*
createQuery
(
gl
:
:
QueryType
type
)
override
;
FenceNVImpl
*
createFenceNV
(
)
override
;
SyncImpl
*
createSync
(
)
override
;
TransformFeedbackImpl
*
createTransformFeedback
(
const
gl
:
:
TransformFeedbackState
&
state
)
override
;
SamplerImpl
*
createSampler
(
const
gl
:
:
SamplerState
&
state
)
override
;
ProgramPipelineImpl
*
createProgramPipeline
(
const
gl
:
:
ProgramPipelineState
&
data
)
override
;
std
:
:
vector
<
PathImpl
*
>
createPaths
(
GLsizei
)
override
;
angle
:
:
Result
flush
(
const
gl
:
:
Context
*
context
)
override
;
angle
:
:
Result
finish
(
const
gl
:
:
Context
*
context
)
override
;
angle
:
:
Result
drawArrays
(
const
gl
:
:
Context
*
context
gl
:
:
PrimitiveMode
mode
GLint
first
GLsizei
count
)
override
;
angle
:
:
Result
drawArraysInstanced
(
const
gl
:
:
Context
*
context
gl
:
:
PrimitiveMode
mode
GLint
first
GLsizei
count
GLsizei
instanceCount
)
override
;
angle
:
:
Result
drawElements
(
const
gl
:
:
Context
*
context
gl
:
:
PrimitiveMode
mode
GLsizei
count
gl
:
:
DrawElementsType
type
const
void
*
indices
)
override
;
angle
:
:
Result
drawElementsInstanced
(
const
gl
:
:
Context
*
context
gl
:
:
PrimitiveMode
mode
GLsizei
count
gl
:
:
DrawElementsType
type
const
void
*
indices
GLsizei
instances
)
override
;
angle
:
:
Result
drawRangeElements
(
const
gl
:
:
Context
*
context
gl
:
:
PrimitiveMode
mode
GLuint
start
GLuint
end
GLsizei
count
gl
:
:
DrawElementsType
type
const
void
*
indices
)
override
;
angle
:
:
Result
drawArraysIndirect
(
const
gl
:
:
Context
*
context
gl
:
:
PrimitiveMode
mode
const
void
*
indirect
)
override
;
angle
:
:
Result
drawElementsIndirect
(
const
gl
:
:
Context
*
context
gl
:
:
PrimitiveMode
mode
gl
:
:
DrawElementsType
type
const
void
*
indirect
)
override
;
GLenum
getResetStatus
(
)
override
;
std
:
:
string
getVendorString
(
)
const
override
;
std
:
:
string
getRendererDescription
(
)
const
override
;
void
insertEventMarker
(
GLsizei
length
const
char
*
marker
)
override
;
void
pushGroupMarker
(
GLsizei
length
const
char
*
marker
)
override
;
void
popGroupMarker
(
)
override
;
void
pushDebugGroup
(
GLenum
source
GLuint
id
const
std
:
:
string
&
message
)
override
;
void
popDebugGroup
(
)
override
;
angle
:
:
Result
syncState
(
const
gl
:
:
Context
*
context
const
gl
:
:
State
:
:
DirtyBits
&
dirtyBits
const
gl
:
:
State
:
:
DirtyBits
&
bitMask
)
override
;
GLint
getGPUDisjoint
(
)
override
;
GLint64
getTimestamp
(
)
override
;
angle
:
:
Result
onMakeCurrent
(
const
gl
:
:
Context
*
context
)
override
;
gl
:
:
Caps
getNativeCaps
(
)
const
override
;
const
gl
:
:
TextureCapsMap
&
getNativeTextureCaps
(
)
const
override
;
const
gl
:
:
Extensions
&
getNativeExtensions
(
)
const
override
;
const
gl
:
:
Limitations
&
getNativeLimitations
(
)
const
override
;
angle
:
:
Result
dispatchCompute
(
const
gl
:
:
Context
*
context
GLuint
numGroupsX
GLuint
numGroupsY
GLuint
numGroupsZ
)
override
;
angle
:
:
Result
dispatchComputeIndirect
(
const
gl
:
:
Context
*
context
GLintptr
indirect
)
override
;
angle
:
:
Result
memoryBarrier
(
const
gl
:
:
Context
*
context
GLbitfield
barriers
)
override
;
angle
:
:
Result
memoryBarrierByRegion
(
const
gl
:
:
Context
*
context
GLbitfield
barriers
)
override
;
Renderer9
*
getRenderer
(
)
const
{
return
mRenderer
;
}
angle
:
:
Result
getIncompleteTexture
(
const
gl
:
:
Context
*
context
gl
:
:
TextureType
type
gl
:
:
Texture
*
*
textureOut
)
;
void
handleResult
(
HRESULT
hr
const
char
*
message
const
char
*
file
const
char
*
function
unsigned
int
line
)
override
;
private
:
Renderer9
*
mRenderer
;
IncompleteTextureSet
mIncompleteTextures
;
std
:
:
stack
<
std
:
:
string
>
mMarkerStack
;
}
;
}
#
endif
