#
ifndef
LIBANGLE_RENDERER_D3D_DISPLAYD3D_H_
#
define
LIBANGLE_RENDERER_D3D_DISPLAYD3D_H_
#
include
"
libANGLE
/
Device
.
h
"
#
include
"
libANGLE
/
renderer
/
DisplayImpl
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
RendererD3D
.
h
"
namespace
rx
{
class
ShareGroupD3D
:
public
ShareGroupImpl
{
}
;
class
DisplayD3D
:
public
DisplayImpl
public
d3d
:
:
Context
{
public
:
DisplayD3D
(
const
egl
:
:
DisplayState
&
state
)
;
egl
:
:
Error
initialize
(
egl
:
:
Display
*
display
)
override
;
void
terminate
(
)
override
;
SurfaceImpl
*
createWindowSurface
(
const
egl
:
:
SurfaceState
&
state
EGLNativeWindowType
window
const
egl
:
:
AttributeMap
&
attribs
)
override
;
SurfaceImpl
*
createPbufferSurface
(
const
egl
:
:
SurfaceState
&
state
const
egl
:
:
AttributeMap
&
attribs
)
override
;
SurfaceImpl
*
createPbufferFromClientBuffer
(
const
egl
:
:
SurfaceState
&
state
EGLenum
buftype
EGLClientBuffer
clientBuffer
const
egl
:
:
AttributeMap
&
attribs
)
override
;
SurfaceImpl
*
createPixmapSurface
(
const
egl
:
:
SurfaceState
&
state
NativePixmapType
nativePixmap
const
egl
:
:
AttributeMap
&
attribs
)
override
;
ImageImpl
*
createImage
(
const
egl
:
:
ImageState
&
state
const
gl
:
:
Context
*
context
EGLenum
target
const
egl
:
:
AttributeMap
&
attribs
)
override
;
ContextImpl
*
createContext
(
const
gl
:
:
State
&
state
gl
:
:
ErrorSet
*
errorSet
const
egl
:
:
Config
*
configuration
const
gl
:
:
Context
*
shareContext
const
egl
:
:
AttributeMap
&
attribs
)
override
;
StreamProducerImpl
*
createStreamProducerD3DTexture
(
egl
:
:
Stream
:
:
ConsumerType
consumerType
const
egl
:
:
AttributeMap
&
attribs
)
override
;
ExternalImageSiblingImpl
*
createExternalImageSibling
(
const
gl
:
:
Context
*
context
EGLenum
target
EGLClientBuffer
buffer
const
egl
:
:
AttributeMap
&
attribs
)
override
;
ShareGroupImpl
*
createShareGroup
(
)
override
;
egl
:
:
Error
makeCurrent
(
egl
:
:
Display
*
display
egl
:
:
Surface
*
drawSurface
egl
:
:
Surface
*
readSurface
gl
:
:
Context
*
context
)
override
;
egl
:
:
ConfigSet
generateConfigs
(
)
override
;
bool
testDeviceLost
(
)
override
;
egl
:
:
Error
restoreLostDevice
(
const
egl
:
:
Display
*
display
)
override
;
bool
isValidNativeWindow
(
EGLNativeWindowType
window
)
const
override
;
egl
:
:
Error
validateClientBuffer
(
const
egl
:
:
Config
*
configuration
EGLenum
buftype
EGLClientBuffer
clientBuffer
const
egl
:
:
AttributeMap
&
attribs
)
const
override
;
egl
:
:
Error
validateImageClientBuffer
(
const
gl
:
:
Context
*
context
EGLenum
target
EGLClientBuffer
clientBuffer
const
egl
:
:
AttributeMap
&
attribs
)
const
override
;
DeviceImpl
*
createDevice
(
)
override
;
std
:
:
string
getRendererDescription
(
)
override
;
std
:
:
string
getVendorString
(
)
override
;
std
:
:
string
getVersionString
(
bool
includeFullVersion
)
override
;
egl
:
:
Error
waitClient
(
const
gl
:
:
Context
*
context
)
override
;
egl
:
:
Error
waitNative
(
const
gl
:
:
Context
*
context
EGLint
engine
)
override
;
gl
:
:
Version
getMaxSupportedESVersion
(
)
const
override
;
gl
:
:
Version
getMaxConformantESVersion
(
)
const
override
;
Optional
<
gl
:
:
Version
>
getMaxSupportedDesktopVersion
(
)
const
override
;
void
handleResult
(
HRESULT
hr
const
char
*
message
const
char
*
file
const
char
*
function
unsigned
int
line
)
override
;
const
std
:
:
string
&
getStoredErrorString
(
)
const
{
return
mStoredErrorString
;
}
void
initializeFrontendFeatures
(
angle
:
:
FrontendFeatures
*
features
)
const
override
;
void
populateFeatureList
(
angle
:
:
FeatureList
*
features
)
override
;
private
:
void
generateExtensions
(
egl
:
:
DisplayExtensions
*
outExtensions
)
const
override
;
void
generateCaps
(
egl
:
:
Caps
*
outCaps
)
const
override
;
egl
:
:
Display
*
mDisplay
;
rx
:
:
RendererD3D
*
mRenderer
;
std
:
:
string
mStoredErrorString
;
}
;
enum
D3D11InitError
{
D3D11_INIT_SUCCESS
=
0
D3D11_INIT_COMPILER_ERROR
D3D11_INIT_MISSING_DEP
D3D11_INIT_CREATEDEVICE_INVALIDARG
D3D11_INIT_CREATEDEVICE_ERROR
D3D11_INIT_INCOMPATIBLE_DXGI
D3D11_INIT_OTHER_ERROR
D3D11_INIT_CREATEDEVICE_FAIL
D3D11_INIT_CREATEDEVICE_NOTIMPL
D3D11_INIT_CREATEDEVICE_OUTOFMEMORY
D3D11_INIT_CREATEDEVICE_INVALIDCALL
D3D11_INIT_CREATEDEVICE_COMPONENTMISSING
D3D11_INIT_CREATEDEVICE_WASSTILLDRAWING
D3D11_INIT_CREATEDEVICE_NOTAVAILABLE
D3D11_INIT_CREATEDEVICE_DEVICEHUNG
D3D11_INIT_CREATEDEVICE_NULL
NUM_D3D11_INIT_ERRORS
}
;
enum
D3D9InitError
{
D3D9_INIT_SUCCESS
=
0
D3D9_INIT_COMPILER_ERROR
D3D9_INIT_MISSING_DEP
D3D9_INIT_CREATE_DEVICE_ERROR
D3D9_INIT_UNSUPPORTED_VERSION
D3D9_INIT_UNSUPPORTED_STRETCHRECT
D3D9_INIT_OUT_OF_MEMORY
D3D9_INIT_OTHER_ERROR
NUM_D3D9_INIT_ERRORS
}
;
}
#
endif
