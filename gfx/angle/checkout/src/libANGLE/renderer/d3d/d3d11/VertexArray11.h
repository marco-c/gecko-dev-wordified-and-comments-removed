#
ifndef
LIBANGLE_RENDERER_D3D_D3D11_VERTEXARRAY11_H_
#
define
LIBANGLE_RENDERER_D3D_D3D11_VERTEXARRAY11_H_
#
include
"
libANGLE
/
Framebuffer
.
h
"
#
include
"
libANGLE
/
renderer
/
VertexArrayImpl
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
Renderer11
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
renderer11_utils
.
h
"
#
include
"
libANGLE
/
signal_utils
.
h
"
namespace
rx
{
class
Renderer11
;
class
VertexArray11
:
public
VertexArrayImpl
public
angle
:
:
ObserverInterface
{
public
:
VertexArray11
(
const
gl
:
:
VertexArrayState
&
data
)
;
~
VertexArray11
(
)
override
;
void
destroy
(
const
gl
:
:
Context
*
context
)
override
;
void
syncState
(
const
gl
:
:
Context
*
context
const
gl
:
:
VertexArray
:
:
DirtyBits
&
dirtyBits
)
override
;
bool
hasActiveDynamicAttrib
(
const
gl
:
:
Context
*
context
)
;
gl
:
:
Error
updateDirtyAndDynamicAttribs
(
const
gl
:
:
Context
*
context
VertexDataManager
*
vertexDataManager
const
DrawCallVertexParams
&
vertexParams
)
;
void
clearDirtyAndPromoteDynamicAttribs
(
const
gl
:
:
Context
*
context
const
DrawCallVertexParams
&
vertexParams
)
;
const
std
:
:
vector
<
TranslatedAttribute
>
&
getTranslatedAttribs
(
)
const
;
void
onSubjectStateChange
(
const
gl
:
:
Context
*
context
angle
:
:
SubjectIndex
index
angle
:
:
SubjectMessage
message
)
override
;
Serial
getCurrentStateSerial
(
)
const
{
return
mCurrentStateSerial
;
}
void
markAllAttributeDivisorsForAdjustment
(
int
numViews
)
;
bool
flushAttribUpdates
(
const
gl
:
:
Context
*
context
)
;
bool
updateElementArrayStorage
(
const
gl
:
:
Context
*
context
GLenum
elementType
GLenum
destElementType
const
void
*
indices
)
;
TranslatedIndexData
*
getCachedIndexInfo
(
)
;
void
setCachedIndexInfoValid
(
)
;
bool
isCachedIndexInfoValid
(
)
const
;
private
:
void
updateVertexAttribStorage
(
const
gl
:
:
Context
*
context
size_t
attribIndex
)
;
std
:
:
vector
<
VertexStorageType
>
mAttributeStorageTypes
;
std
:
:
vector
<
TranslatedAttribute
>
mTranslatedAttribs
;
gl
:
:
AttributesMask
mDynamicAttribsMask
;
gl
:
:
AttributesMask
mAttribsToUpdate
;
gl
:
:
AttributesMask
mAttribsToTranslate
;
std
:
:
vector
<
gl
:
:
BindingPointer
<
gl
:
:
Buffer
>
>
mCurrentArrayBuffers
;
gl
:
:
BindingPointer
<
gl
:
:
Buffer
>
mCurrentElementArrayBuffer
;
std
:
:
vector
<
angle
:
:
ObserverBinding
>
mOnArrayBufferDataDirty
;
angle
:
:
ObserverBinding
mOnElementArrayBufferDataDirty
;
Serial
mCurrentStateSerial
;
int
mAppliedNumViewsToDivisor
;
GLenum
mLastElementType
;
unsigned
int
mLastDrawElementsOffset
;
IndexStorageType
mCurrentElementArrayStorage
;
TranslatedIndexData
mCachedIndexInfo
;
bool
mCachedIndexInfoValid
;
}
;
}
#
endif
