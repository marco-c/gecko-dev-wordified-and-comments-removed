#
ifndef
LIBANGLE_RENDERER_D3D_D3D11_FORMATUTILS11_H_
#
define
LIBANGLE_RENDERER_D3D_D3D11_FORMATUTILS11_H_
#
include
<
map
>
#
include
"
common
/
platform
.
h
"
#
include
"
libANGLE
/
angletypes
.
h
"
#
include
"
libANGLE
/
formatutils
.
h
"
#
include
"
libANGLE
/
renderer
/
copyvertex
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
formatutilsD3D
.
h
"
#
include
"
libANGLE
/
renderer
/
dxgi_format_map
.
h
"
#
include
"
libANGLE
/
renderer
/
renderer_utils
.
h
"
namespace
rx
{
struct
Renderer11DeviceCaps
;
namespace
d3d11
{
bool
SupportsMipGen
(
DXGI_FORMAT
dxgiFormat
D3D_FEATURE_LEVEL
featureLevel
)
;
struct
DXGIFormatSize
{
DXGIFormatSize
(
GLuint
pixelBits
GLuint
blockWidth
GLuint
blockHeight
)
;
GLuint
pixelBytes
;
GLuint
blockWidth
;
GLuint
blockHeight
;
}
;
const
DXGIFormatSize
&
GetDXGIFormatSizeInfo
(
DXGI_FORMAT
format
)
;
struct
VertexFormat
:
private
angle
:
:
NonCopyable
{
constexpr
VertexFormat
(
)
;
constexpr
VertexFormat
(
VertexConversionType
conversionType
DXGI_FORMAT
nativeFormat
VertexCopyFunction
copyFunction
)
;
VertexConversionType
conversionType
;
DXGI_FORMAT
nativeFormat
;
VertexCopyFunction
copyFunction
;
}
;
const
VertexFormat
&
GetVertexFormatInfo
(
angle
:
:
FormatID
vertexFormatID
D3D_FEATURE_LEVEL
featureLevel
)
;
}
}
#
endif
