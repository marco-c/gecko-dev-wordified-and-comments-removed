#
ifndef
LIBANGLE_RENDERER_D3D_D3D11_FENCE11_H_
#
define
LIBANGLE_RENDERER_D3D_D3D11_FENCE11_H_
#
include
"
libANGLE
/
renderer
/
FenceNVImpl
.
h
"
#
include
"
libANGLE
/
renderer
/
SyncImpl
.
h
"
namespace
rx
{
class
Renderer11
;
class
FenceNV11
:
public
FenceNVImpl
{
public
:
explicit
FenceNV11
(
Renderer11
*
renderer
)
;
~
FenceNV11
(
)
override
;
gl
:
:
Error
set
(
const
gl
:
:
Context
*
context
GLenum
condition
)
override
;
gl
:
:
Error
test
(
const
gl
:
:
Context
*
context
GLboolean
*
outFinished
)
override
;
gl
:
:
Error
finish
(
const
gl
:
:
Context
*
context
)
override
;
private
:
template
<
class
T
>
friend
angle
:
:
Result
FenceSetHelper
(
const
gl
:
:
Context
*
context
T
*
fence
)
;
template
<
class
T
>
friend
angle
:
:
Result
FenceTestHelper
(
const
gl
:
:
Context
*
context
T
*
fence
bool
flushCommandBuffer
GLboolean
*
outFinished
)
;
Renderer11
*
mRenderer
;
ID3D11Query
*
mQuery
;
}
;
class
Sync11
:
public
SyncImpl
{
public
:
explicit
Sync11
(
Renderer11
*
renderer
)
;
~
Sync11
(
)
override
;
gl
:
:
Error
set
(
const
gl
:
:
Context
*
context
GLenum
condition
GLbitfield
flags
)
override
;
gl
:
:
Error
clientWait
(
const
gl
:
:
Context
*
context
GLbitfield
flags
GLuint64
timeout
GLenum
*
outResult
)
override
;
gl
:
:
Error
serverWait
(
const
gl
:
:
Context
*
context
GLbitfield
flags
GLuint64
timeout
)
override
;
gl
:
:
Error
getStatus
(
const
gl
:
:
Context
*
context
GLint
*
outResult
)
override
;
private
:
template
<
class
T
>
friend
angle
:
:
Result
FenceSetHelper
(
const
gl
:
:
Context
*
context
T
*
fence
)
;
template
<
class
T
>
friend
angle
:
:
Result
FenceTestHelper
(
const
gl
:
:
Context
*
context
T
*
fence
bool
flushCommandBuffer
GLboolean
*
outFinished
)
;
Renderer11
*
mRenderer
;
ID3D11Query
*
mQuery
;
LONGLONG
mCounterFrequency
;
}
;
}
#
endif
