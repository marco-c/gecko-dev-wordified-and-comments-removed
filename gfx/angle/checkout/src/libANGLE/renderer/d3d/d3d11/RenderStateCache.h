#
ifndef
LIBANGLE_RENDERER_D3D_D3D11_RENDERSTATECACHE_H_
#
define
LIBANGLE_RENDERER_D3D_D3D11_RENDERSTATECACHE_H_
#
include
"
common
/
angleutils
.
h
"
#
include
"
libANGLE
/
Error
.
h
"
#
include
"
libANGLE
/
SizedMRUCache
.
h
"
#
include
"
libANGLE
/
angletypes
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
renderer11_utils
.
h
"
#
include
<
unordered_map
>
namespace
std
{
template
<
>
struct
hash
<
rx
:
:
d3d11
:
:
BlendStateKey
>
{
size_t
operator
(
)
(
const
rx
:
:
d3d11
:
:
BlendStateKey
&
key
)
const
{
return
angle
:
:
ComputeGenericHash
(
key
)
;
}
}
;
template
<
>
struct
hash
<
rx
:
:
d3d11
:
:
RasterizerStateKey
>
{
size_t
operator
(
)
(
const
rx
:
:
d3d11
:
:
RasterizerStateKey
&
key
)
const
{
return
angle
:
:
ComputeGenericHash
(
key
)
;
}
}
;
template
<
>
struct
hash
<
gl
:
:
DepthStencilState
>
{
size_t
operator
(
)
(
const
gl
:
:
DepthStencilState
&
key
)
const
{
return
angle
:
:
ComputeGenericHash
(
key
)
;
}
}
;
template
<
>
struct
hash
<
gl
:
:
SamplerState
>
{
size_t
operator
(
)
(
const
gl
:
:
SamplerState
&
key
)
const
{
return
angle
:
:
ComputeGenericHash
(
key
)
;
}
}
;
}
namespace
rx
{
class
Framebuffer11
;
class
Renderer11
;
class
RenderStateCache
:
angle
:
:
NonCopyable
{
public
:
RenderStateCache
(
)
;
virtual
~
RenderStateCache
(
)
;
void
clear
(
)
;
static
d3d11
:
:
BlendStateKey
GetBlendStateKey
(
const
gl
:
:
Context
*
context
Framebuffer11
*
framebuffer11
const
gl
:
:
BlendState
&
blendState
)
;
angle
:
:
Result
getBlendState
(
const
gl
:
:
Context
*
context
Renderer11
*
renderer
const
d3d11
:
:
BlendStateKey
&
key
const
d3d11
:
:
BlendState
*
*
outBlendState
)
;
angle
:
:
Result
getRasterizerState
(
const
gl
:
:
Context
*
context
Renderer11
*
renderer
const
gl
:
:
RasterizerState
&
rasterState
bool
scissorEnabled
ID3D11RasterizerState
*
*
outRasterizerState
)
;
angle
:
:
Result
getDepthStencilState
(
const
gl
:
:
Context
*
context
Renderer11
*
renderer
const
gl
:
:
DepthStencilState
&
dsState
const
d3d11
:
:
DepthStencilState
*
*
outDSState
)
;
angle
:
:
Result
getSamplerState
(
const
gl
:
:
Context
*
context
Renderer11
*
renderer
const
gl
:
:
SamplerState
&
samplerState
ID3D11SamplerState
*
*
outSamplerState
)
;
private
:
static
constexpr
unsigned
int
kMaxStates
=
4096
;
static
constexpr
unsigned
int
kGCLimit
=
128
;
using
BlendStateMap
=
angle
:
:
base
:
:
HashingMRUCache
<
d3d11
:
:
BlendStateKey
d3d11
:
:
BlendState
>
;
BlendStateMap
mBlendStateCache
;
using
RasterizerStateMap
=
angle
:
:
base
:
:
HashingMRUCache
<
d3d11
:
:
RasterizerStateKey
d3d11
:
:
RasterizerState
>
;
RasterizerStateMap
mRasterizerStateCache
;
using
DepthStencilStateMap
=
angle
:
:
base
:
:
HashingMRUCache
<
gl
:
:
DepthStencilState
d3d11
:
:
DepthStencilState
>
;
DepthStencilStateMap
mDepthStencilStateCache
;
using
SamplerStateMap
=
angle
:
:
base
:
:
HashingMRUCache
<
gl
:
:
SamplerState
d3d11
:
:
SamplerState
>
;
SamplerStateMap
mSamplerStateCache
;
}
;
}
#
endif
