#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
DebugAnnotator11
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
renderer11_utils
.
h
"
#
include
<
versionhelpers
.
h
>
namespace
rx
{
DebugAnnotator11
:
:
DebugAnnotator11
(
)
{
}
DebugAnnotator11
:
:
~
DebugAnnotator11
(
)
{
}
void
DebugAnnotator11
:
:
beginEvent
(
gl
:
:
Context
*
context
gl
:
:
EntryPoint
entryPoint
const
char
*
eventName
const
char
*
eventMessage
)
{
angle
:
:
LoggingAnnotator
:
:
beginEvent
(
context
entryPoint
eventName
eventMessage
)
;
if
(
loggingEnabledForThisThread
(
)
)
{
std
:
:
mbstate_t
state
=
std
:
:
mbstate_t
(
)
;
std
:
:
mbsrtowcs
(
mWCharMessage
&
eventMessage
kMaxMessageLength
&
state
)
;
mUserDefinedAnnotation
-
>
BeginEvent
(
mWCharMessage
)
;
}
}
void
DebugAnnotator11
:
:
endEvent
(
gl
:
:
Context
*
context
const
char
*
eventName
gl
:
:
EntryPoint
entryPoint
)
{
angle
:
:
LoggingAnnotator
:
:
endEvent
(
context
eventName
entryPoint
)
;
if
(
loggingEnabledForThisThread
(
)
)
{
mUserDefinedAnnotation
-
>
EndEvent
(
)
;
}
}
void
DebugAnnotator11
:
:
setMarker
(
const
char
*
markerName
)
{
angle
:
:
LoggingAnnotator
:
:
setMarker
(
markerName
)
;
if
(
loggingEnabledForThisThread
(
)
)
{
std
:
:
mbstate_t
state
=
std
:
:
mbstate_t
(
)
;
std
:
:
mbsrtowcs
(
mWCharMessage
&
markerName
kMaxMessageLength
&
state
)
;
mUserDefinedAnnotation
-
>
SetMarker
(
mWCharMessage
)
;
}
}
bool
DebugAnnotator11
:
:
getStatus
(
)
{
if
(
loggingEnabledForThisThread
(
)
)
{
return
!
!
(
mUserDefinedAnnotation
-
>
GetStatus
(
)
)
;
}
return
false
;
}
bool
DebugAnnotator11
:
:
loggingEnabledForThisThread
(
)
const
{
return
mUserDefinedAnnotation
!
=
nullptr
&
&
std
:
:
this_thread
:
:
get_id
(
)
=
=
mAnnotationThread
;
}
void
DebugAnnotator11
:
:
initialize
(
ID3D11DeviceContext
*
context
)
{
#
if
!
defined
(
ANGLE_ENABLE_WINDOWS_UWP
)
if
(
IsWindows10OrGreater
(
)
)
#
endif
{
mAnnotationThread
=
std
:
:
this_thread
:
:
get_id
(
)
;
mUserDefinedAnnotation
.
Attach
(
d3d11
:
:
DynamicCastComObject
<
ID3DUserDefinedAnnotation
>
(
context
)
)
;
}
}
void
DebugAnnotator11
:
:
release
(
)
{
mUserDefinedAnnotation
.
Reset
(
)
;
}
}
