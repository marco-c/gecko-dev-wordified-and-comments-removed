#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
DebugAnnotator11
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
renderer11_utils
.
h
"
#
include
<
versionhelpers
.
h
>
namespace
rx
{
DebugAnnotator11
:
:
DebugAnnotator11
(
)
{
}
DebugAnnotator11
:
:
~
DebugAnnotator11
(
)
{
}
void
DebugAnnotator11
:
:
beginEvent
(
const
char
*
eventName
const
char
*
eventMessage
)
{
angle
:
:
LoggingAnnotator
:
:
beginEvent
(
eventName
eventMessage
)
;
if
(
mUserDefinedAnnotation
!
=
nullptr
)
{
std
:
:
mbstate_t
state
=
std
:
:
mbstate_t
(
)
;
std
:
:
mbsrtowcs
(
mWCharMessage
&
eventMessage
kMaxMessageLength
&
state
)
;
std
:
:
lock_guard
<
std
:
:
mutex
>
lock
(
mAnnotationMutex
)
;
mUserDefinedAnnotation
-
>
BeginEvent
(
mWCharMessage
)
;
}
}
void
DebugAnnotator11
:
:
endEvent
(
const
char
*
eventName
)
{
angle
:
:
LoggingAnnotator
:
:
endEvent
(
eventName
)
;
if
(
mUserDefinedAnnotation
!
=
nullptr
)
{
std
:
:
lock_guard
<
std
:
:
mutex
>
lock
(
mAnnotationMutex
)
;
mUserDefinedAnnotation
-
>
EndEvent
(
)
;
}
}
void
DebugAnnotator11
:
:
setMarker
(
const
char
*
markerName
)
{
angle
:
:
LoggingAnnotator
:
:
setMarker
(
markerName
)
;
if
(
mUserDefinedAnnotation
!
=
nullptr
)
{
std
:
:
mbstate_t
state
=
std
:
:
mbstate_t
(
)
;
std
:
:
mbsrtowcs
(
mWCharMessage
&
markerName
kMaxMessageLength
&
state
)
;
std
:
:
lock_guard
<
std
:
:
mutex
>
lock
(
mAnnotationMutex
)
;
mUserDefinedAnnotation
-
>
SetMarker
(
mWCharMessage
)
;
}
}
bool
DebugAnnotator11
:
:
getStatus
(
)
{
if
(
mUserDefinedAnnotation
!
=
nullptr
)
{
std
:
:
lock_guard
<
std
:
:
mutex
>
lock
(
mAnnotationMutex
)
;
return
!
!
(
mUserDefinedAnnotation
-
>
GetStatus
(
)
)
;
}
return
false
;
}
void
DebugAnnotator11
:
:
initialize
(
ID3D11DeviceContext
*
context
)
{
if
(
IsWindows10OrGreater
(
)
)
{
mUserDefinedAnnotation
.
Attach
(
d3d11
:
:
DynamicCastComObject
<
ID3DUserDefinedAnnotation
>
(
context
)
)
;
}
}
void
DebugAnnotator11
:
:
release
(
)
{
mUserDefinedAnnotation
.
Reset
(
)
;
}
}
