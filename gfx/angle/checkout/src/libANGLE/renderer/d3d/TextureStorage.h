#
ifndef
LIBANGLE_RENDERER_D3D_TEXTURESTORAGE_H_
#
define
LIBANGLE_RENDERER_D3D_TEXTURESTORAGE_H_
#
include
"
common
/
debug
.
h
"
#
include
"
libANGLE
/
angletypes
.
h
"
#
include
<
GLES2
/
gl2
.
h
>
#
include
<
stdint
.
h
>
namespace
gl
{
class
Context
;
class
ImageIndex
;
struct
Box
;
struct
PixelUnpackState
;
}
namespace
angle
{
class
Subject
;
}
namespace
rx
{
class
SwapChainD3D
;
class
RenderTargetD3D
;
class
ImageD3D
;
class
TextureStorage
:
angle
:
:
NonCopyable
{
public
:
TextureStorage
(
)
:
mSubject
(
nullptr
)
{
}
virtual
~
TextureStorage
(
)
{
}
virtual
angle
:
:
Result
onDestroy
(
const
gl
:
:
Context
*
context
)
;
virtual
int
getTopLevel
(
)
const
=
0
;
virtual
bool
isRenderTarget
(
)
const
=
0
;
virtual
bool
isManaged
(
)
const
=
0
;
virtual
bool
supportsNativeMipmapFunction
(
)
const
=
0
;
virtual
int
getLevelCount
(
)
const
=
0
;
virtual
angle
:
:
Result
getRenderTarget
(
const
gl
:
:
Context
*
context
const
gl
:
:
ImageIndex
&
index
RenderTargetD3D
*
*
outRT
)
=
0
;
virtual
angle
:
:
Result
generateMipmap
(
const
gl
:
:
Context
*
context
const
gl
:
:
ImageIndex
&
sourceIndex
const
gl
:
:
ImageIndex
&
destIndex
)
=
0
;
virtual
angle
:
:
Result
copyToStorage
(
const
gl
:
:
Context
*
context
TextureStorage
*
destStorage
)
=
0
;
virtual
angle
:
:
Result
setData
(
const
gl
:
:
Context
*
context
const
gl
:
:
ImageIndex
&
index
ImageD3D
*
image
const
gl
:
:
Box
*
destBox
GLenum
type
const
gl
:
:
PixelUnpackState
&
unpack
const
uint8_t
*
pixelData
)
=
0
;
virtual
angle
:
:
Result
useLevelZeroWorkaroundTexture
(
const
gl
:
:
Context
*
context
bool
useLevelZeroTexture
)
;
void
setSubject
(
const
angle
:
:
Subject
*
subject
)
;
protected
:
const
angle
:
:
Subject
*
mSubject
;
}
;
inline
angle
:
:
Result
TextureStorage
:
:
onDestroy
(
const
gl
:
:
Context
*
context
)
{
return
angle
:
:
Result
:
:
Continue
(
)
;
}
inline
angle
:
:
Result
TextureStorage
:
:
useLevelZeroWorkaroundTexture
(
const
gl
:
:
Context
*
context
bool
useLevelZeroTexture
)
{
return
angle
:
:
Result
:
:
Continue
(
)
;
}
inline
void
TextureStorage
:
:
setSubject
(
const
angle
:
:
Subject
*
subject
)
{
mSubject
=
subject
;
}
using
TexStoragePointer
=
angle
:
:
UniqueObjectPointer
<
TextureStorage
gl
:
:
Context
>
;
}
#
endif
