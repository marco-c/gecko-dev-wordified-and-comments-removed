#
ifndef
LIBANGLE_RENDERER_D3D_HLSLCOMPILER_H_
#
define
LIBANGLE_RENDERER_D3D_HLSLCOMPILER_H_
#
include
"
libANGLE
/
Error
.
h
"
#
include
"
common
/
angleutils
.
h
"
#
include
"
common
/
platform
.
h
"
#
include
<
string
>
#
include
<
vector
>
namespace
gl
{
class
InfoLog
;
}
namespace
rx
{
namespace
d3d
{
class
Context
;
}
struct
CompileConfig
{
UINT
flags
;
std
:
:
string
name
;
CompileConfig
(
)
;
CompileConfig
(
UINT
flags
const
std
:
:
string
&
name
)
;
}
;
class
HLSLCompiler
:
angle
:
:
NonCopyable
{
public
:
HLSLCompiler
(
)
;
~
HLSLCompiler
(
)
;
void
release
(
)
;
angle
:
:
Result
compileToBinary
(
d3d
:
:
Context
*
context
gl
:
:
InfoLog
&
infoLog
const
std
:
:
string
&
hlsl
const
std
:
:
string
&
profile
const
std
:
:
vector
<
CompileConfig
>
&
configs
const
D3D_SHADER_MACRO
*
overrideMacros
ID3DBlob
*
*
outCompiledBlob
std
:
:
string
*
outDebugInfo
)
;
angle
:
:
Result
disassembleBinary
(
d3d
:
:
Context
*
context
ID3DBlob
*
shaderBinary
std
:
:
string
*
disassemblyOut
)
;
angle
:
:
Result
ensureInitialized
(
d3d
:
:
Context
*
context
)
;
private
:
bool
mInitialized
;
HMODULE
mD3DCompilerModule
;
pD3DCompile
mD3DCompileFunc
;
pD3DDisassemble
mD3DDisassembleFunc
;
}
;
}
#
endif
