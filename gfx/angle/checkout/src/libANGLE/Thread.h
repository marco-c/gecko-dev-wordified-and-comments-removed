#
ifndef
LIBANGLE_THREAD_H_
#
define
LIBANGLE_THREAD_H_
#
include
<
EGL
/
egl
.
h
>
#
include
"
libANGLE
/
Debug
.
h
"
#
include
<
atomic
>
namespace
angle
{
#
if
defined
(
ANGLE_USE_ANDROID_TLS_SLOT
)
extern
bool
gUseAndroidOpenGLTlsSlot
;
#
endif
void
PthreadKeyDestructorCallback
(
void
*
ptr
)
;
}
namespace
gl
{
class
Context
;
}
namespace
egl
{
class
Error
;
class
Debug
;
class
Display
;
class
Surface
;
class
Thread
:
public
LabeledObject
{
public
:
Thread
(
)
;
void
setLabel
(
EGLLabelKHR
label
)
override
;
EGLLabelKHR
getLabel
(
)
const
override
;
void
setSuccess
(
)
;
void
setError
(
EGLint
error
const
char
*
command
const
LabeledObject
*
object
const
char
*
message
)
;
void
setError
(
const
Error
&
error
const
char
*
command
const
LabeledObject
*
object
)
;
EGLint
getError
(
)
const
;
void
setAPI
(
EGLenum
api
)
;
EGLenum
getAPI
(
)
const
;
void
setCurrent
(
gl
:
:
Context
*
context
)
;
Surface
*
getCurrentDrawSurface
(
)
const
;
Surface
*
getCurrentReadSurface
(
)
const
;
gl
:
:
Context
*
getContext
(
)
const
;
Display
*
getDisplay
(
)
const
;
private
:
EGLLabelKHR
mLabel
;
EGLint
mError
;
EGLenum
mAPI
;
gl
:
:
Context
*
mContext
;
}
;
void
EnsureDebugAllocated
(
)
;
void
DeallocateDebug
(
)
;
Debug
*
GetDebug
(
)
;
}
#
endif
