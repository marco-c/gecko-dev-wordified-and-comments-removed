#
ifndef
LIBANGLE_VERTEXATTRIBUTE_H_
#
define
LIBANGLE_VERTEXATTRIBUTE_H_
#
include
"
libANGLE
/
Buffer
.
h
"
#
include
"
libANGLE
/
angletypes
.
h
"
#
include
"
libANGLE
/
renderer
/
Format
.
h
"
namespace
gl
{
class
VertexArray
;
class
VertexBinding
final
:
angle
:
:
NonCopyable
{
public
:
VertexBinding
(
)
;
explicit
VertexBinding
(
GLuint
boundAttribute
)
;
VertexBinding
(
VertexBinding
&
&
binding
)
;
~
VertexBinding
(
)
;
VertexBinding
&
operator
=
(
VertexBinding
&
&
binding
)
;
GLuint
getStride
(
)
const
{
return
mStride
;
}
void
setStride
(
GLuint
strideIn
)
{
mStride
=
strideIn
;
}
GLuint
getDivisor
(
)
const
{
return
mDivisor
;
}
void
setDivisor
(
GLuint
divisorIn
)
{
mDivisor
=
divisorIn
;
}
GLintptr
getOffset
(
)
const
{
return
mOffset
;
}
void
setOffset
(
GLintptr
offsetIn
)
{
mOffset
=
offsetIn
;
}
const
BindingPointer
<
Buffer
>
&
getBuffer
(
)
const
{
return
mBuffer
;
}
ANGLE_INLINE
void
setBuffer
(
const
gl
:
:
Context
*
context
Buffer
*
bufferIn
)
{
mBuffer
.
set
(
context
bufferIn
)
;
}
ANGLE_INLINE
void
assignBuffer
(
Buffer
*
bufferIn
)
{
mBuffer
.
assign
(
bufferIn
)
;
}
void
onContainerBindingChanged
(
const
Context
*
context
int
incr
)
const
;
const
AttributesMask
&
getBoundAttributesMask
(
)
const
{
return
mBoundAttributesMask
;
}
void
setBoundAttribute
(
size_t
index
)
{
mBoundAttributesMask
.
set
(
index
)
;
}
void
resetBoundAttribute
(
size_t
index
)
{
mBoundAttributesMask
.
reset
(
index
)
;
}
private
:
GLuint
mStride
;
GLuint
mDivisor
;
GLintptr
mOffset
;
BindingPointer
<
Buffer
>
mBuffer
;
AttributesMask
mBoundAttributesMask
;
}
;
struct
VertexAttribute
final
:
private
angle
:
:
NonCopyable
{
explicit
VertexAttribute
(
GLuint
bindingIndex
)
;
VertexAttribute
(
VertexAttribute
&
&
attrib
)
;
VertexAttribute
&
operator
=
(
VertexAttribute
&
&
attrib
)
;
void
updateCachedElementLimit
(
const
VertexBinding
&
binding
)
;
GLint64
getCachedElementLimit
(
)
const
{
return
mCachedElementLimit
;
}
bool
enabled
;
const
angle
:
:
Format
*
format
;
const
void
*
pointer
;
GLuint
relativeOffset
;
GLuint
vertexAttribArrayStride
;
GLuint
bindingIndex
;
static
constexpr
GLint64
kIntegerOverflow
=
std
:
:
numeric_limits
<
GLint64
>
:
:
min
(
)
;
private
:
GLint64
mCachedElementLimit
;
}
;
ANGLE_INLINE
size_t
ComputeVertexAttributeTypeSize
(
const
VertexAttribute
&
attrib
)
{
ASSERT
(
attrib
.
format
)
;
return
attrib
.
format
-
>
pixelBytes
;
}
size_t
ComputeVertexAttributeStride
(
const
VertexAttribute
&
attrib
const
VertexBinding
&
binding
)
;
GLintptr
ComputeVertexAttributeOffset
(
const
VertexAttribute
&
attrib
const
VertexBinding
&
binding
)
;
size_t
ComputeVertexBindingElementCount
(
GLuint
divisor
size_t
drawCount
size_t
instanceCount
)
;
struct
VertexAttribCurrentValueData
{
union
{
GLfloat
FloatValues
[
4
]
;
GLint
IntValues
[
4
]
;
GLuint
UnsignedIntValues
[
4
]
;
}
Values
;
VertexAttribType
Type
;
VertexAttribCurrentValueData
(
)
;
void
setFloatValues
(
const
GLfloat
floatValues
[
4
]
)
;
void
setIntValues
(
const
GLint
intValues
[
4
]
)
;
void
setUnsignedIntValues
(
const
GLuint
unsignedIntValues
[
4
]
)
;
}
;
bool
operator
=
=
(
const
VertexAttribCurrentValueData
&
a
const
VertexAttribCurrentValueData
&
b
)
;
bool
operator
!
=
(
const
VertexAttribCurrentValueData
&
a
const
VertexAttribCurrentValueData
&
b
)
;
}
#
include
"
VertexAttribute
.
inc
"
#
endif
