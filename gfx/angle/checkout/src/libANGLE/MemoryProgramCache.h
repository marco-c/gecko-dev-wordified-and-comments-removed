#
ifndef
LIBANGLE_MEMORY_PROGRAM_CACHE_H_
#
define
LIBANGLE_MEMORY_PROGRAM_CACHE_H_
#
include
<
array
>
#
include
"
common
/
MemoryBuffer
.
h
"
#
include
"
libANGLE
/
BlobCache
.
h
"
#
include
"
libANGLE
/
Error
.
h
"
namespace
gl
{
class
Context
;
class
Program
;
class
ProgramState
;
class
MemoryProgramCache
final
:
angle
:
:
NonCopyable
{
public
:
explicit
MemoryProgramCache
(
egl
:
:
BlobCache
&
blobCache
)
;
~
MemoryProgramCache
(
)
;
static
void
ComputeHash
(
const
Context
*
context
const
Program
*
program
egl
:
:
BlobCache
:
:
Key
*
hashOut
)
;
bool
get
(
const
Context
*
context
const
egl
:
:
BlobCache
:
:
Key
&
programHash
egl
:
:
BlobCache
:
:
Value
*
programOut
size_t
*
programSizeOut
)
;
bool
getAt
(
size_t
index
const
egl
:
:
BlobCache
:
:
Key
*
*
hashOut
egl
:
:
BlobCache
:
:
Value
*
programOut
)
;
void
remove
(
const
egl
:
:
BlobCache
:
:
Key
&
programHash
)
;
angle
:
:
Result
putProgram
(
const
egl
:
:
BlobCache
:
:
Key
&
programHash
const
Context
*
context
const
Program
*
program
)
;
angle
:
:
Result
updateProgram
(
const
Context
*
context
const
Program
*
program
)
;
ANGLE_NO_DISCARD
bool
putBinary
(
const
egl
:
:
BlobCache
:
:
Key
&
programHash
const
uint8_t
*
binary
size_t
length
)
;
angle
:
:
Result
getProgram
(
const
Context
*
context
Program
*
program
egl
:
:
BlobCache
:
:
Key
*
hashOut
)
;
void
clear
(
)
;
void
resize
(
size_t
maxCacheSizeBytes
)
;
size_t
entryCount
(
)
const
;
size_t
trim
(
size_t
limit
)
;
size_t
size
(
)
const
;
size_t
maxSize
(
)
const
;
private
:
egl
:
:
BlobCache
&
mBlobCache
;
unsigned
int
mIssuedWarnings
;
}
;
}
#
endif
