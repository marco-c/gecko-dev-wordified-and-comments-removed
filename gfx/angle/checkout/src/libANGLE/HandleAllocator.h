#
ifndef
LIBANGLE_HANDLEALLOCATOR_H_
#
define
LIBANGLE_HANDLEALLOCATOR_H_
#
include
"
common
/
angleutils
.
h
"
#
include
"
angle_gl
.
h
"
namespace
gl
{
class
HandleAllocator
final
:
angle
:
:
NonCopyable
{
public
:
HandleAllocator
(
)
;
HandleAllocator
(
GLuint
maximumHandleValue
)
;
~
HandleAllocator
(
)
;
void
setBaseHandle
(
GLuint
value
)
;
GLuint
allocate
(
)
;
void
release
(
GLuint
handle
)
;
void
reserve
(
GLuint
handle
)
;
void
reset
(
)
;
void
enableLogging
(
bool
enabled
)
;
private
:
GLuint
mBaseValue
;
GLuint
mNextValue
;
typedef
std
:
:
vector
<
GLuint
>
HandleList
;
HandleList
mFreeValues
;
struct
HandleRange
{
HandleRange
(
GLuint
beginIn
GLuint
endIn
)
:
begin
(
beginIn
)
end
(
endIn
)
{
}
GLuint
begin
;
GLuint
end
;
}
;
struct
HandleRangeComparator
;
std
:
:
vector
<
HandleRange
>
mUnallocatedList
;
std
:
:
vector
<
GLuint
>
mReleasedList
;
bool
mLoggingEnabled
;
}
;
}
#
endif
