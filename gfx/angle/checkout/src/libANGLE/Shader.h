#
ifndef
LIBANGLE_SHADER_H_
#
define
LIBANGLE_SHADER_H_
#
include
<
list
>
#
include
<
memory
>
#
include
<
string
>
#
include
<
vector
>
#
include
<
GLSLANG
/
ShaderLang
.
h
>
#
include
"
angle_gl
.
h
"
#
include
"
common
/
Optional
.
h
"
#
include
"
common
/
angleutils
.
h
"
#
include
"
libANGLE
/
Caps
.
h
"
#
include
"
libANGLE
/
Compiler
.
h
"
#
include
"
libANGLE
/
Debug
.
h
"
#
include
"
libANGLE
/
angletypes
.
h
"
namespace
rx
{
class
GLImplFactory
;
class
ShaderImpl
;
class
ShaderSh
;
class
WaitableCompileEvent
;
}
namespace
angle
{
class
WaitableEvent
;
class
WorkerThreadPool
;
}
namespace
gl
{
class
CompileTask
;
class
Context
;
class
ShaderProgramManager
;
class
State
;
enum
class
CompileStatus
{
NOT_COMPILED
COMPILE_REQUESTED
COMPILED
}
;
class
ShaderState
final
:
angle
:
:
NonCopyable
{
public
:
ShaderState
(
ShaderType
shaderType
)
;
~
ShaderState
(
)
;
const
std
:
:
string
&
getLabel
(
)
const
{
return
mLabel
;
}
const
std
:
:
string
&
getSource
(
)
const
{
return
mSource
;
}
const
std
:
:
string
&
getTranslatedSource
(
)
const
{
return
mTranslatedSource
;
}
ShaderType
getShaderType
(
)
const
{
return
mShaderType
;
}
int
getShaderVersion
(
)
const
{
return
mShaderVersion
;
}
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getInputVaryings
(
)
const
{
return
mInputVaryings
;
}
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getOutputVaryings
(
)
const
{
return
mOutputVaryings
;
}
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getUniforms
(
)
const
{
return
mUniforms
;
}
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
&
getUniformBlocks
(
)
const
{
return
mUniformBlocks
;
}
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
&
getShaderStorageBlocks
(
)
const
{
return
mShaderStorageBlocks
;
}
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getActiveAttributes
(
)
const
{
return
mActiveAttributes
;
}
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getAllAttributes
(
)
const
{
return
mAllAttributes
;
}
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getActiveOutputVariables
(
)
const
{
return
mActiveOutputVariables
;
}
bool
compilePending
(
)
const
{
return
mCompileStatus
=
=
CompileStatus
:
:
COMPILE_REQUESTED
;
}
const
sh
:
:
WorkGroupSize
&
getLocalSize
(
)
const
{
return
mLocalSize
;
}
bool
getEarlyFragmentTestsOptimization
(
)
const
{
return
mEarlyFragmentTestsOptimization
;
}
int
getNumViews
(
)
const
{
return
mNumViews
;
}
Optional
<
PrimitiveMode
>
getGeometryShaderInputPrimitiveType
(
)
const
{
return
mGeometryShaderInputPrimitiveType
;
}
Optional
<
PrimitiveMode
>
getGeometryShaderOutputPrimitiveType
(
)
const
{
return
mGeometryShaderOutputPrimitiveType
;
}
Optional
<
GLint
>
geoGeometryShaderMaxVertices
(
)
const
{
return
mGeometryShaderMaxVertices
;
}
Optional
<
GLint
>
getGeometryShaderInvocations
(
)
const
{
return
mGeometryShaderInvocations
;
}
CompileStatus
getCompileStatus
(
)
const
{
return
mCompileStatus
;
}
private
:
friend
class
Shader
;
std
:
:
string
mLabel
;
ShaderType
mShaderType
;
int
mShaderVersion
;
std
:
:
string
mTranslatedSource
;
std
:
:
string
mSource
;
sh
:
:
WorkGroupSize
mLocalSize
;
std
:
:
vector
<
sh
:
:
ShaderVariable
>
mInputVaryings
;
std
:
:
vector
<
sh
:
:
ShaderVariable
>
mOutputVaryings
;
std
:
:
vector
<
sh
:
:
ShaderVariable
>
mUniforms
;
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
mUniformBlocks
;
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
mShaderStorageBlocks
;
std
:
:
vector
<
sh
:
:
ShaderVariable
>
mAllAttributes
;
std
:
:
vector
<
sh
:
:
ShaderVariable
>
mActiveAttributes
;
std
:
:
vector
<
sh
:
:
ShaderVariable
>
mActiveOutputVariables
;
bool
mEarlyFragmentTestsOptimization
;
int
mNumViews
;
Optional
<
PrimitiveMode
>
mGeometryShaderInputPrimitiveType
;
Optional
<
PrimitiveMode
>
mGeometryShaderOutputPrimitiveType
;
Optional
<
GLint
>
mGeometryShaderMaxVertices
;
int
mGeometryShaderInvocations
;
CompileStatus
mCompileStatus
;
}
;
class
Shader
final
:
angle
:
:
NonCopyable
public
LabeledObject
{
public
:
Shader
(
ShaderProgramManager
*
manager
rx
:
:
GLImplFactory
*
implFactory
const
gl
:
:
Limitations
&
rendererLimitations
ShaderType
type
ShaderProgramID
handle
)
;
void
onDestroy
(
const
Context
*
context
)
;
void
setLabel
(
const
Context
*
context
const
std
:
:
string
&
label
)
override
;
const
std
:
:
string
&
getLabel
(
)
const
override
;
ShaderType
getType
(
)
const
{
return
mType
;
}
ShaderProgramID
getHandle
(
)
const
;
rx
:
:
ShaderImpl
*
getImplementation
(
)
const
{
return
mImplementation
.
get
(
)
;
}
void
setSource
(
GLsizei
count
const
char
*
const
*
string
const
GLint
*
length
)
;
int
getInfoLogLength
(
)
;
void
getInfoLog
(
GLsizei
bufSize
GLsizei
*
length
char
*
infoLog
)
;
std
:
:
string
getInfoLogString
(
)
const
{
return
mInfoLog
;
}
int
getSourceLength
(
)
const
;
const
std
:
:
string
&
getSourceString
(
)
const
{
return
mState
.
getSource
(
)
;
}
void
getSource
(
GLsizei
bufSize
GLsizei
*
length
char
*
buffer
)
const
;
int
getTranslatedSourceLength
(
)
;
int
getTranslatedSourceWithDebugInfoLength
(
)
;
const
std
:
:
string
&
getTranslatedSource
(
)
;
void
getTranslatedSource
(
GLsizei
bufSize
GLsizei
*
length
char
*
buffer
)
;
void
getTranslatedSourceWithDebugInfo
(
GLsizei
bufSize
GLsizei
*
length
char
*
buffer
)
;
void
compile
(
const
Context
*
context
)
;
bool
isCompiled
(
)
;
bool
isCompleted
(
)
;
void
addRef
(
)
;
void
release
(
const
Context
*
context
)
;
unsigned
int
getRefCount
(
)
const
;
bool
isFlaggedForDeletion
(
)
const
;
void
flagForDeletion
(
)
;
bool
hasEarlyFragmentTestsOptimization
(
)
const
{
return
mState
.
mEarlyFragmentTestsOptimization
;
}
int
getShaderVersion
(
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getInputVaryings
(
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getOutputVaryings
(
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getUniforms
(
)
;
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
&
getUniformBlocks
(
)
;
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
&
getShaderStorageBlocks
(
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getActiveAttributes
(
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getAllAttributes
(
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
getActiveOutputVariables
(
)
;
std
:
:
string
getTransformFeedbackVaryingMappedName
(
const
std
:
:
string
&
tfVaryingName
)
;
const
sh
:
:
WorkGroupSize
&
getWorkGroupSize
(
)
;
int
getNumViews
(
)
;
Optional
<
PrimitiveMode
>
getGeometryShaderInputPrimitiveType
(
)
;
Optional
<
PrimitiveMode
>
getGeometryShaderOutputPrimitiveType
(
)
;
int
getGeometryShaderInvocations
(
)
;
Optional
<
GLint
>
getGeometryShaderMaxVertices
(
)
;
const
std
:
:
string
&
getCompilerResourcesString
(
)
const
;
const
ShaderState
&
getState
(
)
const
{
return
mState
;
}
GLuint
getCurrentMaxComputeWorkGroupInvocations
(
)
const
{
return
mCurrentMaxComputeWorkGroupInvocations
;
}
unsigned
int
getMaxComputeSharedMemory
(
)
const
{
return
mMaxComputeSharedMemory
;
}
bool
hasBeenDeleted
(
)
const
{
return
mDeleteStatus
;
}
private
:
struct
CompilingState
;
~
Shader
(
)
override
;
static
void
GetSourceImpl
(
const
std
:
:
string
&
source
GLsizei
bufSize
GLsizei
*
length
char
*
buffer
)
;
void
resolveCompile
(
)
;
ShaderState
mState
;
std
:
:
unique_ptr
<
rx
:
:
ShaderImpl
>
mImplementation
;
const
gl
:
:
Limitations
mRendererLimitations
;
const
ShaderProgramID
mHandle
;
const
ShaderType
mType
;
unsigned
int
mRefCount
;
bool
mDeleteStatus
;
std
:
:
string
mInfoLog
;
BindingPointer
<
Compiler
>
mBoundCompiler
;
std
:
:
unique_ptr
<
CompilingState
>
mCompilingState
;
std
:
:
string
mCompilerResourcesString
;
ShaderProgramManager
*
mResourceManager
;
GLuint
mCurrentMaxComputeWorkGroupInvocations
;
unsigned
int
mMaxComputeSharedMemory
;
}
;
bool
CompareShaderVar
(
const
sh
:
:
ShaderVariable
&
x
const
sh
:
:
ShaderVariable
&
y
)
;
const
char
*
GetShaderTypeString
(
ShaderType
type
)
;
}
#
endif
