#
include
<
platform
/
Platform
.
h
>
#
include
<
cstring
>
#
include
"
common
/
debug
.
h
"
namespace
{
angle
:
:
PlatformMethods
&
PlatformMethods
(
)
{
static
angle
:
:
PlatformMethods
platformMethods
;
return
platformMethods
;
}
}
angle
:
:
PlatformMethods
*
ANGLEPlatformCurrent
(
)
{
return
&
PlatformMethods
(
)
;
}
bool
ANGLE_APIENTRY
ANGLEGetDisplayPlatform
(
angle
:
:
EGLDisplayType
display
const
char
*
const
methodNames
[
]
unsigned
int
methodNameCount
void
*
context
void
*
platformMethods
)
{
angle
:
:
PlatformMethods
*
*
platformMethodsOut
=
reinterpret_cast
<
angle
:
:
PlatformMethods
*
*
>
(
platformMethods
)
;
if
(
methodNameCount
>
angle
:
:
g_NumPlatformMethods
)
{
ERR
(
)
<
<
"
Invalid
platform
method
count
:
"
<
<
methodNameCount
<
<
"
expected
"
<
<
angle
:
:
g_NumPlatformMethods
<
<
"
.
"
;
return
false
;
}
for
(
unsigned
int
nameIndex
=
0
;
nameIndex
<
methodNameCount
;
+
+
nameIndex
)
{
const
char
*
expectedName
=
angle
:
:
g_PlatformMethodNames
[
nameIndex
]
;
const
char
*
actualName
=
methodNames
[
nameIndex
]
;
if
(
strcmp
(
expectedName
actualName
)
!
=
0
)
{
ERR
(
)
<
<
"
Invalid
platform
method
name
:
"
<
<
actualName
<
<
"
expected
"
<
<
expectedName
<
<
"
.
"
;
return
false
;
}
}
PlatformMethods
(
)
.
context
=
context
;
*
platformMethodsOut
=
&
PlatformMethods
(
)
;
return
true
;
}
void
ANGLE_APIENTRY
ANGLEResetDisplayPlatform
(
angle
:
:
EGLDisplayType
display
)
{
PlatformMethods
(
)
=
angle
:
:
PlatformMethods
(
)
;
}
