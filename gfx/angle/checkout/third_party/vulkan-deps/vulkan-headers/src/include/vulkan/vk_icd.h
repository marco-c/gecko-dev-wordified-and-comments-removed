#
ifndef
VKICD_H
#
define
VKICD_H
#
include
"
vulkan
.
h
"
#
include
<
stdbool
.
h
>
#
define
CURRENT_LOADER_ICD_INTERFACE_VERSION
6
#
define
MIN_SUPPORTED_LOADER_ICD_INTERFACE_VERSION
0
#
define
MIN_PHYS_DEV_EXTENSION_ICD_INTERFACE_VERSION
4
typedef
VkResult
(
VKAPI_PTR
*
PFN_vkNegotiateLoaderICDInterfaceVersion
)
(
uint32_t
*
pVersion
)
;
#
ifndef
PFN_GetPhysicalDeviceProcAddr
typedef
PFN_vkVoidFunction
(
VKAPI_PTR
*
PFN_GetPhysicalDeviceProcAddr
)
(
VkInstance
instance
const
char
*
pName
)
;
#
endif
typedef
VkResult
(
VKAPI_PTR
*
PFN_vk_icdNegotiateLoaderICDInterfaceVersion
)
(
uint32_t
*
pVersion
)
;
typedef
PFN_vkVoidFunction
(
VKAPI_PTR
*
PFN_vk_icdGetInstanceProcAddr
)
(
VkInstance
instance
const
char
*
pName
)
;
typedef
PFN_vkVoidFunction
(
VKAPI_PTR
*
PFN_vk_icdGetPhysicalDeviceProcAddr
)
(
VkInstance
instance
const
char
*
pName
)
;
#
if
defined
(
VK_USE_PLATFORM_WIN32_KHR
)
typedef
VkResult
(
VKAPI_PTR
*
PFN_vk_icdEnumerateAdapterPhysicalDevices
)
(
VkInstance
instance
LUID
adapterLUID
uint32_t
*
pPhysicalDeviceCount
VkPhysicalDevice
*
pPhysicalDevices
)
;
#
endif
#
if
!
defined
(
VK_NO_PROTOTYPES
)
#
ifdef
__cplusplus
extern
"
C
"
{
#
endif
VKAPI_ATTR
VkResult
VKAPI_CALL
vk_icdNegotiateLoaderICDInterfaceVersion
(
uint32_t
*
pVersion
)
;
VKAPI_ATTR
PFN_vkVoidFunction
VKAPI_CALL
vk_icdGetInstanceProcAddr
(
VkInstance
instance
const
char
*
pName
)
;
VKAPI_ATTR
PFN_vkVoidFunction
VKAPI_CALL
vk_icdGetPhysicalDeviceProcAddr
(
VkInstance
isntance
const
char
*
pName
)
;
#
if
defined
(
VK_USE_PLATFORM_WIN32_KHR
)
VKAPI_ATTR
VkResult
VKAPI_CALL
vk_icdEnumerateAdapterPhysicalDevices
(
VkInstance
instance
LUID
adapterLUID
uint32_t
*
pPhysicalDeviceCount
VkPhysicalDevice
*
pPhysicalDevices
)
;
#
endif
#
ifdef
__cplusplus
}
#
endif
#
endif
#
define
ICD_LOADER_MAGIC
0x01CDC0DE
typedef
union
{
uintptr_t
loaderMagic
;
void
*
loaderData
;
}
VK_LOADER_DATA
;
static
inline
void
set_loader_magic_value
(
void
*
pNewObject
)
{
VK_LOADER_DATA
*
loader_info
=
(
VK_LOADER_DATA
*
)
pNewObject
;
loader_info
-
>
loaderMagic
=
ICD_LOADER_MAGIC
;
}
static
inline
bool
valid_loader_magic_value
(
void
*
pNewObject
)
{
const
VK_LOADER_DATA
*
loader_info
=
(
VK_LOADER_DATA
*
)
pNewObject
;
return
(
loader_info
-
>
loaderMagic
&
0xffffffff
)
=
=
ICD_LOADER_MAGIC
;
}
typedef
enum
{
VK_ICD_WSI_PLATFORM_MIR
VK_ICD_WSI_PLATFORM_WAYLAND
VK_ICD_WSI_PLATFORM_WIN32
VK_ICD_WSI_PLATFORM_XCB
VK_ICD_WSI_PLATFORM_XLIB
VK_ICD_WSI_PLATFORM_ANDROID
VK_ICD_WSI_PLATFORM_MACOS
VK_ICD_WSI_PLATFORM_IOS
VK_ICD_WSI_PLATFORM_DISPLAY
VK_ICD_WSI_PLATFORM_HEADLESS
VK_ICD_WSI_PLATFORM_METAL
VK_ICD_WSI_PLATFORM_DIRECTFB
VK_ICD_WSI_PLATFORM_VI
VK_ICD_WSI_PLATFORM_GGP
VK_ICD_WSI_PLATFORM_SCREEN
}
VkIcdWsiPlatform
;
typedef
struct
{
VkIcdWsiPlatform
platform
;
}
VkIcdSurfaceBase
;
#
ifdef
VK_USE_PLATFORM_MIR_KHR
typedef
struct
{
VkIcdSurfaceBase
base
;
MirConnection
*
connection
;
MirSurface
*
mirSurface
;
}
VkIcdSurfaceMir
;
#
endif
#
ifdef
VK_USE_PLATFORM_WAYLAND_KHR
typedef
struct
{
VkIcdSurfaceBase
base
;
struct
wl_display
*
display
;
struct
wl_surface
*
surface
;
}
VkIcdSurfaceWayland
;
#
endif
#
ifdef
VK_USE_PLATFORM_WIN32_KHR
typedef
struct
{
VkIcdSurfaceBase
base
;
HINSTANCE
hinstance
;
HWND
hwnd
;
}
VkIcdSurfaceWin32
;
#
endif
#
ifdef
VK_USE_PLATFORM_XCB_KHR
typedef
struct
{
VkIcdSurfaceBase
base
;
xcb_connection_t
*
connection
;
xcb_window_t
window
;
}
VkIcdSurfaceXcb
;
#
endif
#
ifdef
VK_USE_PLATFORM_XLIB_KHR
typedef
struct
{
VkIcdSurfaceBase
base
;
Display
*
dpy
;
Window
window
;
}
VkIcdSurfaceXlib
;
#
endif
#
ifdef
VK_USE_PLATFORM_DIRECTFB_EXT
typedef
struct
{
VkIcdSurfaceBase
base
;
IDirectFB
*
dfb
;
IDirectFBSurface
*
surface
;
}
VkIcdSurfaceDirectFB
;
#
endif
#
ifdef
VK_USE_PLATFORM_ANDROID_KHR
typedef
struct
{
VkIcdSurfaceBase
base
;
struct
ANativeWindow
*
window
;
}
VkIcdSurfaceAndroid
;
#
endif
#
ifdef
VK_USE_PLATFORM_MACOS_MVK
typedef
struct
{
VkIcdSurfaceBase
base
;
const
void
*
pView
;
}
VkIcdSurfaceMacOS
;
#
endif
#
ifdef
VK_USE_PLATFORM_IOS_MVK
typedef
struct
{
VkIcdSurfaceBase
base
;
const
void
*
pView
;
}
VkIcdSurfaceIOS
;
#
endif
#
ifdef
VK_USE_PLATFORM_GGP
typedef
struct
{
VkIcdSurfaceBase
base
;
GgpStreamDescriptor
streamDescriptor
;
}
VkIcdSurfaceGgp
;
#
endif
typedef
struct
{
VkIcdSurfaceBase
base
;
VkDisplayModeKHR
displayMode
;
uint32_t
planeIndex
;
uint32_t
planeStackIndex
;
VkSurfaceTransformFlagBitsKHR
transform
;
float
globalAlpha
;
VkDisplayPlaneAlphaFlagBitsKHR
alphaMode
;
VkExtent2D
imageExtent
;
}
VkIcdSurfaceDisplay
;
typedef
struct
{
VkIcdSurfaceBase
base
;
}
VkIcdSurfaceHeadless
;
#
ifdef
VK_USE_PLATFORM_METAL_EXT
typedef
struct
{
VkIcdSurfaceBase
base
;
const
CAMetalLayer
*
pLayer
;
}
VkIcdSurfaceMetal
;
#
endif
#
ifdef
VK_USE_PLATFORM_VI_NN
typedef
struct
{
VkIcdSurfaceBase
base
;
void
*
window
;
}
VkIcdSurfaceVi
;
#
endif
#
ifdef
VK_USE_PLATFORM_SCREEN_QNX
typedef
struct
{
VkIcdSurfaceBase
base
;
struct
_screen_context
*
context
;
struct
_screen_window
*
window
;
}
VkIcdSurfaceScreen
;
#
endif
#
endif
