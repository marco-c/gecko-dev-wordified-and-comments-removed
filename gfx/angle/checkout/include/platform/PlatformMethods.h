#
ifndef
ANGLE_PLATFORMMETHODS_H
#
define
ANGLE_PLATFORMMETHODS_H
#
include
<
stdint
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
array
>
#
define
EGL_PLATFORM_ANGLE_PLATFORM_METHODS_ANGLEX
0x3482
#
if
!
defined
(
ANGLE_PLATFORM_EXPORT
)
#
if
defined
(
_WIN32
)
#
if
!
defined
(
LIBANGLE_IMPLEMENTATION
)
#
define
ANGLE_PLATFORM_EXPORT
__declspec
(
dllimport
)
#
else
#
define
ANGLE_PLATFORM_EXPORT
__declspec
(
dllexport
)
#
endif
#
elif
defined
(
__GNUC__
)
|
|
defined
(
__clang__
)
#
define
ANGLE_PLATFORM_EXPORT
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
endif
#
endif
#
if
!
defined
(
ANGLE_PLATFORM_EXPORT
)
#
define
ANGLE_PLATFORM_EXPORT
#
endif
#
if
defined
(
_WIN32
)
#
define
ANGLE_APIENTRY
__stdcall
#
else
#
define
ANGLE_APIENTRY
#
endif
namespace
angle
{
struct
FeaturesD3D
;
struct
FeaturesVk
;
struct
FeaturesMtl
;
using
TraceEventHandle
=
uint64_t
;
using
EGLDisplayType
=
void
*
;
struct
PlatformMethods
;
using
CurrentTimeFunc
=
double
(
*
)
(
PlatformMethods
*
platform
)
;
inline
double
DefaultCurrentTime
(
PlatformMethods
*
platform
)
{
return
0
.
0
;
}
using
MonotonicallyIncreasingTimeFunc
=
double
(
*
)
(
PlatformMethods
*
platform
)
;
inline
double
DefaultMonotonicallyIncreasingTime
(
PlatformMethods
*
platform
)
{
return
0
.
0
;
}
using
LogErrorFunc
=
void
(
*
)
(
PlatformMethods
*
platform
const
char
*
errorMessage
)
;
inline
void
DefaultLogError
(
PlatformMethods
*
platform
const
char
*
errorMessage
)
{
}
using
LogWarningFunc
=
void
(
*
)
(
PlatformMethods
*
platform
const
char
*
warningMessage
)
;
inline
void
DefaultLogWarning
(
PlatformMethods
*
platform
const
char
*
warningMessage
)
{
}
using
LogInfoFunc
=
void
(
*
)
(
PlatformMethods
*
platform
const
char
*
infoMessage
)
;
inline
void
DefaultLogInfo
(
PlatformMethods
*
platform
const
char
*
infoMessage
)
{
}
using
GetTraceCategoryEnabledFlagFunc
=
const
unsigned
char
*
(
*
)
(
PlatformMethods
*
platform
const
char
*
categoryName
)
;
inline
const
unsigned
char
*
DefaultGetTraceCategoryEnabledFlag
(
PlatformMethods
*
platform
const
char
*
categoryName
)
{
return
nullptr
;
}
using
AddTraceEventFunc
=
angle
:
:
TraceEventHandle
(
*
)
(
PlatformMethods
*
platform
char
phase
const
unsigned
char
*
categoryEnabledFlag
const
char
*
name
unsigned
long
long
id
double
timestamp
int
numArgs
const
char
*
*
argNames
const
unsigned
char
*
argTypes
const
unsigned
long
long
*
argValues
unsigned
char
flags
)
;
inline
angle
:
:
TraceEventHandle
DefaultAddTraceEvent
(
PlatformMethods
*
platform
char
phase
const
unsigned
char
*
categoryEnabledFlag
const
char
*
name
unsigned
long
long
id
double
timestamp
int
numArgs
const
char
*
*
argNames
const
unsigned
char
*
argTypes
const
unsigned
long
long
*
argValues
unsigned
char
flags
)
{
return
0
;
}
using
UpdateTraceEventDurationFunc
=
void
(
*
)
(
PlatformMethods
*
platform
const
unsigned
char
*
categoryEnabledFlag
const
char
*
name
angle
:
:
TraceEventHandle
eventHandle
)
;
inline
void
DefaultUpdateTraceEventDuration
(
PlatformMethods
*
platform
const
unsigned
char
*
categoryEnabledFlag
const
char
*
name
angle
:
:
TraceEventHandle
eventHandle
)
{
}
using
HistogramCustomCountsFunc
=
void
(
*
)
(
PlatformMethods
*
platform
const
char
*
name
int
sample
int
min
int
max
int
bucketCount
)
;
inline
void
DefaultHistogramCustomCounts
(
PlatformMethods
*
platform
const
char
*
name
int
sample
int
min
int
max
int
bucketCount
)
{
}
using
HistogramEnumerationFunc
=
void
(
*
)
(
PlatformMethods
*
platform
const
char
*
name
int
sample
int
boundaryValue
)
;
inline
void
DefaultHistogramEnumeration
(
PlatformMethods
*
platform
const
char
*
name
int
sample
int
boundaryValue
)
{
}
using
HistogramSparseFunc
=
void
(
*
)
(
PlatformMethods
*
platform
const
char
*
name
int
sample
)
;
inline
void
DefaultHistogramSparse
(
PlatformMethods
*
platform
const
char
*
name
int
sample
)
{
}
using
HistogramBooleanFunc
=
void
(
*
)
(
PlatformMethods
*
platform
const
char
*
name
bool
sample
)
;
inline
void
DefaultHistogramBoolean
(
PlatformMethods
*
platform
const
char
*
name
bool
sample
)
{
}
using
OverrideWorkaroundsD3DFunc
=
void
(
*
)
(
PlatformMethods
*
platform
angle
:
:
FeaturesD3D
*
featuresD3D
)
;
inline
void
DefaultOverrideWorkaroundsD3D
(
PlatformMethods
*
platform
angle
:
:
FeaturesD3D
*
featuresD3D
)
{
}
using
OverrideFeaturesVkFunc
=
void
(
*
)
(
PlatformMethods
*
platform
angle
:
:
FeaturesVk
*
featuresVulkan
)
;
inline
void
DefaultOverrideFeaturesVk
(
PlatformMethods
*
platform
angle
:
:
FeaturesVk
*
featuresVulkan
)
{
}
using
OverrideFeaturesMtlFunc
=
void
(
*
)
(
PlatformMethods
*
platform
angle
:
:
FeaturesMtl
*
featuresMetal
)
;
inline
void
DefaultOverrideFeaturesMtl
(
PlatformMethods
*
platform
angle
:
:
FeaturesMtl
*
featuresMetal
)
{
}
using
ProgramKeyType
=
std
:
:
array
<
uint8_t
20
>
;
using
CacheProgramFunc
=
void
(
*
)
(
PlatformMethods
*
platform
const
ProgramKeyType
&
key
size_t
programSize
const
uint8_t
*
programBytes
)
;
inline
void
DefaultCacheProgram
(
PlatformMethods
*
platform
const
ProgramKeyType
&
key
size_t
programSize
const
uint8_t
*
programBytes
)
{
}
using
PostWorkerTaskCallback
=
void
(
*
)
(
void
*
userData
)
;
using
PostWorkerTaskFunc
=
void
(
*
)
(
PlatformMethods
*
platform
PostWorkerTaskCallback
callback
void
*
userData
)
;
constexpr
PostWorkerTaskFunc
DefaultPostWorkerTask
=
nullptr
;
#
define
ANGLE_PLATFORM_OP
(
OP
)
\
OP
(
currentTime
CurrentTime
)
\
OP
(
monotonicallyIncreasingTime
MonotonicallyIncreasingTime
)
\
OP
(
logError
LogError
)
\
OP
(
logWarning
LogWarning
)
\
OP
(
logInfo
LogInfo
)
\
OP
(
getTraceCategoryEnabledFlag
GetTraceCategoryEnabledFlag
)
\
OP
(
addTraceEvent
AddTraceEvent
)
\
OP
(
updateTraceEventDuration
UpdateTraceEventDuration
)
\
OP
(
histogramCustomCounts
HistogramCustomCounts
)
\
OP
(
histogramEnumeration
HistogramEnumeration
)
\
OP
(
histogramSparse
HistogramSparse
)
\
OP
(
histogramBoolean
HistogramBoolean
)
\
OP
(
overrideWorkaroundsD3D
OverrideWorkaroundsD3D
)
\
OP
(
overrideFeaturesVk
OverrideFeaturesVk
)
\
OP
(
cacheProgram
CacheProgram
)
\
OP
(
overrideFeaturesMtl
OverrideFeaturesMtl
)
\
OP
(
postWorkerTask
PostWorkerTask
)
#
define
ANGLE_PLATFORM_METHOD_DEF
(
Name
CapsName
)
CapsName
#
#
Func
Name
=
Default
#
#
CapsName
;
struct
ANGLE_PLATFORM_EXPORT
PlatformMethods
{
inline
PlatformMethods
(
)
;
void
*
context
=
0
;
ANGLE_PLATFORM_OP
(
ANGLE_PLATFORM_METHOD_DEF
)
}
;
inline
PlatformMethods
:
:
PlatformMethods
(
)
=
default
;
#
undef
ANGLE_PLATFORM_METHOD_DEF
constexpr
unsigned
int
g_NumPlatformMethods
=
(
sizeof
(
PlatformMethods
)
/
sizeof
(
uintptr_t
)
)
-
1
;
#
define
ANGLE_PLATFORM_METHOD_STRING
(
Name
)
#
Name
#
define
ANGLE_PLATFORM_METHOD_STRING2
(
Name
CapsName
)
ANGLE_PLATFORM_METHOD_STRING
(
Name
)
constexpr
const
char
*
const
g_PlatformMethodNames
[
g_NumPlatformMethods
]
=
{
ANGLE_PLATFORM_OP
(
ANGLE_PLATFORM_METHOD_STRING2
)
}
;
#
undef
ANGLE_PLATFORM_METHOD_STRING2
#
undef
ANGLE_PLATFORM_METHOD_STRING
}
extern
"
C
"
{
ANGLE_PLATFORM_EXPORT
bool
ANGLE_APIENTRY
ANGLEGetDisplayPlatform
(
angle
:
:
EGLDisplayType
display
const
char
*
const
methodNames
[
]
unsigned
int
methodNameCount
void
*
context
void
*
platformMethodsOut
)
;
ANGLE_PLATFORM_EXPORT
void
ANGLE_APIENTRY
ANGLEResetDisplayPlatform
(
angle
:
:
EGLDisplayType
display
)
;
}
namespace
angle
{
typedef
bool
(
ANGLE_APIENTRY
*
GetDisplayPlatformFunc
)
(
angle
:
:
EGLDisplayType
const
char
*
const
*
unsigned
int
void
*
void
*
)
;
typedef
void
(
ANGLE_APIENTRY
*
ResetDisplayPlatformFunc
)
(
angle
:
:
EGLDisplayType
)
;
}
angle
:
:
PlatformMethods
*
ANGLEPlatformCurrent
(
)
;
#
endif
