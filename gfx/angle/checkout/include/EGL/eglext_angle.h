#
ifndef
INCLUDE_EGL_EGLEXT_ANGLE_
#
define
INCLUDE_EGL_EGLEXT_ANGLE_
#
ifndef
EGL_ANGLE_robust_resource_initialization
#
define
EGL_ANGLE_robust_resource_initialization
1
#
define
EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE
0x3453
#
endif
#
ifndef
EGL_ANGLE_keyed_mutex
#
define
EGL_ANGLE_keyed_mutex
1
#
define
EGL_DXGI_KEYED_MUTEX_ANGLE
0x33A2
#
endif
#
ifndef
EGL_ANGLE_d3d_texture_client_buffer
#
define
EGL_ANGLE_d3d_texture_client_buffer
1
#
define
EGL_D3D_TEXTURE_ANGLE
0x33A3
#
define
EGL_TEXTURE_OFFSET_X_ANGLE
0x3490
#
define
EGL_TEXTURE_OFFSET_Y_ANGLE
0x3491
#
endif
#
ifndef
EGL_ANGLE_software_display
#
define
EGL_ANGLE_software_display
1
#
define
EGL_SOFTWARE_DISPLAY_ANGLE
(
(
EGLNativeDisplayType
)
-
1
)
#
endif
#
ifndef
EGL_ANGLE_direct3d_display
#
define
EGL_ANGLE_direct3d_display
1
#
define
EGL_D3D11_ELSE_D3D9_DISPLAY_ANGLE
(
(
EGLNativeDisplayType
)
-
2
)
#
define
EGL_D3D11_ONLY_DISPLAY_ANGLE
(
(
EGLNativeDisplayType
)
-
3
)
#
endif
#
ifndef
EGL_ANGLE_direct_composition
#
define
EGL_ANGLE_direct_composition
1
#
define
EGL_DIRECT_COMPOSITION_ANGLE
0x33A5
#
endif
#
ifndef
EGL_ANGLE_platform_angle
#
define
EGL_ANGLE_platform_angle
1
#
define
EGL_PLATFORM_ANGLE_ANGLE
0x3202
#
define
EGL_PLATFORM_ANGLE_TYPE_ANGLE
0x3203
#
define
EGL_PLATFORM_ANGLE_MAX_VERSION_MAJOR_ANGLE
0x3204
#
define
EGL_PLATFORM_ANGLE_MAX_VERSION_MINOR_ANGLE
0x3205
#
define
EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE
0x3206
#
define
EGL_PLATFORM_ANGLE_DEBUG_LAYERS_ENABLED_ANGLE
0x3451
#
define
EGL_PLATFORM_ANGLE_DEVICE_TYPE_ANGLE
0x3209
#
define
EGL_PLATFORM_ANGLE_DEVICE_TYPE_HARDWARE_ANGLE
0x320A
#
define
EGL_PLATFORM_ANGLE_DEVICE_TYPE_NULL_ANGLE
0x345E
#
define
EGL_PLATFORM_ANGLE_NATIVE_PLATFORM_TYPE_ANGLE
0x348F
#
endif
#
ifndef
EGL_ANGLE_platform_angle_d3d
#
define
EGL_ANGLE_platform_angle_d3d
1
#
define
EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE
0x3207
#
define
EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE
0x3208
#
define
EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_WARP_ANGLE
0x320B
#
define
EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_REFERENCE_ANGLE
0x320C
#
define
EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE
0x320F
#
endif
#
ifndef
EGL_ANGLE_platform_angle_d3d_luid
#
define
EGL_ANGLE_platform_angle_d3d_luid
1
#
define
EGL_PLATFORM_ANGLE_D3D_LUID_HIGH_ANGLE
0x34A0
#
define
EGL_PLATFORM_ANGLE_D3D_LUID_LOW_ANGLE
0x34A1
#
endif
#
ifndef
EGL_ANGLE_platform_angle_d3d11on12
#
define
EGL_ANGLE_platform_angle_d3d11on12
1
#
define
EGL_PLATFORM_ANGLE_D3D11ON12_ANGLE
0x3488
#
endif
#
ifndef
EGL_ANGLE_platform_angle_opengl
#
define
EGL_ANGLE_platform_angle_opengl
1
#
define
EGL_PLATFORM_ANGLE_TYPE_OPENGL_ANGLE
0x320D
#
define
EGL_PLATFORM_ANGLE_TYPE_OPENGLES_ANGLE
0x320E
#
define
EGL_PLATFORM_ANGLE_EGL_HANDLE_ANGLE
0x3480
#
endif
#
ifndef
EGL_ANGLE_platform_angle_null
#
define
EGL_ANGLE_platform_angle_null
1
#
define
EGL_PLATFORM_ANGLE_TYPE_NULL_ANGLE
0x33AE
#
endif
#
ifndef
EGL_ANGLE_platform_angle_vulkan
#
define
EGL_ANGLE_platform_angle_vulkan
1
#
define
EGL_PLATFORM_ANGLE_TYPE_VULKAN_ANGLE
0x3450
#
define
EGL_PLATFORM_VULKAN_DISPLAY_MODE_SIMPLE_ANGLE
0x34A4
#
define
EGL_PLATFORM_VULKAN_DISPLAY_MODE_HEADLESS_ANGLE
0x34A5
#
endif
#
ifndef
EGL_ANGLE_platform_angle_metal
#
define
EGL_ANGLE_platform_angle_metal
1
#
define
EGL_PLATFORM_ANGLE_TYPE_METAL_ANGLE
0x3489
#
endif
#
ifndef
EGL_ANGLE_platform_angle_device_type_swiftshader
#
define
EGL_ANGLE_platform_angle_device_type_swiftshader
#
define
EGL_PLATFORM_ANGLE_DEVICE_TYPE_SWIFTSHADER_ANGLE
0x3487
#
endif
#
ifndef
EGL_ANGLE_platform_angle_device_type_egl_angle
#
define
EGL_ANGLE_platform_angle_device_type_egl_angle
#
define
EGL_PLATFORM_ANGLE_DEVICE_TYPE_EGL_ANGLE
0x348E
#
endif
#
ifndef
EGL_ANGLE_platform_angle_context_virtualization
#
define
EGL_ANGLE_platform_angle_context_virtualization
1
#
define
EGL_PLATFORM_ANGLE_CONTEXT_VIRTUALIZATION_ANGLE
0x3481
#
endif
#
ifndef
EGL_ANGLE_platform_angle_device_context_volatile_eagl
#
define
EGL_ANGLE_platform_angle_device_context_volatile_eagl
1
#
define
EGL_PLATFORM_ANGLE_DEVICE_CONTEXT_VOLATILE_EAGL_ANGLE
0x34A2
#
endif
#
ifndef
EGL_ANGLE_platform_angle_device_context_volatile_cgl
#
define
EGL_ANGLE_platform_angle_device_context_volatile_cgl
1
#
define
EGL_PLATFORM_ANGLE_DEVICE_CONTEXT_VOLATILE_CGL_ANGLE
0x34A3
#
endif
#
ifndef
EGL_ANGLE_x11_visual
#
define
EGL_ANGLE_x11_visual
#
define
EGL_X11_VISUAL_ID_ANGLE
0x33A3
#
endif
#
ifndef
EGL_ANGLE_flexible_surface_compatibility
#
define
EGL_ANGLE_flexible_surface_compatibility
1
#
define
EGL_FLEXIBLE_SURFACE_COMPATIBILITY_SUPPORTED_ANGLE
0x33A6
#
endif
#
ifndef
EGL_ANGLE_surface_orientation
#
define
EGL_ANGLE_surface_orientation
#
define
EGL_OPTIMAL_SURFACE_ORIENTATION_ANGLE
0x33A7
#
define
EGL_SURFACE_ORIENTATION_ANGLE
0x33A8
#
define
EGL_SURFACE_ORIENTATION_INVERT_X_ANGLE
0x0001
#
define
EGL_SURFACE_ORIENTATION_INVERT_Y_ANGLE
0x0002
#
endif
#
ifndef
EGL_ANGLE_experimental_present_path
#
define
EGL_ANGLE_experimental_present_path
#
define
EGL_EXPERIMENTAL_PRESENT_PATH_ANGLE
0x33A4
#
define
EGL_EXPERIMENTAL_PRESENT_PATH_FAST_ANGLE
0x33A9
#
define
EGL_EXPERIMENTAL_PRESENT_PATH_COPY_ANGLE
0x33AA
#
endif
#
ifndef
EGL_ANGLE_stream_producer_d3d_texture
#
define
EGL_ANGLE_stream_producer_d3d_texture
#
define
EGL_D3D_TEXTURE_SUBRESOURCE_ID_ANGLE
0x33AB
typedef
EGLBoolean
(
EGLAPIENTRYP
PFNEGLCREATESTREAMPRODUCERD3DTEXTUREANGLEPROC
)
(
EGLDisplay
dpy
EGLStreamKHR
stream
const
EGLAttrib
*
attrib_list
)
;
typedef
EGLBoolean
(
EGLAPIENTRYP
PFNEGLSTREAMPOSTD3DTEXTUREANGLEPROC
)
(
EGLDisplay
dpy
EGLStreamKHR
stream
void
*
texture
const
EGLAttrib
*
attrib_list
)
;
#
ifdef
EGL_EGLEXT_PROTOTYPES
EGLAPI
EGLBoolean
EGLAPIENTRY
eglCreateStreamProducerD3DTextureANGLE
(
EGLDisplay
dpy
EGLStreamKHR
stream
const
EGLAttrib
*
attrib_list
)
;
EGLAPI
EGLBoolean
EGLAPIENTRY
eglStreamPostD3DTextureANGLE
(
EGLDisplay
dpy
EGLStreamKHR
stream
void
*
texture
const
EGLAttrib
*
attrib_list
)
;
#
endif
#
endif
#
ifndef
EGL_ANGLE_create_context_webgl_compatibility
#
define
EGL_ANGLE_create_context_webgl_compatibility
1
#
define
EGL_CONTEXT_WEBGL_COMPATIBILITY_ANGLE
0x33AC
#
endif
#
ifndef
EGL_ANGLE_display_texture_share_group
#
define
EGL_ANGLE_display_texture_share_group
1
#
define
EGL_DISPLAY_TEXTURE_SHARE_GROUP_ANGLE
0x33AF
#
endif
#
ifndef
EGL_CHROMIUM_create_context_bind_generates_resource
#
define
EGL_CHROMIUM_create_context_bind_generates_resource
1
#
define
EGL_CONTEXT_BIND_GENERATES_RESOURCE_CHROMIUM
0x33AD
#
endif
#
ifndef
EGL_ANGLE_create_context_client_arrays
#
define
EGL_ANGLE_create_context_client_arrays
1
#
define
EGL_CONTEXT_CLIENT_ARRAYS_ENABLED_ANGLE
0x3452
#
endif
#
ifndef
EGL_ANGLE_device_creation
#
define
EGL_ANGLE_device_creation
1
typedef
EGLDeviceEXT
(
EGLAPIENTRYP
PFNEGLCREATEDEVICEANGLEPROC
)
(
EGLint
device_type
void
*
native_device
const
EGLAttrib
*
attrib_list
)
;
typedef
EGLBoolean
(
EGLAPIENTRYP
PFNEGLRELEASEDEVICEANGLEPROC
)
(
EGLDeviceEXT
device
)
;
#
ifdef
EGL_EGLEXT_PROTOTYPES
EGLAPI
EGLDeviceEXT
EGLAPIENTRY
eglCreateDeviceANGLE
(
EGLint
device_type
void
*
native_device
const
EGLAttrib
*
attrib_list
)
;
EGLAPI
EGLBoolean
EGLAPIENTRY
eglReleaseDeviceANGLE
(
EGLDeviceEXT
device
)
;
#
endif
#
endif
#
ifndef
EGL_ANGLE_program_cache_control
#
define
EGL_ANGLE_program_cache_control
1
#
define
EGL_PROGRAM_CACHE_SIZE_ANGLE
0x3455
#
define
EGL_PROGRAM_CACHE_KEY_LENGTH_ANGLE
0x3456
#
define
EGL_PROGRAM_CACHE_RESIZE_ANGLE
0x3457
#
define
EGL_PROGRAM_CACHE_TRIM_ANGLE
0x3458
#
define
EGL_CONTEXT_PROGRAM_BINARY_CACHE_ENABLED_ANGLE
0x3459
typedef
EGLint
(
EGLAPIENTRYP
PFNEGLPROGRAMCACHEGETATTRIBANGLEPROC
)
(
EGLDisplay
dpy
EGLenum
attrib
)
;
typedef
void
(
EGLAPIENTRYP
PFNEGLPROGRAMCACHEQUERYANGLEPROC
)
(
EGLDisplay
dpy
EGLint
index
void
*
key
EGLint
*
keysize
void
*
binary
EGLint
*
binarysize
)
;
typedef
void
(
EGLAPIENTRYP
PFNEGLPROGRAMCACHEPOPULATEANGLEPROC
)
(
EGLDisplay
dpy
const
void
*
key
EGLint
keysize
const
void
*
binary
EGLint
binarysize
)
;
typedef
EGLint
(
EGLAPIENTRYP
PFNEGLPROGRAMCACHERESIZEANGLEPROC
)
(
EGLDisplay
dpy
EGLint
limit
EGLenum
mode
)
;
#
ifdef
EGL_EGLEXT_PROTOTYPES
EGLAPI
EGLint
EGLAPIENTRY
eglProgramCacheGetAttribANGLE
(
EGLDisplay
dpy
EGLenum
attrib
)
;
EGLAPI
void
EGLAPIENTRY
eglProgramCacheQueryANGLE
(
EGLDisplay
dpy
EGLint
index
void
*
key
EGLint
*
keysize
void
*
binary
EGLint
*
binarysize
)
;
EGLAPI
void
EGLAPIENTRY
eglProgramCachePopulateANGLE
(
EGLDisplay
dpy
const
void
*
key
EGLint
keysize
const
void
*
binary
EGLint
binarysize
)
;
EGLAPI
EGLint
EGLAPIENTRY
eglProgramCacheResizeANGLE
(
EGLDisplay
dpy
EGLint
limit
EGLenum
mode
)
;
#
endif
#
endif
#
ifndef
EGL_ANGLE_iosurface_client_buffer
#
define
EGL_ANGLE_iosurface_client_buffer
1
#
define
EGL_IOSURFACE_ANGLE
0x3454
#
define
EGL_IOSURFACE_PLANE_ANGLE
0x345A
#
define
EGL_TEXTURE_RECTANGLE_ANGLE
0x345B
#
define
EGL_TEXTURE_TYPE_ANGLE
0x345C
#
define
EGL_TEXTURE_INTERNAL_FORMAT_ANGLE
0x345D
#
define
EGL_IOSURFACE_USAGE_HINT_ANGLE
0x348A
#
define
EGL_IOSURFACE_READ_HINT_ANGLE
0x0001
#
define
EGL_IOSURFACE_WRITE_HINT_ANGLE
0x0002
#
define
EGL_BIND_TO_TEXTURE_TARGET_ANGLE
0x348D
#
endif
#
ifndef
EGL_ANGLE_create_context_extensions_enabled
#
define
EGL_ANGLE_create_context_extensions_enabled
1
#
define
EGL_EXTENSIONS_ENABLED_ANGLE
0x345F
#
endif
#
ifndef
EGL_CHROMIUM_sync_control
#
define
EGL_CHROMIUM_sync_control
1
typedef
EGLBoolean
(
EGLAPIENTRYP
PFNEGLGETSYNCVALUESCHROMIUMPROC
)
(
EGLDisplay
dpy
EGLSurface
surface
EGLuint64KHR
*
ust
EGLuint64KHR
*
msc
EGLuint64KHR
*
sbc
)
;
#
ifdef
EGL_EGLEXT_PROTOTYPES
EGLAPI
EGLBoolean
EGLAPIENTRY
eglGetSyncValuesCHROMIUM
(
EGLDisplay
dpy
EGLSurface
surface
EGLuint64KHR
*
ust
EGLuint64KHR
*
msc
EGLuint64KHR
*
sbc
)
;
#
endif
#
endif
#
ifndef
EGL_ANGLE_sync_control_rate
#
define
EGL_ANGLE_sync_control_rate
1
typedef
EGLBoolean
(
EGLAPIENTRYP
PFNEGLGETMSCRATEANGLEPROC
)
(
EGLDisplay
dpy
EGLSurface
surface
EGLint
*
numerator
EGLint
*
denominator
)
;
#
ifdef
EGL_EGLEXT_PROTOTYPES
EGLAPI
EGLBoolean
EGLAPIENTRY
eglGetMscRateANGLE
(
EGLDisplay
dpy
EGLSurface
surface
EGLint
*
numerator
EGLint
*
denominator
)
;
#
endif
#
endif
#
ifndef
EGL_ANGLE_power_preference
#
define
EGL_ANGLE_power_preference
1
#
define
EGL_POWER_PREFERENCE_ANGLE
0x3482
#
define
EGL_LOW_POWER_ANGLE
0x0001
#
define
EGL_HIGH_POWER_ANGLE
0x0002
typedef
void
(
EGLAPIENTRYP
PFNEGLRELEASEHIGHPOWERGPUANGLEPROC
)
(
EGLDisplay
dpy
EGLContext
ctx
)
;
typedef
void
(
EGLAPIENTRYP
PFNEGLREACQUIREHIGHPOWERGPUANGLEPROC
)
(
EGLDisplay
dpy
EGLContext
ctx
)
;
typedef
void
(
EGLAPIENTRYP
PFNEGLHANDLEGPUSWITCHANGLEPROC
)
(
EGLDisplay
dpy
)
;
#
ifdef
EGL_EGLEXT_PROTOTYPES
EGLAPI
void
EGLAPIENTRY
eglReleaseHighPowerGPUANGLE
(
EGLDisplay
dpy
EGLContext
ctx
)
;
EGLAPI
void
EGLAPIENTRY
eglReacquireHighPowerGPUANGLE
(
EGLDisplay
dpy
EGLContext
ctx
)
;
EGLAPI
void
EGLAPIENTRY
eglHandleGPUSwitchANGLE
(
EGLDisplay
dpy
)
;
#
endif
#
endif
#
ifndef
EGL_ANGLE_feature_control
#
define
EGL_ANGLE_feature_control
1
#
define
EGL_FEATURE_NAME_ANGLE
0x3460
#
define
EGL_FEATURE_CATEGORY_ANGLE
0x3461
#
define
EGL_FEATURE_DESCRIPTION_ANGLE
0x3462
#
define
EGL_FEATURE_BUG_ANGLE
0x3463
#
define
EGL_FEATURE_STATUS_ANGLE
0x3464
#
define
EGL_FEATURE_COUNT_ANGLE
0x3465
#
define
EGL_FEATURE_OVERRIDES_ENABLED_ANGLE
0x3466
#
define
EGL_FEATURE_OVERRIDES_DISABLED_ANGLE
0x3467
#
define
EGL_FEATURE_CONDITION_ANGLE
0x3468
#
define
EGL_FEATURE_ALL_DISABLED_ANGLE
0x3469
typedef
const
char
*
(
EGLAPIENTRYP
PFNEGLQUERYSTRINGIANGLEPROC
)
(
EGLDisplay
dpy
EGLint
name
EGLint
index
)
;
typedef
EGLBoolean
(
EGLAPIENTRYP
PFNEGLQUERYDISPLAYATTRIBANGLEPROC
)
(
EGLDisplay
dpy
EGLint
attribute
EGLAttrib
*
value
)
;
#
ifdef
EGL_EGLEXT_PROTOTYPES
EGLAPI
const
char
*
EGLAPIENTRY
eglQueryStringiANGLE
(
EGLDisplay
dpy
EGLint
name
EGLint
index
)
;
EGLAPI
EGLBoolean
EGLAPIENTRY
eglQueryDisplayAttribANGLE
(
EGLDisplay
dpy
EGLint
attribute
EGLAttrib
*
value
)
;
#
endif
#
endif
#
ifndef
EGL_ANGLE_image_d3d11_texture
#
define
EGL_D3D11_TEXTURE_ANGLE
0x3484
#
define
EGL_TEXTURE_INTERNAL_FORMAT_ANGLE
0x345D
#
endif
#
ifndef
EGL_ANGLE_create_context_backwards_compatible
#
define
EGL_ANGLE_create_context_backwards_compatible
1
#
define
EGL_CONTEXT_OPENGL_BACKWARDS_COMPATIBLE_ANGLE
0x3483
#
endif
#
ifndef
EGL_ANGLE_device_cgl
#
define
EGL_ANGLE_device_cgl
1
#
define
EGL_CGL_CONTEXT_ANGLE
0x3485
#
define
EGL_CGL_PIXEL_FORMAT_ANGLE
0x3486
#
endif
#
ifndef
EGL_ANGLE_ggp_stream_descriptor
#
define
EGL_ANGLE_ggp_stream_descriptor
1
#
define
EGL_GGP_STREAM_DESCRIPTOR_ANGLE
0x348B
#
endif
#
ifndef
EGL_ANGLE_swap_with_frame_token
#
define
EGL_ANGLE_swap_with_frame_token
1
typedef
khronos_uint64_t
EGLFrameTokenANGLE
;
typedef
EGLBoolean
(
EGLAPIENTRYP
PFNEGLSWAPBUFFERSWITHFRAMETOKENANGLEPROC
)
(
EGLDisplay
dpy
EGLSurface
surface
EGLFrameTokenANGLE
frametoken
)
;
#
ifdef
EGL_EGLEXT_PROTOTYPES
EGLAPI
EGLBoolean
EGLAPIENTRY
eglSwapBuffersWithFrameTokenANGLE
(
EGLDisplay
dpy
EGLSurface
surface
EGLFrameTokenANGLE
frametoken
)
;
#
endif
#
endif
#
ifndef
EGL_ANGLE_device_eagl
#
define
EGL_ANGLE_device_eagl
1
#
define
EGL_EAGL_CONTEXT_ANGLE
0x348C
#
endif
#
ifndef
EGL_ANGLE_display_semaphore_share_group
#
define
EGL_ANGLE_display_semaphore_share_group
1
#
define
EGL_DISPLAY_SEMAPHORE_SHARE_GROUP_ANGLE
0x348D
#
endif
#
endif
