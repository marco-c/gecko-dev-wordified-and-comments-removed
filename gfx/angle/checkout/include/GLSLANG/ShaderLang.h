#
ifndef
GLSLANG_SHADERLANG_H_
#
define
GLSLANG_SHADERLANG_H_
#
include
<
stddef
.
h
>
#
include
"
KHR
/
khrplatform
.
h
"
#
include
<
array
>
#
include
<
map
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
ShaderVars
.
h
"
#
define
ANGLE_SH_VERSION
308
enum
ShShaderSpec
{
SH_GLES2_SPEC
SH_WEBGL_SPEC
SH_GLES3_SPEC
SH_WEBGL2_SPEC
SH_GLES3_1_SPEC
SH_WEBGL3_SPEC
SH_GLES3_2_SPEC
SH_GL_CORE_SPEC
SH_GL_COMPATIBILITY_SPEC
}
;
enum
ShShaderOutput
{
SH_ESSL_OUTPUT
=
0x8B45
SH_GLSL_COMPATIBILITY_OUTPUT
=
0x8B46
SH_GLSL_130_OUTPUT
=
0x8B47
SH_GLSL_140_OUTPUT
=
0x8B80
SH_GLSL_150_CORE_OUTPUT
=
0x8B81
SH_GLSL_330_CORE_OUTPUT
=
0x8B82
SH_GLSL_400_CORE_OUTPUT
=
0x8B83
SH_GLSL_410_CORE_OUTPUT
=
0x8B84
SH_GLSL_420_CORE_OUTPUT
=
0x8B85
SH_GLSL_430_CORE_OUTPUT
=
0x8B86
SH_GLSL_440_CORE_OUTPUT
=
0x8B87
SH_GLSL_450_CORE_OUTPUT
=
0x8B88
SH_HLSL_3_0_OUTPUT
=
0x8B48
SH_HLSL_4_1_OUTPUT
=
0x8B49
SH_HLSL_4_0_FL9_3_OUTPUT
=
0x8B4A
SH_SPIRV_VULKAN_OUTPUT
=
0x8B4B
SH_SPIRV_METAL_OUTPUT
=
0x8B4C
SH_MSL_METAL_OUTPUT
=
0x8B4D
}
;
enum
class
ShPixelLocalStorageType
{
NotSupported
ImageStoreR32PackedFormats
ImageStoreNativeFormats
FramebufferFetch
}
;
enum
class
ShFragmentSynchronizationType
{
NotSupported
Automatic
FragmentShaderInterlock_NV_GL
FragmentShaderOrdering_INTEL_GL
FragmentShaderInterlock_ARB_GL
RasterizerOrderViews_D3D
RasterOrderGroups_Metal
InvalidEnum
EnumCount
=
InvalidEnum
}
;
struct
ShCompileOptionsMetal
{
int
driverUniformsBindingIndex
;
int
defaultUniformsBindingIndex
;
int
UBOArgumentBufferBindingIndex
;
}
;
struct
ShCompileOptionsPLS
{
ShPixelLocalStorageType
type
=
ShPixelLocalStorageType
:
:
NotSupported
;
ShFragmentSynchronizationType
fragmentSynchronizationType
=
ShFragmentSynchronizationType
:
:
NotSupported
;
}
;
struct
ShCompileOptions
{
ShCompileOptions
(
)
;
ShCompileOptions
(
const
ShCompileOptions
&
other
)
;
ShCompileOptions
&
operator
=
(
const
ShCompileOptions
&
other
)
;
uint64_t
objectCode
:
1
;
uint64_t
variables
:
1
;
uint64_t
sourcePath
:
1
;
uint64_t
intermediateTree
:
1
;
uint64_t
validateAST
:
1
;
uint64_t
validateLoopIndexing
:
1
;
uint64_t
lineDirectives
:
1
;
uint64_t
removeInvariantAndCentroidForESSL3
:
1
;
uint64_t
emulateAbsIntFunction
:
1
;
uint64_t
enforcePackingRestrictions
:
1
;
uint64_t
clampIndirectArrayBounds
:
1
;
uint64_t
limitExpressionComplexity
:
1
;
uint64_t
limitCallStackDepth
:
1
;
uint64_t
initGLPosition
:
1
;
uint64_t
initGLPointSize
:
1
;
uint64_t
unfoldShortCircuit
:
1
;
uint64_t
initOutputVariables
:
1
;
uint64_t
scalarizeVecAndMatConstructorArgs
:
1
;
uint64_t
regenerateStructNames
:
1
;
uint64_t
rewriteDoWhileLoops
:
1
;
uint64_t
expandSelectHLSLIntegerPowExpressions
:
1
;
uint64_t
flattenPragmaSTDGLInvariantAll
:
1
;
uint64_t
HLSLGetDimensionsIgnoresBaseLevel
:
1
;
uint64_t
rewriteTexelFetchOffsetToTexelFetch
:
1
;
uint64_t
addAndTrueToLoopCondition
:
1
;
uint64_t
rewriteIntegerUnaryMinusOperator
:
1
;
uint64_t
emulateIsnanFloatFunction
:
1
;
uint64_t
useUnusedStandardSharedBlocks
:
1
;
uint64_t
rewriteFloatUnaryMinusOperator
:
1
;
uint64_t
emulateAtan2FloatFunction
:
1
;
uint64_t
initializeUninitializedLocals
:
1
;
uint64_t
initializeBuiltinsForInstancedMultiview
:
1
;
uint64_t
selectViewInNvGLSLVertexShader
:
1
;
uint64_t
clampPointSize
:
1
;
uint64_t
addAdvancedBlendEquationsEmulation
:
1
;
uint64_t
dontUseLoopsToInitializeVariables
:
1
;
uint64_t
skipD3DConstantRegisterZero
:
1
;
uint64_t
clampFragDepth
:
1
;
uint64_t
rewriteRepeatedAssignToSwizzled
:
1
;
uint64_t
emulateGLDrawID
:
1
;
uint64_t
initSharedVariables
:
1
;
uint64_t
forceAtomicValueResolution
:
1
;
uint64_t
emulateGLBaseVertexBaseInstance
:
1
;
uint64_t
emulateSeamfulCubeMapSampling
:
1
;
uint64_t
takeVideoTextureAsExternalOES
:
1
;
uint64_t
addBaseVertexToVertexID
:
1
;
uint64_t
removeDynamicIndexingOfSwizzledVector
:
1
;
uint64_t
allowTranslateUniformBlockToStructuredBuffer
:
1
;
uint64_t
addVulkanYUVLayoutQualifier
:
1
;
uint64_t
disableARBTextureRectangle
:
1
;
uint64_t
rewriteRowMajorMatrices
:
1
;
uint64_t
ignorePrecisionQualifiers
:
1
;
uint64_t
addVulkanDepthCorrection
:
1
;
uint64_t
forceShaderPrecisionHighpToMediump
:
1
;
uint64_t
useSpecializationConstant
:
1
;
uint64_t
addVulkanXfbEmulationSupportCode
:
1
;
uint64_t
addVulkanXfbExtensionSupportCode
:
1
;
uint64_t
initFragmentOutputVariables
:
1
;
uint64_t
generateSpirvThroughGlslang
:
1
;
uint64_t
addExplicitBoolCasts
:
1
;
uint64_t
roundOutputAfterDithering
:
1
;
uint64_t
precisionSafeDivision
:
1
;
uint64_t
passHighpToPackUnormSnormBuiltins
:
1
;
ShCompileOptionsMetal
metal
;
ShCompileOptionsPLS
pls
;
}
;
using
ShHashFunction64
=
khronos_uint64_t
(
*
)
(
const
char
*
size_t
)
;
struct
ShBuiltInResources
{
ShBuiltInResources
(
)
;
ShBuiltInResources
(
const
ShBuiltInResources
&
other
)
;
ShBuiltInResources
&
operator
=
(
const
ShBuiltInResources
&
other
)
;
int
MaxVertexAttribs
;
int
MaxVertexUniformVectors
;
int
MaxVaryingVectors
;
int
MaxVertexTextureImageUnits
;
int
MaxCombinedTextureImageUnits
;
int
MaxTextureImageUnits
;
int
MaxFragmentUniformVectors
;
int
MaxDrawBuffers
;
int
OES_standard_derivatives
;
int
OES_EGL_image_external
;
int
OES_EGL_image_external_essl3
;
int
NV_EGL_stream_consumer_external
;
int
ARB_texture_rectangle
;
int
EXT_blend_func_extended
;
int
EXT_draw_buffers
;
int
EXT_frag_depth
;
int
EXT_shader_texture_lod
;
int
EXT_shader_framebuffer_fetch
;
int
EXT_shader_framebuffer_fetch_non_coherent
;
int
NV_shader_framebuffer_fetch
;
int
NV_shader_noperspective_interpolation
;
int
ARM_shader_framebuffer_fetch
;
int
OVR_multiview
;
int
OVR_multiview2
;
int
EXT_multisampled_render_to_texture
;
int
EXT_multisampled_render_to_texture2
;
int
EXT_YUV_target
;
int
EXT_geometry_shader
;
int
OES_geometry_shader
;
int
OES_shader_io_blocks
;
int
EXT_shader_io_blocks
;
int
EXT_gpu_shader5
;
int
EXT_shader_non_constant_global_initializers
;
int
OES_texture_storage_multisample_2d_array
;
int
OES_texture_3D
;
int
ANGLE_shader_pixel_local_storage
;
int
ANGLE_texture_multisample
;
int
ANGLE_multi_draw
;
int
ANGLE_base_vertex_base_instance
;
int
WEBGL_video_texture
;
int
APPLE_clip_distance
;
int
OES_texture_cube_map_array
;
int
EXT_texture_cube_map_array
;
int
EXT_shadow_samplers
;
int
OES_shader_multisample_interpolation
;
int
OES_shader_image_atomic
;
int
EXT_tessellation_shader
;
int
OES_texture_buffer
;
int
EXT_texture_buffer
;
int
OES_sample_variables
;
int
EXT_clip_cull_distance
;
int
EXT_primitive_bounding_box
;
int
OES_primitive_bounding_box
;
int
ANGLE_base_vertex_base_instance_shader_builtin
;
int
ANDROID_extension_pack_es31a
;
int
KHR_blend_equation_advanced
;
int
NV_draw_buffers
;
int
FragmentPrecisionHigh
;
int
MaxVertexOutputVectors
;
int
MaxFragmentInputVectors
;
int
MinProgramTexelOffset
;
int
MaxProgramTexelOffset
;
int
MaxDualSourceDrawBuffers
;
int
MaxViewsOVR
;
ShHashFunction64
HashFunction
;
int
MaxExpressionComplexity
;
int
MaxCallStackDepth
;
int
MaxFunctionParameters
;
int
MinProgramTextureGatherOffset
;
int
MaxProgramTextureGatherOffset
;
int
MaxImageUnits
;
int
MaxSamples
;
int
MaxVertexImageUniforms
;
int
MaxFragmentImageUniforms
;
int
MaxComputeImageUniforms
;
int
MaxCombinedImageUniforms
;
int
MaxUniformLocations
;
int
MaxCombinedShaderOutputResources
;
std
:
:
array
<
int
3
>
MaxComputeWorkGroupCount
;
std
:
:
array
<
int
3
>
MaxComputeWorkGroupSize
;
int
MaxComputeUniformComponents
;
int
MaxComputeTextureImageUnits
;
int
MaxComputeAtomicCounters
;
int
MaxComputeAtomicCounterBuffers
;
int
MaxVertexAtomicCounters
;
int
MaxFragmentAtomicCounters
;
int
MaxCombinedAtomicCounters
;
int
MaxAtomicCounterBindings
;
int
MaxVertexAtomicCounterBuffers
;
int
MaxFragmentAtomicCounterBuffers
;
int
MaxCombinedAtomicCounterBuffers
;
int
MaxAtomicCounterBufferSize
;
int
MaxUniformBufferBindings
;
int
MaxShaderStorageBufferBindings
;
float
MaxPointSize
;
int
MaxGeometryUniformComponents
;
int
MaxGeometryUniformBlocks
;
int
MaxGeometryInputComponents
;
int
MaxGeometryOutputComponents
;
int
MaxGeometryOutputVertices
;
int
MaxGeometryTotalOutputComponents
;
int
MaxGeometryTextureImageUnits
;
int
MaxGeometryAtomicCounterBuffers
;
int
MaxGeometryAtomicCounters
;
int
MaxGeometryShaderStorageBlocks
;
int
MaxGeometryShaderInvocations
;
int
MaxGeometryImageUniforms
;
int
MaxTessControlInputComponents
;
int
MaxTessControlOutputComponents
;
int
MaxTessControlTextureImageUnits
;
int
MaxTessControlUniformComponents
;
int
MaxTessControlTotalOutputComponents
;
int
MaxTessControlImageUniforms
;
int
MaxTessControlAtomicCounters
;
int
MaxTessControlAtomicCounterBuffers
;
int
MaxTessPatchComponents
;
int
MaxPatchVertices
;
int
MaxTessGenLevel
;
int
MaxTessEvaluationInputComponents
;
int
MaxTessEvaluationOutputComponents
;
int
MaxTessEvaluationTextureImageUnits
;
int
MaxTessEvaluationUniformComponents
;
int
MaxTessEvaluationImageUniforms
;
int
MaxTessEvaluationAtomicCounters
;
int
MaxTessEvaluationAtomicCounterBuffers
;
int
SubPixelBits
;
int
MaxClipDistances
;
int
MaxCullDistances
;
int
MaxCombinedClipAndCullDistances
;
int
MaxPixelLocalStoragePlanes
;
int
MaxColorAttachmentsWithActivePixelLocalStorage
;
int
MaxCombinedDrawBuffersAndPixelLocalStoragePlanes
;
}
;
using
ShHandle
=
void
*
;
namespace
sh
{
using
BinaryBlob
=
std
:
:
vector
<
uint32_t
>
;
bool
Initialize
(
)
;
bool
Finalize
(
)
;
void
InitBuiltInResources
(
ShBuiltInResources
*
resources
)
;
ShBuiltInResources
GetBuiltInResources
(
const
ShHandle
handle
)
;
const
std
:
:
string
&
GetBuiltInResourcesString
(
const
ShHandle
handle
)
;
ShHandle
ConstructCompiler
(
sh
:
:
GLenum
type
ShShaderSpec
spec
ShShaderOutput
output
const
ShBuiltInResources
*
resources
)
;
void
Destruct
(
ShHandle
handle
)
;
bool
Compile
(
const
ShHandle
handle
const
char
*
const
shaderStrings
[
]
size_t
numStrings
const
ShCompileOptions
&
compileOptions
)
;
void
ClearResults
(
const
ShHandle
handle
)
;
int
GetShaderVersion
(
const
ShHandle
handle
)
;
ShShaderOutput
GetShaderOutputType
(
const
ShHandle
handle
)
;
const
std
:
:
string
&
GetInfoLog
(
const
ShHandle
handle
)
;
const
std
:
:
string
&
GetObjectCode
(
const
ShHandle
handle
)
;
const
BinaryBlob
&
GetObjectBinaryBlob
(
const
ShHandle
handle
)
;
const
std
:
:
map
<
std
:
:
string
std
:
:
string
>
*
GetNameHashingMap
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
*
GetUniforms
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
*
GetVaryings
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
*
GetInputVaryings
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
*
GetOutputVaryings
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
*
GetAttributes
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
*
GetOutputVariables
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
*
GetInterfaceBlocks
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
*
GetUniformBlocks
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
*
GetShaderStorageBlocks
(
const
ShHandle
handle
)
;
sh
:
:
WorkGroupSize
GetComputeShaderLocalGroupSize
(
const
ShHandle
handle
)
;
int
GetVertexShaderNumViews
(
const
ShHandle
handle
)
;
bool
EnablesPerSampleShading
(
const
ShHandle
handle
)
;
uint32_t
GetShaderSpecConstUsageBits
(
const
ShHandle
handle
)
;
bool
CheckVariablesWithinPackingLimits
(
int
maxVectors
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
variables
)
;
bool
GetShaderStorageBlockRegister
(
const
ShHandle
handle
const
std
:
:
string
&
shaderStorageBlockName
unsigned
int
*
indexOut
)
;
bool
GetUniformBlockRegister
(
const
ShHandle
handle
const
std
:
:
string
&
uniformBlockName
unsigned
int
*
indexOut
)
;
bool
ShouldUniformBlockUseStructuredBuffer
(
const
ShHandle
handle
const
std
:
:
string
&
uniformBlockName
)
;
const
std
:
:
set
<
std
:
:
string
>
*
GetSlowCompilingUniformBlockSet
(
const
ShHandle
handle
)
;
const
std
:
:
map
<
std
:
:
string
unsigned
int
>
*
GetUniformRegisterMap
(
const
ShHandle
handle
)
;
unsigned
int
GetReadonlyImage2DRegisterIndex
(
const
ShHandle
handle
)
;
unsigned
int
GetImage2DRegisterIndex
(
const
ShHandle
handle
)
;
const
std
:
:
set
<
std
:
:
string
>
*
GetUsedImage2DFunctionNames
(
const
ShHandle
handle
)
;
bool
HasDiscardInFragmentShader
(
const
ShHandle
handle
)
;
bool
HasValidGeometryShaderInputPrimitiveType
(
const
ShHandle
handle
)
;
bool
HasValidGeometryShaderOutputPrimitiveType
(
const
ShHandle
handle
)
;
bool
HasValidGeometryShaderMaxVertices
(
const
ShHandle
handle
)
;
bool
HasValidTessGenMode
(
const
ShHandle
handle
)
;
bool
HasValidTessGenSpacing
(
const
ShHandle
handle
)
;
bool
HasValidTessGenVertexOrder
(
const
ShHandle
handle
)
;
bool
HasValidTessGenPointMode
(
const
ShHandle
handle
)
;
GLenum
GetGeometryShaderInputPrimitiveType
(
const
ShHandle
handle
)
;
GLenum
GetGeometryShaderOutputPrimitiveType
(
const
ShHandle
handle
)
;
int
GetGeometryShaderInvocations
(
const
ShHandle
handle
)
;
int
GetGeometryShaderMaxVertices
(
const
ShHandle
handle
)
;
unsigned
int
GetShaderSharedMemorySize
(
const
ShHandle
handle
)
;
int
GetTessControlShaderVertices
(
const
ShHandle
handle
)
;
GLenum
GetTessGenMode
(
const
ShHandle
handle
)
;
GLenum
GetTessGenSpacing
(
const
ShHandle
handle
)
;
GLenum
GetTessGenVertexOrder
(
const
ShHandle
handle
)
;
GLenum
GetTessGenPointMode
(
const
ShHandle
handle
)
;
uint32_t
GetAdvancedBlendEquations
(
const
ShHandle
handle
)
;
inline
bool
IsWebGLBasedSpec
(
ShShaderSpec
spec
)
{
return
(
spec
=
=
SH_WEBGL_SPEC
|
|
spec
=
=
SH_WEBGL2_SPEC
|
|
spec
=
=
SH_WEBGL3_SPEC
)
;
}
inline
bool
IsDesktopGLSpec
(
ShShaderSpec
spec
)
{
return
spec
=
=
SH_GL_CORE_SPEC
|
|
spec
=
=
SH_GL_COMPATIBILITY_SPEC
;
}
extern
const
char
kUserDefinedNamePrefix
[
]
;
namespace
vk
{
enum
class
SpecializationConstantId
:
uint32_t
{
SurfaceRotation
=
0
Dither
=
1
InvalidEnum
=
2
EnumCount
=
InvalidEnum
}
;
enum
class
SpecConstUsage
:
uint32_t
{
Rotation
=
0
Dither
=
1
InvalidEnum
=
2
EnumCount
=
InvalidEnum
}
;
enum
ColorAttachmentDitherControl
{
kDitherControlNoDither
=
0
kDitherControlDither4444
=
1
kDitherControlDither5551
=
2
kDitherControlDither565
=
3
}
;
extern
const
char
kDefaultUniformsNameVS
[
]
;
extern
const
char
kDefaultUniformsNameTCS
[
]
;
extern
const
char
kDefaultUniformsNameTES
[
]
;
extern
const
char
kDefaultUniformsNameGS
[
]
;
extern
const
char
kDefaultUniformsNameFS
[
]
;
extern
const
char
kDefaultUniformsNameCS
[
]
;
extern
const
char
kDriverUniformsBlockName
[
]
;
extern
const
char
kDriverUniformsVarName
[
]
;
constexpr
uint32_t
kDriverUniformsMiscSwapXYMask
=
0x1
;
constexpr
uint32_t
kDriverUniformsMiscAdvancedBlendEquationOffset
=
1
;
constexpr
uint32_t
kDriverUniformsMiscAdvancedBlendEquationMask
=
0x1F
;
constexpr
uint32_t
kDriverUniformsMiscSampleCountOffset
=
6
;
constexpr
uint32_t
kDriverUniformsMiscSampleCountMask
=
0x3F
;
constexpr
uint32_t
kDriverUniformsMiscEnabledClipPlanesOffset
=
12
;
constexpr
uint32_t
kDriverUniformsMiscEnabledClipPlanesMask
=
0xFF
;
constexpr
uint32_t
kDriverUniformsMiscTransformDepthOffset
=
20
;
constexpr
uint32_t
kDriverUniformsMiscTransformDepthMask
=
0x1
;
extern
const
char
kAtomicCountersBlockName
[
]
;
extern
const
char
kXfbEmulationGetOffsetsFunctionName
[
]
;
extern
const
char
kXfbEmulationCaptureFunctionName
[
]
;
extern
const
char
kXfbEmulationBufferBlockName
[
]
;
extern
const
char
kXfbEmulationBufferName
[
]
;
extern
const
char
kXfbEmulationBufferFieldName
[
]
;
extern
const
char
kXfbExtensionPositionOutName
[
]
;
extern
const
char
kTransformPositionFunctionName
[
]
;
extern
const
char
kInputAttachmentName
[
]
;
}
namespace
mtl
{
extern
const
char
kCoverageMaskEnabledConstName
[
]
;
extern
const
char
kRasterizerDiscardEnabledConstName
[
]
;
extern
const
char
kDepthWriteEnabledConstName
[
]
;
}
void
InitializeGlslang
(
)
;
void
FinalizeGlslang
(
)
;
}
#
endif
