#
ifndef
GLSLANG_SHADERLANG_H_
#
define
GLSLANG_SHADERLANG_H_
#
include
<
stddef
.
h
>
#
include
"
KHR
/
khrplatform
.
h
"
#
include
<
array
>
#
include
<
map
>
#
include
<
set
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
ShaderVars
.
h
"
#
define
ANGLE_SH_VERSION
205
enum
ShShaderSpec
{
SH_GLES2_SPEC
SH_WEBGL_SPEC
SH_GLES3_SPEC
SH_WEBGL2_SPEC
SH_GLES3_1_SPEC
SH_WEBGL3_SPEC
}
;
enum
ShShaderOutput
{
SH_ESSL_OUTPUT
=
0x8B45
SH_GLSL_COMPATIBILITY_OUTPUT
=
0x8B46
SH_GLSL_130_OUTPUT
=
0x8B47
SH_GLSL_140_OUTPUT
=
0x8B80
SH_GLSL_150_CORE_OUTPUT
=
0x8B81
SH_GLSL_330_CORE_OUTPUT
=
0x8B82
SH_GLSL_400_CORE_OUTPUT
=
0x8B83
SH_GLSL_410_CORE_OUTPUT
=
0x8B84
SH_GLSL_420_CORE_OUTPUT
=
0x8B85
SH_GLSL_430_CORE_OUTPUT
=
0x8B86
SH_GLSL_440_CORE_OUTPUT
=
0x8B87
SH_GLSL_450_CORE_OUTPUT
=
0x8B88
SH_HLSL_3_0_OUTPUT
=
0x8B48
SH_HLSL_4_1_OUTPUT
=
0x8B49
SH_HLSL_4_0_FL9_3_OUTPUT
=
0x8B4A
SH_GLSL_VULKAN_OUTPUT
=
0x8B4B
}
;
const
ShCompileOptions
SH_VALIDATE
=
0
;
const
ShCompileOptions
SH_VALIDATE_LOOP_INDEXING
=
UINT64_C
(
1
)
<
<
0
;
const
ShCompileOptions
SH_INTERMEDIATE_TREE
=
UINT64_C
(
1
)
<
<
1
;
const
ShCompileOptions
SH_OBJECT_CODE
=
UINT64_C
(
1
)
<
<
2
;
const
ShCompileOptions
SH_VARIABLES
=
UINT64_C
(
1
)
<
<
3
;
const
ShCompileOptions
SH_LINE_DIRECTIVES
=
UINT64_C
(
1
)
<
<
4
;
const
ShCompileOptions
SH_SOURCE_PATH
=
UINT64_C
(
1
)
<
<
5
;
const
ShCompileOptions
SH_DONT_REMOVE_INVARIANT_FOR_FRAGMENT_INPUT
=
UINT64_C
(
1
)
<
<
6
;
const
ShCompileOptions
SH_REMOVE_INVARIANT_AND_CENTROID_FOR_ESSL3
=
UINT64_C
(
1
)
<
<
7
;
const
ShCompileOptions
SH_EMULATE_ABS_INT_FUNCTION
=
UINT64_C
(
1
)
<
<
8
;
const
ShCompileOptions
SH_ENFORCE_PACKING_RESTRICTIONS
=
UINT64_C
(
1
)
<
<
9
;
const
ShCompileOptions
SH_CLAMP_INDIRECT_ARRAY_BOUNDS
=
UINT64_C
(
1
)
<
<
10
;
const
ShCompileOptions
SH_LIMIT_EXPRESSION_COMPLEXITY
=
UINT64_C
(
1
)
<
<
11
;
const
ShCompileOptions
SH_LIMIT_CALL_STACK_DEPTH
=
UINT64_C
(
1
)
<
<
12
;
const
ShCompileOptions
SH_INIT_GL_POSITION
=
UINT64_C
(
1
)
<
<
13
;
const
ShCompileOptions
SH_UNFOLD_SHORT_CIRCUIT
=
UINT64_C
(
1
)
<
<
14
;
const
ShCompileOptions
SH_INIT_OUTPUT_VARIABLES
=
UINT64_C
(
1
)
<
<
15
;
const
ShCompileOptions
SH_SCALARIZE_VEC_AND_MAT_CONSTRUCTOR_ARGS
=
UINT64_C
(
1
)
<
<
16
;
const
ShCompileOptions
SH_REGENERATE_STRUCT_NAMES
=
UINT64_C
(
1
)
<
<
17
;
const
ShCompileOptions
SH_DONT_PRUNE_UNUSED_FUNCTIONS
=
UINT64_C
(
1
)
<
<
18
;
const
ShCompileOptions
SH_REMOVE_POW_WITH_CONSTANT_EXPONENT
=
UINT64_C
(
1
)
<
<
19
;
const
ShCompileOptions
SH_REWRITE_DO_WHILE_LOOPS
=
UINT64_C
(
1
)
<
<
20
;
const
ShCompileOptions
SH_EXPAND_SELECT_HLSL_INTEGER_POW_EXPRESSIONS
=
UINT64_C
(
1
)
<
<
21
;
const
ShCompileOptions
SH_FLATTEN_PRAGMA_STDGL_INVARIANT_ALL
=
UINT64_C
(
1
)
<
<
22
;
const
ShCompileOptions
SH_HLSL_GET_DIMENSIONS_IGNORES_BASE_LEVEL
=
UINT64_C
(
1
)
<
<
23
;
const
ShCompileOptions
SH_REWRITE_TEXELFETCHOFFSET_TO_TEXELFETCH
=
UINT64_C
(
1
)
<
<
24
;
const
ShCompileOptions
SH_ADD_AND_TRUE_TO_LOOP_CONDITION
=
UINT64_C
(
1
)
<
<
25
;
const
ShCompileOptions
SH_REWRITE_INTEGER_UNARY_MINUS_OPERATOR
=
UINT64_C
(
1
)
<
<
26
;
const
ShCompileOptions
SH_EMULATE_ISNAN_FLOAT_FUNCTION
=
UINT64_C
(
1
)
<
<
27
;
const
ShCompileOptions
SH_USE_UNUSED_STANDARD_SHARED_BLOCKS
=
UINT64_C
(
1
)
<
<
28
;
const
ShCompileOptions
SH_REWRITE_FLOAT_UNARY_MINUS_OPERATOR
=
UINT64_C
(
1
)
<
<
29
;
const
ShCompileOptions
SH_EMULATE_ATAN2_FLOAT_FUNCTION
=
UINT64_C
(
1
)
<
<
30
;
const
ShCompileOptions
SH_INITIALIZE_UNINITIALIZED_LOCALS
=
UINT64_C
(
1
)
<
<
31
;
const
ShCompileOptions
SH_INITIALIZE_BUILTINS_FOR_INSTANCED_MULTIVIEW
=
UINT64_C
(
1
)
<
<
32
;
const
ShCompileOptions
SH_SELECT_VIEW_IN_NV_GLSL_VERTEX_SHADER
=
UINT64_C
(
1
)
<
<
33
;
const
ShCompileOptions
SH_CLAMP_POINT_SIZE
=
UINT64_C
(
1
)
<
<
34
;
const
ShCompileOptions
SH_REWRITE_VECTOR_SCALAR_ARITHMETIC
=
UINT64_C
(
1
)
<
<
35
;
const
ShCompileOptions
SH_DONT_USE_LOOPS_TO_INITIALIZE_VARIABLES
=
UINT64_C
(
1
)
<
<
36
;
const
ShCompileOptions
SH_SKIP_D3D_CONSTANT_REGISTER_ZERO
=
UINT64_C
(
1
)
<
<
37
;
const
ShCompileOptions
SH_CLAMP_FRAG_DEPTH
=
UINT64_C
(
1
)
<
<
38
;
const
ShCompileOptions
SH_REWRITE_REPEATED_ASSIGN_TO_SWIZZLED
=
UINT64_C
(
1
)
<
<
39
;
const
ShCompileOptions
SH_EMULATE_GL_DRAW_ID
=
UINT64_C
(
1
)
<
<
40
;
const
ShCompileOptions
SH_INIT_SHARED_VARIABLES
=
UINT64_C
(
1
)
<
<
41
;
enum
ShArrayIndexClampingStrategy
{
SH_CLAMP_WITH_CLAMP_INTRINSIC
=
1
SH_CLAMP_WITH_USER_DEFINED_INT_CLAMP_FUNCTION
}
;
using
ShHashFunction64
=
khronos_uint64_t
(
*
)
(
const
char
*
size_t
)
;
struct
ShBuiltInResources
{
int
MaxVertexAttribs
;
int
MaxVertexUniformVectors
;
int
MaxVaryingVectors
;
int
MaxVertexTextureImageUnits
;
int
MaxCombinedTextureImageUnits
;
int
MaxTextureImageUnits
;
int
MaxFragmentUniformVectors
;
int
MaxDrawBuffers
;
int
OES_standard_derivatives
;
int
OES_EGL_image_external
;
int
OES_EGL_image_external_essl3
;
int
NV_EGL_stream_consumer_external
;
int
ARB_texture_rectangle
;
int
EXT_blend_func_extended
;
int
EXT_draw_buffers
;
int
EXT_frag_depth
;
int
EXT_shader_texture_lod
;
int
WEBGL_debug_shader_precision
;
int
EXT_shader_framebuffer_fetch
;
int
NV_shader_framebuffer_fetch
;
int
ARM_shader_framebuffer_fetch
;
int
OVR_multiview2
;
int
EXT_YUV_target
;
int
EXT_geometry_shader
;
int
OES_texture_storage_multisample_2d_array
;
int
ANGLE_texture_multisample
;
int
ANGLE_multi_draw
;
int
NV_draw_buffers
;
int
FragmentPrecisionHigh
;
int
MaxVertexOutputVectors
;
int
MaxFragmentInputVectors
;
int
MinProgramTexelOffset
;
int
MaxProgramTexelOffset
;
int
MaxDualSourceDrawBuffers
;
int
MaxViewsOVR
;
ShHashFunction64
HashFunction
;
ShArrayIndexClampingStrategy
ArrayIndexClampingStrategy
;
int
MaxExpressionComplexity
;
int
MaxCallStackDepth
;
int
MaxFunctionParameters
;
int
MinProgramTextureGatherOffset
;
int
MaxProgramTextureGatherOffset
;
int
MaxImageUnits
;
int
MaxVertexImageUniforms
;
int
MaxFragmentImageUniforms
;
int
MaxComputeImageUniforms
;
int
MaxCombinedImageUniforms
;
int
MaxUniformLocations
;
int
MaxCombinedShaderOutputResources
;
std
:
:
array
<
int
3
>
MaxComputeWorkGroupCount
;
std
:
:
array
<
int
3
>
MaxComputeWorkGroupSize
;
int
MaxComputeUniformComponents
;
int
MaxComputeTextureImageUnits
;
int
MaxComputeAtomicCounters
;
int
MaxComputeAtomicCounterBuffers
;
int
MaxVertexAtomicCounters
;
int
MaxFragmentAtomicCounters
;
int
MaxCombinedAtomicCounters
;
int
MaxAtomicCounterBindings
;
int
MaxVertexAtomicCounterBuffers
;
int
MaxFragmentAtomicCounterBuffers
;
int
MaxCombinedAtomicCounterBuffers
;
int
MaxAtomicCounterBufferSize
;
int
MaxUniformBufferBindings
;
int
MaxShaderStorageBufferBindings
;
float
MaxPointSize
;
int
MaxGeometryUniformComponents
;
int
MaxGeometryUniformBlocks
;
int
MaxGeometryInputComponents
;
int
MaxGeometryOutputComponents
;
int
MaxGeometryOutputVertices
;
int
MaxGeometryTotalOutputComponents
;
int
MaxGeometryTextureImageUnits
;
int
MaxGeometryAtomicCounterBuffers
;
int
MaxGeometryAtomicCounters
;
int
MaxGeometryShaderStorageBlocks
;
int
MaxGeometryShaderInvocations
;
int
MaxGeometryImageUniforms
;
}
;
using
ShHandle
=
void
*
;
namespace
sh
{
bool
Initialize
(
)
;
bool
Finalize
(
)
;
void
InitBuiltInResources
(
ShBuiltInResources
*
resources
)
;
const
std
:
:
string
&
GetBuiltInResourcesString
(
const
ShHandle
handle
)
;
ShHandle
ConstructCompiler
(
sh
:
:
GLenum
type
ShShaderSpec
spec
ShShaderOutput
output
const
ShBuiltInResources
*
resources
)
;
void
Destruct
(
ShHandle
handle
)
;
bool
Compile
(
const
ShHandle
handle
const
char
*
const
shaderStrings
[
]
size_t
numStrings
ShCompileOptions
compileOptions
)
;
void
ClearResults
(
const
ShHandle
handle
)
;
int
GetShaderVersion
(
const
ShHandle
handle
)
;
ShShaderOutput
GetShaderOutputType
(
const
ShHandle
handle
)
;
const
std
:
:
string
&
GetInfoLog
(
const
ShHandle
handle
)
;
const
std
:
:
string
&
GetObjectCode
(
const
ShHandle
handle
)
;
const
std
:
:
map
<
std
:
:
string
std
:
:
string
>
*
GetNameHashingMap
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
Uniform
>
*
GetUniforms
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
Varying
>
*
GetVaryings
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
Varying
>
*
GetInputVaryings
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
Varying
>
*
GetOutputVaryings
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
Attribute
>
*
GetAttributes
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
OutputVariable
>
*
GetOutputVariables
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
*
GetInterfaceBlocks
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
*
GetUniformBlocks
(
const
ShHandle
handle
)
;
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
*
GetShaderStorageBlocks
(
const
ShHandle
handle
)
;
sh
:
:
WorkGroupSize
GetComputeShaderLocalGroupSize
(
const
ShHandle
handle
)
;
int
GetVertexShaderNumViews
(
const
ShHandle
handle
)
;
bool
CheckVariablesWithinPackingLimits
(
int
maxVectors
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
variables
)
;
bool
GetShaderStorageBlockRegister
(
const
ShHandle
handle
const
std
:
:
string
&
shaderStorageBlockName
unsigned
int
*
indexOut
)
;
bool
GetUniformBlockRegister
(
const
ShHandle
handle
const
std
:
:
string
&
uniformBlockName
unsigned
int
*
indexOut
)
;
const
std
:
:
map
<
std
:
:
string
unsigned
int
>
*
GetUniformRegisterMap
(
const
ShHandle
handle
)
;
unsigned
int
GetReadonlyImage2DRegisterIndex
(
const
ShHandle
handle
)
;
unsigned
int
GetImage2DRegisterIndex
(
const
ShHandle
handle
)
;
const
std
:
:
set
<
std
:
:
string
>
*
GetUsedImage2DFunctionNames
(
const
ShHandle
handle
)
;
bool
HasValidGeometryShaderInputPrimitiveType
(
const
ShHandle
handle
)
;
bool
HasValidGeometryShaderOutputPrimitiveType
(
const
ShHandle
handle
)
;
bool
HasValidGeometryShaderMaxVertices
(
const
ShHandle
handle
)
;
GLenum
GetGeometryShaderInputPrimitiveType
(
const
ShHandle
handle
)
;
GLenum
GetGeometryShaderOutputPrimitiveType
(
const
ShHandle
handle
)
;
int
GetGeometryShaderInvocations
(
const
ShHandle
handle
)
;
int
GetGeometryShaderMaxVertices
(
const
ShHandle
handle
)
;
inline
bool
IsWebGLBasedSpec
(
ShShaderSpec
spec
)
{
return
(
spec
=
=
SH_WEBGL_SPEC
|
|
spec
=
=
SH_WEBGL2_SPEC
|
|
spec
=
=
SH_WEBGL3_SPEC
)
;
}
}
#
endif
