#
ifndef
ANGLE_PLATFORM_H
#
define
ANGLE_PLATFORM_H
#
include
<
stdint
.
h
>
#
include
"
.
.
/
export
.
h
"
namespace
angle
{
class
Platform
{
public
:
virtual
double
currentTime
(
)
{
return
0
;
}
virtual
double
monotonicallyIncreasingTime
(
)
{
return
0
;
}
virtual
void
logError
(
const
char
*
errorMessage
)
{
}
virtual
void
logWarning
(
const
char
*
warningMessage
)
{
}
virtual
void
logInfo
(
const
char
*
infoMessage
)
{
}
virtual
const
unsigned
char
*
getTraceCategoryEnabledFlag
(
const
char
*
categoryName
)
{
return
0
;
}
typedef
uint64_t
TraceEventHandle
;
virtual
TraceEventHandle
addTraceEvent
(
char
phase
const
unsigned
char
*
categoryEnabledFlag
const
char
*
name
unsigned
long
long
id
double
timestamp
int
numArgs
const
char
*
*
argNames
const
unsigned
char
*
argTypes
const
unsigned
long
long
*
argValues
unsigned
char
flags
)
{
return
0
;
}
virtual
void
updateTraceEventDuration
(
const
unsigned
char
*
categoryEnabledFlag
const
char
*
name
TraceEventHandle
eventHandle
)
{
}
virtual
void
histogramCustomCounts
(
const
char
*
name
int
sample
int
min
int
max
int
bucketCount
)
{
}
virtual
void
histogramEnumeration
(
const
char
*
name
int
sample
int
boundaryValue
)
{
}
virtual
void
histogramSparse
(
const
char
*
name
int
sample
)
{
}
virtual
void
histogramBoolean
(
const
char
*
name
bool
sample
)
{
}
protected
:
virtual
~
Platform
(
)
{
}
}
;
}
typedef
void
(
*
ANGLEPlatformInitializeFunc
)
(
angle
:
:
Platform
*
)
;
ANGLE_EXPORT
void
ANGLEPlatformInitialize
(
angle
:
:
Platform
*
)
;
typedef
void
(
*
ANGLEPlatformShutdownFunc
)
(
)
;
ANGLE_EXPORT
void
ANGLEPlatformShutdown
(
)
;
typedef
angle
:
:
Platform
*
(
*
ANGLEPlatformCurrentFunc
)
(
)
;
ANGLE_EXPORT
angle
:
:
Platform
*
ANGLEPlatformCurrent
(
)
;
#
endif
