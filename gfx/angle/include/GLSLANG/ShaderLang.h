#
ifndef
GLSLANG_SHADERLANG_H_
#
define
GLSLANG_SHADERLANG_H_
#
if
defined
(
COMPONENT_BUILD
)
&
&
!
defined
(
ANGLE_TRANSLATOR_STATIC
)
#
if
defined
(
_WIN32
)
|
|
defined
(
_WIN64
)
#
if
defined
(
ANGLE_TRANSLATOR_IMPLEMENTATION
)
#
define
COMPILER_EXPORT
__declspec
(
dllexport
)
#
else
#
define
COMPILER_EXPORT
__declspec
(
dllimport
)
#
endif
#
else
#
define
COMPILER_EXPORT
__attribute__
(
(
visibility
(
"
default
"
)
)
)
#
endif
#
else
#
define
COMPILER_EXPORT
#
endif
#
include
<
stddef
.
h
>
#
include
"
KHR
/
khrplatform
.
h
"
#
include
<
array
>
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
namespace
sh
{
typedef
unsigned
int
GLenum
;
}
#
include
"
ShaderVars
.
h
"
#
define
ANGLE_SH_VERSION
161
typedef
enum
{
SH_GLES2_SPEC
SH_WEBGL_SPEC
SH_GLES3_SPEC
SH_WEBGL2_SPEC
SH_GLES3_1_SPEC
SH_WEBGL3_SPEC
}
ShShaderSpec
;
typedef
enum
{
SH_ESSL_OUTPUT
=
0x8B45
SH_GLSL_COMPATIBILITY_OUTPUT
=
0x8B46
SH_GLSL_130_OUTPUT
=
0x8B47
SH_GLSL_140_OUTPUT
=
0x8B80
SH_GLSL_150_CORE_OUTPUT
=
0x8B81
SH_GLSL_330_CORE_OUTPUT
=
0x8B82
SH_GLSL_400_CORE_OUTPUT
=
0x8B83
SH_GLSL_410_CORE_OUTPUT
=
0x8B84
SH_GLSL_420_CORE_OUTPUT
=
0x8B85
SH_GLSL_430_CORE_OUTPUT
=
0x8B86
SH_GLSL_440_CORE_OUTPUT
=
0x8B87
SH_GLSL_450_CORE_OUTPUT
=
0x8B88
SH_HLSL_OUTPUT
=
0x8B48
SH_HLSL9_OUTPUT
=
0x8B48
SH_HLSL11_OUTPUT
=
0x8B49
SH_HLSL_3_0_OUTPUT
=
0x8B48
SH_HLSL_4_1_OUTPUT
=
0x8B49
SH_HLSL_4_0_FL9_3_OUTPUT
=
0x8B4A
}
ShShaderOutput
;
typedef
uint64_t
ShCompileOptions
;
const
ShCompileOptions
SH_VALIDATE
=
0
;
const
ShCompileOptions
SH_VALIDATE_LOOP_INDEXING
=
UINT64_C
(
1
)
<
<
0
;
const
ShCompileOptions
SH_INTERMEDIATE_TREE
=
UINT64_C
(
1
)
<
<
1
;
const
ShCompileOptions
SH_OBJECT_CODE
=
UINT64_C
(
1
)
<
<
2
;
const
ShCompileOptions
SH_VARIABLES
=
UINT64_C
(
1
)
<
<
3
;
const
ShCompileOptions
SH_LINE_DIRECTIVES
=
UINT64_C
(
1
)
<
<
4
;
const
ShCompileOptions
SH_SOURCE_PATH
=
UINT64_C
(
1
)
<
<
5
;
const
ShCompileOptions
SH_UNROLL_FOR_LOOP_WITH_INTEGER_INDEX
=
UINT64_C
(
1
)
<
<
6
;
const
ShCompileOptions
SH_UNROLL_FOR_LOOP_WITH_SAMPLER_ARRAY_INDEX
=
UINT64_C
(
1
)
<
<
7
;
const
ShCompileOptions
SH_EMULATE_ABS_INT_FUNCTION
=
UINT64_C
(
1
)
<
<
8
;
const
ShCompileOptions
SH_ENFORCE_PACKING_RESTRICTIONS
=
UINT64_C
(
1
)
<
<
9
;
const
ShCompileOptions
SH_CLAMP_INDIRECT_ARRAY_BOUNDS
=
UINT64_C
(
1
)
<
<
10
;
const
ShCompileOptions
SH_LIMIT_EXPRESSION_COMPLEXITY
=
UINT64_C
(
1
)
<
<
11
;
const
ShCompileOptions
SH_LIMIT_CALL_STACK_DEPTH
=
UINT64_C
(
1
)
<
<
12
;
const
ShCompileOptions
SH_INIT_GL_POSITION
=
UINT64_C
(
1
)
<
<
13
;
const
ShCompileOptions
SH_UNFOLD_SHORT_CIRCUIT
=
UINT64_C
(
1
)
<
<
14
;
const
ShCompileOptions
SH_INIT_OUTPUT_VARIABLES
=
UINT64_C
(
1
)
<
<
15
;
const
ShCompileOptions
SH_SCALARIZE_VEC_AND_MAT_CONSTRUCTOR_ARGS
=
UINT64_C
(
1
)
<
<
16
;
const
ShCompileOptions
SH_REGENERATE_STRUCT_NAMES
=
UINT64_C
(
1
)
<
<
17
;
const
ShCompileOptions
SH_DONT_PRUNE_UNUSED_FUNCTIONS
=
UINT64_C
(
1
)
<
<
18
;
const
ShCompileOptions
SH_REMOVE_POW_WITH_CONSTANT_EXPONENT
=
UINT64_C
(
1
)
<
<
19
;
const
ShCompileOptions
SH_REWRITE_DO_WHILE_LOOPS
=
UINT64_C
(
1
)
<
<
20
;
const
ShCompileOptions
SH_EXPAND_SELECT_HLSL_INTEGER_POW_EXPRESSIONS
=
UINT64_C
(
1
)
<
<
21
;
const
ShCompileOptions
SH_FLATTEN_PRAGMA_STDGL_INVARIANT_ALL
=
UINT64_C
(
1
)
<
<
22
;
const
ShCompileOptions
SH_HLSL_GET_DIMENSIONS_IGNORES_BASE_LEVEL
=
UINT64_C
(
1
)
<
<
23
;
const
ShCompileOptions
SH_REWRITE_TEXELFETCHOFFSET_TO_TEXELFETCH
=
UINT64_C
(
1
)
<
<
24
;
const
ShCompileOptions
SH_ADD_AND_TRUE_TO_LOOP_CONDITION
=
UINT64_C
(
1
)
<
<
25
;
typedef
enum
{
SH_CLAMP_WITH_CLAMP_INTRINSIC
=
1
SH_CLAMP_WITH_USER_DEFINED_INT_CLAMP_FUNCTION
}
ShArrayIndexClampingStrategy
;
COMPILER_EXPORT
bool
ShInitialize
(
)
;
COMPILER_EXPORT
bool
ShFinalize
(
)
;
typedef
khronos_uint64_t
(
*
ShHashFunction64
)
(
const
char
*
size_t
)
;
typedef
struct
{
int
MaxVertexAttribs
;
int
MaxVertexUniformVectors
;
int
MaxVaryingVectors
;
int
MaxVertexTextureImageUnits
;
int
MaxCombinedTextureImageUnits
;
int
MaxTextureImageUnits
;
int
MaxFragmentUniformVectors
;
int
MaxDrawBuffers
;
int
OES_standard_derivatives
;
int
OES_EGL_image_external
;
int
OES_EGL_image_external_essl3
;
int
NV_EGL_stream_consumer_external
;
int
ARB_texture_rectangle
;
int
EXT_blend_func_extended
;
int
EXT_draw_buffers
;
int
EXT_frag_depth
;
int
EXT_shader_texture_lod
;
int
WEBGL_debug_shader_precision
;
int
EXT_shader_framebuffer_fetch
;
int
NV_shader_framebuffer_fetch
;
int
ARM_shader_framebuffer_fetch
;
int
NV_draw_buffers
;
int
FragmentPrecisionHigh
;
int
MaxVertexOutputVectors
;
int
MaxFragmentInputVectors
;
int
MinProgramTexelOffset
;
int
MaxProgramTexelOffset
;
int
MaxDualSourceDrawBuffers
;
ShHashFunction64
HashFunction
;
ShArrayIndexClampingStrategy
ArrayIndexClampingStrategy
;
int
MaxExpressionComplexity
;
int
MaxCallStackDepth
;
int
MaxFunctionParameters
;
int
MaxImageUnits
;
int
MaxVertexImageUniforms
;
int
MaxFragmentImageUniforms
;
int
MaxComputeImageUniforms
;
int
MaxCombinedImageUniforms
;
int
MaxCombinedShaderOutputResources
;
std
:
:
array
<
int
3
>
MaxComputeWorkGroupCount
;
std
:
:
array
<
int
3
>
MaxComputeWorkGroupSize
;
int
MaxComputeUniformComponents
;
int
MaxComputeTextureImageUnits
;
int
MaxComputeAtomicCounters
;
int
MaxComputeAtomicCounterBuffers
;
int
MaxVertexAtomicCounters
;
int
MaxFragmentAtomicCounters
;
int
MaxCombinedAtomicCounters
;
int
MaxAtomicCounterBindings
;
int
MaxVertexAtomicCounterBuffers
;
int
MaxFragmentAtomicCounterBuffers
;
int
MaxCombinedAtomicCounterBuffers
;
int
MaxAtomicCounterBufferSize
;
}
ShBuiltInResources
;
COMPILER_EXPORT
void
ShInitBuiltInResources
(
ShBuiltInResources
*
resources
)
;
typedef
void
*
ShHandle
;
COMPILER_EXPORT
const
std
:
:
string
&
ShGetBuiltInResourcesString
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
ShHandle
ShConstructCompiler
(
sh
:
:
GLenum
type
ShShaderSpec
spec
ShShaderOutput
output
const
ShBuiltInResources
*
resources
)
;
COMPILER_EXPORT
void
ShDestruct
(
ShHandle
handle
)
;
COMPILER_EXPORT
bool
ShCompile
(
const
ShHandle
handle
const
char
*
const
shaderStrings
[
]
size_t
numStrings
ShCompileOptions
compileOptions
)
;
COMPILER_EXPORT
void
ShClearResults
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
int
ShGetShaderVersion
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
ShShaderOutput
ShGetShaderOutputType
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
const
std
:
:
string
&
ShGetInfoLog
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
const
std
:
:
string
&
ShGetObjectCode
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
const
std
:
:
map
<
std
:
:
string
std
:
:
string
>
*
ShGetNameHashingMap
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
const
std
:
:
vector
<
sh
:
:
Uniform
>
*
ShGetUniforms
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
const
std
:
:
vector
<
sh
:
:
Varying
>
*
ShGetVaryings
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
const
std
:
:
vector
<
sh
:
:
Attribute
>
*
ShGetAttributes
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
const
std
:
:
vector
<
sh
:
:
OutputVariable
>
*
ShGetOutputVariables
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
*
ShGetInterfaceBlocks
(
const
ShHandle
handle
)
;
COMPILER_EXPORT
sh
:
:
WorkGroupSize
ShGetComputeShaderLocalGroupSize
(
const
ShHandle
handle
)
;
typedef
struct
{
sh
:
:
GLenum
type
;
int
size
;
}
ShVariableInfo
;
COMPILER_EXPORT
bool
ShCheckVariablesWithinPackingLimits
(
int
maxVectors
const
std
:
:
vector
<
sh
:
:
ShaderVariable
>
&
variables
)
;
COMPILER_EXPORT
bool
ShGetInterfaceBlockRegister
(
const
ShHandle
handle
const
std
:
:
string
&
interfaceBlockName
unsigned
int
*
indexOut
)
;
COMPILER_EXPORT
const
std
:
:
map
<
std
:
:
string
unsigned
int
>
*
ShGetUniformRegisterMap
(
const
ShHandle
handle
)
;
#
endif
