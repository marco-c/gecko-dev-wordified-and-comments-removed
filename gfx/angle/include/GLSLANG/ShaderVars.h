#
ifndef
GLSLANG_SHADERVARS_H_
#
define
GLSLANG_SHADERVARS_H_
#
include
<
algorithm
>
#
include
<
string
>
#
include
<
vector
>
using
ShCompileOptions
=
uint64_t
;
namespace
sh
{
typedef
unsigned
int
GLenum
;
enum
InterpolationType
{
INTERPOLATION_SMOOTH
INTERPOLATION_CENTROID
INTERPOLATION_FLAT
}
;
bool
InterpolationTypesMatch
(
InterpolationType
a
InterpolationType
b
)
;
enum
BlockLayoutType
{
BLOCKLAYOUT_STANDARD
BLOCKLAYOUT_PACKED
BLOCKLAYOUT_SHARED
}
;
enum
class
BlockType
{
BLOCK_UNIFORM
BLOCK_BUFFER
BLOCK_IN
}
;
struct
ShaderVariable
{
ShaderVariable
(
)
;
ShaderVariable
(
GLenum
typeIn
unsigned
int
arraySizeIn
)
;
~
ShaderVariable
(
)
;
ShaderVariable
(
const
ShaderVariable
&
other
)
;
ShaderVariable
&
operator
=
(
const
ShaderVariable
&
other
)
;
bool
isArray
(
)
const
{
return
arraySize
>
0
;
}
unsigned
int
elementCount
(
)
const
{
return
std
:
:
max
(
1u
arraySize
)
;
}
bool
isStruct
(
)
const
{
return
!
fields
.
empty
(
)
;
}
bool
findInfoByMappedName
(
const
std
:
:
string
&
mappedFullName
const
ShaderVariable
*
*
leafVar
std
:
:
string
*
originalFullName
)
const
;
bool
isBuiltIn
(
)
const
{
return
name
.
compare
(
0
3
"
gl_
"
)
=
=
0
;
}
GLenum
type
;
GLenum
precision
;
std
:
:
string
name
;
std
:
:
string
mappedName
;
unsigned
int
arraySize
;
bool
staticUse
;
std
:
:
vector
<
ShaderVariable
>
fields
;
std
:
:
string
structName
;
protected
:
bool
isSameVariableAtLinkTime
(
const
ShaderVariable
&
other
bool
matchPrecision
bool
matchName
)
const
;
bool
operator
=
=
(
const
ShaderVariable
&
other
)
const
;
bool
operator
!
=
(
const
ShaderVariable
&
other
)
const
{
return
!
operator
=
=
(
other
)
;
}
}
;
struct
VariableWithLocation
:
public
ShaderVariable
{
VariableWithLocation
(
)
;
~
VariableWithLocation
(
)
;
VariableWithLocation
(
const
VariableWithLocation
&
other
)
;
VariableWithLocation
&
operator
=
(
const
VariableWithLocation
&
other
)
;
bool
operator
=
=
(
const
VariableWithLocation
&
other
)
const
;
bool
operator
!
=
(
const
VariableWithLocation
&
other
)
const
{
return
!
operator
=
=
(
other
)
;
}
int
location
;
}
;
struct
Uniform
:
public
VariableWithLocation
{
Uniform
(
)
;
~
Uniform
(
)
;
Uniform
(
const
Uniform
&
other
)
;
Uniform
&
operator
=
(
const
Uniform
&
other
)
;
bool
operator
=
=
(
const
Uniform
&
other
)
const
;
bool
operator
!
=
(
const
Uniform
&
other
)
const
{
return
!
operator
=
=
(
other
)
;
}
int
binding
;
int
offset
;
bool
isSameUniformAtLinkTime
(
const
Uniform
&
other
)
const
;
}
;
struct
Attribute
:
public
VariableWithLocation
{
Attribute
(
)
;
~
Attribute
(
)
;
Attribute
(
const
Attribute
&
other
)
;
Attribute
&
operator
=
(
const
Attribute
&
other
)
;
bool
operator
=
=
(
const
Attribute
&
other
)
const
;
bool
operator
!
=
(
const
Attribute
&
other
)
const
{
return
!
operator
=
=
(
other
)
;
}
}
;
struct
OutputVariable
:
public
VariableWithLocation
{
OutputVariable
(
)
;
~
OutputVariable
(
)
;
OutputVariable
(
const
OutputVariable
&
other
)
;
OutputVariable
&
operator
=
(
const
OutputVariable
&
other
)
;
bool
operator
=
=
(
const
OutputVariable
&
other
)
const
;
bool
operator
!
=
(
const
OutputVariable
&
other
)
const
{
return
!
operator
=
=
(
other
)
;
}
}
;
struct
InterfaceBlockField
:
public
ShaderVariable
{
InterfaceBlockField
(
)
;
~
InterfaceBlockField
(
)
;
InterfaceBlockField
(
const
InterfaceBlockField
&
other
)
;
InterfaceBlockField
&
operator
=
(
const
InterfaceBlockField
&
other
)
;
bool
operator
=
=
(
const
InterfaceBlockField
&
other
)
const
;
bool
operator
!
=
(
const
InterfaceBlockField
&
other
)
const
{
return
!
operator
=
=
(
other
)
;
}
bool
isSameInterfaceBlockFieldAtLinkTime
(
const
InterfaceBlockField
&
other
)
const
;
bool
isRowMajorLayout
;
}
;
struct
Varying
:
public
VariableWithLocation
{
Varying
(
)
;
~
Varying
(
)
;
Varying
(
const
Varying
&
otherg
)
;
Varying
&
operator
=
(
const
Varying
&
other
)
;
bool
operator
=
=
(
const
Varying
&
other
)
const
;
bool
operator
!
=
(
const
Varying
&
other
)
const
{
return
!
operator
=
=
(
other
)
;
}
bool
isSameVaryingAtLinkTime
(
const
Varying
&
other
int
shaderVersion
)
const
;
bool
isSameVaryingAtLinkTime
(
const
Varying
&
other
)
const
;
InterpolationType
interpolation
;
bool
isInvariant
;
}
;
struct
InterfaceBlock
{
InterfaceBlock
(
)
;
~
InterfaceBlock
(
)
;
InterfaceBlock
(
const
InterfaceBlock
&
other
)
;
InterfaceBlock
&
operator
=
(
const
InterfaceBlock
&
other
)
;
std
:
:
string
fieldPrefix
(
)
const
;
std
:
:
string
fieldMappedPrefix
(
)
const
;
bool
isSameInterfaceBlockAtLinkTime
(
const
InterfaceBlock
&
other
)
const
;
bool
isBuiltIn
(
)
const
{
return
name
.
compare
(
0
3
"
gl_
"
)
=
=
0
;
}
std
:
:
string
name
;
std
:
:
string
mappedName
;
std
:
:
string
instanceName
;
unsigned
int
arraySize
;
BlockLayoutType
layout
;
bool
isRowMajorLayout
;
int
binding
;
bool
staticUse
;
BlockType
blockType
;
std
:
:
vector
<
InterfaceBlockField
>
fields
;
}
;
struct
WorkGroupSize
{
void
fill
(
int
fillValue
)
;
void
setLocalSize
(
int
localSizeX
int
localSizeY
int
localSizeZ
)
;
int
&
operator
[
]
(
size_t
index
)
;
int
operator
[
]
(
size_t
index
)
const
;
size_t
size
(
)
const
;
bool
isWorkGroupSizeMatching
(
const
WorkGroupSize
&
right
)
const
;
bool
isAnyValueSet
(
)
const
;
bool
isDeclared
(
)
const
;
bool
isLocalSizeValid
(
)
const
;
int
localSizeQualifiers
[
3
]
;
}
;
}
#
endif
