#
include
"
compiler
/
translator
/
CallDAG
.
h
"
#
include
"
compiler
/
translator
/
InfoSink
.
h
"
class
CallDAG
:
:
CallDAGCreator
:
public
TIntermTraverser
{
public
:
CallDAGCreator
(
TInfoSinkBase
*
info
)
:
TIntermTraverser
(
true
false
true
)
mCreationInfo
(
info
)
mCurrentFunction
(
nullptr
)
mCurrentIndex
(
0
)
{
}
InitResult
assignIndices
(
)
{
int
skipped
=
0
;
for
(
auto
&
it
:
mFunctions
)
{
if
(
it
.
second
.
node
)
{
InitResult
result
=
assignIndicesInternal
(
&
it
.
second
)
;
if
(
result
!
=
INITDAG_SUCCESS
)
{
return
result
;
}
}
else
{
skipped
+
+
;
}
}
ASSERT
(
mFunctions
.
size
(
)
=
=
mCurrentIndex
+
skipped
)
;
return
INITDAG_SUCCESS
;
}
void
fillDataStructures
(
std
:
:
vector
<
Record
>
*
records
std
:
:
map
<
int
int
>
*
idToIndex
)
{
ASSERT
(
records
-
>
empty
(
)
)
;
ASSERT
(
idToIndex
-
>
empty
(
)
)
;
records
-
>
resize
(
mCurrentIndex
)
;
for
(
auto
&
it
:
mFunctions
)
{
CreatorFunctionData
&
data
=
it
.
second
;
if
(
!
data
.
node
)
{
continue
;
}
ASSERT
(
data
.
index
<
records
-
>
size
(
)
)
;
Record
&
record
=
(
*
records
)
[
data
.
index
]
;
record
.
name
=
data
.
name
.
data
(
)
;
record
.
node
=
data
.
node
;
record
.
callees
.
reserve
(
data
.
callees
.
size
(
)
)
;
for
(
auto
&
callee
:
data
.
callees
)
{
record
.
callees
.
push_back
(
static_cast
<
int
>
(
callee
-
>
index
)
)
;
}
(
*
idToIndex
)
[
data
.
node
-
>
getFunctionId
(
)
]
=
static_cast
<
int
>
(
data
.
index
)
;
}
}
private
:
struct
CreatorFunctionData
{
CreatorFunctionData
(
)
:
node
(
nullptr
)
index
(
0
)
indexAssigned
(
false
)
visiting
(
false
)
{
}
std
:
:
set
<
CreatorFunctionData
*
>
callees
;
TIntermAggregate
*
node
;
TString
name
;
size_t
index
;
bool
indexAssigned
;
bool
visiting
;
}
;
bool
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
override
{
switch
(
node
-
>
getOp
(
)
)
{
case
EOpPrototype
:
if
(
visit
=
=
PreVisit
)
{
mFunctions
[
node
-
>
getName
(
)
]
;
}
break
;
case
EOpFunction
:
{
if
(
visit
=
=
PreVisit
)
{
auto
it
=
mFunctions
.
find
(
node
-
>
getName
(
)
)
;
if
(
it
=
=
mFunctions
.
end
(
)
)
{
mCurrentFunction
=
&
mFunctions
[
node
-
>
getName
(
)
]
;
}
else
{
mCurrentFunction
=
&
it
-
>
second
;
}
mCurrentFunction
-
>
node
=
node
;
mCurrentFunction
-
>
name
=
node
-
>
getName
(
)
;
}
else
if
(
visit
=
=
PostVisit
)
{
mCurrentFunction
=
nullptr
;
}
break
;
}
case
EOpFunctionCall
:
{
if
(
visit
=
=
PreVisit
)
{
if
(
node
-
>
isUserDefined
(
)
)
{
auto
it
=
mFunctions
.
find
(
node
-
>
getName
(
)
)
;
ASSERT
(
it
!
=
mFunctions
.
end
(
)
)
;
if
(
mCurrentFunction
)
{
mCurrentFunction
-
>
callees
.
insert
(
&
it
-
>
second
)
;
}
}
}
break
;
}
default
:
break
;
}
return
true
;
}
InitResult
assignIndicesInternal
(
CreatorFunctionData
*
function
)
{
ASSERT
(
function
)
;
if
(
!
function
-
>
node
)
{
*
mCreationInfo
<
<
"
Undefined
function
:
"
<
<
function
-
>
name
;
return
INITDAG_UNDEFINED
;
}
if
(
function
-
>
indexAssigned
)
{
return
INITDAG_SUCCESS
;
}
if
(
function
-
>
visiting
)
{
if
(
mCreationInfo
)
{
*
mCreationInfo
<
<
"
Recursive
function
call
in
the
following
call
chain
:
"
<
<
function
-
>
name
;
}
return
INITDAG_RECURSION
;
}
function
-
>
visiting
=
true
;
for
(
auto
&
callee
:
function
-
>
callees
)
{
InitResult
result
=
assignIndicesInternal
(
callee
)
;
if
(
result
=
=
INITDAG_RECURSION
)
{
if
(
mCreationInfo
)
{
*
mCreationInfo
<
<
"
<
-
"
<
<
function
-
>
name
;
}
return
INITDAG_RECURSION
;
}
else
if
(
result
=
=
INITDAG_UNDEFINED
)
{
return
INITDAG_UNDEFINED
;
}
}
function
-
>
index
=
mCurrentIndex
+
+
;
function
-
>
indexAssigned
=
true
;
function
-
>
visiting
=
false
;
return
INITDAG_SUCCESS
;
}
TInfoSinkBase
*
mCreationInfo
;
std
:
:
map
<
TString
CreatorFunctionData
>
mFunctions
;
CreatorFunctionData
*
mCurrentFunction
;
size_t
mCurrentIndex
;
}
;
CallDAG
:
:
CallDAG
(
)
{
}
CallDAG
:
:
~
CallDAG
(
)
{
}
const
size_t
CallDAG
:
:
InvalidIndex
=
std
:
:
numeric_limits
<
size_t
>
:
:
max
(
)
;
size_t
CallDAG
:
:
findIndex
(
const
TIntermAggregate
*
function
)
const
{
TOperator
op
=
function
-
>
getOp
(
)
;
ASSERT
(
op
=
=
EOpPrototype
|
|
op
=
=
EOpFunction
|
|
op
=
=
EOpFunctionCall
)
;
UNUSED_ASSERTION_VARIABLE
(
op
)
;
auto
it
=
mFunctionIdToIndex
.
find
(
function
-
>
getFunctionId
(
)
)
;
if
(
it
=
=
mFunctionIdToIndex
.
end
(
)
)
{
return
InvalidIndex
;
}
else
{
return
it
-
>
second
;
}
}
const
CallDAG
:
:
Record
&
CallDAG
:
:
getRecordFromIndex
(
size_t
index
)
const
{
ASSERT
(
index
!
=
InvalidIndex
&
&
index
<
mRecords
.
size
(
)
)
;
return
mRecords
[
index
]
;
}
const
CallDAG
:
:
Record
&
CallDAG
:
:
getRecord
(
const
TIntermAggregate
*
function
)
const
{
size_t
index
=
findIndex
(
function
)
;
ASSERT
(
index
!
=
InvalidIndex
&
&
index
<
mRecords
.
size
(
)
)
;
return
mRecords
[
index
]
;
}
size_t
CallDAG
:
:
size
(
)
const
{
return
mRecords
.
size
(
)
;
}
void
CallDAG
:
:
clear
(
)
{
mRecords
.
clear
(
)
;
mFunctionIdToIndex
.
clear
(
)
;
}
CallDAG
:
:
InitResult
CallDAG
:
:
init
(
TIntermNode
*
root
TInfoSinkBase
*
info
)
{
CallDAGCreator
creator
(
info
)
;
root
-
>
traverse
(
&
creator
)
;
InitResult
result
=
creator
.
assignIndices
(
)
;
if
(
result
!
=
INITDAG_SUCCESS
)
{
return
result
;
}
creator
.
fillDataStructures
(
&
mRecords
&
mFunctionIdToIndex
)
;
return
INITDAG_SUCCESS
;
}
