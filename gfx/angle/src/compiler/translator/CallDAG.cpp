#
include
"
compiler
/
translator
/
CallDAG
.
h
"
#
include
"
compiler
/
translator
/
Diagnostics
.
h
"
#
include
"
compiler
/
translator
/
IntermTraverse
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
namespace
sh
{
class
CallDAG
:
:
CallDAGCreator
:
public
TIntermTraverser
{
public
:
CallDAGCreator
(
TDiagnostics
*
diagnostics
)
:
TIntermTraverser
(
true
false
true
)
mDiagnostics
(
diagnostics
)
mCurrentFunction
(
nullptr
)
mCurrentIndex
(
0
)
{
}
InitResult
assignIndices
(
)
{
int
skipped
=
0
;
for
(
auto
&
it
:
mFunctions
)
{
if
(
it
.
second
.
node
)
{
InitResult
result
=
assignIndicesInternal
(
&
it
.
second
)
;
if
(
result
!
=
INITDAG_SUCCESS
)
{
return
result
;
}
}
else
{
skipped
+
+
;
}
}
ASSERT
(
mFunctions
.
size
(
)
=
=
mCurrentIndex
+
skipped
)
;
return
INITDAG_SUCCESS
;
}
void
fillDataStructures
(
std
:
:
vector
<
Record
>
*
records
std
:
:
map
<
int
int
>
*
idToIndex
)
{
ASSERT
(
records
-
>
empty
(
)
)
;
ASSERT
(
idToIndex
-
>
empty
(
)
)
;
records
-
>
resize
(
mCurrentIndex
)
;
for
(
auto
&
it
:
mFunctions
)
{
CreatorFunctionData
&
data
=
it
.
second
;
if
(
!
data
.
node
)
{
continue
;
}
ASSERT
(
data
.
index
<
records
-
>
size
(
)
)
;
Record
&
record
=
(
*
records
)
[
data
.
index
]
;
record
.
name
=
data
.
name
.
data
(
)
;
record
.
node
=
data
.
node
;
record
.
callees
.
reserve
(
data
.
callees
.
size
(
)
)
;
for
(
auto
&
callee
:
data
.
callees
)
{
record
.
callees
.
push_back
(
static_cast
<
int
>
(
callee
-
>
index
)
)
;
}
(
*
idToIndex
)
[
data
.
node
-
>
getFunctionSymbolInfo
(
)
-
>
getId
(
)
.
get
(
)
]
=
static_cast
<
int
>
(
data
.
index
)
;
}
}
private
:
struct
CreatorFunctionData
{
CreatorFunctionData
(
)
:
node
(
nullptr
)
index
(
0
)
indexAssigned
(
false
)
visiting
(
false
)
{
}
std
:
:
set
<
CreatorFunctionData
*
>
callees
;
TIntermFunctionDefinition
*
node
;
TString
name
;
size_t
index
;
bool
indexAssigned
;
bool
visiting
;
}
;
bool
visitFunctionDefinition
(
Visit
visit
TIntermFunctionDefinition
*
node
)
override
{
if
(
visit
=
=
PreVisit
)
{
auto
it
=
mFunctions
.
find
(
node
-
>
getFunctionSymbolInfo
(
)
-
>
getId
(
)
.
get
(
)
)
;
if
(
it
=
=
mFunctions
.
end
(
)
)
{
mCurrentFunction
=
&
mFunctions
[
node
-
>
getFunctionSymbolInfo
(
)
-
>
getId
(
)
.
get
(
)
]
;
mCurrentFunction
-
>
name
=
node
-
>
getFunctionSymbolInfo
(
)
-
>
getName
(
)
;
}
else
{
mCurrentFunction
=
&
it
-
>
second
;
ASSERT
(
mCurrentFunction
-
>
name
=
=
node
-
>
getFunctionSymbolInfo
(
)
-
>
getName
(
)
)
;
}
mCurrentFunction
-
>
node
=
node
;
}
else
if
(
visit
=
=
PostVisit
)
{
mCurrentFunction
=
nullptr
;
}
return
true
;
}
bool
visitFunctionPrototype
(
Visit
visit
TIntermFunctionPrototype
*
node
)
override
{
ASSERT
(
visit
=
=
PreVisit
)
;
if
(
mCurrentFunction
!
=
nullptr
)
{
return
false
;
}
auto
&
record
=
mFunctions
[
node
-
>
getFunctionSymbolInfo
(
)
-
>
getId
(
)
.
get
(
)
]
;
record
.
name
=
node
-
>
getFunctionSymbolInfo
(
)
-
>
getName
(
)
;
return
false
;
}
bool
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
override
{
if
(
visit
=
=
PreVisit
&
&
node
-
>
getOp
(
)
=
=
EOpCallFunctionInAST
)
{
auto
it
=
mFunctions
.
find
(
node
-
>
getFunctionSymbolInfo
(
)
-
>
getId
(
)
.
get
(
)
)
;
ASSERT
(
it
!
=
mFunctions
.
end
(
)
)
;
if
(
mCurrentFunction
)
{
mCurrentFunction
-
>
callees
.
insert
(
&
it
-
>
second
)
;
}
}
return
true
;
}
InitResult
assignIndicesInternal
(
CreatorFunctionData
*
root
)
{
ASSERT
(
root
)
;
if
(
root
-
>
indexAssigned
)
{
return
INITDAG_SUCCESS
;
}
TVector
<
CreatorFunctionData
*
>
functionsToProcess
;
functionsToProcess
.
push_back
(
root
)
;
InitResult
result
=
INITDAG_SUCCESS
;
std
:
:
stringstream
errorStream
;
while
(
!
functionsToProcess
.
empty
(
)
)
{
CreatorFunctionData
*
function
=
functionsToProcess
.
back
(
)
;
if
(
function
-
>
visiting
)
{
function
-
>
visiting
=
false
;
function
-
>
index
=
mCurrentIndex
+
+
;
function
-
>
indexAssigned
=
true
;
functionsToProcess
.
pop_back
(
)
;
continue
;
}
if
(
!
function
-
>
node
)
{
errorStream
<
<
"
Undefined
function
'
"
<
<
function
-
>
name
<
<
"
)
'
used
in
the
following
call
chain
:
"
;
result
=
INITDAG_UNDEFINED
;
break
;
}
if
(
function
-
>
indexAssigned
)
{
functionsToProcess
.
pop_back
(
)
;
continue
;
}
function
-
>
visiting
=
true
;
for
(
auto
callee
:
function
-
>
callees
)
{
functionsToProcess
.
push_back
(
callee
)
;
if
(
callee
-
>
visiting
)
{
errorStream
<
<
"
Recursive
function
call
in
the
following
call
chain
:
"
;
result
=
INITDAG_RECURSION
;
break
;
}
}
if
(
result
!
=
INITDAG_SUCCESS
)
{
break
;
}
}
if
(
result
!
=
INITDAG_SUCCESS
)
{
bool
first
=
true
;
for
(
auto
function
:
functionsToProcess
)
{
if
(
function
-
>
visiting
)
{
if
(
!
first
)
{
errorStream
<
<
"
-
>
"
;
}
errorStream
<
<
function
-
>
name
<
<
"
)
"
;
first
=
false
;
}
}
if
(
mDiagnostics
)
{
std
:
:
string
errorStr
=
errorStream
.
str
(
)
;
mDiagnostics
-
>
globalError
(
errorStr
.
c_str
(
)
)
;
}
}
return
result
;
}
TDiagnostics
*
mDiagnostics
;
std
:
:
map
<
int
CreatorFunctionData
>
mFunctions
;
CreatorFunctionData
*
mCurrentFunction
;
size_t
mCurrentIndex
;
}
;
CallDAG
:
:
CallDAG
(
)
{
}
CallDAG
:
:
~
CallDAG
(
)
{
}
const
size_t
CallDAG
:
:
InvalidIndex
=
std
:
:
numeric_limits
<
size_t
>
:
:
max
(
)
;
size_t
CallDAG
:
:
findIndex
(
const
TFunctionSymbolInfo
*
functionInfo
)
const
{
auto
it
=
mFunctionIdToIndex
.
find
(
functionInfo
-
>
getId
(
)
.
get
(
)
)
;
if
(
it
=
=
mFunctionIdToIndex
.
end
(
)
)
{
return
InvalidIndex
;
}
else
{
return
it
-
>
second
;
}
}
const
CallDAG
:
:
Record
&
CallDAG
:
:
getRecordFromIndex
(
size_t
index
)
const
{
ASSERT
(
index
!
=
InvalidIndex
&
&
index
<
mRecords
.
size
(
)
)
;
return
mRecords
[
index
]
;
}
const
CallDAG
:
:
Record
&
CallDAG
:
:
getRecord
(
const
TIntermAggregate
*
function
)
const
{
size_t
index
=
findIndex
(
function
-
>
getFunctionSymbolInfo
(
)
)
;
ASSERT
(
index
!
=
InvalidIndex
&
&
index
<
mRecords
.
size
(
)
)
;
return
mRecords
[
index
]
;
}
size_t
CallDAG
:
:
size
(
)
const
{
return
mRecords
.
size
(
)
;
}
void
CallDAG
:
:
clear
(
)
{
mRecords
.
clear
(
)
;
mFunctionIdToIndex
.
clear
(
)
;
}
CallDAG
:
:
InitResult
CallDAG
:
:
init
(
TIntermNode
*
root
TDiagnostics
*
diagnostics
)
{
CallDAGCreator
creator
(
diagnostics
)
;
root
-
>
traverse
(
&
creator
)
;
InitResult
result
=
creator
.
assignIndices
(
)
;
if
(
result
!
=
INITDAG_SUCCESS
)
{
return
result
;
}
creator
.
fillDataStructures
(
&
mRecords
&
mFunctionIdToIndex
)
;
return
INITDAG_SUCCESS
;
}
}
