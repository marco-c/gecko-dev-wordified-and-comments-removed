#
include
"
compiler
/
translator
/
RemovePow
.
h
"
#
include
"
compiler
/
translator
/
InfoSink
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
namespace
{
bool
IsProblematicPow
(
TIntermTyped
*
node
)
{
TIntermAggregate
*
agg
=
node
-
>
getAsAggregate
(
)
;
if
(
agg
!
=
nullptr
&
&
agg
-
>
getOp
(
)
=
=
EOpPow
)
{
ASSERT
(
agg
-
>
getSequence
(
)
-
>
size
(
)
=
=
2
)
;
return
agg
-
>
getSequence
(
)
-
>
at
(
1
)
-
>
getAsConstantUnion
(
)
!
=
nullptr
;
}
return
false
;
}
class
RemovePowTraverser
:
public
TIntermTraverser
{
public
:
RemovePowTraverser
(
)
;
bool
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
override
;
void
nextIteration
(
)
{
mNeedAnotherIteration
=
false
;
}
bool
needAnotherIteration
(
)
const
{
return
mNeedAnotherIteration
;
}
protected
:
bool
mNeedAnotherIteration
;
}
;
RemovePowTraverser
:
:
RemovePowTraverser
(
)
:
TIntermTraverser
(
true
false
false
)
mNeedAnotherIteration
(
false
)
{
}
bool
RemovePowTraverser
:
:
visitAggregate
(
Visit
visit
TIntermAggregate
*
node
)
{
if
(
IsProblematicPow
(
node
)
)
{
TIntermTyped
*
x
=
node
-
>
getSequence
(
)
-
>
at
(
0
)
-
>
getAsTyped
(
)
;
TIntermTyped
*
y
=
node
-
>
getSequence
(
)
-
>
at
(
1
)
-
>
getAsTyped
(
)
;
TIntermUnary
*
log
=
new
TIntermUnary
(
EOpLog2
)
;
log
-
>
setOperand
(
x
)
;
log
-
>
setLine
(
node
-
>
getLine
(
)
)
;
log
-
>
setType
(
x
-
>
getType
(
)
)
;
TOperator
op
=
TIntermBinary
:
:
GetMulOpBasedOnOperands
(
y
-
>
getType
(
)
log
-
>
getType
(
)
)
;
TIntermBinary
*
mul
=
new
TIntermBinary
(
op
y
log
)
;
mul
-
>
setLine
(
node
-
>
getLine
(
)
)
;
TIntermUnary
*
exp
=
new
TIntermUnary
(
EOpExp2
)
;
exp
-
>
setOperand
(
mul
)
;
exp
-
>
setLine
(
node
-
>
getLine
(
)
)
;
exp
-
>
setType
(
node
-
>
getType
(
)
)
;
queueReplacement
(
node
exp
OriginalNode
:
:
IS_DROPPED
)
;
if
(
IsProblematicPow
(
x
)
)
{
mNeedAnotherIteration
=
true
;
return
false
;
}
}
return
true
;
}
}
void
RemovePow
(
TIntermNode
*
root
)
{
RemovePowTraverser
traverser
;
do
{
traverser
.
nextIteration
(
)
;
root
-
>
traverse
(
&
traverser
)
;
traverser
.
updateTree
(
)
;
}
while
(
traverser
.
needAnotherIteration
(
)
)
;
}
