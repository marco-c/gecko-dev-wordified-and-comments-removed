#
ifndef
COMPILER_TRANSLATOR_REMOVESWITCHFALLTHROUGH_H_
#
define
COMPILER_TRANSLATOR_REMOVESWITCHFALLTHROUGH_H_
#
include
"
compiler
/
translator
/
IntermTraverse
.
h
"
namespace
sh
{
class
RemoveSwitchFallThrough
:
public
TIntermTraverser
{
public
:
static
TIntermBlock
*
removeFallThrough
(
TIntermBlock
*
statementList
)
;
private
:
RemoveSwitchFallThrough
(
TIntermBlock
*
statementList
)
;
void
visitSymbol
(
TIntermSymbol
*
node
)
override
;
void
visitConstantUnion
(
TIntermConstantUnion
*
node
)
override
;
bool
visitBinary
(
Visit
TIntermBinary
*
node
)
override
;
bool
visitUnary
(
Visit
TIntermUnary
*
node
)
override
;
bool
visitTernary
(
Visit
visit
TIntermTernary
*
node
)
override
;
bool
visitIfElse
(
Visit
visit
TIntermIfElse
*
node
)
override
;
bool
visitSwitch
(
Visit
TIntermSwitch
*
node
)
override
;
bool
visitCase
(
Visit
TIntermCase
*
node
)
override
;
bool
visitAggregate
(
Visit
TIntermAggregate
*
node
)
override
;
bool
visitBlock
(
Visit
TIntermBlock
*
node
)
override
;
bool
visitLoop
(
Visit
TIntermLoop
*
node
)
override
;
bool
visitBranch
(
Visit
TIntermBranch
*
node
)
override
;
void
outputSequence
(
TIntermSequence
*
sequence
size_t
startIndex
)
;
void
handlePreviousCase
(
)
;
TIntermBlock
*
mStatementList
;
TIntermBlock
*
mStatementListOut
;
bool
mLastStatementWasBreak
;
TIntermBlock
*
mPreviousCase
;
std
:
:
vector
<
TIntermBlock
*
>
mCasesSharingBreak
;
}
;
}
#
endif
