#
ifndef
COMMON_BLOCKLAYOUT_H_
#
define
COMMON_BLOCKLAYOUT_H_
#
include
<
cstddef
>
#
include
<
vector
>
#
include
"
angle_gl
.
h
"
#
include
<
GLSLANG
/
ShaderLang
.
h
>
namespace
sh
{
struct
ShaderVariable
;
struct
InterfaceBlockField
;
struct
Uniform
;
struct
Varying
;
struct
InterfaceBlock
;
struct
COMPILER_EXPORT
BlockMemberInfo
{
BlockMemberInfo
(
)
:
offset
(
-
1
)
arrayStride
(
-
1
)
matrixStride
(
-
1
)
isRowMajorMatrix
(
false
)
{
}
BlockMemberInfo
(
int
offset
int
arrayStride
int
matrixStride
bool
isRowMajorMatrix
)
:
offset
(
offset
)
arrayStride
(
arrayStride
)
matrixStride
(
matrixStride
)
isRowMajorMatrix
(
isRowMajorMatrix
)
{
}
static
BlockMemberInfo
getDefaultBlockInfo
(
)
{
return
BlockMemberInfo
(
-
1
-
1
-
1
false
)
;
}
int
offset
;
int
arrayStride
;
int
matrixStride
;
bool
isRowMajorMatrix
;
}
;
class
COMPILER_EXPORT
BlockLayoutEncoder
{
public
:
BlockLayoutEncoder
(
)
;
virtual
~
BlockLayoutEncoder
(
)
{
}
BlockMemberInfo
encodeType
(
GLenum
type
unsigned
int
arraySize
bool
isRowMajorMatrix
)
;
size_t
getBlockSize
(
)
const
{
return
mCurrentOffset
*
BytesPerComponent
;
}
virtual
void
enterAggregateType
(
)
=
0
;
virtual
void
exitAggregateType
(
)
=
0
;
static
const
size_t
BytesPerComponent
=
4u
;
static
const
unsigned
int
ComponentsPerRegister
=
4u
;
static
size_t
getBlockRegister
(
const
BlockMemberInfo
&
info
)
;
static
size_t
getBlockRegisterElement
(
const
BlockMemberInfo
&
info
)
;
protected
:
size_t
mCurrentOffset
;
void
nextRegister
(
)
;
virtual
void
getBlockLayoutInfo
(
GLenum
type
unsigned
int
arraySize
bool
isRowMajorMatrix
int
*
arrayStrideOut
int
*
matrixStrideOut
)
=
0
;
virtual
void
advanceOffset
(
GLenum
type
unsigned
int
arraySize
bool
isRowMajorMatrix
int
arrayStride
int
matrixStride
)
=
0
;
}
;
class
COMPILER_EXPORT
Std140BlockEncoder
:
public
BlockLayoutEncoder
{
public
:
Std140BlockEncoder
(
)
;
void
enterAggregateType
(
)
override
;
void
exitAggregateType
(
)
override
;
protected
:
void
getBlockLayoutInfo
(
GLenum
type
unsigned
int
arraySize
bool
isRowMajorMatrix
int
*
arrayStrideOut
int
*
matrixStrideOut
)
override
;
void
advanceOffset
(
GLenum
type
unsigned
int
arraySize
bool
isRowMajorMatrix
int
arrayStride
int
matrixStride
)
override
;
}
;
}
#
endif
