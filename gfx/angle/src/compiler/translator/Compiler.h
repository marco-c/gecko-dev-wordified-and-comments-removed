#
ifndef
COMPILER_TRANSLATOR_COMPILER_H_
#
define
COMPILER_TRANSLATOR_COMPILER_H_
#
include
<
GLSLANG
/
ShaderVars
.
h
>
#
include
"
compiler
/
translator
/
BuiltInFunctionEmulator
.
h
"
#
include
"
compiler
/
translator
/
CallDAG
.
h
"
#
include
"
compiler
/
translator
/
Diagnostics
.
h
"
#
include
"
compiler
/
translator
/
ExtensionBehavior
.
h
"
#
include
"
compiler
/
translator
/
HashNames
.
h
"
#
include
"
compiler
/
translator
/
InfoSink
.
h
"
#
include
"
compiler
/
translator
/
Pragma
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
#
include
"
third_party
/
compiler
/
ArrayBoundsClamper
.
h
"
namespace
sh
{
class
TCompiler
;
#
ifdef
ANGLE_ENABLE_HLSL
class
TranslatorHLSL
;
#
endif
bool
IsWebGLBasedSpec
(
ShShaderSpec
spec
)
;
bool
IsGLSL130OrNewer
(
ShShaderOutput
output
)
;
bool
IsGLSL420OrNewer
(
ShShaderOutput
output
)
;
bool
IsGLSL410OrOlder
(
ShShaderOutput
output
)
;
bool
RemoveInvariant
(
sh
:
:
GLenum
shaderType
int
shaderVersion
ShShaderOutput
outputType
ShCompileOptions
compileOptions
)
;
class
TShHandleBase
{
public
:
TShHandleBase
(
)
;
virtual
~
TShHandleBase
(
)
;
virtual
TCompiler
*
getAsCompiler
(
)
{
return
0
;
}
#
ifdef
ANGLE_ENABLE_HLSL
virtual
TranslatorHLSL
*
getAsTranslatorHLSL
(
)
{
return
0
;
}
#
endif
protected
:
TPoolAllocator
allocator
;
}
;
class
TCompiler
:
public
TShHandleBase
{
public
:
TCompiler
(
sh
:
:
GLenum
type
ShShaderSpec
spec
ShShaderOutput
output
)
;
~
TCompiler
(
)
override
;
TCompiler
*
getAsCompiler
(
)
override
{
return
this
;
}
bool
Init
(
const
ShBuiltInResources
&
resources
)
;
TIntermBlock
*
compileTreeForTesting
(
const
char
*
const
shaderStrings
[
]
size_t
numStrings
ShCompileOptions
compileOptions
)
;
bool
compile
(
const
char
*
const
shaderStrings
[
]
size_t
numStrings
ShCompileOptions
compileOptions
)
;
int
getShaderVersion
(
)
const
{
return
shaderVersion
;
}
TInfoSink
&
getInfoSink
(
)
{
return
infoSink
;
}
bool
isComputeShaderLocalSizeDeclared
(
)
const
{
return
mComputeShaderLocalSizeDeclared
;
}
const
sh
:
:
WorkGroupSize
&
getComputeShaderLocalSize
(
)
const
{
return
mComputeShaderLocalSize
;
}
int
getNumViews
(
)
const
{
return
mNumViews
;
}
void
clearResults
(
)
;
const
std
:
:
vector
<
sh
:
:
Attribute
>
&
getAttributes
(
)
const
{
return
attributes
;
}
const
std
:
:
vector
<
sh
:
:
OutputVariable
>
&
getOutputVariables
(
)
const
{
return
outputVariables
;
}
const
std
:
:
vector
<
sh
:
:
Uniform
>
&
getUniforms
(
)
const
{
return
uniforms
;
}
const
std
:
:
vector
<
sh
:
:
Varying
>
&
getInputVaryings
(
)
const
{
return
inputVaryings
;
}
const
std
:
:
vector
<
sh
:
:
Varying
>
&
getOutputVaryings
(
)
const
{
return
outputVaryings
;
}
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
&
getInterfaceBlocks
(
)
const
{
return
interfaceBlocks
;
}
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
&
getUniformBlocks
(
)
const
{
return
uniformBlocks
;
}
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
&
getShaderStorageBlocks
(
)
const
{
return
shaderStorageBlocks
;
}
const
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
&
getInBlocks
(
)
const
{
return
inBlocks
;
}
ShHashFunction64
getHashFunction
(
)
const
{
return
hashFunction
;
}
NameMap
&
getNameMap
(
)
{
return
nameMap
;
}
TSymbolTable
&
getSymbolTable
(
)
{
return
symbolTable
;
}
ShShaderSpec
getShaderSpec
(
)
const
{
return
shaderSpec
;
}
ShShaderOutput
getOutputType
(
)
const
{
return
outputType
;
}
const
std
:
:
string
&
getBuiltInResourcesString
(
)
const
{
return
builtInResourcesString
;
}
bool
shouldRunLoopAndIndexingValidation
(
ShCompileOptions
compileOptions
)
const
;
const
ShBuiltInResources
&
getResources
(
)
const
;
int
getGeometryShaderMaxVertices
(
)
const
{
return
mGeometryShaderMaxVertices
;
}
int
getGeometryShaderInvocations
(
)
const
{
return
mGeometryShaderInvocations
;
}
TLayoutPrimitiveType
getGeometryShaderInputPrimitiveType
(
)
const
{
return
mGeometryShaderInputPrimitiveType
;
}
TLayoutPrimitiveType
getGeometryShaderOutputPrimitiveType
(
)
const
{
return
mGeometryShaderOutputPrimitiveType
;
}
sh
:
:
GLenum
getShaderType
(
)
const
{
return
shaderType
;
}
protected
:
bool
InitBuiltInSymbolTable
(
const
ShBuiltInResources
&
resources
)
;
void
setResourceString
(
)
;
bool
checkCallDepth
(
)
;
virtual
void
initBuiltInFunctionEmulator
(
BuiltInFunctionEmulator
*
emu
ShCompileOptions
compileOptions
)
{
}
;
virtual
void
translate
(
TIntermBlock
*
root
ShCompileOptions
compileOptions
)
=
0
;
void
useAllMembersInUnusedStandardAndSharedBlocks
(
TIntermBlock
*
root
)
;
void
initializeOutputVariables
(
TIntermBlock
*
root
)
;
void
initializeGLPosition
(
TIntermBlock
*
root
)
;
bool
limitExpressionComplexity
(
TIntermBlock
*
root
)
;
const
TExtensionBehavior
&
getExtensionBehavior
(
)
const
;
const
char
*
getSourcePath
(
)
const
;
const
TPragma
&
getPragma
(
)
const
{
return
mPragma
;
}
void
writePragma
(
ShCompileOptions
compileOptions
)
;
bool
isVaryingDefined
(
const
char
*
varyingName
)
;
const
ArrayBoundsClamper
&
getArrayBoundsClamper
(
)
const
;
ShArrayIndexClampingStrategy
getArrayIndexClampingStrategy
(
)
const
;
const
BuiltInFunctionEmulator
&
getBuiltInFunctionEmulator
(
)
const
;
virtual
bool
shouldFlattenPragmaStdglInvariantAll
(
)
=
0
;
virtual
bool
shouldCollectVariables
(
ShCompileOptions
compileOptions
)
;
virtual
bool
needToInitializeGlobalsInAST
(
)
const
{
return
IsWebGLBasedSpec
(
shaderSpec
)
;
}
bool
wereVariablesCollected
(
)
const
;
std
:
:
vector
<
sh
:
:
Attribute
>
attributes
;
std
:
:
vector
<
sh
:
:
OutputVariable
>
outputVariables
;
std
:
:
vector
<
sh
:
:
Uniform
>
uniforms
;
std
:
:
vector
<
sh
:
:
Varying
>
inputVaryings
;
std
:
:
vector
<
sh
:
:
Varying
>
outputVaryings
;
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
interfaceBlocks
;
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
uniformBlocks
;
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
shaderStorageBlocks
;
std
:
:
vector
<
sh
:
:
InterfaceBlock
>
inBlocks
;
private
:
bool
initCallDag
(
TIntermNode
*
root
)
;
bool
tagUsedFunctions
(
)
;
void
internalTagUsedFunction
(
size_t
index
)
;
void
initSamplerDefaultPrecision
(
TBasicType
samplerType
)
;
void
collectInterfaceBlocks
(
)
;
bool
variablesCollected
;
bool
mGLPositionInitialized
;
class
UnusedPredicate
;
bool
pruneUnusedFunctions
(
TIntermBlock
*
root
)
;
TIntermBlock
*
compileTreeImpl
(
const
char
*
const
shaderStrings
[
]
size_t
numStrings
const
ShCompileOptions
compileOptions
)
;
sh
:
:
GLenum
shaderType
;
ShShaderSpec
shaderSpec
;
ShShaderOutput
outputType
;
struct
FunctionMetadata
{
FunctionMetadata
(
)
:
used
(
false
)
{
}
bool
used
;
}
;
CallDAG
mCallDag
;
std
:
:
vector
<
FunctionMetadata
>
functionMetadata
;
int
maxUniformVectors
;
int
maxExpressionComplexity
;
int
maxCallStackDepth
;
int
maxFunctionParameters
;
ShBuiltInResources
compileResources
;
std
:
:
string
builtInResourcesString
;
TSymbolTable
symbolTable
;
TExtensionBehavior
extensionBehavior
;
bool
fragmentPrecisionHigh
;
ArrayBoundsClamper
arrayBoundsClamper
;
ShArrayIndexClampingStrategy
clampingStrategy
;
BuiltInFunctionEmulator
builtInFunctionEmulator
;
int
shaderVersion
;
TInfoSink
infoSink
;
TDiagnostics
mDiagnostics
;
const
char
*
mSourcePath
;
bool
mComputeShaderLocalSizeDeclared
;
sh
:
:
WorkGroupSize
mComputeShaderLocalSize
;
int
mNumViews
;
int
mGeometryShaderMaxVertices
;
int
mGeometryShaderInvocations
;
TLayoutPrimitiveType
mGeometryShaderInputPrimitiveType
;
TLayoutPrimitiveType
mGeometryShaderOutputPrimitiveType
;
ShHashFunction64
hashFunction
;
NameMap
nameMap
;
TPragma
mPragma
;
}
;
TCompiler
*
ConstructCompiler
(
sh
:
:
GLenum
type
ShShaderSpec
spec
ShShaderOutput
output
)
;
void
DeleteCompiler
(
TCompiler
*
)
;
}
#
endif
