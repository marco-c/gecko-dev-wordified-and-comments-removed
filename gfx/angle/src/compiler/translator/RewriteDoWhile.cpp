#
include
"
compiler
/
translator
/
RewriteDoWhile
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
namespace
sh
{
namespace
{
class
DoWhileRewriter
:
public
TIntermTraverser
{
public
:
DoWhileRewriter
(
)
:
TIntermTraverser
(
true
false
false
)
{
}
bool
visitBlock
(
Visit
TIntermBlock
*
node
)
override
{
TIntermSequence
*
statements
=
node
-
>
getSequence
(
)
;
for
(
size_t
i
=
0
;
i
<
statements
-
>
size
(
)
;
i
+
+
)
{
TIntermNode
*
statement
=
(
*
statements
)
[
i
]
;
TIntermLoop
*
loop
=
statement
-
>
getAsLoopNode
(
)
;
if
(
loop
=
=
nullptr
|
|
loop
-
>
getType
(
)
!
=
ELoopDoWhile
)
{
continue
;
}
TType
boolType
=
TType
(
EbtBool
)
;
TIntermDeclaration
*
tempDeclaration
=
nullptr
;
{
TConstantUnion
*
falseConstant
=
new
TConstantUnion
(
)
;
falseConstant
-
>
setBConst
(
false
)
;
TIntermTyped
*
falseValue
=
new
TIntermConstantUnion
(
falseConstant
boolType
)
;
tempDeclaration
=
createTempInitDeclaration
(
falseValue
)
;
}
TIntermBinary
*
assignTrue
=
nullptr
;
{
TConstantUnion
*
trueConstant
=
new
TConstantUnion
(
)
;
trueConstant
-
>
setBConst
(
true
)
;
TIntermTyped
*
trueValue
=
new
TIntermConstantUnion
(
trueConstant
boolType
)
;
assignTrue
=
createTempAssignment
(
trueValue
)
;
}
TIntermIfElse
*
breakIf
=
nullptr
;
{
TIntermBranch
*
breakStatement
=
new
TIntermBranch
(
EOpBreak
nullptr
)
;
TIntermBlock
*
breakBlock
=
new
TIntermBlock
(
)
;
breakBlock
-
>
getSequence
(
)
-
>
push_back
(
breakStatement
)
;
TIntermUnary
*
negatedCondition
=
new
TIntermUnary
(
EOpLogicalNot
loop
-
>
getCondition
(
)
)
;
TIntermIfElse
*
innerIf
=
new
TIntermIfElse
(
negatedCondition
breakBlock
nullptr
)
;
TIntermBlock
*
innerIfBlock
=
new
TIntermBlock
(
)
;
innerIfBlock
-
>
getSequence
(
)
-
>
push_back
(
innerIf
)
;
breakIf
=
new
TIntermIfElse
(
createTempSymbol
(
boolType
)
innerIfBlock
nullptr
)
;
}
TIntermLoop
*
newLoop
=
nullptr
;
{
TConstantUnion
*
trueConstant
=
new
TConstantUnion
(
)
;
trueConstant
-
>
setBConst
(
true
)
;
TIntermTyped
*
trueValue
=
new
TIntermConstantUnion
(
trueConstant
boolType
)
;
TIntermBlock
*
body
=
loop
-
>
getBody
(
)
;
if
(
body
=
=
nullptr
)
{
body
=
new
TIntermBlock
(
)
;
}
auto
sequence
=
body
-
>
getSequence
(
)
;
sequence
-
>
insert
(
sequence
-
>
begin
(
)
assignTrue
)
;
sequence
-
>
insert
(
sequence
-
>
begin
(
)
breakIf
)
;
newLoop
=
new
TIntermLoop
(
ELoopWhile
nullptr
trueValue
nullptr
body
)
;
}
TIntermSequence
replacement
;
replacement
.
push_back
(
tempDeclaration
)
;
replacement
.
push_back
(
newLoop
)
;
node
-
>
replaceChildNodeWithMultiple
(
loop
replacement
)
;
nextTemporaryIndex
(
)
;
}
return
true
;
}
}
;
}
void
RewriteDoWhile
(
TIntermNode
*
root
unsigned
int
*
temporaryIndex
)
{
ASSERT
(
temporaryIndex
!
=
0
)
;
DoWhileRewriter
rewriter
;
rewriter
.
useTemporaryIndex
(
temporaryIndex
)
;
root
-
>
traverse
(
&
rewriter
)
;
}
}
