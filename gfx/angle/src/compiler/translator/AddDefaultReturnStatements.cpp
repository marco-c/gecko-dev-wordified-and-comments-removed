#
include
"
compiler
/
translator
/
AddDefaultReturnStatements
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
#
include
"
compiler
/
translator
/
util
.
h
"
namespace
sh
{
namespace
{
class
AddDefaultReturnStatementsTraverser
:
private
TIntermTraverser
{
public
:
static
void
Apply
(
TIntermNode
*
root
)
{
AddDefaultReturnStatementsTraverser
separateInit
;
root
-
>
traverse
(
&
separateInit
)
;
separateInit
.
updateTree
(
)
;
}
private
:
AddDefaultReturnStatementsTraverser
(
)
:
TIntermTraverser
(
true
false
false
)
{
}
static
bool
IsFunctionWithoutReturnStatement
(
TIntermAggregate
*
node
TType
*
returnType
)
{
*
returnType
=
node
-
>
getType
(
)
;
if
(
node
-
>
getOp
(
)
!
=
EOpFunction
|
|
node
-
>
getType
(
)
.
getBasicType
(
)
=
=
EbtVoid
)
{
return
false
;
}
TIntermAggregate
*
lastNode
=
node
-
>
getSequence
(
)
-
>
back
(
)
-
>
getAsAggregate
(
)
;
if
(
lastNode
=
=
nullptr
)
{
return
true
;
}
TIntermBranch
*
returnNode
=
lastNode
-
>
getSequence
(
)
-
>
front
(
)
-
>
getAsBranchNode
(
)
;
if
(
returnNode
!
=
nullptr
&
&
returnNode
-
>
getFlowOp
(
)
=
=
EOpReturn
)
{
return
false
;
}
return
true
;
}
static
TIntermTyped
*
GenerateTypeConstructor
(
const
TType
&
returnType
)
{
if
(
!
returnType
.
isArray
(
)
)
{
size_t
objectSize
=
returnType
.
getObjectSize
(
)
;
TConstantUnion
*
constantUnion
=
new
TConstantUnion
[
objectSize
]
;
for
(
size_t
constantIdx
=
0
;
constantIdx
<
objectSize
;
constantIdx
+
+
)
{
constantUnion
[
constantIdx
]
.
setFConst
(
0
.
0f
)
;
}
TIntermConstantUnion
*
intermConstantUnion
=
new
TIntermConstantUnion
(
constantUnion
returnType
)
;
return
intermConstantUnion
;
}
TIntermAggregate
*
constructorAggrigate
=
new
TIntermAggregate
(
TypeToConstructorOperator
(
returnType
)
)
;
constructorAggrigate
-
>
setType
(
returnType
)
;
size_t
arraySize
=
returnType
.
getArraySize
(
)
;
for
(
size_t
arrayIdx
=
0
;
arrayIdx
<
arraySize
;
arrayIdx
+
+
)
{
TType
arrayElementType
(
returnType
)
;
arrayElementType
.
clearArrayness
(
)
;
constructorAggrigate
-
>
getSequence
(
)
-
>
push_back
(
GenerateTypeConstructor
(
arrayElementType
)
)
;
}
return
constructorAggrigate
;
}
bool
visitAggregate
(
Visit
TIntermAggregate
*
node
)
override
{
TType
returnType
;
if
(
IsFunctionWithoutReturnStatement
(
node
&
returnType
)
)
{
TIntermBranch
*
branch
=
new
TIntermBranch
(
EOpReturn
GenerateTypeConstructor
(
returnType
)
)
;
TIntermAggregate
*
lastNode
=
node
-
>
getSequence
(
)
-
>
back
(
)
-
>
getAsAggregate
(
)
;
lastNode
-
>
getSequence
(
)
-
>
push_back
(
branch
)
;
return
false
;
}
return
true
;
}
}
;
}
void
AddDefaultReturnStatements
(
TIntermNode
*
node
)
{
AddDefaultReturnStatementsTraverser
:
:
Apply
(
node
)
;
}
}
