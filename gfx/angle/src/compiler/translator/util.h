#
ifndef
COMPILER_TRANSLATOR_UTIL_H_
#
define
COMPILER_TRANSLATOR_UTIL_H_
#
include
<
stack
>
#
include
"
angle_gl
.
h
"
#
include
<
GLSLANG
/
ShaderLang
.
h
>
#
include
"
compiler
/
translator
/
Types
.
h
"
bool
strtof_clamp
(
const
std
:
:
string
&
str
float
*
value
)
;
bool
atoi_clamp
(
const
char
*
str
int
*
value
)
;
class
TSymbolTable
;
namespace
sh
{
GLenum
GLVariableType
(
const
TType
&
type
)
;
GLenum
GLVariablePrecision
(
const
TType
&
type
)
;
bool
IsVaryingIn
(
TQualifier
qualifier
)
;
bool
IsVaryingOut
(
TQualifier
qualifier
)
;
bool
IsVarying
(
TQualifier
qualifier
)
;
InterpolationType
GetInterpolationType
(
TQualifier
qualifier
)
;
TString
ArrayString
(
const
TType
&
type
)
;
class
GetVariableTraverser
:
angle
:
:
NonCopyable
{
public
:
GetVariableTraverser
(
const
TSymbolTable
&
symbolTable
)
;
virtual
~
GetVariableTraverser
(
)
{
}
template
<
typename
VarT
>
void
traverse
(
const
TType
&
type
const
TString
&
name
std
:
:
vector
<
VarT
>
*
output
)
;
protected
:
virtual
void
visitVariable
(
ShaderVariable
*
newVar
)
{
}
private
:
template
<
typename
VarT
>
void
setTypeSpecificInfo
(
const
TType
&
type
const
TString
&
name
VarT
*
variable
)
{
}
const
TSymbolTable
&
mSymbolTable
;
}
;
}
#
endif
