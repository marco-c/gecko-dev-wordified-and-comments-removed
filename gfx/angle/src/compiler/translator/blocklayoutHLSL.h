#
ifndef
COMMON_BLOCKLAYOUTHLSL_H_
#
define
COMMON_BLOCKLAYOUTHLSL_H_
#
include
<
cstddef
>
#
include
<
vector
>
#
include
"
angle_gl
.
h
"
#
include
"
blocklayout
.
h
"
#
include
<
GLSLANG
/
ShaderLang
.
h
>
namespace
sh
{
class
HLSLBlockEncoder
:
public
BlockLayoutEncoder
{
public
:
enum
HLSLBlockEncoderStrategy
{
ENCODE_PACKED
ENCODE_LOOSE
}
;
HLSLBlockEncoder
(
HLSLBlockEncoderStrategy
strategy
bool
transposeMatrices
)
;
virtual
void
enterAggregateType
(
)
;
virtual
void
exitAggregateType
(
)
;
void
skipRegisters
(
unsigned
int
numRegisters
)
;
bool
isPacked
(
)
const
{
return
mEncoderStrategy
=
=
ENCODE_PACKED
;
}
static
HLSLBlockEncoderStrategy
GetStrategyFor
(
ShShaderOutput
outputType
)
;
protected
:
virtual
void
getBlockLayoutInfo
(
GLenum
type
unsigned
int
arraySize
bool
isRowMajorMatrix
int
*
arrayStrideOut
int
*
matrixStrideOut
)
;
virtual
void
advanceOffset
(
GLenum
type
unsigned
int
arraySize
bool
isRowMajorMatrix
int
arrayStride
int
matrixStride
)
;
HLSLBlockEncoderStrategy
mEncoderStrategy
;
bool
mTransposeMatrices
;
}
;
unsigned
int
HLSLVariableRegisterCount
(
const
Uniform
&
variable
ShShaderOutput
outputType
)
;
}
#
endif
