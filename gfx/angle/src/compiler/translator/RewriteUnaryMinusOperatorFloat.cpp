#
include
"
compiler
/
translator
/
RewriteUnaryMinusOperatorFloat
.
h
"
#
include
"
compiler
/
translator
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
class
Traverser
:
public
TIntermTraverser
{
public
:
static
void
Apply
(
TIntermNode
*
root
)
;
private
:
Traverser
(
)
;
bool
visitUnary
(
Visit
visit
TIntermUnary
*
node
)
override
;
void
nextIteration
(
)
;
bool
mFound
=
false
;
}
;
void
Traverser
:
:
Apply
(
TIntermNode
*
root
)
{
Traverser
traverser
;
do
{
traverser
.
nextIteration
(
)
;
root
-
>
traverse
(
&
traverser
)
;
if
(
traverser
.
mFound
)
{
traverser
.
updateTree
(
)
;
}
}
while
(
traverser
.
mFound
)
;
}
Traverser
:
:
Traverser
(
)
:
TIntermTraverser
(
true
false
false
)
{
}
void
Traverser
:
:
nextIteration
(
)
{
mFound
=
false
;
}
bool
Traverser
:
:
visitUnary
(
Visit
visit
TIntermUnary
*
node
)
{
if
(
mFound
)
{
return
false
;
}
if
(
node
-
>
getOp
(
)
!
=
EOpNegative
)
{
return
true
;
}
TIntermTyped
*
fValue
=
node
-
>
getOperand
(
)
;
if
(
!
fValue
-
>
getType
(
)
.
isScalarFloat
(
)
)
{
return
true
;
}
TIntermTyped
*
zero
=
CreateZeroNode
(
fValue
-
>
getType
(
)
)
;
zero
-
>
setLine
(
fValue
-
>
getLine
(
)
)
;
TIntermBinary
*
sub
=
new
TIntermBinary
(
EOpSub
zero
fValue
)
;
sub
-
>
setLine
(
fValue
-
>
getLine
(
)
)
;
queueReplacement
(
sub
OriginalNode
:
:
IS_DROPPED
)
;
mFound
=
true
;
return
false
;
}
}
void
RewriteUnaryMinusOperatorFloat
(
TIntermNode
*
root
)
{
Traverser
:
:
Apply
(
root
)
;
}
}
