#
include
"
compiler
/
translator
/
DeferGlobalInitializers
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
namespace
sh
{
namespace
{
void
SetInternalFunctionName
(
TFunctionSymbolInfo
*
functionInfo
const
char
*
name
)
{
TString
nameStr
(
name
)
;
nameStr
=
TFunction
:
:
mangleName
(
nameStr
)
;
TName
nameObj
(
nameStr
)
;
nameObj
.
setInternal
(
true
)
;
functionInfo
-
>
setNameObj
(
nameObj
)
;
}
TIntermAggregate
*
CreateFunctionPrototypeNode
(
const
char
*
name
const
int
functionId
)
{
TIntermAggregate
*
functionNode
=
new
TIntermAggregate
(
EOpPrototype
)
;
SetInternalFunctionName
(
functionNode
-
>
getFunctionSymbolInfo
(
)
name
)
;
TType
returnType
(
EbtVoid
)
;
functionNode
-
>
setType
(
returnType
)
;
functionNode
-
>
getFunctionSymbolInfo
(
)
-
>
setId
(
functionId
)
;
return
functionNode
;
}
TIntermFunctionDefinition
*
CreateFunctionDefinitionNode
(
const
char
*
name
TIntermBlock
*
functionBody
const
int
functionId
)
{
TType
returnType
(
EbtVoid
)
;
TIntermAggregate
*
paramsNode
=
new
TIntermAggregate
(
EOpParameters
)
;
TIntermFunctionDefinition
*
functionNode
=
new
TIntermFunctionDefinition
(
returnType
paramsNode
functionBody
)
;
SetInternalFunctionName
(
functionNode
-
>
getFunctionSymbolInfo
(
)
name
)
;
functionNode
-
>
getFunctionSymbolInfo
(
)
-
>
setId
(
functionId
)
;
return
functionNode
;
}
TIntermAggregate
*
CreateFunctionCallNode
(
const
char
*
name
const
int
functionId
)
{
TIntermAggregate
*
functionNode
=
new
TIntermAggregate
(
EOpFunctionCall
)
;
functionNode
-
>
setUserDefined
(
)
;
SetInternalFunctionName
(
functionNode
-
>
getFunctionSymbolInfo
(
)
name
)
;
TType
returnType
(
EbtVoid
)
;
functionNode
-
>
setType
(
returnType
)
;
functionNode
-
>
getFunctionSymbolInfo
(
)
-
>
setId
(
functionId
)
;
return
functionNode
;
}
class
DeferGlobalInitializersTraverser
:
public
TIntermTraverser
{
public
:
DeferGlobalInitializersTraverser
(
)
;
bool
visitBinary
(
Visit
visit
TIntermBinary
*
node
)
override
;
void
insertInitFunction
(
TIntermBlock
*
root
)
;
private
:
TIntermSequence
mDeferredInitializers
;
}
;
DeferGlobalInitializersTraverser
:
:
DeferGlobalInitializersTraverser
(
)
:
TIntermTraverser
(
true
false
false
)
{
}
bool
DeferGlobalInitializersTraverser
:
:
visitBinary
(
Visit
visit
TIntermBinary
*
node
)
{
if
(
node
-
>
getOp
(
)
=
=
EOpInitialize
)
{
TIntermSymbol
*
symbolNode
=
node
-
>
getLeft
(
)
-
>
getAsSymbolNode
(
)
;
ASSERT
(
symbolNode
)
;
TIntermTyped
*
expression
=
node
-
>
getRight
(
)
;
if
(
mInGlobalScope
&
&
(
expression
-
>
getQualifier
(
)
!
=
EvqConst
|
|
(
expression
-
>
getAsConstantUnion
(
)
=
=
nullptr
&
&
!
expression
-
>
isConstructorWithOnlyConstantUnionParameters
(
)
)
)
)
{
TIntermBinary
*
deferredInit
=
new
TIntermBinary
(
EOpAssign
symbolNode
-
>
deepCopy
(
)
node
-
>
getRight
(
)
)
;
mDeferredInitializers
.
push_back
(
deferredInit
)
;
ASSERT
(
symbolNode
-
>
getQualifier
(
)
=
=
EvqConst
|
|
symbolNode
-
>
getQualifier
(
)
=
=
EvqGlobal
)
;
if
(
symbolNode
-
>
getQualifier
(
)
=
=
EvqConst
)
{
auto
*
siblings
=
getParentNode
(
)
-
>
getAsDeclarationNode
(
)
-
>
getSequence
(
)
;
for
(
TIntermNode
*
siblingNode
:
*
siblings
)
{
TIntermBinary
*
siblingBinary
=
siblingNode
-
>
getAsBinaryNode
(
)
;
if
(
siblingBinary
)
{
ASSERT
(
siblingBinary
-
>
getOp
(
)
=
=
EOpInitialize
)
;
siblingBinary
-
>
getLeft
(
)
-
>
getTypePointer
(
)
-
>
setQualifier
(
EvqGlobal
)
;
}
siblingNode
-
>
getAsTyped
(
)
-
>
getTypePointer
(
)
-
>
setQualifier
(
EvqGlobal
)
;
}
ASSERT
(
symbolNode
-
>
getQualifier
(
)
=
=
EvqGlobal
)
;
}
queueReplacement
(
node
symbolNode
OriginalNode
:
:
IS_DROPPED
)
;
}
}
return
false
;
}
void
DeferGlobalInitializersTraverser
:
:
insertInitFunction
(
TIntermBlock
*
root
)
{
if
(
mDeferredInitializers
.
empty
(
)
)
{
return
;
}
const
int
initFunctionId
=
TSymbolTable
:
:
nextUniqueId
(
)
;
const
char
*
functionName
=
"
initializeDeferredGlobals
"
;
TIntermAggregate
*
functionPrototypeNode
=
CreateFunctionPrototypeNode
(
functionName
initFunctionId
)
;
root
-
>
getSequence
(
)
-
>
insert
(
root
-
>
getSequence
(
)
-
>
begin
(
)
functionPrototypeNode
)
;
TIntermBlock
*
functionBodyNode
=
new
TIntermBlock
(
)
;
TIntermSequence
*
functionBody
=
functionBodyNode
-
>
getSequence
(
)
;
for
(
const
auto
&
deferredInit
:
mDeferredInitializers
)
{
functionBody
-
>
push_back
(
deferredInit
)
;
}
TIntermFunctionDefinition
*
functionDefinition
=
CreateFunctionDefinitionNode
(
functionName
functionBodyNode
initFunctionId
)
;
root
-
>
getSequence
(
)
-
>
push_back
(
functionDefinition
)
;
for
(
TIntermNode
*
node
:
*
root
-
>
getSequence
(
)
)
{
TIntermFunctionDefinition
*
nodeFunction
=
node
-
>
getAsFunctionDefinition
(
)
;
if
(
nodeFunction
!
=
nullptr
&
&
nodeFunction
-
>
getFunctionSymbolInfo
(
)
-
>
isMain
(
)
)
{
TIntermAggregate
*
functionCallNode
=
CreateFunctionCallNode
(
functionName
initFunctionId
)
;
TIntermBlock
*
mainBody
=
nodeFunction
-
>
getBody
(
)
;
ASSERT
(
mainBody
!
=
nullptr
)
;
mainBody
-
>
getSequence
(
)
-
>
insert
(
mainBody
-
>
getSequence
(
)
-
>
begin
(
)
functionCallNode
)
;
}
}
}
}
void
DeferGlobalInitializers
(
TIntermBlock
*
root
)
{
DeferGlobalInitializersTraverser
traverser
;
root
-
>
traverse
(
&
traverser
)
;
traverser
.
updateTree
(
)
;
traverser
.
insertInitFunction
(
root
)
;
}
}
