#
include
"
compiler
/
translator
/
DeferGlobalInitializers
.
h
"
#
include
"
compiler
/
translator
/
FindMain
.
h
"
#
include
"
compiler
/
translator
/
InitializeVariables
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
#
include
"
compiler
/
translator
/
IntermNode_util
.
h
"
#
include
"
compiler
/
translator
/
SymbolTable
.
h
"
namespace
sh
{
namespace
{
void
GetDeferredInitializers
(
TIntermDeclaration
*
declaration
bool
initializeUninitializedGlobals
TIntermSequence
*
deferredInitializersOut
)
{
for
(
size_t
i
=
0
;
i
<
declaration
-
>
getSequence
(
)
-
>
size
(
)
;
+
+
i
)
{
TIntermNode
*
declarator
=
declaration
-
>
getSequence
(
)
-
>
at
(
i
)
;
TIntermBinary
*
init
=
declarator
-
>
getAsBinaryNode
(
)
;
if
(
init
)
{
TIntermSymbol
*
symbolNode
=
init
-
>
getLeft
(
)
-
>
getAsSymbolNode
(
)
;
ASSERT
(
symbolNode
)
;
TIntermTyped
*
expression
=
init
-
>
getRight
(
)
;
if
(
(
expression
-
>
getQualifier
(
)
!
=
EvqConst
|
|
(
expression
-
>
getAsConstantUnion
(
)
=
=
nullptr
&
&
!
expression
-
>
isConstructorWithOnlyConstantUnionParameters
(
)
)
)
)
{
TIntermBinary
*
deferredInit
=
new
TIntermBinary
(
EOpAssign
symbolNode
-
>
deepCopy
(
)
init
-
>
getRight
(
)
)
;
deferredInitializersOut
-
>
push_back
(
deferredInit
)
;
ASSERT
(
symbolNode
-
>
getQualifier
(
)
=
=
EvqConst
|
|
symbolNode
-
>
getQualifier
(
)
=
=
EvqGlobal
)
;
if
(
symbolNode
-
>
getQualifier
(
)
=
=
EvqConst
)
{
auto
*
siblings
=
declaration
-
>
getSequence
(
)
;
for
(
TIntermNode
*
siblingNode
:
*
siblings
)
{
TIntermBinary
*
siblingBinary
=
siblingNode
-
>
getAsBinaryNode
(
)
;
if
(
siblingBinary
)
{
ASSERT
(
siblingBinary
-
>
getOp
(
)
=
=
EOpInitialize
)
;
siblingBinary
-
>
getLeft
(
)
-
>
getTypePointer
(
)
-
>
setQualifier
(
EvqGlobal
)
;
}
siblingNode
-
>
getAsTyped
(
)
-
>
getTypePointer
(
)
-
>
setQualifier
(
EvqGlobal
)
;
}
ASSERT
(
symbolNode
-
>
getQualifier
(
)
=
=
EvqGlobal
)
;
}
declaration
-
>
replaceChildNode
(
init
symbolNode
)
;
}
}
else
if
(
initializeUninitializedGlobals
)
{
TIntermSymbol
*
symbolNode
=
declarator
-
>
getAsSymbolNode
(
)
;
ASSERT
(
symbolNode
)
;
if
(
symbolNode
-
>
getName
(
)
.
isInternal
(
)
)
continue
;
if
(
symbolNode
-
>
getQualifier
(
)
=
=
EvqGlobal
&
&
symbolNode
-
>
getSymbol
(
)
!
=
"
"
)
{
TIntermSequence
*
initCode
=
CreateInitCode
(
symbolNode
)
;
deferredInitializersOut
-
>
insert
(
deferredInitializersOut
-
>
end
(
)
initCode
-
>
begin
(
)
initCode
-
>
end
(
)
)
;
}
}
}
}
void
InsertInitCallToMain
(
TIntermBlock
*
root
TIntermSequence
*
deferredInitializers
TSymbolTable
*
symbolTable
)
{
TIntermBlock
*
initGlobalsBlock
=
new
TIntermBlock
(
)
;
initGlobalsBlock
-
>
getSequence
(
)
-
>
swap
(
*
deferredInitializers
)
;
TSymbolUniqueId
initGlobalsFunctionId
(
symbolTable
)
;
const
char
*
kInitGlobalsFunctionName
=
"
initGlobals
"
;
TIntermFunctionPrototype
*
initGlobalsFunctionPrototype
=
CreateInternalFunctionPrototypeNode
(
TType
(
)
kInitGlobalsFunctionName
initGlobalsFunctionId
)
;
root
-
>
getSequence
(
)
-
>
insert
(
root
-
>
getSequence
(
)
-
>
begin
(
)
initGlobalsFunctionPrototype
)
;
TIntermFunctionDefinition
*
initGlobalsFunctionDefinition
=
CreateInternalFunctionDefinitionNode
(
TType
(
)
kInitGlobalsFunctionName
initGlobalsBlock
initGlobalsFunctionId
)
;
root
-
>
appendStatement
(
initGlobalsFunctionDefinition
)
;
TIntermAggregate
*
initGlobalsCall
=
CreateInternalFunctionCallNode
(
TType
(
)
kInitGlobalsFunctionName
initGlobalsFunctionId
new
TIntermSequence
(
)
)
;
TIntermBlock
*
mainBody
=
FindMainBody
(
root
)
;
mainBody
-
>
getSequence
(
)
-
>
insert
(
mainBody
-
>
getSequence
(
)
-
>
begin
(
)
initGlobalsCall
)
;
}
}
void
DeferGlobalInitializers
(
TIntermBlock
*
root
bool
initializeUninitializedGlobals
TSymbolTable
*
symbolTable
)
{
TIntermSequence
*
deferredInitializers
=
new
TIntermSequence
(
)
;
for
(
TIntermNode
*
statement
:
*
root
-
>
getSequence
(
)
)
{
TIntermDeclaration
*
declaration
=
statement
-
>
getAsDeclarationNode
(
)
;
if
(
declaration
)
{
GetDeferredInitializers
(
declaration
initializeUninitializedGlobals
deferredInitializers
)
;
}
}
if
(
!
deferredInitializers
-
>
empty
(
)
)
{
InsertInitCallToMain
(
root
deferredInitializers
symbolTable
)
;
}
}
}
