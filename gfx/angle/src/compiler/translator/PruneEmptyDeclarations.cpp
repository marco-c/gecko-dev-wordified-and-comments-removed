#
include
"
compiler
/
translator
/
PruneEmptyDeclarations
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
namespace
{
class
PruneEmptyDeclarationsTraverser
:
private
TIntermTraverser
{
public
:
static
void
apply
(
TIntermNode
*
root
)
;
private
:
PruneEmptyDeclarationsTraverser
(
)
;
bool
visitAggregate
(
Visit
TIntermAggregate
*
node
)
override
;
}
;
void
PruneEmptyDeclarationsTraverser
:
:
apply
(
TIntermNode
*
root
)
{
PruneEmptyDeclarationsTraverser
prune
;
root
-
>
traverse
(
&
prune
)
;
prune
.
updateTree
(
)
;
}
PruneEmptyDeclarationsTraverser
:
:
PruneEmptyDeclarationsTraverser
(
)
:
TIntermTraverser
(
true
false
false
)
{
}
bool
PruneEmptyDeclarationsTraverser
:
:
visitAggregate
(
Visit
TIntermAggregate
*
node
)
{
if
(
node
-
>
getOp
(
)
=
=
EOpDeclaration
)
{
TIntermSequence
*
sequence
=
node
-
>
getSequence
(
)
;
if
(
sequence
-
>
size
(
)
>
=
1
)
{
TIntermSymbol
*
sym
=
sequence
-
>
front
(
)
-
>
getAsSymbolNode
(
)
;
if
(
sym
!
=
nullptr
&
&
sym
-
>
getSymbol
(
)
=
=
"
"
&
&
!
sym
-
>
isInterfaceBlock
(
)
)
{
if
(
sequence
-
>
size
(
)
>
1
)
{
TIntermSequence
emptyReplacement
;
mMultiReplacements
.
push_back
(
NodeReplaceWithMultipleEntry
(
node
sym
emptyReplacement
)
)
;
}
else
if
(
sym
-
>
getBasicType
(
)
!
=
EbtStruct
)
{
TIntermSequence
emptyReplacement
;
TIntermAggregate
*
parentAgg
=
getParentNode
(
)
-
>
getAsAggregate
(
)
;
ASSERT
(
parentAgg
!
=
nullptr
)
;
mMultiReplacements
.
push_back
(
NodeReplaceWithMultipleEntry
(
parentAgg
node
emptyReplacement
)
)
;
}
else
if
(
sym
-
>
getType
(
)
.
getQualifier
(
)
!
=
EvqGlobal
&
&
sym
-
>
getType
(
)
.
getQualifier
(
)
!
=
EvqTemporary
)
{
if
(
mInGlobalScope
)
{
sym
-
>
getTypePointer
(
)
-
>
setQualifier
(
EvqGlobal
)
;
}
else
{
sym
-
>
getTypePointer
(
)
-
>
setQualifier
(
EvqTemporary
)
;
}
}
}
}
return
false
;
}
return
true
;
}
}
void
PruneEmptyDeclarations
(
TIntermNode
*
root
)
{
PruneEmptyDeclarationsTraverser
:
:
apply
(
root
)
;
}
