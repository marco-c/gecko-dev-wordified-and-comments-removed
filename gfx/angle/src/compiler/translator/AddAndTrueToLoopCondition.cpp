#
include
"
compiler
/
translator
/
AddAndTrueToLoopCondition
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
namespace
sh
{
namespace
{
class
AddAndTrueToLoopConditionTraverser
:
public
TIntermTraverser
{
public
:
AddAndTrueToLoopConditionTraverser
(
)
:
TIntermTraverser
(
true
false
false
)
{
}
bool
visitLoop
(
Visit
TIntermLoop
*
loop
)
override
{
if
(
loop
-
>
getType
(
)
!
=
ELoopFor
&
&
loop
-
>
getType
(
)
!
=
ELoopWhile
)
{
return
true
;
}
if
(
loop
-
>
getCondition
(
)
=
=
nullptr
)
{
return
true
;
}
TConstantUnion
*
trueConstant
=
new
TConstantUnion
(
)
;
trueConstant
-
>
setBConst
(
true
)
;
TIntermTyped
*
trueValue
=
new
TIntermConstantUnion
(
trueConstant
TType
(
EbtBool
)
)
;
TIntermBinary
*
andOp
=
new
TIntermBinary
(
EOpLogicalAnd
loop
-
>
getCondition
(
)
trueValue
)
;
loop
-
>
setCondition
(
andOp
)
;
return
true
;
}
}
;
}
void
AddAndTrueToLoopCondition
(
TIntermNode
*
root
)
{
AddAndTrueToLoopConditionTraverser
traverser
;
root
-
>
traverse
(
&
traverser
)
;
}
}
