#
include
"
compiler
/
translator
/
UnfoldShortCircuitToIf
.
h
"
#
include
"
compiler
/
translator
/
IntermNodePatternMatcher
.
h
"
#
include
"
compiler
/
translator
/
IntermTraverse
.
h
"
namespace
sh
{
namespace
{
class
UnfoldShortCircuitTraverser
:
public
TIntermTraverser
{
public
:
UnfoldShortCircuitTraverser
(
TSymbolTable
*
symbolTable
)
;
bool
visitBinary
(
Visit
visit
TIntermBinary
*
node
)
override
;
bool
visitTernary
(
Visit
visit
TIntermTernary
*
node
)
override
;
void
nextIteration
(
)
;
bool
foundShortCircuit
(
)
const
{
return
mFoundShortCircuit
;
}
protected
:
bool
mFoundShortCircuit
;
IntermNodePatternMatcher
mPatternToUnfoldMatcher
;
}
;
UnfoldShortCircuitTraverser
:
:
UnfoldShortCircuitTraverser
(
TSymbolTable
*
symbolTable
)
:
TIntermTraverser
(
true
false
true
symbolTable
)
mFoundShortCircuit
(
false
)
mPatternToUnfoldMatcher
(
IntermNodePatternMatcher
:
:
kUnfoldedShortCircuitExpression
)
{
}
bool
UnfoldShortCircuitTraverser
:
:
visitBinary
(
Visit
visit
TIntermBinary
*
node
)
{
if
(
mFoundShortCircuit
)
return
false
;
if
(
visit
!
=
PreVisit
)
return
true
;
if
(
!
mPatternToUnfoldMatcher
.
match
(
node
getParentNode
(
)
)
)
return
true
;
ASSERT
(
node
-
>
getRight
(
)
-
>
hasSideEffects
(
)
)
;
mFoundShortCircuit
=
true
;
switch
(
node
-
>
getOp
(
)
)
{
case
EOpLogicalOr
:
{
TIntermSequence
insertions
;
TType
boolType
(
EbtBool
EbpUndefined
EvqTemporary
)
;
ASSERT
(
node
-
>
getLeft
(
)
-
>
getType
(
)
=
=
boolType
)
;
insertions
.
push_back
(
createTempInitDeclaration
(
node
-
>
getLeft
(
)
)
)
;
TIntermBlock
*
assignRightBlock
=
new
TIntermBlock
(
)
;
ASSERT
(
node
-
>
getRight
(
)
-
>
getType
(
)
=
=
boolType
)
;
assignRightBlock
-
>
getSequence
(
)
-
>
push_back
(
createTempAssignment
(
node
-
>
getRight
(
)
)
)
;
TIntermUnary
*
notTempSymbol
=
new
TIntermUnary
(
EOpLogicalNot
createTempSymbol
(
boolType
)
)
;
TIntermIfElse
*
ifNode
=
new
TIntermIfElse
(
notTempSymbol
assignRightBlock
nullptr
)
;
insertions
.
push_back
(
ifNode
)
;
insertStatementsInParentBlock
(
insertions
)
;
queueReplacement
(
createTempSymbol
(
boolType
)
OriginalNode
:
:
IS_DROPPED
)
;
return
false
;
}
case
EOpLogicalAnd
:
{
TIntermSequence
insertions
;
TType
boolType
(
EbtBool
EbpUndefined
EvqTemporary
)
;
ASSERT
(
node
-
>
getLeft
(
)
-
>
getType
(
)
=
=
boolType
)
;
insertions
.
push_back
(
createTempInitDeclaration
(
node
-
>
getLeft
(
)
)
)
;
TIntermBlock
*
assignRightBlock
=
new
TIntermBlock
(
)
;
ASSERT
(
node
-
>
getRight
(
)
-
>
getType
(
)
=
=
boolType
)
;
assignRightBlock
-
>
getSequence
(
)
-
>
push_back
(
createTempAssignment
(
node
-
>
getRight
(
)
)
)
;
TIntermIfElse
*
ifNode
=
new
TIntermIfElse
(
createTempSymbol
(
boolType
)
assignRightBlock
nullptr
)
;
insertions
.
push_back
(
ifNode
)
;
insertStatementsInParentBlock
(
insertions
)
;
queueReplacement
(
createTempSymbol
(
boolType
)
OriginalNode
:
:
IS_DROPPED
)
;
return
false
;
}
default
:
UNREACHABLE
(
)
;
return
true
;
}
}
bool
UnfoldShortCircuitTraverser
:
:
visitTernary
(
Visit
visit
TIntermTernary
*
node
)
{
if
(
mFoundShortCircuit
)
return
false
;
if
(
visit
!
=
PreVisit
)
return
true
;
if
(
!
mPatternToUnfoldMatcher
.
match
(
node
)
)
return
true
;
mFoundShortCircuit
=
true
;
TIntermSequence
insertions
;
TIntermDeclaration
*
tempDeclaration
=
createTempDeclaration
(
node
-
>
getType
(
)
)
;
insertions
.
push_back
(
tempDeclaration
)
;
TIntermBlock
*
trueBlock
=
new
TIntermBlock
(
)
;
TIntermBinary
*
trueAssignment
=
createTempAssignment
(
node
-
>
getTrueExpression
(
)
)
;
trueBlock
-
>
getSequence
(
)
-
>
push_back
(
trueAssignment
)
;
TIntermBlock
*
falseBlock
=
new
TIntermBlock
(
)
;
TIntermBinary
*
falseAssignment
=
createTempAssignment
(
node
-
>
getFalseExpression
(
)
)
;
falseBlock
-
>
getSequence
(
)
-
>
push_back
(
falseAssignment
)
;
TIntermIfElse
*
ifNode
=
new
TIntermIfElse
(
node
-
>
getCondition
(
)
-
>
getAsTyped
(
)
trueBlock
falseBlock
)
;
insertions
.
push_back
(
ifNode
)
;
insertStatementsInParentBlock
(
insertions
)
;
TIntermSymbol
*
ternaryResult
=
createTempSymbol
(
node
-
>
getType
(
)
)
;
queueReplacement
(
ternaryResult
OriginalNode
:
:
IS_DROPPED
)
;
return
false
;
}
void
UnfoldShortCircuitTraverser
:
:
nextIteration
(
)
{
mFoundShortCircuit
=
false
;
nextTemporaryId
(
)
;
}
}
void
UnfoldShortCircuitToIf
(
TIntermNode
*
root
TSymbolTable
*
symbolTable
)
{
UnfoldShortCircuitTraverser
traverser
(
symbolTable
)
;
do
{
traverser
.
nextIteration
(
)
;
root
-
>
traverse
(
&
traverser
)
;
if
(
traverser
.
foundShortCircuit
(
)
)
traverser
.
updateTree
(
)
;
}
while
(
traverser
.
foundShortCircuit
(
)
)
;
}
}
