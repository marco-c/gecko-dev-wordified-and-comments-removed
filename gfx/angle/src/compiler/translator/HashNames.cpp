#
include
"
compiler
/
translator
/
HashNames
.
h
"
#
include
"
compiler
/
translator
/
IntermNode
.
h
"
namespace
sh
{
namespace
{
static
const
unsigned
int
kESSLMaxIdentifierLength
=
1024u
;
static
const
char
*
kHashedNamePrefix
=
"
webgl_
"
;
static
const
char
*
kUnhashedNamePrefix
=
"
_u
"
;
static
const
unsigned
int
kUnhashedNamePrefixLength
=
2u
;
TString
HashName
(
const
TString
&
name
ShHashFunction64
hashFunction
)
{
ASSERT
(
!
name
.
empty
(
)
)
;
ASSERT
(
hashFunction
)
;
khronos_uint64_t
number
=
(
*
hashFunction
)
(
name
.
c_str
(
)
name
.
length
(
)
)
;
TStringStream
stream
;
stream
<
<
kHashedNamePrefix
<
<
std
:
:
hex
<
<
number
;
TString
hashedName
=
stream
.
str
(
)
;
return
hashedName
;
}
}
TString
HashName
(
const
TName
&
name
ShHashFunction64
hashFunction
NameMap
*
nameMap
)
{
if
(
name
.
getString
(
)
.
empty
(
)
|
|
name
.
isInternal
(
)
)
{
return
name
.
getString
(
)
;
}
if
(
hashFunction
=
=
nullptr
)
{
if
(
name
.
getString
(
)
.
length
(
)
+
kUnhashedNamePrefixLength
>
kESSLMaxIdentifierLength
)
{
return
name
.
getString
(
)
;
}
return
kUnhashedNamePrefix
+
name
.
getString
(
)
;
}
if
(
nameMap
)
{
NameMap
:
:
const_iterator
it
=
nameMap
-
>
find
(
name
.
getString
(
)
.
c_str
(
)
)
;
if
(
it
!
=
nameMap
-
>
end
(
)
)
return
it
-
>
second
.
c_str
(
)
;
}
TString
hashedName
=
HashName
(
name
.
getString
(
)
hashFunction
)
;
if
(
nameMap
)
{
(
*
nameMap
)
[
name
.
getString
(
)
.
c_str
(
)
]
=
hashedName
.
c_str
(
)
;
}
return
hashedName
;
}
}
