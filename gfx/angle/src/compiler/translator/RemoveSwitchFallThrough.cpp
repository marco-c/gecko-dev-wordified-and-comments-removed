#
include
"
compiler
/
translator
/
RemoveSwitchFallThrough
.
h
"
TIntermAggregate
*
RemoveSwitchFallThrough
:
:
removeFallThrough
(
TIntermAggregate
*
statementList
)
{
RemoveSwitchFallThrough
rm
(
statementList
)
;
ASSERT
(
statementList
)
;
statementList
-
>
traverse
(
&
rm
)
;
bool
lastStatementWasBreak
=
rm
.
mLastStatementWasBreak
;
rm
.
mLastStatementWasBreak
=
true
;
rm
.
handlePreviousCase
(
)
;
if
(
!
lastStatementWasBreak
)
{
TIntermBranch
*
finalBreak
=
new
TIntermBranch
(
EOpBreak
nullptr
)
;
rm
.
mStatementListOut
-
>
getSequence
(
)
-
>
push_back
(
finalBreak
)
;
}
return
rm
.
mStatementListOut
;
}
RemoveSwitchFallThrough
:
:
RemoveSwitchFallThrough
(
TIntermAggregate
*
statementList
)
:
TIntermTraverser
(
true
false
false
)
mStatementList
(
statementList
)
mLastStatementWasBreak
(
false
)
mPreviousCase
(
nullptr
)
{
mStatementListOut
=
new
TIntermAggregate
(
)
;
mStatementListOut
-
>
setOp
(
EOpSequence
)
;
}
void
RemoveSwitchFallThrough
:
:
visitSymbol
(
TIntermSymbol
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
}
void
RemoveSwitchFallThrough
:
:
visitConstantUnion
(
TIntermConstantUnion
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
}
bool
RemoveSwitchFallThrough
:
:
visitBinary
(
Visit
TIntermBinary
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThrough
:
:
visitUnary
(
Visit
TIntermUnary
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThrough
:
:
visitTernary
(
Visit
TIntermTernary
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThrough
:
:
visitSelection
(
Visit
TIntermSelection
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThrough
:
:
visitSwitch
(
Visit
TIntermSwitch
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
void
RemoveSwitchFallThrough
:
:
outputSequence
(
TIntermSequence
*
sequence
size_t
startIndex
)
{
for
(
size_t
i
=
startIndex
;
i
<
sequence
-
>
size
(
)
;
+
+
i
)
{
mStatementListOut
-
>
getSequence
(
)
-
>
push_back
(
sequence
-
>
at
(
i
)
)
;
}
}
void
RemoveSwitchFallThrough
:
:
handlePreviousCase
(
)
{
if
(
mPreviousCase
)
mCasesSharingBreak
.
push_back
(
mPreviousCase
)
;
if
(
mLastStatementWasBreak
)
{
bool
labelsWithNoStatements
=
true
;
for
(
size_t
i
=
0
;
i
<
mCasesSharingBreak
.
size
(
)
;
+
+
i
)
{
if
(
mCasesSharingBreak
.
at
(
i
)
-
>
getSequence
(
)
-
>
size
(
)
>
1
)
{
labelsWithNoStatements
=
false
;
}
if
(
labelsWithNoStatements
)
{
outputSequence
(
mCasesSharingBreak
.
at
(
i
)
-
>
getSequence
(
)
0
)
;
}
else
{
for
(
size_t
j
=
i
;
j
<
mCasesSharingBreak
.
size
(
)
;
+
+
j
)
{
size_t
startIndex
=
j
>
i
?
1
:
0
;
outputSequence
(
mCasesSharingBreak
.
at
(
j
)
-
>
getSequence
(
)
startIndex
)
;
}
}
}
mCasesSharingBreak
.
clear
(
)
;
}
mLastStatementWasBreak
=
false
;
mPreviousCase
=
nullptr
;
}
bool
RemoveSwitchFallThrough
:
:
visitCase
(
Visit
TIntermCase
*
node
)
{
handlePreviousCase
(
)
;
mPreviousCase
=
new
TIntermAggregate
(
)
;
mPreviousCase
-
>
setOp
(
EOpSequence
)
;
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
return
false
;
}
bool
RemoveSwitchFallThrough
:
:
visitAggregate
(
Visit
TIntermAggregate
*
node
)
{
if
(
node
!
=
mStatementList
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
return
true
;
}
bool
RemoveSwitchFallThrough
:
:
visitLoop
(
Visit
TIntermLoop
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
false
;
return
false
;
}
bool
RemoveSwitchFallThrough
:
:
visitBranch
(
Visit
TIntermBranch
*
node
)
{
mPreviousCase
-
>
getSequence
(
)
-
>
push_back
(
node
)
;
mLastStatementWasBreak
=
true
;
return
false
;
}
