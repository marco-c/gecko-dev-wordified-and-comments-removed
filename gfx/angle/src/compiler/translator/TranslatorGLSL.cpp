#
include
"
compiler
/
translator
/
TranslatorGLSL
.
h
"
#
include
"
angle_gl
.
h
"
#
include
"
compiler
/
translator
/
BuiltInFunctionEmulatorGLSL
.
h
"
#
include
"
compiler
/
translator
/
EmulatePrecision
.
h
"
#
include
"
compiler
/
translator
/
OutputGLSL
.
h
"
#
include
"
compiler
/
translator
/
VersionGLSL
.
h
"
TranslatorGLSL
:
:
TranslatorGLSL
(
sh
:
:
GLenum
type
ShShaderSpec
spec
ShShaderOutput
output
)
:
TCompiler
(
type
spec
output
)
{
}
void
TranslatorGLSL
:
:
initBuiltInFunctionEmulator
(
BuiltInFunctionEmulator
*
emu
int
compileOptions
)
{
if
(
compileOptions
&
SH_EMULATE_BUILT_IN_FUNCTIONS
)
{
InitBuiltInFunctionEmulatorForGLSLWorkarounds
(
emu
getShaderType
(
)
)
;
}
int
targetGLSLVersion
=
ShaderOutputTypeToGLSLVersion
(
getOutputType
(
)
)
;
InitBuiltInFunctionEmulatorForGLSLMissingFunctions
(
emu
getShaderType
(
)
targetGLSLVersion
)
;
}
void
TranslatorGLSL
:
:
translate
(
TIntermNode
*
root
int
)
{
TInfoSinkBase
&
sink
=
getInfoSink
(
)
.
obj
;
writeVersion
(
root
)
;
writePragma
(
)
;
writeExtensionBehavior
(
)
;
bool
precisionEmulation
=
getResources
(
)
.
WEBGL_debug_shader_precision
&
&
getPragma
(
)
.
debugShaderPrecision
;
if
(
precisionEmulation
)
{
EmulatePrecision
emulatePrecision
;
root
-
>
traverse
(
&
emulatePrecision
)
;
emulatePrecision
.
updateTree
(
)
;
emulatePrecision
.
writeEmulationHelpers
(
sink
getOutputType
(
)
)
;
}
if
(
!
getBuiltInFunctionEmulator
(
)
.
IsOutputEmpty
(
)
)
{
sink
<
<
"
/
/
BEGIN
:
Generated
code
for
built
-
in
function
emulation
\
n
\
n
"
;
sink
<
<
"
#
define
webgl_emu_precision
\
n
\
n
"
;
getBuiltInFunctionEmulator
(
)
.
OutputEmulatedFunctions
(
sink
)
;
sink
<
<
"
/
/
END
:
Generated
code
for
built
-
in
function
emulation
\
n
\
n
"
;
}
getArrayBoundsClamper
(
)
.
OutputClampingFunctionDefinition
(
sink
)
;
if
(
getShaderType
(
)
=
=
GL_FRAGMENT_SHADER
&
&
IsGLSL130OrNewer
(
getOutputType
(
)
)
)
{
bool
usesGLFragColor
=
false
;
bool
usesGLFragData
=
false
;
for
(
auto
outputVar
:
outputVariables
)
{
if
(
outputVar
.
name
=
=
"
gl_FragColor
"
)
{
usesGLFragColor
=
true
;
}
else
if
(
outputVar
.
name
=
=
"
gl_FragData
"
)
{
usesGLFragData
=
true
;
}
}
ASSERT
(
!
(
usesGLFragColor
&
&
usesGLFragData
)
)
;
if
(
usesGLFragColor
)
{
sink
<
<
"
out
vec4
webgl_FragColor
;
\
n
"
;
}
if
(
usesGLFragData
)
{
sink
<
<
"
out
vec4
webgl_FragData
[
gl_MaxDrawBuffers
]
;
\
n
"
;
}
}
TOutputGLSL
outputGLSL
(
sink
getArrayIndexClampingStrategy
(
)
getHashFunction
(
)
getNameMap
(
)
getSymbolTable
(
)
getShaderVersion
(
)
getOutputType
(
)
)
;
root
-
>
traverse
(
&
outputGLSL
)
;
}
void
TranslatorGLSL
:
:
writeVersion
(
TIntermNode
*
root
)
{
TVersionGLSL
versionGLSL
(
getShaderType
(
)
getPragma
(
)
getOutputType
(
)
)
;
root
-
>
traverse
(
&
versionGLSL
)
;
int
version
=
versionGLSL
.
getVersion
(
)
;
if
(
version
>
110
)
{
TInfoSinkBase
&
sink
=
getInfoSink
(
)
.
obj
;
sink
<
<
"
#
version
"
<
<
version
<
<
"
\
n
"
;
}
}
void
TranslatorGLSL
:
:
writeExtensionBehavior
(
)
{
TInfoSinkBase
&
sink
=
getInfoSink
(
)
.
obj
;
const
TExtensionBehavior
&
extBehavior
=
getExtensionBehavior
(
)
;
for
(
TExtensionBehavior
:
:
const_iterator
iter
=
extBehavior
.
begin
(
)
;
iter
!
=
extBehavior
.
end
(
)
;
+
+
iter
)
{
if
(
iter
-
>
second
=
=
EBhUndefined
)
continue
;
if
(
iter
-
>
first
=
=
"
GL_EXT_shader_texture_lod
"
)
{
sink
<
<
"
#
extension
GL_ARB_shader_texture_lod
:
"
<
<
getBehaviorString
(
iter
-
>
second
)
<
<
"
\
n
"
;
}
}
}
