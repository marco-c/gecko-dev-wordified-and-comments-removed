#
include
"
string_utils
.
h
"
#
include
<
gtest
/
gtest
.
h
>
using
namespace
angle
;
namespace
{
TEST
(
StringUtilsTest
SplitString_Basics
)
{
std
:
:
vector
<
std
:
:
string
>
r
;
r
=
SplitString
(
std
:
:
string
(
)
"
:
;
"
KEEP_WHITESPACE
SPLIT_WANT_ALL
)
;
EXPECT_TRUE
(
r
.
empty
(
)
)
;
r
=
SplitString
(
"
hello
world
"
"
"
KEEP_WHITESPACE
SPLIT_WANT_ALL
)
;
ASSERT_EQ
(
1u
r
.
size
(
)
)
;
EXPECT_EQ
(
"
hello
world
"
r
[
0
]
)
;
r
=
SplitString
(
"
:
:
;
;
"
"
:
;
"
KEEP_WHITESPACE
SPLIT_WANT_ALL
)
;
ASSERT_EQ
(
7u
r
.
size
(
)
)
;
for
(
auto
str
:
r
)
ASSERT_TRUE
(
str
.
empty
(
)
)
;
r
=
SplitString
(
"
red
green
;
blue
:
"
"
:
;
"
TRIM_WHITESPACE
SPLIT_WANT_NONEMPTY
)
;
ASSERT_EQ
(
3u
r
.
size
(
)
)
;
EXPECT_EQ
(
"
red
"
r
[
0
]
)
;
EXPECT_EQ
(
"
green
"
r
[
1
]
)
;
EXPECT_EQ
(
"
blue
"
r
[
2
]
)
;
r
=
SplitString
(
"
red
green
\
tblue
\
n
"
"
\
t
\
n
"
TRIM_WHITESPACE
SPLIT_WANT_NONEMPTY
)
;
ASSERT_EQ
(
3u
r
.
size
(
)
)
;
EXPECT_EQ
(
"
red
"
r
[
0
]
)
;
EXPECT_EQ
(
"
green
"
r
[
1
]
)
;
EXPECT_EQ
(
"
blue
"
r
[
2
]
)
;
r
=
SplitString
(
"
red
"
"
"
TRIM_WHITESPACE
SPLIT_WANT_ALL
)
;
ASSERT_EQ
(
3u
r
.
size
(
)
)
;
EXPECT_EQ
(
"
"
r
[
0
]
)
;
EXPECT_EQ
(
"
red
"
r
[
1
]
)
;
EXPECT_EQ
(
"
"
r
[
2
]
)
;
}
TEST
(
StringUtilsTest
SplitString_WhitespaceAndResultType
)
{
std
:
:
vector
<
std
:
:
string
>
r
;
r
=
SplitString
(
std
:
:
string
(
)
"
"
KEEP_WHITESPACE
SPLIT_WANT_ALL
)
;
EXPECT_TRUE
(
r
.
empty
(
)
)
;
r
=
SplitString
(
std
:
:
string
(
)
"
"
KEEP_WHITESPACE
SPLIT_WANT_NONEMPTY
)
;
EXPECT_TRUE
(
r
.
empty
(
)
)
;
r
=
SplitString
(
"
"
"
"
TRIM_WHITESPACE
SPLIT_WANT_ALL
)
;
ASSERT_EQ
(
1u
r
.
size
(
)
)
;
EXPECT_EQ
(
"
"
r
[
0
]
)
;
r
=
SplitString
(
"
"
"
"
TRIM_WHITESPACE
SPLIT_WANT_NONEMPTY
)
;
EXPECT_TRUE
(
r
.
empty
(
)
)
;
r
=
SplitString
(
"
"
"
"
KEEP_WHITESPACE
SPLIT_WANT_ALL
)
;
ASSERT_EQ
(
3u
r
.
size
(
)
)
;
EXPECT_EQ
(
"
"
r
[
0
]
)
;
EXPECT_EQ
(
"
"
r
[
1
]
)
;
EXPECT_EQ
(
"
"
r
[
2
]
)
;
r
=
SplitString
(
"
"
"
"
KEEP_WHITESPACE
SPLIT_WANT_NONEMPTY
)
;
ASSERT_EQ
(
1u
r
.
size
(
)
)
;
ASSERT_EQ
(
"
"
r
[
0
]
)
;
r
=
SplitString
(
"
"
"
"
TRIM_WHITESPACE
SPLIT_WANT_ALL
)
;
ASSERT_EQ
(
3u
r
.
size
(
)
)
;
EXPECT_EQ
(
"
"
r
[
0
]
)
;
EXPECT_EQ
(
"
"
r
[
1
]
)
;
EXPECT_EQ
(
"
"
r
[
2
]
)
;
r
=
SplitString
(
"
"
"
"
TRIM_WHITESPACE
SPLIT_WANT_NONEMPTY
)
;
ASSERT_TRUE
(
r
.
empty
(
)
)
;
}
TEST
(
StringUtilsTest
TrimString
)
{
EXPECT_EQ
(
"
a
"
TrimString
(
"
a
"
kWhitespaceASCII
)
)
;
EXPECT_EQ
(
"
a
"
TrimString
(
"
a
"
kWhitespaceASCII
)
)
;
EXPECT_EQ
(
"
a
"
TrimString
(
"
a
"
kWhitespaceASCII
)
)
;
EXPECT_EQ
(
"
a
"
TrimString
(
"
a
"
kWhitespaceASCII
)
)
;
EXPECT_EQ
(
"
"
TrimString
(
"
"
kWhitespaceASCII
)
)
;
EXPECT_EQ
(
"
"
TrimString
(
"
\
n
\
r
\
t
"
kWhitespaceASCII
)
)
;
EXPECT_EQ
(
"
foo
"
TrimString
(
"
foo
"
"
"
)
)
;
EXPECT_EQ
(
"
foo
bar
"
TrimString
(
"
foo
bar
"
kWhitespaceASCII
)
)
;
EXPECT_EQ
(
"
"
TrimString
(
"
foo
bar
"
"
abcdefghijklmnopqrstuvwxyz
"
)
)
;
}
TEST
(
StringUtilsTest
HexStringToUIntBasic
)
{
unsigned
int
uintValue
;
std
:
:
string
emptyString
;
ASSERT_FALSE
(
HexStringToUInt
(
emptyString
&
uintValue
)
)
;
std
:
:
string
testStringA
(
"
0xBADF00D
"
)
;
ASSERT_TRUE
(
HexStringToUInt
(
testStringA
&
uintValue
)
)
;
EXPECT_EQ
(
0xBADF00Du
uintValue
)
;
std
:
:
string
testStringB
(
"
0xBADFOOD
"
)
;
EXPECT_FALSE
(
HexStringToUInt
(
testStringB
&
uintValue
)
)
;
std
:
:
string
testStringC
(
"
BADF00D
"
)
;
EXPECT_TRUE
(
HexStringToUInt
(
testStringC
&
uintValue
)
)
;
EXPECT_EQ
(
0xBADF00Du
uintValue
)
;
std
:
:
string
testStringD
(
"
0x
BADF00D
"
)
;
EXPECT_FALSE
(
HexStringToUInt
(
testStringD
&
uintValue
)
)
;
}
}
