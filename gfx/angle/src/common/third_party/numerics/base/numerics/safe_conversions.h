#
ifndef
BASE_NUMERICS_SAFE_CONVERSIONS_H_
#
define
BASE_NUMERICS_SAFE_CONVERSIONS_H_
#
include
<
stddef
.
h
>
#
include
<
limits
>
#
include
<
type_traits
>
#
include
"
base
/
logging
.
h
"
#
include
"
base
/
numerics
/
safe_conversions_impl
.
h
"
namespace
base
{
template
<
typename
Dst
typename
Src
>
constexpr
bool
IsValueInRangeForNumericType
(
Src
value
)
{
return
internal
:
:
DstRangeRelationToSrcRange
<
Dst
>
(
value
)
=
=
internal
:
:
RANGE_VALID
;
}
template
<
typename
T
>
constexpr
typename
std
:
:
enable_if
<
std
:
:
numeric_limits
<
T
>
:
:
is_signed
bool
>
:
:
type
IsValueNegative
(
T
value
)
{
static_assert
(
std
:
:
numeric_limits
<
T
>
:
:
is_specialized
"
Argument
must
be
numeric
.
"
)
;
return
value
<
0
;
}
template
<
typename
T
>
constexpr
typename
std
:
:
enable_if
<
!
std
:
:
numeric_limits
<
T
>
:
:
is_signed
bool
>
:
:
type
IsValueNegative
(
T
)
{
static_assert
(
std
:
:
numeric_limits
<
T
>
:
:
is_specialized
"
Argument
must
be
numeric
.
"
)
;
return
false
;
}
template
<
typename
Dst
typename
Src
>
inline
Dst
checked_cast
(
Src
value
)
{
CHECK
(
IsValueInRangeForNumericType
<
Dst
>
(
value
)
)
;
return
static_cast
<
Dst
>
(
value
)
;
}
struct
SaturatedCastNaNBehaviorCheck
{
template
<
typename
T
>
static
T
HandleNaN
(
)
{
CHECK
(
false
)
;
return
T
(
)
;
}
}
;
struct
SaturatedCastNaNBehaviorReturnZero
{
template
<
typename
T
>
static
constexpr
T
HandleNaN
(
)
{
return
T
(
)
;
}
}
;
namespace
internal
{
template
<
typename
Dst
class
NaNHandler
typename
Src
>
constexpr
Dst
saturated_cast_impl
(
const
Src
value
const
RangeConstraint
constraint
)
{
return
constraint
=
=
RANGE_VALID
?
static_cast
<
Dst
>
(
value
)
:
(
constraint
=
=
RANGE_UNDERFLOW
?
std
:
:
numeric_limits
<
Dst
>
:
:
min
(
)
:
(
constraint
=
=
RANGE_OVERFLOW
?
std
:
:
numeric_limits
<
Dst
>
:
:
max
(
)
:
(
constraint
=
=
RANGE_INVALID
?
NaNHandler
:
:
template
HandleNaN
<
Dst
>
(
)
:
(
NOTREACHED
(
)
static_cast
<
Dst
>
(
value
)
)
)
)
)
;
}
}
template
<
typename
Dst
class
NaNHandler
=
SaturatedCastNaNBehaviorReturnZero
typename
Src
>
constexpr
Dst
saturated_cast
(
Src
value
)
{
return
std
:
:
numeric_limits
<
Dst
>
:
:
is_iec559
?
static_cast
<
Dst
>
(
value
)
:
internal
:
:
saturated_cast_impl
<
Dst
NaNHandler
>
(
value
internal
:
:
DstRangeRelationToSrcRange
<
Dst
>
(
value
)
)
;
}
template
<
typename
Dst
typename
Src
>
constexpr
Dst
strict_cast
(
Src
value
)
{
static_assert
(
std
:
:
numeric_limits
<
Src
>
:
:
is_specialized
"
Argument
must
be
numeric
.
"
)
;
static_assert
(
std
:
:
numeric_limits
<
Dst
>
:
:
is_specialized
"
Result
must
be
numeric
.
"
)
;
static_assert
(
(
internal
:
:
StaticDstRangeRelationToSrcRange
<
Dst
Src
>
:
:
value
=
=
internal
:
:
NUMERIC_RANGE_CONTAINED
)
"
The
numeric
conversion
is
out
of
range
for
this
type
.
You
"
"
should
probably
use
one
of
the
following
conversion
"
"
mechanisms
on
the
value
you
want
to
pass
:
\
n
"
"
-
base
:
:
checked_cast
\
n
"
"
-
base
:
:
saturated_cast
\
n
"
"
-
base
:
:
CheckedNumeric
"
)
;
return
static_cast
<
Dst
>
(
value
)
;
}
template
<
typename
T
>
class
StrictNumeric
{
public
:
typedef
T
type
;
constexpr
StrictNumeric
(
)
:
value_
(
0
)
{
}
template
<
typename
Src
>
constexpr
StrictNumeric
(
const
StrictNumeric
<
Src
>
&
rhs
)
:
value_
(
strict_cast
<
T
>
(
rhs
.
value_
)
)
{
}
template
<
typename
Src
>
constexpr
StrictNumeric
(
Src
value
)
:
value_
(
strict_cast
<
T
>
(
value
)
)
{
}
template
<
typename
Dst
>
constexpr
operator
Dst
(
)
const
{
return
strict_cast
<
Dst
>
(
value_
)
;
}
private
:
const
T
value_
;
}
;
typedef
StrictNumeric
<
size_t
>
SizeT
;
}
#
endif
