#
include
<
gtest
/
gtest
.
h
>
#
include
"
common
/
BitSetIterator
.
h
"
using
namespace
angle
;
namespace
{
class
BitSetIteratorTest
:
public
testing
:
:
Test
{
protected
:
std
:
:
bitset
<
40
>
mStateBits
;
}
;
TEST_F
(
BitSetIteratorTest
Iterator
)
{
std
:
:
set
<
unsigned
long
>
originalValues
;
originalValues
.
insert
(
2
)
;
originalValues
.
insert
(
6
)
;
originalValues
.
insert
(
8
)
;
originalValues
.
insert
(
35
)
;
for
(
unsigned
long
value
:
originalValues
)
{
mStateBits
.
set
(
value
)
;
}
std
:
:
set
<
unsigned
long
>
readValues
;
for
(
unsigned
long
bit
:
IterateBitSet
(
mStateBits
)
)
{
EXPECT_EQ
(
1u
originalValues
.
count
(
bit
)
)
;
EXPECT_EQ
(
0u
readValues
.
count
(
bit
)
)
;
readValues
.
insert
(
bit
)
;
}
EXPECT_EQ
(
originalValues
.
size
(
)
readValues
.
size
(
)
)
;
}
TEST_F
(
BitSetIteratorTest
EmptySet
)
{
bool
sawBit
=
false
;
for
(
unsigned
long
bit
:
IterateBitSet
(
mStateBits
)
)
{
sawBit
=
true
;
UNUSED_TRACE_VARIABLE
(
bit
)
;
}
EXPECT_FALSE
(
sawBit
)
;
}
TEST_F
(
BitSetIteratorTest
NonLValueBitset
)
{
std
:
:
bitset
<
40
>
otherBits
;
mStateBits
.
set
(
1
)
;
mStateBits
.
set
(
2
)
;
mStateBits
.
set
(
3
)
;
mStateBits
.
set
(
4
)
;
otherBits
.
set
(
0
)
;
otherBits
.
set
(
1
)
;
otherBits
.
set
(
3
)
;
otherBits
.
set
(
5
)
;
std
:
:
set
<
unsigned
long
>
seenBits
;
for
(
unsigned
long
bit
:
IterateBitSet
(
mStateBits
&
otherBits
)
)
{
EXPECT_EQ
(
0u
seenBits
.
count
(
bit
)
)
;
seenBits
.
insert
(
bit
)
;
EXPECT_TRUE
(
mStateBits
[
bit
]
)
;
EXPECT_TRUE
(
otherBits
[
bit
]
)
;
}
EXPECT_EQ
(
(
mStateBits
&
otherBits
)
.
count
(
)
seenBits
.
size
(
)
)
;
}
}
