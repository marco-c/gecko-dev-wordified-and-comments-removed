#
ifndef
COMMON_DEBUG_H_
#
define
COMMON_DEBUG_H_
#
include
<
assert
.
h
>
#
include
<
stdio
.
h
>
#
include
<
string
>
#
include
"
common
/
angleutils
.
h
"
#
if
!
defined
(
TRACE_OUTPUT_FILE
)
#
define
TRACE_OUTPUT_FILE
"
angle_debug
.
txt
"
#
endif
namespace
gl
{
enum
MessageType
{
MESSAGE_TRACE
MESSAGE_FIXME
MESSAGE_ERR
MESSAGE_EVENT
}
;
void
trace
(
bool
traceInDebugOnly
MessageType
messageType
const
char
*
format
.
.
.
)
;
class
ScopedPerfEventHelper
:
angle
:
:
NonCopyable
{
public
:
ScopedPerfEventHelper
(
const
char
*
format
.
.
.
)
;
~
ScopedPerfEventHelper
(
)
;
}
;
class
DebugAnnotator
:
angle
:
:
NonCopyable
{
public
:
DebugAnnotator
(
)
{
}
;
virtual
~
DebugAnnotator
(
)
{
}
;
virtual
void
beginEvent
(
const
wchar_t
*
eventName
)
=
0
;
virtual
void
endEvent
(
)
=
0
;
virtual
void
setMarker
(
const
wchar_t
*
markerName
)
=
0
;
virtual
bool
getStatus
(
)
=
0
;
}
;
void
InitializeDebugAnnotations
(
DebugAnnotator
*
debugAnnotator
)
;
void
UninitializeDebugAnnotations
(
)
;
bool
DebugAnnotationsActive
(
)
;
class
LogMessageVoidify
{
public
:
LogMessageVoidify
(
)
{
}
void
operator
&
(
std
:
:
ostream
&
)
{
}
}
;
std
:
:
ostream
&
DummyStream
(
)
;
}
#
if
defined
(
ANGLE_ENABLE_DEBUG_TRACE
)
|
|
defined
(
ANGLE_ENABLE_DEBUG_ANNOTATIONS
)
#
define
ANGLE_TRACE_ENABLED
#
endif
#
define
ANGLE_EMPTY_STATEMENT
for
(
;
;
)
break
#
if
!
defined
(
NDEBUG
)
|
|
defined
(
ANGLE_ENABLE_RELEASE_ASSERTS
)
#
define
ANGLE_ENABLE_ASSERTS
#
endif
#
if
defined
(
ANGLE_TRACE_ENABLED
)
#
define
TRACE
(
message
.
.
.
)
gl
:
:
trace
(
true
gl
:
:
MESSAGE_TRACE
"
trace
:
%
s
(
%
d
)
:
"
message
"
\
n
"
__FUNCTION__
__LINE__
#
#
__VA_ARGS__
)
#
else
#
define
TRACE
(
message
.
.
.
)
(
void
(
0
)
)
#
endif
#
if
defined
(
ANGLE_TRACE_ENABLED
)
#
define
FIXME
(
message
.
.
.
)
gl
:
:
trace
(
false
gl
:
:
MESSAGE_FIXME
"
fixme
:
%
s
(
%
d
)
:
"
message
"
\
n
"
__FUNCTION__
__LINE__
#
#
__VA_ARGS__
)
#
else
#
define
FIXME
(
message
.
.
.
)
(
void
(
0
)
)
#
endif
#
if
defined
(
ANGLE_TRACE_ENABLED
)
|
|
defined
(
ANGLE_ENABLE_ASSERTS
)
#
define
ERR
(
message
.
.
.
)
gl
:
:
trace
(
false
gl
:
:
MESSAGE_ERR
"
err
:
%
s
(
%
d
)
:
"
message
"
\
n
"
__FUNCTION__
__LINE__
#
#
__VA_ARGS__
)
#
else
#
define
ERR
(
message
.
.
.
)
(
void
(
0
)
)
#
endif
#
if
defined
(
ANGLE_TRACE_ENABLED
)
#
if
defined
(
_MSC_VER
)
#
define
EVENT
(
message
.
.
.
)
gl
:
:
ScopedPerfEventHelper
scopedPerfEventHelper
#
#
__LINE__
(
"
%
s
"
message
"
\
n
"
__FUNCTION__
__VA_ARGS__
)
;
#
else
#
define
EVENT
(
message
.
.
.
)
gl
:
:
ScopedPerfEventHelper
scopedPerfEventHelper
(
"
%
s
"
message
"
\
n
"
__FUNCTION__
#
#
__VA_ARGS__
)
;
#
endif
#
else
#
define
EVENT
(
message
.
.
.
)
(
void
(
0
)
)
#
endif
#
if
defined
(
ANGLE_TRACE_ENABLED
)
#
undef
ANGLE_TRACE_ENABLED
#
endif
#
if
defined
(
COMPILER_GCC
)
|
|
defined
(
__clang__
)
#
define
ANGLE_CRASH
(
)
__builtin_trap
(
)
#
else
#
define
ANGLE_CRASH
(
)
(
(
void
)
(
*
(
volatile
char
*
)
0
=
0
)
)
#
endif
#
if
!
defined
(
NDEBUG
)
#
define
ANGLE_ASSERT_IMPL
(
expression
)
assert
(
expression
)
#
else
#
define
ANGLE_ASSERT_IMPL
(
expression
)
ANGLE_CRASH
(
)
#
endif
#
define
ANGLE_LAZY_STREAM
(
stream
condition
)
\
!
(
condition
)
?
static_cast
<
void
>
(
0
)
:
:
:
gl
:
:
LogMessageVoidify
(
)
&
(
stream
)
#
if
defined
(
NDEBUG
)
&
&
!
defined
(
ANGLE_ENABLE_ASSERTS
)
#
define
ANGLE_ASSERTS_ON
0
#
else
#
define
ANGLE_ASSERTS_ON
1
#
endif
#
if
ANGLE_ASSERTS_ON
#
define
ASSERT
(
expression
)
\
(
expression
?
static_cast
<
void
>
(
0
)
\
:
(
ERR
(
"
\
t
!
Assert
failed
in
%
s
(
%
d
)
:
%
s
\
n
"
__FUNCTION__
__LINE__
#
expression
)
\
ANGLE_ASSERT_IMPL
(
expression
)
)
)
#
else
#
define
ASSERT
(
condition
)
\
ANGLE_LAZY_STREAM
(
:
:
gl
:
:
DummyStream
(
)
ANGLE_ASSERTS_ON
?
!
(
condition
)
:
false
)
\
<
<
"
Check
failed
:
"
#
condition
"
.
"
#
endif
#
define
UNUSED_VARIABLE
(
variable
)
(
(
void
)
variable
)
#
ifndef
NOASSERT_UNIMPLEMENTED
#
define
NOASSERT_UNIMPLEMENTED
1
#
endif
#
define
UNIMPLEMENTED
(
)
\
{
\
ERR
(
"
\
t
!
Unimplemented
:
%
s
(
%
d
)
\
n
"
__FUNCTION__
__LINE__
)
;
\
ASSERT
(
NOASSERT_UNIMPLEMENTED
)
;
\
}
\
ANGLE_EMPTY_STATEMENT
#
define
UNREACHABLE
(
)
\
(
ERR
(
"
\
t
!
Unreachable
reached
:
%
s
(
%
d
)
\
n
"
__FUNCTION__
__LINE__
)
ASSERT
(
false
)
)
#
endif
