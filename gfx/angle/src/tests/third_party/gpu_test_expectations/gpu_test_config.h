#
ifndef
ANGLE_GPU_CONFIG_GPU_TEST_CONFIG_H_
#
define
ANGLE_GPU_CONFIG_GPU_TEST_CONFIG_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
angle_config
.
h
"
namespace
gpu
{
struct
GPUInfo
;
class
GPU_EXPORT
GPUTestConfig
{
public
:
enum
OS
{
kOsUnknown
=
0
kOsWinXP
=
1
<
<
0
kOsWinVista
=
1
<
<
1
kOsWin7
=
1
<
<
2
kOsWin8
=
1
<
<
3
kOsMacLeopard
=
1
<
<
4
kOsMacSnowLeopard
=
1
<
<
5
kOsMacLion
=
1
<
<
6
kOsMacMountainLion
=
1
<
<
7
kOsMacMavericks
=
1
<
<
8
kOsMacYosemite
=
1
<
<
9
kOsMacElCapitan
=
1
<
<
10
kOsMacSierra
=
1
<
<
11
kOsMac
=
kOsMacLeopard
|
kOsMacSnowLeopard
|
kOsMacLion
|
kOsMacMountainLion
|
kOsMacMavericks
|
kOsMacYosemite
|
kOsMacElCapitan
|
kOsMacSierra
kOsLinux
=
1
<
<
12
kOsChromeOS
=
1
<
<
13
kOsAndroid
=
1
<
<
14
kOsWin10
=
1
<
<
15
kOsWin
=
kOsWinXP
|
kOsWinVista
|
kOsWin7
|
kOsWin8
|
kOsWin10
}
;
enum
BuildType
{
kBuildTypeUnknown
=
0
kBuildTypeRelease
=
1
<
<
0
kBuildTypeDebug
=
1
<
<
1
}
;
enum
API
{
kAPIUnknown
=
0
kAPID3D9
=
1
<
<
0
kAPID3D11
=
1
<
<
1
kAPIGLDesktop
=
1
<
<
2
kAPIGLES
=
1
<
<
3
}
;
GPUTestConfig
(
)
;
GPUTestConfig
(
const
GPUTestConfig
&
other
)
;
virtual
~
GPUTestConfig
(
)
;
void
set_os
(
int32_t
os
)
;
void
set_gpu_device_id
(
uint32_t
id
)
;
void
set_build_type
(
int32_t
build_type
)
;
void
set_api
(
int32_t
api
)
;
virtual
void
AddGPUVendor
(
uint32_t
gpu_vendor
)
;
int32_t
os
(
)
const
{
return
os_
;
}
const
std
:
:
vector
<
uint32_t
>
&
gpu_vendor
(
)
const
{
return
gpu_vendor_
;
}
uint32_t
gpu_device_id
(
)
const
{
return
gpu_device_id_
;
}
int32_t
build_type
(
)
const
{
return
build_type_
;
}
int32_t
api
(
)
const
{
return
api_
;
}
virtual
bool
IsValid
(
)
const
;
bool
OverlapsWith
(
const
GPUTestConfig
&
config
)
const
;
void
DisableGPUInfoValidation
(
)
;
protected
:
void
ClearGPUVendor
(
)
;
bool
validate_gpu_info_
;
private
:
int32_t
os_
;
std
:
:
vector
<
uint32_t
>
gpu_vendor_
;
uint32_t
gpu_device_id_
;
int32_t
build_type_
;
int32_t
api_
;
}
;
class
GPU_EXPORT
GPUTestBotConfig
:
public
GPUTestConfig
{
public
:
GPUTestBotConfig
(
)
{
}
~
GPUTestBotConfig
(
)
override
;
void
AddGPUVendor
(
uint32_t
gpu_vendor
)
override
;
bool
SetGPUInfo
(
const
GPUInfo
&
gpu_info
)
;
bool
IsValid
(
)
const
override
;
bool
Matches
(
const
GPUTestConfig
&
config
)
const
;
bool
Matches
(
const
std
:
:
string
&
config_data
)
const
;
bool
LoadCurrentConfig
(
const
GPUInfo
*
gpu_info
)
;
static
bool
CurrentConfigMatches
(
const
std
:
:
string
&
config_data
)
;
static
bool
CurrentConfigMatches
(
const
std
:
:
vector
<
std
:
:
string
>
&
configs
)
;
static
bool
GpuBlacklistedOnBot
(
)
;
}
;
}
#
endif
