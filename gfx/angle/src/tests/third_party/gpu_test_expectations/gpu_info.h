#
ifndef
GPU_CONFIG_GPU_INFO_H_
#
define
GPU_CONFIG_GPU_INFO_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
angle_config
.
h
"
namespace
gpu
{
enum
CollectInfoResult
{
kCollectInfoNone
=
0
kCollectInfoSuccess
=
1
kCollectInfoNonFatalFailure
=
2
kCollectInfoFatalFailure
=
3
}
;
enum
VideoCodecProfile
{
VIDEO_CODEC_PROFILE_UNKNOWN
=
-
1
VIDEO_CODEC_PROFILE_MIN
=
VIDEO_CODEC_PROFILE_UNKNOWN
H264PROFILE_BASELINE
=
0
H264PROFILE_MAIN
=
1
H264PROFILE_EXTENDED
=
2
H264PROFILE_HIGH
=
3
H264PROFILE_HIGH10PROFILE
=
4
H264PROFILE_HIGH422PROFILE
=
5
H264PROFILE_HIGH444PREDICTIVEPROFILE
=
6
H264PROFILE_SCALABLEBASELINE
=
7
H264PROFILE_SCALABLEHIGH
=
8
H264PROFILE_STEREOHIGH
=
9
H264PROFILE_MULTIVIEWHIGH
=
10
VP8PROFILE_ANY
=
11
VP9PROFILE_ANY
=
12
VIDEO_CODEC_PROFILE_MAX
=
VP9PROFILE_ANY
}
;
struct
GPU_EXPORT
GPUInfo
{
struct
GPU_EXPORT
GPUDevice
{
GPUDevice
(
)
;
~
GPUDevice
(
)
;
uint32
vendor_id
;
uint32
device_id
;
bool
active
;
std
:
:
string
vendor_string
;
std
:
:
string
device_string
;
}
;
GPUInfo
(
)
;
~
GPUInfo
(
)
;
bool
SupportsAccelerated2dCanvas
(
)
const
{
return
!
can_lose_context
&
&
!
software_rendering
;
}
bool
optimus
;
bool
amd_switchable
;
bool
lenovo_dcute
;
GPUDevice
gpu
;
std
:
:
vector
<
GPUDevice
>
secondary_gpus
;
uint64
adapter_luid
;
std
:
:
string
driver_vendor
;
std
:
:
string
driver_version
;
std
:
:
string
driver_date
;
std
:
:
string
pixel_shader_version
;
std
:
:
string
vertex_shader_version
;
std
:
:
string
max_msaa_samples
;
std
:
:
string
machine_model_name
;
std
:
:
string
machine_model_version
;
std
:
:
string
gl_version
;
std
:
:
string
gl_vendor
;
std
:
:
string
gl_renderer
;
std
:
:
string
gl_extensions
;
std
:
:
string
gl_ws_vendor
;
std
:
:
string
gl_ws_version
;
std
:
:
string
gl_ws_extensions
;
uint32
gl_reset_notification_strategy
;
bool
can_lose_context
;
bool
software_rendering
;
bool
direct_rendering
;
bool
sandboxed
;
int
process_crash_count
;
bool
in_process_gpu
;
CollectInfoResult
basic_info_state
;
CollectInfoResult
context_info_state
;
bool
jpeg_decode_accelerator_supported
;
class
Enumerator
{
public
:
virtual
void
AddInt64
(
const
char
*
name
int64
value
)
=
0
;
virtual
void
AddInt
(
const
char
*
name
int
value
)
=
0
;
virtual
void
AddString
(
const
char
*
name
const
std
:
:
string
&
value
)
=
0
;
virtual
void
AddBool
(
const
char
*
name
bool
value
)
=
0
;
virtual
void
BeginGPUDevice
(
)
=
0
;
virtual
void
EndGPUDevice
(
)
=
0
;
virtual
void
BeginVideoDecodeAcceleratorSupportedProfile
(
)
=
0
;
virtual
void
EndVideoDecodeAcceleratorSupportedProfile
(
)
=
0
;
virtual
void
BeginVideoEncodeAcceleratorSupportedProfile
(
)
=
0
;
virtual
void
EndVideoEncodeAcceleratorSupportedProfile
(
)
=
0
;
virtual
void
BeginAuxAttributes
(
)
=
0
;
virtual
void
EndAuxAttributes
(
)
=
0
;
protected
:
virtual
~
Enumerator
(
)
{
}
}
;
void
EnumerateFields
(
Enumerator
*
enumerator
)
const
;
}
;
}
#
endif
