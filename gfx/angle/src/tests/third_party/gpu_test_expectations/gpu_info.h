#
ifndef
ANGLE_GPU_CONFIG_GPU_INFO_H_
#
define
ANGLE_GPU_CONFIG_GPU_INFO_H_
#
include
<
stdint
.
h
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
angle_config
.
h
"
#
if
defined
(
USE_X11
)
typedef
unsigned
long
VisualID
;
#
endif
namespace
gpu
{
enum
CollectInfoResult
{
kCollectInfoNone
=
0
kCollectInfoSuccess
=
1
kCollectInfoNonFatalFailure
=
2
kCollectInfoFatalFailure
=
3
}
;
enum
VideoCodecProfile
{
VIDEO_CODEC_PROFILE_UNKNOWN
=
-
1
VIDEO_CODEC_PROFILE_MIN
=
VIDEO_CODEC_PROFILE_UNKNOWN
H264PROFILE_BASELINE
=
0
H264PROFILE_MAIN
H264PROFILE_EXTENDED
H264PROFILE_HIGH
H264PROFILE_HIGH10PROFILE
H264PROFILE_HIGH422PROFILE
H264PROFILE_HIGH444PREDICTIVEPROFILE
H264PROFILE_SCALABLEBASELINE
H264PROFILE_SCALABLEHIGH
H264PROFILE_STEREOHIGH
H264PROFILE_MULTIVIEWHIGH
VP8PROFILE_ANY
VP9PROFILE_PROFILE0
VP9PROFILE_PROFILE1
VP9PROFILE_PROFILE2
VP9PROFILE_PROFILE3
HEVCPROFILE_MAIN
HEVCPROFILE_MAIN10
HEVCPROFILE_MAIN_STILL_PICTURE
DOLBYVISION_PROFILE0
DOLBYVISION_PROFILE4
DOLBYVISION_PROFILE5
DOLBYVISION_PROFILE7
VIDEO_CODEC_PROFILE_MAX
=
DOLBYVISION_PROFILE7
}
;
struct
GPU_EXPORT
VideoDecodeAcceleratorSupportedProfile
{
VideoCodecProfile
profile
;
gfx
:
:
Size
max_resolution
;
gfx
:
:
Size
min_resolution
;
bool
encrypted_only
;
}
;
using
VideoDecodeAcceleratorSupportedProfiles
=
std
:
:
vector
<
VideoDecodeAcceleratorSupportedProfile
>
;
struct
GPU_EXPORT
VideoDecodeAcceleratorCapabilities
{
VideoDecodeAcceleratorCapabilities
(
)
;
VideoDecodeAcceleratorCapabilities
(
const
VideoDecodeAcceleratorCapabilities
&
other
)
;
~
VideoDecodeAcceleratorCapabilities
(
)
;
VideoDecodeAcceleratorSupportedProfiles
supported_profiles
;
uint32_t
flags
;
}
;
struct
GPU_EXPORT
VideoEncodeAcceleratorSupportedProfile
{
VideoCodecProfile
profile
;
gfx
:
:
Size
max_resolution
;
uint32_t
max_framerate_numerator
;
uint32_t
max_framerate_denominator
;
}
;
using
VideoEncodeAcceleratorSupportedProfiles
=
std
:
:
vector
<
VideoEncodeAcceleratorSupportedProfile
>
;
struct
GPU_EXPORT
GPUInfo
{
struct
GPU_EXPORT
GPUDevice
{
GPUDevice
(
)
;
~
GPUDevice
(
)
;
uint32_t
vendor_id
;
uint32_t
device_id
;
bool
active
;
std
:
:
string
vendor_string
;
std
:
:
string
device_string
;
}
;
GPUInfo
(
)
;
GPUInfo
(
const
GPUInfo
&
other
)
;
~
GPUInfo
(
)
;
base
:
:
TimeDelta
initialization_time
;
bool
optimus
;
bool
amd_switchable
;
GPUDevice
gpu
;
std
:
:
vector
<
GPUDevice
>
secondary_gpus
;
const
GPUDevice
&
active_gpu
(
)
const
;
std
:
:
string
driver_vendor
;
std
:
:
string
driver_version
;
std
:
:
string
driver_date
;
std
:
:
string
pixel_shader_version
;
std
:
:
string
vertex_shader_version
;
std
:
:
string
max_msaa_samples
;
std
:
:
string
machine_model_name
;
std
:
:
string
machine_model_version
;
std
:
:
string
gl_version
;
std
:
:
string
gl_vendor
;
std
:
:
string
gl_renderer
;
std
:
:
string
gl_extensions
;
std
:
:
string
gl_ws_vendor
;
std
:
:
string
gl_ws_version
;
std
:
:
string
gl_ws_extensions
;
uint32_t
gl_reset_notification_strategy
;
bool
software_rendering
;
bool
direct_rendering
;
bool
sandboxed
;
int
process_crash_count
;
bool
in_process_gpu
;
bool
passthrough_cmd_decoder
;
bool
supports_overlays
=
false
;
bool
hdr
=
false
;
bool
can_support_threaded_texture_mailbox
=
false
;
CollectInfoResult
basic_info_state
;
CollectInfoResult
context_info_state
;
#
if
defined
(
OS_WIN
)
CollectInfoResult
dx_diagnostics_info_state
;
DxDiagNode
dx_diagnostics
;
#
endif
VideoDecodeAcceleratorCapabilities
video_decode_accelerator_capabilities
;
VideoEncodeAcceleratorSupportedProfiles
video_encode_accelerator_supported_profiles
;
bool
jpeg_decode_accelerator_supported
;
#
if
defined
(
USE_X11
)
VisualID
system_visual
;
VisualID
rgba_visual
;
#
endif
class
Enumerator
{
public
:
virtual
void
AddInt64
(
const
char
*
name
int64_t
value
)
=
0
;
virtual
void
AddInt
(
const
char
*
name
int
value
)
=
0
;
virtual
void
AddString
(
const
char
*
name
const
std
:
:
string
&
value
)
=
0
;
virtual
void
AddBool
(
const
char
*
name
bool
value
)
=
0
;
virtual
void
AddTimeDeltaInSecondsF
(
const
char
*
name
const
base
:
:
TimeDelta
&
value
)
=
0
;
virtual
void
BeginGPUDevice
(
)
=
0
;
virtual
void
EndGPUDevice
(
)
=
0
;
virtual
void
BeginVideoDecodeAcceleratorSupportedProfile
(
)
=
0
;
virtual
void
EndVideoDecodeAcceleratorSupportedProfile
(
)
=
0
;
virtual
void
BeginVideoEncodeAcceleratorSupportedProfile
(
)
=
0
;
virtual
void
EndVideoEncodeAcceleratorSupportedProfile
(
)
=
0
;
virtual
void
BeginAuxAttributes
(
)
=
0
;
virtual
void
EndAuxAttributes
(
)
=
0
;
protected
:
virtual
~
Enumerator
(
)
{
}
}
;
void
EnumerateFields
(
Enumerator
*
enumerator
)
const
;
}
;
}
#
endif
