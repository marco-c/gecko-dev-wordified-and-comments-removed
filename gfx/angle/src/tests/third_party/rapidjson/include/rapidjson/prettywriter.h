#
ifndef
RAPIDJSON_PRETTYWRITER_H_
#
define
RAPIDJSON_PRETTYWRITER_H_
#
include
"
writer
.
h
"
#
ifdef
__GNUC__
RAPIDJSON_DIAG_PUSH
RAPIDJSON_DIAG_OFF
(
effc
+
+
)
#
endif
RAPIDJSON_NAMESPACE_BEGIN
template
<
typename
OutputStream
typename
SourceEncoding
=
UTF8
<
>
typename
TargetEncoding
=
UTF8
<
>
typename
StackAllocator
=
CrtAllocator
>
class
PrettyWriter
:
public
Writer
<
OutputStream
SourceEncoding
TargetEncoding
StackAllocator
>
{
public
:
typedef
Writer
<
OutputStream
SourceEncoding
TargetEncoding
StackAllocator
>
Base
;
typedef
typename
Base
:
:
Ch
Ch
;
PrettyWriter
(
OutputStream
&
os
StackAllocator
*
allocator
=
0
size_t
levelDepth
=
Base
:
:
kDefaultLevelDepth
)
:
Base
(
os
allocator
levelDepth
)
indentChar_
(
'
'
)
indentCharCount_
(
4
)
{
}
PrettyWriter
&
SetIndent
(
Ch
indentChar
unsigned
indentCharCount
)
{
RAPIDJSON_ASSERT
(
indentChar
=
=
'
'
|
|
indentChar
=
=
'
\
t
'
|
|
indentChar
=
=
'
\
n
'
|
|
indentChar
=
=
'
\
r
'
)
;
indentChar_
=
indentChar
;
indentCharCount_
=
indentCharCount
;
return
*
this
;
}
bool
Null
(
)
{
PrettyPrefix
(
kNullType
)
;
return
Base
:
:
WriteNull
(
)
;
}
bool
Bool
(
bool
b
)
{
PrettyPrefix
(
b
?
kTrueType
:
kFalseType
)
;
return
Base
:
:
WriteBool
(
b
)
;
}
bool
Int
(
int
i
)
{
PrettyPrefix
(
kNumberType
)
;
return
Base
:
:
WriteInt
(
i
)
;
}
bool
Uint
(
unsigned
u
)
{
PrettyPrefix
(
kNumberType
)
;
return
Base
:
:
WriteUint
(
u
)
;
}
bool
Int64
(
int64_t
i64
)
{
PrettyPrefix
(
kNumberType
)
;
return
Base
:
:
WriteInt64
(
i64
)
;
}
bool
Uint64
(
uint64_t
u64
)
{
PrettyPrefix
(
kNumberType
)
;
return
Base
:
:
WriteUint64
(
u64
)
;
}
bool
Double
(
double
d
)
{
PrettyPrefix
(
kNumberType
)
;
return
Base
:
:
WriteDouble
(
d
)
;
}
bool
String
(
const
Ch
*
str
SizeType
length
bool
copy
=
false
)
{
(
void
)
copy
;
PrettyPrefix
(
kStringType
)
;
return
Base
:
:
WriteString
(
str
length
)
;
}
bool
StartObject
(
)
{
PrettyPrefix
(
kObjectType
)
;
new
(
Base
:
:
level_stack_
.
template
Push
<
typename
Base
:
:
Level
>
(
)
)
typename
Base
:
:
Level
(
false
)
;
return
Base
:
:
WriteStartObject
(
)
;
}
bool
Key
(
const
Ch
*
str
SizeType
length
bool
copy
=
false
)
{
return
String
(
str
length
copy
)
;
}
bool
EndObject
(
SizeType
memberCount
=
0
)
{
(
void
)
memberCount
;
RAPIDJSON_ASSERT
(
Base
:
:
level_stack_
.
GetSize
(
)
>
=
sizeof
(
typename
Base
:
:
Level
)
)
;
RAPIDJSON_ASSERT
(
!
Base
:
:
level_stack_
.
template
Top
<
typename
Base
:
:
Level
>
(
)
-
>
inArray
)
;
bool
empty
=
Base
:
:
level_stack_
.
template
Pop
<
typename
Base
:
:
Level
>
(
1
)
-
>
valueCount
=
=
0
;
if
(
!
empty
)
{
Base
:
:
os_
-
>
Put
(
'
\
n
'
)
;
WriteIndent
(
)
;
}
if
(
!
Base
:
:
WriteEndObject
(
)
)
return
false
;
if
(
Base
:
:
level_stack_
.
Empty
(
)
)
Base
:
:
os_
-
>
Flush
(
)
;
return
true
;
}
bool
StartArray
(
)
{
PrettyPrefix
(
kArrayType
)
;
new
(
Base
:
:
level_stack_
.
template
Push
<
typename
Base
:
:
Level
>
(
)
)
typename
Base
:
:
Level
(
true
)
;
return
Base
:
:
WriteStartArray
(
)
;
}
bool
EndArray
(
SizeType
memberCount
=
0
)
{
(
void
)
memberCount
;
RAPIDJSON_ASSERT
(
Base
:
:
level_stack_
.
GetSize
(
)
>
=
sizeof
(
typename
Base
:
:
Level
)
)
;
RAPIDJSON_ASSERT
(
Base
:
:
level_stack_
.
template
Top
<
typename
Base
:
:
Level
>
(
)
-
>
inArray
)
;
bool
empty
=
Base
:
:
level_stack_
.
template
Pop
<
typename
Base
:
:
Level
>
(
1
)
-
>
valueCount
=
=
0
;
if
(
!
empty
)
{
Base
:
:
os_
-
>
Put
(
'
\
n
'
)
;
WriteIndent
(
)
;
}
if
(
!
Base
:
:
WriteEndArray
(
)
)
return
false
;
if
(
Base
:
:
level_stack_
.
Empty
(
)
)
Base
:
:
os_
-
>
Flush
(
)
;
return
true
;
}
bool
String
(
const
Ch
*
str
)
{
return
String
(
str
internal
:
:
StrLen
(
str
)
)
;
}
bool
Key
(
const
Ch
*
str
)
{
return
Key
(
str
internal
:
:
StrLen
(
str
)
)
;
}
protected
:
void
PrettyPrefix
(
Type
type
)
{
(
void
)
type
;
if
(
Base
:
:
level_stack_
.
GetSize
(
)
!
=
0
)
{
typename
Base
:
:
Level
*
level
=
Base
:
:
level_stack_
.
template
Top
<
typename
Base
:
:
Level
>
(
)
;
if
(
level
-
>
inArray
)
{
if
(
level
-
>
valueCount
>
0
)
{
Base
:
:
os_
-
>
Put
(
'
'
)
;
Base
:
:
os_
-
>
Put
(
'
\
n
'
)
;
}
else
Base
:
:
os_
-
>
Put
(
'
\
n
'
)
;
WriteIndent
(
)
;
}
else
{
if
(
level
-
>
valueCount
>
0
)
{
if
(
level
-
>
valueCount
%
2
=
=
0
)
{
Base
:
:
os_
-
>
Put
(
'
'
)
;
Base
:
:
os_
-
>
Put
(
'
\
n
'
)
;
}
else
{
Base
:
:
os_
-
>
Put
(
'
:
'
)
;
Base
:
:
os_
-
>
Put
(
'
'
)
;
}
}
else
Base
:
:
os_
-
>
Put
(
'
\
n
'
)
;
if
(
level
-
>
valueCount
%
2
=
=
0
)
WriteIndent
(
)
;
}
if
(
!
level
-
>
inArray
&
&
level
-
>
valueCount
%
2
=
=
0
)
RAPIDJSON_ASSERT
(
type
=
=
kStringType
)
;
level
-
>
valueCount
+
+
;
}
else
{
RAPIDJSON_ASSERT
(
!
Base
:
:
hasRoot_
)
;
Base
:
:
hasRoot_
=
true
;
}
}
void
WriteIndent
(
)
{
size_t
count
=
(
Base
:
:
level_stack_
.
GetSize
(
)
/
sizeof
(
typename
Base
:
:
Level
)
)
*
indentCharCount_
;
PutN
(
*
Base
:
:
os_
indentChar_
count
)
;
}
Ch
indentChar_
;
unsigned
indentCharCount_
;
private
:
PrettyWriter
(
const
PrettyWriter
&
)
;
PrettyWriter
&
operator
=
(
const
PrettyWriter
&
)
;
}
;
RAPIDJSON_NAMESPACE_END
#
ifdef
__GNUC__
RAPIDJSON_DIAG_POP
#
endif
#
endif
