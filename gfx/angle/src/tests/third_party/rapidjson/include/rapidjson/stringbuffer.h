#
ifndef
RAPIDJSON_STRINGBUFFER_H_
#
define
RAPIDJSON_STRINGBUFFER_H_
#
include
"
rapidjson
.
h
"
#
if
RAPIDJSON_HAS_CXX11_RVALUE_REFS
#
include
<
utility
>
#
endif
#
include
"
internal
/
stack
.
h
"
RAPIDJSON_NAMESPACE_BEGIN
template
<
typename
Encoding
typename
Allocator
=
CrtAllocator
>
class
GenericStringBuffer
{
public
:
typedef
typename
Encoding
:
:
Ch
Ch
;
GenericStringBuffer
(
Allocator
*
allocator
=
0
size_t
capacity
=
kDefaultCapacity
)
:
stack_
(
allocator
capacity
)
{
}
#
if
RAPIDJSON_HAS_CXX11_RVALUE_REFS
GenericStringBuffer
(
GenericStringBuffer
&
&
rhs
)
:
stack_
(
std
:
:
move
(
rhs
.
stack_
)
)
{
}
GenericStringBuffer
&
operator
=
(
GenericStringBuffer
&
&
rhs
)
{
if
(
&
rhs
!
=
this
)
stack_
=
std
:
:
move
(
rhs
.
stack_
)
;
return
*
this
;
}
#
endif
void
Put
(
Ch
c
)
{
*
stack_
.
template
Push
<
Ch
>
(
)
=
c
;
}
void
Flush
(
)
{
}
void
Clear
(
)
{
stack_
.
Clear
(
)
;
}
void
ShrinkToFit
(
)
{
*
stack_
.
template
Push
<
Ch
>
(
)
=
'
\
0
'
;
stack_
.
ShrinkToFit
(
)
;
stack_
.
template
Pop
<
Ch
>
(
1
)
;
}
Ch
*
Push
(
size_t
count
)
{
return
stack_
.
template
Push
<
Ch
>
(
count
)
;
}
void
Pop
(
size_t
count
)
{
stack_
.
template
Pop
<
Ch
>
(
count
)
;
}
const
Ch
*
GetString
(
)
const
{
*
stack_
.
template
Push
<
Ch
>
(
)
=
'
\
0
'
;
stack_
.
template
Pop
<
Ch
>
(
1
)
;
return
stack_
.
template
Bottom
<
Ch
>
(
)
;
}
size_t
GetSize
(
)
const
{
return
stack_
.
GetSize
(
)
;
}
static
const
size_t
kDefaultCapacity
=
256
;
mutable
internal
:
:
Stack
<
Allocator
>
stack_
;
private
:
GenericStringBuffer
(
const
GenericStringBuffer
&
)
;
GenericStringBuffer
&
operator
=
(
const
GenericStringBuffer
&
)
;
}
;
typedef
GenericStringBuffer
<
UTF8
<
>
>
StringBuffer
;
template
<
>
inline
void
PutN
(
GenericStringBuffer
<
UTF8
<
>
>
&
stream
char
c
size_t
n
)
{
std
:
:
memset
(
stream
.
stack_
.
Push
<
char
>
(
n
)
c
n
*
sizeof
(
c
)
)
;
}
RAPIDJSON_NAMESPACE_END
#
endif
