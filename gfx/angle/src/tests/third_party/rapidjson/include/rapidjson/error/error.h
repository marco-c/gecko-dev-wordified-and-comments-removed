#
ifndef
RAPIDJSON_ERROR_ERROR_H__
#
define
RAPIDJSON_ERROR_ERROR_H__
#
ifndef
RAPIDJSON_ERROR_CHARTYPE
#
define
RAPIDJSON_ERROR_CHARTYPE
char
#
endif
#
ifndef
RAPIDJSON_ERROR_STRING
#
define
RAPIDJSON_ERROR_STRING
(
x
)
x
#
endif
RAPIDJSON_NAMESPACE_BEGIN
enum
ParseErrorCode
{
kParseErrorNone
=
0
kParseErrorDocumentEmpty
kParseErrorDocumentRootNotSingular
kParseErrorValueInvalid
kParseErrorObjectMissName
kParseErrorObjectMissColon
kParseErrorObjectMissCommaOrCurlyBracket
kParseErrorArrayMissCommaOrSquareBracket
kParseErrorStringUnicodeEscapeInvalidHex
kParseErrorStringUnicodeSurrogateInvalid
kParseErrorStringEscapeInvalid
kParseErrorStringMissQuotationMark
kParseErrorStringInvalidEncoding
kParseErrorNumberTooBig
kParseErrorNumberMissFraction
kParseErrorNumberMissExponent
kParseErrorTermination
kParseErrorUnspecificSyntaxError
}
;
struct
ParseResult
{
ParseResult
(
)
:
code_
(
kParseErrorNone
)
offset_
(
0
)
{
}
ParseResult
(
ParseErrorCode
code
size_t
offset
)
:
code_
(
code
)
offset_
(
offset
)
{
}
ParseErrorCode
Code
(
)
const
{
return
code_
;
}
size_t
Offset
(
)
const
{
return
offset_
;
}
operator
bool
(
)
const
{
return
!
IsError
(
)
;
}
bool
IsError
(
)
const
{
return
code_
!
=
kParseErrorNone
;
}
bool
operator
=
=
(
const
ParseResult
&
that
)
const
{
return
code_
=
=
that
.
code_
;
}
bool
operator
=
=
(
ParseErrorCode
code
)
const
{
return
code_
=
=
code
;
}
friend
bool
operator
=
=
(
ParseErrorCode
code
const
ParseResult
&
err
)
{
return
code
=
=
err
.
code_
;
}
void
Clear
(
)
{
Set
(
kParseErrorNone
)
;
}
void
Set
(
ParseErrorCode
code
size_t
offset
=
0
)
{
code_
=
code
;
offset_
=
offset
;
}
private
:
ParseErrorCode
code_
;
size_t
offset_
;
}
;
typedef
const
RAPIDJSON_ERROR_CHARTYPE
*
(
*
GetParseErrorFunc
)
(
ParseErrorCode
)
;
RAPIDJSON_NAMESPACE_END
#
endif
