#
ifndef
RAPIDJSON_ENCODEDSTREAM_H_
#
define
RAPIDJSON_ENCODEDSTREAM_H_
#
include
"
rapidjson
.
h
"
#
ifdef
__GNUC__
RAPIDJSON_DIAG_PUSH
RAPIDJSON_DIAG_OFF
(
effc
+
+
)
#
endif
RAPIDJSON_NAMESPACE_BEGIN
template
<
typename
Encoding
typename
InputByteStream
>
class
EncodedInputStream
{
RAPIDJSON_STATIC_ASSERT
(
sizeof
(
typename
InputByteStream
:
:
Ch
)
=
=
1
)
;
public
:
typedef
typename
Encoding
:
:
Ch
Ch
;
EncodedInputStream
(
InputByteStream
&
is
)
:
is_
(
is
)
{
current_
=
Encoding
:
:
TakeBOM
(
is_
)
;
}
Ch
Peek
(
)
const
{
return
current_
;
}
Ch
Take
(
)
{
Ch
c
=
current_
;
current_
=
Encoding
:
:
Take
(
is_
)
;
return
c
;
}
size_t
Tell
(
)
const
{
return
is_
.
Tell
(
)
;
}
void
Put
(
Ch
)
{
RAPIDJSON_ASSERT
(
false
)
;
}
void
Flush
(
)
{
RAPIDJSON_ASSERT
(
false
)
;
}
Ch
*
PutBegin
(
)
{
RAPIDJSON_ASSERT
(
false
)
;
return
0
;
}
size_t
PutEnd
(
Ch
*
)
{
RAPIDJSON_ASSERT
(
false
)
;
return
0
;
}
private
:
EncodedInputStream
(
const
EncodedInputStream
&
)
;
EncodedInputStream
&
operator
=
(
const
EncodedInputStream
&
)
;
InputByteStream
&
is_
;
Ch
current_
;
}
;
template
<
typename
Encoding
typename
OutputByteStream
>
class
EncodedOutputStream
{
RAPIDJSON_STATIC_ASSERT
(
sizeof
(
typename
OutputByteStream
:
:
Ch
)
=
=
1
)
;
public
:
typedef
typename
Encoding
:
:
Ch
Ch
;
EncodedOutputStream
(
OutputByteStream
&
os
bool
putBOM
=
true
)
:
os_
(
os
)
{
if
(
putBOM
)
Encoding
:
:
PutBOM
(
os_
)
;
}
void
Put
(
Ch
c
)
{
Encoding
:
:
Put
(
os_
c
)
;
}
void
Flush
(
)
{
os_
.
Flush
(
)
;
}
Ch
Peek
(
)
const
{
RAPIDJSON_ASSERT
(
false
)
;
}
Ch
Take
(
)
{
RAPIDJSON_ASSERT
(
false
)
;
}
size_t
Tell
(
)
const
{
RAPIDJSON_ASSERT
(
false
)
;
return
0
;
}
Ch
*
PutBegin
(
)
{
RAPIDJSON_ASSERT
(
false
)
;
return
0
;
}
size_t
PutEnd
(
Ch
*
)
{
RAPIDJSON_ASSERT
(
false
)
;
return
0
;
}
private
:
EncodedOutputStream
(
const
EncodedOutputStream
&
)
;
EncodedOutputStream
&
operator
=
(
const
EncodedOutputStream
&
)
;
OutputByteStream
&
os_
;
}
;
#
define
RAPIDJSON_ENCODINGS_FUNC
(
x
)
UTF8
<
Ch
>
:
:
x
UTF16LE
<
Ch
>
:
:
x
UTF16BE
<
Ch
>
:
:
x
UTF32LE
<
Ch
>
:
:
x
UTF32BE
<
Ch
>
:
:
x
template
<
typename
CharType
typename
InputByteStream
>
class
AutoUTFInputStream
{
RAPIDJSON_STATIC_ASSERT
(
sizeof
(
typename
InputByteStream
:
:
Ch
)
=
=
1
)
;
public
:
typedef
CharType
Ch
;
AutoUTFInputStream
(
InputByteStream
&
is
UTFType
type
=
kUTF8
)
:
is_
(
&
is
)
type_
(
type
)
hasBOM_
(
false
)
{
DetectType
(
)
;
static
const
TakeFunc
f
[
]
=
{
RAPIDJSON_ENCODINGS_FUNC
(
Take
)
}
;
takeFunc_
=
f
[
type_
]
;
current_
=
takeFunc_
(
*
is_
)
;
}
UTFType
GetType
(
)
const
{
return
type_
;
}
bool
HasBOM
(
)
const
{
return
hasBOM_
;
}
Ch
Peek
(
)
const
{
return
current_
;
}
Ch
Take
(
)
{
Ch
c
=
current_
;
current_
=
takeFunc_
(
*
is_
)
;
return
c
;
}
size_t
Tell
(
)
const
{
return
is_
-
>
Tell
(
)
;
}
void
Put
(
Ch
)
{
RAPIDJSON_ASSERT
(
false
)
;
}
void
Flush
(
)
{
RAPIDJSON_ASSERT
(
false
)
;
}
Ch
*
PutBegin
(
)
{
RAPIDJSON_ASSERT
(
false
)
;
return
0
;
}
size_t
PutEnd
(
Ch
*
)
{
RAPIDJSON_ASSERT
(
false
)
;
return
0
;
}
private
:
AutoUTFInputStream
(
const
AutoUTFInputStream
&
)
;
AutoUTFInputStream
&
operator
=
(
const
AutoUTFInputStream
&
)
;
void
DetectType
(
)
{
const
unsigned
char
*
c
=
(
const
unsigned
char
*
)
is_
-
>
Peek4
(
)
;
if
(
!
c
)
return
;
unsigned
bom
=
c
[
0
]
|
(
c
[
1
]
<
<
8
)
|
(
c
[
2
]
<
<
16
)
|
(
c
[
3
]
<
<
24
)
;
hasBOM_
=
false
;
if
(
bom
=
=
0xFFFE0000
)
{
type_
=
kUTF32BE
;
hasBOM_
=
true
;
is_
-
>
Take
(
)
;
is_
-
>
Take
(
)
;
is_
-
>
Take
(
)
;
is_
-
>
Take
(
)
;
}
else
if
(
bom
=
=
0x0000FEFF
)
{
type_
=
kUTF32LE
;
hasBOM_
=
true
;
is_
-
>
Take
(
)
;
is_
-
>
Take
(
)
;
is_
-
>
Take
(
)
;
is_
-
>
Take
(
)
;
}
else
if
(
(
bom
&
0xFFFF
)
=
=
0xFFFE
)
{
type_
=
kUTF16BE
;
hasBOM_
=
true
;
is_
-
>
Take
(
)
;
is_
-
>
Take
(
)
;
}
else
if
(
(
bom
&
0xFFFF
)
=
=
0xFEFF
)
{
type_
=
kUTF16LE
;
hasBOM_
=
true
;
is_
-
>
Take
(
)
;
is_
-
>
Take
(
)
;
}
else
if
(
(
bom
&
0xFFFFFF
)
=
=
0xBFBBEF
)
{
type_
=
kUTF8
;
hasBOM_
=
true
;
is_
-
>
Take
(
)
;
is_
-
>
Take
(
)
;
is_
-
>
Take
(
)
;
}
if
(
!
hasBOM_
)
{
unsigned
pattern
=
(
c
[
0
]
?
1
:
0
)
|
(
c
[
1
]
?
2
:
0
)
|
(
c
[
2
]
?
4
:
0
)
|
(
c
[
3
]
?
8
:
0
)
;
switch
(
pattern
)
{
case
0x08
:
type_
=
kUTF32BE
;
break
;
case
0x0A
:
type_
=
kUTF16BE
;
break
;
case
0x01
:
type_
=
kUTF32LE
;
break
;
case
0x05
:
type_
=
kUTF16LE
;
break
;
case
0x0F
:
type_
=
kUTF8
;
break
;
default
:
break
;
}
}
switch
(
type_
)
{
case
kUTF8
:
break
;
case
kUTF16LE
:
case
kUTF16BE
:
RAPIDJSON_ASSERT
(
sizeof
(
Ch
)
>
=
2
)
;
break
;
case
kUTF32LE
:
case
kUTF32BE
:
RAPIDJSON_ASSERT
(
sizeof
(
Ch
)
>
=
4
)
;
break
;
default
:
RAPIDJSON_ASSERT
(
false
)
;
}
}
typedef
Ch
(
*
TakeFunc
)
(
InputByteStream
&
is
)
;
InputByteStream
*
is_
;
UTFType
type_
;
Ch
current_
;
TakeFunc
takeFunc_
;
bool
hasBOM_
;
}
;
template
<
typename
CharType
typename
OutputByteStream
>
class
AutoUTFOutputStream
{
RAPIDJSON_STATIC_ASSERT
(
sizeof
(
typename
OutputByteStream
:
:
Ch
)
=
=
1
)
;
public
:
typedef
CharType
Ch
;
AutoUTFOutputStream
(
OutputByteStream
&
os
UTFType
type
bool
putBOM
)
:
os_
(
&
os
)
type_
(
type
)
{
switch
(
type_
)
{
case
kUTF16LE
:
case
kUTF16BE
:
RAPIDJSON_ASSERT
(
sizeof
(
Ch
)
>
=
2
)
;
break
;
case
kUTF32LE
:
case
kUTF32BE
:
RAPIDJSON_ASSERT
(
sizeof
(
Ch
)
>
=
4
)
;
break
;
case
kUTF8
:
break
;
default
:
RAPIDJSON_ASSERT
(
false
)
;
}
static
const
PutFunc
f
[
]
=
{
RAPIDJSON_ENCODINGS_FUNC
(
Put
)
}
;
putFunc_
=
f
[
type_
]
;
if
(
putBOM
)
PutBOM
(
)
;
}
UTFType
GetType
(
)
const
{
return
type_
;
}
void
Put
(
Ch
c
)
{
putFunc_
(
*
os_
c
)
;
}
void
Flush
(
)
{
os_
-
>
Flush
(
)
;
}
Ch
Peek
(
)
const
{
RAPIDJSON_ASSERT
(
false
)
;
}
Ch
Take
(
)
{
RAPIDJSON_ASSERT
(
false
)
;
}
size_t
Tell
(
)
const
{
RAPIDJSON_ASSERT
(
false
)
;
return
0
;
}
Ch
*
PutBegin
(
)
{
RAPIDJSON_ASSERT
(
false
)
;
return
0
;
}
size_t
PutEnd
(
Ch
*
)
{
RAPIDJSON_ASSERT
(
false
)
;
return
0
;
}
private
:
AutoUTFOutputStream
(
const
AutoUTFOutputStream
&
)
;
AutoUTFOutputStream
&
operator
=
(
const
AutoUTFOutputStream
&
)
;
void
PutBOM
(
)
{
typedef
void
(
*
PutBOMFunc
)
(
OutputByteStream
&
)
;
static
const
PutBOMFunc
f
[
]
=
{
RAPIDJSON_ENCODINGS_FUNC
(
PutBOM
)
}
;
f
[
type_
]
(
*
os_
)
;
}
typedef
void
(
*
PutFunc
)
(
OutputByteStream
&
Ch
)
;
OutputByteStream
*
os_
;
UTFType
type_
;
PutFunc
putFunc_
;
}
;
#
undef
RAPIDJSON_ENCODINGS_FUNC
RAPIDJSON_NAMESPACE_END
#
ifdef
__GNUC__
RAPIDJSON_DIAG_POP
#
endif
#
endif
