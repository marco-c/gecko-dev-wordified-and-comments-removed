#
ifndef
RAPIDJSON_DOCUMENT_H_
#
define
RAPIDJSON_DOCUMENT_H_
#
include
"
reader
.
h
"
#
include
"
internal
/
meta
.
h
"
#
include
"
internal
/
strfunc
.
h
"
#
include
<
new
>
#
ifdef
_MSC_VER
RAPIDJSON_DIAG_PUSH
RAPIDJSON_DIAG_OFF
(
4127
)
#
elif
defined
(
__GNUC__
)
RAPIDJSON_DIAG_PUSH
RAPIDJSON_DIAG_OFF
(
effc
+
+
)
#
endif
#
ifndef
RAPIDJSON_HAS_STDSTRING
#
ifdef
RAPIDJSON_DOXYGEN_RUNNING
#
define
RAPIDJSON_HAS_STDSTRING
1
/
/
force
generation
of
documentation
#
else
#
define
RAPIDJSON_HAS_STDSTRING
0
/
/
no
std
:
:
string
support
by
default
#
endif
#
include
<
string
>
#
endif
#
ifndef
RAPIDJSON_NOMEMBERITERATORCLASS
#
include
<
iterator
>
#
endif
#
if
RAPIDJSON_HAS_CXX11_RVALUE_REFS
#
include
<
utility
>
#
endif
RAPIDJSON_NAMESPACE_BEGIN
template
<
typename
Encoding
typename
Allocator
>
class
GenericValue
;
template
<
typename
Encoding
typename
Allocator
>
struct
GenericMember
{
GenericValue
<
Encoding
Allocator
>
name
;
GenericValue
<
Encoding
Allocator
>
value
;
}
;
#
ifndef
RAPIDJSON_NOMEMBERITERATORCLASS
template
<
bool
Const
typename
Encoding
typename
Allocator
>
class
GenericMemberIterator
:
public
std
:
:
iterator
<
std
:
:
random_access_iterator_tag
typename
internal
:
:
MaybeAddConst
<
Const
GenericMember
<
Encoding
Allocator
>
>
:
:
Type
>
{
friend
class
GenericValue
<
Encoding
Allocator
>
;
template
<
bool
typename
typename
>
friend
class
GenericMemberIterator
;
typedef
GenericMember
<
Encoding
Allocator
>
PlainType
;
typedef
typename
internal
:
:
MaybeAddConst
<
Const
PlainType
>
:
:
Type
ValueType
;
typedef
std
:
:
iterator
<
std
:
:
random_access_iterator_tag
ValueType
>
BaseType
;
public
:
typedef
GenericMemberIterator
Iterator
;
typedef
GenericMemberIterator
<
true
Encoding
Allocator
>
ConstIterator
;
typedef
GenericMemberIterator
<
false
Encoding
Allocator
>
NonConstIterator
;
typedef
typename
BaseType
:
:
pointer
Pointer
;
typedef
typename
BaseType
:
:
reference
Reference
;
typedef
typename
BaseType
:
:
difference_type
DifferenceType
;
GenericMemberIterator
(
)
:
ptr_
(
)
{
}
GenericMemberIterator
(
const
NonConstIterator
&
it
)
:
ptr_
(
it
.
ptr_
)
{
}
Iterator
&
operator
+
+
(
)
{
+
+
ptr_
;
return
*
this
;
}
Iterator
&
operator
-
-
(
)
{
-
-
ptr_
;
return
*
this
;
}
Iterator
operator
+
+
(
int
)
{
Iterator
old
(
*
this
)
;
+
+
ptr_
;
return
old
;
}
Iterator
operator
-
-
(
int
)
{
Iterator
old
(
*
this
)
;
-
-
ptr_
;
return
old
;
}
Iterator
operator
+
(
DifferenceType
n
)
const
{
return
Iterator
(
ptr_
+
n
)
;
}
Iterator
operator
-
(
DifferenceType
n
)
const
{
return
Iterator
(
ptr_
-
n
)
;
}
Iterator
&
operator
+
=
(
DifferenceType
n
)
{
ptr_
+
=
n
;
return
*
this
;
}
Iterator
&
operator
-
=
(
DifferenceType
n
)
{
ptr_
-
=
n
;
return
*
this
;
}
bool
operator
=
=
(
ConstIterator
that
)
const
{
return
ptr_
=
=
that
.
ptr_
;
}
bool
operator
!
=
(
ConstIterator
that
)
const
{
return
ptr_
!
=
that
.
ptr_
;
}
bool
operator
<
=
(
ConstIterator
that
)
const
{
return
ptr_
<
=
that
.
ptr_
;
}
bool
operator
>
=
(
ConstIterator
that
)
const
{
return
ptr_
>
=
that
.
ptr_
;
}
bool
operator
<
(
ConstIterator
that
)
const
{
return
ptr_
<
that
.
ptr_
;
}
bool
operator
>
(
ConstIterator
that
)
const
{
return
ptr_
>
that
.
ptr_
;
}
Reference
operator
*
(
)
const
{
return
*
ptr_
;
}
Pointer
operator
-
>
(
)
const
{
return
ptr_
;
}
Reference
operator
[
]
(
DifferenceType
n
)
const
{
return
ptr_
[
n
]
;
}
DifferenceType
operator
-
(
ConstIterator
that
)
const
{
return
ptr_
-
that
.
ptr_
;
}
private
:
explicit
GenericMemberIterator
(
Pointer
p
)
:
ptr_
(
p
)
{
}
Pointer
ptr_
;
}
;
#
else
template
<
bool
Const
typename
Encoding
typename
Allocator
>
struct
GenericMemberIterator
;
template
<
typename
Encoding
typename
Allocator
>
struct
GenericMemberIterator
<
false
Encoding
Allocator
>
{
typedef
GenericMember
<
Encoding
Allocator
>
*
Iterator
;
}
;
template
<
typename
Encoding
typename
Allocator
>
struct
GenericMemberIterator
<
true
Encoding
Allocator
>
{
typedef
const
GenericMember
<
Encoding
Allocator
>
*
Iterator
;
}
;
#
endif
template
<
typename
CharType
>
struct
GenericStringRef
{
typedef
CharType
Ch
;
template
<
SizeType
N
>
GenericStringRef
(
const
CharType
(
&
str
)
[
N
]
)
RAPIDJSON_NOEXCEPT
:
s
(
str
)
length
(
N
-
1
)
{
}
explicit
GenericStringRef
(
const
CharType
*
str
)
:
s
(
str
)
length
(
internal
:
:
StrLen
(
str
)
)
{
RAPIDJSON_ASSERT
(
s
!
=
NULL
)
;
}
GenericStringRef
(
const
CharType
*
str
SizeType
len
)
:
s
(
str
)
length
(
len
)
{
RAPIDJSON_ASSERT
(
s
!
=
NULL
)
;
}
operator
const
Ch
*
(
)
const
{
return
s
;
}
const
Ch
*
const
s
;
const
SizeType
length
;
private
:
GenericStringRef
operator
=
(
const
GenericStringRef
&
)
;
template
<
SizeType
N
>
GenericStringRef
(
CharType
(
&
str
)
[
N
]
)
;
}
;
template
<
typename
CharType
>
inline
GenericStringRef
<
CharType
>
StringRef
(
const
CharType
*
str
)
{
return
GenericStringRef
<
CharType
>
(
str
internal
:
:
StrLen
(
str
)
)
;
}
template
<
typename
CharType
>
inline
GenericStringRef
<
CharType
>
StringRef
(
const
CharType
*
str
size_t
length
)
{
return
GenericStringRef
<
CharType
>
(
str
SizeType
(
length
)
)
;
}
#
if
RAPIDJSON_HAS_STDSTRING
template
<
typename
CharType
>
inline
GenericStringRef
<
CharType
>
StringRef
(
const
std
:
:
basic_string
<
CharType
>
&
str
)
{
return
GenericStringRef
<
CharType
>
(
str
.
data
(
)
SizeType
(
str
.
size
(
)
)
)
;
}
#
endif
namespace
internal
{
template
<
typename
T
typename
Encoding
=
void
typename
Allocator
=
void
>
struct
IsGenericValueImpl
:
FalseType
{
}
;
template
<
typename
T
>
struct
IsGenericValueImpl
<
T
typename
Void
<
typename
T
:
:
EncodingType
>
:
:
Type
typename
Void
<
typename
T
:
:
AllocatorType
>
:
:
Type
>
:
IsBaseOf
<
GenericValue
<
typename
T
:
:
EncodingType
typename
T
:
:
AllocatorType
>
T
>
:
:
Type
{
}
;
template
<
typename
T
>
struct
IsGenericValue
:
IsGenericValueImpl
<
T
>
:
:
Type
{
}
;
}
template
<
typename
Encoding
typename
Allocator
=
MemoryPoolAllocator
<
>
>
class
GenericValue
{
public
:
typedef
GenericMember
<
Encoding
Allocator
>
Member
;
typedef
Encoding
EncodingType
;
typedef
Allocator
AllocatorType
;
typedef
typename
Encoding
:
:
Ch
Ch
;
typedef
GenericStringRef
<
Ch
>
StringRefType
;
typedef
typename
GenericMemberIterator
<
false
Encoding
Allocator
>
:
:
Iterator
MemberIterator
;
typedef
typename
GenericMemberIterator
<
true
Encoding
Allocator
>
:
:
Iterator
ConstMemberIterator
;
typedef
GenericValue
*
ValueIterator
;
typedef
const
GenericValue
*
ConstValueIterator
;
GenericValue
(
)
RAPIDJSON_NOEXCEPT
:
data_
(
)
flags_
(
kNullFlag
)
{
}
#
if
RAPIDJSON_HAS_CXX11_RVALUE_REFS
GenericValue
(
GenericValue
&
&
rhs
)
RAPIDJSON_NOEXCEPT
:
data_
(
rhs
.
data_
)
flags_
(
rhs
.
flags_
)
{
rhs
.
flags_
=
kNullFlag
;
}
#
endif
private
:
GenericValue
(
const
GenericValue
&
rhs
)
;
public
:
explicit
GenericValue
(
Type
type
)
RAPIDJSON_NOEXCEPT
:
data_
(
)
flags_
(
)
{
static
const
unsigned
defaultFlags
[
7
]
=
{
kNullFlag
kFalseFlag
kTrueFlag
kObjectFlag
kArrayFlag
kShortStringFlag
kNumberAnyFlag
}
;
RAPIDJSON_ASSERT
(
type
<
=
kNumberType
)
;
flags_
=
defaultFlags
[
type
]
;
if
(
type
=
=
kStringType
)
data_
.
ss
.
SetLength
(
0
)
;
}
template
<
typename
SourceAllocator
>
GenericValue
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
rhs
Allocator
&
allocator
)
;
#
ifndef
RAPIDJSON_DOXYGEN_RUNNING
template
<
typename
T
>
explicit
GenericValue
(
T
b
RAPIDJSON_ENABLEIF
(
(
internal
:
:
IsSame
<
T
bool
>
)
)
)
RAPIDJSON_NOEXCEPT
#
else
explicit
GenericValue
(
bool
b
)
RAPIDJSON_NOEXCEPT
#
endif
:
data_
(
)
flags_
(
b
?
kTrueFlag
:
kFalseFlag
)
{
RAPIDJSON_STATIC_ASSERT
(
(
internal
:
:
IsSame
<
bool
T
>
:
:
Value
)
)
;
}
explicit
GenericValue
(
int
i
)
RAPIDJSON_NOEXCEPT
:
data_
(
)
flags_
(
kNumberIntFlag
)
{
data_
.
n
.
i64
=
i
;
if
(
i
>
=
0
)
flags_
|
=
kUintFlag
|
kUint64Flag
;
}
explicit
GenericValue
(
unsigned
u
)
RAPIDJSON_NOEXCEPT
:
data_
(
)
flags_
(
kNumberUintFlag
)
{
data_
.
n
.
u64
=
u
;
if
(
!
(
u
&
0x80000000
)
)
flags_
|
=
kIntFlag
|
kInt64Flag
;
}
explicit
GenericValue
(
int64_t
i64
)
RAPIDJSON_NOEXCEPT
:
data_
(
)
flags_
(
kNumberInt64Flag
)
{
data_
.
n
.
i64
=
i64
;
if
(
i64
>
=
0
)
{
flags_
|
=
kNumberUint64Flag
;
if
(
!
(
static_cast
<
uint64_t
>
(
i64
)
&
RAPIDJSON_UINT64_C2
(
0xFFFFFFFF
0x00000000
)
)
)
flags_
|
=
kUintFlag
;
if
(
!
(
static_cast
<
uint64_t
>
(
i64
)
&
RAPIDJSON_UINT64_C2
(
0xFFFFFFFF
0x80000000
)
)
)
flags_
|
=
kIntFlag
;
}
else
if
(
i64
>
=
static_cast
<
int64_t
>
(
RAPIDJSON_UINT64_C2
(
0xFFFFFFFF
0x80000000
)
)
)
flags_
|
=
kIntFlag
;
}
explicit
GenericValue
(
uint64_t
u64
)
RAPIDJSON_NOEXCEPT
:
data_
(
)
flags_
(
kNumberUint64Flag
)
{
data_
.
n
.
u64
=
u64
;
if
(
!
(
u64
&
RAPIDJSON_UINT64_C2
(
0x80000000
0x00000000
)
)
)
flags_
|
=
kInt64Flag
;
if
(
!
(
u64
&
RAPIDJSON_UINT64_C2
(
0xFFFFFFFF
0x00000000
)
)
)
flags_
|
=
kUintFlag
;
if
(
!
(
u64
&
RAPIDJSON_UINT64_C2
(
0xFFFFFFFF
0x80000000
)
)
)
flags_
|
=
kIntFlag
;
}
explicit
GenericValue
(
double
d
)
RAPIDJSON_NOEXCEPT
:
data_
(
)
flags_
(
kNumberDoubleFlag
)
{
data_
.
n
.
d
=
d
;
}
GenericValue
(
const
Ch
*
s
SizeType
length
)
RAPIDJSON_NOEXCEPT
:
data_
(
)
flags_
(
)
{
SetStringRaw
(
StringRef
(
s
length
)
)
;
}
explicit
GenericValue
(
StringRefType
s
)
RAPIDJSON_NOEXCEPT
:
data_
(
)
flags_
(
)
{
SetStringRaw
(
s
)
;
}
GenericValue
(
const
Ch
*
s
SizeType
length
Allocator
&
allocator
)
:
data_
(
)
flags_
(
)
{
SetStringRaw
(
StringRef
(
s
length
)
allocator
)
;
}
GenericValue
(
const
Ch
*
s
Allocator
&
allocator
)
:
data_
(
)
flags_
(
)
{
SetStringRaw
(
StringRef
(
s
)
allocator
)
;
}
#
if
RAPIDJSON_HAS_STDSTRING
GenericValue
(
const
std
:
:
basic_string
<
Ch
>
&
s
Allocator
&
allocator
)
:
data_
(
)
flags_
(
)
{
SetStringRaw
(
StringRef
(
s
)
allocator
)
;
}
#
endif
~
GenericValue
(
)
{
if
(
Allocator
:
:
kNeedFree
)
{
switch
(
flags_
)
{
case
kArrayFlag
:
for
(
GenericValue
*
v
=
data_
.
a
.
elements
;
v
!
=
data_
.
a
.
elements
+
data_
.
a
.
size
;
+
+
v
)
v
-
>
~
GenericValue
(
)
;
Allocator
:
:
Free
(
data_
.
a
.
elements
)
;
break
;
case
kObjectFlag
:
for
(
MemberIterator
m
=
MemberBegin
(
)
;
m
!
=
MemberEnd
(
)
;
+
+
m
)
m
-
>
~
Member
(
)
;
Allocator
:
:
Free
(
data_
.
o
.
members
)
;
break
;
case
kCopyStringFlag
:
Allocator
:
:
Free
(
const_cast
<
Ch
*
>
(
data_
.
s
.
str
)
)
;
break
;
default
:
break
;
}
}
}
GenericValue
&
operator
=
(
GenericValue
&
rhs
)
RAPIDJSON_NOEXCEPT
{
RAPIDJSON_ASSERT
(
this
!
=
&
rhs
)
;
this
-
>
~
GenericValue
(
)
;
RawAssign
(
rhs
)
;
return
*
this
;
}
#
if
RAPIDJSON_HAS_CXX11_RVALUE_REFS
GenericValue
&
operator
=
(
GenericValue
&
&
rhs
)
RAPIDJSON_NOEXCEPT
{
return
*
this
=
rhs
.
Move
(
)
;
}
#
endif
GenericValue
&
operator
=
(
StringRefType
str
)
RAPIDJSON_NOEXCEPT
{
GenericValue
s
(
str
)
;
return
*
this
=
s
;
}
template
<
typename
T
>
RAPIDJSON_DISABLEIF_RETURN
(
(
internal
:
:
IsPointer
<
T
>
)
(
GenericValue
&
)
)
operator
=
(
T
value
)
{
GenericValue
v
(
value
)
;
return
*
this
=
v
;
}
template
<
typename
SourceAllocator
>
GenericValue
&
CopyFrom
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
rhs
Allocator
&
allocator
)
{
RAPIDJSON_ASSERT
(
(
void
*
)
this
!
=
(
void
const
*
)
&
rhs
)
;
this
-
>
~
GenericValue
(
)
;
new
(
this
)
GenericValue
(
rhs
allocator
)
;
return
*
this
;
}
GenericValue
&
Swap
(
GenericValue
&
other
)
RAPIDJSON_NOEXCEPT
{
GenericValue
temp
;
temp
.
RawAssign
(
*
this
)
;
RawAssign
(
other
)
;
other
.
RawAssign
(
temp
)
;
return
*
this
;
}
GenericValue
&
Move
(
)
RAPIDJSON_NOEXCEPT
{
return
*
this
;
}
template
<
typename
SourceAllocator
>
bool
operator
=
=
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
rhs
)
const
{
typedef
GenericValue
<
Encoding
SourceAllocator
>
RhsType
;
if
(
GetType
(
)
!
=
rhs
.
GetType
(
)
)
return
false
;
switch
(
GetType
(
)
)
{
case
kObjectType
:
if
(
data_
.
o
.
size
!
=
rhs
.
data_
.
o
.
size
)
return
false
;
for
(
ConstMemberIterator
lhsMemberItr
=
MemberBegin
(
)
;
lhsMemberItr
!
=
MemberEnd
(
)
;
+
+
lhsMemberItr
)
{
typename
RhsType
:
:
ConstMemberIterator
rhsMemberItr
=
rhs
.
FindMember
(
lhsMemberItr
-
>
name
)
;
if
(
rhsMemberItr
=
=
rhs
.
MemberEnd
(
)
|
|
lhsMemberItr
-
>
value
!
=
rhsMemberItr
-
>
value
)
return
false
;
}
return
true
;
case
kArrayType
:
if
(
data_
.
a
.
size
!
=
rhs
.
data_
.
a
.
size
)
return
false
;
for
(
SizeType
i
=
0
;
i
<
data_
.
a
.
size
;
i
+
+
)
if
(
(
*
this
)
[
i
]
!
=
rhs
[
i
]
)
return
false
;
return
true
;
case
kStringType
:
return
StringEqual
(
rhs
)
;
case
kNumberType
:
if
(
IsDouble
(
)
|
|
rhs
.
IsDouble
(
)
)
return
GetDouble
(
)
=
=
rhs
.
GetDouble
(
)
;
else
return
data_
.
n
.
u64
=
=
rhs
.
data_
.
n
.
u64
;
default
:
return
true
;
}
}
bool
operator
=
=
(
const
Ch
*
rhs
)
const
{
return
*
this
=
=
GenericValue
(
StringRef
(
rhs
)
)
;
}
#
if
RAPIDJSON_HAS_STDSTRING
bool
operator
=
=
(
const
std
:
:
basic_string
<
Ch
>
&
rhs
)
const
{
return
*
this
=
=
GenericValue
(
StringRef
(
rhs
)
)
;
}
#
endif
template
<
typename
T
>
RAPIDJSON_DISABLEIF_RETURN
(
(
internal
:
:
OrExpr
<
internal
:
:
IsPointer
<
T
>
internal
:
:
IsGenericValue
<
T
>
>
)
(
bool
)
)
operator
=
=
(
const
T
&
rhs
)
const
{
return
*
this
=
=
GenericValue
(
rhs
)
;
}
template
<
typename
SourceAllocator
>
bool
operator
!
=
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
rhs
)
const
{
return
!
(
*
this
=
=
rhs
)
;
}
bool
operator
!
=
(
const
Ch
*
rhs
)
const
{
return
!
(
*
this
=
=
rhs
)
;
}
template
<
typename
T
>
RAPIDJSON_DISABLEIF_RETURN
(
(
internal
:
:
IsGenericValue
<
T
>
)
(
bool
)
)
operator
!
=
(
const
T
&
rhs
)
const
{
return
!
(
*
this
=
=
rhs
)
;
}
template
<
typename
T
>
friend
RAPIDJSON_DISABLEIF_RETURN
(
(
internal
:
:
IsGenericValue
<
T
>
)
(
bool
)
)
operator
=
=
(
const
T
&
lhs
const
GenericValue
&
rhs
)
{
return
rhs
=
=
lhs
;
}
template
<
typename
T
>
friend
RAPIDJSON_DISABLEIF_RETURN
(
(
internal
:
:
IsGenericValue
<
T
>
)
(
bool
)
)
operator
!
=
(
const
T
&
lhs
const
GenericValue
&
rhs
)
{
return
!
(
rhs
=
=
lhs
)
;
}
Type
GetType
(
)
const
{
return
static_cast
<
Type
>
(
flags_
&
kTypeMask
)
;
}
bool
IsNull
(
)
const
{
return
flags_
=
=
kNullFlag
;
}
bool
IsFalse
(
)
const
{
return
flags_
=
=
kFalseFlag
;
}
bool
IsTrue
(
)
const
{
return
flags_
=
=
kTrueFlag
;
}
bool
IsBool
(
)
const
{
return
(
flags_
&
kBoolFlag
)
!
=
0
;
}
bool
IsObject
(
)
const
{
return
flags_
=
=
kObjectFlag
;
}
bool
IsArray
(
)
const
{
return
flags_
=
=
kArrayFlag
;
}
bool
IsNumber
(
)
const
{
return
(
flags_
&
kNumberFlag
)
!
=
0
;
}
bool
IsInt
(
)
const
{
return
(
flags_
&
kIntFlag
)
!
=
0
;
}
bool
IsUint
(
)
const
{
return
(
flags_
&
kUintFlag
)
!
=
0
;
}
bool
IsInt64
(
)
const
{
return
(
flags_
&
kInt64Flag
)
!
=
0
;
}
bool
IsUint64
(
)
const
{
return
(
flags_
&
kUint64Flag
)
!
=
0
;
}
bool
IsDouble
(
)
const
{
return
(
flags_
&
kDoubleFlag
)
!
=
0
;
}
bool
IsString
(
)
const
{
return
(
flags_
&
kStringFlag
)
!
=
0
;
}
GenericValue
&
SetNull
(
)
{
this
-
>
~
GenericValue
(
)
;
new
(
this
)
GenericValue
(
)
;
return
*
this
;
}
bool
GetBool
(
)
const
{
RAPIDJSON_ASSERT
(
IsBool
(
)
)
;
return
flags_
=
=
kTrueFlag
;
}
GenericValue
&
SetBool
(
bool
b
)
{
this
-
>
~
GenericValue
(
)
;
new
(
this
)
GenericValue
(
b
)
;
return
*
this
;
}
GenericValue
&
SetObject
(
)
{
this
-
>
~
GenericValue
(
)
;
new
(
this
)
GenericValue
(
kObjectType
)
;
return
*
this
;
}
SizeType
MemberCount
(
)
const
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
return
data_
.
o
.
size
;
}
bool
ObjectEmpty
(
)
const
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
return
data_
.
o
.
size
=
=
0
;
}
template
<
typename
T
>
RAPIDJSON_DISABLEIF_RETURN
(
(
internal
:
:
NotExpr
<
internal
:
:
IsSame
<
typename
internal
:
:
RemoveConst
<
T
>
:
:
Type
Ch
>
>
)
(
GenericValue
&
)
)
operator
[
]
(
T
*
name
)
{
GenericValue
n
(
StringRef
(
name
)
)
;
return
(
*
this
)
[
n
]
;
}
template
<
typename
T
>
RAPIDJSON_DISABLEIF_RETURN
(
(
internal
:
:
NotExpr
<
internal
:
:
IsSame
<
typename
internal
:
:
RemoveConst
<
T
>
:
:
Type
Ch
>
>
)
(
const
GenericValue
&
)
)
operator
[
]
(
T
*
name
)
const
{
return
const_cast
<
GenericValue
&
>
(
*
this
)
[
name
]
;
}
template
<
typename
SourceAllocator
>
GenericValue
&
operator
[
]
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
name
)
{
MemberIterator
member
=
FindMember
(
name
)
;
if
(
member
!
=
MemberEnd
(
)
)
return
member
-
>
value
;
else
{
RAPIDJSON_ASSERT
(
false
)
;
static
GenericValue
NullValue
;
return
NullValue
;
}
}
template
<
typename
SourceAllocator
>
const
GenericValue
&
operator
[
]
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
name
)
const
{
return
const_cast
<
GenericValue
&
>
(
*
this
)
[
name
]
;
}
ConstMemberIterator
MemberBegin
(
)
const
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
return
ConstMemberIterator
(
data_
.
o
.
members
)
;
}
ConstMemberIterator
MemberEnd
(
)
const
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
return
ConstMemberIterator
(
data_
.
o
.
members
+
data_
.
o
.
size
)
;
}
MemberIterator
MemberBegin
(
)
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
return
MemberIterator
(
data_
.
o
.
members
)
;
}
MemberIterator
MemberEnd
(
)
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
return
MemberIterator
(
data_
.
o
.
members
+
data_
.
o
.
size
)
;
}
bool
HasMember
(
const
Ch
*
name
)
const
{
return
FindMember
(
name
)
!
=
MemberEnd
(
)
;
}
template
<
typename
SourceAllocator
>
bool
HasMember
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
name
)
const
{
return
FindMember
(
name
)
!
=
MemberEnd
(
)
;
}
MemberIterator
FindMember
(
const
Ch
*
name
)
{
GenericValue
n
(
StringRef
(
name
)
)
;
return
FindMember
(
n
)
;
}
ConstMemberIterator
FindMember
(
const
Ch
*
name
)
const
{
return
const_cast
<
GenericValue
&
>
(
*
this
)
.
FindMember
(
name
)
;
}
template
<
typename
SourceAllocator
>
MemberIterator
FindMember
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
name
)
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
RAPIDJSON_ASSERT
(
name
.
IsString
(
)
)
;
MemberIterator
member
=
MemberBegin
(
)
;
for
(
;
member
!
=
MemberEnd
(
)
;
+
+
member
)
if
(
name
.
StringEqual
(
member
-
>
name
)
)
break
;
return
member
;
}
template
<
typename
SourceAllocator
>
ConstMemberIterator
FindMember
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
name
)
const
{
return
const_cast
<
GenericValue
&
>
(
*
this
)
.
FindMember
(
name
)
;
}
GenericValue
&
AddMember
(
GenericValue
&
name
GenericValue
&
value
Allocator
&
allocator
)
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
RAPIDJSON_ASSERT
(
name
.
IsString
(
)
)
;
Object
&
o
=
data_
.
o
;
if
(
o
.
size
>
=
o
.
capacity
)
{
if
(
o
.
capacity
=
=
0
)
{
o
.
capacity
=
kDefaultObjectCapacity
;
o
.
members
=
reinterpret_cast
<
Member
*
>
(
allocator
.
Malloc
(
o
.
capacity
*
sizeof
(
Member
)
)
)
;
}
else
{
SizeType
oldCapacity
=
o
.
capacity
;
o
.
capacity
+
=
(
oldCapacity
+
1
)
/
2
;
o
.
members
=
reinterpret_cast
<
Member
*
>
(
allocator
.
Realloc
(
o
.
members
oldCapacity
*
sizeof
(
Member
)
o
.
capacity
*
sizeof
(
Member
)
)
)
;
}
}
o
.
members
[
o
.
size
]
.
name
.
RawAssign
(
name
)
;
o
.
members
[
o
.
size
]
.
value
.
RawAssign
(
value
)
;
o
.
size
+
+
;
return
*
this
;
}
#
if
RAPIDJSON_HAS_CXX11_RVALUE_REFS
GenericValue
&
AddMember
(
GenericValue
&
&
name
GenericValue
&
&
value
Allocator
&
allocator
)
{
return
AddMember
(
name
value
allocator
)
;
}
GenericValue
&
AddMember
(
GenericValue
&
&
name
GenericValue
&
value
Allocator
&
allocator
)
{
return
AddMember
(
name
value
allocator
)
;
}
GenericValue
&
AddMember
(
GenericValue
&
name
GenericValue
&
&
value
Allocator
&
allocator
)
{
return
AddMember
(
name
value
allocator
)
;
}
GenericValue
&
AddMember
(
StringRefType
name
GenericValue
&
&
value
Allocator
&
allocator
)
{
GenericValue
n
(
name
)
;
return
AddMember
(
n
value
allocator
)
;
}
#
endif
GenericValue
&
AddMember
(
StringRefType
name
GenericValue
&
value
Allocator
&
allocator
)
{
GenericValue
n
(
name
)
;
return
AddMember
(
n
value
allocator
)
;
}
GenericValue
&
AddMember
(
StringRefType
name
StringRefType
value
Allocator
&
allocator
)
{
GenericValue
v
(
value
)
;
return
AddMember
(
name
v
allocator
)
;
}
template
<
typename
T
>
RAPIDJSON_DISABLEIF_RETURN
(
(
internal
:
:
OrExpr
<
internal
:
:
IsPointer
<
T
>
internal
:
:
IsGenericValue
<
T
>
>
)
(
GenericValue
&
)
)
AddMember
(
StringRefType
name
T
value
Allocator
&
allocator
)
{
GenericValue
n
(
name
)
;
GenericValue
v
(
value
)
;
return
AddMember
(
n
v
allocator
)
;
}
void
RemoveAllMembers
(
)
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
for
(
MemberIterator
m
=
MemberBegin
(
)
;
m
!
=
MemberEnd
(
)
;
+
+
m
)
m
-
>
~
Member
(
)
;
data_
.
o
.
size
=
0
;
}
bool
RemoveMember
(
const
Ch
*
name
)
{
GenericValue
n
(
StringRef
(
name
)
)
;
return
RemoveMember
(
n
)
;
}
template
<
typename
SourceAllocator
>
bool
RemoveMember
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
name
)
{
MemberIterator
m
=
FindMember
(
name
)
;
if
(
m
!
=
MemberEnd
(
)
)
{
RemoveMember
(
m
)
;
return
true
;
}
else
return
false
;
}
MemberIterator
RemoveMember
(
MemberIterator
m
)
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
RAPIDJSON_ASSERT
(
data_
.
o
.
size
>
0
)
;
RAPIDJSON_ASSERT
(
data_
.
o
.
members
!
=
0
)
;
RAPIDJSON_ASSERT
(
m
>
=
MemberBegin
(
)
&
&
m
<
MemberEnd
(
)
)
;
MemberIterator
last
(
data_
.
o
.
members
+
(
data_
.
o
.
size
-
1
)
)
;
if
(
data_
.
o
.
size
>
1
&
&
m
!
=
last
)
{
*
m
=
*
last
;
}
else
{
m
-
>
~
Member
(
)
;
}
-
-
data_
.
o
.
size
;
return
m
;
}
MemberIterator
EraseMember
(
ConstMemberIterator
pos
)
{
return
EraseMember
(
pos
pos
+
1
)
;
}
MemberIterator
EraseMember
(
ConstMemberIterator
first
ConstMemberIterator
last
)
{
RAPIDJSON_ASSERT
(
IsObject
(
)
)
;
RAPIDJSON_ASSERT
(
data_
.
o
.
size
>
0
)
;
RAPIDJSON_ASSERT
(
data_
.
o
.
members
!
=
0
)
;
RAPIDJSON_ASSERT
(
first
>
=
MemberBegin
(
)
)
;
RAPIDJSON_ASSERT
(
first
<
=
last
)
;
RAPIDJSON_ASSERT
(
last
<
=
MemberEnd
(
)
)
;
MemberIterator
pos
=
MemberBegin
(
)
+
(
first
-
MemberBegin
(
)
)
;
for
(
MemberIterator
itr
=
pos
;
itr
!
=
last
;
+
+
itr
)
itr
-
>
~
Member
(
)
;
std
:
:
memmove
(
&
*
pos
&
*
last
(
MemberEnd
(
)
-
last
)
*
sizeof
(
Member
)
)
;
data_
.
o
.
size
-
=
(
last
-
first
)
;
return
pos
;
}
GenericValue
&
SetArray
(
)
{
this
-
>
~
GenericValue
(
)
;
new
(
this
)
GenericValue
(
kArrayType
)
;
return
*
this
;
}
SizeType
Size
(
)
const
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
return
data_
.
a
.
size
;
}
SizeType
Capacity
(
)
const
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
return
data_
.
a
.
capacity
;
}
bool
Empty
(
)
const
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
return
data_
.
a
.
size
=
=
0
;
}
void
Clear
(
)
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
for
(
SizeType
i
=
0
;
i
<
data_
.
a
.
size
;
+
+
i
)
data_
.
a
.
elements
[
i
]
.
~
GenericValue
(
)
;
data_
.
a
.
size
=
0
;
}
GenericValue
&
operator
[
]
(
SizeType
index
)
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
RAPIDJSON_ASSERT
(
index
<
data_
.
a
.
size
)
;
return
data_
.
a
.
elements
[
index
]
;
}
const
GenericValue
&
operator
[
]
(
SizeType
index
)
const
{
return
const_cast
<
GenericValue
&
>
(
*
this
)
[
index
]
;
}
ValueIterator
Begin
(
)
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
return
data_
.
a
.
elements
;
}
ValueIterator
End
(
)
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
return
data_
.
a
.
elements
+
data_
.
a
.
size
;
}
ConstValueIterator
Begin
(
)
const
{
return
const_cast
<
GenericValue
&
>
(
*
this
)
.
Begin
(
)
;
}
ConstValueIterator
End
(
)
const
{
return
const_cast
<
GenericValue
&
>
(
*
this
)
.
End
(
)
;
}
GenericValue
&
Reserve
(
SizeType
newCapacity
Allocator
&
allocator
)
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
if
(
newCapacity
>
data_
.
a
.
capacity
)
{
data_
.
a
.
elements
=
(
GenericValue
*
)
allocator
.
Realloc
(
data_
.
a
.
elements
data_
.
a
.
capacity
*
sizeof
(
GenericValue
)
newCapacity
*
sizeof
(
GenericValue
)
)
;
data_
.
a
.
capacity
=
newCapacity
;
}
return
*
this
;
}
GenericValue
&
PushBack
(
GenericValue
&
value
Allocator
&
allocator
)
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
if
(
data_
.
a
.
size
>
=
data_
.
a
.
capacity
)
Reserve
(
data_
.
a
.
capacity
=
=
0
?
kDefaultArrayCapacity
:
(
data_
.
a
.
capacity
+
(
data_
.
a
.
capacity
+
1
)
/
2
)
allocator
)
;
data_
.
a
.
elements
[
data_
.
a
.
size
+
+
]
.
RawAssign
(
value
)
;
return
*
this
;
}
#
if
RAPIDJSON_HAS_CXX11_RVALUE_REFS
GenericValue
&
PushBack
(
GenericValue
&
&
value
Allocator
&
allocator
)
{
return
PushBack
(
value
allocator
)
;
}
#
endif
GenericValue
&
PushBack
(
StringRefType
value
Allocator
&
allocator
)
{
return
(
*
this
)
.
template
PushBack
<
StringRefType
>
(
value
allocator
)
;
}
template
<
typename
T
>
RAPIDJSON_DISABLEIF_RETURN
(
(
internal
:
:
OrExpr
<
internal
:
:
IsPointer
<
T
>
internal
:
:
IsGenericValue
<
T
>
>
)
(
GenericValue
&
)
)
PushBack
(
T
value
Allocator
&
allocator
)
{
GenericValue
v
(
value
)
;
return
PushBack
(
v
allocator
)
;
}
GenericValue
&
PopBack
(
)
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
RAPIDJSON_ASSERT
(
!
Empty
(
)
)
;
data_
.
a
.
elements
[
-
-
data_
.
a
.
size
]
.
~
GenericValue
(
)
;
return
*
this
;
}
ValueIterator
Erase
(
ConstValueIterator
pos
)
{
return
Erase
(
pos
pos
+
1
)
;
}
ValueIterator
Erase
(
ConstValueIterator
first
ConstValueIterator
last
)
{
RAPIDJSON_ASSERT
(
IsArray
(
)
)
;
RAPIDJSON_ASSERT
(
data_
.
a
.
size
>
0
)
;
RAPIDJSON_ASSERT
(
data_
.
a
.
elements
!
=
0
)
;
RAPIDJSON_ASSERT
(
first
>
=
Begin
(
)
)
;
RAPIDJSON_ASSERT
(
first
<
=
last
)
;
RAPIDJSON_ASSERT
(
last
<
=
End
(
)
)
;
ValueIterator
pos
=
Begin
(
)
+
(
first
-
Begin
(
)
)
;
for
(
ValueIterator
itr
=
pos
;
itr
!
=
last
;
+
+
itr
)
itr
-
>
~
GenericValue
(
)
;
std
:
:
memmove
(
pos
last
(
End
(
)
-
last
)
*
sizeof
(
GenericValue
)
)
;
data_
.
a
.
size
-
=
(
last
-
first
)
;
return
pos
;
}
int
GetInt
(
)
const
{
RAPIDJSON_ASSERT
(
flags_
&
kIntFlag
)
;
return
data_
.
n
.
i
.
i
;
}
unsigned
GetUint
(
)
const
{
RAPIDJSON_ASSERT
(
flags_
&
kUintFlag
)
;
return
data_
.
n
.
u
.
u
;
}
int64_t
GetInt64
(
)
const
{
RAPIDJSON_ASSERT
(
flags_
&
kInt64Flag
)
;
return
data_
.
n
.
i64
;
}
uint64_t
GetUint64
(
)
const
{
RAPIDJSON_ASSERT
(
flags_
&
kUint64Flag
)
;
return
data_
.
n
.
u64
;
}
double
GetDouble
(
)
const
{
RAPIDJSON_ASSERT
(
IsNumber
(
)
)
;
if
(
(
flags_
&
kDoubleFlag
)
!
=
0
)
return
data_
.
n
.
d
;
if
(
(
flags_
&
kIntFlag
)
!
=
0
)
return
data_
.
n
.
i
.
i
;
if
(
(
flags_
&
kUintFlag
)
!
=
0
)
return
data_
.
n
.
u
.
u
;
if
(
(
flags_
&
kInt64Flag
)
!
=
0
)
return
(
double
)
data_
.
n
.
i64
;
RAPIDJSON_ASSERT
(
(
flags_
&
kUint64Flag
)
!
=
0
)
;
return
(
double
)
data_
.
n
.
u64
;
}
GenericValue
&
SetInt
(
int
i
)
{
this
-
>
~
GenericValue
(
)
;
new
(
this
)
GenericValue
(
i
)
;
return
*
this
;
}
GenericValue
&
SetUint
(
unsigned
u
)
{
this
-
>
~
GenericValue
(
)
;
new
(
this
)
GenericValue
(
u
)
;
return
*
this
;
}
GenericValue
&
SetInt64
(
int64_t
i64
)
{
this
-
>
~
GenericValue
(
)
;
new
(
this
)
GenericValue
(
i64
)
;
return
*
this
;
}
GenericValue
&
SetUint64
(
uint64_t
u64
)
{
this
-
>
~
GenericValue
(
)
;
new
(
this
)
GenericValue
(
u64
)
;
return
*
this
;
}
GenericValue
&
SetDouble
(
double
d
)
{
this
-
>
~
GenericValue
(
)
;
new
(
this
)
GenericValue
(
d
)
;
return
*
this
;
}
const
Ch
*
GetString
(
)
const
{
RAPIDJSON_ASSERT
(
IsString
(
)
)
;
return
(
(
flags_
&
kInlineStrFlag
)
?
data_
.
ss
.
str
:
data_
.
s
.
str
)
;
}
SizeType
GetStringLength
(
)
const
{
RAPIDJSON_ASSERT
(
IsString
(
)
)
;
return
(
(
flags_
&
kInlineStrFlag
)
?
(
data_
.
ss
.
GetLength
(
)
)
:
data_
.
s
.
length
)
;
}
GenericValue
&
SetString
(
const
Ch
*
s
SizeType
length
)
{
return
SetString
(
StringRef
(
s
length
)
)
;
}
GenericValue
&
SetString
(
StringRefType
s
)
{
this
-
>
~
GenericValue
(
)
;
SetStringRaw
(
s
)
;
return
*
this
;
}
GenericValue
&
SetString
(
const
Ch
*
s
SizeType
length
Allocator
&
allocator
)
{
this
-
>
~
GenericValue
(
)
;
SetStringRaw
(
StringRef
(
s
length
)
allocator
)
;
return
*
this
;
}
GenericValue
&
SetString
(
const
Ch
*
s
Allocator
&
allocator
)
{
return
SetString
(
s
internal
:
:
StrLen
(
s
)
allocator
)
;
}
#
if
RAPIDJSON_HAS_STDSTRING
GenericValue
&
SetString
(
const
std
:
:
basic_string
<
Ch
>
&
s
Allocator
&
allocator
)
{
return
SetString
(
s
.
data
(
)
s
.
size
(
)
allocator
)
;
}
#
endif
template
<
typename
Handler
>
bool
Accept
(
Handler
&
handler
)
const
{
switch
(
GetType
(
)
)
{
case
kNullType
:
return
handler
.
Null
(
)
;
case
kFalseType
:
return
handler
.
Bool
(
false
)
;
case
kTrueType
:
return
handler
.
Bool
(
true
)
;
case
kObjectType
:
if
(
!
handler
.
StartObject
(
)
)
return
false
;
for
(
ConstMemberIterator
m
=
MemberBegin
(
)
;
m
!
=
MemberEnd
(
)
;
+
+
m
)
{
RAPIDJSON_ASSERT
(
m
-
>
name
.
IsString
(
)
)
;
if
(
!
handler
.
Key
(
m
-
>
name
.
GetString
(
)
m
-
>
name
.
GetStringLength
(
)
(
m
-
>
name
.
flags_
&
kCopyFlag
)
!
=
0
)
)
return
false
;
if
(
!
m
-
>
value
.
Accept
(
handler
)
)
return
false
;
}
return
handler
.
EndObject
(
data_
.
o
.
size
)
;
case
kArrayType
:
if
(
!
handler
.
StartArray
(
)
)
return
false
;
for
(
GenericValue
*
v
=
data_
.
a
.
elements
;
v
!
=
data_
.
a
.
elements
+
data_
.
a
.
size
;
+
+
v
)
if
(
!
v
-
>
Accept
(
handler
)
)
return
false
;
return
handler
.
EndArray
(
data_
.
a
.
size
)
;
case
kStringType
:
return
handler
.
String
(
GetString
(
)
GetStringLength
(
)
(
flags_
&
kCopyFlag
)
!
=
0
)
;
case
kNumberType
:
if
(
IsInt
(
)
)
return
handler
.
Int
(
data_
.
n
.
i
.
i
)
;
else
if
(
IsUint
(
)
)
return
handler
.
Uint
(
data_
.
n
.
u
.
u
)
;
else
if
(
IsInt64
(
)
)
return
handler
.
Int64
(
data_
.
n
.
i64
)
;
else
if
(
IsUint64
(
)
)
return
handler
.
Uint64
(
data_
.
n
.
u64
)
;
else
return
handler
.
Double
(
data_
.
n
.
d
)
;
default
:
RAPIDJSON_ASSERT
(
false
)
;
}
return
false
;
}
private
:
template
<
typename
typename
>
friend
class
GenericValue
;
template
<
typename
typename
typename
>
friend
class
GenericDocument
;
enum
{
kBoolFlag
=
0x100
kNumberFlag
=
0x200
kIntFlag
=
0x400
kUintFlag
=
0x800
kInt64Flag
=
0x1000
kUint64Flag
=
0x2000
kDoubleFlag
=
0x4000
kStringFlag
=
0x100000
kCopyFlag
=
0x200000
kInlineStrFlag
=
0x400000
kNullFlag
=
kNullType
kTrueFlag
=
kTrueType
|
kBoolFlag
kFalseFlag
=
kFalseType
|
kBoolFlag
kNumberIntFlag
=
kNumberType
|
kNumberFlag
|
kIntFlag
|
kInt64Flag
kNumberUintFlag
=
kNumberType
|
kNumberFlag
|
kUintFlag
|
kUint64Flag
|
kInt64Flag
kNumberInt64Flag
=
kNumberType
|
kNumberFlag
|
kInt64Flag
kNumberUint64Flag
=
kNumberType
|
kNumberFlag
|
kUint64Flag
kNumberDoubleFlag
=
kNumberType
|
kNumberFlag
|
kDoubleFlag
kNumberAnyFlag
=
kNumberType
|
kNumberFlag
|
kIntFlag
|
kInt64Flag
|
kUintFlag
|
kUint64Flag
|
kDoubleFlag
kConstStringFlag
=
kStringType
|
kStringFlag
kCopyStringFlag
=
kStringType
|
kStringFlag
|
kCopyFlag
kShortStringFlag
=
kStringType
|
kStringFlag
|
kCopyFlag
|
kInlineStrFlag
kObjectFlag
=
kObjectType
kArrayFlag
=
kArrayType
kTypeMask
=
0xFF
}
;
static
const
SizeType
kDefaultArrayCapacity
=
16
;
static
const
SizeType
kDefaultObjectCapacity
=
16
;
struct
String
{
const
Ch
*
str
;
SizeType
length
;
unsigned
hashcode
;
}
;
struct
ShortString
{
enum
{
MaxChars
=
sizeof
(
String
)
/
sizeof
(
Ch
)
MaxSize
=
MaxChars
-
1
LenPos
=
MaxSize
}
;
Ch
str
[
MaxChars
]
;
inline
static
bool
Usable
(
SizeType
len
)
{
return
(
MaxSize
>
=
len
)
;
}
inline
void
SetLength
(
SizeType
len
)
{
str
[
LenPos
]
=
(
Ch
)
(
MaxSize
-
len
)
;
}
inline
SizeType
GetLength
(
)
const
{
return
(
SizeType
)
(
MaxSize
-
str
[
LenPos
]
)
;
}
}
;
union
Number
{
#
if
RAPIDJSON_ENDIAN
=
=
RAPIDJSON_LITTLEENDIAN
struct
I
{
int
i
;
char
padding
[
4
]
;
}
i
;
struct
U
{
unsigned
u
;
char
padding2
[
4
]
;
}
u
;
#
else
struct
I
{
char
padding
[
4
]
;
int
i
;
}
i
;
struct
U
{
char
padding2
[
4
]
;
unsigned
u
;
}
u
;
#
endif
int64_t
i64
;
uint64_t
u64
;
double
d
;
}
;
struct
Object
{
Member
*
members
;
SizeType
size
;
SizeType
capacity
;
}
;
struct
Array
{
GenericValue
*
elements
;
SizeType
size
;
SizeType
capacity
;
}
;
union
Data
{
String
s
;
ShortString
ss
;
Number
n
;
Object
o
;
Array
a
;
}
;
void
SetArrayRaw
(
GenericValue
*
values
SizeType
count
Allocator
&
allocator
)
{
flags_
=
kArrayFlag
;
data_
.
a
.
elements
=
(
GenericValue
*
)
allocator
.
Malloc
(
count
*
sizeof
(
GenericValue
)
)
;
std
:
:
memcpy
(
data_
.
a
.
elements
values
count
*
sizeof
(
GenericValue
)
)
;
data_
.
a
.
size
=
data_
.
a
.
capacity
=
count
;
}
void
SetObjectRaw
(
Member
*
members
SizeType
count
Allocator
&
allocator
)
{
flags_
=
kObjectFlag
;
data_
.
o
.
members
=
(
Member
*
)
allocator
.
Malloc
(
count
*
sizeof
(
Member
)
)
;
std
:
:
memcpy
(
data_
.
o
.
members
members
count
*
sizeof
(
Member
)
)
;
data_
.
o
.
size
=
data_
.
o
.
capacity
=
count
;
}
void
SetStringRaw
(
StringRefType
s
)
RAPIDJSON_NOEXCEPT
{
flags_
=
kConstStringFlag
;
data_
.
s
.
str
=
s
;
data_
.
s
.
length
=
s
.
length
;
}
void
SetStringRaw
(
StringRefType
s
Allocator
&
allocator
)
{
Ch
*
str
=
NULL
;
if
(
ShortString
:
:
Usable
(
s
.
length
)
)
{
flags_
=
kShortStringFlag
;
data_
.
ss
.
SetLength
(
s
.
length
)
;
str
=
data_
.
ss
.
str
;
}
else
{
flags_
=
kCopyStringFlag
;
data_
.
s
.
length
=
s
.
length
;
str
=
(
Ch
*
)
allocator
.
Malloc
(
(
s
.
length
+
1
)
*
sizeof
(
Ch
)
)
;
data_
.
s
.
str
=
str
;
}
std
:
:
memcpy
(
str
s
s
.
length
*
sizeof
(
Ch
)
)
;
str
[
s
.
length
]
=
'
\
0
'
;
}
void
RawAssign
(
GenericValue
&
rhs
)
RAPIDJSON_NOEXCEPT
{
data_
=
rhs
.
data_
;
flags_
=
rhs
.
flags_
;
rhs
.
flags_
=
kNullFlag
;
}
template
<
typename
SourceAllocator
>
bool
StringEqual
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
rhs
)
const
{
RAPIDJSON_ASSERT
(
IsString
(
)
)
;
RAPIDJSON_ASSERT
(
rhs
.
IsString
(
)
)
;
const
SizeType
len1
=
GetStringLength
(
)
;
const
SizeType
len2
=
rhs
.
GetStringLength
(
)
;
if
(
len1
!
=
len2
)
{
return
false
;
}
const
Ch
*
const
str1
=
GetString
(
)
;
const
Ch
*
const
str2
=
rhs
.
GetString
(
)
;
if
(
str1
=
=
str2
)
{
return
true
;
}
return
(
std
:
:
memcmp
(
str1
str2
sizeof
(
Ch
)
*
len1
)
=
=
0
)
;
}
Data
data_
;
unsigned
flags_
;
}
;
typedef
GenericValue
<
UTF8
<
>
>
Value
;
template
<
typename
Encoding
typename
Allocator
=
MemoryPoolAllocator
<
>
typename
StackAllocator
=
CrtAllocator
>
class
GenericDocument
:
public
GenericValue
<
Encoding
Allocator
>
{
public
:
typedef
typename
Encoding
:
:
Ch
Ch
;
typedef
GenericValue
<
Encoding
Allocator
>
ValueType
;
typedef
Allocator
AllocatorType
;
GenericDocument
(
Allocator
*
allocator
=
0
size_t
stackCapacity
=
kDefaultStackCapacity
StackAllocator
*
stackAllocator
=
0
)
:
allocator_
(
allocator
)
ownAllocator_
(
0
)
stack_
(
stackAllocator
stackCapacity
)
parseResult_
(
)
{
if
(
!
allocator_
)
ownAllocator_
=
allocator_
=
RAPIDJSON_NEW
(
Allocator
(
)
)
;
}
#
if
RAPIDJSON_HAS_CXX11_RVALUE_REFS
GenericDocument
(
GenericDocument
&
&
rhs
)
RAPIDJSON_NOEXCEPT
:
ValueType
(
std
:
:
move
(
rhs
)
)
allocator_
(
rhs
.
allocator_
)
ownAllocator_
(
rhs
.
ownAllocator_
)
stack_
(
std
:
:
move
(
rhs
.
stack_
)
)
parseResult_
(
rhs
.
parseResult_
)
{
rhs
.
allocator_
=
0
;
rhs
.
ownAllocator_
=
0
;
rhs
.
parseResult_
=
ParseResult
(
)
;
}
#
endif
~
GenericDocument
(
)
{
Destroy
(
)
;
}
#
if
RAPIDJSON_HAS_CXX11_RVALUE_REFS
GenericDocument
&
operator
=
(
GenericDocument
&
&
rhs
)
RAPIDJSON_NOEXCEPT
{
ValueType
:
:
operator
=
(
std
:
:
forward
<
ValueType
>
(
rhs
)
)
;
Destroy
(
)
;
allocator_
=
rhs
.
allocator_
;
ownAllocator_
=
rhs
.
ownAllocator_
;
stack_
=
std
:
:
move
(
rhs
.
stack_
)
;
parseResult_
=
rhs
.
parseResult_
;
rhs
.
allocator_
=
0
;
rhs
.
ownAllocator_
=
0
;
rhs
.
parseResult_
=
ParseResult
(
)
;
return
*
this
;
}
#
endif
template
<
unsigned
parseFlags
typename
SourceEncoding
typename
InputStream
>
GenericDocument
&
ParseStream
(
InputStream
&
is
)
{
ValueType
:
:
SetNull
(
)
;
GenericReader
<
SourceEncoding
Encoding
Allocator
>
reader
(
&
GetAllocator
(
)
)
;
ClearStackOnExit
scope
(
*
this
)
;
parseResult_
=
reader
.
template
Parse
<
parseFlags
>
(
is
*
this
)
;
if
(
parseResult_
)
{
RAPIDJSON_ASSERT
(
stack_
.
GetSize
(
)
=
=
sizeof
(
ValueType
)
)
;
this
-
>
RawAssign
(
*
stack_
.
template
Pop
<
ValueType
>
(
1
)
)
;
}
return
*
this
;
}
template
<
unsigned
parseFlags
typename
InputStream
>
GenericDocument
&
ParseStream
(
InputStream
&
is
)
{
return
ParseStream
<
parseFlags
Encoding
InputStream
>
(
is
)
;
}
template
<
typename
InputStream
>
GenericDocument
&
ParseStream
(
InputStream
&
is
)
{
return
ParseStream
<
kParseDefaultFlags
Encoding
InputStream
>
(
is
)
;
}
template
<
unsigned
parseFlags
typename
SourceEncoding
>
GenericDocument
&
ParseInsitu
(
Ch
*
str
)
{
GenericInsituStringStream
<
Encoding
>
s
(
str
)
;
return
ParseStream
<
parseFlags
|
kParseInsituFlag
SourceEncoding
>
(
s
)
;
}
template
<
unsigned
parseFlags
>
GenericDocument
&
ParseInsitu
(
Ch
*
str
)
{
return
ParseInsitu
<
parseFlags
Encoding
>
(
str
)
;
}
GenericDocument
&
ParseInsitu
(
Ch
*
str
)
{
return
ParseInsitu
<
kParseDefaultFlags
Encoding
>
(
str
)
;
}
template
<
unsigned
parseFlags
typename
SourceEncoding
>
GenericDocument
&
Parse
(
const
Ch
*
str
)
{
RAPIDJSON_ASSERT
(
!
(
parseFlags
&
kParseInsituFlag
)
)
;
GenericStringStream
<
SourceEncoding
>
s
(
str
)
;
return
ParseStream
<
parseFlags
SourceEncoding
>
(
s
)
;
}
template
<
unsigned
parseFlags
>
GenericDocument
&
Parse
(
const
Ch
*
str
)
{
return
Parse
<
parseFlags
Encoding
>
(
str
)
;
}
GenericDocument
&
Parse
(
const
Ch
*
str
)
{
return
Parse
<
kParseDefaultFlags
>
(
str
)
;
}
bool
HasParseError
(
)
const
{
return
parseResult_
.
IsError
(
)
;
}
ParseErrorCode
GetParseError
(
)
const
{
return
parseResult_
.
Code
(
)
;
}
size_t
GetErrorOffset
(
)
const
{
return
parseResult_
.
Offset
(
)
;
}
Allocator
&
GetAllocator
(
)
{
return
*
allocator_
;
}
size_t
GetStackCapacity
(
)
const
{
return
stack_
.
GetCapacity
(
)
;
}
private
:
struct
ClearStackOnExit
{
explicit
ClearStackOnExit
(
GenericDocument
&
d
)
:
d_
(
d
)
{
}
~
ClearStackOnExit
(
)
{
d_
.
ClearStack
(
)
;
}
private
:
ClearStackOnExit
(
const
ClearStackOnExit
&
)
;
ClearStackOnExit
&
operator
=
(
const
ClearStackOnExit
&
)
;
GenericDocument
&
d_
;
}
;
template
<
typename
typename
typename
>
friend
class
GenericReader
;
template
<
typename
typename
>
friend
class
GenericValue
;
bool
Null
(
)
{
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
)
;
return
true
;
}
bool
Bool
(
bool
b
)
{
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
b
)
;
return
true
;
}
bool
Int
(
int
i
)
{
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
i
)
;
return
true
;
}
bool
Uint
(
unsigned
i
)
{
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
i
)
;
return
true
;
}
bool
Int64
(
int64_t
i
)
{
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
i
)
;
return
true
;
}
bool
Uint64
(
uint64_t
i
)
{
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
i
)
;
return
true
;
}
bool
Double
(
double
d
)
{
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
d
)
;
return
true
;
}
bool
String
(
const
Ch
*
str
SizeType
length
bool
copy
)
{
if
(
copy
)
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
str
length
GetAllocator
(
)
)
;
else
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
str
length
)
;
return
true
;
}
bool
StartObject
(
)
{
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
kObjectType
)
;
return
true
;
}
bool
Key
(
const
Ch
*
str
SizeType
length
bool
copy
)
{
return
String
(
str
length
copy
)
;
}
bool
EndObject
(
SizeType
memberCount
)
{
typename
ValueType
:
:
Member
*
members
=
stack_
.
template
Pop
<
typename
ValueType
:
:
Member
>
(
memberCount
)
;
stack_
.
template
Top
<
ValueType
>
(
)
-
>
SetObjectRaw
(
members
(
SizeType
)
memberCount
GetAllocator
(
)
)
;
return
true
;
}
bool
StartArray
(
)
{
new
(
stack_
.
template
Push
<
ValueType
>
(
)
)
ValueType
(
kArrayType
)
;
return
true
;
}
bool
EndArray
(
SizeType
elementCount
)
{
ValueType
*
elements
=
stack_
.
template
Pop
<
ValueType
>
(
elementCount
)
;
stack_
.
template
Top
<
ValueType
>
(
)
-
>
SetArrayRaw
(
elements
elementCount
GetAllocator
(
)
)
;
return
true
;
}
private
:
GenericDocument
(
const
GenericDocument
&
)
;
GenericDocument
&
operator
=
(
const
GenericDocument
&
)
;
void
ClearStack
(
)
{
if
(
Allocator
:
:
kNeedFree
)
while
(
stack_
.
GetSize
(
)
>
0
)
(
stack_
.
template
Pop
<
ValueType
>
(
1
)
)
-
>
~
ValueType
(
)
;
else
stack_
.
Clear
(
)
;
stack_
.
ShrinkToFit
(
)
;
}
void
Destroy
(
)
{
RAPIDJSON_DELETE
(
ownAllocator_
)
;
}
static
const
size_t
kDefaultStackCapacity
=
1024
;
Allocator
*
allocator_
;
Allocator
*
ownAllocator_
;
internal
:
:
Stack
<
StackAllocator
>
stack_
;
ParseResult
parseResult_
;
}
;
typedef
GenericDocument
<
UTF8
<
>
>
Document
;
template
<
typename
Encoding
typename
Allocator
>
template
<
typename
SourceAllocator
>
inline
GenericValue
<
Encoding
Allocator
>
:
:
GenericValue
(
const
GenericValue
<
Encoding
SourceAllocator
>
&
rhs
Allocator
&
allocator
)
{
switch
(
rhs
.
GetType
(
)
)
{
case
kObjectType
:
case
kArrayType
:
{
GenericDocument
<
Encoding
Allocator
>
d
(
&
allocator
)
;
rhs
.
Accept
(
d
)
;
RawAssign
(
*
d
.
stack_
.
template
Pop
<
GenericValue
>
(
1
)
)
;
}
break
;
case
kStringType
:
if
(
rhs
.
flags_
=
=
kConstStringFlag
)
{
flags_
=
rhs
.
flags_
;
data_
=
*
reinterpret_cast
<
const
Data
*
>
(
&
rhs
.
data_
)
;
}
else
{
SetStringRaw
(
StringRef
(
rhs
.
GetString
(
)
rhs
.
GetStringLength
(
)
)
allocator
)
;
}
break
;
default
:
flags_
=
rhs
.
flags_
;
data_
=
*
reinterpret_cast
<
const
Data
*
>
(
&
rhs
.
data_
)
;
}
}
RAPIDJSON_NAMESPACE_END
#
if
defined
(
_MSC_VER
)
|
|
defined
(
__GNUC__
)
RAPIDJSON_DIAG_POP
#
endif
#
endif
