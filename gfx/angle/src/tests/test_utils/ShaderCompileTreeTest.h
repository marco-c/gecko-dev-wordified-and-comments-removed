#
ifndef
TESTS_TEST_UTILS_SHADER_COMPILE_TREE_TEST_H_
#
define
TESTS_TEST_UTILS_SHADER_COMPILE_TREE_TEST_H_
#
include
"
angle_gl
.
h
"
#
include
"
compiler
/
translator
/
PoolAlloc
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
GLSLANG
/
ShaderLang
.
h
"
namespace
sh
{
class
TIntermBlock
;
class
TIntermNode
;
class
TranslatorESSL
;
class
ShaderCompileTreeTest
:
public
testing
:
:
Test
{
public
:
ShaderCompileTreeTest
(
)
:
mExtraCompileOptions
(
0
)
{
}
protected
:
void
SetUp
(
)
override
;
void
TearDown
(
)
override
;
bool
compile
(
const
std
:
:
string
&
shaderString
)
;
void
compileAssumeSuccess
(
const
std
:
:
string
&
shaderString
)
;
bool
hasWarning
(
)
const
;
const
std
:
:
vector
<
sh
:
:
Uniform
>
&
getUniforms
(
)
const
;
const
std
:
:
vector
<
sh
:
:
Attribute
>
&
getAttributes
(
)
const
;
virtual
void
initResources
(
ShBuiltInResources
*
resources
)
{
}
virtual
:
:
GLenum
getShaderType
(
)
const
=
0
;
virtual
ShShaderSpec
getShaderSpec
(
)
const
=
0
;
std
:
:
string
mInfoLog
;
ShCompileOptions
mExtraCompileOptions
;
TIntermBlock
*
mASTRoot
;
private
:
TranslatorESSL
*
mTranslator
;
TPoolAllocator
mAllocator
;
}
;
bool
IsZero
(
TIntermNode
*
node
)
;
}
#
endif
