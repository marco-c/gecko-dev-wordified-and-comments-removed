#
ifndef
TESTS_TEST_UTILS_COMPILER_TEST_H_
#
define
TESTS_TEST_UTILS_COMPILER_TEST_H_
#
include
<
map
>
#
include
"
angle_gl
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
GLSLANG
/
ShaderLang
.
h
"
bool
compileTestShader
(
GLenum
type
ShShaderSpec
spec
ShShaderOutput
output
const
std
:
:
string
&
shaderString
ShBuiltInResources
*
resources
int
compileOptions
std
:
:
string
*
translatedCode
std
:
:
string
*
infoLog
)
;
bool
compileTestShader
(
GLenum
type
ShShaderSpec
spec
ShShaderOutput
output
const
std
:
:
string
&
shaderString
int
compileOptions
std
:
:
string
*
translatedCode
std
:
:
string
*
infoLog
)
;
class
MatchOutputCodeTest
:
public
testing
:
:
Test
{
protected
:
MatchOutputCodeTest
(
GLenum
shaderType
int
defaultCompileOptions
ShShaderOutput
outputType
)
;
void
addOutputType
(
const
ShShaderOutput
outputType
)
;
ShBuiltInResources
*
getResources
(
)
;
void
compile
(
const
std
:
:
string
&
shaderString
)
;
void
compile
(
const
std
:
:
string
&
shaderString
const
int
compileOptions
)
;
bool
foundInESSLCode
(
const
char
*
stringToFind
)
const
{
return
foundInCode
(
SH_ESSL_OUTPUT
stringToFind
)
;
}
bool
foundInGLSLCode
(
const
char
*
stringToFind
)
const
{
return
foundInCode
(
SH_GLSL_COMPATIBILITY_OUTPUT
stringToFind
)
;
}
bool
foundInCode
(
ShShaderOutput
output
const
char
*
stringToFind
)
const
;
bool
foundInCode
(
ShShaderOutput
output
const
char
*
stringToFind
const
int
expectedOccurrences
)
const
;
bool
foundInCode
(
const
char
*
stringToFind
)
const
;
bool
foundInCode
(
const
char
*
stringToFind
const
int
expectedOccurrences
)
const
;
bool
notFoundInCode
(
const
char
*
stringToFind
)
const
;
private
:
bool
compileWithSettings
(
ShShaderOutput
output
const
std
:
:
string
&
shaderString
int
compileOptions
std
:
:
string
*
translatedCode
std
:
:
string
*
infoLog
)
;
GLenum
mShaderType
;
int
mDefaultCompileOptions
;
ShBuiltInResources
mResources
;
std
:
:
map
<
ShShaderOutput
std
:
:
string
>
mOutputCode
;
}
;
#
endif
