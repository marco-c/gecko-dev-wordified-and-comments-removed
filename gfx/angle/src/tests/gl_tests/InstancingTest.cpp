#
include
"
test_utils
/
ANGLETest
.
h
"
#
include
"
test_utils
/
gl_raii
.
h
"
using
namespace
angle
;
class
InstancingTest
:
public
ANGLETest
{
protected
:
InstancingTest
(
)
:
mProgram
(
0
)
mVertexBuffer
(
0
)
{
setWindowWidth
(
256
)
;
setWindowHeight
(
256
)
;
setConfigRedBits
(
8
)
;
setConfigGreenBits
(
8
)
;
setConfigBlueBits
(
8
)
;
setConfigAlphaBits
(
8
)
;
}
~
InstancingTest
(
)
override
{
glDeleteBuffers
(
1
&
mVertexBuffer
)
;
glDeleteProgram
(
mProgram
)
;
}
void
SetUp
(
)
override
{
ANGLETest
:
:
SetUp
(
)
;
mVertexAttribDivisorANGLE
=
nullptr
;
mDrawArraysInstancedANGLE
=
nullptr
;
mDrawElementsInstancedANGLE
=
nullptr
;
const
char
*
extensionString
=
reinterpret_cast
<
const
char
*
>
(
glGetString
(
GL_EXTENSIONS
)
)
;
if
(
strstr
(
extensionString
"
GL_ANGLE_instanced_arrays
"
)
)
{
mVertexAttribDivisorANGLE
=
(
PFNGLVERTEXATTRIBDIVISORANGLEPROC
)
eglGetProcAddress
(
"
glVertexAttribDivisorANGLE
"
)
;
mDrawArraysInstancedANGLE
=
(
PFNGLDRAWARRAYSINSTANCEDANGLEPROC
)
eglGetProcAddress
(
"
glDrawArraysInstancedANGLE
"
)
;
mDrawElementsInstancedANGLE
=
(
PFNGLDRAWELEMENTSINSTANCEDANGLEPROC
)
eglGetProcAddress
(
"
glDrawElementsInstancedANGLE
"
)
;
}
ASSERT_NE
(
nullptr
mVertexAttribDivisorANGLE
)
;
ASSERT_NE
(
nullptr
mDrawArraysInstancedANGLE
)
;
ASSERT_NE
(
nullptr
mDrawElementsInstancedANGLE
)
;
constexpr
GLfloat
qvertex1
[
3
]
=
{
-
quadRadius
quadRadius
0
.
0f
}
;
constexpr
GLfloat
qvertex2
[
3
]
=
{
-
quadRadius
-
quadRadius
0
.
0f
}
;
constexpr
GLfloat
qvertex3
[
3
]
=
{
quadRadius
-
quadRadius
0
.
0f
}
;
constexpr
GLfloat
qvertex4
[
3
]
=
{
quadRadius
quadRadius
0
.
0f
}
;
mQuadVertices
.
insert
(
mQuadVertices
.
end
(
)
qvertex1
qvertex1
+
3
)
;
mQuadVertices
.
insert
(
mQuadVertices
.
end
(
)
qvertex2
qvertex2
+
3
)
;
mQuadVertices
.
insert
(
mQuadVertices
.
end
(
)
qvertex3
qvertex3
+
3
)
;
mQuadVertices
.
insert
(
mQuadVertices
.
end
(
)
qvertex4
qvertex4
+
3
)
;
constexpr
GLfloat
coord1
[
2
]
=
{
0
.
0f
0
.
0f
}
;
constexpr
GLfloat
coord2
[
2
]
=
{
0
.
0f
1
.
0f
}
;
constexpr
GLfloat
coord3
[
2
]
=
{
1
.
0f
1
.
0f
}
;
constexpr
GLfloat
coord4
[
2
]
=
{
1
.
0f
0
.
0f
}
;
mTexcoords
.
insert
(
mTexcoords
.
end
(
)
coord1
coord1
+
2
)
;
mTexcoords
.
insert
(
mTexcoords
.
end
(
)
coord2
coord2
+
2
)
;
mTexcoords
.
insert
(
mTexcoords
.
end
(
)
coord3
coord3
+
2
)
;
mTexcoords
.
insert
(
mTexcoords
.
end
(
)
coord4
coord4
+
2
)
;
mIndices
.
push_back
(
0
)
;
mIndices
.
push_back
(
1
)
;
mIndices
.
push_back
(
2
)
;
mIndices
.
push_back
(
0
)
;
mIndices
.
push_back
(
2
)
;
mIndices
.
push_back
(
3
)
;
for
(
size_t
vertexIndex
=
0
;
vertexIndex
<
6
;
+
+
vertexIndex
)
{
mNonIndexedVertices
.
insert
(
mNonIndexedVertices
.
end
(
)
mQuadVertices
.
begin
(
)
+
mIndices
[
vertexIndex
]
*
3
mQuadVertices
.
begin
(
)
+
mIndices
[
vertexIndex
]
*
3
+
3
)
;
}
for
(
size_t
vertexIndex
=
0
;
vertexIndex
<
6
;
+
+
vertexIndex
)
{
mNonIndexedVertices
.
insert
(
mNonIndexedVertices
.
end
(
)
mQuadVertices
.
begin
(
)
+
mIndices
[
vertexIndex
]
*
3
mQuadVertices
.
begin
(
)
+
mIndices
[
vertexIndex
]
*
3
+
3
)
;
}
for
(
float
y
=
-
1
.
0f
+
quadRadius
;
y
<
1
.
0f
-
quadRadius
;
y
+
=
quadRadius
*
3
)
{
for
(
float
x
=
-
1
.
0f
+
quadRadius
;
x
<
1
.
0f
-
quadRadius
;
x
+
=
quadRadius
*
3
)
{
const
GLfloat
instance
[
3
]
=
{
x
+
quadRadius
y
+
quadRadius
0
.
0f
}
;
mInstances
.
insert
(
mInstances
.
end
(
)
instance
instance
+
3
)
;
}
}
glClearColor
(
0
.
0f
0
.
0f
0
.
0f
1
.
0f
)
;
glGenBuffers
(
1
&
mVertexBuffer
)
;
ASSERT_GL_NO_ERROR
(
)
;
}
void
setupDrawArraysTest
(
const
std
:
:
string
&
vs
)
{
const
std
:
:
string
fs
=
"
precision
mediump
float
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_FragColor
=
vec4
(
1
.
0
0
0
1
.
0
)
;
\
n
"
"
}
\
n
"
;
mProgram
=
CompileProgram
(
vs
fs
)
;
ASSERT_NE
(
0u
mProgram
)
;
glViewport
(
0
0
getWindowWidth
(
)
getWindowHeight
(
)
)
;
glClear
(
GL_COLOR_BUFFER_BIT
)
;
glUseProgram
(
mProgram
)
;
}
void
setupInstancedPointsTest
(
)
{
mIndices
.
clear
(
)
;
mIndices
.
push_back
(
0
)
;
mIndices
.
push_back
(
1
)
;
mIndices
.
push_back
(
2
)
;
mIndices
.
push_back
(
3
)
;
const
std
:
:
string
vs
=
"
attribute
vec3
a_position
;
\
n
"
"
attribute
vec3
a_instancePos
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_Position
=
vec4
(
a_position
.
xyz
1
.
0
)
;
\
n
"
"
gl_Position
=
vec4
(
a_instancePos
.
xyz
1
.
0
)
;
\
n
"
"
gl_PointSize
=
6
.
0
;
\
n
"
"
}
\
n
"
;
const
std
:
:
string
fs
=
"
precision
mediump
float
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_FragColor
=
vec4
(
1
.
0
0
0
1
.
0
)
;
\
n
"
"
}
\
n
"
;
mProgram
=
CompileProgram
(
vs
fs
)
;
ASSERT_NE
(
0u
mProgram
)
;
glViewport
(
0
0
getWindowWidth
(
)
getWindowHeight
(
)
)
;
glClear
(
GL_COLOR_BUFFER_BIT
)
;
glUseProgram
(
mProgram
)
;
}
void
runDrawArraysTest
(
GLint
first
GLsizei
count
GLsizei
instanceCount
const
float
*
offset
)
{
glBindBuffer
(
GL_ARRAY_BUFFER
mVertexBuffer
)
;
glBufferData
(
GL_ARRAY_BUFFER
mInstances
.
size
(
)
*
sizeof
(
mInstances
[
0
]
)
&
mInstances
[
0
]
GL_STATIC_DRAW
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
0
)
;
GLint
positionLoc
=
glGetAttribLocation
(
mProgram
"
a_position
"
)
;
GLint
instancePosLoc
=
glGetAttribLocation
(
mProgram
"
a_instancePos
"
)
;
glVertexAttribPointer
(
positionLoc
3
GL_FLOAT
GL_FALSE
0
mNonIndexedVertices
.
data
(
)
)
;
glEnableVertexAttribArray
(
positionLoc
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
mVertexBuffer
)
;
glVertexAttribPointer
(
instancePosLoc
3
GL_FLOAT
GL_FALSE
0
0
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
0
)
;
glEnableVertexAttribArray
(
instancePosLoc
)
;
mVertexAttribDivisorANGLE
(
instancePosLoc
1
)
;
GLint
uniformLoc
=
glGetUniformLocation
(
mProgram
"
u_offset
"
)
;
ASSERT_NE
(
-
1
uniformLoc
)
;
glUniform3fv
(
uniformLoc
1
offset
)
;
mDrawArraysInstancedANGLE
(
GL_TRIANGLES
first
count
instanceCount
)
;
ASSERT_GL_NO_ERROR
(
)
;
}
virtual
void
runDrawElementsTest
(
std
:
:
string
vs
bool
shouldAttribZeroBeInstanced
)
{
const
std
:
:
string
fs
=
"
precision
mediump
float
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_FragColor
=
vec4
(
1
.
0
0
0
1
.
0
)
;
\
n
"
"
}
\
n
"
;
ANGLE_GL_PROGRAM
(
program
vs
fs
)
;
GLint
positionLoc
=
glGetAttribLocation
(
program
"
a_position
"
)
;
GLint
instancePosLoc
=
glGetAttribLocation
(
program
"
a_instancePos
"
)
;
ASSERT_EQ
(
shouldAttribZeroBeInstanced
(
instancePosLoc
=
=
0
)
)
;
glViewport
(
0
0
getWindowWidth
(
)
getWindowHeight
(
)
)
;
glClear
(
GL_COLOR_BUFFER_BIT
)
;
glUseProgram
(
program
)
;
glVertexAttribPointer
(
positionLoc
3
GL_FLOAT
GL_FALSE
0
mQuadVertices
.
data
(
)
)
;
glEnableVertexAttribArray
(
positionLoc
)
;
glVertexAttribPointer
(
instancePosLoc
3
GL_FLOAT
GL_FALSE
0
mInstances
.
data
(
)
)
;
glEnableVertexAttribArray
(
instancePosLoc
)
;
mVertexAttribDivisorANGLE
(
instancePosLoc
1
)
;
mDrawElementsInstancedANGLE
(
GL_TRIANGLES
static_cast
<
GLsizei
>
(
mIndices
.
size
(
)
)
GL_UNSIGNED_SHORT
mIndices
.
data
(
)
static_cast
<
GLsizei
>
(
mInstances
.
size
(
)
)
/
3
)
;
ASSERT_GL_NO_ERROR
(
)
;
checkQuads
(
)
;
}
void
checkQuads
(
)
{
for
(
unsigned
int
quadIndex
=
0
;
quadIndex
<
4
;
+
+
quadIndex
)
{
unsigned
int
baseOffset
=
quadIndex
*
3
;
int
quadx
=
static_cast
<
int
>
(
(
(
mInstances
[
baseOffset
+
0
]
)
*
0
.
5f
+
0
.
5f
)
*
getWindowWidth
(
)
)
;
int
quady
=
static_cast
<
int
>
(
(
(
mInstances
[
baseOffset
+
1
]
)
*
0
.
5f
+
0
.
5f
)
*
getWindowHeight
(
)
)
;
EXPECT_PIXEL_EQ
(
quadx
quady
255
0
0
255
)
;
}
}
PFNGLVERTEXATTRIBDIVISORANGLEPROC
mVertexAttribDivisorANGLE
;
PFNGLDRAWARRAYSINSTANCEDANGLEPROC
mDrawArraysInstancedANGLE
;
PFNGLDRAWELEMENTSINSTANCEDANGLEPROC
mDrawElementsInstancedANGLE
;
std
:
:
vector
<
GLfloat
>
mQuadVertices
;
std
:
:
vector
<
GLfloat
>
mNonIndexedVertices
;
std
:
:
vector
<
GLfloat
>
mTexcoords
;
std
:
:
vector
<
GLfloat
>
mInstances
;
std
:
:
vector
<
GLushort
>
mIndices
;
static
constexpr
GLfloat
quadRadius
=
0
.
30f
;
GLuint
mProgram
;
GLuint
mVertexBuffer
;
}
;
class
InstancingTestAllConfigs
:
public
InstancingTest
{
protected
:
InstancingTestAllConfigs
(
)
{
}
}
;
class
InstancingTestNo9_3
:
public
InstancingTest
{
protected
:
InstancingTestNo9_3
(
)
{
}
}
;
class
InstancingTestPoints
:
public
InstancingTest
{
protected
:
InstancingTestPoints
(
)
{
}
}
;
TEST_P
(
InstancingTestAllConfigs
AttributeZeroInstanced
)
{
const
std
:
:
string
vs
=
"
attribute
vec3
a_instancePos
;
\
n
"
"
attribute
vec3
a_position
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_Position
=
vec4
(
a_position
.
xyz
+
a_instancePos
.
xyz
1
.
0
)
;
\
n
"
"
}
\
n
"
;
runDrawElementsTest
(
vs
true
)
;
}
TEST_P
(
InstancingTestAllConfigs
AttributeZeroNotInstanced
)
{
const
std
:
:
string
vs
=
"
attribute
vec3
a_position
;
\
n
"
"
attribute
vec3
a_instancePos
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_Position
=
vec4
(
a_position
.
xyz
+
a_instancePos
.
xyz
1
.
0
)
;
\
n
"
"
}
\
n
"
;
runDrawElementsTest
(
vs
false
)
;
}
TEST_P
(
InstancingTestNo9_3
DrawArraysWithOffset
)
{
const
std
:
:
string
vs
=
"
attribute
vec3
a_position
;
\
n
"
"
attribute
vec3
a_instancePos
;
\
n
"
"
uniform
vec3
u_offset
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_Position
=
vec4
(
a_position
.
xyz
+
a_instancePos
.
xyz
+
u_offset
1
.
0
)
;
\
n
"
"
}
\
n
"
;
setupDrawArraysTest
(
vs
)
;
constexpr
float
offset1
[
3
]
=
{
0
0
0
}
;
runDrawArraysTest
(
0
6
2
offset1
)
;
constexpr
float
offset2
[
3
]
=
{
0
.
0f
1
.
0f
0
}
;
runDrawArraysTest
(
6
6
2
offset2
)
;
checkQuads
(
)
;
}
TEST_P
(
InstancingTestPoints
DrawArrays
)
{
ignoreD3D11SDKLayersWarnings
(
)
;
setupInstancedPointsTest
(
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
mVertexBuffer
)
;
glBufferData
(
GL_ARRAY_BUFFER
mInstances
.
size
(
)
*
sizeof
(
mInstances
[
0
]
)
&
mInstances
[
0
]
GL_STATIC_DRAW
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
0
)
;
GLint
positionLoc
=
glGetAttribLocation
(
mProgram
"
a_position
"
)
;
GLint
instancePosLoc
=
glGetAttribLocation
(
mProgram
"
a_instancePos
"
)
;
constexpr
GLfloat
pos
[
3
]
=
{
0
0
0
}
;
glVertexAttribPointer
(
positionLoc
3
GL_FLOAT
GL_FALSE
0
pos
)
;
glEnableVertexAttribArray
(
positionLoc
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
mVertexBuffer
)
;
glVertexAttribPointer
(
instancePosLoc
3
GL_FLOAT
GL_FALSE
0
0
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
0
)
;
glEnableVertexAttribArray
(
instancePosLoc
)
;
mVertexAttribDivisorANGLE
(
instancePosLoc
1
)
;
mDrawArraysInstancedANGLE
(
GL_POINTS
0
1
static_cast
<
GLsizei
>
(
mInstances
.
size
(
)
)
/
3
)
;
ASSERT_GL_NO_ERROR
(
)
;
checkQuads
(
)
;
}
TEST_P
(
InstancingTestPoints
DrawElements
)
{
ignoreD3D11SDKLayersWarnings
(
)
;
setupInstancedPointsTest
(
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
mVertexBuffer
)
;
glBufferData
(
GL_ARRAY_BUFFER
mInstances
.
size
(
)
*
sizeof
(
mInstances
[
0
]
)
&
mInstances
[
0
]
GL_STATIC_DRAW
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
0
)
;
GLint
positionLoc
=
glGetAttribLocation
(
mProgram
"
a_position
"
)
;
GLint
instancePosLoc
=
glGetAttribLocation
(
mProgram
"
a_instancePos
"
)
;
const
Vector3
pos
[
]
=
{
Vector3
(
0
)
Vector3
(
0
)
Vector3
(
0
)
Vector3
(
0
)
}
;
glVertexAttribPointer
(
positionLoc
3
GL_FLOAT
GL_FALSE
0
pos
)
;
glEnableVertexAttribArray
(
positionLoc
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
mVertexBuffer
)
;
glVertexAttribPointer
(
instancePosLoc
3
GL_FLOAT
GL_FALSE
0
0
)
;
glBindBuffer
(
GL_ARRAY_BUFFER
0
)
;
glEnableVertexAttribArray
(
instancePosLoc
)
;
mVertexAttribDivisorANGLE
(
instancePosLoc
1
)
;
mDrawElementsInstancedANGLE
(
GL_POINTS
static_cast
<
GLsizei
>
(
mIndices
.
size
(
)
)
GL_UNSIGNED_SHORT
mIndices
.
data
(
)
static_cast
<
GLsizei
>
(
mInstances
.
size
(
)
)
/
3
)
;
ASSERT_GL_NO_ERROR
(
)
;
checkQuads
(
)
;
}
class
InstancingTestES31
:
public
InstancingTest
{
public
:
InstancingTestES31
(
)
{
}
}
;
TEST_P
(
InstancingTestES31
UpdateAttribBindingByVertexAttribDivisor
)
{
const
std
:
:
string
vs
=
"
attribute
vec3
a_instancePos
;
\
n
"
"
attribute
vec3
a_position
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_Position
=
vec4
(
a_position
.
xyz
+
a_instancePos
.
xyz
1
.
0
)
;
\
n
"
"
}
\
n
"
;
const
std
:
:
string
fs
=
"
precision
mediump
float
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_FragColor
=
vec4
(
1
.
0
0
0
1
.
0
)
;
\
n
"
"
}
\
n
"
;
constexpr
GLsizei
kFloatStride
=
4
;
ANGLE_GL_PROGRAM
(
program
vs
fs
)
;
glUseProgram
(
program
)
;
GLint
positionLoc
=
glGetAttribLocation
(
program
"
a_position
"
)
;
GLint
instancePosLoc
=
glGetAttribLocation
(
program
"
a_instancePos
"
)
;
ASSERT_NE
(
-
1
positionLoc
)
;
ASSERT_NE
(
-
1
instancePosLoc
)
;
ASSERT_GL_NO_ERROR
(
)
;
GLuint
vao
;
glGenVertexArrays
(
1
&
vao
)
;
glBindVertexArray
(
vao
)
;
GLBuffer
quadBuffer
;
glBindBuffer
(
GL_ARRAY_BUFFER
quadBuffer
)
;
glBufferData
(
GL_ARRAY_BUFFER
mQuadVertices
.
size
(
)
*
kFloatStride
mQuadVertices
.
data
(
)
GL_STATIC_DRAW
)
;
GLBuffer
instancesBuffer
;
glBindBuffer
(
GL_ARRAY_BUFFER
instancesBuffer
)
;
glBufferData
(
GL_ARRAY_BUFFER
mInstances
.
size
(
)
*
kFloatStride
mInstances
.
data
(
)
GL_STATIC_DRAW
)
;
glVertexAttribFormat
(
positionLoc
3
GL_FLOAT
GL_FALSE
0
)
;
glVertexAttribFormat
(
instancePosLoc
3
GL_FLOAT
GL_FALSE
0
)
;
glEnableVertexAttribArray
(
positionLoc
)
;
glEnableVertexAttribArray
(
instancePosLoc
)
;
const
GLint
positionBinding
=
instancePosLoc
;
const
GLint
instanceBinding
=
positionLoc
;
glBindVertexBuffer
(
positionBinding
quadBuffer
0
kFloatStride
*
3
)
;
glBindVertexBuffer
(
instanceBinding
instancesBuffer
0
kFloatStride
*
3
)
;
glVertexAttribBinding
(
positionLoc
positionBinding
)
;
glVertexAttribBinding
(
instancePosLoc
instanceBinding
)
;
glVertexBindingDivisor
(
instanceBinding
1
)
;
glDrawElementsInstanced
(
GL_TRIANGLES
static_cast
<
GLsizei
>
(
mIndices
.
size
(
)
)
GL_UNSIGNED_SHORT
mIndices
.
data
(
)
static_cast
<
GLsizei
>
(
mInstances
.
size
(
)
)
/
3
)
;
checkQuads
(
)
;
glBindVertexBuffer
(
positionLoc
quadBuffer
0
kFloatStride
*
3
)
;
glBindVertexBuffer
(
instancePosLoc
instancesBuffer
0
kFloatStride
*
3
)
;
glVertexAttribBinding
(
positionLoc
positionLoc
)
;
glVertexAttribDivisor
(
instancePosLoc
1
)
;
glDrawElementsInstanced
(
GL_TRIANGLES
static_cast
<
GLsizei
>
(
mIndices
.
size
(
)
)
GL_UNSIGNED_SHORT
mIndices
.
data
(
)
static_cast
<
GLsizei
>
(
mInstances
.
size
(
)
)
/
3
)
;
checkQuads
(
)
;
glDeleteVertexArrays
(
1
&
vao
)
;
}
ANGLE_INSTANTIATE_TEST
(
InstancingTestAllConfigs
ES2_D3D9
(
)
ES2_D3D11
(
)
ES2_D3D11_FL9_3
(
)
ES2_OPENGL
(
)
ES2_OPENGLES
(
)
)
;
ANGLE_INSTANTIATE_TEST
(
InstancingTestNo9_3
ES2_D3D9
(
)
ES2_D3D11
(
)
)
;
ANGLE_INSTANTIATE_TEST
(
InstancingTestPoints
ES2_D3D11
(
)
ES2_D3D11_FL9_3
(
)
)
;
ANGLE_INSTANTIATE_TEST
(
InstancingTestES31
ES31_OPENGL
(
)
ES31_OPENGLES
(
)
)
;
