#
include
"
test_utils
/
ANGLETest
.
h
"
namespace
angle
{
class
ColorMaskTest
:
public
ANGLETest
{
protected
:
ColorMaskTest
(
)
:
mProgram
(
0
)
{
setWindowWidth
(
128
)
;
setWindowHeight
(
128
)
;
setConfigRedBits
(
8
)
;
setConfigGreenBits
(
8
)
;
setConfigBlueBits
(
8
)
;
setConfigAlphaBits
(
8
)
;
setConfigDepthBits
(
24
)
;
}
void
SetUp
(
)
override
{
ANGLETest
:
:
SetUp
(
)
;
const
std
:
:
string
vsSource
=
"
precision
highp
float
;
\
n
"
"
attribute
vec4
position
;
\
n
"
"
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_Position
=
position
;
\
n
"
"
}
\
n
"
;
const
std
:
:
string
fsSource
=
"
precision
highp
float
;
\
n
"
"
uniform
vec4
color
;
\
n
"
"
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
gl_FragColor
=
color
;
\
n
"
"
}
\
n
"
;
mProgram
=
CompileProgram
(
vsSource
fsSource
)
;
ASSERT_NE
(
0u
mProgram
)
<
<
"
shader
compilation
failed
.
"
;
mColorUniform
=
glGetUniformLocation
(
mProgram
"
color
"
)
;
}
void
TearDown
(
)
override
{
glDeleteProgram
(
mProgram
)
;
ANGLETest
:
:
TearDown
(
)
;
}
GLuint
mProgram
=
0
;
GLint
mColorUniform
=
-
1
;
}
;
TEST_P
(
ColorMaskTest
AMDZeroColorMaskBug
)
{
int
x
=
getWindowWidth
(
)
/
2
;
int
y
=
getWindowHeight
(
)
/
2
;
glClearColor
(
0
.
0f
0
.
0f
1
.
0f
1
.
0f
)
;
glClear
(
GL_COLOR_BUFFER_BIT
)
;
EXPECT_PIXEL_EQ
(
x
y
0
0
255
255
)
;
glColorMask
(
GL_FALSE
GL_FALSE
GL_FALSE
GL_FALSE
)
;
glDisable
(
GL_BLEND
)
;
glUseProgram
(
mProgram
)
;
glUniform4f
(
mColorUniform
1
.
0f
0
.
0f
0
.
0f
0
.
0f
)
;
EXPECT_GL_NO_ERROR
(
)
;
drawQuad
(
mProgram
"
position
"
0
.
5f
)
;
EXPECT_PIXEL_EQ
(
x
y
0
0
255
255
)
;
glColorMask
(
GL_TRUE
GL_TRUE
GL_TRUE
GL_TRUE
)
;
glUseProgram
(
mProgram
)
;
glUniform4f
(
mColorUniform
1
.
0f
0
.
0f
0
.
0f
0
.
0f
)
;
EXPECT_GL_NO_ERROR
(
)
;
drawQuad
(
mProgram
"
position
"
0
.
5f
)
;
EXPECT_PIXEL_EQ
(
x
y
255
0
0
0
)
;
}
ANGLE_INSTANTIATE_TEST
(
ColorMaskTest
ES2_D3D9
(
)
ES2_D3D11
(
)
ES2_D3D11_FL9_3
(
)
ES2_OPENGL
(
)
ES3_OPENGL
(
)
ES2_OPENGLES
(
)
ES3_OPENGLES
(
)
)
;
}
