#
include
"
test_utils
/
ANGLETest
.
h
"
using
namespace
angle
;
namespace
{
class
DebugMarkerTest
:
public
ANGLETest
{
protected
:
DebugMarkerTest
(
)
{
setWindowWidth
(
128
)
;
setWindowHeight
(
128
)
;
setConfigRedBits
(
8
)
;
setConfigGreenBits
(
8
)
;
setConfigBlueBits
(
8
)
;
setConfigAlphaBits
(
8
)
;
}
}
;
TEST_P
(
DebugMarkerTest
BasicValidation
)
{
if
(
!
extensionEnabled
(
"
GL_EXT_debug_marker
"
)
)
{
std
:
:
cout
<
<
"
Test
skipped
due
to
missing
GL_EXT_debug_marker
"
<
<
std
:
:
endl
;
return
;
}
std
:
:
string
eventMarkerCaption
=
"
Test
event
marker
caption
"
;
std
:
:
string
groupMarkerCaption
=
"
Test
group
marker
caption
"
;
glPushGroupMarkerEXT
(
static_cast
<
GLsizei
>
(
groupMarkerCaption
.
length
(
)
)
groupMarkerCaption
.
c_str
(
)
)
;
glClearColor
(
1
.
0f
1
.
0f
1
.
0f
1
.
0f
)
;
glClear
(
GL_COLOR_BUFFER_BIT
)
;
glInsertEventMarkerEXT
(
static_cast
<
GLsizei
>
(
eventMarkerCaption
.
length
(
)
)
eventMarkerCaption
.
c_str
(
)
)
;
glClearColor
(
1
.
0f
0
.
0f
0
.
0f
1
.
0f
)
;
glClear
(
GL_COLOR_BUFFER_BIT
)
;
glPushGroupMarkerEXT
(
0
nullptr
)
;
glClearColor
(
0
.
0f
1
.
0f
0
.
0f
0
.
0f
)
;
glClear
(
GL_COLOR_BUFFER_BIT
)
;
glPopGroupMarkerEXT
(
)
;
glClearColor
(
0
.
0f
0
.
0f
1
.
0f
0
.
0f
)
;
glClear
(
GL_COLOR_BUFFER_BIT
)
;
glPopGroupMarkerEXT
(
)
;
ASSERT_GL_NO_ERROR
(
)
;
}
ANGLE_INSTANTIATE_TEST
(
DebugMarkerTest
ES2_D3D9
(
)
ES2_D3D11
(
)
ES2_OPENGL
(
)
ES2_OPENGLES
(
)
)
;
}
