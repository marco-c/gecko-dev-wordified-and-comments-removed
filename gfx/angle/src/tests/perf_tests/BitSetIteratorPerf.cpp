#
include
"
ANGLEPerfTest
.
h
"
#
include
<
gmock
/
gmock
.
h
>
#
include
"
angle_unittests_utils
.
h
"
#
include
"
common
/
bitset_utils
.
h
"
using
namespace
testing
;
namespace
{
template
<
typename
T
>
class
BitSetIteratorPerfTest
:
public
ANGLEPerfTest
{
public
:
BitSetIteratorPerfTest
(
)
;
void
step
(
)
override
;
T
mBits
;
}
;
template
<
typename
T
>
BitSetIteratorPerfTest
<
T
>
:
:
BitSetIteratorPerfTest
(
)
:
ANGLEPerfTest
(
"
BitSetIteratorPerf
"
"
_run
"
)
{
}
template
<
typename
T
>
void
BitSetIteratorPerfTest
<
T
>
:
:
step
(
)
{
mBits
.
flip
(
)
;
for
(
size_t
bit
:
mBits
)
{
UNUSED_VARIABLE
(
bit
)
;
}
mBits
.
reset
(
)
;
}
#
if
defined
(
ANGLE_X64_CPU
)
using
TestTypes
=
Types
<
angle
:
:
IterableBitSet
<
32
>
angle
:
:
BitSet32
<
32
>
angle
:
:
BitSet64
<
32
>
>
;
#
else
using
TestTypes
=
Types
<
angle
:
:
IterableBitSet
<
32
>
angle
:
:
BitSet32
<
32
>
>
;
#
endif
TYPED_TEST_CASE
(
BitSetIteratorPerfTest
TestTypes
)
;
TYPED_TEST
(
BitSetIteratorPerfTest
Run
)
{
this
-
>
run
(
)
;
}
}
