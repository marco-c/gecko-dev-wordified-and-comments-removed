#
include
"
tests
/
test_utils
/
ConstantFoldingTest
.
h
"
using
namespace
sh
;
namespace
{
class
ConstantFoldingOverflowExpressionTest
:
public
ConstantFoldingExpressionTest
{
public
:
ConstantFoldingOverflowExpressionTest
(
)
{
}
void
evaluateFloatOverflow
(
const
std
:
:
string
&
floatString
bool
positive
)
{
evaluateFloat
(
floatString
)
;
float
expected
=
positive
?
std
:
:
numeric_limits
<
float
>
:
:
infinity
(
)
:
-
std
:
:
numeric_limits
<
float
>
:
:
infinity
(
)
;
ASSERT_TRUE
(
constantFoundInAST
(
expected
)
)
;
ASSERT_TRUE
(
hasWarning
(
)
)
;
}
}
;
}
TEST_F
(
ConstantFoldingOverflowExpressionTest
Add
)
{
const
std
:
:
string
&
floatString
=
"
2
.
0e38
+
2
.
0e38
"
;
evaluateFloatOverflow
(
floatString
true
)
;
}
TEST_F
(
ConstantFoldingOverflowExpressionTest
Subtract
)
{
const
std
:
:
string
&
floatString
=
"
2
.
0e38
-
(
-
2
.
0e38
)
"
;
evaluateFloatOverflow
(
floatString
true
)
;
}
TEST_F
(
ConstantFoldingOverflowExpressionTest
Multiply
)
{
const
std
:
:
string
&
floatString
=
"
1
.
0e30
*
1
.
0e10
"
;
evaluateFloatOverflow
(
floatString
true
)
;
}
TEST_F
(
ConstantFoldingOverflowExpressionTest
Divide
)
{
const
std
:
:
string
&
floatString
=
"
1
.
0e30
/
1
.
0e
-
10
"
;
evaluateFloatOverflow
(
floatString
true
)
;
}
