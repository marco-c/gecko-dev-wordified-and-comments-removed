#
include
"
GLSLANG
/
ShaderLang
.
h
"
#
include
"
angle_gl
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
tests
/
test_utils
/
ShaderCompileTreeTest
.
h
"
using
namespace
sh
;
class
ARBTextureRectangleTestNoExt
:
public
ShaderCompileTreeTest
{
protected
:
:
:
GLenum
getShaderType
(
)
const
override
{
return
GL_FRAGMENT_SHADER
;
}
ShShaderSpec
getShaderSpec
(
)
const
override
{
return
SH_GLES3_SPEC
;
}
}
;
class
ARBTextureRectangleTest
:
public
ARBTextureRectangleTestNoExt
{
protected
:
void
initResources
(
ShBuiltInResources
*
resources
)
override
{
resources
-
>
ARB_texture_rectangle
=
1
;
}
}
;
TEST_F
(
ARBTextureRectangleTest
NewTypeAndBuiltinsWithoutTranslatorResourceExtension
)
{
const
std
:
:
string
&
shaderString
=
"
precision
mediump
float
;
\
n
"
"
uniform
sampler2DRect
tex
;
\
n
"
"
void
main
(
)
{
\
n
"
"
}
\
n
"
;
ASSERT_TRUE
(
compile
(
shaderString
)
)
;
}
TEST_F
(
ARBTextureRectangleTest
NewTypeAndBuiltinsWithoutExtensionDirective
)
{
const
std
:
:
string
&
shaderString
=
"
precision
mediump
float
;
\
n
"
"
uniform
sampler2DRect
tex
;
\
n
"
"
void
main
(
)
{
\
n
"
"
vec4
color
=
texture2DRect
(
tex
vec2
(
1
.
0
)
)
;
"
"
color
=
texture2DRectProj
(
tex
vec3
(
1
.
0
)
)
;
"
"
color
=
texture2DRectProj
(
tex
vec4
(
1
.
0
)
)
;
"
"
}
\
n
"
;
ASSERT_TRUE
(
compile
(
shaderString
)
)
;
}
TEST_F
(
ARBTextureRectangleTest
NewTypeAndBuiltingsWithExtensionDirective
)
{
const
std
:
:
string
&
shaderString
=
"
#
extension
GL_ARB_texture_rectangle
:
require
\
n
"
"
precision
mediump
float
;
\
n
"
"
uniform
sampler2DRect
tex
;
\
n
"
"
void
main
(
)
{
\
n
"
"
vec4
color
=
texture2DRect
(
tex
vec2
(
1
.
0
)
)
;
"
"
color
=
texture2DRectProj
(
tex
vec3
(
1
.
0
)
)
;
"
"
color
=
texture2DRectProj
(
tex
vec4
(
1
.
0
)
)
;
"
"
}
\
n
"
;
ASSERT_TRUE
(
compile
(
shaderString
)
)
;
}
TEST_F
(
ARBTextureRectangleTest
Rect2DVs2DMismatch
)
{
const
std
:
:
string
&
shaderString1
=
"
#
extension
GL_ARB_texture_rectangle
:
require
\
n
"
"
precision
mediump
float
;
\
n
"
"
uniform
sampler2DRect
tex
;
\
n
"
"
void
main
(
)
{
\
n
"
"
vec4
color
=
texture2D
(
tex
vec2
(
1
.
0
)
)
;
"
"
}
\
n
"
;
ASSERT_FALSE
(
compile
(
shaderString1
)
)
;
const
std
:
:
string
&
shaderString2
=
"
#
extension
GL_ARB_texture_rectangle
:
require
\
n
"
"
precision
mediump
float
;
\
n
"
"
uniform
sampler2D
tex
;
\
n
"
"
void
main
(
)
{
\
n
"
"
vec4
color
=
texture2DRect
(
tex
vec2
(
1
.
0
)
)
;
"
"
}
\
n
"
;
ASSERT_FALSE
(
compile
(
shaderString2
)
)
;
}
