#
include
"
angle_gl
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
GLSLANG
/
ShaderLang
.
h
"
#
include
"
tests
/
test_utils
/
compiler_test
.
h
"
using
namespace
sh
;
class
RecordConstantPrecisionTest
:
public
MatchOutputCodeTest
{
public
:
RecordConstantPrecisionTest
(
)
:
MatchOutputCodeTest
(
GL_FRAGMENT_SHADER
0
SH_ESSL_OUTPUT
)
{
}
}
;
TEST_F
(
RecordConstantPrecisionTest
HigherPrecisionConstantAsParameter
)
{
const
std
:
:
string
&
shaderString
=
"
uniform
mediump
float
u
;
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
const
highp
float
a
=
4096
.
5
;
\
n
"
"
mediump
float
b
=
fract
(
a
+
u
)
;
\
n
"
"
gl_FragColor
=
vec4
(
b
)
;
\
n
"
"
}
\
n
"
;
compile
(
shaderString
)
;
ASSERT_TRUE
(
foundInCode
(
"
const
highp
float
s
"
)
)
;
ASSERT_FALSE
(
foundInCode
(
"
fract
(
4096
.
5
"
)
)
;
ASSERT_FALSE
(
foundInCode
(
"
fract
(
(
4096
.
5
"
)
)
;
}
TEST_F
(
RecordConstantPrecisionTest
EqualPrecisionConstantAsParameter
)
{
const
std
:
:
string
&
shaderString
=
"
uniform
mediump
float
u
;
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
const
mediump
float
a
=
4096
.
5
;
\
n
"
"
mediump
float
b
=
fract
(
a
+
u
)
;
\
n
"
"
gl_FragColor
=
vec4
(
b
)
;
\
n
"
"
}
\
n
"
;
compile
(
shaderString
)
;
ASSERT_FALSE
(
foundInCode
(
"
const
mediump
float
s
"
)
)
;
ASSERT_TRUE
(
foundInCode
(
"
fract
(
(
4096
.
5
"
)
)
;
}
TEST_F
(
RecordConstantPrecisionTest
FoldedBinaryConstantPrecisionIsHigher
)
{
const
std
:
:
string
&
shaderString
=
"
uniform
mediump
float
u
;
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
const
highp
float
a
=
4095
.
5
;
\
n
"
"
mediump
float
b
=
fract
(
(
a
+
1
.
0
)
+
u
)
;
\
n
"
"
gl_FragColor
=
vec4
(
b
)
;
\
n
"
"
}
\
n
"
;
compile
(
shaderString
)
;
ASSERT_TRUE
(
foundInCode
(
"
const
highp
float
s
"
)
)
;
ASSERT_FALSE
(
foundInCode
(
"
fract
(
4096
.
5
"
)
)
;
ASSERT_FALSE
(
foundInCode
(
"
fract
(
(
4096
.
5
"
)
)
;
}
TEST_F
(
RecordConstantPrecisionTest
FoldedUnaryConstantPrecisionIsHigher
)
{
const
std
:
:
string
&
shaderString
=
"
uniform
mediump
float
u
;
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
const
highp
float
a
=
0
.
5
;
\
n
"
"
mediump
float
b
=
sin
(
fract
(
a
)
+
u
)
;
\
n
"
"
gl_FragColor
=
vec4
(
b
)
;
\
n
"
"
}
\
n
"
;
compile
(
shaderString
)
;
ASSERT_TRUE
(
foundInCode
(
"
const
highp
float
s
"
)
)
;
ASSERT_FALSE
(
foundInCode
(
"
sin
(
0
.
5
"
)
)
;
ASSERT_FALSE
(
foundInCode
(
"
sin
(
(
0
.
5
"
)
)
;
}
