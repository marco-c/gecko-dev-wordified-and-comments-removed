#
include
"
angle_gl
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
GLSLANG
/
ShaderLang
.
h
"
namespace
{
const
char
ESSLVersion100
[
]
=
"
#
version
100
\
n
"
;
const
char
ESSLVersion300
[
]
=
"
#
version
300
es
\
n
"
;
const
char
EXTFDPragma
[
]
=
"
#
extension
GL_EXT_frag_depth
:
require
\
n
"
;
}
class
FragDepthTest
:
public
testing
:
:
TestWithParam
<
bool
>
{
protected
:
void
SetUp
(
)
override
{
ShInitBuiltInResources
(
&
mResources
)
;
mCompiler
=
nullptr
;
mResources
.
EXT_frag_depth
=
GetParam
(
)
;
}
void
TearDown
(
)
override
{
DestroyCompiler
(
)
;
}
void
DestroyCompiler
(
)
{
if
(
mCompiler
)
{
ShDestruct
(
mCompiler
)
;
mCompiler
=
nullptr
;
}
}
void
InitializeCompiler
(
)
{
DestroyCompiler
(
)
;
mCompiler
=
ShConstructCompiler
(
GL_FRAGMENT_SHADER
SH_GLES3_SPEC
SH_GLSL_OUTPUT
&
mResources
)
;
ASSERT_TRUE
(
mCompiler
!
=
nullptr
)
<
<
"
Compiler
could
not
be
constructed
.
"
;
}
testing
:
:
AssertionResult
TestShaderCompile
(
const
char
*
version
const
char
*
pragma
const
char
*
shader
)
{
const
char
*
shaderStrings
[
]
=
{
version
pragma
shader
}
;
bool
success
=
ShCompile
(
mCompiler
shaderStrings
3
0
)
;
if
(
success
)
{
return
:
:
testing
:
:
AssertionSuccess
(
)
<
<
"
Compilation
success
"
;
}
return
:
:
testing
:
:
AssertionFailure
(
)
<
<
ShGetInfoLog
(
mCompiler
)
;
}
protected
:
ShBuiltInResources
mResources
;
ShHandle
mCompiler
;
}
;
TEST_P
(
FragDepthTest
CompileFailsESSL100
)
{
static
const
char
shaderString
[
]
=
"
precision
mediump
float
;
\
n
"
"
void
main
(
)
{
\
n
"
"
gl_FragDepth
=
1
.
0
;
\
n
"
"
}
\
n
"
;
InitializeCompiler
(
)
;
EXPECT_FALSE
(
TestShaderCompile
(
ESSLVersion100
"
"
shaderString
)
)
;
EXPECT_FALSE
(
TestShaderCompile
(
"
"
"
"
shaderString
)
)
;
EXPECT_FALSE
(
TestShaderCompile
(
"
"
EXTFDPragma
shaderString
)
)
;
}
TEST_P
(
FragDepthTest
CompileSucceedsESSL300
)
{
static
const
char
shaderString
[
]
=
"
precision
mediump
float
;
\
n
"
"
void
main
(
)
{
\
n
"
"
gl_FragDepth
=
1
.
0
;
\
n
"
"
}
\
n
"
;
InitializeCompiler
(
)
;
EXPECT_TRUE
(
TestShaderCompile
(
ESSLVersion300
"
"
shaderString
)
)
;
}
TEST_P
(
FragDepthTest
ExtensionFDFailsESSL300
)
{
static
const
char
shaderString
[
]
=
"
precision
mediump
float
;
\
n
"
"
out
vec4
fragColor
;
\
n
"
"
void
main
(
)
{
\
n
"
"
fragColor
=
vec4
(
1
.
0
)
;
\
n
"
"
}
\
n
"
;
InitializeCompiler
(
)
;
if
(
mResources
.
EXT_frag_depth
=
=
1
)
{
EXPECT_TRUE
(
TestShaderCompile
(
ESSLVersion300
EXTFDPragma
shaderString
)
)
;
}
else
{
EXPECT_FALSE
(
TestShaderCompile
(
ESSLVersion300
EXTFDPragma
shaderString
)
)
;
}
}
INSTANTIATE_TEST_CASE_P
(
FragDepthTests
FragDepthTest
testing
:
:
Values
(
false
true
)
)
;
