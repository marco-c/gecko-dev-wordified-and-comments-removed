#
include
"
angle_gl
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
GLSLANG
/
ShaderLang
.
h
"
#
include
"
tests
/
test_utils
/
compiler_test
.
h
"
using
namespace
sh
;
namespace
{
class
PackUnpackTest
:
public
MatchOutputCodeTest
{
public
:
PackUnpackTest
(
)
:
MatchOutputCodeTest
(
GL_FRAGMENT_SHADER
0
SH_GLSL_400_CORE_OUTPUT
)
{
}
}
;
TEST_F
(
PackUnpackTest
PackSnorm2x16Emulation
)
{
const
std
:
:
string
&
shaderString
=
"
#
version
300
es
\
n
"
"
precision
mediump
float
;
\
n
"
"
layout
(
location
=
0
)
out
mediump
vec4
fragColor
;
"
"
void
main
(
)
{
\
n
"
"
vec2
v
;
\
n
"
"
uint
u
=
packSnorm2x16
(
v
)
;
\
n
"
"
fragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
compile
(
shaderString
)
;
ASSERT_TRUE
(
foundInCode
(
"
uint
webgl_packSnorm2x16_emu
(
vec2
v
)
"
)
)
;
}
TEST_F
(
PackUnpackTest
UnpackSnorm2x16Emulation
)
{
const
std
:
:
string
&
shaderString
=
"
#
version
300
es
\
n
"
"
precision
mediump
float
;
\
n
"
"
layout
(
location
=
0
)
out
mediump
vec4
fragColor
;
"
"
void
main
(
)
{
\
n
"
"
uint
u
;
\
n
"
"
vec2
v
=
unpackSnorm2x16
(
u
)
;
\
n
"
"
fragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
compile
(
shaderString
)
;
ASSERT_TRUE
(
foundInCode
(
"
vec2
webgl_unpackSnorm2x16_emu
(
uint
u
)
"
)
)
;
}
TEST_F
(
PackUnpackTest
PackUnorm2x16Emulation
)
{
const
std
:
:
string
&
shaderString
=
"
#
version
300
es
\
n
"
"
precision
mediump
float
;
\
n
"
"
layout
(
location
=
0
)
out
mediump
vec4
fragColor
;
"
"
void
main
(
)
{
\
n
"
"
vec2
v
;
\
n
"
"
uint
u
=
packUnorm2x16
(
v
)
;
\
n
"
"
fragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
compile
(
shaderString
)
;
ASSERT_TRUE
(
foundInCode
(
"
uint
webgl_packUnorm2x16_emu
(
vec2
v
)
"
)
)
;
}
TEST_F
(
PackUnpackTest
UnpackUnorm2x16Emulation
)
{
const
std
:
:
string
&
shaderString
=
"
#
version
300
es
\
n
"
"
precision
mediump
float
;
\
n
"
"
layout
(
location
=
0
)
out
mediump
vec4
fragColor
;
"
"
void
main
(
)
{
\
n
"
"
uint
u
;
\
n
"
"
vec2
v
=
unpackUnorm2x16
(
u
)
;
\
n
"
"
fragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
compile
(
shaderString
)
;
ASSERT_TRUE
(
foundInCode
(
"
vec2
webgl_unpackUnorm2x16_emu
(
uint
u
)
"
)
)
;
}
TEST_F
(
PackUnpackTest
PackHalf2x16Emulation
)
{
const
std
:
:
string
&
shaderString
=
"
#
version
300
es
\
n
"
"
precision
mediump
float
;
\
n
"
"
layout
(
location
=
0
)
out
mediump
vec4
fragColor
;
"
"
void
main
(
)
{
\
n
"
"
vec2
v
;
\
n
"
"
uint
u
=
packHalf2x16
(
v
)
;
\
n
"
"
fragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
compile
(
shaderString
)
;
ASSERT_TRUE
(
foundInCode
(
"
uint
webgl_packHalf2x16_emu
(
vec2
v
)
"
)
)
;
}
TEST_F
(
PackUnpackTest
UnpackHalf2x16Emulation
)
{
const
std
:
:
string
&
shaderString
=
"
#
version
300
es
\
n
"
"
precision
mediump
float
;
\
n
"
"
layout
(
location
=
0
)
out
mediump
vec4
fragColor
;
"
"
void
main
(
)
{
\
n
"
"
uint
u
;
\
n
"
"
vec2
v
=
unpackHalf2x16
(
u
)
;
\
n
"
"
fragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
compile
(
shaderString
)
;
ASSERT_TRUE
(
foundInCode
(
"
vec2
webgl_unpackHalf2x16_emu
(
uint
u
)
"
)
)
;
}
}
