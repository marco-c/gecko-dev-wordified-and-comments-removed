#
include
"
gtest
/
gtest
.
h
"
#
include
"
GLSLANG
/
ShaderLang
.
h
"
#
include
"
angle_gl
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
tests
/
test_utils
/
ShaderCompileTreeTest
.
h
"
using
namespace
sh
;
class
BufferVariablesTest
:
public
ShaderCompileTreeTest
{
public
:
BufferVariablesTest
(
)
{
}
protected
:
:
:
GLenum
getShaderType
(
)
const
override
{
return
GL_VERTEX_SHADER
;
}
ShShaderSpec
getShaderSpec
(
)
const
override
{
return
SH_GLES3_1_SPEC
;
}
void
initResources
(
ShBuiltInResources
*
resources
)
override
{
resources
-
>
MaxShaderStorageBufferBindings
=
8
;
}
}
;
TEST_F
(
BufferVariablesTest
BasicShaderStorageBlockDeclaration
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
int
b1
;
\
n
"
"
buffer
int
b2
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
!
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
failed
expecting
success
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
LayoutQualifiersDeclaredInGlobal
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
shared
column_major
)
buffer
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
!
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
failed
expecting
success
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
ShaderStorageBlockWithMemoryQualifier
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
writeonly
buffer
buf
{
\
n
"
"
int
b1
;
\
n
"
"
buffer
int
b2
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
!
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
failed
expecting
success
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
BufferVariablesWithMemoryQualifier
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
writeonly
int
b1
;
\
n
"
"
writeonly
buffer
int
b2
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
!
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
failed
expecting
success
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
DeclareBufferVariableAtGlobal
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
int
a
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
BufferVariableWithOpaqueType
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
int
b1
;
\
n
"
"
atomic_uint
b2
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
UniformVariableInShaderStorageBlock
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
uniform
int
a
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
BufferQualifierInESSL3
)
{
const
std
:
:
string
&
source
=
"
#
version
300
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
int
b1
;
\
n
"
"
buffer
int
b2
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
AssignToReadonlyBufferVariable
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
readonly
int
b1
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
b1
=
5
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
AssignToBufferVariableWithinReadonlyBlock
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
readonly
buffer
buf
{
\
n
"
"
int
b1
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
b1
=
5
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
AccessReadonlyWriteonlyBufferVariable
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
readonly
writeonly
int
b1
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
b1
=
5
;
\
n
"
"
int
test
=
b1
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
AccessWriteonlyBufferVariable
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
writeonly
int
b1
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
int
test
=
b1
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
AccessReadonlyBufferVariableByInstanceName
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
readonly
float
f
;
\
n
"
"
}
instanceBuffer
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
float
test
=
instanceBuffer
.
f
;
\
n
"
"
}
\
n
"
;
if
(
!
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
failed
expecting
success
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
AccessWriteonlyBufferVariableByInstanceName
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
writeonly
buffer
buf
{
\
n
"
"
float
f
;
\
n
"
"
}
instanceBuffer
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
float
test
=
instanceBuffer
.
f
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
UnaryOperatorWithWriteonlyBufferVariable
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
writeonly
int
b1
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
+
+
b1
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
CompoundAssignmentToWriteonlyBufferVariable
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
writeonly
int
b1
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
b1
+
=
5
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
TernarySelectionWithWriteonlyBufferVariable
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
writeonly
bool
b1
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
int
test
=
b1
?
1
:
0
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
ArrayConstructorWithWriteonlyBufferVariable
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
writeonly
float
f
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
float
a
[
3
]
=
float
[
3
]
(
f
f
f
)
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
StructureConstructorWithWriteonlyBufferVariable
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
struct
S
{
\
n
"
"
int
a
;
\
n
"
"
}
;
\
n
"
"
struct
T
{
\
n
"
"
S
b
;
\
n
"
"
}
;
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
writeonly
S
c
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
T
t
=
T
(
c
)
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
BuildInFunctionWithWriteonlyBufferVariable
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
writeonly
int
a
;
\
n
"
"
}
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
int
test
=
min
(
a
1
)
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
UserDefinedFunctionWithReadonlyBufferVariableInArgument
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
readonly
float
f
;
\
n
"
"
}
;
\
n
"
"
void
foo
(
float
a
)
{
}
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
foo
(
f
)
;
\
n
"
"
}
\
n
"
;
if
(
!
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
failed
expecting
success
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
UserDefinedFunctionWithWriteonlyBufferVariableInArgument
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
writeonly
float
f
;
\
n
"
"
}
;
\
n
"
"
void
foo
(
float
a
)
{
}
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
foo
(
f
)
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
UserDefinedFunctionWithWriteonlyBufferVariableOutArgument
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
writeonly
float
f
;
\
n
"
"
}
;
\
n
"
"
void
foo
(
out
float
a
)
{
}
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
foo
(
f
)
;
\
n
"
"
}
\
n
"
;
if
(
!
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
failed
expecting
success
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
UserDefinedFunctionWithReadonlyBufferVariableOutArgument
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
3
)
buffer
buf
{
\
n
"
"
readonly
float
f
;
\
n
"
"
}
;
\
n
"
"
void
foo
(
out
float
a
)
{
}
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
foo
(
f
)
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
BufferVariablesTest
BufferQualifierOnFunctionParameter
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
void
foo
(
buffer
float
a
)
{
}
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
