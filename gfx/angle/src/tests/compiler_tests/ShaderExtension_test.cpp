#
include
"
angle_gl
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
GLSLANG
/
ShaderLang
.
h
"
static
const
char
*
FragDepthExtShdr
[
]
=
{
"
#
extension
GL_EXT_frag_depth
:
enable
\
n
"
"
void
main
(
)
{
gl_FragDepthEXT
=
1
.
0
;
}
\
n
"
}
;
static
const
char
*
StandDerivExtShdr
[
]
=
{
"
#
extension
GL_OES_standard_derivatives
:
enable
\
n
"
"
precision
mediump
float
;
\
n
"
"
varying
vec2
texCoord
;
\
n
"
"
void
main
(
)
{
gl_FragColor
=
vec4
(
dFdx
(
texCoord
.
x
)
dFdy
(
texCoord
.
y
)
fwidth
(
texCoord
.
x
)
1
.
0
)
;
}
\
n
"
}
;
static
const
char
*
TextureLODShdr
[
]
=
{
"
#
extension
GL_EXT_shader_texture_lod
:
enable
\
n
"
"
precision
mediump
float
;
\
n
"
"
varying
vec2
texCoord0v
;
\
n
"
"
uniform
float
lod
;
\
n
"
"
uniform
sampler2D
tex
;
\
n
"
"
void
main
(
)
{
vec4
color
=
texture2DLodEXT
(
tex
texCoord0v
lod
)
;
}
\
n
"
}
;
class
ShaderExtensionTest
:
public
testing
:
:
Test
{
public
:
ShaderExtensionTest
(
)
{
}
protected
:
virtual
void
SetUp
(
)
{
sh
:
:
InitBuiltInResources
(
&
mResources
)
;
mCompiler
=
NULL
;
}
virtual
void
TearDown
(
)
{
DestroyCompiler
(
)
;
}
void
DestroyCompiler
(
)
{
if
(
mCompiler
)
{
sh
:
:
Destruct
(
mCompiler
)
;
mCompiler
=
NULL
;
}
}
void
InitializeCompiler
(
)
{
DestroyCompiler
(
)
;
mCompiler
=
sh
:
:
ConstructCompiler
(
GL_FRAGMENT_SHADER
SH_WEBGL_SPEC
SH_GLSL_COMPATIBILITY_OUTPUT
&
mResources
)
;
ASSERT_TRUE
(
mCompiler
!
=
NULL
)
<
<
"
Compiler
could
not
be
constructed
.
"
;
}
void
TestShaderExtension
(
const
char
*
*
shaderStrings
int
stringCount
bool
expectation
)
{
bool
success
=
sh
:
:
Compile
(
mCompiler
shaderStrings
stringCount
0
)
;
const
std
:
:
string
&
compileLog
=
sh
:
:
GetInfoLog
(
mCompiler
)
;
EXPECT_EQ
(
expectation
success
)
<
<
compileLog
;
}
protected
:
ShBuiltInResources
mResources
;
ShHandle
mCompiler
;
}
;
TEST_F
(
ShaderExtensionTest
FragDepthExtRequiresExt
)
{
mResources
.
EXT_frag_depth
=
0
;
InitializeCompiler
(
)
;
TestShaderExtension
(
FragDepthExtShdr
2
false
)
;
}
TEST_F
(
ShaderExtensionTest
FragDepthExtRequiresPragma
)
{
mResources
.
EXT_frag_depth
=
1
;
InitializeCompiler
(
)
;
TestShaderExtension
(
&
FragDepthExtShdr
[
1
]
1
false
)
;
}
TEST_F
(
ShaderExtensionTest
FragDepthExtCompiles
)
{
mResources
.
EXT_frag_depth
=
1
;
InitializeCompiler
(
)
;
TestShaderExtension
(
FragDepthExtShdr
2
true
)
;
}
TEST_F
(
ShaderExtensionTest
FragDepthExtResetsInternalStates
)
{
mResources
.
EXT_frag_depth
=
1
;
InitializeCompiler
(
)
;
TestShaderExtension
(
FragDepthExtShdr
2
true
)
;
TestShaderExtension
(
&
FragDepthExtShdr
[
1
]
1
false
)
;
TestShaderExtension
(
FragDepthExtShdr
2
true
)
;
}
TEST_F
(
ShaderExtensionTest
StandDerivExtRequiresExt
)
{
mResources
.
OES_standard_derivatives
=
0
;
InitializeCompiler
(
)
;
TestShaderExtension
(
StandDerivExtShdr
2
false
)
;
}
TEST_F
(
ShaderExtensionTest
StandDerivExtRequiresPragma
)
{
mResources
.
OES_standard_derivatives
=
1
;
InitializeCompiler
(
)
;
TestShaderExtension
(
&
StandDerivExtShdr
[
1
]
1
false
)
;
}
TEST_F
(
ShaderExtensionTest
StandDerivExtCompiles
)
{
mResources
.
OES_standard_derivatives
=
1
;
InitializeCompiler
(
)
;
TestShaderExtension
(
StandDerivExtShdr
2
true
)
;
}
TEST_F
(
ShaderExtensionTest
StandDerivExtResetsInternalStates
)
{
mResources
.
OES_standard_derivatives
=
1
;
InitializeCompiler
(
)
;
TestShaderExtension
(
StandDerivExtShdr
2
true
)
;
TestShaderExtension
(
&
StandDerivExtShdr
[
1
]
1
false
)
;
TestShaderExtension
(
StandDerivExtShdr
2
true
)
;
TestShaderExtension
(
&
StandDerivExtShdr
[
1
]
1
false
)
;
}
TEST_F
(
ShaderExtensionTest
TextureLODExtRequiresExt
)
{
mResources
.
EXT_shader_texture_lod
=
0
;
InitializeCompiler
(
)
;
TestShaderExtension
(
TextureLODShdr
2
false
)
;
}
TEST_F
(
ShaderExtensionTest
TextureLODExtRequiresPragma
)
{
mResources
.
EXT_shader_texture_lod
=
1
;
InitializeCompiler
(
)
;
TestShaderExtension
(
&
TextureLODShdr
[
1
]
1
false
)
;
}
TEST_F
(
ShaderExtensionTest
TextureLODExtCompiles
)
{
mResources
.
EXT_shader_texture_lod
=
1
;
InitializeCompiler
(
)
;
TestShaderExtension
(
TextureLODShdr
2
true
)
;
}
TEST_F
(
ShaderExtensionTest
TextureLODExtResetsInternalStates
)
{
mResources
.
EXT_shader_texture_lod
=
1
;
InitializeCompiler
(
)
;
TestShaderExtension
(
&
TextureLODShdr
[
1
]
1
false
)
;
TestShaderExtension
(
TextureLODShdr
2
true
)
;
TestShaderExtension
(
&
TextureLODShdr
[
1
]
1
false
)
;
TestShaderExtension
(
TextureLODShdr
2
true
)
;
}
TEST_F
(
ShaderExtensionTest
BuiltinRewritingBug
)
{
mResources
.
MaxDrawBuffers
=
4
;
mResources
.
EXT_draw_buffers
=
1
;
InitializeCompiler
(
)
;
const
std
:
:
string
&
shaderString
=
"
#
extension
GL_EXT_draw_buffers
:
require
\
n
"
"
precision
mediump
float
;
\
n
"
"
void
main
(
)
{
\
n
"
"
gl_FragData
[
gl_MaxDrawBuffers
]
=
vec4
(
0
.
0
)
;
\
n
"
"
}
"
;
const
char
*
shaderStrings
[
]
=
{
shaderString
.
c_str
(
)
}
;
TestShaderExtension
(
shaderStrings
1
false
)
;
TestShaderExtension
(
shaderStrings
1
false
)
;
}
