#
include
"
tests
/
test_utils
/
ConstantFoldingTest
.
h
"
using
namespace
sh
;
namespace
{
class
ConstantFoldingNaNExpressionTest
:
public
ConstantFoldingExpressionTest
{
public
:
ConstantFoldingNaNExpressionTest
(
)
{
}
void
evaluateFloatNaN
(
const
std
:
:
string
&
floatString
)
{
evaluateFloat
(
floatString
)
;
ASSERT_TRUE
(
constantFoundInAST
(
std
:
:
numeric_limits
<
float
>
:
:
quiet_NaN
(
)
)
)
;
ASSERT_TRUE
(
hasWarning
(
)
)
;
}
}
;
}
TEST_F
(
ConstantFoldingNaNExpressionTest
FoldInfinityMinusInfinity
)
{
const
std
:
:
string
&
floatString
=
"
1
.
0e2048
-
1
.
0e2048
"
;
evaluateFloatNaN
(
floatString
)
;
}
TEST_F
(
ConstantFoldingNaNExpressionTest
FoldInfinityPlusNegativeInfinity
)
{
const
std
:
:
string
&
floatString
=
"
1
.
0e2048
+
(
-
1
.
0e2048
)
"
;
evaluateFloatNaN
(
floatString
)
;
}
TEST_F
(
ConstantFoldingNaNExpressionTest
FoldInfinityMultipliedByZero
)
{
const
std
:
:
string
&
floatString
=
"
1
.
0e2048
*
0
.
0
"
;
evaluateFloatNaN
(
floatString
)
;
}
TEST_F
(
ConstantFoldingNaNExpressionTest
FoldInfinityDividedByInfinity
)
{
const
std
:
:
string
&
floatString
=
"
1
.
0e2048
/
1
.
0e2048
"
;
evaluateFloatNaN
(
floatString
)
;
}
TEST_F
(
ConstantFoldingNaNExpressionTest
FoldZeroDividedByZero
)
{
const
std
:
:
string
&
floatString
=
"
0
.
0
/
0
.
0
"
;
evaluateFloatNaN
(
floatString
)
;
}
