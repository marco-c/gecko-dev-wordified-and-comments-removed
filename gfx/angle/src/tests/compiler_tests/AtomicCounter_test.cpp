#
include
"
gtest
/
gtest
.
h
"
#
include
"
GLSLANG
/
ShaderLang
.
h
"
#
include
"
angle_gl
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
tests
/
test_utils
/
ShaderCompileTreeTest
.
h
"
using
namespace
sh
;
class
AtomicCounterTest
:
public
ShaderCompileTreeTest
{
public
:
AtomicCounterTest
(
)
{
}
protected
:
:
:
GLenum
getShaderType
(
)
const
override
{
return
GL_VERTEX_SHADER
;
}
ShShaderSpec
getShaderSpec
(
)
const
override
{
return
SH_GLES3_1_SPEC
;
}
void
initResources
(
ShBuiltInResources
*
resources
)
override
{
resources
-
>
MaxAtomicCounterBindings
=
8
;
}
}
;
TEST_F
(
AtomicCounterTest
BasicAtomicCounterDeclaration
)
{
mExtraCompileOptions
|
=
SH_VARIABLES
;
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
2
offset
=
4
)
uniform
atomic_uint
a
;
\
n
"
"
layout
(
binding
=
2
)
uniform
atomic_uint
b
;
\
n
"
"
layout
(
binding
=
2
offset
=
12
)
uniform
atomic_uint
c
d
;
\
n
"
"
layout
(
binding
=
1
offset
=
4
)
uniform
atomic_uint
e
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
!
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
failed
expecting
success
:
\
n
"
<
<
mInfoLog
;
}
std
:
:
vector
<
sh
:
:
Uniform
>
counters
=
getUniforms
(
)
;
EXPECT_EQ
(
std
:
:
string
(
"
a
"
)
counters
[
0
]
.
name
)
;
EXPECT_EQ
(
2
counters
[
0
]
.
binding
)
;
EXPECT_EQ
(
4
counters
[
0
]
.
offset
)
;
EXPECT_EQ
(
std
:
:
string
(
"
b
"
)
counters
[
1
]
.
name
)
;
EXPECT_EQ
(
2
counters
[
1
]
.
binding
)
;
EXPECT_EQ
(
8
counters
[
1
]
.
offset
)
;
EXPECT_EQ
(
std
:
:
string
(
"
c
"
)
counters
[
2
]
.
name
)
;
EXPECT_EQ
(
2
counters
[
2
]
.
binding
)
;
EXPECT_EQ
(
12
counters
[
2
]
.
offset
)
;
EXPECT_EQ
(
std
:
:
string
(
"
d
"
)
counters
[
3
]
.
name
)
;
EXPECT_EQ
(
2
counters
[
3
]
.
binding
)
;
EXPECT_EQ
(
16
counters
[
3
]
.
offset
)
;
EXPECT_EQ
(
std
:
:
string
(
"
e
"
)
counters
[
4
]
.
name
)
;
EXPECT_EQ
(
1
counters
[
4
]
.
binding
)
;
EXPECT_EQ
(
4
counters
[
4
]
.
offset
)
;
}
TEST_F
(
AtomicCounterTest
InvalidShaderVersion
)
{
const
std
:
:
string
&
source
=
"
#
version
300
es
\
n
"
"
layout
(
binding
=
2
offset
=
4
)
uniform
atomic_uint
a
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AtomicCounterTest
InvalidQualifier
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
2
offset
=
4
)
in
atomic_uint
a
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AtomicCounterTest
UniformMustSpecifiedForDeclaration
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
atomic_uint
a
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AtomicCounterTest
BindingOffsetOverlapping
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
2
offset
=
4
)
uniform
atomic_uint
a
;
\
n
"
"
layout
(
binding
=
2
offset
=
6
)
uniform
atomic_uint
b
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AtomicCounterTest
MultipleVariablesDeclaration
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
2
offset
=
4
)
uniform
atomic_uint
a
b
;
\
n
"
"
layout
(
binding
=
2
offset
=
8
)
uniform
atomic_uint
c
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AtomicCounterTest
GlobalBindingOffsetOverlapping
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
2
offset
=
4
)
uniform
atomic_uint
;
\
n
"
"
layout
(
binding
=
2
)
uniform
atomic_uint
b
;
\
n
"
"
layout
(
binding
=
2
offset
=
4
)
uniform
atomic_uint
c
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AtomicCounterTest
DeclarationSequenceWithDecrementalOffsetsSpecified
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
2
offset
=
4
)
uniform
atomic_uint
a
;
\
n
"
"
layout
(
binding
=
2
offset
=
0
)
uniform
atomic_uint
b
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
!
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
failed
expecting
success
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AtomicCounterTest
ImageFormatMustNotSpecified
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
binding
=
2
offset
=
4
rgba32f
)
uniform
atomic_uint
a
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AtomicCounterTest
OffsetMustNotSpecifiedForGlobalLayoutQualifier
)
{
const
std
:
:
string
&
source
=
"
#
version
310
es
\
n
"
"
layout
(
offset
=
4
)
in
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
}
\
n
"
;
if
(
compile
(
source
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
