#
include
"
gtest
/
gtest
.
h
"
#
include
"
angle_gl
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
GLSLANG
/
ShaderLang
.
h
"
#
include
"
tests
/
test_utils
/
ShaderCompileTreeTest
.
h
"
using
namespace
sh
;
class
AppendixALimitationsTest
:
public
ShaderCompileTreeTest
{
public
:
AppendixALimitationsTest
(
)
{
}
protected
:
:
:
GLenum
getShaderType
(
)
const
override
{
return
GL_FRAGMENT_SHADER
;
}
ShShaderSpec
getShaderSpec
(
)
const
override
{
return
SH_WEBGL_SPEC
;
}
}
;
TEST_F
(
AppendixALimitationsTest
IndexAsFunctionOutParameter
)
{
const
std
:
:
string
&
shaderString
=
"
precision
mediump
float
;
\
n
"
"
void
fun
(
out
int
a
)
\
n
"
"
{
\
n
"
"
a
=
2
;
\
n
"
"
}
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
for
(
int
i
=
0
;
i
<
2
;
+
+
i
)
\
n
"
"
{
\
n
"
"
fun
(
i
)
;
\
n
"
"
}
\
n
"
"
gl_FragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
shaderString
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AppendixALimitationsTest
IndexAsFunctionInOutParameter
)
{
const
std
:
:
string
&
shaderString
=
"
precision
mediump
float
;
\
n
"
"
void
fun
(
int
b
inout
int
a
)
\
n
"
"
{
\
n
"
"
a
+
=
b
;
\
n
"
"
}
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
for
(
int
i
=
0
;
i
<
2
;
+
+
i
)
\
n
"
"
{
\
n
"
"
fun
(
2
i
)
;
\
n
"
"
}
\
n
"
"
gl_FragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
shaderString
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AppendixALimitationsTest
IndexAsFunctionInParameter
)
{
const
std
:
:
string
&
shaderString
=
"
precision
mediump
float
;
\
n
"
"
void
fun
(
int
b
inout
int
a
)
\
n
"
"
{
\
n
"
"
a
+
=
b
;
\
n
"
"
}
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
for
(
int
i
=
0
;
i
<
2
;
+
+
i
)
\
n
"
"
{
\
n
"
"
int
a
=
1
;
"
"
fun
(
i
a
)
;
\
n
"
"
}
\
n
"
"
gl_FragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
if
(
!
compile
(
shaderString
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
failed
expecting
success
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AppendixALimitationsTest
IndexAsTargetOfAssignment
)
{
const
std
:
:
string
&
shaderString
=
"
precision
mediump
float
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
for
(
int
i
=
0
;
i
<
2
;
+
+
i
)
\
n
"
"
{
\
n
"
"
i
=
2
;
\
n
"
"
}
\
n
"
"
gl_FragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
shaderString
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
TEST_F
(
AppendixALimitationsTest
IndexIncrementedInLoopBody
)
{
const
std
:
:
string
&
shaderString
=
"
precision
mediump
float
;
\
n
"
"
void
main
(
)
\
n
"
"
{
\
n
"
"
for
(
int
i
=
0
;
i
<
2
;
+
+
i
)
\
n
"
"
{
\
n
"
"
+
+
i
;
\
n
"
"
}
\
n
"
"
gl_FragColor
=
vec4
(
0
.
0
)
;
\
n
"
"
}
\
n
"
;
if
(
compile
(
shaderString
)
)
{
FAIL
(
)
<
<
"
Shader
compilation
succeeded
expecting
failure
:
\
n
"
<
<
mInfoLog
;
}
}
