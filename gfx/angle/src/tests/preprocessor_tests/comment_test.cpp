#
include
"
PreprocessorTest
.
h
"
#
include
"
compiler
/
preprocessor
/
Token
.
h
"
class
CommentTest
:
public
SimplePreprocessorTest
public
testing
:
:
WithParamInterface
<
const
char
*
>
{
}
;
TEST_P
(
CommentTest
CommentIgnored
)
{
const
char
*
str
=
GetParam
(
)
;
pp
:
:
Token
token
;
lexSingleToken
(
str
&
token
)
;
EXPECT_EQ
(
pp
:
:
Token
:
:
LAST
token
.
type
)
;
}
INSTANTIATE_TEST_CASE_P
(
LineComment
CommentTest
testing
:
:
Values
(
"
/
/
foo
\
n
"
"
/
/
foo
"
"
/
/
*
*
/
"
"
/
/
/
/
"
"
/
/
\
"
"
)
)
;
INSTANTIATE_TEST_CASE_P
(
BlockComment
CommentTest
testing
:
:
Values
(
"
/
*
foo
*
/
"
"
/
*
foo
\
n
*
/
"
"
/
*
/
/
*
/
"
"
/
*
/
*
*
/
"
"
/
*
*
*
/
"
"
/
*
\
"
*
/
"
)
)
;
class
BlockCommentTest
:
public
SimplePreprocessorTest
{
}
;
TEST_F
(
BlockCommentTest
CommentReplacedWithSpace
)
{
const
char
*
str
=
"
/
*
foo
*
/
bar
"
;
pp
:
:
Token
token
;
lexSingleToken
(
str
&
token
)
;
EXPECT_EQ
(
pp
:
:
Token
:
:
IDENTIFIER
token
.
type
)
;
EXPECT_EQ
(
"
bar
"
token
.
text
)
;
EXPECT_TRUE
(
token
.
hasLeadingSpace
(
)
)
;
}
TEST_F
(
BlockCommentTest
UnterminatedComment
)
{
const
char
*
str
=
"
/
*
foo
"
;
using
testing
:
:
_
;
EXPECT_CALL
(
mDiagnostics
print
(
pp
:
:
Diagnostics
:
:
PP_EOF_IN_COMMENT
_
_
)
)
;
preprocess
(
str
)
;
}
