#
ifndef
LIBANGLE_RENDERER_GL_FORMATUTILSGL_H_
#
define
LIBANGLE_RENDERER_GL_FORMATUTILSGL_H_
#
include
<
map
>
#
include
<
string
>
#
include
<
vector
>
#
include
"
angle_gl
.
h
"
#
include
"
libANGLE
/
Version
.
h
"
#
include
"
libANGLE
/
renderer
/
gl
/
FunctionsGL
.
h
"
#
include
"
libANGLE
/
renderer
/
gl
/
WorkaroundsGL
.
h
"
namespace
rx
{
namespace
nativegl
{
struct
SupportRequirement
{
SupportRequirement
(
)
;
gl
:
:
Version
version
;
std
:
:
vector
<
std
:
:
string
>
versionExtensions
;
std
:
:
vector
<
std
:
:
string
>
requiredExtensions
;
}
;
struct
InternalFormat
{
InternalFormat
(
)
;
SupportRequirement
texture
;
SupportRequirement
filter
;
SupportRequirement
renderbuffer
;
SupportRequirement
framebufferAttachment
;
}
;
const
InternalFormat
&
GetInternalFormatInfo
(
GLenum
internalFormat
StandardGL
standard
)
;
struct
TexImageFormat
{
GLenum
internalFormat
;
GLenum
format
;
GLenum
type
;
}
;
TexImageFormat
GetTexImageFormat
(
const
FunctionsGL
*
functions
const
WorkaroundsGL
&
workarounds
GLenum
internalFormat
GLenum
format
GLenum
type
)
;
struct
TexSubImageFormat
{
GLenum
format
;
GLenum
type
;
}
;
TexSubImageFormat
GetTexSubImageFormat
(
const
FunctionsGL
*
functions
const
WorkaroundsGL
&
workarounds
GLenum
format
GLenum
type
)
;
struct
CompressedTexImageFormat
{
GLenum
internalFormat
;
}
;
CompressedTexImageFormat
GetCompressedTexImageFormat
(
const
FunctionsGL
*
functions
const
WorkaroundsGL
&
workarounds
GLenum
internalFormat
)
;
struct
CompressedTexSubImageFormat
{
GLenum
format
;
}
;
CompressedTexSubImageFormat
GetCompressedSubTexImageFormat
(
const
FunctionsGL
*
functions
const
WorkaroundsGL
&
workarounds
GLenum
format
)
;
struct
CopyTexImageImageFormat
{
GLenum
internalFormat
;
}
;
CopyTexImageImageFormat
GetCopyTexImageImageFormat
(
const
FunctionsGL
*
functions
const
WorkaroundsGL
&
workarounds
GLenum
internalFormat
GLenum
framebufferType
)
;
struct
TexStorageFormat
{
GLenum
internalFormat
;
}
;
TexStorageFormat
GetTexStorageFormat
(
const
FunctionsGL
*
functions
const
WorkaroundsGL
&
workarounds
GLenum
internalFormat
)
;
struct
RenderbufferFormat
{
GLenum
internalFormat
;
}
;
RenderbufferFormat
GetRenderbufferFormat
(
const
FunctionsGL
*
functions
const
WorkaroundsGL
&
workarounds
GLenum
internalFormat
)
;
struct
ReadPixelsFormat
{
GLenum
format
;
GLenum
type
;
}
;
ReadPixelsFormat
GetReadPixelsFormat
(
const
FunctionsGL
*
functions
const
WorkaroundsGL
&
workarounds
GLenum
format
GLenum
type
)
;
}
}
#
endif
