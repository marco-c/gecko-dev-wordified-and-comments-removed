#
include
"
libANGLE
/
renderer
/
gl
/
egl
/
FunctionsEGLDL
.
h
"
#
include
<
dlfcn
.
h
>
namespace
rx
{
DynamicLib
:
:
DynamicLib
(
)
:
handle
(
nullptr
)
{
}
DynamicLib
:
:
~
DynamicLib
(
)
{
if
(
handle
)
{
dlclose
(
handle
)
;
handle
=
nullptr
;
}
}
DynamicLib
FunctionsEGLDL
:
:
sNativeLib
;
FunctionsEGLDL
:
:
FunctionsEGLDL
(
)
:
mGetProcAddressPtr
(
nullptr
)
{
}
FunctionsEGLDL
:
:
~
FunctionsEGLDL
(
)
{
}
egl
:
:
Error
FunctionsEGLDL
:
:
initialize
(
EGLNativeDisplayType
nativeDisplay
const
char
*
libName
)
{
if
(
!
sNativeLib
.
handle
)
{
sNativeLib
.
handle
=
dlopen
(
libName
RTLD_NOW
)
;
if
(
!
sNativeLib
.
handle
)
{
return
egl
:
:
EglNotInitialized
(
)
<
<
"
Could
not
dlopen
native
EGL
:
"
<
<
dlerror
(
)
;
}
}
mGetProcAddressPtr
=
reinterpret_cast
<
PFNEGLGETPROCADDRESSPROC
>
(
dlsym
(
sNativeLib
.
handle
"
eglGetProcAddress
"
)
)
;
if
(
!
mGetProcAddressPtr
)
{
return
egl
:
:
EglNotInitialized
(
)
<
<
"
Could
not
find
eglGetProcAddress
"
;
}
return
FunctionsEGL
:
:
initialize
(
nativeDisplay
)
;
}
void
*
FunctionsEGLDL
:
:
getProcAddress
(
const
char
*
name
)
const
{
void
*
f
=
reinterpret_cast
<
void
*
>
(
mGetProcAddressPtr
(
name
)
)
;
if
(
f
)
{
return
f
;
}
return
dlsym
(
sNativeLib
.
handle
name
)
;
}
}
