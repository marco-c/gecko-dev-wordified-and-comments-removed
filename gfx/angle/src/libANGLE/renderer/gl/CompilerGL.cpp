#
include
"
libANGLE
/
renderer
/
gl
/
CompilerGL
.
h
"
#
include
"
libANGLE
/
renderer
/
gl
/
FunctionsGL
.
h
"
namespace
rx
{
namespace
{
ShShaderOutput
GetShaderOutputType
(
const
FunctionsGL
*
functions
)
{
ASSERT
(
functions
)
;
if
(
functions
-
>
standard
=
=
STANDARD_GL_DESKTOP
)
{
if
(
functions
-
>
isAtLeastGL
(
gl
:
:
Version
(
4
5
)
)
)
{
return
SH_GLSL_450_CORE_OUTPUT
;
}
else
if
(
functions
-
>
isAtLeastGL
(
gl
:
:
Version
(
4
4
)
)
)
{
return
SH_GLSL_440_CORE_OUTPUT
;
}
else
if
(
functions
-
>
isAtLeastGL
(
gl
:
:
Version
(
4
3
)
)
)
{
return
SH_GLSL_430_CORE_OUTPUT
;
}
else
if
(
functions
-
>
isAtLeastGL
(
gl
:
:
Version
(
4
2
)
)
)
{
return
SH_GLSL_420_CORE_OUTPUT
;
}
else
if
(
functions
-
>
isAtLeastGL
(
gl
:
:
Version
(
4
1
)
)
)
{
return
SH_GLSL_410_CORE_OUTPUT
;
}
else
if
(
functions
-
>
isAtLeastGL
(
gl
:
:
Version
(
4
0
)
)
)
{
return
SH_GLSL_400_CORE_OUTPUT
;
}
else
if
(
functions
-
>
isAtLeastGL
(
gl
:
:
Version
(
3
3
)
)
)
{
return
SH_GLSL_330_CORE_OUTPUT
;
}
else
if
(
functions
-
>
isAtLeastGL
(
gl
:
:
Version
(
3
2
)
)
)
{
return
SH_GLSL_150_CORE_OUTPUT
;
}
else
if
(
functions
-
>
isAtLeastGL
(
gl
:
:
Version
(
3
1
)
)
)
{
return
SH_GLSL_140_OUTPUT
;
}
else
if
(
functions
-
>
isAtLeastGL
(
gl
:
:
Version
(
3
0
)
)
)
{
return
SH_GLSL_130_OUTPUT
;
}
else
{
return
SH_GLSL_COMPATIBILITY_OUTPUT
;
}
}
else
if
(
functions
-
>
standard
=
=
STANDARD_GL_ES
)
{
return
SH_ESSL_OUTPUT
;
}
else
{
UNREACHABLE
(
)
;
return
ShShaderOutput
(
0
)
;
}
}
}
CompilerGL
:
:
CompilerGL
(
const
FunctionsGL
*
functions
)
:
mTranslatorOutputType
(
GetShaderOutputType
(
functions
)
)
{
}
}
