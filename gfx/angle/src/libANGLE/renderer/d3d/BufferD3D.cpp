#
include
"
libANGLE
/
renderer
/
d3d
/
BufferD3D
.
h
"
#
include
"
common
/
mathutil
.
h
"
#
include
"
common
/
utilities
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
IndexBuffer
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
VertexBuffer
.
h
"
namespace
rx
{
unsigned
int
BufferD3D
:
:
mNextSerial
=
1
;
BufferD3D
:
:
BufferD3D
(
BufferFactoryD3D
*
factory
)
:
BufferImpl
(
)
mFactory
(
factory
)
mStaticVertexBuffer
(
nullptr
)
mStaticIndexBuffer
(
nullptr
)
mStaticBufferCache
(
nullptr
)
mStaticBufferCacheTotalSize
(
0
)
mStaticVertexBufferOutOfDate
(
false
)
mUnmodifiedDataUse
(
0
)
mUsage
(
D3D_BUFFER_USAGE_STATIC
)
{
updateSerial
(
)
;
}
BufferD3D
:
:
~
BufferD3D
(
)
{
SafeDelete
(
mStaticVertexBuffer
)
;
SafeDelete
(
mStaticIndexBuffer
)
;
emptyStaticBufferCache
(
)
;
}
void
BufferD3D
:
:
emptyStaticBufferCache
(
)
{
if
(
mStaticBufferCache
!
=
nullptr
)
{
SafeDeleteContainer
(
*
mStaticBufferCache
)
;
SafeDelete
(
mStaticBufferCache
)
;
}
mStaticBufferCacheTotalSize
=
0
;
}
void
BufferD3D
:
:
updateSerial
(
)
{
mSerial
=
mNextSerial
+
+
;
}
void
BufferD3D
:
:
updateD3DBufferUsage
(
GLenum
usage
)
{
switch
(
usage
)
{
case
GL_STATIC_DRAW
:
case
GL_STATIC_READ
:
case
GL_STATIC_COPY
:
mUsage
=
D3D_BUFFER_USAGE_STATIC
;
initializeStaticData
(
)
;
break
;
case
GL_STREAM_DRAW
:
case
GL_STREAM_READ
:
case
GL_STREAM_COPY
:
case
GL_DYNAMIC_READ
:
case
GL_DYNAMIC_COPY
:
case
GL_DYNAMIC_DRAW
:
mUsage
=
D3D_BUFFER_USAGE_DYNAMIC
;
break
;
default
:
UNREACHABLE
(
)
;
}
}
void
BufferD3D
:
:
initializeStaticData
(
)
{
if
(
!
mStaticVertexBuffer
)
{
mStaticVertexBuffer
=
new
StaticVertexBufferInterface
(
mFactory
)
;
}
if
(
!
mStaticIndexBuffer
)
{
mStaticIndexBuffer
=
new
StaticIndexBufferInterface
(
mFactory
)
;
}
}
StaticIndexBufferInterface
*
BufferD3D
:
:
getStaticIndexBuffer
(
)
{
return
mStaticIndexBuffer
;
}
StaticVertexBufferInterface
*
BufferD3D
:
:
getStaticVertexBuffer
(
const
gl
:
:
VertexAttribute
&
attribute
D3DStaticBufferCreationType
creationType
)
{
if
(
!
mStaticVertexBuffer
)
{
ASSERT
(
mStaticBufferCache
=
=
nullptr
)
;
return
nullptr
;
}
if
(
mStaticBufferCache
=
=
nullptr
&
&
!
mStaticVertexBuffer
-
>
isCommitted
(
)
)
{
return
mStaticVertexBuffer
;
}
if
(
mStaticVertexBuffer
-
>
lookupAttribute
(
attribute
nullptr
)
)
{
return
mStaticVertexBuffer
;
}
if
(
mStaticBufferCache
!
=
nullptr
)
{
for
(
StaticVertexBufferInterface
*
staticBuffer
:
*
mStaticBufferCache
)
{
if
(
staticBuffer
-
>
lookupAttribute
(
attribute
nullptr
)
)
{
return
staticBuffer
;
}
}
}
if
(
!
mStaticVertexBuffer
-
>
isCommitted
(
)
)
{
return
mStaticVertexBuffer
;
}
if
(
creationType
!
=
D3D_BUFFER_CREATE_IF_NECESSARY
)
{
return
nullptr
;
}
ASSERT
(
mStaticVertexBuffer
)
;
ASSERT
(
mStaticVertexBuffer
-
>
isCommitted
(
)
)
;
unsigned
int
staticVertexBufferSize
=
mStaticVertexBuffer
-
>
getBufferSize
(
)
;
if
(
IsUnsignedAdditionSafe
(
staticVertexBufferSize
mStaticBufferCacheTotalSize
)
)
{
unsigned
int
maxStaticCacheSize
=
IsUnsignedMultiplicationSafe
(
static_cast
<
unsigned
int
>
(
getSize
(
)
)
4u
)
?
4u
*
static_cast
<
unsigned
int
>
(
getSize
(
)
)
:
std
:
:
numeric_limits
<
unsigned
int
>
:
:
max
(
)
;
if
(
staticVertexBufferSize
+
mStaticBufferCacheTotalSize
<
=
maxStaticCacheSize
)
{
if
(
mStaticBufferCache
=
=
nullptr
)
{
mStaticBufferCache
=
new
std
:
:
vector
<
StaticVertexBufferInterface
*
>
(
)
;
}
mStaticBufferCacheTotalSize
+
=
staticVertexBufferSize
;
(
*
mStaticBufferCache
)
.
push_back
(
mStaticVertexBuffer
)
;
mStaticVertexBuffer
=
nullptr
;
initializeStaticData
(
)
;
return
mStaticVertexBuffer
;
}
}
mStaticVertexBufferOutOfDate
=
true
;
return
nullptr
;
}
void
BufferD3D
:
:
reinitOutOfDateStaticData
(
)
{
if
(
mStaticVertexBufferOutOfDate
)
{
invalidateStaticData
(
D3D_BUFFER_INVALIDATE_DEFAULT_BUFFER_ONLY
)
;
mStaticVertexBufferOutOfDate
=
false
;
}
}
void
BufferD3D
:
:
invalidateStaticData
(
D3DBufferInvalidationType
invalidationType
)
{
if
(
invalidationType
=
=
D3D_BUFFER_INVALIDATE_WHOLE_CACHE
&
&
mStaticBufferCache
!
=
nullptr
)
{
emptyStaticBufferCache
(
)
;
}
if
(
(
mStaticVertexBuffer
&
&
mStaticVertexBuffer
-
>
getBufferSize
(
)
!
=
0
)
|
|
(
mStaticIndexBuffer
&
&
mStaticIndexBuffer
-
>
getBufferSize
(
)
!
=
0
)
)
{
SafeDelete
(
mStaticVertexBuffer
)
;
SafeDelete
(
mStaticIndexBuffer
)
;
if
(
mUsage
=
=
D3D_BUFFER_USAGE_STATIC
)
{
initializeStaticData
(
)
;
}
}
mUnmodifiedDataUse
=
0
;
}
void
BufferD3D
:
:
promoteStaticUsage
(
int
dataSize
)
{
if
(
!
mStaticVertexBuffer
&
&
!
mStaticIndexBuffer
)
{
ASSERT
(
mStaticBufferCache
=
=
nullptr
)
;
mUnmodifiedDataUse
+
=
dataSize
;
if
(
mUnmodifiedDataUse
>
3
*
getSize
(
)
)
{
initializeStaticData
(
)
;
}
}
}
gl
:
:
Error
BufferD3D
:
:
getIndexRange
(
GLenum
type
size_t
offset
size_t
count
bool
primitiveRestartEnabled
gl
:
:
IndexRange
*
outRange
)
{
const
uint8_t
*
data
=
nullptr
;
gl
:
:
Error
error
=
getData
(
&
data
)
;
if
(
error
.
isError
(
)
)
{
return
error
;
}
*
outRange
=
gl
:
:
ComputeIndexRange
(
type
data
+
offset
count
primitiveRestartEnabled
)
;
return
gl
:
:
Error
(
GL_NO_ERROR
)
;
}
}
