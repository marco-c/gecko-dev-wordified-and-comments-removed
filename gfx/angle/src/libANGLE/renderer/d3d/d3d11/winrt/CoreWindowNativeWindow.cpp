#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
winrt
/
CoreWindowNativeWindow
.
h
"
#
include
<
windows
.
graphics
.
display
.
h
>
using
namespace
ABI
:
:
Windows
:
:
Foundation
:
:
Collections
;
namespace
rx
{
CoreWindowNativeWindow
:
:
~
CoreWindowNativeWindow
(
)
{
unregisterForSizeChangeEvents
(
)
;
}
bool
CoreWindowNativeWindow
:
:
initialize
(
EGLNativeWindowType
window
IPropertySet
*
propertySet
)
{
ComPtr
<
IPropertySet
>
props
=
propertySet
;
ComPtr
<
IInspectable
>
win
=
window
;
SIZE
swapChainSize
=
{
}
;
HRESULT
result
=
S_OK
;
if
(
propertySet
)
{
result
=
props
.
As
(
&
mPropertyMap
)
;
if
(
FAILED
(
result
)
)
{
return
false
;
}
result
=
GetOptionalSizePropertyValue
(
mPropertyMap
EGLRenderSurfaceSizeProperty
&
swapChainSize
&
mSwapChainSizeSpecified
)
;
if
(
FAILED
(
result
)
)
{
return
false
;
}
result
=
GetOptionalSinglePropertyValue
(
mPropertyMap
EGLRenderResolutionScaleProperty
&
mSwapChainScale
&
mSwapChainScaleSpecified
)
;
if
(
FAILED
(
result
)
)
{
return
false
;
}
if
(
!
mSwapChainScaleSpecified
)
{
mSwapChainScale
=
1
.
0f
;
}
if
(
mSwapChainScaleSpecified
&
&
mSwapChainSizeSpecified
)
{
ERR
(
"
It
is
invalid
to
specify
both
an
EGLRenderSurfaceSizeProperty
and
a
EGLRenderResolutionScaleProperty
.
"
)
;
return
false
;
}
}
if
(
SUCCEEDED
(
result
)
)
{
result
=
win
.
As
(
&
mCoreWindow
)
;
}
if
(
SUCCEEDED
(
result
)
)
{
if
(
mSwapChainSizeSpecified
)
{
mClientRect
=
{
0
0
swapChainSize
.
cx
swapChainSize
.
cy
}
;
}
else
{
SIZE
coreWindowSize
;
result
=
GetCoreWindowSizeInPixels
(
mCoreWindow
&
coreWindowSize
)
;
if
(
SUCCEEDED
(
result
)
)
{
mClientRect
=
{
0
0
static_cast
<
long
>
(
coreWindowSize
.
cx
*
mSwapChainScale
)
static_cast
<
long
>
(
coreWindowSize
.
cy
*
mSwapChainScale
)
}
;
}
}
}
if
(
SUCCEEDED
(
result
)
)
{
mNewClientRect
=
mClientRect
;
mClientRectChanged
=
false
;
return
registerForSizeChangeEvents
(
)
;
}
return
false
;
}
bool
CoreWindowNativeWindow
:
:
registerForSizeChangeEvents
(
)
{
ComPtr
<
IWindowSizeChangedEventHandler
>
sizeChangedHandler
;
HRESULT
result
=
Microsoft
:
:
WRL
:
:
MakeAndInitialize
<
CoreWindowSizeChangedHandler
>
(
sizeChangedHandler
.
ReleaseAndGetAddressOf
(
)
this
-
>
shared_from_this
(
)
)
;
if
(
SUCCEEDED
(
result
)
)
{
result
=
mCoreWindow
-
>
add_SizeChanged
(
sizeChangedHandler
.
Get
(
)
&
mSizeChangedEventToken
)
;
}
if
(
SUCCEEDED
(
result
)
)
{
return
true
;
}
return
false
;
}
void
CoreWindowNativeWindow
:
:
unregisterForSizeChangeEvents
(
)
{
if
(
mCoreWindow
)
{
(
void
)
mCoreWindow
-
>
remove_SizeChanged
(
mSizeChangedEventToken
)
;
}
mSizeChangedEventToken
.
value
=
0
;
}
HRESULT
CoreWindowNativeWindow
:
:
createSwapChain
(
ID3D11Device
*
device
DXGIFactory
*
factory
DXGI_FORMAT
format
unsigned
int
width
unsigned
int
height
bool
containsAlpha
DXGISwapChain
*
*
swapChain
)
{
if
(
device
=
=
NULL
|
|
factory
=
=
NULL
|
|
swapChain
=
=
NULL
|
|
width
=
=
0
|
|
height
=
=
0
)
{
return
E_INVALIDARG
;
}
DXGI_SWAP_CHAIN_DESC1
swapChainDesc
=
{
0
}
;
swapChainDesc
.
Width
=
width
;
swapChainDesc
.
Height
=
height
;
swapChainDesc
.
Format
=
format
;
swapChainDesc
.
Stereo
=
FALSE
;
swapChainDesc
.
SampleDesc
.
Count
=
1
;
swapChainDesc
.
SampleDesc
.
Quality
=
0
;
swapChainDesc
.
BufferUsage
=
DXGI_USAGE_RENDER_TARGET_OUTPUT
|
DXGI_USAGE_BACK_BUFFER
;
swapChainDesc
.
BufferCount
=
2
;
swapChainDesc
.
SwapEffect
=
DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL
;
swapChainDesc
.
Scaling
=
DXGI_SCALING_STRETCH
;
swapChainDesc
.
AlphaMode
=
DXGI_ALPHA_MODE_UNSPECIFIED
;
*
swapChain
=
nullptr
;
ComPtr
<
IDXGISwapChain1
>
newSwapChain
;
HRESULT
result
=
factory
-
>
CreateSwapChainForCoreWindow
(
device
mCoreWindow
.
Get
(
)
&
swapChainDesc
nullptr
newSwapChain
.
ReleaseAndGetAddressOf
(
)
)
;
if
(
SUCCEEDED
(
result
)
)
{
#
if
(
WINAPI_FAMILY
=
=
WINAPI_FAMILY_PHONE_APP
)
if
(
newSwapChain
-
>
ResizeBuffers
(
swapChainDesc
.
BufferCount
swapChainDesc
.
Width
swapChainDesc
.
Height
swapChainDesc
.
Format
DXGI_SWAP_CHAIN_FLAG_NONPREROTATED
|
DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE
)
=
=
DXGI_ERROR_UNSUPPORTED
)
{
mSupportsSwapChainResize
=
false
;
}
#
endif
result
=
newSwapChain
.
CopyTo
(
swapChain
)
;
}
if
(
SUCCEEDED
(
result
)
)
{
if
(
mSupportsSwapChainResize
=
=
false
)
{
unregisterForSizeChangeEvents
(
)
;
}
}
return
result
;
}
inline
HRESULT
CoreWindowNativeWindow
:
:
scaleSwapChain
(
const
SIZE
&
windowSize
const
RECT
&
clientRect
)
{
return
S_OK
;
}
HRESULT
GetCoreWindowSizeInPixels
(
const
ComPtr
<
ABI
:
:
Windows
:
:
UI
:
:
Core
:
:
ICoreWindow
>
&
coreWindow
SIZE
*
windowSize
)
{
ABI
:
:
Windows
:
:
Foundation
:
:
Rect
bounds
;
HRESULT
result
=
coreWindow
-
>
get_Bounds
(
&
bounds
)
;
if
(
SUCCEEDED
(
result
)
)
{
*
windowSize
=
{
ConvertDipsToPixels
(
bounds
.
Width
)
ConvertDipsToPixels
(
bounds
.
Height
)
}
;
}
return
result
;
}
static
float
GetLogicalDpi
(
)
{
ComPtr
<
ABI
:
:
Windows
:
:
Graphics
:
:
Display
:
:
IDisplayPropertiesStatics
>
displayProperties
;
if
(
SUCCEEDED
(
GetActivationFactory
(
HStringReference
(
RuntimeClass_Windows_Graphics_Display_DisplayProperties
)
.
Get
(
)
displayProperties
.
GetAddressOf
(
)
)
)
)
{
float
dpi
=
96
.
0f
;
if
(
SUCCEEDED
(
displayProperties
-
>
get_LogicalDpi
(
&
dpi
)
)
)
{
return
dpi
;
}
}
return
96
.
0f
;
}
long
ConvertDipsToPixels
(
float
dips
)
{
static
const
float
dipsPerInch
=
96
.
0f
;
return
lround
(
(
dips
*
GetLogicalDpi
(
)
/
dipsPerInch
)
)
;
}
}
