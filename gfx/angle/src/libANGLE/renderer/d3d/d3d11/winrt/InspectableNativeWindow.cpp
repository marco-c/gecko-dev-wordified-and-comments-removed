#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
winrt
/
CoreWindowNativeWindow
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
winrt
/
SwapChainPanelNativeWindow
.
h
"
namespace
rx
{
bool
IsCoreWindow
(
EGLNativeWindowType
window
ComPtr
<
ABI
:
:
Windows
:
:
UI
:
:
Core
:
:
ICoreWindow
>
*
coreWindow
)
{
if
(
!
window
)
{
return
false
;
}
ComPtr
<
IInspectable
>
win
=
window
;
ComPtr
<
ABI
:
:
Windows
:
:
UI
:
:
Core
:
:
ICoreWindow
>
coreWin
;
if
(
SUCCEEDED
(
win
.
As
(
&
coreWin
)
)
)
{
if
(
coreWindow
!
=
nullptr
)
{
*
coreWindow
=
coreWin
.
Detach
(
)
;
}
return
true
;
}
return
false
;
}
bool
IsSwapChainPanel
(
EGLNativeWindowType
window
ComPtr
<
ABI
:
:
Windows
:
:
UI
:
:
Xaml
:
:
Controls
:
:
ISwapChainPanel
>
*
swapChainPanel
)
{
if
(
!
window
)
{
return
false
;
}
ComPtr
<
IInspectable
>
win
=
window
;
ComPtr
<
ABI
:
:
Windows
:
:
UI
:
:
Xaml
:
:
Controls
:
:
ISwapChainPanel
>
panel
;
if
(
SUCCEEDED
(
win
.
As
(
&
panel
)
)
)
{
if
(
swapChainPanel
!
=
nullptr
)
{
*
swapChainPanel
=
panel
.
Detach
(
)
;
}
return
true
;
}
return
false
;
}
bool
IsEGLConfiguredPropertySet
(
EGLNativeWindowType
window
ABI
:
:
Windows
:
:
Foundation
:
:
Collections
:
:
IPropertySet
*
*
propertySet
IInspectable
*
*
eglNativeWindow
)
{
if
(
!
window
)
{
return
false
;
}
ComPtr
<
IInspectable
>
props
=
window
;
ComPtr
<
IPropertySet
>
propSet
;
ComPtr
<
IInspectable
>
nativeWindow
;
ComPtr
<
ABI
:
:
Windows
:
:
Foundation
:
:
Collections
:
:
IMap
<
HSTRING
IInspectable
*
>
>
propMap
;
boolean
hasEglNativeWindowPropertyKey
=
false
;
HRESULT
result
=
props
.
As
(
&
propSet
)
;
if
(
SUCCEEDED
(
result
)
)
{
result
=
propSet
.
As
(
&
propMap
)
;
}
if
(
SUCCEEDED
(
result
)
)
{
result
=
propMap
-
>
HasKey
(
HStringReference
(
EGLNativeWindowTypeProperty
)
.
Get
(
)
&
hasEglNativeWindowPropertyKey
)
;
}
if
(
SUCCEEDED
(
result
)
&
&
!
hasEglNativeWindowPropertyKey
)
{
ERR
(
"
Could
not
find
EGLNativeWindowTypeProperty
in
IPropertySet
.
Valid
EGLNativeWindowTypeProperty
values
include
ICoreWindow
"
)
;
return
false
;
}
if
(
SUCCEEDED
(
result
)
&
&
hasEglNativeWindowPropertyKey
)
{
result
=
propMap
-
>
Lookup
(
HStringReference
(
EGLNativeWindowTypeProperty
)
.
Get
(
)
&
nativeWindow
)
;
}
if
(
SUCCEEDED
(
result
)
)
{
if
(
propertySet
!
=
nullptr
)
{
result
=
propSet
.
CopyTo
(
propertySet
)
;
}
}
if
(
SUCCEEDED
(
result
)
)
{
if
(
eglNativeWindow
!
=
nullptr
)
{
result
=
nativeWindow
.
CopyTo
(
eglNativeWindow
)
;
}
}
if
(
SUCCEEDED
(
result
)
)
{
return
true
;
}
return
false
;
}
HRESULT
GetOptionalPropertyValue
(
const
ComPtr
<
ABI
:
:
Windows
:
:
Foundation
:
:
Collections
:
:
IMap
<
HSTRING
IInspectable
*
>
>
&
propertyMap
const
wchar_t
*
propertyName
boolean
*
hasKey
ComPtr
<
ABI
:
:
Windows
:
:
Foundation
:
:
IPropertyValue
>
&
propertyValue
)
{
if
(
!
propertyMap
|
|
!
hasKey
)
{
return
E_INVALIDARG
;
}
*
hasKey
=
false
;
HRESULT
result
=
propertyMap
-
>
HasKey
(
HStringReference
(
propertyName
)
.
Get
(
)
hasKey
)
;
if
(
SUCCEEDED
(
result
)
&
&
!
(
*
hasKey
)
)
{
return
S_OK
;
}
if
(
SUCCEEDED
(
result
)
)
{
result
=
propertyMap
-
>
Lookup
(
HStringReference
(
propertyName
)
.
Get
(
)
&
propertyValue
)
;
}
return
result
;
}
HRESULT
GetOptionalSizePropertyValue
(
const
ComPtr
<
ABI
:
:
Windows
:
:
Foundation
:
:
Collections
:
:
IMap
<
HSTRING
IInspectable
*
>
>
&
propertyMap
const
wchar_t
*
propertyName
SIZE
*
value
bool
*
valueExists
)
{
ComPtr
<
ABI
:
:
Windows
:
:
Foundation
:
:
IPropertyValue
>
propertyValue
;
ABI
:
:
Windows
:
:
Foundation
:
:
PropertyType
propertyType
=
ABI
:
:
Windows
:
:
Foundation
:
:
PropertyType
:
:
PropertyType_Empty
;
Size
sizeValue
=
{
0
0
}
;
boolean
hasKey
=
false
;
if
(
!
propertyMap
|
|
!
value
|
|
!
valueExists
)
{
return
E_INVALIDARG
;
}
*
valueExists
=
false
;
*
value
=
{
0
0
}
;
HRESULT
result
=
GetOptionalPropertyValue
(
propertyMap
propertyName
&
hasKey
propertyValue
)
;
if
(
SUCCEEDED
(
result
)
&
&
hasKey
)
{
result
=
propertyValue
-
>
get_Type
(
&
propertyType
)
;
if
(
SUCCEEDED
(
result
)
&
&
propertyType
=
=
ABI
:
:
Windows
:
:
Foundation
:
:
PropertyType
:
:
PropertyType_Size
)
{
if
(
SUCCEEDED
(
propertyValue
-
>
GetSize
(
&
sizeValue
)
)
&
&
(
sizeValue
.
Width
>
0
&
&
sizeValue
.
Height
>
0
)
)
{
*
value
=
{
static_cast
<
long
>
(
sizeValue
.
Width
)
static_cast
<
long
>
(
sizeValue
.
Height
)
}
;
*
valueExists
=
true
;
result
=
S_OK
;
}
else
{
result
=
E_INVALIDARG
;
}
}
else
{
result
=
E_INVALIDARG
;
}
}
return
result
;
}
HRESULT
GetOptionalSinglePropertyValue
(
const
ComPtr
<
ABI
:
:
Windows
:
:
Foundation
:
:
Collections
:
:
IMap
<
HSTRING
IInspectable
*
>
>
&
propertyMap
const
wchar_t
*
propertyName
float
*
value
bool
*
valueExists
)
{
ComPtr
<
ABI
:
:
Windows
:
:
Foundation
:
:
IPropertyValue
>
propertyValue
;
ABI
:
:
Windows
:
:
Foundation
:
:
PropertyType
propertyType
=
ABI
:
:
Windows
:
:
Foundation
:
:
PropertyType
:
:
PropertyType_Empty
;
float
scaleValue
=
0
.
0f
;
boolean
hasKey
=
false
;
if
(
!
propertyMap
|
|
!
value
|
|
!
valueExists
)
{
return
E_INVALIDARG
;
}
*
valueExists
=
false
;
*
value
=
0
.
0f
;
HRESULT
result
=
GetOptionalPropertyValue
(
propertyMap
propertyName
&
hasKey
propertyValue
)
;
if
(
SUCCEEDED
(
result
)
&
&
hasKey
)
{
result
=
propertyValue
-
>
get_Type
(
&
propertyType
)
;
if
(
SUCCEEDED
(
result
)
&
&
propertyType
=
=
ABI
:
:
Windows
:
:
Foundation
:
:
PropertyType
:
:
PropertyType_Single
)
{
if
(
SUCCEEDED
(
propertyValue
-
>
GetSingle
(
&
scaleValue
)
)
&
&
(
scaleValue
>
0
.
0f
)
)
{
*
value
=
scaleValue
;
*
valueExists
=
true
;
result
=
S_OK
;
}
else
{
result
=
E_INVALIDARG
;
}
}
else
{
result
=
E_INVALIDARG
;
}
}
return
result
;
}
RECT
InspectableNativeWindow
:
:
clientRect
(
const
Size
&
size
)
{
return
{
0
0
lround
(
size
.
Width
*
mSwapChainScale
)
lround
(
size
.
Height
*
mSwapChainScale
)
}
;
}
}
