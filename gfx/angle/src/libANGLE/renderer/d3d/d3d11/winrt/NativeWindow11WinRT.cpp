#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
winrt
/
NativeWindow11WinRT
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
renderer11_utils
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
winrt
/
CoreWindowNativeWindow
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
winrt
/
InspectableNativeWindow
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
d3d11
/
winrt
/
SwapChainPanelNativeWindow
.
h
"
using
namespace
Microsoft
:
:
WRL
;
using
namespace
Microsoft
:
:
WRL
:
:
Wrappers
;
namespace
rx
{
NativeWindow11WinRT
:
:
NativeWindow11WinRT
(
EGLNativeWindowType
window
bool
hasAlpha
)
:
NativeWindow11
(
window
)
mHasAlpha
(
hasAlpha
)
{
}
bool
NativeWindow11WinRT
:
:
initialize
(
)
{
EGLNativeWindowType
window
=
getNativeWindow
(
)
;
ComPtr
<
ABI
:
:
Windows
:
:
Foundation
:
:
Collections
:
:
IPropertySet
>
propertySet
;
ComPtr
<
IInspectable
>
eglNativeWindow
;
if
(
IsEGLConfiguredPropertySet
(
window
&
propertySet
&
eglNativeWindow
)
)
{
window
=
eglNativeWindow
.
Get
(
)
;
}
ComPtr
<
ABI
:
:
Windows
:
:
UI
:
:
Core
:
:
ICoreWindow
>
coreWindow
;
ComPtr
<
ABI
:
:
Windows
:
:
UI
:
:
Xaml
:
:
Controls
:
:
ISwapChainPanel
>
swapChainPanel
;
if
(
IsCoreWindow
(
window
&
coreWindow
)
)
{
mImpl
=
std
:
:
make_shared
<
CoreWindowNativeWindow
>
(
)
;
if
(
mImpl
)
{
return
mImpl
-
>
initialize
(
window
propertySet
.
Get
(
)
)
;
}
}
else
if
(
IsSwapChainPanel
(
window
&
swapChainPanel
)
)
{
mImpl
=
std
:
:
make_shared
<
SwapChainPanelNativeWindow
>
(
)
;
if
(
mImpl
)
{
return
mImpl
-
>
initialize
(
window
propertySet
.
Get
(
)
)
;
}
}
else
{
ERR
(
"
Invalid
IInspectable
EGLNativeWindowType
detected
.
Valid
IInspectables
include
"
"
ICoreWindow
ISwapChainPanel
and
IPropertySet
"
)
;
}
return
false
;
}
bool
NativeWindow11WinRT
:
:
getClientRect
(
LPRECT
rect
)
const
{
if
(
mImpl
)
{
return
mImpl
-
>
getClientRect
(
rect
)
;
}
return
false
;
}
bool
NativeWindow11WinRT
:
:
isIconic
(
)
const
{
return
false
;
}
HRESULT
NativeWindow11WinRT
:
:
createSwapChain
(
ID3D11Device
*
device
IDXGIFactory
*
factory
DXGI_FORMAT
format
UINT
width
UINT
height
IDXGISwapChain
*
*
swapChain
)
{
if
(
mImpl
)
{
IDXGIFactory2
*
factory2
=
d3d11
:
:
DynamicCastComObject
<
IDXGIFactory2
>
(
factory
)
;
IDXGISwapChain1
*
swapChain1
=
nullptr
;
HRESULT
result
=
mImpl
-
>
createSwapChain
(
device
factory2
format
width
height
mHasAlpha
&
swapChain1
)
;
SafeRelease
(
factory2
)
;
*
swapChain
=
static_cast
<
IDXGISwapChain
*
>
(
swapChain1
)
;
return
result
;
}
return
E_UNEXPECTED
;
}
void
NativeWindow11WinRT
:
:
commitChange
(
)
{
}
bool
NativeWindow11WinRT
:
:
IsValidNativeWindow
(
EGLNativeWindowType
window
)
{
return
IsCoreWindow
(
window
)
|
|
IsSwapChainPanel
(
window
)
|
|
IsEGLConfiguredPropertySet
(
window
)
;
}
}
