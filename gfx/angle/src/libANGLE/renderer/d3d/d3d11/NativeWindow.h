#
ifndef
LIBANGLE_RENDERER_D3D_D3D11_NATIVEWINDOW_H_
#
define
LIBANGLE_RENDERER_D3D_D3D11_NATIVEWINDOW_H_
#
include
"
common
/
debug
.
h
"
#
include
"
common
/
platform
.
h
"
#
include
<
EGL
/
eglplatform
.
h
>
#
include
"
libANGLE
/
Config
.
h
"
#
if
defined
(
ANGLE_ENABLE_WINDOWS_STORE
)
typedef
IDXGISwapChain1
DXGISwapChain
;
typedef
IDXGIFactory2
DXGIFactory
;
#
include
<
wrl
.
h
>
#
include
<
wrl
/
wrappers
/
corewrappers
.
h
>
#
include
<
windows
.
applicationmodel
.
core
.
h
>
#
include
<
memory
>
namespace
rx
{
class
InspectableNativeWindow
;
}
using
namespace
Microsoft
:
:
WRL
;
using
namespace
Microsoft
:
:
WRL
:
:
Wrappers
;
#
else
#
ifdef
ANGLE_ENABLE_D3D11
typedef
IDXGISwapChain
DXGISwapChain
;
typedef
IDXGIFactory
DXGIFactory
;
#
endif
#
endif
typedef
interface
IDCompositionDevice
IDCompositionDevice
;
typedef
interface
IDCompositionTarget
IDCompositionTarget
;
typedef
interface
IDCompositionVisual
IDCompositionVisual
;
namespace
rx
{
class
NativeWindow
{
public
:
explicit
NativeWindow
(
EGLNativeWindowType
window
const
egl
:
:
Config
*
config
bool
directComposition
)
;
~
NativeWindow
(
)
;
bool
initialize
(
)
;
bool
getClientRect
(
LPRECT
rect
)
;
bool
isIconic
(
)
;
static
bool
isValidNativeWindow
(
EGLNativeWindowType
window
)
;
#
ifdef
ANGLE_ENABLE_D3D11
HRESULT
createSwapChain
(
ID3D11Device
*
device
DXGIFactory
*
factory
DXGI_FORMAT
format
UINT
width
UINT
height
DXGISwapChain
*
*
swapChain
)
;
#
endif
inline
EGLNativeWindowType
getNativeWindow
(
)
const
{
return
mWindow
;
}
void
commitChange
(
)
;
private
:
EGLNativeWindowType
mWindow
;
bool
mDirectComposition
;
#
ifdef
HAS_DIRECT_COMPOSITION
IDCompositionDevice
*
mDevice
;
IDCompositionTarget
*
mCompositionTarget
;
IDCompositionVisual
*
mVisual
;
#
endif
const
egl
:
:
Config
*
mConfig
;
#
if
defined
(
ANGLE_ENABLE_WINDOWS_STORE
)
std
:
:
shared_ptr
<
InspectableNativeWindow
>
mImpl
;
#
endif
}
;
}
#
endif
