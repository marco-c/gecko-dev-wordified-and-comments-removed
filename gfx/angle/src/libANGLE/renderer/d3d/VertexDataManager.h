#
ifndef
LIBANGLE_RENDERER_D3D_VERTEXDATAMANAGER_H_
#
define
LIBANGLE_RENDERER_D3D_VERTEXDATAMANAGER_H_
#
include
"
common
/
angleutils
.
h
"
#
include
"
libANGLE
/
angletypes
.
h
"
#
include
"
libANGLE
/
Constants
.
h
"
#
include
"
libANGLE
/
VertexAttribute
.
h
"
namespace
gl
{
class
State
;
struct
VertexAttribute
;
struct
VertexAttribCurrentValueData
;
}
namespace
rx
{
class
BufferD3D
;
class
BufferFactoryD3D
;
class
StreamingVertexBufferInterface
;
class
VertexBuffer
;
class
VertexBufferBinding
final
{
public
:
VertexBufferBinding
(
)
;
VertexBufferBinding
(
const
VertexBufferBinding
&
other
)
;
~
VertexBufferBinding
(
)
;
void
set
(
VertexBuffer
*
vertexBuffer
)
;
VertexBuffer
*
get
(
)
const
;
VertexBufferBinding
&
operator
=
(
const
VertexBufferBinding
&
other
)
;
private
:
VertexBuffer
*
mBoundVertexBuffer
;
}
;
struct
TranslatedAttribute
{
TranslatedAttribute
(
)
;
gl
:
:
ErrorOrResult
<
unsigned
int
>
computeOffset
(
GLint
startVertex
)
const
;
bool
active
;
const
gl
:
:
VertexAttribute
*
attribute
;
GLenum
currentValueType
;
unsigned
int
baseOffset
;
bool
usesFirstVertexOffset
;
unsigned
int
stride
;
VertexBufferBinding
vertexBuffer
;
BufferD3D
*
storage
;
unsigned
int
serial
;
unsigned
int
divisor
;
}
;
enum
class
VertexStorageType
{
UNKNOWN
STATIC
DYNAMIC
DIRECT
CURRENT_VALUE
}
;
VertexStorageType
ClassifyAttributeStorage
(
const
gl
:
:
VertexAttribute
&
attrib
)
;
class
VertexDataManager
:
angle
:
:
NonCopyable
{
public
:
VertexDataManager
(
BufferFactoryD3D
*
factory
)
;
virtual
~
VertexDataManager
(
)
;
gl
:
:
Error
prepareVertexData
(
const
gl
:
:
State
&
state
GLint
start
GLsizei
count
std
:
:
vector
<
TranslatedAttribute
>
*
translatedAttribs
GLsizei
instances
)
;
static
void
StoreDirectAttrib
(
TranslatedAttribute
*
directAttrib
)
;
static
gl
:
:
Error
StoreStaticAttrib
(
TranslatedAttribute
*
translated
GLsizei
count
GLsizei
instances
)
;
gl
:
:
Error
storeDynamicAttribs
(
std
:
:
vector
<
TranslatedAttribute
>
*
translatedAttribs
const
gl
:
:
AttributesMask
&
dynamicAttribsMask
GLint
start
GLsizei
count
GLsizei
instances
)
;
static
void
PromoteDynamicAttribs
(
const
std
:
:
vector
<
TranslatedAttribute
>
&
translatedAttribs
const
gl
:
:
AttributesMask
&
dynamicAttribsMask
GLsizei
count
)
;
gl
:
:
Error
storeCurrentValue
(
const
gl
:
:
VertexAttribCurrentValueData
&
currentValue
TranslatedAttribute
*
translated
size_t
attribIndex
)
;
private
:
struct
CurrentValueState
{
CurrentValueState
(
)
;
~
CurrentValueState
(
)
;
StreamingVertexBufferInterface
*
buffer
;
gl
:
:
VertexAttribCurrentValueData
data
;
size_t
offset
;
}
;
gl
:
:
Error
reserveSpaceForAttrib
(
const
TranslatedAttribute
&
translatedAttrib
GLsizei
count
GLsizei
instances
)
const
;
gl
:
:
Error
storeDynamicAttrib
(
TranslatedAttribute
*
translated
GLint
start
GLsizei
count
GLsizei
instances
)
;
BufferFactoryD3D
*
const
mFactory
;
StreamingVertexBufferInterface
*
mStreamingBuffer
;
std
:
:
vector
<
CurrentValueState
>
mCurrentValueCache
;
gl
:
:
AttributesMask
mDynamicAttribsMaskCache
;
}
;
}
#
endif
