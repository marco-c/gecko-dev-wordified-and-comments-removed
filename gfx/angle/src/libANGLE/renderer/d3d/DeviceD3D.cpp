#
include
"
libANGLE
/
renderer
/
d3d
/
DeviceD3D
.
h
"
#
include
"
libANGLE
/
renderer
/
d3d
/
RendererD3D
.
h
"
#
include
"
libANGLE
/
Device
.
h
"
#
include
"
libANGLE
/
Display
.
h
"
#
include
<
EGL
/
eglext
.
h
>
namespace
rx
{
DeviceD3D
:
:
DeviceD3D
(
)
:
mDevice
(
0
)
mDeviceType
(
0
)
mDeviceExternallySourced
(
false
)
mIsInitialized
(
false
)
{
}
DeviceD3D
:
:
~
DeviceD3D
(
)
{
#
if
defined
(
ANGLE_ENABLE_D3D11
)
if
(
mDeviceType
=
=
EGL_D3D11_DEVICE_ANGLE
)
{
ID3D11Device
*
device
=
reinterpret_cast
<
ID3D11Device
*
>
(
mDevice
)
;
device
-
>
Release
(
)
;
}
#
endif
}
egl
:
:
Error
DeviceD3D
:
:
getDevice
(
void
*
*
outValue
)
{
if
(
!
mIsInitialized
)
{
*
outValue
=
nullptr
;
return
egl
:
:
EglBadDevice
(
)
;
}
*
outValue
=
mDevice
;
return
egl
:
:
NoError
(
)
;
}
egl
:
:
Error
DeviceD3D
:
:
initialize
(
void
*
device
EGLint
deviceType
EGLBoolean
deviceExternallySourced
)
{
ASSERT
(
!
mIsInitialized
)
;
if
(
mIsInitialized
)
{
return
egl
:
:
EglBadDevice
(
)
;
}
#
if
defined
(
ANGLE_ENABLE_D3D11
)
if
(
deviceType
=
=
EGL_D3D11_DEVICE_ANGLE
)
{
IUnknown
*
iunknown
=
reinterpret_cast
<
IUnknown
*
>
(
device
)
;
ID3D11Device
*
d3dDevice
=
nullptr
;
HRESULT
hr
=
iunknown
-
>
QueryInterface
(
__uuidof
(
ID3D11Device
)
reinterpret_cast
<
void
*
*
>
(
&
d3dDevice
)
)
;
if
(
FAILED
(
hr
)
)
{
return
egl
:
:
EglBadAttribute
(
)
<
<
"
Invalid
D3D
device
passed
into
EGLDeviceEXT
"
;
}
}
else
#
endif
{
ASSERT
(
deviceExternallySourced
=
=
EGL_FALSE
)
;
}
mDevice
=
device
;
mDeviceType
=
deviceType
;
mDeviceExternallySourced
=
!
!
deviceExternallySourced
;
mIsInitialized
=
true
;
return
egl
:
:
NoError
(
)
;
}
EGLint
DeviceD3D
:
:
getType
(
)
{
return
mDeviceType
;
}
void
DeviceD3D
:
:
generateExtensions
(
egl
:
:
DeviceExtensions
*
outExtensions
)
const
{
outExtensions
-
>
deviceD3D
=
true
;
}
}
