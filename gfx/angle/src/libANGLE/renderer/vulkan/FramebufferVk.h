#
ifndef
LIBANGLE_RENDERER_VULKAN_FRAMEBUFFERVK_H_
#
define
LIBANGLE_RENDERER_VULKAN_FRAMEBUFFERVK_H_
#
include
"
libANGLE
/
renderer
/
FramebufferImpl
.
h
"
#
include
"
libANGLE
/
renderer
/
vulkan
/
renderervk_utils
.
h
"
namespace
rx
{
class
RenderTargetVk
;
class
WindowSurfaceVk
;
class
FramebufferVk
:
public
FramebufferImpl
public
ResourceVk
{
public
:
static
FramebufferVk
*
CreateUserFBO
(
const
gl
:
:
FramebufferState
&
state
)
;
static
FramebufferVk
*
CreateDefaultFBO
(
const
gl
:
:
FramebufferState
&
state
WindowSurfaceVk
*
backbuffer
)
;
~
FramebufferVk
(
)
override
;
void
destroy
(
const
gl
:
:
Context
*
context
)
override
;
void
destroyDefault
(
const
egl
:
:
Display
*
display
)
override
;
gl
:
:
Error
discard
(
const
gl
:
:
Context
*
context
size_t
count
const
GLenum
*
attachments
)
override
;
gl
:
:
Error
invalidate
(
const
gl
:
:
Context
*
context
size_t
count
const
GLenum
*
attachments
)
override
;
gl
:
:
Error
invalidateSub
(
const
gl
:
:
Context
*
context
size_t
count
const
GLenum
*
attachments
const
gl
:
:
Rectangle
&
area
)
override
;
gl
:
:
Error
clear
(
const
gl
:
:
Context
*
context
GLbitfield
mask
)
override
;
gl
:
:
Error
clearBufferfv
(
const
gl
:
:
Context
*
context
GLenum
buffer
GLint
drawbuffer
const
GLfloat
*
values
)
override
;
gl
:
:
Error
clearBufferuiv
(
const
gl
:
:
Context
*
context
GLenum
buffer
GLint
drawbuffer
const
GLuint
*
values
)
override
;
gl
:
:
Error
clearBufferiv
(
const
gl
:
:
Context
*
context
GLenum
buffer
GLint
drawbuffer
const
GLint
*
values
)
override
;
gl
:
:
Error
clearBufferfi
(
const
gl
:
:
Context
*
context
GLenum
buffer
GLint
drawbuffer
GLfloat
depth
GLint
stencil
)
override
;
GLenum
getImplementationColorReadFormat
(
const
gl
:
:
Context
*
context
)
const
override
;
GLenum
getImplementationColorReadType
(
const
gl
:
:
Context
*
context
)
const
override
;
gl
:
:
Error
readPixels
(
const
gl
:
:
Context
*
context
const
gl
:
:
Rectangle
&
area
GLenum
format
GLenum
type
void
*
pixels
)
override
;
gl
:
:
Error
blit
(
const
gl
:
:
Context
*
context
const
gl
:
:
Rectangle
&
sourceArea
const
gl
:
:
Rectangle
&
destArea
GLbitfield
mask
GLenum
filter
)
override
;
bool
checkStatus
(
)
const
override
;
void
syncState
(
const
gl
:
:
Context
*
context
const
gl
:
:
Framebuffer
:
:
DirtyBits
&
dirtyBits
)
override
;
gl
:
:
Error
getSamplePosition
(
size_t
index
GLfloat
*
xy
)
const
override
;
gl
:
:
Error
ensureInRenderPass
(
const
gl
:
:
Context
*
context
VkDevice
device
vk
:
:
CommandBuffer
*
commandBuffer
Serial
queueSerial
const
gl
:
:
State
&
glState
)
;
void
endRenderPass
(
vk
:
:
CommandBuffer
*
commandBuffer
)
;
bool
isInRenderPass
(
)
const
{
return
mInRenderPass
;
}
gl
:
:
ErrorOrResult
<
vk
:
:
RenderPass
*
>
getRenderPass
(
const
gl
:
:
Context
*
context
VkDevice
device
)
;
private
:
FramebufferVk
(
const
gl
:
:
FramebufferState
&
state
)
;
FramebufferVk
(
const
gl
:
:
FramebufferState
&
state
WindowSurfaceVk
*
backbuffer
)
;
gl
:
:
ErrorOrResult
<
vk
:
:
Framebuffer
*
>
getFramebuffer
(
const
gl
:
:
Context
*
context
VkDevice
device
)
;
WindowSurfaceVk
*
mBackbuffer
;
vk
:
:
RenderPass
mRenderPass
;
vk
:
:
Framebuffer
mFramebuffer
;
bool
mInRenderPass
;
}
;
}
#
endif
