#
ifndef
LIBANGLE_RENDERER_VULKAN_CONTEXTVK_H_
#
define
LIBANGLE_RENDERER_VULKAN_CONTEXTVK_H_
#
include
"
libANGLE
/
renderer
/
ContextImpl
.
h
"
namespace
rx
{
class
RendererVk
;
class
ContextVk
:
public
ContextImpl
{
public
:
ContextVk
(
const
gl
:
:
ContextState
&
state
RendererVk
*
renderer
)
;
~
ContextVk
(
)
override
;
gl
:
:
Error
initialize
(
)
override
;
gl
:
:
Error
flush
(
)
override
;
gl
:
:
Error
finish
(
)
override
;
gl
:
:
Error
drawArrays
(
GLenum
mode
GLint
first
GLsizei
count
)
override
;
gl
:
:
Error
drawArraysInstanced
(
GLenum
mode
GLint
first
GLsizei
count
GLsizei
instanceCount
)
override
;
gl
:
:
Error
drawElements
(
GLenum
mode
GLsizei
count
GLenum
type
const
GLvoid
*
indices
const
gl
:
:
IndexRange
&
indexRange
)
override
;
gl
:
:
Error
drawElementsInstanced
(
GLenum
mode
GLsizei
count
GLenum
type
const
GLvoid
*
indices
GLsizei
instances
const
gl
:
:
IndexRange
&
indexRange
)
override
;
gl
:
:
Error
drawRangeElements
(
GLenum
mode
GLuint
start
GLuint
end
GLsizei
count
GLenum
type
const
GLvoid
*
indices
const
gl
:
:
IndexRange
&
indexRange
)
override
;
GLenum
getResetStatus
(
)
override
;
std
:
:
string
getVendorString
(
)
const
override
;
std
:
:
string
getRendererDescription
(
)
const
override
;
void
insertEventMarker
(
GLsizei
length
const
char
*
marker
)
override
;
void
pushGroupMarker
(
GLsizei
length
const
char
*
marker
)
override
;
void
popGroupMarker
(
)
override
;
void
syncState
(
const
gl
:
:
State
&
state
const
gl
:
:
State
:
:
DirtyBits
&
dirtyBits
)
override
;
GLint
getGPUDisjoint
(
)
override
;
GLint64
getTimestamp
(
)
override
;
void
onMakeCurrent
(
const
gl
:
:
ContextState
&
data
)
override
;
const
gl
:
:
Caps
&
getNativeCaps
(
)
const
override
;
const
gl
:
:
TextureCapsMap
&
getNativeTextureCaps
(
)
const
override
;
const
gl
:
:
Extensions
&
getNativeExtensions
(
)
const
override
;
const
gl
:
:
Limitations
&
getNativeLimitations
(
)
const
override
;
CompilerImpl
*
createCompiler
(
)
override
;
ShaderImpl
*
createShader
(
const
gl
:
:
ShaderState
&
state
)
override
;
ProgramImpl
*
createProgram
(
const
gl
:
:
ProgramState
&
state
)
override
;
FramebufferImpl
*
createFramebuffer
(
const
gl
:
:
FramebufferState
&
state
)
override
;
TextureImpl
*
createTexture
(
const
gl
:
:
TextureState
&
state
)
override
;
RenderbufferImpl
*
createRenderbuffer
(
)
override
;
BufferImpl
*
createBuffer
(
const
gl
:
:
BufferState
&
state
)
override
;
VertexArrayImpl
*
createVertexArray
(
const
gl
:
:
VertexArrayState
&
state
)
override
;
QueryImpl
*
createQuery
(
GLenum
type
)
override
;
FenceNVImpl
*
createFenceNV
(
)
override
;
FenceSyncImpl
*
createFenceSync
(
)
override
;
TransformFeedbackImpl
*
createTransformFeedback
(
const
gl
:
:
TransformFeedbackState
&
state
)
override
;
SamplerImpl
*
createSampler
(
)
override
;
std
:
:
vector
<
PathImpl
*
>
createPaths
(
GLsizei
)
override
;
private
:
RendererVk
*
mRenderer
;
}
;
}
#
endif
