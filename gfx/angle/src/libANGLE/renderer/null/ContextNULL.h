#
ifndef
LIBANGLE_RENDERER_NULL_CONTEXTNULL_H_
#
define
LIBANGLE_RENDERER_NULL_CONTEXTNULL_H_
#
include
"
libANGLE
/
renderer
/
ContextImpl
.
h
"
namespace
rx
{
class
ContextNULL
:
public
ContextImpl
{
public
:
ContextNULL
(
const
gl
:
:
ContextState
&
state
)
;
~
ContextNULL
(
)
override
;
gl
:
:
Error
initialize
(
)
override
;
gl
:
:
Error
flush
(
)
override
;
gl
:
:
Error
finish
(
)
override
;
gl
:
:
Error
drawArrays
(
GLenum
mode
GLint
first
GLsizei
count
)
override
;
gl
:
:
Error
drawArraysInstanced
(
GLenum
mode
GLint
first
GLsizei
count
GLsizei
instanceCount
)
override
;
gl
:
:
Error
drawElements
(
GLenum
mode
GLsizei
count
GLenum
type
const
GLvoid
*
indices
const
gl
:
:
IndexRange
&
indexRange
)
override
;
gl
:
:
Error
drawElementsInstanced
(
GLenum
mode
GLsizei
count
GLenum
type
const
GLvoid
*
indices
GLsizei
instances
const
gl
:
:
IndexRange
&
indexRange
)
override
;
gl
:
:
Error
drawRangeElements
(
GLenum
mode
GLuint
start
GLuint
end
GLsizei
count
GLenum
type
const
GLvoid
*
indices
const
gl
:
:
IndexRange
&
indexRange
)
override
;
CompilerImpl
*
createCompiler
(
)
override
;
ShaderImpl
*
createShader
(
const
gl
:
:
ShaderState
&
data
)
override
;
ProgramImpl
*
createProgram
(
const
gl
:
:
ProgramState
&
data
)
override
;
FramebufferImpl
*
createFramebuffer
(
const
gl
:
:
FramebufferState
&
data
)
override
;
TextureImpl
*
createTexture
(
const
gl
:
:
TextureState
&
state
)
override
;
RenderbufferImpl
*
createRenderbuffer
(
)
override
;
BufferImpl
*
createBuffer
(
const
gl
:
:
BufferState
&
state
)
override
;
VertexArrayImpl
*
createVertexArray
(
const
gl
:
:
VertexArrayState
&
data
)
override
;
QueryImpl
*
createQuery
(
GLenum
type
)
override
;
FenceNVImpl
*
createFenceNV
(
)
override
;
FenceSyncImpl
*
createFenceSync
(
)
override
;
TransformFeedbackImpl
*
createTransformFeedback
(
const
gl
:
:
TransformFeedbackState
&
state
)
override
;
SamplerImpl
*
createSampler
(
)
override
;
std
:
:
vector
<
PathImpl
*
>
createPaths
(
GLsizei
range
)
override
;
}
;
}
#
endif
