#
ifndef
LIBANGLE_RENDERER_FORMAT_H_
#
define
LIBANGLE_RENDERER_FORMAT_H_
#
include
"
libANGLE
/
formatutils
.
h
"
#
include
"
libANGLE
/
renderer
/
renderer_utils
.
h
"
namespace
angle
{
struct
Format
final
:
angle
:
:
NonCopyable
{
enum
class
ID
;
constexpr
Format
(
ID
id
GLenum
glFormat
GLenum
fboFormat
rx
:
:
MipGenerationFunction
mipGen
const
rx
:
:
FastCopyFunctionMap
&
fastCopyFunctions
rx
:
:
ColorReadFunction
colorRead
GLenum
componentType
GLuint
redBits
GLuint
greenBits
GLuint
blueBits
GLuint
alphaBits
GLuint
depthBits
GLuint
stencilBits
)
;
static
const
Format
&
Get
(
ID
id
)
;
ID
id
;
GLenum
glInternalFormat
;
GLenum
fboImplementationInternalFormat
;
rx
:
:
MipGenerationFunction
mipGenerationFunction
;
rx
:
:
ColorReadFunction
colorReadFunction
;
const
rx
:
:
FastCopyFunctionMap
&
fastCopyFunctions
;
GLenum
componentType
;
GLuint
redBits
;
GLuint
greenBits
;
GLuint
blueBits
;
GLuint
alphaBits
;
GLuint
depthBits
;
GLuint
stencilBits
;
}
;
constexpr
Format
:
:
Format
(
ID
id
GLenum
glFormat
GLenum
fboFormat
rx
:
:
MipGenerationFunction
mipGen
const
rx
:
:
FastCopyFunctionMap
&
fastCopyFunctions
rx
:
:
ColorReadFunction
colorRead
GLenum
componentType
GLuint
redBits
GLuint
greenBits
GLuint
blueBits
GLuint
alphaBits
GLuint
depthBits
GLuint
stencilBits
)
:
id
(
id
)
glInternalFormat
(
glFormat
)
fboImplementationInternalFormat
(
fboFormat
)
mipGenerationFunction
(
mipGen
)
colorReadFunction
(
colorRead
)
fastCopyFunctions
(
fastCopyFunctions
)
componentType
(
componentType
)
redBits
(
redBits
)
greenBits
(
greenBits
)
blueBits
(
blueBits
)
alphaBits
(
alphaBits
)
depthBits
(
depthBits
)
stencilBits
(
stencilBits
)
{
}
}
#
include
"
libANGLE
/
renderer
/
Format_ID_autogen
.
inl
"
#
endif
