#
ifndef
LIBANGLE_MEMORY_PROGRAM_CACHE_H_
#
define
LIBANGLE_MEMORY_PROGRAM_CACHE_H_
#
include
<
array
>
#
include
"
common
/
MemoryBuffer
.
h
"
#
include
"
libANGLE
/
Error
.
h
"
#
include
"
libANGLE
/
SizedMRUCache
.
h
"
namespace
gl
{
constexpr
size_t
kProgramHashLength
=
20
;
using
ProgramHash
=
std
:
:
array
<
uint8_t
kProgramHashLength
>
;
}
namespace
std
{
template
<
>
struct
hash
<
gl
:
:
ProgramHash
>
{
size_t
operator
(
)
(
const
gl
:
:
ProgramHash
&
programHash
)
const
{
unsigned
int
hash
=
0
;
for
(
uint32_t
num
:
programHash
)
{
hash
*
=
37
;
hash
+
=
num
;
}
return
hash
;
}
}
;
}
namespace
gl
{
class
Context
;
class
InfoLog
;
class
Program
;
class
ProgramState
;
class
MemoryProgramCache
final
:
angle
:
:
NonCopyable
{
public
:
MemoryProgramCache
(
size_t
maxCacheSizeBytes
)
;
~
MemoryProgramCache
(
)
;
static
void
Serialize
(
const
Context
*
context
const
Program
*
program
angle
:
:
MemoryBuffer
*
binaryOut
)
;
static
LinkResult
Deserialize
(
const
Context
*
context
const
Program
*
program
ProgramState
*
state
const
uint8_t
*
binary
size_t
length
InfoLog
&
infoLog
)
;
static
void
ComputeHash
(
const
Context
*
context
const
Program
*
program
ProgramHash
*
hashOut
)
;
bool
get
(
const
ProgramHash
&
programHash
const
angle
:
:
MemoryBuffer
*
*
programOut
)
;
bool
getAt
(
size_t
index
ProgramHash
*
hashOut
const
angle
:
:
MemoryBuffer
*
*
programOut
)
;
void
remove
(
const
ProgramHash
&
programHash
)
;
void
putProgram
(
const
ProgramHash
&
programHash
const
Context
*
context
const
Program
*
program
)
;
void
updateProgram
(
const
Context
*
context
const
Program
*
program
)
;
void
putBinary
(
const
ProgramHash
&
programHash
const
uint8_t
*
binary
size_t
length
)
;
LinkResult
getProgram
(
const
Context
*
context
const
Program
*
program
ProgramState
*
state
ProgramHash
*
hashOut
)
;
void
clear
(
)
;
void
resize
(
size_t
maxCacheSizeBytes
)
;
size_t
entryCount
(
)
const
;
size_t
trim
(
size_t
limit
)
;
size_t
size
(
)
const
;
size_t
maxSize
(
)
const
;
private
:
enum
class
CacheSource
{
PutProgram
PutBinary
}
;
using
CacheEntry
=
std
:
:
pair
<
angle
:
:
MemoryBuffer
CacheSource
>
;
angle
:
:
SizedMRUCache
<
ProgramHash
CacheEntry
>
mProgramBinaryCache
;
unsigned
int
mIssuedWarnings
;
}
;
}
#
endif
