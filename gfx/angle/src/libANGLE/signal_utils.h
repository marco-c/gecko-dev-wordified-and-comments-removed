#
ifndef
LIBANGLE_SIGNAL_UTILS_H_
#
define
LIBANGLE_SIGNAL_UTILS_H_
#
include
<
set
>
#
include
"
common
/
angleutils
.
h
"
namespace
angle
{
using
SignalToken
=
uint32_t
;
class
SignalReceiver
{
public
:
virtual
~
SignalReceiver
(
)
=
default
;
virtual
void
signal
(
SignalToken
token
)
=
0
;
}
;
class
ChannelBinding
;
class
BroadcastChannel
final
:
NonCopyable
{
public
:
BroadcastChannel
(
)
;
~
BroadcastChannel
(
)
;
void
signal
(
)
const
;
void
reset
(
)
;
private
:
friend
class
ChannelBinding
;
void
addReceiver
(
ChannelBinding
*
receiver
)
;
void
removeReceiver
(
ChannelBinding
*
receiver
)
;
std
:
:
set
<
ChannelBinding
*
>
mReceivers
;
}
;
class
ChannelBinding
final
{
public
:
ChannelBinding
(
SignalReceiver
*
receiver
SignalToken
token
)
;
~
ChannelBinding
(
)
;
ChannelBinding
(
const
ChannelBinding
&
other
)
=
default
;
ChannelBinding
&
operator
=
(
const
ChannelBinding
&
other
)
=
default
;
void
bind
(
BroadcastChannel
*
channel
)
;
void
reset
(
)
;
void
signal
(
)
const
;
void
onChannelClosed
(
)
;
private
:
BroadcastChannel
*
mChannel
;
SignalReceiver
*
mReceiver
;
SignalToken
mToken
;
}
;
}
#
endif
