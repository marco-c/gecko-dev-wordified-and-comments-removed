#
ifndef
LIBANGLE_IMAGE_H_
#
define
LIBANGLE_IMAGE_H_
#
include
"
common
/
angleutils
.
h
"
#
include
"
libANGLE
/
AttributeMap
.
h
"
#
include
"
libANGLE
/
Error
.
h
"
#
include
"
libANGLE
/
RefCountObject
.
h
"
#
include
"
libANGLE
/
formatutils
.
h
"
#
include
<
set
>
namespace
rx
{
class
ImageImpl
;
}
namespace
egl
{
class
Image
;
class
ImageSibling
:
public
RefCountObject
{
public
:
ImageSibling
(
GLuint
id
)
;
virtual
~
ImageSibling
(
)
;
protected
:
void
setTargetImage
(
egl
:
:
Image
*
imageTarget
)
;
gl
:
:
Error
orphanImages
(
)
;
private
:
friend
class
Image
;
void
addImageSource
(
egl
:
:
Image
*
imageSource
)
;
void
removeImageSource
(
egl
:
:
Image
*
imageSource
)
;
std
:
:
set
<
Image
*
>
mSourcesOf
;
BindingPointer
<
Image
>
mTargetOf
;
}
;
class
Image
final
:
public
RefCountObject
{
public
:
Image
(
rx
:
:
ImageImpl
*
impl
EGLenum
target
ImageSibling
*
buffer
const
AttributeMap
&
attribs
)
;
~
Image
(
)
;
const
gl
:
:
Format
&
getFormat
(
)
const
;
size_t
getWidth
(
)
const
;
size_t
getHeight
(
)
const
;
size_t
getSamples
(
)
const
;
rx
:
:
ImageImpl
*
getImplementation
(
)
;
const
rx
:
:
ImageImpl
*
getImplementation
(
)
const
;
private
:
friend
class
ImageSibling
;
void
addTargetSibling
(
ImageSibling
*
sibling
)
;
gl
:
:
Error
orphanSibling
(
ImageSibling
*
sibling
)
;
rx
:
:
ImageImpl
*
mImplementation
;
gl
:
:
Format
mFormat
;
size_t
mWidth
;
size_t
mHeight
;
size_t
mSamples
;
BindingPointer
<
ImageSibling
>
mSource
;
std
:
:
set
<
ImageSibling
*
>
mTargets
;
}
;
}
#
endif
