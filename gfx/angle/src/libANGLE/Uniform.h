#
ifndef
LIBANGLE_UNIFORM_H_
#
define
LIBANGLE_UNIFORM_H_
#
include
<
string
>
#
include
<
vector
>
#
include
"
angle_gl
.
h
"
#
include
"
common
/
debug
.
h
"
#
include
"
compiler
/
translator
/
blocklayout
.
h
"
#
include
"
libANGLE
/
angletypes
.
h
"
namespace
gl
{
struct
LinkedUniform
:
angle
:
:
NonCopyable
{
LinkedUniform
(
GLenum
type
GLenum
precision
const
std
:
:
string
&
name
unsigned
int
arraySize
const
int
blockIndex
const
sh
:
:
BlockMemberInfo
&
blockInfo
)
;
~
LinkedUniform
(
)
;
bool
isArray
(
)
const
;
unsigned
int
elementCount
(
)
const
;
bool
isReferencedByVertexShader
(
)
const
;
bool
isReferencedByFragmentShader
(
)
const
;
bool
isInDefaultBlock
(
)
const
;
size_t
dataSize
(
)
const
;
bool
isSampler
(
)
const
;
bool
isBuiltIn
(
)
const
;
const
GLenum
type
;
const
GLenum
precision
;
const
std
:
:
string
name
;
const
unsigned
int
arraySize
;
const
int
blockIndex
;
const
sh
:
:
BlockMemberInfo
blockInfo
;
unsigned
char
*
data
;
bool
dirty
;
unsigned
int
psRegisterIndex
;
unsigned
int
vsRegisterIndex
;
unsigned
int
registerCount
;
unsigned
int
registerElement
;
}
;
struct
UniformBlock
:
angle
:
:
NonCopyable
{
UniformBlock
(
const
std
:
:
string
&
name
unsigned
int
elementIndex
unsigned
int
dataSize
)
;
bool
isArrayElement
(
)
const
;
bool
isReferencedByVertexShader
(
)
const
;
bool
isReferencedByFragmentShader
(
)
const
;
const
std
:
:
string
name
;
const
unsigned
int
elementIndex
;
const
unsigned
int
dataSize
;
std
:
:
vector
<
unsigned
int
>
memberUniformIndexes
;
unsigned
int
psRegisterIndex
;
unsigned
int
vsRegisterIndex
;
}
;
}
#
endif
