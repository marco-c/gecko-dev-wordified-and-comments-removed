#
ifndef
LIBANGLE_STATE_H_
#
define
LIBANGLE_STATE_H_
#
include
"
common
/
angleutils
.
h
"
#
include
"
libANGLE
/
RefCountObject
.
h
"
#
include
"
libANGLE
/
angletypes
.
h
"
#
include
"
libANGLE
/
VertexAttribute
.
h
"
#
include
"
libANGLE
/
Renderbuffer
.
h
"
#
include
"
libANGLE
/
Texture
.
h
"
#
include
"
libANGLE
/
TransformFeedback
.
h
"
#
include
"
libANGLE
/
Program
.
h
"
#
include
"
libANGLE
/
Sampler
.
h
"
namespace
gl
{
class
Query
;
class
VertexArray
;
class
Context
;
struct
Caps
;
struct
Data
;
typedef
std
:
:
map
<
GLenum
BindingPointer
<
Texture
>
>
TextureMap
;
class
State
:
angle
:
:
NonCopyable
{
public
:
State
(
)
;
~
State
(
)
;
void
initialize
(
const
Caps
&
caps
GLuint
clientVersion
)
;
void
reset
(
)
;
const
RasterizerState
&
getRasterizerState
(
)
const
;
const
BlendState
&
getBlendState
(
)
const
;
const
DepthStencilState
&
getDepthStencilState
(
)
const
;
void
setColorClearValue
(
float
red
float
green
float
blue
float
alpha
)
;
void
setDepthClearValue
(
float
depth
)
;
void
setStencilClearValue
(
int
stencil
)
;
const
ColorF
&
getColorClearValue
(
)
const
{
return
mColorClearValue
;
}
float
getDepthClearValue
(
)
const
{
return
mDepthClearValue
;
}
int
getStencilClearValue
(
)
const
{
return
mStencilClearValue
;
}
void
setColorMask
(
bool
red
bool
green
bool
blue
bool
alpha
)
;
void
setDepthMask
(
bool
mask
)
;
bool
isRasterizerDiscardEnabled
(
)
const
;
void
setRasterizerDiscard
(
bool
enabled
)
;
bool
isPrimitiveRestartEnabled
(
)
const
;
void
setPrimitiveRestart
(
bool
enabled
)
;
bool
isCullFaceEnabled
(
)
const
;
void
setCullFace
(
bool
enabled
)
;
void
setCullMode
(
GLenum
mode
)
;
void
setFrontFace
(
GLenum
front
)
;
bool
isDepthTestEnabled
(
)
const
;
void
setDepthTest
(
bool
enabled
)
;
void
setDepthFunc
(
GLenum
depthFunc
)
;
void
setDepthRange
(
float
zNear
float
zFar
)
;
float
getNearPlane
(
)
const
;
float
getFarPlane
(
)
const
;
bool
isBlendEnabled
(
)
const
;
void
setBlend
(
bool
enabled
)
;
void
setBlendFactors
(
GLenum
sourceRGB
GLenum
destRGB
GLenum
sourceAlpha
GLenum
destAlpha
)
;
void
setBlendColor
(
float
red
float
green
float
blue
float
alpha
)
;
void
setBlendEquation
(
GLenum
rgbEquation
GLenum
alphaEquation
)
;
const
ColorF
&
getBlendColor
(
)
const
;
bool
isStencilTestEnabled
(
)
const
;
void
setStencilTest
(
bool
enabled
)
;
void
setStencilParams
(
GLenum
stencilFunc
GLint
stencilRef
GLuint
stencilMask
)
;
void
setStencilBackParams
(
GLenum
stencilBackFunc
GLint
stencilBackRef
GLuint
stencilBackMask
)
;
void
setStencilWritemask
(
GLuint
stencilWritemask
)
;
void
setStencilBackWritemask
(
GLuint
stencilBackWritemask
)
;
void
setStencilOperations
(
GLenum
stencilFail
GLenum
stencilPassDepthFail
GLenum
stencilPassDepthPass
)
;
void
setStencilBackOperations
(
GLenum
stencilBackFail
GLenum
stencilBackPassDepthFail
GLenum
stencilBackPassDepthPass
)
;
GLint
getStencilRef
(
)
const
;
GLint
getStencilBackRef
(
)
const
;
bool
isPolygonOffsetFillEnabled
(
)
const
;
void
setPolygonOffsetFill
(
bool
enabled
)
;
void
setPolygonOffsetParams
(
GLfloat
factor
GLfloat
units
)
;
bool
isSampleAlphaToCoverageEnabled
(
)
const
;
void
setSampleAlphaToCoverage
(
bool
enabled
)
;
bool
isSampleCoverageEnabled
(
)
const
;
void
setSampleCoverage
(
bool
enabled
)
;
void
setSampleCoverageParams
(
GLclampf
value
bool
invert
)
;
GLclampf
getSampleCoverageValue
(
)
const
;
bool
getSampleCoverageInvert
(
)
const
;
bool
isScissorTestEnabled
(
)
const
;
void
setScissorTest
(
bool
enabled
)
;
void
setScissorParams
(
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
;
const
Rectangle
&
getScissor
(
)
const
;
bool
isDitherEnabled
(
)
const
;
void
setDither
(
bool
enabled
)
;
void
setEnableFeature
(
GLenum
feature
bool
enabled
)
;
bool
getEnableFeature
(
GLenum
feature
)
;
void
setLineWidth
(
GLfloat
width
)
;
float
getLineWidth
(
)
const
;
void
setGenerateMipmapHint
(
GLenum
hint
)
;
void
setFragmentShaderDerivativeHint
(
GLenum
hint
)
;
void
setViewportParams
(
GLint
x
GLint
y
GLsizei
width
GLsizei
height
)
;
const
Rectangle
&
getViewport
(
)
const
;
void
setActiveSampler
(
unsigned
int
active
)
;
unsigned
int
getActiveSampler
(
)
const
;
void
setSamplerTexture
(
GLenum
type
Texture
*
texture
)
;
Texture
*
getSamplerTexture
(
unsigned
int
sampler
GLenum
type
)
const
;
GLuint
getSamplerTextureId
(
unsigned
int
sampler
GLenum
type
)
const
;
void
detachTexture
(
const
TextureMap
&
zeroTextures
GLuint
texture
)
;
void
initializeZeroTextures
(
const
TextureMap
&
zeroTextures
)
;
void
setSamplerBinding
(
GLuint
textureUnit
Sampler
*
sampler
)
;
GLuint
getSamplerId
(
GLuint
textureUnit
)
const
;
Sampler
*
getSampler
(
GLuint
textureUnit
)
const
;
void
detachSampler
(
GLuint
sampler
)
;
void
setRenderbufferBinding
(
Renderbuffer
*
renderbuffer
)
;
GLuint
getRenderbufferId
(
)
const
;
Renderbuffer
*
getCurrentRenderbuffer
(
)
;
void
detachRenderbuffer
(
GLuint
renderbuffer
)
;
void
setReadFramebufferBinding
(
Framebuffer
*
framebuffer
)
;
void
setDrawFramebufferBinding
(
Framebuffer
*
framebuffer
)
;
Framebuffer
*
getTargetFramebuffer
(
GLenum
target
)
const
;
Framebuffer
*
getReadFramebuffer
(
)
;
Framebuffer
*
getDrawFramebuffer
(
)
;
const
Framebuffer
*
getReadFramebuffer
(
)
const
;
const
Framebuffer
*
getDrawFramebuffer
(
)
const
;
bool
removeReadFramebufferBinding
(
GLuint
framebuffer
)
;
bool
removeDrawFramebufferBinding
(
GLuint
framebuffer
)
;
void
setVertexArrayBinding
(
VertexArray
*
vertexArray
)
;
GLuint
getVertexArrayId
(
)
const
;
VertexArray
*
getVertexArray
(
)
const
;
bool
removeVertexArrayBinding
(
GLuint
vertexArray
)
;
void
setProgram
(
Program
*
newProgram
)
;
Program
*
getProgram
(
)
const
;
void
setTransformFeedbackBinding
(
TransformFeedback
*
transformFeedback
)
;
TransformFeedback
*
getCurrentTransformFeedback
(
)
const
;
bool
isTransformFeedbackActiveUnpaused
(
)
const
;
void
detachTransformFeedback
(
GLuint
transformFeedback
)
;
bool
isQueryActive
(
)
const
;
void
setActiveQuery
(
GLenum
target
Query
*
query
)
;
GLuint
getActiveQueryId
(
GLenum
target
)
const
;
Query
*
getActiveQuery
(
GLenum
target
)
const
;
void
setArrayBufferBinding
(
Buffer
*
buffer
)
;
GLuint
getArrayBufferId
(
)
const
;
bool
removeArrayBufferBinding
(
GLuint
buffer
)
;
void
setGenericUniformBufferBinding
(
Buffer
*
buffer
)
;
void
setIndexedUniformBufferBinding
(
GLuint
index
Buffer
*
buffer
GLintptr
offset
GLsizeiptr
size
)
;
GLuint
getIndexedUniformBufferId
(
GLuint
index
)
const
;
Buffer
*
getIndexedUniformBuffer
(
GLuint
index
)
const
;
GLintptr
getIndexedUniformBufferOffset
(
GLuint
index
)
const
;
GLsizeiptr
getIndexedUniformBufferSize
(
GLuint
index
)
const
;
void
setCopyReadBufferBinding
(
Buffer
*
buffer
)
;
void
setCopyWriteBufferBinding
(
Buffer
*
buffer
)
;
void
setPixelPackBufferBinding
(
Buffer
*
buffer
)
;
void
setPixelUnpackBufferBinding
(
Buffer
*
buffer
)
;
Buffer
*
getTargetBuffer
(
GLenum
target
)
const
;
void
setEnableVertexAttribArray
(
unsigned
int
attribNum
bool
enabled
)
;
void
setVertexAttribf
(
GLuint
index
const
GLfloat
values
[
4
]
)
;
void
setVertexAttribu
(
GLuint
index
const
GLuint
values
[
4
]
)
;
void
setVertexAttribi
(
GLuint
index
const
GLint
values
[
4
]
)
;
void
setVertexAttribState
(
unsigned
int
attribNum
Buffer
*
boundBuffer
GLint
size
GLenum
type
bool
normalized
bool
pureInteger
GLsizei
stride
const
void
*
pointer
)
;
const
VertexAttribCurrentValueData
&
getVertexAttribCurrentValue
(
unsigned
int
attribNum
)
const
;
const
void
*
getVertexAttribPointer
(
unsigned
int
attribNum
)
const
;
void
setPackAlignment
(
GLint
alignment
)
;
GLint
getPackAlignment
(
)
const
;
void
setPackReverseRowOrder
(
bool
reverseRowOrder
)
;
bool
getPackReverseRowOrder
(
)
const
;
const
PixelPackState
&
getPackState
(
)
const
;
PixelPackState
&
getPackState
(
)
;
void
setUnpackAlignment
(
GLint
alignment
)
;
GLint
getUnpackAlignment
(
)
const
;
void
setUnpackRowLength
(
GLint
rowLength
)
;
GLint
getUnpackRowLength
(
)
const
;
const
PixelUnpackState
&
getUnpackState
(
)
const
;
PixelUnpackState
&
getUnpackState
(
)
;
void
getBooleanv
(
GLenum
pname
GLboolean
*
params
)
;
void
getFloatv
(
GLenum
pname
GLfloat
*
params
)
;
void
getIntegerv
(
const
gl
:
:
Data
&
data
GLenum
pname
GLint
*
params
)
;
bool
getIndexedIntegerv
(
GLenum
target
GLuint
index
GLint
*
data
)
;
bool
getIndexedInteger64v
(
GLenum
target
GLuint
index
GLint64
*
data
)
;
bool
hasMappedBuffer
(
GLenum
target
)
const
;
private
:
GLuint
mMaxDrawBuffers
;
GLuint
mMaxCombinedTextureImageUnits
;
ColorF
mColorClearValue
;
GLclampf
mDepthClearValue
;
int
mStencilClearValue
;
RasterizerState
mRasterizer
;
bool
mScissorTest
;
Rectangle
mScissor
;
BlendState
mBlend
;
ColorF
mBlendColor
;
bool
mSampleCoverage
;
GLclampf
mSampleCoverageValue
;
bool
mSampleCoverageInvert
;
DepthStencilState
mDepthStencil
;
GLint
mStencilRef
;
GLint
mStencilBackRef
;
GLfloat
mLineWidth
;
GLenum
mGenerateMipmapHint
;
GLenum
mFragmentShaderDerivativeHint
;
Rectangle
mViewport
;
float
mNearZ
;
float
mFarZ
;
BindingPointer
<
Buffer
>
mArrayBuffer
;
Framebuffer
*
mReadFramebuffer
;
Framebuffer
*
mDrawFramebuffer
;
BindingPointer
<
Renderbuffer
>
mRenderbuffer
;
Program
*
mProgram
;
typedef
std
:
:
vector
<
VertexAttribCurrentValueData
>
VertexAttribVector
;
VertexAttribVector
mVertexAttribCurrentValues
;
VertexArray
*
mVertexArray
;
size_t
mActiveSampler
;
typedef
std
:
:
vector
<
BindingPointer
<
Texture
>
>
TextureBindingVector
;
typedef
std
:
:
map
<
GLenum
TextureBindingVector
>
TextureBindingMap
;
TextureBindingMap
mSamplerTextures
;
typedef
std
:
:
vector
<
BindingPointer
<
Sampler
>
>
SamplerBindingVector
;
SamplerBindingVector
mSamplers
;
typedef
std
:
:
map
<
GLenum
BindingPointer
<
Query
>
>
ActiveQueryMap
;
ActiveQueryMap
mActiveQueries
;
BindingPointer
<
Buffer
>
mGenericUniformBuffer
;
typedef
std
:
:
vector
<
OffsetBindingPointer
<
Buffer
>
>
BufferVector
;
BufferVector
mUniformBuffers
;
BindingPointer
<
TransformFeedback
>
mTransformFeedback
;
BindingPointer
<
Buffer
>
mCopyReadBuffer
;
BindingPointer
<
Buffer
>
mCopyWriteBuffer
;
PixelUnpackState
mUnpack
;
PixelPackState
mPack
;
bool
mPrimitiveRestart
;
}
;
}
#
endif
