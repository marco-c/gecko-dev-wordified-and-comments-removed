#
ifndef
LIBANGLE_SURFACE_H_
#
define
LIBANGLE_SURFACE_H_
#
include
<
EGL
/
egl
.
h
>
#
include
"
common
/
angleutils
.
h
"
#
include
"
libANGLE
/
Error
.
h
"
#
include
"
libANGLE
/
FramebufferAttachment
.
h
"
#
include
"
libANGLE
/
RefCountObject
.
h
"
#
include
"
libANGLE
/
renderer
/
SurfaceImpl
.
h
"
namespace
gl
{
class
Framebuffer
;
class
Texture
;
}
namespace
egl
{
class
AttributeMap
;
class
Display
;
struct
Config
;
class
Surface
final
:
public
gl
:
:
FramebufferAttachmentObject
{
public
:
Surface
(
rx
:
:
SurfaceImpl
*
impl
EGLint
surfaceType
const
egl
:
:
Config
*
config
const
AttributeMap
&
attributes
)
;
rx
:
:
SurfaceImpl
*
getImplementation
(
)
{
return
mImplementation
;
}
const
rx
:
:
SurfaceImpl
*
getImplementation
(
)
const
{
return
mImplementation
;
}
EGLint
getType
(
)
const
;
Error
swap
(
)
;
Error
postSubBuffer
(
EGLint
x
EGLint
y
EGLint
width
EGLint
height
)
;
Error
querySurfacePointerANGLE
(
EGLint
attribute
void
*
*
value
)
;
Error
bindTexImage
(
gl
:
:
Texture
*
texture
EGLint
buffer
)
;
Error
releaseTexImage
(
EGLint
buffer
)
;
EGLint
isPostSubBufferSupported
(
)
const
;
void
setSwapInterval
(
EGLint
interval
)
;
void
setIsCurrent
(
bool
isCurrent
)
;
void
onDestroy
(
)
;
const
Config
*
getConfig
(
)
const
;
EGLint
getWidth
(
)
const
;
EGLint
getHeight
(
)
const
;
EGLint
getPixelAspectRatio
(
)
const
;
EGLenum
getRenderBuffer
(
)
const
;
EGLenum
getSwapBehavior
(
)
const
;
EGLenum
getTextureFormat
(
)
const
;
EGLenum
getTextureTarget
(
)
const
;
gl
:
:
Texture
*
getBoundTexture
(
)
const
{
return
mTexture
.
get
(
)
;
}
gl
:
:
Framebuffer
*
getDefaultFramebuffer
(
)
{
return
mDefaultFramebuffer
;
}
EGLint
isFixedSize
(
)
const
;
gl
:
:
Extents
getAttachmentSize
(
const
gl
:
:
FramebufferAttachment
:
:
Target
&
target
)
const
override
;
GLenum
getAttachmentInternalFormat
(
const
gl
:
:
FramebufferAttachment
:
:
Target
&
target
)
const
override
;
GLsizei
getAttachmentSamples
(
const
gl
:
:
FramebufferAttachment
:
:
Target
&
target
)
const
override
;
void
onAttach
(
)
override
{
}
void
onDetach
(
)
override
{
}
GLuint
getId
(
)
const
override
;
bool
flexibleSurfaceCompatibilityRequested
(
)
const
{
return
mFlexibleSurfaceCompatibilityRequested
;
}
EGLint
getOrientation
(
)
const
{
return
mOrientation
;
}
bool
directComposition
(
)
const
{
return
mDirectComposition
;
}
private
:
virtual
~
Surface
(
)
;
rx
:
:
FramebufferAttachmentObjectImpl
*
getAttachmentImpl
(
)
const
override
{
return
mImplementation
;
}
gl
:
:
Framebuffer
*
createDefaultFramebuffer
(
)
;
friend
class
gl
:
:
Texture
;
void
releaseTexImageFromTexture
(
)
;
rx
:
:
SurfaceImpl
*
mImplementation
;
gl
:
:
Framebuffer
*
mDefaultFramebuffer
;
int
mCurrentCount
;
bool
mDestroyed
;
EGLint
mType
;
const
egl
:
:
Config
*
mConfig
;
bool
mPostSubBufferRequested
;
bool
mFlexibleSurfaceCompatibilityRequested
;
bool
mFixedSize
;
size_t
mFixedWidth
;
size_t
mFixedHeight
;
bool
mDirectComposition
;
EGLenum
mTextureFormat
;
EGLenum
mTextureTarget
;
EGLint
mPixelAspectRatio
;
EGLenum
mRenderBuffer
;
EGLenum
mSwapBehavior
;
EGLint
mOrientation
;
BindingPointer
<
gl
:
:
Texture
>
mTexture
;
}
;
}
#
endif
