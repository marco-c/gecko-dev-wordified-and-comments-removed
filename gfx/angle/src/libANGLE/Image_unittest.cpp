#
include
"
gmock
/
gmock
.
h
"
#
include
"
gtest
/
gtest
.
h
"
#
include
"
libANGLE
/
Image
.
h
"
#
include
"
libANGLE
/
Texture
.
h
"
#
include
"
libANGLE
/
Renderbuffer
.
h
"
#
include
"
libANGLE
/
renderer
/
ImageImpl_mock
.
h
"
#
include
"
libANGLE
/
renderer
/
TextureImpl_mock
.
h
"
#
include
"
libANGLE
/
renderer
/
RenderbufferImpl_mock
.
h
"
#
include
"
tests
/
angle_unittests_utils
.
h
"
using
:
:
testing
:
:
_
;
using
:
:
testing
:
:
NiceMock
;
using
:
:
testing
:
:
Return
;
namespace
angle
{
TEST
(
ImageTest
RefCounting
)
{
NiceMock
<
rx
:
:
MockGLFactory
>
mockFactory
;
rx
:
:
MockTextureImpl
*
textureImpl
=
new
rx
:
:
MockTextureImpl
(
)
;
EXPECT_CALL
(
mockFactory
createTexture
(
_
)
)
.
WillOnce
(
Return
(
textureImpl
)
)
;
gl
:
:
Texture
*
texture
=
new
gl
:
:
Texture
(
&
mockFactory
1
GL_TEXTURE_2D
)
;
texture
-
>
addRef
(
)
;
rx
:
:
MockImageImpl
*
imageImpl
=
new
rx
:
:
MockImageImpl
(
)
;
egl
:
:
Image
*
image
=
new
egl
:
:
Image
(
imageImpl
EGL_GL_TEXTURE_2D
texture
egl
:
:
AttributeMap
(
)
)
;
image
-
>
addRef
(
)
;
EXPECT_EQ
(
texture
-
>
getRefCount
(
)
2u
)
;
EXPECT_EQ
(
image
-
>
getRefCount
(
)
1u
)
;
rx
:
:
MockRenderbufferImpl
*
renderbufferImpl
=
new
rx
:
:
MockRenderbufferImpl
(
)
;
gl
:
:
Renderbuffer
*
renderbuffer
=
new
gl
:
:
Renderbuffer
(
renderbufferImpl
1
)
;
renderbuffer
-
>
addRef
(
)
;
EXPECT_CALL
(
*
renderbufferImpl
setStorageEGLImageTarget
(
_
)
)
.
WillOnce
(
Return
(
gl
:
:
Error
(
GL_NO_ERROR
)
)
)
.
RetiresOnSaturation
(
)
;
renderbuffer
-
>
setStorageEGLImageTarget
(
image
)
;
EXPECT_EQ
(
texture
-
>
getRefCount
(
)
2u
)
;
EXPECT_EQ
(
image
-
>
getRefCount
(
)
2u
)
;
EXPECT_EQ
(
renderbuffer
-
>
getRefCount
(
)
1u
)
;
texture
-
>
release
(
)
;
EXPECT_EQ
(
texture
-
>
getRefCount
(
)
1u
)
;
EXPECT_EQ
(
image
-
>
getRefCount
(
)
2u
)
;
EXPECT_EQ
(
renderbuffer
-
>
getRefCount
(
)
1u
)
;
image
-
>
release
(
)
;
EXPECT_EQ
(
texture
-
>
getRefCount
(
)
1u
)
;
EXPECT_EQ
(
image
-
>
getRefCount
(
)
1u
)
;
EXPECT_EQ
(
renderbuffer
-
>
getRefCount
(
)
1u
)
;
EXPECT_CALL
(
*
imageImpl
destructor
(
)
)
.
Times
(
1
)
.
RetiresOnSaturation
(
)
;
EXPECT_CALL
(
*
imageImpl
orphan
(
_
)
)
.
WillOnce
(
Return
(
gl
:
:
Error
(
GL_NO_ERROR
)
)
)
.
RetiresOnSaturation
(
)
;
EXPECT_CALL
(
*
textureImpl
destructor
(
)
)
.
Times
(
1
)
.
RetiresOnSaturation
(
)
;
EXPECT_CALL
(
*
renderbufferImpl
destructor
(
)
)
.
Times
(
1
)
.
RetiresOnSaturation
(
)
;
renderbuffer
-
>
release
(
)
;
}
TEST
(
ImageTest
RespecificationReleasesReferences
)
{
NiceMock
<
rx
:
:
MockGLFactory
>
mockFactory
;
rx
:
:
MockTextureImpl
*
textureImpl
=
new
rx
:
:
MockTextureImpl
(
)
;
EXPECT_CALL
(
mockFactory
createTexture
(
_
)
)
.
WillOnce
(
Return
(
textureImpl
)
)
;
gl
:
:
Texture
*
texture
=
new
gl
:
:
Texture
(
&
mockFactory
1
GL_TEXTURE_2D
)
;
texture
-
>
addRef
(
)
;
gl
:
:
PixelUnpackState
defaultUnpackState
;
EXPECT_CALL
(
*
textureImpl
setImage
(
_
_
_
_
_
_
_
_
)
)
.
WillOnce
(
Return
(
gl
:
:
Error
(
GL_NO_ERROR
)
)
)
.
RetiresOnSaturation
(
)
;
texture
-
>
setImage
(
defaultUnpackState
GL_TEXTURE_2D
0
GL_RGBA8
gl
:
:
Extents
(
1
1
1
)
GL_RGBA
GL_UNSIGNED_BYTE
nullptr
)
;
rx
:
:
MockImageImpl
*
imageImpl
=
new
rx
:
:
MockImageImpl
(
)
;
egl
:
:
Image
*
image
=
new
egl
:
:
Image
(
imageImpl
EGL_GL_TEXTURE_2D
texture
egl
:
:
AttributeMap
(
)
)
;
image
-
>
addRef
(
)
;
EXPECT_EQ
(
texture
-
>
getRefCount
(
)
2u
)
;
EXPECT_EQ
(
image
-
>
getRefCount
(
)
1u
)
;
EXPECT_CALL
(
*
imageImpl
orphan
(
_
)
)
.
WillOnce
(
Return
(
gl
:
:
Error
(
GL_NO_ERROR
)
)
)
.
RetiresOnSaturation
(
)
;
EXPECT_CALL
(
*
textureImpl
setImage
(
_
_
_
_
_
_
_
_
)
)
.
WillOnce
(
Return
(
gl
:
:
Error
(
GL_NO_ERROR
)
)
)
.
RetiresOnSaturation
(
)
;
texture
-
>
setImage
(
defaultUnpackState
GL_TEXTURE_2D
0
GL_RGBA8
gl
:
:
Extents
(
1
1
1
)
GL_RGBA
GL_UNSIGNED_BYTE
nullptr
)
;
EXPECT_EQ
(
texture
-
>
getRefCount
(
)
1u
)
;
EXPECT_EQ
(
image
-
>
getRefCount
(
)
1u
)
;
EXPECT_CALL
(
*
textureImpl
destructor
(
)
)
.
Times
(
1
)
.
RetiresOnSaturation
(
)
;
texture
-
>
release
(
)
;
EXPECT_EQ
(
image
-
>
getRefCount
(
)
1u
)
;
EXPECT_CALL
(
*
imageImpl
destructor
(
)
)
.
Times
(
1
)
.
RetiresOnSaturation
(
)
;
image
-
>
release
(
)
;
}
}
