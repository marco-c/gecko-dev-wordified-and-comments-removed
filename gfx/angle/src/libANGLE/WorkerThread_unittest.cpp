#
include
<
array
>
#
include
<
gtest
/
gtest
.
h
>
#
include
"
libANGLE
/
WorkerThread
.
h
"
using
namespace
angle
;
namespace
{
template
<
typename
T
>
class
WorkerPoolTest
:
public
:
:
testing
:
:
Test
{
public
:
T
workerPool
=
{
4
}
;
}
;
#
if
(
ANGLE_STD_ASYNC_WORKERS
=
=
ANGLE_ENABLED
)
using
WorkerPoolTypes
=
:
:
testing
:
:
Types
<
priv
:
:
AsyncWorkerPool
priv
:
:
SingleThreadedWorkerPool
>
;
#
else
using
WorkerPoolTypes
=
:
:
testing
:
:
Types
<
priv
:
:
SingleThreadedWorkerPool
>
;
#
endif
TYPED_TEST_CASE
(
WorkerPoolTest
WorkerPoolTypes
)
;
TYPED_TEST
(
WorkerPoolTest
SimpleTask
)
{
class
TestTask
:
public
Closure
{
public
:
void
operator
(
)
(
)
override
{
fired
=
true
;
}
bool
fired
=
false
;
}
;
std
:
:
array
<
TestTask
4
>
tasks
;
std
:
:
array
<
typename
TypeParam
:
:
WaitableEventType
4
>
waitables
=
{
{
this
-
>
workerPool
.
postWorkerTask
(
&
tasks
[
0
]
)
this
-
>
workerPool
.
postWorkerTask
(
&
tasks
[
1
]
)
this
-
>
workerPool
.
postWorkerTask
(
&
tasks
[
2
]
)
this
-
>
workerPool
.
postWorkerTask
(
&
tasks
[
3
]
)
}
}
;
TypeParam
:
:
WaitableEventType
:
:
WaitMany
(
&
waitables
)
;
for
(
const
auto
&
task
:
tasks
)
{
EXPECT_TRUE
(
task
.
fired
)
;
}
}
}
