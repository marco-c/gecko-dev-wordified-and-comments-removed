#
include
"
libANGLE
/
SizedMRUCache
.
h
"
#
include
<
gtest
/
gtest
.
h
>
namespace
angle
{
using
Blob
=
std
:
:
vector
<
uint8_t
>
;
Blob
MakeBlob
(
size_t
size
)
{
Blob
blob
;
for
(
uint8_t
value
=
0
;
value
<
size
;
+
+
value
)
{
blob
.
push_back
(
value
)
;
}
return
blob
;
}
TEST
(
SizedMRUCacheTest
MaxSizedValue
)
{
constexpr
size_t
kSize
=
32
;
SizedMRUCache
<
std
:
:
string
Blob
>
sizedCache
(
kSize
)
;
EXPECT_TRUE
(
sizedCache
.
put
(
"
test
"
MakeBlob
(
kSize
)
kSize
)
)
;
EXPECT_EQ
(
32u
sizedCache
.
size
(
)
)
;
EXPECT_FALSE
(
sizedCache
.
empty
(
)
)
;
EXPECT_TRUE
(
sizedCache
.
put
(
"
test2
"
MakeBlob
(
kSize
)
kSize
)
)
;
EXPECT_EQ
(
32u
sizedCache
.
size
(
)
)
;
EXPECT_FALSE
(
sizedCache
.
empty
(
)
)
;
const
Blob
*
blob
=
nullptr
;
EXPECT_FALSE
(
sizedCache
.
get
(
"
test
"
&
blob
)
)
;
sizedCache
.
clear
(
)
;
EXPECT_TRUE
(
sizedCache
.
empty
(
)
)
;
}
TEST
(
SizedMRUCacheTest
ManySmallValues
)
{
constexpr
size_t
kSize
=
32
;
SizedMRUCache
<
size_t
size_t
>
sizedCache
(
kSize
)
;
for
(
size_t
value
=
0
;
value
<
kSize
;
+
+
value
)
{
EXPECT_TRUE
(
sizedCache
.
put
(
value
std
:
:
move
(
value
)
1
)
)
;
const
size_t
*
qvalue
=
nullptr
;
EXPECT_TRUE
(
sizedCache
.
get
(
value
&
qvalue
)
)
;
if
(
qvalue
)
{
EXPECT_EQ
(
value
*
qvalue
)
;
}
}
EXPECT_EQ
(
32u
sizedCache
.
size
(
)
)
;
EXPECT_FALSE
(
sizedCache
.
empty
(
)
)
;
EXPECT_TRUE
(
sizedCache
.
put
(
kSize
std
:
:
move
(
static_cast
<
int
>
(
kSize
)
)
1
)
)
;
const
size_t
*
qvalue
=
nullptr
;
EXPECT_FALSE
(
sizedCache
.
get
(
0
&
qvalue
)
)
;
EXPECT_TRUE
(
sizedCache
.
put
(
kSize
+
1
kSize
+
1
kSize
)
)
;
EXPECT_EQ
(
32u
sizedCache
.
size
(
)
)
;
EXPECT_FALSE
(
sizedCache
.
empty
(
)
)
;
for
(
size_t
value
=
0
;
value
<
=
kSize
;
+
+
value
)
{
EXPECT_FALSE
(
sizedCache
.
get
(
value
&
qvalue
)
)
;
}
EXPECT_TRUE
(
sizedCache
.
get
(
kSize
+
1
&
qvalue
)
)
;
if
(
qvalue
)
{
EXPECT_EQ
(
kSize
+
1
*
qvalue
)
;
}
for
(
size_t
value
=
0
;
value
<
kSize
*
10
;
+
+
value
)
{
EXPECT_TRUE
(
sizedCache
.
put
(
value
std
:
:
move
(
value
)
1
)
)
;
}
EXPECT_EQ
(
32u
sizedCache
.
size
(
)
)
;
}
TEST
(
SizedMRUCacheTest
OversizeValue
)
{
constexpr
size_t
kSize
=
32
;
SizedMRUCache
<
size_t
size_t
>
sizedCache
(
kSize
)
;
EXPECT_FALSE
(
sizedCache
.
put
(
5
5
100
)
)
;
}
}
