#
ifndef
LIBANGLE_STREAM_H_
#
define
LIBANGLE_STREAM_H_
#
include
<
array
>
#
include
<
EGL
/
egl
.
h
>
#
include
<
EGL
/
eglext
.
h
>
#
include
"
common
/
angleutils
.
h
"
#
include
"
libANGLE
/
AttributeMap
.
h
"
namespace
rx
{
class
StreamProducerImpl
;
}
namespace
gl
{
class
Context
;
class
Texture
;
}
namespace
egl
{
class
Display
;
class
Error
;
class
Stream
final
:
angle
:
:
NonCopyable
{
public
:
Stream
(
Display
*
display
const
AttributeMap
&
attribs
)
;
~
Stream
(
)
;
enum
class
ConsumerType
{
NoConsumer
GLTextureRGB
GLTextureYUV
}
;
enum
class
ProducerType
{
NoProducer
D3D11TextureNV12
}
;
struct
GLTextureDescription
{
unsigned
int
width
;
unsigned
int
height
;
unsigned
int
internalFormat
;
unsigned
int
mipLevels
;
}
;
EGLenum
getState
(
)
const
;
void
setConsumerLatency
(
EGLint
latency
)
;
EGLint
getConsumerLatency
(
)
const
;
EGLuint64KHR
getProducerFrame
(
)
const
;
EGLuint64KHR
getConsumerFrame
(
)
const
;
void
setConsumerAcquireTimeout
(
EGLint
timeout
)
;
EGLint
getConsumerAcquireTimeout
(
)
const
;
ConsumerType
getConsumerType
(
)
const
;
ProducerType
getProducerType
(
)
const
;
EGLint
getPlaneCount
(
)
const
;
rx
:
:
StreamProducerImpl
*
getImplementation
(
)
;
Error
createConsumerGLTextureExternal
(
const
AttributeMap
&
attributes
gl
:
:
Context
*
context
)
;
Error
createProducerD3D11TextureNV12
(
const
AttributeMap
&
attributes
)
;
Error
consumerAcquire
(
)
;
Error
consumerRelease
(
)
;
bool
isConsumerBoundToContext
(
const
gl
:
:
Context
*
context
)
const
;
Error
validateD3D11NV12Texture
(
void
*
texture
const
AttributeMap
&
attributes
)
const
;
Error
postD3D11NV12Texture
(
void
*
texture
const
AttributeMap
&
attributes
)
;
private
:
Display
*
mDisplay
;
rx
:
:
StreamProducerImpl
*
mProducerImplementation
;
gl
:
:
Context
*
mContext
;
EGLint
mState
;
EGLuint64KHR
mProducerFrame
;
EGLuint64KHR
mConsumerFrame
;
EGLint
mConsumerLatency
;
EGLint
mConsumerAcquireTimeout
;
EGLint
mPlaneCount
;
struct
PlaneTexture
{
EGLint
textureUnit
;
gl
:
:
Texture
*
texture
;
}
;
std
:
:
array
<
PlaneTexture
3
>
mPlanes
;
ConsumerType
mConsumerType
;
ProducerType
mProducerType
;
friend
class
gl
:
:
Texture
;
void
releaseTextures
(
)
;
}
;
}
#
endif
