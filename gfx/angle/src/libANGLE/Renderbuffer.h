#
ifndef
LIBANGLE_RENDERBUFFER_H_
#
define
LIBANGLE_RENDERBUFFER_H_
#
include
"
angle_gl
.
h
"
#
include
"
common
/
angleutils
.
h
"
#
include
"
libANGLE
/
Debug
.
h
"
#
include
"
libANGLE
/
Error
.
h
"
#
include
"
libANGLE
/
FramebufferAttachment
.
h
"
#
include
"
libANGLE
/
Image
.
h
"
#
include
"
libANGLE
/
formatutils
.
h
"
#
include
"
libANGLE
/
renderer
/
RenderbufferImpl
.
h
"
namespace
gl
{
class
Renderbuffer
final
:
public
egl
:
:
ImageSibling
public
LabeledObject
{
public
:
Renderbuffer
(
rx
:
:
RenderbufferImpl
*
impl
GLuint
id
)
;
virtual
~
Renderbuffer
(
)
;
Error
onDestroy
(
const
Context
*
context
)
override
;
void
setLabel
(
const
std
:
:
string
&
label
)
override
;
const
std
:
:
string
&
getLabel
(
)
const
override
;
Error
setStorage
(
const
Context
*
context
GLenum
internalformat
size_t
width
size_t
height
)
;
Error
setStorageMultisample
(
const
Context
*
context
size_t
samples
GLenum
internalformat
size_t
width
size_t
height
)
;
Error
setStorageEGLImageTarget
(
const
Context
*
context
egl
:
:
Image
*
imageTarget
)
;
rx
:
:
RenderbufferImpl
*
getImplementation
(
)
const
;
GLsizei
getWidth
(
)
const
;
GLsizei
getHeight
(
)
const
;
const
Format
&
getFormat
(
)
const
;
GLsizei
getSamples
(
)
const
;
GLuint
getRedSize
(
)
const
;
GLuint
getGreenSize
(
)
const
;
GLuint
getBlueSize
(
)
const
;
GLuint
getAlphaSize
(
)
const
;
GLuint
getDepthSize
(
)
const
;
GLuint
getStencilSize
(
)
const
;
Extents
getAttachmentSize
(
const
ImageIndex
&
imageIndex
)
const
override
;
const
Format
&
getAttachmentFormat
(
GLenum
const
ImageIndex
&
)
const
override
{
return
getFormat
(
)
;
}
GLsizei
getAttachmentSamples
(
const
ImageIndex
&
)
const
override
{
return
getSamples
(
)
;
}
void
onAttach
(
const
Context
*
context
)
override
;
void
onDetach
(
const
Context
*
context
)
override
;
GLuint
getId
(
)
const
override
;
private
:
rx
:
:
FramebufferAttachmentObjectImpl
*
getAttachmentImpl
(
)
const
override
{
return
mRenderbuffer
;
}
rx
:
:
RenderbufferImpl
*
mRenderbuffer
;
std
:
:
string
mLabel
;
GLsizei
mWidth
;
GLsizei
mHeight
;
Format
mFormat
;
GLsizei
mSamples
;
}
;
}
#
endif
