#
include
"
gpu_info_util
/
SystemInfo_internal
.
h
"
#
include
<
gtest
/
gtest
.
h
>
using
namespace
angle
;
namespace
{
TEST
(
SystemInfoTest
AMDBrahmaVersionParsing
)
{
std
:
:
string
version
;
ASSERT_FALSE
(
ParseAMDBrahmaDriverVersion
(
"
I
am
a
lumberjack
.
"
&
version
)
)
;
ASSERT_EQ
(
"
"
version
)
;
ASSERT_TRUE
(
ParseAMDBrahmaDriverVersion
(
"
42
"
&
version
)
)
;
ASSERT_EQ
(
"
42
"
version
)
;
ASSERT_TRUE
(
ParseAMDBrahmaDriverVersion
(
"
42
.
0
.
56
"
&
version
)
)
;
ASSERT_EQ
(
"
42
.
0
.
56
"
version
)
;
ASSERT_TRUE
(
ParseAMDBrahmaDriverVersion
(
"
Version
=
42
.
0
.
56
"
&
version
)
)
;
ASSERT_EQ
(
"
42
.
0
.
56
"
version
)
;
ASSERT_TRUE
(
ParseAMDBrahmaDriverVersion
(
"
42
.
0
.
56
is
the
version
"
&
version
)
)
;
ASSERT_EQ
(
"
42
.
0
.
56
"
version
)
;
ASSERT_TRUE
(
ParseAMDBrahmaDriverVersion
(
"
42
.
0
.
56
is
the
version
111
"
&
version
)
)
;
ASSERT_EQ
(
"
42
.
0
.
56
"
version
)
;
}
TEST
(
SystemInfoTest
AMDCatalystVersionParsing
)
{
std
:
:
string
version
;
ASSERT_FALSE
(
ParseAMDCatalystDriverVersion
(
"
I
am
a
lumberjack
.
\
nReleaseVersion
=
"
&
version
)
)
;
ASSERT_EQ
(
"
"
version
)
;
ASSERT_FALSE
(
ParseAMDCatalystDriverVersion
(
"
11
\
nReleaseVersion
=
\
n12
"
&
version
)
)
;
ASSERT_EQ
(
"
"
version
)
;
ASSERT_TRUE
(
ParseAMDCatalystDriverVersion
(
"
ReleaseVersion
=
42
.
0
.
56
"
&
version
)
)
;
ASSERT_EQ
(
"
42
.
0
.
56
"
version
)
;
ASSERT_TRUE
(
ParseAMDCatalystDriverVersion
(
"
11
\
nReleaseVersion
=
42
.
0
.
56
\
n12
"
&
version
)
)
;
ASSERT_EQ
(
"
42
.
0
.
56
"
version
)
;
ASSERT_TRUE
(
ParseAMDCatalystDriverVersion
(
"
ReleaseVersion
=
42
.
0
.
56
\
nReleaseVersion
=
0
"
&
version
)
)
;
ASSERT_EQ
(
"
42
.
0
.
56
"
version
)
;
ASSERT_TRUE
(
ParseAMDCatalystDriverVersion
(
"
ReleaseVersion
=
version
is
42
.
0
.
56
"
&
version
)
)
;
ASSERT_EQ
(
"
42
.
0
.
56
"
version
)
;
ASSERT_TRUE
(
ParseAMDCatalystDriverVersion
(
"
ReleaseVersion
=
42
.
0
.
56
is
the
version
"
&
version
)
)
;
ASSERT_EQ
(
"
42
.
0
.
56
"
version
)
;
}
TEST
(
SystemInfoTest
MacMachineModelParsing
)
{
std
:
:
string
model
;
int32_t
major
=
1
minor
=
2
;
EXPECT_FALSE
(
ParseMacMachineModel
(
"
"
&
model
&
major
&
minor
)
)
;
EXPECT_EQ
(
0U
model
.
length
(
)
)
;
EXPECT_EQ
(
1
major
)
;
EXPECT_EQ
(
2
minor
)
;
EXPECT_FALSE
(
ParseMacMachineModel
(
"
FooBar
"
&
model
&
major
&
minor
)
)
;
EXPECT_TRUE
(
ParseMacMachineModel
(
"
MacPro4
1
"
&
model
&
major
&
minor
)
)
;
EXPECT_EQ
(
"
MacPro
"
model
)
;
EXPECT_EQ
(
4
major
)
;
EXPECT_EQ
(
1
minor
)
;
EXPECT_TRUE
(
ParseMacMachineModel
(
"
MacBookPro6
2
"
&
model
&
major
&
minor
)
)
;
EXPECT_EQ
(
"
MacBookPro
"
model
)
;
EXPECT_EQ
(
6
major
)
;
EXPECT_EQ
(
2
minor
)
;
}
TEST
(
SystemInfoTest
CMDeviceIDToDeviceAndVendorID
)
{
uint32_t
vendor
=
0
;
uint32_t
device
=
0
;
EXPECT_TRUE
(
CMDeviceIDToDeviceAndVendorID
(
"
PCI
\
\
VEN_10DE
&
DEV_0FFA
&
SUBSYS_094B10DE
&
REV_A1
\
\
4
&
95673C
&
0
&
0018
"
&
vendor
&
device
)
)
;
EXPECT_EQ
(
0x10deu
vendor
)
;
EXPECT_EQ
(
0x0ffau
device
)
;
EXPECT_TRUE
(
CMDeviceIDToDeviceAndVendorID
(
"
PCI
\
\
VEN_10DE
&
DEV_0FFA
"
&
vendor
&
device
)
)
;
EXPECT_EQ
(
0x10deu
vendor
)
;
EXPECT_EQ
(
0x0ffau
device
)
;
EXPECT_FALSE
(
CMDeviceIDToDeviceAndVendorID
(
"
\
\
VEN_10DE
&
DEV_0FFA
"
&
vendor
&
device
)
)
;
EXPECT_EQ
(
0u
vendor
)
;
EXPECT_EQ
(
0u
device
)
;
EXPECT_FALSE
(
CMDeviceIDToDeviceAndVendorID
(
"
PCI
\
\
VEN_XXXX
&
DEV_XXXX
"
&
vendor
&
device
)
)
;
EXPECT_EQ
(
0u
vendor
)
;
EXPECT_EQ
(
0u
device
)
;
}
}
