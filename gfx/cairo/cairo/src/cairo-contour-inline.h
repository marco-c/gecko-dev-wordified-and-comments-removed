#
ifndef
CAIRO_CONTOUR_INLINE_H
#
define
CAIRO_CONTOUR_INLINE_H
#
include
"
cairo
-
contour
-
private
.
h
"
CAIRO_BEGIN_DECLS
static
inline
cairo_int_status_t
_cairo_contour_add_point
(
cairo_contour_t
*
contour
const
cairo_point_t
*
point
)
{
struct
_cairo_contour_chain
*
tail
=
contour
-
>
tail
;
if
(
unlikely
(
tail
-
>
num_points
=
=
tail
-
>
size_points
)
)
return
__cairo_contour_add_point
(
contour
point
)
;
tail
-
>
points
[
tail
-
>
num_points
+
+
]
=
*
point
;
return
CAIRO_INT_STATUS_SUCCESS
;
}
static
inline
cairo_point_t
*
_cairo_contour_first_point
(
cairo_contour_t
*
c
)
{
return
&
c
-
>
chain
.
points
[
0
]
;
}
static
inline
cairo_point_t
*
_cairo_contour_last_point
(
cairo_contour_t
*
c
)
{
return
&
c
-
>
tail
-
>
points
[
c
-
>
tail
-
>
num_points
-
1
]
;
}
static
inline
void
_cairo_contour_remove_last_point
(
cairo_contour_t
*
contour
)
{
if
(
contour
-
>
chain
.
num_points
=
=
0
)
return
;
if
(
-
-
contour
-
>
tail
-
>
num_points
=
=
0
)
__cairo_contour_remove_last_chain
(
contour
)
;
}
CAIRO_END_DECLS
#
endif
