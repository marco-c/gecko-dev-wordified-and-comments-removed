#
ifndef
CAIRO_TAG_STACK_PRIVATE_H
#
define
CAIRO_TAG_STACK_PRIVATE_H
#
include
"
cairo
-
error
-
private
.
h
"
#
include
"
cairo
-
list
-
inline
.
h
"
typedef
enum
{
TAG_TYPE_INVALID
=
0
TAG_TYPE_STRUCTURE
=
1
TAG_TYPE_LINK
=
2
TAG_TYPE_DEST
=
4
TAG_TYPE_CONTENT
=
8
TAG_TYPE_CONTENT_REF
=
16
TAG_TYPE_ARTIFACT
=
16
}
cairo_tag_type_t
;
typedef
enum
_cairo_tag_stack_structure_type
{
TAG_TREE_TYPE_TAGGED
TAG_TREE_TYPE_STRUCTURE
TAG_TREE_TYPE_LINK_ONLY
TAG_TREE_TYPE_NO_TAGS
TAG_TREE_TYPE_INVALID
}
cairo_tag_stack_structure_type_t
;
typedef
struct
_cairo_tag_stack_elem
{
char
*
name
;
char
*
attributes
;
void
*
data
;
cairo_list_t
link
;
}
cairo_tag_stack_elem_t
;
typedef
struct
_cairo_tag_stack
{
cairo_list_t
list
;
cairo_tag_stack_structure_type_t
type
;
int
size
;
}
cairo_tag_stack_t
;
cairo_private
void
_cairo_tag_stack_init
(
cairo_tag_stack_t
*
stack
)
;
cairo_private
void
_cairo_tag_stack_fini
(
cairo_tag_stack_t
*
stack
)
;
cairo_private
cairo_tag_stack_structure_type_t
_cairo_tag_stack_get_structure_type
(
cairo_tag_stack_t
*
stack
)
;
cairo_private
cairo_int_status_t
_cairo_tag_stack_push
(
cairo_tag_stack_t
*
stack
const
char
*
name
const
char
*
attributes
)
;
cairo_private
void
_cairo_tag_stack_set_top_data
(
cairo_tag_stack_t
*
stack
void
*
data
)
;
cairo_private
cairo_int_status_t
_cairo_tag_stack_pop
(
cairo_tag_stack_t
*
stack
const
char
*
name
cairo_tag_stack_elem_t
*
*
elem
)
;
cairo_private
cairo_tag_stack_elem_t
*
_cairo_tag_stack_top_elem
(
cairo_tag_stack_t
*
stack
)
;
cairo_private
void
_cairo_tag_stack_foreach
(
cairo_tag_stack_t
*
stack
void
(
*
func
)
(
cairo_tag_stack_elem_t
*
elem
void
*
closure
)
void
*
closure
)
;
cairo_private
void
_cairo_tag_stack_free_elem
(
cairo_tag_stack_elem_t
*
elem
)
;
cairo_private
cairo_tag_type_t
_cairo_tag_get_type
(
const
char
*
name
)
;
cairo_private
cairo_status_t
_cairo_tag_error
(
const
char
*
fmt
.
.
.
)
CAIRO_PRINTF_FORMAT
(
1
2
)
;
cairo_private
void
_cairo_tag_warning
(
const
char
*
fmt
.
.
.
)
CAIRO_PRINTF_FORMAT
(
1
2
)
;
#
endif
