#
ifndef
CAIRO_MALLOC_PRIVATE_H
#
define
CAIRO_MALLOC_PRIVATE_H
#
include
"
cairo
-
wideint
-
private
.
h
"
#
include
<
stdlib
.
h
>
#
if
HAVE_MEMFAULT
#
include
<
memfault
.
h
>
#
define
CAIRO_INJECT_FAULT
(
)
MEMFAULT_INJECT_FAULT
(
)
#
else
#
define
CAIRO_INJECT_FAULT
(
)
0
#
endif
#
define
_cairo_malloc
(
size
)
\
(
(
size
)
!
=
0
?
malloc
(
size
)
:
NULL
)
static
cairo_always_inline
void
*
_cairo_malloc_ab
(
size_t
a
size_t
size
)
{
size_t
c
;
if
(
_cairo_mul_size_t_overflow
(
a
size
&
c
)
)
return
NULL
;
return
_cairo_malloc
(
c
)
;
}
static
cairo_always_inline
void
*
_cairo_realloc_ab
(
void
*
ptr
size_t
a
size_t
size
)
{
size_t
c
;
if
(
_cairo_mul_size_t_overflow
(
a
size
&
c
)
)
return
NULL
;
return
realloc
(
ptr
c
)
;
}
static
cairo_always_inline
void
*
_cairo_malloc_abc
(
size_t
a
size_t
b
size_t
size
)
{
size_t
c
d
;
if
(
_cairo_mul_size_t_overflow
(
a
b
&
c
)
)
return
NULL
;
if
(
_cairo_mul_size_t_overflow
(
c
size
&
d
)
)
return
NULL
;
return
_cairo_malloc
(
d
)
;
}
static
cairo_always_inline
void
*
_cairo_malloc_ab_plus_c
(
size_t
a
size_t
size
size_t
c
)
{
size_t
d
e
;
if
(
_cairo_mul_size_t_overflow
(
a
size
&
d
)
)
return
NULL
;
if
(
_cairo_add_size_t_overflow
(
d
c
&
e
)
)
return
NULL
;
return
_cairo_malloc
(
e
)
;
}
#
endif
