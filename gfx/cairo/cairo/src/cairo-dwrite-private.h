#
include
<
dwrite
.
h
>
#
include
<
D2d1
.
h
>
typedef
HRESULT
(
WINAPI
*
DWriteCreateFactoryFunc
)
(
__in
DWRITE_FACTORY_TYPE
factoryType
__in
REFIID
iid
__out
IUnknown
*
*
factory
)
;
class
DWriteFactory
{
public
:
static
IDWriteFactory
*
Instance
(
)
{
if
(
!
mFactoryInstance
)
{
DWriteCreateFactoryFunc
createDWriteFactory
=
(
DWriteCreateFactoryFunc
)
GetProcAddress
(
LoadLibraryW
(
L
"
dwrite
.
dll
"
)
"
DWriteCreateFactory
"
)
;
if
(
createDWriteFactory
)
{
HRESULT
hr
=
createDWriteFactory
(
DWRITE_FACTORY_TYPE_SHARED
__uuidof
(
IDWriteFactory
)
reinterpret_cast
<
IUnknown
*
*
>
(
&
mFactoryInstance
)
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
}
}
return
mFactoryInstance
;
}
static
IDWriteFontCollection
*
SystemCollection
(
)
{
if
(
!
mSystemCollection
)
{
if
(
Instance
(
)
)
{
HRESULT
hr
=
Instance
(
)
-
>
GetSystemFontCollection
(
&
mSystemCollection
)
;
assert
(
SUCCEEDED
(
hr
)
)
;
}
}
return
mSystemCollection
;
}
static
IDWriteFontFamily
*
FindSystemFontFamily
(
const
WCHAR
*
aFamilyName
)
{
UINT32
idx
;
BOOL
found
;
if
(
!
SystemCollection
(
)
)
{
return
NULL
;
}
SystemCollection
(
)
-
>
FindFamilyName
(
aFamilyName
&
idx
&
found
)
;
if
(
!
found
)
{
return
NULL
;
}
IDWriteFontFamily
*
family
;
SystemCollection
(
)
-
>
GetFontFamily
(
idx
&
family
)
;
return
family
;
}
private
:
static
IDWriteFactory
*
mFactoryInstance
;
static
IDWriteFontCollection
*
mSystemCollection
;
}
;
struct
_cairo_dwrite_font_face
{
cairo_font_face_t
base
;
IDWriteFont
*
font
;
IDWriteFontFace
*
dwriteface
;
}
;
typedef
struct
_cairo_dwrite_font_face
cairo_dwrite_font_face_t
;
struct
_cairo_dwrite_scaled_font
{
cairo_scaled_font_t
base
;
cairo_matrix_t
mat
;
cairo_matrix_t
mat_inverse
;
cairo_antialias_t
antialias_mode
;
DWRITE_MEASURING_MODE
measuring_mode
;
cairo_bool_t
manual_show_glyphs_allowed
;
}
;
typedef
struct
_cairo_dwrite_scaled_font
cairo_dwrite_scaled_font_t
;
DWRITE_MATRIX
_cairo_dwrite_matrix_from_matrix
(
const
cairo_matrix_t
*
matrix
)
;
void
_cairo_dwrite_glyph_run_from_glyphs
(
cairo_glyph_t
*
glyphs
int
num_glyphs
cairo_dwrite_scaled_font_t
*
scaled_font
DWRITE_GLYPH_RUN
*
run
cairo_bool_t
*
transformed
)
;
