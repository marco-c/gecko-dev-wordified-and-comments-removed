#
ifndef
CAIRO_D2D_PRIVATE_H
#
define
CAIRO_D2D_PRIVATE_H
#
ifdef
CAIRO_HAS_D2D_SURFACE
#
include
<
windows
.
h
>
#
include
<
d2d1
.
h
>
#
include
<
d3d10
.
h
>
#
include
<
dxgi
.
h
>
extern
"
C
"
{
#
include
"
cairoint
.
h
"
#
include
"
cairo
-
surface
-
clipper
-
private
.
h
"
}
#
include
"
cairo
-
win32
-
refptr
.
h
"
#
include
"
cairo
-
d2d
-
private
-
fx
.
h
"
#
include
"
cairo
-
win32
.
h
"
struct
d2d_clip
;
#
define
MAX_OPERATORS
CAIRO_OPERATOR_HSL_LUMINOSITY
+
1
struct
_cairo_d2d_device
{
cairo_device_t
base
;
HMODULE
mD3D10_1
;
RefPtr
<
ID3D10Device1
>
mD3D10Device
;
RefPtr
<
ID3D10Effect
>
mSampleEffect
;
RefPtr
<
ID3D10InputLayout
>
mInputLayout
;
RefPtr
<
ID3D10Buffer
>
mQuadBuffer
;
RefPtr
<
ID3D10RasterizerState
>
mRasterizerState
;
RefPtr
<
ID3D10BlendState
>
mBlendStates
[
MAX_OPERATORS
]
;
int
mVRAMUsage
;
}
;
typedef
struct
_cairo_d2d_device
cairo_d2d_device_t
;
struct
_cairo_d2d_surface
{
_cairo_d2d_surface
(
)
:
d2d_clip
(
NULL
)
clipping
(
false
)
isDrawing
(
false
)
textRenderingInit
(
true
)
{
_cairo_clip_init
(
&
this
-
>
clip
)
;
}
cairo_surface_t
base
;
cairo_d2d_device_t
*
device
;
RefPtr
<
ID2D1RenderTarget
>
rt
;
RefPtr
<
ID3D10Resource
>
surface
;
RefPtr
<
ID3D10Texture2D
>
bufferTexture
;
RefPtr
<
IDXGISurface
>
backBuf
;
RefPtr
<
ID2D1Bitmap
>
surfaceBitmap
;
RefPtr
<
IDXGISwapChain
>
dxgiChain
;
HWND
hwnd
;
cairo_format_t
format
;
cairo_clip_t
clip
;
d2d_clip
*
d2d_clip
;
RefPtr
<
ID2D1Layer
>
maskLayer
;
RefPtr
<
ID2D1Layer
>
helperLayer
;
bool
clipping
;
RefPtr
<
ID2D1BitmapBrush
>
bitmapBrush
;
RefPtr
<
ID2D1SolidColorBrush
>
solidColorBrush
;
bool
isDrawing
;
bool
textRenderingInit
;
RefPtr
<
ID3D10RenderTargetView
>
buffer_rt_view
;
RefPtr
<
ID3D10ShaderResourceView
>
buffer_sr_view
;
}
;
typedef
struct
_cairo_d2d_surface
cairo_d2d_surface_t
;
typedef
HRESULT
(
WINAPI
*
D2D1CreateFactoryFunc
)
(
__in
D2D1_FACTORY_TYPE
factoryType
__in
REFIID
iid
__in_opt
CONST
D2D1_FACTORY_OPTIONS
*
pFactoryOptions
__out
void
*
*
factory
)
;
typedef
HRESULT
(
WINAPI
*
D3D10CreateDevice1Func
)
(
IDXGIAdapter
*
pAdapter
D3D10_DRIVER_TYPE
DriverType
HMODULE
Software
UINT
Flags
D3D10_FEATURE_LEVEL1
HardwareLevel
UINT
SDKVersion
ID3D10Device1
*
*
ppDevice
)
;
typedef
HRESULT
(
WINAPI
*
D3D10CreateEffectFromMemoryFunc
)
(
void
*
pData
SIZE_T
DataLength
UINT
FXFlags
ID3D10Device
*
pDevice
ID3D10EffectPool
*
pEffectPool
ID3D10Effect
*
*
ppEffect
)
;
#
endif
#
endif
