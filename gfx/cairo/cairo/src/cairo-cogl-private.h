#
ifndef
CAIRO_COGL_PRIVATE_H
#
define
CAIRO_COGL_PRIVATE_H
#
include
"
cairo
-
device
-
private
.
h
"
#
include
"
cairo
-
cache
-
private
.
h
"
#
include
"
cairo
-
backend
-
private
.
h
"
#
include
"
cairo
-
default
-
context
-
private
.
h
"
#
include
"
cairo
-
surface
-
private
.
h
"
#
include
"
cairo
-
freelist
-
private
.
h
"
#
include
<
cogl
/
cogl2
-
experimental
.
h
>
typedef
enum
_cairo_cogl_template_type
{
CAIRO_COGL_TEMPLATE_TYPE_SOLID
CAIRO_COGL_TEMPLATE_TYPE_SOLID_MASK_SOLID
CAIRO_COGL_TEMPLATE_TYPE_TEXTURE_MASK_SOLID
CAIRO_COGL_TEMPLATE_TYPE_TEXTURE
CAIRO_COGL_TEMPLATE_TYPE_SOLID_MASK_TEXTURE
CAIRO_COGL_TEMPLATE_TYPE_TEXTURE_MASK_TEXTURE
CAIRO_COGL_TEMPLATE_TYPE_TEXTURE_IGNORE_ALPHA
CAIRO_COGL_TEMPLATE_TYPE_SOLID_MASK_TEXTURE_IGNORE_ALPHA
CAIRO_COGL_TEMPLATE_TYPE_TEXTURE_MASK_TEXTURE_IGNORE_ALPHA
CAIRO_COGL_TEMPLATE_TYPE_COUNT
}
cairo_cogl_template_type
;
typedef
struct
_cairo_cogl_device
{
cairo_device_t
base
;
CoglContext
*
cogl_context
;
cairo_bool_t
has_npots
;
cairo_bool_t
has_mirrored_repeat
;
CoglAttributeBuffer
*
buffer_stack
;
size_t
buffer_stack_size
;
size_t
buffer_stack_offset
;
guint8
*
buffer_stack_pointer
;
CoglPipeline
*
template_pipelines
[
CAIRO_OPERATOR_ADD
+
1
]
[
CAIRO_COGL_TEMPLATE_TYPE_COUNT
]
;
cairo_cache_t
linear_cache
;
cairo_cache_t
path_fill_prim_cache
;
cairo_cache_t
path_stroke_prim_cache
;
cairo_freelist_t
path_fill_meta_freelist
;
cairo_freelist_t
path_stroke_meta_freelist
;
}
cairo_cogl_device_t
;
typedef
struct
_cairo_cogl_clip_primitives
{
cairo_t
*
clip
;
CoglPrimitive
*
*
primitives
;
}
cairo_cogl_clip_primitives_t
;
typedef
struct
_cairo_cogl_surface
{
cairo_surface_t
base
;
CoglTexture
*
texture
;
CoglFramebuffer
*
framebuffer
;
int
width
;
int
height
;
cairo_bool_t
is_mirrored_snapshot
;
GQueue
*
journal
;
cairo_clip_t
*
last_clip
;
GList
*
clips_fifo
;
int
n_clip_updates_per_frame
;
cairo_path_fixed_t
*
user_path
;
cairo_matrix_t
ctm
;
cairo_matrix_t
ctm_inverse
;
cairo_bool_t
path_is_rectangle
;
double
path_rectangle_x
;
double
path_rectangle_y
;
double
path_rectangle_width
;
double
path_rectangle_height
;
}
cairo_cogl_surface_t
;
cairo_status_t
_cairo_cogl_path_fixed_rectangle
(
cairo_path_fixed_t
*
path
cairo_fixed_t
x
cairo_fixed_t
y
cairo_fixed_t
width
cairo_fixed_t
height
)
;
#
endif
