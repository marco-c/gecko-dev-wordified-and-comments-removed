use
euclid
:
:
{
TypedMatrix4D
TypedRect
TypedPoint2D
TypedSize2D
TypedPoint4D
Length
}
;
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
DevicePixel
;
pub
type
DeviceIntRect
=
TypedRect
<
i32
DevicePixel
>
;
pub
type
DeviceIntPoint
=
TypedPoint2D
<
i32
DevicePixel
>
;
pub
type
DeviceIntSize
=
TypedSize2D
<
i32
DevicePixel
>
;
pub
type
DeviceIntLength
=
Length
<
i32
DevicePixel
>
;
pub
type
DeviceUintRect
=
TypedRect
<
u32
DevicePixel
>
;
pub
type
DeviceUintPoint
=
TypedPoint2D
<
u32
DevicePixel
>
;
pub
type
DeviceUintSize
=
TypedSize2D
<
u32
DevicePixel
>
;
pub
type
DeviceRect
=
TypedRect
<
f32
DevicePixel
>
;
pub
type
DevicePoint
=
TypedPoint2D
<
f32
DevicePixel
>
;
pub
type
DeviceSize
=
TypedSize2D
<
f32
DevicePixel
>
;
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
LayerPixel
;
pub
type
LayerRect
=
TypedRect
<
f32
LayerPixel
>
;
pub
type
LayerPoint
=
TypedPoint2D
<
f32
LayerPixel
>
;
pub
type
LayerSize
=
TypedSize2D
<
f32
LayerPixel
>
;
pub
type
LayerPoint4D
=
TypedPoint4D
<
f32
LayerPixel
>
;
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
ScrollLayerPixel
;
pub
type
ScrollLayerRect
=
TypedRect
<
f32
ScrollLayerPixel
>
;
pub
type
ScrollLayerPoint
=
TypedPoint2D
<
f32
ScrollLayerPixel
>
;
pub
type
ScrollLayerSize
=
TypedSize2D
<
f32
ScrollLayerPixel
>
;
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
WorldPixel
;
pub
type
WorldRect
=
TypedRect
<
f32
WorldPixel
>
;
pub
type
WorldPoint
=
TypedPoint2D
<
f32
WorldPixel
>
;
pub
type
WorldSize
=
TypedSize2D
<
f32
WorldPixel
>
;
pub
type
WorldPoint4D
=
TypedPoint4D
<
f32
WorldPixel
>
;
pub
type
LayerTransform
=
TypedMatrix4D
<
f32
LayerPixel
LayerPixel
>
;
pub
type
LayerToScrollTransform
=
TypedMatrix4D
<
f32
LayerPixel
ScrollLayerPixel
>
;
pub
type
ScrollToLayerTransform
=
TypedMatrix4D
<
f32
ScrollLayerPixel
LayerPixel
>
;
pub
type
LayerToWorldTransform
=
TypedMatrix4D
<
f32
LayerPixel
WorldPixel
>
;
pub
type
WorldToLayerTransform
=
TypedMatrix4D
<
f32
WorldPixel
LayerPixel
>
;
pub
type
ScrollToWorldTransform
=
TypedMatrix4D
<
f32
ScrollLayerPixel
WorldPixel
>
;
pub
fn
device_length
(
value
:
f32
device_pixel_ratio
:
f32
)
-
>
DeviceIntLength
{
DeviceIntLength
:
:
new
(
(
value
*
device_pixel_ratio
)
.
round
(
)
as
i32
)
}
pub
fn
as_scroll_parent_rect
(
rect
:
&
LayerRect
)
-
>
ScrollLayerRect
{
ScrollLayerRect
:
:
from_untyped
(
&
rect
.
to_untyped
(
)
)
}
