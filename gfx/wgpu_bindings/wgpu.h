#
ifndef
WGPU_h
#
define
WGPU_h
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
ByteBuf
;
}
namespace
webgpu
{
namespace
ffi
{
#
define
WGPU_INLINE
#
define
WGPU_FUNC
extern
"
C
"
{
#
include
"
mozilla
/
webgpu
/
ffi
/
wgpu_ffi_generated
.
h
"
}
#
undef
WGPU_INLINE
#
undef
WGPU_FUNC
}
inline
ffi
:
:
WGPUByteBuf
*
ToFFI
(
ipc
:
:
ByteBuf
*
x
)
{
return
reinterpret_cast
<
ffi
:
:
WGPUByteBuf
*
>
(
x
)
;
}
inline
const
ffi
:
:
WGPUByteBuf
*
ToFFI
(
const
ipc
:
:
ByteBuf
*
x
)
{
return
reinterpret_cast
<
const
ffi
:
:
WGPUByteBuf
*
>
(
x
)
;
}
}
template
<
>
class
DefaultDelete
<
webgpu
:
:
ffi
:
:
WGPUClient
>
{
public
:
void
operator
(
)
(
webgpu
:
:
ffi
:
:
WGPUClient
*
aPtr
)
const
{
webgpu
:
:
ffi
:
:
wgpu_client_delete
(
aPtr
)
;
}
}
;
template
<
>
class
DefaultDelete
<
webgpu
:
:
ffi
:
:
WGPUGlobal
>
{
public
:
void
operator
(
)
(
webgpu
:
:
ffi
:
:
WGPUGlobal
*
aPtr
)
const
{
webgpu
:
:
ffi
:
:
wgpu_server_delete
(
aPtr
)
;
}
}
;
#
if
!
defined
(
XP_MACOSX
)
template
<
>
class
DefaultDelete
<
webgpu
:
:
ffi
:
:
WGPUVkImageHandle
>
{
public
:
void
operator
(
)
(
webgpu
:
:
ffi
:
:
WGPUVkImageHandle
*
aPtr
)
const
{
webgpu
:
:
ffi
:
:
wgpu_vkimage_delete
(
aPtr
)
;
}
}
;
#
endif
template
<
>
class
DefaultDelete
<
webgpu
:
:
ffi
:
:
WGPUMetalSharedEventHandle
>
{
public
:
void
operator
(
)
(
webgpu
:
:
ffi
:
:
WGPUMetalSharedEventHandle
*
aPtr
)
const
{
webgpu
:
:
ffi
:
:
wgpu_server_delete_metal_shared_event
(
aPtr
)
;
}
}
;
}
#
endif
