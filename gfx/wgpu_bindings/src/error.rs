use
std
:
:
{
error
:
:
Error
fmt
:
:
{
self
Display
Formatter
}
os
:
:
raw
:
:
c_char
ptr
}
;
use
nsstring
:
:
nsCString
;
use
serde
:
:
{
Deserialize
Serialize
}
;
use
wgc
:
:
id
;
#
[
repr
(
C
)
]
pub
struct
ErrorBuffer
{
r
#
type
:
*
mut
ErrorBufferType
message
:
*
mut
c_char
message_capacity
:
usize
device_id
:
*
mut
wgc
:
:
id
:
:
DeviceId
}
impl
ErrorBuffer
{
pub
(
crate
)
fn
init
(
&
mut
self
error
:
impl
HasErrorBufferType
device_id
:
wgc
:
:
id
:
:
DeviceId
)
{
unsafe
{
*
self
.
device_id
=
device_id
}
;
let
message
=
error_to_string
(
&
error
)
;
let
err_ty
=
error
.
error_type
(
)
;
unsafe
{
*
self
.
r
#
type
=
err_ty
}
;
if
matches
!
(
err_ty
ErrorBufferType
:
:
None
)
{
log
:
:
warn
!
(
"
{
message
}
"
)
;
return
;
}
assert_ne
!
(
self
.
message_capacity
0
)
;
let
length
=
if
message
.
len
(
)
>
=
self
.
message_capacity
{
let
truncated_length
=
(
0
.
.
self
.
message_capacity
)
.
rfind
(
|
&
offset
|
message
.
is_char_boundary
(
offset
)
)
.
unwrap_or
(
0
)
;
log
:
:
warn
!
(
"
Error
message
'
s
length
{
}
reached
capacity
{
}
truncating
to
{
}
"
message
.
len
(
)
self
.
message_capacity
truncated_length
)
;
truncated_length
}
else
{
message
.
len
(
)
}
;
unsafe
{
ptr
:
:
copy_nonoverlapping
(
message
.
as_ptr
(
)
self
.
message
as
*
mut
u8
length
)
;
*
self
.
message
.
add
(
length
)
=
0
;
}
}
}
pub
struct
OwnedErrorBuffer
{
device_id
:
Option
<
id
:
:
DeviceId
>
ty
:
ErrorBufferType
message
:
nsCString
}
impl
OwnedErrorBuffer
{
pub
fn
new
(
)
-
>
Self
{
Self
{
device_id
:
None
ty
:
ErrorBufferType
:
:
None
message
:
nsCString
:
:
new
(
)
}
}
pub
(
crate
)
fn
init
(
&
mut
self
error
:
impl
HasErrorBufferType
device_id
:
id
:
:
DeviceId
)
{
assert
!
(
self
.
device_id
.
is_none
(
)
)
;
let
ty
=
error
.
error_type
(
)
;
match
ty
{
ErrorBufferType
:
:
None
=
>
panic
!
(
)
ErrorBufferType
:
:
DeviceLost
=
>
return
ErrorBufferType
:
:
Internal
=
>
{
}
ErrorBufferType
:
:
OutOfMemory
=
>
{
}
ErrorBufferType
:
:
Validation
=
>
{
}
}
self
.
device_id
=
Some
(
device_id
)
;
self
.
ty
=
ty
;
let
message
=
error_to_string
(
&
error
)
;
self
.
message
=
nsCString
:
:
from
(
message
)
;
}
pub
(
crate
)
fn
get_inner_data
(
&
self
)
-
>
Option
<
(
id
:
:
DeviceId
ErrorBufferType
&
nsCString
)
>
{
Some
(
(
self
.
device_id
?
self
.
ty
&
self
.
message
)
)
}
}
pub
fn
error_to_string
(
error
:
impl
Error
)
-
>
String
{
use
std
:
:
fmt
:
:
Write
;
let
mut
message
=
format
!
(
"
{
}
"
error
)
;
let
mut
e
=
error
.
source
(
)
;
while
let
Some
(
source
)
=
e
{
write
!
(
message
"
caused
by
:
{
}
"
source
)
.
unwrap
(
)
;
e
=
source
.
source
(
)
;
}
message
}
#
[
repr
(
u8
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Serialize
)
]
pub
(
crate
)
enum
ErrorBufferType
{
None
=
0
DeviceLost
=
1
Internal
=
2
OutOfMemory
=
3
Validation
=
4
}
pub
(
crate
)
trait
HasErrorBufferType
:
Error
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
;
}
#
[
derive
(
Clone
Debug
)
]
pub
(
crate
)
struct
ErrMsg
<
'
a
>
{
pub
(
crate
)
message
:
&
'
a
str
pub
(
crate
)
r
#
type
:
ErrorBufferType
}
impl
Display
for
ErrMsg
<
'
_
>
{
fn
fmt
(
&
self
f
:
&
mut
Formatter
<
'
_
>
)
-
>
fmt
:
:
Result
{
let
Self
{
message
r
#
type
:
_
}
=
self
;
write
!
(
f
"
{
message
}
"
)
}
}
impl
Error
for
ErrMsg
<
'
_
>
{
}
impl
HasErrorBufferType
for
ErrMsg
<
'
_
>
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
self
.
r
#
type
}
}
mod
foreign
{
use
wgc
:
:
{
binding_model
:
:
{
CreateBindGroupError
CreateBindGroupLayoutError
CreatePipelineLayoutError
GetBindGroupLayoutError
}
command
:
:
{
ClearError
CommandEncoderError
ComputePassError
CreateRenderBundleError
EncoderStateError
QueryError
QueryUseError
RenderBundleError
RenderPassError
ResolveError
TransferError
}
device
:
:
{
queue
:
:
{
QueueSubmitError
QueueWriteError
}
DeviceError
MissingFeatures
}
instance
:
:
RequestDeviceError
pipeline
:
:
{
CreateComputePipelineError
CreateRenderPipelineError
CreateShaderModuleError
}
resource
:
:
{
BufferAccessError
CreateBufferError
CreateQuerySetError
CreateSamplerError
CreateTextureError
CreateTextureViewError
DestroyedResourceError
InvalidResourceError
MissingBufferUsageError
MissingTextureUsageError
}
}
;
use
wgt
:
:
RequestAdapterError
;
use
super
:
:
{
ErrorBufferType
HasErrorBufferType
}
;
impl
HasErrorBufferType
for
RequestAdapterError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
RequestAdapterError
:
:
NotFound
{
.
.
}
|
RequestAdapterError
:
:
EnvNotSet
=
>
{
ErrorBufferType
:
:
Validation
}
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
RequestDeviceError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
RequestDeviceError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
RequestDeviceError
:
:
TimestampNormalizerInitFailed
(
.
.
)
=
>
ErrorBufferType
:
:
Internal
RequestDeviceError
:
:
UnsupportedFeature
(
_
)
|
RequestDeviceError
:
:
LimitsExceeded
(
_
)
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
CreateBufferError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreateBufferError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreateBufferError
:
:
AccessError
(
e
)
=
>
e
.
error_type
(
)
CreateBufferError
:
:
IndirectValidationBindGroup
(
_
)
=
>
ErrorBufferType
:
:
Internal
CreateBufferError
:
:
UnalignedSize
|
CreateBufferError
:
:
InvalidUsage
(
_
)
|
CreateBufferError
:
:
UsageMismatch
(
_
)
|
CreateBufferError
:
:
MaxBufferSize
{
.
.
}
|
CreateBufferError
:
:
MissingDownlevelFlags
(
_
)
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
DestroyedResourceError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
InvalidResourceError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
MissingBufferUsageError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
MissingTextureUsageError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
BufferAccessError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
BufferAccessError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
BufferAccessError
:
:
DestroyedResource
(
e
)
=
>
e
.
error_type
(
)
BufferAccessError
:
:
InvalidResource
(
e
)
=
>
e
.
error_type
(
)
BufferAccessError
:
:
MissingBufferUsage
(
e
)
=
>
e
.
error_type
(
)
BufferAccessError
:
:
Failed
|
BufferAccessError
:
:
AlreadyMapped
|
BufferAccessError
:
:
MapAlreadyPending
|
BufferAccessError
:
:
NotMapped
|
BufferAccessError
:
:
UnalignedRange
|
BufferAccessError
:
:
UnalignedOffset
{
.
.
}
|
BufferAccessError
:
:
UnalignedRangeSize
{
.
.
}
|
BufferAccessError
:
:
OutOfBoundsUnderrun
{
.
.
}
|
BufferAccessError
:
:
OutOfBoundsOverrun
{
.
.
}
|
BufferAccessError
:
:
NegativeRange
{
.
.
}
|
BufferAccessError
:
:
MapAborted
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
MissingFeatures
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
CreateTextureError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreateTextureError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreateTextureError
:
:
CreateTextureView
(
e
)
=
>
e
.
error_type
(
)
CreateTextureError
:
:
MissingFeatures
(
_
e
)
=
>
e
.
error_type
(
)
CreateTextureError
:
:
InvalidUsage
(
_
)
|
CreateTextureError
:
:
InvalidDimension
(
_
)
|
CreateTextureError
:
:
InvalidDepthDimension
(
_
_
)
|
CreateTextureError
:
:
InvalidCompressedDimension
(
_
_
)
|
CreateTextureError
:
:
InvalidMipLevelCount
{
.
.
}
|
CreateTextureError
:
:
InvalidFormatUsages
(
_
_
_
)
|
CreateTextureError
:
:
InvalidViewFormat
(
_
_
)
|
CreateTextureError
:
:
InvalidDimensionUsages
(
_
_
)
|
CreateTextureError
:
:
InvalidMultisampledStorageBinding
|
CreateTextureError
:
:
InvalidMultisampledFormat
(
_
)
|
CreateTextureError
:
:
InvalidSampleCount
(
.
.
)
|
CreateTextureError
:
:
MultisampledNotRenderAttachment
|
CreateTextureError
:
:
MissingDownlevelFlags
(
_
)
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
CreateSamplerError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreateSamplerError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreateSamplerError
:
:
MissingFeatures
(
e
)
=
>
e
.
error_type
(
)
CreateSamplerError
:
:
InvalidLodMinClamp
(
_
)
|
CreateSamplerError
:
:
InvalidLodMaxClamp
{
.
.
}
|
CreateSamplerError
:
:
InvalidAnisotropy
(
_
)
|
CreateSamplerError
:
:
InvalidFilterModeWithAnisotropy
{
.
.
}
=
>
{
ErrorBufferType
:
:
Validation
}
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
CreateBindGroupLayoutError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreateBindGroupLayoutError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreateBindGroupLayoutError
:
:
ConflictBinding
(
_
)
|
CreateBindGroupLayoutError
:
:
Entry
{
.
.
}
|
CreateBindGroupLayoutError
:
:
TooManyBindings
(
_
)
|
CreateBindGroupLayoutError
:
:
InvalidBindingIndex
{
.
.
}
|
CreateBindGroupLayoutError
:
:
InvalidVisibility
(
_
)
|
CreateBindGroupLayoutError
:
:
ContainsBothBindingArrayAndDynamicOffsetArray
|
CreateBindGroupLayoutError
:
:
ContainsBothBindingArrayAndUniformBuffer
=
>
{
ErrorBufferType
:
:
Validation
}
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
CreatePipelineLayoutError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreatePipelineLayoutError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreatePipelineLayoutError
:
:
MissingFeatures
(
e
)
=
>
e
.
error_type
(
)
CreatePipelineLayoutError
:
:
InvalidResource
(
e
)
=
>
e
.
error_type
(
)
CreatePipelineLayoutError
:
:
MisalignedPushConstantRange
{
.
.
}
|
CreatePipelineLayoutError
:
:
MoreThanOnePushConstantRangePerStage
{
.
.
}
|
CreatePipelineLayoutError
:
:
PushConstantRangeTooLarge
{
.
.
}
|
CreatePipelineLayoutError
:
:
TooManyBindings
(
_
)
|
CreatePipelineLayoutError
:
:
TooManyGroups
{
.
.
}
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
CreateBindGroupError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreateBindGroupError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreateBindGroupError
:
:
DestroyedResource
(
e
)
=
>
e
.
error_type
(
)
CreateBindGroupError
:
:
InvalidResource
(
e
)
=
>
e
.
error_type
(
)
CreateBindGroupError
:
:
MissingBufferUsage
(
e
)
=
>
e
.
error_type
(
)
CreateBindGroupError
:
:
MissingTextureUsage
(
e
)
=
>
e
.
error_type
(
)
CreateBindGroupError
:
:
BindingArrayPartialLengthMismatch
{
.
.
}
|
CreateBindGroupError
:
:
BindingArrayLengthMismatch
{
.
.
}
|
CreateBindGroupError
:
:
BindingArrayZeroLength
|
CreateBindGroupError
:
:
BindingRangeTooLarge
{
.
.
}
|
CreateBindGroupError
:
:
BindingSizeTooSmall
{
.
.
}
|
CreateBindGroupError
:
:
BindingZeroSize
(
_
)
|
CreateBindGroupError
:
:
BindingsNumMismatch
{
.
.
}
|
CreateBindGroupError
:
:
DuplicateBinding
(
_
)
|
CreateBindGroupError
:
:
MissingBindingDeclaration
(
_
)
|
CreateBindGroupError
:
:
SingleBindingExpected
|
CreateBindGroupError
:
:
UnalignedBufferOffset
(
_
_
_
)
|
CreateBindGroupError
:
:
BufferRangeTooLarge
{
.
.
}
|
CreateBindGroupError
:
:
WrongBindingType
{
.
.
}
|
CreateBindGroupError
:
:
InvalidTextureMultisample
{
.
.
}
|
CreateBindGroupError
:
:
InvalidTextureSampleType
{
.
.
}
|
CreateBindGroupError
:
:
InvalidTextureDimension
{
.
.
}
|
CreateBindGroupError
:
:
InvalidStorageTextureFormat
{
.
.
}
|
CreateBindGroupError
:
:
InvalidStorageTextureMipLevelCount
{
.
.
}
|
CreateBindGroupError
:
:
WrongSamplerComparison
{
.
.
}
|
CreateBindGroupError
:
:
WrongSamplerFiltering
{
.
.
}
|
CreateBindGroupError
:
:
DepthStencilAspect
|
CreateBindGroupError
:
:
StorageReadNotSupported
(
_
)
|
CreateBindGroupError
:
:
ResourceUsageCompatibility
(
_
)
|
CreateBindGroupError
:
:
MissingTLASVertexReturn
{
.
.
}
|
CreateBindGroupError
:
:
StorageAtomicNotSupported
(
.
.
)
|
CreateBindGroupError
:
:
StorageWriteNotSupported
(
.
.
)
|
CreateBindGroupError
:
:
StorageReadWriteNotSupported
(
.
.
)
=
>
{
ErrorBufferType
:
:
Validation
}
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
CreateShaderModuleError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreateShaderModuleError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreateShaderModuleError
:
:
MissingFeatures
(
e
)
=
>
e
.
error_type
(
)
CreateShaderModuleError
:
:
Generation
=
>
ErrorBufferType
:
:
Internal
CreateShaderModuleError
:
:
Parsing
(
_
)
|
CreateShaderModuleError
:
:
Validation
(
_
)
|
CreateShaderModuleError
:
:
InvalidGroupIndex
{
.
.
}
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
CreateComputePipelineError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreateComputePipelineError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreateComputePipelineError
:
:
InvalidResource
(
e
)
=
>
e
.
error_type
(
)
CreateComputePipelineError
:
:
Internal
(
_
)
=
>
ErrorBufferType
:
:
Internal
CreateComputePipelineError
:
:
Implicit
(
_
)
|
CreateComputePipelineError
:
:
Stage
(
_
)
|
CreateComputePipelineError
:
:
MissingDownlevelFlags
(
_
)
|
CreateComputePipelineError
:
:
PipelineConstants
(
_
)
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
CreateRenderPipelineError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreateRenderPipelineError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreateRenderPipelineError
:
:
MissingFeatures
(
e
)
=
>
e
.
error_type
(
)
CreateRenderPipelineError
:
:
InvalidResource
(
e
)
=
>
e
.
error_type
(
)
CreateRenderPipelineError
:
:
Internal
{
.
.
}
=
>
ErrorBufferType
:
:
Internal
CreateRenderPipelineError
:
:
ColorAttachment
(
_
)
|
CreateRenderPipelineError
:
:
Implicit
(
_
)
|
CreateRenderPipelineError
:
:
ColorState
(
_
_
)
|
CreateRenderPipelineError
:
:
DepthStencilState
(
_
)
|
CreateRenderPipelineError
:
:
InvalidSampleCount
(
_
)
|
CreateRenderPipelineError
:
:
TooManyVertexBuffers
{
.
.
}
|
CreateRenderPipelineError
:
:
TooManyVertexAttributes
{
.
.
}
|
CreateRenderPipelineError
:
:
VertexStrideTooLarge
{
.
.
}
|
CreateRenderPipelineError
:
:
UnalignedVertexStride
{
.
.
}
|
CreateRenderPipelineError
:
:
InvalidVertexAttributeOffset
{
.
.
}
|
CreateRenderPipelineError
:
:
ShaderLocationClash
(
_
)
|
CreateRenderPipelineError
:
:
StripIndexFormatForNonStripTopology
{
.
.
}
|
CreateRenderPipelineError
:
:
ConservativeRasterizationNonFillPolygonMode
|
CreateRenderPipelineError
:
:
MissingDownlevelFlags
(
_
)
|
CreateRenderPipelineError
:
:
Stage
{
.
.
}
|
CreateRenderPipelineError
:
:
UnalignedShader
{
.
.
}
|
CreateRenderPipelineError
:
:
VertexAttributeStrideTooLarge
{
.
.
}
|
CreateRenderPipelineError
:
:
PipelineConstants
{
.
.
}
|
CreateRenderPipelineError
:
:
BlendFactorOnUnsupportedTarget
{
.
.
}
|
CreateRenderPipelineError
:
:
PipelineExpectsShaderToUseDualSourceBlending
|
CreateRenderPipelineError
:
:
ShaderExpectsPipelineToUseDualSourceBlending
|
CreateRenderPipelineError
:
:
NoTargetSpecified
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
EncoderStateError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
EncoderStateError
:
:
Invalid
|
EncoderStateError
:
:
Ended
|
EncoderStateError
:
:
Locked
|
EncoderStateError
:
:
Unlocked
|
EncoderStateError
:
:
Submitted
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
RenderBundleError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
DeviceError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
DeviceError
:
:
DeviceMismatch
(
_
)
=
>
ErrorBufferType
:
:
Validation
DeviceError
:
:
Invalid
(
_
)
|
DeviceError
:
:
Lost
=
>
ErrorBufferType
:
:
DeviceLost
DeviceError
:
:
OutOfMemory
=
>
ErrorBufferType
:
:
OutOfMemory
DeviceError
:
:
ResourceCreationFailed
=
>
ErrorBufferType
:
:
Internal
_
=
>
ErrorBufferType
:
:
Internal
}
}
}
impl
HasErrorBufferType
for
CreateTextureViewError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreateTextureViewError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreateTextureViewError
:
:
MissingFeatures
(
e
)
=
>
e
.
error_type
(
)
CreateTextureViewError
:
:
DestroyedResource
(
e
)
=
>
e
.
error_type
(
)
CreateTextureViewError
:
:
InvalidResource
(
e
)
=
>
e
.
error_type
(
)
CreateTextureViewError
:
:
InvalidTextureViewDimension
{
.
.
}
|
CreateTextureViewError
:
:
InvalidMultisampledTextureViewDimension
(
_
)
|
CreateTextureViewError
:
:
InvalidCubemapTextureDepth
{
.
.
}
|
CreateTextureViewError
:
:
InvalidCubemapArrayTextureDepth
{
.
.
}
|
CreateTextureViewError
:
:
InvalidCubeTextureViewSize
|
CreateTextureViewError
:
:
ZeroMipLevelCount
|
CreateTextureViewError
:
:
ZeroArrayLayerCount
|
CreateTextureViewError
:
:
TooManyMipLevels
{
.
.
}
|
CreateTextureViewError
:
:
TooManyArrayLayers
{
.
.
}
|
CreateTextureViewError
:
:
InvalidArrayLayerCount
{
.
.
}
|
CreateTextureViewError
:
:
InvalidAspect
{
.
.
}
|
CreateTextureViewError
:
:
FormatReinterpretation
{
.
.
}
|
CreateTextureViewError
:
:
TextureViewFormatNotRenderable
(
_
)
|
CreateTextureViewError
:
:
TextureViewFormatNotStorage
(
_
)
|
CreateTextureViewError
:
:
InvalidTextureViewUsage
{
.
.
}
=
>
{
ErrorBufferType
:
:
Validation
}
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
EncoderStateError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
TransferError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
TransferError
:
:
MemoryInitFailure
(
e
)
=
>
e
.
error_type
(
)
TransferError
:
:
MissingBufferUsage
(
e
)
=
>
e
.
error_type
(
)
TransferError
:
:
MissingTextureUsage
(
e
)
=
>
e
.
error_type
(
)
TransferError
:
:
SameSourceDestinationBuffer
|
TransferError
:
:
BufferOverrun
{
.
.
}
|
TransferError
:
:
TextureOverrun
{
.
.
}
|
TransferError
:
:
InvalidTextureAspect
{
.
.
}
|
TransferError
:
:
InvalidTextureMipLevel
{
.
.
}
|
TransferError
:
:
InvalidDimensionExternal
|
TransferError
:
:
UnalignedBufferOffset
(
_
)
|
TransferError
:
:
UnalignedCopySize
(
_
)
|
TransferError
:
:
UnalignedCopyWidth
|
TransferError
:
:
UnalignedCopyHeight
|
TransferError
:
:
UnalignedCopyOriginX
|
TransferError
:
:
UnalignedCopyOriginY
|
TransferError
:
:
UnalignedBytesPerRow
|
TransferError
:
:
UnspecifiedBytesPerRow
|
TransferError
:
:
UnspecifiedRowsPerImage
|
TransferError
:
:
InvalidBytesPerRow
|
TransferError
:
:
InvalidRowsPerImage
|
TransferError
:
:
CopySrcMissingAspects
|
TransferError
:
:
CopyDstMissingAspects
|
TransferError
:
:
CopyAspectNotOne
|
TransferError
:
:
CopyFromForbiddenTextureFormat
{
.
.
}
|
TransferError
:
:
CopyToForbiddenTextureFormat
{
.
.
}
|
TransferError
:
:
ExternalCopyToForbiddenTextureFormat
(
_
)
|
TransferError
:
:
TextureFormatsNotCopyCompatible
{
.
.
}
|
TransferError
:
:
MissingDownlevelFlags
(
_
)
|
TransferError
:
:
InvalidSampleCount
{
.
.
}
|
TransferError
:
:
InvalidMipLevel
{
.
.
}
|
TransferError
:
:
SampleCountNotEqual
{
.
.
}
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
ComputePassError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
QueryError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
QueryError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
QueryError
:
:
EncoderState
(
e
)
=
>
e
.
error_type
(
)
QueryError
:
:
Use
(
e
)
=
>
e
.
error_type
(
)
QueryError
:
:
Resolve
(
e
)
=
>
e
.
error_type
(
)
QueryError
:
:
MissingFeature
(
e
)
=
>
e
.
error_type
(
)
QueryError
:
:
DestroyedResource
(
e
)
=
>
e
.
error_type
(
)
QueryError
:
:
InvalidResource
(
e
)
=
>
e
.
error_type
(
)
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
QueryUseError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
ResolveError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
RenderPassError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
ClearError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
CommandEncoderError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
QueueSubmitError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
QueueSubmitError
:
:
Queue
(
e
)
=
>
e
.
error_type
(
)
QueueSubmitError
:
:
Unmap
(
e
)
=
>
e
.
error_type
(
)
QueueSubmitError
:
:
CommandEncoder
(
e
)
=
>
e
.
error_type
(
)
QueueSubmitError
:
:
DestroyedResource
(
e
)
=
>
e
.
error_type
(
)
QueueSubmitError
:
:
InvalidResource
(
e
)
=
>
e
.
error_type
(
)
QueueSubmitError
:
:
BufferStillMapped
(
_
)
|
QueueSubmitError
:
:
ValidateAsActionsError
(
_
)
=
>
ErrorBufferType
:
:
Validation
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
QueueWriteError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
QueueWriteError
:
:
Queue
(
e
)
=
>
e
.
error_type
(
)
QueueWriteError
:
:
Transfer
(
e
)
=
>
e
.
error_type
(
)
QueueWriteError
:
:
MemoryInitFailure
(
e
)
=
>
e
.
error_type
(
)
QueueWriteError
:
:
DestroyedResource
(
e
)
=
>
e
.
error_type
(
)
QueueWriteError
:
:
InvalidResource
(
e
)
=
>
e
.
error_type
(
)
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
impl
HasErrorBufferType
for
GetBindGroupLayoutError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
CreateRenderBundleError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
ErrorBufferType
:
:
Validation
}
}
impl
HasErrorBufferType
for
CreateQuerySetError
{
fn
error_type
(
&
self
)
-
>
ErrorBufferType
{
match
self
{
CreateQuerySetError
:
:
Device
(
e
)
=
>
e
.
error_type
(
)
CreateQuerySetError
:
:
MissingFeatures
(
e
)
=
>
e
.
error_type
(
)
CreateQuerySetError
:
:
ZeroCount
|
CreateQuerySetError
:
:
TooManyQueries
{
.
.
}
=
>
{
ErrorBufferType
:
:
Validation
}
_
=
>
ErrorBufferType
:
:
Validation
}
}
}
}
