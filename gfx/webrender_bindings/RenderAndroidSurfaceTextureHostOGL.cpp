#
include
"
RenderAndroidSurfaceTextureHostOGL
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
GLContext
.
h
"
namespace
mozilla
{
namespace
wr
{
RenderAndroidSurfaceTextureHostOGL
:
:
RenderAndroidSurfaceTextureHostOGL
(
const
java
:
:
GeckoSurfaceTexture
:
:
GlobalRef
&
aSurfTex
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
bool
aContinuousUpdate
)
:
mSurfTex
(
aSurfTex
)
mSize
(
aSize
)
{
MOZ_COUNT_CTOR_INHERITED
(
RenderAndroidSurfaceTextureHostOGL
RenderTextureHostOGL
)
;
if
(
mSurfTex
)
{
mSurfTex
-
>
IncrementUse
(
)
;
}
}
RenderAndroidSurfaceTextureHostOGL
:
:
~
RenderAndroidSurfaceTextureHostOGL
(
)
{
MOZ_COUNT_DTOR_INHERITED
(
RenderAndroidSurfaceTextureHostOGL
RenderTextureHostOGL
)
;
DeleteTextureHandle
(
)
;
if
(
mSurfTex
)
{
mSurfTex
-
>
DecrementUse
(
)
;
}
}
GLuint
RenderAndroidSurfaceTextureHostOGL
:
:
GetGLHandle
(
uint8_t
aChannelIndex
)
const
{
if
(
!
mSurfTex
)
{
return
0
;
}
return
mSurfTex
-
>
GetTexName
(
)
;
}
gfx
:
:
IntSize
RenderAndroidSurfaceTextureHostOGL
:
:
GetSize
(
uint8_t
aChannelIndex
)
const
{
return
mSize
;
}
wr
:
:
WrExternalImage
RenderAndroidSurfaceTextureHostOGL
:
:
Lock
(
uint8_t
aChannelIndex
gl
:
:
GLContext
*
aGL
wr
:
:
ImageRendering
aRendering
)
{
MOZ_ASSERT
(
aChannelIndex
=
=
0
)
;
if
(
mGL
.
get
(
)
!
=
aGL
)
{
DeleteTextureHandle
(
)
;
mGL
=
aGL
;
mGL
-
>
MakeCurrent
(
)
;
}
if
(
!
mSurfTex
|
|
!
mGL
|
|
!
mGL
-
>
MakeCurrent
(
)
)
{
return
InvalidToWrExternalImage
(
)
;
}
if
(
!
mSurfTex
-
>
IsAttachedToGLContext
(
(
int64_t
)
mGL
.
get
(
)
)
)
{
GLuint
texName
;
mGL
-
>
fGenTextures
(
1
&
texName
)
;
mCachedRendering
=
aRendering
;
ActivateBindAndTexParameteri
(
mGL
LOCAL_GL_TEXTURE0
LOCAL_GL_TEXTURE_EXTERNAL_OES
texName
aRendering
)
;
if
(
NS_FAILED
(
mSurfTex
-
>
AttachToGLContext
(
(
int64_t
)
mGL
.
get
(
)
texName
)
)
)
{
MOZ_ASSERT
(
0
)
;
mGL
-
>
fDeleteTextures
(
1
&
texName
)
;
return
InvalidToWrExternalImage
(
)
;
;
}
}
else
if
(
IsFilterUpdateNecessary
(
aRendering
)
)
{
mCachedRendering
=
aRendering
;
ActivateBindAndTexParameteri
(
mGL
LOCAL_GL_TEXTURE0
LOCAL_GL_TEXTURE_EXTERNAL_OES
mSurfTex
-
>
GetTexName
(
)
aRendering
)
;
}
mSurfTex
-
>
UpdateTexImage
(
)
;
return
NativeTextureToWrExternalImage
(
mSurfTex
-
>
GetTexName
(
)
0
0
mSize
.
width
mSize
.
height
)
;
}
void
RenderAndroidSurfaceTextureHostOGL
:
:
Unlock
(
)
{
}
void
RenderAndroidSurfaceTextureHostOGL
:
:
DeleteTextureHandle
(
)
{
}
}
}
