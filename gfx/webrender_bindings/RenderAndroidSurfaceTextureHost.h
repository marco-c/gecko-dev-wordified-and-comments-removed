#
ifndef
MOZILLA_GFX_RENDERANDROIDSURFACETEXTUREHOST_H
#
define
MOZILLA_GFX_RENDERANDROIDSURFACETEXTUREHOST_H
#
include
"
mozilla
/
java
/
GeckoSurfaceTextureWrappers
.
h
"
#
include
"
mozilla
/
layers
/
TextureHostOGL
.
h
"
#
include
"
RenderTextureHostSWGL
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DataSourceSurface
;
}
namespace
wr
{
class
RenderAndroidSurfaceTextureHost
final
:
public
RenderTextureHostSWGL
{
public
:
explicit
RenderAndroidSurfaceTextureHost
(
const
java
:
:
GeckoSurfaceTexture
:
:
GlobalRef
&
aSurfTex
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
bool
aContinuousUpdate
)
;
wr
:
:
WrExternalImage
Lock
(
uint8_t
aChannelIndex
gl
:
:
GLContext
*
aGL
wr
:
:
ImageRendering
aRendering
)
override
;
void
Unlock
(
)
override
;
size_t
Bytes
(
)
override
{
return
mSize
.
width
*
mSize
.
height
*
BytesPerPixel
(
mFormat
)
;
}
void
PrepareForUse
(
)
override
;
void
NotifyForUse
(
)
override
;
void
NotifyNotUsed
(
)
override
;
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
;
gfx
:
:
ColorDepth
GetColorDepth
(
)
const
override
{
return
gfx
:
:
ColorDepth
:
:
COLOR_8
;
}
size_t
GetPlaneCount
(
)
const
override
{
return
1
;
}
bool
MapPlane
(
RenderCompositor
*
aCompositor
uint8_t
aChannelIndex
PlaneInfo
&
aPlaneInfo
)
override
;
void
UnmapPlanes
(
)
override
;
gfx
:
:
YUVColorSpace
GetYUVColorSpace
(
)
const
override
{
return
gfx
:
:
YUVColorSpace
:
:
UNKNOWN
;
}
private
:
virtual
~
RenderAndroidSurfaceTextureHost
(
)
;
bool
EnsureAttachedToGLContext
(
)
;
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
ReadTexImage
(
)
;
enum
PrepareStatus
{
STATUS_NONE
STATUS_MIGHT_BE_USED_BY_WR
STATUS_UPDATE_TEX_IMAGE_NEEDED
STATUS_PREPARED
}
;
const
mozilla
:
:
java
:
:
GeckoSurfaceTexture
:
:
GlobalRef
mSurfTex
;
const
gfx
:
:
IntSize
mSize
;
const
gfx
:
:
SurfaceFormat
mFormat
;
const
bool
mContinuousUpdate
;
PrepareStatus
mPrepareStatus
;
bool
mAttachedToGLContext
;
RefPtr
<
gl
:
:
GLContext
>
mGL
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mReadback
;
}
;
}
}
#
endif
