#
include
"
RenderCompositorEGL
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
GLContextEGL
.
h
"
#
include
"
GLContextProvider
.
h
"
#
include
"
GLLibraryEGL
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
#
include
"
mozilla
/
widget
/
CompositorWidget
.
h
"
#
ifdef
MOZ_WAYLAND
#
include
"
mozilla
/
widget
/
GtkCompositorWidget
.
h
"
#
include
<
gdk
/
gdk
.
h
>
#
include
<
gdk
/
gdkx
.
h
>
#
endif
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
GeneratedJNIWrappers
.
h
"
#
endif
namespace
mozilla
{
namespace
wr
{
UniquePtr
<
RenderCompositor
>
RenderCompositorEGL
:
:
Create
(
RefPtr
<
widget
:
:
CompositorWidget
>
aWidget
)
{
#
ifdef
MOZ_WAYLAND
if
(
GDK_IS_X11_DISPLAY
(
gdk_display_get_default
(
)
)
)
{
return
nullptr
;
}
#
endif
if
(
!
RenderThread
:
:
Get
(
)
-
>
SharedGL
(
)
)
{
gfxCriticalNote
<
<
"
Failed
to
get
shared
GL
context
"
;
return
nullptr
;
}
return
MakeUnique
<
RenderCompositorEGL
>
(
aWidget
)
;
}
EGLSurface
RenderCompositorEGL
:
:
CreateEGLSurface
(
)
{
EGLSurface
surface
=
EGL_NO_SURFACE
;
surface
=
gl
:
:
GLContextEGL
:
:
CreateEGLSurfaceForCompositorWidget
(
mWidget
gl
:
:
GLContextEGL
:
:
Cast
(
gl
(
)
)
-
>
mConfig
)
;
if
(
surface
=
=
EGL_NO_SURFACE
)
{
gfxCriticalNote
<
<
"
Failed
to
create
EGLSurface
"
;
}
return
surface
;
}
RenderCompositorEGL
:
:
RenderCompositorEGL
(
RefPtr
<
widget
:
:
CompositorWidget
>
aWidget
)
:
RenderCompositor
(
std
:
:
move
(
aWidget
)
)
mEGLSurface
(
EGL_NO_SURFACE
)
{
}
RenderCompositorEGL
:
:
~
RenderCompositorEGL
(
)
{
#
ifdef
MOZ_WIDGET_ANDROID
java
:
:
GeckoSurfaceTexture
:
:
DestroyUnused
(
(
int64_t
)
gl
(
)
)
;
java
:
:
GeckoSurfaceTexture
:
:
DetachAllFromGLContext
(
(
int64_t
)
gl
(
)
)
;
#
endif
DestroyEGLSurface
(
)
;
}
bool
RenderCompositorEGL
:
:
BeginFrame
(
)
{
#
ifdef
MOZ_WAYLAND
bool
newSurface
=
mWidget
-
>
AsX11
(
)
&
&
mWidget
-
>
AsX11
(
)
-
>
WaylandRequestsUpdatingEGLSurface
(
)
;
if
(
newSurface
)
{
DestroyEGLSurface
(
)
;
mEGLSurface
=
CreateEGLSurface
(
)
;
if
(
mEGLSurface
=
=
EGL_NO_SURFACE
)
{
RenderThread
:
:
Get
(
)
-
>
HandleWebRenderError
(
WebRenderError
:
:
NEW_SURFACE
)
;
}
}
if
(
mEGLSurface
=
=
EGL_NO_SURFACE
)
{
gfxCriticalNote
<
<
"
We
don
'
t
have
EGLSurface
to
draw
into
.
Called
too
early
?
"
;
return
false
;
}
if
(
mWidget
-
>
AsX11
(
)
)
{
mWidget
-
>
AsX11
(
)
-
>
SetEGLNativeWindowSize
(
GetBufferSize
(
)
)
;
}
#
endif
if
(
!
MakeCurrent
(
)
)
{
gfxCriticalNote
<
<
"
Failed
to
make
render
context
current
can
'
t
draw
.
"
;
return
false
;
}
#
ifdef
MOZ_WAYLAND
if
(
newSurface
)
{
const
auto
&
gle
=
gl
:
:
GLContextEGL
:
:
Cast
(
gl
(
)
)
;
const
auto
&
egl
=
gle
-
>
mEgl
;
egl
-
>
fSwapInterval
(
egl
-
>
Display
(
)
0
)
;
}
#
endif
#
ifdef
MOZ_WIDGET_ANDROID
java
:
:
GeckoSurfaceTexture
:
:
DestroyUnused
(
(
int64_t
)
gl
(
)
)
;
gl
(
)
-
>
MakeCurrent
(
)
;
#
endif
return
true
;
}
void
RenderCompositorEGL
:
:
EndFrame
(
const
FfiVec
<
DeviceIntRect
>
&
aDirtyRects
)
{
if
(
mEGLSurface
!
=
EGL_NO_SURFACE
)
{
gl
(
)
-
>
SwapBuffers
(
)
;
}
}
void
RenderCompositorEGL
:
:
Pause
(
)
{
#
ifdef
MOZ_WIDGET_ANDROID
java
:
:
GeckoSurfaceTexture
:
:
DestroyUnused
(
(
int64_t
)
gl
(
)
)
;
java
:
:
GeckoSurfaceTexture
:
:
DetachAllFromGLContext
(
(
int64_t
)
gl
(
)
)
;
DestroyEGLSurface
(
)
;
#
endif
}
bool
RenderCompositorEGL
:
:
Resume
(
)
{
#
ifdef
MOZ_WIDGET_ANDROID
DestroyEGLSurface
(
)
;
mEGLSurface
=
CreateEGLSurface
(
)
;
gl
:
:
GLContextEGL
:
:
Cast
(
gl
(
)
)
-
>
SetEGLSurfaceOverride
(
mEGLSurface
)
;
#
endif
return
true
;
}
gl
:
:
GLContext
*
RenderCompositorEGL
:
:
gl
(
)
const
{
return
RenderThread
:
:
Get
(
)
-
>
SharedGL
(
)
;
}
bool
RenderCompositorEGL
:
:
MakeCurrent
(
)
{
gl
:
:
GLContextEGL
:
:
Cast
(
gl
(
)
)
-
>
SetEGLSurfaceOverride
(
mEGLSurface
)
;
return
gl
(
)
-
>
MakeCurrent
(
)
;
}
void
RenderCompositorEGL
:
:
DestroyEGLSurface
(
)
{
const
auto
&
gle
=
gl
:
:
GLContextEGL
:
:
Cast
(
gl
(
)
)
;
const
auto
&
egl
=
gle
-
>
mEgl
;
if
(
mEGLSurface
)
{
gle
-
>
SetEGLSurfaceOverride
(
EGL_NO_SURFACE
)
;
egl
-
>
fDestroySurface
(
egl
-
>
Display
(
)
mEGLSurface
)
;
mEGLSurface
=
nullptr
;
}
}
LayoutDeviceIntSize
RenderCompositorEGL
:
:
GetBufferSize
(
)
{
return
mWidget
-
>
GetClientSize
(
)
;
}
}
}
