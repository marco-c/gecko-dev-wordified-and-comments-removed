#
ifndef
WR_h
#
define
WR_h
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
nsTArray
.
h
"
extern
"
C
"
{
bool
is_in_compositor_thread
(
)
;
bool
is_in_main_thread
(
)
;
bool
is_in_render_thread
(
)
;
bool
is_glcontext_egl
(
void
*
glcontext_ptr
)
;
bool
is_glcontext_angle
(
void
*
glcontext_ptr
)
;
bool
gfx_use_wrench
(
)
;
const
char
*
gfx_wr_resource_path_override
(
)
;
void
gfx_critical_note
(
const
char
*
msg
)
;
void
gfx_critical_error
(
const
char
*
msg
)
;
void
gecko_printf_stderr_output
(
const
char
*
msg
)
;
void
*
get_proc_address_from_glcontext
(
void
*
glcontext_ptr
const
char
*
procname
)
;
void
gecko_profiler_register_thread
(
const
char
*
threadname
)
;
void
gecko_profiler_unregister_thread
(
)
;
void
gecko_profiler_start_marker
(
const
char
*
name
)
;
void
gecko_profiler_end_marker
(
const
char
*
name
)
;
void
gecko_profiler_add_text_marker
(
const
char
*
name
const
char
*
text_ptr
size_t
text_len
uint64_t
microseconds
)
;
bool
gecko_profiler_thread_is_being_profiled
(
)
;
#
define
WEBRENDER_FOR_EACH_INTERNER
(
macro
)
\
macro
(
clip
)
;
\
macro
(
prim
)
;
\
macro
(
normal_border
)
;
\
macro
(
image_border
)
;
\
macro
(
image
)
;
\
macro
(
yuv_image
)
;
\
macro
(
line_decoration
)
;
\
macro
(
linear_grad
)
;
\
macro
(
radial_grad
)
;
\
macro
(
picture
)
;
\
macro
(
text_run
)
;
\
macro
(
filterdata
)
;
namespace
mozilla
{
namespace
wr
{
#
define
DECLARE_MEMBER
(
id
)
uintptr_t
id
;
struct
InternerSubReport
{
WEBRENDER_FOR_EACH_INTERNER
(
DECLARE_MEMBER
)
}
;
#
undef
DECLARE_MEMBER
struct
Transaction
;
struct
WrWindowId
;
struct
WrPipelineInfo
;
const
uint64_t
ROOT_CLIP_CHAIN
=
~
0
;
}
}
void
apz_register_updater
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
)
;
void
apz_pre_scene_swap
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
)
;
void
apz_post_scene_swap
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
mozilla
:
:
wr
:
:
WrPipelineInfo
aInfo
)
;
void
apz_run_updater
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
)
;
void
apz_deregister_updater
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
)
;
void
apz_register_sampler
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
)
;
void
apz_sample_transforms
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
mozilla
:
:
wr
:
:
Transaction
*
aTransaction
)
;
void
apz_deregister_sampler
(
mozilla
:
:
wr
:
:
WrWindowId
aWindowId
)
;
}
#
ifdef
MOZ_BUILD_WEBRENDER
#
define
WR_INLINE
#
define
WR_FUNC
#
define
WR_DESTRUCTOR_SAFE_FUNC
#
else
#
define
WR_INLINE
inline
#
define
WR_FUNC
\
{
MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE
(
"
WebRender
disabled
"
)
;
}
#
define
WR_DESTRUCTOR_SAFE_FUNC
\
{
}
#
endif
#
include
"
webrender_ffi_generated
.
h
"
#
undef
WR_FUNC
#
undef
WR_DESTRUCTOR_SAFE_FUNC
extern
"
C
"
{
void
record_telemetry_time
(
mozilla
:
:
wr
:
:
TelemetryProbe
aProbe
uint64_t
aTimeNs
)
;
}
namespace
mozilla
{
namespace
wr
{
inline
ImageKey
AsImageKey
(
BlobImageKey
aKey
)
{
return
aKey
.
_0
;
}
}
}
#
endif
