#
ifndef
WR_h
#
define
WR_h
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
nsTArray
.
h
"
extern
"
C
"
{
bool
is_in_compositor_thread
(
)
;
bool
is_in_main_thread
(
)
;
bool
is_in_render_thread
(
)
;
bool
is_glcontext_egl
(
void
*
glcontext_ptr
)
;
void
gfx_critical_note
(
const
char
*
msg
)
;
void
*
get_proc_address_from_glcontext
(
void
*
glcontext_ptr
const
char
*
procname
)
;
#
ifdef
MOZ_BUILD_WEBRENDER
#
define
WR_INLINE
#
define
WR_FUNC
#
define
WR_DESTRUCTOR_SAFE_FUNC
#
else
#
define
WR_INLINE
inline
#
define
WR_FUNC
{
MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE
(
"
WebRender
disabled
"
)
;
}
#
define
WR_DESTRUCTOR_SAFE_FUNC
{
}
#
endif
#
include
"
webrender_ffi_generated
.
h
"
#
undef
WR_FUNC
#
undef
WR_DESTRUCTOR_SAFE_FUNC
}
struct
WrGlyphArray
{
mozilla
:
:
gfx
:
:
Color
color
;
nsTArray
<
WrGlyphInstance
>
glyphs
;
bool
operator
=
=
(
const
WrGlyphArray
&
other
)
const
{
if
(
!
(
color
=
=
other
.
color
)
|
|
(
glyphs
.
Length
(
)
!
=
other
.
glyphs
.
Length
(
)
)
)
{
return
false
;
}
for
(
size_t
i
=
0
;
i
<
glyphs
.
Length
(
)
;
i
+
+
)
{
if
(
!
(
glyphs
[
i
]
=
=
other
.
glyphs
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
}
;
#
endif
