#
ifndef
MOZILLA_GFX_RENDERBUFFERTEXTUREHOST_H
#
define
MOZILLA_GFX_RENDERBUFFERTEXTUREHOST_H
#
include
"
RenderTextureHostSWGL
.
h
"
namespace
mozilla
{
namespace
wr
{
class
RenderBufferTextureHost
final
:
public
RenderTextureHostSWGL
{
public
:
RenderBufferTextureHost
(
uint8_t
*
aBuffer
const
layers
:
:
BufferDescriptor
&
aDescriptor
)
;
wr
:
:
WrExternalImage
Lock
(
uint8_t
aChannelIndex
gl
:
:
GLContext
*
aGL
)
override
;
void
Unlock
(
)
override
;
size_t
Bytes
(
)
override
{
return
mSize
.
width
*
mSize
.
height
*
BytesPerPixel
(
mFormat
)
;
}
class
RenderBufferData
{
public
:
RenderBufferData
(
uint8_t
*
aData
size_t
aBufferSize
)
:
mData
(
aData
)
mBufferSize
(
aBufferSize
)
{
}
const
uint8_t
*
mData
;
size_t
mBufferSize
;
}
;
RenderBufferData
GetBufferDataForRender
(
uint8_t
aChannelIndex
)
;
size_t
GetPlaneCount
(
)
const
override
;
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
;
gfx
:
:
ColorDepth
GetColorDepth
(
)
const
override
;
gfx
:
:
YUVRangedColorSpace
GetYUVColorSpace
(
)
const
override
;
bool
MapPlane
(
RenderCompositor
*
aCompositor
uint8_t
aChannelIndex
PlaneInfo
&
aPlaneInfo
)
override
;
void
UnmapPlanes
(
)
override
;
private
:
virtual
~
RenderBufferTextureHost
(
)
;
uint8_t
*
GetBuffer
(
)
const
{
return
mBuffer
;
}
uint8_t
*
mBuffer
;
layers
:
:
BufferDescriptor
mDescriptor
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
SurfaceFormat
mFormat
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mSurface
;
gfx
:
:
DataSourceSurface
:
:
MappedSurface
mMap
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mYSurface
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mCbSurface
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
mCrSurface
;
gfx
:
:
DataSourceSurface
:
:
MappedSurface
mYMap
;
gfx
:
:
DataSourceSurface
:
:
MappedSurface
mCbMap
;
gfx
:
:
DataSourceSurface
:
:
MappedSurface
mCrMap
;
bool
mLocked
;
}
;
}
}
#
endif
