#
ifndef
MOZILLA_GFX_RENDERCOMPOSITOR_OGL_H
#
define
MOZILLA_GFX_RENDERCOMPOSITOR_OGL_H
#
include
"
mozilla
/
webrender
/
RenderCompositor
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
namespace
mozilla
{
namespace
layers
{
class
NativeLayerRoot
;
class
NativeLayer
;
}
namespace
wr
{
class
RenderCompositorOGL
:
public
RenderCompositor
{
public
:
static
UniquePtr
<
RenderCompositor
>
Create
(
RefPtr
<
widget
:
:
CompositorWidget
>
&
&
aWidget
)
;
RenderCompositorOGL
(
RefPtr
<
gl
:
:
GLContext
>
&
&
aGL
RefPtr
<
widget
:
:
CompositorWidget
>
&
&
aWidget
)
;
virtual
~
RenderCompositorOGL
(
)
;
bool
BeginFrame
(
)
override
;
RenderedFrameId
EndFrame
(
const
FfiVec
<
DeviceIntRect
>
&
aDirtyRects
)
final
;
bool
WaitForGPU
(
)
override
;
void
Pause
(
)
override
;
bool
Resume
(
)
override
;
gl
:
:
GLContext
*
gl
(
)
const
override
{
return
mGL
;
}
bool
UseANGLE
(
)
const
override
{
return
false
;
}
LayoutDeviceIntSize
GetBufferSize
(
)
override
;
bool
ShouldUseNativeCompositor
(
)
override
;
uint32_t
GetMaxUpdateRects
(
)
override
;
void
CompositorBeginFrame
(
)
override
;
void
CompositorEndFrame
(
)
override
;
void
Bind
(
wr
:
:
NativeTileId
aId
wr
:
:
DeviceIntPoint
*
aOffset
uint32_t
*
aFboId
wr
:
:
DeviceIntRect
aDirtyRect
)
override
;
void
Unbind
(
)
override
;
void
CreateSurface
(
wr
:
:
NativeSurfaceId
aId
wr
:
:
DeviceIntSize
aTileSize
)
override
;
void
DestroySurface
(
NativeSurfaceId
aId
)
override
;
void
CreateTile
(
wr
:
:
NativeSurfaceId
aId
int32_t
aX
int32_t
aY
bool
aIsOpaque
)
override
;
void
DestroyTile
(
wr
:
:
NativeSurfaceId
aId
int32_t
aX
int32_t
aY
)
override
;
void
AddSurface
(
wr
:
:
NativeSurfaceId
aId
wr
:
:
DeviceIntPoint
aPosition
wr
:
:
DeviceIntRect
aClipRect
)
override
;
struct
TileKey
{
TileKey
(
int32_t
aX
int32_t
aY
)
:
mX
(
aX
)
mY
(
aY
)
{
}
int32_t
mX
;
int32_t
mY
;
}
;
protected
:
void
InsertFrameDoneSync
(
)
;
RefPtr
<
gl
:
:
GLContext
>
mGL
;
RefPtr
<
layers
:
:
NativeLayerRoot
>
mNativeLayerRoot
;
RefPtr
<
layers
:
:
NativeLayer
>
mNativeLayerForEntireWindow
;
struct
TileKeyHashFn
{
std
:
:
size_t
operator
(
)
(
const
TileKey
&
aId
)
const
{
return
HashGeneric
(
aId
.
mX
aId
.
mY
)
;
}
}
;
class
Surface
{
public
:
explicit
Surface
(
wr
:
:
DeviceIntSize
aTileSize
)
:
mTileSize
(
aTileSize
)
{
}
wr
:
:
DeviceIntSize
mTileSize
;
std
:
:
unordered_map
<
TileKey
RefPtr
<
layers
:
:
NativeLayer
>
TileKeyHashFn
>
mNativeLayers
;
}
;
struct
SurfaceIdHashFn
{
std
:
:
size_t
operator
(
)
(
const
wr
:
:
NativeSurfaceId
&
aId
)
const
{
return
HashGeneric
(
wr
:
:
AsUint64
(
aId
)
)
;
}
}
;
RefPtr
<
layers
:
:
NativeLayer
>
mCurrentlyBoundNativeLayer
;
nsTArray
<
RefPtr
<
layers
:
:
NativeLayer
>
>
mAddedLayers
;
uint64_t
mTotalPixelCount
=
0
;
uint64_t
mAddedPixelCount
=
0
;
uint64_t
mAddedClippedPixelCount
=
0
;
uint64_t
mDrawnPixelCount
=
0
;
gfx
:
:
IntRect
mVisibleBounds
;
std
:
:
unordered_map
<
wr
:
:
NativeSurfaceId
Surface
SurfaceIdHashFn
>
mSurfaces
;
TimeStamp
mBeginFrameTimeStamp
;
GLsync
mPreviousFrameDoneSync
;
GLsync
mThisFrameDoneSync
;
}
;
static
inline
bool
operator
=
=
(
const
RenderCompositorOGL
:
:
TileKey
&
a0
const
RenderCompositorOGL
:
:
TileKey
&
a1
)
{
return
a0
.
mX
=
=
a1
.
mX
&
&
a0
.
mY
=
=
a1
.
mY
;
}
}
}
#
endif
