#
ifndef
MOZILLA_GFX_RENDERTEXTUREHOSTWRAPPER_H
#
define
MOZILLA_GFX_RENDERTEXTUREHOSTWRAPPER_H
#
include
"
RenderTextureHostSWGL
.
h
"
namespace
mozilla
{
namespace
wr
{
class
RenderTextureHostWrapper
final
:
public
RenderTextureHostSWGL
{
public
:
explicit
RenderTextureHostWrapper
(
ExternalImageId
aExternalImageId
)
;
wr
:
:
WrExternalImage
Lock
(
uint8_t
aChannelIndex
gl
:
:
GLContext
*
aGL
)
override
;
void
Unlock
(
)
override
;
void
ClearCachedResources
(
)
override
;
void
PrepareForUse
(
)
override
;
void
NotifyForUse
(
)
override
;
void
NotifyNotUsed
(
)
override
;
bool
SyncObjectNeeded
(
)
override
;
RefPtr
<
layers
:
:
TextureSource
>
CreateTextureSource
(
layers
:
:
TextureSourceProvider
*
aProvider
)
override
;
RenderMacIOSurfaceTextureHost
*
AsRenderMacIOSurfaceTextureHost
(
)
override
;
RenderDXGITextureHost
*
AsRenderDXGITextureHost
(
)
override
;
RenderDXGIYCbCrTextureHost
*
AsRenderDXGIYCbCrTextureHost
(
)
override
;
RenderDcompSurfaceTextureHost
*
AsRenderDcompSurfaceTextureHost
(
)
override
;
RenderAndroidHardwareBufferTextureHost
*
AsRenderAndroidHardwareBufferTextureHost
(
)
override
;
RenderAndroidSurfaceTextureHost
*
AsRenderAndroidSurfaceTextureHost
(
)
override
;
RenderEGLImageTextureHost
*
AsRenderEGLImageTextureHost
(
)
override
;
RenderTextureHostSWGL
*
AsRenderTextureHostSWGL
(
)
override
;
void
SetIsSoftwareDecodedVideo
(
)
override
;
bool
IsSoftwareDecodedVideo
(
)
override
;
RefPtr
<
RenderTextureHostUsageInfo
>
GetOrMergeUsageInfo
(
const
MutexAutoLock
&
aProofOfMapLock
RefPtr
<
RenderTextureHostUsageInfo
>
aUsageInfo
)
override
;
RefPtr
<
RenderTextureHostUsageInfo
>
GetTextureHostUsageInfo
(
const
MutexAutoLock
&
aProofOfMapLock
)
override
;
size_t
GetPlaneCount
(
)
const
override
;
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
;
gfx
:
:
ColorDepth
GetColorDepth
(
)
const
override
;
gfx
:
:
YUVRangedColorSpace
GetYUVColorSpace
(
)
const
override
;
bool
MapPlane
(
RenderCompositor
*
aCompositor
uint8_t
aChannelIndex
PlaneInfo
&
aPlaneInfo
)
override
;
void
UnmapPlanes
(
)
override
;
size_t
Bytes
(
)
override
{
return
0
;
}
protected
:
std
:
:
pair
<
gfx
:
:
Point
gfx
:
:
Point
>
GetUvCoords
(
gfx
:
:
IntSize
aTextureSize
)
const
override
;
private
:
~
RenderTextureHostWrapper
(
)
override
;
void
EnsureTextureHost
(
)
const
;
RenderTextureHostSWGL
*
EnsureRenderTextureHostSWGL
(
)
const
;
ExternalImageId
mExternalImageId
;
mutable
RefPtr
<
RenderTextureHost
>
mTextureHost
;
}
;
}
}
#
endif
