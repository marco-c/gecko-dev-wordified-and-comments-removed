#
ifndef
MOZILLA_GFX_RENDERANDROIDSURFACETEXTUREHOSTOGL_H
#
define
MOZILLA_GFX_RENDERANDROIDSURFACETEXTUREHOSTOGL_H
#
include
"
GeneratedJNIWrappers
.
h
"
#
include
"
mozilla
/
layers
/
TextureHostOGL
.
h
"
#
include
"
RenderTextureHostOGL
.
h
"
namespace
mozilla
{
namespace
wr
{
class
RenderAndroidSurfaceTextureHostOGL
final
:
public
RenderTextureHostOGL
{
public
:
explicit
RenderAndroidSurfaceTextureHostOGL
(
const
java
:
:
GeckoSurfaceTexture
:
:
GlobalRef
&
aSurfTex
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
bool
aContinuousUpdate
)
;
wr
:
:
WrExternalImage
Lock
(
uint8_t
aChannelIndex
gl
:
:
GLContext
*
aGL
wr
:
:
ImageRendering
aRendering
)
override
;
void
Unlock
(
)
override
;
gfx
:
:
IntSize
GetSize
(
uint8_t
aChannelIndex
)
const
override
;
GLuint
GetGLHandle
(
uint8_t
aChannelIndex
)
const
override
;
virtual
void
PrepareForUse
(
)
override
;
virtual
void
NotifyNotUsed
(
)
override
;
void
DetachedFromGLContext
(
)
;
virtual
RenderAndroidSurfaceTextureHostOGL
*
AsRenderAndroidSurfaceTextureHostOGL
(
)
override
{
return
this
;
}
private
:
virtual
~
RenderAndroidSurfaceTextureHostOGL
(
)
;
void
DeleteTextureHandle
(
)
;
bool
EnsureAttachedToGLContext
(
)
;
enum
PrepareStatus
{
STATUS_NONE
STATUS_UPDATE_TEX_IMAGE_NEEDED
STATUS_PREPARED
}
;
const
mozilla
:
:
java
:
:
GeckoSurfaceTexture
:
:
GlobalRef
mSurfTex
;
const
gfx
:
:
IntSize
mSize
;
const
bool
mContinuousUpdate
;
PrepareStatus
mPrepareStatus
;
bool
mAttachedToGLContext
;
RefPtr
<
gl
:
:
GLContext
>
mGL
;
}
;
}
}
#
endif
