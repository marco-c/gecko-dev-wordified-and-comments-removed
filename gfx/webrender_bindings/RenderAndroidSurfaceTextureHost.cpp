#
include
"
RenderAndroidSurfaceTextureHost
.
h
"
#
include
"
GLReadTexImageHelper
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
AndroidSurfaceTexture
.
h
"
namespace
mozilla
{
namespace
wr
{
RenderAndroidSurfaceTextureHost
:
:
RenderAndroidSurfaceTextureHost
(
const
java
:
:
GeckoSurfaceTexture
:
:
GlobalRef
&
aSurfTex
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
bool
aContinuousUpdate
Maybe
<
gfx
:
:
Matrix4x4
>
aTransformOverride
)
:
mSurfTex
(
aSurfTex
)
mSize
(
aSize
)
mFormat
(
aFormat
)
mContinuousUpdate
(
aContinuousUpdate
)
mTransformOverride
(
aTransformOverride
)
mPrepareStatus
(
STATUS_NONE
)
mAttachedToGLContext
(
false
)
{
MOZ_COUNT_CTOR_INHERITED
(
RenderAndroidSurfaceTextureHost
RenderTextureHost
)
;
if
(
mSurfTex
)
{
mSurfTex
-
>
IncrementUse
(
)
;
}
}
RenderAndroidSurfaceTextureHost
:
:
~
RenderAndroidSurfaceTextureHost
(
)
{
MOZ_ASSERT
(
RenderThread
:
:
IsInRenderThread
(
)
)
;
MOZ_COUNT_DTOR_INHERITED
(
RenderAndroidSurfaceTextureHost
RenderTextureHost
)
;
if
(
mSurfTex
)
{
mSurfTex
-
>
DecrementUse
(
)
;
}
}
wr
:
:
WrExternalImage
RenderAndroidSurfaceTextureHost
:
:
Lock
(
uint8_t
aChannelIndex
gl
:
:
GLContext
*
aGL
)
{
MOZ_ASSERT
(
aChannelIndex
=
=
0
)
;
MOZ_ASSERT
(
(
mPrepareStatus
=
=
STATUS_PREPARED
)
|
|
(
!
mSurfTex
-
>
IsSingleBuffer
(
)
&
&
mPrepareStatus
=
=
STATUS_UPDATE_TEX_IMAGE_NEEDED
)
)
;
if
(
mGL
.
get
(
)
!
=
aGL
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
GL
context
"
)
;
return
InvalidToWrExternalImage
(
)
;
}
if
(
!
mSurfTex
|
|
!
mGL
|
|
!
mGL
-
>
MakeCurrent
(
)
)
{
return
InvalidToWrExternalImage
(
)
;
}
MOZ_ASSERT
(
mAttachedToGLContext
)
;
if
(
!
mAttachedToGLContext
)
{
return
InvalidToWrExternalImage
(
)
;
}
UpdateTexImageIfNecessary
(
)
;
const
auto
uvs
=
GetUvCoords
(
mSize
)
;
return
NativeTextureToWrExternalImage
(
mSurfTex
-
>
GetTexName
(
)
uvs
.
first
.
x
uvs
.
first
.
y
uvs
.
second
.
x
uvs
.
second
.
y
)
;
}
void
RenderAndroidSurfaceTextureHost
:
:
Unlock
(
)
{
}
bool
RenderAndroidSurfaceTextureHost
:
:
EnsureAttachedToGLContext
(
)
{
if
(
RenderThread
:
:
Get
(
)
-
>
IsHandlingWebRenderError
(
)
)
{
return
false
;
}
if
(
mAttachedToGLContext
)
{
return
true
;
}
if
(
!
mGL
)
{
mGL
=
RenderThread
:
:
Get
(
)
-
>
SingletonGL
(
)
;
}
if
(
!
mSurfTex
|
|
!
mGL
|
|
!
mGL
-
>
MakeCurrent
(
)
)
{
return
false
;
}
if
(
!
mSurfTex
-
>
IsAttachedToGLContext
(
(
int64_t
)
mGL
.
get
(
)
)
)
{
GLuint
texName
;
mGL
-
>
fGenTextures
(
1
&
texName
)
;
ActivateBindAndTexParameteri
(
mGL
LOCAL_GL_TEXTURE0
LOCAL_GL_TEXTURE_EXTERNAL_OES
texName
)
;
if
(
NS_FAILED
(
mSurfTex
-
>
AttachToGLContext
(
(
int64_t
)
mGL
.
get
(
)
texName
)
)
)
{
MOZ_ASSERT
(
0
)
;
mGL
-
>
fDeleteTextures
(
1
&
texName
)
;
return
false
;
}
}
mAttachedToGLContext
=
true
;
return
true
;
}
void
RenderAndroidSurfaceTextureHost
:
:
PrepareForUse
(
)
{
MOZ_ASSERT
(
RenderThread
:
:
IsInRenderThread
(
)
)
;
MOZ_ASSERT
(
mPrepareStatus
=
=
STATUS_NONE
)
;
if
(
mContinuousUpdate
|
|
!
mSurfTex
)
{
return
;
}
mPrepareStatus
=
STATUS_MIGHT_BE_USED_BY_WR
;
if
(
mSurfTex
-
>
IsSingleBuffer
(
)
)
{
EnsureAttachedToGLContext
(
)
;
mSurfTex
-
>
UpdateTexImage
(
)
;
mPrepareStatus
=
STATUS_PREPARED
;
}
}
void
RenderAndroidSurfaceTextureHost
:
:
NotifyForUse
(
)
{
MOZ_ASSERT
(
RenderThread
:
:
IsInRenderThread
(
)
)
;
if
(
mPrepareStatus
=
=
STATUS_MIGHT_BE_USED_BY_WR
)
{
MOZ_ASSERT
(
!
mSurfTex
-
>
IsSingleBuffer
(
)
)
;
if
(
!
EnsureAttachedToGLContext
(
)
)
{
return
;
}
mPrepareStatus
=
STATUS_UPDATE_TEX_IMAGE_NEEDED
;
}
}
void
RenderAndroidSurfaceTextureHost
:
:
NotifyNotUsed
(
)
{
MOZ_ASSERT
(
RenderThread
:
:
IsInRenderThread
(
)
)
;
if
(
!
mSurfTex
)
{
MOZ_ASSERT
(
mPrepareStatus
=
=
STATUS_NONE
)
;
return
;
}
if
(
mSurfTex
-
>
IsSingleBuffer
(
)
)
{
MOZ_ASSERT
(
mPrepareStatus
=
=
STATUS_PREPARED
)
;
MOZ_ASSERT
(
mAttachedToGLContext
)
;
mGL
-
>
MakeCurrent
(
)
;
mSurfTex
-
>
ReleaseTexImage
(
)
;
}
else
if
(
mPrepareStatus
=
=
STATUS_UPDATE_TEX_IMAGE_NEEDED
)
{
MOZ_ASSERT
(
mAttachedToGLContext
)
;
mSurfTex
-
>
UpdateTexImage
(
)
;
}
mPrepareStatus
=
STATUS_NONE
;
}
void
RenderAndroidSurfaceTextureHost
:
:
UpdateTexImageIfNecessary
(
)
{
if
(
mContinuousUpdate
)
{
MOZ_ASSERT
(
!
mSurfTex
-
>
IsSingleBuffer
(
)
)
;
mSurfTex
-
>
UpdateTexImage
(
)
;
}
else
if
(
mPrepareStatus
=
=
STATUS_UPDATE_TEX_IMAGE_NEEDED
)
{
MOZ_ASSERT
(
!
mSurfTex
-
>
IsSingleBuffer
(
)
)
;
mSurfTex
-
>
UpdateTexImage
(
)
;
mPrepareStatus
=
STATUS_PREPARED
;
}
}
gfx
:
:
SurfaceFormat
RenderAndroidSurfaceTextureHost
:
:
GetFormat
(
)
const
{
MOZ_ASSERT
(
mFormat
=
=
gfx
:
:
SurfaceFormat
:
:
R8G8B8A8
|
|
mFormat
=
=
gfx
:
:
SurfaceFormat
:
:
R8G8B8X8
)
;
if
(
mFormat
=
=
gfx
:
:
SurfaceFormat
:
:
R8G8B8A8
)
{
return
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
;
}
if
(
mFormat
=
=
gfx
:
:
SurfaceFormat
:
:
R8G8B8X8
)
{
return
gfx
:
:
SurfaceFormat
:
:
B8G8R8X8
;
}
gfxCriticalNoteOnce
<
<
"
Unexpected
color
format
of
RenderAndroidSurfaceTextureHost
"
;
return
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
;
}
already_AddRefed
<
DataSourceSurface
>
RenderAndroidSurfaceTextureHost
:
:
ReadTexImage
(
)
{
if
(
!
mGL
)
{
mGL
=
RenderThread
:
:
Get
(
)
-
>
SingletonGL
(
)
;
if
(
!
mGL
)
{
return
nullptr
;
}
}
int32_t
stride
=
mSize
.
width
*
BytesPerPixel
(
GetFormat
(
)
)
;
RefPtr
<
DataSourceSurface
>
surf
=
Factory
:
:
CreateDataSourceSurfaceWithStride
(
mSize
GetFormat
(
)
stride
)
;
if
(
!
surf
)
{
return
nullptr
;
}
layers
:
:
ShaderConfigOGL
config
=
layers
:
:
ShaderConfigFromTargetAndFormat
(
LOCAL_GL_TEXTURE_EXTERNAL
mFormat
)
;
int
shaderConfig
=
config
.
mFeatures
;
bool
ret
=
mGL
-
>
ReadTexImageHelper
(
)
-
>
ReadTexImage
(
surf
mSurfTex
-
>
GetTexName
(
)
LOCAL_GL_TEXTURE_EXTERNAL
mSize
shaderConfig
false
)
;
if
(
!
ret
)
{
return
nullptr
;
}
return
surf
.
forget
(
)
;
}
bool
RenderAndroidSurfaceTextureHost
:
:
MapPlane
(
RenderCompositor
*
aCompositor
uint8_t
aChannelIndex
PlaneInfo
&
aPlaneInfo
)
{
UpdateTexImageIfNecessary
(
)
;
RefPtr
<
gfx
:
:
DataSourceSurface
>
readback
=
ReadTexImage
(
)
;
if
(
!
readback
)
{
return
false
;
}
DataSourceSurface
:
:
MappedSurface
map
;
if
(
!
readback
-
>
Map
(
DataSourceSurface
:
:
MapType
:
:
READ
&
map
)
)
{
return
false
;
}
mReadback
=
readback
;
aPlaneInfo
.
mSize
=
mSize
;
aPlaneInfo
.
mStride
=
map
.
mStride
;
aPlaneInfo
.
mData
=
map
.
mData
;
return
true
;
}
void
RenderAndroidSurfaceTextureHost
:
:
UnmapPlanes
(
)
{
if
(
mReadback
)
{
mReadback
-
>
Unmap
(
)
;
mReadback
=
nullptr
;
}
}
std
:
:
pair
<
gfx
:
:
Point
gfx
:
:
Point
>
RenderAndroidSurfaceTextureHost
:
:
GetUvCoords
(
gfx
:
:
IntSize
aTextureSize
)
const
{
gfx
:
:
Matrix4x4
transform
;
if
(
mTransformOverride
)
{
transform
=
*
mTransformOverride
;
}
else
if
(
mSurfTex
)
{
const
auto
&
surf
=
java
:
:
sdk
:
:
SurfaceTexture
:
:
LocalRef
(
java
:
:
sdk
:
:
SurfaceTexture
:
:
Ref
:
:
From
(
mSurfTex
)
)
;
gl
:
:
AndroidSurfaceTexture
:
:
GetTransformMatrix
(
surf
&
transform
)
;
}
MOZ_ASSERT
(
transform
.
IsRectilinear
(
)
"
Unexpected
non
-
rectilinear
transform
returned
from
"
"
SurfaceTexture
.
GetTransformMatrix
(
)
"
)
;
transform
.
PostScale
(
aTextureSize
.
width
aTextureSize
.
height
0
.
0
)
;
gfx
:
:
Point
uv0
=
gfx
:
:
Point
(
0
.
0
0
.
0
)
;
gfx
:
:
Point
uv1
=
gfx
:
:
Point
(
1
.
0
1
.
0
)
;
uv0
=
transform
.
TransformPoint
(
uv0
)
;
uv1
=
transform
.
TransformPoint
(
uv1
)
;
return
std
:
:
make_pair
(
uv0
uv1
)
;
}
}
}
