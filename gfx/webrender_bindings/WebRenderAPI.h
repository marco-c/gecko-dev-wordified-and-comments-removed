#
ifndef
MOZILLA_LAYERS_WEBRENDERAPI_H
#
define
MOZILLA_LAYERS_WEBRENDERAPI_H
#
include
<
vector
>
#
include
<
unordered_map
>
#
include
<
unordered_set
>
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
gfx
/
CompositorHitTestInfo
.
h
"
#
include
"
mozilla
/
layers
/
SyncObject
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
webrender
/
webrender_ffi
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
GLTypes
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
struct
DisplayItemClipChain
;
namespace
widget
{
class
CompositorWidget
;
}
namespace
layers
{
class
CompositorBridgeParent
;
class
WebRenderBridgeParent
;
}
namespace
wr
{
class
DisplayListBuilder
;
class
RendererOGL
;
class
RendererEvent
;
struct
Line
{
wr
:
:
LayoutRect
bounds
;
float
wavyLineThickness
;
wr
:
:
LineOrientation
orientation
;
wr
:
:
ColorF
color
;
wr
:
:
LineStyle
style
;
}
;
class
TransactionBuilder
{
public
:
TransactionBuilder
(
)
;
~
TransactionBuilder
(
)
;
void
UpdateEpoch
(
PipelineId
aPipelineId
Epoch
aEpoch
)
;
void
SetRootPipeline
(
PipelineId
aPipelineId
)
;
void
RemovePipeline
(
PipelineId
aPipelineId
)
;
void
SetDisplayList
(
gfx
:
:
Color
aBgColor
Epoch
aEpoch
mozilla
:
:
LayerSize
aViewportSize
wr
:
:
WrPipelineId
pipeline_id
const
wr
:
:
LayoutSize
&
content_size
wr
:
:
BuiltDisplayListDescriptor
dl_descriptor
wr
:
:
Vec
<
uint8_t
>
&
dl_data
)
;
void
ClearDisplayList
(
Epoch
aEpoch
wr
:
:
WrPipelineId
aPipeline
)
;
void
GenerateFrame
(
)
;
void
UpdateDynamicProperties
(
const
nsTArray
<
wr
:
:
WrOpacityProperty
>
&
aOpacityArray
const
nsTArray
<
wr
:
:
WrTransformProperty
>
&
aTransformArray
)
;
void
AppendTransformProperties
(
const
nsTArray
<
wr
:
:
WrTransformProperty
>
&
aTransformArray
)
;
void
SetWindowParameters
(
const
LayoutDeviceIntSize
&
aWindowSize
const
LayoutDeviceIntRect
&
aDocRect
)
;
void
UpdateScrollPosition
(
const
wr
:
:
WrPipelineId
&
aPipelineId
const
layers
:
:
FrameMetrics
:
:
ViewID
&
aScrollId
const
wr
:
:
LayoutPoint
&
aScrollPosition
)
;
bool
IsEmpty
(
)
const
;
void
AddImage
(
wr
:
:
ImageKey
aKey
const
ImageDescriptor
&
aDescriptor
wr
:
:
Vec
<
uint8_t
>
&
aBytes
)
;
void
AddBlobImage
(
wr
:
:
ImageKey
aKey
const
ImageDescriptor
&
aDescriptor
wr
:
:
Vec
<
uint8_t
>
&
aBytes
)
;
void
AddExternalImageBuffer
(
ImageKey
key
const
ImageDescriptor
&
aDescriptor
ExternalImageId
aHandle
)
;
void
AddExternalImage
(
ImageKey
key
const
ImageDescriptor
&
aDescriptor
ExternalImageId
aExtID
wr
:
:
WrExternalImageBufferType
aBufferType
uint8_t
aChannelIndex
=
0
)
;
void
UpdateImageBuffer
(
wr
:
:
ImageKey
aKey
const
ImageDescriptor
&
aDescriptor
wr
:
:
Vec
<
uint8_t
>
&
aBytes
)
;
void
UpdateBlobImage
(
wr
:
:
ImageKey
aKey
const
ImageDescriptor
&
aDescriptor
wr
:
:
Vec
<
uint8_t
>
&
aBytes
const
wr
:
:
DeviceUintRect
&
aDirtyRect
)
;
void
UpdateExternalImage
(
ImageKey
aKey
const
ImageDescriptor
&
aDescriptor
ExternalImageId
aExtID
wr
:
:
WrExternalImageBufferType
aBufferType
uint8_t
aChannelIndex
=
0
)
;
void
DeleteImage
(
wr
:
:
ImageKey
aKey
)
;
void
AddRawFont
(
wr
:
:
FontKey
aKey
wr
:
:
Vec
<
uint8_t
>
&
aBytes
uint32_t
aIndex
)
;
void
AddFontDescriptor
(
wr
:
:
FontKey
aKey
wr
:
:
Vec
<
uint8_t
>
&
aBytes
uint32_t
aIndex
)
;
void
DeleteFont
(
wr
:
:
FontKey
aKey
)
;
void
AddFontInstance
(
wr
:
:
FontInstanceKey
aKey
wr
:
:
FontKey
aFontKey
float
aGlyphSize
const
wr
:
:
FontInstanceOptions
*
aOptions
const
wr
:
:
FontInstancePlatformOptions
*
aPlatformOptions
wr
:
:
Vec
<
uint8_t
>
&
aVariations
)
;
void
DeleteFontInstance
(
wr
:
:
FontInstanceKey
aKey
)
;
void
Clear
(
)
;
Transaction
*
Raw
(
)
{
return
mTxn
;
}
wr
:
:
ResourceUpdates
*
RawUpdates
(
)
{
return
mResourceUpdates
;
}
protected
:
Transaction
*
mTxn
;
wr
:
:
ResourceUpdates
*
mResourceUpdates
;
}
;
class
TransactionWrapper
{
public
:
explicit
TransactionWrapper
(
Transaction
*
aTxn
)
;
void
AppendTransformProperties
(
const
nsTArray
<
wr
:
:
WrTransformProperty
>
&
aTransformArray
)
;
void
UpdateScrollPosition
(
const
wr
:
:
WrPipelineId
&
aPipelineId
const
layers
:
:
FrameMetrics
:
:
ViewID
&
aScrollId
const
wr
:
:
LayoutPoint
&
aScrollPosition
)
;
private
:
Transaction
*
mTxn
;
}
;
class
WebRenderAPI
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WebRenderAPI
)
;
public
:
static
already_AddRefed
<
WebRenderAPI
>
Create
(
layers
:
:
CompositorBridgeParent
*
aBridge
RefPtr
<
widget
:
:
CompositorWidget
>
&
&
aWidget
const
wr
:
:
WrWindowId
&
aWindowId
LayoutDeviceIntSize
aSize
)
;
already_AddRefed
<
WebRenderAPI
>
CreateDocument
(
LayoutDeviceIntSize
aSize
int8_t
aLayerIndex
)
;
already_AddRefed
<
WebRenderAPI
>
Clone
(
)
;
wr
:
:
WindowId
GetId
(
)
const
{
return
mId
;
}
bool
HitTest
(
const
wr
:
:
WorldPoint
&
aPoint
wr
:
:
WrPipelineId
&
aOutPipelineId
layers
:
:
FrameMetrics
:
:
ViewID
&
aOutScrollId
gfx
:
:
CompositorHitTestInfo
&
aOutHitInfo
)
;
void
SendTransaction
(
TransactionBuilder
&
aTxn
)
;
void
SetFrameStartTime
(
const
TimeStamp
&
aTime
)
;
void
RunOnRenderThread
(
UniquePtr
<
RendererEvent
>
aEvent
)
;
void
Readback
(
gfx
:
:
IntSize
aSize
uint8_t
*
aBuffer
uint32_t
aBufferSize
)
;
void
Pause
(
)
;
bool
Resume
(
)
;
void
WakeSceneBuilder
(
)
;
void
FlushSceneBuilder
(
)
;
wr
:
:
WrIdNamespace
GetNamespace
(
)
;
uint32_t
GetMaxTextureSize
(
)
const
{
return
mMaxTextureSize
;
}
bool
GetUseANGLE
(
)
const
{
return
mUseANGLE
;
}
layers
:
:
SyncHandle
GetSyncHandle
(
)
const
{
return
mSyncHandle
;
}
void
Capture
(
)
;
protected
:
WebRenderAPI
(
wr
:
:
DocumentHandle
*
aHandle
wr
:
:
WindowId
aId
uint32_t
aMaxTextureSize
bool
aUseANGLE
layers
:
:
SyncHandle
aSyncHandle
)
:
mDocHandle
(
aHandle
)
mId
(
aId
)
mMaxTextureSize
(
aMaxTextureSize
)
mUseANGLE
(
aUseANGLE
)
mSyncHandle
(
aSyncHandle
)
{
}
~
WebRenderAPI
(
)
;
void
WaitFlushed
(
)
;
wr
:
:
DocumentHandle
*
mDocHandle
;
wr
:
:
WindowId
mId
;
uint32_t
mMaxTextureSize
;
bool
mUseANGLE
;
layers
:
:
SyncHandle
mSyncHandle
;
RefPtr
<
wr
:
:
WebRenderAPI
>
mRootApi
;
RefPtr
<
wr
:
:
WebRenderAPI
>
mRootDocumentApi
;
friend
class
DisplayListBuilder
;
friend
class
layers
:
:
WebRenderBridgeParent
;
}
;
class
MOZ_RAII
AutoTransactionSender
{
public
:
AutoTransactionSender
(
WebRenderAPI
*
aApi
TransactionBuilder
*
aTxn
)
:
mApi
(
aApi
)
mTxn
(
aTxn
)
{
}
~
AutoTransactionSender
(
)
{
mApi
-
>
SendTransaction
(
*
mTxn
)
;
}
private
:
WebRenderAPI
*
mApi
;
TransactionBuilder
*
mTxn
;
}
;
class
DisplayListBuilder
{
public
:
explicit
DisplayListBuilder
(
wr
:
:
PipelineId
aId
const
wr
:
:
LayoutSize
&
aContentSize
size_t
aCapacity
=
0
)
;
DisplayListBuilder
(
DisplayListBuilder
&
&
)
=
default
;
~
DisplayListBuilder
(
)
;
void
Save
(
)
;
void
Restore
(
)
;
void
ClearSave
(
)
;
void
Dump
(
)
;
void
Finalize
(
wr
:
:
LayoutSize
&
aOutContentSize
wr
:
:
BuiltDisplayList
&
aOutDisplayList
)
;
void
PushStackingContext
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
WrClipId
*
aClipNodeId
const
wr
:
:
WrAnimationProperty
*
aAnimation
const
float
*
aOpacity
const
gfx
:
:
Matrix4x4
*
aTransform
wr
:
:
TransformStyle
aTransformStyle
const
gfx
:
:
Matrix4x4
*
aPerspective
const
wr
:
:
MixBlendMode
&
aMixBlendMode
const
nsTArray
<
wr
:
:
WrFilterOp
>
&
aFilters
bool
aIsBackfaceVisible
const
wr
:
:
GlyphRasterSpace
&
aRasterSpace
)
;
void
PopStackingContext
(
)
;
wr
:
:
WrClipId
DefineClip
(
const
Maybe
<
wr
:
:
WrScrollId
>
&
aAncestorScrollId
const
Maybe
<
wr
:
:
WrClipId
>
&
aAncestorClipId
const
wr
:
:
LayoutRect
&
aClipRect
const
nsTArray
<
wr
:
:
ComplexClipRegion
>
*
aComplex
=
nullptr
const
wr
:
:
WrImageMask
*
aMask
=
nullptr
)
;
void
PushClip
(
const
wr
:
:
WrClipId
&
aClipId
const
DisplayItemClipChain
*
aParent
=
nullptr
)
;
void
PopClip
(
const
DisplayItemClipChain
*
aParent
=
nullptr
)
;
Maybe
<
wr
:
:
WrClipId
>
GetCacheOverride
(
const
DisplayItemClipChain
*
aParent
)
;
wr
:
:
WrStickyId
DefineStickyFrame
(
const
wr
:
:
LayoutRect
&
aContentRect
const
float
*
aTopMargin
const
float
*
aRightMargin
const
float
*
aBottomMargin
const
float
*
aLeftMargin
const
StickyOffsetBounds
&
aVerticalBounds
const
StickyOffsetBounds
&
aHorizontalBounds
const
wr
:
:
LayoutVector2D
&
aAppliedOffset
)
;
void
PushStickyFrame
(
const
wr
:
:
WrStickyId
&
aStickyId
const
DisplayItemClipChain
*
aParent
)
;
void
PopStickyFrame
(
const
DisplayItemClipChain
*
aParent
)
;
Maybe
<
wr
:
:
WrScrollId
>
GetScrollIdForDefinedScrollLayer
(
layers
:
:
FrameMetrics
:
:
ViewID
aViewId
)
const
;
wr
:
:
WrScrollId
DefineScrollLayer
(
const
layers
:
:
FrameMetrics
:
:
ViewID
&
aViewId
const
Maybe
<
wr
:
:
WrScrollId
>
&
aAncestorScrollId
const
Maybe
<
wr
:
:
WrClipId
>
&
aAncestorClipId
const
wr
:
:
LayoutRect
&
aContentRect
const
wr
:
:
LayoutRect
&
aClipRect
)
;
void
PushScrollLayer
(
const
wr
:
:
WrScrollId
&
aScrollId
)
;
void
PopScrollLayer
(
)
;
void
PushClipAndScrollInfo
(
const
wr
:
:
WrScrollId
&
aScrollId
const
wr
:
:
WrClipId
*
aClipId
)
;
void
PopClipAndScrollInfo
(
)
;
void
PushRect
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
ColorF
&
aColor
)
;
void
PushClearRect
(
const
wr
:
:
LayoutRect
&
aBounds
)
;
void
PushLinearGradient
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
LayoutPoint
&
aStartPoint
const
wr
:
:
LayoutPoint
&
aEndPoint
const
nsTArray
<
wr
:
:
GradientStop
>
&
aStops
wr
:
:
ExtendMode
aExtendMode
const
wr
:
:
LayoutSize
aTileSize
const
wr
:
:
LayoutSize
aTileSpacing
)
;
void
PushRadialGradient
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
LayoutPoint
&
aCenter
const
wr
:
:
LayoutSize
&
aRadius
const
nsTArray
<
wr
:
:
GradientStop
>
&
aStops
wr
:
:
ExtendMode
aExtendMode
const
wr
:
:
LayoutSize
aTileSize
const
wr
:
:
LayoutSize
aTileSpacing
)
;
void
PushImage
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
wr
:
:
ImageRendering
aFilter
wr
:
:
ImageKey
aImage
bool
aPremultipliedAlpha
=
true
)
;
void
PushImage
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
LayoutSize
&
aStretchSize
const
wr
:
:
LayoutSize
&
aTileSpacing
wr
:
:
ImageRendering
aFilter
wr
:
:
ImageKey
aImage
bool
aPremultipliedAlpha
=
true
)
;
void
PushYCbCrPlanarImage
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
wr
:
:
ImageKey
aImageChannel0
wr
:
:
ImageKey
aImageChannel1
wr
:
:
ImageKey
aImageChannel2
wr
:
:
WrYuvColorSpace
aColorSpace
wr
:
:
ImageRendering
aFilter
)
;
void
PushNV12Image
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
wr
:
:
ImageKey
aImageChannel0
wr
:
:
ImageKey
aImageChannel1
wr
:
:
WrYuvColorSpace
aColorSpace
wr
:
:
ImageRendering
aFilter
)
;
void
PushYCbCrInterleavedImage
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
wr
:
:
ImageKey
aImageChannel0
wr
:
:
WrYuvColorSpace
aColorSpace
wr
:
:
ImageRendering
aFilter
)
;
void
PushIFrame
(
const
wr
:
:
LayoutRect
&
aBounds
bool
aIsBackfaceVisible
wr
:
:
PipelineId
aPipeline
)
;
void
PushBorder
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
BorderWidths
&
aWidths
const
Range
<
const
wr
:
:
BorderSide
>
&
aSides
const
wr
:
:
BorderRadius
&
aRadius
)
;
void
PushBorderImage
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
BorderWidths
&
aWidths
wr
:
:
ImageKey
aImage
const
wr
:
:
NinePatchDescriptor
&
aPatch
const
wr
:
:
SideOffsets2D
<
float
>
&
aOutset
const
wr
:
:
RepeatMode
&
aRepeatHorizontal
const
wr
:
:
RepeatMode
&
aRepeatVertical
)
;
void
PushBorderGradient
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
BorderWidths
&
aWidths
const
wr
:
:
LayoutPoint
&
aStartPoint
const
wr
:
:
LayoutPoint
&
aEndPoint
const
nsTArray
<
wr
:
:
GradientStop
>
&
aStops
wr
:
:
ExtendMode
aExtendMode
const
wr
:
:
SideOffsets2D
<
float
>
&
aOutset
)
;
void
PushBorderRadialGradient
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
BorderWidths
&
aWidths
const
wr
:
:
LayoutPoint
&
aCenter
const
wr
:
:
LayoutSize
&
aRadius
const
nsTArray
<
wr
:
:
GradientStop
>
&
aStops
wr
:
:
ExtendMode
aExtendMode
const
wr
:
:
SideOffsets2D
<
float
>
&
aOutset
)
;
void
PushText
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
ColorF
&
aColor
wr
:
:
FontInstanceKey
aFontKey
Range
<
const
wr
:
:
GlyphInstance
>
aGlyphBuffer
const
wr
:
:
GlyphOptions
*
aGlyphOptions
=
nullptr
)
;
void
PushLine
(
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
Line
&
aLine
)
;
void
PushShadow
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
Shadow
&
aShadow
)
;
void
PopAllShadows
(
)
;
void
PushBoxShadow
(
const
wr
:
:
LayoutRect
&
aRect
const
wr
:
:
LayoutRect
&
aClip
bool
aIsBackfaceVisible
const
wr
:
:
LayoutRect
&
aBoxBounds
const
wr
:
:
LayoutVector2D
&
aOffset
const
wr
:
:
ColorF
&
aColor
const
float
&
aBlurRadius
const
float
&
aSpreadRadius
const
wr
:
:
BorderRadius
&
aBorderRadius
const
wr
:
:
BoxShadowClipMode
&
aClipMode
)
;
Maybe
<
wr
:
:
WrClipId
>
TopmostClipId
(
)
;
wr
:
:
WrScrollId
TopmostScrollId
(
)
;
bool
TopmostIsClip
(
)
;
void
SetHitTestInfo
(
const
layers
:
:
FrameMetrics
:
:
ViewID
&
aScrollId
gfx
:
:
CompositorHitTestInfo
aHitInfo
)
;
void
ClearHitTestInfo
(
)
;
wr
:
:
WrState
*
Raw
(
)
{
return
mWrState
;
}
bool
HasExtraClip
(
)
{
return
!
mCacheOverride
.
empty
(
)
;
}
protected
:
void
PushCacheOverride
(
const
DisplayItemClipChain
*
aParent
const
wr
:
:
WrClipId
&
aClipId
)
;
void
PopCacheOverride
(
const
DisplayItemClipChain
*
aParent
)
;
wr
:
:
WrState
*
mWrState
;
std
:
:
vector
<
wr
:
:
ScrollOrClipId
>
mClipStack
;
std
:
:
unordered_map
<
layers
:
:
FrameMetrics
:
:
ViewID
wr
:
:
WrScrollId
>
mScrollIds
;
std
:
:
unordered_map
<
const
DisplayItemClipChain
*
std
:
:
vector
<
wr
:
:
WrClipId
>
>
mCacheOverride
;
friend
class
WebRenderAPI
;
}
;
Maybe
<
wr
:
:
ImageFormat
>
SurfaceFormatToImageFormat
(
gfx
:
:
SurfaceFormat
aFormat
)
;
}
}
#
endif
