#
ifndef
MOZILLA_LAYERS_WEBRENDERAPI_H
#
define
MOZILLA_LAYERS_WEBRENDERAPI_H
#
include
<
vector
>
#
include
<
unordered_map
>
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Range
.
h
"
#
include
"
mozilla
/
webrender
/
webrender_ffi
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
GLTypes
.
h
"
#
include
"
Units
.
h
"
namespace
mozilla
{
namespace
widget
{
class
CompositorWidget
;
}
namespace
layers
{
class
CompositorBridgeParentBase
;
class
WebRenderBridgeParent
;
}
namespace
wr
{
class
DisplayListBuilder
;
class
RendererOGL
;
class
RendererEvent
;
class
WebRenderAPI
{
NS_INLINE_DECL_REFCOUNTING
(
WebRenderAPI
)
;
public
:
static
already_AddRefed
<
WebRenderAPI
>
Create
(
bool
aEnableProfiler
layers
:
:
CompositorBridgeParentBase
*
aBridge
RefPtr
<
widget
:
:
CompositorWidget
>
&
&
aWidget
LayoutDeviceIntSize
aSize
)
;
wr
:
:
WindowId
GetId
(
)
const
{
return
mId
;
}
void
UpdateScrollPosition
(
const
wr
:
:
WrPipelineId
&
aPipelineId
const
layers
:
:
FrameMetrics
:
:
ViewID
&
aScrollId
const
wr
:
:
LayoutPoint
&
aScrollPosition
)
;
void
GenerateFrame
(
)
;
void
GenerateFrame
(
const
nsTArray
<
wr
:
:
WrOpacityProperty
>
&
aOpacityArray
const
nsTArray
<
wr
:
:
WrTransformProperty
>
&
aTransformArray
)
;
void
SetWindowParameters
(
LayoutDeviceIntSize
size
)
;
void
SetRootDisplayList
(
gfx
:
:
Color
aBgColor
Epoch
aEpoch
LayerSize
aViewportSize
wr
:
:
WrPipelineId
pipeline_id
const
wr
:
:
LayoutSize
&
content_size
wr
:
:
BuiltDisplayListDescriptor
dl_descriptor
uint8_t
*
dl_data
size_t
dl_size
)
;
void
ClearRootDisplayList
(
Epoch
aEpoch
wr
:
:
WrPipelineId
pipeline_id
)
;
void
SetRootPipeline
(
wr
:
:
PipelineId
aPipeline
)
;
void
AddImage
(
wr
:
:
ImageKey
aKey
const
ImageDescriptor
&
aDescriptor
Range
<
uint8_t
>
aBytes
)
;
void
AddBlobImage
(
wr
:
:
ImageKey
aKey
const
ImageDescriptor
&
aDescriptor
Range
<
uint8_t
>
aBytes
)
;
void
AddExternalImageBuffer
(
ImageKey
key
const
ImageDescriptor
&
aDescriptor
ExternalImageId
aHandle
)
;
void
AddExternalImage
(
ImageKey
key
const
ImageDescriptor
&
aDescriptor
ExternalImageId
aExtID
WrExternalImageBufferType
aBufferType
uint8_t
aChannelIndex
)
;
void
UpdateImageBuffer
(
wr
:
:
ImageKey
aKey
const
ImageDescriptor
&
aDescriptor
Range
<
uint8_t
>
aBytes
)
;
void
DeleteImage
(
wr
:
:
ImageKey
aKey
)
;
void
AddRawFont
(
wr
:
:
FontKey
aKey
Range
<
uint8_t
>
aBytes
uint32_t
aIndex
)
;
void
DeleteFont
(
wr
:
:
FontKey
aKey
)
;
void
SetProfilerEnabled
(
bool
aEnabled
)
;
void
RunOnRenderThread
(
UniquePtr
<
RendererEvent
>
aEvent
)
;
void
Readback
(
gfx
:
:
IntSize
aSize
uint8_t
*
aBuffer
uint32_t
aBufferSize
)
;
void
Pause
(
)
;
bool
Resume
(
)
;
wr
:
:
WrIdNamespace
GetNamespace
(
)
;
GLint
GetMaxTextureSize
(
)
const
{
return
mMaxTextureSize
;
}
bool
GetUseANGLE
(
)
const
{
return
mUseANGLE
;
}
protected
:
WebRenderAPI
(
wr
:
:
RenderApi
*
aRawApi
wr
:
:
WindowId
aId
GLint
aMaxTextureSize
bool
aUseANGLE
)
:
mRenderApi
(
aRawApi
)
mId
(
aId
)
mMaxTextureSize
(
aMaxTextureSize
)
mUseANGLE
(
aUseANGLE
)
{
}
~
WebRenderAPI
(
)
;
void
WaitFlushed
(
)
;
wr
:
:
RenderApi
*
mRenderApi
;
wr
:
:
WindowId
mId
;
GLint
mMaxTextureSize
;
bool
mUseANGLE
;
friend
class
DisplayListBuilder
;
friend
class
layers
:
:
WebRenderBridgeParent
;
}
;
class
DisplayListBuilder
{
public
:
explicit
DisplayListBuilder
(
wr
:
:
PipelineId
aId
const
wr
:
:
LayoutSize
&
aContentSize
)
;
DisplayListBuilder
(
DisplayListBuilder
&
&
)
=
default
;
~
DisplayListBuilder
(
)
;
void
Begin
(
const
LayerIntSize
&
aSize
)
;
void
End
(
)
;
void
Finalize
(
wr
:
:
LayoutSize
&
aOutContentSize
wr
:
:
BuiltDisplayList
&
aOutDisplayList
)
;
void
PushStackingContext
(
const
wr
:
:
LayoutRect
&
aBounds
const
uint64_t
&
aAnimationId
const
float
*
aOpacity
const
gfx
:
:
Matrix4x4
*
aTransform
wr
:
:
TransformStyle
aTransformStyle
const
wr
:
:
MixBlendMode
&
aMixBlendMode
const
nsTArray
<
wr
:
:
WrFilterOp
>
&
aFilters
)
;
void
PopStackingContext
(
)
;
void
PushClip
(
const
wr
:
:
LayoutRect
&
aClipRect
const
wr
:
:
WrImageMask
*
aMask
)
;
void
PopClip
(
)
;
void
PushBuiltDisplayList
(
wr
:
:
BuiltDisplayList
&
dl
)
;
void
PushScrollLayer
(
const
layers
:
:
FrameMetrics
:
:
ViewID
&
aScrollId
const
wr
:
:
LayoutRect
&
aContentRect
const
wr
:
:
LayoutRect
&
aClipRect
)
;
void
PopScrollLayer
(
)
;
void
PushClipAndScrollInfo
(
const
layers
:
:
FrameMetrics
:
:
ViewID
&
aScrollId
const
wr
:
:
WrClipId
*
aClipId
)
;
void
PopClipAndScrollInfo
(
)
;
void
PushRect
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
const
wr
:
:
ColorF
&
aColor
)
;
void
PushLinearGradient
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
const
wr
:
:
LayoutPoint
&
aStartPoint
const
wr
:
:
LayoutPoint
&
aEndPoint
const
nsTArray
<
wr
:
:
GradientStop
>
&
aStops
wr
:
:
ExtendMode
aExtendMode
const
wr
:
:
LayoutSize
aTileSize
const
wr
:
:
LayoutSize
aTileSpacing
)
;
void
PushRadialGradient
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
const
wr
:
:
LayoutPoint
&
aCenter
const
wr
:
:
LayoutSize
&
aRadius
const
nsTArray
<
wr
:
:
GradientStop
>
&
aStops
wr
:
:
ExtendMode
aExtendMode
const
wr
:
:
LayoutSize
aTileSize
const
wr
:
:
LayoutSize
aTileSpacing
)
;
void
PushImage
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
wr
:
:
ImageRendering
aFilter
wr
:
:
ImageKey
aImage
)
;
void
PushImage
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
const
wr
:
:
LayoutSize
&
aStretchSize
const
wr
:
:
LayoutSize
&
aTileSpacing
wr
:
:
ImageRendering
aFilter
wr
:
:
ImageKey
aImage
)
;
void
PushYCbCrPlanarImage
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
wr
:
:
ImageKey
aImageChannel0
wr
:
:
ImageKey
aImageChannel1
wr
:
:
ImageKey
aImageChannel2
wr
:
:
WrYuvColorSpace
aColorSpace
wr
:
:
ImageRendering
aFilter
)
;
void
PushNV12Image
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
wr
:
:
ImageKey
aImageChannel0
wr
:
:
ImageKey
aImageChannel1
wr
:
:
WrYuvColorSpace
aColorSpace
wr
:
:
ImageRendering
aFilter
)
;
void
PushYCbCrInterleavedImage
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
wr
:
:
ImageKey
aImageChannel0
wr
:
:
WrYuvColorSpace
aColorSpace
wr
:
:
ImageRendering
aFilter
)
;
void
PushIFrame
(
const
wr
:
:
LayoutRect
&
aBounds
wr
:
:
PipelineId
aPipeline
)
;
void
PushBorder
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
const
wr
:
:
BorderWidths
&
aWidths
const
Range
<
const
wr
:
:
BorderSide
>
&
aSides
const
wr
:
:
BorderRadius
&
aRadius
)
;
void
PushBorderImage
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
const
wr
:
:
BorderWidths
&
aWidths
wr
:
:
ImageKey
aImage
const
wr
:
:
NinePatchDescriptor
&
aPatch
const
wr
:
:
SideOffsets2D_f32
&
aOutset
const
wr
:
:
RepeatMode
&
aRepeatHorizontal
const
wr
:
:
RepeatMode
&
aRepeatVertical
)
;
void
PushBorderGradient
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
const
wr
:
:
BorderWidths
&
aWidths
const
wr
:
:
LayoutPoint
&
aStartPoint
const
wr
:
:
LayoutPoint
&
aEndPoint
const
nsTArray
<
wr
:
:
GradientStop
>
&
aStops
wr
:
:
ExtendMode
aExtendMode
const
wr
:
:
SideOffsets2D_f32
&
aOutset
)
;
void
PushBorderRadialGradient
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
const
wr
:
:
BorderWidths
&
aWidths
const
wr
:
:
LayoutPoint
&
aCenter
const
wr
:
:
LayoutSize
&
aRadius
const
nsTArray
<
wr
:
:
GradientStop
>
&
aStops
wr
:
:
ExtendMode
aExtendMode
const
wr
:
:
SideOffsets2D_f32
&
aOutset
)
;
void
PushText
(
const
wr
:
:
LayoutRect
&
aBounds
const
wr
:
:
LayoutRect
&
aClip
const
gfx
:
:
Color
&
aColor
wr
:
:
FontKey
aFontKey
Range
<
const
wr
:
:
GlyphInstance
>
aGlyphBuffer
float
aGlyphSize
)
;
void
PushBoxShadow
(
const
wr
:
:
LayoutRect
&
aRect
const
wr
:
:
LayoutRect
&
aClip
const
wr
:
:
LayoutRect
&
aBoxBounds
const
wr
:
:
LayoutVector2D
&
aOffset
const
wr
:
:
ColorF
&
aColor
const
float
&
aBlurRadius
const
float
&
aSpreadRadius
const
float
&
aBorderRadius
const
wr
:
:
BoxShadowClipMode
&
aClipMode
)
;
Maybe
<
wr
:
:
WrClipId
>
TopmostClipId
(
)
;
Maybe
<
layers
:
:
FrameMetrics
:
:
ViewID
>
ParentScrollIdFor
(
layers
:
:
FrameMetrics
:
:
ViewID
aScrollId
)
;
wr
:
:
WrState
*
Raw
(
)
{
return
mWrState
;
}
protected
:
wr
:
:
WrState
*
mWrState
;
std
:
:
vector
<
wr
:
:
WrClipId
>
mClipIdStack
;
std
:
:
vector
<
layers
:
:
FrameMetrics
:
:
ViewID
>
mScrollIdStack
;
std
:
:
unordered_map
<
layers
:
:
FrameMetrics
:
:
ViewID
layers
:
:
FrameMetrics
:
:
ViewID
>
mScrollParents
;
friend
class
WebRenderAPI
;
}
;
Maybe
<
wr
:
:
ImageFormat
>
SurfaceFormatToImageFormat
(
gfx
:
:
SurfaceFormat
aFormat
)
;
}
}
#
endif
