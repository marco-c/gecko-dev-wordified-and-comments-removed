#
include
"
RenderTextureHostWrapper
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
layers
/
ImageDataSerializer
.
h
"
#
include
"
mozilla
/
layers
/
SourceSurfaceSharedData
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
namespace
mozilla
{
namespace
wr
{
RenderTextureHostWrapper
:
:
RenderTextureHostWrapper
(
)
:
mInited
(
false
)
mLocked
(
false
)
{
MOZ_COUNT_CTOR_INHERITED
(
RenderTextureHostWrapper
RenderTextureHost
)
;
}
RenderTextureHostWrapper
:
:
~
RenderTextureHostWrapper
(
)
{
MOZ_COUNT_DTOR_INHERITED
(
RenderTextureHostWrapper
RenderTextureHost
)
;
}
wr
:
:
WrExternalImage
RenderTextureHostWrapper
:
:
Lock
(
uint8_t
aChannelIndex
gl
:
:
GLContext
*
aGL
wr
:
:
ImageRendering
aRendering
)
{
if
(
!
mTextureHost
)
{
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
happen
"
)
;
return
InvalidToWrExternalImage
(
)
;
}
mLocked
=
true
;
return
mTextureHost
-
>
Lock
(
aChannelIndex
aGL
aRendering
)
;
}
void
RenderTextureHostWrapper
:
:
Unlock
(
)
{
if
(
mTextureHost
)
{
mTextureHost
-
>
Unlock
(
)
;
}
mLocked
=
false
;
}
void
RenderTextureHostWrapper
:
:
ClearCachedResources
(
)
{
if
(
mTextureHost
)
{
mTextureHost
-
>
ClearCachedResources
(
)
;
}
}
void
RenderTextureHostWrapper
:
:
UpdateRenderTextureHost
(
RenderTextureHost
*
aTextureHost
)
{
MOZ_ASSERT
(
RenderThread
:
:
IsInRenderThread
(
)
)
;
MOZ_RELEASE_ASSERT
(
!
mLocked
)
;
mInited
=
true
;
mTextureHost
=
aTextureHost
;
}
}
}
