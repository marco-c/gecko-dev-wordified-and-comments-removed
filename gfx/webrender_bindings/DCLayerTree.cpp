#
include
"
DCLayerTree
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
GLContextEGL
.
h
"
#
include
"
mozilla
/
gfx
/
DeviceManagerDx
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
gfx
/
GPUParent
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
StaticPrefs_gfx
.
h
"
#
include
"
mozilla
/
webrender
/
RenderD3D11TextureHost
.
h
"
#
include
"
mozilla
/
webrender
/
RenderTextureHost
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
WinUtils
.
h
"
#
undef
_WIN32_WINNT
#
define
_WIN32_WINNT
_WIN32_WINNT_WINBLUE
#
undef
NTDDI_VERSION
#
define
NTDDI_VERSION
NTDDI_WINBLUE
#
include
<
d3d11
.
h
>
#
include
<
d3d11_1
.
h
>
#
include
<
dcomp
.
h
>
#
include
<
dxgi1_2
.
h
>
namespace
mozilla
{
namespace
wr
{
extern
LazyLogModule
gRenderThreadLog
;
#
define
LOG
(
.
.
.
)
MOZ_LOG
(
gRenderThreadLog
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
UniquePtr
<
GpuOverlayInfo
>
DCLayerTree
:
:
sGpuOverlayInfo
;
UniquePtr
<
DCLayerTree
>
DCLayerTree
:
:
Create
(
gl
:
:
GLContext
*
aGL
EGLConfig
aEGLConfig
ID3D11Device
*
aDevice
ID3D11DeviceContext
*
aCtx
HWND
aHwnd
nsACString
&
aError
)
{
RefPtr
<
IDCompositionDevice2
>
dCompDevice
=
gfx
:
:
DeviceManagerDx
:
:
Get
(
)
-
>
GetDirectCompositionDevice
(
)
;
if
(
!
dCompDevice
)
{
aError
.
Assign
(
"
DCLayerTree
(
no
device
)
"
_ns
)
;
return
nullptr
;
}
auto
layerTree
=
MakeUnique
<
DCLayerTree
>
(
aGL
aEGLConfig
aDevice
aCtx
dCompDevice
)
;
if
(
!
layerTree
-
>
Initialize
(
aHwnd
aError
)
)
{
return
nullptr
;
}
return
layerTree
;
}
void
DCLayerTree
:
:
Shutdown
(
)
{
DCLayerTree
:
:
sGpuOverlayInfo
=
nullptr
;
}
DCLayerTree
:
:
DCLayerTree
(
gl
:
:
GLContext
*
aGL
EGLConfig
aEGLConfig
ID3D11Device
*
aDevice
ID3D11DeviceContext
*
aCtx
IDCompositionDevice2
*
aCompositionDevice
)
:
mGL
(
aGL
)
mEGLConfig
(
aEGLConfig
)
mDevice
(
aDevice
)
mCtx
(
aCtx
)
mCompositionDevice
(
aCompositionDevice
)
mDebugCounter
(
false
)
mDebugVisualRedrawRegions
(
false
)
mEGLImage
(
EGL_NO_IMAGE
)
mColorRBO
(
0
)
mPendingCommit
(
false
)
{
LOG
(
"
DCLayerTree
:
:
DCLayerTree
(
)
"
)
;
}
DCLayerTree
:
:
~
DCLayerTree
(
)
{
LOG
(
"
DCLayerTree
:
:
~
DCLayerTree
(
)
"
)
;
ReleaseNativeCompositorResources
(
)
;
}
void
DCLayerTree
:
:
ReleaseNativeCompositorResources
(
)
{
const
auto
gl
=
GetGLContext
(
)
;
DestroyEGLSurface
(
)
;
for
(
auto
it
=
mFrameBuffers
.
begin
(
)
;
it
!
=
mFrameBuffers
.
end
(
)
;
+
+
it
)
{
gl
-
>
fDeleteRenderbuffers
(
1
&
it
-
>
depthRboId
)
;
gl
-
>
fDeleteFramebuffers
(
1
&
it
-
>
fboId
)
;
}
}
bool
DCLayerTree
:
:
Initialize
(
HWND
aHwnd
nsACString
&
aError
)
{
HRESULT
hr
;
RefPtr
<
IDCompositionDesktopDevice
>
desktopDevice
;
hr
=
mCompositionDevice
-
>
QueryInterface
(
(
IDCompositionDesktopDevice
*
*
)
getter_AddRefs
(
desktopDevice
)
)
;
if
(
FAILED
(
hr
)
)
{
aError
.
Assign
(
nsPrintfCString
(
"
DCLayerTree
(
get
IDCompositionDesktopDevice
failed
%
lx
)
"
hr
)
)
;
return
false
;
}
hr
=
desktopDevice
-
>
CreateTargetForHwnd
(
aHwnd
TRUE
getter_AddRefs
(
mCompositionTarget
)
)
;
if
(
FAILED
(
hr
)
)
{
aError
.
Assign
(
nsPrintfCString
(
"
DCLayerTree
(
create
DCompositionTarget
failed
%
lx
)
"
hr
)
)
;
return
false
;
}
hr
=
mCompositionDevice
-
>
CreateVisual
(
getter_AddRefs
(
mRootVisual
)
)
;
if
(
FAILED
(
hr
)
)
{
aError
.
Assign
(
nsPrintfCString
(
"
DCLayerTree
(
create
root
DCompositionVisual
failed
%
lx
)
"
hr
)
)
;
return
false
;
}
hr
=
mCompositionDevice
-
>
CreateVisual
(
getter_AddRefs
(
mDefaultSwapChainVisual
)
)
;
if
(
FAILED
(
hr
)
)
{
aError
.
Assign
(
nsPrintfCString
(
"
DCLayerTree
(
create
swap
chain
DCompositionVisual
failed
%
lx
)
"
hr
)
)
;
return
false
;
}
if
(
gfx
:
:
gfxVars
:
:
UseWebRenderDCompVideoOverlayWin
(
)
)
{
if
(
!
InitializeVideoOverlaySupport
(
)
)
{
RenderThread
:
:
Get
(
)
-
>
HandleWebRenderError
(
WebRenderError
:
:
VIDEO_OVERLAY
)
;
}
}
if
(
!
sGpuOverlayInfo
)
{
sGpuOverlayInfo
=
MakeUnique
<
GpuOverlayInfo
>
(
)
;
}
mCompositionTarget
-
>
SetRoot
(
mRootVisual
)
;
mRootVisual
-
>
SetBitmapInterpolationMode
(
DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR
)
;
return
true
;
}
bool
FlagsSupportsOverlays
(
UINT
flags
)
{
return
(
flags
&
(
DXGI_OVERLAY_SUPPORT_FLAG_DIRECT
|
DXGI_OVERLAY_SUPPORT_FLAG_SCALING
)
)
;
}
bool
CheckOverlayColorSpaceSupport
(
DXGI_FORMAT
aDxgiFormat
DXGI_COLOR_SPACE_TYPE
aDxgiColorSpace
RefPtr
<
IDXGIOutput
>
aOutput
RefPtr
<
ID3D11Device
>
aD3d11Device
)
{
UINT
colorSpaceSupportFlags
=
0
;
RefPtr
<
IDXGIOutput4
>
output4
;
if
(
FAILED
(
aOutput
-
>
QueryInterface
(
__uuidof
(
IDXGIOutput4
)
getter_AddRefs
(
output4
)
)
)
)
{
return
false
;
}
if
(
FAILED
(
output4
-
>
CheckOverlayColorSpaceSupport
(
aDxgiFormat
aDxgiColorSpace
aD3d11Device
&
colorSpaceSupportFlags
)
)
)
{
return
false
;
}
return
(
colorSpaceSupportFlags
&
DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT
)
;
}
bool
DCLayerTree
:
:
InitializeVideoOverlaySupport
(
)
{
MOZ_ASSERT
(
IsWin10AnniversaryUpdateOrLater
(
)
)
;
HRESULT
hr
;
hr
=
mDevice
-
>
QueryInterface
(
(
ID3D11VideoDevice
*
*
)
getter_AddRefs
(
mVideoDevice
)
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNote
<
<
"
Failed
to
get
D3D11VideoDevice
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
hr
=
mCtx
-
>
QueryInterface
(
(
ID3D11VideoContext
*
*
)
getter_AddRefs
(
mVideoContext
)
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNote
<
<
"
Failed
to
get
D3D11VideoContext
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
if
(
sGpuOverlayInfo
)
{
return
true
;
}
UniquePtr
<
GpuOverlayInfo
>
info
=
MakeUnique
<
GpuOverlayInfo
>
(
)
;
RefPtr
<
IDXGIDevice
>
dxgiDevice
;
RefPtr
<
IDXGIAdapter
>
adapter
;
mDevice
-
>
QueryInterface
(
(
IDXGIDevice
*
*
)
getter_AddRefs
(
dxgiDevice
)
)
;
dxgiDevice
-
>
GetAdapter
(
getter_AddRefs
(
adapter
)
)
;
unsigned
int
i
=
0
;
while
(
true
)
{
RefPtr
<
IDXGIOutput
>
output
;
if
(
FAILED
(
adapter
-
>
EnumOutputs
(
i
+
+
getter_AddRefs
(
output
)
)
)
)
{
break
;
}
RefPtr
<
IDXGIOutput3
>
output3
;
if
(
FAILED
(
output
-
>
QueryInterface
(
__uuidof
(
IDXGIOutput3
)
getter_AddRefs
(
output3
)
)
)
)
{
break
;
}
output3
-
>
CheckOverlaySupport
(
DXGI_FORMAT_NV12
mDevice
&
info
-
>
mNv12OverlaySupportFlags
)
;
output3
-
>
CheckOverlaySupport
(
DXGI_FORMAT_YUY2
mDevice
&
info
-
>
mYuy2OverlaySupportFlags
)
;
output3
-
>
CheckOverlaySupport
(
DXGI_FORMAT_B8G8R8A8_UNORM
mDevice
&
info
-
>
mBgra8OverlaySupportFlags
)
;
output3
-
>
CheckOverlaySupport
(
DXGI_FORMAT_R10G10B10A2_UNORM
mDevice
&
info
-
>
mRgb10a2OverlaySupportFlags
)
;
if
(
FlagsSupportsOverlays
(
info
-
>
mNv12OverlaySupportFlags
)
)
{
info
-
>
mOverlayFormatUsed
=
DXGI_FORMAT_NV12
;
info
-
>
mSupportsHardwareOverlays
=
true
;
}
if
(
!
info
-
>
mSupportsHardwareOverlays
&
&
FlagsSupportsOverlays
(
info
-
>
mYuy2OverlaySupportFlags
)
)
{
info
-
>
mOverlayFormatUsed
=
DXGI_FORMAT_YUY2
;
info
-
>
mSupportsHardwareOverlays
=
true
;
}
if
(
FlagsSupportsOverlays
(
info
-
>
mRgb10a2OverlaySupportFlags
)
)
{
if
(
!
CheckOverlayColorSpaceSupport
(
DXGI_FORMAT_R10G10B10A2_UNORM
DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020
output
mDevice
)
)
info
-
>
mRgb10a2OverlaySupportFlags
=
0
;
}
if
(
info
-
>
mSupportsHardwareOverlays
)
{
break
;
}
}
if
(
!
StaticPrefs
:
:
gfx_webrender_dcomp_video_yuv_overlay_win_AtStartup
(
)
)
{
info
-
>
mOverlayFormatUsed
=
DXGI_FORMAT_B8G8R8A8_UNORM
;
info
-
>
mSupportsHardwareOverlays
=
false
;
}
info
-
>
mSupportsOverlays
=
info
-
>
mSupportsHardwareOverlays
;
sGpuOverlayInfo
=
std
:
:
move
(
info
)
;
if
(
auto
*
gpuParent
=
gfx
:
:
GPUParent
:
:
GetSingleton
(
)
)
{
gpuParent
-
>
NotifyOverlayInfo
(
GetOverlayInfo
(
)
)
;
}
return
true
;
}
DCSurface
*
DCLayerTree
:
:
GetSurface
(
wr
:
:
NativeSurfaceId
aId
)
const
{
auto
surface_it
=
mDCSurfaces
.
find
(
aId
)
;
MOZ_RELEASE_ASSERT
(
surface_it
!
=
mDCSurfaces
.
end
(
)
)
;
return
surface_it
-
>
second
.
get
(
)
;
}
void
DCLayerTree
:
:
SetDefaultSwapChain
(
IDXGISwapChain1
*
aSwapChain
)
{
LOG
(
"
DCLayerTree
:
:
SetDefaultSwapChain
(
)
"
)
;
mRootVisual
-
>
AddVisual
(
mDefaultSwapChainVisual
TRUE
nullptr
)
;
mDefaultSwapChainVisual
-
>
SetContent
(
aSwapChain
)
;
mDefaultSwapChainVisual
-
>
SetBitmapInterpolationMode
(
DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR
)
;
mPendingCommit
=
true
;
}
void
DCLayerTree
:
:
MaybeUpdateDebug
(
)
{
bool
updated
=
false
;
updated
|
=
MaybeUpdateDebugCounter
(
)
;
updated
|
=
MaybeUpdateDebugVisualRedrawRegions
(
)
;
if
(
updated
)
{
mPendingCommit
=
true
;
}
}
void
DCLayerTree
:
:
MaybeCommit
(
)
{
if
(
!
mPendingCommit
)
{
return
;
}
mCompositionDevice
-
>
Commit
(
)
;
}
void
DCLayerTree
:
:
WaitForCommitCompletion
(
)
{
mCompositionDevice
-
>
WaitForCommitCompletion
(
)
;
}
void
DCLayerTree
:
:
DisableNativeCompositor
(
)
{
MOZ_ASSERT
(
mCurrentSurface
.
isNothing
(
)
)
;
MOZ_ASSERT
(
mCurrentLayers
.
empty
(
)
)
;
ReleaseNativeCompositorResources
(
)
;
mPrevLayers
.
clear
(
)
;
mRootVisual
-
>
RemoveAllVisuals
(
)
;
}
bool
DCLayerTree
:
:
MaybeUpdateDebugCounter
(
)
{
bool
debugCounter
=
StaticPrefs
:
:
gfx_webrender_debug_dcomp_counter
(
)
;
if
(
mDebugCounter
=
=
debugCounter
)
{
return
false
;
}
RefPtr
<
IDCompositionDeviceDebug
>
debugDevice
;
HRESULT
hr
=
mCompositionDevice
-
>
QueryInterface
(
(
IDCompositionDeviceDebug
*
*
)
getter_AddRefs
(
debugDevice
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
if
(
debugCounter
)
{
debugDevice
-
>
EnableDebugCounters
(
)
;
}
else
{
debugDevice
-
>
DisableDebugCounters
(
)
;
}
mDebugCounter
=
debugCounter
;
return
true
;
}
bool
DCLayerTree
:
:
MaybeUpdateDebugVisualRedrawRegions
(
)
{
bool
debugVisualRedrawRegions
=
StaticPrefs
:
:
gfx_webrender_debug_dcomp_redraw_regions
(
)
;
if
(
mDebugVisualRedrawRegions
=
=
debugVisualRedrawRegions
)
{
return
false
;
}
RefPtr
<
IDCompositionVisualDebug
>
visualDebug
;
HRESULT
hr
=
mRootVisual
-
>
QueryInterface
(
(
IDCompositionVisualDebug
*
*
)
getter_AddRefs
(
visualDebug
)
)
;
if
(
FAILED
(
hr
)
)
{
return
false
;
}
if
(
debugVisualRedrawRegions
)
{
visualDebug
-
>
EnableRedrawRegions
(
)
;
}
else
{
visualDebug
-
>
DisableRedrawRegions
(
)
;
}
mDebugVisualRedrawRegions
=
debugVisualRedrawRegions
;
return
true
;
}
void
DCLayerTree
:
:
CompositorBeginFrame
(
)
{
mCurrentFrame
+
+
;
}
void
DCLayerTree
:
:
CompositorEndFrame
(
)
{
auto
start
=
TimeStamp
:
:
Now
(
)
;
bool
same
=
mPrevLayers
=
=
mCurrentLayers
;
if
(
!
same
)
{
mRootVisual
-
>
RemoveAllVisuals
(
)
;
}
for
(
auto
it
=
mCurrentLayers
.
begin
(
)
;
it
!
=
mCurrentLayers
.
end
(
)
;
+
+
it
)
{
auto
surface_it
=
mDCSurfaces
.
find
(
*
it
)
;
MOZ_RELEASE_ASSERT
(
surface_it
!
=
mDCSurfaces
.
end
(
)
)
;
const
auto
surface
=
surface_it
-
>
second
.
get
(
)
;
surface
-
>
UpdateAllocatedRect
(
)
;
if
(
!
same
)
{
const
auto
visual
=
surface
-
>
GetVisual
(
)
;
mRootVisual
-
>
AddVisual
(
visual
FALSE
nullptr
)
;
}
}
mPrevLayers
.
swap
(
mCurrentLayers
)
;
mCurrentLayers
.
clear
(
)
;
mCompositionDevice
-
>
Commit
(
)
;
auto
end
=
TimeStamp
:
:
Now
(
)
;
mozilla
:
:
Telemetry
:
:
Accumulate
(
mozilla
:
:
Telemetry
:
:
COMPOSITE_SWAP_TIME
(
end
-
start
)
.
ToMilliseconds
(
)
*
10
.
)
;
const
auto
gl
=
GetGLContext
(
)
;
for
(
uint32_t
i
=
0
len
=
mFrameBuffers
.
Length
(
)
;
i
<
len
;
+
+
i
)
{
auto
&
fb
=
mFrameBuffers
[
i
]
;
if
(
(
mCurrentFrame
-
fb
.
lastFrameUsed
)
>
60
)
{
gl
-
>
fDeleteRenderbuffers
(
1
&
fb
.
depthRboId
)
;
gl
-
>
fDeleteFramebuffers
(
1
&
fb
.
fboId
)
;
mFrameBuffers
.
UnorderedRemoveElementAt
(
i
)
;
-
-
i
;
-
-
len
;
}
}
}
void
DCLayerTree
:
:
Bind
(
wr
:
:
NativeTileId
aId
wr
:
:
DeviceIntPoint
*
aOffset
uint32_t
*
aFboId
wr
:
:
DeviceIntRect
aDirtyRect
wr
:
:
DeviceIntRect
aValidRect
)
{
auto
surface
=
GetSurface
(
aId
.
surface_id
)
;
auto
tile
=
surface
-
>
GetTile
(
aId
.
x
aId
.
y
)
;
wr
:
:
DeviceIntPoint
targetOffset
{
0
0
}
;
gfx
:
:
IntRect
validRect
(
aValidRect
.
min
.
x
aValidRect
.
min
.
y
aValidRect
.
width
(
)
aValidRect
.
height
(
)
)
;
if
(
!
tile
-
>
mValidRect
.
IsEqualEdges
(
validRect
)
)
{
tile
-
>
mValidRect
=
validRect
;
surface
-
>
DirtyAllocatedRect
(
)
;
}
wr
:
:
DeviceIntSize
tileSize
=
surface
-
>
GetTileSize
(
)
;
RefPtr
<
IDCompositionSurface
>
compositionSurface
=
surface
-
>
GetCompositionSurface
(
)
;
wr
:
:
DeviceIntPoint
virtualOffset
=
surface
-
>
GetVirtualOffset
(
)
;
targetOffset
.
x
=
virtualOffset
.
x
+
tileSize
.
width
*
aId
.
x
;
targetOffset
.
y
=
virtualOffset
.
y
+
tileSize
.
height
*
aId
.
y
;
*
aFboId
=
CreateEGLSurfaceForCompositionSurface
(
aDirtyRect
aOffset
compositionSurface
targetOffset
)
;
mCurrentSurface
=
Some
(
compositionSurface
)
;
}
void
DCLayerTree
:
:
Unbind
(
)
{
if
(
mCurrentSurface
.
isNothing
(
)
)
{
return
;
}
RefPtr
<
IDCompositionSurface
>
surface
=
mCurrentSurface
.
ref
(
)
;
surface
-
>
EndDraw
(
)
;
DestroyEGLSurface
(
)
;
mCurrentSurface
=
Nothing
(
)
;
}
void
DCLayerTree
:
:
CreateSurface
(
wr
:
:
NativeSurfaceId
aId
wr
:
:
DeviceIntPoint
aVirtualOffset
wr
:
:
DeviceIntSize
aTileSize
bool
aIsOpaque
)
{
auto
it
=
mDCSurfaces
.
find
(
aId
)
;
MOZ_RELEASE_ASSERT
(
it
=
=
mDCSurfaces
.
end
(
)
)
;
if
(
it
!
=
mDCSurfaces
.
end
(
)
)
{
return
;
}
if
(
aTileSize
.
width
<
=
0
|
|
aTileSize
.
height
<
=
0
)
{
gfxCriticalNote
<
<
"
TileSize
is
not
positive
aId
:
"
<
<
wr
:
:
AsUint64
(
aId
)
<
<
"
aTileSize
(
"
<
<
aTileSize
.
width
<
<
"
"
<
<
aTileSize
.
height
<
<
"
)
"
;
}
auto
surface
=
MakeUnique
<
DCSurface
>
(
aTileSize
aVirtualOffset
aIsOpaque
this
)
;
if
(
!
surface
-
>
Initialize
(
)
)
{
gfxCriticalNote
<
<
"
Failed
to
initialize
DCSurface
:
"
<
<
wr
:
:
AsUint64
(
aId
)
;
return
;
}
mDCSurfaces
[
aId
]
=
std
:
:
move
(
surface
)
;
}
void
DCLayerTree
:
:
CreateExternalSurface
(
wr
:
:
NativeSurfaceId
aId
bool
aIsOpaque
)
{
auto
it
=
mDCSurfaces
.
find
(
aId
)
;
MOZ_RELEASE_ASSERT
(
it
=
=
mDCSurfaces
.
end
(
)
)
;
auto
surface
=
MakeUnique
<
DCSurfaceVideo
>
(
aIsOpaque
this
)
;
if
(
!
surface
-
>
Initialize
(
)
)
{
gfxCriticalNote
<
<
"
Failed
to
initialize
DCSurfaceVideo
:
"
<
<
wr
:
:
AsUint64
(
aId
)
;
return
;
}
mDCSurfaces
[
aId
]
=
std
:
:
move
(
surface
)
;
}
void
DCLayerTree
:
:
DestroySurface
(
NativeSurfaceId
aId
)
{
auto
surface_it
=
mDCSurfaces
.
find
(
aId
)
;
MOZ_RELEASE_ASSERT
(
surface_it
!
=
mDCSurfaces
.
end
(
)
)
;
auto
surface
=
surface_it
-
>
second
.
get
(
)
;
mRootVisual
-
>
RemoveVisual
(
surface
-
>
GetVisual
(
)
)
;
mDCSurfaces
.
erase
(
surface_it
)
;
}
void
DCLayerTree
:
:
CreateTile
(
wr
:
:
NativeSurfaceId
aId
int
aX
int
aY
)
{
auto
surface
=
GetSurface
(
aId
)
;
surface
-
>
CreateTile
(
aX
aY
)
;
}
void
DCLayerTree
:
:
DestroyTile
(
wr
:
:
NativeSurfaceId
aId
int
aX
int
aY
)
{
auto
surface
=
GetSurface
(
aId
)
;
surface
-
>
DestroyTile
(
aX
aY
)
;
}
void
DCLayerTree
:
:
AttachExternalImage
(
wr
:
:
NativeSurfaceId
aId
wr
:
:
ExternalImageId
aExternalImage
)
{
auto
surface_it
=
mDCSurfaces
.
find
(
aId
)
;
MOZ_RELEASE_ASSERT
(
surface_it
!
=
mDCSurfaces
.
end
(
)
)
;
auto
*
surfaceVideo
=
surface_it
-
>
second
-
>
AsDCSurfaceVideo
(
)
;
MOZ_RELEASE_ASSERT
(
surfaceVideo
)
;
surfaceVideo
-
>
AttachExternalImage
(
aExternalImage
)
;
}
template
<
typename
T
>
static
inline
D2D1_RECT_F
D2DRect
(
const
T
&
aRect
)
{
return
D2D1
:
:
RectF
(
aRect
.
X
(
)
aRect
.
Y
(
)
aRect
.
XMost
(
)
aRect
.
YMost
(
)
)
;
}
static
inline
D2D1_MATRIX_3X2_F
D2DMatrix
(
const
gfx
:
:
Matrix
&
aTransform
)
{
return
D2D1
:
:
Matrix3x2F
(
aTransform
.
_11
aTransform
.
_12
aTransform
.
_21
aTransform
.
_22
aTransform
.
_31
aTransform
.
_32
)
;
}
void
DCLayerTree
:
:
AddSurface
(
wr
:
:
NativeSurfaceId
aId
const
wr
:
:
CompositorSurfaceTransform
&
aTransform
wr
:
:
DeviceIntRect
aClipRect
wr
:
:
ImageRendering
aImageRendering
)
{
auto
it
=
mDCSurfaces
.
find
(
aId
)
;
MOZ_RELEASE_ASSERT
(
it
!
=
mDCSurfaces
.
end
(
)
)
;
const
auto
surface
=
it
-
>
second
.
get
(
)
;
const
auto
visual
=
surface
-
>
GetVisual
(
)
;
wr
:
:
DeviceIntPoint
virtualOffset
=
surface
-
>
GetVirtualOffset
(
)
;
gfx
:
:
Matrix
transform
(
aTransform
.
m11
aTransform
.
m12
aTransform
.
m21
aTransform
.
m22
aTransform
.
m41
aTransform
.
m42
)
;
auto
*
surfaceVideo
=
surface
-
>
AsDCSurfaceVideo
(
)
;
if
(
surfaceVideo
)
{
if
(
surfaceVideo
-
>
CalculateSwapChainSize
(
transform
)
)
{
surfaceVideo
-
>
PresentVideo
(
)
;
}
}
transform
.
PreTranslate
(
-
virtualOffset
.
x
-
virtualOffset
.
y
)
;
MOZ_ASSERT
(
transform
.
IsRectilinear
(
)
)
;
gfx
:
:
Rect
clip
=
transform
.
Inverse
(
)
.
TransformBounds
(
gfx
:
:
Rect
(
aClipRect
.
min
.
x
aClipRect
.
min
.
y
aClipRect
.
width
(
)
aClipRect
.
height
(
)
)
)
;
visual
-
>
SetClip
(
D2DRect
(
clip
)
)
;
visual
-
>
SetTransform
(
D2DMatrix
(
transform
)
)
;
if
(
aImageRendering
=
=
wr
:
:
ImageRendering
:
:
Auto
)
{
visual
-
>
SetBitmapInterpolationMode
(
DCOMPOSITION_BITMAP_INTERPOLATION_MODE_LINEAR
)
;
}
else
{
visual
-
>
SetBitmapInterpolationMode
(
DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR
)
;
}
mCurrentLayers
.
push_back
(
aId
)
;
}
GLuint
DCLayerTree
:
:
GetOrCreateFbo
(
int
aWidth
int
aHeight
)
{
const
auto
gl
=
GetGLContext
(
)
;
GLuint
fboId
=
0
;
for
(
auto
it
=
mFrameBuffers
.
begin
(
)
;
it
!
=
mFrameBuffers
.
end
(
)
;
+
+
it
)
{
if
(
it
-
>
width
=
=
aWidth
&
&
it
-
>
height
=
=
aHeight
)
{
fboId
=
it
-
>
fboId
;
it
-
>
lastFrameUsed
=
mCurrentFrame
;
break
;
}
}
if
(
fboId
=
=
0
)
{
GLuint
depthRboId
;
gl
-
>
fGenRenderbuffers
(
1
&
depthRboId
)
;
gl
-
>
fBindRenderbuffer
(
LOCAL_GL_RENDERBUFFER
depthRboId
)
;
gl
-
>
fRenderbufferStorage
(
LOCAL_GL_RENDERBUFFER
LOCAL_GL_DEPTH_COMPONENT24
aWidth
aHeight
)
;
gl
-
>
fGenFramebuffers
(
1
&
fboId
)
;
gl
-
>
fBindFramebuffer
(
LOCAL_GL_DRAW_FRAMEBUFFER
fboId
)
;
gl
-
>
fFramebufferRenderbuffer
(
LOCAL_GL_DRAW_FRAMEBUFFER
LOCAL_GL_DEPTH_ATTACHMENT
LOCAL_GL_RENDERBUFFER
depthRboId
)
;
DCLayerTree
:
:
CachedFrameBuffer
frame_buffer_info
;
frame_buffer_info
.
width
=
aWidth
;
frame_buffer_info
.
height
=
aHeight
;
frame_buffer_info
.
fboId
=
fboId
;
frame_buffer_info
.
depthRboId
=
depthRboId
;
frame_buffer_info
.
lastFrameUsed
=
mCurrentFrame
;
mFrameBuffers
.
AppendElement
(
frame_buffer_info
)
;
}
return
fboId
;
}
bool
DCLayerTree
:
:
EnsureVideoProcessor
(
const
gfx
:
:
IntSize
&
aInputSize
const
gfx
:
:
IntSize
&
aOutputSize
)
{
HRESULT
hr
;
if
(
!
mVideoDevice
|
|
!
mVideoContext
)
{
return
false
;
}
if
(
mVideoProcessor
&
&
(
aInputSize
<
=
mVideoInputSize
)
&
&
(
aOutputSize
<
=
mVideoOutputSize
)
)
{
return
true
;
}
mVideoProcessor
=
nullptr
;
mVideoProcessorEnumerator
=
nullptr
;
D3D11_VIDEO_PROCESSOR_CONTENT_DESC
desc
=
{
}
;
desc
.
InputFrameFormat
=
D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE
;
desc
.
InputFrameRate
.
Numerator
=
60
;
desc
.
InputFrameRate
.
Denominator
=
1
;
desc
.
InputWidth
=
aInputSize
.
width
;
desc
.
InputHeight
=
aInputSize
.
height
;
desc
.
OutputFrameRate
.
Numerator
=
60
;
desc
.
OutputFrameRate
.
Denominator
=
1
;
desc
.
OutputWidth
=
aOutputSize
.
width
;
desc
.
OutputHeight
=
aOutputSize
.
height
;
desc
.
Usage
=
D3D11_VIDEO_USAGE_PLAYBACK_NORMAL
;
hr
=
mVideoDevice
-
>
CreateVideoProcessorEnumerator
(
&
desc
getter_AddRefs
(
mVideoProcessorEnumerator
)
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNote
<
<
"
Failed
to
create
VideoProcessorEnumerator
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
hr
=
mVideoDevice
-
>
CreateVideoProcessor
(
mVideoProcessorEnumerator
0
getter_AddRefs
(
mVideoProcessor
)
)
;
if
(
FAILED
(
hr
)
)
{
mVideoProcessor
=
nullptr
;
mVideoProcessorEnumerator
=
nullptr
;
gfxCriticalNote
<
<
"
Failed
to
create
VideoProcessor
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
mVideoContext
-
>
VideoProcessorSetStreamAutoProcessingMode
(
mVideoProcessor
0
FALSE
)
;
mVideoInputSize
=
aInputSize
;
mVideoOutputSize
=
aOutputSize
;
return
true
;
}
bool
DCLayerTree
:
:
SupportsHardwareOverlays
(
)
{
return
sGpuOverlayInfo
-
>
mSupportsHardwareOverlays
;
}
DXGI_FORMAT
DCLayerTree
:
:
GetOverlayFormatForSDR
(
)
{
return
sGpuOverlayInfo
-
>
mOverlayFormatUsed
;
}
static
layers
:
:
OverlaySupportType
FlagsToOverlaySupportType
(
UINT
aFlags
bool
aSoftwareOverlaySupported
)
{
if
(
aFlags
&
DXGI_OVERLAY_SUPPORT_FLAG_SCALING
)
{
return
layers
:
:
OverlaySupportType
:
:
Scaling
;
}
if
(
aFlags
&
DXGI_OVERLAY_SUPPORT_FLAG_DIRECT
)
{
return
layers
:
:
OverlaySupportType
:
:
Direct
;
}
if
(
aSoftwareOverlaySupported
)
{
return
layers
:
:
OverlaySupportType
:
:
Software
;
}
return
layers
:
:
OverlaySupportType
:
:
None
;
}
layers
:
:
OverlayInfo
DCLayerTree
:
:
GetOverlayInfo
(
)
{
layers
:
:
OverlayInfo
info
;
info
.
mSupportsOverlays
=
sGpuOverlayInfo
-
>
mSupportsHardwareOverlays
;
info
.
mNv12Overlay
=
FlagsToOverlaySupportType
(
sGpuOverlayInfo
-
>
mNv12OverlaySupportFlags
false
)
;
info
.
mYuy2Overlay
=
FlagsToOverlaySupportType
(
sGpuOverlayInfo
-
>
mYuy2OverlaySupportFlags
false
)
;
info
.
mBgra8Overlay
=
FlagsToOverlaySupportType
(
sGpuOverlayInfo
-
>
mBgra8OverlaySupportFlags
true
)
;
info
.
mRgb10a2Overlay
=
FlagsToOverlaySupportType
(
sGpuOverlayInfo
-
>
mRgb10a2OverlaySupportFlags
false
)
;
return
info
;
}
DCSurface
:
:
DCSurface
(
wr
:
:
DeviceIntSize
aTileSize
wr
:
:
DeviceIntPoint
aVirtualOffset
bool
aIsOpaque
DCLayerTree
*
aDCLayerTree
)
:
mDCLayerTree
(
aDCLayerTree
)
mTileSize
(
aTileSize
)
mIsOpaque
(
aIsOpaque
)
mAllocatedRectDirty
(
true
)
mVirtualOffset
(
aVirtualOffset
)
{
}
DCSurface
:
:
~
DCSurface
(
)
{
}
bool
DCSurface
:
:
Initialize
(
)
{
HRESULT
hr
;
const
auto
dCompDevice
=
mDCLayerTree
-
>
GetCompositionDevice
(
)
;
hr
=
dCompDevice
-
>
CreateVisual
(
getter_AddRefs
(
mVisual
)
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNote
<
<
"
Failed
to
create
DCompositionVisual
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
DXGI_ALPHA_MODE
alpha_mode
=
mIsOpaque
?
DXGI_ALPHA_MODE_IGNORE
:
DXGI_ALPHA_MODE_PREMULTIPLIED
;
hr
=
dCompDevice
-
>
CreateVirtualSurface
(
VIRTUAL_SURFACE_SIZE
VIRTUAL_SURFACE_SIZE
DXGI_FORMAT_R8G8B8A8_UNORM
alpha_mode
getter_AddRefs
(
mVirtualSurface
)
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
hr
=
mVisual
-
>
SetContent
(
mVirtualSurface
)
;
MOZ_ASSERT
(
SUCCEEDED
(
hr
)
)
;
return
true
;
}
void
DCSurface
:
:
CreateTile
(
int
aX
int
aY
)
{
TileKey
key
(
aX
aY
)
;
MOZ_RELEASE_ASSERT
(
mDCTiles
.
find
(
key
)
=
=
mDCTiles
.
end
(
)
)
;
auto
tile
=
MakeUnique
<
DCTile
>
(
mDCLayerTree
)
;
if
(
!
tile
-
>
Initialize
(
aX
aY
mTileSize
mIsOpaque
)
)
{
gfxCriticalNote
<
<
"
Failed
to
initialize
DCTile
:
"
<
<
aX
<
<
aY
;
return
;
}
mAllocatedRectDirty
=
true
;
mDCTiles
[
key
]
=
std
:
:
move
(
tile
)
;
}
void
DCSurface
:
:
DestroyTile
(
int
aX
int
aY
)
{
TileKey
key
(
aX
aY
)
;
mAllocatedRectDirty
=
true
;
mDCTiles
.
erase
(
key
)
;
}
void
DCSurface
:
:
DirtyAllocatedRect
(
)
{
mAllocatedRectDirty
=
true
;
}
void
DCSurface
:
:
UpdateAllocatedRect
(
)
{
if
(
mAllocatedRectDirty
)
{
std
:
:
vector
<
RECT
>
validRects
;
for
(
auto
it
=
mDCTiles
.
begin
(
)
;
it
!
=
mDCTiles
.
end
(
)
;
+
+
it
)
{
auto
tile
=
GetTile
(
it
-
>
first
.
mX
it
-
>
first
.
mY
)
;
RECT
rect
;
rect
.
left
=
(
LONG
)
(
mVirtualOffset
.
x
+
it
-
>
first
.
mX
*
mTileSize
.
width
+
tile
-
>
mValidRect
.
x
)
;
rect
.
top
=
(
LONG
)
(
mVirtualOffset
.
y
+
it
-
>
first
.
mY
*
mTileSize
.
height
+
tile
-
>
mValidRect
.
y
)
;
rect
.
right
=
rect
.
left
+
tile
-
>
mValidRect
.
width
;
rect
.
bottom
=
rect
.
top
+
tile
-
>
mValidRect
.
height
;
validRects
.
push_back
(
rect
)
;
}
mVirtualSurface
-
>
Trim
(
validRects
.
data
(
)
validRects
.
size
(
)
)
;
mAllocatedRectDirty
=
false
;
}
}
DCTile
*
DCSurface
:
:
GetTile
(
int
aX
int
aY
)
const
{
TileKey
key
(
aX
aY
)
;
auto
tile_it
=
mDCTiles
.
find
(
key
)
;
MOZ_RELEASE_ASSERT
(
tile_it
!
=
mDCTiles
.
end
(
)
)
;
return
tile_it
-
>
second
.
get
(
)
;
}
DCSurfaceVideo
:
:
DCSurfaceVideo
(
bool
aIsOpaque
DCLayerTree
*
aDCLayerTree
)
:
DCSurface
(
wr
:
:
DeviceIntSize
{
}
wr
:
:
DeviceIntPoint
{
}
aIsOpaque
aDCLayerTree
)
{
}
bool
IsYUVSwapChainFormat
(
DXGI_FORMAT
aFormat
)
{
if
(
aFormat
=
=
DXGI_FORMAT_NV12
|
|
aFormat
=
=
DXGI_FORMAT_YUY2
)
{
return
true
;
}
return
false
;
}
void
DCSurfaceVideo
:
:
AttachExternalImage
(
wr
:
:
ExternalImageId
aExternalImage
)
{
RenderTextureHost
*
texture
=
RenderThread
:
:
Get
(
)
-
>
GetRenderTexture
(
aExternalImage
)
;
MOZ_RELEASE_ASSERT
(
texture
)
;
if
(
mPrevTexture
=
=
texture
)
{
return
;
}
if
(
!
texture
|
|
!
texture
-
>
AsRenderDXGITextureHost
(
)
|
|
texture
-
>
AsRenderDXGITextureHost
(
)
-
>
GetFormat
(
)
!
=
gfx
:
:
SurfaceFormat
:
:
NV12
)
{
gfxCriticalNote
<
<
"
Unsupported
RenderTexture
for
overlay
:
"
<
<
gfx
:
:
hexa
(
texture
)
;
return
;
}
mRenderTextureHost
=
texture
;
}
bool
DCSurfaceVideo
:
:
CalculateSwapChainSize
(
gfx
:
:
Matrix
&
aTransform
)
{
if
(
!
mRenderTextureHost
)
{
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
to
be
called
"
)
;
return
false
;
}
mVideoSize
=
mRenderTextureHost
-
>
AsRenderDXGITextureHost
(
)
-
>
GetSize
(
0
)
;
bool
needsToPresent
=
mPrevTexture
!
=
mRenderTextureHost
;
gfx
:
:
IntSize
swapChainSize
=
mVideoSize
;
gfx
:
:
Matrix
transform
=
aTransform
;
bool
scaleVideoAtVideoProcessor
=
false
;
if
(
StaticPrefs
:
:
gfx_webrender_dcomp_video_vp_scaling_win_AtStartup
(
)
&
&
aTransform
.
PreservesAxisAlignedRectangles
(
)
)
{
gfx
:
:
Size
scaledSize
=
gfx
:
:
Size
(
mVideoSize
)
*
aTransform
.
ScaleFactors
(
)
;
gfx
:
:
IntSize
size
(
int32_t
(
std
:
:
round
(
scaledSize
.
width
)
)
int32_t
(
std
:
:
round
(
scaledSize
.
height
)
)
)
;
if
(
gfx
:
:
FuzzyEqual
(
scaledSize
.
width
size
.
width
0
.
1f
)
&
&
gfx
:
:
FuzzyEqual
(
scaledSize
.
height
size
.
height
0
.
1f
)
)
{
scaleVideoAtVideoProcessor
=
true
;
swapChainSize
=
size
;
}
}
if
(
scaleVideoAtVideoProcessor
)
{
if
(
swapChainSize
.
width
%
2
=
=
1
)
{
swapChainSize
.
width
+
=
1
;
}
if
(
swapChainSize
.
height
%
2
=
=
1
)
{
swapChainSize
.
height
+
=
1
;
}
transform
=
gfx
:
:
Matrix
:
:
Translation
(
aTransform
.
GetTranslation
(
)
)
;
}
if
(
!
mVideoSwapChain
|
|
mSwapChainSize
!
=
swapChainSize
)
{
needsToPresent
=
true
;
ReleaseDecodeSwapChainResources
(
)
;
mSwapChainSize
=
swapChainSize
;
auto
swapChainFormat
=
GetSwapChainFormat
(
)
;
bool
useYUVSwapChain
=
IsYUVSwapChainFormat
(
swapChainFormat
)
;
if
(
useYUVSwapChain
)
{
CreateVideoSwapChain
(
)
;
if
(
!
mVideoSwapChain
)
{
mFailedYuvSwapChain
=
true
;
ReleaseDecodeSwapChainResources
(
)
;
gfxCriticalNote
<
<
"
Fallback
to
RGB
SwapChain
"
;
}
}
if
(
!
mVideoSwapChain
)
{
CreateVideoSwapChain
(
)
;
}
}
aTransform
=
transform
;
return
needsToPresent
;
}
void
DCSurfaceVideo
:
:
PresentVideo
(
)
{
if
(
!
mRenderTextureHost
)
{
return
;
}
if
(
!
mVideoSwapChain
)
{
gfxCriticalNote
<
<
"
Failed
to
create
VideoSwapChain
"
;
RenderThread
:
:
Get
(
)
-
>
NotifyWebRenderError
(
wr
:
:
WebRenderError
:
:
VIDEO_OVERLAY
)
;
return
;
}
mVisual
-
>
SetContent
(
mVideoSwapChain
)
;
if
(
!
CallVideoProcessorBlt
(
)
)
{
auto
swapChainFormat
=
GetSwapChainFormat
(
)
;
bool
useYUVSwapChain
=
IsYUVSwapChainFormat
(
swapChainFormat
)
;
if
(
useYUVSwapChain
)
{
mFailedYuvSwapChain
=
true
;
ReleaseDecodeSwapChainResources
(
)
;
return
;
}
RenderThread
:
:
Get
(
)
-
>
NotifyWebRenderError
(
wr
:
:
WebRenderError
:
:
VIDEO_OVERLAY
)
;
return
;
}
HRESULT
hr
;
hr
=
mVideoSwapChain
-
>
Present
(
0
0
)
;
if
(
FAILED
(
hr
)
&
&
hr
!
=
DXGI_STATUS_OCCLUDED
)
{
gfxCriticalNoteOnce
<
<
"
video
Present
failed
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
}
mPrevTexture
=
mRenderTextureHost
;
}
DXGI_FORMAT
DCSurfaceVideo
:
:
GetSwapChainFormat
(
)
{
if
(
mFailedYuvSwapChain
|
|
!
mDCLayerTree
-
>
SupportsHardwareOverlays
(
)
)
{
return
DXGI_FORMAT_B8G8R8A8_UNORM
;
}
return
mDCLayerTree
-
>
GetOverlayFormatForSDR
(
)
;
}
bool
DCSurfaceVideo
:
:
CreateVideoSwapChain
(
)
{
MOZ_ASSERT
(
mRenderTextureHost
)
;
const
auto
device
=
mDCLayerTree
-
>
GetDevice
(
)
;
RefPtr
<
IDXGIDevice
>
dxgiDevice
;
device
-
>
QueryInterface
(
(
IDXGIDevice
*
*
)
getter_AddRefs
(
dxgiDevice
)
)
;
RefPtr
<
IDXGIFactoryMedia
>
dxgiFactoryMedia
;
{
RefPtr
<
IDXGIAdapter
>
adapter
;
dxgiDevice
-
>
GetAdapter
(
getter_AddRefs
(
adapter
)
)
;
adapter
-
>
GetParent
(
IID_PPV_ARGS
(
(
IDXGIFactoryMedia
*
*
)
getter_AddRefs
(
dxgiFactoryMedia
)
)
)
;
}
mSwapChainSurfaceHandle
=
gfx
:
:
DeviceManagerDx
:
:
CreateDCompSurfaceHandle
(
)
;
if
(
!
mSwapChainSurfaceHandle
)
{
gfxCriticalNote
<
<
"
Failed
to
create
DCompSurfaceHandle
"
;
return
false
;
}
auto
swapChainFormat
=
GetSwapChainFormat
(
)
;
DXGI_SWAP_CHAIN_DESC1
desc
=
{
}
;
desc
.
Width
=
mSwapChainSize
.
width
;
desc
.
Height
=
mSwapChainSize
.
height
;
desc
.
Format
=
swapChainFormat
;
desc
.
Stereo
=
FALSE
;
desc
.
SampleDesc
.
Count
=
1
;
desc
.
BufferCount
=
2
;
desc
.
BufferUsage
=
DXGI_USAGE_RENDER_TARGET_OUTPUT
;
desc
.
Scaling
=
DXGI_SCALING_STRETCH
;
desc
.
SwapEffect
=
DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL
;
desc
.
Flags
=
DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO
;
if
(
IsYUVSwapChainFormat
(
swapChainFormat
)
)
{
desc
.
Flags
|
=
DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO
;
}
desc
.
AlphaMode
=
DXGI_ALPHA_MODE_IGNORE
;
HRESULT
hr
;
hr
=
dxgiFactoryMedia
-
>
CreateSwapChainForCompositionSurfaceHandle
(
device
mSwapChainSurfaceHandle
&
desc
nullptr
getter_AddRefs
(
mVideoSwapChain
)
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNote
<
<
"
Failed
to
create
video
SwapChain
:
"
<
<
gfx
:
:
hexa
(
hr
)
<
<
"
"
<
<
mSwapChainSize
;
return
false
;
}
mSwapChainFormat
=
swapChainFormat
;
return
true
;
}
static
Maybe
<
DXGI_COLOR_SPACE_TYPE
>
GetSourceDXGIColorSpace
(
const
gfx
:
:
YUVColorSpace
aYUVColorSpace
const
gfx
:
:
ColorRange
aColorRange
)
{
if
(
aYUVColorSpace
=
=
gfx
:
:
YUVColorSpace
:
:
BT601
)
{
if
(
aColorRange
=
=
gfx
:
:
ColorRange
:
:
FULL
)
{
return
Some
(
DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601
)
;
}
else
{
return
Some
(
DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601
)
;
}
}
else
if
(
aYUVColorSpace
=
=
gfx
:
:
YUVColorSpace
:
:
BT709
)
{
if
(
aColorRange
=
=
gfx
:
:
ColorRange
:
:
FULL
)
{
return
Some
(
DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709
)
;
}
else
{
return
Some
(
DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709
)
;
}
}
else
if
(
aYUVColorSpace
=
=
gfx
:
:
YUVColorSpace
:
:
BT2020
)
{
if
(
aColorRange
=
=
gfx
:
:
ColorRange
:
:
FULL
)
{
return
Some
(
DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020
)
;
}
else
{
return
Some
(
DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020
)
;
}
}
return
Nothing
(
)
;
}
static
Maybe
<
DXGI_COLOR_SPACE_TYPE
>
GetSourceDXGIColorSpace
(
const
gfx
:
:
YUVRangedColorSpace
aYUVColorSpace
)
{
const
auto
info
=
FromYUVRangedColorSpace
(
aYUVColorSpace
)
;
return
GetSourceDXGIColorSpace
(
info
.
space
info
.
range
)
;
}
bool
DCSurfaceVideo
:
:
CallVideoProcessorBlt
(
)
{
MOZ_ASSERT
(
mRenderTextureHost
)
;
HRESULT
hr
;
const
auto
videoDevice
=
mDCLayerTree
-
>
GetVideoDevice
(
)
;
const
auto
videoContext
=
mDCLayerTree
-
>
GetVideoContext
(
)
;
const
auto
texture
=
mRenderTextureHost
-
>
AsRenderDXGITextureHost
(
)
;
Maybe
<
DXGI_COLOR_SPACE_TYPE
>
sourceColorSpace
=
GetSourceDXGIColorSpace
(
texture
-
>
GetYUVColorSpace
(
)
)
;
if
(
sourceColorSpace
.
isNothing
(
)
)
{
gfxCriticalNote
<
<
"
Unsupported
color
space
"
;
return
false
;
}
RefPtr
<
ID3D11Texture2D
>
texture2D
=
texture
-
>
GetD3D11Texture2DWithGL
(
)
;
if
(
!
texture2D
)
{
gfxCriticalNote
<
<
"
Failed
to
get
D3D11Texture2D
"
;
return
false
;
}
if
(
!
mVideoSwapChain
)
{
return
false
;
}
if
(
!
mDCLayerTree
-
>
EnsureVideoProcessor
(
mVideoSize
mSwapChainSize
)
)
{
gfxCriticalNote
<
<
"
EnsureVideoProcessor
Failed
"
;
return
false
;
}
RefPtr
<
IDXGISwapChain3
>
swapChain3
;
mVideoSwapChain
-
>
QueryInterface
(
(
IDXGISwapChain3
*
*
)
getter_AddRefs
(
swapChain3
)
)
;
if
(
!
swapChain3
)
{
gfxCriticalNote
<
<
"
Failed
to
get
IDXGISwapChain3
"
;
return
false
;
}
RefPtr
<
ID3D11VideoContext1
>
videoContext1
;
videoContext
-
>
QueryInterface
(
(
ID3D11VideoContext1
*
*
)
getter_AddRefs
(
videoContext1
)
)
;
if
(
!
videoContext1
)
{
gfxCriticalNote
<
<
"
Failed
to
get
ID3D11VideoContext1
"
;
return
false
;
}
const
auto
videoProcessor
=
mDCLayerTree
-
>
GetVideoProcessor
(
)
;
const
auto
videoProcessorEnumerator
=
mDCLayerTree
-
>
GetVideoProcessorEnumerator
(
)
;
DXGI_COLOR_SPACE_TYPE
inputColorSpace
=
sourceColorSpace
.
ref
(
)
;
videoContext1
-
>
VideoProcessorSetStreamColorSpace1
(
videoProcessor
0
inputColorSpace
)
;
DXGI_COLOR_SPACE_TYPE
outputColorSpace
=
IsYUVSwapChainFormat
(
mSwapChainFormat
)
?
inputColorSpace
:
DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709
;
hr
=
swapChain3
-
>
SetColorSpace1
(
outputColorSpace
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNoteOnce
<
<
"
SetColorSpace1
failed
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
RenderThread
:
:
Get
(
)
-
>
NotifyWebRenderError
(
wr
:
:
WebRenderError
:
:
VIDEO_OVERLAY
)
;
return
false
;
}
videoContext1
-
>
VideoProcessorSetOutputColorSpace1
(
videoProcessor
outputColorSpace
)
;
D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
inputDesc
=
{
}
;
inputDesc
.
ViewDimension
=
D3D11_VPIV_DIMENSION_TEXTURE2D
;
inputDesc
.
Texture2D
.
ArraySlice
=
texture
-
>
ArrayIndex
(
)
;
RefPtr
<
ID3D11VideoProcessorInputView
>
inputView
;
hr
=
videoDevice
-
>
CreateVideoProcessorInputView
(
texture2D
videoProcessorEnumerator
&
inputDesc
getter_AddRefs
(
inputView
)
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNote
<
<
"
ID3D11VideoProcessorInputView
creation
failed
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
D3D11_VIDEO_PROCESSOR_STREAM
stream
=
{
}
;
stream
.
Enable
=
true
;
stream
.
OutputIndex
=
0
;
stream
.
InputFrameOrField
=
0
;
stream
.
PastFrames
=
0
;
stream
.
FutureFrames
=
0
;
stream
.
pInputSurface
=
inputView
.
get
(
)
;
RECT
destRect
;
destRect
.
left
=
0
;
destRect
.
top
=
0
;
destRect
.
right
=
mSwapChainSize
.
width
;
destRect
.
bottom
=
mSwapChainSize
.
height
;
videoContext
-
>
VideoProcessorSetOutputTargetRect
(
videoProcessor
TRUE
&
destRect
)
;
videoContext
-
>
VideoProcessorSetStreamDestRect
(
videoProcessor
0
TRUE
&
destRect
)
;
RECT
sourceRect
;
sourceRect
.
left
=
0
;
sourceRect
.
top
=
0
;
sourceRect
.
right
=
mVideoSize
.
width
;
sourceRect
.
bottom
=
mVideoSize
.
height
;
videoContext
-
>
VideoProcessorSetStreamSourceRect
(
videoProcessor
0
TRUE
&
sourceRect
)
;
if
(
!
mOutputView
)
{
RefPtr
<
ID3D11Texture2D
>
backBuf
;
mVideoSwapChain
-
>
GetBuffer
(
0
__uuidof
(
ID3D11Texture2D
)
(
void
*
*
)
getter_AddRefs
(
backBuf
)
)
;
D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
outputDesc
=
{
}
;
outputDesc
.
ViewDimension
=
D3D11_VPOV_DIMENSION_TEXTURE2D
;
outputDesc
.
Texture2D
.
MipSlice
=
0
;
hr
=
videoDevice
-
>
CreateVideoProcessorOutputView
(
backBuf
videoProcessorEnumerator
&
outputDesc
getter_AddRefs
(
mOutputView
)
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNote
<
<
"
ID3D11VideoProcessorOutputView
creation
failed
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
}
hr
=
videoContext
-
>
VideoProcessorBlt
(
videoProcessor
mOutputView
0
1
&
stream
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNote
<
<
"
VideoProcessorBlt
failed
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
return
true
;
}
void
DCSurfaceVideo
:
:
ReleaseDecodeSwapChainResources
(
)
{
mOutputView
=
nullptr
;
mVideoSwapChain
=
nullptr
;
mDecodeSwapChain
=
nullptr
;
mDecodeResource
=
nullptr
;
if
(
mSwapChainSurfaceHandle
)
{
:
:
CloseHandle
(
mSwapChainSurfaceHandle
)
;
mSwapChainSurfaceHandle
=
0
;
}
}
DCTile
:
:
DCTile
(
DCLayerTree
*
aDCLayerTree
)
:
mDCLayerTree
(
aDCLayerTree
)
{
}
DCTile
:
:
~
DCTile
(
)
{
}
bool
DCTile
:
:
Initialize
(
int
aX
int
aY
wr
:
:
DeviceIntSize
aSize
bool
aIsOpaque
)
{
if
(
aSize
.
width
<
=
0
|
|
aSize
.
height
<
=
0
)
{
return
false
;
}
mValidRect
.
x
=
0
;
mValidRect
.
y
=
0
;
mValidRect
.
width
=
aSize
.
width
;
mValidRect
.
height
=
aSize
.
height
;
return
true
;
}
GLuint
DCLayerTree
:
:
CreateEGLSurfaceForCompositionSurface
(
wr
:
:
DeviceIntRect
aDirtyRect
wr
:
:
DeviceIntPoint
*
aOffset
RefPtr
<
IDCompositionSurface
>
aCompositionSurface
wr
:
:
DeviceIntPoint
aSurfaceOffset
)
{
MOZ_ASSERT
(
aCompositionSurface
.
get
(
)
)
;
HRESULT
hr
;
const
auto
gl
=
GetGLContext
(
)
;
RefPtr
<
ID3D11Texture2D
>
backBuf
;
POINT
offset
;
RECT
update_rect
;
update_rect
.
left
=
aSurfaceOffset
.
x
+
aDirtyRect
.
min
.
x
;
update_rect
.
top
=
aSurfaceOffset
.
y
+
aDirtyRect
.
min
.
y
;
update_rect
.
right
=
aSurfaceOffset
.
x
+
aDirtyRect
.
max
.
x
;
update_rect
.
bottom
=
aSurfaceOffset
.
y
+
aDirtyRect
.
max
.
y
;
hr
=
aCompositionSurface
-
>
BeginDraw
(
&
update_rect
__uuidof
(
ID3D11Texture2D
)
(
void
*
*
)
getter_AddRefs
(
backBuf
)
&
offset
)
;
if
(
FAILED
(
hr
)
)
{
LayoutDeviceIntRect
rect
=
widget
:
:
WinUtils
:
:
ToIntRect
(
update_rect
)
;
gfxCriticalNote
<
<
"
DCompositionSurface
:
:
BeginDraw
failed
:
"
<
<
gfx
:
:
hexa
(
hr
)
<
<
"
"
<
<
rect
;
RenderThread
:
:
Get
(
)
-
>
HandleWebRenderError
(
WebRenderError
:
:
BEGIN_DRAW
)
;
return
false
;
}
offset
.
x
-
=
aDirtyRect
.
min
.
x
;
offset
.
y
-
=
aDirtyRect
.
min
.
y
;
D3D11_TEXTURE2D_DESC
desc
;
backBuf
-
>
GetDesc
(
&
desc
)
;
const
auto
&
gle
=
gl
:
:
GLContextEGL
:
:
Cast
(
gl
)
;
const
auto
&
egl
=
gle
-
>
mEgl
;
const
auto
buffer
=
reinterpret_cast
<
EGLClientBuffer
>
(
backBuf
.
get
(
)
)
;
const
EGLint
attribs
[
]
=
{
LOCAL_EGL_NONE
}
;
mEGLImage
=
egl
-
>
fCreateImage
(
EGL_NO_CONTEXT
LOCAL_EGL_D3D11_TEXTURE_ANGLE
buffer
attribs
)
;
GLint
currentFboId
currentRboId
;
gl
-
>
fGetIntegerv
(
LOCAL_GL_DRAW_FRAMEBUFFER_BINDING
&
currentFboId
)
;
gl
-
>
fGetIntegerv
(
LOCAL_GL_RENDERBUFFER_BINDING
&
currentRboId
)
;
gl
-
>
fGenRenderbuffers
(
1
&
mColorRBO
)
;
gl
-
>
fBindRenderbuffer
(
LOCAL_GL_RENDERBUFFER
mColorRBO
)
;
gl
-
>
fEGLImageTargetRenderbufferStorage
(
LOCAL_GL_RENDERBUFFER
mEGLImage
)
;
GLuint
fboId
=
GetOrCreateFbo
(
desc
.
Width
desc
.
Height
)
;
gl
-
>
fBindFramebuffer
(
LOCAL_GL_DRAW_FRAMEBUFFER
fboId
)
;
gl
-
>
fFramebufferRenderbuffer
(
LOCAL_GL_DRAW_FRAMEBUFFER
LOCAL_GL_COLOR_ATTACHMENT0
LOCAL_GL_RENDERBUFFER
mColorRBO
)
;
gl
-
>
fBindFramebuffer
(
LOCAL_GL_DRAW_FRAMEBUFFER
currentFboId
)
;
gl
-
>
fBindRenderbuffer
(
LOCAL_GL_RENDERBUFFER
currentRboId
)
;
aOffset
-
>
x
=
offset
.
x
;
aOffset
-
>
y
=
offset
.
y
;
return
fboId
;
}
void
DCLayerTree
:
:
DestroyEGLSurface
(
)
{
const
auto
gl
=
GetGLContext
(
)
;
if
(
mColorRBO
)
{
gl
-
>
fDeleteRenderbuffers
(
1
&
mColorRBO
)
;
mColorRBO
=
0
;
}
if
(
mEGLImage
)
{
const
auto
&
gle
=
gl
:
:
GLContextEGL
:
:
Cast
(
gl
)
;
const
auto
&
egl
=
gle
-
>
mEgl
;
egl
-
>
fDestroyImage
(
mEGLImage
)
;
mEGLImage
=
EGL_NO_IMAGE
;
}
}
}
}
