#
include
"
DCLayerTree
.
h
"
#
include
"
mozilla
/
gfx
/
DeviceManagerDx
.
h
"
#
undef
NTDDI_VERSION
#
define
NTDDI_VERSION
NTDDI_WIN8
#
include
<
d3d11
.
h
>
#
include
<
dcomp
.
h
>
#
include
<
dxgi1_2
.
h
>
namespace
mozilla
{
namespace
wr
{
UniquePtr
<
DCLayerTree
>
DCLayerTree
:
:
Create
(
HWND
aHwnd
)
{
RefPtr
<
IDCompositionDevice
>
dCompDevice
=
gfx
:
:
DeviceManagerDx
:
:
Get
(
)
-
>
GetDirectCompositionDevice
(
)
;
if
(
!
dCompDevice
)
{
return
nullptr
;
}
auto
layerTree
=
MakeUnique
<
DCLayerTree
>
(
dCompDevice
)
;
if
(
!
layerTree
-
>
Initialize
(
aHwnd
)
)
{
return
nullptr
;
}
return
layerTree
;
}
DCLayerTree
:
:
DCLayerTree
(
IDCompositionDevice
*
aCompositionDevice
)
:
mCompositionDevice
(
aCompositionDevice
)
{
}
DCLayerTree
:
:
~
DCLayerTree
(
)
{
}
bool
DCLayerTree
:
:
Initialize
(
HWND
aHwnd
)
{
HRESULT
hr
=
mCompositionDevice
-
>
CreateTargetForHwnd
(
aHwnd
TRUE
getter_AddRefs
(
mCompositionTarget
)
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNote
<
<
"
Could
not
create
DCompositionTarget
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
hr
=
mCompositionDevice
-
>
CreateVisual
(
getter_AddRefs
(
mRootVisual
)
)
;
if
(
FAILED
(
hr
)
)
{
gfxCriticalNote
<
<
"
Could
not
create
DCompositionVisualt
:
"
<
<
gfx
:
:
hexa
(
hr
)
;
return
false
;
}
return
true
;
}
void
DCLayerTree
:
:
SetDefaultSwapChain
(
IDXGISwapChain1
*
aSwapChain
)
{
mRootVisual
-
>
SetContent
(
aSwapChain
)
;
mCompositionTarget
-
>
SetRoot
(
mRootVisual
)
;
mCompositionDevice
-
>
Commit
(
)
;
}
}
}
