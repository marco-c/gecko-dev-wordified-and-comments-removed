#
ifndef
MOZILLA_GFX_RENDERDCOMPSURFACETEXTUREHOST_H
#
define
MOZILLA_GFX_RENDERDCOMPSURFACETEXTUREHOST_H
#
include
"
GLTypes
.
h
"
#
include
"
RenderTextureHostSWGL
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
struct
IDCompositionDevice
;
struct
IDCompositionSurface
;
inline
mozilla
:
:
LazyLogModule
gDcompSurface
(
"
DcompSurface
"
)
;
namespace
mozilla
:
:
wr
{
class
RenderDcompSurfaceTextureHost
final
:
public
RenderTextureHostSWGL
{
public
:
RenderDcompSurfaceTextureHost
(
HANDLE
aHandle
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
)
;
RenderDcompSurfaceTextureHost
*
AsRenderDcompSurfaceTextureHost
(
)
override
{
return
this
;
}
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
{
return
mFormat
;
}
gfx
:
:
ColorDepth
GetColorDepth
(
)
const
override
{
return
gfx
:
:
ColorDepth
:
:
COLOR_8
;
}
size_t
GetPlaneCount
(
)
const
override
{
return
1
;
}
bool
MapPlane
(
RenderCompositor
*
aCompositor
uint8_t
aChannelIndex
PlaneInfo
&
aPlaneInfo
)
override
{
return
false
;
}
void
UnmapPlanes
(
)
override
{
}
gfx
:
:
YUVRangedColorSpace
GetYUVColorSpace
(
)
const
override
{
return
gfx
:
:
YUVRangedColorSpace
:
:
GbrIdentity
;
}
size_t
Bytes
(
)
override
{
return
0
;
}
gfx
:
:
IntSize
GetSize
(
)
const
{
return
mSize
;
}
;
HANDLE
GetDcompSurfaceHandle
(
)
const
{
return
mHandle
;
}
IDCompositionSurface
*
CreateSurfaceFromDevice
(
IDCompositionDevice
*
aDevice
)
;
IDCompositionSurface
*
GetSurface
(
)
const
{
return
mDcompSurface
;
}
;
private
:
const
HANDLE
mHandle
;
const
gfx
:
:
IntSize
mSize
;
const
gfx
:
:
SurfaceFormat
mFormat
;
RefPtr
<
IDCompositionSurface
>
mDcompSurface
;
}
;
}
#
endif
