#
ifndef
MOZILLA_GFX_RENDERCOMPOSITOR_SWGL_H
#
define
MOZILLA_GFX_RENDERCOMPOSITOR_SWGL_H
#
include
"
mozilla
/
webrender
/
RenderCompositor
.
h
"
namespace
mozilla
{
namespace
wr
{
class
RenderCompositorSWGL
:
public
RenderCompositor
{
public
:
static
UniquePtr
<
RenderCompositor
>
Create
(
RefPtr
<
widget
:
:
CompositorWidget
>
&
&
aWidget
nsACString
&
aError
)
;
RenderCompositorSWGL
(
RefPtr
<
widget
:
:
CompositorWidget
>
&
&
aWidget
void
*
aContext
)
;
virtual
~
RenderCompositorSWGL
(
)
;
void
*
swgl
(
)
const
override
{
return
mContext
;
}
bool
MakeCurrent
(
)
override
;
bool
BeginFrame
(
)
override
;
void
CancelFrame
(
)
override
;
RenderedFrameId
EndFrame
(
const
nsTArray
<
DeviceIntRect
>
&
aDirtyRects
)
final
;
void
Pause
(
)
override
;
bool
Resume
(
)
override
;
bool
SurfaceOriginIsTopLeft
(
)
override
{
return
true
;
}
LayoutDeviceIntSize
GetBufferSize
(
)
override
;
bool
SupportsExternalBufferTextures
(
)
const
override
{
return
true
;
}
CompositorCapabilities
GetCompositorCapabilities
(
)
override
;
private
:
void
*
mContext
=
nullptr
;
RefPtr
<
DrawTarget
>
mDT
;
LayoutDeviceIntRegion
mRegion
;
RefPtr
<
DataSourceSurface
>
mSurface
;
uint8_t
*
mMappedData
=
nullptr
;
int32_t
mMappedStride
=
0
;
void
ClearMappedBuffer
(
)
;
void
CommitMappedBuffer
(
const
nsTArray
<
DeviceIntRect
>
*
aDirtyRects
=
nullptr
)
;
}
;
}
}
#
endif
