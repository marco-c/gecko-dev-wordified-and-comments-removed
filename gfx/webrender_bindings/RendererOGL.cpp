#
include
"
RendererOGL
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
webrender
/
RenderCompositor
.
h
"
#
include
"
mozilla
/
webrender
/
RenderTextureHost
.
h
"
#
include
"
mozilla
/
widget
/
CompositorWidget
.
h
"
namespace
mozilla
{
namespace
wr
{
class
MOZ_STACK_CLASS
AutoWrRenderResult
{
public
:
explicit
AutoWrRenderResult
(
WrRenderResult
&
&
aResult
)
:
mResult
(
aResult
)
{
}
~
AutoWrRenderResult
(
)
{
wr_render_result_delete
(
mResult
)
;
}
bool
Result
(
)
const
{
return
mResult
.
result
;
}
FfiVec
<
DeviceIntRect
>
DirtyRects
(
)
const
{
return
mResult
.
dirty_rects
;
}
private
:
const
WrRenderResult
mResult
;
AutoWrRenderResult
(
const
AutoWrRenderResult
&
)
=
delete
;
AutoWrRenderResult
&
operator
=
(
const
AutoWrRenderResult
&
)
=
delete
;
}
;
wr
:
:
WrExternalImage
wr_renderer_lock_external_image
(
void
*
aObj
wr
:
:
ExternalImageId
aId
uint8_t
aChannelIndex
wr
:
:
ImageRendering
aRendering
)
{
RendererOGL
*
renderer
=
reinterpret_cast
<
RendererOGL
*
>
(
aObj
)
;
RenderTextureHost
*
texture
=
renderer
-
>
GetRenderTexture
(
aId
)
;
MOZ_ASSERT
(
texture
)
;
if
(
!
texture
)
{
gfxCriticalNote
<
<
"
Failed
to
lock
ExternalImage
for
extId
:
"
<
<
AsUint64
(
aId
)
;
return
InvalidToWrExternalImage
(
)
;
}
return
texture
-
>
Lock
(
aChannelIndex
renderer
-
>
gl
(
)
aRendering
)
;
}
void
wr_renderer_unlock_external_image
(
void
*
aObj
wr
:
:
ExternalImageId
aId
uint8_t
aChannelIndex
)
{
RendererOGL
*
renderer
=
reinterpret_cast
<
RendererOGL
*
>
(
aObj
)
;
RenderTextureHost
*
texture
=
renderer
-
>
GetRenderTexture
(
aId
)
;
MOZ_ASSERT
(
texture
)
;
if
(
!
texture
)
{
return
;
}
texture
-
>
Unlock
(
)
;
}
RendererOGL
:
:
RendererOGL
(
RefPtr
<
RenderThread
>
&
&
aThread
UniquePtr
<
RenderCompositor
>
aCompositor
wr
:
:
WindowId
aWindowId
wr
:
:
Renderer
*
aRenderer
layers
:
:
CompositorBridgeParent
*
aBridge
)
:
mThread
(
aThread
)
mCompositor
(
std
:
:
move
(
aCompositor
)
)
mRenderer
(
aRenderer
)
mBridge
(
aBridge
)
mWindowId
(
aWindowId
)
{
MOZ_ASSERT
(
mThread
)
;
MOZ_ASSERT
(
mCompositor
)
;
MOZ_ASSERT
(
mRenderer
)
;
MOZ_ASSERT
(
mBridge
)
;
MOZ_COUNT_CTOR
(
RendererOGL
)
;
}
RendererOGL
:
:
~
RendererOGL
(
)
{
MOZ_COUNT_DTOR
(
RendererOGL
)
;
if
(
!
mCompositor
-
>
MakeCurrent
(
)
)
{
gfxCriticalNote
<
<
"
Failed
to
make
render
context
current
during
destroying
.
"
;
return
;
}
wr_renderer_delete
(
mRenderer
)
;
}
wr
:
:
WrExternalImageHandler
RendererOGL
:
:
GetExternalImageHandler
(
)
{
return
wr
:
:
WrExternalImageHandler
{
this
}
;
}
void
RendererOGL
:
:
Update
(
)
{
mCompositor
-
>
Update
(
)
;
if
(
mCompositor
-
>
MakeCurrent
(
)
)
{
wr_renderer_update
(
mRenderer
)
;
}
}
static
void
DoNotifyWebRenderContextPurge
(
layers
:
:
CompositorBridgeParent
*
aBridge
)
{
aBridge
-
>
NotifyWebRenderContextPurge
(
)
;
}
bool
RendererOGL
:
:
UpdateAndRender
(
const
Maybe
<
gfx
:
:
IntSize
>
&
aReadbackSize
const
Maybe
<
wr
:
:
ImageFormat
>
&
aReadbackFormat
const
Maybe
<
Range
<
uint8_t
>
>
&
aReadbackBuffer
bool
aHadSlowFrame
RendererStats
*
aOutStats
)
{
mozilla
:
:
widget
:
:
WidgetRenderingContext
widgetContext
;
#
if
defined
(
XP_MACOSX
)
widgetContext
.
mGL
=
mCompositor
-
>
gl
(
)
;
#
endif
if
(
!
mCompositor
-
>
GetWidget
(
)
-
>
PreRender
(
&
widgetContext
)
)
{
return
false
;
}
if
(
!
mCompositor
-
>
BeginFrame
(
)
)
{
if
(
mCompositor
-
>
IsContextLost
(
)
)
{
RenderThread
:
:
Get
(
)
-
>
HandleDeviceReset
(
"
BeginFrame
"
true
)
;
}
mCompositor
-
>
GetWidget
(
)
-
>
PostRender
(
&
widgetContext
)
;
return
false
;
}
wr_renderer_update
(
mRenderer
)
;
if
(
mCompositor
-
>
RequestFullRender
(
)
)
{
wr_renderer_force_redraw
(
mRenderer
)
;
}
auto
size
=
mCompositor
-
>
GetBufferSize
(
)
;
AutoWrRenderResult
result
(
wr_renderer_render
(
mRenderer
size
.
width
size
.
height
aHadSlowFrame
aOutStats
)
)
;
if
(
!
result
.
Result
(
)
)
{
RenderThread
:
:
Get
(
)
-
>
HandleWebRenderError
(
WebRenderError
:
:
RENDER
)
;
mCompositor
-
>
GetWidget
(
)
-
>
PostRender
(
&
widgetContext
)
;
return
false
;
}
if
(
aReadbackBuffer
.
isSome
(
)
)
{
MOZ_ASSERT
(
aReadbackSize
.
isSome
(
)
)
;
MOZ_ASSERT
(
aReadbackFormat
.
isSome
(
)
)
;
wr_renderer_readback
(
mRenderer
aReadbackSize
.
ref
(
)
.
width
aReadbackSize
.
ref
(
)
.
height
aReadbackFormat
.
ref
(
)
&
aReadbackBuffer
.
ref
(
)
[
0
]
aReadbackBuffer
.
ref
(
)
.
length
(
)
)
;
}
mScreenshotGrabber
.
MaybeGrabScreenshot
(
mRenderer
size
.
ToUnknownSize
(
)
)
;
mCompositor
-
>
EndFrame
(
result
.
DirtyRects
(
)
)
;
mCompositor
-
>
GetWidget
(
)
-
>
PostRender
(
&
widgetContext
)
;
#
if
defined
(
ENABLE_FRAME_LATENCY_LOG
)
if
(
mFrameStartTime
)
{
uint32_t
latencyMs
=
round
(
(
TimeStamp
:
:
Now
(
)
-
mFrameStartTime
)
.
ToMilliseconds
(
)
)
;
printf_stderr
(
"
generate
frame
latencyMs
latencyMs
%
d
\
n
"
latencyMs
)
;
}
mFrameStartTime
=
TimeStamp
(
)
;
#
endif
mScreenshotGrabber
.
MaybeProcessQueue
(
mRenderer
)
;
return
true
;
}
void
RendererOGL
:
:
CheckGraphicsResetStatus
(
)
{
if
(
!
mCompositor
|
|
!
mCompositor
-
>
gl
(
)
)
{
return
;
}
gl
:
:
GLContext
*
gl
=
mCompositor
-
>
gl
(
)
;
if
(
gl
-
>
IsSupported
(
gl
:
:
GLFeature
:
:
robustness
)
)
{
GLenum
resetStatus
=
gl
-
>
fGetGraphicsResetStatus
(
)
;
if
(
resetStatus
=
=
LOCAL_GL_PURGED_CONTEXT_RESET_NV
)
{
layers
:
:
CompositorThreadHolder
:
:
Loop
(
)
-
>
PostTask
(
NewRunnableFunction
(
"
DoNotifyWebRenderContextPurgeRunnable
"
&
DoNotifyWebRenderContextPurge
mBridge
)
)
;
}
}
}
void
RendererOGL
:
:
WaitForGPU
(
)
{
if
(
!
mCompositor
-
>
WaitForGPU
(
)
)
{
if
(
mCompositor
-
>
IsContextLost
(
)
)
{
RenderThread
:
:
Get
(
)
-
>
HandleDeviceReset
(
"
WaitForGPU
"
true
)
;
}
}
}
void
RendererOGL
:
:
Pause
(
)
{
mCompositor
-
>
Pause
(
)
;
}
bool
RendererOGL
:
:
Resume
(
)
{
return
mCompositor
-
>
Resume
(
)
;
}
layers
:
:
SyncObjectHost
*
RendererOGL
:
:
GetSyncObject
(
)
const
{
return
mCompositor
-
>
GetSyncObject
(
)
;
}
gl
:
:
GLContext
*
RendererOGL
:
:
gl
(
)
const
{
return
mCompositor
-
>
gl
(
)
;
}
void
RendererOGL
:
:
SetFrameStartTime
(
const
TimeStamp
&
aTime
)
{
if
(
mFrameStartTime
)
{
return
;
}
mFrameStartTime
=
aTime
;
}
RefPtr
<
WebRenderPipelineInfo
>
RendererOGL
:
:
FlushPipelineInfo
(
)
{
auto
info
=
wr_renderer_flush_pipeline_info
(
mRenderer
)
;
return
new
WebRenderPipelineInfo
(
info
)
;
}
RenderTextureHost
*
RendererOGL
:
:
GetRenderTexture
(
wr
:
:
ExternalImageId
aExternalImageId
)
{
return
mThread
-
>
GetRenderTexture
(
aExternalImageId
)
;
}
void
RendererOGL
:
:
AccumulateMemoryReport
(
MemoryReport
*
aReport
)
{
wr_renderer_accumulate_memory_report
(
GetRenderer
(
)
aReport
)
;
LayoutDeviceIntSize
size
=
mCompositor
-
>
GetBufferSize
(
)
;
uintptr_t
swapChainSize
=
size
.
width
*
size
.
height
*
BytesPerPixel
(
SurfaceFormat
:
:
B8G8R8A8
)
*
(
mCompositor
-
>
UseTripleBuffering
(
)
?
3
:
2
)
;
aReport
-
>
swap_chain
+
=
swapChainSize
;
}
}
}
