#
include
"
RenderCompositorOGL
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
GLContextProvider
.
h
"
#
include
"
mozilla
/
widget
/
CompositorWidget
.
h
"
namespace
mozilla
{
namespace
wr
{
UniquePtr
<
RenderCompositor
>
RenderCompositorOGL
:
:
Create
(
RefPtr
<
widget
:
:
CompositorWidget
>
&
&
aWidget
)
{
RefPtr
<
gl
:
:
GLContext
>
gl
;
gl
=
gl
:
:
GLContextProvider
:
:
CreateForCompositorWidget
(
aWidget
true
)
;
if
(
!
gl
|
|
!
gl
-
>
MakeCurrent
(
)
)
{
gfxCriticalNote
<
<
"
Failed
GL
context
creation
for
WebRender
:
"
<
<
gfx
:
:
hexa
(
gl
.
get
(
)
)
;
return
nullptr
;
}
return
MakeUnique
<
RenderCompositorOGL
>
(
Move
(
gl
)
Move
(
aWidget
)
)
;
}
RenderCompositorOGL
:
:
RenderCompositorOGL
(
RefPtr
<
gl
:
:
GLContext
>
&
&
aGL
RefPtr
<
widget
:
:
CompositorWidget
>
&
&
aWidget
)
:
RenderCompositor
(
Move
(
aWidget
)
)
mGL
(
aGL
)
{
MOZ_ASSERT
(
mGL
)
;
}
RenderCompositorOGL
:
:
~
RenderCompositorOGL
(
)
{
}
bool
RenderCompositorOGL
:
:
BeginFrame
(
)
{
if
(
!
mGL
-
>
MakeCurrent
(
)
)
{
gfxCriticalNote
<
<
"
Failed
to
make
render
context
current
can
'
t
draw
.
"
;
return
false
;
}
return
true
;
}
void
RenderCompositorOGL
:
:
EndFrame
(
)
{
mGL
-
>
SwapBuffers
(
)
;
}
void
RenderCompositorOGL
:
:
Pause
(
)
{
#
ifdef
MOZ_WIDGET_ANDROID
if
(
!
mGL
|
|
mGL
-
>
IsDestroyed
(
)
)
{
return
;
}
mGL
-
>
ReleaseSurface
(
)
;
#
endif
}
bool
RenderCompositorOGL
:
:
Resume
(
)
{
#
ifdef
MOZ_WIDGET_ANDROID
if
(
!
mGL
|
|
mGL
-
>
IsDestroyed
(
)
)
{
return
false
;
}
return
mGL
-
>
RenewSurface
(
mWidget
)
;
#
else
return
true
;
#
endif
}
LayoutDeviceIntSize
RenderCompositorOGL
:
:
GetBufferSize
(
)
{
return
mWidget
-
>
GetClientSize
(
)
;
}
}
}
