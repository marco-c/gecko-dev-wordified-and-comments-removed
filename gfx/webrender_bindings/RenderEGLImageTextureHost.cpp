#
include
"
RenderEGLImageTextureHost
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
GLContextEGL
.
h
"
#
include
"
GLLibraryEGL
.
h
"
namespace
mozilla
{
namespace
wr
{
RenderEGLImageTextureHost
:
:
RenderEGLImageTextureHost
(
EGLImage
aImage
EGLSync
aSync
gfx
:
:
IntSize
aSize
)
:
mImage
(
aImage
)
mSync
(
aSync
)
mSize
(
aSize
)
mTextureTarget
(
LOCAL_GL_TEXTURE_2D
)
mTextureHandle
(
0
)
{
MOZ_COUNT_CTOR_INHERITED
(
RenderEGLImageTextureHost
RenderTextureHostOGL
)
;
}
RenderEGLImageTextureHost
:
:
~
RenderEGLImageTextureHost
(
)
{
MOZ_COUNT_DTOR_INHERITED
(
RenderEGLImageTextureHost
RenderTextureHostOGL
)
;
DeleteTextureHandle
(
)
;
}
GLuint
RenderEGLImageTextureHost
:
:
GetGLHandle
(
uint8_t
aChannelIndex
)
const
{
return
mTextureHandle
;
}
gfx
:
:
IntSize
RenderEGLImageTextureHost
:
:
GetSize
(
uint8_t
aChannelIndex
)
const
{
return
mSize
;
}
wr
:
:
WrExternalImage
RenderEGLImageTextureHost
:
:
Lock
(
uint8_t
aChannelIndex
gl
:
:
GLContext
*
aGL
wr
:
:
ImageRendering
aRendering
)
{
MOZ_ASSERT
(
aChannelIndex
=
=
0
)
;
if
(
mGL
.
get
(
)
!
=
aGL
)
{
if
(
mGL
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
GL
context
"
)
;
return
InvalidToWrExternalImage
(
)
;
}
mGL
=
aGL
;
}
if
(
!
mImage
|
|
!
mGL
|
|
!
mGL
-
>
MakeCurrent
(
)
)
{
return
InvalidToWrExternalImage
(
)
;
}
EGLint
status
=
LOCAL_EGL_CONDITION_SATISFIED
;
if
(
mSync
)
{
const
auto
&
gle
=
gl
:
:
GLContextEGL
:
:
Cast
(
mGL
)
;
const
auto
&
egl
=
gle
-
>
mEgl
;
MOZ_ASSERT
(
egl
-
>
IsExtensionSupported
(
gl
:
:
GLLibraryEGL
:
:
KHR_fence_sync
)
)
;
status
=
egl
-
>
fClientWaitSync
(
egl
-
>
Display
(
)
mSync
0
LOCAL_EGL_FOREVER
)
;
mSync
=
0
;
}
if
(
status
!
=
LOCAL_EGL_CONDITION_SATISFIED
)
{
MOZ_ASSERT
(
status
!
=
0
"
ClientWaitSync
generated
an
error
.
Has
mSync
already
been
destroyed
?
"
)
;
return
InvalidToWrExternalImage
(
)
;
}
if
(
!
mTextureHandle
)
{
mTextureTarget
=
mGL
-
>
GetPreferredEGLImageTextureTarget
(
)
;
MOZ_ASSERT
(
mTextureTarget
=
=
LOCAL_GL_TEXTURE_2D
|
|
mTextureTarget
=
=
LOCAL_GL_TEXTURE_EXTERNAL
)
;
mGL
-
>
fGenTextures
(
1
&
mTextureHandle
)
;
mCachedRendering
=
aRendering
;
ActivateBindAndTexParameteri
(
mGL
LOCAL_GL_TEXTURE0
mTextureTarget
mTextureHandle
aRendering
)
;
mGL
-
>
fEGLImageTargetTexture2D
(
mTextureTarget
mImage
)
;
}
else
if
(
IsFilterUpdateNecessary
(
aRendering
)
)
{
mCachedRendering
=
aRendering
;
ActivateBindAndTexParameteri
(
mGL
LOCAL_GL_TEXTURE0
mTextureTarget
mTextureHandle
aRendering
)
;
}
return
NativeTextureToWrExternalImage
(
mTextureHandle
0
0
mSize
.
width
mSize
.
height
)
;
}
void
RenderEGLImageTextureHost
:
:
Unlock
(
)
{
}
void
RenderEGLImageTextureHost
:
:
DeleteTextureHandle
(
)
{
if
(
mTextureHandle
)
{
mGL
-
>
fDeleteTextures
(
1
&
mTextureHandle
)
;
mTextureHandle
=
0
;
}
}
}
}
