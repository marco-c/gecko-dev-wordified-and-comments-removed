#
include
"
RenderDMABUFTextureHost
.
h
"
#
include
"
GLContextEGL
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
ScopedGLHelpers
.
h
"
namespace
mozilla
:
:
wr
{
RenderDMABUFTextureHost
:
:
RenderDMABUFTextureHost
(
DMABufSurface
*
aSurface
)
:
mSurface
(
aSurface
)
{
MOZ_COUNT_CTOR_INHERITED
(
RenderDMABUFTextureHost
RenderTextureHost
)
;
}
RenderDMABUFTextureHost
:
:
~
RenderDMABUFTextureHost
(
)
{
MOZ_COUNT_DTOR_INHERITED
(
RenderDMABUFTextureHost
RenderTextureHost
)
;
DeleteTextureHandle
(
)
;
}
wr
:
:
WrExternalImage
RenderDMABUFTextureHost
:
:
Lock
(
uint8_t
aChannelIndex
gl
:
:
GLContext
*
aGL
)
{
if
(
mGL
.
get
(
)
!
=
aGL
)
{
if
(
mGL
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
GL
context
"
)
;
return
InvalidToWrExternalImage
(
)
;
}
mGL
=
aGL
;
}
if
(
!
mGL
|
|
!
mGL
-
>
MakeCurrent
(
)
)
{
return
InvalidToWrExternalImage
(
)
;
}
if
(
!
mSurface
-
>
GetTexture
(
aChannelIndex
)
)
{
if
(
!
mSurface
-
>
CreateTexture
(
mGL
aChannelIndex
)
)
{
return
InvalidToWrExternalImage
(
)
;
}
ActivateBindAndTexParameteri
(
mGL
LOCAL_GL_TEXTURE0
LOCAL_GL_TEXTURE_2D
mSurface
-
>
GetTexture
(
aChannelIndex
)
)
;
}
const
gfx
:
:
IntSize
size
(
mSurface
-
>
GetWidth
(
aChannelIndex
)
mSurface
-
>
GetHeight
(
aChannelIndex
)
)
;
return
NativeTextureToWrExternalImage
(
mSurface
-
>
GetTexture
(
aChannelIndex
)
0
.
0
0
.
0
static_cast
<
float
>
(
size
.
width
)
static_cast
<
float
>
(
size
.
height
)
)
;
}
void
RenderDMABUFTextureHost
:
:
Unlock
(
)
{
}
void
RenderDMABUFTextureHost
:
:
DeleteTextureHandle
(
)
{
mSurface
-
>
ReleaseTextures
(
)
;
}
void
RenderDMABUFTextureHost
:
:
ClearCachedResources
(
)
{
DeleteTextureHandle
(
)
;
mGL
=
nullptr
;
}
}
