#
include
"
RenderCompositorSWGL
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
widget
/
CompositorWidget
.
h
"
namespace
mozilla
{
namespace
wr
{
UniquePtr
<
RenderCompositor
>
RenderCompositorSWGL
:
:
Create
(
RefPtr
<
widget
:
:
CompositorWidget
>
&
&
aWidget
nsACString
&
aError
)
{
void
*
ctx
=
wr_swgl_create_context
(
)
;
if
(
!
ctx
)
{
gfxCriticalNote
<
<
"
Failed
SWGL
context
creation
for
WebRender
"
;
return
nullptr
;
}
return
MakeUnique
<
RenderCompositorSWGL
>
(
std
:
:
move
(
aWidget
)
ctx
)
;
}
RenderCompositorSWGL
:
:
RenderCompositorSWGL
(
RefPtr
<
widget
:
:
CompositorWidget
>
&
&
aWidget
void
*
aContext
)
:
RenderCompositor
(
std
:
:
move
(
aWidget
)
)
mContext
(
aContext
)
{
MOZ_ASSERT
(
mContext
)
;
}
RenderCompositorSWGL
:
:
~
RenderCompositorSWGL
(
)
{
wr_swgl_destroy_context
(
mContext
)
;
}
void
RenderCompositorSWGL
:
:
ClearMappedBuffer
(
)
{
mMappedData
=
nullptr
;
mMappedStride
=
0
;
mDT
=
nullptr
;
}
bool
RenderCompositorSWGL
:
:
MakeCurrent
(
)
{
wr_swgl_make_current
(
mContext
)
;
return
true
;
}
bool
RenderCompositorSWGL
:
:
BeginFrame
(
)
{
ClearMappedBuffer
(
)
;
mRegion
=
LayoutDeviceIntRect
(
LayoutDeviceIntPoint
(
)
GetBufferSize
(
)
)
;
wr_swgl_make_current
(
mContext
)
;
return
true
;
}
bool
RenderCompositorSWGL
:
:
AllocateMappedBuffer
(
const
wr
:
:
DeviceIntRect
*
aOpaqueRects
size_t
aNumOpaqueRects
)
{
MOZ_ASSERT
(
!
mDT
)
;
layers
:
:
BufferMode
bufferMode
=
layers
:
:
BufferMode
:
:
BUFFERED
;
mDT
=
mWidget
-
>
StartRemoteDrawingInRegion
(
mRegion
&
bufferMode
)
;
if
(
!
mDT
)
{
return
false
;
}
mWidget
-
>
ClearBeforePaint
(
mDT
mRegion
)
;
uint8_t
*
data
=
nullptr
;
gfx
:
:
IntSize
size
;
int32_t
stride
=
0
;
gfx
:
:
SurfaceFormat
format
=
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
;
if
(
bufferMode
!
=
layers
:
:
BufferMode
:
:
BUFFERED
&
&
!
mSurface
&
&
mDT
-
>
LockBits
(
&
data
&
size
&
stride
&
format
)
&
&
(
format
!
=
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
&
&
format
!
=
gfx
:
:
SurfaceFormat
:
:
B8G8R8X8
)
)
{
mDT
-
>
ReleaseBits
(
data
)
;
data
=
nullptr
;
}
LayoutDeviceIntRect
bounds
=
mRegion
.
GetBounds
(
)
;
if
(
data
)
{
mMappedData
=
data
;
mMappedStride
=
stride
;
if
(
size
!
=
bounds
.
Size
(
)
.
ToUnknownSize
(
)
)
{
bounds
.
ExpandToEnclose
(
LayoutDeviceIntPoint
(
0
0
)
)
;
}
}
else
{
size
=
bounds
.
Size
(
)
.
ToUnknownSize
(
)
;
if
(
!
mSurface
|
|
mSurface
-
>
GetSize
(
)
!
=
size
)
{
mSurface
=
gfx
:
:
Factory
:
:
CreateDataSourceSurface
(
size
gfx
:
:
SurfaceFormat
:
:
B8G8R8A8
)
;
}
gfx
:
:
DataSourceSurface
:
:
MappedSurface
map
=
{
nullptr
0
}
;
if
(
!
mSurface
|
|
!
mSurface
-
>
Map
(
gfx
:
:
DataSourceSurface
:
:
READ_WRITE
&
map
)
)
{
mWidget
-
>
EndRemoteDrawingInRegion
(
mDT
mRegion
)
;
ClearMappedBuffer
(
)
;
return
false
;
}
mMappedData
=
map
.
mData
;
mMappedStride
=
map
.
mStride
;
}
MOZ_ASSERT
(
mMappedData
!
=
nullptr
&
&
mMappedStride
>
0
)
;
wr_swgl_init_default_framebuffer
(
mContext
bounds
.
x
bounds
.
y
bounds
.
width
bounds
.
height
mMappedStride
mMappedData
)
;
LayoutDeviceIntRegion
opaque
;
for
(
size_t
i
=
0
;
i
<
aNumOpaqueRects
;
i
+
+
)
{
const
auto
&
rect
=
aOpaqueRects
[
i
]
;
opaque
.
OrWith
(
LayoutDeviceIntRect
(
rect
.
origin
.
x
rect
.
origin
.
y
rect
.
size
.
width
rect
.
size
.
height
)
)
;
}
RefPtr
<
DrawTarget
>
dt
=
Factory
:
:
CreateDrawTargetForData
(
BackendType
:
:
SKIA
mMappedData
bounds
.
Size
(
)
.
ToUnknownSize
(
)
mMappedStride
SurfaceFormat
:
:
B8G8R8A8
false
)
;
LayoutDeviceIntRegion
clear
;
clear
.
Sub
(
mRegion
opaque
)
;
for
(
auto
iter
=
clear
.
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
dt
-
>
ClearRect
(
IntRectToRect
(
(
iter
.
Get
(
)
-
bounds
.
TopLeft
(
)
)
.
ToUnknownRect
(
)
)
)
;
}
return
true
;
}
void
RenderCompositorSWGL
:
:
StartCompositing
(
const
wr
:
:
DeviceIntRect
*
aDirtyRects
size_t
aNumDirtyRects
const
wr
:
:
DeviceIntRect
*
aOpaqueRects
size_t
aNumOpaqueRects
)
{
if
(
mDT
)
{
CommitMappedBuffer
(
false
)
;
mRegion
=
LayoutDeviceIntRect
(
LayoutDeviceIntPoint
(
)
GetBufferSize
(
)
)
;
}
if
(
aNumDirtyRects
)
{
auto
bounds
=
mRegion
.
GetBounds
(
)
;
mRegion
.
SetEmpty
(
)
;
for
(
size_t
i
=
0
;
i
<
aNumDirtyRects
;
i
+
+
)
{
const
auto
&
rect
=
aDirtyRects
[
i
]
;
mRegion
.
OrWith
(
LayoutDeviceIntRect
(
rect
.
origin
.
x
rect
.
origin
.
y
rect
.
size
.
width
rect
.
size
.
height
)
)
;
}
mRegion
.
AndWith
(
bounds
)
;
}
if
(
!
AllocateMappedBuffer
(
aOpaqueRects
aNumOpaqueRects
)
)
{
gfxCriticalNote
<
<
"
RenderCompositorSWGL
failed
mapping
default
framebuffer
"
;
wr_swgl_init_default_framebuffer
(
mContext
0
0
2
2
0
nullptr
)
;
}
}
void
RenderCompositorSWGL
:
:
CommitMappedBuffer
(
bool
aDirty
)
{
if
(
!
mDT
)
{
return
;
}
wr_swgl_init_default_framebuffer
(
mContext
0
0
0
0
0
nullptr
)
;
MOZ_ASSERT
(
mMappedData
!
=
nullptr
)
;
if
(
mSurface
)
{
mSurface
-
>
Unmap
(
)
;
if
(
aDirty
)
{
LayoutDeviceIntRect
bounds
=
mRegion
.
GetBounds
(
)
;
gfx
:
:
IntPoint
srcOffset
=
bounds
.
TopLeft
(
)
.
ToUnknownPoint
(
)
;
gfx
:
:
IntPoint
dstOffset
=
mDT
-
>
GetSize
(
)
=
=
bounds
.
Size
(
)
.
ToUnknownSize
(
)
?
srcOffset
:
gfx
:
:
IntPoint
(
0
0
)
;
for
(
auto
iter
=
mRegion
.
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
gfx
:
:
IntRect
dirtyRect
=
iter
.
Get
(
)
.
ToUnknownRect
(
)
;
mDT
-
>
CopySurface
(
mSurface
dirtyRect
-
srcOffset
dirtyRect
.
TopLeft
(
)
-
dstOffset
)
;
}
}
}
else
{
mDT
-
>
ReleaseBits
(
mMappedData
)
;
}
mWidget
-
>
EndRemoteDrawingInRegion
(
mDT
mRegion
)
;
ClearMappedBuffer
(
)
;
}
void
RenderCompositorSWGL
:
:
CancelFrame
(
)
{
CommitMappedBuffer
(
false
)
;
}
RenderedFrameId
RenderCompositorSWGL
:
:
EndFrame
(
const
nsTArray
<
DeviceIntRect
>
&
aDirtyRects
)
{
RenderedFrameId
frameId
=
GetNextRenderFrameId
(
)
;
CommitMappedBuffer
(
)
;
return
frameId
;
}
void
RenderCompositorSWGL
:
:
Pause
(
)
{
}
bool
RenderCompositorSWGL
:
:
Resume
(
)
{
return
true
;
}
LayoutDeviceIntSize
RenderCompositorSWGL
:
:
GetBufferSize
(
)
{
return
mWidget
-
>
GetClientSize
(
)
;
}
CompositorCapabilities
RenderCompositorSWGL
:
:
GetCompositorCapabilities
(
)
{
CompositorCapabilities
caps
;
caps
.
virtual_surface_size
=
0
;
return
caps
;
}
}
}
