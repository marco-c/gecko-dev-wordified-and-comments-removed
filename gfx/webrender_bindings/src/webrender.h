#
ifndef
WR_h
#
define
WR_h
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
extern
"
C
"
{
bool
is_in_compositor_thread
(
)
;
bool
is_in_render_thread
(
)
;
void
*
get_proc_address_from_glcontext
(
void
*
glcontext_ptr
const
char
*
procname
)
;
enum
WRImageFormat
{
Invalid
A8
RGB8
RGBA8
RGBAF32
}
;
typedef
uint64_t
WRWindowId
;
typedef
uint64_t
WRImageKey
;
typedef
uint64_t
WRFontKey
;
typedef
uint64_t
WRPipelineId
;
typedef
uint32_t
WREpoch
;
struct
WRColor
{
float
r
;
float
g
;
float
b
;
float
a
;
bool
operator
=
=
(
const
WRColor
&
aRhs
)
const
{
return
r
=
=
aRhs
.
r
&
&
g
=
=
aRhs
.
g
&
&
b
=
=
aRhs
.
b
&
&
a
=
=
aRhs
.
a
;
}
}
;
struct
WRGlyphInstance
{
uint32_t
index
;
float
x
;
float
y
;
bool
operator
=
=
(
const
WRGlyphInstance
&
other
)
const
{
return
index
=
=
other
.
index
&
&
x
=
=
other
.
x
&
&
y
=
=
other
.
y
;
}
}
;
struct
WRGlyphArray
{
mozilla
:
:
gfx
:
:
Color
color
;
nsTArray
<
WRGlyphInstance
>
glyphs
;
bool
operator
=
=
(
const
WRGlyphArray
&
other
)
const
{
if
(
!
(
color
=
=
other
.
color
)
|
|
(
glyphs
.
Length
(
)
!
=
other
.
glyphs
.
Length
(
)
)
)
{
return
false
;
}
for
(
size_t
i
=
0
;
i
<
glyphs
.
Length
(
)
;
i
+
+
)
{
if
(
!
(
glyphs
[
i
]
=
=
other
.
glyphs
[
i
]
)
)
{
return
false
;
}
}
return
true
;
}
}
;
enum
WRBorderStyle
{
None
Solid
Double
Dotted
Dashed
Hidden
Groove
Ridge
Inset
Outset
}
;
struct
WRBorderSide
{
float
width
;
WRColor
color
;
WRBorderStyle
style
;
bool
operator
=
=
(
const
WRBorderSide
&
aRhs
)
const
{
return
width
=
=
aRhs
.
width
&
&
color
=
=
aRhs
.
color
&
&
style
=
=
aRhs
.
style
;
}
}
;
struct
WRLayoutSize
{
float
width
;
float
height
;
bool
operator
=
=
(
const
WRLayoutSize
&
aRhs
)
const
{
return
width
=
=
aRhs
.
width
&
&
height
=
=
aRhs
.
height
;
}
}
;
struct
WRRect
{
float
x
;
float
y
;
float
width
;
float
height
;
bool
operator
=
=
(
const
WRRect
&
aRhs
)
const
{
return
x
=
=
aRhs
.
x
&
&
y
=
=
aRhs
.
y
&
&
width
=
=
aRhs
.
width
&
&
height
=
=
aRhs
.
height
;
}
}
;
struct
WRImageMask
{
WRImageKey
image
;
WRRect
rect
;
bool
repeat
;
bool
operator
=
=
(
const
WRImageMask
&
aRhs
)
const
{
return
image
=
=
aRhs
.
image
&
&
rect
=
=
aRhs
.
rect
&
&
repeat
=
=
aRhs
.
repeat
;
}
}
;
enum
class
WRTextureFilter
{
Linear
Point
Sentinel
}
;
typedef
uint64_t
WRImageIdType
;
struct
WRExternalImageId
{
WRImageIdType
id
;
}
;
enum
WRExternalImageType
{
TEXTURE_HANDLE
}
;
struct
WRExternalImage
{
WRExternalImageType
type
;
float
u0
v0
;
float
u1
v1
;
uint32_t
handle
;
}
;
typedef
WRExternalImage
(
*
LockExternalImageCallback
)
(
void
*
WRExternalImageId
)
;
typedef
void
(
*
UnlockExternalImageCallback
)
(
void
*
WRExternalImageId
)
;
typedef
void
(
*
ReleaseExternalImageCallback
)
(
void
*
WRExternalImageId
)
;
struct
WRExternalImageHandler
{
void
*
ExternalImageObj
;
LockExternalImageCallback
lock_func
;
UnlockExternalImageCallback
unlock_func
;
ReleaseExternalImageCallback
release_func
;
}
;
struct
wrwindowstate
;
#
ifdef
MOZ_ENABLE_WEBRENDER
#
define
WR_INLINE
#
define
WR_FUNC
#
else
#
define
WR_INLINE
inline
#
define
WR_FUNC
{
MOZ_MAKE_COMPILER_ASSUME_IS_UNREACHABLE
(
"
WebRender
disabled
"
)
;
}
#
endif
struct
WrRenderer
;
struct
WRState
;
WR_INLINE
void
wr_renderer_update
(
WrRenderer
*
renderer
)
WR_FUNC
;
WR_INLINE
void
wr_renderer_render
(
WrRenderer
*
renderer
uint32_t
width
uint32_t
height
)
WR_FUNC
;
WR_INLINE
void
wr_renderer_set_profiler_enabled
(
WrRenderer
*
renderer
bool
enabled
)
WR_FUNC
;
WR_INLINE
bool
wr_renderer_current_epoch
(
WrRenderer
*
renderer
WRPipelineId
pipeline_id
WREpoch
*
out_epoch
)
WR_FUNC
;
WR_INLINE
bool
wr_renderer_delete
(
WrRenderer
*
renderer
)
WR_FUNC
;
WR_INLINE
void
wr_gl_init
(
void
*
aGLContext
)
WR_FUNC
;
struct
WrAPI
;
WR_INLINE
void
wr_window_new
(
WRWindowId
window_id
bool
enable_profiler
WrAPI
*
*
out_api
WrRenderer
*
*
out_renderer
)
WR_FUNC
;
WR_INLINE
void
wr_window_remove_pipeline
(
wrwindowstate
*
window
WRState
*
state
)
WR_FUNC
;
WR_INLINE
void
wr_api_delete
(
WrAPI
*
api
)
WR_FUNC
;
WR_INLINE
WRImageKey
wr_api_add_image
(
WrAPI
*
api
uint32_t
width
uint32_t
height
uint32_t
stride
WRImageFormat
format
uint8_t
*
bytes
size_t
size
)
WR_FUNC
;
WR_INLINE
WRImageKey
wr_api_add_external_image_texture
(
WrAPI
*
api
uint32_t
width
uint32_t
height
WRImageFormat
format
uint64_t
external_image_id
)
WR_FUNC
;
WR_INLINE
void
wr_api_update_image
(
WrAPI
*
api
WRImageKey
key
uint32_t
width
uint32_t
height
WRImageFormat
format
uint8_t
*
bytes
size_t
size
)
WR_FUNC
;
WR_INLINE
void
wr_api_delete_image
(
WrAPI
*
api
WRImageKey
key
)
WR_FUNC
;
WR_INLINE
void
wr_api_set_root_pipeline
(
WrAPI
*
api
WRPipelineId
pipeline_id
)
WR_FUNC
;
WR_INLINE
void
wr_api_set_root_display_list
(
WrAPI
*
api
WRState
*
state
uint32_t
epoch
float
w
float
h
)
WR_FUNC
;
WR_INLINE
void
wr_window_init_pipeline_epoch
(
wrwindowstate
*
window
WRPipelineId
pipeline
uint32_t
width
uint32_t
height
)
WR_FUNC
;
WR_INLINE
WRFontKey
wr_api_add_raw_font
(
WrAPI
*
api
uint8_t
*
font_buffer
size_t
buffer_size
)
WR_FUNC
;
WR_INLINE
WRFontKey
wr_window_add_raw_font
(
wrwindowstate
*
window
uint8_t
*
font_buffer
size_t
buffer_size
)
WR_FUNC
;
WR_INLINE
wrwindowstate
*
wr_init_window
(
WRPipelineId
root_pipeline_id
void
*
webrender_bridge_ptr
bool
enable_profiler
WRExternalImageHandler
*
handler
=
nullptr
)
WR_FUNC
;
WR_INLINE
WRState
*
wr_state_new
(
uint32_t
width
uint32_t
height
WRPipelineId
pipeline_id
)
WR_FUNC
;
WR_INLINE
void
wr_state_delete
(
WRState
*
state
)
WR_FUNC
;
WR_INLINE
void
wr_destroy
(
wrwindowstate
*
wrWindow
WRState
*
WRState
)
WR_FUNC
;
WR_INLINE
WRImageKey
wr_add_image
(
wrwindowstate
*
wrWindow
uint32_t
width
uint32_t
height
uint32_t
stride
WRImageFormat
format
uint8_t
*
bytes
size_t
size
)
WR_FUNC
;
WR_INLINE
WRImageKey
wr_add_external_image_texture
(
wrwindowstate
*
wrWindow
uint32_t
width
uint32_t
height
WRImageFormat
format
uint64_t
external_image_id
)
WR_FUNC
;
WR_INLINE
void
wr_update_image
(
wrwindowstate
*
wrWindow
WRImageKey
key
uint32_t
width
uint32_t
height
WRImageFormat
format
uint8_t
*
bytes
size_t
size
)
WR_FUNC
;
WR_INLINE
void
wr_delete_image
(
wrwindowstate
*
wrWindow
WRImageKey
key
)
WR_FUNC
;
WR_INLINE
void
wr_dp_push_stacking_context
(
WRState
*
wrState
WRRect
bounds
WRRect
overflow
const
WRImageMask
*
mask
const
float
*
matrix
)
WR_FUNC
;
WR_INLINE
void
wr_dp_pop_stacking_context
(
WRState
*
wrState
)
WR_FUNC
;
WR_INLINE
void
wr_dp_begin
(
WRState
*
wrState
uint32_t
width
uint32_t
height
)
WR_FUNC
;
WR_INLINE
void
wr_window_dp_begin
(
wrwindowstate
*
wrWindow
WRState
*
wrState
uint32_t
width
uint32_t
height
)
WR_FUNC
;
WR_INLINE
void
wr_window_dp_end
(
wrwindowstate
*
wrWindow
WRState
*
wrState
)
WR_FUNC
;
WR_INLINE
void
wr_dp_end
(
WRState
*
builder
WrAPI
*
api
uint32_t
epoch
)
WR_FUNC
;
WR_INLINE
void
wr_composite_window
(
wrwindowstate
*
wrWindow
)
WR_FUNC
;
WR_INLINE
void
wr_dp_push_rect
(
WRState
*
wrState
WRRect
bounds
WRRect
clip
float
r
float
g
float
b
float
a
)
WR_FUNC
;
WR_INLINE
void
wr_dp_push_text
(
WRState
*
wrState
WRRect
bounds
WRRect
clip
WRColor
color
WRFontKey
font_Key
const
WRGlyphInstance
*
glyphs
uint32_t
glyph_count
float
glyph_size
)
WR_FUNC
;
WR_INLINE
void
wr_dp_push_border
(
WRState
*
wrState
WRRect
bounds
WRRect
clip
WRBorderSide
top
WRBorderSide
right
WRBorderSide
bottom
WRBorderSide
left
WRLayoutSize
top_left_radius
WRLayoutSize
top_right_radius
WRLayoutSize
bottom_left_radius
WRLayoutSize
bottom_right_radius
)
WR_FUNC
;
WR_INLINE
void
wr_dp_push_image
(
WRState
*
wrState
WRRect
bounds
WRRect
clip
const
WRImageMask
*
mask
WRTextureFilter
filter
WRImageKey
key
)
WR_FUNC
;
WR_INLINE
void
wr_window_dp_push_iframe
(
wrwindowstate
*
wrWindow
WRState
*
wrState
WRRect
bounds
WRRect
clip
WRPipelineId
layers_id
)
WR_FUNC
;
WR_INLINE
void
wr_dp_push_iframe
(
WRState
*
wrState
WRRect
bounds
WRRect
clip
WRPipelineId
layers_id
)
WR_FUNC
;
WR_INLINE
const
uint8_t
*
wr_readback_into_buffer
(
wrwindowstate
*
wrWindow
uint32_t
width
uint32_t
height
uint8_t
*
dst_buffer
uint32_t
buffer_length
)
WR_FUNC
;
WR_INLINE
void
wr_profiler_set_enabled
(
wrwindowstate
*
wrWindow
bool
enabled
)
WR_FUNC
;
#
undef
WR_FUNC
}
#
endif
