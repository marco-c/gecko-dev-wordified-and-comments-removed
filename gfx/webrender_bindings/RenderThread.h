#
ifndef
MOZILLA_LAYERS_RENDERTHREAD_H
#
define
MOZILLA_LAYERS_RENDERTHREAD_H
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
platform_thread
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
ThreadSafeRefcountingWithMainThreadDestruction
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
webrender
/
webrender_ffi
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
mozilla
/
layers
/
SynchronousTask
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderCompositionRecorder
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
#
include
<
list
>
#
include
<
queue
>
#
include
<
unordered_map
>
namespace
mozilla
{
namespace
gl
{
class
GLContext
;
}
namespace
wr
{
typedef
MozPromise
<
MemoryReport
bool
true
>
MemoryReportPromise
;
class
RendererOGL
;
class
RenderTextureHost
;
class
RenderThread
;
class
WebRenderThreadPool
{
public
:
WebRenderThreadPool
(
)
;
~
WebRenderThreadPool
(
)
;
wr
:
:
WrThreadPool
*
Raw
(
)
{
MOZ_RELEASE_ASSERT
(
mThreadPool
)
;
return
mThreadPool
;
}
void
Release
(
)
;
protected
:
wr
:
:
WrThreadPool
*
mThreadPool
;
}
;
class
WebRenderProgramCache
final
{
public
:
explicit
WebRenderProgramCache
(
wr
:
:
WrThreadPool
*
aThreadPool
)
;
~
WebRenderProgramCache
(
)
;
wr
:
:
WrProgramCache
*
Raw
(
)
{
return
mProgramCache
;
}
protected
:
wr
:
:
WrProgramCache
*
mProgramCache
;
}
;
class
WebRenderShaders
final
{
public
:
WebRenderShaders
(
gl
:
:
GLContext
*
gl
WebRenderProgramCache
*
programCache
)
;
~
WebRenderShaders
(
)
;
wr
:
:
WrShaders
*
RawShaders
(
)
{
return
mShaders
;
}
protected
:
RefPtr
<
gl
:
:
GLContext
>
mGL
;
wr
:
:
WrShaders
*
mShaders
;
}
;
class
WebRenderPipelineInfo
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
WebRenderPipelineInfo
)
;
public
:
explicit
WebRenderPipelineInfo
(
wr
:
:
WrPipelineInfo
aPipelineInfo
)
;
const
wr
:
:
WrPipelineInfo
&
Raw
(
)
{
return
mPipelineInfo
;
}
protected
:
~
WebRenderPipelineInfo
(
)
;
const
wr
:
:
WrPipelineInfo
mPipelineInfo
;
}
;
class
RendererEvent
{
public
:
virtual
~
RendererEvent
(
)
=
default
;
virtual
void
Run
(
RenderThread
&
aRenderThread
wr
:
:
WindowId
aWindow
)
=
0
;
}
;
class
RenderThread
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_MAIN_THREAD_DESTRUCTION
(
RenderThread
)
public
:
static
RenderThread
*
Get
(
)
;
static
void
Start
(
)
;
static
void
ShutDown
(
)
;
static
MessageLoop
*
Loop
(
)
;
static
bool
IsInRenderThread
(
)
;
static
RefPtr
<
MemoryReportPromise
>
AccumulateMemoryReport
(
MemoryReport
aInitial
)
;
void
AddRenderer
(
wr
:
:
WindowId
aWindowId
UniquePtr
<
RendererOGL
>
aRenderer
)
;
void
RemoveRenderer
(
wr
:
:
WindowId
aWindowId
)
;
RendererOGL
*
GetRenderer
(
wr
:
:
WindowId
aWindowId
)
;
void
HandleFrame
(
wr
:
:
WindowId
aWindowId
bool
aRender
)
;
void
WakeUp
(
wr
:
:
WindowId
aWindowId
)
;
void
PipelineSizeChanged
(
wr
:
:
WindowId
aWindowId
uint64_t
aPipelineId
float
aWidth
float
aHeight
)
;
void
RunEvent
(
wr
:
:
WindowId
aWindowId
UniquePtr
<
RendererEvent
>
aCallBack
)
;
void
UpdateAndRender
(
wr
:
:
WindowId
aWindowId
const
VsyncId
&
aStartId
const
TimeStamp
&
aStartTime
bool
aRender
const
Maybe
<
gfx
:
:
IntSize
>
&
aReadbackSize
const
Maybe
<
wr
:
:
ImageFormat
>
&
aReadbackFormat
const
Maybe
<
Range
<
uint8_t
>
>
&
aReadbackBuffer
bool
aHadSlowFrame
)
;
void
Pause
(
wr
:
:
WindowId
aWindowId
)
;
bool
Resume
(
wr
:
:
WindowId
aWindowId
)
;
void
RegisterExternalImage
(
uint64_t
aExternalImageId
already_AddRefed
<
RenderTextureHost
>
aTexture
)
;
void
UnregisterExternalImage
(
uint64_t
aExternalImageId
)
;
void
PrepareForUse
(
uint64_t
aExternalImageId
)
;
void
NotifyNotUsed
(
uint64_t
aExternalImageId
)
;
void
NofityForUse
(
uint64_t
aExternalImageId
)
;
void
UnregisterExternalImageDuringShutdown
(
uint64_t
aExternalImageId
)
;
RenderTextureHost
*
GetRenderTexture
(
WrExternalImageId
aExternalImageId
)
;
bool
IsDestroyed
(
wr
:
:
WindowId
aWindowId
)
;
void
SetDestroyed
(
wr
:
:
WindowId
aWindowId
)
;
bool
TooManyPendingFrames
(
wr
:
:
WindowId
aWindowId
)
;
void
IncPendingFrameCount
(
wr
:
:
WindowId
aWindowId
const
VsyncId
&
aStartId
const
TimeStamp
&
aStartTime
uint8_t
aDocFrameCount
)
;
mozilla
:
:
Pair
<
bool
bool
>
IncRenderingFrameCount
(
wr
:
:
WindowId
aWindowId
bool
aRender
)
;
void
FrameRenderingComplete
(
wr
:
:
WindowId
aWindowId
)
;
void
NotifySlowFrame
(
wr
:
:
WindowId
aWindowId
)
;
WebRenderThreadPool
&
ThreadPool
(
)
{
return
mThreadPool
;
}
WebRenderProgramCache
*
GetProgramCache
(
)
{
MOZ_ASSERT
(
IsInRenderThread
(
)
)
;
return
mProgramCache
.
get
(
)
;
}
WebRenderShaders
*
GetShaders
(
)
{
MOZ_ASSERT
(
IsInRenderThread
(
)
)
;
return
mShaders
.
get
(
)
;
}
gl
:
:
GLContext
*
SharedGL
(
)
;
void
ClearSharedGL
(
)
;
void
HandleDeviceReset
(
const
char
*
aWhere
bool
aNotify
)
;
bool
IsHandlingDeviceReset
(
)
;
void
SimulateDeviceReset
(
)
;
void
HandleWebRenderError
(
WebRenderError
aError
)
;
bool
IsHandlingWebRenderError
(
)
;
size_t
RendererCount
(
)
;
void
SetCompositionRecorderForWindow
(
wr
:
:
WindowId
aWindowId
UniquePtr
<
layers
:
:
WebRenderCompositionRecorder
>
aCompositionRecorder
)
;
void
WriteCollectedFramesForWindow
(
wr
:
:
WindowId
aWindowId
)
;
private
:
explicit
RenderThread
(
base
:
:
Thread
*
aThread
)
;
void
DeferredRenderTextureHostDestroy
(
)
;
void
ShutDownTask
(
layers
:
:
SynchronousTask
*
aTask
)
;
void
InitDeviceTask
(
)
;
void
DoAccumulateMemoryReport
(
MemoryReport
const
RefPtr
<
MemoryReportPromise
:
:
Private
>
&
)
;
~
RenderThread
(
)
;
base
:
:
Thread
*
const
mThread
;
WebRenderThreadPool
mThreadPool
;
UniquePtr
<
WebRenderProgramCache
>
mProgramCache
;
UniquePtr
<
WebRenderShaders
>
mShaders
;
RefPtr
<
gl
:
:
GLContext
>
mSharedGL
;
std
:
:
map
<
wr
:
:
WindowId
UniquePtr
<
RendererOGL
>
>
mRenderers
;
std
:
:
map
<
wr
:
:
WindowId
UniquePtr
<
layers
:
:
WebRenderCompositionRecorder
>
>
mCompositionRecorders
;
struct
PendingFrameInfo
{
TimeStamp
mStartTime
;
VsyncId
mStartId
;
}
;
struct
WindowInfo
{
bool
mIsDestroyed
=
false
;
bool
mRender
=
false
;
int64_t
mPendingCount
=
0
;
int64_t
mRenderingCount
=
0
;
uint8_t
mDocFramesSeen
=
0
;
std
:
:
queue
<
PendingFrameInfo
>
mPendingFrames
;
std
:
:
queue
<
uint8_t
>
mDocFrameCounts
;
bool
mHadSlowFrame
=
false
;
}
;
DataMutex
<
std
:
:
unordered_map
<
uint64_t
WindowInfo
*
>
>
mWindowInfos
;
Mutex
mRenderTextureMapLock
;
std
:
:
unordered_map
<
uint64_t
RefPtr
<
RenderTextureHost
>
>
mRenderTextures
;
std
:
:
list
<
RefPtr
<
RenderTextureHost
>
>
mRenderTexturesDeferred
;
bool
mHasShutdown
;
bool
mHandlingDeviceReset
;
bool
mHandlingWebRenderError
;
}
;
}
}
#
endif
