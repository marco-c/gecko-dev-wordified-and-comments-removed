#
ifndef
MOZILLA_LAYERS_RENDERTHREAD_H
#
define
MOZILLA_LAYERS_RENDERTHREAD_H
#
include
"
base
/
basictypes
.
h
"
#
include
"
base
/
platform_thread
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
ThreadSafeRefcountingWithMainThreadDestruction
.
h
"
#
include
"
mozilla
/
Mutex
.
h
"
#
include
"
mozilla
/
webrender
/
webrender_ffi
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
mozilla
/
layers
/
SynchronousTask
.
h
"
namespace
mozilla
{
namespace
wr
{
class
RendererOGL
;
class
RenderTextureHost
;
class
RenderThread
;
class
WebRenderThreadPool
{
public
:
WebRenderThreadPool
(
)
;
~
WebRenderThreadPool
(
)
;
wr
:
:
WrThreadPool
*
Raw
(
)
{
return
mThreadPool
;
}
protected
:
wr
:
:
WrThreadPool
*
mThreadPool
;
}
;
class
WebRenderProgramCache
{
public
:
WebRenderProgramCache
(
)
;
~
WebRenderProgramCache
(
)
;
wr
:
:
WrProgramCache
*
Raw
(
)
{
return
mProgramCache
;
}
protected
:
wr
:
:
WrProgramCache
*
mProgramCache
;
}
;
class
RendererEvent
{
public
:
virtual
~
RendererEvent
(
)
{
}
virtual
void
Run
(
RenderThread
&
aRenderThread
wr
:
:
WindowId
aWindow
)
=
0
;
}
;
class
RenderThread
final
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING_WITH_MAIN_THREAD_DESTRUCTION
(
RenderThread
)
public
:
static
RenderThread
*
Get
(
)
;
static
void
Start
(
)
;
static
void
ShutDown
(
)
;
static
MessageLoop
*
Loop
(
)
;
static
bool
IsInRenderThread
(
)
;
void
AddRenderer
(
wr
:
:
WindowId
aWindowId
UniquePtr
<
RendererOGL
>
aRenderer
)
;
void
RemoveRenderer
(
wr
:
:
WindowId
aWindowId
)
;
RendererOGL
*
GetRenderer
(
wr
:
:
WindowId
aWindowId
)
;
void
NewFrameReady
(
wr
:
:
WindowId
aWindowId
)
;
void
WakeUp
(
wr
:
:
WindowId
aWindowId
)
;
void
PipelineSizeChanged
(
wr
:
:
WindowId
aWindowId
uint64_t
aPipelineId
float
aWidth
float
aHeight
)
;
void
RunEvent
(
wr
:
:
WindowId
aWindowId
UniquePtr
<
RendererEvent
>
aCallBack
)
;
void
UpdateAndRender
(
wr
:
:
WindowId
aWindowId
bool
aReadback
=
false
)
;
void
Pause
(
wr
:
:
WindowId
aWindowId
)
;
bool
Resume
(
wr
:
:
WindowId
aWindowId
)
;
void
RegisterExternalImage
(
uint64_t
aExternalImageId
already_AddRefed
<
RenderTextureHost
>
aTexture
)
;
void
UnregisterExternalImage
(
uint64_t
aExternalImageId
)
;
void
UnregisterExternalImageDuringShutdown
(
uint64_t
aExternalImageId
)
;
RenderTextureHost
*
GetRenderTexture
(
WrExternalImageId
aExternalImageId
)
;
bool
IsDestroyed
(
wr
:
:
WindowId
aWindowId
)
;
void
SetDestroyed
(
wr
:
:
WindowId
aWindowId
)
;
bool
TooManyPendingFrames
(
wr
:
:
WindowId
aWindowId
)
;
void
IncPendingFrameCount
(
wr
:
:
WindowId
aWindowId
)
;
void
IncRenderingFrameCount
(
wr
:
:
WindowId
aWindowId
)
;
void
DecPendingFrameCount
(
wr
:
:
WindowId
aWindowId
)
;
WebRenderThreadPool
&
ThreadPool
(
)
{
return
mThreadPool
;
}
WebRenderProgramCache
*
ProgramCache
(
)
;
private
:
explicit
RenderThread
(
base
:
:
Thread
*
aThread
)
;
void
DeferredRenderTextureHostDestroy
(
RefPtr
<
RenderTextureHost
>
aTexture
)
;
void
ShutDownTask
(
layers
:
:
SynchronousTask
*
aTask
)
;
~
RenderThread
(
)
;
base
:
:
Thread
*
const
mThread
;
WebRenderThreadPool
mThreadPool
;
UniquePtr
<
WebRenderProgramCache
>
mProgramCache
;
std
:
:
map
<
wr
:
:
WindowId
UniquePtr
<
RendererOGL
>
>
mRenderers
;
struct
WindowInfo
{
bool
mIsDestroyed
=
false
;
int64_t
mPendingCount
=
0
;
int64_t
mRenderingCount
=
0
;
}
;
Mutex
mFrameCountMapLock
;
nsDataHashtable
<
nsUint64HashKey
WindowInfo
>
mWindowInfos
;
Mutex
mRenderTextureMapLock
;
nsRefPtrHashtable
<
nsUint64HashKey
RenderTextureHost
>
mRenderTextures
;
bool
mHasShutdown
;
}
;
}
}
#
endif
