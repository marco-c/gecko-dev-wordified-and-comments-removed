#
ifndef
MOZILLA_LAYERS_RENDEREROGL_H
#
define
MOZILLA_LAYERS_RENDEREROGL_H
#
include
"
mozilla
/
ipc
/
FileDescriptor
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
webrender
/
RenderThread
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
mozilla
/
webrender
/
webrender_ffi
.
h
"
#
include
"
mozilla
/
webrender
/
RendererScreenshotGrabber
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DrawTarget
;
}
namespace
gl
{
class
GLContext
;
}
namespace
layers
{
class
CompositorBridgeParent
;
class
SyncObjectHost
;
}
namespace
widget
{
class
CompositorWidget
;
}
namespace
wr
{
class
RenderCompositor
;
class
RenderTextureHost
;
class
RendererOGL
{
friend
wr
:
:
WrExternalImage
LockExternalImage
(
void
*
aObj
wr
:
:
ExternalImageId
aId
uint8_t
aChannelIndex
wr
:
:
ImageRendering
)
;
friend
void
UnlockExternalImage
(
void
*
aObj
wr
:
:
ExternalImageId
aId
uint8_t
aChannelIndex
)
;
public
:
wr
:
:
WrExternalImageHandler
GetExternalImageHandler
(
)
;
void
Update
(
)
;
RenderedFrameId
UpdateAndRender
(
const
Maybe
<
gfx
:
:
IntSize
>
&
aReadbackSize
const
Maybe
<
wr
:
:
ImageFormat
>
&
aReadbackFormat
const
Maybe
<
Range
<
uint8_t
>
>
&
aReadbackBuffer
bool
*
aNeedsYFlip
RendererStats
*
aOutStats
)
;
void
WaitForGPU
(
)
;
ipc
:
:
FileDescriptor
GetAndResetReleaseFence
(
)
;
RenderedFrameId
GetLastCompletedFrameId
(
)
;
RenderedFrameId
UpdateFrameId
(
)
;
void
SetProfilerEnabled
(
bool
aEnabled
)
;
void
SetFrameStartTime
(
const
TimeStamp
&
aTime
)
;
void
BeginRecording
(
const
TimeStamp
&
aRecordingStart
wr
:
:
PipelineId
aPipelineId
)
;
void
MaybeRecordFrame
(
const
WebRenderPipelineInfo
*
aPipelineInfo
)
;
void
WriteCollectedFrames
(
)
;
Maybe
<
layers
:
:
CollectedFrames
>
GetCollectedFrames
(
)
;
~
RendererOGL
(
)
;
RendererOGL
(
RefPtr
<
RenderThread
>
&
&
aThread
UniquePtr
<
RenderCompositor
>
aCompositor
wr
:
:
WindowId
aWindowId
wr
:
:
Renderer
*
aRenderer
layers
:
:
CompositorBridgeParent
*
aBridge
)
;
void
Pause
(
)
;
bool
Resume
(
)
;
void
CheckGraphicsResetStatus
(
)
;
layers
:
:
SyncObjectHost
*
GetSyncObject
(
)
const
;
layers
:
:
CompositorBridgeParent
*
GetCompositorBridge
(
)
{
return
mBridge
;
}
RefPtr
<
WebRenderPipelineInfo
>
FlushPipelineInfo
(
)
;
RenderTextureHost
*
GetRenderTexture
(
wr
:
:
ExternalImageId
aExternalImageId
)
;
RenderCompositor
*
GetCompositor
(
)
{
return
mCompositor
.
get
(
)
;
}
void
AccumulateMemoryReport
(
MemoryReport
*
aReport
)
;
void
SetProfilerUI
(
const
nsCString
&
aUI
)
;
wr
:
:
Renderer
*
GetRenderer
(
)
{
return
mRenderer
;
}
gl
:
:
GLContext
*
gl
(
)
const
;
void
*
swgl
(
)
const
;
bool
EnsureAsyncScreenshot
(
)
;
protected
:
bool
DidPaintContent
(
const
wr
:
:
WebRenderPipelineInfo
*
aFrameEpochs
)
;
RefPtr
<
RenderThread
>
mThread
;
UniquePtr
<
RenderCompositor
>
mCompositor
;
UniquePtr
<
layers
:
:
CompositionRecorder
>
mCompositionRecorder
;
wr
:
:
Renderer
*
mRenderer
;
layers
:
:
CompositorBridgeParent
*
mBridge
;
wr
:
:
WindowId
mWindowId
;
TimeStamp
mFrameStartTime
;
bool
mDisableNativeCompositor
;
RendererScreenshotGrabber
mScreenshotGrabber
;
wr
:
:
PipelineId
mRootPipelineId
;
std
:
:
unordered_map
<
uint64_t
wr
:
:
Epoch
>
mContentPipelineEpochs
;
}
;
}
}
#
endif
