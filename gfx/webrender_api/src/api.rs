use
{
BuiltDisplayList
BuiltDisplayListDescriptor
ClipId
ColorF
DeviceIntPoint
DeviceUintRect
}
;
use
{
DeviceUintSize
FontInstanceKey
FontInstanceOptions
}
;
use
{
FontInstancePlatformOptions
FontKey
FontVariation
GlyphDimensions
GlyphKey
ImageData
}
;
use
{
ImageDescriptor
ImageKey
ItemTag
LayoutPoint
LayoutSize
LayoutTransform
LayoutVector2D
}
;
use
{
NativeFontHandle
WorldPoint
}
;
use
app_units
:
:
Au
;
use
channel
:
:
{
self
MsgSender
Payload
PayloadSender
PayloadSenderHelperMethods
}
;
use
std
:
:
cell
:
:
Cell
;
use
std
:
:
fmt
;
use
std
:
:
marker
:
:
PhantomData
;
use
std
:
:
path
:
:
PathBuf
;
use
std
:
:
u32
;
pub
type
TileSize
=
u16
;
pub
type
DocumentLayer
=
i8
;
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
ResourceUpdates
{
pub
updates
:
Vec
<
ResourceUpdate
>
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
ResourceUpdate
{
AddImage
(
AddImage
)
UpdateImage
(
UpdateImage
)
DeleteImage
(
ImageKey
)
AddFont
(
AddFont
)
DeleteFont
(
FontKey
)
AddFontInstance
(
AddFontInstance
)
DeleteFontInstance
(
FontInstanceKey
)
}
impl
ResourceUpdates
{
pub
fn
new
(
)
-
>
Self
{
ResourceUpdates
{
updates
:
Vec
:
:
new
(
)
}
}
pub
fn
add_image
(
&
mut
self
key
:
ImageKey
descriptor
:
ImageDescriptor
data
:
ImageData
tiling
:
Option
<
TileSize
>
)
{
self
.
updates
.
push
(
ResourceUpdate
:
:
AddImage
(
AddImage
{
key
descriptor
data
tiling
}
)
)
;
}
pub
fn
update_image
(
&
mut
self
key
:
ImageKey
descriptor
:
ImageDescriptor
data
:
ImageData
dirty_rect
:
Option
<
DeviceUintRect
>
)
{
self
.
updates
.
push
(
ResourceUpdate
:
:
UpdateImage
(
UpdateImage
{
key
descriptor
data
dirty_rect
}
)
)
;
}
pub
fn
delete_image
(
&
mut
self
key
:
ImageKey
)
{
self
.
updates
.
push
(
ResourceUpdate
:
:
DeleteImage
(
key
)
)
;
}
pub
fn
add_raw_font
(
&
mut
self
key
:
FontKey
bytes
:
Vec
<
u8
>
index
:
u32
)
{
self
.
updates
.
push
(
ResourceUpdate
:
:
AddFont
(
AddFont
:
:
Raw
(
key
bytes
index
)
)
)
;
}
pub
fn
add_native_font
(
&
mut
self
key
:
FontKey
native_handle
:
NativeFontHandle
)
{
self
.
updates
.
push
(
ResourceUpdate
:
:
AddFont
(
AddFont
:
:
Native
(
key
native_handle
)
)
)
;
}
pub
fn
delete_font
(
&
mut
self
key
:
FontKey
)
{
self
.
updates
.
push
(
ResourceUpdate
:
:
DeleteFont
(
key
)
)
;
}
pub
fn
add_font_instance
(
&
mut
self
key
:
FontInstanceKey
font_key
:
FontKey
glyph_size
:
Au
options
:
Option
<
FontInstanceOptions
>
platform_options
:
Option
<
FontInstancePlatformOptions
>
variations
:
Vec
<
FontVariation
>
)
{
self
.
updates
.
push
(
ResourceUpdate
:
:
AddFontInstance
(
AddFontInstance
{
key
font_key
glyph_size
options
platform_options
variations
}
)
)
;
}
pub
fn
delete_font_instance
(
&
mut
self
key
:
FontInstanceKey
)
{
self
.
updates
.
push
(
ResourceUpdate
:
:
DeleteFontInstance
(
key
)
)
;
}
pub
fn
merge
(
&
mut
self
mut
other
:
ResourceUpdates
)
{
self
.
updates
.
append
(
&
mut
other
.
updates
)
;
}
pub
fn
clear
(
&
mut
self
)
{
self
.
updates
.
clear
(
)
}
}
pub
struct
Transaction
{
ops
:
Vec
<
DocumentMsg
>
payloads
:
Vec
<
Payload
>
}
impl
Transaction
{
pub
fn
new
(
)
-
>
Self
{
Transaction
{
ops
:
Vec
:
:
new
(
)
payloads
:
Vec
:
:
new
(
)
}
}
pub
fn
is_empty
(
&
self
)
-
>
bool
{
self
.
ops
.
is_empty
(
)
}
pub
fn
update_epoch
(
&
mut
self
pipeline_id
:
PipelineId
epoch
:
Epoch
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
UpdateEpoch
(
pipeline_id
epoch
)
)
;
}
pub
fn
set_root_pipeline
(
&
mut
self
pipeline_id
:
PipelineId
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
SetRootPipeline
(
pipeline_id
)
)
;
}
pub
fn
remove_pipeline
(
&
mut
self
pipeline_id
:
PipelineId
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
RemovePipeline
(
pipeline_id
)
)
;
}
pub
fn
set_display_list
(
&
mut
self
epoch
:
Epoch
background
:
Option
<
ColorF
>
viewport_size
:
LayoutSize
(
pipeline_id
content_size
display_list
)
:
(
PipelineId
LayoutSize
BuiltDisplayList
)
preserve_frame_state
:
bool
)
{
let
(
display_list_data
list_descriptor
)
=
display_list
.
into_data
(
)
;
self
.
ops
.
push
(
DocumentMsg
:
:
SetDisplayList
{
epoch
pipeline_id
background
viewport_size
content_size
list_descriptor
preserve_frame_state
}
)
;
self
.
payloads
.
push
(
Payload
{
epoch
pipeline_id
display_list_data
}
)
;
}
pub
fn
update_resources
(
&
mut
self
resources
:
ResourceUpdates
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
UpdateResources
(
resources
)
)
;
}
pub
fn
set_window_parameters
(
&
mut
self
window_size
:
DeviceUintSize
inner_rect
:
DeviceUintRect
device_pixel_ratio
:
f32
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
SetWindowParameters
{
window_size
inner_rect
device_pixel_ratio
}
)
;
}
pub
fn
scroll
(
&
mut
self
scroll_location
:
ScrollLocation
cursor
:
WorldPoint
phase
:
ScrollEventPhase
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
Scroll
(
scroll_location
cursor
phase
)
)
;
}
pub
fn
scroll_node_with_id
(
&
mut
self
origin
:
LayoutPoint
id
:
ClipId
clamp
:
ScrollClamping
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
ScrollNodeWithId
(
origin
id
clamp
)
)
;
}
pub
fn
set_page_zoom
(
&
mut
self
page_zoom
:
ZoomFactor
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
SetPageZoom
(
page_zoom
)
)
;
}
pub
fn
set_pinch_zoom
(
&
mut
self
pinch_zoom
:
ZoomFactor
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
SetPinchZoom
(
pinch_zoom
)
)
;
}
pub
fn
set_pan
(
&
mut
self
pan
:
DeviceIntPoint
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
SetPan
(
pan
)
)
;
}
pub
fn
tick_scrolling_bounce_animations
(
&
mut
self
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
TickScrollingBounce
)
;
}
pub
fn
generate_frame
(
&
mut
self
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
GenerateFrame
)
;
}
pub
fn
update_dynamic_properties
(
&
mut
self
properties
:
DynamicProperties
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
UpdateDynamicProperties
(
properties
)
)
;
}
pub
fn
enable_frame_output
(
&
mut
self
pipeline_id
:
PipelineId
enable
:
bool
)
{
self
.
ops
.
push
(
DocumentMsg
:
:
EnableFrameOutput
(
pipeline_id
enable
)
)
;
}
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
AddImage
{
pub
key
:
ImageKey
pub
descriptor
:
ImageDescriptor
pub
data
:
ImageData
pub
tiling
:
Option
<
TileSize
>
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
UpdateImage
{
pub
key
:
ImageKey
pub
descriptor
:
ImageDescriptor
pub
data
:
ImageData
pub
dirty_rect
:
Option
<
DeviceUintRect
>
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
AddFont
{
Raw
(
FontKey
Vec
<
u8
>
u32
)
Native
(
FontKey
NativeFontHandle
)
}
#
[
derive
(
Clone
Debug
Deserialize
PartialEq
Serialize
)
]
pub
struct
HitTestItem
{
pub
pipeline
:
PipelineId
pub
tag
:
ItemTag
pub
point_in_viewport
:
LayoutPoint
pub
point_relative_to_item
:
LayoutPoint
}
#
[
derive
(
Clone
Debug
Default
Deserialize
Serialize
)
]
pub
struct
HitTestResult
{
pub
items
:
Vec
<
HitTestItem
>
}
bitflags
!
{
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
HitTestFlags
:
u8
{
const
FIND_ALL
=
0b00000001
;
const
POINT_RELATIVE_TO_PIPELINE_VIEWPORT
=
0b00000010
;
}
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
AddFontInstance
{
pub
key
:
FontInstanceKey
pub
font_key
:
FontKey
pub
glyph_size
:
Au
pub
options
:
Option
<
FontInstanceOptions
>
pub
platform_options
:
Option
<
FontInstancePlatformOptions
>
pub
variations
:
Vec
<
FontVariation
>
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
DocumentMsg
{
HitTest
(
Option
<
PipelineId
>
WorldPoint
HitTestFlags
MsgSender
<
HitTestResult
>
)
SetDisplayList
{
list_descriptor
:
BuiltDisplayListDescriptor
epoch
:
Epoch
pipeline_id
:
PipelineId
background
:
Option
<
ColorF
>
viewport_size
:
LayoutSize
content_size
:
LayoutSize
preserve_frame_state
:
bool
}
UpdateResources
(
ResourceUpdates
)
UpdateEpoch
(
PipelineId
Epoch
)
SetPageZoom
(
ZoomFactor
)
SetPinchZoom
(
ZoomFactor
)
SetPan
(
DeviceIntPoint
)
SetRootPipeline
(
PipelineId
)
RemovePipeline
(
PipelineId
)
EnableFrameOutput
(
PipelineId
bool
)
SetWindowParameters
{
window_size
:
DeviceUintSize
inner_rect
:
DeviceUintRect
device_pixel_ratio
:
f32
}
Scroll
(
ScrollLocation
WorldPoint
ScrollEventPhase
)
ScrollNodeWithId
(
LayoutPoint
ClipId
ScrollClamping
)
TickScrollingBounce
GetScrollNodeState
(
MsgSender
<
Vec
<
ScrollLayerState
>
>
)
GenerateFrame
UpdateDynamicProperties
(
DynamicProperties
)
}
impl
fmt
:
:
Debug
for
DocumentMsg
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
match
*
self
{
DocumentMsg
:
:
SetDisplayList
{
.
.
}
=
>
"
DocumentMsg
:
:
SetDisplayList
"
DocumentMsg
:
:
HitTest
(
.
.
)
=
>
"
DocumentMsg
:
:
HitTest
"
DocumentMsg
:
:
SetPageZoom
(
.
.
)
=
>
"
DocumentMsg
:
:
SetPageZoom
"
DocumentMsg
:
:
SetPinchZoom
(
.
.
)
=
>
"
DocumentMsg
:
:
SetPinchZoom
"
DocumentMsg
:
:
SetPan
(
.
.
)
=
>
"
DocumentMsg
:
:
SetPan
"
DocumentMsg
:
:
SetRootPipeline
(
.
.
)
=
>
"
DocumentMsg
:
:
SetRootPipeline
"
DocumentMsg
:
:
RemovePipeline
(
.
.
)
=
>
"
DocumentMsg
:
:
RemovePipeline
"
DocumentMsg
:
:
SetWindowParameters
{
.
.
}
=
>
"
DocumentMsg
:
:
SetWindowParameters
"
DocumentMsg
:
:
Scroll
(
.
.
)
=
>
"
DocumentMsg
:
:
Scroll
"
DocumentMsg
:
:
ScrollNodeWithId
(
.
.
)
=
>
"
DocumentMsg
:
:
ScrollNodeWithId
"
DocumentMsg
:
:
TickScrollingBounce
=
>
"
DocumentMsg
:
:
TickScrollingBounce
"
DocumentMsg
:
:
GetScrollNodeState
(
.
.
)
=
>
"
DocumentMsg
:
:
GetScrollNodeState
"
DocumentMsg
:
:
GenerateFrame
=
>
"
DocumentMsg
:
:
GenerateFrame
"
DocumentMsg
:
:
EnableFrameOutput
(
.
.
)
=
>
"
DocumentMsg
:
:
EnableFrameOutput
"
DocumentMsg
:
:
UpdateResources
(
.
.
)
=
>
"
DocumentMsg
:
:
UpdateResources
"
DocumentMsg
:
:
UpdateEpoch
(
.
.
)
=
>
"
DocumentMsg
:
:
UpdateEpoch
"
DocumentMsg
:
:
UpdateDynamicProperties
(
.
.
)
=
>
"
DocumentMsg
:
:
UpdateDynamicProperties
"
}
)
}
}
bitflags
!
{
/
/
/
Bit
flags
for
WR
stages
to
store
in
a
capture
.
/
/
Note
:
capturing
FRAME
without
SCENE
is
not
currently
supported
.
#
[
derive
(
Deserialize
Serialize
)
]
pub
struct
CaptureBits
:
u8
{
const
SCENE
=
0x1
;
const
FRAME
=
0x2
;
}
}
#
[
derive
(
Clone
Debug
Deserialize
Serialize
)
]
pub
struct
CapturedDocument
{
pub
document_id
:
DocumentId
pub
root_pipeline_id
:
Option
<
PipelineId
>
pub
window_size
:
DeviceUintSize
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
DebugCommand
{
EnableProfiler
(
bool
)
EnableTextureCacheDebug
(
bool
)
EnableRenderTargetDebug
(
bool
)
EnableAlphaRectsDebug
(
bool
)
EnableGpuTimeQueries
(
bool
)
EnableGpuSampleQueries
(
bool
)
FetchDocuments
FetchPasses
FetchClipScrollTree
FetchRenderTasks
FetchScreenshot
SaveCapture
(
PathBuf
CaptureBits
)
LoadCapture
(
PathBuf
MsgSender
<
CapturedDocument
>
)
EnableDualSourceBlending
(
bool
)
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
ApiMsg
{
UpdateResources
(
ResourceUpdates
)
GetGlyphDimensions
(
FontInstanceKey
Vec
<
GlyphKey
>
MsgSender
<
Vec
<
Option
<
GlyphDimensions
>
>
>
)
GetGlyphIndices
(
FontKey
String
MsgSender
<
Vec
<
Option
<
u32
>
>
>
)
CloneApi
(
MsgSender
<
IdNamespace
>
)
AddDocument
(
DocumentId
DeviceUintSize
DocumentLayer
)
UpdateDocument
(
DocumentId
Vec
<
DocumentMsg
>
)
DeleteDocument
(
DocumentId
)
ExternalEvent
(
ExternalEvent
)
ClearNamespace
(
IdNamespace
)
MemoryPressure
DebugCommand
(
DebugCommand
)
ShutDown
}
impl
fmt
:
:
Debug
for
ApiMsg
{
fn
fmt
(
&
self
f
:
&
mut
fmt
:
:
Formatter
)
-
>
fmt
:
:
Result
{
f
.
write_str
(
match
*
self
{
ApiMsg
:
:
UpdateResources
(
.
.
)
=
>
"
ApiMsg
:
:
UpdateResources
"
ApiMsg
:
:
GetGlyphDimensions
(
.
.
)
=
>
"
ApiMsg
:
:
GetGlyphDimensions
"
ApiMsg
:
:
GetGlyphIndices
(
.
.
)
=
>
"
ApiMsg
:
:
GetGlyphIndices
"
ApiMsg
:
:
CloneApi
(
.
.
)
=
>
"
ApiMsg
:
:
CloneApi
"
ApiMsg
:
:
AddDocument
(
.
.
)
=
>
"
ApiMsg
:
:
AddDocument
"
ApiMsg
:
:
UpdateDocument
(
.
.
)
=
>
"
ApiMsg
:
:
UpdateDocument
"
ApiMsg
:
:
DeleteDocument
(
.
.
)
=
>
"
ApiMsg
:
:
DeleteDocument
"
ApiMsg
:
:
ExternalEvent
(
.
.
)
=
>
"
ApiMsg
:
:
ExternalEvent
"
ApiMsg
:
:
ClearNamespace
(
.
.
)
=
>
"
ApiMsg
:
:
ClearNamespace
"
ApiMsg
:
:
MemoryPressure
=
>
"
ApiMsg
:
:
MemoryPressure
"
ApiMsg
:
:
DebugCommand
(
.
.
)
=
>
"
ApiMsg
:
:
DebugCommand
"
ApiMsg
:
:
ShutDown
=
>
"
ApiMsg
:
:
ShutDown
"
}
)
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
Ord
PartialEq
PartialOrd
Serialize
)
]
pub
struct
Epoch
(
pub
u32
)
;
impl
Epoch
{
pub
fn
invalid
(
)
-
>
Epoch
{
Epoch
(
u32
:
:
MAX
)
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Eq
PartialEq
Hash
Ord
PartialOrd
Deserialize
Serialize
)
]
pub
struct
IdNamespace
(
pub
u32
)
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
PartialEq
Serialize
)
]
pub
struct
DocumentId
(
pub
IdNamespace
pub
u32
)
;
pub
type
PipelineSourceId
=
u32
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Eq
Hash
PartialEq
Serialize
)
]
pub
struct
PipelineId
(
pub
PipelineSourceId
pub
u32
)
;
impl
PipelineId
{
pub
fn
dummy
(
)
-
>
Self
{
PipelineId
(
0
0
)
}
}
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Copy
Debug
Deserialize
Serialize
)
]
pub
struct
ResourceId
(
pub
u32
)
;
#
[
repr
(
C
)
]
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
ExternalEvent
{
raw
:
usize
}
unsafe
impl
Send
for
ExternalEvent
{
}
impl
ExternalEvent
{
pub
fn
from_raw
(
raw
:
usize
)
-
>
Self
{
ExternalEvent
{
raw
:
raw
}
}
pub
fn
unwrap
(
self
)
-
>
usize
{
self
.
raw
}
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
enum
ScrollClamping
{
ToContentBounds
NoClamping
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
RenderApiSender
{
api_sender
:
MsgSender
<
ApiMsg
>
payload_sender
:
PayloadSender
}
impl
RenderApiSender
{
pub
fn
new
(
api_sender
:
MsgSender
<
ApiMsg
>
payload_sender
:
PayloadSender
)
-
>
Self
{
RenderApiSender
{
api_sender
payload_sender
}
}
pub
fn
create_api
(
&
self
)
-
>
RenderApi
{
let
(
sync_tx
sync_rx
)
=
channel
:
:
msg_channel
(
)
.
expect
(
"
Failed
to
create
channel
"
)
;
let
msg
=
ApiMsg
:
:
CloneApi
(
sync_tx
)
;
self
.
api_sender
.
send
(
msg
)
.
expect
(
"
Failed
to
send
CloneApi
message
"
)
;
RenderApi
{
api_sender
:
self
.
api_sender
.
clone
(
)
payload_sender
:
self
.
payload_sender
.
clone
(
)
namespace_id
:
sync_rx
.
recv
(
)
.
expect
(
"
Failed
to
receive
API
response
"
)
next_id
:
Cell
:
:
new
(
ResourceId
(
0
)
)
}
}
}
pub
struct
RenderApi
{
api_sender
:
MsgSender
<
ApiMsg
>
payload_sender
:
PayloadSender
namespace_id
:
IdNamespace
next_id
:
Cell
<
ResourceId
>
}
impl
RenderApi
{
pub
fn
get_namespace_id
(
&
self
)
-
>
IdNamespace
{
self
.
namespace_id
}
pub
fn
clone_sender
(
&
self
)
-
>
RenderApiSender
{
RenderApiSender
:
:
new
(
self
.
api_sender
.
clone
(
)
self
.
payload_sender
.
clone
(
)
)
}
pub
fn
add_document
(
&
self
initial_size
:
DeviceUintSize
layer
:
DocumentLayer
)
-
>
DocumentId
{
let
new_id
=
self
.
next_unique_id
(
)
;
let
document_id
=
DocumentId
(
self
.
namespace_id
new_id
)
;
let
msg
=
ApiMsg
:
:
AddDocument
(
document_id
initial_size
layer
)
;
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
document_id
}
pub
fn
delete_document
(
&
self
document_id
:
DocumentId
)
{
let
msg
=
ApiMsg
:
:
DeleteDocument
(
document_id
)
;
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
}
pub
fn
generate_font_key
(
&
self
)
-
>
FontKey
{
let
new_id
=
self
.
next_unique_id
(
)
;
FontKey
:
:
new
(
self
.
namespace_id
new_id
)
}
pub
fn
generate_font_instance_key
(
&
self
)
-
>
FontInstanceKey
{
let
new_id
=
self
.
next_unique_id
(
)
;
FontInstanceKey
:
:
new
(
self
.
namespace_id
new_id
)
}
pub
fn
get_glyph_dimensions
(
&
self
font
:
FontInstanceKey
glyph_keys
:
Vec
<
GlyphKey
>
)
-
>
Vec
<
Option
<
GlyphDimensions
>
>
{
let
(
tx
rx
)
=
channel
:
:
msg_channel
(
)
.
unwrap
(
)
;
let
msg
=
ApiMsg
:
:
GetGlyphDimensions
(
font
glyph_keys
tx
)
;
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
rx
.
recv
(
)
.
unwrap
(
)
}
pub
fn
get_glyph_indices
(
&
self
font_key
:
FontKey
text
:
&
str
)
-
>
Vec
<
Option
<
u32
>
>
{
let
(
tx
rx
)
=
channel
:
:
msg_channel
(
)
.
unwrap
(
)
;
let
msg
=
ApiMsg
:
:
GetGlyphIndices
(
font_key
text
.
to_string
(
)
tx
)
;
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
rx
.
recv
(
)
.
unwrap
(
)
}
pub
fn
generate_image_key
(
&
self
)
-
>
ImageKey
{
let
new_id
=
self
.
next_unique_id
(
)
;
ImageKey
:
:
new
(
self
.
namespace_id
new_id
)
}
pub
fn
update_resources
(
&
self
resources
:
ResourceUpdates
)
{
if
resources
.
updates
.
is_empty
(
)
{
return
;
}
self
.
api_sender
.
send
(
ApiMsg
:
:
UpdateResources
(
resources
)
)
.
unwrap
(
)
;
}
pub
fn
send_external_event
(
&
self
evt
:
ExternalEvent
)
{
let
msg
=
ApiMsg
:
:
ExternalEvent
(
evt
)
;
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
}
pub
fn
notify_memory_pressure
(
&
self
)
{
self
.
api_sender
.
send
(
ApiMsg
:
:
MemoryPressure
)
.
unwrap
(
)
;
}
pub
fn
shut_down
(
&
self
)
{
self
.
api_sender
.
send
(
ApiMsg
:
:
ShutDown
)
.
unwrap
(
)
;
}
pub
fn
generate_property_binding_key
<
T
:
Copy
>
(
&
self
)
-
>
PropertyBindingKey
<
T
>
{
let
new_id
=
self
.
next_unique_id
(
)
;
PropertyBindingKey
{
id
:
PropertyBindingId
{
namespace
:
self
.
namespace_id
uid
:
new_id
}
_phantom
:
PhantomData
}
}
#
[
inline
]
fn
next_unique_id
(
&
self
)
-
>
u32
{
let
ResourceId
(
id
)
=
self
.
next_id
.
get
(
)
;
self
.
next_id
.
set
(
ResourceId
(
id
+
1
)
)
;
id
}
#
[
doc
(
hidden
)
]
pub
fn
send_message
(
&
self
msg
:
ApiMsg
)
{
self
.
api_sender
.
send
(
msg
)
.
unwrap
(
)
;
}
#
[
doc
(
hidden
)
]
pub
fn
send_payload
(
&
self
data
:
&
[
u8
]
)
{
self
.
payload_sender
.
send_payload
(
Payload
:
:
from_data
(
data
)
)
.
unwrap
(
)
;
}
fn
send
(
&
self
document_id
:
DocumentId
msg
:
DocumentMsg
)
{
self
.
api_sender
.
send
(
ApiMsg
:
:
UpdateDocument
(
document_id
vec
!
[
msg
]
)
)
.
unwrap
(
)
}
pub
fn
send_transaction
(
&
self
document_id
:
DocumentId
transaction
:
Transaction
)
{
for
payload
in
transaction
.
payloads
{
self
.
payload_sender
.
send_payload
(
payload
)
.
unwrap
(
)
;
}
self
.
api_sender
.
send
(
ApiMsg
:
:
UpdateDocument
(
document_id
transaction
.
ops
)
)
.
unwrap
(
)
;
}
pub
fn
hit_test
(
&
self
document_id
:
DocumentId
pipeline_id
:
Option
<
PipelineId
>
point
:
WorldPoint
flags
:
HitTestFlags
)
-
>
HitTestResult
{
let
(
tx
rx
)
=
channel
:
:
msg_channel
(
)
.
unwrap
(
)
;
self
.
send
(
document_id
DocumentMsg
:
:
HitTest
(
pipeline_id
point
flags
tx
)
)
;
rx
.
recv
(
)
.
unwrap
(
)
}
pub
fn
set_window_parameters
(
&
self
document_id
:
DocumentId
window_size
:
DeviceUintSize
inner_rect
:
DeviceUintRect
device_pixel_ratio
:
f32
)
{
self
.
send
(
document_id
DocumentMsg
:
:
SetWindowParameters
{
window_size
inner_rect
device_pixel_ratio
}
)
;
}
pub
fn
get_scroll_node_state
(
&
self
document_id
:
DocumentId
)
-
>
Vec
<
ScrollLayerState
>
{
let
(
tx
rx
)
=
channel
:
:
msg_channel
(
)
.
unwrap
(
)
;
self
.
send
(
document_id
DocumentMsg
:
:
GetScrollNodeState
(
tx
)
)
;
rx
.
recv
(
)
.
unwrap
(
)
}
pub
fn
save_capture
(
&
self
path
:
PathBuf
bits
:
CaptureBits
)
{
let
msg
=
ApiMsg
:
:
DebugCommand
(
DebugCommand
:
:
SaveCapture
(
path
bits
)
)
;
self
.
send_message
(
msg
)
;
}
pub
fn
load_capture
(
&
self
path
:
PathBuf
)
-
>
Vec
<
CapturedDocument
>
{
let
(
tx
rx
)
=
channel
:
:
msg_channel
(
)
.
unwrap
(
)
;
let
msg
=
ApiMsg
:
:
DebugCommand
(
DebugCommand
:
:
LoadCapture
(
path
tx
)
)
;
self
.
send_message
(
msg
)
;
let
mut
documents
=
Vec
:
:
new
(
)
;
while
let
Ok
(
captured_doc
)
=
rx
.
recv
(
)
{
documents
.
push
(
captured_doc
)
;
}
documents
}
pub
fn
send_debug_cmd
(
&
self
cmd
:
DebugCommand
)
{
let
msg
=
ApiMsg
:
:
DebugCommand
(
cmd
)
;
self
.
send_message
(
msg
)
;
}
}
impl
Drop
for
RenderApi
{
fn
drop
(
&
mut
self
)
{
let
msg
=
ApiMsg
:
:
ClearNamespace
(
self
.
namespace_id
)
;
let
_
=
self
.
api_sender
.
send
(
msg
)
;
}
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
PartialEq
Serialize
)
]
pub
enum
ScrollEventPhase
{
Start
Move
(
bool
)
End
}
#
[
derive
(
Clone
Deserialize
Serialize
)
]
pub
struct
ScrollLayerState
{
pub
id
:
ClipId
pub
scroll_offset
:
LayoutVector2D
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Serialize
)
]
pub
enum
ScrollLocation
{
Delta
(
LayoutVector2D
)
Start
End
}
#
[
derive
(
Clone
Copy
Serialize
Deserialize
Debug
)
]
pub
struct
ZoomFactor
(
f32
)
;
impl
ZoomFactor
{
pub
fn
new
(
scale
:
f32
)
-
>
ZoomFactor
{
ZoomFactor
(
scale
)
}
pub
fn
get
(
&
self
)
-
>
f32
{
self
.
0
}
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
PartialEq
Serialize
Eq
Hash
)
]
pub
struct
PropertyBindingId
{
namespace
:
IdNamespace
uid
:
u32
}
impl
PropertyBindingId
{
pub
fn
new
(
value
:
u64
)
-
>
Self
{
PropertyBindingId
{
namespace
:
IdNamespace
(
(
value
>
>
32
)
as
u32
)
uid
:
value
as
u32
}
}
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
PartialEq
Serialize
)
]
pub
struct
PropertyBindingKey
<
T
>
{
pub
id
:
PropertyBindingId
_phantom
:
PhantomData
<
T
>
}
impl
<
T
:
Copy
>
PropertyBindingKey
<
T
>
{
pub
fn
with
(
&
self
value
:
T
)
-
>
PropertyValue
<
T
>
{
PropertyValue
{
key
:
*
self
value
}
}
}
impl
<
T
>
PropertyBindingKey
<
T
>
{
pub
fn
new
(
value
:
u64
)
-
>
Self
{
PropertyBindingKey
{
id
:
PropertyBindingId
:
:
new
(
value
)
_phantom
:
PhantomData
}
}
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
PartialEq
Serialize
)
]
pub
enum
PropertyBinding
<
T
>
{
Value
(
T
)
Binding
(
PropertyBindingKey
<
T
>
)
}
impl
<
T
>
From
<
T
>
for
PropertyBinding
<
T
>
{
fn
from
(
value
:
T
)
-
>
PropertyBinding
<
T
>
{
PropertyBinding
:
:
Value
(
value
)
}
}
impl
<
T
>
From
<
PropertyBindingKey
<
T
>
>
for
PropertyBinding
<
T
>
{
fn
from
(
key
:
PropertyBindingKey
<
T
>
)
-
>
PropertyBinding
<
T
>
{
PropertyBinding
:
:
Binding
(
key
)
}
}
#
[
derive
(
Clone
Copy
Debug
Deserialize
Serialize
)
]
pub
struct
PropertyValue
<
T
>
{
pub
key
:
PropertyBindingKey
<
T
>
pub
value
:
T
}
#
[
derive
(
Clone
Deserialize
Serialize
Debug
)
]
pub
struct
DynamicProperties
{
pub
transforms
:
Vec
<
PropertyValue
<
LayoutTransform
>
>
pub
floats
:
Vec
<
PropertyValue
<
f32
>
>
}
pub
trait
RenderNotifier
:
Send
{
fn
clone
(
&
self
)
-
>
Box
<
RenderNotifier
>
;
fn
wake_up
(
&
self
)
;
fn
new_document_ready
(
&
self
DocumentId
scrolled
:
bool
composite_needed
:
bool
)
;
fn
external_event
(
&
self
_evt
:
ExternalEvent
)
{
unimplemented
!
(
)
}
fn
shut_down
(
&
self
)
{
}
}
