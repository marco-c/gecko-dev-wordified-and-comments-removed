use
app_units
:
:
Au
;
use
euclid
:
:
{
Length
TypedRect
TypedScale
TypedSize2D
TypedTransform3D
}
;
use
euclid
:
:
{
TypedPoint2D
TypedPoint3D
TypedVector2D
TypedVector3D
TypedSideOffsets2D
}
;
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
DevicePixel
;
pub
type
DeviceIntRect
=
TypedRect
<
i32
DevicePixel
>
;
pub
type
DeviceIntPoint
=
TypedPoint2D
<
i32
DevicePixel
>
;
pub
type
DeviceIntSize
=
TypedSize2D
<
i32
DevicePixel
>
;
pub
type
DeviceIntLength
=
Length
<
i32
DevicePixel
>
;
pub
type
DeviceIntSideOffsets
=
TypedSideOffsets2D
<
i32
DevicePixel
>
;
pub
type
DeviceUintRect
=
TypedRect
<
u32
DevicePixel
>
;
pub
type
DeviceUintPoint
=
TypedPoint2D
<
u32
DevicePixel
>
;
pub
type
DeviceUintSize
=
TypedSize2D
<
u32
DevicePixel
>
;
pub
type
DeviceRect
=
TypedRect
<
f32
DevicePixel
>
;
pub
type
DevicePoint
=
TypedPoint2D
<
f32
DevicePixel
>
;
pub
type
DeviceVector2D
=
TypedVector2D
<
f32
DevicePixel
>
;
pub
type
DeviceSize
=
TypedSize2D
<
f32
DevicePixel
>
;
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
PicturePixel
;
pub
type
PictureIntRect
=
TypedRect
<
i32
PicturePixel
>
;
pub
type
PictureIntPoint
=
TypedPoint2D
<
i32
PicturePixel
>
;
pub
type
PictureIntSize
=
TypedSize2D
<
i32
PicturePixel
>
;
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
Deserialize
Serialize
)
]
pub
struct
LayoutPixel
;
pub
type
LayoutRect
=
TypedRect
<
f32
LayoutPixel
>
;
pub
type
LayoutPoint
=
TypedPoint2D
<
f32
LayoutPixel
>
;
pub
type
LayoutPoint3D
=
TypedPoint3D
<
f32
LayoutPixel
>
;
pub
type
LayoutVector2D
=
TypedVector2D
<
f32
LayoutPixel
>
;
pub
type
LayoutVector3D
=
TypedVector3D
<
f32
LayoutPixel
>
;
pub
type
LayoutSize
=
TypedSize2D
<
f32
LayoutPixel
>
;
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
ScrollLayerPixel
;
pub
type
ScrollLayerRect
=
TypedRect
<
f32
ScrollLayerPixel
>
;
pub
type
ScrollLayerPoint
=
TypedPoint2D
<
f32
ScrollLayerPixel
>
;
pub
type
ScrollLayerVector2D
=
TypedVector2D
<
f32
ScrollLayerPixel
>
;
pub
type
ScrollLayerSize
=
TypedSize2D
<
f32
ScrollLayerPixel
>
;
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
WorldPixel
;
pub
type
WorldRect
=
TypedRect
<
f32
WorldPixel
>
;
pub
type
WorldPoint
=
TypedPoint2D
<
f32
WorldPixel
>
;
pub
type
WorldSize
=
TypedSize2D
<
f32
WorldPixel
>
;
pub
type
WorldPoint3D
=
TypedPoint3D
<
f32
WorldPixel
>
;
pub
type
WorldVector2D
=
TypedVector2D
<
f32
WorldPixel
>
;
pub
type
WorldVector3D
=
TypedVector3D
<
f32
WorldPixel
>
;
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
Tiles
;
pub
type
TileOffset
=
TypedPoint2D
<
u16
Tiles
>
;
pub
type
TileRange
=
TypedRect
<
u16
Tiles
>
;
pub
type
DevicePixelScale
=
TypedScale
<
f32
WorldPixel
DevicePixel
>
;
pub
type
LayoutToWorldScale
=
TypedScale
<
f32
LayoutPixel
WorldPixel
>
;
pub
type
LayoutToDeviceScale
=
TypedScale
<
f32
LayoutPixel
DevicePixel
>
;
pub
type
LayoutTransform
=
TypedTransform3D
<
f32
LayoutPixel
LayoutPixel
>
;
pub
type
LayoutToScrollTransform
=
TypedTransform3D
<
f32
LayoutPixel
ScrollLayerPixel
>
;
pub
type
ScrollToLayoutTransform
=
TypedTransform3D
<
f32
ScrollLayerPixel
LayoutPixel
>
;
pub
type
LayoutToWorldTransform
=
TypedTransform3D
<
f32
LayoutPixel
WorldPixel
>
;
pub
type
WorldToLayoutTransform
=
TypedTransform3D
<
f32
WorldPixel
LayoutPixel
>
;
pub
type
ScrollToWorldTransform
=
TypedTransform3D
<
f32
ScrollLayerPixel
WorldPixel
>
;
pub
type
LayoutPointAu
=
TypedPoint2D
<
Au
LayoutPixel
>
;
pub
type
LayoutRectAu
=
TypedRect
<
Au
LayoutPixel
>
;
pub
type
LayoutSizeAu
=
TypedSize2D
<
Au
LayoutPixel
>
;
pub
fn
as_scroll_parent_rect
(
rect
:
&
LayoutRect
)
-
>
ScrollLayerRect
{
ScrollLayerRect
:
:
from_untyped
(
&
rect
.
to_untyped
(
)
)
}
pub
fn
as_scroll_parent_vector
(
vector
:
&
LayoutVector2D
)
-
>
ScrollLayerVector2D
{
ScrollLayerVector2D
:
:
from_untyped
(
&
vector
.
to_untyped
(
)
)
}
#
[
derive
(
Hash
Clone
Copy
Debug
Eq
PartialEq
Ord
PartialOrd
)
]
pub
struct
NormalizedCoordinates
;
pub
type
NormalizedRect
=
TypedRect
<
f32
NormalizedCoordinates
>
;
#
[
derive
(
Copy
Clone
Debug
Serialize
Deserialize
)
]
pub
struct
TexelRect
{
pub
uv0
:
DevicePoint
pub
uv1
:
DevicePoint
}
impl
TexelRect
{
pub
fn
new
(
u0
:
f32
v0
:
f32
u1
:
f32
v1
:
f32
)
-
>
Self
{
TexelRect
{
uv0
:
DevicePoint
:
:
new
(
u0
v0
)
uv1
:
DevicePoint
:
:
new
(
u1
v1
)
}
}
pub
fn
invalid
(
)
-
>
Self
{
TexelRect
{
uv0
:
DevicePoint
:
:
new
(
-
1
.
0
-
1
.
0
)
uv1
:
DevicePoint
:
:
new
(
-
1
.
0
-
1
.
0
)
}
}
}
