#
ifndef
nsFont_h___
#
define
nsFont_h___
#
include
<
stdint
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
"
gfxFontFamilyList
.
h
"
#
include
"
gfxFontConstants
.
h
"
#
include
"
gfxFontFeatures
.
h
"
#
include
"
gfxFontVariations
.
h
"
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StyleColorInlines
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsTArray
.
h
"
struct
gfxFontStyle
;
struct
nsFont
final
{
typedef
mozilla
:
:
FontStretch
FontStretch
;
typedef
mozilla
:
:
FontSlantStyle
FontSlantStyle
;
typedef
mozilla
:
:
FontWeight
FontWeight
;
mozilla
:
:
FontFamilyList
fontlist
;
nsTArray
<
gfxFontFeature
>
fontFeatureSettings
;
nsTArray
<
gfxFontVariation
>
fontVariationSettings
;
nscoord
size
=
0
;
float
sizeAdjust
=
-
1
.
0f
;
mozilla
:
:
StyleRGBA
fontSmoothingBackgroundColor
=
mozilla
:
:
StyleRGBA
:
:
Transparent
(
)
;
uint32_t
languageOverride
=
0
;
FontSlantStyle
style
=
FontSlantStyle
:
:
Normal
(
)
;
FontWeight
weight
=
FontWeight
:
:
Normal
(
)
;
FontStretch
stretch
=
FontStretch
:
:
Normal
(
)
;
mozilla
:
:
StyleVariantAlternatesList
variantAlternates
;
uint16_t
variantLigatures
=
NS_FONT_VARIANT_LIGATURES_NORMAL
;
uint16_t
variantEastAsian
=
NS_FONT_VARIANT_EAST_ASIAN_NORMAL
;
uint8_t
variantCaps
=
NS_FONT_VARIANT_CAPS_NORMAL
;
uint8_t
variantNumeric
=
NS_FONT_VARIANT_NUMERIC_NORMAL
;
uint8_t
variantPosition
=
NS_FONT_VARIANT_POSITION_NORMAL
;
uint8_t
variantWidth
=
NS_FONT_VARIANT_WIDTH_NORMAL
;
uint8_t
smoothing
=
NS_FONT_SMOOTHING_AUTO
;
uint8_t
kerning
=
NS_FONT_KERNING_AUTO
;
uint8_t
opticalSizing
=
NS_FONT_OPTICAL_SIZING_AUTO
;
uint8_t
synthesis
=
NS_FONT_SYNTHESIS_WEIGHT
|
NS_FONT_SYNTHESIS_STYLE
;
bool
systemFont
=
false
;
nsFont
(
const
mozilla
:
:
FontFamilyList
&
aFontlist
nscoord
aSize
)
;
nsFont
(
mozilla
:
:
StyleGenericFontFamily
nscoord
aSize
)
;
nsFont
(
const
nsFont
&
aFont
)
;
nsFont
(
)
=
default
;
~
nsFont
(
)
;
bool
operator
=
=
(
const
nsFont
&
aOther
)
const
{
return
Equals
(
aOther
)
;
}
bool
operator
!
=
(
const
nsFont
&
aOther
)
const
{
return
!
Equals
(
aOther
)
;
}
bool
Equals
(
const
nsFont
&
aOther
)
const
;
nsFont
&
operator
=
(
const
nsFont
&
aOther
)
;
enum
class
MaxDifference
:
uint8_t
{
eNone
eVisual
eLayoutAffecting
}
;
MaxDifference
CalcDifference
(
const
nsFont
&
aOther
)
const
;
void
AddFontFeaturesToStyle
(
gfxFontStyle
*
aStyle
bool
aVertical
)
const
;
void
AddFontVariationsToStyle
(
gfxFontStyle
*
aStyle
)
const
;
}
;
#
define
NS_FONT_VARIANT_NORMAL
0
#
define
NS_FONT_VARIANT_SMALL_CAPS
1
#
endif
