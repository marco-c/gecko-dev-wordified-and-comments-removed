#
ifndef
gfx_src_DriverCrashGuard_h__
#
define
gfx_src_DriverCrashGuard_h__
#
include
"
gfxCore
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIGfxInfo
.
h
"
#
include
"
nsIFile
.
h
"
namespace
mozilla
{
namespace
gfx
{
enum
class
DriverInitStatus
{
None
Attempting
Okay
Recovered
}
;
class
DriverCrashGuard
{
public
:
DriverCrashGuard
(
)
;
~
DriverCrashGuard
(
)
;
bool
Crashed
(
)
;
enum
class
TelemetryState
{
Okay
=
0
EnvironmentChanged
=
1
RecoveredFromCrash
=
2
FeatureDisabled
=
3
}
;
protected
:
virtual
bool
UpdateEnvironment
(
)
=
0
;
virtual
void
Initialize
(
)
=
0
;
virtual
void
LogCrashRecovery
(
)
=
0
;
virtual
void
LogFeatureDisabled
(
)
=
0
;
bool
FeatureEnabled
(
int
aFeature
)
;
bool
CheckAndUpdatePref
(
const
char
*
aPrefName
const
nsAString
&
aCurrentValue
)
;
bool
CheckAndUpdateBoolPref
(
const
char
*
aPrefName
bool
aCurrentValue
)
;
private
:
void
InitializeIfNeeded
(
)
;
bool
InitLockFilePath
(
)
;
void
AllowDriverInitAttempt
(
)
;
bool
RecoverFromDriverInitCrash
(
)
;
void
FlushPreferences
(
)
;
bool
PrepareToGuard
(
)
;
bool
UpdateBaseEnvironment
(
)
;
private
:
bool
mInitialized
;
nsCOMPtr
<
nsIFile
>
mLockFile
;
protected
:
bool
mIsChromeProcess
;
nsCOMPtr
<
nsIGfxInfo
>
mGfxInfo
;
}
;
class
D3D11LayersCrashGuard
final
:
public
DriverCrashGuard
{
public
:
D3D11LayersCrashGuard
(
)
;
protected
:
void
Initialize
(
)
override
;
bool
UpdateEnvironment
(
)
override
;
void
LogCrashRecovery
(
)
override
;
void
LogFeatureDisabled
(
)
override
;
private
:
void
RecordTelemetry
(
TelemetryState
aState
)
;
}
;
}
}
#
endif
