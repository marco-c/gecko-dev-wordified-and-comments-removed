#
ifndef
gfx_src_DriverCrashGuard_h__
#
define
gfx_src_DriverCrashGuard_h__
#
include
"
gfxCore
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIGfxInfo
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsString
.
h
"
#
include
<
string
>
namespace
mozilla
{
namespace
dom
{
class
ContentParent
;
}
namespace
gfx
{
enum
class
DriverInitStatus
{
Unknown
Attempting
Okay
Crashed
}
;
enum
class
CrashGuardType
:
uint32_t
{
D3D11Layers
D3D9Video
GLContext
NUM_TYPES
}
;
class
DriverCrashGuard
{
public
:
DriverCrashGuard
(
CrashGuardType
aType
dom
:
:
ContentParent
*
aContentParent
)
;
virtual
~
DriverCrashGuard
(
)
;
bool
Crashed
(
)
;
void
NotifyCrashed
(
)
;
enum
class
TelemetryState
{
Okay
=
0
EnvironmentChanged
=
1
RecoveredFromCrash
=
2
FeatureDisabled
=
3
}
;
enum
class
Mode
{
Normal
Proxy
}
;
protected
:
virtual
void
Initialize
(
)
;
virtual
bool
UpdateEnvironment
(
)
=
0
;
virtual
void
LogCrashRecovery
(
)
=
0
;
virtual
void
LogFeatureDisabled
(
)
=
0
;
bool
FeatureEnabled
(
int
aFeature
bool
aDefault
=
true
)
;
bool
CheckAndUpdatePref
(
const
char
*
aPrefName
const
nsAString
&
aCurrentValue
)
;
bool
CheckAndUpdateBoolPref
(
const
char
*
aPrefName
bool
aCurrentValue
)
;
std
:
:
string
GetFullPrefName
(
const
char
*
aPref
)
;
private
:
void
InitializeIfNeeded
(
)
;
bool
CheckOrRefreshEnvironment
(
)
;
bool
UpdateBaseEnvironment
(
)
;
DriverInitStatus
GetStatus
(
)
const
;
nsCOMPtr
<
nsIFile
>
GetGuardFile
(
)
;
bool
RecoverFromCrash
(
)
;
void
ActivateGuard
(
)
;
void
FlushPreferences
(
)
;
void
SetStatus
(
DriverInitStatus
aStatus
)
;
private
:
CrashGuardType
mType
;
Mode
mMode
;
bool
mInitialized
;
bool
mGuardActivated
;
bool
mCrashDetected
;
nsCOMPtr
<
nsIFile
>
mGuardFile
;
protected
:
nsCString
mStatusPref
;
nsCOMPtr
<
nsIGfxInfo
>
mGfxInfo
;
}
;
class
D3D11LayersCrashGuard
final
:
public
DriverCrashGuard
{
public
:
explicit
D3D11LayersCrashGuard
(
dom
:
:
ContentParent
*
aContentParent
=
nullptr
)
;
protected
:
void
Initialize
(
)
override
;
bool
UpdateEnvironment
(
)
override
;
void
LogCrashRecovery
(
)
override
;
void
LogFeatureDisabled
(
)
override
;
private
:
void
RecordTelemetry
(
TelemetryState
aState
)
;
}
;
class
D3D9VideoCrashGuard
final
:
public
DriverCrashGuard
{
public
:
explicit
D3D9VideoCrashGuard
(
dom
:
:
ContentParent
*
aContentParent
=
nullptr
)
;
protected
:
bool
UpdateEnvironment
(
)
override
;
void
LogCrashRecovery
(
)
override
;
void
LogFeatureDisabled
(
)
override
;
}
;
class
GLContextCrashGuard
final
:
public
DriverCrashGuard
{
public
:
explicit
GLContextCrashGuard
(
dom
:
:
ContentParent
*
aContentParent
=
nullptr
)
;
protected
:
bool
UpdateEnvironment
(
)
override
;
void
LogCrashRecovery
(
)
override
;
void
LogFeatureDisabled
(
)
override
;
}
;
}
}
#
endif
