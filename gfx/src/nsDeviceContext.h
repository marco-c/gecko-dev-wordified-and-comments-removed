#
ifndef
_NS_DEVICECONTEXT_H_
#
define
_NS_DEVICECONTEXT_H_
#
include
<
stdint
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
"
gfxTypes
.
h
"
#
include
"
gfxFont
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsMathUtils
.
h
"
#
include
"
nscore
.
h
"
#
include
"
mozilla
/
AppUnits
.
h
"
#
include
"
nsFontMetrics
.
h
"
#
include
"
mozilla
/
gfx
/
PrintTarget
.
h
"
#
include
"
mozilla
/
gfx
/
PrintPromise
.
h
"
class
gfxContext
;
class
gfxTextPerfMetrics
;
class
gfxUserFontSet
;
struct
nsFont
;
class
nsAtom
;
class
nsIDeviceContextSpec
;
class
nsIScreen
;
class
nsIScreenManager
;
class
nsIWidget
;
struct
nsRect
;
namespace
mozilla
{
namespace
dom
{
enum
class
ScreenColorGamut
:
uint8_t
;
}
namespace
hal
{
enum
class
ScreenOrientation
:
uint32_t
;
}
namespace
widget
{
class
Screen
;
}
}
class
nsDeviceContext
final
{
public
:
typedef
mozilla
:
:
gfx
:
:
PrintTarget
PrintTarget
;
nsDeviceContext
(
)
;
NS_INLINE_DECL_REFCOUNTING
(
nsDeviceContext
)
void
Init
(
nsIWidget
*
aWidget
)
;
nsresult
InitForPrinting
(
nsIDeviceContextSpec
*
aDevSpec
)
;
already_AddRefed
<
gfxContext
>
CreateRenderingContext
(
)
;
already_AddRefed
<
gfxContext
>
CreateReferenceRenderingContext
(
)
;
int32_t
AppUnitsPerDevPixel
(
)
const
{
return
mAppUnitsPerDevPixel
;
}
nscoord
GfxUnitsToAppUnits
(
gfxFloat
aGfxUnits
)
const
{
return
nscoord
(
NS_round
(
aGfxUnits
*
AppUnitsPerDevPixel
(
)
)
)
;
}
gfxFloat
AppUnitsToGfxUnits
(
nscoord
aAppUnits
)
const
{
return
gfxFloat
(
aAppUnits
)
/
AppUnitsPerDevPixel
(
)
;
}
int32_t
AppUnitsPerPhysicalInch
(
)
const
{
return
mAppUnitsPerPhysicalInch
;
}
int32_t
AppUnitsPerDevPixelAtUnitFullZoom
(
)
const
{
return
mAppUnitsPerDevPixelAtUnitFullZoom
;
}
int32_t
AppUnitsPerDevPixelInTopLevelChromePage
(
)
const
;
uint32_t
GetDepth
(
)
;
mozilla
:
:
dom
:
:
ScreenColorGamut
GetColorGamut
(
)
;
mozilla
:
:
hal
:
:
ScreenOrientation
GetScreenOrientationType
(
)
;
uint16_t
GetScreenOrientationAngle
(
)
;
nsresult
GetDeviceSurfaceDimensions
(
nscoord
&
aWidth
nscoord
&
aHeight
)
;
nsresult
GetRect
(
nsRect
&
aRect
)
;
nsresult
GetClientRect
(
nsRect
&
aRect
)
;
bool
IsCurrentlyPrintingDocument
(
)
const
{
return
mIsCurrentlyPrintingDoc
;
}
nsresult
BeginDocument
(
const
nsAString
&
aTitle
const
nsAString
&
aPrintToFileName
int32_t
aStartPage
int32_t
aEndPage
)
;
RefPtr
<
mozilla
:
:
gfx
:
:
PrintEndDocumentPromise
>
EndDocument
(
)
;
nsresult
AbortDocument
(
)
;
nsresult
BeginPage
(
)
;
nsresult
EndPage
(
)
;
bool
CheckDPIChange
(
)
;
bool
SetFullZoom
(
float
aScale
)
;
float
GetFullZoom
(
)
const
{
return
mFullZoom
;
}
bool
IsPrinterContext
(
)
const
{
return
!
!
mPrintTarget
;
}
mozilla
:
:
DesktopToLayoutDeviceScale
GetDesktopToDeviceScale
(
)
;
private
:
~
nsDeviceContext
(
)
;
already_AddRefed
<
gfxContext
>
CreateRenderingContextCommon
(
bool
aWantReferenceContext
)
;
void
SetDPI
(
)
;
void
ComputeClientRectUsingScreen
(
nsRect
*
outRect
)
;
void
ComputeFullAreaUsingScreen
(
nsRect
*
outRect
)
;
already_AddRefed
<
mozilla
:
:
widget
:
:
Screen
>
FindScreen
(
)
;
bool
CalcPrintingSize
(
)
;
void
UpdateAppUnitsForFullZoom
(
)
;
nscoord
mWidth
;
nscoord
mHeight
;
int32_t
mAppUnitsPerDevPixel
;
int32_t
mAppUnitsPerDevPixelAtUnitFullZoom
;
int32_t
mAppUnitsPerPhysicalInch
;
float
mFullZoom
;
float
mPrintingScale
;
gfxPoint
mPrintingTranslate
;
nsCOMPtr
<
nsIWidget
>
mWidget
;
nsCOMPtr
<
nsIDeviceContextSpec
>
mDeviceContextSpec
;
RefPtr
<
PrintTarget
>
mPrintTarget
;
bool
mIsCurrentlyPrintingDoc
;
bool
mIsInitialized
=
false
;
}
;
#
endif
