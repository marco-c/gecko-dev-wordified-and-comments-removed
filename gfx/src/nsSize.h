#
ifndef
NSSIZE_H
#
define
NSSIZE_H
#
include
"
nsCoord
.
h
"
#
include
"
mozilla
/
gfx
/
BaseSize
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
inline
constexpr
nscoord
NS_MAXSIZE
=
nscoord_MAX
;
typedef
mozilla
:
:
gfx
:
:
IntSize
nsIntSize
;
struct
nsSize
:
public
mozilla
:
:
gfx
:
:
BaseSize
<
nscoord
nsSize
>
{
typedef
mozilla
:
:
gfx
:
:
BaseSize
<
nscoord
nsSize
>
Super
;
constexpr
nsSize
(
)
=
default
;
constexpr
nsSize
(
nscoord
aWidth
nscoord
aHeight
)
:
Super
(
aWidth
aHeight
)
{
}
mozilla
:
:
gfx
:
:
IntSize
ScaleToNearestPixels
(
float
aXScale
float
aYScale
nscoord
aAppUnitsPerPixel
)
const
{
return
{
NSToIntRoundUp
(
NSAppUnitsToDoublePixels
(
width
aAppUnitsPerPixel
)
*
aXScale
)
NSToIntRoundUp
(
NSAppUnitsToDoublePixels
(
height
aAppUnitsPerPixel
)
*
aYScale
)
}
;
}
mozilla
:
:
gfx
:
:
IntSize
ToNearestPixels
(
nscoord
aAppUnitsPerPixel
)
const
{
return
ScaleToNearestPixels
(
1
.
0f
1
.
0f
aAppUnitsPerPixel
)
;
}
[
[
nodiscard
]
]
nsSize
ScaleToOtherAppUnits
(
int32_t
aFromAPP
int32_t
aToAPP
)
const
{
if
(
aFromAPP
!
=
aToAPP
)
{
nsSize
size
;
size
.
width
=
NSToCoordRound
(
NSCoordScale
(
width
aFromAPP
aToAPP
)
)
;
size
.
height
=
NSToCoordRound
(
NSCoordScale
(
height
aFromAPP
aToAPP
)
)
;
return
size
;
}
return
*
this
;
}
}
;
inline
nsSize
IntSizeToAppUnits
(
mozilla
:
:
gfx
:
:
IntSize
aSize
nscoord
aAppUnitsPerPixel
)
{
return
nsSize
(
NSIntPixelsToAppUnits
(
aSize
.
width
aAppUnitsPerPixel
)
NSIntPixelsToAppUnits
(
aSize
.
height
aAppUnitsPerPixel
)
)
;
}
#
endif
