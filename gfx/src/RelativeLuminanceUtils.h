#
ifndef
mozilla_RelativeLuminanceUtils_h
#
define
mozilla_RelativeLuminanceUtils_h
#
include
"
nsColor
.
h
"
namespace
mozilla
{
class
RelativeLuminanceUtils
{
public
:
static
float
Compute
(
nscolor
aColor
)
{
float
r
=
ComputeComponent
(
NS_GET_R
(
aColor
)
)
;
float
g
=
ComputeComponent
(
NS_GET_G
(
aColor
)
)
;
float
b
=
ComputeComponent
(
NS_GET_B
(
aColor
)
)
;
return
ComputeFromComponents
(
r
g
b
)
;
}
static
nscolor
Adjust
(
nscolor
aColor
float
aLuminance
)
{
float
r
=
ComputeComponent
(
NS_GET_R
(
aColor
)
)
;
float
g
=
ComputeComponent
(
NS_GET_G
(
aColor
)
)
;
float
b
=
ComputeComponent
(
NS_GET_B
(
aColor
)
)
;
float
luminance
=
ComputeFromComponents
(
r
g
b
)
;
float
factor
=
aLuminance
/
luminance
;
uint8_t
r1
=
DecomputeComponent
(
r
*
factor
)
;
uint8_t
g1
=
DecomputeComponent
(
g
*
factor
)
;
uint8_t
b1
=
DecomputeComponent
(
b
*
factor
)
;
return
NS_RGB
(
r1
g1
b1
)
;
}
private
:
static
float
ComputeComponent
(
uint8_t
aComponent
)
{
float
v
=
float
(
aComponent
)
/
255
.
0f
;
if
(
v
<
=
0
.
03928f
)
{
return
v
/
12
.
92f
;
}
return
std
:
:
pow
(
(
v
+
0
.
055f
)
/
1
.
055f
2
.
4f
)
;
}
static
constexpr
float
ComputeFromComponents
(
float
aR
float
aG
float
aB
)
{
return
0
.
2126f
*
aR
+
0
.
7152f
*
aG
+
0
.
0722f
*
aB
;
}
static
uint8_t
DecomputeComponent
(
float
aComponent
)
{
if
(
aComponent
<
=
0
.
03928f
/
12
.
92f
)
{
aComponent
*
=
12
.
92f
;
}
else
{
aComponent
=
std
:
:
pow
(
aComponent
1
.
0f
/
2
.
4f
)
*
1
.
055f
-
0
.
055f
;
}
return
ClampColor
(
aComponent
*
255
.
0f
)
;
}
}
;
}
#
endif
