#
include
"
nsDeviceContext
.
h
"
#
include
<
algorithm
>
#
include
"
gfxContext
.
h
"
#
include
"
gfxPoint
.
h
"
#
include
"
gfxTextRun
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
gfx
/
PathHelpers
.
h
"
#
include
"
mozilla
/
gfx
/
PrintTarget
.
h
"
#
include
"
mozilla
/
ProfilerMarkers
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
mozilla
/
Try
.
h
"
#
include
"
mozilla
/
widget
/
Screen
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsFontMetrics
.
h
"
#
include
"
nsIDeviceContextSpec
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
widget
/
ScreenManager
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
using
mozilla
:
:
widget
:
:
ScreenManager
;
nsDeviceContext
:
:
nsDeviceContext
(
)
:
mWidth
(
0
)
mHeight
(
0
)
mAppUnitsPerDevPixel
(
-
1
)
mAppUnitsPerDevPixelAtUnitFullZoom
(
-
1
)
mAppUnitsPerPhysicalInch
(
-
1
)
mFullZoom
(
1
.
0f
)
mPrintingScale
(
1
.
0f
)
mPrintingTranslate
(
gfxPoint
(
0
0
)
)
mIsCurrentlyPrintingDoc
(
false
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
"
nsDeviceContext
created
off
main
thread
"
)
;
}
nsDeviceContext
:
:
~
nsDeviceContext
(
)
=
default
;
void
nsDeviceContext
:
:
SetDPI
(
)
{
float
dpi
;
if
(
mDeviceContextSpec
)
{
dpi
=
mDeviceContextSpec
-
>
GetDPI
(
)
;
mPrintingScale
=
mDeviceContextSpec
-
>
GetPrintingScale
(
)
;
mPrintingTranslate
=
mDeviceContextSpec
-
>
GetPrintingTranslate
(
)
;
mAppUnitsPerDevPixelAtUnitFullZoom
=
NS_lround
(
(
AppUnitsPerCSSPixel
(
)
*
96
)
/
dpi
)
;
}
else
{
int32_t
prefDPI
=
StaticPrefs
:
:
layout_css_dpi
(
)
;
if
(
prefDPI
>
0
)
{
dpi
=
prefDPI
;
}
else
if
(
mWidget
)
{
dpi
=
mWidget
-
>
GetDPI
(
)
;
MOZ_ASSERT
(
dpi
>
0
)
;
if
(
prefDPI
<
0
)
{
dpi
=
std
:
:
max
(
96
.
0f
dpi
)
;
}
}
else
{
dpi
=
96
.
0f
;
}
CSSToLayoutDeviceScale
scale
=
mWidget
?
mWidget
-
>
GetDefaultScale
(
)
:
CSSToLayoutDeviceScale
(
1
.
0
)
;
MOZ_ASSERT
(
scale
.
scale
>
0
.
0
)
;
mAppUnitsPerDevPixelAtUnitFullZoom
=
std
:
:
max
(
1
NS_lround
(
AppUnitsPerCSSPixel
(
)
/
scale
.
scale
)
)
;
}
NS_ASSERTION
(
dpi
!
=
-
1
.
0
"
no
dpi
set
"
)
;
mAppUnitsPerPhysicalInch
=
NS_lround
(
dpi
*
mAppUnitsPerDevPixelAtUnitFullZoom
)
;
UpdateAppUnitsForFullZoom
(
)
;
}
void
nsDeviceContext
:
:
Init
(
nsIWidget
*
aWidget
)
{
if
(
mIsInitialized
&
&
mWidget
=
=
aWidget
)
{
return
;
}
mIsInitialized
=
true
;
mWidget
=
aWidget
;
SetDPI
(
)
;
}
UniquePtr
<
gfxContext
>
nsDeviceContext
:
:
CreateRenderingContext
(
)
{
return
CreateRenderingContextCommon
(
false
)
;
}
UniquePtr
<
gfxContext
>
nsDeviceContext
:
:
CreateReferenceRenderingContext
(
)
{
return
CreateRenderingContextCommon
(
true
)
;
}
UniquePtr
<
gfxContext
>
nsDeviceContext
:
:
CreateRenderingContextCommon
(
bool
aWantReferenceContext
)
{
MOZ_ASSERT
(
IsPrinterContext
(
)
)
;
MOZ_ASSERT
(
mWidth
>
0
&
&
mHeight
>
0
)
;
if
(
NS_WARN_IF
(
!
mPrintTarget
)
)
{
return
nullptr
;
}
RefPtr
<
gfx
:
:
DrawTarget
>
dt
;
if
(
aWantReferenceContext
)
{
dt
=
mPrintTarget
-
>
GetReferenceDrawTarget
(
)
;
}
else
{
RefPtr
<
DrawEventRecorder
>
recorder
;
mDeviceContextSpec
-
>
GetDrawEventRecorder
(
getter_AddRefs
(
recorder
)
)
;
dt
=
mPrintTarget
-
>
MakeDrawTarget
(
gfx
:
:
IntSize
(
mWidth
mHeight
)
recorder
)
;
}
if
(
!
dt
|
|
!
dt
-
>
IsValid
(
)
)
{
gfxCriticalNote
<
<
"
Failed
to
create
draw
target
in
device
context
sized
"
<
<
mWidth
<
<
"
x
"
<
<
mHeight
<
<
"
and
pointer
"
<
<
hexa
(
mPrintTarget
)
;
return
nullptr
;
}
dt
-
>
AddUserData
(
&
sDisablePixelSnapping
(
void
*
)
0x1
nullptr
)
;
auto
pContext
=
MakeUnique
<
gfxContext
>
(
dt
)
;
gfxMatrix
transform
;
transform
.
PreTranslate
(
mPrintingTranslate
)
;
transform
.
PreScale
(
mPrintingScale
mPrintingScale
)
;
pContext
-
>
SetMatrixDouble
(
transform
)
;
return
pContext
;
}
uint32_t
nsDeviceContext
:
:
GetDepth
(
)
{
RefPtr
<
widget
:
:
Screen
>
screen
=
FindScreen
(
)
;
if
(
!
screen
)
{
ScreenManager
&
screenManager
=
ScreenManager
:
:
GetSingleton
(
)
;
screen
=
screenManager
.
GetPrimaryScreen
(
)
;
MOZ_ASSERT
(
screen
)
;
}
int32_t
depth
=
0
;
screen
-
>
GetColorDepth
(
&
depth
)
;
return
uint32_t
(
depth
)
;
}
dom
:
:
ScreenColorGamut
nsDeviceContext
:
:
GetColorGamut
(
)
{
RefPtr
<
widget
:
:
Screen
>
screen
=
FindScreen
(
)
;
if
(
!
screen
)
{
auto
&
screenManager
=
ScreenManager
:
:
GetSingleton
(
)
;
screen
=
screenManager
.
GetPrimaryScreen
(
)
;
MOZ_ASSERT
(
screen
)
;
}
dom
:
:
ScreenColorGamut
colorGamut
;
screen
-
>
GetColorGamut
(
&
colorGamut
)
;
return
colorGamut
;
}
hal
:
:
ScreenOrientation
nsDeviceContext
:
:
GetScreenOrientationType
(
)
{
RefPtr
<
widget
:
:
Screen
>
screen
=
FindScreen
(
)
;
if
(
!
screen
)
{
auto
&
screenManager
=
ScreenManager
:
:
GetSingleton
(
)
;
screen
=
screenManager
.
GetPrimaryScreen
(
)
;
MOZ_ASSERT
(
screen
)
;
}
return
screen
-
>
GetOrientationType
(
)
;
}
uint16_t
nsDeviceContext
:
:
GetScreenOrientationAngle
(
)
{
RefPtr
<
widget
:
:
Screen
>
screen
=
FindScreen
(
)
;
if
(
!
screen
)
{
auto
&
screenManager
=
ScreenManager
:
:
GetSingleton
(
)
;
screen
=
screenManager
.
GetPrimaryScreen
(
)
;
MOZ_ASSERT
(
screen
)
;
}
return
screen
-
>
GetOrientationAngle
(
)
;
}
bool
nsDeviceContext
:
:
GetScreenIsHDR
(
)
{
RefPtr
<
widget
:
:
Screen
>
screen
=
FindScreen
(
)
;
if
(
!
screen
)
{
auto
&
screenManager
=
ScreenManager
:
:
GetSingleton
(
)
;
screen
=
screenManager
.
GetPrimaryScreen
(
)
;
MOZ_ASSERT
(
screen
)
;
}
return
screen
-
>
GetIsHDR
(
)
;
}
nsresult
nsDeviceContext
:
:
GetDeviceSurfaceDimensions
(
nscoord
&
aWidth
nscoord
&
aHeight
)
{
if
(
IsPrinterContext
(
)
)
{
aWidth
=
mWidth
;
aHeight
=
mHeight
;
}
else
{
nsRect
area
;
ComputeFullAreaUsingScreen
(
&
area
)
;
aWidth
=
area
.
Width
(
)
;
aHeight
=
area
.
Height
(
)
;
}
return
NS_OK
;
}
nsresult
nsDeviceContext
:
:
GetRect
(
nsRect
&
aRect
)
{
if
(
IsPrinterContext
(
)
)
{
aRect
.
SetRect
(
0
0
mWidth
mHeight
)
;
}
else
ComputeFullAreaUsingScreen
(
&
aRect
)
;
return
NS_OK
;
}
nsresult
nsDeviceContext
:
:
GetClientRect
(
nsRect
&
aRect
)
{
if
(
IsPrinterContext
(
)
)
{
aRect
.
SetRect
(
0
0
mWidth
mHeight
)
;
}
else
ComputeClientRectUsingScreen
(
&
aRect
)
;
return
NS_OK
;
}
nsresult
nsDeviceContext
:
:
InitForPrinting
(
nsIDeviceContextSpec
*
aDevice
)
{
NS_ENSURE_ARG_POINTER
(
aDevice
)
;
MOZ_ASSERT
(
!
mIsInitialized
"
Only
initialize
once
immediately
after
construction
"
)
;
mPrintTarget
=
aDevice
-
>
MakePrintTarget
(
)
;
if
(
!
mPrintTarget
)
{
return
NS_ERROR_FAILURE
;
}
mDeviceContextSpec
=
aDevice
;
Init
(
nullptr
)
;
if
(
!
CalcPrintingSize
(
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
nsresult
nsDeviceContext
:
:
BeginDocument
(
const
nsAString
&
aTitle
const
nsAString
&
aPrintToFileName
int32_t
aStartPage
int32_t
aEndPage
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsCurrentlyPrintingDoc
"
Mismatched
BeginDocument
/
EndDocument
calls
"
)
;
AUTO_PROFILER_MARKER_TEXT
(
"
DeviceContext
Printing
"
LAYOUT_Printing
{
}
"
nsDeviceContext
:
:
BeginDocument
"
_ns
)
;
nsresult
rv
=
mPrintTarget
-
>
BeginPrinting
(
aTitle
aPrintToFileName
aStartPage
aEndPage
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
if
(
mDeviceContextSpec
)
{
rv
=
mDeviceContextSpec
-
>
BeginDocument
(
aTitle
aPrintToFileName
aStartPage
aEndPage
)
;
}
mIsCurrentlyPrintingDoc
=
true
;
}
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
|
|
rv
=
=
NS_ERROR_ABORT
"
nsDeviceContext
:
:
BeginDocument
failed
"
)
;
return
rv
;
}
RefPtr
<
PrintEndDocumentPromise
>
nsDeviceContext
:
:
EndDocument
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mIsCurrentlyPrintingDoc
"
Mismatched
BeginDocument
/
EndDocument
calls
"
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mPrintTarget
)
;
AUTO_PROFILER_MARKER_TEXT
(
"
DeviceContext
Printing
"
LAYOUT_Printing
{
}
"
nsDeviceContext
:
:
EndDocument
"
_ns
)
;
mIsCurrentlyPrintingDoc
=
false
;
if
(
mPrintTarget
)
{
auto
result
=
mPrintTarget
-
>
EndPrinting
(
)
;
if
(
NS_FAILED
(
result
)
)
{
return
PrintEndDocumentPromise
:
:
CreateAndReject
(
NS_ERROR_NOT_AVAILABLE
__func__
)
;
}
mPrintTarget
-
>
Finish
(
)
;
mPrintTarget
=
nullptr
;
}
if
(
mDeviceContextSpec
)
{
return
mDeviceContextSpec
-
>
EndDocument
(
)
;
}
return
PrintEndDocumentPromise
:
:
CreateAndResolve
(
true
__func__
)
;
}
nsresult
nsDeviceContext
:
:
AbortDocument
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mIsCurrentlyPrintingDoc
"
Mismatched
BeginDocument
/
EndDocument
calls
"
)
;
AUTO_PROFILER_MARKER_TEXT
(
"
DeviceContext
Printing
"
LAYOUT_Printing
{
}
"
nsDeviceContext
:
:
AbortDocument
"
_ns
)
;
nsresult
rv
=
mPrintTarget
-
>
AbortPrinting
(
)
;
mIsCurrentlyPrintingDoc
=
false
;
if
(
mDeviceContextSpec
)
{
Unused
<
<
mDeviceContextSpec
-
>
EndDocument
(
)
;
}
mPrintTarget
=
nullptr
;
return
rv
;
}
nsresult
nsDeviceContext
:
:
BeginPage
(
const
IntSize
&
aSizeInPoints
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsCurrentlyPrintingDoc
|
|
mPrintTarget
"
What
nulled
out
our
print
target
while
printing
?
"
)
;
AUTO_PROFILER_MARKER_TEXT
(
"
DeviceContext
Printing
"
LAYOUT_Printing
{
}
"
nsDeviceContext
:
:
BeginPage
"
_ns
)
;
if
(
mDeviceContextSpec
)
{
MOZ_TRY
(
mDeviceContextSpec
-
>
BeginPage
(
aSizeInPoints
)
)
;
}
if
(
mPrintTarget
)
{
MOZ_TRY
(
mPrintTarget
-
>
BeginPage
(
aSizeInPoints
)
)
;
}
return
NS_OK
;
}
nsresult
nsDeviceContext
:
:
EndPage
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsCurrentlyPrintingDoc
|
|
mPrintTarget
"
What
nulled
out
our
print
target
while
printing
?
"
)
;
AUTO_PROFILER_MARKER_TEXT
(
"
DeviceContext
Printing
"
LAYOUT_Printing
{
}
"
nsDeviceContext
:
:
EndPage
"
_ns
)
;
if
(
mPrintTarget
)
{
MOZ_TRY
(
mPrintTarget
-
>
EndPage
(
)
)
;
}
if
(
mDeviceContextSpec
)
{
MOZ_TRY
(
mDeviceContextSpec
-
>
EndPage
(
)
)
;
}
return
NS_OK
;
}
void
nsDeviceContext
:
:
ComputeClientRectUsingScreen
(
nsRect
*
outRect
)
{
if
(
RefPtr
<
widget
:
:
Screen
>
screen
=
FindScreen
(
)
)
{
*
outRect
=
LayoutDeviceIntRect
:
:
ToAppUnits
(
screen
-
>
GetAvailRect
(
)
AppUnitsPerDevPixel
(
)
)
;
}
}
void
nsDeviceContext
:
:
ComputeFullAreaUsingScreen
(
nsRect
*
outRect
)
{
if
(
RefPtr
<
widget
:
:
Screen
>
screen
=
FindScreen
(
)
)
{
*
outRect
=
LayoutDeviceIntRect
:
:
ToAppUnits
(
screen
-
>
GetRect
(
)
AppUnitsPerDevPixel
(
)
)
;
mWidth
=
outRect
-
>
Width
(
)
;
mHeight
=
outRect
-
>
Height
(
)
;
}
}
already_AddRefed
<
widget
:
:
Screen
>
nsDeviceContext
:
:
FindScreen
(
)
{
if
(
!
mWidget
)
{
return
nullptr
;
}
CheckDPIChange
(
)
;
if
(
RefPtr
<
widget
:
:
Screen
>
screen
=
mWidget
-
>
GetWidgetScreen
(
)
)
{
return
screen
.
forget
(
)
;
}
ScreenManager
&
screenManager
=
ScreenManager
:
:
GetSingleton
(
)
;
return
screenManager
.
GetPrimaryScreen
(
)
;
}
bool
nsDeviceContext
:
:
CalcPrintingSize
(
)
{
gfxSize
size
(
mPrintTarget
-
>
GetSize
(
)
)
;
mWidth
=
NSToCoordRound
(
size
.
width
*
AppUnitsPerPhysicalInch
(
)
/
POINTS_PER_INCH_FLOAT
)
;
mHeight
=
NSToCoordRound
(
size
.
height
*
AppUnitsPerPhysicalInch
(
)
/
POINTS_PER_INCH_FLOAT
)
;
return
(
mWidth
>
0
&
&
mHeight
>
0
)
;
}
bool
nsDeviceContext
:
:
CheckDPIChange
(
)
{
int32_t
oldDevPixels
=
mAppUnitsPerDevPixelAtUnitFullZoom
;
int32_t
oldInches
=
mAppUnitsPerPhysicalInch
;
SetDPI
(
)
;
return
oldDevPixels
!
=
mAppUnitsPerDevPixelAtUnitFullZoom
|
|
oldInches
!
=
mAppUnitsPerPhysicalInch
;
}
bool
nsDeviceContext
:
:
SetFullZoom
(
float
aScale
)
{
if
(
aScale
<
=
0
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
full
zoom
value
"
)
;
return
false
;
}
int32_t
oldAppUnitsPerDevPixel
=
mAppUnitsPerDevPixel
;
mFullZoom
=
aScale
;
UpdateAppUnitsForFullZoom
(
)
;
return
oldAppUnitsPerDevPixel
!
=
mAppUnitsPerDevPixel
;
}
static
int32_t
ApplyFullZoom
(
int32_t
aUnzoomedAppUnits
float
aFullZoom
)
{
if
(
aFullZoom
=
=
1
.
0f
)
{
return
aUnzoomedAppUnits
;
}
return
std
:
:
max
(
1
NSToIntRound
(
float
(
aUnzoomedAppUnits
)
/
aFullZoom
)
)
;
}
int32_t
nsDeviceContext
:
:
AppUnitsPerDevPixelInTopLevelChromePage
(
)
const
{
return
ApplyFullZoom
(
mAppUnitsPerDevPixelAtUnitFullZoom
LookAndFeel
:
:
SystemZoomSettings
(
)
.
mFullZoom
)
;
}
void
nsDeviceContext
:
:
UpdateAppUnitsForFullZoom
(
)
{
mAppUnitsPerDevPixel
=
ApplyFullZoom
(
mAppUnitsPerDevPixelAtUnitFullZoom
mFullZoom
)
;
mFullZoom
=
float
(
mAppUnitsPerDevPixelAtUnitFullZoom
)
/
mAppUnitsPerDevPixel
;
}
DesktopToLayoutDeviceScale
nsDeviceContext
:
:
GetDesktopToDeviceScale
(
)
{
if
(
RefPtr
<
widget
:
:
Screen
>
screen
=
FindScreen
(
)
)
{
return
screen
-
>
GetDesktopToLayoutDeviceScale
(
)
;
}
return
DesktopToLayoutDeviceScale
(
1
.
0
)
;
}
