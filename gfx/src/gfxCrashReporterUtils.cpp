#
include
"
gfxCrashReporterUtils
.
h
"
#
include
<
string
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
SchedulerGroup
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsExceptionHandler
.
h
"
#
include
"
nsID
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIRunnable
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nscore
.
h
"
namespace
mozilla
{
static
nsTArray
<
nsCString
>
*
gFeaturesAlreadyReported
=
nullptr
;
static
StaticMutex
gFeaturesAlreadyReportedMutex
;
class
ObserverToDestroyFeaturesAlreadyReported
final
:
public
nsIObserver
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
ObserverToDestroyFeaturesAlreadyReported
(
)
=
default
;
private
:
virtual
~
ObserverToDestroyFeaturesAlreadyReported
(
)
=
default
;
}
;
NS_IMPL_ISUPPORTS
(
ObserverToDestroyFeaturesAlreadyReported
nsIObserver
)
NS_IMETHODIMP
ObserverToDestroyFeaturesAlreadyReported
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
strcmp
(
aTopic
"
xpcom
-
shutdown
"
)
)
{
StaticMutexAutoLock
al
(
gFeaturesAlreadyReportedMutex
)
;
if
(
gFeaturesAlreadyReported
)
{
delete
gFeaturesAlreadyReported
;
gFeaturesAlreadyReported
=
nullptr
;
}
}
return
NS_OK
;
}
class
RegisterObserverRunnable
:
public
Runnable
{
public
:
RegisterObserverRunnable
(
)
:
Runnable
(
"
RegisterObserverRunnable
"
)
{
}
NS_IMETHOD
Run
(
)
override
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
!
observerService
)
return
NS_OK
;
RefPtr
<
ObserverToDestroyFeaturesAlreadyReported
>
observer
=
new
ObserverToDestroyFeaturesAlreadyReported
;
observerService
-
>
AddObserver
(
observer
"
xpcom
-
shutdown
"
false
)
;
return
NS_OK
;
}
}
;
class
AppendAppNotesRunnable
:
public
CancelableRunnable
{
public
:
explicit
AppendAppNotesRunnable
(
const
nsACString
&
aFeatureStr
)
:
CancelableRunnable
(
"
AppendAppNotesRunnable
"
)
mFeatureString
(
aFeatureStr
)
{
}
NS_IMETHOD
Run
(
)
override
{
CrashReporter
:
:
AppendAppNotesToCrashReport
(
mFeatureString
)
;
return
NS_OK
;
}
private
:
nsAutoCString
mFeatureString
;
}
;
void
ScopedGfxFeatureReporter
:
:
WriteAppNote
(
char
statusChar
int32_t
statusNumber
)
{
StaticMutexAutoLock
al
(
gFeaturesAlreadyReportedMutex
)
;
if
(
!
gFeaturesAlreadyReported
)
{
gFeaturesAlreadyReported
=
new
nsTArray
<
nsCString
>
;
nsCOMPtr
<
nsIRunnable
>
r
=
new
RegisterObserverRunnable
(
)
;
SchedulerGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
;
}
nsAutoCString
featureString
;
if
(
statusNumber
=
=
0
)
{
featureString
.
AppendPrintf
(
"
%
s
%
c
"
mFeature
statusChar
)
;
}
else
{
featureString
.
AppendPrintf
(
"
%
s
%
c
%
d
"
mFeature
statusChar
statusNumber
)
;
}
if
(
!
gFeaturesAlreadyReported
-
>
Contains
(
featureString
)
)
{
gFeaturesAlreadyReported
-
>
AppendElement
(
featureString
)
;
AppNote
(
featureString
)
;
}
}
void
ScopedGfxFeatureReporter
:
:
AppNote
(
const
nsACString
&
aMessage
)
{
if
(
NS_IsMainThread
(
)
)
{
CrashReporter
:
:
AppendAppNotesToCrashReport
(
aMessage
)
;
}
else
{
nsCOMPtr
<
nsIRunnable
>
r
=
new
AppendAppNotesRunnable
(
aMessage
)
;
SchedulerGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
r
.
forget
(
)
)
;
}
}
}
