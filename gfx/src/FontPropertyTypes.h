#
ifndef
GFX_FONT_PROPERTY_TYPES_H
#
define
GFX_FONT_PROPERTY_TYPES_H
#
include
<
algorithm
>
#
include
<
cstdint
>
#
include
<
cmath
>
#
include
<
utility
>
#
include
<
ctype
.
h
>
#
include
<
stdlib
.
h
>
#
include
<
string
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
template
<
class
InternalType
unsigned
FractionBits
int
Min
int
Max
>
class
FontPropertyValue
{
public
:
FontPropertyValue
(
)
=
default
;
explicit
FontPropertyValue
(
const
FontPropertyValue
&
aOther
)
=
default
;
FontPropertyValue
&
operator
=
(
const
FontPropertyValue
&
aOther
)
=
default
;
bool
operator
=
=
(
const
FontPropertyValue
&
aOther
)
const
{
return
mValue
=
=
aOther
.
mValue
;
}
bool
operator
!
=
(
const
FontPropertyValue
&
aOther
)
const
{
return
mValue
!
=
aOther
.
mValue
;
}
bool
operator
<
(
const
FontPropertyValue
&
aOther
)
const
{
return
mValue
<
aOther
.
mValue
;
}
bool
operator
>
(
const
FontPropertyValue
&
aOther
)
const
{
return
mValue
>
aOther
.
mValue
;
}
bool
operator
<
=
(
const
FontPropertyValue
&
aOther
)
const
{
return
mValue
<
=
aOther
.
mValue
;
}
bool
operator
>
=
(
const
FontPropertyValue
&
aOther
)
const
{
return
mValue
>
=
aOther
.
mValue
;
}
float
operator
-
(
const
FontPropertyValue
&
aOther
)
const
{
return
(
mValue
-
aOther
.
mValue
)
*
kInverseScale
;
}
uint16_t
ForHash
(
)
const
{
return
uint16_t
(
mValue
)
;
}
static
constexpr
const
float
kMin
=
float
(
Min
)
;
static
constexpr
const
float
kMax
=
float
(
Max
)
;
protected
:
explicit
FontPropertyValue
(
float
aValue
)
:
mValue
(
std
:
:
round
(
aValue
*
kScale
)
)
{
MOZ_ASSERT
(
aValue
>
=
kMin
&
&
aValue
<
=
kMax
)
;
}
explicit
FontPropertyValue
(
int
aValue
)
:
mValue
(
aValue
<
<
kFractionBits
)
{
MOZ_ASSERT
(
aValue
>
=
Min
&
&
aValue
<
=
Max
)
;
}
explicit
FontPropertyValue
(
InternalType
aValue
)
:
mValue
(
aValue
)
{
}
float
ToFloat
(
)
const
{
return
mValue
*
kInverseScale
;
}
int
ToIntRounded
(
)
const
{
return
(
mValue
+
kPointFive
)
>
>
FractionBits
;
}
static
constexpr
float
kScale
=
float
(
1u
<
<
FractionBits
)
;
static
constexpr
float
kInverseScale
=
1
.
0f
/
kScale
;
static
const
unsigned
kFractionBits
=
FractionBits
;
static
const
InternalType
kPointFive
=
1u
<
<
(
kFractionBits
-
1
)
;
InternalType
mValue
;
}
;
class
FontWeight
final
:
public
FontPropertyValue
<
uint16_t
6
1
1000
>
{
public
:
FontWeight
(
)
=
default
;
explicit
FontWeight
(
float
aValue
)
:
FontPropertyValue
(
aValue
)
{
}
explicit
FontWeight
(
int
aValue
)
:
FontPropertyValue
(
aValue
)
{
}
static
FontWeight
Normal
(
)
{
return
FontWeight
(
kNormal
)
;
}
static
FontWeight
Thin
(
)
{
return
FontWeight
(
kThin
)
;
}
static
FontWeight
Bold
(
)
{
return
FontWeight
(
kBold
)
;
}
bool
IsNormal
(
)
const
{
return
mValue
=
=
kNormal
;
}
bool
IsBold
(
)
const
{
return
mValue
>
=
kBoldThreshold
;
}
float
ToFloat
(
)
const
{
return
FontPropertyValue
:
:
ToFloat
(
)
;
}
int
ToIntRounded
(
)
const
{
return
FontPropertyValue
:
:
ToIntRounded
(
)
;
}
typedef
uint16_t
InternalType
;
private
:
friend
class
WeightRange
;
explicit
FontWeight
(
InternalType
aValue
)
:
FontPropertyValue
(
aValue
)
{
}
static
const
InternalType
kNormal
=
400u
<
<
kFractionBits
;
static
const
InternalType
kBold
=
700u
<
<
kFractionBits
;
static
const
InternalType
kBoldThreshold
=
600u
<
<
kFractionBits
;
static
const
InternalType
kThin
=
100u
<
<
kFractionBits
;
static
const
InternalType
kExtraBold
=
900u
<
<
kFractionBits
;
}
;
class
FontStretch
final
:
public
FontPropertyValue
<
uint16_t
6
0
1000
>
{
public
:
FontStretch
(
)
=
default
;
explicit
FontStretch
(
float
aPercent
)
:
FontPropertyValue
(
aPercent
)
{
}
static
FontStretch
Normal
(
)
{
return
FontStretch
(
kNormal
)
;
}
static
FontStretch
UltraCondensed
(
)
{
return
FontStretch
(
kUltraCondensed
)
;
}
static
FontStretch
ExtraCondensed
(
)
{
return
FontStretch
(
kExtraCondensed
)
;
}
static
FontStretch
Condensed
(
)
{
return
FontStretch
(
kCondensed
)
;
}
static
FontStretch
SemiCondensed
(
)
{
return
FontStretch
(
kSemiCondensed
)
;
}
static
FontStretch
SemiExpanded
(
)
{
return
FontStretch
(
kSemiExpanded
)
;
}
static
FontStretch
Expanded
(
)
{
return
FontStretch
(
kExpanded
)
;
}
static
FontStretch
ExtraExpanded
(
)
{
return
FontStretch
(
kExtraExpanded
)
;
}
static
FontStretch
UltraExpanded
(
)
{
return
FontStretch
(
kUltraExpanded
)
;
}
bool
IsNormal
(
)
const
{
return
mValue
=
=
kNormal
;
}
float
Percentage
(
)
const
{
return
ToFloat
(
)
;
}
typedef
uint16_t
InternalType
;
private
:
friend
class
StretchRange
;
explicit
FontStretch
(
InternalType
aValue
)
:
FontPropertyValue
(
aValue
)
{
}
static
const
InternalType
kUltraCondensed
=
50u
<
<
kFractionBits
;
static
const
InternalType
kExtraCondensed
=
(
62u
<
<
kFractionBits
)
+
kPointFive
;
static
const
InternalType
kCondensed
=
75u
<
<
kFractionBits
;
static
const
InternalType
kSemiCondensed
=
(
87u
<
<
kFractionBits
)
+
kPointFive
;
static
const
InternalType
kNormal
=
100u
<
<
kFractionBits
;
static
const
InternalType
kSemiExpanded
=
(
112u
<
<
kFractionBits
)
+
kPointFive
;
static
const
InternalType
kExpanded
=
125u
<
<
kFractionBits
;
static
const
InternalType
kExtraExpanded
=
150u
<
<
kFractionBits
;
static
const
InternalType
kUltraExpanded
=
200u
<
<
kFractionBits
;
}
;
class
FontSlantStyle
final
:
public
FontPropertyValue
<
int16_t
8
-
90
90
>
{
public
:
const
static
constexpr
float
kDefaultAngle
=
14
.
0
;
FontSlantStyle
(
)
=
default
;
static
FontSlantStyle
Normal
(
)
{
return
FontSlantStyle
(
kNormal
)
;
}
static
FontSlantStyle
Italic
(
)
{
return
FontSlantStyle
(
kItalic
)
;
}
static
FontSlantStyle
Oblique
(
float
aAngle
=
kDefaultAngle
)
{
return
FontSlantStyle
(
aAngle
)
;
}
static
FontSlantStyle
FromString
(
const
char
*
aString
)
{
if
(
strcmp
(
aString
"
normal
"
)
=
=
0
)
{
return
Normal
(
)
;
}
else
if
(
strcmp
(
aString
"
italic
"
)
=
=
0
)
{
return
Italic
(
)
;
}
else
{
if
(
isdigit
(
aString
[
0
]
)
&
&
strstr
(
aString
"
deg
"
)
)
{
float
angle
=
strtof
(
aString
nullptr
)
;
return
Oblique
(
angle
)
;
}
return
Normal
(
)
;
}
}
bool
IsNormal
(
)
const
{
return
mValue
=
=
kNormal
;
}
bool
IsItalic
(
)
const
{
return
mValue
=
=
kItalic
;
}
bool
IsOblique
(
)
const
{
return
mValue
!
=
kItalic
&
&
mValue
!
=
kNormal
;
}
float
ObliqueAngle
(
)
const
{
MOZ_ASSERT
(
IsOblique
(
)
)
;
return
ToFloat
(
)
;
}
void
ToString
(
nsACString
&
aOutString
)
const
{
if
(
IsNormal
(
)
)
{
aOutString
.
Append
(
"
normal
"
)
;
}
else
if
(
IsItalic
(
)
)
{
aOutString
.
Append
(
"
italic
"
)
;
}
else
{
aOutString
.
AppendPrintf
(
"
%
gdeg
"
ObliqueAngle
(
)
)
;
}
}
typedef
int16_t
InternalType
;
private
:
friend
class
SlantStyleRange
;
explicit
FontSlantStyle
(
InternalType
aConstant
)
:
FontPropertyValue
(
aConstant
)
{
}
explicit
FontSlantStyle
(
float
aAngle
)
:
FontPropertyValue
(
aAngle
)
{
}
static
const
InternalType
kNormal
=
INT16_MIN
;
static
const
InternalType
kItalic
=
INT16_MAX
;
}
;
template
<
class
T
>
class
FontPropertyRange
{
static_assert
(
sizeof
(
T
)
=
=
2
"
FontPropertyValue
should
be
a
16
-
bit
type
!
"
)
;
public
:
FontPropertyRange
(
T
aMin
T
aMax
)
:
mValues
(
aMin
aMax
)
{
MOZ_ASSERT
(
aMin
<
=
aMax
)
;
}
explicit
FontPropertyRange
(
T
aValue
)
:
mValues
(
aValue
aValue
)
{
}
explicit
FontPropertyRange
(
const
FontPropertyRange
&
aOther
)
=
default
;
FontPropertyRange
&
operator
=
(
const
FontPropertyRange
&
aOther
)
=
default
;
T
Min
(
)
const
{
return
mValues
.
first
;
}
T
Max
(
)
const
{
return
mValues
.
second
;
}
T
Clamp
(
T
aValue
)
const
{
return
aValue
<
=
Min
(
)
?
Min
(
)
:
(
aValue
>
=
Max
(
)
?
Max
(
)
:
aValue
)
;
}
bool
IsSingle
(
)
const
{
return
Min
(
)
=
=
Max
(
)
;
}
bool
operator
=
=
(
const
FontPropertyRange
&
aOther
)
const
{
return
mValues
=
=
aOther
.
mValues
;
}
bool
operator
!
=
(
const
FontPropertyRange
&
aOther
)
const
{
return
mValues
!
=
aOther
.
mValues
;
}
typedef
uint32_t
ScalarType
;
ScalarType
AsScalar
(
)
const
{
return
(
mValues
.
first
.
ForHash
(
)
<
<
16
)
|
mValues
.
second
.
ForHash
(
)
;
}
protected
:
std
:
:
pair
<
T
T
>
mValues
;
}
;
class
WeightRange
:
public
FontPropertyRange
<
FontWeight
>
{
public
:
WeightRange
(
FontWeight
aMin
FontWeight
aMax
)
:
FontPropertyRange
(
aMin
aMax
)
{
}
explicit
WeightRange
(
FontWeight
aWeight
)
:
FontPropertyRange
(
aWeight
)
{
}
WeightRange
(
const
WeightRange
&
aOther
)
=
default
;
void
ToString
(
nsACString
&
aOutString
const
char
*
aDelim
=
"
.
.
"
)
const
{
aOutString
.
AppendFloat
(
Min
(
)
.
ToFloat
(
)
)
;
if
(
!
IsSingle
(
)
)
{
aOutString
.
Append
(
aDelim
)
;
aOutString
.
AppendFloat
(
Max
(
)
.
ToFloat
(
)
)
;
}
}
static
WeightRange
FromScalar
(
ScalarType
aScalar
)
{
return
WeightRange
(
FontWeight
(
FontWeight
:
:
InternalType
(
aScalar
>
>
16
)
)
FontWeight
(
FontWeight
:
:
InternalType
(
aScalar
&
0xffff
)
)
)
;
}
}
;
class
StretchRange
:
public
FontPropertyRange
<
FontStretch
>
{
public
:
StretchRange
(
FontStretch
aMin
FontStretch
aMax
)
:
FontPropertyRange
(
aMin
aMax
)
{
}
explicit
StretchRange
(
FontStretch
aStretch
)
:
FontPropertyRange
(
aStretch
)
{
}
StretchRange
(
const
StretchRange
&
aOther
)
=
default
;
void
ToString
(
nsACString
&
aOutString
const
char
*
aDelim
=
"
.
.
"
)
const
{
aOutString
.
AppendFloat
(
Min
(
)
.
Percentage
(
)
)
;
if
(
!
IsSingle
(
)
)
{
aOutString
.
Append
(
aDelim
)
;
aOutString
.
AppendFloat
(
Max
(
)
.
Percentage
(
)
)
;
}
}
static
StretchRange
FromScalar
(
ScalarType
aScalar
)
{
return
StretchRange
(
FontStretch
(
FontStretch
:
:
InternalType
(
aScalar
>
>
16
)
)
FontStretch
(
FontStretch
:
:
InternalType
(
aScalar
&
0xffff
)
)
)
;
}
}
;
class
SlantStyleRange
:
public
FontPropertyRange
<
FontSlantStyle
>
{
public
:
SlantStyleRange
(
FontSlantStyle
aMin
FontSlantStyle
aMax
)
:
FontPropertyRange
(
aMin
aMax
)
{
}
explicit
SlantStyleRange
(
FontSlantStyle
aStyle
)
:
FontPropertyRange
(
aStyle
)
{
}
SlantStyleRange
(
const
SlantStyleRange
&
aOther
)
=
default
;
void
ToString
(
nsACString
&
aOutString
const
char
*
aDelim
=
"
.
.
"
)
const
{
Min
(
)
.
ToString
(
aOutString
)
;
if
(
!
IsSingle
(
)
)
{
aOutString
.
Append
(
aDelim
)
;
Max
(
)
.
ToString
(
aOutString
)
;
}
}
static
SlantStyleRange
FromScalar
(
ScalarType
aScalar
)
{
return
SlantStyleRange
(
FontSlantStyle
(
FontSlantStyle
:
:
InternalType
(
aScalar
>
>
16
)
)
FontSlantStyle
(
FontSlantStyle
:
:
InternalType
(
aScalar
&
0xffff
)
)
)
;
}
}
;
}
#
endif
