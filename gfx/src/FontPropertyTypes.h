#
ifndef
GFX_FONT_PROPERTY_TYPES_H
#
define
GFX_FONT_PROPERTY_TYPES_H
#
include
<
cstdint
>
namespace
mozilla
{
class
FontFixedPointValue
{
public
:
FontFixedPointValue
(
)
=
default
;
FontFixedPointValue
(
const
FontFixedPointValue
&
aOther
)
=
default
;
explicit
FontFixedPointValue
(
int16_t
aValue
)
:
mEncoded
(
aValue
)
{
}
explicit
FontFixedPointValue
(
int32_t
aValue
)
:
mEncoded
(
aValue
)
{
}
explicit
FontFixedPointValue
(
float
aValue
)
:
mEncoded
(
int16_t
(
aValue
)
)
{
}
float
ToFloat
(
)
const
{
return
float
(
mEncoded
)
;
}
int16_t
ToIntRounded
(
)
const
{
return
mEncoded
;
}
bool
operator
=
=
(
const
FontFixedPointValue
&
aOther
)
const
{
return
mEncoded
=
=
aOther
.
mEncoded
;
}
bool
operator
!
=
(
const
FontFixedPointValue
&
aOther
)
const
{
return
mEncoded
!
=
aOther
.
mEncoded
;
}
bool
operator
<
(
const
FontFixedPointValue
&
aOther
)
const
{
return
mEncoded
<
aOther
.
mEncoded
;
}
bool
operator
<
=
(
const
FontFixedPointValue
&
aOther
)
const
{
return
mEncoded
<
=
aOther
.
mEncoded
;
}
bool
operator
>
=
(
const
FontFixedPointValue
&
aOther
)
const
{
return
mEncoded
>
=
aOther
.
mEncoded
;
}
bool
operator
>
(
const
FontFixedPointValue
&
aOther
)
const
{
return
mEncoded
>
aOther
.
mEncoded
;
}
int16_t
ForHash
(
)
const
{
return
mEncoded
;
}
protected
:
int16_t
mEncoded
;
}
;
class
FontWeight
:
public
FontFixedPointValue
{
public
:
FontWeight
(
)
=
default
;
FontWeight
(
const
FontWeight
&
aOther
)
=
default
;
explicit
FontWeight
(
int16_t
aValue
)
:
FontFixedPointValue
(
aValue
)
{
}
explicit
FontWeight
(
int32_t
aValue
)
:
FontFixedPointValue
(
aValue
)
{
}
explicit
FontWeight
(
float
aValue
)
:
FontFixedPointValue
(
int16_t
(
aValue
)
)
{
}
bool
operator
=
=
(
const
FontWeight
&
aOther
)
const
{
return
mEncoded
=
=
aOther
.
mEncoded
;
}
float
operator
-
(
const
FontWeight
&
aOther
)
const
{
return
this
-
>
ToFloat
(
)
-
aOther
.
ToFloat
(
)
;
}
static
FontWeight
Thin
(
)
{
return
FontWeight
{
100
}
;
}
static
FontWeight
Normal
(
)
{
return
FontWeight
{
400
}
;
}
static
FontWeight
Bold
(
)
{
return
FontWeight
{
700
}
;
}
}
;
}
#
endif
