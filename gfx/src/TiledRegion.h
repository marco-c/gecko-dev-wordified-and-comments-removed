#
ifndef
MOZILLA_GFX_TILEDREGION_H_
#
define
MOZILLA_GFX_TILEDREGION_H_
#
include
"
mozilla
/
ArrayView
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
<
utility
>
#
include
"
nsRegion
.
h
"
#
include
"
pixman
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
TiledRegionImpl
{
public
:
void
Clear
(
)
{
mRects
.
Clear
(
)
;
}
bool
AddRect
(
const
pixman_box32_t
&
aRect
)
;
bool
Intersects
(
const
pixman_box32_t
&
aRect
)
const
;
bool
Contains
(
const
pixman_box32_t
&
aRect
)
const
;
operator
ArrayView
<
pixman_box32_t
>
(
)
const
{
return
ArrayView
<
pixman_box32_t
>
(
mRects
)
;
}
private
:
nsTArray
<
pixman_box32_t
>
mRects
;
}
;
template
<
typename
RegionT
>
class
TiledRegion
{
public
:
typedef
typename
RegionT
:
:
RectType
RectT
;
TiledRegion
(
)
:
mCoversBounds
(
false
)
{
}
TiledRegion
(
const
TiledRegion
&
aOther
)
:
mBounds
(
aOther
.
mBounds
)
mImpl
(
aOther
.
mImpl
)
mCoversBounds
(
false
)
{
}
TiledRegion
(
TiledRegion
&
&
aOther
)
:
mBounds
(
aOther
.
mBounds
)
mImpl
(
std
:
:
move
(
aOther
.
mImpl
)
)
mCoversBounds
(
false
)
{
}
RegionT
GetRegion
(
)
const
{
if
(
mBounds
.
IsEmpty
(
)
)
{
return
RegionT
(
)
;
}
if
(
mCoversBounds
)
{
return
RegionT
(
mBounds
)
;
}
return
RegionT
(
mImpl
)
;
}
TiledRegion
&
operator
=
(
const
TiledRegion
&
aOther
)
{
if
(
&
aOther
!
=
this
)
{
mBounds
=
aOther
.
mBounds
;
mImpl
=
aOther
.
mImpl
;
mCoversBounds
=
aOther
.
mCoversBounds
;
}
return
*
this
;
}
void
Add
(
const
RectT
&
aRect
)
{
if
(
aRect
.
IsEmpty
(
)
)
{
return
;
}
Maybe
<
RectT
>
newBounds
=
mBounds
.
SafeUnion
(
aRect
)
;
if
(
!
newBounds
)
{
return
;
}
mBounds
=
newBounds
.
value
(
)
;
MOZ_ASSERT
(
!
mBounds
.
Overflows
(
)
)
;
if
(
mCoversBounds
)
{
return
;
}
if
(
!
mImpl
.
AddRect
(
RectToBox
(
aRect
)
)
)
{
FallBackToBounds
(
)
;
}
}
void
Add
(
const
RegionT
&
aRegion
)
{
Maybe
<
RectT
>
newBounds
=
mBounds
.
SafeUnion
(
aRegion
.
GetBounds
(
)
)
;
if
(
!
newBounds
)
{
return
;
}
mBounds
=
newBounds
.
value
(
)
;
MOZ_ASSERT
(
!
mBounds
.
Overflows
(
)
)
;
if
(
mCoversBounds
)
{
return
;
}
for
(
auto
iter
=
aRegion
.
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RectT
r
=
iter
.
Get
(
)
;
if
(
r
.
IsEmpty
(
)
|
|
r
.
Overflows
(
)
)
{
continue
;
}
if
(
!
mImpl
.
AddRect
(
RectToBox
(
r
)
)
)
{
FallBackToBounds
(
)
;
return
;
}
}
}
bool
IsEmpty
(
)
const
{
return
mBounds
.
IsEmpty
(
)
;
}
void
SetEmpty
(
)
{
mBounds
.
SetEmpty
(
)
;
mImpl
.
Clear
(
)
;
mCoversBounds
=
false
;
}
RectT
GetBounds
(
)
const
{
return
mBounds
;
}
bool
CoversBounds
(
)
const
{
return
mCoversBounds
;
}
bool
Intersects
(
const
RectT
&
aRect
)
const
{
if
(
aRect
.
IsEmpty
(
)
)
{
return
true
;
}
if
(
aRect
.
Overflows
(
)
|
|
!
mBounds
.
Intersects
(
aRect
)
)
{
return
false
;
}
if
(
mCoversBounds
)
{
return
true
;
}
return
mImpl
.
Intersects
(
RectToBox
(
aRect
)
)
;
}
bool
Contains
(
const
RectT
&
aRect
)
const
{
if
(
aRect
.
IsEmpty
(
)
)
{
return
true
;
}
if
(
aRect
.
Overflows
(
)
|
|
!
mBounds
.
Contains
(
aRect
)
)
{
return
false
;
}
if
(
mCoversBounds
)
{
return
true
;
}
return
mImpl
.
Contains
(
RectToBox
(
aRect
)
)
;
}
private
:
void
FallBackToBounds
(
)
{
mCoversBounds
=
true
;
mImpl
.
Clear
(
)
;
}
static
pixman_box32_t
RectToBox
(
const
RectT
&
aRect
)
{
MOZ_ASSERT
(
!
aRect
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
!
aRect
.
Overflows
(
)
)
;
return
{
aRect
.
X
(
)
aRect
.
Y
(
)
aRect
.
XMost
(
)
aRect
.
YMost
(
)
}
;
}
RectT
mBounds
;
TiledRegionImpl
mImpl
;
bool
mCoversBounds
;
}
;
typedef
TiledRegion
<
IntRegion
>
TiledIntRegion
;
}
}
#
endif
