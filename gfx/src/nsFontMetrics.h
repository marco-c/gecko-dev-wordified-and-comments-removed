#
ifndef
NSFONTMETRICS__H__
#
define
NSFONTMETRICS__H__
#
include
<
stdint
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsFont
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nscore
.
h
"
class
gfxContext
;
class
gfxFontGroup
;
class
gfxUserFontSet
;
class
gfxTextPerfMetrics
;
class
nsPresContext
;
class
nsAtom
;
struct
nsBoundingMetrics
;
namespace
mozilla
{
namespace
gfx
{
class
DrawTarget
;
}
}
class
nsFontMetrics
final
{
public
:
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
enum
FontOrientation
{
eHorizontal
eVertical
}
;
struct
MOZ_STACK_CLASS
Params
{
nsAtom
*
language
=
nullptr
;
bool
explicitLanguage
=
false
;
FontOrientation
orientation
=
eHorizontal
;
gfxUserFontSet
*
userFontSet
=
nullptr
;
gfxTextPerfMetrics
*
textPerf
=
nullptr
;
gfxFontFeatureValueSet
*
featureValueLookup
=
nullptr
;
}
;
nsFontMetrics
(
const
nsFont
&
aFont
const
Params
&
aParams
nsPresContext
*
aContext
)
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
nsFontMetrics
)
void
Destroy
(
)
;
nscoord
XHeight
(
)
;
nscoord
CapHeight
(
)
;
nscoord
SuperscriptOffset
(
)
;
nscoord
SubscriptOffset
(
)
;
void
GetStrikeout
(
nscoord
&
aOffset
nscoord
&
aSize
)
;
void
GetUnderline
(
nscoord
&
aOffset
nscoord
&
aSize
)
;
nscoord
InternalLeading
(
)
;
nscoord
ExternalLeading
(
)
;
nscoord
EmHeight
(
)
;
nscoord
EmAscent
(
)
;
nscoord
EmDescent
(
)
;
nscoord
MaxHeight
(
)
;
nscoord
MaxAscent
(
)
;
nscoord
MaxDescent
(
)
;
nscoord
MaxAdvance
(
)
;
nscoord
AveCharWidth
(
)
;
nscoord
SpaceWidth
(
)
;
const
nsFont
&
Font
(
)
const
{
return
mFont
;
}
nsAtom
*
Language
(
)
const
{
return
mLanguage
;
}
FontOrientation
Orientation
(
)
const
{
return
mOrientation
;
}
int32_t
GetMaxStringLength
(
)
;
nscoord
GetWidth
(
const
char
*
aString
uint32_t
aLength
DrawTarget
*
aDrawTarget
)
;
nscoord
GetWidth
(
const
char16_t
*
aString
uint32_t
aLength
DrawTarget
*
aDrawTarget
)
;
void
DrawString
(
const
char
*
aString
uint32_t
aLength
nscoord
aX
nscoord
aY
gfxContext
*
aContext
)
;
void
DrawString
(
const
char16_t
*
aString
uint32_t
aLength
nscoord
aX
nscoord
aY
gfxContext
*
aContext
DrawTarget
*
aTextRunConstructionDrawTarget
)
;
nsBoundingMetrics
GetBoundingMetrics
(
const
char16_t
*
aString
uint32_t
aLength
DrawTarget
*
aDrawTarget
)
;
nsBoundingMetrics
GetInkBoundsForInkOverflow
(
const
char16_t
*
aString
uint32_t
aLength
DrawTarget
*
aDrawTarget
)
;
void
SetTextRunRTL
(
bool
aIsRTL
)
{
mTextRunRTL
=
aIsRTL
;
}
bool
GetTextRunRTL
(
)
const
{
return
mTextRunRTL
;
}
void
SetVertical
(
bool
aVertical
)
{
mVertical
=
aVertical
;
}
bool
GetVertical
(
)
const
{
return
mVertical
;
}
void
SetTextOrientation
(
mozilla
:
:
StyleTextOrientation
aTextOrientation
)
{
mTextOrientation
=
aTextOrientation
;
}
mozilla
:
:
StyleTextOrientation
GetTextOrientation
(
)
const
{
return
mTextOrientation
;
}
bool
ExplicitLanguage
(
)
const
{
return
mExplicitLanguage
;
}
gfxFontGroup
*
GetThebesFontGroup
(
)
const
{
return
mFontGroup
;
}
gfxUserFontSet
*
GetUserFontSet
(
)
const
;
int32_t
AppUnitsPerDevPixel
(
)
const
{
return
mP2A
;
}
private
:
~
nsFontMetrics
(
)
;
nsFont
mFont
;
RefPtr
<
gfxFontGroup
>
mFontGroup
;
RefPtr
<
nsAtom
>
mLanguage
;
nsPresContext
*
MOZ_NON_OWNING_REF
mPresContext
;
int32_t
mP2A
;
FontOrientation
mOrientation
;
bool
mExplicitLanguage
;
bool
mTextRunRTL
;
bool
mVertical
;
mozilla
:
:
StyleTextOrientation
mTextOrientation
;
}
;
#
endif
