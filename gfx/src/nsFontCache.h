#
ifndef
_NS_FONTCACHE_H_
#
define
_NS_FONTCACHE_H_
#
include
<
stdint
.
h
>
#
include
<
sys
/
types
.
h
>
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsFontMetrics
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
class
gfxUserFontSet
;
class
nsAtom
;
class
nsPresContext
;
struct
nsFont
;
class
nsFontCache
final
:
public
nsIObserver
{
public
:
nsFontCache
(
)
:
mContext
(
nullptr
)
{
}
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIOBSERVER
void
Init
(
nsPresContext
*
aContext
)
;
void
Destroy
(
)
;
already_AddRefed
<
nsFontMetrics
>
GetMetricsFor
(
const
nsFont
&
aFont
const
nsFontMetrics
:
:
Params
&
aParams
)
;
void
FontMetricsDeleted
(
const
nsFontMetrics
*
aFontMetrics
)
;
void
Compact
(
)
;
void
Flush
(
int32_t
aFlushCount
=
-
1
)
;
void
UpdateUserFonts
(
gfxUserFontSet
*
aUserFontSet
)
;
protected
:
static
const
int32_t
kMaxCacheEntries
=
128
;
~
nsFontCache
(
)
=
default
;
nsPresContext
*
mContext
;
RefPtr
<
nsAtom
>
mLocaleLanguage
;
AutoTArray
<
nsFontMetrics
*
kMaxCacheEntries
*
2
>
mFontMetrics
;
bool
mFlushPending
=
false
;
class
FlushFontMetricsTask
:
public
mozilla
:
:
Runnable
{
public
:
explicit
FlushFontMetricsTask
(
nsFontCache
*
aCache
)
:
mozilla
:
:
Runnable
(
"
FlushFontMetricsTask
"
)
mCache
(
aCache
)
{
}
NS_IMETHOD
Run
(
)
override
{
mCache
-
>
Flush
(
mCache
-
>
mFontMetrics
.
Length
(
)
-
kMaxCacheEntries
/
2
)
;
mCache
-
>
mFlushPending
=
false
;
return
NS_OK
;
}
private
:
RefPtr
<
nsFontCache
>
mCache
;
}
;
}
;
#
endif
