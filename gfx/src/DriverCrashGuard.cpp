#
include
"
DriverCrashGuard
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
ifdef
MOZ_CRASHREPORTER
#
include
"
nsExceptionHandler
.
h
"
#
endif
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
namespace
mozilla
{
namespace
gfx
{
bool
DriverCrashGuard
:
:
sEnvironmentHasBeenUpdated
=
false
;
DriverCrashGuard
:
:
DriverCrashGuard
(
)
:
mIsChromeProcess
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_Default
)
{
if
(
!
mIsChromeProcess
)
{
return
;
}
if
(
!
InitLockFilePath
(
)
)
{
gfxCriticalError
(
CriticalLog
:
:
DefaultOptions
(
false
)
)
<
<
"
Failed
to
create
the
graphics
startup
lockfile
.
"
;
return
;
}
if
(
RecoverFromDriverInitCrash
(
)
)
{
gfxCriticalError
(
CriticalLog
:
:
DefaultOptions
(
false
)
)
<
<
"
Recovered
from
graphics
driver
startup
crash
;
acceleration
disabled
.
"
;
return
;
}
if
(
UpdateEnvironment
(
)
|
|
sEnvironmentHasBeenUpdated
)
{
AllowDriverInitAttempt
(
)
;
sEnvironmentHasBeenUpdated
=
true
;
return
;
}
RecordTelemetry
(
TelemetryState
:
:
Okay
)
;
}
DriverCrashGuard
:
:
~
DriverCrashGuard
(
)
{
if
(
mLockFile
)
{
mLockFile
-
>
Remove
(
false
)
;
}
if
(
gfxPrefs
:
:
DriverInitStatus
(
)
=
=
int32_t
(
DriverInitStatus
:
:
Attempting
)
)
{
gfxPrefs
:
:
SetDriverInitStatus
(
int32_t
(
DriverInitStatus
:
:
Okay
)
)
;
#
ifdef
MOZ_CRASHREPORTER
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
GraphicsStartupTest
"
)
NS_LITERAL_CSTRING
(
"
"
)
)
;
#
endif
}
}
bool
DriverCrashGuard
:
:
DisableAcceleration
(
)
const
{
return
gfxPrefs
:
:
DriverInitStatus
(
)
=
=
int32_t
(
DriverInitStatus
:
:
Recovered
)
;
}
bool
DriverCrashGuard
:
:
InitLockFilePath
(
)
{
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_LOCAL_50_DIR
getter_AddRefs
(
mLockFile
)
)
;
if
(
!
mLockFile
)
{
return
false
;
}
if
(
!
NS_SUCCEEDED
(
mLockFile
-
>
AppendNative
(
NS_LITERAL_CSTRING
(
"
gfxinit
.
lock
"
)
)
)
)
{
return
false
;
}
return
true
;
}
void
DriverCrashGuard
:
:
AllowDriverInitAttempt
(
)
{
FILE
*
fp
;
if
(
!
NS_SUCCEEDED
(
mLockFile
-
>
OpenANSIFileDesc
(
"
w
"
&
fp
)
)
)
{
return
;
}
fclose
(
fp
)
;
gfxPrefs
:
:
SetDriverInitStatus
(
int32_t
(
DriverInitStatus
:
:
Attempting
)
)
;
FlushPreferences
(
)
;
RecordTelemetry
(
TelemetryState
:
:
EnvironmentChanged
)
;
#
ifdef
MOZ_CRASHREPORTER
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
GraphicsStartupTest
"
)
NS_LITERAL_CSTRING
(
"
1
"
)
)
;
#
endif
}
bool
DriverCrashGuard
:
:
RecoverFromDriverInitCrash
(
)
{
bool
exists
;
if
(
mLockFile
&
&
NS_SUCCEEDED
(
mLockFile
-
>
Exists
(
&
exists
)
)
&
&
exists
)
{
gfxPrefs
:
:
SetDriverInitStatus
(
int32_t
(
DriverInitStatus
:
:
Recovered
)
)
;
UpdateEnvironment
(
)
;
FlushPreferences
(
)
;
RecordTelemetry
(
TelemetryState
:
:
RecoveredFromCrash
)
;
return
true
;
}
if
(
gfxPrefs
:
:
DriverInitStatus
(
)
=
=
int32_t
(
DriverInitStatus
:
:
Recovered
)
)
{
RecordTelemetry
(
TelemetryState
:
:
AccelerationDisabled
)
;
return
true
;
}
return
false
;
}
bool
DriverCrashGuard
:
:
UpdateEnvironment
(
)
{
mGfxInfo
=
services
:
:
GetGfxInfo
(
)
;
bool
changed
=
false
;
if
(
mGfxInfo
)
{
nsString
value
;
mGfxInfo
-
>
GetAdapterDriverVersion
(
value
)
;
changed
|
=
CheckAndUpdatePref
(
"
gfx
.
driver
-
init
.
driverVersion
"
value
)
;
mGfxInfo
-
>
GetAdapterDeviceID
(
value
)
;
changed
|
=
CheckAndUpdatePref
(
"
gfx
.
driver
-
init
.
deviceID
"
value
)
;
#
if
defined
(
XP_WIN
)
bool
d2dEnabled
=
gfxPrefs
:
:
Direct2DForceEnabled
(
)
|
|
(
!
gfxPrefs
:
:
Direct2DDisabled
(
)
&
&
FeatureEnabled
(
nsIGfxInfo
:
:
FEATURE_DIRECT2D
)
)
;
changed
|
=
CheckAndUpdateBoolPref
(
"
gfx
.
driver
-
init
.
feature
-
d2d
"
d2dEnabled
)
;
bool
d3d11Enabled
=
!
gfxPrefs
:
:
LayersPreferD3D9
(
)
;
if
(
!
FeatureEnabled
(
nsIGfxInfo
:
:
FEATURE_DIRECT3D_11_LAYERS
)
)
{
d3d11Enabled
=
false
;
}
changed
|
=
CheckAndUpdateBoolPref
(
"
gfx
.
driver
-
init
.
feature
-
d3d11
"
d3d11Enabled
)
;
#
endif
}
changed
|
=
CheckAndUpdatePref
(
"
gfx
.
driver
-
init
.
appVersion
"
NS_LITERAL_STRING
(
MOZ_APP_VERSION
)
)
;
changed
|
=
(
gfxPrefs
:
:
DriverInitStatus
(
)
=
=
int32_t
(
DriverInitStatus
:
:
None
)
)
;
return
changed
;
}
bool
DriverCrashGuard
:
:
FeatureEnabled
(
int
aFeature
)
{
int32_t
status
;
if
(
!
NS_SUCCEEDED
(
mGfxInfo
-
>
GetFeatureStatus
(
aFeature
&
status
)
)
)
{
return
false
;
}
return
status
=
=
nsIGfxInfo
:
:
FEATURE_STATUS_OK
;
}
bool
DriverCrashGuard
:
:
CheckAndUpdateBoolPref
(
const
char
*
aPrefName
bool
aCurrentValue
)
{
bool
oldValue
;
if
(
NS_SUCCEEDED
(
Preferences
:
:
GetBool
(
aPrefName
&
oldValue
)
)
&
&
oldValue
=
=
aCurrentValue
)
{
return
false
;
}
Preferences
:
:
SetBool
(
aPrefName
aCurrentValue
)
;
return
true
;
}
bool
DriverCrashGuard
:
:
CheckAndUpdatePref
(
const
char
*
aPrefName
const
nsAString
&
aCurrentValue
)
{
nsAdoptingString
oldValue
=
Preferences
:
:
GetString
(
aPrefName
)
;
if
(
oldValue
=
=
aCurrentValue
)
{
return
false
;
}
Preferences
:
:
SetString
(
aPrefName
aCurrentValue
)
;
return
true
;
}
void
DriverCrashGuard
:
:
FlushPreferences
(
)
{
if
(
nsIPrefService
*
prefService
=
Preferences
:
:
GetService
(
)
)
{
prefService
-
>
SavePrefFile
(
nullptr
)
;
}
}
void
DriverCrashGuard
:
:
RecordTelemetry
(
TelemetryState
aState
)
{
if
(
XRE_GetProcessType
(
)
!
=
GeckoProcessType_Default
)
{
return
;
}
static
bool
sTelemetryStateRecorded
=
false
;
if
(
sTelemetryStateRecorded
)
{
return
;
}
Telemetry
:
:
Accumulate
(
Telemetry
:
:
GRAPHICS_DRIVER_STARTUP_TEST
int32_t
(
aState
)
)
;
sTelemetryStateRecorded
=
true
;
}
}
}
