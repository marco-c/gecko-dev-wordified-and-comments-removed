#
include
"
DriverCrashGuard
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
nsDirectoryServiceUtils
.
h
"
#
ifdef
MOZ_CRASHREPORTER
#
include
"
nsExceptionHandler
.
h
"
#
endif
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
gfx
/
Logging
.
h
"
#
include
"
mozilla
/
dom
/
ContentChild
.
h
"
namespace
mozilla
{
namespace
gfx
{
static
const
size_t
NUM_CRASH_GUARD_TYPES
=
size_t
(
CrashGuardType
:
:
NUM_TYPES
)
;
static
const
char
*
sCrashGuardNames
[
NUM_CRASH_GUARD_TYPES
]
=
{
"
d3d11layers
"
"
d3d9video
"
"
glcontext
"
}
;
DriverCrashGuard
:
:
DriverCrashGuard
(
CrashGuardType
aType
dom
:
:
ContentParent
*
aContentParent
)
:
mType
(
aType
)
mMode
(
aContentParent
?
Mode
:
:
Proxy
:
Mode
:
:
Normal
)
mInitialized
(
false
)
mGuardActivated
(
false
)
mCrashDetected
(
false
)
{
MOZ_ASSERT
(
mType
<
CrashGuardType
:
:
NUM_TYPES
)
;
mStatusPref
.
Assign
(
"
gfx
.
crash
-
guard
.
status
.
"
)
;
mStatusPref
.
Append
(
sCrashGuardNames
[
size_t
(
mType
)
]
)
;
}
void
DriverCrashGuard
:
:
InitializeIfNeeded
(
)
{
if
(
mInitialized
)
{
return
;
}
mInitialized
=
true
;
Initialize
(
)
;
}
void
DriverCrashGuard
:
:
Initialize
(
)
{
#
ifdef
NIGHTLY_BUILD
return
;
#
endif
if
(
!
NS_IsMainThread
(
)
)
{
return
;
}
static
bool
sAllGuardsDisabled
=
!
!
PR_GetEnv
(
"
MOZ_DISABLE_CRASH_GUARD
"
)
;
if
(
sAllGuardsDisabled
)
{
return
;
}
mGfxInfo
=
services
:
:
GetGfxInfo
(
)
;
if
(
XRE_IsContentProcess
(
)
)
{
dom
:
:
ContentChild
*
cc
=
dom
:
:
ContentChild
:
:
GetSingleton
(
)
;
cc
-
>
SendBeginDriverCrashGuard
(
uint32_t
(
mType
)
&
mCrashDetected
)
;
if
(
mCrashDetected
)
{
LogFeatureDisabled
(
)
;
return
;
}
ActivateGuard
(
)
;
return
;
}
if
(
RecoverFromCrash
(
)
)
{
mCrashDetected
=
true
;
return
;
}
if
(
CheckOrRefreshEnvironment
(
)
|
|
(
mMode
=
=
Mode
:
:
Proxy
&
&
GetStatus
(
)
!
=
DriverInitStatus
:
:
Crashed
)
)
{
ActivateGuard
(
)
;
return
;
}
if
(
GetStatus
(
)
=
=
DriverInitStatus
:
:
Crashed
)
{
mCrashDetected
=
true
;
LogFeatureDisabled
(
)
;
}
}
DriverCrashGuard
:
:
~
DriverCrashGuard
(
)
{
if
(
!
mGuardActivated
)
{
return
;
}
if
(
XRE_IsParentProcess
(
)
)
{
if
(
mGuardFile
)
{
mGuardFile
-
>
Remove
(
false
)
;
}
if
(
GetStatus
(
)
!
=
DriverInitStatus
:
:
Crashed
)
{
SetStatus
(
DriverInitStatus
:
:
Okay
)
;
}
}
else
{
dom
:
:
ContentChild
:
:
GetSingleton
(
)
-
>
SendEndDriverCrashGuard
(
uint32_t
(
mType
)
)
;
}
#
ifdef
MOZ_CRASHREPORTER
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
GraphicsStartupTest
"
)
NS_LITERAL_CSTRING
(
"
"
)
)
;
#
endif
}
bool
DriverCrashGuard
:
:
Crashed
(
)
{
InitializeIfNeeded
(
)
;
return
mCrashDetected
;
}
nsCOMPtr
<
nsIFile
>
DriverCrashGuard
:
:
GetGuardFile
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
nsCString
filename
;
filename
.
Assign
(
sCrashGuardNames
[
size_t
(
mType
)
]
)
;
filename
.
Append
(
"
.
guard
"
)
;
nsCOMPtr
<
nsIFile
>
file
;
NS_GetSpecialDirectory
(
NS_APP_USER_PROFILE_LOCAL_50_DIR
getter_AddRefs
(
file
)
)
;
if
(
!
file
)
{
return
nullptr
;
}
if
(
!
NS_SUCCEEDED
(
file
-
>
AppendNative
(
filename
)
)
)
{
return
nullptr
;
}
return
file
;
}
void
DriverCrashGuard
:
:
ActivateGuard
(
)
{
mGuardActivated
=
true
;
#
ifdef
MOZ_CRASHREPORTER
if
(
mMode
!
=
Mode
:
:
Proxy
)
{
CrashReporter
:
:
AnnotateCrashReport
(
NS_LITERAL_CSTRING
(
"
GraphicsStartupTest
"
)
NS_LITERAL_CSTRING
(
"
1
"
)
)
;
}
#
endif
if
(
XRE_IsContentProcess
(
)
)
{
return
;
}
SetStatus
(
DriverInitStatus
:
:
Attempting
)
;
if
(
mMode
!
=
Mode
:
:
Proxy
)
{
FlushPreferences
(
)
;
FILE
*
fp
=
nullptr
;
mGuardFile
=
GetGuardFile
(
)
;
if
(
!
mGuardFile
|
|
!
NS_SUCCEEDED
(
mGuardFile
-
>
OpenANSIFileDesc
(
"
w
"
&
fp
)
)
)
{
return
;
}
fclose
(
fp
)
;
}
}
void
DriverCrashGuard
:
:
NotifyCrashed
(
)
{
CheckOrRefreshEnvironment
(
)
;
SetStatus
(
DriverInitStatus
:
:
Crashed
)
;
FlushPreferences
(
)
;
LogCrashRecovery
(
)
;
}
bool
DriverCrashGuard
:
:
RecoverFromCrash
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
nsCOMPtr
<
nsIFile
>
file
=
GetGuardFile
(
)
;
bool
exists
;
if
(
(
file
&
&
NS_SUCCEEDED
(
file
-
>
Exists
(
&
exists
)
)
&
&
exists
)
|
|
(
GetStatus
(
)
=
=
DriverInitStatus
:
:
Attempting
)
)
{
if
(
file
)
{
file
-
>
Remove
(
false
)
;
}
NotifyCrashed
(
)
;
return
true
;
}
return
false
;
}
bool
DriverCrashGuard
:
:
CheckOrRefreshEnvironment
(
)
{
static
bool
sBaseInfoChanged
=
false
;
static
bool
sBaseInfoChecked
=
false
;
if
(
!
sBaseInfoChecked
)
{
sBaseInfoChecked
=
true
;
sBaseInfoChanged
=
UpdateBaseEnvironment
(
)
;
}
return
UpdateEnvironment
(
)
|
|
sBaseInfoChanged
|
|
GetStatus
(
)
=
=
DriverInitStatus
:
:
Unknown
;
}
bool
DriverCrashGuard
:
:
UpdateBaseEnvironment
(
)
{
bool
changed
=
false
;
if
(
mGfxInfo
)
{
nsString
value
;
mGfxInfo
-
>
GetAdapterDriverVersion
(
value
)
;
changed
|
=
CheckAndUpdatePref
(
"
driverVersion
"
value
)
;
mGfxInfo
-
>
GetAdapterDeviceID
(
value
)
;
changed
|
=
CheckAndUpdatePref
(
"
deviceID
"
value
)
;
}
changed
|
=
CheckAndUpdatePref
(
"
appVersion
"
NS_LITERAL_STRING
(
MOZ_APP_VERSION
)
)
;
return
changed
;
}
bool
DriverCrashGuard
:
:
FeatureEnabled
(
int
aFeature
bool
aDefault
)
{
if
(
!
mGfxInfo
)
{
return
aDefault
;
}
int32_t
status
;
if
(
!
NS_SUCCEEDED
(
mGfxInfo
-
>
GetFeatureStatus
(
aFeature
&
status
)
)
)
{
return
false
;
}
return
status
=
=
nsIGfxInfo
:
:
FEATURE_STATUS_OK
;
}
bool
DriverCrashGuard
:
:
CheckAndUpdateBoolPref
(
const
char
*
aPrefName
bool
aCurrentValue
)
{
std
:
:
string
pref
=
GetFullPrefName
(
aPrefName
)
;
bool
oldValue
;
if
(
NS_SUCCEEDED
(
Preferences
:
:
GetBool
(
pref
.
c_str
(
)
&
oldValue
)
)
&
&
oldValue
=
=
aCurrentValue
)
{
return
false
;
}
Preferences
:
:
SetBool
(
pref
.
c_str
(
)
aCurrentValue
)
;
return
true
;
}
bool
DriverCrashGuard
:
:
CheckAndUpdatePref
(
const
char
*
aPrefName
const
nsAString
&
aCurrentValue
)
{
std
:
:
string
pref
=
GetFullPrefName
(
aPrefName
)
;
nsAdoptingString
oldValue
=
Preferences
:
:
GetString
(
pref
.
c_str
(
)
)
;
if
(
oldValue
=
=
aCurrentValue
)
{
return
false
;
}
Preferences
:
:
SetString
(
pref
.
c_str
(
)
aCurrentValue
)
;
return
true
;
}
std
:
:
string
DriverCrashGuard
:
:
GetFullPrefName
(
const
char
*
aPref
)
{
return
std
:
:
string
(
"
gfx
.
crash
-
guard
.
"
)
+
std
:
:
string
(
sCrashGuardNames
[
uint32_t
(
mType
)
]
)
+
std
:
:
string
(
"
.
"
)
+
std
:
:
string
(
aPref
)
;
}
DriverInitStatus
DriverCrashGuard
:
:
GetStatus
(
)
const
{
return
(
DriverInitStatus
)
Preferences
:
:
GetInt
(
mStatusPref
.
get
(
)
0
)
;
}
void
DriverCrashGuard
:
:
SetStatus
(
DriverInitStatus
aStatus
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
Preferences
:
:
SetInt
(
mStatusPref
.
get
(
)
int32_t
(
aStatus
)
)
;
}
void
DriverCrashGuard
:
:
FlushPreferences
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
nsIPrefService
*
prefService
=
Preferences
:
:
GetService
(
)
)
{
prefService
-
>
SavePrefFile
(
nullptr
)
;
}
}
D3D11LayersCrashGuard
:
:
D3D11LayersCrashGuard
(
dom
:
:
ContentParent
*
aContentParent
)
:
DriverCrashGuard
(
CrashGuardType
:
:
D3D11Layers
aContentParent
)
{
}
void
D3D11LayersCrashGuard
:
:
Initialize
(
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
DriverCrashGuard
:
:
Initialize
(
)
;
RecordTelemetry
(
TelemetryState
:
:
Okay
)
;
}
bool
D3D11LayersCrashGuard
:
:
UpdateEnvironment
(
)
{
static
bool
checked
=
false
;
static
bool
changed
=
false
;
if
(
checked
)
{
return
changed
;
}
checked
=
true
;
#
if
defined
(
XP_WIN
)
bool
d2dEnabled
=
gfxPrefs
:
:
Direct2DForceEnabled
(
)
|
|
(
!
gfxPrefs
:
:
Direct2DDisabled
(
)
&
&
FeatureEnabled
(
nsIGfxInfo
:
:
FEATURE_DIRECT2D
)
)
;
changed
|
=
CheckAndUpdateBoolPref
(
"
feature
-
d2d
"
d2dEnabled
)
;
bool
d3d11Enabled
=
!
gfxPrefs
:
:
LayersPreferD3D9
(
)
;
if
(
!
FeatureEnabled
(
nsIGfxInfo
:
:
FEATURE_DIRECT3D_11_LAYERS
)
)
{
d3d11Enabled
=
false
;
}
changed
|
=
CheckAndUpdateBoolPref
(
"
feature
-
d3d11
"
d3d11Enabled
)
;
#
endif
if
(
!
changed
)
{
return
false
;
}
RecordTelemetry
(
TelemetryState
:
:
EnvironmentChanged
)
;
return
true
;
}
void
D3D11LayersCrashGuard
:
:
LogCrashRecovery
(
)
{
RecordTelemetry
(
TelemetryState
:
:
RecoveredFromCrash
)
;
gfxCriticalError
(
CriticalLog
:
:
DefaultOptions
(
false
)
)
<
<
"
D3D11
layers
just
crashed
;
D3D11
will
be
disabled
.
"
;
}
void
D3D11LayersCrashGuard
:
:
LogFeatureDisabled
(
)
{
RecordTelemetry
(
TelemetryState
:
:
FeatureDisabled
)
;
gfxCriticalError
(
CriticalLog
:
:
DefaultOptions
(
false
)
)
<
<
"
D3D11
layers
disabled
due
to
a
prior
crash
.
"
;
}
void
D3D11LayersCrashGuard
:
:
RecordTelemetry
(
TelemetryState
aState
)
{
if
(
!
XRE_IsParentProcess
(
)
)
{
return
;
}
static
bool
sTelemetryStateRecorded
=
false
;
if
(
sTelemetryStateRecorded
)
{
return
;
}
Telemetry
:
:
Accumulate
(
Telemetry
:
:
GRAPHICS_DRIVER_STARTUP_TEST
int32_t
(
aState
)
)
;
sTelemetryStateRecorded
=
true
;
}
D3D9VideoCrashGuard
:
:
D3D9VideoCrashGuard
(
dom
:
:
ContentParent
*
aContentParent
)
:
DriverCrashGuard
(
CrashGuardType
:
:
D3D9Video
aContentParent
)
{
}
bool
D3D9VideoCrashGuard
:
:
UpdateEnvironment
(
)
{
return
false
;
}
void
D3D9VideoCrashGuard
:
:
LogCrashRecovery
(
)
{
gfxCriticalError
(
CriticalLog
:
:
DefaultOptions
(
false
)
)
<
<
"
DXVA2D3D9
just
crashed
;
hardware
video
will
be
disabled
.
"
;
}
void
D3D9VideoCrashGuard
:
:
LogFeatureDisabled
(
)
{
gfxCriticalError
(
CriticalLog
:
:
DefaultOptions
(
false
)
)
<
<
"
DXVA2D3D9
video
decoding
is
disabled
due
to
a
previous
crash
.
"
;
}
GLContextCrashGuard
:
:
GLContextCrashGuard
(
dom
:
:
ContentParent
*
aContentParent
)
:
DriverCrashGuard
(
CrashGuardType
:
:
GLContext
aContentParent
)
{
}
void
GLContextCrashGuard
:
:
Initialize
(
)
{
if
(
XRE_IsContentProcess
(
)
)
{
return
;
}
DriverCrashGuard
:
:
Initialize
(
)
;
}
bool
GLContextCrashGuard
:
:
UpdateEnvironment
(
)
{
static
bool
checked
=
false
;
static
bool
changed
=
false
;
if
(
checked
)
{
return
changed
;
}
checked
=
true
;
#
if
defined
(
XP_WIN
)
changed
|
=
CheckAndUpdateBoolPref
(
"
gfx
.
driver
-
init
.
webgl
-
angle
-
force
-
d3d11
"
gfxPrefs
:
:
WebGLANGLEForceD3D11
(
)
)
;
changed
|
=
CheckAndUpdateBoolPref
(
"
gfx
.
driver
-
init
.
webgl
-
angle
-
try
-
d3d11
"
gfxPrefs
:
:
WebGLANGLETryD3D11
(
)
)
;
changed
|
=
CheckAndUpdateBoolPref
(
"
gfx
.
driver
-
init
.
webgl
-
angle
-
force
-
warp
"
gfxPrefs
:
:
WebGLANGLEForceWARP
(
)
)
;
changed
|
=
CheckAndUpdateBoolPref
(
"
gfx
.
driver
-
init
.
webgl
-
angle
"
FeatureEnabled
(
nsIGfxInfo
:
:
FEATURE_WEBGL_ANGLE
false
)
)
;
changed
|
=
CheckAndUpdateBoolPref
(
"
gfx
.
driver
-
init
.
direct3d11
-
angle
"
FeatureEnabled
(
nsIGfxInfo
:
:
FEATURE_DIRECT3D_11_ANGLE
false
)
)
;
#
endif
return
changed
;
}
void
GLContextCrashGuard
:
:
LogCrashRecovery
(
)
{
gfxCriticalError
(
CriticalLog
:
:
DefaultOptions
(
false
)
)
<
<
"
GLContext
just
crashed
and
is
now
disabled
.
"
;
}
void
GLContextCrashGuard
:
:
LogFeatureDisabled
(
)
{
gfxCriticalError
(
CriticalLog
:
:
DefaultOptions
(
false
)
)
<
<
"
GLContext
is
disabled
due
to
a
previous
crash
.
"
;
}
}
}
