#
include
"
nsIServiceManager
.
h
"
#
include
"
nsTextFormatter
.
h
"
#
include
"
nsUnicodeMappingUtil
.
h
"
#
include
"
nsUnicodeFontMappingMac
.
h
"
#
include
"
nsDeviceContextMac
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsCRT
.
h
"
nsUnicodeMappingUtil
*
nsUnicodeMappingUtil
:
:
gSingleton
=
nsnull
;
#
ifdef
DEBUG
static
int
gUnicodeMappingUtilCount
=
0
;
#
endif
int
PR_CALLBACK
nsUnicodeMappingUtil
:
:
PrefChangedCallback
(
const
char
*
aPrefName
void
*
instance_data
)
{
nsUnicodeMappingUtil
:
:
GetSingleton
(
)
-
>
Reset
(
)
;
return
0
;
}
nsUnicodeMappingUtil
:
:
nsUnicodeMappingUtil
(
)
{
Init
(
)
;
MOZ_COUNT_CTOR
(
nsUnicodeMappingUtil
)
;
#
ifdef
DEBUG
+
+
gUnicodeMappingUtilCount
;
NS_ASSERTION
(
gUnicodeMappingUtilCount
=
=
1
"
not
singleton
"
)
;
#
endif
}
void
nsUnicodeMappingUtil
:
:
Reset
(
)
{
CleanUp
(
)
;
Init
(
)
;
}
void
nsUnicodeMappingUtil
:
:
Init
(
)
{
InitGenericFontMapping
(
)
;
InitFromPref
(
)
;
InitScriptFontMapping
(
)
;
InitBlockToScriptMapping
(
)
;
}
void
nsUnicodeMappingUtil
:
:
CleanUp
(
)
{
for
(
int
i
=
0
;
i
<
smPseudoTotalScripts
;
i
+
+
)
{
for
(
int
j
=
0
;
j
<
5
;
j
+
+
)
{
if
(
mGenericFontMapping
[
i
]
[
j
]
)
delete
mGenericFontMapping
[
i
]
[
j
]
;
}
}
}
nsUnicodeMappingUtil
:
:
~
nsUnicodeMappingUtil
(
)
{
CleanUp
(
)
;
#
ifdef
DEBUG
-
-
gUnicodeMappingUtilCount
;
#
endif
mPref
-
>
UnregisterCallback
(
"
font
.
name
.
"
nsUnicodeMappingUtil
:
:
PrefChangedCallback
(
void
*
)
nsnull
)
;
MOZ_COUNT_DTOR
(
nsUnicodeMappingUtil
)
;
}
void
nsUnicodeMappingUtil
:
:
InitGenericFontMapping
(
)
{
for
(
int
i
=
0
;
i
<
smPseudoTotalScripts
;
i
+
+
)
for
(
int
j
=
0
;
j
<
5
;
j
+
+
)
mGenericFontMapping
[
i
]
[
j
]
=
nsnull
;
mGenericFontMapping
[
smRoman
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Times
"
)
)
;
mGenericFontMapping
[
smRoman
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Helvetica
"
)
)
;
mGenericFontMapping
[
smRoman
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Courier
"
)
)
;
mGenericFontMapping
[
smRoman
]
[
kCursive
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Zapf
Chancery
"
)
)
;
mGenericFontMapping
[
smRoman
]
[
kFantasy
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
New
Century
Schlbk
"
)
)
;
static
PRUnichar
jfontname1
[
]
=
{
0x672C
0x660E
0x671D
0x2212
0xFF2D
0x0000
}
;
static
PRUnichar
jfontname2
[
]
=
{
0x4E38
0x30B4
0x30B7
0x30C3
0x30AF
0x2212
0xFF2D
0x0000
}
;
static
PRUnichar
jfontname3
[
]
=
{
0x004F
0x0073
0x0061
0x006B
0x0061
0x2212
0x7B49
0x5E45
0x0000
}
;
mGenericFontMapping
[
smJapanese
]
[
kSerif
]
=
new
nsAutoString
(
jfontname1
)
;
mGenericFontMapping
[
smJapanese
]
[
kSansSerif
]
=
new
nsAutoString
(
jfontname2
)
;
mGenericFontMapping
[
smJapanese
]
[
kMonospace
]
=
new
nsAutoString
(
jfontname3
)
;
mGenericFontMapping
[
smTradChinese
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Apple
LiSung
Light
"
)
)
;
mGenericFontMapping
[
smTradChinese
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Apple
LiGothic
Medium
"
)
)
;
mGenericFontMapping
[
smTradChinese
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Apple
LiGothic
Medium
"
)
)
;
mGenericFontMapping
[
smKorean
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
AppleMyungjo
"
)
)
;
mGenericFontMapping
[
smKorean
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
AppleGothic
"
)
)
;
mGenericFontMapping
[
smKorean
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
AppleGothic
"
)
)
;
mGenericFontMapping
[
smArabic
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Lucida
Grande
"
)
)
;
mGenericFontMapping
[
smArabic
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Lucida
Grande
"
)
)
;
mGenericFontMapping
[
smArabic
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Monaco
"
)
)
;
mGenericFontMapping
[
smHebrew
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Lucida
Grande
"
)
)
;
mGenericFontMapping
[
smHebrew
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Lucida
Grande
"
)
)
;
mGenericFontMapping
[
smHebrew
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Monaco
"
)
)
;
mGenericFontMapping
[
smCyrillic
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Latinski
"
)
)
;
mGenericFontMapping
[
smCyrillic
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Pryamoy
Prop
"
)
)
;
mGenericFontMapping
[
smCyrillic
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
APC
Courier
"
)
)
;
mGenericFontMapping
[
smDevanagari
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Devanagari
MT
"
)
)
;
mGenericFontMapping
[
smDevanagari
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Devanagari
MT
"
)
)
;
mGenericFontMapping
[
smDevanagari
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Devanagari
MT
"
)
)
;
mGenericFontMapping
[
smGurmukhi
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Gurmukhi
MT
"
)
)
;
mGenericFontMapping
[
smGurmukhi
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Gurmukhi
MT
"
)
)
;
mGenericFontMapping
[
smGurmukhi
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Gurmukhi
MT
"
)
)
;
mGenericFontMapping
[
smGujarati
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Gujarati
MT
"
)
)
;
mGenericFontMapping
[
smGujarati
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Gujarati
MT
"
)
)
;
mGenericFontMapping
[
smGujarati
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Gujarati
MT
"
)
)
;
mGenericFontMapping
[
smThai
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Thonburi
"
)
)
;
mGenericFontMapping
[
smThai
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Krungthep
"
)
)
;
mGenericFontMapping
[
smThai
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Ayuthaya
"
)
)
;
mGenericFontMapping
[
smSimpChinese
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Song
"
)
)
;
mGenericFontMapping
[
smSimpChinese
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Hei
"
)
)
;
mGenericFontMapping
[
smSimpChinese
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Hei
"
)
)
;
mGenericFontMapping
[
smCentralEuroRoman
]
[
kSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Times
CE
"
)
)
;
mGenericFontMapping
[
smCentralEuroRoman
]
[
kSansSerif
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Helvetica
CE
"
)
)
;
mGenericFontMapping
[
smCentralEuroRoman
]
[
kMonospace
]
=
new
nsAutoString
(
NS_LITERAL_STRING
(
"
Courier
CE
"
)
)
;
}
ScriptCode
nsUnicodeMappingUtil
:
:
MapLangGroupToScriptCode
(
const
char
*
aLangGroup
)
{
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
western
"
)
)
{
return
smRoman
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
central
-
euro
"
)
)
{
return
smCentralEuroRoman
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
cyrillic
"
)
)
{
return
smCyrillic
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
el
"
)
)
{
return
smGreek
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
tr
"
)
)
{
return
smRoman
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
he
"
)
)
{
return
smHebrew
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
ar
"
)
)
{
return
smArabic
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
baltic
"
)
)
{
return
smRoman
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
th
"
)
)
{
return
smThai
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
ja
"
)
)
{
return
smJapanese
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
zh
-
CN
"
)
)
{
return
smSimpChinese
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
ko
"
)
)
{
return
smKorean
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
zh
-
TW
"
)
)
{
return
smTradChinese
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
zh
-
HK
"
)
)
{
return
smTradChinese
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
devanag
"
)
)
{
return
smDevanagari
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
tamil
"
)
)
{
return
smTamil
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
beng
"
)
)
{
return
smBengali
;
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
armn
"
)
)
{
return
smArmenian
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
geor
"
)
)
{
return
smGeorgian
;
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
gujr
"
)
)
{
return
smGujarati
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
guru
"
)
)
{
return
smGurmukhi
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
mlym
"
)
)
{
return
smMalayalam
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
khmr
"
)
)
{
return
smKhmer
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
ethi
"
)
)
{
return
smEthiopic
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
cans
"
)
)
{
return
(
smPseudoUnicode
)
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
unicode
"
)
)
{
return
(
smPseudoUnicode
)
;
}
if
(
0
=
=
nsCRT
:
:
strcmp
(
aLangGroup
"
x
-
user
-
def
"
)
)
{
return
(
smPseudoUserDef
)
;
}
{
return
smRoman
;
}
}
#
define
FACESIZE
255
/
/
font
name
is
Str255
in
Mac
script
code
void
PR_CALLBACK
nsUnicodeMappingUtil
:
:
PrefEnumCallback
(
const
char
*
aName
void
*
aClosure
)
{
nsUnicodeMappingUtil
*
Self
=
(
nsUnicodeMappingUtil
*
)
aClosure
;
nsCAutoString
curPrefName
(
aName
)
;
PRInt32
p1
=
curPrefName
.
RFindChar
(
'
.
'
)
;
if
(
-
1
=
=
p1
)
return
;
PRInt32
p2
=
curPrefName
.
RFindChar
(
'
.
'
p1
-
1
)
;
if
(
-
1
=
=
p1
)
return
;
nsCAutoString
genName
(
"
"
)
;
nsCAutoString
langGroup
(
"
"
)
;
curPrefName
.
Mid
(
langGroup
p1
+
1
curPrefName
.
Length
(
)
-
p1
-
1
)
;
curPrefName
.
Mid
(
genName
p2
+
1
p1
-
p2
-
1
)
;
ScriptCode
script
=
Self
-
>
MapLangGroupToScriptCode
(
langGroup
.
get
(
)
)
;
if
(
script
>
=
(
smPseudoTotalScripts
)
)
{
return
;
}
if
(
(
script
=
=
smRoman
)
&
&
!
langGroup
.
Equals
(
nsCAutoString
(
"
x
-
western
"
)
)
)
{
return
;
}
nsString
genNameString
;
genNameString
.
AssignWithConversion
(
genName
)
;
nsGenericFontNameType
type
=
Self
-
>
MapGenericFontNameType
(
genNameString
)
;
if
(
type
>
=
kUnknownGenericFontName
)
return
;
char
*
valueInUTF8
=
nsnull
;
Self
-
>
mPref
-
>
CopyCharPref
(
aName
&
valueInUTF8
)
;
if
(
!
valueInUTF8
)
return
;
if
(
!
*
valueInUTF8
)
{
Recycle
(
valueInUTF8
)
;
return
;
}
PRUnichar
valueInUCS2
[
FACESIZE
]
=
{
0
}
;
PRUnichar
format
[
]
=
{
'
%
'
'
s
'
0
}
;
PRUint32
n
=
nsTextFormatter
:
:
snprintf
(
valueInUCS2
FACESIZE
format
valueInUTF8
)
;
Recycle
(
valueInUTF8
)
;
if
(
n
=
=
0
)
return
;
nsString
*
fontname
=
new
nsAutoString
(
valueInUCS2
)
;
if
(
nsnull
=
=
fontname
)
return
;
if
(
Self
-
>
mGenericFontMapping
[
script
]
[
type
]
)
delete
Self
-
>
mGenericFontMapping
[
script
]
[
type
]
;
Self
-
>
mGenericFontMapping
[
script
]
[
type
]
=
fontname
;
#
ifdef
DEBUG_ftang_font
char
*
utf8
=
ToNewUTF8String
(
*
fontname
)
;
printf
(
"
font
%
d
%
d
%
s
=
%
s
\
n
"
script
type
aName
utf8
)
;
if
(
utf8
)
Recycle
(
utf8
)
;
#
endif
}
void
nsUnicodeMappingUtil
:
:
InitFromPref
(
)
{
if
(
!
mPref
)
{
mPref
=
do_GetService
(
NS_PREF_CONTRACTID
)
;
if
(
!
mPref
)
return
;
mPref
-
>
RegisterCallback
(
"
font
.
name
.
"
nsUnicodeMappingUtil
:
:
PrefChangedCallback
(
void
*
)
nsnull
)
;
}
mPref
-
>
EnumerateChildren
(
"
font
.
name
.
"
nsUnicodeMappingUtil
:
:
PrefEnumCallback
this
)
;
}
void
nsUnicodeMappingUtil
:
:
InitScriptFontMapping
(
)
{
for
(
ScriptCode
script
=
0
;
script
<
smPseudoTotalScripts
;
script
+
+
)
{
mScriptFontMapping
[
script
]
=
BAD_FONT_NUM
;
short
fontNum
;
if
(
(
smPseudoUnicode
=
=
script
)
|
|
(
smPseudoUserDef
=
=
script
)
)
{
char
*
theNeededPreference
;
if
(
smPseudoUnicode
=
=
script
)
theNeededPreference
=
"
font
.
name
.
serif
.
x
-
unicode
"
;
else
theNeededPreference
=
"
font
.
name
.
serif
.
x
-
user
-
def
"
;
char
*
valueInUTF8
=
nsnull
;
mPref
-
>
CopyCharPref
(
theNeededPreference
&
valueInUTF8
)
;
if
(
valueInUTF8
)
{
if
(
!
*
valueInUTF8
)
Recycle
(
valueInUTF8
)
;
else
{
PRUnichar
valueInUCS2
[
FACESIZE
]
=
{
0
}
;
PRUnichar
format
[
]
=
{
'
%
'
'
s
'
0
}
;
PRUint32
n
=
nsTextFormatter
:
:
snprintf
(
valueInUCS2
FACESIZE
format
valueInUTF8
)
;
Recycle
(
valueInUTF8
)
;
if
(
n
!
=
0
)
{
nsString
*
fontname
=
new
nsAutoString
(
valueInUCS2
)
;
if
(
nsnull
!
=
fontname
)
{
short
fontID
=
0
;
if
(
nsDeviceContextMac
:
:
GetMacFontNumber
(
*
fontname
fontID
)
)
mScriptFontMapping
[
script
]
=
fontID
;
delete
fontname
;
}
}
}
}
}
else
{
long
fondsize
=
:
:
GetScriptVariable
(
script
smScriptPrefFondSize
)
;
if
(
!
fondsize
)
fondsize
=
:
:
GetScriptVariable
(
smUnicodeScript
smScriptPrefFondSize
)
;
if
(
(
fondsize
)
&
&
(
(
fondsize
>
>
16
)
)
)
{
fontNum
=
(
fondsize
>
>
16
)
;
mScriptFontMapping
[
script
]
=
fontNum
;
}
}
}
}
void
nsUnicodeMappingUtil
:
:
InitBlockToScriptMapping
(
)
{
static
ScriptCode
prebuildMapping
[
kUnicodeBlockSize
]
=
{
smGreek
smCyrillic
smArmenian
smHebrew
smArabic
smDevanagari
smBengali
smGurmukhi
smGujarati
smOriya
smTamil
smTelugu
smKannada
smMalayalam
smThai
smLao
smTibetan
smGeorgian
smKorean
smTradChinese
smEthiopic
smKhmer
smPseudoUnicode
smPseudoUserDef
smRoman
smRoman
smJapanese
smJapanese
smJapanese
smRoman
}
;
for
(
PRUint32
i
=
0
;
i
<
kUnicodeBlockSize
;
i
+
+
)
{
mBlockToScriptMapping
[
i
]
=
prebuildMapping
[
i
]
;
}
}
nsGenericFontNameType
nsUnicodeMappingUtil
:
:
MapGenericFontNameType
(
const
nsString
&
aGenericName
)
{
if
(
aGenericName
.
LowerCaseEqualsLiteral
(
"
serif
"
)
)
return
kSerif
;
if
(
aGenericName
.
LowerCaseEqualsLiteral
(
"
sans
-
serif
"
)
)
return
kSansSerif
;
if
(
aGenericName
.
LowerCaseEqualsLiteral
(
"
monospace
"
)
)
return
kMonospace
;
if
(
aGenericName
.
LowerCaseEqualsLiteral
(
"
-
moz
-
fixed
"
)
)
return
kMonospace
;
if
(
aGenericName
.
LowerCaseEqualsLiteral
(
"
cursive
"
)
)
return
kCursive
;
if
(
aGenericName
.
LowerCaseEqualsLiteral
(
"
fantasy
"
)
)
return
kFantasy
;
return
kUnknownGenericFontName
;
}
nsUnicodeMappingUtil
*
nsUnicodeMappingUtil
:
:
GetSingleton
(
)
{
if
(
!
gSingleton
)
gSingleton
=
new
nsUnicodeMappingUtil
(
)
;
return
gSingleton
;
}
void
nsUnicodeMappingUtil
:
:
FreeSingleton
(
)
{
delete
gSingleton
;
gSingleton
=
nsnull
;
}
