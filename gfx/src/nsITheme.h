#
ifndef
nsITheme_h_
#
define
nsITheme_h_
#
include
"
nsISupports
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
Units
.
h
"
struct
nsRect
;
class
gfxContext
;
class
nsAttrValue
;
class
nsPresContext
;
class
nsDeviceContext
;
class
nsIFrame
;
class
nsAtom
;
class
nsIWidget
;
namespace
mozilla
{
class
ComputedStyle
;
namespace
layers
{
class
StackingContextHelper
;
class
WebRenderLayerManager
;
}
namespace
wr
{
class
DisplayListBuilder
;
class
IpcResourceUpdateQueue
;
}
}
#
define
NS_ITHEME_IID
\
{
0x7329f760
0x08cb
0x450f
\
{
0x82
0x25
0xda
0xe7
0x29
0x09
0x6d
0xec
}
}
#
define
NS_THEMERENDERER_CID
\
{
0x0ae05515
0xcf7a
0x45a8
\
{
0x9e
0x02
0x65
0x56
0xde
0x76
0x85
0xb1
}
}
class
nsITheme
:
public
nsISupports
{
protected
:
using
LayoutDeviceIntMargin
=
mozilla
:
:
LayoutDeviceIntMargin
;
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_ITHEME_IID
)
NS_IMETHOD
DrawWidgetBackground
(
gfxContext
*
aContext
nsIFrame
*
aFrame
uint8_t
aWidgetType
const
nsRect
&
aRect
const
nsRect
&
aDirtyRect
)
=
0
;
virtual
nscolor
GetWidgetAutoColor
(
mozilla
:
:
ComputedStyle
*
aStyle
uint8_t
aWidgetType
)
{
return
NS_RGB
(
0
0
0
)
;
}
virtual
bool
CreateWebRenderCommandsForWidget
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
mozilla
:
:
layers
:
:
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aManager
nsIFrame
*
aFrame
uint8_t
aWidgetType
const
nsRect
&
aRect
)
{
return
false
;
}
virtual
MOZ_MUST_USE
LayoutDeviceIntMargin
GetWidgetBorder
(
nsDeviceContext
*
aContext
nsIFrame
*
aFrame
uint8_t
aWidgetType
)
=
0
;
virtual
bool
GetWidgetPadding
(
nsDeviceContext
*
aContext
nsIFrame
*
aFrame
uint8_t
aWidgetType
LayoutDeviceIntMargin
*
aResult
)
=
0
;
virtual
bool
GetWidgetOverflow
(
nsDeviceContext
*
aContext
nsIFrame
*
aFrame
uint8_t
aWidgetType
nsRect
*
aOverflowRect
)
{
return
false
;
}
NS_IMETHOD
GetMinimumWidgetSize
(
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
uint8_t
aWidgetType
mozilla
:
:
LayoutDeviceIntSize
*
aResult
bool
*
aIsOverridable
)
=
0
;
enum
Transparency
{
eOpaque
=
0
eTransparent
eUnknownTransparency
}
;
virtual
Transparency
GetWidgetTransparency
(
nsIFrame
*
aFrame
uint8_t
aWidgetType
)
{
return
eUnknownTransparency
;
}
NS_IMETHOD
WidgetStateChanged
(
nsIFrame
*
aFrame
uint8_t
aWidgetType
nsAtom
*
aAttribute
bool
*
aShouldRepaint
const
nsAttrValue
*
aOldValue
)
=
0
;
NS_IMETHOD
ThemeChanged
(
)
=
0
;
virtual
bool
WidgetAppearanceDependsOnWindowFocus
(
uint8_t
aWidgetType
)
{
return
false
;
}
virtual
bool
NeedToClearBackgroundBehindWidget
(
nsIFrame
*
aFrame
uint8_t
aWidgetType
)
{
return
false
;
}
typedef
uint8_t
ThemeGeometryType
;
enum
{
eThemeGeometryTypeUnknown
=
0
}
;
virtual
ThemeGeometryType
ThemeGeometryTypeForWidget
(
nsIFrame
*
aFrame
uint8_t
aWidgetType
)
{
return
eThemeGeometryTypeUnknown
;
}
virtual
bool
ThemeSupportsWidget
(
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
uint8_t
aWidgetType
)
=
0
;
virtual
bool
WidgetIsContainer
(
uint8_t
aWidgetType
)
=
0
;
virtual
bool
ThemeDrawsFocusForWidget
(
uint8_t
aWidgetType
)
=
0
;
virtual
bool
ThemeNeedsComboboxDropmarker
(
)
=
0
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsITheme
NS_ITHEME_IID
)
extern
nsresult
NS_NewNativeTheme
(
nsISupports
*
aOuter
REFNSIID
aIID
void
*
*
aResult
)
;
#
endif
