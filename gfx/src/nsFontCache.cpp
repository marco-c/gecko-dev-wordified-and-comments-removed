#
include
"
nsFontCache
.
h
"
#
include
"
gfxTextRun
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
nsCRT
.
h
"
using
mozilla
:
:
services
:
:
GetObserverService
;
NS_IMPL_ISUPPORTS
(
nsFontCache
nsIObserver
)
void
nsFontCache
:
:
Init
(
nsPresContext
*
aContext
)
{
mContext
=
aContext
;
nsCOMPtr
<
nsIObserverService
>
obs
=
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
AddObserver
(
this
"
memory
-
pressure
"
false
)
;
}
mLocaleLanguage
=
nsLanguageAtomService
:
:
GetService
(
)
-
>
GetLocaleLanguage
(
)
;
if
(
!
mLocaleLanguage
)
{
mLocaleLanguage
=
NS_Atomize
(
"
x
-
western
"
)
;
}
}
void
nsFontCache
:
:
Destroy
(
)
{
nsCOMPtr
<
nsIObserverService
>
obs
=
GetObserverService
(
)
;
if
(
obs
)
{
obs
-
>
RemoveObserver
(
this
"
memory
-
pressure
"
)
;
}
Flush
(
)
;
}
NS_IMETHODIMP
nsFontCache
:
:
Observe
(
nsISupports
*
const
char
*
aTopic
const
char16_t
*
)
{
if
(
!
nsCRT
:
:
strcmp
(
aTopic
"
memory
-
pressure
"
)
)
{
Compact
(
)
;
}
return
NS_OK
;
}
already_AddRefed
<
nsFontMetrics
>
nsFontCache
:
:
GetMetricsFor
(
const
nsFont
&
aFont
const
nsFontMetrics
:
:
Params
&
aParams
)
{
nsAtom
*
language
=
aParams
.
language
&
&
!
aParams
.
language
-
>
IsEmpty
(
)
?
aParams
.
language
:
mLocaleLanguage
.
get
(
)
;
const
int32_t
n
=
mFontMetrics
.
Length
(
)
-
1
;
for
(
int32_t
i
=
n
;
i
>
=
0
;
-
-
i
)
{
nsFontMetrics
*
fm
=
mFontMetrics
[
i
]
;
if
(
fm
-
>
Font
(
)
.
Equals
(
aFont
)
&
&
fm
-
>
GetUserFontSet
(
)
=
=
aParams
.
userFontSet
&
&
fm
-
>
Language
(
)
=
=
language
&
&
fm
-
>
Orientation
(
)
=
=
aParams
.
orientation
&
&
fm
-
>
ExplicitLanguage
(
)
=
=
aParams
.
explicitLanguage
)
{
if
(
i
!
=
n
)
{
mFontMetrics
.
RemoveElementAt
(
i
)
;
mFontMetrics
.
AppendElement
(
fm
)
;
}
fm
-
>
GetThebesFontGroup
(
)
-
>
UpdateUserFonts
(
)
;
return
do_AddRef
(
fm
)
;
}
}
if
(
n
>
=
kMaxCacheEntries
-
1
&
&
!
mFlushPending
)
{
if
(
NS_IsMainThread
(
)
)
{
Flush
(
mFontMetrics
.
Length
(
)
-
kMaxCacheEntries
/
2
)
;
}
else
{
mFlushPending
=
true
;
nsCOMPtr
<
nsIRunnable
>
flushTask
=
new
FlushFontMetricsTask
(
this
)
;
MOZ_ALWAYS_SUCCEEDS
(
NS_DispatchToMainThread
(
flushTask
)
)
;
}
}
nsFontMetrics
:
:
Params
params
=
aParams
;
params
.
language
=
language
;
RefPtr
<
nsFontMetrics
>
fm
=
new
nsFontMetrics
(
aFont
params
mContext
)
;
mFontMetrics
.
AppendElement
(
do_AddRef
(
fm
)
.
take
(
)
)
;
return
fm
.
forget
(
)
;
}
void
nsFontCache
:
:
UpdateUserFonts
(
gfxUserFontSet
*
aUserFontSet
)
{
for
(
nsFontMetrics
*
fm
:
mFontMetrics
)
{
gfxFontGroup
*
fg
=
fm
-
>
GetThebesFontGroup
(
)
;
if
(
fg
-
>
GetUserFontSet
(
)
=
=
aUserFontSet
)
{
fg
-
>
UpdateUserFonts
(
)
;
}
}
}
void
nsFontCache
:
:
FontMetricsDeleted
(
const
nsFontMetrics
*
aFontMetrics
)
{
mFontMetrics
.
RemoveElement
(
aFontMetrics
)
;
}
void
nsFontCache
:
:
Compact
(
)
{
for
(
int32_t
i
=
mFontMetrics
.
Length
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
nsFontMetrics
*
fm
=
mFontMetrics
[
i
]
;
nsFontMetrics
*
oldfm
=
fm
;
NS_RELEASE
(
fm
)
;
if
(
mFontMetrics
.
IndexOf
(
oldfm
)
!
=
mFontMetrics
.
NoIndex
)
{
NS_ADDREF
(
oldfm
)
;
}
}
}
void
nsFontCache
:
:
Flush
(
int32_t
aFlushCount
)
{
int32_t
n
=
aFlushCount
<
0
?
mFontMetrics
.
Length
(
)
:
std
:
:
min
<
int32_t
>
(
aFlushCount
mFontMetrics
.
Length
(
)
)
;
for
(
int32_t
i
=
n
-
1
;
i
>
=
0
;
-
-
i
)
{
nsFontMetrics
*
fm
=
mFontMetrics
[
i
]
;
fm
-
>
Destroy
(
)
;
NS_RELEASE
(
fm
)
;
}
mFontMetrics
.
RemoveElementsAt
(
0
n
)
;
}
