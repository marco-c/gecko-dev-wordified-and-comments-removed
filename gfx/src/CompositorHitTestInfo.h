#
ifndef
MOZILLA_GFX_COMPOSITORHITTESTINFO_H_
#
define
MOZILLA_GFX_COMPOSITORHITTESTINFO_H_
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
mozilla
/
EnumTypeTraits
.
h
"
namespace
mozilla
{
namespace
gfx
{
enum
class
CompositorHitTestFlags
:
uint8_t
{
eVisibleToHitTest
=
0
eDispatchToContent
eTouchActionPanXDisabled
eTouchActionPanYDisabled
eTouchActionPinchZoomDisabled
eTouchActionDoubleTapZoomDisabled
eScrollbar
eScrollbarThumb
eScrollbarVertical
eRequiresTargetConfirmation
}
;
using
CompositorHitTestInfo
=
EnumSet
<
CompositorHitTestFlags
uint32_t
>
;
constexpr
CompositorHitTestInfo
CompositorHitTestInvisibleToHit
;
constexpr
CompositorHitTestInfo
CompositorHitTestTouchActionMask
(
CompositorHitTestFlags
:
:
eTouchActionPanXDisabled
CompositorHitTestFlags
:
:
eTouchActionPanYDisabled
CompositorHitTestFlags
:
:
eTouchActionPinchZoomDisabled
CompositorHitTestFlags
:
:
eTouchActionDoubleTapZoomDisabled
)
;
}
template
<
>
struct
MaxEnumValue
<
:
:
mozilla
:
:
gfx
:
:
CompositorHitTestFlags
>
{
static
constexpr
unsigned
int
value
=
static_cast
<
unsigned
int
>
(
gfx
:
:
CompositorHitTestFlags
:
:
eRequiresTargetConfirmation
)
;
}
;
namespace
gfx
{
template
<
int
N
>
static
constexpr
bool
DoesCompositorHitTestInfoFitIntoBits
(
)
{
if
(
MaxEnumValue
<
CompositorHitTestInfo
:
:
valueType
>
:
:
value
<
N
)
{
return
true
;
}
return
false
;
}
}
}
#
endif
