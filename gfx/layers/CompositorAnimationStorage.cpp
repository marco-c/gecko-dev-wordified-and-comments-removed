#
include
"
CompositorAnimationStorage
.
h
"
#
include
"
AnimationHelper
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
nsDeviceContext
.
h
"
#
include
"
nsDisplayList
.
h
"
namespace
mozilla
{
namespace
layers
{
void
CompositorAnimationStorage
:
:
Clear
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mAnimatedValues
.
Clear
(
)
;
mAnimations
.
clear
(
)
;
}
void
CompositorAnimationStorage
:
:
ClearById
(
const
uint64_t
&
aId
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mAnimatedValues
.
Remove
(
aId
)
;
mAnimations
.
erase
(
aId
)
;
}
AnimatedValue
*
CompositorAnimationStorage
:
:
GetAnimatedValue
(
const
uint64_t
&
aId
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
mAnimatedValues
.
Get
(
aId
)
;
}
OMTAValue
CompositorAnimationStorage
:
:
GetOMTAValue
(
const
uint64_t
&
aId
)
const
{
OMTAValue
omtaValue
=
mozilla
:
:
null_t
(
)
;
auto
animatedValue
=
GetAnimatedValue
(
aId
)
;
if
(
!
animatedValue
)
{
return
omtaValue
;
}
animatedValue
-
>
Value
(
)
.
match
(
[
&
]
(
const
AnimationTransform
&
aTransform
)
{
gfx
:
:
Matrix4x4
transform
=
aTransform
.
mFrameTransform
;
const
TransformData
&
data
=
aTransform
.
mData
;
float
scale
=
data
.
appUnitsPerDevPixel
(
)
;
gfx
:
:
Point3D
transformOrigin
=
data
.
transformOrigin
(
)
;
transform
.
ChangeBasis
(
-
transformOrigin
)
;
double
devPerCss
=
double
(
scale
)
/
double
(
AppUnitsPerCSSPixel
(
)
)
;
transform
.
_41
*
=
devPerCss
;
transform
.
_42
*
=
devPerCss
;
transform
.
_43
*
=
devPerCss
;
omtaValue
=
transform
;
}
[
&
]
(
const
float
&
aOpacity
)
{
omtaValue
=
aOpacity
;
}
[
&
]
(
const
nscolor
&
aColor
)
{
omtaValue
=
aColor
;
}
)
;
return
omtaValue
;
}
void
CompositorAnimationStorage
:
:
SetAnimatedValue
(
uint64_t
aId
AnimatedValue
*
aPreviousValue
gfx
:
:
Matrix4x4
&
&
aTransformInDevSpace
gfx
:
:
Matrix4x4
&
&
aFrameTransform
const
TransformData
&
aData
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
aPreviousValue
)
{
MOZ_ASSERT
(
!
mAnimatedValues
.
Contains
(
aId
)
)
;
mAnimatedValues
.
Put
(
aId
MakeUnique
<
AnimatedValue
>
(
std
:
:
move
(
aTransformInDevSpace
)
std
:
:
move
(
aFrameTransform
)
aData
)
)
;
return
;
}
MOZ_ASSERT
(
aPreviousValue
-
>
Is
<
AnimationTransform
>
(
)
)
;
MOZ_ASSERT
(
aPreviousValue
=
=
GetAnimatedValue
(
aId
)
)
;
aPreviousValue
-
>
SetTransform
(
std
:
:
move
(
aTransformInDevSpace
)
std
:
:
move
(
aFrameTransform
)
aData
)
;
}
void
CompositorAnimationStorage
:
:
SetAnimatedValue
(
uint64_t
aId
AnimatedValue
*
aPreviousValue
nscolor
aColor
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
aPreviousValue
)
{
MOZ_ASSERT
(
!
mAnimatedValues
.
Contains
(
aId
)
)
;
mAnimatedValues
.
Put
(
aId
MakeUnique
<
AnimatedValue
>
(
aColor
)
)
;
return
;
}
MOZ_ASSERT
(
aPreviousValue
-
>
Is
<
nscolor
>
(
)
)
;
MOZ_ASSERT
(
aPreviousValue
=
=
GetAnimatedValue
(
aId
)
)
;
aPreviousValue
-
>
SetColor
(
aColor
)
;
}
void
CompositorAnimationStorage
:
:
SetAnimatedValue
(
uint64_t
aId
AnimatedValue
*
aPreviousValue
float
aOpacity
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
aPreviousValue
)
{
MOZ_ASSERT
(
!
mAnimatedValues
.
Contains
(
aId
)
)
;
mAnimatedValues
.
Put
(
aId
MakeUnique
<
AnimatedValue
>
(
aOpacity
)
)
;
return
;
}
MOZ_ASSERT
(
aPreviousValue
-
>
Is
<
float
>
(
)
)
;
MOZ_ASSERT
(
aPreviousValue
=
=
GetAnimatedValue
(
aId
)
)
;
aPreviousValue
-
>
SetOpacity
(
aOpacity
)
;
}
void
CompositorAnimationStorage
:
:
SetAnimations
(
uint64_t
aId
const
AnimationArray
&
aValue
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mAnimations
[
aId
]
=
std
:
:
make_unique
<
AnimationStorageData
>
(
AnimationHelper
:
:
ExtractAnimations
(
aValue
)
)
;
}
}
}
