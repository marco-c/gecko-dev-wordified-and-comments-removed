#
include
"
CompositorAnimationStorage
.
h
"
#
include
"
AnimationHelper
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
nsDeviceContext
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
TreeTraversal
.
h
"
namespace
mozilla
{
namespace
layers
{
void
CompositorAnimationStorage
:
:
Clear
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mAnimatedValues
.
Clear
(
)
;
mAnimations
.
clear
(
)
;
}
void
CompositorAnimationStorage
:
:
ClearById
(
const
uint64_t
&
aId
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mAnimatedValues
.
Remove
(
aId
)
;
mAnimations
.
erase
(
aId
)
;
}
AnimatedValue
*
CompositorAnimationStorage
:
:
GetAnimatedValue
(
const
uint64_t
&
aId
)
const
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
return
mAnimatedValues
.
Get
(
aId
)
;
}
OMTAValue
CompositorAnimationStorage
:
:
GetOMTAValue
(
const
uint64_t
&
aId
)
const
{
OMTAValue
omtaValue
=
mozilla
:
:
null_t
(
)
;
auto
animatedValue
=
GetAnimatedValue
(
aId
)
;
if
(
!
animatedValue
)
{
return
omtaValue
;
}
animatedValue
-
>
Value
(
)
.
match
(
[
&
]
(
const
AnimationTransform
&
aTransform
)
{
gfx
:
:
Matrix4x4
transform
=
aTransform
.
mFrameTransform
;
const
TransformData
&
data
=
aTransform
.
mData
;
float
scale
=
data
.
appUnitsPerDevPixel
(
)
;
gfx
:
:
Point3D
transformOrigin
=
data
.
transformOrigin
(
)
;
transform
.
ChangeBasis
(
-
transformOrigin
)
;
double
devPerCss
=
double
(
scale
)
/
double
(
AppUnitsPerCSSPixel
(
)
)
;
transform
.
_41
*
=
devPerCss
;
transform
.
_42
*
=
devPerCss
;
transform
.
_43
*
=
devPerCss
;
omtaValue
=
transform
;
}
[
&
]
(
const
float
&
aOpacity
)
{
omtaValue
=
aOpacity
;
}
[
&
]
(
const
nscolor
&
aColor
)
{
omtaValue
=
aColor
;
}
)
;
return
omtaValue
;
}
void
CompositorAnimationStorage
:
:
SetAnimatedValue
(
uint64_t
aId
AnimatedValue
*
aPreviousValue
gfx
:
:
Matrix4x4
&
&
aTransformInDevSpace
gfx
:
:
Matrix4x4
&
&
aFrameTransform
const
TransformData
&
aData
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
aPreviousValue
)
{
MOZ_ASSERT
(
!
mAnimatedValues
.
Contains
(
aId
)
)
;
mAnimatedValues
.
Put
(
aId
MakeUnique
<
AnimatedValue
>
(
std
:
:
move
(
aTransformInDevSpace
)
std
:
:
move
(
aFrameTransform
)
aData
)
)
;
return
;
}
MOZ_ASSERT
(
aPreviousValue
-
>
Is
<
AnimationTransform
>
(
)
)
;
MOZ_ASSERT
(
aPreviousValue
=
=
GetAnimatedValue
(
aId
)
)
;
aPreviousValue
-
>
SetTransform
(
std
:
:
move
(
aTransformInDevSpace
)
std
:
:
move
(
aFrameTransform
)
aData
)
;
}
void
CompositorAnimationStorage
:
:
SetAnimatedValue
(
uint64_t
aId
AnimatedValue
*
aPreviousValue
nscolor
aColor
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
aPreviousValue
)
{
MOZ_ASSERT
(
!
mAnimatedValues
.
Contains
(
aId
)
)
;
mAnimatedValues
.
Put
(
aId
MakeUnique
<
AnimatedValue
>
(
aColor
)
)
;
return
;
}
MOZ_ASSERT
(
aPreviousValue
-
>
Is
<
nscolor
>
(
)
)
;
MOZ_ASSERT
(
aPreviousValue
=
=
GetAnimatedValue
(
aId
)
)
;
aPreviousValue
-
>
SetColor
(
aColor
)
;
}
void
CompositorAnimationStorage
:
:
SetAnimatedValue
(
uint64_t
aId
AnimatedValue
*
aPreviousValue
float
aOpacity
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
aPreviousValue
)
{
MOZ_ASSERT
(
!
mAnimatedValues
.
Contains
(
aId
)
)
;
mAnimatedValues
.
Put
(
aId
MakeUnique
<
AnimatedValue
>
(
aOpacity
)
)
;
return
;
}
MOZ_ASSERT
(
aPreviousValue
-
>
Is
<
float
>
(
)
)
;
MOZ_ASSERT
(
aPreviousValue
=
=
GetAnimatedValue
(
aId
)
)
;
aPreviousValue
-
>
SetOpacity
(
aOpacity
)
;
}
void
CompositorAnimationStorage
:
:
SetAnimations
(
uint64_t
aId
const
AnimationArray
&
aValue
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
mAnimations
[
aId
]
=
std
:
:
make_unique
<
AnimationStorageData
>
(
AnimationHelper
:
:
ExtractAnimations
(
aValue
)
)
;
}
bool
CompositorAnimationStorage
:
:
SampleAnimations
(
TimeStamp
aPreviousFrameTime
TimeStamp
aCurrentFrameTime
)
{
bool
isAnimating
=
false
;
if
(
mAnimations
.
empty
(
)
)
{
return
isAnimating
;
}
for
(
const
auto
&
iter
:
mAnimations
)
{
const
auto
&
animationStorageData
=
iter
.
second
;
if
(
animationStorageData
-
>
mAnimation
.
IsEmpty
(
)
)
{
continue
;
}
isAnimating
=
true
;
AutoTArray
<
RefPtr
<
RawServoAnimationValue
>
1
>
animationValues
;
AnimatedValue
*
previousValue
=
GetAnimatedValue
(
iter
.
first
)
;
AnimationHelper
:
:
SampleResult
sampleResult
=
AnimationHelper
:
:
SampleAnimationForEachNode
(
aPreviousFrameTime
aCurrentFrameTime
previousValue
animationStorageData
-
>
mAnimation
animationValues
)
;
if
(
sampleResult
!
=
AnimationHelper
:
:
SampleResult
:
:
Sampled
)
{
continue
;
}
const
PropertyAnimationGroup
&
lastPropertyAnimationGroup
=
animationStorageData
-
>
mAnimation
.
LastElement
(
)
;
switch
(
lastPropertyAnimationGroup
.
mProperty
)
{
case
eCSSProperty_background_color
:
{
SetAnimatedValue
(
iter
.
first
previousValue
Servo_AnimationValue_GetColor
(
animationValues
[
0
]
NS_RGBA
(
0
0
0
0
)
)
)
;
break
;
}
case
eCSSProperty_opacity
:
{
MOZ_ASSERT
(
animationValues
.
Length
(
)
=
=
1
)
;
SetAnimatedValue
(
iter
.
first
previousValue
Servo_AnimationValue_GetOpacity
(
animationValues
[
0
]
)
)
;
break
;
}
case
eCSSProperty_rotate
:
case
eCSSProperty_scale
:
case
eCSSProperty_translate
:
case
eCSSProperty_transform
:
case
eCSSProperty_offset_path
:
case
eCSSProperty_offset_distance
:
case
eCSSProperty_offset_rotate
:
case
eCSSProperty_offset_anchor
:
{
MOZ_ASSERT
(
animationStorageData
-
>
mTransformData
)
;
const
TransformData
&
transformData
=
*
animationStorageData
-
>
mTransformData
;
MOZ_ASSERT
(
transformData
.
origin
(
)
=
=
nsPoint
(
)
)
;
gfx
:
:
Matrix4x4
transform
=
AnimationHelper
:
:
ServoAnimationValueToMatrix4x4
(
animationValues
transformData
animationStorageData
-
>
mCachedMotionPath
)
;
gfx
:
:
Matrix4x4
frameTransform
=
transform
;
transform
.
PostScale
(
transformData
.
inheritedXScale
(
)
transformData
.
inheritedYScale
(
)
1
)
;
SetAnimatedValue
(
iter
.
first
previousValue
std
:
:
move
(
transform
)
std
:
:
move
(
frameTransform
)
transformData
)
;
break
;
}
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unhandled
animated
property
"
)
;
}
}
return
isAnimating
;
}
WrAnimations
CompositorAnimationStorage
:
:
CollectWebRenderAnimations
(
)
const
{
WrAnimations
animations
;
for
(
auto
iter
=
mAnimatedValues
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
AnimatedValue
*
value
=
iter
.
UserData
(
)
;
value
-
>
Value
(
)
.
match
(
[
&
]
(
const
AnimationTransform
&
aTransform
)
{
animations
.
mTransformArrays
.
AppendElement
(
wr
:
:
ToWrTransformProperty
(
iter
.
Key
(
)
aTransform
.
mTransformInDevSpace
)
)
;
}
[
&
]
(
const
float
&
aOpacity
)
{
animations
.
mOpacityArrays
.
AppendElement
(
wr
:
:
ToWrOpacityProperty
(
iter
.
Key
(
)
aOpacity
)
)
;
}
[
&
]
(
const
nscolor
&
aColor
)
{
animations
.
mColorArrays
.
AppendElement
(
wr
:
:
ToWrColorProperty
(
iter
.
Key
(
)
ToDeviceColor
(
gfx
:
:
sRGBColor
:
:
FromABGR
(
aColor
)
)
)
)
;
}
)
;
}
return
animations
;
}
static
gfx
:
:
Matrix4x4
FrameTransformToTransformInDevice
(
const
gfx
:
:
Matrix4x4
&
aFrameTransform
Layer
*
aLayer
const
TransformData
&
aTransformData
)
{
gfx
:
:
Matrix4x4
transformInDevice
=
aFrameTransform
;
if
(
!
aLayer
-
>
GetParent
(
)
|
|
!
aLayer
-
>
GetParent
(
)
-
>
GetTransformIsPerspective
(
)
)
{
nsLayoutUtils
:
:
PostTranslate
(
transformInDevice
aTransformData
.
origin
(
)
aTransformData
.
appUnitsPerDevPixel
(
)
aLayer
-
>
GetContentFlags
(
)
&
Layer
:
:
CONTENT_SNAP_TO_GRID
)
;
}
if
(
ContainerLayer
*
c
=
aLayer
-
>
AsContainerLayer
(
)
)
{
transformInDevice
.
PostScale
(
c
-
>
GetInheritedXScale
(
)
c
-
>
GetInheritedYScale
(
)
1
)
;
}
return
transformInDevice
;
}
static
void
ApplyAnimatedValue
(
Layer
*
aLayer
CompositorAnimationStorage
*
aStorage
nsCSSPropertyID
aProperty
AnimatedValue
*
aPreviousValue
const
nsTArray
<
RefPtr
<
RawServoAnimationValue
>
>
&
aValues
)
{
MOZ_ASSERT
(
!
aValues
.
IsEmpty
(
)
)
;
HostLayer
*
layerCompositor
=
aLayer
-
>
AsHostLayer
(
)
;
switch
(
aProperty
)
{
case
eCSSProperty_background_color
:
{
MOZ_ASSERT
(
aValues
.
Length
(
)
=
=
1
)
;
nscolor
color
=
Servo_AnimationValue_GetColor
(
aValues
[
0
]
NS_RGBA
(
0
0
0
0
)
)
;
aLayer
-
>
AsColorLayer
(
)
-
>
SetColor
(
gfx
:
:
ToDeviceColor
(
color
)
)
;
aStorage
-
>
SetAnimatedValue
(
aLayer
-
>
GetCompositorAnimationsId
(
)
aPreviousValue
color
)
;
layerCompositor
-
>
SetShadowOpacity
(
aLayer
-
>
GetOpacity
(
)
)
;
layerCompositor
-
>
SetShadowOpacitySetByAnimation
(
false
)
;
layerCompositor
-
>
SetShadowBaseTransform
(
aLayer
-
>
GetBaseTransform
(
)
)
;
layerCompositor
-
>
SetShadowTransformSetByAnimation
(
false
)
;
break
;
}
case
eCSSProperty_opacity
:
{
MOZ_ASSERT
(
aValues
.
Length
(
)
=
=
1
)
;
float
opacity
=
Servo_AnimationValue_GetOpacity
(
aValues
[
0
]
)
;
layerCompositor
-
>
SetShadowOpacity
(
opacity
)
;
layerCompositor
-
>
SetShadowOpacitySetByAnimation
(
true
)
;
aStorage
-
>
SetAnimatedValue
(
aLayer
-
>
GetCompositorAnimationsId
(
)
aPreviousValue
opacity
)
;
layerCompositor
-
>
SetShadowBaseTransform
(
aLayer
-
>
GetBaseTransform
(
)
)
;
layerCompositor
-
>
SetShadowTransformSetByAnimation
(
false
)
;
break
;
}
case
eCSSProperty_rotate
:
case
eCSSProperty_scale
:
case
eCSSProperty_translate
:
case
eCSSProperty_transform
:
case
eCSSProperty_offset_path
:
case
eCSSProperty_offset_distance
:
case
eCSSProperty_offset_rotate
:
case
eCSSProperty_offset_anchor
:
{
MOZ_ASSERT
(
aLayer
-
>
GetTransformData
(
)
)
;
const
TransformData
&
transformData
=
*
aLayer
-
>
GetTransformData
(
)
;
gfx
:
:
Matrix4x4
frameTransform
=
AnimationHelper
:
:
ServoAnimationValueToMatrix4x4
(
aValues
transformData
aLayer
-
>
CachedMotionPath
(
)
)
;
gfx
:
:
Matrix4x4
transform
=
FrameTransformToTransformInDevice
(
frameTransform
aLayer
transformData
)
;
layerCompositor
-
>
SetShadowBaseTransform
(
transform
)
;
layerCompositor
-
>
SetShadowTransformSetByAnimation
(
true
)
;
aStorage
-
>
SetAnimatedValue
(
aLayer
-
>
GetCompositorAnimationsId
(
)
aPreviousValue
std
:
:
move
(
transform
)
std
:
:
move
(
frameTransform
)
transformData
)
;
layerCompositor
-
>
SetShadowOpacity
(
aLayer
-
>
GetOpacity
(
)
)
;
layerCompositor
-
>
SetShadowOpacitySetByAnimation
(
false
)
;
break
;
}
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unhandled
animated
property
"
)
;
}
}
bool
CompositorAnimationStorage
:
:
SampleAnimations
(
Layer
*
aRoot
TimeStamp
aPreviousFrameTime
TimeStamp
aCurrentFrameTime
)
{
bool
isAnimating
=
false
;
auto
autoClearAnimationStorage
=
MakeScopeExit
(
[
&
]
{
if
(
!
isAnimating
)
{
Clear
(
)
;
}
}
)
;
ForEachNode
<
ForwardIterator
>
(
aRoot
[
&
]
(
Layer
*
layer
)
{
auto
&
propertyAnimationGroups
=
layer
-
>
GetPropertyAnimationGroups
(
)
;
if
(
propertyAnimationGroups
.
IsEmpty
(
)
)
{
return
;
}
isAnimating
=
true
;
AnimatedValue
*
previousValue
=
GetAnimatedValue
(
layer
-
>
GetCompositorAnimationsId
(
)
)
;
AutoTArray
<
RefPtr
<
RawServoAnimationValue
>
1
>
animationValues
;
AnimationHelper
:
:
SampleResult
sampleResult
=
AnimationHelper
:
:
SampleAnimationForEachNode
(
aPreviousFrameTime
aCurrentFrameTime
previousValue
propertyAnimationGroups
animationValues
)
;
const
PropertyAnimationGroup
&
lastPropertyAnimationGroup
=
propertyAnimationGroups
.
LastElement
(
)
;
switch
(
sampleResult
)
{
case
AnimationHelper
:
:
SampleResult
:
:
Sampled
:
ApplyAnimatedValue
(
layer
this
lastPropertyAnimationGroup
.
mProperty
previousValue
animationValues
)
;
break
;
case
AnimationHelper
:
:
SampleResult
:
:
Skipped
:
switch
(
lastPropertyAnimationGroup
.
mProperty
)
{
case
eCSSProperty_background_color
:
case
eCSSProperty_opacity
:
{
if
(
lastPropertyAnimationGroup
.
mProperty
=
=
eCSSProperty_opacity
)
{
MOZ_ASSERT
(
layer
-
>
AsHostLayer
(
)
-
>
GetShadowOpacitySetByAnimation
(
)
)
;
#
ifdef
DEBUG
#
endif
}
HostLayer
*
layerCompositor
=
layer
-
>
AsHostLayer
(
)
;
layerCompositor
-
>
SetShadowBaseTransform
(
layer
-
>
GetBaseTransform
(
)
)
;
layerCompositor
-
>
SetShadowTransformSetByAnimation
(
false
)
;
break
;
}
case
eCSSProperty_rotate
:
case
eCSSProperty_scale
:
case
eCSSProperty_translate
:
case
eCSSProperty_transform
:
case
eCSSProperty_offset_path
:
case
eCSSProperty_offset_distance
:
case
eCSSProperty_offset_rotate
:
case
eCSSProperty_offset_anchor
:
{
MOZ_ASSERT
(
layer
-
>
AsHostLayer
(
)
-
>
GetShadowTransformSetByAnimation
(
)
)
;
MOZ_ASSERT
(
previousValue
)
;
MOZ_ASSERT
(
layer
-
>
GetTransformData
(
)
)
;
#
ifdef
DEBUG
gfx
:
:
Matrix4x4
frameTransform
=
AnimationHelper
:
:
ServoAnimationValueToMatrix4x4
(
animationValues
*
layer
-
>
GetTransformData
(
)
layer
-
>
CachedMotionPath
(
)
)
;
gfx
:
:
Matrix4x4
transformInDevice
=
FrameTransformToTransformInDevice
(
frameTransform
layer
*
layer
-
>
GetTransformData
(
)
)
;
MOZ_ASSERT
(
previousValue
-
>
Transform
(
)
.
mTransformInDevSpace
.
FuzzyEqualsMultiplicative
(
transformInDevice
)
)
;
#
endif
HostLayer
*
layerCompositor
=
layer
-
>
AsHostLayer
(
)
;
layerCompositor
-
>
SetShadowBaseTransform
(
previousValue
?
previousValue
-
>
Transform
(
)
.
mTransformInDevSpace
:
layer
-
>
GetBaseTransform
(
)
)
;
break
;
}
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
properties
"
)
;
break
;
}
break
;
case
AnimationHelper
:
:
SampleResult
:
:
None
:
{
HostLayer
*
layerCompositor
=
layer
-
>
AsHostLayer
(
)
;
layerCompositor
-
>
SetShadowBaseTransform
(
layer
-
>
GetBaseTransform
(
)
)
;
layerCompositor
-
>
SetShadowTransformSetByAnimation
(
false
)
;
layerCompositor
-
>
SetShadowOpacity
(
layer
-
>
GetOpacity
(
)
)
;
layerCompositor
-
>
SetShadowOpacitySetByAnimation
(
false
)
;
break
;
}
default
:
break
;
}
}
)
;
return
isAnimating
;
}
}
}
