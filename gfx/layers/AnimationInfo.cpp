#
include
"
AnimationInfo
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayerManager
.
h
"
#
include
"
mozilla
/
layers
/
AnimationHelper
.
h
"
#
include
"
mozilla
/
dom
/
Animation
.
h
"
namespace
mozilla
{
namespace
layers
{
AnimationInfo
:
:
AnimationInfo
(
LayerManager
*
aManager
)
:
mManager
(
aManager
)
mCompositorAnimationsId
(
0
)
mAnimationGeneration
(
0
)
mMutated
(
false
)
{
}
AnimationInfo
:
:
~
AnimationInfo
(
)
{
}
void
AnimationInfo
:
:
EnsureAnimationsId
(
)
{
if
(
!
mCompositorAnimationsId
)
{
mCompositorAnimationsId
=
AnimationHelper
:
:
GetNextCompositorAnimationsId
(
)
;
}
}
Animation
*
AnimationInfo
:
:
AddAnimation
(
)
{
EnsureAnimationsId
(
)
;
MOZ_ASSERT
(
!
mPendingAnimations
"
should
have
called
ClearAnimations
first
"
)
;
Animation
*
anim
=
mAnimations
.
AppendElement
(
)
;
mMutated
=
true
;
return
anim
;
}
Animation
*
AnimationInfo
:
:
AddAnimationForNextTransaction
(
)
{
MOZ_ASSERT
(
mPendingAnimations
"
should
have
called
ClearAnimationsForNextTransaction
first
"
)
;
Animation
*
anim
=
mPendingAnimations
-
>
AppendElement
(
)
;
return
anim
;
}
void
AnimationInfo
:
:
ClearAnimations
(
)
{
mPendingAnimations
=
nullptr
;
if
(
mAnimations
.
IsEmpty
(
)
&
&
mAnimationData
.
IsEmpty
(
)
)
{
return
;
}
mAnimations
.
Clear
(
)
;
mAnimationData
.
Clear
(
)
;
mMutated
=
true
;
}
void
AnimationInfo
:
:
ClearAnimationsForNextTransaction
(
)
{
if
(
!
mPendingAnimations
)
{
mPendingAnimations
=
new
AnimationArray
;
}
mPendingAnimations
-
>
Clear
(
)
;
}
void
AnimationInfo
:
:
SetCompositorAnimations
(
const
CompositorAnimations
&
aCompositorAnimations
)
{
mAnimations
=
aCompositorAnimations
.
animations
(
)
;
mCompositorAnimationsId
=
aCompositorAnimations
.
id
(
)
;
mAnimationData
.
Clear
(
)
;
AnimationHelper
:
:
SetAnimations
(
mAnimations
mAnimationData
mBaseAnimationStyle
)
;
}
bool
AnimationInfo
:
:
StartPendingAnimations
(
const
TimeStamp
&
aReadyTime
)
{
bool
updated
=
false
;
for
(
size_t
animIdx
=
0
animEnd
=
mAnimations
.
Length
(
)
;
animIdx
<
animEnd
;
animIdx
+
+
)
{
Animation
&
anim
=
mAnimations
[
animIdx
]
;
if
(
anim
.
startTime
(
)
.
type
(
)
=
=
MaybeTimeDuration
:
:
Tnull_t
&
&
!
anim
.
originTime
(
)
.
IsNull
(
)
&
&
!
anim
.
isNotPlaying
(
)
)
{
TimeDuration
readyTime
=
aReadyTime
-
anim
.
originTime
(
)
;
anim
.
startTime
(
)
=
dom
:
:
Animation
:
:
StartTimeFromTimelineTime
(
readyTime
anim
.
holdTime
(
)
anim
.
playbackRate
(
)
)
;
updated
=
true
;
}
}
return
updated
;
}
void
AnimationInfo
:
:
TransferMutatedFlagToLayer
(
Layer
*
aLayer
)
{
if
(
mMutated
)
{
aLayer
-
>
Mutated
(
)
;
mMutated
=
false
;
}
}
bool
AnimationInfo
:
:
ApplyPendingUpdatesForThisTransaction
(
)
{
if
(
mPendingAnimations
)
{
mPendingAnimations
-
>
SwapElements
(
mAnimations
)
;
mPendingAnimations
=
nullptr
;
return
true
;
}
return
false
;
}
bool
AnimationInfo
:
:
HasOpacityAnimation
(
)
const
{
for
(
uint32_t
i
=
0
;
i
<
mAnimations
.
Length
(
)
;
i
+
+
)
{
if
(
mAnimations
[
i
]
.
property
(
)
=
=
eCSSProperty_opacity
)
{
return
true
;
}
}
return
false
;
}
bool
AnimationInfo
:
:
HasTransformAnimation
(
)
const
{
for
(
uint32_t
i
=
0
;
i
<
mAnimations
.
Length
(
)
;
i
+
+
)
{
if
(
mAnimations
[
i
]
.
property
(
)
=
=
eCSSProperty_transform
)
{
return
true
;
}
}
return
false
;
}
}
}
