#
include
"
ContainerLayerMLGPU
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
MLGDevice
.
h
"
namespace
mozilla
{
namespace
layers
{
ContainerLayerMLGPU
:
:
ContainerLayerMLGPU
(
LayerManagerMLGPU
*
aManager
)
:
ContainerLayer
(
aManager
nullptr
)
LayerMLGPU
(
aManager
)
{
}
ContainerLayerMLGPU
:
:
~
ContainerLayerMLGPU
(
)
{
while
(
mFirstChild
)
{
RemoveChild
(
mFirstChild
)
;
}
}
bool
ContainerLayerMLGPU
:
:
OnPrepareToRender
(
FrameBuilder
*
aBuilder
)
{
if
(
!
UseIntermediateSurface
(
)
)
{
return
true
;
}
mTargetOffset
=
GetIntermediateSurfaceRect
(
)
.
TopLeft
(
)
.
ToUnknownPoint
(
)
;
mTargetSize
=
GetIntermediateSurfaceRect
(
)
.
Size
(
)
.
ToUnknownSize
(
)
;
if
(
mRenderTarget
&
&
mRenderTarget
-
>
GetSize
(
)
!
=
mTargetSize
)
{
mRenderTarget
=
nullptr
;
}
IntRect
viewport
(
IntPoint
(
0
0
)
mTargetSize
)
;
if
(
!
mRenderTarget
|
|
!
gfxPrefs
:
:
AdvancedLayersUseInvalidation
(
)
)
{
mInvalidRect
=
viewport
;
}
else
{
mInvalidRect
=
mInvalidRect
.
Intersect
(
viewport
)
;
}
return
true
;
}
RefPtr
<
MLGRenderTarget
>
ContainerLayerMLGPU
:
:
UpdateRenderTarget
(
MLGDevice
*
aDevice
MLGRenderTargetFlags
aFlags
)
{
if
(
mRenderTarget
)
{
return
mRenderTarget
;
}
mRenderTarget
=
aDevice
-
>
CreateRenderTarget
(
mTargetSize
aFlags
)
;
if
(
!
mRenderTarget
)
{
gfxWarning
(
)
<
<
"
Failed
to
create
an
intermediate
render
target
for
ContainerLayer
"
;
return
nullptr
;
}
return
mRenderTarget
;
}
void
ContainerLayerMLGPU
:
:
SetInvalidCompositeRect
(
const
gfx
:
:
IntRect
&
aRect
)
{
IntRect
bounds
=
aRect
;
bounds
.
MoveBy
(
-
GetTargetOffset
(
)
)
;
if
(
Maybe
<
IntRect
>
result
=
mInvalidRect
.
SafeUnion
(
bounds
)
)
{
mInvalidRect
=
result
.
value
(
)
;
}
else
{
mInvalidRect
=
IntRect
(
IntPoint
(
0
0
)
GetTargetSize
(
)
)
;
}
}
void
ContainerLayerMLGPU
:
:
ClearCachedResources
(
)
{
mRenderTarget
=
nullptr
;
}
bool
ContainerLayerMLGPU
:
:
IsContentOpaque
(
)
{
if
(
GetMixBlendMode
(
)
!
=
CompositionOp
:
:
OP_OVER
)
{
return
false
;
}
return
LayerMLGPU
:
:
IsContentOpaque
(
)
;
}
}
}
