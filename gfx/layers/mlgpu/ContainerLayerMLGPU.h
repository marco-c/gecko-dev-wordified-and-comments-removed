#
ifndef
mozilla_gfx_layers_mlgpu_ContainerLayerMLGPU_h
#
define
mozilla_gfx_layers_mlgpu_ContainerLayerMLGPU_h
#
include
"
LayerMLGPU
.
h
"
#
include
"
MLGDeviceTypes
.
h
"
namespace
mozilla
{
namespace
layers
{
class
MLGDevice
;
class
RenderViewMLGPU
;
class
ContainerLayerMLGPU
final
:
public
ContainerLayer
public
LayerMLGPU
{
public
:
explicit
ContainerLayerMLGPU
(
LayerManagerMLGPU
*
aManager
)
;
~
ContainerLayerMLGPU
(
)
override
;
MOZ_LAYER_DECL_NAME
(
"
ContainerLayerMLGPU
"
TYPE_CONTAINER
)
HostLayer
*
AsHostLayer
(
)
override
{
return
this
;
}
ContainerLayerMLGPU
*
AsContainerLayerMLGPU
(
)
override
{
return
this
;
}
Layer
*
GetLayer
(
)
override
{
return
this
;
}
void
ComputeEffectiveTransforms
(
const
gfx
:
:
Matrix4x4
&
aTransformToSurface
)
override
{
DefaultComputeEffectiveTransforms
(
aTransformToSurface
)
;
}
void
SetInvalidCompositeRect
(
const
gfx
:
:
IntRect
*
aRect
)
override
;
void
ClearCachedResources
(
)
override
;
const
LayerIntRegion
&
GetShadowVisibleRegion
(
)
override
;
RefPtr
<
MLGRenderTarget
>
UpdateRenderTarget
(
MLGDevice
*
aDevice
MLGRenderTargetFlags
aFlags
)
;
MLGRenderTarget
*
GetRenderTarget
(
)
const
{
return
mRenderTarget
;
}
gfx
:
:
IntPoint
GetTargetOffset
(
)
const
{
return
mTargetOffset
;
}
gfx
:
:
IntSize
GetTargetSize
(
)
const
{
return
mTargetSize
;
}
const
gfx
:
:
IntRect
&
GetInvalidRect
(
)
const
{
return
mInvalidRect
;
}
void
ClearInvalidRect
(
)
{
mInvalidRect
.
SetEmpty
(
)
;
}
bool
IsContentOpaque
(
)
override
;
bool
NeedsSurfaceCopy
(
)
const
{
return
mSurfaceCopyNeeded
;
}
RenderViewMLGPU
*
GetRenderView
(
)
const
{
return
mView
;
}
void
SetRenderView
(
RenderViewMLGPU
*
aView
)
{
MOZ_ASSERT
(
!
mView
)
;
mView
=
aView
;
}
protected
:
bool
OnPrepareToRender
(
FrameBuilder
*
aBuilder
)
override
;
void
OnLayerManagerChange
(
LayerManagerMLGPU
*
aManager
)
override
;
Maybe
<
gfx
:
:
IntRect
>
ComputeIntermediateSurfaceBounds
(
)
;
private
:
RefPtr
<
MLGRenderTarget
>
mRenderTarget
;
gfx
:
:
IntPoint
mTargetOffset
;
gfx
:
:
IntSize
mTargetSize
;
gfx
:
:
IntRect
mInvalidRect
;
bool
mInvalidateEntireSurface
;
bool
mSurfaceCopyNeeded
;
RenderViewMLGPU
*
mView
;
}
;
}
}
#
endif
