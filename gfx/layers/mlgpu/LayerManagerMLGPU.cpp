#
include
"
LayerManagerMLGPU
.
h
"
#
include
"
LayerTreeInvalidation
.
h
"
#
include
"
PaintedLayerMLGPU
.
h
"
#
include
"
ImageLayerMLGPU
.
h
"
#
include
"
CanvasLayerMLGPU
.
h
"
#
include
"
ContainerLayerMLGPU
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
gfxEnv
.
h
"
#
include
"
MLGDevice
.
h
"
#
include
"
RenderPassMLGPU
.
h
"
#
include
"
RenderViewMLGPU
.
h
"
#
include
"
ShaderDefinitionsMLGPU
.
h
"
#
include
"
SharedBufferMLGPU
.
h
"
#
include
"
UnitTransforms
.
h
"
#
include
"
TextureSourceProviderMLGPU
.
h
"
#
include
"
TreeTraversal
.
h
"
#
include
"
FrameBuilder
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
UtilityMLGPU
.
h
"
#
include
"
CompositionRecorder
.
h
"
#
include
"
mozilla
/
layers
/
Diagnostics
.
h
"
#
include
"
mozilla
/
layers
/
TextRenderer
.
h
"
#
include
"
mozilla
/
StaticPrefs_layers
.
h
"
#
ifdef
XP_WIN
#
include
"
mozilla
/
widget
/
WinCompositorWidget
.
h
"
#
include
"
mozilla
/
gfx
/
DeviceManagerDx
.
h
"
#
endif
namespace
mozilla
{
namespace
layers
{
using
namespace
gfx
;
static
const
int
kDebugOverlayX
=
2
;
static
const
int
kDebugOverlayY
=
5
;
static
const
int
kDebugOverlayMaxWidth
=
600
;
static
const
int
kDebugOverlayMaxHeight
=
96
;
class
RecordedFrameMLGPU
:
public
RecordedFrame
{
public
:
RecordedFrameMLGPU
(
MLGDevice
*
aDevice
MLGTexture
*
aTexture
const
TimeStamp
&
aTimestamp
)
:
RecordedFrame
(
aTimestamp
)
mDevice
(
aDevice
)
{
mSoftTexture
=
aDevice
-
>
CreateTexture
(
aTexture
-
>
GetSize
(
)
SurfaceFormat
:
:
B8G8R8A8
MLGUsage
:
:
Staging
MLGTextureFlags
:
:
None
)
;
aDevice
-
>
CopyTexture
(
mSoftTexture
IntPoint
(
)
aTexture
IntRect
(
IntPoint
(
)
aTexture
-
>
GetSize
(
)
)
)
;
}
~
RecordedFrameMLGPU
(
)
{
if
(
mIsMapped
)
{
mDevice
-
>
Unmap
(
mSoftTexture
)
;
}
}
virtual
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetSourceSurface
(
)
override
{
if
(
mDataSurf
)
{
return
RefPtr
<
DataSourceSurface
>
(
mDataSurf
)
.
forget
(
)
;
}
MLGMappedResource
map
;
if
(
!
mDevice
-
>
Map
(
mSoftTexture
MLGMapType
:
:
READ
&
map
)
)
{
return
nullptr
;
}
mIsMapped
=
true
;
mDataSurf
=
Factory
:
:
CreateWrappingDataSourceSurface
(
map
.
mData
map
.
mStride
mSoftTexture
-
>
GetSize
(
)
SurfaceFormat
:
:
B8G8R8A8
)
;
return
RefPtr
<
DataSourceSurface
>
(
mDataSurf
)
.
forget
(
)
;
}
private
:
RefPtr
<
MLGDevice
>
mDevice
;
RefPtr
<
MLGTexture
>
mSoftTexture
;
RefPtr
<
DataSourceSurface
>
mDataSurf
;
bool
mIsMapped
=
false
;
}
;
LayerManagerMLGPU
:
:
LayerManagerMLGPU
(
widget
:
:
CompositorWidget
*
aWidget
)
:
mWidget
(
aWidget
)
mDrawDiagnostics
(
false
)
mUsingInvalidation
(
false
)
mCurrentFrame
(
nullptr
)
mDebugFrameNumber
(
0
)
{
if
(
!
aWidget
)
{
return
;
}
#
ifdef
WIN32
mDevice
=
DeviceManagerDx
:
:
Get
(
)
-
>
GetMLGDevice
(
)
;
#
endif
if
(
!
mDevice
|
|
!
mDevice
-
>
IsValid
(
)
)
{
gfxWarning
(
)
<
<
"
Could
not
acquire
an
MLGDevice
!
"
;
return
;
}
mSwapChain
=
mDevice
-
>
CreateSwapChainForWidget
(
aWidget
)
;
if
(
!
mSwapChain
)
{
gfxWarning
(
)
<
<
"
Could
not
acquire
an
MLGSwapChain
!
"
;
return
;
}
mDiagnostics
=
MakeUnique
<
Diagnostics
>
(
)
;
mTextRenderer
=
new
TextRenderer
(
)
;
}
LayerManagerMLGPU
:
:
~
LayerManagerMLGPU
(
)
{
if
(
mTextureSourceProvider
)
{
mTextureSourceProvider
-
>
Destroy
(
)
;
}
}
bool
LayerManagerMLGPU
:
:
Initialize
(
)
{
if
(
!
mDevice
|
|
!
mSwapChain
)
{
return
false
;
}
mTextureSourceProvider
=
new
TextureSourceProviderMLGPU
(
this
mDevice
)
;
return
true
;
}
void
LayerManagerMLGPU
:
:
Destroy
(
)
{
if
(
IsDestroyed
(
)
)
{
return
;
}
LayerManager
:
:
Destroy
(
)
;
mProfilerScreenshotGrabber
.
Destroy
(
)
;
if
(
mDevice
&
&
mDevice
-
>
IsValid
(
)
)
{
mDevice
-
>
Flush
(
)
;
}
if
(
mSwapChain
)
{
mSwapChain
-
>
Destroy
(
)
;
mSwapChain
=
nullptr
;
}
if
(
mTextureSourceProvider
)
{
mTextureSourceProvider
-
>
Destroy
(
)
;
mTextureSourceProvider
=
nullptr
;
}
mWidget
=
nullptr
;
mDevice
=
nullptr
;
}
void
LayerManagerMLGPU
:
:
ForcePresent
(
)
{
if
(
!
mDevice
-
>
IsValid
(
)
)
{
return
;
}
IntSize
windowSize
=
mWidget
-
>
GetClientSize
(
)
.
ToUnknownSize
(
)
;
if
(
mSwapChain
-
>
GetSize
(
)
!
=
windowSize
)
{
return
;
}
mSwapChain
-
>
ForcePresent
(
)
;
}
already_AddRefed
<
ContainerLayer
>
LayerManagerMLGPU
:
:
CreateContainerLayer
(
)
{
return
MakeAndAddRef
<
ContainerLayerMLGPU
>
(
this
)
;
}
already_AddRefed
<
ColorLayer
>
LayerManagerMLGPU
:
:
CreateColorLayer
(
)
{
return
MakeAndAddRef
<
ColorLayerMLGPU
>
(
this
)
;
}
already_AddRefed
<
RefLayer
>
LayerManagerMLGPU
:
:
CreateRefLayer
(
)
{
return
MakeAndAddRef
<
RefLayerMLGPU
>
(
this
)
;
}
already_AddRefed
<
PaintedLayer
>
LayerManagerMLGPU
:
:
CreatePaintedLayer
(
)
{
return
MakeAndAddRef
<
PaintedLayerMLGPU
>
(
this
)
;
}
already_AddRefed
<
ImageLayer
>
LayerManagerMLGPU
:
:
CreateImageLayer
(
)
{
return
MakeAndAddRef
<
ImageLayerMLGPU
>
(
this
)
;
}
already_AddRefed
<
CanvasLayer
>
LayerManagerMLGPU
:
:
CreateCanvasLayer
(
)
{
return
MakeAndAddRef
<
CanvasLayerMLGPU
>
(
this
)
;
}
TextureFactoryIdentifier
LayerManagerMLGPU
:
:
GetTextureFactoryIdentifier
(
)
{
TextureFactoryIdentifier
ident
;
if
(
mDevice
)
{
ident
=
mDevice
-
>
GetTextureFactoryIdentifier
(
mWidget
)
;
}
ident
.
mUsingAdvancedLayers
=
true
;
return
ident
;
}
LayersBackend
LayerManagerMLGPU
:
:
GetBackendType
(
)
{
return
mDevice
?
mDevice
-
>
GetLayersBackend
(
)
:
LayersBackend
:
:
LAYERS_NONE
;
}
void
LayerManagerMLGPU
:
:
SetRoot
(
Layer
*
aLayer
)
{
mRoot
=
aLayer
;
}
bool
LayerManagerMLGPU
:
:
BeginTransaction
(
const
nsCString
&
aURL
)
{
return
true
;
}
void
LayerManagerMLGPU
:
:
BeginTransactionWithDrawTarget
(
gfx
:
:
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
&
aRect
)
{
MOZ_ASSERT
(
!
mTarget
)
;
mTarget
=
aTarget
;
mTargetRect
=
aRect
;
}
class
MOZ_STACK_CLASS
AutoUnlockAllTextures
final
{
public
:
explicit
AutoUnlockAllTextures
(
MLGDevice
*
aDevice
)
:
mDevice
(
aDevice
)
{
}
~
AutoUnlockAllTextures
(
)
{
mDevice
-
>
UnlockAllTextures
(
)
;
}
private
:
RefPtr
<
MLGDevice
>
mDevice
;
}
;
void
LayerManagerMLGPU
:
:
EndTransaction
(
const
TimeStamp
&
aTimeStamp
EndTransactionFlags
aFlags
)
{
AUTO_PROFILER_LABEL
(
"
LayerManager
:
:
EndTransaction
"
GRAPHICS
)
;
TextureSourceProvider
:
:
AutoReadUnlockTextures
unlock
(
mTextureSourceProvider
)
;
if
(
!
mRoot
|
|
(
aFlags
&
END_NO_IMMEDIATE_REDRAW
)
|
|
!
mWidget
)
{
return
;
}
if
(
!
mDevice
-
>
IsValid
(
)
)
{
return
;
}
mCompositionOpportunityId
=
mCompositionOpportunityId
.
Next
(
)
;
SetCompositionTime
(
aTimeStamp
)
;
mCompositionStartTime
=
TimeStamp
:
:
Now
(
)
;
IntSize
windowSize
=
mWidget
-
>
GetClientSize
(
)
.
ToUnknownSize
(
)
;
if
(
windowSize
.
IsEmpty
(
)
)
{
return
;
}
#
ifdef
XP_WIN
mWidget
-
>
AsWindows
(
)
-
>
UpdateCompositorWndSizeIfNecessary
(
)
;
#
endif
if
(
mSwapChain
-
>
GetSize
(
)
!
=
windowSize
)
{
mDevice
-
>
SetRenderTarget
(
nullptr
)
;
if
(
!
mSwapChain
-
>
ResizeBuffers
(
windowSize
)
)
{
gfxCriticalNote
<
<
"
Could
not
resize
the
swapchain
(
"
<
<
hexa
(
windowSize
.
width
)
<
<
"
"
<
<
hexa
(
windowSize
.
height
)
<
<
"
)
"
;
return
;
}
}
mDrawDiagnostics
=
StaticPrefs
:
:
layers_acceleration_draw_fps
(
)
&
&
!
mTarget
;
mUsingInvalidation
=
StaticPrefs
:
:
layers_mlgpu_enable_invalidation
(
)
;
mDebugFrameNumber
+
+
;
AL_LOG
(
"
-
-
-
Compositing
frame
%
d
-
-
-
\
n
"
mDebugFrameNumber
)
;
mRoot
-
>
ComputeEffectiveTransforms
(
Matrix4x4
(
)
)
;
ComputeInvalidRegion
(
)
;
if
(
PreRender
(
)
)
{
Composite
(
)
;
PostRender
(
)
;
}
mTextureSourceProvider
-
>
FlushPendingNotifyNotUsed
(
)
;
mLastCompositionEndTime
=
TimeStamp
:
:
Now
(
)
;
}
void
LayerManagerMLGPU
:
:
Composite
(
)
{
if
(
gfxEnv
:
:
SkipComposition
(
)
)
{
return
;
}
AUTO_PROFILER_LABEL
(
"
LayerManagerMLGPU
:
:
Composite
"
GRAPHICS
)
;
if
(
mWidget
-
>
IsHidden
(
)
)
{
return
;
}
Maybe
<
IntRect
>
diagnosticRect
;
if
(
mDrawDiagnostics
)
{
diagnosticRect
=
Some
(
IntRect
(
kDebugOverlayX
kDebugOverlayY
kDebugOverlayMaxWidth
kDebugOverlayMaxHeight
)
)
;
}
AL_LOG
(
"
Computed
invalid
region
:
%
s
\
n
"
Stringify
(
mInvalidRegion
)
.
c_str
(
)
)
;
if
(
!
mSwapChain
-
>
ApplyNewInvalidRegion
(
std
:
:
move
(
mInvalidRegion
)
diagnosticRect
)
)
{
mProfilerScreenshotGrabber
.
NotifyEmptyFrame
(
)
;
mPayload
.
Clear
(
)
;
return
;
}
AutoUnlockAllTextures
autoUnlock
(
mDevice
)
;
mDevice
-
>
BeginFrame
(
)
;
RenderLayers
(
)
;
if
(
mDrawDiagnostics
)
{
DrawDebugOverlay
(
)
;
}
if
(
mTarget
)
{
mSwapChain
-
>
CopyBackbuffer
(
mTarget
mTargetRect
)
;
mTarget
=
nullptr
;
mTargetRect
=
IntRect
(
)
;
}
mSwapChain
-
>
Present
(
)
;
RecordFrame
(
)
;
mDevice
-
>
EndFrame
(
)
;
mClonedLayerTreeProperties
=
nullptr
;
mClonedLayerTreeProperties
=
LayerProperties
:
:
CloneFrom
(
mRoot
)
;
PayloadPresented
(
)
;
mPayload
.
Clear
(
)
;
}
void
LayerManagerMLGPU
:
:
RenderLayers
(
)
{
AUTO_PROFILER_LABEL
(
"
LayerManagerMLGPU
:
:
RenderLayers
"
GRAPHICS
)
;
FrameBuilder
builder
(
this
mSwapChain
)
;
mCurrentFrame
=
&
builder
;
if
(
!
builder
.
Build
(
)
)
{
return
;
}
if
(
mDrawDiagnostics
)
{
mDiagnostics
-
>
RecordPrepareTime
(
(
TimeStamp
:
:
Now
(
)
-
mCompositionStartTime
)
.
ToMilliseconds
(
)
)
;
}
if
(
!
mDevice
-
>
Synchronize
(
)
)
{
return
;
}
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
mDevice
-
>
FinishSharedBufferUse
(
)
;
if
(
mDrawDiagnostics
)
{
IntSize
size
=
mSwapChain
-
>
GetBackBufferInvalidRegion
(
)
.
GetBounds
(
)
.
Size
(
)
;
uint32_t
numPixels
=
size
.
width
*
size
.
height
;
mDevice
-
>
StartDiagnostics
(
numPixels
)
;
}
builder
.
Render
(
)
;
mProfilerScreenshotGrabber
.
MaybeGrabScreenshot
(
mDevice
builder
.
GetWidgetRT
(
)
-
>
GetTexture
(
)
)
;
if
(
mCompositionRecorder
)
{
bool
hasContentPaint
=
false
;
for
(
CompositionPayload
&
payload
:
mPayload
)
{
if
(
payload
.
mType
=
=
CompositionPayloadType
:
:
eContentPaint
)
{
hasContentPaint
=
true
;
break
;
}
}
if
(
hasContentPaint
)
{
RefPtr
<
RecordedFrame
>
frame
=
new
RecordedFrameMLGPU
(
mDevice
builder
.
GetWidgetRT
(
)
-
>
GetTexture
(
)
TimeStamp
:
:
Now
(
)
)
;
mCompositionRecorder
-
>
RecordFrame
(
frame
)
;
}
}
mCurrentFrame
=
nullptr
;
if
(
mDrawDiagnostics
)
{
mDiagnostics
-
>
RecordCompositeTime
(
(
TimeStamp
:
:
Now
(
)
-
start
)
.
ToMilliseconds
(
)
)
;
mDevice
-
>
EndDiagnostics
(
)
;
}
}
void
LayerManagerMLGPU
:
:
DrawDebugOverlay
(
)
{
IntSize
windowSize
=
mSwapChain
-
>
GetSize
(
)
;
GPUStats
stats
;
mDevice
-
>
GetDiagnostics
(
&
stats
)
;
stats
.
mScreenPixels
=
windowSize
.
width
*
windowSize
.
height
;
std
:
:
string
text
=
mDiagnostics
-
>
GetFrameOverlayString
(
stats
)
;
RefPtr
<
TextureSource
>
texture
=
mTextRenderer
-
>
RenderText
(
mTextureSourceProvider
text
600
TextRenderer
:
:
FontType
:
:
FixedWidth
)
;
if
(
!
texture
)
{
return
;
}
if
(
mUsingInvalidation
&
&
(
texture
-
>
GetSize
(
)
.
width
>
kDebugOverlayMaxWidth
|
|
texture
-
>
GetSize
(
)
.
height
>
kDebugOverlayMaxHeight
)
)
{
gfxCriticalNote
<
<
"
Diagnostic
overlay
exceeds
invalidation
area
:
%
s
"
<
<
Stringify
(
texture
-
>
GetSize
(
)
)
.
c_str
(
)
;
}
struct
DebugRect
{
Rect
bounds
;
Rect
texCoords
;
}
;
if
(
!
mDiagnosticVertices
)
{
DebugRect
rect
;
rect
.
bounds
=
Rect
(
Point
(
kDebugOverlayX
kDebugOverlayY
)
Size
(
texture
-
>
GetSize
(
)
)
)
;
rect
.
texCoords
=
Rect
(
0
.
0
0
.
0
1
.
0
1
.
0
)
;
VertexStagingBuffer
instances
;
if
(
!
instances
.
AppendItem
(
rect
)
)
{
return
;
}
mDiagnosticVertices
=
mDevice
-
>
CreateBuffer
(
MLGBufferType
:
:
Vertex
instances
.
NumItems
(
)
*
instances
.
SizeOfItem
(
)
MLGUsage
:
:
Immutable
instances
.
GetBufferStart
(
)
)
;
if
(
!
mDiagnosticVertices
)
{
return
;
}
}
mDevice
-
>
SetScissorRect
(
Nothing
(
)
)
;
mDevice
-
>
SetDepthTestMode
(
MLGDepthTestMode
:
:
Disabled
)
;
mDevice
-
>
SetTopology
(
MLGPrimitiveTopology
:
:
UnitQuad
)
;
mDevice
-
>
SetVertexShader
(
VertexShaderID
:
:
DiagnosticText
)
;
mDevice
-
>
SetVertexBuffer
(
1
mDiagnosticVertices
sizeof
(
DebugRect
)
)
;
mDevice
-
>
SetPixelShader
(
PixelShaderID
:
:
DiagnosticText
)
;
mDevice
-
>
SetBlendState
(
MLGBlendState
:
:
Over
)
;
mDevice
-
>
SetPSTexture
(
0
texture
)
;
mDevice
-
>
SetSamplerMode
(
0
SamplerMode
:
:
Point
)
;
mDevice
-
>
DrawInstanced
(
4
1
0
0
)
;
}
void
LayerManagerMLGPU
:
:
ComputeInvalidRegion
(
)
{
if
(
!
mUsingInvalidation
)
{
mInvalidRegion
=
mTarget
?
mTargetRect
:
mRenderBounds
;
mNextFrameInvalidRegion
.
SetEmpty
(
)
;
return
;
}
nsIntRegion
changed
;
if
(
mClonedLayerTreeProperties
)
{
if
(
!
mClonedLayerTreeProperties
-
>
ComputeDifferences
(
mRoot
changed
nullptr
)
)
{
changed
=
mRenderBounds
;
}
}
else
{
changed
=
mRenderBounds
;
}
if
(
mTarget
)
{
mInvalidRegion
=
mTargetRect
;
mNextFrameInvalidRegion
.
OrWith
(
changed
)
;
}
else
{
mInvalidRegion
=
std
:
:
move
(
mNextFrameInvalidRegion
)
;
mInvalidRegion
.
OrWith
(
changed
)
;
}
}
void
LayerManagerMLGPU
:
:
AddInvalidRegion
(
const
nsIntRegion
&
aRegion
)
{
mNextFrameInvalidRegion
.
OrWith
(
aRegion
)
;
}
TextureSourceProvider
*
LayerManagerMLGPU
:
:
GetTextureSourceProvider
(
)
const
{
return
mTextureSourceProvider
;
}
bool
LayerManagerMLGPU
:
:
IsCompositingToScreen
(
)
const
{
return
!
mTarget
;
}
bool
LayerManagerMLGPU
:
:
AreComponentAlphaLayersEnabled
(
)
{
return
LayerManager
:
:
AreComponentAlphaLayersEnabled
(
)
;
}
bool
LayerManagerMLGPU
:
:
BlendingRequiresIntermediateSurface
(
)
{
return
true
;
}
void
LayerManagerMLGPU
:
:
EndTransaction
(
DrawPaintedLayerCallback
aCallback
void
*
aCallbackData
EndTransactionFlags
aFlags
)
{
MOZ_CRASH
(
"
GFX
:
Use
EndTransaction
(
aTimeStamp
)
"
)
;
}
void
LayerManagerMLGPU
:
:
ClearCachedResources
(
Layer
*
aSubtree
)
{
Layer
*
root
=
aSubtree
?
aSubtree
:
mRoot
.
get
(
)
;
if
(
!
root
)
{
return
;
}
ForEachNode
<
ForwardIterator
>
(
root
[
]
(
Layer
*
aLayer
)
{
LayerMLGPU
*
layer
=
aLayer
-
>
AsHostLayer
(
)
-
>
AsLayerMLGPU
(
)
;
if
(
!
layer
)
{
return
;
}
layer
-
>
ClearCachedResources
(
)
;
}
)
;
}
void
LayerManagerMLGPU
:
:
NotifyShadowTreeTransaction
(
)
{
if
(
StaticPrefs
:
:
layers_acceleration_draw_fps
(
)
)
{
mDiagnostics
-
>
AddTxnFrame
(
)
;
}
}
void
LayerManagerMLGPU
:
:
UpdateRenderBounds
(
const
gfx
:
:
IntRect
&
aRect
)
{
mRenderBounds
=
aRect
;
}
bool
LayerManagerMLGPU
:
:
PreRender
(
)
{
AUTO_PROFILER_LABEL
(
"
LayerManagerMLGPU
:
:
PreRender
"
GRAPHICS
)
;
widget
:
:
WidgetRenderingContext
context
;
if
(
!
mWidget
-
>
PreRender
(
&
context
)
)
{
return
false
;
}
mWidgetContext
=
Some
(
context
)
;
return
true
;
}
void
LayerManagerMLGPU
:
:
PostRender
(
)
{
mWidget
-
>
PostRender
(
mWidgetContext
.
ptr
(
)
)
;
mProfilerScreenshotGrabber
.
MaybeProcessQueue
(
)
;
mWidgetContext
=
Nothing
(
)
;
}
}
}
