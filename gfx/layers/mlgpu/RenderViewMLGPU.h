#
ifndef
mozilla_gfx_layers_mlgpu_RenderViewMLGPU_h
#
define
mozilla_gfx_layers_mlgpu_RenderViewMLGPU_h
#
include
"
LayerManagerMLGPU
.
h
"
#
include
"
ClearRegionHelper
.
h
"
#
include
"
RenderPassMLGPU
.
h
"
#
include
"
Units
.
h
"
#
include
<
deque
>
namespace
mozilla
{
namespace
layers
{
class
FrameBuilder
;
class
ContainerLayerMLGPU
;
class
MLGRenderTarget
;
class
RenderViewMLGPU
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
RenderViewMLGPU
)
RenderViewMLGPU
(
FrameBuilder
*
aBuilder
MLGRenderTarget
*
aTarget
const
nsIntRegion
&
aInvalidRegion
)
;
RenderViewMLGPU
(
FrameBuilder
*
aBuilder
ContainerLayerMLGPU
*
aContainer
RenderViewMLGPU
*
aParent
)
;
void
Prepare
(
)
;
void
Render
(
)
;
void
AddChild
(
RenderViewMLGPU
*
aParent
)
;
void
AddItem
(
LayerMLGPU
*
aItem
const
gfx
:
:
IntRect
&
aBounds
Maybe
<
gfx
:
:
Polygon
>
&
&
aGeometry
)
;
void
FinishBuilding
(
)
;
const
gfx
:
:
IntPoint
&
GetTargetOffset
(
)
const
{
return
mTargetOffset
;
}
RenderViewMLGPU
*
GetParent
(
)
const
{
return
mParent
;
}
bool
HasDepthBuffer
(
)
const
{
return
mUseDepthBuffer
;
}
MLGRenderTarget
*
GetRenderTarget
(
)
const
;
gfx
:
:
IntSize
GetSize
(
)
const
;
gfx
:
:
IntRect
GetInvalidRect
(
)
const
{
return
mInvalidBounds
;
}
private
:
RenderViewMLGPU
(
FrameBuilder
*
aBuilder
RenderViewMLGPU
*
aParent
)
;
~
RenderViewMLGPU
(
)
;
void
ExecuteRendering
(
)
;
bool
UpdateVisibleRegion
(
ItemInfo
&
aItem
)
;
void
AddItemFrontToBack
(
LayerMLGPU
*
aLayer
ItemInfo
&
aItem
)
;
void
AddItemBackToFront
(
LayerMLGPU
*
aLayer
ItemInfo
&
aItem
)
;
void
PrepareClear
(
)
;
void
DrawClear
(
)
;
void
ExecutePass
(
RenderPassMLGPU
*
aPass
)
;
int32_t
PrepareDepthBuffer
(
)
;
private
:
std
:
:
deque
<
RefPtr
<
RenderPassMLGPU
>
>
mFrontToBack
;
std
:
:
deque
<
RefPtr
<
RenderPassMLGPU
>
>
mBackToFront
;
FrameBuilder
*
mBuilder
;
RefPtr
<
MLGDevice
>
mDevice
;
RenderViewMLGPU
*
mParent
;
std
:
:
vector
<
RefPtr
<
RenderViewMLGPU
>
>
mChildren
;
ConstantBufferSection
mWorldConstants
;
ClearRegionHelper
mClear
;
RefPtr
<
MLGRenderTarget
>
mTarget
;
ContainerLayerMLGPU
*
mContainer
;
gfx
:
:
IntPoint
mTargetOffset
;
gfx
:
:
IntRect
mInvalidBounds
;
LayerIntRegion
mOccludedRegion
;
bool
mFinishedBuilding
;
size_t
mCurrentLayerBufferIndex
;
size_t
mCurrentMaskRectBufferIndex
;
int32_t
mNextSortIndex
;
bool
mUseDepthBuffer
;
bool
mDepthBufferNeedsClear
;
}
;
}
}
#
endif
