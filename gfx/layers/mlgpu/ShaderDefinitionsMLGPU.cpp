#
include
"
ShaderDefinitionsMLGPU
.
h
"
#
include
"
RenderPassMLGPU
.
h
"
namespace
mozilla
{
namespace
layers
{
namespace
mlg
{
using
namespace
gfx
;
struct
TriangleVertex
{
gfx
:
:
Point
point
[
3
]
;
uint32_t
layerIndex
;
int
depth
;
uint32_t
itemIndex
;
}
;
bool
SimpleTraits
:
:
AddVerticesTo
(
ShaderRenderPass
*
aPass
const
ItemInfo
&
aItem
uint32_t
aItemIndex
const
gfx
:
:
Polygon
*
aGeometry
)
const
{
VertexStagingBuffer
*
vertices
=
aPass
-
>
GetInstances
(
)
;
if
(
!
aGeometry
)
{
TriangleVertex
first
=
{
{
mRect
.
BottomLeft
(
)
mRect
.
TopLeft
(
)
mRect
.
TopRight
(
)
}
aItem
.
layerIndex
aItem
.
sortOrder
aItemIndex
}
;
TriangleVertex
second
=
{
{
mRect
.
TopRight
(
)
mRect
.
BottomRight
(
)
mRect
.
BottomLeft
(
)
}
aItem
.
layerIndex
aItem
.
sortOrder
aItemIndex
}
;
if
(
!
vertices
-
>
PrependItem
(
first
)
|
|
!
vertices
-
>
PrependItem
(
second
)
)
{
return
false
;
}
return
true
;
}
nsTArray
<
Triangle
>
triangles
=
aGeometry
-
>
ToTriangles
(
)
;
for
(
const
Triangle
&
t
:
triangles
)
{
TriangleVertex
v
=
{
{
t
.
p1
t
.
p2
t
.
p3
}
aItem
.
layerIndex
aItem
.
sortOrder
aItemIndex
}
;
if
(
!
vertices
-
>
PrependItem
(
v
)
)
{
return
false
;
}
}
return
true
;
}
struct
TexturedTriangleVertex
{
gfx
:
:
Point
layerPos
[
3
]
;
uint32_t
layerIndex
;
int
depth
;
gfx
:
:
Point
texCoords
[
3
]
;
}
;
bool
TexturedTraits
:
:
AddVerticesTo
(
ShaderRenderPass
*
aPass
const
ItemInfo
&
aItem
uint32_t
aItemIndex
const
gfx
:
:
Polygon
*
aGeometry
)
const
{
VertexStagingBuffer
*
vertices
=
aPass
-
>
GetInstances
(
)
;
using
Vertex
=
TexturedTriangleVertex
;
if
(
!
aGeometry
)
{
TexturedTriangleVertex
first
=
{
{
mRect
.
BottomLeft
(
)
mRect
.
TopLeft
(
)
mRect
.
TopRight
(
)
}
aItem
.
layerIndex
aItem
.
sortOrder
{
mTexCoords
.
BottomLeft
(
)
mTexCoords
.
TopLeft
(
)
mTexCoords
.
TopRight
(
)
}
}
;
TexturedTriangleVertex
second
=
{
{
mRect
.
TopRight
(
)
mRect
.
BottomRight
(
)
mRect
.
BottomLeft
(
)
}
aItem
.
layerIndex
aItem
.
sortOrder
{
mTexCoords
.
TopRight
(
)
mTexCoords
.
BottomRight
(
)
mTexCoords
.
BottomLeft
(
)
}
}
;
if
(
!
vertices
-
>
PrependItem
(
first
)
|
|
!
vertices
-
>
PrependItem
(
second
)
)
{
return
false
;
}
return
true
;
}
nsTArray
<
TexturedTriangle
>
triangles
=
GenerateTexturedTriangles
(
*
aGeometry
mRect
mTexCoords
)
;
for
(
const
TexturedTriangle
&
t
:
triangles
)
{
TexturedTriangleVertex
v
=
{
{
t
.
p1
t
.
p2
t
.
p3
}
aItem
.
layerIndex
aItem
.
sortOrder
{
t
.
textureCoords
.
p1
t
.
textureCoords
.
p2
t
.
textureCoords
.
p3
}
}
;
if
(
!
vertices
-
>
PrependItem
(
v
)
)
{
return
false
;
}
}
return
true
;
}
}
}
}
