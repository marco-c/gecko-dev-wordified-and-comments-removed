#
include
"
CanvasLayerMLGPU
.
h
"
#
include
"
composite
/
CompositableHost
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
gfxEnv
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
Effects
.
h
"
#
include
"
mozilla
/
layers
/
ImageHost
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
MaskOperation
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
CanvasLayerMLGPU
:
:
CanvasLayerMLGPU
(
LayerManagerMLGPU
*
aManager
)
:
CanvasLayer
(
aManager
nullptr
)
TexturedLayerMLGPU
(
aManager
)
{
}
CanvasLayerMLGPU
:
:
~
CanvasLayerMLGPU
(
)
{
CleanupResources
(
)
;
}
Layer
*
CanvasLayerMLGPU
:
:
GetLayer
(
)
{
return
this
;
}
gfx
:
:
SamplingFilter
CanvasLayerMLGPU
:
:
GetSamplingFilter
(
)
{
gfx
:
:
SamplingFilter
filter
=
mSamplingFilter
;
#
ifdef
ANDROID
Matrix
matrix
;
bool
is2D
=
GetEffectiveTransform
(
)
.
Is2D
(
&
matrix
)
;
if
(
is2D
&
&
!
ThebesMatrix
(
matrix
)
.
HasNonTranslationOrFlip
(
)
)
{
filter
=
SamplingFilter
:
:
POINT
;
}
#
endif
return
filter
;
}
void
CanvasLayerMLGPU
:
:
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
{
CanvasLayer
:
:
PrintInfo
(
aStream
aPrefix
)
;
aStream
<
<
"
\
n
"
;
if
(
mHost
&
&
mHost
-
>
IsAttached
(
)
)
{
nsAutoCString
pfx
(
aPrefix
)
;
pfx
+
=
"
"
;
mHost
-
>
PrintInfo
(
aStream
pfx
.
get
(
)
)
;
}
}
void
CanvasLayerMLGPU
:
:
CleanupResources
(
)
{
if
(
mHost
)
{
mHost
-
>
Detach
(
this
)
;
}
mTexture
=
nullptr
;
mBigImageTexture
=
nullptr
;
mHost
=
nullptr
;
}
void
CanvasLayerMLGPU
:
:
Disconnect
(
)
{
CleanupResources
(
)
;
}
void
CanvasLayerMLGPU
:
:
ClearCachedResources
(
)
{
CleanupResources
(
)
;
}
void
CanvasLayerMLGPU
:
:
SetRenderRegion
(
LayerIntRegion
&
&
aRegion
)
{
aRegion
.
AndWith
(
LayerIntRect
:
:
FromUnknownRect
(
mPictureRect
)
)
;
LayerMLGPU
:
:
SetRenderRegion
(
Move
(
aRegion
)
)
;
}
}
}
