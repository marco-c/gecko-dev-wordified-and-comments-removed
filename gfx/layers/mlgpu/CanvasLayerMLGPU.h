#
ifndef
GFX_CanvasLayerMLGPU_H
#
define
GFX_CanvasLayerMLGPU_H
#
include
"
Layers
.
h
"
#
include
"
TexturedLayerMLGPU
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerMLGPU
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nscore
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositableHost
;
class
ImageHost
;
class
CanvasLayerMLGPU
final
:
public
CanvasLayer
public
TexturedLayerMLGPU
{
public
:
explicit
CanvasLayerMLGPU
(
LayerManagerMLGPU
*
aManager
)
;
protected
:
~
CanvasLayerMLGPU
(
)
override
;
public
:
void
Initialize
(
const
Data
&
aData
)
override
{
MOZ_CRASH
(
"
Incompatibe
surface
type
"
)
;
}
Layer
*
GetLayer
(
)
override
;
void
Disconnect
(
)
override
;
HostLayer
*
AsHostLayer
(
)
override
{
return
this
;
}
CanvasLayerMLGPU
*
AsCanvasLayerMLGPU
(
)
override
{
return
this
;
}
gfx
:
:
SamplingFilter
GetSamplingFilter
(
)
override
;
void
ClearCachedResources
(
)
override
;
void
SetRegionToRender
(
LayerIntRegion
&
&
aRegion
)
override
;
MOZ_LAYER_DECL_NAME
(
"
CanvasLayerMLGPU
"
TYPE_CANVAS
)
protected
:
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
void
CleanupResources
(
)
;
}
;
}
}
#
endif
