#
ifndef
MOZILLA_GFX_PAINTEDLAYERMLGPU_H
#
define
MOZILLA_GFX_PAINTEDLAYERMLGPU_H
#
include
"
LayerManagerMLGPU
.
h
"
#
include
"
mozilla
/
layers
/
ContentHost
.
h
"
#
include
"
MLGDeviceTypes
.
h
"
#
include
"
nsRegionFwd
.
h
"
#
include
<
functional
>
namespace
mozilla
{
namespace
layers
{
class
TiledLayerBufferComposite
;
class
PaintedLayerMLGPU
final
:
public
PaintedLayer
public
LayerMLGPU
{
public
:
explicit
PaintedLayerMLGPU
(
LayerManagerMLGPU
*
aManager
)
;
virtual
~
PaintedLayerMLGPU
(
)
;
HostLayer
*
AsHostLayer
(
)
override
{
return
this
;
}
PaintedLayerMLGPU
*
AsPaintedLayerMLGPU
(
)
override
{
return
this
;
}
Layer
*
GetLayer
(
)
override
{
return
this
;
}
bool
SetCompositableHost
(
CompositableHost
*
)
override
;
CompositableHost
*
GetCompositableHost
(
)
override
;
void
Disconnect
(
)
override
;
bool
IsContentOpaque
(
)
override
;
void
InvalidateRegion
(
const
nsIntRegion
&
aRegion
)
override
{
MOZ_CRASH
(
"
PaintedLayerMLGPU
can
'
t
fill
invalidated
regions
"
)
;
}
bool
HasComponentAlpha
(
)
const
{
return
!
!
mTextureOnWhite
;
}
TextureSource
*
GetTexture
(
)
const
{
return
mTexture
;
}
TextureSource
*
GetTextureOnWhite
(
)
const
{
MOZ_ASSERT
(
HasComponentAlpha
(
)
)
;
return
mTextureOnWhite
;
}
gfx
:
:
Point
GetDestOrigin
(
)
const
;
SamplerMode
GetSamplerMode
(
)
{
return
MayResample
(
)
?
SamplerMode
:
:
LinearClamp
:
SamplerMode
:
:
LinearRepeat
;
}
void
SetRenderRegion
(
LayerIntRegion
&
&
aRegion
)
override
;
const
LayerIntRegion
&
GetDrawRects
(
)
;
MOZ_LAYER_DECL_NAME
(
"
PaintedLayerMLGPU
"
TYPE_PAINTED
)
void
CleanupCachedResources
(
)
;
protected
:
void
PrintInfo
(
std
:
:
stringstream
&
aStream
const
char
*
aPrefix
)
override
;
bool
OnPrepareToRender
(
FrameBuilder
*
aBuilder
)
override
;
void
AssignToView
(
FrameBuilder
*
aBuilder
RenderViewMLGPU
*
aView
Maybe
<
gfx
:
:
Polygon
>
&
&
aGeometry
)
override
;
void
AssignHighResTilesToView
(
FrameBuilder
*
aBuilder
RenderViewMLGPU
*
aView
TiledContentHost
*
aTileHost
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
;
void
AssignTileBufferToView
(
FrameBuilder
*
aBuilder
RenderViewMLGPU
*
aView
TiledLayerBufferComposite
&
aTiles
const
LayerIntRegion
&
aCompositeRegion
const
Maybe
<
gfx
:
:
Polygon
>
&
aGeometry
)
;
void
CleanupResources
(
)
;
private
:
RefPtr
<
ContentHost
>
mHost
;
RefPtr
<
TextureSource
>
mTexture
;
RefPtr
<
TextureSource
>
mTextureOnWhite
;
#
ifndef
MOZ_IGNORE_PAINT_WILL_RESAMPLE
LayerIntRegion
mDrawRects
;
#
endif
gfx
:
:
IntPoint
mDestOrigin
;
}
;
}
}
#
endif
