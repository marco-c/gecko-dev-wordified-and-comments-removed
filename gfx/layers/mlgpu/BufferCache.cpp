#
include
"
BufferCache
.
h
"
#
include
"
MLGDevice
.
h
"
#
include
"
ShaderDefinitionsMLGPU
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mlg
;
BufferCache
:
:
BufferCache
(
MLGDevice
*
aDevice
)
:
mDevice
(
aDevice
)
mFirstSizeClass
(
CeilingLog2
(
kConstantBufferElementSize
)
)
mFrameNumber
(
0
)
mNextSizeClassToShrink
(
0
)
{
size_t
maxBindSize
=
mDevice
-
>
GetMaxConstantBufferBindSize
(
)
;
MOZ_ASSERT
(
IsPowerOfTwo
(
maxBindSize
)
)
;
size_t
lastSizeClass
=
CeilingLog2
(
maxBindSize
)
;
MOZ_ASSERT
(
lastSizeClass
>
=
mFirstSizeClass
)
;
mCaches
.
resize
(
lastSizeClass
-
mFirstSizeClass
+
1
)
;
}
BufferCache
:
:
~
BufferCache
(
)
{
}
RefPtr
<
MLGBuffer
>
BufferCache
:
:
GetOrCreateBuffer
(
size_t
aBytes
)
{
size_t
sizeClass
=
CeilingLog2
(
aBytes
)
;
size_t
sizeClassIndex
=
sizeClass
-
mFirstSizeClass
;
if
(
sizeClassIndex
>
=
mCaches
.
size
(
)
)
{
return
mDevice
-
>
CreateBuffer
(
MLGBufferType
:
:
Constant
aBytes
MLGUsage
:
:
Dynamic
nullptr
)
;
}
CachePool
&
pool
=
mCaches
[
sizeClassIndex
]
;
if
(
!
pool
.
empty
(
)
&
&
mFrameNumber
>
=
pool
.
front
(
)
.
mLastUsedFrame
+
2
)
{
RefPtr
<
MLGBuffer
>
buffer
=
pool
.
front
(
)
.
mBuffer
;
pool
.
pop_front
(
)
;
pool
.
push_back
(
CacheEntry
(
mFrameNumber
buffer
)
)
;
MOZ_RELEASE_ASSERT
(
buffer
-
>
GetSize
(
)
>
=
aBytes
)
;
return
buffer
;
}
size_t
bytes
=
(
size_t
(
1
)
<
<
sizeClass
)
;
MOZ_ASSERT
(
bytes
>
=
aBytes
)
;
RefPtr
<
MLGBuffer
>
buffer
=
mDevice
-
>
CreateBuffer
(
MLGBufferType
:
:
Constant
bytes
MLGUsage
:
:
Dynamic
nullptr
)
;
if
(
!
buffer
)
{
return
nullptr
;
}
pool
.
push_back
(
CacheEntry
(
mFrameNumber
buffer
)
)
;
return
buffer
;
}
void
BufferCache
:
:
EndFrame
(
)
{
static
size_t
kMaxUnusedFrameCount
=
60
*
5
;
CachePool
&
pool
=
mCaches
[
mNextSizeClassToShrink
]
;
while
(
!
pool
.
empty
(
)
)
{
if
(
mFrameNumber
-
pool
.
front
(
)
.
mLastUsedFrame
<
kMaxUnusedFrameCount
)
{
break
;
}
pool
.
pop_front
(
)
;
}
mNextSizeClassToShrink
=
(
mNextSizeClassToShrink
+
1
)
%
mCaches
.
size
(
)
;
mFrameNumber
+
+
;
}
}
}
