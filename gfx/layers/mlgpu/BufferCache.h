#
ifndef
mozilla_gfx_layers_mlgpu_BufferCache_h
#
define
mozilla_gfx_layers_mlgpu_BufferCache_h
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
deque
>
namespace
mozilla
{
namespace
layers
{
class
MLGBuffer
;
class
MLGDevice
;
class
BufferPool
{
public
:
RefPtr
<
MLGBuffer
>
Take
(
size_t
aBytes
)
;
void
Put
(
MLGBuffer
*
aBuffer
)
;
BufferPool
&
operator
=
(
BufferPool
&
&
aOther
)
{
mClasses
=
Move
(
aOther
.
mClasses
)
;
mHugeBuffers
=
Move
(
aOther
.
mHugeBuffers
)
;
return
*
this
;
}
private
:
RefPtr
<
MLGBuffer
>
TakeHugeBuffer
(
size_t
aBytes
)
;
enum
class
SizeClass
{
One
Two
Four
Eight
Medium
Large
Huge
}
;
static
SizeClass
GetSizeClassFromHighBit
(
size_t
bit
)
;
private
:
typedef
nsTArray
<
RefPtr
<
MLGBuffer
>
>
BufferList
;
EnumeratedArray
<
SizeClass
SizeClass
:
:
Huge
BufferList
>
mClasses
;
std
:
:
deque
<
RefPtr
<
MLGBuffer
>
>
mHugeBuffers
;
}
;
class
BufferCache
{
public
:
explicit
BufferCache
(
MLGDevice
*
aDevice
)
;
~
BufferCache
(
)
;
RefPtr
<
MLGBuffer
>
GetOrCreateBuffer
(
size_t
aBytes
)
;
void
EndFrame
(
)
;
private
:
MLGDevice
*
mDevice
;
BufferPool
mExpired
;
BufferPool
mPrevious
;
BufferPool
mCurrent
;
}
;
}
}
#
endif
