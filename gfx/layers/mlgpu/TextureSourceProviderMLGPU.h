#
ifndef
mozilla_gfx_layers_mlgpu_TextureSourceProviderMLGPU_h
#
define
mozilla_gfx_layers_mlgpu_TextureSourceProviderMLGPU_h
#
include
"
mozilla
/
layers
/
TextureSourceProvider
.
h
"
namespace
mozilla
{
namespace
layers
{
class
MLGDevice
;
class
LayerManagerMLGPU
;
class
TextureSourceProviderMLGPU
final
:
public
TextureSourceProvider
{
public
:
TextureSourceProviderMLGPU
(
LayerManagerMLGPU
*
aLayerManager
MLGDevice
*
aDevice
)
;
virtual
~
TextureSourceProviderMLGPU
(
)
;
already_AddRefed
<
DataTextureSource
>
CreateDataTextureSource
(
TextureFlags
aFlags
)
override
;
already_AddRefed
<
DataTextureSource
>
CreateDataTextureSourceAround
(
gfx
:
:
DataSourceSurface
*
aSurface
)
override
;
void
UnlockAfterComposition
(
TextureHost
*
aTexture
)
override
;
bool
NotifyNotUsedAfterComposition
(
TextureHost
*
aTextureHost
)
override
;
int32_t
GetMaxTextureSize
(
)
const
override
;
TimeStamp
GetLastCompositionEndTime
(
)
const
override
;
bool
SupportsEffect
(
EffectTypes
aEffect
)
override
;
bool
IsValid
(
)
const
override
;
#
ifdef
XP_WIN
ID3D11Device
*
GetD3D11Device
(
)
const
override
;
#
endif
void
ReadUnlockTextures
(
)
{
TextureSourceProvider
:
:
ReadUnlockTextures
(
)
;
}
void
Destroy
(
)
override
;
private
:
LayerManagerMLGPU
*
mLayerManager
;
RefPtr
<
MLGDevice
>
mDevice
;
}
;
}
}
#
endif
