#
ifndef
MOZILLA_GFX_COMPOSITORD3D9_H
#
define
MOZILLA_GFX_COMPOSITORD3D9_H
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
gfx2DGlue
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
TextureD3D9
.
h
"
#
include
"
DeviceManagerD3D9
.
h
"
class
nsWidget
;
namespace
mozilla
{
namespace
layers
{
class
CompositorD3D9
:
public
Compositor
{
public
:
CompositorD3D9
(
CompositorBridgeParent
*
aParent
widget
:
:
CompositorWidgetProxy
*
aWidget
)
;
~
CompositorD3D9
(
)
;
virtual
CompositorD3D9
*
AsCompositorD3D9
(
)
override
{
return
this
;
}
virtual
bool
Initialize
(
)
override
;
virtual
void
Destroy
(
)
override
{
}
virtual
TextureFactoryIdentifier
GetTextureFactoryIdentifier
(
)
override
;
virtual
bool
CanUseCanvasLayerForSize
(
const
gfx
:
:
IntSize
&
aSize
)
override
;
virtual
int32_t
GetMaxTextureSize
(
)
const
final
;
virtual
void
MakeCurrent
(
MakeCurrentFlags
aFlags
=
0
)
override
{
}
virtual
already_AddRefed
<
CompositingRenderTarget
>
CreateRenderTarget
(
const
gfx
:
:
IntRect
&
aRect
SurfaceInitMode
aInit
)
override
;
virtual
already_AddRefed
<
CompositingRenderTarget
>
CreateRenderTargetFromSource
(
const
gfx
:
:
IntRect
&
aRect
const
CompositingRenderTarget
*
aSource
const
gfx
:
:
IntPoint
&
aSourcePoint
)
override
;
virtual
void
SetRenderTarget
(
CompositingRenderTarget
*
aSurface
)
override
;
virtual
CompositingRenderTarget
*
GetCurrentRenderTarget
(
)
const
override
{
return
mCurrentRT
;
}
virtual
void
SetDestinationSurfaceSize
(
const
gfx
:
:
IntSize
&
aSize
)
override
{
}
virtual
void
ClearRect
(
const
gfx
:
:
Rect
&
aRect
)
override
;
virtual
void
DrawQuad
(
const
gfx
:
:
Rect
&
aRect
const
gfx
:
:
IntRect
&
aClipRect
const
EffectChain
&
aEffectChain
gfx
:
:
Float
aOpacity
const
gfx
:
:
Matrix4x4
&
aTransform
const
gfx
:
:
Rect
&
aVisibleRect
)
override
;
virtual
void
BeginFrame
(
const
nsIntRegion
&
aInvalidRegion
const
gfx
:
:
IntRect
*
aClipRectIn
const
gfx
:
:
IntRect
&
aRenderBounds
const
nsIntRegion
&
aOpaqueRegion
gfx
:
:
IntRect
*
aClipRectOut
=
nullptr
gfx
:
:
IntRect
*
aRenderBoundsOut
=
nullptr
)
override
;
virtual
void
EndFrame
(
)
override
;
virtual
void
EndFrameForExternalComposition
(
const
gfx
:
:
Matrix
&
aTransform
)
override
{
}
virtual
void
PrepareViewport
(
const
gfx
:
:
IntSize
&
aSize
)
;
virtual
bool
SupportsPartialTextureUpdate
(
)
override
{
return
true
;
}
#
ifdef
MOZ_DUMP_PAINTING
virtual
const
char
*
Name
(
)
const
override
{
return
"
Direct3D9
"
;
}
#
endif
virtual
LayersBackend
GetBackendType
(
)
const
override
{
return
LayersBackend
:
:
LAYERS_D3D9
;
}
IDirect3DDevice9
*
device
(
)
const
{
return
mDeviceManager
&
&
mDeviceResetCount
=
=
mDeviceManager
-
>
GetDeviceResetCount
(
)
?
mDeviceManager
-
>
device
(
)
:
nullptr
;
}
virtual
bool
Ready
(
)
override
;
virtual
void
SetScreenRenderOffset
(
const
ScreenPoint
&
aOffset
)
override
{
if
(
aOffset
.
x
|
|
aOffset
.
y
)
{
NS_RUNTIMEABORT
(
"
SetScreenRenderOffset
not
supported
by
CompositorD3D9
.
"
)
;
}
}
virtual
already_AddRefed
<
DataTextureSource
>
CreateDataTextureSource
(
TextureFlags
aFlags
=
TextureFlags
:
:
NO_FLAGS
)
override
;
private
:
void
EnsureSize
(
)
;
void
SetSamplerForSamplingFilter
(
gfx
:
:
SamplingFilter
aSamplingFilter
)
;
void
PaintToTarget
(
)
;
void
SetMask
(
const
EffectChain
&
aEffectChain
uint32_t
aMaskTexture
)
;
bool
EnsureSwapChain
(
)
;
already_AddRefed
<
IDirect3DTexture9
>
CreateTexture
(
const
gfx
:
:
IntRect
&
aRect
const
CompositingRenderTarget
*
aSource
const
gfx
:
:
IntPoint
&
aSourcePoint
)
;
void
FinishMixBlend
(
const
gfx
:
:
IntRect
&
aBackdropRect
const
gfx
:
:
Rect
&
aBackdropDest
const
gfx
:
:
Matrix4x4
&
aBackdropTransform
RefPtr
<
IDirect3DTexture9
>
aBackdrop
gfx
:
:
CompositionOp
aBlendMode
)
;
void
CheckResetCount
(
)
;
void
FailedToResetDevice
(
)
;
void
ReportFailure
(
const
nsACString
&
aMsg
HRESULT
aCode
)
;
RefPtr
<
DeviceManagerD3D9
>
mDeviceManager
;
RefPtr
<
SwapChainD3D9
>
mSwapChain
;
RefPtr
<
CompositingRenderTargetD3D9
>
mDefaultRT
;
RefPtr
<
CompositingRenderTargetD3D9
>
mCurrentRT
;
LayoutDeviceIntSize
mSize
;
uint32_t
mDeviceResetCount
;
uint32_t
mFailedResetAttempts
;
}
;
}
}
#
endif
