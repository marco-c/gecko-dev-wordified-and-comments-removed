#
ifndef
MOZILLA_LAYERS_BSPTREE_H
#
define
MOZILLA_LAYERS_BSPTREE_H
#
include
"
mozilla
/
ArenaAllocator
.
h
"
#
include
"
mozilla
/
gfx
/
Polygon
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
list
>
namespace
mozilla
{
namespace
layers
{
class
Layer
;
struct
LayerPolygon
{
explicit
LayerPolygon
(
Layer
*
aLayer
)
:
layer
(
aLayer
)
{
}
LayerPolygon
(
Layer
*
aLayer
gfx
:
:
Polygon
&
&
aGeometry
)
:
layer
(
aLayer
)
geometry
(
Some
(
Move
(
aGeometry
)
)
)
{
}
LayerPolygon
(
Layer
*
aLayer
nsTArray
<
gfx
:
:
Point4D
>
&
&
aPoints
const
gfx
:
:
Point4D
&
aNormal
)
:
layer
(
aLayer
)
{
geometry
.
emplace
(
Move
(
aPoints
)
aNormal
)
;
}
Layer
*
layer
;
Maybe
<
gfx
:
:
Polygon
>
geometry
;
}
;
typedef
mozilla
:
:
ArenaAllocator
<
4096
8
>
BSPTreeArena
;
struct
BSPTreeNode
{
BSPTreeNode
(
)
:
front
(
nullptr
)
back
(
nullptr
)
{
}
const
gfx
:
:
Polygon
&
First
(
)
const
{
MOZ_ASSERT
(
!
layers
.
empty
(
)
)
;
MOZ_ASSERT
(
layers
.
front
(
)
.
geometry
)
;
return
*
layers
.
front
(
)
.
geometry
;
}
static
void
*
operator
new
(
size_t
aSize
BSPTreeArena
&
mPool
)
{
return
mPool
.
Allocate
(
aSize
)
;
}
BSPTreeNode
*
front
;
BSPTreeNode
*
back
;
std
:
:
list
<
LayerPolygon
>
layers
;
}
;
class
BSPTree
{
public
:
explicit
BSPTree
(
std
:
:
list
<
LayerPolygon
>
&
aLayers
)
{
MOZ_ASSERT
(
!
aLayers
.
empty
(
)
)
;
mRoot
=
new
(
mPool
)
BSPTreeNode
(
)
;
BuildTree
(
mRoot
aLayers
)
;
}
nsTArray
<
LayerPolygon
>
GetDrawOrder
(
)
const
{
nsTArray
<
LayerPolygon
>
layers
;
BuildDrawOrder
(
mRoot
layers
)
;
return
layers
;
}
private
:
BSPTreeArena
mPool
;
BSPTreeNode
*
mRoot
;
void
BuildDrawOrder
(
BSPTreeNode
*
aNode
nsTArray
<
LayerPolygon
>
&
aLayers
)
const
;
void
BuildTree
(
BSPTreeNode
*
aRoot
std
:
:
list
<
LayerPolygon
>
&
aLayers
)
;
}
;
}
}
#
endif
