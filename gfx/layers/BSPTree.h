#
ifndef
MOZILLA_LAYERS_BSPTREE_H
#
define
MOZILLA_LAYERS_BSPTREE_H
#
include
"
mozilla
/
gfx
/
Polygon
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
deque
>
namespace
mozilla
{
namespace
layers
{
gfx
:
:
Polygon3D
PopFront
(
std
:
:
deque
<
gfx
:
:
Polygon3D
>
&
aPolygons
)
;
struct
BSPTreeNode
{
explicit
BSPTreeNode
(
gfx
:
:
Polygon3D
&
&
aPolygon
)
{
polygons
.
push_back
(
std
:
:
move
(
aPolygon
)
)
;
}
const
gfx
:
:
Polygon3D
&
First
(
)
const
{
return
polygons
[
0
]
;
}
UniquePtr
<
BSPTreeNode
>
front
;
UniquePtr
<
BSPTreeNode
>
back
;
std
:
:
deque
<
gfx
:
:
Polygon3D
>
polygons
;
}
;
class
BSPTree
{
public
:
explicit
BSPTree
(
std
:
:
deque
<
gfx
:
:
Polygon3D
>
&
aPolygons
)
:
mRoot
(
new
BSPTreeNode
(
PopFront
(
aPolygons
)
)
)
{
BuildTree
(
mRoot
aPolygons
)
;
}
const
UniquePtr
<
BSPTreeNode
>
&
GetRoot
(
)
const
{
return
mRoot
;
}
nsTArray
<
gfx
:
:
Polygon3D
>
GetDrawOrder
(
)
const
{
nsTArray
<
gfx
:
:
Polygon3D
>
polygons
;
BuildDrawOrder
(
mRoot
polygons
)
;
return
polygons
;
}
private
:
UniquePtr
<
BSPTreeNode
>
mRoot
;
void
BuildDrawOrder
(
const
UniquePtr
<
BSPTreeNode
>
&
aNode
nsTArray
<
gfx
:
:
Polygon3D
>
&
aPolygons
)
const
;
void
BuildTree
(
UniquePtr
<
BSPTreeNode
>
&
aRoot
std
:
:
deque
<
gfx
:
:
Polygon3D
>
&
aPolygons
)
;
nsTArray
<
float
>
CalculateDotProduct
(
const
gfx
:
:
Polygon3D
&
aFirst
const
gfx
:
:
Polygon3D
&
aSecond
size_t
&
aPos
size_t
&
aNeg
)
const
;
void
SplitPolygon
(
const
gfx
:
:
Polygon3D
&
aSplittingPlane
const
gfx
:
:
Polygon3D
&
aPolygon
const
nsTArray
<
float
>
&
dots
nsTArray
<
gfx
:
:
Point3D
>
&
backPoints
nsTArray
<
gfx
:
:
Point3D
>
&
frontPoints
)
;
}
;
}
}
#
endif
