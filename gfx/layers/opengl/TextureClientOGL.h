#
ifndef
MOZILLA_GFX_TEXTURECLIENTOGL_H
#
define
MOZILLA_GFX_TEXTURECLIENTOGL_H
#
include
"
GLContextTypes
.
h
"
#
include
"
GLImages
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
AndroidSurfaceTexture
.
h
"
namespace
mozilla
{
namespace
layers
{
class
EGLImageTextureData
:
public
TextureData
{
public
:
static
already_AddRefed
<
TextureClient
>
CreateTextureClient
(
EGLImageImage
*
aImage
gfx
:
:
IntSize
aSize
ClientIPCAllocator
*
aAllocator
TextureFlags
aFlags
)
;
virtual
bool
HasIntermediateBuffer
(
)
const
override
{
return
false
;
}
virtual
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
virtual
bool
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
override
;
virtual
void
Deallocate
(
ClientIPCAllocator
*
)
override
{
mImage
=
nullptr
;
}
virtual
void
Forget
(
ClientIPCAllocator
*
)
override
{
mImage
=
nullptr
;
}
virtual
bool
Lock
(
OpenMode
FenceHandle
*
)
override
{
return
true
;
}
virtual
void
Unlock
(
)
override
{
}
virtual
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
{
return
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
;
}
protected
:
EGLImageTextureData
(
EGLImageImage
*
aImage
gfx
:
:
IntSize
aSize
)
;
RefPtr
<
EGLImageImage
>
mImage
;
const
gfx
:
:
IntSize
mSize
;
}
;
#
ifdef
MOZ_WIDGET_ANDROID
class
AndroidSurfaceTextureData
:
public
TextureData
{
public
:
static
already_AddRefed
<
TextureClient
>
CreateTextureClient
(
gl
:
:
AndroidSurfaceTexture
*
aSurfTex
gfx
:
:
IntSize
aSize
gl
:
:
OriginPos
aOriginPos
ClientIPCAllocator
*
aAllocator
TextureFlags
aFlags
)
;
~
AndroidSurfaceTextureData
(
)
;
virtual
bool
HasIntermediateBuffer
(
)
const
override
{
return
false
;
}
virtual
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
virtual
bool
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
override
;
virtual
bool
Lock
(
OpenMode
FenceHandle
*
)
override
{
return
true
;
}
virtual
void
Unlock
(
)
override
{
}
virtual
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
{
return
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
;
}
virtual
void
Deallocate
(
ClientIPCAllocator
*
)
override
{
}
protected
:
AndroidSurfaceTextureData
(
gl
:
:
AndroidSurfaceTexture
*
aSurfTex
gfx
:
:
IntSize
aSize
)
;
const
RefPtr
<
gl
:
:
AndroidSurfaceTexture
>
mSurfTex
;
const
gfx
:
:
IntSize
mSize
;
}
;
#
endif
}
}
#
endif
