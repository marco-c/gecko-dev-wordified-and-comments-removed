#
ifndef
MOZILLA_GFX_TEXTURECLIENTOGL_H
#
define
MOZILLA_GFX_TEXTURECLIENTOGL_H
#
include
"
GLContextTypes
.
h
"
#
include
"
GLImages
.
h
"
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
AndroidSurfaceTexture
.
h
"
#
include
"
AndroidNativeWindow
.
h
"
#
ifdef
MOZ_WIDGET_ANDROID
#
include
"
GeneratedJNIWrappers
.
h
"
#
endif
namespace
mozilla
{
namespace
layers
{
#
ifdef
MOZ_WIDGET_ANDROID
class
AndroidSurfaceTextureData
:
public
TextureData
{
public
:
static
already_AddRefed
<
TextureClient
>
CreateTextureClient
(
AndroidSurfaceTextureHandle
aHandle
gfx
:
:
IntSize
aSize
bool
aContinuous
gl
:
:
OriginPos
aOriginPos
LayersIPCChannel
*
aAllocator
TextureFlags
aFlags
)
;
~
AndroidSurfaceTextureData
(
)
;
virtual
void
FillInfo
(
TextureData
:
:
Info
&
aInfo
)
const
override
;
virtual
bool
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
override
;
virtual
bool
Lock
(
OpenMode
)
override
{
return
true
;
}
virtual
void
Unlock
(
)
override
{
}
virtual
void
Deallocate
(
LayersIPCChannel
*
)
override
{
}
protected
:
AndroidSurfaceTextureData
(
AndroidSurfaceTextureHandle
aHandle
gfx
:
:
IntSize
aSize
bool
aContinuous
)
;
const
AndroidSurfaceTextureHandle
mHandle
;
const
gfx
:
:
IntSize
mSize
;
const
bool
mContinuous
;
}
;
#
endif
#
ifdef
MOZ_WIDGET_ANDROID
class
AndroidNativeWindowTextureData
:
public
TextureData
{
public
:
static
AndroidNativeWindowTextureData
*
Create
(
gfx
:
:
IntSize
aSize
SurfaceFormat
aFormat
)
;
virtual
void
FillInfo
(
TextureData
:
:
Info
&
aInfo
)
const
override
;
virtual
bool
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
override
;
virtual
bool
Lock
(
OpenMode
)
override
;
virtual
void
Unlock
(
)
override
;
virtual
void
Forget
(
LayersIPCChannel
*
)
override
;
virtual
void
Deallocate
(
LayersIPCChannel
*
)
override
{
}
virtual
already_AddRefed
<
DrawTarget
>
BorrowDrawTarget
(
)
override
;
virtual
void
OnForwardedToHost
(
)
override
;
protected
:
AndroidNativeWindowTextureData
(
java
:
:
GeckoSurface
:
:
Param
aSurface
gfx
:
:
IntSize
aSize
SurfaceFormat
aFormat
)
;
private
:
java
:
:
GeckoSurface
:
:
GlobalRef
mSurface
;
ANativeWindow
*
mNativeWindow
;
ANativeWindow_Buffer
mBuffer
;
bool
mIsLocked
;
const
gfx
:
:
IntSize
mSize
;
const
SurfaceFormat
mFormat
;
}
;
#
endif
}
}
#
endif
