#
include
"
GLContext
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
TextureClientOGL
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
GLLibraryEGL
.
h
"
using
namespace
mozilla
:
:
gl
;
namespace
mozilla
{
namespace
layers
{
class
CompositableForwarder
;
EGLImageTextureData
:
:
EGLImageTextureData
(
EGLImageImage
*
aImage
gfx
:
:
IntSize
aSize
)
:
mImage
(
aImage
)
mSize
(
aSize
)
{
MOZ_ASSERT
(
aImage
)
;
}
already_AddRefed
<
TextureClient
>
EGLImageTextureData
:
:
CreateTextureClient
(
EGLImageImage
*
aImage
gfx
:
:
IntSize
aSize
ClientIPCAllocator
*
aAllocator
TextureFlags
aFlags
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
Can
'
t
pass
an
EGLImage
between
processes
.
"
)
;
if
(
!
aImage
|
|
!
XRE_IsParentProcess
(
)
)
{
return
nullptr
;
}
aFlags
|
=
TextureFlags
:
:
DEALLOCATE_CLIENT
;
if
(
aImage
-
>
GetOriginPos
(
)
=
=
gl
:
:
OriginPos
:
:
BottomLeft
)
{
aFlags
|
=
TextureFlags
:
:
ORIGIN_BOTTOM_LEFT
;
}
return
TextureClient
:
:
CreateWithData
(
new
EGLImageTextureData
(
aImage
aSize
)
aFlags
aAllocator
)
;
}
bool
EGLImageTextureData
:
:
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
{
const
bool
hasAlpha
=
true
;
aOutDescriptor
=
EGLImageDescriptor
(
(
uintptr_t
)
mImage
-
>
GetImage
(
)
(
uintptr_t
)
mImage
-
>
GetSync
(
)
mImage
-
>
GetSize
(
)
hasAlpha
)
;
return
true
;
}
#
ifdef
MOZ_WIDGET_ANDROID
already_AddRefed
<
TextureClient
>
AndroidSurfaceTextureData
:
:
CreateTextureClient
(
AndroidSurfaceTexture
*
aSurfTex
gfx
:
:
IntSize
aSize
gl
:
:
OriginPos
aOriginPos
ClientIPCAllocator
*
aAllocator
TextureFlags
aFlags
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
"
Can
'
t
pass
an
android
surfaces
between
processes
.
"
)
;
if
(
!
aSurfTex
|
|
!
XRE_IsParentProcess
(
)
)
{
return
nullptr
;
}
if
(
aOriginPos
=
=
gl
:
:
OriginPos
:
:
BottomLeft
)
{
aFlags
|
=
TextureFlags
:
:
ORIGIN_BOTTOM_LEFT
;
}
return
TextureClient
:
:
CreateWithData
(
new
AndroidSurfaceTextureData
(
aSurfTex
aSize
)
aFlags
aAllocator
)
;
}
AndroidSurfaceTextureData
:
:
AndroidSurfaceTextureData
(
AndroidSurfaceTexture
*
aSurfTex
gfx
:
:
IntSize
aSize
)
:
mSurfTex
(
aSurfTex
)
mSize
(
aSize
)
{
}
AndroidSurfaceTextureData
:
:
~
AndroidSurfaceTextureData
(
)
{
}
bool
AndroidSurfaceTextureData
:
:
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
{
aOutDescriptor
=
SurfaceTextureDescriptor
(
(
uintptr_t
)
mSurfTex
.
get
(
)
mSize
)
;
return
true
;
}
#
endif
}
}
