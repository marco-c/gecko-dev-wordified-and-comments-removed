#
include
"
GLManager
.
h
"
#
include
"
CompositorOGL
.
h
"
#
include
"
GLContext
.
h
"
#
include
"
OGLShaderProgram
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
using
namespace
mozilla
:
:
gl
;
namespace
mozilla
{
namespace
layers
{
class
GLManagerCompositor
:
public
GLManager
{
public
:
explicit
GLManagerCompositor
(
CompositorOGL
*
aCompositor
)
:
mImpl
(
aCompositor
)
{
}
GLContext
*
gl
(
)
const
override
{
return
mImpl
-
>
gl
(
)
;
}
void
ActivateProgram
(
ShaderProgramOGL
*
aProg
)
override
{
mImpl
-
>
ActivateProgram
(
aProg
)
;
}
ShaderProgramOGL
*
GetProgram
(
GLenum
aTarget
gfx
:
:
SurfaceFormat
aFormat
)
override
{
ShaderConfigOGL
config
=
ShaderConfigFromTargetAndFormat
(
aTarget
aFormat
)
;
return
mImpl
-
>
GetShaderProgramFor
(
config
)
;
}
const
gfx
:
:
Matrix4x4
&
GetProjMatrix
(
)
const
override
{
return
mImpl
-
>
GetProjMatrix
(
)
;
}
void
BindAndDrawQuad
(
ShaderProgramOGL
*
aProg
const
gfx
:
:
Rect
&
aLayerRect
const
gfx
:
:
Rect
&
aTextureRect
)
override
{
mImpl
-
>
BindAndDrawQuad
(
aProg
aLayerRect
aTextureRect
)
;
}
private
:
RefPtr
<
CompositorOGL
>
mImpl
;
}
;
GLManager
*
GLManager
:
:
CreateGLManager
(
LayerManagerComposite
*
aManager
)
{
if
(
aManager
&
&
aManager
-
>
GetCompositor
(
)
-
>
GetBackendType
(
)
=
=
LayersBackend
:
:
LAYERS_OPENGL
)
{
return
new
GLManagerCompositor
(
aManager
-
>
GetCompositor
(
)
-
>
AsCompositorOGL
(
)
)
;
}
return
nullptr
;
}
}
}
