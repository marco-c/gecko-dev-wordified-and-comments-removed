#
ifndef
MOZILLA_GFX_COMPOSITINGRENDERTARGETOGL_H
#
define
MOZILLA_GFX_COMPOSITINGRENDERTARGETOGL_H
#
include
"
GLContextTypes
.
h
"
#
include
"
GLDefs
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
layers
/
CompositorOGL
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
nsAString
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsString
.
h
"
namespace
mozilla
{
namespace
gl
{
class
BindableTexture
;
}
namespace
gfx
{
class
DataSourceSurface
;
}
namespace
layers
{
class
TextureSource
;
class
CompositingRenderTargetOGL
:
public
CompositingRenderTarget
{
typedef
mozilla
:
:
gl
:
:
GLContext
GLContext
;
friend
class
CompositorOGL
;
struct
InitParams
{
InitParams
(
)
:
mStatus
(
NO_PARAMS
)
mFBOTextureTarget
(
0
)
mInit
(
INIT_MODE_NONE
)
{
}
InitParams
(
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
IntSize
&
aPhySize
GLenum
aFBOTextureTarget
SurfaceInitMode
aInit
)
:
mStatus
(
READY
)
mSize
(
aSize
)
mPhySize
(
aPhySize
)
mFBOTextureTarget
(
aFBOTextureTarget
)
mInit
(
aInit
)
{
}
enum
{
NO_PARAMS
READY
INITIALIZED
}
mStatus
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
IntSize
mPhySize
;
GLenum
mFBOTextureTarget
;
SurfaceInitMode
mInit
;
}
;
public
:
CompositingRenderTargetOGL
(
CompositorOGL
*
aCompositor
const
gfx
:
:
IntPoint
&
aOrigin
GLuint
aTexure
GLuint
aFBO
)
:
CompositingRenderTarget
(
aOrigin
)
mInitParams
(
)
mCompositor
(
aCompositor
)
mGL
(
aCompositor
-
>
gl
(
)
)
mTextureHandle
(
aTexure
)
mFBO
(
aFBO
)
{
MOZ_ASSERT
(
mGL
)
;
}
~
CompositingRenderTargetOGL
(
)
;
const
char
*
Name
(
)
const
override
{
return
"
CompositingRenderTargetOGL
"
;
}
static
already_AddRefed
<
CompositingRenderTargetOGL
>
RenderTargetForWindow
(
CompositorOGL
*
aCompositor
const
gfx
:
:
IntSize
&
aSize
)
{
RefPtr
<
CompositingRenderTargetOGL
>
result
=
new
CompositingRenderTargetOGL
(
aCompositor
gfx
:
:
IntPoint
(
)
0
0
)
;
result
-
>
mInitParams
=
InitParams
(
aSize
aSize
0
INIT_MODE_NONE
)
;
result
-
>
mInitParams
.
mStatus
=
InitParams
:
:
INITIALIZED
;
return
result
.
forget
(
)
;
}
void
Initialize
(
const
gfx
:
:
IntSize
&
aSize
const
gfx
:
:
IntSize
&
aPhySize
GLenum
aFBOTextureTarget
SurfaceInitMode
aInit
)
{
MOZ_ASSERT
(
mInitParams
.
mStatus
=
=
InitParams
:
:
NO_PARAMS
"
Initialized
twice
?
"
)
;
mInitParams
=
InitParams
(
aSize
aPhySize
aFBOTextureTarget
aInit
)
;
}
void
BindTexture
(
GLenum
aTextureUnit
GLenum
aTextureTarget
)
;
void
BindRenderTarget
(
)
;
bool
IsWindow
(
)
{
return
mFBO
=
=
0
;
}
GLuint
GetFBO
(
)
const
;
GLuint
GetTextureHandle
(
)
const
{
MOZ_ASSERT
(
mInitParams
.
mStatus
=
=
InitParams
:
:
INITIALIZED
)
;
return
mTextureHandle
;
}
TextureSourceOGL
*
AsSourceOGL
(
)
override
{
MOZ_ASSERT
(
false
"
CompositingRenderTargetOGL
should
not
be
used
as
a
TextureSource
"
)
;
return
nullptr
;
}
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mInitParams
.
mSize
;
}
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
{
MOZ_ASSERT
(
false
"
Not
implemented
"
)
;
return
gfx
:
:
SurfaceFormat
:
:
UNKNOWN
;
}
void
SetClipRect
(
const
Maybe
<
gfx
:
:
IntRect
>
&
aRect
)
{
mClipRect
=
aRect
;
}
const
Maybe
<
gfx
:
:
IntRect
>
&
GetClipRect
(
)
const
{
return
mClipRect
;
}
#
ifdef
MOZ_DUMP_PAINTING
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
Dump
(
Compositor
*
aCompositor
)
override
;
#
endif
const
gfx
:
:
IntSize
&
GetInitSize
(
)
const
{
return
mInitParams
.
mSize
;
}
private
:
void
InitializeImpl
(
)
;
InitParams
mInitParams
;
RefPtr
<
CompositorOGL
>
mCompositor
;
RefPtr
<
GLContext
>
mGL
;
Maybe
<
gfx
:
:
IntRect
>
mClipRect
;
GLuint
mTextureHandle
;
GLuint
mFBO
;
}
;
}
}
#
endif
