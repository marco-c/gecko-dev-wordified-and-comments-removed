#
ifdef
GL_PROVIDER_GLX
#
include
"
X11TextureSourceOGL
.
h
"
#
include
"
gfxXlibSurface
.
h
"
#
include
"
gfx2DGlue
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
gfx
;
X11TextureSourceOGL
:
:
X11TextureSourceOGL
(
CompositorOGL
*
aCompositor
gfxXlibSurface
*
aSurface
)
:
mCompositor
(
aCompositor
)
mSurface
(
aSurface
)
mTexture
(
0
)
mUpdated
(
false
)
{
}
X11TextureSourceOGL
:
:
~
X11TextureSourceOGL
(
)
{
DeallocateDeviceData
(
)
;
}
void
X11TextureSourceOGL
:
:
DeallocateDeviceData
(
)
{
if
(
mTexture
)
{
if
(
gl
(
)
&
&
gl
(
)
-
>
MakeCurrent
(
)
)
{
gl
:
:
sGLXLibrary
.
ReleaseTexImage
(
mSurface
-
>
XDisplay
(
)
mSurface
-
>
GetGLXPixmap
(
)
)
;
gl
(
)
-
>
fDeleteTextures
(
1
&
mTexture
)
;
mTexture
=
0
;
}
}
}
void
X11TextureSourceOGL
:
:
BindTexture
(
GLenum
aTextureUnit
gfx
:
:
SamplingFilter
aSamplingFilter
)
{
gl
(
)
-
>
fActiveTexture
(
aTextureUnit
)
;
if
(
!
mTexture
)
{
gl
(
)
-
>
fGenTextures
(
1
&
mTexture
)
;
gl
(
)
-
>
fBindTexture
(
LOCAL_GL_TEXTURE_2D
mTexture
)
;
gl
:
:
sGLXLibrary
.
BindTexImage
(
mSurface
-
>
XDisplay
(
)
mSurface
-
>
GetGLXPixmap
(
)
)
;
}
else
{
gl
(
)
-
>
fBindTexture
(
LOCAL_GL_TEXTURE_2D
mTexture
)
;
if
(
mUpdated
)
{
gl
:
:
sGLXLibrary
.
UpdateTexImage
(
mSurface
-
>
XDisplay
(
)
mSurface
-
>
GetGLXPixmap
(
)
)
;
mUpdated
=
false
;
}
}
ApplySamplingFilterToBoundTexture
(
gl
(
)
aSamplingFilter
LOCAL_GL_TEXTURE_2D
)
;
}
IntSize
X11TextureSourceOGL
:
:
GetSize
(
)
const
{
return
mSurface
-
>
GetSize
(
)
;
}
SurfaceFormat
X11TextureSourceOGL
:
:
GetFormat
(
)
const
{
gfxContentType
type
=
mSurface
-
>
GetContentType
(
)
;
return
X11TextureSourceOGL
:
:
ContentTypeToSurfaceFormat
(
type
)
;
}
void
X11TextureSourceOGL
:
:
SetCompositor
(
Compositor
*
aCompositor
)
{
CompositorOGL
*
glCompositor
=
AssertGLCompositor
(
aCompositor
)
;
if
(
mCompositor
=
=
glCompositor
)
{
return
;
}
DeallocateDeviceData
(
)
;
if
(
glCompositor
)
{
mCompositor
=
glCompositor
;
}
}
gl
:
:
GLContext
*
X11TextureSourceOGL
:
:
gl
(
)
const
{
return
mCompositor
?
mCompositor
-
>
gl
(
)
:
nullptr
;
}
SurfaceFormat
X11TextureSourceOGL
:
:
ContentTypeToSurfaceFormat
(
gfxContentType
aType
)
{
switch
(
aType
)
{
case
gfxContentType
:
:
COLOR
:
return
SurfaceFormat
:
:
R8G8B8X8
;
case
gfxContentType
:
:
COLOR_ALPHA
:
return
SurfaceFormat
:
:
R8G8B8A8
;
default
:
return
SurfaceFormat
:
:
UNKNOWN
;
}
}
}
}
#
endif
