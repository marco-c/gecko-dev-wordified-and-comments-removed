#
ifndef
MOZILLA_GFX_GRALLOCTEXTURECLIENT_H
#
define
MOZILLA_GFX_GRALLOCTEXTURECLIENT_H
#
ifdef
MOZ_WIDGET_GONK
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
FenceUtils
.
h
"
#
include
"
mozilla
/
layers
/
ShadowLayerUtilsGralloc
.
h
"
#
include
<
ui
/
GraphicBuffer
.
h
>
namespace
android
{
class
MediaBuffer
;
}
;
namespace
mozilla
{
namespace
gl
{
class
SharedSurface
;
}
namespace
layers
{
class
GrallocTextureData
:
public
TextureData
{
public
:
typedef
uint32_t
AndroidFormat
;
virtual
bool
Serialize
(
SurfaceDescriptor
&
aOutDescriptor
)
override
;
virtual
bool
Lock
(
OpenMode
aMode
FenceHandle
*
aFence
)
override
;
virtual
void
Unlock
(
)
override
;
virtual
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
virtual
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
{
return
mFormat
;
}
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
BorrowDrawTarget
(
)
override
;
virtual
bool
CanExposeMappedData
(
)
const
override
{
return
true
;
}
virtual
bool
BorrowMappedData
(
MappedTextureData
&
aMap
)
override
;
virtual
bool
SupportsMoz2D
(
)
const
override
{
return
true
;
}
virtual
bool
HasIntermediateBuffer
(
)
const
override
{
return
false
;
}
virtual
bool
HasSynchronization
(
)
const
override
{
return
true
;
}
virtual
void
Deallocate
(
ClientIPCAllocator
*
)
override
;
virtual
void
Forget
(
ClientIPCAllocator
*
)
override
;
static
GrallocTextureData
*
CreateForDrawing
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
BackendType
aMoz2dBackend
ClientIPCAllocator
*
aAllocator
)
;
static
GrallocTextureData
*
CreateForYCbCr
(
gfx
:
:
IntSize
aYSize
gfx
:
:
IntSize
aCbCrSize
ClientIPCAllocator
*
aAllocator
)
;
static
GrallocTextureData
*
CreateForGLRendering
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
ClientIPCAllocator
*
aAllocator
)
;
static
GrallocTextureData
*
Create
(
gfx
:
:
IntSize
aSize
AndroidFormat
aFormat
gfx
:
:
BackendType
aMoz2DBackend
uint32_t
aUsage
ClientIPCAllocator
*
aAllocator
)
;
static
already_AddRefed
<
TextureClient
>
TextureClientFromSharedSurface
(
gl
:
:
SharedSurface
*
abstractSurf
TextureFlags
flags
)
;
virtual
TextureData
*
CreateSimilar
(
ClientIPCAllocator
*
aAllocator
TextureFlags
aFlags
=
TextureFlags
:
:
DEFAULT
TextureAllocationFlags
aAllocFlags
=
ALLOC_DEFAULT
)
const
override
;
virtual
bool
UpdateFromSurface
(
gfx
:
:
SourceSurface
*
aSurface
)
override
;
void
SetMediaBuffer
(
android
:
:
MediaBuffer
*
aMediaBuffer
)
{
mMediaBuffer
=
aMediaBuffer
;
}
android
:
:
MediaBuffer
*
GetMediaBuffer
(
)
{
return
mMediaBuffer
;
}
android
:
:
sp
<
android
:
:
GraphicBuffer
>
GetGraphicBuffer
(
)
{
return
mGraphicBuffer
;
}
virtual
void
WaitForFence
(
FenceHandle
*
aFence
)
override
;
~
GrallocTextureData
(
)
;
virtual
TextureFlags
GetTextureFlags
(
)
const
override
;
virtual
GrallocTextureData
*
AsGrallocTextureData
(
)
{
return
this
;
}
protected
:
GrallocTextureData
(
MaybeMagicGrallocBufferHandle
aGrallocHandle
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
BackendType
aMoz2DBackend
)
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
SurfaceFormat
mFormat
;
gfx
:
:
BackendType
mMoz2DBackend
;
MaybeMagicGrallocBufferHandle
mGrallocHandle
;
android
:
:
sp
<
android
:
:
GraphicBuffer
>
mGraphicBuffer
;
uint8_t
*
mMappedBuffer
;
android
:
:
MediaBuffer
*
mMediaBuffer
;
}
;
gfx
:
:
SurfaceFormat
SurfaceFormatForPixelFormat
(
android
:
:
PixelFormat
aFormat
)
;
}
}
#
endif
#
endif
