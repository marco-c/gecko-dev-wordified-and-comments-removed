#
ifndef
MOZILLA_GFX_TEXTUREDIB_H
#
define
MOZILLA_GFX_TEXTUREDIB_H
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
GfxMessageUtils
.
h
"
#
include
"
gfxWindowsPlatform
.
h
"
namespace
mozilla
{
namespace
layers
{
class
DIBTextureData
:
public
TextureData
{
public
:
virtual
bool
Lock
(
OpenMode
FenceHandle
*
)
override
{
return
true
;
}
virtual
void
Unlock
(
)
override
{
}
virtual
void
FillInfo
(
TextureData
:
:
Info
&
aInfo
)
const
override
;
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
BorrowDrawTarget
(
)
override
;
static
DIBTextureData
*
Create
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
ClientIPCAllocator
*
aAllocator
)
;
protected
:
DIBTextureData
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
gfxWindowsSurface
*
aSurface
)
:
mSurface
(
aSurface
)
mSize
(
aSize
)
mFormat
(
aFormat
)
{
MOZ_ASSERT
(
aSurface
)
;
}
RefPtr
<
gfxWindowsSurface
>
mSurface
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
SurfaceFormat
mFormat
;
}
;
class
TextureHostDirectUpload
:
public
TextureHost
{
public
:
TextureHostDirectUpload
(
TextureFlags
aFlags
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
IntSize
aSize
)
:
TextureHost
(
aFlags
)
mFormat
(
aFormat
)
mSize
(
aSize
)
mIsLocked
(
false
)
{
}
virtual
void
DeallocateDeviceData
(
)
override
;
virtual
void
SetCompositor
(
Compositor
*
aCompositor
)
override
;
virtual
Compositor
*
GetCompositor
(
)
override
{
return
mCompositor
;
}
virtual
gfx
:
:
SurfaceFormat
GetFormat
(
)
const
override
{
return
mFormat
;
}
virtual
gfx
:
:
IntSize
GetSize
(
)
const
override
{
return
mSize
;
}
virtual
bool
Lock
(
)
override
;
virtual
void
Unlock
(
)
override
;
virtual
bool
HasIntermediateBuffer
(
)
const
{
return
true
;
}
virtual
bool
BindTextureSource
(
CompositableTextureSourceRef
&
aTexture
)
override
;
protected
:
RefPtr
<
DataTextureSource
>
mTextureSource
;
RefPtr
<
Compositor
>
mCompositor
;
gfx
:
:
SurfaceFormat
mFormat
;
gfx
:
:
IntSize
mSize
;
bool
mIsLocked
;
}
;
class
DIBTextureHost
:
public
TextureHostDirectUpload
{
public
:
DIBTextureHost
(
TextureFlags
aFlags
const
SurfaceDescriptorDIB
&
aDescriptor
)
;
virtual
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetAsSurface
(
)
override
{
return
nullptr
;
}
protected
:
virtual
void
UpdatedInternal
(
const
nsIntRegion
*
aRegion
=
nullptr
)
override
;
RefPtr
<
gfxWindowsSurface
>
mSurface
;
}
;
class
TextureHostFileMapping
:
public
TextureHostDirectUpload
{
public
:
TextureHostFileMapping
(
TextureFlags
aFlags
const
SurfaceDescriptorFileMapping
&
aDescriptor
)
;
~
TextureHostFileMapping
(
)
;
virtual
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
GetAsSurface
(
)
override
{
MOZ_CRASH
(
"
GFX
:
TextureHostFileMapping
:
:
GetAsSurface
not
implemented
"
)
;
}
protected
:
virtual
void
UpdatedInternal
(
const
nsIntRegion
*
aRegion
=
nullptr
)
override
;
HANDLE
mFileMapping
;
}
;
}
}
#
endif
