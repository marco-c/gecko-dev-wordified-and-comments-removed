#
ifndef
mozilla_layers_AnimationHelper_h
#
define
mozilla_layers_AnimationHelper_h
#
include
"
mozilla
/
ComputedTimingFunction
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
namespace
mozilla
{
struct
AnimationValue
;
namespace
layers
{
class
Animation
;
typedef
InfallibleTArray
<
layers
:
:
Animation
>
AnimationArray
;
struct
AnimData
{
InfallibleTArray
<
mozilla
:
:
AnimationValue
>
mStartValues
;
InfallibleTArray
<
mozilla
:
:
AnimationValue
>
mEndValues
;
InfallibleTArray
<
Maybe
<
mozilla
:
:
ComputedTimingFunction
>
>
mFunctions
;
}
;
struct
AnimationTransform
{
gfx
:
:
Matrix4x4
mTransformInDevSpace
;
gfx
:
:
Matrix4x4
mFrameTransform
;
TransformData
mData
;
}
;
struct
AnimatedValue
{
enum
{
TRANSFORM
OPACITY
NONE
}
mType
{
NONE
}
;
union
{
AnimationTransform
mTransform
;
float
mOpacity
;
}
;
AnimatedValue
(
gfx
:
:
Matrix4x4
&
&
aTransformInDevSpace
gfx
:
:
Matrix4x4
&
&
aFrameTransform
const
TransformData
&
aData
)
:
mType
(
AnimatedValue
:
:
TRANSFORM
)
mOpacity
{
0
.
0
}
{
mTransform
.
mTransformInDevSpace
=
Move
(
aTransformInDevSpace
)
;
mTransform
.
mFrameTransform
=
Move
(
aFrameTransform
)
;
mTransform
.
mData
=
aData
;
}
explicit
AnimatedValue
(
const
float
&
aValue
)
:
mType
(
AnimatedValue
:
:
OPACITY
)
mOpacity
(
aValue
)
{
}
~
AnimatedValue
(
)
{
}
private
:
AnimatedValue
(
)
=
delete
;
}
;
class
CompositorAnimationStorage
final
{
typedef
nsClassHashtable
<
nsUint64HashKey
AnimatedValue
>
AnimatedValueTable
;
typedef
nsClassHashtable
<
nsUint64HashKey
AnimationArray
>
AnimationsTable
;
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositorAnimationStorage
)
public
:
void
SetAnimatedValue
(
uint64_t
aId
gfx
:
:
Matrix4x4
&
&
aTransformInDevSpace
gfx
:
:
Matrix4x4
&
&
aFrameTransform
const
TransformData
&
aData
)
;
void
SetAnimatedValue
(
uint64_t
aId
gfx
:
:
Matrix4x4
&
&
aTransformInDevSpace
)
;
void
SetAnimatedValue
(
uint64_t
aId
const
float
&
aOpacity
)
;
AnimatedValue
*
GetAnimatedValue
(
const
uint64_t
&
aId
)
const
;
Maybe
<
float
>
GetAnimationOpacity
(
const
uint64_t
&
aId
)
const
;
Maybe
<
gfx
:
:
Matrix4x4
>
GetAnimationTransform
(
const
uint64_t
&
aId
)
const
;
AnimatedValueTable
:
:
Iterator
ConstAnimatedValueTableIter
(
)
const
{
return
mAnimatedValues
.
ConstIter
(
)
;
}
uint32_t
AnimatedValueCount
(
)
const
{
return
mAnimatedValues
.
Count
(
)
;
}
void
SetAnimations
(
uint64_t
aId
const
AnimationArray
&
aAnimations
)
;
AnimationArray
*
GetAnimations
(
const
uint64_t
&
aId
)
const
;
AnimationsTable
:
:
Iterator
ConstAnimationsTableIter
(
)
const
{
return
mAnimations
.
ConstIter
(
)
;
}
uint32_t
AnimationsCount
(
)
const
{
return
mAnimations
.
Count
(
)
;
}
void
Clear
(
)
;
void
ClearById
(
const
uint64_t
&
aId
)
;
private
:
~
CompositorAnimationStorage
(
)
{
}
;
private
:
AnimatedValueTable
mAnimatedValues
;
AnimationsTable
mAnimations
;
}
;
class
AnimationHelper
{
public
:
static
bool
SampleAnimationForEachNode
(
TimeStamp
aTime
AnimationArray
&
aAnimations
InfallibleTArray
<
AnimData
>
&
aAnimationData
AnimationValue
&
aAnimationValue
bool
&
aHasInEffectAnimations
)
;
static
void
SetAnimations
(
AnimationArray
&
aAnimations
InfallibleTArray
<
AnimData
>
&
aAnimData
AnimationValue
&
aBaseAnimationStyle
)
;
static
uint64_t
GetNextCompositorAnimationsId
(
)
;
static
void
SampleAnimations
(
CompositorAnimationStorage
*
aStorage
TimeStamp
aTime
)
;
}
;
}
}
#
endif
