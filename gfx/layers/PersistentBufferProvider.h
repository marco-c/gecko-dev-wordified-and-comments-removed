#
ifndef
MOZILLA_GFX_PersistentBUFFERPROVIDER_H
#
define
MOZILLA_GFX_PersistentBUFFERPROVIDER_H
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
KnowsCompositor
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
RefCounted
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
Vector
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
SourceSurface
;
class
DrawTarget
;
}
namespace
layers
{
class
CopyableCanvasLayer
;
class
TextureClient
;
class
PersistentBufferProvider
:
public
RefCounted
<
PersistentBufferProvider
>
public
SupportsWeakPtr
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
PersistentBufferProvider
)
virtual
~
PersistentBufferProvider
(
)
=
default
;
virtual
LayersBackend
GetType
(
)
{
return
LayersBackend
:
:
LAYERS_NONE
;
}
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
BorrowDrawTarget
(
const
gfx
:
:
IntRect
&
aPersistedRect
)
=
0
;
virtual
bool
ReturnDrawTarget
(
already_AddRefed
<
gfx
:
:
DrawTarget
>
aDT
)
=
0
;
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
BorrowSnapshot
(
)
=
0
;
virtual
void
ReturnSnapshot
(
already_AddRefed
<
gfx
:
:
SourceSurface
>
aSnapshot
)
=
0
;
virtual
TextureClient
*
GetTextureClient
(
)
{
return
nullptr
;
}
virtual
void
OnShutdown
(
)
{
}
virtual
bool
SetKnowsCompositor
(
KnowsCompositor
*
aKnowsCompositor
)
{
return
true
;
}
virtual
void
ClearCachedResources
(
)
{
}
virtual
bool
PreservesDrawingState
(
)
const
=
0
;
}
;
class
PersistentBufferProviderBasic
:
public
PersistentBufferProvider
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
PersistentBufferProviderBasic
override
)
static
already_AddRefed
<
PersistentBufferProviderBasic
>
Create
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
BackendType
aBackend
)
;
explicit
PersistentBufferProviderBasic
(
gfx
:
:
DrawTarget
*
aTarget
)
;
LayersBackend
GetType
(
)
override
{
return
LayersBackend
:
:
LAYERS_BASIC
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
BorrowDrawTarget
(
const
gfx
:
:
IntRect
&
aPersistedRect
)
override
;
bool
ReturnDrawTarget
(
already_AddRefed
<
gfx
:
:
DrawTarget
>
aDT
)
override
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
BorrowSnapshot
(
)
override
;
void
ReturnSnapshot
(
already_AddRefed
<
gfx
:
:
SourceSurface
>
aSnapshot
)
override
;
bool
PreservesDrawingState
(
)
const
override
{
return
true
;
}
void
OnShutdown
(
)
override
{
Destroy
(
)
;
}
protected
:
void
Destroy
(
)
;
private
:
virtual
~
PersistentBufferProviderBasic
(
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
mDrawTarget
;
RefPtr
<
gfx
:
:
SourceSurface
>
mSnapshot
;
}
;
class
PersistentBufferProviderShared
:
public
PersistentBufferProvider
public
ActiveResource
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
PersistentBufferProviderShared
override
)
static
already_AddRefed
<
PersistentBufferProviderShared
>
Create
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
KnowsCompositor
*
aKnowsCompositor
)
;
LayersBackend
GetType
(
)
override
;
already_AddRefed
<
gfx
:
:
DrawTarget
>
BorrowDrawTarget
(
const
gfx
:
:
IntRect
&
aPersistedRect
)
override
;
bool
ReturnDrawTarget
(
already_AddRefed
<
gfx
:
:
DrawTarget
>
aDT
)
override
;
already_AddRefed
<
gfx
:
:
SourceSurface
>
BorrowSnapshot
(
)
override
;
void
ReturnSnapshot
(
already_AddRefed
<
gfx
:
:
SourceSurface
>
aSnapshot
)
override
;
TextureClient
*
GetTextureClient
(
)
override
;
void
NotifyInactive
(
)
override
;
void
OnShutdown
(
)
override
{
Destroy
(
)
;
}
bool
SetKnowsCompositor
(
KnowsCompositor
*
aKnowsCompositor
)
override
;
void
ClearCachedResources
(
)
override
;
bool
PreservesDrawingState
(
)
const
override
{
return
false
;
}
protected
:
PersistentBufferProviderShared
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
KnowsCompositor
*
aKnowsCompositor
RefPtr
<
TextureClient
>
&
aTexture
)
;
~
PersistentBufferProviderShared
(
)
;
TextureClient
*
GetTexture
(
const
Maybe
<
uint32_t
>
&
aIndex
)
;
bool
CheckIndex
(
uint32_t
aIndex
)
{
return
aIndex
<
mTextures
.
length
(
)
;
}
void
Destroy
(
)
;
gfx
:
:
IntSize
mSize
;
gfx
:
:
SurfaceFormat
mFormat
;
RefPtr
<
KnowsCompositor
>
mKnowsCompositor
;
static
const
size_t
kMaxTexturesAllowed
=
4
;
Vector
<
RefPtr
<
TextureClient
>
kMaxTexturesAllowed
+
2
>
mTextures
;
Maybe
<
uint32_t
>
mBack
;
Maybe
<
uint32_t
>
mFront
;
Maybe
<
uint32_t
>
mTextureLockIsUnreliable
;
RefPtr
<
gfx
:
:
DrawTarget
>
mDrawTarget
;
RefPtr
<
gfx
:
:
SourceSurface
>
mSnapshot
;
size_t
mMaxAllowedTextures
=
kMaxTexturesAllowed
;
}
;
struct
AutoReturnSnapshot
final
{
PersistentBufferProvider
*
mBufferProvider
;
RefPtr
<
gfx
:
:
SourceSurface
>
*
mSnapshot
;
explicit
AutoReturnSnapshot
(
PersistentBufferProvider
*
aProvider
=
nullptr
)
:
mBufferProvider
(
aProvider
)
mSnapshot
(
nullptr
)
{
}
~
AutoReturnSnapshot
(
)
{
if
(
mBufferProvider
)
{
mBufferProvider
-
>
ReturnSnapshot
(
mSnapshot
?
mSnapshot
-
>
forget
(
)
:
nullptr
)
;
}
}
}
;
}
}
#
endif
