#
ifndef
MOZILLA_GFX_PersistentBUFFERPROVIDER_H
#
define
MOZILLA_GFX_PersistentBUFFERPROVIDER_H
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
CompositableForwarder
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CopyableCanvasLayer
;
class
PersistentBufferProvider
:
public
RefCounted
<
PersistentBufferProvider
>
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
PersistentBufferProvider
)
virtual
~
PersistentBufferProvider
(
)
{
}
virtual
LayersBackend
GetType
(
)
{
return
LayersBackend
:
:
LAYERS_NONE
;
}
virtual
already_AddRefed
<
gfx
:
:
DrawTarget
>
GetDT
(
const
gfx
:
:
IntRect
&
aPersistedRect
)
=
0
;
virtual
bool
ReturnAndUseDT
(
already_AddRefed
<
gfx
:
:
DrawTarget
>
aDT
)
=
0
;
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetSnapshot
(
)
=
0
;
protected
:
}
;
class
PersistentBufferProviderBasic
:
public
PersistentBufferProvider
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
PersistentBufferProviderBasic
)
PersistentBufferProviderBasic
(
gfx
:
:
IntSize
aSize
gfx
:
:
SurfaceFormat
aFormat
gfx
:
:
BackendType
aBackend
)
;
explicit
PersistentBufferProviderBasic
(
gfx
:
:
DrawTarget
*
aTarget
)
:
mDrawTarget
(
aTarget
)
{
}
bool
IsValid
(
)
{
return
!
!
mDrawTarget
;
}
virtual
LayersBackend
GetType
(
)
{
return
LayersBackend
:
:
LAYERS_BASIC
;
}
already_AddRefed
<
gfx
:
:
DrawTarget
>
GetDT
(
const
gfx
:
:
IntRect
&
aPersistedRect
)
{
RefPtr
<
gfx
:
:
DrawTarget
>
dt
(
mDrawTarget
)
;
return
dt
.
forget
(
)
;
}
bool
ReturnAndUseDT
(
already_AddRefed
<
gfx
:
:
DrawTarget
>
aDT
)
{
RefPtr
<
gfx
:
:
DrawTarget
>
dt
(
aDT
)
;
MOZ_ASSERT
(
mDrawTarget
=
=
dt
)
;
return
true
;
}
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetSnapshot
(
)
{
return
mDrawTarget
-
>
Snapshot
(
)
;
}
private
:
RefPtr
<
gfx
:
:
DrawTarget
>
mDrawTarget
;
}
;
}
}
#
endif
