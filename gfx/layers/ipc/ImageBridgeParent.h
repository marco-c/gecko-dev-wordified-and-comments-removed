#
ifndef
gfx_layers_ipc_ImageBridgeParent_h_
#
define
gfx_layers_ipc_ImageBridgeParent_h_
#
include
<
stddef
.
h
>
#
include
<
stdint
.
h
>
#
include
"
CompositableTransactionParent
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolUtils
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
PImageBridgeParent
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
class
MessageLoop
;
namespace
base
{
class
Thread
;
}
namespace
mozilla
{
namespace
ipc
{
class
Shmem
;
}
namespace
layers
{
struct
ImageCompositeNotificationInfo
;
class
ImageBridgeParent
final
:
public
PImageBridgeParent
public
CompositableParentManager
public
ShmemAllocator
{
public
:
typedef
InfallibleTArray
<
CompositableOperation
>
EditArray
;
typedef
InfallibleTArray
<
OpDestroy
>
OpDestroyArray
;
protected
:
ImageBridgeParent
(
MessageLoop
*
aLoop
ProcessId
aChildProcessId
)
;
public
:
~
ImageBridgeParent
(
)
;
static
void
Setup
(
)
;
static
ImageBridgeParent
*
CreateSameProcess
(
)
;
static
bool
CreateForGPUProcess
(
Endpoint
<
PImageBridgeParent
>
&
&
aEndpoint
)
;
static
bool
CreateForContent
(
Endpoint
<
PImageBridgeParent
>
&
&
aEndpoint
)
;
virtual
ShmemAllocator
*
AsShmemAllocator
(
)
override
{
return
this
;
}
virtual
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
override
;
virtual
void
SendAsyncMessage
(
const
InfallibleTArray
<
AsyncParentMessageData
>
&
aMessage
)
override
;
virtual
void
NotifyNotUsed
(
PTextureParent
*
aTexture
uint64_t
aTransactionId
)
override
;
virtual
base
:
:
ProcessId
GetChildProcessId
(
)
override
{
return
OtherPid
(
)
;
}
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvImageBridgeThreadId
(
const
PlatformThreadId
&
aThreadId
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvInitReadLocks
(
ReadLockArray
&
&
aReadLocks
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvUpdate
(
EditArray
&
&
aEdits
OpDestroyArray
&
&
aToDestroy
const
uint64_t
&
aFwdTransactionId
)
override
;
virtual
PTextureParent
*
AllocPTextureParent
(
const
SurfaceDescriptor
&
aSharedData
const
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
uint64_t
&
aSerial
const
wr
:
:
MaybeExternalImageId
&
aExternalImageId
)
override
;
virtual
bool
DeallocPTextureParent
(
PTextureParent
*
actor
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvNewCompositable
(
const
CompositableHandle
&
aHandle
const
TextureInfo
&
aInfo
const
LayersBackend
&
aLayersBackend
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvReleaseCompositable
(
const
CompositableHandle
&
aHandle
)
override
;
PMediaSystemResourceManagerParent
*
AllocPMediaSystemResourceManagerParent
(
)
override
;
bool
DeallocPMediaSystemResourceManagerParent
(
PMediaSystemResourceManagerParent
*
aActor
)
override
;
virtual
mozilla
:
:
ipc
:
:
IPCResult
RecvWillClose
(
)
override
;
MessageLoop
*
GetMessageLoop
(
)
const
{
return
mMessageLoop
;
}
virtual
bool
AllocShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
override
;
virtual
bool
AllocUnsafeShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
override
;
virtual
void
DeallocShmem
(
ipc
:
:
Shmem
&
aShmem
)
override
;
virtual
bool
IsSameProcess
(
)
const
override
;
static
RefPtr
<
ImageBridgeParent
>
GetInstance
(
ProcessId
aId
)
;
static
bool
NotifyImageComposites
(
nsTArray
<
ImageCompositeNotificationInfo
>
&
aNotifications
)
;
virtual
bool
UsesImageBridge
(
)
const
override
{
return
true
;
}
virtual
bool
IPCOpen
(
)
const
override
{
return
!
mClosed
;
}
protected
:
void
OnChannelConnected
(
int32_t
pid
)
override
;
void
Bind
(
Endpoint
<
PImageBridgeParent
>
&
&
aEndpoint
)
;
private
:
void
DeferredDestroy
(
)
;
MessageLoop
*
mMessageLoop
;
RefPtr
<
ImageBridgeParent
>
mSelfRef
;
bool
mSetChildThreadPriority
;
bool
mClosed
;
static
std
:
:
map
<
base
:
:
ProcessId
ImageBridgeParent
*
>
sImageBridges
;
RefPtr
<
CompositorThreadHolder
>
mCompositorThreadHolder
;
}
;
}
}
#
endif
