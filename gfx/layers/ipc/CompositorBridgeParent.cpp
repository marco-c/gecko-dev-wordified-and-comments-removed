#
include
"
mozilla
/
layers
/
CompositorBridgeParent
.
h
"
#
include
<
stdio
.
h
>
#
include
<
stdint
.
h
>
#
include
<
map
>
#
include
<
utility
>
#
include
"
apz
/
src
/
APZCTreeManager
.
h
"
#
include
"
LayerTransactionParent
.
h
"
#
include
"
RenderTrace
.
h
"
#
include
"
base
/
message_loop
.
h
"
#
include
"
base
/
process
.
h
"
#
include
"
base
/
task
.
h
"
#
include
"
base
/
thread
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
TreeTraversal
.
h
"
#
ifdef
MOZ_WIDGET_GTK
#
include
"
gfxPlatformGtk
.
h
"
#
endif
#
include
"
gfxPrefs
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
dom
/
TabParent
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
GPUChild
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
VRManager
.
h
"
#
include
"
mozilla
/
ipc
/
Transport
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
gfx
/
GPUParent
.
h
"
#
include
"
mozilla
/
layers
/
AnimationHelper
.
h
"
#
include
"
mozilla
/
layers
/
APZCTreeManagerParent
.
h
"
#
include
"
mozilla
/
layers
/
APZSampler
.
h
"
#
include
"
mozilla
/
layers
/
APZThreadUtils
.
h
"
#
include
"
mozilla
/
layers
/
APZUpdater
.
h
"
#
include
"
mozilla
/
layers
/
AsyncCompositionManager
.
h
"
#
include
"
mozilla
/
layers
/
BasicCompositor
.
h
"
#
include
"
mozilla
/
layers
/
Compositor
.
h
"
#
include
"
mozilla
/
layers
/
CompositorManagerParent
.
h
"
#
include
"
mozilla
/
layers
/
CompositorOGL
.
h
"
#
include
"
mozilla
/
layers
/
CompositorThread
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
CompositorVsyncScheduler
.
h
"
#
include
"
mozilla
/
layers
/
CrossProcessCompositorBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
FrameUniformityData
.
h
"
#
include
"
mozilla
/
layers
/
ImageBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerComposite
.
h
"
#
include
"
mozilla
/
layers
/
LayerManagerMLGPU
.
h
"
#
include
"
mozilla
/
layers
/
LayerTreeOwnerTracker
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
PLayerTransactionParent
.
h
"
#
include
"
mozilla
/
layers
/
RemoteContentController
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
AsyncImagePipelineManager
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderAPI
.
h
"
#
include
"
mozilla
/
media
/
MediaSystemResourceService
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
ifdef
MOZ_WIDGET_GTK
#
include
"
basic
/
X11BasicCompositor
.
h
"
#
endif
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
ifdef
XP_WIN
#
include
"
mozilla
/
layers
/
CompositorD3D11
.
h
"
#
include
"
mozilla
/
widget
/
WinCompositorWidget
.
h
"
#
endif
#
include
"
GeckoProfiler
.
h
"
#
include
"
mozilla
/
ipc
/
ProtocolTypes
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
Hal
.
h
"
#
include
"
mozilla
/
HalTypes
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
ifdef
MOZ_GECKO_PROFILER
#
include
"
ProfilerMarkerPayload
.
h
"
#
endif
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
#
include
"
VsyncSource
.
h
"
#
endif
#
include
"
mozilla
/
widget
/
CompositorWidget
.
h
"
#
ifdef
MOZ_WIDGET_SUPPORTS_OOP_COMPOSITING
#
include
"
mozilla
/
widget
/
CompositorWidgetParent
.
h
"
#
endif
#
ifdef
XP_WIN
#
include
"
mozilla
/
gfx
/
DeviceManagerDx
.
h
"
#
endif
#
include
"
LayerScope
.
h
"
namespace
mozilla
{
namespace
layers
{
using
namespace
mozilla
:
:
ipc
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
std
;
using
base
:
:
ProcessId
;
using
base
:
:
Thread
;
using
mozilla
:
:
Telemetry
:
:
LABELS_CONTENT_FRAME_TIME_REASON
;
static
void
AssertIsInCompositorThread
(
)
{
MOZ_RELEASE_ASSERT
(
!
CompositorThread
(
)
|
|
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
}
CompositorBridgeParentBase
:
:
CompositorBridgeParentBase
(
CompositorManagerParent
*
aManager
)
:
mCanSend
(
true
)
mCompositorManager
(
aManager
)
{
}
CompositorBridgeParentBase
:
:
~
CompositorBridgeParentBase
(
)
{
}
ProcessId
CompositorBridgeParentBase
:
:
GetChildProcessId
(
)
{
return
OtherPid
(
)
;
}
void
CompositorBridgeParentBase
:
:
NotifyNotUsed
(
PTextureParent
*
aTexture
uint64_t
aTransactionId
)
{
RefPtr
<
TextureHost
>
texture
=
TextureHost
:
:
AsTextureHost
(
aTexture
)
;
if
(
!
texture
)
{
return
;
}
if
(
!
(
texture
-
>
GetFlags
(
)
&
TextureFlags
:
:
RECYCLE
)
)
{
return
;
}
uint64_t
textureId
=
TextureHost
:
:
GetTextureSerial
(
aTexture
)
;
mPendingAsyncMessage
.
push_back
(
OpNotifyNotUsed
(
textureId
aTransactionId
)
)
;
}
void
CompositorBridgeParentBase
:
:
SendAsyncMessage
(
const
InfallibleTArray
<
AsyncParentMessageData
>
&
aMessage
)
{
Unused
<
<
SendParentAsyncMessages
(
aMessage
)
;
}
bool
CompositorBridgeParentBase
:
:
AllocShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
{
return
PCompositorBridgeParent
:
:
AllocShmem
(
aSize
aType
aShmem
)
;
}
bool
CompositorBridgeParentBase
:
:
AllocUnsafeShmem
(
size_t
aSize
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aType
ipc
:
:
Shmem
*
aShmem
)
{
return
PCompositorBridgeParent
:
:
AllocUnsafeShmem
(
aSize
aType
aShmem
)
;
}
void
CompositorBridgeParentBase
:
:
DeallocShmem
(
ipc
:
:
Shmem
&
aShmem
)
{
PCompositorBridgeParent
:
:
DeallocShmem
(
aShmem
)
;
}
static
inline
MessageLoop
*
CompositorLoop
(
)
{
return
CompositorThreadHolder
:
:
Loop
(
)
;
}
base
:
:
ProcessId
CompositorBridgeParentBase
:
:
RemotePid
(
)
{
return
OtherPid
(
)
;
}
bool
CompositorBridgeParentBase
:
:
StartSharingMetrics
(
ipc
:
:
SharedMemoryBasic
:
:
Handle
aHandle
CrossProcessMutexHandle
aMutexHandle
LayersId
aLayersId
uint32_t
aApzcId
)
{
if
(
!
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
{
MOZ_ASSERT
(
CompositorLoop
(
)
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableMethod
<
ipc
:
:
SharedMemoryBasic
:
:
Handle
CrossProcessMutexHandle
LayersId
uint32_t
>
(
"
layers
:
:
CompositorBridgeParent
:
:
StartSharingMetrics
"
this
&
CompositorBridgeParentBase
:
:
StartSharingMetrics
aHandle
aMutexHandle
aLayersId
aApzcId
)
)
;
return
true
;
}
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
mCanSend
)
{
return
false
;
}
return
PCompositorBridgeParent
:
:
SendSharedCompositorFrameMetrics
(
aHandle
aMutexHandle
aLayersId
aApzcId
)
;
}
bool
CompositorBridgeParentBase
:
:
StopSharingMetrics
(
ScrollableLayerGuid
:
:
ViewID
aScrollId
uint32_t
aApzcId
)
{
if
(
!
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
{
MOZ_ASSERT
(
CompositorLoop
(
)
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableMethod
<
ScrollableLayerGuid
:
:
ViewID
uint32_t
>
(
"
layers
:
:
CompositorBridgeParent
:
:
StopSharingMetrics
"
this
&
CompositorBridgeParentBase
:
:
StopSharingMetrics
aScrollId
aApzcId
)
)
;
return
true
;
}
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
mCanSend
)
{
return
false
;
}
return
PCompositorBridgeParent
:
:
SendReleaseSharedCompositorFrameMetrics
(
aScrollId
aApzcId
)
;
}
CompositorBridgeParent
:
:
LayerTreeState
:
:
LayerTreeState
(
)
:
mApzcTreeManagerParent
(
nullptr
)
mParent
(
nullptr
)
mLayerManager
(
nullptr
)
mCrossProcessParent
(
nullptr
)
mLayerTree
(
nullptr
)
mUpdatedPluginDataAvailable
(
false
)
{
}
CompositorBridgeParent
:
:
LayerTreeState
:
:
~
LayerTreeState
(
)
{
if
(
mController
)
{
mController
-
>
Destroy
(
)
;
}
}
typedef
map
<
LayersId
CompositorBridgeParent
:
:
LayerTreeState
>
LayerTreeMap
;
LayerTreeMap
sIndirectLayerTrees
;
StaticAutoPtr
<
mozilla
:
:
Monitor
>
sIndirectLayerTreesLock
;
static
void
EnsureLayerTreeMapReady
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sIndirectLayerTreesLock
)
{
sIndirectLayerTreesLock
=
new
Monitor
(
"
IndirectLayerTree
"
)
;
mozilla
:
:
ClearOnShutdown
(
&
sIndirectLayerTreesLock
)
;
}
}
template
<
typename
Lambda
>
inline
void
CompositorBridgeParent
:
:
ForEachIndirectLayerTree
(
const
Lambda
&
aCallback
)
{
sIndirectLayerTreesLock
-
>
AssertCurrentThreadOwns
(
)
;
for
(
auto
it
=
sIndirectLayerTrees
.
begin
(
)
;
it
!
=
sIndirectLayerTrees
.
end
(
)
;
it
+
+
)
{
LayerTreeState
*
state
=
&
it
-
>
second
;
if
(
state
-
>
mParent
=
=
this
)
{
aCallback
(
state
it
-
>
first
)
;
}
}
}
typedef
map
<
uint64_t
CompositorBridgeParent
*
>
CompositorMap
;
static
StaticAutoPtr
<
CompositorMap
>
sCompositorMap
;
void
CompositorBridgeParent
:
:
Setup
(
)
{
EnsureLayerTreeMapReady
(
)
;
MOZ_ASSERT
(
!
sCompositorMap
)
;
sCompositorMap
=
new
CompositorMap
;
}
void
CompositorBridgeParent
:
:
FinishShutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sCompositorMap
)
{
MOZ_ASSERT
(
sCompositorMap
-
>
empty
(
)
)
;
sCompositorMap
=
nullptr
;
}
sIndirectLayerTrees
.
clear
(
)
;
}
#
ifdef
COMPOSITOR_PERFORMANCE_WARNING
static
int32_t
CalculateCompositionFrameRate
(
)
{
const
int32_t
defaultFrameRate
=
60
;
int32_t
compositionFrameRatePref
=
gfxPrefs
:
:
LayersCompositionFrameRate
(
)
;
if
(
compositionFrameRatePref
<
0
)
{
int32_t
layoutFrameRatePref
=
gfxPrefs
:
:
LayoutFrameRate
(
)
;
if
(
layoutFrameRatePref
<
0
)
{
return
defaultFrameRate
;
}
return
layoutFrameRatePref
;
}
return
compositionFrameRatePref
;
}
#
endif
CompositorBridgeParent
:
:
CompositorBridgeParent
(
CompositorManagerParent
*
aManager
CSSToLayoutDeviceScale
aScale
const
TimeDuration
&
aVsyncRate
const
CompositorOptions
&
aOptions
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
)
:
CompositorBridgeParentBase
(
aManager
)
mWidget
(
nullptr
)
mScale
(
aScale
)
mVsyncRate
(
aVsyncRate
)
mPendingTransaction
{
0
}
mPaused
(
false
)
mUseExternalSurfaceSize
(
aUseExternalSurfaceSize
)
mEGLSurfaceSize
(
aSurfaceSize
)
mOptions
(
aOptions
)
mPauseCompositionMonitor
(
"
PauseCompositionMonitor
"
)
mResumeCompositionMonitor
(
"
ResumeCompositionMonitor
"
)
mCompositorBridgeID
(
0
)
mRootLayerTreeID
{
0
}
mOverrideComposeReadiness
(
false
)
mForceCompositionTask
(
nullptr
)
mCompositorScheduler
(
nullptr
)
mAnimationStorage
(
nullptr
)
mPaintTime
(
TimeDuration
:
:
Forever
(
)
)
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
mLastPluginUpdateLayerTreeId
{
0
}
mDeferPluginWindows
(
false
)
mPluginWindowsHidden
(
false
)
#
endif
{
}
void
CompositorBridgeParent
:
:
InitSameProcess
(
widget
:
:
CompositorWidget
*
aWidget
const
LayersId
&
aLayerTreeId
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
|
|
recordreplay
:
:
IsRecordingOrReplaying
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mWidget
=
aWidget
;
mRootLayerTreeID
=
aLayerTreeId
;
Initialize
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvInitialize
(
const
LayersId
&
aRootLayerTreeId
)
{
MOZ_ASSERT
(
XRE_IsGPUProcess
(
)
)
;
mRootLayerTreeID
=
aRootLayerTreeId
;
Initialize
(
)
;
return
IPC_OK
(
)
;
}
void
CompositorBridgeParent
:
:
Initialize
(
)
{
MOZ_ASSERT
(
CompositorThread
(
)
"
The
compositor
thread
must
be
Initialized
before
instanciating
a
"
"
CompositorBridgeParent
.
"
)
;
if
(
mOptions
.
UseAPZ
(
)
)
{
MOZ_ASSERT
(
!
mApzcTreeManager
)
;
MOZ_ASSERT
(
!
mApzSampler
)
;
MOZ_ASSERT
(
!
mApzUpdater
)
;
mApzcTreeManager
=
new
APZCTreeManager
(
mRootLayerTreeID
)
;
mApzSampler
=
new
APZSampler
(
mApzcTreeManager
mOptions
.
UseWebRender
(
)
)
;
mApzUpdater
=
new
APZUpdater
(
mApzcTreeManager
mOptions
.
UseWebRender
(
)
)
;
}
mPaused
=
mOptions
.
InitiallyPaused
(
)
;
mCompositorBridgeID
=
0
;
MOZ_ASSERT
(
CompositorLoop
(
)
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableFunction
(
"
AddCompositorRunnable
"
&
AddCompositor
this
&
mCompositorBridgeID
)
)
;
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
sIndirectLayerTrees
[
mRootLayerTreeID
]
.
mParent
=
this
;
}
LayerScope
:
:
SetPixelScale
(
mScale
.
scale
)
;
if
(
!
mOptions
.
UseWebRender
(
)
)
{
mCompositorScheduler
=
new
CompositorVsyncScheduler
(
this
mWidget
)
;
}
}
LayersId
CompositorBridgeParent
:
:
RootLayerTreeId
(
)
{
MOZ_ASSERT
(
mRootLayerTreeID
.
IsValid
(
)
)
;
return
mRootLayerTreeID
;
}
CompositorBridgeParent
:
:
~
CompositorBridgeParent
(
)
{
InfallibleTArray
<
PTextureParent
*
>
textures
;
ManagedPTextureParent
(
textures
)
;
MOZ_DIAGNOSTIC_ASSERT
(
textures
.
Length
(
)
=
=
0
)
;
for
(
unsigned
int
i
=
0
;
i
<
textures
.
Length
(
)
;
+
+
i
)
{
RefPtr
<
TextureHost
>
tex
=
TextureHost
:
:
AsTextureHost
(
textures
[
i
]
)
;
tex
-
>
DeallocateDeviceData
(
)
;
}
}
void
CompositorBridgeParent
:
:
ForceIsFirstPaint
(
)
{
if
(
mWrBridge
)
{
mWrBridge
-
>
ForceIsFirstPaint
(
)
;
}
else
{
mCompositionManager
-
>
ForceIsFirstPaint
(
)
;
}
}
void
CompositorBridgeParent
:
:
StopAndClearResources
(
)
{
if
(
mForceCompositionTask
)
{
mForceCompositionTask
-
>
Cancel
(
)
;
mForceCompositionTask
=
nullptr
;
}
mPaused
=
true
;
MOZ_ASSERT
(
(
mApzSampler
!
=
nullptr
)
=
=
(
mApzcTreeManager
!
=
nullptr
)
)
;
MOZ_ASSERT
(
(
mApzUpdater
!
=
nullptr
)
=
=
(
mApzcTreeManager
!
=
nullptr
)
)
;
if
(
mApzUpdater
)
{
mApzSampler
-
>
Destroy
(
)
;
mApzSampler
=
nullptr
;
mApzUpdater
-
>
ClearTree
(
mRootLayerTreeID
)
;
mApzUpdater
=
nullptr
;
mApzcTreeManager
=
nullptr
;
}
if
(
mLayerManager
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
ForEachIndirectLayerTree
(
[
this
]
(
LayerTreeState
*
lts
LayersId
)
-
>
void
{
mLayerManager
-
>
ClearCachedResources
(
lts
-
>
mRoot
)
;
lts
-
>
mLayerManager
=
nullptr
;
lts
-
>
mParent
=
nullptr
;
}
)
;
mLayerManager
-
>
Destroy
(
)
;
mLayerManager
=
nullptr
;
mCompositionManager
=
nullptr
;
}
if
(
mWrBridge
)
{
std
:
:
vector
<
RefPtr
<
WebRenderBridgeParent
>
>
indirectBridgeParents
;
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
ForEachIndirectLayerTree
(
[
&
]
(
LayerTreeState
*
lts
LayersId
)
-
>
void
{
if
(
lts
-
>
mWrBridge
)
{
indirectBridgeParents
.
emplace_back
(
lts
-
>
mWrBridge
.
forget
(
)
)
;
}
lts
-
>
mParent
=
nullptr
;
}
)
;
}
for
(
const
RefPtr
<
WebRenderBridgeParent
>
&
bridge
:
indirectBridgeParents
)
{
bridge
-
>
Destroy
(
)
;
}
indirectBridgeParents
.
clear
(
)
;
RefPtr
<
wr
:
:
WebRenderAPI
>
api
=
mWrBridge
-
>
GetWebRenderAPI
(
)
;
mWrBridge
-
>
Destroy
(
)
;
mWrBridge
=
nullptr
;
if
(
api
)
{
api
-
>
FlushSceneBuilder
(
)
;
api
=
nullptr
;
}
if
(
mAsyncImageManager
)
{
mAsyncImageManager
-
>
Destroy
(
)
;
mAsyncImageManager
=
nullptr
;
}
}
if
(
mCompositor
)
{
mCompositor
-
>
DetachWidget
(
)
;
mCompositor
-
>
Destroy
(
)
;
mCompositor
=
nullptr
;
}
if
(
mCompositorScheduler
)
{
mCompositorScheduler
-
>
Destroy
(
)
;
mCompositorScheduler
=
nullptr
;
}
mWidget
=
nullptr
;
mAnimationStorage
=
nullptr
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvWillClose
(
)
{
StopAndClearResources
(
)
;
mCanSend
=
false
;
return
IPC_OK
(
)
;
}
void
CompositorBridgeParent
:
:
DeferredDestroy
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
mSelfRef
=
nullptr
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvPause
(
)
{
PauseComposition
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvResume
(
)
{
ResumeComposition
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvMakeSnapshot
(
const
SurfaceDescriptor
&
aInSnapshot
const
gfx
:
:
IntRect
&
aRect
)
{
RefPtr
<
DrawTarget
>
target
=
GetDrawTargetForDescriptor
(
aInSnapshot
gfx
:
:
BackendType
:
:
CAIRO
)
;
MOZ_ASSERT
(
target
)
;
if
(
!
target
)
{
return
IPC_FAIL_NO_REASON
(
this
)
;
}
ForceComposeToTarget
(
target
&
aRect
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvWaitOnTransactionProcessed
(
)
{
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvFlushRendering
(
)
{
if
(
mWrBridge
)
{
mWrBridge
-
>
FlushRendering
(
)
;
return
IPC_OK
(
)
;
}
if
(
mCompositorScheduler
-
>
NeedsComposite
(
)
)
{
CancelCurrentCompositeTask
(
)
;
ForceComposeToTarget
(
nullptr
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvFlushRenderingAsync
(
)
{
if
(
mWrBridge
)
{
mWrBridge
-
>
FlushRendering
(
false
)
;
return
IPC_OK
(
)
;
}
return
RecvFlushRendering
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvForcePresent
(
)
{
if
(
mWrBridge
)
{
mWrBridge
-
>
ScheduleForcedGenerateFrame
(
)
;
}
if
(
mLayerManager
)
{
mLayerManager
-
>
ForcePresent
(
)
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvNotifyRegionInvalidated
(
const
nsIntRegion
&
aRegion
)
{
if
(
mLayerManager
)
{
mLayerManager
-
>
AddInvalidRegion
(
aRegion
)
;
}
return
IPC_OK
(
)
;
}
void
CompositorBridgeParent
:
:
Invalidate
(
)
{
if
(
mLayerManager
)
{
mLayerManager
-
>
InvalidateAll
(
)
;
}
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvStartFrameTimeRecording
(
const
int32_t
&
aBufferSize
uint32_t
*
aOutStartIndex
)
{
if
(
mLayerManager
)
{
*
aOutStartIndex
=
mLayerManager
-
>
StartFrameTimeRecording
(
aBufferSize
)
;
}
else
if
(
mWrBridge
)
{
*
aOutStartIndex
=
mWrBridge
-
>
StartFrameTimeRecording
(
aBufferSize
)
;
}
else
{
*
aOutStartIndex
=
0
;
}
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvStopFrameTimeRecording
(
const
uint32_t
&
aStartIndex
InfallibleTArray
<
float
>
*
intervals
)
{
if
(
mLayerManager
)
{
mLayerManager
-
>
StopFrameTimeRecording
(
aStartIndex
*
intervals
)
;
}
else
if
(
mWrBridge
)
{
mWrBridge
-
>
StopFrameTimeRecording
(
aStartIndex
*
intervals
)
;
}
return
IPC_OK
(
)
;
}
void
CompositorBridgeParent
:
:
ActorDestroy
(
ActorDestroyReason
why
)
{
mCanSend
=
false
;
StopAndClearResources
(
)
;
RemoveCompositor
(
mCompositorBridgeID
)
;
mCompositionManager
=
nullptr
;
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
sIndirectLayerTrees
.
erase
(
mRootLayerTreeID
)
;
}
mSelfRef
=
this
;
MessageLoop
:
:
current
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
layers
:
:
CompositorBridgeParent
:
:
DeferredDestroy
"
this
&
CompositorBridgeParent
:
:
DeferredDestroy
)
)
;
}
void
CompositorBridgeParent
:
:
ScheduleRenderOnCompositorThread
(
)
{
MOZ_ASSERT
(
CompositorLoop
(
)
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
layers
:
:
CompositorBridgeParent
:
:
ScheduleComposition
"
this
&
CompositorBridgeParent
:
:
ScheduleComposition
)
)
;
}
void
CompositorBridgeParent
:
:
InvalidateOnCompositorThread
(
)
{
MOZ_ASSERT
(
CompositorLoop
(
)
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
layers
:
:
CompositorBridgeParent
:
:
Invalidate
"
this
&
CompositorBridgeParent
:
:
Invalidate
)
)
;
}
void
CompositorBridgeParent
:
:
PauseComposition
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
"
PauseComposition
(
)
can
only
be
called
on
the
compositor
thread
"
)
;
MonitorAutoLock
lock
(
mPauseCompositionMonitor
)
;
if
(
!
mPaused
)
{
mPaused
=
true
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
if
(
mCompositor
)
{
mCompositor
-
>
Pause
(
)
;
DidComposite
(
VsyncId
(
)
now
now
)
;
}
else
if
(
mWrBridge
)
{
mWrBridge
-
>
Pause
(
)
;
NotifyPipelineRendered
(
mWrBridge
-
>
PipelineId
(
)
mWrBridge
-
>
GetCurrentEpoch
(
)
VsyncId
(
)
now
now
now
)
;
}
}
lock
.
NotifyAll
(
)
;
}
void
CompositorBridgeParent
:
:
ResumeComposition
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
"
ResumeComposition
(
)
can
only
be
called
on
the
compositor
thread
"
)
;
MonitorAutoLock
lock
(
mResumeCompositionMonitor
)
;
bool
resumed
=
mOptions
.
UseWebRender
(
)
?
mWrBridge
-
>
Resume
(
)
:
mCompositor
-
>
Resume
(
)
;
if
(
!
resumed
)
{
#
ifdef
MOZ_WIDGET_ANDROID
__android_log_print
(
ANDROID_LOG_INFO
"
CompositorBridgeParent
"
"
Unable
to
renew
compositor
surface
;
remaining
in
paused
state
"
)
;
#
endif
lock
.
NotifyAll
(
)
;
return
;
}
mPaused
=
false
;
Invalidate
(
)
;
mCompositorScheduler
-
>
ForceComposeToTarget
(
nullptr
nullptr
)
;
lock
.
NotifyAll
(
)
;
}
void
CompositorBridgeParent
:
:
ForceComposition
(
)
{
mForceCompositionTask
=
nullptr
;
ScheduleRenderOnCompositorThread
(
)
;
}
void
CompositorBridgeParent
:
:
CancelCurrentCompositeTask
(
)
{
mCompositorScheduler
-
>
CancelCurrentCompositeTask
(
)
;
}
void
CompositorBridgeParent
:
:
SetEGLSurfaceRect
(
int
x
int
y
int
width
int
height
)
{
NS_ASSERTION
(
mUseExternalSurfaceSize
"
Compositor
created
without
UseExternalSurfaceSize
provided
"
)
;
mEGLSurfaceSize
.
SizeTo
(
width
height
)
;
if
(
mCompositor
)
{
mCompositor
-
>
SetDestinationSurfaceSize
(
gfx
:
:
IntSize
(
mEGLSurfaceSize
.
width
mEGLSurfaceSize
.
height
)
)
;
if
(
mCompositor
-
>
AsCompositorOGL
(
)
)
{
mCompositor
-
>
AsCompositorOGL
(
)
-
>
SetSurfaceOrigin
(
ScreenIntPoint
(
x
y
)
)
;
}
}
}
void
CompositorBridgeParent
:
:
ResumeCompositionAndResize
(
int
x
int
y
int
width
int
height
)
{
SetEGLSurfaceRect
(
x
y
width
height
)
;
ResumeComposition
(
)
;
}
void
CompositorBridgeParent
:
:
SchedulePauseOnCompositorThread
(
)
{
MonitorAutoLock
lock
(
mPauseCompositionMonitor
)
;
MOZ_ASSERT
(
CompositorLoop
(
)
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
layers
:
:
CompositorBridgeParent
:
:
PauseComposition
"
this
&
CompositorBridgeParent
:
:
PauseComposition
)
)
;
lock
.
Wait
(
)
;
}
bool
CompositorBridgeParent
:
:
ScheduleResumeOnCompositorThread
(
)
{
MonitorAutoLock
lock
(
mResumeCompositionMonitor
)
;
MOZ_ASSERT
(
CompositorLoop
(
)
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
layers
:
:
CompositorBridgeParent
:
:
ResumeComposition
"
this
&
CompositorBridgeParent
:
:
ResumeComposition
)
)
;
lock
.
Wait
(
)
;
return
!
mPaused
;
}
bool
CompositorBridgeParent
:
:
ScheduleResumeOnCompositorThread
(
int
x
int
y
int
width
int
height
)
{
MonitorAutoLock
lock
(
mResumeCompositionMonitor
)
;
MOZ_ASSERT
(
CompositorLoop
(
)
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableMethod
<
int
int
int
int
>
(
"
layers
:
:
CompositorBridgeParent
:
:
ResumeCompositionAndResize
"
this
&
CompositorBridgeParent
:
:
ResumeCompositionAndResize
x
y
width
height
)
)
;
lock
.
Wait
(
)
;
return
!
mPaused
;
}
void
CompositorBridgeParent
:
:
ScheduleTask
(
already_AddRefed
<
CancelableRunnable
>
task
int
time
)
{
if
(
time
=
=
0
)
{
MessageLoop
:
:
current
(
)
-
>
PostTask
(
std
:
:
move
(
task
)
)
;
}
else
{
MessageLoop
:
:
current
(
)
-
>
PostDelayedTask
(
std
:
:
move
(
task
)
time
)
;
}
}
void
CompositorBridgeParent
:
:
UpdatePaintTime
(
LayerTransactionParent
*
aLayerTree
const
TimeDuration
&
aPaintTime
)
{
if
(
!
mLayerManager
|
|
aPaintTime
.
ToMilliseconds
(
)
<
1
.
0
)
{
return
;
}
mLayerManager
-
>
SetPaintTime
(
aPaintTime
)
;
}
void
CompositorBridgeParent
:
:
RegisterPayload
(
LayerTransactionParent
*
aLayerTree
const
InfallibleTArray
<
CompositionPayload
>
&
aPayload
)
{
if
(
!
mLayerManager
)
{
return
;
}
mLayerManager
-
>
RegisterPayload
(
aPayload
)
;
}
void
CompositorBridgeParent
:
:
NotifyShadowTreeTransaction
(
LayersId
aId
bool
aIsFirstPaint
const
FocusTarget
&
aFocusTarget
bool
aScheduleComposite
uint32_t
aPaintSequenceNumber
bool
aIsRepeatTransaction
bool
aHitTestUpdate
)
{
if
(
!
aIsRepeatTransaction
&
&
mLayerManager
&
&
mLayerManager
-
>
GetRoot
(
)
)
{
bool
pluginsUpdatedFlag
=
true
;
AutoResolveRefLayers
resolve
(
mCompositionManager
this
nullptr
&
pluginsUpdatedFlag
)
;
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
if
(
!
pluginsUpdatedFlag
)
{
mWaitForPluginsUntil
=
TimeStamp
(
)
;
mHaveBlockedForPlugins
=
false
;
}
#
endif
if
(
mApzUpdater
)
{
mApzUpdater
-
>
UpdateFocusState
(
mRootLayerTreeID
aId
aFocusTarget
)
;
if
(
aHitTestUpdate
)
{
mApzUpdater
-
>
UpdateHitTestingTree
(
mRootLayerTreeID
mLayerManager
-
>
GetRoot
(
)
aIsFirstPaint
aId
aPaintSequenceNumber
)
;
}
}
mLayerManager
-
>
NotifyShadowTreeTransaction
(
)
;
}
if
(
aScheduleComposite
)
{
ScheduleComposition
(
)
;
}
}
void
CompositorBridgeParent
:
:
ScheduleComposition
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
mPaused
)
{
return
;
}
if
(
mWrBridge
)
{
mWrBridge
-
>
ScheduleGenerateFrame
(
)
;
}
else
{
mCompositorScheduler
-
>
ScheduleComposition
(
)
;
}
}
void
CompositorBridgeParent
:
:
SetShadowProperties
(
Layer
*
aLayer
)
{
ForEachNode
<
ForwardIterator
>
(
aLayer
[
]
(
Layer
*
layer
)
{
if
(
Layer
*
maskLayer
=
layer
-
>
GetMaskLayer
(
)
)
{
SetShadowProperties
(
maskLayer
)
;
}
for
(
size_t
i
=
0
;
i
<
layer
-
>
GetAncestorMaskLayerCount
(
)
;
i
+
+
)
{
SetShadowProperties
(
layer
-
>
GetAncestorMaskLayerAt
(
i
)
)
;
}
HostLayer
*
layerCompositor
=
layer
-
>
AsHostLayer
(
)
;
AnimationArray
&
animations
=
layer
-
>
GetAnimations
(
)
;
if
(
animations
.
IsEmpty
(
)
)
{
layerCompositor
-
>
SetShadowBaseTransform
(
layer
-
>
GetBaseTransform
(
)
)
;
layerCompositor
-
>
SetShadowTransformSetByAnimation
(
false
)
;
layerCompositor
-
>
SetShadowOpacity
(
layer
-
>
GetOpacity
(
)
)
;
layerCompositor
-
>
SetShadowOpacitySetByAnimation
(
false
)
;
}
layerCompositor
-
>
SetShadowVisibleRegion
(
layer
-
>
GetVisibleRegion
(
)
)
;
layerCompositor
-
>
SetShadowClipRect
(
layer
-
>
GetClipRect
(
)
)
;
}
)
;
}
void
CompositorBridgeParent
:
:
CompositeToTarget
(
VsyncId
aId
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
*
aRect
)
{
AUTO_PROFILER_TRACING
(
"
Paint
"
"
Composite
"
)
;
AUTO_PROFILER_LABEL
(
"
CompositorBridgeParent
:
:
CompositeToTarget
"
GRAPHICS
)
;
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
"
Composite
can
only
be
called
on
the
compositor
thread
"
)
;
TimeStamp
start
=
TimeStamp
:
:
Now
(
)
;
if
(
!
CanComposite
(
)
)
{
TimeStamp
end
=
TimeStamp
:
:
Now
(
)
;
DidComposite
(
aId
start
end
)
;
return
;
}
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
if
(
!
mWaitForPluginsUntil
.
IsNull
(
)
&
&
mWaitForPluginsUntil
>
start
)
{
mHaveBlockedForPlugins
=
true
;
ScheduleComposition
(
)
;
return
;
}
#
endif
bool
hasRemoteContent
=
false
;
bool
updatePluginsFlag
=
true
;
AutoResolveRefLayers
resolve
(
mCompositionManager
this
&
hasRemoteContent
&
updatePluginsFlag
)
;
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
if
(
!
hasRemoteContent
&
&
gfxVars
:
:
BrowserTabsRemoteAutostart
(
)
&
&
mCachedPluginData
.
Length
(
)
)
{
Unused
<
<
SendHideAllPlugins
(
GetWidget
(
)
-
>
GetWidgetKey
(
)
)
;
mCachedPluginData
.
Clear
(
)
;
}
#
endif
nsCString
none
;
if
(
aTarget
)
{
mLayerManager
-
>
BeginTransactionWithDrawTarget
(
aTarget
*
aRect
)
;
}
else
{
mLayerManager
-
>
BeginTransaction
(
none
)
;
}
SetShadowProperties
(
mLayerManager
-
>
GetRoot
(
)
)
;
if
(
mForceCompositionTask
&
&
!
mOverrideComposeReadiness
)
{
if
(
mCompositionManager
-
>
ReadyForCompose
(
)
)
{
mForceCompositionTask
-
>
Cancel
(
)
;
mForceCompositionTask
=
nullptr
;
}
else
{
return
;
}
}
mCompositionManager
-
>
ComputeRotation
(
)
;
TimeStamp
time
=
mTestTime
.
valueOr
(
mCompositorScheduler
-
>
GetLastComposeTime
(
)
)
;
bool
requestNextFrame
=
mCompositionManager
-
>
TransformShadowTree
(
time
mVsyncRate
)
;
if
(
requestNextFrame
&
&
!
recordreplay
:
:
IsRecordingOrReplaying
(
)
)
{
ScheduleComposition
(
)
;
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
if
(
!
mPluginWindowsHidden
&
&
mCachedPluginData
.
Length
(
)
)
{
mWaitForPluginsUntil
=
mCompositorScheduler
-
>
GetLastComposeTime
(
)
+
(
mVsyncRate
*
2
)
;
}
#
endif
}
RenderTraceLayers
(
mLayerManager
-
>
GetRoot
(
)
"
0000
"
)
;
#
ifdef
MOZ_DUMP_PAINTING
if
(
gfxPrefs
:
:
DumpHostLayers
(
)
)
{
printf_stderr
(
"
Painting
-
-
-
compositing
layer
tree
:
\
n
"
)
;
mLayerManager
-
>
Dump
(
true
)
;
}
#
endif
mLayerManager
-
>
SetDebugOverlayWantsNextFrame
(
false
)
;
mLayerManager
-
>
EndTransaction
(
time
)
;
if
(
!
aTarget
)
{
TimeStamp
end
=
TimeStamp
:
:
Now
(
)
;
DidComposite
(
aId
start
end
)
;
}
if
(
!
mLayerManager
-
>
GetCompositeUntilTime
(
)
.
IsNull
(
)
|
|
mLayerManager
-
>
DebugOverlayWantsNextFrame
(
)
)
{
ScheduleComposition
(
)
;
}
#
ifdef
COMPOSITOR_PERFORMANCE_WARNING
TimeDuration
executionTime
=
TimeStamp
:
:
Now
(
)
-
mCompositorScheduler
-
>
GetLastComposeTime
(
)
;
TimeDuration
frameBudget
=
TimeDuration
:
:
FromMilliseconds
(
15
)
;
int32_t
frameRate
=
CalculateCompositionFrameRate
(
)
;
if
(
frameRate
>
0
)
{
frameBudget
=
TimeDuration
:
:
FromSeconds
(
1
.
0
/
frameRate
)
;
}
if
(
executionTime
>
frameBudget
)
{
printf_stderr
(
"
Compositor
:
Composite
execution
took
%
4
.
1f
ms
\
n
"
executionTime
.
ToMilliseconds
(
)
)
;
}
#
endif
if
(
gfxPrefs
:
:
LayersCompositionFrameRate
(
)
=
=
0
|
|
mLayerManager
-
>
AlwaysScheduleComposite
(
)
)
{
ScheduleComposition
(
)
;
}
mLayerManager
-
>
SetCompositionTime
(
TimeStamp
(
)
)
;
mozilla
:
:
Telemetry
:
:
AccumulateTimeDelta
(
mozilla
:
:
Telemetry
:
:
COMPOSITE_TIME
start
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvRemotePluginsReady
(
)
{
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
mWaitForPluginsUntil
=
TimeStamp
(
)
;
if
(
mHaveBlockedForPlugins
)
{
mHaveBlockedForPlugins
=
false
;
ForceComposeToTarget
(
nullptr
)
;
}
else
{
ScheduleComposition
(
)
;
}
return
IPC_OK
(
)
;
#
else
MOZ_ASSERT_UNREACHABLE
(
"
CompositorBridgeParent
:
:
RecvRemotePluginsReady
calls
"
"
unexpected
on
this
platform
.
"
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
#
endif
}
void
CompositorBridgeParent
:
:
ForceComposeToTarget
(
DrawTarget
*
aTarget
const
gfx
:
:
IntRect
*
aRect
)
{
AUTO_PROFILER_LABEL
(
"
CompositorBridgeParent
:
:
ForceComposeToTarget
"
GRAPHICS
)
;
AutoRestore
<
bool
>
override
(
mOverrideComposeReadiness
)
;
mOverrideComposeReadiness
=
true
;
mCompositorScheduler
-
>
ForceComposeToTarget
(
aTarget
aRect
)
;
}
PAPZCTreeManagerParent
*
CompositorBridgeParent
:
:
AllocPAPZCTreeManagerParent
(
const
LayersId
&
aLayersId
)
{
MOZ_ASSERT
(
XRE_IsGPUProcess
(
)
)
;
MOZ_ASSERT
(
mOptions
.
UseAPZ
(
)
)
;
MOZ_ASSERT
(
mApzcTreeManager
)
;
MOZ_ASSERT
(
mApzUpdater
)
;
MOZ_ASSERT
(
!
aLayersId
.
IsValid
(
)
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
CompositorBridgeParent
:
:
LayerTreeState
&
state
=
sIndirectLayerTrees
[
mRootLayerTreeID
]
;
MOZ_ASSERT
(
state
.
mParent
.
get
(
)
=
=
this
)
;
MOZ_ASSERT
(
!
state
.
mApzcTreeManagerParent
)
;
state
.
mApzcTreeManagerParent
=
new
APZCTreeManagerParent
(
mRootLayerTreeID
mApzcTreeManager
mApzUpdater
)
;
return
state
.
mApzcTreeManagerParent
;
}
bool
CompositorBridgeParent
:
:
DeallocPAPZCTreeManagerParent
(
PAPZCTreeManagerParent
*
aActor
)
{
delete
aActor
;
return
true
;
}
void
CompositorBridgeParent
:
:
AllocateAPZCTreeManagerParent
(
const
MonitorAutoLock
&
aProofOfLayerTreeStateLock
const
LayersId
&
aLayersId
LayerTreeState
&
aState
)
{
MOZ_ASSERT
(
aState
.
mParent
=
=
this
)
;
MOZ_ASSERT
(
mApzcTreeManager
)
;
MOZ_ASSERT
(
mApzUpdater
)
;
MOZ_ASSERT
(
!
aState
.
mApzcTreeManagerParent
)
;
aState
.
mApzcTreeManagerParent
=
new
APZCTreeManagerParent
(
aLayersId
mApzcTreeManager
mApzUpdater
)
;
}
PAPZParent
*
CompositorBridgeParent
:
:
AllocPAPZParent
(
const
LayersId
&
aLayersId
)
{
MOZ_ASSERT
(
!
aLayersId
.
IsValid
(
)
)
;
RemoteContentController
*
controller
=
new
RemoteContentController
(
)
;
controller
-
>
AddRef
(
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
CompositorBridgeParent
:
:
LayerTreeState
&
state
=
sIndirectLayerTrees
[
mRootLayerTreeID
]
;
MOZ_ASSERT
(
!
state
.
mController
)
;
state
.
mController
=
controller
;
return
controller
;
}
bool
CompositorBridgeParent
:
:
DeallocPAPZParent
(
PAPZParent
*
aActor
)
{
RemoteContentController
*
controller
=
static_cast
<
RemoteContentController
*
>
(
aActor
)
;
controller
-
>
Release
(
)
;
return
true
;
}
#
if
defined
(
MOZ_WIDGET_ANDROID
)
AndroidDynamicToolbarAnimator
*
CompositorBridgeParent
:
:
GetAndroidDynamicToolbarAnimator
(
)
{
return
mApzcTreeManager
?
mApzcTreeManager
-
>
GetAndroidDynamicToolbarAnimator
(
)
:
nullptr
;
}
#
endif
RefPtr
<
APZSampler
>
CompositorBridgeParent
:
:
GetAPZSampler
(
)
{
return
mApzSampler
;
}
RefPtr
<
APZUpdater
>
CompositorBridgeParent
:
:
GetAPZUpdater
(
)
{
return
mApzUpdater
;
}
CompositorBridgeParent
*
CompositorBridgeParent
:
:
GetCompositorBridgeParentFromLayersId
(
const
LayersId
&
aLayersId
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
return
sIndirectLayerTrees
[
aLayersId
]
.
mParent
;
}
RefPtr
<
CompositorBridgeParent
>
CompositorBridgeParent
:
:
GetCompositorBridgeParentFromWindowId
(
const
wr
:
:
WindowId
&
aWindowId
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
for
(
auto
it
=
sIndirectLayerTrees
.
begin
(
)
;
it
!
=
sIndirectLayerTrees
.
end
(
)
;
it
+
+
)
{
LayerTreeState
*
state
=
&
it
-
>
second
;
if
(
!
state
-
>
mWrBridge
)
{
continue
;
}
if
(
RefPtr
<
wr
:
:
WebRenderAPI
>
api
=
state
-
>
mWrBridge
-
>
GetWebRenderAPI
(
)
)
{
if
(
api
-
>
GetId
(
)
=
=
aWindowId
)
{
return
state
-
>
mParent
;
}
}
}
return
nullptr
;
}
bool
CompositorBridgeParent
:
:
CanComposite
(
)
{
return
mLayerManager
&
&
mLayerManager
-
>
GetRoot
(
)
&
&
!
mPaused
;
}
void
CompositorBridgeParent
:
:
ScheduleRotationOnCompositorThread
(
const
TargetConfig
&
aTargetConfig
bool
aIsFirstPaint
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
aIsFirstPaint
&
&
!
mCompositionManager
-
>
IsFirstPaint
(
)
&
&
mCompositionManager
-
>
RequiresReorientation
(
aTargetConfig
.
orientation
(
)
)
)
{
if
(
mForceCompositionTask
!
=
nullptr
)
{
mForceCompositionTask
-
>
Cancel
(
)
;
}
RefPtr
<
CancelableRunnable
>
task
=
NewCancelableRunnableMethod
(
"
layers
:
:
CompositorBridgeParent
:
:
ForceComposition
"
this
&
CompositorBridgeParent
:
:
ForceComposition
)
;
mForceCompositionTask
=
task
;
ScheduleTask
(
task
.
forget
(
)
gfxPrefs
:
:
OrientationSyncMillis
(
)
)
;
}
}
void
CompositorBridgeParent
:
:
ShadowLayersUpdated
(
LayerTransactionParent
*
aLayerTree
const
TransactionInfo
&
aInfo
bool
aHitTestUpdate
)
{
const
TargetConfig
&
targetConfig
=
aInfo
.
targetConfig
(
)
;
ScheduleRotationOnCompositorThread
(
targetConfig
aInfo
.
isFirstPaint
(
)
)
;
mLayerManager
-
>
UpdateRenderBounds
(
targetConfig
.
naturalBounds
(
)
)
;
mLayerManager
-
>
SetRegionToClear
(
targetConfig
.
clearRegion
(
)
)
;
if
(
mLayerManager
-
>
GetCompositor
(
)
)
{
mLayerManager
-
>
GetCompositor
(
)
-
>
SetScreenRotation
(
targetConfig
.
rotation
(
)
)
;
}
mCompositionManager
-
>
Updated
(
aInfo
.
isFirstPaint
(
)
targetConfig
)
;
Layer
*
root
=
aLayerTree
-
>
GetRoot
(
)
;
mLayerManager
-
>
SetRoot
(
root
)
;
if
(
mApzUpdater
&
&
!
aInfo
.
isRepeatTransaction
(
)
)
{
mApzUpdater
-
>
UpdateFocusState
(
mRootLayerTreeID
mRootLayerTreeID
aInfo
.
focusTarget
(
)
)
;
if
(
aHitTestUpdate
)
{
AutoResolveRefLayers
resolve
(
mCompositionManager
)
;
mApzUpdater
-
>
UpdateHitTestingTree
(
mRootLayerTreeID
root
aInfo
.
isFirstPaint
(
)
mRootLayerTreeID
aInfo
.
paintSequenceNumber
(
)
)
;
}
}
MOZ_ASSERT
(
aInfo
.
id
(
)
=
=
TransactionId
{
1
}
|
|
aInfo
.
id
(
)
>
mPendingTransaction
)
;
mPendingTransaction
=
aInfo
.
id
(
)
;
mRefreshStartTime
=
aInfo
.
refreshStart
(
)
;
mTxnStartTime
=
aInfo
.
transactionStart
(
)
;
mFwdTime
=
aInfo
.
fwdTime
(
)
;
RegisterPayload
(
aLayerTree
aInfo
.
payload
(
)
)
;
if
(
root
)
{
SetShadowProperties
(
root
)
;
}
if
(
aInfo
.
scheduleComposite
(
)
)
{
ScheduleComposition
(
)
;
if
(
mPaused
)
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
DidComposite
(
VsyncId
(
)
now
now
)
;
}
}
mLayerManager
-
>
NotifyShadowTreeTransaction
(
)
;
}
void
CompositorBridgeParent
:
:
ScheduleComposite
(
LayerTransactionParent
*
aLayerTree
)
{
ScheduleComposition
(
)
;
}
bool
CompositorBridgeParent
:
:
SetTestSampleTime
(
const
LayersId
&
aId
const
TimeStamp
&
aTime
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
aTime
.
IsNull
(
)
)
{
return
false
;
}
mTestTime
=
Some
(
aTime
)
;
if
(
mWrBridge
)
{
mWrBridge
-
>
FlushRendering
(
)
;
return
true
;
}
bool
testComposite
=
mCompositionManager
&
&
mCompositorScheduler
-
>
NeedsComposite
(
)
;
if
(
testComposite
)
{
AutoResolveRefLayers
resolve
(
mCompositionManager
)
;
bool
requestNextFrame
=
mCompositionManager
-
>
TransformShadowTree
(
aTime
mVsyncRate
)
;
if
(
!
requestNextFrame
)
{
CancelCurrentCompositeTask
(
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
DidComposite
(
VsyncId
(
)
now
now
)
;
}
}
return
true
;
}
void
CompositorBridgeParent
:
:
LeaveTestMode
(
const
LayersId
&
aId
)
{
mTestTime
=
Nothing
(
)
;
}
void
CompositorBridgeParent
:
:
ApplyAsyncProperties
(
LayerTransactionParent
*
aLayerTree
TransformsToSkip
aSkip
)
{
if
(
aLayerTree
-
>
GetRoot
(
)
)
{
AutoResolveRefLayers
resolve
(
mCompositionManager
)
;
SetShadowProperties
(
mLayerManager
-
>
GetRoot
(
)
)
;
TimeStamp
time
=
mTestTime
.
valueOr
(
mCompositorScheduler
-
>
GetLastComposeTime
(
)
)
;
bool
requestNextFrame
=
mCompositionManager
-
>
TransformShadowTree
(
time
mVsyncRate
aSkip
)
;
if
(
!
requestNextFrame
)
{
CancelCurrentCompositeTask
(
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
DidComposite
(
VsyncId
(
)
now
now
)
;
}
}
}
CompositorAnimationStorage
*
CompositorBridgeParent
:
:
GetAnimationStorage
(
)
{
if
(
!
mAnimationStorage
)
{
mAnimationStorage
=
new
CompositorAnimationStorage
(
)
;
}
return
mAnimationStorage
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvGetFrameUniformity
(
FrameUniformityData
*
aOutData
)
{
mCompositionManager
-
>
GetFrameUniformity
(
aOutData
)
;
return
IPC_OK
(
)
;
}
void
CompositorBridgeParent
:
:
SetTestAsyncScrollOffset
(
const
LayersId
&
aLayersId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
const
CSSPoint
&
aPoint
)
{
if
(
mApzUpdater
)
{
MOZ_ASSERT
(
aLayersId
.
IsValid
(
)
)
;
mApzUpdater
-
>
SetTestAsyncScrollOffset
(
aLayersId
aScrollId
aPoint
)
;
}
}
void
CompositorBridgeParent
:
:
SetTestAsyncZoom
(
const
LayersId
&
aLayersId
const
ScrollableLayerGuid
:
:
ViewID
&
aScrollId
const
LayerToParentLayerScale
&
aZoom
)
{
if
(
mApzUpdater
)
{
MOZ_ASSERT
(
aLayersId
.
IsValid
(
)
)
;
mApzUpdater
-
>
SetTestAsyncZoom
(
aLayersId
aScrollId
aZoom
)
;
}
}
void
CompositorBridgeParent
:
:
FlushApzRepaints
(
const
LayersId
&
aLayersId
)
{
MOZ_ASSERT
(
mApzUpdater
)
;
MOZ_ASSERT
(
aLayersId
.
IsValid
(
)
)
;
mApzUpdater
-
>
RunOnControllerThread
(
aLayersId
NS_NewRunnableFunction
(
"
layers
:
:
CompositorBridgeParent
:
:
FlushApzRepaints
"
[
=
]
(
)
{
APZCTreeManager
:
:
FlushApzRepaints
(
aLayersId
)
;
}
)
)
;
}
void
CompositorBridgeParent
:
:
GetAPZTestData
(
const
LayersId
&
aLayersId
APZTestData
*
aOutData
)
{
if
(
mApzUpdater
)
{
MOZ_ASSERT
(
aLayersId
.
IsValid
(
)
)
;
mApzUpdater
-
>
GetAPZTestData
(
aLayersId
aOutData
)
;
}
}
void
CompositorBridgeParent
:
:
SetConfirmedTargetAPZC
(
const
LayersId
&
aLayersId
const
uint64_t
&
aInputBlockId
const
nsTArray
<
ScrollableLayerGuid
>
&
aTargets
)
{
if
(
!
mApzcTreeManager
|
|
!
mApzUpdater
)
{
return
;
}
void
(
APZCTreeManager
:
:
*
setTargetApzcFunc
)
(
uint64_t
const
nsTArray
<
ScrollableLayerGuid
>
&
)
=
&
APZCTreeManager
:
:
SetTargetAPZC
;
RefPtr
<
Runnable
>
task
=
NewRunnableMethod
<
uint64_t
StoreCopyPassByConstLRef
<
nsTArray
<
ScrollableLayerGuid
>
>
>
(
"
layers
:
:
CompositorBridgeParent
:
:
SetConfirmedTargetAPZC
"
mApzcTreeManager
.
get
(
)
setTargetApzcFunc
aInputBlockId
aTargets
)
;
mApzUpdater
-
>
RunOnControllerThread
(
aLayersId
task
.
forget
(
)
)
;
}
void
CompositorBridgeParent
:
:
InitializeLayerManager
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
)
{
NS_ASSERTION
(
!
mLayerManager
"
Already
initialised
mLayerManager
"
)
;
NS_ASSERTION
(
!
mCompositor
"
Already
initialised
mCompositor
"
)
;
if
(
!
InitializeAdvancedLayers
(
aBackendHints
nullptr
)
)
{
mCompositor
=
NewCompositor
(
aBackendHints
)
;
if
(
!
mCompositor
)
{
return
;
}
mLayerManager
=
new
LayerManagerComposite
(
mCompositor
)
;
}
mLayerManager
-
>
SetCompositorBridgeID
(
mCompositorBridgeID
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
sIndirectLayerTrees
[
mRootLayerTreeID
]
.
mLayerManager
=
mLayerManager
;
}
bool
CompositorBridgeParent
:
:
InitializeAdvancedLayers
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
TextureFactoryIdentifier
*
aOutIdentifier
)
{
#
ifdef
XP_WIN
if
(
!
mOptions
.
UseAdvancedLayers
(
)
)
{
return
false
;
}
if
(
!
aBackendHints
.
Contains
(
LayersBackend
:
:
LAYERS_D3D11
)
)
{
return
false
;
}
RefPtr
<
LayerManagerMLGPU
>
manager
=
new
LayerManagerMLGPU
(
mWidget
)
;
if
(
!
manager
-
>
Initialize
(
)
)
{
return
false
;
}
if
(
aOutIdentifier
)
{
*
aOutIdentifier
=
manager
-
>
GetTextureFactoryIdentifier
(
)
;
}
mLayerManager
=
manager
;
return
true
;
#
else
return
false
;
#
endif
}
RefPtr
<
Compositor
>
CompositorBridgeParent
:
:
NewCompositor
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
)
{
for
(
size_t
i
=
0
;
i
<
aBackendHints
.
Length
(
)
;
+
+
i
)
{
RefPtr
<
Compositor
>
compositor
;
if
(
aBackendHints
[
i
]
=
=
LayersBackend
:
:
LAYERS_OPENGL
)
{
compositor
=
new
CompositorOGL
(
this
mWidget
mEGLSurfaceSize
.
width
mEGLSurfaceSize
.
height
mUseExternalSurfaceSize
)
;
}
else
if
(
aBackendHints
[
i
]
=
=
LayersBackend
:
:
LAYERS_BASIC
)
{
#
ifdef
MOZ_WIDGET_GTK
if
(
gfxVars
:
:
UseXRender
(
)
)
{
compositor
=
new
X11BasicCompositor
(
this
mWidget
)
;
}
else
#
endif
{
compositor
=
new
BasicCompositor
(
this
mWidget
)
;
}
#
ifdef
XP_WIN
}
else
if
(
aBackendHints
[
i
]
=
=
LayersBackend
:
:
LAYERS_D3D11
)
{
compositor
=
new
CompositorD3D11
(
this
mWidget
)
;
#
endif
}
nsCString
failureReason
;
const
int
max_fb_size
=
32767
;
const
LayoutDeviceIntSize
size
=
mWidget
-
>
GetClientSize
(
)
;
if
(
size
.
width
>
max_fb_size
|
|
size
.
height
>
max_fb_size
)
{
failureReason
=
"
FEATURE_FAILURE_MAX_FRAMEBUFFER_SIZE
"
;
return
nullptr
;
}
MOZ_ASSERT
(
!
gfxVars
:
:
UseWebRender
(
)
|
|
aBackendHints
[
i
]
=
=
LayersBackend
:
:
LAYERS_BASIC
)
;
if
(
compositor
&
&
compositor
-
>
Initialize
(
&
failureReason
)
)
{
if
(
failureReason
.
IsEmpty
(
)
)
{
failureReason
=
"
SUCCESS
"
;
}
if
(
aBackendHints
[
i
]
=
=
LayersBackend
:
:
LAYERS_OPENGL
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
OPENGL_COMPOSITING_FAILURE_ID
failureReason
)
;
}
#
ifdef
XP_WIN
else
if
(
aBackendHints
[
i
]
=
=
LayersBackend
:
:
LAYERS_D3D11
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
D3D11_COMPOSITING_FAILURE_ID
failureReason
)
;
}
#
endif
return
compositor
;
}
if
(
aBackendHints
[
i
]
=
=
LayersBackend
:
:
LAYERS_OPENGL
)
{
gfxCriticalNote
<
<
"
[
OPENGL
]
Failed
to
init
compositor
with
reason
:
"
<
<
failureReason
.
get
(
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
OPENGL_COMPOSITING_FAILURE_ID
failureReason
)
;
}
#
ifdef
XP_WIN
else
if
(
aBackendHints
[
i
]
=
=
LayersBackend
:
:
LAYERS_D3D11
)
{
gfxCriticalNote
<
<
"
[
D3D11
]
Failed
to
init
compositor
with
reason
:
"
<
<
failureReason
.
get
(
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
D3D11_COMPOSITING_FAILURE_ID
failureReason
)
;
}
#
endif
}
return
nullptr
;
}
PLayerTransactionParent
*
CompositorBridgeParent
:
:
AllocPLayerTransactionParent
(
const
nsTArray
<
LayersBackend
>
&
aBackendHints
const
LayersId
&
aId
)
{
MOZ_ASSERT
(
!
aId
.
IsValid
(
)
)
;
InitializeLayerManager
(
aBackendHints
)
;
if
(
!
mLayerManager
)
{
NS_WARNING
(
"
Failed
to
initialise
Compositor
"
)
;
LayerTransactionParent
*
p
=
new
LayerTransactionParent
(
nullptr
this
nullptr
mRootLayerTreeID
mVsyncRate
)
;
p
-
>
AddIPDLReference
(
)
;
return
p
;
}
mCompositionManager
=
new
AsyncCompositionManager
(
this
mLayerManager
)
;
LayerTransactionParent
*
p
=
new
LayerTransactionParent
(
mLayerManager
this
GetAnimationStorage
(
)
mRootLayerTreeID
mVsyncRate
)
;
p
-
>
AddIPDLReference
(
)
;
return
p
;
}
bool
CompositorBridgeParent
:
:
DeallocPLayerTransactionParent
(
PLayerTransactionParent
*
actor
)
{
static_cast
<
LayerTransactionParent
*
>
(
actor
)
-
>
ReleaseIPDLReference
(
)
;
return
true
;
}
CompositorBridgeParent
*
CompositorBridgeParent
:
:
GetCompositorBridgeParent
(
uint64_t
id
)
{
AssertIsInCompositorThread
(
)
;
CompositorMap
:
:
iterator
it
=
sCompositorMap
-
>
find
(
id
)
;
return
it
!
=
sCompositorMap
-
>
end
(
)
?
it
-
>
second
:
nullptr
;
}
void
CompositorBridgeParent
:
:
AddCompositor
(
CompositorBridgeParent
*
compositor
uint64_t
*
outID
)
{
AssertIsInCompositorThread
(
)
;
static
uint64_t
sNextID
=
1
;
+
+
sNextID
;
(
*
sCompositorMap
)
[
sNextID
]
=
compositor
;
*
outID
=
sNextID
;
}
CompositorBridgeParent
*
CompositorBridgeParent
:
:
RemoveCompositor
(
uint64_t
id
)
{
AssertIsInCompositorThread
(
)
;
CompositorMap
:
:
iterator
it
=
sCompositorMap
-
>
find
(
id
)
;
if
(
it
=
=
sCompositorMap
-
>
end
(
)
)
{
return
nullptr
;
}
CompositorBridgeParent
*
retval
=
it
-
>
second
;
sCompositorMap
-
>
erase
(
it
)
;
return
retval
;
}
void
CompositorBridgeParent
:
:
NotifyVsync
(
const
VsyncEvent
&
aVsync
const
LayersId
&
aLayersId
)
{
MOZ_ASSERT
(
XRE_GetProcessType
(
)
=
=
GeckoProcessType_GPU
)
;
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
auto
it
=
sIndirectLayerTrees
.
find
(
aLayersId
)
;
if
(
it
=
=
sIndirectLayerTrees
.
end
(
)
)
return
;
CompositorBridgeParent
*
cbp
=
it
-
>
second
.
mParent
;
if
(
!
cbp
|
|
!
cbp
-
>
mWidget
)
return
;
RefPtr
<
VsyncObserver
>
obs
=
cbp
-
>
mWidget
-
>
GetVsyncObserver
(
)
;
if
(
!
obs
)
return
;
obs
-
>
NotifyVsync
(
aVsync
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvNotifyChildCreated
(
const
LayersId
&
child
CompositorOptions
*
aOptions
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
NotifyChildCreated
(
child
)
;
*
aOptions
=
mOptions
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvNotifyChildRecreated
(
const
LayersId
&
aChild
CompositorOptions
*
aOptions
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
if
(
sIndirectLayerTrees
.
find
(
aChild
)
!
=
sIndirectLayerTrees
.
end
(
)
)
{
NS_WARNING
(
"
Invalid
to
register
the
same
layer
tree
twice
"
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
}
NotifyChildCreated
(
aChild
)
;
*
aOptions
=
mOptions
;
return
IPC_OK
(
)
;
}
void
CompositorBridgeParent
:
:
NotifyChildCreated
(
LayersId
aChild
)
{
sIndirectLayerTreesLock
-
>
AssertCurrentThreadOwns
(
)
;
sIndirectLayerTrees
[
aChild
]
.
mParent
=
this
;
sIndirectLayerTrees
[
aChild
]
.
mLayerManager
=
mLayerManager
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvMapAndNotifyChildCreated
(
const
LayersId
&
aChild
const
base
:
:
ProcessId
&
aOwnerPid
CompositorOptions
*
aOptions
)
{
MOZ_ASSERT
(
XRE_IsGPUProcess
(
)
)
;
LayerTreeOwnerTracker
:
:
Get
(
)
-
>
Map
(
aChild
aOwnerPid
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
NotifyChildCreated
(
aChild
)
;
*
aOptions
=
mOptions
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvAdoptChild
(
const
LayersId
&
child
)
{
RefPtr
<
APZUpdater
>
oldApzUpdater
;
APZCTreeManagerParent
*
parent
;
bool
scheduleComposition
=
false
;
RefPtr
<
CrossProcessCompositorBridgeParent
>
cpcp
;
RefPtr
<
WebRenderBridgeParent
>
childWrBridge
;
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
if
(
sIndirectLayerTrees
[
child
]
.
mParent
=
=
this
)
{
return
IPC_OK
(
)
;
}
if
(
sIndirectLayerTrees
[
child
]
.
mParent
)
{
MOZ_ASSERT
(
sIndirectLayerTrees
[
child
]
.
mParent
-
>
mOptions
=
=
mOptions
)
;
oldApzUpdater
=
sIndirectLayerTrees
[
child
]
.
mParent
-
>
mApzUpdater
;
}
NotifyChildCreated
(
child
)
;
if
(
sIndirectLayerTrees
[
child
]
.
mLayerTree
)
{
sIndirectLayerTrees
[
child
]
.
mLayerTree
-
>
SetLayerManager
(
mLayerManager
GetAnimationStorage
(
)
)
;
scheduleComposition
=
true
;
}
if
(
mWrBridge
)
{
childWrBridge
=
sIndirectLayerTrees
[
child
]
.
mWrBridge
;
cpcp
=
sIndirectLayerTrees
[
child
]
.
mCrossProcessParent
;
}
parent
=
sIndirectLayerTrees
[
child
]
.
mApzcTreeManagerParent
;
}
if
(
scheduleComposition
)
{
ScheduleComposition
(
)
;
}
if
(
childWrBridge
)
{
MOZ_ASSERT
(
mWrBridge
)
;
RefPtr
<
wr
:
:
WebRenderAPI
>
api
=
mWrBridge
-
>
GetWebRenderAPI
(
)
;
api
=
api
-
>
Clone
(
)
;
wr
:
:
Epoch
newEpoch
=
childWrBridge
-
>
UpdateWebRender
(
mWrBridge
-
>
CompositorScheduler
(
)
api
mWrBridge
-
>
AsyncImageManager
(
)
GetAnimationStorage
(
)
mWrBridge
-
>
GetTextureFactoryIdentifier
(
)
)
;
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
NotifyPipelineRendered
(
childWrBridge
-
>
PipelineId
(
)
newEpoch
VsyncId
(
)
now
now
now
)
;
}
if
(
oldApzUpdater
)
{
MOZ_ASSERT
(
mApzUpdater
)
;
}
if
(
mApzUpdater
)
{
if
(
parent
)
{
MOZ_ASSERT
(
mApzcTreeManager
)
;
parent
-
>
ChildAdopted
(
mApzcTreeManager
mApzUpdater
)
;
}
mApzUpdater
-
>
NotifyLayerTreeAdopted
(
child
oldApzUpdater
)
;
}
return
IPC_OK
(
)
;
}
PWebRenderBridgeParent
*
CompositorBridgeParent
:
:
AllocPWebRenderBridgeParent
(
const
wr
:
:
PipelineId
&
aPipelineId
const
LayoutDeviceIntSize
&
aSize
)
{
#
ifndef
MOZ_BUILD_WEBRENDER
MOZ_RELEASE_ASSERT
(
false
)
;
#
endif
MOZ_ASSERT
(
wr
:
:
AsLayersId
(
aPipelineId
)
=
=
mRootLayerTreeID
)
;
MOZ_ASSERT
(
!
mWrBridge
)
;
MOZ_ASSERT
(
!
mCompositor
)
;
MOZ_ASSERT
(
!
mCompositorScheduler
)
;
MOZ_ASSERT
(
mWidget
)
;
RefPtr
<
widget
:
:
CompositorWidget
>
widget
=
mWidget
;
wr
:
:
WrWindowId
windowId
=
wr
:
:
NewWindowId
(
)
;
if
(
mApzUpdater
)
{
mApzUpdater
-
>
SetWebRenderWindowId
(
windowId
)
;
}
if
(
mApzSampler
)
{
mApzSampler
-
>
SetWebRenderWindowId
(
windowId
)
;
}
RefPtr
<
wr
:
:
WebRenderAPI
>
api
=
wr
:
:
WebRenderAPI
:
:
Create
(
this
std
:
:
move
(
widget
)
windowId
aSize
)
;
if
(
!
api
)
{
mWrBridge
=
WebRenderBridgeParent
:
:
CreateDestroyed
(
aPipelineId
)
;
mWrBridge
.
get
(
)
-
>
AddRef
(
)
;
return
mWrBridge
;
}
mAsyncImageManager
=
new
AsyncImagePipelineManager
(
api
-
>
Clone
(
)
)
;
RefPtr
<
AsyncImagePipelineManager
>
asyncMgr
=
mAsyncImageManager
;
wr
:
:
TransactionBuilder
txn
;
txn
.
SetRootPipeline
(
aPipelineId
)
;
api
-
>
SendTransaction
(
txn
)
;
RefPtr
<
CompositorAnimationStorage
>
animStorage
=
GetAnimationStorage
(
)
;
mWrBridge
=
new
WebRenderBridgeParent
(
this
aPipelineId
mWidget
nullptr
std
:
:
move
(
api
)
std
:
:
move
(
asyncMgr
)
std
:
:
move
(
animStorage
)
mVsyncRate
)
;
mWrBridge
.
get
(
)
-
>
AddRef
(
)
;
mCompositorScheduler
=
mWrBridge
-
>
CompositorScheduler
(
)
;
MOZ_ASSERT
(
mCompositorScheduler
)
;
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
MOZ_ASSERT
(
sIndirectLayerTrees
[
mRootLayerTreeID
]
.
mWrBridge
=
=
nullptr
)
;
sIndirectLayerTrees
[
mRootLayerTreeID
]
.
mWrBridge
=
mWrBridge
;
}
return
mWrBridge
;
}
bool
CompositorBridgeParent
:
:
DeallocPWebRenderBridgeParent
(
PWebRenderBridgeParent
*
aActor
)
{
#
ifndef
MOZ_BUILD_WEBRENDER
MOZ_RELEASE_ASSERT
(
false
)
;
#
endif
WebRenderBridgeParent
*
parent
=
static_cast
<
WebRenderBridgeParent
*
>
(
aActor
)
;
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
auto
it
=
sIndirectLayerTrees
.
find
(
wr
:
:
AsLayersId
(
parent
-
>
PipelineId
(
)
)
)
;
if
(
it
!
=
sIndirectLayerTrees
.
end
(
)
)
{
it
-
>
second
.
mWrBridge
=
nullptr
;
}
}
parent
-
>
Release
(
)
;
return
true
;
}
void
CompositorBridgeParent
:
:
NotifyMemoryPressure
(
)
{
if
(
mWrBridge
)
{
RefPtr
<
wr
:
:
WebRenderAPI
>
api
=
mWrBridge
-
>
GetWebRenderAPI
(
)
;
if
(
api
)
{
api
-
>
NotifyMemoryPressure
(
)
;
}
}
}
void
CompositorBridgeParent
:
:
AccumulateMemoryReport
(
wr
:
:
MemoryReport
*
aReport
)
{
if
(
mWrBridge
)
{
RefPtr
<
wr
:
:
WebRenderAPI
>
api
=
mWrBridge
-
>
GetWebRenderAPI
(
)
;
if
(
api
)
{
api
-
>
AccumulateMemoryReport
(
aReport
)
;
}
}
}
RefPtr
<
WebRenderBridgeParent
>
CompositorBridgeParent
:
:
GetWebRenderBridgeParent
(
)
const
{
return
mWrBridge
;
}
Maybe
<
TimeStamp
>
CompositorBridgeParent
:
:
GetTestingTimeStamp
(
)
const
{
return
mTestTime
;
}
void
EraseLayerState
(
LayersId
aId
)
{
RefPtr
<
APZUpdater
>
apz
;
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
auto
iter
=
sIndirectLayerTrees
.
find
(
aId
)
;
if
(
iter
!
=
sIndirectLayerTrees
.
end
(
)
)
{
CompositorBridgeParent
*
parent
=
iter
-
>
second
.
mParent
;
if
(
parent
)
{
apz
=
parent
-
>
GetAPZUpdater
(
)
;
}
sIndirectLayerTrees
.
erase
(
iter
)
;
}
}
if
(
apz
)
{
apz
-
>
NotifyLayerTreeRemoved
(
aId
)
;
}
}
void
CompositorBridgeParent
:
:
DeallocateLayerTreeId
(
LayersId
aId
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
CompositorLoop
(
)
)
{
gfxCriticalError
(
)
<
<
"
Attempting
to
post
to
a
invalid
Compositor
Loop
"
;
return
;
}
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableFunction
(
"
EraseLayerStateRunnable
"
&
EraseLayerState
aId
)
)
;
}
static
void
UpdateControllerForLayersId
(
LayersId
aLayersId
GeckoContentController
*
aController
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
sIndirectLayerTrees
[
aLayersId
]
.
mController
=
already_AddRefed
<
GeckoContentController
>
(
aController
)
;
}
ScopedLayerTreeRegistration
:
:
ScopedLayerTreeRegistration
(
APZCTreeManager
*
aApzctm
LayersId
aLayersId
Layer
*
aRoot
GeckoContentController
*
aController
)
:
mLayersId
(
aLayersId
)
{
EnsureLayerTreeMapReady
(
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
sIndirectLayerTrees
[
aLayersId
]
.
mRoot
=
aRoot
;
sIndirectLayerTrees
[
aLayersId
]
.
mController
=
aController
;
}
ScopedLayerTreeRegistration
:
:
~
ScopedLayerTreeRegistration
(
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
sIndirectLayerTrees
.
erase
(
mLayersId
)
;
}
void
CompositorBridgeParent
:
:
SetControllerForLayerTree
(
LayersId
aLayersId
GeckoContentController
*
aController
)
{
aController
-
>
AddRef
(
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableFunction
(
"
UpdateControllerForLayersIdRunnable
"
&
UpdateControllerForLayersId
aLayersId
aController
)
)
;
}
already_AddRefed
<
IAPZCTreeManager
>
CompositorBridgeParent
:
:
GetAPZCTreeManager
(
LayersId
aLayersId
)
{
EnsureLayerTreeMapReady
(
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
LayerTreeMap
:
:
iterator
cit
=
sIndirectLayerTrees
.
find
(
aLayersId
)
;
if
(
sIndirectLayerTrees
.
end
(
)
=
=
cit
)
{
return
nullptr
;
}
LayerTreeState
*
lts
=
&
cit
-
>
second
;
RefPtr
<
IAPZCTreeManager
>
apzctm
=
lts
-
>
mParent
?
lts
-
>
mParent
-
>
mApzcTreeManager
.
get
(
)
:
nullptr
;
return
apzctm
.
forget
(
)
;
}
#
if
defined
(
MOZ_GECKO_PROFILER
)
static
void
InsertVsyncProfilerMarker
(
TimeStamp
aVsyncTimestamp
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
profiler_thread_is_being_profiled
(
)
)
{
profiler_add_marker
(
"
VsyncTimestamp
"
MakeUnique
<
VsyncMarkerPayload
>
(
aVsyncTimestamp
)
)
;
}
}
#
endif
void
CompositorBridgeParent
:
:
PostInsertVsyncProfilerMarker
(
TimeStamp
aVsyncTimestamp
)
{
#
if
defined
(
MOZ_GECKO_PROFILER
)
if
(
profiler_is_active
(
)
&
&
CompositorThreadHolder
:
:
IsActive
(
)
)
{
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableFunction
(
"
InsertVsyncProfilerMarkerRunnable
"
InsertVsyncProfilerMarker
aVsyncTimestamp
)
)
;
}
#
endif
}
widget
:
:
PCompositorWidgetParent
*
CompositorBridgeParent
:
:
AllocPCompositorWidgetParent
(
const
CompositorWidgetInitData
&
aInitData
)
{
#
if
defined
(
MOZ_WIDGET_SUPPORTS_OOP_COMPOSITING
)
if
(
mWidget
)
{
return
nullptr
;
}
widget
:
:
CompositorWidgetParent
*
widget
=
new
widget
:
:
CompositorWidgetParent
(
aInitData
mOptions
)
;
widget
-
>
AddRef
(
)
;
#
ifdef
XP_WIN
if
(
mOptions
.
UseWebRender
(
)
&
&
DeviceManagerDx
:
:
Get
(
)
-
>
CanUseDComp
(
)
)
{
widget
-
>
AsWindows
(
)
-
>
EnsureCompositorWindow
(
)
;
}
#
endif
mWidget
=
widget
;
return
widget
;
#
else
return
nullptr
;
#
endif
}
bool
CompositorBridgeParent
:
:
DeallocPCompositorWidgetParent
(
PCompositorWidgetParent
*
aActor
)
{
#
if
defined
(
MOZ_WIDGET_SUPPORTS_OOP_COMPOSITING
)
static_cast
<
widget
:
:
CompositorWidgetParent
*
>
(
aActor
)
-
>
Release
(
)
;
return
true
;
#
else
return
false
;
#
endif
}
bool
CompositorBridgeParent
:
:
IsPendingComposite
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
mCompositor
)
{
return
false
;
}
return
mCompositor
-
>
IsPendingComposite
(
)
;
}
void
CompositorBridgeParent
:
:
FinishPendingComposite
(
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
!
mCompositor
)
{
return
;
}
return
mCompositor
-
>
FinishPendingComposite
(
)
;
}
CompositorController
*
CompositorBridgeParent
:
:
LayerTreeState
:
:
GetCompositorController
(
)
const
{
return
mParent
;
}
MetricsSharingController
*
CompositorBridgeParent
:
:
LayerTreeState
:
:
CrossProcessSharingController
(
)
const
{
return
mCrossProcessParent
;
}
MetricsSharingController
*
CompositorBridgeParent
:
:
LayerTreeState
:
:
InProcessSharingController
(
)
const
{
return
mParent
;
}
void
CompositorBridgeParent
:
:
DidComposite
(
const
VsyncId
&
aId
TimeStamp
&
aCompositeStart
TimeStamp
&
aCompositeEnd
)
{
if
(
mWrBridge
)
{
MOZ_ASSERT
(
false
)
;
}
else
{
NotifyDidComposite
(
mPendingTransaction
aId
aCompositeStart
aCompositeEnd
)
;
#
if
defined
(
ENABLE_FRAME_LATENCY_LOG
)
if
(
mPendingTransaction
.
IsValid
(
)
)
{
if
(
mRefreshStartTime
)
{
int32_t
latencyMs
=
lround
(
(
aCompositeEnd
-
mRefreshStartTime
)
.
ToMilliseconds
(
)
)
;
printf_stderr
(
"
From
transaction
start
to
end
of
generate
frame
latencyMs
%
d
this
"
"
%
p
\
n
"
latencyMs
this
)
;
}
if
(
mFwdTime
)
{
int32_t
latencyMs
=
lround
(
(
aCompositeEnd
-
mFwdTime
)
.
ToMilliseconds
(
)
)
;
printf_stderr
(
"
From
forwarding
transaction
to
end
of
generate
frame
latencyMs
%
d
"
"
this
%
p
\
n
"
latencyMs
this
)
;
}
}
mRefreshStartTime
=
TimeStamp
(
)
;
mTxnStartTime
=
TimeStamp
(
)
;
mFwdTime
=
TimeStamp
(
)
;
#
endif
mPendingTransaction
=
TransactionId
{
0
}
;
}
}
void
CompositorBridgeParent
:
:
NotifyDidSceneBuild
(
RefPtr
<
wr
:
:
WebRenderPipelineInfo
>
aInfo
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
if
(
mPaused
)
{
return
;
}
if
(
mWrBridge
)
{
mWrBridge
-
>
NotifyDidSceneBuild
(
aInfo
)
;
}
else
{
mCompositorScheduler
-
>
ScheduleComposition
(
)
;
}
}
void
CompositorBridgeParent
:
:
NotifyPipelineRendered
(
const
wr
:
:
PipelineId
&
aPipelineId
const
wr
:
:
Epoch
&
aEpoch
const
VsyncId
&
aCompositeStartId
TimeStamp
&
aCompositeStart
TimeStamp
&
aRenderStart
TimeStamp
&
aCompositeEnd
wr
:
:
RendererStats
*
aStats
)
{
if
(
!
mWrBridge
|
|
!
mAsyncImageManager
)
{
return
;
}
nsTArray
<
FrameStats
>
stats
;
RefPtr
<
UiCompositorControllerParent
>
uiController
=
UiCompositorControllerParent
:
:
GetFromRootLayerTreeId
(
mRootLayerTreeID
)
;
if
(
mWrBridge
-
>
PipelineId
(
)
=
=
aPipelineId
)
{
mWrBridge
-
>
RemoveEpochDataPriorTo
(
aEpoch
)
;
if
(
!
mPaused
)
{
TransactionId
transactionId
=
mWrBridge
-
>
FlushTransactionIdsForEpoch
(
aEpoch
aCompositeStartId
aCompositeStart
aRenderStart
aCompositeEnd
uiController
)
;
Unused
<
<
SendDidComposite
(
LayersId
{
0
}
transactionId
aCompositeStart
aCompositeEnd
)
;
nsTArray
<
ImageCompositeNotificationInfo
>
notifications
;
mWrBridge
-
>
ExtractImageCompositeNotifications
(
&
notifications
)
;
if
(
!
notifications
.
IsEmpty
(
)
)
{
Unused
<
<
ImageBridgeParent
:
:
NotifyImageComposites
(
notifications
)
;
}
}
return
;
}
auto
wrBridge
=
mAsyncImageManager
-
>
GetWrBridge
(
aPipelineId
)
;
if
(
wrBridge
&
&
wrBridge
-
>
GetCompositorBridge
(
)
)
{
MOZ_ASSERT
(
!
wrBridge
-
>
IsRootWebRenderBridgeParent
(
)
)
;
wrBridge
-
>
RemoveEpochDataPriorTo
(
aEpoch
)
;
if
(
!
mPaused
)
{
TransactionId
transactionId
=
wrBridge
-
>
FlushTransactionIdsForEpoch
(
aEpoch
aCompositeStartId
aCompositeStart
aRenderStart
aCompositeEnd
uiController
aStats
&
stats
)
;
Unused
<
<
wrBridge
-
>
GetCompositorBridge
(
)
-
>
SendDidComposite
(
wrBridge
-
>
GetLayersId
(
)
transactionId
aCompositeStart
aCompositeEnd
)
;
}
}
if
(
!
stats
.
IsEmpty
(
)
)
{
Unused
<
<
SendNotifyFrameStats
(
stats
)
;
}
}
RefPtr
<
AsyncImagePipelineManager
>
CompositorBridgeParent
:
:
GetAsyncImagePipelineManager
(
)
const
{
return
mAsyncImageManager
;
}
void
CompositorBridgeParent
:
:
NotifyDidComposite
(
TransactionId
aTransactionId
VsyncId
aId
TimeStamp
&
aCompositeStart
TimeStamp
&
aCompositeEnd
)
{
MOZ_ASSERT
(
!
mWrBridge
)
;
Unused
<
<
SendDidComposite
(
LayersId
{
0
}
aTransactionId
aCompositeStart
aCompositeEnd
)
;
if
(
mLayerManager
)
{
nsTArray
<
ImageCompositeNotificationInfo
>
notifications
;
mLayerManager
-
>
ExtractImageCompositeNotifications
(
&
notifications
)
;
if
(
!
notifications
.
IsEmpty
(
)
)
{
Unused
<
<
ImageBridgeParent
:
:
NotifyImageComposites
(
notifications
)
;
}
}
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
ForEachIndirectLayerTree
(
[
&
]
(
LayerTreeState
*
lts
const
LayersId
&
aLayersId
)
-
>
void
{
if
(
lts
-
>
mCrossProcessParent
&
&
lts
-
>
mParent
=
=
this
)
{
CrossProcessCompositorBridgeParent
*
cpcp
=
lts
-
>
mCrossProcessParent
;
cpcp
-
>
DidCompositeLocked
(
aLayersId
aId
aCompositeStart
aCompositeEnd
)
;
}
}
)
;
}
void
CompositorBridgeParent
:
:
InvalidateRemoteLayers
(
)
{
MOZ_ASSERT
(
CompositorLoop
(
)
=
=
MessageLoop
:
:
current
(
)
)
;
Unused
<
<
PCompositorBridgeParent
:
:
SendInvalidateLayers
(
LayersId
{
0
}
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
ForEachIndirectLayerTree
(
[
]
(
LayerTreeState
*
lts
const
LayersId
&
aLayersId
)
-
>
void
{
if
(
lts
-
>
mCrossProcessParent
)
{
CrossProcessCompositorBridgeParent
*
cpcp
=
lts
-
>
mCrossProcessParent
;
Unused
<
<
cpcp
-
>
SendInvalidateLayers
(
aLayersId
)
;
}
}
)
;
}
void
UpdateIndirectTree
(
LayersId
aId
Layer
*
aRoot
const
TargetConfig
&
aTargetConfig
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
sIndirectLayerTrees
[
aId
]
.
mRoot
=
aRoot
;
sIndirectLayerTrees
[
aId
]
.
mTargetConfig
=
aTargetConfig
;
}
CompositorBridgeParent
:
:
LayerTreeState
*
CompositorBridgeParent
:
:
GetIndirectShadowTree
(
LayersId
aId
)
{
MOZ_ASSERT
(
CompositorThreadHolder
:
:
IsInCompositorThread
(
)
)
;
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
LayerTreeMap
:
:
iterator
cit
=
sIndirectLayerTrees
.
find
(
aId
)
;
if
(
sIndirectLayerTrees
.
end
(
)
=
=
cit
)
{
return
nullptr
;
}
return
&
cit
-
>
second
;
}
bool
CompositorBridgeParent
:
:
CallWithIndirectShadowTree
(
LayersId
aId
const
std
:
:
function
<
void
(
CompositorBridgeParent
:
:
LayerTreeState
&
)
>
&
aFunc
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
LayerTreeMap
:
:
iterator
cit
=
sIndirectLayerTrees
.
find
(
aId
)
;
if
(
sIndirectLayerTrees
.
end
(
)
=
=
cit
)
{
return
false
;
}
aFunc
(
cit
-
>
second
)
;
return
true
;
}
static
CompositorBridgeParent
:
:
LayerTreeState
*
GetStateForRoot
(
LayersId
aContentLayersId
const
MonitorAutoLock
&
aProofOfLock
)
{
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
nullptr
;
LayerTreeMap
:
:
iterator
itr
=
sIndirectLayerTrees
.
find
(
aContentLayersId
)
;
if
(
sIndirectLayerTrees
.
end
(
)
!
=
itr
)
{
state
=
&
itr
-
>
second
;
}
if
(
state
)
{
LayersId
rootLayersId
=
state
-
>
mParent
-
>
RootLayerTreeId
(
)
;
itr
=
sIndirectLayerTrees
.
find
(
rootLayersId
)
;
state
=
(
sIndirectLayerTrees
.
end
(
)
!
=
itr
)
?
&
itr
-
>
second
:
nullptr
;
}
return
state
;
}
APZCTreeManagerParent
*
CompositorBridgeParent
:
:
GetApzcTreeManagerParentForRoot
(
LayersId
aContentLayersId
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
GetStateForRoot
(
aContentLayersId
lock
)
;
return
state
?
state
-
>
mApzcTreeManagerParent
:
nullptr
;
}
GeckoContentController
*
CompositorBridgeParent
:
:
GetGeckoContentControllerForRoot
(
LayersId
aContentLayersId
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
CompositorBridgeParent
:
:
LayerTreeState
*
state
=
GetStateForRoot
(
aContentLayersId
lock
)
;
return
state
?
state
-
>
mController
.
get
(
)
:
nullptr
;
}
PTextureParent
*
CompositorBridgeParent
:
:
AllocPTextureParent
(
const
SurfaceDescriptor
&
aSharedData
const
ReadLockDescriptor
&
aReadLock
const
LayersBackend
&
aLayersBackend
const
TextureFlags
&
aFlags
const
LayersId
&
aId
const
uint64_t
&
aSerial
const
wr
:
:
MaybeExternalImageId
&
aExternalImageId
)
{
return
TextureHost
:
:
CreateIPDLActor
(
this
aSharedData
aReadLock
aLayersBackend
aFlags
aSerial
aExternalImageId
)
;
}
bool
CompositorBridgeParent
:
:
DeallocPTextureParent
(
PTextureParent
*
actor
)
{
return
TextureHost
:
:
DestroyIPDLActor
(
actor
)
;
}
bool
CompositorBridgeParent
:
:
IsSameProcess
(
)
const
{
return
OtherPid
(
)
=
=
base
:
:
GetCurrentProcId
(
)
;
}
void
CompositorBridgeParent
:
:
NotifyWebRenderError
(
wr
:
:
WebRenderError
aError
)
{
MOZ_ASSERT
(
CompositorLoop
(
)
=
=
MessageLoop
:
:
current
(
)
)
;
Unused
<
<
SendNotifyWebRenderError
(
aError
)
;
}
void
CompositorBridgeParent
:
:
NotifyWebRenderContextPurge
(
)
{
MOZ_ASSERT
(
CompositorLoop
(
)
=
=
MessageLoop
:
:
current
(
)
)
;
RefPtr
<
wr
:
:
WebRenderAPI
>
api
=
mWrBridge
-
>
GetWebRenderAPI
(
)
;
api
-
>
ClearAllCaches
(
)
;
}
#
if
defined
(
XP_WIN
)
|
|
defined
(
MOZ_WIDGET_GTK
)
#
define
PLUGINS_LOG
(
.
.
.
)
bool
CompositorBridgeParent
:
:
UpdatePluginWindowState
(
LayersId
aId
)
{
MonitorAutoLock
lock
(
*
sIndirectLayerTreesLock
)
;
CompositorBridgeParent
:
:
LayerTreeState
&
lts
=
sIndirectLayerTrees
[
aId
]
;
if
(
!
lts
.
mParent
)
{
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
layer
tree
compositor
parent
pointer
is
null
"
aId
)
;
return
false
;
}
if
(
!
lts
.
mUpdatedPluginDataAvailable
)
{
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
no
plugin
data
"
aId
)
;
return
false
;
}
bool
pluginMetricsChanged
=
false
;
if
(
mLastPluginUpdateLayerTreeId
=
=
aId
)
{
if
(
!
mCachedPluginData
.
Length
(
)
&
&
!
lts
.
mPluginData
.
Length
(
)
)
{
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
no
data
no
changes
"
aId
)
;
return
false
;
}
if
(
mCachedPluginData
.
Length
(
)
=
=
lts
.
mPluginData
.
Length
(
)
)
{
for
(
uint32_t
idx
=
0
;
idx
<
lts
.
mPluginData
.
Length
(
)
;
idx
+
+
)
{
if
(
!
(
mCachedPluginData
[
idx
]
=
=
lts
.
mPluginData
[
idx
]
)
)
{
pluginMetricsChanged
=
true
;
break
;
}
}
}
else
{
pluginMetricsChanged
=
true
;
}
}
else
{
pluginMetricsChanged
=
true
;
}
if
(
mDeferPluginWindows
)
{
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
suppressing
"
aId
)
;
return
false
;
}
if
(
mPluginWindowsHidden
)
{
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
re
-
showing
"
aId
)
;
mPluginWindowsHidden
=
false
;
pluginMetricsChanged
=
true
;
}
if
(
!
lts
.
mPluginData
.
Length
(
)
)
{
if
(
!
mCachedPluginData
.
Length
(
)
)
{
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
nothing
to
hide
"
aId
)
;
return
false
;
}
uintptr_t
parentWidget
=
GetWidget
(
)
-
>
GetWidgetKey
(
)
;
mPluginsLayerOffset
=
nsIntPoint
(
0
0
)
;
mPluginsLayerVisibleRegion
.
SetEmpty
(
)
;
Unused
<
<
lts
.
mParent
-
>
SendHideAllPlugins
(
parentWidget
)
;
lts
.
mUpdatedPluginDataAvailable
=
false
;
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
hide
all
"
aId
)
;
}
else
{
LayerTransactionParent
*
layerTree
=
lts
.
mLayerTree
;
Layer
*
contentRoot
=
layerTree
-
>
GetRoot
(
)
;
if
(
contentRoot
)
{
nsIntPoint
offset
;
nsIntRegion
visibleRegion
;
if
(
contentRoot
-
>
GetVisibleRegionRelativeToRootLayer
(
visibleRegion
&
offset
)
)
{
if
(
!
pluginMetricsChanged
&
&
mPluginsLayerVisibleRegion
=
=
visibleRegion
&
&
mPluginsLayerOffset
=
=
offset
)
{
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
no
change
"
aId
)
;
return
false
;
}
mPluginsLayerOffset
=
offset
;
mPluginsLayerVisibleRegion
=
visibleRegion
;
Unused
<
<
lts
.
mParent
-
>
SendUpdatePluginConfigurations
(
LayoutDeviceIntPoint
:
:
FromUnknownPoint
(
offset
)
LayoutDeviceIntRegion
:
:
FromUnknownRegion
(
visibleRegion
)
lts
.
mPluginData
)
;
lts
.
mUpdatedPluginDataAvailable
=
false
;
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
updated
"
aId
)
;
}
else
{
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
no
visibility
data
"
aId
)
;
return
false
;
}
}
else
{
PLUGINS_LOG
(
"
[
%
"
PRIu64
"
]
no
content
root
"
aId
)
;
return
false
;
}
}
mLastPluginUpdateLayerTreeId
=
aId
;
mCachedPluginData
=
lts
.
mPluginData
;
return
true
;
}
void
CompositorBridgeParent
:
:
ScheduleShowAllPluginWindows
(
)
{
MOZ_ASSERT
(
CompositorLoop
(
)
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
layers
:
:
CompositorBridgeParent
:
:
ShowAllPluginWindows
"
this
&
CompositorBridgeParent
:
:
ShowAllPluginWindows
)
)
;
}
void
CompositorBridgeParent
:
:
ShowAllPluginWindows
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
mDeferPluginWindows
=
false
;
ScheduleComposition
(
)
;
}
void
CompositorBridgeParent
:
:
ScheduleHideAllPluginWindows
(
)
{
MOZ_ASSERT
(
CompositorLoop
(
)
)
;
CompositorLoop
(
)
-
>
PostTask
(
NewRunnableMethod
(
"
layers
:
:
CompositorBridgeParent
:
:
HideAllPluginWindows
"
this
&
CompositorBridgeParent
:
:
HideAllPluginWindows
)
)
;
}
void
CompositorBridgeParent
:
:
HideAllPluginWindows
(
)
{
MOZ_ASSERT
(
!
NS_IsMainThread
(
)
)
;
if
(
!
mCachedPluginData
.
Length
(
)
|
|
mDeferPluginWindows
)
{
return
;
}
uintptr_t
parentWidget
=
GetWidget
(
)
-
>
GetWidgetKey
(
)
;
mDeferPluginWindows
=
true
;
mPluginWindowsHidden
=
true
;
#
if
defined
(
XP_WIN
)
mWaitForPluginsUntil
=
TimeStamp
:
:
Now
(
)
+
mVsyncRate
;
Unused
<
<
SendCaptureAllPlugins
(
parentWidget
)
;
#
else
Unused
<
<
SendHideAllPlugins
(
parentWidget
)
;
ScheduleComposition
(
)
;
#
endif
}
#
endif
mozilla
:
:
ipc
:
:
IPCResult
CompositorBridgeParent
:
:
RecvAllPluginsCaptured
(
)
{
#
if
defined
(
XP_WIN
)
mWaitForPluginsUntil
=
TimeStamp
(
)
;
mHaveBlockedForPlugins
=
false
;
ForceComposeToTarget
(
nullptr
)
;
Unused
<
<
SendHideAllPlugins
(
GetWidget
(
)
-
>
GetWidgetKey
(
)
)
;
return
IPC_OK
(
)
;
#
else
MOZ_ASSERT_UNREACHABLE
(
"
CompositorBridgeParent
:
:
RecvAllPluginsCaptured
calls
unexpected
.
"
)
;
return
IPC_FAIL_NO_REASON
(
this
)
;
#
endif
}
int32_t
RecordContentFrameTime
(
const
VsyncId
&
aTxnId
const
TimeStamp
&
aVsyncStart
const
TimeStamp
&
aTxnStart
const
VsyncId
&
aCompositeId
const
TimeStamp
&
aCompositeEnd
const
TimeDuration
&
aFullPaintTime
const
TimeDuration
&
aVsyncRate
bool
aContainsSVGGroup
bool
aRecordUploadStats
wr
:
:
RendererStats
*
aStats
)
{
double
latencyMs
=
(
aCompositeEnd
-
aTxnStart
)
.
ToMilliseconds
(
)
;
double
latencyNorm
=
latencyMs
/
aVsyncRate
.
ToMilliseconds
(
)
;
int32_t
fracLatencyNorm
=
lround
(
latencyNorm
*
100
.
0
)
;
#
ifdef
MOZ_GECKO_PROFILER
if
(
profiler_is_active
(
)
)
{
class
ContentFramePayload
:
public
ProfilerMarkerPayload
{
public
:
ContentFramePayload
(
const
mozilla
:
:
TimeStamp
&
aStartTime
const
mozilla
:
:
TimeStamp
&
aEndTime
)
:
ProfilerMarkerPayload
(
aStartTime
aEndTime
)
{
}
virtual
void
StreamPayload
(
SpliceableJSONWriter
&
aWriter
const
TimeStamp
&
aProcessStartTime
UniqueStacks
&
aUniqueStacks
)
override
{
StreamCommonProps
(
"
CONTENT_FRAME_TIME
"
aWriter
aProcessStartTime
aUniqueStacks
)
;
}
}
;
profiler_add_marker_for_thread
(
profiler_current_thread_id
(
)
"
CONTENT_FRAME_TIME
"
MakeUnique
<
ContentFramePayload
>
(
aTxnStart
aCompositeEnd
)
)
;
}
#
endif
Telemetry
:
:
Accumulate
(
Telemetry
:
:
CONTENT_FRAME_TIME
fracLatencyNorm
)
;
if
(
!
(
aTxnId
=
=
VsyncId
(
)
)
&
&
aVsyncStart
)
{
latencyMs
=
(
aCompositeEnd
-
aVsyncStart
)
.
ToMilliseconds
(
)
;
latencyNorm
=
latencyMs
/
aVsyncRate
.
ToMilliseconds
(
)
;
fracLatencyNorm
=
lround
(
latencyNorm
*
100
.
0
)
;
int32_t
result
=
fracLatencyNorm
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
CONTENT_FRAME_TIME_VSYNC
fracLatencyNorm
)
;
if
(
aContainsSVGGroup
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
CONTENT_FRAME_TIME_WITH_SVG
fracLatencyNorm
)
;
}
if
(
fracLatencyNorm
<
200
)
{
Telemetry
:
:
AccumulateCategorical
(
LABELS_CONTENT_FRAME_TIME_REASON
:
:
OnTime
)
;
}
else
{
if
(
aCompositeId
=
=
VsyncId
(
)
)
{
Telemetry
:
:
AccumulateCategorical
(
LABELS_CONTENT_FRAME_TIME_REASON
:
:
NoVsyncNoId
)
;
}
else
if
(
aTxnId
>
=
aCompositeId
)
{
Telemetry
:
:
AccumulateCategorical
(
LABELS_CONTENT_FRAME_TIME_REASON
:
:
NoVsync
)
;
}
else
if
(
aCompositeId
-
aTxnId
>
1
)
{
if
(
aFullPaintTime
>
=
TimeDuration
:
:
FromMilliseconds
(
20
)
)
{
Telemetry
:
:
AccumulateCategorical
(
LABELS_CONTENT_FRAME_TIME_REASON
:
:
MissedCompositeLong
)
;
}
else
if
(
aFullPaintTime
>
=
TimeDuration
:
:
FromMilliseconds
(
10
)
)
{
Telemetry
:
:
AccumulateCategorical
(
LABELS_CONTENT_FRAME_TIME_REASON
:
:
MissedCompositeMid
)
;
}
else
if
(
aFullPaintTime
>
=
TimeDuration
:
:
FromMilliseconds
(
5
)
)
{
Telemetry
:
:
AccumulateCategorical
(
LABELS_CONTENT_FRAME_TIME_REASON
:
:
MissedCompositeLow
)
;
}
else
{
Telemetry
:
:
AccumulateCategorical
(
LABELS_CONTENT_FRAME_TIME_REASON
:
:
MissedComposite
)
;
}
}
else
{
Telemetry
:
:
AccumulateCategorical
(
LABELS_CONTENT_FRAME_TIME_REASON
:
:
SlowComposite
)
;
}
}
if
(
aRecordUploadStats
)
{
if
(
aStats
)
{
latencyMs
-
=
(
double
(
aStats
-
>
resource_upload_time
)
/
1000000
.
0
)
;
latencyNorm
=
latencyMs
/
aVsyncRate
.
ToMilliseconds
(
)
;
fracLatencyNorm
=
lround
(
latencyNorm
*
100
.
0
)
;
}
Telemetry
:
:
Accumulate
(
Telemetry
:
:
CONTENT_FRAME_TIME_WITHOUT_RESOURCE_UPLOAD
fracLatencyNorm
)
;
if
(
aStats
)
{
latencyMs
-
=
(
double
(
aStats
-
>
gpu_cache_upload_time
)
/
1000000
.
0
)
;
latencyNorm
=
latencyMs
/
aVsyncRate
.
ToMilliseconds
(
)
;
fracLatencyNorm
=
lround
(
latencyNorm
*
100
.
0
)
;
}
Telemetry
:
:
Accumulate
(
Telemetry
:
:
CONTENT_FRAME_TIME_WITHOUT_UPLOAD
fracLatencyNorm
)
;
}
return
result
;
}
return
0
;
}
}
}
