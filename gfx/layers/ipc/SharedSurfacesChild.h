#
ifndef
MOZILLA_GFX_SHAREDSURFACESCHILD_H
#
define
MOZILLA_GFX_SHAREDSURFACESCHILD_H
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
gfx
/
UserData
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
SourceSurfaceSharedData
;
}
namespace
wr
{
class
IpcResourceUpdateQueue
;
}
namespace
layers
{
class
CompositorManagerChild
;
class
ImageContainer
;
class
WebRenderLayerManager
;
class
SharedSurfacesChild
final
{
public
:
static
void
Share
(
gfx
:
:
SourceSurfaceSharedData
*
aSurface
)
;
static
nsresult
Share
(
gfx
:
:
SourceSurface
*
aSurface
wr
:
:
ExternalImageId
&
aId
)
;
static
nsresult
Share
(
gfx
:
:
SourceSurfaceSharedData
*
aSurface
WebRenderLayerManager
*
aManager
wr
:
:
IpcResourceUpdateQueue
&
aResources
wr
:
:
ImageKey
&
aKey
)
;
static
nsresult
Share
(
ImageContainer
*
aContainer
WebRenderLayerManager
*
aManager
wr
:
:
IpcResourceUpdateQueue
&
aResources
wr
:
:
ImageKey
&
aKey
)
;
static
Maybe
<
wr
:
:
ExternalImageId
>
GetExternalId
(
const
gfx
:
:
SourceSurfaceSharedData
*
aSurface
)
;
private
:
SharedSurfacesChild
(
)
=
delete
;
~
SharedSurfacesChild
(
)
=
delete
;
class
ImageKeyData
final
{
public
:
ImageKeyData
(
WebRenderLayerManager
*
aManager
const
wr
:
:
ImageKey
&
aImageKey
)
;
~
ImageKeyData
(
)
;
ImageKeyData
(
ImageKeyData
&
&
aOther
)
;
ImageKeyData
&
operator
=
(
ImageKeyData
&
&
aOther
)
;
ImageKeyData
(
const
ImageKeyData
&
)
=
delete
;
ImageKeyData
&
operator
=
(
const
ImageKeyData
&
)
=
delete
;
void
MergeDirtyRect
(
const
Maybe
<
gfx
:
:
IntRect
>
&
aDirtyRect
)
;
Maybe
<
gfx
:
:
IntRect
>
TakeDirtyRect
(
)
{
return
std
:
:
move
(
mDirtyRect
)
;
}
RefPtr
<
WebRenderLayerManager
>
mManager
;
Maybe
<
gfx
:
:
IntRect
>
mDirtyRect
;
wr
:
:
ImageKey
mImageKey
;
}
;
class
SharedUserData
final
{
public
:
explicit
SharedUserData
(
const
wr
:
:
ExternalImageId
&
aId
)
:
mId
(
aId
)
mShared
(
false
)
{
}
~
SharedUserData
(
)
;
const
wr
:
:
ExternalImageId
&
Id
(
)
const
{
return
mId
;
}
void
SetId
(
const
wr
:
:
ExternalImageId
&
aId
)
{
mId
=
aId
;
mKeys
.
Clear
(
)
;
mShared
=
false
;
}
bool
IsShared
(
)
const
{
return
mShared
;
}
void
MarkShared
(
)
{
MOZ_ASSERT
(
!
mShared
)
;
mShared
=
true
;
}
wr
:
:
ImageKey
UpdateKey
(
WebRenderLayerManager
*
aManager
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
Maybe
<
gfx
:
:
IntRect
>
&
aDirtyRect
)
;
private
:
AutoTArray
<
ImageKeyData
1
>
mKeys
;
wr
:
:
ExternalImageId
mId
;
bool
mShared
:
1
;
}
;
static
nsresult
ShareInternal
(
gfx
:
:
SourceSurfaceSharedData
*
aSurface
SharedUserData
*
*
aUserData
)
;
static
void
Unshare
(
const
wr
:
:
ExternalImageId
&
aId
nsTArray
<
ImageKeyData
>
&
aKeys
)
;
static
void
DestroySharedUserData
(
void
*
aClosure
)
;
static
gfx
:
:
UserDataKey
sSharedKey
;
}
;
}
}
#
endif
