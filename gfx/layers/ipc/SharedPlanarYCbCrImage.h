#
include
<
stdint
.
h
>
#
include
"
ImageContainer
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ipc
/
Shmem
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
ifndef
MOZILLA_LAYERS_SHAREDPLANARYCBCRIMAGE_H
#
define
MOZILLA_LAYERS_SHAREDPLANARYCBCRIMAGE_H
namespace
mozilla
{
namespace
layers
{
class
ImageClient
;
class
TextureClient
;
class
SharedPlanarYCbCrImage
:
public
PlanarYCbCrImage
{
public
:
explicit
SharedPlanarYCbCrImage
(
ImageClient
*
aCompositable
)
;
protected
:
virtual
~
SharedPlanarYCbCrImage
(
)
;
public
:
virtual
TextureClient
*
GetTextureClient
(
KnowsCompositor
*
aForwarder
)
override
;
virtual
uint8_t
*
GetBuffer
(
)
override
;
virtual
already_AddRefed
<
gfx
:
:
SourceSurface
>
GetAsSourceSurface
(
)
override
;
virtual
bool
CopyData
(
const
PlanarYCbCrData
&
aData
)
override
;
virtual
bool
AdoptData
(
const
Data
&
aData
)
override
;
virtual
bool
Allocate
(
PlanarYCbCrData
&
aData
)
;
virtual
uint8_t
*
AllocateAndGetNewBuffer
(
uint32_t
aSize
)
override
;
virtual
bool
IsValid
(
)
override
;
virtual
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
virtual
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
;
private
:
RefPtr
<
TextureClient
>
mTextureClient
;
RefPtr
<
ImageClient
>
mCompositable
;
}
;
}
}
#
endif
