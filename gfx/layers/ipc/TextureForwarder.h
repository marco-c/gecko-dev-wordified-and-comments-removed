#
ifndef
MOZILLA_LAYERS_TEXTUREFORWARDER
#
define
MOZILLA_LAYERS_TEXTUREFORWARDER
#
include
<
stdint
.
h
>
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
layers
/
ISurfaceAllocator
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
mozilla
/
gfx
/
Rect
.
h
"
namespace
mozilla
{
namespace
layers
{
class
TextureForwarder
:
public
ClientIPCAllocator
{
public
:
TextureForwarder
(
)
:
mSerial
(
+
+
sSerialCounter
)
{
}
virtual
PTextureChild
*
CreateTexture
(
const
SurfaceDescriptor
&
aSharedData
LayersBackend
aLayersBackend
TextureFlags
aFlags
uint64_t
aSerial
)
=
0
;
virtual
TextureForwarder
*
AsTextureForwarder
(
)
override
{
return
this
;
}
virtual
FixedSizeSmallShmemSectionAllocator
*
GetTileLockAllocator
(
)
{
return
nullptr
;
}
int32_t
GetSerial
(
)
{
return
mSerial
;
}
void
IdentifyTextureHost
(
const
TextureFactoryIdentifier
&
aIdentifier
)
;
virtual
int32_t
GetMaxTextureSize
(
)
const
override
{
return
mTextureFactoryIdentifier
.
mMaxTextureSize
;
}
LayersBackend
GetCompositorBackendType
(
)
const
{
return
mTextureFactoryIdentifier
.
mParentBackend
;
}
bool
SupportsTextureBlitting
(
)
const
{
return
mTextureFactoryIdentifier
.
mSupportsTextureBlitting
;
}
bool
SupportsPartialUploads
(
)
const
{
return
mTextureFactoryIdentifier
.
mSupportsPartialUploads
;
}
const
TextureFactoryIdentifier
&
GetTextureFactoryIdentifier
(
)
const
{
return
mTextureFactoryIdentifier
;
}
SyncObject
*
GetSyncObject
(
)
{
return
mSyncObject
;
}
protected
:
TextureFactoryIdentifier
mTextureFactoryIdentifier
;
RefPtr
<
SyncObject
>
mSyncObject
;
const
int32_t
mSerial
;
static
mozilla
:
:
Atomic
<
int32_t
>
sSerialCounter
;
}
;
}
}
#
endif
