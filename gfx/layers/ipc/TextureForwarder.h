#
ifndef
MOZILLA_LAYERS_TEXTUREFORWARDER
#
define
MOZILLA_LAYERS_TEXTUREFORWARDER
#
include
<
stdint
.
h
>
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
KnowsCompositor
.
h
"
namespace
mozilla
{
namespace
layers
{
class
LayersIPCActor
{
public
:
virtual
bool
IPCOpen
(
)
const
{
return
true
;
}
}
;
class
LayersIPCChannel
:
public
LayersIPCActor
{
public
:
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
void
)
=
0
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
void
)
=
0
;
virtual
bool
IsSameProcess
(
)
const
=
0
;
virtual
bool
UsesImageBridge
(
)
const
{
return
false
;
}
virtual
base
:
:
ProcessId
GetParentPid
(
)
const
=
0
;
virtual
MessageLoop
*
GetMessageLoop
(
)
const
=
0
;
virtual
FixedSizeSmallShmemSectionAllocator
*
GetTileLockAllocator
(
)
{
return
nullptr
;
}
virtual
void
CancelWaitForRecycle
(
uint64_t
aTextureId
)
=
0
;
virtual
bool
AllocShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
=
0
;
virtual
bool
AllocUnsafeShmem
(
size_t
aSize
mozilla
:
:
ipc
:
:
SharedMemory
:
:
SharedMemoryType
aShmType
mozilla
:
:
ipc
:
:
Shmem
*
aShmem
)
=
0
;
virtual
void
DeallocShmem
(
mozilla
:
:
ipc
:
:
Shmem
&
aShmem
)
=
0
;
protected
:
virtual
~
LayersIPCChannel
(
)
{
}
}
;
class
TextureForwarder
:
public
LayersIPCChannel
{
public
:
virtual
PTextureChild
*
CreateTexture
(
const
SurfaceDescriptor
&
aSharedData
LayersBackend
aLayersBackend
TextureFlags
aFlags
uint64_t
aSerial
)
=
0
;
}
;
}
}
#
endif
