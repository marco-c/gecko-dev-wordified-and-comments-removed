#
ifndef
MOZILLA_LAYERS_TEXTUREFORWARDER
#
define
MOZILLA_LAYERS_TEXTUREFORWARDER
#
include
<
stdint
.
h
>
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureClient
.
h
"
#
include
"
mozilla
/
layers
/
KnowsCompositor
.
h
"
namespace
mozilla
{
namespace
ipc
{
class
IShmemAllocator
;
}
namespace
layers
{
class
LayersIPCActor
{
public
:
virtual
bool
IPCOpen
(
)
const
{
return
true
;
}
}
;
class
LayersIPCChannel
:
public
LayersIPCActor
public
mozilla
:
:
ipc
:
:
IShmemAllocator
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
virtual
bool
IsSameProcess
(
)
const
=
0
;
virtual
bool
UsesImageBridge
(
)
const
{
return
false
;
}
virtual
base
:
:
ProcessId
GetParentPid
(
)
const
=
0
;
virtual
MessageLoop
*
GetMessageLoop
(
)
const
=
0
;
virtual
FixedSizeSmallShmemSectionAllocator
*
GetTileLockAllocator
(
)
{
return
nullptr
;
}
virtual
void
CancelWaitForRecycle
(
uint64_t
aTextureId
)
=
0
;
virtual
wr
:
:
MaybeExternalImageId
GetNextExternalImageId
(
)
{
return
Nothing
(
)
;
}
protected
:
virtual
~
LayersIPCChannel
(
)
{
}
}
;
class
TextureForwarder
:
public
LayersIPCChannel
{
public
:
virtual
PTextureChild
*
CreateTexture
(
const
SurfaceDescriptor
&
aSharedData
const
ReadLockDescriptor
&
aReadLock
LayersBackend
aLayersBackend
TextureFlags
aFlags
uint64_t
aSerial
wr
:
:
MaybeExternalImageId
&
aExternalImageId
nsIEventTarget
*
aTarget
=
nullptr
)
=
0
;
}
;
}
}
#
endif
