#
ifndef
MOZILLA_GFX_COMPOSITORMANAGERPARENT_H
#
define
MOZILLA_GFX_COMPOSITORMANAGERPARENT_H
#
include
<
map
>
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
StaticMonitor
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
ipc
/
IdType
.
h
"
#
include
"
mozilla
/
layers
/
PCompositorManagerParent
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositorBridgeParent
;
class
CompositorThreadHolder
;
class
SharedSurfacesHolder
;
class
CompositorManagerParent
final
:
public
PCompositorManagerParent
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositorManagerParent
final
)
public
:
static
already_AddRefed
<
CompositorManagerParent
>
CreateSameProcess
(
uint32_t
aNamespace
)
;
static
bool
Create
(
Endpoint
<
PCompositorManagerParent
>
&
&
aEndpoint
dom
:
:
ContentParentId
aContentId
uint32_t
aNamespace
bool
aIsRoot
)
;
static
void
Shutdown
(
)
;
static
already_AddRefed
<
CompositorBridgeParent
>
CreateSameProcessWidgetCompositorBridge
(
CSSToLayoutDeviceScale
aScale
const
CompositorOptions
&
aOptions
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
uint64_t
aInnerWindowId
)
;
static
void
WaitForSharedSurface
(
const
wr
:
:
ExternalImageId
&
aId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAddSharedSurface
(
const
wr
:
:
ExternalImageId
&
aId
SurfaceDescriptorShared
&
&
aDesc
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRemoveSharedSurface
(
const
wr
:
:
ExternalImageId
&
aId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReportSharedSurfacesMemory
(
ReportSharedSurfacesMemoryResolver
&
&
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyMemoryPressure
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReportMemory
(
ReportMemoryResolver
&
&
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitCanvasManager
(
Endpoint
<
PCanvasManagerParent
>
&
&
)
;
void
BindComplete
(
bool
aIsRoot
)
;
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
already_AddRefed
<
PCompositorBridgeParent
>
AllocPCompositorBridgeParent
(
const
CompositorBridgeOptions
&
aOpt
)
;
static
void
NotifyWebRenderError
(
wr
:
:
WebRenderError
aError
)
;
const
dom
:
:
ContentParentId
&
GetContentId
(
)
const
{
return
mContentId
;
}
bool
OwnsExternalImageId
(
const
wr
:
:
ExternalImageId
&
aId
)
const
{
return
mNamespace
=
=
static_cast
<
uint32_t
>
(
wr
:
:
AsUint64
(
aId
)
>
>
32
)
;
}
private
:
static
StaticMonitor
sMonitor
;
static
StaticRefPtr
<
CompositorManagerParent
>
sInstance
MOZ_GUARDED_BY
(
sMonitor
)
;
using
ManagerMap
=
std
:
:
map
<
uint32_t
CompositorManagerParent
*
>
;
static
ManagerMap
sManagers
MOZ_GUARDED_BY
(
sMonitor
)
;
static
void
ShutdownInternal
(
)
;
CompositorManagerParent
(
dom
:
:
ContentParentId
aContentId
uint32_t
aNamespace
)
;
virtual
~
CompositorManagerParent
(
)
;
void
Bind
(
Endpoint
<
PCompositorManagerParent
>
&
&
aEndpoint
bool
aIsRoot
)
;
void
DeferredDestroy
(
)
;
RefPtr
<
CompositorThreadHolder
>
mCompositorThreadHolder
;
RefPtr
<
SharedSurfacesHolder
>
mSharedSurfacesHolder
;
AutoTArray
<
RefPtr
<
CompositorBridgeParent
>
1
>
mPendingCompositorBridges
;
const
dom
:
:
ContentParentId
mContentId
;
const
uint32_t
mNamespace
;
uint32_t
mLastSharedSurfaceResourceId
MOZ_GUARDED_BY
(
sMonitor
)
=
0
;
}
;
}
}
#
endif
