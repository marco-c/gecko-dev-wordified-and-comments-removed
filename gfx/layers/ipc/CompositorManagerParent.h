#
ifndef
MOZILLA_GFX_COMPOSITORMANAGERPARENT_H
#
define
MOZILLA_GFX_COMPOSITORMANAGERPARENT_H
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
StaticMutex
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
PCompositorManagerParent
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
layers
{
class
CompositorBridgeParent
;
class
CompositorThreadHolder
;
#
ifndef
DEBUG
#
define
COMPOSITOR_MANAGER_PARENT_EXPLICIT_SHUTDOWN
#
endif
class
CompositorManagerParent
final
:
public
PCompositorManagerParent
{
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
CompositorManagerParent
final
)
public
:
static
already_AddRefed
<
CompositorManagerParent
>
CreateSameProcess
(
)
;
static
bool
Create
(
Endpoint
<
PCompositorManagerParent
>
&
&
aEndpoint
bool
aIsRoot
)
;
static
void
Shutdown
(
)
;
static
already_AddRefed
<
CompositorBridgeParent
>
CreateSameProcessWidgetCompositorBridge
(
CSSToLayoutDeviceScale
aScale
const
CompositorOptions
&
aOptions
bool
aUseExternalSurfaceSize
const
gfx
:
:
IntSize
&
aSurfaceSize
uint64_t
aInnerWindowId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAddSharedSurface
(
const
wr
:
:
ExternalImageId
&
aId
SurfaceDescriptorShared
&
&
aDesc
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvRemoveSharedSurface
(
const
wr
:
:
ExternalImageId
&
aId
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReportSharedSurfacesMemory
(
ReportSharedSurfacesMemoryResolver
&
&
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvNotifyMemoryPressure
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvReportMemory
(
ReportMemoryResolver
&
&
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvInitCanvasManager
(
Endpoint
<
PCanvasManagerParent
>
&
&
)
;
void
BindComplete
(
bool
aIsRoot
)
;
void
ActorDestroy
(
ActorDestroyReason
aReason
)
override
;
already_AddRefed
<
PCompositorBridgeParent
>
AllocPCompositorBridgeParent
(
const
CompositorBridgeOptions
&
aOpt
)
;
static
void
NotifyWebRenderError
(
wr
:
:
WebRenderError
aError
)
;
private
:
static
StaticRefPtr
<
CompositorManagerParent
>
sInstance
;
static
StaticMutex
sMutex
MOZ_UNANNOTATED
;
#
ifdef
COMPOSITOR_MANAGER_PARENT_EXPLICIT_SHUTDOWN
static
StaticAutoPtr
<
nsTArray
<
CompositorManagerParent
*
>
>
sActiveActors
;
static
void
ShutdownInternal
(
)
;
#
endif
CompositorManagerParent
(
)
;
virtual
~
CompositorManagerParent
(
)
;
void
Bind
(
Endpoint
<
PCompositorManagerParent
>
&
&
aEndpoint
bool
aIsRoot
)
;
void
DeferredDestroy
(
)
;
RefPtr
<
CompositorThreadHolder
>
mCompositorThreadHolder
;
AutoTArray
<
RefPtr
<
CompositorBridgeParent
>
1
>
mPendingCompositorBridges
;
}
;
}
}
#
endif
