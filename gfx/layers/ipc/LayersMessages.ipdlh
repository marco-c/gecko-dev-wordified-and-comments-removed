include
LayersSurfaces
;
include
protocol
PCompositorBridge
;
include
protocol
PTexture
;
include
"
gfxipc
/
ShadowLayerUtils
.
h
"
;
include
"
mozilla
/
GfxMessageUtils
.
h
"
;
include
"
ImageLayers
.
h
"
;
using
mozilla
:
:
gfx
:
:
Glyph
from
"
mozilla
/
gfx
/
2D
.
h
"
;
using
mozilla
:
:
gfx
:
:
SamplingFilter
from
"
mozilla
/
gfx
/
2D
.
h
"
;
using
struct
mozilla
:
:
gfx
:
:
DeviceColor
from
"
mozilla
/
gfx
/
2D
.
h
"
;
using
struct
mozilla
:
:
gfx
:
:
Point
from
"
mozilla
/
gfx
/
Point
.
h
"
;
using
struct
mozilla
:
:
gfx
:
:
Point3D
from
"
mozilla
/
gfx
/
Point
.
h
"
;
using
mozilla
:
:
gfx
:
:
IntPoint
from
"
mozilla
/
gfx
/
Point
.
h
"
;
using
class
mozilla
:
:
gfx
:
:
Matrix4x4
from
"
mozilla
/
gfx
/
Matrix
.
h
"
;
using
nscolor
from
"
nsColor
.
h
"
;
using
nscoord
from
"
nsCoord
.
h
"
;
using
struct
nsRect
from
"
nsRect
.
h
"
;
using
struct
nsPoint
from
"
nsPoint
.
h
"
;
using
class
mozilla
:
:
TimeDuration
from
"
mozilla
/
TimeStamp
.
h
"
;
using
class
mozilla
:
:
TimeStamp
from
"
mozilla
/
TimeStamp
.
h
"
;
using
mozilla
:
:
ScreenRotation
from
"
mozilla
/
WidgetUtils
.
h
"
;
using
nsCSSPropertyID
from
"
nsCSSPropertyID
.
h
"
;
using
hal
:
:
ScreenOrientation
from
"
mozilla
/
HalScreenConfiguration
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
TextureInfo
from
"
mozilla
/
layers
/
CompositorTypes
.
h
"
;
using
mozilla
:
:
CSSPoint
from
"
Units
.
h
"
;
using
mozilla
:
:
CSSRect
from
"
Units
.
h
"
;
using
mozilla
:
:
LayerMargin
from
"
Units
.
h
"
;
using
mozilla
:
:
LayerPoint
from
"
Units
.
h
"
;
using
mozilla
:
:
LayerCoord
from
"
Units
.
h
"
;
using
mozilla
:
:
LayerSize
from
"
Units
.
h
"
;
using
mozilla
:
:
LayerRect
from
"
Units
.
h
"
;
using
mozilla
:
:
LayerIntSize
from
"
Units
.
h
"
;
using
mozilla
:
:
LayerIntRegion
from
"
Units
.
h
"
;
using
mozilla
:
:
ParentLayerIntRect
from
"
Units
.
h
"
;
using
mozilla
:
:
LayoutDeviceIntRect
from
"
Units
.
h
"
;
using
mozilla
:
:
layers
:
:
ScaleMode
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
EventRegions
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
EventRegionsOverride
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
DiagnosticTypes
from
"
mozilla
/
layers
/
CompositorTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
FocusTarget
from
"
mozilla
/
layers
/
FocusTarget
.
h
"
;
using
struct
mozilla
:
:
layers
:
:
ScrollMetadata
from
"
FrameMetrics
.
h
"
;
using
mozilla
:
:
layers
:
:
ScrollableLayerGuid
:
:
ViewID
from
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersBackend
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
LayerHandle
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
CompositableHandle
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
CompositionPayload
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
SimpleLayerAttributes
from
"
mozilla
/
layers
/
LayerAttributes
.
h
"
;
using
mozilla
:
:
CrossProcessSemaphoreHandle
from
"
mozilla
/
ipc
/
CrossProcessSemaphore
.
h
"
;
using
struct
mozilla
:
:
void_t
from
"
ipc
/
IPCMessageUtils
.
h
"
;
using
mozilla
:
:
layers
:
:
LayersId
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
layers
:
:
TransactionId
from
"
mozilla
/
layers
/
LayersTypes
.
h
"
;
using
mozilla
:
:
VsyncId
from
"
mozilla
/
VsyncDispatcher
.
h
"
;
using
mozilla
:
:
LengthPercentage
from
"
mozilla
/
ServoStyleConsts
.
h
"
;
using
mozilla
:
:
RayReferenceData
from
"
mozilla
/
MotionPathUtils
.
h
"
;
using
mozilla
:
:
StyleOffsetPath
from
"
mozilla
/
ServoStyleConsts
.
h
"
;
using
mozilla
:
:
StyleOffsetRotate
from
"
mozilla
/
ServoStyleConsts
.
h
"
;
using
mozilla
:
:
StylePositionOrAuto
from
"
mozilla
/
ServoStyleConsts
.
h
"
;
using
mozilla
:
:
StyleRotate
from
"
mozilla
/
ServoStyleConsts
.
h
"
;
using
mozilla
:
:
StyleScale
from
"
mozilla
/
ServoStyleConsts
.
h
"
;
using
mozilla
:
:
StyleTranslate
from
"
mozilla
/
ServoStyleConsts
.
h
"
;
using
mozilla
:
:
StyleTransform
from
"
mozilla
/
ServoStyleConsts
.
h
"
;
namespace
mozilla
{
namespace
layers
{
struct
TargetConfig
{
IntRect
naturalBounds
;
ScreenRotation
rotation
;
ScreenOrientation
orientation
;
nsIntRegion
clearRegion
;
}
;
struct
OpCreatePaintedLayer
{
LayerHandle
layer
;
}
;
struct
OpCreateContainerLayer
{
LayerHandle
layer
;
}
;
struct
OpCreateImageLayer
{
LayerHandle
layer
;
}
;
struct
OpCreateColorLayer
{
LayerHandle
layer
;
}
;
struct
OpCreateCanvasLayer
{
LayerHandle
layer
;
}
;
struct
OpCreateRefLayer
{
LayerHandle
layer
;
}
;
struct
OpAttachCompositable
{
LayerHandle
layer
;
CompositableHandle
compositable
;
}
;
struct
OpAttachAsyncCompositable
{
LayerHandle
layer
;
CompositableHandle
compositable
;
}
;
struct
ThebesBufferData
{
IntRect
rect
;
IntPoint
rotation
;
}
;
struct
CubicBezierFunction
{
float
x1
;
float
y1
;
float
x2
;
float
y2
;
}
;
struct
StepFunction
{
int
steps
;
uint8_t
type
;
}
;
union
TimingFunction
{
null_t
;
CubicBezierFunction
;
StepFunction
;
}
;
struct
LayerColor
{
DeviceColor
value
;
}
;
union
Animatable
{
null_t
;
float
;
nscolor
;
StyleRotate
;
StyleScale
;
StyleTranslate
;
StyleTransform
;
StyleOffsetPath
;
LengthPercentage
;
StyleOffsetRotate
;
StylePositionOrAuto
;
}
;
struct
AnimationSegment
{
Animatable
startState
;
Animatable
endState
;
float
startPortion
;
float
endPortion
;
uint8_t
startComposite
;
uint8_t
endComposite
;
TimingFunction
sampleFn
;
}
;
struct
MotionPathData
{
CSSPoint
origin
;
CSSPoint
anchorAdjustment
;
RayReferenceData
rayReferenceData
;
}
;
struct
TransformData
{
nsPoint
origin
;
Point3D
transformOrigin
;
nsRect
bounds
;
int32_t
appUnitsPerDevPixel
;
float
inheritedXScale
;
float
inheritedYScale
;
bool
hasPerspectiveParent
;
bool
snapToGrid
;
MotionPathData
?
motionPathData
;
}
;
struct
Animation
{
TimeStamp
originTime
;
TimeDuration
?
startTime
;
TimeDuration
delay
;
TimeDuration
endDelay
;
TimeDuration
holdTime
;
TimeDuration
duration
;
AnimationSegment
[
]
segments
;
float
iterations
;
float
iterationStart
;
uint8_t
direction
;
uint8_t
fillMode
;
nsCSSPropertyID
property
;
float
playbackRate
;
float
previousPlaybackRate
;
TimingFunction
easingFunction
;
uint8_t
iterationComposite
;
bool
isNotPlaying
;
bool
isNotAnimating
;
Animatable
baseStyle
;
TransformData
?
transformData
;
}
;
struct
CompositorAnimations
{
Animation
[
]
animations
;
uint64_t
id
;
}
;
struct
CommonLayerAttributes
{
LayerIntRegion
visibleRegion
;
EventRegions
eventRegions
;
bool
useClipRect
;
ParentLayerIntRect
clipRect
;
LayerHandle
maskLayer
;
LayerHandle
[
]
ancestorMaskLayers
;
CompositorAnimations
compositorAnimations
;
nsIntRegion
invalidRegion
;
ScrollMetadata
[
]
scrollMetadata
;
nsCString
displayListLog
;
}
;
struct
PaintedLayerAttributes
{
nsIntRegion
validRegion
;
}
;
struct
ContainerLayerAttributes
{
float
preXScale
;
float
preYScale
;
float
inheritedXScale
;
float
inheritedYScale
;
float
presShellResolution
;
}
;
struct
ColorLayerAttributes
{
LayerColor
color
;
IntRect
bounds
;
}
;
struct
CanvasLayerAttributes
{
SamplingFilter
samplingFilter
;
IntRect
bounds
;
}
;
struct
RefLayerAttributes
{
LayersId
id
;
EventRegionsOverride
eventRegionsOverride
;
LayerIntSize
remoteDocumentSize
;
}
;
struct
ImageLayerAttributes
{
SamplingFilter
samplingFilter
;
IntSize
scaleToSize
;
ScaleMode
scaleMode
;
}
;
union
SpecificLayerAttributes
{
null_t
;
PaintedLayerAttributes
;
ContainerLayerAttributes
;
ColorLayerAttributes
;
CanvasLayerAttributes
;
RefLayerAttributes
;
ImageLayerAttributes
;
}
;
struct
LayerAttributes
{
CommonLayerAttributes
common
;
SpecificLayerAttributes
specific
;
}
;
struct
PluginWindowData
{
uintptr_t
windowId
;
LayoutDeviceIntRect
[
]
clip
;
LayoutDeviceIntRect
bounds
;
bool
visible
;
}
;
struct
OpSetSimpleLayerAttributes
{
LayerHandle
layer
;
SimpleLayerAttributes
attrs
;
}
;
struct
OpSetLayerAttributes
{
LayerHandle
layer
;
LayerAttributes
attrs
;
}
;
struct
OpSetRoot
{
LayerHandle
root
;
}
;
struct
OpInsertAfter
{
LayerHandle
container
;
LayerHandle
childLayer
;
LayerHandle
after
;
}
;
struct
OpPrependChild
{
LayerHandle
container
;
LayerHandle
childLayer
;
}
;
struct
OpRemoveChild
{
LayerHandle
container
;
LayerHandle
childLayer
;
}
;
struct
OpRepositionChild
{
LayerHandle
container
;
LayerHandle
childLayer
;
LayerHandle
after
;
}
;
struct
OpRaiseToTopChild
{
LayerHandle
container
;
LayerHandle
childLayer
;
}
;
struct
OpSetDiagnosticTypes
{
DiagnosticTypes
diagnostics
;
}
;
struct
ShmemSection
{
Shmem
shmem
;
uint32_t
offset
;
uint32_t
size
;
}
;
struct
CrossProcessSemaphoreDescriptor
{
CrossProcessSemaphoreHandle
sem
;
}
;
union
ReadLockDescriptor
{
ShmemSection
;
CrossProcessSemaphoreDescriptor
;
uintptr_t
;
null_t
;
}
;
struct
TexturedTileDescriptor
{
PTexture
texture
;
PTexture
?
textureOnWhite
;
IntRect
updateRect
;
bool
readLocked
;
bool
readLockedOnWhite
;
bool
wasPlaceholder
;
}
;
struct
PlaceholderTileDescriptor
{
}
;
union
TileDescriptor
{
TexturedTileDescriptor
;
PlaceholderTileDescriptor
;
}
;
struct
SurfaceDescriptorTiles
{
nsIntRegion
validRegion
;
TileDescriptor
[
]
tiles
;
IntPoint
tileOrigin
;
IntSize
tileSize
;
int
firstTileX
;
int
firstTileY
;
int
retainedWidth
;
int
retainedHeight
;
float
resolution
;
float
frameXResolution
;
float
frameYResolution
;
bool
isProgressive
;
}
;
struct
OpUseTiledLayerBuffer
{
SurfaceDescriptorTiles
tileLayerDescriptor
;
}
;
struct
OpPaintTextureRegion
{
ThebesBufferData
bufferData
;
nsIntRegion
updatedRegion
;
}
;
struct
OpRemoveTexture
{
PTexture
texture
;
}
;
struct
TimedTexture
{
PTexture
texture
;
TimeStamp
timeStamp
;
IntRect
picture
;
uint32_t
frameID
;
uint32_t
producerID
;
bool
readLocked
;
}
;
struct
OpUseTexture
{
TimedTexture
[
]
textures
;
}
;
struct
OpUseComponentAlphaTextures
{
PTexture
textureOnBlack
;
PTexture
textureOnWhite
;
bool
readLockedBlack
;
bool
readLockedWhite
;
}
;
struct
OpNotifyNotUsed
{
uint64_t
TextureId
;
uint64_t
fwdTransactionId
;
}
;
union
CompositableOperationDetail
{
OpPaintTextureRegion
;
OpUseTiledLayerBuffer
;
OpRemoveTexture
;
OpUseTexture
;
OpUseComponentAlphaTextures
;
}
;
struct
CompositableOperation
{
CompositableHandle
compositable
;
CompositableOperationDetail
detail
;
}
;
union
Edit
{
OpCreatePaintedLayer
;
OpCreateContainerLayer
;
OpCreateImageLayer
;
OpCreateColorLayer
;
OpCreateCanvasLayer
;
OpCreateRefLayer
;
OpSetDiagnosticTypes
;
OpSetRoot
;
OpInsertAfter
;
OpPrependChild
;
OpRemoveChild
;
OpRepositionChild
;
OpRaiseToTopChild
;
OpAttachCompositable
;
OpAttachAsyncCompositable
;
CompositableOperation
;
}
;
union
OpDestroy
{
PTexture
;
CompositableHandle
;
}
;
struct
OpContentBufferSwap
{
CompositableHandle
compositable
;
nsIntRegion
frontUpdatedRegion
;
}
;
struct
ImageCompositeNotification
{
CompositableHandle
compositable
;
TimeStamp
imageTimeStamp
;
TimeStamp
firstCompositeTimeStamp
;
uint32_t
frameID
;
uint32_t
producerID
;
}
;
union
AsyncParentMessageData
{
OpNotifyNotUsed
;
}
;
struct
PaintTiming
{
float
serializeMs
;
float
sendMs
;
float
dlMs
;
float
dl2Ms
;
float
flbMs
;
float
rasterMs
;
}
;
struct
TransactionInfo
{
Edit
[
]
cset
;
OpSetSimpleLayerAttributes
[
]
setSimpleAttrs
;
OpSetLayerAttributes
[
]
setAttrs
;
CompositableOperation
[
]
paints
;
OpDestroy
[
]
toDestroy
;
uint64_t
fwdTransactionId
;
TransactionId
id
;
TargetConfig
targetConfig
;
PluginWindowData
[
]
plugins
;
bool
isFirstPaint
;
FocusTarget
focusTarget
;
bool
scheduleComposite
;
uint32_t
paintSequenceNumber
;
bool
isRepeatTransaction
;
VsyncId
vsyncId
;
TimeStamp
vsyncStart
;
TimeStamp
refreshStart
;
TimeStamp
transactionStart
;
bool
containsSVG
;
nsCString
url
;
TimeStamp
fwdTime
;
CompositionPayload
[
]
payload
;
}
;
union
OMTAValue
{
null_t
;
nscolor
;
float
;
Matrix4x4
;
}
;
}
}
