#
include
"
LayerTreeOwnerTracker
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
dom
/
ContentParent
.
h
"
#
include
"
mozilla
/
gfx
/
GPUChild
.
h
"
#
include
"
mozilla
/
gfx
/
GPUProcessManager
.
h
"
#
include
<
utility
>
namespace
mozilla
{
namespace
layers
{
static
StaticAutoPtr
<
LayerTreeOwnerTracker
>
sSingleton
;
LayerTreeOwnerTracker
:
:
LayerTreeOwnerTracker
(
)
:
mLayerIdsLock
(
"
LayerTreeOwnerTrackerLock
"
)
{
}
void
LayerTreeOwnerTracker
:
:
Initialize
(
)
{
MOZ_ASSERT
(
!
sSingleton
)
;
sSingleton
=
new
LayerTreeOwnerTracker
(
)
;
}
void
LayerTreeOwnerTracker
:
:
Shutdown
(
)
{
sSingleton
=
nullptr
;
}
LayerTreeOwnerTracker
*
LayerTreeOwnerTracker
:
:
Get
(
)
{
return
sSingleton
;
}
void
LayerTreeOwnerTracker
:
:
Map
(
uint64_t
aLayersId
base
:
:
ProcessId
aProcessId
)
{
MutexAutoLock
lock
(
mLayerIdsLock
)
;
mLayerIds
[
aLayersId
]
=
aProcessId
;
}
bool
LayerTreeOwnerTracker
:
:
IsMapped
(
uint64_t
aLayersId
base
:
:
ProcessId
aProcessId
)
{
MutexAutoLock
lock
(
mLayerIdsLock
)
;
auto
iter
=
mLayerIds
.
find
(
aLayersId
)
;
return
iter
!
=
mLayerIds
.
end
(
)
&
&
iter
-
>
second
=
=
aProcessId
;
}
}
}
