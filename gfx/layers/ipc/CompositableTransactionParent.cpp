#
include
"
CompositableTransactionParent
.
h
"
#
include
"
CompositableHost
.
h
"
#
include
"
CompositorBridgeParent
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
layers
/
ImageBridgeParent
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
TextureHost
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderImageHost
.
h
"
#
include
"
mozilla
/
mozalloc
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsDebug
.
h
"
#
include
"
nsRegion
.
h
"
namespace
mozilla
{
namespace
layers
{
bool
CompositableParentManager
:
:
ReceiveCompositableUpdate
(
const
CompositableOperation
&
aEdit
)
{
RefPtr
<
CompositableHost
>
compositable
=
FindCompositable
(
aEdit
.
compositable
(
)
)
;
if
(
!
compositable
)
{
return
false
;
}
return
ReceiveCompositableUpdate
(
aEdit
.
detail
(
)
WrapNotNull
(
compositable
)
aEdit
.
compositable
(
)
)
;
}
bool
CompositableParentManager
:
:
ReceiveCompositableUpdate
(
const
CompositableOperationDetail
&
aDetail
NotNull
<
CompositableHost
*
>
aCompositable
const
CompositableHandle
&
aHandle
)
{
switch
(
aDetail
.
type
(
)
)
{
case
CompositableOperationDetail
:
:
TOpRemoveTexture
:
{
const
OpRemoveTexture
&
op
=
aDetail
.
get_OpRemoveTexture
(
)
;
RefPtr
<
TextureHost
>
tex
=
TextureHost
:
:
AsTextureHost
(
op
.
texture
(
)
.
AsParent
(
)
)
;
MOZ_ASSERT
(
tex
.
get
(
)
)
;
aCompositable
-
>
RemoveTextureHost
(
tex
)
;
break
;
}
case
CompositableOperationDetail
:
:
TOpUseTexture
:
{
const
OpUseTexture
&
op
=
aDetail
.
get_OpUseTexture
(
)
;
AutoTArray
<
CompositableHost
:
:
TimedTexture
4
>
textures
;
for
(
auto
&
timedTexture
:
op
.
textures
(
)
)
{
CompositableHost
:
:
TimedTexture
*
t
=
textures
.
AppendElement
(
)
;
t
-
>
mTexture
=
TextureHost
:
:
AsTextureHost
(
timedTexture
.
texture
(
)
.
AsParent
(
)
)
;
MOZ_ASSERT
(
t
-
>
mTexture
)
;
t
-
>
mTimeStamp
=
timedTexture
.
timeStamp
(
)
;
t
-
>
mPictureRect
=
timedTexture
.
picture
(
)
;
t
-
>
mFrameID
=
timedTexture
.
frameID
(
)
;
t
-
>
mProducerID
=
timedTexture
.
producerID
(
)
;
if
(
timedTexture
.
readLocked
(
)
)
{
t
-
>
mTexture
-
>
SetReadLocked
(
)
;
}
}
if
(
textures
.
Length
(
)
>
0
)
{
aCompositable
-
>
UseTextureHost
(
textures
)
;
for
(
auto
&
timedTexture
:
op
.
textures
(
)
)
{
RefPtr
<
TextureHost
>
texture
=
TextureHost
:
:
AsTextureHost
(
timedTexture
.
texture
(
)
.
AsParent
(
)
)
;
if
(
texture
)
{
texture
-
>
SetLastFwdTransactionId
(
mFwdTransactionId
)
;
MOZ_ASSERT
(
texture
-
>
NumCompositableRefs
(
)
>
0
)
;
}
}
}
break
;
}
case
CompositableOperationDetail
:
:
TOpUseRemoteTexture
:
{
const
OpUseRemoteTexture
&
op
=
aDetail
.
get_OpUseRemoteTexture
(
)
;
auto
*
host
=
aCompositable
-
>
AsWebRenderImageHost
(
)
;
MOZ_ASSERT
(
host
)
;
host
-
>
PushPendingRemoteTexture
(
op
.
textureId
(
)
op
.
ownerId
(
)
GetChildProcessId
(
)
op
.
size
(
)
op
.
textureFlags
(
)
)
;
host
-
>
UseRemoteTexture
(
)
;
break
;
}
default
:
{
MOZ_ASSERT
(
false
"
bad
type
"
)
;
}
}
return
true
;
}
void
CompositableParentManager
:
:
DestroyActor
(
const
OpDestroy
&
aOp
)
{
switch
(
aOp
.
type
(
)
)
{
case
OpDestroy
:
:
TPTexture
:
{
auto
actor
=
aOp
.
get_PTexture
(
)
.
AsParent
(
)
;
TextureHost
:
:
ReceivedDestroy
(
actor
)
;
break
;
}
case
OpDestroy
:
:
TCompositableHandle
:
{
ReleaseCompositable
(
aOp
.
get_CompositableHandle
(
)
)
;
break
;
}
default
:
{
MOZ_ASSERT
(
false
"
unsupported
type
"
)
;
}
}
}
RefPtr
<
CompositableHost
>
CompositableParentManager
:
:
AddCompositable
(
const
CompositableHandle
&
aHandle
const
TextureInfo
&
aInfo
)
{
if
(
mCompositables
.
find
(
aHandle
.
Value
(
)
)
!
=
mCompositables
.
end
(
)
)
{
NS_ERROR
(
"
Client
should
not
allocate
duplicate
handles
"
)
;
return
nullptr
;
}
if
(
!
aHandle
)
{
NS_ERROR
(
"
Client
should
not
allocate
0
as
a
handle
"
)
;
return
nullptr
;
}
RefPtr
<
CompositableHost
>
host
=
CompositableHost
:
:
Create
(
aInfo
)
;
if
(
!
host
)
{
return
nullptr
;
}
mCompositables
[
aHandle
.
Value
(
)
]
=
host
;
return
host
;
}
RefPtr
<
CompositableHost
>
CompositableParentManager
:
:
FindCompositable
(
const
CompositableHandle
&
aHandle
)
{
auto
iter
=
mCompositables
.
find
(
aHandle
.
Value
(
)
)
;
if
(
iter
=
=
mCompositables
.
end
(
)
)
{
return
nullptr
;
}
return
iter
-
>
second
;
}
void
CompositableParentManager
:
:
ReleaseCompositable
(
const
CompositableHandle
&
aHandle
)
{
auto
iter
=
mCompositables
.
find
(
aHandle
.
Value
(
)
)
;
if
(
iter
=
=
mCompositables
.
end
(
)
)
{
return
;
}
iter
-
>
second
-
>
OnReleased
(
)
;
mCompositables
.
erase
(
iter
)
;
}
}
}
