#
ifndef
MOZILLA_LAYERS_KNOWSCOMPOSITOR
#
define
MOZILLA_LAYERS_KNOWSCOMPOSITOR
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
"
mozilla
/
layers
/
CompositorTypes
.
h
"
#
include
"
mozilla
/
DataMutex
.
h
"
#
include
"
mozilla
/
layers
/
SyncObject
.
h
"
namespace
mozilla
:
:
layers
{
class
TextureForwarder
;
class
LayersIPCActor
;
class
ImageBridgeChild
;
class
KnowsCompositor
{
public
:
NS_INLINE_DECL_PURE_VIRTUAL_REFCOUNTING
KnowsCompositor
(
)
;
virtual
~
KnowsCompositor
(
)
;
void
IdentifyTextureHost
(
const
TextureFactoryIdentifier
&
aIdentifier
)
;
RefPtr
<
SyncObjectClient
>
GetSyncObject
(
)
{
auto
lock
=
mData
.
Lock
(
)
;
if
(
lock
.
ref
(
)
.
mSyncObject
)
{
lock
.
ref
(
)
.
mSyncObject
-
>
EnsureInitialized
(
)
;
}
return
lock
.
ref
(
)
.
mSyncObject
;
}
virtual
bool
IsThreadSafe
(
)
const
{
return
true
;
}
virtual
RefPtr
<
KnowsCompositor
>
GetForMedia
(
)
{
return
RefPtr
<
KnowsCompositor
>
(
this
)
;
}
int32_t
GetMaxTextureSize
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mMaxTextureSize
;
}
LayersBackend
GetCompositorBackendType
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mParentBackend
;
}
WebRenderCompositor
GetWebRenderCompositorType
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mWebRenderCompositor
;
}
bool
SupportsTextureBlitting
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mSupportsTextureBlitting
;
}
bool
SupportsPartialUploads
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mSupportsPartialUploads
;
}
bool
SupportsComponentAlpha
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mSupportsComponentAlpha
;
}
bool
SupportsD3D11NV12
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mSupportsD3D11NV12
;
}
bool
SupportsD3D11
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
SupportsD3D11
(
lock
.
ref
(
)
.
mTextureFactoryIdentifier
)
;
}
static
bool
SupportsD3D11
(
const
TextureFactoryIdentifier
aTextureFactoryIdentifier
)
{
return
aTextureFactoryIdentifier
.
mParentBackend
=
=
layers
:
:
LayersBackend
:
:
LAYERS_WR
&
&
(
aTextureFactoryIdentifier
.
mCompositorUseANGLE
|
|
aTextureFactoryIdentifier
.
mWebRenderCompositor
=
=
layers
:
:
WebRenderCompositor
:
:
D3D11
)
;
}
bool
GetCompositorUseANGLE
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mCompositorUseANGLE
;
}
bool
GetCompositorUseDComp
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mCompositorUseDComp
;
}
bool
GetUseCompositorWnd
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mUseCompositorWnd
;
}
WebRenderBackend
GetWebRenderBackend
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
MOZ_ASSERT
(
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mParentBackend
=
=
layers
:
:
LayersBackend
:
:
LAYERS_WR
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mWebRenderBackend
;
}
bool
UsingHardwareWebRender
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mParentBackend
=
=
layers
:
:
LayersBackend
:
:
LAYERS_WR
&
&
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mWebRenderBackend
=
=
WebRenderBackend
:
:
HARDWARE
;
}
bool
UsingSoftwareWebRender
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mParentBackend
=
=
layers
:
:
LayersBackend
:
:
LAYERS_WR
&
&
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mWebRenderBackend
=
=
WebRenderBackend
:
:
SOFTWARE
;
}
bool
UsingSoftwareWebRenderD3D11
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mParentBackend
=
=
layers
:
:
LayersBackend
:
:
LAYERS_WR
&
&
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mWebRenderBackend
=
=
WebRenderBackend
:
:
SOFTWARE
&
&
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mWebRenderCompositor
=
=
layers
:
:
WebRenderCompositor
:
:
D3D11
;
}
bool
UsingSoftwareWebRenderOpenGL
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mParentBackend
=
=
layers
:
:
LayersBackend
:
:
LAYERS_WR
&
&
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mWebRenderBackend
=
=
WebRenderBackend
:
:
SOFTWARE
&
&
lock
.
ref
(
)
.
mTextureFactoryIdentifier
.
mWebRenderCompositor
=
=
layers
:
:
WebRenderCompositor
:
:
OPENGL
;
}
TextureFactoryIdentifier
GetTextureFactoryIdentifier
(
)
const
{
auto
lock
=
mData
.
Lock
(
)
;
return
lock
.
ref
(
)
.
mTextureFactoryIdentifier
;
}
int32_t
GetSerial
(
)
const
{
return
mSerial
;
}
virtual
void
SyncWithCompositor
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Unimplemented
"
)
;
}
virtual
TextureForwarder
*
GetTextureForwarder
(
)
=
0
;
virtual
LayersIPCActor
*
GetLayersIPCActor
(
)
=
0
;
protected
:
struct
SharedData
{
TextureFactoryIdentifier
mTextureFactoryIdentifier
;
RefPtr
<
SyncObjectClient
>
mSyncObject
;
}
;
mutable
DataMutex
<
SharedData
>
mData
;
const
int32_t
mSerial
;
static
mozilla
:
:
Atomic
<
int32_t
>
sSerialCounter
;
}
;
class
KnowsCompositorMediaProxy
:
public
KnowsCompositor
{
public
:
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
KnowsCompositorMediaProxy
override
)
;
explicit
KnowsCompositorMediaProxy
(
const
TextureFactoryIdentifier
&
aIdentifier
)
;
TextureForwarder
*
GetTextureForwarder
(
)
override
;
LayersIPCActor
*
GetLayersIPCActor
(
)
override
;
void
SyncWithCompositor
(
)
override
;
protected
:
virtual
~
KnowsCompositorMediaProxy
(
)
;
RefPtr
<
ImageBridgeChild
>
mThreadSafeAllocator
;
}
;
}
#
endif
