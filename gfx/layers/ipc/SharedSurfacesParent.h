#
ifndef
MOZILLA_GFX_SHAREDSURFACESPARENT_H
#
define
MOZILLA_GFX_SHAREDSURFACESPARENT_H
#
include
<
stdint
.
h
>
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Point
.
h
"
#
include
"
mozilla
/
layers
/
LayersSurfaces
.
h
"
#
include
"
mozilla
/
webrender
/
WebRenderTypes
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
namespace
mozilla
{
namespace
gfx
{
class
DataSourceSurface
;
class
SourceSurfaceSharedData
;
class
SourceSurfaceSharedDataWrapper
;
}
namespace
layers
{
class
SharedSurfacesChild
;
class
SharedSurfacesParent
final
{
public
:
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
static
already_AddRefed
<
gfx
:
:
DataSourceSurface
>
Get
(
const
wr
:
:
ExternalImageId
&
aId
)
;
static
void
Add
(
const
wr
:
:
ExternalImageId
&
aId
const
SurfaceDescriptorShared
&
aDesc
base
:
:
ProcessId
aPid
)
;
static
void
Remove
(
const
wr
:
:
ExternalImageId
&
aId
)
;
static
void
DestroyProcess
(
base
:
:
ProcessId
aPid
)
;
~
SharedSurfacesParent
(
)
;
private
:
friend
class
SharedSurfacesChild
;
SharedSurfacesParent
(
)
;
static
void
AddSameProcess
(
const
wr
:
:
ExternalImageId
&
aId
gfx
:
:
SourceSurfaceSharedData
*
aSurface
)
;
static
void
RemoveSameProcess
(
const
wr
:
:
ExternalImageId
&
aId
)
;
static
StaticAutoPtr
<
SharedSurfacesParent
>
sInstance
;
nsRefPtrHashtable
<
nsUint64HashKey
gfx
:
:
SourceSurfaceSharedDataWrapper
>
mSurfaces
;
}
;
}
}
#
endif
